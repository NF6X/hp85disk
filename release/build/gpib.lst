
gpib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00001610  00800100  0001d4b6  0001d54a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0001d4b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000a38  00801710  00801710  0001eb5a  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0001eb5a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001eb6c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000017d8  00000000  00000000  0001ebac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00029132  00000000  00000000  00020384  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000063ac  00000000  00000000  000494b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000122e5  00000000  00000000  0004f862  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00005210  00000000  00000000  00061b48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000494b  00000000  00000000  00066d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00023d5b  00000000  00000000  0006b6a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000017a8  00000000  00000000  0008f3fe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 9a 24 	jmp	0x4934	; 0x4934 <__ctors_end>
       4:	0c 94 b9 24 	jmp	0x4972	; 0x4972 <__bad_interrupt>
       8:	0c 94 b9 24 	jmp	0x4972	; 0x4972 <__bad_interrupt>
       c:	0c 94 b9 24 	jmp	0x4972	; 0x4972 <__bad_interrupt>
      10:	0c 94 b9 24 	jmp	0x4972	; 0x4972 <__bad_interrupt>
      14:	0c 94 b9 24 	jmp	0x4972	; 0x4972 <__bad_interrupt>
      18:	0c 94 b9 24 	jmp	0x4972	; 0x4972 <__bad_interrupt>
      1c:	0c 94 b9 24 	jmp	0x4972	; 0x4972 <__bad_interrupt>
      20:	0c 94 b9 24 	jmp	0x4972	; 0x4972 <__bad_interrupt>
      24:	0c 94 b9 24 	jmp	0x4972	; 0x4972 <__bad_interrupt>
      28:	0c 94 b9 24 	jmp	0x4972	; 0x4972 <__bad_interrupt>
      2c:	0c 94 b9 24 	jmp	0x4972	; 0x4972 <__bad_interrupt>
      30:	0c 94 b9 24 	jmp	0x4972	; 0x4972 <__bad_interrupt>
      34:	0c 94 3b 35 	jmp	0x6a76	; 0x6a76 <__vector_13>
      38:	0c 94 b9 24 	jmp	0x4972	; 0x4972 <__bad_interrupt>
      3c:	0c 94 b9 24 	jmp	0x4972	; 0x4972 <__bad_interrupt>
      40:	0c 94 b9 24 	jmp	0x4972	; 0x4972 <__bad_interrupt>
      44:	0c 94 b9 24 	jmp	0x4972	; 0x4972 <__bad_interrupt>
      48:	0c 94 b9 24 	jmp	0x4972	; 0x4972 <__bad_interrupt>
      4c:	0c 94 b9 24 	jmp	0x4972	; 0x4972 <__bad_interrupt>
      50:	0c 94 04 2c 	jmp	0x5808	; 0x5808 <__vector_20>
      54:	0c 94 b9 24 	jmp	0x4972	; 0x4972 <__bad_interrupt>
      58:	0c 94 b9 24 	jmp	0x4972	; 0x4972 <__bad_interrupt>
      5c:	0c 94 b9 24 	jmp	0x4972	; 0x4972 <__bad_interrupt>
      60:	0c 94 b9 24 	jmp	0x4972	; 0x4972 <__bad_interrupt>
      64:	0c 94 b9 24 	jmp	0x4972	; 0x4972 <__bad_interrupt>
      68:	0c 94 d7 2e 	jmp	0x5dae	; 0x5dae <__vector_26>
      6c:	0c 94 b9 24 	jmp	0x4972	; 0x4972 <__bad_interrupt>
      70:	0c 94 b9 24 	jmp	0x4972	; 0x4972 <__bad_interrupt>
      74:	0c 94 b9 24 	jmp	0x4972	; 0x4972 <__bad_interrupt>
      78:	0c 94 b9 24 	jmp	0x4972	; 0x4972 <__bad_interrupt>
      7c:	0c 94 b9 24 	jmp	0x4972	; 0x4972 <__bad_interrupt>
      80:	0c 94 b9 24 	jmp	0x4972	; 0x4972 <__bad_interrupt>
      84:	0c 94 b9 24 	jmp	0x4972	; 0x4972 <__bad_interrupt>
      88:	0c 94 b9 24 	jmp	0x4972	; 0x4972 <__bad_interrupt>
      8c:	06 45       	sbci	r16, 0x56	; 86
      8e:	59 46       	sbci	r21, 0x69	; 105
      90:	36 45       	sbci	r19, 0x56	; 86
      92:	32 46       	sbci	r19, 0x62	; 98
      94:	32 46       	sbci	r19, 0x62	; 98
      96:	59 46       	sbci	r21, 0x69	; 105
      98:	59 46       	sbci	r21, 0x69	; 105
      9a:	59 46       	sbci	r21, 0x69	; 105
      9c:	59 46       	sbci	r21, 0x69	; 105
      9e:	59 46       	sbci	r21, 0x69	; 105
      a0:	59 46       	sbci	r21, 0x69	; 105
      a2:	59 46       	sbci	r21, 0x69	; 105
      a4:	59 46       	sbci	r21, 0x69	; 105
      a6:	06 45       	sbci	r16, 0x56	; 86
      a8:	00 45       	sbci	r16, 0x50	; 80
      aa:	59 46       	sbci	r21, 0x69	; 105
      ac:	59 46       	sbci	r21, 0x69	; 105
      ae:	59 46       	sbci	r21, 0x69	; 105
      b0:	59 46       	sbci	r21, 0x69	; 105
      b2:	30 45       	sbci	r19, 0x50	; 80
      b4:	59 46       	sbci	r21, 0x69	; 105
      b6:	59 46       	sbci	r21, 0x69	; 105
      b8:	06 45       	sbci	r16, 0x56	; 86
      ba:	59 46       	sbci	r21, 0x69	; 105
      bc:	59 46       	sbci	r21, 0x69	; 105
      be:	59 46       	sbci	r21, 0x69	; 105
      c0:	59 46       	sbci	r21, 0x69	; 105
      c2:	59 46       	sbci	r21, 0x69	; 105
      c4:	59 46       	sbci	r21, 0x69	; 105
      c6:	59 46       	sbci	r21, 0x69	; 105
      c8:	59 46       	sbci	r21, 0x69	; 105
      ca:	59 46       	sbci	r21, 0x69	; 105
      cc:	06 45       	sbci	r16, 0x56	; 86
      ce:	54 46       	sbci	r21, 0x64	; 100
      d0:	36 45       	sbci	r19, 0x56	; 86
      d2:	32 46       	sbci	r19, 0x62	; 98
      d4:	32 46       	sbci	r19, 0x62	; 98
      d6:	59 46       	sbci	r21, 0x69	; 105
      d8:	59 46       	sbci	r21, 0x69	; 105
      da:	59 46       	sbci	r21, 0x69	; 105
      dc:	59 46       	sbci	r21, 0x69	; 105
      de:	59 46       	sbci	r21, 0x69	; 105
      e0:	59 46       	sbci	r21, 0x69	; 105
      e2:	59 46       	sbci	r21, 0x69	; 105
      e4:	59 46       	sbci	r21, 0x69	; 105
      e6:	06 45       	sbci	r16, 0x56	; 86
      e8:	00 45       	sbci	r16, 0x50	; 80
      ea:	59 46       	sbci	r21, 0x69	; 105
      ec:	59 46       	sbci	r21, 0x69	; 105
      ee:	4f 46       	sbci	r20, 0x6F	; 111
      f0:	59 46       	sbci	r21, 0x69	; 105
      f2:	30 45       	sbci	r19, 0x50	; 80
      f4:	59 46       	sbci	r21, 0x69	; 105
      f6:	59 46       	sbci	r21, 0x69	; 105
      f8:	06 45       	sbci	r16, 0x56	; 86
      fa:	7b 46       	sbci	r23, 0x6B	; 107
      fc:	62 47       	sbci	r22, 0x72	; 114
      fe:	71 46       	sbci	r23, 0x61	; 97
     100:	cf 46       	sbci	r28, 0x6F	; 111
     102:	b6 46       	sbci	r27, 0x66	; 102
     104:	62 47       	sbci	r22, 0x72	; 114
     106:	62 47       	sbci	r22, 0x72	; 114
     108:	62 47       	sbci	r22, 0x72	; 114
     10a:	62 47       	sbci	r22, 0x72	; 114
     10c:	62 47       	sbci	r22, 0x72	; 114
     10e:	62 47       	sbci	r22, 0x72	; 114
     110:	62 47       	sbci	r22, 0x72	; 114
     112:	62 47       	sbci	r22, 0x72	; 114
     114:	85 46       	sbci	r24, 0x65	; 101
     116:	99 46       	sbci	r25, 0x69	; 105
     118:	62 47       	sbci	r22, 0x72	; 114
     11a:	62 47       	sbci	r22, 0x72	; 114
     11c:	62 47       	sbci	r22, 0x72	; 114
     11e:	62 47       	sbci	r22, 0x72	; 114
     120:	6d 46       	sbci	r22, 0x6D	; 109
     122:	62 47       	sbci	r22, 0x72	; 114
     124:	62 47       	sbci	r22, 0x72	; 114
     126:	99 46       	sbci	r25, 0x69	; 105
     128:	62 47       	sbci	r22, 0x72	; 114
     12a:	62 47       	sbci	r22, 0x72	; 114
     12c:	62 47       	sbci	r22, 0x72	; 114
     12e:	62 47       	sbci	r22, 0x72	; 114
     130:	62 47       	sbci	r22, 0x72	; 114
     132:	62 47       	sbci	r22, 0x72	; 114
     134:	62 47       	sbci	r22, 0x72	; 114
     136:	62 47       	sbci	r22, 0x72	; 114
     138:	62 47       	sbci	r22, 0x72	; 114
     13a:	7b 46       	sbci	r23, 0x6B	; 107
     13c:	fd 46       	sbci	r31, 0x6D	; 109
     13e:	71 46       	sbci	r23, 0x61	; 97
     140:	cf 46       	sbci	r28, 0x6F	; 111
     142:	b6 46       	sbci	r27, 0x66	; 102
     144:	62 47       	sbci	r22, 0x72	; 114
     146:	62 47       	sbci	r22, 0x72	; 114
     148:	62 47       	sbci	r22, 0x72	; 114
     14a:	62 47       	sbci	r22, 0x72	; 114
     14c:	62 47       	sbci	r22, 0x72	; 114
     14e:	62 47       	sbci	r22, 0x72	; 114
     150:	62 47       	sbci	r22, 0x72	; 114
     152:	62 47       	sbci	r22, 0x72	; 114
     154:	85 46       	sbci	r24, 0x65	; 101
     156:	99 46       	sbci	r25, 0x69	; 105
     158:	62 47       	sbci	r22, 0x72	; 114
     15a:	62 47       	sbci	r22, 0x72	; 114
     15c:	fd 46       	sbci	r31, 0x6D	; 109
     15e:	62 47       	sbci	r22, 0x72	; 114
     160:	6d 46       	sbci	r22, 0x6D	; 109
     162:	62 47       	sbci	r22, 0x72	; 114
     164:	62 47       	sbci	r22, 0x72	; 114
     166:	99 46       	sbci	r25, 0x69	; 105
     168:	79 6b       	ori	r23, 0xB9	; 185
     16a:	83 6b       	ori	r24, 0xB3	; 179
     16c:	8b 6b       	ori	r24, 0xBB	; 187
     16e:	8e 6b       	ori	r24, 0xBE	; 190
     170:	91 6b       	ori	r25, 0xB1	; 177
     172:	94 6b       	ori	r25, 0xB4	; 180
     174:	97 6b       	ori	r25, 0xB7	; 183
     176:	9a 6b       	ori	r25, 0xBA	; 186
     178:	9d 6b       	ori	r25, 0xBD	; 189
     17a:	ce 88       	ldd	r12, Y+22	; 0x16
     17c:	f7 88       	ldd	r15, Z+23	; 0x17
     17e:	1e 89       	ldd	r17, Y+22	; 0x16
     180:	38 89       	ldd	r19, Y+16	; 0x10
     182:	41 89       	ldd	r20, Z+17	; 0x11
     184:	63 89       	ldd	r22, Z+19	; 0x13
     186:	7e 89       	ldd	r23, Y+22	; 0x16
     188:	8d 89       	ldd	r24, Y+21	; 0x15
     18a:	d5 89       	ldd	r29, Z+21	; 0x15
     18c:	a9 89       	ldd	r26, Y+17	; 0x11
     18e:	be 8b       	std	Y+22, r27	; 0x16
     190:	c6 8b       	std	Z+22, r28	; 0x16
     192:	cb 8b       	std	Y+19, r28	; 0x13
     194:	ef 8b       	std	Y+23, r30	; 0x17
     196:	f9 8b       	std	Y+17, r31	; 0x11
     198:	43 8c       	ldd	r4, Z+27	; 0x1b
     19a:	0e 8c       	ldd	r0, Y+30	; 0x1e
     19c:	0e 8c       	ldd	r0, Y+30	; 0x1e
     19e:	06 8c       	ldd	r0, Z+30	; 0x1e
     1a0:	20 99       	sbic	0x04, 0	; 4
     1a2:	42 9a       	sbi	0x08, 2	; 8
     1a4:	a2 9a       	sbi	0x14, 2	; 20
     1a6:	10 9b       	sbis	0x02, 0	; 2
     1a8:	26 9b       	sbis	0x04, 6	; 4
     1aa:	51 9b       	sbis	0x0a, 1	; 10
     1ac:	36 9c       	mul	r3, r6
     1ae:	f3 9d       	mul	r31, r3
     1b0:	f3 9d       	mul	r31, r3
     1b2:	f3 9d       	mul	r31, r3
     1b4:	7e 9c       	mul	r7, r14
     1b6:	b2 9c       	mul	r11, r2
     1b8:	5a 9d       	mul	r21, r10
     1ba:	7c 9d       	mul	r23, r12
     1bc:	e2 99       	sbic	0x1c, 2	; 28
     1be:	fd 99       	sbic	0x1f, 5	; 31
     1c0:	58 be       	out	0x38, r5	; 56
     1c2:	17 be       	out	0x37, r1	; 55
     1c4:	17 be       	out	0x37, r1	; 55
     1c6:	17 be       	out	0x37, r1	; 55
     1c8:	17 be       	out	0x37, r1	; 55
     1ca:	db bd       	out	0x2b, r29	; 43
     1cc:	e2 bd       	out	0x22, r30	; 34
     1ce:	e9 bd       	out	0x29, r30	; 41
     1d0:	f9 bd       	out	0x29, r31	; 41
     1d2:	07 be       	out	0x37, r0	; 55
     1d4:	00 be       	out	0x30, r0	; 48

000001d6 <__trampolines_end>:
     1d6:	6e 61       	ori	r22, 0x1E	; 30
     1d8:	6e 00       	.word	0x006e	; ????

000001da <__c.2332>:
     1da:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1ea:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1fa:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     20a:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     21a:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     22a:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     23a:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     24a:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     25a:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     26a:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     27a:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     28a:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     29a:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2aa:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2ba:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     2ca:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000002d8 <__c.3740>:
     2d8:	63 73 5f 64 69 73 61 62 6c 65 20 77 61 73 3a 20     cs_disable was: 
     2e8:	25 64 2c 20 77 61 6e 74 3a 20 25 64 0a 00           %d, want: %d..

000002f6 <__c.3735>:
     2f6:	63 73 5f 65 6e 61 62 6c 65 20 77 61 73 3a 20 25     cs_enable was: %
     306:	64 2c 20 77 61 6e 74 3a 20 25 64 0a 00              d, want: %d..

00000313 <__c.3766>:
     313:	73 61 66 65 66 72 65 65 3a 20 46 52 45 45 20 45     safefree: FREE E
     323:	52 52 4f 52 20 28 25 75 29 2c 20 74 6f 70 3a 28     RROR (%u), top:(
     333:	25 75 29 0a 00                                      %u)..

00000338 <__c.3757>:
     338:	73 61 66 65 6d 61 6c 6c 6f 63 28 25 64 29 20 66     safemalloc(%d) f
     348:	61 69 6c 65 64 21 0a 00                             ailed!..

00000350 <__c.3751>:
     350:	73 61 66 65 63 61 6c 6c 6f 63 28 25 64 2c 25 64     safecalloc(%d,%d
     360:	29 20 66 61 69 6c 65 64 21 0a 00                    ) failed!..

0000036b <__c.3736>:
     36b:	20 20 5f 5f 62 72 6b 76 61 6c 3a 20 20 20 20 25       __brkval:    %
     37b:	35 75 0a 00                                         5u..

0000037f <__c.3734>:
     37f:	20 20 4d 61 6c 6c 6f 63 20 73 74 61 72 74 20 25       Malloc start %
     38f:	35 75 20 20 65 6e 64 3a 20 25 35 75 0a 00           5u  end: %5u..

0000039d <__c.3732>:
     39d:	20 20 48 65 61 70 3a 20 73 74 61 72 74 3a 20 25       Heap: start: %
     3ad:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000003bb <__c.3730>:
     3bb:	20 20 44 61 74 61 20 20 73 74 61 72 74 3a 20 25       Data  start: %
     3cb:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000003d9 <__c.3728>:
     3d9:	20 20 42 53 53 20 20 20 73 74 61 72 74 3a 20 25       BSS   start: %
     3e9:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000003f7 <__c.3726>:
     3f7:	20 20 53 74 61 63 6b 20 46 72 65 65 3a 20 20 25       Stack Free:  %
     407:	75 0a 00                                            u..

0000040a <__c.3724>:
     40a:	20 20 53 74 61 63 6b 20 54 6f 70 3a 20 20 20 25       Stack Top:   %
     41a:	75 0a 00                                            u..

0000041d <__c.3722>:
     41d:	46 72 65 65 20 52 61 6d 3a 25 75 0a 00              Free Ram:%u..

0000042a <__c.3720>:
     42a:	53 50 49 30 5f 4d 6f 64 65 3a 20 49 6e 76 61 6c     SPI0_Mode: Inval
     43a:	69 64 20 6d 6f 64 65 28 25 64 29 0a 00              id mode(%d)..

00000447 <__c.3744>:
     447:	72 74 63 5f 72 65 61 64 20 65 72 72 6f 72 0a 00     rtc_read error..

00000457 <__c.3737>:
     457:	72 74 63 5f 77 72 69 74 65 20 65 72 72 6f 72 0a     rtc_write error.
	...

00000468 <__c.3730>:
     468:	72 74 63 5f 69 6e 69 74 20 20 77 72 69 74 65 20     rtc_init  write 
     478:	65 70 6f 63 68 20 66 61 69 6c 65 64 0a 00           epoch failed..

00000486 <__c.3722>:
     486:	72 74 63 5f 72 75 6e 20 2d 20 77 72 69 74 65 20     rtc_run - write 
     496:	73 74 61 74 75 73 20 65 72 72 6f 72 0a 00           status error..

000004a4 <__c.3720>:
     4a4:	72 74 63 5f 72 75 6e 20 72 65 61 64 20 73 74 61     rtc_run read sta
     4b4:	74 75 73 20 65 72 72 6f 72 0a 00                    tus error..

000004bf <__c.3747>:
     4bf:	25 73 20 65 78 70 65 63 74 65 64 20 25 64 20 61     %s expected %d a
     4cf:	72 67 75 6d 65 6e 74 73 20 6f 6e 6c 79 20 67 6f     rguments only go
     4df:	74 20 25 64 0a 00                                   t %d..

000004e5 <__c.3704>:
     4e5:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     4f5:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000505 <__c.3783>:
     505:	54 69 6d 65 72 73 20 65 6e 61 62 6c 65 64 0a 00     Timers enabled..

00000515 <__c.3781>:
     515:	43 6c 6f 63 6b 20 49 6e 73 74 61 6c 6c 65 64 0a     Clock Installed.
	...

00000526 <__c.3779>:
     526:	43 6c 6f 63 6b 20 74 61 73 6b 20 69 6e 69 74 20     Clock task init 
     536:	66 61 69 6c 65 64 0a 00                             failed..

0000053e <__c.3777>:
     53e:	43 6c 6f 63 6b 20 49 6e 69 74 0a 00                 Clock Init..

0000054a <__c.3775>:
     54a:	54 69 6d 65 72 73 20 63 6f 6e 66 69 67 75 72 65     Timers configure
     55a:	64 0a 00                                            d..

0000055d <__c.3773>:
     55d:	54 69 6d 65 72 73 20 69 6e 69 74 20 63 61 6c 6c     Timers init call
     56d:	65 64 0a 00                                         ed..

00000571 <__c.3753>:
     571:	5b 54 69 6d 65 3a 25 73 5d 0a 00                    [Time:%s]..

0000057c <__c.3751>:
     57c:	5b 25 73 20 54 69 6d 65 3a 25 73 5d 0a 00           [%s Time:%s]..

0000058a <__c.3737>:
     58a:	25 6c 64 2e 25 30 39 6c 64 00                       %ld.%09ld.

00000594 <__c.3717>:
     594:	73 65 74 5f 74 69 6d 65 72 73 3a 20 4e 6f 20 6d     set_timers: No m
     5a4:	6f 72 65 20 74 69 6d 65 72 73 21 0a 00              ore timers!..

000005b1 <__c.3992>:
     5b1:	63 6c 6b 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     clk time:    %s.
	...

000005c2 <__c.3990>:
     5c2:	63 6c 6b 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     clk seconds: %lu
     5d2:	0a 00                                               ..

000005d4 <__c.3988>:
     5d4:	52 54 43 20 72 65 61 64 20 66 61 69 6c 65 64 0a     RTC read failed.
	...

000005e5 <__c.3986>:
     5e5:	72 74 63 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     rtc time:    %s.
	...

000005f6 <__c.3984>:
     5f6:	72 74 63 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     rtc seconds: %lu
     606:	0a 00                                               ..

00000608 <__c.3977>:
     608:	75 73 65 20 73 65 74 64 61 74 65 20 63 6f 6d 6d     use setdate comm
     618:	61 6e 64 20 74 6f 20 63 68 61 6e 67 65 20 74 69     and to change ti
     628:	6d 65 0a 00                                         me..

0000062c <__c.3975>:
     62c:	72 74 63 20 72 65 61 64 20 65 72 72 6f 72 61 66     rtc read erroraf
     63c:	74 65 72 20 69 6e 69 74 0a 00                       ter init..

00000646 <__c.3973>:
     646:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     656:	61 69 6c 65 64 0a 00                                ailed..

0000065d <__c.3971>:
     65d:	61 74 74 65 6d 70 74 69 6e 67 20 72 74 63 20 69     attempting rtc i
     66d:	6e 69 74 0a 00                                      nit..

00000672 <__c.3969>:
     672:	72 74 63 20 75 6e 69 6e 69 74 69 6c 69 7a 65 64     rtc uninitilized
     682:	0a 00                                               ..

00000684 <__c.3923>:
     684:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     694:	61 69 6c 65 64 0a 00                                ailed..

0000069b <__c.3921>:
     69b:	69 6e 76 61 6c 69 64 20 6d 69 6e 3a 20 25 64 0a     invalid min: %d.
	...

000006ac <__c.3919>:
     6ac:	69 6e 76 61 6c 69 64 20 68 6f 75 72 3a 20 25 64     invalid hour: %d
     6bc:	0a 00                                               ..

000006be <__c.3917>:
     6be:	69 6e 76 61 6c 69 64 20 64 61 79 3a 20 25 64 0a     invalid day: %d.
	...

000006cf <__c.3915>:
     6cf:	69 6e 76 61 6c 69 64 20 6d 6f 6e 3a 20 25 64 0a     invalid mon: %d.
	...

000006e0 <__c.3913>:
     6e0:	69 6e 76 61 6c 69 64 20 79 65 61 72 3a 20 25 64     invalid year: %d
     6f0:	0a 00                                               ..

000006f2 <__c.3892>:
     6f2:	45 6e 74 65 72 20 64 61 74 65 20 59 59 59 59 20     Enter date YYYY 
     702:	4d 4d 20 44 44 20 48 48 3a 4d 4d 3a 53 53 20 3e     MM DD HH:MM:SS >
	...

00000713 <__c.3767>:
     713:	25 73 20 25 73 20 25 32 64 20 25 30 32 64 3a 25     %s %s %2d %02d:%
     723:	30 32 64 3a 25 30 32 64 20 25 34 64 00              02d:%02d %4d.

00000730 <__c.3735>:
     730:	73 65 6c 65 63 74 20 66 61 69 6c 65 64 21 0a 00     select failed!..

00000740 <__c.3764>:
     740:	45 4e 44 20 4d 4d 43 20 49 4e 49 54 0a 00           END MMC INIT..

0000074e <__c.3762>:
     74e:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 3a 20     MMC Block Size: 
     75e:	25 6c 64 0a 00                                      %ld..

00000763 <__c.3760>:
     763:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 20 2d     MMC Block Size -
     773:	20 72 65 61 64 20 66 61 69 6c 65 64 0a 00            read failed..

00000781 <__c.3757>:
     781:	2c 20 43 6f 64 65 20 70 61 67 65 3a 20 25 75 0a     , Code page: %u.
	...

00000792 <__c.3755>:
     792:	4c 46 4e 20 45 6e 61 62 6c 65 64 00                 LFN Enabled.

0000079e <__c.3753>:
     79e:	53 54 41 52 54 20 4d 4d 43 20 49 4e 49 54 0a 00     START MMC INIT..

000007ae <__c.3740>:
     7ae:	4d 4d 43 20 54 49 4d 45 4f 55 54 0a 00              MMC TIMEOUT..

000007bb <__c.3712>:
     7bb:	4d 4d 43 20 43 6c 6f 63 6b 20 74 61 73 6b 20 69     MMC Clock task i
     7cb:	6e 69 74 20 66 61 69 6c 65 64 0a 00                 nit failed..

000007d7 <__c.3784>:
     7d7:	0a 00                                               ..

000007d9 <__c.3782>:
     7d9:	25 73 20 25 75 2f 25 30 32 75 2f 25 30 32 75 20     %s %u/%02u/%02u 
     7e9:	25 30 32 75 3a 25 30 32 75 20 25 39 6c 75 20 25     %02u:%02u %9lu %
     7f9:	73 00                                               s.

000007fb <__c.3780>:
     7fb:	66 61 74 66 73 5f 66 69 6c 69 6e 66 6f 5f 6c 69     fatfs_filinfo_li
     80b:	73 74 3a 20 65 6d 70 74 79 0a 00                    st: empty..

00000816 <__c.3774>:
     816:	25 75 20 66 69 6c 65 73 2c 20 25 6c 75 20 62 79     %u files, %lu by
     826:	74 65 73 2e 0a 25 75 20 66 6f 6c 64 65 72 73 2e     tes..%u folders.
     836:	0a 25 6c 75 20 4b 42 20 74 6f 74 61 6c 20 64 69     .%lu KB total di
     846:	73 6b 20 73 70 61 63 65 2e 0a 25 6c 75 20 4b 42     sk space..%lu KB
     856:	20 61 76 61 69 6c 61 62 6c 65 2e 0a 00               available...

00000863 <__c.3772>:
     863:	56 6f 6c 75 6d 65 20 53 2f 4e 20 20 20 20 20 20     Volume S/N      
     873:	20 20 20 20 20 20 20 20 3d 20 25 30 34 58 2d 25             = %04X-%
     883:	30 34 58 0a 00                                      04X..

00000888 <__c.3770>:
     888:	56 6f 6c 75 6d 65 20 6e 61 6d 65 20 20 20 20 20     Volume name     
     898:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

000008a6 <__c.3768>:
     8a6:	44 61 74 61 20 73 74 61 72 74 20 28 6c 62 61 29     Data start (lba)
     8b6:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

000008c5 <__c.3766>:
     8c5:	44 49 52 20 73 74 61 72 74 20 28 6c 62 61 2c 63     DIR start (lba,c
     8d5:	6c 75 73 74 6f 72 29 20 3d 20 25 6c 75 0a 00        lustor) = %lu..

000008e4 <__c.3764>:
     8e4:	46 41 54 20 73 74 61 72 74 20 28 6c 62 61 29 20     FAT start (lba) 
     8f4:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000903 <__c.3762>:
     903:	4e 75 6d 62 65 72 20 6f 66 20 63 6c 75 73 74 65     Number of cluste
     913:	72 73 20 20 20 20 20 20 3d 20 25 6c 75 0a 00        rs      = %lu..

00000922 <__c.3760>:
     922:	53 65 63 74 6f 72 73 2f 46 41 54 20 20 20 20 20     Sectors/FAT     
     932:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000941 <__c.3758>:
     941:	52 6f 6f 74 20 44 49 52 20 65 6e 74 72 69 65 73     Root DIR entries
     951:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

0000095f <__c.3756>:
     95f:	4e 75 6d 62 65 72 20 6f 66 20 46 41 54 73 20 20     Number of FATs  
     96f:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

0000097d <__c.3754>:
     97d:	42 79 74 65 73 2f 43 6c 75 73 74 65 72 20 20 20     Bytes/Cluster   
     98d:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

0000099c <__c.3752>:
     99c:	46 41 54 20 74 79 70 65 20 20 20 20 20 20 20 20     FAT type        
     9ac:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

000009ba <__c.3750>:
     9ba:	66 61 74 66 73 20 73 74 61 74 75 73 3a 25 73 0a     fatfs status:%s.
	...

000009cb <__c.3714>:
     9cb:	72 63 3d 25 75 0a 00                                rc=%u..

000009d2 <__c.3752>:
     9d2:	2c 20 25 31 30 6c 75 4b 20 62 79 74 65 73 20 66     , %10luK bytes f
     9e2:	72 65 65 0a 00                                      ree..

000009e7 <__c.3750>:
     9e7:	25 34 75 20 46 69 6c 65 28 73 29 2c 25 31 30 6c     %4u File(s),%10l
     9f7:	75 20 62 79 74 65 73 20 74 6f 74 61 6c 0a 25 34     u bytes total.%4
     a07:	75 20 44 69 72 28 73 29 00                          u Dir(s).

00000a10 <__c.3746>:
     a10:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000a1e <__c.3733>:
     a1e:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     a2e:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000a3e <__c.3731>:
     a3e:	45 4e 44 20 4d 4d 43 20 54 45 53 54 0a 00           END MMC TEST..

00000a4c <__c.3729>:
     a4c:	4d 4d 43 20 44 69 72 65 63 74 6f 72 79 20 4c 69     MMC Directory Li
     a5c:	73 74 0a 00                                         st..

00000a60 <__c.3727>:
     a60:	53 54 41 52 54 20 4d 4d 43 20 54 45 53 54 0a 00     START MMC TEST..

00000a70 <__c.3725>:
     a70:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     a80:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000a90 <__c.3717>:
     a90:	69 6e 64 3a 25 64 2c 61 72 67 63 3a 25 64 0a 00     ind:%d,argc:%d..

00000aa0 <__c.3707>:
     aa0:	4e 6f 74 65 3a 20 66 61 74 66 73 20 74 65 73 74     Note: fatfs test
     ab0:	73 20 4d 55 53 54 20 73 74 61 72 74 20 77 69 74     s MUST start wit
     ac0:	68 20 22 66 61 74 66 73 22 20 6b 65 79 77 6f 72     h "fatfs" keywor
     ad0:	64 0a 66 61 74 66 73 20 68 65 6c 70 0a 66 61 74     d.fatfs help.fat
     ae0:	66 73 20 6d 6d 63 5f 74 65 73 74 0a 66 61 74 66     fs mmc_test.fatf
     af0:	73 20 6d 6d 63 5f 69 6e 69 74 0a 66 61 74 66 73     s mmc_init.fatfs
     b00:	20 6c 73 20 64 69 72 0a 66 61 74 66 73 20 73 74      ls dir.fatfs st
     b10:	61 74 75 73 20 66 69 6c 65 0a 0a 00                 atus file...

00000b1c <__c.3705>:
     b1c:	66 61 74 66 73 20 68 65 6c 70 0a 00                 fatfs help..

00000b28 <__c.4037>:
     b28:	25 73 0a 00                                         %s..

00000b2c <__c.4035>:
     b2c:	25 73 3a 20 25 73 0a 00                             %s: %s..

00000b34 <__c.3790>:
     b34:	53 65 65 6b 20 66 61 69 6c 65 64 00                 Seek failed.

00000b40 <__c.3719>:
     b40:	66 70 75 74 63 20 73 74 72 65 61 6d 2d 3e 70 75     fputc stream->pu
     b50:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000b58 <__c.3712>:
     b58:	66 67 65 74 63 20 73 74 72 65 61 6d 2d 3e 67 65     fgetc stream->ge
     b68:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000b70 <__c.3876>:
     b70:	46 69 6c 65 73 3a 20 25 64 0a 00                    Files: %d..

00000b7b <__c.3872>:
     b7b:	6e 61 6d 65 3a 5b 25 73 5d 20 74 6f 6f 20 6c 6f     name:[%s] too lo
     b8b:	6e 67 20 77 69 74 68 20 66 75 6c 6c 20 70 61 74     ng with full pat
     b9b:	68 0a 00                                            h..

00000b9e <__c.3869>:
     b9e:	6f 70 65 6e 64 69 72 20 66 61 69 6c 65 64 0a 00     opendir failed..

00000bae <__c.3864>:
     bae:	6c 73 3a 20 63 61 6e 6e 6f 74 20 73 74 61 74 20     ls: cannot stat 
     bbe:	5b 25 73 5d 0a 00                                   [%s]..

00000bc4 <__c.3862>:
     bc4:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000bd2 <__c.3860>:
     bd2:	6c 73 3a 20 43 61 6e 27 74 20 67 65 74 20 63 75     ls: Can't get cu
     be2:	72 72 65 6e 74 20 64 69 72 65 63 74 6f 72 79 0a     rrent directory.
	...

00000bf3 <__c.3847>:
     bf3:	25 73 20 6e 6f 6e 65 20 6e 6f 6e 65 20 25 31 32     %s none none %12
     c03:	6c 64 20 25 73 20 25 73 0a 00                       ld %s %s..

00000c0d <__c.3842>:
     c0d:	25 73 0a 00                                         %s..

00000c11 <__c.3840>:
     c11:	63 61 6e 20 6e 6f 74 20 73 74 61 74 3a 20 25 73     can not stat: %s
     c21:	0a 00                                               ..

00000c23 <__c.3828>:
     c23:	0d 00                                               ..

00000c25 <__c.3826>:
     c25:	4d 6f 72 65 2e 2e 00                                More...

00000c2c <__c.3816>:
     c2c:	25 6c 75 20 62 79 74 65 73 20 63 6f 70 69 65 64     %lu bytes copied
     c3c:	2e 0a 00                                            ...

00000c3f <__c.3812>:
     c3f:	43 6f 70 69 65 64 3a 20 25 30 38 6c 64 0d 00        Copied: %08ld..

00000c4e <__c.3809>:
     c4e:	57 72 69 74 65 20 65 72 72 6f 72 0a 00              Write error..

00000c5b <__c.3807>:
     c5b:	0a 43 6f 70 79 69 6e 67 2e 2e 2e 0a 00              .Copying.....

00000c68 <__c.3805>:
     c68:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000c78 <__c.3803>:
     c78:	43 72 65 61 74 69 6e 67 20 25 73 0a 00              Creating %s..

00000c85 <__c.3801>:
     c85:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000c95 <__c.3799>:
     c95:	4f 70 65 6e 69 6e 67 20 25 73 0a 00                 Opening %s..

00000ca1 <__c.3788>:
     ca1:	25 6c 64 20 62 79 74 65 73 0a 00                    %ld bytes..

00000cac <__c.3786>:
     cac:	0a 00                                               ..

00000cae <__c.3781>:
     cae:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000cbe <__c.3771>:
     cbe:	72 6d 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     rmdir %s failed.
	...

00000ccf <__c.3769>:
     ccf:	72 6d 20 25 73 20 66 61 69 6c 65 64 0a 00           rm %s failed..

00000cdd <__c.3767>:
     cdd:	72 65 6e 61 6d 65 20 25 73 20 74 6f 20 25 73 0a     rename %s to %s.
	...

00000cee <__c.3765>:
     cee:	25 73 0a 00                                         %s..

00000cf2 <__c.3762>:
     cf2:	6d 6b 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     mkdir %s failed.
	...

00000d03 <__c.3754>:
     d03:	63 68 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     chdir %s failed.
	...

00000d14 <__c.3738>:
     d14:	70 6f 73 69 78 20 70 72 65 66 69 78 20 69 73 20     posix prefix is 
     d24:	6f 70 74 69 6f 6e 61 6c 0a 70 6f 73 69 78 20 63     optional.posix c
     d34:	61 74 20 66 69 6c 65 20 5b 2d 70 5d 0a 70 6f 73     at file [-p].pos
     d44:	69 78 20 63 64 20 64 69 72 0a 70 6f 73 69 78 20     ix cd dir.posix 
     d54:	63 6f 70 79 20 66 69 6c 65 31 20 66 69 6c 65 32     copy file1 file2
     d64:	0a 70 6f 73 69 78 20 6c 73 20 64 69 72 20 5b 2d     .posix ls dir [-
     d74:	6c 5d 0a 70 6f 73 69 78 20 6d 6b 64 69 72 20 64     l].posix mkdir d
     d84:	69 72 0a 70 6f 73 69 78 20 70 61 67 65 20 4e 4e     ir.posix page NN
     d94:	0a 70 6f 73 69 78 20 70 77 64 0a 70 6f 73 69 78     .posix pwd.posix
     da4:	20 72 6d 20 66 69 6c 65 0a 70 6f 73 69 78 20 72      rm file.posix r
     db4:	6d 64 69 72 20 64 69 72 0a 70 6f 73 69 78 20 72     mdir dir.posix r
     dc4:	65 6e 61 6d 65 20 6f 6c 64 20 6e 65 77 0a 0a 00     ename old new...

00000dd4 <__c.3736>:
     dd4:	70 6f 73 69 78 20 68 65 6c 70 0a 00                 posix help..

00000de0 <__c.3927>:
     de0:	43 6c 6f 73 65 20 65 72 72 6f 72 3a 20 00           Close error: .

00000dee <__c.3921>:
     dee:	53 65 65 6b 20 65 72 72 6f 72 3a 20 00              Seek error: .

00000dfb <__c.3914>:
     dfb:	57 72 69 74 65 20 65 72 72 6f 72 3a 20 00           Write error: .

00000e09 <__c.3905>:
     e09:	52 65 61 64 20 65 72 72 6f 72 3a 20 00              Read error: .

00000e16 <__c.3896>:
     e16:	4f 70 65 6e 20 65 72 72 6f 72 3a 5b 25 73 5d 20     Open error:[%s] 
	...

00000e27 <__c.3882>:
     e27:	5b 50 50 52 20 44 49 53 41 42 4c 45 20 41 4c 4c     [PPR DISABLE ALL
     e37:	5d 0a 00                                            ]..

00000e3a <__c.3864>:
     e3a:	47 50 49 42 20 43 6c 6f 63 6b 20 74 61 73 6b 20     GPIB Clock task 
     e4a:	69 6e 69 74 20 66 61 69 6c 65 64 0a 00              init failed..

00000e57 <__c.4436>:
     e57:	5b 67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 20     [gpib_write_str 
     e67:	73 65 6e 74 28 25 64 29 20 65 78 70 65 63 74 65     sent(%d) expecte
     e77:	64 28 25 64 29 5d 0a 00                             d(%d)]..

00000e7f <__c.4431>:
     e7f:	67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 3a 20     gpib_write_str: 
     e8f:	73 69 7a 65 20 3d 20 30 0a 00                       size = 0..

00000e99 <__c.4421>:
     e99:	5b 67 70 69 62 5f 72 65 61 64 5f 73 74 72 20 72     [gpib_read_str r
     ea9:	65 61 64 28 25 64 29 20 65 78 70 65 63 74 65 64     ead(%d) expected
     eb9:	28 25 64 29 5d 0a 00                                (%d)]..

00000ec0 <__c.4417>:
     ec0:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 28 69 6e     gpib_read_str(in
     ed0:	64 3a 25 64 29 3a 20 41 54 4e 20 25 30 32 58 48     d:%d): ATN %02XH
     ee0:	20 75 6e 65 78 70 65 63 74 65 64 0a 00               unexpected..

00000eed <__c.4414>:
     eed:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 3a 20 73     gpib_read_str: s
     efd:	69 7a 65 20 3d 20 30 0a 00                          ize = 0..

00000f06 <__c.4398>:
     f06:	20 4d 53 41 20 25 30 32 58 68 00                     MSA %02Xh.

00000f11 <__c.4396>:
     f11:	20 4d 54 41 20 25 30 32 58 68 00                     MTA %02Xh.

00000f1c <__c.4394>:
     f1c:	20 4d 4c 41 20 25 30 32 58 68 00                     MLA %02Xh.

00000f27 <__c.4390>:
     f27:	20 20 20 20 20 00                                        .

00000f2d <__c.4388>:
     f2d:	25 30 32 58 20 25 63 20 00                          %02X %c .

00000f36 <__c.4346>:
     f36:	3c 4e 52 46 44 3d 25 64 2c 4e 44 41 56 3d 25 64     <NRFD=%d,NDAV=%d
     f46:	3e 0a 00                                            >..

00000f49 <__c.4342>:
     f49:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
     f59:	20 44 41 56 3d 3d 31 3e 0a 00                        DAV==1>..

00000f63 <__c.4338>:
     f63:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
     f73:	20 4e 44 41 43 3d 3d 31 3e 0a 00                     NDAC==1>..

00000f7e <__c.4335>:
     f7e:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
     f8e:	20 4e 52 46 44 3d 3d 30 3e 0a 00                     NRFD==0>..

00000f99 <__c.4330>:
     f99:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
     fa9:	20 4e 52 46 44 3d 3d 31 20 26 26 20 4e 44 41 43      NRFD==1 && NDAC
     fb9:	20 3d 3d 20 30 3e 0a 00                              == 0>..

00000fc1 <__c.4326>:
     fc1:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
     fd1:	20 44 41 56 3d 3d 31 3e 0a 00                        DAV==1>..

00000fdb <__c.4309>:
     fdb:	67 70 69 62 5f 75 6e 72 65 61 64 3a 20 65 72 72     gpib_unread: err
     feb:	6f 72 2c 20 63 61 6e 20 6f 6e 6c 79 20 62 65 20     or, can only be 
     ffb:	63 61 6c 6c 65 64 20 6f 6e 63 65 21 0a 00           called once!..

00001009 <__c.4297>:
    1009:	5b 49 46 43 20 53 45 4e 54 5d 0a 00                 [IFC SENT]..

00001015 <__c.4283>:
    1015:	5b 44 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [DPPR bit:%d, ma
    1025:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

00001030 <__c.4281>:
    1030:	67 70 69 62 5f 64 69 73 61 62 6c 65 5f 50 50 52     gpib_disable_PPR
    1040:	3a 20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20     : bit %d out of 
    1050:	72 61 6e 67 65 0a 00                                range..

00001057 <__c.4276>:
    1057:	5b 45 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [EPPR bit:%d, ma
    1067:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

00001072 <__c.4274>:
    1072:	67 70 69 62 5f 65 6e 61 62 6c 65 5f 50 50 52 3a     gpib_enable_PPR:
    1082:	20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20 72      bit %d out of r
    1092:	61 6e 67 65 0a 00                                   ange..

00001098 <__c.4269>:
    1098:	5b 47 50 49 42 20 53 54 41 54 45 20 49 4e 49 54     [GPIB STATE INIT
    10a8:	5d 0a 00                                            ]..

000010ab <__c.4264>:
    10ab:	5b 47 50 49 42 20 42 55 53 5f 49 4e 49 54 5d 0a     [GPIB BUS_INIT].
	...

000010bc <__c.4440>:
    10bc:	5b 50 52 49 4e 54 45 52 20 63 6c 6f 73 65 5d 0a     [PRINTER close].
	...

000010cd <__c.4435>:
    10cd:	5b 53 41 20 25 30 32 58 48 2c 20 6c 69 73 74 65     [SA %02XH, liste
    10dd:	6e 3a 25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30     n:%02XH, talk:%0
    10ed:	32 58 48 5d 0a 00                                   2XH]..

000010f3 <__c.4433>:
    10f3:	5b 53 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [SA %02XH AMIGO]
    1103:	0a 00                                               ..

00001105 <__c.4431>:
    1105:	5b 53 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [SA %02XH SS80].
	...

00001116 <__c.4426>:
    1116:	5b 54 41 20 25 30 32 58 48 5d 0a 00                 [TA %02XH]..

00001122 <__c.4424>:
    1122:	5b 50 52 49 4e 54 45 52 20 4f 50 45 4e 5d 0a 00     [PRINTER OPEN]..

00001132 <__c.4422>:
    1132:	5b 54 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [TA %02XH PRINTE
    1142:	52 5d 0a 00                                         R]..

00001146 <__c.4420>:
    1146:	5b 54 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [TA %02XH AMIGO]
    1156:	0a 00                                               ..

00001158 <__c.4418>:
    1158:	5b 54 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [TA %02XH SS80].
	...

00001169 <__c.4416>:
    1169:	5b 55 4e 54 5d 0a 00                                [UNT]..

00001170 <__c.4411>:
    1170:	5b 4c 41 20 25 30 32 58 48 5d 0a 00                 [LA %02XH]..

0000117c <__c.4409>:
    117c:	5b 4c 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [LA %02XH PRINTE
    118c:	52 5d 0a 00                                         R]..

00001190 <__c.4407>:
    1190:	5b 4c 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [LA %02XH SS80].
	...

000011a1 <__c.4405>:
    11a1:	5b 4c 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [LA %02XH AMIGO]
    11b1:	0a 00                                               ..

000011b3 <__c.4403>:
    11b3:	0a 00                                               ..

000011b5 <__c.4401>:
    11b5:	5b 55 4e 4c 5d 0a 00                                [UNL]..

000011bc <__c.4396>:
    11bc:	5b 48 50 49 42 20 28 25 30 32 58 48 29 20 6e 6f     [HPIB (%02XH) no
    11cc:	74 20 64 65 66 69 6e 65 64 5d 0a 00                 t defined]..

000011d8 <__c.4394>:
    11d8:	5b 44 43 4c 5d 0a 00                                [DCL]..

000011df <__c.4392>:
    11df:	5b 53 44 43 20 41 4d 49 47 4f 5d 0a 00              [SDC AMIGO]..

000011ec <__c.4390>:
    11ec:	5b 53 44 43 20 53 53 38 30 5d 0a 00                 [SDC SS80]..

000011f8 <__c.4388>:
    11f8:	5b 53 44 43 5d 0a 00                                [SDC]..

000011ff <__c.4386>:
    11ff:	5b 53 50 44 5d 0a 00                                [SPD]..

00001206 <__c.4384>:
    1206:	5b 53 50 45 5d 0a 00                                [SPE]..

0000120d <__c.4382>:
    120d:	5b 50 50 55 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPU unsupported
    121d:	5d 0a 00                                            ]..

00001220 <__c.4380>:
    1220:	5b 50 50 43 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPC unsupported
    1230:	5d 0a 00                                            ]..

00001233 <__c.4375>:
    1233:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    1243:	48 3d 25 30 34 58 48 5d 0a 00                       H=%04XH]..

0000124d <__c.4373>:
    124d:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    125d:	48 3d 25 30 34 58 48 20 46 41 49 4c 45 44 5d 0a     H=%04XH FAILED].
	...

0000126e <__c.4346>:
    126e:	3c 4d 45 44 49 41 20 4d 49 53 53 49 4e 47 3e 0a     <MEDIA MISSING>.
	...

0000127f <__c.4344>:
    127f:	3c 49 4e 54 45 52 52 55 50 54 3e 0a 00              <INTERRUPT>..

0000128c <__c.4342>:
    128c:	3c 42 55 53 3e 0a 00                                <BUS>..

00001293 <__c.4340>:
    1293:	3c 54 49 4d 45 4f 55 54 3e 0a 00                    <TIMEOUT>..

0000129e <__c.4338>:
    129e:	3c 49 46 43 3e 0a 00                                <IFC>..

000012a5 <__c.4333>:
    12a5:	43 61 70 74 75 72 69 6e 67 20 43 6c 6f 73 65 64     Capturing Closed
    12b5:	0a 00                                               ..

000012b7 <__c.4331>:
    12b7:	44 6f 6e 65 0a 00                                   Done..

000012bd <__c.4327>:
    12bd:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

000012c9 <__c.4325>:
    12c9:	50 72 65 73 73 20 41 4e 59 20 6b 65 79 20 74 6f     Press ANY key to
    12d9:	20 65 78 69 74 0a 00                                 exit..

000012e0 <__c.4323>:
    12e0:	46 55 4c 4c 20 47 50 49 42 20 42 55 53 20 68 61     FULL GPIB BUS ha
    12f0:	6e 64 73 68 61 6b 65 20 6c 6f 67 67 69 6e 67 20     ndshake logging 
    1300:	72 65 71 75 65 73 74 65 64 0a 00                    requested..

0000130b <__c.4321>:
    130b:	43 61 70 74 75 72 69 6e 67 20 47 50 49 42 20 42     Capturing GPIB B
    131b:	55 53 20 74 6f 3a 25 73 0a 00                       US to:%s..

00001325 <__c.4275>:
    1325:	43 61 72 64 20 69 73 20 77 72 69 74 65 20 70 72     Card is write pr
    1335:	6f 74 65 63 74 65 64 0a 00                          otected..

0000133e <__c.4273>:
    133e:	25 73 20 6f 70 65 6e 20 66 61 69 6c 75 72 65 0a     %s open failure.
	...

0000134f <__c.4271>:
    134f:	25 73 20 68 61 64 20 25 64 20 65 72 72 6f 72 73     %s had %d errors
    135f:	0a 00                                               ..

00001361 <__c.4466>:
    1361:	64 65 62 75 67 3d 25 30 34 58 48 0a 00              debug=%04XH..

0000136e <__c.4458>:
    136e:	67 70 69 62 20 70 72 65 66 69 78 20 69 73 20 6f     gpib prefix is o
    137e:	70 74 69 6f 6e 61 6c 0a 67 70 69 62 20 61 64 64     ptional.gpib add
    138e:	72 65 73 73 65 73 0a 20 20 20 44 69 73 70 6c 61     resses.   Displa
    139e:	79 20 61 6c 6c 20 64 65 76 69 63 65 20 47 50 49     y all device GPI
    13ae:	42 20 62 75 73 20 61 64 64 72 65 73 73 65 73 20     B bus addresses 
    13be:	61 6e 64 20 50 50 52 20 76 61 6c 75 65 73 0a 67     and PPR values.g
    13ce:	70 69 62 20 63 6f 6e 66 69 67 20 5b 2d 76 5d 0a     pib config [-v].
    13de:	20 20 20 44 69 73 70 6c 61 79 20 63 75 72 72 65        Display curre
    13ee:	6e 74 20 64 72 69 76 65 73 20 63 6f 6e 66 69 67     nt drives config
    13fe:	75 72 61 74 69 6f 6e 0a 20 20 20 2d 76 20 56 65     uration.   -v Ve
    140e:	72 62 6f 73 65 20 2d 20 73 68 6f 77 20 66 75 6c     rbose - show ful
    141e:	6c 20 64 65 74 61 69 6c 0a 67 70 69 62 20 64 65     l detail.gpib de
    142e:	62 75 67 20 4e 0a 20 20 20 64 65 62 75 67 20 6d     bug N.   debug m
    143e:	65 73 73 61 67 65 20 72 65 70 6f 72 74 69 6e 67     essage reporting
    144e:	20 73 65 65 20 68 70 64 69 73 6b 2e 63 66 67 20      see hpdisk.cfg 
    145e:	66 6f 72 20 64 65 74 61 69 6c 73 0a 67 70 69 62     for details.gpib
    146e:	20 65 6c 61 70 73 65 64 0a 67 70 69 62 20 65 6c      elapsed.gpib el
    147e:	61 70 73 65 64 5f 72 65 73 65 74 0a 67 70 69 62     apsed_reset.gpib
    148e:	20 69 66 63 0a 67 70 69 62 20 70 6c 6f 74 20 66      ifc.gpib plot f
    149e:	69 6c 65 6e 61 6d 65 2e 74 78 74 0a 67 70 69 62     ilename.txt.gpib
    14ae:	20 70 6c 6f 74 5f 65 63 68 6f 0a 67 70 69 62 20      plot_echo.gpib 
    14be:	74 61 73 6b 0a 67 70 69 62 20 74 72 61 63 65 20     task.gpib trace 
    14ce:	66 69 6c 65 6e 61 6d 65 2e 74 78 74 20 5b 42 55     filename.txt [BU
    14de:	53 5d 0a 20 20 20 44 69 73 70 6c 61 79 20 61 63     S].   Display ac
    14ee:	74 69 76 69 74 79 20 6f 66 20 47 50 49 42 20 62     tivity of GPIB b
    14fe:	75 73 20 61 6e 64 20 6c 6f 67 20 69 74 0a 20 20     us and log it.  
    150e:	20 42 55 53 20 2d 20 69 6e 63 6c 75 64 65 20 68      BUS - include h
    151e:	61 6e 64 73 68 61 6b 65 20 73 74 61 74 65 73 0a     andshake states.
    152e:	0a 0a 00                                            ...

00001531 <__c.4456>:
    1531:	67 70 69 62 20 68 65 6c 70 0a 00                    gpib help..

0000153c <__c.4879>:
    153c:	0a 00                                               ..

0000153e <__c.4874>:
    153e:	41 4d 49 47 4f 25 64 00                             AMIGO%d.

00001546 <__c.4872>:
    1546:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    1556:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    1566:	0a 00                                               ..

00001568 <__c.4870>:
    1568:	53 53 38 30 2d 25 64 00                             SS80-%d.

00001570 <__c.4868>:
    1570:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    1580:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    1590:	0a 00                                               ..

00001592 <__c.4855>:
    1592:	0a 00                                               ..

00001594 <__c.4853>:
    1594:	45 4e 44 0a 00                                      END..

00001599 <__c.4848>:
    1599:	0a 00                                               ..

0000159b <__c.4846>:
    159b:	45 4e 44 0a 00                                      END..

000015a0 <__c.4844>:
    15a0:	20 20 45 4e 44 0a 00                                  END..

000015a7 <__c.4842>:
    15a7:	41 44 44 52 45 53 53 00                             ADDRESS.

000015af <__c.4840>:
    15af:	20 20 43 4f 4e 46 49 47 0a 00                         CONFIG..

000015b9 <__c.4838>:
    15b9:	50 52 49 4e 54 45 52 0a 00                          PRINTER..

000015c2 <__c.4836>:
    15c2:	20 20 45 4e 44 0a 00                                  END..

000015c9 <__c.4834>:
    15c9:	23 20 42 4c 4f 43 4b 53 00                          # BLOCKS.

000015d2 <__c.4832>:
    15d2:	43 59 4c 49 4e 44 45 52 53 00                       CYLINDERS.

000015dc <__c.4830>:
    15dc:	48 45 41 44 53 00                                   HEADS.

000015e2 <__c.4828>:
    15e2:	53 45 43 54 4f 52 53 5f 50 45 52 5f 54 52 41 43     SECTORS_PER_TRAC
    15f2:	4b 00                                               K.

000015f4 <__c.4826>:
    15f4:	42 59 54 45 53 5f 50 45 52 5f 53 45 43 54 4f 52     BYTES_PER_SECTOR
	...

00001605 <__c.4824>:
    1605:	20 20 47 45 4f 4d 45 54 52 59 0a 00                   GEOMETRY..

00001611 <__c.4822>:
    1611:	20 20 45 4e 44 0a 00                                  END..

00001618 <__c.4820>:
    1618:	49 44 00                                            ID.

0000161b <__c.4818>:
    161b:	20 20 43 4f 4e 46 49 47 0a 00                         CONFIG..

00001625 <__c.4816>:
    1625:	20 20 45 4e 44 0a 00                                  END..

0000162c <__c.4814>:
    162c:	46 49 4c 45 00                                      FILE.

00001631 <__c.4812>:
    1631:	50 50 52 00                                         PPR.

00001635 <__c.4810>:
    1635:	41 44 44 52 45 53 53 00                             ADDRESS.

0000163d <__c.4808>:
    163d:	20 20 48 45 41 44 45 52 0a 00                         HEADER..

00001647 <__c.4806>:
    1647:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    1657:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

00001666 <__c.4804>:
    1666:	41 4d 49 47 4f 20 25 73 0a 00                       AMIGO %s..

00001670 <__c.4802>:
    1670:	20 20 45 4e 44 0a 00                                  END..

00001677 <__c.4800>:
    1677:	23 20 42 4c 4f 43 4b 53 00                          # BLOCKS.

00001680 <__c.4798>:
    1680:	49 4e 54 45 52 4c 45 41 56 45 00                    INTERLEAVE.

0000168b <__c.4796>:
    168b:	4d 41 58 5f 42 4c 4f 43 4b 5f 4e 55 4d 42 45 52     MAX_BLOCK_NUMBER
	...

0000169c <__c.4794>:
    169c:	4d 41 58 5f 53 45 43 54 4f 52 00                    MAX_SECTOR.

000016a7 <__c.4792>:
    16a7:	4d 41 58 5f 48 45 41 44 00                          MAX_HEAD.

000016b0 <__c.4790>:
    16b0:	4d 41 58 5f 43 59 4c 49 4e 44 45 52 00              MAX_CYLINDER.

000016bd <__c.4788>:
    16bd:	20 20 56 4f 4c 55 4d 45 0a 00                         VOLUME..

000016c7 <__c.4786>:
    16c7:	20 20 45 4e 44 0a 00                                  END..

000016ce <__c.4784>:
    16ce:	52 45 4d 4f 56 41 42 4c 45 5f 56 4f 4c 55 4d 45     REMOVABLE_VOLUME
    16de:	53 00                                               S.

000016e0 <__c.4782>:
    16e0:	46 49 58 45 44 5f 56 4f 4c 55 4d 45 53 00           FIXED_VOLUMES.

000016ee <__c.4780>:
    16ee:	4d 41 58 49 4d 55 4d 5f 49 4e 54 45 52 4c 45 41     MAXIMUM_INTERLEA
    16fe:	56 45 00                                            VE.

00001701 <__c.4778>:
    1701:	41 43 43 45 53 53 5f 54 49 4d 45 00                 ACCESS_TIME.

0000170d <__c.4776>:
    170d:	4f 50 54 49 4d 41 4c 5f 52 45 54 52 59 5f 54 49     OPTIMAL_RETRY_TI
    171d:	4d 45 00                                            ME.

00001720 <__c.4774>:
    1720:	43 4f 4e 54 49 4e 55 4f 55 53 5f 54 52 41 4e 53     CONTINUOUS_TRANS
    1730:	46 45 52 5f 52 41 54 45 00                          FER_RATE.

00001739 <__c.4772>:
    1739:	42 4c 4f 43 4b 5f 54 49 4d 45 00                    BLOCK_TIME.

00001744 <__c.4770>:
    1744:	42 55 52 53 54 5f 53 49 5a 45 00                    BURST_SIZE.

0000174f <__c.4768>:
    174f:	42 55 46 46 45 52 45 44 5f 42 4c 4f 43 4b 53 00     BUFFERED_BLOCKS.

0000175f <__c.4766>:
    175f:	42 59 54 45 53 5f 50 45 52 5f 42 4c 4f 43 4b 00     BYTES_PER_BLOCK.

0000176f <__c.4764>:
    176f:	44 45 56 49 43 45 5f 4e 55 4d 42 45 52 00           DEVICE_NUMBER.

0000177d <__c.4762>:
    177d:	55 4e 49 54 5f 54 59 50 45 00                       UNIT_TYPE.

00001787 <__c.4760>:
    1787:	20 20 55 4e 49 54 0a 00                               UNIT..

0000178f <__c.4758>:
    178f:	20 20 45 4e 44 0a 00                                  END..

00001796 <__c.4756>:
    1796:	54 59 50 45 00                                      TYPE.

0000179b <__c.4754>:
    179b:	54 52 41 4e 53 46 45 52 5f 52 41 54 45 00           TRANSFER_RATE.

000017a9 <__c.4752>:
    17a9:	55 4e 49 54 53 5f 49 4e 53 54 41 4c 4c 45 44 00     UNITS_INSTALLED.

000017b9 <__c.4750>:
    17b9:	20 20 43 4f 4e 54 52 4f 4c 4c 45 52 0a 00             CONTROLLER..

000017c7 <__c.4748>:
    17c7:	20 20 45 4e 44 0a 00                                  END..

000017ce <__c.4746>:
    17ce:	49 44 00                                            ID.

000017d1 <__c.4744>:
    17d1:	20 20 48 45 41 44 45 52 0a 00                         HEADER..

000017db <__c.4742>:
    17db:	20 20 45 4e 44 0a 00                                  END..

000017e2 <__c.4740>:
    17e2:	46 49 4c 45 00                                      FILE.

000017e7 <__c.4738>:
    17e7:	50 50 52 00                                         PPR.

000017eb <__c.4736>:
    17eb:	41 44 44 52 45 53 53 00                             ADDRESS.

000017f3 <__c.4734>:
    17f3:	20 20 43 4f 4e 46 49 47 0a 00                         CONFIG..

000017fd <__c.4732>:
    17fd:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    180d:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

0000181c <__c.4730>:
    181c:	53 53 38 30 20 25 73 0a 00                          SS80 %s..

00001825 <__c.4727>:
    1825:	43 75 72 72 65 6e 74 20 43 6f 6e 66 69 67 75 72     Current Configur
    1835:	61 74 69 6f 6e 20 53 65 74 74 69 6e 67 73 0a 00     ation Settings..

00001845 <__c.4718>:
    1845:	0a 00                                               ..

00001847 <__c.4713>:
    1847:	20 20 50 52 49 4e 54 45 52 5f 4d 53 41 20 3d 20       PRINTER_MSA = 
    1857:	25 30 32 58 48 0a 00                                %02XH..

0000185e <__c.4711>:
    185e:	20 20 50 52 49 4e 54 45 52 5f 4d 54 41 20 3d 20       PRINTER_MTA = 
    186e:	25 30 32 58 48 0a 00                                %02XH..

00001875 <__c.4709>:
    1875:	20 20 50 52 49 4e 54 45 52 5f 4d 4c 41 20 3d 20       PRINTER_MLA = 
    1885:	25 30 32 58 48 0a 00                                %02XH..

0000188c <__c.4707>:
    188c:	20 20 41 4d 49 47 4f 5f 4d 53 41 20 20 20 3d 20       AMIGO_MSA   = 
    189c:	25 30 32 58 48 0a 00                                %02XH..

000018a3 <__c.4705>:
    18a3:	20 20 41 4d 49 47 4f 5f 4d 54 41 20 20 20 3d 20       AMIGO_MTA   = 
    18b3:	25 30 32 58 48 0a 00                                %02XH..

000018ba <__c.4703>:
    18ba:	20 20 41 4d 49 47 4f 5f 4d 4c 41 20 20 20 3d 20       AMIGO_MLA   = 
    18ca:	25 30 32 58 48 0a 00                                %02XH..

000018d1 <__c.4701>:
    18d1:	20 20 53 53 38 30 5f 4d 53 41 20 20 20 20 3d 20       SS80_MSA    = 
    18e1:	25 30 32 58 48 0a 00                                %02XH..

000018e8 <__c.4699>:
    18e8:	20 20 53 53 38 30 5f 4d 54 41 20 20 20 20 3d 20       SS80_MTA    = 
    18f8:	25 30 32 58 48 0a 00                                %02XH..

000018ff <__c.4697>:
    18ff:	20 20 53 53 38 30 5f 4d 4c 41 20 20 20 20 3d 20       SS80_MLA    = 
    190f:	25 30 32 58 48 0a 00                                %02XH..

00001916 <__c.4694>:
    1916:	4c 69 73 74 65 6e 20 61 6e 64 20 54 61 6c 6b 20     Listen and Talk 
    1926:	41 64 64 72 65 73 73 20 53 65 74 74 69 6e 67 73     Address Settings
    1936:	0a 00                                               ..

00001938 <__c.4688>:
    1938:	20 20 20 20 25 2d 32 35 73 20 3d 20 22 25 73 22         %-25s = "%s"
    1948:	0a 00                                               ..

0000194a <__c.4677>:
    194a:	20 20 20 20 25 2d 32 35 73 20 3d 20 25 38 6c 78         %-25s = %8lx
    195a:	48 20 28 25 6c 64 29 0a 00                          H (%ld)..

00001963 <__c.4666>:
    1963:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 2a 2a 2a     Read_Config: ***
    1973:	2a 2a 2a 20 65 72 72 6f 72 73 28 25 64 29 20 2a     *** errors(%d) *
    1983:	2a 2a 2a 2a 2a 0a 00                                *****..

0000198a <__c.4664>:
    198a:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 72 65 61     Read_Config: rea
    199a:	64 28 25 64 29 20 6c 69 6e 65 73 0a 00              d(%d) lines..

000019a7 <__c.4662>:
    19a7:	4d 69 73 73 69 6e 67 20 45 4e 44 20 73 74 61 74     Missing END stat
    19b7:	65 6d 65 6e 74 20 61 74 20 6c 69 6e 65 3a 25 64     ement at line:%d
    19c7:	0a 00                                               ..

000019c9 <__c.4658>:
    19c9:	46 61 74 61 6c 20 55 6e 65 78 70 65 63 74 65 64     Fatal Unexpected
    19d9:	20 53 54 41 54 45 20 25 64 20 61 74 20 6c 69 6e      STATE %d at lin
    19e9:	65 3a 25 64 0a 00                                   e:%d..

000019ef <__c.4655>:
    19ef:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    19ff:	20 47 45 4d 45 54 52 59 20 74 6f 6b 65 6e 3a 20      GEMETRY token: 
    1a0f:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00001a1f <__c.4653>:
    1a1f:	46 61 74 61 6c 3a 20 41 4d 49 47 4f 20 42 59 54     Fatal: AMIGO BYT
    1a2f:	45 53 5f 50 45 52 5f 53 45 43 54 4f 52 20 3e 20     ES_PER_SECTOR > 
    1a3f:	30 78 31 30 30 30 2c 20 73 65 74 20 74 6f 20 32     0x1000, set to 2
    1a4f:	35 36 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00        56 at line:%d..

00001a5e <__c.4650>:
    1a5e:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1a6e:	20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25      CONFIG token: %
    1a7e:	73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00        s, at line:%d..

00001a8d <__c.4647>:
    1a8d:	55 6e 65 78 70 65 63 74 65 64 20 48 45 41 44 45     Unexpected HEADE
    1a9d:	52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20     R CONFIG token: 
    1aad:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00001abd <__c.4645>:
    1abd:	57 61 72 6e 69 6e 67 20 41 4d 49 47 4f 20 41 44     Warning AMIGO AD
    1acd:	44 52 45 53 53 3a 20 25 64 20 3e 20 37 2c 20 64     DRESS: %d > 7, d
    1add:	69 73 61 62 6c 65 64 20 61 74 20 6c 69 6e 65 3a     isabled at line:
    1aed:	25 64 0a 00                                         %d..

00001af1 <__c.4643>:
    1af1:	46 61 74 61 6c 20 41 4d 49 47 4f 20 41 44 44 52     Fatal AMIGO ADDR
    1b01:	45 53 53 3a 20 25 64 20 3e 20 33 31 20 64 69 73     ESS: %d > 31 dis
    1b11:	61 62 6c 65 64 20 61 74 20 6c 69 6e 65 3a 25 64     abled at line:%d
    1b21:	0a 00                                               ..

00001b23 <__c.4641>:
    1b23:	53 6b 69 70 70 69 6e 67 20 25 73 2c 20 61 74 20     Skipping %s, at 
    1b33:	6c 69 6e 65 3a 25 64 0a 00                          line:%d..

00001b3c <__c.4638>:
    1b3c:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1b4c:	20 53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73      START token: %s
    1b5c:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001b6a <__c.4635>:
    1b6a:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1b7a:	56 4f 4c 55 4d 45 20 74 6f 6b 65 6e 3a 20 25 73     VOLUME token: %s
    1b8a:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001b98 <__c.4632>:
    1b98:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1ba8:	55 4e 49 54 20 74 6f 6b 65 6e 3a 20 25 73 2c 20     UNIT token: %s, 
    1bb8:	61 74 20 6c 69 6e 65 3a 25 64 0a 00                 at line:%d..

00001bc4 <__c.4630>:
    1bc4:	46 61 74 61 6c 3a 20 53 53 38 30 20 42 55 52 53     Fatal: SS80 BURS
    1bd4:	54 5f 53 49 5a 45 20 3e 20 30 2c 20 73 65 74 20     T_SIZE > 0, set 
    1be4:	74 6f 20 31 20 61 74 20 6c 69 6e 65 3a 25 64 0a     to 1 at line:%d.
	...

00001bf5 <__c.4628>:
    1bf5:	46 61 74 61 6c 3a 20 53 53 38 30 20 42 55 46 46     Fatal: SS80 BUFF
    1c05:	45 52 45 44 5f 42 4c 4f 43 4b 53 20 3e 20 31 2c     ERED_BLOCKS > 1,
    1c15:	20 73 65 74 20 74 6f 20 31 20 61 74 20 6c 69 6e      set to 1 at lin
    1c25:	65 3a 25 64 0a 00                                   e:%d..

00001c2b <__c.4626>:
    1c2b:	46 61 74 61 6c 3a 20 53 53 38 30 20 42 59 54 45     Fatal: SS80 BYTE
    1c3b:	53 5f 50 45 52 5f 42 4c 4f 43 4b 20 3e 20 30 78     S_PER_BLOCK > 0x
    1c4b:	31 30 30 30 2c 20 73 65 74 20 74 6f 20 32 35 36     1000, set to 256
    1c5b:	20 61 74 20 6c 69 6e 65 3a 25 64 0a 00               at line:%d..

00001c68 <__c.4623>:
    1c68:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1c78:	43 4f 4e 54 52 4f 4c 4c 45 52 20 74 6f 6b 65 6e     CONTROLLER token
    1c88:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1c98:	0a 00                                               ..

00001c9a <__c.4620>:
    1c9a:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1caa:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    1cba:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001cc8 <__c.4617>:
    1cc8:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1cd8:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    1ce8:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001cf6 <__c.4615>:
    1cf6:	57 61 72 6e 69 6e 67 20 53 53 38 30 20 50 50 52     Warning SS80 PPR
    1d06:	20 3e 20 37 20 61 74 20 6c 69 6e 65 3a 25 64 0a      > 7 at line:%d.
	...

00001d17 <__c.4613>:
    1d17:	46 61 74 61 6c 20 53 53 38 30 20 41 44 44 52 45     Fatal SS80 ADDRE
    1d27:	53 53 20 3e 20 33 31 20 61 74 20 6c 69 6e 65 20     SS > 31 at line 
    1d37:	64 0a 00                                            d..

00001d3a <__c.4610>:
    1d3a:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1d4a:	53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73 2c     START token: %s,
    1d5a:	20 61 74 20 6c 69 6e 65 3a 25 64 0a 00               at line:%d..

00001d67 <__c.4607>:
    1d67:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    1d77:	45 52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a     ER CONFIG token:
    1d87:	20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a      %s, at line:%d.
	...

00001d98 <__c.4605>:
    1d98:	46 61 74 61 6c 20 50 52 49 4e 54 45 52 20 41 44     Fatal PRINTER AD
    1da8:	44 52 45 53 53 20 6f 75 74 20 6f 66 20 72 61 6e     DRESS out of ran
    1db8:	67 65 3a 20 25 6c 64 20 64 69 73 61 62 6c 65 64     ge: %ld disabled
    1dc8:	3a 25 64 0a 00                                      :%d..

00001dcd <__c.4602>:
    1dcd:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    1ddd:	45 52 20 74 6f 6b 65 6e 3a 20 25 73 2c 20 61 74     ER token: %s, at
    1ded:	20 6c 69 6e 65 3a 25 64 0a 00                        line:%d..

00001df7 <__c.4598>:
    1df7:	55 6e 65 78 70 65 63 74 65 64 20 53 54 41 52 54     Unexpected START
    1e07:	20 74 6f 6b 65 6e 3a 20 25 73 2c 20 61 74 20 6c      token: %s, at l
    1e17:	69 6e 65 3a 25 64 0a 00                             ine:%d..

00001e1f <__c.4596>:
    1e1f:	53 6b 69 70 70 69 6e 67 20 25 73 2c 20 61 74 20     Skipping %s, at 
    1e2f:	6c 69 6e 65 3a 25 64 0a 00                          line:%d..

00001e38 <__c.4592>:
    1e38:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 6f 70 65     Read_Config: ope
    1e48:	6e 28 25 73 29 20 66 61 69 6c 65 64 0a 00           n(%s) failed..

00001e56 <__c.4590>:
    1e56:	52 65 61 64 69 6e 67 3a 20 25 73 0a 00              Reading: %s..

00001e63 <__c.4563>:
    1e63:	57 61 72 6e 69 6e 67 3a 20 25 73 20 42 59 54 45     Warning: %s BYTE
    1e73:	53 5f 50 45 52 5f 53 45 43 54 4f 52 20 21 3d 20     S_PER_SECTOR != 
    1e83:	32 35 36 2c 20 41 64 6a 75 73 74 69 6e 67 20 74     256, Adjusting t
    1e93:	6f 20 32 35 36 0a 00                                o 256..

00001e9a <__c.4561>:
    1e9a:	57 61 72 6e 69 6e 67 3a 20 25 73 20 42 59 54 45     Warning: %s BYTE
    1eaa:	53 5f 50 45 52 5f 42 4c 4f 43 4b 20 21 3d 20 32     S_PER_BLOCK != 2
    1eba:	35 36 2c 20 41 64 6a 75 73 74 69 6e 67 20 74 6f     56, Adjusting to
    1eca:	20 32 35 36 0a 00                                    256..

00001ed0 <__c.4548>:
    1ed0:	68 70 64 69 72 5f 70 61 72 61 6d 65 74 65 72 73     hpdir_parameters
    1ee0:	20 69 6e 76 61 6c 69 64 20 54 59 50 45 0a 00         invalid TYPE..

00001eef <__c.4512>:
    1eef:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 69 6e     alloc_device: in
    1eff:	76 61 6c 69 64 20 74 79 70 65 3a 25 64 3a 25 73     valid type:%d:%s
    1f0f:	0a 00                                               ..

00001f11 <__c.4504>:
    1f11:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 44 65     alloc_device: De
    1f21:	76 69 63 65 20 74 61 62 6c 65 20 69 73 20 66 75     vice table is fu
    1f31:	6c 6c 0a 00                                         ll..

00001f35 <__c.4491>:
    1f35:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1f45:	65 3a 28 25 64 29 20 69 6e 76 61 6c 69 64 20 74     e:(%d) invalid t
    1f55:	79 70 65 3a 25 64 3a 25 73 0a 00                    ype:%d:%s..

00001f60 <__c.4489>:
    1f60:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1f70:	65 3a 20 69 6e 64 65 78 3a 20 25 64 20 74 79 70     e: index: %d typ
    1f80:	65 3a 25 64 3a 25 73 2c 20 73 74 61 74 65 20 3d     e:%d:%s, state =
    1f90:	3d 20 4e 55 4c 4c 0a 00                             = NULL..

00001f98 <__c.4487>:
    1f98:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1fa8:	65 3a 20 69 6e 64 65 78 20 25 64 20 75 6e 69 6e     e: index %d unin
    1fb8:	69 74 61 6c 69 7a 65 64 20 74 79 70 65 3a 25 64     italized type:%d
    1fc8:	3a 25 73 0a 00                                      :%s..

00001fcd <__c.4485>:
    1fcd:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1fdd:	65 3a 20 69 6e 64 65 78 3a 25 64 20 74 79 70 65     e: index:%d type
    1fed:	3a 25 64 3a 25 73 2c 20 64 65 76 20 3d 3d 20 4e     :%d:%s, dev == N
    1ffd:	55 4c 4c 0a 00                                      ULL..

00002002 <__c.4483>:
    2002:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    2012:	65 3a 20 69 6e 64 65 78 3a 25 64 20 61 64 64 72     e: index:%d addr
    2022:	65 73 73 3a 20 25 30 32 58 48 20 6f 75 74 20 6f     ess: %02XH out o
    2032:	66 20 72 61 6e 67 65 0a 00                          f range..

0000203b <__c.4481>:
    203b:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    204b:	65 3a 28 25 64 29 20 6f 75 74 20 6f 66 20 72 61     e:(%d) out of ra
    205b:	6e 67 65 0a 00                                      nge..

00002060 <__c.3761>:
    2060:	46 6f 75 6e 64 20 4d 6f 64 65 6c 3a 20 25 73 0a     Found Model: %s.
	...

00002071 <__c.3759>:
    2071:	25 73 20 25 73 0a 00                                %s %s..

00002078 <__c.3755>:
    2078:	45 72 72 6f 72 3a 20 68 70 64 69 72 2e 69 6e 69     Error: hpdir.ini
    2088:	20 6e 6f 74 20 66 6f 75 6e 64 21 0a 00               not found!..

00002095 <__c.4583>:
    2095:	5b 53 53 38 30 20 55 6e 6b 6e 6f 77 6e 20 53 43     [SS80 Unknown SC
    20a5:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    20b5:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    20c5:	48 5d 0a 00                                         H]..

000020c9 <__c.4581>:
    20c9:	5b 53 53 38 30 20 53 43 20 55 6e 6b 6e 6f 77 6e     [SS80 SC Unknown
    20d9:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    20e9:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    20f9:	48 5d 0a 00                                         H]..

000020fd <__c.4579>:
    20fd:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    210d:	74 5d 0a 00                                         t]..

00002111 <__c.4577>:
    2111:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

00002120 <__c.4575>:
    2120:	5b 53 53 38 30 20 52 65 70 6f 72 74 20 53 74 61     [SS80 Report Sta
    2130:	74 65 5d 0a 00                                      te]..

00002135 <__c.4573>:
    2135:	5b 53 53 30 30 20 45 78 65 63 75 74 65 20 53 74     [SS00 Execute St
    2145:	61 74 65 5d 0a 00                                   ate]..

0000214b <__c.4571>:
    214b:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    215b:	61 74 65 5d 0a 00                                   ate]..

00002161 <__c.4566>:
    2161:	5b 47 50 49 42 20 45 72 72 6f 72 20 52 65 74 75     [GPIB Error Retu
    2171:	72 6e 20 2d 20 57 72 69 74 65 20 45 52 52 4f 52     rn - Write ERROR
    2181:	5d 0a 00                                            ]..

00002184 <__c.4552>:
    2184:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

00002193 <__c.4550>:
    2193:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    21a3:	5d 0a 00                                            ]..

000021a6 <__c.4543>:
    21a6:	5b 53 53 38 30 20 53 44 43 5d 0a 00                 [SS80 SDC]..

000021b2 <__c.4529>:
    21b2:	5b 53 53 38 30 20 71 73 74 61 74 20 25 30 32 58     [SS80 qstat %02X
    21c2:	5d 0a 00                                            ]..

000021c5 <__c.4527>:
    21c5:	5b 53 53 38 30 20 71 73 74 61 74 20 73 65 6e 64     [SS80 qstat send
    21d5:	20 46 41 49 4c 45 44 5d 0a 00                        FAILED]..

000021df <__c.4520>:
    21df:	5b 53 53 38 30 20 53 65 65 6b 3a 25 30 38 6c 58     [SS80 Seek:%08lX
    21ef:	48 5d 0a 00                                         H]..

000021f3 <__c.4518>:
    21f3:	5b 53 53 38 30 20 53 65 65 6b 20 4f 56 45 52 46     [SS80 Seek OVERF
    2203:	4c 4f 57 20 61 74 20 25 30 38 6c 58 48 5d 0a 00     LOW at %08lXH]..

00002213 <__c.4513>:
    2213:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    2223:	74 20 43 6f 6d 6d 61 6e 64 2c 20 45 72 72 6f 72     t Command, Error
    2233:	20 61 74 20 28 25 64 29 20 6f 66 20 28 25 64 29      at (%d) of (%d)
    2243:	20 4f 50 20 43 6f 64 65 73 5d 0a 00                  OP Codes]..

0000224f <__c.4510>:
    224f:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    225f:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

0000226f <__c.4508>:
    226f:	5b 53 53 38 30 20 43 61 6e 63 65 6c 20 28 25 64     [SS80 Cancel (%d
    227f:	29 5d 0a 00                                         )]..

00002283 <__c.4506>:
    2283:	5b 53 53 38 30 20 43 68 61 6e 6e 65 6c 20 49 6e     [SS80 Channel In
    2293:	64 65 70 65 6e 64 65 6e 74 20 43 6c 65 61 72 20     dependent Clear 
    22a3:	28 25 64 29 5d 0a 00                                (%d)]..

000022aa <__c.4504>:
    22aa:	5b 53 53 38 30 20 57 72 69 74 65 20 4c 6f 6f 70     [SS80 Write Loop
    22ba:	62 61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00           back - TODO]..

000022c8 <__c.4502>:
    22c8:	5b 53 53 38 30 20 52 65 61 64 20 4c 6f 6f 70 62     [SS80 Read Loopb
    22d8:	61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00              ack - TODO]..

000022e5 <__c.4499>:
    22e5:	5b 53 53 38 30 20 48 50 2d 49 42 20 50 61 72 69     [SS80 HP-IB Pari
    22f5:	74 79 20 43 68 65 63 6b 69 6e 67 20 2d 20 54 4f     ty Checking - TO
    2305:	44 4f 5d 0a 00                                      DO]..

0000230a <__c.4496>:
    230a:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    231a:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

00002323 <__c.4494>:
    2323:	5b 47 50 49 42 20 52 65 61 64 20 45 52 52 4f 52     [GPIB Read ERROR
    2333:	5d 0a 00                                            ]..

00002336 <__c.4485>:
    2336:	5b 53 53 38 30 20 45 78 65 63 75 74 65 20 43 6f     [SS80 Execute Co
    2346:	6d 6d 61 6e 64 2c 20 45 72 72 6f 72 20 61 74 20     mmand, Error at 
    2356:	28 25 64 29 20 6f 66 20 28 25 64 29 20 4f 50 20     (%d) of (%d) OP 
    2366:	43 6f 64 65 73 5d 0a 00                             Codes]..

0000236e <__c.4482>:
    236e:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    237e:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

0000238e <__c.4480>:
    238e:	5b 53 53 38 30 20 49 6e 69 61 74 65 20 44 69 61     [SS80 Iniate Dia
    239e:	67 6e 6f 73 74 69 63 20 2d 20 54 4f 44 4f 5d 0a     gnostic - TODO].
	...

000023af <__c.4478>:
    23af:	5b 53 53 38 30 20 52 65 71 75 65 73 74 20 53 74     [SS80 Request St
    23bf:	61 74 75 73 5d 0a 00                                atus]..

000023c6 <__c.4476>:
    23c6:	5b 53 53 38 30 20 44 6f 6f 72 20 4c 6f 63 6b 20     [SS80 Door Lock 
    23d6:	2d 20 54 4f 44 4f 5d 0a 00                          - TODO]..

000023df <__c.4474>:
    23df:	5b 53 53 38 30 20 44 6f 6f 72 20 55 6e 4c 6f 63     [SS80 Door UnLoc
    23ef:	6b 20 2d 20 54 4f 44 4f 5d 0a 00                    k - TODO]..

000023fa <__c.4472>:
    23fa:	5b 53 53 38 30 20 53 65 74 20 53 74 61 74 75 73     [SS80 Set Status
    240a:	20 4d 61 73 6b 20 2d 20 54 4f 44 4f 5d 0a 00         Mask - TODO]..

00002419 <__c.4470>:
    2419:	5b 53 53 38 30 20 49 6e 69 74 69 61 6c 69 7a 65     [SS80 Initialize
    2429:	20 4d 65 64 69 61 20 54 4f 44 4f 5d 0a 00            Media TODO]..

00002437 <__c.4468>:
    2437:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

00002448 <__c.4466>:
    2448:	5b 53 53 38 30 20 56 61 6c 69 64 61 74 65 20 4b     [SS80 Validate K
    2458:	65 79 20 2d 20 54 4f 44 4f 5d 0a 00                 ey - TODO]..

00002464 <__c.4464>:
    2464:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 44 65     [SS80 Release De
    2474:	6e 69 65 64 20 4e 4f 2d 4f 50 5d 0a 00              nied NO-OP]..

00002481 <__c.4462>:
    2481:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 4e 4f     [SS80 Release NO
    2491:	2d 4f 50 5d 0a 00                                   -OP]..

00002497 <__c.4460>:
    2497:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    24a7:	20 56 65 72 69 66 79 20 2d 20 54 4f 44 4f 5d 0a      Verify - TODO].
	...

000024b8 <__c.4458>:
    24b8:	5b 53 53 38 30 20 53 65 74 20 52 65 74 75 72 6e     [SS80 Set Return
    24c8:	20 41 64 64 72 65 73 73 69 6e 67 20 2d 20 54 4f      Addressing - TO
    24d8:	44 4f 5d 0a 00                                      DO]..

000024dd <__c.4456>:
    24dd:	5b 53 53 38 30 20 53 65 74 20 52 65 6c 65 61 73     [SS80 Set Releas
    24ed:	65 20 4e 4f 2d 4f 50 5d 0a 00                       e NO-OP]..

000024f7 <__c.4454>:
    24f7:	5b 53 53 38 30 20 53 65 74 20 52 50 53 20 4e 4f     [SS80 Set RPS NO
    2507:	2d 4f 50 5d 0a 00                                   -OP]..

0000250d <__c.4452>:
    250d:	5b 53 53 38 30 20 4e 4f 2d 4f 50 5d 0a 00           [SS80 NO-OP]..

0000251b <__c.4450>:
    251b:	5b 53 53 38 30 20 53 65 74 20 4c 65 6e 67 74 68     [SS80 Set Length
    252b:	3a 28 25 30 38 6c 58 48 29 5d 0a 00                 :(%08lXH)]..

00002537 <__c.4448>:
    2537:	5b 53 53 38 30 20 53 65 74 20 41 64 64 72 65 73     [SS80 Set Addres
    2547:	73 3a 28 25 30 38 6c 58 48 29 5d 0a 00              s:(%08lXH)]..

00002554 <__c.4446>:
    2554:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2564:	20 57 72 69 74 65 5d 0a 00                           Write]..

0000256d <__c.4443>:
    256d:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    257d:	20 52 65 61 64 5d 0a 00                              Read]..

00002585 <__c.4441>:
    2585:	5b 53 53 38 30 20 53 65 74 20 56 6f 6c 75 6d 65     [SS80 Set Volume
    2595:	3a 20 28 25 64 29 5d 0a 00                          : (%d)]..

0000259e <__c.4438>:
    259e:	5b 53 53 38 30 20 53 65 74 20 55 6e 69 74 3a 28     [SS80 Set Unit:(
    25ae:	25 64 29 5d 0a 00                                   %d)]..

000025b4 <__c.4436>:
    25b4:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    25c4:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

000025cd <__c.4434>:
    25cd:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    25dd:	61 74 65 20 47 50 49 42 20 52 65 61 64 20 45 52     ate GPIB Read ER
    25ed:	52 4f 52 5d 0a 00                                   ROR]..

000025f3 <__c.4425>:
    25f3:	5b 53 53 38 30 20 56 6f 6c 75 6d 65 3a 25 64 20     [SS80 Volume:%d 
    2603:	69 6e 76 61 6c 69 64 5d 0a 00                       invalid]..

0000260d <__c.4420>:
    260d:	5b 53 53 38 30 20 55 4e 49 54 3a 25 64 20 69 6e     [SS80 UNIT:%d in
    261d:	76 61 6c 69 64 5d 0a 00                             valid]..

00002625 <__c.4415>:
    2625:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 56     [SS80 Describe V
    2635:	6f 6c 75 6d 65 20 46 41 49 4c 45 44 5d 0a 00        olume FAILED]..

00002644 <__c.4413>:
    2644:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 55     [SS80 Describe U
    2654:	6e 69 74 20 46 41 49 4c 45 44 5d 0a 00              nit FAILED]..

00002661 <__c.4411>:
    2661:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 43     [SS80 Describe C
    2671:	6f 6e 74 72 6f 6c 6c 65 72 20 46 41 49 4c 45 44     ontroller FAILED
    2681:	5d 0a 00                                            ]..

00002684 <__c.4409>:
    2684:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

00002695 <__c.4401>:
    2695:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    26a5:	73 20 46 41 49 4c 45 44 5d 0a 00                    s FAILED]..

000026b0 <__c.4399>:
    26b0:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    26c0:	73 5d 0a 00                                         s]..

000026c4 <__c.4389>:
    26c4:	20 20 20 20 25 64 3a 25 73 0a 00                        %d:%s..

000026cf <__c.4387>:
    26cf:	25 73 3a 0a 00                                      %s:..

000026d4 <__c.4362>:
    26d4:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    26e4:	20 57 72 69 74 65 20 57 72 6f 74 65 20 54 6f 74      Write Wrote Tot
    26f4:	61 6c 28 25 6c 78 48 29 5d 0a 00                    al(%lxH)]..

000026ff <__c.4360>:
    26ff:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    270f:	20 57 72 69 74 65 20 44 49 44 20 4e 4f 54 20 46      Write DID NOT F
    271f:	49 4e 49 53 48 5d 0a 00                             INISH]..

00002727 <__c.4356>:
    2727:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2737:	20 57 72 69 74 65 20 77 72 6f 74 65 28 25 30 32      Write wrote(%02
    2747:	58 48 29 5d 0a 00                                   XH)]..

0000274d <__c.4354>:
    274d:	5b 44 69 73 6b 20 57 72 69 74 65 20 45 72 72 6f     [Disk Write Erro
    275d:	72 5d 0a 00                                         r]..

00002761 <__c.4350>:
    2761:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    2771:	5d 0a 00                                            ]..

00002774 <__c.4348>:
    2774:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2784:	20 57 72 69 74 65 20 61 74 20 25 30 38 6c 58 48      Write at %08lXH
    2794:	28 25 6c 58 48 29 5d 0a 00                          (%lXH)]..

0000279d <__c.4336>:
    279d:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    27ad:	65 61 64 20 54 6f 74 61 6c 28 25 6c 58 48 29 20     ead Total(%lXH) 
    27bd:	62 79 74 65 73 5d 0a 00                             bytes]..

000027c5 <__c.4334>:
    27c5:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    27d5:	65 61 64 20 44 49 44 20 4e 4f 54 20 46 49 4e 49     ead DID NOT FINI
    27e5:	53 48 5d 0a 00                                      SH]..

000027ea <__c.4329>:
    27ea:	5b 53 53 38 30 20 47 50 49 42 20 57 72 69 74 65     [SS80 GPIB Write
    27fa:	20 57 72 72 6f 72 5d 0a 00                           Wrror]..

00002803 <__c.4327>:
    2803:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    2813:	45 72 72 6f 72 5d 0a 00                             Error]..

0000281b <__c.4325>:
    281b:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    282b:	25 30 32 58 48 20 62 79 74 65 73 5d 0a 00           %02XH bytes]..

00002839 <__c.4323>:
    2839:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2849:	20 52 65 61 64 20 61 74 20 25 30 38 6c 58 48 28      Read at %08lXH(
    2859:	25 6c 58 48 29 5d 0a 00                             %lXH)]..

00002861 <__c.4306>:
    2861:	5b 53 53 38 30 20 45 58 45 43 20 73 74 61 74 65     [SS80 EXEC state
    2871:	3a 25 64 20 65 72 72 6f 72 5d 0a 00                 :%d error]..

0000287d <__c.4290>:
    287d:	5b 53 53 38 30 20 25 30 32 58 48 20 49 4e 49 54     [SS80 %02XH INIT
    288d:	5d 0a 00                                            ]..

00002890 <__c.4397>:
    2890:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    28a0:	65 71 75 65 73 74 20 4c 6f 67 69 63 61 6c 20 41     equest Logical A
    28b0:	64 64 72 65 73 73 5d 0a 00                          ddress]..

000028b9 <__c.4394>:
    28b9:	5b 41 4d 49 47 4f 20 45 78 69 63 75 74 65 20 52     [AMIGO Exicute R
    28c9:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 55 6e     equest Status Un
    28d9:	62 75 66 66 65 72 65 64 5d 0a 00                    buffered]..

000028e4 <__c.4391>:
    28e4:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    28f4:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 42 75     equest Status Bu
    2904:	66 66 65 72 65 64 5d 0a 00                          ffered]..

0000290d <__c.4386>:
    290d:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    291d:	72 69 74 65 20 42 75 66 66 65 72 65 64 5d 0a 00     rite Buffered]..

0000292d <__c.4383>:
    292d:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 49     [AMIGO Execute I
    293d:	6e 69 74 69 61 6c 69 7a 65 5d 0a 00                 nitialize]..

00002949 <__c.4380>:
    2949:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    2959:	72 69 74 65 20 55 6e 62 75 66 66 65 72 65 64 5d     rite Unbuffered]
    2969:	0a 00                                               ..

0000296b <__c.4377>:
    296b:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    297b:	65 61 64 20 42 75 66 66 65 72 65 64 5d 0a 00        ead Buffered]..

0000298a <__c.4374>:
    298a:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    299a:	65 61 64 20 55 6e 62 75 66 66 65 72 65 64 5d 0a     ead Unbuffered].
	...

000029ab <__c.4371>:
    29ab:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 43     [AMIGO Execute C
    29bb:	6f 6c 64 20 4c 6f 61 64 20 52 65 61 64 5d 0a 00     old Load Read]..

000029cb <__c.4367>:
    29cb:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 28 25     [AMIGO Execute(%
    29db:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    29eb:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    29fb:	0a 00                                               ..

000029fd <__c.4362>:
    29fd:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 5d 0a 00     [AMIGO Format]..

00002a0d <__c.4359>:
    2a0d:	5b 41 4d 49 47 4f 20 52 65 61 64 20 42 75 66 66     [AMIGO Read Buff
    2a1d:	65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00        ered Command]..

00002a2c <__c.4357>:
    2a2c:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    2a3c:	74 61 74 75 73 20 55 6e 62 75 66 66 65 72 65 64     tatus Unbuffered
    2a4c:	20 43 6f 6d 6d 61 6e 64 5d 0a 00                     Command]..

00002a57 <__c.4355>:
    2a57:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 42 75 66     [AMIGO Write Buf
    2a67:	66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00     fered Command]..

00002a77 <__c.4353>:
    2a77:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 4c     [AMIGO Request L
    2a87:	6f 67 69 63 61 6c 20 41 64 64 72 65 73 73 20 43     ogical Address C
    2a97:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

00002aa0 <__c.4351>:
    2aa0:	5b 41 4d 49 47 4f 20 49 6e 69 74 69 61 6c 69 7a     [AMIGO Initializ
    2ab0:	65 20 43 6f 6d 6d 61 6e 64 5d 0a 00                 e Command]..

00002abc <__c.4349>:
    2abc:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 55 6e 62     [AMIGO Write Unb
    2acc:	75 66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d     uffered Command]
    2adc:	0a 00                                               ..

00002ade <__c.4347>:
    2ade:	5b 41 4d 49 47 4f 20 56 65 72 69 66 79 5d 0a 00     [AMIGO Verify]..

00002aee <__c.4344>:
    2aee:	5b 41 4d 49 47 4f 20 52 65 61 64 20 55 6e 62 75     [AMIGO Read Unbu
    2afe:	66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a     ffered Command].
	...

00002b0f <__c.4342>:
    2b0f:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    2b1f:	74 61 74 75 73 20 42 75 66 66 65 72 65 64 20 43     tatus Buffered C
    2b2f:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

00002b38 <__c.4340>:
    2b38:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    2b48:	36 5d 0a 00                                         6]..

00002b4c <__c.4337>:
    2b4c:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    2b5c:	35 5d 0a 00                                         5]..

00002b60 <__c.4334>:
    2b60:	5b 41 4d 49 47 4f 20 43 6f 6c 64 20 4c 6f 61 64     [AMIGO Cold Load
    2b70:	20 52 65 61 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00      Read Command]..

00002b80 <__c.4331>:
    2b80:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    2b90:	30 32 58 48 29 3a 20 47 50 49 42 20 72 65 61 64     02XH): GPIB read
    2ba0:	20 62 79 74 65 73 3a 25 30 32 58 48 5d 0a 00         bytes:%02XH]..

00002baf <__c.4329>:
    2baf:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    2bbf:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

00002bd0 <__c.4327>:
    2bd0:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    2be0:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

00002bf1 <__c.4325>:
    2bf1:	5b 41 4d 49 47 4f 5f 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO_Command:G
    2c01:	50 49 42 20 77 72 69 74 65 20 65 72 72 6f 72 5d     PIB write error]
    2c11:	0a 00                                               ..

00002c13 <__c.4323>:
    2c13:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    2c23:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    2c33:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    2c43:	0a 00                                               ..

00002c45 <__c.4311>:
    2c45:	5b 45 20 20 20 41 6d 69 67 6f 20 45 52 52 4f 52     [E   Amigo ERROR
    2c55:	20 73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58      secondary: %02X
    2c65:	48 2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20     H, state:%02XH, 
    2c75:	6c 69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c     listening:%02XH,
    2c85:	20 74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a      talking:%02XH].
	...

00002c96 <__c.4309>:
    2c96:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    2ca6:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2cb6:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2cc6:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2cd6:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002ce6 <__c.4307>:
    2ce6:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    2cf6:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2d06:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2d16:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2d26:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002d36 <__c.4305>:
    2d36:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    2d46:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2d56:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2d66:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2d76:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002d86 <__c.4300>:
    2d86:	5b 55 20 41 6d 69 67 6f 20 54 4f 44 4f 20 73 65     [U Amigo TODO se
    2d96:	63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48 2c 20     condary: %02XH, 
    2da6:	73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f 70 63     state:%02XH, opc
    2db6:	6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e 3a 25     ode:%02XH, len:%
    2dc6:	33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a 25 30     3d, listening:%0
    2dd6:	32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25 30 32     2XH, talking:%02
    2de6:	58 48 5d 0a 00                                      XH]..

00002deb <__c.4298>:
    2deb:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    2dfb:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2e0b:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2e1b:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2e2b:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2e3b:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2e4b:	30 32 58 48 5d 0a 00                                02XH]..

00002e52 <__c.4296>:
    2e52:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    2e62:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2e72:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2e82:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2e92:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2ea2:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2eb2:	30 32 58 48 5d 0a 00                                02XH]..

00002eb9 <__c.4294>:
    2eb9:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    2ec9:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2ed9:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2ee9:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2ef9:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2f09:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2f19:	30 32 58 48 5d 0a 00                                02XH]..

00002f20 <__c.4287>:
    2f20:	5b 41 4d 49 47 4f 20 43 6c 65 61 72 5d 0a 00        [AMIGO Clear]..

00002f2f <__c.4274>:
    2f2f:	5b 44 53 4a 20 25 30 32 58 48 5d 0a 00              [DSJ %02XH]..

00002f3c <__c.4272>:
    2f3c:	5b 41 49 4d 47 4f 3a 20 44 53 4a 20 73 65 6e 64     [AIMGO: DSJ send
    2f4c:	20 66 61 69 6c 65 64 5d 0a 00                        failed]..

00002f56 <__c.4265>:
    2f56:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 47 50 49     [AMIGO Write GPI
    2f66:	42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a 00        B read error]..

00002f75 <__c.4258>:
    2f75:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2f85:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002f8f <__c.4251>:
    2f8f:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 20 44 6f     [AMIGO Format Do
    2f9f:	6e 65 5d 0a 00                                      ne]..

00002fa4 <__c.4247>:
    2fa4:	5b 41 4d 49 47 4f 20 66 6f 72 6d 61 74 5d 0a 00     [AMIGO format]..

00002fb4 <__c.4206>:
    2fb4:	5b 41 4d 49 47 4f 20 25 73 2c 20 50 3a 25 30 38     [AMIGO %s, P:%08
    2fc4:	6c 78 48 2c 20 55 3a 25 64 20 43 3a 25 64 20 48     lxH, U:%d C:%d H
    2fd4:	3a 25 64 20 53 3a 25 64 5d 0a 00                    :%d S:%d]..

00002fdf <__c.4236>:
    2fdf:	5b 41 4d 49 47 4f 20 76 65 72 69 66 79 20 50 3a     [AMIGO verify P:
    2fef:	25 30 38 6c 58 48 2c 20 73 65 63 74 6f 72 73 3a     %08lXH, sectors:
    2fff:	25 30 34 58 48 5d 0a 00                             %04XH]..

00003007 <__c.4213>:
    3007:	5b 41 4d 49 47 4f 20 25 73 20 70 6f 73 20 4f 56     [AMIGO %s pos OV
    3017:	45 52 46 4c 4f 57 5d 0a 00                          ERFLOW]..

00003020 <__c.4199>:
    3020:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    3030:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

0000303a <__c.4197>:
    303a:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 73 74 61 74     [AMIGO send stat
    304a:	75 73 5d 0a 00                                      us]..

0000304f <__c.4191>:
    304f:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    305f:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00003069 <__c.4189>:
    3069:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 6c 6f 67 69     [AMIGO send logi
    3079:	63 61 6c 20 61 64 64 72 65 73 73 5d 0a 00           cal address]..

00003087 <__c.4183>:
    3087:	5b 41 4d 49 47 4f 20 72 65 71 75 65 73 74 20 73     [AMIGO request s
    3097:	74 61 74 75 73 5d 0a 00                             tatus]..

0000309f <__c.4187>:
    309f:	5b 53 43 20 50 52 49 4e 54 45 52 20 54 61 6c 6b     [SC PRINTER Talk
    30af:	3a 20 25 30 32 58 48 5d 0a 00                       : %02XH]..

000030b9 <__c.4185>:
    30b9:	5b 53 43 20 50 52 49 4e 54 45 52 20 4c 69 73 74     [SC PRINTER List
    30c9:	65 6e 3a 20 25 30 32 58 48 5d 0a 00                 en: %02XH]..

000030d5 <__c.4180>:
    30d5:	25 30 38 6c 64 0d 00                                %08ld..

000030dc <__c.4174>:
    30dc:	77 72 69 74 65 20 66 61 69 6c 65 64 3a 20 77 61     write failed: wa
    30ec:	6e 74 65 64 20 25 64 2c 20 67 6f 74 3a 25 64 0a     nted %d, got:%d.
	...

000030fd <__c.4168>:
    30fd:	0a 44 4f 4e 45 3a 20 25 30 38 6c 64 0a 00           .DONE: %08ld..

0000310b <__c.4166>:
    310b:	45 52 52 4f 52 20 64 75 72 72 69 6e 67 20 77 72     ERROR durring wr
    311b:	69 74 65 0a 00                                      ite..

00003120 <__c.4160>:
    3120:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

0000312c <__c.4158>:
    312c:	43 61 70 74 75 72 69 6e 67 20 70 6c 6f 74 20 74     Capturing plot t
    313c:	6f 3a 25 73 0a 00                                   o:%s..

00003142 <__c.4156>:
    3142:	2f 70 6c 6f 74 2d 25 30 32 64 25 73 25 30 34 64     /plot-%02d%s%04d
    3152:	2d 25 30 32 64 25 30 32 64 25 30 32 64 2e 70 6c     -%02d%02d%02d.pl
    3162:	74 00                                               t.

00003164 <__c.4671>:
    3164:	09 46 6f 72 6d 61 74 74 69 6e 67 3a 20 77 72 6f     .Formatting: wro
    3174:	74 65 20 25 6c 64 20 73 65 63 74 6f 72 73 0a 00     te %ld sectors..

00003184 <__c.4669>:
    3184:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    3194:	3a 20 73 65 63 74 6f 72 73 20 69 73 20 30 0a 00     : sectors is 0..

000031a4 <__c.4667>:
    31a4:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    31b4:	3a 20 64 69 72 73 65 63 74 6f 72 73 20 69 73 20     : dirsectors is 
    31c4:	30 0a 00                                            0..

000031c7 <__c.4665>:
    31c7:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    31d7:	3a 20 6c 69 66 6c 61 62 65 6c 20 69 73 20 65 6d     : liflabel is em
    31e7:	70 74 79 0a 00                                      pty..

000031ec <__c.4663>:
    31ec:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    31fc:	3a 20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69     : lifimagename i
    320c:	73 20 65 6d 70 74 79 0a 00                          s empty..

00003215 <__c.4650>:
    3215:	72 65 6e 61 6d 65 64 3a 20 25 31 30 73 20 74 6f     renamed: %10s to
    3225:	20 25 31 30 73 0a 00                                 %10s..

0000322c <__c.4648>:
    322c:	6c 69 66 5f 72 65 6e 61 6d 65 3a 5b 25 73 5d 20     lif_rename:[%s] 
    323c:	6c 69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f     lif name:[%s] no
    324c:	74 20 66 6f 75 6e 64 0a 00                          t found..

00003255 <__c.4646>:
    3255:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    3265:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 63 6f 6e      new lifname con
    3275:	74 61 69 6e 73 20 62 61 64 20 63 68 61 72 61 63     tains bad charac
    3285:	74 65 72 73 0a 00                                   ters..

0000328b <__c.4644>:
    328b:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    329b:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 69 73 20      new lifname is 
    32ab:	65 6d 70 74 79 0a 00                                empty..

000032b2 <__c.4642>:
    32b2:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    32c2:	20 6f 6c 64 20 6c 69 66 6e 61 6d 65 20 69 73 20      old lifname is 
    32d2:	65 6d 70 74 79 0a 00                                empty..

000032d9 <__c.4640>:
    32d9:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    32e9:	20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69 73      lifimagename is
    32f9:	20 65 6d 70 74 79 0a 00                              empty..

00003301 <__c.4631>:
    3301:	44 65 6c 65 74 65 64 3a 20 25 31 30 73 0a 00        Deleted: %10s..

00003310 <__c.4629>:
    3310:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 20 6c     LIF image:[%s] l
    3320:	69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f 74     if name:[%s] not
    3330:	20 66 6f 75 6e 64 0a 00                              found..

00003338 <__c.4627>:
    3338:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3348:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 0a 00        LIF name:[%s]..

00003357 <__c.4625>:
    3357:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    3367:	66 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     fname is empty..

00003377 <__c.4623>:
    3377:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    3387:	66 69 6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d     fimagename is em
    3397:	70 74 79 0a 00                                      pty..

0000339c <__c.4615>:
    339c:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

000033aa <__c.4610>:
    33aa:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

000033b8 <__c.4608>:
    33b8:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    33c8:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    33d8:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

000033e8 <__c.4606>:
    33e8:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    33f8:	73 0a 00                                            s..

000033fb <__c.4604>:
    33fb:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    340b:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    341b:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

0000342a <__c.4602>:
    342a:	6c 69 66 5f 61 64 64 3a 20 75 73 65 72 66 69 6c     lif_add: userfil
    343a:	65 20 69 73 20 65 6d 70 74 79 0a 00                 e is empty..

00003446 <__c.4600>:
    3446:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 6e 61 6d 65     lif_add: lifname
    3456:	20 69 73 20 65 6d 70 74 79 0a 00                     is empty..

00003461 <__c.4598>:
    3461:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 69 6d 61 67     lif_add: lifimag
    3471:	65 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     ename is empty..

00003481 <__c.4581>:
    3481:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

0000348f <__c.4576>:
    348f:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

0000349d <__c.4574>:
    349d:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    34ad:	73 0a 00                                            s..

000034b0 <__c.4572>:
    34b0:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    34c0:	75 6e 64 3a 25 73 0a 00                             und:%s..

000034c8 <__c.4555>:
    34c8:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

000034d6 <__c.4552>:
    34d6:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    34e6:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    34f6:	20 65 72 72 6f 72 0a 00                              error..

000034fe <__c.4544>:
    34fe:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

0000350c <__c.4542>:
    350c:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    351c:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    352c:	20 65 72 72 6f 72 0a 00                              error..

00003534 <__c.4539>:
    3534:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    3544:	5f 61 73 5f 61 73 63 69 69 3a 20 75 6e 65 78 70     _as_ascii: unexp
    3554:	65 63 74 65 64 20 63 6f 6e 74 72 6f 6c 20 62 79     ected control by
    3564:	74 65 3a 5b 25 30 32 58 48 5d 20 40 20 6f 66 66     te:[%02XH] @ off
    3574:	73 65 74 3a 20 25 38 6c 78 2c 20 69 6e 64 3a 25     set: %8lx, ind:%
    3584:	30 32 58 48 0a 00                                   02XH..

0000358a <__c.4537>:
    358a:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    359a:	5f 61 73 5f 61 73 63 69 69 3a 20 73 74 72 69 6e     _as_ascii: strin
    35aa:	67 20 74 6f 6f 20 62 69 67 20 73 69 7a 65 20 3d     g too big size =
    35ba:	20 25 64 0a 00                                       %d..

000035bf <__c.4533>:
    35bf:	45 78 74 72 61 63 74 69 6e 67 3a 20 25 73 0a 00     Extracting: %s..

000035cf <__c.4531>:
    35cf:	46 69 6c 65 20 25 73 20 68 61 73 20 77 72 6f 6e     File %s has wron
    35df:	67 20 74 79 70 65 3a 5b 25 30 34 58 48 5d 20 65     g type:[%04XH] e
    35ef:	78 70 65 63 74 65 64 20 30 78 45 30 31 30 2e 2e     xpected 0xE010..
    35ff:	30 78 45 30 31 33 0a 00                             0xE013..

00003607 <__c.4529>:
    3607:	4c 49 46 20 46 69 6c 65 20 6e 6f 74 20 66 6f 75     LIF File not fou
    3617:	6e 64 3a 25 73 0a 00                                nd:%s..

0000361e <__c.4527>:
    361e:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    362e:	75 6e 64 3a 25 73 0a 00                             und:%s..

00003636 <__c.4503>:
    3636:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

00003644 <__c.4501>:
    3644:	46 69 6c 65 20 53 65 63 74 6f 72 73 3a 20 20 20     File Sectors:   
    3654:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

0000365d <__c.4499>:
    365d:	46 69 72 73 74 20 53 65 63 74 6f 72 3a 20 20 20     First Sector:   
    366d:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

00003676 <__c.4497>:
    3676:	49 6e 64 65 78 3a 20 20 20 20 20 20 20 20 20 20     Index:          
    3686:	20 20 25 34 64 0a 00                                  %4d..

0000368d <__c.4495>:
    368d:	4e 61 6d 65 3a 20 20 20 20 20 20 20 20 20 20 20     Name:           
    369d:	20 20 20 25 73 0a 00                                   %s..

000036a4 <__c.4493>:
    36a4:	4e 65 77 20 44 69 72 65 63 74 6f 72 79 20 49 6e     New Directory In
    36b4:	66 6f 72 6d 61 74 69 6f 6e 20 41 46 54 45 52 20     formation AFTER 
    36c4:	77 72 69 74 65 0a 00                                write..

000036cb <__c.4491>:
    36cb:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    36db:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    36eb:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

000036fb <__c.4489>:
    36fb:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    370b:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    371b:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

0000372a <__c.4487>:
    372a:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    373a:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    374a:	66 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 0a 00     file not found..

0000375a <__c.4485>:
    375a:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    376a:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    377a:	66 69 6c 65 20 69 73 20 65 6d 70 74 79 0a 00        file is empty..

00003789 <__c.4483>:
    3789:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    3799:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 6e     le_as_e010: lifn
    37a9:	61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00           ame is empty..

000037b7 <__c.4481>:
    37b7:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    37c7:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 69     le_as_e010: lifi
    37d7:	6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d 70 74     magename is empt
    37e7:	79 0a 00                                            y..

000037ea <__c.4467>:
    37ea:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

000037f8 <__c.4465>:
    37f8:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003806 <__c.4460>:
    3806:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003814 <__c.4443>:
    3814:	45 78 70 65 63 74 65 64 20 73 65 63 74 6f 72 20     Expected sector 
    3824:	62 6f 75 6e 64 72 79 2c 20 6f 66 66 73 65 74 3a     boundry, offset:
    3834:	25 64 0a 00                                         %d..

00003838 <__c.4426>:
    3838:	6c 69 66 5f 65 30 31 30 5f 64 61 70 5f 73 65 63     lif_e010_dap_sec
    3848:	74 6f 72 3a 20 65 78 70 65 63 74 65 64 20 73 65     tor: expected se
    3858:	63 74 6f 72 20 62 6f 75 6e 64 72 79 3a 20 6f 66     ctor boundry: of
    3868:	66 73 65 74 3a 25 64 0a 00                          fset:%d..

00003871 <__c.4412>:
    3871:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    3881:	73 5d 20 6c 69 66 6c 61 62 65 6c 20 74 6f 6f 20     s] liflabel too 
    3891:	62 69 67 0a 00                                      big..

00003896 <__c.4410>:
    3896:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    38a6:	73 5d 20 69 6e 76 61 6c 69 64 20 63 68 61 72 61     s] invalid chara
    38b6:	63 74 65 72 73 0a 00                                cters..

000038bd <__c.4403>:
    38bd:	25 38 6c 64 20 46 72 65 65 20 73 65 63 74 6f 72     %8ld Free sector
    38cd:	73 0a 00                                            s..

000038d0 <__c.4401>:
    38d0:	25 38 6c 64 20 55 73 65 64 20 73 65 63 74 6f 72     %8ld Used sector
    38e0:	73 0a 00                                            s..

000038e3 <__c.4399>:
    38e3:	25 38 6c 64 20 44 69 72 20 20 73 65 63 74 6f 72     %8ld Dir  sector
    38f3:	73 0a 00                                            s..

000038f6 <__c.4397>:
    38f6:	25 38 6c 64 20 44 69 72 20 20 73 74 61 72 74 0a     %8ld Dir  start.
	...

00003907 <__c.4395>:
    3907:	25 38 6c 64 20 50 75 72 67 65 64 0a 00              %8ld Purged..

00003914 <__c.4393>:
    3914:	25 38 6c 64 20 46 69 6c 65 73 0a 00                 %8ld Files..

00003920 <__c.4391>:
    3920:	0a 00                                               ..

00003922 <__c.4388>:
    3922:	25 2d 31 30 73 20 20 25 30 34 58 68 20 20 20 20     %-10s  %04Xh    
    3932:	20 20 25 38 6c 58 68 20 20 20 25 39 6c 64 25 63       %8lXh   %9ld%c
    3942:	20 20 20 20 20 20 25 34 64 20 20 20 25 73 0a 00           %4d   %s..

00003952 <__c.4386>:
    3952:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3962:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    3972:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3982:	6f 72 73 3a 25 6c 64 20 21 3d 20 46 69 6c 65 53     ors:%ld != FileS
    3992:	65 63 74 6f 72 73 3a 25 6c 64 0a 00                 ectors:%ld..

0000399e <__c.4383>:
    399e:	4e 41 4d 45 20 20 20 20 20 20 20 20 20 54 59 50     NAME         TYP
    39ae:	45 20 20 20 53 54 41 52 54 20 53 45 43 54 4f 52     E   START SECTOR
    39be:	20 20 20 20 20 20 20 20 53 49 5a 45 20 20 20 20             SIZE    
    39ce:	52 45 43 53 49 5a 45 20 20 20 44 41 54 45 0a 00     RECSIZE   DATE..

000039de <__c.4381>:
    39de:	56 6f 6c 75 6d 65 3a 5b 25 73 5d 20 44 61 74 65     Volume:[%s] Date
    39ee:	3a 5b 25 73 5d 0a 00                                :[%s]..

000039f5 <__c.4371>:
    39f5:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3a05:	5b 25 73 5d 20 65 72 72 6f 72 20 64 69 72 65 63     [%s] error direc
    3a15:	74 6f 72 79 20 63 68 65 63 6b 20 66 61 69 6c 65     tory check faile
    3a25:	64 0a 00                                            d..

00003a28 <__c.4369>:
    3a28:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3a38:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    3a48:	65 20 76 61 6c 69 64 61 74 65 20 66 61 69 6c 65     e validate faile
    3a58:	64 0a 00                                            d..

00003a5b <__c.4367>:
    3a5b:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3a6b:	5b 25 73 5d 20 65 72 72 6f 72 20 72 65 61 64 20     [%s] error read 
    3a7b:	76 6f 6c 75 6d 65 20 68 65 61 64 65 72 20 66 61     volume header fa
    3a8b:	69 6c 65 64 0a 00                                   iled..

00003a91 <__c.4365>:
    3a91:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3aa1:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    3ab1:	65 20 68 65 61 64 65 72 20 61 72 65 61 20 74 6f     e header area to
    3ac1:	6f 20 73 6d 61 6c 6c 3a 5b 25 6c 64 5d 0a 00        o small:[%ld]..

00003ad0 <__c.4352>:
    3ad0:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 69 6e 64 65     lif_newdir: inde
    3ae0:	78 3a 5b 25 64 5d 20 61 64 64 69 6e 67 20 61 74     x:[%d] adding at
    3af0:	3a 5b 25 6c 64 5d 74 6f 20 70 75 72 67 65 64 20     :[%ld]to purged 
    3b00:	73 70 61 63 65 3a 5b 25 6c 64 5d 20 73 65 63 74     space:[%ld] sect
    3b10:	6f 72 73 2c 20 66 72 65 65 3a 5b 25 6c 64 5d 0a     ors, free:[%ld].
	...

00003b21 <__c.4349>:
    3b21:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    3b31:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    3b41:	65 3a 5b 25 6c 64 5d 0a 00                          e:[%ld]..

00003b4a <__c.4347>:
    3b4a:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    3b5a:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    3b6a:	65 3a 5b 25 6c 64 5d 20 66 6f 72 20 73 69 7a 65     e:[%ld] for size
    3b7a:	3a 5b 25 6c 64 5d 0a 00                             :[%ld]..

00003b82 <__c.4335>:
    3b82:	6c 69 66 5f 75 70 64 61 74 65 5f 66 72 65 65 3a     lif_update_free:
    3b92:	5b 25 73 5d 20 65 72 72 6f 72 20 70 72 65 76 69     [%s] error previ
    3ba2:	6f 75 73 20 72 65 63 6f 72 64 20 66 69 6c 65 20     ous record file 
    3bb2:	61 72 65 61 20 6f 76 65 72 6c 61 70 73 20 74 68     area overlaps th
    3bc2:	69 73 20 6f 6e 65 3a 5b 25 73 5d 0a 00              is one:[%s]..

00003bcf <__c.4310>:
    3bcf:	6c 69 66 5f 63 68 65 63 6b 5f 64 69 72 3a 20 65     lif_check_dir: e
    3bdf:	72 72 6f 72 2c 20 69 6e 64 65 78 3a 25 64 0a 00     rror, index:%d..

00003bef <__c.4301>:
    3bef:	6c 69 66 5f 63 68 65 63 6b 64 69 72 69 6e 64 65     lif_checkdirinde
    3bff:	78 3a 5b 25 73 5d 20 64 69 72 65 63 6f 72 79 20     x:[%s] direcory 
    3c0f:	69 6e 64 65 78 3a 5b 25 64 5d 20 6f 75 74 20 6f     index:[%d] out o
    3c1f:	66 20 62 6f 75 6e 64 73 0a 00                       f bounds..

00003c29 <__c.4282>:
    3c29:	09 57 72 6f 74 65 3a 20 25 6c 64 0a 00              .Wrote: %ld..

00003c36 <__c.4277>:
    3c36:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

00003c43 <__c.4272>:
    3c43:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

00003c50 <__c.4264>:
    3c50:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

00003c5d <__c.4262>:
    3c5d:	43 72 65 61 74 69 6e 67 3a 25 73 2c 20 4c 61 62     Creating:%s, Lab
    3c6d:	65 6c 3a 5b 25 73 5d 2c 20 44 69 72 65 63 74 6f     el:[%s], Directo
    3c7d:	72 79 20 53 74 61 72 74 20 25 6c 64 2c 20 44 69     ry Start %ld, Di
    3c8d:	72 65 63 74 6f 72 79 20 53 69 7a 65 3a 20 25 6c     rectory Size: %l
    3c9d:	64 2c 20 46 69 6c 65 20 53 65 63 74 6f 72 73 3a     d, File Sectors:
    3cad:	25 6c 64 0a 00                                      %ld..

00003cb2 <__c.4246>:
    3cb2:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3cc2:	73 5d 20 69 6e 76 61 6c 69 64 20 73 65 63 74 6f     s] invalid secto
    3cd2:	72 20 73 69 7a 65 3a 25 6c 64 0a 00                 r size:%ld..

00003cde <__c.4244>:
    3cde:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3cee:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3cfe:	79 74 65 73 20 3d 3d 20 30 0a 00                    ytes == 0..

00003d09 <__c.4242>:
    3d09:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3d19:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    3d29:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3d39:	6f 72 73 3a 25 6c 64 20 3c 20 46 69 6c 65 53 65     ors:%ld < FileSe
    3d49:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003d54 <__c.4240>:
    3d54:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3d64:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3d74:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3d84:	6f 72 73 3a 25 6c 64 20 3e 20 46 69 6c 65 53 65     ors:%ld > FileSe
    3d94:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003d9f <__c.4238>:
    3d9f:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3daf:	73 5d 20 69 6e 76 61 6c 69 64 20 56 6f 6c 75 6d     s] invalid Volum
    3dbf:	65 20 4e 75 6d 62 65 72 3a 25 58 68 0a 00           e Number:%Xh..

00003dcd <__c.4236>:
    3dcd:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3ddd:	73 5d 20 69 6e 76 61 6c 69 64 20 65 6e 64 20 73     s] invalid end s
    3ded:	65 63 74 6f 72 3a 25 6c 58 68 20 3e 20 74 6f 74     ector:%lXh > tot
    3dfd:	61 6c 20 73 65 63 74 6f 72 73 3a 25 6c 58 68 0a     al sectors:%lXh.
	...

00003e0e <__c.4234>:
    3e0e:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3e1e:	73 5d 20 69 6e 76 61 6c 69 64 20 73 74 61 72 74     s] invalid start
    3e2e:	20 73 65 63 74 6f 72 3a 25 6c 58 68 20 3c 20 66      sector:%lXh < f
    3e3e:	69 65 20 61 72 65 61 20 73 74 61 72 74 3a 25 6c     ie area start:%l
    3e4e:	58 68 0a 00                                         Xh..

00003e52 <__c.4232>:
    3e52:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3e62:	73 5d 20 69 6e 76 61 6c 69 64 20 4e 61 6d 65 0a     s] invalid Name.
	...

00003e73 <__c.4226>:
    3e73:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3e83:	69 64 20 66 69 6c 65 20 73 74 61 72 74 20 3e 20     id file start > 
    3e93:	69 6d 61 67 65 20 73 69 7a 65 0a 00                 image size..

00003e9f <__c.4224>:
    3e9f:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3eaf:	69 64 20 44 69 72 65 63 74 6f 72 79 20 53 65 63     id Directory Sec
    3ebf:	74 6f 72 20 43 6f 75 6e 74 20 3c 20 31 0a 00        tor Count < 1..

00003ece <__c.4222>:
    3ece:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3ede:	69 64 20 73 74 61 72 74 20 73 65 63 74 6f 72 3a     id start sector:
    3eee:	25 6c 64 0a 00                                      %ld..

00003ef3 <__c.4220>:
    3ef3:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3f03:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    3f13:	65 74 20 32 32 26 32 33 20 73 68 6f 75 6c 64 20     et 22&23 should 
    3f23:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00003f2c <__c.4218>:
    3f2c:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3f3c:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    3f4c:	65 74 20 31 34 26 31 35 20 73 68 6f 75 6c 64 20     et 14&15 should 
    3f5c:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00003f65 <__c.4216>:
    3f65:	4c 49 46 20 56 65 72 73 69 6f 6e 3a 20 25 30 34     LIF Version: %04
    3f75:	58 48 20 3e 20 31 0a 00                             XH > 1..

00003f7d <__c.4214>:
    3f7d:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3f8d:	69 64 20 53 79 73 74 65 6d 33 30 30 30 20 49 44     id System3000 ID
    3f9d:	20 28 25 30 34 58 48 29 20 65 78 70 65 63 74 65      (%04XH) expecte
    3fad:	64 20 31 30 30 30 48 0a 00                          d 1000H..

00003fb6 <__c.4212>:
    3fb6:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3fc6:	69 64 20 56 6f 6c 75 6d 65 20 4e 61 6d 65 00        id Volume Name.

00003fd5 <__c.4205>:
    3fd5:	0a 00                                               ..

00003fd7 <__c.4203>:
    3fd7:	44 49 52 20 46 69 6c 65 20 44 61 74 65 3a 20 20     DIR File Date:  
    3fe7:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003ff1 <__c.4201>:
    3ff1:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 20     DIR File sector 
    4001:	73 69 7a 65 3a 20 25 38 58 68 0a 00                 size: %8Xh..

0000400d <__c.4199>:
    400d:	44 49 52 20 46 69 6c 65 20 62 79 74 65 73 3a 20     DIR File bytes: 
    401d:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

0000402a <__c.4197>:
    402a:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 73     DIR File sectors
    403a:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

00004047 <__c.4195>:
    4047:	44 49 52 20 46 69 6c 65 20 73 74 61 72 74 3a 20     DIR File start: 
    4057:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004064 <__c.4193>:
    4064:	44 49 52 20 46 69 6c 65 20 56 6f 6c 75 6d 65 23     DIR File Volume#
    4074:	3a 20 20 20 20 20 25 38 58 68 0a 00                 :     %8Xh..

00004080 <__c.4191>:
    4080:	44 49 52 20 46 69 6c 65 20 54 79 70 65 3a 20 20     DIR File Type:  
    4090:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

0000409c <__c.4189>:
    409c:	44 49 52 20 46 69 6c 65 20 4e 61 6d 65 3a 20 20     DIR File Name:  
    40ac:	20 20 20 20 20 20 25 73 0a 00                             %s..

000040b6 <__c.4187>:
    40b6:	56 4f 4c 20 44 61 74 65 3a 20 20 20 20 20 20 20     VOL Date:       
    40c6:	20 20 20 20 20 20 25 73 0a 00                             %s..

000040d0 <__c.4185>:
    40d0:	56 4f 4c 20 4c 49 46 56 65 72 73 69 6f 6e 3a 20     VOL LIFVersion: 
    40e0:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

000040ec <__c.4183>:
    40ec:	56 4f 4c 20 33 30 30 30 4c 49 46 69 64 3a 20 20     VOL 3000LIFid:  
    40fc:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00004108 <__c.4181>:
    4108:	56 4f 4c 20 44 69 72 20 73 65 63 74 6f 72 73 3a     VOL Dir sectors:
    4118:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004125 <__c.4179>:
    4125:	56 4f 4c 20 44 69 72 20 73 74 61 72 74 3a 20 20     VOL Dir start:  
    4135:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004142 <__c.4177>:
    4142:	56 4f 4c 20 4c 49 46 69 64 3a 20 20 20 20 20 20     VOL LIFid:      
    4152:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

0000415e <__c.4175>:
    415e:	56 4f 4c 20 4c 61 62 65 6c 3a 20 20 20 20 20 20     VOL Label:      
    416e:	20 20 20 20 20 20 25 73 0a 00                             %s..

00004178 <__c.4173>:
    4178:	4c 49 46 20 70 75 72 67 65 64 3a 20 20 20 20 20     LIF purged:     
    4188:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004195 <__c.4171>:
    4195:	4c 49 46 20 66 69 6c 65 73 3a 20 20 20 20 20 20     LIF files:      
    41a5:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000041b2 <__c.4169>:
    41b2:	4c 49 46 20 66 72 65 65 3a 20 20 20 20 20 20 20     LIF free:       
    41c2:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000041cf <__c.4167>:
    41cf:	4c 49 46 20 75 73 65 64 3a 20 20 20 20 20 20 20     LIF used:       
    41df:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000041ec <__c.4165>:
    41ec:	4c 49 46 20 66 69 6c 65 20 73 65 63 74 6f 72 73     LIF file sectors
    41fc:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

00004209 <__c.4163>:
    4209:	4c 49 46 20 66 69 6c 65 73 74 61 72 74 3a 20 20     LIF filestart:  
    4219:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004226 <__c.4161>:
    4226:	4c 49 46 20 62 79 74 65 73 3a 20 20 20 20 20 20     LIF bytes:      
    4236:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004243 <__c.4159>:
    4243:	4c 49 46 20 73 65 63 74 6f 72 73 3a 20 20 20 20     LIF sectors:    
    4253:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004260 <__c.4157>:
    4260:	4c 49 46 20 6e 61 6d 65 3a 20 20 20 20 20 20 20     LIF name:       
    4270:	20 20 20 20 20 20 25 73 0a 00                             %s..

0000427a <__c.4155>:
    427a:	0a 25 73 0a 00                                      .%s..

0000427f <__c.4032>:
    427f:	6c 69 66 5f 77 72 69 74 65 3a 20 57 72 69 74 65     lif_write: Write
    428f:	3a 5b 25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c     :[%s] offset:[%l
    429f:	64 5d 20 77 72 69 74 65 3a 5b 25 64 5d 20 65 78     d] write:[%d] ex
    42af:	70 65 63 74 65 64 3a 5b 25 64 5d 0a 00              pected:[%d]..

000042bc <__c.4023>:
    42bc:	6c 69 66 5f 72 65 61 64 3a 20 72 65 61 64 3a 5b     lif_read: read:[
    42cc:	25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c 64 5d     %s] offset:[%ld]
    42dc:	20 77 72 69 74 65 3a 5b 25 6c 64 5d 20 65 78 70      write:[%ld] exp
    42ec:	65 63 74 65 64 3a 5b 25 64 5d 0a 00                 ected:[%d]..

000042f8 <__c.4014>:
    42f8:	6c 69 66 5f 72 65 61 64 5f 6d 73 67 3a 20 25 73     lif_read_msg: %s
    4308:	20 53 65 65 6b 20 65 72 72 6f 72 20 25 6c 64 0a      Seek error %ld.
	...

00004319 <__c.4007>:
    4319:	6c 69 66 5f 73 74 61 74 3a 20 43 61 6e 27 74 20     lif_stat: Can't 
    4329:	73 74 61 74 3a 25 73 0a 00                          stat:%s..

00004332 <__c.4001>:
    4332:	6c 69 66 5f 6f 70 65 6e 3a 20 43 61 6e 27 74 20     lif_open: Can't 
    4342:	6f 70 65 6e 3a 5b 25 73 5d 20 6d 6f 64 65 3a 5b     open:[%s] mode:[
    4352:	25 73 5d 0a 00                                      %s]..

00004357 <__c.3989>:
    4357:	6c 69 66 5f 66 72 65 65 3a 20 4e 55 4c 4c 20 70     lif_free: NULL p
    4367:	6f 69 6e 74 65 72 0a 00                             ointer..

0000436f <__c.3984>:
    436f:	6c 69 66 5f 63 61 6c 6c 6f 63 3a 5b 25 6c 64 5d     lif_calloc:[%ld]
    437f:	20 6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65      not enough free
    438f:	20 6d 65 6d 6f 72 79 0a 00                           memory..

00004398 <__c.3978>:
    4398:	44 69 73 6b 3a 20 25 73 20 6e 6f 74 20 66 6f 75     Disk: %s not fou
    43a8:	6e 64 20 69 6e 20 68 70 64 69 72 2e 69 6e 69 0a     nd in hpdir.ini.
	...

000043b9 <__c.3965>:
    43b9:	6c 69 66 20 61 64 64 20 6c 69 66 69 6d 61 67 65     lif add lifimage
    43c9:	20 6c 69 66 6e 61 6d 65 20 66 72 6f 6d 5f 61 73      lifname from_as
    43d9:	63 69 69 5f 66 69 6c 65 0a 6c 69 66 20 61 64 64     cii_file.lif add
    43e9:	62 69 6e 20 6c 69 66 69 6d 61 67 65 20 6c 69 66     bin lifimage lif
    43f9:	6e 61 6d 65 20 66 72 6f 6d 5f 6c 69 66 5f 66 69     name from_lif_fi
    4409:	6c 65 0a 6c 69 66 20 63 72 65 61 74 65 20 6c 69     le.lif create li
    4419:	66 69 6d 61 67 65 20 6c 61 62 65 6c 20 64 69 72     fimage label dir
    4429:	65 63 74 6f 72 79 5f 73 65 63 74 6f 72 73 20 73     ectory_sectors s
    4439:	65 63 74 6f 72 73 0a 6c 69 66 20 63 72 65 61 74     ectors.lif creat
    4449:	65 64 69 73 6b 20 6c 69 66 69 6d 61 67 65 20 6c     edisk lifimage l
    4459:	61 62 65 6c 20 6d 6f 64 65 6c 0a 6c 69 66 20 64     abel model.lif d
    4469:	65 6c 20 6c 69 66 69 6d 61 67 65 20 6e 61 6d 65     el lifimage name
    4479:	0a 6c 69 66 20 64 69 72 20 6c 69 66 69 6d 61 67     .lif dir lifimag
    4489:	65 0a 6c 69 66 20 65 78 74 72 61 63 74 20 6c 69     e.lif extract li
    4499:	66 69 6d 61 67 65 20 6c 69 66 6e 61 6d 65 20 74     fimage lifname t
    44a9:	6f 5f 61 73 63 69 69 5f 66 69 6c 65 0a 6c 69 66     o_ascii_file.lif
    44b9:	20 65 78 74 72 61 63 74 62 69 6e 20 6c 69 66 69      extractbin lifi
    44c9:	6d 61 67 65 20 6c 69 66 6e 61 6d 65 20 74 6f 5f     mage lifname to_
    44d9:	6c 69 66 5f 66 69 6c 65 0a 20 20 20 20 65 78 74     lif_file.    ext
    44e9:	72 61 63 74 73 20 61 20 66 69 6c 65 20 69 6e 74     racts a file int
    44f9:	6f 20 61 20 73 69 67 6c 65 20 66 69 6c 65 20 4c     o a sigle file L
    4509:	49 46 20 69 6d 61 67 65 0a 6c 69 66 20 72 65 6e     IF image.lif ren
    4519:	61 6d 65 20 6c 69 66 69 6d 61 67 65 20 6f 6c 64     ame lifimage old
    4529:	6c 69 66 6e 61 6d 65 20 6e 65 77 6c 69 66 6e 61     lifname newlifna
    4539:	6d 65 0a 55 73 65 20 2d 64 20 61 66 74 65 72 20     me.Use -d after 
    4549:	66 69 72 73 74 20 6b 65 79 77 6f 72 64 20 27 6c     first keyword 'l
    4559:	69 66 27 20 61 62 6f 76 65 20 66 6f 72 20 4c 49     if' above for LI
    4569:	46 20 66 69 6c 65 73 79 73 74 65 6d 20 64 65 62     F filesystem deb
    4579:	75 67 67 69 6e 67 0a 0a 00                          ugging...

00004582 <__c.3963>:
    4582:	6c 69 66 20 68 65 6c 70 0a 00                       lif help..

0000458c <__c.4588>:
    458c:	53 74 61 72 74 69 6e 67 20 47 50 49 42 20 54 41     Starting GPIB TA
    459c:	53 4b 0a 00                                         SK..

000045a0 <__c.4586>:
    45a0:	64 65 62 75 67 6c 65 76 65 6c 20 20 20 3d 20 25     debuglevel   = %
    45b0:	30 34 78 48 0a 00                                   04xH..

000045b6 <__c.4584>:
    45b6:	47 50 49 42 20 53 74 61 74 65 20 69 6e 69 74 20     GPIB State init 
    45c6:	64 6f 6e 65 0a 00                                   done..

000045cc <__c.4582>:
    45cc:	47 50 49 42 20 46 69 6c 65 20 69 6e 69 74 20 64     GPIB File init d
    45dc:	6f 6e 65 0a 00                                      one..

000045e1 <__c.4580>:
    45e1:	47 50 49 42 20 54 69 6d 65 72 20 69 6e 69 74 69     GPIB Timer initi
    45f1:	61 6c 69 7a 65 64 0a 00                             alized..

000045f9 <__c.4578>:
    45f9:	47 50 49 42 20 54 69 6d 65 72 20 53 65 74 75 70     GPIB Timer Setup
    4609:	0a 00                                               ..

0000460b <__c.4576>:
    460b:	50 72 69 6e 74 65 72 20 69 6e 69 74 69 61 6c 69     Printer initiali
    461b:	7a 65 64 0a 00                                      zed..

00004620 <__c.4574>:
    4620:	47 50 49 42 20 62 75 73 20 69 6e 69 74 69 61 6c     GPIB bus initial
    4630:	69 7a 65 64 0a 00                                   ized..

00004636 <__c.4572>:
    4636:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 65 64 0a     MMC initialized.
	...

00004647 <__c.4570>:
    4647:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 69 6e 67     MMC initializing
    4657:	20 73 74 61 72 74 0a 00                              start..

0000465f <__c.4568>:
    465f:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    466f:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

00004679 <__c.4566>:
    4679:	49 32 43 20 4c 43 44 20 69 6e 69 74 69 61 6c 69     I2C LCD initiali
    4689:	7a 61 74 69 6f 6e 20 44 6f 6e 65 0a 00              zation Done..

00004696 <__c.4564>:
    4696:	49 32 43 20 4c 43 44 20 69 6e 69 74 69 61 6c 69     I2C LCD initiali
    46a6:	7a 61 74 69 6f 6e 20 73 74 61 72 74 0a 00           zation start..

000046b4 <__c.4562>:
    46b4:	53 59 53 54 45 4d 5f 54 41 53 4b 5f 43 4f 55 4e     SYSTEM_TASK_COUN
    46c4:	54 45 52 5f 52 45 53 3a 25 6c 64 0a 00              TER_RES:%ld..

000046d1 <__c.4560>:
    46d1:	43 6c 6f 63 6b 20 63 6c 65 61 72 65 64 0a 00        Clock cleared..

000046e0 <__c.4558>:
    46e0:	69 6e 69 74 69 61 6c 69 7a 69 6e 67 20 52 54 43     initializing RTC
    46f0:	0a 00                                               ..

000046f2 <__c.4556>:
    46f2:	69 6e 69 74 69 61 6c 69 7a 69 6e 67 20 49 32 43     initializing I2C
    4702:	20 62 75 73 0a 00                                    bus..

00004708 <__c.4554>:
    4708:	69 6e 69 74 69 61 6c 69 7a 69 6e 67 20 53 50 49     initializing SPI
    4718:	20 62 75 73 0a 00                                    bus..

0000471e <__c.4552>:
    471e:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    472e:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

00004738 <__c.4550>:
    4738:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    4748:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

00004752 <__c.4548>:
    4752:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    4762:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    4772:	35 64 69 73 6b 0a 00                                5disk..

00004779 <__c.4546>:
    4779:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

00004789 <__c.4544>:
    4789:	20 28 43 29 20 32 30 31 34 2d 32 30 32 30 20 62      (C) 2014-2020 b
    4799:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

000047a6 <__c.4542>:
    47a6:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    47b6:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

000047c5 <__c.4540>:
    47c5:	52 65 71 75 65 73 74 65 64 20 42 61 75 64 20 52     Requested Baud R
    47d5:	61 74 65 3a 20 25 6c 64 2c 20 41 63 74 75 61 6c     ate: %ld, Actual
    47e5:	3a 20 25 6c 64 0a 00                                : %ld..

000047ec <__c.4538>:
    47ec:	43 50 55 20 43 6c 6f 63 6b 20 3d 20 25 6c 75 0a     CPU Clock = %lu.
	...

000047fd <__c.4536>:
    47fd:	53 74 61 72 74 0a 00                                Start..

00004804 <__c.4528>:
    4804:	45 72 72 6f 72 3a 5b 25 73 5d 0a 00                 Error:[%s]..

00004810 <__c.4526>:
    4810:	4f 4b 0a 00                                         OK..

00004814 <__c.4524>:
    4814:	0a 3e 00                                            .>.

00004817 <__c.4513>:
    4817:	64 65 6c 61 79 5f 74 65 73 74 73 0a 68 65 6c 70     delay_tests.help
    4827:	0a 6d 65 6d 0a 73 65 74 64 61 74 65 0a 74 69 6d     .mem.setdate.tim
    4837:	65 0a 72 65 73 65 74 0a 0a 00                       e.reset...

00004841 <__c.4506>:
    4841:	4d 79 20 64 65 6c 61 79 73 0a 00                    My delays..

0000484c <__c.4504>:
    484c:	53 79 73 74 65 6d 20 64 65 6c 61 79 73 0a 00        System delays..

0000485b <__c.4500>:
    485b:	0a 00                                               ..

0000485d <__c.4498>:
    485d:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    486d:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

00004877 <__c.4496>:
    4877:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    4887:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

00004891 <__c.4494>:
    4891:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    48a1:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    48b1:	35 64 69 73 6b 0a 00                                5disk..

000048b8 <__c.4492>:
    48b8:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

000048c8 <__c.4490>:
    48c8:	20 28 63 29 20 32 30 31 34 2d 32 30 32 30 20 62      (c) 2014-2020 b
    48d8:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

000048e5 <__c.4488>:
    48e5:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    48f5:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

00004904 <__c.4486>:
    4904:	53 74 61 6e 64 20 61 6c 6f 6e 65 20 76 65 72 73     Stand alone vers
    4914:	69 6f 6e 20 6f 66 20 4c 49 46 20 75 74 69 6c 69     ion of LIF utili
    4924:	74 69 65 73 20 66 6f 72 20 6c 69 6e 75 78 0a 00     ties for linux..

00004934 <__ctors_end>:
    4934:	11 24       	eor	r1, r1
    4936:	1f be       	out	0x3f, r1	; 63
    4938:	cf ef       	ldi	r28, 0xFF	; 255
    493a:	d0 e4       	ldi	r29, 0x40	; 64
    493c:	de bf       	out	0x3e, r29	; 62
    493e:	cd bf       	out	0x3d, r28	; 61

00004940 <__do_copy_data>:
    4940:	17 e1       	ldi	r17, 0x17	; 23
    4942:	a0 e0       	ldi	r26, 0x00	; 0
    4944:	b1 e0       	ldi	r27, 0x01	; 1
    4946:	e6 eb       	ldi	r30, 0xB6	; 182
    4948:	f4 ed       	ldi	r31, 0xD4	; 212
    494a:	01 e0       	ldi	r16, 0x01	; 1
    494c:	0b bf       	out	0x3b, r16	; 59
    494e:	02 c0       	rjmp	.+4      	; 0x4954 <__do_copy_data+0x14>
    4950:	07 90       	elpm	r0, Z+
    4952:	0d 92       	st	X+, r0
    4954:	a0 31       	cpi	r26, 0x10	; 16
    4956:	b1 07       	cpc	r27, r17
    4958:	d9 f7       	brne	.-10     	; 0x4950 <__do_copy_data+0x10>

0000495a <__do_clear_bss>:
    495a:	21 e2       	ldi	r18, 0x21	; 33
    495c:	a0 e1       	ldi	r26, 0x10	; 16
    495e:	b7 e1       	ldi	r27, 0x17	; 23
    4960:	01 c0       	rjmp	.+2      	; 0x4964 <.do_clear_bss_start>

00004962 <.do_clear_bss_loop>:
    4962:	1d 92       	st	X+, r1

00004964 <.do_clear_bss_start>:
    4964:	a8 34       	cpi	r26, 0x48	; 72
    4966:	b2 07       	cpc	r27, r18
    4968:	e1 f7       	brne	.-8      	; 0x4962 <.do_clear_bss_loop>
    496a:	0e 94 7a e2 	call	0x1c4f4	; 0x1c4f4 <main>
    496e:	0c 94 59 ea 	jmp	0x1d4b2	; 0x1d4b2 <_exit>

00004972 <__bad_interrupt>:
    4972:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00004976 <vfprintf>:
    4976:	2f 92       	push	r2
    4978:	3f 92       	push	r3
    497a:	4f 92       	push	r4
    497c:	5f 92       	push	r5
    497e:	6f 92       	push	r6
    4980:	7f 92       	push	r7
    4982:	8f 92       	push	r8
    4984:	9f 92       	push	r9
    4986:	af 92       	push	r10
    4988:	bf 92       	push	r11
    498a:	cf 92       	push	r12
    498c:	df 92       	push	r13
    498e:	ef 92       	push	r14
    4990:	ff 92       	push	r15
    4992:	0f 93       	push	r16
    4994:	1f 93       	push	r17
    4996:	cf 93       	push	r28
    4998:	df 93       	push	r29
    499a:	cd b7       	in	r28, 0x3d	; 61
    499c:	de b7       	in	r29, 0x3e	; 62
    499e:	60 97       	sbiw	r28, 0x10	; 16
    49a0:	0f b6       	in	r0, 0x3f	; 63
    49a2:	f8 94       	cli
    49a4:	de bf       	out	0x3e, r29	; 62
    49a6:	0f be       	out	0x3f, r0	; 63
    49a8:	cd bf       	out	0x3d, r28	; 61
    49aa:	7c 01       	movw	r14, r24
    49ac:	1b 01       	movw	r2, r22
    49ae:	6a 01       	movw	r12, r20
    49b0:	fc 01       	movw	r30, r24
    49b2:	17 82       	std	Z+7, r1	; 0x07
    49b4:	16 82       	std	Z+6, r1	; 0x06
    49b6:	83 81       	ldd	r24, Z+3	; 0x03
    49b8:	81 ff       	sbrs	r24, 1
    49ba:	44 c3       	rjmp	.+1672   	; 0x5044 <vfprintf+0x6ce>
    49bc:	9e 01       	movw	r18, r28
    49be:	2f 5f       	subi	r18, 0xFF	; 255
    49c0:	3f 4f       	sbci	r19, 0xFF	; 255
    49c2:	39 01       	movw	r6, r18
    49c4:	f7 01       	movw	r30, r14
    49c6:	93 81       	ldd	r25, Z+3	; 0x03
    49c8:	f1 01       	movw	r30, r2
    49ca:	93 fd       	sbrc	r25, 3
    49cc:	85 91       	lpm	r24, Z+
    49ce:	93 ff       	sbrs	r25, 3
    49d0:	81 91       	ld	r24, Z+
    49d2:	1f 01       	movw	r2, r30
    49d4:	88 23       	and	r24, r24
    49d6:	09 f4       	brne	.+2      	; 0x49da <vfprintf+0x64>
    49d8:	31 c3       	rjmp	.+1634   	; 0x503c <vfprintf+0x6c6>
    49da:	85 32       	cpi	r24, 0x25	; 37
    49dc:	39 f4       	brne	.+14     	; 0x49ec <vfprintf+0x76>
    49de:	93 fd       	sbrc	r25, 3
    49e0:	85 91       	lpm	r24, Z+
    49e2:	93 ff       	sbrs	r25, 3
    49e4:	81 91       	ld	r24, Z+
    49e6:	1f 01       	movw	r2, r30
    49e8:	85 32       	cpi	r24, 0x25	; 37
    49ea:	39 f4       	brne	.+14     	; 0x49fa <vfprintf+0x84>
    49ec:	b7 01       	movw	r22, r14
    49ee:	90 e0       	ldi	r25, 0x00	; 0
    49f0:	0e 94 71 77 	call	0xeee2	; 0xeee2 <fputc>
    49f4:	56 01       	movw	r10, r12
    49f6:	65 01       	movw	r12, r10
    49f8:	e5 cf       	rjmp	.-54     	; 0x49c4 <vfprintf+0x4e>
    49fa:	10 e0       	ldi	r17, 0x00	; 0
    49fc:	51 2c       	mov	r5, r1
    49fe:	91 2c       	mov	r9, r1
    4a00:	ff e1       	ldi	r31, 0x1F	; 31
    4a02:	f9 15       	cp	r31, r9
    4a04:	d8 f0       	brcs	.+54     	; 0x4a3c <vfprintf+0xc6>
    4a06:	8b 32       	cpi	r24, 0x2B	; 43
    4a08:	79 f0       	breq	.+30     	; 0x4a28 <vfprintf+0xb2>
    4a0a:	38 f4       	brcc	.+14     	; 0x4a1a <vfprintf+0xa4>
    4a0c:	80 32       	cpi	r24, 0x20	; 32
    4a0e:	79 f0       	breq	.+30     	; 0x4a2e <vfprintf+0xb8>
    4a10:	83 32       	cpi	r24, 0x23	; 35
    4a12:	a1 f4       	brne	.+40     	; 0x4a3c <vfprintf+0xc6>
    4a14:	f9 2d       	mov	r31, r9
    4a16:	f0 61       	ori	r31, 0x10	; 16
    4a18:	2e c0       	rjmp	.+92     	; 0x4a76 <vfprintf+0x100>
    4a1a:	8d 32       	cpi	r24, 0x2D	; 45
    4a1c:	61 f0       	breq	.+24     	; 0x4a36 <vfprintf+0xc0>
    4a1e:	80 33       	cpi	r24, 0x30	; 48
    4a20:	69 f4       	brne	.+26     	; 0x4a3c <vfprintf+0xc6>
    4a22:	29 2d       	mov	r18, r9
    4a24:	21 60       	ori	r18, 0x01	; 1
    4a26:	2d c0       	rjmp	.+90     	; 0x4a82 <vfprintf+0x10c>
    4a28:	39 2d       	mov	r19, r9
    4a2a:	32 60       	ori	r19, 0x02	; 2
    4a2c:	93 2e       	mov	r9, r19
    4a2e:	89 2d       	mov	r24, r9
    4a30:	84 60       	ori	r24, 0x04	; 4
    4a32:	98 2e       	mov	r9, r24
    4a34:	2a c0       	rjmp	.+84     	; 0x4a8a <vfprintf+0x114>
    4a36:	e9 2d       	mov	r30, r9
    4a38:	e8 60       	ori	r30, 0x08	; 8
    4a3a:	15 c0       	rjmp	.+42     	; 0x4a66 <vfprintf+0xf0>
    4a3c:	97 fc       	sbrc	r9, 7
    4a3e:	2d c0       	rjmp	.+90     	; 0x4a9a <vfprintf+0x124>
    4a40:	20 ed       	ldi	r18, 0xD0	; 208
    4a42:	28 0f       	add	r18, r24
    4a44:	2a 30       	cpi	r18, 0x0A	; 10
    4a46:	88 f4       	brcc	.+34     	; 0x4a6a <vfprintf+0xf4>
    4a48:	96 fe       	sbrs	r9, 6
    4a4a:	06 c0       	rjmp	.+12     	; 0x4a58 <vfprintf+0xe2>
    4a4c:	3a e0       	ldi	r19, 0x0A	; 10
    4a4e:	13 9f       	mul	r17, r19
    4a50:	20 0d       	add	r18, r0
    4a52:	11 24       	eor	r1, r1
    4a54:	12 2f       	mov	r17, r18
    4a56:	19 c0       	rjmp	.+50     	; 0x4a8a <vfprintf+0x114>
    4a58:	8a e0       	ldi	r24, 0x0A	; 10
    4a5a:	58 9e       	mul	r5, r24
    4a5c:	20 0d       	add	r18, r0
    4a5e:	11 24       	eor	r1, r1
    4a60:	52 2e       	mov	r5, r18
    4a62:	e9 2d       	mov	r30, r9
    4a64:	e0 62       	ori	r30, 0x20	; 32
    4a66:	9e 2e       	mov	r9, r30
    4a68:	10 c0       	rjmp	.+32     	; 0x4a8a <vfprintf+0x114>
    4a6a:	8e 32       	cpi	r24, 0x2E	; 46
    4a6c:	31 f4       	brne	.+12     	; 0x4a7a <vfprintf+0x104>
    4a6e:	96 fc       	sbrc	r9, 6
    4a70:	e5 c2       	rjmp	.+1482   	; 0x503c <vfprintf+0x6c6>
    4a72:	f9 2d       	mov	r31, r9
    4a74:	f0 64       	ori	r31, 0x40	; 64
    4a76:	9f 2e       	mov	r9, r31
    4a78:	08 c0       	rjmp	.+16     	; 0x4a8a <vfprintf+0x114>
    4a7a:	8c 36       	cpi	r24, 0x6C	; 108
    4a7c:	21 f4       	brne	.+8      	; 0x4a86 <vfprintf+0x110>
    4a7e:	29 2d       	mov	r18, r9
    4a80:	20 68       	ori	r18, 0x80	; 128
    4a82:	92 2e       	mov	r9, r18
    4a84:	02 c0       	rjmp	.+4      	; 0x4a8a <vfprintf+0x114>
    4a86:	88 36       	cpi	r24, 0x68	; 104
    4a88:	41 f4       	brne	.+16     	; 0x4a9a <vfprintf+0x124>
    4a8a:	f1 01       	movw	r30, r2
    4a8c:	93 fd       	sbrc	r25, 3
    4a8e:	85 91       	lpm	r24, Z+
    4a90:	93 ff       	sbrs	r25, 3
    4a92:	81 91       	ld	r24, Z+
    4a94:	1f 01       	movw	r2, r30
    4a96:	81 11       	cpse	r24, r1
    4a98:	b3 cf       	rjmp	.-154    	; 0x4a00 <vfprintf+0x8a>
    4a9a:	9b eb       	ldi	r25, 0xBB	; 187
    4a9c:	98 0f       	add	r25, r24
    4a9e:	93 30       	cpi	r25, 0x03	; 3
    4aa0:	20 f4       	brcc	.+8      	; 0x4aaa <vfprintf+0x134>
    4aa2:	99 2d       	mov	r25, r9
    4aa4:	90 61       	ori	r25, 0x10	; 16
    4aa6:	80 5e       	subi	r24, 0xE0	; 224
    4aa8:	07 c0       	rjmp	.+14     	; 0x4ab8 <vfprintf+0x142>
    4aaa:	9b e9       	ldi	r25, 0x9B	; 155
    4aac:	98 0f       	add	r25, r24
    4aae:	93 30       	cpi	r25, 0x03	; 3
    4ab0:	08 f0       	brcs	.+2      	; 0x4ab4 <vfprintf+0x13e>
    4ab2:	66 c1       	rjmp	.+716    	; 0x4d80 <vfprintf+0x40a>
    4ab4:	99 2d       	mov	r25, r9
    4ab6:	9f 7e       	andi	r25, 0xEF	; 239
    4ab8:	96 ff       	sbrs	r25, 6
    4aba:	16 e0       	ldi	r17, 0x06	; 6
    4abc:	9f 73       	andi	r25, 0x3F	; 63
    4abe:	99 2e       	mov	r9, r25
    4ac0:	85 36       	cpi	r24, 0x65	; 101
    4ac2:	19 f4       	brne	.+6      	; 0x4aca <vfprintf+0x154>
    4ac4:	90 64       	ori	r25, 0x40	; 64
    4ac6:	99 2e       	mov	r9, r25
    4ac8:	08 c0       	rjmp	.+16     	; 0x4ada <vfprintf+0x164>
    4aca:	86 36       	cpi	r24, 0x66	; 102
    4acc:	21 f4       	brne	.+8      	; 0x4ad6 <vfprintf+0x160>
    4ace:	39 2f       	mov	r19, r25
    4ad0:	30 68       	ori	r19, 0x80	; 128
    4ad2:	93 2e       	mov	r9, r19
    4ad4:	02 c0       	rjmp	.+4      	; 0x4ada <vfprintf+0x164>
    4ad6:	11 11       	cpse	r17, r1
    4ad8:	11 50       	subi	r17, 0x01	; 1
    4ada:	97 fe       	sbrs	r9, 7
    4adc:	07 c0       	rjmp	.+14     	; 0x4aec <vfprintf+0x176>
    4ade:	1c 33       	cpi	r17, 0x3C	; 60
    4ae0:	50 f4       	brcc	.+20     	; 0x4af6 <vfprintf+0x180>
    4ae2:	44 24       	eor	r4, r4
    4ae4:	43 94       	inc	r4
    4ae6:	41 0e       	add	r4, r17
    4ae8:	27 e0       	ldi	r18, 0x07	; 7
    4aea:	0b c0       	rjmp	.+22     	; 0x4b02 <vfprintf+0x18c>
    4aec:	18 30       	cpi	r17, 0x08	; 8
    4aee:	38 f0       	brcs	.+14     	; 0x4afe <vfprintf+0x188>
    4af0:	27 e0       	ldi	r18, 0x07	; 7
    4af2:	17 e0       	ldi	r17, 0x07	; 7
    4af4:	05 c0       	rjmp	.+10     	; 0x4b00 <vfprintf+0x18a>
    4af6:	27 e0       	ldi	r18, 0x07	; 7
    4af8:	9c e3       	ldi	r25, 0x3C	; 60
    4afa:	49 2e       	mov	r4, r25
    4afc:	02 c0       	rjmp	.+4      	; 0x4b02 <vfprintf+0x18c>
    4afe:	21 2f       	mov	r18, r17
    4b00:	41 2c       	mov	r4, r1
    4b02:	56 01       	movw	r10, r12
    4b04:	84 e0       	ldi	r24, 0x04	; 4
    4b06:	a8 0e       	add	r10, r24
    4b08:	b1 1c       	adc	r11, r1
    4b0a:	f6 01       	movw	r30, r12
    4b0c:	60 81       	ld	r22, Z
    4b0e:	71 81       	ldd	r23, Z+1	; 0x01
    4b10:	82 81       	ldd	r24, Z+2	; 0x02
    4b12:	93 81       	ldd	r25, Z+3	; 0x03
    4b14:	04 2d       	mov	r16, r4
    4b16:	a3 01       	movw	r20, r6
    4b18:	0e 94 06 e9 	call	0x1d20c	; 0x1d20c <__ftoa_engine>
    4b1c:	6c 01       	movw	r12, r24
    4b1e:	f9 81       	ldd	r31, Y+1	; 0x01
    4b20:	fc 87       	std	Y+12, r31	; 0x0c
    4b22:	f0 ff       	sbrs	r31, 0
    4b24:	02 c0       	rjmp	.+4      	; 0x4b2a <vfprintf+0x1b4>
    4b26:	f3 ff       	sbrs	r31, 3
    4b28:	06 c0       	rjmp	.+12     	; 0x4b36 <vfprintf+0x1c0>
    4b2a:	91 fc       	sbrc	r9, 1
    4b2c:	06 c0       	rjmp	.+12     	; 0x4b3a <vfprintf+0x1c4>
    4b2e:	92 fe       	sbrs	r9, 2
    4b30:	06 c0       	rjmp	.+12     	; 0x4b3e <vfprintf+0x1c8>
    4b32:	00 e2       	ldi	r16, 0x20	; 32
    4b34:	05 c0       	rjmp	.+10     	; 0x4b40 <vfprintf+0x1ca>
    4b36:	0d e2       	ldi	r16, 0x2D	; 45
    4b38:	03 c0       	rjmp	.+6      	; 0x4b40 <vfprintf+0x1ca>
    4b3a:	0b e2       	ldi	r16, 0x2B	; 43
    4b3c:	01 c0       	rjmp	.+2      	; 0x4b40 <vfprintf+0x1ca>
    4b3e:	00 e0       	ldi	r16, 0x00	; 0
    4b40:	8c 85       	ldd	r24, Y+12	; 0x0c
    4b42:	8c 70       	andi	r24, 0x0C	; 12
    4b44:	19 f0       	breq	.+6      	; 0x4b4c <vfprintf+0x1d6>
    4b46:	01 11       	cpse	r16, r1
    4b48:	5a c2       	rjmp	.+1204   	; 0x4ffe <vfprintf+0x688>
    4b4a:	9b c2       	rjmp	.+1334   	; 0x5082 <vfprintf+0x70c>
    4b4c:	97 fe       	sbrs	r9, 7
    4b4e:	10 c0       	rjmp	.+32     	; 0x4b70 <vfprintf+0x1fa>
    4b50:	4c 0c       	add	r4, r12
    4b52:	fc 85       	ldd	r31, Y+12	; 0x0c
    4b54:	f4 ff       	sbrs	r31, 4
    4b56:	04 c0       	rjmp	.+8      	; 0x4b60 <vfprintf+0x1ea>
    4b58:	8a 81       	ldd	r24, Y+2	; 0x02
    4b5a:	81 33       	cpi	r24, 0x31	; 49
    4b5c:	09 f4       	brne	.+2      	; 0x4b60 <vfprintf+0x1ea>
    4b5e:	4a 94       	dec	r4
    4b60:	14 14       	cp	r1, r4
    4b62:	74 f5       	brge	.+92     	; 0x4bc0 <vfprintf+0x24a>
    4b64:	28 e0       	ldi	r18, 0x08	; 8
    4b66:	24 15       	cp	r18, r4
    4b68:	78 f5       	brcc	.+94     	; 0x4bc8 <vfprintf+0x252>
    4b6a:	88 e0       	ldi	r24, 0x08	; 8
    4b6c:	48 2e       	mov	r4, r24
    4b6e:	2c c0       	rjmp	.+88     	; 0x4bc8 <vfprintf+0x252>
    4b70:	96 fc       	sbrc	r9, 6
    4b72:	2a c0       	rjmp	.+84     	; 0x4bc8 <vfprintf+0x252>
    4b74:	81 2f       	mov	r24, r17
    4b76:	90 e0       	ldi	r25, 0x00	; 0
    4b78:	8c 15       	cp	r24, r12
    4b7a:	9d 05       	cpc	r25, r13
    4b7c:	9c f0       	brlt	.+38     	; 0x4ba4 <vfprintf+0x22e>
    4b7e:	3c ef       	ldi	r19, 0xFC	; 252
    4b80:	c3 16       	cp	r12, r19
    4b82:	3f ef       	ldi	r19, 0xFF	; 255
    4b84:	d3 06       	cpc	r13, r19
    4b86:	74 f0       	brlt	.+28     	; 0x4ba4 <vfprintf+0x22e>
    4b88:	89 2d       	mov	r24, r9
    4b8a:	80 68       	ori	r24, 0x80	; 128
    4b8c:	98 2e       	mov	r9, r24
    4b8e:	0a c0       	rjmp	.+20     	; 0x4ba4 <vfprintf+0x22e>
    4b90:	e2 e0       	ldi	r30, 0x02	; 2
    4b92:	f0 e0       	ldi	r31, 0x00	; 0
    4b94:	ec 0f       	add	r30, r28
    4b96:	fd 1f       	adc	r31, r29
    4b98:	e1 0f       	add	r30, r17
    4b9a:	f1 1d       	adc	r31, r1
    4b9c:	80 81       	ld	r24, Z
    4b9e:	80 33       	cpi	r24, 0x30	; 48
    4ba0:	19 f4       	brne	.+6      	; 0x4ba8 <vfprintf+0x232>
    4ba2:	11 50       	subi	r17, 0x01	; 1
    4ba4:	11 11       	cpse	r17, r1
    4ba6:	f4 cf       	rjmp	.-24     	; 0x4b90 <vfprintf+0x21a>
    4ba8:	97 fe       	sbrs	r9, 7
    4baa:	0e c0       	rjmp	.+28     	; 0x4bc8 <vfprintf+0x252>
    4bac:	44 24       	eor	r4, r4
    4bae:	43 94       	inc	r4
    4bb0:	41 0e       	add	r4, r17
    4bb2:	81 2f       	mov	r24, r17
    4bb4:	90 e0       	ldi	r25, 0x00	; 0
    4bb6:	c8 16       	cp	r12, r24
    4bb8:	d9 06       	cpc	r13, r25
    4bba:	2c f4       	brge	.+10     	; 0x4bc6 <vfprintf+0x250>
    4bbc:	1c 19       	sub	r17, r12
    4bbe:	04 c0       	rjmp	.+8      	; 0x4bc8 <vfprintf+0x252>
    4bc0:	44 24       	eor	r4, r4
    4bc2:	43 94       	inc	r4
    4bc4:	01 c0       	rjmp	.+2      	; 0x4bc8 <vfprintf+0x252>
    4bc6:	10 e0       	ldi	r17, 0x00	; 0
    4bc8:	97 fe       	sbrs	r9, 7
    4bca:	06 c0       	rjmp	.+12     	; 0x4bd8 <vfprintf+0x262>
    4bcc:	1c 14       	cp	r1, r12
    4bce:	1d 04       	cpc	r1, r13
    4bd0:	34 f4       	brge	.+12     	; 0x4bde <vfprintf+0x268>
    4bd2:	c6 01       	movw	r24, r12
    4bd4:	01 96       	adiw	r24, 0x01	; 1
    4bd6:	05 c0       	rjmp	.+10     	; 0x4be2 <vfprintf+0x26c>
    4bd8:	85 e0       	ldi	r24, 0x05	; 5
    4bda:	90 e0       	ldi	r25, 0x00	; 0
    4bdc:	02 c0       	rjmp	.+4      	; 0x4be2 <vfprintf+0x26c>
    4bde:	81 e0       	ldi	r24, 0x01	; 1
    4be0:	90 e0       	ldi	r25, 0x00	; 0
    4be2:	01 11       	cpse	r16, r1
    4be4:	01 96       	adiw	r24, 0x01	; 1
    4be6:	11 23       	and	r17, r17
    4be8:	31 f0       	breq	.+12     	; 0x4bf6 <vfprintf+0x280>
    4bea:	21 2f       	mov	r18, r17
    4bec:	30 e0       	ldi	r19, 0x00	; 0
    4bee:	2f 5f       	subi	r18, 0xFF	; 255
    4bf0:	3f 4f       	sbci	r19, 0xFF	; 255
    4bf2:	82 0f       	add	r24, r18
    4bf4:	93 1f       	adc	r25, r19
    4bf6:	25 2d       	mov	r18, r5
    4bf8:	30 e0       	ldi	r19, 0x00	; 0
    4bfa:	82 17       	cp	r24, r18
    4bfc:	93 07       	cpc	r25, r19
    4bfe:	14 f4       	brge	.+4      	; 0x4c04 <vfprintf+0x28e>
    4c00:	58 1a       	sub	r5, r24
    4c02:	01 c0       	rjmp	.+2      	; 0x4c06 <vfprintf+0x290>
    4c04:	51 2c       	mov	r5, r1
    4c06:	89 2d       	mov	r24, r9
    4c08:	89 70       	andi	r24, 0x09	; 9
    4c0a:	49 f4       	brne	.+18     	; 0x4c1e <vfprintf+0x2a8>
    4c0c:	55 20       	and	r5, r5
    4c0e:	39 f0       	breq	.+14     	; 0x4c1e <vfprintf+0x2a8>
    4c10:	b7 01       	movw	r22, r14
    4c12:	80 e2       	ldi	r24, 0x20	; 32
    4c14:	90 e0       	ldi	r25, 0x00	; 0
    4c16:	0e 94 71 77 	call	0xeee2	; 0xeee2 <fputc>
    4c1a:	5a 94       	dec	r5
    4c1c:	f7 cf       	rjmp	.-18     	; 0x4c0c <vfprintf+0x296>
    4c1e:	00 23       	and	r16, r16
    4c20:	29 f0       	breq	.+10     	; 0x4c2c <vfprintf+0x2b6>
    4c22:	b7 01       	movw	r22, r14
    4c24:	80 2f       	mov	r24, r16
    4c26:	90 e0       	ldi	r25, 0x00	; 0
    4c28:	0e 94 71 77 	call	0xeee2	; 0xeee2 <fputc>
    4c2c:	93 fc       	sbrc	r9, 3
    4c2e:	09 c0       	rjmp	.+18     	; 0x4c42 <vfprintf+0x2cc>
    4c30:	55 20       	and	r5, r5
    4c32:	39 f0       	breq	.+14     	; 0x4c42 <vfprintf+0x2cc>
    4c34:	b7 01       	movw	r22, r14
    4c36:	80 e3       	ldi	r24, 0x30	; 48
    4c38:	90 e0       	ldi	r25, 0x00	; 0
    4c3a:	0e 94 71 77 	call	0xeee2	; 0xeee2 <fputc>
    4c3e:	5a 94       	dec	r5
    4c40:	f7 cf       	rjmp	.-18     	; 0x4c30 <vfprintf+0x2ba>
    4c42:	97 fe       	sbrs	r9, 7
    4c44:	4c c0       	rjmp	.+152    	; 0x4cde <vfprintf+0x368>
    4c46:	46 01       	movw	r8, r12
    4c48:	d7 fe       	sbrs	r13, 7
    4c4a:	02 c0       	rjmp	.+4      	; 0x4c50 <vfprintf+0x2da>
    4c4c:	81 2c       	mov	r8, r1
    4c4e:	91 2c       	mov	r9, r1
    4c50:	c6 01       	movw	r24, r12
    4c52:	88 19       	sub	r24, r8
    4c54:	99 09       	sbc	r25, r9
    4c56:	f3 01       	movw	r30, r6
    4c58:	e8 0f       	add	r30, r24
    4c5a:	f9 1f       	adc	r31, r25
    4c5c:	fe 87       	std	Y+14, r31	; 0x0e
    4c5e:	ed 87       	std	Y+13, r30	; 0x0d
    4c60:	96 01       	movw	r18, r12
    4c62:	24 19       	sub	r18, r4
    4c64:	31 09       	sbc	r19, r1
    4c66:	38 8b       	std	Y+16, r19	; 0x10
    4c68:	2f 87       	std	Y+15, r18	; 0x0f
    4c6a:	01 2f       	mov	r16, r17
    4c6c:	10 e0       	ldi	r17, 0x00	; 0
    4c6e:	11 95       	neg	r17
    4c70:	01 95       	neg	r16
    4c72:	11 09       	sbc	r17, r1
    4c74:	3f ef       	ldi	r19, 0xFF	; 255
    4c76:	83 16       	cp	r8, r19
    4c78:	93 06       	cpc	r9, r19
    4c7a:	29 f4       	brne	.+10     	; 0x4c86 <vfprintf+0x310>
    4c7c:	b7 01       	movw	r22, r14
    4c7e:	8e e2       	ldi	r24, 0x2E	; 46
    4c80:	90 e0       	ldi	r25, 0x00	; 0
    4c82:	0e 94 71 77 	call	0xeee2	; 0xeee2 <fputc>
    4c86:	c8 14       	cp	r12, r8
    4c88:	d9 04       	cpc	r13, r9
    4c8a:	4c f0       	brlt	.+18     	; 0x4c9e <vfprintf+0x328>
    4c8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    4c8e:	98 89       	ldd	r25, Y+16	; 0x10
    4c90:	88 15       	cp	r24, r8
    4c92:	99 05       	cpc	r25, r9
    4c94:	24 f4       	brge	.+8      	; 0x4c9e <vfprintf+0x328>
    4c96:	ed 85       	ldd	r30, Y+13	; 0x0d
    4c98:	fe 85       	ldd	r31, Y+14	; 0x0e
    4c9a:	81 81       	ldd	r24, Z+1	; 0x01
    4c9c:	01 c0       	rjmp	.+2      	; 0x4ca0 <vfprintf+0x32a>
    4c9e:	80 e3       	ldi	r24, 0x30	; 48
    4ca0:	f1 e0       	ldi	r31, 0x01	; 1
    4ca2:	8f 1a       	sub	r8, r31
    4ca4:	91 08       	sbc	r9, r1
    4ca6:	2d 85       	ldd	r18, Y+13	; 0x0d
    4ca8:	3e 85       	ldd	r19, Y+14	; 0x0e
    4caa:	2f 5f       	subi	r18, 0xFF	; 255
    4cac:	3f 4f       	sbci	r19, 0xFF	; 255
    4cae:	3e 87       	std	Y+14, r19	; 0x0e
    4cb0:	2d 87       	std	Y+13, r18	; 0x0d
    4cb2:	80 16       	cp	r8, r16
    4cb4:	91 06       	cpc	r9, r17
    4cb6:	2c f0       	brlt	.+10     	; 0x4cc2 <vfprintf+0x34c>
    4cb8:	b7 01       	movw	r22, r14
    4cba:	90 e0       	ldi	r25, 0x00	; 0
    4cbc:	0e 94 71 77 	call	0xeee2	; 0xeee2 <fputc>
    4cc0:	d9 cf       	rjmp	.-78     	; 0x4c74 <vfprintf+0x2fe>
    4cc2:	c8 14       	cp	r12, r8
    4cc4:	d9 04       	cpc	r13, r9
    4cc6:	41 f4       	brne	.+16     	; 0x4cd8 <vfprintf+0x362>
    4cc8:	9a 81       	ldd	r25, Y+2	; 0x02
    4cca:	96 33       	cpi	r25, 0x36	; 54
    4ccc:	20 f4       	brcc	.+8      	; 0x4cd6 <vfprintf+0x360>
    4cce:	95 33       	cpi	r25, 0x35	; 53
    4cd0:	19 f4       	brne	.+6      	; 0x4cd8 <vfprintf+0x362>
    4cd2:	3c 85       	ldd	r19, Y+12	; 0x0c
    4cd4:	34 ff       	sbrs	r19, 4
    4cd6:	81 e3       	ldi	r24, 0x31	; 49
    4cd8:	b7 01       	movw	r22, r14
    4cda:	90 e0       	ldi	r25, 0x00	; 0
    4cdc:	4e c0       	rjmp	.+156    	; 0x4d7a <vfprintf+0x404>
    4cde:	8a 81       	ldd	r24, Y+2	; 0x02
    4ce0:	81 33       	cpi	r24, 0x31	; 49
    4ce2:	19 f0       	breq	.+6      	; 0x4cea <vfprintf+0x374>
    4ce4:	9c 85       	ldd	r25, Y+12	; 0x0c
    4ce6:	9f 7e       	andi	r25, 0xEF	; 239
    4ce8:	9c 87       	std	Y+12, r25	; 0x0c
    4cea:	b7 01       	movw	r22, r14
    4cec:	90 e0       	ldi	r25, 0x00	; 0
    4cee:	0e 94 71 77 	call	0xeee2	; 0xeee2 <fputc>
    4cf2:	11 11       	cpse	r17, r1
    4cf4:	05 c0       	rjmp	.+10     	; 0x4d00 <vfprintf+0x38a>
    4cf6:	94 fc       	sbrc	r9, 4
    4cf8:	18 c0       	rjmp	.+48     	; 0x4d2a <vfprintf+0x3b4>
    4cfa:	85 e6       	ldi	r24, 0x65	; 101
    4cfc:	90 e0       	ldi	r25, 0x00	; 0
    4cfe:	17 c0       	rjmp	.+46     	; 0x4d2e <vfprintf+0x3b8>
    4d00:	b7 01       	movw	r22, r14
    4d02:	8e e2       	ldi	r24, 0x2E	; 46
    4d04:	90 e0       	ldi	r25, 0x00	; 0
    4d06:	0e 94 71 77 	call	0xeee2	; 0xeee2 <fputc>
    4d0a:	1e 5f       	subi	r17, 0xFE	; 254
    4d0c:	82 e0       	ldi	r24, 0x02	; 2
    4d0e:	01 e0       	ldi	r16, 0x01	; 1
    4d10:	08 0f       	add	r16, r24
    4d12:	f3 01       	movw	r30, r6
    4d14:	e8 0f       	add	r30, r24
    4d16:	f1 1d       	adc	r31, r1
    4d18:	80 81       	ld	r24, Z
    4d1a:	b7 01       	movw	r22, r14
    4d1c:	90 e0       	ldi	r25, 0x00	; 0
    4d1e:	0e 94 71 77 	call	0xeee2	; 0xeee2 <fputc>
    4d22:	80 2f       	mov	r24, r16
    4d24:	01 13       	cpse	r16, r17
    4d26:	f3 cf       	rjmp	.-26     	; 0x4d0e <vfprintf+0x398>
    4d28:	e6 cf       	rjmp	.-52     	; 0x4cf6 <vfprintf+0x380>
    4d2a:	85 e4       	ldi	r24, 0x45	; 69
    4d2c:	90 e0       	ldi	r25, 0x00	; 0
    4d2e:	b7 01       	movw	r22, r14
    4d30:	0e 94 71 77 	call	0xeee2	; 0xeee2 <fputc>
    4d34:	d7 fc       	sbrc	r13, 7
    4d36:	06 c0       	rjmp	.+12     	; 0x4d44 <vfprintf+0x3ce>
    4d38:	c1 14       	cp	r12, r1
    4d3a:	d1 04       	cpc	r13, r1
    4d3c:	41 f4       	brne	.+16     	; 0x4d4e <vfprintf+0x3d8>
    4d3e:	ec 85       	ldd	r30, Y+12	; 0x0c
    4d40:	e4 ff       	sbrs	r30, 4
    4d42:	05 c0       	rjmp	.+10     	; 0x4d4e <vfprintf+0x3d8>
    4d44:	d1 94       	neg	r13
    4d46:	c1 94       	neg	r12
    4d48:	d1 08       	sbc	r13, r1
    4d4a:	8d e2       	ldi	r24, 0x2D	; 45
    4d4c:	01 c0       	rjmp	.+2      	; 0x4d50 <vfprintf+0x3da>
    4d4e:	8b e2       	ldi	r24, 0x2B	; 43
    4d50:	b7 01       	movw	r22, r14
    4d52:	90 e0       	ldi	r25, 0x00	; 0
    4d54:	0e 94 71 77 	call	0xeee2	; 0xeee2 <fputc>
    4d58:	80 e3       	ldi	r24, 0x30	; 48
    4d5a:	2a e0       	ldi	r18, 0x0A	; 10
    4d5c:	c2 16       	cp	r12, r18
    4d5e:	d1 04       	cpc	r13, r1
    4d60:	2c f0       	brlt	.+10     	; 0x4d6c <vfprintf+0x3f6>
    4d62:	8f 5f       	subi	r24, 0xFF	; 255
    4d64:	fa e0       	ldi	r31, 0x0A	; 10
    4d66:	cf 1a       	sub	r12, r31
    4d68:	d1 08       	sbc	r13, r1
    4d6a:	f7 cf       	rjmp	.-18     	; 0x4d5a <vfprintf+0x3e4>
    4d6c:	b7 01       	movw	r22, r14
    4d6e:	90 e0       	ldi	r25, 0x00	; 0
    4d70:	0e 94 71 77 	call	0xeee2	; 0xeee2 <fputc>
    4d74:	b7 01       	movw	r22, r14
    4d76:	c6 01       	movw	r24, r12
    4d78:	c0 96       	adiw	r24, 0x30	; 48
    4d7a:	0e 94 71 77 	call	0xeee2	; 0xeee2 <fputc>
    4d7e:	54 c1       	rjmp	.+680    	; 0x5028 <vfprintf+0x6b2>
    4d80:	83 36       	cpi	r24, 0x63	; 99
    4d82:	31 f0       	breq	.+12     	; 0x4d90 <vfprintf+0x41a>
    4d84:	83 37       	cpi	r24, 0x73	; 115
    4d86:	79 f0       	breq	.+30     	; 0x4da6 <vfprintf+0x430>
    4d88:	83 35       	cpi	r24, 0x53	; 83
    4d8a:	09 f0       	breq	.+2      	; 0x4d8e <vfprintf+0x418>
    4d8c:	56 c0       	rjmp	.+172    	; 0x4e3a <vfprintf+0x4c4>
    4d8e:	20 c0       	rjmp	.+64     	; 0x4dd0 <vfprintf+0x45a>
    4d90:	56 01       	movw	r10, r12
    4d92:	32 e0       	ldi	r19, 0x02	; 2
    4d94:	a3 0e       	add	r10, r19
    4d96:	b1 1c       	adc	r11, r1
    4d98:	f6 01       	movw	r30, r12
    4d9a:	80 81       	ld	r24, Z
    4d9c:	89 83       	std	Y+1, r24	; 0x01
    4d9e:	01 e0       	ldi	r16, 0x01	; 1
    4da0:	10 e0       	ldi	r17, 0x00	; 0
    4da2:	63 01       	movw	r12, r6
    4da4:	12 c0       	rjmp	.+36     	; 0x4dca <vfprintf+0x454>
    4da6:	56 01       	movw	r10, r12
    4da8:	f2 e0       	ldi	r31, 0x02	; 2
    4daa:	af 0e       	add	r10, r31
    4dac:	b1 1c       	adc	r11, r1
    4dae:	f6 01       	movw	r30, r12
    4db0:	c0 80       	ld	r12, Z
    4db2:	d1 80       	ldd	r13, Z+1	; 0x01
    4db4:	96 fe       	sbrs	r9, 6
    4db6:	03 c0       	rjmp	.+6      	; 0x4dbe <vfprintf+0x448>
    4db8:	61 2f       	mov	r22, r17
    4dba:	70 e0       	ldi	r23, 0x00	; 0
    4dbc:	02 c0       	rjmp	.+4      	; 0x4dc2 <vfprintf+0x44c>
    4dbe:	6f ef       	ldi	r22, 0xFF	; 255
    4dc0:	7f ef       	ldi	r23, 0xFF	; 255
    4dc2:	c6 01       	movw	r24, r12
    4dc4:	0e 94 f0 e9 	call	0x1d3e0	; 0x1d3e0 <strnlen>
    4dc8:	8c 01       	movw	r16, r24
    4dca:	f9 2d       	mov	r31, r9
    4dcc:	ff 77       	andi	r31, 0x7F	; 127
    4dce:	14 c0       	rjmp	.+40     	; 0x4df8 <vfprintf+0x482>
    4dd0:	56 01       	movw	r10, r12
    4dd2:	22 e0       	ldi	r18, 0x02	; 2
    4dd4:	a2 0e       	add	r10, r18
    4dd6:	b1 1c       	adc	r11, r1
    4dd8:	f6 01       	movw	r30, r12
    4dda:	c0 80       	ld	r12, Z
    4ddc:	d1 80       	ldd	r13, Z+1	; 0x01
    4dde:	96 fe       	sbrs	r9, 6
    4de0:	03 c0       	rjmp	.+6      	; 0x4de8 <vfprintf+0x472>
    4de2:	61 2f       	mov	r22, r17
    4de4:	70 e0       	ldi	r23, 0x00	; 0
    4de6:	02 c0       	rjmp	.+4      	; 0x4dec <vfprintf+0x476>
    4de8:	6f ef       	ldi	r22, 0xFF	; 255
    4dea:	7f ef       	ldi	r23, 0xFF	; 255
    4dec:	c6 01       	movw	r24, r12
    4dee:	0e 94 de e9 	call	0x1d3bc	; 0x1d3bc <strnlen_P>
    4df2:	8c 01       	movw	r16, r24
    4df4:	f9 2d       	mov	r31, r9
    4df6:	f0 68       	ori	r31, 0x80	; 128
    4df8:	9f 2e       	mov	r9, r31
    4dfa:	f3 fd       	sbrc	r31, 3
    4dfc:	1a c0       	rjmp	.+52     	; 0x4e32 <vfprintf+0x4bc>
    4dfe:	85 2d       	mov	r24, r5
    4e00:	90 e0       	ldi	r25, 0x00	; 0
    4e02:	08 17       	cp	r16, r24
    4e04:	19 07       	cpc	r17, r25
    4e06:	a8 f4       	brcc	.+42     	; 0x4e32 <vfprintf+0x4bc>
    4e08:	b7 01       	movw	r22, r14
    4e0a:	80 e2       	ldi	r24, 0x20	; 32
    4e0c:	90 e0       	ldi	r25, 0x00	; 0
    4e0e:	0e 94 71 77 	call	0xeee2	; 0xeee2 <fputc>
    4e12:	5a 94       	dec	r5
    4e14:	f4 cf       	rjmp	.-24     	; 0x4dfe <vfprintf+0x488>
    4e16:	f6 01       	movw	r30, r12
    4e18:	97 fc       	sbrc	r9, 7
    4e1a:	85 91       	lpm	r24, Z+
    4e1c:	97 fe       	sbrs	r9, 7
    4e1e:	81 91       	ld	r24, Z+
    4e20:	6f 01       	movw	r12, r30
    4e22:	b7 01       	movw	r22, r14
    4e24:	90 e0       	ldi	r25, 0x00	; 0
    4e26:	0e 94 71 77 	call	0xeee2	; 0xeee2 <fputc>
    4e2a:	51 10       	cpse	r5, r1
    4e2c:	5a 94       	dec	r5
    4e2e:	01 50       	subi	r16, 0x01	; 1
    4e30:	11 09       	sbc	r17, r1
    4e32:	01 15       	cp	r16, r1
    4e34:	11 05       	cpc	r17, r1
    4e36:	79 f7       	brne	.-34     	; 0x4e16 <vfprintf+0x4a0>
    4e38:	f7 c0       	rjmp	.+494    	; 0x5028 <vfprintf+0x6b2>
    4e3a:	84 36       	cpi	r24, 0x64	; 100
    4e3c:	11 f0       	breq	.+4      	; 0x4e42 <vfprintf+0x4cc>
    4e3e:	89 36       	cpi	r24, 0x69	; 105
    4e40:	61 f5       	brne	.+88     	; 0x4e9a <vfprintf+0x524>
    4e42:	56 01       	movw	r10, r12
    4e44:	97 fe       	sbrs	r9, 7
    4e46:	09 c0       	rjmp	.+18     	; 0x4e5a <vfprintf+0x4e4>
    4e48:	24 e0       	ldi	r18, 0x04	; 4
    4e4a:	a2 0e       	add	r10, r18
    4e4c:	b1 1c       	adc	r11, r1
    4e4e:	f6 01       	movw	r30, r12
    4e50:	60 81       	ld	r22, Z
    4e52:	71 81       	ldd	r23, Z+1	; 0x01
    4e54:	82 81       	ldd	r24, Z+2	; 0x02
    4e56:	93 81       	ldd	r25, Z+3	; 0x03
    4e58:	0a c0       	rjmp	.+20     	; 0x4e6e <vfprintf+0x4f8>
    4e5a:	f2 e0       	ldi	r31, 0x02	; 2
    4e5c:	af 0e       	add	r10, r31
    4e5e:	b1 1c       	adc	r11, r1
    4e60:	f6 01       	movw	r30, r12
    4e62:	60 81       	ld	r22, Z
    4e64:	71 81       	ldd	r23, Z+1	; 0x01
    4e66:	07 2e       	mov	r0, r23
    4e68:	00 0c       	add	r0, r0
    4e6a:	88 0b       	sbc	r24, r24
    4e6c:	99 0b       	sbc	r25, r25
    4e6e:	f9 2d       	mov	r31, r9
    4e70:	ff 76       	andi	r31, 0x6F	; 111
    4e72:	9f 2e       	mov	r9, r31
    4e74:	97 ff       	sbrs	r25, 7
    4e76:	09 c0       	rjmp	.+18     	; 0x4e8a <vfprintf+0x514>
    4e78:	90 95       	com	r25
    4e7a:	80 95       	com	r24
    4e7c:	70 95       	com	r23
    4e7e:	61 95       	neg	r22
    4e80:	7f 4f       	sbci	r23, 0xFF	; 255
    4e82:	8f 4f       	sbci	r24, 0xFF	; 255
    4e84:	9f 4f       	sbci	r25, 0xFF	; 255
    4e86:	f0 68       	ori	r31, 0x80	; 128
    4e88:	9f 2e       	mov	r9, r31
    4e8a:	2a e0       	ldi	r18, 0x0A	; 10
    4e8c:	30 e0       	ldi	r19, 0x00	; 0
    4e8e:	a3 01       	movw	r20, r6
    4e90:	0e 94 fb e9 	call	0x1d3f6	; 0x1d3f6 <__ultoa_invert>
    4e94:	c8 2e       	mov	r12, r24
    4e96:	c6 18       	sub	r12, r6
    4e98:	3f c0       	rjmp	.+126    	; 0x4f18 <vfprintf+0x5a2>
    4e9a:	09 2d       	mov	r16, r9
    4e9c:	85 37       	cpi	r24, 0x75	; 117
    4e9e:	21 f4       	brne	.+8      	; 0x4ea8 <vfprintf+0x532>
    4ea0:	0f 7e       	andi	r16, 0xEF	; 239
    4ea2:	2a e0       	ldi	r18, 0x0A	; 10
    4ea4:	30 e0       	ldi	r19, 0x00	; 0
    4ea6:	1d c0       	rjmp	.+58     	; 0x4ee2 <vfprintf+0x56c>
    4ea8:	09 7f       	andi	r16, 0xF9	; 249
    4eaa:	8f 36       	cpi	r24, 0x6F	; 111
    4eac:	91 f0       	breq	.+36     	; 0x4ed2 <vfprintf+0x55c>
    4eae:	18 f4       	brcc	.+6      	; 0x4eb6 <vfprintf+0x540>
    4eb0:	88 35       	cpi	r24, 0x58	; 88
    4eb2:	59 f0       	breq	.+22     	; 0x4eca <vfprintf+0x554>
    4eb4:	c3 c0       	rjmp	.+390    	; 0x503c <vfprintf+0x6c6>
    4eb6:	80 37       	cpi	r24, 0x70	; 112
    4eb8:	19 f0       	breq	.+6      	; 0x4ec0 <vfprintf+0x54a>
    4eba:	88 37       	cpi	r24, 0x78	; 120
    4ebc:	11 f0       	breq	.+4      	; 0x4ec2 <vfprintf+0x54c>
    4ebe:	be c0       	rjmp	.+380    	; 0x503c <vfprintf+0x6c6>
    4ec0:	00 61       	ori	r16, 0x10	; 16
    4ec2:	04 ff       	sbrs	r16, 4
    4ec4:	09 c0       	rjmp	.+18     	; 0x4ed8 <vfprintf+0x562>
    4ec6:	04 60       	ori	r16, 0x04	; 4
    4ec8:	07 c0       	rjmp	.+14     	; 0x4ed8 <vfprintf+0x562>
    4eca:	94 fe       	sbrs	r9, 4
    4ecc:	08 c0       	rjmp	.+16     	; 0x4ede <vfprintf+0x568>
    4ece:	06 60       	ori	r16, 0x06	; 6
    4ed0:	06 c0       	rjmp	.+12     	; 0x4ede <vfprintf+0x568>
    4ed2:	28 e0       	ldi	r18, 0x08	; 8
    4ed4:	30 e0       	ldi	r19, 0x00	; 0
    4ed6:	05 c0       	rjmp	.+10     	; 0x4ee2 <vfprintf+0x56c>
    4ed8:	20 e1       	ldi	r18, 0x10	; 16
    4eda:	30 e0       	ldi	r19, 0x00	; 0
    4edc:	02 c0       	rjmp	.+4      	; 0x4ee2 <vfprintf+0x56c>
    4ede:	20 e1       	ldi	r18, 0x10	; 16
    4ee0:	32 e0       	ldi	r19, 0x02	; 2
    4ee2:	56 01       	movw	r10, r12
    4ee4:	07 ff       	sbrs	r16, 7
    4ee6:	09 c0       	rjmp	.+18     	; 0x4efa <vfprintf+0x584>
    4ee8:	84 e0       	ldi	r24, 0x04	; 4
    4eea:	a8 0e       	add	r10, r24
    4eec:	b1 1c       	adc	r11, r1
    4eee:	f6 01       	movw	r30, r12
    4ef0:	60 81       	ld	r22, Z
    4ef2:	71 81       	ldd	r23, Z+1	; 0x01
    4ef4:	82 81       	ldd	r24, Z+2	; 0x02
    4ef6:	93 81       	ldd	r25, Z+3	; 0x03
    4ef8:	08 c0       	rjmp	.+16     	; 0x4f0a <vfprintf+0x594>
    4efa:	f2 e0       	ldi	r31, 0x02	; 2
    4efc:	af 0e       	add	r10, r31
    4efe:	b1 1c       	adc	r11, r1
    4f00:	f6 01       	movw	r30, r12
    4f02:	60 81       	ld	r22, Z
    4f04:	71 81       	ldd	r23, Z+1	; 0x01
    4f06:	80 e0       	ldi	r24, 0x00	; 0
    4f08:	90 e0       	ldi	r25, 0x00	; 0
    4f0a:	a3 01       	movw	r20, r6
    4f0c:	0e 94 fb e9 	call	0x1d3f6	; 0x1d3f6 <__ultoa_invert>
    4f10:	c8 2e       	mov	r12, r24
    4f12:	c6 18       	sub	r12, r6
    4f14:	0f 77       	andi	r16, 0x7F	; 127
    4f16:	90 2e       	mov	r9, r16
    4f18:	96 fe       	sbrs	r9, 6
    4f1a:	0b c0       	rjmp	.+22     	; 0x4f32 <vfprintf+0x5bc>
    4f1c:	09 2d       	mov	r16, r9
    4f1e:	0e 7f       	andi	r16, 0xFE	; 254
    4f20:	c1 16       	cp	r12, r17
    4f22:	50 f4       	brcc	.+20     	; 0x4f38 <vfprintf+0x5c2>
    4f24:	94 fe       	sbrs	r9, 4
    4f26:	0a c0       	rjmp	.+20     	; 0x4f3c <vfprintf+0x5c6>
    4f28:	92 fc       	sbrc	r9, 2
    4f2a:	08 c0       	rjmp	.+16     	; 0x4f3c <vfprintf+0x5c6>
    4f2c:	09 2d       	mov	r16, r9
    4f2e:	0e 7e       	andi	r16, 0xEE	; 238
    4f30:	05 c0       	rjmp	.+10     	; 0x4f3c <vfprintf+0x5c6>
    4f32:	dc 2c       	mov	r13, r12
    4f34:	09 2d       	mov	r16, r9
    4f36:	03 c0       	rjmp	.+6      	; 0x4f3e <vfprintf+0x5c8>
    4f38:	dc 2c       	mov	r13, r12
    4f3a:	01 c0       	rjmp	.+2      	; 0x4f3e <vfprintf+0x5c8>
    4f3c:	d1 2e       	mov	r13, r17
    4f3e:	04 ff       	sbrs	r16, 4
    4f40:	0d c0       	rjmp	.+26     	; 0x4f5c <vfprintf+0x5e6>
    4f42:	fe 01       	movw	r30, r28
    4f44:	ec 0d       	add	r30, r12
    4f46:	f1 1d       	adc	r31, r1
    4f48:	80 81       	ld	r24, Z
    4f4a:	80 33       	cpi	r24, 0x30	; 48
    4f4c:	11 f4       	brne	.+4      	; 0x4f52 <vfprintf+0x5dc>
    4f4e:	09 7e       	andi	r16, 0xE9	; 233
    4f50:	09 c0       	rjmp	.+18     	; 0x4f64 <vfprintf+0x5ee>
    4f52:	02 ff       	sbrs	r16, 2
    4f54:	06 c0       	rjmp	.+12     	; 0x4f62 <vfprintf+0x5ec>
    4f56:	d3 94       	inc	r13
    4f58:	d3 94       	inc	r13
    4f5a:	04 c0       	rjmp	.+8      	; 0x4f64 <vfprintf+0x5ee>
    4f5c:	80 2f       	mov	r24, r16
    4f5e:	86 78       	andi	r24, 0x86	; 134
    4f60:	09 f0       	breq	.+2      	; 0x4f64 <vfprintf+0x5ee>
    4f62:	d3 94       	inc	r13
    4f64:	03 fd       	sbrc	r16, 3
    4f66:	11 c0       	rjmp	.+34     	; 0x4f8a <vfprintf+0x614>
    4f68:	00 ff       	sbrs	r16, 0
    4f6a:	06 c0       	rjmp	.+12     	; 0x4f78 <vfprintf+0x602>
    4f6c:	1c 2d       	mov	r17, r12
    4f6e:	d5 14       	cp	r13, r5
    4f70:	80 f4       	brcc	.+32     	; 0x4f92 <vfprintf+0x61c>
    4f72:	15 0d       	add	r17, r5
    4f74:	1d 19       	sub	r17, r13
    4f76:	0d c0       	rjmp	.+26     	; 0x4f92 <vfprintf+0x61c>
    4f78:	d5 14       	cp	r13, r5
    4f7a:	58 f4       	brcc	.+22     	; 0x4f92 <vfprintf+0x61c>
    4f7c:	b7 01       	movw	r22, r14
    4f7e:	80 e2       	ldi	r24, 0x20	; 32
    4f80:	90 e0       	ldi	r25, 0x00	; 0
    4f82:	0e 94 71 77 	call	0xeee2	; 0xeee2 <fputc>
    4f86:	d3 94       	inc	r13
    4f88:	f7 cf       	rjmp	.-18     	; 0x4f78 <vfprintf+0x602>
    4f8a:	d5 14       	cp	r13, r5
    4f8c:	10 f4       	brcc	.+4      	; 0x4f92 <vfprintf+0x61c>
    4f8e:	5d 18       	sub	r5, r13
    4f90:	01 c0       	rjmp	.+2      	; 0x4f94 <vfprintf+0x61e>
    4f92:	51 2c       	mov	r5, r1
    4f94:	04 ff       	sbrs	r16, 4
    4f96:	10 c0       	rjmp	.+32     	; 0x4fb8 <vfprintf+0x642>
    4f98:	b7 01       	movw	r22, r14
    4f9a:	80 e3       	ldi	r24, 0x30	; 48
    4f9c:	90 e0       	ldi	r25, 0x00	; 0
    4f9e:	0e 94 71 77 	call	0xeee2	; 0xeee2 <fputc>
    4fa2:	02 ff       	sbrs	r16, 2
    4fa4:	17 c0       	rjmp	.+46     	; 0x4fd4 <vfprintf+0x65e>
    4fa6:	01 fd       	sbrc	r16, 1
    4fa8:	03 c0       	rjmp	.+6      	; 0x4fb0 <vfprintf+0x63a>
    4faa:	88 e7       	ldi	r24, 0x78	; 120
    4fac:	90 e0       	ldi	r25, 0x00	; 0
    4fae:	02 c0       	rjmp	.+4      	; 0x4fb4 <vfprintf+0x63e>
    4fb0:	88 e5       	ldi	r24, 0x58	; 88
    4fb2:	90 e0       	ldi	r25, 0x00	; 0
    4fb4:	b7 01       	movw	r22, r14
    4fb6:	0c c0       	rjmp	.+24     	; 0x4fd0 <vfprintf+0x65a>
    4fb8:	80 2f       	mov	r24, r16
    4fba:	86 78       	andi	r24, 0x86	; 134
    4fbc:	59 f0       	breq	.+22     	; 0x4fd4 <vfprintf+0x65e>
    4fbe:	01 ff       	sbrs	r16, 1
    4fc0:	02 c0       	rjmp	.+4      	; 0x4fc6 <vfprintf+0x650>
    4fc2:	8b e2       	ldi	r24, 0x2B	; 43
    4fc4:	01 c0       	rjmp	.+2      	; 0x4fc8 <vfprintf+0x652>
    4fc6:	80 e2       	ldi	r24, 0x20	; 32
    4fc8:	07 fd       	sbrc	r16, 7
    4fca:	8d e2       	ldi	r24, 0x2D	; 45
    4fcc:	b7 01       	movw	r22, r14
    4fce:	90 e0       	ldi	r25, 0x00	; 0
    4fd0:	0e 94 71 77 	call	0xeee2	; 0xeee2 <fputc>
    4fd4:	c1 16       	cp	r12, r17
    4fd6:	38 f4       	brcc	.+14     	; 0x4fe6 <vfprintf+0x670>
    4fd8:	b7 01       	movw	r22, r14
    4fda:	80 e3       	ldi	r24, 0x30	; 48
    4fdc:	90 e0       	ldi	r25, 0x00	; 0
    4fde:	0e 94 71 77 	call	0xeee2	; 0xeee2 <fputc>
    4fe2:	11 50       	subi	r17, 0x01	; 1
    4fe4:	f7 cf       	rjmp	.-18     	; 0x4fd4 <vfprintf+0x65e>
    4fe6:	ca 94       	dec	r12
    4fe8:	f3 01       	movw	r30, r6
    4fea:	ec 0d       	add	r30, r12
    4fec:	f1 1d       	adc	r31, r1
    4fee:	80 81       	ld	r24, Z
    4ff0:	b7 01       	movw	r22, r14
    4ff2:	90 e0       	ldi	r25, 0x00	; 0
    4ff4:	0e 94 71 77 	call	0xeee2	; 0xeee2 <fputc>
    4ff8:	c1 10       	cpse	r12, r1
    4ffa:	f5 cf       	rjmp	.-22     	; 0x4fe6 <vfprintf+0x670>
    4ffc:	15 c0       	rjmp	.+42     	; 0x5028 <vfprintf+0x6b2>
    4ffe:	f4 e0       	ldi	r31, 0x04	; 4
    5000:	f5 15       	cp	r31, r5
    5002:	60 f5       	brcc	.+88     	; 0x505c <vfprintf+0x6e6>
    5004:	84 e0       	ldi	r24, 0x04	; 4
    5006:	58 1a       	sub	r5, r24
    5008:	93 fe       	sbrs	r9, 3
    500a:	1f c0       	rjmp	.+62     	; 0x504a <vfprintf+0x6d4>
    500c:	01 11       	cpse	r16, r1
    500e:	27 c0       	rjmp	.+78     	; 0x505e <vfprintf+0x6e8>
    5010:	2c 85       	ldd	r18, Y+12	; 0x0c
    5012:	23 ff       	sbrs	r18, 3
    5014:	2a c0       	rjmp	.+84     	; 0x506a <vfprintf+0x6f4>
    5016:	06 ed       	ldi	r16, 0xD6	; 214
    5018:	11 e0       	ldi	r17, 0x01	; 1
    501a:	39 2d       	mov	r19, r9
    501c:	30 71       	andi	r19, 0x10	; 16
    501e:	93 2e       	mov	r9, r19
    5020:	f8 01       	movw	r30, r16
    5022:	84 91       	lpm	r24, Z
    5024:	81 11       	cpse	r24, r1
    5026:	24 c0       	rjmp	.+72     	; 0x5070 <vfprintf+0x6fa>
    5028:	55 20       	and	r5, r5
    502a:	09 f4       	brne	.+2      	; 0x502e <vfprintf+0x6b8>
    502c:	e4 cc       	rjmp	.-1592   	; 0x49f6 <vfprintf+0x80>
    502e:	b7 01       	movw	r22, r14
    5030:	80 e2       	ldi	r24, 0x20	; 32
    5032:	90 e0       	ldi	r25, 0x00	; 0
    5034:	0e 94 71 77 	call	0xeee2	; 0xeee2 <fputc>
    5038:	5a 94       	dec	r5
    503a:	f6 cf       	rjmp	.-20     	; 0x5028 <vfprintf+0x6b2>
    503c:	f7 01       	movw	r30, r14
    503e:	86 81       	ldd	r24, Z+6	; 0x06
    5040:	97 81       	ldd	r25, Z+7	; 0x07
    5042:	26 c0       	rjmp	.+76     	; 0x5090 <vfprintf+0x71a>
    5044:	8f ef       	ldi	r24, 0xFF	; 255
    5046:	9f ef       	ldi	r25, 0xFF	; 255
    5048:	23 c0       	rjmp	.+70     	; 0x5090 <vfprintf+0x71a>
    504a:	b7 01       	movw	r22, r14
    504c:	80 e2       	ldi	r24, 0x20	; 32
    504e:	90 e0       	ldi	r25, 0x00	; 0
    5050:	0e 94 71 77 	call	0xeee2	; 0xeee2 <fputc>
    5054:	5a 94       	dec	r5
    5056:	51 10       	cpse	r5, r1
    5058:	f8 cf       	rjmp	.-16     	; 0x504a <vfprintf+0x6d4>
    505a:	d8 cf       	rjmp	.-80     	; 0x500c <vfprintf+0x696>
    505c:	51 2c       	mov	r5, r1
    505e:	b7 01       	movw	r22, r14
    5060:	80 2f       	mov	r24, r16
    5062:	90 e0       	ldi	r25, 0x00	; 0
    5064:	0e 94 71 77 	call	0xeee2	; 0xeee2 <fputc>
    5068:	d3 cf       	rjmp	.-90     	; 0x5010 <vfprintf+0x69a>
    506a:	0a ed       	ldi	r16, 0xDA	; 218
    506c:	11 e0       	ldi	r17, 0x01	; 1
    506e:	d5 cf       	rjmp	.-86     	; 0x501a <vfprintf+0x6a4>
    5070:	91 10       	cpse	r9, r1
    5072:	80 52       	subi	r24, 0x20	; 32
    5074:	b7 01       	movw	r22, r14
    5076:	90 e0       	ldi	r25, 0x00	; 0
    5078:	0e 94 71 77 	call	0xeee2	; 0xeee2 <fputc>
    507c:	0f 5f       	subi	r16, 0xFF	; 255
    507e:	1f 4f       	sbci	r17, 0xFF	; 255
    5080:	cf cf       	rjmp	.-98     	; 0x5020 <vfprintf+0x6aa>
    5082:	23 e0       	ldi	r18, 0x03	; 3
    5084:	25 15       	cp	r18, r5
    5086:	10 f4       	brcc	.+4      	; 0x508c <vfprintf+0x716>
    5088:	83 e0       	ldi	r24, 0x03	; 3
    508a:	bd cf       	rjmp	.-134    	; 0x5006 <vfprintf+0x690>
    508c:	51 2c       	mov	r5, r1
    508e:	c0 cf       	rjmp	.-128    	; 0x5010 <vfprintf+0x69a>
    5090:	60 96       	adiw	r28, 0x10	; 16
    5092:	0f b6       	in	r0, 0x3f	; 63
    5094:	f8 94       	cli
    5096:	de bf       	out	0x3e, r29	; 62
    5098:	0f be       	out	0x3f, r0	; 63
    509a:	cd bf       	out	0x3d, r28	; 61
    509c:	df 91       	pop	r29
    509e:	cf 91       	pop	r28
    50a0:	1f 91       	pop	r17
    50a2:	0f 91       	pop	r16
    50a4:	ff 90       	pop	r15
    50a6:	ef 90       	pop	r14
    50a8:	df 90       	pop	r13
    50aa:	cf 90       	pop	r12
    50ac:	bf 90       	pop	r11
    50ae:	af 90       	pop	r10
    50b0:	9f 90       	pop	r9
    50b2:	8f 90       	pop	r8
    50b4:	7f 90       	pop	r7
    50b6:	6f 90       	pop	r6
    50b8:	5f 90       	pop	r5
    50ba:	4f 90       	pop	r4
    50bc:	3f 90       	pop	r3
    50be:	2f 90       	pop	r2
    50c0:	08 95       	ret

000050c2 <chip_select>:
/// @brief SPI CS pin status
/// return CS GPIO pin number or 0xff
uint8_t spi_chip_select_status()
{
    return(_cs_pin);
}
    50c2:	e8 2f       	mov	r30, r24
    50c4:	e6 95       	lsr	r30
    50c6:	e6 95       	lsr	r30
    50c8:	e6 95       	lsr	r30
    50ca:	93 e0       	ldi	r25, 0x03	; 3
    50cc:	e9 9f       	mul	r30, r25
    50ce:	f0 01       	movw	r30, r0
    50d0:	11 24       	eor	r1, r1
    50d2:	32 a1       	ldd	r19, Z+34	; 0x22
    50d4:	28 2f       	mov	r18, r24
    50d6:	27 70       	andi	r18, 0x07	; 7
    50d8:	81 e0       	ldi	r24, 0x01	; 1
    50da:	90 e0       	ldi	r25, 0x00	; 0
    50dc:	01 c0       	rjmp	.+2      	; 0x50e0 <chip_select+0x1e>
    50de:	88 0f       	add	r24, r24
    50e0:	2a 95       	dec	r18
    50e2:	ea f7       	brpl	.-6      	; 0x50de <chip_select+0x1c>
    50e4:	98 2f       	mov	r25, r24
    50e6:	90 95       	com	r25
    50e8:	93 23       	and	r25, r19
    50ea:	92 a3       	std	Z+34, r25	; 0x22
    50ec:	91 a1       	ldd	r25, Z+33	; 0x21
    50ee:	89 2b       	or	r24, r25
    50f0:	81 a3       	std	Z+33, r24	; 0x21
    50f2:	08 95       	ret

000050f4 <chip_deselect>:
    50f4:	e8 2f       	mov	r30, r24
    50f6:	e6 95       	lsr	r30
    50f8:	e6 95       	lsr	r30
    50fa:	e6 95       	lsr	r30
    50fc:	93 e0       	ldi	r25, 0x03	; 3
    50fe:	e9 9f       	mul	r30, r25
    5100:	f0 01       	movw	r30, r0
    5102:	11 24       	eor	r1, r1
    5104:	32 a1       	ldd	r19, Z+34	; 0x22
    5106:	28 2f       	mov	r18, r24
    5108:	27 70       	andi	r18, 0x07	; 7
    510a:	81 e0       	ldi	r24, 0x01	; 1
    510c:	90 e0       	ldi	r25, 0x00	; 0
    510e:	01 c0       	rjmp	.+2      	; 0x5112 <chip_deselect+0x1e>
    5110:	88 0f       	add	r24, r24
    5112:	2a 95       	dec	r18
    5114:	ea f7       	brpl	.-6      	; 0x5110 <chip_deselect+0x1c>
    5116:	93 2f       	mov	r25, r19
    5118:	98 2b       	or	r25, r24
    511a:	92 a3       	std	Z+34, r25	; 0x22
    511c:	91 a1       	ldd	r25, Z+33	; 0x21
    511e:	89 2b       	or	r24, r25
    5120:	81 a3       	std	Z+33, r24	; 0x21
    5122:	08 95       	ret

00005124 <chip_select_init>:
    5124:	e7 cf       	rjmp	.-50     	; 0x50f4 <chip_deselect>
    5126:	08 95       	ret

00005128 <spi_end>:
    5128:	cf 93       	push	r28
    512a:	ad b7       	in	r26, 0x3d	; 61
    512c:	be b7       	in	r27, 0x3e	; 62
    512e:	17 97       	sbiw	r26, 0x07	; 7
    5130:	0f b6       	in	r0, 0x3f	; 63
    5132:	f8 94       	cli
    5134:	be bf       	out	0x3e, r27	; 62
    5136:	0f be       	out	0x3f, r0	; 63
    5138:	ad bf       	out	0x3d, r26	; 61
    513a:	c8 2f       	mov	r28, r24
    513c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_cs_pin>
    5140:	8c 17       	cp	r24, r28
    5142:	99 f0       	breq	.+38     	; 0x516a <spi_end+0x42>
    5144:	8f 3f       	cpi	r24, 0xFF	; 255
    5146:	89 f0       	breq	.+34     	; 0x516a <spi_end+0x42>
    5148:	2c 2f       	mov	r18, r28
    514a:	30 e0       	ldi	r19, 0x00	; 0
    514c:	ed b7       	in	r30, 0x3d	; 61
    514e:	fe b7       	in	r31, 0x3e	; 62
    5150:	37 83       	std	Z+7, r19	; 0x07
    5152:	26 83       	std	Z+6, r18	; 0x06
    5154:	90 e0       	ldi	r25, 0x00	; 0
    5156:	95 83       	std	Z+5, r25	; 0x05
    5158:	84 83       	std	Z+4, r24	; 0x04
    515a:	88 ed       	ldi	r24, 0xD8	; 216
    515c:	92 e0       	ldi	r25, 0x02	; 2
    515e:	a0 e0       	ldi	r26, 0x00	; 0
    5160:	81 83       	std	Z+1, r24	; 0x01
    5162:	92 83       	std	Z+2, r25	; 0x02
    5164:	a3 83       	std	Z+3, r26	; 0x03
    5166:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    516a:	8c 2f       	mov	r24, r28
    516c:	c3 df       	rcall	.-122    	; 0x50f4 <chip_deselect>
    516e:	8f ef       	ldi	r24, 0xFF	; 255
    5170:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_cs_pin>
    5174:	ad b7       	in	r26, 0x3d	; 61
    5176:	be b7       	in	r27, 0x3e	; 62
    5178:	17 96       	adiw	r26, 0x07	; 7
    517a:	0f b6       	in	r0, 0x3f	; 63
    517c:	f8 94       	cli
    517e:	be bf       	out	0x3e, r27	; 62
    5180:	0f be       	out	0x3f, r0	; 63
    5182:	ad bf       	out	0x3d, r26	; 61
    5184:	cf 91       	pop	r28
    5186:	08 95       	ret

00005188 <spi_TX_buffer>:
/// @brief SPI write buffer
/// @param[in] *data: transmit buffer
/// @param[in] count: number of bytes to write
/// @return  void
void spi_TX_buffer(const uint8_t *data, int count)
{
    5188:	c2 c4       	rjmp	.+2436   	; 0x5b0e <SPI0_TX>
    518a:	08 95       	ret

0000518c <spi_RX_buffer>:
    518c:	ea c4       	rjmp	.+2516   	; 0x5b62 <SPI0_RX>
    518e:	08 95       	ret

00005190 <spi_TX>:
    5190:	a1 e0       	ldi	r26, 0x01	; 1
    5192:	b0 e0       	ldi	r27, 0x00	; 0
    5194:	ee ec       	ldi	r30, 0xCE	; 206
    5196:	f8 e2       	ldi	r31, 0x28	; 40
    5198:	0c 94 29 e5 	jmp	0x1ca52	; 0x1ca52 <__prologue_saves__+0x20>
    519c:	89 83       	std	Y+1, r24	; 0x01
    519e:	61 e0       	ldi	r22, 0x01	; 1
    51a0:	70 e0       	ldi	r23, 0x00	; 0
    51a2:	ce 01       	movw	r24, r28
    51a4:	01 96       	adiw	r24, 0x01	; 1
    51a6:	b3 d4       	rcall	.+2406   	; 0x5b0e <SPI0_TX>
    51a8:	21 96       	adiw	r28, 0x01	; 1
    51aa:	e2 e0       	ldi	r30, 0x02	; 2
    51ac:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__epilogue_restores__+0x20>

000051b0 <spi_init>:
    51b0:	cf 92       	push	r12
    51b2:	df 92       	push	r13
    51b4:	ef 92       	push	r14
    51b6:	ff 92       	push	r15
    51b8:	6b 01       	movw	r12, r22
    51ba:	7c 01       	movw	r14, r24
    51bc:	84 2f       	mov	r24, r20
    51be:	9a df       	rcall	.-204    	; 0x50f4 <chip_deselect>
    51c0:	8f ef       	ldi	r24, 0xFF	; 255
    51c2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_cs_pin>
    51c6:	c7 01       	movw	r24, r14
    51c8:	b6 01       	movw	r22, r12
    51ca:	74 d4       	rcall	.+2280   	; 0x5ab4 <SPI0_Init>
    51cc:	80 e0       	ldi	r24, 0x00	; 0
    51ce:	90 e0       	ldi	r25, 0x00	; 0
    51d0:	31 d4       	rcall	.+2146   	; 0x5a34 <SPI0_Mode>
    51d2:	8f ef       	ldi	r24, 0xFF	; 255
    51d4:	dd df       	rcall	.-70     	; 0x5190 <spi_TX>
    51d6:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <_spi_clock>
    51da:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <_spi_clock+0x1>
    51de:	e0 92 08 01 	sts	0x0108, r14	; 0x800108 <_spi_clock+0x2>
    51e2:	f0 92 09 01 	sts	0x0109, r15	; 0x800109 <_spi_clock+0x3>
    51e6:	ff 90       	pop	r15
    51e8:	ef 90       	pop	r14
    51ea:	df 90       	pop	r13
    51ec:	cf 90       	pop	r12
    51ee:	08 95       	ret

000051f0 <spi_begin>:
    51f0:	cf 92       	push	r12
    51f2:	df 92       	push	r13
    51f4:	ef 92       	push	r14
    51f6:	ff 92       	push	r15
    51f8:	cf 93       	push	r28
    51fa:	df 93       	push	r29
    51fc:	ad b7       	in	r26, 0x3d	; 61
    51fe:	be b7       	in	r27, 0x3e	; 62
    5200:	17 97       	sbiw	r26, 0x07	; 7
    5202:	0f b6       	in	r0, 0x3f	; 63
    5204:	f8 94       	cli
    5206:	be bf       	out	0x3e, r27	; 62
    5208:	0f be       	out	0x3f, r0	; 63
    520a:	ad bf       	out	0x3d, r26	; 61
    520c:	6b 01       	movw	r12, r22
    520e:	7c 01       	movw	r14, r24
    5210:	ea 01       	movw	r28, r20
    5212:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_cs_pin>
    5216:	8f 3f       	cpi	r24, 0xFF	; 255
    5218:	79 f0       	breq	.+30     	; 0x5238 <spi_begin+0x48>
    521a:	ed b7       	in	r30, 0x3d	; 61
    521c:	fe b7       	in	r31, 0x3e	; 62
    521e:	46 83       	std	Z+6, r20	; 0x06
    5220:	d7 83       	std	Z+7, r29	; 0x07
    5222:	90 e0       	ldi	r25, 0x00	; 0
    5224:	95 83       	std	Z+5, r25	; 0x05
    5226:	84 83       	std	Z+4, r24	; 0x04
    5228:	86 ef       	ldi	r24, 0xF6	; 246
    522a:	92 e0       	ldi	r25, 0x02	; 2
    522c:	a0 e0       	ldi	r26, 0x00	; 0
    522e:	81 83       	std	Z+1, r24	; 0x01
    5230:	92 83       	std	Z+2, r25	; 0x02
    5232:	a3 83       	std	Z+3, r26	; 0x03
    5234:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    5238:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_spi_clock>
    523c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_spi_clock+0x1>
    5240:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_spi_clock+0x2>
    5244:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_spi_clock+0x3>
    5248:	8c 15       	cp	r24, r12
    524a:	9d 05       	cpc	r25, r13
    524c:	ae 05       	cpc	r26, r14
    524e:	bf 05       	cpc	r27, r15
    5250:	21 f0       	breq	.+8      	; 0x525a <spi_begin+0x6a>
    5252:	ae 01       	movw	r20, r28
    5254:	c7 01       	movw	r24, r14
    5256:	b6 01       	movw	r22, r12
    5258:	ab df       	rcall	.-170    	; 0x51b0 <spi_init>
    525a:	8c 2f       	mov	r24, r28
    525c:	32 df       	rcall	.-412    	; 0x50c2 <chip_select>
    525e:	c0 93 0a 01 	sts	0x010A, r28	; 0x80010a <_cs_pin>
    5262:	ad b7       	in	r26, 0x3d	; 61
    5264:	be b7       	in	r27, 0x3e	; 62
    5266:	17 96       	adiw	r26, 0x07	; 7
    5268:	0f b6       	in	r0, 0x3f	; 63
    526a:	f8 94       	cli
    526c:	be bf       	out	0x3e, r27	; 62
    526e:	0f be       	out	0x3f, r0	; 63
    5270:	ad bf       	out	0x3d, r26	; 61
    5272:	df 91       	pop	r29
    5274:	cf 91       	pop	r28
    5276:	ff 90       	pop	r15
    5278:	ef 90       	pop	r14
    527a:	df 90       	pop	r13
    527c:	cf 90       	pop	r12
    527e:	08 95       	ret

00005280 <spi_TXRX>:
    5280:	a1 e0       	ldi	r26, 0x01	; 1
    5282:	b0 e0       	ldi	r27, 0x00	; 0
    5284:	e6 e4       	ldi	r30, 0x46	; 70
    5286:	f9 e2       	ldi	r31, 0x29	; 41
    5288:	0c 94 29 e5 	jmp	0x1ca52	; 0x1ca52 <__prologue_saves__+0x20>
    528c:	89 83       	std	Y+1, r24	; 0x01
    528e:	61 e0       	ldi	r22, 0x01	; 1
    5290:	70 e0       	ldi	r23, 0x00	; 0
    5292:	ce 01       	movw	r24, r28
    5294:	01 96       	adiw	r24, 0x01	; 1
    5296:	4f d4       	rcall	.+2206   	; 0x5b36 <SPI0_TXRX>
    5298:	89 81       	ldd	r24, Y+1	; 0x01
    529a:	21 96       	adiw	r28, 0x01	; 1
    529c:	e2 e0       	ldi	r30, 0x02	; 2
    529e:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__epilogue_restores__+0x20>

000052a2 <freeRam>:
/// - avr-libc dependent code.
///
/// @return free memory in bytes.
/// @see malloc().
uint16_t freeRam ()
{
    52a2:	a2 e0       	ldi	r26, 0x02	; 2
    52a4:	b0 e0       	ldi	r27, 0x00	; 0
    52a6:	e7 e5       	ldi	r30, 0x57	; 87
    52a8:	f9 e2       	ldi	r31, 0x29	; 41
    52aa:	0c 94 29 e5 	jmp	0x1ca52	; 0x1ca52 <__prologue_saves__+0x20>
    extern void * __heap_start;
    extern void * __brkval;
    int ret;
    uint16_t top;

    if(__brkval)
    52ae:	20 91 44 21 	lds	r18, 0x2144	; 0x802144 <__brkval>
    52b2:	30 91 45 21 	lds	r19, 0x2145	; 0x802145 <__brkval+0x1>
    52b6:	21 15       	cp	r18, r1
    52b8:	31 05       	cpc	r19, r1
    52ba:	11 f4       	brne	.+4      	; 0x52c0 <freeRam+0x1e>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    52bc:	28 e4       	ldi	r18, 0x48	; 72
    52be:	31 e2       	ldi	r19, 0x21	; 33

    ret = (uint16_t) &v - top;
    return ( ret );
}
    52c0:	ce 01       	movw	r24, r28
    52c2:	01 96       	adiw	r24, 0x01	; 1
    52c4:	82 1b       	sub	r24, r18
    52c6:	93 0b       	sbc	r25, r19
    52c8:	22 96       	adiw	r28, 0x02	; 2
    52ca:	e2 e0       	ldi	r30, 0x02	; 2
    52cc:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__epilogue_restores__+0x20>

000052d0 <PrintFree>:
/// - avr-libc dependent code.
/// - Stack, BSS, Data, Heap, Malloc.
///
/// @return  void
void PrintFree()
{
    52d0:	a9 e0       	ldi	r26, 0x09	; 9
    52d2:	b0 e0       	ldi	r27, 0x00	; 0
    52d4:	ee e6       	ldi	r30, 0x6E	; 110
    52d6:	f9 e2       	ldi	r31, 0x29	; 41
    52d8:	0c 94 29 e5 	jmp	0x1ca52	; 0x1ca52 <__prologue_saves__+0x20>
    extern void * __data_start;
    extern void * __data_end;
    extern void * __stack;
    uint16_t ram;

    ram = freeRam();
    52dc:	e2 df       	rcall	.-60     	; 0x52a2 <freeRam>
    52de:	99 87       	std	Y+9, r25	; 0x09

    printf("Free Ram:%u\n", ram);
    52e0:	88 87       	std	Y+8, r24	; 0x08
    52e2:	ed b7       	in	r30, 0x3d	; 61
    52e4:	fe b7       	in	r31, 0x3e	; 62
    52e6:	95 83       	std	Z+5, r25	; 0x05
    52e8:	84 83       	std	Z+4, r24	; 0x04
    52ea:	8d e1       	ldi	r24, 0x1D	; 29
    52ec:	94 e0       	ldi	r25, 0x04	; 4
    52ee:	a0 e0       	ldi	r26, 0x00	; 0
    52f0:	81 83       	std	Z+1, r24	; 0x01
    52f2:	92 83       	std	Z+2, r25	; 0x02
    52f4:	a3 83       	std	Z+3, r26	; 0x03
    52f6:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    printf("  Stack Top:   %u\n", (unsigned int) &__stack);
    52fa:	8f ef       	ldi	r24, 0xFF	; 255
    52fc:	90 e4       	ldi	r25, 0x40	; 64
    52fe:	ed b7       	in	r30, 0x3d	; 61
    5300:	fe b7       	in	r31, 0x3e	; 62
    5302:	95 83       	std	Z+5, r25	; 0x05
    5304:	84 83       	std	Z+4, r24	; 0x04
    5306:	8a e0       	ldi	r24, 0x0A	; 10
    5308:	94 e0       	ldi	r25, 0x04	; 4
    530a:	a0 e0       	ldi	r26, 0x00	; 0
    530c:	81 83       	std	Z+1, r24	; 0x01
    530e:	92 83       	std	Z+2, r25	; 0x02
    5310:	a3 83       	std	Z+3, r26	; 0x03
    5312:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    printf("  Stack Free:  %u\n", (unsigned int) &ram - 0);
    5316:	ce 01       	movw	r24, r28
    5318:	08 96       	adiw	r24, 0x08	; 8
    531a:	ed b7       	in	r30, 0x3d	; 61
    531c:	fe b7       	in	r31, 0x3e	; 62
    531e:	95 83       	std	Z+5, r25	; 0x05
    5320:	84 83       	std	Z+4, r24	; 0x04
    5322:	87 ef       	ldi	r24, 0xF7	; 247
    5324:	93 e0       	ldi	r25, 0x03	; 3
    5326:	a0 e0       	ldi	r26, 0x00	; 0
    5328:	81 83       	std	Z+1, r24	; 0x01
    532a:	92 83       	std	Z+2, r25	; 0x02
    532c:	a3 83       	std	Z+3, r26	; 0x03
    532e:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>

    printf("  BSS   start: %5u, end: %5u\n",
    5332:	88 e4       	ldi	r24, 0x48	; 72
    5334:	91 e2       	ldi	r25, 0x21	; 33
    5336:	ed b7       	in	r30, 0x3d	; 61
    5338:	fe b7       	in	r31, 0x3e	; 62
    533a:	97 83       	std	Z+7, r25	; 0x07
    533c:	86 83       	std	Z+6, r24	; 0x06
    533e:	80 e1       	ldi	r24, 0x10	; 16
    5340:	97 e1       	ldi	r25, 0x17	; 23
    5342:	95 83       	std	Z+5, r25	; 0x05
    5344:	84 83       	std	Z+4, r24	; 0x04
    5346:	89 ed       	ldi	r24, 0xD9	; 217
    5348:	93 e0       	ldi	r25, 0x03	; 3
    534a:	a0 e0       	ldi	r26, 0x00	; 0
    534c:	81 83       	std	Z+1, r24	; 0x01
    534e:	92 83       	std	Z+2, r25	; 0x02
    5350:	a3 83       	std	Z+3, r26	; 0x03
    5352:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
        (unsigned int)&__bss_start, (unsigned int)&__bss_end);

    printf("  Data  start: %5u, end: %5u\n",
    5356:	80 e1       	ldi	r24, 0x10	; 16
    5358:	97 e1       	ldi	r25, 0x17	; 23
    535a:	ed b7       	in	r30, 0x3d	; 61
    535c:	fe b7       	in	r31, 0x3e	; 62
    535e:	97 83       	std	Z+7, r25	; 0x07
    5360:	86 83       	std	Z+6, r24	; 0x06
    5362:	80 e0       	ldi	r24, 0x00	; 0
    5364:	91 e0       	ldi	r25, 0x01	; 1
    5366:	95 83       	std	Z+5, r25	; 0x05
    5368:	84 83       	std	Z+4, r24	; 0x04
    536a:	8b eb       	ldi	r24, 0xBB	; 187
    536c:	93 e0       	ldi	r25, 0x03	; 3
    536e:	a0 e0       	ldi	r26, 0x00	; 0
    5370:	81 83       	std	Z+1, r24	; 0x01
    5372:	92 83       	std	Z+2, r25	; 0x02
    5374:	a3 83       	std	Z+3, r26	; 0x03
    5376:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
        (unsigned int)&__data_start, (unsigned int)&__data_end);

    printf("  Heap: start: %5u, end: %5u\n",
    537a:	80 e0       	ldi	r24, 0x00	; 0
    537c:	90 e0       	ldi	r25, 0x00	; 0
    537e:	ed b7       	in	r30, 0x3d	; 61
    5380:	fe b7       	in	r31, 0x3e	; 62
    5382:	97 83       	std	Z+7, r25	; 0x07
    5384:	86 83       	std	Z+6, r24	; 0x06
    5386:	88 e4       	ldi	r24, 0x48	; 72
    5388:	91 e2       	ldi	r25, 0x21	; 33
    538a:	95 83       	std	Z+5, r25	; 0x05
    538c:	84 83       	std	Z+4, r24	; 0x04
    538e:	8d e9       	ldi	r24, 0x9D	; 157
    5390:	93 e0       	ldi	r25, 0x03	; 3
    5392:	a0 e0       	ldi	r26, 0x00	; 0
    5394:	81 83       	std	Z+1, r24	; 0x01
    5396:	92 83       	std	Z+2, r25	; 0x02
    5398:	a3 83       	std	Z+3, r26	; 0x03
    539a:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
        (unsigned int)&__heap_start, (unsigned int)&__heap_end);

    printf("  Malloc start %5u  end: %5u\n",
    539e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    53a2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    53a6:	ed b7       	in	r30, 0x3d	; 61
    53a8:	fe b7       	in	r31, 0x3e	; 62
    53aa:	97 83       	std	Z+7, r25	; 0x07
    53ac:	86 83       	std	Z+6, r24	; 0x06
    53ae:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__malloc_heap_start>
    53b2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    53b6:	95 83       	std	Z+5, r25	; 0x05
    53b8:	84 83       	std	Z+4, r24	; 0x04
    53ba:	8f e7       	ldi	r24, 0x7F	; 127
    53bc:	93 e0       	ldi	r25, 0x03	; 3
    53be:	a0 e0       	ldi	r26, 0x00	; 0
    53c0:	81 83       	std	Z+1, r24	; 0x01
    53c2:	92 83       	std	Z+2, r25	; 0x02
    53c4:	a3 83       	std	Z+3, r26	; 0x03
    53c6:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
        (unsigned int)__malloc_heap_start, (unsigned int) __malloc_heap_end );

    printf("  __brkval:    %5u\n", (unsigned int) __brkval);
    53ca:	80 91 44 21 	lds	r24, 0x2144	; 0x802144 <__brkval>
    53ce:	90 91 45 21 	lds	r25, 0x2145	; 0x802145 <__brkval+0x1>
    53d2:	ed b7       	in	r30, 0x3d	; 61
    53d4:	fe b7       	in	r31, 0x3e	; 62
    53d6:	95 83       	std	Z+5, r25	; 0x05
    53d8:	84 83       	std	Z+4, r24	; 0x04
    53da:	8b e6       	ldi	r24, 0x6B	; 107
    53dc:	93 e0       	ldi	r25, 0x03	; 3
    53de:	a0 e0       	ldi	r26, 0x00	; 0
    53e0:	81 83       	std	Z+1, r24	; 0x01
    53e2:	92 83       	std	Z+2, r25	; 0x02
    53e4:	a3 83       	std	Z+3, r26	; 0x03
    53e6:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>

}
    53ea:	29 96       	adiw	r28, 0x09	; 9
    53ec:	e2 e0       	ldi	r30, 0x02	; 2
    53ee:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__epilogue_restores__+0x20>

000053f2 <safecalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
///
/// @return  void.
void *safecalloc(int size, int elements)
{
    53f2:	ef 92       	push	r14
    53f4:	ff 92       	push	r15
    53f6:	0f 93       	push	r16
    53f8:	1f 93       	push	r17
    53fa:	cf 93       	push	r28
    53fc:	df 93       	push	r29
    53fe:	ad b7       	in	r26, 0x3d	; 61
    5400:	be b7       	in	r27, 0x3e	; 62
    5402:	17 97       	sbiw	r26, 0x07	; 7
    5404:	0f b6       	in	r0, 0x3f	; 63
    5406:	f8 94       	cli
    5408:	be bf       	out	0x3e, r27	; 62
    540a:	0f be       	out	0x3f, r0	; 63
    540c:	ad bf       	out	0x3d, r26	; 61
    540e:	8c 01       	movw	r16, r24
    5410:	7b 01       	movw	r14, r22
	void *p = calloc(size, elements);
    5412:	0e 94 c7 e7 	call	0x1cf8e	; 0x1cf8e <calloc>
    5416:	ec 01       	movw	r28, r24
	if(!p)
    5418:	89 2b       	or	r24, r25
    541a:	71 f4       	brne	.+28     	; 0x5438 <safecalloc+0x46>
	{
		printf("safecalloc(%d,%d) failed!\n", size, elements);
    541c:	ed b7       	in	r30, 0x3d	; 61
    541e:	fe b7       	in	r31, 0x3e	; 62
    5420:	f7 82       	std	Z+7, r15	; 0x07
    5422:	e6 82       	std	Z+6, r14	; 0x06
    5424:	15 83       	std	Z+5, r17	; 0x05
    5426:	04 83       	std	Z+4, r16	; 0x04
    5428:	80 e5       	ldi	r24, 0x50	; 80
    542a:	93 e0       	ldi	r25, 0x03	; 3
    542c:	a0 e0       	ldi	r26, 0x00	; 0
    542e:	81 83       	std	Z+1, r24	; 0x01
    5430:	92 83       	std	Z+2, r25	; 0x02
    5432:	a3 83       	std	Z+3, r26	; 0x03
    5434:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
	}
	return(p);
}
    5438:	ce 01       	movw	r24, r28
    543a:	cd b7       	in	r28, 0x3d	; 61
    543c:	de b7       	in	r29, 0x3e	; 62
    543e:	27 96       	adiw	r28, 0x07	; 7
    5440:	e6 e0       	ldi	r30, 0x06	; 6
    5442:	0c 94 41 e5 	jmp	0x1ca82	; 0x1ca82 <__epilogue_restores__+0x18>

00005446 <safemalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
/// @param[in] size:  size
/// @return  void.
void *safemalloc(size_t size)
{
    5446:	0f 93       	push	r16
    5448:	1f 93       	push	r17
    544a:	cf 93       	push	r28
    544c:	df 93       	push	r29
    544e:	00 d0       	rcall	.+0      	; 0x5450 <safemalloc+0xa>
    5450:	00 d0       	rcall	.+0      	; 0x5452 <safemalloc+0xc>
    5452:	1f 92       	push	r1
    5454:	8c 01       	movw	r16, r24
    void *p = calloc(size, 1);
    5456:	61 e0       	ldi	r22, 0x01	; 1
    5458:	70 e0       	ldi	r23, 0x00	; 0
    545a:	0e 94 c7 e7 	call	0x1cf8e	; 0x1cf8e <calloc>
    545e:	ec 01       	movw	r28, r24
    if(!p)
    5460:	89 2b       	or	r24, r25
    5462:	61 f4       	brne	.+24     	; 0x547c <safemalloc+0x36>
    {
        printf("safemalloc(%d) failed!\n", size);
    5464:	ed b7       	in	r30, 0x3d	; 61
    5466:	fe b7       	in	r31, 0x3e	; 62
    5468:	15 83       	std	Z+5, r17	; 0x05
    546a:	04 83       	std	Z+4, r16	; 0x04
    546c:	88 e3       	ldi	r24, 0x38	; 56
    546e:	93 e0       	ldi	r25, 0x03	; 3
    5470:	a0 e0       	ldi	r26, 0x00	; 0
    5472:	81 83       	std	Z+1, r24	; 0x01
    5474:	92 83       	std	Z+2, r25	; 0x02
    5476:	a3 83       	std	Z+3, r26	; 0x03
    5478:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    }
    return(p);
}
    547c:	ce 01       	movw	r24, r28
    547e:	cd b7       	in	r28, 0x3d	; 61
    5480:	de b7       	in	r29, 0x3e	; 62
    5482:	25 96       	adiw	r28, 0x05	; 5
    5484:	e4 e0       	ldi	r30, 0x04	; 4
    5486:	0c 94 43 e5 	jmp	0x1ca86	; 0x1ca86 <__epilogue_restores__+0x1c>

0000548a <safefree>:
///
/// @param[in] p: pointer to free.
///
/// @return  void.
void safefree(void *p)
{
    548a:	ad b7       	in	r26, 0x3d	; 61
    548c:	be b7       	in	r27, 0x3e	; 62
    548e:	17 97       	sbiw	r26, 0x07	; 7
    5490:	0f b6       	in	r0, 0x3f	; 63
    5492:	f8 94       	cli
    5494:	be bf       	out	0x3e, r27	; 62
    5496:	0f be       	out	0x3f, r0	; 63
    5498:	ad bf       	out	0x3d, r26	; 61
    extern void *__brkval;
    extern void * __heap_start;
    extern void * __heap_end;
    uint16_t top;

    if(p == NULL)
    549a:	00 97       	sbiw	r24, 0x00	; 0
    549c:	11 f1       	breq	.+68     	; 0x54e2 <safefree+0x58>
        return;

    if(__brkval)
    549e:	20 91 44 21 	lds	r18, 0x2144	; 0x802144 <__brkval>
    54a2:	30 91 45 21 	lds	r19, 0x2145	; 0x802145 <__brkval+0x1>
    54a6:	21 15       	cp	r18, r1
    54a8:	31 05       	cpc	r19, r1
    54aa:	11 f4       	brne	.+4      	; 0x54b0 <safefree+0x26>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    54ac:	28 e4       	ldi	r18, 0x48	; 72
    54ae:	31 e2       	ldi	r19, 0x21	; 33

    if( ((uint16_t) p >= (uint16_t) &__heap_start) &&
    54b0:	41 e2       	ldi	r20, 0x21	; 33
    54b2:	88 34       	cpi	r24, 0x48	; 72
    54b4:	94 07       	cpc	r25, r20
    54b6:	30 f0       	brcs	.+12     	; 0x54c4 <safefree+0x3a>
    54b8:	28 17       	cp	r18, r24
    54ba:	39 07       	cpc	r19, r25
    54bc:	18 f0       	brcs	.+6      	; 0x54c4 <safefree+0x3a>
        ((uint16_t) p <= top) )
    {
        free(p);
    54be:	0e 94 79 e8 	call	0x1d0f2	; 0x1d0f2 <free>
        return;
    54c2:	0f c0       	rjmp	.+30     	; 0x54e2 <safefree+0x58>
    }
    printf("safefree: FREE ERROR (%u), top:(%u)\n", (uint16_t) p, (uint16_t) top);
    54c4:	ed b7       	in	r30, 0x3d	; 61
    54c6:	fe b7       	in	r31, 0x3e	; 62
    54c8:	37 83       	std	Z+7, r19	; 0x07
    54ca:	26 83       	std	Z+6, r18	; 0x06
    54cc:	95 83       	std	Z+5, r25	; 0x05
    54ce:	84 83       	std	Z+4, r24	; 0x04
    54d0:	83 e1       	ldi	r24, 0x13	; 19
    54d2:	93 e0       	ldi	r25, 0x03	; 3
    54d4:	a0 e0       	ldi	r26, 0x00	; 0
    54d6:	81 83       	std	Z+1, r24	; 0x01
    54d8:	92 83       	std	Z+2, r25	; 0x02
    54da:	a3 83       	std	Z+3, r26	; 0x03
    54dc:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    PrintFree();
}
    54e0:	f7 de       	rcall	.-530    	; 0x52d0 <PrintFree>
    54e2:	ad b7       	in	r26, 0x3d	; 61
    54e4:	be b7       	in	r27, 0x3e	; 62
    54e6:	17 96       	adiw	r26, 0x07	; 7
    54e8:	0f b6       	in	r0, 0x3f	; 63
    54ea:	f8 94       	cli
    54ec:	be bf       	out	0x3e, r27	; 62
    54ee:	0f be       	out	0x3f, r0	; 63
    54f0:	ad bf       	out	0x3d, r26	; 61
    54f2:	08 95       	ret

000054f4 <delayus>:
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayus(uint32_t us)
{

    while (us >= 100U)
    54f4:	64 36       	cpi	r22, 0x64	; 100
    54f6:	71 05       	cpc	r23, r1
    54f8:	81 05       	cpc	r24, r1
    54fa:	91 05       	cpc	r25, r1
    54fc:	58 f0       	brcs	.+22     	; 0x5514 <delayus+0x20>
    {
        us -= 100U;
    54fe:	64 56       	subi	r22, 0x64	; 100
    5500:	71 09       	sbc	r23, r1
    5502:	81 09       	sbc	r24, r1
    5504:	91 09       	sbc	r25, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    5506:	e3 ef       	ldi	r30, 0xF3	; 243
    5508:	f1 e0       	ldi	r31, 0x01	; 1
    550a:	31 97       	sbiw	r30, 0x01	; 1
    550c:	f1 f7       	brne	.-4      	; 0x550a <delayus+0x16>
    550e:	00 c0       	rjmp	.+0      	; 0x5510 <delayus+0x1c>
    5510:	00 00       	nop
    5512:	f0 cf       	rjmp	.-32     	; 0x54f4 <delayus>
        _delay_us(100);
    }
    while (us >= 10U)
    5514:	6a 30       	cpi	r22, 0x0A	; 10
    5516:	71 05       	cpc	r23, r1
    5518:	81 05       	cpc	r24, r1
    551a:	91 05       	cpc	r25, r1
    551c:	48 f0       	brcs	.+18     	; 0x5530 <delayus+0x3c>
    {
        us -= 10U;
    551e:	6a 50       	subi	r22, 0x0A	; 10
    5520:	71 09       	sbc	r23, r1
    5522:	81 09       	sbc	r24, r1
    5524:	91 09       	sbc	r25, r1
    5526:	f2 e4       	ldi	r31, 0x42	; 66
    5528:	fa 95       	dec	r31
    552a:	f1 f7       	brne	.-4      	; 0x5528 <delayus+0x34>
    552c:	00 c0       	rjmp	.+0      	; 0x552e <delayus+0x3a>
    552e:	f2 cf       	rjmp	.-28     	; 0x5514 <delayus+0x20>
        _delay_us(10);
    }
    while (us != 0U)
    5530:	61 15       	cp	r22, r1
    5532:	71 05       	cpc	r23, r1
    5534:	81 05       	cpc	r24, r1
    5536:	91 05       	cpc	r25, r1
    5538:	49 f0       	breq	.+18     	; 0x554c <delayus+0x58>
    {
        --us;
    553a:	61 50       	subi	r22, 0x01	; 1
    553c:	71 09       	sbc	r23, r1
    553e:	81 09       	sbc	r24, r1
    5540:	91 09       	sbc	r25, r1
    5542:	26 e0       	ldi	r18, 0x06	; 6
    5544:	2a 95       	dec	r18
    5546:	f1 f7       	brne	.-4      	; 0x5544 <delayus+0x50>
    5548:	00 c0       	rjmp	.+0      	; 0x554a <delayus+0x56>
    554a:	f2 cf       	rjmp	.-28     	; 0x5530 <delayus+0x3c>
        _delay_us(1);
    }
}
    554c:	08 95       	ret

0000554e <delayms>:
/// _delay_us() has limited range - this extends it.
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayms(uint32_t ms)
{
    while (ms--)
    554e:	61 15       	cp	r22, r1
    5550:	71 05       	cpc	r23, r1
    5552:	81 05       	cpc	r24, r1
    5554:	91 05       	cpc	r25, r1
    5556:	09 f4       	brne	.+2      	; 0x555a <delayms+0xc>
    5558:	41 c0       	rjmp	.+130    	; 0x55dc <delayms+0x8e>
    555a:	e3 ef       	ldi	r30, 0xF3	; 243
    555c:	f1 e0       	ldi	r31, 0x01	; 1
    555e:	31 97       	sbiw	r30, 0x01	; 1
    5560:	f1 f7       	brne	.-4      	; 0x555e <delayms+0x10>
    5562:	00 c0       	rjmp	.+0      	; 0x5564 <delayms+0x16>
    5564:	00 00       	nop
    5566:	e3 ef       	ldi	r30, 0xF3	; 243
    5568:	f1 e0       	ldi	r31, 0x01	; 1
    556a:	31 97       	sbiw	r30, 0x01	; 1
    556c:	f1 f7       	brne	.-4      	; 0x556a <delayms+0x1c>
    556e:	00 c0       	rjmp	.+0      	; 0x5570 <delayms+0x22>
    5570:	00 00       	nop
    5572:	e3 ef       	ldi	r30, 0xF3	; 243
    5574:	f1 e0       	ldi	r31, 0x01	; 1
    5576:	31 97       	sbiw	r30, 0x01	; 1
    5578:	f1 f7       	brne	.-4      	; 0x5576 <delayms+0x28>
    557a:	00 c0       	rjmp	.+0      	; 0x557c <delayms+0x2e>
    557c:	00 00       	nop
    557e:	e3 ef       	ldi	r30, 0xF3	; 243
    5580:	f1 e0       	ldi	r31, 0x01	; 1
    5582:	31 97       	sbiw	r30, 0x01	; 1
    5584:	f1 f7       	brne	.-4      	; 0x5582 <delayms+0x34>
    5586:	00 c0       	rjmp	.+0      	; 0x5588 <delayms+0x3a>
    5588:	00 00       	nop
    558a:	e3 ef       	ldi	r30, 0xF3	; 243
    558c:	f1 e0       	ldi	r31, 0x01	; 1
    558e:	31 97       	sbiw	r30, 0x01	; 1
    5590:	f1 f7       	brne	.-4      	; 0x558e <delayms+0x40>
    5592:	00 c0       	rjmp	.+0      	; 0x5594 <delayms+0x46>
    5594:	00 00       	nop
    5596:	e3 ef       	ldi	r30, 0xF3	; 243
    5598:	f1 e0       	ldi	r31, 0x01	; 1
    559a:	31 97       	sbiw	r30, 0x01	; 1
    559c:	f1 f7       	brne	.-4      	; 0x559a <delayms+0x4c>
    559e:	00 c0       	rjmp	.+0      	; 0x55a0 <delayms+0x52>
    55a0:	00 00       	nop
    55a2:	e3 ef       	ldi	r30, 0xF3	; 243
    55a4:	f1 e0       	ldi	r31, 0x01	; 1
    55a6:	31 97       	sbiw	r30, 0x01	; 1
    55a8:	f1 f7       	brne	.-4      	; 0x55a6 <delayms+0x58>
    55aa:	00 c0       	rjmp	.+0      	; 0x55ac <delayms+0x5e>
    55ac:	00 00       	nop
    55ae:	e3 ef       	ldi	r30, 0xF3	; 243
    55b0:	f1 e0       	ldi	r31, 0x01	; 1
    55b2:	31 97       	sbiw	r30, 0x01	; 1
    55b4:	f1 f7       	brne	.-4      	; 0x55b2 <delayms+0x64>
    55b6:	00 c0       	rjmp	.+0      	; 0x55b8 <delayms+0x6a>
    55b8:	00 00       	nop
    55ba:	e3 ef       	ldi	r30, 0xF3	; 243
    55bc:	f1 e0       	ldi	r31, 0x01	; 1
    55be:	31 97       	sbiw	r30, 0x01	; 1
    55c0:	f1 f7       	brne	.-4      	; 0x55be <delayms+0x70>
    55c2:	00 c0       	rjmp	.+0      	; 0x55c4 <delayms+0x76>
    55c4:	00 00       	nop
    55c6:	e3 ef       	ldi	r30, 0xF3	; 243
    55c8:	f1 e0       	ldi	r31, 0x01	; 1
    55ca:	31 97       	sbiw	r30, 0x01	; 1
    55cc:	f1 f7       	brne	.-4      	; 0x55ca <delayms+0x7c>
    55ce:	00 c0       	rjmp	.+0      	; 0x55d0 <delayms+0x82>
    55d0:	00 00       	nop
    55d2:	61 50       	subi	r22, 0x01	; 1
    55d4:	71 09       	sbc	r23, r1
    55d6:	81 09       	sbc	r24, r1
    55d8:	91 09       	sbc	r25, r1
    55da:	b9 cf       	rjmp	.-142    	; 0x554e <delayms>
        _delay_us(100);                           // 700
        _delay_us(100);                           // 800
        _delay_us(100);                           // 900
        _delay_us(100);                           //1000
    }
}
    55dc:	08 95       	ret

000055de <uart_rx_flush>:

    cli();
    c = uarts[uart].rx_buf[uarts[uart].rx_tail];
    sei();
    return (c & 0xff);
}
    55de:	81 11       	cpse	r24, r1
    55e0:	0e c0       	rjmp	.+28     	; 0x55fe <uart_rx_flush+0x20>
    55e2:	f8 94       	cli
    55e4:	10 92 8f 19 	sts	0x198F, r1	; 0x80198f <uarts+0x4>
    55e8:	10 92 8e 19 	sts	0x198E, r1	; 0x80198e <uarts+0x3>
    55ec:	10 92 8b 19 	sts	0x198B, r1	; 0x80198b <uarts>
    55f0:	10 92 8c 19 	sts	0x198C, r1	; 0x80198c <uarts+0x1>
    55f4:	10 92 8d 19 	sts	0x198D, r1	; 0x80198d <uarts+0x2>
    55f8:	10 92 90 19 	sts	0x1990, r1	; 0x801990 <uarts+0x5>
    55fc:	78 94       	sei
    55fe:	08 95       	ret

00005600 <uart_ubr>:
    5600:	4f 92       	push	r4
    5602:	5f 92       	push	r5
    5604:	6f 92       	push	r6
    5606:	7f 92       	push	r7
    5608:	8f 92       	push	r8
    560a:	9f 92       	push	r9
    560c:	af 92       	push	r10
    560e:	bf 92       	push	r11
    5610:	cf 92       	push	r12
    5612:	df 92       	push	r13
    5614:	ef 92       	push	r14
    5616:	ff 92       	push	r15
    5618:	cf 93       	push	r28
    561a:	df 93       	push	r29
    561c:	5a 01       	movw	r10, r20
    561e:	e9 01       	movw	r28, r18
    5620:	0e 94 65 e6 	call	0x1ccca	; 0x1ccca <__floatunsisf>
    5624:	2b 01       	movw	r4, r22
    5626:	3c 01       	movw	r6, r24
    5628:	20 e0       	ldi	r18, 0x00	; 0
    562a:	30 e0       	ldi	r19, 0x00	; 0
    562c:	40 e0       	ldi	r20, 0x00	; 0
    562e:	51 e4       	ldi	r21, 0x41	; 65
    5630:	0e 94 1b e7 	call	0x1ce36	; 0x1ce36 <__mulsf3>
    5634:	9b 01       	movw	r18, r22
    5636:	ac 01       	movw	r20, r24
    5638:	60 e8       	ldi	r22, 0x80	; 128
    563a:	76 e9       	ldi	r23, 0x96	; 150
    563c:	88 e9       	ldi	r24, 0x98	; 152
    563e:	9b e4       	ldi	r25, 0x4B	; 75
    5640:	0e 94 cc e5 	call	0x1cb98	; 0x1cb98 <__divsf3>
    5644:	20 e0       	ldi	r18, 0x00	; 0
    5646:	30 e0       	ldi	r19, 0x00	; 0
    5648:	40 e8       	ldi	r20, 0x80	; 128
    564a:	5f e3       	ldi	r21, 0x3F	; 63
    564c:	0e 94 63 e5 	call	0x1cac6	; 0x1cac6 <__subsf3>
    5650:	0e 94 7e e7 	call	0x1cefc	; 0x1cefc <round>
    5654:	0e 94 39 e6 	call	0x1cc72	; 0x1cc72 <__fixunssfsi>
    5658:	6b 01       	movw	r12, r22
    565a:	7c 01       	movw	r14, r24
    565c:	c1 14       	cp	r12, r1
    565e:	80 e1       	ldi	r24, 0x10	; 16
    5660:	d8 06       	cpc	r13, r24
    5662:	e1 04       	cpc	r14, r1
    5664:	f1 04       	cpc	r15, r1
    5666:	58 f4       	brcc	.+22     	; 0x567e <uart_ubr+0x7e>
    5668:	81 e0       	ldi	r24, 0x01	; 1
    566a:	90 e0       	ldi	r25, 0x00	; 0
    566c:	f5 01       	movw	r30, r10
    566e:	91 83       	std	Z+1, r25	; 0x01
    5670:	80 83       	st	Z, r24
    5672:	81 2c       	mov	r8, r1
    5674:	91 2c       	mov	r9, r1
    5676:	a1 2c       	mov	r10, r1
    5678:	21 e4       	ldi	r18, 0x41	; 65
    567a:	b2 2e       	mov	r11, r18
    567c:	31 c0       	rjmp	.+98     	; 0x56e0 <uart_ubr+0xe0>
    567e:	f5 01       	movw	r30, r10
    5680:	11 82       	std	Z+1, r1	; 0x01
    5682:	10 82       	st	Z, r1
    5684:	20 e0       	ldi	r18, 0x00	; 0
    5686:	30 e0       	ldi	r19, 0x00	; 0
    5688:	40 e8       	ldi	r20, 0x80	; 128
    568a:	51 e4       	ldi	r21, 0x41	; 65
    568c:	c3 01       	movw	r24, r6
    568e:	b2 01       	movw	r22, r4
    5690:	0e 94 1b e7 	call	0x1ce36	; 0x1ce36 <__mulsf3>
    5694:	9b 01       	movw	r18, r22
    5696:	ac 01       	movw	r20, r24
    5698:	60 e8       	ldi	r22, 0x80	; 128
    569a:	76 e9       	ldi	r23, 0x96	; 150
    569c:	88 e9       	ldi	r24, 0x98	; 152
    569e:	9b e4       	ldi	r25, 0x4B	; 75
    56a0:	0e 94 cc e5 	call	0x1cb98	; 0x1cb98 <__divsf3>
    56a4:	20 e0       	ldi	r18, 0x00	; 0
    56a6:	30 e0       	ldi	r19, 0x00	; 0
    56a8:	40 e8       	ldi	r20, 0x80	; 128
    56aa:	5f e3       	ldi	r21, 0x3F	; 63
    56ac:	0e 94 63 e5 	call	0x1cac6	; 0x1cac6 <__subsf3>
    56b0:	0e 94 7e e7 	call	0x1cefc	; 0x1cefc <round>
    56b4:	0e 94 39 e6 	call	0x1cc72	; 0x1cc72 <__fixunssfsi>
    56b8:	6b 01       	movw	r12, r22
    56ba:	7c 01       	movw	r14, r24
    56bc:	81 2c       	mov	r8, r1
    56be:	91 2c       	mov	r9, r1
    56c0:	90 e8       	ldi	r25, 0x80	; 128
    56c2:	a9 2e       	mov	r10, r25
    56c4:	91 e4       	ldi	r25, 0x41	; 65
    56c6:	b9 2e       	mov	r11, r25
    56c8:	c1 14       	cp	r12, r1
    56ca:	f0 e1       	ldi	r31, 0x10	; 16
    56cc:	df 06       	cpc	r13, r31
    56ce:	e1 04       	cpc	r14, r1
    56d0:	f1 04       	cpc	r15, r1
    56d2:	30 f0       	brcs	.+12     	; 0x56e0 <uart_ubr+0xe0>
    56d4:	cc 24       	eor	r12, r12
    56d6:	ca 94       	dec	r12
    56d8:	8f e0       	ldi	r24, 0x0F	; 15
    56da:	d8 2e       	mov	r13, r24
    56dc:	e1 2c       	mov	r14, r1
    56de:	f1 2c       	mov	r15, r1
    56e0:	c7 01       	movw	r24, r14
    56e2:	b6 01       	movw	r22, r12
    56e4:	6f 5f       	subi	r22, 0xFF	; 255
    56e6:	7f 4f       	sbci	r23, 0xFF	; 255
    56e8:	8f 4f       	sbci	r24, 0xFF	; 255
    56ea:	9f 4f       	sbci	r25, 0xFF	; 255
    56ec:	0e 94 65 e6 	call	0x1ccca	; 0x1ccca <__floatunsisf>
    56f0:	a5 01       	movw	r20, r10
    56f2:	94 01       	movw	r18, r8
    56f4:	0e 94 1b e7 	call	0x1ce36	; 0x1ce36 <__mulsf3>
    56f8:	9b 01       	movw	r18, r22
    56fa:	ac 01       	movw	r20, r24
    56fc:	60 e8       	ldi	r22, 0x80	; 128
    56fe:	76 e9       	ldi	r23, 0x96	; 150
    5700:	88 e9       	ldi	r24, 0x98	; 152
    5702:	9b e4       	ldi	r25, 0x4B	; 75
    5704:	0e 94 cc e5 	call	0x1cb98	; 0x1cb98 <__divsf3>
    5708:	0e 94 39 e6 	call	0x1cc72	; 0x1cc72 <__fixunssfsi>
    570c:	68 83       	st	Y, r22
    570e:	79 83       	std	Y+1, r23	; 0x01
    5710:	8a 83       	std	Y+2, r24	; 0x02
    5712:	9b 83       	std	Y+3, r25	; 0x03
    5714:	c6 01       	movw	r24, r12
    5716:	df 91       	pop	r29
    5718:	cf 91       	pop	r28
    571a:	ff 90       	pop	r15
    571c:	ef 90       	pop	r14
    571e:	df 90       	pop	r13
    5720:	cf 90       	pop	r12
    5722:	bf 90       	pop	r11
    5724:	af 90       	pop	r10
    5726:	9f 90       	pop	r9
    5728:	8f 90       	pop	r8
    572a:	7f 90       	pop	r7
    572c:	6f 90       	pop	r6
    572e:	5f 90       	pop	r5
    5730:	4f 90       	pop	r4
    5732:	08 95       	ret

00005734 <uart_init>:
    5734:	a6 e0       	ldi	r26, 0x06	; 6
    5736:	b0 e0       	ldi	r27, 0x00	; 0
    5738:	e0 ea       	ldi	r30, 0xA0	; 160
    573a:	fb e2       	ldi	r31, 0x2B	; 43
    573c:	0c 94 29 e5 	jmp	0x1ca52	; 0x1ca52 <__prologue_saves__+0x20>
    5740:	1e 82       	std	Y+6, r1	; 0x06
    5742:	1d 82       	std	Y+5, r1	; 0x05
    5744:	81 11       	cpse	r24, r1
    5746:	36 c0       	rjmp	.+108    	; 0x57b4 <uart_init+0x80>
    5748:	cb 01       	movw	r24, r22
    574a:	ba 01       	movw	r22, r20
    574c:	9e 01       	movw	r18, r28
    574e:	2f 5f       	subi	r18, 0xFF	; 255
    5750:	3f 4f       	sbci	r19, 0xFF	; 255
    5752:	ae 01       	movw	r20, r28
    5754:	4b 5f       	subi	r20, 0xFB	; 251
    5756:	5f 4f       	sbci	r21, 0xFF	; 255
    5758:	53 df       	rcall	.-346    	; 0x5600 <uart_ubr>
    575a:	f8 94       	cli
    575c:	10 92 8f 19 	sts	0x198F, r1	; 0x80198f <uarts+0x4>
    5760:	10 92 8e 19 	sts	0x198E, r1	; 0x80198e <uarts+0x3>
    5764:	10 92 8b 19 	sts	0x198B, r1	; 0x80198b <uarts>
    5768:	10 92 8c 19 	sts	0x198C, r1	; 0x80198c <uarts+0x1>
    576c:	10 92 8d 19 	sts	0x198D, r1	; 0x80198d <uarts+0x2>
    5770:	10 92 90 19 	sts	0x1990, r1	; 0x801990 <uarts+0x5>
    5774:	78 94       	sei
    5776:	f8 94       	cli
    5778:	58 9a       	sbi	0x0b, 0	; 11
    577a:	59 9a       	sbi	0x0b, 1	; 11
    577c:	50 98       	cbi	0x0a, 0	; 10
    577e:	51 9a       	sbi	0x0a, 1	; 10
    5780:	28 e9       	ldi	r18, 0x98	; 152
    5782:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    5786:	2d 81       	ldd	r18, Y+5	; 0x05
    5788:	3e 81       	ldd	r19, Y+6	; 0x06
    578a:	23 2b       	or	r18, r19
    578c:	19 f0       	breq	.+6      	; 0x5794 <uart_init+0x60>
    578e:	22 e0       	ldi	r18, 0x02	; 2
    5790:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    5794:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    5798:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    579c:	78 94       	sei
    579e:	62 e9       	ldi	r22, 0x92	; 146
    57a0:	7c e2       	ldi	r23, 0x2C	; 44
    57a2:	87 ea       	ldi	r24, 0xA7	; 167
    57a4:	9c e2       	ldi	r25, 0x2C	; 44
    57a6:	0e 94 3a 7a 	call	0xf474	; 0xf474 <fdevopen>
    57aa:	69 81       	ldd	r22, Y+1	; 0x01
    57ac:	7a 81       	ldd	r23, Y+2	; 0x02
    57ae:	8b 81       	ldd	r24, Y+3	; 0x03
    57b0:	9c 81       	ldd	r25, Y+4	; 0x04
    57b2:	03 c0       	rjmp	.+6      	; 0x57ba <uart_init+0x86>
    57b4:	60 e0       	ldi	r22, 0x00	; 0
    57b6:	70 e0       	ldi	r23, 0x00	; 0
    57b8:	cb 01       	movw	r24, r22
    57ba:	26 96       	adiw	r28, 0x06	; 6
    57bc:	e2 e0       	ldi	r30, 0x02	; 2
    57be:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__epilogue_restores__+0x20>

000057c2 <uart_rx_interrupt>:
    57c2:	cf 93       	push	r28
    57c4:	df 93       	push	r29
    57c6:	27 e5       	ldi	r18, 0x57	; 87
    57c8:	82 9f       	mul	r24, r18
    57ca:	c0 01       	movw	r24, r0
    57cc:	11 24       	eor	r1, r1
    57ce:	fc 01       	movw	r30, r24
    57d0:	e5 57       	subi	r30, 0x75	; 117
    57d2:	f6 4e       	sbci	r31, 0xE6	; 230
    57d4:	83 81       	ldd	r24, Z+3	; 0x03
    57d6:	94 81       	ldd	r25, Z+4	; 0x04
    57d8:	80 35       	cpi	r24, 0x50	; 80
    57da:	91 05       	cpc	r25, r1
    57dc:	7c f4       	brge	.+30     	; 0x57fc <uart_rx_interrupt+0x3a>
    57de:	30 81       	ld	r19, Z
    57e0:	21 e0       	ldi	r18, 0x01	; 1
    57e2:	23 0f       	add	r18, r19
    57e4:	20 83       	st	Z, r18
    57e6:	ef 01       	movw	r28, r30
    57e8:	c3 0f       	add	r28, r19
    57ea:	d1 1d       	adc	r29, r1
    57ec:	6e 83       	std	Y+6, r22	; 0x06
    57ee:	01 96       	adiw	r24, 0x01	; 1
    57f0:	94 83       	std	Z+4, r25	; 0x04
    57f2:	83 83       	std	Z+3, r24	; 0x03
    57f4:	20 35       	cpi	r18, 0x50	; 80
    57f6:	28 f0       	brcs	.+10     	; 0x5802 <uart_rx_interrupt+0x40>
    57f8:	10 82       	st	Z, r1
    57fa:	03 c0       	rjmp	.+6      	; 0x5802 <uart_rx_interrupt+0x40>
    57fc:	85 81       	ldd	r24, Z+5	; 0x05
    57fe:	81 60       	ori	r24, 0x01	; 1
    5800:	85 83       	std	Z+5, r24	; 0x05
    5802:	df 91       	pop	r29
    5804:	cf 91       	pop	r28
    5806:	08 95       	ret

00005808 <__vector_20>:
    5808:	1f 92       	push	r1
    580a:	0f 92       	push	r0
    580c:	0f b6       	in	r0, 0x3f	; 63
    580e:	0f 92       	push	r0
    5810:	11 24       	eor	r1, r1
    5812:	0b b6       	in	r0, 0x3b	; 59
    5814:	0f 92       	push	r0
    5816:	2f 93       	push	r18
    5818:	3f 93       	push	r19
    581a:	4f 93       	push	r20
    581c:	5f 93       	push	r21
    581e:	6f 93       	push	r22
    5820:	7f 93       	push	r23
    5822:	8f 93       	push	r24
    5824:	9f 93       	push	r25
    5826:	af 93       	push	r26
    5828:	bf 93       	push	r27
    582a:	ef 93       	push	r30
    582c:	ff 93       	push	r31
    582e:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    5832:	80 e0       	ldi	r24, 0x00	; 0
    5834:	c6 df       	rcall	.-116    	; 0x57c2 <uart_rx_interrupt>
    5836:	ff 91       	pop	r31
    5838:	ef 91       	pop	r30
    583a:	bf 91       	pop	r27
    583c:	af 91       	pop	r26
    583e:	9f 91       	pop	r25
    5840:	8f 91       	pop	r24
    5842:	7f 91       	pop	r23
    5844:	6f 91       	pop	r22
    5846:	5f 91       	pop	r21
    5848:	4f 91       	pop	r20
    584a:	3f 91       	pop	r19
    584c:	2f 91       	pop	r18
    584e:	0f 90       	pop	r0
    5850:	0b be       	out	0x3b, r0	; 59
    5852:	0f 90       	pop	r0
    5854:	0f be       	out	0x3f, r0	; 63
    5856:	0f 90       	pop	r0
    5858:	1f 90       	pop	r1
    585a:	18 95       	reti

0000585c <uart_rx_count>:
/// @return  Character count in ring buffer.
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
    585c:	81 11       	cpse	r24, r1
    585e:	07 c0       	rjmp	.+14     	; 0x586e <uart_rx_count+0x12>
        return(EOF);

    cli();
    5860:	f8 94       	cli

    count = uarts[uart].rx_count;
    5862:	80 91 8e 19 	lds	r24, 0x198E	; 0x80198e <uarts+0x3>
    5866:	90 91 8f 19 	lds	r25, 0x198F	; 0x80198f <uarts+0x4>

    sei();
    586a:	78 94       	sei

    return (count );
    586c:	08 95       	ret
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
        return(EOF);
    586e:	8f ef       	ldi	r24, 0xFF	; 255
    5870:	9f ef       	ldi	r25, 0xFF	; 255
    count = uarts[uart].rx_count;

    sei();

    return (count );
}
    5872:	08 95       	ret

00005874 <uart_get_tail>:
/// @see uart_rx_count().
int uart_get_tail(uint8_t uart)
{
    uint8_t c;

    if (uart >= UARTS)
    5874:	81 11       	cpse	r24, r1
    5876:	21 c0       	rjmp	.+66     	; 0x58ba <uart_get_tail+0x46>
	{
        return(EOF);
	}

	while(uart_rx_count(uart) < 1)
    5878:	80 e0       	ldi	r24, 0x00	; 0
    587a:	f0 df       	rcall	.-32     	; 0x585c <uart_rx_count>
    587c:	18 16       	cp	r1, r24
    587e:	19 06       	cpc	r1, r25
    5880:	dc f7       	brge	.-10     	; 0x5878 <uart_get_tail+0x4>
		;

    cli();
    5882:	f8 94       	cli
    c = uarts[uart].rx_buf[uarts[uart].rx_tail++];
    5884:	e0 91 8c 19 	lds	r30, 0x198C	; 0x80198c <uarts+0x1>
    5888:	91 e0       	ldi	r25, 0x01	; 1
    588a:	9e 0f       	add	r25, r30
    588c:	90 93 8c 19 	sts	0x198C, r25	; 0x80198c <uarts+0x1>
    5890:	f0 e0       	ldi	r31, 0x00	; 0
    5892:	e5 57       	subi	r30, 0x75	; 117
    5894:	f6 4e       	sbci	r31, 0xE6	; 230
    5896:	86 81       	ldd	r24, Z+6	; 0x06
    if (uarts[uart].rx_tail >= RX_BUF_SIZE)
    5898:	90 35       	cpi	r25, 0x50	; 80
    589a:	10 f0       	brcs	.+4      	; 0x58a0 <uart_get_tail+0x2c>
        uarts[uart].rx_tail = 0;
    589c:	10 92 8c 19 	sts	0x198C, r1	; 0x80198c <uarts+0x1>
    uarts[uart].rx_count--;
    58a0:	20 91 8e 19 	lds	r18, 0x198E	; 0x80198e <uarts+0x3>
    58a4:	30 91 8f 19 	lds	r19, 0x198F	; 0x80198f <uarts+0x4>
    58a8:	21 50       	subi	r18, 0x01	; 1
    58aa:	31 09       	sbc	r19, r1
    58ac:	30 93 8f 19 	sts	0x198F, r19	; 0x80198f <uarts+0x4>
    58b0:	20 93 8e 19 	sts	0x198E, r18	; 0x80198e <uarts+0x3>
    sei();
    58b4:	78 94       	sei

    return (c & 0xff);
    58b6:	90 e0       	ldi	r25, 0x00	; 0
    58b8:	08 95       	ret
{
    uint8_t c;

    if (uart >= UARTS)
	{
        return(EOF);
    58ba:	8f ef       	ldi	r24, 0xFF	; 255
    58bc:	9f ef       	ldi	r25, 0xFF	; 255
        uarts[uart].rx_tail = 0;
    uarts[uart].rx_count--;
    sei();

    return (c & 0xff);
}
    58be:	08 95       	ret

000058c0 <uart_rx_byte>:
///
/// @param[in] uart: uart number.
///
/// @return  Character.
int uart_rx_byte(uint8_t uart)
{
    58c0:	d9 df       	rcall	.-78     	; 0x5874 <uart_get_tail>
    58c2:	99 27       	eor	r25, r25
    58c4:	08 95       	ret

000058c6 <uart_tx_byte>:
    58c6:	61 11       	cpse	r22, r1
    58c8:	09 c0       	rjmp	.+18     	; 0x58dc <uart_tx_byte+0x16>
    58ca:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    58ce:	25 ff       	sbrs	r18, 5
    58d0:	fc cf       	rjmp	.-8      	; 0x58ca <uart_tx_byte+0x4>
    58d2:	28 2f       	mov	r18, r24
    58d4:	2f 77       	andi	r18, 0x7F	; 127
    58d6:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    58da:	08 95       	ret
    58dc:	61 30       	cpi	r22, 0x01	; 1
    58de:	49 f4       	brne	.+18     	; 0x58f2 <uart_tx_byte+0x2c>
    58e0:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    58e4:	25 ff       	sbrs	r18, 5
    58e6:	fc cf       	rjmp	.-8      	; 0x58e0 <uart_tx_byte+0x1a>
    58e8:	28 2f       	mov	r18, r24
    58ea:	2f 77       	andi	r18, 0x7F	; 127
    58ec:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    58f0:	08 95       	ret
    58f2:	8f ef       	ldi	r24, 0xFF	; 255
    58f4:	9f ef       	ldi	r25, 0xFF	; 255
    58f6:	08 95       	ret

000058f8 <uart_getchar>:
    58f8:	cf 93       	push	r28
    58fa:	81 11       	cpse	r24, r1
    58fc:	0f c0       	rjmp	.+30     	; 0x591c <uart_getchar+0x24>
    58fe:	e0 df       	rcall	.-64     	; 0x58c0 <uart_rx_byte>
    5900:	c8 2f       	mov	r28, r24
    5902:	60 e0       	ldi	r22, 0x00	; 0
    5904:	90 e0       	ldi	r25, 0x00	; 0
    5906:	df df       	rcall	.-66     	; 0x58c6 <uart_tx_byte>
    5908:	cd 30       	cpi	r28, 0x0D	; 13
    590a:	29 f4       	brne	.+10     	; 0x5916 <uart_getchar+0x1e>
    590c:	60 e0       	ldi	r22, 0x00	; 0
    590e:	8a e0       	ldi	r24, 0x0A	; 10
    5910:	90 e0       	ldi	r25, 0x00	; 0
    5912:	d9 df       	rcall	.-78     	; 0x58c6 <uart_tx_byte>
    5914:	ca e0       	ldi	r28, 0x0A	; 10
    5916:	8c 2f       	mov	r24, r28
    5918:	90 e0       	ldi	r25, 0x00	; 0
    591a:	02 c0       	rjmp	.+4      	; 0x5920 <uart_getchar+0x28>
    591c:	8f ef       	ldi	r24, 0xFF	; 255
    591e:	9f ef       	ldi	r25, 0xFF	; 255
    5920:	cf 91       	pop	r28
    5922:	08 95       	ret

00005924 <uart0_getchar>:
    5924:	80 e0       	ldi	r24, 0x00	; 0
    5926:	e8 cf       	rjmp	.-48     	; 0x58f8 <uart_getchar>
    5928:	08 95       	ret

0000592a <uart_putchar>:
    592a:	1f 93       	push	r17
    592c:	cf 93       	push	r28
    592e:	df 93       	push	r29
    5930:	ec 01       	movw	r28, r24
    5932:	16 2f       	mov	r17, r22
    5934:	c8 df       	rcall	.-112    	; 0x58c6 <uart_tx_byte>
    5936:	ca 30       	cpi	r28, 0x0A	; 10
    5938:	d1 05       	cpc	r29, r1
    593a:	21 f4       	brne	.+8      	; 0x5944 <uart_putchar+0x1a>
    593c:	61 2f       	mov	r22, r17
    593e:	8d e0       	ldi	r24, 0x0D	; 13
    5940:	90 e0       	ldi	r25, 0x00	; 0
    5942:	c1 df       	rcall	.-126    	; 0x58c6 <uart_tx_byte>
    5944:	ce 01       	movw	r24, r28
    5946:	df 91       	pop	r29
    5948:	cf 91       	pop	r28
    594a:	1f 91       	pop	r17
    594c:	08 95       	ret

0000594e <uart0_putchar>:
    594e:	cf 93       	push	r28
    5950:	df 93       	push	r29
    5952:	ec 01       	movw	r28, r24
    5954:	60 e0       	ldi	r22, 0x00	; 0
    5956:	70 e0       	ldi	r23, 0x00	; 0
    5958:	e8 df       	rcall	.-48     	; 0x592a <uart_putchar>
    595a:	ce 01       	movw	r24, r28
    595c:	df 91       	pop	r29
    595e:	cf 91       	pop	r28
    5960:	08 95       	ret

00005962 <uart_keyhit>:
    5962:	7c cf       	rjmp	.-264    	; 0x585c <uart_rx_count>
    5964:	08 95       	ret

00005966 <SPI0_Speed>:
/// @brief  Return saved SPI mode as set by SPI0_Mode().
/// @return  saved mode.
int SPI0_Get_Mode( void )
{
    return(SPI0_Mode_value);
}
    5966:	cf 92       	push	r12
    5968:	df 92       	push	r13
    596a:	ef 92       	push	r14
    596c:	ff 92       	push	r15
    596e:	6b 01       	movw	r12, r22
    5970:	7c 01       	movw	r14, r24
    5972:	80 91 12 17 	lds	r24, 0x1712	; 0x801712 <SPI0_Speed_value>
    5976:	90 91 13 17 	lds	r25, 0x1713	; 0x801713 <SPI0_Speed_value+0x1>
    597a:	a0 91 14 17 	lds	r26, 0x1714	; 0x801714 <SPI0_Speed_value+0x2>
    597e:	b0 91 15 17 	lds	r27, 0x1715	; 0x801715 <SPI0_Speed_value+0x3>
    5982:	8c 15       	cp	r24, r12
    5984:	9d 05       	cpc	r25, r13
    5986:	ae 05       	cpc	r26, r14
    5988:	bf 05       	cpc	r27, r15
    598a:	09 f4       	brne	.+2      	; 0x598e <SPI0_Speed+0x28>
    598c:	4e c0       	rjmp	.+156    	; 0x5a2a <SPI0_Speed+0xc4>
    598e:	60 e0       	ldi	r22, 0x00	; 0
    5990:	7d e2       	ldi	r23, 0x2D	; 45
    5992:	81 e3       	ldi	r24, 0x31	; 49
    5994:	91 e0       	ldi	r25, 0x01	; 1
    5996:	a7 01       	movw	r20, r14
    5998:	96 01       	movw	r18, r12
    599a:	0e 94 97 e4 	call	0x1c92e	; 0x1c92e <__udivmodsi4>
    599e:	20 38       	cpi	r18, 0x80	; 128
    59a0:	31 05       	cpc	r19, r1
    59a2:	41 05       	cpc	r20, r1
    59a4:	51 05       	cpc	r21, r1
    59a6:	28 f4       	brcc	.+10     	; 0x59b2 <SPI0_Speed+0x4c>
    59a8:	20 34       	cpi	r18, 0x40	; 64
    59aa:	31 05       	cpc	r19, r1
    59ac:	41 05       	cpc	r20, r1
    59ae:	51 05       	cpc	r21, r1
    59b0:	30 f0       	brcs	.+12     	; 0x59be <SPI0_Speed+0x58>
    59b2:	8d b5       	in	r24, 0x2d	; 45
    59b4:	8e 7f       	andi	r24, 0xFE	; 254
    59b6:	8d bd       	out	0x2d, r24	; 45
    59b8:	8c b5       	in	r24, 0x2c	; 44
    59ba:	82 60       	ori	r24, 0x02	; 2
    59bc:	1b c0       	rjmp	.+54     	; 0x59f4 <SPI0_Speed+0x8e>
    59be:	8d b5       	in	r24, 0x2d	; 45
    59c0:	20 32       	cpi	r18, 0x20	; 32
    59c2:	31 05       	cpc	r19, r1
    59c4:	41 05       	cpc	r20, r1
    59c6:	51 05       	cpc	r21, r1
    59c8:	28 f0       	brcs	.+10     	; 0x59d4 <SPI0_Speed+0x6e>
    59ca:	81 60       	ori	r24, 0x01	; 1
    59cc:	8d bd       	out	0x2d, r24	; 45
    59ce:	8c b5       	in	r24, 0x2c	; 44
    59d0:	82 60       	ori	r24, 0x02	; 2
    59d2:	1f c0       	rjmp	.+62     	; 0x5a12 <SPI0_Speed+0xac>
    59d4:	20 31       	cpi	r18, 0x10	; 16
    59d6:	31 05       	cpc	r19, r1
    59d8:	41 05       	cpc	r20, r1
    59da:	51 05       	cpc	r21, r1
    59dc:	10 f0       	brcs	.+4      	; 0x59e2 <SPI0_Speed+0x7c>
    59de:	8e 7f       	andi	r24, 0xFE	; 254
    59e0:	06 c0       	rjmp	.+12     	; 0x59ee <SPI0_Speed+0x88>
    59e2:	28 30       	cpi	r18, 0x08	; 8
    59e4:	31 05       	cpc	r19, r1
    59e6:	41 05       	cpc	r20, r1
    59e8:	51 05       	cpc	r21, r1
    59ea:	40 f0       	brcs	.+16     	; 0x59fc <SPI0_Speed+0x96>
    59ec:	81 60       	ori	r24, 0x01	; 1
    59ee:	8d bd       	out	0x2d, r24	; 45
    59f0:	8c b5       	in	r24, 0x2c	; 44
    59f2:	8d 7f       	andi	r24, 0xFD	; 253
    59f4:	8c bd       	out	0x2c, r24	; 44
    59f6:	8c b5       	in	r24, 0x2c	; 44
    59f8:	81 60       	ori	r24, 0x01	; 1
    59fa:	0e c0       	rjmp	.+28     	; 0x5a18 <SPI0_Speed+0xb2>
    59fc:	24 30       	cpi	r18, 0x04	; 4
    59fe:	31 05       	cpc	r19, r1
    5a00:	41 05       	cpc	r20, r1
    5a02:	51 05       	cpc	r21, r1
    5a04:	10 f0       	brcs	.+4      	; 0x5a0a <SPI0_Speed+0xa4>
    5a06:	8e 7f       	andi	r24, 0xFE	; 254
    5a08:	01 c0       	rjmp	.+2      	; 0x5a0c <SPI0_Speed+0xa6>
    5a0a:	81 60       	ori	r24, 0x01	; 1
    5a0c:	8d bd       	out	0x2d, r24	; 45
    5a0e:	8c b5       	in	r24, 0x2c	; 44
    5a10:	8d 7f       	andi	r24, 0xFD	; 253
    5a12:	8c bd       	out	0x2c, r24	; 44
    5a14:	8c b5       	in	r24, 0x2c	; 44
    5a16:	8e 7f       	andi	r24, 0xFE	; 254
    5a18:	8c bd       	out	0x2c, r24	; 44
    5a1a:	c0 92 12 17 	sts	0x1712, r12	; 0x801712 <SPI0_Speed_value>
    5a1e:	d0 92 13 17 	sts	0x1713, r13	; 0x801713 <SPI0_Speed_value+0x1>
    5a22:	e0 92 14 17 	sts	0x1714, r14	; 0x801714 <SPI0_Speed_value+0x2>
    5a26:	f0 92 15 17 	sts	0x1715, r15	; 0x801715 <SPI0_Speed_value+0x3>
    5a2a:	ff 90       	pop	r15
    5a2c:	ef 90       	pop	r14
    5a2e:	df 90       	pop	r13
    5a30:	cf 90       	pop	r12
    5a32:	08 95       	ret

00005a34 <SPI0_Mode>:
    5a34:	cf 93       	push	r28
    5a36:	df 93       	push	r29
    5a38:	00 d0       	rcall	.+0      	; 0x5a3a <SPI0_Mode+0x6>
    5a3a:	00 d0       	rcall	.+0      	; 0x5a3c <SPI0_Mode+0x8>
    5a3c:	1f 92       	push	r1
    5a3e:	ec 01       	movw	r28, r24
    5a40:	81 30       	cpi	r24, 0x01	; 1
    5a42:	91 05       	cpc	r25, r1
    5a44:	71 f0       	breq	.+28     	; 0x5a62 <SPI0_Mode+0x2e>
    5a46:	2c f4       	brge	.+10     	; 0x5a52 <SPI0_Mode+0x1e>
    5a48:	89 2b       	or	r24, r25
    5a4a:	c1 f4       	brne	.+48     	; 0x5a7c <SPI0_Mode+0x48>
    5a4c:	8c b5       	in	r24, 0x2c	; 44
    5a4e:	87 7f       	andi	r24, 0xF7	; 247
    5a50:	11 c0       	rjmp	.+34     	; 0x5a74 <SPI0_Mode+0x40>
    5a52:	82 30       	cpi	r24, 0x02	; 2
    5a54:	91 05       	cpc	r25, r1
    5a56:	61 f0       	breq	.+24     	; 0x5a70 <SPI0_Mode+0x3c>
    5a58:	03 97       	sbiw	r24, 0x03	; 3
    5a5a:	81 f4       	brne	.+32     	; 0x5a7c <SPI0_Mode+0x48>
    5a5c:	8c b5       	in	r24, 0x2c	; 44
    5a5e:	88 60       	ori	r24, 0x08	; 8
    5a60:	02 c0       	rjmp	.+4      	; 0x5a66 <SPI0_Mode+0x32>
    5a62:	8c b5       	in	r24, 0x2c	; 44
    5a64:	87 7f       	andi	r24, 0xF7	; 247
    5a66:	8c bd       	out	0x2c, r24	; 44
    5a68:	8c b5       	in	r24, 0x2c	; 44
    5a6a:	84 60       	ori	r24, 0x04	; 4
    5a6c:	8c bd       	out	0x2c, r24	; 44
    5a6e:	12 c0       	rjmp	.+36     	; 0x5a94 <SPI0_Mode+0x60>
    5a70:	8c b5       	in	r24, 0x2c	; 44
    5a72:	88 60       	ori	r24, 0x08	; 8
    5a74:	8c bd       	out	0x2c, r24	; 44
    5a76:	8c b5       	in	r24, 0x2c	; 44
    5a78:	8b 7f       	andi	r24, 0xFB	; 251
    5a7a:	f8 cf       	rjmp	.-16     	; 0x5a6c <SPI0_Mode+0x38>
    5a7c:	ed b7       	in	r30, 0x3d	; 61
    5a7e:	fe b7       	in	r31, 0x3e	; 62
    5a80:	d5 83       	std	Z+5, r29	; 0x05
    5a82:	c4 83       	std	Z+4, r28	; 0x04
    5a84:	8a e2       	ldi	r24, 0x2A	; 42
    5a86:	94 e0       	ldi	r25, 0x04	; 4
    5a88:	a0 e0       	ldi	r26, 0x00	; 0
    5a8a:	81 83       	std	Z+1, r24	; 0x01
    5a8c:	92 83       	std	Z+2, r25	; 0x02
    5a8e:	a3 83       	std	Z+3, r26	; 0x03
    5a90:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    5a94:	d0 93 11 17 	sts	0x1711, r29	; 0x801711 <__data_end+0x1>
    5a98:	c0 93 10 17 	sts	0x1710, r28	; 0x801710 <__data_end>
    5a9c:	cd b7       	in	r28, 0x3d	; 61
    5a9e:	de b7       	in	r29, 0x3e	; 62
    5aa0:	25 96       	adiw	r28, 0x05	; 5
    5aa2:	e2 e0       	ldi	r30, 0x02	; 2
    5aa4:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__epilogue_restores__+0x20>

00005aa8 <SPI0_TXRX_Byte>:
/// @param[in] Data: Data to send.
///
/// @return  Data received.
uint8_t SPI0_TXRX_Byte(uint8_t Data)
{
    SPDR = Data;                                  // Transmit
    5aa8:	8e bd       	out	0x2e, r24	; 46

    while( !BIT_TST(SPSR,SPIF) )                  // Wait for send
    5aaa:	0d b4       	in	r0, 0x2d	; 45
    5aac:	07 fe       	sbrs	r0, 7
    5aae:	fd cf       	rjmp	.-6      	; 0x5aaa <SPI0_TXRX_Byte+0x2>
        ;

    return (SPDR);                                // Received Data
    5ab0:	8e b5       	in	r24, 0x2e	; 46
}
    5ab2:	08 95       	ret

00005ab4 <SPI0_Init>:

///@brief Initialize SPI0 device.
/// See Atmel App Note AVR151
/// Set default speed, IO pins and mode.
void SPI0_Init(uint32_t speed)
{
    5ab4:	cf 92       	push	r12
    5ab6:	df 92       	push	r13
    5ab8:	ef 92       	push	r14
    5aba:	ff 92       	push	r15
    5abc:	cf 93       	push	r28
    5abe:	df 93       	push	r29
    5ac0:	1f 92       	push	r1
    5ac2:	cd b7       	in	r28, 0x3d	; 61
    5ac4:	de b7       	in	r29, 0x3e	; 62
    5ac6:	6b 01       	movw	r12, r22
    5ac8:	7c 01       	movw	r14, r24
	printf("Port B DDR:   0x%02x\n", (int) GPIO_PORT_DDR_RD(GPIO_B));
	printf("Port B LATCH: 0x%02x\n", (int) GPIO_PORT_LATCH_RD(GPIO_B));
	printf("Port B PINS:  0x%02x\n", (int) GPIO_PORT_LATCH_RD(GPIO_B));
#endif

	SPCR = 0;				// Clear SPCR in case we are not called after RESET
    5aca:	1c bc       	out	0x2c, r1	; 44

    GPIO_PIN_HI(SCK);       // SCK Output
    5acc:	2f 9a       	sbi	0x05, 7	; 5
    5ace:	27 9a       	sbi	0x04, 7	; 4
    GPIO_PIN_HI(MOSI);                                  // MOSI Output
    5ad0:	2d 9a       	sbi	0x05, 5	; 5
    5ad2:	25 9a       	sbi	0x04, 5	; 4
    GPIO_PIN_FLOAT(MISO);   // MISO Input, no pull-up
    5ad4:	26 98       	cbi	0x04, 6	; 4

	// Warning *** MSTR MUST be set BEFORE SPE!!!! *** otherwise SS will NOT behave as an output
	GPIO_PIN_LOW(SS); 		// SS Output must be HI prevent slave mode from getting set while initializing
    5ad6:	2c 98       	cbi	0x05, 4	; 5
    5ad8:	24 9a       	sbi	0x04, 4	; 4
    BIT_SET(SPCR, MSTR);    // Master Mode
    5ada:	8c b5       	in	r24, 0x2c	; 44
    5adc:	80 61       	ori	r24, 0x10	; 16
    5ade:	8c bd       	out	0x2c, r24	; 44
    BIT_SET(SPCR, SPE);     // Enable SPI
    5ae0:	8c b5       	in	r24, 0x2c	; 44
    5ae2:	80 64       	ori	r24, 0x40	; 64
    5ae4:	8c bd       	out	0x2c, r24	; 44

	// SPI Clear any pending interrupt flags
	D = SPSR;
    5ae6:	8d b5       	in	r24, 0x2d	; 45
    5ae8:	89 83       	std	Y+1, r24	; 0x01
	D = SPDR;
    5aea:	8e b5       	in	r24, 0x2e	; 46
    5aec:	89 83       	std	Y+1, r24	; 0x01

	/// Set SPI clock mode 0 
    ///  SPI Mode     CPOL    CPHA            Sample
    ///  0    0       0       Leading (Rising)   Edge
    SPI0_Mode(0);
    5aee:	80 e0       	ldi	r24, 0x00	; 0
    5af0:	90 e0       	ldi	r25, 0x00	; 0
    5af2:	a0 df       	rcall	.-192    	; 0x5a34 <SPI0_Mode>

	// Set SPI clock speed
    SPI0_Speed(speed);
    5af4:	c7 01       	movw	r24, r14
    5af6:	b6 01       	movw	r22, r12

    SPI0_TXRX_Byte(0xff);	// Send dummy 0xFF
    5af8:	36 df       	rcall	.-404    	; 0x5966 <SPI0_Speed>
    5afa:	8f ef       	ldi	r24, 0xFF	; 255
    5afc:	d5 df       	rcall	.-86     	; 0x5aa8 <SPI0_TXRX_Byte>
	SPI0_Init_state = 1;

}
    5afe:	0f 90       	pop	r0
    5b00:	df 91       	pop	r29
    5b02:	cf 91       	pop	r28
    5b04:	ff 90       	pop	r15
    5b06:	ef 90       	pop	r14
    5b08:	df 90       	pop	r13
    5b0a:	cf 90       	pop	r12
    5b0c:	08 95       	ret

00005b0e <SPI0_TX>:
/// @brief HSPI write using FIFO
/// @param[in] *data: transmit buffer
/// @param[in] count: number of bytes to write
/// @return  void
void SPI0_TX(uint8_t *data, int count)
{
    5b0e:	0f 93       	push	r16
    5b10:	1f 93       	push	r17
    5b12:	cf 93       	push	r28
    5b14:	df 93       	push	r29
    5b16:	8c 01       	movw	r16, r24
    5b18:	eb 01       	movw	r28, r22

    while(count > 0)
    5b1a:	1c 16       	cp	r1, r28
    5b1c:	1d 06       	cpc	r1, r29
    5b1e:	34 f4       	brge	.+12     	; 0x5b2c <SPI0_TX+0x1e>
    {
		SPI0_TXRX_Byte(*data);
    5b20:	f8 01       	movw	r30, r16
    5b22:	81 91       	ld	r24, Z+
    5b24:	8f 01       	movw	r16, r30
    5b26:	c0 df       	rcall	.-128    	; 0x5aa8 <SPI0_TXRX_Byte>
		++data;
		--count;
    5b28:	21 97       	sbiw	r28, 0x01	; 1
    5b2a:	f7 cf       	rjmp	.-18     	; 0x5b1a <SPI0_TX+0xc>
	}
}
    5b2c:	df 91       	pop	r29
    5b2e:	cf 91       	pop	r28
    5b30:	1f 91       	pop	r17
    5b32:	0f 91       	pop	r16
    5b34:	08 95       	ret

00005b36 <SPI0_TXRX>:
/// @param[in] *data: transmit / receive buffer
/// @param[in] count: number of bytes to write / read
/// @return  void

void SPI0_TXRX(uint8_t *data, int count)
{
    5b36:	0f 93       	push	r16
    5b38:	1f 93       	push	r17
    5b3a:	cf 93       	push	r28
    5b3c:	df 93       	push	r29
    5b3e:	8c 01       	movw	r16, r24
    5b40:	eb 01       	movw	r28, r22

    while(count > 0)
    5b42:	1c 16       	cp	r1, r28
    5b44:	1d 06       	cpc	r1, r29
    5b46:	44 f4       	brge	.+16     	; 0x5b58 <SPI0_TXRX+0x22>
    {
		*data = SPI0_TXRX_Byte(*data);
    5b48:	f8 01       	movw	r30, r16
    5b4a:	80 81       	ld	r24, Z
    5b4c:	ad df       	rcall	.-166    	; 0x5aa8 <SPI0_TXRX_Byte>
    5b4e:	f8 01       	movw	r30, r16
    5b50:	81 93       	st	Z+, r24
    5b52:	8f 01       	movw	r16, r30
		++data;
		--count;
    5b54:	21 97       	sbiw	r28, 0x01	; 1
    5b56:	f5 cf       	rjmp	.-22     	; 0x5b42 <SPI0_TXRX+0xc>
	}
}
    5b58:	df 91       	pop	r29
    5b5a:	cf 91       	pop	r28
    5b5c:	1f 91       	pop	r17
    5b5e:	0f 91       	pop	r16
    5b60:	08 95       	ret

00005b62 <SPI0_RX>:
/// @brief HSPI read using FIFO
/// @param[in] *data: receive buffer
/// @param[in] count: number of bytes to read
/// @return  void
void SPI0_RX(uint8_t *data, int count)
{
    5b62:	0f 93       	push	r16
    5b64:	1f 93       	push	r17
    5b66:	cf 93       	push	r28
    5b68:	df 93       	push	r29
    5b6a:	8c 01       	movw	r16, r24
    5b6c:	eb 01       	movw	r28, r22

    while(count > 0)
    5b6e:	1c 16       	cp	r1, r28
    5b70:	1d 06       	cpc	r1, r29
    5b72:	3c f4       	brge	.+14     	; 0x5b82 <SPI0_RX+0x20>
    {
		*data = SPI0_TXRX_Byte(0xff);
    5b74:	8f ef       	ldi	r24, 0xFF	; 255
    5b76:	98 df       	rcall	.-208    	; 0x5aa8 <SPI0_TXRX_Byte>
    5b78:	f8 01       	movw	r30, r16
    5b7a:	81 93       	st	Z+, r24
    5b7c:	8f 01       	movw	r16, r30
		++data;
		--count;
    5b7e:	21 97       	sbiw	r28, 0x01	; 1
    5b80:	f6 cf       	rjmp	.-20     	; 0x5b6e <SPI0_RX+0xc>
	}
}
    5b82:	df 91       	pop	r29
    5b84:	cf 91       	pop	r28
    5b86:	1f 91       	pop	r17
    5b88:	0f 91       	pop	r16
    5b8a:	08 95       	ret

00005b8c <TWI_Init>:
///
///@return void.
void TWI_Init(const uint8_t Prescale, const uint8_t BitLength)
{

    GPIO_PIN_LATCH_HI(SCL);                   // Pull Up on
    5b8c:	40 9a       	sbi	0x08, 0	; 8
    GPIO_PIN_LATCH_HI(SDA);                   // Pull Up on
    5b8e:	41 9a       	sbi	0x08, 1	; 8

    BIT_SET(TWCR,TWEN);
    5b90:	ec eb       	ldi	r30, 0xBC	; 188
    5b92:	f0 e0       	ldi	r31, 0x00	; 0
    5b94:	90 81       	ld	r25, Z
    5b96:	94 60       	ori	r25, 0x04	; 4
    5b98:	90 83       	st	Z, r25

    TWSR  = Prescale;
    5b9a:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    TWBR  = BitLength;
    5b9e:	60 93 b8 00 	sts	0x00B8, r22	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    5ba2:	08 95       	ret

00005ba4 <TWI_StopTransmission>:


/** @brief Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
inline void TWI_StopTransmission(void)
{
    TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    5ba4:	84 e9       	ldi	r24, 0x94	; 148
    5ba6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5baa:	08 95       	ret

00005bac <TWI_StartTransmission>:
    for (;;)
    {
        bool     BusCaptured = false;
        uint16_t TimeoutRemaining;

        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    5bac:	94 ea       	ldi	r25, 0xA4	; 164
    5bae:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5bb2:	24 e6       	ldi	r18, 0x64	; 100
    5bb4:	62 9f       	mul	r22, r18
    5bb6:	b0 01       	movw	r22, r0
    5bb8:	11 24       	eor	r1, r1
    5bba:	61 50       	subi	r22, 0x01	; 1
    5bbc:	71 09       	sbc	r23, r1

        TimeoutRemaining = (TimeoutMS * 100);
        while (TimeoutRemaining-- && !(BusCaptured))
    5bbe:	9b 01       	movw	r18, r22
///@return TWI error value on fail.
uint8_t TWI_StartTransmission(const uint8_t SlaveAddress, const uint8_t TimeoutMS)
{
    for (;;)
    {
        bool     BusCaptured = false;
    5bc0:	40 e0       	ldi	r20, 0x00	; 0
    5bc2:	50 e0       	ldi	r21, 0x00	; 0
                    case TW_START:
                    case TW_REP_START:
                        BusCaptured = true;
                        break;
                    case TW_MT_ARB_LOST:
                        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    5bc4:	e4 ea       	ldi	r30, 0xA4	; 164
        uint16_t TimeoutRemaining;

        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));

        TimeoutRemaining = (TimeoutMS * 100);
        while (TimeoutRemaining-- && !(BusCaptured))
    5bc6:	2f 3f       	cpi	r18, 0xFF	; 255
    5bc8:	9f ef       	ldi	r25, 0xFF	; 255
    5bca:	39 07       	cpc	r19, r25
    5bcc:	41 f1       	breq	.+80     	; 0x5c1e <TWI_StartTransmission+0x72>
    5bce:	41 15       	cp	r20, r1
    5bd0:	51 05       	cpc	r21, r1
    5bd2:	f1 f4       	brne	.+60     	; 0x5c10 <TWI_StartTransmission+0x64>
        {
            if (TWCR & (1 << TWINT))
    5bd4:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5bd8:	97 ff       	sbrs	r25, 7
    5bda:	13 c0       	rjmp	.+38     	; 0x5c02 <TWI_StartTransmission+0x56>
            {
                switch (TWSR & TW_STATUS_MASK)
    5bdc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5be0:	98 7f       	andi	r25, 0xF8	; 248
    5be2:	90 31       	cpi	r25, 0x10	; 16
    5be4:	61 f0       	breq	.+24     	; 0x5bfe <TWI_StartTransmission+0x52>
    5be6:	98 33       	cpi	r25, 0x38	; 56
    5be8:	39 f0       	breq	.+14     	; 0x5bf8 <TWI_StartTransmission+0x4c>
    5bea:	98 30       	cpi	r25, 0x08	; 8
    5bec:	41 f0       	breq	.+16     	; 0x5bfe <TWI_StartTransmission+0x52>
                        break;
                    case TW_MT_ARB_LOST:
                        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
                        continue;
                    default:
                        TWCR = (1 << TWEN);
    5bee:	84 e0       	ldi	r24, 0x04	; 4
    5bf0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
                        return TWI_ERROR_BusFault;
    5bf4:	81 e0       	ldi	r24, 0x01	; 1
    5bf6:	08 95       	ret
                    case TW_START:
                    case TW_REP_START:
                        BusCaptured = true;
                        break;
                    case TW_MT_ARB_LOST:
                        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    5bf8:	e0 93 bc 00 	sts	0x00BC, r30	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
                        continue;
    5bfc:	06 c0       	rjmp	.+12     	; 0x5c0a <TWI_StartTransmission+0x5e>
            {
                switch (TWSR & TW_STATUS_MASK)
                {
                    case TW_START:
                    case TW_REP_START:
                        BusCaptured = true;
    5bfe:	41 e0       	ldi	r20, 0x01	; 1
    5c00:	50 e0       	ldi	r21, 0x00	; 0
    5c02:	92 e4       	ldi	r25, 0x42	; 66
    5c04:	9a 95       	dec	r25
    5c06:	f1 f7       	brne	.-4      	; 0x5c04 <TWI_StartTransmission+0x58>
    5c08:	00 c0       	rjmp	.+0      	; 0x5c0a <TWI_StartTransmission+0x5e>
    5c0a:	21 50       	subi	r18, 0x01	; 1
    5c0c:	31 09       	sbc	r19, r1
    5c0e:	db cf       	rjmp	.-74     	; 0x5bc6 <TWI_StartTransmission+0x1a>
            }

            _delay_us(10);
        }

        if (!(TimeoutRemaining))
    5c10:	23 2b       	or	r18, r19
    5c12:	29 f4       	brne	.+10     	; 0x5c1e <TWI_StartTransmission+0x72>
        {
            TWCR = (1 << TWEN);
    5c14:	84 e0       	ldi	r24, 0x04	; 4
    5c16:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
            return TWI_ERROR_BusCaptureTimeout;
    5c1a:	82 e0       	ldi	r24, 0x02	; 2
    5c1c:	08 95       	ret
        }

        TWDR = SlaveAddress;
    5c1e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
        TWCR = ((1 << TWINT) | (1 << TWEN));
    5c22:	84 e8       	ldi	r24, 0x84	; 132
    5c24:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

        TimeoutRemaining = (TimeoutMS * 100);
        while (TimeoutRemaining--)
    5c28:	6f 3f       	cpi	r22, 0xFF	; 255
    5c2a:	8f ef       	ldi	r24, 0xFF	; 255
    5c2c:	78 07       	cpc	r23, r24
    5c2e:	71 f0       	breq	.+28     	; 0x5c4c <TWI_StartTransmission+0xa0>
        {
            if (TWCR & (1 << TWINT))
    5c30:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5c34:	cb 01       	movw	r24, r22
    5c36:	01 97       	sbiw	r24, 0x01	; 1
    5c38:	27 fd       	sbrc	r18, 7
    5c3a:	06 c0       	rjmp	.+12     	; 0x5c48 <TWI_StartTransmission+0x9c>
    5c3c:	22 e4       	ldi	r18, 0x42	; 66
    5c3e:	2a 95       	dec	r18
    5c40:	f1 f7       	brne	.-4      	; 0x5c3e <TWI_StartTransmission+0x92>
    5c42:	00 c0       	rjmp	.+0      	; 0x5c44 <TWI_StartTransmission+0x98>
    5c44:	bc 01       	movw	r22, r24
    5c46:	f0 cf       	rjmp	.-32     	; 0x5c28 <TWI_StartTransmission+0x7c>
                break;

            _delay_us(10);
        }

        if (!(TimeoutRemaining))
    5c48:	67 2b       	or	r22, r23
    5c4a:	61 f0       	breq	.+24     	; 0x5c64 <TWI_StartTransmission+0xb8>
            return TWI_ERROR_SlaveResponseTimeout;

        switch (TWSR & TW_STATUS_MASK)
    5c4c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5c50:	88 7f       	andi	r24, 0xF8	; 248
    5c52:	88 31       	cpi	r24, 0x18	; 24
    5c54:	49 f0       	breq	.+18     	; 0x5c68 <TWI_StartTransmission+0xbc>
    5c56:	80 34       	cpi	r24, 0x40	; 64
    5c58:	39 f0       	breq	.+14     	; 0x5c68 <TWI_StartTransmission+0xbc>
        {
            case TW_MT_SLA_ACK:
            case TW_MR_SLA_ACK:
                return TWI_ERROR_NoError;
            default:
                TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    5c5a:	84 e9       	ldi	r24, 0x94	; 148
    5c5c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
                return TWI_ERROR_SlaveNotReady;
    5c60:	84 e0       	ldi	r24, 0x04	; 4
    5c62:	08 95       	ret

            _delay_us(10);
        }

        if (!(TimeoutRemaining))
            return TWI_ERROR_SlaveResponseTimeout;
    5c64:	83 e0       	ldi	r24, 0x03	; 3
    5c66:	08 95       	ret

        switch (TWSR & TW_STATUS_MASK)
        {
            case TW_MT_SLA_ACK:
            case TW_MR_SLA_ACK:
                return TWI_ERROR_NoError;
    5c68:	80 e0       	ldi	r24, 0x00	; 0
            default:
                TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
                return TWI_ERROR_SlaveNotReady;
        }
    }
}
    5c6a:	08 95       	ret

00005c6c <TWI_SendByte>:
///
///@return 1 if Acknowledge.
///@return 0 on fail.
bool TWI_SendByte(const uint8_t Byte)
{
    TWDR = Byte;
    5c6c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    TWCR = ((1 << TWINT) | (1 << TWEN));
    5c70:	84 e8       	ldi	r24, 0x84	; 132
    5c72:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while (!(TWCR & (1 << TWINT)));
    5c76:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5c7a:	87 ff       	sbrs	r24, 7
    5c7c:	fc cf       	rjmp	.-8      	; 0x5c76 <TWI_SendByte+0xa>

    return ((TWSR & TW_STATUS_MASK) == TW_MT_DATA_ACK);
    5c7e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5c82:	98 7f       	andi	r25, 0xF8	; 248
    5c84:	21 e0       	ldi	r18, 0x01	; 1
    5c86:	30 e0       	ldi	r19, 0x00	; 0
    5c88:	98 32       	cpi	r25, 0x28	; 40
    5c8a:	11 f0       	breq	.+4      	; 0x5c90 <TWI_SendByte+0x24>
    5c8c:	20 e0       	ldi	r18, 0x00	; 0
    5c8e:	30 e0       	ldi	r19, 0x00	; 0
}
    5c90:	c9 01       	movw	r24, r18
    5c92:	08 95       	ret

00005c94 <TWI_ReceiveByte>:


bool TWI_ReceiveByte(uint8_t* const Byte,
const bool LastByte)
{
    5c94:	fc 01       	movw	r30, r24
    uint8_t TWCRMask;

    if (LastByte)
    5c96:	61 15       	cp	r22, r1
    5c98:	71 05       	cpc	r23, r1
    5c9a:	11 f4       	brne	.+4      	; 0x5ca0 <TWI_ReceiveByte+0xc>
        TWCRMask = ((1 << TWINT) | (1 << TWEN));
    else
        TWCRMask = ((1 << TWINT) | (1 << TWEN) | (1 << TWEA));
    5c9c:	94 ec       	ldi	r25, 0xC4	; 196
    5c9e:	01 c0       	rjmp	.+2      	; 0x5ca2 <TWI_ReceiveByte+0xe>
const bool LastByte)
{
    uint8_t TWCRMask;

    if (LastByte)
        TWCRMask = ((1 << TWINT) | (1 << TWEN));
    5ca0:	94 e8       	ldi	r25, 0x84	; 132
    else
        TWCRMask = ((1 << TWINT) | (1 << TWEN) | (1 << TWEA));

    TWCR = TWCRMask;
    5ca2:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while (!BIT_TST(TWCR, TWINT))
    5ca6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5caa:	87 ff       	sbrs	r24, 7
    5cac:	fc cf       	rjmp	.-8      	; 0x5ca6 <TWI_ReceiveByte+0x12>
        ;
    *Byte = TWDR;
    5cae:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5cb2:	80 83       	st	Z, r24

    uint8_t Status = (TWSR & TW_STATUS_MASK);
    5cb4:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5cb8:	28 7f       	andi	r18, 0xF8	; 248

    return ((LastByte) ? (Status == TW_MR_DATA_NACK) : (Status == TW_MR_DATA_ACK));
    5cba:	81 e0       	ldi	r24, 0x01	; 1
    5cbc:	90 e0       	ldi	r25, 0x00	; 0
    5cbe:	67 2b       	or	r22, r23
    5cc0:	19 f0       	breq	.+6      	; 0x5cc8 <TWI_ReceiveByte+0x34>
    5cc2:	28 35       	cpi	r18, 0x58	; 88
    5cc4:	19 f4       	brne	.+6      	; 0x5ccc <TWI_ReceiveByte+0x38>
    5cc6:	03 c0       	rjmp	.+6      	; 0x5cce <TWI_ReceiveByte+0x3a>
    5cc8:	20 35       	cpi	r18, 0x50	; 80
    5cca:	09 f0       	breq	.+2      	; 0x5cce <TWI_ReceiveByte+0x3a>
    5ccc:	80 e0       	ldi	r24, 0x00	; 0
}
    5cce:	08 95       	ret

00005cd0 <TWI_ReadPacket>:
const uint8_t TimeoutMS,
const uint8_t* InternalAddress,
uint8_t InternalAddressLen,
uint8_t* Buffer,
uint8_t Length)
{
    5cd0:	a0 e0       	ldi	r26, 0x00	; 0
    5cd2:	b0 e0       	ldi	r27, 0x00	; 0
    5cd4:	ee e6       	ldi	r30, 0x6E	; 110
    5cd6:	fe e2       	ldi	r31, 0x2E	; 46
    5cd8:	0c 94 20 e5 	jmp	0x1ca40	; 0x1ca40 <__prologue_saves__+0xe>
    5cdc:	f8 2e       	mov	r15, r24
    5cde:	b6 2e       	mov	r11, r22
    5ce0:	94 2e       	mov	r9, r20
    5ce2:	a5 2e       	mov	r10, r21
    5ce4:	c2 2f       	mov	r28, r18
    uint8_t ErrorCode;

    if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_WRITE,
    5ce6:	8e 7f       	andi	r24, 0xFE	; 254
    5ce8:	61 df       	rcall	.-318    	; 0x5bac <TWI_StartTransmission>
    5cea:	d8 2f       	mov	r29, r24
    5cec:	81 11       	cpse	r24, r1
    5cee:	2b c0       	rjmp	.+86     	; 0x5d46 <TWI_ReadPacket+0x76>
    5cf0:	c9 2c       	mov	r12, r9
    5cf2:	da 2c       	mov	r13, r10
        TimeoutMS)) == TWI_ERROR_NoError)
    {
        while (InternalAddressLen--)
    5cf4:	cc 23       	and	r28, r28
    5cf6:	39 f0       	breq	.+14     	; 0x5d06 <TWI_ReadPacket+0x36>
        {
            if (!(TWI_SendByte(*(InternalAddress++))))
    5cf8:	f6 01       	movw	r30, r12
    5cfa:	81 91       	ld	r24, Z+
    5cfc:	6f 01       	movw	r12, r30
    5cfe:	b6 df       	rcall	.-148    	; 0x5c6c <TWI_SendByte>
    5d00:	c1 50       	subi	r28, 0x01	; 1
    5d02:	89 2b       	or	r24, r25
    5d04:	b9 f7       	brne	.-18     	; 0x5cf4 <TWI_ReadPacket+0x24>
                ErrorCode = TWI_ERROR_SlaveNAK;
                break;
            }
        }

        if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_READ,
    5d06:	6b 2d       	mov	r22, r11
    5d08:	8f 2d       	mov	r24, r15
    5d0a:	81 60       	ori	r24, 0x01	; 1
    5d0c:	4f df       	rcall	.-354    	; 0x5bac <TWI_StartTransmission>
    5d0e:	d8 2f       	mov	r29, r24
    5d10:	81 11       	cpse	r24, r1
    5d12:	19 c0       	rjmp	.+50     	; 0x5d46 <TWI_ReadPacket+0x76>
    5d14:	cf ef       	ldi	r28, 0xFF	; 255
    5d16:	ce 0d       	add	r28, r14
            TimeoutMS)) == TWI_ERROR_NoError)
        {
            while (Length--)
    5d18:	cf 3f       	cpi	r28, 0xFF	; 255
    5d1a:	91 f0       	breq	.+36     	; 0x5d40 <TWI_ReadPacket+0x70>
            {
                if (!(TWI_ReceiveByte(Buffer++, (Length == 0))))
    5d1c:	78 01       	movw	r14, r16
    5d1e:	ff ef       	ldi	r31, 0xFF	; 255
    5d20:	ef 1a       	sub	r14, r31
    5d22:	ff 0a       	sbc	r15, r31
    5d24:	61 e0       	ldi	r22, 0x01	; 1
    5d26:	70 e0       	ldi	r23, 0x00	; 0
    5d28:	cc 23       	and	r28, r28
    5d2a:	11 f0       	breq	.+4      	; 0x5d30 <TWI_ReadPacket+0x60>
    5d2c:	60 e0       	ldi	r22, 0x00	; 0
    5d2e:	70 e0       	ldi	r23, 0x00	; 0
    5d30:	c8 01       	movw	r24, r16
    5d32:	b0 df       	rcall	.-160    	; 0x5c94 <TWI_ReceiveByte>
    5d34:	c1 50       	subi	r28, 0x01	; 1
    5d36:	89 2b       	or	r24, r25
    5d38:	11 f0       	breq	.+4      	; 0x5d3e <TWI_ReadPacket+0x6e>
    5d3a:	87 01       	movw	r16, r14
    5d3c:	ed cf       	rjmp	.-38     	; 0x5d18 <TWI_ReadPacket+0x48>
                {
                    ErrorCode = TWI_ERROR_SlaveNAK;
    5d3e:	d5 e0       	ldi	r29, 0x05	; 5


/** @brief Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
inline void TWI_StopTransmission(void)
{
    TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    5d40:	84 e9       	ldi	r24, 0x94	; 148
    5d42:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
            TWI_StopTransmission();
        }
    }

    return ErrorCode;
}
    5d46:	8d 2f       	mov	r24, r29
    5d48:	cd b7       	in	r28, 0x3d	; 61
    5d4a:	de b7       	in	r29, 0x3e	; 62
    5d4c:	eb e0       	ldi	r30, 0x0B	; 11
    5d4e:	0c 94 3c e5 	jmp	0x1ca78	; 0x1ca78 <__epilogue_restores__+0xe>

00005d52 <TWI_WritePacket>:
const uint8_t TimeoutMS,
const uint8_t* InternalAddress,
uint8_t InternalAddressLen,
const uint8_t* Buffer,
uint8_t Length)
{
    5d52:	a0 e0       	ldi	r26, 0x00	; 0
    5d54:	b0 e0       	ldi	r27, 0x00	; 0
    5d56:	ef ea       	ldi	r30, 0xAF	; 175
    5d58:	fe e2       	ldi	r31, 0x2E	; 46
    5d5a:	0c 94 22 e5 	jmp	0x1ca44	; 0x1ca44 <__prologue_saves__+0x12>
    5d5e:	b4 2e       	mov	r11, r20
    5d60:	f5 2e       	mov	r15, r21
    5d62:	c2 2f       	mov	r28, r18
    uint8_t ErrorCode;

    if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_WRITE,
    5d64:	8e 7f       	andi	r24, 0xFE	; 254
    5d66:	22 df       	rcall	.-444    	; 0x5bac <TWI_StartTransmission>
    5d68:	d8 2f       	mov	r29, r24
    5d6a:	81 11       	cpse	r24, r1
    5d6c:	1a c0       	rjmp	.+52     	; 0x5da2 <TWI_WritePacket+0x50>
    5d6e:	cb 2c       	mov	r12, r11
    5d70:	df 2c       	mov	r13, r15
        TimeoutMS)) == TWI_ERROR_NoError)
    {
        while (InternalAddressLen--)
    5d72:	cc 23       	and	r28, r28
    5d74:	41 f0       	breq	.+16     	; 0x5d86 <TWI_WritePacket+0x34>
        {
            if (!(TWI_SendByte(*(InternalAddress++))))
    5d76:	f6 01       	movw	r30, r12
    5d78:	81 91       	ld	r24, Z+
    5d7a:	6f 01       	movw	r12, r30
    5d7c:	77 df       	rcall	.-274    	; 0x5c6c <TWI_SendByte>
    5d7e:	c1 50       	subi	r28, 0x01	; 1
    5d80:	89 2b       	or	r24, r25
    5d82:	b9 f7       	brne	.-18     	; 0x5d72 <TWI_WritePacket+0x20>
            {
                ErrorCode = TWI_ERROR_SlaveNAK;
    5d84:	d5 e0       	ldi	r29, 0x05	; 5
    5d86:	68 01       	movw	r12, r16
                break;
            }
        }

        while (Length--)
    5d88:	ee 20       	and	r14, r14
    5d8a:	41 f0       	breq	.+16     	; 0x5d9c <TWI_WritePacket+0x4a>
        {
            if (!(TWI_SendByte(*(Buffer++))))
    5d8c:	f6 01       	movw	r30, r12
    5d8e:	81 91       	ld	r24, Z+
    5d90:	6f 01       	movw	r12, r30
    5d92:	6c df       	rcall	.-296    	; 0x5c6c <TWI_SendByte>
    5d94:	ea 94       	dec	r14
    5d96:	89 2b       	or	r24, r25
    5d98:	b9 f7       	brne	.-18     	; 0x5d88 <TWI_WritePacket+0x36>
            {
                ErrorCode = TWI_ERROR_SlaveNAK;
    5d9a:	d5 e0       	ldi	r29, 0x05	; 5


/** @brief Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
inline void TWI_StopTransmission(void)
{
    TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    5d9c:	84 e9       	ldi	r24, 0x94	; 148
    5d9e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

        TWI_StopTransmission();
    }

    return ErrorCode;
}
    5da2:	8d 2f       	mov	r24, r29
    5da4:	cd b7       	in	r28, 0x3d	; 61
    5da6:	de b7       	in	r29, 0x3e	; 62
    5da8:	e9 e0       	ldi	r30, 0x09	; 9
    5daa:	0c 94 3e e5 	jmp	0x1ca7c	; 0x1ca7c <__epilogue_restores__+0x12>

00005dae <__vector_26>:
  }

  SREG = sreg;
}

ISR(TWI_vect, ISR_BLOCK) {
    5dae:	1f 92       	push	r1
    5db0:	0f 92       	push	r0
    5db2:	0f b6       	in	r0, 0x3f	; 63
    5db4:	0f 92       	push	r0
    5db6:	11 24       	eor	r1, r1
    5db8:	0b b6       	in	r0, 0x3b	; 59
    5dba:	0f 92       	push	r0
    5dbc:	2f 93       	push	r18
    5dbe:	3f 93       	push	r19
    5dc0:	4f 93       	push	r20
    5dc2:	5f 93       	push	r21
    5dc4:	6f 93       	push	r22
    5dc6:	7f 93       	push	r23
    5dc8:	8f 93       	push	r24
    5dca:	9f 93       	push	r25
    5dcc:	af 93       	push	r26
    5dce:	bf 93       	push	r27
    5dd0:	ef 93       	push	r30
    5dd2:	ff 93       	push	r31

  uint8_t status = TW_STATUS;
    5dd4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5dd8:	88 7f       	andi	r24, 0xF8	; 248

  /* This interrupt should only fire if there is something to do. */
  assert(op != NULL);
    5dda:	e0 91 16 17 	lds	r30, 0x1716	; 0x801716 <op>
    5dde:	f0 91 17 17 	lds	r31, 0x1717	; 0x801717 <op+0x1>
    5de2:	30 97       	sbiw	r30, 0x00	; 0
    5de4:	09 f4       	brne	.+2      	; 0x5de8 <__vector_26+0x3a>
    5de6:	6f c0       	rjmp	.+222    	; 0x5ec6 <__vector_26+0x118>

  if ((op->address & _BV(0)) == TW_READ) {
    5de8:	90 81       	ld	r25, Z
    5dea:	90 ff       	sbrs	r25, 0
    5dec:	39 c0       	rjmp	.+114    	; 0x5e60 <__vector_26+0xb2>
    /* Master Receiver mode. */
    switch (status) {
    5dee:	80 34       	cpi	r24, 0x40	; 64
    5df0:	81 f0       	breq	.+32     	; 0x5e12 <__vector_26+0x64>
    5df2:	38 f4       	brcc	.+14     	; 0x5e02 <__vector_26+0x54>
    5df4:	80 31       	cpi	r24, 0x10	; 16
    5df6:	09 f4       	brne	.+2      	; 0x5dfa <__vector_26+0x4c>
    5df8:	45 c0       	rjmp	.+138    	; 0x5e84 <__vector_26+0xd6>
    5dfa:	88 33       	cpi	r24, 0x38	; 56
    5dfc:	09 f4       	brne	.+2      	; 0x5e00 <__vector_26+0x52>
    5dfe:	94 c0       	rjmp	.+296    	; 0x5f28 <__vector_26+0x17a>
    5e00:	36 c0       	rjmp	.+108    	; 0x5e6e <__vector_26+0xc0>
    5e02:	80 35       	cpi	r24, 0x50	; 80
    5e04:	59 f0       	breq	.+22     	; 0x5e1c <__vector_26+0x6e>
    5e06:	88 35       	cpi	r24, 0x58	; 88
    5e08:	f1 f0       	breq	.+60     	; 0x5e46 <__vector_26+0x98>
    5e0a:	88 34       	cpi	r24, 0x48	; 72
    5e0c:	09 f0       	breq	.+2      	; 0x5e10 <__vector_26+0x62>
    5e0e:	5b c0       	rjmp	.+182    	; 0x5ec6 <__vector_26+0x118>
    5e10:	54 c0       	rjmp	.+168    	; 0x5eba <__vector_26+0x10c>
      TWCR = TWCR_DEFAULT | _BV(TWINT) | _BV(TWSTA);
      break;

    /* SLA+R has been transmitted; ACK has been received. */
    case TW_MR_SLA_ACK:
      if (op->buflen == 1) {
    5e12:	81 81       	ldd	r24, Z+1	; 0x01
    5e14:	81 30       	cpi	r24, 0x01	; 1
    5e16:	09 f0       	breq	.+2      	; 0x5e1a <__vector_26+0x6c>
    5e18:	4a c0       	rjmp	.+148    	; 0x5eae <__vector_26+0x100>
    5e1a:	13 c0       	rjmp	.+38     	; 0x5e42 <__vector_26+0x94>
      txn->flags = I2C_TXN_DONE | I2C_TXN_ERR;
      goto next_txn;

    /* Data byte has been received; ACK has been returned. */
    case TW_MR_DATA_ACK:
      op->buf[op->bufpos++] = TWDR;
    5e1c:	a3 81       	ldd	r26, Z+3	; 0x03
    5e1e:	b4 81       	ldd	r27, Z+4	; 0x04
    5e20:	82 81       	ldd	r24, Z+2	; 0x02
    5e22:	91 e0       	ldi	r25, 0x01	; 1
    5e24:	98 0f       	add	r25, r24
    5e26:	92 83       	std	Z+2, r25	; 0x02
    5e28:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5e2c:	a8 0f       	add	r26, r24
    5e2e:	b1 1d       	adc	r27, r1
    5e30:	9c 93       	st	X, r25
      if (op->bufpos+1 == op->buflen) {
    5e32:	82 81       	ldd	r24, Z+2	; 0x02
    5e34:	21 81       	ldd	r18, Z+1	; 0x01
    5e36:	90 e0       	ldi	r25, 0x00	; 0
    5e38:	01 96       	adiw	r24, 0x01	; 1
    5e3a:	30 e0       	ldi	r19, 0x00	; 0
    5e3c:	82 17       	cp	r24, r18
    5e3e:	93 07       	cpc	r25, r19
    5e40:	b1 f5       	brne	.+108    	; 0x5eae <__vector_26+0x100>
        TWCR = TWCR_NOT_ACK;
    5e42:	85 e8       	ldi	r24, 0x85	; 133
    5e44:	7c c0       	rjmp	.+248    	; 0x5f3e <__vector_26+0x190>
      }
      break;

    /* Data byte has been received; NOT ACK has been returned. */
    case TW_MR_DATA_NACK:
      op->buf[op->bufpos++] = TWDR;
    5e46:	83 81       	ldd	r24, Z+3	; 0x03
    5e48:	94 81       	ldd	r25, Z+4	; 0x04
    5e4a:	22 81       	ldd	r18, Z+2	; 0x02
    5e4c:	31 e0       	ldi	r19, 0x01	; 1
    5e4e:	32 0f       	add	r19, r18
    5e50:	32 83       	std	Z+2, r19	; 0x02
    5e52:	30 91 bb 00 	lds	r19, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5e56:	fc 01       	movw	r30, r24
    5e58:	e2 0f       	add	r30, r18
    5e5a:	f1 1d       	adc	r31, r1
    5e5c:	30 83       	st	Z, r19
      goto next_op;
    5e5e:	35 c0       	rjmp	.+106    	; 0x5eca <__vector_26+0x11c>
    default:
      assert(0 && "unknown status in master receiver mode");
    }
  } else {
    /* Master Transmitter mode. */
    switch (status) {
    5e60:	80 32       	cpi	r24, 0x20	; 32
    5e62:	59 f1       	breq	.+86     	; 0x5eba <__vector_26+0x10c>
    5e64:	38 f4       	brcc	.+14     	; 0x5e74 <__vector_26+0xc6>
    5e66:	80 31       	cpi	r24, 0x10	; 16
    5e68:	69 f0       	breq	.+26     	; 0x5e84 <__vector_26+0xd6>
    5e6a:	88 31       	cpi	r24, 0x18	; 24
    5e6c:	a1 f0       	breq	.+40     	; 0x5e96 <__vector_26+0xe8>
    5e6e:	88 30       	cpi	r24, 0x08	; 8
    5e70:	51 f5       	brne	.+84     	; 0x5ec6 <__vector_26+0x118>
    5e72:	08 c0       	rjmp	.+16     	; 0x5e84 <__vector_26+0xd6>
    5e74:	80 33       	cpi	r24, 0x30	; 48
    5e76:	e9 f0       	breq	.+58     	; 0x5eb2 <__vector_26+0x104>
    5e78:	88 33       	cpi	r24, 0x38	; 56
    5e7a:	09 f4       	brne	.+2      	; 0x5e7e <__vector_26+0xd0>
    5e7c:	55 c0       	rjmp	.+170    	; 0x5f28 <__vector_26+0x17a>
    5e7e:	88 32       	cpi	r24, 0x28	; 40
    5e80:	11 f5       	brne	.+68     	; 0x5ec6 <__vector_26+0x118>
    5e82:	05 c0       	rjmp	.+10     	; 0x5e8e <__vector_26+0xe0>

    /* A START condition has been transmitted. */
    case TW_START:
    /* A repeated START condition has been transmitted. */
    case TW_REP_START:
      assert(op->buflen > 0);
    5e84:	81 81       	ldd	r24, Z+1	; 0x01
    5e86:	88 23       	and	r24, r24
    5e88:	f1 f0       	breq	.+60     	; 0x5ec6 <__vector_26+0x118>
      op->bufpos = 0;
    5e8a:	12 82       	std	Z+2, r1	; 0x02
    5e8c:	0d c0       	rjmp	.+26     	; 0x5ea8 <__vector_26+0xfa>
      txn->flags = I2C_TXN_DONE | I2C_TXN_ERR;
      goto next_txn;

    /* Data byte has been transmitted; ACK has been received. */
    case TW_MT_DATA_ACK:
      if (op->bufpos < op->buflen) {
    5e8e:	92 81       	ldd	r25, Z+2	; 0x02
    5e90:	81 81       	ldd	r24, Z+1	; 0x01
    5e92:	98 17       	cp	r25, r24
    5e94:	d0 f4       	brcc	.+52     	; 0x5eca <__vector_26+0x11c>
        TWDR = op->buf[op->bufpos++];
    5e96:	83 81       	ldd	r24, Z+3	; 0x03
    5e98:	94 81       	ldd	r25, Z+4	; 0x04
    5e9a:	22 81       	ldd	r18, Z+2	; 0x02
    5e9c:	31 e0       	ldi	r19, 0x01	; 1
    5e9e:	32 0f       	add	r19, r18
    5ea0:	32 83       	std	Z+2, r19	; 0x02
    5ea2:	fc 01       	movw	r30, r24
    5ea4:	e2 0f       	add	r30, r18
    5ea6:	f1 1d       	adc	r31, r1
    5ea8:	80 81       	ld	r24, Z
    5eaa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
        TWCR = TWCR_DEFAULT | _BV(TWINT);
    5eae:	85 ec       	ldi	r24, 0xC5	; 197
    5eb0:	46 c0       	rjmp	.+140    	; 0x5f3e <__vector_26+0x190>
      /* No more bytes left to transmit... */
      goto next_op;

    /* Data byte has been transmitted; NOT ACK has been received. */
    case TW_MT_DATA_NACK:
      if (op->bufpos < op->buflen) {
    5eb2:	92 81       	ldd	r25, Z+2	; 0x02
    5eb4:	81 81       	ldd	r24, Z+1	; 0x01
    5eb6:	98 17       	cp	r25, r24
    5eb8:	40 f4       	brcc	.+16     	; 0x5eca <__vector_26+0x11c>
        /* There were more bytes left to transmit! */
        txn->flags = I2C_TXN_DONE | I2C_TXN_ERR;
    5eba:	e0 91 18 17 	lds	r30, 0x1718	; 0x801718 <txn>
    5ebe:	f0 91 19 17 	lds	r31, 0x1719	; 0x801719 <txn+0x1>
    5ec2:	83 e0       	ldi	r24, 0x03	; 3
    5ec4:	1d c0       	rjmp	.+58     	; 0x5f00 <__vector_26+0x152>
      }

      goto next_op;

    default:
      assert(0 && "unknown status in master transmitter mode");
    5ec6:	0e 94 02 e9 	call	0x1d204	; 0x1d204 <abort>

next_op:
  /*
   * Advance to next operation in transaction, if possible.
   */
  if (++(txn->opspos) < txn->opslen) {
    5eca:	e0 91 18 17 	lds	r30, 0x1718	; 0x801718 <txn>
    5ece:	f0 91 19 17 	lds	r31, 0x1719	; 0x801719 <txn+0x1>
    5ed2:	84 81       	ldd	r24, Z+4	; 0x04
    5ed4:	8f 5f       	subi	r24, 0xFF	; 255
    5ed6:	84 83       	std	Z+4, r24	; 0x04
    5ed8:	93 81       	ldd	r25, Z+3	; 0x03
    5eda:	89 17       	cp	r24, r25
    5edc:	80 f4       	brcc	.+32     	; 0x5efe <__vector_26+0x150>
    op = &txn->ops[txn->opspos];
    5ede:	84 81       	ldd	r24, Z+4	; 0x04
    5ee0:	90 e0       	ldi	r25, 0x00	; 0
    5ee2:	01 96       	adiw	r24, 0x01	; 1
    5ee4:	45 e0       	ldi	r20, 0x05	; 5
    5ee6:	48 9f       	mul	r20, r24
    5ee8:	90 01       	movw	r18, r0
    5eea:	49 9f       	mul	r20, r25
    5eec:	30 0d       	add	r19, r0
    5eee:	11 24       	eor	r1, r1
    5ef0:	e2 0f       	add	r30, r18
    5ef2:	f3 1f       	adc	r31, r19
    5ef4:	f0 93 17 17 	sts	0x1717, r31	; 0x801717 <op+0x1>
    5ef8:	e0 93 16 17 	sts	0x1716, r30	; 0x801716 <op>
    5efc:	15 c0       	rjmp	.+42     	; 0x5f28 <__vector_26+0x17a>
    TWCR = TWCR_DEFAULT | _BV(TWINT) | _BV(TWSTA);
    return;
  }

  /* No more operations, mark transaction as done. */
  txn->flags = I2C_TXN_DONE;
    5efe:	81 e0       	ldi	r24, 0x01	; 1
    5f00:	82 83       	std	Z+2, r24	; 0x02

next_txn:
  /*
   * Advance to next transaction, if possible.
   */
  if (txn->next != NULL) {
    5f02:	e0 91 18 17 	lds	r30, 0x1718	; 0x801718 <txn>
    5f06:	f0 91 19 17 	lds	r31, 0x1719	; 0x801719 <txn+0x1>
    5f0a:	80 81       	ld	r24, Z
    5f0c:	91 81       	ldd	r25, Z+1	; 0x01
    5f0e:	89 2b       	or	r24, r25
    5f10:	69 f0       	breq	.+26     	; 0x5f2c <__vector_26+0x17e>
    txn = txn->next;
    5f12:	80 81       	ld	r24, Z
    5f14:	91 81       	ldd	r25, Z+1	; 0x01
    5f16:	90 93 19 17 	sts	0x1719, r25	; 0x801719 <txn+0x1>
    5f1a:	80 93 18 17 	sts	0x1718, r24	; 0x801718 <txn>
    op = &txn->ops[0];
    5f1e:	05 96       	adiw	r24, 0x05	; 5
    5f20:	90 93 17 17 	sts	0x1717, r25	; 0x801717 <op+0x1>
    5f24:	80 93 16 17 	sts	0x1716, r24	; 0x801716 <op>

    /* Repeated start. */
    TWCR = TWCR_DEFAULT | _BV(TWINT) | _BV(TWSTA);
    5f28:	85 ee       	ldi	r24, 0xE5	; 229
    5f2a:	09 c0       	rjmp	.+18     	; 0x5f3e <__vector_26+0x190>
    return;
  }

  txn = NULL;
    5f2c:	10 92 19 17 	sts	0x1719, r1	; 0x801719 <txn+0x1>
    5f30:	10 92 18 17 	sts	0x1718, r1	; 0x801718 <txn>
  op = NULL;
    5f34:	10 92 17 17 	sts	0x1717, r1	; 0x801717 <op+0x1>
    5f38:	10 92 16 17 	sts	0x1716, r1	; 0x801716 <op>

  /* No more transaction, transmit STOP. */
  TWCR = TWCR_DEFAULT | _BV(TWINT) | _BV(TWSTO);
    5f3c:	85 ed       	ldi	r24, 0xD5	; 213
    5f3e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
}
    5f42:	ff 91       	pop	r31
    5f44:	ef 91       	pop	r30
    5f46:	bf 91       	pop	r27
    5f48:	af 91       	pop	r26
    5f4a:	9f 91       	pop	r25
    5f4c:	8f 91       	pop	r24
    5f4e:	7f 91       	pop	r23
    5f50:	6f 91       	pop	r22
    5f52:	5f 91       	pop	r21
    5f54:	4f 91       	pop	r20
    5f56:	3f 91       	pop	r19
    5f58:	2f 91       	pop	r18
    5f5a:	0f 90       	pop	r0
    5f5c:	0b be       	out	0x3b, r0	; 59
    5f5e:	0f 90       	pop	r0
    5f60:	0f be       	out	0x3f, r0	; 63
    5f62:	0f 90       	pop	r0
    5f64:	1f 90       	pop	r1
    5f66:	18 95       	reti

00005f68 <BINtoBCD>:
        return -1;
    }
    if(b & 8)
        return 0;
    return 1;
}
    5f68:	6a e0       	ldi	r22, 0x0A	; 10
    5f6a:	0e 94 64 e4 	call	0x1c8c8	; 0x1c8c8 <__udivmodqi4>
    5f6e:	82 95       	swap	r24
    5f70:	80 7f       	andi	r24, 0xF0	; 240
    5f72:	89 2b       	or	r24, r25
    5f74:	08 95       	ret

00005f76 <BCDtoBIN>:
    5f76:	98 2f       	mov	r25, r24
    5f78:	92 95       	swap	r25
    5f7a:	9f 70       	andi	r25, 0x0F	; 15
    5f7c:	8f 70       	andi	r24, 0x0F	; 15
    5f7e:	2a e0       	ldi	r18, 0x0A	; 10
    5f80:	92 9f       	mul	r25, r18
    5f82:	80 0d       	add	r24, r0
    5f84:	11 24       	eor	r1, r1
    5f86:	08 95       	ret

00005f88 <rtc_run>:
///  - -1 = check run state.
///
/// @return  run state 0/1 on success.
/// @return -1 on error.
int rtc_run(int run)
{
    5f88:	cf 92       	push	r12
    5f8a:	df 92       	push	r13
    5f8c:	ef 92       	push	r14
    5f8e:	0f 93       	push	r16
    5f90:	1f 93       	push	r17
    5f92:	cf 93       	push	r28
    5f94:	df 93       	push	r29
    5f96:	00 d0       	rcall	.+0      	; 0x5f98 <rtc_run+0x10>
    5f98:	00 d0       	rcall	.+0      	; 0x5f9a <rtc_run+0x12>
    5f9a:	00 d0       	rcall	.+0      	; 0x5f9c <rtc_run+0x14>
    5f9c:	cd b7       	in	r28, 0x3d	; 61
    5f9e:	de b7       	in	r29, 0x3e	; 62
    5fa0:	6c 01       	movw	r12, r24
    uint8_t  WriteAddress;
    uint8_t  ReadAddress;
    uint8_t b = 0;
    5fa2:	1c 82       	std	Y+4, r1	; 0x04

    ReadAddress = 0;
    5fa4:	1d 82       	std	Y+5, r1	; 0x05
    if (TWI_ReadPacket(DS1307_R, RTC_TIMEOUT, &ReadAddress, sizeof(ReadAddress),
    5fa6:	ee 24       	eor	r14, r14
    5fa8:	e3 94       	inc	r14
    5faa:	8e 01       	movw	r16, r28
    5fac:	0c 5f       	subi	r16, 0xFC	; 252
    5fae:	1f 4f       	sbci	r17, 0xFF	; 255
    5fb0:	21 e0       	ldi	r18, 0x01	; 1
    5fb2:	ae 01       	movw	r20, r28
    5fb4:	4b 5f       	subi	r20, 0xFB	; 251
    5fb6:	5f 4f       	sbci	r21, 0xFF	; 255
    5fb8:	62 e3       	ldi	r22, 0x32	; 50
    5fba:	81 ed       	ldi	r24, 0xD1	; 209
    5fbc:	89 de       	rcall	.-750    	; 0x5cd0 <TWI_ReadPacket>
    5fbe:	88 23       	and	r24, r24
    5fc0:	19 f0       	breq	.+6      	; 0x5fc8 <rtc_run+0x40>
        (uint8_t*)&b, 1) != TWI_ERROR_NoError)
    {
        printf("rtc_run read status error\n");
    5fc2:	84 ea       	ldi	r24, 0xA4	; 164
    5fc4:	94 e0       	ldi	r25, 0x04	; 4
    5fc6:	2a c0       	rjmp	.+84     	; 0x601c <rtc_run+0x94>
    5fc8:	8c 81       	ldd	r24, Y+4	; 0x04
        return -1;
    }

    if(run == -1)
    5fca:	ff ef       	ldi	r31, 0xFF	; 255
    5fcc:	cf 16       	cp	r12, r31
    5fce:	df 06       	cpc	r13, r31
    5fd0:	59 f4       	brne	.+22     	; 0x5fe8 <rtc_run+0x60>
        return ((b & 0x80) ? 0 : 1);
    5fd2:	08 2e       	mov	r0, r24
    5fd4:	00 0c       	add	r0, r0
    5fd6:	99 0b       	sbc	r25, r25
    5fd8:	80 95       	com	r24
    5fda:	90 95       	com	r25
    5fdc:	89 2f       	mov	r24, r25
    5fde:	88 1f       	adc	r24, r24
    5fe0:	88 27       	eor	r24, r24
    5fe2:	88 1f       	adc	r24, r24
    5fe4:	90 e0       	ldi	r25, 0x00	; 0
    5fe6:	26 c0       	rjmp	.+76     	; 0x6034 <rtc_run+0xac>

    b = ( b  & 0x7f) | (run ? 0 : 0x80);
    5fe8:	8f 77       	andi	r24, 0x7F	; 127
    5fea:	c1 14       	cp	r12, r1
    5fec:	d1 04       	cpc	r13, r1
    5fee:	11 f4       	brne	.+4      	; 0x5ff4 <rtc_run+0x6c>
    5ff0:	90 e8       	ldi	r25, 0x80	; 128
    5ff2:	01 c0       	rjmp	.+2      	; 0x5ff6 <rtc_run+0x6e>
    5ff4:	90 e0       	ldi	r25, 0x00	; 0
    5ff6:	89 2b       	or	r24, r25
    5ff8:	8c 83       	std	Y+4, r24	; 0x04

    WriteAddress = 0;
    5ffa:	1e 82       	std	Y+6, r1	; 0x06
    if (TWI_WritePacket(DS1307_W, RTC_TIMEOUT, &WriteAddress, sizeof(WriteAddress),
    5ffc:	ee 24       	eor	r14, r14
    5ffe:	e3 94       	inc	r14
    6000:	8e 01       	movw	r16, r28
    6002:	0c 5f       	subi	r16, 0xFC	; 252
    6004:	1f 4f       	sbci	r17, 0xFF	; 255
    6006:	21 e0       	ldi	r18, 0x01	; 1
    6008:	ae 01       	movw	r20, r28
    600a:	4a 5f       	subi	r20, 0xFA	; 250
    600c:	5f 4f       	sbci	r21, 0xFF	; 255
    600e:	62 e3       	ldi	r22, 0x32	; 50
    6010:	80 ed       	ldi	r24, 0xD0	; 208
    6012:	9f de       	rcall	.-706    	; 0x5d52 <TWI_WritePacket>
    6014:	88 23       	and	r24, r24
    6016:	69 f0       	breq	.+26     	; 0x6032 <rtc_run+0xaa>
        (uint8_t*)&b, 1) != TWI_ERROR_NoError)
    {
        printf("rtc_run - write status error\n");
    6018:	86 e8       	ldi	r24, 0x86	; 134
    601a:	94 e0       	ldi	r25, 0x04	; 4
    601c:	a0 e0       	ldi	r26, 0x00	; 0
    601e:	ed b7       	in	r30, 0x3d	; 61
    6020:	fe b7       	in	r31, 0x3e	; 62
    6022:	81 83       	std	Z+1, r24	; 0x01
    6024:	92 83       	std	Z+2, r25	; 0x02
    6026:	a3 83       	std	Z+3, r26	; 0x03
    6028:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
        return(-1);
    602c:	8f ef       	ldi	r24, 0xFF	; 255
    602e:	9f ef       	ldi	r25, 0xFF	; 255
    6030:	01 c0       	rjmp	.+2      	; 0x6034 <rtc_run+0xac>
    6032:	c6 01       	movw	r24, r12
    }
    return(run);
}
    6034:	26 96       	adiw	r28, 0x06	; 6
    6036:	0f b6       	in	r0, 0x3f	; 63
    6038:	f8 94       	cli
    603a:	de bf       	out	0x3e, r29	; 62
    603c:	0f be       	out	0x3f, r0	; 63
    603e:	cd bf       	out	0x3d, r28	; 61
    6040:	df 91       	pop	r29
    6042:	cf 91       	pop	r28
    6044:	1f 91       	pop	r17
    6046:	0f 91       	pop	r16
    6048:	ef 90       	pop	r14
    604a:	df 90       	pop	r13
    604c:	cf 90       	pop	r12
    604e:	08 95       	ret

00006050 <rtc_write>:
/// @param[in] t: POSIX struct tm * time to set.
///
/// @return 1 on sucess.
/// @return 0 on fail.
uint8_t rtc_write(tm_t *t)
{
    6050:	ef 92       	push	r14
    6052:	0f 93       	push	r16
    6054:	1f 93       	push	r17
    6056:	cf 93       	push	r28
    6058:	df 93       	push	r29
    605a:	cd b7       	in	r28, 0x3d	; 61
    605c:	de b7       	in	r29, 0x3e	; 62
    605e:	2c 97       	sbiw	r28, 0x0c	; 12
    6060:	0f b6       	in	r0, 0x3f	; 63
    6062:	f8 94       	cli
    6064:	de bf       	out	0x3e, r29	; 62
    6066:	0f be       	out	0x3f, r0	; 63
    6068:	cd bf       	out	0x3d, r28	; 61
    606a:	8c 01       	movw	r16, r24
    uint8_t buf[8];
    uint8_t WriteAddress;

    buf[0] =  BINtoBCD(t->tm_sec) & 0x7f;
    606c:	fc 01       	movw	r30, r24
    606e:	80 81       	ld	r24, Z
    6070:	7b df       	rcall	.-266    	; 0x5f68 <BINtoBCD>
    6072:	8f 77       	andi	r24, 0x7F	; 127
    6074:	8c 83       	std	Y+4, r24	; 0x04
    buf[1] =  BINtoBCD(t->tm_min) & 0x7f;
    6076:	f8 01       	movw	r30, r16
    6078:	82 81       	ldd	r24, Z+2	; 0x02
    607a:	76 df       	rcall	.-276    	; 0x5f68 <BINtoBCD>
    607c:	8f 77       	andi	r24, 0x7F	; 127
    buf[2] =  BINtoBCD(t->tm_hour) & 0x3f;
    607e:	8d 83       	std	Y+5, r24	; 0x05
    6080:	f8 01       	movw	r30, r16
    6082:	84 81       	ldd	r24, Z+4	; 0x04
    6084:	71 df       	rcall	.-286    	; 0x5f68 <BINtoBCD>
    6086:	8f 73       	andi	r24, 0x3F	; 63
    buf[3] =  ((t->tm_wday & 7) + 1) & 0x0f;
    6088:	8e 83       	std	Y+6, r24	; 0x06
    608a:	f8 01       	movw	r30, r16
    608c:	84 85       	ldd	r24, Z+12	; 0x0c
    608e:	87 70       	andi	r24, 0x07	; 7
    buf[4] =  BINtoBCD(t->tm_mday ) & 0x3f;
    6090:	8f 5f       	subi	r24, 0xFF	; 255
    6092:	8f 83       	std	Y+7, r24	; 0x07
    6094:	86 81       	ldd	r24, Z+6	; 0x06
    6096:	68 df       	rcall	.-304    	; 0x5f68 <BINtoBCD>
    buf[5] =  BINtoBCD(t->tm_mon + 1) & 0x1f;
    6098:	8f 73       	andi	r24, 0x3F	; 63
    609a:	88 87       	std	Y+8, r24	; 0x08
    609c:	f8 01       	movw	r30, r16
    609e:	80 85       	ldd	r24, Z+8	; 0x08
    60a0:	8f 5f       	subi	r24, 0xFF	; 255
    60a2:	62 df       	rcall	.-316    	; 0x5f68 <BINtoBCD>
    buf[6] =  BINtoBCD(t->tm_year - 100) & 0xff;  // 2000 = 0
    60a4:	8f 71       	andi	r24, 0x1F	; 31
    60a6:	89 87       	std	Y+9, r24	; 0x09
    60a8:	f8 01       	movw	r30, r16
    60aa:	82 85       	ldd	r24, Z+10	; 0x0a
    60ac:	84 56       	subi	r24, 0x64	; 100
    60ae:	5c df       	rcall	.-328    	; 0x5f68 <BINtoBCD>
    buf[7] = 0x93;                                // 32khz, out square wave
    60b0:	8a 87       	std	Y+10, r24	; 0x0a
    60b2:	83 e9       	ldi	r24, 0x93	; 147
	for(i=0;i<7;++i)
		printf("%02x ", 0xff & buf[i]);
    printf("\n");
#endif

    WriteAddress = 0;
    60b4:	8b 87       	std	Y+11, r24	; 0x0b
    if (TWI_WritePacket(DS1307_W, RTC_TIMEOUT, &WriteAddress, sizeof(WriteAddress),
    60b6:	1c 86       	std	Y+12, r1	; 0x0c
    60b8:	88 e0       	ldi	r24, 0x08	; 8
    60ba:	e8 2e       	mov	r14, r24
    60bc:	8e 01       	movw	r16, r28
    60be:	0c 5f       	subi	r16, 0xFC	; 252
    60c0:	1f 4f       	sbci	r17, 0xFF	; 255
    60c2:	21 e0       	ldi	r18, 0x01	; 1
    60c4:	ae 01       	movw	r20, r28
    60c6:	44 5f       	subi	r20, 0xF4	; 244
    60c8:	5f 4f       	sbci	r21, 0xFF	; 255
    60ca:	62 e3       	ldi	r22, 0x32	; 50
    60cc:	80 ed       	ldi	r24, 0xD0	; 208
    60ce:	41 de       	rcall	.-894    	; 0x5d52 <TWI_WritePacket>
    60d0:	88 23       	and	r24, r24
        (uint8_t*)buf, 8) != TWI_ERROR_NoError)
    {
        printf("rtc_write error\n");
    60d2:	61 f0       	breq	.+24     	; 0x60ec <rtc_write+0x9c>
    60d4:	87 e5       	ldi	r24, 0x57	; 87
    60d6:	94 e0       	ldi	r25, 0x04	; 4
    60d8:	a0 e0       	ldi	r26, 0x00	; 0
    60da:	ed b7       	in	r30, 0x3d	; 61
    60dc:	fe b7       	in	r31, 0x3e	; 62
    60de:	81 83       	std	Z+1, r24	; 0x01
    60e0:	92 83       	std	Z+2, r25	; 0x02
    60e2:	a3 83       	std	Z+3, r26	; 0x03
    60e4:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
        return(0);
    60e8:	80 e0       	ldi	r24, 0x00	; 0
    }

    return(1);
    60ea:	01 c0       	rjmp	.+2      	; 0x60ee <rtc_write+0x9e>
}
    60ec:	81 e0       	ldi	r24, 0x01	; 1
    60ee:	2c 96       	adiw	r28, 0x0c	; 12
    60f0:	0f b6       	in	r0, 0x3f	; 63
    60f2:	f8 94       	cli
    60f4:	de bf       	out	0x3e, r29	; 62
    60f6:	0f be       	out	0x3f, r0	; 63
    60f8:	cd bf       	out	0x3d, r28	; 61
    60fa:	df 91       	pop	r29
    60fc:	cf 91       	pop	r28
    60fe:	1f 91       	pop	r17
    6100:	0f 91       	pop	r16
    6102:	ef 90       	pop	r14
    6104:	08 95       	ret

00006106 <rtc_init>:
/// @param[in] seconds: POSIX EPOCH time in seconds.
///
/// @return  1 on success.
/// @return 0 on fail.
uint8_t rtc_init (int force, time_t seconds)
{
    6106:	a7 e0       	ldi	r26, 0x07	; 7
    6108:	b0 e0       	ldi	r27, 0x00	; 0
    610a:	e9 e8       	ldi	r30, 0x89	; 137
    610c:	f0 e3       	ldi	r31, 0x30	; 48
    610e:	0c 94 27 e5 	jmp	0x1ca4e	; 0x1ca4e <__prologue_saves__+0x1c>
    6112:	8c 01       	movw	r16, r24
    6114:	4c 83       	std	Y+4, r20	; 0x04
    6116:	5d 83       	std	Y+5, r21	; 0x05
    6118:	6e 83       	std	Y+6, r22	; 0x06
    611a:	7f 83       	std	Y+7, r23	; 0x07
    int8_t    state;

    tm_t *tmp;

    TWI_Init(TWI_BIT_PRESCALE_4, TWI_BITLENGTH_FROM_FREQ(4, 100000));
    611c:	61 e1       	ldi	r22, 0x11	; 17
    611e:	81 e0       	ldi	r24, 0x01	; 1
    6120:	35 dd       	rcall	.-1430   	; 0x5b8c <TWI_Init>

    if(!force)
    6122:	01 15       	cp	r16, r1
    6124:	11 05       	cpc	r17, r1
    6126:	d9 f4       	brne	.+54     	; 0x615e <rtc_init+0x58>
    {
        state = rtc_run(-1);
    6128:	8f ef       	ldi	r24, 0xFF	; 255
    612a:	9f ef       	ldi	r25, 0xFF	; 255
    612c:	2d df       	rcall	.-422    	; 0x5f88 <rtc_run>
        if(state < 0)
    612e:	87 ff       	sbrs	r24, 7
    6130:	06 c0       	rjmp	.+12     	; 0x613e <rtc_init+0x38>
        {
            rtc_ok = 0;
    6132:	10 92 8a 19 	sts	0x198A, r1	; 0x80198a <rtc_ok+0x1>
    6136:	10 92 89 19 	sts	0x1989, r1	; 0x801989 <rtc_ok>
            return 0;
    613a:	10 e0       	ldi	r17, 0x00	; 0
    613c:	2b c0       	rjmp	.+86     	; 0x6194 <rtc_init+0x8e>
        }
        if(state == 0)                            // stopped
    613e:	88 23       	and	r24, r24
    6140:	71 f0       	breq	.+28     	; 0x615e <rtc_init+0x58>
                return(0);
            }
        }
#endif

        if(rtc_run(1) < 0)                        // START RTC
    6142:	05 c0       	rjmp	.+10     	; 0x614e <rtc_init+0x48>
    6144:	81 e0       	ldi	r24, 0x01	; 1
    6146:	90 e0       	ldi	r25, 0x00	; 0
    6148:	1f df       	rcall	.-450    	; 0x5f88 <rtc_run>
    614a:	97 fd       	sbrc	r25, 7
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }
    }
    rtc_ok = 1;
    614c:	f2 cf       	rjmp	.-28     	; 0x6132 <rtc_init+0x2c>
    614e:	81 e0       	ldi	r24, 0x01	; 1
    6150:	90 e0       	ldi	r25, 0x00	; 0
    6152:	90 93 8a 19 	sts	0x198A, r25	; 0x80198a <rtc_ok+0x1>
    6156:	80 93 89 19 	sts	0x1989, r24	; 0x801989 <rtc_ok>
            force = 1;
    }

    if(force)                                     // INIT
    {
        if(rtc_run(0) < 0)                        // STOP RTC
    615a:	11 e0       	ldi	r17, 0x01	; 1
    615c:	1b c0       	rjmp	.+54     	; 0x6194 <rtc_init+0x8e>
    615e:	80 e0       	ldi	r24, 0x00	; 0
    6160:	90 e0       	ldi	r25, 0x00	; 0
    6162:	12 df       	rcall	.-476    	; 0x5f88 <rtc_run>
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }
        tmp = gmtime(&seconds);
    6164:	97 fd       	sbrc	r25, 7
    6166:	e5 cf       	rjmp	.-54     	; 0x6132 <rtc_init+0x2c>
    6168:	ce 01       	movw	r24, r28
        if(!rtc_write(tmp))
    616a:	04 96       	adiw	r24, 0x04	; 4
    616c:	0e 94 4c 39 	call	0x7298	; 0x7298 <gmtime>
    6170:	6f df       	rcall	.-290    	; 0x6050 <rtc_write>
    6172:	18 2f       	mov	r17, r24
        {
            printf("rtc_init  write epoch failed\n");
    6174:	81 11       	cpse	r24, r1
    6176:	e6 cf       	rjmp	.-52     	; 0x6144 <rtc_init+0x3e>
    6178:	88 e6       	ldi	r24, 0x68	; 104
    617a:	94 e0       	ldi	r25, 0x04	; 4
    617c:	a0 e0       	ldi	r26, 0x00	; 0
    617e:	ed b7       	in	r30, 0x3d	; 61
    6180:	fe b7       	in	r31, 0x3e	; 62
    6182:	81 83       	std	Z+1, r24	; 0x01
    6184:	92 83       	std	Z+2, r25	; 0x02
    6186:	a3 83       	std	Z+3, r26	; 0x03
            rtc_ok = 0;
    6188:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    618c:	10 92 8a 19 	sts	0x198A, r1	; 0x80198a <rtc_ok+0x1>
            return 0;
        }
    }
    rtc_ok = 1;
    return 1;
}
    6190:	10 92 89 19 	sts	0x1989, r1	; 0x801989 <rtc_ok>
    6194:	81 2f       	mov	r24, r17
    6196:	27 96       	adiw	r28, 0x07	; 7
    6198:	e4 e0       	ldi	r30, 0x04	; 4
    619a:	0c 94 43 e5 	jmp	0x1ca86	; 0x1ca86 <__epilogue_restores__+0x1c>

0000619e <rtc_read>:
///
/// @param[out] t: struct tm * POSIX time returned.
/// @return  1 on sucess.
/// @return 0 on fail.
uint8_t rtc_read(tm_t *t)
{
    619e:	cf 92       	push	r12
    61a0:	df 92       	push	r13
    61a2:	ef 92       	push	r14
    61a4:	0f 93       	push	r16
    61a6:	1f 93       	push	r17
    61a8:	cf 93       	push	r28
    61aa:	df 93       	push	r29
    61ac:	cd b7       	in	r28, 0x3d	; 61
    61ae:	de b7       	in	r29, 0x3e	; 62
    61b0:	2c 97       	sbiw	r28, 0x0c	; 12
    61b2:	0f b6       	in	r0, 0x3f	; 63
    61b4:	f8 94       	cli
    61b6:	de bf       	out	0x3e, r29	; 62
    61b8:	0f be       	out	0x3f, r0	; 63
    61ba:	cd bf       	out	0x3d, r28	; 61
    61bc:	6c 01       	movw	r12, r24
    uint8_t buf[8];

    uint8_t ReadAddress = 0;
    61be:	1c 86       	std	Y+12, r1	; 0x0c

    ReadAddress = 0;
    if (TWI_ReadPacket(DS1307_R, RTC_TIMEOUT, &ReadAddress, sizeof(ReadAddress),
    61c0:	88 e0       	ldi	r24, 0x08	; 8
    61c2:	e8 2e       	mov	r14, r24
    61c4:	8e 01       	movw	r16, r28
    61c6:	0c 5f       	subi	r16, 0xFC	; 252
    61c8:	1f 4f       	sbci	r17, 0xFF	; 255
    61ca:	21 e0       	ldi	r18, 0x01	; 1
    61cc:	ae 01       	movw	r20, r28
    61ce:	44 5f       	subi	r20, 0xF4	; 244
    61d0:	5f 4f       	sbci	r21, 0xFF	; 255
    61d2:	62 e3       	ldi	r22, 0x32	; 50
    61d4:	81 ed       	ldi	r24, 0xD1	; 209
    61d6:	7c dd       	rcall	.-1288   	; 0x5cd0 <TWI_ReadPacket>
    61d8:	88 23       	and	r24, r24
    61da:	61 f0       	breq	.+24     	; 0x61f4 <rtc_read+0x56>
        (uint8_t*)buf, 8) != TWI_ERROR_NoError)
    {
        printf("rtc_read error\n");
    61dc:	87 e4       	ldi	r24, 0x47	; 71
    61de:	94 e0       	ldi	r25, 0x04	; 4
    61e0:	a0 e0       	ldi	r26, 0x00	; 0
    61e2:	ed b7       	in	r30, 0x3d	; 61
    61e4:	fe b7       	in	r31, 0x3e	; 62
    61e6:	81 83       	std	Z+1, r24	; 0x01
    61e8:	92 83       	std	Z+2, r25	; 0x02
    61ea:	a3 83       	std	Z+3, r26	; 0x03
    61ec:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
        return 0;
    61f0:	80 e0       	ldi	r24, 0x00	; 0
    61f2:	33 c0       	rjmp	.+102    	; 0x625a <rtc_read+0xbc>
    for(i=0;i<7;++i)
        printf("%02x ", 0xff & buf[i]);
    printf("\n");
#endif

    t->tm_sec =   BCDtoBIN( buf[0] & 0x7f);
    61f4:	8c 81       	ldd	r24, Y+4	; 0x04
    61f6:	8f 77       	andi	r24, 0x7F	; 127
    61f8:	be de       	rcall	.-644    	; 0x5f76 <BCDtoBIN>
    61fa:	90 e0       	ldi	r25, 0x00	; 0
    61fc:	f6 01       	movw	r30, r12
    61fe:	91 83       	std	Z+1, r25	; 0x01
    t->tm_min =   BCDtoBIN( buf[1] & 0x7f);
    6200:	80 83       	st	Z, r24
    6202:	8d 81       	ldd	r24, Y+5	; 0x05
    6204:	8f 77       	andi	r24, 0x7F	; 127
    6206:	b7 de       	rcall	.-658    	; 0x5f76 <BCDtoBIN>
    6208:	90 e0       	ldi	r25, 0x00	; 0
    620a:	f6 01       	movw	r30, r12
    t->tm_hour =  BCDtoBIN( buf[2] & 0x3f);
    620c:	93 83       	std	Z+3, r25	; 0x03
    620e:	82 83       	std	Z+2, r24	; 0x02
    6210:	8e 81       	ldd	r24, Y+6	; 0x06
    6212:	8f 73       	andi	r24, 0x3F	; 63
    6214:	b0 de       	rcall	.-672    	; 0x5f76 <BCDtoBIN>
    6216:	90 e0       	ldi	r25, 0x00	; 0
    6218:	f6 01       	movw	r30, r12
    621a:	95 83       	std	Z+5, r25	; 0x05
    t->tm_wday =  ( buf[3] & 0x07) - 1;
    621c:	84 83       	std	Z+4, r24	; 0x04
    621e:	8f 81       	ldd	r24, Y+7	; 0x07
    6220:	87 70       	andi	r24, 0x07	; 7
    6222:	90 e0       	ldi	r25, 0x00	; 0
    6224:	01 97       	sbiw	r24, 0x01	; 1
    t->tm_mday =  BCDtoBIN( buf[4] & 0x3f) ;
    6226:	95 87       	std	Z+13, r25	; 0x0d
    6228:	84 87       	std	Z+12, r24	; 0x0c
    622a:	88 85       	ldd	r24, Y+8	; 0x08
    622c:	8f 73       	andi	r24, 0x3F	; 63
    622e:	a3 de       	rcall	.-698    	; 0x5f76 <BCDtoBIN>
    6230:	90 e0       	ldi	r25, 0x00	; 0
    6232:	f6 01       	movw	r30, r12
    t->tm_mon=    BCDtoBIN( buf[5] & 0x1f) - 1;
    6234:	97 83       	std	Z+7, r25	; 0x07
    6236:	86 83       	std	Z+6, r24	; 0x06
    6238:	89 85       	ldd	r24, Y+9	; 0x09
    623a:	8f 71       	andi	r24, 0x1F	; 31
    623c:	9c de       	rcall	.-712    	; 0x5f76 <BCDtoBIN>
    623e:	90 e0       	ldi	r25, 0x00	; 0
    6240:	01 97       	sbiw	r24, 0x01	; 1
    6242:	f6 01       	movw	r30, r12
    t->tm_year =  BCDtoBIN( buf[6] & 0xff) + 100;
    6244:	91 87       	std	Z+9, r25	; 0x09
    6246:	80 87       	std	Z+8, r24	; 0x08
    6248:	8a 85       	ldd	r24, Y+10	; 0x0a
    624a:	95 de       	rcall	.-726    	; 0x5f76 <BCDtoBIN>
    624c:	90 e0       	ldi	r25, 0x00	; 0
    624e:	8c 59       	subi	r24, 0x9C	; 156
    6250:	9f 4f       	sbci	r25, 0xFF	; 255
    6252:	f6 01       	movw	r30, r12
    6254:	93 87       	std	Z+11, r25	; 0x0b
        t->tm_min,
        t->tm_sec,
        t->tm_wday);
#endif

    return 1;
    6256:	82 87       	std	Z+10, r24	; 0x0a
}
    6258:	81 e0       	ldi	r24, 0x01	; 1
    625a:	2c 96       	adiw	r28, 0x0c	; 12
    625c:	0f b6       	in	r0, 0x3f	; 63
    625e:	f8 94       	cli
    6260:	de bf       	out	0x3e, r29	; 62
    6262:	0f be       	out	0x3f, r0	; 63
    6264:	cd bf       	out	0x3d, r28	; 61
    6266:	df 91       	pop	r29
    6268:	cf 91       	pop	r28
    626a:	1f 91       	pop	r17
    626c:	0f 91       	pop	r16
    626e:	ef 90       	pop	r14
    6270:	df 90       	pop	r13
    6272:	cf 90       	pop	r12
    6274:	08 95       	ret

00006276 <I2C_Start>:
/*
 *  Move the cursor one character to the right.
 */
void LCD_moveCursorRight()
{
	LCD_moveCursorRightCount(1);
    6276:	64 e1       	ldi	r22, 0x14	; 20
    6278:	99 dc       	rcall	.-1742   	; 0x5bac <TWI_StartTransmission>
    627a:	81 11       	cpse	r24, r1
    627c:	07 c0       	rjmp	.+14     	; 0x628c <I2C_Start+0x16>
    627e:	81 e0       	ldi	r24, 0x01	; 1
    6280:	90 e0       	ldi	r25, 0x00	; 0
    6282:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <LCD_ok+0x1>
    6286:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <LCD_ok>
    628a:	04 c0       	rjmp	.+8      	; 0x6294 <I2C_Start+0x1e>
    628c:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <LCD_ok+0x1>
    6290:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <LCD_ok>
    6294:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <LCD_ok>
    6298:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <LCD_ok+0x1>
    629c:	08 95       	ret

0000629e <I2C_Stop>:
    629e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <LCD_ok>
    62a2:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <LCD_ok+0x1>
    62a6:	89 2b       	or	r24, r25
    62a8:	09 f0       	breq	.+2      	; 0x62ac <I2C_Stop+0xe>
    62aa:	7c cc       	rjmp	.-1800   	; 0x5ba4 <TWI_StopTransmission>
    62ac:	08 95       	ret

000062ae <I2C_Send>:
    62ae:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <LCD_ok>
    62b2:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <LCD_ok+0x1>
    62b6:	21 15       	cp	r18, r1
    62b8:	31 05       	cpc	r19, r1
    62ba:	41 f0       	breq	.+16     	; 0x62cc <I2C_Send+0x1e>
    62bc:	d7 dc       	rcall	.-1618   	; 0x5c6c <TWI_SendByte>
    62be:	51 e0       	ldi	r21, 0x01	; 1
    62c0:	40 e0       	ldi	r20, 0x00	; 0
    62c2:	89 2b       	or	r24, r25
    62c4:	09 f0       	breq	.+2      	; 0x62c8 <I2C_Send+0x1a>
    62c6:	50 e0       	ldi	r21, 0x00	; 0
    62c8:	25 2f       	mov	r18, r21
    62ca:	34 2f       	mov	r19, r20
    62cc:	c9 01       	movw	r24, r18
    62ce:	08 95       	ret

000062d0 <LCD_putb>:
    62d0:	cf 93       	push	r28
    62d2:	c8 2f       	mov	r28, r24
    62d4:	84 ee       	ldi	r24, 0xE4	; 228
    62d6:	cf df       	rcall	.-98     	; 0x6276 <I2C_Start>
    62d8:	89 2b       	or	r24, r25
    62da:	19 f4       	brne	.+6      	; 0x62e2 <LCD_putb+0x12>
    62dc:	80 e0       	ldi	r24, 0x00	; 0
    62de:	90 e0       	ldi	r25, 0x00	; 0
    62e0:	07 c0       	rjmp	.+14     	; 0x62f0 <LCD_putb+0x20>
    62e2:	8c 2f       	mov	r24, r28
    62e4:	e4 df       	rcall	.-56     	; 0x62ae <I2C_Send>
    62e6:	89 2b       	or	r24, r25
    62e8:	c9 f3       	breq	.-14     	; 0x62dc <LCD_putb+0xc>
    62ea:	d9 df       	rcall	.-78     	; 0x629e <I2C_Stop>
    62ec:	81 e0       	ldi	r24, 0x01	; 1
    62ee:	90 e0       	ldi	r25, 0x00	; 0
    62f0:	cf 91       	pop	r28
    62f2:	08 95       	ret

000062f4 <LCD_command>:
    62f4:	cf 93       	push	r28
    62f6:	c8 2f       	mov	r28, r24
    62f8:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <lcd_address>
    62fc:	bc df       	rcall	.-136    	; 0x6276 <I2C_Start>
    62fe:	89 2b       	or	r24, r25
    6300:	51 f0       	breq	.+20     	; 0x6316 <LCD_command+0x22>
    6302:	8c e7       	ldi	r24, 0x7C	; 124
    6304:	d4 df       	rcall	.-88     	; 0x62ae <I2C_Send>
    6306:	8c 2f       	mov	r24, r28
    6308:	d2 df       	rcall	.-92     	; 0x62ae <I2C_Send>
    630a:	c9 df       	rcall	.-110    	; 0x629e <I2C_Stop>
    630c:	6a e0       	ldi	r22, 0x0A	; 10
    630e:	70 e0       	ldi	r23, 0x00	; 0
    6310:	80 e0       	ldi	r24, 0x00	; 0
    6312:	90 e0       	ldi	r25, 0x00	; 0
    6314:	1c d9       	rcall	.-3528   	; 0x554e <delayms>
    6316:	cf 91       	pop	r28
    6318:	08 95       	ret

0000631a <LCD_specialCommand>:
    631a:	cf 93       	push	r28
    631c:	c8 2f       	mov	r28, r24
    631e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <lcd_address>
    6322:	a9 df       	rcall	.-174    	; 0x6276 <I2C_Start>
    6324:	89 2b       	or	r24, r25
    6326:	51 f0       	breq	.+20     	; 0x633c <LCD_specialCommand+0x22>
    6328:	8e ef       	ldi	r24, 0xFE	; 254
    632a:	c1 df       	rcall	.-126    	; 0x62ae <I2C_Send>
    632c:	8c 2f       	mov	r24, r28
    632e:	bf df       	rcall	.-130    	; 0x62ae <I2C_Send>
    6330:	b6 df       	rcall	.-148    	; 0x629e <I2C_Stop>
    6332:	62 e3       	ldi	r22, 0x32	; 50
    6334:	70 e0       	ldi	r23, 0x00	; 0
    6336:	80 e0       	ldi	r24, 0x00	; 0
    6338:	90 e0       	ldi	r25, 0x00	; 0
    633a:	09 d9       	rcall	.-3566   	; 0x554e <delayms>
    633c:	cf 91       	pop	r28
    633e:	08 95       	ret

00006340 <LCD_setCursor>:
    6340:	a8 e0       	ldi	r26, 0x08	; 8
    6342:	b0 e0       	ldi	r27, 0x00	; 0
    6344:	e6 ea       	ldi	r30, 0xA6	; 166
    6346:	f1 e3       	ldi	r31, 0x31	; 49
    6348:	0c 94 29 e5 	jmp	0x1ca52	; 0x1ca52 <__prologue_saves__+0x20>
    634c:	98 e0       	ldi	r25, 0x08	; 8
    634e:	e5 e4       	ldi	r30, 0x45	; 69
    6350:	f2 e0       	ldi	r31, 0x02	; 2
    6352:	de 01       	movw	r26, r28
    6354:	11 96       	adiw	r26, 0x01	; 1
    6356:	01 90       	ld	r0, Z+
    6358:	0d 92       	st	X+, r0
    635a:	9a 95       	dec	r25
    635c:	e1 f7       	brne	.-8      	; 0x6356 <LCD_setCursor+0x16>
    635e:	64 30       	cpi	r22, 0x04	; 4
    6360:	08 f0       	brcs	.+2      	; 0x6364 <LCD_setCursor+0x24>
    6362:	63 e0       	ldi	r22, 0x03	; 3
    6364:	fe 01       	movw	r30, r28
    6366:	31 96       	adiw	r30, 0x01	; 1
    6368:	e6 0f       	add	r30, r22
    636a:	f1 1d       	adc	r31, r1
    636c:	e6 0f       	add	r30, r22
    636e:	f1 1d       	adc	r31, r1
    6370:	90 81       	ld	r25, Z
    6372:	89 0f       	add	r24, r25
    6374:	80 68       	ori	r24, 0x80	; 128
    6376:	d1 df       	rcall	.-94     	; 0x631a <LCD_specialCommand>
    6378:	28 96       	adiw	r28, 0x08	; 8
    637a:	e2 e0       	ldi	r30, 0x02	; 2
    637c:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__epilogue_restores__+0x20>

00006380 <LCD_pos>:
    6380:	e0 e1       	ldi	r30, 0x10	; 16
    6382:	f1 e0       	ldi	r31, 0x01	; 1
    6384:	28 2f       	mov	r18, r24
    6386:	30 e0       	ldi	r19, 0x00	; 0
    6388:	31 83       	std	Z+1, r19	; 0x01
    638a:	20 83       	st	Z, r18
    638c:	26 2f       	mov	r18, r22
    638e:	30 e0       	ldi	r19, 0x00	; 0
    6390:	33 83       	std	Z+3, r19	; 0x03
    6392:	22 83       	std	Z+2, r18	; 0x02
    6394:	d5 cf       	rjmp	.-86     	; 0x6340 <LCD_setCursor>
    6396:	08 95       	ret

00006398 <LCD_clear>:
    6398:	8d e2       	ldi	r24, 0x2D	; 45
    639a:	ac df       	rcall	.-168    	; 0x62f4 <LCD_command>
    639c:	60 e0       	ldi	r22, 0x00	; 0
    639e:	80 e0       	ldi	r24, 0x00	; 0
    63a0:	ef df       	rcall	.-34     	; 0x6380 <LCD_pos>
    63a2:	6a e0       	ldi	r22, 0x0A	; 10
    63a4:	70 e0       	ldi	r23, 0x00	; 0
    63a6:	80 e0       	ldi	r24, 0x00	; 0
    63a8:	90 e0       	ldi	r25, 0x00	; 0
    63aa:	d1 c8       	rjmp	.-3678   	; 0x554e <delayms>
    63ac:	08 95       	ret

000063ae <LCD_setFastBacklightRGB>:
} // moveCursorRight


//New command - set backlight with LCD messages or delaymss
void LCD_setFastBacklightRGB(byte r, byte g, byte b)
{
    63ae:	1f 93       	push	r17
    63b0:	cf 93       	push	r28
    63b2:	df 93       	push	r29
    63b4:	18 2f       	mov	r17, r24
    63b6:	d6 2f       	mov	r29, r22
    63b8:	c4 2f       	mov	r28, r20
  //send commands to the display to set backlights
  if( !I2C_Start(lcd_address) )
    63ba:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <lcd_address>
    63be:	5b df       	rcall	.-330    	; 0x6276 <I2C_Start>
    63c0:	89 2b       	or	r24, r25
	return;
  I2C_Send(SETTING_COMMAND); //Send special command character
    63c2:	81 f0       	breq	.+32     	; 0x63e4 <LCD_setFastBacklightRGB+0x36>
  I2C_Send(SET_RGB_COMMAND); //Send the set RGB character '+' or plus
    63c4:	8c e7       	ldi	r24, 0x7C	; 124
  I2C_Send(r);               //Send the red value
  I2C_Send(g);               //Send the green value
    63c6:	73 df       	rcall	.-282    	; 0x62ae <I2C_Send>
    63c8:	8b e2       	ldi	r24, 0x2B	; 43
  I2C_Send(b);               //Send the blue value
    63ca:	71 df       	rcall	.-286    	; 0x62ae <I2C_Send>
    63cc:	81 2f       	mov	r24, r17
  I2C_Stop();         //Stop transmission
    63ce:	6f df       	rcall	.-290    	; 0x62ae <I2C_Send>
    63d0:	8d 2f       	mov	r24, r29
  delayms(10);
    63d2:	6d df       	rcall	.-294    	; 0x62ae <I2C_Send>
    63d4:	8c 2f       	mov	r24, r28
    63d6:	6b df       	rcall	.-298    	; 0x62ae <I2C_Send>
    63d8:	62 df       	rcall	.-316    	; 0x629e <I2C_Stop>
    63da:	6a e0       	ldi	r22, 0x0A	; 10
    63dc:	70 e0       	ldi	r23, 0x00	; 0
} // setFastBacklight
    63de:	80 e0       	ldi	r24, 0x00	; 0
    63e0:	90 e0       	ldi	r25, 0x00	; 0
    63e2:	b5 d8       	rcall	.-3734   	; 0x554e <delayms>
    63e4:	df 91       	pop	r29
    63e6:	cf 91       	pop	r28
    63e8:	1f 91       	pop	r17
    63ea:	08 95       	ret

000063ec <LCD_init>:
 *
 */
bool LCD_init(uint8_t addr)
{
  
  if( !I2C_Start(lcd_address = addr) )
    63ec:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <lcd_address>
    63f0:	42 df       	rcall	.-380    	; 0x6276 <I2C_Start>
    63f2:	00 97       	sbiw	r24, 0x00	; 0
	return 0;

  I2C_Send(SPECIAL_COMMAND);                      //Send special command character
    63f4:	61 f1       	breq	.+88     	; 0x644e <LCD_init+0x62>
    63f6:	8e ef       	ldi	r24, 0xFE	; 254
  I2C_Send(LCD_DISPLAYCONTROL | _displayControl); //Send the display command
    63f8:	5a df       	rcall	.-332    	; 0x62ae <I2C_Send>
    63fa:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <_displayControl>

  I2C_Send(SPECIAL_COMMAND);                      //Send special command character
    63fe:	88 60       	ori	r24, 0x08	; 8
    6400:	56 df       	rcall	.-340    	; 0x62ae <I2C_Send>
  I2C_Send(LCD_ENTRYMODESET | _displayMode);      //Send the entry mode command
    6402:	8e ef       	ldi	r24, 0xFE	; 254
    6404:	54 df       	rcall	.-344    	; 0x62ae <I2C_Send>

  I2C_Send(SETTING_COMMAND);                      //Put LCD into setting mode
    6406:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <_displayMode>
  I2C_Send(CLEAR_COMMAND);                        //Send clear display command

  I2C_Send(SETTING_COMMAND);                      //Send special command character
    640a:	84 60       	ori	r24, 0x04	; 4
  I2C_Send(DISABLE_SYSTEM_MESSAGE_DISPLAY);       //Send the set '.' character
    640c:	50 df       	rcall	.-352    	; 0x62ae <I2C_Send>
    640e:	8c e7       	ldi	r24, 0x7C	; 124

  I2C_Send(SPECIAL_COMMAND);                      //Send special command character
    6410:	4e df       	rcall	.-356    	; 0x62ae <I2C_Send>
    6412:	8d e2       	ldi	r24, 0x2D	; 45
  I2C_Send(LCD_SETDDRAMADDR | 0);				// HOME 0,0
    6414:	4c df       	rcall	.-360    	; 0x62ae <I2C_Send>
    6416:	8c e7       	ldi	r24, 0x7C	; 124

  I2C_Stop();
    6418:	4a df       	rcall	.-364    	; 0x62ae <I2C_Send>
    641a:	8f e2       	ldi	r24, 0x2F	; 47
  delayms(50);                                      //let things settle a bit
    641c:	48 df       	rcall	.-368    	; 0x62ae <I2C_Send>
    641e:	8e ef       	ldi	r24, 0xFE	; 254
    6420:	46 df       	rcall	.-372    	; 0x62ae <I2C_Send>
    6422:	80 e8       	ldi	r24, 0x80	; 128
    6424:	44 df       	rcall	.-376    	; 0x62ae <I2C_Send>
    6426:	3b df       	rcall	.-394    	; 0x629e <I2C_Stop>

  LCD_setFastBacklightRGB ( 0xC0, 0xC0, 0xC0 );
    6428:	62 e3       	ldi	r22, 0x32	; 50
    642a:	70 e0       	ldi	r23, 0x00	; 0
    642c:	80 e0       	ldi	r24, 0x00	; 0
    642e:	90 e0       	ldi	r25, 0x00	; 0
    6430:	8e d8       	rcall	.-3812   	; 0x554e <delayms>

  lcd.xpos = 0;
    6432:	40 ec       	ldi	r20, 0xC0	; 192
    6434:	60 ec       	ldi	r22, 0xC0	; 192
    6436:	80 ec       	ldi	r24, 0xC0	; 192
    6438:	ba df       	rcall	.-140    	; 0x63ae <LCD_setFastBacklightRGB>
  lcd.ypos = 0;
    643a:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <lcd+0x1>
    643e:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <lcd>

  return(1);
    6442:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <lcd+0x3>
} //init
    6446:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <lcd+0x2>
    644a:	81 e0       	ldi	r24, 0x01	; 1
    644c:	90 e0       	ldi	r25, 0x00	; 0
    644e:	08 95       	ret

00006450 <lcd_cleareol>:
	{
		LCD_putb(' ');
		rem--;
	}
	LCD_pos(lcd.xpos = 0,lcd.ypos);
}
    6450:	cf 93       	push	r28
    6452:	df 93       	push	r29
    6454:	c0 91 14 01 	lds	r28, 0x0114	; 0x800114 <lcd+0x4>
    6458:	d0 91 15 01 	lds	r29, 0x0115	; 0x800115 <lcd+0x5>
    645c:	21 97       	sbiw	r28, 0x01	; 1
    645e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <lcd>
    6462:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <lcd+0x1>
    6466:	c8 1b       	sub	r28, r24
    6468:	d9 0b       	sbc	r29, r25
    646a:	1c 16       	cp	r1, r28
    646c:	1d 06       	cpc	r1, r29
    646e:	24 f4       	brge	.+8      	; 0x6478 <lcd_cleareol+0x28>
    6470:	80 e2       	ldi	r24, 0x20	; 32
    6472:	2e df       	rcall	.-420    	; 0x62d0 <LCD_putb>
    6474:	21 97       	sbiw	r28, 0x01	; 1
    6476:	f9 cf       	rjmp	.-14     	; 0x646a <lcd_cleareol+0x1a>
    6478:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <lcd+0x4>
    647c:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <lcd+0x5>
    6480:	01 97       	sbiw	r24, 0x01	; 1
    6482:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <lcd+0x1>
    6486:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <lcd>
    648a:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <lcd+0x2>
    648e:	78 df       	rcall	.-272    	; 0x6380 <LCD_pos>
    6490:	df 91       	pop	r29
    6492:	cf 91       	pop	r28
    6494:	08 95       	ret

00006496 <lcd_putch>:

/// @brief  put character 
/// @param[in] c: character
/// return: void
void lcd_putch(int c)
{
    6496:	cf 93       	push	r28
    6498:	df 93       	push	r29
	int rem;

	if(c < 0 || c > 0x7e)
    649a:	8f 37       	cpi	r24, 0x7F	; 127
    649c:	91 05       	cpc	r25, r1
    649e:	08 f0       	brcs	.+2      	; 0x64a2 <lcd_putch+0xc>
    64a0:	50 c0       	rjmp	.+160    	; 0x6542 <lcd_putch+0xac>
    64a2:	ec 01       	movw	r28, r24
		return;

	// Normal visible characters
	if(c >= ' ')
    64a4:	80 32       	cpi	r24, 0x20	; 32
    64a6:	91 05       	cpc	r25, r1
    64a8:	4c f1       	brlt	.+82     	; 0x64fc <lcd_putch+0x66>
	{
		rem = (lcd.w - 1 - lcd.xpos);
		if( rem <= 0 )
    64aa:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <lcd+0x4>
    64ae:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <lcd+0x5>
    64b2:	01 97       	sbiw	r24, 0x01	; 1
    64b4:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <lcd>
    64b8:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <lcd+0x1>
    64bc:	82 1b       	sub	r24, r18
    64be:	93 0b       	sbc	r25, r19
    64c0:	18 16       	cp	r1, r24
    64c2:	19 06       	cpc	r1, r25
    64c4:	7c f0       	brlt	.+30     	; 0x64e4 <lcd_putch+0x4e>
		{
			LCD_pos(++lcd.ypos,lcd.xpos=0);
    64c6:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <lcd+0x2>
    64ca:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <lcd+0x3>
    64ce:	01 96       	adiw	r24, 0x01	; 1
    64d0:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <lcd+0x3>
    64d4:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <lcd+0x2>
    64d8:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <lcd+0x1>
    64dc:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <lcd>
    64e0:	60 e0       	ldi	r22, 0x00	; 0
		}
		(void) LCD_putb(c);
    64e2:	4e df       	rcall	.-356    	; 0x6380 <LCD_pos>
    64e4:	8c 2f       	mov	r24, r28
		// uart_putchar(c,0);
		lcd.xpos++;
    64e6:	f4 de       	rcall	.-536    	; 0x62d0 <LCD_putb>
    64e8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <lcd>
    64ec:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <lcd+0x1>
    64f0:	01 96       	adiw	r24, 0x01	; 1
    64f2:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <lcd+0x1>
    64f6:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <lcd>
		return;
	}

	// Control characters
	if(c == '\n')
    64fa:	23 c0       	rjmp	.+70     	; 0x6542 <lcd_putch+0xac>
    64fc:	8a 30       	cpi	r24, 0x0A	; 10
	{
		// uart_putchar(c,0);
		lcd_cleareol();
    64fe:	91 05       	cpc	r25, r1
    6500:	91 f4       	brne	.+36     	; 0x6526 <lcd_putch+0x90>
		++lcd.ypos;
		lcd.ypos &= 3;
    6502:	a6 df       	rcall	.-180    	; 0x6450 <lcd_cleareol>
    6504:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <lcd+0x2>
    6508:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <lcd+0x3>
    650c:	6f 5f       	subi	r22, 0xFF	; 255
    650e:	7f 4f       	sbci	r23, 0xFF	; 255
    6510:	63 70       	andi	r22, 0x03	; 3
    6512:	77 27       	eor	r23, r23
    6514:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <lcd+0x3>
    6518:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <lcd+0x2>
		LCD_pos(lcd.xpos=0,lcd.ypos);
    651c:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <lcd+0x1>
    6520:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <lcd>
	}

	if(c == '\f')
    6524:	0c c0       	rjmp	.+24     	; 0x653e <lcd_putch+0xa8>
	{
		LCD_clear();
    6526:	0c 97       	sbiw	r24, 0x0c	; 12
    6528:	61 f4       	brne	.+24     	; 0x6542 <lcd_putch+0xac>
		LCD_pos(lcd.xpos=0,lcd.ypos=0);
    652a:	36 df       	rcall	.-404    	; 0x6398 <LCD_clear>
    652c:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <lcd+0x1>
    6530:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <lcd>
    6534:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <lcd+0x3>
    6538:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <lcd+0x2>
    653c:	60 e0       	ldi	r22, 0x00	; 0
    653e:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    6540:	1f df       	rcall	.-450    	; 0x6380 <LCD_pos>
    6542:	df 91       	pop	r29
    6544:	cf 91       	pop	r28
    6546:	08 95       	ret

00006548 <_putc_win>:


// We do not use the printf structure
static void _putc_win(struct _printf_t *p, char ch)
{
    6548:	fc 01       	movw	r30, r24
	p->sent++;
    654a:	26 81       	ldd	r18, Z+6	; 0x06
    654c:	37 81       	ldd	r19, Z+7	; 0x07
    654e:	2f 5f       	subi	r18, 0xFF	; 255
    6550:	3f 4f       	sbci	r19, 0xFF	; 255
    6552:	37 83       	std	Z+7, r19	; 0x07
    6554:	26 83       	std	Z+6, r18	; 0x06
	lcd_putch(ch);
    6556:	86 2f       	mov	r24, r22
    6558:	90 e0       	ldi	r25, 0x00	; 0
    655a:	9d cf       	rjmp	.-198    	; 0x6496 <lcd_putch>
    655c:	08 95       	ret

0000655e <lcd_printf>:
/// @param[in] fmt: printf forat string
/// @param[in] ...: vararg list or arguments
/// @return size of string
MEMSPACE
int lcd_printf(const char *fmt, ... )
{
    655e:	a8 e0       	ldi	r26, 0x08	; 8
    6560:	b0 e0       	ldi	r27, 0x00	; 0
    6562:	e5 eb       	ldi	r30, 0xB5	; 181
    6564:	f2 e3       	ldi	r31, 0x32	; 50
    6566:	0c 94 29 e5 	jmp	0x1ca52	; 0x1ca52 <__prologue_saves__+0x20>
    656a:	9e 01       	movw	r18, r28
    656c:	23 5f       	subi	r18, 0xF3	; 243
    656e:	3f 4f       	sbci	r19, 0xFF	; 255
    6570:	f9 01       	movw	r30, r18
    6572:	41 91       	ld	r20, Z+
    6574:	51 91       	ld	r21, Z+
    6576:	9f 01       	movw	r18, r30
    printf_t fn;

    fn.put = _putc_win;
    6578:	84 ea       	ldi	r24, 0xA4	; 164
    657a:	92 e3       	ldi	r25, 0x32	; 50
    657c:	9a 83       	std	Y+2, r25	; 0x02
    657e:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    6580:	18 86       	std	Y+8, r1	; 0x08
    6582:	1f 82       	std	Y+7, r1	; 0x07

    va_list va;
    va_start(va, fmt);

    _printf_fn(&fn, fmt, va);
    6584:	60 e8       	ldi	r22, 0x80	; 128
    6586:	ce 01       	movw	r24, r28
    6588:	01 96       	adiw	r24, 0x01	; 1
    658a:	0e 94 8d 43 	call	0x871a	; 0x871a <_printf_fn>

    va_end(va);

	return(fn.sent);

}
    658e:	8f 81       	ldd	r24, Y+7	; 0x07
    6590:	98 85       	ldd	r25, Y+8	; 0x08
    6592:	28 96       	adiw	r28, 0x08	; 8
    6594:	e2 e0       	ldi	r30, 0x02	; 2
    6596:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__epilogue_restores__+0x20>

0000659a <islower>:
    if(!ptr)
        return(ptr);
    strncpy(ptr,str,len);
    return(ptr);

}
    659a:	9c 01       	movw	r18, r24
    659c:	21 56       	subi	r18, 0x61	; 97
    659e:	31 09       	sbc	r19, r1
    65a0:	81 e0       	ldi	r24, 0x01	; 1
    65a2:	90 e0       	ldi	r25, 0x00	; 0
    65a4:	2a 31       	cpi	r18, 0x1A	; 26
    65a6:	31 05       	cpc	r19, r1
    65a8:	10 f0       	brcs	.+4      	; 0x65ae <islower+0x14>
    65aa:	80 e0       	ldi	r24, 0x00	; 0
    65ac:	90 e0       	ldi	r25, 0x00	; 0
    65ae:	08 95       	ret

000065b0 <toupper>:
    65b0:	cf 93       	push	r28
    65b2:	df 93       	push	r29
    65b4:	ec 01       	movw	r28, r24
    65b6:	f1 df       	rcall	.-30     	; 0x659a <islower>
    65b8:	89 2b       	or	r24, r25
    65ba:	19 f0       	breq	.+6      	; 0x65c2 <toupper+0x12>
    65bc:	ce 01       	movw	r24, r28
    65be:	80 97       	sbiw	r24, 0x20	; 32
    65c0:	01 c0       	rjmp	.+2      	; 0x65c4 <toupper+0x14>
    65c2:	ce 01       	movw	r24, r28
    65c4:	df 91       	pop	r29
    65c6:	cf 91       	pop	r28
    65c8:	08 95       	ret

000065ca <strcpy>:
    65ca:	fc 01       	movw	r30, r24
    65cc:	db 01       	movw	r26, r22
    65ce:	2d 91       	ld	r18, X+
    65d0:	bd 01       	movw	r22, r26
    65d2:	01 96       	adiw	r24, 0x01	; 1
    65d4:	22 23       	and	r18, r18
    65d6:	11 f0       	breq	.+4      	; 0x65dc <strcpy+0x12>
    65d8:	20 83       	st	Z, r18
    65da:	f7 cf       	rjmp	.-18     	; 0x65ca <strcpy>
    65dc:	10 82       	st	Z, r1
    65de:	08 95       	ret

000065e0 <strncpy>:
    65e0:	db 01       	movw	r26, r22
    65e2:	fc 01       	movw	r30, r24
    65e4:	2d 91       	ld	r18, X+
    65e6:	21 11       	cpse	r18, r1
    65e8:	03 c0       	rjmp	.+6      	; 0x65f0 <strncpy+0x10>
    65ea:	4e 0f       	add	r20, r30
    65ec:	5f 1f       	adc	r21, r31
    65ee:	08 c0       	rjmp	.+16     	; 0x6600 <strncpy+0x20>
    65f0:	41 15       	cp	r20, r1
    65f2:	51 05       	cpc	r21, r1
    65f4:	21 f0       	breq	.+8      	; 0x65fe <strncpy+0x1e>
    65f6:	21 93       	st	Z+, r18
    65f8:	41 50       	subi	r20, 0x01	; 1
    65fa:	51 09       	sbc	r21, r1
    65fc:	f3 cf       	rjmp	.-26     	; 0x65e4 <strncpy+0x4>
    65fe:	08 95       	ret
    6600:	4e 17       	cp	r20, r30
    6602:	5f 07       	cpc	r21, r31
    6604:	11 f0       	breq	.+4      	; 0x660a <strncpy+0x2a>
    6606:	11 92       	st	Z+, r1
    6608:	fb cf       	rjmp	.-10     	; 0x6600 <strncpy+0x20>
    660a:	08 95       	ret

0000660c <strcat>:
    660c:	cf 93       	push	r28
    660e:	df 93       	push	r29
    6610:	d8 2f       	mov	r29, r24
    6612:	c9 2f       	mov	r28, r25
    6614:	28 2f       	mov	r18, r24
    6616:	39 2f       	mov	r19, r25
    6618:	c9 01       	movw	r24, r18
    661a:	2f 5f       	subi	r18, 0xFF	; 255
    661c:	3f 4f       	sbci	r19, 0xFF	; 255
    661e:	fc 01       	movw	r30, r24
    6620:	40 81       	ld	r20, Z
    6622:	41 11       	cpse	r20, r1
    6624:	f9 cf       	rjmp	.-14     	; 0x6618 <strcat+0xc>
    6626:	d1 df       	rcall	.-94     	; 0x65ca <strcpy>
    6628:	8d 2f       	mov	r24, r29
    662a:	9c 2f       	mov	r25, r28
    662c:	df 91       	pop	r29
    662e:	cf 91       	pop	r28
    6630:	08 95       	ret

00006632 <reverse>:
    6632:	fc 01       	movw	r30, r24
    6634:	01 90       	ld	r0, Z+
    6636:	00 20       	and	r0, r0
    6638:	e9 f7       	brne	.-6      	; 0x6634 <reverse+0x2>
    663a:	31 97       	sbiw	r30, 0x01	; 1
    663c:	e8 1b       	sub	r30, r24
    663e:	f9 0b       	sbc	r31, r25
    6640:	af 01       	movw	r20, r30
    6642:	55 95       	asr	r21
    6644:	47 95       	ror	r20
    6646:	e8 0f       	add	r30, r24
    6648:	f9 1f       	adc	r31, r25
    664a:	dc 01       	movw	r26, r24
    664c:	9d 01       	movw	r18, r26
    664e:	28 1b       	sub	r18, r24
    6650:	39 0b       	sbc	r19, r25
    6652:	24 17       	cp	r18, r20
    6654:	35 07       	cpc	r19, r21
    6656:	2c f4       	brge	.+10     	; 0x6662 <reverse+0x30>
    6658:	22 91       	ld	r18, -Z
    665a:	3c 91       	ld	r19, X
    665c:	30 83       	st	Z, r19
    665e:	2d 93       	st	X+, r18
    6660:	f5 cf       	rjmp	.-22     	; 0x664c <reverse+0x1a>
    6662:	08 95       	ret

00006664 <strupper>:
    6664:	cf 93       	push	r28
    6666:	df 93       	push	r29
    6668:	ec 01       	movw	r28, r24
    666a:	88 81       	ld	r24, Y
    666c:	88 23       	and	r24, r24
    666e:	21 f0       	breq	.+8      	; 0x6678 <strupper+0x14>
    6670:	90 e0       	ldi	r25, 0x00	; 0
    6672:	9e df       	rcall	.-196    	; 0x65b0 <toupper>
    6674:	89 93       	st	Y+, r24
    6676:	f9 cf       	rjmp	.-14     	; 0x666a <strupper+0x6>
    6678:	df 91       	pop	r29
    667a:	cf 91       	pop	r28
    667c:	08 95       	ret

0000667e <strcmp>:
    667e:	dc 01       	movw	r26, r24
    6680:	fb 01       	movw	r30, r22
    6682:	2d 91       	ld	r18, X+
    6684:	41 91       	ld	r20, Z+
    6686:	50 e0       	ldi	r21, 0x00	; 0
    6688:	30 e0       	ldi	r19, 0x00	; 0
    668a:	c9 01       	movw	r24, r18
    668c:	84 1b       	sub	r24, r20
    668e:	95 0b       	sbc	r25, r21
    6690:	11 f4       	brne	.+4      	; 0x6696 <strcmp+0x18>
    6692:	45 2b       	or	r20, r21
    6694:	b1 f7       	brne	.-20     	; 0x6682 <strcmp+0x4>
    6696:	08 95       	ret

00006698 <strcasecmp>:
    6698:	ef 92       	push	r14
    669a:	ff 92       	push	r15
    669c:	0f 93       	push	r16
    669e:	1f 93       	push	r17
    66a0:	cf 93       	push	r28
    66a2:	df 93       	push	r29
    66a4:	7c 01       	movw	r14, r24
    66a6:	8b 01       	movw	r16, r22
    66a8:	f7 01       	movw	r30, r14
    66aa:	81 91       	ld	r24, Z+
    66ac:	7f 01       	movw	r14, r30
    66ae:	90 e0       	ldi	r25, 0x00	; 0
    66b0:	7f df       	rcall	.-258    	; 0x65b0 <toupper>
    66b2:	ec 01       	movw	r28, r24
    66b4:	f8 01       	movw	r30, r16
    66b6:	81 91       	ld	r24, Z+
    66b8:	8f 01       	movw	r16, r30
    66ba:	90 e0       	ldi	r25, 0x00	; 0
    66bc:	79 df       	rcall	.-270    	; 0x65b0 <toupper>
    66be:	9c 01       	movw	r18, r24
    66c0:	ce 01       	movw	r24, r28
    66c2:	82 1b       	sub	r24, r18
    66c4:	93 0b       	sbc	r25, r19
    66c6:	11 f4       	brne	.+4      	; 0x66cc <strcasecmp+0x34>
    66c8:	23 2b       	or	r18, r19
    66ca:	71 f7       	brne	.-36     	; 0x66a8 <strcasecmp+0x10>
    66cc:	cd b7       	in	r28, 0x3d	; 61
    66ce:	de b7       	in	r29, 0x3e	; 62
    66d0:	e6 e0       	ldi	r30, 0x06	; 6
    66d2:	0c 94 41 e5 	jmp	0x1ca82	; 0x1ca82 <__epilogue_restores__+0x18>

000066d6 <strncasecmp>:
    66d6:	a0 e0       	ldi	r26, 0x00	; 0
    66d8:	b0 e0       	ldi	r27, 0x00	; 0
    66da:	e1 e7       	ldi	r30, 0x71	; 113
    66dc:	f3 e3       	ldi	r31, 0x33	; 51
    66de:	0c 94 23 e5 	jmp	0x1ca46	; 0x1ca46 <__prologue_saves__+0x14>
    66e2:	8c 01       	movw	r16, r24
    66e4:	7b 01       	movw	r14, r22
    66e6:	6c 01       	movw	r12, r24
    66e8:	c4 0e       	add	r12, r20
    66ea:	d5 1e       	adc	r13, r21
    66ec:	0c 15       	cp	r16, r12
    66ee:	1d 05       	cpc	r17, r13
    66f0:	99 f0       	breq	.+38     	; 0x6718 <strncasecmp+0x42>
    66f2:	f8 01       	movw	r30, r16
    66f4:	81 91       	ld	r24, Z+
    66f6:	8f 01       	movw	r16, r30
    66f8:	90 e0       	ldi	r25, 0x00	; 0
    66fa:	5a df       	rcall	.-332    	; 0x65b0 <toupper>
    66fc:	ec 01       	movw	r28, r24
    66fe:	f7 01       	movw	r30, r14
    6700:	81 91       	ld	r24, Z+
    6702:	7f 01       	movw	r14, r30
    6704:	90 e0       	ldi	r25, 0x00	; 0
    6706:	54 df       	rcall	.-344    	; 0x65b0 <toupper>
    6708:	9c 01       	movw	r18, r24
    670a:	ce 01       	movw	r24, r28
    670c:	82 1b       	sub	r24, r18
    670e:	93 0b       	sbc	r25, r19
    6710:	29 f4       	brne	.+10     	; 0x671c <strncasecmp+0x46>
    6712:	23 2b       	or	r18, r19
    6714:	59 f7       	brne	.-42     	; 0x66ec <strncasecmp+0x16>
    6716:	02 c0       	rjmp	.+4      	; 0x671c <strncasecmp+0x46>
    6718:	80 e0       	ldi	r24, 0x00	; 0
    671a:	90 e0       	ldi	r25, 0x00	; 0
    671c:	cd b7       	in	r28, 0x3d	; 61
    671e:	de b7       	in	r29, 0x3e	; 62
    6720:	e8 e0       	ldi	r30, 0x08	; 8
    6722:	0c 94 3f e5 	jmp	0x1ca7e	; 0x1ca7e <__epilogue_restores__+0x14>

00006726 <stralloc>:
///
///@return pointer to alocated string.
///@return NULL on out of memory.
MEMSPACE
char *stralloc(char *str)
{
    6726:	0f 93       	push	r16
    6728:	1f 93       	push	r17
    672a:	cf 93       	push	r28
    672c:	df 93       	push	r29
    char *ptr;
    int len;

    if(!str)
    672e:	00 97       	sbiw	r24, 0x00	; 0
    6730:	99 f0       	breq	.+38     	; 0x6758 <stralloc+0x32>
    6732:	ec 01       	movw	r28, r24
        return(str);;
    len  = strlen(str);
    6734:	fc 01       	movw	r30, r24
    6736:	01 90       	ld	r0, Z+
    6738:	00 20       	and	r0, r0
    673a:	e9 f7       	brne	.-6      	; 0x6736 <stralloc+0x10>
    673c:	cf 01       	movw	r24, r30
    ptr = safecalloc(len+1,1);
    673e:	61 e0       	ldi	r22, 0x01	; 1
    6740:	70 e0       	ldi	r23, 0x00	; 0
    6742:	8c 1b       	sub	r24, r28
    6744:	9d 0b       	sbc	r25, r29
    6746:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <safecalloc>
    674a:	8c 01       	movw	r16, r24
    if(!ptr)
    674c:	00 97       	sbiw	r24, 0x00	; 0
    674e:	21 f0       	breq	.+8      	; 0x6758 <stralloc+0x32>
        return(ptr);
    strcpy(ptr,str);
    6750:	be 01       	movw	r22, r28
    6752:	3b df       	rcall	.-394    	; 0x65ca <strcpy>
    return(ptr);
    6754:	c8 01       	movw	r24, r16
    6756:	02 c0       	rjmp	.+4      	; 0x675c <stralloc+0x36>
    6758:	80 e0       	ldi	r24, 0x00	; 0
    675a:	90 e0       	ldi	r25, 0x00	; 0
}
    675c:	df 91       	pop	r29
    675e:	cf 91       	pop	r28
    6760:	1f 91       	pop	r17
    6762:	0f 91       	pop	r16
    6764:	08 95       	ret

00006766 <sep>:
        return(0);

    if(strncmp(str,pat,patlen) == 0)
        return(len);
    return(0);
}
    6766:	00 d0       	rcall	.+0      	; 0x6768 <sep+0x2>
    6768:	1f 92       	push	r1
    676a:	85 ee       	ldi	r24, 0xE5	; 229
    676c:	94 e0       	ldi	r25, 0x04	; 4
    676e:	a0 e0       	ldi	r26, 0x00	; 0
    6770:	ed b7       	in	r30, 0x3d	; 61
    6772:	fe b7       	in	r31, 0x3e	; 62
    6774:	81 83       	std	Z+1, r24	; 0x01
    6776:	92 83       	std	Z+2, r25	; 0x02
    6778:	a3 83       	std	Z+3, r26	; 0x03
    677a:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    677e:	0f 90       	pop	r0
    6780:	0f 90       	pop	r0
    6782:	0f 90       	pop	r0
    6784:	08 95       	ret

00006786 <trim_tail>:
    6786:	00 97       	sbiw	r24, 0x00	; 0
    6788:	69 f0       	breq	.+26     	; 0x67a4 <trim_tail+0x1e>
    678a:	fc 01       	movw	r30, r24
    678c:	01 90       	ld	r0, Z+
    678e:	00 20       	and	r0, r0
    6790:	e9 f7       	brne	.-6      	; 0x678c <trim_tail+0x6>
    6792:	31 97       	sbiw	r30, 0x01	; 1
    6794:	e8 17       	cp	r30, r24
    6796:	f9 07       	cpc	r31, r25
    6798:	29 f0       	breq	.+10     	; 0x67a4 <trim_tail+0x1e>
    679a:	22 91       	ld	r18, -Z
    679c:	21 32       	cpi	r18, 0x21	; 33
    679e:	10 f4       	brcc	.+4      	; 0x67a4 <trim_tail+0x1e>
    67a0:	10 82       	st	Z, r1
    67a2:	f8 cf       	rjmp	.-16     	; 0x6794 <trim_tail+0xe>
    67a4:	08 95       	ret

000067a6 <skipspaces>:
    67a6:	00 97       	sbiw	r24, 0x00	; 0
    67a8:	39 f0       	breq	.+14     	; 0x67b8 <skipspaces+0x12>
    67aa:	fc 01       	movw	r30, r24
    67ac:	cf 01       	movw	r24, r30
    67ae:	21 91       	ld	r18, Z+
    67b0:	20 32       	cpi	r18, 0x20	; 32
    67b2:	e1 f3       	breq	.-8      	; 0x67ac <skipspaces+0x6>
    67b4:	29 30       	cpi	r18, 0x09	; 9
    67b6:	d1 f3       	breq	.-12     	; 0x67ac <skipspaces+0x6>
    67b8:	08 95       	ret

000067ba <MATCH>:
    67ba:	cf 93       	push	r28
    67bc:	df 93       	push	r29
    67be:	fb 01       	movw	r30, r22
    67c0:	01 90       	ld	r0, Z+
    67c2:	00 20       	and	r0, r0
    67c4:	e9 f7       	brne	.-6      	; 0x67c0 <MATCH+0x6>
    67c6:	31 97       	sbiw	r30, 0x01	; 1
    67c8:	ef 01       	movw	r28, r30
    67ca:	c6 1b       	sub	r28, r22
    67cc:	d7 0b       	sbc	r29, r23
    67ce:	57 df       	rcall	.-338    	; 0x667e <strcmp>
    67d0:	89 2b       	or	r24, r25
    67d2:	11 f4       	brne	.+4      	; 0x67d8 <MATCH+0x1e>
    67d4:	ce 01       	movw	r24, r28
    67d6:	02 c0       	rjmp	.+4      	; 0x67dc <MATCH+0x22>
    67d8:	80 e0       	ldi	r24, 0x00	; 0
    67da:	90 e0       	ldi	r25, 0x00	; 0
    67dc:	df 91       	pop	r29
    67de:	cf 91       	pop	r28
    67e0:	08 95       	ret

000067e2 <MATCHI>:
    67e2:	cf 93       	push	r28
    67e4:	df 93       	push	r29
    67e6:	fb 01       	movw	r30, r22
    67e8:	01 90       	ld	r0, Z+
    67ea:	00 20       	and	r0, r0
    67ec:	e9 f7       	brne	.-6      	; 0x67e8 <MATCHI+0x6>
    67ee:	31 97       	sbiw	r30, 0x01	; 1
    67f0:	ef 01       	movw	r28, r30
    67f2:	c6 1b       	sub	r28, r22
    67f4:	d7 0b       	sbc	r29, r23
    67f6:	50 df       	rcall	.-352    	; 0x6698 <strcasecmp>
    67f8:	89 2b       	or	r24, r25
    67fa:	11 f4       	brne	.+4      	; 0x6800 <MATCHI+0x1e>
    67fc:	ce 01       	movw	r24, r28
    67fe:	02 c0       	rjmp	.+4      	; 0x6804 <MATCHI+0x22>
    6800:	80 e0       	ldi	r24, 0x00	; 0
    6802:	90 e0       	ldi	r25, 0x00	; 0
    6804:	df 91       	pop	r29
    6806:	cf 91       	pop	r28
    6808:	08 95       	ret

0000680a <MATCHARGS>:
    680a:	a9 e0       	ldi	r26, 0x09	; 9
    680c:	b0 e0       	ldi	r27, 0x00	; 0
    680e:	eb e0       	ldi	r30, 0x0B	; 11
    6810:	f4 e3       	ldi	r31, 0x34	; 52
    6812:	0c 94 25 e5 	jmp	0x1ca4a	; 0x1ca4a <__prologue_saves__+0x18>
    6816:	eb 01       	movw	r28, r22
    6818:	8a 01       	movw	r16, r20
    681a:	79 01       	movw	r14, r18
    681c:	e2 df       	rcall	.-60     	; 0x67e2 <MATCHI>
    681e:	00 97       	sbiw	r24, 0x00	; 0
    6820:	c1 f0       	breq	.+48     	; 0x6852 <MATCHARGS+0x48>
    6822:	e0 16       	cp	r14, r16
    6824:	f1 06       	cpc	r15, r17
    6826:	9c f4       	brge	.+38     	; 0x684e <MATCHARGS+0x44>
    6828:	ed b7       	in	r30, 0x3d	; 61
    682a:	fe b7       	in	r31, 0x3e	; 62
    682c:	f1 86       	std	Z+9, r15	; 0x09
    682e:	e0 86       	std	Z+8, r14	; 0x08
    6830:	17 83       	std	Z+7, r17	; 0x07
    6832:	06 83       	std	Z+6, r16	; 0x06
    6834:	d5 83       	std	Z+5, r29	; 0x05
    6836:	c4 83       	std	Z+4, r28	; 0x04
    6838:	8f eb       	ldi	r24, 0xBF	; 191
    683a:	94 e0       	ldi	r25, 0x04	; 4
    683c:	a0 e0       	ldi	r26, 0x00	; 0
    683e:	81 83       	std	Z+1, r24	; 0x01
    6840:	92 83       	std	Z+2, r25	; 0x02
    6842:	a3 83       	std	Z+3, r26	; 0x03
    6844:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    6848:	80 e0       	ldi	r24, 0x00	; 0
    684a:	90 e0       	ldi	r25, 0x00	; 0
    684c:	02 c0       	rjmp	.+4      	; 0x6852 <MATCHARGS+0x48>
    684e:	81 e0       	ldi	r24, 0x01	; 1
    6850:	90 e0       	ldi	r25, 0x00	; 0
    6852:	cd b7       	in	r28, 0x3d	; 61
    6854:	de b7       	in	r29, 0x3e	; 62
    6856:	29 96       	adiw	r28, 0x09	; 9
    6858:	e6 e0       	ldi	r30, 0x06	; 6
    685a:	0c 94 41 e5 	jmp	0x1ca82	; 0x1ca82 <__epilogue_restores__+0x18>

0000685e <MATCHI_LEN>:
    685e:	cf 93       	push	r28
    6860:	df 93       	push	r29
    6862:	00 97       	sbiw	r24, 0x00	; 0
    6864:	89 f0       	breq	.+34     	; 0x6888 <MATCHI_LEN+0x2a>
    6866:	61 15       	cp	r22, r1
    6868:	71 05       	cpc	r23, r1
    686a:	71 f0       	breq	.+28     	; 0x6888 <MATCHI_LEN+0x2a>
    686c:	eb 01       	movw	r28, r22
    686e:	09 90       	ld	r0, Y+
    6870:	00 20       	and	r0, r0
    6872:	e9 f7       	brne	.-6      	; 0x686e <MATCHI_LEN+0x10>
    6874:	21 97       	sbiw	r28, 0x01	; 1
    6876:	c6 1b       	sub	r28, r22
    6878:	d7 0b       	sbc	r29, r23
    687a:	31 f0       	breq	.+12     	; 0x6888 <MATCHI_LEN+0x2a>
    687c:	ae 01       	movw	r20, r28
    687e:	2b df       	rcall	.-426    	; 0x66d6 <strncasecmp>
    6880:	89 2b       	or	r24, r25
    6882:	11 f4       	brne	.+4      	; 0x6888 <MATCHI_LEN+0x2a>
    6884:	ce 01       	movw	r24, r28
    6886:	02 c0       	rjmp	.+4      	; 0x688c <MATCHI_LEN+0x2e>
    6888:	80 e0       	ldi	r24, 0x00	; 0
    688a:	90 e0       	ldi	r25, 0x00	; 0
    688c:	df 91       	pop	r29
    688e:	cf 91       	pop	r28
    6890:	08 95       	ret

00006892 <split_args>:
    6892:	a0 e0       	ldi	r26, 0x00	; 0
    6894:	b0 e0       	ldi	r27, 0x00	; 0
    6896:	ef e4       	ldi	r30, 0x4F	; 79
    6898:	f4 e3       	ldi	r31, 0x34	; 52
    689a:	0c 94 23 e5 	jmp	0x1ca46	; 0x1ca46 <__prologue_saves__+0x14>
    689e:	dc 01       	movw	r26, r24
    68a0:	6a 01       	movw	r12, r20
    68a2:	8b 01       	movw	r16, r22
    68a4:	fb 01       	movw	r30, r22
    68a6:	80 e0       	ldi	r24, 0x00	; 0
    68a8:	90 e0       	ldi	r25, 0x00	; 0
    68aa:	8c 15       	cp	r24, r12
    68ac:	9d 05       	cpc	r25, r13
    68ae:	24 f4       	brge	.+8      	; 0x68b8 <split_args+0x26>
    68b0:	11 92       	st	Z+, r1
    68b2:	11 92       	st	Z+, r1
    68b4:	01 96       	adiw	r24, 0x01	; 1
    68b6:	f9 cf       	rjmp	.-14     	; 0x68aa <split_args+0x18>
    68b8:	c1 14       	cp	r12, r1
    68ba:	d1 04       	cpc	r13, r1
    68bc:	d9 f1       	breq	.+118    	; 0x6934 <split_args+0xa2>
    68be:	10 97       	sbiw	r26, 0x00	; 0
    68c0:	c9 f1       	breq	.+114    	; 0x6934 <split_args+0xa2>
    68c2:	ee 24       	eor	r14, r14
    68c4:	e3 94       	inc	r14
    68c6:	f1 2c       	mov	r15, r1
    68c8:	c0 e0       	ldi	r28, 0x00	; 0
    68ca:	d0 e0       	ldi	r29, 0x00	; 0
    68cc:	8c 91       	ld	r24, X
    68ce:	88 23       	and	r24, r24
    68d0:	b1 f1       	breq	.+108    	; 0x693e <split_args+0xac>
    68d2:	cc 15       	cp	r28, r12
    68d4:	dd 05       	cpc	r29, r13
    68d6:	9c f5       	brge	.+102    	; 0x693e <split_args+0xac>
    68d8:	cd 01       	movw	r24, r26
    68da:	65 df       	rcall	.-310    	; 0x67a6 <skipspaces>
    68dc:	dc 01       	movw	r26, r24
    68de:	2c 91       	ld	r18, X
    68e0:	22 23       	and	r18, r18
    68e2:	69 f1       	breq	.+90     	; 0x693e <split_args+0xac>
    68e4:	22 32       	cpi	r18, 0x22	; 34
    68e6:	79 f4       	brne	.+30     	; 0x6906 <split_args+0x74>
    68e8:	fc 01       	movw	r30, r24
    68ea:	31 96       	adiw	r30, 0x01	; 1
    68ec:	d8 01       	movw	r26, r16
    68ee:	ed 93       	st	X+, r30
    68f0:	fc 93       	st	X, r31
    68f2:	df 01       	movw	r26, r30
    68f4:	80 81       	ld	r24, Z
    68f6:	31 96       	adiw	r30, 0x01	; 1
    68f8:	88 23       	and	r24, r24
    68fa:	a9 f0       	breq	.+42     	; 0x6926 <split_args+0x94>
    68fc:	82 32       	cpi	r24, 0x22	; 34
    68fe:	c9 f7       	brne	.-14     	; 0x68f2 <split_args+0x60>
    6900:	1c 92       	st	X, r1
    6902:	df 01       	movw	r26, r30
    6904:	10 c0       	rjmp	.+32     	; 0x6926 <split_args+0x94>
    6906:	f8 01       	movw	r30, r16
    6908:	91 83       	std	Z+1, r25	; 0x01
    690a:	80 83       	st	Z, r24
    690c:	fc 01       	movw	r30, r24
    690e:	2e 2f       	mov	r18, r30
    6910:	9f 2f       	mov	r25, r31
    6912:	81 91       	ld	r24, Z+
    6914:	3f ed       	ldi	r19, 0xDF	; 223
    6916:	38 0f       	add	r19, r24
    6918:	3e 35       	cpi	r19, 0x5E	; 94
    691a:	c8 f3       	brcs	.-14     	; 0x690e <split_args+0x7c>
    691c:	88 23       	and	r24, r24
    691e:	69 f0       	breq	.+26     	; 0x693a <split_args+0xa8>
    6920:	a2 2f       	mov	r26, r18
    6922:	b9 2f       	mov	r27, r25
    6924:	1d 92       	st	X+, r1
    6926:	21 96       	adiw	r28, 0x01	; 1
    6928:	ff ef       	ldi	r31, 0xFF	; 255
    692a:	ef 1a       	sub	r14, r31
    692c:	ff 0a       	sbc	r15, r31
    692e:	0e 5f       	subi	r16, 0xFE	; 254
    6930:	1f 4f       	sbci	r17, 0xFF	; 255
    6932:	cc cf       	rjmp	.-104    	; 0x68cc <split_args+0x3a>
    6934:	80 e0       	ldi	r24, 0x00	; 0
    6936:	90 e0       	ldi	r25, 0x00	; 0
    6938:	03 c0       	rjmp	.+6      	; 0x6940 <split_args+0xae>
    693a:	c7 01       	movw	r24, r14
    693c:	01 c0       	rjmp	.+2      	; 0x6940 <split_args+0xae>
    693e:	ce 01       	movw	r24, r28
    6940:	cd b7       	in	r28, 0x3d	; 61
    6942:	de b7       	in	r29, 0x3e	; 62
    6944:	e8 e0       	ldi	r30, 0x08	; 8
    6946:	0c 94 3f e5 	jmp	0x1ca7e	; 0x1ca7e <__epilogue_restores__+0x14>

0000694a <get_token>:
    694a:	ef 92       	push	r14
    694c:	ff 92       	push	r15
    694e:	0f 93       	push	r16
    6950:	1f 93       	push	r17
    6952:	cf 93       	push	r28
    6954:	df 93       	push	r29
    6956:	eb 01       	movw	r28, r22
    6958:	8a 01       	movw	r16, r20
    695a:	18 82       	st	Y, r1
    695c:	00 97       	sbiw	r24, 0x00	; 0
    695e:	89 f1       	breq	.+98     	; 0x69c2 <get_token+0x78>
    6960:	fc 01       	movw	r30, r24
    6962:	20 81       	ld	r18, Z
    6964:	22 23       	and	r18, r18
    6966:	79 f1       	breq	.+94     	; 0x69c6 <get_token+0x7c>
    6968:	1e df       	rcall	.-452    	; 0x67a6 <skipspaces>
    696a:	7c 01       	movw	r14, r24
    696c:	0c df       	rcall	.-488    	; 0x6786 <trim_tail>
    696e:	f7 01       	movw	r30, r14
    6970:	cf 01       	movw	r24, r30
    6972:	21 91       	ld	r18, Z+
    6974:	21 32       	cpi	r18, 0x21	; 33
    6976:	e0 f0       	brcs	.+56     	; 0x69b0 <get_token+0x66>
    6978:	10 16       	cp	r1, r16
    697a:	11 06       	cpc	r1, r17
    697c:	cc f4       	brge	.+50     	; 0x69b0 <get_token+0x66>
    697e:	22 32       	cpi	r18, 0x22	; 34
    6980:	79 f4       	brne	.+30     	; 0x69a0 <get_token+0x56>
    6982:	fc 01       	movw	r30, r24
    6984:	31 96       	adiw	r30, 0x01	; 1
    6986:	0c 0f       	add	r16, r28
    6988:	1d 1f       	adc	r17, r29
    698a:	cf 01       	movw	r24, r30
    698c:	21 91       	ld	r18, Z+
    698e:	22 23       	and	r18, r18
    6990:	79 f0       	breq	.+30     	; 0x69b0 <get_token+0x66>
    6992:	22 32       	cpi	r18, 0x22	; 34
    6994:	59 f0       	breq	.+22     	; 0x69ac <get_token+0x62>
    6996:	c0 17       	cp	r28, r16
    6998:	d1 07       	cpc	r29, r17
    699a:	51 f0       	breq	.+20     	; 0x69b0 <get_token+0x66>
    699c:	29 93       	st	Y+, r18
    699e:	f5 cf       	rjmp	.-22     	; 0x698a <get_token+0x40>
    69a0:	2c 32       	cpi	r18, 0x2C	; 44
    69a2:	31 f0       	breq	.+12     	; 0x69b0 <get_token+0x66>
    69a4:	29 93       	st	Y+, r18
    69a6:	01 50       	subi	r16, 0x01	; 1
    69a8:	11 09       	sbc	r17, r1
    69aa:	e2 cf       	rjmp	.-60     	; 0x6970 <get_token+0x26>
    69ac:	cf 01       	movw	r24, r30
    69ae:	18 82       	st	Y, r1
    69b0:	fa de       	rcall	.-524    	; 0x67a6 <skipspaces>
    69b2:	fc 01       	movw	r30, r24
    69b4:	80 81       	ld	r24, Z
    69b6:	8c 32       	cpi	r24, 0x2C	; 44
    69b8:	09 f4       	brne	.+2      	; 0x69bc <get_token+0x72>
    69ba:	31 96       	adiw	r30, 0x01	; 1
    69bc:	18 82       	st	Y, r1
    69be:	cf 01       	movw	r24, r30
    69c0:	02 c0       	rjmp	.+4      	; 0x69c6 <get_token+0x7c>
    69c2:	80 e0       	ldi	r24, 0x00	; 0
    69c4:	90 e0       	ldi	r25, 0x00	; 0
    69c6:	cd b7       	in	r28, 0x3d	; 61
    69c8:	de b7       	in	r29, 0x3e	; 62
    69ca:	e6 e0       	ldi	r30, 0x06	; 6
    69cc:	0c 94 41 e5 	jmp	0x1ca82	; 0x1ca82 <__epilogue_restores__+0x18>

000069d0 <get_value>:
/// @param[in] str: string to examine
///
/// @return  value
MEMSPACE
int32_t get_value(char *str)
{ 
    69d0:	a2 e0       	ldi	r26, 0x02	; 2
    69d2:	b0 e0       	ldi	r27, 0x00	; 0
    69d4:	ee ee       	ldi	r30, 0xEE	; 238
    69d6:	f4 e3       	ldi	r31, 0x34	; 52
    69d8:	0c 94 27 e5 	jmp	0x1ca4e	; 0x1ca4e <__prologue_saves__+0x1c>
    int base;
    int ret;
    char *ptr;
    char *endptr;

    if(!str || *str == 0)
    69dc:	00 97       	sbiw	r24, 0x00	; 0
    69de:	79 f1       	breq	.+94     	; 0x6a3e <get_value+0x6e>
    69e0:	fc 01       	movw	r30, r24
    69e2:	20 81       	ld	r18, Z
    69e4:	22 23       	and	r18, r18
        return(0);

    ptr = skipspaces(str);
    69e6:	59 f1       	breq	.+86     	; 0x6a3e <get_value+0x6e>
    69e8:	de de       	rcall	.-580    	; 0x67a6 <skipspaces>
    base = 10;

    // convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    69ea:	8c 01       	movw	r16, r24
    69ec:	6d e4       	ldi	r22, 0x4D	; 77
    69ee:	72 e0       	ldi	r23, 0x02	; 2
    69f0:	36 df       	rcall	.-404    	; 0x685e <MATCHI_LEN>
    69f2:	00 97       	sbiw	r24, 0x00	; 0
    {
        base = 16;
        ptr += ret;
    69f4:	29 f0       	breq	.+10     	; 0x6a00 <get_value+0x30>
    69f6:	08 0f       	add	r16, r24
    base = 10;

    // convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    {
        base = 16;
    69f8:	19 1f       	adc	r17, r25
    69fa:	40 e1       	ldi	r20, 0x10	; 16
    69fc:	50 e0       	ldi	r21, 0x00	; 0
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    69fe:	18 c0       	rjmp	.+48     	; 0x6a30 <get_value+0x60>
    6a00:	60 e5       	ldi	r22, 0x50	; 80
    6a02:	72 e0       	ldi	r23, 0x02	; 2
    6a04:	c8 01       	movw	r24, r16
    6a06:	2b df       	rcall	.-426    	; 0x685e <MATCHI_LEN>
    6a08:	00 97       	sbiw	r24, 0x00	; 0
    {
        base = 8;
        ptr += ret;
    6a0a:	29 f0       	breq	.+10     	; 0x6a16 <get_value+0x46>
    6a0c:	08 0f       	add	r16, r24
        base = 16;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    {
        base = 8;
    6a0e:	19 1f       	adc	r17, r25
    6a10:	48 e0       	ldi	r20, 0x08	; 8
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    6a12:	50 e0       	ldi	r21, 0x00	; 0
    6a14:	0d c0       	rjmp	.+26     	; 0x6a30 <get_value+0x60>
    6a16:	63 e5       	ldi	r22, 0x53	; 83
    6a18:	72 e0       	ldi	r23, 0x02	; 2
    6a1a:	c8 01       	movw	r24, r16
    6a1c:	20 df       	rcall	.-448    	; 0x685e <MATCHI_LEN>
    {
        base = 2;
        ptr += ret;
    6a1e:	00 97       	sbiw	r24, 0x00	; 0
    6a20:	29 f0       	breq	.+10     	; 0x6a2c <get_value+0x5c>
        base = 8;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
    6a22:	08 0f       	add	r16, r24
    6a24:	19 1f       	adc	r17, r25
    6a26:	42 e0       	ldi	r20, 0x02	; 2

    if(!str || *str == 0)
        return(0);

    ptr = skipspaces(str);
    base = 10;
    6a28:	50 e0       	ldi	r21, 0x00	; 0
    6a2a:	02 c0       	rjmp	.+4      	; 0x6a30 <get_value+0x60>
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
    6a2c:	4a e0       	ldi	r20, 0x0A	; 10
    6a2e:	50 e0       	ldi	r21, 0x00	; 0
    6a30:	be 01       	movw	r22, r28
    6a32:	6f 5f       	subi	r22, 0xFF	; 255
    6a34:	7f 4f       	sbci	r23, 0xFF	; 255
    6a36:	c8 01       	movw	r24, r16
    6a38:	0e 94 28 48 	call	0x9050	; 0x9050 <strtol>
    int ret;
    char *ptr;
    char *endptr;

    if(!str || *str == 0)
        return(0);
    6a3c:	03 c0       	rjmp	.+6      	; 0x6a44 <get_value+0x74>
    6a3e:	60 e0       	ldi	r22, 0x00	; 0
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
}
    6a40:	70 e0       	ldi	r23, 0x00	; 0
    6a42:	cb 01       	movw	r24, r22
    6a44:	22 96       	adiw	r28, 0x02	; 2
    6a46:	e4 e0       	ldi	r30, 0x04	; 4
    6a48:	0c 94 43 e5 	jmp	0x1ca86	; 0x1ca86 <__epilogue_restores__+0x1c>

00006a4c <enable_system_task>:
/// @brief Enable interrupts
/// @return void.
MEMSPACE
void enable_system_task()
{
    sei();
    6a4c:	78 94       	sei
    6a4e:	08 95       	ret

00006a50 <install_timers_isr>:
///
/// @see ISR().
/// @return void.
MEMSPACE void install_timers_isr()
{
    cli();
    6a50:	f8 94       	cli
    TCCR1B=(1<<WGM12) | TIMER1_PRE_1;   // No Prescale
    6a52:	89 e0       	ldi	r24, 0x09	; 9
    6a54:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    TCCR1A=0;
    6a58:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    OCR1A=(TIMER1_COUNTS_PER_TIC-1);    // 0 .. count
    6a5c:	8f e1       	ldi	r24, 0x1F	; 31
    6a5e:	9e e4       	ldi	r25, 0x4E	; 78
    6a60:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    6a64:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    TIMSK1 |= (1<<OCIE1A);              //Enable the Output Compare A interrupt
    6a68:	ef e6       	ldi	r30, 0x6F	; 111
    6a6a:	f0 e0       	ldi	r31, 0x00	; 0
    6a6c:	80 81       	ld	r24, Z
    6a6e:	82 60       	ori	r24, 0x02	; 2
    6a70:	80 83       	st	Z, r24
    sei();
    6a72:	78 94       	sei
    6a74:	08 95       	ret

00006a76 <__vector_13>:
/// @brief AVR Timer Interrupt Vector
///
/// - calls execute_timers() - we call this the System task.
///
ISR(TIMER1_COMPA_vect)
{
    6a76:	1f 92       	push	r1
    6a78:	0f 92       	push	r0
    6a7a:	0f b6       	in	r0, 0x3f	; 63
    6a7c:	0f 92       	push	r0
    6a7e:	11 24       	eor	r1, r1
    6a80:	0b b6       	in	r0, 0x3b	; 59
    6a82:	0f 92       	push	r0
    6a84:	2f 93       	push	r18
    6a86:	3f 93       	push	r19
    6a88:	4f 93       	push	r20
    6a8a:	5f 93       	push	r21
    6a8c:	6f 93       	push	r22
    6a8e:	7f 93       	push	r23
    6a90:	8f 93       	push	r24
    6a92:	9f 93       	push	r25
    6a94:	af 93       	push	r26
    6a96:	bf 93       	push	r27
    6a98:	ef 93       	push	r30
    execute_timers();
    6a9a:	ff 93       	push	r31
}
    6a9c:	36 d2       	rcall	.+1132   	; 0x6f0a <execute_timers>
    6a9e:	ff 91       	pop	r31
    6aa0:	ef 91       	pop	r30
    6aa2:	bf 91       	pop	r27
    6aa4:	af 91       	pop	r26
    6aa6:	9f 91       	pop	r25
    6aa8:	8f 91       	pop	r24
    6aaa:	7f 91       	pop	r23
    6aac:	6f 91       	pop	r22
    6aae:	5f 91       	pop	r21
    6ab0:	4f 91       	pop	r20
    6ab2:	3f 91       	pop	r19
    6ab4:	2f 91       	pop	r18
    6ab6:	0f 90       	pop	r0
    6ab8:	0b be       	out	0x3b, r0	; 59
    6aba:	0f 90       	pop	r0
    6abc:	0f be       	out	0x3f, r0	; 63
    6abe:	0f 90       	pop	r0
    6ac0:	1f 90       	pop	r1
    6ac2:	18 95       	reti

00006ac4 <clock_gettime>:
///
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    6ac4:	0f 93       	push	r16
    6ac6:	1f 93       	push	r17
    6ac8:	cf 93       	push	r28
    6aca:	df 93       	push	r29
    6acc:	fb 01       	movw	r30, r22
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;

    // disable interrupts
    cli();
    6ace:	f8 94       	cli

    count1 = TCNT1;
    6ad0:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    6ad4:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    ts->tv_sec = __clock.tv_sec;
    6ad8:	80 91 e2 19 	lds	r24, 0x19E2	; 0x8019e2 <__clock>
    6adc:	90 91 e3 19 	lds	r25, 0x19E3	; 0x8019e3 <__clock+0x1>
    6ae0:	a0 91 e4 19 	lds	r26, 0x19E4	; 0x8019e4 <__clock+0x2>
    6ae4:	b0 91 e5 19 	lds	r27, 0x19E5	; 0x8019e5 <__clock+0x3>
    6ae8:	80 83       	st	Z, r24
    6aea:	91 83       	std	Z+1, r25	; 0x01
    6aec:	a2 83       	std	Z+2, r26	; 0x02
    6aee:	b3 83       	std	Z+3, r27	; 0x03
    ts->tv_nsec = __clock.tv_nsec;
    6af0:	80 91 e6 19 	lds	r24, 0x19E6	; 0x8019e6 <__clock+0x4>
    6af4:	90 91 e7 19 	lds	r25, 0x19E7	; 0x8019e7 <__clock+0x5>
    6af8:	a0 91 e8 19 	lds	r26, 0x19E8	; 0x8019e8 <__clock+0x6>
    6afc:	b0 91 e9 19 	lds	r27, 0x19E9	; 0x8019e9 <__clock+0x7>
    6b00:	84 83       	std	Z+4, r24	; 0x04
    6b02:	95 83       	std	Z+5, r25	; 0x05
    6b04:	a6 83       	std	Z+6, r26	; 0x06
    6b06:	b7 83       	std	Z+7, r27	; 0x07

    count2 = TCNT1;
    6b08:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    6b0c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    if( TIFR1 & (1<<OCF1A) )
    6b10:	b1 9b       	sbis	0x16, 1	; 22
    6b12:	03 c0       	rjmp	.+6      	; 0x6b1a <clock_gettime+0x56>
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    6b14:	c0 e0       	ldi	r28, 0x00	; 0
    6b16:	d0 e0       	ldi	r29, 0x00	; 0
    6b18:	3f c0       	rjmp	.+126    	; 0x6b98 <clock_gettime+0xd4>
    count2 = TCNT1;

    if( TIFR1 & (1<<OCF1A) )
        pendingf = 1;

    if (count2 < count1)
    6b1a:	82 17       	cp	r24, r18
    6b1c:	93 07       	cpc	r25, r19
    6b1e:	d0 f1       	brcs	.+116    	; 0x6b94 <clock_gettime+0xd0>
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    6b20:	c0 e0       	ldi	r28, 0x00	; 0
    6b22:	d0 e0       	ldi	r29, 0x00	; 0
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    6b24:	40 e0       	ldi	r20, 0x00	; 0
    6b26:	50 e0       	ldi	r21, 0x00	; 0
    6b28:	ba 01       	movw	r22, r20
    else
    {
        if( pendingf )
            offset = TIMER1_COUNTS_PER_TIC;       // overflow
    }
    offset += count2;
    6b2a:	9a 01       	movw	r18, r20
    6b2c:	ab 01       	movw	r20, r22
    6b2e:	28 0f       	add	r18, r24
    6b30:	39 1f       	adc	r19, r25
    6b32:	41 1d       	adc	r20, r1
    6b34:	51 1d       	adc	r21, r1

    // enable interrupts
    sei();
    6b36:	78 94       	sei

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    6b38:	a2 e3       	ldi	r26, 0x32	; 50
    6b3a:	b0 e0       	ldi	r27, 0x00	; 0
    6b3c:	0e 94 f9 e4 	call	0x1c9f2	; 0x1c9f2 <__muluhisi3>
    6b40:	04 81       	ldd	r16, Z+4	; 0x04
    6b42:	15 81       	ldd	r17, Z+5	; 0x05
    6b44:	26 81       	ldd	r18, Z+6	; 0x06
    6b46:	37 81       	ldd	r19, Z+7	; 0x07
    6b48:	dc 01       	movw	r26, r24
    6b4a:	cb 01       	movw	r24, r22
    6b4c:	80 0f       	add	r24, r16
    6b4e:	91 1f       	adc	r25, r17
    6b50:	a2 1f       	adc	r26, r18
    6b52:	b3 1f       	adc	r27, r19

    if (ts->tv_nsec >= 1000000000L)
    6b54:	81 15       	cp	r24, r1
    6b56:	2a ec       	ldi	r18, 0xCA	; 202
    6b58:	92 07       	cpc	r25, r18
    6b5a:	2a e9       	ldi	r18, 0x9A	; 154
    6b5c:	a2 07       	cpc	r26, r18
    6b5e:	2b e3       	ldi	r18, 0x3B	; 59
    6b60:	b2 07       	cpc	r27, r18
    6b62:	2c f4       	brge	.+10     	; 0x6b6e <clock_gettime+0xaa>
    // enable interrupts
    sei();

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    6b64:	84 83       	std	Z+4, r24	; 0x04
    6b66:	95 83       	std	Z+5, r25	; 0x05
    6b68:	a6 83       	std	Z+6, r26	; 0x06
    6b6a:	b7 83       	std	Z+7, r27	; 0x07
    6b6c:	1a c0       	rjmp	.+52     	; 0x6ba2 <clock_gettime+0xde>

    if (ts->tv_nsec >= 1000000000L)
    {
        ts->tv_nsec -= 1000000000L;
    6b6e:	9a 5c       	subi	r25, 0xCA	; 202
    6b70:	aa 49       	sbci	r26, 0x9A	; 154
    6b72:	bb 43       	sbci	r27, 0x3B	; 59
    6b74:	84 83       	std	Z+4, r24	; 0x04
    6b76:	95 83       	std	Z+5, r25	; 0x05
    6b78:	a6 83       	std	Z+6, r26	; 0x06
    6b7a:	b7 83       	std	Z+7, r27	; 0x07
        ts->tv_sec++;
    6b7c:	80 81       	ld	r24, Z
    6b7e:	91 81       	ldd	r25, Z+1	; 0x01
    6b80:	a2 81       	ldd	r26, Z+2	; 0x02
    6b82:	b3 81       	ldd	r27, Z+3	; 0x03
    6b84:	01 96       	adiw	r24, 0x01	; 1
    6b86:	a1 1d       	adc	r26, r1
    6b88:	b1 1d       	adc	r27, r1
    6b8a:	80 83       	st	Z, r24
    6b8c:	91 83       	std	Z+1, r25	; 0x01
    6b8e:	a2 83       	std	Z+2, r26	; 0x02
    6b90:	b3 83       	std	Z+3, r27	; 0x03
    }
    return(errorf);
    6b92:	07 c0       	rjmp	.+14     	; 0x6ba2 <clock_gettime+0xde>

    if (count2 < count1)
    {
///  note: counter2 < count1 implies ISR flag must be set
        if( !pendingf )
            errorf = -1;    // counter overflow and NO pending is an error!
    6b94:	cf ef       	ldi	r28, 0xFF	; 255
    6b96:	df ef       	ldi	r29, 0xFF	; 255
        offset = TIMER1_COUNTS_PER_TIC;           // overflow
    6b98:	40 e2       	ldi	r20, 0x20	; 32
    6b9a:	5e e4       	ldi	r21, 0x4E	; 78
    6b9c:	60 e0       	ldi	r22, 0x00	; 0
    6b9e:	70 e0       	ldi	r23, 0x00	; 0
    6ba0:	c4 cf       	rjmp	.-120    	; 0x6b2a <clock_gettime+0x66>
    {
        ts->tv_nsec -= 1000000000L;
        ts->tv_sec++;
    }
    return(errorf);
}
    6ba2:	ce 01       	movw	r24, r28
    6ba4:	df 91       	pop	r29
    6ba6:	cf 91       	pop	r28
    6ba8:	1f 91       	pop	r17
    6baa:	0f 91       	pop	r16
    6bac:	08 95       	ret

00006bae <clock_task>:
void disable_timers()
{
    if(timers_configured && timers_enabled)
    {
        disable_system_task();
        timers_enabled = 0;
    6bae:	80 91 e6 19 	lds	r24, 0x19E6	; 0x8019e6 <__clock+0x4>
    6bb2:	90 91 e7 19 	lds	r25, 0x19E7	; 0x8019e7 <__clock+0x5>
    6bb6:	a0 91 e8 19 	lds	r26, 0x19E8	; 0x8019e8 <__clock+0x6>
    6bba:	b0 91 e9 19 	lds	r27, 0x19E9	; 0x8019e9 <__clock+0x7>
    6bbe:	80 5c       	subi	r24, 0xC0	; 192
    6bc0:	9d 4b       	sbci	r25, 0xBD	; 189
    6bc2:	a0 4f       	sbci	r26, 0xF0	; 240
    6bc4:	bf 4f       	sbci	r27, 0xFF	; 255
    6bc6:	80 93 e6 19 	sts	0x19E6, r24	; 0x8019e6 <__clock+0x4>
    6bca:	90 93 e7 19 	sts	0x19E7, r25	; 0x8019e7 <__clock+0x5>
    6bce:	a0 93 e8 19 	sts	0x19E8, r26	; 0x8019e8 <__clock+0x6>
    6bd2:	b0 93 e9 19 	sts	0x19E9, r27	; 0x8019e9 <__clock+0x7>
    6bd6:	80 91 e6 19 	lds	r24, 0x19E6	; 0x8019e6 <__clock+0x4>
    6bda:	90 91 e7 19 	lds	r25, 0x19E7	; 0x8019e7 <__clock+0x5>
    6bde:	a0 91 e8 19 	lds	r26, 0x19E8	; 0x8019e8 <__clock+0x6>
    6be2:	b0 91 e9 19 	lds	r27, 0x19E9	; 0x8019e9 <__clock+0x7>
    6be6:	81 15       	cp	r24, r1
    6be8:	9a 4c       	sbci	r25, 0xCA	; 202
    6bea:	aa 49       	sbci	r26, 0x9A	; 154
    6bec:	bb 43       	sbci	r27, 0x3B	; 59
    6bee:	dc f0       	brlt	.+54     	; 0x6c26 <clock_task+0x78>
    6bf0:	80 91 e2 19 	lds	r24, 0x19E2	; 0x8019e2 <__clock>
    6bf4:	90 91 e3 19 	lds	r25, 0x19E3	; 0x8019e3 <__clock+0x1>
    6bf8:	a0 91 e4 19 	lds	r26, 0x19E4	; 0x8019e4 <__clock+0x2>
    6bfc:	b0 91 e5 19 	lds	r27, 0x19E5	; 0x8019e5 <__clock+0x3>
    6c00:	01 96       	adiw	r24, 0x01	; 1
    6c02:	a1 1d       	adc	r26, r1
    6c04:	b1 1d       	adc	r27, r1
    6c06:	80 93 e2 19 	sts	0x19E2, r24	; 0x8019e2 <__clock>
    6c0a:	90 93 e3 19 	sts	0x19E3, r25	; 0x8019e3 <__clock+0x1>
    6c0e:	a0 93 e4 19 	sts	0x19E4, r26	; 0x8019e4 <__clock+0x2>
    6c12:	b0 93 e5 19 	sts	0x19E5, r27	; 0x8019e5 <__clock+0x3>
    6c16:	10 92 e6 19 	sts	0x19E6, r1	; 0x8019e6 <__clock+0x4>
    6c1a:	10 92 e7 19 	sts	0x19E7, r1	; 0x8019e7 <__clock+0x5>
    6c1e:	10 92 e8 19 	sts	0x19E8, r1	; 0x8019e8 <__clock+0x6>
    6c22:	10 92 e9 19 	sts	0x19E9, r1	; 0x8019e9 <__clock+0x7>
    6c26:	08 95       	ret

00006c28 <clock_settime.part.2>:
    6c28:	fc 01       	movw	r30, r24
    6c2a:	84 81       	ldd	r24, Z+4	; 0x04
    6c2c:	95 81       	ldd	r25, Z+5	; 0x05
    6c2e:	a6 81       	ldd	r26, Z+6	; 0x06
    6c30:	b7 81       	ldd	r27, Z+7	; 0x07
    6c32:	80 93 e6 19 	sts	0x19E6, r24	; 0x8019e6 <__clock+0x4>
    6c36:	90 93 e7 19 	sts	0x19E7, r25	; 0x8019e7 <__clock+0x5>
    6c3a:	a0 93 e8 19 	sts	0x19E8, r26	; 0x8019e8 <__clock+0x6>
    6c3e:	b0 93 e9 19 	sts	0x19E9, r27	; 0x8019e9 <__clock+0x7>
    6c42:	80 81       	ld	r24, Z
    6c44:	91 81       	ldd	r25, Z+1	; 0x01
    6c46:	a2 81       	ldd	r26, Z+2	; 0x02
    6c48:	b3 81       	ldd	r27, Z+3	; 0x03
    6c4a:	80 93 e2 19 	sts	0x19E2, r24	; 0x8019e2 <__clock>
    6c4e:	90 93 e3 19 	sts	0x19E3, r25	; 0x8019e3 <__clock+0x1>
    6c52:	a0 93 e4 19 	sts	0x19E4, r26	; 0x8019e4 <__clock+0x2>
    6c56:	b0 93 e5 19 	sts	0x19E5, r27	; 0x8019e5 <__clock+0x3>
    6c5a:	80 91 e6 19 	lds	r24, 0x19E6	; 0x8019e6 <__clock+0x4>
    6c5e:	90 91 e7 19 	lds	r25, 0x19E7	; 0x8019e7 <__clock+0x5>
    6c62:	a0 91 e8 19 	lds	r26, 0x19E8	; 0x8019e8 <__clock+0x6>
    6c66:	b0 91 e9 19 	lds	r27, 0x19E9	; 0x8019e9 <__clock+0x7>
    6c6a:	44 81       	ldd	r20, Z+4	; 0x04
    6c6c:	55 81       	ldd	r21, Z+5	; 0x05
    6c6e:	66 81       	ldd	r22, Z+6	; 0x06
    6c70:	77 81       	ldd	r23, Z+7	; 0x07
    6c72:	48 17       	cp	r20, r24
    6c74:	59 07       	cpc	r21, r25
    6c76:	6a 07       	cpc	r22, r26
    6c78:	7b 07       	cpc	r23, r27
    6c7a:	b9 f6       	brne	.-82     	; 0x6c2a <clock_settime.part.2+0x2>
    6c7c:	80 91 e2 19 	lds	r24, 0x19E2	; 0x8019e2 <__clock>
    6c80:	90 91 e3 19 	lds	r25, 0x19E3	; 0x8019e3 <__clock+0x1>
    6c84:	a0 91 e4 19 	lds	r26, 0x19E4	; 0x8019e4 <__clock+0x2>
    6c88:	b0 91 e5 19 	lds	r27, 0x19E5	; 0x8019e5 <__clock+0x3>
    6c8c:	40 81       	ld	r20, Z
    6c8e:	51 81       	ldd	r21, Z+1	; 0x01
    6c90:	62 81       	ldd	r22, Z+2	; 0x02
    6c92:	73 81       	ldd	r23, Z+3	; 0x03
    6c94:	48 17       	cp	r20, r24
    6c96:	59 07       	cpc	r21, r25
    6c98:	6a 07       	cpc	r22, r26
    6c9a:	7b 07       	cpc	r23, r27
    6c9c:	31 f6       	brne	.-116    	; 0x6c2a <clock_settime.part.2+0x2>
    6c9e:	80 e0       	ldi	r24, 0x00	; 0
    6ca0:	90 e0       	ldi	r25, 0x00	; 0
    6ca2:	08 95       	ret

00006ca4 <set_timers>:
    6ca4:	00 d0       	rcall	.+0      	; 0x6ca6 <set_timers+0x2>
    6ca6:	1f 92       	push	r1
    6ca8:	00 97       	sbiw	r24, 0x00	; 0
    6caa:	79 f1       	breq	.+94     	; 0x6d0a <set_timers+0x66>
    6cac:	ea ee       	ldi	r30, 0xEA	; 234
    6cae:	f9 e1       	ldi	r31, 0x19	; 25
    6cb0:	4f ef       	ldi	r20, 0xFF	; 255
    6cb2:	5f ef       	ldi	r21, 0xFF	; 255
    6cb4:	20 e0       	ldi	r18, 0x00	; 0
    6cb6:	30 e0       	ldi	r19, 0x00	; 0
    6cb8:	60 81       	ld	r22, Z
    6cba:	71 81       	ldd	r23, Z+1	; 0x01
    6cbc:	86 17       	cp	r24, r22
    6cbe:	97 07       	cpc	r25, r23
    6cc0:	79 f0       	breq	.+30     	; 0x6ce0 <set_timers+0x3c>
    6cc2:	67 2b       	or	r22, r23
    6cc4:	71 f4       	brne	.+28     	; 0x6ce2 <set_timers+0x3e>
    6cc6:	f9 01       	movw	r30, r18
    6cc8:	ee 0f       	add	r30, r30
    6cca:	ff 1f       	adc	r31, r31
    6ccc:	e2 0f       	add	r30, r18
    6cce:	f3 1f       	adc	r31, r19
    6cd0:	e6 51       	subi	r30, 0x16	; 22
    6cd2:	f6 4e       	sbci	r31, 0xE6	; 230
    6cd4:	91 83       	std	Z+1, r25	; 0x01
    6cd6:	80 83       	st	Z, r24
    6cd8:	81 e0       	ldi	r24, 0x01	; 1
    6cda:	82 83       	std	Z+2, r24	; 0x02
    6cdc:	c9 01       	movw	r24, r18
    6cde:	19 c0       	rjmp	.+50     	; 0x6d12 <set_timers+0x6e>
    6ce0:	a9 01       	movw	r20, r18
    6ce2:	2f 5f       	subi	r18, 0xFF	; 255
    6ce4:	3f 4f       	sbci	r19, 0xFF	; 255
    6ce6:	33 96       	adiw	r30, 0x03	; 3
    6ce8:	28 30       	cpi	r18, 0x08	; 8
    6cea:	31 05       	cpc	r19, r1
    6cec:	29 f7       	brne	.-54     	; 0x6cb8 <set_timers+0x14>
    6cee:	4f 3f       	cpi	r20, 0xFF	; 255
    6cf0:	8f ef       	ldi	r24, 0xFF	; 255
    6cf2:	58 07       	cpc	r21, r24
    6cf4:	69 f4       	brne	.+26     	; 0x6d10 <set_timers+0x6c>
    6cf6:	84 e9       	ldi	r24, 0x94	; 148
    6cf8:	95 e0       	ldi	r25, 0x05	; 5
    6cfa:	a0 e0       	ldi	r26, 0x00	; 0
    6cfc:	ed b7       	in	r30, 0x3d	; 61
    6cfe:	fe b7       	in	r31, 0x3e	; 62
    6d00:	81 83       	std	Z+1, r24	; 0x01
    6d02:	92 83       	std	Z+2, r25	; 0x02
    6d04:	a3 83       	std	Z+3, r26	; 0x03
    6d06:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    6d0a:	8f ef       	ldi	r24, 0xFF	; 255
    6d0c:	9f ef       	ldi	r25, 0xFF	; 255
    6d0e:	01 c0       	rjmp	.+2      	; 0x6d12 <set_timers+0x6e>
    6d10:	ca 01       	movw	r24, r20
    6d12:	0f 90       	pop	r0
    6d14:	0f 90       	pop	r0
    6d16:	0f 90       	pop	r0
    6d18:	08 95       	ret

00006d1a <delete_all_timers>:
    6d1a:	ea ee       	ldi	r30, 0xEA	; 234
    6d1c:	f9 e1       	ldi	r31, 0x19	; 25
    6d1e:	12 82       	std	Z+2, r1	; 0x02
    6d20:	11 82       	std	Z+1, r1	; 0x01
    6d22:	10 82       	st	Z, r1
    6d24:	33 96       	adiw	r30, 0x03	; 3
    6d26:	8a e1       	ldi	r24, 0x1A	; 26
    6d28:	e2 30       	cpi	r30, 0x02	; 2
    6d2a:	f8 07       	cpc	r31, r24
    6d2c:	c1 f7       	brne	.-16     	; 0x6d1e <delete_all_timers+0x4>
    6d2e:	08 95       	ret

00006d30 <subtract_timespec>:
    6d30:	0f 93       	push	r16
    6d32:	1f 93       	push	r17
    6d34:	cf 93       	push	r28
    6d36:	df 93       	push	r29
    6d38:	fc 01       	movw	r30, r24
    6d3a:	84 81       	ldd	r24, Z+4	; 0x04
    6d3c:	95 81       	ldd	r25, Z+5	; 0x05
    6d3e:	a6 81       	ldd	r26, Z+6	; 0x06
    6d40:	b7 81       	ldd	r27, Z+7	; 0x07
    6d42:	eb 01       	movw	r28, r22
    6d44:	0c 81       	ldd	r16, Y+4	; 0x04
    6d46:	1d 81       	ldd	r17, Y+5	; 0x05
    6d48:	2e 81       	ldd	r18, Y+6	; 0x06
    6d4a:	3f 81       	ldd	r19, Y+7	; 0x07
    6d4c:	80 1b       	sub	r24, r16
    6d4e:	91 0b       	sbc	r25, r17
    6d50:	a2 0b       	sbc	r26, r18
    6d52:	b3 0b       	sbc	r27, r19
    6d54:	b7 fd       	sbrc	r27, 7
    6d56:	05 c0       	rjmp	.+10     	; 0x6d62 <subtract_timespec+0x32>
    6d58:	84 83       	std	Z+4, r24	; 0x04
    6d5a:	95 83       	std	Z+5, r25	; 0x05
    6d5c:	a6 83       	std	Z+6, r26	; 0x06
    6d5e:	b7 83       	std	Z+7, r27	; 0x07
    6d60:	12 c0       	rjmp	.+36     	; 0x6d86 <subtract_timespec+0x56>
    6d62:	96 53       	subi	r25, 0x36	; 54
    6d64:	a5 46       	sbci	r26, 0x65	; 101
    6d66:	b4 4c       	sbci	r27, 0xC4	; 196
    6d68:	84 83       	std	Z+4, r24	; 0x04
    6d6a:	95 83       	std	Z+5, r25	; 0x05
    6d6c:	a6 83       	std	Z+6, r26	; 0x06
    6d6e:	b7 83       	std	Z+7, r27	; 0x07
    6d70:	80 81       	ld	r24, Z
    6d72:	91 81       	ldd	r25, Z+1	; 0x01
    6d74:	a2 81       	ldd	r26, Z+2	; 0x02
    6d76:	b3 81       	ldd	r27, Z+3	; 0x03
    6d78:	01 97       	sbiw	r24, 0x01	; 1
    6d7a:	a1 09       	sbc	r26, r1
    6d7c:	b1 09       	sbc	r27, r1
    6d7e:	80 83       	st	Z, r24
    6d80:	91 83       	std	Z+1, r25	; 0x01
    6d82:	a2 83       	std	Z+2, r26	; 0x02
    6d84:	b3 83       	std	Z+3, r27	; 0x03
    6d86:	80 81       	ld	r24, Z
    6d88:	91 81       	ldd	r25, Z+1	; 0x01
    6d8a:	a2 81       	ldd	r26, Z+2	; 0x02
    6d8c:	b3 81       	ldd	r27, Z+3	; 0x03
    6d8e:	eb 01       	movw	r28, r22
    6d90:	48 81       	ld	r20, Y
    6d92:	59 81       	ldd	r21, Y+1	; 0x01
    6d94:	6a 81       	ldd	r22, Y+2	; 0x02
    6d96:	7b 81       	ldd	r23, Y+3	; 0x03
    6d98:	84 1b       	sub	r24, r20
    6d9a:	95 0b       	sbc	r25, r21
    6d9c:	a6 0b       	sbc	r26, r22
    6d9e:	b7 0b       	sbc	r27, r23
    6da0:	80 83       	st	Z, r24
    6da2:	91 83       	std	Z+1, r25	; 0x01
    6da4:	a2 83       	std	Z+2, r26	; 0x02
    6da6:	b3 83       	std	Z+3, r27	; 0x03
    6da8:	df 91       	pop	r29
    6daa:	cf 91       	pop	r28
    6dac:	1f 91       	pop	r17
    6dae:	0f 91       	pop	r16
    6db0:	08 95       	ret

00006db2 <ts_to_str>:
    6db2:	ad b7       	in	r26, 0x3d	; 61
    6db4:	be b7       	in	r27, 0x3e	; 62
    6db6:	1f 97       	sbiw	r26, 0x0f	; 15
    6db8:	0f b6       	in	r0, 0x3f	; 63
    6dba:	f8 94       	cli
    6dbc:	be bf       	out	0x3e, r27	; 62
    6dbe:	0f be       	out	0x3f, r0	; 63
    6dc0:	ad bf       	out	0x3d, r26	; 61
    6dc2:	fc 01       	movw	r30, r24
    6dc4:	44 81       	ldd	r20, Z+4	; 0x04
    6dc6:	55 81       	ldd	r21, Z+5	; 0x05
    6dc8:	66 81       	ldd	r22, Z+6	; 0x06
    6dca:	77 81       	ldd	r23, Z+7	; 0x07
    6dcc:	ed b7       	in	r30, 0x3d	; 61
    6dce:	fe b7       	in	r31, 0x3e	; 62
    6dd0:	44 87       	std	Z+12, r20	; 0x0c
    6dd2:	55 87       	std	Z+13, r21	; 0x0d
    6dd4:	66 87       	std	Z+14, r22	; 0x0e
    6dd6:	77 87       	std	Z+15, r23	; 0x0f
    6dd8:	fc 01       	movw	r30, r24
    6dda:	80 81       	ld	r24, Z
    6ddc:	91 81       	ldd	r25, Z+1	; 0x01
    6dde:	a2 81       	ldd	r26, Z+2	; 0x02
    6de0:	b3 81       	ldd	r27, Z+3	; 0x03
    6de2:	ed b7       	in	r30, 0x3d	; 61
    6de4:	fe b7       	in	r31, 0x3e	; 62
    6de6:	80 87       	std	Z+8, r24	; 0x08
    6de8:	91 87       	std	Z+9, r25	; 0x09
    6dea:	a2 87       	std	Z+10, r26	; 0x0a
    6dec:	b3 87       	std	Z+11, r27	; 0x0b
    6dee:	8a e8       	ldi	r24, 0x8A	; 138
    6df0:	95 e0       	ldi	r25, 0x05	; 5
    6df2:	a0 e0       	ldi	r26, 0x00	; 0
    6df4:	85 83       	std	Z+5, r24	; 0x05
    6df6:	96 83       	std	Z+6, r25	; 0x06
    6df8:	a7 83       	std	Z+7, r26	; 0x07
    6dfa:	8f e1       	ldi	r24, 0x1F	; 31
    6dfc:	90 e0       	ldi	r25, 0x00	; 0
    6dfe:	94 83       	std	Z+4, r25	; 0x04
    6e00:	83 83       	std	Z+3, r24	; 0x03
    6e02:	82 e2       	ldi	r24, 0x22	; 34
    6e04:	97 e1       	ldi	r25, 0x17	; 23
    6e06:	92 83       	std	Z+2, r25	; 0x02
    6e08:	81 83       	std	Z+1, r24	; 0x01
    6e0a:	0e 94 c5 47 	call	0x8f8a	; 0x8f8a <snprintf_P>
    6e0e:	82 e2       	ldi	r24, 0x22	; 34
    6e10:	97 e1       	ldi	r25, 0x17	; 23
    6e12:	ad b7       	in	r26, 0x3d	; 61
    6e14:	be b7       	in	r27, 0x3e	; 62
    6e16:	1f 96       	adiw	r26, 0x0f	; 15
    6e18:	0f b6       	in	r0, 0x3f	; 63
    6e1a:	f8 94       	cli
    6e1c:	be bf       	out	0x3e, r27	; 62
    6e1e:	0f be       	out	0x3f, r0	; 63
    6e20:	ad bf       	out	0x3d, r26	; 61
    6e22:	08 95       	ret

00006e24 <clock_elapsed_begin>:
    6e24:	6a e1       	ldi	r22, 0x1A	; 26
    6e26:	77 e1       	ldi	r23, 0x17	; 23
    6e28:	80 e0       	ldi	r24, 0x00	; 0
    6e2a:	90 e0       	ldi	r25, 0x00	; 0
    6e2c:	4b ce       	rjmp	.-874    	; 0x6ac4 <clock_gettime>
    6e2e:	08 95       	ret

00006e30 <clock_elapsed_end>:
    6e30:	af e0       	ldi	r26, 0x0F	; 15
    6e32:	b0 e0       	ldi	r27, 0x00	; 0
    6e34:	ee e1       	ldi	r30, 0x1E	; 30
    6e36:	f7 e3       	ldi	r31, 0x37	; 55
    6e38:	0c 94 27 e5 	jmp	0x1ca4e	; 0x1ca4e <__prologue_saves__+0x1c>
    6e3c:	8c 01       	movw	r16, r24
    6e3e:	be 01       	movw	r22, r28
    6e40:	68 5f       	subi	r22, 0xF8	; 248
    6e42:	7f 4f       	sbci	r23, 0xFF	; 255
    6e44:	80 e0       	ldi	r24, 0x00	; 0
    6e46:	90 e0       	ldi	r25, 0x00	; 0
    6e48:	3d de       	rcall	.-902    	; 0x6ac4 <clock_gettime>
    6e4a:	6a e1       	ldi	r22, 0x1A	; 26
    6e4c:	77 e1       	ldi	r23, 0x17	; 23
    6e4e:	ce 01       	movw	r24, r28
    6e50:	08 96       	adiw	r24, 0x08	; 8
    6e52:	6e df       	rcall	.-292    	; 0x6d30 <subtract_timespec>
    6e54:	01 15       	cp	r16, r1
    6e56:	11 05       	cpc	r17, r1
    6e58:	b1 f0       	breq	.+44     	; 0x6e86 <clock_elapsed_end+0x56>
    6e5a:	f8 01       	movw	r30, r16
    6e5c:	80 81       	ld	r24, Z
    6e5e:	88 23       	and	r24, r24
    6e60:	91 f0       	breq	.+36     	; 0x6e86 <clock_elapsed_end+0x56>
    6e62:	ce 01       	movw	r24, r28
    6e64:	08 96       	adiw	r24, 0x08	; 8
    6e66:	a5 df       	rcall	.-182    	; 0x6db2 <ts_to_str>
    6e68:	ed b7       	in	r30, 0x3d	; 61
    6e6a:	fe b7       	in	r31, 0x3e	; 62
    6e6c:	97 83       	std	Z+7, r25	; 0x07
    6e6e:	86 83       	std	Z+6, r24	; 0x06
    6e70:	15 83       	std	Z+5, r17	; 0x05
    6e72:	04 83       	std	Z+4, r16	; 0x04
    6e74:	8c e7       	ldi	r24, 0x7C	; 124
    6e76:	95 e0       	ldi	r25, 0x05	; 5
    6e78:	a0 e0       	ldi	r26, 0x00	; 0
    6e7a:	81 83       	std	Z+1, r24	; 0x01
    6e7c:	92 83       	std	Z+2, r25	; 0x02
    6e7e:	a3 83       	std	Z+3, r26	; 0x03
    6e80:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    6e84:	0f c0       	rjmp	.+30     	; 0x6ea4 <clock_elapsed_end+0x74>
    6e86:	ce 01       	movw	r24, r28
    6e88:	08 96       	adiw	r24, 0x08	; 8
    6e8a:	93 df       	rcall	.-218    	; 0x6db2 <ts_to_str>
    6e8c:	ed b7       	in	r30, 0x3d	; 61
    6e8e:	fe b7       	in	r31, 0x3e	; 62
    6e90:	95 83       	std	Z+5, r25	; 0x05
    6e92:	84 83       	std	Z+4, r24	; 0x04
    6e94:	81 e7       	ldi	r24, 0x71	; 113
    6e96:	95 e0       	ldi	r25, 0x05	; 5
    6e98:	a0 e0       	ldi	r26, 0x00	; 0
    6e9a:	81 83       	std	Z+1, r24	; 0x01
    6e9c:	92 83       	std	Z+2, r25	; 0x02
    6e9e:	a3 83       	std	Z+3, r26	; 0x03
    6ea0:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    6ea4:	2f 96       	adiw	r28, 0x0f	; 15
    6ea6:	e4 e0       	ldi	r30, 0x04	; 4
    6ea8:	0c 94 43 e5 	jmp	0x1ca86	; 0x1ca86 <__epilogue_restores__+0x1c>

00006eac <clock_clear>:
    6eac:	a8 e0       	ldi	r26, 0x08	; 8
    6eae:	b0 e0       	ldi	r27, 0x00	; 0
    6eb0:	ec e5       	ldi	r30, 0x5C	; 92
    6eb2:	f7 e3       	ldi	r31, 0x37	; 55
    6eb4:	0c 94 29 e5 	jmp	0x1ca52	; 0x1ca52 <__prologue_saves__+0x20>
    6eb8:	1d 82       	std	Y+5, r1	; 0x05
    6eba:	1e 82       	std	Y+6, r1	; 0x06
    6ebc:	1f 82       	std	Y+7, r1	; 0x07
    6ebe:	18 86       	std	Y+8, r1	; 0x08
    6ec0:	19 82       	std	Y+1, r1	; 0x01
    6ec2:	1a 82       	std	Y+2, r1	; 0x02
    6ec4:	1b 82       	std	Y+3, r1	; 0x03
    6ec6:	1c 82       	std	Y+4, r1	; 0x04
    6ec8:	ce 01       	movw	r24, r28
    6eca:	01 96       	adiw	r24, 0x01	; 1
    6ecc:	ad de       	rcall	.-678    	; 0x6c28 <clock_settime.part.2>
    6ece:	e2 e0       	ldi	r30, 0x02	; 2
    6ed0:	fa e1       	ldi	r31, 0x1A	; 26
    6ed2:	11 82       	std	Z+1, r1	; 0x01
    6ed4:	10 82       	st	Z, r1
    6ed6:	13 82       	std	Z+3, r1	; 0x03
    6ed8:	12 82       	std	Z+2, r1	; 0x02
    6eda:	28 96       	adiw	r28, 0x08	; 8
    6edc:	e2 e0       	ldi	r30, 0x02	; 2
    6ede:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__epilogue_restores__+0x20>

00006ee2 <enable_timers>:
///
/// @return  void
MEMSPACE
void enable_timers()
{
    if(timers_configured && !timers_enabled)
    6ee2:	80 91 42 17 	lds	r24, 0x1742	; 0x801742 <timers_configured>
    6ee6:	90 91 43 17 	lds	r25, 0x1743	; 0x801743 <timers_configured+0x1>
    6eea:	89 2b       	or	r24, r25
    6eec:	69 f0       	breq	.+26     	; 0x6f08 <enable_timers+0x26>
    6eee:	80 91 44 17 	lds	r24, 0x1744	; 0x801744 <timers_enabled>
    6ef2:	90 91 45 17 	lds	r25, 0x1745	; 0x801745 <timers_enabled+0x1>
    6ef6:	89 2b       	or	r24, r25
    {
        enable_system_task();
    6ef8:	39 f4       	brne	.+14     	; 0x6f08 <enable_timers+0x26>
        timers_enabled = 1;
    6efa:	a8 dd       	rcall	.-1200   	; 0x6a4c <enable_system_task>
    6efc:	81 e0       	ldi	r24, 0x01	; 1
    6efe:	90 e0       	ldi	r25, 0x00	; 0
    6f00:	90 93 45 17 	sts	0x1745, r25	; 0x801745 <timers_enabled+0x1>
    6f04:	80 93 44 17 	sts	0x1744, r24	; 0x801744 <timers_enabled>
    6f08:	08 95       	ret

00006f0a <execute_timers>:
/// @brief  Execute all user timers at SYSTEM_HZ rate.
///  Called by system task
///
/// @return  void
void execute_timers()
{
    6f0a:	cf 93       	push	r28
    6f0c:	df 93       	push	r29
    6f0e:	ca ee       	ldi	r28, 0xEA	; 234
    6f10:	d9 e1       	ldi	r29, 0x19	; 25
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
    6f12:	8a 81       	ldd	r24, Y+2	; 0x02
    6f14:	88 23       	and	r24, r24
    6f16:	29 f0       	breq	.+10     	; 0x6f22 <execute_timers+0x18>
    6f18:	e8 81       	ld	r30, Y
    6f1a:	f9 81       	ldd	r31, Y+1	; 0x01
    6f1c:	30 97       	sbiw	r30, 0x00	; 0
    6f1e:	09 f0       	breq	.+2      	; 0x6f22 <execute_timers+0x18>
            (*timer_irq[i].user_timer_handler)();
    6f20:	09 95       	icall
    6f22:	23 96       	adiw	r28, 0x03	; 3
/// @return  void
void execute_timers()
{
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    6f24:	8a e1       	ldi	r24, 0x1A	; 26
    6f26:	c2 30       	cpi	r28, 0x02	; 2
    6f28:	d8 07       	cpc	r29, r24
    6f2a:	99 f7       	brne	.-26     	; 0x6f12 <execute_timers+0x8>
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
            (*timer_irq[i].user_timer_handler)();
    }
}
    6f2c:	df 91       	pop	r29
    6f2e:	cf 91       	pop	r28
    6f30:	08 95       	ret

00006f32 <init_timers>:
/// @see: timer_hal.c for hardware dependent interface
//
/// @return  void
MEMSPACE
void init_timers()
{
    6f32:	00 d0       	rcall	.+0      	; 0x6f34 <init_timers+0x2>
    6f34:	1f 92       	push	r1
    printf("Timers init called\n");
    6f36:	8d e5       	ldi	r24, 0x5D	; 93
    6f38:	95 e0       	ldi	r25, 0x05	; 5
    6f3a:	a0 e0       	ldi	r26, 0x00	; 0
    6f3c:	ed b7       	in	r30, 0x3d	; 61
    6f3e:	fe b7       	in	r31, 0x3e	; 62
    6f40:	81 83       	std	Z+1, r24	; 0x01
    6f42:	92 83       	std	Z+2, r25	; 0x02
    6f44:	a3 83       	std	Z+3, r26	; 0x03
    6f46:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>

    if(!timers_configured)
    6f4a:	80 91 42 17 	lds	r24, 0x1742	; 0x801742 <timers_configured>
    6f4e:	90 91 43 17 	lds	r25, 0x1743	; 0x801743 <timers_configured+0x1>
    6f52:	89 2b       	or	r24, r25
    {
        install_timers_isr();
    6f54:	a9 f4       	brne	.+42     	; 0x6f80 <init_timers+0x4e>
        timers_configured = 1;
    6f56:	7c dd       	rcall	.-1288   	; 0x6a50 <install_timers_isr>
    6f58:	81 e0       	ldi	r24, 0x01	; 1
    6f5a:	90 e0       	ldi	r25, 0x00	; 0
    6f5c:	90 93 43 17 	sts	0x1743, r25	; 0x801743 <timers_configured+0x1>
    6f60:	80 93 42 17 	sts	0x1742, r24	; 0x801742 <timers_configured>
        timers_enabled = 0;
    6f64:	10 92 45 17 	sts	0x1745, r1	; 0x801745 <timers_enabled+0x1>
    6f68:	10 92 44 17 	sts	0x1744, r1	; 0x801744 <timers_enabled>
        printf("Timers configured\n");
    6f6c:	8a e4       	ldi	r24, 0x4A	; 74
    6f6e:	95 e0       	ldi	r25, 0x05	; 5
    6f70:	a0 e0       	ldi	r26, 0x00	; 0
    6f72:	ed b7       	in	r30, 0x3d	; 61
    6f74:	fe b7       	in	r31, 0x3e	; 62
    6f76:	81 83       	std	Z+1, r24	; 0x01
    6f78:	92 83       	std	Z+2, r25	; 0x02
    }

    delete_all_timers();
    6f7a:	a3 83       	std	Z+3, r26	; 0x03

    clock_clear();
    6f7c:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    printf("Clock Init\n");
    6f80:	cc de       	rcall	.-616    	; 0x6d1a <delete_all_timers>
    6f82:	94 df       	rcall	.-216    	; 0x6eac <clock_clear>
    6f84:	8e e3       	ldi	r24, 0x3E	; 62
    6f86:	95 e0       	ldi	r25, 0x05	; 5
    6f88:	a0 e0       	ldi	r26, 0x00	; 0
    6f8a:	ed b7       	in	r30, 0x3d	; 61
    6f8c:	fe b7       	in	r31, 0x3e	; 62
    6f8e:	81 83       	std	Z+1, r24	; 0x01
    6f90:	92 83       	std	Z+2, r25	; 0x02
    6f92:	a3 83       	std	Z+3, r26	; 0x03

///  See time.c
    if(set_timers(clock_task,1) == -1)
    6f94:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    6f98:	61 e0       	ldi	r22, 0x01	; 1
    6f9a:	70 e0       	ldi	r23, 0x00	; 0
    6f9c:	87 ed       	ldi	r24, 0xD7	; 215
    6f9e:	95 e3       	ldi	r25, 0x35	; 53
    6fa0:	81 de       	rcall	.-766    	; 0x6ca4 <set_timers>
        printf("Clock task init failed\n");
    6fa2:	01 96       	adiw	r24, 0x01	; 1
    6fa4:	51 f4       	brne	.+20     	; 0x6fba <init_timers+0x88>
    6fa6:	86 e2       	ldi	r24, 0x26	; 38
    6fa8:	95 e0       	ldi	r25, 0x05	; 5
    6faa:	a0 e0       	ldi	r26, 0x00	; 0
    6fac:	ed b7       	in	r30, 0x3d	; 61
    6fae:	fe b7       	in	r31, 0x3e	; 62
    6fb0:	81 83       	std	Z+1, r24	; 0x01
    6fb2:	92 83       	std	Z+2, r25	; 0x02
    6fb4:	a3 83       	std	Z+3, r26	; 0x03
    printf("Clock Installed\n");
    6fb6:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    6fba:	85 e1       	ldi	r24, 0x15	; 21
    6fbc:	95 e0       	ldi	r25, 0x05	; 5
    6fbe:	a0 e0       	ldi	r26, 0x00	; 0
    6fc0:	ed b7       	in	r30, 0x3d	; 61
    6fc2:	fe b7       	in	r31, 0x3e	; 62
    6fc4:	81 83       	std	Z+1, r24	; 0x01
    6fc6:	92 83       	std	Z+2, r25	; 0x02

    enable_timers();
    6fc8:	a3 83       	std	Z+3, r26	; 0x03
    6fca:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>

    printf("Timers enabled\n");
    6fce:	89 df       	rcall	.-238    	; 0x6ee2 <enable_timers>
    6fd0:	85 e0       	ldi	r24, 0x05	; 5
    6fd2:	95 e0       	ldi	r25, 0x05	; 5
    6fd4:	a0 e0       	ldi	r26, 0x00	; 0
    6fd6:	ed b7       	in	r30, 0x3d	; 61
    6fd8:	fe b7       	in	r31, 0x3e	; 62
    6fda:	81 83       	std	Z+1, r24	; 0x01
    6fdc:	92 83       	std	Z+2, r25	; 0x02
    6fde:	a3 83       	std	Z+3, r26	; 0x03
}
    6fe0:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    6fe4:	0f 90       	pop	r0
    6fe6:	0f 90       	pop	r0
    6fe8:	0f 90       	pop	r0
    6fea:	08 95       	ret

00006fec <clock_getres>:
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_getres(clockid_t clk_id  __attribute__((unused)), struct timespec *res)
{
    if(clk_id)
    6fec:	89 2b       	or	r24, r25
    6fee:	81 f4       	brne	.+32     	; 0x7010 <clock_getres+0x24>
        return(-1);
    res->tv_sec = 0;
    6ff0:	fb 01       	movw	r30, r22
    6ff2:	10 82       	st	Z, r1
    6ff4:	11 82       	std	Z+1, r1	; 0x01
    6ff6:	12 82       	std	Z+2, r1	; 0x02
    6ff8:	13 82       	std	Z+3, r1	; 0x03
    res->tv_nsec = SYSTEM_TASK_TIC_NS;
    6ffa:	80 e4       	ldi	r24, 0x40	; 64
    6ffc:	92 e4       	ldi	r25, 0x42	; 66
    6ffe:	af e0       	ldi	r26, 0x0F	; 15
    7000:	b0 e0       	ldi	r27, 0x00	; 0
    7002:	84 83       	std	Z+4, r24	; 0x04
    7004:	95 83       	std	Z+5, r25	; 0x05
    7006:	a6 83       	std	Z+6, r26	; 0x06
    7008:	b7 83       	std	Z+7, r27	; 0x07
    return(0);
    700a:	80 e0       	ldi	r24, 0x00	; 0
    700c:	90 e0       	ldi	r25, 0x00	; 0
    700e:	08 95       	ret
/// @return -1 on error.
MEMSPACE
int clock_getres(clockid_t clk_id  __attribute__((unused)), struct timespec *res)
{
    if(clk_id)
        return(-1);
    7010:	8f ef       	ldi	r24, 0xFF	; 255
    7012:	9f ef       	ldi	r25, 0xFF	; 255
    res->tv_sec = 0;
    res->tv_nsec = SYSTEM_TASK_TIC_NS;
    return(0);
}
    7014:	08 95       	ret

00007016 <clock_settime>:
///
/// @return 0.
MEMSPACE
int clock_settime(clockid_t clk_id  __attribute__((unused)), const struct timespec *ts)
{
    if(clk_id)
    7016:	89 2b       	or	r24, r25
    7018:	19 f4       	brne	.+6      	; 0x7020 <clock_settime+0xa>
    701a:	cb 01       	movw	r24, r22
    701c:	05 ce       	rjmp	.-1014   	; 0x6c28 <clock_settime.part.2>
    701e:	08 95       	ret
        return(-1);
    7020:	8f ef       	ldi	r24, 0xFF	; 255
    7022:	9f ef       	ldi	r25, 0xFF	; 255
            continue;
        break;
    }

    return(0);
}
    7024:	08 95       	ret

00007026 <IS_Leap>:
void print_dst_gmt()
{
    printf("DST START       GMT: %s\n", ctime_gm(&dst.start));
    printf("DST END         GMT: %s\n", ctime_gm(&dst.end));

}
    7026:	9c 01       	movw	r18, r24
    7028:	83 70       	andi	r24, 0x03	; 3
    702a:	99 27       	eor	r25, r25
    702c:	00 97       	sbiw	r24, 0x00	; 0
    702e:	69 f4       	brne	.+26     	; 0x704a <IS_Leap+0x24>
    7030:	2c 36       	cpi	r18, 0x6C	; 108
    7032:	47 e0       	ldi	r20, 0x07	; 7
    7034:	34 07       	cpc	r19, r20
    7036:	59 f0       	breq	.+22     	; 0x704e <IS_Leap+0x28>
    7038:	51 e0       	ldi	r21, 0x01	; 1
    703a:	40 e0       	ldi	r20, 0x00	; 0
    703c:	24 33       	cpi	r18, 0x34	; 52
    703e:	38 40       	sbci	r19, 0x08	; 8
    7040:	09 f4       	brne	.+2      	; 0x7044 <IS_Leap+0x1e>
    7042:	50 e0       	ldi	r21, 0x00	; 0
    7044:	85 2f       	mov	r24, r21
    7046:	94 2f       	mov	r25, r20
    7048:	08 95       	ret
    704a:	80 e0       	ldi	r24, 0x00	; 0
    704c:	90 e0       	ldi	r25, 0x00	; 0
    704e:	08 95       	ret

00007050 <tm_mon_to_ascii>:
    7050:	8c 30       	cpi	r24, 0x0C	; 12
    7052:	91 05       	cpc	r25, r1
    7054:	40 f4       	brcc	.+16     	; 0x7066 <tm_mon_to_ascii+0x16>
    7056:	88 0f       	add	r24, r24
    7058:	99 1f       	adc	r25, r25
    705a:	fc 01       	movw	r30, r24
    705c:	e8 5e       	subi	r30, 0xE8	; 232
    705e:	fe 4f       	sbci	r31, 0xFE	; 254
    7060:	80 81       	ld	r24, Z
    7062:	91 81       	ldd	r25, Z+1	; 0x01
    7064:	08 95       	ret
    7066:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__Month+0x18>
    706a:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <__Month+0x19>
    706e:	08 95       	ret

00007070 <Days_Per_Month>:
    7070:	cf 93       	push	r28
    7072:	df 93       	push	r29
    7074:	8c 30       	cpi	r24, 0x0C	; 12
    7076:	91 05       	cpc	r25, r1
    7078:	24 f0       	brlt	.+8      	; 0x7082 <Days_Per_Month+0x12>
    707a:	6f 5f       	subi	r22, 0xFF	; 255
    707c:	7f 4f       	sbci	r23, 0xFF	; 255
    707e:	0c 97       	sbiw	r24, 0x0c	; 12
    7080:	f9 cf       	rjmp	.-14     	; 0x7074 <Days_Per_Month+0x4>
    7082:	97 ff       	sbrs	r25, 7
    7084:	04 c0       	rjmp	.+8      	; 0x708e <Days_Per_Month+0x1e>
    7086:	61 50       	subi	r22, 0x01	; 1
    7088:	71 09       	sbc	r23, r1
    708a:	0c 96       	adiw	r24, 0x0c	; 12
    708c:	fa cf       	rjmp	.-12     	; 0x7082 <Days_Per_Month+0x12>
    708e:	fc 01       	movw	r30, r24
    7090:	ee 0f       	add	r30, r30
    7092:	ff 1f       	adc	r31, r31
    7094:	ea 55       	subi	r30, 0x5A	; 90
    7096:	fd 4f       	sbci	r31, 0xFD	; 253
    7098:	c0 81       	ld	r28, Z
    709a:	d1 81       	ldd	r29, Z+1	; 0x01
    709c:	01 97       	sbiw	r24, 0x01	; 1
    709e:	29 f4       	brne	.+10     	; 0x70aa <Days_Per_Month+0x3a>
    70a0:	cb 01       	movw	r24, r22
    70a2:	c1 df       	rcall	.-126    	; 0x7026 <IS_Leap>
    70a4:	89 2b       	or	r24, r25
    70a6:	09 f0       	breq	.+2      	; 0x70aa <Days_Per_Month+0x3a>
    70a8:	21 96       	adiw	r28, 0x01	; 1
    70aa:	ce 01       	movw	r24, r28
    70ac:	df 91       	pop	r29
    70ae:	cf 91       	pop	r28
    70b0:	08 95       	ret

000070b2 <time_to_tm>:
    70b2:	a0 e0       	ldi	r26, 0x00	; 0
    70b4:	b0 e0       	ldi	r27, 0x00	; 0
    70b6:	ef e5       	ldi	r30, 0x5F	; 95
    70b8:	f8 e3       	ldi	r31, 0x38	; 56
    70ba:	0c 94 1b e5 	jmp	0x1ca36	; 0x1ca36 <__prologue_saves__+0x4>
    70be:	e8 01       	movw	r28, r16
    70c0:	e6 e1       	ldi	r30, 0x16	; 22
    70c2:	d8 01       	movw	r26, r16
    70c4:	1d 92       	st	X+, r1
    70c6:	ea 95       	dec	r30
    70c8:	e9 f7       	brne	.-6      	; 0x70c4 <time_to_tm+0x12>
    70ca:	61 15       	cp	r22, r1
    70cc:	bd e5       	ldi	r27, 0x5D	; 93
    70ce:	7b 07       	cpc	r23, r27
    70d0:	bd ef       	ldi	r27, 0xFD	; 253
    70d2:	8b 07       	cpc	r24, r27
    70d4:	bf ef       	ldi	r27, 0xFF	; 255
    70d6:	9b 07       	cpc	r25, r27
    70d8:	08 f0       	brcs	.+2      	; 0x70dc <time_to_tm+0x2a>
    70da:	c0 c0       	rjmp	.+384    	; 0x725c <time_to_tm+0x1aa>
    70dc:	6b 01       	movw	r12, r22
    70de:	7c 01       	movw	r14, r24
    70e0:	c2 1a       	sub	r12, r18
    70e2:	d3 0a       	sbc	r13, r19
    70e4:	e4 0a       	sbc	r14, r20
    70e6:	f5 0a       	sbc	r15, r21
    70e8:	46 01       	movw	r8, r12
    70ea:	57 01       	movw	r10, r14
    70ec:	e0 e8       	ldi	r30, 0x80	; 128
    70ee:	ce 16       	cp	r12, r30
    70f0:	ee ea       	ldi	r30, 0xAE	; 174
    70f2:	de 06       	cpc	r13, r30
    70f4:	ee ef       	ldi	r30, 0xFE	; 254
    70f6:	ee 06       	cpc	r14, r30
    70f8:	ef ef       	ldi	r30, 0xFF	; 255
    70fa:	fe 06       	cpc	r15, r30
    70fc:	50 f0       	brcs	.+20     	; 0x7112 <time_to_tm+0x60>
    70fe:	80 e8       	ldi	r24, 0x80	; 128
    7100:	88 0e       	add	r8, r24
    7102:	81 e5       	ldi	r24, 0x51	; 81
    7104:	98 1e       	adc	r9, r24
    7106:	81 e0       	ldi	r24, 0x01	; 1
    7108:	a8 1e       	adc	r10, r24
    710a:	b1 1c       	adc	r11, r1
    710c:	01 e0       	ldi	r16, 0x01	; 1
    710e:	10 e0       	ldi	r17, 0x00	; 0
    7110:	02 c0       	rjmp	.+4      	; 0x7116 <time_to_tm+0x64>
    7112:	00 e0       	ldi	r16, 0x00	; 0
    7114:	10 e0       	ldi	r17, 0x00	; 0
    7116:	8c e3       	ldi	r24, 0x3C	; 60
    7118:	48 2e       	mov	r4, r24
    711a:	51 2c       	mov	r5, r1
    711c:	61 2c       	mov	r6, r1
    711e:	71 2c       	mov	r7, r1
    7120:	c5 01       	movw	r24, r10
    7122:	b4 01       	movw	r22, r8
    7124:	a3 01       	movw	r20, r6
    7126:	92 01       	movw	r18, r4
    7128:	0e 94 97 e4 	call	0x1c92e	; 0x1c92e <__udivmodsi4>
    712c:	79 83       	std	Y+1, r23	; 0x01
    712e:	68 83       	st	Y, r22
    7130:	ca 01       	movw	r24, r20
    7132:	b9 01       	movw	r22, r18
    7134:	a3 01       	movw	r20, r6
    7136:	92 01       	movw	r18, r4
    7138:	0e 94 97 e4 	call	0x1c92e	; 0x1c92e <__udivmodsi4>
    713c:	7b 83       	std	Y+3, r23	; 0x03
    713e:	6a 83       	std	Y+2, r22	; 0x02
    7140:	c5 01       	movw	r24, r10
    7142:	b4 01       	movw	r22, r8
    7144:	20 e1       	ldi	r18, 0x10	; 16
    7146:	3e e0       	ldi	r19, 0x0E	; 14
    7148:	40 e0       	ldi	r20, 0x00	; 0
    714a:	50 e0       	ldi	r21, 0x00	; 0
    714c:	0e 94 97 e4 	call	0x1c92e	; 0x1c92e <__udivmodsi4>
    7150:	ca 01       	movw	r24, r20
    7152:	b9 01       	movw	r22, r18
    7154:	28 e1       	ldi	r18, 0x18	; 24
    7156:	30 e0       	ldi	r19, 0x00	; 0
    7158:	40 e0       	ldi	r20, 0x00	; 0
    715a:	50 e0       	ldi	r21, 0x00	; 0
    715c:	0e 94 97 e4 	call	0x1c92e	; 0x1c92e <__udivmodsi4>
    7160:	7d 83       	std	Y+5, r23	; 0x05
    7162:	6c 83       	std	Y+4, r22	; 0x04
    7164:	01 15       	cp	r16, r1
    7166:	11 05       	cpc	r17, r1
    7168:	89 f0       	breq	.+34     	; 0x718c <time_to_tm+0xda>
    716a:	85 e4       	ldi	r24, 0x45	; 69
    716c:	90 e0       	ldi	r25, 0x00	; 0
    716e:	9b 87       	std	Y+11, r25	; 0x0b
    7170:	8a 87       	std	Y+10, r24	; 0x0a
    7172:	8b e0       	ldi	r24, 0x0B	; 11
    7174:	90 e0       	ldi	r25, 0x00	; 0
    7176:	99 87       	std	Y+9, r25	; 0x09
    7178:	88 87       	std	Y+8, r24	; 0x08
    717a:	8f e1       	ldi	r24, 0x1F	; 31
    717c:	90 e0       	ldi	r25, 0x00	; 0
    717e:	9f 83       	std	Y+7, r25	; 0x07
    7180:	8e 83       	std	Y+6, r24	; 0x06
    7182:	83 e0       	ldi	r24, 0x03	; 3
    7184:	90 e0       	ldi	r25, 0x00	; 0
    7186:	9d 87       	std	Y+13, r25	; 0x0d
    7188:	8c 87       	std	Y+12, r24	; 0x0c
    718a:	65 c0       	rjmp	.+202    	; 0x7256 <time_to_tm+0x1a4>
    718c:	c5 01       	movw	r24, r10
    718e:	b4 01       	movw	r22, r8
    7190:	20 e8       	ldi	r18, 0x80	; 128
    7192:	31 e5       	ldi	r19, 0x51	; 81
    7194:	41 e0       	ldi	r20, 0x01	; 1
    7196:	50 e0       	ldi	r21, 0x00	; 0
    7198:	0e 94 97 e4 	call	0x1c92e	; 0x1c92e <__udivmodsi4>
    719c:	49 01       	movw	r8, r18
    719e:	5a 01       	movw	r10, r20
    71a0:	ca 01       	movw	r24, r20
    71a2:	b9 01       	movw	r22, r18
    71a4:	6c 5f       	subi	r22, 0xFC	; 252
    71a6:	7f 4f       	sbci	r23, 0xFF	; 255
    71a8:	8f 4f       	sbci	r24, 0xFF	; 255
    71aa:	9f 4f       	sbci	r25, 0xFF	; 255
    71ac:	27 e0       	ldi	r18, 0x07	; 7
    71ae:	30 e0       	ldi	r19, 0x00	; 0
    71b0:	40 e0       	ldi	r20, 0x00	; 0
    71b2:	50 e0       	ldi	r21, 0x00	; 0
    71b4:	0e 94 b9 e4 	call	0x1c972	; 0x1c972 <__divmodsi4>
    71b8:	7d 87       	std	Y+13, r23	; 0x0d
    71ba:	6c 87       	std	Y+12, r22	; 0x0c
    71bc:	02 eb       	ldi	r16, 0xB2	; 178
    71be:	17 e0       	ldi	r17, 0x07	; 7
    71c0:	c8 01       	movw	r24, r16
    71c2:	31 df       	rcall	.-414    	; 0x7026 <IS_Leap>
    71c4:	00 97       	sbiw	r24, 0x00	; 0
    71c6:	19 f4       	brne	.+6      	; 0x71ce <time_to_tm+0x11c>
    71c8:	4d e6       	ldi	r20, 0x6D	; 109
    71ca:	51 e0       	ldi	r21, 0x01	; 1
    71cc:	02 c0       	rjmp	.+4      	; 0x71d2 <time_to_tm+0x120>
    71ce:	4e e6       	ldi	r20, 0x6E	; 110
    71d0:	51 e0       	ldi	r21, 0x01	; 1
    71d2:	05 2e       	mov	r0, r21
    71d4:	00 0c       	add	r0, r0
    71d6:	66 0b       	sbc	r22, r22
    71d8:	77 0b       	sbc	r23, r23
    71da:	84 16       	cp	r8, r20
    71dc:	95 06       	cpc	r9, r21
    71de:	a6 06       	cpc	r10, r22
    71e0:	b7 06       	cpc	r11, r23
    71e2:	3c f0       	brlt	.+14     	; 0x71f2 <time_to_tm+0x140>
    71e4:	0f 5f       	subi	r16, 0xFF	; 255
    71e6:	1f 4f       	sbci	r17, 0xFF	; 255
    71e8:	84 1a       	sub	r8, r20
    71ea:	95 0a       	sbc	r9, r21
    71ec:	a6 0a       	sbc	r10, r22
    71ee:	b7 0a       	sbc	r11, r23
    71f0:	e7 cf       	rjmp	.-50     	; 0x71c0 <time_to_tm+0x10e>
    71f2:	0c 56       	subi	r16, 0x6C	; 108
    71f4:	17 40       	sbci	r17, 0x07	; 7
    71f6:	1b 87       	std	Y+11, r17	; 0x0b
    71f8:	0a 87       	std	Y+10, r16	; 0x0a
    71fa:	9f 86       	std	Y+15, r9	; 0x0f
    71fc:	8e 86       	std	Y+14, r8	; 0x0e
    71fe:	e6 ea       	ldi	r30, 0xA6	; 166
    7200:	f2 e0       	ldi	r31, 0x02	; 2
    7202:	20 e0       	ldi	r18, 0x00	; 0
    7204:	30 e0       	ldi	r19, 0x00	; 0
    7206:	18 14       	cp	r1, r8
    7208:	19 04       	cpc	r1, r9
    720a:	1a 04       	cpc	r1, r10
    720c:	1b 04       	cpc	r1, r11
    720e:	e4 f4       	brge	.+56     	; 0x7248 <time_to_tm+0x196>
    7210:	2c 30       	cpi	r18, 0x0C	; 12
    7212:	31 05       	cpc	r19, r1
    7214:	c9 f0       	breq	.+50     	; 0x7248 <time_to_tm+0x196>
    7216:	41 91       	ld	r20, Z+
    7218:	51 91       	ld	r21, Z+
    721a:	21 30       	cpi	r18, 0x01	; 1
    721c:	31 05       	cpc	r19, r1
    721e:	21 f4       	brne	.+8      	; 0x7228 <time_to_tm+0x176>
    7220:	00 97       	sbiw	r24, 0x00	; 0
    7222:	11 f0       	breq	.+4      	; 0x7228 <time_to_tm+0x176>
    7224:	4f 5f       	subi	r20, 0xFF	; 255
    7226:	5f 4f       	sbci	r21, 0xFF	; 255
    7228:	05 2e       	mov	r0, r21
    722a:	00 0c       	add	r0, r0
    722c:	66 0b       	sbc	r22, r22
    722e:	77 0b       	sbc	r23, r23
    7230:	84 16       	cp	r8, r20
    7232:	95 06       	cpc	r9, r21
    7234:	a6 06       	cpc	r10, r22
    7236:	b7 06       	cpc	r11, r23
    7238:	3c f0       	brlt	.+14     	; 0x7248 <time_to_tm+0x196>
    723a:	84 1a       	sub	r8, r20
    723c:	95 0a       	sbc	r9, r21
    723e:	a6 0a       	sbc	r10, r22
    7240:	b7 0a       	sbc	r11, r23
    7242:	2f 5f       	subi	r18, 0xFF	; 255
    7244:	3f 4f       	sbci	r19, 0xFF	; 255
    7246:	df cf       	rjmp	.-66     	; 0x7206 <time_to_tm+0x154>
    7248:	39 87       	std	Y+9, r19	; 0x09
    724a:	28 87       	std	Y+8, r18	; 0x08
    724c:	af ef       	ldi	r26, 0xFF	; 255
    724e:	8a 1a       	sub	r8, r26
    7250:	9a 0a       	sbc	r9, r26
    7252:	9f 82       	std	Y+7, r9	; 0x07
    7254:	8e 82       	std	Y+6, r8	; 0x06
    7256:	b6 01       	movw	r22, r12
    7258:	c7 01       	movw	r24, r14
    725a:	04 c0       	rjmp	.+8      	; 0x7264 <time_to_tm+0x1b2>
    725c:	6f ef       	ldi	r22, 0xFF	; 255
    725e:	7f ef       	ldi	r23, 0xFF	; 255
    7260:	8f ef       	ldi	r24, 0xFF	; 255
    7262:	9f ef       	ldi	r25, 0xFF	; 255
    7264:	cd b7       	in	r28, 0x3d	; 61
    7266:	de b7       	in	r29, 0x3e	; 62
    7268:	e0 e1       	ldi	r30, 0x10	; 16
    726a:	0c 94 37 e5 	jmp	0x1ca6e	; 0x1ca6e <__epilogue_restores__+0x4>

0000726e <gmtime_r>:
    726e:	0f 93       	push	r16
    7270:	1f 93       	push	r17
    7272:	cf 93       	push	r28
    7274:	df 93       	push	r29
    7276:	eb 01       	movw	r28, r22
    7278:	fc 01       	movw	r30, r24
    727a:	60 81       	ld	r22, Z
    727c:	71 81       	ldd	r23, Z+1	; 0x01
    727e:	82 81       	ldd	r24, Z+2	; 0x02
    7280:	93 81       	ldd	r25, Z+3	; 0x03
    7282:	8e 01       	movw	r16, r28
    7284:	20 e0       	ldi	r18, 0x00	; 0
    7286:	30 e0       	ldi	r19, 0x00	; 0
    7288:	a9 01       	movw	r20, r18
    728a:	13 df       	rcall	.-474    	; 0x70b2 <time_to_tm>
    728c:	ce 01       	movw	r24, r28
    728e:	df 91       	pop	r29
    7290:	cf 91       	pop	r28
    7292:	1f 91       	pop	r17
    7294:	0f 91       	pop	r16
    7296:	08 95       	ret

00007298 <gmtime>:
    7298:	24 e6       	ldi	r18, 0x64	; 100
    729a:	37 e1       	ldi	r19, 0x17	; 23
    729c:	30 93 7b 17 	sts	0x177B, r19	; 0x80177b <p.3795+0x1>
    72a0:	20 93 7a 17 	sts	0x177A, r18	; 0x80177a <p.3795>
    72a4:	b9 01       	movw	r22, r18
    72a6:	e3 df       	rcall	.-58     	; 0x726e <gmtime_r>
    72a8:	84 e6       	ldi	r24, 0x64	; 100
    72aa:	97 e1       	ldi	r25, 0x17	; 23
    72ac:	08 95       	ret

000072ae <gettimezone>:
    72ae:	e2 e0       	ldi	r30, 0x02	; 2
    72b0:	fa e1       	ldi	r31, 0x1A	; 26
    72b2:	20 81       	ld	r18, Z
    72b4:	31 81       	ldd	r19, Z+1	; 0x01
    72b6:	dc 01       	movw	r26, r24
    72b8:	2d 93       	st	X+, r18
    72ba:	3c 93       	st	X, r19
    72bc:	22 81       	ldd	r18, Z+2	; 0x02
    72be:	33 81       	ldd	r19, Z+3	; 0x03
    72c0:	fc 01       	movw	r30, r24
    72c2:	33 83       	std	Z+3, r19	; 0x03
    72c4:	22 83       	std	Z+2, r18	; 0x02
    72c6:	80 e0       	ldi	r24, 0x00	; 0
    72c8:	90 e0       	ldi	r25, 0x00	; 0
    72ca:	08 95       	ret

000072cc <settimezone>:
    72cc:	cf 93       	push	r28
    72ce:	df 93       	push	r29
    72d0:	ec 01       	movw	r28, r24
    72d2:	28 81       	ld	r18, Y
    72d4:	39 81       	ldd	r19, Y+1	; 0x01
    72d6:	e2 e0       	ldi	r30, 0x02	; 2
    72d8:	fa e1       	ldi	r31, 0x1A	; 26
    72da:	31 83       	std	Z+1, r19	; 0x01
    72dc:	20 83       	st	Z, r18
    72de:	8a 81       	ldd	r24, Y+2	; 0x02
    72e0:	9b 81       	ldd	r25, Y+3	; 0x03
    72e2:	93 83       	std	Z+3, r25	; 0x03
    72e4:	82 83       	std	Z+2, r24	; 0x02
    72e6:	80 e0       	ldi	r24, 0x00	; 0
    72e8:	90 e0       	ldi	r25, 0x00	; 0
    72ea:	df 91       	pop	r29
    72ec:	cf 91       	pop	r28
    72ee:	08 95       	ret

000072f0 <gettimeofday>:
    72f0:	a8 e0       	ldi	r26, 0x08	; 8
    72f2:	b0 e0       	ldi	r27, 0x00	; 0
    72f4:	ee e7       	ldi	r30, 0x7E	; 126
    72f6:	f9 e3       	ldi	r31, 0x39	; 57
    72f8:	0c 94 25 e5 	jmp	0x1ca4a	; 0x1ca4a <__prologue_saves__+0x18>
    72fc:	8c 01       	movw	r16, r24
    72fe:	7b 01       	movw	r14, r22
    7300:	be 01       	movw	r22, r28
    7302:	6f 5f       	subi	r22, 0xFF	; 255
    7304:	7f 4f       	sbci	r23, 0xFF	; 255
    7306:	80 e0       	ldi	r24, 0x00	; 0
    7308:	90 e0       	ldi	r25, 0x00	; 0
    730a:	dc db       	rcall	.-2120   	; 0x6ac4 <clock_gettime>
    730c:	89 81       	ldd	r24, Y+1	; 0x01
    730e:	9a 81       	ldd	r25, Y+2	; 0x02
    7310:	ab 81       	ldd	r26, Y+3	; 0x03
    7312:	bc 81       	ldd	r27, Y+4	; 0x04
    7314:	f8 01       	movw	r30, r16
    7316:	80 83       	st	Z, r24
    7318:	91 83       	std	Z+1, r25	; 0x01
    731a:	a2 83       	std	Z+2, r26	; 0x02
    731c:	b3 83       	std	Z+3, r27	; 0x03
    731e:	6d 81       	ldd	r22, Y+5	; 0x05
    7320:	7e 81       	ldd	r23, Y+6	; 0x06
    7322:	8f 81       	ldd	r24, Y+7	; 0x07
    7324:	98 85       	ldd	r25, Y+8	; 0x08
    7326:	28 ee       	ldi	r18, 0xE8	; 232
    7328:	33 e0       	ldi	r19, 0x03	; 3
    732a:	40 e0       	ldi	r20, 0x00	; 0
    732c:	50 e0       	ldi	r21, 0x00	; 0
    732e:	0e 94 b9 e4 	call	0x1c972	; 0x1c972 <__divmodsi4>
    7332:	f8 01       	movw	r30, r16
    7334:	24 83       	std	Z+4, r18	; 0x04
    7336:	35 83       	std	Z+5, r19	; 0x05
    7338:	46 83       	std	Z+6, r20	; 0x06
    733a:	57 83       	std	Z+7, r21	; 0x07
    733c:	c7 01       	movw	r24, r14
    733e:	b7 df       	rcall	.-146    	; 0x72ae <gettimezone>
    7340:	80 e0       	ldi	r24, 0x00	; 0
    7342:	90 e0       	ldi	r25, 0x00	; 0
    7344:	28 96       	adiw	r28, 0x08	; 8
    7346:	e6 e0       	ldi	r30, 0x06	; 6
    7348:	0c 94 41 e5 	jmp	0x1ca82	; 0x1ca82 <__epilogue_restores__+0x18>

0000734c <time>:
    734c:	cf 93       	push	r28
    734e:	df 93       	push	r29
    7350:	ec 01       	movw	r28, r24
    7352:	66 e4       	ldi	r22, 0x46	; 70
    7354:	77 e1       	ldi	r23, 0x17	; 23
    7356:	80 e0       	ldi	r24, 0x00	; 0
    7358:	90 e0       	ldi	r25, 0x00	; 0
    735a:	b4 db       	rcall	.-2200   	; 0x6ac4 <clock_gettime>
    735c:	20 97       	sbiw	r28, 0x00	; 0
    735e:	61 f0       	breq	.+24     	; 0x7378 <time+0x2c>
    7360:	80 91 46 17 	lds	r24, 0x1746	; 0x801746 <ts.3873>
    7364:	90 91 47 17 	lds	r25, 0x1747	; 0x801747 <ts.3873+0x1>
    7368:	a0 91 48 17 	lds	r26, 0x1748	; 0x801748 <ts.3873+0x2>
    736c:	b0 91 49 17 	lds	r27, 0x1749	; 0x801749 <ts.3873+0x3>
    7370:	88 83       	st	Y, r24
    7372:	99 83       	std	Y+1, r25	; 0x01
    7374:	aa 83       	std	Y+2, r26	; 0x02
    7376:	bb 83       	std	Y+3, r27	; 0x03
    7378:	60 91 46 17 	lds	r22, 0x1746	; 0x801746 <ts.3873>
    737c:	70 91 47 17 	lds	r23, 0x1747	; 0x801747 <ts.3873+0x1>
    7380:	80 91 48 17 	lds	r24, 0x1748	; 0x801748 <ts.3873+0x2>
    7384:	90 91 49 17 	lds	r25, 0x1749	; 0x801749 <ts.3873+0x3>
    7388:	df 91       	pop	r29
    738a:	cf 91       	pop	r28
    738c:	08 95       	ret

0000738e <is_dst>:
    738e:	cf 92       	push	r12
    7390:	df 92       	push	r13
    7392:	ef 92       	push	r14
    7394:	ff 92       	push	r15
    7396:	6b 01       	movw	r12, r22
    7398:	7c 01       	movw	r14, r24
    739a:	05 d4       	rcall	.+2058   	; 0x7ba6 <set_dst>
    739c:	80 91 06 1a 	lds	r24, 0x1A06	; 0x801a06 <dst>
    73a0:	90 91 07 1a 	lds	r25, 0x1A07	; 0x801a07 <dst+0x1>
    73a4:	a0 91 08 1a 	lds	r26, 0x1A08	; 0x801a08 <dst+0x2>
    73a8:	b0 91 09 1a 	lds	r27, 0x1A09	; 0x801a09 <dst+0x3>
    73ac:	c8 16       	cp	r12, r24
    73ae:	d9 06       	cpc	r13, r25
    73b0:	ea 06       	cpc	r14, r26
    73b2:	fb 06       	cpc	r15, r27
    73b4:	88 f0       	brcs	.+34     	; 0x73d8 <is_dst+0x4a>
    73b6:	81 e0       	ldi	r24, 0x01	; 1
    73b8:	90 e0       	ldi	r25, 0x00	; 0
    73ba:	40 91 0a 1a 	lds	r20, 0x1A0A	; 0x801a0a <dst+0x4>
    73be:	50 91 0b 1a 	lds	r21, 0x1A0B	; 0x801a0b <dst+0x5>
    73c2:	60 91 0c 1a 	lds	r22, 0x1A0C	; 0x801a0c <dst+0x6>
    73c6:	70 91 0d 1a 	lds	r23, 0x1A0D	; 0x801a0d <dst+0x7>
    73ca:	4c 15       	cp	r20, r12
    73cc:	5d 05       	cpc	r21, r13
    73ce:	6e 05       	cpc	r22, r14
    73d0:	7f 05       	cpc	r23, r15
    73d2:	20 f4       	brcc	.+8      	; 0x73dc <is_dst+0x4e>
    73d4:	80 e0       	ldi	r24, 0x00	; 0
    73d6:	02 c0       	rjmp	.+4      	; 0x73dc <is_dst+0x4e>
    73d8:	80 e0       	ldi	r24, 0x00	; 0
    73da:	90 e0       	ldi	r25, 0x00	; 0
    73dc:	ff 90       	pop	r15
    73de:	ef 90       	pop	r14
    73e0:	df 90       	pop	r13
    73e2:	cf 90       	pop	r12
    73e4:	08 95       	ret

000073e6 <localtime_r>:
    73e6:	4f 92       	push	r4
    73e8:	5f 92       	push	r5
    73ea:	6f 92       	push	r6
    73ec:	7f 92       	push	r7
    73ee:	af 92       	push	r10
    73f0:	bf 92       	push	r11
    73f2:	cf 92       	push	r12
    73f4:	df 92       	push	r13
    73f6:	ef 92       	push	r14
    73f8:	ff 92       	push	r15
    73fa:	0f 93       	push	r16
    73fc:	1f 93       	push	r17
    73fe:	cf 93       	push	r28
    7400:	df 93       	push	r29
    7402:	00 d0       	rcall	.+0      	; 0x7404 <localtime_r+0x1e>
    7404:	00 d0       	rcall	.+0      	; 0x7406 <localtime_r+0x20>
    7406:	cd b7       	in	r28, 0x3d	; 61
    7408:	de b7       	in	r29, 0x3e	; 62
    740a:	5b 01       	movw	r10, r22
    740c:	fc 01       	movw	r30, r24
    740e:	40 80       	ld	r4, Z
    7410:	51 80       	ldd	r5, Z+1	; 0x01
    7412:	62 80       	ldd	r6, Z+2	; 0x02
    7414:	73 80       	ldd	r7, Z+3	; 0x03
    7416:	ce 01       	movw	r24, r28
    7418:	01 96       	adiw	r24, 0x01	; 1
    741a:	49 df       	rcall	.-366    	; 0x72ae <gettimezone>
    741c:	a9 81       	ldd	r26, Y+1	; 0x01
    741e:	ba 81       	ldd	r27, Y+2	; 0x02
    7420:	2c e3       	ldi	r18, 0x3C	; 60
    7422:	30 e0       	ldi	r19, 0x00	; 0
    7424:	0e 94 f3 e4 	call	0x1c9e6	; 0x1c9e6 <__usmulhisi3>
    7428:	6b 01       	movw	r12, r22
    742a:	7c 01       	movw	r14, r24
    742c:	c3 01       	movw	r24, r6
    742e:	b2 01       	movw	r22, r4
    7430:	6c 19       	sub	r22, r12
    7432:	7d 09       	sbc	r23, r13
    7434:	8e 09       	sbc	r24, r14
    7436:	9f 09       	sbc	r25, r15
    7438:	aa df       	rcall	.-172    	; 0x738e <is_dst>
    743a:	89 2b       	or	r24, r25
    743c:	31 f0       	breq	.+12     	; 0x744a <localtime_r+0x64>
    743e:	f0 e1       	ldi	r31, 0x10	; 16
    7440:	cf 1a       	sub	r12, r31
    7442:	fe e0       	ldi	r31, 0x0E	; 14
    7444:	df 0a       	sbc	r13, r31
    7446:	e1 08       	sbc	r14, r1
    7448:	f1 08       	sbc	r15, r1
    744a:	85 01       	movw	r16, r10
    744c:	a7 01       	movw	r20, r14
    744e:	96 01       	movw	r18, r12
    7450:	c3 01       	movw	r24, r6
    7452:	b2 01       	movw	r22, r4
    7454:	2e de       	rcall	.-932    	; 0x70b2 <time_to_tm>
    7456:	c5 01       	movw	r24, r10
    7458:	0f 90       	pop	r0
    745a:	0f 90       	pop	r0
    745c:	0f 90       	pop	r0
    745e:	0f 90       	pop	r0
    7460:	df 91       	pop	r29
    7462:	cf 91       	pop	r28
    7464:	1f 91       	pop	r17
    7466:	0f 91       	pop	r16
    7468:	ff 90       	pop	r15
    746a:	ef 90       	pop	r14
    746c:	df 90       	pop	r13
    746e:	cf 90       	pop	r12
    7470:	bf 90       	pop	r11
    7472:	af 90       	pop	r10
    7474:	7f 90       	pop	r7
    7476:	6f 90       	pop	r6
    7478:	5f 90       	pop	r5
    747a:	4f 90       	pop	r4
    747c:	08 95       	ret

0000747e <localtime>:
    747e:	6e e4       	ldi	r22, 0x4E	; 78
    7480:	77 e1       	ldi	r23, 0x17	; 23
    7482:	b1 cf       	rjmp	.-158    	; 0x73e6 <localtime_r>
    7484:	08 95       	ret

00007486 <normalize>:
    7486:	aa e0       	ldi	r26, 0x0A	; 10
    7488:	b0 e0       	ldi	r27, 0x00	; 0
    748a:	e9 e4       	ldi	r30, 0x49	; 73
    748c:	fa e3       	ldi	r31, 0x3A	; 58
    748e:	0c 94 19 e5 	jmp	0x1ca32	; 0x1ca32 <__prologue_saves__>
    7492:	7c 01       	movw	r14, r24
    7494:	7a 87       	std	Y+10, r23	; 0x0a
    7496:	69 87       	std	Y+9, r22	; 0x09
    7498:	f7 01       	movw	r30, r14
    749a:	80 81       	ld	r24, Z
    749c:	91 81       	ldd	r25, Z+1	; 0x01
    749e:	8c 33       	cpi	r24, 0x3C	; 60
    74a0:	91 05       	cpc	r25, r1
    74a2:	5c f0       	brlt	.+22     	; 0x74ba <normalize+0x34>
    74a4:	f7 01       	movw	r30, r14
    74a6:	22 81       	ldd	r18, Z+2	; 0x02
    74a8:	33 81       	ldd	r19, Z+3	; 0x03
    74aa:	2f 5f       	subi	r18, 0xFF	; 255
    74ac:	3f 4f       	sbci	r19, 0xFF	; 255
    74ae:	33 83       	std	Z+3, r19	; 0x03
    74b0:	22 83       	std	Z+2, r18	; 0x02
    74b2:	cc 97       	sbiw	r24, 0x3c	; 60
    74b4:	91 83       	std	Z+1, r25	; 0x01
    74b6:	80 83       	st	Z, r24
    74b8:	ef cf       	rjmp	.-34     	; 0x7498 <normalize+0x12>
    74ba:	f7 01       	movw	r30, r14
    74bc:	01 90       	ld	r0, Z+
    74be:	f0 81       	ld	r31, Z
    74c0:	e0 2d       	mov	r30, r0
    74c2:	fe 83       	std	Y+6, r31	; 0x06
    74c4:	ed 83       	std	Y+5, r30	; 0x05
    74c6:	f7 ff       	sbrs	r31, 7
    74c8:	0d c0       	rjmp	.+26     	; 0x74e4 <normalize+0x5e>
    74ca:	f7 01       	movw	r30, r14
    74cc:	82 81       	ldd	r24, Z+2	; 0x02
    74ce:	93 81       	ldd	r25, Z+3	; 0x03
    74d0:	01 97       	sbiw	r24, 0x01	; 1
    74d2:	93 83       	std	Z+3, r25	; 0x03
    74d4:	82 83       	std	Z+2, r24	; 0x02
    74d6:	6d 81       	ldd	r22, Y+5	; 0x05
    74d8:	7e 81       	ldd	r23, Y+6	; 0x06
    74da:	64 5c       	subi	r22, 0xC4	; 196
    74dc:	7f 4f       	sbci	r23, 0xFF	; 255
    74de:	71 83       	std	Z+1, r23	; 0x01
    74e0:	60 83       	st	Z, r22
    74e2:	eb cf       	rjmp	.-42     	; 0x74ba <normalize+0x34>
    74e4:	f7 01       	movw	r30, r14
    74e6:	82 81       	ldd	r24, Z+2	; 0x02
    74e8:	93 81       	ldd	r25, Z+3	; 0x03
    74ea:	8c 33       	cpi	r24, 0x3C	; 60
    74ec:	91 05       	cpc	r25, r1
    74ee:	5c f0       	brlt	.+22     	; 0x7506 <normalize+0x80>
    74f0:	f7 01       	movw	r30, r14
    74f2:	24 81       	ldd	r18, Z+4	; 0x04
    74f4:	35 81       	ldd	r19, Z+5	; 0x05
    74f6:	2f 5f       	subi	r18, 0xFF	; 255
    74f8:	3f 4f       	sbci	r19, 0xFF	; 255
    74fa:	35 83       	std	Z+5, r19	; 0x05
    74fc:	24 83       	std	Z+4, r18	; 0x04
    74fe:	cc 97       	sbiw	r24, 0x3c	; 60
    7500:	93 83       	std	Z+3, r25	; 0x03
    7502:	82 83       	std	Z+2, r24	; 0x02
    7504:	ef cf       	rjmp	.-34     	; 0x74e4 <normalize+0x5e>
    7506:	f7 01       	movw	r30, r14
    7508:	22 80       	ldd	r2, Z+2	; 0x02
    750a:	33 80       	ldd	r3, Z+3	; 0x03
    750c:	37 fe       	sbrs	r3, 7
    750e:	0d c0       	rjmp	.+26     	; 0x752a <normalize+0xa4>
    7510:	f7 01       	movw	r30, r14
    7512:	84 81       	ldd	r24, Z+4	; 0x04
    7514:	95 81       	ldd	r25, Z+5	; 0x05
    7516:	01 97       	sbiw	r24, 0x01	; 1
    7518:	95 83       	std	Z+5, r25	; 0x05
    751a:	84 83       	std	Z+4, r24	; 0x04
    751c:	fc e3       	ldi	r31, 0x3C	; 60
    751e:	2f 0e       	add	r2, r31
    7520:	31 1c       	adc	r3, r1
    7522:	f7 01       	movw	r30, r14
    7524:	33 82       	std	Z+3, r3	; 0x03
    7526:	22 82       	std	Z+2, r2	; 0x02
    7528:	ee cf       	rjmp	.-36     	; 0x7506 <normalize+0x80>
    752a:	f7 01       	movw	r30, r14
    752c:	84 81       	ldd	r24, Z+4	; 0x04
    752e:	95 81       	ldd	r25, Z+5	; 0x05
    7530:	88 31       	cpi	r24, 0x18	; 24
    7532:	91 05       	cpc	r25, r1
    7534:	5c f0       	brlt	.+22     	; 0x754c <normalize+0xc6>
    7536:	f7 01       	movw	r30, r14
    7538:	26 81       	ldd	r18, Z+6	; 0x06
    753a:	37 81       	ldd	r19, Z+7	; 0x07
    753c:	2f 5f       	subi	r18, 0xFF	; 255
    753e:	3f 4f       	sbci	r19, 0xFF	; 255
    7540:	37 83       	std	Z+7, r19	; 0x07
    7542:	26 83       	std	Z+6, r18	; 0x06
    7544:	48 97       	sbiw	r24, 0x18	; 24
    7546:	95 83       	std	Z+5, r25	; 0x05
    7548:	84 83       	std	Z+4, r24	; 0x04
    754a:	ef cf       	rjmp	.-34     	; 0x752a <normalize+0xa4>
    754c:	f7 01       	movw	r30, r14
    754e:	04 81       	ldd	r16, Z+4	; 0x04
    7550:	15 81       	ldd	r17, Z+5	; 0x05
    7552:	17 ff       	sbrs	r17, 7
    7554:	0b c0       	rjmp	.+22     	; 0x756c <normalize+0xe6>
    7556:	f7 01       	movw	r30, r14
    7558:	86 81       	ldd	r24, Z+6	; 0x06
    755a:	97 81       	ldd	r25, Z+7	; 0x07
    755c:	01 97       	sbiw	r24, 0x01	; 1
    755e:	97 83       	std	Z+7, r25	; 0x07
    7560:	86 83       	std	Z+6, r24	; 0x06
    7562:	08 5e       	subi	r16, 0xE8	; 232
    7564:	1f 4f       	sbci	r17, 0xFF	; 255
    7566:	15 83       	std	Z+5, r17	; 0x05
    7568:	04 83       	std	Z+4, r16	; 0x04
    756a:	f0 cf       	rjmp	.-32     	; 0x754c <normalize+0xc6>
    756c:	f7 01       	movw	r30, r14
    756e:	80 85       	ldd	r24, Z+8	; 0x08
    7570:	91 85       	ldd	r25, Z+9	; 0x09
    7572:	8c 30       	cpi	r24, 0x0C	; 12
    7574:	91 05       	cpc	r25, r1
    7576:	5c f0       	brlt	.+22     	; 0x758e <normalize+0x108>
    7578:	f7 01       	movw	r30, r14
    757a:	22 85       	ldd	r18, Z+10	; 0x0a
    757c:	33 85       	ldd	r19, Z+11	; 0x0b
    757e:	2f 5f       	subi	r18, 0xFF	; 255
    7580:	3f 4f       	sbci	r19, 0xFF	; 255
    7582:	33 87       	std	Z+11, r19	; 0x0b
    7584:	22 87       	std	Z+10, r18	; 0x0a
    7586:	0c 97       	sbiw	r24, 0x0c	; 12
    7588:	91 87       	std	Z+9, r25	; 0x09
    758a:	80 87       	std	Z+8, r24	; 0x08
    758c:	ef cf       	rjmp	.-34     	; 0x756c <normalize+0xe6>
    758e:	f7 01       	movw	r30, r14
    7590:	80 85       	ldd	r24, Z+8	; 0x08
    7592:	91 85       	ldd	r25, Z+9	; 0x09
    7594:	97 ff       	sbrs	r25, 7
    7596:	2d c0       	rjmp	.+90     	; 0x75f2 <normalize+0x16c>
    7598:	f7 01       	movw	r30, r14
    759a:	22 85       	ldd	r18, Z+10	; 0x0a
    759c:	33 85       	ldd	r19, Z+11	; 0x0b
    759e:	21 50       	subi	r18, 0x01	; 1
    75a0:	31 09       	sbc	r19, r1
    75a2:	33 87       	std	Z+11, r19	; 0x0b
    75a4:	22 87       	std	Z+10, r18	; 0x0a
    75a6:	0c 96       	adiw	r24, 0x0c	; 12
    75a8:	91 87       	std	Z+9, r25	; 0x09
    75aa:	80 87       	std	Z+8, r24	; 0x08
    75ac:	f0 cf       	rjmp	.-32     	; 0x758e <normalize+0x108>
    75ae:	f7 01       	movw	r30, r14
    75b0:	c6 80       	ldd	r12, Z+6	; 0x06
    75b2:	d7 80       	ldd	r13, Z+7	; 0x07
    75b4:	a0 84       	ldd	r10, Z+8	; 0x08
    75b6:	b1 84       	ldd	r11, Z+9	; 0x09
    75b8:	b4 01       	movw	r22, r8
    75ba:	c5 01       	movw	r24, r10
    75bc:	59 dd       	rcall	.-1358   	; 0x7070 <Days_Per_Month>
    75be:	8c 15       	cp	r24, r12
    75c0:	9d 05       	cpc	r25, r13
    75c2:	84 f5       	brge	.+96     	; 0x7624 <normalize+0x19e>
    75c4:	c8 1a       	sub	r12, r24
    75c6:	d9 0a       	sbc	r13, r25
    75c8:	f7 01       	movw	r30, r14
    75ca:	d7 82       	std	Z+7, r13	; 0x07
    75cc:	c6 82       	std	Z+6, r12	; 0x06
    75ce:	c5 01       	movw	r24, r10
    75d0:	01 96       	adiw	r24, 0x01	; 1
    75d2:	91 87       	std	Z+9, r25	; 0x09
    75d4:	80 87       	std	Z+8, r24	; 0x08
    75d6:	0c 97       	sbiw	r24, 0x0c	; 12
    75d8:	54 f3       	brlt	.-44     	; 0x75ae <normalize+0x128>
    75da:	fb e0       	ldi	r31, 0x0B	; 11
    75dc:	af 1a       	sub	r10, r31
    75de:	b1 08       	sbc	r11, r1
    75e0:	f7 01       	movw	r30, r14
    75e2:	b1 86       	std	Z+9, r11	; 0x09
    75e4:	a0 86       	std	Z+8, r10	; 0x08
    75e6:	ff ef       	ldi	r31, 0xFF	; 255
    75e8:	8f 1a       	sub	r8, r31
    75ea:	9f 0a       	sbc	r9, r31
    75ec:	f7 01       	movw	r30, r14
    75ee:	93 86       	std	Z+11, r9	; 0x0b
    75f0:	82 86       	std	Z+10, r8	; 0x0a
    75f2:	f7 01       	movw	r30, r14
    75f4:	82 84       	ldd	r8, Z+10	; 0x0a
    75f6:	93 84       	ldd	r9, Z+11	; 0x0b
    75f8:	da cf       	rjmp	.-76     	; 0x75ae <normalize+0x128>
    75fa:	f7 01       	movw	r30, r14
    75fc:	80 85       	ldd	r24, Z+8	; 0x08
    75fe:	91 85       	ldd	r25, Z+9	; 0x09
    7600:	9c 01       	movw	r18, r24
    7602:	21 50       	subi	r18, 0x01	; 1
    7604:	31 09       	sbc	r19, r1
    7606:	37 fd       	sbrc	r19, 7
    7608:	16 c0       	rjmp	.+44     	; 0x7636 <normalize+0x1b0>
    760a:	31 87       	std	Z+9, r19	; 0x09
    760c:	20 87       	std	Z+8, r18	; 0x08
    760e:	f7 01       	movw	r30, r14
    7610:	62 85       	ldd	r22, Z+10	; 0x0a
    7612:	73 85       	ldd	r23, Z+11	; 0x0b
    7614:	80 85       	ldd	r24, Z+8	; 0x08
    7616:	91 85       	ldd	r25, Z+9	; 0x09
    7618:	2b dd       	rcall	.-1450   	; 0x7070 <Days_Per_Month>
    761a:	88 0d       	add	r24, r8
    761c:	99 1d       	adc	r25, r9
    761e:	f7 01       	movw	r30, r14
    7620:	97 83       	std	Z+7, r25	; 0x07
    7622:	86 83       	std	Z+6, r24	; 0x06
    7624:	f7 01       	movw	r30, r14
    7626:	86 80       	ldd	r8, Z+6	; 0x06
    7628:	97 80       	ldd	r9, Z+7	; 0x07
    762a:	a2 84       	ldd	r10, Z+10	; 0x0a
    762c:	b3 84       	ldd	r11, Z+11	; 0x0b
    762e:	18 14       	cp	r1, r8
    7630:	19 04       	cpc	r1, r9
    7632:	1c f7       	brge	.-58     	; 0x75fa <normalize+0x174>
    7634:	0b c0       	rjmp	.+22     	; 0x764c <normalize+0x1c6>
    7636:	0b 96       	adiw	r24, 0x0b	; 11
    7638:	f7 01       	movw	r30, r14
    763a:	91 87       	std	Z+9, r25	; 0x09
    763c:	80 87       	std	Z+8, r24	; 0x08
    763e:	f1 e0       	ldi	r31, 0x01	; 1
    7640:	af 1a       	sub	r10, r31
    7642:	b1 08       	sbc	r11, r1
    7644:	f7 01       	movw	r30, r14
    7646:	b3 86       	std	Z+11, r11	; 0x0b
    7648:	a2 86       	std	Z+10, r10	; 0x0a
    764a:	e1 cf       	rjmp	.-62     	; 0x760e <normalize+0x188>
    764c:	a5 01       	movw	r20, r10
    764e:	44 59       	subi	r20, 0x94	; 148
    7650:	58 4f       	sbci	r21, 0xF8	; 248
    7652:	58 87       	std	Y+8, r21	; 0x08
    7654:	4f 83       	std	Y+7, r20	; 0x07
    7656:	35 01       	movw	r6, r10
    7658:	56 e4       	ldi	r21, 0x46	; 70
    765a:	65 1a       	sub	r6, r21
    765c:	71 08       	sbc	r7, r1
    765e:	89 e8       	ldi	r24, 0x89	; 137
    7660:	68 16       	cp	r6, r24
    7662:	71 04       	cpc	r7, r1
    7664:	08 f0       	brcs	.+2      	; 0x7668 <normalize+0x1e2>
    7666:	9b c0       	rjmp	.+310    	; 0x779e <normalize+0x318>
    7668:	c0 84       	ldd	r12, Z+8	; 0x08
    766a:	d1 84       	ldd	r13, Z+9	; 0x09
    766c:	9c e0       	ldi	r25, 0x0C	; 12
    766e:	c9 16       	cp	r12, r25
    7670:	d1 04       	cpc	r13, r1
    7672:	08 f0       	brcs	.+2      	; 0x7676 <normalize+0x1f0>
    7674:	94 c0       	rjmp	.+296    	; 0x779e <normalize+0x318>
    7676:	24 01       	movw	r4, r8
    7678:	e1 e0       	ldi	r30, 0x01	; 1
    767a:	4e 1a       	sub	r4, r30
    767c:	51 08       	sbc	r5, r1
    767e:	6f 81       	ldd	r22, Y+7	; 0x07
    7680:	78 85       	ldd	r23, Y+8	; 0x08
    7682:	c6 01       	movw	r24, r12
    7684:	f5 dc       	rcall	.-1558   	; 0x7070 <Days_Per_Month>
    7686:	48 16       	cp	r4, r24
    7688:	59 06       	cpc	r5, r25
    768a:	0c f0       	brlt	.+2      	; 0x768e <normalize+0x208>
    768c:	88 c0       	rjmp	.+272    	; 0x779e <normalize+0x318>
    768e:	08 31       	cpi	r16, 0x18	; 24
    7690:	11 05       	cpc	r17, r1
    7692:	0c f0       	brlt	.+2      	; 0x7696 <normalize+0x210>
    7694:	84 c0       	rjmp	.+264    	; 0x779e <normalize+0x318>
    7696:	fc e3       	ldi	r31, 0x3C	; 60
    7698:	2f 16       	cp	r2, r31
    769a:	31 04       	cpc	r3, r1
    769c:	0c f0       	brlt	.+2      	; 0x76a0 <normalize+0x21a>
    769e:	7f c0       	rjmp	.+254    	; 0x779e <normalize+0x318>
    76a0:	4d 81       	ldd	r20, Y+5	; 0x05
    76a2:	5e 81       	ldd	r21, Y+6	; 0x06
    76a4:	4c 33       	cpi	r20, 0x3C	; 60
    76a6:	51 05       	cpc	r21, r1
    76a8:	0c f0       	brlt	.+2      	; 0x76ac <normalize+0x226>
    76aa:	79 c0       	rjmp	.+242    	; 0x779e <normalize+0x318>
    76ac:	2d e6       	ldi	r18, 0x6D	; 109
    76ae:	31 e0       	ldi	r19, 0x01	; 1
    76b0:	d3 01       	movw	r26, r6
    76b2:	0e 94 f3 e4 	call	0x1c9e6	; 0x1c9e6 <__usmulhisi3>
    76b6:	f6 01       	movw	r30, r12
    76b8:	ee 0f       	add	r30, r30
    76ba:	ff 1f       	adc	r31, r31
    76bc:	e2 54       	subi	r30, 0x42	; 66
    76be:	fd 4f       	sbci	r31, 0xFD	; 253
    76c0:	20 81       	ld	r18, Z
    76c2:	31 81       	ldd	r19, Z+1	; 0x01
    76c4:	dc 01       	movw	r26, r24
    76c6:	cb 01       	movw	r24, r22
    76c8:	82 0f       	add	r24, r18
    76ca:	93 1f       	adc	r25, r19
    76cc:	a1 1d       	adc	r26, r1
    76ce:	b1 1d       	adc	r27, r1
    76d0:	05 2c       	mov	r0, r5
    76d2:	00 0c       	add	r0, r0
    76d4:	66 08       	sbc	r6, r6
    76d6:	77 08       	sbc	r7, r7
    76d8:	48 0e       	add	r4, r24
    76da:	59 1e       	adc	r5, r25
    76dc:	6a 1e       	adc	r6, r26
    76de:	7b 1e       	adc	r7, r27
    76e0:	1a 14       	cp	r1, r10
    76e2:	1b 04       	cpc	r1, r11
    76e4:	1c f4       	brge	.+6      	; 0x76ec <normalize+0x266>
    76e6:	51 e0       	ldi	r21, 0x01	; 1
    76e8:	a5 1a       	sub	r10, r21
    76ea:	b1 08       	sbc	r11, r1
    76ec:	45 01       	movw	r8, r10
    76ee:	95 94       	asr	r9
    76f0:	87 94       	ror	r8
    76f2:	95 94       	asr	r9
    76f4:	87 94       	ror	r8
    76f6:	88 ec       	ldi	r24, 0xC8	; 200
    76f8:	a8 16       	cp	r10, r24
    76fa:	b1 04       	cpc	r11, r1
    76fc:	1c f0       	brlt	.+6      	; 0x7704 <normalize+0x27e>
    76fe:	91 e0       	ldi	r25, 0x01	; 1
    7700:	89 1a       	sub	r8, r25
    7702:	91 08       	sbc	r9, r1
    7704:	09 2c       	mov	r0, r9
    7706:	00 0c       	add	r0, r0
    7708:	aa 08       	sbc	r10, r10
    770a:	bb 08       	sbc	r11, r11
    770c:	84 0c       	add	r8, r4
    770e:	95 1c       	adc	r9, r5
    7710:	a6 1c       	adc	r10, r6
    7712:	b7 1c       	adc	r11, r7
    7714:	24 01       	movw	r4, r8
    7716:	35 01       	movw	r6, r10
    7718:	e1 e1       	ldi	r30, 0x11	; 17
    771a:	4e 1a       	sub	r4, r30
    771c:	51 08       	sbc	r5, r1
    771e:	61 08       	sbc	r6, r1
    7720:	71 08       	sbc	r7, r1
    7722:	f2 e0       	ldi	r31, 0x02	; 2
    7724:	cf 16       	cp	r12, r31
    7726:	d1 04       	cpc	r13, r1
    7728:	64 f0       	brlt	.+24     	; 0x7742 <normalize+0x2bc>
    772a:	8f 81       	ldd	r24, Y+7	; 0x07
    772c:	98 85       	ldd	r25, Y+8	; 0x08
    772e:	7b dc       	rcall	.-1802   	; 0x7026 <IS_Leap>
    7730:	89 2b       	or	r24, r25
    7732:	39 f0       	breq	.+14     	; 0x7742 <normalize+0x2bc>
    7734:	24 01       	movw	r4, r8
    7736:	35 01       	movw	r6, r10
    7738:	40 e1       	ldi	r20, 0x10	; 16
    773a:	44 1a       	sub	r4, r20
    773c:	51 08       	sbc	r5, r1
    773e:	61 08       	sbc	r6, r1
    7740:	71 08       	sbc	r7, r1
    7742:	a8 e1       	ldi	r26, 0x18	; 24
    7744:	b0 e0       	ldi	r27, 0x00	; 0
    7746:	a3 01       	movw	r20, r6
    7748:	92 01       	movw	r18, r4
    774a:	0e 94 f9 e4 	call	0x1c9f2	; 0x1c9f2 <__muluhisi3>
    774e:	01 2e       	mov	r0, r17
    7750:	00 0c       	add	r0, r0
    7752:	22 0b       	sbc	r18, r18
    7754:	33 0b       	sbc	r19, r19
    7756:	a9 01       	movw	r20, r18
    7758:	98 01       	movw	r18, r16
    775a:	26 0f       	add	r18, r22
    775c:	37 1f       	adc	r19, r23
    775e:	48 1f       	adc	r20, r24
    7760:	59 1f       	adc	r21, r25
    7762:	ac e3       	ldi	r26, 0x3C	; 60
    7764:	b0 e0       	ldi	r27, 0x00	; 0
    7766:	0e 94 f9 e4 	call	0x1c9f2	; 0x1c9f2 <__muluhisi3>
    776a:	81 01       	movw	r16, r2
    776c:	03 2c       	mov	r0, r3
    776e:	00 0c       	add	r0, r0
    7770:	22 0b       	sbc	r18, r18
    7772:	33 0b       	sbc	r19, r19
    7774:	a9 01       	movw	r20, r18
    7776:	98 01       	movw	r18, r16
    7778:	26 0f       	add	r18, r22
    777a:	37 1f       	adc	r19, r23
    777c:	48 1f       	adc	r20, r24
    777e:	59 1f       	adc	r21, r25
    7780:	0e 94 f9 e4 	call	0x1c9f2	; 0x1c9f2 <__muluhisi3>
    7784:	ed 81       	ldd	r30, Y+5	; 0x05
    7786:	fe 81       	ldd	r31, Y+6	; 0x06
    7788:	8f 01       	movw	r16, r30
    778a:	ff 0f       	add	r31, r31
    778c:	22 0b       	sbc	r18, r18
    778e:	33 0b       	sbc	r19, r19
    7790:	48 01       	movw	r8, r16
    7792:	59 01       	movw	r10, r18
    7794:	86 0e       	add	r8, r22
    7796:	97 1e       	adc	r9, r23
    7798:	a8 1e       	adc	r10, r24
    779a:	b9 1e       	adc	r11, r25
    779c:	04 c0       	rjmp	.+8      	; 0x77a6 <normalize+0x320>
    779e:	88 24       	eor	r8, r8
    77a0:	8a 94       	dec	r8
    77a2:	98 2c       	mov	r9, r8
    77a4:	54 01       	movw	r10, r8
    77a6:	49 85       	ldd	r20, Y+9	; 0x09
    77a8:	5a 85       	ldd	r21, Y+10	; 0x0a
    77aa:	45 2b       	or	r20, r21
    77ac:	e9 f0       	breq	.+58     	; 0x77e8 <normalize+0x362>
    77ae:	ce 01       	movw	r24, r28
    77b0:	01 96       	adiw	r24, 0x01	; 1
    77b2:	7d dd       	rcall	.-1286   	; 0x72ae <gettimezone>
    77b4:	a9 81       	ldd	r26, Y+1	; 0x01
    77b6:	ba 81       	ldd	r27, Y+2	; 0x02
    77b8:	2c e3       	ldi	r18, 0x3C	; 60
    77ba:	30 e0       	ldi	r19, 0x00	; 0
    77bc:	0e 94 f3 e4 	call	0x1c9e6	; 0x1c9e6 <__usmulhisi3>
    77c0:	2b 01       	movw	r4, r22
    77c2:	3c 01       	movw	r6, r24
    77c4:	c5 01       	movw	r24, r10
    77c6:	b4 01       	movw	r22, r8
    77c8:	e2 dd       	rcall	.-1084   	; 0x738e <is_dst>
    77ca:	89 2b       	or	r24, r25
    77cc:	51 f0       	breq	.+20     	; 0x77e2 <normalize+0x35c>
    77ce:	50 e1       	ldi	r21, 0x10	; 16
    77d0:	45 1a       	sub	r4, r21
    77d2:	5e e0       	ldi	r21, 0x0E	; 14
    77d4:	55 0a       	sbc	r5, r21
    77d6:	61 08       	sbc	r6, r1
    77d8:	71 08       	sbc	r7, r1
    77da:	cc 24       	eor	r12, r12
    77dc:	c3 94       	inc	r12
    77de:	d1 2c       	mov	r13, r1
    77e0:	08 c0       	rjmp	.+16     	; 0x77f2 <normalize+0x36c>
    77e2:	c1 2c       	mov	r12, r1
    77e4:	d1 2c       	mov	r13, r1
    77e6:	05 c0       	rjmp	.+10     	; 0x77f2 <normalize+0x36c>
    77e8:	c1 2c       	mov	r12, r1
    77ea:	d1 2c       	mov	r13, r1
    77ec:	41 2c       	mov	r4, r1
    77ee:	51 2c       	mov	r5, r1
    77f0:	32 01       	movw	r6, r4
    77f2:	87 01       	movw	r16, r14
    77f4:	a3 01       	movw	r20, r6
    77f6:	92 01       	movw	r18, r4
    77f8:	c5 01       	movw	r24, r10
    77fa:	b4 01       	movw	r22, r8
    77fc:	5a dc       	rcall	.-1868   	; 0x70b2 <time_to_tm>
    77fe:	c1 14       	cp	r12, r1
    7800:	d1 04       	cpc	r13, r1
    7802:	29 f0       	breq	.+10     	; 0x780e <normalize+0x388>
    7804:	21 e0       	ldi	r18, 0x01	; 1
    7806:	30 e0       	ldi	r19, 0x00	; 0
    7808:	f7 01       	movw	r30, r14
    780a:	31 8b       	std	Z+17, r19	; 0x11
    780c:	20 8b       	std	Z+16, r18	; 0x10
    780e:	2a 96       	adiw	r28, 0x0a	; 10
    7810:	e2 e1       	ldi	r30, 0x12	; 18
    7812:	0c 94 35 e5 	jmp	0x1ca6a	; 0x1ca6a <__epilogue_restores__>

00007816 <timegm>:
    7816:	60 e0       	ldi	r22, 0x00	; 0
    7818:	70 e0       	ldi	r23, 0x00	; 0
    781a:	35 ce       	rjmp	.-918    	; 0x7486 <normalize>
    781c:	08 95       	ret

0000781e <setdate_r>:
    781e:	cf 92       	push	r12
    7820:	df 92       	push	r13
    7822:	ef 92       	push	r14
    7824:	ff 92       	push	r15
    7826:	cf 93       	push	r28
    7828:	df 93       	push	r29
    782a:	cd b7       	in	r28, 0x3d	; 61
    782c:	de b7       	in	r29, 0x3e	; 62
    782e:	a5 97       	sbiw	r28, 0x25	; 37
    7830:	0f b6       	in	r0, 0x3f	; 63
    7832:	f8 94       	cli
    7834:	de bf       	out	0x3e, r29	; 62
    7836:	0f be       	out	0x3f, r0	; 63
    7838:	cd bf       	out	0x3d, r28	; 61
    783a:	9d a3       	std	Y+37, r25	; 0x25
    783c:	8c a3       	std	Y+36, r24	; 0x24
    783e:	1f 82       	std	Y+7, r1	; 0x07
    7840:	1e 82       	std	Y+6, r1	; 0x06
    7842:	19 86       	std	Y+9, r1	; 0x09
    7844:	18 86       	std	Y+8, r1	; 0x08
    7846:	1b 86       	std	Y+11, r1	; 0x0b
    7848:	1a 86       	std	Y+10, r1	; 0x0a
    784a:	1d 86       	std	Y+13, r1	; 0x0d
    784c:	1c 86       	std	Y+12, r1	; 0x0c
    784e:	1f 86       	std	Y+15, r1	; 0x0f
    7850:	1e 86       	std	Y+14, r1	; 0x0e
    7852:	19 8a       	std	Y+17, r1	; 0x11
    7854:	18 8a       	std	Y+16, r1	; 0x10
    7856:	8c a1       	ldd	r24, Y+36	; 0x24
    7858:	9d a1       	ldd	r25, Y+37	; 0x25
    785a:	fc 01       	movw	r30, r24
    785c:	20 81       	ld	r18, Z
    785e:	20 32       	cpi	r18, 0x20	; 32
    7860:	21 f4       	brne	.+8      	; 0x786a <setdate_r+0x4c>
    7862:	01 96       	adiw	r24, 0x01	; 1
    7864:	9d a3       	std	Y+37, r25	; 0x25
    7866:	8c a3       	std	Y+36, r24	; 0x24
    7868:	f6 cf       	rjmp	.-20     	; 0x7856 <setdate_r+0x38>
    786a:	4a e0       	ldi	r20, 0x0A	; 10
    786c:	50 e0       	ldi	r21, 0x00	; 0
    786e:	be 01       	movw	r22, r28
    7870:	6c 5d       	subi	r22, 0xDC	; 220
    7872:	7f 4f       	sbci	r23, 0xFF	; 255
    7874:	0e 94 28 48 	call	0x9050	; 0x9050 <strtol>
    7878:	79 8b       	std	Y+17, r23	; 0x11
    787a:	68 8b       	std	Y+16, r22	; 0x10
    787c:	8c a1       	ldd	r24, Y+36	; 0x24
    787e:	9d a1       	ldd	r25, Y+37	; 0x25
    7880:	fc 01       	movw	r30, r24
    7882:	20 81       	ld	r18, Z
    7884:	20 32       	cpi	r18, 0x20	; 32
    7886:	21 f4       	brne	.+8      	; 0x7890 <setdate_r+0x72>
    7888:	01 96       	adiw	r24, 0x01	; 1
    788a:	9d a3       	std	Y+37, r25	; 0x25
    788c:	8c a3       	std	Y+36, r24	; 0x24
    788e:	f6 cf       	rjmp	.-20     	; 0x787c <setdate_r+0x5e>
    7890:	4a e0       	ldi	r20, 0x0A	; 10
    7892:	50 e0       	ldi	r21, 0x00	; 0
    7894:	be 01       	movw	r22, r28
    7896:	6c 5d       	subi	r22, 0xDC	; 220
    7898:	7f 4f       	sbci	r23, 0xFF	; 255
    789a:	0e 94 28 48 	call	0x9050	; 0x9050 <strtol>
    789e:	7f 87       	std	Y+15, r23	; 0x0f
    78a0:	6e 87       	std	Y+14, r22	; 0x0e
    78a2:	8c a1       	ldd	r24, Y+36	; 0x24
    78a4:	9d a1       	ldd	r25, Y+37	; 0x25
    78a6:	fc 01       	movw	r30, r24
    78a8:	20 81       	ld	r18, Z
    78aa:	20 32       	cpi	r18, 0x20	; 32
    78ac:	21 f4       	brne	.+8      	; 0x78b6 <setdate_r+0x98>
    78ae:	01 96       	adiw	r24, 0x01	; 1
    78b0:	9d a3       	std	Y+37, r25	; 0x25
    78b2:	8c a3       	std	Y+36, r24	; 0x24
    78b4:	f6 cf       	rjmp	.-20     	; 0x78a2 <setdate_r+0x84>
    78b6:	4a e0       	ldi	r20, 0x0A	; 10
    78b8:	50 e0       	ldi	r21, 0x00	; 0
    78ba:	be 01       	movw	r22, r28
    78bc:	6c 5d       	subi	r22, 0xDC	; 220
    78be:	7f 4f       	sbci	r23, 0xFF	; 255
    78c0:	0e 94 28 48 	call	0x9050	; 0x9050 <strtol>
    78c4:	7d 87       	std	Y+13, r23	; 0x0d
    78c6:	6c 87       	std	Y+12, r22	; 0x0c
    78c8:	8c a1       	ldd	r24, Y+36	; 0x24
    78ca:	9d a1       	ldd	r25, Y+37	; 0x25
    78cc:	fc 01       	movw	r30, r24
    78ce:	20 81       	ld	r18, Z
    78d0:	20 32       	cpi	r18, 0x20	; 32
    78d2:	21 f4       	brne	.+8      	; 0x78dc <setdate_r+0xbe>
    78d4:	01 96       	adiw	r24, 0x01	; 1
    78d6:	9d a3       	std	Y+37, r25	; 0x25
    78d8:	8c a3       	std	Y+36, r24	; 0x24
    78da:	f6 cf       	rjmp	.-20     	; 0x78c8 <setdate_r+0xaa>
    78dc:	4a e0       	ldi	r20, 0x0A	; 10
    78de:	50 e0       	ldi	r21, 0x00	; 0
    78e0:	be 01       	movw	r22, r28
    78e2:	6c 5d       	subi	r22, 0xDC	; 220
    78e4:	7f 4f       	sbci	r23, 0xFF	; 255
    78e6:	0e 94 28 48 	call	0x9050	; 0x9050 <strtol>
    78ea:	7b 87       	std	Y+11, r23	; 0x0b
    78ec:	6a 87       	std	Y+10, r22	; 0x0a
    78ee:	ec a1       	ldd	r30, Y+36	; 0x24
    78f0:	fd a1       	ldd	r31, Y+37	; 0x25
    78f2:	80 81       	ld	r24, Z
    78f4:	88 23       	and	r24, r24
    78f6:	39 f0       	breq	.+14     	; 0x7906 <setdate_r+0xe8>
    78f8:	80 32       	cpi	r24, 0x20	; 32
    78fa:	11 f0       	breq	.+4      	; 0x7900 <setdate_r+0xe2>
    78fc:	8a 33       	cpi	r24, 0x3A	; 58
    78fe:	19 f4       	brne	.+6      	; 0x7906 <setdate_r+0xe8>
    7900:	31 96       	adiw	r30, 0x01	; 1
    7902:	fd a3       	std	Y+37, r31	; 0x25
    7904:	ec a3       	std	Y+36, r30	; 0x24
    7906:	4a e0       	ldi	r20, 0x0A	; 10
    7908:	50 e0       	ldi	r21, 0x00	; 0
    790a:	be 01       	movw	r22, r28
    790c:	6c 5d       	subi	r22, 0xDC	; 220
    790e:	7f 4f       	sbci	r23, 0xFF	; 255
    7910:	8c a1       	ldd	r24, Y+36	; 0x24
    7912:	9d a1       	ldd	r25, Y+37	; 0x25
    7914:	0e 94 28 48 	call	0x9050	; 0x9050 <strtol>
    7918:	79 87       	std	Y+9, r23	; 0x09
    791a:	68 87       	std	Y+8, r22	; 0x08
    791c:	ec a1       	ldd	r30, Y+36	; 0x24
    791e:	fd a1       	ldd	r31, Y+37	; 0x25
    7920:	80 81       	ld	r24, Z
    7922:	88 23       	and	r24, r24
    7924:	39 f0       	breq	.+14     	; 0x7934 <setdate_r+0x116>
    7926:	80 32       	cpi	r24, 0x20	; 32
    7928:	11 f0       	breq	.+4      	; 0x792e <setdate_r+0x110>
    792a:	8a 33       	cpi	r24, 0x3A	; 58
    792c:	19 f4       	brne	.+6      	; 0x7934 <setdate_r+0x116>
    792e:	31 96       	adiw	r30, 0x01	; 1
    7930:	fd a3       	std	Y+37, r31	; 0x25
    7932:	ec a3       	std	Y+36, r30	; 0x24
    7934:	4a e0       	ldi	r20, 0x0A	; 10
    7936:	50 e0       	ldi	r21, 0x00	; 0
    7938:	be 01       	movw	r22, r28
    793a:	6c 5d       	subi	r22, 0xDC	; 220
    793c:	7f 4f       	sbci	r23, 0xFF	; 255
    793e:	8c a1       	ldd	r24, Y+36	; 0x24
    7940:	9d a1       	ldd	r25, Y+37	; 0x25
    7942:	0e 94 28 48 	call	0x9050	; 0x9050 <strtol>
    7946:	7f 83       	std	Y+7, r23	; 0x07
    7948:	6e 83       	std	Y+6, r22	; 0x06
    794a:	2e 85       	ldd	r18, Y+14	; 0x0e
    794c:	3f 85       	ldd	r19, Y+15	; 0x0f
    794e:	21 50       	subi	r18, 0x01	; 1
    7950:	31 09       	sbc	r19, r1
    7952:	3f 87       	std	Y+15, r19	; 0x0f
    7954:	2e 87       	std	Y+14, r18	; 0x0e
    7956:	88 89       	ldd	r24, Y+16	; 0x10
    7958:	99 89       	ldd	r25, Y+17	; 0x11
    795a:	ac 01       	movw	r20, r24
    795c:	42 5b       	subi	r20, 0xB2	; 178
    795e:	57 40       	sbci	r21, 0x07	; 7
    7960:	45 34       	cpi	r20, 0x45	; 69
    7962:	51 05       	cpc	r21, r1
    7964:	38 f0       	brcs	.+14     	; 0x7974 <setdate_r+0x156>
    7966:	ed b7       	in	r30, 0x3d	; 61
    7968:	fe b7       	in	r31, 0x3e	; 62
    796a:	95 83       	std	Z+5, r25	; 0x05
    796c:	84 83       	std	Z+4, r24	; 0x04
    796e:	80 ee       	ldi	r24, 0xE0	; 224
    7970:	96 e0       	ldi	r25, 0x06	; 6
    7972:	34 c0       	rjmp	.+104    	; 0x79dc <setdate_r+0x1be>
    7974:	8c 56       	subi	r24, 0x6C	; 108
    7976:	97 40       	sbci	r25, 0x07	; 7
    7978:	99 8b       	std	Y+17, r25	; 0x11
    797a:	88 8b       	std	Y+16, r24	; 0x10
    797c:	2c 30       	cpi	r18, 0x0C	; 12
    797e:	31 05       	cpc	r19, r1
    7980:	38 f0       	brcs	.+14     	; 0x7990 <setdate_r+0x172>
    7982:	ed b7       	in	r30, 0x3d	; 61
    7984:	fe b7       	in	r31, 0x3e	; 62
    7986:	95 83       	std	Z+5, r25	; 0x05
    7988:	84 83       	std	Z+4, r24	; 0x04
    798a:	8f ec       	ldi	r24, 0xCF	; 207
    798c:	96 e0       	ldi	r25, 0x06	; 6
    798e:	26 c0       	rjmp	.+76     	; 0x79dc <setdate_r+0x1be>
    7990:	8c 85       	ldd	r24, Y+12	; 0x0c
    7992:	9d 85       	ldd	r25, Y+13	; 0x0d
    7994:	9c 01       	movw	r18, r24
    7996:	21 50       	subi	r18, 0x01	; 1
    7998:	31 09       	sbc	r19, r1
    799a:	2f 31       	cpi	r18, 0x1F	; 31
    799c:	31 05       	cpc	r19, r1
    799e:	38 f0       	brcs	.+14     	; 0x79ae <setdate_r+0x190>
    79a0:	ed b7       	in	r30, 0x3d	; 61
    79a2:	fe b7       	in	r31, 0x3e	; 62
    79a4:	95 83       	std	Z+5, r25	; 0x05
    79a6:	84 83       	std	Z+4, r24	; 0x04
    79a8:	8e eb       	ldi	r24, 0xBE	; 190
    79aa:	96 e0       	ldi	r25, 0x06	; 6
    79ac:	17 c0       	rjmp	.+46     	; 0x79dc <setdate_r+0x1be>
    79ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    79b0:	9b 85       	ldd	r25, Y+11	; 0x0b
    79b2:	88 31       	cpi	r24, 0x18	; 24
    79b4:	91 05       	cpc	r25, r1
    79b6:	38 f0       	brcs	.+14     	; 0x79c6 <setdate_r+0x1a8>
    79b8:	ed b7       	in	r30, 0x3d	; 61
    79ba:	fe b7       	in	r31, 0x3e	; 62
    79bc:	95 83       	std	Z+5, r25	; 0x05
    79be:	84 83       	std	Z+4, r24	; 0x04
    79c0:	8c ea       	ldi	r24, 0xAC	; 172
    79c2:	96 e0       	ldi	r25, 0x06	; 6
    79c4:	0b c0       	rjmp	.+22     	; 0x79dc <setdate_r+0x1be>
    79c6:	88 85       	ldd	r24, Y+8	; 0x08
    79c8:	99 85       	ldd	r25, Y+9	; 0x09
    79ca:	8c 33       	cpi	r24, 0x3C	; 60
    79cc:	91 05       	cpc	r25, r1
    79ce:	68 f0       	brcs	.+26     	; 0x79ea <setdate_r+0x1cc>
    79d0:	ed b7       	in	r30, 0x3d	; 61
    79d2:	fe b7       	in	r31, 0x3e	; 62
    79d4:	95 83       	std	Z+5, r25	; 0x05
    79d6:	84 83       	std	Z+4, r24	; 0x04
    79d8:	8b e9       	ldi	r24, 0x9B	; 155
    79da:	96 e0       	ldi	r25, 0x06	; 6
    79dc:	a0 e0       	ldi	r26, 0x00	; 0
    79de:	81 83       	std	Z+1, r24	; 0x01
    79e0:	92 83       	std	Z+2, r25	; 0x02
    79e2:	a3 83       	std	Z+3, r26	; 0x03
    79e4:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    79e8:	25 c0       	rjmp	.+74     	; 0x7a34 <setdate_r+0x216>
    79ea:	ce 01       	movw	r24, r28
    79ec:	06 96       	adiw	r24, 0x06	; 6
    79ee:	13 df       	rcall	.-474    	; 0x7816 <timegm>
    79f0:	6b 01       	movw	r12, r22
    79f2:	7c 01       	movw	r14, r24
    79f4:	6c 8f       	std	Y+28, r22	; 0x1c
    79f6:	7d 8f       	std	Y+29, r23	; 0x1d
    79f8:	8e 8f       	std	Y+30, r24	; 0x1e
    79fa:	9f 8f       	std	Y+31, r25	; 0x1f
    79fc:	18 a2       	std	Y+32, r1	; 0x20
    79fe:	19 a2       	std	Y+33, r1	; 0x21
    7a00:	1a a2       	std	Y+34, r1	; 0x22
    7a02:	1b a2       	std	Y+35, r1	; 0x23
    7a04:	be 01       	movw	r22, r28
    7a06:	64 5e       	subi	r22, 0xE4	; 228
    7a08:	7f 4f       	sbci	r23, 0xFF	; 255
    7a0a:	80 e0       	ldi	r24, 0x00	; 0
    7a0c:	90 e0       	ldi	r25, 0x00	; 0
    7a0e:	03 db       	rcall	.-2554   	; 0x7016 <clock_settime>
    7a10:	b7 01       	movw	r22, r14
    7a12:	a6 01       	movw	r20, r12
    7a14:	81 e0       	ldi	r24, 0x01	; 1
    7a16:	90 e0       	ldi	r25, 0x00	; 0
    7a18:	0e 94 83 30 	call	0x6106	; 0x6106 <rtc_init>
    7a1c:	81 11       	cpse	r24, r1
    7a1e:	0d c0       	rjmp	.+26     	; 0x7a3a <setdate_r+0x21c>
    7a20:	84 e8       	ldi	r24, 0x84	; 132
    7a22:	96 e0       	ldi	r25, 0x06	; 6
    7a24:	a0 e0       	ldi	r26, 0x00	; 0
    7a26:	ed b7       	in	r30, 0x3d	; 61
    7a28:	fe b7       	in	r31, 0x3e	; 62
    7a2a:	81 83       	std	Z+1, r24	; 0x01
    7a2c:	92 83       	std	Z+2, r25	; 0x02
    7a2e:	a3 83       	std	Z+3, r26	; 0x03
    7a30:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    7a34:	8f ef       	ldi	r24, 0xFF	; 255
    7a36:	9f ef       	ldi	r25, 0xFF	; 255
    7a38:	02 c0       	rjmp	.+4      	; 0x7a3e <setdate_r+0x220>
    7a3a:	80 e0       	ldi	r24, 0x00	; 0
    7a3c:	90 e0       	ldi	r25, 0x00	; 0
    7a3e:	a5 96       	adiw	r28, 0x25	; 37
    7a40:	0f b6       	in	r0, 0x3f	; 63
    7a42:	f8 94       	cli
    7a44:	de bf       	out	0x3e, r29	; 62
    7a46:	0f be       	out	0x3f, r0	; 63
    7a48:	cd bf       	out	0x3d, r28	; 61
    7a4a:	df 91       	pop	r29
    7a4c:	cf 91       	pop	r28
    7a4e:	ff 90       	pop	r15
    7a50:	ef 90       	pop	r14
    7a52:	df 90       	pop	r13
    7a54:	cf 90       	pop	r12
    7a56:	08 95       	ret

00007a58 <setdate>:
    7a58:	ab e2       	ldi	r26, 0x2B	; 43
    7a5a:	b0 e0       	ldi	r27, 0x00	; 0
    7a5c:	e2 e3       	ldi	r30, 0x32	; 50
    7a5e:	fd e3       	ldi	r31, 0x3D	; 61
    7a60:	0c 94 29 e5 	jmp	0x1ca52	; 0x1ca52 <__prologue_saves__+0x20>
    7a64:	82 ef       	ldi	r24, 0xF2	; 242
    7a66:	96 e0       	ldi	r25, 0x06	; 6
    7a68:	a0 e0       	ldi	r26, 0x00	; 0
    7a6a:	ed b7       	in	r30, 0x3d	; 61
    7a6c:	fe b7       	in	r31, 0x3e	; 62
    7a6e:	81 83       	std	Z+1, r24	; 0x01
    7a70:	92 83       	std	Z+2, r25	; 0x02
    7a72:	a3 83       	std	Z+3, r26	; 0x03
    7a74:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    7a78:	40 91 57 1c 	lds	r20, 0x1C57	; 0x801c57 <__iob>
    7a7c:	50 91 58 1c 	lds	r21, 0x1C58	; 0x801c58 <__iob+0x1>
    7a80:	67 e2       	ldi	r22, 0x27	; 39
    7a82:	70 e0       	ldi	r23, 0x00	; 0
    7a84:	ce 01       	movw	r24, r28
    7a86:	04 96       	adiw	r24, 0x04	; 4
    7a88:	0e 94 dc 77 	call	0xefb8	; 0xefb8 <fgets>
    7a8c:	ce 01       	movw	r24, r28
    7a8e:	04 96       	adiw	r24, 0x04	; 4
    7a90:	c6 de       	rcall	.-628    	; 0x781e <setdate_r>
    7a92:	ab 96       	adiw	r28, 0x2b	; 43
    7a94:	e2 e0       	ldi	r30, 0x02	; 2
    7a96:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__epilogue_restores__+0x20>

00007a9a <find_dst>:
    7a9a:	a8 e2       	ldi	r26, 0x28	; 40
    7a9c:	b0 e0       	ldi	r27, 0x00	; 0
    7a9e:	e3 e5       	ldi	r30, 0x53	; 83
    7aa0:	fd e3       	ldi	r31, 0x3D	; 61
    7aa2:	0c 94 19 e5 	jmp	0x1ca32	; 0x1ca32 <__prologue_saves__>
    7aa6:	3c 01       	movw	r6, r24
    7aa8:	1a 01       	movw	r2, r20
    7aaa:	2b 01       	movw	r4, r22
    7aac:	49 01       	movw	r8, r18
    7aae:	1c a3       	std	Y+36, r17	; 0x24
    7ab0:	0b a3       	std	Y+35, r16	; 0x23
    7ab2:	de a2       	std	Y+38, r13	; 0x26
    7ab4:	cd a2       	std	Y+37, r12	; 0x25
    7ab6:	b8 a6       	std	Y+40, r11	; 0x28
    7ab8:	af a2       	std	Y+39, r10	; 0x27
    7aba:	be 01       	movw	r22, r28
    7abc:	61 5e       	subi	r22, 0xE1	; 225
    7abe:	7f 4f       	sbci	r23, 0xFF	; 255
    7ac0:	ce 01       	movw	r24, r28
    7ac2:	47 96       	adiw	r24, 0x17	; 23
    7ac4:	15 dc       	rcall	.-2006   	; 0x72f0 <gettimeofday>
    7ac6:	af 8d       	ldd	r26, Y+31	; 0x1f
    7ac8:	b8 a1       	ldd	r27, Y+32	; 0x20
    7aca:	2c e3       	ldi	r18, 0x3C	; 60
    7acc:	30 e0       	ldi	r19, 0x00	; 0
    7ace:	0e 94 f3 e4 	call	0x1c9e6	; 0x1c9e6 <__usmulhisi3>
    7ad2:	5b 01       	movw	r10, r22
    7ad4:	6c 01       	movw	r12, r24
    7ad6:	61 14       	cp	r6, r1
    7ad8:	71 04       	cpc	r7, r1
    7ada:	31 f0       	breq	.+12     	; 0x7ae8 <find_dst+0x4e>
    7adc:	20 e1       	ldi	r18, 0x10	; 16
    7ade:	a2 1a       	sub	r10, r18
    7ae0:	2e e0       	ldi	r18, 0x0E	; 14
    7ae2:	b2 0a       	sbc	r11, r18
    7ae4:	c1 08       	sbc	r12, r1
    7ae6:	d1 08       	sbc	r13, r1
    7ae8:	81 14       	cp	r8, r1
    7aea:	91 04       	cpc	r9, r1
    7aec:	39 f0       	breq	.+14     	; 0x7afc <find_dst+0x62>
    7aee:	4c e6       	ldi	r20, 0x6C	; 108
    7af0:	84 1a       	sub	r8, r20
    7af2:	47 e0       	ldi	r20, 0x07	; 7
    7af4:	94 0a       	sbc	r9, r20
    7af6:	9c 86       	std	Y+12, r9	; 0x0c
    7af8:	8b 86       	std	Y+11, r8	; 0x0b
    7afa:	11 c0       	rjmp	.+34     	; 0x7b1e <find_dst+0x84>
    7afc:	21 14       	cp	r2, r1
    7afe:	31 04       	cpc	r3, r1
    7b00:	41 04       	cpc	r4, r1
    7b02:	51 04       	cpc	r5, r1
    7b04:	21 f4       	brne	.+8      	; 0x7b0e <find_dst+0x74>
    7b06:	2f 88       	ldd	r2, Y+23	; 0x17
    7b08:	38 8c       	ldd	r3, Y+24	; 0x18
    7b0a:	49 8c       	ldd	r4, Y+25	; 0x19
    7b0c:	5a 8c       	ldd	r5, Y+26	; 0x1a
    7b0e:	8e 01       	movw	r16, r28
    7b10:	0f 5f       	subi	r16, 0xFF	; 255
    7b12:	1f 4f       	sbci	r17, 0xFF	; 255
    7b14:	a6 01       	movw	r20, r12
    7b16:	95 01       	movw	r18, r10
    7b18:	c2 01       	movw	r24, r4
    7b1a:	b1 01       	movw	r22, r2
    7b1c:	ca da       	rcall	.-2668   	; 0x70b2 <time_to_tm>
    7b1e:	8b a1       	ldd	r24, Y+35	; 0x23
    7b20:	9c a1       	ldd	r25, Y+36	; 0x24
    7b22:	01 97       	sbiw	r24, 0x01	; 1
    7b24:	9a 87       	std	Y+10, r25	; 0x0a
    7b26:	89 87       	std	Y+9, r24	; 0x09
    7b28:	81 e0       	ldi	r24, 0x01	; 1
    7b2a:	90 e0       	ldi	r25, 0x00	; 0
    7b2c:	98 87       	std	Y+8, r25	; 0x08
    7b2e:	8f 83       	std	Y+7, r24	; 0x07
    7b30:	8f a1       	ldd	r24, Y+39	; 0x27
    7b32:	98 a5       	ldd	r25, Y+40	; 0x28
    7b34:	9e 83       	std	Y+6, r25	; 0x06
    7b36:	8d 83       	std	Y+5, r24	; 0x05
    7b38:	1c 82       	std	Y+4, r1	; 0x04
    7b3a:	1b 82       	std	Y+3, r1	; 0x03
    7b3c:	1a 82       	std	Y+2, r1	; 0x02
    7b3e:	19 82       	std	Y+1, r1	; 0x01
    7b40:	ce 01       	movw	r24, r28
    7b42:	01 96       	adiw	r24, 0x01	; 1
    7b44:	68 de       	rcall	.-816    	; 0x7816 <timegm>
    7b46:	45 01       	movw	r8, r10
    7b48:	56 01       	movw	r10, r12
    7b4a:	86 0e       	add	r8, r22
    7b4c:	97 1e       	adc	r9, r23
    7b4e:	a8 1e       	adc	r10, r24
    7b50:	b9 1e       	adc	r11, r25
    7b52:	8e 01       	movw	r16, r28
    7b54:	0f 5f       	subi	r16, 0xFF	; 255
    7b56:	1f 4f       	sbci	r17, 0xFF	; 255
    7b58:	20 e0       	ldi	r18, 0x00	; 0
    7b5a:	30 e0       	ldi	r19, 0x00	; 0
    7b5c:	a9 01       	movw	r20, r18
    7b5e:	c5 01       	movw	r24, r10
    7b60:	b4 01       	movw	r22, r8
    7b62:	a7 da       	rcall	.-2738   	; 0x70b2 <time_to_tm>
    7b64:	2d 85       	ldd	r18, Y+13	; 0x0d
    7b66:	3e 85       	ldd	r19, Y+14	; 0x0e
    7b68:	e7 e0       	ldi	r30, 0x07	; 7
    7b6a:	f0 e0       	ldi	r31, 0x00	; 0
    7b6c:	c9 01       	movw	r24, r18
    7b6e:	bf 01       	movw	r22, r30
    7b70:	0e 94 84 e4 	call	0x1c908	; 0x1c908 <__divmodhi4>
    7b74:	4d a1       	ldd	r20, Y+37	; 0x25
    7b76:	5e a1       	ldd	r21, Y+38	; 0x26
    7b78:	48 17       	cp	r20, r24
    7b7a:	59 07       	cpc	r21, r25
    7b7c:	21 f4       	brne	.+8      	; 0x7b86 <find_dst+0xec>
    7b7e:	51 e0       	ldi	r21, 0x01	; 1
    7b80:	e5 1a       	sub	r14, r21
    7b82:	f1 08       	sbc	r15, r1
    7b84:	51 f0       	breq	.+20     	; 0x7b9a <find_dst+0x100>
    7b86:	80 e8       	ldi	r24, 0x80	; 128
    7b88:	88 0e       	add	r8, r24
    7b8a:	81 e5       	ldi	r24, 0x51	; 81
    7b8c:	98 1e       	adc	r9, r24
    7b8e:	81 e0       	ldi	r24, 0x01	; 1
    7b90:	a8 1e       	adc	r10, r24
    7b92:	b1 1c       	adc	r11, r1
    7b94:	2f 5f       	subi	r18, 0xFF	; 255
    7b96:	3f 4f       	sbci	r19, 0xFF	; 255
    7b98:	e9 cf       	rjmp	.-46     	; 0x7b6c <find_dst+0xd2>
    7b9a:	c5 01       	movw	r24, r10
    7b9c:	b4 01       	movw	r22, r8
    7b9e:	a8 96       	adiw	r28, 0x28	; 40
    7ba0:	e2 e1       	ldi	r30, 0x12	; 18
    7ba2:	0c 94 35 e5 	jmp	0x1ca6a	; 0x1ca6a <__epilogue_restores__>

00007ba6 <set_dst>:
    7ba6:	4f 92       	push	r4
    7ba8:	5f 92       	push	r5
    7baa:	6f 92       	push	r6
    7bac:	7f 92       	push	r7
    7bae:	af 92       	push	r10
    7bb0:	bf 92       	push	r11
    7bb2:	cf 92       	push	r12
    7bb4:	df 92       	push	r13
    7bb6:	ef 92       	push	r14
    7bb8:	ff 92       	push	r15
    7bba:	0f 93       	push	r16
    7bbc:	1f 93       	push	r17
    7bbe:	cf 93       	push	r28
    7bc0:	df 93       	push	r29
    7bc2:	cd b7       	in	r28, 0x3d	; 61
    7bc4:	de b7       	in	r29, 0x3e	; 62
    7bc6:	2c 97       	sbiw	r28, 0x0c	; 12
    7bc8:	0f b6       	in	r0, 0x3f	; 63
    7bca:	f8 94       	cli
    7bcc:	de bf       	out	0x3e, r29	; 62
    7bce:	0f be       	out	0x3f, r0	; 63
    7bd0:	cd bf       	out	0x3d, r28	; 61
    7bd2:	2b 01       	movw	r4, r22
    7bd4:	3c 01       	movw	r6, r24
    7bd6:	67 2b       	or	r22, r23
    7bd8:	68 2b       	or	r22, r24
    7bda:	69 2b       	or	r22, r25
    7bdc:	51 f4       	brne	.+20     	; 0x7bf2 <set_dst+0x4c>
    7bde:	be 01       	movw	r22, r28
    7be0:	67 5f       	subi	r22, 0xF7	; 247
    7be2:	7f 4f       	sbci	r23, 0xFF	; 255
    7be4:	ce 01       	movw	r24, r28
    7be6:	01 96       	adiw	r24, 0x01	; 1
    7be8:	83 db       	rcall	.-2298   	; 0x72f0 <gettimeofday>
    7bea:	49 80       	ldd	r4, Y+1	; 0x01
    7bec:	5a 80       	ldd	r5, Y+2	; 0x02
    7bee:	6b 80       	ldd	r6, Y+3	; 0x03
    7bf0:	7c 80       	ldd	r7, Y+4	; 0x04
    7bf2:	80 91 0e 1a 	lds	r24, 0x1A0E	; 0x801a0e <dst+0x8>
    7bf6:	90 91 0f 1a 	lds	r25, 0x1A0F	; 0x801a0f <dst+0x9>
    7bfa:	a0 91 10 1a 	lds	r26, 0x1A10	; 0x801a10 <dst+0xa>
    7bfe:	b0 91 11 1a 	lds	r27, 0x1A11	; 0x801a11 <dst+0xb>
    7c02:	84 15       	cp	r24, r4
    7c04:	95 05       	cpc	r25, r5
    7c06:	a6 05       	cpc	r26, r6
    7c08:	b7 05       	cpc	r27, r7
    7c0a:	50 f0       	brcs	.+20     	; 0x7c20 <set_dst+0x7a>
    7c0c:	84 19       	sub	r24, r4
    7c0e:	95 09       	sbc	r25, r5
    7c10:	a6 09       	sbc	r26, r6
    7c12:	b7 09       	sbc	r27, r7
    7c14:	80 38       	cpi	r24, 0x80	; 128
    7c16:	91 45       	sbci	r25, 0x51	; 81
    7c18:	a1 40       	sbci	r26, 0x01	; 1
    7c1a:	b1 05       	cpc	r27, r1
    7c1c:	70 f4       	brcc	.+28     	; 0x7c3a <set_dst+0x94>
    7c1e:	42 c0       	rjmp	.+132    	; 0x7ca4 <set_dst+0xfe>
    7c20:	a3 01       	movw	r20, r6
    7c22:	92 01       	movw	r18, r4
    7c24:	28 1b       	sub	r18, r24
    7c26:	39 0b       	sbc	r19, r25
    7c28:	4a 0b       	sbc	r20, r26
    7c2a:	5b 0b       	sbc	r21, r27
    7c2c:	da 01       	movw	r26, r20
    7c2e:	c9 01       	movw	r24, r18
    7c30:	80 38       	cpi	r24, 0x80	; 128
    7c32:	91 45       	sbci	r25, 0x51	; 81
    7c34:	a1 40       	sbci	r26, 0x01	; 1
    7c36:	b1 05       	cpc	r27, r1
    7c38:	a8 f1       	brcs	.+106    	; 0x7ca4 <set_dst+0xfe>
    7c3a:	40 92 0e 1a 	sts	0x1A0E, r4	; 0x801a0e <dst+0x8>
    7c3e:	50 92 0f 1a 	sts	0x1A0F, r5	; 0x801a0f <dst+0x9>
    7c42:	60 92 10 1a 	sts	0x1A10, r6	; 0x801a10 <dst+0xa>
    7c46:	70 92 11 1a 	sts	0x1A11, r7	; 0x801a11 <dst+0xb>
    7c4a:	82 e0       	ldi	r24, 0x02	; 2
    7c4c:	a8 2e       	mov	r10, r24
    7c4e:	b1 2c       	mov	r11, r1
    7c50:	c1 2c       	mov	r12, r1
    7c52:	d1 2c       	mov	r13, r1
    7c54:	92 e0       	ldi	r25, 0x02	; 2
    7c56:	e9 2e       	mov	r14, r25
    7c58:	f1 2c       	mov	r15, r1
    7c5a:	03 e0       	ldi	r16, 0x03	; 3
    7c5c:	10 e0       	ldi	r17, 0x00	; 0
    7c5e:	20 e0       	ldi	r18, 0x00	; 0
    7c60:	30 e0       	ldi	r19, 0x00	; 0
    7c62:	b3 01       	movw	r22, r6
    7c64:	a2 01       	movw	r20, r4
    7c66:	80 e0       	ldi	r24, 0x00	; 0
    7c68:	90 e0       	ldi	r25, 0x00	; 0
    7c6a:	17 df       	rcall	.-466    	; 0x7a9a <find_dst>
    7c6c:	60 93 06 1a 	sts	0x1A06, r22	; 0x801a06 <dst>
    7c70:	70 93 07 1a 	sts	0x1A07, r23	; 0x801a07 <dst+0x1>
    7c74:	80 93 08 1a 	sts	0x1A08, r24	; 0x801a08 <dst+0x2>
    7c78:	90 93 09 1a 	sts	0x1A09, r25	; 0x801a09 <dst+0x3>
    7c7c:	ee 24       	eor	r14, r14
    7c7e:	e3 94       	inc	r14
    7c80:	f1 2c       	mov	r15, r1
    7c82:	0b e0       	ldi	r16, 0x0B	; 11
    7c84:	10 e0       	ldi	r17, 0x00	; 0
    7c86:	20 e0       	ldi	r18, 0x00	; 0
    7c88:	30 e0       	ldi	r19, 0x00	; 0
    7c8a:	b3 01       	movw	r22, r6
    7c8c:	a2 01       	movw	r20, r4
    7c8e:	81 e0       	ldi	r24, 0x01	; 1
    7c90:	90 e0       	ldi	r25, 0x00	; 0
    7c92:	03 df       	rcall	.-506    	; 0x7a9a <find_dst>
    7c94:	60 93 0a 1a 	sts	0x1A0A, r22	; 0x801a0a <dst+0x4>
    7c98:	70 93 0b 1a 	sts	0x1A0B, r23	; 0x801a0b <dst+0x5>
    7c9c:	80 93 0c 1a 	sts	0x1A0C, r24	; 0x801a0c <dst+0x6>
    7ca0:	90 93 0d 1a 	sts	0x1A0D, r25	; 0x801a0d <dst+0x7>
    7ca4:	2c 96       	adiw	r28, 0x0c	; 12
    7ca6:	0f b6       	in	r0, 0x3f	; 63
    7ca8:	f8 94       	cli
    7caa:	de bf       	out	0x3e, r29	; 62
    7cac:	0f be       	out	0x3f, r0	; 63
    7cae:	cd bf       	out	0x3d, r28	; 61
    7cb0:	df 91       	pop	r29
    7cb2:	cf 91       	pop	r28
    7cb4:	1f 91       	pop	r17
    7cb6:	0f 91       	pop	r16
    7cb8:	ff 90       	pop	r15
    7cba:	ef 90       	pop	r14
    7cbc:	df 90       	pop	r13
    7cbe:	cf 90       	pop	r12
    7cc0:	bf 90       	pop	r11
    7cc2:	af 90       	pop	r10
    7cc4:	7f 90       	pop	r7
    7cc6:	6f 90       	pop	r6
    7cc8:	5f 90       	pop	r5
    7cca:	4f 90       	pop	r4
    7ccc:	08 95       	ret

00007cce <asctime_r>:
    7cce:	a5 e1       	ldi	r26, 0x15	; 21
    7cd0:	b0 e0       	ldi	r27, 0x00	; 0
    7cd2:	ed e6       	ldi	r30, 0x6D	; 109
    7cd4:	fe e3       	ldi	r31, 0x3E	; 62
    7cd6:	0c 94 27 e5 	jmp	0x1ca4e	; 0x1ca4e <__prologue_saves__+0x1c>
    7cda:	ec 01       	movw	r28, r24
    7cdc:	8b 01       	movw	r16, r22
    7cde:	60 e0       	ldi	r22, 0x00	; 0
    7ce0:	70 e0       	ldi	r23, 0x00	; 0
    7ce2:	d1 db       	rcall	.-2142   	; 0x7486 <normalize>
    7ce4:	80 e2       	ldi	r24, 0x20	; 32
    7ce6:	f8 01       	movw	r30, r16
    7ce8:	11 92       	st	Z+, r1
    7cea:	8a 95       	dec	r24
    7cec:	e9 f7       	brne	.-6      	; 0x7ce8 <asctime_r+0x1a>
    7cee:	8a 85       	ldd	r24, Y+10	; 0x0a
    7cf0:	9b 85       	ldd	r25, Y+11	; 0x0b
    7cf2:	84 59       	subi	r24, 0x94	; 148
    7cf4:	98 4f       	sbci	r25, 0xF8	; 248
    7cf6:	ed b7       	in	r30, 0x3d	; 61
    7cf8:	fe b7       	in	r31, 0x3e	; 62
    7cfa:	95 8b       	std	Z+21, r25	; 0x15
    7cfc:	84 8b       	std	Z+20, r24	; 0x14
    7cfe:	88 81       	ld	r24, Y
    7d00:	99 81       	ldd	r25, Y+1	; 0x01
    7d02:	93 8b       	std	Z+19, r25	; 0x13
    7d04:	82 8b       	std	Z+18, r24	; 0x12
    7d06:	8a 81       	ldd	r24, Y+2	; 0x02
    7d08:	9b 81       	ldd	r25, Y+3	; 0x03
    7d0a:	91 8b       	std	Z+17, r25	; 0x11
    7d0c:	80 8b       	std	Z+16, r24	; 0x10
    7d0e:	8c 81       	ldd	r24, Y+4	; 0x04
    7d10:	9d 81       	ldd	r25, Y+5	; 0x05
    7d12:	97 87       	std	Z+15, r25	; 0x0f
    7d14:	86 87       	std	Z+14, r24	; 0x0e
    7d16:	8e 81       	ldd	r24, Y+6	; 0x06
    7d18:	9f 81       	ldd	r25, Y+7	; 0x07
    7d1a:	95 87       	std	Z+13, r25	; 0x0d
    7d1c:	84 87       	std	Z+12, r24	; 0x0c
    7d1e:	e8 85       	ldd	r30, Y+8	; 0x08
    7d20:	f9 85       	ldd	r31, Y+9	; 0x09
    7d22:	ee 0f       	add	r30, r30
    7d24:	ff 1f       	adc	r31, r31
    7d26:	e8 5e       	subi	r30, 0xE8	; 232
    7d28:	fe 4f       	sbci	r31, 0xFE	; 254
    7d2a:	80 81       	ld	r24, Z
    7d2c:	91 81       	ldd	r25, Z+1	; 0x01
    7d2e:	ed b7       	in	r30, 0x3d	; 61
    7d30:	fe b7       	in	r31, 0x3e	; 62
    7d32:	93 87       	std	Z+11, r25	; 0x0b
    7d34:	82 87       	std	Z+10, r24	; 0x0a
    7d36:	ec 85       	ldd	r30, Y+12	; 0x0c
    7d38:	fd 85       	ldd	r31, Y+13	; 0x0d
    7d3a:	ee 0f       	add	r30, r30
    7d3c:	ff 1f       	adc	r31, r31
    7d3e:	ee 5c       	subi	r30, 0xCE	; 206
    7d40:	fe 4f       	sbci	r31, 0xFE	; 254
    7d42:	80 81       	ld	r24, Z
    7d44:	91 81       	ldd	r25, Z+1	; 0x01
    7d46:	ed b7       	in	r30, 0x3d	; 61
    7d48:	fe b7       	in	r31, 0x3e	; 62
    7d4a:	91 87       	std	Z+9, r25	; 0x09
    7d4c:	80 87       	std	Z+8, r24	; 0x08
    7d4e:	83 e1       	ldi	r24, 0x13	; 19
    7d50:	97 e0       	ldi	r25, 0x07	; 7
    7d52:	a0 e0       	ldi	r26, 0x00	; 0
    7d54:	85 83       	std	Z+5, r24	; 0x05
    7d56:	96 83       	std	Z+6, r25	; 0x06
    7d58:	a7 83       	std	Z+7, r26	; 0x07
    7d5a:	80 e2       	ldi	r24, 0x20	; 32
    7d5c:	90 e0       	ldi	r25, 0x00	; 0
    7d5e:	94 83       	std	Z+4, r25	; 0x04
    7d60:	83 83       	std	Z+3, r24	; 0x03
    7d62:	12 83       	std	Z+2, r17	; 0x02
    7d64:	01 83       	std	Z+1, r16	; 0x01
    7d66:	0e 94 c5 47 	call	0x8f8a	; 0x8f8a <snprintf_P>
    7d6a:	c8 01       	movw	r24, r16
    7d6c:	cd b7       	in	r28, 0x3d	; 61
    7d6e:	de b7       	in	r29, 0x3e	; 62
    7d70:	65 96       	adiw	r28, 0x15	; 21
    7d72:	e4 e0       	ldi	r30, 0x04	; 4
    7d74:	0c 94 43 e5 	jmp	0x1ca86	; 0x1ca86 <__epilogue_restores__+0x1c>

00007d78 <asctime>:
    7d78:	6c e9       	ldi	r22, 0x9C	; 156
    7d7a:	77 e1       	ldi	r23, 0x17	; 23
    7d7c:	a8 cf       	rjmp	.-176    	; 0x7cce <asctime_r>
    7d7e:	08 95       	ret

00007d80 <ctime_gm>:
    7d80:	a6 e1       	ldi	r26, 0x16	; 22
    7d82:	b0 e0       	ldi	r27, 0x00	; 0
    7d84:	e6 ec       	ldi	r30, 0xC6	; 198
    7d86:	fe e3       	ldi	r31, 0x3E	; 62
    7d88:	0c 94 29 e5 	jmp	0x1ca52	; 0x1ca52 <__prologue_saves__+0x20>
    7d8c:	be 01       	movw	r22, r28
    7d8e:	6f 5f       	subi	r22, 0xFF	; 255
    7d90:	7f 4f       	sbci	r23, 0xFF	; 255
    7d92:	6d da       	rcall	.-2854   	; 0x726e <gmtime_r>
    7d94:	6c e7       	ldi	r22, 0x7C	; 124
    7d96:	77 e1       	ldi	r23, 0x17	; 23
    7d98:	9a df       	rcall	.-204    	; 0x7cce <asctime_r>
    7d9a:	66 96       	adiw	r28, 0x16	; 22
    7d9c:	e2 e0       	ldi	r30, 0x02	; 2
    7d9e:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__epilogue_restores__+0x20>

00007da2 <initialize_clock>:
/// @param[in] minwest: your time zone as minute west
///@return  void
///@see: clock_settime()
MEMSPACE
void initialize_clock(int minwest)
{
    7da2:	a5 e2       	ldi	r26, 0x25	; 37
    7da4:	b0 e0       	ldi	r27, 0x00	; 0
    7da6:	e7 ed       	ldi	r30, 0xD7	; 215
    7da8:	fe e3       	ldi	r31, 0x3E	; 62
    7daa:	0c 94 23 e5 	jmp	0x1ca46	; 0x1ca46 <__prologue_saves__+0x14>
    7dae:	8c 01       	movw	r16, r24
    tm_t tc;
    ts_t ts;
    tz_t tz;

#ifdef RTC_SUPPORT
    if(!rtc_init(0,0L))
    7db0:	40 e0       	ldi	r20, 0x00	; 0
    7db2:	50 e0       	ldi	r21, 0x00	; 0
    7db4:	ba 01       	movw	r22, r20
    7db6:	80 e0       	ldi	r24, 0x00	; 0
    7db8:	90 e0       	ldi	r25, 0x00	; 0
    7dba:	0e 94 83 30 	call	0x6106	; 0x6106 <rtc_init>
    7dbe:	81 11       	cpse	r24, r1
    7dc0:	27 c0       	rjmp	.+78     	; 0x7e10 <initialize_clock+0x6e>
    {
        printf("rtc uninitilized\n");
    7dc2:	82 e7       	ldi	r24, 0x72	; 114
    7dc4:	96 e0       	ldi	r25, 0x06	; 6
    7dc6:	a0 e0       	ldi	r26, 0x00	; 0
    7dc8:	ed b7       	in	r30, 0x3d	; 61
    7dca:	fe b7       	in	r31, 0x3e	; 62
    7dcc:	81 83       	std	Z+1, r24	; 0x01
    7dce:	92 83       	std	Z+2, r25	; 0x02
    7dd0:	a3 83       	std	Z+3, r26	; 0x03
    7dd2:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
        printf("attempting rtc init\n");
    7dd6:	8d e5       	ldi	r24, 0x5D	; 93
    7dd8:	96 e0       	ldi	r25, 0x06	; 6
    7dda:	a0 e0       	ldi	r26, 0x00	; 0
    7ddc:	ed b7       	in	r30, 0x3d	; 61
    7dde:	fe b7       	in	r31, 0x3e	; 62
    7de0:	81 83       	std	Z+1, r24	; 0x01
    7de2:	92 83       	std	Z+2, r25	; 0x02
    7de4:	a3 83       	std	Z+3, r26	; 0x03
    7de6:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
        if( !rtc_init(1, (time_t) 0) )
    7dea:	40 e0       	ldi	r20, 0x00	; 0
    7dec:	50 e0       	ldi	r21, 0x00	; 0
    7dee:	ba 01       	movw	r22, r20
    7df0:	81 e0       	ldi	r24, 0x01	; 1
    7df2:	90 e0       	ldi	r25, 0x00	; 0
    7df4:	0e 94 83 30 	call	0x6106	; 0x6106 <rtc_init>
    7df8:	81 11       	cpse	r24, r1
    7dfa:	0a c0       	rjmp	.+20     	; 0x7e10 <initialize_clock+0x6e>
        {
            printf("rtc force init failed\n");
    7dfc:	86 e4       	ldi	r24, 0x46	; 70
    7dfe:	96 e0       	ldi	r25, 0x06	; 6
    7e00:	a0 e0       	ldi	r26, 0x00	; 0
    7e02:	ed b7       	in	r30, 0x3d	; 61
    7e04:	fe b7       	in	r31, 0x3e	; 62
    7e06:	81 83       	std	Z+1, r24	; 0x01
    7e08:	92 83       	std	Z+2, r25	; 0x02
    7e0a:	a3 83       	std	Z+3, r26	; 0x03
    7e0c:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
        }
    }

    if(rtc_read(&tc))
    7e10:	ce 01       	movw	r24, r28
    7e12:	04 96       	adiw	r24, 0x04	; 4
    7e14:	0e 94 cf 30 	call	0x619e	; 0x619e <rtc_read>
    7e18:	88 23       	and	r24, r24
    7e1a:	51 f0       	breq	.+20     	; 0x7e30 <initialize_clock+0x8e>
    {
        seconds = timegm(&tc);
    7e1c:	ce 01       	movw	r24, r28
    7e1e:	04 96       	adiw	r24, 0x04	; 4
    7e20:	fa dc       	rcall	.-1548   	; 0x7816 <timegm>
    7e22:	6b 01       	movw	r12, r22
    7e24:	7c 01       	movw	r14, r24
    }
#else
    printf("NO RTC\n");
    seconds = 0;
#endif  // RTC_SUPPORT
    if(!seconds)
    7e26:	67 2b       	or	r22, r23
    7e28:	68 2b       	or	r22, r24
    7e2a:	69 2b       	or	r22, r25
    7e2c:	c1 f4       	brne	.+48     	; 0x7e5e <initialize_clock+0xbc>
    7e2e:	0a c0       	rjmp	.+20     	; 0x7e44 <initialize_clock+0xa2>
        seconds = timegm(&tc);
    }
    else
    {
        seconds = 0;
        printf("rtc read errorafter init\n");
    7e30:	8c e2       	ldi	r24, 0x2C	; 44
    7e32:	96 e0       	ldi	r25, 0x06	; 6
    7e34:	a0 e0       	ldi	r26, 0x00	; 0
    7e36:	ed b7       	in	r30, 0x3d	; 61
    7e38:	fe b7       	in	r31, 0x3e	; 62
    7e3a:	81 83       	std	Z+1, r24	; 0x01
    7e3c:	92 83       	std	Z+2, r25	; 0x02
    7e3e:	a3 83       	std	Z+3, r26	; 0x03
    7e40:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
#else
    printf("NO RTC\n");
    seconds = 0;
#endif  // RTC_SUPPORT
    if(!seconds)
        printf("use setdate command to change time\n");
    7e44:	88 e0       	ldi	r24, 0x08	; 8
    7e46:	96 e0       	ldi	r25, 0x06	; 6
    7e48:	a0 e0       	ldi	r26, 0x00	; 0
    7e4a:	ed b7       	in	r30, 0x3d	; 61
    7e4c:	fe b7       	in	r31, 0x3e	; 62
    7e4e:	81 83       	std	Z+1, r24	; 0x01
    7e50:	92 83       	std	Z+2, r25	; 0x02
    7e52:	a3 83       	std	Z+3, r26	; 0x03
    7e54:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    7e58:	c1 2c       	mov	r12, r1
    7e5a:	d1 2c       	mov	r13, r1
    7e5c:	76 01       	movw	r14, r12
    tz.tz_minuteswest = minwest;
    7e5e:	1b a3       	std	Y+35, r17	; 0x23
    7e60:	0a a3       	std	Y+34, r16	; 0x22
    tz.tz_dsttime = 0;
    7e62:	1d a2       	std	Y+37, r1	; 0x25
    7e64:	1c a2       	std	Y+36, r1	; 0x24
    settimezone( &tz );
    7e66:	ce 01       	movw	r24, r28
    7e68:	82 96       	adiw	r24, 0x22	; 34
    7e6a:	30 da       	rcall	.-2976   	; 0x72cc <settimezone>

    ts.tv_sec = seconds;
    7e6c:	ca 8e       	std	Y+26, r12	; 0x1a
    7e6e:	db 8e       	std	Y+27, r13	; 0x1b
    7e70:	ec 8e       	std	Y+28, r14	; 0x1c
    7e72:	fd 8e       	std	Y+29, r15	; 0x1d
    ts.tv_nsec = 0L;
    7e74:	1e 8e       	std	Y+30, r1	; 0x1e
    7e76:	1f 8e       	std	Y+31, r1	; 0x1f
    7e78:	18 a2       	std	Y+32, r1	; 0x20
    7e7a:	19 a2       	std	Y+33, r1	; 0x21
    clock_settime(0, (ts_t *) &ts);
    7e7c:	be 01       	movw	r22, r28
    7e7e:	66 5e       	subi	r22, 0xE6	; 230
    7e80:	7f 4f       	sbci	r23, 0xFF	; 255
    7e82:	80 e0       	ldi	r24, 0x00	; 0
    7e84:	90 e0       	ldi	r25, 0x00	; 0
    7e86:	c7 d8       	rcall	.-3698   	; 0x7016 <clock_settime>
}
    7e88:	a5 96       	adiw	r28, 0x25	; 37
    7e8a:	e8 e0       	ldi	r30, 0x08	; 8
    7e8c:	0c 94 3f e5 	jmp	0x1ca7e	; 0x1ca7e <__epilogue_restores__+0x14>

00007e90 <display_clock>:
/// @see: rtc_read
/// @see: timegm()
/// @see: ascitime()
MEMSPACE
void display_clock()
{
    7e90:	a9 e2       	ldi	r26, 0x29	; 41
    7e92:	b0 e0       	ldi	r27, 0x00	; 0
    7e94:	ee e4       	ldi	r30, 0x4E	; 78
    7e96:	ff e3       	ldi	r31, 0x3F	; 63
    7e98:	0c 94 29 e5 	jmp	0x1ca52	; 0x1ca52 <__prologue_saves__+0x20>
    time_t seconds;
    tm_t tc;
    ts_t ts;

#ifdef RTC_SUPPORT
    if(rtc_read(&tc))
    7e9c:	ce 01       	movw	r24, r28
    7e9e:	08 96       	adiw	r24, 0x08	; 8
    7ea0:	0e 94 cf 30 	call	0x619e	; 0x619e <rtc_read>
    7ea4:	88 23       	and	r24, r24
    7ea6:	29 f1       	breq	.+74     	; 0x7ef2 <display_clock+0x62>
    {
        seconds = timegm(&tc);
    7ea8:	ce 01       	movw	r24, r28
    7eaa:	08 96       	adiw	r24, 0x08	; 8
    7eac:	b4 dc       	rcall	.-1688   	; 0x7816 <timegm>
    7eae:	6e a3       	std	Y+38, r22	; 0x26
    7eb0:	7f a3       	std	Y+39, r23	; 0x27
    7eb2:	88 a7       	std	Y+40, r24	; 0x28
    7eb4:	99 a7       	std	Y+41, r25	; 0x29
        printf("rtc seconds: %lu\n",seconds);
    7eb6:	ed b7       	in	r30, 0x3d	; 61
    7eb8:	fe b7       	in	r31, 0x3e	; 62
    7eba:	64 83       	std	Z+4, r22	; 0x04
    7ebc:	75 83       	std	Z+5, r23	; 0x05
    7ebe:	86 83       	std	Z+6, r24	; 0x06
    7ec0:	97 83       	std	Z+7, r25	; 0x07
    7ec2:	86 ef       	ldi	r24, 0xF6	; 246
    7ec4:	95 e0       	ldi	r25, 0x05	; 5
    7ec6:	a0 e0       	ldi	r26, 0x00	; 0
    7ec8:	81 83       	std	Z+1, r24	; 0x01
    7eca:	92 83       	std	Z+2, r25	; 0x02
    7ecc:	a3 83       	std	Z+3, r26	; 0x03
    7ece:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
        printf("rtc time:    %s\n",asctime(&tc));
    7ed2:	ce 01       	movw	r24, r28
    7ed4:	08 96       	adiw	r24, 0x08	; 8
    7ed6:	50 df       	rcall	.-352    	; 0x7d78 <asctime>
    7ed8:	ed b7       	in	r30, 0x3d	; 61
    7eda:	fe b7       	in	r31, 0x3e	; 62
    7edc:	95 83       	std	Z+5, r25	; 0x05
    7ede:	84 83       	std	Z+4, r24	; 0x04
    7ee0:	85 ee       	ldi	r24, 0xE5	; 229
    7ee2:	95 e0       	ldi	r25, 0x05	; 5
    7ee4:	a0 e0       	ldi	r26, 0x00	; 0
    7ee6:	81 83       	std	Z+1, r24	; 0x01
    7ee8:	92 83       	std	Z+2, r25	; 0x02
    7eea:	a3 83       	std	Z+3, r26	; 0x03
    7eec:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    7ef0:	0a c0       	rjmp	.+20     	; 0x7f06 <display_clock+0x76>
            (int) tc.tm_wday);
#endif
    }
    else
    {
        printf("RTC read failed\n");
    7ef2:	84 ed       	ldi	r24, 0xD4	; 212
    7ef4:	95 e0       	ldi	r25, 0x05	; 5
    7ef6:	a0 e0       	ldi	r26, 0x00	; 0
    7ef8:	ed b7       	in	r30, 0x3d	; 61
    7efa:	fe b7       	in	r31, 0x3e	; 62
    7efc:	81 83       	std	Z+1, r24	; 0x01
    7efe:	92 83       	std	Z+2, r25	; 0x02
    7f00:	a3 83       	std	Z+3, r26	; 0x03
    7f02:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    }
#endif  // RTC_SUPPORT

    clock_gettime(0, (ts_t *) &ts);
    7f06:	be 01       	movw	r22, r28
    7f08:	62 5e       	subi	r22, 0xE2	; 226
    7f0a:	7f 4f       	sbci	r23, 0xFF	; 255
    7f0c:	80 e0       	ldi	r24, 0x00	; 0
    7f0e:	90 e0       	ldi	r25, 0x00	; 0
    7f10:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <clock_gettime>
    seconds = ts.tv_sec;
    7f14:	8e 8d       	ldd	r24, Y+30	; 0x1e
    7f16:	9f 8d       	ldd	r25, Y+31	; 0x1f
    7f18:	a8 a1       	ldd	r26, Y+32	; 0x20
    7f1a:	b9 a1       	ldd	r27, Y+33	; 0x21
    7f1c:	8e a3       	std	Y+38, r24	; 0x26
    7f1e:	9f a3       	std	Y+39, r25	; 0x27
    7f20:	a8 a7       	std	Y+40, r26	; 0x28
    7f22:	b9 a7       	std	Y+41, r27	; 0x29
    printf("clk seconds: %lu\n",seconds);
    7f24:	ed b7       	in	r30, 0x3d	; 61
    7f26:	fe b7       	in	r31, 0x3e	; 62
    7f28:	84 83       	std	Z+4, r24	; 0x04
    7f2a:	95 83       	std	Z+5, r25	; 0x05
    7f2c:	a6 83       	std	Z+6, r26	; 0x06
    7f2e:	b7 83       	std	Z+7, r27	; 0x07
    7f30:	82 ec       	ldi	r24, 0xC2	; 194
    7f32:	95 e0       	ldi	r25, 0x05	; 5
    7f34:	a0 e0       	ldi	r26, 0x00	; 0
    7f36:	81 83       	std	Z+1, r24	; 0x01
    7f38:	92 83       	std	Z+2, r25	; 0x02
    7f3a:	a3 83       	std	Z+3, r26	; 0x03
    7f3c:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    printf("clk time:    %s\n", asctime(gmtime(&seconds)));
    7f40:	ce 01       	movw	r24, r28
    7f42:	86 96       	adiw	r24, 0x26	; 38
    7f44:	a9 d9       	rcall	.-3246   	; 0x7298 <gmtime>
    7f46:	18 df       	rcall	.-464    	; 0x7d78 <asctime>
    7f48:	ed b7       	in	r30, 0x3d	; 61
    7f4a:	fe b7       	in	r31, 0x3e	; 62
    7f4c:	95 83       	std	Z+5, r25	; 0x05
    7f4e:	84 83       	std	Z+4, r24	; 0x04
    7f50:	81 eb       	ldi	r24, 0xB1	; 177
    7f52:	95 e0       	ldi	r25, 0x05	; 5
    7f54:	a0 e0       	ldi	r26, 0x00	; 0
    7f56:	81 83       	std	Z+1, r24	; 0x01
    7f58:	92 83       	std	Z+2, r25	; 0x02
    7f5a:	a3 83       	std	Z+3, r26	; 0x03
    7f5c:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
}
    7f60:	a9 96       	adiw	r28, 0x29	; 41
    7f62:	e2 e0       	ldi	r30, 0x02	; 2
    7f64:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__epilogue_restores__+0x20>

00007f68 <_putc_buffer_fn>:
    va_start(va, format);
    _printf_fn(&fn, format, va);
    va_end(va);

    return ((int)fn.sent);
}
    7f68:	fc 01       	movw	r30, r24
    7f6a:	84 81       	ldd	r24, Z+4	; 0x04
    7f6c:	95 81       	ldd	r25, Z+5	; 0x05
    7f6e:	00 97       	sbiw	r24, 0x00	; 0
    7f70:	79 f0       	breq	.+30     	; 0x7f90 <_putc_buffer_fn+0x28>
    7f72:	66 23       	and	r22, r22
    7f74:	69 f0       	breq	.+26     	; 0x7f90 <_putc_buffer_fn+0x28>
    7f76:	01 97       	sbiw	r24, 0x01	; 1
    7f78:	95 83       	std	Z+5, r25	; 0x05
    7f7a:	84 83       	std	Z+4, r24	; 0x04
    7f7c:	86 81       	ldd	r24, Z+6	; 0x06
    7f7e:	97 81       	ldd	r25, Z+7	; 0x07
    7f80:	01 96       	adiw	r24, 0x01	; 1
    7f82:	97 83       	std	Z+7, r25	; 0x07
    7f84:	86 83       	std	Z+6, r24	; 0x06
    7f86:	a2 81       	ldd	r26, Z+2	; 0x02
    7f88:	b3 81       	ldd	r27, Z+3	; 0x03
    7f8a:	6d 93       	st	X+, r22
    7f8c:	b3 83       	std	Z+3, r27	; 0x03
    7f8e:	a2 83       	std	Z+2, r26	; 0x02
    7f90:	02 80       	ldd	r0, Z+2	; 0x02
    7f92:	f3 81       	ldd	r31, Z+3	; 0x03
    7f94:	e0 2d       	mov	r30, r0
    7f96:	10 82       	st	Z, r1
    7f98:	08 95       	ret

00007f9a <_putc_fn>:
    7f9a:	fc 01       	movw	r30, r24
    7f9c:	26 81       	ldd	r18, Z+6	; 0x06
    7f9e:	37 81       	ldd	r19, Z+7	; 0x07
    7fa0:	2f 5f       	subi	r18, 0xFF	; 255
    7fa2:	3f 4f       	sbci	r19, 0xFF	; 255
    7fa4:	37 83       	std	Z+7, r19	; 0x07
    7fa6:	26 83       	std	Z+6, r18	; 0x06
    7fa8:	86 2f       	mov	r24, r22
    7faa:	90 e0       	ldi	r25, 0x00	; 0
    7fac:	0c 94 d6 77 	jmp	0xefac	; 0xefac <putchar>
    7fb0:	08 95       	ret

00007fb2 <bin2num>:
    7fb2:	a0 e0       	ldi	r26, 0x00	; 0
    7fb4:	b0 e0       	ldi	r27, 0x00	; 0
    7fb6:	ef ed       	ldi	r30, 0xDF	; 223
    7fb8:	ff e3       	ldi	r31, 0x3F	; 63
    7fba:	0c 94 20 e5 	jmp	0x1ca40	; 0x1ca40 <__prologue_saves__+0xe>
    7fbe:	ea 01       	movw	r28, r20
    7fc0:	53 e0       	ldi	r21, 0x03	; 3
    7fc2:	ee 0c       	add	r14, r14
    7fc4:	ff 1c       	adc	r15, r15
    7fc6:	5a 95       	dec	r21
    7fc8:	e1 f7       	brne	.-8      	; 0x7fc2 <bin2num+0x10>
    7fca:	fc 01       	movw	r30, r24
    7fcc:	af 01       	movw	r20, r30
    7fce:	48 1b       	sub	r20, r24
    7fd0:	59 0b       	sbc	r21, r25
    7fd2:	c4 17       	cp	r28, r20
    7fd4:	d5 07       	cpc	r29, r21
    7fd6:	14 f0       	brlt	.+4      	; 0x7fdc <bin2num+0x2a>
    7fd8:	11 92       	st	Z+, r1
    7fda:	f8 cf       	rjmp	.-16     	; 0x7fcc <bin2num+0x1a>
    7fdc:	41 e0       	ldi	r20, 0x01	; 1
    7fde:	e4 1a       	sub	r14, r20
    7fe0:	f1 08       	sbc	r15, r1
    7fe2:	5b 01       	movw	r10, r22
    7fe4:	42 e0       	ldi	r20, 0x02	; 2
    7fe6:	a4 1a       	sub	r10, r20
    7fe8:	b1 08       	sbc	r11, r1
    7fea:	f7 fc       	sbrc	r15, 7
    7fec:	3b c0       	rjmp	.+118    	; 0x8064 <bin2num+0xb2>
    7fee:	f7 01       	movw	r30, r14
    7ff0:	43 e0       	ldi	r20, 0x03	; 3
    7ff2:	f5 95       	asr	r31
    7ff4:	e7 95       	ror	r30
    7ff6:	4a 95       	dec	r20
    7ff8:	e1 f7       	brne	.-8      	; 0x7ff2 <bin2num+0x40>
    7ffa:	e0 0f       	add	r30, r16
    7ffc:	f1 1f       	adc	r31, r17
    7ffe:	40 81       	ld	r20, Z
    8000:	50 e0       	ldi	r21, 0x00	; 0
    8002:	f7 01       	movw	r30, r14
    8004:	e7 70       	andi	r30, 0x07	; 7
    8006:	ff 27       	eor	r31, r31
    8008:	02 c0       	rjmp	.+4      	; 0x800e <bin2num+0x5c>
    800a:	55 95       	asr	r21
    800c:	47 95       	ror	r20
    800e:	ea 95       	dec	r30
    8010:	e2 f7       	brpl	.-8      	; 0x800a <bin2num+0x58>
    8012:	41 70       	andi	r20, 0x01	; 1
    8014:	55 27       	eor	r21, r21
    8016:	dc 01       	movw	r26, r24
    8018:	e0 e0       	ldi	r30, 0x00	; 0
    801a:	f0 e0       	ldi	r31, 0x00	; 0
    801c:	ec 17       	cp	r30, r28
    801e:	fd 07       	cpc	r31, r29
    8020:	ec f4       	brge	.+58     	; 0x805c <bin2num+0xaa>
    8022:	ea 15       	cp	r30, r10
    8024:	fb 05       	cpc	r31, r11
    8026:	4c f0       	brlt	.+18     	; 0x803a <bin2num+0x88>
    8028:	dc 01       	movw	r26, r24
    802a:	ae 0f       	add	r26, r30
    802c:	bf 1f       	adc	r27, r31
    802e:	1c 92       	st	X, r1
    8030:	41 e0       	ldi	r20, 0x01	; 1
    8032:	e4 1a       	sub	r14, r20
    8034:	f1 08       	sbc	r15, r1
    8036:	ef 01       	movw	r28, r30
    8038:	d8 cf       	rjmp	.-80     	; 0x7fea <bin2num+0x38>
    803a:	9c 90       	ld	r9, X
    803c:	99 0c       	add	r9, r9
    803e:	94 2a       	or	r9, r20
    8040:	49 2d       	mov	r20, r9
    8042:	50 e0       	ldi	r21, 0x00	; 0
    8044:	42 17       	cp	r20, r18
    8046:	53 07       	cpc	r21, r19
    8048:	24 f0       	brlt	.+8      	; 0x8052 <bin2num+0xa0>
    804a:	92 1a       	sub	r9, r18
    804c:	41 e0       	ldi	r20, 0x01	; 1
    804e:	50 e0       	ldi	r21, 0x00	; 0
    8050:	02 c0       	rjmp	.+4      	; 0x8056 <bin2num+0xa4>
    8052:	40 e0       	ldi	r20, 0x00	; 0
    8054:	50 e0       	ldi	r21, 0x00	; 0
    8056:	9d 92       	st	X+, r9
    8058:	31 96       	adiw	r30, 0x01	; 1
    805a:	e0 cf       	rjmp	.-64     	; 0x801c <bin2num+0x6a>
    805c:	41 15       	cp	r20, r1
    805e:	51 05       	cpc	r21, r1
    8060:	01 f7       	brne	.-64     	; 0x8022 <bin2num+0x70>
    8062:	e2 cf       	rjmp	.-60     	; 0x8028 <bin2num+0x76>
    8064:	fc 01       	movw	r30, r24
    8066:	9f 01       	movw	r18, r30
    8068:	28 1b       	sub	r18, r24
    806a:	39 0b       	sbc	r19, r25
    806c:	2c 17       	cp	r18, r28
    806e:	3d 07       	cpc	r19, r29
    8070:	4c f4       	brge	.+18     	; 0x8084 <bin2num+0xd2>
    8072:	20 81       	ld	r18, Z
    8074:	2a 30       	cpi	r18, 0x0A	; 10
    8076:	10 f4       	brcc	.+4      	; 0x807c <bin2num+0xca>
    8078:	20 5d       	subi	r18, 0xD0	; 208
    807a:	01 c0       	rjmp	.+2      	; 0x807e <bin2num+0xcc>
    807c:	29 5a       	subi	r18, 0xA9	; 169
    807e:	20 83       	st	Z, r18
    8080:	31 96       	adiw	r30, 0x01	; 1
    8082:	f1 cf       	rjmp	.-30     	; 0x8066 <bin2num+0xb4>
    8084:	9e 01       	movw	r18, r28
    8086:	d7 ff       	sbrs	r29, 7
    8088:	02 c0       	rjmp	.+4      	; 0x808e <bin2num+0xdc>
    808a:	20 e0       	ldi	r18, 0x00	; 0
    808c:	30 e0       	ldi	r19, 0x00	; 0
    808e:	c1 14       	cp	r12, r1
    8090:	d1 04       	cpc	r13, r1
    8092:	61 f0       	breq	.+24     	; 0x80ac <bin2num+0xfa>
    8094:	61 50       	subi	r22, 0x01	; 1
    8096:	71 09       	sbc	r23, r1
    8098:	26 17       	cp	r18, r22
    809a:	37 07       	cpc	r19, r23
    809c:	3c f4       	brge	.+14     	; 0x80ac <bin2num+0xfa>
    809e:	fc 01       	movw	r30, r24
    80a0:	e2 0f       	add	r30, r18
    80a2:	f3 1f       	adc	r31, r19
    80a4:	c0 82       	st	Z, r12
    80a6:	21 96       	adiw	r28, 0x01	; 1
    80a8:	2f 5f       	subi	r18, 0xFF	; 255
    80aa:	3f 4f       	sbci	r19, 0xFF	; 255
    80ac:	fc 01       	movw	r30, r24
    80ae:	e2 0f       	add	r30, r18
    80b0:	f3 1f       	adc	r31, r19
    80b2:	10 82       	st	Z, r1
    80b4:	0e 94 19 33 	call	0x6632	; 0x6632 <reverse>
    80b8:	ce 01       	movw	r24, r28
    80ba:	cd b7       	in	r28, 0x3d	; 61
    80bc:	de b7       	in	r29, 0x3e	; 62
    80be:	eb e0       	ldi	r30, 0x0B	; 11
    80c0:	0c 94 3c e5 	jmp	0x1ca78	; 0x1ca78 <__epilogue_restores__+0xe>

000080c4 <pch_init>:
    80c4:	e2 e1       	ldi	r30, 0x12	; 18
    80c6:	fa e1       	ldi	r31, 0x1A	; 26
    80c8:	91 83       	std	Z+1, r25	; 0x01
    80ca:	80 83       	st	Z, r24
    80cc:	13 82       	std	Z+3, r1	; 0x03
    80ce:	12 82       	std	Z+2, r1	; 0x02
    80d0:	61 50       	subi	r22, 0x01	; 1
    80d2:	71 09       	sbc	r23, r1
    80d4:	75 83       	std	Z+5, r23	; 0x05
    80d6:	64 83       	std	Z+4, r22	; 0x04
    80d8:	fc 01       	movw	r30, r24
    80da:	10 82       	st	Z, r1
    80dc:	08 95       	ret

000080de <pch>:
    80de:	20 91 14 1a 	lds	r18, 0x1A14	; 0x801a14 <_pch+0x2>
    80e2:	30 91 15 1a 	lds	r19, 0x1A15	; 0x801a15 <_pch+0x3>
    80e6:	60 91 16 1a 	lds	r22, 0x1A16	; 0x801a16 <_pch+0x4>
    80ea:	70 91 17 1a 	lds	r23, 0x1A17	; 0x801a17 <_pch+0x5>
    80ee:	40 91 12 1a 	lds	r20, 0x1A12	; 0x801a12 <_pch>
    80f2:	50 91 13 1a 	lds	r21, 0x1A13	; 0x801a13 <_pch+0x1>
    80f6:	26 17       	cp	r18, r22
    80f8:	37 07       	cpc	r19, r23
    80fa:	64 f4       	brge	.+24     	; 0x8114 <pch+0x36>
    80fc:	b9 01       	movw	r22, r18
    80fe:	6f 5f       	subi	r22, 0xFF	; 255
    8100:	7f 4f       	sbci	r23, 0xFF	; 255
    8102:	70 93 15 1a 	sts	0x1A15, r23	; 0x801a15 <_pch+0x3>
    8106:	60 93 14 1a 	sts	0x1A14, r22	; 0x801a14 <_pch+0x2>
    810a:	fa 01       	movw	r30, r20
    810c:	e2 0f       	add	r30, r18
    810e:	f3 1f       	adc	r31, r19
    8110:	80 83       	st	Z, r24
    8112:	04 c0       	rjmp	.+8      	; 0x811c <pch+0x3e>
    8114:	fa 01       	movw	r30, r20
    8116:	e2 0f       	add	r30, r18
    8118:	f3 1f       	adc	r31, r19
    811a:	10 82       	st	Z, r1
    811c:	80 91 14 1a 	lds	r24, 0x1A14	; 0x801a14 <_pch+0x2>
    8120:	90 91 15 1a 	lds	r25, 0x1A15	; 0x801a15 <_pch+0x3>
    8124:	08 95       	ret

00008126 <p_ntoa>:
    8126:	af 92       	push	r10
    8128:	cf 92       	push	r12
    812a:	df 92       	push	r13
    812c:	ef 92       	push	r14
    812e:	ff 92       	push	r15
    8130:	0f 93       	push	r16
    8132:	1f 93       	push	r17
    8134:	cf 93       	push	r28
    8136:	df 93       	push	r29
    8138:	dc 01       	movw	r26, r24
    813a:	eb 01       	movw	r28, r22
    813c:	fa 01       	movw	r30, r20
    813e:	b9 01       	movw	r22, r18
    8140:	98 01       	movw	r18, r16
    8142:	a6 01       	movw	r20, r12
    8144:	9a 2d       	mov	r25, r10
    8146:	a5 fa       	bst	r10, 5
    8148:	cc 24       	eor	r12, r12
    814a:	c0 f8       	bld	r12, 0
    814c:	a6 fc       	sbrc	r10, 6
    814e:	07 c0       	rjmp	.+14     	; 0x815e <p_ntoa+0x38>
    8150:	a2 fc       	sbrc	r10, 2
    8152:	08 c0       	rjmp	.+16     	; 0x8164 <p_ntoa+0x3e>
    8154:	a4 fe       	sbrs	r10, 4
    8156:	09 c0       	rjmp	.+18     	; 0x816a <p_ntoa+0x44>
    8158:	00 e2       	ldi	r16, 0x20	; 32
    815a:	10 e0       	ldi	r17, 0x00	; 0
    815c:	08 c0       	rjmp	.+16     	; 0x816e <p_ntoa+0x48>
    815e:	0d e2       	ldi	r16, 0x2D	; 45
    8160:	10 e0       	ldi	r17, 0x00	; 0
    8162:	05 c0       	rjmp	.+10     	; 0x816e <p_ntoa+0x48>
    8164:	0b e2       	ldi	r16, 0x2B	; 43
    8166:	10 e0       	ldi	r17, 0x00	; 0
    8168:	02 c0       	rjmp	.+4      	; 0x816e <p_ntoa+0x48>
    816a:	00 e0       	ldi	r16, 0x00	; 0
    816c:	10 e0       	ldi	r17, 0x00	; 0
    816e:	95 ff       	sbrs	r25, 5
    8170:	04 c0       	rjmp	.+8      	; 0x817a <p_ntoa+0x54>
    8172:	89 2f       	mov	r24, r25
    8174:	8a 70       	andi	r24, 0x0A	; 10
    8176:	09 f0       	breq	.+2      	; 0x817a <p_ntoa+0x54>
    8178:	c1 2c       	mov	r12, r1
    817a:	c0 fa       	bst	r12, 0
    817c:	95 f9       	bld	r25, 5
    817e:	89 2f       	mov	r24, r25
    8180:	82 70       	andi	r24, 0x02	; 2
    8182:	c8 2e       	mov	r12, r24
    8184:	91 fd       	sbrc	r25, 1
    8186:	02 c0       	rjmp	.+4      	; 0x818c <p_ntoa+0x66>
    8188:	40 e0       	ldi	r20, 0x00	; 0
    818a:	50 e0       	ldi	r21, 0x00	; 0
    818c:	89 2f       	mov	r24, r25
    818e:	83 70       	andi	r24, 0x03	; 3
    8190:	11 f4       	brne	.+4      	; 0x8196 <p_ntoa+0x70>
    8192:	41 e0       	ldi	r20, 0x01	; 1
    8194:	50 e0       	ldi	r21, 0x00	; 0
    8196:	90 ff       	sbrs	r25, 0
    8198:	0c c0       	rjmp	.+24     	; 0x81b2 <p_ntoa+0x8c>
    819a:	95 fd       	sbrc	r25, 5
    819c:	05 c0       	rjmp	.+10     	; 0x81a8 <p_ntoa+0x82>
    819e:	c1 10       	cpse	r12, r1
    81a0:	08 c0       	rjmp	.+16     	; 0x81b2 <p_ntoa+0x8c>
    81a2:	41 e0       	ldi	r20, 0x01	; 1
    81a4:	50 e0       	ldi	r21, 0x00	; 0
    81a6:	05 c0       	rjmp	.+10     	; 0x81b2 <p_ntoa+0x8c>
    81a8:	94 75       	andi	r25, 0x54	; 84
    81aa:	a7 01       	movw	r20, r14
    81ac:	11 f0       	breq	.+4      	; 0x81b2 <p_ntoa+0x8c>
    81ae:	41 50       	subi	r20, 0x01	; 1
    81b0:	51 09       	sbc	r21, r1
    81b2:	68 01       	movw	r12, r16
    81b4:	7e 01       	movw	r14, r28
    81b6:	8d 01       	movw	r16, r26
    81b8:	cf 01       	movw	r24, r30
    81ba:	fb de       	rcall	.-522    	; 0x7fb2 <bin2num>
    81bc:	df 91       	pop	r29
    81be:	cf 91       	pop	r28
    81c0:	1f 91       	pop	r17
    81c2:	0f 91       	pop	r16
    81c4:	ff 90       	pop	r15
    81c6:	ef 90       	pop	r14
    81c8:	df 90       	pop	r13
    81ca:	cf 90       	pop	r12
    81cc:	af 90       	pop	r10
    81ce:	08 95       	ret

000081d0 <p_ftoa>:
    81d0:	2f 92       	push	r2
    81d2:	3f 92       	push	r3
    81d4:	4f 92       	push	r4
    81d6:	5f 92       	push	r5
    81d8:	6f 92       	push	r6
    81da:	7f 92       	push	r7
    81dc:	8f 92       	push	r8
    81de:	9f 92       	push	r9
    81e0:	af 92       	push	r10
    81e2:	bf 92       	push	r11
    81e4:	cf 92       	push	r12
    81e6:	ef 92       	push	r14
    81e8:	ff 92       	push	r15
    81ea:	0f 93       	push	r16
    81ec:	1f 93       	push	r17
    81ee:	cf 93       	push	r28
    81f0:	df 93       	push	r29
    81f2:	4b 01       	movw	r8, r22
    81f4:	5c 01       	movw	r10, r24
    81f6:	1a 01       	movw	r2, r20
    81f8:	38 01       	movw	r6, r16
    81fa:	c6 fa       	bst	r12, 6
    81fc:	cc 27       	eor	r28, r28
    81fe:	c0 f9       	bld	r28, 0
    8200:	b9 01       	movw	r22, r18
    8202:	ca 01       	movw	r24, r20
    8204:	5f df       	rcall	.-322    	; 0x80c4 <pch_init>
    8206:	20 e0       	ldi	r18, 0x00	; 0
    8208:	30 e0       	ldi	r19, 0x00	; 0
    820a:	a9 01       	movw	r20, r18
    820c:	c5 01       	movw	r24, r10
    820e:	b4 01       	movw	r22, r8
    8210:	0e 94 c8 e5 	call	0x1cb90	; 0x1cb90 <__cmpsf2>
    8214:	87 ff       	sbrs	r24, 7
    8216:	05 c0       	rjmp	.+10     	; 0x8222 <p_ftoa+0x52>
    8218:	b7 fa       	bst	r11, 7
    821a:	b0 94       	com	r11
    821c:	b7 f8       	bld	r11, 7
    821e:	b0 94       	com	r11
    8220:	c1 e0       	ldi	r28, 0x01	; 1
    8222:	c0 fb       	bst	r28, 0
    8224:	c6 f8       	bld	r12, 6
    8226:	c6 fe       	sbrs	r12, 6
    8228:	02 c0       	rjmp	.+4      	; 0x822e <p_ftoa+0x5e>
    822a:	8d e2       	ldi	r24, 0x2D	; 45
    822c:	07 c0       	rjmp	.+14     	; 0x823c <p_ftoa+0x6c>
    822e:	c2 fe       	sbrs	r12, 2
    8230:	02 c0       	rjmp	.+4      	; 0x8236 <p_ftoa+0x66>
    8232:	8b e2       	ldi	r24, 0x2B	; 43
    8234:	03 c0       	rjmp	.+6      	; 0x823c <p_ftoa+0x6c>
    8236:	c4 fe       	sbrs	r12, 4
    8238:	02 c0       	rjmp	.+4      	; 0x823e <p_ftoa+0x6e>
    823a:	80 e2       	ldi	r24, 0x20	; 32
    823c:	50 df       	rcall	.-352    	; 0x80de <pch>
    823e:	e7 01       	movw	r28, r14
    8240:	f7 fe       	sbrs	r15, 7
    8242:	02 c0       	rjmp	.+4      	; 0x8248 <p_ftoa+0x78>
    8244:	c0 e0       	ldi	r28, 0x00	; 0
    8246:	d0 e0       	ldi	r29, 0x00	; 0
    8248:	20 e0       	ldi	r18, 0x00	; 0
    824a:	30 e0       	ldi	r19, 0x00	; 0
    824c:	a9 01       	movw	r20, r18
    824e:	c5 01       	movw	r24, r10
    8250:	b4 01       	movw	r22, r8
    8252:	0e 94 c8 e5 	call	0x1cb90	; 0x1cb90 <__cmpsf2>
    8256:	88 23       	and	r24, r24
    8258:	d1 f1       	breq	.+116    	; 0x82ce <p_ftoa+0xfe>
    825a:	c1 fe       	sbrs	r12, 1
    825c:	11 c0       	rjmp	.+34     	; 0x8280 <p_ftoa+0xb0>
    825e:	8e 01       	movw	r16, r28
    8260:	60 e0       	ldi	r22, 0x00	; 0
    8262:	70 e0       	ldi	r23, 0x00	; 0
    8264:	80 e0       	ldi	r24, 0x00	; 0
    8266:	9f e3       	ldi	r25, 0x3F	; 63
    8268:	01 15       	cp	r16, r1
    826a:	11 05       	cpc	r17, r1
    826c:	69 f0       	breq	.+26     	; 0x8288 <p_ftoa+0xb8>
    826e:	20 e0       	ldi	r18, 0x00	; 0
    8270:	30 e0       	ldi	r19, 0x00	; 0
    8272:	40 e2       	ldi	r20, 0x20	; 32
    8274:	51 e4       	ldi	r21, 0x41	; 65
    8276:	0e 94 cc e5 	call	0x1cb98	; 0x1cb98 <__divsf3>
    827a:	01 50       	subi	r16, 0x01	; 1
    827c:	11 09       	sbc	r17, r1
    827e:	f4 cf       	rjmp	.-24     	; 0x8268 <p_ftoa+0x98>
    8280:	60 e0       	ldi	r22, 0x00	; 0
    8282:	70 e0       	ldi	r23, 0x00	; 0
    8284:	80 e0       	ldi	r24, 0x00	; 0
    8286:	9f e3       	ldi	r25, 0x3F	; 63
    8288:	9b 01       	movw	r18, r22
    828a:	ac 01       	movw	r20, r24
    828c:	c5 01       	movw	r24, r10
    828e:	b4 01       	movw	r22, r8
    8290:	0e 94 64 e5 	call	0x1cac8	; 0x1cac8 <__addsf3>
    8294:	4b 01       	movw	r8, r22
    8296:	5c 01       	movw	r10, r24
    8298:	ee 24       	eor	r14, r14
    829a:	e3 94       	inc	r14
    829c:	f1 2c       	mov	r15, r1
    829e:	20 e0       	ldi	r18, 0x00	; 0
    82a0:	30 e0       	ldi	r19, 0x00	; 0
    82a2:	40 e2       	ldi	r20, 0x20	; 32
    82a4:	51 e4       	ldi	r21, 0x41	; 65
    82a6:	c5 01       	movw	r24, r10
    82a8:	b4 01       	movw	r22, r8
    82aa:	0e 94 17 e7 	call	0x1ce2e	; 0x1ce2e <__gesf2>
    82ae:	87 fd       	sbrc	r24, 7
    82b0:	11 c0       	rjmp	.+34     	; 0x82d4 <p_ftoa+0x104>
    82b2:	2f ef       	ldi	r18, 0xFF	; 255
    82b4:	e2 1a       	sub	r14, r18
    82b6:	f2 0a       	sbc	r15, r18
    82b8:	20 e0       	ldi	r18, 0x00	; 0
    82ba:	30 e0       	ldi	r19, 0x00	; 0
    82bc:	40 e2       	ldi	r20, 0x20	; 32
    82be:	51 e4       	ldi	r21, 0x41	; 65
    82c0:	c5 01       	movw	r24, r10
    82c2:	b4 01       	movw	r22, r8
    82c4:	0e 94 cc e5 	call	0x1cb98	; 0x1cb98 <__divsf3>
    82c8:	4b 01       	movw	r8, r22
    82ca:	5c 01       	movw	r10, r24
    82cc:	e8 cf       	rjmp	.-48     	; 0x829e <p_ftoa+0xce>
    82ce:	ee 24       	eor	r14, r14
    82d0:	e3 94       	inc	r14
    82d2:	f1 2c       	mov	r15, r1
    82d4:	8c 2d       	mov	r24, r12
    82d6:	88 72       	andi	r24, 0x28	; 40
    82d8:	80 32       	cpi	r24, 0x20	; 32
    82da:	b9 f4       	brne	.+46     	; 0x830a <p_ftoa+0x13a>
    82dc:	83 01       	movw	r16, r6
    82de:	0e 19       	sub	r16, r14
    82e0:	1f 09       	sbc	r17, r15
    82e2:	80 91 14 1a 	lds	r24, 0x1A14	; 0x801a14 <_pch+0x2>
    82e6:	90 91 15 1a 	lds	r25, 0x1A15	; 0x801a15 <_pch+0x3>
    82ea:	08 1b       	sub	r16, r24
    82ec:	19 0b       	sbc	r17, r25
    82ee:	c1 fe       	sbrs	r12, 1
    82f0:	06 c0       	rjmp	.+12     	; 0x82fe <p_ftoa+0x12e>
    82f2:	20 97       	sbiw	r28, 0x00	; 0
    82f4:	21 f0       	breq	.+8      	; 0x82fe <p_ftoa+0x12e>
    82f6:	0c 1b       	sub	r16, r28
    82f8:	1d 0b       	sbc	r17, r29
    82fa:	01 50       	subi	r16, 0x01	; 1
    82fc:	11 09       	sbc	r17, r1
    82fe:	10 16       	cp	r1, r16
    8300:	11 06       	cpc	r1, r17
    8302:	1c f4       	brge	.+6      	; 0x830a <p_ftoa+0x13a>
    8304:	80 e3       	ldi	r24, 0x30	; 48
    8306:	eb de       	rcall	.-554    	; 0x80de <pch>
    8308:	f8 cf       	rjmp	.-16     	; 0x82fa <p_ftoa+0x12a>
    830a:	c5 01       	movw	r24, r10
    830c:	b4 01       	movw	r22, r8
    830e:	0e 94 34 e6 	call	0x1cc68	; 0x1cc68 <__fixsfsi>
    8312:	2b 01       	movw	r4, r22
    8314:	3c 01       	movw	r6, r24
    8316:	80 e3       	ldi	r24, 0x30	; 48
    8318:	84 0d       	add	r24, r4
    831a:	e1 de       	rcall	.-574    	; 0x80de <pch>
    831c:	b2 01       	movw	r22, r4
    831e:	55 0c       	add	r5, r5
    8320:	88 0b       	sbc	r24, r24
    8322:	99 0b       	sbc	r25, r25
    8324:	0e 94 67 e6 	call	0x1ccce	; 0x1ccce <__floatsisf>
    8328:	9b 01       	movw	r18, r22
    832a:	ac 01       	movw	r20, r24
    832c:	c5 01       	movw	r24, r10
    832e:	b4 01       	movw	r22, r8
    8330:	0e 94 63 e5 	call	0x1cac6	; 0x1cac6 <__subsf3>
    8334:	21 e0       	ldi	r18, 0x01	; 1
    8336:	e2 1a       	sub	r14, r18
    8338:	f1 08       	sbc	r15, r1
    833a:	20 e0       	ldi	r18, 0x00	; 0
    833c:	30 e0       	ldi	r19, 0x00	; 0
    833e:	40 e2       	ldi	r20, 0x20	; 32
    8340:	51 e4       	ldi	r21, 0x41	; 65
    8342:	0e 94 1b e7 	call	0x1ce36	; 0x1ce36 <__mulsf3>
    8346:	4b 01       	movw	r8, r22
    8348:	5c 01       	movw	r10, r24
    834a:	e1 14       	cp	r14, r1
    834c:	f1 04       	cpc	r15, r1
    834e:	e9 f6       	brne	.-70     	; 0x830a <p_ftoa+0x13a>
    8350:	c1 fc       	sbrc	r12, 1
    8352:	1c c0       	rjmp	.+56     	; 0x838c <p_ftoa+0x1bc>
    8354:	80 e0       	ldi	r24, 0x00	; 0
    8356:	c3 de       	rcall	.-634    	; 0x80de <pch>
    8358:	f1 01       	movw	r30, r2
    835a:	01 90       	ld	r0, Z+
    835c:	00 20       	and	r0, r0
    835e:	e9 f7       	brne	.-6      	; 0x835a <p_ftoa+0x18a>
    8360:	31 97       	sbiw	r30, 0x01	; 1
    8362:	cf 01       	movw	r24, r30
    8364:	82 19       	sub	r24, r2
    8366:	93 09       	sbc	r25, r3
    8368:	df 91       	pop	r29
    836a:	cf 91       	pop	r28
    836c:	1f 91       	pop	r17
    836e:	0f 91       	pop	r16
    8370:	ff 90       	pop	r15
    8372:	ef 90       	pop	r14
    8374:	cf 90       	pop	r12
    8376:	bf 90       	pop	r11
    8378:	af 90       	pop	r10
    837a:	9f 90       	pop	r9
    837c:	8f 90       	pop	r8
    837e:	7f 90       	pop	r7
    8380:	6f 90       	pop	r6
    8382:	5f 90       	pop	r5
    8384:	4f 90       	pop	r4
    8386:	3f 90       	pop	r3
    8388:	2f 90       	pop	r2
    838a:	08 95       	ret
    838c:	20 97       	sbiw	r28, 0x00	; 0
    838e:	11 f3       	breq	.-60     	; 0x8354 <p_ftoa+0x184>
    8390:	8e e2       	ldi	r24, 0x2E	; 46
    8392:	a5 de       	rcall	.-694    	; 0x80de <pch>
    8394:	c5 01       	movw	r24, r10
    8396:	b4 01       	movw	r22, r8
    8398:	0e 94 34 e6 	call	0x1cc68	; 0x1cc68 <__fixsfsi>
    839c:	2b 01       	movw	r4, r22
    839e:	3c 01       	movw	r6, r24
    83a0:	07 2e       	mov	r0, r23
    83a2:	00 0c       	add	r0, r0
    83a4:	88 0b       	sbc	r24, r24
    83a6:	99 0b       	sbc	r25, r25
    83a8:	0e 94 67 e6 	call	0x1ccce	; 0x1ccce <__floatsisf>
    83ac:	9b 01       	movw	r18, r22
    83ae:	ac 01       	movw	r20, r24
    83b0:	c5 01       	movw	r24, r10
    83b2:	b4 01       	movw	r22, r8
    83b4:	0e 94 63 e5 	call	0x1cac6	; 0x1cac6 <__subsf3>
    83b8:	4b 01       	movw	r8, r22
    83ba:	5c 01       	movw	r10, r24
    83bc:	80 e3       	ldi	r24, 0x30	; 48
    83be:	84 0d       	add	r24, r4
    83c0:	8e de       	rcall	.-740    	; 0x80de <pch>
    83c2:	21 97       	sbiw	r28, 0x01	; 1
    83c4:	20 e0       	ldi	r18, 0x00	; 0
    83c6:	30 e0       	ldi	r19, 0x00	; 0
    83c8:	40 e2       	ldi	r20, 0x20	; 32
    83ca:	51 e4       	ldi	r21, 0x41	; 65
    83cc:	c5 01       	movw	r24, r10
    83ce:	b4 01       	movw	r22, r8
    83d0:	0e 94 1b e7 	call	0x1ce36	; 0x1ce36 <__mulsf3>
    83d4:	4b 01       	movw	r8, r22
    83d6:	5c 01       	movw	r10, r24
    83d8:	20 97       	sbiw	r28, 0x00	; 0
    83da:	e1 f6       	brne	.-72     	; 0x8394 <p_ftoa+0x1c4>
    83dc:	bb cf       	rjmp	.-138    	; 0x8354 <p_ftoa+0x184>

000083de <p_etoa>:
    83de:	ad e0       	ldi	r26, 0x0D	; 13
    83e0:	b0 e0       	ldi	r27, 0x00	; 0
    83e2:	e5 ef       	ldi	r30, 0xF5	; 245
    83e4:	f1 e4       	ldi	r31, 0x41	; 65
    83e6:	0c 94 19 e5 	jmp	0x1ca32	; 0x1ca32 <__prologue_saves__>
    83ea:	4b 01       	movw	r8, r22
    83ec:	5c 01       	movw	r10, r24
    83ee:	5b 87       	std	Y+11, r21	; 0x0b
    83f0:	4a 87       	std	Y+10, r20	; 0x0a
    83f2:	1d 87       	std	Y+13, r17	; 0x0d
    83f4:	0c 87       	std	Y+12, r16	; 0x0c
    83f6:	3c 2c       	mov	r3, r12
    83f8:	c6 fa       	bst	r12, 6
    83fa:	11 27       	eor	r17, r17
    83fc:	10 f9       	bld	r17, 0
    83fe:	b9 01       	movw	r22, r18
    8400:	ca 01       	movw	r24, r20
    8402:	60 de       	rcall	.-832    	; 0x80c4 <pch_init>
    8404:	20 e0       	ldi	r18, 0x00	; 0
    8406:	30 e0       	ldi	r19, 0x00	; 0
    8408:	a9 01       	movw	r20, r18
    840a:	c5 01       	movw	r24, r10
    840c:	b4 01       	movw	r22, r8
    840e:	0e 94 c8 e5 	call	0x1cb90	; 0x1cb90 <__cmpsf2>
    8412:	87 ff       	sbrs	r24, 7
    8414:	05 c0       	rjmp	.+10     	; 0x8420 <p_etoa+0x42>
    8416:	b7 fa       	bst	r11, 7
    8418:	b0 94       	com	r11
    841a:	b7 f8       	bld	r11, 7
    841c:	b0 94       	com	r11
    841e:	11 e0       	ldi	r17, 0x01	; 1
    8420:	10 fb       	bst	r17, 0
    8422:	36 f8       	bld	r3, 6
    8424:	36 fe       	sbrs	r3, 6
    8426:	02 c0       	rjmp	.+4      	; 0x842c <p_etoa+0x4e>
    8428:	8d e2       	ldi	r24, 0x2D	; 45
    842a:	07 c0       	rjmp	.+14     	; 0x843a <p_etoa+0x5c>
    842c:	32 fe       	sbrs	r3, 2
    842e:	02 c0       	rjmp	.+4      	; 0x8434 <p_etoa+0x56>
    8430:	8b e2       	ldi	r24, 0x2B	; 43
    8432:	03 c0       	rjmp	.+6      	; 0x843a <p_etoa+0x5c>
    8434:	34 fe       	sbrs	r3, 4
    8436:	02 c0       	rjmp	.+4      	; 0x843c <p_etoa+0x5e>
    8438:	80 e2       	ldi	r24, 0x20	; 32
    843a:	51 de       	rcall	.-862    	; 0x80de <pch>
    843c:	37 01       	movw	r6, r14
    843e:	f7 fe       	sbrs	r15, 7
    8440:	02 c0       	rjmp	.+4      	; 0x8446 <p_etoa+0x68>
    8442:	61 2c       	mov	r6, r1
    8444:	71 2c       	mov	r7, r1
    8446:	19 86       	std	Y+9, r1	; 0x09
    8448:	18 86       	std	Y+8, r1	; 0x08
    844a:	20 e0       	ldi	r18, 0x00	; 0
    844c:	30 e0       	ldi	r19, 0x00	; 0
    844e:	a9 01       	movw	r20, r18
    8450:	c5 01       	movw	r24, r10
    8452:	b4 01       	movw	r22, r8
    8454:	0e 94 c8 e5 	call	0x1cb90	; 0x1cb90 <__cmpsf2>
    8458:	23 2d       	mov	r18, r3
    845a:	22 70       	andi	r18, 0x02	; 2
    845c:	22 2e       	mov	r2, r18
    845e:	88 23       	and	r24, r24
    8460:	09 f4       	brne	.+2      	; 0x8464 <p_etoa+0x86>
    8462:	70 c0       	rjmp	.+224    	; 0x8544 <p_etoa+0x166>
    8464:	22 23       	and	r18, r18
    8466:	b1 f0       	breq	.+44     	; 0x8494 <p_etoa+0xb6>
    8468:	83 01       	movw	r16, r6
    846a:	c1 2c       	mov	r12, r1
    846c:	d1 2c       	mov	r13, r1
    846e:	e1 2c       	mov	r14, r1
    8470:	2f e3       	ldi	r18, 0x3F	; 63
    8472:	f2 2e       	mov	r15, r18
    8474:	01 15       	cp	r16, r1
    8476:	11 05       	cpc	r17, r1
    8478:	91 f0       	breq	.+36     	; 0x849e <p_etoa+0xc0>
    847a:	20 e0       	ldi	r18, 0x00	; 0
    847c:	30 e0       	ldi	r19, 0x00	; 0
    847e:	40 e2       	ldi	r20, 0x20	; 32
    8480:	51 e4       	ldi	r21, 0x41	; 65
    8482:	c7 01       	movw	r24, r14
    8484:	b6 01       	movw	r22, r12
    8486:	0e 94 cc e5 	call	0x1cb98	; 0x1cb98 <__divsf3>
    848a:	6b 01       	movw	r12, r22
    848c:	7c 01       	movw	r14, r24
    848e:	01 50       	subi	r16, 0x01	; 1
    8490:	11 09       	sbc	r17, r1
    8492:	f0 cf       	rjmp	.-32     	; 0x8474 <p_etoa+0x96>
    8494:	c1 2c       	mov	r12, r1
    8496:	d1 2c       	mov	r13, r1
    8498:	e1 2c       	mov	r14, r1
    849a:	9f e3       	ldi	r25, 0x3F	; 63
    849c:	f9 2e       	mov	r15, r25
    849e:	41 2c       	mov	r4, r1
    84a0:	51 2c       	mov	r5, r1
    84a2:	82 01       	movw	r16, r4
    84a4:	01 50       	subi	r16, 0x01	; 1
    84a6:	11 09       	sbc	r17, r1
    84a8:	20 e0       	ldi	r18, 0x00	; 0
    84aa:	30 e0       	ldi	r19, 0x00	; 0
    84ac:	40 e8       	ldi	r20, 0x80	; 128
    84ae:	5f e3       	ldi	r21, 0x3F	; 63
    84b0:	c5 01       	movw	r24, r10
    84b2:	b4 01       	movw	r22, r8
    84b4:	0e 94 c8 e5 	call	0x1cb90	; 0x1cb90 <__cmpsf2>
    84b8:	87 ff       	sbrs	r24, 7
    84ba:	0c c0       	rjmp	.+24     	; 0x84d4 <p_etoa+0xf6>
    84bc:	20 e0       	ldi	r18, 0x00	; 0
    84be:	30 e0       	ldi	r19, 0x00	; 0
    84c0:	40 e2       	ldi	r20, 0x20	; 32
    84c2:	51 e4       	ldi	r21, 0x41	; 65
    84c4:	c5 01       	movw	r24, r10
    84c6:	b4 01       	movw	r22, r8
    84c8:	0e 94 1b e7 	call	0x1ce36	; 0x1ce36 <__mulsf3>
    84cc:	4b 01       	movw	r8, r22
    84ce:	5c 01       	movw	r10, r24
    84d0:	28 01       	movw	r4, r16
    84d2:	e7 cf       	rjmp	.-50     	; 0x84a2 <p_etoa+0xc4>
    84d4:	82 01       	movw	r16, r4
    84d6:	0f 5f       	subi	r16, 0xFF	; 255
    84d8:	1f 4f       	sbci	r17, 0xFF	; 255
    84da:	20 e0       	ldi	r18, 0x00	; 0
    84dc:	30 e0       	ldi	r19, 0x00	; 0
    84de:	40 e2       	ldi	r20, 0x20	; 32
    84e0:	51 e4       	ldi	r21, 0x41	; 65
    84e2:	c5 01       	movw	r24, r10
    84e4:	b4 01       	movw	r22, r8
    84e6:	0e 94 17 e7 	call	0x1ce2e	; 0x1ce2e <__gesf2>
    84ea:	87 fd       	sbrc	r24, 7
    84ec:	0c c0       	rjmp	.+24     	; 0x8506 <p_etoa+0x128>
    84ee:	20 e0       	ldi	r18, 0x00	; 0
    84f0:	30 e0       	ldi	r19, 0x00	; 0
    84f2:	40 e2       	ldi	r20, 0x20	; 32
    84f4:	51 e4       	ldi	r21, 0x41	; 65
    84f6:	c5 01       	movw	r24, r10
    84f8:	b4 01       	movw	r22, r8
    84fa:	0e 94 cc e5 	call	0x1cb98	; 0x1cb98 <__divsf3>
    84fe:	4b 01       	movw	r8, r22
    8500:	5c 01       	movw	r10, r24
    8502:	28 01       	movw	r4, r16
    8504:	e7 cf       	rjmp	.-50     	; 0x84d4 <p_etoa+0xf6>
    8506:	a7 01       	movw	r20, r14
    8508:	96 01       	movw	r18, r12
    850a:	c5 01       	movw	r24, r10
    850c:	b4 01       	movw	r22, r8
    850e:	0e 94 64 e5 	call	0x1cac8	; 0x1cac8 <__addsf3>
    8512:	4b 01       	movw	r8, r22
    8514:	5c 01       	movw	r10, r24
    8516:	82 01       	movw	r16, r4
    8518:	3f ef       	ldi	r19, 0xFF	; 255
    851a:	43 1a       	sub	r4, r19
    851c:	53 0a       	sbc	r5, r19
    851e:	20 e0       	ldi	r18, 0x00	; 0
    8520:	30 e0       	ldi	r19, 0x00	; 0
    8522:	40 e2       	ldi	r20, 0x20	; 32
    8524:	51 e4       	ldi	r21, 0x41	; 65
    8526:	0e 94 17 e7 	call	0x1ce2e	; 0x1ce2e <__gesf2>
    852a:	87 fd       	sbrc	r24, 7
    852c:	09 c0       	rjmp	.+18     	; 0x8540 <p_etoa+0x162>
    852e:	20 e0       	ldi	r18, 0x00	; 0
    8530:	30 e0       	ldi	r19, 0x00	; 0
    8532:	40 e2       	ldi	r20, 0x20	; 32
    8534:	51 e4       	ldi	r21, 0x41	; 65
    8536:	c5 01       	movw	r24, r10
    8538:	b4 01       	movw	r22, r8
    853a:	0e 94 cc e5 	call	0x1cb98	; 0x1cb98 <__divsf3>
    853e:	e9 cf       	rjmp	.-46     	; 0x8512 <p_etoa+0x134>
    8540:	08 87       	std	Y+8, r16	; 0x08
    8542:	19 87       	std	Y+9, r17	; 0x09
    8544:	85 e6       	ldi	r24, 0x65	; 101
    8546:	89 83       	std	Y+1, r24	; 0x01
    8548:	88 85       	ldd	r24, Y+8	; 0x08
    854a:	99 85       	ldd	r25, Y+9	; 0x09
    854c:	97 ff       	sbrs	r25, 7
    854e:	08 c0       	rjmp	.+16     	; 0x8560 <p_etoa+0x182>
    8550:	91 95       	neg	r25
    8552:	81 95       	neg	r24
    8554:	91 09       	sbc	r25, r1
    8556:	99 87       	std	Y+9, r25	; 0x09
    8558:	88 87       	std	Y+8, r24	; 0x08
    855a:	8d e2       	ldi	r24, 0x2D	; 45
    855c:	90 e0       	ldi	r25, 0x00	; 0
    855e:	02 c0       	rjmp	.+4      	; 0x8564 <p_etoa+0x186>
    8560:	8b e2       	ldi	r24, 0x2B	; 43
    8562:	90 e0       	ldi	r25, 0x00	; 0
    8564:	6c 01       	movw	r12, r24
    8566:	82 e0       	ldi	r24, 0x02	; 2
    8568:	e8 2e       	mov	r14, r24
    856a:	f1 2c       	mov	r15, r1
    856c:	8e 01       	movw	r16, r28
    856e:	08 5f       	subi	r16, 0xF8	; 248
    8570:	1f 4f       	sbci	r17, 0xFF	; 255
    8572:	2a e0       	ldi	r18, 0x0A	; 10
    8574:	30 e0       	ldi	r19, 0x00	; 0
    8576:	42 e0       	ldi	r20, 0x02	; 2
    8578:	50 e0       	ldi	r21, 0x00	; 0
    857a:	65 e0       	ldi	r22, 0x05	; 5
    857c:	70 e0       	ldi	r23, 0x00	; 0
    857e:	ce 01       	movw	r24, r28
    8580:	02 96       	adiw	r24, 0x02	; 2
    8582:	17 dd       	rcall	.-1490   	; 0x7fb2 <bin2num>
    8584:	9c 01       	movw	r18, r24
    8586:	93 2d       	mov	r25, r3
    8588:	98 72       	andi	r25, 0x28	; 40
    858a:	90 32       	cpi	r25, 0x20	; 32
    858c:	61 f0       	breq	.+24     	; 0x85a6 <p_etoa+0x1c8>
    858e:	c5 01       	movw	r24, r10
    8590:	b4 01       	movw	r22, r8
    8592:	0e 94 34 e6 	call	0x1cc68	; 0x1cc68 <__fixsfsi>
    8596:	6b 01       	movw	r12, r22
    8598:	7c 01       	movw	r14, r24
    859a:	80 e3       	ldi	r24, 0x30	; 48
    859c:	8c 0d       	add	r24, r12
    859e:	9f dd       	rcall	.-1218   	; 0x80de <pch>
    85a0:	21 10       	cpse	r2, r1
    85a2:	20 c0       	rjmp	.+64     	; 0x85e4 <p_etoa+0x206>
    85a4:	5e c0       	rjmp	.+188    	; 0x8662 <p_etoa+0x284>
    85a6:	80 91 14 1a 	lds	r24, 0x1A14	; 0x801a14 <_pch+0x2>
    85aa:	90 91 15 1a 	lds	r25, 0x1A15	; 0x801a15 <_pch+0x3>
    85ae:	0c 85       	ldd	r16, Y+12	; 0x0c
    85b0:	1d 85       	ldd	r17, Y+13	; 0x0d
    85b2:	08 1b       	sub	r16, r24
    85b4:	19 0b       	sbc	r17, r25
    85b6:	22 20       	and	r2, r2
    85b8:	41 f0       	breq	.+16     	; 0x85ca <p_etoa+0x1ec>
    85ba:	61 14       	cp	r6, r1
    85bc:	71 04       	cpc	r7, r1
    85be:	29 f0       	breq	.+10     	; 0x85ca <p_etoa+0x1ec>
    85c0:	06 19       	sub	r16, r6
    85c2:	17 09       	sbc	r17, r7
    85c4:	06 50       	subi	r16, 0x06	; 6
    85c6:	11 09       	sbc	r17, r1
    85c8:	02 c0       	rjmp	.+4      	; 0x85ce <p_etoa+0x1f0>
    85ca:	05 50       	subi	r16, 0x05	; 5
    85cc:	11 09       	sbc	r17, r1
    85ce:	24 30       	cpi	r18, 0x04	; 4
    85d0:	31 05       	cpc	r19, r1
    85d2:	14 f0       	brlt	.+4      	; 0x85d8 <p_etoa+0x1fa>
    85d4:	01 50       	subi	r16, 0x01	; 1
    85d6:	11 09       	sbc	r17, r1
    85d8:	10 16       	cp	r1, r16
    85da:	11 06       	cpc	r1, r17
    85dc:	c4 f6       	brge	.-80     	; 0x858e <p_etoa+0x1b0>
    85de:	80 e3       	ldi	r24, 0x30	; 48
    85e0:	7e dd       	rcall	.-1284   	; 0x80de <pch>
    85e2:	f8 cf       	rjmp	.-16     	; 0x85d4 <p_etoa+0x1f6>
    85e4:	61 14       	cp	r6, r1
    85e6:	71 04       	cpc	r7, r1
    85e8:	09 f4       	brne	.+2      	; 0x85ec <p_etoa+0x20e>
    85ea:	3b c0       	rjmp	.+118    	; 0x8662 <p_etoa+0x284>
    85ec:	b6 01       	movw	r22, r12
    85ee:	dd 0c       	add	r13, r13
    85f0:	88 0b       	sbc	r24, r24
    85f2:	99 0b       	sbc	r25, r25
    85f4:	0e 94 67 e6 	call	0x1ccce	; 0x1ccce <__floatsisf>
    85f8:	9b 01       	movw	r18, r22
    85fa:	ac 01       	movw	r20, r24
    85fc:	c5 01       	movw	r24, r10
    85fe:	b4 01       	movw	r22, r8
    8600:	0e 94 63 e5 	call	0x1cac6	; 0x1cac6 <__subsf3>
    8604:	20 e0       	ldi	r18, 0x00	; 0
    8606:	30 e0       	ldi	r19, 0x00	; 0
    8608:	40 e2       	ldi	r20, 0x20	; 32
    860a:	51 e4       	ldi	r21, 0x41	; 65
    860c:	0e 94 1b e7 	call	0x1ce36	; 0x1ce36 <__mulsf3>
    8610:	6b 01       	movw	r12, r22
    8612:	7c 01       	movw	r14, r24
    8614:	8e e2       	ldi	r24, 0x2E	; 46
    8616:	63 dd       	rcall	.-1338   	; 0x80de <pch>
    8618:	c7 01       	movw	r24, r14
    861a:	b6 01       	movw	r22, r12
    861c:	0e 94 34 e6 	call	0x1cc68	; 0x1cc68 <__fixsfsi>
    8620:	4b 01       	movw	r8, r22
    8622:	5c 01       	movw	r10, r24
    8624:	07 2e       	mov	r0, r23
    8626:	00 0c       	add	r0, r0
    8628:	88 0b       	sbc	r24, r24
    862a:	99 0b       	sbc	r25, r25
    862c:	0e 94 67 e6 	call	0x1ccce	; 0x1ccce <__floatsisf>
    8630:	9b 01       	movw	r18, r22
    8632:	ac 01       	movw	r20, r24
    8634:	c7 01       	movw	r24, r14
    8636:	b6 01       	movw	r22, r12
    8638:	0e 94 63 e5 	call	0x1cac6	; 0x1cac6 <__subsf3>
    863c:	6b 01       	movw	r12, r22
    863e:	7c 01       	movw	r14, r24
    8640:	80 e3       	ldi	r24, 0x30	; 48
    8642:	88 0d       	add	r24, r8
    8644:	4c dd       	rcall	.-1384   	; 0x80de <pch>
    8646:	20 e0       	ldi	r18, 0x00	; 0
    8648:	30 e0       	ldi	r19, 0x00	; 0
    864a:	40 e2       	ldi	r20, 0x20	; 32
    864c:	51 e4       	ldi	r21, 0x41	; 65
    864e:	c7 01       	movw	r24, r14
    8650:	b6 01       	movw	r22, r12
    8652:	0e 94 1b e7 	call	0x1ce36	; 0x1ce36 <__mulsf3>
    8656:	6b 01       	movw	r12, r22
    8658:	7c 01       	movw	r14, r24
    865a:	81 e0       	ldi	r24, 0x01	; 1
    865c:	68 1a       	sub	r6, r24
    865e:	71 08       	sbc	r7, r1
    8660:	d9 f6       	brne	.-74     	; 0x8618 <p_etoa+0x23a>
    8662:	8e 01       	movw	r16, r28
    8664:	0f 5f       	subi	r16, 0xFF	; 255
    8666:	1f 4f       	sbci	r17, 0xFF	; 255
    8668:	f8 01       	movw	r30, r16
    866a:	81 91       	ld	r24, Z+
    866c:	8f 01       	movw	r16, r30
    866e:	88 23       	and	r24, r24
    8670:	11 f0       	breq	.+4      	; 0x8676 <p_etoa+0x298>
    8672:	35 dd       	rcall	.-1430   	; 0x80de <pch>
    8674:	f9 cf       	rjmp	.-14     	; 0x8668 <p_etoa+0x28a>
    8676:	33 dd       	rcall	.-1434   	; 0x80de <pch>
    8678:	ea 85       	ldd	r30, Y+10	; 0x0a
    867a:	fb 85       	ldd	r31, Y+11	; 0x0b
    867c:	01 90       	ld	r0, Z+
    867e:	00 20       	and	r0, r0
    8680:	e9 f7       	brne	.-6      	; 0x867c <p_etoa+0x29e>
    8682:	cf 01       	movw	r24, r30
    8684:	01 97       	sbiw	r24, 0x01	; 1
    8686:	2a 85       	ldd	r18, Y+10	; 0x0a
    8688:	3b 85       	ldd	r19, Y+11	; 0x0b
    868a:	82 1b       	sub	r24, r18
    868c:	93 0b       	sbc	r25, r19
    868e:	2d 96       	adiw	r28, 0x0d	; 13
    8690:	e2 e1       	ldi	r30, 0x12	; 18
    8692:	0c 94 35 e5 	jmp	0x1ca6a	; 0x1ca6a <__epilogue_restores__>

00008696 <_puts_pad>:
    8696:	a0 e0       	ldi	r26, 0x00	; 0
    8698:	b0 e0       	ldi	r27, 0x00	; 0
    869a:	e1 e5       	ldi	r30, 0x51	; 81
    869c:	f3 e4       	ldi	r31, 0x43	; 67
    869e:	0c 94 1f e5 	jmp	0x1ca3e	; 0x1ca3e <__prologue_saves__+0xc>
    86a2:	6c 01       	movw	r12, r24
    86a4:	4b 01       	movw	r8, r22
    86a6:	79 01       	movw	r14, r18
    86a8:	24 17       	cp	r18, r20
    86aa:	35 07       	cpc	r19, r21
    86ac:	24 f4       	brge	.+8      	; 0x86b6 <_puts_pad+0x20>
    86ae:	ea 01       	movw	r28, r20
    86b0:	c2 1b       	sub	r28, r18
    86b2:	d3 0b       	sbc	r29, r19
    86b4:	02 c0       	rjmp	.+4      	; 0x86ba <_puts_pad+0x24>
    86b6:	c0 e0       	ldi	r28, 0x00	; 0
    86b8:	d0 e0       	ldi	r29, 0x00	; 0
    86ba:	01 15       	cp	r16, r1
    86bc:	11 05       	cpc	r17, r1
    86be:	49 f4       	brne	.+18     	; 0x86d2 <_puts_pad+0x3c>
    86c0:	21 97       	sbiw	r28, 0x01	; 1
    86c2:	38 f0       	brcs	.+14     	; 0x86d2 <_puts_pad+0x3c>
    86c4:	d6 01       	movw	r26, r12
    86c6:	ed 91       	ld	r30, X+
    86c8:	fc 91       	ld	r31, X
    86ca:	60 e2       	ldi	r22, 0x20	; 32
    86cc:	c6 01       	movw	r24, r12
    86ce:	09 95       	icall
    86d0:	f7 cf       	rjmp	.-18     	; 0x86c0 <_puts_pad+0x2a>
    86d2:	54 01       	movw	r10, r8
    86d4:	f5 01       	movw	r30, r10
    86d6:	61 91       	ld	r22, Z+
    86d8:	5f 01       	movw	r10, r30
    86da:	66 23       	and	r22, r22
    86dc:	61 f0       	breq	.+24     	; 0x86f6 <_puts_pad+0x60>
    86de:	e1 14       	cp	r14, r1
    86e0:	f1 04       	cpc	r15, r1
    86e2:	49 f0       	breq	.+18     	; 0x86f6 <_puts_pad+0x60>
    86e4:	d6 01       	movw	r26, r12
    86e6:	ed 91       	ld	r30, X+
    86e8:	fc 91       	ld	r31, X
    86ea:	c6 01       	movw	r24, r12
    86ec:	09 95       	icall
    86ee:	b1 e0       	ldi	r27, 0x01	; 1
    86f0:	eb 1a       	sub	r14, r27
    86f2:	f1 08       	sbc	r15, r1
    86f4:	ef cf       	rjmp	.-34     	; 0x86d4 <_puts_pad+0x3e>
    86f6:	01 15       	cp	r16, r1
    86f8:	11 05       	cpc	r17, r1
    86fa:	51 f0       	breq	.+20     	; 0x8710 <_puts_pad+0x7a>
    86fc:	20 97       	sbiw	r28, 0x00	; 0
    86fe:	41 f0       	breq	.+16     	; 0x8710 <_puts_pad+0x7a>
    8700:	d6 01       	movw	r26, r12
    8702:	ed 91       	ld	r30, X+
    8704:	fc 91       	ld	r31, X
    8706:	60 e2       	ldi	r22, 0x20	; 32
    8708:	c6 01       	movw	r24, r12
    870a:	09 95       	icall
    870c:	21 97       	sbiw	r28, 0x01	; 1
    870e:	f6 cf       	rjmp	.-20     	; 0x86fc <_puts_pad+0x66>
    8710:	cd b7       	in	r28, 0x3d	; 61
    8712:	de b7       	in	r29, 0x3e	; 62
    8714:	ec e0       	ldi	r30, 0x0C	; 12
    8716:	0c 94 3b e5 	jmp	0x1ca76	; 0x1ca76 <__epilogue_restores__+0xc>

0000871a <_printf_fn>:
    871a:	ab e6       	ldi	r26, 0x6B	; 107
    871c:	b0 e0       	ldi	r27, 0x00	; 0
    871e:	e3 e9       	ldi	r30, 0x93	; 147
    8720:	f3 e4       	ldi	r31, 0x43	; 67
    8722:	0c 94 19 e5 	jmp	0x1ca32	; 0x1ca32 <__prologue_saves__>
    8726:	a5 96       	adiw	r28, 0x25	; 37
    8728:	9f af       	std	Y+63, r25	; 0x3f
    872a:	8e af       	std	Y+62, r24	; 0x3e
    872c:	a5 97       	sbiw	r28, 0x25	; 37
    872e:	6a 01       	movw	r12, r20
    8730:	e6 2e       	mov	r14, r22
    8732:	19 01       	movw	r2, r18
    8734:	a9 96       	adiw	r28, 0x29	; 41
    8736:	1c ae       	std	Y+60, r1	; 0x3c
    8738:	1d ae       	std	Y+61, r1	; 0x3d
    873a:	1e ae       	std	Y+62, r1	; 0x3e
    873c:	1f ae       	std	Y+63, r1	; 0x3f
    873e:	a9 97       	sbiw	r28, 0x29	; 41
    8740:	9e 01       	movw	r18, r28
    8742:	2f 5a       	subi	r18, 0xAF	; 175
    8744:	3f 4f       	sbci	r19, 0xFF	; 255
    8746:	67 96       	adiw	r28, 0x17	; 23
    8748:	3f af       	std	Y+63, r19	; 0x3f
    874a:	2e af       	std	Y+62, r18	; 0x3e
    874c:	67 97       	sbiw	r28, 0x17	; 23
    874e:	ae 01       	movw	r20, r28
    8750:	4d 5b       	subi	r20, 0xBD	; 189
    8752:	5f 4f       	sbci	r21, 0xFF	; 255
    8754:	69 96       	adiw	r28, 0x19	; 25
    8756:	5f af       	std	Y+63, r21	; 0x3f
    8758:	4e af       	std	Y+62, r20	; 0x3e
    875a:	69 97       	sbiw	r28, 0x19	; 25
    875c:	ce 01       	movw	r24, r28
    875e:	85 5b       	subi	r24, 0xB5	; 181
    8760:	9f 4f       	sbci	r25, 0xFF	; 255
    8762:	6b 96       	adiw	r28, 0x1b	; 27
    8764:	9f af       	std	Y+63, r25	; 0x3f
    8766:	8e af       	std	Y+62, r24	; 0x3e
    8768:	6b 97       	sbiw	r28, 0x1b	; 27
    876a:	de 01       	movw	r26, r28
    876c:	ad 5a       	subi	r26, 0xAD	; 173
    876e:	bf 4f       	sbci	r27, 0xFF	; 255
    8770:	6d 96       	adiw	r28, 0x1d	; 29
    8772:	bf af       	std	Y+63, r27	; 0x3f
    8774:	ae af       	std	Y+62, r26	; 0x3e
    8776:	6d 97       	sbiw	r28, 0x1d	; 29
    8778:	f6 01       	movw	r30, r12
    877a:	5e 2d       	mov	r21, r14
    877c:	0e 94 50 e5 	call	0x1caa0	; 0x1caa0 <__xload_1>
    8780:	66 23       	and	r22, r22
    8782:	09 f4       	brne	.+2      	; 0x8786 <_printf_fn+0x6c>
    8784:	d7 c3       	rjmp	.+1966   	; 0x8f34 <_printf_fn+0x81a>
    8786:	ae 2d       	mov	r26, r14
    8788:	c6 01       	movw	r24, r12
    878a:	01 96       	adiw	r24, 0x01	; 1
    878c:	a1 1d       	adc	r26, r1
    878e:	3c 01       	movw	r6, r24
    8790:	8a 2e       	mov	r8, r26
    8792:	65 32       	cpi	r22, 0x25	; 37
    8794:	51 f0       	breq	.+20     	; 0x87aa <_printf_fn+0x90>
    8796:	a5 96       	adiw	r28, 0x25	; 37
    8798:	ae ad       	ldd	r26, Y+62	; 0x3e
    879a:	bf ad       	ldd	r27, Y+63	; 0x3f
    879c:	a5 97       	sbiw	r28, 0x25	; 37
    879e:	ed 91       	ld	r30, X+
    87a0:	fc 91       	ld	r31, X
    87a2:	11 97       	sbiw	r26, 0x01	; 1
    87a4:	cd 01       	movw	r24, r26
    87a6:	09 95       	icall
    87a8:	91 c3       	rjmp	.+1826   	; 0x8ecc <_printf_fn+0x7b2>
    87aa:	91 2c       	mov	r9, r1
    87ac:	f3 01       	movw	r30, r6
    87ae:	58 2d       	mov	r21, r8
    87b0:	0e 94 50 e5 	call	0x1caa0	; 0x1caa0 <__xload_1>
    87b4:	63 32       	cpi	r22, 0x23	; 35
    87b6:	19 f4       	brne	.+6      	; 0x87be <_printf_fn+0xa4>
    87b8:	68 94       	set
    87ba:	97 f8       	bld	r9, 7
    87bc:	04 c0       	rjmp	.+8      	; 0x87c6 <_printf_fn+0xac>
    87be:	6b 32       	cpi	r22, 0x2B	; 43
    87c0:	39 f4       	brne	.+14     	; 0x87d0 <_printf_fn+0xb6>
    87c2:	68 94       	set
    87c4:	92 f8       	bld	r9, 2
    87c6:	bf ef       	ldi	r27, 0xFF	; 255
    87c8:	6b 1a       	sub	r6, r27
    87ca:	7b 0a       	sbc	r7, r27
    87cc:	8b 0a       	sbc	r8, r27
    87ce:	ee cf       	rjmp	.-36     	; 0x87ac <_printf_fn+0x92>
    87d0:	6d 32       	cpi	r22, 0x2D	; 45
    87d2:	a9 f4       	brne	.+42     	; 0x87fe <_printf_fn+0xe4>
    87d4:	93 fc       	sbrc	r9, 3
    87d6:	05 c0       	rjmp	.+10     	; 0x87e2 <_printf_fn+0xc8>
    87d8:	6d 32       	cpi	r22, 0x2D	; 45
    87da:	19 f4       	brne	.+6      	; 0x87e2 <_printf_fn+0xc8>
    87dc:	68 94       	set
    87de:	93 f8       	bld	r9, 3
    87e0:	f2 cf       	rjmp	.-28     	; 0x87c6 <_printf_fn+0xac>
    87e2:	94 fc       	sbrc	r9, 4
    87e4:	05 c0       	rjmp	.+10     	; 0x87f0 <_printf_fn+0xd6>
    87e6:	60 32       	cpi	r22, 0x20	; 32
    87e8:	19 f4       	brne	.+6      	; 0x87f0 <_printf_fn+0xd6>
    87ea:	68 94       	set
    87ec:	94 f8       	bld	r9, 4
    87ee:	eb cf       	rjmp	.-42     	; 0x87c6 <_printf_fn+0xac>
    87f0:	95 fc       	sbrc	r9, 5
    87f2:	e9 cf       	rjmp	.-46     	; 0x87c6 <_printf_fn+0xac>
    87f4:	60 33       	cpi	r22, 0x30	; 48
    87f6:	39 f7       	brne	.-50     	; 0x87c6 <_printf_fn+0xac>
    87f8:	68 94       	set
    87fa:	95 f8       	bld	r9, 5
    87fc:	e4 cf       	rjmp	.-56     	; 0x87c6 <_printf_fn+0xac>
    87fe:	86 2f       	mov	r24, r22
    8800:	8f 7e       	andi	r24, 0xEF	; 239
    8802:	80 32       	cpi	r24, 0x20	; 32
    8804:	39 f3       	breq	.-50     	; 0x87d4 <_printf_fn+0xba>
    8806:	70 e0       	ldi	r23, 0x00	; 0
    8808:	60 53       	subi	r22, 0x30	; 48
    880a:	71 09       	sbc	r23, r1
    880c:	41 2c       	mov	r4, r1
    880e:	51 2c       	mov	r5, r1
    8810:	6a 30       	cpi	r22, 0x0A	; 10
    8812:	71 05       	cpc	r23, r1
    8814:	e0 f4       	brcc	.+56     	; 0x884e <_printf_fn+0x134>
    8816:	2a e0       	ldi	r18, 0x0A	; 10
    8818:	f3 01       	movw	r30, r6
    881a:	58 2d       	mov	r21, r8
    881c:	0e 94 50 e5 	call	0x1caa0	; 0x1caa0 <__xload_1>
    8820:	70 e0       	ldi	r23, 0x00	; 0
    8822:	cb 01       	movw	r24, r22
    8824:	c0 97       	sbiw	r24, 0x30	; 48
    8826:	0a 97       	sbiw	r24, 0x0a	; 10
    8828:	80 f4       	brcc	.+32     	; 0x884a <_printf_fn+0x130>
    882a:	ef ef       	ldi	r30, 0xFF	; 255
    882c:	6e 1a       	sub	r6, r30
    882e:	7e 0a       	sbc	r7, r30
    8830:	8e 0a       	sbc	r8, r30
    8832:	24 9d       	mul	r18, r4
    8834:	c0 01       	movw	r24, r0
    8836:	25 9d       	mul	r18, r5
    8838:	90 0d       	add	r25, r0
    883a:	11 24       	eor	r1, r1
    883c:	68 0f       	add	r22, r24
    883e:	79 1f       	adc	r23, r25
    8840:	2b 01       	movw	r4, r22
    8842:	f0 e3       	ldi	r31, 0x30	; 48
    8844:	4f 1a       	sub	r4, r31
    8846:	51 08       	sbc	r5, r1
    8848:	e7 cf       	rjmp	.-50     	; 0x8818 <_printf_fn+0xfe>
    884a:	68 94       	set
    884c:	90 f8       	bld	r9, 0
    884e:	f3 01       	movw	r30, r6
    8850:	58 2d       	mov	r21, r8
    8852:	0e 94 50 e5 	call	0x1caa0	; 0x1caa0 <__xload_1>
    8856:	6e 32       	cpi	r22, 0x2E	; 46
    8858:	59 f5       	brne	.+86     	; 0x88b0 <_printf_fn+0x196>
    885a:	2f ef       	ldi	r18, 0xFF	; 255
    885c:	62 1a       	sub	r6, r18
    885e:	72 0a       	sbc	r7, r18
    8860:	82 0a       	sbc	r8, r18
    8862:	a1 96       	adiw	r28, 0x21	; 33
    8864:	1f ae       	std	Y+63, r1	; 0x3f
    8866:	1e ae       	std	Y+62, r1	; 0x3e
    8868:	a1 97       	sbiw	r28, 0x21	; 33
    886a:	2a e0       	ldi	r18, 0x0A	; 10
    886c:	f3 01       	movw	r30, r6
    886e:	58 2d       	mov	r21, r8
    8870:	0e 94 50 e5 	call	0x1caa0	; 0x1caa0 <__xload_1>
    8874:	70 e0       	ldi	r23, 0x00	; 0
    8876:	cb 01       	movw	r24, r22
    8878:	c0 97       	sbiw	r24, 0x30	; 48
    887a:	0a 97       	sbiw	r24, 0x0a	; 10
    887c:	b0 f4       	brcc	.+44     	; 0x88aa <_printf_fn+0x190>
    887e:	3f ef       	ldi	r19, 0xFF	; 255
    8880:	63 1a       	sub	r6, r19
    8882:	73 0a       	sbc	r7, r19
    8884:	83 0a       	sbc	r8, r19
    8886:	a1 96       	adiw	r28, 0x21	; 33
    8888:	4e ad       	ldd	r20, Y+62	; 0x3e
    888a:	5f ad       	ldd	r21, Y+63	; 0x3f
    888c:	a1 97       	sbiw	r28, 0x21	; 33
    888e:	24 9f       	mul	r18, r20
    8890:	c0 01       	movw	r24, r0
    8892:	25 9f       	mul	r18, r21
    8894:	90 0d       	add	r25, r0
    8896:	11 24       	eor	r1, r1
    8898:	68 0f       	add	r22, r24
    889a:	79 1f       	adc	r23, r25
    889c:	cb 01       	movw	r24, r22
    889e:	c0 97       	sbiw	r24, 0x30	; 48
    88a0:	a1 96       	adiw	r28, 0x21	; 33
    88a2:	9f af       	std	Y+63, r25	; 0x3f
    88a4:	8e af       	std	Y+62, r24	; 0x3e
    88a6:	a1 97       	sbiw	r28, 0x21	; 33
    88a8:	e1 cf       	rjmp	.-62     	; 0x886c <_printf_fn+0x152>
    88aa:	68 94       	set
    88ac:	91 f8       	bld	r9, 1
    88ae:	04 c0       	rjmp	.+8      	; 0x88b8 <_printf_fn+0x19e>
    88b0:	a1 96       	adiw	r28, 0x21	; 33
    88b2:	1f ae       	std	Y+63, r1	; 0x3f
    88b4:	1e ae       	std	Y+62, r1	; 0x3e
    88b6:	a1 97       	sbiw	r28, 0x21	; 33
    88b8:	f3 01       	movw	r30, r6
    88ba:	58 2d       	mov	r21, r8
    88bc:	0e 94 50 e5 	call	0x1caa0	; 0x1caa0 <__xload_1>
    88c0:	69 34       	cpi	r22, 0x49	; 73
    88c2:	09 f0       	breq	.+2      	; 0x88c6 <_printf_fn+0x1ac>
    88c4:	45 c0       	rjmp	.+138    	; 0x8950 <_printf_fn+0x236>
    88c6:	9f ef       	ldi	r25, 0xFF	; 255
    88c8:	69 1a       	sub	r6, r25
    88ca:	79 0a       	sbc	r7, r25
    88cc:	89 0a       	sbc	r8, r25
    88ce:	6f 96       	adiw	r28, 0x1f	; 31
    88d0:	1f ae       	std	Y+63, r1	; 0x3f
    88d2:	1e ae       	std	Y+62, r1	; 0x3e
    88d4:	6f 97       	sbiw	r28, 0x1f	; 31
    88d6:	2a e0       	ldi	r18, 0x0A	; 10
    88d8:	f3 01       	movw	r30, r6
    88da:	58 2d       	mov	r21, r8
    88dc:	0e 94 50 e5 	call	0x1caa0	; 0x1caa0 <__xload_1>
    88e0:	70 e0       	ldi	r23, 0x00	; 0
    88e2:	cb 01       	movw	r24, r22
    88e4:	c0 97       	sbiw	r24, 0x30	; 48
    88e6:	0a 97       	sbiw	r24, 0x0a	; 10
    88e8:	b8 f4       	brcc	.+46     	; 0x8918 <_printf_fn+0x1fe>
    88ea:	af ef       	ldi	r26, 0xFF	; 255
    88ec:	6a 1a       	sub	r6, r26
    88ee:	7a 0a       	sbc	r7, r26
    88f0:	8a 0a       	sbc	r8, r26
    88f2:	6f 96       	adiw	r28, 0x1f	; 31
    88f4:	ee ad       	ldd	r30, Y+62	; 0x3e
    88f6:	ff ad       	ldd	r31, Y+63	; 0x3f
    88f8:	6f 97       	sbiw	r28, 0x1f	; 31
    88fa:	2e 9f       	mul	r18, r30
    88fc:	c0 01       	movw	r24, r0
    88fe:	2f 9f       	mul	r18, r31
    8900:	90 0d       	add	r25, r0
    8902:	11 24       	eor	r1, r1
    8904:	68 0f       	add	r22, r24
    8906:	79 1f       	adc	r23, r25
    8908:	ab 01       	movw	r20, r22
    890a:	40 53       	subi	r20, 0x30	; 48
    890c:	51 09       	sbc	r21, r1
    890e:	6f 96       	adiw	r28, 0x1f	; 31
    8910:	5f af       	std	Y+63, r21	; 0x3f
    8912:	4e af       	std	Y+62, r20	; 0x3e
    8914:	6f 97       	sbiw	r28, 0x1f	; 31
    8916:	e0 cf       	rjmp	.-64     	; 0x88d8 <_printf_fn+0x1be>
    8918:	6f 96       	adiw	r28, 0x1f	; 31
    891a:	8e ad       	ldd	r24, Y+62	; 0x3e
    891c:	9f ad       	ldd	r25, Y+63	; 0x3f
    891e:	6f 97       	sbiw	r28, 0x1f	; 31
    8920:	00 97       	sbiw	r24, 0x00	; 0
    8922:	09 f4       	brne	.+2      	; 0x8926 <_printf_fn+0x20c>
    8924:	4f c0       	rjmp	.+158    	; 0x89c4 <_printf_fn+0x2aa>
    8926:	87 70       	andi	r24, 0x07	; 7
    8928:	99 27       	eor	r25, r25
    892a:	89 2b       	or	r24, r25
    892c:	09 f0       	breq	.+2      	; 0x8930 <_printf_fn+0x216>
    892e:	46 c0       	rjmp	.+140    	; 0x89bc <_printf_fn+0x2a2>
    8930:	6f 96       	adiw	r28, 0x1f	; 31
    8932:	ae ad       	ldd	r26, Y+62	; 0x3e
    8934:	bf ad       	ldd	r27, Y+63	; 0x3f
    8936:	6f 97       	sbiw	r28, 0x1f	; 31
    8938:	83 e0       	ldi	r24, 0x03	; 3
    893a:	b5 95       	asr	r27
    893c:	a7 95       	ror	r26
    893e:	8a 95       	dec	r24
    8940:	e1 f7       	brne	.-8      	; 0x893a <_printf_fn+0x220>
    8942:	6f 96       	adiw	r28, 0x1f	; 31
    8944:	bf af       	std	Y+63, r27	; 0x3f
    8946:	ae af       	std	Y+62, r26	; 0x3e
    8948:	6f 97       	sbiw	r28, 0x1f	; 31
    894a:	ab 2b       	or	r26, r27
    894c:	d9 f1       	breq	.+118    	; 0x89c4 <_printf_fn+0x2aa>
    894e:	27 c0       	rjmp	.+78     	; 0x899e <_printf_fn+0x284>
    8950:	68 36       	cpi	r22, 0x68	; 104
    8952:	29 f4       	brne	.+10     	; 0x895e <_printf_fn+0x244>
    8954:	bf ef       	ldi	r27, 0xFF	; 255
    8956:	6b 1a       	sub	r6, r27
    8958:	7b 0a       	sbc	r7, r27
    895a:	8b 0a       	sbc	r8, r27
    895c:	ba c2       	rjmp	.+1396   	; 0x8ed2 <_printf_fn+0x7b8>
    895e:	6c 36       	cpi	r22, 0x6C	; 108
    8960:	09 f0       	breq	.+2      	; 0x8964 <_printf_fn+0x24a>
    8962:	b7 c2       	rjmp	.+1390   	; 0x8ed2 <_printf_fn+0x7b8>
    8964:	a8 2d       	mov	r26, r8
    8966:	c3 01       	movw	r24, r6
    8968:	01 96       	adiw	r24, 0x01	; 1
    896a:	a1 1d       	adc	r26, r1
    896c:	fc 01       	movw	r30, r24
    896e:	5a 2f       	mov	r21, r26
    8970:	0e 94 50 e5 	call	0x1caa0	; 0x1caa0 <__xload_1>
    8974:	6c 36       	cpi	r22, 0x6C	; 108
    8976:	49 f0       	breq	.+18     	; 0x898a <_printf_fn+0x270>
    8978:	3c 01       	movw	r6, r24
    897a:	8a 2e       	mov	r8, r26
    897c:	24 e0       	ldi	r18, 0x04	; 4
    897e:	30 e0       	ldi	r19, 0x00	; 0
    8980:	6f 96       	adiw	r28, 0x1f	; 31
    8982:	3f af       	std	Y+63, r19	; 0x3f
    8984:	2e af       	std	Y+62, r18	; 0x3e
    8986:	6f 97       	sbiw	r28, 0x1f	; 31
    8988:	0a c0       	rjmp	.+20     	; 0x899e <_printf_fn+0x284>
    898a:	32 e0       	ldi	r19, 0x02	; 2
    898c:	63 0e       	add	r6, r19
    898e:	71 1c       	adc	r7, r1
    8990:	81 1c       	adc	r8, r1
    8992:	48 e0       	ldi	r20, 0x08	; 8
    8994:	50 e0       	ldi	r21, 0x00	; 0
    8996:	6f 96       	adiw	r28, 0x1f	; 31
    8998:	5f af       	std	Y+63, r21	; 0x3f
    899a:	4e af       	std	Y+62, r20	; 0x3e
    899c:	6f 97       	sbiw	r28, 0x1f	; 31
    899e:	f3 01       	movw	r30, r6
    89a0:	58 2d       	mov	r21, r8
    89a2:	0e 94 50 e5 	call	0x1caa0	; 0x1caa0 <__xload_1>
    89a6:	86 2f       	mov	r24, r22
    89a8:	90 e0       	ldi	r25, 0x00	; 0
    89aa:	a3 96       	adiw	r28, 0x23	; 35
    89ac:	9f af       	std	Y+63, r25	; 0x3f
    89ae:	8e af       	std	Y+62, r24	; 0x3e
    89b0:	a3 97       	sbiw	r28, 0x23	; 35
    89b2:	84 36       	cpi	r24, 0x64	; 100
    89b4:	91 05       	cpc	r25, r1
    89b6:	09 f4       	brne	.+2      	; 0x89ba <_printf_fn+0x2a0>
    89b8:	93 c2       	rjmp	.+1318   	; 0x8ee0 <_printf_fn+0x7c6>
    89ba:	08 c0       	rjmp	.+16     	; 0x89cc <_printf_fn+0x2b2>
    89bc:	6f 96       	adiw	r28, 0x1f	; 31
    89be:	1f ae       	std	Y+63, r1	; 0x3f
    89c0:	1e ae       	std	Y+62, r1	; 0x3e
    89c2:	6f 97       	sbiw	r28, 0x1f	; 31
    89c4:	a3 96       	adiw	r28, 0x23	; 35
    89c6:	1f ae       	std	Y+63, r1	; 0x3f
    89c8:	1e ae       	std	Y+62, r1	; 0x3e
    89ca:	a3 97       	sbiw	r28, 0x23	; 35
    89cc:	31 e0       	ldi	r19, 0x01	; 1
    89ce:	20 e0       	ldi	r18, 0x00	; 0
    89d0:	a3 96       	adiw	r28, 0x23	; 35
    89d2:	ae ad       	ldd	r26, Y+62	; 0x3e
    89d4:	bf ad       	ldd	r27, Y+63	; 0x3f
    89d6:	a3 97       	sbiw	r28, 0x23	; 35
    89d8:	a4 34       	cpi	r26, 0x44	; 68
    89da:	b1 05       	cpc	r27, r1
    89dc:	09 f0       	breq	.+2      	; 0x89e0 <_printf_fn+0x2c6>
    89de:	30 e0       	ldi	r19, 0x00	; 0
    89e0:	83 2f       	mov	r24, r19
    89e2:	92 2f       	mov	r25, r18
    89e4:	a3 96       	adiw	r28, 0x23	; 35
    89e6:	ee ad       	ldd	r30, Y+62	; 0x3e
    89e8:	ff ad       	ldd	r31, Y+63	; 0x3f
    89ea:	a3 97       	sbiw	r28, 0x23	; 35
    89ec:	e2 54       	subi	r30, 0x42	; 66
    89ee:	f1 09       	sbc	r31, r1
    89f0:	e7 33       	cpi	r30, 0x37	; 55
    89f2:	f1 05       	cpc	r31, r1
    89f4:	08 f0       	brcs	.+2      	; 0x89f8 <_printf_fn+0x2de>
    89f6:	5d c1       	rjmp	.+698    	; 0x8cb2 <_printf_fn+0x598>
    89f8:	ea 5b       	subi	r30, 0xBA	; 186
    89fa:	ff 4f       	sbci	r31, 0xFF	; 255
    89fc:	0c 94 d5 e4 	jmp	0x1c9aa	; 0x1c9aa <__tablejump2__>
    8a00:	e2 e0       	ldi	r30, 0x02	; 2
    8a02:	f0 e0       	ldi	r31, 0x00	; 0
    8a04:	6f 96       	adiw	r28, 0x1f	; 31
    8a06:	ff af       	std	Y+63, r31	; 0x3f
    8a08:	ee af       	std	Y+62, r30	; 0x3e
    8a0a:	6f 97       	sbiw	r28, 0x1f	; 31
    8a0c:	29 2d       	mov	r18, r9
    8a0e:	28 72       	andi	r18, 0x28	; 40
    8a10:	28 32       	cpi	r18, 0x28	; 40
    8a12:	11 f4       	brne	.+4      	; 0x8a18 <_printf_fn+0x2fe>
    8a14:	e8 94       	clt
    8a16:	95 f8       	bld	r9, 5
    8a18:	29 2d       	mov	r18, r9
    8a1a:	22 72       	andi	r18, 0x22	; 34
    8a1c:	22 32       	cpi	r18, 0x22	; 34
    8a1e:	11 f4       	brne	.+4      	; 0x8a24 <_printf_fn+0x30a>
    8a20:	e8 94       	clt
    8a22:	95 f8       	bld	r9, 5
    8a24:	29 2d       	mov	r18, r9
    8a26:	21 72       	andi	r18, 0x21	; 33
    8a28:	21 32       	cpi	r18, 0x21	; 33
    8a2a:	59 f4       	brne	.+22     	; 0x8a42 <_printf_fn+0x328>
    8a2c:	a1 96       	adiw	r28, 0x21	; 33
    8a2e:	2e ad       	ldd	r18, Y+62	; 0x3e
    8a30:	3f ad       	ldd	r19, Y+63	; 0x3f
    8a32:	a1 97       	sbiw	r28, 0x21	; 33
    8a34:	24 15       	cp	r18, r4
    8a36:	35 05       	cpc	r19, r5
    8a38:	24 f4       	brge	.+8      	; 0x8a42 <_printf_fn+0x328>
    8a3a:	a1 96       	adiw	r28, 0x21	; 33
    8a3c:	5f ae       	std	Y+63, r5	; 0x3f
    8a3e:	4e ae       	std	Y+62, r4	; 0x3e
    8a40:	a1 97       	sbiw	r28, 0x21	; 33
    8a42:	29 2d       	mov	r18, r9
    8a44:	23 72       	andi	r18, 0x23	; 35
    8a46:	23 32       	cpi	r18, 0x23	; 35
    8a48:	59 f4       	brne	.+22     	; 0x8a60 <_printf_fn+0x346>
    8a4a:	a1 96       	adiw	r28, 0x21	; 33
    8a4c:	4e ad       	ldd	r20, Y+62	; 0x3e
    8a4e:	5f ad       	ldd	r21, Y+63	; 0x3f
    8a50:	a1 97       	sbiw	r28, 0x21	; 33
    8a52:	44 15       	cp	r20, r4
    8a54:	55 05       	cpc	r21, r5
    8a56:	24 f4       	brge	.+8      	; 0x8a60 <_printf_fn+0x346>
    8a58:	a1 96       	adiw	r28, 0x21	; 33
    8a5a:	5f ae       	std	Y+63, r5	; 0x3f
    8a5c:	4e ae       	std	Y+62, r4	; 0x3e
    8a5e:	a1 97       	sbiw	r28, 0x21	; 33
    8a60:	e8 94       	clt
    8a62:	94 f8       	bld	r9, 4
    8a64:	e8 94       	clt
    8a66:	92 f8       	bld	r9, 2
    8a68:	e8 94       	clt
    8a6a:	96 f8       	bld	r9, 6
    8a6c:	6f 96       	adiw	r28, 0x1f	; 31
    8a6e:	ae ad       	ldd	r26, Y+62	; 0x3e
    8a70:	bf ad       	ldd	r27, Y+63	; 0x3f
    8a72:	6f 97       	sbiw	r28, 0x1f	; 31
    8a74:	12 97       	sbiw	r26, 0x02	; 2
    8a76:	29 f5       	brne	.+74     	; 0x8ac2 <_printf_fn+0x3a8>
    8a78:	51 01       	movw	r10, r2
    8a7a:	b2 e0       	ldi	r27, 0x02	; 2
    8a7c:	ab 0e       	add	r10, r27
    8a7e:	b1 1c       	adc	r11, r1
    8a80:	f1 01       	movw	r30, r2
    8a82:	80 81       	ld	r24, Z
    8a84:	91 81       	ldd	r25, Z+1	; 0x01
    8a86:	65 96       	adiw	r28, 0x15	; 21
    8a88:	9f af       	std	Y+63, r25	; 0x3f
    8a8a:	8e af       	std	Y+62, r24	; 0x3e
    8a8c:	65 97       	sbiw	r28, 0x15	; 21
    8a8e:	a3 96       	adiw	r28, 0x23	; 35
    8a90:	2e ad       	ldd	r18, Y+62	; 0x3e
    8a92:	3f ad       	ldd	r19, Y+63	; 0x3f
    8a94:	a3 97       	sbiw	r28, 0x23	; 35
    8a96:	24 34       	cpi	r18, 0x44	; 68
    8a98:	31 05       	cpc	r19, r1
    8a9a:	09 f0       	breq	.+2      	; 0x8a9e <_printf_fn+0x384>
    8a9c:	b8 c0       	rjmp	.+368    	; 0x8c0e <_printf_fn+0x4f4>
    8a9e:	97 ff       	sbrs	r25, 7
    8aa0:	b0 c0       	rjmp	.+352    	; 0x8c02 <_printf_fn+0x4e8>
    8aa2:	68 94       	set
    8aa4:	96 f8       	bld	r9, 6
    8aa6:	91 95       	neg	r25
    8aa8:	81 95       	neg	r24
    8aaa:	91 09       	sbc	r25, r1
    8aac:	65 96       	adiw	r28, 0x15	; 21
    8aae:	9f af       	std	Y+63, r25	; 0x3f
    8ab0:	8e af       	std	Y+62, r24	; 0x3e
    8ab2:	65 97       	sbiw	r28, 0x15	; 21
    8ab4:	42 e0       	ldi	r20, 0x02	; 2
    8ab6:	50 e0       	ldi	r21, 0x00	; 0
    8ab8:	6f 96       	adiw	r28, 0x1f	; 31
    8aba:	5f af       	std	Y+63, r21	; 0x3f
    8abc:	4e af       	std	Y+62, r20	; 0x3e
    8abe:	6f 97       	sbiw	r28, 0x1f	; 31
    8ac0:	a6 c0       	rjmp	.+332    	; 0x8c0e <_printf_fn+0x4f4>
    8ac2:	6f 96       	adiw	r28, 0x1f	; 31
    8ac4:	ae ad       	ldd	r26, Y+62	; 0x3e
    8ac6:	bf ad       	ldd	r27, Y+63	; 0x3f
    8ac8:	6f 97       	sbiw	r28, 0x1f	; 31
    8aca:	14 97       	sbiw	r26, 0x04	; 4
    8acc:	59 f5       	brne	.+86     	; 0x8b24 <_printf_fn+0x40a>
    8ace:	51 01       	movw	r10, r2
    8ad0:	b4 e0       	ldi	r27, 0x04	; 4
    8ad2:	ab 0e       	add	r10, r27
    8ad4:	b1 1c       	adc	r11, r1
    8ad6:	f1 01       	movw	r30, r2
    8ad8:	80 81       	ld	r24, Z
    8ada:	91 81       	ldd	r25, Z+1	; 0x01
    8adc:	a2 81       	ldd	r26, Z+2	; 0x02
    8ade:	b3 81       	ldd	r27, Z+3	; 0x03
    8ae0:	2f 96       	adiw	r28, 0x0f	; 15
    8ae2:	8c af       	std	Y+60, r24	; 0x3c
    8ae4:	9d af       	std	Y+61, r25	; 0x3d
    8ae6:	ae af       	std	Y+62, r26	; 0x3e
    8ae8:	bf af       	std	Y+63, r27	; 0x3f
    8aea:	2f 97       	sbiw	r28, 0x0f	; 15
    8aec:	a3 96       	adiw	r28, 0x23	; 35
    8aee:	2e ad       	ldd	r18, Y+62	; 0x3e
    8af0:	3f ad       	ldd	r19, Y+63	; 0x3f
    8af2:	a3 97       	sbiw	r28, 0x23	; 35
    8af4:	24 34       	cpi	r18, 0x44	; 68
    8af6:	31 05       	cpc	r19, r1
    8af8:	09 f0       	breq	.+2      	; 0x8afc <_printf_fn+0x3e2>
    8afa:	96 c0       	rjmp	.+300    	; 0x8c28 <_printf_fn+0x50e>
    8afc:	b7 ff       	sbrs	r27, 7
    8afe:	8e c0       	rjmp	.+284    	; 0x8c1c <_printf_fn+0x502>
    8b00:	68 94       	set
    8b02:	96 f8       	bld	r9, 6
    8b04:	b0 95       	com	r27
    8b06:	a0 95       	com	r26
    8b08:	90 95       	com	r25
    8b0a:	81 95       	neg	r24
    8b0c:	9f 4f       	sbci	r25, 0xFF	; 255
    8b0e:	af 4f       	sbci	r26, 0xFF	; 255
    8b10:	bf 4f       	sbci	r27, 0xFF	; 255
    8b12:	2f 96       	adiw	r28, 0x0f	; 15
    8b14:	8c af       	std	Y+60, r24	; 0x3c
    8b16:	9d af       	std	Y+61, r25	; 0x3d
    8b18:	ae af       	std	Y+62, r26	; 0x3e
    8b1a:	bf af       	std	Y+63, r27	; 0x3f
    8b1c:	2f 97       	sbiw	r28, 0x0f	; 15
    8b1e:	7e c0       	rjmp	.+252    	; 0x8c1c <_printf_fn+0x502>
    8b20:	81 e0       	ldi	r24, 0x01	; 1
    8b22:	90 e0       	ldi	r25, 0x00	; 0
    8b24:	6f 96       	adiw	r28, 0x1f	; 31
    8b26:	ae ad       	ldd	r26, Y+62	; 0x3e
    8b28:	bf ad       	ldd	r27, Y+63	; 0x3f
    8b2a:	6f 97       	sbiw	r28, 0x1f	; 31
    8b2c:	51 01       	movw	r10, r2
    8b2e:	18 97       	sbiw	r26, 0x08	; 8
    8b30:	09 f0       	breq	.+2      	; 0x8b34 <_printf_fn+0x41a>
    8b32:	81 c0       	rjmp	.+258    	; 0x8c36 <_printf_fn+0x51c>
    8b34:	b8 e0       	ldi	r27, 0x08	; 8
    8b36:	ab 0e       	add	r10, r27
    8b38:	b1 1c       	adc	r11, r1
    8b3a:	f1 01       	movw	r30, r2
    8b3c:	f0 81       	ld	r31, Z
    8b3e:	aa 96       	adiw	r28, 0x2a	; 42
    8b40:	ff af       	std	Y+63, r31	; 0x3f
    8b42:	aa 97       	sbiw	r28, 0x2a	; 42
    8b44:	f1 01       	movw	r30, r2
    8b46:	f1 80       	ldd	r15, Z+1	; 0x01
    8b48:	02 81       	ldd	r16, Z+2	; 0x02
    8b4a:	13 81       	ldd	r17, Z+3	; 0x03
    8b4c:	b4 81       	ldd	r27, Z+4	; 0x04
    8b4e:	f5 81       	ldd	r31, Z+5	; 0x05
    8b50:	ab 96       	adiw	r28, 0x2b	; 43
    8b52:	ff af       	std	Y+63, r31	; 0x3f
    8b54:	ab 97       	sbiw	r28, 0x2b	; 43
    8b56:	f1 01       	movw	r30, r2
    8b58:	f6 81       	ldd	r31, Z+6	; 0x06
    8b5a:	ac 96       	adiw	r28, 0x2c	; 44
    8b5c:	ff af       	std	Y+63, r31	; 0x3f
    8b5e:	ac 97       	sbiw	r28, 0x2c	; 44
    8b60:	f1 01       	movw	r30, r2
    8b62:	37 80       	ldd	r3, Z+7	; 0x07
    8b64:	aa 96       	adiw	r28, 0x2a	; 42
    8b66:	ff ad       	ldd	r31, Y+63	; 0x3f
    8b68:	aa 97       	sbiw	r28, 0x2a	; 42
    8b6a:	24 96       	adiw	r28, 0x04	; 4
    8b6c:	ff af       	std	Y+63, r31	; 0x3f
    8b6e:	24 97       	sbiw	r28, 0x04	; 4
    8b70:	25 96       	adiw	r28, 0x05	; 5
    8b72:	ff ae       	std	Y+63, r15	; 0x3f
    8b74:	25 97       	sbiw	r28, 0x05	; 5
    8b76:	26 96       	adiw	r28, 0x06	; 6
    8b78:	0f af       	std	Y+63, r16	; 0x3f
    8b7a:	26 97       	sbiw	r28, 0x06	; 6
    8b7c:	27 96       	adiw	r28, 0x07	; 7
    8b7e:	1f af       	std	Y+63, r17	; 0x3f
    8b80:	27 97       	sbiw	r28, 0x07	; 7
    8b82:	28 96       	adiw	r28, 0x08	; 8
    8b84:	bf af       	std	Y+63, r27	; 0x3f
    8b86:	28 97       	sbiw	r28, 0x08	; 8
    8b88:	ab 96       	adiw	r28, 0x2b	; 43
    8b8a:	ef ad       	ldd	r30, Y+63	; 0x3f
    8b8c:	ab 97       	sbiw	r28, 0x2b	; 43
    8b8e:	29 96       	adiw	r28, 0x09	; 9
    8b90:	ef af       	std	Y+63, r30	; 0x3f
    8b92:	29 97       	sbiw	r28, 0x09	; 9
    8b94:	ac 96       	adiw	r28, 0x2c	; 44
    8b96:	ff ad       	ldd	r31, Y+63	; 0x3f
    8b98:	ac 97       	sbiw	r28, 0x2c	; 44
    8b9a:	2a 96       	adiw	r28, 0x0a	; 10
    8b9c:	ff af       	std	Y+63, r31	; 0x3f
    8b9e:	2a 97       	sbiw	r28, 0x0a	; 10
    8ba0:	2b 96       	adiw	r28, 0x0b	; 11
    8ba2:	3f ae       	std	Y+63, r3	; 0x3f
    8ba4:	2b 97       	sbiw	r28, 0x0b	; 11
    8ba6:	89 2b       	or	r24, r25
    8ba8:	09 f4       	brne	.+2      	; 0x8bac <_printf_fn+0x492>
    8baa:	50 c0       	rjmp	.+160    	; 0x8c4c <_printf_fn+0x532>
    8bac:	aa 96       	adiw	r28, 0x2a	; 42
    8bae:	2f ad       	ldd	r18, Y+63	; 0x3f
    8bb0:	aa 97       	sbiw	r28, 0x2a	; 42
    8bb2:	3f 2d       	mov	r19, r15
    8bb4:	a8 01       	movw	r20, r16
    8bb6:	6b 2f       	mov	r22, r27
    8bb8:	7e 2f       	mov	r23, r30
    8bba:	8f 2f       	mov	r24, r31
    8bbc:	93 2d       	mov	r25, r3
    8bbe:	a0 e0       	ldi	r26, 0x00	; 0
    8bc0:	0e 94 57 e5 	call	0x1caae	; 0x1caae <__cmpdi2_s8>
    8bc4:	0c f0       	brlt	.+2      	; 0x8bc8 <_printf_fn+0x4ae>
    8bc6:	42 c0       	rjmp	.+132    	; 0x8c4c <_printf_fn+0x532>
    8bc8:	68 94       	set
    8bca:	96 f8       	bld	r9, 6
    8bcc:	0e 94 09 e5 	call	0x1ca12	; 0x1ca12 <__negdi2>
    8bd0:	24 96       	adiw	r28, 0x04	; 4
    8bd2:	2f af       	std	Y+63, r18	; 0x3f
    8bd4:	24 97       	sbiw	r28, 0x04	; 4
    8bd6:	25 96       	adiw	r28, 0x05	; 5
    8bd8:	3f af       	std	Y+63, r19	; 0x3f
    8bda:	25 97       	sbiw	r28, 0x05	; 5
    8bdc:	26 96       	adiw	r28, 0x06	; 6
    8bde:	4f af       	std	Y+63, r20	; 0x3f
    8be0:	26 97       	sbiw	r28, 0x06	; 6
    8be2:	27 96       	adiw	r28, 0x07	; 7
    8be4:	5f af       	std	Y+63, r21	; 0x3f
    8be6:	27 97       	sbiw	r28, 0x07	; 7
    8be8:	28 96       	adiw	r28, 0x08	; 8
    8bea:	6f af       	std	Y+63, r22	; 0x3f
    8bec:	28 97       	sbiw	r28, 0x08	; 8
    8bee:	29 96       	adiw	r28, 0x09	; 9
    8bf0:	7f af       	std	Y+63, r23	; 0x3f
    8bf2:	29 97       	sbiw	r28, 0x09	; 9
    8bf4:	2a 96       	adiw	r28, 0x0a	; 10
    8bf6:	8f af       	std	Y+63, r24	; 0x3f
    8bf8:	2a 97       	sbiw	r28, 0x0a	; 10
    8bfa:	2b 96       	adiw	r28, 0x0b	; 11
    8bfc:	9f af       	std	Y+63, r25	; 0x3f
    8bfe:	2b 97       	sbiw	r28, 0x0b	; 11
    8c00:	25 c0       	rjmp	.+74     	; 0x8c4c <_printf_fn+0x532>
    8c02:	22 e0       	ldi	r18, 0x02	; 2
    8c04:	30 e0       	ldi	r19, 0x00	; 0
    8c06:	6f 96       	adiw	r28, 0x1f	; 31
    8c08:	3f af       	std	Y+63, r19	; 0x3f
    8c0a:	2e af       	std	Y+62, r18	; 0x3e
    8c0c:	6f 97       	sbiw	r28, 0x1f	; 31
    8c0e:	6c 96       	adiw	r28, 0x1c	; 28
    8c10:	8f ad       	ldd	r24, Y+63	; 0x3f
    8c12:	6c 97       	sbiw	r28, 0x1c	; 28
    8c14:	6d 96       	adiw	r28, 0x1d	; 29
    8c16:	9f ad       	ldd	r25, Y+63	; 0x3f
    8c18:	6d 97       	sbiw	r28, 0x1d	; 29
    8c1a:	1e c0       	rjmp	.+60     	; 0x8c58 <_printf_fn+0x53e>
    8c1c:	44 e0       	ldi	r20, 0x04	; 4
    8c1e:	50 e0       	ldi	r21, 0x00	; 0
    8c20:	6f 96       	adiw	r28, 0x1f	; 31
    8c22:	5f af       	std	Y+63, r21	; 0x3f
    8c24:	4e af       	std	Y+62, r20	; 0x3e
    8c26:	6f 97       	sbiw	r28, 0x1f	; 31
    8c28:	6a 96       	adiw	r28, 0x1a	; 26
    8c2a:	8f ad       	ldd	r24, Y+63	; 0x3f
    8c2c:	6a 97       	sbiw	r28, 0x1a	; 26
    8c2e:	6b 96       	adiw	r28, 0x1b	; 27
    8c30:	9f ad       	ldd	r25, Y+63	; 0x3f
    8c32:	6b 97       	sbiw	r28, 0x1b	; 27
    8c34:	11 c0       	rjmp	.+34     	; 0x8c58 <_printf_fn+0x53e>
    8c36:	66 96       	adiw	r28, 0x16	; 22
    8c38:	8f ad       	ldd	r24, Y+63	; 0x3f
    8c3a:	66 97       	sbiw	r28, 0x16	; 22
    8c3c:	67 96       	adiw	r28, 0x17	; 23
    8c3e:	9f ad       	ldd	r25, Y+63	; 0x3f
    8c40:	67 97       	sbiw	r28, 0x17	; 23
    8c42:	a3 96       	adiw	r28, 0x23	; 35
    8c44:	1f ae       	std	Y+63, r1	; 0x3f
    8c46:	1e ae       	std	Y+62, r1	; 0x3e
    8c48:	a3 97       	sbiw	r28, 0x23	; 35
    8c4a:	06 c0       	rjmp	.+12     	; 0x8c58 <_printf_fn+0x53e>
    8c4c:	68 96       	adiw	r28, 0x18	; 24
    8c4e:	8f ad       	ldd	r24, Y+63	; 0x3f
    8c50:	68 97       	sbiw	r28, 0x18	; 24
    8c52:	69 96       	adiw	r28, 0x19	; 25
    8c54:	9f ad       	ldd	r25, Y+63	; 0x3f
    8c56:	69 97       	sbiw	r28, 0x19	; 25
    8c58:	5f ef       	ldi	r21, 0xFF	; 255
    8c5a:	65 1a       	sub	r6, r21
    8c5c:	75 0a       	sbc	r7, r21
    8c5e:	85 0a       	sbc	r8, r21
    8c60:	15 01       	movw	r2, r10
    8c62:	2d c0       	rjmp	.+90     	; 0x8cbe <_printf_fn+0x5a4>
    8c64:	91 fc       	sbrc	r9, 1
    8c66:	08 c0       	rjmp	.+16     	; 0x8c78 <_printf_fn+0x55e>
    8c68:	68 94       	set
    8c6a:	91 f8       	bld	r9, 1
    8c6c:	86 e0       	ldi	r24, 0x06	; 6
    8c6e:	90 e0       	ldi	r25, 0x00	; 0
    8c70:	a1 96       	adiw	r28, 0x21	; 33
    8c72:	9f af       	std	Y+63, r25	; 0x3f
    8c74:	8e af       	std	Y+62, r24	; 0x3e
    8c76:	a1 97       	sbiw	r28, 0x21	; 33
    8c78:	d1 01       	movw	r26, r2
    8c7a:	2d 91       	ld	r18, X+
    8c7c:	3d 91       	ld	r19, X+
    8c7e:	4d 91       	ld	r20, X+
    8c80:	5c 91       	ld	r21, X
    8c82:	a9 96       	adiw	r28, 0x29	; 41
    8c84:	2c af       	std	Y+60, r18	; 0x3c
    8c86:	3d af       	std	Y+61, r19	; 0x3d
    8c88:	4e af       	std	Y+62, r20	; 0x3e
    8c8a:	5f af       	std	Y+63, r21	; 0x3f
    8c8c:	a9 97       	sbiw	r28, 0x29	; 41
    8c8e:	bf ef       	ldi	r27, 0xFF	; 255
    8c90:	6b 1a       	sub	r6, r27
    8c92:	7b 0a       	sbc	r7, r27
    8c94:	8b 0a       	sbc	r8, r27
    8c96:	f1 01       	movw	r30, r2
    8c98:	34 96       	adiw	r30, 0x04	; 4
    8c9a:	1f 01       	movw	r2, r30
    8c9c:	0a c0       	rjmp	.+20     	; 0x8cb2 <_printf_fn+0x598>
    8c9e:	ff ef       	ldi	r31, 0xFF	; 255
    8ca0:	6f 1a       	sub	r6, r31
    8ca2:	7f 0a       	sbc	r7, r31
    8ca4:	8f 0a       	sbc	r8, r31
    8ca6:	b0 c0       	rjmp	.+352    	; 0x8e08 <_printf_fn+0x6ee>
    8ca8:	2f ef       	ldi	r18, 0xFF	; 255
    8caa:	62 1a       	sub	r6, r18
    8cac:	72 0a       	sbc	r7, r18
    8cae:	82 0a       	sbc	r8, r18
    8cb0:	b8 c0       	rjmp	.+368    	; 0x8e22 <_printf_fn+0x708>
    8cb2:	66 96       	adiw	r28, 0x16	; 22
    8cb4:	8f ad       	ldd	r24, Y+63	; 0x3f
    8cb6:	66 97       	sbiw	r28, 0x16	; 22
    8cb8:	67 96       	adiw	r28, 0x17	; 23
    8cba:	9f ad       	ldd	r25, Y+63	; 0x3f
    8cbc:	67 97       	sbiw	r28, 0x17	; 23
    8cbe:	a3 96       	adiw	r28, 0x23	; 35
    8cc0:	ee ad       	ldd	r30, Y+62	; 0x3e
    8cc2:	ff ad       	ldd	r31, Y+63	; 0x3f
    8cc4:	a3 97       	sbiw	r28, 0x23	; 35
    8cc6:	e2 54       	subi	r30, 0x42	; 66
    8cc8:	f1 09       	sbc	r31, r1
    8cca:	e7 33       	cpi	r30, 0x37	; 55
    8ccc:	f1 05       	cpc	r31, r1
    8cce:	08 f0       	brcs	.+2      	; 0x8cd2 <_printf_fn+0x5b8>
    8cd0:	f9 c0       	rjmp	.+498    	; 0x8ec4 <_printf_fn+0x7aa>
    8cd2:	e3 58       	subi	r30, 0x83	; 131
    8cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    8cd6:	0c 94 d5 e4 	jmp	0x1c9aa	; 0x1c9aa <__tablejump2__>
    8cda:	e8 94       	clt
    8cdc:	94 f8       	bld	r9, 4
    8cde:	e8 94       	clt
    8ce0:	92 f8       	bld	r9, 2
    8ce2:	a9 2c       	mov	r10, r9
    8ce4:	b1 2c       	mov	r11, r1
    8ce6:	a1 96       	adiw	r28, 0x21	; 33
    8ce8:	ce ac       	ldd	r12, Y+62	; 0x3e
    8cea:	df ac       	ldd	r13, Y+63	; 0x3f
    8cec:	a1 97       	sbiw	r28, 0x21	; 33
    8cee:	72 01       	movw	r14, r4
    8cf0:	0a e0       	ldi	r16, 0x0A	; 10
    8cf2:	10 e0       	ldi	r17, 0x00	; 0
    8cf4:	13 c0       	rjmp	.+38     	; 0x8d1c <_printf_fn+0x602>
    8cf6:	a9 2c       	mov	r10, r9
    8cf8:	b1 2c       	mov	r11, r1
    8cfa:	a1 96       	adiw	r28, 0x21	; 33
    8cfc:	ce ac       	ldd	r12, Y+62	; 0x3e
    8cfe:	df ac       	ldd	r13, Y+63	; 0x3f
    8d00:	a1 97       	sbiw	r28, 0x21	; 33
    8d02:	72 01       	movw	r14, r4
    8d04:	02 e0       	ldi	r16, 0x02	; 2
    8d06:	10 e0       	ldi	r17, 0x00	; 0
    8d08:	09 c0       	rjmp	.+18     	; 0x8d1c <_printf_fn+0x602>
    8d0a:	a9 2c       	mov	r10, r9
    8d0c:	b1 2c       	mov	r11, r1
    8d0e:	a1 96       	adiw	r28, 0x21	; 33
    8d10:	ce ac       	ldd	r12, Y+62	; 0x3e
    8d12:	df ac       	ldd	r13, Y+63	; 0x3f
    8d14:	a1 97       	sbiw	r28, 0x21	; 33
    8d16:	72 01       	movw	r14, r4
    8d18:	08 e0       	ldi	r16, 0x08	; 8
    8d1a:	10 e0       	ldi	r17, 0x00	; 0
    8d1c:	22 e4       	ldi	r18, 0x42	; 66
    8d1e:	30 e0       	ldi	r19, 0x00	; 0
    8d20:	ae 01       	movw	r20, r28
    8d22:	4f 5f       	subi	r20, 0xFF	; 255
    8d24:	5f 4f       	sbci	r21, 0xFF	; 255
    8d26:	6f 96       	adiw	r28, 0x1f	; 31
    8d28:	6e ad       	ldd	r22, Y+62	; 0x3e
    8d2a:	7f ad       	ldd	r23, Y+63	; 0x3f
    8d2c:	6f 97       	sbiw	r28, 0x1f	; 31
    8d2e:	fb d9       	rcall	.-3082   	; 0x8126 <p_ntoa>
    8d30:	30 c0       	rjmp	.+96     	; 0x8d92 <_printf_fn+0x678>
    8d32:	a9 2c       	mov	r10, r9
    8d34:	b1 2c       	mov	r11, r1
    8d36:	a1 96       	adiw	r28, 0x21	; 33
    8d38:	ce ac       	ldd	r12, Y+62	; 0x3e
    8d3a:	df ac       	ldd	r13, Y+63	; 0x3f
    8d3c:	a1 97       	sbiw	r28, 0x21	; 33
    8d3e:	72 01       	movw	r14, r4
    8d40:	00 e1       	ldi	r16, 0x10	; 16
    8d42:	10 e0       	ldi	r17, 0x00	; 0
    8d44:	22 e4       	ldi	r18, 0x42	; 66
    8d46:	30 e0       	ldi	r19, 0x00	; 0
    8d48:	ae 01       	movw	r20, r28
    8d4a:	4f 5f       	subi	r20, 0xFF	; 255
    8d4c:	5f 4f       	sbci	r21, 0xFF	; 255
    8d4e:	6f 96       	adiw	r28, 0x1f	; 31
    8d50:	6e ad       	ldd	r22, Y+62	; 0x3e
    8d52:	7f ad       	ldd	r23, Y+63	; 0x3f
    8d54:	6f 97       	sbiw	r28, 0x1f	; 31
    8d56:	e7 d9       	rcall	.-3122   	; 0x8126 <p_ntoa>
    8d58:	7c 01       	movw	r14, r24
    8d5a:	a3 96       	adiw	r28, 0x23	; 35
    8d5c:	6e ad       	ldd	r22, Y+62	; 0x3e
    8d5e:	7f ad       	ldd	r23, Y+63	; 0x3f
    8d60:	a3 97       	sbiw	r28, 0x23	; 35
    8d62:	67 7f       	andi	r22, 0xF7	; 247
    8d64:	60 35       	cpi	r22, 0x50	; 80
    8d66:	71 05       	cpc	r23, r1
    8d68:	c9 f5       	brne	.+114    	; 0x8ddc <_printf_fn+0x6c2>
    8d6a:	34 c0       	rjmp	.+104    	; 0x8dd4 <_printf_fn+0x6ba>
    8d6c:	c9 2c       	mov	r12, r9
    8d6e:	d1 2c       	mov	r13, r1
    8d70:	a1 96       	adiw	r28, 0x21	; 33
    8d72:	ee ac       	ldd	r14, Y+62	; 0x3e
    8d74:	ff ac       	ldd	r15, Y+63	; 0x3f
    8d76:	a1 97       	sbiw	r28, 0x21	; 33
    8d78:	82 01       	movw	r16, r4
    8d7a:	22 e4       	ldi	r18, 0x42	; 66
    8d7c:	30 e0       	ldi	r19, 0x00	; 0
    8d7e:	ae 01       	movw	r20, r28
    8d80:	4f 5f       	subi	r20, 0xFF	; 255
    8d82:	5f 4f       	sbci	r21, 0xFF	; 255
    8d84:	a9 96       	adiw	r28, 0x29	; 41
    8d86:	6c ad       	ldd	r22, Y+60	; 0x3c
    8d88:	7d ad       	ldd	r23, Y+61	; 0x3d
    8d8a:	8e ad       	ldd	r24, Y+62	; 0x3e
    8d8c:	9f ad       	ldd	r25, Y+63	; 0x3f
    8d8e:	a9 97       	sbiw	r28, 0x29	; 41
    8d90:	1f da       	rcall	.-3010   	; 0x81d0 <p_ftoa>
    8d92:	93 fa       	bst	r9, 3
    8d94:	00 27       	eor	r16, r16
    8d96:	00 f9       	bld	r16, 0
    8d98:	10 e0       	ldi	r17, 0x00	; 0
    8d9a:	9c 01       	movw	r18, r24
    8d9c:	24 c0       	rjmp	.+72     	; 0x8de6 <_printf_fn+0x6cc>
    8d9e:	c9 2c       	mov	r12, r9
    8da0:	d1 2c       	mov	r13, r1
    8da2:	a1 96       	adiw	r28, 0x21	; 33
    8da4:	ee ac       	ldd	r14, Y+62	; 0x3e
    8da6:	ff ac       	ldd	r15, Y+63	; 0x3f
    8da8:	a1 97       	sbiw	r28, 0x21	; 33
    8daa:	82 01       	movw	r16, r4
    8dac:	22 e4       	ldi	r18, 0x42	; 66
    8dae:	30 e0       	ldi	r19, 0x00	; 0
    8db0:	ae 01       	movw	r20, r28
    8db2:	4f 5f       	subi	r20, 0xFF	; 255
    8db4:	5f 4f       	sbci	r21, 0xFF	; 255
    8db6:	a9 96       	adiw	r28, 0x29	; 41
    8db8:	6c ad       	ldd	r22, Y+60	; 0x3c
    8dba:	7d ad       	ldd	r23, Y+61	; 0x3d
    8dbc:	8e ad       	ldd	r24, Y+62	; 0x3e
    8dbe:	9f ad       	ldd	r25, Y+63	; 0x3f
    8dc0:	a9 97       	sbiw	r28, 0x29	; 41
    8dc2:	0d db       	rcall	.-2534   	; 0x83de <p_etoa>
    8dc4:	7c 01       	movw	r14, r24
    8dc6:	a3 96       	adiw	r28, 0x23	; 35
    8dc8:	4e ad       	ldd	r20, Y+62	; 0x3e
    8dca:	5f ad       	ldd	r21, Y+63	; 0x3f
    8dcc:	a3 97       	sbiw	r28, 0x23	; 35
    8dce:	45 34       	cpi	r20, 0x45	; 69
    8dd0:	51 05       	cpc	r21, r1
    8dd2:	21 f4       	brne	.+8      	; 0x8ddc <_printf_fn+0x6c2>
    8dd4:	ce 01       	movw	r24, r28
    8dd6:	01 96       	adiw	r24, 0x01	; 1
    8dd8:	0e 94 32 33 	call	0x6664	; 0x6664 <strupper>
    8ddc:	93 fa       	bst	r9, 3
    8dde:	00 27       	eor	r16, r16
    8de0:	00 f9       	bld	r16, 0
    8de2:	10 e0       	ldi	r17, 0x00	; 0
    8de4:	97 01       	movw	r18, r14
    8de6:	a2 01       	movw	r20, r4
    8de8:	be 01       	movw	r22, r28
    8dea:	6f 5f       	subi	r22, 0xFF	; 255
    8dec:	7f 4f       	sbci	r23, 0xFF	; 255
    8dee:	a5 96       	adiw	r28, 0x25	; 37
    8df0:	8e ad       	ldd	r24, Y+62	; 0x3e
    8df2:	9f ad       	ldd	r25, Y+63	; 0x3f
    8df4:	a5 97       	sbiw	r28, 0x25	; 37
    8df6:	4f dc       	rcall	.-1890   	; 0x8696 <_puts_pad>
    8df8:	69 c0       	rjmp	.+210    	; 0x8ecc <_printf_fn+0x7b2>
    8dfa:	a3 96       	adiw	r28, 0x23	; 35
    8dfc:	8e ad       	ldd	r24, Y+62	; 0x3e
    8dfe:	9f ad       	ldd	r25, Y+63	; 0x3f
    8e00:	a3 97       	sbiw	r28, 0x23	; 35
    8e02:	83 37       	cpi	r24, 0x73	; 115
    8e04:	91 05       	cpc	r25, r1
    8e06:	69 f4       	brne	.+26     	; 0x8e22 <_printf_fn+0x708>
    8e08:	71 01       	movw	r14, r2
    8e0a:	92 e0       	ldi	r25, 0x02	; 2
    8e0c:	e9 0e       	add	r14, r25
    8e0e:	f1 1c       	adc	r15, r1
    8e10:	d1 01       	movw	r26, r2
    8e12:	6d 91       	ld	r22, X+
    8e14:	7c 91       	ld	r23, X
    8e16:	61 15       	cp	r22, r1
    8e18:	71 05       	cpc	r23, r1
    8e1a:	91 f4       	brne	.+36     	; 0x8e40 <_printf_fn+0x726>
    8e1c:	68 e3       	ldi	r22, 0x38	; 56
    8e1e:	73 e0       	ldi	r23, 0x03	; 3
    8e20:	0f c0       	rjmp	.+30     	; 0x8e40 <_printf_fn+0x726>
    8e22:	71 01       	movw	r14, r2
    8e24:	b2 e0       	ldi	r27, 0x02	; 2
    8e26:	eb 0e       	add	r14, r27
    8e28:	f1 1c       	adc	r15, r1
    8e2a:	f1 01       	movw	r30, r2
    8e2c:	80 81       	ld	r24, Z
    8e2e:	60 96       	adiw	r28, 0x10	; 16
    8e30:	8f af       	std	Y+63, r24	; 0x3f
    8e32:	60 97       	sbiw	r28, 0x10	; 16
    8e34:	61 96       	adiw	r28, 0x11	; 17
    8e36:	1f ae       	std	Y+63, r1	; 0x3f
    8e38:	61 97       	sbiw	r28, 0x11	; 17
    8e3a:	be 01       	movw	r22, r28
    8e3c:	61 5b       	subi	r22, 0xB1	; 177
    8e3e:	7f 4f       	sbci	r23, 0xFF	; 255
    8e40:	fb 01       	movw	r30, r22
    8e42:	01 90       	ld	r0, Z+
    8e44:	00 20       	and	r0, r0
    8e46:	e9 f7       	brne	.-6      	; 0x8e42 <_printf_fn+0x728>
    8e48:	31 97       	sbiw	r30, 0x01	; 1
    8e4a:	e6 1b       	sub	r30, r22
    8e4c:	f7 0b       	sbc	r31, r23
    8e4e:	a1 96       	adiw	r28, 0x21	; 33
    8e50:	2e ad       	ldd	r18, Y+62	; 0x3e
    8e52:	3f ad       	ldd	r19, Y+63	; 0x3f
    8e54:	a1 97       	sbiw	r28, 0x21	; 33
    8e56:	23 2b       	or	r18, r19
    8e58:	21 f4       	brne	.+8      	; 0x8e62 <_printf_fn+0x748>
    8e5a:	a1 96       	adiw	r28, 0x21	; 33
    8e5c:	ff af       	std	Y+63, r31	; 0x3f
    8e5e:	ee af       	std	Y+62, r30	; 0x3e
    8e60:	a1 97       	sbiw	r28, 0x21	; 33
    8e62:	a1 96       	adiw	r28, 0x21	; 33
    8e64:	4e ad       	ldd	r20, Y+62	; 0x3e
    8e66:	5f ad       	ldd	r21, Y+63	; 0x3f
    8e68:	a1 97       	sbiw	r28, 0x21	; 33
    8e6a:	44 16       	cp	r4, r20
    8e6c:	55 06       	cpc	r5, r21
    8e6e:	3c f4       	brge	.+14     	; 0x8e7e <_printf_fn+0x764>
    8e70:	41 14       	cp	r4, r1
    8e72:	51 04       	cpc	r5, r1
    8e74:	21 f0       	breq	.+8      	; 0x8e7e <_printf_fn+0x764>
    8e76:	a1 96       	adiw	r28, 0x21	; 33
    8e78:	5f ae       	std	Y+63, r5	; 0x3f
    8e7a:	4e ae       	std	Y+62, r4	; 0x3e
    8e7c:	a1 97       	sbiw	r28, 0x21	; 33
    8e7e:	93 fa       	bst	r9, 3
    8e80:	00 27       	eor	r16, r16
    8e82:	00 f9       	bld	r16, 0
    8e84:	10 e0       	ldi	r17, 0x00	; 0
    8e86:	a1 96       	adiw	r28, 0x21	; 33
    8e88:	2e ad       	ldd	r18, Y+62	; 0x3e
    8e8a:	3f ad       	ldd	r19, Y+63	; 0x3f
    8e8c:	a1 97       	sbiw	r28, 0x21	; 33
    8e8e:	a2 01       	movw	r20, r4
    8e90:	a5 96       	adiw	r28, 0x25	; 37
    8e92:	8e ad       	ldd	r24, Y+62	; 0x3e
    8e94:	9f ad       	ldd	r25, Y+63	; 0x3f
    8e96:	a5 97       	sbiw	r28, 0x25	; 37
    8e98:	fe db       	rcall	.-2052   	; 0x8696 <_puts_pad>
    8e9a:	17 01       	movw	r2, r14
    8e9c:	17 c0       	rjmp	.+46     	; 0x8ecc <_printf_fn+0x7b2>
    8e9e:	f6 01       	movw	r30, r12
    8ea0:	5e 2d       	mov	r21, r14
    8ea2:	0e 94 50 e5 	call	0x1caa0	; 0x1caa0 <__xload_1>
    8ea6:	66 23       	and	r22, r22
    8ea8:	89 f0       	breq	.+34     	; 0x8ecc <_printf_fn+0x7b2>
    8eaa:	5f ef       	ldi	r21, 0xFF	; 255
    8eac:	c5 1a       	sub	r12, r21
    8eae:	d5 0a       	sbc	r13, r21
    8eb0:	e5 0a       	sbc	r14, r21
    8eb2:	a5 96       	adiw	r28, 0x25	; 37
    8eb4:	ae ad       	ldd	r26, Y+62	; 0x3e
    8eb6:	bf ad       	ldd	r27, Y+63	; 0x3f
    8eb8:	a5 97       	sbiw	r28, 0x25	; 37
    8eba:	ed 91       	ld	r30, X+
    8ebc:	fc 91       	ld	r31, X
    8ebe:	11 97       	sbiw	r26, 0x01	; 1
    8ec0:	cd 01       	movw	r24, r26
    8ec2:	09 95       	icall
    8ec4:	6c 14       	cp	r6, r12
    8ec6:	7d 04       	cpc	r7, r13
    8ec8:	8e 04       	cpc	r8, r14
    8eca:	48 f7       	brcc	.-46     	; 0x8e9e <_printf_fn+0x784>
    8ecc:	e8 2c       	mov	r14, r8
    8ece:	63 01       	movw	r12, r6
    8ed0:	53 cc       	rjmp	.-1882   	; 0x8778 <_printf_fn+0x5e>
    8ed2:	e2 e0       	ldi	r30, 0x02	; 2
    8ed4:	f0 e0       	ldi	r31, 0x00	; 0
    8ed6:	6f 96       	adiw	r28, 0x1f	; 31
    8ed8:	ff af       	std	Y+63, r31	; 0x3f
    8eda:	ee af       	std	Y+62, r30	; 0x3e
    8edc:	6f 97       	sbiw	r28, 0x1f	; 31
    8ede:	5f cd       	rjmp	.-1346   	; 0x899e <_printf_fn+0x284>
    8ee0:	6f 96       	adiw	r28, 0x1f	; 31
    8ee2:	ee ad       	ldd	r30, Y+62	; 0x3e
    8ee4:	ff ad       	ldd	r31, Y+63	; 0x3f
    8ee6:	6f 97       	sbiw	r28, 0x1f	; 31
    8ee8:	32 97       	sbiw	r30, 0x02	; 2
    8eea:	61 f4       	brne	.+24     	; 0x8f04 <_printf_fn+0x7ea>
    8eec:	51 01       	movw	r10, r2
    8eee:	f2 e0       	ldi	r31, 0x02	; 2
    8ef0:	af 0e       	add	r10, r31
    8ef2:	b1 1c       	adc	r11, r1
    8ef4:	d1 01       	movw	r26, r2
    8ef6:	8d 91       	ld	r24, X+
    8ef8:	9c 91       	ld	r25, X
    8efa:	65 96       	adiw	r28, 0x15	; 21
    8efc:	9f af       	std	Y+63, r25	; 0x3f
    8efe:	8e af       	std	Y+62, r24	; 0x3e
    8f00:	65 97       	sbiw	r28, 0x15	; 21
    8f02:	cd cd       	rjmp	.-1126   	; 0x8a9e <_printf_fn+0x384>
    8f04:	6f 96       	adiw	r28, 0x1f	; 31
    8f06:	2e ad       	ldd	r18, Y+62	; 0x3e
    8f08:	3f ad       	ldd	r19, Y+63	; 0x3f
    8f0a:	6f 97       	sbiw	r28, 0x1f	; 31
    8f0c:	24 30       	cpi	r18, 0x04	; 4
    8f0e:	31 05       	cpc	r19, r1
    8f10:	09 f0       	breq	.+2      	; 0x8f14 <_printf_fn+0x7fa>
    8f12:	06 ce       	rjmp	.-1012   	; 0x8b20 <_printf_fn+0x406>
    8f14:	51 01       	movw	r10, r2
    8f16:	f4 e0       	ldi	r31, 0x04	; 4
    8f18:	af 0e       	add	r10, r31
    8f1a:	b1 1c       	adc	r11, r1
    8f1c:	f1 01       	movw	r30, r2
    8f1e:	80 81       	ld	r24, Z
    8f20:	91 81       	ldd	r25, Z+1	; 0x01
    8f22:	a2 81       	ldd	r26, Z+2	; 0x02
    8f24:	b3 81       	ldd	r27, Z+3	; 0x03
    8f26:	2f 96       	adiw	r28, 0x0f	; 15
    8f28:	8c af       	std	Y+60, r24	; 0x3c
    8f2a:	9d af       	std	Y+61, r25	; 0x3d
    8f2c:	ae af       	std	Y+62, r26	; 0x3e
    8f2e:	bf af       	std	Y+63, r27	; 0x3f
    8f30:	2f 97       	sbiw	r28, 0x0f	; 15
    8f32:	e4 cd       	rjmp	.-1080   	; 0x8afc <_printf_fn+0x3e2>
    8f34:	c5 59       	subi	r28, 0x95	; 149
    8f36:	df 4f       	sbci	r29, 0xFF	; 255
    8f38:	e2 e1       	ldi	r30, 0x12	; 18
    8f3a:	0c 94 35 e5 	jmp	0x1ca6a	; 0x1ca6a <__epilogue_restores__>

00008f3e <vsnprintf_P>:
    8f3e:	a8 e0       	ldi	r26, 0x08	; 8
    8f40:	b0 e0       	ldi	r27, 0x00	; 0
    8f42:	e5 ea       	ldi	r30, 0xA5	; 165
    8f44:	f7 e4       	ldi	r31, 0x47	; 71
    8f46:	0c 94 25 e5 	jmp	0x1ca4a	; 0x1ca4a <__prologue_saves__+0x18>
    8f4a:	7c 01       	movw	r14, r24
    8f4c:	cb 01       	movw	r24, r22
    8f4e:	64 2f       	mov	r22, r20
    8f50:	a9 01       	movw	r20, r18
    8f52:	98 01       	movw	r18, r16
    8f54:	f7 01       	movw	r30, r14
    8f56:	10 82       	st	Z, r1
    8f58:	e4 eb       	ldi	r30, 0xB4	; 180
    8f5a:	ff e3       	ldi	r31, 0x3F	; 63
    8f5c:	fa 83       	std	Y+2, r31	; 0x02
    8f5e:	e9 83       	std	Y+1, r30	; 0x01
    8f60:	9e 83       	std	Y+6, r25	; 0x06
    8f62:	8d 83       	std	Y+5, r24	; 0x05
    8f64:	18 86       	std	Y+8, r1	; 0x08
    8f66:	1f 82       	std	Y+7, r1	; 0x07
    8f68:	fc 82       	std	Y+4, r15	; 0x04
    8f6a:	eb 82       	std	Y+3, r14	; 0x03
    8f6c:	ce 01       	movw	r24, r28
    8f6e:	01 96       	adiw	r24, 0x01	; 1
    8f70:	d4 db       	rcall	.-2136   	; 0x871a <_printf_fn>
    8f72:	f7 01       	movw	r30, r14
    8f74:	01 90       	ld	r0, Z+
    8f76:	00 20       	and	r0, r0
    8f78:	e9 f7       	brne	.-6      	; 0x8f74 <vsnprintf_P+0x36>
    8f7a:	cf 01       	movw	r24, r30
    8f7c:	01 97       	sbiw	r24, 0x01	; 1
    8f7e:	8e 19       	sub	r24, r14
    8f80:	9f 09       	sbc	r25, r15
    8f82:	28 96       	adiw	r28, 0x08	; 8
    8f84:	e6 e0       	ldi	r30, 0x06	; 6
    8f86:	0c 94 41 e5 	jmp	0x1ca82	; 0x1ca82 <__epilogue_restores__+0x18>

00008f8a <snprintf_P>:
    8f8a:	a0 e0       	ldi	r26, 0x00	; 0
    8f8c:	b0 e0       	ldi	r27, 0x00	; 0
    8f8e:	eb ec       	ldi	r30, 0xCB	; 203
    8f90:	f7 e4       	ldi	r31, 0x47	; 71
    8f92:	0c 94 27 e5 	jmp	0x1ca4e	; 0x1ca4e <__prologue_saves__+0x1c>
    8f96:	8e 01       	movw	r16, r28
    8f98:	02 5f       	subi	r16, 0xF2	; 242
    8f9a:	1f 4f       	sbci	r17, 0xFF	; 255
    8f9c:	2b 85       	ldd	r18, Y+11	; 0x0b
    8f9e:	3c 85       	ldd	r19, Y+12	; 0x0c
    8fa0:	4d 85       	ldd	r20, Y+13	; 0x0d
    8fa2:	69 85       	ldd	r22, Y+9	; 0x09
    8fa4:	7a 85       	ldd	r23, Y+10	; 0x0a
    8fa6:	8f 81       	ldd	r24, Y+7	; 0x07
    8fa8:	98 85       	ldd	r25, Y+8	; 0x08
    8faa:	c9 df       	rcall	.-110    	; 0x8f3e <vsnprintf_P>
    8fac:	e4 e0       	ldi	r30, 0x04	; 4
    8fae:	0c 94 43 e5 	jmp	0x1ca86	; 0x1ca86 <__epilogue_restores__+0x1c>

00008fb2 <sprintf_P>:
    8fb2:	a0 e0       	ldi	r26, 0x00	; 0
    8fb4:	b0 e0       	ldi	r27, 0x00	; 0
    8fb6:	ef ed       	ldi	r30, 0xDF	; 223
    8fb8:	f7 e4       	ldi	r31, 0x47	; 71
    8fba:	0c 94 27 e5 	jmp	0x1ca4e	; 0x1ca4e <__prologue_saves__+0x1c>
    8fbe:	8e 01       	movw	r16, r28
    8fc0:	04 5f       	subi	r16, 0xF4	; 244
    8fc2:	1f 4f       	sbci	r17, 0xFF	; 255
    8fc4:	29 85       	ldd	r18, Y+9	; 0x09
    8fc6:	3a 85       	ldd	r19, Y+10	; 0x0a
    8fc8:	4b 85       	ldd	r20, Y+11	; 0x0b
    8fca:	60 e0       	ldi	r22, 0x00	; 0
    8fcc:	74 e0       	ldi	r23, 0x04	; 4
    8fce:	8f 81       	ldd	r24, Y+7	; 0x07
    8fd0:	98 85       	ldd	r25, Y+8	; 0x08
    8fd2:	b5 df       	rcall	.-150    	; 0x8f3e <vsnprintf_P>
    8fd4:	e4 e0       	ldi	r30, 0x04	; 4
    8fd6:	0c 94 43 e5 	jmp	0x1ca86	; 0x1ca86 <__epilogue_restores__+0x1c>

00008fda <printf_P>:
/// @return size of printed string
/// TODO create a devprintf using an array of function prointers ?
MEMSPACE 
int 
printf_P(__memx const char *format, ...)
{
    8fda:	a8 e0       	ldi	r26, 0x08	; 8
    8fdc:	b0 e0       	ldi	r27, 0x00	; 0
    8fde:	e3 ef       	ldi	r30, 0xF3	; 243
    8fe0:	f7 e4       	ldi	r31, 0x47	; 71
    8fe2:	0c 94 29 e5 	jmp	0x1ca52	; 0x1ca52 <__prologue_saves__+0x20>
    8fe6:	9e 01       	movw	r18, r28
    8fe8:	23 5f       	subi	r18, 0xF3	; 243
    8fea:	3f 4f       	sbci	r19, 0xFF	; 255
    8fec:	f9 01       	movw	r30, r18
    8fee:	41 91       	ld	r20, Z+
    8ff0:	51 91       	ld	r21, Z+
    8ff2:	61 91       	ld	r22, Z+
    8ff4:	9f 01       	movw	r18, r30
    printf_t fn;
    va_list va;

    fn.put = _putc_fn;
    8ff6:	8d ec       	ldi	r24, 0xCD	; 205
    8ff8:	9f e3       	ldi	r25, 0x3F	; 63
    8ffa:	9a 83       	std	Y+2, r25	; 0x02
    8ffc:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    8ffe:	18 86       	std	Y+8, r1	; 0x08
    9000:	1f 82       	std	Y+7, r1	; 0x07

    va_start(va, format);
    _printf_fn(&fn, format, va);
    9002:	ce 01       	movw	r24, r28
    9004:	01 96       	adiw	r24, 0x01	; 1
    9006:	89 db       	rcall	.-2286   	; 0x871a <_printf_fn>
    va_end(va);

    return ((int)fn.sent);
}
    9008:	8f 81       	ldd	r24, Y+7	; 0x07
    900a:	98 85       	ldd	r25, Y+8	; 0x08
    900c:	28 96       	adiw	r28, 0x08	; 8
    900e:	e2 e0       	ldi	r30, 0x02	; 2
    9010:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__epilogue_restores__+0x20>

00009014 <atodigit>:
    if(sign)
        num = -num;
    if(endptr)
        *endptr = (char *) nptr;
    return(num);
}
    9014:	9c 01       	movw	r18, r24
    9016:	20 53       	subi	r18, 0x30	; 48
    9018:	31 09       	sbc	r19, r1
    901a:	2a 30       	cpi	r18, 0x0A	; 10
    901c:	31 05       	cpc	r19, r1
    901e:	10 f4       	brcc	.+4      	; 0x9024 <atodigit+0x10>
    9020:	c9 01       	movw	r24, r18
    9022:	10 c0       	rjmp	.+32     	; 0x9044 <atodigit+0x30>
    9024:	9c 01       	movw	r18, r24
    9026:	21 54       	subi	r18, 0x41	; 65
    9028:	31 09       	sbc	r19, r1
    902a:	26 30       	cpi	r18, 0x06	; 6
    902c:	31 05       	cpc	r19, r1
    902e:	10 f4       	brcc	.+4      	; 0x9034 <atodigit+0x20>
    9030:	c7 97       	sbiw	r24, 0x37	; 55
    9032:	08 c0       	rjmp	.+16     	; 0x9044 <atodigit+0x30>
    9034:	9c 01       	movw	r18, r24
    9036:	21 56       	subi	r18, 0x61	; 97
    9038:	31 09       	sbc	r19, r1
    903a:	26 30       	cpi	r18, 0x06	; 6
    903c:	31 05       	cpc	r19, r1
    903e:	28 f4       	brcc	.+10     	; 0x904a <atodigit+0x36>
    9040:	87 55       	subi	r24, 0x57	; 87
    9042:	91 09       	sbc	r25, r1
    9044:	86 17       	cp	r24, r22
    9046:	97 07       	cpc	r25, r23
    9048:	14 f0       	brlt	.+4      	; 0x904e <atodigit+0x3a>
    904a:	8f ef       	ldi	r24, 0xFF	; 255
    904c:	9f ef       	ldi	r25, 0xFF	; 255
    904e:	08 95       	ret

00009050 <strtol>:
    9050:	a0 e0       	ldi	r26, 0x00	; 0
    9052:	b0 e0       	ldi	r27, 0x00	; 0
    9054:	ee e2       	ldi	r30, 0x2E	; 46
    9056:	f8 e4       	ldi	r31, 0x48	; 72
    9058:	0c 94 19 e5 	jmp	0x1ca32	; 0x1ca32 <__prologue_saves__>
    905c:	2b 01       	movw	r4, r22
    905e:	8a 01       	movw	r16, r20
    9060:	ec 01       	movw	r28, r24
    9062:	28 81       	ld	r18, Y
    9064:	01 96       	adiw	r24, 0x01	; 1
    9066:	20 32       	cpi	r18, 0x20	; 32
    9068:	d9 f3       	breq	.-10     	; 0x9060 <strtol+0x10>
    906a:	29 30       	cpi	r18, 0x09	; 9
    906c:	c9 f3       	breq	.-14     	; 0x9060 <strtol+0x10>
    906e:	2d 32       	cpi	r18, 0x2D	; 45
    9070:	29 f4       	brne	.+10     	; 0x907c <strtol+0x2c>
    9072:	ec 01       	movw	r28, r24
    9074:	66 24       	eor	r6, r6
    9076:	63 94       	inc	r6
    9078:	71 2c       	mov	r7, r1
    907a:	05 c0       	rjmp	.+10     	; 0x9086 <strtol+0x36>
    907c:	2b 32       	cpi	r18, 0x2B	; 43
    907e:	09 f4       	brne	.+2      	; 0x9082 <strtol+0x32>
    9080:	ec 01       	movw	r28, r24
    9082:	61 2c       	mov	r6, r1
    9084:	71 2c       	mov	r7, r1
    9086:	9e 01       	movw	r18, r28
    9088:	2f 5f       	subi	r18, 0xFF	; 255
    908a:	3f 4f       	sbci	r19, 0xFF	; 255
    908c:	88 81       	ld	r24, Y
    908e:	80 33       	cpi	r24, 0x30	; 48
    9090:	11 f4       	brne	.+4      	; 0x9096 <strtol+0x46>
    9092:	e9 01       	movw	r28, r18
    9094:	f8 cf       	rjmp	.-16     	; 0x9086 <strtol+0x36>
    9096:	c1 2c       	mov	r12, r1
    9098:	d1 2c       	mov	r13, r1
    909a:	76 01       	movw	r14, r12
    909c:	48 01       	movw	r8, r16
    909e:	01 2e       	mov	r0, r17
    90a0:	00 0c       	add	r0, r0
    90a2:	aa 08       	sbc	r10, r10
    90a4:	bb 08       	sbc	r11, r11
    90a6:	3c 2e       	mov	r3, r28
    90a8:	2d 2e       	mov	r2, r29
    90aa:	89 91       	ld	r24, Y+
    90ac:	88 23       	and	r24, r24
    90ae:	31 f0       	breq	.+12     	; 0x90bc <strtol+0x6c>
    90b0:	b8 01       	movw	r22, r16
    90b2:	90 e0       	ldi	r25, 0x00	; 0
    90b4:	af df       	rcall	.-162    	; 0x9014 <atodigit>
    90b6:	fc 01       	movw	r30, r24
    90b8:	97 ff       	sbrs	r25, 7
    90ba:	0c c0       	rjmp	.+24     	; 0x90d4 <strtol+0x84>
    90bc:	61 14       	cp	r6, r1
    90be:	71 04       	cpc	r7, r1
    90c0:	c1 f0       	breq	.+48     	; 0x90f2 <strtol+0xa2>
    90c2:	f0 94       	com	r15
    90c4:	e0 94       	com	r14
    90c6:	d0 94       	com	r13
    90c8:	c0 94       	com	r12
    90ca:	c1 1c       	adc	r12, r1
    90cc:	d1 1c       	adc	r13, r1
    90ce:	e1 1c       	adc	r14, r1
    90d0:	f1 1c       	adc	r15, r1
    90d2:	0f c0       	rjmp	.+30     	; 0x90f2 <strtol+0xa2>
    90d4:	a5 01       	movw	r20, r10
    90d6:	94 01       	movw	r18, r8
    90d8:	c7 01       	movw	r24, r14
    90da:	b6 01       	movw	r22, r12
    90dc:	0e 94 55 e4 	call	0x1c8aa	; 0x1c8aa <__mulsi3>
    90e0:	6f 01       	movw	r12, r30
    90e2:	ff 0f       	add	r31, r31
    90e4:	ee 08       	sbc	r14, r14
    90e6:	ff 08       	sbc	r15, r15
    90e8:	c6 0e       	add	r12, r22
    90ea:	d7 1e       	adc	r13, r23
    90ec:	e8 1e       	adc	r14, r24
    90ee:	f9 1e       	adc	r15, r25
    90f0:	da cf       	rjmp	.-76     	; 0x90a6 <strtol+0x56>
    90f2:	41 14       	cp	r4, r1
    90f4:	51 04       	cpc	r5, r1
    90f6:	19 f0       	breq	.+6      	; 0x90fe <strtol+0xae>
    90f8:	f2 01       	movw	r30, r4
    90fa:	30 82       	st	Z, r3
    90fc:	21 82       	std	Z+1, r2	; 0x01
    90fe:	c7 01       	movw	r24, r14
    9100:	b6 01       	movw	r22, r12
    9102:	cd b7       	in	r28, 0x3d	; 61
    9104:	de b7       	in	r29, 0x3e	; 62
    9106:	e2 e1       	ldi	r30, 0x12	; 18
    9108:	0c 94 35 e5 	jmp	0x1ca6a	; 0x1ca6a <__epilogue_restores__>

0000910c <atoi>:
MEMSPACE 
int
atoi(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    910c:	4a e0       	ldi	r20, 0x0A	; 10
    910e:	50 e0       	ldi	r21, 0x00	; 0
    9110:	60 e0       	ldi	r22, 0x00	; 0
    9112:	70 e0       	ldi	r23, 0x00	; 0
    9114:	9d df       	rcall	.-198    	; 0x9050 <strtol>
    return((int)num);
}
    9116:	cb 01       	movw	r24, r22
    9118:	08 95       	ret

0000911a <atol>:
MEMSPACE 
long
atol(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    911a:	4a e0       	ldi	r20, 0x0A	; 10
    911c:	50 e0       	ldi	r21, 0x00	; 0
    911e:	60 e0       	ldi	r22, 0x00	; 0
    9120:	70 e0       	ldi	r23, 0x00	; 0
    9122:	96 cf       	rjmp	.-212    	; 0x9050 <strtol>
    return(num);
}
    9124:	08 95       	ret

00009126 <ld_dword>:
#endif
		if (res != FR_OK) ABORT(fs, res);
	}

	LEAVE_FF(fs, res);
}
    9126:	fc 01       	movw	r30, r24
    9128:	62 81       	ldd	r22, Z+2	; 0x02
    912a:	73 81       	ldd	r23, Z+3	; 0x03
    912c:	cb 01       	movw	r24, r22
    912e:	a0 e0       	ldi	r26, 0x00	; 0
    9130:	b0 e0       	ldi	r27, 0x00	; 0
    9132:	ba 2f       	mov	r27, r26
    9134:	a9 2f       	mov	r26, r25
    9136:	98 2f       	mov	r25, r24
    9138:	88 27       	eor	r24, r24
    913a:	21 81       	ldd	r18, Z+1	; 0x01
    913c:	82 2b       	or	r24, r18
    913e:	ba 2f       	mov	r27, r26
    9140:	a9 2f       	mov	r26, r25
    9142:	98 2f       	mov	r25, r24
    9144:	88 27       	eor	r24, r24
    9146:	20 81       	ld	r18, Z
    9148:	bc 01       	movw	r22, r24
    914a:	cd 01       	movw	r24, r26
    914c:	62 2b       	or	r22, r18
    914e:	08 95       	ret

00009150 <st_dword>:
    9150:	fc 01       	movw	r30, r24
    9152:	40 83       	st	Z, r20
    9154:	51 83       	std	Z+1, r21	; 0x01
    9156:	62 83       	std	Z+2, r22	; 0x02
    9158:	73 83       	std	Z+3, r23	; 0x03
    915a:	08 95       	ret

0000915c <mem_set>:
    915c:	48 0f       	add	r20, r24
    915e:	59 1f       	adc	r21, r25
    9160:	fc 01       	movw	r30, r24
    9162:	61 93       	st	Z+, r22
    9164:	cf 01       	movw	r24, r30
    9166:	e4 17       	cp	r30, r20
    9168:	f5 07       	cpc	r31, r21
    916a:	d1 f7       	brne	.-12     	; 0x9160 <mem_set+0x4>
    916c:	08 95       	ret

0000916e <mem_cmp>:
    916e:	dc 01       	movw	r26, r24
    9170:	fb 01       	movw	r30, r22
    9172:	2d 91       	ld	r18, X+
    9174:	81 91       	ld	r24, Z+
    9176:	30 e0       	ldi	r19, 0x00	; 0
    9178:	b9 01       	movw	r22, r18
    917a:	68 1b       	sub	r22, r24
    917c:	71 09       	sbc	r23, r1
    917e:	cb 01       	movw	r24, r22
    9180:	41 50       	subi	r20, 0x01	; 1
    9182:	51 09       	sbc	r21, r1
    9184:	11 f0       	breq	.+4      	; 0x918a <mem_cmp+0x1c>
    9186:	00 97       	sbiw	r24, 0x00	; 0
    9188:	a1 f3       	breq	.-24     	; 0x9172 <mem_cmp+0x4>
    918a:	08 95       	ret

0000918c <tchar2uni>:
    918c:	0f 93       	push	r16
    918e:	1f 93       	push	r17
    9190:	fc 01       	movw	r30, r24
    9192:	a0 81       	ld	r26, Z
    9194:	b1 81       	ldd	r27, Z+1	; 0x01
    9196:	fd 01       	movw	r30, r26
    9198:	31 96       	adiw	r30, 0x01	; 1
    919a:	4c 91       	ld	r20, X
    919c:	47 fd       	sbrc	r20, 7
    919e:	04 c0       	rjmp	.+8      	; 0x91a8 <tchar2uni+0x1c>
    91a0:	50 e0       	ldi	r21, 0x00	; 0
    91a2:	60 e0       	ldi	r22, 0x00	; 0
    91a4:	70 e0       	ldi	r23, 0x00	; 0
    91a6:	68 c0       	rjmp	.+208    	; 0x9278 <tchar2uni+0xec>
    91a8:	24 2f       	mov	r18, r20
    91aa:	20 7e       	andi	r18, 0xE0	; 224
    91ac:	20 3c       	cpi	r18, 0xC0	; 192
    91ae:	39 f4       	brne	.+14     	; 0x91be <tchar2uni+0x32>
    91b0:	4f 71       	andi	r20, 0x1F	; 31
    91b2:	50 e0       	ldi	r21, 0x00	; 0
    91b4:	60 e0       	ldi	r22, 0x00	; 0
    91b6:	70 e0       	ldi	r23, 0x00	; 0
    91b8:	21 e0       	ldi	r18, 0x01	; 1
    91ba:	30 e0       	ldi	r19, 0x00	; 0
    91bc:	16 c0       	rjmp	.+44     	; 0x91ea <tchar2uni+0x5e>
    91be:	24 2f       	mov	r18, r20
    91c0:	20 7f       	andi	r18, 0xF0	; 240
    91c2:	20 3e       	cpi	r18, 0xE0	; 224
    91c4:	39 f4       	brne	.+14     	; 0x91d4 <tchar2uni+0x48>
    91c6:	4f 70       	andi	r20, 0x0F	; 15
    91c8:	50 e0       	ldi	r21, 0x00	; 0
    91ca:	60 e0       	ldi	r22, 0x00	; 0
    91cc:	70 e0       	ldi	r23, 0x00	; 0
    91ce:	22 e0       	ldi	r18, 0x02	; 2
    91d0:	30 e0       	ldi	r19, 0x00	; 0
    91d2:	0b c0       	rjmp	.+22     	; 0x91ea <tchar2uni+0x5e>
    91d4:	24 2f       	mov	r18, r20
    91d6:	28 7f       	andi	r18, 0xF8	; 248
    91d8:	20 3f       	cpi	r18, 0xF0	; 240
    91da:	09 f0       	breq	.+2      	; 0x91de <tchar2uni+0x52>
    91dc:	54 c0       	rjmp	.+168    	; 0x9286 <tchar2uni+0xfa>
    91de:	47 70       	andi	r20, 0x07	; 7
    91e0:	50 e0       	ldi	r21, 0x00	; 0
    91e2:	60 e0       	ldi	r22, 0x00	; 0
    91e4:	70 e0       	ldi	r23, 0x00	; 0
    91e6:	23 e0       	ldi	r18, 0x03	; 3
    91e8:	30 e0       	ldi	r19, 0x00	; 0
    91ea:	31 96       	adiw	r30, 0x01	; 1
    91ec:	df 01       	movw	r26, r30
    91ee:	11 97       	sbiw	r26, 0x01	; 1
    91f0:	ac 91       	ld	r26, X
    91f2:	ba 2f       	mov	r27, r26
    91f4:	b0 7c       	andi	r27, 0xC0	; 192
    91f6:	b0 38       	cpi	r27, 0x80	; 128
    91f8:	09 f0       	breq	.+2      	; 0x91fc <tchar2uni+0x70>
    91fa:	45 c0       	rjmp	.+138    	; 0x9286 <tchar2uni+0xfa>
    91fc:	b6 e0       	ldi	r27, 0x06	; 6
    91fe:	44 0f       	add	r20, r20
    9200:	55 1f       	adc	r21, r21
    9202:	66 1f       	adc	r22, r22
    9204:	77 1f       	adc	r23, r23
    9206:	ba 95       	dec	r27
    9208:	d1 f7       	brne	.-12     	; 0x91fe <tchar2uni+0x72>
    920a:	af 73       	andi	r26, 0x3F	; 63
    920c:	4a 2b       	or	r20, r26
    920e:	21 50       	subi	r18, 0x01	; 1
    9210:	31 09       	sbc	r19, r1
    9212:	59 f7       	brne	.-42     	; 0x91ea <tchar2uni+0x5e>
    9214:	8a 01       	movw	r16, r20
    9216:	9b 01       	movw	r18, r22
    9218:	00 58       	subi	r16, 0x80	; 128
    921a:	11 09       	sbc	r17, r1
    921c:	21 09       	sbc	r18, r1
    921e:	31 09       	sbc	r19, r1
    9220:	00 38       	cpi	r16, 0x80	; 128
    9222:	1f 4f       	sbci	r17, 0xFF	; 255
    9224:	20 41       	sbci	r18, 0x10	; 16
    9226:	31 05       	cpc	r19, r1
    9228:	70 f5       	brcc	.+92     	; 0x9286 <tchar2uni+0xfa>
    922a:	8a 01       	movw	r16, r20
    922c:	9b 01       	movw	r18, r22
    922e:	18 5d       	subi	r17, 0xD8	; 216
    9230:	21 09       	sbc	r18, r1
    9232:	31 09       	sbc	r19, r1
    9234:	01 15       	cp	r16, r1
    9236:	18 40       	sbci	r17, 0x08	; 8
    9238:	21 05       	cpc	r18, r1
    923a:	31 05       	cpc	r19, r1
    923c:	20 f1       	brcs	.+72     	; 0x9286 <tchar2uni+0xfa>
    923e:	41 15       	cp	r20, r1
    9240:	51 05       	cpc	r21, r1
    9242:	21 e0       	ldi	r18, 0x01	; 1
    9244:	62 07       	cpc	r22, r18
    9246:	71 05       	cpc	r23, r1
    9248:	b8 f0       	brcs	.+46     	; 0x9278 <tchar2uni+0xec>
    924a:	8a 01       	movw	r16, r20
    924c:	9b 01       	movw	r18, r22
    924e:	21 50       	subi	r18, 0x01	; 1
    9250:	31 09       	sbc	r19, r1
    9252:	a6 e0       	ldi	r26, 0x06	; 6
    9254:	00 0f       	add	r16, r16
    9256:	11 1f       	adc	r17, r17
    9258:	22 1f       	adc	r18, r18
    925a:	33 1f       	adc	r19, r19
    925c:	aa 95       	dec	r26
    925e:	d1 f7       	brne	.-12     	; 0x9254 <tchar2uni+0xc8>
    9260:	00 27       	eor	r16, r16
    9262:	11 27       	eor	r17, r17
    9264:	33 70       	andi	r19, 0x03	; 3
    9266:	53 70       	andi	r21, 0x03	; 3
    9268:	66 27       	eor	r22, r22
    926a:	77 27       	eor	r23, r23
    926c:	5c 6d       	ori	r21, 0xDC	; 220
    926e:	78 6d       	ori	r23, 0xD8	; 216
    9270:	40 2b       	or	r20, r16
    9272:	51 2b       	or	r21, r17
    9274:	62 2b       	or	r22, r18
    9276:	73 2b       	or	r23, r19
    9278:	dc 01       	movw	r26, r24
    927a:	ed 93       	st	X+, r30
    927c:	fc 93       	st	X, r31
    927e:	34 2f       	mov	r19, r20
    9280:	25 2f       	mov	r18, r21
    9282:	cb 01       	movw	r24, r22
    9284:	04 c0       	rjmp	.+8      	; 0x928e <tchar2uni+0x102>
    9286:	3f ef       	ldi	r19, 0xFF	; 255
    9288:	2f ef       	ldi	r18, 0xFF	; 255
    928a:	8f ef       	ldi	r24, 0xFF	; 255
    928c:	9f ef       	ldi	r25, 0xFF	; 255
    928e:	63 2f       	mov	r22, r19
    9290:	72 2f       	mov	r23, r18
    9292:	1f 91       	pop	r17
    9294:	0f 91       	pop	r16
    9296:	08 95       	ret

00009298 <clst2sect>:
    9298:	0f 93       	push	r16
    929a:	1f 93       	push	r17
    929c:	fc 01       	movw	r30, r24
    929e:	9a 01       	movw	r18, r20
    92a0:	ab 01       	movw	r20, r22
    92a2:	22 50       	subi	r18, 0x02	; 2
    92a4:	31 09       	sbc	r19, r1
    92a6:	41 09       	sbc	r20, r1
    92a8:	51 09       	sbc	r21, r1
    92aa:	81 8d       	ldd	r24, Z+25	; 0x19
    92ac:	92 8d       	ldd	r25, Z+26	; 0x1a
    92ae:	a3 8d       	ldd	r26, Z+27	; 0x1b
    92b0:	b4 8d       	ldd	r27, Z+28	; 0x1c
    92b2:	02 97       	sbiw	r24, 0x02	; 2
    92b4:	a1 09       	sbc	r26, r1
    92b6:	b1 09       	sbc	r27, r1
    92b8:	28 17       	cp	r18, r24
    92ba:	39 07       	cpc	r19, r25
    92bc:	4a 07       	cpc	r20, r26
    92be:	5b 07       	cpc	r21, r27
    92c0:	68 f4       	brcc	.+26     	; 0x92dc <clst2sect+0x44>
    92c2:	a1 85       	ldd	r26, Z+9	; 0x09
    92c4:	b2 85       	ldd	r27, Z+10	; 0x0a
    92c6:	0e 94 f9 e4 	call	0x1c9f2	; 0x1c9f2 <__muluhisi3>
    92ca:	05 a5       	ldd	r16, Z+45	; 0x2d
    92cc:	16 a5       	ldd	r17, Z+46	; 0x2e
    92ce:	27 a5       	ldd	r18, Z+47	; 0x2f
    92d0:	30 a9       	ldd	r19, Z+48	; 0x30
    92d2:	60 0f       	add	r22, r16
    92d4:	71 1f       	adc	r23, r17
    92d6:	82 1f       	adc	r24, r18
    92d8:	93 1f       	adc	r25, r19
    92da:	03 c0       	rjmp	.+6      	; 0x92e2 <clst2sect+0x4a>
    92dc:	60 e0       	ldi	r22, 0x00	; 0
    92de:	70 e0       	ldi	r23, 0x00	; 0
    92e0:	cb 01       	movw	r24, r22
    92e2:	1f 91       	pop	r17
    92e4:	0f 91       	pop	r16
    92e6:	08 95       	ret

000092e8 <clmt_clust>:
    92e8:	cf 93       	push	r28
    92ea:	df 93       	push	r29
    92ec:	fc 01       	movw	r30, r24
    92ee:	c2 a1       	ldd	r28, Z+34	; 0x22
    92f0:	d3 a1       	ldd	r29, Z+35	; 0x23
    92f2:	24 96       	adiw	r28, 0x04	; 4
    92f4:	cb 01       	movw	r24, r22
    92f6:	ba 01       	movw	r22, r20
    92f8:	29 e0       	ldi	r18, 0x09	; 9
    92fa:	96 95       	lsr	r25
    92fc:	87 95       	ror	r24
    92fe:	77 95       	ror	r23
    9300:	67 95       	ror	r22
    9302:	2a 95       	dec	r18
    9304:	d1 f7       	brne	.-12     	; 0x92fa <clmt_clust+0x12>
    9306:	01 90       	ld	r0, Z+
    9308:	f0 81       	ld	r31, Z
    930a:	e0 2d       	mov	r30, r0
    930c:	21 85       	ldd	r18, Z+9	; 0x09
    930e:	32 85       	ldd	r19, Z+10	; 0x0a
    9310:	40 e0       	ldi	r20, 0x00	; 0
    9312:	50 e0       	ldi	r21, 0x00	; 0
    9314:	0e 94 97 e4 	call	0x1c92e	; 0x1c92e <__udivmodsi4>
    9318:	88 81       	ld	r24, Y
    931a:	99 81       	ldd	r25, Y+1	; 0x01
    931c:	aa 81       	ldd	r26, Y+2	; 0x02
    931e:	bb 81       	ldd	r27, Y+3	; 0x03
    9320:	00 97       	sbiw	r24, 0x00	; 0
    9322:	a1 05       	cpc	r26, r1
    9324:	b1 05       	cpc	r27, r1
    9326:	b1 f0       	breq	.+44     	; 0x9354 <clmt_clust+0x6c>
    9328:	28 17       	cp	r18, r24
    932a:	39 07       	cpc	r19, r25
    932c:	4a 07       	cpc	r20, r26
    932e:	5b 07       	cpc	r21, r27
    9330:	30 f0       	brcs	.+12     	; 0x933e <clmt_clust+0x56>
    9332:	28 1b       	sub	r18, r24
    9334:	39 0b       	sbc	r19, r25
    9336:	4a 0b       	sbc	r20, r26
    9338:	5b 0b       	sbc	r21, r27
    933a:	28 96       	adiw	r28, 0x08	; 8
    933c:	ed cf       	rjmp	.-38     	; 0x9318 <clmt_clust+0x30>
    933e:	8c 81       	ldd	r24, Y+4	; 0x04
    9340:	9d 81       	ldd	r25, Y+5	; 0x05
    9342:	ae 81       	ldd	r26, Y+6	; 0x06
    9344:	bf 81       	ldd	r27, Y+7	; 0x07
    9346:	bc 01       	movw	r22, r24
    9348:	cd 01       	movw	r24, r26
    934a:	62 0f       	add	r22, r18
    934c:	73 1f       	adc	r23, r19
    934e:	84 1f       	adc	r24, r20
    9350:	95 1f       	adc	r25, r21
    9352:	03 c0       	rjmp	.+6      	; 0x935a <clmt_clust+0x72>
    9354:	60 e0       	ldi	r22, 0x00	; 0
    9356:	70 e0       	ldi	r23, 0x00	; 0
    9358:	cb 01       	movw	r24, r22
    935a:	df 91       	pop	r29
    935c:	cf 91       	pop	r28
    935e:	08 95       	ret

00009360 <sum_sfn>:
    9360:	fc 01       	movw	r30, r24
    9362:	9c 01       	movw	r18, r24
    9364:	25 5f       	subi	r18, 0xF5	; 245
    9366:	3f 4f       	sbci	r19, 0xFF	; 255
    9368:	80 e0       	ldi	r24, 0x00	; 0
    936a:	98 2f       	mov	r25, r24
    936c:	90 fb       	bst	r25, 0
    936e:	97 95       	ror	r25
    9370:	97 f9       	bld	r25, 7
    9372:	81 91       	ld	r24, Z+
    9374:	89 0f       	add	r24, r25
    9376:	e2 17       	cp	r30, r18
    9378:	f3 07       	cpc	r31, r19
    937a:	b9 f7       	brne	.-18     	; 0x936a <sum_sfn+0xa>
    937c:	08 95       	ret

0000937e <get_ldnumber>:
    937e:	cf 93       	push	r28
    9380:	df 93       	push	r29
    9382:	dc 01       	movw	r26, r24
    9384:	ed 91       	ld	r30, X+
    9386:	fc 91       	ld	r31, X
    9388:	11 97       	sbiw	r26, 0x01	; 1
    938a:	30 97       	sbiw	r30, 0x00	; 0
    938c:	f9 f0       	breq	.+62     	; 0x93cc <get_ldnumber+0x4e>
    938e:	9f 01       	movw	r18, r30
    9390:	2f 5f       	subi	r18, 0xFF	; 255
    9392:	3f 4f       	sbci	r19, 0xFF	; 255
    9394:	e9 01       	movw	r28, r18
    9396:	21 97       	sbiw	r28, 0x01	; 1
    9398:	88 81       	ld	r24, Y
    939a:	80 32       	cpi	r24, 0x20	; 32
    939c:	18 f0       	brcs	.+6      	; 0x93a4 <get_ldnumber+0x26>
    939e:	8a 33       	cpi	r24, 0x3A	; 58
    93a0:	b9 f7       	brne	.-18     	; 0x9390 <get_ldnumber+0x12>
    93a2:	04 c0       	rjmp	.+8      	; 0x93ac <get_ldnumber+0x2e>
    93a4:	80 91 bc 17 	lds	r24, 0x17BC	; 0x8017bc <CurrVol>
    93a8:	90 e0       	ldi	r25, 0x00	; 0
    93aa:	12 c0       	rjmp	.+36     	; 0x93d0 <get_ldnumber+0x52>
    93ac:	90 81       	ld	r25, Z
    93ae:	80 ed       	ldi	r24, 0xD0	; 208
    93b0:	89 0f       	add	r24, r25
    93b2:	8a 30       	cpi	r24, 0x0A	; 10
    93b4:	58 f4       	brcc	.+22     	; 0x93cc <get_ldnumber+0x4e>
    93b6:	32 96       	adiw	r30, 0x02	; 2
    93b8:	2e 17       	cp	r18, r30
    93ba:	3f 07       	cpc	r19, r31
    93bc:	39 f4       	brne	.+14     	; 0x93cc <get_ldnumber+0x4e>
    93be:	90 33       	cpi	r25, 0x30	; 48
    93c0:	29 f4       	brne	.+10     	; 0x93cc <get_ldnumber+0x4e>
    93c2:	2d 93       	st	X+, r18
    93c4:	3c 93       	st	X, r19
    93c6:	80 e0       	ldi	r24, 0x00	; 0
    93c8:	90 e0       	ldi	r25, 0x00	; 0
    93ca:	02 c0       	rjmp	.+4      	; 0x93d0 <get_ldnumber+0x52>
    93cc:	8f ef       	ldi	r24, 0xFF	; 255
    93ce:	9f ef       	ldi	r25, 0xFF	; 255
    93d0:	df 91       	pop	r29
    93d2:	cf 91       	pop	r28
    93d4:	08 95       	ret

000093d6 <validate>:
    93d6:	0f 93       	push	r16
    93d8:	1f 93       	push	r17
    93da:	cf 93       	push	r28
    93dc:	df 93       	push	r29
    93de:	ec 01       	movw	r28, r24
    93e0:	8b 01       	movw	r16, r22
    93e2:	89 2b       	or	r24, r25
    93e4:	f9 f0       	breq	.+62     	; 0x9424 <validate+0x4e>
    93e6:	e8 81       	ld	r30, Y
    93e8:	f9 81       	ldd	r31, Y+1	; 0x01
    93ea:	30 97       	sbiw	r30, 0x00	; 0
    93ec:	d9 f0       	breq	.+54     	; 0x9424 <validate+0x4e>
    93ee:	80 81       	ld	r24, Z
    93f0:	88 23       	and	r24, r24
    93f2:	c1 f0       	breq	.+48     	; 0x9424 <validate+0x4e>
    93f4:	2a 81       	ldd	r18, Y+2	; 0x02
    93f6:	3b 81       	ldd	r19, Y+3	; 0x03
    93f8:	85 81       	ldd	r24, Z+5	; 0x05
    93fa:	96 81       	ldd	r25, Z+6	; 0x06
    93fc:	28 17       	cp	r18, r24
    93fe:	39 07       	cpc	r19, r25
    9400:	89 f4       	brne	.+34     	; 0x9424 <validate+0x4e>
    9402:	81 81       	ldd	r24, Z+1	; 0x01
    9404:	0e 94 ab 6b 	call	0xd756	; 0xd756 <disk_status>
    9408:	80 fd       	sbrc	r24, 0
    940a:	0c c0       	rjmp	.+24     	; 0x9424 <validate+0x4e>
    940c:	28 81       	ld	r18, Y
    940e:	39 81       	ldd	r19, Y+1	; 0x01
    9410:	80 e0       	ldi	r24, 0x00	; 0
    9412:	90 e0       	ldi	r25, 0x00	; 0
    9414:	f8 01       	movw	r30, r16
    9416:	31 83       	std	Z+1, r19	; 0x01
    9418:	20 83       	st	Z, r18
    941a:	df 91       	pop	r29
    941c:	cf 91       	pop	r28
    941e:	1f 91       	pop	r17
    9420:	0f 91       	pop	r16
    9422:	08 95       	ret
    9424:	89 e0       	ldi	r24, 0x09	; 9
    9426:	90 e0       	ldi	r25, 0x00	; 0
    9428:	20 e0       	ldi	r18, 0x00	; 0
    942a:	30 e0       	ldi	r19, 0x00	; 0
    942c:	f3 cf       	rjmp	.-26     	; 0x9414 <validate+0x3e>

0000942e <mem_cpy.part.0>:
    942e:	fb 01       	movw	r30, r22
    9430:	48 0f       	add	r20, r24
    9432:	59 1f       	adc	r21, r25
    9434:	21 91       	ld	r18, Z+
    9436:	dc 01       	movw	r26, r24
    9438:	2d 93       	st	X+, r18
    943a:	cd 01       	movw	r24, r26
    943c:	a4 17       	cp	r26, r20
    943e:	b5 07       	cpc	r27, r21
    9440:	c9 f7       	brne	.-14     	; 0x9434 <mem_cpy.part.0+0x6>
    9442:	08 95       	ret

00009444 <put_utf>:
    9444:	0f 93       	push	r16
    9446:	1f 93       	push	r17
    9448:	fa 01       	movw	r30, r20
    944a:	60 38       	cpi	r22, 0x80	; 128
    944c:	71 05       	cpc	r23, r1
    944e:	81 05       	cpc	r24, r1
    9450:	91 05       	cpc	r25, r1
    9452:	30 f4       	brcc	.+12     	; 0x9460 <put_utf+0x1c>
    9454:	23 2b       	or	r18, r19
    9456:	09 f4       	brne	.+2      	; 0x945a <put_utf+0x16>
    9458:	9e c0       	rjmp	.+316    	; 0x9596 <put_utf+0x152>
    945a:	60 83       	st	Z, r22
    945c:	81 e0       	ldi	r24, 0x01	; 1
    945e:	9c c0       	rjmp	.+312    	; 0x9598 <put_utf+0x154>
    9460:	61 15       	cp	r22, r1
    9462:	48 e0       	ldi	r20, 0x08	; 8
    9464:	74 07       	cpc	r23, r20
    9466:	81 05       	cpc	r24, r1
    9468:	91 05       	cpc	r25, r1
    946a:	a0 f4       	brcc	.+40     	; 0x9494 <put_utf+0x50>
    946c:	22 30       	cpi	r18, 0x02	; 2
    946e:	31 05       	cpc	r19, r1
    9470:	08 f4       	brcc	.+2      	; 0x9474 <put_utf+0x30>
    9472:	91 c0       	rjmp	.+290    	; 0x9596 <put_utf+0x152>
    9474:	8b 01       	movw	r16, r22
    9476:	9c 01       	movw	r18, r24
    9478:	76 e0       	ldi	r23, 0x06	; 6
    947a:	36 95       	lsr	r19
    947c:	27 95       	ror	r18
    947e:	17 95       	ror	r17
    9480:	07 95       	ror	r16
    9482:	7a 95       	dec	r23
    9484:	d1 f7       	brne	.-12     	; 0x947a <put_utf+0x36>
    9486:	00 6c       	ori	r16, 0xC0	; 192
    9488:	00 83       	st	Z, r16
    948a:	6f 73       	andi	r22, 0x3F	; 63
    948c:	60 68       	ori	r22, 0x80	; 128
    948e:	61 83       	std	Z+1, r22	; 0x01
    9490:	82 e0       	ldi	r24, 0x02	; 2
    9492:	82 c0       	rjmp	.+260    	; 0x9598 <put_utf+0x154>
    9494:	61 15       	cp	r22, r1
    9496:	71 05       	cpc	r23, r1
    9498:	41 e0       	ldi	r20, 0x01	; 1
    949a:	84 07       	cpc	r24, r20
    949c:	91 05       	cpc	r25, r1
    949e:	58 f5       	brcc	.+86     	; 0x94f6 <put_utf+0xb2>
    94a0:	23 30       	cpi	r18, 0x03	; 3
    94a2:	31 05       	cpc	r19, r1
    94a4:	08 f4       	brcc	.+2      	; 0x94a8 <put_utf+0x64>
    94a6:	77 c0       	rjmp	.+238    	; 0x9596 <put_utf+0x152>
    94a8:	8b 01       	movw	r16, r22
    94aa:	9c 01       	movw	r18, r24
    94ac:	18 5d       	subi	r17, 0xD8	; 216
    94ae:	21 09       	sbc	r18, r1
    94b0:	31 09       	sbc	r19, r1
    94b2:	01 15       	cp	r16, r1
    94b4:	18 40       	sbci	r17, 0x08	; 8
    94b6:	21 05       	cpc	r18, r1
    94b8:	31 05       	cpc	r19, r1
    94ba:	08 f4       	brcc	.+2      	; 0x94be <put_utf+0x7a>
    94bc:	6c c0       	rjmp	.+216    	; 0x9596 <put_utf+0x152>
    94be:	8b 01       	movw	r16, r22
    94c0:	9c 01       	movw	r18, r24
    94c2:	4c e0       	ldi	r20, 0x0C	; 12
    94c4:	36 95       	lsr	r19
    94c6:	27 95       	ror	r18
    94c8:	17 95       	ror	r17
    94ca:	07 95       	ror	r16
    94cc:	4a 95       	dec	r20
    94ce:	d1 f7       	brne	.-12     	; 0x94c4 <put_utf+0x80>
    94d0:	00 6e       	ori	r16, 0xE0	; 224
    94d2:	00 83       	st	Z, r16
    94d4:	8b 01       	movw	r16, r22
    94d6:	9c 01       	movw	r18, r24
    94d8:	56 e0       	ldi	r21, 0x06	; 6
    94da:	36 95       	lsr	r19
    94dc:	27 95       	ror	r18
    94de:	17 95       	ror	r17
    94e0:	07 95       	ror	r16
    94e2:	5a 95       	dec	r21
    94e4:	d1 f7       	brne	.-12     	; 0x94da <put_utf+0x96>
    94e6:	0f 73       	andi	r16, 0x3F	; 63
    94e8:	00 68       	ori	r16, 0x80	; 128
    94ea:	01 83       	std	Z+1, r16	; 0x01
    94ec:	6f 73       	andi	r22, 0x3F	; 63
    94ee:	60 68       	ori	r22, 0x80	; 128
    94f0:	62 83       	std	Z+2, r22	; 0x02
    94f2:	83 e0       	ldi	r24, 0x03	; 3
    94f4:	51 c0       	rjmp	.+162    	; 0x9598 <put_utf+0x154>
    94f6:	24 30       	cpi	r18, 0x04	; 4
    94f8:	31 05       	cpc	r19, r1
    94fa:	08 f4       	brcc	.+2      	; 0x94fe <put_utf+0xba>
    94fc:	4c c0       	rjmp	.+152    	; 0x9596 <put_utf+0x152>
    94fe:	8b 01       	movw	r16, r22
    9500:	9c 01       	movw	r18, r24
    9502:	00 27       	eor	r16, r16
    9504:	11 27       	eor	r17, r17
    9506:	38 5d       	subi	r19, 0xD8	; 216
    9508:	b6 e0       	ldi	r27, 0x06	; 6
    950a:	36 95       	lsr	r19
    950c:	27 95       	ror	r18
    950e:	17 95       	ror	r17
    9510:	07 95       	ror	r16
    9512:	ba 95       	dec	r27
    9514:	d1 f7       	brne	.-12     	; 0x950a <put_utf+0xc6>
    9516:	01 15       	cp	r16, r1
    9518:	11 05       	cpc	r17, r1
    951a:	40 e1       	ldi	r20, 0x10	; 16
    951c:	24 07       	cpc	r18, r20
    951e:	31 05       	cpc	r19, r1
    9520:	d0 f5       	brcc	.+116    	; 0x9596 <put_utf+0x152>
    9522:	dc 01       	movw	r26, r24
    9524:	cb 01       	movw	r24, r22
    9526:	aa 27       	eor	r26, r26
    9528:	bb 27       	eor	r27, r27
    952a:	9c 5d       	subi	r25, 0xDC	; 220
    952c:	a1 09       	sbc	r26, r1
    952e:	b1 09       	sbc	r27, r1
    9530:	81 15       	cp	r24, r1
    9532:	44 e0       	ldi	r20, 0x04	; 4
    9534:	94 07       	cpc	r25, r20
    9536:	a1 05       	cpc	r26, r1
    9538:	b1 05       	cpc	r27, r1
    953a:	68 f5       	brcc	.+90     	; 0x9596 <put_utf+0x152>
    953c:	80 2b       	or	r24, r16
    953e:	91 2b       	or	r25, r17
    9540:	a2 2b       	or	r26, r18
    9542:	b3 2b       	or	r27, r19
    9544:	11 96       	adiw	r26, 0x01	; 1
    9546:	ac 01       	movw	r20, r24
    9548:	bd 01       	movw	r22, r26
    954a:	22 e1       	ldi	r18, 0x12	; 18
    954c:	76 95       	lsr	r23
    954e:	67 95       	ror	r22
    9550:	57 95       	ror	r21
    9552:	47 95       	ror	r20
    9554:	2a 95       	dec	r18
    9556:	d1 f7       	brne	.-12     	; 0x954c <put_utf+0x108>
    9558:	40 6f       	ori	r20, 0xF0	; 240
    955a:	40 83       	st	Z, r20
    955c:	ac 01       	movw	r20, r24
    955e:	bd 01       	movw	r22, r26
    9560:	3c e0       	ldi	r19, 0x0C	; 12
    9562:	76 95       	lsr	r23
    9564:	67 95       	ror	r22
    9566:	57 95       	ror	r21
    9568:	47 95       	ror	r20
    956a:	3a 95       	dec	r19
    956c:	d1 f7       	brne	.-12     	; 0x9562 <put_utf+0x11e>
    956e:	4f 73       	andi	r20, 0x3F	; 63
    9570:	40 68       	ori	r20, 0x80	; 128
    9572:	41 83       	std	Z+1, r20	; 0x01
    9574:	ac 01       	movw	r20, r24
    9576:	bd 01       	movw	r22, r26
    9578:	a6 e0       	ldi	r26, 0x06	; 6
    957a:	76 95       	lsr	r23
    957c:	67 95       	ror	r22
    957e:	57 95       	ror	r21
    9580:	47 95       	ror	r20
    9582:	aa 95       	dec	r26
    9584:	d1 f7       	brne	.-12     	; 0x957a <put_utf+0x136>
    9586:	4f 73       	andi	r20, 0x3F	; 63
    9588:	40 68       	ori	r20, 0x80	; 128
    958a:	42 83       	std	Z+2, r20	; 0x02
    958c:	8f 73       	andi	r24, 0x3F	; 63
    958e:	80 68       	ori	r24, 0x80	; 128
    9590:	83 83       	std	Z+3, r24	; 0x03
    9592:	84 e0       	ldi	r24, 0x04	; 4
    9594:	01 c0       	rjmp	.+2      	; 0x9598 <put_utf+0x154>
    9596:	80 e0       	ldi	r24, 0x00	; 0
    9598:	1f 91       	pop	r17
    959a:	0f 91       	pop	r16
    959c:	08 95       	ret

0000959e <get_fileinfo>:
    959e:	a0 e0       	ldi	r26, 0x00	; 0
    95a0:	b0 e0       	ldi	r27, 0x00	; 0
    95a2:	e5 ed       	ldi	r30, 0xD5	; 213
    95a4:	fa e4       	ldi	r31, 0x4A	; 74
    95a6:	0c 94 19 e5 	jmp	0x1ca32	; 0x1ca32 <__prologue_saves__>
    95aa:	fc 01       	movw	r30, r24
    95ac:	60 80       	ld	r6, Z
    95ae:	71 80       	ldd	r7, Z+1	; 0x01
    95b0:	fb 01       	movw	r30, r22
    95b2:	16 8a       	std	Z+22, r1	; 0x16
    95b4:	fc 01       	movw	r30, r24
    95b6:	06 89       	ldd	r16, Z+22	; 0x16
    95b8:	17 89       	ldd	r17, Z+23	; 0x17
    95ba:	20 8d       	ldd	r18, Z+24	; 0x18
    95bc:	31 8d       	ldd	r19, Z+25	; 0x19
    95be:	01 15       	cp	r16, r1
    95c0:	11 05       	cpc	r17, r1
    95c2:	21 05       	cpc	r18, r1
    95c4:	31 05       	cpc	r19, r1
    95c6:	09 f4       	brne	.+2      	; 0x95ca <get_fileinfo+0x2c>
    95c8:	f5 c0       	rjmp	.+490    	; 0x97b4 <get_fileinfo+0x216>
    95ca:	eb 01       	movw	r28, r22
    95cc:	8c 01       	movw	r16, r24
    95ce:	80 a5       	ldd	r24, Z+40	; 0x28
    95d0:	91 a5       	ldd	r25, Z+41	; 0x29
    95d2:	a2 a5       	ldd	r26, Z+42	; 0x2a
    95d4:	b3 a5       	ldd	r27, Z+43	; 0x2b
    95d6:	8f 3f       	cpi	r24, 0xFF	; 255
    95d8:	9f 4f       	sbci	r25, 0xFF	; 255
    95da:	af 4f       	sbci	r26, 0xFF	; 255
    95dc:	bf 4f       	sbci	r27, 0xFF	; 255
    95de:	09 f4       	brne	.+2      	; 0x95e2 <get_fileinfo+0x44>
    95e0:	48 c0       	rjmp	.+144    	; 0x9672 <get_fileinfo+0xd4>
    95e2:	a1 2c       	mov	r10, r1
    95e4:	b1 2c       	mov	r11, r1
    95e6:	c1 2c       	mov	r12, r1
    95e8:	d1 2c       	mov	r13, r1
    95ea:	e1 2c       	mov	r14, r1
    95ec:	f1 2c       	mov	r15, r1
    95ee:	88 24       	eor	r8, r8
    95f0:	8a 94       	dec	r8
    95f2:	91 2c       	mov	r9, r1
    95f4:	f3 01       	movw	r30, r6
    95f6:	83 85       	ldd	r24, Z+11	; 0x0b
    95f8:	94 85       	ldd	r25, Z+12	; 0x0c
    95fa:	fc 01       	movw	r30, r24
    95fc:	ea 0d       	add	r30, r10
    95fe:	fb 1d       	adc	r31, r11
    9600:	80 81       	ld	r24, Z
    9602:	91 81       	ldd	r25, Z+1	; 0x01
    9604:	00 97       	sbiw	r24, 0x00	; 0
    9606:	69 f1       	breq	.+90     	; 0x9662 <get_fileinfo+0xc4>
    9608:	c1 14       	cp	r12, r1
    960a:	d1 04       	cpc	r13, r1
    960c:	29 f4       	brne	.+10     	; 0x9618 <get_fileinfo+0x7a>
    960e:	9c 01       	movw	r18, r24
    9610:	38 5d       	subi	r19, 0xD8	; 216
    9612:	21 15       	cp	r18, r1
    9614:	38 40       	sbci	r19, 0x08	; 8
    9616:	f0 f0       	brcs	.+60     	; 0x9654 <get_fileinfo+0xb6>
    9618:	a7 01       	movw	r20, r14
    961a:	4a 5e       	subi	r20, 0xEA	; 234
    961c:	5f 4f       	sbci	r21, 0xFF	; 255
    961e:	4c 0f       	add	r20, r28
    9620:	5d 1f       	adc	r21, r29
    9622:	16 01       	movw	r2, r12
    9624:	41 2c       	mov	r4, r1
    9626:	51 2c       	mov	r5, r1
    9628:	21 01       	movw	r4, r2
    962a:	33 24       	eor	r3, r3
    962c:	22 24       	eor	r2, r2
    962e:	a0 e0       	ldi	r26, 0x00	; 0
    9630:	b0 e0       	ldi	r27, 0x00	; 0
    9632:	bc 01       	movw	r22, r24
    9634:	cd 01       	movw	r24, r26
    9636:	62 29       	or	r22, r2
    9638:	73 29       	or	r23, r3
    963a:	84 29       	or	r24, r4
    963c:	95 29       	or	r25, r5
    963e:	94 01       	movw	r18, r8
    9640:	2e 19       	sub	r18, r14
    9642:	3f 09       	sbc	r19, r15
    9644:	ff de       	rcall	.-514    	; 0x9444 <put_utf>
    9646:	90 e0       	ldi	r25, 0x00	; 0
    9648:	00 97       	sbiw	r24, 0x00	; 0
    964a:	49 f0       	breq	.+18     	; 0x965e <get_fileinfo+0xc0>
    964c:	e8 0e       	add	r14, r24
    964e:	f9 1e       	adc	r15, r25
    9650:	80 e0       	ldi	r24, 0x00	; 0
    9652:	90 e0       	ldi	r25, 0x00	; 0
    9654:	e2 e0       	ldi	r30, 0x02	; 2
    9656:	ae 0e       	add	r10, r30
    9658:	b1 1c       	adc	r11, r1
    965a:	6c 01       	movw	r12, r24
    965c:	cb cf       	rjmp	.-106    	; 0x95f4 <get_fileinfo+0x56>
    965e:	e1 2c       	mov	r14, r1
    9660:	f1 2c       	mov	r15, r1
    9662:	cd 28       	or	r12, r13
    9664:	11 f0       	breq	.+4      	; 0x966a <get_fileinfo+0xcc>
    9666:	e1 2c       	mov	r14, r1
    9668:	f1 2c       	mov	r15, r1
    966a:	fe 01       	movw	r30, r28
    966c:	ee 0d       	add	r30, r14
    966e:	ff 1d       	adc	r31, r15
    9670:	16 8a       	std	Z+22, r1	; 0x16
    9672:	e1 2c       	mov	r14, r1
    9674:	f1 2c       	mov	r15, r1
    9676:	80 e0       	ldi	r24, 0x00	; 0
    9678:	90 e0       	ldi	r25, 0x00	; 0
    967a:	2c e0       	ldi	r18, 0x0C	; 12
    967c:	a2 2e       	mov	r10, r18
    967e:	b1 2c       	mov	r11, r1
    9680:	3e e2       	ldi	r19, 0x2E	; 46
    9682:	93 2e       	mov	r9, r19
    9684:	6c 01       	movw	r12, r24
    9686:	ff ef       	ldi	r31, 0xFF	; 255
    9688:	cf 1a       	sub	r12, r31
    968a:	df 0a       	sbc	r13, r31
    968c:	f8 01       	movw	r30, r16
    968e:	22 8d       	ldd	r18, Z+26	; 0x1a
    9690:	33 8d       	ldd	r19, Z+27	; 0x1b
    9692:	f9 01       	movw	r30, r18
    9694:	e8 0f       	add	r30, r24
    9696:	f9 1f       	adc	r31, r25
    9698:	80 81       	ld	r24, Z
    969a:	90 e0       	ldi	r25, 0x00	; 0
    969c:	80 32       	cpi	r24, 0x20	; 32
    969e:	91 05       	cpc	r25, r1
    96a0:	71 f1       	breq	.+92     	; 0x96fe <get_fileinfo+0x160>
    96a2:	85 30       	cpi	r24, 0x05	; 5
    96a4:	91 05       	cpc	r25, r1
    96a6:	11 f4       	brne	.+4      	; 0x96ac <get_fileinfo+0x10e>
    96a8:	85 ee       	ldi	r24, 0xE5	; 229
    96aa:	90 e0       	ldi	r25, 0x00	; 0
    96ac:	f9 e0       	ldi	r31, 0x09	; 9
    96ae:	cf 16       	cp	r12, r31
    96b0:	d1 04       	cpc	r13, r1
    96b2:	59 f4       	brne	.+22     	; 0x96ca <get_fileinfo+0x12c>
    96b4:	2c e0       	ldi	r18, 0x0C	; 12
    96b6:	e2 16       	cp	r14, r18
    96b8:	f1 04       	cpc	r15, r1
    96ba:	38 f4       	brcc	.+14     	; 0x96ca <get_fileinfo+0x12c>
    96bc:	fe 01       	movw	r30, r28
    96be:	ee 0d       	add	r30, r14
    96c0:	ff 1d       	adc	r31, r15
    96c2:	91 86       	std	Z+9, r9	; 0x09
    96c4:	f7 01       	movw	r30, r14
    96c6:	31 96       	adiw	r30, 0x01	; 1
    96c8:	7f 01       	movw	r14, r30
    96ca:	65 eb       	ldi	r22, 0xB5	; 181
    96cc:	71 e0       	ldi	r23, 0x01	; 1
    96ce:	0e 94 34 6b 	call	0xd668	; 0xd668 <ff_oem2uni>
    96d2:	00 97       	sbiw	r24, 0x00	; 0
    96d4:	19 f4       	brne	.+6      	; 0x96dc <get_fileinfo+0x13e>
    96d6:	e1 2c       	mov	r14, r1
    96d8:	f1 2c       	mov	r15, r1
    96da:	16 c0       	rjmp	.+44     	; 0x9708 <get_fileinfo+0x16a>
    96dc:	a7 01       	movw	r20, r14
    96de:	47 5f       	subi	r20, 0xF7	; 247
    96e0:	5f 4f       	sbci	r21, 0xFF	; 255
    96e2:	4c 0f       	add	r20, r28
    96e4:	5d 1f       	adc	r21, r29
    96e6:	bc 01       	movw	r22, r24
    96e8:	80 e0       	ldi	r24, 0x00	; 0
    96ea:	90 e0       	ldi	r25, 0x00	; 0
    96ec:	95 01       	movw	r18, r10
    96ee:	2e 19       	sub	r18, r14
    96f0:	3f 09       	sbc	r19, r15
    96f2:	a8 de       	rcall	.-688    	; 0x9444 <put_utf>
    96f4:	90 e0       	ldi	r25, 0x00	; 0
    96f6:	00 97       	sbiw	r24, 0x00	; 0
    96f8:	71 f3       	breq	.-36     	; 0x96d6 <get_fileinfo+0x138>
    96fa:	e8 0e       	add	r14, r24
    96fc:	f9 1e       	adc	r15, r25
    96fe:	c6 01       	movw	r24, r12
    9700:	8b 30       	cpi	r24, 0x0B	; 11
    9702:	91 05       	cpc	r25, r1
    9704:	09 f0       	breq	.+2      	; 0x9708 <get_fileinfo+0x16a>
    9706:	be cf       	rjmp	.-132    	; 0x9684 <get_fileinfo+0xe6>
    9708:	fe 01       	movw	r30, r28
    970a:	ee 0d       	add	r30, r14
    970c:	ff 1d       	adc	r31, r15
    970e:	11 86       	std	Z+9, r1	; 0x09
    9710:	8e 89       	ldd	r24, Y+22	; 0x16
    9712:	81 11       	cpse	r24, r1
    9714:	36 c0       	rjmp	.+108    	; 0x9782 <get_fileinfo+0x1e4>
    9716:	e1 14       	cp	r14, r1
    9718:	f1 04       	cpc	r15, r1
    971a:	31 f0       	breq	.+12     	; 0x9728 <get_fileinfo+0x18a>
    971c:	de 01       	movw	r26, r28
    971e:	19 96       	adiw	r26, 0x09	; 9
    9720:	58 e0       	ldi	r21, 0x08	; 8
    9722:	20 e0       	ldi	r18, 0x00	; 0
    9724:	30 e0       	ldi	r19, 0x00	; 0
    9726:	14 c0       	rjmp	.+40     	; 0x9750 <get_fileinfo+0x1b2>
    9728:	8f e3       	ldi	r24, 0x3F	; 63
    972a:	8e 8b       	std	Y+22, r24	; 0x16
    972c:	21 e0       	ldi	r18, 0x01	; 1
    972e:	30 e0       	ldi	r19, 0x00	; 0
    9730:	1c c0       	rjmp	.+56     	; 0x976a <get_fileinfo+0x1cc>
    9732:	90 e0       	ldi	r25, 0x00	; 0
    9734:	8e 32       	cpi	r24, 0x2E	; 46
    9736:	91 05       	cpc	r25, r1
    9738:	09 f4       	brne	.+2      	; 0x973c <get_fileinfo+0x19e>
    973a:	50 e1       	ldi	r21, 0x10	; 16
    973c:	bc 01       	movw	r22, r24
    973e:	61 54       	subi	r22, 0x41	; 65
    9740:	71 09       	sbc	r23, r1
    9742:	6a 31       	cpi	r22, 0x1A	; 26
    9744:	71 05       	cpc	r23, r1
    9746:	40 f0       	brcs	.+16     	; 0x9758 <get_fileinfo+0x1ba>
    9748:	fd 01       	movw	r30, r26
    974a:	84 87       	std	Z+12, r24	; 0x0c
    974c:	2f 5f       	subi	r18, 0xFF	; 255
    974e:	3f 4f       	sbci	r19, 0xFF	; 255
    9750:	8d 91       	ld	r24, X+
    9752:	81 11       	cpse	r24, r1
    9754:	ee cf       	rjmp	.-36     	; 0x9732 <get_fileinfo+0x194>
    9756:	09 c0       	rjmp	.+18     	; 0x976a <get_fileinfo+0x1cc>
    9758:	f8 01       	movw	r30, r16
    975a:	62 8d       	ldd	r22, Z+26	; 0x1a
    975c:	73 8d       	ldd	r23, Z+27	; 0x1b
    975e:	fb 01       	movw	r30, r22
    9760:	44 85       	ldd	r20, Z+12	; 0x0c
    9762:	45 23       	and	r20, r21
    9764:	89 f3       	breq	.-30     	; 0x9748 <get_fileinfo+0x1aa>
    9766:	80 96       	adiw	r24, 0x20	; 32
    9768:	ef cf       	rjmp	.-34     	; 0x9748 <get_fileinfo+0x1aa>
    976a:	fe 01       	movw	r30, r28
    976c:	e2 0f       	add	r30, r18
    976e:	f3 1f       	adc	r31, r19
    9770:	16 8a       	std	Z+22, r1	; 0x16
    9772:	f8 01       	movw	r30, r16
    9774:	82 8d       	ldd	r24, Z+26	; 0x1a
    9776:	93 8d       	ldd	r25, Z+27	; 0x1b
    9778:	fc 01       	movw	r30, r24
    977a:	84 85       	ldd	r24, Z+12	; 0x0c
    977c:	81 11       	cpse	r24, r1
    977e:	01 c0       	rjmp	.+2      	; 0x9782 <get_fileinfo+0x1e4>
    9780:	19 86       	std	Y+9, r1	; 0x09
    9782:	f8 01       	movw	r30, r16
    9784:	82 8d       	ldd	r24, Z+26	; 0x1a
    9786:	93 8d       	ldd	r25, Z+27	; 0x1b
    9788:	fc 01       	movw	r30, r24
    978a:	83 85       	ldd	r24, Z+11	; 0x0b
    978c:	88 87       	std	Y+8, r24	; 0x08
    978e:	f8 01       	movw	r30, r16
    9790:	02 8d       	ldd	r16, Z+26	; 0x1a
    9792:	13 8d       	ldd	r17, Z+27	; 0x1b
    9794:	c8 01       	movw	r24, r16
    9796:	4c 96       	adiw	r24, 0x1c	; 28
    9798:	c6 dc       	rcall	.-1652   	; 0x9126 <ld_dword>
    979a:	68 83       	st	Y, r22
    979c:	79 83       	std	Y+1, r23	; 0x01
    979e:	8a 83       	std	Y+2, r24	; 0x02
    97a0:	9b 83       	std	Y+3, r25	; 0x03
    97a2:	f8 01       	movw	r30, r16
    97a4:	86 89       	ldd	r24, Z+22	; 0x16
    97a6:	97 89       	ldd	r25, Z+23	; 0x17
    97a8:	9f 83       	std	Y+7, r25	; 0x07
    97aa:	8e 83       	std	Y+6, r24	; 0x06
    97ac:	80 8d       	ldd	r24, Z+24	; 0x18
    97ae:	91 8d       	ldd	r25, Z+25	; 0x19
    97b0:	9d 83       	std	Y+5, r25	; 0x05
    97b2:	8c 83       	std	Y+4, r24	; 0x04
    97b4:	cd b7       	in	r28, 0x3d	; 61
    97b6:	de b7       	in	r29, 0x3e	; 62
    97b8:	e2 e1       	ldi	r30, 0x12	; 18
    97ba:	0c 94 35 e5 	jmp	0x1ca6a	; 0x1ca6a <__epilogue_restores__>

000097be <ld_clust.isra.4>:
    97be:	fb 01       	movw	r30, r22
    97c0:	42 8d       	ldd	r20, Z+26	; 0x1a
    97c2:	53 8d       	ldd	r21, Z+27	; 0x1b
    97c4:	60 e0       	ldi	r22, 0x00	; 0
    97c6:	70 e0       	ldi	r23, 0x00	; 0
    97c8:	83 30       	cpi	r24, 0x03	; 3
    97ca:	59 f4       	brne	.+22     	; 0x97e2 <ld_clust.isra.4+0x24>
    97cc:	84 89       	ldd	r24, Z+20	; 0x14
    97ce:	95 89       	ldd	r25, Z+21	; 0x15
    97d0:	a0 e0       	ldi	r26, 0x00	; 0
    97d2:	b0 e0       	ldi	r27, 0x00	; 0
    97d4:	dc 01       	movw	r26, r24
    97d6:	99 27       	eor	r25, r25
    97d8:	88 27       	eor	r24, r24
    97da:	48 2b       	or	r20, r24
    97dc:	59 2b       	or	r21, r25
    97de:	6a 2b       	or	r22, r26
    97e0:	7b 2b       	or	r23, r27
    97e2:	cb 01       	movw	r24, r22
    97e4:	ba 01       	movw	r22, r20
    97e6:	08 95       	ret

000097e8 <st_clust.isra.5>:
    97e8:	fb 01       	movw	r30, r22
    97ea:	22 8f       	std	Z+26, r18	; 0x1a
    97ec:	33 8f       	std	Z+27, r19	; 0x1b
    97ee:	dc 01       	movw	r26, r24
    97f0:	8c 91       	ld	r24, X
    97f2:	83 30       	cpi	r24, 0x03	; 3
    97f4:	29 f4       	brne	.+10     	; 0x9800 <st_clust.isra.5+0x18>
    97f6:	ca 01       	movw	r24, r20
    97f8:	aa 27       	eor	r26, r26
    97fa:	bb 27       	eor	r27, r27
    97fc:	84 8b       	std	Z+20, r24	; 0x14
    97fe:	95 8b       	std	Z+21, r25	; 0x15
    9800:	08 95       	ret

00009802 <sync_window.part.6>:
    9802:	8f 92       	push	r8
    9804:	9f 92       	push	r9
    9806:	af 92       	push	r10
    9808:	bf 92       	push	r11
    980a:	ef 92       	push	r14
    980c:	ff 92       	push	r15
    980e:	0f 93       	push	r16
    9810:	1f 93       	push	r17
    9812:	cf 93       	push	r28
    9814:	df 93       	push	r29
    9816:	ec 01       	movw	r28, r24
    9818:	7c 01       	movw	r14, r24
    981a:	45 e3       	ldi	r20, 0x35	; 53
    981c:	e4 0e       	add	r14, r20
    981e:	f1 1c       	adc	r15, r1
    9820:	29 a9       	ldd	r18, Y+49	; 0x31
    9822:	3a a9       	ldd	r19, Y+50	; 0x32
    9824:	4b a9       	ldd	r20, Y+51	; 0x33
    9826:	5c a9       	ldd	r21, Y+52	; 0x34
    9828:	01 e0       	ldi	r16, 0x01	; 1
    982a:	10 e0       	ldi	r17, 0x00	; 0
    982c:	b7 01       	movw	r22, r14
    982e:	89 81       	ldd	r24, Y+1	; 0x01
    9830:	0e 94 c7 6b 	call	0xd78e	; 0xd78e <disk_write>
    9834:	89 2b       	or	r24, r25
    9836:	41 f5       	brne	.+80     	; 0x9888 <sync_window.part.6+0x86>
    9838:	1b 82       	std	Y+3, r1	; 0x03
    983a:	09 a9       	ldd	r16, Y+49	; 0x31
    983c:	1a a9       	ldd	r17, Y+50	; 0x32
    983e:	2b a9       	ldd	r18, Y+51	; 0x33
    9840:	3c a9       	ldd	r19, Y+52	; 0x34
    9842:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9844:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9846:	af 8d       	ldd	r26, Y+31	; 0x1f
    9848:	b8 a1       	ldd	r27, Y+32	; 0x20
    984a:	8d a0       	ldd	r8, Y+37	; 0x25
    984c:	9e a0       	ldd	r9, Y+38	; 0x26
    984e:	af a0       	ldd	r10, Y+39	; 0x27
    9850:	b8 a4       	ldd	r11, Y+40	; 0x28
    9852:	b9 01       	movw	r22, r18
    9854:	a8 01       	movw	r20, r16
    9856:	48 19       	sub	r20, r8
    9858:	59 09       	sbc	r21, r9
    985a:	6a 09       	sbc	r22, r10
    985c:	7b 09       	sbc	r23, r11
    985e:	48 17       	cp	r20, r24
    9860:	59 07       	cpc	r21, r25
    9862:	6a 07       	cpc	r22, r26
    9864:	7b 07       	cpc	r23, r27
    9866:	98 f4       	brcc	.+38     	; 0x988e <sync_window.part.6+0x8c>
    9868:	6a 81       	ldd	r22, Y+2	; 0x02
    986a:	62 30       	cpi	r22, 0x02	; 2
    986c:	81 f4       	brne	.+32     	; 0x988e <sync_window.part.6+0x8c>
    986e:	a9 01       	movw	r20, r18
    9870:	98 01       	movw	r18, r16
    9872:	28 0f       	add	r18, r24
    9874:	39 1f       	adc	r19, r25
    9876:	4a 1f       	adc	r20, r26
    9878:	5b 1f       	adc	r21, r27
    987a:	01 e0       	ldi	r16, 0x01	; 1
    987c:	10 e0       	ldi	r17, 0x00	; 0
    987e:	b7 01       	movw	r22, r14
    9880:	89 81       	ldd	r24, Y+1	; 0x01
    9882:	0e 94 c7 6b 	call	0xd78e	; 0xd78e <disk_write>
    9886:	03 c0       	rjmp	.+6      	; 0x988e <sync_window.part.6+0x8c>
    9888:	81 e0       	ldi	r24, 0x01	; 1
    988a:	90 e0       	ldi	r25, 0x00	; 0
    988c:	02 c0       	rjmp	.+4      	; 0x9892 <sync_window.part.6+0x90>
    988e:	80 e0       	ldi	r24, 0x00	; 0
    9890:	90 e0       	ldi	r25, 0x00	; 0
    9892:	df 91       	pop	r29
    9894:	cf 91       	pop	r28
    9896:	1f 91       	pop	r17
    9898:	0f 91       	pop	r16
    989a:	ff 90       	pop	r15
    989c:	ef 90       	pop	r14
    989e:	bf 90       	pop	r11
    98a0:	af 90       	pop	r10
    98a2:	9f 90       	pop	r9
    98a4:	8f 90       	pop	r8
    98a6:	08 95       	ret

000098a8 <sync_fs>:
    98a8:	ef 92       	push	r14
    98aa:	ff 92       	push	r15
    98ac:	0f 93       	push	r16
    98ae:	1f 93       	push	r17
    98b0:	cf 93       	push	r28
    98b2:	df 93       	push	r29
    98b4:	ec 01       	movw	r28, r24
    98b6:	8b 81       	ldd	r24, Y+3	; 0x03
    98b8:	81 11       	cpse	r24, r1
    98ba:	05 c0       	rjmp	.+10     	; 0x98c6 <sync_fs+0x1e>
    98bc:	88 81       	ld	r24, Y
    98be:	83 30       	cpi	r24, 0x03	; 3
    98c0:	09 f0       	breq	.+2      	; 0x98c4 <sync_fs+0x1c>
    98c2:	52 c0       	rjmp	.+164    	; 0x9968 <sync_fs+0xc0>
    98c4:	06 c0       	rjmp	.+12     	; 0x98d2 <sync_fs+0x2a>
    98c6:	ce 01       	movw	r24, r28
    98c8:	9c df       	rcall	.-200    	; 0x9802 <sync_window.part.6>
    98ca:	00 97       	sbiw	r24, 0x00	; 0
    98cc:	09 f0       	breq	.+2      	; 0x98d0 <sync_fs+0x28>
    98ce:	59 c0       	rjmp	.+178    	; 0x9982 <sync_fs+0xda>
    98d0:	f5 cf       	rjmp	.-22     	; 0x98bc <sync_fs+0x14>
    98d2:	8c 81       	ldd	r24, Y+4	; 0x04
    98d4:	81 30       	cpi	r24, 0x01	; 1
    98d6:	09 f0       	breq	.+2      	; 0x98da <sync_fs+0x32>
    98d8:	47 c0       	rjmp	.+142    	; 0x9968 <sync_fs+0xc0>
    98da:	40 e0       	ldi	r20, 0x00	; 0
    98dc:	52 e0       	ldi	r21, 0x02	; 2
    98de:	60 e0       	ldi	r22, 0x00	; 0
    98e0:	70 e0       	ldi	r23, 0x00	; 0
    98e2:	7e 01       	movw	r14, r28
    98e4:	85 e3       	ldi	r24, 0x35	; 53
    98e6:	e8 0e       	add	r14, r24
    98e8:	f1 1c       	adc	r15, r1
    98ea:	c7 01       	movw	r24, r14
    98ec:	37 dc       	rcall	.-1938   	; 0x915c <mem_set>
    98ee:	85 e5       	ldi	r24, 0x55	; 85
    98f0:	fe 01       	movw	r30, r28
    98f2:	ed 5c       	subi	r30, 0xCD	; 205
    98f4:	fd 4f       	sbci	r31, 0xFD	; 253
    98f6:	80 83       	st	Z, r24
    98f8:	8a ea       	ldi	r24, 0xAA	; 170
    98fa:	31 96       	adiw	r30, 0x01	; 1
    98fc:	80 83       	st	Z, r24
    98fe:	82 e5       	ldi	r24, 0x52	; 82
    9900:	8d ab       	std	Y+53, r24	; 0x35
    9902:	8e ab       	std	Y+54, r24	; 0x36
    9904:	81 e6       	ldi	r24, 0x61	; 97
    9906:	8f ab       	std	Y+55, r24	; 0x37
    9908:	91 e4       	ldi	r25, 0x41	; 65
    990a:	98 af       	std	Y+56, r25	; 0x38
    990c:	22 e7       	ldi	r18, 0x72	; 114
    990e:	7b 97       	sbiw	r30, 0x1b	; 27
    9910:	20 83       	st	Z, r18
    9912:	31 96       	adiw	r30, 0x01	; 1
    9914:	20 83       	st	Z, r18
    9916:	31 96       	adiw	r30, 0x01	; 1
    9918:	90 83       	st	Z, r25
    991a:	31 96       	adiw	r30, 0x01	; 1
    991c:	80 83       	st	Z, r24
    991e:	49 89       	ldd	r20, Y+17	; 0x11
    9920:	5a 89       	ldd	r21, Y+18	; 0x12
    9922:	6b 89       	ldd	r22, Y+19	; 0x13
    9924:	7c 89       	ldd	r23, Y+20	; 0x14
    9926:	ce 01       	movw	r24, r28
    9928:	83 5e       	subi	r24, 0xE3	; 227
    992a:	9d 4f       	sbci	r25, 0xFD	; 253
    992c:	11 dc       	rcall	.-2014   	; 0x9150 <st_dword>
    992e:	4d 85       	ldd	r20, Y+13	; 0x0d
    9930:	5e 85       	ldd	r21, Y+14	; 0x0e
    9932:	6f 85       	ldd	r22, Y+15	; 0x0f
    9934:	78 89       	ldd	r23, Y+16	; 0x10
    9936:	ce 01       	movw	r24, r28
    9938:	8f 5d       	subi	r24, 0xDF	; 223
    993a:	9d 4f       	sbci	r25, 0xFD	; 253
    993c:	09 dc       	rcall	.-2030   	; 0x9150 <st_dword>
    993e:	89 a1       	ldd	r24, Y+33	; 0x21
    9940:	9a a1       	ldd	r25, Y+34	; 0x22
    9942:	ab a1       	ldd	r26, Y+35	; 0x23
    9944:	bc a1       	ldd	r27, Y+36	; 0x24
    9946:	9c 01       	movw	r18, r24
    9948:	ad 01       	movw	r20, r26
    994a:	2f 5f       	subi	r18, 0xFF	; 255
    994c:	3f 4f       	sbci	r19, 0xFF	; 255
    994e:	4f 4f       	sbci	r20, 0xFF	; 255
    9950:	5f 4f       	sbci	r21, 0xFF	; 255
    9952:	29 ab       	std	Y+49, r18	; 0x31
    9954:	3a ab       	std	Y+50, r19	; 0x32
    9956:	4b ab       	std	Y+51, r20	; 0x33
    9958:	5c ab       	std	Y+52, r21	; 0x34
    995a:	01 e0       	ldi	r16, 0x01	; 1
    995c:	10 e0       	ldi	r17, 0x00	; 0
    995e:	b7 01       	movw	r22, r14
    9960:	89 81       	ldd	r24, Y+1	; 0x01
    9962:	0e 94 c7 6b 	call	0xd78e	; 0xd78e <disk_write>
    9966:	1c 82       	std	Y+4, r1	; 0x04
    9968:	40 e0       	ldi	r20, 0x00	; 0
    996a:	50 e0       	ldi	r21, 0x00	; 0
    996c:	60 e0       	ldi	r22, 0x00	; 0
    996e:	89 81       	ldd	r24, Y+1	; 0x01
    9970:	0e 94 d7 6b 	call	0xd7ae	; 0xd7ae <disk_ioctl>
    9974:	31 e0       	ldi	r19, 0x01	; 1
    9976:	20 e0       	ldi	r18, 0x00	; 0
    9978:	89 2b       	or	r24, r25
    997a:	09 f4       	brne	.+2      	; 0x997e <sync_fs+0xd6>
    997c:	30 e0       	ldi	r19, 0x00	; 0
    997e:	83 2f       	mov	r24, r19
    9980:	92 2f       	mov	r25, r18
    9982:	cd b7       	in	r28, 0x3d	; 61
    9984:	de b7       	in	r29, 0x3e	; 62
    9986:	e6 e0       	ldi	r30, 0x06	; 6
    9988:	0c 94 41 e5 	jmp	0x1ca82	; 0x1ca82 <__epilogue_restores__+0x18>

0000998c <dir_clear>:
    998c:	4f 92       	push	r4
    998e:	5f 92       	push	r5
    9990:	6f 92       	push	r6
    9992:	7f 92       	push	r7
    9994:	af 92       	push	r10
    9996:	bf 92       	push	r11
    9998:	cf 92       	push	r12
    999a:	df 92       	push	r13
    999c:	ef 92       	push	r14
    999e:	ff 92       	push	r15
    99a0:	0f 93       	push	r16
    99a2:	1f 93       	push	r17
    99a4:	cf 93       	push	r28
    99a6:	df 93       	push	r29
    99a8:	ec 01       	movw	r28, r24
    99aa:	6a 01       	movw	r12, r20
    99ac:	7b 01       	movw	r14, r22
    99ae:	8b 81       	ldd	r24, Y+3	; 0x03
    99b0:	81 11       	cpse	r24, r1
    99b2:	28 c0       	rjmp	.+80     	; 0x9a04 <dir_clear+0x78>
    99b4:	b7 01       	movw	r22, r14
    99b6:	a6 01       	movw	r20, r12
    99b8:	ce 01       	movw	r24, r28
    99ba:	6e dc       	rcall	.-1828   	; 0x9298 <clst2sect>
    99bc:	2b 01       	movw	r4, r22
    99be:	3c 01       	movw	r6, r24
    99c0:	69 ab       	std	Y+49, r22	; 0x31
    99c2:	7a ab       	std	Y+50, r23	; 0x32
    99c4:	8b ab       	std	Y+51, r24	; 0x33
    99c6:	9c ab       	std	Y+52, r25	; 0x34
    99c8:	5e 01       	movw	r10, r28
    99ca:	25 e3       	ldi	r18, 0x35	; 53
    99cc:	a2 0e       	add	r10, r18
    99ce:	b1 1c       	adc	r11, r1
    99d0:	40 e0       	ldi	r20, 0x00	; 0
    99d2:	52 e0       	ldi	r21, 0x02	; 2
    99d4:	60 e0       	ldi	r22, 0x00	; 0
    99d6:	70 e0       	ldi	r23, 0x00	; 0
    99d8:	c5 01       	movw	r24, r10
    99da:	c0 db       	rcall	.-2176   	; 0x915c <mem_set>
    99dc:	09 85       	ldd	r16, Y+9	; 0x09
    99de:	1a 85       	ldd	r17, Y+10	; 0x0a
    99e0:	c8 01       	movw	r24, r16
    99e2:	a0 e0       	ldi	r26, 0x00	; 0
    99e4:	b0 e0       	ldi	r27, 0x00	; 0
    99e6:	39 e0       	ldi	r19, 0x09	; 9
    99e8:	88 0f       	add	r24, r24
    99ea:	99 1f       	adc	r25, r25
    99ec:	aa 1f       	adc	r26, r26
    99ee:	bb 1f       	adc	r27, r27
    99f0:	3a 95       	dec	r19
    99f2:	d1 f7       	brne	.-12     	; 0x99e8 <dir_clear+0x5c>
    99f4:	81 15       	cp	r24, r1
    99f6:	90 48       	sbci	r25, 0x80	; 128
    99f8:	a1 05       	cpc	r26, r1
    99fa:	b1 05       	cpc	r27, r1
    99fc:	50 f0       	brcs	.+20     	; 0x9a12 <dir_clear+0x86>
    99fe:	00 e0       	ldi	r16, 0x00	; 0
    9a00:	10 e8       	ldi	r17, 0x80	; 128
    9a02:	14 c0       	rjmp	.+40     	; 0x9a2c <dir_clear+0xa0>
    9a04:	ce 01       	movw	r24, r28
    9a06:	fd de       	rcall	.-518    	; 0x9802 <sync_window.part.6>
    9a08:	89 2b       	or	r24, r25
    9a0a:	a1 f2       	breq	.-88     	; 0x99b4 <dir_clear+0x28>
    9a0c:	81 e0       	ldi	r24, 0x01	; 1
    9a0e:	90 e0       	ldi	r25, 0x00	; 0
    9a10:	56 c0       	rjmp	.+172    	; 0x9abe <dir_clear+0x132>
    9a12:	10 2f       	mov	r17, r16
    9a14:	00 27       	eor	r16, r16
    9a16:	11 0f       	add	r17, r17
    9a18:	09 c0       	rjmp	.+18     	; 0x9a2c <dir_clear+0xa0>
    9a1a:	c8 01       	movw	r24, r16
    9a1c:	0e 94 fb 6a 	call	0xd5f6	; 0xd5f6 <ff_memalloc>
    9a20:	6c 01       	movw	r12, r24
    9a22:	00 97       	sbiw	r24, 0x00	; 0
    9a24:	09 f0       	breq	.+2      	; 0x9a28 <dir_clear+0x9c>
    9a26:	40 c0       	rjmp	.+128    	; 0x9aa8 <dir_clear+0x11c>
    9a28:	16 95       	lsr	r17
    9a2a:	07 95       	ror	r16
    9a2c:	01 30       	cpi	r16, 0x01	; 1
    9a2e:	82 e0       	ldi	r24, 0x02	; 2
    9a30:	18 07       	cpc	r17, r24
    9a32:	98 f7       	brcc	.-26     	; 0x9a1a <dir_clear+0x8e>
    9a34:	e1 2c       	mov	r14, r1
    9a36:	f1 2c       	mov	r15, r1
    9a38:	11 c0       	rjmp	.+34     	; 0x9a5c <dir_clear+0xd0>
    9a3a:	01 e0       	ldi	r16, 0x01	; 1
    9a3c:	10 e0       	ldi	r17, 0x00	; 0
    9a3e:	a3 01       	movw	r20, r6
    9a40:	92 01       	movw	r18, r4
    9a42:	2e 0d       	add	r18, r14
    9a44:	3f 1d       	adc	r19, r15
    9a46:	41 1d       	adc	r20, r1
    9a48:	51 1d       	adc	r21, r1
    9a4a:	b5 01       	movw	r22, r10
    9a4c:	89 81       	ldd	r24, Y+1	; 0x01
    9a4e:	0e 94 c7 6b 	call	0xd78e	; 0xd78e <disk_write>
    9a52:	89 2b       	or	r24, r25
    9a54:	01 f5       	brne	.+64     	; 0x9a96 <dir_clear+0x10a>
    9a56:	2f ef       	ldi	r18, 0xFF	; 255
    9a58:	e2 1a       	sub	r14, r18
    9a5a:	f2 0a       	sbc	r15, r18
    9a5c:	89 85       	ldd	r24, Y+9	; 0x09
    9a5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    9a60:	e8 16       	cp	r14, r24
    9a62:	f9 06       	cpc	r15, r25
    9a64:	50 f3       	brcs	.-44     	; 0x9a3a <dir_clear+0xae>
    9a66:	17 c0       	rjmp	.+46     	; 0x9a96 <dir_clear+0x10a>
    9a68:	85 01       	movw	r16, r10
    9a6a:	a3 01       	movw	r20, r6
    9a6c:	92 01       	movw	r18, r4
    9a6e:	2e 0d       	add	r18, r14
    9a70:	3f 1d       	adc	r19, r15
    9a72:	41 1d       	adc	r20, r1
    9a74:	51 1d       	adc	r21, r1
    9a76:	b6 01       	movw	r22, r12
    9a78:	89 81       	ldd	r24, Y+1	; 0x01
    9a7a:	0e 94 c7 6b 	call	0xd78e	; 0xd78e <disk_write>
    9a7e:	89 2b       	or	r24, r25
    9a80:	39 f4       	brne	.+14     	; 0x9a90 <dir_clear+0x104>
    9a82:	ea 0c       	add	r14, r10
    9a84:	fb 1c       	adc	r15, r11
    9a86:	89 85       	ldd	r24, Y+9	; 0x09
    9a88:	9a 85       	ldd	r25, Y+10	; 0x0a
    9a8a:	e8 16       	cp	r14, r24
    9a8c:	f9 06       	cpc	r15, r25
    9a8e:	60 f3       	brcs	.-40     	; 0x9a68 <dir_clear+0xdc>
    9a90:	c6 01       	movw	r24, r12
    9a92:	0e 94 fe 6a 	call	0xd5fc	; 0xd5fc <ff_memfree>
    9a96:	81 e0       	ldi	r24, 0x01	; 1
    9a98:	90 e0       	ldi	r25, 0x00	; 0
    9a9a:	29 85       	ldd	r18, Y+9	; 0x09
    9a9c:	3a 85       	ldd	r19, Y+10	; 0x0a
    9a9e:	2e 15       	cp	r18, r14
    9aa0:	3f 05       	cpc	r19, r15
    9aa2:	69 f4       	brne	.+26     	; 0x9abe <dir_clear+0x132>
    9aa4:	80 e0       	ldi	r24, 0x00	; 0
    9aa6:	0b c0       	rjmp	.+22     	; 0x9abe <dir_clear+0x132>
    9aa8:	a8 01       	movw	r20, r16
    9aaa:	60 e0       	ldi	r22, 0x00	; 0
    9aac:	70 e0       	ldi	r23, 0x00	; 0
    9aae:	56 db       	rcall	.-2388   	; 0x915c <mem_set>
    9ab0:	58 01       	movw	r10, r16
    9ab2:	ab 2c       	mov	r10, r11
    9ab4:	bb 24       	eor	r11, r11
    9ab6:	a6 94       	lsr	r10
    9ab8:	e1 2c       	mov	r14, r1
    9aba:	f1 2c       	mov	r15, r1
    9abc:	e4 cf       	rjmp	.-56     	; 0x9a86 <dir_clear+0xfa>
    9abe:	df 91       	pop	r29
    9ac0:	cf 91       	pop	r28
    9ac2:	1f 91       	pop	r17
    9ac4:	0f 91       	pop	r16
    9ac6:	ff 90       	pop	r15
    9ac8:	ef 90       	pop	r14
    9aca:	df 90       	pop	r13
    9acc:	cf 90       	pop	r12
    9ace:	bf 90       	pop	r11
    9ad0:	af 90       	pop	r10
    9ad2:	7f 90       	pop	r7
    9ad4:	6f 90       	pop	r6
    9ad6:	5f 90       	pop	r5
    9ad8:	4f 90       	pop	r4
    9ada:	08 95       	ret

00009adc <move_window>:
    9adc:	a0 e0       	ldi	r26, 0x00	; 0
    9ade:	b0 e0       	ldi	r27, 0x00	; 0
    9ae0:	e4 e7       	ldi	r30, 0x74	; 116
    9ae2:	fd e4       	ldi	r31, 0x4D	; 77
    9ae4:	0c 94 23 e5 	jmp	0x1ca46	; 0x1ca46 <__prologue_saves__+0x14>
    9ae8:	ec 01       	movw	r28, r24
    9aea:	6a 01       	movw	r12, r20
    9aec:	7b 01       	movw	r14, r22
    9aee:	89 a9       	ldd	r24, Y+49	; 0x31
    9af0:	9a a9       	ldd	r25, Y+50	; 0x32
    9af2:	ab a9       	ldd	r26, Y+51	; 0x33
    9af4:	bc a9       	ldd	r27, Y+52	; 0x34
    9af6:	84 17       	cp	r24, r20
    9af8:	95 07       	cpc	r25, r21
    9afa:	a6 07       	cpc	r26, r22
    9afc:	b7 07       	cpc	r27, r23
    9afe:	11 f1       	breq	.+68     	; 0x9b44 <move_window+0x68>
    9b00:	8b 81       	ldd	r24, Y+3	; 0x03
    9b02:	81 11       	cpse	r24, r1
    9b04:	13 c0       	rjmp	.+38     	; 0x9b2c <move_window+0x50>
    9b06:	01 e0       	ldi	r16, 0x01	; 1
    9b08:	10 e0       	ldi	r17, 0x00	; 0
    9b0a:	a7 01       	movw	r20, r14
    9b0c:	96 01       	movw	r18, r12
    9b0e:	be 01       	movw	r22, r28
    9b10:	6b 5c       	subi	r22, 0xCB	; 203
    9b12:	7f 4f       	sbci	r23, 0xFF	; 255
    9b14:	89 81       	ldd	r24, Y+1	; 0x01
    9b16:	0e 94 b7 6b 	call	0xd76e	; 0xd76e <disk_read>
    9b1a:	89 2b       	or	r24, r25
    9b1c:	61 f0       	breq	.+24     	; 0x9b36 <move_window+0x5a>
    9b1e:	81 e0       	ldi	r24, 0x01	; 1
    9b20:	90 e0       	ldi	r25, 0x00	; 0
    9b22:	cc 24       	eor	r12, r12
    9b24:	ca 94       	dec	r12
    9b26:	dc 2c       	mov	r13, r12
    9b28:	76 01       	movw	r14, r12
    9b2a:	07 c0       	rjmp	.+14     	; 0x9b3a <move_window+0x5e>
    9b2c:	ce 01       	movw	r24, r28
    9b2e:	69 de       	rcall	.-814    	; 0x9802 <sync_window.part.6>
    9b30:	00 97       	sbiw	r24, 0x00	; 0
    9b32:	51 f4       	brne	.+20     	; 0x9b48 <move_window+0x6c>
    9b34:	e8 cf       	rjmp	.-48     	; 0x9b06 <move_window+0x2a>
    9b36:	80 e0       	ldi	r24, 0x00	; 0
    9b38:	90 e0       	ldi	r25, 0x00	; 0
    9b3a:	c9 aa       	std	Y+49, r12	; 0x31
    9b3c:	da aa       	std	Y+50, r13	; 0x32
    9b3e:	eb aa       	std	Y+51, r14	; 0x33
    9b40:	fc aa       	std	Y+52, r15	; 0x34
    9b42:	02 c0       	rjmp	.+4      	; 0x9b48 <move_window+0x6c>
    9b44:	80 e0       	ldi	r24, 0x00	; 0
    9b46:	90 e0       	ldi	r25, 0x00	; 0
    9b48:	cd b7       	in	r28, 0x3d	; 61
    9b4a:	de b7       	in	r29, 0x3e	; 62
    9b4c:	e8 e0       	ldi	r30, 0x08	; 8
    9b4e:	0c 94 3f e5 	jmp	0x1ca7e	; 0x1ca7e <__epilogue_restores__+0x14>

00009b52 <check_fs>:
    9b52:	cf 93       	push	r28
    9b54:	df 93       	push	r29
    9b56:	ec 01       	movw	r28, r24
    9b58:	1b 82       	std	Y+3, r1	; 0x03
    9b5a:	8f ef       	ldi	r24, 0xFF	; 255
    9b5c:	9f ef       	ldi	r25, 0xFF	; 255
    9b5e:	dc 01       	movw	r26, r24
    9b60:	89 ab       	std	Y+49, r24	; 0x31
    9b62:	9a ab       	std	Y+50, r25	; 0x32
    9b64:	ab ab       	std	Y+51, r26	; 0x33
    9b66:	bc ab       	std	Y+52, r27	; 0x34
    9b68:	ce 01       	movw	r24, r28
    9b6a:	b8 df       	rcall	.-144    	; 0x9adc <move_window>
    9b6c:	89 2b       	or	r24, r25
    9b6e:	19 f5       	brne	.+70     	; 0x9bb6 <check_fs+0x64>
    9b70:	fe 01       	movw	r30, r28
    9b72:	ed 5c       	subi	r30, 0xCD	; 205
    9b74:	fd 4f       	sbci	r31, 0xFD	; 253
    9b76:	80 81       	ld	r24, Z
    9b78:	91 81       	ldd	r25, Z+1	; 0x01
    9b7a:	85 35       	cpi	r24, 0x55	; 85
    9b7c:	9a 4a       	sbci	r25, 0xAA	; 170
    9b7e:	f1 f4       	brne	.+60     	; 0x9bbc <check_fs+0x6a>
    9b80:	8d a9       	ldd	r24, Y+53	; 0x35
    9b82:	8b 3e       	cpi	r24, 0xEB	; 235
    9b84:	19 f0       	breq	.+6      	; 0x9b8c <check_fs+0x3a>
    9b86:	88 5e       	subi	r24, 0xE8	; 232
    9b88:	82 30       	cpi	r24, 0x02	; 2
    9b8a:	f0 f4       	brcc	.+60     	; 0x9bc8 <check_fs+0x76>
    9b8c:	43 e0       	ldi	r20, 0x03	; 3
    9b8e:	50 e0       	ldi	r21, 0x00	; 0
    9b90:	64 ee       	ldi	r22, 0xE4	; 228
    9b92:	77 e0       	ldi	r23, 0x07	; 7
    9b94:	ce 01       	movw	r24, r28
    9b96:	85 59       	subi	r24, 0x95	; 149
    9b98:	9f 4f       	sbci	r25, 0xFF	; 255
    9b9a:	e9 da       	rcall	.-2606   	; 0x916e <mem_cmp>
    9b9c:	89 2b       	or	r24, r25
    9b9e:	89 f0       	breq	.+34     	; 0x9bc2 <check_fs+0x70>
    9ba0:	45 e0       	ldi	r20, 0x05	; 5
    9ba2:	50 e0       	ldi	r21, 0x00	; 0
    9ba4:	6f e3       	ldi	r22, 0x3F	; 63
    9ba6:	73 e0       	ldi	r23, 0x03	; 3
    9ba8:	ce 01       	movw	r24, r28
    9baa:	89 57       	subi	r24, 0x79	; 121
    9bac:	9f 4f       	sbci	r25, 0xFF	; 255
    9bae:	df da       	rcall	.-2626   	; 0x916e <mem_cmp>
    9bb0:	89 2b       	or	r24, r25
    9bb2:	51 f4       	brne	.+20     	; 0x9bc8 <check_fs+0x76>
    9bb4:	06 c0       	rjmp	.+12     	; 0x9bc2 <check_fs+0x70>
    9bb6:	84 e0       	ldi	r24, 0x04	; 4
    9bb8:	90 e0       	ldi	r25, 0x00	; 0
    9bba:	08 c0       	rjmp	.+16     	; 0x9bcc <check_fs+0x7a>
    9bbc:	83 e0       	ldi	r24, 0x03	; 3
    9bbe:	90 e0       	ldi	r25, 0x00	; 0
    9bc0:	05 c0       	rjmp	.+10     	; 0x9bcc <check_fs+0x7a>
    9bc2:	80 e0       	ldi	r24, 0x00	; 0
    9bc4:	90 e0       	ldi	r25, 0x00	; 0
    9bc6:	02 c0       	rjmp	.+4      	; 0x9bcc <check_fs+0x7a>
    9bc8:	82 e0       	ldi	r24, 0x02	; 2
    9bca:	90 e0       	ldi	r25, 0x00	; 0
    9bcc:	df 91       	pop	r29
    9bce:	cf 91       	pop	r28
    9bd0:	08 95       	ret

00009bd2 <mount_volume>:
    9bd2:	a0 e2       	ldi	r26, 0x20	; 32
    9bd4:	b0 e0       	ldi	r27, 0x00	; 0
    9bd6:	ef ee       	ldi	r30, 0xEF	; 239
    9bd8:	fd e4       	ldi	r31, 0x4D	; 77
    9bda:	0c 94 1b e5 	jmp	0x1ca36	; 0x1ca36 <__prologue_saves__+0x4>
    9bde:	5b 01       	movw	r10, r22
    9be0:	f4 2e       	mov	r15, r20
    9be2:	db 01       	movw	r26, r22
    9be4:	1d 92       	st	X+, r1
    9be6:	1c 92       	st	X, r1
    9be8:	ca db       	rcall	.-2156   	; 0x937e <get_ldnumber>
    9bea:	6c 01       	movw	r12, r24
    9bec:	97 fd       	sbrc	r25, 7
    9bee:	39 c2       	rjmp	.+1138   	; 0xa062 <mount_volume+0x490>
    9bf0:	fc 01       	movw	r30, r24
    9bf2:	ee 0f       	add	r30, r30
    9bf4:	ff 1f       	adc	r31, r31
    9bf6:	e1 54       	subi	r30, 0x41	; 65
    9bf8:	f8 4e       	sbci	r31, 0xE8	; 232
    9bfa:	00 81       	ld	r16, Z
    9bfc:	11 81       	ldd	r17, Z+1	; 0x01
    9bfe:	01 15       	cp	r16, r1
    9c00:	11 05       	cpc	r17, r1
    9c02:	09 f4       	brne	.+2      	; 0x9c06 <mount_volume+0x34>
    9c04:	31 c2       	rjmp	.+1122   	; 0xa068 <mount_volume+0x496>
    9c06:	f5 01       	movw	r30, r10
    9c08:	11 83       	std	Z+1, r17	; 0x01
    9c0a:	00 83       	st	Z, r16
    9c0c:	ff 2d       	mov	r31, r15
    9c0e:	fe 7f       	andi	r31, 0xFE	; 254
    9c10:	ff 2e       	mov	r15, r31
    9c12:	d8 01       	movw	r26, r16
    9c14:	8c 91       	ld	r24, X
    9c16:	88 23       	and	r24, r24
    9c18:	71 f0       	breq	.+28     	; 0x9c36 <mount_volume+0x64>
    9c1a:	f8 01       	movw	r30, r16
    9c1c:	81 81       	ldd	r24, Z+1	; 0x01
    9c1e:	0e 94 ab 6b 	call	0xd756	; 0xd756 <disk_status>
    9c22:	80 fd       	sbrc	r24, 0
    9c24:	08 c0       	rjmp	.+16     	; 0x9c36 <mount_volume+0x64>
    9c26:	ff 20       	and	r15, r15
    9c28:	09 f4       	brne	.+2      	; 0x9c2c <mount_volume+0x5a>
    9c2a:	21 c2       	rjmp	.+1090   	; 0xa06e <mount_volume+0x49c>
    9c2c:	82 ff       	sbrs	r24, 2
    9c2e:	1f c2       	rjmp	.+1086   	; 0xa06e <mount_volume+0x49c>
    9c30:	8a e0       	ldi	r24, 0x0A	; 10
    9c32:	90 e0       	ldi	r25, 0x00	; 0
    9c34:	24 c2       	rjmp	.+1096   	; 0xa07e <mount_volume+0x4ac>
    9c36:	d8 01       	movw	r26, r16
    9c38:	1c 92       	st	X, r1
    9c3a:	f8 01       	movw	r30, r16
    9c3c:	c1 82       	std	Z+1, r12	; 0x01
    9c3e:	8c 2d       	mov	r24, r12
    9c40:	0e 94 b1 6b 	call	0xd762	; 0xd762 <disk_initialize>
    9c44:	80 fd       	sbrc	r24, 0
    9c46:	16 c2       	rjmp	.+1068   	; 0xa074 <mount_volume+0x4a2>
    9c48:	ff 20       	and	r15, r15
    9c4a:	11 f0       	breq	.+4      	; 0x9c50 <mount_volume+0x7e>
    9c4c:	82 fd       	sbrc	r24, 2
    9c4e:	f0 cf       	rjmp	.-32     	; 0x9c30 <mount_volume+0x5e>
    9c50:	40 e0       	ldi	r20, 0x00	; 0
    9c52:	50 e0       	ldi	r21, 0x00	; 0
    9c54:	ba 01       	movw	r22, r20
    9c56:	c8 01       	movw	r24, r16
    9c58:	7c df       	rcall	.-264    	; 0x9b52 <check_fs>
    9c5a:	82 30       	cpi	r24, 0x02	; 2
    9c5c:	91 05       	cpc	r25, r1
    9c5e:	b9 f5       	brne	.+110    	; 0x9cce <mount_volume+0xfc>
    9c60:	68 01       	movw	r12, r16
    9c62:	f5 e0       	ldi	r31, 0x05	; 5
    9c64:	cf 1a       	sub	r12, r31
    9c66:	fe ef       	ldi	r31, 0xFE	; 254
    9c68:	df 0a       	sbc	r13, r31
    9c6a:	9e 01       	movw	r18, r28
    9c6c:	2f 5f       	subi	r18, 0xFF	; 255
    9c6e:	3f 4f       	sbci	r19, 0xFF	; 255
    9c70:	79 01       	movw	r14, r18
    9c72:	48 01       	movw	r8, r16
    9c74:	35 ec       	ldi	r19, 0xC5	; 197
    9c76:	83 1a       	sub	r8, r19
    9c78:	3d ef       	ldi	r19, 0xFD	; 253
    9c7a:	93 0a       	sbc	r9, r19
    9c7c:	57 01       	movw	r10, r14
    9c7e:	c6 01       	movw	r24, r12
    9c80:	52 da       	rcall	.-2908   	; 0x9126 <ld_dword>
    9c82:	d5 01       	movw	r26, r10
    9c84:	6d 93       	st	X+, r22
    9c86:	7d 93       	st	X+, r23
    9c88:	8d 93       	st	X+, r24
    9c8a:	9d 93       	st	X+, r25
    9c8c:	5d 01       	movw	r10, r26
    9c8e:	b0 e1       	ldi	r27, 0x10	; 16
    9c90:	cb 0e       	add	r12, r27
    9c92:	d1 1c       	adc	r13, r1
    9c94:	c8 14       	cp	r12, r8
    9c96:	d9 04       	cpc	r13, r9
    9c98:	91 f7       	brne	.-28     	; 0x9c7e <mount_volume+0xac>
    9c9a:	6e 01       	movw	r12, r28
    9c9c:	e1 e1       	ldi	r30, 0x11	; 17
    9c9e:	ce 0e       	add	r12, r30
    9ca0:	d1 1c       	adc	r13, r1
    9ca2:	d7 01       	movw	r26, r14
    9ca4:	4d 91       	ld	r20, X+
    9ca6:	5d 91       	ld	r21, X+
    9ca8:	6d 91       	ld	r22, X+
    9caa:	7d 91       	ld	r23, X+
    9cac:	7d 01       	movw	r14, r26
    9cae:	41 15       	cp	r20, r1
    9cb0:	51 05       	cpc	r21, r1
    9cb2:	61 05       	cpc	r22, r1
    9cb4:	71 05       	cpc	r23, r1
    9cb6:	31 f0       	breq	.+12     	; 0x9cc4 <mount_volume+0xf2>
    9cb8:	c8 01       	movw	r24, r16
    9cba:	4b df       	rcall	.-362    	; 0x9b52 <check_fs>
    9cbc:	82 30       	cpi	r24, 0x02	; 2
    9cbe:	91 05       	cpc	r25, r1
    9cc0:	18 f4       	brcc	.+6      	; 0x9cc8 <mount_volume+0xf6>
    9cc2:	05 c0       	rjmp	.+10     	; 0x9cce <mount_volume+0xfc>
    9cc4:	83 e0       	ldi	r24, 0x03	; 3
    9cc6:	90 e0       	ldi	r25, 0x00	; 0
    9cc8:	ce 14       	cp	r12, r14
    9cca:	df 04       	cpc	r13, r15
    9ccc:	51 f7       	brne	.-44     	; 0x9ca2 <mount_volume+0xd0>
    9cce:	84 30       	cpi	r24, 0x04	; 4
    9cd0:	91 05       	cpc	r25, r1
    9cd2:	09 f4       	brne	.+2      	; 0x9cd6 <mount_volume+0x104>
    9cd4:	d2 c1       	rjmp	.+932    	; 0xa07a <mount_volume+0x4a8>
    9cd6:	02 97       	sbiw	r24, 0x02	; 2
    9cd8:	18 f0       	brcs	.+6      	; 0x9ce0 <mount_volume+0x10e>
    9cda:	8d e0       	ldi	r24, 0x0D	; 13
    9cdc:	90 e0       	ldi	r25, 0x00	; 0
    9cde:	cf c1       	rjmp	.+926    	; 0xa07e <mount_volume+0x4ac>
    9ce0:	f8 01       	movw	r30, r16
    9ce2:	e0 5c       	subi	r30, 0xC0	; 192
    9ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    9ce6:	80 81       	ld	r24, Z
    9ce8:	91 81       	ldd	r25, Z+1	; 0x01
    9cea:	81 15       	cp	r24, r1
    9cec:	92 40       	sbci	r25, 0x02	; 2
    9cee:	a9 f7       	brne	.-22     	; 0x9cda <mount_volume+0x108>
    9cf0:	3b 96       	adiw	r30, 0x0b	; 11
    9cf2:	40 80       	ld	r4, Z
    9cf4:	51 80       	ldd	r5, Z+1	; 0x01
    9cf6:	41 14       	cp	r4, r1
    9cf8:	51 04       	cpc	r5, r1
    9cfa:	19 f0       	breq	.+6      	; 0x9d02 <mount_volume+0x130>
    9cfc:	61 2c       	mov	r6, r1
    9cfe:	71 2c       	mov	r7, r1
    9d00:	06 c0       	rjmp	.+12     	; 0x9d0e <mount_volume+0x13c>
    9d02:	c8 01       	movw	r24, r16
    9d04:	87 5a       	subi	r24, 0xA7	; 167
    9d06:	9f 4f       	sbci	r25, 0xFF	; 255
    9d08:	0e da       	rcall	.-3044   	; 0x9126 <ld_dword>
    9d0a:	2b 01       	movw	r4, r22
    9d0c:	3c 01       	movw	r6, r24
    9d0e:	f8 01       	movw	r30, r16
    9d10:	21 a9       	ldd	r18, Z+49	; 0x31
    9d12:	32 a9       	ldd	r19, Z+50	; 0x32
    9d14:	43 a9       	ldd	r20, Z+51	; 0x33
    9d16:	54 a9       	ldd	r21, Z+52	; 0x34
    9d18:	29 8b       	std	Y+17, r18	; 0x11
    9d1a:	3a 8b       	std	Y+18, r19	; 0x12
    9d1c:	4b 8b       	std	Y+19, r20	; 0x13
    9d1e:	5c 8b       	std	Y+20, r21	; 0x14
    9d20:	45 8e       	std	Z+29, r4	; 0x1d
    9d22:	56 8e       	std	Z+30, r5	; 0x1e
    9d24:	67 8e       	std	Z+31, r6	; 0x1f
    9d26:	70 a2       	std	Z+32, r7	; 0x20
    9d28:	eb 5b       	subi	r30, 0xBB	; 187
    9d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    9d2c:	a0 80       	ld	r10, Z
    9d2e:	f8 01       	movw	r30, r16
    9d30:	a2 82       	std	Z+2, r10	; 0x02
    9d32:	8f ef       	ldi	r24, 0xFF	; 255
    9d34:	8a 0d       	add	r24, r10
    9d36:	82 30       	cpi	r24, 0x02	; 2
    9d38:	80 f6       	brcc	.-96     	; 0x9cda <mount_volume+0x108>
    9d3a:	ee 5b       	subi	r30, 0xBE	; 190
    9d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    9d3e:	b0 80       	ld	r11, Z
    9d40:	8b 2d       	mov	r24, r11
    9d42:	90 e0       	ldi	r25, 0x00	; 0
    9d44:	f8 01       	movw	r30, r16
    9d46:	92 87       	std	Z+10, r25	; 0x0a
    9d48:	81 87       	std	Z+9, r24	; 0x09
    9d4a:	00 97       	sbiw	r24, 0x00	; 0
    9d4c:	31 f2       	breq	.-116    	; 0x9cda <mount_volume+0x108>
    9d4e:	9c 01       	movw	r18, r24
    9d50:	21 50       	subi	r18, 0x01	; 1
    9d52:	31 09       	sbc	r19, r1
    9d54:	82 23       	and	r24, r18
    9d56:	93 23       	and	r25, r19
    9d58:	89 2b       	or	r24, r25
    9d5a:	09 f0       	breq	.+2      	; 0x9d5e <mount_volume+0x18c>
    9d5c:	be cf       	rjmp	.-132    	; 0x9cda <mount_volume+0x108>
    9d5e:	ea 5b       	subi	r30, 0xBA	; 186
    9d60:	ff 4f       	sbci	r31, 0xFF	; 255
    9d62:	80 80       	ld	r8, Z
    9d64:	91 80       	ldd	r9, Z+1	; 0x01
    9d66:	f8 01       	movw	r30, r16
    9d68:	90 86       	std	Z+8, r9	; 0x08
    9d6a:	87 82       	std	Z+7, r8	; 0x07
    9d6c:	c4 01       	movw	r24, r8
    9d6e:	8f 70       	andi	r24, 0x0F	; 15
    9d70:	99 27       	eor	r25, r25
    9d72:	89 2b       	or	r24, r25
    9d74:	09 f0       	breq	.+2      	; 0x9d78 <mount_volume+0x1a6>
    9d76:	b1 cf       	rjmp	.-158    	; 0x9cda <mount_volume+0x108>
    9d78:	e8 5b       	subi	r30, 0xB8	; 184
    9d7a:	ff 4f       	sbci	r31, 0xFF	; 255
    9d7c:	80 81       	ld	r24, Z
    9d7e:	91 81       	ldd	r25, Z+1	; 0x01
    9d80:	6c 01       	movw	r12, r24
    9d82:	e1 2c       	mov	r14, r1
    9d84:	f1 2c       	mov	r15, r1
    9d86:	89 2b       	or	r24, r25
    9d88:	31 f4       	brne	.+12     	; 0x9d96 <mount_volume+0x1c4>
    9d8a:	c8 01       	movw	r24, r16
    9d8c:	8b 5a       	subi	r24, 0xAB	; 171
    9d8e:	9f 4f       	sbci	r25, 0xFF	; 255
    9d90:	ca d9       	rcall	.-3180   	; 0x9126 <ld_dword>
    9d92:	6b 01       	movw	r12, r22
    9d94:	7c 01       	movw	r14, r24
    9d96:	f8 01       	movw	r30, r16
    9d98:	ed 5b       	subi	r30, 0xBD	; 189
    9d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    9d9c:	01 90       	ld	r0, Z+
    9d9e:	f0 81       	ld	r31, Z
    9da0:	e0 2d       	mov	r30, r0
    9da2:	30 97       	sbiw	r30, 0x00	; 0
    9da4:	09 f4       	brne	.+2      	; 0x9da8 <mount_volume+0x1d6>
    9da6:	99 cf       	rjmp	.-206    	; 0x9cda <mount_volume+0x108>
    9da8:	aa 2d       	mov	r26, r10
    9daa:	b0 e0       	ldi	r27, 0x00	; 0
    9dac:	a3 01       	movw	r20, r6
    9dae:	92 01       	movw	r18, r4
    9db0:	0e 94 f9 e4 	call	0x1c9f2	; 0x1c9f2 <__muluhisi3>
    9db4:	69 8f       	std	Y+25, r22	; 0x19
    9db6:	7a 8f       	std	Y+26, r23	; 0x1a
    9db8:	8b 8f       	std	Y+27, r24	; 0x1b
    9dba:	9c 8f       	std	Y+28, r25	; 0x1c
    9dbc:	9f 01       	movw	r18, r30
    9dbe:	40 e0       	ldi	r20, 0x00	; 0
    9dc0:	50 e0       	ldi	r21, 0x00	; 0
    9dc2:	2d 8f       	std	Y+29, r18	; 0x1d
    9dc4:	3e 8f       	std	Y+30, r19	; 0x1e
    9dc6:	4f 8f       	std	Y+31, r20	; 0x1f
    9dc8:	58 a3       	std	Y+32, r21	; 0x20
    9dca:	c4 01       	movw	r24, r8
    9dcc:	f4 e0       	ldi	r31, 0x04	; 4
    9dce:	96 95       	lsr	r25
    9dd0:	87 95       	ror	r24
    9dd2:	fa 95       	dec	r31
    9dd4:	e1 f7       	brne	.-8      	; 0x9dce <mount_volume+0x1fc>
    9dd6:	28 0f       	add	r18, r24
    9dd8:	39 1f       	adc	r19, r25
    9dda:	41 1d       	adc	r20, r1
    9ddc:	51 1d       	adc	r21, r1
    9dde:	da 01       	movw	r26, r20
    9de0:	c9 01       	movw	r24, r18
    9de2:	29 8d       	ldd	r18, Y+25	; 0x19
    9de4:	3a 8d       	ldd	r19, Y+26	; 0x1a
    9de6:	4b 8d       	ldd	r20, Y+27	; 0x1b
    9de8:	5c 8d       	ldd	r21, Y+28	; 0x1c
    9dea:	28 0f       	add	r18, r24
    9dec:	39 1f       	adc	r19, r25
    9dee:	4a 1f       	adc	r20, r26
    9df0:	5b 1f       	adc	r21, r27
    9df2:	2d 8b       	std	Y+21, r18	; 0x15
    9df4:	3e 8b       	std	Y+22, r19	; 0x16
    9df6:	4f 8b       	std	Y+23, r20	; 0x17
    9df8:	58 8f       	std	Y+24, r21	; 0x18
    9dfa:	c2 16       	cp	r12, r18
    9dfc:	d3 06       	cpc	r13, r19
    9dfe:	e4 06       	cpc	r14, r20
    9e00:	f5 06       	cpc	r15, r21
    9e02:	08 f4       	brcc	.+2      	; 0x9e06 <mount_volume+0x234>
    9e04:	6a cf       	rjmp	.-300    	; 0x9cda <mount_volume+0x108>
    9e06:	c7 01       	movw	r24, r14
    9e08:	b6 01       	movw	r22, r12
    9e0a:	62 1b       	sub	r22, r18
    9e0c:	73 0b       	sbc	r23, r19
    9e0e:	84 0b       	sbc	r24, r20
    9e10:	95 0b       	sbc	r25, r21
    9e12:	2b 2d       	mov	r18, r11
    9e14:	30 e0       	ldi	r19, 0x00	; 0
    9e16:	40 e0       	ldi	r20, 0x00	; 0
    9e18:	50 e0       	ldi	r21, 0x00	; 0
    9e1a:	0e 94 97 e4 	call	0x1c92e	; 0x1c92e <__udivmodsi4>
    9e1e:	da 01       	movw	r26, r20
    9e20:	c9 01       	movw	r24, r18
    9e22:	01 97       	sbiw	r24, 0x01	; 1
    9e24:	a1 09       	sbc	r26, r1
    9e26:	b1 09       	sbc	r27, r1
    9e28:	85 3f       	cpi	r24, 0xF5	; 245
    9e2a:	9f 4f       	sbci	r25, 0xFF	; 255
    9e2c:	af 4f       	sbci	r26, 0xFF	; 255
    9e2e:	bf 40       	sbci	r27, 0x0F	; 15
    9e30:	08 f0       	brcs	.+2      	; 0x9e34 <mount_volume+0x262>
    9e32:	53 cf       	rjmp	.-346    	; 0x9cda <mount_volume+0x108>
    9e34:	26 3f       	cpi	r18, 0xF6	; 246
    9e36:	8f ef       	ldi	r24, 0xFF	; 255
    9e38:	38 07       	cpc	r19, r24
    9e3a:	41 05       	cpc	r20, r1
    9e3c:	51 05       	cpc	r21, r1
    9e3e:	50 f4       	brcc	.+20     	; 0x9e54 <mount_volume+0x282>
    9e40:	26 3f       	cpi	r18, 0xF6	; 246
    9e42:	9f e0       	ldi	r25, 0x0F	; 15
    9e44:	39 07       	cpc	r19, r25
    9e46:	41 05       	cpc	r20, r1
    9e48:	51 05       	cpc	r21, r1
    9e4a:	40 f4       	brcc	.+16     	; 0x9e5c <mount_volume+0x28a>
    9e4c:	aa 24       	eor	r10, r10
    9e4e:	a3 94       	inc	r10
    9e50:	b1 2c       	mov	r11, r1
    9e52:	07 c0       	rjmp	.+14     	; 0x9e62 <mount_volume+0x290>
    9e54:	73 e0       	ldi	r23, 0x03	; 3
    9e56:	a7 2e       	mov	r10, r23
    9e58:	b1 2c       	mov	r11, r1
    9e5a:	03 c0       	rjmp	.+6      	; 0x9e62 <mount_volume+0x290>
    9e5c:	62 e0       	ldi	r22, 0x02	; 2
    9e5e:	a6 2e       	mov	r10, r22
    9e60:	b1 2c       	mov	r11, r1
    9e62:	69 01       	movw	r12, r18
    9e64:	7a 01       	movw	r14, r20
    9e66:	a2 e0       	ldi	r26, 0x02	; 2
    9e68:	ca 0e       	add	r12, r26
    9e6a:	d1 1c       	adc	r13, r1
    9e6c:	e1 1c       	adc	r14, r1
    9e6e:	f1 1c       	adc	r15, r1
    9e70:	f8 01       	movw	r30, r16
    9e72:	c1 8e       	std	Z+25, r12	; 0x19
    9e74:	d2 8e       	std	Z+26, r13	; 0x1a
    9e76:	e3 8e       	std	Z+27, r14	; 0x1b
    9e78:	f4 8e       	std	Z+28, r15	; 0x1c
    9e7a:	29 89       	ldd	r18, Y+17	; 0x11
    9e7c:	3a 89       	ldd	r19, Y+18	; 0x12
    9e7e:	4b 89       	ldd	r20, Y+19	; 0x13
    9e80:	5c 89       	ldd	r21, Y+20	; 0x14
    9e82:	21 a3       	std	Z+33, r18	; 0x21
    9e84:	32 a3       	std	Z+34, r19	; 0x22
    9e86:	43 a3       	std	Z+35, r20	; 0x23
    9e88:	54 a3       	std	Z+36, r21	; 0x24
    9e8a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9e8c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9e8e:	af 8d       	ldd	r26, Y+31	; 0x1f
    9e90:	b8 a1       	ldd	r27, Y+32	; 0x20
    9e92:	28 0f       	add	r18, r24
    9e94:	39 1f       	adc	r19, r25
    9e96:	4a 1f       	adc	r20, r26
    9e98:	5b 1f       	adc	r21, r27
    9e9a:	2d 8f       	std	Y+29, r18	; 0x1d
    9e9c:	3e 8f       	std	Y+30, r19	; 0x1e
    9e9e:	4f 8f       	std	Y+31, r20	; 0x1f
    9ea0:	58 a3       	std	Y+32, r21	; 0x20
    9ea2:	25 a3       	std	Z+37, r18	; 0x25
    9ea4:	36 a3       	std	Z+38, r19	; 0x26
    9ea6:	47 a3       	std	Z+39, r20	; 0x27
    9ea8:	50 a7       	std	Z+40, r21	; 0x28
    9eaa:	49 89       	ldd	r20, Y+17	; 0x11
    9eac:	5a 89       	ldd	r21, Y+18	; 0x12
    9eae:	6b 89       	ldd	r22, Y+19	; 0x13
    9eb0:	7c 89       	ldd	r23, Y+20	; 0x14
    9eb2:	8d 89       	ldd	r24, Y+21	; 0x15
    9eb4:	9e 89       	ldd	r25, Y+22	; 0x16
    9eb6:	af 89       	ldd	r26, Y+23	; 0x17
    9eb8:	b8 8d       	ldd	r27, Y+24	; 0x18
    9eba:	48 0f       	add	r20, r24
    9ebc:	59 1f       	adc	r21, r25
    9ebe:	6a 1f       	adc	r22, r26
    9ec0:	7b 1f       	adc	r23, r27
    9ec2:	45 a7       	std	Z+45, r20	; 0x2d
    9ec4:	56 a7       	std	Z+46, r21	; 0x2e
    9ec6:	67 a7       	std	Z+47, r22	; 0x2f
    9ec8:	70 ab       	std	Z+48, r23	; 0x30
    9eca:	f3 e0       	ldi	r31, 0x03	; 3
    9ecc:	af 16       	cp	r10, r31
    9ece:	b1 04       	cpc	r11, r1
    9ed0:	e9 f4       	brne	.+58     	; 0x9f0c <mount_volume+0x33a>
    9ed2:	f8 01       	movw	r30, r16
    9ed4:	e1 5a       	subi	r30, 0xA1	; 161
    9ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    9ed8:	80 81       	ld	r24, Z
    9eda:	91 81       	ldd	r25, Z+1	; 0x01
    9edc:	89 2b       	or	r24, r25
    9ede:	09 f0       	breq	.+2      	; 0x9ee2 <mount_volume+0x310>
    9ee0:	fc ce       	rjmp	.-520    	; 0x9cda <mount_volume+0x108>
    9ee2:	81 14       	cp	r8, r1
    9ee4:	91 04       	cpc	r9, r1
    9ee6:	09 f0       	breq	.+2      	; 0x9eea <mount_volume+0x318>
    9ee8:	f8 ce       	rjmp	.-528    	; 0x9cda <mount_volume+0x108>
    9eea:	c8 01       	movw	r24, r16
    9eec:	8f 59       	subi	r24, 0x9F	; 159
    9eee:	9f 4f       	sbci	r25, 0xFF	; 255
    9ef0:	1a d9       	rcall	.-3532   	; 0x9126 <ld_dword>
    9ef2:	f8 01       	movw	r30, r16
    9ef4:	61 a7       	std	Z+41, r22	; 0x29
    9ef6:	72 a7       	std	Z+42, r23	; 0x2a
    9ef8:	83 a7       	std	Z+43, r24	; 0x2b
    9efa:	94 a7       	std	Z+44, r25	; 0x2c
    9efc:	42 e0       	ldi	r20, 0x02	; 2
    9efe:	cc 0c       	add	r12, r12
    9f00:	dd 1c       	adc	r13, r13
    9f02:	ee 1c       	adc	r14, r14
    9f04:	ff 1c       	adc	r15, r15
    9f06:	4a 95       	dec	r20
    9f08:	d1 f7       	brne	.-12     	; 0x9efe <mount_volume+0x32c>
    9f0a:	33 c0       	rjmp	.+102    	; 0x9f72 <mount_volume+0x3a0>
    9f0c:	81 14       	cp	r8, r1
    9f0e:	91 04       	cpc	r9, r1
    9f10:	09 f4       	brne	.+2      	; 0x9f14 <mount_volume+0x342>
    9f12:	e3 ce       	rjmp	.-570    	; 0x9cda <mount_volume+0x108>
    9f14:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9f16:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9f18:	af 8d       	ldd	r26, Y+31	; 0x1f
    9f1a:	b8 a1       	ldd	r27, Y+32	; 0x20
    9f1c:	29 8d       	ldd	r18, Y+25	; 0x19
    9f1e:	3a 8d       	ldd	r19, Y+26	; 0x1a
    9f20:	4b 8d       	ldd	r20, Y+27	; 0x1b
    9f22:	5c 8d       	ldd	r21, Y+28	; 0x1c
    9f24:	82 0f       	add	r24, r18
    9f26:	93 1f       	adc	r25, r19
    9f28:	a4 1f       	adc	r26, r20
    9f2a:	b5 1f       	adc	r27, r21
    9f2c:	f8 01       	movw	r30, r16
    9f2e:	81 a7       	std	Z+41, r24	; 0x29
    9f30:	92 a7       	std	Z+42, r25	; 0x2a
    9f32:	a3 a7       	std	Z+43, r26	; 0x2b
    9f34:	b4 a7       	std	Z+44, r27	; 0x2c
    9f36:	f2 e0       	ldi	r31, 0x02	; 2
    9f38:	af 16       	cp	r10, r31
    9f3a:	b1 04       	cpc	r11, r1
    9f3c:	29 f4       	brne	.+10     	; 0x9f48 <mount_volume+0x376>
    9f3e:	cc 0c       	add	r12, r12
    9f40:	dd 1c       	adc	r13, r13
    9f42:	ee 1c       	adc	r14, r14
    9f44:	ff 1c       	adc	r15, r15
    9f46:	15 c0       	rjmp	.+42     	; 0x9f72 <mount_volume+0x3a0>
    9f48:	a3 e0       	ldi	r26, 0x03	; 3
    9f4a:	b0 e0       	ldi	r27, 0x00	; 0
    9f4c:	a7 01       	movw	r20, r14
    9f4e:	96 01       	movw	r18, r12
    9f50:	0e 94 f9 e4 	call	0x1c9f2	; 0x1c9f2 <__muluhisi3>
    9f54:	dc 01       	movw	r26, r24
    9f56:	cb 01       	movw	r24, r22
    9f58:	b6 95       	lsr	r27
    9f5a:	a7 95       	ror	r26
    9f5c:	97 95       	ror	r25
    9f5e:	87 95       	ror	r24
    9f60:	21 e0       	ldi	r18, 0x01	; 1
    9f62:	c2 22       	and	r12, r18
    9f64:	dd 24       	eor	r13, r13
    9f66:	ee 24       	eor	r14, r14
    9f68:	ff 24       	eor	r15, r15
    9f6a:	c8 0e       	add	r12, r24
    9f6c:	d9 1e       	adc	r13, r25
    9f6e:	ea 1e       	adc	r14, r26
    9f70:	fb 1e       	adc	r15, r27
    9f72:	3f ef       	ldi	r19, 0xFF	; 255
    9f74:	c3 0e       	add	r12, r19
    9f76:	31 e0       	ldi	r19, 0x01	; 1
    9f78:	d3 1e       	adc	r13, r19
    9f7a:	e1 1c       	adc	r14, r1
    9f7c:	f1 1c       	adc	r15, r1
    9f7e:	89 e0       	ldi	r24, 0x09	; 9
    9f80:	f6 94       	lsr	r15
    9f82:	e7 94       	ror	r14
    9f84:	d7 94       	ror	r13
    9f86:	c7 94       	ror	r12
    9f88:	8a 95       	dec	r24
    9f8a:	d1 f7       	brne	.-12     	; 0x9f80 <mount_volume+0x3ae>
    9f8c:	4c 14       	cp	r4, r12
    9f8e:	5d 04       	cpc	r5, r13
    9f90:	6e 04       	cpc	r6, r14
    9f92:	7f 04       	cpc	r7, r15
    9f94:	08 f4       	brcc	.+2      	; 0x9f98 <mount_volume+0x3c6>
    9f96:	a1 ce       	rjmp	.-702    	; 0x9cda <mount_volume+0x108>
    9f98:	8f ef       	ldi	r24, 0xFF	; 255
    9f9a:	9f ef       	ldi	r25, 0xFF	; 255
    9f9c:	dc 01       	movw	r26, r24
    9f9e:	f8 01       	movw	r30, r16
    9fa0:	81 8b       	std	Z+17, r24	; 0x11
    9fa2:	92 8b       	std	Z+18, r25	; 0x12
    9fa4:	a3 8b       	std	Z+19, r26	; 0x13
    9fa6:	b4 8b       	std	Z+20, r27	; 0x14
    9fa8:	85 87       	std	Z+13, r24	; 0x0d
    9faa:	96 87       	std	Z+14, r25	; 0x0e
    9fac:	a7 87       	std	Z+15, r26	; 0x0f
    9fae:	b0 8b       	std	Z+16, r27	; 0x10
    9fb0:	80 e8       	ldi	r24, 0x80	; 128
    9fb2:	84 83       	std	Z+4, r24	; 0x04
    9fb4:	f3 e0       	ldi	r31, 0x03	; 3
    9fb6:	af 16       	cp	r10, r31
    9fb8:	b1 04       	cpc	r11, r1
    9fba:	09 f0       	breq	.+2      	; 0x9fbe <mount_volume+0x3ec>
    9fbc:	3f c0       	rjmp	.+126    	; 0xa03c <mount_volume+0x46a>
    9fbe:	f8 01       	movw	r30, r16
    9fc0:	eb 59       	subi	r30, 0x9B	; 155
    9fc2:	ff 4f       	sbci	r31, 0xFF	; 255
    9fc4:	80 81       	ld	r24, Z
    9fc6:	91 81       	ldd	r25, Z+1	; 0x01
    9fc8:	01 97       	sbiw	r24, 0x01	; 1
    9fca:	c1 f5       	brne	.+112    	; 0xa03c <mount_volume+0x46a>
    9fcc:	49 89       	ldd	r20, Y+17	; 0x11
    9fce:	5a 89       	ldd	r21, Y+18	; 0x12
    9fd0:	6b 89       	ldd	r22, Y+19	; 0x13
    9fd2:	7c 89       	ldd	r23, Y+20	; 0x14
    9fd4:	4f 5f       	subi	r20, 0xFF	; 255
    9fd6:	5f 4f       	sbci	r21, 0xFF	; 255
    9fd8:	6f 4f       	sbci	r22, 0xFF	; 255
    9fda:	7f 4f       	sbci	r23, 0xFF	; 255
    9fdc:	c8 01       	movw	r24, r16
    9fde:	7e dd       	rcall	.-1284   	; 0x9adc <move_window>
    9fe0:	89 2b       	or	r24, r25
    9fe2:	61 f5       	brne	.+88     	; 0xa03c <mount_volume+0x46a>
    9fe4:	f8 01       	movw	r30, r16
    9fe6:	14 82       	std	Z+4, r1	; 0x04
    9fe8:	ed 5c       	subi	r30, 0xCD	; 205
    9fea:	fd 4f       	sbci	r31, 0xFD	; 253
    9fec:	80 81       	ld	r24, Z
    9fee:	91 81       	ldd	r25, Z+1	; 0x01
    9ff0:	85 35       	cpi	r24, 0x55	; 85
    9ff2:	9a 4a       	sbci	r25, 0xAA	; 170
    9ff4:	19 f5       	brne	.+70     	; 0xa03c <mount_volume+0x46a>
    9ff6:	c8 01       	movw	r24, r16
    9ff8:	c5 96       	adiw	r24, 0x35	; 53
    9ffa:	95 d8       	rcall	.-3798   	; 0x9126 <ld_dword>
    9ffc:	62 35       	cpi	r22, 0x52	; 82
    9ffe:	72 45       	sbci	r23, 0x52	; 82
    a000:	81 46       	sbci	r24, 0x61	; 97
    a002:	91 44       	sbci	r25, 0x41	; 65
    a004:	d9 f4       	brne	.+54     	; 0xa03c <mount_volume+0x46a>
    a006:	c8 01       	movw	r24, r16
    a008:	87 5e       	subi	r24, 0xE7	; 231
    a00a:	9d 4f       	sbci	r25, 0xFD	; 253
    a00c:	8c d8       	rcall	.-3816   	; 0x9126 <ld_dword>
    a00e:	62 37       	cpi	r22, 0x72	; 114
    a010:	72 47       	sbci	r23, 0x72	; 114
    a012:	81 44       	sbci	r24, 0x41	; 65
    a014:	91 46       	sbci	r25, 0x61	; 97
    a016:	91 f4       	brne	.+36     	; 0xa03c <mount_volume+0x46a>
    a018:	c8 01       	movw	r24, r16
    a01a:	83 5e       	subi	r24, 0xE3	; 227
    a01c:	9d 4f       	sbci	r25, 0xFD	; 253
    a01e:	83 d8       	rcall	.-3834   	; 0x9126 <ld_dword>
    a020:	f8 01       	movw	r30, r16
    a022:	61 8b       	std	Z+17, r22	; 0x11
    a024:	72 8b       	std	Z+18, r23	; 0x12
    a026:	83 8b       	std	Z+19, r24	; 0x13
    a028:	94 8b       	std	Z+20, r25	; 0x14
    a02a:	c8 01       	movw	r24, r16
    a02c:	8f 5d       	subi	r24, 0xDF	; 223
    a02e:	9d 4f       	sbci	r25, 0xFD	; 253
    a030:	7a d8       	rcall	.-3852   	; 0x9126 <ld_dword>
    a032:	f8 01       	movw	r30, r16
    a034:	65 87       	std	Z+13, r22	; 0x0d
    a036:	76 87       	std	Z+14, r23	; 0x0e
    a038:	87 87       	std	Z+15, r24	; 0x0f
    a03a:	90 8b       	std	Z+16, r25	; 0x10
    a03c:	d8 01       	movw	r26, r16
    a03e:	ac 92       	st	X, r10
    a040:	80 91 bd 17 	lds	r24, 0x17BD	; 0x8017bd <Fsid>
    a044:	90 91 be 17 	lds	r25, 0x17BE	; 0x8017be <Fsid+0x1>
    a048:	01 96       	adiw	r24, 0x01	; 1
    a04a:	90 93 be 17 	sts	0x17BE, r25	; 0x8017be <Fsid+0x1>
    a04e:	80 93 bd 17 	sts	0x17BD, r24	; 0x8017bd <Fsid>
    a052:	f8 01       	movw	r30, r16
    a054:	96 83       	std	Z+6, r25	; 0x06
    a056:	85 83       	std	Z+5, r24	; 0x05
    a058:	15 8a       	std	Z+21, r1	; 0x15
    a05a:	16 8a       	std	Z+22, r1	; 0x16
    a05c:	17 8a       	std	Z+23, r1	; 0x17
    a05e:	10 8e       	std	Z+24, r1	; 0x18
    a060:	06 c0       	rjmp	.+12     	; 0xa06e <mount_volume+0x49c>
    a062:	8b e0       	ldi	r24, 0x0B	; 11
    a064:	90 e0       	ldi	r25, 0x00	; 0
    a066:	0b c0       	rjmp	.+22     	; 0xa07e <mount_volume+0x4ac>
    a068:	8c e0       	ldi	r24, 0x0C	; 12
    a06a:	90 e0       	ldi	r25, 0x00	; 0
    a06c:	08 c0       	rjmp	.+16     	; 0xa07e <mount_volume+0x4ac>
    a06e:	80 e0       	ldi	r24, 0x00	; 0
    a070:	90 e0       	ldi	r25, 0x00	; 0
    a072:	05 c0       	rjmp	.+10     	; 0xa07e <mount_volume+0x4ac>
    a074:	83 e0       	ldi	r24, 0x03	; 3
    a076:	90 e0       	ldi	r25, 0x00	; 0
    a078:	02 c0       	rjmp	.+4      	; 0xa07e <mount_volume+0x4ac>
    a07a:	81 e0       	ldi	r24, 0x01	; 1
    a07c:	90 e0       	ldi	r25, 0x00	; 0
    a07e:	a0 96       	adiw	r28, 0x20	; 32
    a080:	e0 e1       	ldi	r30, 0x10	; 16
    a082:	0c 94 37 e5 	jmp	0x1ca6e	; 0x1ca6e <__epilogue_restores__+0x4>

0000a086 <put_fat>:
    a086:	a6 e0       	ldi	r26, 0x06	; 6
    a088:	b0 e0       	ldi	r27, 0x00	; 0
    a08a:	e9 e4       	ldi	r30, 0x49	; 73
    a08c:	f0 e5       	ldi	r31, 0x50	; 80
    a08e:	0c 94 19 e5 	jmp	0x1ca32	; 0x1ca32 <__prologue_saves__>
    a092:	42 30       	cpi	r20, 0x02	; 2
    a094:	51 05       	cpc	r21, r1
    a096:	61 05       	cpc	r22, r1
    a098:	71 05       	cpc	r23, r1
    a09a:	08 f4       	brcc	.+2      	; 0xa09e <put_fat+0x18>
    a09c:	e7 c0       	rjmp	.+462    	; 0xa26c <put_fat+0x1e6>
    a09e:	fc 01       	movw	r30, r24
    a0a0:	c1 8c       	ldd	r12, Z+25	; 0x19
    a0a2:	d2 8c       	ldd	r13, Z+26	; 0x1a
    a0a4:	e3 8c       	ldd	r14, Z+27	; 0x1b
    a0a6:	f4 8c       	ldd	r15, Z+28	; 0x1c
    a0a8:	4c 15       	cp	r20, r12
    a0aa:	5d 05       	cpc	r21, r13
    a0ac:	6e 05       	cpc	r22, r14
    a0ae:	7f 05       	cpc	r23, r15
    a0b0:	08 f0       	brcs	.+2      	; 0xa0b4 <put_fat+0x2e>
    a0b2:	dc c0       	rjmp	.+440    	; 0xa26c <put_fat+0x1e6>
    a0b4:	28 01       	movw	r4, r16
    a0b6:	39 01       	movw	r6, r18
    a0b8:	6a 01       	movw	r12, r20
    a0ba:	7b 01       	movw	r14, r22
    a0bc:	9e 83       	std	Y+6, r25	; 0x06
    a0be:	8d 83       	std	Y+5, r24	; 0x05
    a0c0:	80 81       	ld	r24, Z
    a0c2:	82 30       	cpi	r24, 0x02	; 2
    a0c4:	09 f4       	brne	.+2      	; 0xa0c8 <put_fat+0x42>
    a0c6:	73 c0       	rjmp	.+230    	; 0xa1ae <put_fat+0x128>
    a0c8:	83 30       	cpi	r24, 0x03	; 3
    a0ca:	09 f4       	brne	.+2      	; 0xa0ce <put_fat+0x48>
    a0cc:	92 c0       	rjmp	.+292    	; 0xa1f2 <put_fat+0x16c>
    a0ce:	81 30       	cpi	r24, 0x01	; 1
    a0d0:	09 f0       	breq	.+2      	; 0xa0d4 <put_fat+0x4e>
    a0d2:	cc c0       	rjmp	.+408    	; 0xa26c <put_fat+0x1e6>
    a0d4:	4a 01       	movw	r8, r20
    a0d6:	96 94       	lsr	r9
    a0d8:	87 94       	ror	r8
    a0da:	84 0e       	add	r8, r20
    a0dc:	95 1e       	adc	r9, r21
    a0de:	c4 01       	movw	r24, r8
    a0e0:	89 2f       	mov	r24, r25
    a0e2:	99 27       	eor	r25, r25
    a0e4:	86 95       	lsr	r24
    a0e6:	45 a1       	ldd	r20, Z+37	; 0x25
    a0e8:	56 a1       	ldd	r21, Z+38	; 0x26
    a0ea:	67 a1       	ldd	r22, Z+39	; 0x27
    a0ec:	70 a5       	ldd	r23, Z+40	; 0x28
    a0ee:	48 0f       	add	r20, r24
    a0f0:	59 1f       	adc	r21, r25
    a0f2:	61 1d       	adc	r22, r1
    a0f4:	71 1d       	adc	r23, r1
    a0f6:	cf 01       	movw	r24, r30
    a0f8:	f1 dc       	rcall	.-1566   	; 0x9adc <move_window>
    a0fa:	5c 01       	movw	r10, r24
    a0fc:	89 2b       	or	r24, r25
    a0fe:	09 f0       	breq	.+2      	; 0xa102 <put_fat+0x7c>
    a100:	b8 c0       	rjmp	.+368    	; 0xa272 <put_fat+0x1ec>
    a102:	2d 80       	ldd	r2, Y+5	; 0x05
    a104:	3e 80       	ldd	r3, Y+6	; 0x06
    a106:	f5 e3       	ldi	r31, 0x35	; 53
    a108:	2f 0e       	add	r2, r31
    a10a:	31 1c       	adc	r3, r1
    a10c:	84 01       	movw	r16, r8
    a10e:	0f 5f       	subi	r16, 0xFF	; 255
    a110:	1f 4f       	sbci	r17, 0xFF	; 255
    a112:	21 e0       	ldi	r18, 0x01	; 1
    a114:	92 22       	and	r9, r18
    a116:	f1 01       	movw	r30, r2
    a118:	e8 0d       	add	r30, r8
    a11a:	f9 1d       	adc	r31, r9
    a11c:	d7 01       	movw	r26, r14
    a11e:	c6 01       	movw	r24, r12
    a120:	81 70       	andi	r24, 0x01	; 1
    a122:	99 27       	eor	r25, r25
    a124:	aa 27       	eor	r26, r26
    a126:	bb 27       	eor	r27, r27
    a128:	89 83       	std	Y+1, r24	; 0x01
    a12a:	9a 83       	std	Y+2, r25	; 0x02
    a12c:	ab 83       	std	Y+3, r26	; 0x03
    a12e:	bc 83       	std	Y+4, r27	; 0x04
    a130:	c0 fe       	sbrs	r12, 0
    a132:	09 c0       	rjmp	.+18     	; 0xa146 <put_fat+0xc0>
    a134:	80 81       	ld	r24, Z
    a136:	28 2f       	mov	r18, r24
    a138:	2f 70       	andi	r18, 0x0F	; 15
    a13a:	a0 e1       	ldi	r26, 0x10	; 16
    a13c:	4a 9e       	mul	r4, r26
    a13e:	c0 01       	movw	r24, r0
    a140:	11 24       	eor	r1, r1
    a142:	82 2b       	or	r24, r18
    a144:	01 c0       	rjmp	.+2      	; 0xa148 <put_fat+0xc2>
    a146:	84 2d       	mov	r24, r4
    a148:	80 83       	st	Z, r24
    a14a:	81 e0       	ldi	r24, 0x01	; 1
    a14c:	ed 81       	ldd	r30, Y+5	; 0x05
    a14e:	fe 81       	ldd	r31, Y+6	; 0x06
    a150:	83 83       	std	Z+3, r24	; 0x03
    a152:	45 a1       	ldd	r20, Z+37	; 0x25
    a154:	56 a1       	ldd	r21, Z+38	; 0x26
    a156:	67 a1       	ldd	r22, Z+39	; 0x27
    a158:	70 a5       	ldd	r23, Z+40	; 0x28
    a15a:	c8 01       	movw	r24, r16
    a15c:	89 2f       	mov	r24, r25
    a15e:	99 27       	eor	r25, r25
    a160:	86 95       	lsr	r24
    a162:	48 0f       	add	r20, r24
    a164:	59 1f       	adc	r21, r25
    a166:	61 1d       	adc	r22, r1
    a168:	71 1d       	adc	r23, r1
    a16a:	cf 01       	movw	r24, r30
    a16c:	b7 dc       	rcall	.-1682   	; 0x9adc <move_window>
    a16e:	5c 01       	movw	r10, r24
    a170:	89 2b       	or	r24, r25
    a172:	09 f0       	breq	.+2      	; 0xa176 <put_fat+0xf0>
    a174:	7e c0       	rjmp	.+252    	; 0xa272 <put_fat+0x1ec>
    a176:	11 70       	andi	r17, 0x01	; 1
    a178:	f1 01       	movw	r30, r2
    a17a:	e0 0f       	add	r30, r16
    a17c:	f1 1f       	adc	r31, r17
    a17e:	89 81       	ldd	r24, Y+1	; 0x01
    a180:	9a 81       	ldd	r25, Y+2	; 0x02
    a182:	ab 81       	ldd	r26, Y+3	; 0x03
    a184:	bc 81       	ldd	r27, Y+4	; 0x04
    a186:	89 2b       	or	r24, r25
    a188:	8a 2b       	or	r24, r26
    a18a:	8b 2b       	or	r24, r27
    a18c:	41 f0       	breq	.+16     	; 0xa19e <put_fat+0x118>
    a18e:	54 e0       	ldi	r21, 0x04	; 4
    a190:	76 94       	lsr	r7
    a192:	67 94       	ror	r6
    a194:	57 94       	ror	r5
    a196:	47 94       	ror	r4
    a198:	5a 95       	dec	r21
    a19a:	d1 f7       	brne	.-12     	; 0xa190 <put_fat+0x10a>
    a19c:	06 c0       	rjmp	.+12     	; 0xa1aa <put_fat+0x124>
    a19e:	00 81       	ld	r16, Z
    a1a0:	00 7f       	andi	r16, 0xF0	; 240
    a1a2:	85 2d       	mov	r24, r5
    a1a4:	8f 70       	andi	r24, 0x0F	; 15
    a1a6:	40 2e       	mov	r4, r16
    a1a8:	48 2a       	or	r4, r24
    a1aa:	40 82       	st	Z, r4
    a1ac:	5a c0       	rjmp	.+180    	; 0xa262 <put_fat+0x1dc>
    a1ae:	77 27       	eor	r23, r23
    a1b0:	6f 2d       	mov	r22, r15
    a1b2:	5e 2d       	mov	r21, r14
    a1b4:	4d 2d       	mov	r20, r13
    a1b6:	ed 81       	ldd	r30, Y+5	; 0x05
    a1b8:	fe 81       	ldd	r31, Y+6	; 0x06
    a1ba:	85 a1       	ldd	r24, Z+37	; 0x25
    a1bc:	96 a1       	ldd	r25, Z+38	; 0x26
    a1be:	a7 a1       	ldd	r26, Z+39	; 0x27
    a1c0:	b0 a5       	ldd	r27, Z+40	; 0x28
    a1c2:	48 0f       	add	r20, r24
    a1c4:	59 1f       	adc	r21, r25
    a1c6:	6a 1f       	adc	r22, r26
    a1c8:	7b 1f       	adc	r23, r27
    a1ca:	cf 01       	movw	r24, r30
    a1cc:	87 dc       	rcall	.-1778   	; 0x9adc <move_window>
    a1ce:	5c 01       	movw	r10, r24
    a1d0:	89 2b       	or	r24, r25
    a1d2:	09 f0       	breq	.+2      	; 0xa1d6 <put_fat+0x150>
    a1d4:	4e c0       	rjmp	.+156    	; 0xa272 <put_fat+0x1ec>
    a1d6:	ed 81       	ldd	r30, Y+5	; 0x05
    a1d8:	fe 81       	ldd	r31, Y+6	; 0x06
    a1da:	f5 96       	adiw	r30, 0x35	; 53
    a1dc:	cc 0c       	add	r12, r12
    a1de:	dd 1c       	adc	r13, r13
    a1e0:	e8 94       	clt
    a1e2:	c0 f8       	bld	r12, 0
    a1e4:	21 e0       	ldi	r18, 0x01	; 1
    a1e6:	d2 22       	and	r13, r18
    a1e8:	ec 0d       	add	r30, r12
    a1ea:	fd 1d       	adc	r31, r13
    a1ec:	40 82       	st	Z, r4
    a1ee:	51 82       	std	Z+1, r5	; 0x01
    a1f0:	38 c0       	rjmp	.+112    	; 0xa262 <put_fat+0x1dc>
    a1f2:	ed 81       	ldd	r30, Y+5	; 0x05
    a1f4:	fe 81       	ldd	r31, Y+6	; 0x06
    a1f6:	85 a1       	ldd	r24, Z+37	; 0x25
    a1f8:	96 a1       	ldd	r25, Z+38	; 0x26
    a1fa:	a7 a1       	ldd	r26, Z+39	; 0x27
    a1fc:	b0 a5       	ldd	r27, Z+40	; 0x28
    a1fe:	27 e0       	ldi	r18, 0x07	; 7
    a200:	76 95       	lsr	r23
    a202:	67 95       	ror	r22
    a204:	57 95       	ror	r21
    a206:	47 95       	ror	r20
    a208:	2a 95       	dec	r18
    a20a:	d1 f7       	brne	.-12     	; 0xa200 <put_fat+0x17a>
    a20c:	48 0f       	add	r20, r24
    a20e:	59 1f       	adc	r21, r25
    a210:	6a 1f       	adc	r22, r26
    a212:	7b 1f       	adc	r23, r27
    a214:	cf 01       	movw	r24, r30
    a216:	62 dc       	rcall	.-1852   	; 0x9adc <move_window>
    a218:	5c 01       	movw	r10, r24
    a21a:	89 2b       	or	r24, r25
    a21c:	51 f5       	brne	.+84     	; 0xa272 <put_fat+0x1ec>
    a21e:	4d 81       	ldd	r20, Y+5	; 0x05
    a220:	5e 81       	ldd	r21, Y+6	; 0x06
    a222:	4b 5c       	subi	r20, 0xCB	; 203
    a224:	5f 4f       	sbci	r21, 0xFF	; 255
    a226:	cc 0c       	add	r12, r12
    a228:	dd 1c       	adc	r13, r13
    a22a:	cc 0c       	add	r12, r12
    a22c:	dd 1c       	adc	r13, r13
    a22e:	fc ef       	ldi	r31, 0xFC	; 252
    a230:	cf 22       	and	r12, r31
    a232:	f1 e0       	ldi	r31, 0x01	; 1
    a234:	df 22       	and	r13, r31
    a236:	c4 0e       	add	r12, r20
    a238:	d5 1e       	adc	r13, r21
    a23a:	c6 01       	movw	r24, r12
    a23c:	0e 94 93 48 	call	0x9126	; 0x9126 <ld_dword>
    a240:	2f e0       	ldi	r18, 0x0F	; 15
    a242:	72 22       	and	r7, r18
    a244:	dc 01       	movw	r26, r24
    a246:	cb 01       	movw	r24, r22
    a248:	88 27       	eor	r24, r24
    a24a:	99 27       	eor	r25, r25
    a24c:	aa 27       	eor	r26, r26
    a24e:	b0 7f       	andi	r27, 0xF0	; 240
    a250:	b3 01       	movw	r22, r6
    a252:	a2 01       	movw	r20, r4
    a254:	48 2b       	or	r20, r24
    a256:	59 2b       	or	r21, r25
    a258:	6a 2b       	or	r22, r26
    a25a:	7b 2b       	or	r23, r27
    a25c:	c6 01       	movw	r24, r12
    a25e:	0e 94 a8 48 	call	0x9150	; 0x9150 <st_dword>
    a262:	81 e0       	ldi	r24, 0x01	; 1
    a264:	ed 81       	ldd	r30, Y+5	; 0x05
    a266:	fe 81       	ldd	r31, Y+6	; 0x06
    a268:	83 83       	std	Z+3, r24	; 0x03
    a26a:	03 c0       	rjmp	.+6      	; 0xa272 <put_fat+0x1ec>
    a26c:	82 e0       	ldi	r24, 0x02	; 2
    a26e:	a8 2e       	mov	r10, r24
    a270:	b1 2c       	mov	r11, r1
    a272:	c5 01       	movw	r24, r10
    a274:	26 96       	adiw	r28, 0x06	; 6
    a276:	e2 e1       	ldi	r30, 0x12	; 18
    a278:	0c 94 35 e5 	jmp	0x1ca6a	; 0x1ca6a <__epilogue_restores__>

0000a27c <get_fat.isra.10>:
    a27c:	a0 e0       	ldi	r26, 0x00	; 0
    a27e:	b0 e0       	ldi	r27, 0x00	; 0
    a280:	e4 e4       	ldi	r30, 0x44	; 68
    a282:	f1 e5       	ldi	r31, 0x51	; 81
    a284:	0c 94 21 e5 	jmp	0x1ca42	; 0x1ca42 <__prologue_saves__+0x10>
    a288:	42 30       	cpi	r20, 0x02	; 2
    a28a:	51 05       	cpc	r21, r1
    a28c:	61 05       	cpc	r22, r1
    a28e:	71 05       	cpc	r23, r1
    a290:	08 f4       	brcc	.+2      	; 0xa294 <get_fat.isra.10+0x18>
    a292:	9f c0       	rjmp	.+318    	; 0xa3d2 <get_fat.isra.10+0x156>
    a294:	fc 01       	movw	r30, r24
    a296:	01 8d       	ldd	r16, Z+25	; 0x19
    a298:	12 8d       	ldd	r17, Z+26	; 0x1a
    a29a:	23 8d       	ldd	r18, Z+27	; 0x1b
    a29c:	34 8d       	ldd	r19, Z+28	; 0x1c
    a29e:	40 17       	cp	r20, r16
    a2a0:	51 07       	cpc	r21, r17
    a2a2:	62 07       	cpc	r22, r18
    a2a4:	73 07       	cpc	r23, r19
    a2a6:	08 f0       	brcs	.+2      	; 0xa2aa <get_fat.isra.10+0x2e>
    a2a8:	94 c0       	rjmp	.+296    	; 0xa3d2 <get_fat.isra.10+0x156>
    a2aa:	6a 01       	movw	r12, r20
    a2ac:	7b 01       	movw	r14, r22
    a2ae:	8c 01       	movw	r16, r24
    a2b0:	80 81       	ld	r24, Z
    a2b2:	82 30       	cpi	r24, 0x02	; 2
    a2b4:	09 f4       	brne	.+2      	; 0xa2b8 <get_fat.isra.10+0x3c>
    a2b6:	4b c0       	rjmp	.+150    	; 0xa34e <get_fat.isra.10+0xd2>
    a2b8:	83 30       	cpi	r24, 0x03	; 3
    a2ba:	09 f4       	brne	.+2      	; 0xa2be <get_fat.isra.10+0x42>
    a2bc:	67 c0       	rjmp	.+206    	; 0xa38c <get_fat.isra.10+0x110>
    a2be:	81 30       	cpi	r24, 0x01	; 1
    a2c0:	09 f0       	breq	.+2      	; 0xa2c4 <get_fat.isra.10+0x48>
    a2c2:	87 c0       	rjmp	.+270    	; 0xa3d2 <get_fat.isra.10+0x156>
    a2c4:	ea 01       	movw	r28, r20
    a2c6:	d6 95       	lsr	r29
    a2c8:	c7 95       	ror	r28
    a2ca:	cc 0d       	add	r28, r12
    a2cc:	dd 1d       	adc	r29, r13
    a2ce:	ce 01       	movw	r24, r28
    a2d0:	89 2f       	mov	r24, r25
    a2d2:	99 27       	eor	r25, r25
    a2d4:	86 95       	lsr	r24
    a2d6:	45 a1       	ldd	r20, Z+37	; 0x25
    a2d8:	56 a1       	ldd	r21, Z+38	; 0x26
    a2da:	67 a1       	ldd	r22, Z+39	; 0x27
    a2dc:	70 a5       	ldd	r23, Z+40	; 0x28
    a2de:	48 0f       	add	r20, r24
    a2e0:	59 1f       	adc	r21, r25
    a2e2:	61 1d       	adc	r22, r1
    a2e4:	71 1d       	adc	r23, r1
    a2e6:	cf 01       	movw	r24, r30
    a2e8:	f9 db       	rcall	.-2062   	; 0x9adc <move_window>
    a2ea:	89 2b       	or	r24, r25
    a2ec:	21 f0       	breq	.+8      	; 0xa2f6 <get_fat.isra.10+0x7a>
    a2ee:	6f ef       	ldi	r22, 0xFF	; 255
    a2f0:	7f ef       	ldi	r23, 0xFF	; 255
    a2f2:	cb 01       	movw	r24, r22
    a2f4:	72 c0       	rjmp	.+228    	; 0xa3da <get_fat.isra.10+0x15e>
    a2f6:	5e 01       	movw	r10, r28
    a2f8:	ff ef       	ldi	r31, 0xFF	; 255
    a2fa:	af 1a       	sub	r10, r31
    a2fc:	bf 0a       	sbc	r11, r31
    a2fe:	d1 70       	andi	r29, 0x01	; 1
    a300:	c0 0f       	add	r28, r16
    a302:	d1 1f       	adc	r29, r17
    a304:	cd a9       	ldd	r28, Y+53	; 0x35
    a306:	c5 01       	movw	r24, r10
    a308:	89 2f       	mov	r24, r25
    a30a:	99 27       	eor	r25, r25
    a30c:	86 95       	lsr	r24
    a30e:	f8 01       	movw	r30, r16
    a310:	45 a1       	ldd	r20, Z+37	; 0x25
    a312:	56 a1       	ldd	r21, Z+38	; 0x26
    a314:	67 a1       	ldd	r22, Z+39	; 0x27
    a316:	70 a5       	ldd	r23, Z+40	; 0x28
    a318:	48 0f       	add	r20, r24
    a31a:	59 1f       	adc	r21, r25
    a31c:	61 1d       	adc	r22, r1
    a31e:	71 1d       	adc	r23, r1
    a320:	c8 01       	movw	r24, r16
    a322:	dc db       	rcall	.-2120   	; 0x9adc <move_window>
    a324:	89 2b       	or	r24, r25
    a326:	19 f7       	brne	.-58     	; 0xa2ee <get_fat.isra.10+0x72>
    a328:	f1 e0       	ldi	r31, 0x01	; 1
    a32a:	bf 22       	and	r11, r31
    a32c:	f8 01       	movw	r30, r16
    a32e:	ea 0d       	add	r30, r10
    a330:	fb 1d       	adc	r31, r11
    a332:	85 a9       	ldd	r24, Z+53	; 0x35
    a334:	6c 2f       	mov	r22, r28
    a336:	70 e0       	ldi	r23, 0x00	; 0
    a338:	78 2b       	or	r23, r24
    a33a:	c0 fe       	sbrs	r12, 0
    a33c:	06 c0       	rjmp	.+12     	; 0xa34a <get_fat.isra.10+0xce>
    a33e:	54 e0       	ldi	r21, 0x04	; 4
    a340:	76 95       	lsr	r23
    a342:	67 95       	ror	r22
    a344:	5a 95       	dec	r21
    a346:	e1 f7       	brne	.-8      	; 0xa340 <get_fat.isra.10+0xc4>
    a348:	1e c0       	rjmp	.+60     	; 0xa386 <get_fat.isra.10+0x10a>
    a34a:	7f 70       	andi	r23, 0x0F	; 15
    a34c:	1c c0       	rjmp	.+56     	; 0xa386 <get_fat.isra.10+0x10a>
    a34e:	77 27       	eor	r23, r23
    a350:	6f 2d       	mov	r22, r15
    a352:	5e 2d       	mov	r21, r14
    a354:	4d 2d       	mov	r20, r13
    a356:	85 a1       	ldd	r24, Z+37	; 0x25
    a358:	96 a1       	ldd	r25, Z+38	; 0x26
    a35a:	a7 a1       	ldd	r26, Z+39	; 0x27
    a35c:	b0 a5       	ldd	r27, Z+40	; 0x28
    a35e:	48 0f       	add	r20, r24
    a360:	59 1f       	adc	r21, r25
    a362:	6a 1f       	adc	r22, r26
    a364:	7b 1f       	adc	r23, r27
    a366:	cf 01       	movw	r24, r30
    a368:	b9 db       	rcall	.-2190   	; 0x9adc <move_window>
    a36a:	89 2b       	or	r24, r25
    a36c:	09 f0       	breq	.+2      	; 0xa370 <get_fat.isra.10+0xf4>
    a36e:	bf cf       	rjmp	.-130    	; 0xa2ee <get_fat.isra.10+0x72>
    a370:	cc 0c       	add	r12, r12
    a372:	dd 1c       	adc	r13, r13
    a374:	e8 94       	clt
    a376:	c0 f8       	bld	r12, 0
    a378:	f1 e0       	ldi	r31, 0x01	; 1
    a37a:	df 22       	and	r13, r31
    a37c:	f8 01       	movw	r30, r16
    a37e:	ec 0d       	add	r30, r12
    a380:	fd 1d       	adc	r31, r13
    a382:	65 a9       	ldd	r22, Z+53	; 0x35
    a384:	76 a9       	ldd	r23, Z+54	; 0x36
    a386:	80 e0       	ldi	r24, 0x00	; 0
    a388:	90 e0       	ldi	r25, 0x00	; 0
    a38a:	27 c0       	rjmp	.+78     	; 0xa3da <get_fat.isra.10+0x15e>
    a38c:	85 a1       	ldd	r24, Z+37	; 0x25
    a38e:	96 a1       	ldd	r25, Z+38	; 0x26
    a390:	a7 a1       	ldd	r26, Z+39	; 0x27
    a392:	b0 a5       	ldd	r27, Z+40	; 0x28
    a394:	27 e0       	ldi	r18, 0x07	; 7
    a396:	76 95       	lsr	r23
    a398:	67 95       	ror	r22
    a39a:	57 95       	ror	r21
    a39c:	47 95       	ror	r20
    a39e:	2a 95       	dec	r18
    a3a0:	d1 f7       	brne	.-12     	; 0xa396 <get_fat.isra.10+0x11a>
    a3a2:	48 0f       	add	r20, r24
    a3a4:	59 1f       	adc	r21, r25
    a3a6:	6a 1f       	adc	r22, r26
    a3a8:	7b 1f       	adc	r23, r27
    a3aa:	cf 01       	movw	r24, r30
    a3ac:	97 db       	rcall	.-2258   	; 0x9adc <move_window>
    a3ae:	89 2b       	or	r24, r25
    a3b0:	09 f0       	breq	.+2      	; 0xa3b4 <get_fat.isra.10+0x138>
    a3b2:	9d cf       	rjmp	.-198    	; 0xa2ee <get_fat.isra.10+0x72>
    a3b4:	0b 5c       	subi	r16, 0xCB	; 203
    a3b6:	1f 4f       	sbci	r17, 0xFF	; 255
    a3b8:	cc 0c       	add	r12, r12
    a3ba:	dd 1c       	adc	r13, r13
    a3bc:	cc 0c       	add	r12, r12
    a3be:	dd 1c       	adc	r13, r13
    a3c0:	c6 01       	movw	r24, r12
    a3c2:	8c 7f       	andi	r24, 0xFC	; 252
    a3c4:	91 70       	andi	r25, 0x01	; 1
    a3c6:	80 0f       	add	r24, r16
    a3c8:	91 1f       	adc	r25, r17
    a3ca:	0e 94 93 48 	call	0x9126	; 0x9126 <ld_dword>
    a3ce:	9f 70       	andi	r25, 0x0F	; 15
    a3d0:	04 c0       	rjmp	.+8      	; 0xa3da <get_fat.isra.10+0x15e>
    a3d2:	61 e0       	ldi	r22, 0x01	; 1
    a3d4:	70 e0       	ldi	r23, 0x00	; 0
    a3d6:	80 e0       	ldi	r24, 0x00	; 0
    a3d8:	90 e0       	ldi	r25, 0x00	; 0
    a3da:	cd b7       	in	r28, 0x3d	; 61
    a3dc:	de b7       	in	r29, 0x3e	; 62
    a3de:	ea e0       	ldi	r30, 0x0A	; 10
    a3e0:	0c 94 3d e5 	jmp	0x1ca7a	; 0x1ca7a <__epilogue_restores__+0x10>

0000a3e4 <dir_sdi>:
    a3e4:	a0 e0       	ldi	r26, 0x00	; 0
    a3e6:	b0 e0       	ldi	r27, 0x00	; 0
    a3e8:	e8 ef       	ldi	r30, 0xF8	; 248
    a3ea:	f1 e5       	ldi	r31, 0x51	; 81
    a3ec:	0c 94 1b e5 	jmp	0x1ca36	; 0x1ca36 <__prologue_saves__+0x4>
    a3f0:	ec 01       	movw	r28, r24
    a3f2:	6a 01       	movw	r12, r20
    a3f4:	7b 01       	movw	r14, r22
    a3f6:	41 15       	cp	r20, r1
    a3f8:	51 05       	cpc	r21, r1
    a3fa:	80 e2       	ldi	r24, 0x20	; 32
    a3fc:	68 07       	cpc	r22, r24
    a3fe:	71 05       	cpc	r23, r1
    a400:	18 f0       	brcs	.+6      	; 0xa408 <dir_sdi+0x24>
    a402:	82 e0       	ldi	r24, 0x02	; 2
    a404:	90 e0       	ldi	r25, 0x00	; 0
    a406:	aa c0       	rjmp	.+340    	; 0xa55c <dir_sdi+0x178>
    a408:	db 01       	movw	r26, r22
    a40a:	ca 01       	movw	r24, r20
    a40c:	8f 71       	andi	r24, 0x1F	; 31
    a40e:	99 27       	eor	r25, r25
    a410:	aa 27       	eor	r26, r26
    a412:	bb 27       	eor	r27, r27
    a414:	89 2b       	or	r24, r25
    a416:	8a 2b       	or	r24, r26
    a418:	8b 2b       	or	r24, r27
    a41a:	99 f7       	brne	.-26     	; 0xa402 <dir_sdi+0x1e>
    a41c:	08 81       	ld	r16, Y
    a41e:	19 81       	ldd	r17, Y+1	; 0x01
    a420:	4e 87       	std	Y+14, r20	; 0x0e
    a422:	5f 87       	std	Y+15, r21	; 0x0f
    a424:	68 8b       	std	Y+16, r22	; 0x10
    a426:	79 8b       	std	Y+17, r23	; 0x11
    a428:	8e 80       	ldd	r8, Y+6	; 0x06
    a42a:	9f 80       	ldd	r9, Y+7	; 0x07
    a42c:	a8 84       	ldd	r10, Y+8	; 0x08
    a42e:	b9 84       	ldd	r11, Y+9	; 0x09
    a430:	81 14       	cp	r8, r1
    a432:	91 04       	cpc	r9, r1
    a434:	a1 04       	cpc	r10, r1
    a436:	b1 04       	cpc	r11, r1
    a438:	51 f5       	brne	.+84     	; 0xa48e <dir_sdi+0xaa>
    a43a:	f8 01       	movw	r30, r16
    a43c:	80 81       	ld	r24, Z
    a43e:	83 30       	cpi	r24, 0x03	; 3
    a440:	40 f0       	brcs	.+16     	; 0xa452 <dir_sdi+0x6e>
    a442:	81 a5       	ldd	r24, Z+41	; 0x29
    a444:	92 a5       	ldd	r25, Z+42	; 0x2a
    a446:	a3 a5       	ldd	r26, Z+43	; 0x2b
    a448:	b4 a5       	ldd	r27, Z+44	; 0x2c
    a44a:	00 97       	sbiw	r24, 0x00	; 0
    a44c:	a1 05       	cpc	r26, r1
    a44e:	b1 05       	cpc	r27, r1
    a450:	e1 f4       	brne	.+56     	; 0xa48a <dir_sdi+0xa6>
    a452:	f8 01       	movw	r30, r16
    a454:	87 81       	ldd	r24, Z+7	; 0x07
    a456:	90 85       	ldd	r25, Z+8	; 0x08
    a458:	a0 e0       	ldi	r26, 0x00	; 0
    a45a:	b0 e0       	ldi	r27, 0x00	; 0
    a45c:	b7 01       	movw	r22, r14
    a45e:	a6 01       	movw	r20, r12
    a460:	25 e0       	ldi	r18, 0x05	; 5
    a462:	76 95       	lsr	r23
    a464:	67 95       	ror	r22
    a466:	57 95       	ror	r21
    a468:	47 95       	ror	r20
    a46a:	2a 95       	dec	r18
    a46c:	d1 f7       	brne	.-12     	; 0xa462 <dir_sdi+0x7e>
    a46e:	48 17       	cp	r20, r24
    a470:	59 07       	cpc	r21, r25
    a472:	6a 07       	cpc	r22, r26
    a474:	7b 07       	cpc	r23, r27
    a476:	28 f6       	brcc	.-118    	; 0xa402 <dir_sdi+0x1e>
    a478:	81 a5       	ldd	r24, Z+41	; 0x29
    a47a:	92 a5       	ldd	r25, Z+42	; 0x2a
    a47c:	a3 a5       	ldd	r26, Z+43	; 0x2b
    a47e:	b4 a5       	ldd	r27, Z+44	; 0x2c
    a480:	8e 8b       	std	Y+22, r24	; 0x16
    a482:	9f 8b       	std	Y+23, r25	; 0x17
    a484:	a8 8f       	std	Y+24, r26	; 0x18
    a486:	b9 8f       	std	Y+25, r27	; 0x19
    a488:	3e c0       	rjmp	.+124    	; 0xa506 <dir_sdi+0x122>
    a48a:	4c 01       	movw	r8, r24
    a48c:	5d 01       	movw	r10, r26
    a48e:	f8 01       	movw	r30, r16
    a490:	41 84       	ldd	r4, Z+9	; 0x09
    a492:	52 84       	ldd	r5, Z+10	; 0x0a
    a494:	61 2c       	mov	r6, r1
    a496:	71 2c       	mov	r7, r1
    a498:	39 e0       	ldi	r19, 0x09	; 9
    a49a:	44 0c       	add	r4, r4
    a49c:	55 1c       	adc	r5, r5
    a49e:	66 1c       	adc	r6, r6
    a4a0:	77 1c       	adc	r7, r7
    a4a2:	3a 95       	dec	r19
    a4a4:	d1 f7       	brne	.-12     	; 0xa49a <dir_sdi+0xb6>
    a4a6:	b5 01       	movw	r22, r10
    a4a8:	a4 01       	movw	r20, r8
    a4aa:	c4 14       	cp	r12, r4
    a4ac:	d5 04       	cpc	r13, r5
    a4ae:	e6 04       	cpc	r14, r6
    a4b0:	f7 04       	cpc	r15, r7
    a4b2:	10 f1       	brcs	.+68     	; 0xa4f8 <dir_sdi+0x114>
    a4b4:	88 81       	ld	r24, Y
    a4b6:	99 81       	ldd	r25, Y+1	; 0x01
    a4b8:	e1 de       	rcall	.-574    	; 0xa27c <get_fat.isra.10>
    a4ba:	4b 01       	movw	r8, r22
    a4bc:	5c 01       	movw	r10, r24
    a4be:	6f 3f       	cpi	r22, 0xFF	; 255
    a4c0:	7f 4f       	sbci	r23, 0xFF	; 255
    a4c2:	8f 4f       	sbci	r24, 0xFF	; 255
    a4c4:	9f 4f       	sbci	r25, 0xFF	; 255
    a4c6:	09 f4       	brne	.+2      	; 0xa4ca <dir_sdi+0xe6>
    a4c8:	47 c0       	rjmp	.+142    	; 0xa558 <dir_sdi+0x174>
    a4ca:	82 e0       	ldi	r24, 0x02	; 2
    a4cc:	88 16       	cp	r8, r24
    a4ce:	91 04       	cpc	r9, r1
    a4d0:	a1 04       	cpc	r10, r1
    a4d2:	b1 04       	cpc	r11, r1
    a4d4:	08 f4       	brcc	.+2      	; 0xa4d8 <dir_sdi+0xf4>
    a4d6:	95 cf       	rjmp	.-214    	; 0xa402 <dir_sdi+0x1e>
    a4d8:	f8 01       	movw	r30, r16
    a4da:	81 8d       	ldd	r24, Z+25	; 0x19
    a4dc:	92 8d       	ldd	r25, Z+26	; 0x1a
    a4de:	a3 8d       	ldd	r26, Z+27	; 0x1b
    a4e0:	b4 8d       	ldd	r27, Z+28	; 0x1c
    a4e2:	88 16       	cp	r8, r24
    a4e4:	99 06       	cpc	r9, r25
    a4e6:	aa 06       	cpc	r10, r26
    a4e8:	bb 06       	cpc	r11, r27
    a4ea:	08 f0       	brcs	.+2      	; 0xa4ee <dir_sdi+0x10a>
    a4ec:	8a cf       	rjmp	.-236    	; 0xa402 <dir_sdi+0x1e>
    a4ee:	c4 18       	sub	r12, r4
    a4f0:	d5 08       	sbc	r13, r5
    a4f2:	e6 08       	sbc	r14, r6
    a4f4:	f7 08       	sbc	r15, r7
    a4f6:	d7 cf       	rjmp	.-82     	; 0xa4a6 <dir_sdi+0xc2>
    a4f8:	c8 01       	movw	r24, r16
    a4fa:	0e 94 4c 49 	call	0x9298	; 0x9298 <clst2sect>
    a4fe:	6e 8b       	std	Y+22, r22	; 0x16
    a500:	7f 8b       	std	Y+23, r23	; 0x17
    a502:	88 8f       	std	Y+24, r24	; 0x18
    a504:	99 8f       	std	Y+25, r25	; 0x19
    a506:	8a 8a       	std	Y+18, r8	; 0x12
    a508:	9b 8a       	std	Y+19, r9	; 0x13
    a50a:	ac 8a       	std	Y+20, r10	; 0x14
    a50c:	bd 8a       	std	Y+21, r11	; 0x15
    a50e:	8e 89       	ldd	r24, Y+22	; 0x16
    a510:	9f 89       	ldd	r25, Y+23	; 0x17
    a512:	a8 8d       	ldd	r26, Y+24	; 0x18
    a514:	b9 8d       	ldd	r27, Y+25	; 0x19
    a516:	00 97       	sbiw	r24, 0x00	; 0
    a518:	a1 05       	cpc	r26, r1
    a51a:	b1 05       	cpc	r27, r1
    a51c:	09 f4       	brne	.+2      	; 0xa520 <dir_sdi+0x13c>
    a51e:	71 cf       	rjmp	.-286    	; 0xa402 <dir_sdi+0x1e>
    a520:	b7 01       	movw	r22, r14
    a522:	a6 01       	movw	r20, r12
    a524:	29 e0       	ldi	r18, 0x09	; 9
    a526:	76 95       	lsr	r23
    a528:	67 95       	ror	r22
    a52a:	57 95       	ror	r21
    a52c:	47 95       	ror	r20
    a52e:	2a 95       	dec	r18
    a530:	d1 f7       	brne	.-12     	; 0xa526 <dir_sdi+0x142>
    a532:	84 0f       	add	r24, r20
    a534:	95 1f       	adc	r25, r21
    a536:	a6 1f       	adc	r26, r22
    a538:	b7 1f       	adc	r27, r23
    a53a:	8e 8b       	std	Y+22, r24	; 0x16
    a53c:	9f 8b       	std	Y+23, r25	; 0x17
    a53e:	a8 8f       	std	Y+24, r26	; 0x18
    a540:	b9 8f       	std	Y+25, r27	; 0x19
    a542:	0b 5c       	subi	r16, 0xCB	; 203
    a544:	1f 4f       	sbci	r17, 0xFF	; 255
    a546:	f1 e0       	ldi	r31, 0x01	; 1
    a548:	df 22       	and	r13, r31
    a54a:	c0 0e       	add	r12, r16
    a54c:	d1 1e       	adc	r13, r17
    a54e:	db 8e       	std	Y+27, r13	; 0x1b
    a550:	ca 8e       	std	Y+26, r12	; 0x1a
    a552:	80 e0       	ldi	r24, 0x00	; 0
    a554:	90 e0       	ldi	r25, 0x00	; 0
    a556:	02 c0       	rjmp	.+4      	; 0xa55c <dir_sdi+0x178>
    a558:	81 e0       	ldi	r24, 0x01	; 1
    a55a:	90 e0       	ldi	r25, 0x00	; 0
    a55c:	cd b7       	in	r28, 0x3d	; 61
    a55e:	de b7       	in	r29, 0x3e	; 62
    a560:	e0 e1       	ldi	r30, 0x10	; 16
    a562:	0c 94 37 e5 	jmp	0x1ca6e	; 0x1ca6e <__epilogue_restores__+0x4>

0000a566 <create_chain>:
    a566:	a0 e0       	ldi	r26, 0x00	; 0
    a568:	b0 e0       	ldi	r27, 0x00	; 0
    a56a:	e9 eb       	ldi	r30, 0xB9	; 185
    a56c:	f2 e5       	ldi	r31, 0x52	; 82
    a56e:	0c 94 1b e5 	jmp	0x1ca36	; 0x1ca36 <__prologue_saves__+0x4>
    a572:	8c 01       	movw	r16, r24
    a574:	2a 01       	movw	r4, r20
    a576:	3b 01       	movw	r6, r22
    a578:	fc 01       	movw	r30, r24
    a57a:	c0 81       	ld	r28, Z
    a57c:	d1 81       	ldd	r29, Z+1	; 0x01
    a57e:	41 15       	cp	r20, r1
    a580:	51 05       	cpc	r21, r1
    a582:	61 05       	cpc	r22, r1
    a584:	71 05       	cpc	r23, r1
    a586:	99 f4       	brne	.+38     	; 0xa5ae <create_chain+0x48>
    a588:	8d 84       	ldd	r8, Y+13	; 0x0d
    a58a:	9e 84       	ldd	r9, Y+14	; 0x0e
    a58c:	af 84       	ldd	r10, Y+15	; 0x0f
    a58e:	b8 88       	ldd	r11, Y+16	; 0x10
    a590:	81 14       	cp	r8, r1
    a592:	91 04       	cpc	r9, r1
    a594:	a1 04       	cpc	r10, r1
    a596:	b1 04       	cpc	r11, r1
    a598:	51 f1       	breq	.+84     	; 0xa5ee <create_chain+0x88>
    a59a:	89 8d       	ldd	r24, Y+25	; 0x19
    a59c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a59e:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a5a0:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a5a2:	88 16       	cp	r8, r24
    a5a4:	99 06       	cpc	r9, r25
    a5a6:	aa 06       	cpc	r10, r26
    a5a8:	bb 06       	cpc	r11, r27
    a5aa:	28 f1       	brcs	.+74     	; 0xa5f6 <create_chain+0x90>
    a5ac:	20 c0       	rjmp	.+64     	; 0xa5ee <create_chain+0x88>
    a5ae:	ce 01       	movw	r24, r28
    a5b0:	65 de       	rcall	.-822    	; 0xa27c <get_fat.isra.10>
    a5b2:	62 30       	cpi	r22, 0x02	; 2
    a5b4:	71 05       	cpc	r23, r1
    a5b6:	81 05       	cpc	r24, r1
    a5b8:	91 05       	cpc	r25, r1
    a5ba:	08 f4       	brcc	.+2      	; 0xa5be <create_chain+0x58>
    a5bc:	ea c0       	rjmp	.+468    	; 0xa792 <create_chain+0x22c>
    a5be:	6f 3f       	cpi	r22, 0xFF	; 255
    a5c0:	ff ef       	ldi	r31, 0xFF	; 255
    a5c2:	7f 07       	cpc	r23, r31
    a5c4:	8f 07       	cpc	r24, r31
    a5c6:	9f 07       	cpc	r25, r31
    a5c8:	29 f4       	brne	.+10     	; 0xa5d4 <create_chain+0x6e>
    a5ca:	4f ef       	ldi	r20, 0xFF	; 255
    a5cc:	3f ef       	ldi	r19, 0xFF	; 255
    a5ce:	2f ef       	ldi	r18, 0xFF	; 255
    a5d0:	9f ef       	ldi	r25, 0xFF	; 255
    a5d2:	e7 c0       	rjmp	.+462    	; 0xa7a2 <create_chain+0x23c>
    a5d4:	c9 8c       	ldd	r12, Y+25	; 0x19
    a5d6:	da 8c       	ldd	r13, Y+26	; 0x1a
    a5d8:	eb 8c       	ldd	r14, Y+27	; 0x1b
    a5da:	fc 8c       	ldd	r15, Y+28	; 0x1c
    a5dc:	6c 15       	cp	r22, r12
    a5de:	7d 05       	cpc	r23, r13
    a5e0:	8e 05       	cpc	r24, r14
    a5e2:	9f 05       	cpc	r25, r15
    a5e4:	08 f4       	brcc	.+2      	; 0xa5e8 <create_chain+0x82>
    a5e6:	da c0       	rjmp	.+436    	; 0xa79c <create_chain+0x236>
    a5e8:	53 01       	movw	r10, r6
    a5ea:	42 01       	movw	r8, r4
    a5ec:	04 c0       	rjmp	.+8      	; 0xa5f6 <create_chain+0x90>
    a5ee:	81 2c       	mov	r8, r1
    a5f0:	91 2c       	mov	r9, r1
    a5f2:	54 01       	movw	r10, r8
    a5f4:	83 94       	inc	r8
    a5f6:	89 89       	ldd	r24, Y+17	; 0x11
    a5f8:	9a 89       	ldd	r25, Y+18	; 0x12
    a5fa:	ab 89       	ldd	r26, Y+19	; 0x13
    a5fc:	bc 89       	ldd	r27, Y+20	; 0x14
    a5fe:	89 2b       	or	r24, r25
    a600:	8a 2b       	or	r24, r26
    a602:	8b 2b       	or	r24, r27
    a604:	11 f4       	brne	.+4      	; 0xa60a <create_chain+0xa4>
    a606:	40 e0       	ldi	r20, 0x00	; 0
    a608:	c5 c0       	rjmp	.+394    	; 0xa794 <create_chain+0x22e>
    a60a:	84 14       	cp	r8, r4
    a60c:	95 04       	cpc	r9, r5
    a60e:	a6 04       	cpc	r10, r6
    a610:	b7 04       	cpc	r11, r7
    a612:	09 f0       	breq	.+2      	; 0xa616 <create_chain+0xb0>
    a614:	46 c0       	rjmp	.+140    	; 0xa6a2 <create_chain+0x13c>
    a616:	75 01       	movw	r14, r10
    a618:	64 01       	movw	r12, r8
    a61a:	2f ef       	ldi	r18, 0xFF	; 255
    a61c:	c2 1a       	sub	r12, r18
    a61e:	d2 0a       	sbc	r13, r18
    a620:	e2 0a       	sbc	r14, r18
    a622:	f2 0a       	sbc	r15, r18
    a624:	89 8d       	ldd	r24, Y+25	; 0x19
    a626:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a628:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a62a:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a62c:	c8 16       	cp	r12, r24
    a62e:	d9 06       	cpc	r13, r25
    a630:	ea 06       	cpc	r14, r26
    a632:	fb 06       	cpc	r15, r27
    a634:	28 f0       	brcs	.+10     	; 0xa640 <create_chain+0xda>
    a636:	92 e0       	ldi	r25, 0x02	; 2
    a638:	c9 2e       	mov	r12, r25
    a63a:	d1 2c       	mov	r13, r1
    a63c:	e1 2c       	mov	r14, r1
    a63e:	f1 2c       	mov	r15, r1
    a640:	b7 01       	movw	r22, r14
    a642:	a6 01       	movw	r20, r12
    a644:	f8 01       	movw	r30, r16
    a646:	80 81       	ld	r24, Z
    a648:	91 81       	ldd	r25, Z+1	; 0x01
    a64a:	18 de       	rcall	.-976    	; 0xa27c <get_fat.isra.10>
    a64c:	61 30       	cpi	r22, 0x01	; 1
    a64e:	71 05       	cpc	r23, r1
    a650:	81 05       	cpc	r24, r1
    a652:	91 05       	cpc	r25, r1
    a654:	09 f4       	brne	.+2      	; 0xa658 <create_chain+0xf2>
    a656:	9d c0       	rjmp	.+314    	; 0xa792 <create_chain+0x22c>
    a658:	6f 3f       	cpi	r22, 0xFF	; 255
    a65a:	ff ef       	ldi	r31, 0xFF	; 255
    a65c:	7f 07       	cpc	r23, r31
    a65e:	8f 07       	cpc	r24, r31
    a660:	9f 07       	cpc	r25, r31
    a662:	09 f4       	brne	.+2      	; 0xa666 <create_chain+0x100>
    a664:	b2 cf       	rjmp	.-156    	; 0xa5ca <create_chain+0x64>
    a666:	67 2b       	or	r22, r23
    a668:	68 2b       	or	r22, r24
    a66a:	69 2b       	or	r22, r25
    a66c:	a9 f0       	breq	.+42     	; 0xa698 <create_chain+0x132>
    a66e:	8d 85       	ldd	r24, Y+13	; 0x0d
    a670:	9e 85       	ldd	r25, Y+14	; 0x0e
    a672:	af 85       	ldd	r26, Y+15	; 0x0f
    a674:	b8 89       	ldd	r27, Y+16	; 0x10
    a676:	82 30       	cpi	r24, 0x02	; 2
    a678:	91 05       	cpc	r25, r1
    a67a:	a1 05       	cpc	r26, r1
    a67c:	b1 05       	cpc	r27, r1
    a67e:	88 f0       	brcs	.+34     	; 0xa6a2 <create_chain+0x13c>
    a680:	49 8d       	ldd	r20, Y+25	; 0x19
    a682:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a684:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a686:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a688:	84 17       	cp	r24, r20
    a68a:	95 07       	cpc	r25, r21
    a68c:	a6 07       	cpc	r26, r22
    a68e:	b7 07       	cpc	r27, r23
    a690:	40 f4       	brcc	.+16     	; 0xa6a2 <create_chain+0x13c>
    a692:	4c 01       	movw	r8, r24
    a694:	5d 01       	movw	r10, r26
    a696:	05 c0       	rjmp	.+10     	; 0xa6a2 <create_chain+0x13c>
    a698:	c1 14       	cp	r12, r1
    a69a:	d1 04       	cpc	r13, r1
    a69c:	e1 04       	cpc	r14, r1
    a69e:	f1 04       	cpc	r15, r1
    a6a0:	c9 f5       	brne	.+114    	; 0xa714 <create_chain+0x1ae>
    a6a2:	75 01       	movw	r14, r10
    a6a4:	64 01       	movw	r12, r8
    a6a6:	2f ef       	ldi	r18, 0xFF	; 255
    a6a8:	c2 1a       	sub	r12, r18
    a6aa:	d2 0a       	sbc	r13, r18
    a6ac:	e2 0a       	sbc	r14, r18
    a6ae:	f2 0a       	sbc	r15, r18
    a6b0:	89 8d       	ldd	r24, Y+25	; 0x19
    a6b2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a6b4:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a6b6:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a6b8:	c8 16       	cp	r12, r24
    a6ba:	d9 06       	cpc	r13, r25
    a6bc:	ea 06       	cpc	r14, r26
    a6be:	fb 06       	cpc	r15, r27
    a6c0:	60 f0       	brcs	.+24     	; 0xa6da <create_chain+0x174>
    a6c2:	82 e0       	ldi	r24, 0x02	; 2
    a6c4:	88 16       	cp	r8, r24
    a6c6:	91 04       	cpc	r9, r1
    a6c8:	a1 04       	cpc	r10, r1
    a6ca:	b1 04       	cpc	r11, r1
    a6cc:	08 f4       	brcc	.+2      	; 0xa6d0 <create_chain+0x16a>
    a6ce:	9b cf       	rjmp	.-202    	; 0xa606 <create_chain+0xa0>
    a6d0:	82 e0       	ldi	r24, 0x02	; 2
    a6d2:	c8 2e       	mov	r12, r24
    a6d4:	d1 2c       	mov	r13, r1
    a6d6:	e1 2c       	mov	r14, r1
    a6d8:	f1 2c       	mov	r15, r1
    a6da:	b7 01       	movw	r22, r14
    a6dc:	a6 01       	movw	r20, r12
    a6de:	f8 01       	movw	r30, r16
    a6e0:	80 81       	ld	r24, Z
    a6e2:	91 81       	ldd	r25, Z+1	; 0x01
    a6e4:	cb dd       	rcall	.-1130   	; 0xa27c <get_fat.isra.10>
    a6e6:	61 15       	cp	r22, r1
    a6e8:	71 05       	cpc	r23, r1
    a6ea:	81 05       	cpc	r24, r1
    a6ec:	91 05       	cpc	r25, r1
    a6ee:	91 f0       	breq	.+36     	; 0xa714 <create_chain+0x1ae>
    a6f0:	61 30       	cpi	r22, 0x01	; 1
    a6f2:	71 05       	cpc	r23, r1
    a6f4:	81 05       	cpc	r24, r1
    a6f6:	91 05       	cpc	r25, r1
    a6f8:	09 f4       	brne	.+2      	; 0xa6fc <create_chain+0x196>
    a6fa:	4b c0       	rjmp	.+150    	; 0xa792 <create_chain+0x22c>
    a6fc:	6f 3f       	cpi	r22, 0xFF	; 255
    a6fe:	7f 4f       	sbci	r23, 0xFF	; 255
    a700:	8f 4f       	sbci	r24, 0xFF	; 255
    a702:	9f 4f       	sbci	r25, 0xFF	; 255
    a704:	09 f4       	brne	.+2      	; 0xa708 <create_chain+0x1a2>
    a706:	61 cf       	rjmp	.-318    	; 0xa5ca <create_chain+0x64>
    a708:	c8 14       	cp	r12, r8
    a70a:	d9 04       	cpc	r13, r9
    a70c:	ea 04       	cpc	r14, r10
    a70e:	fb 04       	cpc	r15, r11
    a710:	51 f6       	brne	.-108    	; 0xa6a6 <create_chain+0x140>
    a712:	79 cf       	rjmp	.-270    	; 0xa606 <create_chain+0xa0>
    a714:	0f ef       	ldi	r16, 0xFF	; 255
    a716:	1f ef       	ldi	r17, 0xFF	; 255
    a718:	98 01       	movw	r18, r16
    a71a:	b7 01       	movw	r22, r14
    a71c:	a6 01       	movw	r20, r12
    a71e:	ce 01       	movw	r24, r28
    a720:	b2 dc       	rcall	.-1692   	; 0xa086 <put_fat>
    a722:	00 97       	sbiw	r24, 0x00	; 0
    a724:	99 f5       	brne	.+102    	; 0xa78c <create_chain+0x226>
    a726:	41 14       	cp	r4, r1
    a728:	51 04       	cpc	r5, r1
    a72a:	61 04       	cpc	r6, r1
    a72c:	71 04       	cpc	r7, r1
    a72e:	e9 f4       	brne	.+58     	; 0xa76a <create_chain+0x204>
    a730:	cd 86       	std	Y+13, r12	; 0x0d
    a732:	de 86       	std	Y+14, r13	; 0x0e
    a734:	ef 86       	std	Y+15, r14	; 0x0f
    a736:	f8 8a       	std	Y+16, r15	; 0x10
    a738:	89 89       	ldd	r24, Y+17	; 0x11
    a73a:	9a 89       	ldd	r25, Y+18	; 0x12
    a73c:	ab 89       	ldd	r26, Y+19	; 0x13
    a73e:	bc 89       	ldd	r27, Y+20	; 0x14
    a740:	49 8d       	ldd	r20, Y+25	; 0x19
    a742:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a744:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a746:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a748:	42 50       	subi	r20, 0x02	; 2
    a74a:	51 09       	sbc	r21, r1
    a74c:	61 09       	sbc	r22, r1
    a74e:	71 09       	sbc	r23, r1
    a750:	48 17       	cp	r20, r24
    a752:	59 07       	cpc	r21, r25
    a754:	6a 07       	cpc	r22, r26
    a756:	7b 07       	cpc	r23, r27
    a758:	88 f0       	brcs	.+34     	; 0xa77c <create_chain+0x216>
    a75a:	01 97       	sbiw	r24, 0x01	; 1
    a75c:	a1 09       	sbc	r26, r1
    a75e:	b1 09       	sbc	r27, r1
    a760:	89 8b       	std	Y+17, r24	; 0x11
    a762:	9a 8b       	std	Y+18, r25	; 0x12
    a764:	ab 8b       	std	Y+19, r26	; 0x13
    a766:	bc 8b       	std	Y+20, r27	; 0x14
    a768:	09 c0       	rjmp	.+18     	; 0xa77c <create_chain+0x216>
    a76a:	97 01       	movw	r18, r14
    a76c:	86 01       	movw	r16, r12
    a76e:	b3 01       	movw	r22, r6
    a770:	a2 01       	movw	r20, r4
    a772:	ce 01       	movw	r24, r28
    a774:	88 dc       	rcall	.-1776   	; 0xa086 <put_fat>
    a776:	00 97       	sbiw	r24, 0x00	; 0
    a778:	d9 f2       	breq	.-74     	; 0xa730 <create_chain+0x1ca>
    a77a:	08 c0       	rjmp	.+16     	; 0xa78c <create_chain+0x226>
    a77c:	8c 81       	ldd	r24, Y+4	; 0x04
    a77e:	81 60       	ori	r24, 0x01	; 1
    a780:	8c 83       	std	Y+4, r24	; 0x04
    a782:	4c 2d       	mov	r20, r12
    a784:	3d 2d       	mov	r19, r13
    a786:	2e 2d       	mov	r18, r14
    a788:	9f 2d       	mov	r25, r15
    a78a:	0b c0       	rjmp	.+22     	; 0xa7a2 <create_chain+0x23c>
    a78c:	01 97       	sbiw	r24, 0x01	; 1
    a78e:	09 f4       	brne	.+2      	; 0xa792 <create_chain+0x22c>
    a790:	1c cf       	rjmp	.-456    	; 0xa5ca <create_chain+0x64>
    a792:	41 e0       	ldi	r20, 0x01	; 1
    a794:	30 e0       	ldi	r19, 0x00	; 0
    a796:	20 e0       	ldi	r18, 0x00	; 0
    a798:	90 e0       	ldi	r25, 0x00	; 0
    a79a:	03 c0       	rjmp	.+6      	; 0xa7a2 <create_chain+0x23c>
    a79c:	46 2f       	mov	r20, r22
    a79e:	37 2f       	mov	r19, r23
    a7a0:	28 2f       	mov	r18, r24
    a7a2:	64 2f       	mov	r22, r20
    a7a4:	73 2f       	mov	r23, r19
    a7a6:	82 2f       	mov	r24, r18
    a7a8:	cd b7       	in	r28, 0x3d	; 61
    a7aa:	de b7       	in	r29, 0x3e	; 62
    a7ac:	e0 e1       	ldi	r30, 0x10	; 16
    a7ae:	0c 94 37 e5 	jmp	0x1ca6e	; 0x1ca6e <__epilogue_restores__+0x4>

0000a7b2 <remove_chain>:
    a7b2:	4f 92       	push	r4
    a7b4:	5f 92       	push	r5
    a7b6:	6f 92       	push	r6
    a7b8:	7f 92       	push	r7
    a7ba:	af 92       	push	r10
    a7bc:	bf 92       	push	r11
    a7be:	cf 92       	push	r12
    a7c0:	df 92       	push	r13
    a7c2:	ef 92       	push	r14
    a7c4:	ff 92       	push	r15
    a7c6:	0f 93       	push	r16
    a7c8:	1f 93       	push	r17
    a7ca:	cf 93       	push	r28
    a7cc:	df 93       	push	r29
    a7ce:	5c 01       	movw	r10, r24
    a7d0:	6a 01       	movw	r12, r20
    a7d2:	7b 01       	movw	r14, r22
    a7d4:	b9 01       	movw	r22, r18
    a7d6:	a8 01       	movw	r20, r16
    a7d8:	22 e0       	ldi	r18, 0x02	; 2
    a7da:	c2 16       	cp	r12, r18
    a7dc:	d1 04       	cpc	r13, r1
    a7de:	e1 04       	cpc	r14, r1
    a7e0:	f1 04       	cpc	r15, r1
    a7e2:	10 f4       	brcc	.+4      	; 0xa7e8 <remove_chain+0x36>
    a7e4:	22 e0       	ldi	r18, 0x02	; 2
    a7e6:	27 c0       	rjmp	.+78     	; 0xa836 <remove_chain+0x84>
    a7e8:	fc 01       	movw	r30, r24
    a7ea:	c0 81       	ld	r28, Z
    a7ec:	d1 81       	ldd	r29, Z+1	; 0x01
    a7ee:	89 8d       	ldd	r24, Y+25	; 0x19
    a7f0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a7f2:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a7f4:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a7f6:	c8 16       	cp	r12, r24
    a7f8:	d9 06       	cpc	r13, r25
    a7fa:	ea 06       	cpc	r14, r26
    a7fc:	fb 06       	cpc	r15, r27
    a7fe:	90 f7       	brcc	.-28     	; 0xa7e4 <remove_chain+0x32>
    a800:	41 15       	cp	r20, r1
    a802:	51 05       	cpc	r21, r1
    a804:	61 05       	cpc	r22, r1
    a806:	71 05       	cpc	r23, r1
    a808:	41 f0       	breq	.+16     	; 0xa81a <remove_chain+0x68>
    a80a:	0f ef       	ldi	r16, 0xFF	; 255
    a80c:	1f ef       	ldi	r17, 0xFF	; 255
    a80e:	98 01       	movw	r18, r16
    a810:	ce 01       	movw	r24, r28
    a812:	39 dc       	rcall	.-1934   	; 0xa086 <put_fat>
    a814:	00 97       	sbiw	r24, 0x00	; 0
    a816:	09 f0       	breq	.+2      	; 0xa81a <remove_chain+0x68>
    a818:	4c c0       	rjmp	.+152    	; 0xa8b2 <remove_chain+0x100>
    a81a:	b7 01       	movw	r22, r14
    a81c:	a6 01       	movw	r20, r12
    a81e:	f5 01       	movw	r30, r10
    a820:	80 81       	ld	r24, Z
    a822:	91 81       	ldd	r25, Z+1	; 0x01
    a824:	2b dd       	rcall	.-1450   	; 0xa27c <get_fat.isra.10>
    a826:	2b 01       	movw	r4, r22
    a828:	3c 01       	movw	r6, r24
    a82a:	61 15       	cp	r22, r1
    a82c:	71 05       	cpc	r23, r1
    a82e:	81 05       	cpc	r24, r1
    a830:	91 05       	cpc	r25, r1
    a832:	19 f4       	brne	.+6      	; 0xa83a <remove_chain+0x88>
    a834:	20 e0       	ldi	r18, 0x00	; 0
    a836:	90 e0       	ldi	r25, 0x00	; 0
    a838:	3d c0       	rjmp	.+122    	; 0xa8b4 <remove_chain+0x102>
    a83a:	61 30       	cpi	r22, 0x01	; 1
    a83c:	71 05       	cpc	r23, r1
    a83e:	81 05       	cpc	r24, r1
    a840:	91 05       	cpc	r25, r1
    a842:	81 f2       	breq	.-96     	; 0xa7e4 <remove_chain+0x32>
    a844:	6f 3f       	cpi	r22, 0xFF	; 255
    a846:	7f 4f       	sbci	r23, 0xFF	; 255
    a848:	8f 4f       	sbci	r24, 0xFF	; 255
    a84a:	9f 4f       	sbci	r25, 0xFF	; 255
    a84c:	81 f1       	breq	.+96     	; 0xa8ae <remove_chain+0xfc>
    a84e:	00 e0       	ldi	r16, 0x00	; 0
    a850:	10 e0       	ldi	r17, 0x00	; 0
    a852:	98 01       	movw	r18, r16
    a854:	b7 01       	movw	r22, r14
    a856:	a6 01       	movw	r20, r12
    a858:	ce 01       	movw	r24, r28
    a85a:	15 dc       	rcall	.-2006   	; 0xa086 <put_fat>
    a85c:	00 97       	sbiw	r24, 0x00	; 0
    a85e:	49 f5       	brne	.+82     	; 0xa8b2 <remove_chain+0x100>
    a860:	89 89       	ldd	r24, Y+17	; 0x11
    a862:	9a 89       	ldd	r25, Y+18	; 0x12
    a864:	ab 89       	ldd	r26, Y+19	; 0x13
    a866:	bc 89       	ldd	r27, Y+20	; 0x14
    a868:	49 8d       	ldd	r20, Y+25	; 0x19
    a86a:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a86c:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a86e:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a870:	6a 01       	movw	r12, r20
    a872:	7b 01       	movw	r14, r22
    a874:	e2 e0       	ldi	r30, 0x02	; 2
    a876:	ce 1a       	sub	r12, r30
    a878:	d1 08       	sbc	r13, r1
    a87a:	e1 08       	sbc	r14, r1
    a87c:	f1 08       	sbc	r15, r1
    a87e:	8c 15       	cp	r24, r12
    a880:	9d 05       	cpc	r25, r13
    a882:	ae 05       	cpc	r26, r14
    a884:	bf 05       	cpc	r27, r15
    a886:	50 f4       	brcc	.+20     	; 0xa89c <remove_chain+0xea>
    a888:	01 96       	adiw	r24, 0x01	; 1
    a88a:	a1 1d       	adc	r26, r1
    a88c:	b1 1d       	adc	r27, r1
    a88e:	89 8b       	std	Y+17, r24	; 0x11
    a890:	9a 8b       	std	Y+18, r25	; 0x12
    a892:	ab 8b       	std	Y+19, r26	; 0x13
    a894:	bc 8b       	std	Y+20, r27	; 0x14
    a896:	8c 81       	ldd	r24, Y+4	; 0x04
    a898:	81 60       	ori	r24, 0x01	; 1
    a89a:	8c 83       	std	Y+4, r24	; 0x04
    a89c:	73 01       	movw	r14, r6
    a89e:	62 01       	movw	r12, r4
    a8a0:	44 16       	cp	r4, r20
    a8a2:	55 06       	cpc	r5, r21
    a8a4:	66 06       	cpc	r6, r22
    a8a6:	77 06       	cpc	r7, r23
    a8a8:	08 f4       	brcc	.+2      	; 0xa8ac <remove_chain+0xfa>
    a8aa:	b7 cf       	rjmp	.-146    	; 0xa81a <remove_chain+0x68>
    a8ac:	c3 cf       	rjmp	.-122    	; 0xa834 <remove_chain+0x82>
    a8ae:	21 e0       	ldi	r18, 0x01	; 1
    a8b0:	c2 cf       	rjmp	.-124    	; 0xa836 <remove_chain+0x84>
    a8b2:	28 2f       	mov	r18, r24
    a8b4:	82 2f       	mov	r24, r18
    a8b6:	df 91       	pop	r29
    a8b8:	cf 91       	pop	r28
    a8ba:	1f 91       	pop	r17
    a8bc:	0f 91       	pop	r16
    a8be:	ff 90       	pop	r15
    a8c0:	ef 90       	pop	r14
    a8c2:	df 90       	pop	r13
    a8c4:	cf 90       	pop	r12
    a8c6:	bf 90       	pop	r11
    a8c8:	af 90       	pop	r10
    a8ca:	7f 90       	pop	r7
    a8cc:	6f 90       	pop	r6
    a8ce:	5f 90       	pop	r5
    a8d0:	4f 90       	pop	r4
    a8d2:	08 95       	ret

0000a8d4 <dir_next>:
    a8d4:	4f 92       	push	r4
    a8d6:	5f 92       	push	r5
    a8d8:	6f 92       	push	r6
    a8da:	7f 92       	push	r7
    a8dc:	af 92       	push	r10
    a8de:	bf 92       	push	r11
    a8e0:	cf 92       	push	r12
    a8e2:	df 92       	push	r13
    a8e4:	ef 92       	push	r14
    a8e6:	ff 92       	push	r15
    a8e8:	0f 93       	push	r16
    a8ea:	1f 93       	push	r17
    a8ec:	cf 93       	push	r28
    a8ee:	df 93       	push	r29
    a8f0:	ec 01       	movw	r28, r24
    a8f2:	08 81       	ld	r16, Y
    a8f4:	19 81       	ldd	r17, Y+1	; 0x01
    a8f6:	ce 84       	ldd	r12, Y+14	; 0x0e
    a8f8:	df 84       	ldd	r13, Y+15	; 0x0f
    a8fa:	e8 88       	ldd	r14, Y+16	; 0x10
    a8fc:	f9 88       	ldd	r15, Y+17	; 0x11
    a8fe:	80 e2       	ldi	r24, 0x20	; 32
    a900:	c8 0e       	add	r12, r24
    a902:	d1 1c       	adc	r13, r1
    a904:	e1 1c       	adc	r14, r1
    a906:	f1 1c       	adc	r15, r1
    a908:	c1 14       	cp	r12, r1
    a90a:	d1 04       	cpc	r13, r1
    a90c:	e0 e2       	ldi	r30, 0x20	; 32
    a90e:	ee 06       	cpc	r14, r30
    a910:	f1 04       	cpc	r15, r1
    a912:	20 f0       	brcs	.+8      	; 0xa91c <dir_next+0x48>
    a914:	1e 8a       	std	Y+22, r1	; 0x16
    a916:	1f 8a       	std	Y+23, r1	; 0x17
    a918:	18 8e       	std	Y+24, r1	; 0x18
    a91a:	19 8e       	std	Y+25, r1	; 0x19
    a91c:	8e 89       	ldd	r24, Y+22	; 0x16
    a91e:	9f 89       	ldd	r25, Y+23	; 0x17
    a920:	a8 8d       	ldd	r26, Y+24	; 0x18
    a922:	b9 8d       	ldd	r27, Y+25	; 0x19
    a924:	00 97       	sbiw	r24, 0x00	; 0
    a926:	a1 05       	cpc	r26, r1
    a928:	b1 05       	cpc	r27, r1
    a92a:	09 f4       	brne	.+2      	; 0xa92e <dir_next+0x5a>
    a92c:	a7 c0       	rjmp	.+334    	; 0xaa7c <dir_next+0x1a8>
    a92e:	5b 01       	movw	r10, r22
    a930:	b7 01       	movw	r22, r14
    a932:	a6 01       	movw	r20, r12
    a934:	51 70       	andi	r21, 0x01	; 1
    a936:	66 27       	eor	r22, r22
    a938:	77 27       	eor	r23, r23
    a93a:	45 2b       	or	r20, r21
    a93c:	46 2b       	or	r20, r22
    a93e:	47 2b       	or	r20, r23
    a940:	09 f0       	breq	.+2      	; 0xa944 <dir_next+0x70>
    a942:	8d c0       	rjmp	.+282    	; 0xaa5e <dir_next+0x18a>
    a944:	01 96       	adiw	r24, 0x01	; 1
    a946:	a1 1d       	adc	r26, r1
    a948:	b1 1d       	adc	r27, r1
    a94a:	8e 8b       	std	Y+22, r24	; 0x16
    a94c:	9f 8b       	std	Y+23, r25	; 0x17
    a94e:	a8 8f       	std	Y+24, r26	; 0x18
    a950:	b9 8f       	std	Y+25, r27	; 0x19
    a952:	4a 89       	ldd	r20, Y+18	; 0x12
    a954:	5b 89       	ldd	r21, Y+19	; 0x13
    a956:	6c 89       	ldd	r22, Y+20	; 0x14
    a958:	7d 89       	ldd	r23, Y+21	; 0x15
    a95a:	f8 01       	movw	r30, r16
    a95c:	41 15       	cp	r20, r1
    a95e:	51 05       	cpc	r21, r1
    a960:	61 05       	cpc	r22, r1
    a962:	71 05       	cpc	r23, r1
    a964:	c1 f4       	brne	.+48     	; 0xa996 <dir_next+0xc2>
    a966:	87 81       	ldd	r24, Z+7	; 0x07
    a968:	90 85       	ldd	r25, Z+8	; 0x08
    a96a:	a0 e0       	ldi	r26, 0x00	; 0
    a96c:	b0 e0       	ldi	r27, 0x00	; 0
    a96e:	b7 01       	movw	r22, r14
    a970:	a6 01       	movw	r20, r12
    a972:	35 e0       	ldi	r19, 0x05	; 5
    a974:	76 95       	lsr	r23
    a976:	67 95       	ror	r22
    a978:	57 95       	ror	r21
    a97a:	47 95       	ror	r20
    a97c:	3a 95       	dec	r19
    a97e:	d1 f7       	brne	.-12     	; 0xa974 <dir_next+0xa0>
    a980:	48 17       	cp	r20, r24
    a982:	59 07       	cpc	r21, r25
    a984:	6a 07       	cpc	r22, r26
    a986:	7b 07       	cpc	r23, r27
    a988:	08 f4       	brcc	.+2      	; 0xa98c <dir_next+0xb8>
    a98a:	69 c0       	rjmp	.+210    	; 0xaa5e <dir_next+0x18a>
    a98c:	1e 8a       	std	Y+22, r1	; 0x16
    a98e:	1f 8a       	std	Y+23, r1	; 0x17
    a990:	18 8e       	std	Y+24, r1	; 0x18
    a992:	19 8e       	std	Y+25, r1	; 0x19
    a994:	73 c0       	rjmp	.+230    	; 0xaa7c <dir_next+0x1a8>
    a996:	81 85       	ldd	r24, Z+9	; 0x09
    a998:	92 85       	ldd	r25, Z+10	; 0x0a
    a99a:	01 97       	sbiw	r24, 0x01	; 1
    a99c:	a0 e0       	ldi	r26, 0x00	; 0
    a99e:	b0 e0       	ldi	r27, 0x00	; 0
    a9a0:	26 01       	movw	r4, r12
    a9a2:	37 01       	movw	r6, r14
    a9a4:	29 e0       	ldi	r18, 0x09	; 9
    a9a6:	76 94       	lsr	r7
    a9a8:	67 94       	ror	r6
    a9aa:	57 94       	ror	r5
    a9ac:	47 94       	ror	r4
    a9ae:	2a 95       	dec	r18
    a9b0:	d1 f7       	brne	.-12     	; 0xa9a6 <dir_next+0xd2>
    a9b2:	84 21       	and	r24, r4
    a9b4:	95 21       	and	r25, r5
    a9b6:	a6 21       	and	r26, r6
    a9b8:	b7 21       	and	r27, r7
    a9ba:	89 2b       	or	r24, r25
    a9bc:	8a 2b       	or	r24, r26
    a9be:	8b 2b       	or	r24, r27
    a9c0:	09 f0       	breq	.+2      	; 0xa9c4 <dir_next+0xf0>
    a9c2:	4d c0       	rjmp	.+154    	; 0xaa5e <dir_next+0x18a>
    a9c4:	c8 01       	movw	r24, r16
    a9c6:	5a dc       	rcall	.-1868   	; 0xa27c <get_fat.isra.10>
    a9c8:	2b 01       	movw	r4, r22
    a9ca:	3c 01       	movw	r6, r24
    a9cc:	62 30       	cpi	r22, 0x02	; 2
    a9ce:	71 05       	cpc	r23, r1
    a9d0:	81 05       	cpc	r24, r1
    a9d2:	91 05       	cpc	r25, r1
    a9d4:	18 f4       	brcc	.+6      	; 0xa9dc <dir_next+0x108>
    a9d6:	82 e0       	ldi	r24, 0x02	; 2
    a9d8:	90 e0       	ldi	r25, 0x00	; 0
    a9da:	55 c0       	rjmp	.+170    	; 0xaa86 <dir_next+0x1b2>
    a9dc:	8f ef       	ldi	r24, 0xFF	; 255
    a9de:	48 16       	cp	r4, r24
    a9e0:	58 06       	cpc	r5, r24
    a9e2:	68 06       	cpc	r6, r24
    a9e4:	78 06       	cpc	r7, r24
    a9e6:	19 f4       	brne	.+6      	; 0xa9ee <dir_next+0x11a>
    a9e8:	81 e0       	ldi	r24, 0x01	; 1
    a9ea:	90 e0       	ldi	r25, 0x00	; 0
    a9ec:	4c c0       	rjmp	.+152    	; 0xaa86 <dir_next+0x1b2>
    a9ee:	f8 01       	movw	r30, r16
    a9f0:	81 8d       	ldd	r24, Z+25	; 0x19
    a9f2:	92 8d       	ldd	r25, Z+26	; 0x1a
    a9f4:	a3 8d       	ldd	r26, Z+27	; 0x1b
    a9f6:	b4 8d       	ldd	r27, Z+28	; 0x1c
    a9f8:	48 16       	cp	r4, r24
    a9fa:	59 06       	cpc	r5, r25
    a9fc:	6a 06       	cpc	r6, r26
    a9fe:	7b 06       	cpc	r7, r27
    aa00:	08 f1       	brcs	.+66     	; 0xaa44 <dir_next+0x170>
    aa02:	ab 28       	or	r10, r11
    aa04:	19 f2       	breq	.-122    	; 0xa98c <dir_next+0xb8>
    aa06:	4a 89       	ldd	r20, Y+18	; 0x12
    aa08:	5b 89       	ldd	r21, Y+19	; 0x13
    aa0a:	6c 89       	ldd	r22, Y+20	; 0x14
    aa0c:	7d 89       	ldd	r23, Y+21	; 0x15
    aa0e:	ce 01       	movw	r24, r28
    aa10:	aa dd       	rcall	.-1196   	; 0xa566 <create_chain>
    aa12:	2b 01       	movw	r4, r22
    aa14:	3c 01       	movw	r6, r24
    aa16:	61 15       	cp	r22, r1
    aa18:	71 05       	cpc	r23, r1
    aa1a:	81 05       	cpc	r24, r1
    aa1c:	91 05       	cpc	r25, r1
    aa1e:	89 f1       	breq	.+98     	; 0xaa82 <dir_next+0x1ae>
    aa20:	61 30       	cpi	r22, 0x01	; 1
    aa22:	71 05       	cpc	r23, r1
    aa24:	81 05       	cpc	r24, r1
    aa26:	91 05       	cpc	r25, r1
    aa28:	b1 f2       	breq	.-84     	; 0xa9d6 <dir_next+0x102>
    aa2a:	8f ef       	ldi	r24, 0xFF	; 255
    aa2c:	48 16       	cp	r4, r24
    aa2e:	58 06       	cpc	r5, r24
    aa30:	68 06       	cpc	r6, r24
    aa32:	78 06       	cpc	r7, r24
    aa34:	c9 f2       	breq	.-78     	; 0xa9e8 <dir_next+0x114>
    aa36:	b3 01       	movw	r22, r6
    aa38:	a2 01       	movw	r20, r4
    aa3a:	c8 01       	movw	r24, r16
    aa3c:	0e 94 c6 4c 	call	0x998c	; 0x998c <dir_clear>
    aa40:	89 2b       	or	r24, r25
    aa42:	91 f6       	brne	.-92     	; 0xa9e8 <dir_next+0x114>
    aa44:	4a 8a       	std	Y+18, r4	; 0x12
    aa46:	5b 8a       	std	Y+19, r5	; 0x13
    aa48:	6c 8a       	std	Y+20, r6	; 0x14
    aa4a:	7d 8a       	std	Y+21, r7	; 0x15
    aa4c:	b3 01       	movw	r22, r6
    aa4e:	a2 01       	movw	r20, r4
    aa50:	c8 01       	movw	r24, r16
    aa52:	0e 94 4c 49 	call	0x9298	; 0x9298 <clst2sect>
    aa56:	6e 8b       	std	Y+22, r22	; 0x16
    aa58:	7f 8b       	std	Y+23, r23	; 0x17
    aa5a:	88 8f       	std	Y+24, r24	; 0x18
    aa5c:	99 8f       	std	Y+25, r25	; 0x19
    aa5e:	ce 86       	std	Y+14, r12	; 0x0e
    aa60:	df 86       	std	Y+15, r13	; 0x0f
    aa62:	e8 8a       	std	Y+16, r14	; 0x10
    aa64:	f9 8a       	std	Y+17, r15	; 0x11
    aa66:	0b 5c       	subi	r16, 0xCB	; 203
    aa68:	1f 4f       	sbci	r17, 0xFF	; 255
    aa6a:	e1 e0       	ldi	r30, 0x01	; 1
    aa6c:	de 22       	and	r13, r30
    aa6e:	c0 0e       	add	r12, r16
    aa70:	d1 1e       	adc	r13, r17
    aa72:	db 8e       	std	Y+27, r13	; 0x1b
    aa74:	ca 8e       	std	Y+26, r12	; 0x1a
    aa76:	80 e0       	ldi	r24, 0x00	; 0
    aa78:	90 e0       	ldi	r25, 0x00	; 0
    aa7a:	05 c0       	rjmp	.+10     	; 0xaa86 <dir_next+0x1b2>
    aa7c:	84 e0       	ldi	r24, 0x04	; 4
    aa7e:	90 e0       	ldi	r25, 0x00	; 0
    aa80:	02 c0       	rjmp	.+4      	; 0xaa86 <dir_next+0x1b2>
    aa82:	87 e0       	ldi	r24, 0x07	; 7
    aa84:	90 e0       	ldi	r25, 0x00	; 0
    aa86:	df 91       	pop	r29
    aa88:	cf 91       	pop	r28
    aa8a:	1f 91       	pop	r17
    aa8c:	0f 91       	pop	r16
    aa8e:	ff 90       	pop	r15
    aa90:	ef 90       	pop	r14
    aa92:	df 90       	pop	r13
    aa94:	cf 90       	pop	r12
    aa96:	bf 90       	pop	r11
    aa98:	af 90       	pop	r10
    aa9a:	7f 90       	pop	r7
    aa9c:	6f 90       	pop	r6
    aa9e:	5f 90       	pop	r5
    aaa0:	4f 90       	pop	r4
    aaa2:	08 95       	ret

0000aaa4 <dir_alloc>:
    aaa4:	a0 e0       	ldi	r26, 0x00	; 0
    aaa6:	b0 e0       	ldi	r27, 0x00	; 0
    aaa8:	e8 e5       	ldi	r30, 0x58	; 88
    aaaa:	f5 e5       	ldi	r31, 0x55	; 85
    aaac:	0c 94 23 e5 	jmp	0x1ca46	; 0x1ca46 <__prologue_saves__+0x14>
    aab0:	ec 01       	movw	r28, r24
    aab2:	6b 01       	movw	r12, r22
    aab4:	e8 80       	ld	r14, Y
    aab6:	f9 80       	ldd	r15, Y+1	; 0x01
    aab8:	40 e0       	ldi	r20, 0x00	; 0
    aaba:	50 e0       	ldi	r21, 0x00	; 0
    aabc:	ba 01       	movw	r22, r20
    aabe:	92 dc       	rcall	.-1756   	; 0xa3e4 <dir_sdi>
    aac0:	00 97       	sbiw	r24, 0x00	; 0
    aac2:	f9 f4       	brne	.+62     	; 0xab02 <dir_alloc+0x5e>
    aac4:	00 e0       	ldi	r16, 0x00	; 0
    aac6:	10 e0       	ldi	r17, 0x00	; 0
    aac8:	4e 89       	ldd	r20, Y+22	; 0x16
    aaca:	5f 89       	ldd	r21, Y+23	; 0x17
    aacc:	68 8d       	ldd	r22, Y+24	; 0x18
    aace:	79 8d       	ldd	r23, Y+25	; 0x19
    aad0:	c7 01       	movw	r24, r14
    aad2:	04 d8       	rcall	.-4088   	; 0x9adc <move_window>
    aad4:	00 97       	sbiw	r24, 0x00	; 0
    aad6:	a9 f4       	brne	.+42     	; 0xab02 <dir_alloc+0x5e>
    aad8:	ea 8d       	ldd	r30, Y+26	; 0x1a
    aada:	fb 8d       	ldd	r31, Y+27	; 0x1b
    aadc:	20 81       	ld	r18, Z
    aade:	25 3e       	cpi	r18, 0xE5	; 229
    aae0:	11 f0       	breq	.+4      	; 0xaae6 <dir_alloc+0x42>
    aae2:	21 11       	cpse	r18, r1
    aae4:	06 c0       	rjmp	.+12     	; 0xaaf2 <dir_alloc+0x4e>
    aae6:	0f 5f       	subi	r16, 0xFF	; 255
    aae8:	1f 4f       	sbci	r17, 0xFF	; 255
    aaea:	0c 15       	cp	r16, r12
    aaec:	1d 05       	cpc	r17, r13
    aaee:	19 f4       	brne	.+6      	; 0xaaf6 <dir_alloc+0x52>
    aaf0:	0d c0       	rjmp	.+26     	; 0xab0c <dir_alloc+0x68>
    aaf2:	00 e0       	ldi	r16, 0x00	; 0
    aaf4:	10 e0       	ldi	r17, 0x00	; 0
    aaf6:	61 e0       	ldi	r22, 0x01	; 1
    aaf8:	70 e0       	ldi	r23, 0x00	; 0
    aafa:	ce 01       	movw	r24, r28
    aafc:	eb de       	rcall	.-554    	; 0xa8d4 <dir_next>
    aafe:	00 97       	sbiw	r24, 0x00	; 0
    ab00:	19 f3       	breq	.-58     	; 0xaac8 <dir_alloc+0x24>
    ab02:	84 30       	cpi	r24, 0x04	; 4
    ab04:	91 05       	cpc	r25, r1
    ab06:	11 f4       	brne	.+4      	; 0xab0c <dir_alloc+0x68>
    ab08:	87 e0       	ldi	r24, 0x07	; 7
    ab0a:	90 e0       	ldi	r25, 0x00	; 0
    ab0c:	cd b7       	in	r28, 0x3d	; 61
    ab0e:	de b7       	in	r29, 0x3e	; 62
    ab10:	e8 e0       	ldi	r30, 0x08	; 8
    ab12:	0c 94 3f e5 	jmp	0x1ca7e	; 0x1ca7e <__epilogue_restores__+0x14>

0000ab16 <dir_read>:
    ab16:	a0 e0       	ldi	r26, 0x00	; 0
    ab18:	b0 e0       	ldi	r27, 0x00	; 0
    ab1a:	e1 e9       	ldi	r30, 0x91	; 145
    ab1c:	f5 e5       	ldi	r31, 0x55	; 85
    ab1e:	0c 94 1f e5 	jmp	0x1ca3e	; 0x1ca3e <__prologue_saves__+0xc>
    ab22:	ec 01       	movw	r28, r24
    ab24:	7b 01       	movw	r14, r22
    ab26:	a8 80       	ld	r10, Y
    ab28:	b9 80       	ldd	r11, Y+1	; 0x01
    ab2a:	dd 24       	eor	r13, r13
    ab2c:	da 94       	dec	r13
    ab2e:	1f ef       	ldi	r17, 0xFF	; 255
    ab30:	84 e0       	ldi	r24, 0x04	; 4
    ab32:	90 e0       	ldi	r25, 0x00	; 0
    ab34:	fd e0       	ldi	r31, 0x0D	; 13
    ab36:	cf 2e       	mov	r12, r31
    ab38:	4e 89       	ldd	r20, Y+22	; 0x16
    ab3a:	5f 89       	ldd	r21, Y+23	; 0x17
    ab3c:	68 8d       	ldd	r22, Y+24	; 0x18
    ab3e:	79 8d       	ldd	r23, Y+25	; 0x19
    ab40:	41 15       	cp	r20, r1
    ab42:	51 05       	cpc	r21, r1
    ab44:	61 05       	cpc	r22, r1
    ab46:	71 05       	cpc	r23, r1
    ab48:	09 f4       	brne	.+2      	; 0xab4c <dir_read+0x36>
    ab4a:	9a c0       	rjmp	.+308    	; 0xac80 <dir_read+0x16a>
    ab4c:	c5 01       	movw	r24, r10
    ab4e:	0e 94 6e 4d 	call	0x9adc	; 0x9adc <move_window>
    ab52:	00 97       	sbiw	r24, 0x00	; 0
    ab54:	09 f0       	breq	.+2      	; 0xab58 <dir_read+0x42>
    ab56:	96 c0       	rjmp	.+300    	; 0xac84 <dir_read+0x16e>
    ab58:	8a 8c       	ldd	r8, Y+26	; 0x1a
    ab5a:	9b 8c       	ldd	r9, Y+27	; 0x1b
    ab5c:	f4 01       	movw	r30, r8
    ab5e:	00 81       	ld	r16, Z
    ab60:	00 23       	and	r16, r16
    ab62:	09 f4       	brne	.+2      	; 0xab66 <dir_read+0x50>
    ab64:	97 c0       	rjmp	.+302    	; 0xac94 <dir_read+0x17e>
    ab66:	83 85       	ldd	r24, Z+11	; 0x0b
    ab68:	8f 73       	andi	r24, 0x3F	; 63
    ab6a:	8c 83       	std	Y+4, r24	; 0x04
    ab6c:	05 3e       	cpi	r16, 0xE5	; 229
    ab6e:	09 f4       	brne	.+2      	; 0xab72 <dir_read+0x5c>
    ab70:	7e c0       	rjmp	.+252    	; 0xac6e <dir_read+0x158>
    ab72:	0e 32       	cpi	r16, 0x2E	; 46
    ab74:	09 f4       	brne	.+2      	; 0xab78 <dir_read+0x62>
    ab76:	7b c0       	rjmp	.+246    	; 0xac6e <dir_read+0x158>
    ab78:	21 e0       	ldi	r18, 0x01	; 1
    ab7a:	30 e0       	ldi	r19, 0x00	; 0
    ab7c:	98 2f       	mov	r25, r24
    ab7e:	9f 71       	andi	r25, 0x1F	; 31
    ab80:	98 30       	cpi	r25, 0x08	; 8
    ab82:	11 f0       	breq	.+4      	; 0xab88 <dir_read+0x72>
    ab84:	20 e0       	ldi	r18, 0x00	; 0
    ab86:	30 e0       	ldi	r19, 0x00	; 0
    ab88:	2e 15       	cp	r18, r14
    ab8a:	3f 05       	cpc	r19, r15
    ab8c:	09 f0       	breq	.+2      	; 0xab90 <dir_read+0x7a>
    ab8e:	6f c0       	rjmp	.+222    	; 0xac6e <dir_read+0x158>
    ab90:	8f 30       	cpi	r24, 0x0F	; 15
    ab92:	09 f0       	breq	.+2      	; 0xab96 <dir_read+0x80>
    ab94:	5c c0       	rjmp	.+184    	; 0xac4e <dir_read+0x138>
    ab96:	06 ff       	sbrs	r16, 6
    ab98:	0c c0       	rjmp	.+24     	; 0xabb2 <dir_read+0x9c>
    ab9a:	f4 01       	movw	r30, r8
    ab9c:	85 85       	ldd	r24, Z+13	; 0x0d
    ab9e:	0f 7b       	andi	r16, 0xBF	; 191
    aba0:	4e 85       	ldd	r20, Y+14	; 0x0e
    aba2:	5f 85       	ldd	r21, Y+15	; 0x0f
    aba4:	68 89       	ldd	r22, Y+16	; 0x10
    aba6:	79 89       	ldd	r23, Y+17	; 0x11
    aba8:	48 a7       	std	Y+40, r20	; 0x28
    abaa:	59 a7       	std	Y+41, r21	; 0x29
    abac:	6a a7       	std	Y+42, r22	; 0x2a
    abae:	7b a7       	std	Y+43, r23	; 0x2b
    abb0:	03 c0       	rjmp	.+6      	; 0xabb8 <dir_read+0xa2>
    abb2:	10 13       	cpse	r17, r16
    abb4:	5c c0       	rjmp	.+184    	; 0xac6e <dir_read+0x158>
    abb6:	8d 2d       	mov	r24, r13
    abb8:	f4 01       	movw	r30, r8
    abba:	d5 84       	ldd	r13, Z+13	; 0x0d
    abbc:	d8 12       	cpse	r13, r24
    abbe:	56 c0       	rjmp	.+172    	; 0xac6c <dir_read+0x156>
    abc0:	82 8d       	ldd	r24, Z+26	; 0x1a
    abc2:	93 8d       	ldd	r25, Z+27	; 0x1b
    abc4:	89 2b       	or	r24, r25
    abc6:	09 f0       	breq	.+2      	; 0xabca <dir_read+0xb4>
    abc8:	52 c0       	rjmp	.+164    	; 0xac6e <dir_read+0x158>
    abca:	f5 01       	movw	r30, r10
    abcc:	63 85       	ldd	r22, Z+11	; 0x0b
    abce:	74 85       	ldd	r23, Z+12	; 0x0c
    abd0:	f4 01       	movw	r30, r8
    abd2:	80 81       	ld	r24, Z
    abd4:	90 e0       	ldi	r25, 0x00	; 0
    abd6:	8f 7b       	andi	r24, 0xBF	; 191
    abd8:	01 97       	sbiw	r24, 0x01	; 1
    abda:	c8 9e       	mul	r12, r24
    abdc:	90 01       	movw	r18, r0
    abde:	c9 9e       	mul	r12, r25
    abe0:	30 0d       	add	r19, r0
    abe2:	11 24       	eor	r1, r1
    abe4:	a9 e0       	ldi	r26, 0x09	; 9
    abe6:	b4 e0       	ldi	r27, 0x04	; 4
    abe8:	81 e0       	ldi	r24, 0x01	; 1
    abea:	90 e0       	ldi	r25, 0x00	; 0
    abec:	4d 91       	ld	r20, X+
    abee:	f4 01       	movw	r30, r8
    abf0:	e4 0f       	add	r30, r20
    abf2:	f1 1d       	adc	r31, r1
    abf4:	40 81       	ld	r20, Z
    abf6:	51 81       	ldd	r21, Z+1	; 0x01
    abf8:	00 97       	sbiw	r24, 0x00	; 0
    abfa:	81 f0       	breq	.+32     	; 0xac1c <dir_read+0x106>
    abfc:	2f 3f       	cpi	r18, 0xFF	; 255
    abfe:	31 05       	cpc	r19, r1
    ac00:	09 f0       	breq	.+2      	; 0xac04 <dir_read+0xee>
    ac02:	a8 f5       	brcc	.+106    	; 0xac6e <dir_read+0x158>
    ac04:	c9 01       	movw	r24, r18
    ac06:	88 0f       	add	r24, r24
    ac08:	99 1f       	adc	r25, r25
    ac0a:	86 0f       	add	r24, r22
    ac0c:	97 1f       	adc	r25, r23
    ac0e:	fc 01       	movw	r30, r24
    ac10:	51 83       	std	Z+1, r21	; 0x01
    ac12:	40 83       	st	Z, r20
    ac14:	ca 01       	movw	r24, r20
    ac16:	2f 5f       	subi	r18, 0xFF	; 255
    ac18:	3f 4f       	sbci	r19, 0xFF	; 255
    ac1a:	03 c0       	rjmp	.+6      	; 0xac22 <dir_read+0x10c>
    ac1c:	4f 3f       	cpi	r20, 0xFF	; 255
    ac1e:	5f 4f       	sbci	r21, 0xFF	; 255
    ac20:	31 f5       	brne	.+76     	; 0xac6e <dir_read+0x158>
    ac22:	44 e0       	ldi	r20, 0x04	; 4
    ac24:	a6 31       	cpi	r26, 0x16	; 22
    ac26:	b4 07       	cpc	r27, r20
    ac28:	09 f7       	brne	.-62     	; 0xabec <dir_read+0xd6>
    ac2a:	f4 01       	movw	r30, r8
    ac2c:	40 81       	ld	r20, Z
    ac2e:	46 ff       	sbrs	r20, 6
    ac30:	2e c0       	rjmp	.+92     	; 0xac8e <dir_read+0x178>
    ac32:	89 2b       	or	r24, r25
    ac34:	61 f1       	breq	.+88     	; 0xac8e <dir_read+0x178>
    ac36:	2f 3f       	cpi	r18, 0xFF	; 255
    ac38:	31 05       	cpc	r19, r1
    ac3a:	09 f0       	breq	.+2      	; 0xac3e <dir_read+0x128>
    ac3c:	c0 f4       	brcc	.+48     	; 0xac6e <dir_read+0x158>
    ac3e:	22 0f       	add	r18, r18
    ac40:	33 1f       	adc	r19, r19
    ac42:	fb 01       	movw	r30, r22
    ac44:	e2 0f       	add	r30, r18
    ac46:	f3 1f       	adc	r31, r19
    ac48:	11 82       	std	Z+1, r1	; 0x01
    ac4a:	10 82       	st	Z, r1
    ac4c:	20 c0       	rjmp	.+64     	; 0xac8e <dir_read+0x178>
    ac4e:	11 11       	cpse	r17, r1
    ac50:	05 c0       	rjmp	.+10     	; 0xac5c <dir_read+0x146>
    ac52:	c4 01       	movw	r24, r8
    ac54:	0e 94 b0 49 	call	0x9360	; 0x9360 <sum_sfn>
    ac58:	d8 16       	cp	r13, r24
    ac5a:	f9 f0       	breq	.+62     	; 0xac9a <dir_read+0x184>
    ac5c:	8f ef       	ldi	r24, 0xFF	; 255
    ac5e:	9f ef       	ldi	r25, 0xFF	; 255
    ac60:	dc 01       	movw	r26, r24
    ac62:	88 a7       	std	Y+40, r24	; 0x28
    ac64:	99 a7       	std	Y+41, r25	; 0x29
    ac66:	aa a7       	std	Y+42, r26	; 0x2a
    ac68:	bb a7       	std	Y+43, r27	; 0x2b
    ac6a:	17 c0       	rjmp	.+46     	; 0xac9a <dir_read+0x184>
    ac6c:	d8 2e       	mov	r13, r24
    ac6e:	1f ef       	ldi	r17, 0xFF	; 255
    ac70:	60 e0       	ldi	r22, 0x00	; 0
    ac72:	70 e0       	ldi	r23, 0x00	; 0
    ac74:	ce 01       	movw	r24, r28
    ac76:	2e de       	rcall	.-932    	; 0xa8d4 <dir_next>
    ac78:	00 97       	sbiw	r24, 0x00	; 0
    ac7a:	09 f4       	brne	.+2      	; 0xac7e <dir_read+0x168>
    ac7c:	5d cf       	rjmp	.-326    	; 0xab38 <dir_read+0x22>
    ac7e:	02 c0       	rjmp	.+4      	; 0xac84 <dir_read+0x16e>
    ac80:	00 97       	sbiw	r24, 0x00	; 0
    ac82:	59 f0       	breq	.+22     	; 0xac9a <dir_read+0x184>
    ac84:	1e 8a       	std	Y+22, r1	; 0x16
    ac86:	1f 8a       	std	Y+23, r1	; 0x17
    ac88:	18 8e       	std	Y+24, r1	; 0x18
    ac8a:	19 8e       	std	Y+25, r1	; 0x19
    ac8c:	08 c0       	rjmp	.+16     	; 0xac9e <dir_read+0x188>
    ac8e:	1f ef       	ldi	r17, 0xFF	; 255
    ac90:	10 0f       	add	r17, r16
    ac92:	ee cf       	rjmp	.-36     	; 0xac70 <dir_read+0x15a>
    ac94:	84 e0       	ldi	r24, 0x04	; 4
    ac96:	90 e0       	ldi	r25, 0x00	; 0
    ac98:	f5 cf       	rjmp	.-22     	; 0xac84 <dir_read+0x16e>
    ac9a:	80 e0       	ldi	r24, 0x00	; 0
    ac9c:	90 e0       	ldi	r25, 0x00	; 0
    ac9e:	cd b7       	in	r28, 0x3d	; 61
    aca0:	de b7       	in	r29, 0x3e	; 62
    aca2:	ec e0       	ldi	r30, 0x0C	; 12
    aca4:	0c 94 3b e5 	jmp	0x1ca76	; 0x1ca76 <__epilogue_restores__+0xc>

0000aca8 <dir_remove>:
    aca8:	a0 e0       	ldi	r26, 0x00	; 0
    acaa:	b0 e0       	ldi	r27, 0x00	; 0
    acac:	ea e5       	ldi	r30, 0x5A	; 90
    acae:	f6 e5       	ldi	r31, 0x56	; 86
    acb0:	0c 94 21 e5 	jmp	0x1ca42	; 0x1ca42 <__prologue_saves__+0x10>
    acb4:	ec 01       	movw	r28, r24
    acb6:	08 81       	ld	r16, Y
    acb8:	19 81       	ldd	r17, Y+1	; 0x01
    acba:	ce 84       	ldd	r12, Y+14	; 0x0e
    acbc:	df 84       	ldd	r13, Y+15	; 0x0f
    acbe:	e8 88       	ldd	r14, Y+16	; 0x10
    acc0:	f9 88       	ldd	r15, Y+17	; 0x11
    acc2:	48 a5       	ldd	r20, Y+40	; 0x28
    acc4:	59 a5       	ldd	r21, Y+41	; 0x29
    acc6:	6a a5       	ldd	r22, Y+42	; 0x2a
    acc8:	7b a5       	ldd	r23, Y+43	; 0x2b
    acca:	4f 3f       	cpi	r20, 0xFF	; 255
    accc:	8f ef       	ldi	r24, 0xFF	; 255
    acce:	58 07       	cpc	r21, r24
    acd0:	68 07       	cpc	r22, r24
    acd2:	78 07       	cpc	r23, r24
    acd4:	29 f4       	brne	.+10     	; 0xace0 <dir_remove+0x38>
    acd6:	85 ee       	ldi	r24, 0xE5	; 229
    acd8:	b8 2e       	mov	r11, r24
    acda:	aa 24       	eor	r10, r10
    acdc:	a3 94       	inc	r10
    acde:	19 c0       	rjmp	.+50     	; 0xad12 <dir_remove+0x6a>
    ace0:	ce 01       	movw	r24, r28
    ace2:	80 db       	rcall	.-2304   	; 0xa3e4 <dir_sdi>
    ace4:	00 97       	sbiw	r24, 0x00	; 0
    ace6:	19 f5       	brne	.+70     	; 0xad2e <dir_remove+0x86>
    ace8:	f6 cf       	rjmp	.-20     	; 0xacd6 <dir_remove+0x2e>
    acea:	ea 8d       	ldd	r30, Y+26	; 0x1a
    acec:	fb 8d       	ldd	r31, Y+27	; 0x1b
    acee:	b0 82       	st	Z, r11
    acf0:	f8 01       	movw	r30, r16
    acf2:	a3 82       	std	Z+3, r10	; 0x03
    acf4:	4e 85       	ldd	r20, Y+14	; 0x0e
    acf6:	5f 85       	ldd	r21, Y+15	; 0x0f
    acf8:	68 89       	ldd	r22, Y+16	; 0x10
    acfa:	79 89       	ldd	r23, Y+17	; 0x11
    acfc:	4c 15       	cp	r20, r12
    acfe:	5d 05       	cpc	r21, r13
    ad00:	6e 05       	cpc	r22, r14
    ad02:	7f 05       	cpc	r23, r15
    ad04:	a0 f4       	brcc	.+40     	; 0xad2e <dir_remove+0x86>
    ad06:	60 e0       	ldi	r22, 0x00	; 0
    ad08:	70 e0       	ldi	r23, 0x00	; 0
    ad0a:	ce 01       	movw	r24, r28
    ad0c:	e3 dd       	rcall	.-1082   	; 0xa8d4 <dir_next>
    ad0e:	00 97       	sbiw	r24, 0x00	; 0
    ad10:	49 f4       	brne	.+18     	; 0xad24 <dir_remove+0x7c>
    ad12:	4e 89       	ldd	r20, Y+22	; 0x16
    ad14:	5f 89       	ldd	r21, Y+23	; 0x17
    ad16:	68 8d       	ldd	r22, Y+24	; 0x18
    ad18:	79 8d       	ldd	r23, Y+25	; 0x19
    ad1a:	c8 01       	movw	r24, r16
    ad1c:	0e 94 6e 4d 	call	0x9adc	; 0x9adc <move_window>
    ad20:	00 97       	sbiw	r24, 0x00	; 0
    ad22:	19 f3       	breq	.-58     	; 0xacea <dir_remove+0x42>
    ad24:	84 30       	cpi	r24, 0x04	; 4
    ad26:	91 05       	cpc	r25, r1
    ad28:	11 f4       	brne	.+4      	; 0xad2e <dir_remove+0x86>
    ad2a:	82 e0       	ldi	r24, 0x02	; 2
    ad2c:	90 e0       	ldi	r25, 0x00	; 0
    ad2e:	cd b7       	in	r28, 0x3d	; 61
    ad30:	de b7       	in	r29, 0x3e	; 62
    ad32:	ea e0       	ldi	r30, 0x0A	; 10
    ad34:	0c 94 3d e5 	jmp	0x1ca7a	; 0x1ca7a <__epilogue_restores__+0x10>

0000ad38 <dir_find>:
    ad38:	ac e0       	ldi	r26, 0x0C	; 12
    ad3a:	b0 e0       	ldi	r27, 0x00	; 0
    ad3c:	e2 ea       	ldi	r30, 0xA2	; 162
    ad3e:	f6 e5       	ldi	r31, 0x56	; 86
    ad40:	0c 94 19 e5 	jmp	0x1ca32	; 0x1ca32 <__prologue_saves__>
    ad44:	9c 87       	std	Y+12, r25	; 0x0c
    ad46:	8b 87       	std	Y+11, r24	; 0x0b
    ad48:	fc 01       	movw	r30, r24
    ad4a:	01 90       	ld	r0, Z+
    ad4c:	f0 81       	ld	r31, Z
    ad4e:	e0 2d       	mov	r30, r0
    ad50:	fc 83       	std	Y+4, r31	; 0x04
    ad52:	eb 83       	std	Y+3, r30	; 0x03
    ad54:	40 e0       	ldi	r20, 0x00	; 0
    ad56:	50 e0       	ldi	r21, 0x00	; 0
    ad58:	ba 01       	movw	r22, r20
    ad5a:	44 db       	rcall	.-2424   	; 0xa3e4 <dir_sdi>
    ad5c:	00 97       	sbiw	r24, 0x00	; 0
    ad5e:	09 f0       	breq	.+2      	; 0xad62 <dir_find+0x2a>
    ad60:	e7 c0       	rjmp	.+462    	; 0xaf30 <dir_find+0x1f8>
    ad62:	8f ef       	ldi	r24, 0xFF	; 255
    ad64:	9f ef       	ldi	r25, 0xFF	; 255
    ad66:	dc 01       	movw	r26, r24
    ad68:	eb 85       	ldd	r30, Y+11	; 0x0b
    ad6a:	fc 85       	ldd	r31, Y+12	; 0x0c
    ad6c:	80 a7       	std	Z+40, r24	; 0x28
    ad6e:	91 a7       	std	Z+41, r25	; 0x29
    ad70:	a2 a7       	std	Z+42, r26	; 0x2a
    ad72:	b3 a7       	std	Z+43, r27	; 0x2b
    ad74:	0f ef       	ldi	r16, 0xFF	; 255
    ad76:	1f ef       	ldi	r17, 0xFF	; 255
    ad78:	44 24       	eor	r4, r4
    ad7a:	4a 94       	dec	r4
    ad7c:	54 2c       	mov	r5, r4
    ad7e:	32 01       	movw	r6, r4
    ad80:	7c 96       	adiw	r30, 0x1c	; 28
    ad82:	fa 87       	std	Y+10, r31	; 0x0a
    ad84:	e9 87       	std	Y+9, r30	; 0x09
    ad86:	eb 85       	ldd	r30, Y+11	; 0x0b
    ad88:	fc 85       	ldd	r31, Y+12	; 0x0c
    ad8a:	46 89       	ldd	r20, Z+22	; 0x16
    ad8c:	57 89       	ldd	r21, Z+23	; 0x17
    ad8e:	60 8d       	ldd	r22, Z+24	; 0x18
    ad90:	71 8d       	ldd	r23, Z+25	; 0x19
    ad92:	8b 81       	ldd	r24, Y+3	; 0x03
    ad94:	9c 81       	ldd	r25, Y+4	; 0x04
    ad96:	0e 94 6e 4d 	call	0x9adc	; 0x9adc <move_window>
    ad9a:	00 97       	sbiw	r24, 0x00	; 0
    ad9c:	09 f0       	breq	.+2      	; 0xada0 <dir_find+0x68>
    ad9e:	c8 c0       	rjmp	.+400    	; 0xaf30 <dir_find+0x1f8>
    ada0:	eb 85       	ldd	r30, Y+11	; 0x0b
    ada2:	fc 85       	ldd	r31, Y+12	; 0x0c
    ada4:	e2 8c       	ldd	r14, Z+26	; 0x1a
    ada6:	f3 8c       	ldd	r15, Z+27	; 0x1b
    ada8:	f7 01       	movw	r30, r14
    adaa:	d0 80       	ld	r13, Z
    adac:	dd 20       	and	r13, r13
    adae:	09 f4       	brne	.+2      	; 0xadb2 <dir_find+0x7a>
    adb0:	c1 c0       	rjmp	.+386    	; 0xaf34 <dir_find+0x1fc>
    adb2:	93 85       	ldd	r25, Z+11	; 0x0b
    adb4:	89 2f       	mov	r24, r25
    adb6:	8f 73       	andi	r24, 0x3F	; 63
    adb8:	eb 85       	ldd	r30, Y+11	; 0x0b
    adba:	fc 85       	ldd	r31, Y+12	; 0x0c
    adbc:	84 83       	std	Z+4, r24	; 0x04
    adbe:	f5 ee       	ldi	r31, 0xE5	; 229
    adc0:	df 16       	cp	r13, r31
    adc2:	09 f4       	brne	.+2      	; 0xadc6 <dir_find+0x8e>
    adc4:	a6 c0       	rjmp	.+332    	; 0xaf12 <dir_find+0x1da>
    adc6:	93 ff       	sbrs	r25, 3
    adc8:	04 c0       	rjmp	.+8      	; 0xadd2 <dir_find+0x9a>
    adca:	8f 30       	cpi	r24, 0x0F	; 15
    adcc:	09 f0       	breq	.+2      	; 0xadd0 <dir_find+0x98>
    adce:	a1 c0       	rjmp	.+322    	; 0xaf12 <dir_find+0x1da>
    add0:	03 c0       	rjmp	.+6      	; 0xadd8 <dir_find+0xa0>
    add2:	8f 30       	cpi	r24, 0x0F	; 15
    add4:	09 f0       	breq	.+2      	; 0xadd8 <dir_find+0xa0>
    add6:	88 c0       	rjmp	.+272    	; 0xaee8 <dir_find+0x1b0>
    add8:	eb 85       	ldd	r30, Y+11	; 0x0b
    adda:	fc 85       	ldd	r31, Y+12	; 0x0c
    addc:	87 a1       	ldd	r24, Z+39	; 0x27
    adde:	86 fd       	sbrc	r24, 6
    ade0:	9f c0       	rjmp	.+318    	; 0xaf20 <dir_find+0x1e8>
    ade2:	d6 fe       	sbrs	r13, 6
    ade4:	10 c0       	rjmp	.+32     	; 0xae06 <dir_find+0xce>
    ade6:	f7 01       	movw	r30, r14
    ade8:	05 85       	ldd	r16, Z+13	; 0x0d
    adea:	fd 2d       	mov	r31, r13
    adec:	ff 7b       	andi	r31, 0xBF	; 191
    adee:	df 2e       	mov	r13, r31
    adf0:	eb 85       	ldd	r30, Y+11	; 0x0b
    adf2:	fc 85       	ldd	r31, Y+12	; 0x0c
    adf4:	86 85       	ldd	r24, Z+14	; 0x0e
    adf6:	97 85       	ldd	r25, Z+15	; 0x0f
    adf8:	a0 89       	ldd	r26, Z+16	; 0x10
    adfa:	b1 89       	ldd	r27, Z+17	; 0x11
    adfc:	80 a7       	std	Z+40, r24	; 0x28
    adfe:	91 a7       	std	Z+41, r25	; 0x29
    ae00:	a2 a7       	std	Z+42, r26	; 0x2a
    ae02:	b3 a7       	std	Z+43, r27	; 0x2b
    ae04:	02 c0       	rjmp	.+4      	; 0xae0a <dir_find+0xd2>
    ae06:	1d 11       	cpse	r17, r13
    ae08:	8a c0       	rjmp	.+276    	; 0xaf1e <dir_find+0x1e6>
    ae0a:	f7 01       	movw	r30, r14
    ae0c:	c5 84       	ldd	r12, Z+13	; 0x0d
    ae0e:	c0 12       	cpse	r12, r16
    ae10:	86 c0       	rjmp	.+268    	; 0xaf1e <dir_find+0x1e6>
    ae12:	82 8d       	ldd	r24, Z+26	; 0x1a
    ae14:	93 8d       	ldd	r25, Z+27	; 0x1b
    ae16:	89 2b       	or	r24, r25
    ae18:	09 f0       	breq	.+2      	; 0xae1c <dir_find+0xe4>
    ae1a:	91 c0       	rjmp	.+290    	; 0xaf3e <dir_find+0x206>
    ae1c:	eb 81       	ldd	r30, Y+3	; 0x03
    ae1e:	fc 81       	ldd	r31, Y+4	; 0x04
    ae20:	03 84       	ldd	r0, Z+11	; 0x0b
    ae22:	f4 85       	ldd	r31, Z+12	; 0x0c
    ae24:	e0 2d       	mov	r30, r0
    ae26:	fe 83       	std	Y+6, r31	; 0x06
    ae28:	ed 83       	std	Y+5, r30	; 0x05
    ae2a:	f7 01       	movw	r30, r14
    ae2c:	80 81       	ld	r24, Z
    ae2e:	8f 73       	andi	r24, 0x3F	; 63
    ae30:	90 e0       	ldi	r25, 0x00	; 0
    ae32:	01 97       	sbiw	r24, 0x01	; 1
    ae34:	fd e0       	ldi	r31, 0x0D	; 13
    ae36:	f8 9f       	mul	r31, r24
    ae38:	80 01       	movw	r16, r0
    ae3a:	f9 9f       	mul	r31, r25
    ae3c:	10 0d       	add	r17, r0
    ae3e:	11 24       	eor	r1, r1
    ae40:	29 e0       	ldi	r18, 0x09	; 9
    ae42:	34 e0       	ldi	r19, 0x04	; 4
    ae44:	3a 83       	std	Y+2, r19	; 0x02
    ae46:	29 83       	std	Y+1, r18	; 0x01
    ae48:	81 e0       	ldi	r24, 0x01	; 1
    ae4a:	90 e0       	ldi	r25, 0x00	; 0
    ae4c:	e9 81       	ldd	r30, Y+1	; 0x01
    ae4e:	fa 81       	ldd	r31, Y+2	; 0x02
    ae50:	21 91       	ld	r18, Z+
    ae52:	fa 83       	std	Y+2, r31	; 0x02
    ae54:	e9 83       	std	Y+1, r30	; 0x01
    ae56:	f7 01       	movw	r30, r14
    ae58:	e2 0f       	add	r30, r18
    ae5a:	f1 1d       	adc	r31, r1
    ae5c:	20 80       	ld	r2, Z
    ae5e:	31 80       	ldd	r3, Z+1	; 0x01
    ae60:	00 97       	sbiw	r24, 0x00	; 0
    ae62:	39 f1       	breq	.+78     	; 0xaeb2 <dir_find+0x17a>
    ae64:	0f 3f       	cpi	r16, 0xFF	; 255
    ae66:	11 05       	cpc	r17, r1
    ae68:	11 f0       	breq	.+4      	; 0xae6e <dir_find+0x136>
    ae6a:	08 f0       	brcs	.+2      	; 0xae6e <dir_find+0x136>
    ae6c:	68 c0       	rjmp	.+208    	; 0xaf3e <dir_find+0x206>
    ae6e:	b1 01       	movw	r22, r2
    ae70:	80 e0       	ldi	r24, 0x00	; 0
    ae72:	90 e0       	ldi	r25, 0x00	; 0
    ae74:	0e 94 49 6b 	call	0xd692	; 0xd692 <ff_wtoupper>
    ae78:	4b 01       	movw	r8, r22
    ae7a:	5c 01       	movw	r10, r24
    ae7c:	98 01       	movw	r18, r16
    ae7e:	2f 5f       	subi	r18, 0xFF	; 255
    ae80:	3f 4f       	sbci	r19, 0xFF	; 255
    ae82:	38 87       	std	Y+8, r19	; 0x08
    ae84:	2f 83       	std	Y+7, r18	; 0x07
    ae86:	00 0f       	add	r16, r16
    ae88:	11 1f       	adc	r17, r17
    ae8a:	ed 81       	ldd	r30, Y+5	; 0x05
    ae8c:	fe 81       	ldd	r31, Y+6	; 0x06
    ae8e:	e0 0f       	add	r30, r16
    ae90:	f1 1f       	adc	r31, r17
    ae92:	60 81       	ld	r22, Z
    ae94:	71 81       	ldd	r23, Z+1	; 0x01
    ae96:	80 e0       	ldi	r24, 0x00	; 0
    ae98:	90 e0       	ldi	r25, 0x00	; 0
    ae9a:	0e 94 49 6b 	call	0xd692	; 0xd692 <ff_wtoupper>
    ae9e:	86 16       	cp	r8, r22
    aea0:	97 06       	cpc	r9, r23
    aea2:	a8 06       	cpc	r10, r24
    aea4:	b9 06       	cpc	r11, r25
    aea6:	09 f0       	breq	.+2      	; 0xaeaa <dir_find+0x172>
    aea8:	4a c0       	rjmp	.+148    	; 0xaf3e <dir_find+0x206>
    aeaa:	c1 01       	movw	r24, r2
    aeac:	0f 81       	ldd	r16, Y+7	; 0x07
    aeae:	18 85       	ldd	r17, Y+8	; 0x08
    aeb0:	05 c0       	rjmp	.+10     	; 0xaebc <dir_find+0x184>
    aeb2:	3f ef       	ldi	r19, 0xFF	; 255
    aeb4:	23 16       	cp	r2, r19
    aeb6:	33 06       	cpc	r3, r19
    aeb8:	09 f0       	breq	.+2      	; 0xaebc <dir_find+0x184>
    aeba:	41 c0       	rjmp	.+130    	; 0xaf3e <dir_find+0x206>
    aebc:	e9 81       	ldd	r30, Y+1	; 0x01
    aebe:	fa 81       	ldd	r31, Y+2	; 0x02
    aec0:	e6 51       	subi	r30, 0x16	; 22
    aec2:	f4 40       	sbci	r31, 0x04	; 4
    aec4:	19 f6       	brne	.-122    	; 0xae4c <dir_find+0x114>
    aec6:	f7 01       	movw	r30, r14
    aec8:	20 81       	ld	r18, Z
    aeca:	26 ff       	sbrs	r18, 6
    aecc:	3a c0       	rjmp	.+116    	; 0xaf42 <dir_find+0x20a>
    aece:	89 2b       	or	r24, r25
    aed0:	c1 f1       	breq	.+112    	; 0xaf42 <dir_find+0x20a>
    aed2:	00 0f       	add	r16, r16
    aed4:	11 1f       	adc	r17, r17
    aed6:	ed 81       	ldd	r30, Y+5	; 0x05
    aed8:	fe 81       	ldd	r31, Y+6	; 0x06
    aeda:	e0 0f       	add	r30, r16
    aedc:	f1 1f       	adc	r31, r17
    aede:	80 81       	ld	r24, Z
    aee0:	91 81       	ldd	r25, Z+1	; 0x01
    aee2:	89 2b       	or	r24, r25
    aee4:	71 f1       	breq	.+92     	; 0xaf42 <dir_find+0x20a>
    aee6:	2b c0       	rjmp	.+86     	; 0xaf3e <dir_find+0x206>
    aee8:	11 11       	cpse	r17, r1
    aeea:	05 c0       	rjmp	.+10     	; 0xaef6 <dir_find+0x1be>
    aeec:	c7 01       	movw	r24, r14
    aeee:	0e 94 b0 49 	call	0x9360	; 0x9360 <sum_sfn>
    aef2:	08 17       	cp	r16, r24
    aef4:	09 f1       	breq	.+66     	; 0xaf38 <dir_find+0x200>
    aef6:	eb 85       	ldd	r30, Y+11	; 0x0b
    aef8:	fc 85       	ldd	r31, Y+12	; 0x0c
    aefa:	87 a1       	ldd	r24, Z+39	; 0x27
    aefc:	80 fd       	sbrc	r24, 0
    aefe:	09 c0       	rjmp	.+18     	; 0xaf12 <dir_find+0x1da>
    af00:	4b e0       	ldi	r20, 0x0B	; 11
    af02:	50 e0       	ldi	r21, 0x00	; 0
    af04:	69 85       	ldd	r22, Y+9	; 0x09
    af06:	7a 85       	ldd	r23, Y+10	; 0x0a
    af08:	c7 01       	movw	r24, r14
    af0a:	0e 94 b7 48 	call	0x916e	; 0x916e <mem_cmp>
    af0e:	89 2b       	or	r24, r25
    af10:	99 f0       	breq	.+38     	; 0xaf38 <dir_find+0x200>
    af12:	eb 85       	ldd	r30, Y+11	; 0x0b
    af14:	fc 85       	ldd	r31, Y+12	; 0x0c
    af16:	40 a6       	std	Z+40, r4	; 0x28
    af18:	51 a6       	std	Z+41, r5	; 0x29
    af1a:	62 a6       	std	Z+42, r6	; 0x2a
    af1c:	73 a6       	std	Z+43, r7	; 0x2b
    af1e:	1f ef       	ldi	r17, 0xFF	; 255
    af20:	60 e0       	ldi	r22, 0x00	; 0
    af22:	70 e0       	ldi	r23, 0x00	; 0
    af24:	8b 85       	ldd	r24, Y+11	; 0x0b
    af26:	9c 85       	ldd	r25, Y+12	; 0x0c
    af28:	d5 dc       	rcall	.-1622   	; 0xa8d4 <dir_next>
    af2a:	00 97       	sbiw	r24, 0x00	; 0
    af2c:	09 f4       	brne	.+2      	; 0xaf30 <dir_find+0x1f8>
    af2e:	2b cf       	rjmp	.-426    	; 0xad86 <dir_find+0x4e>
    af30:	28 2f       	mov	r18, r24
    af32:	0b c0       	rjmp	.+22     	; 0xaf4a <dir_find+0x212>
    af34:	24 e0       	ldi	r18, 0x04	; 4
    af36:	01 c0       	rjmp	.+2      	; 0xaf3a <dir_find+0x202>
    af38:	20 e0       	ldi	r18, 0x00	; 0
    af3a:	90 e0       	ldi	r25, 0x00	; 0
    af3c:	06 c0       	rjmp	.+12     	; 0xaf4a <dir_find+0x212>
    af3e:	0c 2d       	mov	r16, r12
    af40:	ee cf       	rjmp	.-36     	; 0xaf1e <dir_find+0x1e6>
    af42:	1f ef       	ldi	r17, 0xFF	; 255
    af44:	1d 0d       	add	r17, r13
    af46:	0c 2d       	mov	r16, r12
    af48:	eb cf       	rjmp	.-42     	; 0xaf20 <dir_find+0x1e8>
    af4a:	82 2f       	mov	r24, r18
    af4c:	2c 96       	adiw	r28, 0x0c	; 12
    af4e:	e2 e1       	ldi	r30, 0x12	; 18
    af50:	0c 94 35 e5 	jmp	0x1ca6a	; 0x1ca6a <__epilogue_restores__>

0000af54 <dir_register>:
    af54:	a6 e1       	ldi	r26, 0x16	; 22
    af56:	b0 e0       	ldi	r27, 0x00	; 0
    af58:	e0 eb       	ldi	r30, 0xB0	; 176
    af5a:	f7 e5       	ldi	r31, 0x57	; 87
    af5c:	0c 94 19 e5 	jmp	0x1ca32	; 0x1ca32 <__prologue_saves__>
    af60:	fc 01       	movw	r30, r24
    af62:	27 a1       	ldd	r18, Z+39	; 0x27
    af64:	20 7a       	andi	r18, 0xA0	; 160
    af66:	09 f0       	breq	.+2      	; 0xaf6a <dir_register+0x16>
    af68:	53 c1       	rjmp	.+678    	; 0xb210 <dir_register+0x2bc>
    af6a:	c0 80       	ld	r12, Z
    af6c:	d1 80       	ldd	r13, Z+1	; 0x01
    af6e:	f6 01       	movw	r30, r12
    af70:	a3 85       	ldd	r26, Z+11	; 0x0b
    af72:	b4 85       	ldd	r27, Z+12	; 0x0c
    af74:	81 2c       	mov	r8, r1
    af76:	91 2c       	mov	r9, r1
    af78:	2d 91       	ld	r18, X+
    af7a:	3d 91       	ld	r19, X+
    af7c:	23 2b       	or	r18, r19
    af7e:	21 f0       	breq	.+8      	; 0xaf88 <dir_register+0x34>
    af80:	ff ef       	ldi	r31, 0xFF	; 255
    af82:	8f 1a       	sub	r8, r31
    af84:	9f 0a       	sbc	r9, r31
    af86:	f8 cf       	rjmp	.-16     	; 0xaf78 <dir_register+0x24>
    af88:	8c 01       	movw	r16, r24
    af8a:	5c 01       	movw	r10, r24
    af8c:	2c e1       	ldi	r18, 0x1C	; 28
    af8e:	a2 0e       	add	r10, r18
    af90:	b1 1c       	adc	r11, r1
    af92:	4c e0       	ldi	r20, 0x0C	; 12
    af94:	50 e0       	ldi	r21, 0x00	; 0
    af96:	b5 01       	movw	r22, r10
    af98:	ce 01       	movw	r24, r28
    af9a:	01 96       	adiw	r24, 0x01	; 1
    af9c:	0e 94 17 4a 	call	0x942e	; 0x942e <mem_cpy.part.0>
    afa0:	8c 85       	ldd	r24, Y+12	; 0x0c
    afa2:	80 ff       	sbrs	r24, 0
    afa4:	94 c0       	rjmp	.+296    	; 0xb0ce <dir_register+0x17a>
    afa6:	80 e4       	ldi	r24, 0x40	; 64
    afa8:	f8 01       	movw	r30, r16
    afaa:	87 a3       	std	Z+39, r24	; 0x27
    afac:	41 2c       	mov	r4, r1
    afae:	51 2c       	mov	r5, r1
    afb0:	32 01       	movw	r6, r4
    afb2:	43 94       	inc	r4
    afb4:	72 01       	movw	r14, r4
    afb6:	f6 01       	movw	r30, r12
    afb8:	23 84       	ldd	r2, Z+11	; 0x0b
    afba:	34 84       	ldd	r3, Z+12	; 0x0c
    afbc:	4b e0       	ldi	r20, 0x0B	; 11
    afbe:	50 e0       	ldi	r21, 0x00	; 0
    afc0:	be 01       	movw	r22, r28
    afc2:	6f 5f       	subi	r22, 0xFF	; 255
    afc4:	7f 4f       	sbci	r23, 0xFF	; 255
    afc6:	c5 01       	movw	r24, r10
    afc8:	0e 94 17 4a 	call	0x942e	; 0x942e <mem_cpy.part.0>
    afcc:	f6 e0       	ldi	r31, 0x06	; 6
    afce:	4f 16       	cp	r4, r31
    afd0:	51 04       	cpc	r5, r1
    afd2:	18 f1       	brcs	.+70     	; 0xb01a <dir_register+0xc6>
    afd4:	f1 01       	movw	r30, r2
    afd6:	b3 01       	movw	r22, r6
    afd8:	a2 01       	movw	r20, r4
    afda:	81 91       	ld	r24, Z+
    afdc:	91 91       	ld	r25, Z+
    afde:	00 97       	sbiw	r24, 0x00	; 0
    afe0:	d9 f0       	breq	.+54     	; 0xb018 <dir_register+0xc4>
    afe2:	20 e1       	ldi	r18, 0x10	; 16
    afe4:	30 e0       	ldi	r19, 0x00	; 0
    afe6:	44 0f       	add	r20, r20
    afe8:	55 1f       	adc	r21, r21
    afea:	66 1f       	adc	r22, r22
    afec:	77 1f       	adc	r23, r23
    afee:	dc 01       	movw	r26, r24
    aff0:	a1 70       	andi	r26, 0x01	; 1
    aff2:	bb 27       	eor	r27, r27
    aff4:	4a 0f       	add	r20, r26
    aff6:	5b 1f       	adc	r21, r27
    aff8:	61 1d       	adc	r22, r1
    affa:	71 1d       	adc	r23, r1
    affc:	96 95       	lsr	r25
    affe:	87 95       	ror	r24
    b000:	60 ff       	sbrs	r22, 0
    b002:	06 c0       	rjmp	.+12     	; 0xb010 <dir_register+0xbc>
    b004:	a1 e2       	ldi	r26, 0x21	; 33
    b006:	4a 27       	eor	r20, r26
    b008:	a0 e1       	ldi	r26, 0x10	; 16
    b00a:	5a 27       	eor	r21, r26
    b00c:	a1 e0       	ldi	r26, 0x01	; 1
    b00e:	6a 27       	eor	r22, r26
    b010:	21 50       	subi	r18, 0x01	; 1
    b012:	31 09       	sbc	r19, r1
    b014:	41 f7       	brne	.-48     	; 0xafe6 <dir_register+0x92>
    b016:	e1 cf       	rjmp	.-62     	; 0xafda <dir_register+0x86>
    b018:	7a 01       	movw	r14, r20
    b01a:	fe 01       	movw	r30, r28
    b01c:	75 96       	adiw	r30, 0x15	; 21
    b01e:	27 e0       	ldi	r18, 0x07	; 7
    b020:	30 e0       	ldi	r19, 0x00	; 0
    b022:	9e 2d       	mov	r25, r14
    b024:	9f 70       	andi	r25, 0x0F	; 15
    b026:	80 e3       	ldi	r24, 0x30	; 48
    b028:	89 0f       	add	r24, r25
    b02a:	8a 33       	cpi	r24, 0x3A	; 58
    b02c:	10 f0       	brcs	.+4      	; 0xb032 <dir_register+0xde>
    b02e:	87 e3       	ldi	r24, 0x37	; 55
    b030:	89 0f       	add	r24, r25
    b032:	21 50       	subi	r18, 0x01	; 1
    b034:	31 09       	sbc	r19, r1
    b036:	82 93       	st	-Z, r24
    b038:	a4 e0       	ldi	r26, 0x04	; 4
    b03a:	f6 94       	lsr	r15
    b03c:	e7 94       	ror	r14
    b03e:	aa 95       	dec	r26
    b040:	e1 f7       	brne	.-8      	; 0xb03a <dir_register+0xe6>
    b042:	e1 14       	cp	r14, r1
    b044:	f1 04       	cpc	r15, r1
    b046:	69 f7       	brne	.-38     	; 0xb022 <dir_register+0xce>
    b048:	ed e0       	ldi	r30, 0x0D	; 13
    b04a:	f0 e0       	ldi	r31, 0x00	; 0
    b04c:	ec 0f       	add	r30, r28
    b04e:	fd 1f       	adc	r31, r29
    b050:	e2 0f       	add	r30, r18
    b052:	f3 1f       	adc	r31, r19
    b054:	4e e7       	ldi	r20, 0x7E	; 126
    b056:	40 83       	st	Z, r20
    b058:	f5 01       	movw	r30, r10
    b05a:	80 e0       	ldi	r24, 0x00	; 0
    b05c:	90 e0       	ldi	r25, 0x00	; 0
    b05e:	28 17       	cp	r18, r24
    b060:	39 07       	cpc	r19, r25
    b062:	29 f0       	breq	.+10     	; 0xb06e <dir_register+0x11a>
    b064:	41 91       	ld	r20, Z+
    b066:	40 32       	cpi	r20, 0x20	; 32
    b068:	11 f0       	breq	.+4      	; 0xb06e <dir_register+0x11a>
    b06a:	01 96       	adiw	r24, 0x01	; 1
    b06c:	f8 cf       	rjmp	.-16     	; 0xb05e <dir_register+0x10a>
    b06e:	f5 01       	movw	r30, r10
    b070:	e8 0f       	add	r30, r24
    b072:	f9 1f       	adc	r31, r25
    b074:	28 30       	cpi	r18, 0x08	; 8
    b076:	31 05       	cpc	r19, r1
    b078:	50 f4       	brcc	.+20     	; 0xb08e <dir_register+0x13a>
    b07a:	ad e0       	ldi	r26, 0x0D	; 13
    b07c:	b0 e0       	ldi	r27, 0x00	; 0
    b07e:	ac 0f       	add	r26, r28
    b080:	bd 1f       	adc	r27, r29
    b082:	a2 0f       	add	r26, r18
    b084:	b3 1f       	adc	r27, r19
    b086:	8c 91       	ld	r24, X
    b088:	2f 5f       	subi	r18, 0xFF	; 255
    b08a:	3f 4f       	sbci	r19, 0xFF	; 255
    b08c:	01 c0       	rjmp	.+2      	; 0xb090 <dir_register+0x13c>
    b08e:	80 e2       	ldi	r24, 0x20	; 32
    b090:	81 93       	st	Z+, r24
    b092:	cf 01       	movw	r24, r30
    b094:	8a 19       	sub	r24, r10
    b096:	9b 09       	sbc	r25, r11
    b098:	08 97       	sbiw	r24, 0x08	; 8
    b09a:	60 f3       	brcs	.-40     	; 0xb074 <dir_register+0x120>
    b09c:	c8 01       	movw	r24, r16
    b09e:	4c de       	rcall	.-872    	; 0xad38 <dir_find>
    b0a0:	00 97       	sbiw	r24, 0x00	; 0
    b0a2:	71 f4       	brne	.+28     	; 0xb0c0 <dir_register+0x16c>
    b0a4:	8f ef       	ldi	r24, 0xFF	; 255
    b0a6:	48 1a       	sub	r4, r24
    b0a8:	58 0a       	sbc	r5, r24
    b0aa:	68 0a       	sbc	r6, r24
    b0ac:	78 0a       	sbc	r7, r24
    b0ae:	94 e6       	ldi	r25, 0x64	; 100
    b0b0:	49 16       	cp	r4, r25
    b0b2:	51 04       	cpc	r5, r1
    b0b4:	61 04       	cpc	r6, r1
    b0b6:	71 04       	cpc	r7, r1
    b0b8:	09 f0       	breq	.+2      	; 0xb0bc <dir_register+0x168>
    b0ba:	7c cf       	rjmp	.-264    	; 0xafb4 <dir_register+0x60>
    b0bc:	27 e0       	ldi	r18, 0x07	; 7
    b0be:	a9 c0       	rjmp	.+338    	; 0xb212 <dir_register+0x2be>
    b0c0:	84 30       	cpi	r24, 0x04	; 4
    b0c2:	91 05       	cpc	r25, r1
    b0c4:	09 f0       	breq	.+2      	; 0xb0c8 <dir_register+0x174>
    b0c6:	ce c0       	rjmp	.+412    	; 0xb264 <dir_register+0x310>
    b0c8:	8c 85       	ldd	r24, Y+12	; 0x0c
    b0ca:	f8 01       	movw	r30, r16
    b0cc:	87 a3       	std	Z+39, r24	; 0x27
    b0ce:	8c 85       	ldd	r24, Y+12	; 0x0c
    b0d0:	81 ff       	sbrs	r24, 1
    b0d2:	0b c0       	rjmp	.+22     	; 0xb0ea <dir_register+0x196>
    b0d4:	c4 01       	movw	r24, r8
    b0d6:	0c 96       	adiw	r24, 0x0c	; 12
    b0d8:	6d e0       	ldi	r22, 0x0D	; 13
    b0da:	70 e0       	ldi	r23, 0x00	; 0
    b0dc:	0e 94 70 e4 	call	0x1c8e0	; 0x1c8e0 <__udivmodhi4>
    b0e0:	7b 01       	movw	r14, r22
    b0e2:	ff ef       	ldi	r31, 0xFF	; 255
    b0e4:	ef 1a       	sub	r14, r31
    b0e6:	ff 0a       	sbc	r15, r31
    b0e8:	03 c0       	rjmp	.+6      	; 0xb0f0 <dir_register+0x19c>
    b0ea:	ee 24       	eor	r14, r14
    b0ec:	e3 94       	inc	r14
    b0ee:	f1 2c       	mov	r15, r1
    b0f0:	b7 01       	movw	r22, r14
    b0f2:	c8 01       	movw	r24, r16
    b0f4:	d7 dc       	rcall	.-1618   	; 0xaaa4 <dir_alloc>
    b0f6:	00 97       	sbiw	r24, 0x00	; 0
    b0f8:	09 f0       	breq	.+2      	; 0xb0fc <dir_register+0x1a8>
    b0fa:	b4 c0       	rjmp	.+360    	; 0xb264 <dir_register+0x310>
    b0fc:	21 e0       	ldi	r18, 0x01	; 1
    b0fe:	e2 1a       	sub	r14, r18
    b100:	f1 08       	sbc	r15, r1
    b102:	09 f4       	brne	.+2      	; 0xb106 <dir_register+0x1b2>
    b104:	88 c0       	rjmp	.+272    	; 0xb216 <dir_register+0x2c2>
    b106:	f8 01       	movw	r30, r16
    b108:	46 85       	ldd	r20, Z+14	; 0x0e
    b10a:	57 85       	ldd	r21, Z+15	; 0x0f
    b10c:	60 89       	ldd	r22, Z+16	; 0x10
    b10e:	71 89       	ldd	r23, Z+17	; 0x11
    b110:	c7 01       	movw	r24, r14
    b112:	e5 e0       	ldi	r30, 0x05	; 5
    b114:	88 0f       	add	r24, r24
    b116:	99 1f       	adc	r25, r25
    b118:	ea 95       	dec	r30
    b11a:	e1 f7       	brne	.-8      	; 0xb114 <dir_register+0x1c0>
    b11c:	48 1b       	sub	r20, r24
    b11e:	59 0b       	sbc	r21, r25
    b120:	61 09       	sbc	r22, r1
    b122:	71 09       	sbc	r23, r1
    b124:	c8 01       	movw	r24, r16
    b126:	5e d9       	rcall	.-3396   	; 0xa3e4 <dir_sdi>
    b128:	00 97       	sbiw	r24, 0x00	; 0
    b12a:	09 f0       	breq	.+2      	; 0xb12e <dir_register+0x1da>
    b12c:	9b c0       	rjmp	.+310    	; 0xb264 <dir_register+0x310>
    b12e:	c5 01       	movw	r24, r10
    b130:	0e 94 b0 49 	call	0x9360	; 0x9360 <sum_sfn>
    b134:	68 2e       	mov	r6, r24
    b136:	5f e0       	ldi	r21, 0x0F	; 15
    b138:	35 2e       	mov	r3, r21
    b13a:	6d e0       	ldi	r22, 0x0D	; 13
    b13c:	46 2e       	mov	r4, r22
    b13e:	76 e1       	ldi	r23, 0x16	; 22
    b140:	87 2e       	mov	r8, r23
    b142:	74 e0       	ldi	r23, 0x04	; 4
    b144:	97 2e       	mov	r9, r23
    b146:	55 24       	eor	r5, r5
    b148:	53 94       	inc	r5
    b14a:	f8 01       	movw	r30, r16
    b14c:	46 89       	ldd	r20, Z+22	; 0x16
    b14e:	57 89       	ldd	r21, Z+23	; 0x17
    b150:	60 8d       	ldd	r22, Z+24	; 0x18
    b152:	71 8d       	ldd	r23, Z+25	; 0x19
    b154:	c6 01       	movw	r24, r12
    b156:	0e 94 6e 4d 	call	0x9adc	; 0x9adc <move_window>
    b15a:	00 97       	sbiw	r24, 0x00	; 0
    b15c:	09 f0       	breq	.+2      	; 0xb160 <dir_register+0x20c>
    b15e:	82 c0       	rjmp	.+260    	; 0xb264 <dir_register+0x310>
    b160:	f6 01       	movw	r30, r12
    b162:	63 85       	ldd	r22, Z+11	; 0x0b
    b164:	74 85       	ldd	r23, Z+12	; 0x0c
    b166:	f8 01       	movw	r30, r16
    b168:	02 8c       	ldd	r0, Z+26	; 0x1a
    b16a:	f3 8d       	ldd	r31, Z+27	; 0x1b
    b16c:	e0 2d       	mov	r30, r0
    b16e:	fe 8b       	std	Y+22, r31	; 0x16
    b170:	ed 8b       	std	Y+21, r30	; 0x15
    b172:	7e 2c       	mov	r7, r14
    b174:	65 86       	std	Z+13, r6	; 0x0d
    b176:	33 86       	std	Z+11, r3	; 0x0b
    b178:	14 86       	std	Z+12, r1	; 0x0c
    b17a:	12 8e       	std	Z+26, r1	; 0x1a
    b17c:	13 8e       	std	Z+27, r1	; 0x1b
    b17e:	97 01       	movw	r18, r14
    b180:	33 27       	eor	r19, r19
    b182:	21 50       	subi	r18, 0x01	; 1
    b184:	31 09       	sbc	r19, r1
    b186:	42 9e       	mul	r4, r18
    b188:	c0 01       	movw	r24, r0
    b18a:	43 9e       	mul	r4, r19
    b18c:	90 0d       	add	r25, r0
    b18e:	11 24       	eor	r1, r1
    b190:	a9 e0       	ldi	r26, 0x09	; 9
    b192:	b4 e0       	ldi	r27, 0x04	; 4
    b194:	20 e0       	ldi	r18, 0x00	; 0
    b196:	30 e0       	ldi	r19, 0x00	; 0
    b198:	2f 3f       	cpi	r18, 0xFF	; 255
    b19a:	ff ef       	ldi	r31, 0xFF	; 255
    b19c:	3f 07       	cpc	r19, r31
    b19e:	49 f0       	breq	.+18     	; 0xb1b2 <dir_register+0x25e>
    b1a0:	9c 01       	movw	r18, r24
    b1a2:	22 0f       	add	r18, r18
    b1a4:	33 1f       	adc	r19, r19
    b1a6:	26 0f       	add	r18, r22
    b1a8:	37 1f       	adc	r19, r23
    b1aa:	f9 01       	movw	r30, r18
    b1ac:	20 81       	ld	r18, Z
    b1ae:	31 81       	ldd	r19, Z+1	; 0x01
    b1b0:	01 96       	adiw	r24, 0x01	; 1
    b1b2:	4d 91       	ld	r20, X+
    b1b4:	ed 89       	ldd	r30, Y+21	; 0x15
    b1b6:	fe 89       	ldd	r31, Y+22	; 0x16
    b1b8:	e4 0f       	add	r30, r20
    b1ba:	f1 1d       	adc	r31, r1
    b1bc:	20 83       	st	Z, r18
    b1be:	31 83       	std	Z+1, r19	; 0x01
    b1c0:	21 15       	cp	r18, r1
    b1c2:	31 05       	cpc	r19, r1
    b1c4:	11 f4       	brne	.+4      	; 0xb1ca <dir_register+0x276>
    b1c6:	2f ef       	ldi	r18, 0xFF	; 255
    b1c8:	3f ef       	ldi	r19, 0xFF	; 255
    b1ca:	8a 16       	cp	r8, r26
    b1cc:	9b 06       	cpc	r9, r27
    b1ce:	21 f7       	brne	.-56     	; 0xb198 <dir_register+0x244>
    b1d0:	2f 3f       	cpi	r18, 0xFF	; 255
    b1d2:	3f 4f       	sbci	r19, 0xFF	; 255
    b1d4:	49 f0       	breq	.+18     	; 0xb1e8 <dir_register+0x294>
    b1d6:	88 0f       	add	r24, r24
    b1d8:	99 1f       	adc	r25, r25
    b1da:	db 01       	movw	r26, r22
    b1dc:	a8 0f       	add	r26, r24
    b1de:	b9 1f       	adc	r27, r25
    b1e0:	8d 91       	ld	r24, X+
    b1e2:	9c 91       	ld	r25, X
    b1e4:	89 2b       	or	r24, r25
    b1e6:	19 f4       	brne	.+6      	; 0xb1ee <dir_register+0x29a>
    b1e8:	27 2d       	mov	r18, r7
    b1ea:	20 64       	ori	r18, 0x40	; 64
    b1ec:	72 2e       	mov	r7, r18
    b1ee:	ed 89       	ldd	r30, Y+21	; 0x15
    b1f0:	fe 89       	ldd	r31, Y+22	; 0x16
    b1f2:	70 82       	st	Z, r7
    b1f4:	f6 01       	movw	r30, r12
    b1f6:	53 82       	std	Z+3, r5	; 0x03
    b1f8:	60 e0       	ldi	r22, 0x00	; 0
    b1fa:	70 e0       	ldi	r23, 0x00	; 0
    b1fc:	c8 01       	movw	r24, r16
    b1fe:	6a db       	rcall	.-2348   	; 0xa8d4 <dir_next>
    b200:	00 97       	sbiw	r24, 0x00	; 0
    b202:	81 f5       	brne	.+96     	; 0xb264 <dir_register+0x310>
    b204:	f1 e0       	ldi	r31, 0x01	; 1
    b206:	ef 1a       	sub	r14, r31
    b208:	f1 08       	sbc	r15, r1
    b20a:	09 f0       	breq	.+2      	; 0xb20e <dir_register+0x2ba>
    b20c:	9e cf       	rjmp	.-196    	; 0xb14a <dir_register+0x1f6>
    b20e:	03 c0       	rjmp	.+6      	; 0xb216 <dir_register+0x2c2>
    b210:	26 e0       	ldi	r18, 0x06	; 6
    b212:	90 e0       	ldi	r25, 0x00	; 0
    b214:	28 c0       	rjmp	.+80     	; 0xb266 <dir_register+0x312>
    b216:	f8 01       	movw	r30, r16
    b218:	46 89       	ldd	r20, Z+22	; 0x16
    b21a:	57 89       	ldd	r21, Z+23	; 0x17
    b21c:	60 8d       	ldd	r22, Z+24	; 0x18
    b21e:	71 8d       	ldd	r23, Z+25	; 0x19
    b220:	c6 01       	movw	r24, r12
    b222:	0e 94 6e 4d 	call	0x9adc	; 0x9adc <move_window>
    b226:	00 97       	sbiw	r24, 0x00	; 0
    b228:	e9 f4       	brne	.+58     	; 0xb264 <dir_register+0x310>
    b22a:	40 e2       	ldi	r20, 0x20	; 32
    b22c:	50 e0       	ldi	r21, 0x00	; 0
    b22e:	60 e0       	ldi	r22, 0x00	; 0
    b230:	70 e0       	ldi	r23, 0x00	; 0
    b232:	f8 01       	movw	r30, r16
    b234:	82 8d       	ldd	r24, Z+26	; 0x1a
    b236:	93 8d       	ldd	r25, Z+27	; 0x1b
    b238:	0e 94 ae 48 	call	0x915c	; 0x915c <mem_set>
    b23c:	4b e0       	ldi	r20, 0x0B	; 11
    b23e:	50 e0       	ldi	r21, 0x00	; 0
    b240:	b5 01       	movw	r22, r10
    b242:	f8 01       	movw	r30, r16
    b244:	82 8d       	ldd	r24, Z+26	; 0x1a
    b246:	93 8d       	ldd	r25, Z+27	; 0x1b
    b248:	0e 94 17 4a 	call	0x942e	; 0x942e <mem_cpy.part.0>
    b24c:	f8 01       	movw	r30, r16
    b24e:	22 8d       	ldd	r18, Z+26	; 0x1a
    b250:	33 8d       	ldd	r19, Z+27	; 0x1b
    b252:	87 a1       	ldd	r24, Z+39	; 0x27
    b254:	88 71       	andi	r24, 0x18	; 24
    b256:	f9 01       	movw	r30, r18
    b258:	84 87       	std	Z+12, r24	; 0x0c
    b25a:	81 e0       	ldi	r24, 0x01	; 1
    b25c:	f6 01       	movw	r30, r12
    b25e:	83 83       	std	Z+3, r24	; 0x03
    b260:	20 e0       	ldi	r18, 0x00	; 0
    b262:	d7 cf       	rjmp	.-82     	; 0xb212 <dir_register+0x2be>
    b264:	28 2f       	mov	r18, r24
    b266:	82 2f       	mov	r24, r18
    b268:	66 96       	adiw	r28, 0x16	; 22
    b26a:	e2 e1       	ldi	r30, 0x12	; 18
    b26c:	0c 94 35 e5 	jmp	0x1ca6a	; 0x1ca6a <__epilogue_restores__>

0000b270 <follow_path>:
    b270:	aa e0       	ldi	r26, 0x0A	; 10
    b272:	b0 e0       	ldi	r27, 0x00	; 0
    b274:	ee e3       	ldi	r30, 0x3E	; 62
    b276:	f9 e5       	ldi	r31, 0x59	; 89
    b278:	0c 94 19 e5 	jmp	0x1ca32	; 0x1ca32 <__prologue_saves__>
    b27c:	7c 01       	movw	r14, r24
    b27e:	3b 01       	movw	r6, r22
    b280:	dc 01       	movw	r26, r24
    b282:	0d 90       	ld	r0, X+
    b284:	bc 91       	ld	r27, X
    b286:	a0 2d       	mov	r26, r0
    b288:	be 83       	std	Y+6, r27	; 0x06
    b28a:	ad 83       	std	Y+5, r26	; 0x05
    b28c:	fb 01       	movw	r30, r22
    b28e:	80 81       	ld	r24, Z
    b290:	8f 32       	cpi	r24, 0x2F	; 47
    b292:	11 f0       	breq	.+4      	; 0xb298 <follow_path+0x28>
    b294:	8c 35       	cpi	r24, 0x5C	; 92
    b296:	11 f4       	brne	.+4      	; 0xb29c <follow_path+0x2c>
    b298:	93 01       	movw	r18, r6
    b29a:	0c c0       	rjmp	.+24     	; 0xb2b4 <follow_path+0x44>
    b29c:	ed 81       	ldd	r30, Y+5	; 0x05
    b29e:	fe 81       	ldd	r31, Y+6	; 0x06
    b2a0:	85 89       	ldd	r24, Z+21	; 0x15
    b2a2:	96 89       	ldd	r25, Z+22	; 0x16
    b2a4:	a7 89       	ldd	r26, Z+23	; 0x17
    b2a6:	b0 8d       	ldd	r27, Z+24	; 0x18
    b2a8:	f7 01       	movw	r30, r14
    b2aa:	86 83       	std	Z+6, r24	; 0x06
    b2ac:	97 83       	std	Z+7, r25	; 0x07
    b2ae:	a0 87       	std	Z+8, r26	; 0x08
    b2b0:	b1 87       	std	Z+9, r27	; 0x09
    b2b2:	0e c0       	rjmp	.+28     	; 0xb2d0 <follow_path+0x60>
    b2b4:	39 01       	movw	r6, r18
    b2b6:	d9 01       	movw	r26, r18
    b2b8:	8c 91       	ld	r24, X
    b2ba:	2f 5f       	subi	r18, 0xFF	; 255
    b2bc:	3f 4f       	sbci	r19, 0xFF	; 255
    b2be:	8f 32       	cpi	r24, 0x2F	; 47
    b2c0:	c9 f3       	breq	.-14     	; 0xb2b4 <follow_path+0x44>
    b2c2:	8c 35       	cpi	r24, 0x5C	; 92
    b2c4:	b9 f3       	breq	.-18     	; 0xb2b4 <follow_path+0x44>
    b2c6:	f7 01       	movw	r30, r14
    b2c8:	16 82       	std	Z+6, r1	; 0x06
    b2ca:	17 82       	std	Z+7, r1	; 0x07
    b2cc:	10 86       	std	Z+8, r1	; 0x08
    b2ce:	11 86       	std	Z+9, r1	; 0x09
    b2d0:	d3 01       	movw	r26, r6
    b2d2:	8c 91       	ld	r24, X
    b2d4:	80 32       	cpi	r24, 0x20	; 32
    b2d6:	58 f0       	brcs	.+22     	; 0xb2ee <follow_path+0x7e>
    b2d8:	f7 01       	movw	r30, r14
    b2da:	7c 96       	adiw	r30, 0x1c	; 28
    b2dc:	f8 87       	std	Y+8, r31	; 0x08
    b2de:	ef 83       	std	Y+7, r30	; 0x07
    b2e0:	2d 81       	ldd	r18, Y+5	; 0x05
    b2e2:	3e 81       	ldd	r19, Y+6	; 0x06
    b2e4:	2b 5c       	subi	r18, 0xCB	; 203
    b2e6:	3f 4f       	sbci	r19, 0xFF	; 255
    b2e8:	3a 87       	std	Y+10, r19	; 0x0a
    b2ea:	29 87       	std	Y+9, r18	; 0x09
    b2ec:	96 c0       	rjmp	.+300    	; 0xb41a <follow_path+0x1aa>
    b2ee:	80 e8       	ldi	r24, 0x80	; 128
    b2f0:	f7 01       	movw	r30, r14
    b2f2:	87 a3       	std	Z+39, r24	; 0x27
    b2f4:	40 e0       	ldi	r20, 0x00	; 0
    b2f6:	50 e0       	ldi	r21, 0x00	; 0
    b2f8:	ba 01       	movw	r22, r20
    b2fa:	c7 01       	movw	r24, r14
    b2fc:	73 d8       	rcall	.-3866   	; 0xa3e4 <dir_sdi>
    b2fe:	e5 c1       	rjmp	.+970    	; 0xb6ca <follow_path+0x45a>
    b300:	6c 35       	cpi	r22, 0x5C	; 92
    b302:	71 05       	cpc	r23, r1
    b304:	b9 f1       	breq	.+110    	; 0xb374 <follow_path+0x104>
    b306:	60 38       	cpi	r22, 0x80	; 128
    b308:	71 05       	cpc	r23, r1
    b30a:	28 f4       	brcc	.+10     	; 0xb316 <follow_path+0xa6>
    b30c:	e5 e4       	ldi	r30, 0x45	; 69
    b30e:	f3 e0       	ldi	r31, 0x03	; 3
    b310:	41 91       	ld	r20, Z+
    b312:	41 11       	cpse	r20, r1
    b314:	8c c0       	rjmp	.+280    	; 0xb42e <follow_path+0x1be>
    b316:	0f 3f       	cpi	r16, 0xFF	; 255
    b318:	11 05       	cpc	r17, r1
    b31a:	08 f0       	brcs	.+2      	; 0xb31e <follow_path+0xae>
    b31c:	b9 c1       	rjmp	.+882    	; 0xb690 <follow_path+0x420>
    b31e:	f8 01       	movw	r30, r16
    b320:	ee 0f       	add	r30, r30
    b322:	ff 1f       	adc	r31, r31
    b324:	ea 0d       	add	r30, r10
    b326:	fb 1d       	adc	r31, r11
    b328:	71 83       	std	Z+1, r23	; 0x01
    b32a:	60 83       	st	Z, r22
    b32c:	0f 5f       	subi	r16, 0xFF	; 255
    b32e:	1f 4f       	sbci	r17, 0xFF	; 255
    b330:	ce 01       	movw	r24, r28
    b332:	01 96       	adiw	r24, 0x01	; 1
    b334:	0e 94 c6 48 	call	0x918c	; 0x918c <tchar2uni>
    b338:	6f 3f       	cpi	r22, 0xFF	; 255
    b33a:	bf ef       	ldi	r27, 0xFF	; 255
    b33c:	7b 07       	cpc	r23, r27
    b33e:	8b 07       	cpc	r24, r27
    b340:	9b 07       	cpc	r25, r27
    b342:	09 f4       	brne	.+2      	; 0xb346 <follow_path+0xd6>
    b344:	a5 c1       	rjmp	.+842    	; 0xb690 <follow_path+0x420>
    b346:	61 15       	cp	r22, r1
    b348:	71 05       	cpc	r23, r1
    b34a:	e1 e0       	ldi	r30, 0x01	; 1
    b34c:	8e 07       	cpc	r24, r30
    b34e:	91 05       	cpc	r25, r1
    b350:	48 f0       	brcs	.+18     	; 0xb364 <follow_path+0xf4>
    b352:	f8 01       	movw	r30, r16
    b354:	ee 0f       	add	r30, r30
    b356:	ff 1f       	adc	r31, r31
    b358:	ea 0d       	add	r30, r10
    b35a:	fb 1d       	adc	r31, r11
    b35c:	91 83       	std	Z+1, r25	; 0x01
    b35e:	80 83       	st	Z, r24
    b360:	0f 5f       	subi	r16, 0xFF	; 255
    b362:	1f 4f       	sbci	r17, 0xFF	; 255
    b364:	9b 01       	movw	r18, r22
    b366:	60 32       	cpi	r22, 0x20	; 32
    b368:	71 05       	cpc	r23, r1
    b36a:	08 f4       	brcc	.+2      	; 0xb36e <follow_path+0xfe>
    b36c:	6a c0       	rjmp	.+212    	; 0xb442 <follow_path+0x1d2>
    b36e:	6f 32       	cpi	r22, 0x2F	; 47
    b370:	71 05       	cpc	r23, r1
    b372:	31 f6       	brne	.-116    	; 0xb300 <follow_path+0x90>
    b374:	e9 81       	ldd	r30, Y+1	; 0x01
    b376:	fa 81       	ldd	r31, Y+2	; 0x02
    b378:	80 81       	ld	r24, Z
    b37a:	8f 32       	cpi	r24, 0x2F	; 47
    b37c:	09 f4       	brne	.+2      	; 0xb380 <follow_path+0x110>
    b37e:	5d c0       	rjmp	.+186    	; 0xb43a <follow_path+0x1ca>
    b380:	8c 35       	cpi	r24, 0x5C	; 92
    b382:	09 f4       	brne	.+2      	; 0xb386 <follow_path+0x116>
    b384:	5a c0       	rjmp	.+180    	; 0xb43a <follow_path+0x1ca>
    b386:	1b 82       	std	Y+3, r1	; 0x03
    b388:	69 80       	ldd	r6, Y+1	; 0x01
    b38a:	7a 80       	ldd	r7, Y+2	; 0x02
    b38c:	98 01       	movw	r18, r16
    b38e:	22 0f       	add	r18, r18
    b390:	33 1f       	adc	r19, r19
    b392:	01 30       	cpi	r16, 0x01	; 1
    b394:	11 05       	cpc	r17, r1
    b396:	09 f0       	breq	.+2      	; 0xb39a <follow_path+0x12a>
    b398:	57 c0       	rjmp	.+174    	; 0xb448 <follow_path+0x1d8>
    b39a:	d5 01       	movw	r26, r10
    b39c:	8d 91       	ld	r24, X+
    b39e:	9c 91       	ld	r25, X
    b3a0:	8e 97       	sbiw	r24, 0x2e	; 46
    b3a2:	09 f0       	breq	.+2      	; 0xb3a6 <follow_path+0x136>
    b3a4:	5c c0       	rjmp	.+184    	; 0xb45e <follow_path+0x1ee>
    b3a6:	f9 01       	movw	r30, r18
    b3a8:	ea 0d       	add	r30, r10
    b3aa:	fb 1d       	adc	r31, r11
    b3ac:	11 82       	std	Z+1, r1	; 0x01
    b3ae:	10 82       	st	Z, r1
    b3b0:	f7 01       	movw	r30, r14
    b3b2:	7c 96       	adiw	r30, 0x1c	; 28
    b3b4:	80 e0       	ldi	r24, 0x00	; 0
    b3b6:	90 e0       	ldi	r25, 0x00	; 0
    b3b8:	80 17       	cp	r24, r16
    b3ba:	91 07       	cpc	r25, r17
    b3bc:	08 f0       	brcs	.+2      	; 0xb3c0 <follow_path+0x150>
    b3be:	53 c0       	rjmp	.+166    	; 0xb466 <follow_path+0x1f6>
    b3c0:	2e e2       	ldi	r18, 0x2E	; 46
    b3c2:	21 93       	st	Z+, r18
    b3c4:	01 96       	adiw	r24, 0x01	; 1
    b3c6:	8b 30       	cpi	r24, 0x0B	; 11
    b3c8:	91 05       	cpc	r25, r1
    b3ca:	b1 f7       	brne	.-20     	; 0xb3b8 <follow_path+0x148>
    b3cc:	8b 81       	ldd	r24, Y+3	; 0x03
    b3ce:	80 62       	ori	r24, 0x20	; 32
    b3d0:	f7 01       	movw	r30, r14
    b3d2:	87 a3       	std	Z+39, r24	; 0x27
    b3d4:	80 e0       	ldi	r24, 0x00	; 0
    b3d6:	90 e0       	ldi	r25, 0x00	; 0
    b3d8:	00 97       	sbiw	r24, 0x00	; 0
    b3da:	09 f0       	breq	.+2      	; 0xb3de <follow_path+0x16e>
    b3dc:	76 c1       	rjmp	.+748    	; 0xb6ca <follow_path+0x45a>
    b3de:	c7 01       	movw	r24, r14
    b3e0:	ab dc       	rcall	.-1706   	; 0xad38 <dir_find>
    b3e2:	f7 01       	movw	r30, r14
    b3e4:	27 a1       	ldd	r18, Z+39	; 0x27
    b3e6:	00 97       	sbiw	r24, 0x00	; 0
    b3e8:	09 f0       	breq	.+2      	; 0xb3ec <follow_path+0x17c>
    b3ea:	55 c1       	rjmp	.+682    	; 0xb696 <follow_path+0x426>
    b3ec:	22 fd       	sbrc	r18, 2
    b3ee:	6d c1       	rjmp	.+730    	; 0xb6ca <follow_path+0x45a>
    b3f0:	f7 01       	movw	r30, r14
    b3f2:	84 81       	ldd	r24, Z+4	; 0x04
    b3f4:	84 ff       	sbrs	r24, 4
    b3f6:	60 c1       	rjmp	.+704    	; 0xb6b8 <follow_path+0x448>
    b3f8:	66 85       	ldd	r22, Z+14	; 0x0e
    b3fa:	77 85       	ldd	r23, Z+15	; 0x0f
    b3fc:	71 70       	andi	r23, 0x01	; 1
    b3fe:	29 85       	ldd	r18, Y+9	; 0x09
    b400:	3a 85       	ldd	r19, Y+10	; 0x0a
    b402:	62 0f       	add	r22, r18
    b404:	73 1f       	adc	r23, r19
    b406:	ad 81       	ldd	r26, Y+5	; 0x05
    b408:	be 81       	ldd	r27, Y+6	; 0x06
    b40a:	8c 91       	ld	r24, X
    b40c:	0e 94 df 4b 	call	0x97be	; 0x97be <ld_clust.isra.4>
    b410:	f7 01       	movw	r30, r14
    b412:	66 83       	std	Z+6, r22	; 0x06
    b414:	77 83       	std	Z+7, r23	; 0x07
    b416:	80 87       	std	Z+8, r24	; 0x08
    b418:	91 87       	std	Z+9, r25	; 0x09
    b41a:	7a 82       	std	Y+2, r7	; 0x02
    b41c:	69 82       	std	Y+1, r6	; 0x01
    b41e:	d7 01       	movw	r26, r14
    b420:	ed 91       	ld	r30, X+
    b422:	fc 91       	ld	r31, X
    b424:	a3 84       	ldd	r10, Z+11	; 0x0b
    b426:	b4 84       	ldd	r11, Z+12	; 0x0c
    b428:	00 e0       	ldi	r16, 0x00	; 0
    b42a:	10 e0       	ldi	r17, 0x00	; 0
    b42c:	81 cf       	rjmp	.-254    	; 0xb330 <follow_path+0xc0>
    b42e:	50 e0       	ldi	r21, 0x00	; 0
    b430:	24 17       	cp	r18, r20
    b432:	35 07       	cpc	r19, r21
    b434:	09 f0       	breq	.+2      	; 0xb438 <follow_path+0x1c8>
    b436:	6c cf       	rjmp	.-296    	; 0xb310 <follow_path+0xa0>
    b438:	2b c1       	rjmp	.+598    	; 0xb690 <follow_path+0x420>
    b43a:	31 96       	adiw	r30, 0x01	; 1
    b43c:	fa 83       	std	Y+2, r31	; 0x02
    b43e:	e9 83       	std	Y+1, r30	; 0x01
    b440:	99 cf       	rjmp	.-206    	; 0xb374 <follow_path+0x104>
    b442:	f4 e0       	ldi	r31, 0x04	; 4
    b444:	fb 83       	std	Y+3, r31	; 0x03
    b446:	a0 cf       	rjmp	.-192    	; 0xb388 <follow_path+0x118>
    b448:	02 30       	cpi	r16, 0x02	; 2
    b44a:	11 05       	cpc	r17, r1
    b44c:	41 f4       	brne	.+16     	; 0xb45e <follow_path+0x1ee>
    b44e:	f5 01       	movw	r30, r10
    b450:	82 81       	ldd	r24, Z+2	; 0x02
    b452:	93 81       	ldd	r25, Z+3	; 0x03
    b454:	8e 97       	sbiw	r24, 0x2e	; 46
    b456:	19 f4       	brne	.+6      	; 0xb45e <follow_path+0x1ee>
    b458:	80 81       	ld	r24, Z
    b45a:	91 81       	ldd	r25, Z+1	; 0x01
    b45c:	a1 cf       	rjmp	.-190    	; 0xb3a0 <follow_path+0x130>
    b45e:	f9 01       	movw	r30, r18
    b460:	ea 0d       	add	r30, r10
    b462:	fb 1d       	adc	r31, r11
    b464:	09 c0       	rjmp	.+18     	; 0xb478 <follow_path+0x208>
    b466:	20 e2       	ldi	r18, 0x20	; 32
    b468:	ac cf       	rjmp	.-168    	; 0xb3c2 <follow_path+0x152>
    b46a:	92 91       	ld	r25, -Z
    b46c:	82 91       	ld	r24, -Z
    b46e:	80 32       	cpi	r24, 0x20	; 32
    b470:	91 05       	cpc	r25, r1
    b472:	31 f4       	brne	.+12     	; 0xb480 <follow_path+0x210>
    b474:	01 50       	subi	r16, 0x01	; 1
    b476:	11 09       	sbc	r17, r1
    b478:	01 15       	cp	r16, r1
    b47a:	11 05       	cpc	r17, r1
    b47c:	b1 f7       	brne	.-20     	; 0xb46a <follow_path+0x1fa>
    b47e:	02 c0       	rjmp	.+4      	; 0xb484 <follow_path+0x214>
    b480:	8e 97       	sbiw	r24, 0x2e	; 46
    b482:	c1 f3       	breq	.-16     	; 0xb474 <follow_path+0x204>
    b484:	f8 01       	movw	r30, r16
    b486:	ee 0f       	add	r30, r30
    b488:	ff 1f       	adc	r31, r31
    b48a:	ea 0d       	add	r30, r10
    b48c:	fb 1d       	adc	r31, r11
    b48e:	11 82       	std	Z+1, r1	; 0x01
    b490:	10 82       	st	Z, r1
    b492:	01 15       	cp	r16, r1
    b494:	11 05       	cpc	r17, r1
    b496:	09 f4       	brne	.+2      	; 0xb49a <follow_path+0x22a>
    b498:	fb c0       	rjmp	.+502    	; 0xb690 <follow_path+0x420>
    b49a:	d5 01       	movw	r26, r10
    b49c:	41 2c       	mov	r4, r1
    b49e:	51 2c       	mov	r5, r1
    b4a0:	8d 91       	ld	r24, X+
    b4a2:	9d 91       	ld	r25, X+
    b4a4:	80 32       	cpi	r24, 0x20	; 32
    b4a6:	91 05       	cpc	r25, r1
    b4a8:	21 f4       	brne	.+8      	; 0xb4b2 <follow_path+0x242>
    b4aa:	2f ef       	ldi	r18, 0xFF	; 255
    b4ac:	42 1a       	sub	r4, r18
    b4ae:	52 0a       	sbc	r5, r18
    b4b0:	f7 cf       	rjmp	.-18     	; 0xb4a0 <follow_path+0x230>
    b4b2:	41 14       	cp	r4, r1
    b4b4:	51 04       	cpc	r5, r1
    b4b6:	11 f4       	brne	.+4      	; 0xb4bc <follow_path+0x24c>
    b4b8:	8e 97       	sbiw	r24, 0x2e	; 46
    b4ba:	39 f4       	brne	.+14     	; 0xb4ca <follow_path+0x25a>
    b4bc:	3b 81       	ldd	r19, Y+3	; 0x03
    b4be:	33 60       	ori	r19, 0x03	; 3
    b4c0:	3b 83       	std	Y+3, r19	; 0x03
    b4c2:	03 c0       	rjmp	.+6      	; 0xb4ca <follow_path+0x25a>
    b4c4:	01 50       	subi	r16, 0x01	; 1
    b4c6:	11 09       	sbc	r17, r1
    b4c8:	21 f0       	breq	.+8      	; 0xb4d2 <follow_path+0x262>
    b4ca:	92 91       	ld	r25, -Z
    b4cc:	82 91       	ld	r24, -Z
    b4ce:	8e 97       	sbiw	r24, 0x2e	; 46
    b4d0:	c9 f7       	brne	.-14     	; 0xb4c4 <follow_path+0x254>
    b4d2:	4b e0       	ldi	r20, 0x0B	; 11
    b4d4:	50 e0       	ldi	r21, 0x00	; 0
    b4d6:	60 e2       	ldi	r22, 0x20	; 32
    b4d8:	70 e0       	ldi	r23, 0x00	; 0
    b4da:	8f 81       	ldd	r24, Y+7	; 0x07
    b4dc:	98 85       	ldd	r25, Y+8	; 0x08
    b4de:	0e 94 ae 48 	call	0x915c	; 0x915c <mem_set>
    b4e2:	48 e0       	ldi	r20, 0x08	; 8
    b4e4:	84 2e       	mov	r8, r20
    b4e6:	91 2c       	mov	r9, r1
    b4e8:	c1 2c       	mov	r12, r1
    b4ea:	d1 2c       	mov	r13, r1
    b4ec:	1c 82       	std	Y+4, r1	; 0x04
    b4ee:	12 01       	movw	r2, r4
    b4f0:	8f ef       	ldi	r24, 0xFF	; 255
    b4f2:	28 1a       	sub	r2, r24
    b4f4:	38 0a       	sbc	r3, r24
    b4f6:	44 0c       	add	r4, r4
    b4f8:	55 1c       	adc	r5, r5
    b4fa:	f5 01       	movw	r30, r10
    b4fc:	e4 0d       	add	r30, r4
    b4fe:	f5 1d       	adc	r31, r5
    b500:	80 81       	ld	r24, Z
    b502:	91 81       	ldd	r25, Z+1	; 0x01
    b504:	00 97       	sbiw	r24, 0x00	; 0
    b506:	09 f4       	brne	.+2      	; 0xb50a <follow_path+0x29a>
    b508:	98 c0       	rjmp	.+304    	; 0xb63a <follow_path+0x3ca>
    b50a:	80 32       	cpi	r24, 0x20	; 32
    b50c:	91 05       	cpc	r25, r1
    b50e:	31 f0       	breq	.+12     	; 0xb51c <follow_path+0x2ac>
    b510:	8e 32       	cpi	r24, 0x2E	; 46
    b512:	91 05       	cpc	r25, r1
    b514:	41 f4       	brne	.+16     	; 0xb526 <follow_path+0x2b6>
    b516:	20 16       	cp	r2, r16
    b518:	31 06       	cpc	r3, r17
    b51a:	61 f0       	breq	.+24     	; 0xb534 <follow_path+0x2c4>
    b51c:	9b 81       	ldd	r25, Y+3	; 0x03
    b51e:	93 60       	ori	r25, 0x03	; 3
    b520:	9b 83       	std	Y+3, r25	; 0x03
    b522:	21 01       	movw	r4, r2
    b524:	e4 cf       	rjmp	.-56     	; 0xb4ee <follow_path+0x27e>
    b526:	c8 14       	cp	r12, r8
    b528:	d9 04       	cpc	r13, r9
    b52a:	40 f4       	brcc	.+16     	; 0xb53c <follow_path+0x2cc>
    b52c:	20 16       	cp	r2, r16
    b52e:	31 06       	cpc	r3, r17
    b530:	31 f5       	brne	.+76     	; 0xb57e <follow_path+0x30e>
    b532:	c5 c0       	rjmp	.+394    	; 0xb6be <follow_path+0x44e>
    b534:	c8 14       	cp	r12, r8
    b536:	d9 04       	cpc	r13, r9
    b538:	08 f4       	brcc	.+2      	; 0xb53c <follow_path+0x2cc>
    b53a:	c1 c0       	rjmp	.+386    	; 0xb6be <follow_path+0x44e>
    b53c:	ab e0       	ldi	r26, 0x0B	; 11
    b53e:	8a 16       	cp	r8, r26
    b540:	91 04       	cpc	r9, r1
    b542:	39 f4       	brne	.+14     	; 0xb552 <follow_path+0x2e2>
    b544:	bb 81       	ldd	r27, Y+3	; 0x03
    b546:	b3 60       	ori	r27, 0x03	; 3
    b548:	bb 83       	std	Y+3, r27	; 0x03
    b54a:	2b e0       	ldi	r18, 0x0B	; 11
    b54c:	82 2e       	mov	r8, r18
    b54e:	91 2c       	mov	r9, r1
    b550:	74 c0       	rjmp	.+232    	; 0xb63a <follow_path+0x3ca>
    b552:	20 16       	cp	r2, r16
    b554:	31 06       	cpc	r3, r17
    b556:	39 f0       	breq	.+14     	; 0xb566 <follow_path+0x2f6>
    b558:	eb 81       	ldd	r30, Y+3	; 0x03
    b55a:	e3 60       	ori	r30, 0x03	; 3
    b55c:	eb 83       	std	Y+3, r30	; 0x03
    b55e:	02 15       	cp	r16, r2
    b560:	13 05       	cpc	r17, r3
    b562:	08 f4       	brcc	.+2      	; 0xb566 <follow_path+0x2f6>
    b564:	6a c0       	rjmp	.+212    	; 0xb63a <follow_path+0x3ca>
    b566:	fc 81       	ldd	r31, Y+4	; 0x04
    b568:	ff 0f       	add	r31, r31
    b56a:	ff 0f       	add	r31, r31
    b56c:	fc 83       	std	Y+4, r31	; 0x04
    b56e:	18 01       	movw	r2, r16
    b570:	8b e0       	ldi	r24, 0x0B	; 11
    b572:	88 2e       	mov	r8, r24
    b574:	91 2c       	mov	r9, r1
    b576:	98 e0       	ldi	r25, 0x08	; 8
    b578:	c9 2e       	mov	r12, r25
    b57a:	d1 2c       	mov	r13, r1
    b57c:	d2 cf       	rjmp	.-92     	; 0xb522 <follow_path+0x2b2>
    b57e:	80 38       	cpi	r24, 0x80	; 128
    b580:	91 05       	cpc	r25, r1
    b582:	78 f1       	brcs	.+94     	; 0xb5e2 <follow_path+0x372>
    b584:	2b 81       	ldd	r18, Y+3	; 0x03
    b586:	22 60       	ori	r18, 0x02	; 2
    b588:	52 2e       	mov	r5, r18
    b58a:	bc 01       	movw	r22, r24
    b58c:	80 e0       	ldi	r24, 0x00	; 0
    b58e:	90 e0       	ldi	r25, 0x00	; 0
    b590:	45 eb       	ldi	r20, 0xB5	; 181
    b592:	51 e0       	ldi	r21, 0x01	; 1
    b594:	0e 94 01 6b 	call	0xd602	; 0xd602 <ff_uni2oem>
    b598:	87 ff       	sbrs	r24, 7
    b59a:	08 c0       	rjmp	.+16     	; 0xb5ac <follow_path+0x33c>
    b59c:	8f 77       	andi	r24, 0x7F	; 127
    b59e:	99 27       	eor	r25, r25
    b5a0:	fc 01       	movw	r30, r24
    b5a2:	e7 57       	subi	r30, 0x77	; 119
    b5a4:	fc 4f       	sbci	r31, 0xFC	; 252
    b5a6:	80 81       	ld	r24, Z
    b5a8:	90 e0       	ldi	r25, 0x00	; 0
    b5aa:	18 c0       	rjmp	.+48     	; 0xb5dc <follow_path+0x36c>
    b5ac:	8f 3f       	cpi	r24, 0xFF	; 255
    b5ae:	91 05       	cpc	r25, r1
    b5b0:	a9 f0       	breq	.+42     	; 0xb5dc <follow_path+0x36c>
    b5b2:	a0 f0       	brcs	.+40     	; 0xb5dc <follow_path+0x36c>
    b5b4:	94 01       	movw	r18, r8
    b5b6:	21 50       	subi	r18, 0x01	; 1
    b5b8:	31 09       	sbc	r19, r1
    b5ba:	c2 16       	cp	r12, r18
    b5bc:	d3 06       	cpc	r13, r19
    b5be:	28 f0       	brcs	.+10     	; 0xb5ca <follow_path+0x35a>
    b5c0:	3b 81       	ldd	r19, Y+3	; 0x03
    b5c2:	33 60       	ori	r19, 0x03	; 3
    b5c4:	3b 83       	std	Y+3, r19	; 0x03
    b5c6:	64 01       	movw	r12, r8
    b5c8:	ac cf       	rjmp	.-168    	; 0xb522 <follow_path+0x2b2>
    b5ca:	f7 01       	movw	r30, r14
    b5cc:	ec 0d       	add	r30, r12
    b5ce:	fd 1d       	adc	r31, r13
    b5d0:	94 8f       	std	Z+28, r25	; 0x1c
    b5d2:	d6 01       	movw	r26, r12
    b5d4:	11 96       	adiw	r26, 0x01	; 1
    b5d6:	6d 01       	movw	r12, r26
    b5d8:	5b 82       	std	Y+3, r5	; 0x03
    b5da:	26 c0       	rjmp	.+76     	; 0xb628 <follow_path+0x3b8>
    b5dc:	00 97       	sbiw	r24, 0x00	; 0
    b5de:	59 f0       	breq	.+22     	; 0xb5f6 <follow_path+0x386>
    b5e0:	5b 82       	std	Y+3, r5	; 0x03
    b5e2:	ee e4       	ldi	r30, 0x4E	; 78
    b5e4:	f3 e0       	ldi	r31, 0x03	; 3
    b5e6:	21 91       	ld	r18, Z+
    b5e8:	22 23       	and	r18, r18
    b5ea:	59 f0       	breq	.+22     	; 0xb602 <follow_path+0x392>
    b5ec:	30 e0       	ldi	r19, 0x00	; 0
    b5ee:	82 17       	cp	r24, r18
    b5f0:	93 07       	cpc	r25, r19
    b5f2:	c9 f7       	brne	.-14     	; 0xb5e6 <follow_path+0x376>
    b5f4:	5b 80       	ldd	r5, Y+3	; 0x03
    b5f6:	b5 2d       	mov	r27, r5
    b5f8:	b3 60       	ori	r27, 0x03	; 3
    b5fa:	bb 83       	std	Y+3, r27	; 0x03
    b5fc:	8f e5       	ldi	r24, 0x5F	; 95
    b5fe:	90 e0       	ldi	r25, 0x00	; 0
    b600:	13 c0       	rjmp	.+38     	; 0xb628 <follow_path+0x3b8>
    b602:	9c 01       	movw	r18, r24
    b604:	21 54       	subi	r18, 0x41	; 65
    b606:	31 09       	sbc	r19, r1
    b608:	2a 31       	cpi	r18, 0x1A	; 26
    b60a:	31 05       	cpc	r19, r1
    b60c:	18 f4       	brcc	.+6      	; 0xb614 <follow_path+0x3a4>
    b60e:	ec 81       	ldd	r30, Y+4	; 0x04
    b610:	e2 60       	ori	r30, 0x02	; 2
    b612:	ec 83       	std	Y+4, r30	; 0x04
    b614:	9c 01       	movw	r18, r24
    b616:	21 56       	subi	r18, 0x61	; 97
    b618:	31 09       	sbc	r19, r1
    b61a:	2a 31       	cpi	r18, 0x1A	; 26
    b61c:	31 05       	cpc	r19, r1
    b61e:	20 f4       	brcc	.+8      	; 0xb628 <follow_path+0x3b8>
    b620:	fc 81       	ldd	r31, Y+4	; 0x04
    b622:	f1 60       	ori	r31, 0x01	; 1
    b624:	fc 83       	std	Y+4, r31	; 0x04
    b626:	80 97       	sbiw	r24, 0x20	; 32
    b628:	f7 01       	movw	r30, r14
    b62a:	ec 0d       	add	r30, r12
    b62c:	fd 1d       	adc	r31, r13
    b62e:	84 8f       	std	Z+28, r24	; 0x1c
    b630:	96 01       	movw	r18, r12
    b632:	2f 5f       	subi	r18, 0xFF	; 255
    b634:	3f 4f       	sbci	r19, 0xFF	; 255
    b636:	69 01       	movw	r12, r18
    b638:	74 cf       	rjmp	.-280    	; 0xb522 <follow_path+0x2b2>
    b63a:	f7 01       	movw	r30, r14
    b63c:	84 8d       	ldd	r24, Z+28	; 0x1c
    b63e:	85 3e       	cpi	r24, 0xE5	; 229
    b640:	11 f4       	brne	.+4      	; 0xb646 <follow_path+0x3d6>
    b642:	25 e0       	ldi	r18, 0x05	; 5
    b644:	24 8f       	std	Z+28, r18	; 0x1c
    b646:	38 e0       	ldi	r19, 0x08	; 8
    b648:	83 16       	cp	r8, r19
    b64a:	91 04       	cpc	r9, r1
    b64c:	21 f4       	brne	.+8      	; 0xb656 <follow_path+0x3e6>
    b64e:	8c 81       	ldd	r24, Y+4	; 0x04
    b650:	88 0f       	add	r24, r24
    b652:	88 0f       	add	r24, r24
    b654:	8c 83       	std	Y+4, r24	; 0x04
    b656:	8c 81       	ldd	r24, Y+4	; 0x04
    b658:	8c 70       	andi	r24, 0x0C	; 12
    b65a:	8c 30       	cpi	r24, 0x0C	; 12
    b65c:	21 f0       	breq	.+8      	; 0xb666 <follow_path+0x3f6>
    b65e:	8c 81       	ldd	r24, Y+4	; 0x04
    b660:	83 70       	andi	r24, 0x03	; 3
    b662:	83 30       	cpi	r24, 0x03	; 3
    b664:	19 f4       	brne	.+6      	; 0xb66c <follow_path+0x3fc>
    b666:	9b 81       	ldd	r25, Y+3	; 0x03
    b668:	92 60       	ori	r25, 0x02	; 2
    b66a:	9b 83       	std	Y+3, r25	; 0x03
    b66c:	ab 81       	ldd	r26, Y+3	; 0x03
    b66e:	a1 fd       	sbrc	r26, 1
    b670:	0b c0       	rjmp	.+22     	; 0xb688 <follow_path+0x418>
    b672:	bc 81       	ldd	r27, Y+4	; 0x04
    b674:	b0 ff       	sbrs	r27, 0
    b676:	02 c0       	rjmp	.+4      	; 0xb67c <follow_path+0x40c>
    b678:	a0 61       	ori	r26, 0x10	; 16
    b67a:	ab 83       	std	Y+3, r26	; 0x03
    b67c:	ec 81       	ldd	r30, Y+4	; 0x04
    b67e:	e2 ff       	sbrs	r30, 2
    b680:	03 c0       	rjmp	.+6      	; 0xb688 <follow_path+0x418>
    b682:	fb 81       	ldd	r31, Y+3	; 0x03
    b684:	f8 60       	ori	r31, 0x08	; 8
    b686:	fb 83       	std	Y+3, r31	; 0x03
    b688:	2b 81       	ldd	r18, Y+3	; 0x03
    b68a:	f7 01       	movw	r30, r14
    b68c:	27 a3       	std	Z+39, r18	; 0x27
    b68e:	a2 ce       	rjmp	.-700    	; 0xb3d4 <follow_path+0x164>
    b690:	86 e0       	ldi	r24, 0x06	; 6
    b692:	90 e0       	ldi	r25, 0x00	; 0
    b694:	a1 ce       	rjmp	.-702    	; 0xb3d8 <follow_path+0x168>
    b696:	84 30       	cpi	r24, 0x04	; 4
    b698:	91 05       	cpc	r25, r1
    b69a:	b9 f4       	brne	.+46     	; 0xb6ca <follow_path+0x45a>
    b69c:	32 2f       	mov	r19, r18
    b69e:	34 70       	andi	r19, 0x04	; 4
    b6a0:	25 ff       	sbrs	r18, 5
    b6a2:	08 c0       	rjmp	.+16     	; 0xb6b4 <follow_path+0x444>
    b6a4:	33 23       	and	r19, r19
    b6a6:	09 f4       	brne	.+2      	; 0xb6aa <follow_path+0x43a>
    b6a8:	b8 ce       	rjmp	.-656    	; 0xb41a <follow_path+0x1aa>
    b6aa:	80 e8       	ldi	r24, 0x80	; 128
    b6ac:	87 a3       	std	Z+39, r24	; 0x27
    b6ae:	80 e0       	ldi	r24, 0x00	; 0
    b6b0:	90 e0       	ldi	r25, 0x00	; 0
    b6b2:	0b c0       	rjmp	.+22     	; 0xb6ca <follow_path+0x45a>
    b6b4:	31 11       	cpse	r19, r1
    b6b6:	09 c0       	rjmp	.+18     	; 0xb6ca <follow_path+0x45a>
    b6b8:	85 e0       	ldi	r24, 0x05	; 5
    b6ba:	90 e0       	ldi	r25, 0x00	; 0
    b6bc:	06 c0       	rjmp	.+12     	; 0xb6ca <follow_path+0x45a>
    b6be:	fb e0       	ldi	r31, 0x0B	; 11
    b6c0:	8f 16       	cp	r8, r31
    b6c2:	91 04       	cpc	r9, r1
    b6c4:	09 f0       	breq	.+2      	; 0xb6c8 <follow_path+0x458>
    b6c6:	4f cf       	rjmp	.-354    	; 0xb566 <follow_path+0x2f6>
    b6c8:	3d cf       	rjmp	.-390    	; 0xb544 <follow_path+0x2d4>
    b6ca:	2a 96       	adiw	r28, 0x0a	; 10
    b6cc:	e2 e1       	ldi	r30, 0x12	; 18
    b6ce:	0c 94 35 e5 	jmp	0x1ca6a	; 0x1ca6a <__epilogue_restores__>

0000b6d2 <f_mount>:
    b6d2:	a6 e0       	ldi	r26, 0x06	; 6
    b6d4:	b0 e0       	ldi	r27, 0x00	; 0
    b6d6:	ef e6       	ldi	r30, 0x6F	; 111
    b6d8:	fb e5       	ldi	r31, 0x5B	; 91
    b6da:	0c 94 28 e5 	jmp	0x1ca50	; 0x1ca50 <__prologue_saves__+0x1e>
    b6de:	9c 83       	std	Y+4, r25	; 0x04
    b6e0:	8b 83       	std	Y+3, r24	; 0x03
    b6e2:	7e 83       	std	Y+6, r23	; 0x06
    b6e4:	6d 83       	std	Y+5, r22	; 0x05
    b6e6:	14 2f       	mov	r17, r20
    b6e8:	7a 83       	std	Y+2, r23	; 0x02
    b6ea:	69 83       	std	Y+1, r22	; 0x01
    b6ec:	ce 01       	movw	r24, r28
    b6ee:	01 96       	adiw	r24, 0x01	; 1
    b6f0:	0e 94 bf 49 	call	0x937e	; 0x937e <get_ldnumber>
    b6f4:	97 fd       	sbrc	r25, 7
    b6f6:	20 c0       	rjmp	.+64     	; 0xb738 <f_mount+0x66>
    b6f8:	88 0f       	add	r24, r24
    b6fa:	99 1f       	adc	r25, r25
    b6fc:	fc 01       	movw	r30, r24
    b6fe:	e1 54       	subi	r30, 0x41	; 65
    b700:	f8 4e       	sbci	r31, 0xE8	; 232
    b702:	01 90       	ld	r0, Z+
    b704:	f0 81       	ld	r31, Z
    b706:	e0 2d       	mov	r30, r0
    b708:	30 97       	sbiw	r30, 0x00	; 0
    b70a:	09 f0       	breq	.+2      	; 0xb70e <f_mount+0x3c>
    b70c:	10 82       	st	Z, r1
    b70e:	eb 81       	ldd	r30, Y+3	; 0x03
    b710:	fc 81       	ldd	r31, Y+4	; 0x04
    b712:	30 97       	sbiw	r30, 0x00	; 0
    b714:	09 f0       	breq	.+2      	; 0xb718 <f_mount+0x46>
    b716:	10 82       	st	Z, r1
    b718:	dc 01       	movw	r26, r24
    b71a:	a1 54       	subi	r26, 0x41	; 65
    b71c:	b8 4e       	sbci	r27, 0xE8	; 232
    b71e:	ed 93       	st	X+, r30
    b720:	fc 93       	st	X, r31
    b722:	11 23       	and	r17, r17
    b724:	61 f0       	breq	.+24     	; 0xb73e <f_mount+0x6c>
    b726:	40 e0       	ldi	r20, 0x00	; 0
    b728:	be 01       	movw	r22, r28
    b72a:	6d 5f       	subi	r22, 0xFD	; 253
    b72c:	7f 4f       	sbci	r23, 0xFF	; 255
    b72e:	ce 01       	movw	r24, r28
    b730:	05 96       	adiw	r24, 0x05	; 5
    b732:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <mount_volume>
    b736:	05 c0       	rjmp	.+10     	; 0xb742 <f_mount+0x70>
    b738:	8b e0       	ldi	r24, 0x0B	; 11
    b73a:	90 e0       	ldi	r25, 0x00	; 0
    b73c:	02 c0       	rjmp	.+4      	; 0xb742 <f_mount+0x70>
    b73e:	80 e0       	ldi	r24, 0x00	; 0
    b740:	90 e0       	ldi	r25, 0x00	; 0
    b742:	26 96       	adiw	r28, 0x06	; 6
    b744:	e3 e0       	ldi	r30, 0x03	; 3
    b746:	0c 94 44 e5 	jmp	0x1ca88	; 0x1ca88 <__epilogue_restores__+0x1e>

0000b74a <f_open>:
    b74a:	a6 e3       	ldi	r26, 0x36	; 54
    b74c:	b0 e0       	ldi	r27, 0x00	; 0
    b74e:	eb ea       	ldi	r30, 0xAB	; 171
    b750:	fb e5       	ldi	r31, 0x5B	; 91
    b752:	0c 94 19 e5 	jmp	0x1ca32	; 0x1ca32 <__prologue_saves__>
    b756:	7a ab       	std	Y+50, r23	; 0x32
    b758:	69 ab       	std	Y+49, r22	; 0x31
    b75a:	00 97       	sbiw	r24, 0x00	; 0
    b75c:	09 f4       	brne	.+2      	; 0xb760 <f_open+0x16>
    b75e:	93 c1       	rjmp	.+806    	; 0xba86 <f_open+0x33c>
    b760:	74 2e       	mov	r7, r20
    b762:	7c 01       	movw	r14, r24
    b764:	24 2f       	mov	r18, r20
    b766:	2f 73       	andi	r18, 0x3F	; 63
    b768:	32 2e       	mov	r3, r18
    b76a:	42 2f       	mov	r20, r18
    b76c:	be 01       	movw	r22, r28
    b76e:	61 5d       	subi	r22, 0xD1	; 209
    b770:	7f 4f       	sbci	r23, 0xFF	; 255
    b772:	ce 01       	movw	r24, r28
    b774:	c1 96       	adiw	r24, 0x31	; 49
    b776:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <mount_volume>
    b77a:	00 97       	sbiw	r24, 0x00	; 0
    b77c:	09 f0       	breq	.+2      	; 0xb780 <f_open+0x36>
    b77e:	7d c1       	rjmp	.+762    	; 0xba7a <f_open+0x330>
    b780:	8f a5       	ldd	r24, Y+47	; 0x2f
    b782:	98 a9       	ldd	r25, Y+48	; 0x30
    b784:	9a 83       	std	Y+2, r25	; 0x02
    b786:	89 83       	std	Y+1, r24	; 0x01
    b788:	80 e0       	ldi	r24, 0x00	; 0
    b78a:	92 e0       	ldi	r25, 0x02	; 2
    b78c:	0e 94 fb 6a 	call	0xd5f6	; 0xd5f6 <ff_memalloc>
    b790:	5c 01       	movw	r10, r24
    b792:	00 97       	sbiw	r24, 0x00	; 0
    b794:	09 f4       	brne	.+2      	; 0xb798 <f_open+0x4e>
    b796:	79 c1       	rjmp	.+754    	; 0xba8a <f_open+0x340>
    b798:	ef a5       	ldd	r30, Y+47	; 0x2f
    b79a:	f8 a9       	ldd	r31, Y+48	; 0x30
    b79c:	94 87       	std	Z+12, r25	; 0x0c
    b79e:	83 87       	std	Z+11, r24	; 0x0b
    b7a0:	69 a9       	ldd	r22, Y+49	; 0x31
    b7a2:	7a a9       	ldd	r23, Y+50	; 0x32
    b7a4:	ce 01       	movw	r24, r28
    b7a6:	01 96       	adiw	r24, 0x01	; 1
    b7a8:	63 dd       	rcall	.-1338   	; 0xb270 <follow_path>
    b7aa:	8c 01       	movw	r16, r24
    b7ac:	89 2b       	or	r24, r25
    b7ae:	29 f4       	brne	.+10     	; 0xb7ba <f_open+0x70>
    b7b0:	88 a5       	ldd	r24, Y+40	; 0x28
    b7b2:	87 ff       	sbrs	r24, 7
    b7b4:	02 c0       	rjmp	.+4      	; 0xb7ba <f_open+0x70>
    b7b6:	06 e0       	ldi	r16, 0x06	; 6
    b7b8:	10 e0       	ldi	r17, 0x00	; 0
    b7ba:	87 2d       	mov	r24, r7
    b7bc:	8c 71       	andi	r24, 0x1C	; 28
    b7be:	09 f4       	brne	.+2      	; 0xb7c2 <f_open+0x78>
    b7c0:	75 c0       	rjmp	.+234    	; 0xb8ac <f_open+0x162>
    b7c2:	01 15       	cp	r16, r1
    b7c4:	11 05       	cpc	r17, r1
    b7c6:	79 f0       	breq	.+30     	; 0xb7e6 <f_open+0x9c>
    b7c8:	04 30       	cpi	r16, 0x04	; 4
    b7ca:	11 05       	cpc	r17, r1
    b7cc:	09 f0       	breq	.+2      	; 0xb7d0 <f_open+0x86>
    b7ce:	6d c1       	rjmp	.+730    	; 0xbaaa <f_open+0x360>
    b7d0:	ce 01       	movw	r24, r28
    b7d2:	01 96       	adiw	r24, 0x01	; 1
    b7d4:	bf db       	rcall	.-2178   	; 0xaf54 <dir_register>
    b7d6:	8c 01       	movw	r16, r24
    b7d8:	89 2b       	or	r24, r25
    b7da:	09 f0       	breq	.+2      	; 0xb7de <f_open+0x94>
    b7dc:	66 c1       	rjmp	.+716    	; 0xbaaa <f_open+0x360>
    b7de:	33 2d       	mov	r19, r3
    b7e0:	38 60       	ori	r19, 0x08	; 8
    b7e2:	33 2e       	mov	r3, r19
    b7e4:	06 c0       	rjmp	.+12     	; 0xb7f2 <f_open+0xa8>
    b7e6:	8d 81       	ldd	r24, Y+5	; 0x05
    b7e8:	81 71       	andi	r24, 0x11	; 17
    b7ea:	09 f0       	breq	.+2      	; 0xb7ee <f_open+0xa4>
    b7ec:	5c c1       	rjmp	.+696    	; 0xbaa6 <f_open+0x35c>
    b7ee:	72 fc       	sbrc	r7, 2
    b7f0:	51 c1       	rjmp	.+674    	; 0xba94 <f_open+0x34a>
    b7f2:	33 fe       	sbrs	r3, 3
    b7f4:	6b c0       	rjmp	.+214    	; 0xb8cc <f_open+0x182>
    b7f6:	0b 8d       	ldd	r16, Y+27	; 0x1b
    b7f8:	1c 8d       	ldd	r17, Y+28	; 0x1c
    b7fa:	ef a5       	ldd	r30, Y+47	; 0x2f
    b7fc:	f8 a9       	ldd	r31, Y+48	; 0x30
    b7fe:	b8 01       	movw	r22, r16
    b800:	80 81       	ld	r24, Z
    b802:	0e 94 df 4b 	call	0x97be	; 0x97be <ld_clust.isra.4>
    b806:	2b 01       	movw	r4, r22
    b808:	3c 01       	movw	r6, r24
    b80a:	0e 94 ff 71 	call	0xe3fe	; 0xe3fe <get_fattime>
    b80e:	ab 01       	movw	r20, r22
    b810:	bc 01       	movw	r22, r24
    b812:	c8 01       	movw	r24, r16
    b814:	0e 96       	adiw	r24, 0x0e	; 14
    b816:	0e 94 a8 48 	call	0x9150	; 0x9150 <st_dword>
    b81a:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b81c:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b81e:	80 e2       	ldi	r24, 0x20	; 32
    b820:	83 87       	std	Z+11, r24	; 0x0b
    b822:	af a5       	ldd	r26, Y+47	; 0x2f
    b824:	b8 a9       	ldd	r27, Y+48	; 0x30
    b826:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b828:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b82a:	12 8e       	std	Z+26, r1	; 0x1a
    b82c:	13 8e       	std	Z+27, r1	; 0x1b
    b82e:	8c 91       	ld	r24, X
    b830:	83 30       	cpi	r24, 0x03	; 3
    b832:	11 f4       	brne	.+4      	; 0xb838 <f_open+0xee>
    b834:	14 8a       	std	Z+20, r1	; 0x14
    b836:	15 8a       	std	Z+21, r1	; 0x15
    b838:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b83a:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b83c:	14 8e       	std	Z+28, r1	; 0x1c
    b83e:	15 8e       	std	Z+29, r1	; 0x1d
    b840:	16 8e       	std	Z+30, r1	; 0x1e
    b842:	17 8e       	std	Z+31, r1	; 0x1f
    b844:	81 e0       	ldi	r24, 0x01	; 1
    b846:	fd 01       	movw	r30, r26
    b848:	83 83       	std	Z+3, r24	; 0x03
    b84a:	41 14       	cp	r4, r1
    b84c:	51 04       	cpc	r5, r1
    b84e:	61 04       	cpc	r6, r1
    b850:	71 04       	cpc	r7, r1
    b852:	c9 f1       	breq	.+114    	; 0xb8c6 <f_open+0x17c>
    b854:	21 a9       	ldd	r18, Z+49	; 0x31
    b856:	32 a9       	ldd	r19, Z+50	; 0x32
    b858:	43 a9       	ldd	r20, Z+51	; 0x33
    b85a:	54 a9       	ldd	r21, Z+52	; 0x34
    b85c:	2b ab       	std	Y+51, r18	; 0x33
    b85e:	3c ab       	std	Y+52, r19	; 0x34
    b860:	4d ab       	std	Y+53, r20	; 0x35
    b862:	5e ab       	std	Y+54, r21	; 0x36
    b864:	00 e0       	ldi	r16, 0x00	; 0
    b866:	10 e0       	ldi	r17, 0x00	; 0
    b868:	98 01       	movw	r18, r16
    b86a:	b3 01       	movw	r22, r6
    b86c:	a2 01       	movw	r20, r4
    b86e:	ce 01       	movw	r24, r28
    b870:	01 96       	adiw	r24, 0x01	; 1
    b872:	0e 94 d9 53 	call	0xa7b2	; 0xa7b2 <remove_chain>
    b876:	8c 01       	movw	r16, r24
    b878:	89 2b       	or	r24, r25
    b87a:	09 f0       	breq	.+2      	; 0xb87e <f_open+0x134>
    b87c:	16 c1       	rjmp	.+556    	; 0xbaaa <f_open+0x360>
    b87e:	4b a9       	ldd	r20, Y+51	; 0x33
    b880:	5c a9       	ldd	r21, Y+52	; 0x34
    b882:	6d a9       	ldd	r22, Y+53	; 0x35
    b884:	7e a9       	ldd	r23, Y+54	; 0x36
    b886:	8f a5       	ldd	r24, Y+47	; 0x2f
    b888:	98 a9       	ldd	r25, Y+48	; 0x30
    b88a:	0e 94 6e 4d 	call	0x9adc	; 0x9adc <move_window>
    b88e:	8c 01       	movw	r16, r24
    b890:	ef a5       	ldd	r30, Y+47	; 0x2f
    b892:	f8 a9       	ldd	r31, Y+48	; 0x30
    b894:	21 e0       	ldi	r18, 0x01	; 1
    b896:	42 1a       	sub	r4, r18
    b898:	51 08       	sbc	r5, r1
    b89a:	61 08       	sbc	r6, r1
    b89c:	71 08       	sbc	r7, r1
    b89e:	45 86       	std	Z+13, r4	; 0x0d
    b8a0:	56 86       	std	Z+14, r5	; 0x0e
    b8a2:	67 86       	std	Z+15, r6	; 0x0f
    b8a4:	70 8a       	std	Z+16, r7	; 0x10
    b8a6:	89 2b       	or	r24, r25
    b8a8:	61 f0       	breq	.+24     	; 0xb8c2 <f_open+0x178>
    b8aa:	ff c0       	rjmp	.+510    	; 0xbaaa <f_open+0x360>
    b8ac:	01 15       	cp	r16, r1
    b8ae:	11 05       	cpc	r17, r1
    b8b0:	09 f0       	breq	.+2      	; 0xb8b4 <f_open+0x16a>
    b8b2:	fb c0       	rjmp	.+502    	; 0xbaaa <f_open+0x360>
    b8b4:	8d 81       	ldd	r24, Y+5	; 0x05
    b8b6:	84 fd       	sbrc	r24, 4
    b8b8:	f3 c0       	rjmp	.+486    	; 0xbaa0 <f_open+0x356>
    b8ba:	71 fe       	sbrs	r7, 1
    b8bc:	02 c0       	rjmp	.+4      	; 0xb8c2 <f_open+0x178>
    b8be:	80 fd       	sbrc	r24, 0
    b8c0:	f2 c0       	rjmp	.+484    	; 0xbaa6 <f_open+0x35c>
    b8c2:	33 fe       	sbrs	r3, 3
    b8c4:	03 c0       	rjmp	.+6      	; 0xb8cc <f_open+0x182>
    b8c6:	33 2d       	mov	r19, r3
    b8c8:	30 64       	ori	r19, 0x40	; 64
    b8ca:	33 2e       	mov	r3, r19
    b8cc:	0f a5       	ldd	r16, Y+47	; 0x2f
    b8ce:	18 a9       	ldd	r17, Y+48	; 0x30
    b8d0:	f8 01       	movw	r30, r16
    b8d2:	81 a9       	ldd	r24, Z+49	; 0x31
    b8d4:	92 a9       	ldd	r25, Z+50	; 0x32
    b8d6:	a3 a9       	ldd	r26, Z+51	; 0x33
    b8d8:	b4 a9       	ldd	r27, Z+52	; 0x34
    b8da:	f7 01       	movw	r30, r14
    b8dc:	84 8f       	std	Z+28, r24	; 0x1c
    b8de:	95 8f       	std	Z+29, r25	; 0x1d
    b8e0:	a6 8f       	std	Z+30, r26	; 0x1e
    b8e2:	b7 8f       	std	Z+31, r27	; 0x1f
    b8e4:	6b 8c       	ldd	r6, Y+27	; 0x1b
    b8e6:	7c 8c       	ldd	r7, Y+28	; 0x1c
    b8e8:	71 a2       	std	Z+33, r7	; 0x21
    b8ea:	60 a2       	std	Z+32, r6	; 0x20
    b8ec:	b3 01       	movw	r22, r6
    b8ee:	f8 01       	movw	r30, r16
    b8f0:	80 81       	ld	r24, Z
    b8f2:	0e 94 df 4b 	call	0x97be	; 0x97be <ld_clust.isra.4>
    b8f6:	f7 01       	movw	r30, r14
    b8f8:	66 83       	std	Z+6, r22	; 0x06
    b8fa:	77 83       	std	Z+7, r23	; 0x07
    b8fc:	80 87       	std	Z+8, r24	; 0x08
    b8fe:	91 87       	std	Z+9, r25	; 0x09
    b900:	c3 01       	movw	r24, r6
    b902:	4c 96       	adiw	r24, 0x1c	; 28
    b904:	0e 94 93 48 	call	0x9126	; 0x9126 <ld_dword>
    b908:	f7 01       	movw	r30, r14
    b90a:	62 87       	std	Z+10, r22	; 0x0a
    b90c:	73 87       	std	Z+11, r23	; 0x0b
    b90e:	84 87       	std	Z+12, r24	; 0x0c
    b910:	95 87       	std	Z+13, r25	; 0x0d
    b912:	13 a2       	std	Z+35, r1	; 0x23
    b914:	12 a2       	std	Z+34, r1	; 0x22
    b916:	11 83       	std	Z+1, r17	; 0x01
    b918:	00 83       	st	Z, r16
    b91a:	f8 01       	movw	r30, r16
    b91c:	85 81       	ldd	r24, Z+5	; 0x05
    b91e:	96 81       	ldd	r25, Z+6	; 0x06
    b920:	f7 01       	movw	r30, r14
    b922:	93 83       	std	Z+3, r25	; 0x03
    b924:	82 83       	std	Z+2, r24	; 0x02
    b926:	36 86       	std	Z+14, r3	; 0x0e
    b928:	17 86       	std	Z+15, r1	; 0x0f
    b92a:	10 8e       	std	Z+24, r1	; 0x18
    b92c:	11 8e       	std	Z+25, r1	; 0x19
    b92e:	12 8e       	std	Z+26, r1	; 0x1a
    b930:	13 8e       	std	Z+27, r1	; 0x1b
    b932:	10 8a       	std	Z+16, r1	; 0x10
    b934:	11 8a       	std	Z+17, r1	; 0x11
    b936:	12 8a       	std	Z+18, r1	; 0x12
    b938:	13 8a       	std	Z+19, r1	; 0x13
    b93a:	67 01       	movw	r12, r14
    b93c:	f4 e2       	ldi	r31, 0x24	; 36
    b93e:	cf 0e       	add	r12, r31
    b940:	d1 1c       	adc	r13, r1
    b942:	40 e0       	ldi	r20, 0x00	; 0
    b944:	52 e0       	ldi	r21, 0x02	; 2
    b946:	60 e0       	ldi	r22, 0x00	; 0
    b948:	70 e0       	ldi	r23, 0x00	; 0
    b94a:	c6 01       	movw	r24, r12
    b94c:	0e 94 ae 48 	call	0x915c	; 0x915c <mem_set>
    b950:	35 fc       	sbrc	r3, 5
    b952:	03 c0       	rjmp	.+6      	; 0xb95a <f_open+0x210>
    b954:	00 e0       	ldi	r16, 0x00	; 0
    b956:	10 e0       	ldi	r17, 0x00	; 0
    b958:	89 c0       	rjmp	.+274    	; 0xba6c <f_open+0x322>
    b95a:	f7 01       	movw	r30, r14
    b95c:	62 84       	ldd	r6, Z+10	; 0x0a
    b95e:	73 84       	ldd	r7, Z+11	; 0x0b
    b960:	84 84       	ldd	r8, Z+12	; 0x0c
    b962:	95 84       	ldd	r9, Z+13	; 0x0d
    b964:	61 14       	cp	r6, r1
    b966:	71 04       	cpc	r7, r1
    b968:	81 04       	cpc	r8, r1
    b96a:	91 04       	cpc	r9, r1
    b96c:	99 f3       	breq	.-26     	; 0xb954 <f_open+0x20a>
    b96e:	60 8a       	std	Z+16, r6	; 0x10
    b970:	71 8a       	std	Z+17, r7	; 0x11
    b972:	82 8a       	std	Z+18, r8	; 0x12
    b974:	93 8a       	std	Z+19, r9	; 0x13
    b976:	ef a5       	ldd	r30, Y+47	; 0x2f
    b978:	f8 a9       	ldd	r31, Y+48	; 0x30
    b97a:	21 84       	ldd	r2, Z+9	; 0x09
    b97c:	32 84       	ldd	r3, Z+10	; 0x0a
    b97e:	c1 01       	movw	r24, r2
    b980:	a0 e0       	ldi	r26, 0x00	; 0
    b982:	b0 e0       	ldi	r27, 0x00	; 0
    b984:	1c 01       	movw	r2, r24
    b986:	2d 01       	movw	r4, r26
    b988:	59 e0       	ldi	r21, 0x09	; 9
    b98a:	22 0c       	add	r2, r2
    b98c:	33 1c       	adc	r3, r3
    b98e:	44 1c       	adc	r4, r4
    b990:	55 1c       	adc	r5, r5
    b992:	5a 95       	dec	r21
    b994:	d1 f7       	brne	.-12     	; 0xb98a <f_open+0x240>
    b996:	f7 01       	movw	r30, r14
    b998:	46 81       	ldd	r20, Z+6	; 0x06
    b99a:	57 81       	ldd	r21, Z+7	; 0x07
    b99c:	60 85       	ldd	r22, Z+8	; 0x08
    b99e:	71 85       	ldd	r23, Z+9	; 0x09
    b9a0:	26 14       	cp	r2, r6
    b9a2:	37 04       	cpc	r3, r7
    b9a4:	48 04       	cpc	r4, r8
    b9a6:	59 04       	cpc	r5, r9
    b9a8:	f0 f4       	brcc	.+60     	; 0xb9e6 <f_open+0x29c>
    b9aa:	f7 01       	movw	r30, r14
    b9ac:	80 81       	ld	r24, Z
    b9ae:	91 81       	ldd	r25, Z+1	; 0x01
    b9b0:	0e 94 3e 51 	call	0xa27c	; 0xa27c <get_fat.isra.10>
    b9b4:	ab 01       	movw	r20, r22
    b9b6:	bc 01       	movw	r22, r24
    b9b8:	d4 01       	movw	r26, r8
    b9ba:	c3 01       	movw	r24, r6
    b9bc:	82 19       	sub	r24, r2
    b9be:	93 09       	sbc	r25, r3
    b9c0:	a4 09       	sbc	r26, r4
    b9c2:	b5 09       	sbc	r27, r5
    b9c4:	3c 01       	movw	r6, r24
    b9c6:	4d 01       	movw	r8, r26
    b9c8:	42 30       	cpi	r20, 0x02	; 2
    b9ca:	51 05       	cpc	r21, r1
    b9cc:	61 05       	cpc	r22, r1
    b9ce:	71 05       	cpc	r23, r1
    b9d0:	08 f4       	brcc	.+2      	; 0xb9d4 <f_open+0x28a>
    b9d2:	63 c0       	rjmp	.+198    	; 0xba9a <f_open+0x350>
    b9d4:	4f 3f       	cpi	r20, 0xFF	; 255
    b9d6:	ff ef       	ldi	r31, 0xFF	; 255
    b9d8:	5f 07       	cpc	r21, r31
    b9da:	6f 07       	cpc	r22, r31
    b9dc:	7f 07       	cpc	r23, r31
    b9de:	01 f7       	brne	.-64     	; 0xb9a0 <f_open+0x256>
    b9e0:	01 e0       	ldi	r16, 0x01	; 1
    b9e2:	10 e0       	ldi	r17, 0x00	; 0
    b9e4:	02 c0       	rjmp	.+4      	; 0xb9ea <f_open+0x2a0>
    b9e6:	00 e0       	ldi	r16, 0x00	; 0
    b9e8:	10 e0       	ldi	r17, 0x00	; 0
    b9ea:	f7 01       	movw	r30, r14
    b9ec:	44 8b       	std	Z+20, r20	; 0x14
    b9ee:	55 8b       	std	Z+21, r21	; 0x15
    b9f0:	66 8b       	std	Z+22, r22	; 0x16
    b9f2:	77 8b       	std	Z+23, r23	; 0x17
    b9f4:	01 15       	cp	r16, r1
    b9f6:	11 05       	cpc	r17, r1
    b9f8:	c9 f5       	brne	.+114    	; 0xba6c <f_open+0x322>
    b9fa:	d4 01       	movw	r26, r8
    b9fc:	c3 01       	movw	r24, r6
    b9fe:	91 70       	andi	r25, 0x01	; 1
    ba00:	aa 27       	eor	r26, r26
    ba02:	bb 27       	eor	r27, r27
    ba04:	89 2b       	or	r24, r25
    ba06:	8a 2b       	or	r24, r26
    ba08:	8b 2b       	or	r24, r27
    ba0a:	09 f4       	brne	.+2      	; 0xba0e <f_open+0x2c4>
    ba0c:	a3 cf       	rjmp	.-186    	; 0xb954 <f_open+0x20a>
    ba0e:	4f a4       	ldd	r4, Y+47	; 0x2f
    ba10:	58 a8       	ldd	r5, Y+48	; 0x30
    ba12:	c2 01       	movw	r24, r4
    ba14:	0e 94 4c 49 	call	0x9298	; 0x9298 <clst2sect>
    ba18:	61 15       	cp	r22, r1
    ba1a:	71 05       	cpc	r23, r1
    ba1c:	81 05       	cpc	r24, r1
    ba1e:	91 05       	cpc	r25, r1
    ba20:	19 f1       	breq	.+70     	; 0xba68 <f_open+0x31e>
    ba22:	94 01       	movw	r18, r8
    ba24:	83 01       	movw	r16, r6
    ba26:	49 e0       	ldi	r20, 0x09	; 9
    ba28:	36 95       	lsr	r19
    ba2a:	27 95       	ror	r18
    ba2c:	17 95       	ror	r17
    ba2e:	07 95       	ror	r16
    ba30:	4a 95       	dec	r20
    ba32:	d1 f7       	brne	.-12     	; 0xba28 <f_open+0x2de>
    ba34:	a9 01       	movw	r20, r18
    ba36:	98 01       	movw	r18, r16
    ba38:	26 0f       	add	r18, r22
    ba3a:	37 1f       	adc	r19, r23
    ba3c:	48 1f       	adc	r20, r24
    ba3e:	59 1f       	adc	r21, r25
    ba40:	f7 01       	movw	r30, r14
    ba42:	20 8f       	std	Z+24, r18	; 0x18
    ba44:	31 8f       	std	Z+25, r19	; 0x19
    ba46:	42 8f       	std	Z+26, r20	; 0x1a
    ba48:	53 8f       	std	Z+27, r21	; 0x1b
    ba4a:	01 e0       	ldi	r16, 0x01	; 1
    ba4c:	10 e0       	ldi	r17, 0x00	; 0
    ba4e:	b6 01       	movw	r22, r12
    ba50:	f2 01       	movw	r30, r4
    ba52:	81 81       	ldd	r24, Z+1	; 0x01
    ba54:	0e 94 b7 6b 	call	0xd76e	; 0xd76e <disk_read>
    ba58:	31 e0       	ldi	r19, 0x01	; 1
    ba5a:	20 e0       	ldi	r18, 0x00	; 0
    ba5c:	89 2b       	or	r24, r25
    ba5e:	09 f4       	brne	.+2      	; 0xba62 <f_open+0x318>
    ba60:	30 e0       	ldi	r19, 0x00	; 0
    ba62:	03 2f       	mov	r16, r19
    ba64:	12 2f       	mov	r17, r18
    ba66:	02 c0       	rjmp	.+4      	; 0xba6c <f_open+0x322>
    ba68:	02 e0       	ldi	r16, 0x02	; 2
    ba6a:	10 e0       	ldi	r17, 0x00	; 0
    ba6c:	c5 01       	movw	r24, r10
    ba6e:	0e 94 fe 6a 	call	0xd5fc	; 0xd5fc <ff_memfree>
    ba72:	01 15       	cp	r16, r1
    ba74:	11 05       	cpc	r17, r1
    ba76:	59 f0       	breq	.+22     	; 0xba8e <f_open+0x344>
    ba78:	01 c0       	rjmp	.+2      	; 0xba7c <f_open+0x332>
    ba7a:	8c 01       	movw	r16, r24
    ba7c:	f7 01       	movw	r30, r14
    ba7e:	11 82       	std	Z+1, r1	; 0x01
    ba80:	10 82       	st	Z, r1
    ba82:	c8 01       	movw	r24, r16
    ba84:	16 c0       	rjmp	.+44     	; 0xbab2 <f_open+0x368>
    ba86:	89 e0       	ldi	r24, 0x09	; 9
    ba88:	03 c0       	rjmp	.+6      	; 0xba90 <f_open+0x346>
    ba8a:	81 e1       	ldi	r24, 0x11	; 17
    ba8c:	01 c0       	rjmp	.+2      	; 0xba90 <f_open+0x346>
    ba8e:	80 e0       	ldi	r24, 0x00	; 0
    ba90:	90 e0       	ldi	r25, 0x00	; 0
    ba92:	0f c0       	rjmp	.+30     	; 0xbab2 <f_open+0x368>
    ba94:	08 e0       	ldi	r16, 0x08	; 8
    ba96:	10 e0       	ldi	r17, 0x00	; 0
    ba98:	08 c0       	rjmp	.+16     	; 0xbaaa <f_open+0x360>
    ba9a:	02 e0       	ldi	r16, 0x02	; 2
    ba9c:	10 e0       	ldi	r17, 0x00	; 0
    ba9e:	a5 cf       	rjmp	.-182    	; 0xb9ea <f_open+0x2a0>
    baa0:	04 e0       	ldi	r16, 0x04	; 4
    baa2:	10 e0       	ldi	r17, 0x00	; 0
    baa4:	02 c0       	rjmp	.+4      	; 0xbaaa <f_open+0x360>
    baa6:	07 e0       	ldi	r16, 0x07	; 7
    baa8:	10 e0       	ldi	r17, 0x00	; 0
    baaa:	c5 01       	movw	r24, r10
    baac:	0e 94 fe 6a 	call	0xd5fc	; 0xd5fc <ff_memfree>
    bab0:	e5 cf       	rjmp	.-54     	; 0xba7c <f_open+0x332>
    bab2:	e6 96       	adiw	r28, 0x36	; 54
    bab4:	e2 e1       	ldi	r30, 0x12	; 18
    bab6:	0c 94 35 e5 	jmp	0x1ca6a	; 0x1ca6a <__epilogue_restores__>

0000baba <f_read>:
    baba:	a6 e0       	ldi	r26, 0x06	; 6
    babc:	b0 e0       	ldi	r27, 0x00	; 0
    babe:	e3 e6       	ldi	r30, 0x63	; 99
    bac0:	fd e5       	ldi	r31, 0x5D	; 93
    bac2:	0c 94 19 e5 	jmp	0x1ca32	; 0x1ca32 <__prologue_saves__>
    bac6:	7c 01       	movw	r14, r24
    bac8:	4b 01       	movw	r8, r22
    baca:	5a 01       	movw	r10, r20
    bacc:	3e 83       	std	Y+6, r19	; 0x06
    bace:	2d 83       	std	Y+5, r18	; 0x05
    bad0:	f9 01       	movw	r30, r18
    bad2:	11 82       	std	Z+1, r1	; 0x01
    bad4:	10 82       	st	Z, r1
    bad6:	be 01       	movw	r22, r28
    bad8:	6f 5f       	subi	r22, 0xFF	; 255
    bada:	7f 4f       	sbci	r23, 0xFF	; 255
    badc:	0e 94 eb 49 	call	0x93d6	; 0x93d6 <validate>
    bae0:	00 97       	sbiw	r24, 0x00	; 0
    bae2:	09 f0       	breq	.+2      	; 0xbae6 <f_read+0x2c>
    bae4:	31 c1       	rjmp	.+610    	; 0xbd48 <f_read+0x28e>
    bae6:	f7 01       	movw	r30, r14
    bae8:	87 85       	ldd	r24, Z+15	; 0x0f
    baea:	90 e0       	ldi	r25, 0x00	; 0
    baec:	00 97       	sbiw	r24, 0x00	; 0
    baee:	09 f0       	breq	.+2      	; 0xbaf2 <f_read+0x38>
    baf0:	2b c1       	rjmp	.+598    	; 0xbd48 <f_read+0x28e>
    baf2:	86 85       	ldd	r24, Z+14	; 0x0e
    baf4:	80 ff       	sbrs	r24, 0
    baf6:	26 c1       	rjmp	.+588    	; 0xbd44 <f_read+0x28a>
    baf8:	82 85       	ldd	r24, Z+10	; 0x0a
    bafa:	93 85       	ldd	r25, Z+11	; 0x0b
    bafc:	a4 85       	ldd	r26, Z+12	; 0x0c
    bafe:	b5 85       	ldd	r27, Z+13	; 0x0d
    bb00:	40 89       	ldd	r20, Z+16	; 0x10
    bb02:	51 89       	ldd	r21, Z+17	; 0x11
    bb04:	62 89       	ldd	r22, Z+18	; 0x12
    bb06:	73 89       	ldd	r23, Z+19	; 0x13
    bb08:	84 1b       	sub	r24, r20
    bb0a:	95 0b       	sbc	r25, r21
    bb0c:	a6 0b       	sbc	r26, r22
    bb0e:	b7 0b       	sbc	r27, r23
    bb10:	a5 01       	movw	r20, r10
    bb12:	60 e0       	ldi	r22, 0x00	; 0
    bb14:	70 e0       	ldi	r23, 0x00	; 0
    bb16:	84 17       	cp	r24, r20
    bb18:	95 07       	cpc	r25, r21
    bb1a:	a6 07       	cpc	r26, r22
    bb1c:	b7 07       	cpc	r27, r23
    bb1e:	08 f4       	brcc	.+2      	; 0xbb22 <f_read+0x68>
    bb20:	5c 01       	movw	r10, r24
    bb22:	17 01       	movw	r2, r14
    bb24:	f4 e2       	ldi	r31, 0x24	; 36
    bb26:	2f 0e       	add	r2, r31
    bb28:	31 1c       	adc	r3, r1
    bb2a:	a1 14       	cp	r10, r1
    bb2c:	b1 04       	cpc	r11, r1
    bb2e:	09 f4       	brne	.+2      	; 0xbb32 <f_read+0x78>
    bb30:	07 c1       	rjmp	.+526    	; 0xbd40 <f_read+0x286>
    bb32:	f7 01       	movw	r30, r14
    bb34:	40 89       	ldd	r20, Z+16	; 0x10
    bb36:	51 89       	ldd	r21, Z+17	; 0x11
    bb38:	62 89       	ldd	r22, Z+18	; 0x12
    bb3a:	73 89       	ldd	r23, Z+19	; 0x13
    bb3c:	db 01       	movw	r26, r22
    bb3e:	ca 01       	movw	r24, r20
    bb40:	91 70       	andi	r25, 0x01	; 1
    bb42:	aa 27       	eor	r26, r26
    bb44:	bb 27       	eor	r27, r27
    bb46:	89 2b       	or	r24, r25
    bb48:	8a 2b       	or	r24, r26
    bb4a:	8b 2b       	or	r24, r27
    bb4c:	09 f0       	breq	.+2      	; 0xbb50 <f_read+0x96>
    bb4e:	cb c0       	rjmp	.+406    	; 0xbce6 <f_read+0x22c>
    bb50:	e9 81       	ldd	r30, Y+1	; 0x01
    bb52:	fa 81       	ldd	r31, Y+2	; 0x02
    bb54:	01 85       	ldd	r16, Z+9	; 0x09
    bb56:	12 85       	ldd	r17, Z+10	; 0x0a
    bb58:	01 50       	subi	r16, 0x01	; 1
    bb5a:	11 09       	sbc	r17, r1
    bb5c:	db 01       	movw	r26, r22
    bb5e:	ca 01       	movw	r24, r20
    bb60:	e9 e0       	ldi	r30, 0x09	; 9
    bb62:	b6 95       	lsr	r27
    bb64:	a7 95       	ror	r26
    bb66:	97 95       	ror	r25
    bb68:	87 95       	ror	r24
    bb6a:	ea 95       	dec	r30
    bb6c:	d1 f7       	brne	.-12     	; 0xbb62 <f_read+0xa8>
    bb6e:	08 23       	and	r16, r24
    bb70:	19 23       	and	r17, r25
    bb72:	01 15       	cp	r16, r1
    bb74:	11 05       	cpc	r17, r1
    bb76:	91 f5       	brne	.+100    	; 0xbbdc <f_read+0x122>
    bb78:	f7 01       	movw	r30, r14
    bb7a:	41 15       	cp	r20, r1
    bb7c:	51 05       	cpc	r21, r1
    bb7e:	61 05       	cpc	r22, r1
    bb80:	71 05       	cpc	r23, r1
    bb82:	29 f4       	brne	.+10     	; 0xbb8e <f_read+0xd4>
    bb84:	66 81       	ldd	r22, Z+6	; 0x06
    bb86:	77 81       	ldd	r23, Z+7	; 0x07
    bb88:	80 85       	ldd	r24, Z+8	; 0x08
    bb8a:	91 85       	ldd	r25, Z+9	; 0x09
    bb8c:	11 c0       	rjmp	.+34     	; 0xbbb0 <f_read+0xf6>
    bb8e:	82 a1       	ldd	r24, Z+34	; 0x22
    bb90:	93 a1       	ldd	r25, Z+35	; 0x23
    bb92:	89 2b       	or	r24, r25
    bb94:	21 f0       	breq	.+8      	; 0xbb9e <f_read+0xe4>
    bb96:	c7 01       	movw	r24, r14
    bb98:	0e 94 74 49 	call	0x92e8	; 0x92e8 <clmt_clust>
    bb9c:	09 c0       	rjmp	.+18     	; 0xbbb0 <f_read+0xf6>
    bb9e:	f7 01       	movw	r30, r14
    bba0:	44 89       	ldd	r20, Z+20	; 0x14
    bba2:	55 89       	ldd	r21, Z+21	; 0x15
    bba4:	66 89       	ldd	r22, Z+22	; 0x16
    bba6:	77 89       	ldd	r23, Z+23	; 0x17
    bba8:	80 81       	ld	r24, Z
    bbaa:	91 81       	ldd	r25, Z+1	; 0x01
    bbac:	0e 94 3e 51 	call	0xa27c	; 0xa27c <get_fat.isra.10>
    bbb0:	62 30       	cpi	r22, 0x02	; 2
    bbb2:	71 05       	cpc	r23, r1
    bbb4:	81 05       	cpc	r24, r1
    bbb6:	91 05       	cpc	r25, r1
    bbb8:	10 f4       	brcc	.+4      	; 0xbbbe <f_read+0x104>
    bbba:	82 e0       	ldi	r24, 0x02	; 2
    bbbc:	07 c0       	rjmp	.+14     	; 0xbbcc <f_read+0x112>
    bbbe:	6f 3f       	cpi	r22, 0xFF	; 255
    bbc0:	ff ef       	ldi	r31, 0xFF	; 255
    bbc2:	7f 07       	cpc	r23, r31
    bbc4:	8f 07       	cpc	r24, r31
    bbc6:	9f 07       	cpc	r25, r31
    bbc8:	21 f4       	brne	.+8      	; 0xbbd2 <f_read+0x118>
    bbca:	81 e0       	ldi	r24, 0x01	; 1
    bbcc:	f7 01       	movw	r30, r14
    bbce:	87 87       	std	Z+15, r24	; 0x0f
    bbd0:	ba c0       	rjmp	.+372    	; 0xbd46 <f_read+0x28c>
    bbd2:	f7 01       	movw	r30, r14
    bbd4:	64 8b       	std	Z+20, r22	; 0x14
    bbd6:	75 8b       	std	Z+21, r23	; 0x15
    bbd8:	86 8b       	std	Z+22, r24	; 0x16
    bbda:	97 8b       	std	Z+23, r25	; 0x17
    bbdc:	89 81       	ldd	r24, Y+1	; 0x01
    bbde:	9a 81       	ldd	r25, Y+2	; 0x02
    bbe0:	9c 83       	std	Y+4, r25	; 0x04
    bbe2:	8b 83       	std	Y+3, r24	; 0x03
    bbe4:	f7 01       	movw	r30, r14
    bbe6:	44 89       	ldd	r20, Z+20	; 0x14
    bbe8:	55 89       	ldd	r21, Z+21	; 0x15
    bbea:	66 89       	ldd	r22, Z+22	; 0x16
    bbec:	77 89       	ldd	r23, Z+23	; 0x17
    bbee:	0e 94 4c 49 	call	0x9298	; 0x9298 <clst2sect>
    bbf2:	61 15       	cp	r22, r1
    bbf4:	71 05       	cpc	r23, r1
    bbf6:	81 05       	cpc	r24, r1
    bbf8:	91 05       	cpc	r25, r1
    bbfa:	f9 f2       	breq	.-66     	; 0xbbba <f_read+0x100>
    bbfc:	2b 01       	movw	r4, r22
    bbfe:	3c 01       	movw	r6, r24
    bc00:	40 0e       	add	r4, r16
    bc02:	51 1e       	adc	r5, r17
    bc04:	61 1c       	adc	r6, r1
    bc06:	71 1c       	adc	r7, r1
    bc08:	65 01       	movw	r12, r10
    bc0a:	cd 2c       	mov	r12, r13
    bc0c:	dd 24       	eor	r13, r13
    bc0e:	c6 94       	lsr	r12
    bc10:	c1 14       	cp	r12, r1
    bc12:	d1 04       	cpc	r13, r1
    bc14:	d1 f1       	breq	.+116    	; 0xbc8a <f_read+0x1d0>
    bc16:	eb 81       	ldd	r30, Y+3	; 0x03
    bc18:	fc 81       	ldd	r31, Y+4	; 0x04
    bc1a:	81 85       	ldd	r24, Z+9	; 0x09
    bc1c:	92 85       	ldd	r25, Z+10	; 0x0a
    bc1e:	98 01       	movw	r18, r16
    bc20:	2c 0d       	add	r18, r12
    bc22:	3d 1d       	adc	r19, r13
    bc24:	82 17       	cp	r24, r18
    bc26:	93 07       	cpc	r25, r19
    bc28:	18 f4       	brcc	.+6      	; 0xbc30 <f_read+0x176>
    bc2a:	6c 01       	movw	r12, r24
    bc2c:	c0 1a       	sub	r12, r16
    bc2e:	d1 0a       	sbc	r13, r17
    bc30:	86 01       	movw	r16, r12
    bc32:	a3 01       	movw	r20, r6
    bc34:	92 01       	movw	r18, r4
    bc36:	b4 01       	movw	r22, r8
    bc38:	eb 81       	ldd	r30, Y+3	; 0x03
    bc3a:	fc 81       	ldd	r31, Y+4	; 0x04
    bc3c:	81 81       	ldd	r24, Z+1	; 0x01
    bc3e:	0e 94 b7 6b 	call	0xd76e	; 0xd76e <disk_read>
    bc42:	89 2b       	or	r24, r25
    bc44:	11 f6       	brne	.-124    	; 0xbbca <f_read+0x110>
    bc46:	f7 01       	movw	r30, r14
    bc48:	86 85       	ldd	r24, Z+14	; 0x0e
    bc4a:	87 ff       	sbrs	r24, 7
    bc4c:	1a c0       	rjmp	.+52     	; 0xbc82 <f_read+0x1c8>
    bc4e:	80 8d       	ldd	r24, Z+24	; 0x18
    bc50:	91 8d       	ldd	r25, Z+25	; 0x19
    bc52:	a2 8d       	ldd	r26, Z+26	; 0x1a
    bc54:	b3 8d       	ldd	r27, Z+27	; 0x1b
    bc56:	84 19       	sub	r24, r4
    bc58:	95 09       	sbc	r25, r5
    bc5a:	a6 09       	sbc	r26, r6
    bc5c:	b7 09       	sbc	r27, r7
    bc5e:	a6 01       	movw	r20, r12
    bc60:	60 e0       	ldi	r22, 0x00	; 0
    bc62:	70 e0       	ldi	r23, 0x00	; 0
    bc64:	84 17       	cp	r24, r20
    bc66:	95 07       	cpc	r25, r21
    bc68:	a6 07       	cpc	r26, r22
    bc6a:	b7 07       	cpc	r27, r23
    bc6c:	50 f4       	brcc	.+20     	; 0xbc82 <f_read+0x1c8>
    bc6e:	98 2f       	mov	r25, r24
    bc70:	88 27       	eor	r24, r24
    bc72:	99 0f       	add	r25, r25
    bc74:	40 e0       	ldi	r20, 0x00	; 0
    bc76:	52 e0       	ldi	r21, 0x02	; 2
    bc78:	b1 01       	movw	r22, r2
    bc7a:	88 0d       	add	r24, r8
    bc7c:	99 1d       	adc	r25, r9
    bc7e:	0e 94 17 4a 	call	0x942e	; 0x942e <mem_cpy.part.0>
    bc82:	dc 2c       	mov	r13, r12
    bc84:	cc 24       	eor	r12, r12
    bc86:	dd 0c       	add	r13, r13
    bc88:	41 c0       	rjmp	.+130    	; 0xbd0c <f_read+0x252>
    bc8a:	f7 01       	movw	r30, r14
    bc8c:	20 8d       	ldd	r18, Z+24	; 0x18
    bc8e:	31 8d       	ldd	r19, Z+25	; 0x19
    bc90:	42 8d       	ldd	r20, Z+26	; 0x1a
    bc92:	53 8d       	ldd	r21, Z+27	; 0x1b
    bc94:	42 16       	cp	r4, r18
    bc96:	53 06       	cpc	r5, r19
    bc98:	64 06       	cpc	r6, r20
    bc9a:	75 06       	cpc	r7, r21
    bc9c:	f9 f0       	breq	.+62     	; 0xbcdc <f_read+0x222>
    bc9e:	86 85       	ldd	r24, Z+14	; 0x0e
    bca0:	87 ff       	sbrs	r24, 7
    bca2:	0f c0       	rjmp	.+30     	; 0xbcc2 <f_read+0x208>
    bca4:	01 e0       	ldi	r16, 0x01	; 1
    bca6:	10 e0       	ldi	r17, 0x00	; 0
    bca8:	b1 01       	movw	r22, r2
    bcaa:	eb 81       	ldd	r30, Y+3	; 0x03
    bcac:	fc 81       	ldd	r31, Y+4	; 0x04
    bcae:	81 81       	ldd	r24, Z+1	; 0x01
    bcb0:	0e 94 c7 6b 	call	0xd78e	; 0xd78e <disk_write>
    bcb4:	89 2b       	or	r24, r25
    bcb6:	09 f0       	breq	.+2      	; 0xbcba <f_read+0x200>
    bcb8:	88 cf       	rjmp	.-240    	; 0xbbca <f_read+0x110>
    bcba:	f7 01       	movw	r30, r14
    bcbc:	86 85       	ldd	r24, Z+14	; 0x0e
    bcbe:	8f 77       	andi	r24, 0x7F	; 127
    bcc0:	86 87       	std	Z+14, r24	; 0x0e
    bcc2:	e9 81       	ldd	r30, Y+1	; 0x01
    bcc4:	fa 81       	ldd	r31, Y+2	; 0x02
    bcc6:	01 e0       	ldi	r16, 0x01	; 1
    bcc8:	10 e0       	ldi	r17, 0x00	; 0
    bcca:	a3 01       	movw	r20, r6
    bccc:	92 01       	movw	r18, r4
    bcce:	b1 01       	movw	r22, r2
    bcd0:	81 81       	ldd	r24, Z+1	; 0x01
    bcd2:	0e 94 b7 6b 	call	0xd76e	; 0xd76e <disk_read>
    bcd6:	89 2b       	or	r24, r25
    bcd8:	09 f0       	breq	.+2      	; 0xbcdc <f_read+0x222>
    bcda:	77 cf       	rjmp	.-274    	; 0xbbca <f_read+0x110>
    bcdc:	f7 01       	movw	r30, r14
    bcde:	40 8e       	std	Z+24, r4	; 0x18
    bce0:	51 8e       	std	Z+25, r5	; 0x19
    bce2:	62 8e       	std	Z+26, r6	; 0x1a
    bce4:	73 8e       	std	Z+27, r7	; 0x1b
    bce6:	f7 01       	movw	r30, r14
    bce8:	60 89       	ldd	r22, Z+16	; 0x10
    bcea:	71 89       	ldd	r23, Z+17	; 0x11
    bcec:	71 70       	andi	r23, 0x01	; 1
    bcee:	80 e0       	ldi	r24, 0x00	; 0
    bcf0:	92 e0       	ldi	r25, 0x02	; 2
    bcf2:	86 1b       	sub	r24, r22
    bcf4:	97 0b       	sbc	r25, r23
    bcf6:	65 01       	movw	r12, r10
    bcf8:	8a 15       	cp	r24, r10
    bcfa:	9b 05       	cpc	r25, r11
    bcfc:	08 f4       	brcc	.+2      	; 0xbd00 <f_read+0x246>
    bcfe:	6c 01       	movw	r12, r24
    bd00:	62 0d       	add	r22, r2
    bd02:	73 1d       	adc	r23, r3
    bd04:	a6 01       	movw	r20, r12
    bd06:	c4 01       	movw	r24, r8
    bd08:	0e 94 17 4a 	call	0x942e	; 0x942e <mem_cpy.part.0>
    bd0c:	ac 18       	sub	r10, r12
    bd0e:	bd 08       	sbc	r11, r13
    bd10:	ed 81       	ldd	r30, Y+5	; 0x05
    bd12:	fe 81       	ldd	r31, Y+6	; 0x06
    bd14:	80 81       	ld	r24, Z
    bd16:	91 81       	ldd	r25, Z+1	; 0x01
    bd18:	8c 0d       	add	r24, r12
    bd1a:	9d 1d       	adc	r25, r13
    bd1c:	91 83       	std	Z+1, r25	; 0x01
    bd1e:	80 83       	st	Z, r24
    bd20:	8c 0c       	add	r8, r12
    bd22:	9d 1c       	adc	r9, r13
    bd24:	f7 01       	movw	r30, r14
    bd26:	80 89       	ldd	r24, Z+16	; 0x10
    bd28:	91 89       	ldd	r25, Z+17	; 0x11
    bd2a:	a2 89       	ldd	r26, Z+18	; 0x12
    bd2c:	b3 89       	ldd	r27, Z+19	; 0x13
    bd2e:	8c 0d       	add	r24, r12
    bd30:	9d 1d       	adc	r25, r13
    bd32:	a1 1d       	adc	r26, r1
    bd34:	b1 1d       	adc	r27, r1
    bd36:	80 8b       	std	Z+16, r24	; 0x10
    bd38:	91 8b       	std	Z+17, r25	; 0x11
    bd3a:	a2 8b       	std	Z+18, r26	; 0x12
    bd3c:	b3 8b       	std	Z+19, r27	; 0x13
    bd3e:	f5 ce       	rjmp	.-534    	; 0xbb2a <f_read+0x70>
    bd40:	80 e0       	ldi	r24, 0x00	; 0
    bd42:	01 c0       	rjmp	.+2      	; 0xbd46 <f_read+0x28c>
    bd44:	87 e0       	ldi	r24, 0x07	; 7
    bd46:	90 e0       	ldi	r25, 0x00	; 0
    bd48:	26 96       	adiw	r28, 0x06	; 6
    bd4a:	e2 e1       	ldi	r30, 0x12	; 18
    bd4c:	0c 94 35 e5 	jmp	0x1ca6a	; 0x1ca6a <__epilogue_restores__>

0000bd50 <f_write>:
    bd50:	a8 e0       	ldi	r26, 0x08	; 8
    bd52:	b0 e0       	ldi	r27, 0x00	; 0
    bd54:	ee ea       	ldi	r30, 0xAE	; 174
    bd56:	fe e5       	ldi	r31, 0x5E	; 94
    bd58:	0c 94 19 e5 	jmp	0x1ca32	; 0x1ca32 <__prologue_saves__>
    bd5c:	7c 01       	movw	r14, r24
    bd5e:	3b 01       	movw	r6, r22
    bd60:	5a 01       	movw	r10, r20
    bd62:	38 87       	std	Y+8, r19	; 0x08
    bd64:	2f 83       	std	Y+7, r18	; 0x07
    bd66:	f9 01       	movw	r30, r18
    bd68:	11 82       	std	Z+1, r1	; 0x01
    bd6a:	10 82       	st	Z, r1
    bd6c:	be 01       	movw	r22, r28
    bd6e:	6f 5f       	subi	r22, 0xFF	; 255
    bd70:	7f 4f       	sbci	r23, 0xFF	; 255
    bd72:	0e 94 eb 49 	call	0x93d6	; 0x93d6 <validate>
    bd76:	00 97       	sbiw	r24, 0x00	; 0
    bd78:	09 f0       	breq	.+2      	; 0xbd7c <f_write+0x2c>
    bd7a:	7d c1       	rjmp	.+762    	; 0xc076 <f_write+0x326>
    bd7c:	f7 01       	movw	r30, r14
    bd7e:	87 85       	ldd	r24, Z+15	; 0x0f
    bd80:	90 e0       	ldi	r25, 0x00	; 0
    bd82:	00 97       	sbiw	r24, 0x00	; 0
    bd84:	09 f0       	breq	.+2      	; 0xbd88 <f_write+0x38>
    bd86:	77 c1       	rjmp	.+750    	; 0xc076 <f_write+0x326>
    bd88:	86 85       	ldd	r24, Z+14	; 0x0e
    bd8a:	81 ff       	sbrs	r24, 1
    bd8c:	72 c1       	rjmp	.+740    	; 0xc072 <f_write+0x322>
    bd8e:	80 89       	ldd	r24, Z+16	; 0x10
    bd90:	91 89       	ldd	r25, Z+17	; 0x11
    bd92:	a2 89       	ldd	r26, Z+18	; 0x12
    bd94:	b3 89       	ldd	r27, Z+19	; 0x13
    bd96:	ac 01       	movw	r20, r24
    bd98:	bd 01       	movw	r22, r26
    bd9a:	4a 0d       	add	r20, r10
    bd9c:	5b 1d       	adc	r21, r11
    bd9e:	61 1d       	adc	r22, r1
    bda0:	71 1d       	adc	r23, r1
    bda2:	48 17       	cp	r20, r24
    bda4:	59 07       	cpc	r21, r25
    bda6:	6a 07       	cpc	r22, r26
    bda8:	7b 07       	cpc	r23, r27
    bdaa:	18 f4       	brcc	.+6      	; 0xbdb2 <f_write+0x62>
    bdac:	5c 01       	movw	r10, r24
    bdae:	a0 94       	com	r10
    bdb0:	b0 94       	com	r11
    bdb2:	97 01       	movw	r18, r14
    bdb4:	2c 5d       	subi	r18, 0xDC	; 220
    bdb6:	3f 4f       	sbci	r19, 0xFF	; 255
    bdb8:	3e 83       	std	Y+6, r19	; 0x06
    bdba:	2d 83       	std	Y+5, r18	; 0x05
    bdbc:	a1 14       	cp	r10, r1
    bdbe:	b1 04       	cpc	r11, r1
    bdc0:	09 f4       	brne	.+2      	; 0xbdc4 <f_write+0x74>
    bdc2:	4d c0       	rjmp	.+154    	; 0xbe5e <f_write+0x10e>
    bdc4:	f7 01       	movw	r30, r14
    bdc6:	40 89       	ldd	r20, Z+16	; 0x10
    bdc8:	51 89       	ldd	r21, Z+17	; 0x11
    bdca:	62 89       	ldd	r22, Z+18	; 0x12
    bdcc:	73 89       	ldd	r23, Z+19	; 0x13
    bdce:	db 01       	movw	r26, r22
    bdd0:	ca 01       	movw	r24, r20
    bdd2:	91 70       	andi	r25, 0x01	; 1
    bdd4:	aa 27       	eor	r26, r26
    bdd6:	bb 27       	eor	r27, r27
    bdd8:	89 2b       	or	r24, r25
    bdda:	8a 2b       	or	r24, r26
    bddc:	8b 2b       	or	r24, r27
    bdde:	09 f0       	breq	.+2      	; 0xbde2 <f_write+0x92>
    bde0:	05 c1       	rjmp	.+522    	; 0xbfec <f_write+0x29c>
    bde2:	e9 81       	ldd	r30, Y+1	; 0x01
    bde4:	fa 81       	ldd	r31, Y+2	; 0x02
    bde6:	81 84       	ldd	r8, Z+9	; 0x09
    bde8:	92 84       	ldd	r9, Z+10	; 0x0a
    bdea:	f1 e0       	ldi	r31, 0x01	; 1
    bdec:	8f 1a       	sub	r8, r31
    bdee:	91 08       	sbc	r9, r1
    bdf0:	db 01       	movw	r26, r22
    bdf2:	ca 01       	movw	r24, r20
    bdf4:	e9 e0       	ldi	r30, 0x09	; 9
    bdf6:	b6 95       	lsr	r27
    bdf8:	a7 95       	ror	r26
    bdfa:	97 95       	ror	r25
    bdfc:	87 95       	ror	r24
    bdfe:	ea 95       	dec	r30
    be00:	d1 f7       	brne	.-12     	; 0xbdf6 <f_write+0xa6>
    be02:	88 22       	and	r8, r24
    be04:	99 22       	and	r9, r25
    be06:	81 14       	cp	r8, r1
    be08:	91 04       	cpc	r9, r1
    be0a:	09 f0       	breq	.+2      	; 0xbe0e <f_write+0xbe>
    be0c:	51 c0       	rjmp	.+162    	; 0xbeb0 <f_write+0x160>
    be0e:	f7 01       	movw	r30, r14
    be10:	41 15       	cp	r20, r1
    be12:	51 05       	cpc	r21, r1
    be14:	61 05       	cpc	r22, r1
    be16:	71 05       	cpc	r23, r1
    be18:	69 f4       	brne	.+26     	; 0xbe34 <f_write+0xe4>
    be1a:	66 81       	ldd	r22, Z+6	; 0x06
    be1c:	77 81       	ldd	r23, Z+7	; 0x07
    be1e:	80 85       	ldd	r24, Z+8	; 0x08
    be20:	91 85       	ldd	r25, Z+9	; 0x09
    be22:	61 15       	cp	r22, r1
    be24:	71 05       	cpc	r23, r1
    be26:	81 05       	cpc	r24, r1
    be28:	91 05       	cpc	r25, r1
    be2a:	f9 f4       	brne	.+62     	; 0xbe6a <f_write+0x11a>
    be2c:	40 e0       	ldi	r20, 0x00	; 0
    be2e:	50 e0       	ldi	r21, 0x00	; 0
    be30:	ba 01       	movw	r22, r20
    be32:	0d c0       	rjmp	.+26     	; 0xbe4e <f_write+0xfe>
    be34:	82 a1       	ldd	r24, Z+34	; 0x22
    be36:	93 a1       	ldd	r25, Z+35	; 0x23
    be38:	89 2b       	or	r24, r25
    be3a:	21 f0       	breq	.+8      	; 0xbe44 <f_write+0xf4>
    be3c:	c7 01       	movw	r24, r14
    be3e:	0e 94 74 49 	call	0x92e8	; 0x92e8 <clmt_clust>
    be42:	08 c0       	rjmp	.+16     	; 0xbe54 <f_write+0x104>
    be44:	f7 01       	movw	r30, r14
    be46:	44 89       	ldd	r20, Z+20	; 0x14
    be48:	55 89       	ldd	r21, Z+21	; 0x15
    be4a:	66 89       	ldd	r22, Z+22	; 0x16
    be4c:	77 89       	ldd	r23, Z+23	; 0x17
    be4e:	c7 01       	movw	r24, r14
    be50:	0e 94 b3 52 	call	0xa566	; 0xa566 <create_chain>
    be54:	61 15       	cp	r22, r1
    be56:	71 05       	cpc	r23, r1
    be58:	81 05       	cpc	r24, r1
    be5a:	91 05       	cpc	r25, r1
    be5c:	31 f4       	brne	.+12     	; 0xbe6a <f_write+0x11a>
    be5e:	f7 01       	movw	r30, r14
    be60:	86 85       	ldd	r24, Z+14	; 0x0e
    be62:	80 64       	ori	r24, 0x40	; 64
    be64:	86 87       	std	Z+14, r24	; 0x0e
    be66:	80 e0       	ldi	r24, 0x00	; 0
    be68:	05 c1       	rjmp	.+522    	; 0xc074 <f_write+0x324>
    be6a:	61 30       	cpi	r22, 0x01	; 1
    be6c:	71 05       	cpc	r23, r1
    be6e:	81 05       	cpc	r24, r1
    be70:	91 05       	cpc	r25, r1
    be72:	11 f4       	brne	.+4      	; 0xbe78 <f_write+0x128>
    be74:	82 e0       	ldi	r24, 0x02	; 2
    be76:	07 c0       	rjmp	.+14     	; 0xbe86 <f_write+0x136>
    be78:	6f 3f       	cpi	r22, 0xFF	; 255
    be7a:	ff ef       	ldi	r31, 0xFF	; 255
    be7c:	7f 07       	cpc	r23, r31
    be7e:	8f 07       	cpc	r24, r31
    be80:	9f 07       	cpc	r25, r31
    be82:	21 f4       	brne	.+8      	; 0xbe8c <f_write+0x13c>
    be84:	81 e0       	ldi	r24, 0x01	; 1
    be86:	f7 01       	movw	r30, r14
    be88:	87 87       	std	Z+15, r24	; 0x0f
    be8a:	f4 c0       	rjmp	.+488    	; 0xc074 <f_write+0x324>
    be8c:	f7 01       	movw	r30, r14
    be8e:	64 8b       	std	Z+20, r22	; 0x14
    be90:	75 8b       	std	Z+21, r23	; 0x15
    be92:	86 8b       	std	Z+22, r24	; 0x16
    be94:	97 8b       	std	Z+23, r25	; 0x17
    be96:	06 81       	ldd	r16, Z+6	; 0x06
    be98:	17 81       	ldd	r17, Z+7	; 0x07
    be9a:	20 85       	ldd	r18, Z+8	; 0x08
    be9c:	31 85       	ldd	r19, Z+9	; 0x09
    be9e:	01 15       	cp	r16, r1
    bea0:	11 05       	cpc	r17, r1
    bea2:	21 05       	cpc	r18, r1
    bea4:	31 05       	cpc	r19, r1
    bea6:	21 f4       	brne	.+8      	; 0xbeb0 <f_write+0x160>
    bea8:	66 83       	std	Z+6, r22	; 0x06
    beaa:	77 83       	std	Z+7, r23	; 0x07
    beac:	80 87       	std	Z+8, r24	; 0x08
    beae:	91 87       	std	Z+9, r25	; 0x09
    beb0:	f7 01       	movw	r30, r14
    beb2:	86 85       	ldd	r24, Z+14	; 0x0e
    beb4:	87 ff       	sbrs	r24, 7
    beb6:	13 c0       	rjmp	.+38     	; 0xbede <f_write+0x18e>
    beb8:	20 8d       	ldd	r18, Z+24	; 0x18
    beba:	31 8d       	ldd	r19, Z+25	; 0x19
    bebc:	42 8d       	ldd	r20, Z+26	; 0x1a
    bebe:	53 8d       	ldd	r21, Z+27	; 0x1b
    bec0:	e9 81       	ldd	r30, Y+1	; 0x01
    bec2:	fa 81       	ldd	r31, Y+2	; 0x02
    bec4:	01 e0       	ldi	r16, 0x01	; 1
    bec6:	10 e0       	ldi	r17, 0x00	; 0
    bec8:	6d 81       	ldd	r22, Y+5	; 0x05
    beca:	7e 81       	ldd	r23, Y+6	; 0x06
    becc:	81 81       	ldd	r24, Z+1	; 0x01
    bece:	0e 94 c7 6b 	call	0xd78e	; 0xd78e <disk_write>
    bed2:	89 2b       	or	r24, r25
    bed4:	b9 f6       	brne	.-82     	; 0xbe84 <f_write+0x134>
    bed6:	f7 01       	movw	r30, r14
    bed8:	86 85       	ldd	r24, Z+14	; 0x0e
    beda:	8f 77       	andi	r24, 0x7F	; 127
    bedc:	86 87       	std	Z+14, r24	; 0x0e
    bede:	29 81       	ldd	r18, Y+1	; 0x01
    bee0:	3a 81       	ldd	r19, Y+2	; 0x02
    bee2:	3c 83       	std	Y+4, r19	; 0x04
    bee4:	2b 83       	std	Y+3, r18	; 0x03
    bee6:	f7 01       	movw	r30, r14
    bee8:	44 89       	ldd	r20, Z+20	; 0x14
    beea:	55 89       	ldd	r21, Z+21	; 0x15
    beec:	66 89       	ldd	r22, Z+22	; 0x16
    beee:	77 89       	ldd	r23, Z+23	; 0x17
    bef0:	c9 01       	movw	r24, r18
    bef2:	0e 94 4c 49 	call	0x9298	; 0x9298 <clst2sect>
    bef6:	61 15       	cp	r22, r1
    bef8:	71 05       	cpc	r23, r1
    befa:	81 05       	cpc	r24, r1
    befc:	91 05       	cpc	r25, r1
    befe:	09 f4       	brne	.+2      	; 0xbf02 <f_write+0x1b2>
    bf00:	b9 cf       	rjmp	.-142    	; 0xbe74 <f_write+0x124>
    bf02:	1b 01       	movw	r2, r22
    bf04:	2c 01       	movw	r4, r24
    bf06:	28 0c       	add	r2, r8
    bf08:	39 1c       	adc	r3, r9
    bf0a:	41 1c       	adc	r4, r1
    bf0c:	51 1c       	adc	r5, r1
    bf0e:	65 01       	movw	r12, r10
    bf10:	cd 2c       	mov	r12, r13
    bf12:	dd 24       	eor	r13, r13
    bf14:	c6 94       	lsr	r12
    bf16:	c1 14       	cp	r12, r1
    bf18:	d1 04       	cpc	r13, r1
    bf1a:	f1 f1       	breq	.+124    	; 0xbf98 <f_write+0x248>
    bf1c:	eb 81       	ldd	r30, Y+3	; 0x03
    bf1e:	fc 81       	ldd	r31, Y+4	; 0x04
    bf20:	81 85       	ldd	r24, Z+9	; 0x09
    bf22:	92 85       	ldd	r25, Z+10	; 0x0a
    bf24:	94 01       	movw	r18, r8
    bf26:	2c 0d       	add	r18, r12
    bf28:	3d 1d       	adc	r19, r13
    bf2a:	82 17       	cp	r24, r18
    bf2c:	93 07       	cpc	r25, r19
    bf2e:	18 f4       	brcc	.+6      	; 0xbf36 <f_write+0x1e6>
    bf30:	6c 01       	movw	r12, r24
    bf32:	c8 18       	sub	r12, r8
    bf34:	d9 08       	sbc	r13, r9
    bf36:	86 01       	movw	r16, r12
    bf38:	a2 01       	movw	r20, r4
    bf3a:	91 01       	movw	r18, r2
    bf3c:	b3 01       	movw	r22, r6
    bf3e:	eb 81       	ldd	r30, Y+3	; 0x03
    bf40:	fc 81       	ldd	r31, Y+4	; 0x04
    bf42:	81 81       	ldd	r24, Z+1	; 0x01
    bf44:	0e 94 c7 6b 	call	0xd78e	; 0xd78e <disk_write>
    bf48:	89 2b       	or	r24, r25
    bf4a:	09 f0       	breq	.+2      	; 0xbf4e <f_write+0x1fe>
    bf4c:	9b cf       	rjmp	.-202    	; 0xbe84 <f_write+0x134>
    bf4e:	f7 01       	movw	r30, r14
    bf50:	80 8d       	ldd	r24, Z+24	; 0x18
    bf52:	91 8d       	ldd	r25, Z+25	; 0x19
    bf54:	a2 8d       	ldd	r26, Z+26	; 0x1a
    bf56:	b3 8d       	ldd	r27, Z+27	; 0x1b
    bf58:	82 19       	sub	r24, r2
    bf5a:	93 09       	sbc	r25, r3
    bf5c:	a4 09       	sbc	r26, r4
    bf5e:	b5 09       	sbc	r27, r5
    bf60:	a6 01       	movw	r20, r12
    bf62:	60 e0       	ldi	r22, 0x00	; 0
    bf64:	70 e0       	ldi	r23, 0x00	; 0
    bf66:	84 17       	cp	r24, r20
    bf68:	95 07       	cpc	r25, r21
    bf6a:	a6 07       	cpc	r26, r22
    bf6c:	b7 07       	cpc	r27, r23
    bf6e:	80 f4       	brcc	.+32     	; 0xbf90 <f_write+0x240>
    bf70:	98 2f       	mov	r25, r24
    bf72:	88 27       	eor	r24, r24
    bf74:	99 0f       	add	r25, r25
    bf76:	b3 01       	movw	r22, r6
    bf78:	68 0f       	add	r22, r24
    bf7a:	79 1f       	adc	r23, r25
    bf7c:	40 e0       	ldi	r20, 0x00	; 0
    bf7e:	52 e0       	ldi	r21, 0x02	; 2
    bf80:	8d 81       	ldd	r24, Y+5	; 0x05
    bf82:	9e 81       	ldd	r25, Y+6	; 0x06
    bf84:	0e 94 17 4a 	call	0x942e	; 0x942e <mem_cpy.part.0>
    bf88:	f7 01       	movw	r30, r14
    bf8a:	86 85       	ldd	r24, Z+14	; 0x0e
    bf8c:	8f 77       	andi	r24, 0x7F	; 127
    bf8e:	86 87       	std	Z+14, r24	; 0x0e
    bf90:	dc 2c       	mov	r13, r12
    bf92:	cc 24       	eor	r12, r12
    bf94:	dd 0c       	add	r13, r13
    bf96:	43 c0       	rjmp	.+134    	; 0xc01e <f_write+0x2ce>
    bf98:	f7 01       	movw	r30, r14
    bf9a:	80 8d       	ldd	r24, Z+24	; 0x18
    bf9c:	91 8d       	ldd	r25, Z+25	; 0x19
    bf9e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    bfa0:	b3 8d       	ldd	r27, Z+27	; 0x1b
    bfa2:	28 16       	cp	r2, r24
    bfa4:	39 06       	cpc	r3, r25
    bfa6:	4a 06       	cpc	r4, r26
    bfa8:	5b 06       	cpc	r5, r27
    bfaa:	d9 f0       	breq	.+54     	; 0xbfe2 <f_write+0x292>
    bfac:	40 89       	ldd	r20, Z+16	; 0x10
    bfae:	51 89       	ldd	r21, Z+17	; 0x11
    bfb0:	62 89       	ldd	r22, Z+18	; 0x12
    bfb2:	73 89       	ldd	r23, Z+19	; 0x13
    bfb4:	82 85       	ldd	r24, Z+10	; 0x0a
    bfb6:	93 85       	ldd	r25, Z+11	; 0x0b
    bfb8:	a4 85       	ldd	r26, Z+12	; 0x0c
    bfba:	b5 85       	ldd	r27, Z+13	; 0x0d
    bfbc:	48 17       	cp	r20, r24
    bfbe:	59 07       	cpc	r21, r25
    bfc0:	6a 07       	cpc	r22, r26
    bfc2:	7b 07       	cpc	r23, r27
    bfc4:	70 f4       	brcc	.+28     	; 0xbfe2 <f_write+0x292>
    bfc6:	01 e0       	ldi	r16, 0x01	; 1
    bfc8:	10 e0       	ldi	r17, 0x00	; 0
    bfca:	a2 01       	movw	r20, r4
    bfcc:	91 01       	movw	r18, r2
    bfce:	6d 81       	ldd	r22, Y+5	; 0x05
    bfd0:	7e 81       	ldd	r23, Y+6	; 0x06
    bfd2:	eb 81       	ldd	r30, Y+3	; 0x03
    bfd4:	fc 81       	ldd	r31, Y+4	; 0x04
    bfd6:	81 81       	ldd	r24, Z+1	; 0x01
    bfd8:	0e 94 b7 6b 	call	0xd76e	; 0xd76e <disk_read>
    bfdc:	89 2b       	or	r24, r25
    bfde:	09 f0       	breq	.+2      	; 0xbfe2 <f_write+0x292>
    bfe0:	51 cf       	rjmp	.-350    	; 0xbe84 <f_write+0x134>
    bfe2:	f7 01       	movw	r30, r14
    bfe4:	20 8e       	std	Z+24, r2	; 0x18
    bfe6:	31 8e       	std	Z+25, r3	; 0x19
    bfe8:	42 8e       	std	Z+26, r4	; 0x1a
    bfea:	53 8e       	std	Z+27, r5	; 0x1b
    bfec:	f7 01       	movw	r30, r14
    bfee:	80 89       	ldd	r24, Z+16	; 0x10
    bff0:	91 89       	ldd	r25, Z+17	; 0x11
    bff2:	91 70       	andi	r25, 0x01	; 1
    bff4:	20 e0       	ldi	r18, 0x00	; 0
    bff6:	32 e0       	ldi	r19, 0x02	; 2
    bff8:	28 1b       	sub	r18, r24
    bffa:	39 0b       	sbc	r19, r25
    bffc:	65 01       	movw	r12, r10
    bffe:	2a 15       	cp	r18, r10
    c000:	3b 05       	cpc	r19, r11
    c002:	08 f4       	brcc	.+2      	; 0xc006 <f_write+0x2b6>
    c004:	69 01       	movw	r12, r18
    c006:	a6 01       	movw	r20, r12
    c008:	b3 01       	movw	r22, r6
    c00a:	2d 81       	ldd	r18, Y+5	; 0x05
    c00c:	3e 81       	ldd	r19, Y+6	; 0x06
    c00e:	82 0f       	add	r24, r18
    c010:	93 1f       	adc	r25, r19
    c012:	0e 94 17 4a 	call	0x942e	; 0x942e <mem_cpy.part.0>
    c016:	f7 01       	movw	r30, r14
    c018:	86 85       	ldd	r24, Z+14	; 0x0e
    c01a:	80 68       	ori	r24, 0x80	; 128
    c01c:	86 87       	std	Z+14, r24	; 0x0e
    c01e:	ac 18       	sub	r10, r12
    c020:	bd 08       	sbc	r11, r13
    c022:	ef 81       	ldd	r30, Y+7	; 0x07
    c024:	f8 85       	ldd	r31, Y+8	; 0x08
    c026:	80 81       	ld	r24, Z
    c028:	91 81       	ldd	r25, Z+1	; 0x01
    c02a:	8c 0d       	add	r24, r12
    c02c:	9d 1d       	adc	r25, r13
    c02e:	91 83       	std	Z+1, r25	; 0x01
    c030:	80 83       	st	Z, r24
    c032:	6c 0c       	add	r6, r12
    c034:	7d 1c       	adc	r7, r13
    c036:	f7 01       	movw	r30, r14
    c038:	80 89       	ldd	r24, Z+16	; 0x10
    c03a:	91 89       	ldd	r25, Z+17	; 0x11
    c03c:	a2 89       	ldd	r26, Z+18	; 0x12
    c03e:	b3 89       	ldd	r27, Z+19	; 0x13
    c040:	8c 0d       	add	r24, r12
    c042:	9d 1d       	adc	r25, r13
    c044:	a1 1d       	adc	r26, r1
    c046:	b1 1d       	adc	r27, r1
    c048:	80 8b       	std	Z+16, r24	; 0x10
    c04a:	91 8b       	std	Z+17, r25	; 0x11
    c04c:	a2 8b       	std	Z+18, r26	; 0x12
    c04e:	b3 8b       	std	Z+19, r27	; 0x13
    c050:	42 85       	ldd	r20, Z+10	; 0x0a
    c052:	53 85       	ldd	r21, Z+11	; 0x0b
    c054:	64 85       	ldd	r22, Z+12	; 0x0c
    c056:	75 85       	ldd	r23, Z+13	; 0x0d
    c058:	48 17       	cp	r20, r24
    c05a:	59 07       	cpc	r21, r25
    c05c:	6a 07       	cpc	r22, r26
    c05e:	7b 07       	cpc	r23, r27
    c060:	10 f4       	brcc	.+4      	; 0xc066 <f_write+0x316>
    c062:	ac 01       	movw	r20, r24
    c064:	bd 01       	movw	r22, r26
    c066:	f7 01       	movw	r30, r14
    c068:	42 87       	std	Z+10, r20	; 0x0a
    c06a:	53 87       	std	Z+11, r21	; 0x0b
    c06c:	64 87       	std	Z+12, r22	; 0x0c
    c06e:	75 87       	std	Z+13, r23	; 0x0d
    c070:	a5 ce       	rjmp	.-694    	; 0xbdbc <f_write+0x6c>
    c072:	87 e0       	ldi	r24, 0x07	; 7
    c074:	90 e0       	ldi	r25, 0x00	; 0
    c076:	28 96       	adiw	r28, 0x08	; 8
    c078:	e2 e1       	ldi	r30, 0x12	; 18
    c07a:	0c 94 35 e5 	jmp	0x1ca6a	; 0x1ca6a <__epilogue_restores__>

0000c07e <f_sync>:
    c07e:	8f 92       	push	r8
    c080:	9f 92       	push	r9
    c082:	af 92       	push	r10
    c084:	bf 92       	push	r11
    c086:	ef 92       	push	r14
    c088:	ff 92       	push	r15
    c08a:	0f 93       	push	r16
    c08c:	1f 93       	push	r17
    c08e:	cf 93       	push	r28
    c090:	df 93       	push	r29
    c092:	00 d0       	rcall	.+0      	; 0xc094 <f_sync+0x16>
    c094:	cd b7       	in	r28, 0x3d	; 61
    c096:	de b7       	in	r29, 0x3e	; 62
    c098:	7c 01       	movw	r14, r24
    c09a:	be 01       	movw	r22, r28
    c09c:	6f 5f       	subi	r22, 0xFF	; 255
    c09e:	7f 4f       	sbci	r23, 0xFF	; 255
    c0a0:	0e 94 eb 49 	call	0x93d6	; 0x93d6 <validate>
    c0a4:	00 97       	sbiw	r24, 0x00	; 0
    c0a6:	09 f0       	breq	.+2      	; 0xc0aa <f_sync+0x2c>
    c0a8:	5d c0       	rjmp	.+186    	; 0xc164 <f_sync+0xe6>
    c0aa:	f7 01       	movw	r30, r14
    c0ac:	86 85       	ldd	r24, Z+14	; 0x0e
    c0ae:	86 ff       	sbrs	r24, 6
    c0b0:	55 c0       	rjmp	.+170    	; 0xc15c <f_sync+0xde>
    c0b2:	87 ff       	sbrs	r24, 7
    c0b4:	15 c0       	rjmp	.+42     	; 0xc0e0 <f_sync+0x62>
    c0b6:	20 8d       	ldd	r18, Z+24	; 0x18
    c0b8:	31 8d       	ldd	r19, Z+25	; 0x19
    c0ba:	42 8d       	ldd	r20, Z+26	; 0x1a
    c0bc:	53 8d       	ldd	r21, Z+27	; 0x1b
    c0be:	e9 81       	ldd	r30, Y+1	; 0x01
    c0c0:	fa 81       	ldd	r31, Y+2	; 0x02
    c0c2:	01 e0       	ldi	r16, 0x01	; 1
    c0c4:	10 e0       	ldi	r17, 0x00	; 0
    c0c6:	b7 01       	movw	r22, r14
    c0c8:	6c 5d       	subi	r22, 0xDC	; 220
    c0ca:	7f 4f       	sbci	r23, 0xFF	; 255
    c0cc:	81 81       	ldd	r24, Z+1	; 0x01
    c0ce:	0e 94 c7 6b 	call	0xd78e	; 0xd78e <disk_write>
    c0d2:	89 2b       	or	r24, r25
    c0d4:	09 f0       	breq	.+2      	; 0xc0d8 <f_sync+0x5a>
    c0d6:	44 c0       	rjmp	.+136    	; 0xc160 <f_sync+0xe2>
    c0d8:	f7 01       	movw	r30, r14
    c0da:	86 85       	ldd	r24, Z+14	; 0x0e
    c0dc:	8f 77       	andi	r24, 0x7F	; 127
    c0de:	86 87       	std	Z+14, r24	; 0x0e
    c0e0:	0e 94 ff 71 	call	0xe3fe	; 0xe3fe <get_fattime>
    c0e4:	4b 01       	movw	r8, r22
    c0e6:	5c 01       	movw	r10, r24
    c0e8:	f7 01       	movw	r30, r14
    c0ea:	44 8d       	ldd	r20, Z+28	; 0x1c
    c0ec:	55 8d       	ldd	r21, Z+29	; 0x1d
    c0ee:	66 8d       	ldd	r22, Z+30	; 0x1e
    c0f0:	77 8d       	ldd	r23, Z+31	; 0x1f
    c0f2:	89 81       	ldd	r24, Y+1	; 0x01
    c0f4:	9a 81       	ldd	r25, Y+2	; 0x02
    c0f6:	0e 94 6e 4d 	call	0x9adc	; 0x9adc <move_window>
    c0fa:	00 97       	sbiw	r24, 0x00	; 0
    c0fc:	99 f5       	brne	.+102    	; 0xc164 <f_sync+0xe6>
    c0fe:	f7 01       	movw	r30, r14
    c100:	00 a1       	ldd	r16, Z+32	; 0x20
    c102:	11 a1       	ldd	r17, Z+33	; 0x21
    c104:	f8 01       	movw	r30, r16
    c106:	83 85       	ldd	r24, Z+11	; 0x0b
    c108:	80 62       	ori	r24, 0x20	; 32
    c10a:	83 87       	std	Z+11, r24	; 0x0b
    c10c:	f7 01       	movw	r30, r14
    c10e:	26 81       	ldd	r18, Z+6	; 0x06
    c110:	37 81       	ldd	r19, Z+7	; 0x07
    c112:	40 85       	ldd	r20, Z+8	; 0x08
    c114:	51 85       	ldd	r21, Z+9	; 0x09
    c116:	b8 01       	movw	r22, r16
    c118:	80 81       	ld	r24, Z
    c11a:	91 81       	ldd	r25, Z+1	; 0x01
    c11c:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <st_clust.isra.5>
    c120:	f7 01       	movw	r30, r14
    c122:	42 85       	ldd	r20, Z+10	; 0x0a
    c124:	53 85       	ldd	r21, Z+11	; 0x0b
    c126:	64 85       	ldd	r22, Z+12	; 0x0c
    c128:	75 85       	ldd	r23, Z+13	; 0x0d
    c12a:	c8 01       	movw	r24, r16
    c12c:	4c 96       	adiw	r24, 0x1c	; 28
    c12e:	0e 94 a8 48 	call	0x9150	; 0x9150 <st_dword>
    c132:	b5 01       	movw	r22, r10
    c134:	a4 01       	movw	r20, r8
    c136:	c8 01       	movw	r24, r16
    c138:	46 96       	adiw	r24, 0x16	; 22
    c13a:	0e 94 a8 48 	call	0x9150	; 0x9150 <st_dword>
    c13e:	f8 01       	movw	r30, r16
    c140:	12 8a       	std	Z+18, r1	; 0x12
    c142:	13 8a       	std	Z+19, r1	; 0x13
    c144:	89 81       	ldd	r24, Y+1	; 0x01
    c146:	9a 81       	ldd	r25, Y+2	; 0x02
    c148:	21 e0       	ldi	r18, 0x01	; 1
    c14a:	fc 01       	movw	r30, r24
    c14c:	23 83       	std	Z+3, r18	; 0x03
    c14e:	0e 94 54 4c 	call	0x98a8	; 0x98a8 <sync_fs>
    c152:	f7 01       	movw	r30, r14
    c154:	26 85       	ldd	r18, Z+14	; 0x0e
    c156:	2f 7b       	andi	r18, 0xBF	; 191
    c158:	26 87       	std	Z+14, r18	; 0x0e
    c15a:	04 c0       	rjmp	.+8      	; 0xc164 <f_sync+0xe6>
    c15c:	80 e0       	ldi	r24, 0x00	; 0
    c15e:	01 c0       	rjmp	.+2      	; 0xc162 <f_sync+0xe4>
    c160:	81 e0       	ldi	r24, 0x01	; 1
    c162:	90 e0       	ldi	r25, 0x00	; 0
    c164:	0f 90       	pop	r0
    c166:	0f 90       	pop	r0
    c168:	df 91       	pop	r29
    c16a:	cf 91       	pop	r28
    c16c:	1f 91       	pop	r17
    c16e:	0f 91       	pop	r16
    c170:	ff 90       	pop	r15
    c172:	ef 90       	pop	r14
    c174:	bf 90       	pop	r11
    c176:	af 90       	pop	r10
    c178:	9f 90       	pop	r9
    c17a:	8f 90       	pop	r8
    c17c:	08 95       	ret

0000c17e <f_close>:
    c17e:	a2 e0       	ldi	r26, 0x02	; 2
    c180:	b0 e0       	ldi	r27, 0x00	; 0
    c182:	e5 ec       	ldi	r30, 0xC5	; 197
    c184:	f0 e6       	ldi	r31, 0x60	; 96
    c186:	0c 94 27 e5 	jmp	0x1ca4e	; 0x1ca4e <__prologue_saves__+0x1c>
    c18a:	8c 01       	movw	r16, r24
    c18c:	78 df       	rcall	.-272    	; 0xc07e <f_sync>
    c18e:	00 97       	sbiw	r24, 0x00	; 0
    c190:	59 f4       	brne	.+22     	; 0xc1a8 <f_close+0x2a>
    c192:	be 01       	movw	r22, r28
    c194:	6f 5f       	subi	r22, 0xFF	; 255
    c196:	7f 4f       	sbci	r23, 0xFF	; 255
    c198:	c8 01       	movw	r24, r16
    c19a:	0e 94 eb 49 	call	0x93d6	; 0x93d6 <validate>
    c19e:	00 97       	sbiw	r24, 0x00	; 0
    c1a0:	19 f4       	brne	.+6      	; 0xc1a8 <f_close+0x2a>
    c1a2:	f8 01       	movw	r30, r16
    c1a4:	11 82       	std	Z+1, r1	; 0x01
    c1a6:	10 82       	st	Z, r1
    c1a8:	22 96       	adiw	r28, 0x02	; 2
    c1aa:	e4 e0       	ldi	r30, 0x04	; 4
    c1ac:	0c 94 43 e5 	jmp	0x1ca86	; 0x1ca86 <__epilogue_restores__+0x1c>

0000c1b0 <f_chdir>:
    c1b0:	a2 e3       	ldi	r26, 0x32	; 50
    c1b2:	b0 e0       	ldi	r27, 0x00	; 0
    c1b4:	ee ed       	ldi	r30, 0xDE	; 222
    c1b6:	f0 e6       	ldi	r31, 0x60	; 96
    c1b8:	0c 94 23 e5 	jmp	0x1ca46	; 0x1ca46 <__prologue_saves__+0x14>
    c1bc:	9a ab       	std	Y+50, r25	; 0x32
    c1be:	89 ab       	std	Y+49, r24	; 0x31
    c1c0:	40 e0       	ldi	r20, 0x00	; 0
    c1c2:	be 01       	movw	r22, r28
    c1c4:	61 5d       	subi	r22, 0xD1	; 209
    c1c6:	7f 4f       	sbci	r23, 0xFF	; 255
    c1c8:	ce 01       	movw	r24, r28
    c1ca:	c1 96       	adiw	r24, 0x31	; 49
    c1cc:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <mount_volume>
    c1d0:	00 97       	sbiw	r24, 0x00	; 0
    c1d2:	09 f0       	breq	.+2      	; 0xc1d6 <f_chdir+0x26>
    c1d4:	44 c0       	rjmp	.+136    	; 0xc25e <f_chdir+0xae>
    c1d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    c1d8:	98 a9       	ldd	r25, Y+48	; 0x30
    c1da:	9a 83       	std	Y+2, r25	; 0x02
    c1dc:	89 83       	std	Y+1, r24	; 0x01
    c1de:	80 e0       	ldi	r24, 0x00	; 0
    c1e0:	92 e0       	ldi	r25, 0x02	; 2
    c1e2:	0e 94 fb 6a 	call	0xd5f6	; 0xd5f6 <ff_memalloc>
    c1e6:	7c 01       	movw	r14, r24
    c1e8:	00 97       	sbiw	r24, 0x00	; 0
    c1ea:	a9 f1       	breq	.+106    	; 0xc256 <f_chdir+0xa6>
    c1ec:	ef a5       	ldd	r30, Y+47	; 0x2f
    c1ee:	f8 a9       	ldd	r31, Y+48	; 0x30
    c1f0:	94 87       	std	Z+12, r25	; 0x0c
    c1f2:	83 87       	std	Z+11, r24	; 0x0b
    c1f4:	69 a9       	ldd	r22, Y+49	; 0x31
    c1f6:	7a a9       	ldd	r23, Y+50	; 0x32
    c1f8:	ce 01       	movw	r24, r28
    c1fa:	01 96       	adiw	r24, 0x01	; 1
    c1fc:	39 d8       	rcall	.-3982   	; 0xb270 <follow_path>
    c1fe:	8c 01       	movw	r16, r24
    c200:	89 2b       	or	r24, r25
    c202:	09 f5       	brne	.+66     	; 0xc246 <f_chdir+0x96>
    c204:	88 a5       	ldd	r24, Y+40	; 0x28
    c206:	87 ff       	sbrs	r24, 7
    c208:	0b c0       	rjmp	.+22     	; 0xc220 <f_chdir+0x70>
    c20a:	ef a5       	ldd	r30, Y+47	; 0x2f
    c20c:	f8 a9       	ldd	r31, Y+48	; 0x30
    c20e:	8f 81       	ldd	r24, Y+7	; 0x07
    c210:	98 85       	ldd	r25, Y+8	; 0x08
    c212:	a9 85       	ldd	r26, Y+9	; 0x09
    c214:	ba 85       	ldd	r27, Y+10	; 0x0a
    c216:	85 8b       	std	Z+21, r24	; 0x15
    c218:	96 8b       	std	Z+22, r25	; 0x16
    c21a:	a7 8b       	std	Z+23, r26	; 0x17
    c21c:	b0 8f       	std	Z+24, r27	; 0x18
    c21e:	13 c0       	rjmp	.+38     	; 0xc246 <f_chdir+0x96>
    c220:	8d 81       	ldd	r24, Y+5	; 0x05
    c222:	84 ff       	sbrs	r24, 4
    c224:	0e c0       	rjmp	.+28     	; 0xc242 <f_chdir+0x92>
    c226:	cf a4       	ldd	r12, Y+47	; 0x2f
    c228:	d8 a8       	ldd	r13, Y+48	; 0x30
    c22a:	6b 8d       	ldd	r22, Y+27	; 0x1b
    c22c:	7c 8d       	ldd	r23, Y+28	; 0x1c
    c22e:	f6 01       	movw	r30, r12
    c230:	80 81       	ld	r24, Z
    c232:	0e 94 df 4b 	call	0x97be	; 0x97be <ld_clust.isra.4>
    c236:	f6 01       	movw	r30, r12
    c238:	65 8b       	std	Z+21, r22	; 0x15
    c23a:	76 8b       	std	Z+22, r23	; 0x16
    c23c:	87 8b       	std	Z+23, r24	; 0x17
    c23e:	90 8f       	std	Z+24, r25	; 0x18
    c240:	02 c0       	rjmp	.+4      	; 0xc246 <f_chdir+0x96>
    c242:	05 e0       	ldi	r16, 0x05	; 5
    c244:	10 e0       	ldi	r17, 0x00	; 0
    c246:	c7 01       	movw	r24, r14
    c248:	0e 94 fe 6a 	call	0xd5fc	; 0xd5fc <ff_memfree>
    c24c:	04 30       	cpi	r16, 0x04	; 4
    c24e:	11 05       	cpc	r17, r1
    c250:	29 f4       	brne	.+10     	; 0xc25c <f_chdir+0xac>
    c252:	85 e0       	ldi	r24, 0x05	; 5
    c254:	01 c0       	rjmp	.+2      	; 0xc258 <f_chdir+0xa8>
    c256:	81 e1       	ldi	r24, 0x11	; 17
    c258:	90 e0       	ldi	r25, 0x00	; 0
    c25a:	01 c0       	rjmp	.+2      	; 0xc25e <f_chdir+0xae>
    c25c:	c8 01       	movw	r24, r16
    c25e:	e2 96       	adiw	r28, 0x32	; 50
    c260:	e8 e0       	ldi	r30, 0x08	; 8
    c262:	0c 94 3f e5 	jmp	0x1ca7e	; 0x1ca7e <__epilogue_restores__+0x14>

0000c266 <f_getcwd>:
    c266:	a8 e4       	ldi	r26, 0x48	; 72
    c268:	b1 e0       	ldi	r27, 0x01	; 1
    c26a:	e9 e3       	ldi	r30, 0x39	; 57
    c26c:	f1 e6       	ldi	r31, 0x61	; 97
    c26e:	0c 94 19 e5 	jmp	0x1ca32	; 0x1ca32 <__prologue_saves__>
    c272:	c9 5b       	subi	r28, 0xB9	; 185
    c274:	de 4f       	sbci	r29, 0xFE	; 254
    c276:	99 83       	std	Y+1, r25	; 0x01
    c278:	88 83       	st	Y, r24
    c27a:	c7 54       	subi	r28, 0x47	; 71
    c27c:	d1 40       	sbci	r29, 0x01	; 1
    c27e:	4b 01       	movw	r8, r22
    c280:	7c 01       	movw	r14, r24
    c282:	fc 01       	movw	r30, r24
    c284:	10 82       	st	Z, r1
    c286:	40 e0       	ldi	r20, 0x00	; 0
    c288:	be 01       	movw	r22, r28
    c28a:	6b 5b       	subi	r22, 0xBB	; 187
    c28c:	7e 4f       	sbci	r23, 0xFE	; 254
    c28e:	ce 01       	movw	r24, r28
    c290:	89 5b       	subi	r24, 0xB9	; 185
    c292:	9e 4f       	sbci	r25, 0xFE	; 254
    c294:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <mount_volume>
    c298:	1c 01       	movw	r2, r24
    c29a:	89 2b       	or	r24, r25
    c29c:	09 f0       	breq	.+2      	; 0xc2a0 <f_getcwd+0x3a>
    c29e:	03 c1       	rjmp	.+518    	; 0xc4a6 <f_getcwd+0x240>
    c2a0:	cb 5b       	subi	r28, 0xBB	; 187
    c2a2:	de 4f       	sbci	r29, 0xFE	; 254
    c2a4:	88 81       	ld	r24, Y
    c2a6:	99 81       	ldd	r25, Y+1	; 0x01
    c2a8:	c5 54       	subi	r28, 0x45	; 69
    c2aa:	d1 40       	sbci	r29, 0x01	; 1
    c2ac:	c9 5e       	subi	r28, 0xE9	; 233
    c2ae:	de 4f       	sbci	r29, 0xFE	; 254
    c2b0:	99 83       	std	Y+1, r25	; 0x01
    c2b2:	88 83       	st	Y, r24
    c2b4:	c7 51       	subi	r28, 0x17	; 23
    c2b6:	d1 40       	sbci	r29, 0x01	; 1
    c2b8:	80 e0       	ldi	r24, 0x00	; 0
    c2ba:	92 e0       	ldi	r25, 0x02	; 2
    c2bc:	0e 94 fb 6a 	call	0xd5f6	; 0xd5f6 <ff_memalloc>
    c2c0:	5c 01       	movw	r10, r24
    c2c2:	00 97       	sbiw	r24, 0x00	; 0
    c2c4:	09 f4       	brne	.+2      	; 0xc2c8 <f_getcwd+0x62>
    c2c6:	f3 c0       	rjmp	.+486    	; 0xc4ae <f_getcwd+0x248>
    c2c8:	cb 5b       	subi	r28, 0xBB	; 187
    c2ca:	de 4f       	sbci	r29, 0xFE	; 254
    c2cc:	e8 81       	ld	r30, Y
    c2ce:	f9 81       	ldd	r31, Y+1	; 0x01
    c2d0:	c5 54       	subi	r28, 0x45	; 69
    c2d2:	d1 40       	sbci	r29, 0x01	; 1
    c2d4:	94 87       	std	Z+12, r25	; 0x0c
    c2d6:	83 87       	std	Z+11, r24	; 0x0b
    c2d8:	85 89       	ldd	r24, Z+21	; 0x15
    c2da:	96 89       	ldd	r25, Z+22	; 0x16
    c2dc:	a7 89       	ldd	r26, Z+23	; 0x17
    c2de:	b0 8d       	ldd	r27, Z+24	; 0x18
    c2e0:	c3 5e       	subi	r28, 0xE3	; 227
    c2e2:	de 4f       	sbci	r29, 0xFE	; 254
    c2e4:	88 83       	st	Y, r24
    c2e6:	99 83       	std	Y+1, r25	; 0x01
    c2e8:	aa 83       	std	Y+2, r26	; 0x02
    c2ea:	bb 83       	std	Y+3, r27	; 0x03
    c2ec:	cd 51       	subi	r28, 0x1D	; 29
    c2ee:	d1 40       	sbci	r29, 0x01	; 1
    c2f0:	84 01       	movw	r16, r8
    c2f2:	ce 01       	movw	r24, r28
    c2f4:	01 96       	adiw	r24, 0x01	; 1
    c2f6:	6c 01       	movw	r12, r24
    c2f8:	c3 5e       	subi	r28, 0xE3	; 227
    c2fa:	de 4f       	sbci	r29, 0xFE	; 254
    c2fc:	48 80       	ld	r4, Y
    c2fe:	59 80       	ldd	r5, Y+1	; 0x01
    c300:	6a 80       	ldd	r6, Y+2	; 0x02
    c302:	7b 80       	ldd	r7, Y+3	; 0x03
    c304:	cd 51       	subi	r28, 0x1D	; 29
    c306:	d1 40       	sbci	r29, 0x01	; 1
    c308:	41 14       	cp	r4, r1
    c30a:	51 04       	cpc	r5, r1
    c30c:	61 04       	cpc	r6, r1
    c30e:	71 04       	cpc	r7, r1
    c310:	09 f4       	brne	.+2      	; 0xc314 <f_getcwd+0xae>
    c312:	a3 c0       	rjmp	.+326    	; 0xc45a <f_getcwd+0x1f4>
    c314:	40 e2       	ldi	r20, 0x20	; 32
    c316:	50 e0       	ldi	r21, 0x00	; 0
    c318:	60 e0       	ldi	r22, 0x00	; 0
    c31a:	70 e0       	ldi	r23, 0x00	; 0
    c31c:	ce 01       	movw	r24, r28
    c31e:	89 5e       	subi	r24, 0xE9	; 233
    c320:	9e 4f       	sbci	r25, 0xFE	; 254
    c322:	0e 94 f2 51 	call	0xa3e4	; 0xa3e4 <dir_sdi>
    c326:	00 97       	sbiw	r24, 0x00	; 0
    c328:	09 f0       	breq	.+2      	; 0xc32c <f_getcwd+0xc6>
    c32a:	c6 c0       	rjmp	.+396    	; 0xc4b8 <f_getcwd+0x252>
    c32c:	c3 5d       	subi	r28, 0xD3	; 211
    c32e:	de 4f       	sbci	r29, 0xFE	; 254
    c330:	48 81       	ld	r20, Y
    c332:	59 81       	ldd	r21, Y+1	; 0x01
    c334:	6a 81       	ldd	r22, Y+2	; 0x02
    c336:	7b 81       	ldd	r23, Y+3	; 0x03
    c338:	cd 52       	subi	r28, 0x2D	; 45
    c33a:	d1 40       	sbci	r29, 0x01	; 1
    c33c:	cb 5b       	subi	r28, 0xBB	; 187
    c33e:	de 4f       	sbci	r29, 0xFE	; 254
    c340:	88 81       	ld	r24, Y
    c342:	99 81       	ldd	r25, Y+1	; 0x01
    c344:	c5 54       	subi	r28, 0x45	; 69
    c346:	d1 40       	sbci	r29, 0x01	; 1
    c348:	0e 94 6e 4d 	call	0x9adc	; 0x9adc <move_window>
    c34c:	00 97       	sbiw	r24, 0x00	; 0
    c34e:	09 f0       	breq	.+2      	; 0xc352 <f_getcwd+0xec>
    c350:	b3 c0       	rjmp	.+358    	; 0xc4b8 <f_getcwd+0x252>
    c352:	cf 5c       	subi	r28, 0xCF	; 207
    c354:	de 4f       	sbci	r29, 0xFE	; 254
    c356:	68 81       	ld	r22, Y
    c358:	79 81       	ldd	r23, Y+1	; 0x01
    c35a:	c1 53       	subi	r28, 0x31	; 49
    c35c:	d1 40       	sbci	r29, 0x01	; 1
    c35e:	cb 5b       	subi	r28, 0xBB	; 187
    c360:	de 4f       	sbci	r29, 0xFE	; 254
    c362:	e8 81       	ld	r30, Y
    c364:	f9 81       	ldd	r31, Y+1	; 0x01
    c366:	c5 54       	subi	r28, 0x45	; 69
    c368:	d1 40       	sbci	r29, 0x01	; 1
    c36a:	80 81       	ld	r24, Z
    c36c:	0e 94 df 4b 	call	0x97be	; 0x97be <ld_clust.isra.4>
    c370:	c3 5e       	subi	r28, 0xE3	; 227
    c372:	de 4f       	sbci	r29, 0xFE	; 254
    c374:	68 83       	st	Y, r22
    c376:	79 83       	std	Y+1, r23	; 0x01
    c378:	8a 83       	std	Y+2, r24	; 0x02
    c37a:	9b 83       	std	Y+3, r25	; 0x03
    c37c:	cd 51       	subi	r28, 0x1D	; 29
    c37e:	d1 40       	sbci	r29, 0x01	; 1
    c380:	40 e0       	ldi	r20, 0x00	; 0
    c382:	50 e0       	ldi	r21, 0x00	; 0
    c384:	ba 01       	movw	r22, r20
    c386:	ce 01       	movw	r24, r28
    c388:	89 5e       	subi	r24, 0xE9	; 233
    c38a:	9e 4f       	sbci	r25, 0xFE	; 254
    c38c:	0e 94 f2 51 	call	0xa3e4	; 0xa3e4 <dir_sdi>
    c390:	00 97       	sbiw	r24, 0x00	; 0
    c392:	09 f0       	breq	.+2      	; 0xc396 <f_getcwd+0x130>
    c394:	91 c0       	rjmp	.+290    	; 0xc4b8 <f_getcwd+0x252>
    c396:	60 e0       	ldi	r22, 0x00	; 0
    c398:	70 e0       	ldi	r23, 0x00	; 0
    c39a:	ce 01       	movw	r24, r28
    c39c:	89 5e       	subi	r24, 0xE9	; 233
    c39e:	9e 4f       	sbci	r25, 0xFE	; 254
    c3a0:	0e 94 8b 55 	call	0xab16	; 0xab16 <dir_read>
    c3a4:	00 97       	sbiw	r24, 0x00	; 0
    c3a6:	09 f0       	breq	.+2      	; 0xc3aa <f_getcwd+0x144>
    c3a8:	89 c0       	rjmp	.+274    	; 0xc4bc <f_getcwd+0x256>
    c3aa:	cf 5c       	subi	r28, 0xCF	; 207
    c3ac:	de 4f       	sbci	r29, 0xFE	; 254
    c3ae:	68 81       	ld	r22, Y
    c3b0:	79 81       	ldd	r23, Y+1	; 0x01
    c3b2:	c1 53       	subi	r28, 0x31	; 49
    c3b4:	d1 40       	sbci	r29, 0x01	; 1
    c3b6:	cb 5b       	subi	r28, 0xBB	; 187
    c3b8:	de 4f       	sbci	r29, 0xFE	; 254
    c3ba:	e8 81       	ld	r30, Y
    c3bc:	f9 81       	ldd	r31, Y+1	; 0x01
    c3be:	c5 54       	subi	r28, 0x45	; 69
    c3c0:	d1 40       	sbci	r29, 0x01	; 1
    c3c2:	80 81       	ld	r24, Z
    c3c4:	0e 94 df 4b 	call	0x97be	; 0x97be <ld_clust.isra.4>
    c3c8:	46 16       	cp	r4, r22
    c3ca:	57 06       	cpc	r5, r23
    c3cc:	68 06       	cpc	r6, r24
    c3ce:	79 06       	cpc	r7, r25
    c3d0:	41 f4       	brne	.+16     	; 0xc3e2 <f_getcwd+0x17c>
    c3d2:	b6 01       	movw	r22, r12
    c3d4:	ce 01       	movw	r24, r28
    c3d6:	89 5e       	subi	r24, 0xE9	; 233
    c3d8:	9e 4f       	sbci	r25, 0xFE	; 254
    c3da:	0e 94 cf 4a 	call	0x959e	; 0x959e <get_fileinfo>
    c3de:	f6 01       	movw	r30, r12
    c3e0:	0a c0       	rjmp	.+20     	; 0xc3f6 <f_getcwd+0x190>
    c3e2:	60 e0       	ldi	r22, 0x00	; 0
    c3e4:	70 e0       	ldi	r23, 0x00	; 0
    c3e6:	ce 01       	movw	r24, r28
    c3e8:	89 5e       	subi	r24, 0xE9	; 233
    c3ea:	9e 4f       	sbci	r25, 0xFE	; 254
    c3ec:	0e 94 6a 54 	call	0xa8d4	; 0xa8d4 <dir_next>
    c3f0:	00 97       	sbiw	r24, 0x00	; 0
    c3f2:	89 f2       	breq	.-94     	; 0xc396 <f_getcwd+0x130>
    c3f4:	63 c0       	rjmp	.+198    	; 0xc4bc <f_getcwd+0x256>
    c3f6:	cf 01       	movw	r24, r30
    c3f8:	8c 19       	sub	r24, r12
    c3fa:	9d 09       	sbc	r25, r13
    c3fc:	31 96       	adiw	r30, 0x01	; 1
    c3fe:	25 89       	ldd	r18, Z+21	; 0x15
    c400:	21 11       	cpse	r18, r1
    c402:	f9 cf       	rjmp	.-14     	; 0xc3f6 <f_getcwd+0x190>
    c404:	9c 01       	movw	r18, r24
    c406:	2f 5f       	subi	r18, 0xFF	; 255
    c408:	3f 4f       	sbci	r19, 0xFF	; 255
    c40a:	02 17       	cp	r16, r18
    c40c:	13 07       	cpc	r17, r19
    c40e:	08 f4       	brcc	.+2      	; 0xc412 <f_getcwd+0x1ac>
    c410:	51 c0       	rjmp	.+162    	; 0xc4b4 <f_getcwd+0x24e>
    c412:	f6 01       	movw	r30, r12
    c414:	e8 0f       	add	r30, r24
    c416:	f9 1f       	adc	r31, r25
    c418:	98 01       	movw	r18, r16
    c41a:	ce 16       	cp	r12, r30
    c41c:	df 06       	cpc	r13, r31
    c41e:	71 f0       	breq	.+28     	; 0xc43c <f_getcwd+0x1d6>
    c420:	21 50       	subi	r18, 0x01	; 1
    c422:	31 09       	sbc	r19, r1
    c424:	45 89       	ldd	r20, Z+21	; 0x15
    c426:	c9 5b       	subi	r28, 0xB9	; 185
    c428:	de 4f       	sbci	r29, 0xFE	; 254
    c42a:	a8 81       	ld	r26, Y
    c42c:	b9 81       	ldd	r27, Y+1	; 0x01
    c42e:	c7 54       	subi	r28, 0x47	; 71
    c430:	d1 40       	sbci	r29, 0x01	; 1
    c432:	a2 0f       	add	r26, r18
    c434:	b3 1f       	adc	r27, r19
    c436:	4c 93       	st	X, r20
    c438:	31 97       	sbiw	r30, 0x01	; 1
    c43a:	ef cf       	rjmp	.-34     	; 0xc41a <f_getcwd+0x1b4>
    c43c:	80 95       	com	r24
    c43e:	90 95       	com	r25
    c440:	08 0f       	add	r16, r24
    c442:	19 1f       	adc	r17, r25
    c444:	c9 5b       	subi	r28, 0xB9	; 185
    c446:	de 4f       	sbci	r29, 0xFE	; 254
    c448:	e8 81       	ld	r30, Y
    c44a:	f9 81       	ldd	r31, Y+1	; 0x01
    c44c:	c7 54       	subi	r28, 0x47	; 71
    c44e:	d1 40       	sbci	r29, 0x01	; 1
    c450:	e0 0f       	add	r30, r16
    c452:	f1 1f       	adc	r31, r17
    c454:	9f e2       	ldi	r25, 0x2F	; 47
    c456:	90 83       	st	Z, r25
    c458:	4f cf       	rjmp	.-354    	; 0xc2f8 <f_getcwd+0x92>
    c45a:	08 15       	cp	r16, r8
    c45c:	19 05       	cpc	r17, r9
    c45e:	61 f4       	brne	.+24     	; 0xc478 <f_getcwd+0x212>
    c460:	01 50       	subi	r16, 0x01	; 1
    c462:	11 09       	sbc	r17, r1
    c464:	c9 5b       	subi	r28, 0xB9	; 185
    c466:	de 4f       	sbci	r29, 0xFE	; 254
    c468:	e8 81       	ld	r30, Y
    c46a:	f9 81       	ldd	r31, Y+1	; 0x01
    c46c:	c7 54       	subi	r28, 0x47	; 71
    c46e:	d1 40       	sbci	r29, 0x01	; 1
    c470:	e0 0f       	add	r30, r16
    c472:	f1 1f       	adc	r31, r17
    c474:	8f e2       	ldi	r24, 0x2F	; 47
    c476:	80 83       	st	Z, r24
    c478:	ef ef       	ldi	r30, 0xFF	; 255
    c47a:	ee 1a       	sub	r14, r30
    c47c:	fe 0a       	sbc	r15, r30
    c47e:	c9 5b       	subi	r28, 0xB9	; 185
    c480:	de 4f       	sbci	r29, 0xFE	; 254
    c482:	e8 81       	ld	r30, Y
    c484:	f9 81       	ldd	r31, Y+1	; 0x01
    c486:	c7 54       	subi	r28, 0x47	; 71
    c488:	d1 40       	sbci	r29, 0x01	; 1
    c48a:	e0 0f       	add	r30, r16
    c48c:	f1 1f       	adc	r31, r17
    c48e:	80 81       	ld	r24, Z
    c490:	f7 01       	movw	r30, r14
    c492:	31 97       	sbiw	r30, 0x01	; 1
    c494:	80 83       	st	Z, r24
    c496:	0f 5f       	subi	r16, 0xFF	; 255
    c498:	1f 4f       	sbci	r17, 0xFF	; 255
    c49a:	08 15       	cp	r16, r8
    c49c:	19 05       	cpc	r17, r9
    c49e:	60 f3       	brcs	.-40     	; 0xc478 <f_getcwd+0x212>
    c4a0:	c5 01       	movw	r24, r10
    c4a2:	0e 94 fe 6a 	call	0xd5fc	; 0xd5fc <ff_memfree>
    c4a6:	f7 01       	movw	r30, r14
    c4a8:	10 82       	st	Z, r1
    c4aa:	c1 01       	movw	r24, r2
    c4ac:	0d c0       	rjmp	.+26     	; 0xc4c8 <f_getcwd+0x262>
    c4ae:	81 e1       	ldi	r24, 0x11	; 17
    c4b0:	90 e0       	ldi	r25, 0x00	; 0
    c4b2:	0a c0       	rjmp	.+20     	; 0xc4c8 <f_getcwd+0x262>
    c4b4:	81 e1       	ldi	r24, 0x11	; 17
    c4b6:	90 e0       	ldi	r25, 0x00	; 0
    c4b8:	1c 01       	movw	r2, r24
    c4ba:	f2 cf       	rjmp	.-28     	; 0xc4a0 <f_getcwd+0x23a>
    c4bc:	84 30       	cpi	r24, 0x04	; 4
    c4be:	91 05       	cpc	r25, r1
    c4c0:	d9 f7       	brne	.-10     	; 0xc4b8 <f_getcwd+0x252>
    c4c2:	82 e0       	ldi	r24, 0x02	; 2
    c4c4:	90 e0       	ldi	r25, 0x00	; 0
    c4c6:	f8 cf       	rjmp	.-16     	; 0xc4b8 <f_getcwd+0x252>
    c4c8:	c8 5b       	subi	r28, 0xB8	; 184
    c4ca:	de 4f       	sbci	r29, 0xFE	; 254
    c4cc:	e2 e1       	ldi	r30, 0x12	; 18
    c4ce:	0c 94 35 e5 	jmp	0x1ca6a	; 0x1ca6a <__epilogue_restores__>

0000c4d2 <f_lseek>:
    c4d2:	aa e0       	ldi	r26, 0x0A	; 10
    c4d4:	b0 e0       	ldi	r27, 0x00	; 0
    c4d6:	ef e6       	ldi	r30, 0x6F	; 111
    c4d8:	f2 e6       	ldi	r31, 0x62	; 98
    c4da:	0c 94 19 e5 	jmp	0x1ca32	; 0x1ca32 <__prologue_saves__>
    c4de:	1c 01       	movw	r2, r24
    c4e0:	6a 01       	movw	r12, r20
    c4e2:	7b 01       	movw	r14, r22
    c4e4:	be 01       	movw	r22, r28
    c4e6:	6f 5f       	subi	r22, 0xFF	; 255
    c4e8:	7f 4f       	sbci	r23, 0xFF	; 255
    c4ea:	0e 94 eb 49 	call	0x93d6	; 0x93d6 <validate>
    c4ee:	00 97       	sbiw	r24, 0x00	; 0
    c4f0:	09 f0       	breq	.+2      	; 0xc4f4 <f_lseek+0x22>
    c4f2:	a7 c2       	rjmp	.+1358   	; 0xca42 <f_lseek+0x570>
    c4f4:	f1 01       	movw	r30, r2
    c4f6:	87 85       	ldd	r24, Z+15	; 0x0f
    c4f8:	90 e0       	ldi	r25, 0x00	; 0
    c4fa:	00 97       	sbiw	r24, 0x00	; 0
    c4fc:	09 f0       	breq	.+2      	; 0xc500 <f_lseek+0x2e>
    c4fe:	a1 c2       	rjmp	.+1346   	; 0xca42 <f_lseek+0x570>
    c500:	22 a1       	ldd	r18, Z+34	; 0x22
    c502:	33 a1       	ldd	r19, Z+35	; 0x23
    c504:	21 15       	cp	r18, r1
    c506:	31 05       	cpc	r19, r1
    c508:	09 f4       	brne	.+2      	; 0xc50c <f_lseek+0x3a>
    c50a:	2e c1       	rjmp	.+604    	; 0xc768 <f_lseek+0x296>
    c50c:	ff ef       	ldi	r31, 0xFF	; 255
    c50e:	cf 16       	cp	r12, r31
    c510:	df 06       	cpc	r13, r31
    c512:	ef 06       	cpc	r14, r31
    c514:	ff 06       	cpc	r15, r31
    c516:	09 f0       	breq	.+2      	; 0xc51a <f_lseek+0x48>
    c518:	9a c0       	rjmp	.+308    	; 0xc64e <f_lseek+0x17c>
    c51a:	89 01       	movw	r16, r18
    c51c:	0c 5f       	subi	r16, 0xFC	; 252
    c51e:	1f 4f       	sbci	r17, 0xFF	; 255
    c520:	d9 01       	movw	r26, r18
    c522:	4d 91       	ld	r20, X+
    c524:	5d 91       	ld	r21, X+
    c526:	6d 91       	ld	r22, X+
    c528:	7c 91       	ld	r23, X
    c52a:	4f 83       	std	Y+7, r20	; 0x07
    c52c:	58 87       	std	Y+8, r21	; 0x08
    c52e:	69 87       	std	Y+9, r22	; 0x09
    c530:	7a 87       	std	Y+10, r23	; 0x0a
    c532:	f1 01       	movw	r30, r2
    c534:	86 80       	ldd	r8, Z+6	; 0x06
    c536:	97 80       	ldd	r9, Z+7	; 0x07
    c538:	a0 84       	ldd	r10, Z+8	; 0x08
    c53a:	b1 84       	ldd	r11, Z+9	; 0x09
    c53c:	52 e0       	ldi	r21, 0x02	; 2
    c53e:	c5 2e       	mov	r12, r21
    c540:	d1 2c       	mov	r13, r1
    c542:	e1 2c       	mov	r14, r1
    c544:	f1 2c       	mov	r15, r1
    c546:	81 14       	cp	r8, r1
    c548:	91 04       	cpc	r9, r1
    c54a:	a1 04       	cpc	r10, r1
    c54c:	b1 04       	cpc	r11, r1
    c54e:	09 f4       	brne	.+2      	; 0xc552 <f_lseek+0x80>
    c550:	65 c0       	rjmp	.+202    	; 0xc61c <f_lseek+0x14a>
    c552:	24 01       	movw	r4, r8
    c554:	35 01       	movw	r6, r10
    c556:	1b 82       	std	Y+3, r1	; 0x03
    c558:	1c 82       	std	Y+4, r1	; 0x04
    c55a:	1d 82       	std	Y+5, r1	; 0x05
    c55c:	1e 82       	std	Y+6, r1	; 0x06
    c55e:	2b 81       	ldd	r18, Y+3	; 0x03
    c560:	3c 81       	ldd	r19, Y+4	; 0x04
    c562:	4d 81       	ldd	r20, Y+5	; 0x05
    c564:	5e 81       	ldd	r21, Y+6	; 0x06
    c566:	2f 5f       	subi	r18, 0xFF	; 255
    c568:	3f 4f       	sbci	r19, 0xFF	; 255
    c56a:	4f 4f       	sbci	r20, 0xFF	; 255
    c56c:	5f 4f       	sbci	r21, 0xFF	; 255
    c56e:	2b 83       	std	Y+3, r18	; 0x03
    c570:	3c 83       	std	Y+4, r19	; 0x04
    c572:	4d 83       	std	Y+5, r20	; 0x05
    c574:	5e 83       	std	Y+6, r21	; 0x06
    c576:	b3 01       	movw	r22, r6
    c578:	a2 01       	movw	r20, r4
    c57a:	d1 01       	movw	r26, r2
    c57c:	8d 91       	ld	r24, X+
    c57e:	9c 91       	ld	r25, X
    c580:	0e 94 3e 51 	call	0xa27c	; 0xa27c <get_fat.isra.10>
    c584:	62 30       	cpi	r22, 0x02	; 2
    c586:	71 05       	cpc	r23, r1
    c588:	81 05       	cpc	r24, r1
    c58a:	91 05       	cpc	r25, r1
    c58c:	10 f4       	brcc	.+4      	; 0xc592 <f_lseek+0xc0>
    c58e:	82 e0       	ldi	r24, 0x02	; 2
    c590:	07 c0       	rjmp	.+14     	; 0xc5a0 <f_lseek+0xce>
    c592:	6f 3f       	cpi	r22, 0xFF	; 255
    c594:	ff ef       	ldi	r31, 0xFF	; 255
    c596:	7f 07       	cpc	r23, r31
    c598:	8f 07       	cpc	r24, r31
    c59a:	9f 07       	cpc	r25, r31
    c59c:	29 f4       	brne	.+10     	; 0xc5a8 <f_lseek+0xd6>
    c59e:	81 e0       	ldi	r24, 0x01	; 1
    c5a0:	f1 01       	movw	r30, r2
    c5a2:	87 87       	std	Z+15, r24	; 0x0f
    c5a4:	90 e0       	ldi	r25, 0x00	; 0
    c5a6:	4d c2       	rjmp	.+1178   	; 0xca42 <f_lseek+0x570>
    c5a8:	a3 01       	movw	r20, r6
    c5aa:	92 01       	movw	r18, r4
    c5ac:	2f 5f       	subi	r18, 0xFF	; 255
    c5ae:	3f 4f       	sbci	r19, 0xFF	; 255
    c5b0:	4f 4f       	sbci	r20, 0xFF	; 255
    c5b2:	5f 4f       	sbci	r21, 0xFF	; 255
    c5b4:	2b 01       	movw	r4, r22
    c5b6:	3c 01       	movw	r6, r24
    c5b8:	62 17       	cp	r22, r18
    c5ba:	73 07       	cpc	r23, r19
    c5bc:	84 07       	cpc	r24, r20
    c5be:	95 07       	cpc	r25, r21
    c5c0:	71 f2       	breq	.-100    	; 0xc55e <f_lseek+0x8c>
    c5c2:	f2 e0       	ldi	r31, 0x02	; 2
    c5c4:	cf 0e       	add	r12, r31
    c5c6:	d1 1c       	adc	r13, r1
    c5c8:	e1 1c       	adc	r14, r1
    c5ca:	f1 1c       	adc	r15, r1
    c5cc:	2f 81       	ldd	r18, Y+7	; 0x07
    c5ce:	38 85       	ldd	r19, Y+8	; 0x08
    c5d0:	49 85       	ldd	r20, Y+9	; 0x09
    c5d2:	5a 85       	ldd	r21, Y+10	; 0x0a
    c5d4:	2c 15       	cp	r18, r12
    c5d6:	3d 05       	cpc	r19, r13
    c5d8:	4e 05       	cpc	r20, r14
    c5da:	5f 05       	cpc	r21, r15
    c5dc:	88 f0       	brcs	.+34     	; 0xc600 <f_lseek+0x12e>
    c5de:	2b 81       	ldd	r18, Y+3	; 0x03
    c5e0:	3c 81       	ldd	r19, Y+4	; 0x04
    c5e2:	4d 81       	ldd	r20, Y+5	; 0x05
    c5e4:	5e 81       	ldd	r21, Y+6	; 0x06
    c5e6:	d8 01       	movw	r26, r16
    c5e8:	2d 93       	st	X+, r18
    c5ea:	3d 93       	st	X+, r19
    c5ec:	4d 93       	st	X+, r20
    c5ee:	5c 93       	st	X, r21
    c5f0:	13 97       	sbiw	r26, 0x03	; 3
    c5f2:	f8 01       	movw	r30, r16
    c5f4:	84 82       	std	Z+4, r8	; 0x04
    c5f6:	95 82       	std	Z+5, r9	; 0x05
    c5f8:	a6 82       	std	Z+6, r10	; 0x06
    c5fa:	b7 82       	std	Z+7, r11	; 0x07
    c5fc:	08 5f       	subi	r16, 0xF8	; 248
    c5fe:	1f 4f       	sbci	r17, 0xFF	; 255
    c600:	e9 81       	ldd	r30, Y+1	; 0x01
    c602:	fa 81       	ldd	r31, Y+2	; 0x02
    c604:	81 8c       	ldd	r8, Z+25	; 0x19
    c606:	92 8c       	ldd	r9, Z+26	; 0x1a
    c608:	a3 8c       	ldd	r10, Z+27	; 0x1b
    c60a:	b4 8c       	ldd	r11, Z+28	; 0x1c
    c60c:	68 15       	cp	r22, r8
    c60e:	79 05       	cpc	r23, r9
    c610:	8a 05       	cpc	r24, r10
    c612:	9b 05       	cpc	r25, r11
    c614:	18 f4       	brcc	.+6      	; 0xc61c <f_lseek+0x14a>
    c616:	4b 01       	movw	r8, r22
    c618:	5c 01       	movw	r10, r24
    c61a:	9b cf       	rjmp	.-202    	; 0xc552 <f_lseek+0x80>
    c61c:	f1 01       	movw	r30, r2
    c61e:	a2 a1       	ldd	r26, Z+34	; 0x22
    c620:	b3 a1       	ldd	r27, Z+35	; 0x23
    c622:	cd 92       	st	X+, r12
    c624:	dd 92       	st	X+, r13
    c626:	ed 92       	st	X+, r14
    c628:	fc 92       	st	X, r15
    c62a:	13 97       	sbiw	r26, 0x03	; 3
    c62c:	2f 81       	ldd	r18, Y+7	; 0x07
    c62e:	38 85       	ldd	r19, Y+8	; 0x08
    c630:	49 85       	ldd	r20, Y+9	; 0x09
    c632:	5a 85       	ldd	r21, Y+10	; 0x0a
    c634:	2c 15       	cp	r18, r12
    c636:	3d 05       	cpc	r19, r13
    c638:	4e 05       	cpc	r20, r14
    c63a:	5f 05       	cpc	r21, r15
    c63c:	08 f4       	brcc	.+2      	; 0xc640 <f_lseek+0x16e>
    c63e:	f8 c1       	rjmp	.+1008   	; 0xca30 <f_lseek+0x55e>
    c640:	d8 01       	movw	r26, r16
    c642:	1d 92       	st	X+, r1
    c644:	1d 92       	st	X+, r1
    c646:	1d 92       	st	X+, r1
    c648:	1c 92       	st	X, r1
    c64a:	13 97       	sbiw	r26, 0x03	; 3
    c64c:	ef c1       	rjmp	.+990    	; 0xca2c <f_lseek+0x55a>
    c64e:	f1 01       	movw	r30, r2
    c650:	82 85       	ldd	r24, Z+10	; 0x0a
    c652:	93 85       	ldd	r25, Z+11	; 0x0b
    c654:	a4 85       	ldd	r26, Z+12	; 0x0c
    c656:	b5 85       	ldd	r27, Z+13	; 0x0d
    c658:	46 01       	movw	r8, r12
    c65a:	57 01       	movw	r10, r14
    c65c:	8c 15       	cp	r24, r12
    c65e:	9d 05       	cpc	r25, r13
    c660:	ae 05       	cpc	r26, r14
    c662:	bf 05       	cpc	r27, r15
    c664:	10 f4       	brcc	.+4      	; 0xc66a <f_lseek+0x198>
    c666:	4c 01       	movw	r8, r24
    c668:	5d 01       	movw	r10, r26
    c66a:	f1 01       	movw	r30, r2
    c66c:	80 8a       	std	Z+16, r8	; 0x10
    c66e:	91 8a       	std	Z+17, r9	; 0x11
    c670:	a2 8a       	std	Z+18, r10	; 0x12
    c672:	b3 8a       	std	Z+19, r11	; 0x13
    c674:	81 14       	cp	r8, r1
    c676:	91 04       	cpc	r9, r1
    c678:	a1 04       	cpc	r10, r1
    c67a:	b1 04       	cpc	r11, r1
    c67c:	09 f4       	brne	.+2      	; 0xc680 <f_lseek+0x1ae>
    c67e:	d6 c1       	rjmp	.+940    	; 0xca2c <f_lseek+0x55a>
    c680:	24 01       	movw	r4, r8
    c682:	35 01       	movw	r6, r10
    c684:	f1 e0       	ldi	r31, 0x01	; 1
    c686:	4f 1a       	sub	r4, r31
    c688:	51 08       	sbc	r5, r1
    c68a:	61 08       	sbc	r6, r1
    c68c:	71 08       	sbc	r7, r1
    c68e:	b3 01       	movw	r22, r6
    c690:	a2 01       	movw	r20, r4
    c692:	c1 01       	movw	r24, r2
    c694:	0e 94 74 49 	call	0x92e8	; 0x92e8 <clmt_clust>
    c698:	ab 01       	movw	r20, r22
    c69a:	bc 01       	movw	r22, r24
    c69c:	f1 01       	movw	r30, r2
    c69e:	44 8b       	std	Z+20, r20	; 0x14
    c6a0:	55 8b       	std	Z+21, r21	; 0x15
    c6a2:	66 8b       	std	Z+22, r22	; 0x16
    c6a4:	77 8b       	std	Z+23, r23	; 0x17
    c6a6:	e9 80       	ldd	r14, Y+1	; 0x01
    c6a8:	fa 80       	ldd	r15, Y+2	; 0x02
    c6aa:	c7 01       	movw	r24, r14
    c6ac:	0e 94 4c 49 	call	0x9298	; 0x9298 <clst2sect>
    c6b0:	61 15       	cp	r22, r1
    c6b2:	71 05       	cpc	r23, r1
    c6b4:	81 05       	cpc	r24, r1
    c6b6:	91 05       	cpc	r25, r1
    c6b8:	09 f4       	brne	.+2      	; 0xc6bc <f_lseek+0x1ea>
    c6ba:	69 cf       	rjmp	.-302    	; 0xc58e <f_lseek+0xbc>
    c6bc:	95 01       	movw	r18, r10
    c6be:	84 01       	movw	r16, r8
    c6c0:	11 70       	andi	r17, 0x01	; 1
    c6c2:	22 27       	eor	r18, r18
    c6c4:	33 27       	eor	r19, r19
    c6c6:	01 15       	cp	r16, r1
    c6c8:	11 05       	cpc	r17, r1
    c6ca:	21 05       	cpc	r18, r1
    c6cc:	31 05       	cpc	r19, r1
    c6ce:	09 f4       	brne	.+2      	; 0xc6d2 <f_lseek+0x200>
    c6d0:	ad c1       	rjmp	.+858    	; 0xca2c <f_lseek+0x55a>
    c6d2:	f7 01       	movw	r30, r14
    c6d4:	81 84       	ldd	r8, Z+9	; 0x09
    c6d6:	92 84       	ldd	r9, Z+10	; 0x0a
    c6d8:	f1 e0       	ldi	r31, 0x01	; 1
    c6da:	8f 1a       	sub	r8, r31
    c6dc:	91 08       	sbc	r9, r1
    c6de:	a1 2c       	mov	r10, r1
    c6e0:	b1 2c       	mov	r11, r1
    c6e2:	49 e0       	ldi	r20, 0x09	; 9
    c6e4:	76 94       	lsr	r7
    c6e6:	67 94       	ror	r6
    c6e8:	57 94       	ror	r5
    c6ea:	47 94       	ror	r4
    c6ec:	4a 95       	dec	r20
    c6ee:	d1 f7       	brne	.-12     	; 0xc6e4 <f_lseek+0x212>
    c6f0:	48 20       	and	r4, r8
    c6f2:	59 20       	and	r5, r9
    c6f4:	6a 20       	and	r6, r10
    c6f6:	7b 20       	and	r7, r11
    c6f8:	53 01       	movw	r10, r6
    c6fa:	42 01       	movw	r8, r4
    c6fc:	86 0e       	add	r8, r22
    c6fe:	97 1e       	adc	r9, r23
    c700:	a8 1e       	adc	r10, r24
    c702:	b9 1e       	adc	r11, r25
    c704:	f1 01       	movw	r30, r2
    c706:	20 8d       	ldd	r18, Z+24	; 0x18
    c708:	31 8d       	ldd	r19, Z+25	; 0x19
    c70a:	42 8d       	ldd	r20, Z+26	; 0x1a
    c70c:	53 8d       	ldd	r21, Z+27	; 0x1b
    c70e:	82 16       	cp	r8, r18
    c710:	93 06       	cpc	r9, r19
    c712:	a4 06       	cpc	r10, r20
    c714:	b5 06       	cpc	r11, r21
    c716:	09 f4       	brne	.+2      	; 0xc71a <f_lseek+0x248>
    c718:	89 c1       	rjmp	.+786    	; 0xca2c <f_lseek+0x55a>
    c71a:	86 85       	ldd	r24, Z+14	; 0x0e
    c71c:	b1 01       	movw	r22, r2
    c71e:	6c 5d       	subi	r22, 0xDC	; 220
    c720:	7f 4f       	sbci	r23, 0xFF	; 255
    c722:	6b 01       	movw	r12, r22
    c724:	87 ff       	sbrs	r24, 7
    c726:	0d c0       	rjmp	.+26     	; 0xc742 <f_lseek+0x270>
    c728:	01 e0       	ldi	r16, 0x01	; 1
    c72a:	10 e0       	ldi	r17, 0x00	; 0
    c72c:	f7 01       	movw	r30, r14
    c72e:	81 81       	ldd	r24, Z+1	; 0x01
    c730:	0e 94 c7 6b 	call	0xd78e	; 0xd78e <disk_write>
    c734:	89 2b       	or	r24, r25
    c736:	09 f0       	breq	.+2      	; 0xc73a <f_lseek+0x268>
    c738:	32 cf       	rjmp	.-412    	; 0xc59e <f_lseek+0xcc>
    c73a:	f1 01       	movw	r30, r2
    c73c:	86 85       	ldd	r24, Z+14	; 0x0e
    c73e:	8f 77       	andi	r24, 0x7F	; 127
    c740:	86 87       	std	Z+14, r24	; 0x0e
    c742:	e9 81       	ldd	r30, Y+1	; 0x01
    c744:	fa 81       	ldd	r31, Y+2	; 0x02
    c746:	01 e0       	ldi	r16, 0x01	; 1
    c748:	10 e0       	ldi	r17, 0x00	; 0
    c74a:	a5 01       	movw	r20, r10
    c74c:	94 01       	movw	r18, r8
    c74e:	b6 01       	movw	r22, r12
    c750:	81 81       	ldd	r24, Z+1	; 0x01
    c752:	0e 94 b7 6b 	call	0xd76e	; 0xd76e <disk_read>
    c756:	89 2b       	or	r24, r25
    c758:	09 f0       	breq	.+2      	; 0xc75c <f_lseek+0x28a>
    c75a:	21 cf       	rjmp	.-446    	; 0xc59e <f_lseek+0xcc>
    c75c:	f1 01       	movw	r30, r2
    c75e:	80 8e       	std	Z+24, r8	; 0x18
    c760:	91 8e       	std	Z+25, r9	; 0x19
    c762:	a2 8e       	std	Z+26, r10	; 0x1a
    c764:	b3 8e       	std	Z+27, r11	; 0x1b
    c766:	62 c1       	rjmp	.+708    	; 0xca2c <f_lseek+0x55a>
    c768:	f1 01       	movw	r30, r2
    c76a:	82 85       	ldd	r24, Z+10	; 0x0a
    c76c:	93 85       	ldd	r25, Z+11	; 0x0b
    c76e:	a4 85       	ldd	r26, Z+12	; 0x0c
    c770:	b5 85       	ldd	r27, Z+13	; 0x0d
    c772:	8c 15       	cp	r24, r12
    c774:	9d 05       	cpc	r25, r13
    c776:	ae 05       	cpc	r26, r14
    c778:	bf 05       	cpc	r27, r15
    c77a:	28 f4       	brcc	.+10     	; 0xc786 <f_lseek+0x2b4>
    c77c:	26 85       	ldd	r18, Z+14	; 0x0e
    c77e:	21 fd       	sbrc	r18, 1
    c780:	02 c0       	rjmp	.+4      	; 0xc786 <f_lseek+0x2b4>
    c782:	6c 01       	movw	r12, r24
    c784:	7d 01       	movw	r14, r26
    c786:	f1 01       	movw	r30, r2
    c788:	40 88       	ldd	r4, Z+16	; 0x10
    c78a:	51 88       	ldd	r5, Z+17	; 0x11
    c78c:	62 88       	ldd	r6, Z+18	; 0x12
    c78e:	73 88       	ldd	r7, Z+19	; 0x13
    c790:	10 8a       	std	Z+16, r1	; 0x10
    c792:	11 8a       	std	Z+17, r1	; 0x11
    c794:	12 8a       	std	Z+18, r1	; 0x12
    c796:	13 8a       	std	Z+19, r1	; 0x13
    c798:	c1 14       	cp	r12, r1
    c79a:	d1 04       	cpc	r13, r1
    c79c:	e1 04       	cpc	r14, r1
    c79e:	f1 04       	cpc	r15, r1
    c7a0:	09 f4       	brne	.+2      	; 0xc7a4 <f_lseek+0x2d2>
    c7a2:	48 c1       	rjmp	.+656    	; 0xca34 <f_lseek+0x562>
    c7a4:	e9 81       	ldd	r30, Y+1	; 0x01
    c7a6:	fa 81       	ldd	r31, Y+2	; 0x02
    c7a8:	81 84       	ldd	r8, Z+9	; 0x09
    c7aa:	92 84       	ldd	r9, Z+10	; 0x0a
    c7ac:	a1 2c       	mov	r10, r1
    c7ae:	b1 2c       	mov	r11, r1
    c7b0:	39 e0       	ldi	r19, 0x09	; 9
    c7b2:	88 0c       	add	r8, r8
    c7b4:	99 1c       	adc	r9, r9
    c7b6:	aa 1c       	adc	r10, r10
    c7b8:	bb 1c       	adc	r11, r11
    c7ba:	3a 95       	dec	r19
    c7bc:	d1 f7       	brne	.-12     	; 0xc7b2 <f_lseek+0x2e0>
    c7be:	41 14       	cp	r4, r1
    c7c0:	51 04       	cpc	r5, r1
    c7c2:	61 04       	cpc	r6, r1
    c7c4:	71 04       	cpc	r7, r1
    c7c6:	d9 f1       	breq	.+118    	; 0xc83e <f_lseek+0x36c>
    c7c8:	f1 e0       	ldi	r31, 0x01	; 1
    c7ca:	4f 1a       	sub	r4, r31
    c7cc:	51 08       	sbc	r5, r1
    c7ce:	61 08       	sbc	r6, r1
    c7d0:	71 08       	sbc	r7, r1
    c7d2:	c7 01       	movw	r24, r14
    c7d4:	b6 01       	movw	r22, r12
    c7d6:	61 50       	subi	r22, 0x01	; 1
    c7d8:	71 09       	sbc	r23, r1
    c7da:	81 09       	sbc	r24, r1
    c7dc:	91 09       	sbc	r25, r1
    c7de:	a5 01       	movw	r20, r10
    c7e0:	94 01       	movw	r18, r8
    c7e2:	0e 94 97 e4 	call	0x1c92e	; 0x1c92e <__udivmodsi4>
    c7e6:	2b 83       	std	Y+3, r18	; 0x03
    c7e8:	3c 83       	std	Y+4, r19	; 0x04
    c7ea:	4d 83       	std	Y+5, r20	; 0x05
    c7ec:	5e 83       	std	Y+6, r21	; 0x06
    c7ee:	c3 01       	movw	r24, r6
    c7f0:	b2 01       	movw	r22, r4
    c7f2:	a5 01       	movw	r20, r10
    c7f4:	94 01       	movw	r18, r8
    c7f6:	0e 94 97 e4 	call	0x1c92e	; 0x1c92e <__udivmodsi4>
    c7fa:	6b 81       	ldd	r22, Y+3	; 0x03
    c7fc:	7c 81       	ldd	r23, Y+4	; 0x04
    c7fe:	8d 81       	ldd	r24, Y+5	; 0x05
    c800:	9e 81       	ldd	r25, Y+6	; 0x06
    c802:	62 17       	cp	r22, r18
    c804:	73 07       	cpc	r23, r19
    c806:	84 07       	cpc	r24, r20
    c808:	95 07       	cpc	r25, r21
    c80a:	c8 f0       	brcs	.+50     	; 0xc83e <f_lseek+0x36c>
    c80c:	88 27       	eor	r24, r24
    c80e:	99 27       	eor	r25, r25
    c810:	dc 01       	movw	r26, r24
    c812:	88 19       	sub	r24, r8
    c814:	99 09       	sbc	r25, r9
    c816:	aa 09       	sbc	r26, r10
    c818:	bb 09       	sbc	r27, r11
    c81a:	48 22       	and	r4, r24
    c81c:	59 22       	and	r5, r25
    c81e:	6a 22       	and	r6, r26
    c820:	7b 22       	and	r7, r27
    c822:	f1 01       	movw	r30, r2
    c824:	40 8a       	std	Z+16, r4	; 0x10
    c826:	51 8a       	std	Z+17, r5	; 0x11
    c828:	62 8a       	std	Z+18, r6	; 0x12
    c82a:	73 8a       	std	Z+19, r7	; 0x13
    c82c:	c4 18       	sub	r12, r4
    c82e:	d5 08       	sbc	r13, r5
    c830:	e6 08       	sbc	r14, r6
    c832:	f7 08       	sbc	r15, r7
    c834:	44 89       	ldd	r20, Z+20	; 0x14
    c836:	55 89       	ldd	r21, Z+21	; 0x15
    c838:	66 89       	ldd	r22, Z+22	; 0x16
    c83a:	77 89       	ldd	r23, Z+23	; 0x17
    c83c:	29 c0       	rjmp	.+82     	; 0xc890 <f_lseek+0x3be>
    c83e:	f1 01       	movw	r30, r2
    c840:	46 81       	ldd	r20, Z+6	; 0x06
    c842:	57 81       	ldd	r21, Z+7	; 0x07
    c844:	60 85       	ldd	r22, Z+8	; 0x08
    c846:	71 85       	ldd	r23, Z+9	; 0x09
    c848:	41 15       	cp	r20, r1
    c84a:	51 05       	cpc	r21, r1
    c84c:	61 05       	cpc	r22, r1
    c84e:	71 05       	cpc	r23, r1
    c850:	d1 f4       	brne	.+52     	; 0xc886 <f_lseek+0x3b4>
    c852:	40 e0       	ldi	r20, 0x00	; 0
    c854:	50 e0       	ldi	r21, 0x00	; 0
    c856:	ba 01       	movw	r22, r20
    c858:	c1 01       	movw	r24, r2
    c85a:	0e 94 b3 52 	call	0xa566	; 0xa566 <create_chain>
    c85e:	ab 01       	movw	r20, r22
    c860:	bc 01       	movw	r22, r24
    c862:	41 30       	cpi	r20, 0x01	; 1
    c864:	51 05       	cpc	r21, r1
    c866:	61 05       	cpc	r22, r1
    c868:	71 05       	cpc	r23, r1
    c86a:	09 f4       	brne	.+2      	; 0xc86e <f_lseek+0x39c>
    c86c:	90 ce       	rjmp	.-736    	; 0xc58e <f_lseek+0xbc>
    c86e:	4f 3f       	cpi	r20, 0xFF	; 255
    c870:	ff ef       	ldi	r31, 0xFF	; 255
    c872:	5f 07       	cpc	r21, r31
    c874:	6f 07       	cpc	r22, r31
    c876:	7f 07       	cpc	r23, r31
    c878:	09 f4       	brne	.+2      	; 0xc87c <f_lseek+0x3aa>
    c87a:	91 ce       	rjmp	.-734    	; 0xc59e <f_lseek+0xcc>
    c87c:	f1 01       	movw	r30, r2
    c87e:	46 83       	std	Z+6, r20	; 0x06
    c880:	57 83       	std	Z+7, r21	; 0x07
    c882:	60 87       	std	Z+8, r22	; 0x08
    c884:	71 87       	std	Z+9, r23	; 0x09
    c886:	f1 01       	movw	r30, r2
    c888:	44 8b       	std	Z+20, r20	; 0x14
    c88a:	55 8b       	std	Z+21, r21	; 0x15
    c88c:	66 8b       	std	Z+22, r22	; 0x16
    c88e:	77 8b       	std	Z+23, r23	; 0x17
    c890:	41 15       	cp	r20, r1
    c892:	51 05       	cpc	r21, r1
    c894:	61 05       	cpc	r22, r1
    c896:	71 05       	cpc	r23, r1
    c898:	09 f0       	breq	.+2      	; 0xc89c <f_lseek+0x3ca>
    c89a:	40 c0       	rjmp	.+128    	; 0xc91c <f_lseek+0x44a>
    c89c:	c1 2c       	mov	r12, r1
    c89e:	d1 2c       	mov	r13, r1
    c8a0:	76 01       	movw	r14, r12
    c8a2:	79 c0       	rjmp	.+242    	; 0xc996 <f_lseek+0x4c4>
    c8a4:	c8 18       	sub	r12, r8
    c8a6:	d9 08       	sbc	r13, r9
    c8a8:	ea 08       	sbc	r14, r10
    c8aa:	fb 08       	sbc	r15, r11
    c8ac:	f1 01       	movw	r30, r2
    c8ae:	80 89       	ldd	r24, Z+16	; 0x10
    c8b0:	91 89       	ldd	r25, Z+17	; 0x11
    c8b2:	a2 89       	ldd	r26, Z+18	; 0x12
    c8b4:	b3 89       	ldd	r27, Z+19	; 0x13
    c8b6:	88 0d       	add	r24, r8
    c8b8:	99 1d       	adc	r25, r9
    c8ba:	aa 1d       	adc	r26, r10
    c8bc:	bb 1d       	adc	r27, r11
    c8be:	80 8b       	std	Z+16, r24	; 0x10
    c8c0:	91 8b       	std	Z+17, r25	; 0x11
    c8c2:	a2 8b       	std	Z+18, r26	; 0x12
    c8c4:	b3 8b       	std	Z+19, r27	; 0x13
    c8c6:	86 85       	ldd	r24, Z+14	; 0x0e
    c8c8:	81 ff       	sbrs	r24, 1
    c8ca:	2f c0       	rjmp	.+94     	; 0xc92a <f_lseek+0x458>
    c8cc:	c1 01       	movw	r24, r2
    c8ce:	0e 94 b3 52 	call	0xa566	; 0xa566 <create_chain>
    c8d2:	ab 01       	movw	r20, r22
    c8d4:	bc 01       	movw	r22, r24
    c8d6:	41 15       	cp	r20, r1
    c8d8:	51 05       	cpc	r21, r1
    c8da:	61 05       	cpc	r22, r1
    c8dc:	71 05       	cpc	r23, r1
    c8de:	61 f1       	breq	.+88     	; 0xc938 <f_lseek+0x466>
    c8e0:	4f 3f       	cpi	r20, 0xFF	; 255
    c8e2:	bf ef       	ldi	r27, 0xFF	; 255
    c8e4:	5b 07       	cpc	r21, r27
    c8e6:	6b 07       	cpc	r22, r27
    c8e8:	7b 07       	cpc	r23, r27
    c8ea:	09 f4       	brne	.+2      	; 0xc8ee <f_lseek+0x41c>
    c8ec:	58 ce       	rjmp	.-848    	; 0xc59e <f_lseek+0xcc>
    c8ee:	42 30       	cpi	r20, 0x02	; 2
    c8f0:	51 05       	cpc	r21, r1
    c8f2:	61 05       	cpc	r22, r1
    c8f4:	71 05       	cpc	r23, r1
    c8f6:	08 f4       	brcc	.+2      	; 0xc8fa <f_lseek+0x428>
    c8f8:	4a ce       	rjmp	.-876    	; 0xc58e <f_lseek+0xbc>
    c8fa:	e9 81       	ldd	r30, Y+1	; 0x01
    c8fc:	fa 81       	ldd	r31, Y+2	; 0x02
    c8fe:	81 8d       	ldd	r24, Z+25	; 0x19
    c900:	92 8d       	ldd	r25, Z+26	; 0x1a
    c902:	a3 8d       	ldd	r26, Z+27	; 0x1b
    c904:	b4 8d       	ldd	r27, Z+28	; 0x1c
    c906:	48 17       	cp	r20, r24
    c908:	59 07       	cpc	r21, r25
    c90a:	6a 07       	cpc	r22, r26
    c90c:	7b 07       	cpc	r23, r27
    c90e:	08 f0       	brcs	.+2      	; 0xc912 <f_lseek+0x440>
    c910:	3e ce       	rjmp	.-900    	; 0xc58e <f_lseek+0xbc>
    c912:	f1 01       	movw	r30, r2
    c914:	44 8b       	std	Z+20, r20	; 0x14
    c916:	55 8b       	std	Z+21, r21	; 0x15
    c918:	66 8b       	std	Z+22, r22	; 0x16
    c91a:	77 8b       	std	Z+23, r23	; 0x17
    c91c:	8c 14       	cp	r8, r12
    c91e:	9d 04       	cpc	r9, r13
    c920:	ae 04       	cpc	r10, r14
    c922:	bf 04       	cpc	r11, r15
    c924:	08 f4       	brcc	.+2      	; 0xc928 <f_lseek+0x456>
    c926:	be cf       	rjmp	.-132    	; 0xc8a4 <f_lseek+0x3d2>
    c928:	0a c0       	rjmp	.+20     	; 0xc93e <f_lseek+0x46c>
    c92a:	80 81       	ld	r24, Z
    c92c:	91 81       	ldd	r25, Z+1	; 0x01
    c92e:	0e 94 3e 51 	call	0xa27c	; 0xa27c <get_fat.isra.10>
    c932:	ab 01       	movw	r20, r22
    c934:	bc 01       	movw	r22, r24
    c936:	d4 cf       	rjmp	.-88     	; 0xc8e0 <f_lseek+0x40e>
    c938:	c1 2c       	mov	r12, r1
    c93a:	d1 2c       	mov	r13, r1
    c93c:	76 01       	movw	r14, r12
    c93e:	f1 01       	movw	r30, r2
    c940:	80 89       	ldd	r24, Z+16	; 0x10
    c942:	91 89       	ldd	r25, Z+17	; 0x11
    c944:	a2 89       	ldd	r26, Z+18	; 0x12
    c946:	b3 89       	ldd	r27, Z+19	; 0x13
    c948:	8c 0d       	add	r24, r12
    c94a:	9d 1d       	adc	r25, r13
    c94c:	ae 1d       	adc	r26, r14
    c94e:	bf 1d       	adc	r27, r15
    c950:	80 8b       	std	Z+16, r24	; 0x10
    c952:	91 8b       	std	Z+17, r25	; 0x11
    c954:	a2 8b       	std	Z+18, r26	; 0x12
    c956:	b3 8b       	std	Z+19, r27	; 0x13
    c958:	d7 01       	movw	r26, r14
    c95a:	c6 01       	movw	r24, r12
    c95c:	91 70       	andi	r25, 0x01	; 1
    c95e:	aa 27       	eor	r26, r26
    c960:	bb 27       	eor	r27, r27
    c962:	89 2b       	or	r24, r25
    c964:	8a 2b       	or	r24, r26
    c966:	8b 2b       	or	r24, r27
    c968:	09 f4       	brne	.+2      	; 0xc96c <f_lseek+0x49a>
    c96a:	98 cf       	rjmp	.-208    	; 0xc89c <f_lseek+0x3ca>
    c96c:	89 81       	ldd	r24, Y+1	; 0x01
    c96e:	9a 81       	ldd	r25, Y+2	; 0x02
    c970:	0e 94 4c 49 	call	0x9298	; 0x9298 <clst2sect>
    c974:	61 15       	cp	r22, r1
    c976:	71 05       	cpc	r23, r1
    c978:	81 05       	cpc	r24, r1
    c97a:	91 05       	cpc	r25, r1
    c97c:	09 f4       	brne	.+2      	; 0xc980 <f_lseek+0x4ae>
    c97e:	07 ce       	rjmp	.-1010   	; 0xc58e <f_lseek+0xbc>
    c980:	29 e0       	ldi	r18, 0x09	; 9
    c982:	f6 94       	lsr	r15
    c984:	e7 94       	ror	r14
    c986:	d7 94       	ror	r13
    c988:	c7 94       	ror	r12
    c98a:	2a 95       	dec	r18
    c98c:	d1 f7       	brne	.-12     	; 0xc982 <f_lseek+0x4b0>
    c98e:	c6 0e       	add	r12, r22
    c990:	d7 1e       	adc	r13, r23
    c992:	e8 1e       	adc	r14, r24
    c994:	f9 1e       	adc	r15, r25
    c996:	f1 01       	movw	r30, r2
    c998:	80 89       	ldd	r24, Z+16	; 0x10
    c99a:	91 89       	ldd	r25, Z+17	; 0x11
    c99c:	a2 89       	ldd	r26, Z+18	; 0x12
    c99e:	b3 89       	ldd	r27, Z+19	; 0x13
    c9a0:	42 85       	ldd	r20, Z+10	; 0x0a
    c9a2:	53 85       	ldd	r21, Z+11	; 0x0b
    c9a4:	64 85       	ldd	r22, Z+12	; 0x0c
    c9a6:	75 85       	ldd	r23, Z+13	; 0x0d
    c9a8:	48 17       	cp	r20, r24
    c9aa:	59 07       	cpc	r21, r25
    c9ac:	6a 07       	cpc	r22, r26
    c9ae:	7b 07       	cpc	r23, r27
    c9b0:	38 f4       	brcc	.+14     	; 0xc9c0 <f_lseek+0x4ee>
    c9b2:	82 87       	std	Z+10, r24	; 0x0a
    c9b4:	93 87       	std	Z+11, r25	; 0x0b
    c9b6:	a4 87       	std	Z+12, r26	; 0x0c
    c9b8:	b5 87       	std	Z+13, r27	; 0x0d
    c9ba:	26 85       	ldd	r18, Z+14	; 0x0e
    c9bc:	20 64       	ori	r18, 0x40	; 64
    c9be:	26 87       	std	Z+14, r18	; 0x0e
    c9c0:	91 70       	andi	r25, 0x01	; 1
    c9c2:	aa 27       	eor	r26, r26
    c9c4:	bb 27       	eor	r27, r27
    c9c6:	89 2b       	or	r24, r25
    c9c8:	8a 2b       	or	r24, r26
    c9ca:	8b 2b       	or	r24, r27
    c9cc:	79 f1       	breq	.+94     	; 0xca2c <f_lseek+0x55a>
    c9ce:	f1 01       	movw	r30, r2
    c9d0:	20 8d       	ldd	r18, Z+24	; 0x18
    c9d2:	31 8d       	ldd	r19, Z+25	; 0x19
    c9d4:	42 8d       	ldd	r20, Z+26	; 0x1a
    c9d6:	53 8d       	ldd	r21, Z+27	; 0x1b
    c9d8:	2c 15       	cp	r18, r12
    c9da:	3d 05       	cpc	r19, r13
    c9dc:	4e 05       	cpc	r20, r14
    c9de:	5f 05       	cpc	r21, r15
    c9e0:	29 f1       	breq	.+74     	; 0xca2c <f_lseek+0x55a>
    c9e2:	86 85       	ldd	r24, Z+14	; 0x0e
    c9e4:	b1 01       	movw	r22, r2
    c9e6:	6c 5d       	subi	r22, 0xDC	; 220
    c9e8:	7f 4f       	sbci	r23, 0xFF	; 255
    c9ea:	5b 01       	movw	r10, r22
    c9ec:	87 ff       	sbrs	r24, 7
    c9ee:	0d c0       	rjmp	.+26     	; 0xca0a <f_lseek+0x538>
    c9f0:	e9 81       	ldd	r30, Y+1	; 0x01
    c9f2:	fa 81       	ldd	r31, Y+2	; 0x02
    c9f4:	01 e0       	ldi	r16, 0x01	; 1
    c9f6:	10 e0       	ldi	r17, 0x00	; 0
    c9f8:	81 81       	ldd	r24, Z+1	; 0x01
    c9fa:	c9 d6       	rcall	.+3474   	; 0xd78e <disk_write>
    c9fc:	89 2b       	or	r24, r25
    c9fe:	09 f0       	breq	.+2      	; 0xca02 <f_lseek+0x530>
    ca00:	ce cd       	rjmp	.-1124   	; 0xc59e <f_lseek+0xcc>
    ca02:	f1 01       	movw	r30, r2
    ca04:	86 85       	ldd	r24, Z+14	; 0x0e
    ca06:	8f 77       	andi	r24, 0x7F	; 127
    ca08:	86 87       	std	Z+14, r24	; 0x0e
    ca0a:	e9 81       	ldd	r30, Y+1	; 0x01
    ca0c:	fa 81       	ldd	r31, Y+2	; 0x02
    ca0e:	01 e0       	ldi	r16, 0x01	; 1
    ca10:	10 e0       	ldi	r17, 0x00	; 0
    ca12:	a7 01       	movw	r20, r14
    ca14:	96 01       	movw	r18, r12
    ca16:	b5 01       	movw	r22, r10
    ca18:	81 81       	ldd	r24, Z+1	; 0x01
    ca1a:	a9 d6       	rcall	.+3410   	; 0xd76e <disk_read>
    ca1c:	89 2b       	or	r24, r25
    ca1e:	09 f0       	breq	.+2      	; 0xca22 <f_lseek+0x550>
    ca20:	be cd       	rjmp	.-1156   	; 0xc59e <f_lseek+0xcc>
    ca22:	f1 01       	movw	r30, r2
    ca24:	c0 8e       	std	Z+24, r12	; 0x18
    ca26:	d1 8e       	std	Z+25, r13	; 0x19
    ca28:	e2 8e       	std	Z+26, r14	; 0x1a
    ca2a:	f3 8e       	std	Z+27, r15	; 0x1b
    ca2c:	80 e0       	ldi	r24, 0x00	; 0
    ca2e:	ba cd       	rjmp	.-1164   	; 0xc5a4 <f_lseek+0xd2>
    ca30:	81 e1       	ldi	r24, 0x11	; 17
    ca32:	b8 cd       	rjmp	.-1168   	; 0xc5a4 <f_lseek+0xd2>
    ca34:	80 e0       	ldi	r24, 0x00	; 0
    ca36:	90 e0       	ldi	r25, 0x00	; 0
    ca38:	dc 01       	movw	r26, r24
    ca3a:	c1 2c       	mov	r12, r1
    ca3c:	d1 2c       	mov	r13, r1
    ca3e:	76 01       	movw	r14, r12
    ca40:	bf cf       	rjmp	.-130    	; 0xc9c0 <f_lseek+0x4ee>
    ca42:	2a 96       	adiw	r28, 0x0a	; 10
    ca44:	e2 e1       	ldi	r30, 0x12	; 18
    ca46:	0c 94 35 e5 	jmp	0x1ca6a	; 0x1ca6a <__epilogue_restores__>

0000ca4a <f_opendir>:
    ca4a:	a4 e0       	ldi	r26, 0x04	; 4
    ca4c:	b0 e0       	ldi	r27, 0x00	; 0
    ca4e:	eb e2       	ldi	r30, 0x2B	; 43
    ca50:	f5 e6       	ldi	r31, 0x65	; 101
    ca52:	0c 94 23 e5 	jmp	0x1ca46	; 0x1ca46 <__prologue_saves__+0x14>
    ca56:	7c 83       	std	Y+4, r23	; 0x04
    ca58:	6b 83       	std	Y+3, r22	; 0x03
    ca5a:	00 97       	sbiw	r24, 0x00	; 0
    ca5c:	09 f4       	brne	.+2      	; 0xca60 <f_opendir+0x16>
    ca5e:	48 c0       	rjmp	.+144    	; 0xcaf0 <f_opendir+0xa6>
    ca60:	8c 01       	movw	r16, r24
    ca62:	40 e0       	ldi	r20, 0x00	; 0
    ca64:	be 01       	movw	r22, r28
    ca66:	6f 5f       	subi	r22, 0xFF	; 255
    ca68:	7f 4f       	sbci	r23, 0xFF	; 255
    ca6a:	ce 01       	movw	r24, r28
    ca6c:	03 96       	adiw	r24, 0x03	; 3
    ca6e:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <mount_volume>
    ca72:	7c 01       	movw	r14, r24
    ca74:	89 2b       	or	r24, r25
    ca76:	b9 f5       	brne	.+110    	; 0xcae6 <f_opendir+0x9c>
    ca78:	89 81       	ldd	r24, Y+1	; 0x01
    ca7a:	9a 81       	ldd	r25, Y+2	; 0x02
    ca7c:	f8 01       	movw	r30, r16
    ca7e:	91 83       	std	Z+1, r25	; 0x01
    ca80:	80 83       	st	Z, r24
    ca82:	80 e0       	ldi	r24, 0x00	; 0
    ca84:	92 e0       	ldi	r25, 0x02	; 2
    ca86:	b7 d5       	rcall	.+2926   	; 0xd5f6 <ff_memalloc>
    ca88:	6c 01       	movw	r12, r24
    ca8a:	00 97       	sbiw	r24, 0x00	; 0
    ca8c:	99 f1       	breq	.+102    	; 0xcaf4 <f_opendir+0xaa>
    ca8e:	e9 81       	ldd	r30, Y+1	; 0x01
    ca90:	fa 81       	ldd	r31, Y+2	; 0x02
    ca92:	94 87       	std	Z+12, r25	; 0x0c
    ca94:	83 87       	std	Z+11, r24	; 0x0b
    ca96:	6b 81       	ldd	r22, Y+3	; 0x03
    ca98:	7c 81       	ldd	r23, Y+4	; 0x04
    ca9a:	c8 01       	movw	r24, r16
    ca9c:	0e 94 38 59 	call	0xb270	; 0xb270 <follow_path>
    caa0:	7c 01       	movw	r14, r24
    caa2:	89 2b       	or	r24, r25
    caa4:	b9 f4       	brne	.+46     	; 0xcad4 <f_opendir+0x8a>
    caa6:	f8 01       	movw	r30, r16
    caa8:	87 a1       	ldd	r24, Z+39	; 0x27
    caaa:	87 fd       	sbrc	r24, 7
    caac:	28 c0       	rjmp	.+80     	; 0xcafe <f_opendir+0xb4>
    caae:	84 81       	ldd	r24, Z+4	; 0x04
    cab0:	84 ff       	sbrs	r24, 4
    cab2:	0d c0       	rjmp	.+26     	; 0xcace <f_opendir+0x84>
    cab4:	62 8d       	ldd	r22, Z+26	; 0x1a
    cab6:	73 8d       	ldd	r23, Z+27	; 0x1b
    cab8:	e9 81       	ldd	r30, Y+1	; 0x01
    caba:	fa 81       	ldd	r31, Y+2	; 0x02
    cabc:	80 81       	ld	r24, Z
    cabe:	0e 94 df 4b 	call	0x97be	; 0x97be <ld_clust.isra.4>
    cac2:	f8 01       	movw	r30, r16
    cac4:	66 83       	std	Z+6, r22	; 0x06
    cac6:	77 83       	std	Z+7, r23	; 0x07
    cac8:	80 87       	std	Z+8, r24	; 0x08
    caca:	91 87       	std	Z+9, r25	; 0x09
    cacc:	18 c0       	rjmp	.+48     	; 0xcafe <f_opendir+0xb4>
    cace:	95 e0       	ldi	r25, 0x05	; 5
    cad0:	e9 2e       	mov	r14, r25
    cad2:	f1 2c       	mov	r15, r1
    cad4:	c6 01       	movw	r24, r12
    cad6:	92 d5       	rcall	.+2852   	; 0xd5fc <ff_memfree>
    cad8:	f4 e0       	ldi	r31, 0x04	; 4
    cada:	ef 16       	cp	r14, r31
    cadc:	f1 04       	cpc	r15, r1
    cade:	f1 f0       	breq	.+60     	; 0xcb1c <f_opendir+0xd2>
    cae0:	e1 14       	cp	r14, r1
    cae2:	f1 04       	cpc	r15, r1
    cae4:	49 f0       	breq	.+18     	; 0xcaf8 <f_opendir+0xae>
    cae6:	f8 01       	movw	r30, r16
    cae8:	11 82       	std	Z+1, r1	; 0x01
    caea:	10 82       	st	Z, r1
    caec:	c7 01       	movw	r24, r14
    caee:	1a c0       	rjmp	.+52     	; 0xcb24 <f_opendir+0xda>
    caf0:	89 e0       	ldi	r24, 0x09	; 9
    caf2:	03 c0       	rjmp	.+6      	; 0xcafa <f_opendir+0xb0>
    caf4:	81 e1       	ldi	r24, 0x11	; 17
    caf6:	01 c0       	rjmp	.+2      	; 0xcafa <f_opendir+0xb0>
    caf8:	80 e0       	ldi	r24, 0x00	; 0
    cafa:	90 e0       	ldi	r25, 0x00	; 0
    cafc:	13 c0       	rjmp	.+38     	; 0xcb24 <f_opendir+0xda>
    cafe:	e9 81       	ldd	r30, Y+1	; 0x01
    cb00:	fa 81       	ldd	r31, Y+2	; 0x02
    cb02:	85 81       	ldd	r24, Z+5	; 0x05
    cb04:	96 81       	ldd	r25, Z+6	; 0x06
    cb06:	f8 01       	movw	r30, r16
    cb08:	93 83       	std	Z+3, r25	; 0x03
    cb0a:	82 83       	std	Z+2, r24	; 0x02
    cb0c:	40 e0       	ldi	r20, 0x00	; 0
    cb0e:	50 e0       	ldi	r21, 0x00	; 0
    cb10:	ba 01       	movw	r22, r20
    cb12:	c8 01       	movw	r24, r16
    cb14:	0e 94 f2 51 	call	0xa3e4	; 0xa3e4 <dir_sdi>
    cb18:	7c 01       	movw	r14, r24
    cb1a:	dc cf       	rjmp	.-72     	; 0xcad4 <f_opendir+0x8a>
    cb1c:	85 e0       	ldi	r24, 0x05	; 5
    cb1e:	e8 2e       	mov	r14, r24
    cb20:	f1 2c       	mov	r15, r1
    cb22:	e1 cf       	rjmp	.-62     	; 0xcae6 <f_opendir+0x9c>
    cb24:	24 96       	adiw	r28, 0x04	; 4
    cb26:	e8 e0       	ldi	r30, 0x08	; 8
    cb28:	0c 94 3f e5 	jmp	0x1ca7e	; 0x1ca7e <__epilogue_restores__+0x14>

0000cb2c <f_closedir>:
    cb2c:	a2 e0       	ldi	r26, 0x02	; 2
    cb2e:	b0 e0       	ldi	r27, 0x00	; 0
    cb30:	ec e9       	ldi	r30, 0x9C	; 156
    cb32:	f5 e6       	ldi	r31, 0x65	; 101
    cb34:	0c 94 27 e5 	jmp	0x1ca4e	; 0x1ca4e <__prologue_saves__+0x1c>
    cb38:	8c 01       	movw	r16, r24
    cb3a:	be 01       	movw	r22, r28
    cb3c:	6f 5f       	subi	r22, 0xFF	; 255
    cb3e:	7f 4f       	sbci	r23, 0xFF	; 255
    cb40:	0e 94 eb 49 	call	0x93d6	; 0x93d6 <validate>
    cb44:	00 97       	sbiw	r24, 0x00	; 0
    cb46:	19 f4       	brne	.+6      	; 0xcb4e <f_closedir+0x22>
    cb48:	f8 01       	movw	r30, r16
    cb4a:	11 82       	std	Z+1, r1	; 0x01
    cb4c:	10 82       	st	Z, r1
    cb4e:	22 96       	adiw	r28, 0x02	; 2
    cb50:	e4 e0       	ldi	r30, 0x04	; 4
    cb52:	0c 94 43 e5 	jmp	0x1ca86	; 0x1ca86 <__epilogue_restores__+0x1c>

0000cb56 <f_readdir>:
    cb56:	a2 e0       	ldi	r26, 0x02	; 2
    cb58:	b0 e0       	ldi	r27, 0x00	; 0
    cb5a:	e1 eb       	ldi	r30, 0xB1	; 177
    cb5c:	f5 e6       	ldi	r31, 0x65	; 101
    cb5e:	0c 94 21 e5 	jmp	0x1ca42	; 0x1ca42 <__prologue_saves__+0x10>
    cb62:	7c 01       	movw	r14, r24
    cb64:	5b 01       	movw	r10, r22
    cb66:	be 01       	movw	r22, r28
    cb68:	6f 5f       	subi	r22, 0xFF	; 255
    cb6a:	7f 4f       	sbci	r23, 0xFF	; 255
    cb6c:	0e 94 eb 49 	call	0x93d6	; 0x93d6 <validate>
    cb70:	00 97       	sbiw	r24, 0x00	; 0
    cb72:	89 f5       	brne	.+98     	; 0xcbd6 <f_readdir+0x80>
    cb74:	a1 14       	cp	r10, r1
    cb76:	b1 04       	cpc	r11, r1
    cb78:	39 f4       	brne	.+14     	; 0xcb88 <f_readdir+0x32>
    cb7a:	40 e0       	ldi	r20, 0x00	; 0
    cb7c:	50 e0       	ldi	r21, 0x00	; 0
    cb7e:	ba 01       	movw	r22, r20
    cb80:	c7 01       	movw	r24, r14
    cb82:	0e 94 f2 51 	call	0xa3e4	; 0xa3e4 <dir_sdi>
    cb86:	27 c0       	rjmp	.+78     	; 0xcbd6 <f_readdir+0x80>
    cb88:	80 e0       	ldi	r24, 0x00	; 0
    cb8a:	92 e0       	ldi	r25, 0x02	; 2
    cb8c:	34 d5       	rcall	.+2664   	; 0xd5f6 <ff_memalloc>
    cb8e:	6c 01       	movw	r12, r24
    cb90:	00 97       	sbiw	r24, 0x00	; 0
    cb92:	f9 f0       	breq	.+62     	; 0xcbd2 <f_readdir+0x7c>
    cb94:	e9 81       	ldd	r30, Y+1	; 0x01
    cb96:	fa 81       	ldd	r31, Y+2	; 0x02
    cb98:	94 87       	std	Z+12, r25	; 0x0c
    cb9a:	83 87       	std	Z+11, r24	; 0x0b
    cb9c:	60 e0       	ldi	r22, 0x00	; 0
    cb9e:	70 e0       	ldi	r23, 0x00	; 0
    cba0:	c7 01       	movw	r24, r14
    cba2:	0e 94 8b 55 	call	0xab16	; 0xab16 <dir_read>
    cba6:	8c 01       	movw	r16, r24
    cba8:	8b 7f       	andi	r24, 0xFB	; 251
    cbaa:	89 2b       	or	r24, r25
    cbac:	71 f4       	brne	.+28     	; 0xcbca <f_readdir+0x74>
    cbae:	b5 01       	movw	r22, r10
    cbb0:	c7 01       	movw	r24, r14
    cbb2:	0e 94 cf 4a 	call	0x959e	; 0x959e <get_fileinfo>
    cbb6:	60 e0       	ldi	r22, 0x00	; 0
    cbb8:	70 e0       	ldi	r23, 0x00	; 0
    cbba:	c7 01       	movw	r24, r14
    cbbc:	0e 94 6a 54 	call	0xa8d4	; 0xa8d4 <dir_next>
    cbc0:	8c 01       	movw	r16, r24
    cbc2:	04 97       	sbiw	r24, 0x04	; 4
    cbc4:	11 f4       	brne	.+4      	; 0xcbca <f_readdir+0x74>
    cbc6:	00 e0       	ldi	r16, 0x00	; 0
    cbc8:	10 e0       	ldi	r17, 0x00	; 0
    cbca:	c6 01       	movw	r24, r12
    cbcc:	17 d5       	rcall	.+2606   	; 0xd5fc <ff_memfree>
    cbce:	c8 01       	movw	r24, r16
    cbd0:	02 c0       	rjmp	.+4      	; 0xcbd6 <f_readdir+0x80>
    cbd2:	81 e1       	ldi	r24, 0x11	; 17
    cbd4:	90 e0       	ldi	r25, 0x00	; 0
    cbd6:	22 96       	adiw	r28, 0x02	; 2
    cbd8:	ea e0       	ldi	r30, 0x0A	; 10
    cbda:	0c 94 3d e5 	jmp	0x1ca7a	; 0x1ca7a <__epilogue_restores__+0x10>

0000cbde <f_stat>:
    cbde:	a0 e3       	ldi	r26, 0x30	; 48
    cbe0:	b0 e0       	ldi	r27, 0x00	; 0
    cbe2:	e5 ef       	ldi	r30, 0xF5	; 245
    cbe4:	f5 e6       	ldi	r31, 0x65	; 101
    cbe6:	0c 94 23 e5 	jmp	0x1ca46	; 0x1ca46 <__prologue_saves__+0x14>
    cbea:	98 ab       	std	Y+48, r25	; 0x30
    cbec:	8f a7       	std	Y+47, r24	; 0x2f
    cbee:	6b 01       	movw	r12, r22
    cbf0:	40 e0       	ldi	r20, 0x00	; 0
    cbf2:	be 01       	movw	r22, r28
    cbf4:	6f 5f       	subi	r22, 0xFF	; 255
    cbf6:	7f 4f       	sbci	r23, 0xFF	; 255
    cbf8:	ce 01       	movw	r24, r28
    cbfa:	8f 96       	adiw	r24, 0x2f	; 47
    cbfc:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <mount_volume>
    cc00:	00 97       	sbiw	r24, 0x00	; 0
    cc02:	39 f5       	brne	.+78     	; 0xcc52 <f_stat+0x74>
    cc04:	80 e0       	ldi	r24, 0x00	; 0
    cc06:	92 e0       	ldi	r25, 0x02	; 2
    cc08:	f6 d4       	rcall	.+2540   	; 0xd5f6 <ff_memalloc>
    cc0a:	7c 01       	movw	r14, r24
    cc0c:	00 97       	sbiw	r24, 0x00	; 0
    cc0e:	f9 f0       	breq	.+62     	; 0xcc4e <f_stat+0x70>
    cc10:	e9 81       	ldd	r30, Y+1	; 0x01
    cc12:	fa 81       	ldd	r31, Y+2	; 0x02
    cc14:	94 87       	std	Z+12, r25	; 0x0c
    cc16:	83 87       	std	Z+11, r24	; 0x0b
    cc18:	6f a5       	ldd	r22, Y+47	; 0x2f
    cc1a:	78 a9       	ldd	r23, Y+48	; 0x30
    cc1c:	ce 01       	movw	r24, r28
    cc1e:	01 96       	adiw	r24, 0x01	; 1
    cc20:	0e 94 38 59 	call	0xb270	; 0xb270 <follow_path>
    cc24:	8c 01       	movw	r16, r24
    cc26:	89 2b       	or	r24, r25
    cc28:	71 f4       	brne	.+28     	; 0xcc46 <f_stat+0x68>
    cc2a:	88 a5       	ldd	r24, Y+40	; 0x28
    cc2c:	87 fd       	sbrc	r24, 7
    cc2e:	09 c0       	rjmp	.+18     	; 0xcc42 <f_stat+0x64>
    cc30:	c1 14       	cp	r12, r1
    cc32:	d1 04       	cpc	r13, r1
    cc34:	41 f0       	breq	.+16     	; 0xcc46 <f_stat+0x68>
    cc36:	b6 01       	movw	r22, r12
    cc38:	ce 01       	movw	r24, r28
    cc3a:	01 96       	adiw	r24, 0x01	; 1
    cc3c:	0e 94 cf 4a 	call	0x959e	; 0x959e <get_fileinfo>
    cc40:	02 c0       	rjmp	.+4      	; 0xcc46 <f_stat+0x68>
    cc42:	06 e0       	ldi	r16, 0x06	; 6
    cc44:	10 e0       	ldi	r17, 0x00	; 0
    cc46:	c7 01       	movw	r24, r14
    cc48:	d9 d4       	rcall	.+2482   	; 0xd5fc <ff_memfree>
    cc4a:	c8 01       	movw	r24, r16
    cc4c:	02 c0       	rjmp	.+4      	; 0xcc52 <f_stat+0x74>
    cc4e:	81 e1       	ldi	r24, 0x11	; 17
    cc50:	90 e0       	ldi	r25, 0x00	; 0
    cc52:	e0 96       	adiw	r28, 0x30	; 48
    cc54:	e8 e0       	ldi	r30, 0x08	; 8
    cc56:	0c 94 3f e5 	jmp	0x1ca7e	; 0x1ca7e <__epilogue_restores__+0x14>

0000cc5a <f_getfree>:
    cc5a:	aa e0       	ldi	r26, 0x0A	; 10
    cc5c:	b0 e0       	ldi	r27, 0x00	; 0
    cc5e:	e3 e3       	ldi	r30, 0x33	; 51
    cc60:	f6 e6       	ldi	r31, 0x66	; 102
    cc62:	0c 94 19 e5 	jmp	0x1ca32	; 0x1ca32 <__prologue_saves__>
    cc66:	9c 83       	std	Y+4, r25	; 0x04
    cc68:	8b 83       	std	Y+3, r24	; 0x03
    cc6a:	7e 83       	std	Y+6, r23	; 0x06
    cc6c:	6d 83       	std	Y+5, r22	; 0x05
    cc6e:	7a 01       	movw	r14, r20
    cc70:	40 e0       	ldi	r20, 0x00	; 0
    cc72:	be 01       	movw	r22, r28
    cc74:	6f 5f       	subi	r22, 0xFF	; 255
    cc76:	7f 4f       	sbci	r23, 0xFF	; 255
    cc78:	ce 01       	movw	r24, r28
    cc7a:	03 96       	adiw	r24, 0x03	; 3
    cc7c:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <mount_volume>
    cc80:	8c 01       	movw	r16, r24
    cc82:	89 2b       	or	r24, r25
    cc84:	09 f0       	breq	.+2      	; 0xcc88 <f_getfree+0x2e>
    cc86:	c4 c0       	rjmp	.+392    	; 0xce10 <f_getfree+0x1b6>
    cc88:	69 80       	ldd	r6, Y+1	; 0x01
    cc8a:	7a 80       	ldd	r7, Y+2	; 0x02
    cc8c:	d7 01       	movw	r26, r14
    cc8e:	6d 92       	st	X+, r6
    cc90:	7c 92       	st	X, r7
    cc92:	f3 01       	movw	r30, r6
    cc94:	81 89       	ldd	r24, Z+17	; 0x11
    cc96:	92 89       	ldd	r25, Z+18	; 0x12
    cc98:	a3 89       	ldd	r26, Z+19	; 0x13
    cc9a:	b4 89       	ldd	r27, Z+20	; 0x14
    cc9c:	81 8c       	ldd	r8, Z+25	; 0x19
    cc9e:	92 8c       	ldd	r9, Z+26	; 0x1a
    cca0:	a3 8c       	ldd	r10, Z+27	; 0x1b
    cca2:	b4 8c       	ldd	r11, Z+28	; 0x1c
    cca4:	b5 01       	movw	r22, r10
    cca6:	a4 01       	movw	r20, r8
    cca8:	42 50       	subi	r20, 0x02	; 2
    ccaa:	51 09       	sbc	r21, r1
    ccac:	61 09       	sbc	r22, r1
    ccae:	71 09       	sbc	r23, r1
    ccb0:	48 17       	cp	r20, r24
    ccb2:	59 07       	cpc	r21, r25
    ccb4:	6a 07       	cpc	r22, r26
    ccb6:	7b 07       	cpc	r23, r27
    ccb8:	38 f0       	brcs	.+14     	; 0xccc8 <f_getfree+0x6e>
    ccba:	ed 81       	ldd	r30, Y+5	; 0x05
    ccbc:	fe 81       	ldd	r31, Y+6	; 0x06
    ccbe:	80 83       	st	Z, r24
    ccc0:	91 83       	std	Z+1, r25	; 0x01
    ccc2:	a2 83       	std	Z+2, r26	; 0x02
    ccc4:	b3 83       	std	Z+3, r27	; 0x03
    ccc6:	a4 c0       	rjmp	.+328    	; 0xce10 <f_getfree+0x1b6>
    ccc8:	80 81       	ld	r24, Z
    ccca:	81 30       	cpi	r24, 0x01	; 1
    cccc:	a1 f5       	brne	.+104    	; 0xcd36 <f_getfree+0xdc>
    ccce:	82 e0       	ldi	r24, 0x02	; 2
    ccd0:	88 2e       	mov	r8, r24
    ccd2:	91 2c       	mov	r9, r1
    ccd4:	a1 2c       	mov	r10, r1
    ccd6:	b1 2c       	mov	r11, r1
    ccd8:	c1 2c       	mov	r12, r1
    ccda:	d1 2c       	mov	r13, r1
    ccdc:	76 01       	movw	r14, r12
    ccde:	b5 01       	movw	r22, r10
    cce0:	a4 01       	movw	r20, r8
    cce2:	c3 01       	movw	r24, r6
    cce4:	0e 94 3e 51 	call	0xa27c	; 0xa27c <get_fat.isra.10>
    cce8:	6f 3f       	cpi	r22, 0xFF	; 255
    ccea:	bf ef       	ldi	r27, 0xFF	; 255
    ccec:	7b 07       	cpc	r23, r27
    ccee:	8b 07       	cpc	r24, r27
    ccf0:	9b 07       	cpc	r25, r27
    ccf2:	09 f4       	brne	.+2      	; 0xccf6 <f_getfree+0x9c>
    ccf4:	76 c0       	rjmp	.+236    	; 0xcde2 <f_getfree+0x188>
    ccf6:	61 30       	cpi	r22, 0x01	; 1
    ccf8:	71 05       	cpc	r23, r1
    ccfa:	81 05       	cpc	r24, r1
    ccfc:	91 05       	cpc	r25, r1
    ccfe:	09 f4       	brne	.+2      	; 0xcd02 <f_getfree+0xa8>
    cd00:	73 c0       	rjmp	.+230    	; 0xcde8 <f_getfree+0x18e>
    cd02:	67 2b       	or	r22, r23
    cd04:	68 2b       	or	r22, r24
    cd06:	69 2b       	or	r22, r25
    cd08:	29 f4       	brne	.+10     	; 0xcd14 <f_getfree+0xba>
    cd0a:	ef ef       	ldi	r30, 0xFF	; 255
    cd0c:	ce 1a       	sub	r12, r30
    cd0e:	de 0a       	sbc	r13, r30
    cd10:	ee 0a       	sbc	r14, r30
    cd12:	fe 0a       	sbc	r15, r30
    cd14:	ff ef       	ldi	r31, 0xFF	; 255
    cd16:	8f 1a       	sub	r8, r31
    cd18:	9f 0a       	sbc	r9, r31
    cd1a:	af 0a       	sbc	r10, r31
    cd1c:	bf 0a       	sbc	r11, r31
    cd1e:	e9 81       	ldd	r30, Y+1	; 0x01
    cd20:	fa 81       	ldd	r31, Y+2	; 0x02
    cd22:	81 8d       	ldd	r24, Z+25	; 0x19
    cd24:	92 8d       	ldd	r25, Z+26	; 0x1a
    cd26:	a3 8d       	ldd	r26, Z+27	; 0x1b
    cd28:	b4 8d       	ldd	r27, Z+28	; 0x1c
    cd2a:	88 16       	cp	r8, r24
    cd2c:	99 06       	cpc	r9, r25
    cd2e:	aa 06       	cpc	r10, r26
    cd30:	bb 06       	cpc	r11, r27
    cd32:	a8 f2       	brcs	.-86     	; 0xccde <f_getfree+0x84>
    cd34:	5d c0       	rjmp	.+186    	; 0xcdf0 <f_getfree+0x196>
    cd36:	f3 01       	movw	r30, r6
    cd38:	45 a0       	ldd	r4, Z+37	; 0x25
    cd3a:	56 a0       	ldd	r5, Z+38	; 0x26
    cd3c:	67 a0       	ldd	r6, Z+39	; 0x27
    cd3e:	70 a4       	ldd	r7, Z+40	; 0x28
    cd40:	21 2c       	mov	r2, r1
    cd42:	31 2c       	mov	r3, r1
    cd44:	c1 2c       	mov	r12, r1
    cd46:	d1 2c       	mov	r13, r1
    cd48:	76 01       	movw	r14, r12
    cd4a:	21 14       	cp	r2, r1
    cd4c:	31 04       	cpc	r3, r1
    cd4e:	b1 f4       	brne	.+44     	; 0xcd7c <f_getfree+0x122>
    cd50:	d3 01       	movw	r26, r6
    cd52:	c2 01       	movw	r24, r4
    cd54:	01 96       	adiw	r24, 0x01	; 1
    cd56:	a1 1d       	adc	r26, r1
    cd58:	b1 1d       	adc	r27, r1
    cd5a:	8f 83       	std	Y+7, r24	; 0x07
    cd5c:	98 87       	std	Y+8, r25	; 0x08
    cd5e:	a9 87       	std	Y+9, r26	; 0x09
    cd60:	ba 87       	std	Y+10, r27	; 0x0a
    cd62:	b3 01       	movw	r22, r6
    cd64:	a2 01       	movw	r20, r4
    cd66:	89 81       	ldd	r24, Y+1	; 0x01
    cd68:	9a 81       	ldd	r25, Y+2	; 0x02
    cd6a:	0e 94 6e 4d 	call	0x9adc	; 0x9adc <move_window>
    cd6e:	00 97       	sbiw	r24, 0x00	; 0
    cd70:	09 f0       	breq	.+2      	; 0xcd74 <f_getfree+0x11a>
    cd72:	3d c0       	rjmp	.+122    	; 0xcdee <f_getfree+0x194>
    cd74:	4f 80       	ldd	r4, Y+7	; 0x07
    cd76:	58 84       	ldd	r5, Y+8	; 0x08
    cd78:	69 84       	ldd	r6, Y+9	; 0x09
    cd7a:	7a 84       	ldd	r7, Y+10	; 0x0a
    cd7c:	e9 81       	ldd	r30, Y+1	; 0x01
    cd7e:	fa 81       	ldd	r31, Y+2	; 0x02
    cd80:	80 81       	ld	r24, Z
    cd82:	82 30       	cpi	r24, 0x02	; 2
    cd84:	79 f4       	brne	.+30     	; 0xcda4 <f_getfree+0x14a>
    cd86:	e2 0d       	add	r30, r2
    cd88:	f3 1d       	adc	r31, r3
    cd8a:	85 a9       	ldd	r24, Z+53	; 0x35
    cd8c:	96 a9       	ldd	r25, Z+54	; 0x36
    cd8e:	89 2b       	or	r24, r25
    cd90:	29 f4       	brne	.+10     	; 0xcd9c <f_getfree+0x142>
    cd92:	9f ef       	ldi	r25, 0xFF	; 255
    cd94:	c9 1a       	sub	r12, r25
    cd96:	d9 0a       	sbc	r13, r25
    cd98:	e9 0a       	sbc	r14, r25
    cd9a:	f9 0a       	sbc	r15, r25
    cd9c:	a2 e0       	ldi	r26, 0x02	; 2
    cd9e:	2a 0e       	add	r2, r26
    cda0:	31 1c       	adc	r3, r1
    cda2:	15 c0       	rjmp	.+42     	; 0xcdce <f_getfree+0x174>
    cda4:	cf 01       	movw	r24, r30
    cda6:	c5 96       	adiw	r24, 0x35	; 53
    cda8:	82 0d       	add	r24, r2
    cdaa:	93 1d       	adc	r25, r3
    cdac:	0e 94 93 48 	call	0x9126	; 0x9126 <ld_dword>
    cdb0:	dc 01       	movw	r26, r24
    cdb2:	cb 01       	movw	r24, r22
    cdb4:	bf 70       	andi	r27, 0x0F	; 15
    cdb6:	89 2b       	or	r24, r25
    cdb8:	8a 2b       	or	r24, r26
    cdba:	8b 2b       	or	r24, r27
    cdbc:	29 f4       	brne	.+10     	; 0xcdc8 <f_getfree+0x16e>
    cdbe:	bf ef       	ldi	r27, 0xFF	; 255
    cdc0:	cb 1a       	sub	r12, r27
    cdc2:	db 0a       	sbc	r13, r27
    cdc4:	eb 0a       	sbc	r14, r27
    cdc6:	fb 0a       	sbc	r15, r27
    cdc8:	e4 e0       	ldi	r30, 0x04	; 4
    cdca:	2e 0e       	add	r2, r30
    cdcc:	31 1c       	adc	r3, r1
    cdce:	f1 e0       	ldi	r31, 0x01	; 1
    cdd0:	3f 22       	and	r3, r31
    cdd2:	21 e0       	ldi	r18, 0x01	; 1
    cdd4:	82 1a       	sub	r8, r18
    cdd6:	91 08       	sbc	r9, r1
    cdd8:	a1 08       	sbc	r10, r1
    cdda:	b1 08       	sbc	r11, r1
    cddc:	09 f0       	breq	.+2      	; 0xcde0 <f_getfree+0x186>
    cdde:	b5 cf       	rjmp	.-150    	; 0xcd4a <f_getfree+0xf0>
    cde0:	07 c0       	rjmp	.+14     	; 0xcdf0 <f_getfree+0x196>
    cde2:	01 e0       	ldi	r16, 0x01	; 1
    cde4:	10 e0       	ldi	r17, 0x00	; 0
    cde6:	04 c0       	rjmp	.+8      	; 0xcdf0 <f_getfree+0x196>
    cde8:	02 e0       	ldi	r16, 0x02	; 2
    cdea:	10 e0       	ldi	r17, 0x00	; 0
    cdec:	01 c0       	rjmp	.+2      	; 0xcdf0 <f_getfree+0x196>
    cdee:	8c 01       	movw	r16, r24
    cdf0:	ad 81       	ldd	r26, Y+5	; 0x05
    cdf2:	be 81       	ldd	r27, Y+6	; 0x06
    cdf4:	cd 92       	st	X+, r12
    cdf6:	dd 92       	st	X+, r13
    cdf8:	ed 92       	st	X+, r14
    cdfa:	fc 92       	st	X, r15
    cdfc:	13 97       	sbiw	r26, 0x03	; 3
    cdfe:	e9 81       	ldd	r30, Y+1	; 0x01
    ce00:	fa 81       	ldd	r31, Y+2	; 0x02
    ce02:	c1 8a       	std	Z+17, r12	; 0x11
    ce04:	d2 8a       	std	Z+18, r13	; 0x12
    ce06:	e3 8a       	std	Z+19, r14	; 0x13
    ce08:	f4 8a       	std	Z+20, r15	; 0x14
    ce0a:	84 81       	ldd	r24, Z+4	; 0x04
    ce0c:	81 60       	ori	r24, 0x01	; 1
    ce0e:	84 83       	std	Z+4, r24	; 0x04
    ce10:	c8 01       	movw	r24, r16
    ce12:	2a 96       	adiw	r28, 0x0a	; 10
    ce14:	e2 e1       	ldi	r30, 0x12	; 18
    ce16:	0c 94 35 e5 	jmp	0x1ca6a	; 0x1ca6a <__epilogue_restores__>

0000ce1a <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
    ce1a:	a0 e6       	ldi	r26, 0x60	; 96
    ce1c:	b0 e0       	ldi	r27, 0x00	; 0
    ce1e:	e3 e1       	ldi	r30, 0x13	; 19
    ce20:	f7 e6       	ldi	r31, 0x67	; 103
    ce22:	0c 94 20 e5 	jmp	0x1ca40	; 0x1ca40 <__prologue_saves__+0xe>
    ce26:	a1 96       	adiw	r28, 0x21	; 33
    ce28:	9f af       	std	Y+63, r25	; 0x3f
    ce2a:	8e af       	std	Y+62, r24	; 0x3e
    ce2c:	a1 97       	sbiw	r28, 0x21	; 33
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
    ce2e:	42 e0       	ldi	r20, 0x02	; 2
    ce30:	be 01       	movw	r22, r28
    ce32:	63 5a       	subi	r22, 0xA3	; 163
    ce34:	7f 4f       	sbci	r23, 0xFF	; 255
    ce36:	ce 01       	movw	r24, r28
    ce38:	81 5a       	subi	r24, 0xA1	; 161
    ce3a:	9f 4f       	sbci	r25, 0xFF	; 255
    ce3c:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <mount_volume>
	if (res == FR_OK) {
    ce40:	00 97       	sbiw	r24, 0x00	; 0
    ce42:	09 f0       	breq	.+2      	; 0xce46 <f_unlink+0x2c>
    ce44:	8c c0       	rjmp	.+280    	; 0xcf5e <f_unlink+0x144>
		dj.obj.fs = fs;
    ce46:	6f 96       	adiw	r28, 0x1f	; 31
    ce48:	8e ad       	ldd	r24, Y+62	; 0x3e
    ce4a:	9f ad       	ldd	r25, Y+63	; 0x3f
    ce4c:	6f 97       	sbiw	r28, 0x1f	; 31
    ce4e:	98 ab       	std	Y+48, r25	; 0x30
    ce50:	8f a7       	std	Y+47, r24	; 0x2f
		INIT_NAMBUF(fs);
    ce52:	80 e0       	ldi	r24, 0x00	; 0
    ce54:	92 e0       	ldi	r25, 0x02	; 2
    ce56:	cf d3       	rcall	.+1950   	; 0xd5f6 <ff_memalloc>
    ce58:	5c 01       	movw	r10, r24
    ce5a:	00 97       	sbiw	r24, 0x00	; 0
    ce5c:	09 f4       	brne	.+2      	; 0xce60 <f_unlink+0x46>
    ce5e:	49 c0       	rjmp	.+146    	; 0xcef2 <f_unlink+0xd8>
    ce60:	6f 96       	adiw	r28, 0x1f	; 31
    ce62:	ee ad       	ldd	r30, Y+62	; 0x3e
    ce64:	ff ad       	ldd	r31, Y+63	; 0x3f
    ce66:	6f 97       	sbiw	r28, 0x1f	; 31
    ce68:	94 87       	std	Z+12, r25	; 0x0c
    ce6a:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);		/* Follow the file path */
    ce6c:	a1 96       	adiw	r28, 0x21	; 33
    ce6e:	6e ad       	ldd	r22, Y+62	; 0x3e
    ce70:	7f ad       	ldd	r23, Y+63	; 0x3f
    ce72:	a1 97       	sbiw	r28, 0x21	; 33
    ce74:	ce 01       	movw	r24, r28
    ce76:	8f 96       	adiw	r24, 0x2f	; 47
    ce78:	0e 94 38 59 	call	0xb270	; 0xb270 <follow_path>
    ce7c:	8c 01       	movw	r16, r24
		if (FF_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
    ce7e:	89 2b       	or	r24, r25
    ce80:	a1 f5       	brne	.+104    	; 0xceea <f_unlink+0xd0>
    ce82:	67 96       	adiw	r28, 0x17	; 23
    ce84:	8f ad       	ldd	r24, Y+63	; 0x3f
    ce86:	67 97       	sbiw	r28, 0x17	; 23
    ce88:	85 fd       	sbrc	r24, 5
    ce8a:	36 c0       	rjmp	.+108    	; 0xcef8 <f_unlink+0xde>
		}
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
    ce8c:	87 fd       	sbrc	r24, 7
    ce8e:	34 c0       	rjmp	.+104    	; 0xcef8 <f_unlink+0xde>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
			} else {
				if (dj.obj.attr & AM_RDO) {
    ce90:	9b a8       	ldd	r9, Y+51	; 0x33
    ce92:	90 fc       	sbrc	r9, 0
    ce94:	40 c0       	rjmp	.+128    	; 0xcf16 <f_unlink+0xfc>
					init_alloc_info(fs, &obj);
					dclst = obj.sclust;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
    ce96:	6f 96       	adiw	r28, 0x1f	; 31
    ce98:	0e ad       	ldd	r16, Y+62	; 0x3e
    ce9a:	1f ad       	ldd	r17, Y+63	; 0x3f
    ce9c:	6f 97       	sbiw	r28, 0x1f	; 31
    ce9e:	2b 96       	adiw	r28, 0x0b	; 11
    cea0:	6e ad       	ldd	r22, Y+62	; 0x3e
    cea2:	7f ad       	ldd	r23, Y+63	; 0x3f
    cea4:	2b 97       	sbiw	r28, 0x0b	; 11
    cea6:	f8 01       	movw	r30, r16
    cea8:	80 81       	ld	r24, Z
    ceaa:	0e 94 df 4b 	call	0x97be	; 0x97be <ld_clust.isra.4>
    ceae:	6b 01       	movw	r12, r22
    ceb0:	7c 01       	movw	r14, r24
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
    ceb2:	94 fe       	sbrs	r9, 4
    ceb4:	33 c0       	rjmp	.+102    	; 0xcf1c <f_unlink+0x102>
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
    ceb6:	f8 01       	movw	r30, r16
    ceb8:	85 89       	ldd	r24, Z+21	; 0x15
    ceba:	96 89       	ldd	r25, Z+22	; 0x16
    cebc:	a7 89       	ldd	r26, Z+23	; 0x17
    cebe:	b0 8d       	ldd	r27, Z+24	; 0x18
    cec0:	c8 16       	cp	r12, r24
    cec2:	d9 06       	cpc	r13, r25
    cec4:	ea 06       	cpc	r14, r26
    cec6:	fb 06       	cpc	r15, r27
    cec8:	31 f1       	breq	.+76     	; 0xcf16 <f_unlink+0xfc>
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;				/* Open the sub-directory */
    ceca:	1a 83       	std	Y+2, r17	; 0x02
    cecc:	09 83       	std	Y+1, r16	; 0x01
						sdj.obj.sclust = dclst;
    cece:	cf 82       	std	Y+7, r12	; 0x07
    ced0:	d8 86       	std	Y+8, r13	; 0x08
    ced2:	e9 86       	std	Y+9, r14	; 0x09
    ced4:	fa 86       	std	Y+10, r15	; 0x0a
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
    ced6:	40 e0       	ldi	r20, 0x00	; 0
    ced8:	50 e0       	ldi	r21, 0x00	; 0
    ceda:	ba 01       	movw	r22, r20
    cedc:	ce 01       	movw	r24, r28
    cede:	01 96       	adiw	r24, 0x01	; 1
    cee0:	0e 94 f2 51 	call	0xa3e4	; 0xa3e4 <dir_sdi>
    cee4:	8c 01       	movw	r16, r24
						if (res == FR_OK) {
    cee6:	89 2b       	or	r24, r25
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    cee8:	51 f0       	breq	.+20     	; 0xcefe <f_unlink+0xe4>
    ceea:	c5 01       	movw	r24, r10
    ceec:	87 d3       	rcall	.+1806   	; 0xd5fc <ff_memfree>
    ceee:	c8 01       	movw	r24, r16

	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    cef0:	36 c0       	rjmp	.+108    	; 0xcf5e <f_unlink+0x144>
    cef2:	81 e1       	ldi	r24, 0x11	; 17
    cef4:	90 e0       	ldi	r25, 0x00	; 0
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
    cef6:	33 c0       	rjmp	.+102    	; 0xcf5e <f_unlink+0x144>
    cef8:	06 e0       	ldi	r16, 0x06	; 6
    cefa:	10 e0       	ldi	r17, 0x00	; 0
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
						if (res == FR_OK) {
							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
    cefc:	f6 cf       	rjmp	.-20     	; 0xceea <f_unlink+0xd0>
    cefe:	60 e0       	ldi	r22, 0x00	; 0
    cf00:	70 e0       	ldi	r23, 0x00	; 0
    cf02:	ce 01       	movw	r24, r28
    cf04:	01 96       	adiw	r24, 0x01	; 1
    cf06:	0e 94 8b 55 	call	0xab16	; 0xab16 <dir_read>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
    cf0a:	8c 01       	movw	r16, r24
    cf0c:	00 97       	sbiw	r24, 0x00	; 0
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
    cf0e:	19 f0       	breq	.+6      	; 0xcf16 <f_unlink+0xfc>
    cf10:	04 97       	sbiw	r24, 0x04	; 4
    cf12:	21 f0       	breq	.+8      	; 0xcf1c <f_unlink+0x102>
					dclst = ld_clust(fs, dj.dir);
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
						res = FR_DENIED;
    cf14:	ea cf       	rjmp	.-44     	; 0xceea <f_unlink+0xd0>
    cf16:	07 e0       	ldi	r16, 0x07	; 7
    cf18:	10 e0       	ldi	r17, 0x00	; 0
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);			/* Remove the directory entry */
    cf1a:	e7 cf       	rjmp	.-50     	; 0xceea <f_unlink+0xd0>
    cf1c:	ce 01       	movw	r24, r28
    cf1e:	8f 96       	adiw	r24, 0x2f	; 47
    cf20:	0e 94 54 56 	call	0xaca8	; 0xaca8 <dir_remove>
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
    cf24:	8c 01       	movw	r16, r24
    cf26:	89 2b       	or	r24, r25
    cf28:	01 f7       	brne	.-64     	; 0xceea <f_unlink+0xd0>
    cf2a:	c1 14       	cp	r12, r1
    cf2c:	d1 04       	cpc	r13, r1
    cf2e:	e1 04       	cpc	r14, r1
    cf30:	f1 04       	cpc	r15, r1
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    cf32:	41 f4       	brne	.+16     	; 0xcf44 <f_unlink+0x12a>
    cf34:	6f 96       	adiw	r28, 0x1f	; 31
    cf36:	8e ad       	ldd	r24, Y+62	; 0x3e
    cf38:	9f ad       	ldd	r25, Y+63	; 0x3f
    cf3a:	6f 97       	sbiw	r28, 0x1f	; 31
    cf3c:	0e 94 54 4c 	call	0x98a8	; 0x98a8 <sync_fs>
    cf40:	8c 01       	movw	r16, r24
				res = dir_remove(&dj);			/* Remove the directory entry */
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
#if FF_FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
    cf42:	d3 cf       	rjmp	.-90     	; 0xceea <f_unlink+0xd0>
    cf44:	00 e0       	ldi	r16, 0x00	; 0
    cf46:	10 e0       	ldi	r17, 0x00	; 0
    cf48:	98 01       	movw	r18, r16
    cf4a:	b7 01       	movw	r22, r14
    cf4c:	a6 01       	movw	r20, r12
    cf4e:	ce 01       	movw	r24, r28
    cf50:	8f 96       	adiw	r24, 0x2f	; 47
    cf52:	0e 94 d9 53 	call	0xa7b2	; 0xa7b2 <remove_chain>
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    cf56:	8c 01       	movw	r16, r24
    cf58:	89 2b       	or	r24, r25
    cf5a:	39 f6       	brne	.-114    	; 0xceea <f_unlink+0xd0>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cf5c:	eb cf       	rjmp	.-42     	; 0xcf34 <f_unlink+0x11a>
    cf5e:	c0 5a       	subi	r28, 0xA0	; 160
    cf60:	df 4f       	sbci	r29, 0xFF	; 255
    cf62:	eb e0       	ldi	r30, 0x0B	; 11
    cf64:	0c 94 3c e5 	jmp	0x1ca78	; 0x1ca78 <__epilogue_restores__+0xe>

0000cf68 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
    cf68:	a0 e4       	ldi	r26, 0x40	; 64
    cf6a:	b0 e0       	ldi	r27, 0x00	; 0
    cf6c:	ea eb       	ldi	r30, 0xBA	; 186
    cf6e:	f7 e6       	ldi	r31, 0x67	; 103
    cf70:	0c 94 1b e5 	jmp	0x1ca36	; 0x1ca36 <__prologue_saves__+0x4>
    cf74:	21 96       	adiw	r28, 0x01	; 1
    cf76:	9f af       	std	Y+63, r25	; 0x3f
    cf78:	8e af       	std	Y+62, r24	; 0x3e
    cf7a:	21 97       	sbiw	r28, 0x01	; 1
	FATFS *fs;
	DWORD dcl, pcl, tm;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    cf7c:	42 e0       	ldi	r20, 0x02	; 2
    cf7e:	be 01       	movw	r22, r28
    cf80:	63 5c       	subi	r22, 0xC3	; 195
    cf82:	7f 4f       	sbci	r23, 0xFF	; 255
    cf84:	ce 01       	movw	r24, r28
    cf86:	cf 96       	adiw	r24, 0x3f	; 63
    cf88:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <mount_volume>
	if (res == FR_OK) {
    cf8c:	00 97       	sbiw	r24, 0x00	; 0
    cf8e:	09 f0       	breq	.+2      	; 0xcf92 <f_mkdir+0x2a>
    cf90:	d6 c0       	rjmp	.+428    	; 0xd13e <f_mkdir+0x1d6>
		dj.obj.fs = fs;
    cf92:	8d ad       	ldd	r24, Y+61	; 0x3d
    cf94:	9e ad       	ldd	r25, Y+62	; 0x3e
    cf96:	9a 83       	std	Y+2, r25	; 0x02
    cf98:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    cf9a:	80 e0       	ldi	r24, 0x00	; 0
    cf9c:	92 e0       	ldi	r25, 0x02	; 2
    cf9e:	2b d3       	rcall	.+1622   	; 0xd5f6 <ff_memalloc>
    cfa0:	6c 01       	movw	r12, r24
    cfa2:	00 97       	sbiw	r24, 0x00	; 0
    cfa4:	e9 f0       	breq	.+58     	; 0xcfe0 <f_mkdir+0x78>
    cfa6:	ed ad       	ldd	r30, Y+61	; 0x3d
    cfa8:	fe ad       	ldd	r31, Y+62	; 0x3e
    cfaa:	94 87       	std	Z+12, r25	; 0x0c
    cfac:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);			/* Follow the file path */
    cfae:	21 96       	adiw	r28, 0x01	; 1
    cfb0:	6e ad       	ldd	r22, Y+62	; 0x3e
    cfb2:	7f ad       	ldd	r23, Y+63	; 0x3f
    cfb4:	21 97       	sbiw	r28, 0x01	; 1
    cfb6:	ce 01       	movw	r24, r28
    cfb8:	01 96       	adiw	r24, 0x01	; 1
    cfba:	0e 94 38 59 	call	0xb270	; 0xb270 <follow_path>
    cfbe:	7c 01       	movw	r14, r24
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    cfc0:	89 2b       	or	r24, r25
    cfc2:	89 f0       	breq	.+34     	; 0xcfe6 <f_mkdir+0x7e>
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
    cfc4:	84 e0       	ldi	r24, 0x04	; 4
    cfc6:	e8 16       	cp	r14, r24
    cfc8:	f1 04       	cpc	r15, r1
    cfca:	31 f4       	brne	.+12     	; 0xcfd8 <f_mkdir+0x70>
    cfcc:	88 a5       	ldd	r24, Y+40	; 0x28
    cfce:	85 ff       	sbrs	r24, 5
    cfd0:	0e c0       	rjmp	.+28     	; 0xcfee <f_mkdir+0x86>
			res = FR_INVALID_NAME;
    cfd2:	26 e0       	ldi	r18, 0x06	; 6
    cfd4:	e2 2e       	mov	r14, r18
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
			}
		}
		FREE_NAMBUF();
    cfd6:	f1 2c       	mov	r15, r1
    cfd8:	c6 01       	movw	r24, r12
    cfda:	10 d3       	rcall	.+1568   	; 0xd5fc <ff_memfree>
    cfdc:	c7 01       	movw	r24, r14


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    cfde:	af c0       	rjmp	.+350    	; 0xd13e <f_mkdir+0x1d6>
    cfe0:	81 e1       	ldi	r24, 0x11	; 17
    cfe2:	90 e0       	ldi	r25, 0x00	; 0
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    cfe4:	ac c0       	rjmp	.+344    	; 0xd13e <f_mkdir+0x1d6>
    cfe6:	38 e0       	ldi	r19, 0x08	; 8
    cfe8:	e3 2e       	mov	r14, r19
    cfea:	f1 2c       	mov	r15, r1
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
    cfec:	f5 cf       	rjmp	.-22     	; 0xcfd8 <f_mkdir+0x70>
    cfee:	8d ad       	ldd	r24, Y+61	; 0x3d
    cff0:	9e ad       	ldd	r25, Y+62	; 0x3e
    cff2:	98 ab       	std	Y+48, r25	; 0x30
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
    cff4:	8f a7       	std	Y+47, r24	; 0x2f
    cff6:	40 e0       	ldi	r20, 0x00	; 0
    cff8:	50 e0       	ldi	r21, 0x00	; 0
    cffa:	ba 01       	movw	r22, r20
    cffc:	ce 01       	movw	r24, r28
    cffe:	8f 96       	adiw	r24, 0x2f	; 47
    d000:	0e 94 b3 52 	call	0xa566	; 0xa566 <create_chain>
    d004:	4b 01       	movw	r8, r22
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    d006:	5c 01       	movw	r10, r24
    d008:	67 2b       	or	r22, r23
    d00a:	68 2b       	or	r22, r24
    d00c:	69 2b       	or	r22, r25
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    d00e:	09 f1       	breq	.+66     	; 0xd052 <f_mkdir+0xea>
    d010:	e1 e0       	ldi	r30, 0x01	; 1
    d012:	8e 16       	cp	r8, r30
    d014:	91 04       	cpc	r9, r1
    d016:	a1 04       	cpc	r10, r1
    d018:	b1 04       	cpc	r11, r1
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
    d01a:	61 f0       	breq	.+24     	; 0xd034 <f_mkdir+0xcc>
    d01c:	ff ef       	ldi	r31, 0xFF	; 255
    d01e:	8f 16       	cp	r8, r31
    d020:	9f 06       	cpc	r9, r31
    d022:	af 06       	cpc	r10, r31
    d024:	bf 06       	cpc	r11, r31
			tm = GET_FATTIME();
    d026:	d9 f4       	brne	.+54     	; 0xd05e <f_mkdir+0xf6>
    d028:	0e 94 ff 71 	call	0xe3fe	; 0xe3fe <get_fattime>
    d02c:	ee 24       	eor	r14, r14
    d02e:	e3 94       	inc	r14
    d030:	f1 2c       	mov	r15, r1
    d032:	05 c0       	rjmp	.+10     	; 0xd03e <f_mkdir+0xd6>
    d034:	0e 94 ff 71 	call	0xe3fe	; 0xe3fe <get_fattime>
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    d038:	92 e0       	ldi	r25, 0x02	; 2
    d03a:	e9 2e       	mov	r14, r25
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
    d03c:	f1 2c       	mov	r15, r1
    d03e:	00 e0       	ldi	r16, 0x00	; 0
    d040:	10 e0       	ldi	r17, 0x00	; 0
    d042:	98 01       	movw	r18, r16
    d044:	b5 01       	movw	r22, r10
    d046:	a4 01       	movw	r20, r8
    d048:	ce 01       	movw	r24, r28
    d04a:	8f 96       	adiw	r24, 0x2f	; 47
    d04c:	0e 94 d9 53 	call	0xa7b2	; 0xa7b2 <remove_chain>
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
			tm = GET_FATTIME();
    d050:	c3 cf       	rjmp	.-122    	; 0xcfd8 <f_mkdir+0x70>
    d052:	0e 94 ff 71 	call	0xe3fe	; 0xe3fe <get_fattime>
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    d056:	87 e0       	ldi	r24, 0x07	; 7
    d058:	e8 2e       	mov	r14, r24
    d05a:	f1 2c       	mov	r15, r1
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
			tm = GET_FATTIME();
    d05c:	f0 cf       	rjmp	.-32     	; 0xd03e <f_mkdir+0xd6>
    d05e:	0e 94 ff 71 	call	0xe3fe	; 0xe3fe <get_fattime>
    d062:	2b 01       	movw	r4, r22
			if (res == FR_OK) {
				res = dir_clear(fs, dcl);		/* Clean up the new table */
    d064:	3c 01       	movw	r6, r24
    d066:	b5 01       	movw	r22, r10
    d068:	a4 01       	movw	r20, r8
    d06a:	8d ad       	ldd	r24, Y+61	; 0x3d
    d06c:	9e ad       	ldd	r25, Y+62	; 0x3e
    d06e:	0e 94 c6 4c 	call	0x998c	; 0x998c <dir_clear>
				if (res == FR_OK) {
    d072:	7c 01       	movw	r14, r24
    d074:	89 2b       	or	r24, r25
					if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* Create dot entries (FAT only) */
						mem_set(fs->win + DIR_Name, ' ', 11);	/* Create "." entry */
    d076:	19 f7       	brne	.-58     	; 0xd03e <f_mkdir+0xd6>
    d078:	8d ad       	ldd	r24, Y+61	; 0x3d
    d07a:	9e ad       	ldd	r25, Y+62	; 0x3e
    d07c:	4b e0       	ldi	r20, 0x0B	; 11
    d07e:	50 e0       	ldi	r21, 0x00	; 0
    d080:	60 e2       	ldi	r22, 0x20	; 32
    d082:	70 e0       	ldi	r23, 0x00	; 0
    d084:	c5 96       	adiw	r24, 0x35	; 53
    d086:	0e 94 ae 48 	call	0x915c	; 0x915c <mem_set>
						fs->win[DIR_Name] = '.';
    d08a:	8d ad       	ldd	r24, Y+61	; 0x3d
    d08c:	9e ad       	ldd	r25, Y+62	; 0x3e
    d08e:	1e e2       	ldi	r17, 0x2E	; 46
    d090:	fc 01       	movw	r30, r24
						fs->win[DIR_Attr] = AM_DIR;
    d092:	15 ab       	std	Z+53, r17	; 0x35
    d094:	e0 5c       	subi	r30, 0xC0	; 192
    d096:	ff 4f       	sbci	r31, 0xFF	; 255
    d098:	20 e1       	ldi	r18, 0x10	; 16
						st_dword(fs->win + DIR_ModTime, tm);
    d09a:	20 83       	st	Z, r18
    d09c:	b3 01       	movw	r22, r6
    d09e:	a2 01       	movw	r20, r4
    d0a0:	85 5b       	subi	r24, 0xB5	; 181
    d0a2:	9f 4f       	sbci	r25, 0xFF	; 255
    d0a4:	0e 94 a8 48 	call	0x9150	; 0x9150 <st_dword>
						st_clust(fs, fs->win, dcl);
    d0a8:	8d ad       	ldd	r24, Y+61	; 0x3d
    d0aa:	9e ad       	ldd	r25, Y+62	; 0x3e
    d0ac:	bc 01       	movw	r22, r24
    d0ae:	6b 5c       	subi	r22, 0xCB	; 203
    d0b0:	7f 4f       	sbci	r23, 0xFF	; 255
    d0b2:	a5 01       	movw	r20, r10
    d0b4:	94 01       	movw	r18, r8
    d0b6:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <st_clust.isra.5>
						mem_cpy(fs->win + SZDIRE, fs->win, SZDIRE); /* Create ".." entry */
    d0ba:	8d ad       	ldd	r24, Y+61	; 0x3d
    d0bc:	9e ad       	ldd	r25, Y+62	; 0x3e
    d0be:	bc 01       	movw	r22, r24
    d0c0:	6b 5c       	subi	r22, 0xCB	; 203
    d0c2:	7f 4f       	sbci	r23, 0xFF	; 255
    d0c4:	40 e2       	ldi	r20, 0x20	; 32
    d0c6:	50 e0       	ldi	r21, 0x00	; 0
    d0c8:	8b 5a       	subi	r24, 0xAB	; 171
    d0ca:	9f 4f       	sbci	r25, 0xFF	; 255
    d0cc:	0e 94 17 4a 	call	0x942e	; 0x942e <mem_cpy.part.0>
						fs->win[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
    d0d0:	8d ad       	ldd	r24, Y+61	; 0x3d
    d0d2:	9e ad       	ldd	r25, Y+62	; 0x3e
    d0d4:	fc 01       	movw	r30, r24
    d0d6:	ea 5a       	subi	r30, 0xAA	; 170
    d0d8:	ff 4f       	sbci	r31, 0xFF	; 255
						st_clust(fs, fs->win + SZDIRE, pcl);
    d0da:	10 83       	st	Z, r17
    d0dc:	2f 81       	ldd	r18, Y+7	; 0x07
    d0de:	38 85       	ldd	r19, Y+8	; 0x08
    d0e0:	49 85       	ldd	r20, Y+9	; 0x09
    d0e2:	5a 85       	ldd	r21, Y+10	; 0x0a
    d0e4:	bc 01       	movw	r22, r24
    d0e6:	6b 5a       	subi	r22, 0xAB	; 171
    d0e8:	7f 4f       	sbci	r23, 0xFF	; 255
    d0ea:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <st_clust.isra.5>
						fs->wflag = 1;
    d0ee:	ed ad       	ldd	r30, Y+61	; 0x3d
    d0f0:	fe ad       	ldd	r31, Y+62	; 0x3e
    d0f2:	81 e0       	ldi	r24, 0x01	; 1
					}
					res = dir_register(&dj);	/* Register the object to the parent directoy */
    d0f4:	83 83       	std	Z+3, r24	; 0x03
    d0f6:	ce 01       	movw	r24, r28
    d0f8:	01 96       	adiw	r24, 0x01	; 1
    d0fa:	0e 94 aa 57 	call	0xaf54	; 0xaf54 <dir_register>
				}
			}
			if (res == FR_OK) {
    d0fe:	7c 01       	movw	r14, r24
    d100:	89 2b       	or	r24, r25
    d102:	09 f0       	breq	.+2      	; 0xd106 <f_mkdir+0x19e>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					st_dword(dj.dir + DIR_ModTime, tm);	/* Created time */
    d104:	9c cf       	rjmp	.-200    	; 0xd03e <f_mkdir+0xd6>
    d106:	8b 8d       	ldd	r24, Y+27	; 0x1b
    d108:	9c 8d       	ldd	r25, Y+28	; 0x1c
    d10a:	b3 01       	movw	r22, r6
    d10c:	a2 01       	movw	r20, r4
    d10e:	46 96       	adiw	r24, 0x16	; 22
    d110:	0e 94 a8 48 	call	0x9150	; 0x9150 <st_dword>
					st_clust(fs, dj.dir, dcl);			/* Table start cluster */
    d114:	6b 8d       	ldd	r22, Y+27	; 0x1b
    d116:	7c 8d       	ldd	r23, Y+28	; 0x1c
    d118:	a5 01       	movw	r20, r10
    d11a:	94 01       	movw	r18, r8
    d11c:	8d ad       	ldd	r24, Y+61	; 0x3d
    d11e:	9e ad       	ldd	r25, Y+62	; 0x3e
    d120:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <st_clust.isra.5>
					dj.dir[DIR_Attr] = AM_DIR;			/* Attribute */
    d124:	eb 8d       	ldd	r30, Y+27	; 0x1b
    d126:	fc 8d       	ldd	r31, Y+28	; 0x1c
    d128:	80 e1       	ldi	r24, 0x10	; 16
					fs->wflag = 1;
    d12a:	83 87       	std	Z+11, r24	; 0x0b
    d12c:	8d ad       	ldd	r24, Y+61	; 0x3d
    d12e:	9e ad       	ldd	r25, Y+62	; 0x3e
    d130:	21 e0       	ldi	r18, 0x01	; 1
    d132:	fc 01       	movw	r30, r24
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
    d134:	23 83       	std	Z+3, r18	; 0x03
    d136:	0e 94 54 4c 	call	0x98a8	; 0x98a8 <sync_fs>
    d13a:	7c 01       	movw	r14, r24
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    d13c:	4d cf       	rjmp	.-358    	; 0xcfd8 <f_mkdir+0x70>
    d13e:	c0 5c       	subi	r28, 0xC0	; 192
    d140:	df 4f       	sbci	r29, 0xFF	; 255
    d142:	e0 e1       	ldi	r30, 0x10	; 16
    d144:	0c 94 37 e5 	jmp	0x1ca6e	; 0x1ca6e <__epilogue_restores__+0x4>

0000d148 <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
    d148:	a2 e8       	ldi	r26, 0x82	; 130
    d14a:	b0 e0       	ldi	r27, 0x00	; 0
    d14c:	ea ea       	ldi	r30, 0xAA	; 170
    d14e:	f8 e6       	ldi	r31, 0x68	; 104
    d150:	0c 94 22 e5 	jmp	0x1ca44	; 0x1ca44 <__prologue_saves__+0x12>
    d154:	c1 58       	subi	r28, 0x81	; 129
    d156:	df 4f       	sbci	r29, 0xFF	; 255
    d158:	99 83       	std	Y+1, r25	; 0x01
    d15a:	88 83       	st	Y, r24
    d15c:	cf 57       	subi	r28, 0x7F	; 127
    d15e:	d0 40       	sbci	r29, 0x00	; 0
    d160:	cf 57       	subi	r28, 0x7F	; 127
    d162:	df 4f       	sbci	r29, 0xFF	; 255
    d164:	79 83       	std	Y+1, r23	; 0x01
    d166:	68 83       	st	Y, r22
    d168:	c1 58       	subi	r28, 0x81	; 129
    d16a:	d0 40       	sbci	r29, 0x00	; 0
	BYTE buf[FF_FS_EXFAT ? SZDIRE * 2 : SZDIRE], *dir;
	LBA_t sect;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
    d16c:	ce 01       	movw	r24, r28
    d16e:	8f 57       	subi	r24, 0x7F	; 127
    d170:	9f 4f       	sbci	r25, 0xFF	; 255
    d172:	0e 94 bf 49 	call	0x937e	; 0x937e <get_ldnumber>
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
    d176:	42 e0       	ldi	r20, 0x02	; 2
    d178:	be 01       	movw	r22, r28
    d17a:	63 58       	subi	r22, 0x83	; 131
    d17c:	7f 4f       	sbci	r23, 0xFF	; 255
    d17e:	ce 01       	movw	r24, r28
    d180:	81 58       	subi	r24, 0x81	; 129
    d182:	9f 4f       	sbci	r25, 0xFF	; 255
    d184:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <mount_volume>
	if (res == FR_OK) {
    d188:	00 97       	sbiw	r24, 0x00	; 0
    d18a:	09 f0       	breq	.+2      	; 0xd18e <f_rename+0x46>
    d18c:	ed c0       	rjmp	.+474    	; 0xd368 <f_rename+0x220>
		djo.obj.fs = fs;
    d18e:	ef 96       	adiw	r28, 0x3f	; 63
    d190:	8e ad       	ldd	r24, Y+62	; 0x3e
    d192:	9f ad       	ldd	r25, Y+63	; 0x3f
    d194:	ef 97       	sbiw	r28, 0x3f	; 63
    d196:	98 ab       	std	Y+48, r25	; 0x30
    d198:	8f a7       	std	Y+47, r24	; 0x2f
		INIT_NAMBUF(fs);
    d19a:	80 e0       	ldi	r24, 0x00	; 0
    d19c:	92 e0       	ldi	r25, 0x02	; 2
    d19e:	2b d2       	rcall	.+1110   	; 0xd5f6 <ff_memalloc>
    d1a0:	6c 01       	movw	r12, r24
    d1a2:	00 97       	sbiw	r24, 0x00	; 0
    d1a4:	f1 f0       	breq	.+60     	; 0xd1e2 <f_rename+0x9a>
    d1a6:	ef 96       	adiw	r28, 0x3f	; 63
    d1a8:	ee ad       	ldd	r30, Y+62	; 0x3e
    d1aa:	ff ad       	ldd	r31, Y+63	; 0x3f
    d1ac:	ef 97       	sbiw	r28, 0x3f	; 63
    d1ae:	94 87       	std	Z+12, r25	; 0x0c
    d1b0:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&djo, path_old);		/* Check old object */
    d1b2:	c1 58       	subi	r28, 0x81	; 129
    d1b4:	df 4f       	sbci	r29, 0xFF	; 255
    d1b6:	68 81       	ld	r22, Y
    d1b8:	79 81       	ldd	r23, Y+1	; 0x01
    d1ba:	cf 57       	subi	r28, 0x7F	; 127
    d1bc:	d0 40       	sbci	r29, 0x00	; 0
    d1be:	ce 01       	movw	r24, r28
    d1c0:	8f 96       	adiw	r24, 0x2f	; 47
    d1c2:	0e 94 38 59 	call	0xb270	; 0xb270 <follow_path>
    d1c6:	8c 01       	movw	r16, r24
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
    d1c8:	89 2b       	or	r24, r25
    d1ca:	39 f4       	brne	.+14     	; 0xd1da <f_rename+0x92>
    d1cc:	67 96       	adiw	r28, 0x17	; 23
    d1ce:	8f ad       	ldd	r24, Y+63	; 0x3f
    d1d0:	67 97       	sbiw	r28, 0x17	; 23
    d1d2:	80 7a       	andi	r24, 0xA0	; 160
    d1d4:	49 f0       	breq	.+18     	; 0xd1e8 <f_rename+0xa0>
    d1d6:	06 e0       	ldi	r16, 0x06	; 6
					res = sync_fs(fs);
				}
			}
/* End of the critical section */
		}
		FREE_NAMBUF();
    d1d8:	10 e0       	ldi	r17, 0x00	; 0
    d1da:	c6 01       	movw	r24, r12
    d1dc:	0f d2       	rcall	.+1054   	; 0xd5fc <ff_memfree>
    d1de:	c8 01       	movw	r24, r16

	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
	if (res == FR_OK) {
		djo.obj.fs = fs;
		INIT_NAMBUF(fs);
    d1e0:	c3 c0       	rjmp	.+390    	; 0xd368 <f_rename+0x220>
    d1e2:	81 e1       	ldi	r24, 0x11	; 17
    d1e4:	90 e0       	ldi	r25, 0x00	; 0
    d1e6:	c0 c0       	rjmp	.+384    	; 0xd368 <f_rename+0x220>
    d1e8:	2b 96       	adiw	r28, 0x0b	; 11
    d1ea:	6e ad       	ldd	r22, Y+62	; 0x3e
    d1ec:	7f ad       	ldd	r23, Y+63	; 0x3f
    d1ee:	2b 97       	sbiw	r28, 0x0b	; 11
    d1f0:	40 e2       	ldi	r20, 0x20	; 32
    d1f2:	50 e0       	ldi	r21, 0x00	; 0
    d1f4:	ce 01       	movw	r24, r28
    d1f6:	83 5a       	subi	r24, 0xA3	; 163
    d1f8:	9f 4f       	sbci	r25, 0xFF	; 255
    d1fa:	0e 94 17 4a 	call	0x942e	; 0x942e <mem_cpy.part.0>
    d1fe:	4e e2       	ldi	r20, 0x2E	; 46
    d200:	50 e0       	ldi	r21, 0x00	; 0
    d202:	be 01       	movw	r22, r28
    d204:	61 5d       	subi	r22, 0xD1	; 209
    d206:	7f 4f       	sbci	r23, 0xFF	; 255
    d208:	ce 01       	movw	r24, r28
    d20a:	01 96       	adiw	r24, 0x01	; 1
    d20c:	0e 94 17 4a 	call	0x942e	; 0x942e <mem_cpy.part.0>
			} else
#endif
			{	/* At FAT/FAT32 volume */
				mem_cpy(buf, djo.dir, SZDIRE);			/* Save directory entry of the object */
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
    d210:	cf 57       	subi	r28, 0x7F	; 127
    d212:	df 4f       	sbci	r29, 0xFF	; 255
    d214:	68 81       	ld	r22, Y
    d216:	79 81       	ldd	r23, Y+1	; 0x01
    d218:	c1 58       	subi	r28, 0x81	; 129
    d21a:	d0 40       	sbci	r29, 0x00	; 0
    d21c:	ce 01       	movw	r24, r28
    d21e:	01 96       	adiw	r24, 0x01	; 1
    d220:	0e 94 38 59 	call	0xb270	; 0xb270 <follow_path>
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
    d224:	8c 01       	movw	r16, r24
    d226:	89 2b       	or	r24, r25
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
    d228:	f9 f4       	brne	.+62     	; 0xd268 <f_rename+0x120>
    d22a:	4f 81       	ldd	r20, Y+7	; 0x07
    d22c:	58 85       	ldd	r21, Y+8	; 0x08
    d22e:	69 85       	ldd	r22, Y+9	; 0x09
    d230:	7a 85       	ldd	r23, Y+10	; 0x0a
    d232:	8d a9       	ldd	r24, Y+53	; 0x35
    d234:	9e a9       	ldd	r25, Y+54	; 0x36
    d236:	af a9       	ldd	r26, Y+55	; 0x37
    d238:	b8 ad       	ldd	r27, Y+56	; 0x38
    d23a:	48 17       	cp	r20, r24
    d23c:	59 07       	cpc	r21, r25
    d23e:	6a 07       	cpc	r22, r26
    d240:	7b 07       	cpc	r23, r27
    d242:	09 f0       	breq	.+2      	; 0xd246 <f_rename+0xfe>
    d244:	8b c0       	rjmp	.+278    	; 0xd35c <f_rename+0x214>
    d246:	4f 85       	ldd	r20, Y+15	; 0x0f
    d248:	58 89       	ldd	r21, Y+16	; 0x10
    d24a:	69 89       	ldd	r22, Y+17	; 0x11
    d24c:	7a 89       	ldd	r23, Y+18	; 0x12
    d24e:	21 96       	adiw	r28, 0x01	; 1
    d250:	8c ad       	ldd	r24, Y+60	; 0x3c
    d252:	9d ad       	ldd	r25, Y+61	; 0x3d
    d254:	ae ad       	ldd	r26, Y+62	; 0x3e
    d256:	bf ad       	ldd	r27, Y+63	; 0x3f
    d258:	21 97       	sbiw	r28, 0x01	; 1
    d25a:	48 17       	cp	r20, r24
    d25c:	59 07       	cpc	r21, r25
    d25e:	6a 07       	cpc	r22, r26
    d260:	7b 07       	cpc	r23, r27
    d262:	09 f0       	breq	.+2      	; 0xd266 <f_rename+0x11e>
    d264:	7b c0       	rjmp	.+246    	; 0xd35c <f_rename+0x214>
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
    d266:	04 c0       	rjmp	.+8      	; 0xd270 <f_rename+0x128>
    d268:	04 30       	cpi	r16, 0x04	; 4
    d26a:	11 05       	cpc	r17, r1
    d26c:	09 f0       	breq	.+2      	; 0xd270 <f_rename+0x128>
					res = dir_register(&djn);			/* Register the new entry */
    d26e:	b5 cf       	rjmp	.-150    	; 0xd1da <f_rename+0x92>
    d270:	ce 01       	movw	r24, r28
    d272:	01 96       	adiw	r24, 0x01	; 1
    d274:	0e 94 aa 57 	call	0xaf54	; 0xaf54 <dir_register>
					if (res == FR_OK) {
    d278:	8c 01       	movw	r16, r24
    d27a:	89 2b       	or	r24, r25
    d27c:	09 f0       	breq	.+2      	; 0xd280 <f_rename+0x138>
						dir = djn.dir;					/* Copy directory entry of the object except name */
    d27e:	ad cf       	rjmp	.-166    	; 0xd1da <f_rename+0x92>
    d280:	0b 8d       	ldd	r16, Y+27	; 0x1b
    d282:	1c 8d       	ldd	r17, Y+28	; 0x1c
    d284:	6d e5       	ldi	r22, 0x5D	; 93
    d286:	70 e0       	ldi	r23, 0x00	; 0
    d288:	6c 0f       	add	r22, r28
    d28a:	7d 1f       	adc	r23, r29
    d28c:	63 5f       	subi	r22, 0xF3	; 243
    d28e:	7f 4f       	sbci	r23, 0xFF	; 255
    d290:	43 e1       	ldi	r20, 0x13	; 19
    d292:	50 e0       	ldi	r21, 0x00	; 0
    d294:	c8 01       	movw	r24, r16
    d296:	0d 96       	adiw	r24, 0x0d	; 13
    d298:	0e 94 17 4a 	call	0x942e	; 0x942e <mem_cpy.part.0>
						mem_cpy(dir + 13, buf + 13, SZDIRE - 13);
						dir[DIR_Attr] = buf[DIR_Attr];
    d29c:	a9 96       	adiw	r28, 0x29	; 41
    d29e:	8f ad       	ldd	r24, Y+63	; 0x3f
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
    d2a0:	a9 97       	sbiw	r28, 0x29	; 41
    d2a2:	84 ff       	sbrs	r24, 4
    d2a4:	80 62       	ori	r24, 0x20	; 32
    d2a6:	f8 01       	movw	r30, r16
						fs->wflag = 1;
    d2a8:	83 87       	std	Z+11, r24	; 0x0b
    d2aa:	ef 96       	adiw	r28, 0x3f	; 63
    d2ac:	ee ac       	ldd	r14, Y+62	; 0x3e
    d2ae:	ff ac       	ldd	r15, Y+63	; 0x3f
    d2b0:	ef 97       	sbiw	r28, 0x3f	; 63
    d2b2:	bb 24       	eor	r11, r11
    d2b4:	b3 94       	inc	r11
    d2b6:	f7 01       	movw	r30, r14
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
    d2b8:	b3 82       	std	Z+3, r11	; 0x03
    d2ba:	f8 01       	movw	r30, r16
    d2bc:	83 85       	ldd	r24, Z+11	; 0x0b
    d2be:	84 ff       	sbrs	r24, 4
    d2c0:	3d c0       	rjmp	.+122    	; 0xd33c <f_rename+0x1f4>
    d2c2:	4d a9       	ldd	r20, Y+53	; 0x35
    d2c4:	5e a9       	ldd	r21, Y+54	; 0x36
    d2c6:	6f a9       	ldd	r22, Y+55	; 0x37
    d2c8:	78 ad       	ldd	r23, Y+56	; 0x38
    d2ca:	8f 81       	ldd	r24, Y+7	; 0x07
    d2cc:	98 85       	ldd	r25, Y+8	; 0x08
    d2ce:	a9 85       	ldd	r26, Y+9	; 0x09
    d2d0:	ba 85       	ldd	r27, Y+10	; 0x0a
    d2d2:	48 17       	cp	r20, r24
    d2d4:	59 07       	cpc	r21, r25
    d2d6:	6a 07       	cpc	r22, r26
    d2d8:	7b 07       	cpc	r23, r27
							sect = clst2sect(fs, ld_clust(fs, dir));
    d2da:	81 f1       	breq	.+96     	; 0xd33c <f_rename+0x1f4>
    d2dc:	b8 01       	movw	r22, r16
    d2de:	f7 01       	movw	r30, r14
    d2e0:	80 81       	ld	r24, Z
    d2e2:	0e 94 df 4b 	call	0x97be	; 0x97be <ld_clust.isra.4>
    d2e6:	ab 01       	movw	r20, r22
    d2e8:	bc 01       	movw	r22, r24
    d2ea:	c7 01       	movw	r24, r14
    d2ec:	0e 94 4c 49 	call	0x9298	; 0x9298 <clst2sect>
    d2f0:	ab 01       	movw	r20, r22
							if (sect == 0) {
    d2f2:	bc 01       	movw	r22, r24
    d2f4:	41 15       	cp	r20, r1
    d2f6:	51 05       	cpc	r21, r1
    d2f8:	61 05       	cpc	r22, r1
    d2fa:	71 05       	cpc	r23, r1
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
    d2fc:	91 f1       	breq	.+100    	; 0xd362 <f_rename+0x21a>
    d2fe:	c7 01       	movw	r24, r14
    d300:	0e 94 6e 4d 	call	0x9adc	; 0x9adc <move_window>
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
								if (res == FR_OK && dir[1] == '.') {
    d304:	8c 01       	movw	r16, r24
    d306:	89 2b       	or	r24, r25
    d308:	09 f0       	breq	.+2      	; 0xd30c <f_rename+0x1c4>
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    d30a:	67 cf       	rjmp	.-306    	; 0xd1da <f_rename+0x92>
    d30c:	ef 96       	adiw	r28, 0x3f	; 63
    d30e:	8e ad       	ldd	r24, Y+62	; 0x3e
    d310:	9f ad       	ldd	r25, Y+63	; 0x3f
								if (res == FR_OK && dir[1] == '.') {
    d312:	ef 97       	sbiw	r28, 0x3f	; 63
    d314:	fc 01       	movw	r30, r24
    d316:	ea 5a       	subi	r30, 0xAA	; 170
    d318:	ff 4f       	sbci	r31, 0xFF	; 255
    d31a:	20 81       	ld	r18, Z
    d31c:	2e 32       	cpi	r18, 0x2E	; 46
									st_clust(fs, dir, djn.obj.sclust);
    d31e:	71 f4       	brne	.+28     	; 0xd33c <f_rename+0x1f4>
    d320:	2f 81       	ldd	r18, Y+7	; 0x07
    d322:	38 85       	ldd	r19, Y+8	; 0x08
    d324:	49 85       	ldd	r20, Y+9	; 0x09
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    d326:	5a 85       	ldd	r21, Y+10	; 0x0a
    d328:	bc 01       	movw	r22, r24
    d32a:	6b 5a       	subi	r22, 0xAB	; 171
								if (res == FR_OK && dir[1] == '.') {
									st_clust(fs, dir, djn.obj.sclust);
    d32c:	7f 4f       	sbci	r23, 0xFF	; 255
    d32e:	0e 94 f4 4b 	call	0x97e8	; 0x97e8 <st_clust.isra.5>
									fs->wflag = 1;
    d332:	ef 96       	adiw	r28, 0x3f	; 63
    d334:	ee ad       	ldd	r30, Y+62	; 0x3e
    d336:	ff ad       	ldd	r31, Y+63	; 0x3f
    d338:	ef 97       	sbiw	r28, 0x3f	; 63
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&djo);		/* Remove old entry */
    d33a:	b3 82       	std	Z+3, r11	; 0x03
    d33c:	ce 01       	movw	r24, r28
    d33e:	8f 96       	adiw	r24, 0x2f	; 47
    d340:	0e 94 54 56 	call	0xaca8	; 0xaca8 <dir_remove>
				if (res == FR_OK) {
    d344:	8c 01       	movw	r16, r24
    d346:	89 2b       	or	r24, r25
    d348:	09 f0       	breq	.+2      	; 0xd34c <f_rename+0x204>
					res = sync_fs(fs);
    d34a:	47 cf       	rjmp	.-370    	; 0xd1da <f_rename+0x92>
    d34c:	ef 96       	adiw	r28, 0x3f	; 63
    d34e:	8e ad       	ldd	r24, Y+62	; 0x3e
    d350:	9f ad       	ldd	r25, Y+63	; 0x3f
    d352:	ef 97       	sbiw	r28, 0x3f	; 63
    d354:	0e 94 54 4c 	call	0x98a8	; 0x98a8 <sync_fs>
    d358:	8c 01       	movw	r16, r24
    d35a:	3f cf       	rjmp	.-386    	; 0xd1da <f_rename+0x92>
    d35c:	08 e0       	ldi	r16, 0x08	; 8
    d35e:	10 e0       	ldi	r17, 0x00	; 0
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
						fs->wflag = 1;
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
							sect = clst2sect(fs, ld_clust(fs, dir));
							if (sect == 0) {
								res = FR_INT_ERR;
    d360:	3c cf       	rjmp	.-392    	; 0xd1da <f_rename+0x92>
    d362:	02 e0       	ldi	r16, 0x02	; 2
    d364:	10 e0       	ldi	r17, 0x00	; 0
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    d366:	39 cf       	rjmp	.-398    	; 0xd1da <f_rename+0x92>
    d368:	ce 57       	subi	r28, 0x7E	; 126
    d36a:	df 4f       	sbci	r29, 0xFF	; 255
    d36c:	e9 e0       	ldi	r30, 0x09	; 9
    d36e:	0c 94 3e e5 	jmp	0x1ca7c	; 0x1ca7c <__epilogue_restores__+0x12>

0000d372 <f_chmod>:
FRESULT f_chmod (
	const TCHAR* path,	/* Pointer to the file path */
	BYTE attr,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
    d372:	a2 e3       	ldi	r26, 0x32	; 50
    d374:	b0 e0       	ldi	r27, 0x00	; 0
    d376:	ef eb       	ldi	r30, 0xBF	; 191
    d378:	f9 e6       	ldi	r31, 0x69	; 105
    d37a:	0c 94 23 e5 	jmp	0x1ca46	; 0x1ca46 <__prologue_saves__+0x14>
    d37e:	9a ab       	std	Y+50, r25	; 0x32
    d380:	89 ab       	std	Y+49, r24	; 0x31
    d382:	e6 2e       	mov	r14, r22
    d384:	f4 2e       	mov	r15, r20
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    d386:	42 e0       	ldi	r20, 0x02	; 2
    d388:	be 01       	movw	r22, r28
    d38a:	61 5d       	subi	r22, 0xD1	; 209
    d38c:	7f 4f       	sbci	r23, 0xFF	; 255
    d38e:	ce 01       	movw	r24, r28
    d390:	c1 96       	adiw	r24, 0x31	; 49
    d392:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <mount_volume>
	if (res == FR_OK) {
    d396:	00 97       	sbiw	r24, 0x00	; 0
    d398:	a9 f5       	brne	.+106    	; 0xd404 <f_chmod+0x92>
		dj.obj.fs = fs;
    d39a:	8f a5       	ldd	r24, Y+47	; 0x2f
    d39c:	98 a9       	ldd	r25, Y+48	; 0x30
    d39e:	9a 83       	std	Y+2, r25	; 0x02
    d3a0:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    d3a2:	80 e0       	ldi	r24, 0x00	; 0
    d3a4:	92 e0       	ldi	r25, 0x02	; 2
    d3a6:	27 d1       	rcall	.+590    	; 0xd5f6 <ff_memalloc>
    d3a8:	6c 01       	movw	r12, r24
    d3aa:	00 97       	sbiw	r24, 0x00	; 0
    d3ac:	b1 f0       	breq	.+44     	; 0xd3da <f_chmod+0x68>
    d3ae:	ef a5       	ldd	r30, Y+47	; 0x2f
    d3b0:	f8 a9       	ldd	r31, Y+48	; 0x30
    d3b2:	94 87       	std	Z+12, r25	; 0x0c
    d3b4:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);	/* Follow the file path */
    d3b6:	69 a9       	ldd	r22, Y+49	; 0x31
    d3b8:	7a a9       	ldd	r23, Y+50	; 0x32
    d3ba:	ce 01       	movw	r24, r28
    d3bc:	01 96       	adiw	r24, 0x01	; 1
    d3be:	0e 94 38 59 	call	0xb270	; 0xb270 <follow_path>
    d3c2:	8c 01       	movw	r16, r24
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
    d3c4:	89 2b       	or	r24, r25
    d3c6:	29 f4       	brne	.+10     	; 0xd3d2 <f_chmod+0x60>
    d3c8:	88 a5       	ldd	r24, Y+40	; 0x28
    d3ca:	80 7a       	andi	r24, 0xA0	; 160
    d3cc:	49 f0       	breq	.+18     	; 0xd3e0 <f_chmod+0x6e>
    d3ce:	06 e0       	ldi	r16, 0x06	; 6
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    d3d0:	10 e0       	ldi	r17, 0x00	; 0
    d3d2:	c6 01       	movw	r24, r12
    d3d4:	13 d1       	rcall	.+550    	; 0xd5fc <ff_memfree>
    d3d6:	c8 01       	movw	r24, r16


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    d3d8:	15 c0       	rjmp	.+42     	; 0xd404 <f_chmod+0x92>
    d3da:	81 e1       	ldi	r24, 0x11	; 17
    d3dc:	90 e0       	ldi	r25, 0x00	; 0
				fs->dirbuf[XDIR_Attr] = (attr & mask) | (fs->dirbuf[XDIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
				res = store_xdir(&dj);
			} else
#endif
			{
				dj.dir[DIR_Attr] = (attr & mask) | (dj.dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
    d3de:	12 c0       	rjmp	.+36     	; 0xd404 <f_chmod+0x92>
    d3e0:	eb 8d       	ldd	r30, Y+27	; 0x1b
    d3e2:	fc 8d       	ldd	r31, Y+28	; 0x1c
    d3e4:	83 85       	ldd	r24, Z+11	; 0x0b
    d3e6:	6e 2d       	mov	r22, r14
    d3e8:	68 27       	eor	r22, r24
    d3ea:	6f 21       	and	r22, r15
    d3ec:	67 72       	andi	r22, 0x27	; 39
    d3ee:	68 27       	eor	r22, r24
				fs->wflag = 1;
    d3f0:	63 87       	std	Z+11, r22	; 0x0b
    d3f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    d3f4:	98 a9       	ldd	r25, Y+48	; 0x30
    d3f6:	21 e0       	ldi	r18, 0x01	; 1
    d3f8:	fc 01       	movw	r30, r24
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
    d3fa:	23 83       	std	Z+3, r18	; 0x03
    d3fc:	0e 94 54 4c 	call	0x98a8	; 0x98a8 <sync_fs>
    d400:	8c 01       	movw	r16, r24
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    d402:	e7 cf       	rjmp	.-50     	; 0xd3d2 <f_chmod+0x60>
    d404:	e2 96       	adiw	r28, 0x32	; 50
    d406:	e8 e0       	ldi	r30, 0x08	; 8
    d408:	0c 94 3f e5 	jmp	0x1ca7e	; 0x1ca7e <__epilogue_restores__+0x14>

0000d40c <f_utime>:

FRESULT f_utime (
	const TCHAR* path,	/* Pointer to the file/directory name */
	const FILINFO* fno	/* Pointer to the timestamp to be set */
)
{
    d40c:	a2 e3       	ldi	r26, 0x32	; 50
    d40e:	b0 e0       	ldi	r27, 0x00	; 0
    d410:	ec e0       	ldi	r30, 0x0C	; 12
    d412:	fa e6       	ldi	r31, 0x6A	; 106
    d414:	0c 94 23 e5 	jmp	0x1ca46	; 0x1ca46 <__prologue_saves__+0x14>
    d418:	9a ab       	std	Y+50, r25	; 0x32
    d41a:	89 ab       	std	Y+49, r24	; 0x31
    d41c:	6b 01       	movw	r12, r22
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    d41e:	42 e0       	ldi	r20, 0x02	; 2
    d420:	be 01       	movw	r22, r28
    d422:	61 5d       	subi	r22, 0xD1	; 209
    d424:	7f 4f       	sbci	r23, 0xFF	; 255
    d426:	ce 01       	movw	r24, r28
    d428:	c1 96       	adiw	r24, 0x31	; 49
    d42a:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <mount_volume>
	if (res == FR_OK) {
    d42e:	00 97       	sbiw	r24, 0x00	; 0
    d430:	09 f0       	breq	.+2      	; 0xd434 <f_utime+0x28>
    d432:	41 c0       	rjmp	.+130    	; 0xd4b6 <f_utime+0xaa>
		dj.obj.fs = fs;
    d434:	8f a5       	ldd	r24, Y+47	; 0x2f
    d436:	98 a9       	ldd	r25, Y+48	; 0x30
    d438:	9a 83       	std	Y+2, r25	; 0x02
    d43a:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    d43c:	80 e0       	ldi	r24, 0x00	; 0
    d43e:	92 e0       	ldi	r25, 0x02	; 2
    d440:	da d0       	rcall	.+436    	; 0xd5f6 <ff_memalloc>
    d442:	7c 01       	movw	r14, r24
    d444:	00 97       	sbiw	r24, 0x00	; 0
    d446:	b1 f0       	breq	.+44     	; 0xd474 <f_utime+0x68>
    d448:	ef a5       	ldd	r30, Y+47	; 0x2f
    d44a:	f8 a9       	ldd	r31, Y+48	; 0x30
    d44c:	94 87       	std	Z+12, r25	; 0x0c
    d44e:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);	/* Follow the file path */
    d450:	69 a9       	ldd	r22, Y+49	; 0x31
    d452:	7a a9       	ldd	r23, Y+50	; 0x32
    d454:	ce 01       	movw	r24, r28
    d456:	01 96       	adiw	r24, 0x01	; 1
    d458:	0e 94 38 59 	call	0xb270	; 0xb270 <follow_path>
    d45c:	8c 01       	movw	r16, r24
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
    d45e:	89 2b       	or	r24, r25
    d460:	29 f4       	brne	.+10     	; 0xd46c <f_utime+0x60>
    d462:	88 a5       	ldd	r24, Y+40	; 0x28
    d464:	80 7a       	andi	r24, 0xA0	; 160
    d466:	49 f0       	breq	.+18     	; 0xd47a <f_utime+0x6e>
    d468:	06 e0       	ldi	r16, 0x06	; 6
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    d46a:	10 e0       	ldi	r17, 0x00	; 0
    d46c:	c7 01       	movw	r24, r14
    d46e:	c6 d0       	rcall	.+396    	; 0xd5fc <ff_memfree>
    d470:	c8 01       	movw	r24, r16


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    d472:	21 c0       	rjmp	.+66     	; 0xd4b6 <f_utime+0xaa>
    d474:	81 e1       	ldi	r24, 0x11	; 17
    d476:	90 e0       	ldi	r25, 0x00	; 0
				st_dword(fs->dirbuf + XDIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
				res = store_xdir(&dj);
			} else
#endif
			{
				st_dword(dj.dir + DIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
    d478:	1e c0       	rjmp	.+60     	; 0xd4b6 <f_utime+0xaa>
    d47a:	f6 01       	movw	r30, r12
    d47c:	44 81       	ldd	r20, Z+4	; 0x04
    d47e:	55 81       	ldd	r21, Z+5	; 0x05
    d480:	60 e0       	ldi	r22, 0x00	; 0
    d482:	70 e0       	ldi	r23, 0x00	; 0
    d484:	ba 01       	movw	r22, r20
    d486:	55 27       	eor	r21, r21
    d488:	44 27       	eor	r20, r20
    d48a:	86 81       	ldd	r24, Z+6	; 0x06
    d48c:	97 81       	ldd	r25, Z+7	; 0x07
    d48e:	a0 e0       	ldi	r26, 0x00	; 0
    d490:	b0 e0       	ldi	r27, 0x00	; 0
    d492:	48 2b       	or	r20, r24
    d494:	59 2b       	or	r21, r25
    d496:	6a 2b       	or	r22, r26
    d498:	7b 2b       	or	r23, r27
    d49a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    d49c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    d49e:	46 96       	adiw	r24, 0x16	; 22
    d4a0:	0e 94 a8 48 	call	0x9150	; 0x9150 <st_dword>
				fs->wflag = 1;
    d4a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    d4a6:	98 a9       	ldd	r25, Y+48	; 0x30
    d4a8:	21 e0       	ldi	r18, 0x01	; 1
    d4aa:	fc 01       	movw	r30, r24
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
    d4ac:	23 83       	std	Z+3, r18	; 0x03
    d4ae:	0e 94 54 4c 	call	0x98a8	; 0x98a8 <sync_fs>
    d4b2:	8c 01       	movw	r16, r24
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    d4b4:	db cf       	rjmp	.-74     	; 0xd46c <f_utime+0x60>
    d4b6:	e2 96       	adiw	r28, 0x32	; 50
    d4b8:	e8 e0       	ldi	r30, 0x08	; 8
    d4ba:	0c 94 3f e5 	jmp	0x1ca7e	; 0x1ca7e <__epilogue_restores__+0x14>

0000d4be <f_getlabel>:
FRESULT f_getlabel (
	const TCHAR* path,	/* Logical drive number */
	TCHAR* label,		/* Buffer to store the volume label */
	DWORD* vsn			/* Variable to store the volume serial number */
)
{
    d4be:	a2 e3       	ldi	r26, 0x32	; 50
    d4c0:	b0 e0       	ldi	r27, 0x00	; 0
    d4c2:	e5 e6       	ldi	r30, 0x65	; 101
    d4c4:	fa e6       	ldi	r31, 0x6A	; 106
    d4c6:	0c 94 1f e5 	jmp	0x1ca3e	; 0x1ca3e <__prologue_saves__+0xc>
    d4ca:	9a ab       	std	Y+50, r25	; 0x32
    d4cc:	89 ab       	std	Y+49, r24	; 0x31
    d4ce:	6b 01       	movw	r12, r22
    d4d0:	5a 01       	movw	r10, r20
	FATFS *fs;
	UINT si, di;
	WCHAR wc;

	/* Get logical drive */
	res = mount_volume(&path, &fs, 0);
    d4d2:	40 e0       	ldi	r20, 0x00	; 0
    d4d4:	be 01       	movw	r22, r28
    d4d6:	61 5d       	subi	r22, 0xD1	; 209
    d4d8:	7f 4f       	sbci	r23, 0xFF	; 255
    d4da:	ce 01       	movw	r24, r28
    d4dc:	c1 96       	adiw	r24, 0x31	; 49
    d4de:	0e 94 e9 4d 	call	0x9bd2	; 0x9bd2 <mount_volume>
    d4e2:	7c 01       	movw	r14, r24

	/* Get volume label */
	if (res == FR_OK && label) {
    d4e4:	89 2b       	or	r24, r25
    d4e6:	09 f0       	breq	.+2      	; 0xd4ea <f_getlabel+0x2c>
    d4e8:	81 c0       	rjmp	.+258    	; 0xd5ec <f_getlabel+0x12e>
    d4ea:	c1 14       	cp	r12, r1
    d4ec:	d1 04       	cpc	r13, r1
    d4ee:	09 f4       	brne	.+2      	; 0xd4f2 <f_getlabel+0x34>
    d4f0:	53 c0       	rjmp	.+166    	; 0xd598 <f_getlabel+0xda>
		dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
    d4f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    d4f4:	98 a9       	ldd	r25, Y+48	; 0x30
    d4f6:	9a 83       	std	Y+2, r25	; 0x02
    d4f8:	89 83       	std	Y+1, r24	; 0x01
    d4fa:	1f 82       	std	Y+7, r1	; 0x07
    d4fc:	18 86       	std	Y+8, r1	; 0x08
    d4fe:	19 86       	std	Y+9, r1	; 0x09
    d500:	1a 86       	std	Y+10, r1	; 0x0a
		res = dir_sdi(&dj, 0);
    d502:	40 e0       	ldi	r20, 0x00	; 0
    d504:	50 e0       	ldi	r21, 0x00	; 0
    d506:	ba 01       	movw	r22, r20
    d508:	ce 01       	movw	r24, r28
    d50a:	01 96       	adiw	r24, 0x01	; 1
    d50c:	0e 94 f2 51 	call	0xa3e4	; 0xa3e4 <dir_sdi>
		if (res == FR_OK) {
    d510:	00 97       	sbiw	r24, 0x00	; 0
    d512:	e9 f5       	brne	.+122    	; 0xd58e <f_getlabel+0xd0>
		 	res = DIR_READ_LABEL(&dj);		/* Find a volume label entry */
    d514:	61 e0       	ldi	r22, 0x01	; 1
    d516:	70 e0       	ldi	r23, 0x00	; 0
    d518:	ce 01       	movw	r24, r28
    d51a:	01 96       	adiw	r24, 0x01	; 1
    d51c:	0e 94 8b 55 	call	0xab16	; 0xab16 <dir_read>
		 	if (res == FR_OK) {
    d520:	00 97       	sbiw	r24, 0x00	; 0
    d522:	a9 f5       	brne	.+106    	; 0xd58e <f_getlabel+0xd0>
    d524:	00 e0       	ldi	r16, 0x00	; 0
    d526:	10 e0       	ldi	r17, 0x00	; 0
    d528:	80 e0       	ldi	r24, 0x00	; 0
    d52a:	90 e0       	ldi	r25, 0x00	; 0
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry */
					while (si < 11) {
						wc = dj.dir[si++];
    d52c:	4c 01       	movw	r8, r24
    d52e:	2f ef       	ldi	r18, 0xFF	; 255
    d530:	82 1a       	sub	r8, r18
    d532:	92 0a       	sbc	r9, r18
    d534:	2b 8d       	ldd	r18, Y+27	; 0x1b
    d536:	3c 8d       	ldd	r19, Y+28	; 0x1c
    d538:	f9 01       	movw	r30, r18
    d53a:	e8 0f       	add	r30, r24
    d53c:	f9 1f       	adc	r31, r25
    d53e:	80 81       	ld	r24, Z
#if FF_USE_LFN && FF_LFN_UNICODE >= 1 	/* Unicode output */
						if (dbc_1st((BYTE)wc) && si < 11) wc = wc << 8 | dj.dir[si++];	/* Is it a DBC? */
						wc = ff_oem2uni(wc, CODEPAGE);					/* Convert it into Unicode */
    d540:	65 eb       	ldi	r22, 0xB5	; 181
    d542:	71 e0       	ldi	r23, 0x01	; 1
    d544:	90 e0       	ldi	r25, 0x00	; 0
    d546:	90 d0       	rcall	.+288    	; 0xd668 <ff_oem2uni>
						if (wc != 0) wc = put_utf(wc, &label[di], 4);	/* Put it in Unicode */
    d548:	00 97       	sbiw	r24, 0x00	; 0
    d54a:	19 f4       	brne	.+6      	; 0xd552 <f_getlabel+0x94>
						if (wc == 0) { di = 0; break; }
    d54c:	00 e0       	ldi	r16, 0x00	; 0
    d54e:	10 e0       	ldi	r17, 0x00	; 0
    d550:	13 c0       	rjmp	.+38     	; 0xd578 <f_getlabel+0xba>
					while (si < 11) {
						wc = dj.dir[si++];
#if FF_USE_LFN && FF_LFN_UNICODE >= 1 	/* Unicode output */
						if (dbc_1st((BYTE)wc) && si < 11) wc = wc << 8 | dj.dir[si++];	/* Is it a DBC? */
						wc = ff_oem2uni(wc, CODEPAGE);					/* Convert it into Unicode */
						if (wc != 0) wc = put_utf(wc, &label[di], 4);	/* Put it in Unicode */
    d552:	bc 01       	movw	r22, r24
    d554:	80 e0       	ldi	r24, 0x00	; 0
    d556:	90 e0       	ldi	r25, 0x00	; 0
    d558:	24 e0       	ldi	r18, 0x04	; 4
    d55a:	30 e0       	ldi	r19, 0x00	; 0
    d55c:	a6 01       	movw	r20, r12
    d55e:	40 0f       	add	r20, r16
    d560:	51 1f       	adc	r21, r17
    d562:	0e 94 22 4a 	call	0x9444	; 0x9444 <put_utf>
    d566:	90 e0       	ldi	r25, 0x00	; 0
						if (wc == 0) { di = 0; break; }
    d568:	00 97       	sbiw	r24, 0x00	; 0
    d56a:	81 f3       	breq	.-32     	; 0xd54c <f_getlabel+0x8e>
						di += wc;
    d56c:	08 0f       	add	r16, r24
    d56e:	19 1f       	adc	r17, r25
    d570:	c4 01       	movw	r24, r8
					label[di] = 0;
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry */
					while (si < 11) {
    d572:	8b 30       	cpi	r24, 0x0B	; 11
    d574:	91 05       	cpc	r25, r1
    d576:	d1 f6       	brne	.-76     	; 0xd52c <f_getlabel+0x6e>
    d578:	f6 01       	movw	r30, r12
    d57a:	e0 0f       	add	r30, r16
    d57c:	f1 1f       	adc	r31, r17
#else									/* ANSI/OEM output */
						label[di++] = (TCHAR)wc;
#endif
					}
					do {				/* Truncate trailing spaces */
						label[di] = 0;
    d57e:	10 82       	st	Z, r1
						if (di == 0) break;
    d580:	ce 16       	cp	r12, r30
    d582:	df 06       	cpc	r13, r31
    d584:	49 f0       	breq	.+18     	; 0xd598 <f_getlabel+0xda>
					} while (label[--di] == ' ');
    d586:	82 91       	ld	r24, -Z
    d588:	80 32       	cpi	r24, 0x20	; 32
    d58a:	c9 f3       	breq	.-14     	; 0xd57e <f_getlabel+0xc0>
    d58c:	05 c0       	rjmp	.+10     	; 0xd598 <f_getlabel+0xda>
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    d58e:	84 30       	cpi	r24, 0x04	; 4
    d590:	91 05       	cpc	r25, r1
    d592:	59 f5       	brne	.+86     	; 0xd5ea <f_getlabel+0x12c>
			label[0] = 0;
    d594:	f6 01       	movw	r30, r12
    d596:	10 82       	st	Z, r1
			res = FR_OK;
		}
	}

	/* Get volume serial number */
	if (res == FR_OK && vsn) {
    d598:	a1 14       	cp	r10, r1
    d59a:	b1 04       	cpc	r11, r1
    d59c:	39 f1       	breq	.+78     	; 0xd5ec <f_getlabel+0x12e>
		res = move_window(fs, fs->volbase);
    d59e:	8f a5       	ldd	r24, Y+47	; 0x2f
    d5a0:	98 a9       	ldd	r25, Y+48	; 0x30
    d5a2:	fc 01       	movw	r30, r24
    d5a4:	41 a1       	ldd	r20, Z+33	; 0x21
    d5a6:	52 a1       	ldd	r21, Z+34	; 0x22
    d5a8:	63 a1       	ldd	r22, Z+35	; 0x23
    d5aa:	74 a1       	ldd	r23, Z+36	; 0x24
    d5ac:	0e 94 6e 4d 	call	0x9adc	; 0x9adc <move_window>
    d5b0:	7c 01       	movw	r14, r24
		if (res == FR_OK) {
    d5b2:	89 2b       	or	r24, r25
    d5b4:	d9 f4       	brne	.+54     	; 0xd5ec <f_getlabel+0x12e>
			switch (fs->fs_type) {
    d5b6:	ef a5       	ldd	r30, Y+47	; 0x2f
    d5b8:	f8 a9       	ldd	r31, Y+48	; 0x30
    d5ba:	80 81       	ld	r24, Z
    d5bc:	83 30       	cpi	r24, 0x03	; 3
    d5be:	29 f0       	breq	.+10     	; 0xd5ca <f_getlabel+0x10c>
    d5c0:	84 30       	cpi	r24, 0x04	; 4
    d5c2:	31 f0       	breq	.+12     	; 0xd5d0 <f_getlabel+0x112>

			case FS_FAT32:
				di = BS_VolID32; break;

			default:
				di = BS_VolID;
    d5c4:	87 e2       	ldi	r24, 0x27	; 39
    d5c6:	90 e0       	ldi	r25, 0x00	; 0
    d5c8:	05 c0       	rjmp	.+10     	; 0xd5d4 <f_getlabel+0x116>
			switch (fs->fs_type) {
			case FS_EXFAT:
				di = BPB_VolIDEx; break;

			case FS_FAT32:
				di = BS_VolID32; break;
    d5ca:	83 e4       	ldi	r24, 0x43	; 67
    d5cc:	90 e0       	ldi	r25, 0x00	; 0
    d5ce:	02 c0       	rjmp	.+4      	; 0xd5d4 <f_getlabel+0x116>
	if (res == FR_OK && vsn) {
		res = move_window(fs, fs->volbase);
		if (res == FR_OK) {
			switch (fs->fs_type) {
			case FS_EXFAT:
				di = BPB_VolIDEx; break;
    d5d0:	84 e6       	ldi	r24, 0x64	; 100
    d5d2:	90 e0       	ldi	r25, 0x00	; 0
				di = BS_VolID32; break;

			default:
				di = BS_VolID;
			}
			*vsn = ld_dword(fs->win + di);
    d5d4:	f5 96       	adiw	r30, 0x35	; 53
    d5d6:	8e 0f       	add	r24, r30
    d5d8:	9f 1f       	adc	r25, r31
    d5da:	0e 94 93 48 	call	0x9126	; 0x9126 <ld_dword>
    d5de:	f5 01       	movw	r30, r10
    d5e0:	60 83       	st	Z, r22
    d5e2:	71 83       	std	Z+1, r23	; 0x01
    d5e4:	82 83       	std	Z+2, r24	; 0x02
    d5e6:	93 83       	std	Z+3, r25	; 0x03
    d5e8:	01 c0       	rjmp	.+2      	; 0xd5ec <f_getlabel+0x12e>
						if (di == 0) break;
					} while (label[--di] == ' ');
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    d5ea:	7c 01       	movw	r14, r24
			*vsn = ld_dword(fs->win + di);
		}
	}

	LEAVE_FF(fs, res);
}
    d5ec:	c7 01       	movw	r24, r14
    d5ee:	e2 96       	adiw	r28, 0x32	; 50
    d5f0:	ec e0       	ldi	r30, 0x0C	; 12
    d5f2:	0c 94 3b e5 	jmp	0x1ca76	; 0x1ca76 <__epilogue_restores__+0xc>

0000d5f6 <ff_memalloc>:

void* ff_memalloc (	/* Returns pointer to the allocated memory block (null if not enough core) */
	UINT msize		/* Number of bytes to allocate */
)
{
	return safemalloc(msize);	/* Allocate a new memory block with POSIX API */
    d5f6:	0c 94 23 2a 	jmp	0x5446	; 0x5446 <safemalloc>
}
    d5fa:	08 95       	ret

0000d5fc <ff_memfree>:

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free (nothing to do if null) */
)
{
	safefree(mblock);	/* Free the memory block with POSIX API */
    d5fc:	0c 94 45 2a 	jmp	0x548a	; 0x548a <safefree>
    d600:	08 95       	ret

0000d602 <ff_uni2oem>:
#if FF_CODE_PAGE != 0 && FF_CODE_PAGE < 900
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
    d602:	cf 92       	push	r12
    d604:	df 92       	push	r13
    d606:	ef 92       	push	r14
    d608:	ff 92       	push	r15
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (uni < 0x80) {	/* ASCII? */
    d60a:	60 38       	cpi	r22, 0x80	; 128
    d60c:	71 05       	cpc	r23, r1
    d60e:	81 05       	cpc	r24, r1
    d610:	91 05       	cpc	r25, r1
    d612:	10 f4       	brcc	.+4      	; 0xd618 <ff_uni2oem+0x16>
		c = (WCHAR)uni;
    d614:	cb 01       	movw	r24, r22
    d616:	23 c0       	rjmp	.+70     	; 0xd65e <ff_uni2oem+0x5c>

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
    d618:	61 15       	cp	r22, r1
    d61a:	71 05       	cpc	r23, r1
    d61c:	21 e0       	ldi	r18, 0x01	; 1
    d61e:	82 07       	cpc	r24, r18
    d620:	91 05       	cpc	r25, r1
    d622:	d8 f4       	brcc	.+54     	; 0xd65a <ff_uni2oem+0x58>
    d624:	45 3b       	cpi	r20, 0xB5	; 181
    d626:	51 40       	sbci	r21, 0x01	; 1
    d628:	c1 f4       	brne	.+48     	; 0xd65a <ff_uni2oem+0x58>
    d62a:	e4 ec       	ldi	r30, 0xC4	; 196
    d62c:	f6 e0       	ldi	r31, 0x06	; 6
    d62e:	20 e0       	ldi	r18, 0x00	; 0
    d630:	30 e0       	ldi	r19, 0x00	; 0
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
    d632:	c1 90       	ld	r12, Z+
    d634:	d1 90       	ld	r13, Z+
    d636:	e1 2c       	mov	r14, r1
    d638:	f1 2c       	mov	r15, r1
    d63a:	6c 15       	cp	r22, r12
    d63c:	7d 05       	cpc	r23, r13
    d63e:	8e 05       	cpc	r24, r14
    d640:	9f 05       	cpc	r25, r15
    d642:	29 f0       	breq	.+10     	; 0xd64e <ff_uni2oem+0x4c>
    d644:	2f 5f       	subi	r18, 0xFF	; 255
    d646:	3f 4f       	sbci	r19, 0xFF	; 255
    d648:	20 38       	cpi	r18, 0x80	; 128
    d64a:	31 05       	cpc	r19, r1
    d64c:	91 f7       	brne	.-28     	; 0xd632 <ff_uni2oem+0x30>
			c = (c + 0x80) & 0xFF;
    d64e:	b9 01       	movw	r22, r18
    d650:	60 58       	subi	r22, 0x80	; 128
    d652:	7f 4f       	sbci	r23, 0xFF	; 255
    d654:	cb 01       	movw	r24, r22
    d656:	99 27       	eor	r25, r25
    d658:	02 c0       	rjmp	.+4      	; 0xd65e <ff_uni2oem+0x5c>
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
	WCHAR c = 0;
    d65a:	80 e0       	ldi	r24, 0x00	; 0
    d65c:	90 e0       	ldi	r25, 0x00	; 0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
    d65e:	ff 90       	pop	r15
    d660:	ef 90       	pop	r14
    d662:	df 90       	pop	r13
    d664:	cf 90       	pop	r12
    d666:	08 95       	ret

0000d668 <ff_oem2uni>:
{
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (oem < 0x80) {	/* ASCII? */
    d668:	80 38       	cpi	r24, 0x80	; 128
    d66a:	91 05       	cpc	r25, r1
    d66c:	88 f0       	brcs	.+34     	; 0xd690 <ff_oem2uni+0x28>
		c = oem;

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
    d66e:	65 3b       	cpi	r22, 0xB5	; 181
    d670:	71 40       	sbci	r23, 0x01	; 1
    d672:	61 f4       	brne	.+24     	; 0xd68c <ff_oem2uni+0x24>
			if (oem < 0x100) c = p[oem - 0x80];
    d674:	8f 3f       	cpi	r24, 0xFF	; 255
    d676:	91 05       	cpc	r25, r1
    d678:	09 f0       	breq	.+2      	; 0xd67c <ff_oem2uni+0x14>
    d67a:	40 f4       	brcc	.+16     	; 0xd68c <ff_oem2uni+0x24>
    d67c:	88 0f       	add	r24, r24
    d67e:	99 1f       	adc	r25, r25
    d680:	fc 01       	movw	r30, r24
    d682:	ec 53       	subi	r30, 0x3C	; 60
    d684:	fa 4f       	sbci	r31, 0xFA	; 250
    d686:	80 81       	ld	r24, Z
    d688:	91 81       	ldd	r25, Z+1	; 0x01
    d68a:	08 95       	ret
WCHAR ff_oem2uni (	/* Returns Unicode character in UTF-16, zero on error */
	WCHAR	oem,	/* OEM code to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
	WCHAR c = 0;
    d68c:	80 e0       	ldi	r24, 0x00	; 0
    d68e:	90 e0       	ldi	r25, 0x00	; 0
			if (oem < 0x100) c = p[oem - 0x80];
		}
	}

	return c;
}
    d690:	08 95       	ret

0000d692 <ff_wtoupper>:

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
    d692:	61 15       	cp	r22, r1
    d694:	71 05       	cpc	r23, r1
    d696:	21 e0       	ldi	r18, 0x01	; 1
    d698:	82 07       	cpc	r24, r18
    d69a:	91 05       	cpc	r25, r1
    d69c:	08 f0       	brcs	.+2      	; 0xd6a0 <ff_wtoupper+0xe>
    d69e:	5a c0       	rjmp	.+180    	; 0xd754 <ff_wtoupper+0xc2>
		uc = (WORD)uni;
		p = uc < 0x1000 ? cvt1 : cvt2;
    d6a0:	61 15       	cp	r22, r1
    d6a2:	80 e1       	ldi	r24, 0x10	; 16
    d6a4:	78 07       	cpc	r23, r24
    d6a6:	18 f0       	brcs	.+6      	; 0xd6ae <ff_wtoupper+0x1c>
    d6a8:	a6 e1       	ldi	r26, 0x16	; 22
    d6aa:	b4 e0       	ldi	r27, 0x04	; 4
    d6ac:	02 c0       	rjmp	.+4      	; 0xd6b2 <ff_wtoupper+0x20>
    d6ae:	a2 ed       	ldi	r26, 0xD2	; 210
    d6b0:	b4 e0       	ldi	r27, 0x04	; 4
		for (;;) {
			bc = *p++;								/* Get the block base */
    d6b2:	2d 91       	ld	r18, X+
    d6b4:	3c 91       	ld	r19, X
    d6b6:	11 97       	sbiw	r26, 0x01	; 1
			if (bc == 0 || uc < bc) break;			/* Not matched? */
    d6b8:	21 15       	cp	r18, r1
    d6ba:	31 05       	cpc	r19, r1
    d6bc:	09 f4       	brne	.+2      	; 0xd6c0 <ff_wtoupper+0x2e>
    d6be:	48 c0       	rjmp	.+144    	; 0xd750 <ff_wtoupper+0xbe>
    d6c0:	62 17       	cp	r22, r18
    d6c2:	73 07       	cpc	r23, r19
    d6c4:	08 f4       	brcc	.+2      	; 0xd6c8 <ff_wtoupper+0x36>
    d6c6:	44 c0       	rjmp	.+136    	; 0xd750 <ff_wtoupper+0xbe>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
    d6c8:	14 96       	adiw	r26, 0x04	; 4
    d6ca:	fd 01       	movw	r30, r26
    d6cc:	32 97       	sbiw	r30, 0x02	; 2
    d6ce:	80 81       	ld	r24, Z
    d6d0:	91 81       	ldd	r25, Z+1	; 0x01
    d6d2:	e9 2f       	mov	r30, r25
    d6d4:	ff 27       	eor	r31, r31
    d6d6:	99 27       	eor	r25, r25
			if (uc < bc + nc) {	/* In the block? */
    d6d8:	a9 01       	movw	r20, r18
    d6da:	48 0f       	add	r20, r24
    d6dc:	59 1f       	adc	r21, r25
    d6de:	64 17       	cp	r22, r20
    d6e0:	75 07       	cpc	r23, r21
    d6e2:	70 f5       	brcc	.+92     	; 0xd740 <ff_wtoupper+0xae>
				switch (cmd) {
    d6e4:	e9 30       	cpi	r30, 0x09	; 9
    d6e6:	f1 05       	cpc	r31, r1
    d6e8:	98 f5       	brcc	.+102    	; 0xd750 <ff_wtoupper+0xbe>
    d6ea:	ec 54       	subi	r30, 0x4C	; 76
    d6ec:	ff 4f       	sbci	r31, 0xFF	; 255
    d6ee:	0c 94 d5 e4 	jmp	0x1c9aa	; 0x1c9aa <__tablejump2__>
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
    d6f2:	62 1b       	sub	r22, r18
    d6f4:	73 0b       	sbc	r23, r19
    d6f6:	fb 01       	movw	r30, r22
    d6f8:	ee 0f       	add	r30, r30
    d6fa:	ff 1f       	adc	r31, r31
    d6fc:	ea 0f       	add	r30, r26
    d6fe:	fb 1f       	adc	r31, r27
    d700:	60 81       	ld	r22, Z
    d702:	71 81       	ldd	r23, Z+1	; 0x01
    d704:	25 c0       	rjmp	.+74     	; 0xd750 <ff_wtoupper+0xbe>
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
    d706:	cb 01       	movw	r24, r22
    d708:	82 1b       	sub	r24, r18
    d70a:	93 0b       	sbc	r25, r19
    d70c:	81 70       	andi	r24, 0x01	; 1
    d70e:	99 27       	eor	r25, r25
    d710:	68 1b       	sub	r22, r24
    d712:	79 0b       	sbc	r23, r25
    d714:	1d c0       	rjmp	.+58     	; 0xd750 <ff_wtoupper+0xbe>
				case 2: uc -= 16; break;			/* Shift -16 */
    d716:	60 51       	subi	r22, 0x10	; 16
    d718:	71 09       	sbc	r23, r1
    d71a:	1a c0       	rjmp	.+52     	; 0xd750 <ff_wtoupper+0xbe>
				case 3:	uc -= 32; break;			/* Shift -32 */
    d71c:	60 52       	subi	r22, 0x20	; 32
    d71e:	71 09       	sbc	r23, r1
    d720:	17 c0       	rjmp	.+46     	; 0xd750 <ff_wtoupper+0xbe>
				case 4:	uc -= 48; break;			/* Shift -48 */
    d722:	60 53       	subi	r22, 0x30	; 48
    d724:	71 09       	sbc	r23, r1
    d726:	14 c0       	rjmp	.+40     	; 0xd750 <ff_wtoupper+0xbe>
				case 5:	uc -= 26; break;			/* Shift -26 */
    d728:	6a 51       	subi	r22, 0x1A	; 26
    d72a:	71 09       	sbc	r23, r1
    d72c:	11 c0       	rjmp	.+34     	; 0xd750 <ff_wtoupper+0xbe>
				case 6:	uc += 8; break;				/* Shift +8 */
    d72e:	68 5f       	subi	r22, 0xF8	; 248
    d730:	7f 4f       	sbci	r23, 0xFF	; 255
    d732:	0e c0       	rjmp	.+28     	; 0xd750 <ff_wtoupper+0xbe>
				case 7: uc -= 80; break;			/* Shift -80 */
    d734:	60 55       	subi	r22, 0x50	; 80
    d736:	71 09       	sbc	r23, r1
    d738:	0b c0       	rjmp	.+22     	; 0xd750 <ff_wtoupper+0xbe>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
    d73a:	60 56       	subi	r22, 0x60	; 96
    d73c:	7c 41       	sbci	r23, 0x1C	; 28
    d73e:	08 c0       	rjmp	.+16     	; 0xd750 <ff_wtoupper+0xbe>
				}
				break;
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
    d740:	ef 2b       	or	r30, r31
    d742:	09 f0       	breq	.+2      	; 0xd746 <ff_wtoupper+0xb4>
    d744:	b6 cf       	rjmp	.-148    	; 0xd6b2 <ff_wtoupper+0x20>
    d746:	88 0f       	add	r24, r24
    d748:	99 1f       	adc	r25, r25
    d74a:	a8 0f       	add	r26, r24
    d74c:	b9 1f       	adc	r27, r25
    d74e:	b1 cf       	rjmp	.-158    	; 0xd6b2 <ff_wtoupper+0x20>
		}
		uni = uc;
    d750:	80 e0       	ldi	r24, 0x00	; 0
    d752:	90 e0       	ldi	r25, 0x00	; 0
	}

	return uni;
}
    d754:	08 95       	ret

0000d756 <disk_status>:

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
	switch (pdrv) {
    d756:	81 11       	cpse	r24, r1
#ifdef DRV_MMC
	case DEV_MMC :
		return ( mmc_disk_status() );
    d758:	02 c0       	rjmp	.+4      	; 0xd75e <disk_status+0x8>
    d75a:	a8 c1       	rjmp	.+848    	; 0xdaac <mmc_disk_status>
#ifdef DRV_USB
	case DEV_USB :
		return ( usb_disk_status() );
#endif
	}
	return STA_NOINIT;
    d75c:	08 95       	ret
}
    d75e:	81 e0       	ldi	r24, 0x01	; 1
    d760:	08 95       	ret

0000d762 <disk_initialize>:
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{

	switch (pdrv) {
    d762:	81 11       	cpse	r24, r1
#ifdef DRV_MMC
	case DEV_MMC :
		return ( mmc_disk_initialize() );
    d764:	02 c0       	rjmp	.+4      	; 0xd76a <disk_initialize+0x8>
    d766:	fd c0       	rjmp	.+506    	; 0xd962 <mmc_disk_initialize>
#ifdef DRV_USB
	case DEV_USB :
		return ( usb_disk_initialize() );
#endif
	}
	return STA_NOINIT;
    d768:	08 95       	ret
}
    d76a:	81 e0       	ldi	r24, 0x01	; 1
    d76c:	08 95       	ret

0000d76e <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	LBA_t sector,	/* Start sector in LBA */
	UINT count		/* Number of sectors to read */
)
{
    d76e:	0f 93       	push	r16
    d770:	1f 93       	push	r17
    d772:	fb 01       	movw	r30, r22
	switch (pdrv) {
    d774:	81 11       	cpse	r24, r1
    d776:	06 c0       	rjmp	.+12     	; 0xd784 <disk_read+0x16>
    d778:	ba 01       	movw	r22, r20
    d77a:	a9 01       	movw	r20, r18
    d77c:	cf 01       	movw	r24, r30
#ifdef DRV_MMC
	case DEV_MMC :
		return ( mmc_disk_read(buff, sector, count) );
    d77e:	98 01       	movw	r18, r16
    d780:	98 d1       	rcall	.+816    	; 0xdab2 <mmc_disk_read>
    d782:	02 c0       	rjmp	.+4      	; 0xd788 <disk_read+0x1a>
#ifdef DRV_USB
	case DEV_USB :
		return ( usb_disk_read(buff, sector, count) );
#endif
	}
	return RES_PARERR;
    d784:	84 e0       	ldi	r24, 0x04	; 4
    d786:	90 e0       	ldi	r25, 0x00	; 0
}
    d788:	1f 91       	pop	r17
    d78a:	0f 91       	pop	r16
    d78c:	08 95       	ret

0000d78e <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	LBA_t sector,		/* Start sector in LBA */
	UINT count			/* Number of sectors to write */
)
{
    d78e:	0f 93       	push	r16
    d790:	1f 93       	push	r17
    d792:	fb 01       	movw	r30, r22
	switch (pdrv) {
    d794:	81 11       	cpse	r24, r1
    d796:	06 c0       	rjmp	.+12     	; 0xd7a4 <disk_write+0x16>
    d798:	ba 01       	movw	r22, r20
    d79a:	a9 01       	movw	r20, r18
    d79c:	cf 01       	movw	r24, r30
#ifdef DRV_MMC
	case DEV_MMC :
		return ( mmc_disk_write(buff, sector, count) );
    d79e:	98 01       	movw	r18, r16
    d7a0:	ce d1       	rcall	.+924    	; 0xdb3e <mmc_disk_write>
    d7a2:	02 c0       	rjmp	.+4      	; 0xd7a8 <disk_write+0x1a>
	case DEV_USB :
		return ( usb_disk_write(buff, sector, count) );
#endif
	}

	return RES_PARERR;
    d7a4:	84 e0       	ldi	r24, 0x04	; 4
    d7a6:	90 e0       	ldi	r25, 0x00	; 0
}
    d7a8:	1f 91       	pop	r17
    d7aa:	0f 91       	pop	r16
    d7ac:	08 95       	ret

0000d7ae <disk_ioctl>:
DRESULT disk_ioctl (
    BYTE pdrv,      /* Physical drive nmuber (0..) */
    BYTE cmd,       /* Control code */
    void *buff      /* Buffer to send/receive control data */
)
{
    d7ae:	96 2f       	mov	r25, r22
    switch (pdrv) {
    d7b0:	81 11       	cpse	r24, r1
    d7b2:	04 c0       	rjmp	.+8      	; 0xd7bc <disk_ioctl+0xe>
    d7b4:	ba 01       	movw	r22, r20
#ifdef DRV_MMC
    case DEV_MMC :
        return ( mmc_disk_ioctl(cmd, buff) );
    d7b6:	89 2f       	mov	r24, r25
    d7b8:	27 c2       	rjmp	.+1102   	; 0xdc08 <mmc_disk_ioctl>
#ifdef DRV_USB
    case DEV_MMC :
        return ( usb_disk_ioctl(cmd, buff) );
#endif
    }
    return RES_PARERR;
    d7ba:	08 95       	ret
    d7bc:	84 e0       	ldi	r24, 0x04	; 4
}
    d7be:	90 e0       	ldi	r25, 0x00	; 0
    d7c0:	08 95       	ret

0000d7c2 <xchg_spi>:
///@return Data read
static
BYTE xchg_spi (     /* Returns received data */
    BYTE dat        /* Data to be sent */
)
{
    d7c2:	df c4       	rjmp	.+2494   	; 0xe182 <mmc_spi_TXRX>
    d7c4:	08 95       	ret

0000d7c6 <deselect>:
    d7c6:	b4 d4       	rcall	.+2408   	; 0xe130 <mmc_spi_end>
    d7c8:	8f ef       	ldi	r24, 0xFF	; 255
    d7ca:	fb df       	rcall	.-10     	; 0xd7c2 <xchg_spi>
    d7cc:	8f ef       	ldi	r24, 0xFF	; 255
    d7ce:	f9 cf       	rjmp	.-14     	; 0xd7c2 <xchg_spi>
    d7d0:	08 95       	ret

0000d7d2 <rcvr_datablock>:
    d7d2:	0f 93       	push	r16
    d7d4:	1f 93       	push	r17
    d7d6:	cf 93       	push	r28
    d7d8:	df 93       	push	r29
    d7da:	ec 01       	movw	r28, r24
    d7dc:	8b 01       	movw	r16, r22
    d7de:	46 9a       	sbi	0x08, 6	; 8
    d7e0:	3e 9a       	sbi	0x07, 6	; 7
    d7e2:	88 ee       	ldi	r24, 0xE8	; 232
    d7e4:	93 e0       	ldi	r25, 0x03	; 3
    d7e6:	d0 d4       	rcall	.+2464   	; 0xe188 <mmc_set_ms_timeout>
    d7e8:	8f ef       	ldi	r24, 0xFF	; 255
    d7ea:	cb d4       	rcall	.+2454   	; 0xe182 <mmc_spi_TXRX>
    d7ec:	8f 3f       	cpi	r24, 0xFF	; 255
    d7ee:	31 f4       	brne	.+12     	; 0xd7fc <rcvr_datablock+0x2a>
    d7f0:	d2 d4       	rcall	.+2468   	; 0xe196 <mmc_test_timeout>
    d7f2:	89 2b       	or	r24, r25
    d7f4:	c9 f3       	breq	.-14     	; 0xd7e8 <rcvr_datablock+0x16>
    d7f6:	80 e0       	ldi	r24, 0x00	; 0
    d7f8:	90 e0       	ldi	r25, 0x00	; 0
    d7fa:	0d c0       	rjmp	.+26     	; 0xd816 <rcvr_datablock+0x44>
    d7fc:	8e 3f       	cpi	r24, 0xFE	; 254
    d7fe:	d9 f7       	brne	.-10     	; 0xd7f6 <rcvr_datablock+0x24>
    d800:	b8 01       	movw	r22, r16
    d802:	ce 01       	movw	r24, r28
    d804:	bb d4       	rcall	.+2422   	; 0xe17c <mmc_spi_RX_buffer>
    d806:	8f ef       	ldi	r24, 0xFF	; 255
    d808:	dc df       	rcall	.-72     	; 0xd7c2 <xchg_spi>
    d80a:	8f ef       	ldi	r24, 0xFF	; 255
    d80c:	da df       	rcall	.-76     	; 0xd7c2 <xchg_spi>
    d80e:	46 98       	cbi	0x08, 6	; 8
    d810:	3e 9a       	sbi	0x07, 6	; 7
    d812:	81 e0       	ldi	r24, 0x01	; 1
    d814:	90 e0       	ldi	r25, 0x00	; 0
    d816:	df 91       	pop	r29
    d818:	cf 91       	pop	r28
    d81a:	1f 91       	pop	r17
    d81c:	0f 91       	pop	r16
    d81e:	08 95       	ret

0000d820 <wait_ready>:
    d820:	cf 93       	push	r28
    d822:	b2 d4       	rcall	.+2404   	; 0xe188 <mmc_set_ms_timeout>
    d824:	8f ef       	ldi	r24, 0xFF	; 255
    d826:	ad d4       	rcall	.+2394   	; 0xe182 <mmc_spi_TXRX>
    d828:	c8 2f       	mov	r28, r24
    d82a:	8f 3f       	cpi	r24, 0xFF	; 255
    d82c:	19 f0       	breq	.+6      	; 0xd834 <wait_ready+0x14>
    d82e:	b3 d4       	rcall	.+2406   	; 0xe196 <mmc_test_timeout>
    d830:	89 2b       	or	r24, r25
    d832:	c1 f3       	breq	.-16     	; 0xd824 <wait_ready+0x4>
    d834:	81 e0       	ldi	r24, 0x01	; 1
    d836:	90 e0       	ldi	r25, 0x00	; 0
    d838:	cf 3f       	cpi	r28, 0xFF	; 255
    d83a:	11 f0       	breq	.+4      	; 0xd840 <wait_ready+0x20>
    d83c:	80 e0       	ldi	r24, 0x00	; 0
    d83e:	90 e0       	ldi	r25, 0x00	; 0
    d840:	cf 91       	pop	r28
    d842:	08 95       	ret

0000d844 <select>:
    d844:	cf 93       	push	r28
    d846:	df 93       	push	r29
    d848:	00 d0       	rcall	.+0      	; 0xd84a <select+0x6>
    d84a:	1f 92       	push	r1
    d84c:	64 d4       	rcall	.+2248   	; 0xe116 <mmc_spi_begin>
    d84e:	8f ef       	ldi	r24, 0xFF	; 255
    d850:	b8 df       	rcall	.-144    	; 0xd7c2 <xchg_spi>
    d852:	88 ee       	ldi	r24, 0xE8	; 232
    d854:	93 e0       	ldi	r25, 0x03	; 3
    d856:	e4 df       	rcall	.-56     	; 0xd820 <wait_ready>
    d858:	ec 01       	movw	r28, r24
    d85a:	89 2b       	or	r24, r25
    d85c:	61 f4       	brne	.+24     	; 0xd876 <select+0x32>
    d85e:	80 e3       	ldi	r24, 0x30	; 48
    d860:	97 e0       	ldi	r25, 0x07	; 7
    d862:	a0 e0       	ldi	r26, 0x00	; 0
    d864:	ed b7       	in	r30, 0x3d	; 61
    d866:	fe b7       	in	r31, 0x3e	; 62
    d868:	81 83       	std	Z+1, r24	; 0x01
    d86a:	92 83       	std	Z+2, r25	; 0x02
    d86c:	a3 83       	std	Z+3, r26	; 0x03
    d86e:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    d872:	a9 df       	rcall	.-174    	; 0xd7c6 <deselect>
    d874:	02 c0       	rjmp	.+4      	; 0xd87a <select+0x36>
    d876:	c1 e0       	ldi	r28, 0x01	; 1
    d878:	d0 e0       	ldi	r29, 0x00	; 0
    d87a:	ce 01       	movw	r24, r28
    d87c:	cd b7       	in	r28, 0x3d	; 61
    d87e:	de b7       	in	r29, 0x3e	; 62
    d880:	23 96       	adiw	r28, 0x03	; 3
    d882:	e2 e0       	ldi	r30, 0x02	; 2
    d884:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__epilogue_restores__+0x20>

0000d888 <send_cmd>:
    d888:	ff 92       	push	r15
    d88a:	0f 93       	push	r16
    d88c:	1f 93       	push	r17
    d88e:	cf 93       	push	r28
    d890:	df 93       	push	r29
    d892:	c8 2f       	mov	r28, r24
    d894:	d4 2f       	mov	r29, r20
    d896:	15 2f       	mov	r17, r21
    d898:	06 2f       	mov	r16, r22
    d89a:	f7 2e       	mov	r15, r23
    d89c:	87 ff       	sbrs	r24, 7
    d89e:	08 c0       	rjmp	.+16     	; 0xd8b0 <send_cmd+0x28>
    d8a0:	40 e0       	ldi	r20, 0x00	; 0
    d8a2:	50 e0       	ldi	r21, 0x00	; 0
    d8a4:	ba 01       	movw	r22, r20
    d8a6:	87 e3       	ldi	r24, 0x37	; 55
    d8a8:	ef df       	rcall	.-34     	; 0xd888 <send_cmd>
    d8aa:	82 30       	cpi	r24, 0x02	; 2
    d8ac:	58 f5       	brcc	.+86     	; 0xd904 <send_cmd+0x7c>
    d8ae:	cf 77       	andi	r28, 0x7F	; 127
    d8b0:	cc 30       	cpi	r28, 0x0C	; 12
    d8b2:	71 f4       	brne	.+28     	; 0xd8d0 <send_cmd+0x48>
    d8b4:	8c 2f       	mov	r24, r28
    d8b6:	80 64       	ori	r24, 0x40	; 64
    d8b8:	84 df       	rcall	.-248    	; 0xd7c2 <xchg_spi>
    d8ba:	8f 2d       	mov	r24, r15
    d8bc:	82 df       	rcall	.-252    	; 0xd7c2 <xchg_spi>
    d8be:	80 2f       	mov	r24, r16
    d8c0:	80 df       	rcall	.-256    	; 0xd7c2 <xchg_spi>
    d8c2:	81 2f       	mov	r24, r17
    d8c4:	7e df       	rcall	.-260    	; 0xd7c2 <xchg_spi>
    d8c6:	8d 2f       	mov	r24, r29
    d8c8:	7c df       	rcall	.-264    	; 0xd7c2 <xchg_spi>
    d8ca:	cc 23       	and	r28, r28
    d8cc:	c9 f0       	breq	.+50     	; 0xd900 <send_cmd+0x78>
    d8ce:	06 c0       	rjmp	.+12     	; 0xd8dc <send_cmd+0x54>
    d8d0:	7a df       	rcall	.-268    	; 0xd7c6 <deselect>
    d8d2:	b8 df       	rcall	.-144    	; 0xd844 <select>
    d8d4:	89 2b       	or	r24, r25
    d8d6:	71 f7       	brne	.-36     	; 0xd8b4 <send_cmd+0x2c>
    d8d8:	8f ef       	ldi	r24, 0xFF	; 255
    d8da:	14 c0       	rjmp	.+40     	; 0xd904 <send_cmd+0x7c>
    d8dc:	c8 30       	cpi	r28, 0x08	; 8
    d8de:	11 f4       	brne	.+4      	; 0xd8e4 <send_cmd+0x5c>
    d8e0:	87 e8       	ldi	r24, 0x87	; 135
    d8e2:	01 c0       	rjmp	.+2      	; 0xd8e6 <send_cmd+0x5e>
    d8e4:	81 e0       	ldi	r24, 0x01	; 1
    d8e6:	6d df       	rcall	.-294    	; 0xd7c2 <xchg_spi>
    d8e8:	cc 30       	cpi	r28, 0x0C	; 12
    d8ea:	11 f4       	brne	.+4      	; 0xd8f0 <send_cmd+0x68>
    d8ec:	8f ef       	ldi	r24, 0xFF	; 255
    d8ee:	69 df       	rcall	.-302    	; 0xd7c2 <xchg_spi>
    d8f0:	ca e0       	ldi	r28, 0x0A	; 10
    d8f2:	8f ef       	ldi	r24, 0xFF	; 255
    d8f4:	46 d4       	rcall	.+2188   	; 0xe182 <mmc_spi_TXRX>
    d8f6:	87 ff       	sbrs	r24, 7
    d8f8:	05 c0       	rjmp	.+10     	; 0xd904 <send_cmd+0x7c>
    d8fa:	c1 50       	subi	r28, 0x01	; 1
    d8fc:	d1 f7       	brne	.-12     	; 0xd8f2 <send_cmd+0x6a>
    d8fe:	02 c0       	rjmp	.+4      	; 0xd904 <send_cmd+0x7c>
    d900:	85 e9       	ldi	r24, 0x95	; 149
    d902:	f5 cf       	rjmp	.-22     	; 0xd8ee <send_cmd+0x66>
    d904:	cd b7       	in	r28, 0x3d	; 61
    d906:	de b7       	in	r29, 0x3e	; 62
    d908:	e5 e0       	ldi	r30, 0x05	; 5
    d90a:	0c 94 42 e5 	jmp	0x1ca84	; 0x1ca84 <__epilogue_restores__+0x1a>

0000d90e <xmit_datablock>:
    d90e:	0f 93       	push	r16
    d910:	1f 93       	push	r17
    d912:	cf 93       	push	r28
    d914:	8c 01       	movw	r16, r24
    d916:	c6 2f       	mov	r28, r22
    d918:	2c 9a       	sbi	0x05, 4	; 5
    d91a:	24 9a       	sbi	0x04, 4	; 4
    d91c:	88 ee       	ldi	r24, 0xE8	; 232
    d91e:	93 e0       	ldi	r25, 0x03	; 3
    d920:	7f df       	rcall	.-258    	; 0xd820 <wait_ready>
    d922:	89 2b       	or	r24, r25
    d924:	19 f4       	brne	.+6      	; 0xd92c <xmit_datablock+0x1e>
    d926:	80 e0       	ldi	r24, 0x00	; 0
    d928:	90 e0       	ldi	r25, 0x00	; 0
    d92a:	17 c0       	rjmp	.+46     	; 0xd95a <xmit_datablock+0x4c>
    d92c:	8c 2f       	mov	r24, r28
    d92e:	49 df       	rcall	.-366    	; 0xd7c2 <xchg_spi>
    d930:	cd 3f       	cpi	r28, 0xFD	; 253
    d932:	29 f4       	brne	.+10     	; 0xd93e <xmit_datablock+0x30>
    d934:	46 98       	cbi	0x08, 6	; 8
    d936:	3e 9a       	sbi	0x07, 6	; 7
    d938:	81 e0       	ldi	r24, 0x01	; 1
    d93a:	90 e0       	ldi	r25, 0x00	; 0
    d93c:	0e c0       	rjmp	.+28     	; 0xd95a <xmit_datablock+0x4c>
    d93e:	60 e0       	ldi	r22, 0x00	; 0
    d940:	72 e0       	ldi	r23, 0x02	; 2
    d942:	c8 01       	movw	r24, r16
    d944:	18 d4       	rcall	.+2096   	; 0xe176 <mmc_spi_TX_buffer>
    d946:	8f ef       	ldi	r24, 0xFF	; 255
    d948:	3c df       	rcall	.-392    	; 0xd7c2 <xchg_spi>
    d94a:	8f ef       	ldi	r24, 0xFF	; 255
    d94c:	3a df       	rcall	.-396    	; 0xd7c2 <xchg_spi>
    d94e:	8f ef       	ldi	r24, 0xFF	; 255
    d950:	18 d4       	rcall	.+2096   	; 0xe182 <mmc_spi_TXRX>
    d952:	8f 71       	andi	r24, 0x1F	; 31
    d954:	85 30       	cpi	r24, 0x05	; 5
    d956:	39 f7       	brne	.-50     	; 0xd926 <xmit_datablock+0x18>
    d958:	ed cf       	rjmp	.-38     	; 0xd934 <xmit_datablock+0x26>
    d95a:	cf 91       	pop	r28
    d95c:	1f 91       	pop	r17
    d95e:	0f 91       	pop	r16
    d960:	08 95       	ret

0000d962 <mmc_disk_initialize>:
    d962:	a4 e0       	ldi	r26, 0x04	; 4
    d964:	b0 e0       	ldi	r27, 0x00	; 0
    d966:	e7 eb       	ldi	r30, 0xB7	; 183
    d968:	fc e6       	ldi	r31, 0x6C	; 108
    d96a:	0c 94 23 e5 	jmp	0x1ca46	; 0x1ca46 <__prologue_saves__+0x14>
    d96e:	d4 d4       	rcall	.+2472   	; 0xe318 <mmc_power_off>
    d970:	64 e6       	ldi	r22, 0x64	; 100
    d972:	70 e0       	ldi	r23, 0x00	; 0
    d974:	80 e0       	ldi	r24, 0x00	; 0
    d976:	90 e0       	ldi	r25, 0x00	; 0
    d978:	0e 94 a7 2a 	call	0x554e	; 0x554e <delayms>
    d97c:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Stat>
    d980:	81 fd       	sbrc	r24, 1
    d982:	8e c0       	rjmp	.+284    	; 0xdaa0 <mmc_disk_initialize+0x13e>
    d984:	c8 d4       	rcall	.+2448   	; 0xe316 <mmc_power_on>
    d986:	d8 d3       	rcall	.+1968   	; 0xe138 <mmc_slow>
    d988:	1a e0       	ldi	r17, 0x0A	; 10
    d98a:	8f ef       	ldi	r24, 0xFF	; 255
    d98c:	1a df       	rcall	.-460    	; 0xd7c2 <xchg_spi>
    d98e:	11 50       	subi	r17, 0x01	; 1
    d990:	e1 f7       	brne	.-8      	; 0xd98a <mmc_disk_initialize+0x28>
    d992:	40 e0       	ldi	r20, 0x00	; 0
    d994:	50 e0       	ldi	r21, 0x00	; 0
    d996:	ba 01       	movw	r22, r20
    d998:	80 e0       	ldi	r24, 0x00	; 0
    d99a:	76 df       	rcall	.-276    	; 0xd888 <send_cmd>
    d99c:	81 30       	cpi	r24, 0x01	; 1
    d99e:	09 f0       	breq	.+2      	; 0xd9a2 <mmc_disk_initialize+0x40>
    d9a0:	6f c0       	rjmp	.+222    	; 0xda80 <mmc_disk_initialize+0x11e>
    d9a2:	80 ed       	ldi	r24, 0xD0	; 208
    d9a4:	97 e0       	ldi	r25, 0x07	; 7
    d9a6:	f0 d3       	rcall	.+2016   	; 0xe188 <mmc_set_ms_timeout>
    d9a8:	4a ea       	ldi	r20, 0xAA	; 170
    d9aa:	51 e0       	ldi	r21, 0x01	; 1
    d9ac:	60 e0       	ldi	r22, 0x00	; 0
    d9ae:	70 e0       	ldi	r23, 0x00	; 0
    d9b0:	88 e0       	ldi	r24, 0x08	; 8
    d9b2:	6a df       	rcall	.-300    	; 0xd888 <send_cmd>
    d9b4:	81 30       	cpi	r24, 0x01	; 1
    d9b6:	09 f0       	breq	.+2      	; 0xd9ba <mmc_disk_initialize+0x58>
    d9b8:	3d c0       	rjmp	.+122    	; 0xda34 <mmc_disk_initialize+0xd2>
    d9ba:	8e 01       	movw	r16, r28
    d9bc:	0f 5f       	subi	r16, 0xFF	; 255
    d9be:	1f 4f       	sbci	r17, 0xFF	; 255
    d9c0:	6e 01       	movw	r12, r28
    d9c2:	85 e0       	ldi	r24, 0x05	; 5
    d9c4:	c8 0e       	add	r12, r24
    d9c6:	d1 1c       	adc	r13, r1
    d9c8:	78 01       	movw	r14, r16
    d9ca:	8f ef       	ldi	r24, 0xFF	; 255
    d9cc:	da d3       	rcall	.+1972   	; 0xe182 <mmc_spi_TXRX>
    d9ce:	f7 01       	movw	r30, r14
    d9d0:	81 93       	st	Z+, r24
    d9d2:	7f 01       	movw	r14, r30
    d9d4:	ce 16       	cp	r12, r30
    d9d6:	df 06       	cpc	r13, r31
    d9d8:	c1 f7       	brne	.-16     	; 0xd9ca <mmc_disk_initialize+0x68>
    d9da:	8b 81       	ldd	r24, Y+3	; 0x03
    d9dc:	81 30       	cpi	r24, 0x01	; 1
    d9de:	09 f0       	breq	.+2      	; 0xd9e2 <mmc_disk_initialize+0x80>
    d9e0:	4f c0       	rjmp	.+158    	; 0xda80 <mmc_disk_initialize+0x11e>
    d9e2:	8c 81       	ldd	r24, Y+4	; 0x04
    d9e4:	8a 3a       	cpi	r24, 0xAA	; 170
    d9e6:	09 f0       	breq	.+2      	; 0xd9ea <mmc_disk_initialize+0x88>
    d9e8:	4b c0       	rjmp	.+150    	; 0xda80 <mmc_disk_initialize+0x11e>
    d9ea:	d5 d3       	rcall	.+1962   	; 0xe196 <mmc_test_timeout>
    d9ec:	89 2b       	or	r24, r25
    d9ee:	29 f0       	breq	.+10     	; 0xd9fa <mmc_disk_initialize+0x98>
    d9f0:	d2 d3       	rcall	.+1956   	; 0xe196 <mmc_test_timeout>
    d9f2:	89 2b       	or	r24, r25
    d9f4:	09 f0       	breq	.+2      	; 0xd9f8 <mmc_disk_initialize+0x96>
    d9f6:	44 c0       	rjmp	.+136    	; 0xda80 <mmc_disk_initialize+0x11e>
    d9f8:	09 c0       	rjmp	.+18     	; 0xda0c <mmc_disk_initialize+0xaa>
    d9fa:	40 e0       	ldi	r20, 0x00	; 0
    d9fc:	50 e0       	ldi	r21, 0x00	; 0
    d9fe:	60 e0       	ldi	r22, 0x00	; 0
    da00:	70 e4       	ldi	r23, 0x40	; 64
    da02:	89 ea       	ldi	r24, 0xA9	; 169
    da04:	41 df       	rcall	.-382    	; 0xd888 <send_cmd>
    da06:	81 11       	cpse	r24, r1
    da08:	f0 cf       	rjmp	.-32     	; 0xd9ea <mmc_disk_initialize+0x88>
    da0a:	f2 cf       	rjmp	.-28     	; 0xd9f0 <mmc_disk_initialize+0x8e>
    da0c:	40 e0       	ldi	r20, 0x00	; 0
    da0e:	50 e0       	ldi	r21, 0x00	; 0
    da10:	ba 01       	movw	r22, r20
    da12:	8a e3       	ldi	r24, 0x3A	; 58
    da14:	39 df       	rcall	.-398    	; 0xd888 <send_cmd>
    da16:	81 11       	cpse	r24, r1
    da18:	33 c0       	rjmp	.+102    	; 0xda80 <mmc_disk_initialize+0x11e>
    da1a:	8f ef       	ldi	r24, 0xFF	; 255
    da1c:	b2 d3       	rcall	.+1892   	; 0xe182 <mmc_spi_TXRX>
    da1e:	f8 01       	movw	r30, r16
    da20:	81 93       	st	Z+, r24
    da22:	8f 01       	movw	r16, r30
    da24:	ce 16       	cp	r12, r30
    da26:	df 06       	cpc	r13, r31
    da28:	c1 f7       	brne	.-16     	; 0xda1a <mmc_disk_initialize+0xb8>
    da2a:	89 81       	ldd	r24, Y+1	; 0x01
    da2c:	86 fd       	sbrc	r24, 6
    da2e:	2a c0       	rjmp	.+84     	; 0xda84 <mmc_disk_initialize+0x122>
    da30:	14 e0       	ldi	r17, 0x04	; 4
    da32:	29 c0       	rjmp	.+82     	; 0xda86 <mmc_disk_initialize+0x124>
    da34:	80 ed       	ldi	r24, 0xD0	; 208
    da36:	97 e0       	ldi	r25, 0x07	; 7
    da38:	a7 d3       	rcall	.+1870   	; 0xe188 <mmc_set_ms_timeout>
    da3a:	40 e0       	ldi	r20, 0x00	; 0
    da3c:	50 e0       	ldi	r21, 0x00	; 0
    da3e:	ba 01       	movw	r22, r20
    da40:	89 ea       	ldi	r24, 0xA9	; 169
    da42:	22 df       	rcall	.-444    	; 0xd888 <send_cmd>
    da44:	82 30       	cpi	r24, 0x02	; 2
    da46:	18 f0       	brcs	.+6      	; 0xda4e <mmc_disk_initialize+0xec>
    da48:	11 e0       	ldi	r17, 0x01	; 1
    da4a:	01 e0       	ldi	r16, 0x01	; 1
    da4c:	02 c0       	rjmp	.+4      	; 0xda52 <mmc_disk_initialize+0xf0>
    da4e:	12 e0       	ldi	r17, 0x02	; 2
    da50:	09 ea       	ldi	r16, 0xA9	; 169
    da52:	a1 d3       	rcall	.+1858   	; 0xe196 <mmc_test_timeout>
    da54:	89 2b       	or	r24, r25
    da56:	21 f0       	breq	.+8      	; 0xda60 <mmc_disk_initialize+0xfe>
    da58:	9e d3       	rcall	.+1852   	; 0xe196 <mmc_test_timeout>
    da5a:	89 2b       	or	r24, r25
    da5c:	89 f4       	brne	.+34     	; 0xda80 <mmc_disk_initialize+0x11e>
    da5e:	08 c0       	rjmp	.+16     	; 0xda70 <mmc_disk_initialize+0x10e>
    da60:	40 e0       	ldi	r20, 0x00	; 0
    da62:	50 e0       	ldi	r21, 0x00	; 0
    da64:	ba 01       	movw	r22, r20
    da66:	80 2f       	mov	r24, r16
    da68:	0f df       	rcall	.-482    	; 0xd888 <send_cmd>
    da6a:	81 11       	cpse	r24, r1
    da6c:	f2 cf       	rjmp	.-28     	; 0xda52 <mmc_disk_initialize+0xf0>
    da6e:	f4 cf       	rjmp	.-24     	; 0xda58 <mmc_disk_initialize+0xf6>
    da70:	40 e0       	ldi	r20, 0x00	; 0
    da72:	52 e0       	ldi	r21, 0x02	; 2
    da74:	60 e0       	ldi	r22, 0x00	; 0
    da76:	70 e0       	ldi	r23, 0x00	; 0
    da78:	80 e1       	ldi	r24, 0x10	; 16
    da7a:	06 df       	rcall	.-500    	; 0xd888 <send_cmd>
    da7c:	88 23       	and	r24, r24
    da7e:	19 f0       	breq	.+6      	; 0xda86 <mmc_disk_initialize+0x124>
    da80:	10 e0       	ldi	r17, 0x00	; 0
    da82:	01 c0       	rjmp	.+2      	; 0xda86 <mmc_disk_initialize+0x124>
    da84:	1c e0       	ldi	r17, 0x0C	; 12
    da86:	10 93 c1 17 	sts	0x17C1, r17	; 0x8017c1 <CardType>
    da8a:	9d de       	rcall	.-710    	; 0xd7c6 <deselect>
    da8c:	11 23       	and	r17, r17
    da8e:	39 f0       	breq	.+14     	; 0xda9e <mmc_disk_initialize+0x13c>
    da90:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Stat>
    da94:	8e 7f       	andi	r24, 0xFE	; 254
    da96:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <Stat>
    da9a:	60 d3       	rcall	.+1728   	; 0xe15c <mmc_fast>
    da9c:	01 c0       	rjmp	.+2      	; 0xdaa0 <mmc_disk_initialize+0x13e>
    da9e:	3c d4       	rcall	.+2168   	; 0xe318 <mmc_power_off>
    daa0:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Stat>
    daa4:	24 96       	adiw	r28, 0x04	; 4
    daa6:	e8 e0       	ldi	r30, 0x08	; 8
    daa8:	0c 94 3f e5 	jmp	0x1ca7e	; 0x1ca7e <__epilogue_restores__+0x14>

0000daac <mmc_disk_status>:
    daac:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Stat>
    dab0:	08 95       	ret

0000dab2 <mmc_disk_read>:
    dab2:	ef 92       	push	r14
    dab4:	ff 92       	push	r15
    dab6:	1f 93       	push	r17
    dab8:	cf 93       	push	r28
    daba:	df 93       	push	r29
    dabc:	7c 01       	movw	r14, r24
    dabe:	e9 01       	movw	r28, r18
    dac0:	20 97       	sbiw	r28, 0x00	; 0
    dac2:	19 f4       	brne	.+6      	; 0xdaca <mmc_disk_read+0x18>
    dac4:	80 de       	rcall	.-768    	; 0xd7c6 <deselect>
    dac6:	84 e0       	ldi	r24, 0x04	; 4
    dac8:	06 c0       	rjmp	.+12     	; 0xdad6 <mmc_disk_read+0x24>
    daca:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Stat>
    dace:	80 ff       	sbrs	r24, 0
    dad0:	04 c0       	rjmp	.+8      	; 0xdada <mmc_disk_read+0x28>
    dad2:	79 de       	rcall	.-782    	; 0xd7c6 <deselect>
    dad4:	83 e0       	ldi	r24, 0x03	; 3
    dad6:	90 e0       	ldi	r25, 0x00	; 0
    dad8:	2c c0       	rjmp	.+88     	; 0xdb32 <mmc_disk_read+0x80>
    dada:	80 91 c1 17 	lds	r24, 0x17C1	; 0x8017c1 <CardType>
    dade:	83 fd       	sbrc	r24, 3
    dae0:	07 c0       	rjmp	.+14     	; 0xdaf0 <mmc_disk_read+0x3e>
    dae2:	89 e0       	ldi	r24, 0x09	; 9
    dae4:	44 0f       	add	r20, r20
    dae6:	55 1f       	adc	r21, r21
    dae8:	66 1f       	adc	r22, r22
    daea:	77 1f       	adc	r23, r23
    daec:	8a 95       	dec	r24
    daee:	d1 f7       	brne	.-12     	; 0xdae4 <mmc_disk_read+0x32>
    daf0:	c2 30       	cpi	r28, 0x02	; 2
    daf2:	d1 05       	cpc	r29, r1
    daf4:	10 f4       	brcc	.+4      	; 0xdafa <mmc_disk_read+0x48>
    daf6:	11 e1       	ldi	r17, 0x11	; 17
    daf8:	01 c0       	rjmp	.+2      	; 0xdafc <mmc_disk_read+0x4a>
    dafa:	12 e1       	ldi	r17, 0x12	; 18
    dafc:	81 2f       	mov	r24, r17
    dafe:	c4 de       	rcall	.-632    	; 0xd888 <send_cmd>
    db00:	81 11       	cpse	r24, r1
    db02:	11 c0       	rjmp	.+34     	; 0xdb26 <mmc_disk_read+0x74>
    db04:	60 e0       	ldi	r22, 0x00	; 0
    db06:	72 e0       	ldi	r23, 0x02	; 2
    db08:	c7 01       	movw	r24, r14
    db0a:	63 de       	rcall	.-826    	; 0xd7d2 <rcvr_datablock>
    db0c:	89 2b       	or	r24, r25
    db0e:	21 f0       	breq	.+8      	; 0xdb18 <mmc_disk_read+0x66>
    db10:	8e ef       	ldi	r24, 0xFE	; 254
    db12:	f8 1a       	sub	r15, r24
    db14:	21 97       	sbiw	r28, 0x01	; 1
    db16:	b1 f7       	brne	.-20     	; 0xdb04 <mmc_disk_read+0x52>
    db18:	12 31       	cpi	r17, 0x12	; 18
    db1a:	29 f4       	brne	.+10     	; 0xdb26 <mmc_disk_read+0x74>
    db1c:	40 e0       	ldi	r20, 0x00	; 0
    db1e:	50 e0       	ldi	r21, 0x00	; 0
    db20:	ba 01       	movw	r22, r20
    db22:	8c e0       	ldi	r24, 0x0C	; 12
    db24:	b1 de       	rcall	.-670    	; 0xd888 <send_cmd>
    db26:	4f de       	rcall	.-866    	; 0xd7c6 <deselect>
    db28:	81 e0       	ldi	r24, 0x01	; 1
    db2a:	90 e0       	ldi	r25, 0x00	; 0
    db2c:	cd 2b       	or	r28, r29
    db2e:	09 f4       	brne	.+2      	; 0xdb32 <mmc_disk_read+0x80>
    db30:	80 e0       	ldi	r24, 0x00	; 0
    db32:	df 91       	pop	r29
    db34:	cf 91       	pop	r28
    db36:	1f 91       	pop	r17
    db38:	ff 90       	pop	r15
    db3a:	ef 90       	pop	r14
    db3c:	08 95       	ret

0000db3e <mmc_disk_write>:
    db3e:	a0 e0       	ldi	r26, 0x00	; 0
    db40:	b0 e0       	ldi	r27, 0x00	; 0
    db42:	e5 ea       	ldi	r30, 0xA5	; 165
    db44:	fd e6       	ldi	r31, 0x6D	; 109
    db46:	0c 94 23 e5 	jmp	0x1ca46	; 0x1ca46 <__prologue_saves__+0x14>
    db4a:	8c 01       	movw	r16, r24
    db4c:	6a 01       	movw	r12, r20
    db4e:	7b 01       	movw	r14, r22
    db50:	e9 01       	movw	r28, r18
    db52:	20 97       	sbiw	r28, 0x00	; 0
    db54:	19 f4       	brne	.+6      	; 0xdb5c <mmc_disk_write+0x1e>
    db56:	37 de       	rcall	.-914    	; 0xd7c6 <deselect>
    db58:	84 e0       	ldi	r24, 0x04	; 4
    db5a:	06 c0       	rjmp	.+12     	; 0xdb68 <mmc_disk_write+0x2a>
    db5c:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Stat>
    db60:	80 ff       	sbrs	r24, 0
    db62:	04 c0       	rjmp	.+8      	; 0xdb6c <mmc_disk_write+0x2e>
    db64:	30 de       	rcall	.-928    	; 0xd7c6 <deselect>
    db66:	83 e0       	ldi	r24, 0x03	; 3
    db68:	90 e0       	ldi	r25, 0x00	; 0
    db6a:	49 c0       	rjmp	.+146    	; 0xdbfe <mmc_disk_write+0xc0>
    db6c:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Stat>
    db70:	82 ff       	sbrs	r24, 2
    db72:	03 c0       	rjmp	.+6      	; 0xdb7a <mmc_disk_write+0x3c>
    db74:	28 de       	rcall	.-944    	; 0xd7c6 <deselect>
    db76:	82 e0       	ldi	r24, 0x02	; 2
    db78:	f7 cf       	rjmp	.-18     	; 0xdb68 <mmc_disk_write+0x2a>
    db7a:	80 91 c1 17 	lds	r24, 0x17C1	; 0x8017c1 <CardType>
    db7e:	83 fd       	sbrc	r24, 3
    db80:	07 c0       	rjmp	.+14     	; 0xdb90 <mmc_disk_write+0x52>
    db82:	99 e0       	ldi	r25, 0x09	; 9
    db84:	cc 0c       	add	r12, r12
    db86:	dd 1c       	adc	r13, r13
    db88:	ee 1c       	adc	r14, r14
    db8a:	ff 1c       	adc	r15, r15
    db8c:	9a 95       	dec	r25
    db8e:	d1 f7       	brne	.-12     	; 0xdb84 <mmc_disk_write+0x46>
    db90:	c1 30       	cpi	r28, 0x01	; 1
    db92:	d1 05       	cpc	r29, r1
    db94:	89 f4       	brne	.+34     	; 0xdbb8 <mmc_disk_write+0x7a>
    db96:	b7 01       	movw	r22, r14
    db98:	a6 01       	movw	r20, r12
    db9a:	88 e1       	ldi	r24, 0x18	; 24
    db9c:	75 de       	rcall	.-790    	; 0xd888 <send_cmd>
    db9e:	81 11       	cpse	r24, r1
    dba0:	26 c0       	rjmp	.+76     	; 0xdbee <mmc_disk_write+0xb0>
    dba2:	6e ef       	ldi	r22, 0xFE	; 254
    dba4:	c8 01       	movw	r24, r16
    dba6:	b3 de       	rcall	.-666    	; 0xd90e <xmit_datablock>
    dba8:	31 e0       	ldi	r19, 0x01	; 1
    dbaa:	20 e0       	ldi	r18, 0x00	; 0
    dbac:	89 2b       	or	r24, r25
    dbae:	09 f0       	breq	.+2      	; 0xdbb2 <mmc_disk_write+0x74>
    dbb0:	30 e0       	ldi	r19, 0x00	; 0
    dbb2:	c3 2f       	mov	r28, r19
    dbb4:	d2 2f       	mov	r29, r18
    dbb6:	1d c0       	rjmp	.+58     	; 0xdbf2 <mmc_disk_write+0xb4>
    dbb8:	86 70       	andi	r24, 0x06	; 6
    dbba:	29 f0       	breq	.+10     	; 0xdbc6 <mmc_disk_write+0x88>
    dbbc:	ae 01       	movw	r20, r28
    dbbe:	60 e0       	ldi	r22, 0x00	; 0
    dbc0:	70 e0       	ldi	r23, 0x00	; 0
    dbc2:	87 e9       	ldi	r24, 0x97	; 151
    dbc4:	61 de       	rcall	.-830    	; 0xd888 <send_cmd>
    dbc6:	b7 01       	movw	r22, r14
    dbc8:	a6 01       	movw	r20, r12
    dbca:	89 e1       	ldi	r24, 0x19	; 25
    dbcc:	5d de       	rcall	.-838    	; 0xd888 <send_cmd>
    dbce:	81 11       	cpse	r24, r1
    dbd0:	10 c0       	rjmp	.+32     	; 0xdbf2 <mmc_disk_write+0xb4>
    dbd2:	6c ef       	ldi	r22, 0xFC	; 252
    dbd4:	c8 01       	movw	r24, r16
    dbd6:	9b de       	rcall	.-714    	; 0xd90e <xmit_datablock>
    dbd8:	89 2b       	or	r24, r25
    dbda:	19 f0       	breq	.+6      	; 0xdbe2 <mmc_disk_write+0xa4>
    dbdc:	1e 5f       	subi	r17, 0xFE	; 254
    dbde:	21 97       	sbiw	r28, 0x01	; 1
    dbe0:	c1 f7       	brne	.-16     	; 0xdbd2 <mmc_disk_write+0x94>
    dbe2:	6d ef       	ldi	r22, 0xFD	; 253
    dbe4:	80 e0       	ldi	r24, 0x00	; 0
    dbe6:	90 e0       	ldi	r25, 0x00	; 0
    dbe8:	92 de       	rcall	.-732    	; 0xd90e <xmit_datablock>
    dbea:	89 2b       	or	r24, r25
    dbec:	11 f4       	brne	.+4      	; 0xdbf2 <mmc_disk_write+0xb4>
    dbee:	c1 e0       	ldi	r28, 0x01	; 1
    dbf0:	d0 e0       	ldi	r29, 0x00	; 0
    dbf2:	e9 dd       	rcall	.-1070   	; 0xd7c6 <deselect>
    dbf4:	81 e0       	ldi	r24, 0x01	; 1
    dbf6:	90 e0       	ldi	r25, 0x00	; 0
    dbf8:	cd 2b       	or	r28, r29
    dbfa:	09 f4       	brne	.+2      	; 0xdbfe <mmc_disk_write+0xc0>
    dbfc:	80 e0       	ldi	r24, 0x00	; 0
    dbfe:	cd b7       	in	r28, 0x3d	; 61
    dc00:	de b7       	in	r29, 0x3e	; 62
    dc02:	e8 e0       	ldi	r30, 0x08	; 8
    dc04:	0c 94 3f e5 	jmp	0x1ca7e	; 0x1ca7e <__epilogue_restores__+0x14>

0000dc08 <mmc_disk_ioctl>:
    dc08:	a0 e1       	ldi	r26, 0x10	; 16
    dc0a:	b0 e0       	ldi	r27, 0x00	; 0
    dc0c:	ea e0       	ldi	r30, 0x0A	; 10
    dc0e:	fe e6       	ldi	r31, 0x6E	; 110
    dc10:	0c 94 23 e5 	jmp	0x1ca46	; 0x1ca46 <__prologue_saves__+0x14>
    dc14:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <Stat>
    dc18:	90 fd       	sbrc	r25, 0
    dc1a:	2b c2       	rjmp	.+1110   	; 0xe072 <mmc_disk_ioctl+0x46a>
    dc1c:	8b 01       	movw	r16, r22
    dc1e:	83 33       	cpi	r24, 0x33	; 51
    dc20:	09 f4       	brne	.+2      	; 0xdc24 <mmc_disk_ioctl+0x1c>
    dc22:	01 c1       	rjmp	.+514    	; 0xde26 <mmc_disk_ioctl+0x21e>
    dc24:	a0 f4       	brcc	.+40     	; 0xdc4e <mmc_disk_ioctl+0x46>
    dc26:	83 30       	cpi	r24, 0x03	; 3
    dc28:	09 f4       	brne	.+2      	; 0xdc2c <mmc_disk_ioctl+0x24>
    dc2a:	85 c0       	rjmp	.+266    	; 0xdd36 <mmc_disk_ioctl+0x12e>
    dc2c:	28 f4       	brcc	.+10     	; 0xdc38 <mmc_disk_ioctl+0x30>
    dc2e:	88 23       	and	r24, r24
    dc30:	11 f1       	breq	.+68     	; 0xdc76 <mmc_disk_ioctl+0x6e>
    dc32:	81 30       	cpi	r24, 0x01	; 1
    dc34:	11 f1       	breq	.+68     	; 0xdc7a <mmc_disk_ioctl+0x72>
    dc36:	1f c2       	rjmp	.+1086   	; 0xe076 <mmc_disk_ioctl+0x46e>
    dc38:	87 30       	cpi	r24, 0x07	; 7
    dc3a:	09 f4       	brne	.+2      	; 0xdc3e <mmc_disk_ioctl+0x36>
    dc3c:	2a c1       	rjmp	.+596    	; 0xde92 <mmc_disk_ioctl+0x28a>
    dc3e:	82 33       	cpi	r24, 0x32	; 50
    dc40:	09 f0       	breq	.+2      	; 0xdc44 <mmc_disk_ioctl+0x3c>
    dc42:	19 c2       	rjmp	.+1074   	; 0xe076 <mmc_disk_ioctl+0x46e>
    dc44:	80 91 c1 17 	lds	r24, 0x17C1	; 0x8017c1 <CardType>
    dc48:	fb 01       	movw	r30, r22
    dc4a:	80 83       	st	Z, r24
    dc4c:	28 c1       	rjmp	.+592    	; 0xde9e <mmc_disk_ioctl+0x296>
    dc4e:	86 33       	cpi	r24, 0x36	; 54
    dc50:	09 f4       	brne	.+2      	; 0xdc54 <mmc_disk_ioctl+0x4c>
    dc52:	0c c1       	rjmp	.+536    	; 0xde6c <mmc_disk_ioctl+0x264>
    dc54:	38 f4       	brcc	.+14     	; 0xdc64 <mmc_disk_ioctl+0x5c>
    dc56:	84 33       	cpi	r24, 0x34	; 52
    dc58:	09 f4       	brne	.+2      	; 0xdc5c <mmc_disk_ioctl+0x54>
    dc5a:	ea c0       	rjmp	.+468    	; 0xde30 <mmc_disk_ioctl+0x228>
    dc5c:	85 33       	cpi	r24, 0x35	; 53
    dc5e:	09 f4       	brne	.+2      	; 0xdc62 <mmc_disk_ioctl+0x5a>
    dc60:	f1 c0       	rjmp	.+482    	; 0xde44 <mmc_disk_ioctl+0x23c>
    dc62:	09 c2       	rjmp	.+1042   	; 0xe076 <mmc_disk_ioctl+0x46e>
    dc64:	88 33       	cpi	r24, 0x38	; 56
    dc66:	09 f4       	brne	.+2      	; 0xdc6a <mmc_disk_ioctl+0x62>
    dc68:	74 c1       	rjmp	.+744    	; 0xdf52 <mmc_disk_ioctl+0x34a>
    dc6a:	08 f4       	brcc	.+2      	; 0xdc6e <mmc_disk_ioctl+0x66>
    dc6c:	1a c1       	rjmp	.+564    	; 0xdea2 <mmc_disk_ioctl+0x29a>
    dc6e:	89 33       	cpi	r24, 0x39	; 57
    dc70:	09 f4       	brne	.+2      	; 0xdc74 <mmc_disk_ioctl+0x6c>
    dc72:	bc c1       	rjmp	.+888    	; 0xdfec <mmc_disk_ioctl+0x3e4>
    dc74:	00 c2       	rjmp	.+1024   	; 0xe076 <mmc_disk_ioctl+0x46e>
    dc76:	e6 dd       	rcall	.-1076   	; 0xd844 <select>
    dc78:	06 c1       	rjmp	.+524    	; 0xde86 <mmc_disk_ioctl+0x27e>
    dc7a:	40 e0       	ldi	r20, 0x00	; 0
    dc7c:	50 e0       	ldi	r21, 0x00	; 0
    dc7e:	ba 01       	movw	r22, r20
    dc80:	89 e0       	ldi	r24, 0x09	; 9
    dc82:	02 de       	rcall	.-1020   	; 0xd888 <send_cmd>
    dc84:	81 11       	cpse	r24, r1
    dc86:	f1 c1       	rjmp	.+994    	; 0xe06a <mmc_disk_ioctl+0x462>
    dc88:	60 e1       	ldi	r22, 0x10	; 16
    dc8a:	70 e0       	ldi	r23, 0x00	; 0
    dc8c:	ce 01       	movw	r24, r28
    dc8e:	01 96       	adiw	r24, 0x01	; 1
    dc90:	a0 dd       	rcall	.-1216   	; 0xd7d2 <rcvr_datablock>
    dc92:	89 2b       	or	r24, r25
    dc94:	09 f4       	brne	.+2      	; 0xdc98 <mmc_disk_ioctl+0x90>
    dc96:	e9 c1       	rjmp	.+978    	; 0xe06a <mmc_disk_ioctl+0x462>
    dc98:	99 81       	ldd	r25, Y+1	; 0x01
    dc9a:	92 95       	swap	r25
    dc9c:	96 95       	lsr	r25
    dc9e:	96 95       	lsr	r25
    dca0:	93 70       	andi	r25, 0x03	; 3
    dca2:	29 85       	ldd	r18, Y+9	; 0x09
    dca4:	4a 85       	ldd	r20, Y+10	; 0x0a
    dca6:	88 85       	ldd	r24, Y+8	; 0x08
    dca8:	91 30       	cpi	r25, 0x01	; 1
    dcaa:	d9 f4       	brne	.+54     	; 0xdce2 <mmc_disk_ioctl+0xda>
    dcac:	30 e0       	ldi	r19, 0x00	; 0
    dcae:	32 2f       	mov	r19, r18
    dcb0:	22 27       	eor	r18, r18
    dcb2:	24 0f       	add	r18, r20
    dcb4:	31 1d       	adc	r19, r1
    dcb6:	8f 73       	andi	r24, 0x3F	; 63
    dcb8:	90 e0       	ldi	r25, 0x00	; 0
    dcba:	a0 e0       	ldi	r26, 0x00	; 0
    dcbc:	b0 e0       	ldi	r27, 0x00	; 0
    dcbe:	dc 01       	movw	r26, r24
    dcc0:	99 27       	eor	r25, r25
    dcc2:	88 27       	eor	r24, r24
    dcc4:	01 96       	adiw	r24, 0x01	; 1
    dcc6:	a1 1d       	adc	r26, r1
    dcc8:	b1 1d       	adc	r27, r1
    dcca:	82 0f       	add	r24, r18
    dccc:	93 1f       	adc	r25, r19
    dcce:	a1 1d       	adc	r26, r1
    dcd0:	b1 1d       	adc	r27, r1
    dcd2:	fa e0       	ldi	r31, 0x0A	; 10
    dcd4:	88 0f       	add	r24, r24
    dcd6:	99 1f       	adc	r25, r25
    dcd8:	aa 1f       	adc	r26, r26
    dcda:	bb 1f       	adc	r27, r27
    dcdc:	fa 95       	dec	r31
    dcde:	d1 f7       	brne	.-12     	; 0xdcd4 <mmc_disk_ioctl+0xcc>
    dce0:	9b c0       	rjmp	.+310    	; 0xde18 <mmc_disk_ioctl+0x210>
    dce2:	22 95       	swap	r18
    dce4:	26 95       	lsr	r18
    dce6:	26 95       	lsr	r18
    dce8:	23 70       	andi	r18, 0x03	; 3
    dcea:	f4 e0       	ldi	r31, 0x04	; 4
    dcec:	8f 9f       	mul	r24, r31
    dcee:	c0 01       	movw	r24, r0
    dcf0:	11 24       	eor	r1, r1
    dcf2:	82 0f       	add	r24, r18
    dcf4:	91 1d       	adc	r25, r1
    dcf6:	01 96       	adiw	r24, 0x01	; 1
    dcf8:	2f 81       	ldd	r18, Y+7	; 0x07
    dcfa:	23 70       	andi	r18, 0x03	; 3
    dcfc:	30 e0       	ldi	r19, 0x00	; 0
    dcfe:	32 2f       	mov	r19, r18
    dd00:	22 27       	eor	r18, r18
    dd02:	33 0f       	add	r19, r19
    dd04:	33 0f       	add	r19, r19
    dd06:	82 0f       	add	r24, r18
    dd08:	93 1f       	adc	r25, r19
    dd0a:	a0 e0       	ldi	r26, 0x00	; 0
    dd0c:	b0 e0       	ldi	r27, 0x00	; 0
    dd0e:	2e 81       	ldd	r18, Y+6	; 0x06
    dd10:	32 2f       	mov	r19, r18
    dd12:	3f 70       	andi	r19, 0x0F	; 15
    dd14:	2b 85       	ldd	r18, Y+11	; 0x0b
    dd16:	22 1f       	adc	r18, r18
    dd18:	22 27       	eor	r18, r18
    dd1a:	22 1f       	adc	r18, r18
    dd1c:	23 0f       	add	r18, r19
    dd1e:	43 70       	andi	r20, 0x03	; 3
    dd20:	44 0f       	add	r20, r20
    dd22:	42 0f       	add	r20, r18
    dd24:	47 50       	subi	r20, 0x07	; 7
    dd26:	04 c0       	rjmp	.+8      	; 0xdd30 <mmc_disk_ioctl+0x128>
    dd28:	88 0f       	add	r24, r24
    dd2a:	99 1f       	adc	r25, r25
    dd2c:	aa 1f       	adc	r26, r26
    dd2e:	bb 1f       	adc	r27, r27
    dd30:	4a 95       	dec	r20
    dd32:	d2 f7       	brpl	.-12     	; 0xdd28 <mmc_disk_ioctl+0x120>
    dd34:	71 c0       	rjmp	.+226    	; 0xde18 <mmc_disk_ioctl+0x210>
    dd36:	80 91 c1 17 	lds	r24, 0x17C1	; 0x8017c1 <CardType>
    dd3a:	40 e0       	ldi	r20, 0x00	; 0
    dd3c:	50 e0       	ldi	r21, 0x00	; 0
    dd3e:	ba 01       	movw	r22, r20
    dd40:	82 ff       	sbrs	r24, 2
    dd42:	24 c0       	rjmp	.+72     	; 0xdd8c <mmc_disk_ioctl+0x184>
    dd44:	8d e8       	ldi	r24, 0x8D	; 141
    dd46:	a0 dd       	rcall	.-1216   	; 0xd888 <send_cmd>
    dd48:	81 11       	cpse	r24, r1
    dd4a:	8f c1       	rjmp	.+798    	; 0xe06a <mmc_disk_ioctl+0x462>
    dd4c:	8f ef       	ldi	r24, 0xFF	; 255
    dd4e:	39 dd       	rcall	.-1422   	; 0xd7c2 <xchg_spi>
    dd50:	60 e1       	ldi	r22, 0x10	; 16
    dd52:	70 e0       	ldi	r23, 0x00	; 0
    dd54:	ce 01       	movw	r24, r28
    dd56:	01 96       	adiw	r24, 0x01	; 1
    dd58:	3c dd       	rcall	.-1416   	; 0xd7d2 <rcvr_datablock>
    dd5a:	89 2b       	or	r24, r25
    dd5c:	09 f4       	brne	.+2      	; 0xdd60 <mmc_disk_ioctl+0x158>
    dd5e:	85 c1       	rjmp	.+778    	; 0xe06a <mmc_disk_ioctl+0x462>
    dd60:	50 e3       	ldi	r21, 0x30	; 48
    dd62:	f5 2e       	mov	r15, r21
    dd64:	8f ef       	ldi	r24, 0xFF	; 255
    dd66:	2d dd       	rcall	.-1446   	; 0xd7c2 <xchg_spi>
    dd68:	fa 94       	dec	r15
    dd6a:	f1 10       	cpse	r15, r1
    dd6c:	fb cf       	rjmp	.-10     	; 0xdd64 <mmc_disk_ioctl+0x15c>
    dd6e:	2b 85       	ldd	r18, Y+11	; 0x0b
    dd70:	22 95       	swap	r18
    dd72:	2f 70       	andi	r18, 0x0F	; 15
    dd74:	80 e1       	ldi	r24, 0x10	; 16
    dd76:	90 e0       	ldi	r25, 0x00	; 0
    dd78:	a0 e0       	ldi	r26, 0x00	; 0
    dd7a:	b0 e0       	ldi	r27, 0x00	; 0
    dd7c:	04 c0       	rjmp	.+8      	; 0xdd86 <mmc_disk_ioctl+0x17e>
    dd7e:	88 0f       	add	r24, r24
    dd80:	99 1f       	adc	r25, r25
    dd82:	aa 1f       	adc	r26, r26
    dd84:	bb 1f       	adc	r27, r27
    dd86:	2a 95       	dec	r18
    dd88:	d2 f7       	brpl	.-12     	; 0xdd7e <mmc_disk_ioctl+0x176>
    dd8a:	46 c0       	rjmp	.+140    	; 0xde18 <mmc_disk_ioctl+0x210>
    dd8c:	89 e0       	ldi	r24, 0x09	; 9
    dd8e:	7c dd       	rcall	.-1288   	; 0xd888 <send_cmd>
    dd90:	81 11       	cpse	r24, r1
    dd92:	6b c1       	rjmp	.+726    	; 0xe06a <mmc_disk_ioctl+0x462>
    dd94:	60 e1       	ldi	r22, 0x10	; 16
    dd96:	70 e0       	ldi	r23, 0x00	; 0
    dd98:	ce 01       	movw	r24, r28
    dd9a:	01 96       	adiw	r24, 0x01	; 1
    dd9c:	1a dd       	rcall	.-1484   	; 0xd7d2 <rcvr_datablock>
    dd9e:	89 2b       	or	r24, r25
    dda0:	09 f4       	brne	.+2      	; 0xdda4 <mmc_disk_ioctl+0x19c>
    dda2:	63 c1       	rjmp	.+710    	; 0xe06a <mmc_disk_ioctl+0x462>
    dda4:	90 91 c1 17 	lds	r25, 0x17C1	; 0x8017c1 <CardType>
    dda8:	2b 85       	ldd	r18, Y+11	; 0x0b
    ddaa:	8c 85       	ldd	r24, Y+12	; 0x0c
    ddac:	91 ff       	sbrs	r25, 1
    ddae:	16 c0       	rjmp	.+44     	; 0xdddc <mmc_disk_ioctl+0x1d4>
    ddb0:	2f 73       	andi	r18, 0x3F	; 63
    ddb2:	88 1f       	adc	r24, r24
    ddb4:	88 27       	eor	r24, r24
    ddb6:	88 1f       	adc	r24, r24
    ddb8:	90 e0       	ldi	r25, 0x00	; 0
    ddba:	01 96       	adiw	r24, 0x01	; 1
    ddbc:	82 0f       	add	r24, r18
    ddbe:	91 1d       	adc	r25, r1
    ddc0:	82 0f       	add	r24, r18
    ddc2:	91 1d       	adc	r25, r1
    ddc4:	2e 85       	ldd	r18, Y+14	; 0x0e
    ddc6:	22 95       	swap	r18
    ddc8:	26 95       	lsr	r18
    ddca:	26 95       	lsr	r18
    ddcc:	23 70       	andi	r18, 0x03	; 3
    ddce:	21 50       	subi	r18, 0x01	; 1
    ddd0:	02 c0       	rjmp	.+4      	; 0xddd6 <mmc_disk_ioctl+0x1ce>
    ddd2:	88 0f       	add	r24, r24
    ddd4:	99 1f       	adc	r25, r25
    ddd6:	2a 95       	dec	r18
    ddd8:	e2 f7       	brpl	.-8      	; 0xddd2 <mmc_disk_ioctl+0x1ca>
    ddda:	1c c0       	rjmp	.+56     	; 0xde14 <mmc_disk_ioctl+0x20c>
    dddc:	38 2f       	mov	r19, r24
    ddde:	33 70       	andi	r19, 0x03	; 3
    dde0:	82 95       	swap	r24
    dde2:	86 95       	lsr	r24
    dde4:	87 70       	andi	r24, 0x07	; 7
    dde6:	90 e0       	ldi	r25, 0x00	; 0
    dde8:	f8 e0       	ldi	r31, 0x08	; 8
    ddea:	3f 9f       	mul	r19, r31
    ddec:	80 0d       	add	r24, r0
    ddee:	91 1d       	adc	r25, r1
    ddf0:	11 24       	eor	r1, r1
    ddf2:	01 96       	adiw	r24, 0x01	; 1
    ddf4:	2c 77       	andi	r18, 0x7C	; 124
    ddf6:	30 e0       	ldi	r19, 0x00	; 0
    ddf8:	35 95       	asr	r19
    ddfa:	27 95       	ror	r18
    ddfc:	35 95       	asr	r19
    ddfe:	27 95       	ror	r18
    de00:	2f 5f       	subi	r18, 0xFF	; 255
    de02:	3f 4f       	sbci	r19, 0xFF	; 255
    de04:	82 9f       	mul	r24, r18
    de06:	a0 01       	movw	r20, r0
    de08:	83 9f       	mul	r24, r19
    de0a:	50 0d       	add	r21, r0
    de0c:	92 9f       	mul	r25, r18
    de0e:	50 0d       	add	r21, r0
    de10:	11 24       	eor	r1, r1
    de12:	ca 01       	movw	r24, r20
    de14:	a0 e0       	ldi	r26, 0x00	; 0
    de16:	b0 e0       	ldi	r27, 0x00	; 0
    de18:	f8 01       	movw	r30, r16
    de1a:	80 83       	st	Z, r24
    de1c:	91 83       	std	Z+1, r25	; 0x01
    de1e:	a2 83       	std	Z+2, r26	; 0x02
    de20:	b3 83       	std	Z+3, r27	; 0x03
    de22:	00 e0       	ldi	r16, 0x00	; 0
    de24:	23 c1       	rjmp	.+582    	; 0xe06c <mmc_disk_ioctl+0x464>
    de26:	40 e0       	ldi	r20, 0x00	; 0
    de28:	50 e0       	ldi	r21, 0x00	; 0
    de2a:	ba 01       	movw	r22, r20
    de2c:	89 e0       	ldi	r24, 0x09	; 9
    de2e:	04 c0       	rjmp	.+8      	; 0xde38 <mmc_disk_ioctl+0x230>
    de30:	40 e0       	ldi	r20, 0x00	; 0
    de32:	50 e0       	ldi	r21, 0x00	; 0
    de34:	ba 01       	movw	r22, r20
    de36:	8a e0       	ldi	r24, 0x0A	; 10
    de38:	27 dd       	rcall	.-1458   	; 0xd888 <send_cmd>
    de3a:	81 11       	cpse	r24, r1
    de3c:	16 c1       	rjmp	.+556    	; 0xe06a <mmc_disk_ioctl+0x462>
    de3e:	60 e1       	ldi	r22, 0x10	; 16
    de40:	70 e0       	ldi	r23, 0x00	; 0
    de42:	1f c0       	rjmp	.+62     	; 0xde82 <mmc_disk_ioctl+0x27a>
    de44:	40 e0       	ldi	r20, 0x00	; 0
    de46:	50 e0       	ldi	r21, 0x00	; 0
    de48:	ba 01       	movw	r22, r20
    de4a:	8a e3       	ldi	r24, 0x3A	; 58
    de4c:	1d dd       	rcall	.-1478   	; 0xd888 <send_cmd>
    de4e:	81 11       	cpse	r24, r1
    de50:	0c c1       	rjmp	.+536    	; 0xe06a <mmc_disk_ioctl+0x462>
    de52:	78 01       	movw	r14, r16
    de54:	f4 e0       	ldi	r31, 0x04	; 4
    de56:	ef 0e       	add	r14, r31
    de58:	f1 1c       	adc	r15, r1
    de5a:	8f ef       	ldi	r24, 0xFF	; 255
    de5c:	92 d1       	rcall	.+804    	; 0xe182 <mmc_spi_TXRX>
    de5e:	f8 01       	movw	r30, r16
    de60:	81 93       	st	Z+, r24
    de62:	8f 01       	movw	r16, r30
    de64:	ee 15       	cp	r30, r14
    de66:	ff 05       	cpc	r31, r15
    de68:	c1 f7       	brne	.-16     	; 0xde5a <mmc_disk_ioctl+0x252>
    de6a:	db cf       	rjmp	.-74     	; 0xde22 <mmc_disk_ioctl+0x21a>
    de6c:	40 e0       	ldi	r20, 0x00	; 0
    de6e:	50 e0       	ldi	r21, 0x00	; 0
    de70:	ba 01       	movw	r22, r20
    de72:	8d e8       	ldi	r24, 0x8D	; 141
    de74:	09 dd       	rcall	.-1518   	; 0xd888 <send_cmd>
    de76:	81 11       	cpse	r24, r1
    de78:	f8 c0       	rjmp	.+496    	; 0xe06a <mmc_disk_ioctl+0x462>
    de7a:	8f ef       	ldi	r24, 0xFF	; 255
    de7c:	a2 dc       	rcall	.-1724   	; 0xd7c2 <xchg_spi>
    de7e:	60 e4       	ldi	r22, 0x40	; 64
    de80:	70 e0       	ldi	r23, 0x00	; 0
    de82:	c8 01       	movw	r24, r16
    de84:	a6 dc       	rcall	.-1716   	; 0xd7d2 <rcvr_datablock>
    de86:	01 e0       	ldi	r16, 0x01	; 1
    de88:	10 e0       	ldi	r17, 0x00	; 0
    de8a:	89 2b       	or	r24, r25
    de8c:	09 f4       	brne	.+2      	; 0xde90 <mmc_disk_ioctl+0x288>
    de8e:	ef c0       	rjmp	.+478    	; 0xe06e <mmc_disk_ioctl+0x466>
    de90:	ea c0       	rjmp	.+468    	; 0xe066 <mmc_disk_ioctl+0x45e>
    de92:	42 d2       	rcall	.+1156   	; 0xe318 <mmc_power_off>
    de94:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Stat>
    de98:	81 60       	ori	r24, 0x01	; 1
    de9a:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <Stat>
    de9e:	00 e0       	ldi	r16, 0x00	; 0
    dea0:	eb c0       	rjmp	.+470    	; 0xe078 <mmc_disk_ioctl+0x470>
    dea2:	fb 01       	movw	r30, r22
    dea4:	43 81       	ldd	r20, Z+3	; 0x03
    dea6:	54 81       	ldd	r21, Z+4	; 0x04
    dea8:	65 81       	ldd	r22, Z+5	; 0x05
    deaa:	76 81       	ldd	r23, Z+6	; 0x06
    deac:	39 e0       	ldi	r19, 0x09	; 9
    deae:	44 0f       	add	r20, r20
    deb0:	55 1f       	adc	r21, r21
    deb2:	66 1f       	adc	r22, r22
    deb4:	77 1f       	adc	r23, r23
    deb6:	3a 95       	dec	r19
    deb8:	d1 f7       	brne	.-12     	; 0xdeae <mmc_disk_ioctl+0x2a6>
    deba:	70 68       	ori	r23, 0x80	; 128
    debc:	80 81       	ld	r24, Z
    debe:	90 e0       	ldi	r25, 0x00	; 0
    dec0:	a0 e0       	ldi	r26, 0x00	; 0
    dec2:	b0 e0       	ldi	r27, 0x00	; 0
    dec4:	2c e1       	ldi	r18, 0x1C	; 28
    dec6:	88 0f       	add	r24, r24
    dec8:	99 1f       	adc	r25, r25
    deca:	aa 1f       	adc	r26, r26
    decc:	bb 1f       	adc	r27, r27
    dece:	2a 95       	dec	r18
    ded0:	d1 f7       	brne	.-12     	; 0xdec6 <mmc_disk_ioctl+0x2be>
    ded2:	48 2b       	or	r20, r24
    ded4:	59 2b       	or	r21, r25
    ded6:	6a 2b       	or	r22, r26
    ded8:	7b 2b       	or	r23, r27
    deda:	81 81       	ldd	r24, Z+1	; 0x01
    dedc:	92 81       	ldd	r25, Z+2	; 0x02
    dede:	01 97       	sbiw	r24, 0x01	; 1
    dee0:	91 70       	andi	r25, 0x01	; 1
    dee2:	a0 e0       	ldi	r26, 0x00	; 0
    dee4:	b0 e0       	ldi	r27, 0x00	; 0
    dee6:	48 2b       	or	r20, r24
    dee8:	59 2b       	or	r21, r25
    deea:	6a 2b       	or	r22, r26
    deec:	7b 2b       	or	r23, r27
    deee:	80 e3       	ldi	r24, 0x30	; 48
    def0:	cb dc       	rcall	.-1642   	; 0xd888 <send_cmd>
    def2:	81 11       	cpse	r24, r1
    def4:	ba c0       	rjmp	.+372    	; 0xe06a <mmc_disk_ioctl+0x462>
    def6:	88 ee       	ldi	r24, 0xE8	; 232
    def8:	93 e0       	ldi	r25, 0x03	; 3
    defa:	46 d1       	rcall	.+652    	; 0xe188 <mmc_set_ms_timeout>
    defc:	8f ef       	ldi	r24, 0xFF	; 255
    defe:	41 d1       	rcall	.+642    	; 0xe182 <mmc_spi_TXRX>
    df00:	8f 3f       	cpi	r24, 0xFF	; 255
    df02:	21 f4       	brne	.+8      	; 0xdf0c <mmc_disk_ioctl+0x304>
    df04:	48 d1       	rcall	.+656    	; 0xe196 <mmc_test_timeout>
    df06:	89 2b       	or	r24, r25
    df08:	c9 f3       	breq	.-14     	; 0xdefc <mmc_disk_ioctl+0x2f4>
    df0a:	af c0       	rjmp	.+350    	; 0xe06a <mmc_disk_ioctl+0x462>
    df0c:	8e 3f       	cpi	r24, 0xFE	; 254
    df0e:	09 f0       	breq	.+2      	; 0xdf12 <mmc_disk_ioctl+0x30a>
    df10:	ac c0       	rjmp	.+344    	; 0xe06a <mmc_disk_ioctl+0x462>
    df12:	f8 01       	movw	r30, r16
    df14:	e7 80       	ldd	r14, Z+7	; 0x07
    df16:	f0 84       	ldd	r15, Z+8	; 0x08
    df18:	c1 80       	ldd	r12, Z+1	; 0x01
    df1a:	d2 80       	ldd	r13, Z+2	; 0x02
    df1c:	ce 0c       	add	r12, r14
    df1e:	df 1c       	adc	r13, r15
    df20:	ce 14       	cp	r12, r14
    df22:	df 04       	cpc	r13, r15
    df24:	31 f0       	breq	.+12     	; 0xdf32 <mmc_disk_ioctl+0x32a>
    df26:	8f ef       	ldi	r24, 0xFF	; 255
    df28:	2c d1       	rcall	.+600    	; 0xe182 <mmc_spi_TXRX>
    df2a:	f7 01       	movw	r30, r14
    df2c:	81 93       	st	Z+, r24
    df2e:	7f 01       	movw	r14, r30
    df30:	f7 cf       	rjmp	.-18     	; 0xdf20 <mmc_disk_ioctl+0x318>
    df32:	f8 01       	movw	r30, r16
    df34:	81 81       	ldd	r24, Z+1	; 0x01
    df36:	92 81       	ldd	r25, Z+2	; 0x02
    df38:	02 e0       	ldi	r16, 0x02	; 2
    df3a:	12 e0       	ldi	r17, 0x02	; 2
    df3c:	08 1b       	sub	r16, r24
    df3e:	19 0b       	sbc	r17, r25
    df40:	01 15       	cp	r16, r1
    df42:	11 05       	cpc	r17, r1
    df44:	09 f4       	brne	.+2      	; 0xdf48 <mmc_disk_ioctl+0x340>
    df46:	6d cf       	rjmp	.-294    	; 0xde22 <mmc_disk_ioctl+0x21a>
    df48:	8f ef       	ldi	r24, 0xFF	; 255
    df4a:	3b dc       	rcall	.-1930   	; 0xd7c2 <xchg_spi>
    df4c:	01 50       	subi	r16, 0x01	; 1
    df4e:	11 09       	sbc	r17, r1
    df50:	f7 cf       	rjmp	.-18     	; 0xdf40 <mmc_disk_ioctl+0x338>
    df52:	fb 01       	movw	r30, r22
    df54:	43 81       	ldd	r20, Z+3	; 0x03
    df56:	54 81       	ldd	r21, Z+4	; 0x04
    df58:	65 81       	ldd	r22, Z+5	; 0x05
    df5a:	76 81       	ldd	r23, Z+6	; 0x06
    df5c:	39 e0       	ldi	r19, 0x09	; 9
    df5e:	44 0f       	add	r20, r20
    df60:	55 1f       	adc	r21, r21
    df62:	66 1f       	adc	r22, r22
    df64:	77 1f       	adc	r23, r23
    df66:	3a 95       	dec	r19
    df68:	d1 f7       	brne	.-12     	; 0xdf5e <mmc_disk_ioctl+0x356>
    df6a:	70 68       	ori	r23, 0x80	; 128
    df6c:	80 81       	ld	r24, Z
    df6e:	90 e0       	ldi	r25, 0x00	; 0
    df70:	a0 e0       	ldi	r26, 0x00	; 0
    df72:	b0 e0       	ldi	r27, 0x00	; 0
    df74:	2c e1       	ldi	r18, 0x1C	; 28
    df76:	88 0f       	add	r24, r24
    df78:	99 1f       	adc	r25, r25
    df7a:	aa 1f       	adc	r26, r26
    df7c:	bb 1f       	adc	r27, r27
    df7e:	2a 95       	dec	r18
    df80:	d1 f7       	brne	.-12     	; 0xdf76 <mmc_disk_ioctl+0x36e>
    df82:	48 2b       	or	r20, r24
    df84:	59 2b       	or	r21, r25
    df86:	6a 2b       	or	r22, r26
    df88:	7b 2b       	or	r23, r27
    df8a:	81 81       	ldd	r24, Z+1	; 0x01
    df8c:	92 81       	ldd	r25, Z+2	; 0x02
    df8e:	01 97       	sbiw	r24, 0x01	; 1
    df90:	91 70       	andi	r25, 0x01	; 1
    df92:	a0 e0       	ldi	r26, 0x00	; 0
    df94:	b0 e0       	ldi	r27, 0x00	; 0
    df96:	48 2b       	or	r20, r24
    df98:	59 2b       	or	r21, r25
    df9a:	6a 2b       	or	r22, r26
    df9c:	7b 2b       	or	r23, r27
    df9e:	81 e3       	ldi	r24, 0x31	; 49
    dfa0:	73 dc       	rcall	.-1818   	; 0xd888 <send_cmd>
    dfa2:	81 11       	cpse	r24, r1
    dfa4:	62 c0       	rjmp	.+196    	; 0xe06a <mmc_disk_ioctl+0x462>
    dfa6:	8f ef       	ldi	r24, 0xFF	; 255
    dfa8:	0c dc       	rcall	.-2024   	; 0xd7c2 <xchg_spi>
    dfaa:	8e ef       	ldi	r24, 0xFE	; 254
    dfac:	0a dc       	rcall	.-2028   	; 0xd7c2 <xchg_spi>
    dfae:	f8 01       	movw	r30, r16
    dfb0:	e7 80       	ldd	r14, Z+7	; 0x07
    dfb2:	f0 84       	ldd	r15, Z+8	; 0x08
    dfb4:	c1 80       	ldd	r12, Z+1	; 0x01
    dfb6:	d2 80       	ldd	r13, Z+2	; 0x02
    dfb8:	ce 0c       	add	r12, r14
    dfba:	df 1c       	adc	r13, r15
    dfbc:	ec 14       	cp	r14, r12
    dfbe:	fd 04       	cpc	r15, r13
    dfc0:	29 f0       	breq	.+10     	; 0xdfcc <mmc_disk_ioctl+0x3c4>
    dfc2:	f7 01       	movw	r30, r14
    dfc4:	81 91       	ld	r24, Z+
    dfc6:	7f 01       	movw	r14, r30
    dfc8:	fc db       	rcall	.-2056   	; 0xd7c2 <xchg_spi>
    dfca:	f8 cf       	rjmp	.-16     	; 0xdfbc <mmc_disk_ioctl+0x3b4>
    dfcc:	f8 01       	movw	r30, r16
    dfce:	81 81       	ldd	r24, Z+1	; 0x01
    dfd0:	92 81       	ldd	r25, Z+2	; 0x02
    dfd2:	02 e0       	ldi	r16, 0x02	; 2
    dfd4:	12 e0       	ldi	r17, 0x02	; 2
    dfd6:	08 1b       	sub	r16, r24
    dfd8:	19 0b       	sbc	r17, r25
    dfda:	8f ef       	ldi	r24, 0xFF	; 255
    dfdc:	01 15       	cp	r16, r1
    dfde:	11 05       	cpc	r17, r1
    dfe0:	09 f4       	brne	.+2      	; 0xdfe4 <mmc_disk_ioctl+0x3dc>
    dfe2:	3b c0       	rjmp	.+118    	; 0xe05a <mmc_disk_ioctl+0x452>
    dfe4:	ee db       	rcall	.-2084   	; 0xd7c2 <xchg_spi>
    dfe6:	01 50       	subi	r16, 0x01	; 1
    dfe8:	11 09       	sbc	r17, r1
    dfea:	f7 cf       	rjmp	.-18     	; 0xdfda <mmc_disk_ioctl+0x3d2>
    dfec:	fb 01       	movw	r30, r22
    dfee:	43 81       	ldd	r20, Z+3	; 0x03
    dff0:	54 81       	ldd	r21, Z+4	; 0x04
    dff2:	65 81       	ldd	r22, Z+5	; 0x05
    dff4:	76 81       	ldd	r23, Z+6	; 0x06
    dff6:	89 e0       	ldi	r24, 0x09	; 9
    dff8:	44 0f       	add	r20, r20
    dffa:	55 1f       	adc	r21, r21
    dffc:	66 1f       	adc	r22, r22
    dffe:	77 1f       	adc	r23, r23
    e000:	8a 95       	dec	r24
    e002:	d1 f7       	brne	.-12     	; 0xdff8 <mmc_disk_ioctl+0x3f0>
    e004:	74 68       	ori	r23, 0x84	; 132
    e006:	80 81       	ld	r24, Z
    e008:	90 e0       	ldi	r25, 0x00	; 0
    e00a:	a0 e0       	ldi	r26, 0x00	; 0
    e00c:	b0 e0       	ldi	r27, 0x00	; 0
    e00e:	2c e1       	ldi	r18, 0x1C	; 28
    e010:	88 0f       	add	r24, r24
    e012:	99 1f       	adc	r25, r25
    e014:	aa 1f       	adc	r26, r26
    e016:	bb 1f       	adc	r27, r27
    e018:	2a 95       	dec	r18
    e01a:	d1 f7       	brne	.-12     	; 0xe010 <mmc_disk_ioctl+0x408>
    e01c:	48 2b       	or	r20, r24
    e01e:	59 2b       	or	r21, r25
    e020:	6a 2b       	or	r22, r26
    e022:	7b 2b       	or	r23, r27
    e024:	82 81       	ldd	r24, Z+2	; 0x02
    e026:	90 e0       	ldi	r25, 0x00	; 0
    e028:	a0 e0       	ldi	r26, 0x00	; 0
    e02a:	b0 e0       	ldi	r27, 0x00	; 0
    e02c:	48 2b       	or	r20, r24
    e02e:	59 2b       	or	r21, r25
    e030:	6a 2b       	or	r22, r26
    e032:	7b 2b       	or	r23, r27
    e034:	81 e3       	ldi	r24, 0x31	; 49
    e036:	28 dc       	rcall	.-1968   	; 0xd888 <send_cmd>
    e038:	81 11       	cpse	r24, r1
    e03a:	17 c0       	rjmp	.+46     	; 0xe06a <mmc_disk_ioctl+0x462>
    e03c:	8f ef       	ldi	r24, 0xFF	; 255
    e03e:	c1 db       	rcall	.-2174   	; 0xd7c2 <xchg_spi>
    e040:	8e ef       	ldi	r24, 0xFE	; 254
    e042:	bf db       	rcall	.-2178   	; 0xd7c2 <xchg_spi>
    e044:	f8 01       	movw	r30, r16
    e046:	81 81       	ldd	r24, Z+1	; 0x01
    e048:	bc db       	rcall	.-2184   	; 0xd7c2 <xchg_spi>
    e04a:	01 e0       	ldi	r16, 0x01	; 1
    e04c:	12 e0       	ldi	r17, 0x02	; 2
    e04e:	8f ef       	ldi	r24, 0xFF	; 255
    e050:	b8 db       	rcall	.-2192   	; 0xd7c2 <xchg_spi>
    e052:	01 50       	subi	r16, 0x01	; 1
    e054:	11 09       	sbc	r17, r1
    e056:	d9 f7       	brne	.-10     	; 0xe04e <mmc_disk_ioctl+0x446>
    e058:	8f ef       	ldi	r24, 0xFF	; 255
    e05a:	93 d0       	rcall	.+294    	; 0xe182 <mmc_spi_TXRX>
    e05c:	8f 71       	andi	r24, 0x1F	; 31
    e05e:	01 e0       	ldi	r16, 0x01	; 1
    e060:	10 e0       	ldi	r17, 0x00	; 0
    e062:	85 30       	cpi	r24, 0x05	; 5
    e064:	21 f4       	brne	.+8      	; 0xe06e <mmc_disk_ioctl+0x466>
    e066:	00 e0       	ldi	r16, 0x00	; 0
    e068:	02 c0       	rjmp	.+4      	; 0xe06e <mmc_disk_ioctl+0x466>
    e06a:	01 e0       	ldi	r16, 0x01	; 1
    e06c:	10 e0       	ldi	r17, 0x00	; 0
    e06e:	ab db       	rcall	.-2218   	; 0xd7c6 <deselect>
    e070:	04 c0       	rjmp	.+8      	; 0xe07a <mmc_disk_ioctl+0x472>
    e072:	03 e0       	ldi	r16, 0x03	; 3
    e074:	01 c0       	rjmp	.+2      	; 0xe078 <mmc_disk_ioctl+0x470>
    e076:	04 e0       	ldi	r16, 0x04	; 4
    e078:	10 e0       	ldi	r17, 0x00	; 0
    e07a:	c8 01       	movw	r24, r16
    e07c:	60 96       	adiw	r28, 0x10	; 16
    e07e:	e8 e0       	ldi	r30, 0x08	; 8
    e080:	0c 94 3f e5 	jmp	0x1ca7e	; 0x1ca7e <__epilogue_restores__+0x14>

0000e084 <mmc_disk_timerproc>:
    e084:	80 91 c3 17 	lds	r24, 0x17C3	; 0x8017c3 <Timer1>
    e088:	88 23       	and	r24, r24
    e08a:	19 f0       	breq	.+6      	; 0xe092 <mmc_disk_timerproc+0xe>
    e08c:	81 50       	subi	r24, 0x01	; 1
    e08e:	80 93 c3 17 	sts	0x17C3, r24	; 0x8017c3 <Timer1>
    e092:	80 91 c2 17 	lds	r24, 0x17C2	; 0x8017c2 <Timer2>
    e096:	88 23       	and	r24, r24
    e098:	19 f0       	breq	.+6      	; 0xe0a0 <mmc_disk_timerproc+0x1c>
    e09a:	81 50       	subi	r24, 0x01	; 1
    e09c:	80 93 c2 17 	sts	0x17C2, r24	; 0x8017c2 <Timer2>
    e0a0:	08 95       	ret

0000e0a2 <mmc_task>:
void mmc_ms_wait(int ms)
{
    mmc_set_ms_timeout(ms);
    while(!mmc_test_timeout())
        ;
}
    e0a2:	80 91 cc 17 	lds	r24, 0x17CC	; 0x8017cc <_mmc_timeout>
    e0a6:	90 91 cd 17 	lds	r25, 0x17CD	; 0x8017cd <_mmc_timeout+0x1>
    e0aa:	00 97       	sbiw	r24, 0x00	; 0
    e0ac:	29 f0       	breq	.+10     	; 0xe0b8 <mmc_task+0x16>
    e0ae:	01 97       	sbiw	r24, 0x01	; 1
    e0b0:	90 93 cd 17 	sts	0x17CD, r25	; 0x8017cd <_mmc_timeout+0x1>
    e0b4:	80 93 cc 17 	sts	0x17CC, r24	; 0x8017cc <_mmc_timeout>
    e0b8:	80 91 c6 17 	lds	r24, 0x17C6	; 0x8017c6 <_mmc_pre>
    e0bc:	90 91 c7 17 	lds	r25, 0x17C7	; 0x8017c7 <_mmc_pre+0x1>
    e0c0:	8a 30       	cpi	r24, 0x0A	; 10
    e0c2:	91 05       	cpc	r25, r1
    e0c4:	30 f4       	brcc	.+12     	; 0xe0d2 <mmc_task+0x30>
    e0c6:	01 96       	adiw	r24, 0x01	; 1
    e0c8:	90 93 c7 17 	sts	0x17C7, r25	; 0x8017c7 <_mmc_pre+0x1>
    e0cc:	80 93 c6 17 	sts	0x17C6, r24	; 0x8017c6 <_mmc_pre>
    e0d0:	08 95       	ret
    e0d2:	10 92 c7 17 	sts	0x17C7, r1	; 0x8017c7 <_mmc_pre+0x1>
    e0d6:	10 92 c6 17 	sts	0x17C6, r1	; 0x8017c6 <_mmc_pre>
    e0da:	d4 cf       	rjmp	.-88     	; 0xe084 <mmc_disk_timerproc>
    e0dc:	08 95       	ret

0000e0de <mmc_install_timer>:
    e0de:	00 d0       	rcall	.+0      	; 0xe0e0 <mmc_install_timer+0x2>
    e0e0:	1f 92       	push	r1
    e0e2:	10 92 cd 17 	sts	0x17CD, r1	; 0x8017cd <_mmc_timeout+0x1>
    e0e6:	10 92 cc 17 	sts	0x17CC, r1	; 0x8017cc <_mmc_timeout>
    e0ea:	61 e0       	ldi	r22, 0x01	; 1
    e0ec:	70 e0       	ldi	r23, 0x00	; 0
    e0ee:	81 e5       	ldi	r24, 0x51	; 81
    e0f0:	90 e7       	ldi	r25, 0x70	; 112
    e0f2:	0e 94 52 36 	call	0x6ca4	; 0x6ca4 <set_timers>
    e0f6:	01 96       	adiw	r24, 0x01	; 1
    e0f8:	51 f4       	brne	.+20     	; 0xe10e <mmc_install_timer+0x30>
    e0fa:	8b eb       	ldi	r24, 0xBB	; 187
    e0fc:	97 e0       	ldi	r25, 0x07	; 7
    e0fe:	a0 e0       	ldi	r26, 0x00	; 0
    e100:	ed b7       	in	r30, 0x3d	; 61
    e102:	fe b7       	in	r31, 0x3e	; 62
    e104:	81 83       	std	Z+1, r24	; 0x01
    e106:	92 83       	std	Z+2, r25	; 0x02
    e108:	a3 83       	std	Z+3, r26	; 0x03
    e10a:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    e10e:	0f 90       	pop	r0
    e110:	0f 90       	pop	r0
    e112:	0f 90       	pop	r0
    e114:	08 95       	ret

0000e116 <mmc_spi_begin>:
    e116:	60 91 c8 17 	lds	r22, 0x17C8	; 0x8017c8 <_mmc_clock>
    e11a:	70 91 c9 17 	lds	r23, 0x17C9	; 0x8017c9 <_mmc_clock+0x1>
    e11e:	80 91 ca 17 	lds	r24, 0x17CA	; 0x8017ca <_mmc_clock+0x2>
    e122:	90 91 cb 17 	lds	r25, 0x17CB	; 0x8017cb <_mmc_clock+0x3>
    e126:	4b e0       	ldi	r20, 0x0B	; 11
    e128:	50 e0       	ldi	r21, 0x00	; 0
    e12a:	0c 94 f8 28 	jmp	0x51f0	; 0x51f0 <spi_begin>
    e12e:	08 95       	ret

0000e130 <mmc_spi_end>:
    e130:	8b e0       	ldi	r24, 0x0B	; 11
    e132:	0c 94 94 28 	jmp	0x5128	; 0x5128 <spi_end>
    e136:	08 95       	ret

0000e138 <mmc_slow>:
    e138:	80 e2       	ldi	r24, 0x20	; 32
    e13a:	91 ea       	ldi	r25, 0xA1	; 161
    e13c:	a7 e0       	ldi	r26, 0x07	; 7
    e13e:	b0 e0       	ldi	r27, 0x00	; 0
    e140:	80 93 c8 17 	sts	0x17C8, r24	; 0x8017c8 <_mmc_clock>
    e144:	90 93 c9 17 	sts	0x17C9, r25	; 0x8017c9 <_mmc_clock+0x1>
    e148:	a0 93 ca 17 	sts	0x17CA, r26	; 0x8017ca <_mmc_clock+0x2>
    e14c:	b0 93 cb 17 	sts	0x17CB, r27	; 0x8017cb <_mmc_clock+0x3>
    e150:	08 95       	ret

0000e152 <mmc_spi_init>:
    e152:	8b e0       	ldi	r24, 0x0B	; 11
    e154:	0e 94 92 28 	call	0x5124	; 0x5124 <chip_select_init>
    e158:	ef cf       	rjmp	.-34     	; 0xe138 <mmc_slow>
    e15a:	08 95       	ret

0000e15c <mmc_fast>:
    e15c:	80 ea       	ldi	r24, 0xA0	; 160
    e15e:	95 e2       	ldi	r25, 0x25	; 37
    e160:	a6 e2       	ldi	r26, 0x26	; 38
    e162:	b0 e0       	ldi	r27, 0x00	; 0
    e164:	80 93 c8 17 	sts	0x17C8, r24	; 0x8017c8 <_mmc_clock>
    e168:	90 93 c9 17 	sts	0x17C9, r25	; 0x8017c9 <_mmc_clock+0x1>
    e16c:	a0 93 ca 17 	sts	0x17CA, r26	; 0x8017ca <_mmc_clock+0x2>
    e170:	b0 93 cb 17 	sts	0x17CB, r27	; 0x8017cb <_mmc_clock+0x3>
    e174:	08 95       	ret

0000e176 <mmc_spi_TX_buffer>:
    e176:	0c 94 c4 28 	jmp	0x5188	; 0x5188 <spi_TX_buffer>
    e17a:	08 95       	ret

0000e17c <mmc_spi_RX_buffer>:
    e17c:	0c 94 c6 28 	jmp	0x518c	; 0x518c <spi_RX_buffer>
    e180:	08 95       	ret

0000e182 <mmc_spi_TXRX>:
    e182:	0c 94 40 29 	jmp	0x5280	; 0x5280 <spi_TXRX>
    e186:	08 95       	ret

0000e188 <mmc_set_ms_timeout>:
    e188:	f8 94       	cli
    e18a:	90 93 cd 17 	sts	0x17CD, r25	; 0x8017cd <_mmc_timeout+0x1>
    e18e:	80 93 cc 17 	sts	0x17CC, r24	; 0x8017cc <_mmc_timeout>
    e192:	78 94       	sei
    e194:	08 95       	ret

0000e196 <mmc_test_timeout>:
    e196:	00 d0       	rcall	.+0      	; 0xe198 <mmc_test_timeout+0x2>
    e198:	1f 92       	push	r1
    e19a:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Stat>
    e19e:	81 fd       	sbrc	r24, 1
    e1a0:	15 c0       	rjmp	.+42     	; 0xe1cc <mmc_test_timeout+0x36>
    e1a2:	80 91 cc 17 	lds	r24, 0x17CC	; 0x8017cc <_mmc_timeout>
    e1a6:	90 91 cd 17 	lds	r25, 0x17CD	; 0x8017cd <_mmc_timeout+0x1>
    e1aa:	89 2b       	or	r24, r25
    e1ac:	91 f4       	brne	.+36     	; 0xe1d2 <mmc_test_timeout+0x3c>
    e1ae:	8e ea       	ldi	r24, 0xAE	; 174
    e1b0:	97 e0       	ldi	r25, 0x07	; 7
    e1b2:	a0 e0       	ldi	r26, 0x00	; 0
    e1b4:	ed b7       	in	r30, 0x3d	; 61
    e1b6:	fe b7       	in	r31, 0x3e	; 62
    e1b8:	81 83       	std	Z+1, r24	; 0x01
    e1ba:	92 83       	std	Z+2, r25	; 0x02
    e1bc:	a3 83       	std	Z+3, r26	; 0x03
    e1be:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    e1c2:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Stat>
    e1c6:	83 60       	ori	r24, 0x03	; 3
    e1c8:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <Stat>
    e1cc:	81 e0       	ldi	r24, 0x01	; 1
    e1ce:	90 e0       	ldi	r25, 0x00	; 0
    e1d0:	02 c0       	rjmp	.+4      	; 0xe1d6 <mmc_test_timeout+0x40>
    e1d2:	80 e0       	ldi	r24, 0x00	; 0
    e1d4:	90 e0       	ldi	r25, 0x00	; 0
    e1d6:	0f 90       	pop	r0
    e1d8:	0f 90       	pop	r0
    e1da:	0f 90       	pop	r0
    e1dc:	08 95       	ret

0000e1de <mmc_init>:
///
/// @param[in] verbose: display initialisation messages
/// @return
MEMSPACE
int mmc_init(int verbose)
{
    e1de:	ab e0       	ldi	r26, 0x0B	; 11
    e1e0:	b0 e0       	ldi	r27, 0x00	; 0
    e1e2:	e5 ef       	ldi	r30, 0xF5	; 245
    e1e4:	f0 e7       	ldi	r31, 0x70	; 112
    e1e6:	0c 94 25 e5 	jmp	0x1ca4a	; 0x1ca4a <__prologue_saves__+0x18>
    e1ea:	7c 01       	movw	r14, r24
    int rc;

    Stat = 0;
    e1ec:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <Stat>

    mmc_spi_init();

    if( verbose)
    e1f0:	b0 df       	rcall	.-160    	; 0xe152 <mmc_spi_init>
    e1f2:	e1 14       	cp	r14, r1
    e1f4:	f1 04       	cpc	r15, r1
    {
        printf("START MMC INIT\n");
    e1f6:	51 f0       	breq	.+20     	; 0xe20c <mmc_init+0x2e>
    e1f8:	8e e9       	ldi	r24, 0x9E	; 158
    e1fa:	97 e0       	ldi	r25, 0x07	; 7
    e1fc:	a0 e0       	ldi	r26, 0x00	; 0
    e1fe:	ed b7       	in	r30, 0x3d	; 61
    e200:	fe b7       	in	r31, 0x3e	; 62
    e202:	81 83       	std	Z+1, r24	; 0x01
    e204:	92 83       	std	Z+2, r25	; 0x02
    e206:	a3 83       	std	Z+3, r26	; 0x03
    e208:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    }
    // we only install timers once!
    if(!mmc_init_flag)
    e20c:	80 91 c4 17 	lds	r24, 0x17C4	; 0x8017c4 <mmc_init_flag>
    e210:	90 91 c5 17 	lds	r25, 0x17C5	; 0x8017c5 <mmc_init_flag+0x1>
        mmc_install_timer();
    e214:	89 2b       	or	r24, r25
    e216:	09 f4       	brne	.+2      	; 0xe21a <mmc_init+0x3c>

    if( verbose)
    e218:	62 df       	rcall	.-316    	; 0xe0de <mmc_install_timer>
    e21a:	e1 14       	cp	r14, r1
    e21c:	f1 04       	cpc	r15, r1
    {
#if defined (FF_USE_LFN)
        printf("LFN Enabled");
    e21e:	c1 f0       	breq	.+48     	; 0xe250 <mmc_init+0x72>
    e220:	82 e9       	ldi	r24, 0x92	; 146
    e222:	97 e0       	ldi	r25, 0x07	; 7
    e224:	a0 e0       	ldi	r26, 0x00	; 0
    e226:	ed b7       	in	r30, 0x3d	; 61
    e228:	fe b7       	in	r31, 0x3e	; 62
    e22a:	81 83       	std	Z+1, r24	; 0x01
    e22c:	92 83       	std	Z+2, r25	; 0x02
    e22e:	a3 83       	std	Z+3, r26	; 0x03
    e230:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
#else
        printf("LFN Disabled");
#endif
        printf(", Code page: %u\n", FF_CODE_PAGE);
    e234:	85 eb       	ldi	r24, 0xB5	; 181
    e236:	91 e0       	ldi	r25, 0x01	; 1
    e238:	ed b7       	in	r30, 0x3d	; 61
    e23a:	fe b7       	in	r31, 0x3e	; 62
    e23c:	95 83       	std	Z+5, r25	; 0x05
    e23e:	84 83       	std	Z+4, r24	; 0x04
    e240:	81 e8       	ldi	r24, 0x81	; 129
    e242:	97 e0       	ldi	r25, 0x07	; 7
    e244:	a0 e0       	ldi	r26, 0x00	; 0
    e246:	81 83       	std	Z+1, r24	; 0x01
    e248:	92 83       	std	Z+2, r25	; 0x02
    e24a:	a3 83       	std	Z+3, r26	; 0x03
    }

    rc = disk_initialize(DEV_MMC);    // aliased to mmc_disk_initialize()
    e24c:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    e250:	80 e0       	ldi	r24, 0x00	; 0
    e252:	87 da       	rcall	.-2802   	; 0xd762 <disk_initialize>
    e254:	08 2f       	mov	r16, r24

    if( rc != RES_OK  )
    e256:	10 e0       	ldi	r17, 0x00	; 0
    e258:	01 15       	cp	r16, r1
        put_rc(rc);
    e25a:	11 05       	cpc	r17, r1
    e25c:	19 f0       	breq	.+6      	; 0xe264 <mmc_init+0x86>
    e25e:	c8 01       	movw	r24, r16
    e260:	e1 d0       	rcall	.+450    	; 0xe424 <put_rc>

    if( rc == RES_OK)
        rc = f_mount(&Fatfs[0],"/", 0);
    e262:	0e c0       	rjmp	.+28     	; 0xe280 <mmc_init+0xa2>
    e264:	40 e0       	ldi	r20, 0x00	; 0
    e266:	64 ec       	ldi	r22, 0xC4	; 196
    e268:	77 e0       	ldi	r23, 0x07	; 7
    e26a:	88 e1       	ldi	r24, 0x18	; 24
    e26c:	9a e1       	ldi	r25, 0x1A	; 26
    e26e:	0e 94 69 5b 	call	0xb6d2	; 0xb6d2 <f_mount>

    if( rc != RES_OK || verbose)
    e272:	8c 01       	movw	r16, r24
    e274:	89 2b       	or	r24, r25
    e276:	21 f4       	brne	.+8      	; 0xe280 <mmc_init+0xa2>
    e278:	e1 14       	cp	r14, r1
    e27a:	f1 04       	cpc	r15, r1
        put_rc( rc );
    e27c:	09 f4       	brne	.+2      	; 0xe280 <mmc_init+0xa2>
    e27e:	40 c0       	rjmp	.+128    	; 0xe300 <mmc_init+0x122>
    e280:	c8 01       	movw	r24, r16

    if (verbose )
    e282:	d0 d0       	rcall	.+416    	; 0xe424 <put_rc>
    e284:	e1 14       	cp	r14, r1
    e286:	f1 04       	cpc	r15, r1
    {
        DWORD blksize = 0;
    e288:	d9 f1       	breq	.+118    	; 0xe300 <mmc_init+0x122>
    e28a:	18 86       	std	Y+8, r1	; 0x08
    e28c:	19 86       	std	Y+9, r1	; 0x09
    e28e:	1a 86       	std	Y+10, r1	; 0x0a
        if(rc == RES_OK)
    e290:	1b 86       	std	Y+11, r1	; 0x0b
    e292:	01 15       	cp	r16, r1
        {
            rc = disk_ioctl ( DEV_MMC, GET_BLOCK_SIZE, (void *) &blksize);
    e294:	11 05       	cpc	r17, r1
    e296:	51 f5       	brne	.+84     	; 0xe2ec <mmc_init+0x10e>
    e298:	ae 01       	movw	r20, r28
    e29a:	48 5f       	subi	r20, 0xF8	; 248
    e29c:	5f 4f       	sbci	r21, 0xFF	; 255
    e29e:	63 e0       	ldi	r22, 0x03	; 3
            if( rc != RES_OK)
    e2a0:	80 e0       	ldi	r24, 0x00	; 0
    e2a2:	85 da       	rcall	.-2806   	; 0xd7ae <disk_ioctl>
            {
                put_rc( rc );
    e2a4:	8c 01       	movw	r16, r24
    e2a6:	00 97       	sbiw	r24, 0x00	; 0
                printf("MMC Block Size - read failed\n");
    e2a8:	61 f0       	breq	.+24     	; 0xe2c2 <mmc_init+0xe4>
    e2aa:	bc d0       	rcall	.+376    	; 0xe424 <put_rc>
    e2ac:	83 e6       	ldi	r24, 0x63	; 99
    e2ae:	97 e0       	ldi	r25, 0x07	; 7
    e2b0:	a0 e0       	ldi	r26, 0x00	; 0
    e2b2:	ed b7       	in	r30, 0x3d	; 61
    e2b4:	fe b7       	in	r31, 0x3e	; 62
    e2b6:	81 83       	std	Z+1, r24	; 0x01
    e2b8:	92 83       	std	Z+2, r25	; 0x02
    e2ba:	a3 83       	std	Z+3, r26	; 0x03
    e2bc:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
            }
            else
            {
                printf("MMC Block Size: %ld\n", blksize);
    e2c0:	15 c0       	rjmp	.+42     	; 0xe2ec <mmc_init+0x10e>
    e2c2:	88 85       	ldd	r24, Y+8	; 0x08
    e2c4:	99 85       	ldd	r25, Y+9	; 0x09
    e2c6:	aa 85       	ldd	r26, Y+10	; 0x0a
    e2c8:	bb 85       	ldd	r27, Y+11	; 0x0b
    e2ca:	ed b7       	in	r30, 0x3d	; 61
    e2cc:	fe b7       	in	r31, 0x3e	; 62
    e2ce:	84 83       	std	Z+4, r24	; 0x04
    e2d0:	95 83       	std	Z+5, r25	; 0x05
    e2d2:	a6 83       	std	Z+6, r26	; 0x06
    e2d4:	b7 83       	std	Z+7, r27	; 0x07
    e2d6:	8e e4       	ldi	r24, 0x4E	; 78
    e2d8:	97 e0       	ldi	r25, 0x07	; 7
    e2da:	a0 e0       	ldi	r26, 0x00	; 0
    e2dc:	81 83       	std	Z+1, r24	; 0x01
    e2de:	92 83       	std	Z+2, r25	; 0x02
            }
            if( rc == RES_OK)
            {
                fatfs_status("/");
    e2e0:	a3 83       	std	Z+3, r26	; 0x03
    e2e2:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    e2e6:	84 ec       	ldi	r24, 0xC4	; 196
            }
        }
        printf("END MMC INIT\n");
    e2e8:	97 e0       	ldi	r25, 0x07	; 7
    e2ea:	30 d1       	rcall	.+608    	; 0xe54c <fatfs_status>
    e2ec:	80 e4       	ldi	r24, 0x40	; 64
    e2ee:	97 e0       	ldi	r25, 0x07	; 7
    e2f0:	a0 e0       	ldi	r26, 0x00	; 0
    e2f2:	ed b7       	in	r30, 0x3d	; 61
    e2f4:	fe b7       	in	r31, 0x3e	; 62
    e2f6:	81 83       	std	Z+1, r24	; 0x01
    e2f8:	92 83       	std	Z+2, r25	; 0x02
    e2fa:	a3 83       	std	Z+3, r26	; 0x03
    }
    mmc_init_flag = 1;
    e2fc:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    e300:	81 e0       	ldi	r24, 0x01	; 1
    e302:	90 e0       	ldi	r25, 0x00	; 0
    e304:	90 93 c5 17 	sts	0x17C5, r25	; 0x8017c5 <mmc_init_flag+0x1>

    return( rc ) ;
}
    e308:	80 93 c4 17 	sts	0x17C4, r24	; 0x8017c4 <mmc_init_flag>
    e30c:	c8 01       	movw	r24, r16
    e30e:	2b 96       	adiw	r28, 0x0b	; 11
    e310:	e6 e0       	ldi	r30, 0x06	; 6
    e312:	0c 94 41 e5 	jmp	0x1ca82	; 0x1ca82 <__epilogue_restores__+0x18>

0000e316 <mmc_power_on>:
    e316:	08 95       	ret

0000e318 <mmc_power_off>:
/// @brief  MMC Power OFF
///
/// @return void
MEMSPACE
void mmc_power_off()
{
    e318:	08 95       	ret

0000e31a <mmc_ins_status>:

MEMSPACE
int mmc_ins_status()
{
    return (1);
}
    e31a:	81 e0       	ldi	r24, 0x01	; 1
    e31c:	90 e0       	ldi	r25, 0x00	; 0
    e31e:	08 95       	ret

0000e320 <mmc_wp_status>:

MEMSPACE
int mmc_wp_status()
{
    return (0);
}
    e320:	80 e0       	ldi	r24, 0x00	; 0
    e322:	90 e0       	ldi	r25, 0x00	; 0
    e324:	08 95       	ret

0000e326 <tm_to_fat>:
/// @param[in] t: POSIX struct tm * to convert.
///
/// @return  FAT32 time.
MEMSPACE
uint32_t tm_to_fat(tm_t *t)
{
    e326:	0f 93       	push	r16
    e328:	1f 93       	push	r17
    e32a:	fc 01       	movw	r30, r24
        | (((uint32_t)t->tm_mon+1) << 21)
        | (((uint32_t)t->tm_mday) << 16)
        | ((uint32_t)t->tm_hour << 11)
        | ((uint32_t)t->tm_min << 5)
        | ((uint32_t)t->tm_sec >> 1);
    return(fat);
    e32c:	46 81       	ldd	r20, Z+6	; 0x06
    e32e:	57 81       	ldd	r21, Z+7	; 0x07
    e330:	05 2e       	mov	r0, r21
    e332:	00 0c       	add	r0, r0
    e334:	66 0b       	sbc	r22, r22
    e336:	77 0b       	sbc	r23, r23
    e338:	ba 01       	movw	r22, r20
    e33a:	55 27       	eor	r21, r21
    e33c:	44 27       	eor	r20, r20
    e33e:	84 81       	ldd	r24, Z+4	; 0x04
    e340:	95 81       	ldd	r25, Z+5	; 0x05
    e342:	09 2e       	mov	r0, r25
    e344:	00 0c       	add	r0, r0
    e346:	aa 0b       	sbc	r26, r26
    e348:	bb 0b       	sbc	r27, r27
    e34a:	2b e0       	ldi	r18, 0x0B	; 11
    e34c:	88 0f       	add	r24, r24
    e34e:	99 1f       	adc	r25, r25
    e350:	aa 1f       	adc	r26, r26
    e352:	bb 1f       	adc	r27, r27
    e354:	2a 95       	dec	r18
    e356:	d1 f7       	brne	.-12     	; 0xe34c <tm_to_fat+0x26>
    e358:	48 2b       	or	r20, r24
    e35a:	59 2b       	or	r21, r25
    e35c:	6a 2b       	or	r22, r26
    e35e:	7b 2b       	or	r23, r27
    e360:	82 81       	ldd	r24, Z+2	; 0x02
    e362:	93 81       	ldd	r25, Z+3	; 0x03
    e364:	09 2e       	mov	r0, r25
    e366:	00 0c       	add	r0, r0
    e368:	aa 0b       	sbc	r26, r26
    e36a:	bb 0b       	sbc	r27, r27
    e36c:	35 e0       	ldi	r19, 0x05	; 5
    e36e:	88 0f       	add	r24, r24
    e370:	99 1f       	adc	r25, r25
    e372:	aa 1f       	adc	r26, r26
    e374:	bb 1f       	adc	r27, r27
    e376:	3a 95       	dec	r19
    e378:	d1 f7       	brne	.-12     	; 0xe36e <tm_to_fat+0x48>
    e37a:	48 2b       	or	r20, r24
    e37c:	59 2b       	or	r21, r25
    e37e:	6a 2b       	or	r22, r26
    e380:	7b 2b       	or	r23, r27
    e382:	80 81       	ld	r24, Z
    e384:	91 81       	ldd	r25, Z+1	; 0x01
    e386:	09 2e       	mov	r0, r25
    e388:	00 0c       	add	r0, r0
    e38a:	aa 0b       	sbc	r26, r26
    e38c:	bb 0b       	sbc	r27, r27
    e38e:	b6 95       	lsr	r27
    e390:	a7 95       	ror	r26
    e392:	97 95       	ror	r25
    e394:	87 95       	ror	r24
    e396:	84 2b       	or	r24, r20
    e398:	95 2b       	or	r25, r21
    e39a:	a6 2b       	or	r26, r22
    e39c:	b7 2b       	or	r27, r23
    e39e:	02 85       	ldd	r16, Z+10	; 0x0a
    e3a0:	13 85       	ldd	r17, Z+11	; 0x0b
    e3a2:	00 55       	subi	r16, 0x50	; 80
    e3a4:	11 09       	sbc	r17, r1
    e3a6:	01 2e       	mov	r0, r17
    e3a8:	00 0c       	add	r0, r0
    e3aa:	22 0b       	sbc	r18, r18
    e3ac:	33 0b       	sbc	r19, r19
    e3ae:	49 e1       	ldi	r20, 0x19	; 25
    e3b0:	00 0f       	add	r16, r16
    e3b2:	11 1f       	adc	r17, r17
    e3b4:	22 1f       	adc	r18, r18
    e3b6:	33 1f       	adc	r19, r19
    e3b8:	4a 95       	dec	r20
    e3ba:	d1 f7       	brne	.-12     	; 0xe3b0 <tm_to_fat+0x8a>
    e3bc:	ac 01       	movw	r20, r24
    e3be:	bd 01       	movw	r22, r26
    e3c0:	40 2b       	or	r20, r16
    e3c2:	51 2b       	or	r21, r17
    e3c4:	62 2b       	or	r22, r18
    e3c6:	73 2b       	or	r23, r19
    e3c8:	80 85       	ldd	r24, Z+8	; 0x08
    e3ca:	91 85       	ldd	r25, Z+9	; 0x09
    e3cc:	09 2e       	mov	r0, r25
    e3ce:	00 0c       	add	r0, r0
    e3d0:	aa 0b       	sbc	r26, r26
    e3d2:	bb 0b       	sbc	r27, r27
    e3d4:	01 96       	adiw	r24, 0x01	; 1
    e3d6:	a1 1d       	adc	r26, r1
    e3d8:	b1 1d       	adc	r27, r1
    e3da:	e5 e1       	ldi	r30, 0x15	; 21
    e3dc:	88 0f       	add	r24, r24
    e3de:	99 1f       	adc	r25, r25
    e3e0:	aa 1f       	adc	r26, r26
    e3e2:	bb 1f       	adc	r27, r27
    e3e4:	ea 95       	dec	r30
    e3e6:	d1 f7       	brne	.-12     	; 0xe3dc <tm_to_fat+0xb6>
    e3e8:	8a 01       	movw	r16, r20
    e3ea:	9b 01       	movw	r18, r22
    e3ec:	08 2b       	or	r16, r24
    e3ee:	19 2b       	or	r17, r25
    e3f0:	2a 2b       	or	r18, r26
    e3f2:	3b 2b       	or	r19, r27
    e3f4:	c9 01       	movw	r24, r18
    e3f6:	b8 01       	movw	r22, r16
}
    e3f8:	1f 91       	pop	r17
    e3fa:	0f 91       	pop	r16
    e3fc:	08 95       	ret

0000e3fe <get_fattime>:
///
/// @return FAT32 time.
/// @see tm_to_fat().
MEMSPACE
DWORD get_fattime (void)
{
    e3fe:	a4 e0       	ldi	r26, 0x04	; 4
    e400:	b0 e0       	ldi	r27, 0x00	; 0
    e402:	e5 e0       	ldi	r30, 0x05	; 5
    e404:	f2 e7       	ldi	r31, 0x72	; 114
    e406:	0c 94 29 e5 	jmp	0x1ca52	; 0x1ca52 <__prologue_saves__+0x20>
    time_t t;
/* Get GMT time */
    time(&t);
    e40a:	ce 01       	movw	r24, r28
    e40c:	01 96       	adiw	r24, 0x01	; 1
    e40e:	0e 94 a6 39 	call	0x734c	; 0x734c <time>
    return( tm_to_fat(localtime(&t)));
    e412:	ce 01       	movw	r24, r28
    e414:	01 96       	adiw	r24, 0x01	; 1
    e416:	0e 94 3f 3a 	call	0x747e	; 0x747e <localtime>
    e41a:	85 df       	rcall	.-246    	; 0xe326 <tm_to_fat>
}
    e41c:	24 96       	adiw	r28, 0x04	; 4
    e41e:	e2 e0       	ldi	r30, 0x02	; 2
    e420:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__epilogue_restores__+0x20>

0000e424 <put_rc>:
/// @param[in] rc: FatFs status return code
/// @return  void

MEMSPACE
void put_rc (int rc)
{
    e424:	00 d0       	rcall	.+0      	; 0xe426 <put_rc+0x2>
    e426:	00 d0       	rcall	.+0      	; 0xe428 <put_rc+0x4>
    e428:	1f 92       	push	r1
        ptr = "INVALID ERROR MESSAGE";
    else
        ptr = (char *) err_msg[(int)rc];
    printf("rc=%u FR_%s\n", rc, ptr);
#else
    printf("rc=%u\n", rc);
    e42a:	ed b7       	in	r30, 0x3d	; 61
    e42c:	fe b7       	in	r31, 0x3e	; 62
    e42e:	95 83       	std	Z+5, r25	; 0x05
    e430:	84 83       	std	Z+4, r24	; 0x04
    e432:	8b ec       	ldi	r24, 0xCB	; 203
    e434:	99 e0       	ldi	r25, 0x09	; 9
    e436:	a0 e0       	ldi	r26, 0x00	; 0
    e438:	81 83       	std	Z+1, r24	; 0x01
    e43a:	92 83       	std	Z+2, r25	; 0x02
    e43c:	a3 83       	std	Z+3, r26	; 0x03
    e43e:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
#endif
}
    e442:	0f 90       	pop	r0
    e444:	0f 90       	pop	r0
    e446:	0f 90       	pop	r0
    e448:	0f 90       	pop	r0
    e44a:	0f 90       	pop	r0
    e44c:	08 95       	ret

0000e44e <fatfs_scan_files>:

MEMSPACE
int fatfs_scan_files (
char* path                                        /* Pointer to the working buffer with start path */
)
{
    e44e:	a4 e4       	ldi	r26, 0x44	; 68
    e450:	b1 e0       	ldi	r27, 0x01	; 1
    e452:	ed e2       	ldi	r30, 0x2D	; 45
    e454:	f2 e7       	ldi	r31, 0x72	; 114
    e456:	0c 94 24 e5 	jmp	0x1ca48	; 0x1ca48 <__prologue_saves__+0x16>
    e45a:	8c 01       	movw	r16, r24
    DIR dirs;
    FRESULT fr;
    int i;
    FILINFO info;

    fr = f_opendir(&dirs, path);
    e45c:	bc 01       	movw	r22, r24
    e45e:	ce 01       	movw	r24, r28
    e460:	89 5e       	subi	r24, 0xE9	; 233
    e462:	9e 4f       	sbci	r25, 0xFE	; 254
    e464:	0e 94 25 65 	call	0xca4a	; 0xca4a <f_opendir>
    if (fr == FR_OK) {
    e468:	00 97       	sbiw	r24, 0x00	; 0
    e46a:	09 f0       	breq	.+2      	; 0xe46e <fatfs_scan_files+0x20>
    e46c:	5b c0       	rjmp	.+182    	; 0xe524 <fatfs_scan_files+0xd6>
        while (((fr = f_readdir(&dirs, &info)) == FR_OK) && info.fname[0]) {
            if (info.fattrib & AM_DIR) {
                AccDirs++;
                i = strlen(path);
                path[i] = '/'; strcpy(path+i+1, info.fname);
    e46e:	8f e2       	ldi	r24, 0x2F	; 47
    e470:	d8 2e       	mov	r13, r24
    int i;
    FILINFO info;

    fr = f_opendir(&dirs, path);
    if (fr == FR_OK) {
        while (((fr = f_readdir(&dirs, &info)) == FR_OK) && info.fname[0]) {
    e472:	be 01       	movw	r22, r28
    e474:	6f 5f       	subi	r22, 0xFF	; 255
    e476:	7f 4f       	sbci	r23, 0xFF	; 255
    e478:	ce 01       	movw	r24, r28
    e47a:	89 5e       	subi	r24, 0xE9	; 233
    e47c:	9e 4f       	sbci	r25, 0xFE	; 254
    e47e:	0e 94 ab 65 	call	0xcb56	; 0xcb56 <f_readdir>
    e482:	00 97       	sbiw	r24, 0x00	; 0
    e484:	09 f0       	breq	.+2      	; 0xe488 <fatfs_scan_files+0x3a>
    e486:	4e c0       	rjmp	.+156    	; 0xe524 <fatfs_scan_files+0xd6>
    e488:	2f 89       	ldd	r18, Y+23	; 0x17
    e48a:	22 23       	and	r18, r18
    e48c:	09 f4       	brne	.+2      	; 0xe490 <fatfs_scan_files+0x42>
    e48e:	4a c0       	rjmp	.+148    	; 0xe524 <fatfs_scan_files+0xd6>
            if (info.fattrib & AM_DIR) {
    e490:	89 85       	ldd	r24, Y+9	; 0x09
    e492:	84 ff       	sbrs	r24, 4
    e494:	25 c0       	rjmp	.+74     	; 0xe4e0 <fatfs_scan_files+0x92>
                AccDirs++;
    e496:	80 91 51 1c 	lds	r24, 0x1C51	; 0x801c51 <AccDirs>
    e49a:	90 91 52 1c 	lds	r25, 0x1C52	; 0x801c52 <AccDirs+0x1>
    e49e:	01 96       	adiw	r24, 0x01	; 1
    e4a0:	90 93 52 1c 	sts	0x1C52, r25	; 0x801c52 <AccDirs+0x1>
    e4a4:	80 93 51 1c 	sts	0x1C51, r24	; 0x801c51 <AccDirs>
                i = strlen(path);
    e4a8:	f8 01       	movw	r30, r16
    e4aa:	01 90       	ld	r0, Z+
    e4ac:	00 20       	and	r0, r0
    e4ae:	e9 f7       	brne	.-6      	; 0xe4aa <fatfs_scan_files+0x5c>
    e4b0:	31 97       	sbiw	r30, 0x01	; 1
    e4b2:	e0 1b       	sub	r30, r16
    e4b4:	f1 0b       	sbc	r31, r17
                path[i] = '/'; strcpy(path+i+1, info.fname);
    e4b6:	78 01       	movw	r14, r16
    e4b8:	ee 0e       	add	r14, r30
    e4ba:	ff 1e       	adc	r15, r31
    e4bc:	d7 01       	movw	r26, r14
    e4be:	dc 92       	st	X, r13
    e4c0:	cf 01       	movw	r24, r30
    e4c2:	01 96       	adiw	r24, 0x01	; 1
    e4c4:	be 01       	movw	r22, r28
    e4c6:	69 5e       	subi	r22, 0xE9	; 233
    e4c8:	7f 4f       	sbci	r23, 0xFF	; 255
    e4ca:	80 0f       	add	r24, r16
    e4cc:	91 1f       	adc	r25, r17
    e4ce:	0e 94 e5 32 	call	0x65ca	; 0x65ca <strcpy>
                fr = fatfs_scan_files(path);
    e4d2:	c8 01       	movw	r24, r16
    e4d4:	bc df       	rcall	.-136    	; 0xe44e <fatfs_scan_files>
                path[i] = 0;
    e4d6:	f7 01       	movw	r30, r14
    e4d8:	10 82       	st	Z, r1
                if (fr != FR_OK) break;
    e4da:	00 97       	sbiw	r24, 0x00	; 0
    e4dc:	51 f2       	breq	.-108    	; 0xe472 <fatfs_scan_files+0x24>
    e4de:	22 c0       	rjmp	.+68     	; 0xe524 <fatfs_scan_files+0xd6>
            } else {
//              xprintf(PSTR("%s/%s\n"), path, info.fname);
                AccFiles++;
    e4e0:	80 91 53 1c 	lds	r24, 0x1C53	; 0x801c53 <AccFiles>
    e4e4:	90 91 54 1c 	lds	r25, 0x1C54	; 0x801c54 <AccFiles+0x1>
    e4e8:	01 96       	adiw	r24, 0x01	; 1
    e4ea:	90 93 54 1c 	sts	0x1C54, r25	; 0x801c54 <AccFiles+0x1>
    e4ee:	80 93 53 1c 	sts	0x1C53, r24	; 0x801c53 <AccFiles>
                AccSize += info.fsize;
    e4f2:	40 91 4d 1c 	lds	r20, 0x1C4D	; 0x801c4d <AccSize>
    e4f6:	50 91 4e 1c 	lds	r21, 0x1C4E	; 0x801c4e <AccSize+0x1>
    e4fa:	60 91 4f 1c 	lds	r22, 0x1C4F	; 0x801c4f <AccSize+0x2>
    e4fe:	70 91 50 1c 	lds	r23, 0x1C50	; 0x801c50 <AccSize+0x3>
    e502:	89 81       	ldd	r24, Y+1	; 0x01
    e504:	9a 81       	ldd	r25, Y+2	; 0x02
    e506:	ab 81       	ldd	r26, Y+3	; 0x03
    e508:	bc 81       	ldd	r27, Y+4	; 0x04
    e50a:	84 0f       	add	r24, r20
    e50c:	95 1f       	adc	r25, r21
    e50e:	a6 1f       	adc	r26, r22
    e510:	b7 1f       	adc	r27, r23
    e512:	80 93 4d 1c 	sts	0x1C4D, r24	; 0x801c4d <AccSize>
    e516:	90 93 4e 1c 	sts	0x1C4E, r25	; 0x801c4e <AccSize+0x1>
    e51a:	a0 93 4f 1c 	sts	0x1C4F, r26	; 0x801c4f <AccSize+0x2>
    e51e:	b0 93 50 1c 	sts	0x1C50, r27	; 0x801c50 <AccSize+0x3>
    e522:	a7 cf       	rjmp	.-178    	; 0xe472 <fatfs_scan_files+0x24>
#endif
        }
    }

    return fr;
}
    e524:	cc 5b       	subi	r28, 0xBC	; 188
    e526:	de 4f       	sbci	r29, 0xFE	; 254
    e528:	e7 e0       	ldi	r30, 0x07	; 7
    e52a:	0c 94 40 e5 	jmp	0x1ca80	; 0x1ca80 <__epilogue_restores__+0x16>

0000e52e <fatfs_fstype>:
/// @brief  return a string with the file system type
/// @param[in] type: file system type
/// @return string with file system type
MEMSPACE
char *fatfs_fstype(int type)
{
    e52e:	01 97       	sbiw	r24, 0x01	; 1
    e530:	84 30       	cpi	r24, 0x04	; 4
    e532:	91 05       	cpc	r25, r1
    e534:	40 f4       	brcc	.+16     	; 0xe546 <fatfs_fstype+0x18>
    e536:	88 0f       	add	r24, r24
    e538:	99 1f       	adc	r25, r25
    e53a:	fc 01       	movw	r30, r24
    e53c:	e8 51       	subi	r30, 0x18	; 24
    e53e:	f8 4f       	sbci	r31, 0xF8	; 248
    e540:	80 81       	ld	r24, Z
    e542:	91 81       	ldd	r25, Z+1	; 0x01
    e544:	08 95       	ret
    char *ptr;
    switch(type)
    e546:	86 ec       	ldi	r24, 0xC6	; 198
    e548:	97 e0       	ldi	r25, 0x07	; 7
        default:
             ptr = "UNKNOWN";
            break;
    }
    return(ptr);
}
    e54a:	08 95       	ret

0000e54c <fatfs_status>:
/// @see AccFiles: Total number of Files
/// @see AccSize:  Total size of all files
/// @return  void
MEMSPACE
void fatfs_status(char *ptr)
{
    e54c:	a7 e3       	ldi	r26, 0x37	; 55
    e54e:	b0 e0       	ldi	r27, 0x00	; 0
    e550:	ec ea       	ldi	r30, 0xAC	; 172
    e552:	f2 e7       	ldi	r31, 0x72	; 114
    e554:	0c 94 23 e5 	jmp	0x1ca46	; 0x1ca46 <__prologue_saves__+0x14>
    e558:	7c 01       	movw	r14, r24
    int res;
    FATFS *fs;
    char label[24+2];
    DWORD vsn; // volume serial number

    while(*ptr == ' ' || *ptr == '\t')
    e55a:	fc 01       	movw	r30, r24
    e55c:	21 91       	ld	r18, Z+
    e55e:	cf 01       	movw	r24, r30
    e560:	20 32       	cpi	r18, 0x20	; 32
    e562:	d1 f3       	breq	.-12     	; 0xe558 <fatfs_status+0xc>
    e564:	29 30       	cpi	r18, 0x09	; 9
    e566:	c1 f3       	breq	.-16     	; 0xe558 <fatfs_status+0xc>
        ++ptr;
    printf("fatfs status:%s\n",ptr);
    e568:	ed b7       	in	r30, 0x3d	; 61
    e56a:	fe b7       	in	r31, 0x3e	; 62
    e56c:	e4 82       	std	Z+4, r14	; 0x04
    e56e:	f5 82       	std	Z+5, r15	; 0x05
    e570:	8a eb       	ldi	r24, 0xBA	; 186
    e572:	99 e0       	ldi	r25, 0x09	; 9
    e574:	a0 e0       	ldi	r26, 0x00	; 0
    e576:	81 83       	std	Z+1, r24	; 0x01
    e578:	92 83       	std	Z+2, r25	; 0x02
    e57a:	a3 83       	std	Z+3, r26	; 0x03
    e57c:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    res = f_getfree(ptr, (DWORD*)&p2, &fs);
    e580:	ae 01       	movw	r20, r28
    e582:	4a 5c       	subi	r20, 0xCA	; 202
    e584:	5f 4f       	sbci	r21, 0xFF	; 255
    e586:	be 01       	movw	r22, r28
    e588:	6e 5c       	subi	r22, 0xCE	; 206
    e58a:	7f 4f       	sbci	r23, 0xFF	; 255
    e58c:	c7 01       	movw	r24, r14
    e58e:	0e 94 2d 66 	call	0xcc5a	; 0xcc5a <f_getfree>
    if (res)
    e592:	00 97       	sbiw	r24, 0x00	; 0
    e594:	09 f0       	breq	.+2      	; 0xe598 <fatfs_status+0x4c>
    e596:	f8 c0       	rjmp	.+496    	; 0xe788 <fatfs_status+0x23c>
    {
        put_rc(res);
        return;
    }
    printf("FAT type                = %s\n",  fatfs_fstype(fs->fs_type));
    e598:	ee a9       	ldd	r30, Y+54	; 0x36
    e59a:	ff a9       	ldd	r31, Y+55	; 0x37
    e59c:	80 81       	ld	r24, Z
    e59e:	90 e0       	ldi	r25, 0x00	; 0
    e5a0:	c6 df       	rcall	.-116    	; 0xe52e <fatfs_fstype>
    e5a2:	ed b7       	in	r30, 0x3d	; 61
    e5a4:	fe b7       	in	r31, 0x3e	; 62
    e5a6:	95 83       	std	Z+5, r25	; 0x05
    e5a8:	84 83       	std	Z+4, r24	; 0x04
    e5aa:	8c e9       	ldi	r24, 0x9C	; 156
    e5ac:	99 e0       	ldi	r25, 0x09	; 9
    e5ae:	a0 e0       	ldi	r26, 0x00	; 0
    e5b0:	81 83       	std	Z+1, r24	; 0x01
    e5b2:	92 83       	std	Z+2, r25	; 0x02
    e5b4:	a3 83       	std	Z+3, r26	; 0x03
    e5b6:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    printf("Bytes/Cluster           = %lu\n", (DWORD)fs->csize * 512);
    e5ba:	ee a9       	ldd	r30, Y+54	; 0x36
    e5bc:	ff a9       	ldd	r31, Y+55	; 0x37
    e5be:	81 85       	ldd	r24, Z+9	; 0x09
    e5c0:	92 85       	ldd	r25, Z+10	; 0x0a
    e5c2:	a0 e0       	ldi	r26, 0x00	; 0
    e5c4:	b0 e0       	ldi	r27, 0x00	; 0
    e5c6:	39 e0       	ldi	r19, 0x09	; 9
    e5c8:	88 0f       	add	r24, r24
    e5ca:	99 1f       	adc	r25, r25
    e5cc:	aa 1f       	adc	r26, r26
    e5ce:	bb 1f       	adc	r27, r27
    e5d0:	3a 95       	dec	r19
    e5d2:	d1 f7       	brne	.-12     	; 0xe5c8 <fatfs_status+0x7c>
    e5d4:	ed b7       	in	r30, 0x3d	; 61
    e5d6:	fe b7       	in	r31, 0x3e	; 62
    e5d8:	84 83       	std	Z+4, r24	; 0x04
    e5da:	95 83       	std	Z+5, r25	; 0x05
    e5dc:	a6 83       	std	Z+6, r26	; 0x06
    e5de:	b7 83       	std	Z+7, r27	; 0x07
    e5e0:	8d e7       	ldi	r24, 0x7D	; 125
    e5e2:	99 e0       	ldi	r25, 0x09	; 9
    e5e4:	a0 e0       	ldi	r26, 0x00	; 0
    e5e6:	81 83       	std	Z+1, r24	; 0x01
    e5e8:	92 83       	std	Z+2, r25	; 0x02
    e5ea:	a3 83       	std	Z+3, r26	; 0x03
    e5ec:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    printf("Number of FATs          = %u\n",  fs->n_fats);
    e5f0:	ee a9       	ldd	r30, Y+54	; 0x36
    e5f2:	ff a9       	ldd	r31, Y+55	; 0x37
    e5f4:	82 81       	ldd	r24, Z+2	; 0x02
    e5f6:	90 e0       	ldi	r25, 0x00	; 0
    e5f8:	ed b7       	in	r30, 0x3d	; 61
    e5fa:	fe b7       	in	r31, 0x3e	; 62
    e5fc:	95 83       	std	Z+5, r25	; 0x05
    e5fe:	84 83       	std	Z+4, r24	; 0x04
    e600:	8f e5       	ldi	r24, 0x5F	; 95
    e602:	99 e0       	ldi	r25, 0x09	; 9
    e604:	a0 e0       	ldi	r26, 0x00	; 0
    e606:	81 83       	std	Z+1, r24	; 0x01
    e608:	92 83       	std	Z+2, r25	; 0x02
    e60a:	a3 83       	std	Z+3, r26	; 0x03
    e60c:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    printf("Root DIR entries        = %u\n",  fs->n_rootdir);
    e610:	ee a9       	ldd	r30, Y+54	; 0x36
    e612:	ff a9       	ldd	r31, Y+55	; 0x37
    e614:	87 81       	ldd	r24, Z+7	; 0x07
    e616:	90 85       	ldd	r25, Z+8	; 0x08
    e618:	ed b7       	in	r30, 0x3d	; 61
    e61a:	fe b7       	in	r31, 0x3e	; 62
    e61c:	95 83       	std	Z+5, r25	; 0x05
    e61e:	84 83       	std	Z+4, r24	; 0x04
    e620:	81 e4       	ldi	r24, 0x41	; 65
    e622:	99 e0       	ldi	r25, 0x09	; 9
    e624:	a0 e0       	ldi	r26, 0x00	; 0
    e626:	81 83       	std	Z+1, r24	; 0x01
    e628:	92 83       	std	Z+2, r25	; 0x02
    e62a:	a3 83       	std	Z+3, r26	; 0x03
    e62c:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    printf("Sectors/FAT             = %lu\n", fs->fsize);
    e630:	ee a9       	ldd	r30, Y+54	; 0x36
    e632:	ff a9       	ldd	r31, Y+55	; 0x37
    e634:	85 8d       	ldd	r24, Z+29	; 0x1d
    e636:	96 8d       	ldd	r25, Z+30	; 0x1e
    e638:	a7 8d       	ldd	r26, Z+31	; 0x1f
    e63a:	b0 a1       	ldd	r27, Z+32	; 0x20
    e63c:	ed b7       	in	r30, 0x3d	; 61
    e63e:	fe b7       	in	r31, 0x3e	; 62
    e640:	84 83       	std	Z+4, r24	; 0x04
    e642:	95 83       	std	Z+5, r25	; 0x05
    e644:	a6 83       	std	Z+6, r26	; 0x06
    e646:	b7 83       	std	Z+7, r27	; 0x07
    e648:	82 e2       	ldi	r24, 0x22	; 34
    e64a:	99 e0       	ldi	r25, 0x09	; 9
    e64c:	a0 e0       	ldi	r26, 0x00	; 0
    e64e:	81 83       	std	Z+1, r24	; 0x01
    e650:	92 83       	std	Z+2, r25	; 0x02
    e652:	a3 83       	std	Z+3, r26	; 0x03
    e654:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    printf("Number of clusters      = %lu\n", fs->n_fatent - 2);
    e658:	ee a9       	ldd	r30, Y+54	; 0x36
    e65a:	ff a9       	ldd	r31, Y+55	; 0x37
    e65c:	81 8d       	ldd	r24, Z+25	; 0x19
    e65e:	92 8d       	ldd	r25, Z+26	; 0x1a
    e660:	a3 8d       	ldd	r26, Z+27	; 0x1b
    e662:	b4 8d       	ldd	r27, Z+28	; 0x1c
    e664:	02 97       	sbiw	r24, 0x02	; 2
    e666:	a1 09       	sbc	r26, r1
    e668:	b1 09       	sbc	r27, r1
    e66a:	ed b7       	in	r30, 0x3d	; 61
    e66c:	fe b7       	in	r31, 0x3e	; 62
    e66e:	84 83       	std	Z+4, r24	; 0x04
    e670:	95 83       	std	Z+5, r25	; 0x05
    e672:	a6 83       	std	Z+6, r26	; 0x06
    e674:	b7 83       	std	Z+7, r27	; 0x07
    e676:	83 e0       	ldi	r24, 0x03	; 3
    e678:	99 e0       	ldi	r25, 0x09	; 9
    e67a:	a0 e0       	ldi	r26, 0x00	; 0
    e67c:	81 83       	std	Z+1, r24	; 0x01
    e67e:	92 83       	std	Z+2, r25	; 0x02
    e680:	a3 83       	std	Z+3, r26	; 0x03
    e682:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    printf("FAT start (lba)         = %lu\n", fs->fatbase);
    e686:	ee a9       	ldd	r30, Y+54	; 0x36
    e688:	ff a9       	ldd	r31, Y+55	; 0x37
    e68a:	85 a1       	ldd	r24, Z+37	; 0x25
    e68c:	96 a1       	ldd	r25, Z+38	; 0x26
    e68e:	a7 a1       	ldd	r26, Z+39	; 0x27
    e690:	b0 a5       	ldd	r27, Z+40	; 0x28
    e692:	ed b7       	in	r30, 0x3d	; 61
    e694:	fe b7       	in	r31, 0x3e	; 62
    e696:	84 83       	std	Z+4, r24	; 0x04
    e698:	95 83       	std	Z+5, r25	; 0x05
    e69a:	a6 83       	std	Z+6, r26	; 0x06
    e69c:	b7 83       	std	Z+7, r27	; 0x07
    e69e:	84 ee       	ldi	r24, 0xE4	; 228
    e6a0:	98 e0       	ldi	r25, 0x08	; 8
    e6a2:	a0 e0       	ldi	r26, 0x00	; 0
    e6a4:	81 83       	std	Z+1, r24	; 0x01
    e6a6:	92 83       	std	Z+2, r25	; 0x02
    e6a8:	a3 83       	std	Z+3, r26	; 0x03
    e6aa:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    printf("DIR start (lba,clustor) = %lu\n", fs->dirbase);
    e6ae:	ee a9       	ldd	r30, Y+54	; 0x36
    e6b0:	ff a9       	ldd	r31, Y+55	; 0x37
    e6b2:	81 a5       	ldd	r24, Z+41	; 0x29
    e6b4:	92 a5       	ldd	r25, Z+42	; 0x2a
    e6b6:	a3 a5       	ldd	r26, Z+43	; 0x2b
    e6b8:	b4 a5       	ldd	r27, Z+44	; 0x2c
    e6ba:	ed b7       	in	r30, 0x3d	; 61
    e6bc:	fe b7       	in	r31, 0x3e	; 62
    e6be:	84 83       	std	Z+4, r24	; 0x04
    e6c0:	95 83       	std	Z+5, r25	; 0x05
    e6c2:	a6 83       	std	Z+6, r26	; 0x06
    e6c4:	b7 83       	std	Z+7, r27	; 0x07
    e6c6:	85 ec       	ldi	r24, 0xC5	; 197
    e6c8:	98 e0       	ldi	r25, 0x08	; 8
    e6ca:	a0 e0       	ldi	r26, 0x00	; 0
    e6cc:	81 83       	std	Z+1, r24	; 0x01
    e6ce:	92 83       	std	Z+2, r25	; 0x02
    e6d0:	a3 83       	std	Z+3, r26	; 0x03
    e6d2:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    printf("Data start (lba)        = %lu\n", fs->database);
    e6d6:	ee a9       	ldd	r30, Y+54	; 0x36
    e6d8:	ff a9       	ldd	r31, Y+55	; 0x37
    e6da:	85 a5       	ldd	r24, Z+45	; 0x2d
    e6dc:	96 a5       	ldd	r25, Z+46	; 0x2e
    e6de:	a7 a5       	ldd	r26, Z+47	; 0x2f
    e6e0:	b0 a9       	ldd	r27, Z+48	; 0x30
    e6e2:	ed b7       	in	r30, 0x3d	; 61
    e6e4:	fe b7       	in	r31, 0x3e	; 62
    e6e6:	84 83       	std	Z+4, r24	; 0x04
    e6e8:	95 83       	std	Z+5, r25	; 0x05
    e6ea:	a6 83       	std	Z+6, r26	; 0x06
    e6ec:	b7 83       	std	Z+7, r27	; 0x07
    e6ee:	86 ea       	ldi	r24, 0xA6	; 166
    e6f0:	98 e0       	ldi	r25, 0x08	; 8
    e6f2:	a0 e0       	ldi	r26, 0x00	; 0
    e6f4:	81 83       	std	Z+1, r24	; 0x01
    e6f6:	92 83       	std	Z+2, r25	; 0x02
    e6f8:	a3 83       	std	Z+3, r26	; 0x03
    e6fa:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>

#if FF_USE_LABEL
    res = f_getlabel(ptr, label, (DWORD*)&vsn);
    e6fe:	ae 01       	movw	r20, r28
    e700:	42 5d       	subi	r20, 0xD2	; 210
    e702:	5f 4f       	sbci	r21, 0xFF	; 255
    e704:	be 01       	movw	r22, r28
    e706:	6c 5e       	subi	r22, 0xEC	; 236
    e708:	7f 4f       	sbci	r23, 0xFF	; 255
    e70a:	c7 01       	movw	r24, r14
    e70c:	0e 94 5f 6a 	call	0xd4be	; 0xd4be <f_getlabel>
    if (res)
    e710:	00 97       	sbiw	r24, 0x00	; 0
    e712:	d1 f5       	brne	.+116    	; 0xe788 <fatfs_status+0x23c>
    {
        put_rc(res);
        return;
    }
    printf("Volume name             = %s\n", label[0] ? label : "<blank>");
    e714:	8c 89       	ldd	r24, Y+20	; 0x14
    e716:	81 11       	cpse	r24, r1
    e718:	03 c0       	rjmp	.+6      	; 0xe720 <fatfs_status+0x1d4>
    e71a:	8e ec       	ldi	r24, 0xCE	; 206
    e71c:	97 e0       	ldi	r25, 0x07	; 7
    e71e:	02 c0       	rjmp	.+4      	; 0xe724 <fatfs_status+0x1d8>
    e720:	ce 01       	movw	r24, r28
    e722:	44 96       	adiw	r24, 0x14	; 20
    e724:	ed b7       	in	r30, 0x3d	; 61
    e726:	fe b7       	in	r31, 0x3e	; 62
    e728:	95 83       	std	Z+5, r25	; 0x05
    e72a:	84 83       	std	Z+4, r24	; 0x04
    e72c:	88 e8       	ldi	r24, 0x88	; 136
    e72e:	98 e0       	ldi	r25, 0x08	; 8
    e730:	a0 e0       	ldi	r26, 0x00	; 0
    e732:	81 83       	std	Z+1, r24	; 0x01
    e734:	92 83       	std	Z+2, r25	; 0x02
    e736:	a3 83       	std	Z+3, r26	; 0x03
    e738:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    printf("Volume S/N              = %04X-%04X\n", (WORD)((DWORD)vsn >> 16), (WORD)(vsn & 0xFFFF));
    e73c:	8e a5       	ldd	r24, Y+46	; 0x2e
    e73e:	9f a5       	ldd	r25, Y+47	; 0x2f
    e740:	a8 a9       	ldd	r26, Y+48	; 0x30
    e742:	b9 a9       	ldd	r27, Y+49	; 0x31
    e744:	ed b7       	in	r30, 0x3d	; 61
    e746:	fe b7       	in	r31, 0x3e	; 62
    e748:	97 83       	std	Z+7, r25	; 0x07
    e74a:	86 83       	std	Z+6, r24	; 0x06
    e74c:	b5 83       	std	Z+5, r27	; 0x05
    e74e:	a4 83       	std	Z+4, r26	; 0x04
    e750:	83 e6       	ldi	r24, 0x63	; 99
    e752:	98 e0       	ldi	r25, 0x08	; 8
    e754:	a0 e0       	ldi	r26, 0x00	; 0
    e756:	81 83       	std	Z+1, r24	; 0x01
    e758:	92 83       	std	Z+2, r25	; 0x02
    e75a:	a3 83       	std	Z+3, r26	; 0x03
    e75c:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
#endif

    AccSize = AccFiles = AccDirs = 0;
    e760:	10 92 52 1c 	sts	0x1C52, r1	; 0x801c52 <AccDirs+0x1>
    e764:	10 92 51 1c 	sts	0x1C51, r1	; 0x801c51 <AccDirs>
    e768:	10 92 54 1c 	sts	0x1C54, r1	; 0x801c54 <AccFiles+0x1>
    e76c:	10 92 53 1c 	sts	0x1C53, r1	; 0x801c53 <AccFiles>
    e770:	10 92 4d 1c 	sts	0x1C4D, r1	; 0x801c4d <AccSize>
    e774:	10 92 4e 1c 	sts	0x1C4E, r1	; 0x801c4e <AccSize+0x1>
    e778:	10 92 4f 1c 	sts	0x1C4F, r1	; 0x801c4f <AccSize+0x2>
    e77c:	10 92 50 1c 	sts	0x1C50, r1	; 0x801c50 <AccSize+0x3>
    res = fatfs_scan_files(ptr);
    if (res)
    e780:	c7 01       	movw	r24, r14
    {
        put_rc(res);
    e782:	65 de       	rcall	.-822    	; 0xe44e <fatfs_scan_files>
    e784:	00 97       	sbiw	r24, 0x00	; 0
        return;
    e786:	11 f0       	breq	.+4      	; 0xe78c <fatfs_status+0x240>
    }
    printf("%u files, %lu bytes.\n%u folders.\n"
    e788:	4d de       	rcall	.-870    	; 0xe424 <put_rc>
    e78a:	56 c0       	rjmp	.+172    	; 0xe838 <fatfs_status+0x2ec>
    e78c:	0e a9       	ldd	r16, Y+54	; 0x36
    e78e:	1f a9       	ldd	r17, Y+55	; 0x37
    e790:	f8 01       	movw	r30, r16
    e792:	c1 84       	ldd	r12, Z+9	; 0x09
    e794:	d2 84       	ldd	r13, Z+10	; 0x0a
    e796:	e1 2c       	mov	r14, r1
    e798:	f1 2c       	mov	r15, r1
    e79a:	6a a9       	ldd	r22, Y+50	; 0x32
    e79c:	7b a9       	ldd	r23, Y+51	; 0x33
    e79e:	8c a9       	ldd	r24, Y+52	; 0x34
    e7a0:	9d a9       	ldd	r25, Y+53	; 0x35
    e7a2:	a7 01       	movw	r20, r14
    e7a4:	96 01       	movw	r18, r12
    e7a6:	0e 94 55 e4 	call	0x1c8aa	; 0x1c8aa <__mulsi3>
    e7aa:	22 e0       	ldi	r18, 0x02	; 2
    e7ac:	30 e0       	ldi	r19, 0x00	; 0
    e7ae:	40 e0       	ldi	r20, 0x00	; 0
    e7b0:	50 e0       	ldi	r21, 0x00	; 0
    e7b2:	0e 94 b9 e4 	call	0x1c972	; 0x1c972 <__divmodsi4>
    e7b6:	ed b7       	in	r30, 0x3d	; 61
    e7b8:	fe b7       	in	r31, 0x3e	; 62
    e7ba:	20 8b       	std	Z+16, r18	; 0x10
    e7bc:	31 8b       	std	Z+17, r19	; 0x11
    e7be:	42 8b       	std	Z+18, r20	; 0x12
    e7c0:	53 8b       	std	Z+19, r21	; 0x13
    e7c2:	f8 01       	movw	r30, r16
    e7c4:	81 8d       	ldd	r24, Z+25	; 0x19
    e7c6:	92 8d       	ldd	r25, Z+26	; 0x1a
    e7c8:	a3 8d       	ldd	r26, Z+27	; 0x1b
    e7ca:	b4 8d       	ldd	r27, Z+28	; 0x1c
    e7cc:	9c 01       	movw	r18, r24
    e7ce:	ad 01       	movw	r20, r26
    e7d0:	22 50       	subi	r18, 0x02	; 2
    e7d2:	31 09       	sbc	r19, r1
    e7d4:	41 09       	sbc	r20, r1
    e7d6:	51 09       	sbc	r21, r1
    e7d8:	c7 01       	movw	r24, r14
    e7da:	b6 01       	movw	r22, r12
    e7dc:	0e 94 55 e4 	call	0x1c8aa	; 0x1c8aa <__mulsi3>
    e7e0:	dc 01       	movw	r26, r24
    e7e2:	cb 01       	movw	r24, r22
    e7e4:	b6 95       	lsr	r27
    e7e6:	a7 95       	ror	r26
    e7e8:	97 95       	ror	r25
    e7ea:	87 95       	ror	r24
    e7ec:	ed b7       	in	r30, 0x3d	; 61
    e7ee:	fe b7       	in	r31, 0x3e	; 62
    e7f0:	84 87       	std	Z+12, r24	; 0x0c
    e7f2:	95 87       	std	Z+13, r25	; 0x0d
    e7f4:	a6 87       	std	Z+14, r26	; 0x0e
    e7f6:	b7 87       	std	Z+15, r27	; 0x0f
    e7f8:	80 91 51 1c 	lds	r24, 0x1C51	; 0x801c51 <AccDirs>
    e7fc:	90 91 52 1c 	lds	r25, 0x1C52	; 0x801c52 <AccDirs+0x1>
    e800:	93 87       	std	Z+11, r25	; 0x0b
    e802:	82 87       	std	Z+10, r24	; 0x0a
    e804:	80 91 4d 1c 	lds	r24, 0x1C4D	; 0x801c4d <AccSize>
    e808:	90 91 4e 1c 	lds	r25, 0x1C4E	; 0x801c4e <AccSize+0x1>
    e80c:	a0 91 4f 1c 	lds	r26, 0x1C4F	; 0x801c4f <AccSize+0x2>
    e810:	b0 91 50 1c 	lds	r27, 0x1C50	; 0x801c50 <AccSize+0x3>
    e814:	86 83       	std	Z+6, r24	; 0x06
    e816:	97 83       	std	Z+7, r25	; 0x07
    e818:	a0 87       	std	Z+8, r26	; 0x08
    e81a:	b1 87       	std	Z+9, r27	; 0x09
    e81c:	80 91 53 1c 	lds	r24, 0x1C53	; 0x801c53 <AccFiles>
    e820:	90 91 54 1c 	lds	r25, 0x1C54	; 0x801c54 <AccFiles+0x1>
    e824:	95 83       	std	Z+5, r25	; 0x05
    e826:	84 83       	std	Z+4, r24	; 0x04
    e828:	86 e1       	ldi	r24, 0x16	; 22
    e82a:	98 e0       	ldi	r25, 0x08	; 8
    e82c:	a0 e0       	ldi	r26, 0x00	; 0
    e82e:	81 83       	std	Z+1, r24	; 0x01
    e830:	92 83       	std	Z+2, r25	; 0x02
    e832:	a3 83       	std	Z+3, r26	; 0x03
                 "%lu KB total disk space.\n%lu KB available.\n",
            AccFiles, AccSize, AccDirs,
            (fs->n_fatent - 2) * fs->csize / 2, p2 * fs->csize / 2
    );

}
    e834:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    e838:	e7 96       	adiw	r28, 0x37	; 55
    e83a:	e8 e0       	ldi	r30, 0x08	; 8
    e83c:	0c 94 3f e5 	jmp	0x1ca7e	; 0x1ca7e <__epilogue_restores__+0x14>

0000e840 <fatfs_filinfo_list>:
/// @param[in] : FILINFO pointer
/// @return  void

MEMSPACE
void fatfs_filinfo_list(FILINFO *info)
{
    e840:	ab e1       	ldi	r26, 0x1B	; 27
    e842:	b0 e0       	ldi	r27, 0x00	; 0
    e844:	e6 e2       	ldi	r30, 0x26	; 38
    e846:	f4 e7       	ldi	r31, 0x74	; 116
    e848:	0c 94 29 e5 	jmp	0x1ca52	; 0x1ca52 <__prologue_saves__+0x20>
    e84c:	dc 01       	movw	r26, r24
    char attrs[6];
    if(info->fname[0] == 0)
    e84e:	fc 01       	movw	r30, r24
    e850:	86 89       	ldd	r24, Z+22	; 0x16
    e852:	81 11       	cpse	r24, r1
    e854:	03 c0       	rjmp	.+6      	; 0xe85c <fatfs_filinfo_list+0x1c>
    {
        printf("fatfs_filinfo_list: empty\n");
    e856:	8b ef       	ldi	r24, 0xFB	; 251
    e858:	97 e0       	ldi	r25, 0x07	; 7
    e85a:	69 c0       	rjmp	.+210    	; 0xe92e <fatfs_filinfo_list+0xee>
        return;
    }
    attrs[0] = (info->fattrib & AM_DIR) ? 'D' : '-';
    e85c:	fd 01       	movw	r30, r26
    e85e:	80 85       	ldd	r24, Z+8	; 0x08
    e860:	84 fd       	sbrc	r24, 4
    e862:	02 c0       	rjmp	.+4      	; 0xe868 <fatfs_filinfo_list+0x28>
    e864:	9d e2       	ldi	r25, 0x2D	; 45
    e866:	01 c0       	rjmp	.+2      	; 0xe86a <fatfs_filinfo_list+0x2a>
    e868:	94 e4       	ldi	r25, 0x44	; 68
    e86a:	9e 8b       	std	Y+22, r25	; 0x16
    attrs[1] = (info->fattrib & AM_RDO) ? 'R' : '-';
    e86c:	80 fd       	sbrc	r24, 0
    e86e:	02 c0       	rjmp	.+4      	; 0xe874 <fatfs_filinfo_list+0x34>
    e870:	9d e2       	ldi	r25, 0x2D	; 45
    e872:	01 c0       	rjmp	.+2      	; 0xe876 <fatfs_filinfo_list+0x36>
    e874:	92 e5       	ldi	r25, 0x52	; 82
    e876:	9f 8b       	std	Y+23, r25	; 0x17
    attrs[2] = (info->fattrib & AM_HID) ? 'H' : '-';
    e878:	81 fd       	sbrc	r24, 1
    e87a:	02 c0       	rjmp	.+4      	; 0xe880 <fatfs_filinfo_list+0x40>
    e87c:	9d e2       	ldi	r25, 0x2D	; 45
    e87e:	01 c0       	rjmp	.+2      	; 0xe882 <fatfs_filinfo_list+0x42>
    e880:	98 e4       	ldi	r25, 0x48	; 72
    e882:	98 8f       	std	Y+24, r25	; 0x18
    attrs[3] = (info->fattrib & AM_SYS) ? 'S' : '-';
    e884:	82 fd       	sbrc	r24, 2
    e886:	02 c0       	rjmp	.+4      	; 0xe88c <fatfs_filinfo_list+0x4c>
    e888:	9d e2       	ldi	r25, 0x2D	; 45
    e88a:	01 c0       	rjmp	.+2      	; 0xe88e <fatfs_filinfo_list+0x4e>
    e88c:	93 e5       	ldi	r25, 0x53	; 83
    e88e:	99 8f       	std	Y+25, r25	; 0x19
    attrs[4] = (info->fattrib & AM_ARC) ? 'A' : '-';
    e890:	85 fd       	sbrc	r24, 5
    e892:	02 c0       	rjmp	.+4      	; 0xe898 <fatfs_filinfo_list+0x58>
    e894:	8d e2       	ldi	r24, 0x2D	; 45
    e896:	01 c0       	rjmp	.+2      	; 0xe89a <fatfs_filinfo_list+0x5a>
    e898:	81 e4       	ldi	r24, 0x41	; 65
    e89a:	8a 8f       	std	Y+26, r24	; 0x1a
    attrs[5] = 0;
    e89c:	1b 8e       	std	Y+27, r1	; 0x1b
    printf("%s %u/%02u/%02u %02u:%02u %9lu %s",
    e89e:	fd 01       	movw	r30, r26
    e8a0:	24 81       	ldd	r18, Z+4	; 0x04
    e8a2:	35 81       	ldd	r19, Z+5	; 0x05
    e8a4:	46 81       	ldd	r20, Z+6	; 0x06
    e8a6:	57 81       	ldd	r21, Z+7	; 0x07
    e8a8:	cd 01       	movw	r24, r26
    e8aa:	46 96       	adiw	r24, 0x16	; 22
    e8ac:	ed b7       	in	r30, 0x3d	; 61
    e8ae:	fe b7       	in	r31, 0x3e	; 62
    e8b0:	95 8b       	std	Z+21, r25	; 0x15
    e8b2:	84 8b       	std	Z+20, r24	; 0x14
    e8b4:	8d 91       	ld	r24, X+
    e8b6:	9d 91       	ld	r25, X+
    e8b8:	0d 90       	ld	r0, X+
    e8ba:	bc 91       	ld	r27, X
    e8bc:	a0 2d       	mov	r26, r0
    e8be:	80 8b       	std	Z+16, r24	; 0x10
    e8c0:	91 8b       	std	Z+17, r25	; 0x11
    e8c2:	a2 8b       	std	Z+18, r26	; 0x12
    e8c4:	b3 8b       	std	Z+19, r27	; 0x13
    e8c6:	ca 01       	movw	r24, r20
    e8c8:	45 e0       	ldi	r20, 0x05	; 5
    e8ca:	96 95       	lsr	r25
    e8cc:	87 95       	ror	r24
    e8ce:	4a 95       	dec	r20
    e8d0:	e1 f7       	brne	.-8      	; 0xe8ca <fatfs_filinfo_list+0x8a>
    e8d2:	8f 73       	andi	r24, 0x3F	; 63
    e8d4:	99 27       	eor	r25, r25
    e8d6:	97 87       	std	Z+15, r25	; 0x0f
    e8d8:	86 87       	std	Z+14, r24	; 0x0e
    e8da:	85 2f       	mov	r24, r21
    e8dc:	86 95       	lsr	r24
    e8de:	86 95       	lsr	r24
    e8e0:	86 95       	lsr	r24
    e8e2:	84 87       	std	Z+12, r24	; 0x0c
    e8e4:	15 86       	std	Z+13, r1	; 0x0d
    e8e6:	c9 01       	movw	r24, r18
    e8e8:	8f 71       	andi	r24, 0x1F	; 31
    e8ea:	99 27       	eor	r25, r25
    e8ec:	93 87       	std	Z+11, r25	; 0x0b
    e8ee:	82 87       	std	Z+10, r24	; 0x0a
    e8f0:	c9 01       	movw	r24, r18
    e8f2:	55 e0       	ldi	r21, 0x05	; 5
    e8f4:	96 95       	lsr	r25
    e8f6:	87 95       	ror	r24
    e8f8:	5a 95       	dec	r21
    e8fa:	e1 f7       	brne	.-8      	; 0xe8f4 <fatfs_filinfo_list+0xb4>
    e8fc:	8f 70       	andi	r24, 0x0F	; 15
    e8fe:	99 27       	eor	r25, r25
    e900:	91 87       	std	Z+9, r25	; 0x09
    e902:	80 87       	std	Z+8, r24	; 0x08
    e904:	23 2f       	mov	r18, r19
    e906:	33 27       	eor	r19, r19
    e908:	26 95       	lsr	r18
    e90a:	24 54       	subi	r18, 0x44	; 68
    e90c:	38 4f       	sbci	r19, 0xF8	; 248
    e90e:	37 83       	std	Z+7, r19	; 0x07
    e910:	26 83       	std	Z+6, r18	; 0x06
    e912:	ce 01       	movw	r24, r28
    e914:	46 96       	adiw	r24, 0x16	; 22
    e916:	95 83       	std	Z+5, r25	; 0x05
    e918:	84 83       	std	Z+4, r24	; 0x04
    e91a:	89 ed       	ldi	r24, 0xD9	; 217
    e91c:	97 e0       	ldi	r25, 0x07	; 7
    e91e:	a0 e0       	ldi	r26, 0x00	; 0
    e920:	81 83       	std	Z+1, r24	; 0x01
    e922:	92 83       	std	Z+2, r25	; 0x02
    e924:	a3 83       	std	Z+3, r26	; 0x03
    e926:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
        attrs,
        (info->fdate >> 9) + 1980, (info->fdate >> 5) & 15, info->fdate & 31,
        (info->ftime >> 11), (info->ftime >> 5) & 63,
        info->fsize, info->fname);
    printf("\n");
    e92a:	87 ed       	ldi	r24, 0xD7	; 215
    e92c:	97 e0       	ldi	r25, 0x07	; 7
    e92e:	a0 e0       	ldi	r26, 0x00	; 0
    e930:	ed b7       	in	r30, 0x3d	; 61
    e932:	fe b7       	in	r31, 0x3e	; 62
    e934:	81 83       	std	Z+1, r24	; 0x01
    e936:	92 83       	std	Z+2, r25	; 0x02
    e938:	a3 83       	std	Z+3, r26	; 0x03
    e93a:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
}
    e93e:	6b 96       	adiw	r28, 0x1b	; 27
    e940:	e2 e0       	ldi	r30, 0x02	; 2
    e942:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__epilogue_restores__+0x20>

0000e946 <fatfs_help>:

/// @brief Display FatFs test diagnostics help menu.
/// @return  void
MEMSPACE
void fatfs_help( int full)
{
    e946:	cf 93       	push	r28
    e948:	df 93       	push	r29
    e94a:	00 d0       	rcall	.+0      	; 0xe94c <fatfs_help+0x6>
    e94c:	1f 92       	push	r1
    e94e:	ec 01       	movw	r28, r24
    printf("fatfs help\n");
    e950:	8c e1       	ldi	r24, 0x1C	; 28
    e952:	9b e0       	ldi	r25, 0x0B	; 11
    e954:	a0 e0       	ldi	r26, 0x00	; 0
    e956:	ed b7       	in	r30, 0x3d	; 61
    e958:	fe b7       	in	r31, 0x3e	; 62
    e95a:	81 83       	std	Z+1, r24	; 0x01
    e95c:	92 83       	std	Z+2, r25	; 0x02
    e95e:	a3 83       	std	Z+3, r26	; 0x03
    e960:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    
    if(full)
    e964:	cd 2b       	or	r28, r29
    e966:	51 f0       	breq	.+20     	; 0xe97c <fatfs_help+0x36>
    {
        printf(
    e968:	80 ea       	ldi	r24, 0xA0	; 160
    e96a:	9a e0       	ldi	r25, 0x0A	; 10
    e96c:	a0 e0       	ldi	r26, 0x00	; 0
    e96e:	ed b7       	in	r30, 0x3d	; 61
    e970:	fe b7       	in	r31, 0x3e	; 62
    e972:	81 83       	std	Z+1, r24	; 0x01
    e974:	92 83       	std	Z+2, r25	; 0x02
    e976:	a3 83       	std	Z+3, r26	; 0x03
    e978:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
#endif
        "\n"
        );
    }
        
}
    e97c:	cd b7       	in	r28, 0x3d	; 61
    e97e:	de b7       	in	r29, 0x3e	; 62
    e980:	23 96       	adiw	r28, 0x03	; 3
    e982:	e2 e0       	ldi	r30, 0x02	; 2
    e984:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__epilogue_restores__+0x20>

0000e988 <fatfs_ls>:
///
/// @see fatfs_filinfo_list().
/// @return  void.
MEMSPACE
void fatfs_ls(char *name)
{
    e988:	a5 e5       	ldi	r26, 0x55	; 85
    e98a:	b2 e0       	ldi	r27, 0x02	; 2
    e98c:	ea ec       	ldi	r30, 0xCA	; 202
    e98e:	f4 e7       	ldi	r31, 0x74	; 116
    e990:	0c 94 23 e5 	jmp	0x1ca46	; 0x1ca46 <__prologue_saves__+0x14>
    e994:	8e 01       	movw	r16, r28
    e996:	0e 5d       	subi	r16, 0xDE	; 222
    e998:	1e 4f       	sbci	r17, 0xFE	; 254
    FILINFO fno;
    DIR dirs;                                     /* Directory object */
    FATFS *fs;
    char buff[256]; 

    if(!name || !*name)
    e99a:	00 97       	sbiw	r24, 0x00	; 0
    e99c:	21 f0       	breq	.+8      	; 0xe9a6 <fatfs_ls+0x1e>
    e99e:	fc 01       	movw	r30, r24
    e9a0:	20 81       	ld	r18, Z
    e9a2:	21 11       	cpse	r18, r1
    e9a4:	03 c0       	rjmp	.+6      	; 0xe9ac <fatfs_ls+0x24>
    {
        strcpy(buff,".");
    e9a6:	6e e0       	ldi	r22, 0x0E	; 14
    e9a8:	72 e1       	ldi	r23, 0x12	; 18
    e9aa:	01 c0       	rjmp	.+2      	; 0xe9ae <fatfs_ls+0x26>
    }
    else
    {
        strcpy(buff,name);
    e9ac:	bc 01       	movw	r22, r24
    e9ae:	c8 01       	movw	r24, r16
    e9b0:	0e 94 e5 32 	call	0x65ca	; 0x65ca <strcpy>
    }
    printf("Listing:[%s]\n",buff);
    e9b4:	ed b7       	in	r30, 0x3d	; 61
    e9b6:	fe b7       	in	r31, 0x3e	; 62
    e9b8:	15 83       	std	Z+5, r17	; 0x05
    e9ba:	04 83       	std	Z+4, r16	; 0x04
    e9bc:	80 e1       	ldi	r24, 0x10	; 16
    e9be:	9a e0       	ldi	r25, 0x0A	; 10
    e9c0:	a0 e0       	ldi	r26, 0x00	; 0
    e9c2:	81 83       	std	Z+1, r24	; 0x01
    e9c4:	92 83       	std	Z+2, r25	; 0x02
    e9c6:	a3 83       	std	Z+3, r26	; 0x03
    e9c8:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>

    res = f_opendir(&dirs, buff);
    e9cc:	b8 01       	movw	r22, r16
    e9ce:	ce 01       	movw	r24, r28
    e9d0:	8e 5d       	subi	r24, 0xDE	; 222
    e9d2:	9d 4f       	sbci	r25, 0xFD	; 253
    e9d4:	0e 94 25 65 	call	0xca4a	; 0xca4a <f_opendir>
    if (res) { put_rc(res); return; }
    e9d8:	00 97       	sbiw	r24, 0x00	; 0
    e9da:	11 f0       	breq	.+4      	; 0xe9e0 <fatfs_ls+0x58>
    e9dc:	23 dd       	rcall	.-1466   	; 0xe424 <put_rc>
    p1 = s1 = s2 = 0;
    e9de:	8a c0       	rjmp	.+276    	; 0xeaf4 <fatfs_ls+0x16c>
    e9e0:	c0 5b       	subi	r28, 0xB0	; 176
    e9e2:	dd 4f       	sbci	r29, 0xFD	; 253
    e9e4:	18 82       	st	Y, r1
    e9e6:	19 82       	std	Y+1, r1	; 0x01
    e9e8:	1a 82       	std	Y+2, r1	; 0x02
    e9ea:	1b 82       	std	Y+3, r1	; 0x03
    e9ec:	c0 55       	subi	r28, 0x50	; 80
    e9ee:	d2 40       	sbci	r29, 0x02	; 2
    e9f0:	c1 2c       	mov	r12, r1
    e9f2:	d1 2c       	mov	r13, r1
    e9f4:	e1 2c       	mov	r14, r1
    while(1)
    {
        res = f_readdir(&dirs, &fno);
    e9f6:	f1 2c       	mov	r15, r1
    e9f8:	be 01       	movw	r22, r28
    e9fa:	64 5f       	subi	r22, 0xF4	; 244
    e9fc:	7f 4f       	sbci	r23, 0xFF	; 255
    e9fe:	ce 01       	movw	r24, r28
    ea00:	8e 5d       	subi	r24, 0xDE	; 222
    ea02:	9d 4f       	sbci	r25, 0xFD	; 253
    ea04:	0e 94 ab 65 	call	0xcb56	; 0xcb56 <f_readdir>
        if ((res != FR_OK) || !fno.fname[0]) break;
    ea08:	89 2b       	or	r24, r25
    ea0a:	49 f5       	brne	.+82     	; 0xea5e <fatfs_ls+0xd6>
    ea0c:	8a a1       	ldd	r24, Y+34	; 0x22
    ea0e:	88 23       	and	r24, r24
        if (fno.fattrib & AM_DIR)
    ea10:	31 f1       	breq	.+76     	; 0xea5e <fatfs_ls+0xd6>
    ea12:	8c 89       	ldd	r24, Y+20	; 0x14
    ea14:	84 ff       	sbrs	r24, 4
        {
            s2++;
    ea16:	04 c0       	rjmp	.+8      	; 0xea20 <fatfs_ls+0x98>
    ea18:	ff ef       	ldi	r31, 0xFF	; 255
    ea1a:	cf 1a       	sub	r12, r31
    ea1c:	df 0a       	sbc	r13, r31
        }
        else
        {
            s1++; p1 += fno.fsize;
    ea1e:	1b c0       	rjmp	.+54     	; 0xea56 <fatfs_ls+0xce>
    ea20:	8f ef       	ldi	r24, 0xFF	; 255
    ea22:	e8 1a       	sub	r14, r24
    ea24:	f8 0a       	sbc	r15, r24
    ea26:	4c 85       	ldd	r20, Y+12	; 0x0c
    ea28:	5d 85       	ldd	r21, Y+13	; 0x0d
    ea2a:	6e 85       	ldd	r22, Y+14	; 0x0e
    ea2c:	7f 85       	ldd	r23, Y+15	; 0x0f
    ea2e:	c0 5b       	subi	r28, 0xB0	; 176
    ea30:	dd 4f       	sbci	r29, 0xFD	; 253
    ea32:	88 81       	ld	r24, Y
    ea34:	99 81       	ldd	r25, Y+1	; 0x01
    ea36:	aa 81       	ldd	r26, Y+2	; 0x02
    ea38:	bb 81       	ldd	r27, Y+3	; 0x03
    ea3a:	c0 55       	subi	r28, 0x50	; 80
    ea3c:	d2 40       	sbci	r29, 0x02	; 2
    ea3e:	84 0f       	add	r24, r20
    ea40:	95 1f       	adc	r25, r21
    ea42:	a6 1f       	adc	r26, r22
    ea44:	b7 1f       	adc	r27, r23
    ea46:	c0 5b       	subi	r28, 0xB0	; 176
    ea48:	dd 4f       	sbci	r29, 0xFD	; 253
    ea4a:	88 83       	st	Y, r24
    ea4c:	99 83       	std	Y+1, r25	; 0x01
    ea4e:	aa 83       	std	Y+2, r26	; 0x02
    ea50:	bb 83       	std	Y+3, r27	; 0x03
    ea52:	c0 55       	subi	r28, 0x50	; 80
        }
        fatfs_filinfo_list(&fno);
    ea54:	d2 40       	sbci	r29, 0x02	; 2
    ea56:	ce 01       	movw	r24, r28
    ea58:	0c 96       	adiw	r24, 0x0c	; 12
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    ea5a:	f2 de       	rcall	.-540    	; 0xe840 <fatfs_filinfo_list>
    printf("%4u File(s),%10lu bytes total\n%4u Dir(s)", s1, p1, s2);
    ea5c:	cd cf       	rjmp	.-102    	; 0xe9f8 <fatfs_ls+0x70>
    ea5e:	ed b7       	in	r30, 0x3d	; 61
    ea60:	fe b7       	in	r31, 0x3e	; 62
    ea62:	d3 86       	std	Z+11, r13	; 0x0b
    ea64:	c2 86       	std	Z+10, r12	; 0x0a
    ea66:	c0 5b       	subi	r28, 0xB0	; 176
    ea68:	dd 4f       	sbci	r29, 0xFD	; 253
    ea6a:	88 81       	ld	r24, Y
    ea6c:	99 81       	ldd	r25, Y+1	; 0x01
    ea6e:	aa 81       	ldd	r26, Y+2	; 0x02
    ea70:	bb 81       	ldd	r27, Y+3	; 0x03
    ea72:	c0 55       	subi	r28, 0x50	; 80
    ea74:	d2 40       	sbci	r29, 0x02	; 2
    ea76:	86 83       	std	Z+6, r24	; 0x06
    ea78:	97 83       	std	Z+7, r25	; 0x07
    ea7a:	a0 87       	std	Z+8, r26	; 0x08
    ea7c:	b1 87       	std	Z+9, r27	; 0x09
    ea7e:	f5 82       	std	Z+5, r15	; 0x05
    ea80:	e4 82       	std	Z+4, r14	; 0x04
    ea82:	87 ee       	ldi	r24, 0xE7	; 231
    ea84:	99 e0       	ldi	r25, 0x09	; 9
    ea86:	a0 e0       	ldi	r26, 0x00	; 0
    ea88:	81 83       	std	Z+1, r24	; 0x01
    ea8a:	92 83       	std	Z+2, r25	; 0x02
    ea8c:	a3 83       	std	Z+3, r26	; 0x03
    ea8e:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    if (f_getfree(buff, (DWORD*)&p1, &fs) == FR_OK)
    ea92:	ae 01       	movw	r20, r28
    ea94:	4c 5a       	subi	r20, 0xAC	; 172
    ea96:	5d 4f       	sbci	r21, 0xFD	; 253
    ea98:	be 01       	movw	r22, r28
    ea9a:	60 5b       	subi	r22, 0xB0	; 176
    ea9c:	7d 4f       	sbci	r23, 0xFD	; 253
    ea9e:	c8 01       	movw	r24, r16
    eaa0:	0e 94 2d 66 	call	0xcc5a	; 0xcc5a <f_getfree>
    eaa4:	89 2b       	or	r24, r25
        printf(", %10luK bytes free\n", p1 * fs->csize / 2);
    eaa6:	31 f5       	brne	.+76     	; 0xeaf4 <fatfs_ls+0x16c>
    eaa8:	cc 5a       	subi	r28, 0xAC	; 172
    eaaa:	dd 4f       	sbci	r29, 0xFD	; 253
    eaac:	e8 81       	ld	r30, Y
    eaae:	f9 81       	ldd	r31, Y+1	; 0x01
    eab0:	c4 55       	subi	r28, 0x54	; 84
    eab2:	d2 40       	sbci	r29, 0x02	; 2
    eab4:	a1 85       	ldd	r26, Z+9	; 0x09
    eab6:	b2 85       	ldd	r27, Z+10	; 0x0a
    eab8:	c0 5b       	subi	r28, 0xB0	; 176
    eaba:	dd 4f       	sbci	r29, 0xFD	; 253
    eabc:	28 81       	ld	r18, Y
    eabe:	39 81       	ldd	r19, Y+1	; 0x01
    eac0:	4a 81       	ldd	r20, Y+2	; 0x02
    eac2:	5b 81       	ldd	r21, Y+3	; 0x03
    eac4:	c0 55       	subi	r28, 0x50	; 80
    eac6:	d2 40       	sbci	r29, 0x02	; 2
    eac8:	0e 94 f9 e4 	call	0x1c9f2	; 0x1c9f2 <__muluhisi3>
    eacc:	22 e0       	ldi	r18, 0x02	; 2
    eace:	30 e0       	ldi	r19, 0x00	; 0
    ead0:	40 e0       	ldi	r20, 0x00	; 0
    ead2:	50 e0       	ldi	r21, 0x00	; 0
    ead4:	0e 94 b9 e4 	call	0x1c972	; 0x1c972 <__divmodsi4>
    ead8:	ed b7       	in	r30, 0x3d	; 61
    eada:	fe b7       	in	r31, 0x3e	; 62
    eadc:	24 83       	std	Z+4, r18	; 0x04
    eade:	35 83       	std	Z+5, r19	; 0x05
    eae0:	46 83       	std	Z+6, r20	; 0x06
    eae2:	57 83       	std	Z+7, r21	; 0x07
    eae4:	82 ed       	ldi	r24, 0xD2	; 210
    eae6:	99 e0       	ldi	r25, 0x09	; 9
    eae8:	a0 e0       	ldi	r26, 0x00	; 0
    eaea:	81 83       	std	Z+1, r24	; 0x01
    eaec:	92 83       	std	Z+2, r25	; 0x02
    eaee:	a3 83       	std	Z+3, r26	; 0x03
    eaf0:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
}
    eaf4:	cb 5a       	subi	r28, 0xAB	; 171
    eaf6:	dd 4f       	sbci	r29, 0xFD	; 253
    eaf8:	e8 e0       	ldi	r30, 0x08	; 8
    eafa:	0c 94 3f e5 	jmp	0x1ca7e	; 0x1ca7e <__epilogue_restores__+0x14>

0000eafe <mmc_test>:
/// - Assumes the device is formatted
///
/// @return void
MEMSPACE
void mmc_test(void)
{
    eafe:	00 d0       	rcall	.+0      	; 0xeb00 <mmc_test+0x2>
    eb00:	1f 92       	push	r1
    printf("==============================\n");
    eb02:	80 e7       	ldi	r24, 0x70	; 112
    eb04:	9a e0       	ldi	r25, 0x0A	; 10
    eb06:	a0 e0       	ldi	r26, 0x00	; 0
    eb08:	ed b7       	in	r30, 0x3d	; 61
    eb0a:	fe b7       	in	r31, 0x3e	; 62
    eb0c:	81 83       	std	Z+1, r24	; 0x01
    eb0e:	92 83       	std	Z+2, r25	; 0x02
    eb10:	a3 83       	std	Z+3, r26	; 0x03
    eb12:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    printf("START MMC TEST\n");
    eb16:	80 e6       	ldi	r24, 0x60	; 96
    eb18:	9a e0       	ldi	r25, 0x0A	; 10
    eb1a:	a0 e0       	ldi	r26, 0x00	; 0
    eb1c:	ed b7       	in	r30, 0x3d	; 61
    eb1e:	fe b7       	in	r31, 0x3e	; 62
    eb20:	81 83       	std	Z+1, r24	; 0x01
    eb22:	92 83       	std	Z+2, r25	; 0x02
    eb24:	a3 83       	std	Z+3, r26	; 0x03
    eb26:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    fatfs_status("/");
    eb2a:	84 ec       	ldi	r24, 0xC4	; 196
    eb2c:	97 e0       	ldi	r25, 0x07	; 7
    eb2e:	0e dd       	rcall	.-1508   	; 0xe54c <fatfs_status>
    printf("MMC Directory List\n");
    eb30:	8c e4       	ldi	r24, 0x4C	; 76
    eb32:	9a e0       	ldi	r25, 0x0A	; 10
    eb34:	a0 e0       	ldi	r26, 0x00	; 0
    eb36:	ed b7       	in	r30, 0x3d	; 61
    eb38:	fe b7       	in	r31, 0x3e	; 62
    eb3a:	81 83       	std	Z+1, r24	; 0x01
    eb3c:	92 83       	std	Z+2, r25	; 0x02
    eb3e:	a3 83       	std	Z+3, r26	; 0x03
    eb40:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    fatfs_ls("/");
    eb44:	84 ec       	ldi	r24, 0xC4	; 196
    eb46:	97 e0       	ldi	r25, 0x07	; 7
    eb48:	1f df       	rcall	.-450    	; 0xe988 <fatfs_ls>
    fatfs_cat("test3.txt");
    fatfs_ls("");
#endif
#endif

    printf("END MMC TEST\n");
    eb4a:	8e e3       	ldi	r24, 0x3E	; 62
    eb4c:	9a e0       	ldi	r25, 0x0A	; 10
    eb4e:	a0 e0       	ldi	r26, 0x00	; 0
    eb50:	ed b7       	in	r30, 0x3d	; 61
    eb52:	fe b7       	in	r31, 0x3e	; 62
    eb54:	81 83       	std	Z+1, r24	; 0x01
    eb56:	92 83       	std	Z+2, r25	; 0x02
    eb58:	a3 83       	std	Z+3, r26	; 0x03
    eb5a:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    printf("==============================\n");
    eb5e:	8e e1       	ldi	r24, 0x1E	; 30
    eb60:	9a e0       	ldi	r25, 0x0A	; 10
    eb62:	a0 e0       	ldi	r26, 0x00	; 0
    eb64:	ed b7       	in	r30, 0x3d	; 61
    eb66:	fe b7       	in	r31, 0x3e	; 62
    eb68:	81 83       	std	Z+1, r24	; 0x01
    eb6a:	92 83       	std	Z+2, r25	; 0x02
    eb6c:	a3 83       	std	Z+3, r26	; 0x03
    eb6e:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
}
    eb72:	0f 90       	pop	r0
    eb74:	0f 90       	pop	r0
    eb76:	0f 90       	pop	r0
    eb78:	08 95       	ret

0000eb7a <fatfs_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int fatfs_tests(int argc,char *argv[])
{
    eb7a:	ef 92       	push	r14
    eb7c:	ff 92       	push	r15
    eb7e:	0f 93       	push	r16
    eb80:	1f 93       	push	r17
    eb82:	cf 93       	push	r28
    eb84:	df 93       	push	r29
    eb86:	ad b7       	in	r26, 0x3d	; 61
    eb88:	be b7       	in	r27, 0x3e	; 62
    eb8a:	17 97       	sbiw	r26, 0x07	; 7
    eb8c:	0f b6       	in	r0, 0x3f	; 63
    eb8e:	f8 94       	cli
    eb90:	be bf       	out	0x3e, r27	; 62
    eb92:	0f be       	out	0x3f, r0	; 63
    eb94:	ad bf       	out	0x3d, r26	; 61
    char *ptr;
    int ind;


    ind = 0;
    ptr = argv[ind++];
    eb96:	fb 01       	movw	r30, r22
    eb98:	20 81       	ld	r18, Z
    eb9a:	31 81       	ldd	r19, Z+1	; 0x01

    if(!ptr)
    eb9c:	21 15       	cp	r18, r1
    eb9e:	31 05       	cpc	r19, r1
    eba0:	19 f4       	brne	.+6      	; 0xeba8 <fatfs_tests+0x2e>
        return(0);
    eba2:	80 e0       	ldi	r24, 0x00	; 0
    eba4:	90 e0       	ldi	r25, 0x00	; 0
    eba6:	73 c0       	rjmp	.+230    	; 0xec8e <fatfs_tests+0x114>
    eba8:	eb 01       	movw	r28, r22
    ebaa:	8c 01       	movw	r16, r24

// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCH(ptr,"fatfs") )
    ebac:	60 ef       	ldi	r22, 0xF0	; 240
    ebae:	77 e0       	ldi	r23, 0x07	; 7
    ebb0:	c9 01       	movw	r24, r18
    ebb2:	0e 94 dd 33 	call	0x67ba	; 0x67ba <MATCH>
    ebb6:	89 2b       	or	r24, r25
    ebb8:	a1 f3       	breq	.-24     	; 0xeba2 <fatfs_tests+0x28>
    {
        ptr = argv[ind++];
    ebba:	ea 80       	ldd	r14, Y+2	; 0x02
    ebbc:	fb 80       	ldd	r15, Y+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
    ebbe:	e1 14       	cp	r14, r1
    ebc0:	f1 04       	cpc	r15, r1
    ebc2:	21 f4       	brne	.+8      	; 0xebcc <fatfs_tests+0x52>
        {
            fatfs_help(1);
    ebc4:	81 e0       	ldi	r24, 0x01	; 1
    ebc6:	90 e0       	ldi	r25, 0x00	; 0
    ebc8:	be de       	rcall	.-644    	; 0xe946 <fatfs_help>
    ebca:	5f c0       	rjmp	.+190    	; 0xec8a <fatfs_tests+0x110>
// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCH(ptr,"fatfs") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
    ebcc:	6f eb       	ldi	r22, 0xBF	; 191
    ebce:	75 e1       	ldi	r23, 0x15	; 21
    ebd0:	c7 01       	movw	r24, r14
    ebd2:	0e 94 dd 33 	call	0x67ba	; 0x67ba <MATCH>
    ebd6:	89 2b       	or	r24, r25
    ebd8:	a9 f7       	brne	.-22     	; 0xebc4 <fatfs_tests+0x4a>
    {
        return(0);
    }
#endif

    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
    ebda:	98 01       	movw	r18, r16
    ebdc:	42 e0       	ldi	r20, 0x02	; 2
    ebde:	50 e0       	ldi	r21, 0x00	; 0
    ebe0:	66 ef       	ldi	r22, 0xF6	; 246
    ebe2:	77 e0       	ldi	r23, 0x07	; 7
    ebe4:	c7 01       	movw	r24, r14
    ebe6:	0e 94 05 34 	call	0x680a	; 0x680a <MATCHARGS>
    ebea:	89 2b       	or	r24, r25
    ebec:	31 f1       	breq	.+76     	; 0xec3a <fatfs_tests+0xc0>
    {
        int i;
        int args = 0;
        printf("ind:%d,argc:%d\n", ind, argc);
    ebee:	ed b7       	in	r30, 0x3d	; 61
    ebf0:	fe b7       	in	r31, 0x3e	; 62
    ebf2:	17 83       	std	Z+7, r17	; 0x07
    ebf4:	06 83       	std	Z+6, r16	; 0x06
    ebf6:	82 e0       	ldi	r24, 0x02	; 2
    ebf8:	90 e0       	ldi	r25, 0x00	; 0
    ebfa:	95 83       	std	Z+5, r25	; 0x05
    ebfc:	84 83       	std	Z+4, r24	; 0x04
    ebfe:	80 e9       	ldi	r24, 0x90	; 144
    ec00:	9a e0       	ldi	r25, 0x0A	; 10
    ec02:	a0 e0       	ldi	r26, 0x00	; 0
    ec04:	81 83       	std	Z+1, r24	; 0x01
    ec06:	92 83       	std	Z+2, r25	; 0x02
    ec08:	a3 83       	std	Z+3, r26	; 0x03
    ec0a:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    ec0e:	7e 01       	movw	r14, r28
    ec10:	f4 e0       	ldi	r31, 0x04	; 4
    ec12:	ef 0e       	add	r14, r31
    ec14:	f1 1c       	adc	r15, r1
        for(i=ind;i<argc;++i)
    ec16:	c2 e0       	ldi	r28, 0x02	; 2
    ec18:	d0 e0       	ldi	r29, 0x00	; 0
    ec1a:	c0 17       	cp	r28, r16
    ec1c:	d1 07       	cpc	r29, r17
    ec1e:	3c f4       	brge	.+14     	; 0xec2e <fatfs_tests+0xb4>
        {
            //printf("%d:%s\n", i, argv[i]);
            fatfs_ls(argv[i]);
    ec20:	f7 01       	movw	r30, r14
    ec22:	81 91       	ld	r24, Z+
    ec24:	91 91       	ld	r25, Z+
    ec26:	7f 01       	movw	r14, r30
    ec28:	af de       	rcall	.-674    	; 0xe988 <fatfs_ls>
    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
    {
        int i;
        int args = 0;
        printf("ind:%d,argc:%d\n", ind, argc);
        for(i=ind;i<argc;++i)
    ec2a:	21 96       	adiw	r28, 0x01	; 1
    ec2c:	f6 cf       	rjmp	.-20     	; 0xec1a <fatfs_tests+0xa0>
        {
            //printf("%d:%s\n", i, argv[i]);
            fatfs_ls(argv[i]);
            ++args;
        }
        if(!args)
    ec2e:	22 97       	sbiw	r28, 0x02	; 2
        {
            fatfs_ls("");
    ec30:	61 f5       	brne	.+88     	; 0xec8a <fatfs_tests+0x110>
    ec32:	8f ed       	ldi	r24, 0xDF	; 223
    ec34:	96 e1       	ldi	r25, 0x16	; 22
    ec36:	a8 de       	rcall	.-688    	; 0xe988 <fatfs_ls>
        }
        return(1);
    }

    if (MATCHARGS(ptr,"mmc_test",(ind+0),argc ))
    ec38:	28 c0       	rjmp	.+80     	; 0xec8a <fatfs_tests+0x110>
    ec3a:	98 01       	movw	r18, r16
    ec3c:	42 e0       	ldi	r20, 0x02	; 2
    ec3e:	50 e0       	ldi	r21, 0x00	; 0
    ec40:	69 ef       	ldi	r22, 0xF9	; 249
    ec42:	77 e0       	ldi	r23, 0x07	; 7
    ec44:	c7 01       	movw	r24, r14
    ec46:	0e 94 05 34 	call	0x680a	; 0x680a <MATCHARGS>
    {
        mmc_test();
    ec4a:	89 2b       	or	r24, r25
    ec4c:	11 f0       	breq	.+4      	; 0xec52 <fatfs_tests+0xd8>
    ec4e:	57 df       	rcall	.-338    	; 0xeafe <mmc_test>
        return(1);
    }

    if (MATCHARGS(ptr,"mmc_init",(ind+0),argc))
    ec50:	1c c0       	rjmp	.+56     	; 0xec8a <fatfs_tests+0x110>
    ec52:	98 01       	movw	r18, r16
    ec54:	42 e0       	ldi	r20, 0x02	; 2
    ec56:	50 e0       	ldi	r21, 0x00	; 0
    ec58:	62 e0       	ldi	r22, 0x02	; 2
    ec5a:	78 e0       	ldi	r23, 0x08	; 8
    ec5c:	c7 01       	movw	r24, r14
    ec5e:	0e 94 05 34 	call	0x680a	; 0x680a <MATCHARGS>
    {
        mmc_init(1);
    ec62:	89 2b       	or	r24, r25
    ec64:	21 f0       	breq	.+8      	; 0xec6e <fatfs_tests+0xf4>
    ec66:	81 e0       	ldi	r24, 0x01	; 1
    ec68:	90 e0       	ldi	r25, 0x00	; 0
    ec6a:	b9 da       	rcall	.-2702   	; 0xe1de <mmc_init>
        return(1);
    }

    if (MATCHARGS(ptr,"status", (ind + 1), argc))
    ec6c:	0e c0       	rjmp	.+28     	; 0xec8a <fatfs_tests+0x110>
    ec6e:	98 01       	movw	r18, r16
    ec70:	43 e0       	ldi	r20, 0x03	; 3
    ec72:	50 e0       	ldi	r21, 0x00	; 0
    ec74:	6b e0       	ldi	r22, 0x0B	; 11
    ec76:	78 e0       	ldi	r23, 0x08	; 8
    ec78:	c7 01       	movw	r24, r14
    ec7a:	0e 94 05 34 	call	0x680a	; 0x680a <MATCHARGS>
    ec7e:	89 2b       	or	r24, r25
    {
        fatfs_status(argv[ind]);
    ec80:	09 f4       	brne	.+2      	; 0xec84 <fatfs_tests+0x10a>
    ec82:	8f cf       	rjmp	.-226    	; 0xeba2 <fatfs_tests+0x28>
    ec84:	8c 81       	ldd	r24, Y+4	; 0x04
    ec86:	9d 81       	ldd	r25, Y+5	; 0x05
        }
        if(!args)
        {
            fatfs_ls("");
        }
        return(1);
    ec88:	61 dc       	rcall	.-1854   	; 0xe54c <fatfs_status>
    ec8a:	81 e0       	ldi	r24, 0x01	; 1
        return(1);
    }
#endif

    return(0);
}
    ec8c:	90 e0       	ldi	r25, 0x00	; 0
    ec8e:	cd b7       	in	r28, 0x3d	; 61
    ec90:	de b7       	in	r29, 0x3e	; 62
    ec92:	27 96       	adiw	r28, 0x07	; 7
    ec94:	e6 e0       	ldi	r30, 0x06	; 6
    ec96:	0c 94 41 e5 	jmp	0x1ca82	; 0x1ca82 <__epilogue_restores__+0x18>

0000ec9a <fatfs_getc>:
    {
        errno = fatfs_to_errno(rc);
        return(-1);
    }
    return(0);
}
    ec9a:	8f 92       	push	r8
    ec9c:	9f 92       	push	r9
    ec9e:	af 92       	push	r10
    eca0:	bf 92       	push	r11
    eca2:	ef 92       	push	r14
    eca4:	ff 92       	push	r15
    eca6:	0f 93       	push	r16
    eca8:	1f 93       	push	r17
    ecaa:	cf 93       	push	r28
    ecac:	df 93       	push	r29
    ecae:	00 d0       	rcall	.+0      	; 0xecb0 <fatfs_getc+0x16>
    ecb0:	1f 92       	push	r1
    ecb2:	cd b7       	in	r28, 0x3d	; 61
    ecb4:	de b7       	in	r29, 0x3e	; 62
    ecb6:	10 92 56 1c 	sts	0x1C56, r1	; 0x801c56 <errno+0x1>
    ecba:	10 92 55 1c 	sts	0x1C55, r1	; 0x801c55 <errno>
    ecbe:	00 97       	sbiw	r24, 0x00	; 0
    ecc0:	39 f4       	brne	.+14     	; 0xecd0 <fatfs_getc+0x36>
    ecc2:	89 e0       	ldi	r24, 0x09	; 9
    ecc4:	90 e0       	ldi	r25, 0x00	; 0
    ecc6:	90 93 56 1c 	sts	0x1C56, r25	; 0x801c56 <errno+0x1>
    ecca:	80 93 55 1c 	sts	0x1C55, r24	; 0x801c55 <errno>
    ecce:	2f c0       	rjmp	.+94     	; 0xed2e <fatfs_getc+0x94>
    ecd0:	fc 01       	movw	r30, r24
    ecd2:	e4 84       	ldd	r14, Z+12	; 0x0c
    ecd4:	f5 84       	ldd	r15, Z+13	; 0x0d
    ecd6:	e1 14       	cp	r14, r1
    ecd8:	f1 04       	cpc	r15, r1
    ecda:	99 f3       	breq	.-26     	; 0xecc2 <fatfs_getc+0x28>
    ecdc:	8c 01       	movw	r16, r24
    ecde:	9e 01       	movw	r18, r28
    ece0:	2f 5f       	subi	r18, 0xFF	; 255
    ece2:	3f 4f       	sbci	r19, 0xFF	; 255
    ece4:	41 e0       	ldi	r20, 0x01	; 1
    ece6:	50 e0       	ldi	r21, 0x00	; 0
    ece8:	be 01       	movw	r22, r28
    ecea:	6d 5f       	subi	r22, 0xFD	; 253
    ecec:	7f 4f       	sbci	r23, 0xFF	; 255
    ecee:	c7 01       	movw	r24, r14
    ecf0:	0e 94 5d 5d 	call	0xbaba	; 0xbaba <f_read>
    ecf4:	00 97       	sbiw	r24, 0x00	; 0
    ecf6:	31 f4       	brne	.+12     	; 0xed04 <fatfs_getc+0x6a>
    ecf8:	29 81       	ldd	r18, Y+1	; 0x01
    ecfa:	3a 81       	ldd	r19, Y+2	; 0x02
    ecfc:	21 30       	cpi	r18, 0x01	; 1
    ecfe:	31 05       	cpc	r19, r1
    ed00:	c9 f0       	breq	.+50     	; 0xed34 <fatfs_getc+0x9a>
    ed02:	03 c0       	rjmp	.+6      	; 0xed0a <fatfs_getc+0x70>
    ed04:	84 31       	cpi	r24, 0x14	; 20
    ed06:	91 05       	cpc	r25, r1
    ed08:	40 f4       	brcc	.+16     	; 0xed1a <fatfs_getc+0x80>
    ed0a:	fc 01       	movw	r30, r24
    ed0c:	ec 53       	subi	r30, 0x3C	; 60
    ed0e:	f5 4f       	sbci	r31, 0xF5	; 245
    ed10:	80 81       	ld	r24, Z
    ed12:	08 2e       	mov	r0, r24
    ed14:	00 0c       	add	r0, r0
    ed16:	99 0b       	sbc	r25, r25
    ed18:	02 c0       	rjmp	.+4      	; 0xed1e <fatfs_getc+0x84>
    ed1a:	83 e2       	ldi	r24, 0x23	; 35
    ed1c:	90 e0       	ldi	r25, 0x00	; 0
    ed1e:	90 93 56 1c 	sts	0x1C56, r25	; 0x801c56 <errno+0x1>
    ed22:	80 93 55 1c 	sts	0x1C55, r24	; 0x801c55 <errno>
    ed26:	f8 01       	movw	r30, r16
    ed28:	83 81       	ldd	r24, Z+3	; 0x03
    ed2a:	80 62       	ori	r24, 0x20	; 32
    ed2c:	83 83       	std	Z+3, r24	; 0x03
    ed2e:	8f ef       	ldi	r24, 0xFF	; 255
    ed30:	9f ef       	ldi	r25, 0xFF	; 255
    ed32:	28 c0       	rjmp	.+80     	; 0xed84 <fatfs_getc+0xea>
    ed34:	8b 81       	ldd	r24, Y+3	; 0x03
    ed36:	8d 30       	cpi	r24, 0x0D	; 13
    ed38:	01 f5       	brne	.+64     	; 0xed7a <fatfs_getc+0xe0>
    ed3a:	f7 01       	movw	r30, r14
    ed3c:	80 88       	ldd	r8, Z+16	; 0x10
    ed3e:	91 88       	ldd	r9, Z+17	; 0x11
    ed40:	a2 88       	ldd	r10, Z+18	; 0x12
    ed42:	b3 88       	ldd	r11, Z+19	; 0x13
    ed44:	9e 01       	movw	r18, r28
    ed46:	2f 5f       	subi	r18, 0xFF	; 255
    ed48:	3f 4f       	sbci	r19, 0xFF	; 255
    ed4a:	41 e0       	ldi	r20, 0x01	; 1
    ed4c:	50 e0       	ldi	r21, 0x00	; 0
    ed4e:	be 01       	movw	r22, r28
    ed50:	6d 5f       	subi	r22, 0xFD	; 253
    ed52:	7f 4f       	sbci	r23, 0xFF	; 255
    ed54:	c7 01       	movw	r24, r14
    ed56:	0e 94 5d 5d 	call	0xbaba	; 0xbaba <f_read>
    ed5a:	89 2b       	or	r24, r25
    ed5c:	89 f4       	brne	.+34     	; 0xed80 <fatfs_getc+0xe6>
    ed5e:	89 81       	ldd	r24, Y+1	; 0x01
    ed60:	9a 81       	ldd	r25, Y+2	; 0x02
    ed62:	01 97       	sbiw	r24, 0x01	; 1
    ed64:	69 f4       	brne	.+26     	; 0xed80 <fatfs_getc+0xe6>
    ed66:	8b 81       	ldd	r24, Y+3	; 0x03
    ed68:	8a 30       	cpi	r24, 0x0A	; 10
    ed6a:	31 f0       	breq	.+12     	; 0xed78 <fatfs_getc+0xde>
    ed6c:	b5 01       	movw	r22, r10
    ed6e:	a4 01       	movw	r20, r8
    ed70:	c7 01       	movw	r24, r14
    ed72:	0e 94 69 62 	call	0xc4d2	; 0xc4d2 <f_lseek>
    ed76:	04 c0       	rjmp	.+8      	; 0xed80 <fatfs_getc+0xe6>
    ed78:	8b 83       	std	Y+3, r24	; 0x03
    ed7a:	8b 81       	ldd	r24, Y+3	; 0x03
    ed7c:	90 e0       	ldi	r25, 0x00	; 0
    ed7e:	02 c0       	rjmp	.+4      	; 0xed84 <fatfs_getc+0xea>
    ed80:	8a e0       	ldi	r24, 0x0A	; 10
    ed82:	90 e0       	ldi	r25, 0x00	; 0
    ed84:	0f 90       	pop	r0
    ed86:	0f 90       	pop	r0
    ed88:	0f 90       	pop	r0
    ed8a:	df 91       	pop	r29
    ed8c:	cf 91       	pop	r28
    ed8e:	1f 91       	pop	r17
    ed90:	0f 91       	pop	r16
    ed92:	ff 90       	pop	r15
    ed94:	ef 90       	pop	r14
    ed96:	bf 90       	pop	r11
    ed98:	af 90       	pop	r10
    ed9a:	9f 90       	pop	r9
    ed9c:	8f 90       	pop	r8
    ed9e:	08 95       	ret

0000eda0 <fatfs_putc>:
    eda0:	a3 e0       	ldi	r26, 0x03	; 3
    eda2:	b0 e0       	ldi	r27, 0x00	; 0
    eda4:	e6 ed       	ldi	r30, 0xD6	; 214
    eda6:	f6 e7       	ldi	r31, 0x76	; 118
    eda8:	0c 94 27 e5 	jmp	0x1ca4e	; 0x1ca4e <__prologue_saves__+0x1c>
    edac:	8b 83       	std	Y+3, r24	; 0x03
    edae:	10 92 56 1c 	sts	0x1C56, r1	; 0x801c56 <errno+0x1>
    edb2:	10 92 55 1c 	sts	0x1C55, r1	; 0x801c55 <errno>
    edb6:	61 15       	cp	r22, r1
    edb8:	71 05       	cpc	r23, r1
    edba:	39 f4       	brne	.+14     	; 0xedca <fatfs_putc+0x2a>
    edbc:	89 e0       	ldi	r24, 0x09	; 9
    edbe:	90 e0       	ldi	r25, 0x00	; 0
    edc0:	90 93 56 1c 	sts	0x1C56, r25	; 0x801c56 <errno+0x1>
    edc4:	80 93 55 1c 	sts	0x1C55, r24	; 0x801c55 <errno>
    edc8:	2d c0       	rjmp	.+90     	; 0xee24 <fatfs_putc+0x84>
    edca:	fb 01       	movw	r30, r22
    edcc:	84 85       	ldd	r24, Z+12	; 0x0c
    edce:	95 85       	ldd	r25, Z+13	; 0x0d
    edd0:	00 97       	sbiw	r24, 0x00	; 0
    edd2:	a1 f3       	breq	.-24     	; 0xedbc <fatfs_putc+0x1c>
    edd4:	8b 01       	movw	r16, r22
    edd6:	9e 01       	movw	r18, r28
    edd8:	2f 5f       	subi	r18, 0xFF	; 255
    edda:	3f 4f       	sbci	r19, 0xFF	; 255
    eddc:	41 e0       	ldi	r20, 0x01	; 1
    edde:	50 e0       	ldi	r21, 0x00	; 0
    ede0:	be 01       	movw	r22, r28
    ede2:	6d 5f       	subi	r22, 0xFD	; 253
    ede4:	7f 4f       	sbci	r23, 0xFF	; 255
    ede6:	0e 94 a8 5e 	call	0xbd50	; 0xbd50 <f_write>
    edea:	00 97       	sbiw	r24, 0x00	; 0
    edec:	31 f4       	brne	.+12     	; 0xedfa <fatfs_putc+0x5a>
    edee:	29 81       	ldd	r18, Y+1	; 0x01
    edf0:	3a 81       	ldd	r19, Y+2	; 0x02
    edf2:	21 30       	cpi	r18, 0x01	; 1
    edf4:	31 05       	cpc	r19, r1
    edf6:	c9 f0       	breq	.+50     	; 0xee2a <fatfs_putc+0x8a>
    edf8:	03 c0       	rjmp	.+6      	; 0xee00 <fatfs_putc+0x60>
    edfa:	84 31       	cpi	r24, 0x14	; 20
    edfc:	91 05       	cpc	r25, r1
    edfe:	40 f4       	brcc	.+16     	; 0xee10 <fatfs_putc+0x70>
    ee00:	fc 01       	movw	r30, r24
    ee02:	ec 53       	subi	r30, 0x3C	; 60
    ee04:	f5 4f       	sbci	r31, 0xF5	; 245
    ee06:	80 81       	ld	r24, Z
    ee08:	08 2e       	mov	r0, r24
    ee0a:	00 0c       	add	r0, r0
    ee0c:	99 0b       	sbc	r25, r25
    ee0e:	02 c0       	rjmp	.+4      	; 0xee14 <fatfs_putc+0x74>
    ee10:	83 e2       	ldi	r24, 0x23	; 35
    ee12:	90 e0       	ldi	r25, 0x00	; 0
    ee14:	90 93 56 1c 	sts	0x1C56, r25	; 0x801c56 <errno+0x1>
    ee18:	80 93 55 1c 	sts	0x1C55, r24	; 0x801c55 <errno>
    ee1c:	f8 01       	movw	r30, r16
    ee1e:	83 81       	ldd	r24, Z+3	; 0x03
    ee20:	80 62       	ori	r24, 0x20	; 32
    ee22:	83 83       	std	Z+3, r24	; 0x03
    ee24:	8f ef       	ldi	r24, 0xFF	; 255
    ee26:	9f ef       	ldi	r25, 0xFF	; 255
    ee28:	02 c0       	rjmp	.+4      	; 0xee2e <fatfs_putc+0x8e>
    ee2a:	8b 81       	ldd	r24, Y+3	; 0x03
    ee2c:	90 e0       	ldi	r25, 0x00	; 0
    ee2e:	23 96       	adiw	r28, 0x03	; 3
    ee30:	e4 e0       	ldi	r30, 0x04	; 4
    ee32:	0c 94 43 e5 	jmp	0x1ca86	; 0x1ca86 <__epilogue_restores__+0x1c>

0000ee36 <fgetc>:
    ee36:	cf 93       	push	r28
    ee38:	df 93       	push	r29
    ee3a:	00 d0       	rcall	.+0      	; 0xee3c <fgetc+0x6>
    ee3c:	1f 92       	push	r1
    ee3e:	ec 01       	movw	r28, r24
    ee40:	00 97       	sbiw	r24, 0x00	; 0
    ee42:	39 f4       	brne	.+14     	; 0xee52 <fgetc+0x1c>
    ee44:	89 e0       	ldi	r24, 0x09	; 9
    ee46:	90 e0       	ldi	r25, 0x00	; 0
    ee48:	90 93 56 1c 	sts	0x1C56, r25	; 0x801c56 <errno+0x1>
    ee4c:	80 93 55 1c 	sts	0x1C55, r24	; 0x801c55 <errno>
    ee50:	40 c0       	rjmp	.+128    	; 0xeed2 <fgetc+0x9c>
    ee52:	2b 81       	ldd	r18, Y+3	; 0x03
    ee54:	20 ff       	sbrs	r18, 0
    ee56:	3d c0       	rjmp	.+122    	; 0xeed2 <fgetc+0x9c>
    ee58:	26 ff       	sbrs	r18, 6
    ee5a:	0a c0       	rjmp	.+20     	; 0xee70 <fgetc+0x3a>
    ee5c:	2f 7b       	andi	r18, 0xBF	; 191
    ee5e:	2b 83       	std	Y+3, r18	; 0x03
    ee60:	8e 81       	ldd	r24, Y+6	; 0x06
    ee62:	9f 81       	ldd	r25, Y+7	; 0x07
    ee64:	01 96       	adiw	r24, 0x01	; 1
    ee66:	9f 83       	std	Y+7, r25	; 0x07
    ee68:	8e 83       	std	Y+6, r24	; 0x06
    ee6a:	8a 81       	ldd	r24, Y+2	; 0x02
    ee6c:	90 e0       	ldi	r25, 0x00	; 0
    ee6e:	33 c0       	rjmp	.+102    	; 0xeed6 <fgetc+0xa0>
    ee70:	22 ff       	sbrs	r18, 2
    ee72:	0d c0       	rjmp	.+26     	; 0xee8e <fgetc+0x58>
    ee74:	e8 81       	ld	r30, Y
    ee76:	f9 81       	ldd	r31, Y+1	; 0x01
    ee78:	80 81       	ld	r24, Z
    ee7a:	90 e0       	ldi	r25, 0x00	; 0
    ee7c:	00 97       	sbiw	r24, 0x00	; 0
    ee7e:	19 f4       	brne	.+6      	; 0xee86 <fgetc+0x50>
    ee80:	20 62       	ori	r18, 0x20	; 32
    ee82:	2b 83       	std	Y+3, r18	; 0x03
    ee84:	26 c0       	rjmp	.+76     	; 0xeed2 <fgetc+0x9c>
    ee86:	31 96       	adiw	r30, 0x01	; 1
    ee88:	f9 83       	std	Y+1, r31	; 0x01
    ee8a:	e8 83       	st	Y, r30
    ee8c:	1b c0       	rjmp	.+54     	; 0xeec4 <fgetc+0x8e>
    ee8e:	ea 85       	ldd	r30, Y+10	; 0x0a
    ee90:	fb 85       	ldd	r31, Y+11	; 0x0b
    ee92:	30 97       	sbiw	r30, 0x00	; 0
    ee94:	59 f4       	brne	.+22     	; 0xeeac <fgetc+0x76>
    ee96:	88 e5       	ldi	r24, 0x58	; 88
    ee98:	9b e0       	ldi	r25, 0x0B	; 11
    ee9a:	a0 e0       	ldi	r26, 0x00	; 0
    ee9c:	ed b7       	in	r30, 0x3d	; 61
    ee9e:	fe b7       	in	r31, 0x3e	; 62
    eea0:	81 83       	std	Z+1, r24	; 0x01
    eea2:	92 83       	std	Z+2, r25	; 0x02
    eea4:	a3 83       	std	Z+3, r26	; 0x03
    eea6:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    eeaa:	13 c0       	rjmp	.+38     	; 0xeed2 <fgetc+0x9c>
    eeac:	09 95       	icall
    eeae:	97 ff       	sbrs	r25, 7
    eeb0:	09 c0       	rjmp	.+18     	; 0xeec4 <fgetc+0x8e>
    eeb2:	2b 81       	ldd	r18, Y+3	; 0x03
    eeb4:	02 96       	adiw	r24, 0x02	; 2
    eeb6:	11 f0       	breq	.+4      	; 0xeebc <fgetc+0x86>
    eeb8:	80 e2       	ldi	r24, 0x20	; 32
    eeba:	01 c0       	rjmp	.+2      	; 0xeebe <fgetc+0x88>
    eebc:	80 e1       	ldi	r24, 0x10	; 16
    eebe:	82 2b       	or	r24, r18
    eec0:	8b 83       	std	Y+3, r24	; 0x03
    eec2:	07 c0       	rjmp	.+14     	; 0xeed2 <fgetc+0x9c>
    eec4:	2e 81       	ldd	r18, Y+6	; 0x06
    eec6:	3f 81       	ldd	r19, Y+7	; 0x07
    eec8:	2f 5f       	subi	r18, 0xFF	; 255
    eeca:	3f 4f       	sbci	r19, 0xFF	; 255
    eecc:	3f 83       	std	Y+7, r19	; 0x07
    eece:	2e 83       	std	Y+6, r18	; 0x06
    eed0:	02 c0       	rjmp	.+4      	; 0xeed6 <fgetc+0xa0>
    eed2:	8f ef       	ldi	r24, 0xFF	; 255
    eed4:	9f ef       	ldi	r25, 0xFF	; 255
    eed6:	cd b7       	in	r28, 0x3d	; 61
    eed8:	de b7       	in	r29, 0x3e	; 62
    eeda:	23 96       	adiw	r28, 0x03	; 3
    eedc:	e2 e0       	ldi	r30, 0x02	; 2
    eede:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__epilogue_restores__+0x20>

0000eee2 <fputc>:
    eee2:	cf 93       	push	r28
    eee4:	df 93       	push	r29
    eee6:	00 d0       	rcall	.+0      	; 0xeee8 <fputc+0x6>
    eee8:	1f 92       	push	r1
    eeea:	eb 01       	movw	r28, r22
    eeec:	10 92 56 1c 	sts	0x1C56, r1	; 0x801c56 <errno+0x1>
    eef0:	10 92 55 1c 	sts	0x1C55, r1	; 0x801c55 <errno>
    eef4:	20 91 59 1c 	lds	r18, 0x1C59	; 0x801c59 <__iob+0x2>
    eef8:	30 91 5a 1c 	lds	r19, 0x1C5A	; 0x801c5a <__iob+0x3>
    eefc:	62 17       	cp	r22, r18
    eefe:	73 07       	cpc	r23, r19
    ef00:	49 f0       	breq	.+18     	; 0xef14 <fputc+0x32>
    ef02:	20 91 5b 1c 	lds	r18, 0x1C5B	; 0x801c5b <__iob+0x4>
    ef06:	30 91 5c 1c 	lds	r19, 0x1C5C	; 0x801c5c <__iob+0x5>
    ef0a:	62 17       	cp	r22, r18
    ef0c:	73 07       	cpc	r23, r19
    ef0e:	11 f0       	breq	.+4      	; 0xef14 <fputc+0x32>
    ef10:	47 df       	rcall	.-370    	; 0xeda0 <fatfs_putc>
    ef12:	33 c0       	rjmp	.+102    	; 0xef7a <fputc+0x98>
    ef14:	2b 81       	ldd	r18, Y+3	; 0x03
    ef16:	21 ff       	sbrs	r18, 1
    ef18:	2e c0       	rjmp	.+92     	; 0xef76 <fputc+0x94>
    ef1a:	22 ff       	sbrs	r18, 2
    ef1c:	10 c0       	rjmp	.+32     	; 0xef3e <fputc+0x5c>
    ef1e:	4e 81       	ldd	r20, Y+6	; 0x06
    ef20:	5f 81       	ldd	r21, Y+7	; 0x07
    ef22:	2c 81       	ldd	r18, Y+4	; 0x04
    ef24:	3d 81       	ldd	r19, Y+5	; 0x05
    ef26:	42 17       	cp	r20, r18
    ef28:	53 07       	cpc	r21, r19
    ef2a:	f4 f4       	brge	.+60     	; 0xef68 <fputc+0x86>
    ef2c:	e8 81       	ld	r30, Y
    ef2e:	f9 81       	ldd	r31, Y+1	; 0x01
    ef30:	9f 01       	movw	r18, r30
    ef32:	2f 5f       	subi	r18, 0xFF	; 255
    ef34:	3f 4f       	sbci	r19, 0xFF	; 255
    ef36:	39 83       	std	Y+1, r19	; 0x01
    ef38:	28 83       	st	Y, r18
    ef3a:	80 83       	st	Z, r24
    ef3c:	15 c0       	rjmp	.+42     	; 0xef68 <fputc+0x86>
    ef3e:	e8 85       	ldd	r30, Y+8	; 0x08
    ef40:	f9 85       	ldd	r31, Y+9	; 0x09
    ef42:	30 97       	sbiw	r30, 0x00	; 0
    ef44:	59 f4       	brne	.+22     	; 0xef5c <fputc+0x7a>
    ef46:	80 e4       	ldi	r24, 0x40	; 64
    ef48:	9b e0       	ldi	r25, 0x0B	; 11
    ef4a:	a0 e0       	ldi	r26, 0x00	; 0
    ef4c:	ed b7       	in	r30, 0x3d	; 61
    ef4e:	fe b7       	in	r31, 0x3e	; 62
    ef50:	81 83       	std	Z+1, r24	; 0x01
    ef52:	92 83       	std	Z+2, r25	; 0x02
    ef54:	a3 83       	std	Z+3, r26	; 0x03
    ef56:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    ef5a:	0d c0       	rjmp	.+26     	; 0xef76 <fputc+0x94>
    ef5c:	be 01       	movw	r22, r28
    ef5e:	09 95       	icall
    ef60:	8f 3f       	cpi	r24, 0xFF	; 255
    ef62:	ff ef       	ldi	r31, 0xFF	; 255
    ef64:	9f 07       	cpc	r25, r31
    ef66:	39 f0       	breq	.+14     	; 0xef76 <fputc+0x94>
    ef68:	2e 81       	ldd	r18, Y+6	; 0x06
    ef6a:	3f 81       	ldd	r19, Y+7	; 0x07
    ef6c:	2f 5f       	subi	r18, 0xFF	; 255
    ef6e:	3f 4f       	sbci	r19, 0xFF	; 255
    ef70:	3f 83       	std	Y+7, r19	; 0x07
    ef72:	2e 83       	std	Y+6, r18	; 0x06
    ef74:	02 c0       	rjmp	.+4      	; 0xef7a <fputc+0x98>
    ef76:	8f ef       	ldi	r24, 0xFF	; 255
    ef78:	9f ef       	ldi	r25, 0xFF	; 255
    ef7a:	cd b7       	in	r28, 0x3d	; 61
    ef7c:	de b7       	in	r29, 0x3e	; 62
    ef7e:	23 96       	adiw	r28, 0x03	; 3
    ef80:	e2 e0       	ldi	r30, 0x02	; 2
    ef82:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__epilogue_restores__+0x20>

0000ef86 <_fprintf_putc>:
    ef86:	fc 01       	movw	r30, r24
    ef88:	86 2f       	mov	r24, r22
    ef8a:	26 81       	ldd	r18, Z+6	; 0x06
    ef8c:	37 81       	ldd	r19, Z+7	; 0x07
    ef8e:	2f 5f       	subi	r18, 0xFF	; 255
    ef90:	3f 4f       	sbci	r19, 0xFF	; 255
    ef92:	37 83       	std	Z+7, r19	; 0x07
    ef94:	26 83       	std	Z+6, r18	; 0x06
    ef96:	62 81       	ldd	r22, Z+2	; 0x02
    ef98:	73 81       	ldd	r23, Z+3	; 0x03
    ef9a:	90 e0       	ldi	r25, 0x00	; 0
    ef9c:	a2 cf       	rjmp	.-188    	; 0xeee2 <fputc>
    ef9e:	08 95       	ret

0000efa0 <getchar>:
    efa0:	80 91 57 1c 	lds	r24, 0x1C57	; 0x801c57 <__iob>
    efa4:	90 91 58 1c 	lds	r25, 0x1C58	; 0x801c58 <__iob+0x1>
    efa8:	46 cf       	rjmp	.-372    	; 0xee36 <fgetc>
    efaa:	08 95       	ret

0000efac <putchar>:
    efac:	60 91 59 1c 	lds	r22, 0x1C59	; 0x801c59 <__iob+0x2>
    efb0:	70 91 5a 1c 	lds	r23, 0x1C5A	; 0x801c5a <__iob+0x3>
    efb4:	96 cf       	rjmp	.-212    	; 0xeee2 <fputc>
    efb6:	08 95       	ret

0000efb8 <fgets>:
    efb8:	a0 e0       	ldi	r26, 0x00	; 0
    efba:	b0 e0       	ldi	r27, 0x00	; 0
    efbc:	e2 ee       	ldi	r30, 0xE2	; 226
    efbe:	f7 e7       	ldi	r31, 0x77	; 119
    efc0:	0c 94 23 e5 	jmp	0x1ca46	; 0x1ca46 <__prologue_saves__+0x14>
    efc4:	7c 01       	movw	r14, r24
    efc6:	6a 01       	movw	r12, r20
    efc8:	8b 01       	movw	r16, r22
    efca:	c0 e0       	ldi	r28, 0x00	; 0
    efcc:	d0 e0       	ldi	r29, 0x00	; 0
    efce:	01 15       	cp	r16, r1
    efd0:	11 05       	cpc	r17, r1
    efd2:	41 f0       	breq	.+16     	; 0xefe4 <fgets+0x2c>
    efd4:	c6 01       	movw	r24, r12
    efd6:	2f df       	rcall	.-418    	; 0xee36 <fgetc>
    efd8:	8f 3f       	cpi	r24, 0xFF	; 255
    efda:	2f ef       	ldi	r18, 0xFF	; 255
    efdc:	92 07       	cpc	r25, r18
    efde:	39 f4       	brne	.+14     	; 0xefee <fgets+0x36>
    efe0:	20 97       	sbiw	r28, 0x00	; 0
    efe2:	b9 f0       	breq	.+46     	; 0xf012 <fgets+0x5a>
    efe4:	ce 0d       	add	r28, r14
    efe6:	df 1d       	adc	r29, r15
    efe8:	18 82       	st	Y, r1
    efea:	c7 01       	movw	r24, r14
    efec:	14 c0       	rjmp	.+40     	; 0xf016 <fgets+0x5e>
    efee:	8a 30       	cpi	r24, 0x0A	; 10
    eff0:	91 05       	cpc	r25, r1
    eff2:	c1 f3       	breq	.-16     	; 0xefe4 <fgets+0x2c>
    eff4:	88 30       	cpi	r24, 0x08	; 8
    eff6:	91 05       	cpc	r25, r1
    eff8:	21 f4       	brne	.+8      	; 0xf002 <fgets+0x4a>
    effa:	20 97       	sbiw	r28, 0x00	; 0
    effc:	39 f0       	breq	.+14     	; 0xf00c <fgets+0x54>
    effe:	21 97       	sbiw	r28, 0x01	; 1
    f000:	05 c0       	rjmp	.+10     	; 0xf00c <fgets+0x54>
    f002:	f7 01       	movw	r30, r14
    f004:	ec 0f       	add	r30, r28
    f006:	fd 1f       	adc	r31, r29
    f008:	80 83       	st	Z, r24
    f00a:	21 96       	adiw	r28, 0x01	; 1
    f00c:	01 50       	subi	r16, 0x01	; 1
    f00e:	11 09       	sbc	r17, r1
    f010:	de cf       	rjmp	.-68     	; 0xefce <fgets+0x16>
    f012:	80 e0       	ldi	r24, 0x00	; 0
    f014:	90 e0       	ldi	r25, 0x00	; 0
    f016:	cd b7       	in	r28, 0x3d	; 61
    f018:	de b7       	in	r29, 0x3e	; 62
    f01a:	e8 e0       	ldi	r30, 0x08	; 8
    f01c:	0c 94 3f e5 	jmp	0x1ca7e	; 0x1ca7e <__epilogue_restores__+0x14>

0000f020 <fputs>:
    f020:	0f 93       	push	r16
    f022:	1f 93       	push	r17
    f024:	cf 93       	push	r28
    f026:	df 93       	push	r29
    f028:	8b 01       	movw	r16, r22
    f02a:	ec 01       	movw	r28, r24
    f02c:	89 91       	ld	r24, Y+
    f02e:	88 23       	and	r24, r24
    f030:	41 f0       	breq	.+16     	; 0xf042 <fputs+0x22>
    f032:	b8 01       	movw	r22, r16
    f034:	90 e0       	ldi	r25, 0x00	; 0
    f036:	55 df       	rcall	.-342    	; 0xeee2 <fputc>
    f038:	8f 3f       	cpi	r24, 0xFF	; 255
    f03a:	2f ef       	ldi	r18, 0xFF	; 255
    f03c:	92 07       	cpc	r25, r18
    f03e:	b1 f7       	brne	.-20     	; 0xf02c <fputs+0xc>
    f040:	02 c0       	rjmp	.+4      	; 0xf046 <fputs+0x26>
    f042:	80 e0       	ldi	r24, 0x00	; 0
    f044:	90 e0       	ldi	r25, 0x00	; 0
    f046:	df 91       	pop	r29
    f048:	cf 91       	pop	r28
    f04a:	1f 91       	pop	r17
    f04c:	0f 91       	pop	r16
    f04e:	08 95       	ret

0000f050 <puts>:
    f050:	cf 93       	push	r28
    f052:	df 93       	push	r29
    f054:	ec 01       	movw	r28, r24
    f056:	89 91       	ld	r24, Y+
    f058:	60 91 59 1c 	lds	r22, 0x1C59	; 0x801c59 <__iob+0x2>
    f05c:	70 91 5a 1c 	lds	r23, 0x1C5A	; 0x801c5a <__iob+0x3>
    f060:	88 23       	and	r24, r24
    f062:	39 f0       	breq	.+14     	; 0xf072 <puts+0x22>
    f064:	90 e0       	ldi	r25, 0x00	; 0
    f066:	3d df       	rcall	.-390    	; 0xeee2 <fputc>
    f068:	8f 3f       	cpi	r24, 0xFF	; 255
    f06a:	2f ef       	ldi	r18, 0xFF	; 255
    f06c:	92 07       	cpc	r25, r18
    f06e:	99 f7       	brne	.-26     	; 0xf056 <puts+0x6>
    f070:	03 c0       	rjmp	.+6      	; 0xf078 <puts+0x28>
    f072:	8a e0       	ldi	r24, 0x0A	; 10
    f074:	90 e0       	ldi	r25, 0x00	; 0
    f076:	35 df       	rcall	.-406    	; 0xeee2 <fputc>
    f078:	df 91       	pop	r29
    f07a:	cf 91       	pop	r28
    f07c:	08 95       	ret

0000f07e <fileno>:
    f07e:	00 97       	sbiw	r24, 0x00	; 0
    f080:	39 f4       	brne	.+14     	; 0xf090 <fileno+0x12>
    f082:	89 e0       	ldi	r24, 0x09	; 9
    f084:	90 e0       	ldi	r25, 0x00	; 0
    f086:	90 93 56 1c 	sts	0x1C56, r25	; 0x801c56 <errno+0x1>
    f08a:	80 93 55 1c 	sts	0x1C55, r24	; 0x801c55 <errno>
    f08e:	0e c0       	rjmp	.+28     	; 0xf0ac <fileno+0x2e>
    f090:	e7 e5       	ldi	r30, 0x57	; 87
    f092:	fc e1       	ldi	r31, 0x1C	; 28
    f094:	20 e0       	ldi	r18, 0x00	; 0
    f096:	30 e0       	ldi	r19, 0x00	; 0
    f098:	41 91       	ld	r20, Z+
    f09a:	51 91       	ld	r21, Z+
    f09c:	84 17       	cp	r24, r20
    f09e:	95 07       	cpc	r25, r21
    f0a0:	41 f0       	breq	.+16     	; 0xf0b2 <fileno+0x34>
    f0a2:	2f 5f       	subi	r18, 0xFF	; 255
    f0a4:	3f 4f       	sbci	r19, 0xFF	; 255
    f0a6:	20 31       	cpi	r18, 0x10	; 16
    f0a8:	31 05       	cpc	r19, r1
    f0aa:	b1 f7       	brne	.-20     	; 0xf098 <fileno+0x1a>
    f0ac:	8f ef       	ldi	r24, 0xFF	; 255
    f0ae:	9f ef       	ldi	r25, 0xFF	; 255
    f0b0:	08 95       	ret
    f0b2:	c9 01       	movw	r24, r18
    f0b4:	08 95       	ret

0000f0b6 <fileno_to_stream>:
    f0b6:	80 31       	cpi	r24, 0x10	; 16
    f0b8:	91 05       	cpc	r25, r1
    f0ba:	48 f4       	brcc	.+18     	; 0xf0ce <fileno_to_stream+0x18>
    f0bc:	88 0f       	add	r24, r24
    f0be:	99 1f       	adc	r25, r25
    f0c0:	fc 01       	movw	r30, r24
    f0c2:	e9 5a       	subi	r30, 0xA9	; 169
    f0c4:	f3 4e       	sbci	r31, 0xE3	; 227
    f0c6:	80 81       	ld	r24, Z
    f0c8:	91 81       	ldd	r25, Z+1	; 0x01
    f0ca:	00 97       	sbiw	r24, 0x00	; 0
    f0cc:	41 f4       	brne	.+16     	; 0xf0de <fileno_to_stream+0x28>
    f0ce:	89 e0       	ldi	r24, 0x09	; 9
    f0d0:	90 e0       	ldi	r25, 0x00	; 0
    f0d2:	90 93 56 1c 	sts	0x1C56, r25	; 0x801c56 <errno+0x1>
    f0d6:	80 93 55 1c 	sts	0x1C55, r24	; 0x801c55 <errno>
    f0da:	80 e0       	ldi	r24, 0x00	; 0
    f0dc:	90 e0       	ldi	r25, 0x00	; 0
    f0de:	08 95       	ret

0000f0e0 <mctime>:
    f0e0:	a4 e0       	ldi	r26, 0x04	; 4
    f0e2:	b0 e0       	ldi	r27, 0x00	; 0
    f0e4:	e6 e7       	ldi	r30, 0x76	; 118
    f0e6:	f8 e7       	ldi	r31, 0x78	; 120
    f0e8:	0c 94 29 e5 	jmp	0x1ca52	; 0x1ca52 <__prologue_saves__+0x20>
    f0ec:	69 83       	std	Y+1, r22	; 0x01
    f0ee:	7a 83       	std	Y+2, r23	; 0x02
    f0f0:	8b 83       	std	Y+3, r24	; 0x03
    f0f2:	9c 83       	std	Y+4, r25	; 0x04
    f0f4:	10 92 56 1c 	sts	0x1C56, r1	; 0x801c56 <errno+0x1>
    f0f8:	10 92 55 1c 	sts	0x1C55, r1	; 0x801c55 <errno>
    f0fc:	ce 01       	movw	r24, r28
    f0fe:	01 96       	adiw	r24, 0x01	; 1
    f100:	0e 94 c0 3e 	call	0x7d80	; 0x7d80 <ctime_gm>
    f104:	fc 01       	movw	r30, r24
    f106:	01 90       	ld	r0, Z+
    f108:	00 20       	and	r0, r0
    f10a:	e9 f7       	brne	.-6      	; 0xf106 <mctime+0x26>
    f10c:	31 97       	sbiw	r30, 0x01	; 1
    f10e:	e8 1b       	sub	r30, r24
    f110:	f9 0b       	sbc	r31, r25
    f112:	39 f0       	breq	.+14     	; 0xf122 <mctime+0x42>
    f114:	31 97       	sbiw	r30, 0x01	; 1
    f116:	e8 0f       	add	r30, r24
    f118:	f9 1f       	adc	r31, r25
    f11a:	20 81       	ld	r18, Z
    f11c:	2a 30       	cpi	r18, 0x0A	; 10
    f11e:	09 f4       	brne	.+2      	; 0xf122 <mctime+0x42>
    f120:	10 82       	st	Z, r1
    f122:	24 96       	adiw	r28, 0x04	; 4
    f124:	e2 e0       	ldi	r30, 0x02	; 2
    f126:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__epilogue_restores__+0x20>

0000f12a <basename>:
    f12a:	00 97       	sbiw	r24, 0x00	; 0
    f12c:	49 f0       	breq	.+18     	; 0xf140 <basename+0x16>
    f12e:	fc 01       	movw	r30, r24
    f130:	21 91       	ld	r18, Z+
    f132:	22 23       	and	r18, r18
    f134:	21 f0       	breq	.+8      	; 0xf13e <basename+0x14>
    f136:	2f 32       	cpi	r18, 0x2F	; 47
    f138:	d9 f7       	brne	.-10     	; 0xf130 <basename+0x6>
    f13a:	cf 01       	movw	r24, r30
    f13c:	f9 cf       	rjmp	.-14     	; 0xf130 <basename+0x6>
    f13e:	08 95       	ret
    f140:	8f ed       	ldi	r24, 0xDF	; 223
    f142:	96 e1       	ldi	r25, 0x16	; 22
    f144:	08 95       	ret

0000f146 <chdir>:
    f146:	10 92 56 1c 	sts	0x1C56, r1	; 0x801c56 <errno+0x1>
    f14a:	10 92 55 1c 	sts	0x1C55, r1	; 0x801c55 <errno>
    f14e:	0e 94 d8 60 	call	0xc1b0	; 0xc1b0 <f_chdir>
    f152:	00 97       	sbiw	r24, 0x00	; 0
    f154:	a1 f0       	breq	.+40     	; 0xf17e <chdir+0x38>
    f156:	84 31       	cpi	r24, 0x14	; 20
    f158:	91 05       	cpc	r25, r1
    f15a:	40 f4       	brcc	.+16     	; 0xf16c <chdir+0x26>
    f15c:	fc 01       	movw	r30, r24
    f15e:	ec 53       	subi	r30, 0x3C	; 60
    f160:	f5 4f       	sbci	r31, 0xF5	; 245
    f162:	80 81       	ld	r24, Z
    f164:	08 2e       	mov	r0, r24
    f166:	00 0c       	add	r0, r0
    f168:	99 0b       	sbc	r25, r25
    f16a:	02 c0       	rjmp	.+4      	; 0xf170 <chdir+0x2a>
    f16c:	83 e2       	ldi	r24, 0x23	; 35
    f16e:	90 e0       	ldi	r25, 0x00	; 0
    f170:	90 93 56 1c 	sts	0x1C56, r25	; 0x801c56 <errno+0x1>
    f174:	80 93 55 1c 	sts	0x1C55, r24	; 0x801c55 <errno>
    f178:	8f ef       	ldi	r24, 0xFF	; 255
    f17a:	9f ef       	ldi	r25, 0xFF	; 255
    f17c:	08 95       	ret
    f17e:	80 e0       	ldi	r24, 0x00	; 0
    f180:	90 e0       	ldi	r25, 0x00	; 0
    f182:	08 95       	ret

0000f184 <chmod>:
    f184:	10 92 56 1c 	sts	0x1C56, r1	; 0x801c56 <errno+0x1>
    f188:	10 92 55 1c 	sts	0x1C55, r1	; 0x801c55 <errno>
    f18c:	42 79       	andi	r20, 0x92	; 146
    f18e:	55 27       	eor	r21, r21
    f190:	66 27       	eor	r22, r22
    f192:	77 27       	eor	r23, r23
    f194:	45 2b       	or	r20, r21
    f196:	46 2b       	or	r20, r22
    f198:	47 2b       	or	r20, r23
    f19a:	19 f0       	breq	.+6      	; 0xf1a2 <chmod+0x1e>
    f19c:	80 e0       	ldi	r24, 0x00	; 0
    f19e:	90 e0       	ldi	r25, 0x00	; 0
    f1a0:	08 95       	ret
    f1a2:	41 e0       	ldi	r20, 0x01	; 1
    f1a4:	61 e0       	ldi	r22, 0x01	; 1
    f1a6:	0e 94 b9 69 	call	0xd372	; 0xd372 <f_chmod>
    f1aa:	00 97       	sbiw	r24, 0x00	; 0
    f1ac:	b9 f3       	breq	.-18     	; 0xf19c <chmod+0x18>
    f1ae:	84 31       	cpi	r24, 0x14	; 20
    f1b0:	91 05       	cpc	r25, r1
    f1b2:	40 f4       	brcc	.+16     	; 0xf1c4 <chmod+0x40>
    f1b4:	fc 01       	movw	r30, r24
    f1b6:	ec 53       	subi	r30, 0x3C	; 60
    f1b8:	f5 4f       	sbci	r31, 0xF5	; 245
    f1ba:	80 81       	ld	r24, Z
    f1bc:	08 2e       	mov	r0, r24
    f1be:	00 0c       	add	r0, r0
    f1c0:	99 0b       	sbc	r25, r25
    f1c2:	02 c0       	rjmp	.+4      	; 0xf1c8 <chmod+0x44>
    f1c4:	83 e2       	ldi	r24, 0x23	; 35
    f1c6:	90 e0       	ldi	r25, 0x00	; 0
    f1c8:	90 93 56 1c 	sts	0x1C56, r25	; 0x801c56 <errno+0x1>
    f1cc:	80 93 55 1c 	sts	0x1C55, r24	; 0x801c55 <errno>
    f1d0:	8f ef       	ldi	r24, 0xFF	; 255
    f1d2:	9f ef       	ldi	r25, 0xFF	; 255
    f1d4:	08 95       	ret

0000f1d6 <getcwd>:
    f1d6:	cf 93       	push	r28
    f1d8:	df 93       	push	r29
    f1da:	d8 2f       	mov	r29, r24
    f1dc:	c9 2f       	mov	r28, r25
    f1de:	10 92 56 1c 	sts	0x1C56, r1	; 0x801c56 <errno+0x1>
    f1e2:	10 92 55 1c 	sts	0x1C55, r1	; 0x801c55 <errno>
    f1e6:	0e 94 33 61 	call	0xc266	; 0xc266 <f_getcwd>
    f1ea:	00 97       	sbiw	r24, 0x00	; 0
    f1ec:	a1 f0       	breq	.+40     	; 0xf216 <getcwd+0x40>
    f1ee:	84 31       	cpi	r24, 0x14	; 20
    f1f0:	91 05       	cpc	r25, r1
    f1f2:	40 f4       	brcc	.+16     	; 0xf204 <getcwd+0x2e>
    f1f4:	fc 01       	movw	r30, r24
    f1f6:	ec 53       	subi	r30, 0x3C	; 60
    f1f8:	f5 4f       	sbci	r31, 0xF5	; 245
    f1fa:	80 81       	ld	r24, Z
    f1fc:	08 2e       	mov	r0, r24
    f1fe:	00 0c       	add	r0, r0
    f200:	99 0b       	sbc	r25, r25
    f202:	02 c0       	rjmp	.+4      	; 0xf208 <getcwd+0x32>
    f204:	83 e2       	ldi	r24, 0x23	; 35
    f206:	90 e0       	ldi	r25, 0x00	; 0
    f208:	90 93 56 1c 	sts	0x1C56, r25	; 0x801c56 <errno+0x1>
    f20c:	80 93 55 1c 	sts	0x1C55, r24	; 0x801c55 <errno>
    f210:	80 e0       	ldi	r24, 0x00	; 0
    f212:	90 e0       	ldi	r25, 0x00	; 0
    f214:	02 c0       	rjmp	.+4      	; 0xf21a <getcwd+0x44>
    f216:	8d 2f       	mov	r24, r29
    f218:	9c 2f       	mov	r25, r28
    f21a:	df 91       	pop	r29
    f21c:	cf 91       	pop	r28
    f21e:	08 95       	ret

0000f220 <mkdir>:
    f220:	cf 93       	push	r28
    f222:	df 93       	push	r29
    f224:	ec 01       	movw	r28, r24
    f226:	10 92 56 1c 	sts	0x1C56, r1	; 0x801c56 <errno+0x1>
    f22a:	10 92 55 1c 	sts	0x1C55, r1	; 0x801c55 <errno>
    f22e:	41 15       	cp	r20, r1
    f230:	51 05       	cpc	r21, r1
    f232:	61 05       	cpc	r22, r1
    f234:	71 05       	cpc	r23, r1
    f236:	41 f4       	brne	.+16     	; 0xf248 <mkdir+0x28>
    f238:	ce 01       	movw	r24, r28
    f23a:	0e 94 b4 67 	call	0xcf68	; 0xcf68 <f_mkdir>
    f23e:	00 97       	sbiw	r24, 0x00	; 0
    f240:	39 f4       	brne	.+14     	; 0xf250 <mkdir+0x30>
    f242:	80 e0       	ldi	r24, 0x00	; 0
    f244:	90 e0       	ldi	r25, 0x00	; 0
    f246:	17 c0       	rjmp	.+46     	; 0xf276 <mkdir+0x56>
    f248:	9d df       	rcall	.-198    	; 0xf184 <chmod>
    f24a:	89 2b       	or	r24, r25
    f24c:	a9 f3       	breq	.-22     	; 0xf238 <mkdir+0x18>
    f24e:	11 c0       	rjmp	.+34     	; 0xf272 <mkdir+0x52>
    f250:	84 31       	cpi	r24, 0x14	; 20
    f252:	91 05       	cpc	r25, r1
    f254:	40 f4       	brcc	.+16     	; 0xf266 <mkdir+0x46>
    f256:	fc 01       	movw	r30, r24
    f258:	ec 53       	subi	r30, 0x3C	; 60
    f25a:	f5 4f       	sbci	r31, 0xF5	; 245
    f25c:	80 81       	ld	r24, Z
    f25e:	08 2e       	mov	r0, r24
    f260:	00 0c       	add	r0, r0
    f262:	99 0b       	sbc	r25, r25
    f264:	02 c0       	rjmp	.+4      	; 0xf26a <mkdir+0x4a>
    f266:	83 e2       	ldi	r24, 0x23	; 35
    f268:	90 e0       	ldi	r25, 0x00	; 0
    f26a:	90 93 56 1c 	sts	0x1C56, r25	; 0x801c56 <errno+0x1>
    f26e:	80 93 55 1c 	sts	0x1C55, r24	; 0x801c55 <errno>
    f272:	8f ef       	ldi	r24, 0xFF	; 255
    f274:	9f ef       	ldi	r25, 0xFF	; 255
    f276:	df 91       	pop	r29
    f278:	cf 91       	pop	r28
    f27a:	08 95       	ret

0000f27c <rename>:
    f27c:	10 92 56 1c 	sts	0x1C56, r1	; 0x801c56 <errno+0x1>
    f280:	10 92 55 1c 	sts	0x1C55, r1	; 0x801c55 <errno>
    f284:	0e 94 a4 68 	call	0xd148	; 0xd148 <f_rename>
    f288:	00 97       	sbiw	r24, 0x00	; 0
    f28a:	a1 f0       	breq	.+40     	; 0xf2b4 <rename+0x38>
    f28c:	84 31       	cpi	r24, 0x14	; 20
    f28e:	91 05       	cpc	r25, r1
    f290:	40 f4       	brcc	.+16     	; 0xf2a2 <rename+0x26>
    f292:	fc 01       	movw	r30, r24
    f294:	ec 53       	subi	r30, 0x3C	; 60
    f296:	f5 4f       	sbci	r31, 0xF5	; 245
    f298:	80 81       	ld	r24, Z
    f29a:	08 2e       	mov	r0, r24
    f29c:	00 0c       	add	r0, r0
    f29e:	99 0b       	sbc	r25, r25
    f2a0:	02 c0       	rjmp	.+4      	; 0xf2a6 <rename+0x2a>
    f2a2:	83 e2       	ldi	r24, 0x23	; 35
    f2a4:	90 e0       	ldi	r25, 0x00	; 0
    f2a6:	90 93 56 1c 	sts	0x1C56, r25	; 0x801c56 <errno+0x1>
    f2aa:	80 93 55 1c 	sts	0x1C55, r24	; 0x801c55 <errno>
    f2ae:	8f ef       	ldi	r24, 0xFF	; 255
    f2b0:	9f ef       	ldi	r25, 0xFF	; 255
    f2b2:	08 95       	ret
    f2b4:	80 e0       	ldi	r24, 0x00	; 0
    f2b6:	90 e0       	ldi	r25, 0x00	; 0
    f2b8:	08 95       	ret

0000f2ba <unlink>:
    f2ba:	10 92 56 1c 	sts	0x1C56, r1	; 0x801c56 <errno+0x1>
    f2be:	10 92 55 1c 	sts	0x1C55, r1	; 0x801c55 <errno>
    f2c2:	0e 94 0d 67 	call	0xce1a	; 0xce1a <f_unlink>
    f2c6:	00 97       	sbiw	r24, 0x00	; 0
    f2c8:	a1 f0       	breq	.+40     	; 0xf2f2 <unlink+0x38>
    f2ca:	84 31       	cpi	r24, 0x14	; 20
    f2cc:	91 05       	cpc	r25, r1
    f2ce:	40 f4       	brcc	.+16     	; 0xf2e0 <unlink+0x26>
    f2d0:	fc 01       	movw	r30, r24
    f2d2:	ec 53       	subi	r30, 0x3C	; 60
    f2d4:	f5 4f       	sbci	r31, 0xF5	; 245
    f2d6:	80 81       	ld	r24, Z
    f2d8:	08 2e       	mov	r0, r24
    f2da:	00 0c       	add	r0, r0
    f2dc:	99 0b       	sbc	r25, r25
    f2de:	02 c0       	rjmp	.+4      	; 0xf2e4 <unlink+0x2a>
    f2e0:	83 e2       	ldi	r24, 0x23	; 35
    f2e2:	90 e0       	ldi	r25, 0x00	; 0
    f2e4:	90 93 56 1c 	sts	0x1C56, r25	; 0x801c56 <errno+0x1>
    f2e8:	80 93 55 1c 	sts	0x1C55, r24	; 0x801c55 <errno>
    f2ec:	8f ef       	ldi	r24, 0xFF	; 255
    f2ee:	9f ef       	ldi	r25, 0xFF	; 255
    f2f0:	08 95       	ret
    f2f2:	80 e0       	ldi	r24, 0x00	; 0
    f2f4:	90 e0       	ldi	r25, 0x00	; 0
    f2f6:	08 95       	ret

0000f2f8 <rmdir>:
    f2f8:	e0 cf       	rjmp	.-64     	; 0xf2ba <unlink>
    f2fa:	08 95       	ret

0000f2fc <closedir>:
    f2fc:	0e 94 96 65 	call	0xcb2c	; 0xcb2c <f_closedir>
    f300:	00 97       	sbiw	r24, 0x00	; 0
    f302:	a1 f0       	breq	.+40     	; 0xf32c <closedir+0x30>
    f304:	84 31       	cpi	r24, 0x14	; 20
    f306:	91 05       	cpc	r25, r1
    f308:	40 f4       	brcc	.+16     	; 0xf31a <closedir+0x1e>
    f30a:	fc 01       	movw	r30, r24
    f30c:	ec 53       	subi	r30, 0x3C	; 60
    f30e:	f5 4f       	sbci	r31, 0xF5	; 245
    f310:	80 81       	ld	r24, Z
    f312:	08 2e       	mov	r0, r24
    f314:	00 0c       	add	r0, r0
    f316:	99 0b       	sbc	r25, r25
    f318:	02 c0       	rjmp	.+4      	; 0xf31e <closedir+0x22>
    f31a:	83 e2       	ldi	r24, 0x23	; 35
    f31c:	90 e0       	ldi	r25, 0x00	; 0
    f31e:	90 93 56 1c 	sts	0x1C56, r25	; 0x801c56 <errno+0x1>
    f322:	80 93 55 1c 	sts	0x1C55, r24	; 0x801c55 <errno>
    f326:	8f ef       	ldi	r24, 0xFF	; 255
    f328:	9f ef       	ldi	r25, 0xFF	; 255
    f32a:	08 95       	ret
    f32c:	80 e0       	ldi	r24, 0x00	; 0
    f32e:	90 e0       	ldi	r25, 0x00	; 0
    f330:	08 95       	ret

0000f332 <opendir>:
    f332:	bc 01       	movw	r22, r24
    f334:	8d ec       	ldi	r24, 0xCD	; 205
    f336:	98 e1       	ldi	r25, 0x18	; 24
    f338:	0e 94 25 65 	call	0xca4a	; 0xca4a <f_opendir>
    f33c:	00 97       	sbiw	r24, 0x00	; 0
    f33e:	a1 f0       	breq	.+40     	; 0xf368 <opendir+0x36>
    f340:	84 31       	cpi	r24, 0x14	; 20
    f342:	91 05       	cpc	r25, r1
    f344:	40 f4       	brcc	.+16     	; 0xf356 <opendir+0x24>
    f346:	fc 01       	movw	r30, r24
    f348:	ec 53       	subi	r30, 0x3C	; 60
    f34a:	f5 4f       	sbci	r31, 0xF5	; 245
    f34c:	80 81       	ld	r24, Z
    f34e:	08 2e       	mov	r0, r24
    f350:	00 0c       	add	r0, r0
    f352:	99 0b       	sbc	r25, r25
    f354:	02 c0       	rjmp	.+4      	; 0xf35a <opendir+0x28>
    f356:	83 e2       	ldi	r24, 0x23	; 35
    f358:	90 e0       	ldi	r25, 0x00	; 0
    f35a:	90 93 56 1c 	sts	0x1C56, r25	; 0x801c56 <errno+0x1>
    f35e:	80 93 55 1c 	sts	0x1C55, r24	; 0x801c55 <errno>
    f362:	80 e0       	ldi	r24, 0x00	; 0
    f364:	90 e0       	ldi	r25, 0x00	; 0
    f366:	08 95       	ret
    f368:	8d ec       	ldi	r24, 0xCD	; 205
    f36a:	98 e1       	ldi	r25, 0x18	; 24
    f36c:	08 95       	ret

0000f36e <readdir>:
    f36e:	a6 e1       	ldi	r26, 0x16	; 22
    f370:	b1 e0       	ldi	r27, 0x01	; 1
    f372:	ed eb       	ldi	r30, 0xBD	; 189
    f374:	f9 e7       	ldi	r31, 0x79	; 121
    f376:	0c 94 27 e5 	jmp	0x1ca4e	; 0x1ca4e <__prologue_saves__+0x1c>
    f37a:	10 92 ce 17 	sts	0x17CE, r1	; 0x8017ce <_de>
    f37e:	be 01       	movw	r22, r28
    f380:	6f 5f       	subi	r22, 0xFF	; 255
    f382:	7f 4f       	sbci	r23, 0xFF	; 255
    f384:	0e 94 ab 65 	call	0xcb56	; 0xcb56 <f_readdir>
    f388:	00 97       	sbiw	r24, 0x00	; 0
    f38a:	a1 f0       	breq	.+40     	; 0xf3b4 <readdir+0x46>
    f38c:	84 31       	cpi	r24, 0x14	; 20
    f38e:	91 05       	cpc	r25, r1
    f390:	40 f4       	brcc	.+16     	; 0xf3a2 <readdir+0x34>
    f392:	fc 01       	movw	r30, r24
    f394:	ec 53       	subi	r30, 0x3C	; 60
    f396:	f5 4f       	sbci	r31, 0xF5	; 245
    f398:	80 81       	ld	r24, Z
    f39a:	08 2e       	mov	r0, r24
    f39c:	00 0c       	add	r0, r0
    f39e:	99 0b       	sbc	r25, r25
    f3a0:	02 c0       	rjmp	.+4      	; 0xf3a6 <readdir+0x38>
    f3a2:	83 e2       	ldi	r24, 0x23	; 35
    f3a4:	90 e0       	ldi	r25, 0x00	; 0
    f3a6:	90 93 56 1c 	sts	0x1C56, r25	; 0x801c56 <errno+0x1>
    f3aa:	80 93 55 1c 	sts	0x1C55, r24	; 0x801c55 <errno>
    f3ae:	80 e0       	ldi	r24, 0x00	; 0
    f3b0:	90 e0       	ldi	r25, 0x00	; 0
    f3b2:	16 c0       	rjmp	.+44     	; 0xf3e0 <readdir+0x72>
    f3b4:	be 01       	movw	r22, r28
    f3b6:	69 5e       	subi	r22, 0xE9	; 233
    f3b8:	7f 4f       	sbci	r23, 0xFF	; 255
    f3ba:	fb 01       	movw	r30, r22
    f3bc:	01 90       	ld	r0, Z+
    f3be:	00 20       	and	r0, r0
    f3c0:	e9 f7       	brne	.-6      	; 0xf3bc <readdir+0x4e>
    f3c2:	31 97       	sbiw	r30, 0x01	; 1
    f3c4:	8f 01       	movw	r16, r30
    f3c6:	06 1b       	sub	r16, r22
    f3c8:	17 0b       	sbc	r17, r23
    f3ca:	a8 01       	movw	r20, r16
    f3cc:	8e ec       	ldi	r24, 0xCE	; 206
    f3ce:	97 e1       	ldi	r25, 0x17	; 23
    f3d0:	0e 94 f0 32 	call	0x65e0	; 0x65e0 <strncpy>
    f3d4:	f8 01       	movw	r30, r16
    f3d6:	e2 53       	subi	r30, 0x32	; 50
    f3d8:	f8 4e       	sbci	r31, 0xE8	; 232
    f3da:	10 82       	st	Z, r1
    f3dc:	8e ec       	ldi	r24, 0xCE	; 206
    f3de:	97 e1       	ldi	r25, 0x17	; 23
    f3e0:	ca 5e       	subi	r28, 0xEA	; 234
    f3e2:	de 4f       	sbci	r29, 0xFE	; 254
    f3e4:	e4 e0       	ldi	r30, 0x04	; 4
    f3e6:	0c 94 43 e5 	jmp	0x1ca86	; 0x1ca86 <__epilogue_restores__+0x1c>

0000f3ea <perror>:
    f3ea:	ad b7       	in	r26, 0x3d	; 61
    f3ec:	be b7       	in	r27, 0x3e	; 62
    f3ee:	17 97       	sbiw	r26, 0x07	; 7
    f3f0:	0f b6       	in	r0, 0x3f	; 63
    f3f2:	f8 94       	cli
    f3f4:	be bf       	out	0x3e, r27	; 62
    f3f6:	0f be       	out	0x3f, r0	; 63
    f3f8:	ad bf       	out	0x3d, r26	; 61
    f3fa:	20 91 55 1c 	lds	r18, 0x1C55	; 0x801c55 <errno>
    f3fe:	30 91 56 1c 	lds	r19, 0x1C56	; 0x801c56 <errno+0x1>
    f402:	23 32       	cpi	r18, 0x23	; 35
    f404:	31 05       	cpc	r19, r1
    f406:	40 f4       	brcc	.+16     	; 0xf418 <perror+0x2e>
    f408:	22 0f       	add	r18, r18
    f40a:	33 1f       	adc	r19, r19
    f40c:	f9 01       	movw	r30, r18
    f40e:	ed 5b       	subi	r30, 0xBD	; 189
    f410:	fe 4f       	sbci	r31, 0xFE	; 254
    f412:	20 81       	ld	r18, Z
    f414:	31 81       	ldd	r19, Z+1	; 0x01
    f416:	04 c0       	rjmp	.+8      	; 0xf420 <perror+0x36>
    f418:	20 91 89 01 	lds	r18, 0x0189	; 0x800189 <sys_errlist+0x46>
    f41c:	30 91 8a 01 	lds	r19, 0x018A	; 0x80018a <sys_errlist+0x47>
    f420:	00 97       	sbiw	r24, 0x00	; 0
    f422:	99 f0       	breq	.+38     	; 0xf44a <perror+0x60>
    f424:	fc 01       	movw	r30, r24
    f426:	40 81       	ld	r20, Z
    f428:	44 23       	and	r20, r20
    f42a:	79 f0       	breq	.+30     	; 0xf44a <perror+0x60>
    f42c:	ed b7       	in	r30, 0x3d	; 61
    f42e:	fe b7       	in	r31, 0x3e	; 62
    f430:	37 83       	std	Z+7, r19	; 0x07
    f432:	26 83       	std	Z+6, r18	; 0x06
    f434:	95 83       	std	Z+5, r25	; 0x05
    f436:	84 83       	std	Z+4, r24	; 0x04
    f438:	8c e2       	ldi	r24, 0x2C	; 44
    f43a:	9b e0       	ldi	r25, 0x0B	; 11
    f43c:	a0 e0       	ldi	r26, 0x00	; 0
    f43e:	81 83       	std	Z+1, r24	; 0x01
    f440:	92 83       	std	Z+2, r25	; 0x02
    f442:	a3 83       	std	Z+3, r26	; 0x03
    f444:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    f448:	0c c0       	rjmp	.+24     	; 0xf462 <perror+0x78>
    f44a:	ed b7       	in	r30, 0x3d	; 61
    f44c:	fe b7       	in	r31, 0x3e	; 62
    f44e:	35 83       	std	Z+5, r19	; 0x05
    f450:	24 83       	std	Z+4, r18	; 0x04
    f452:	88 e2       	ldi	r24, 0x28	; 40
    f454:	9b e0       	ldi	r25, 0x0B	; 11
    f456:	a0 e0       	ldi	r26, 0x00	; 0
    f458:	81 83       	std	Z+1, r24	; 0x01
    f45a:	92 83       	std	Z+2, r25	; 0x02
    f45c:	a3 83       	std	Z+3, r26	; 0x03
    f45e:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    f462:	ad b7       	in	r26, 0x3d	; 61
    f464:	be b7       	in	r27, 0x3e	; 62
    f466:	17 96       	adiw	r26, 0x07	; 7
    f468:	0f b6       	in	r0, 0x3f	; 63
    f46a:	f8 94       	cli
    f46c:	be bf       	out	0x3e, r27	; 62
    f46e:	0f be       	out	0x3f, r0	; 63
    f470:	ad bf       	out	0x3d, r26	; 61
    f472:	08 95       	ret

0000f474 <fdevopen>:
    f474:	0f 93       	push	r16
    f476:	1f 93       	push	r17
    f478:	cf 93       	push	r28
    f47a:	df 93       	push	r29
    f47c:	00 97       	sbiw	r24, 0x00	; 0
    f47e:	31 f4       	brne	.+12     	; 0xf48c <fdevopen+0x18>
    f480:	61 15       	cp	r22, r1
    f482:	71 05       	cpc	r23, r1
    f484:	19 f4       	brne	.+6      	; 0xf48c <fdevopen+0x18>
    f486:	80 e0       	ldi	r24, 0x00	; 0
    f488:	90 e0       	ldi	r25, 0x00	; 0
    f48a:	3a c0       	rjmp	.+116    	; 0xf500 <fdevopen+0x8c>
    f48c:	8b 01       	movw	r16, r22
    f48e:	ec 01       	movw	r28, r24
    f490:	6e e0       	ldi	r22, 0x0E	; 14
    f492:	70 e0       	ldi	r23, 0x00	; 0
    f494:	81 e0       	ldi	r24, 0x01	; 1
    f496:	90 e0       	ldi	r25, 0x00	; 0
    f498:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <safecalloc>
    f49c:	fc 01       	movw	r30, r24
    f49e:	89 2b       	or	r24, r25
    f4a0:	91 f3       	breq	.-28     	; 0xf486 <fdevopen+0x12>
    f4a2:	80 e8       	ldi	r24, 0x80	; 128
    f4a4:	83 83       	std	Z+3, r24	; 0x03
    f4a6:	01 15       	cp	r16, r1
    f4a8:	11 05       	cpc	r17, r1
    f4aa:	71 f0       	breq	.+28     	; 0xf4c8 <fdevopen+0x54>
    f4ac:	13 87       	std	Z+11, r17	; 0x0b
    f4ae:	02 87       	std	Z+10, r16	; 0x0a
    f4b0:	81 e8       	ldi	r24, 0x81	; 129
    f4b2:	83 83       	std	Z+3, r24	; 0x03
    f4b4:	80 91 57 1c 	lds	r24, 0x1C57	; 0x801c57 <__iob>
    f4b8:	90 91 58 1c 	lds	r25, 0x1C58	; 0x801c58 <__iob+0x1>
    f4bc:	89 2b       	or	r24, r25
    f4be:	21 f4       	brne	.+8      	; 0xf4c8 <fdevopen+0x54>
    f4c0:	f0 93 58 1c 	sts	0x1C58, r31	; 0x801c58 <__iob+0x1>
    f4c4:	e0 93 57 1c 	sts	0x1C57, r30	; 0x801c57 <__iob>
    f4c8:	20 97       	sbiw	r28, 0x00	; 0
    f4ca:	c9 f0       	breq	.+50     	; 0xf4fe <fdevopen+0x8a>
    f4cc:	d1 87       	std	Z+9, r29	; 0x09
    f4ce:	c0 87       	std	Z+8, r28	; 0x08
    f4d0:	83 81       	ldd	r24, Z+3	; 0x03
    f4d2:	82 60       	ori	r24, 0x02	; 2
    f4d4:	83 83       	std	Z+3, r24	; 0x03
    f4d6:	80 91 59 1c 	lds	r24, 0x1C59	; 0x801c59 <__iob+0x2>
    f4da:	90 91 5a 1c 	lds	r25, 0x1C5A	; 0x801c5a <__iob+0x3>
    f4de:	89 2b       	or	r24, r25
    f4e0:	21 f4       	brne	.+8      	; 0xf4ea <fdevopen+0x76>
    f4e2:	f0 93 5a 1c 	sts	0x1C5A, r31	; 0x801c5a <__iob+0x3>
    f4e6:	e0 93 59 1c 	sts	0x1C59, r30	; 0x801c59 <__iob+0x2>
    f4ea:	80 91 5b 1c 	lds	r24, 0x1C5B	; 0x801c5b <__iob+0x4>
    f4ee:	90 91 5c 1c 	lds	r25, 0x1C5C	; 0x801c5c <__iob+0x5>
    f4f2:	89 2b       	or	r24, r25
    f4f4:	21 f4       	brne	.+8      	; 0xf4fe <fdevopen+0x8a>
    f4f6:	f0 93 5c 1c 	sts	0x1C5C, r31	; 0x801c5c <__iob+0x5>
    f4fa:	e0 93 5b 1c 	sts	0x1C5B, r30	; 0x801c5b <__iob+0x4>
    f4fe:	cf 01       	movw	r24, r30
    f500:	df 91       	pop	r29
    f502:	cf 91       	pop	r28
    f504:	1f 91       	pop	r17
    f506:	0f 91       	pop	r16
    f508:	08 95       	ret

0000f50a <fat_time_to_unix>:
    f50a:	a6 e1       	ldi	r26, 0x16	; 22
    f50c:	b0 e0       	ldi	r27, 0x00	; 0
    f50e:	eb e8       	ldi	r30, 0x8B	; 139
    f510:	fa e7       	ldi	r31, 0x7A	; 122
    f512:	0c 94 29 e5 	jmp	0x1ca52	; 0x1ca52 <__prologue_saves__+0x20>
    f516:	fe 01       	movw	r30, r28
    f518:	31 96       	adiw	r30, 0x01	; 1
    f51a:	26 e1       	ldi	r18, 0x16	; 22
    f51c:	df 01       	movw	r26, r30
    f51e:	1d 92       	st	X+, r1
    f520:	2a 95       	dec	r18
    f522:	e9 f7       	brne	.-6      	; 0xf51e <fat_time_to_unix+0x14>
    f524:	9b 01       	movw	r18, r22
    f526:	22 0f       	add	r18, r18
    f528:	33 1f       	adc	r19, r19
    f52a:	2e 73       	andi	r18, 0x3E	; 62
    f52c:	33 27       	eor	r19, r19
    f52e:	3a 83       	std	Y+2, r19	; 0x02
    f530:	29 83       	std	Y+1, r18	; 0x01
    f532:	9b 01       	movw	r18, r22
    f534:	55 e0       	ldi	r21, 0x05	; 5
    f536:	36 95       	lsr	r19
    f538:	27 95       	ror	r18
    f53a:	5a 95       	dec	r21
    f53c:	e1 f7       	brne	.-8      	; 0xf536 <fat_time_to_unix+0x2c>
    f53e:	2f 73       	andi	r18, 0x3F	; 63
    f540:	33 27       	eor	r19, r19
    f542:	3c 83       	std	Y+4, r19	; 0x04
    f544:	2b 83       	std	Y+3, r18	; 0x03
    f546:	27 2f       	mov	r18, r23
    f548:	26 95       	lsr	r18
    f54a:	26 95       	lsr	r18
    f54c:	26 95       	lsr	r18
    f54e:	2d 83       	std	Y+5, r18	; 0x05
    f550:	1e 82       	std	Y+6, r1	; 0x06
    f552:	9c 01       	movw	r18, r24
    f554:	2f 71       	andi	r18, 0x1F	; 31
    f556:	33 27       	eor	r19, r19
    f558:	38 87       	std	Y+8, r19	; 0x08
    f55a:	2f 83       	std	Y+7, r18	; 0x07
    f55c:	9c 01       	movw	r18, r24
    f55e:	65 e0       	ldi	r22, 0x05	; 5
    f560:	36 95       	lsr	r19
    f562:	27 95       	ror	r18
    f564:	6a 95       	dec	r22
    f566:	e1 f7       	brne	.-8      	; 0xf560 <fat_time_to_unix+0x56>
    f568:	2f 70       	andi	r18, 0x0F	; 15
    f56a:	33 27       	eor	r19, r19
    f56c:	21 50       	subi	r18, 0x01	; 1
    f56e:	31 09       	sbc	r19, r1
    f570:	3a 87       	std	Y+10, r19	; 0x0a
    f572:	29 87       	std	Y+9, r18	; 0x09
    f574:	9c 01       	movw	r18, r24
    f576:	23 2f       	mov	r18, r19
    f578:	33 27       	eor	r19, r19
    f57a:	26 95       	lsr	r18
    f57c:	20 5b       	subi	r18, 0xB0	; 176
    f57e:	3f 4f       	sbci	r19, 0xFF	; 255
    f580:	3c 87       	std	Y+12, r19	; 0x0c
    f582:	2b 87       	std	Y+11, r18	; 0x0b
    f584:	cf 01       	movw	r24, r30
    f586:	0e 94 0b 3c 	call	0x7816	; 0x7816 <timegm>
    f58a:	66 96       	adiw	r28, 0x16	; 22
    f58c:	e2 e0       	ldi	r30, 0x02	; 2
    f58e:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__epilogue_restores__+0x20>

0000f592 <stat>:
    f592:	a6 e1       	ldi	r26, 0x16	; 22
    f594:	b1 e0       	ldi	r27, 0x01	; 1
    f596:	ef ec       	ldi	r30, 0xCF	; 207
    f598:	fa e7       	ldi	r31, 0x7A	; 122
    f59a:	0c 94 23 e5 	jmp	0x1ca46	; 0x1ca46 <__prologue_saves__+0x14>
    f59e:	6c 01       	movw	r12, r24
    f5a0:	8b 01       	movw	r16, r22
    f5a2:	10 92 56 1c 	sts	0x1C56, r1	; 0x801c56 <errno+0x1>
    f5a6:	10 92 55 1c 	sts	0x1C55, r1	; 0x801c55 <errno>
    f5aa:	6a e1       	ldi	r22, 0x1A	; 26
    f5ac:	78 e0       	ldi	r23, 0x08	; 8
    f5ae:	0e 94 dd 33 	call	0x67ba	; 0x67ba <MATCH>
    f5b2:	89 2b       	or	r24, r25
    f5b4:	01 f1       	breq	.+64     	; 0xf5f6 <stat+0x64>
    f5b6:	f8 01       	movw	r30, r16
    f5b8:	14 a2       	std	Z+36, r1	; 0x24
    f5ba:	15 a2       	std	Z+37, r1	; 0x25
    f5bc:	16 a2       	std	Z+38, r1	; 0x26
    f5be:	17 a2       	std	Z+39, r1	; 0x27
    f5c0:	10 a6       	std	Z+40, r1	; 0x28
    f5c2:	11 a6       	std	Z+41, r1	; 0x29
    f5c4:	12 a6       	std	Z+42, r1	; 0x2a
    f5c6:	13 a6       	std	Z+43, r1	; 0x2b
    f5c8:	14 a6       	std	Z+44, r1	; 0x2c
    f5ca:	15 a6       	std	Z+45, r1	; 0x2d
    f5cc:	16 a6       	std	Z+46, r1	; 0x2e
    f5ce:	17 a6       	std	Z+47, r1	; 0x2f
    f5d0:	11 8a       	std	Z+17, r1	; 0x11
    f5d2:	10 8a       	std	Z+16, r1	; 0x10
    f5d4:	13 8a       	std	Z+19, r1	; 0x13
    f5d6:	12 8a       	std	Z+18, r1	; 0x12
    f5d8:	10 8e       	std	Z+24, r1	; 0x18
    f5da:	11 8e       	std	Z+25, r1	; 0x19
    f5dc:	12 8e       	std	Z+26, r1	; 0x1a
    f5de:	13 8e       	std	Z+27, r1	; 0x1b
    f5e0:	80 e0       	ldi	r24, 0x00	; 0
    f5e2:	90 e4       	ldi	r25, 0x40	; 64
    f5e4:	a0 e0       	ldi	r26, 0x00	; 0
    f5e6:	b0 e0       	ldi	r27, 0x00	; 0
    f5e8:	80 87       	std	Z+8, r24	; 0x08
    f5ea:	91 87       	std	Z+9, r25	; 0x09
    f5ec:	a2 87       	std	Z+10, r26	; 0x0a
    f5ee:	b3 87       	std	Z+11, r27	; 0x0b
    f5f0:	e1 2c       	mov	r14, r1
    f5f2:	f1 2c       	mov	r15, r1
    f5f4:	62 c0       	rjmp	.+196    	; 0xf6ba <stat+0x128>
    f5f6:	64 ec       	ldi	r22, 0xC4	; 196
    f5f8:	77 e0       	ldi	r23, 0x07	; 7
    f5fa:	c6 01       	movw	r24, r12
    f5fc:	0e 94 dd 33 	call	0x67ba	; 0x67ba <MATCH>
    f600:	89 2b       	or	r24, r25
    f602:	c9 f6       	brne	.-78     	; 0xf5b6 <stat+0x24>
    f604:	6e e0       	ldi	r22, 0x0E	; 14
    f606:	72 e1       	ldi	r23, 0x12	; 18
    f608:	c6 01       	movw	r24, r12
    f60a:	0e 94 dd 33 	call	0x67ba	; 0x67ba <MATCH>
    f60e:	7c 01       	movw	r14, r24
    f610:	89 2b       	or	r24, r25
    f612:	89 f6       	brne	.-94     	; 0xf5b6 <stat+0x24>
    f614:	be 01       	movw	r22, r28
    f616:	6f 5f       	subi	r22, 0xFF	; 255
    f618:	7f 4f       	sbci	r23, 0xFF	; 255
    f61a:	c6 01       	movw	r24, r12
    f61c:	0e 94 ef 65 	call	0xcbde	; 0xcbde <f_stat>
    f620:	00 97       	sbiw	r24, 0x00	; 0
    f622:	a9 f0       	breq	.+42     	; 0xf64e <stat+0xbc>
    f624:	84 31       	cpi	r24, 0x14	; 20
    f626:	91 05       	cpc	r25, r1
    f628:	40 f4       	brcc	.+16     	; 0xf63a <stat+0xa8>
    f62a:	fc 01       	movw	r30, r24
    f62c:	ec 53       	subi	r30, 0x3C	; 60
    f62e:	f5 4f       	sbci	r31, 0xF5	; 245
    f630:	80 81       	ld	r24, Z
    f632:	08 2e       	mov	r0, r24
    f634:	00 0c       	add	r0, r0
    f636:	99 0b       	sbc	r25, r25
    f638:	02 c0       	rjmp	.+4      	; 0xf63e <stat+0xac>
    f63a:	83 e2       	ldi	r24, 0x23	; 35
    f63c:	90 e0       	ldi	r25, 0x00	; 0
    f63e:	90 93 56 1c 	sts	0x1C56, r25	; 0x801c56 <errno+0x1>
    f642:	80 93 55 1c 	sts	0x1C55, r24	; 0x801c55 <errno>
    f646:	ee 24       	eor	r14, r14
    f648:	ea 94       	dec	r14
    f64a:	fe 2c       	mov	r15, r14
    f64c:	36 c0       	rjmp	.+108    	; 0xf6ba <stat+0x128>
    f64e:	89 81       	ldd	r24, Y+1	; 0x01
    f650:	9a 81       	ldd	r25, Y+2	; 0x02
    f652:	ab 81       	ldd	r26, Y+3	; 0x03
    f654:	bc 81       	ldd	r27, Y+4	; 0x04
    f656:	f8 01       	movw	r30, r16
    f658:	80 8f       	std	Z+24, r24	; 0x18
    f65a:	91 8f       	std	Z+25, r25	; 0x19
    f65c:	a2 8f       	std	Z+26, r26	; 0x1a
    f65e:	b3 8f       	std	Z+27, r27	; 0x1b
    f660:	6f 81       	ldd	r22, Y+7	; 0x07
    f662:	78 85       	ldd	r23, Y+8	; 0x08
    f664:	8d 81       	ldd	r24, Y+5	; 0x05
    f666:	9e 81       	ldd	r25, Y+6	; 0x06
    f668:	50 df       	rcall	.-352    	; 0xf50a <fat_time_to_unix>
    f66a:	f8 01       	movw	r30, r16
    f66c:	64 a3       	std	Z+36, r22	; 0x24
    f66e:	75 a3       	std	Z+37, r23	; 0x25
    f670:	86 a3       	std	Z+38, r24	; 0x26
    f672:	97 a3       	std	Z+39, r25	; 0x27
    f674:	60 a7       	std	Z+40, r22	; 0x28
    f676:	71 a7       	std	Z+41, r23	; 0x29
    f678:	82 a7       	std	Z+42, r24	; 0x2a
    f67a:	93 a7       	std	Z+43, r25	; 0x2b
    f67c:	64 a7       	std	Z+44, r22	; 0x2c
    f67e:	75 a7       	std	Z+45, r23	; 0x2d
    f680:	86 a7       	std	Z+46, r24	; 0x2e
    f682:	97 a7       	std	Z+47, r25	; 0x2f
    f684:	29 85       	ldd	r18, Y+9	; 0x09
    f686:	20 fd       	sbrc	r18, 0
    f688:	03 c0       	rjmp	.+6      	; 0xf690 <stat+0xfe>
    f68a:	8f ef       	ldi	r24, 0xFF	; 255
    f68c:	91 e0       	ldi	r25, 0x01	; 1
    f68e:	02 c0       	rjmp	.+4      	; 0xf694 <stat+0x102>
    f690:	8d e6       	ldi	r24, 0x6D	; 109
    f692:	91 e0       	ldi	r25, 0x01	; 1
    f694:	48 ee       	ldi	r20, 0xE8	; 232
    f696:	53 e0       	ldi	r21, 0x03	; 3
    f698:	f8 01       	movw	r30, r16
    f69a:	51 8b       	std	Z+17, r21	; 0x11
    f69c:	40 8b       	std	Z+16, r20	; 0x10
    f69e:	53 8b       	std	Z+19, r21	; 0x13
    f6a0:	42 8b       	std	Z+18, r20	; 0x12
    f6a2:	24 ff       	sbrs	r18, 4
    f6a4:	02 c0       	rjmp	.+4      	; 0xf6aa <stat+0x118>
    f6a6:	90 64       	ori	r25, 0x40	; 64
    f6a8:	01 c0       	rjmp	.+2      	; 0xf6ac <stat+0x11a>
    f6aa:	90 68       	ori	r25, 0x80	; 128
    f6ac:	a0 e0       	ldi	r26, 0x00	; 0
    f6ae:	b0 e0       	ldi	r27, 0x00	; 0
    f6b0:	f8 01       	movw	r30, r16
    f6b2:	80 87       	std	Z+8, r24	; 0x08
    f6b4:	91 87       	std	Z+9, r25	; 0x09
    f6b6:	a2 87       	std	Z+10, r26	; 0x0a
    f6b8:	b3 87       	std	Z+11, r27	; 0x0b
    f6ba:	c7 01       	movw	r24, r14
    f6bc:	ca 5e       	subi	r28, 0xEA	; 234
    f6be:	de 4f       	sbci	r29, 0xFE	; 254
    f6c0:	e8 e0       	ldi	r30, 0x08	; 8
    f6c2:	0c 94 3f e5 	jmp	0x1ca7e	; 0x1ca7e <__epilogue_restores__+0x14>

0000f6c6 <unix_time_to_fat>:
    f6c6:	a4 e0       	ldi	r26, 0x04	; 4
    f6c8:	b0 e0       	ldi	r27, 0x00	; 0
    f6ca:	e9 e6       	ldi	r30, 0x69	; 105
    f6cc:	fb e7       	ldi	r31, 0x7B	; 123
    f6ce:	0c 94 25 e5 	jmp	0x1ca4a	; 0x1ca4a <__prologue_saves__+0x18>
    f6d2:	69 83       	std	Y+1, r22	; 0x01
    f6d4:	7a 83       	std	Y+2, r23	; 0x02
    f6d6:	8b 83       	std	Y+3, r24	; 0x03
    f6d8:	9c 83       	std	Y+4, r25	; 0x04
    f6da:	7a 01       	movw	r14, r20
    f6dc:	89 01       	movw	r16, r18
    f6de:	ce 01       	movw	r24, r28
    f6e0:	01 96       	adiw	r24, 0x01	; 1
    f6e2:	0e 94 4c 39 	call	0x7298	; 0x7298 <gmtime>
    f6e6:	fc 01       	movw	r30, r24
    f6e8:	22 85       	ldd	r18, Z+10	; 0x0a
    f6ea:	33 85       	ldd	r19, Z+11	; 0x0b
    f6ec:	20 55       	subi	r18, 0x50	; 80
    f6ee:	31 09       	sbc	r19, r1
    f6f0:	c9 01       	movw	r24, r18
    f6f2:	98 2f       	mov	r25, r24
    f6f4:	88 27       	eor	r24, r24
    f6f6:	99 0f       	add	r25, r25
    f6f8:	20 85       	ldd	r18, Z+8	; 0x08
    f6fa:	31 85       	ldd	r19, Z+9	; 0x09
    f6fc:	2f 5f       	subi	r18, 0xFF	; 255
    f6fe:	3f 4f       	sbci	r19, 0xFF	; 255
    f700:	45 e0       	ldi	r20, 0x05	; 5
    f702:	22 0f       	add	r18, r18
    f704:	33 1f       	adc	r19, r19
    f706:	4a 95       	dec	r20
    f708:	e1 f7       	brne	.-8      	; 0xf702 <unix_time_to_fat+0x3c>
    f70a:	28 2b       	or	r18, r24
    f70c:	39 2b       	or	r19, r25
    f70e:	86 81       	ldd	r24, Z+6	; 0x06
    f710:	97 81       	ldd	r25, Z+7	; 0x07
    f712:	28 2b       	or	r18, r24
    f714:	39 2b       	or	r19, r25
    f716:	d7 01       	movw	r26, r14
    f718:	2d 93       	st	X+, r18
    f71a:	3c 93       	st	X, r19
    f71c:	84 81       	ldd	r24, Z+4	; 0x04
    f71e:	20 e0       	ldi	r18, 0x00	; 0
    f720:	30 e0       	ldi	r19, 0x00	; 0
    f722:	38 2f       	mov	r19, r24
    f724:	33 0f       	add	r19, r19
    f726:	33 0f       	add	r19, r19
    f728:	33 0f       	add	r19, r19
    f72a:	82 81       	ldd	r24, Z+2	; 0x02
    f72c:	93 81       	ldd	r25, Z+3	; 0x03
    f72e:	55 e0       	ldi	r21, 0x05	; 5
    f730:	88 0f       	add	r24, r24
    f732:	99 1f       	adc	r25, r25
    f734:	5a 95       	dec	r21
    f736:	e1 f7       	brne	.-8      	; 0xf730 <unix_time_to_fat+0x6a>
    f738:	82 2b       	or	r24, r18
    f73a:	93 2b       	or	r25, r19
    f73c:	20 81       	ld	r18, Z
    f73e:	31 81       	ldd	r19, Z+1	; 0x01
    f740:	36 95       	lsr	r19
    f742:	27 95       	ror	r18
    f744:	82 2b       	or	r24, r18
    f746:	93 2b       	or	r25, r19
    f748:	f8 01       	movw	r30, r16
    f74a:	91 83       	std	Z+1, r25	; 0x01
    f74c:	80 83       	st	Z, r24
    f74e:	24 96       	adiw	r28, 0x04	; 4
    f750:	e6 e0       	ldi	r30, 0x06	; 6
    f752:	0c 94 41 e5 	jmp	0x1ca82	; 0x1ca82 <__epilogue_restores__+0x18>

0000f756 <utime>:
    f756:	aa e1       	ldi	r26, 0x1A	; 26
    f758:	b1 e0       	ldi	r27, 0x01	; 1
    f75a:	e1 eb       	ldi	r30, 0xB1	; 177
    f75c:	fb e7       	ldi	r31, 0x7B	; 123
    f75e:	0c 94 27 e5 	jmp	0x1ca4e	; 0x1ca4e <__prologue_saves__+0x1c>
    f762:	8c 01       	movw	r16, r24
    f764:	61 15       	cp	r22, r1
    f766:	71 05       	cpc	r23, r1
    f768:	31 f0       	breq	.+12     	; 0xf776 <utime+0x20>
    f76a:	fb 01       	movw	r30, r22
    f76c:	64 81       	ldd	r22, Z+4	; 0x04
    f76e:	75 81       	ldd	r23, Z+5	; 0x05
    f770:	86 81       	ldd	r24, Z+6	; 0x06
    f772:	97 81       	ldd	r25, Z+7	; 0x07
    f774:	04 c0       	rjmp	.+8      	; 0xf77e <utime+0x28>
    f776:	80 e0       	ldi	r24, 0x00	; 0
    f778:	90 e0       	ldi	r25, 0x00	; 0
    f77a:	0e 94 a6 39 	call	0x734c	; 0x734c <time>
    f77e:	9e 01       	movw	r18, r28
    f780:	29 5e       	subi	r18, 0xE9	; 233
    f782:	3e 4f       	sbci	r19, 0xFE	; 254
    f784:	ae 01       	movw	r20, r28
    f786:	47 5e       	subi	r20, 0xE7	; 231
    f788:	5e 4f       	sbci	r21, 0xFE	; 254
    f78a:	9d df       	rcall	.-198    	; 0xf6c6 <unix_time_to_fat>
    f78c:	c7 5e       	subi	r28, 0xE7	; 231
    f78e:	de 4f       	sbci	r29, 0xFE	; 254
    f790:	88 81       	ld	r24, Y
    f792:	99 81       	ldd	r25, Y+1	; 0x01
    f794:	c9 51       	subi	r28, 0x19	; 25
    f796:	d1 40       	sbci	r29, 0x01	; 1
    f798:	9e 83       	std	Y+6, r25	; 0x06
    f79a:	8d 83       	std	Y+5, r24	; 0x05
    f79c:	c9 5e       	subi	r28, 0xE9	; 233
    f79e:	de 4f       	sbci	r29, 0xFE	; 254
    f7a0:	88 81       	ld	r24, Y
    f7a2:	99 81       	ldd	r25, Y+1	; 0x01
    f7a4:	c7 51       	subi	r28, 0x17	; 23
    f7a6:	d1 40       	sbci	r29, 0x01	; 1
    f7a8:	98 87       	std	Y+8, r25	; 0x08
    f7aa:	8f 83       	std	Y+7, r24	; 0x07
    f7ac:	be 01       	movw	r22, r28
    f7ae:	6f 5f       	subi	r22, 0xFF	; 255
    f7b0:	7f 4f       	sbci	r23, 0xFF	; 255
    f7b2:	c8 01       	movw	r24, r16
    f7b4:	0e 94 06 6a 	call	0xd40c	; 0xd40c <f_utime>
    f7b8:	84 31       	cpi	r24, 0x14	; 20
    f7ba:	91 05       	cpc	r25, r1
    f7bc:	40 f4       	brcc	.+16     	; 0xf7ce <utime+0x78>
    f7be:	fc 01       	movw	r30, r24
    f7c0:	ec 53       	subi	r30, 0x3C	; 60
    f7c2:	f5 4f       	sbci	r31, 0xF5	; 245
    f7c4:	80 81       	ld	r24, Z
    f7c6:	08 2e       	mov	r0, r24
    f7c8:	00 0c       	add	r0, r0
    f7ca:	99 0b       	sbc	r25, r25
    f7cc:	02 c0       	rjmp	.+4      	; 0xf7d2 <utime+0x7c>
    f7ce:	83 e2       	ldi	r24, 0x23	; 35
    f7d0:	90 e0       	ldi	r25, 0x00	; 0
    f7d2:	c6 5e       	subi	r28, 0xE6	; 230
    f7d4:	de 4f       	sbci	r29, 0xFE	; 254
    f7d6:	e4 e0       	ldi	r30, 0x04	; 4
    f7d8:	0c 94 43 e5 	jmp	0x1ca86	; 0x1ca86 <__epilogue_restores__+0x1c>

0000f7dc <fileno_to_fatfs>:
    f7dc:	83 30       	cpi	r24, 0x03	; 3
    f7de:	91 05       	cpc	r25, r1
    f7e0:	48 f4       	brcc	.+18     	; 0xf7f4 <fileno_to_fatfs+0x18>
    f7e2:	89 e0       	ldi	r24, 0x09	; 9
    f7e4:	90 e0       	ldi	r25, 0x00	; 0
    f7e6:	90 93 56 1c 	sts	0x1C56, r25	; 0x801c56 <errno+0x1>
    f7ea:	80 93 55 1c 	sts	0x1C55, r24	; 0x801c55 <errno>
    f7ee:	80 e0       	ldi	r24, 0x00	; 0
    f7f0:	90 e0       	ldi	r25, 0x00	; 0
    f7f2:	08 95       	ret
    f7f4:	60 dc       	rcall	.-1856   	; 0xf0b6 <fileno_to_stream>
    f7f6:	00 97       	sbiw	r24, 0x00	; 0
    f7f8:	d1 f3       	breq	.-12     	; 0xf7ee <fileno_to_fatfs+0x12>
    f7fa:	fc 01       	movw	r30, r24
    f7fc:	84 85       	ldd	r24, Z+12	; 0x0c
    f7fe:	95 85       	ldd	r25, Z+13	; 0x0d
    f800:	00 97       	sbiw	r24, 0x00	; 0
    f802:	79 f3       	breq	.-34     	; 0xf7e2 <fileno_to_fatfs+0x6>
    f804:	08 95       	ret

0000f806 <ftell>:
    f806:	10 92 56 1c 	sts	0x1C56, r1	; 0x801c56 <errno+0x1>
    f80a:	10 92 55 1c 	sts	0x1C55, r1	; 0x801c55 <errno>
    f80e:	37 dc       	rcall	.-1938   	; 0xf07e <fileno>
    f810:	83 30       	cpi	r24, 0x03	; 3
    f812:	91 05       	cpc	r25, r1
    f814:	48 f0       	brcs	.+18     	; 0xf828 <ftell+0x22>
    f816:	e2 df       	rcall	.-60     	; 0xf7dc <fileno_to_fatfs>
    f818:	00 97       	sbiw	r24, 0x00	; 0
    f81a:	51 f4       	brne	.+20     	; 0xf830 <ftell+0x2a>
    f81c:	89 e0       	ldi	r24, 0x09	; 9
    f81e:	90 e0       	ldi	r25, 0x00	; 0
    f820:	90 93 56 1c 	sts	0x1C56, r25	; 0x801c56 <errno+0x1>
    f824:	80 93 55 1c 	sts	0x1C55, r24	; 0x801c55 <errno>
    f828:	6f ef       	ldi	r22, 0xFF	; 255
    f82a:	7f ef       	ldi	r23, 0xFF	; 255
    f82c:	cb 01       	movw	r24, r22
    f82e:	08 95       	ret
    f830:	fc 01       	movw	r30, r24
    f832:	60 89       	ldd	r22, Z+16	; 0x10
    f834:	71 89       	ldd	r23, Z+17	; 0x11
    f836:	82 89       	ldd	r24, Z+18	; 0x12
    f838:	93 89       	ldd	r25, Z+19	; 0x13
    f83a:	08 95       	ret

0000f83c <lseek>:
    f83c:	a3 e0       	ldi	r26, 0x03	; 3
    f83e:	b0 e0       	ldi	r27, 0x00	; 0
    f840:	e4 e2       	ldi	r30, 0x24	; 36
    f842:	fc e7       	ldi	r31, 0x7C	; 124
    f844:	0c 94 21 e5 	jmp	0x1ca42	; 0x1ca42 <__prologue_saves__+0x10>
    f848:	5c 01       	movw	r10, r24
    f84a:	6a 01       	movw	r12, r20
    f84c:	7b 01       	movw	r14, r22
    f84e:	89 01       	movw	r16, r18
    f850:	10 92 56 1c 	sts	0x1C56, r1	; 0x801c56 <errno+0x1>
    f854:	10 92 55 1c 	sts	0x1C55, r1	; 0x801c55 <errno>
    f858:	c1 df       	rcall	.-126    	; 0xf7dc <fileno_to_fatfs>
    f85a:	ec 01       	movw	r28, r24
    f85c:	89 2b       	or	r24, r25
    f85e:	19 f4       	brne	.+6      	; 0xf866 <lseek+0x2a>
    f860:	88 e1       	ldi	r24, 0x18	; 24
    f862:	90 e0       	ldi	r25, 0x00	; 0
    f864:	26 c0       	rjmp	.+76     	; 0xf8b2 <lseek+0x76>
    f866:	83 e0       	ldi	r24, 0x03	; 3
    f868:	a8 16       	cp	r10, r24
    f86a:	b1 04       	cpc	r11, r1
    f86c:	d0 f1       	brcs	.+116    	; 0xf8e2 <lseek+0xa6>
    f86e:	c5 01       	movw	r24, r10
    f870:	22 dc       	rcall	.-1980   	; 0xf0b6 <fileno_to_stream>
    f872:	fc 01       	movw	r30, r24
    f874:	93 81       	ldd	r25, Z+3	; 0x03
    f876:	90 64       	ori	r25, 0x40	; 64
    f878:	93 83       	std	Z+3, r25	; 0x03
    f87a:	02 30       	cpi	r16, 0x02	; 2
    f87c:	11 05       	cpc	r17, r1
    f87e:	a9 f5       	brne	.+106    	; 0xf8ea <lseek+0xae>
    f880:	8a 85       	ldd	r24, Y+10	; 0x0a
    f882:	9b 85       	ldd	r25, Y+11	; 0x0b
    f884:	ac 85       	ldd	r26, Y+12	; 0x0c
    f886:	bd 85       	ldd	r27, Y+13	; 0x0d
    f888:	c8 0e       	add	r12, r24
    f88a:	d9 1e       	adc	r13, r25
    f88c:	ea 1e       	adc	r14, r26
    f88e:	fb 1e       	adc	r15, r27
    f890:	b7 01       	movw	r22, r14
    f892:	a6 01       	movw	r20, r12
    f894:	ce 01       	movw	r24, r28
    f896:	0e 94 69 62 	call	0xc4d2	; 0xc4d2 <f_lseek>
    f89a:	00 97       	sbiw	r24, 0x00	; 0
    f89c:	79 f0       	breq	.+30     	; 0xf8bc <lseek+0x80>
    f89e:	84 31       	cpi	r24, 0x14	; 20
    f8a0:	91 05       	cpc	r25, r1
    f8a2:	58 f5       	brcc	.+86     	; 0xf8fa <lseek+0xbe>
    f8a4:	fc 01       	movw	r30, r24
    f8a6:	ec 53       	subi	r30, 0x3C	; 60
    f8a8:	f5 4f       	sbci	r31, 0xF5	; 245
    f8aa:	80 81       	ld	r24, Z
    f8ac:	08 2e       	mov	r0, r24
    f8ae:	00 0c       	add	r0, r0
    f8b0:	99 0b       	sbc	r25, r25
    f8b2:	90 93 56 1c 	sts	0x1C56, r25	; 0x801c56 <errno+0x1>
    f8b6:	80 93 55 1c 	sts	0x1C55, r24	; 0x801c55 <errno>
    f8ba:	13 c0       	rjmp	.+38     	; 0xf8e2 <lseek+0xa6>
    f8bc:	68 89       	ldd	r22, Y+16	; 0x10
    f8be:	79 89       	ldd	r23, Y+17	; 0x11
    f8c0:	8a 89       	ldd	r24, Y+18	; 0x12
    f8c2:	9b 89       	ldd	r25, Y+19	; 0x13
    f8c4:	c6 16       	cp	r12, r22
    f8c6:	d7 06       	cpc	r13, r23
    f8c8:	e8 06       	cpc	r14, r24
    f8ca:	f9 06       	cpc	r15, r25
    f8cc:	c9 f0       	breq	.+50     	; 0xf900 <lseek+0xc4>
    f8ce:	84 e3       	ldi	r24, 0x34	; 52
    f8d0:	9b e0       	ldi	r25, 0x0B	; 11
    f8d2:	a0 e0       	ldi	r26, 0x00	; 0
    f8d4:	ed b7       	in	r30, 0x3d	; 61
    f8d6:	fe b7       	in	r31, 0x3e	; 62
    f8d8:	81 83       	std	Z+1, r24	; 0x01
    f8da:	92 83       	std	Z+2, r25	; 0x02
    f8dc:	a3 83       	std	Z+3, r26	; 0x03
    f8de:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    f8e2:	6f ef       	ldi	r22, 0xFF	; 255
    f8e4:	7f ef       	ldi	r23, 0xFF	; 255
    f8e6:	cb 01       	movw	r24, r22
    f8e8:	0b c0       	rjmp	.+22     	; 0xf900 <lseek+0xc4>
    f8ea:	01 30       	cpi	r16, 0x01	; 1
    f8ec:	11 05       	cpc	r17, r1
    f8ee:	81 f6       	brne	.-96     	; 0xf890 <lseek+0x54>
    f8f0:	88 89       	ldd	r24, Y+16	; 0x10
    f8f2:	99 89       	ldd	r25, Y+17	; 0x11
    f8f4:	aa 89       	ldd	r26, Y+18	; 0x12
    f8f6:	bb 89       	ldd	r27, Y+19	; 0x13
    f8f8:	c7 cf       	rjmp	.-114    	; 0xf888 <lseek+0x4c>
    f8fa:	83 e2       	ldi	r24, 0x23	; 35
    f8fc:	90 e0       	ldi	r25, 0x00	; 0
    f8fe:	d9 cf       	rjmp	.-78     	; 0xf8b2 <lseek+0x76>
    f900:	cd b7       	in	r28, 0x3d	; 61
    f902:	de b7       	in	r29, 0x3e	; 62
    f904:	23 96       	adiw	r28, 0x03	; 3
    f906:	ea e0       	ldi	r30, 0x0A	; 10
    f908:	0c 94 3d e5 	jmp	0x1ca7a	; 0x1ca7a <__epilogue_restores__+0x10>

0000f90c <fseek>:
    f90c:	cf 92       	push	r12
    f90e:	df 92       	push	r13
    f910:	ef 92       	push	r14
    f912:	ff 92       	push	r15
    f914:	cf 93       	push	r28
    f916:	df 93       	push	r29
    f918:	6a 01       	movw	r12, r20
    f91a:	7b 01       	movw	r14, r22
    f91c:	e9 01       	movw	r28, r18
    f91e:	af db       	rcall	.-2210   	; 0xf07e <fileno>
    f920:	97 fd       	sbrc	r25, 7
    f922:	12 c0       	rjmp	.+36     	; 0xf948 <fseek+0x3c>
    f924:	9e 01       	movw	r18, r28
    f926:	b7 01       	movw	r22, r14
    f928:	a6 01       	movw	r20, r12
    f92a:	88 df       	rcall	.-240    	; 0xf83c <lseek>
    f92c:	21 e0       	ldi	r18, 0x01	; 1
    f92e:	30 e0       	ldi	r19, 0x00	; 0
    f930:	6f 3f       	cpi	r22, 0xFF	; 255
    f932:	7f 4f       	sbci	r23, 0xFF	; 255
    f934:	8f 4f       	sbci	r24, 0xFF	; 255
    f936:	9f 4f       	sbci	r25, 0xFF	; 255
    f938:	11 f0       	breq	.+4      	; 0xf93e <fseek+0x32>
    f93a:	20 e0       	ldi	r18, 0x00	; 0
    f93c:	30 e0       	ldi	r19, 0x00	; 0
    f93e:	88 27       	eor	r24, r24
    f940:	99 27       	eor	r25, r25
    f942:	82 1b       	sub	r24, r18
    f944:	93 0b       	sbc	r25, r19
    f946:	02 c0       	rjmp	.+4      	; 0xf94c <fseek+0x40>
    f948:	8f ef       	ldi	r24, 0xFF	; 255
    f94a:	9f ef       	ldi	r25, 0xFF	; 255
    f94c:	df 91       	pop	r29
    f94e:	cf 91       	pop	r28
    f950:	ff 90       	pop	r15
    f952:	ef 90       	pop	r14
    f954:	df 90       	pop	r13
    f956:	cf 90       	pop	r12
    f958:	08 95       	ret

0000f95a <read>:
///
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t read(int fd, const void *buf, size_t count)
{
    f95a:	a2 e0       	ldi	r26, 0x02	; 2
    f95c:	b0 e0       	ldi	r27, 0x00	; 0
    f95e:	e3 eb       	ldi	r30, 0xB3	; 179
    f960:	fc e7       	ldi	r31, 0x7C	; 124
    f962:	0c 94 21 e5 	jmp	0x1ca42	; 0x1ca42 <__prologue_saves__+0x10>
    f966:	5c 01       	movw	r10, r24
    f968:	8b 01       	movw	r16, r22
    f96a:	6a 01       	movw	r12, r20
    int ret;
    FIL *fh;
    FILE *stream;

    //FIXME
    *(char *) buf = 0;
    f96c:	fb 01       	movw	r30, r22
    f96e:	10 82       	st	Z, r1

    errno = 0;
    f970:	10 92 56 1c 	sts	0x1C56, r1	; 0x801c56 <errno+0x1>
    f974:	10 92 55 1c 	sts	0x1C55, r1	; 0x801c55 <errno>

    // TTY read function
    // FIXME should we really be blocking ???
    stream = fileno_to_stream(fd);
    f978:	9e db       	rcall	.-2244   	; 0xf0b6 <fileno_to_stream>
    if(stream == stdin)
    f97a:	7c 01       	movw	r14, r24
    f97c:	80 91 57 1c 	lds	r24, 0x1C57	; 0x801c57 <__iob>
    f980:	90 91 58 1c 	lds	r25, 0x1C58	; 0x801c58 <__iob+0x1>
    f984:	e8 16       	cp	r14, r24
    f986:	f9 06       	cpc	r15, r25
    {
        char *ptr = (char *) buf;
        // ungetc is undefined for read
        stream->flags |= __SUNGET;
    f988:	c9 f4       	brne	.+50     	; 0xf9bc <read+0x62>
    f98a:	f7 01       	movw	r30, r14
    f98c:	83 81       	ldd	r24, Z+3	; 0x03
    f98e:	80 64       	ori	r24, 0x40	; 64
        size = 0;
    f990:	83 83       	std	Z+3, r24	; 0x03
    f992:	1a 82       	std	Y+2, r1	; 0x02
    f994:	19 82       	std	Y+1, r1	; 0x01
    f996:	c0 0e       	add	r12, r16
        while(count--)
    f998:	d1 1e       	adc	r13, r17
    f99a:	0c 15       	cp	r16, r12
    f99c:	1d 05       	cpc	r17, r13
        {
            ret = fgetc(stream);
    f99e:	09 f4       	brne	.+2      	; 0xf9a2 <read+0x48>
    f9a0:	3d c0       	rjmp	.+122    	; 0xfa1c <read+0xc2>
            if(ret < 0)
    f9a2:	c7 01       	movw	r24, r14
    f9a4:	48 da       	rcall	.-2928   	; 0xee36 <fgetc>
                break;
            
            *ptr++ = ret;
    f9a6:	97 fd       	sbrc	r25, 7
    f9a8:	39 c0       	rjmp	.+114    	; 0xfa1c <read+0xc2>
    f9aa:	f8 01       	movw	r30, r16
            ++size;
    f9ac:	81 93       	st	Z+, r24
    f9ae:	8f 01       	movw	r16, r30
    f9b0:	89 81       	ldd	r24, Y+1	; 0x01
    f9b2:	9a 81       	ldd	r25, Y+2	; 0x02
    f9b4:	01 96       	adiw	r24, 0x01	; 1
    f9b6:	9a 83       	std	Y+2, r25	; 0x02
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    f9b8:	89 83       	std	Y+1, r24	; 0x01
    f9ba:	ef cf       	rjmp	.-34     	; 0xf99a <read+0x40>
    f9bc:	80 91 59 1c 	lds	r24, 0x1C59	; 0x801c59 <__iob+0x2>
    f9c0:	90 91 5a 1c 	lds	r25, 0x1C5A	; 0x801c5a <__iob+0x3>
    f9c4:	e8 16       	cp	r14, r24
    f9c6:	f9 06       	cpc	r15, r25
    f9c8:	71 f1       	breq	.+92     	; 0xfa26 <read+0xcc>
    f9ca:	80 91 5b 1c 	lds	r24, 0x1C5B	; 0x801c5b <__iob+0x4>
    f9ce:	90 91 5c 1c 	lds	r25, 0x1C5C	; 0x801c5c <__iob+0x5>
    {
        return(-1);
    }

    // fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f9d2:	e8 16       	cp	r14, r24
    f9d4:	f9 06       	cpc	r15, r25
    f9d6:	39 f1       	breq	.+78     	; 0xfa26 <read+0xcc>
    if ( fh == NULL )
    f9d8:	c5 01       	movw	r24, r10
    f9da:	00 df       	rcall	.-512    	; 0xf7dc <fileno_to_fatfs>
    {
        errno = EBADF;
    f9dc:	00 97       	sbiw	r24, 0x00	; 0
    f9de:	19 f4       	brne	.+6      	; 0xf9e6 <read+0x8c>
    f9e0:	89 e0       	ldi	r24, 0x09	; 9
        return(-1);
    }

    res = f_read(fh, (void *) buf, bytes, &size);
    f9e2:	90 e0       	ldi	r25, 0x00	; 0
    f9e4:	16 c0       	rjmp	.+44     	; 0xfa12 <read+0xb8>
    f9e6:	9e 01       	movw	r18, r28
    f9e8:	2f 5f       	subi	r18, 0xFF	; 255
    f9ea:	3f 4f       	sbci	r19, 0xFF	; 255
    f9ec:	a6 01       	movw	r20, r12
    f9ee:	b8 01       	movw	r22, r16
    if(res != FR_OK)
    f9f0:	0e 94 5d 5d 	call	0xbaba	; 0xbaba <f_read>
    f9f4:	00 97       	sbiw	r24, 0x00	; 0
    f9f6:	91 f0       	breq	.+36     	; 0xfa1c <read+0xc2>
    f9f8:	84 31       	cpi	r24, 0x14	; 20
    f9fa:	91 05       	cpc	r25, r1
    f9fc:	40 f4       	brcc	.+16     	; 0xfa0e <read+0xb4>
    f9fe:	fc 01       	movw	r30, r24
    fa00:	ec 53       	subi	r30, 0x3C	; 60
    fa02:	f5 4f       	sbci	r31, 0xF5	; 245
    fa04:	80 81       	ld	r24, Z
    fa06:	08 2e       	mov	r0, r24
    fa08:	00 0c       	add	r0, r0
    fa0a:	99 0b       	sbc	r25, r25
    fa0c:	02 c0       	rjmp	.+4      	; 0xfa12 <read+0xb8>
    {
        errno = fatfs_to_errno(res);
    fa0e:	83 e2       	ldi	r24, 0x23	; 35
    fa10:	90 e0       	ldi	r25, 0x00	; 0
    fa12:	90 93 56 1c 	sts	0x1C56, r25	; 0x801c56 <errno+0x1>
    fa16:	80 93 55 1c 	sts	0x1C55, r24	; 0x801c55 <errno>
        return(-1);
    }
    return ((ssize_t) size);
    fa1a:	05 c0       	rjmp	.+10     	; 0xfa26 <read+0xcc>
    fa1c:	69 81       	ldd	r22, Y+1	; 0x01
    fa1e:	7a 81       	ldd	r23, Y+2	; 0x02
    fa20:	80 e0       	ldi	r24, 0x00	; 0
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    {
        return(-1);
    fa22:	90 e0       	ldi	r25, 0x00	; 0
    fa24:	03 c0       	rjmp	.+6      	; 0xfa2c <read+0xd2>
    fa26:	6f ef       	ldi	r22, 0xFF	; 255
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    fa28:	7f ef       	ldi	r23, 0xFF	; 255
    fa2a:	cb 01       	movw	r24, r22
    fa2c:	22 96       	adiw	r28, 0x02	; 2
    fa2e:	ea e0       	ldi	r30, 0x0A	; 10
    fa30:	0c 94 3d e5 	jmp	0x1ca7a	; 0x1ca7a <__epilogue_restores__+0x10>

0000fa34 <fread>:
///
/// @return count on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    fa34:	0f 93       	push	r16
    fa36:	1f 93       	push	r17
    fa38:	cf 93       	push	r28
    fa3a:	df 93       	push	r29
    fa3c:	ec 01       	movw	r28, r24
    fa3e:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    fa40:	64 9f       	mul	r22, r20
    fa42:	80 01       	movw	r16, r0
    fa44:	65 9f       	mul	r22, r21
    fa46:	10 0d       	add	r17, r0
    fa48:	74 9f       	mul	r23, r20
    fa4a:	10 0d       	add	r17, r0
    int fn = fileno(stream);
    fa4c:	11 24       	eor	r1, r1
    ssize_t ret;

    // read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    fa4e:	17 db       	rcall	.-2514   	; 0xf07e <fileno>
    fa50:	a8 01       	movw	r20, r16
    fa52:	be 01       	movw	r22, r28
    if(ret < 0)
    fa54:	82 df       	rcall	.-252    	; 0xf95a <read>
    fa56:	97 fd       	sbrc	r25, 7
        return(0);

    return((size_t) ret);
    fa58:	02 c0       	rjmp	.+4      	; 0xfa5e <fread+0x2a>
    fa5a:	cb 01       	movw	r24, r22
    ssize_t ret;

    // read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    if(ret < 0)
        return(0);
    fa5c:	02 c0       	rjmp	.+4      	; 0xfa62 <fread+0x2e>
    fa5e:	80 e0       	ldi	r24, 0x00	; 0

    return((size_t) ret);
}
    fa60:	90 e0       	ldi	r25, 0x00	; 0
    fa62:	df 91       	pop	r29
    fa64:	cf 91       	pop	r28
    fa66:	1f 91       	pop	r17
    fa68:	0f 91       	pop	r16
    fa6a:	08 95       	ret

0000fa6c <syncfs>:
/// @param[in] fd: POSIX fileno to sync.
/// @return 0.
/// @return -1 on error witrh errno set.
MEMSPACE
int syncfs(int fd)
{
    fa6c:	cf 93       	push	r28
    fa6e:	df 93       	push	r29
    FIL *fh;
    FRESULT res;
    FILE *stream;

    errno = 0;
    fa70:	10 92 56 1c 	sts	0x1C56, r1	; 0x801c56 <errno+0x1>
    fa74:	10 92 55 1c 	sts	0x1C55, r1	; 0x801c55 <errno>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    fa78:	83 30       	cpi	r24, 0x03	; 3
    fa7a:	91 05       	cpc	r25, r1
    fa7c:	18 f4       	brcc	.+6      	; 0xfa84 <syncfs+0x18>

    // fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    if(fh == NULL)
    {
        errno = EBADF;
    fa7e:	89 e0       	ldi	r24, 0x09	; 9
    fa80:	90 e0       	ldi	r25, 0x00	; 0
    fa82:	18 c0       	rjmp	.+48     	; 0xfab4 <syncfs+0x48>
    if(isatty(fd))
    {
        errno = EBADF;
        return(-1);
    }
    stream = fileno_to_stream(fd);
    fa84:	ec 01       	movw	r28, r24
    fa86:	17 db       	rcall	.-2514   	; 0xf0b6 <fileno_to_stream>
    // reset unget on sync
    stream->flags |= __SUNGET;
    fa88:	fc 01       	movw	r30, r24
    fa8a:	93 81       	ldd	r25, Z+3	; 0x03

    // fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    fa8c:	90 64       	ori	r25, 0x40	; 64
    fa8e:	93 83       	std	Z+3, r25	; 0x03
    if(fh == NULL)
    fa90:	ce 01       	movw	r24, r28
    fa92:	a4 de       	rcall	.-696    	; 0xf7dc <fileno_to_fatfs>
    {
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    fa94:	00 97       	sbiw	r24, 0x00	; 0
    fa96:	99 f3       	breq	.-26     	; 0xfa7e <syncfs+0x12>
    if (res != FR_OK)
    fa98:	0e 94 3f 60 	call	0xc07e	; 0xc07e <f_sync>
    fa9c:	00 97       	sbiw	r24, 0x00	; 0
    fa9e:	a1 f0       	breq	.+40     	; 0xfac8 <syncfs+0x5c>
    faa0:	84 31       	cpi	r24, 0x14	; 20
    faa2:	91 05       	cpc	r25, r1
    faa4:	70 f4       	brcc	.+28     	; 0xfac2 <syncfs+0x56>
    faa6:	fc 01       	movw	r30, r24
    faa8:	ec 53       	subi	r30, 0x3C	; 60
    faaa:	f5 4f       	sbci	r31, 0xF5	; 245
    faac:	80 81       	ld	r24, Z
    faae:	08 2e       	mov	r0, r24
    {
        errno = fatfs_to_errno(res);
    fab0:	00 0c       	add	r0, r0
    fab2:	99 0b       	sbc	r25, r25
    fab4:	90 93 56 1c 	sts	0x1C56, r25	; 0x801c56 <errno+0x1>
        return(-1);
    fab8:	80 93 55 1c 	sts	0x1C55, r24	; 0x801c55 <errno>
    fabc:	8f ef       	ldi	r24, 0xFF	; 255
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    if (res != FR_OK)
    fabe:	9f ef       	ldi	r25, 0xFF	; 255
    fac0:	05 c0       	rjmp	.+10     	; 0xfacc <syncfs+0x60>
    fac2:	83 e2       	ldi	r24, 0x23	; 35
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return(0);
    fac4:	90 e0       	ldi	r25, 0x00	; 0
    fac6:	f6 cf       	rjmp	.-20     	; 0xfab4 <syncfs+0x48>
}
    fac8:	80 e0       	ldi	r24, 0x00	; 0
    faca:	90 e0       	ldi	r25, 0x00	; 0
    facc:	df 91       	pop	r29
    face:	cf 91       	pop	r28
    fad0:	08 95       	ret

0000fad2 <sync>:
/// - man page sync (2).
///
/// @return  void.
MEMSPACE
void sync(void)
{
    fad2:	cf 93       	push	r28
    fad4:	df 93       	push	r29
    FIL *fh;
    int i;

    for(i=0;i<MAX_FILES;++i)
    fad6:	c0 e0       	ldi	r28, 0x00	; 0
    fad8:	d0 e0       	ldi	r29, 0x00	; 0
    fada:	21 96       	adiw	r28, 0x01	; 1
    fadc:	c0 31       	cpi	r28, 0x10	; 16
    fade:	d1 05       	cpc	r29, r1
    fae0:	51 f0       	breq	.+20     	; 0xfaf6 <sync+0x24>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    fae2:	c3 30       	cpi	r28, 0x03	; 3
    fae4:	d1 05       	cpc	r29, r1
    fae6:	cc f3       	brlt	.-14     	; 0xfada <sync+0x8>
    {
        if(isatty(i))
            continue;

        // fileno_to_fatfs checks for i out of bounds
        fh = fileno_to_fatfs(i);
    fae8:	ce 01       	movw	r24, r28
    faea:	78 de       	rcall	.-784    	; 0xf7dc <fileno_to_fatfs>
        if(fh == NULL)
    faec:	89 2b       	or	r24, r25
            continue;

        (void ) syncfs(i);
    faee:	a9 f3       	breq	.-22     	; 0xfada <sync+0x8>
    faf0:	ce 01       	movw	r24, r28
    faf2:	bc df       	rcall	.-136    	; 0xfa6c <syncfs>
    }
}
    faf4:	f2 cf       	rjmp	.-28     	; 0xfada <sync+0x8>
    faf6:	df 91       	pop	r29
    faf8:	cf 91       	pop	r28
    fafa:	08 95       	ret

0000fafc <write>:
/// @param[in] count: number of bytes to write.
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t write(int fd, const void *buf, size_t count)
{
    fafc:	a2 e0       	ldi	r26, 0x02	; 2
    fafe:	b0 e0       	ldi	r27, 0x00	; 0
    fb00:	e4 e8       	ldi	r30, 0x84	; 132
    fb02:	fd e7       	ldi	r31, 0x7D	; 125
    fb04:	0c 94 1f e5 	jmp	0x1ca3e	; 0x1ca3e <__prologue_saves__+0xc>
    fb08:	8c 01       	movw	r16, r24
    fb0a:	b6 2e       	mov	r11, r22
    fb0c:	f7 2e       	mov	r15, r23
    fb0e:	4a 01       	movw	r8, r20
    UINT size;
    UINT bytes = count;
    FRESULT res;
    FIL *fh;
    FILE *stream;
    errno = 0;
    fb10:	10 92 56 1c 	sts	0x1C56, r1	; 0x801c56 <errno+0x1>
    fb14:	10 92 55 1c 	sts	0x1C55, r1	; 0x801c55 <errno>

    // TTY read function
    stream = fileno_to_stream(fd);
    fb18:	ce da       	rcall	.-2660   	; 0xf0b6 <fileno_to_stream>
    if(stream == stdout || stream == stderr)
    fb1a:	6c 01       	movw	r12, r24
    fb1c:	80 91 59 1c 	lds	r24, 0x1C59	; 0x801c59 <__iob+0x2>
    fb20:	90 91 5a 1c 	lds	r25, 0x1C5A	; 0x801c5a <__iob+0x3>
    fb24:	c8 16       	cp	r12, r24
    fb26:	d9 06       	cpc	r13, r25
    fb28:	39 f0       	breq	.+14     	; 0xfb38 <write+0x3c>
    fb2a:	80 91 5b 1c 	lds	r24, 0x1C5B	; 0x801c5b <__iob+0x4>
    fb2e:	90 91 5c 1c 	lds	r25, 0x1C5C	; 0x801c5c <__iob+0x5>
    fb32:	c8 16       	cp	r12, r24
    fb34:	d9 06       	cpc	r13, r25
    {
        char *ptr = (char *) buf;   
        size = 0;
    fb36:	d1 f4       	brne	.+52     	; 0xfb6c <write+0x70>
    fb38:	1a 82       	std	Y+2, r1	; 0x02
    fb3a:	19 82       	std	Y+1, r1	; 0x01
    fb3c:	0b 2d       	mov	r16, r11
    fb3e:	1f 2d       	mov	r17, r15
    fb40:	78 01       	movw	r14, r16
    fb42:	e8 0c       	add	r14, r8
        while(count--)
    fb44:	f9 1c       	adc	r15, r9
    fb46:	0e 15       	cp	r16, r14
    fb48:	1f 05       	cpc	r17, r15
        {
            int c,ret;
            c = *ptr++;
    fb4a:	d1 f1       	breq	.+116    	; 0xfbc0 <write+0xc4>
    fb4c:	f8 01       	movw	r30, r16
    fb4e:	a1 90       	ld	r10, Z+
    fb50:	8f 01       	movw	r16, r30
            ret = fputc(c, stream);
    fb52:	b1 2c       	mov	r11, r1
    fb54:	b6 01       	movw	r22, r12
    fb56:	c5 01       	movw	r24, r10
            if(c != ret)
    fb58:	c4 d9       	rcall	.-3192   	; 0xeee2 <fputc>
    fb5a:	a8 16       	cp	r10, r24
    fb5c:	b9 06       	cpc	r11, r25
                break;

            ++size;
    fb5e:	81 f5       	brne	.+96     	; 0xfbc0 <write+0xc4>
    fb60:	89 81       	ldd	r24, Y+1	; 0x01
    fb62:	9a 81       	ldd	r25, Y+2	; 0x02
    fb64:	01 96       	adiw	r24, 0x01	; 1
    fb66:	9a 83       	std	Y+2, r25	; 0x02
    fb68:	89 83       	std	Y+1, r24	; 0x01
        }
        return(size);
    }
    if(stream == stdin)
    fb6a:	ed cf       	rjmp	.-38     	; 0xfb46 <write+0x4a>
    fb6c:	80 91 57 1c 	lds	r24, 0x1C57	; 0x801c57 <__iob>
    fb70:	90 91 58 1c 	lds	r25, 0x1C58	; 0x801c58 <__iob+0x1>
    fb74:	c8 16       	cp	r12, r24
    {
        return(-1);
    }

    // fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    fb76:	d9 06       	cpc	r13, r25
    fb78:	41 f1       	breq	.+80     	; 0xfbca <write+0xce>
    if ( fh == NULL )
    fb7a:	c8 01       	movw	r24, r16
    fb7c:	2f de       	rcall	.-930    	; 0xf7dc <fileno_to_fatfs>
    {
        errno = EBADF;
    fb7e:	00 97       	sbiw	r24, 0x00	; 0
    fb80:	19 f4       	brne	.+6      	; 0xfb88 <write+0x8c>
    fb82:	89 e0       	ldi	r24, 0x09	; 9
        return(-1);
    }

    res = f_write(fh, buf, bytes, &size);
    fb84:	90 e0       	ldi	r25, 0x00	; 0
    fb86:	17 c0       	rjmp	.+46     	; 0xfbb6 <write+0xba>
    fb88:	9e 01       	movw	r18, r28
    fb8a:	2f 5f       	subi	r18, 0xFF	; 255
    fb8c:	3f 4f       	sbci	r19, 0xFF	; 255
    fb8e:	a4 01       	movw	r20, r8
    fb90:	6b 2d       	mov	r22, r11
    fb92:	7f 2d       	mov	r23, r15
    if(res != FR_OK)
    fb94:	0e 94 a8 5e 	call	0xbd50	; 0xbd50 <f_write>
    fb98:	00 97       	sbiw	r24, 0x00	; 0
    fb9a:	91 f0       	breq	.+36     	; 0xfbc0 <write+0xc4>
    fb9c:	84 31       	cpi	r24, 0x14	; 20
    fb9e:	91 05       	cpc	r25, r1
    fba0:	40 f4       	brcc	.+16     	; 0xfbb2 <write+0xb6>
    fba2:	fc 01       	movw	r30, r24
    fba4:	ec 53       	subi	r30, 0x3C	; 60
    fba6:	f5 4f       	sbci	r31, 0xF5	; 245
    fba8:	80 81       	ld	r24, Z
    fbaa:	08 2e       	mov	r0, r24
    fbac:	00 0c       	add	r0, r0
    fbae:	99 0b       	sbc	r25, r25
    fbb0:	02 c0       	rjmp	.+4      	; 0xfbb6 <write+0xba>
    {
        errno = fatfs_to_errno(res);
    fbb2:	83 e2       	ldi	r24, 0x23	; 35
    fbb4:	90 e0       	ldi	r25, 0x00	; 0
    fbb6:	90 93 56 1c 	sts	0x1C56, r25	; 0x801c56 <errno+0x1>
    fbba:	80 93 55 1c 	sts	0x1C55, r24	; 0x801c55 <errno>
        return(-1);
    }
    return ((ssize_t) size);
    fbbe:	05 c0       	rjmp	.+10     	; 0xfbca <write+0xce>
    fbc0:	69 81       	ldd	r22, Y+1	; 0x01
    fbc2:	7a 81       	ldd	r23, Y+2	; 0x02
    fbc4:	80 e0       	ldi	r24, 0x00	; 0
        }
        return(size);
    }
    if(stream == stdin)
    {
        return(-1);
    fbc6:	90 e0       	ldi	r25, 0x00	; 0
    fbc8:	03 c0       	rjmp	.+6      	; 0xfbd0 <write+0xd4>
    fbca:	6f ef       	ldi	r22, 0xFF	; 255
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    fbcc:	7f ef       	ldi	r23, 0xFF	; 255
    fbce:	cb 01       	movw	r24, r22
    fbd0:	22 96       	adiw	r28, 0x02	; 2
    fbd2:	ec e0       	ldi	r30, 0x0C	; 12
    fbd4:	0c 94 3b e5 	jmp	0x1ca76	; 0x1ca76 <__epilogue_restores__+0xc>

0000fbd8 <fwrite>:
///
/// @return count written on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    fbd8:	0f 93       	push	r16
    fbda:	1f 93       	push	r17
    fbdc:	cf 93       	push	r28
    fbde:	df 93       	push	r29
    fbe0:	ec 01       	movw	r28, r24
    fbe2:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    fbe4:	64 9f       	mul	r22, r20
    fbe6:	80 01       	movw	r16, r0
    fbe8:	65 9f       	mul	r22, r21
    fbea:	10 0d       	add	r17, r0
    fbec:	74 9f       	mul	r23, r20
    fbee:	10 0d       	add	r17, r0
    int fn = fileno(stream);
    fbf0:	11 24       	eor	r1, r1
    ssize_t ret;
    
    // write () checks for fn out of bounds
    ret =  write(fn, ptr, count);
    fbf2:	45 da       	rcall	.-2934   	; 0xf07e <fileno>
    fbf4:	a8 01       	movw	r20, r16
    fbf6:	be 01       	movw	r22, r28

    if(ret < 0)
    fbf8:	81 df       	rcall	.-254    	; 0xfafc <write>
    fbfa:	97 fd       	sbrc	r25, 7
        return(0);

    return((size_t) ret);
    fbfc:	02 c0       	rjmp	.+4      	; 0xfc02 <fwrite+0x2a>
    fbfe:	cb 01       	movw	r24, r22
    
    // write () checks for fn out of bounds
    ret =  write(fn, ptr, count);

    if(ret < 0)
        return(0);
    fc00:	02 c0       	rjmp	.+4      	; 0xfc06 <fwrite+0x2e>
    fc02:	80 e0       	ldi	r24, 0x00	; 0

    return((size_t) ret);
}
    fc04:	90 e0       	ldi	r25, 0x00	; 0
    fc06:	df 91       	pop	r29
    fc08:	cf 91       	pop	r28
    fc0a:	1f 91       	pop	r17
    fc0c:	0f 91       	pop	r16
    fc0e:	08 95       	ret

0000fc10 <free_file_descriptor>:
///
/// @return fileno on success.
/// @return -1 on failure.
MEMSPACE
int free_file_descriptor(int fileno)
{
    fc10:	0f 93       	push	r16
    fc12:	1f 93       	push	r17
    fc14:	cf 93       	push	r28
    fc16:	df 93       	push	r29
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    fc18:	83 30       	cpi	r24, 0x03	; 3
    fc1a:	91 05       	cpc	r25, r1
    fc1c:	48 f4       	brcc	.+18     	; 0xfc30 <free_file_descriptor+0x20>
    FILE *stream;
    FIL *fh;

    if(isatty( fileno ))
    {
        errno = EBADF;
    fc1e:	89 e0       	ldi	r24, 0x09	; 9
    fc20:	90 e0       	ldi	r25, 0x00	; 0
    fc22:	90 93 56 1c 	sts	0x1C56, r25	; 0x801c56 <errno+0x1>
    fc26:	80 93 55 1c 	sts	0x1C55, r24	; 0x801c55 <errno>
        return(-1);
    fc2a:	8f ef       	ldi	r24, 0xFF	; 255
    fc2c:	9f ef       	ldi	r25, 0xFF	; 255
    fc2e:	20 c0       	rjmp	.+64     	; 0xfc70 <free_file_descriptor+0x60>
    }

    // checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    fc30:	ec 01       	movw	r28, r24
    fc32:	41 da       	rcall	.-2942   	; 0xf0b6 <fileno_to_stream>
    if(stream == NULL)
    fc34:	8c 01       	movw	r16, r24
    fc36:	89 2b       	or	r24, r25
    {
        return(-1);
    }

    fh = fdev_get_udata(stream);
    fc38:	c1 f3       	breq	.-16     	; 0xfc2a <free_file_descriptor+0x1a>
    fc3a:	f8 01       	movw	r30, r16
    fc3c:	84 85       	ldd	r24, Z+12	; 0x0c

    if(fh != NULL)
    fc3e:	95 85       	ldd	r25, Z+13	; 0x0d
    fc40:	00 97       	sbiw	r24, 0x00	; 0
    {
        safefree(fh);
    fc42:	11 f0       	breq	.+4      	; 0xfc48 <free_file_descriptor+0x38>
    fc44:	0e 94 45 2a 	call	0x548a	; 0x548a <safefree>
    }

    if(stream->buf != NULL && stream->flags & __SMALLOC)
    fc48:	f8 01       	movw	r30, r16
    fc4a:	80 81       	ld	r24, Z
    fc4c:	91 81       	ldd	r25, Z+1	; 0x01
    fc4e:	00 97       	sbiw	r24, 0x00	; 0
    fc50:	21 f0       	breq	.+8      	; 0xfc5a <free_file_descriptor+0x4a>
    fc52:	23 81       	ldd	r18, Z+3	; 0x03
    {
        safefree(stream->buf);
    fc54:	27 fd       	sbrc	r18, 7
    fc56:	0e 94 45 2a 	call	0x548a	; 0x548a <safefree>
    }

    __iob[fileno]  = NULL;
    fc5a:	fe 01       	movw	r30, r28
    fc5c:	ee 0f       	add	r30, r30
    fc5e:	ff 1f       	adc	r31, r31
    fc60:	e9 5a       	subi	r30, 0xA9	; 169
    fc62:	f3 4e       	sbci	r31, 0xE3	; 227
    fc64:	11 82       	std	Z+1, r1	; 0x01
    safefree(stream);
    fc66:	10 82       	st	Z, r1
    fc68:	c8 01       	movw	r24, r16
    fc6a:	0e 94 45 2a 	call	0x548a	; 0x548a <safefree>
    return(fileno);
}
    fc6e:	ce 01       	movw	r24, r28
    fc70:	df 91       	pop	r29
    fc72:	cf 91       	pop	r28
    fc74:	1f 91       	pop	r17
    fc76:	0f 91       	pop	r16
    fc78:	08 95       	ret

0000fc7a <close>:
///
/// @return 0 on sucess.
/// @return -1 on error with errno set.
MEMSPACE
int close(int fileno)
{
    fc7a:	0f 93       	push	r16
    fc7c:	1f 93       	push	r17
    fc7e:	cf 93       	push	r28
    fc80:	df 93       	push	r29
    fc82:	8c 01       	movw	r16, r24
    FILE *stream;
    FIL *fh;
    int res;

    errno = 0;
    fc84:	10 92 56 1c 	sts	0x1C56, r1	; 0x801c56 <errno+0x1>
    fc88:	10 92 55 1c 	sts	0x1C55, r1	; 0x801c55 <errno>

    // checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    if(stream == NULL)
    fc8c:	14 da       	rcall	.-3032   	; 0xf0b6 <fileno_to_stream>
    {
        return(-1);
    }

    // fileno_to_fatfs checks for fileno out of bounds
    fh = fileno_to_fatfs(fileno);
    fc8e:	89 2b       	or	r24, r25
    fc90:	d9 f0       	breq	.+54     	; 0xfcc8 <close+0x4e>
    if(fh == NULL)
    fc92:	c8 01       	movw	r24, r16
    fc94:	a3 dd       	rcall	.-1210   	; 0xf7dc <fileno_to_fatfs>
    {
        return(-1);
    }
    res = f_close(fh);
    fc96:	00 97       	sbiw	r24, 0x00	; 0
    fc98:	b9 f0       	breq	.+46     	; 0xfcc8 <close+0x4e>
    free_file_descriptor(fileno);
    fc9a:	0e 94 bf 60 	call	0xc17e	; 0xc17e <f_close>
    fc9e:	ec 01       	movw	r28, r24
    if (res != FR_OK)
    fca0:	c8 01       	movw	r24, r16
    fca2:	b6 df       	rcall	.-148    	; 0xfc10 <free_file_descriptor>
    fca4:	20 97       	sbiw	r28, 0x00	; 0
    fca6:	99 f0       	breq	.+38     	; 0xfcce <close+0x54>
    fca8:	c4 31       	cpi	r28, 0x14	; 20
    fcaa:	d1 05       	cpc	r29, r1
    fcac:	38 f4       	brcc	.+14     	; 0xfcbc <close+0x42>
    fcae:	cc 53       	subi	r28, 0x3C	; 60
    fcb0:	d5 4f       	sbci	r29, 0xF5	; 245
    fcb2:	88 81       	ld	r24, Y
    fcb4:	08 2e       	mov	r0, r24
    fcb6:	00 0c       	add	r0, r0
    fcb8:	99 0b       	sbc	r25, r25
    fcba:	02 c0       	rjmp	.+4      	; 0xfcc0 <close+0x46>
    {
        errno = fatfs_to_errno(res);
    fcbc:	83 e2       	ldi	r24, 0x23	; 35
    fcbe:	90 e0       	ldi	r25, 0x00	; 0
    fcc0:	90 93 56 1c 	sts	0x1C56, r25	; 0x801c56 <errno+0x1>
        return(-1);
    fcc4:	80 93 55 1c 	sts	0x1C55, r24	; 0x801c55 <errno>
    fcc8:	8f ef       	ldi	r24, 0xFF	; 255
    }
    return(0);
    fcca:	9f ef       	ldi	r25, 0xFF	; 255
    fccc:	02 c0       	rjmp	.+4      	; 0xfcd2 <close+0x58>
}
    fcce:	80 e0       	ldi	r24, 0x00	; 0
    fcd0:	90 e0       	ldi	r25, 0x00	; 0
    fcd2:	df 91       	pop	r29
    fcd4:	cf 91       	pop	r28
    fcd6:	1f 91       	pop	r17
    fcd8:	0f 91       	pop	r16
    fcda:	08 95       	ret

0000fcdc <fclose>:
    fcdc:	d0 d9       	rcall	.-3168   	; 0xf07e <fileno>
    fcde:	97 fd       	sbrc	r25, 7
    fce0:	02 c0       	rjmp	.+4      	; 0xfce6 <fclose+0xa>
    fce2:	cb cf       	rjmp	.-106    	; 0xfc7a <close>
    fce4:	08 95       	ret
    fce6:	8f ef       	ldi	r24, 0xFF	; 255
    fce8:	9f ef       	ldi	r25, 0xFF	; 255
    fcea:	08 95       	ret

0000fcec <new_file_descriptor>:
    fcec:	0f 93       	push	r16
    fcee:	1f 93       	push	r17
    fcf0:	cf 93       	push	r28
    fcf2:	df 93       	push	r29
    fcf4:	e7 e5       	ldi	r30, 0x57	; 87
    fcf6:	fc e1       	ldi	r31, 0x1C	; 28
    fcf8:	c0 e0       	ldi	r28, 0x00	; 0
    fcfa:	d0 e0       	ldi	r29, 0x00	; 0
    fcfc:	21 96       	adiw	r28, 0x01	; 1
    fcfe:	c0 31       	cpi	r28, 0x10	; 16
    fd00:	d1 05       	cpc	r29, r1
    fd02:	49 f0       	breq	.+18     	; 0xfd16 <new_file_descriptor+0x2a>
    fd04:	c3 30       	cpi	r28, 0x03	; 3
    fd06:	d1 05       	cpc	r29, r1
    fd08:	24 f0       	brlt	.+8      	; 0xfd12 <new_file_descriptor+0x26>
    fd0a:	82 81       	ldd	r24, Z+2	; 0x02
    fd0c:	93 81       	ldd	r25, Z+3	; 0x03
    fd0e:	89 2b       	or	r24, r25
    fd10:	59 f0       	breq	.+22     	; 0xfd28 <new_file_descriptor+0x3c>
    fd12:	32 96       	adiw	r30, 0x02	; 2
    fd14:	f3 cf       	rjmp	.-26     	; 0xfcfc <new_file_descriptor+0x10>
    fd16:	87 e1       	ldi	r24, 0x17	; 23
    fd18:	90 e0       	ldi	r25, 0x00	; 0
    fd1a:	90 93 56 1c 	sts	0x1C56, r25	; 0x801c56 <errno+0x1>
    fd1e:	80 93 55 1c 	sts	0x1C55, r24	; 0x801c55 <errno>
    fd22:	8f ef       	ldi	r24, 0xFF	; 255
    fd24:	9f ef       	ldi	r25, 0xFF	; 255
    fd26:	22 c0       	rjmp	.+68     	; 0xfd6c <new_file_descriptor+0x80>
    fd28:	61 e0       	ldi	r22, 0x01	; 1
    fd2a:	70 e0       	ldi	r23, 0x00	; 0
    fd2c:	8e e0       	ldi	r24, 0x0E	; 14
    fd2e:	90 e0       	ldi	r25, 0x00	; 0
    fd30:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <safecalloc>
    fd34:	8c 01       	movw	r16, r24
    fd36:	89 2b       	or	r24, r25
    fd38:	59 f0       	breq	.+22     	; 0xfd50 <new_file_descriptor+0x64>
    fd3a:	61 e0       	ldi	r22, 0x01	; 1
    fd3c:	70 e0       	ldi	r23, 0x00	; 0
    fd3e:	84 e2       	ldi	r24, 0x24	; 36
    fd40:	92 e0       	ldi	r25, 0x02	; 2
    fd42:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <safecalloc>
    fd46:	00 97       	sbiw	r24, 0x00	; 0
    fd48:	31 f4       	brne	.+12     	; 0xfd56 <new_file_descriptor+0x6a>
    fd4a:	c8 01       	movw	r24, r16
    fd4c:	0e 94 45 2a 	call	0x548a	; 0x548a <safefree>
    fd50:	8c e0       	ldi	r24, 0x0C	; 12
    fd52:	90 e0       	ldi	r25, 0x00	; 0
    fd54:	e2 cf       	rjmp	.-60     	; 0xfd1a <new_file_descriptor+0x2e>
    fd56:	fe 01       	movw	r30, r28
    fd58:	ee 0f       	add	r30, r30
    fd5a:	ff 1f       	adc	r31, r31
    fd5c:	e9 5a       	subi	r30, 0xA9	; 169
    fd5e:	f3 4e       	sbci	r31, 0xE3	; 227
    fd60:	11 83       	std	Z+1, r17	; 0x01
    fd62:	00 83       	st	Z, r16
    fd64:	f8 01       	movw	r30, r16
    fd66:	95 87       	std	Z+13, r25	; 0x0d
    fd68:	84 87       	std	Z+12, r24	; 0x0c
    fd6a:	ce 01       	movw	r24, r28
    fd6c:	df 91       	pop	r29
    fd6e:	cf 91       	pop	r28
    fd70:	1f 91       	pop	r17
    fd72:	0f 91       	pop	r16
    fd74:	08 95       	ret

0000fd76 <open>:
    fd76:	a0 e0       	ldi	r26, 0x00	; 0
    fd78:	b0 e0       	ldi	r27, 0x00	; 0
    fd7a:	e1 ec       	ldi	r30, 0xC1	; 193
    fd7c:	fe e7       	ldi	r31, 0x7E	; 126
    fd7e:	0c 94 1d e5 	jmp	0x1ca3a	; 0x1ca3a <__prologue_saves__+0x8>
    fd82:	5c 01       	movw	r10, r24
    fd84:	6b 01       	movw	r12, r22
    fd86:	10 92 56 1c 	sts	0x1C56, r1	; 0x801c56 <errno+0x1>
    fd8a:	10 92 55 1c 	sts	0x1C55, r1	; 0x801c55 <errno>
    fd8e:	7b 01       	movw	r14, r22
    fd90:	83 e0       	ldi	r24, 0x03	; 3
    fd92:	e8 22       	and	r14, r24
    fd94:	ff 24       	eor	r15, r15
    fd96:	e2 e0       	ldi	r30, 0x02	; 2
    fd98:	ee 16       	cp	r14, r30
    fd9a:	f1 04       	cpc	r15, r1
    fd9c:	31 f0       	breq	.+12     	; 0xfdaa <open+0x34>
    fd9e:	e1 14       	cp	r14, r1
    fda0:	f1 04       	cpc	r15, r1
    fda2:	31 f0       	breq	.+12     	; 0xfdb0 <open+0x3a>
    fda4:	02 e0       	ldi	r16, 0x02	; 2
    fda6:	10 e0       	ldi	r17, 0x00	; 0
    fda8:	05 c0       	rjmp	.+10     	; 0xfdb4 <open+0x3e>
    fdaa:	03 e0       	ldi	r16, 0x03	; 3
    fdac:	10 e0       	ldi	r17, 0x00	; 0
    fdae:	02 c0       	rjmp	.+4      	; 0xfdb4 <open+0x3e>
    fdb0:	01 e0       	ldi	r16, 0x01	; 1
    fdb2:	10 e0       	ldi	r17, 0x00	; 0
    fdb4:	c6 fe       	sbrs	r12, 6
    fdb6:	05 c0       	rjmp	.+10     	; 0xfdc2 <open+0x4c>
    fdb8:	d1 fe       	sbrs	r13, 1
    fdba:	02 c0       	rjmp	.+4      	; 0xfdc0 <open+0x4a>
    fdbc:	08 60       	ori	r16, 0x08	; 8
    fdbe:	01 c0       	rjmp	.+2      	; 0xfdc2 <open+0x4c>
    fdc0:	00 61       	ori	r16, 0x10	; 16
    fdc2:	94 df       	rcall	.-216    	; 0xfcec <new_file_descriptor>
    fdc4:	3c 01       	movw	r6, r24
    fdc6:	77 d9       	rcall	.-3346   	; 0xf0b6 <fileno_to_stream>
    fdc8:	ec 01       	movw	r28, r24
    fdca:	c3 01       	movw	r24, r6
    fdcc:	20 97       	sbiw	r28, 0x00	; 0
    fdce:	09 f4       	brne	.+2      	; 0xfdd2 <open+0x5c>
    fdd0:	48 c0       	rjmp	.+144    	; 0xfe62 <open+0xec>
    fdd2:	04 dd       	rcall	.-1528   	; 0xf7dc <fileno_to_fatfs>
    fdd4:	4c 01       	movw	r8, r24
    fdd6:	00 97       	sbiw	r24, 0x00	; 0
    fdd8:	59 f4       	brne	.+22     	; 0xfdf0 <open+0x7a>
    fdda:	c3 01       	movw	r24, r6
    fddc:	19 df       	rcall	.-462    	; 0xfc10 <free_file_descriptor>
    fdde:	89 e0       	ldi	r24, 0x09	; 9
    fde0:	90 e0       	ldi	r25, 0x00	; 0
    fde2:	90 93 56 1c 	sts	0x1C56, r25	; 0x801c56 <errno+0x1>
    fde6:	80 93 55 1c 	sts	0x1C55, r24	; 0x801c55 <errno>
    fdea:	8f ef       	ldi	r24, 0xFF	; 255
    fdec:	9f ef       	ldi	r25, 0xFF	; 255
    fdee:	5d c0       	rjmp	.+186    	; 0xfeaa <open+0x134>
    fdf0:	40 2f       	mov	r20, r16
    fdf2:	b5 01       	movw	r22, r10
    fdf4:	0e 94 a5 5b 	call	0xb74a	; 0xb74a <f_open>
    fdf8:	00 97       	sbiw	r24, 0x00	; 0
    fdfa:	91 f0       	breq	.+36     	; 0xfe20 <open+0xaa>
    fdfc:	84 31       	cpi	r24, 0x14	; 20
    fdfe:	91 05       	cpc	r25, r1
    fe00:	40 f4       	brcc	.+16     	; 0xfe12 <open+0x9c>
    fe02:	fc 01       	movw	r30, r24
    fe04:	ec 53       	subi	r30, 0x3C	; 60
    fe06:	f5 4f       	sbci	r31, 0xF5	; 245
    fe08:	80 81       	ld	r24, Z
    fe0a:	08 2e       	mov	r0, r24
    fe0c:	00 0c       	add	r0, r0
    fe0e:	99 0b       	sbc	r25, r25
    fe10:	02 c0       	rjmp	.+4      	; 0xfe16 <open+0xa0>
    fe12:	83 e2       	ldi	r24, 0x23	; 35
    fe14:	90 e0       	ldi	r25, 0x00	; 0
    fe16:	90 93 56 1c 	sts	0x1C56, r25	; 0x801c56 <errno+0x1>
    fe1a:	80 93 55 1c 	sts	0x1C55, r24	; 0x801c55 <errno>
    fe1e:	20 c0       	rjmp	.+64     	; 0xfe60 <open+0xea>
    fe20:	d2 fe       	sbrs	r13, 2
    fe22:	21 c0       	rjmp	.+66     	; 0xfe66 <open+0xf0>
    fe24:	f4 01       	movw	r30, r8
    fe26:	42 85       	ldd	r20, Z+10	; 0x0a
    fe28:	53 85       	ldd	r21, Z+11	; 0x0b
    fe2a:	64 85       	ldd	r22, Z+12	; 0x0c
    fe2c:	75 85       	ldd	r23, Z+13	; 0x0d
    fe2e:	c4 01       	movw	r24, r8
    fe30:	0e 94 69 62 	call	0xc4d2	; 0xc4d2 <f_lseek>
    fe34:	00 97       	sbiw	r24, 0x00	; 0
    fe36:	b9 f0       	breq	.+46     	; 0xfe66 <open+0xf0>
    fe38:	84 31       	cpi	r24, 0x14	; 20
    fe3a:	91 05       	cpc	r25, r1
    fe3c:	40 f4       	brcc	.+16     	; 0xfe4e <open+0xd8>
    fe3e:	fc 01       	movw	r30, r24
    fe40:	ec 53       	subi	r30, 0x3C	; 60
    fe42:	f5 4f       	sbci	r31, 0xF5	; 245
    fe44:	80 81       	ld	r24, Z
    fe46:	08 2e       	mov	r0, r24
    fe48:	00 0c       	add	r0, r0
    fe4a:	99 0b       	sbc	r25, r25
    fe4c:	02 c0       	rjmp	.+4      	; 0xfe52 <open+0xdc>
    fe4e:	83 e2       	ldi	r24, 0x23	; 35
    fe50:	90 e0       	ldi	r25, 0x00	; 0
    fe52:	90 93 56 1c 	sts	0x1C56, r25	; 0x801c56 <errno+0x1>
    fe56:	80 93 55 1c 	sts	0x1C55, r24	; 0x801c55 <errno>
    fe5a:	c4 01       	movw	r24, r8
    fe5c:	0e 94 bf 60 	call	0xc17e	; 0xc17e <f_close>
    fe60:	c3 01       	movw	r24, r6
    fe62:	d6 de       	rcall	.-596    	; 0xfc10 <free_file_descriptor>
    fe64:	c2 cf       	rjmp	.-124    	; 0xfdea <open+0x74>
    fe66:	f2 e0       	ldi	r31, 0x02	; 2
    fe68:	ef 16       	cp	r14, r31
    fe6a:	f1 04       	cpc	r15, r1
    fe6c:	51 f4       	brne	.+20     	; 0xfe82 <open+0x10c>
    fe6e:	80 ed       	ldi	r24, 0xD0	; 208
    fe70:	96 e7       	ldi	r25, 0x76	; 118
    fe72:	99 87       	std	Y+9, r25	; 0x09
    fe74:	88 87       	std	Y+8, r24	; 0x08
    fe76:	8d e4       	ldi	r24, 0x4D	; 77
    fe78:	96 e7       	ldi	r25, 0x76	; 118
    fe7a:	9b 87       	std	Y+11, r25	; 0x0b
    fe7c:	8a 87       	std	Y+10, r24	; 0x0a
    fe7e:	83 e0       	ldi	r24, 0x03	; 3
    fe80:	12 c0       	rjmp	.+36     	; 0xfea6 <open+0x130>
    fe82:	e1 14       	cp	r14, r1
    fe84:	f1 04       	cpc	r15, r1
    fe86:	41 f4       	brne	.+16     	; 0xfe98 <open+0x122>
    fe88:	19 86       	std	Y+9, r1	; 0x09
    fe8a:	18 86       	std	Y+8, r1	; 0x08
    fe8c:	8d e4       	ldi	r24, 0x4D	; 77
    fe8e:	96 e7       	ldi	r25, 0x76	; 118
    fe90:	9b 87       	std	Y+11, r25	; 0x0b
    fe92:	8a 87       	std	Y+10, r24	; 0x0a
    fe94:	81 e0       	ldi	r24, 0x01	; 1
    fe96:	07 c0       	rjmp	.+14     	; 0xfea6 <open+0x130>
    fe98:	80 ed       	ldi	r24, 0xD0	; 208
    fe9a:	96 e7       	ldi	r25, 0x76	; 118
    fe9c:	99 87       	std	Y+9, r25	; 0x09
    fe9e:	88 87       	std	Y+8, r24	; 0x08
    fea0:	1b 86       	std	Y+11, r1	; 0x0b
    fea2:	1a 86       	std	Y+10, r1	; 0x0a
    fea4:	82 e0       	ldi	r24, 0x02	; 2
    fea6:	8b 83       	std	Y+3, r24	; 0x03
    fea8:	c3 01       	movw	r24, r6
    feaa:	cd b7       	in	r28, 0x3d	; 61
    feac:	de b7       	in	r29, 0x3e	; 62
    feae:	ee e0       	ldi	r30, 0x0E	; 14
    feb0:	0c 94 39 e5 	jmp	0x1ca72	; 0x1ca72 <__epilogue_restores__+0x8>

0000feb4 <posix_fopen_modes_to_open>:
    feb4:	cf 93       	push	r28
    feb6:	df 93       	push	r29
    feb8:	ec 01       	movw	r28, r24
    feba:	60 e6       	ldi	r22, 0x60	; 96
    febc:	72 e0       	ldi	r23, 0x02	; 2
    febe:	0e 94 3f 33 	call	0x667e	; 0x667e <strcmp>
    fec2:	00 97       	sbiw	r24, 0x00	; 0
    fec4:	09 f4       	brne	.+2      	; 0xfec8 <posix_fopen_modes_to_open+0x14>
    fec6:	5d c0       	rjmp	.+186    	; 0xff82 <__DATA_REGION_LENGTH__+0x82>
    fec8:	6c e1       	ldi	r22, 0x1C	; 28
    feca:	78 e0       	ldi	r23, 0x08	; 8
    fecc:	ce 01       	movw	r24, r28
    fece:	0e 94 3f 33 	call	0x667e	; 0x667e <strcmp>
    fed2:	00 97       	sbiw	r24, 0x00	; 0
    fed4:	09 f4       	brne	.+2      	; 0xfed8 <posix_fopen_modes_to_open+0x24>
    fed6:	55 c0       	rjmp	.+170    	; 0xff82 <__DATA_REGION_LENGTH__+0x82>
    fed8:	6f e1       	ldi	r22, 0x1F	; 31
    feda:	78 e0       	ldi	r23, 0x08	; 8
    fedc:	ce 01       	movw	r24, r28
    fede:	0e 94 3f 33 	call	0x667e	; 0x667e <strcmp>
    fee2:	89 2b       	or	r24, r25
    fee4:	09 f4       	brne	.+2      	; 0xfee8 <posix_fopen_modes_to_open+0x34>
    fee6:	42 c0       	rjmp	.+132    	; 0xff6c <__DATA_REGION_LENGTH__+0x6c>
    fee8:	62 e2       	ldi	r22, 0x22	; 34
    feea:	78 e0       	ldi	r23, 0x08	; 8
    feec:	ce 01       	movw	r24, r28
    feee:	0e 94 3f 33 	call	0x667e	; 0x667e <strcmp>
    fef2:	89 2b       	or	r24, r25
    fef4:	d9 f1       	breq	.+118    	; 0xff6c <__DATA_REGION_LENGTH__+0x6c>
    fef6:	66 e2       	ldi	r22, 0x26	; 38
    fef8:	78 e0       	ldi	r23, 0x08	; 8
    fefa:	ce 01       	movw	r24, r28
    fefc:	0e 94 3f 33 	call	0x667e	; 0x667e <strcmp>
    ff00:	89 2b       	or	r24, r25
    ff02:	a1 f1       	breq	.+104    	; 0xff6c <__DATA_REGION_LENGTH__+0x6c>
    ff04:	6b ed       	ldi	r22, 0xDB	; 219
    ff06:	79 e0       	ldi	r23, 0x09	; 9
    ff08:	ce 01       	movw	r24, r28
    ff0a:	0e 94 3f 33 	call	0x667e	; 0x667e <strcmp>
    ff0e:	89 2b       	or	r24, r25
    ff10:	81 f1       	breq	.+96     	; 0xff72 <__DATA_REGION_LENGTH__+0x72>
    ff12:	6a e2       	ldi	r22, 0x2A	; 42
    ff14:	78 e0       	ldi	r23, 0x08	; 8
    ff16:	ce 01       	movw	r24, r28
    ff18:	0e 94 3f 33 	call	0x667e	; 0x667e <strcmp>
    ff1c:	89 2b       	or	r24, r25
    ff1e:	49 f1       	breq	.+82     	; 0xff72 <__DATA_REGION_LENGTH__+0x72>
    ff20:	6d e2       	ldi	r22, 0x2D	; 45
    ff22:	78 e0       	ldi	r23, 0x08	; 8
    ff24:	ce 01       	movw	r24, r28
    ff26:	0e 94 3f 33 	call	0x667e	; 0x667e <strcmp>
    ff2a:	89 2b       	or	r24, r25
    ff2c:	29 f1       	breq	.+74     	; 0xff78 <__DATA_REGION_LENGTH__+0x78>
    ff2e:	60 e3       	ldi	r22, 0x30	; 48
    ff30:	78 e0       	ldi	r23, 0x08	; 8
    ff32:	ce 01       	movw	r24, r28
    ff34:	0e 94 3f 33 	call	0x667e	; 0x667e <strcmp>
    ff38:	89 2b       	or	r24, r25
    ff3a:	f1 f0       	breq	.+60     	; 0xff78 <__DATA_REGION_LENGTH__+0x78>
    ff3c:	64 e3       	ldi	r22, 0x34	; 52
    ff3e:	78 e0       	ldi	r23, 0x08	; 8
    ff40:	ce 01       	movw	r24, r28
    ff42:	0e 94 3f 33 	call	0x667e	; 0x667e <strcmp>
    ff46:	89 2b       	or	r24, r25
    ff48:	b9 f0       	breq	.+46     	; 0xff78 <__DATA_REGION_LENGTH__+0x78>
    ff4a:	6f e3       	ldi	r22, 0x3F	; 63
    ff4c:	72 e1       	ldi	r23, 0x12	; 18
    ff4e:	ce 01       	movw	r24, r28
    ff50:	0e 94 3f 33 	call	0x667e	; 0x667e <strcmp>
    ff54:	89 2b       	or	r24, r25
    ff56:	99 f0       	breq	.+38     	; 0xff7e <__DATA_REGION_LENGTH__+0x7e>
    ff58:	68 e3       	ldi	r22, 0x38	; 56
    ff5a:	78 e0       	ldi	r23, 0x08	; 8
    ff5c:	ce 01       	movw	r24, r28
    ff5e:	0e 94 3f 33 	call	0x667e	; 0x667e <strcmp>
    ff62:	89 2b       	or	r24, r25
    ff64:	61 f0       	breq	.+24     	; 0xff7e <__DATA_REGION_LENGTH__+0x7e>
    ff66:	8f ef       	ldi	r24, 0xFF	; 255
    ff68:	9f ef       	ldi	r25, 0xFF	; 255
    ff6a:	0b c0       	rjmp	.+22     	; 0xff82 <__DATA_REGION_LENGTH__+0x82>
    ff6c:	82 e0       	ldi	r24, 0x02	; 2
    ff6e:	92 e0       	ldi	r25, 0x02	; 2
    ff70:	08 c0       	rjmp	.+16     	; 0xff82 <__DATA_REGION_LENGTH__+0x82>
    ff72:	81 e4       	ldi	r24, 0x41	; 65
    ff74:	92 e0       	ldi	r25, 0x02	; 2
    ff76:	05 c0       	rjmp	.+10     	; 0xff82 <__DATA_REGION_LENGTH__+0x82>
    ff78:	82 e4       	ldi	r24, 0x42	; 66
    ff7a:	92 e0       	ldi	r25, 0x02	; 2
    ff7c:	02 c0       	rjmp	.+4      	; 0xff82 <__DATA_REGION_LENGTH__+0x82>
    ff7e:	81 e4       	ldi	r24, 0x41	; 65
    ff80:	94 e0       	ldi	r25, 0x04	; 4
    ff82:	df 91       	pop	r29
    ff84:	cf 91       	pop	r28
    ff86:	08 95       	ret

0000ff88 <fopen>:
    ff88:	cf 93       	push	r28
    ff8a:	df 93       	push	r29
    ff8c:	ec 01       	movw	r28, r24
    ff8e:	cb 01       	movw	r24, r22
    ff90:	91 df       	rcall	.-222    	; 0xfeb4 <posix_fopen_modes_to_open>
    ff92:	bc 01       	movw	r22, r24
    ff94:	ce 01       	movw	r24, r28
    ff96:	ef de       	rcall	.-546    	; 0xfd76 <open>
    ff98:	8e d8       	rcall	.-3812   	; 0xf0b6 <fileno_to_stream>
    ff9a:	df 91       	pop	r29
    ff9c:	cf 91       	pop	r28
    ff9e:	08 95       	ret

0000ffa0 <fprintf>:
    ffa0:	a8 e0       	ldi	r26, 0x08	; 8
    ffa2:	b0 e0       	ldi	r27, 0x00	; 0
    ffa4:	e6 ed       	ldi	r30, 0xD6	; 214
    ffa6:	ff e7       	ldi	r31, 0x7F	; 127
    ffa8:	0c 94 29 e5 	jmp	0x1ca52	; 0x1ca52 <__prologue_saves__+0x20>
    ffac:	83 ec       	ldi	r24, 0xC3	; 195
    ffae:	97 e7       	ldi	r25, 0x77	; 119
    ffb0:	9a 83       	std	Y+2, r25	; 0x02
    ffb2:	89 83       	std	Y+1, r24	; 0x01
    ffb4:	18 86       	std	Y+8, r1	; 0x08
    ffb6:	1f 82       	std	Y+7, r1	; 0x07
    ffb8:	8d 85       	ldd	r24, Y+13	; 0x0d
    ffba:	9e 85       	ldd	r25, Y+14	; 0x0e
    ffbc:	9c 83       	std	Y+4, r25	; 0x04
    ffbe:	8b 83       	std	Y+3, r24	; 0x03
    ffc0:	4f 85       	ldd	r20, Y+15	; 0x0f
    ffc2:	58 89       	ldd	r21, Y+16	; 0x10
    ffc4:	60 e8       	ldi	r22, 0x80	; 128
    ffc6:	9e 01       	movw	r18, r28
    ffc8:	2f 5e       	subi	r18, 0xEF	; 239
    ffca:	3f 4f       	sbci	r19, 0xFF	; 255
    ffcc:	ce 01       	movw	r24, r28
    ffce:	01 96       	adiw	r24, 0x01	; 1
    ffd0:	0e 94 8d 43 	call	0x871a	; 0x871a <_printf_fn>
    ffd4:	8f 81       	ldd	r24, Y+7	; 0x07
    ffd6:	98 85       	ldd	r25, Y+8	; 0x08
    ffd8:	28 96       	adiw	r28, 0x08	; 8
    ffda:	e2 e0       	ldi	r30, 0x02	; 2
    ffdc:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__epilogue_restores__+0x20>

0000ffe0 <posix_help>:
    ffe0:	cf 93       	push	r28
    ffe2:	df 93       	push	r29
    ffe4:	00 d0       	rcall	.+0      	; 0xffe6 <posix_help+0x6>
    ffe6:	1f 92       	push	r1
    ffe8:	ec 01       	movw	r28, r24
    ffea:	84 ed       	ldi	r24, 0xD4	; 212
    ffec:	9d e0       	ldi	r25, 0x0D	; 13
    ffee:	a0 e0       	ldi	r26, 0x00	; 0
    fff0:	ed b7       	in	r30, 0x3d	; 61
    fff2:	fe b7       	in	r31, 0x3e	; 62
    fff4:	81 83       	std	Z+1, r24	; 0x01
    fff6:	92 83       	std	Z+2, r25	; 0x02
    fff8:	a3 83       	std	Z+3, r26	; 0x03
    fffa:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    fffe:	cd 2b       	or	r28, r29
   10000:	51 f0       	breq	.+20     	; 0x10016 <__EEPROM_REGION_LENGTH__+0x16>
   10002:	84 e1       	ldi	r24, 0x14	; 20
   10004:	9d e0       	ldi	r25, 0x0D	; 13
   10006:	a0 e0       	ldi	r26, 0x00	; 0
   10008:	ed b7       	in	r30, 0x3d	; 61
   1000a:	fe b7       	in	r31, 0x3e	; 62
   1000c:	81 83       	std	Z+1, r24	; 0x01
   1000e:	92 83       	std	Z+2, r25	; 0x02
   10010:	a3 83       	std	Z+3, r26	; 0x03
   10012:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   10016:	cd b7       	in	r28, 0x3d	; 61
   10018:	de b7       	in	r29, 0x3e	; 62
   1001a:	23 96       	adiw	r28, 0x03	; 3
   1001c:	e2 e0       	ldi	r30, 0x02	; 2
   1001e:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__epilogue_restores__+0x20>

00010022 <copy>:
   10022:	4f 92       	push	r4
   10024:	5f 92       	push	r5
   10026:	6f 92       	push	r6
   10028:	8f 92       	push	r8
   1002a:	9f 92       	push	r9
   1002c:	af 92       	push	r10
   1002e:	bf 92       	push	r11
   10030:	cf 92       	push	r12
   10032:	df 92       	push	r13
   10034:	ef 92       	push	r14
   10036:	ff 92       	push	r15
   10038:	0f 93       	push	r16
   1003a:	1f 93       	push	r17
   1003c:	cf 93       	push	r28
   1003e:	df 93       	push	r29
   10040:	ad b7       	in	r26, 0x3d	; 61
   10042:	be b7       	in	r27, 0x3e	; 62
   10044:	17 97       	sbiw	r26, 0x07	; 7
   10046:	0f b6       	in	r0, 0x3f	; 63
   10048:	f8 94       	cli
   1004a:	be bf       	out	0x3e, r27	; 62
   1004c:	0f be       	out	0x3f, r0	; 63
   1004e:	ad bf       	out	0x3d, r26	; 61
   10050:	8c 01       	movw	r16, r24
   10052:	eb 01       	movw	r28, r22
   10054:	ed b7       	in	r30, 0x3d	; 61
   10056:	fe b7       	in	r31, 0x3e	; 62
   10058:	95 83       	std	Z+5, r25	; 0x05
   1005a:	84 83       	std	Z+4, r24	; 0x04
   1005c:	85 e9       	ldi	r24, 0x95	; 149
   1005e:	9c e0       	ldi	r25, 0x0C	; 12
   10060:	a0 e0       	ldi	r26, 0x00	; 0
   10062:	81 83       	std	Z+1, r24	; 0x01
   10064:	92 83       	std	Z+2, r25	; 0x02
   10066:	a3 83       	std	Z+3, r26	; 0x03
   10068:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   1006c:	6c e1       	ldi	r22, 0x1C	; 28
   1006e:	78 e0       	ldi	r23, 0x08	; 8
   10070:	c8 01       	movw	r24, r16
   10072:	8a df       	rcall	.-236    	; 0xff88 <fopen>
   10074:	7c 01       	movw	r14, r24
   10076:	ed b7       	in	r30, 0x3d	; 61
   10078:	fe b7       	in	r31, 0x3e	; 62
   1007a:	89 2b       	or	r24, r25
   1007c:	59 f4       	brne	.+22     	; 0x10094 <copy+0x72>
   1007e:	15 83       	std	Z+5, r17	; 0x05
   10080:	04 83       	std	Z+4, r16	; 0x04
   10082:	85 e8       	ldi	r24, 0x85	; 133
   10084:	9c e0       	ldi	r25, 0x0C	; 12
   10086:	a0 e0       	ldi	r26, 0x00	; 0
   10088:	81 83       	std	Z+1, r24	; 0x01
   1008a:	92 83       	std	Z+2, r25	; 0x02
   1008c:	a3 83       	std	Z+3, r26	; 0x03
   1008e:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   10092:	20 c0       	rjmp	.+64     	; 0x100d4 <copy+0xb2>
   10094:	d5 83       	std	Z+5, r29	; 0x05
   10096:	c4 83       	std	Z+4, r28	; 0x04
   10098:	88 e7       	ldi	r24, 0x78	; 120
   1009a:	9c e0       	ldi	r25, 0x0C	; 12
   1009c:	a0 e0       	ldi	r26, 0x00	; 0
   1009e:	81 83       	std	Z+1, r24	; 0x01
   100a0:	92 83       	std	Z+2, r25	; 0x02
   100a2:	a3 83       	std	Z+3, r26	; 0x03
   100a4:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   100a8:	6a e2       	ldi	r22, 0x2A	; 42
   100aa:	78 e0       	ldi	r23, 0x08	; 8
   100ac:	ce 01       	movw	r24, r28
   100ae:	6c df       	rcall	.-296    	; 0xff88 <fopen>
   100b0:	8c 01       	movw	r16, r24
   100b2:	89 2b       	or	r24, r25
   100b4:	a1 f4       	brne	.+40     	; 0x100de <copy+0xbc>
   100b6:	ed b7       	in	r30, 0x3d	; 61
   100b8:	fe b7       	in	r31, 0x3e	; 62
   100ba:	d5 83       	std	Z+5, r29	; 0x05
   100bc:	c4 83       	std	Z+4, r28	; 0x04
   100be:	88 e6       	ldi	r24, 0x68	; 104
   100c0:	9c e0       	ldi	r25, 0x0C	; 12
   100c2:	a0 e0       	ldi	r26, 0x00	; 0
   100c4:	81 83       	std	Z+1, r24	; 0x01
   100c6:	92 83       	std	Z+2, r25	; 0x02
   100c8:	a3 83       	std	Z+3, r26	; 0x03
   100ca:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   100ce:	80 e0       	ldi	r24, 0x00	; 0
   100d0:	90 e0       	ldi	r25, 0x00	; 0
   100d2:	04 de       	rcall	.-1016   	; 0xfcdc <fclose>
   100d4:	60 e0       	ldi	r22, 0x00	; 0
   100d6:	70 e0       	ldi	r23, 0x00	; 0
   100d8:	80 e0       	ldi	r24, 0x00	; 0
   100da:	90 e0       	ldi	r25, 0x00	; 0
   100dc:	68 c0       	rjmp	.+208    	; 0x101ae <copy+0x18c>
   100de:	61 e0       	ldi	r22, 0x01	; 1
   100e0:	70 e0       	ldi	r23, 0x00	; 0
   100e2:	80 e0       	ldi	r24, 0x00	; 0
   100e4:	92 e0       	ldi	r25, 0x02	; 2
   100e6:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <safecalloc>
   100ea:	6c 01       	movw	r12, r24
   100ec:	89 2b       	or	r24, r25
   100ee:	21 f4       	brne	.+8      	; 0x100f8 <copy+0xd6>
   100f0:	c7 01       	movw	r24, r14
   100f2:	f4 dd       	rcall	.-1048   	; 0xfcdc <fclose>
   100f4:	c8 01       	movw	r24, r16
   100f6:	ed cf       	rjmp	.-38     	; 0x100d2 <copy+0xb0>
   100f8:	8b e5       	ldi	r24, 0x5B	; 91
   100fa:	9c e0       	ldi	r25, 0x0C	; 12
   100fc:	a0 e0       	ldi	r26, 0x00	; 0
   100fe:	ed b7       	in	r30, 0x3d	; 61
   10100:	fe b7       	in	r31, 0x3e	; 62
   10102:	81 83       	std	Z+1, r24	; 0x01
   10104:	92 83       	std	Z+2, r25	; 0x02
   10106:	a3 83       	std	Z+3, r26	; 0x03
   10108:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   1010c:	81 2c       	mov	r8, r1
   1010e:	91 2c       	mov	r9, r1
   10110:	54 01       	movw	r10, r8
   10112:	8f e3       	ldi	r24, 0x3F	; 63
   10114:	9c e0       	ldi	r25, 0x0C	; 12
   10116:	2c 01       	movw	r4, r24
   10118:	61 2c       	mov	r6, r1
   1011a:	97 01       	movw	r18, r14
   1011c:	40 e0       	ldi	r20, 0x00	; 0
   1011e:	52 e0       	ldi	r21, 0x02	; 2
   10120:	61 e0       	ldi	r22, 0x01	; 1
   10122:	70 e0       	ldi	r23, 0x00	; 0
   10124:	c6 01       	movw	r24, r12
   10126:	86 dc       	rcall	.-1780   	; 0xfa34 <fread>
   10128:	ec 01       	movw	r28, r24
   1012a:	18 16       	cp	r1, r24
   1012c:	19 06       	cpc	r1, r25
   1012e:	44 f5       	brge	.+80     	; 0x10180 <copy+0x15e>
   10130:	98 01       	movw	r18, r16
   10132:	ae 01       	movw	r20, r28
   10134:	61 e0       	ldi	r22, 0x01	; 1
   10136:	70 e0       	ldi	r23, 0x00	; 0
   10138:	c6 01       	movw	r24, r12
   1013a:	4e dd       	rcall	.-1380   	; 0xfbd8 <fwrite>
   1013c:	8c 17       	cp	r24, r28
   1013e:	9d 07       	cpc	r25, r29
   10140:	5c f4       	brge	.+22     	; 0x10158 <copy+0x136>
   10142:	8e e4       	ldi	r24, 0x4E	; 78
   10144:	9c e0       	ldi	r25, 0x0C	; 12
   10146:	a0 e0       	ldi	r26, 0x00	; 0
   10148:	ed b7       	in	r30, 0x3d	; 61
   1014a:	fe b7       	in	r31, 0x3e	; 62
   1014c:	81 83       	std	Z+1, r24	; 0x01
   1014e:	92 83       	std	Z+2, r25	; 0x02
   10150:	a3 83       	std	Z+3, r26	; 0x03
   10152:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   10156:	14 c0       	rjmp	.+40     	; 0x10180 <copy+0x15e>
   10158:	ce 01       	movw	r24, r28
   1015a:	dd 0f       	add	r29, r29
   1015c:	aa 0b       	sbc	r26, r26
   1015e:	bb 0b       	sbc	r27, r27
   10160:	88 0e       	add	r8, r24
   10162:	99 1e       	adc	r9, r25
   10164:	aa 1e       	adc	r10, r26
   10166:	bb 1e       	adc	r11, r27
   10168:	ed b7       	in	r30, 0x3d	; 61
   1016a:	fe b7       	in	r31, 0x3e	; 62
   1016c:	84 82       	std	Z+4, r8	; 0x04
   1016e:	95 82       	std	Z+5, r9	; 0x05
   10170:	a6 82       	std	Z+6, r10	; 0x06
   10172:	b7 82       	std	Z+7, r11	; 0x07
   10174:	41 82       	std	Z+1, r4	; 0x01
   10176:	52 82       	std	Z+2, r5	; 0x02
   10178:	63 82       	std	Z+3, r6	; 0x03
   1017a:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   1017e:	cd cf       	rjmp	.-102    	; 0x1011a <copy+0xf8>
   10180:	ed b7       	in	r30, 0x3d	; 61
   10182:	fe b7       	in	r31, 0x3e	; 62
   10184:	84 82       	std	Z+4, r8	; 0x04
   10186:	95 82       	std	Z+5, r9	; 0x05
   10188:	a6 82       	std	Z+6, r10	; 0x06
   1018a:	b7 82       	std	Z+7, r11	; 0x07
   1018c:	8c e2       	ldi	r24, 0x2C	; 44
   1018e:	9c e0       	ldi	r25, 0x0C	; 12
   10190:	a0 e0       	ldi	r26, 0x00	; 0
   10192:	81 83       	std	Z+1, r24	; 0x01
   10194:	92 83       	std	Z+2, r25	; 0x02
   10196:	a3 83       	std	Z+3, r26	; 0x03
   10198:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   1019c:	c6 01       	movw	r24, r12
   1019e:	0e 94 45 2a 	call	0x548a	; 0x548a <safefree>
   101a2:	c7 01       	movw	r24, r14
   101a4:	9b dd       	rcall	.-1226   	; 0xfcdc <fclose>
   101a6:	c8 01       	movw	r24, r16
   101a8:	99 dd       	rcall	.-1230   	; 0xfcdc <fclose>
   101aa:	b4 01       	movw	r22, r8
   101ac:	c5 01       	movw	r24, r10
   101ae:	ad b7       	in	r26, 0x3d	; 61
   101b0:	be b7       	in	r27, 0x3e	; 62
   101b2:	17 96       	adiw	r26, 0x07	; 7
   101b4:	0f b6       	in	r0, 0x3f	; 63
   101b6:	f8 94       	cli
   101b8:	be bf       	out	0x3e, r27	; 62
   101ba:	0f be       	out	0x3f, r0	; 63
   101bc:	ad bf       	out	0x3d, r26	; 61
   101be:	df 91       	pop	r29
   101c0:	cf 91       	pop	r28
   101c2:	1f 91       	pop	r17
   101c4:	0f 91       	pop	r16
   101c6:	ff 90       	pop	r15
   101c8:	ef 90       	pop	r14
   101ca:	df 90       	pop	r13
   101cc:	cf 90       	pop	r12
   101ce:	bf 90       	pop	r11
   101d0:	af 90       	pop	r10
   101d2:	9f 90       	pop	r9
   101d4:	8f 90       	pop	r8
   101d6:	6f 90       	pop	r6
   101d8:	5f 90       	pop	r5
   101da:	4f 90       	pop	r4
   101dc:	08 95       	ret

000101de <testpage>:
   101de:	cf 93       	push	r28
   101e0:	df 93       	push	r29
   101e2:	00 d0       	rcall	.+0      	; 0x101e4 <testpage+0x6>
   101e4:	1f 92       	push	r1
   101e6:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <_pagesize>
   101ea:	30 91 8e 01 	lds	r19, 0x018E	; 0x80018e <_pagesize+0x1>
   101ee:	82 17       	cp	r24, r18
   101f0:	93 07       	cpc	r25, r19
   101f2:	3c f1       	brlt	.+78     	; 0x10242 <testpage+0x64>
   101f4:	85 e2       	ldi	r24, 0x25	; 37
   101f6:	9c e0       	ldi	r25, 0x0C	; 12
   101f8:	a0 e0       	ldi	r26, 0x00	; 0
   101fa:	ed b7       	in	r30, 0x3d	; 61
   101fc:	fe b7       	in	r31, 0x3e	; 62
   101fe:	81 83       	std	Z+1, r24	; 0x01
   10200:	92 83       	std	Z+2, r25	; 0x02
   10202:	a3 83       	std	Z+3, r26	; 0x03
   10204:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   10208:	0e 94 d0 77 	call	0xefa0	; 0xefa0 <getchar>
   1020c:	ec 01       	movw	r28, r24
   1020e:	83 e2       	ldi	r24, 0x23	; 35
   10210:	9c e0       	ldi	r25, 0x0C	; 12
   10212:	a0 e0       	ldi	r26, 0x00	; 0
   10214:	ed b7       	in	r30, 0x3d	; 61
   10216:	fe b7       	in	r31, 0x3e	; 62
   10218:	81 83       	std	Z+1, r24	; 0x01
   1021a:	92 83       	std	Z+2, r25	; 0x02
   1021c:	a3 83       	std	Z+3, r26	; 0x03
   1021e:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   10222:	c1 37       	cpi	r28, 0x71	; 113
   10224:	d1 05       	cpc	r29, r1
   10226:	41 f0       	breq	.+16     	; 0x10238 <testpage+0x5a>
   10228:	2a 97       	sbiw	r28, 0x0a	; 10
   1022a:	49 f4       	brne	.+18     	; 0x1023e <testpage+0x60>
   1022c:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <_pagesize>
   10230:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <_pagesize+0x1>
   10234:	01 97       	sbiw	r24, 0x01	; 1
   10236:	05 c0       	rjmp	.+10     	; 0x10242 <testpage+0x64>
   10238:	8f ef       	ldi	r24, 0xFF	; 255
   1023a:	9f ef       	ldi	r25, 0xFF	; 255
   1023c:	02 c0       	rjmp	.+4      	; 0x10242 <testpage+0x64>
   1023e:	80 e0       	ldi	r24, 0x00	; 0
   10240:	90 e0       	ldi	r25, 0x00	; 0
   10242:	cd b7       	in	r28, 0x3d	; 61
   10244:	de b7       	in	r29, 0x3e	; 62
   10246:	23 96       	adiw	r28, 0x03	; 3
   10248:	e2 e0       	ldi	r30, 0x02	; 2
   1024a:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__epilogue_restores__+0x20>

0001024e <cat>:
/// @param[in] name: file name.
/// @param[in] option: --p page display
/// @return  void.
MEMSPACE
long cat(char *name, int dopage)
{
   1024e:	a7 e0       	ldi	r26, 0x07	; 7
   10250:	b1 e0       	ldi	r27, 0x01	; 1
   10252:	ed e2       	ldi	r30, 0x2D	; 45
   10254:	f1 e8       	ldi	r31, 0x81	; 129
   10256:	0c 94 1f e5 	jmp	0x1ca3e	; 0x1ca3e <__prologue_saves__+0xc>
   1025a:	8c 01       	movw	r16, r24
   1025c:	4b 01       	movw	r8, r22
    FILE *fp;
    int count = 0;
    int size = 0;
    char line[256];

    fp = fopen(name,"rb");
   1025e:	6c e1       	ldi	r22, 0x1C	; 28
   10260:	78 e0       	ldi	r23, 0x08	; 8
   10262:	92 de       	rcall	.-732    	; 0xff88 <fopen>
   10264:	7c 01       	movw	r14, r24
    if (!fp)
   10266:	89 2b       	or	r24, r25
   10268:	41 f0       	breq	.+16     	; 0x1027a <cat+0x2c>
   1026a:	c1 2c       	mov	r12, r1
   1026c:	d1 2c       	mov	r13, r1
   1026e:	a1 2c       	mov	r10, r1
   10270:	b1 2c       	mov	r11, r1
    {
        printf("Can't open: %s\n", name);
        return(0);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
   10272:	8e 01       	movw	r16, r28
   10274:	08 5f       	subi	r16, 0xF8	; 248
   10276:	1f 4f       	sbci	r17, 0xFF	; 255
   10278:	22 c0       	rjmp	.+68     	; 0x102be <cat+0x70>
    char line[256];

    fp = fopen(name,"rb");
    if (!fp)
    {
        printf("Can't open: %s\n", name);
   1027a:	ed b7       	in	r30, 0x3d	; 61
   1027c:	fe b7       	in	r31, 0x3e	; 62
   1027e:	15 83       	std	Z+5, r17	; 0x05
   10280:	04 83       	std	Z+4, r16	; 0x04
   10282:	8e ea       	ldi	r24, 0xAE	; 174
   10284:	9c e0       	ldi	r25, 0x0C	; 12
   10286:	a0 e0       	ldi	r26, 0x00	; 0
   10288:	81 83       	std	Z+1, r24	; 0x01
   1028a:	92 83       	std	Z+2, r25	; 0x02
   1028c:	a3 83       	std	Z+3, r26	; 0x03
   1028e:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
        return(0);
   10292:	c1 2c       	mov	r12, r1
   10294:	d1 2c       	mov	r13, r1
   10296:	76 01       	movw	r14, r12
   10298:	3f c0       	rjmp	.+126    	; 0x10318 <cat+0xca>
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    {
        trim_tail(line);
   1029a:	c8 01       	movw	r24, r16
   1029c:	0e 94 c3 33 	call	0x6786	; 0x6786 <trim_tail>
        size += strlen(line);
   102a0:	f8 01       	movw	r30, r16
   102a2:	01 90       	ld	r0, Z+
   102a4:	00 20       	and	r0, r0
   102a6:	e9 f7       	brne	.-6      	; 0x102a2 <cat+0x54>
   102a8:	31 97       	sbiw	r30, 0x01	; 1
   102aa:	e0 1b       	sub	r30, r16
   102ac:	f1 0b       	sbc	r31, r17
   102ae:	ce 0e       	add	r12, r30
   102b0:	df 1e       	adc	r13, r31
        puts(line);
   102b2:	c8 01       	movw	r24, r16
   102b4:	0e 94 28 78 	call	0xf050	; 0xf050 <puts>
        if(dopage)
   102b8:	81 14       	cp	r8, r1
   102ba:	91 04       	cpc	r9, r1
   102bc:	49 f4       	brne	.+18     	; 0x102d0 <cat+0x82>
    if (!fp)
    {
        printf("Can't open: %s\n", name);
        return(0);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
   102be:	a7 01       	movw	r20, r14
   102c0:	6e ef       	ldi	r22, 0xFE	; 254
   102c2:	70 e0       	ldi	r23, 0x00	; 0
   102c4:	c8 01       	movw	r24, r16
   102c6:	0e 94 dc 77 	call	0xefb8	; 0xefb8 <fgets>
   102ca:	89 2b       	or	r24, r25
   102cc:	31 f7       	brne	.-52     	; 0x1029a <cat+0x4c>
   102ce:	06 c0       	rjmp	.+12     	; 0x102dc <cat+0x8e>
        trim_tail(line);
        size += strlen(line);
        puts(line);
        if(dopage)
        {
            count = testpage(++count);
   102d0:	c5 01       	movw	r24, r10
   102d2:	01 96       	adiw	r24, 0x01	; 1
   102d4:	84 df       	rcall	.-248    	; 0x101de <testpage>
   102d6:	5c 01       	movw	r10, r24
            if(count < 0)
   102d8:	97 ff       	sbrs	r25, 7
   102da:	f1 cf       	rjmp	.-30     	; 0x102be <cat+0x70>
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    printf("\n");
   102dc:	8c ea       	ldi	r24, 0xAC	; 172
   102de:	9c e0       	ldi	r25, 0x0C	; 12
   102e0:	a0 e0       	ldi	r26, 0x00	; 0
   102e2:	ed b7       	in	r30, 0x3d	; 61
   102e4:	fe b7       	in	r31, 0x3e	; 62
   102e6:	81 83       	std	Z+1, r24	; 0x01
   102e8:	92 83       	std	Z+2, r25	; 0x02
   102ea:	a3 83       	std	Z+3, r26	; 0x03
   102ec:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    fclose(fp);
   102f0:	c7 01       	movw	r24, r14
   102f2:	f4 dc       	rcall	.-1560   	; 0xfcdc <fclose>
    printf("%ld bytes\n", (long)size);
   102f4:	0d 2c       	mov	r0, r13
   102f6:	00 0c       	add	r0, r0
   102f8:	ee 08       	sbc	r14, r14
   102fa:	ff 08       	sbc	r15, r15
   102fc:	ed b7       	in	r30, 0x3d	; 61
   102fe:	fe b7       	in	r31, 0x3e	; 62
   10300:	c4 82       	std	Z+4, r12	; 0x04
   10302:	d5 82       	std	Z+5, r13	; 0x05
   10304:	e6 82       	std	Z+6, r14	; 0x06
   10306:	f7 82       	std	Z+7, r15	; 0x07
   10308:	81 ea       	ldi	r24, 0xA1	; 161
   1030a:	9c e0       	ldi	r25, 0x0C	; 12
   1030c:	a0 e0       	ldi	r26, 0x00	; 0
   1030e:	81 83       	std	Z+1, r24	; 0x01
   10310:	92 83       	std	Z+2, r25	; 0x02
   10312:	a3 83       	std	Z+3, r26	; 0x03
   10314:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    return(size);
}
   10318:	c7 01       	movw	r24, r14
   1031a:	b6 01       	movw	r22, r12
   1031c:	c9 5f       	subi	r28, 0xF9	; 249
   1031e:	de 4f       	sbci	r29, 0xFE	; 254
   10320:	ec e0       	ldi	r30, 0x0C	; 12
   10322:	0c 94 3b e5 	jmp	0x1ca76	; 0x1ca76 <__epilogue_restores__+0xc>

00010326 <ls_info>:
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
   10326:	4f 92       	push	r4
   10328:	5f 92       	push	r5
   1032a:	6f 92       	push	r6
   1032c:	7f 92       	push	r7
   1032e:	af 92       	push	r10
   10330:	bf 92       	push	r11
   10332:	cf 92       	push	r12
   10334:	df 92       	push	r13
   10336:	ef 92       	push	r14
   10338:	ff 92       	push	r15
   1033a:	0f 93       	push	r16
   1033c:	1f 93       	push	r17
   1033e:	cf 93       	push	r28
   10340:	df 93       	push	r29
   10342:	cd b7       	in	r28, 0x3d	; 61
   10344:	de b7       	in	r29, 0x3e	; 62
   10346:	c9 54       	subi	r28, 0x49	; 73
   10348:	d1 09       	sbc	r29, r1
   1034a:	0f b6       	in	r0, 0x3f	; 63
   1034c:	f8 94       	cli
   1034e:	de bf       	out	0x3e, r29	; 62
   10350:	0f be       	out	0x3f, r0	; 63
   10352:	cd bf       	out	0x3d, r28	; 61
   10354:	8c 01       	movw	r16, r24
   10356:	7b 01       	movw	r14, r22
    uint16_t mask;
    char *cm = "rwx";
    char attr[12], *p;


    if(stat(name, &sp) == -1) 
   10358:	be 01       	movw	r22, r28
   1035a:	62 5f       	subi	r22, 0xF2	; 242
   1035c:	7f 4f       	sbci	r23, 0xFF	; 255
   1035e:	19 d9       	rcall	.-3534   	; 0xf592 <stat>
   10360:	01 96       	adiw	r24, 0x01	; 1
   10362:	79 f4       	brne	.+30     	; 0x10382 <ls_info+0x5c>
    {
        printf("can not stat: %s\n", name);
   10364:	ed b7       	in	r30, 0x3d	; 61
   10366:	fe b7       	in	r31, 0x3e	; 62
   10368:	15 83       	std	Z+5, r17	; 0x05
   1036a:	04 83       	std	Z+4, r16	; 0x04
   1036c:	81 e1       	ldi	r24, 0x11	; 17
   1036e:	9c e0       	ldi	r25, 0x0C	; 12
   10370:	a0 e0       	ldi	r26, 0x00	; 0
   10372:	81 83       	std	Z+1, r24	; 0x01
   10374:	92 83       	std	Z+2, r25	; 0x02
   10376:	a3 83       	std	Z+3, r26	; 0x03
   10378:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
        return(0);
   1037c:	80 e0       	ldi	r24, 0x00	; 0
   1037e:	90 e0       	ldi	r25, 0x00	; 0
   10380:	77 c0       	rjmp	.+238    	; 0x10470 <ls_info+0x14a>
    }

    if(!verbose)
   10382:	ef 28       	or	r14, r15
   10384:	81 f4       	brne	.+32     	; 0x103a6 <ls_info+0x80>
    {
        printf("%s\n",basename(name));
   10386:	c8 01       	movw	r24, r16
   10388:	0e 94 95 78 	call	0xf12a	; 0xf12a <basename>
   1038c:	ed b7       	in	r30, 0x3d	; 61
   1038e:	fe b7       	in	r31, 0x3e	; 62
   10390:	95 83       	std	Z+5, r25	; 0x05
   10392:	84 83       	std	Z+4, r24	; 0x04
   10394:	8d e0       	ldi	r24, 0x0D	; 13
   10396:	9c e0       	ldi	r25, 0x0C	; 12
   10398:	a0 e0       	ldi	r26, 0x00	; 0
   1039a:	81 83       	std	Z+1, r24	; 0x01
   1039c:	92 83       	std	Z+2, r25	; 0x02
   1039e:	a3 83       	std	Z+3, r26	; 0x03
   103a0:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   103a4:	63 c0       	rjmp	.+198    	; 0x1046c <ls_info+0x146>
        return(1);
    }

    p = attr;
    if(S_ISDIR(sp.st_mode))
   103a6:	4e 88       	ldd	r4, Y+22	; 0x16
   103a8:	5f 88       	ldd	r5, Y+23	; 0x17
   103aa:	68 8c       	ldd	r6, Y+24	; 0x18
   103ac:	79 8c       	ldd	r7, Y+25	; 0x19
   103ae:	d3 01       	movw	r26, r6
   103b0:	c2 01       	movw	r24, r4
   103b2:	88 27       	eor	r24, r24
   103b4:	90 7f       	andi	r25, 0xF0	; 240
   103b6:	aa 27       	eor	r26, r26
   103b8:	bb 27       	eor	r27, r27
   103ba:	81 15       	cp	r24, r1
   103bc:	90 44       	sbci	r25, 0x40	; 64
   103be:	a1 05       	cpc	r26, r1
   103c0:	b1 05       	cpc	r27, r1
   103c2:	11 f4       	brne	.+4      	; 0x103c8 <ls_info+0xa2>
        *p++ = 'd';
   103c4:	84 e6       	ldi	r24, 0x64	; 100
   103c6:	01 c0       	rjmp	.+2      	; 0x103ca <ls_info+0xa4>
    else
        *p++ = '-';
   103c8:	8d e2       	ldi	r24, 0x2D	; 45
   103ca:	8e af       	std	Y+62, r24	; 0x3e
   103cc:	fe 01       	movw	r30, r28
   103ce:	fe 96       	adiw	r30, 0x3e	; 62
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
   103d0:	e1 2c       	mov	r14, r1
   103d2:	ff 24       	eor	r15, r15
   103d4:	f3 94       	inc	r15
   103d6:	20 e0       	ldi	r18, 0x00	; 0
   103d8:	30 e0       	ldi	r19, 0x00	; 0
   103da:	be 2e       	mov	r11, r30
   103dc:	af 2e       	mov	r10, r31
    {
        // User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
   103de:	4d e2       	ldi	r20, 0x2D	; 45
    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
        // User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
   103e0:	53 e0       	ldi	r21, 0x03	; 3
   103e2:	c5 2e       	mov	r12, r21
   103e4:	d1 2c       	mov	r13, r1

    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
        // User
        if( sp.st_mode & mask)
   103e6:	c7 01       	movw	r24, r14
   103e8:	a0 e0       	ldi	r26, 0x00	; 0
   103ea:	b0 e0       	ldi	r27, 0x00	; 0
   103ec:	84 21       	and	r24, r4
   103ee:	95 21       	and	r25, r5
   103f0:	a6 21       	and	r26, r6
   103f2:	b7 21       	and	r27, r7
   103f4:	89 2b       	or	r24, r25
   103f6:	8a 2b       	or	r24, r26
   103f8:	8b 2b       	or	r24, r27
   103fa:	51 f0       	breq	.+20     	; 0x10410 <ls_info+0xea>
            *p++ = cm[ i % 3];
   103fc:	c9 01       	movw	r24, r18
   103fe:	b6 01       	movw	r22, r12
   10400:	0e 94 84 e4 	call	0x1c908	; 0x1c908 <__divmodhi4>
   10404:	dc 01       	movw	r26, r24
   10406:	a8 52       	subi	r26, 0x28	; 40
   10408:	b5 4f       	sbci	r27, 0xF5	; 245
   1040a:	8c 91       	ld	r24, X
   1040c:	81 83       	std	Z+1, r24	; 0x01
   1040e:	01 c0       	rjmp	.+2      	; 0x10412 <ls_info+0xec>
        else
            *p++ = '-';
   10410:	41 83       	std	Z+1, r20	; 0x01
        mask >>= 1;
   10412:	f6 94       	lsr	r15
   10414:	e7 94       	ror	r14
        *p++ = 'd';
    else
        *p++ = '-';

    mask = 4 << 6;
    for(i=0;i<9;++i)
   10416:	2f 5f       	subi	r18, 0xFF	; 255
   10418:	3f 4f       	sbci	r19, 0xFF	; 255
   1041a:	31 96       	adiw	r30, 0x01	; 1
   1041c:	29 30       	cpi	r18, 0x09	; 9
   1041e:	31 05       	cpc	r19, r1
   10420:	11 f7       	brne	.-60     	; 0x103e6 <ls_info+0xc0>
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
        mask >>= 1;
    }
    *p = 0;
   10422:	29 96       	adiw	r28, 0x09	; 9
   10424:	1f ae       	std	Y+63, r1	; 0x3f
   10426:	29 97       	sbiw	r28, 0x09	; 9

    printf("%s none none %12ld %s %s\n",
   10428:	4e a0       	ldd	r4, Y+38	; 0x26
   1042a:	5f a0       	ldd	r5, Y+39	; 0x27
   1042c:	68 a4       	ldd	r6, Y+40	; 0x28
   1042e:	79 a4       	ldd	r7, Y+41	; 0x29
   10430:	6e a9       	ldd	r22, Y+54	; 0x36
   10432:	7f a9       	ldd	r23, Y+55	; 0x37
   10434:	88 ad       	ldd	r24, Y+56	; 0x38
   10436:	99 ad       	ldd	r25, Y+57	; 0x39
   10438:	0e 94 70 78 	call	0xf0e0	; 0xf0e0 <mctime>
   1043c:	7c 01       	movw	r14, r24
   1043e:	c8 01       	movw	r24, r16
   10440:	0e 94 95 78 	call	0xf12a	; 0xf12a <basename>
   10444:	ed b7       	in	r30, 0x3d	; 61
   10446:	fe b7       	in	r31, 0x3e	; 62
   10448:	95 87       	std	Z+13, r25	; 0x0d
   1044a:	84 87       	std	Z+12, r24	; 0x0c
   1044c:	f3 86       	std	Z+11, r15	; 0x0b
   1044e:	e2 86       	std	Z+10, r14	; 0x0a
   10450:	46 82       	std	Z+6, r4	; 0x06
   10452:	57 82       	std	Z+7, r5	; 0x07
   10454:	60 86       	std	Z+8, r6	; 0x08
   10456:	71 86       	std	Z+9, r7	; 0x09
   10458:	b4 82       	std	Z+4, r11	; 0x04
   1045a:	a5 82       	std	Z+5, r10	; 0x05
   1045c:	83 ef       	ldi	r24, 0xF3	; 243
   1045e:	9b e0       	ldi	r25, 0x0B	; 11
   10460:	a0 e0       	ldi	r26, 0x00	; 0
   10462:	81 83       	std	Z+1, r24	; 0x01
   10464:	92 83       	std	Z+2, r25	; 0x02
   10466:	a3 83       	std	Z+3, r26	; 0x03
   10468:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
        attr, 
        (long) sp.st_size, 
        mctime((time_t)sp.st_mtime),
        basename(name));
    return(1);
   1046c:	81 e0       	ldi	r24, 0x01	; 1
   1046e:	90 e0       	ldi	r25, 0x00	; 0
}
   10470:	c7 5b       	subi	r28, 0xB7	; 183
   10472:	df 4f       	sbci	r29, 0xFF	; 255
   10474:	0f b6       	in	r0, 0x3f	; 63
   10476:	f8 94       	cli
   10478:	de bf       	out	0x3e, r29	; 62
   1047a:	0f be       	out	0x3f, r0	; 63
   1047c:	cd bf       	out	0x3d, r28	; 61
   1047e:	df 91       	pop	r29
   10480:	cf 91       	pop	r28
   10482:	1f 91       	pop	r17
   10484:	0f 91       	pop	r16
   10486:	ff 90       	pop	r15
   10488:	ef 90       	pop	r14
   1048a:	df 90       	pop	r13
   1048c:	cf 90       	pop	r12
   1048e:	bf 90       	pop	r11
   10490:	af 90       	pop	r10
   10492:	7f 90       	pop	r7
   10494:	6f 90       	pop	r6
   10496:	5f 90       	pop	r5
   10498:	4f 90       	pop	r4
   1049a:	08 95       	ret

0001049c <ls>:
/// @param[in] path: file name or directory
/// @param[in] option: -l for detail
/// @return  number of files
MEMSPACE
int ls(char *name, int verbose)
{
   1049c:	2f 92       	push	r2
   1049e:	3f 92       	push	r3
   104a0:	4f 92       	push	r4
   104a2:	5f 92       	push	r5
   104a4:	6f 92       	push	r6
   104a6:	8f 92       	push	r8
   104a8:	9f 92       	push	r9
   104aa:	af 92       	push	r10
   104ac:	bf 92       	push	r11
   104ae:	cf 92       	push	r12
   104b0:	df 92       	push	r13
   104b2:	ef 92       	push	r14
   104b4:	ff 92       	push	r15
   104b6:	0f 93       	push	r16
   104b8:	1f 93       	push	r17
   104ba:	cf 93       	push	r28
   104bc:	df 93       	push	r29
   104be:	cd b7       	in	r28, 0x3d	; 61
   104c0:	de b7       	in	r29, 0x3e	; 62
   104c2:	c7 53       	subi	r28, 0x37	; 55
   104c4:	d1 40       	sbci	r29, 0x01	; 1
   104c6:	0f b6       	in	r0, 0x3f	; 63
   104c8:	f8 94       	cli
   104ca:	de bf       	out	0x3e, r29	; 62
   104cc:	0f be       	out	0x3f, r0	; 63
   104ce:	cd bf       	out	0x3d, r28	; 61
   104d0:	7c 01       	movw	r14, r24
   104d2:	4b 01       	movw	r8, r22
    int files = 0;
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
   104d4:	1e 82       	std	Y+6, r1	; 0x06
   104d6:	8e 01       	movw	r16, r28
   104d8:	0a 5f       	subi	r16, 0xFA	; 250
   104da:	1f 4f       	sbci	r17, 0xFF	; 255
    if(!name || !*name || MATCH(name,".") )
   104dc:	00 97       	sbiw	r24, 0x00	; 0
   104de:	91 f4       	brne	.+36     	; 0x10504 <ls+0x68>
    {
        if( !getcwd(fullpath, sizeof(fullpath)-2) )
   104e0:	6e ef       	ldi	r22, 0xFE	; 254
   104e2:	70 e0       	ldi	r23, 0x00	; 0
   104e4:	c8 01       	movw	r24, r16
   104e6:	0e 94 eb 78 	call	0xf1d6	; 0xf1d6 <getcwd>
   104ea:	89 2b       	or	r24, r25
   104ec:	d1 f4       	brne	.+52     	; 0x10522 <ls+0x86>
        {
            printf("ls: Can't get current directory\n"); 
   104ee:	82 ed       	ldi	r24, 0xD2	; 210
   104f0:	9b e0       	ldi	r25, 0x0B	; 11
   104f2:	a0 e0       	ldi	r26, 0x00	; 0
   104f4:	ed b7       	in	r30, 0x3d	; 61
   104f6:	fe b7       	in	r31, 0x3e	; 62
   104f8:	81 83       	std	Z+1, r24	; 0x01
   104fa:	92 83       	std	Z+2, r25	; 0x02
   104fc:	a3 83       	std	Z+3, r26	; 0x03
   104fe:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   10502:	37 c0       	rjmp	.+110    	; 0x10572 <ls+0xd6>
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
    if(!name || !*name || MATCH(name,".") )
   10504:	fc 01       	movw	r30, r24
   10506:	80 81       	ld	r24, Z
   10508:	88 23       	and	r24, r24
   1050a:	51 f3       	breq	.-44     	; 0x104e0 <ls+0x44>
   1050c:	6e e0       	ldi	r22, 0x0E	; 14
   1050e:	72 e1       	ldi	r23, 0x12	; 18
   10510:	c7 01       	movw	r24, r14
   10512:	0e 94 dd 33 	call	0x67ba	; 0x67ba <MATCH>
   10516:	89 2b       	or	r24, r25
   10518:	19 f7       	brne	.-58     	; 0x104e0 <ls+0x44>

        }
    }
    else
    {
        strcpy(fullpath,name);
   1051a:	b7 01       	movw	r22, r14
   1051c:	c8 01       	movw	r24, r16
   1051e:	0e 94 e5 32 	call	0x65ca	; 0x65ca <strcpy>
    }
    len = strlen(fullpath);
   10522:	f8 01       	movw	r30, r16
   10524:	01 90       	ld	r0, Z+
   10526:	00 20       	and	r0, r0
   10528:	e9 f7       	brne	.-6      	; 0x10524 <ls+0x88>
   1052a:	31 97       	sbiw	r30, 0x01	; 1
   1052c:	1f 01       	movw	r2, r30
   1052e:	20 1a       	sub	r2, r16
   10530:	31 0a       	sbc	r3, r17


    printf("Listing:[%s]\n",fullpath);
   10532:	ed b7       	in	r30, 0x3d	; 61
   10534:	fe b7       	in	r31, 0x3e	; 62
   10536:	15 83       	std	Z+5, r17	; 0x05
   10538:	04 83       	std	Z+4, r16	; 0x04
   1053a:	84 ec       	ldi	r24, 0xC4	; 196
   1053c:	9b e0       	ldi	r25, 0x0B	; 11
   1053e:	a0 e0       	ldi	r26, 0x00	; 0
   10540:	81 83       	std	Z+1, r24	; 0x01
   10542:	92 83       	std	Z+2, r25	; 0x02
   10544:	a3 83       	std	Z+3, r26	; 0x03
   10546:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>

    if (stat(fullpath, &st)) 
   1054a:	be 01       	movw	r22, r28
   1054c:	6a 5f       	subi	r22, 0xFA	; 250
   1054e:	7e 4f       	sbci	r23, 0xFE	; 254
   10550:	c8 01       	movw	r24, r16
   10552:	1f d8       	rcall	.-4034   	; 0xf592 <stat>
   10554:	7c 01       	movw	r14, r24
   10556:	89 2b       	or	r24, r25
   10558:	79 f0       	breq	.+30     	; 0x10578 <ls+0xdc>
    { 
        printf("ls: cannot stat [%s]\n", fullpath); 
   1055a:	ed b7       	in	r30, 0x3d	; 61
   1055c:	fe b7       	in	r31, 0x3e	; 62
   1055e:	15 83       	std	Z+5, r17	; 0x05
   10560:	04 83       	std	Z+4, r16	; 0x04
   10562:	8e ea       	ldi	r24, 0xAE	; 174
   10564:	9b e0       	ldi	r25, 0x0B	; 11
   10566:	a0 e0       	ldi	r26, 0x00	; 0
   10568:	81 83       	std	Z+1, r24	; 0x01
   1056a:	92 83       	std	Z+2, r25	; 0x02
   1056c:	a3 83       	std	Z+3, r26	; 0x03
   1056e:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
        return(0); 
   10572:	e1 2c       	mov	r14, r1
   10574:	f1 2c       	mov	r15, r1
   10576:	8c c0       	rjmp	.+280    	; 0x10690 <ls+0x1f4>
    }

    switch (st.st_mode & S_IFMT) 
   10578:	c2 5f       	subi	r28, 0xF2	; 242
   1057a:	de 4f       	sbci	r29, 0xFE	; 254
   1057c:	88 81       	ld	r24, Y
   1057e:	99 81       	ldd	r25, Y+1	; 0x01
   10580:	aa 81       	ldd	r26, Y+2	; 0x02
   10582:	bb 81       	ldd	r27, Y+3	; 0x03
   10584:	ce 50       	subi	r28, 0x0E	; 14
   10586:	d1 40       	sbci	r29, 0x01	; 1
   10588:	88 27       	eor	r24, r24
   1058a:	90 7f       	andi	r25, 0xF0	; 240
   1058c:	aa 27       	eor	r26, r26
   1058e:	bb 27       	eor	r27, r27
   10590:	81 15       	cp	r24, r1
   10592:	f0 e4       	ldi	r31, 0x40	; 64
   10594:	9f 07       	cpc	r25, r31
   10596:	a1 05       	cpc	r26, r1
   10598:	b1 05       	cpc	r27, r1
   1059a:	59 f0       	breq	.+22     	; 0x105b2 <ls+0x116>
   1059c:	81 15       	cp	r24, r1
   1059e:	90 48       	sbci	r25, 0x80	; 128
   105a0:	a1 05       	cpc	r26, r1
   105a2:	b1 05       	cpc	r27, r1
   105a4:	09 f0       	breq	.+2      	; 0x105a8 <ls+0x10c>
   105a6:	66 c0       	rjmp	.+204    	; 0x10674 <ls+0x1d8>
    {
    case S_IFREG:
        files = ls_info(fullpath,verbose);
   105a8:	b4 01       	movw	r22, r8
   105aa:	c8 01       	movw	r24, r16
   105ac:	bc de       	rcall	.-648    	; 0x10326 <ls_info>
   105ae:	7c 01       	movw	r14, r24
        break;
   105b0:	63 c0       	rjmp	.+198    	; 0x10678 <ls+0x1dc>
    case S_IFDIR:
        dirp = opendir(fullpath);
   105b2:	c8 01       	movw	r24, r16
   105b4:	0e 94 99 79 	call	0xf332	; 0xf332 <opendir>
   105b8:	5c 01       	movw	r10, r24
        if(!dirp)
   105ba:	89 2b       	or	r24, r25
   105bc:	81 f0       	breq	.+32     	; 0x105de <ls+0x142>
    }
    else
    {
        strcpy(fullpath,name);
    }
    len = strlen(fullpath);
   105be:	e1 2c       	mov	r14, r1
   105c0:	f1 2c       	mov	r15, r1
                strcat(fullpath,"/");
            }
            strcat(fullpath,de->d_name);
            files +=ls_info(fullpath,verbose);
            // restore path
            fullpath[len] = 0;
   105c2:	c8 01       	movw	r24, r16
   105c4:	82 0d       	add	r24, r2
   105c6:	93 1d       	adc	r25, r3
   105c8:	ca 5c       	subi	r28, 0xCA	; 202
   105ca:	de 4f       	sbci	r29, 0xFE	; 254
   105cc:	99 83       	std	Y+1, r25	; 0x01
   105ce:	88 83       	st	Y, r24
   105d0:	c6 53       	subi	r28, 0x36	; 54
   105d2:	d1 40       	sbci	r29, 0x01	; 1
                break;
            // FIXME neeed beetter string length tests here
            len2 = strlen(de->d_name);
            if(len + len2 >= MAX_NAME_LEN)
            {
                printf("name:[%s] too long with full path\n",de->d_name);
   105d4:	8b e7       	ldi	r24, 0x7B	; 123
   105d6:	9b e0       	ldi	r25, 0x0B	; 11
   105d8:	2c 01       	movw	r4, r24
   105da:	61 2c       	mov	r6, r1
   105dc:	24 c0       	rjmp	.+72     	; 0x10626 <ls+0x18a>
        break;
    case S_IFDIR:
        dirp = opendir(fullpath);
        if(!dirp)
        {
            printf("opendir failed\n");
   105de:	8e e9       	ldi	r24, 0x9E	; 158
   105e0:	9b e0       	ldi	r25, 0x0B	; 11
   105e2:	a0 e0       	ldi	r26, 0x00	; 0
   105e4:	ed b7       	in	r30, 0x3d	; 61
   105e6:	fe b7       	in	r31, 0x3e	; 62
   105e8:	81 83       	std	Z+1, r24	; 0x01
   105ea:	92 83       	std	Z+2, r25	; 0x02
   105ec:	a3 83       	std	Z+3, r26	; 0x03
   105ee:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
            return(0);
   105f2:	4e c0       	rjmp	.+156    	; 0x10690 <ls+0x1f4>
        }
        while ( (de = readdir(dirp)) ) 
        {
            if(de->d_name[0] == 0)
   105f4:	f6 01       	movw	r30, r12
   105f6:	80 81       	ld	r24, Z
   105f8:	88 23       	and	r24, r24
   105fa:	d9 f0       	breq	.+54     	; 0x10632 <ls+0x196>
                break;
            // FIXME neeed beetter string length tests here
            len2 = strlen(de->d_name);
   105fc:	f6 01       	movw	r30, r12
   105fe:	01 90       	ld	r0, Z+
   10600:	00 20       	and	r0, r0
   10602:	e9 f7       	brne	.-6      	; 0x105fe <ls+0x162>
   10604:	31 97       	sbiw	r30, 0x01	; 1
   10606:	ec 19       	sub	r30, r12
   10608:	fd 09       	sbc	r31, r13
            if(len + len2 >= MAX_NAME_LEN)
   1060a:	e2 0d       	add	r30, r2
   1060c:	f3 1d       	adc	r31, r3
   1060e:	ef 3f       	cpi	r30, 0xFF	; 255
   10610:	f1 05       	cpc	r31, r1
   10612:	9c f0       	brlt	.+38     	; 0x1063a <ls+0x19e>
            {
                printf("name:[%s] too long with full path\n",de->d_name);
   10614:	ed b7       	in	r30, 0x3d	; 61
   10616:	fe b7       	in	r31, 0x3e	; 62
   10618:	d5 82       	std	Z+5, r13	; 0x05
   1061a:	c4 82       	std	Z+4, r12	; 0x04
   1061c:	41 82       	std	Z+1, r4	; 0x01
   1061e:	52 82       	std	Z+2, r5	; 0x02
   10620:	63 82       	std	Z+3, r6	; 0x03
   10622:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
        if(!dirp)
        {
            printf("opendir failed\n");
            return(0);
        }
        while ( (de = readdir(dirp)) ) 
   10626:	c5 01       	movw	r24, r10
   10628:	0e 94 b7 79 	call	0xf36e	; 0xf36e <readdir>
   1062c:	6c 01       	movw	r12, r24
   1062e:	89 2b       	or	r24, r25
   10630:	09 f7       	brne	.-62     	; 0x105f4 <ls+0x158>
#ifdef ESP8266
            optimistic_yield(1000);
            wdt_reset();
#endif
        }
        closedir(dirp);
   10632:	c5 01       	movw	r24, r10
   10634:	0e 94 7e 79 	call	0xf2fc	; 0xf2fc <closedir>
        break;
   10638:	1f c0       	rjmp	.+62     	; 0x10678 <ls+0x1dc>
            if(len + len2 >= MAX_NAME_LEN)
            {
                printf("name:[%s] too long with full path\n",de->d_name);
                continue;
            }
            if(!MATCH(fullpath,"/") )
   1063a:	64 ec       	ldi	r22, 0xC4	; 196
   1063c:	77 e0       	ldi	r23, 0x07	; 7
   1063e:	c8 01       	movw	r24, r16
   10640:	0e 94 dd 33 	call	0x67ba	; 0x67ba <MATCH>
   10644:	89 2b       	or	r24, r25
   10646:	29 f4       	brne	.+10     	; 0x10652 <ls+0x1b6>
            {
                strcat(fullpath,"/");
   10648:	64 ec       	ldi	r22, 0xC4	; 196
   1064a:	77 e0       	ldi	r23, 0x07	; 7
   1064c:	c8 01       	movw	r24, r16
   1064e:	0e 94 06 33 	call	0x660c	; 0x660c <strcat>
            }
            strcat(fullpath,de->d_name);
   10652:	b6 01       	movw	r22, r12
   10654:	c8 01       	movw	r24, r16
   10656:	0e 94 06 33 	call	0x660c	; 0x660c <strcat>
            files +=ls_info(fullpath,verbose);
   1065a:	b4 01       	movw	r22, r8
   1065c:	c8 01       	movw	r24, r16
   1065e:	63 de       	rcall	.-826    	; 0x10326 <ls_info>
   10660:	e8 0e       	add	r14, r24
   10662:	f9 1e       	adc	r15, r25
            // restore path
            fullpath[len] = 0;
   10664:	ca 5c       	subi	r28, 0xCA	; 202
   10666:	de 4f       	sbci	r29, 0xFE	; 254
   10668:	e8 81       	ld	r30, Y
   1066a:	f9 81       	ldd	r31, Y+1	; 0x01
   1066c:	c6 53       	subi	r28, 0x36	; 54
   1066e:	d1 40       	sbci	r29, 0x01	; 1
   10670:	10 82       	st	Z, r1
   10672:	d9 cf       	rjmp	.-78     	; 0x10626 <ls+0x18a>
MEMSPACE
int ls(char *name, int verbose)
{
    struct stat st;
    DIR *dirp;
    int files = 0;
   10674:	e1 2c       	mov	r14, r1
   10676:	f1 2c       	mov	r15, r1
#endif
        }
        closedir(dirp);
        break;
    }
    printf("Files: %d\n", (int)files);
   10678:	ed b7       	in	r30, 0x3d	; 61
   1067a:	fe b7       	in	r31, 0x3e	; 62
   1067c:	f5 82       	std	Z+5, r15	; 0x05
   1067e:	e4 82       	std	Z+4, r14	; 0x04
   10680:	80 e7       	ldi	r24, 0x70	; 112
   10682:	9b e0       	ldi	r25, 0x0B	; 11
   10684:	a0 e0       	ldi	r26, 0x00	; 0
   10686:	81 83       	std	Z+1, r24	; 0x01
   10688:	92 83       	std	Z+2, r25	; 0x02
   1068a:	a3 83       	std	Z+3, r26	; 0x03
   1068c:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    return(files);
}
   10690:	c7 01       	movw	r24, r14
   10692:	c9 5c       	subi	r28, 0xC9	; 201
   10694:	de 4f       	sbci	r29, 0xFE	; 254
   10696:	0f b6       	in	r0, 0x3f	; 63
   10698:	f8 94       	cli
   1069a:	de bf       	out	0x3e, r29	; 62
   1069c:	0f be       	out	0x3f, r0	; 63
   1069e:	cd bf       	out	0x3d, r28	; 61
   106a0:	df 91       	pop	r29
   106a2:	cf 91       	pop	r28
   106a4:	1f 91       	pop	r17
   106a6:	0f 91       	pop	r16
   106a8:	ff 90       	pop	r15
   106aa:	ef 90       	pop	r14
   106ac:	df 90       	pop	r13
   106ae:	cf 90       	pop	r12
   106b0:	bf 90       	pop	r11
   106b2:	af 90       	pop	r10
   106b4:	9f 90       	pop	r9
   106b6:	8f 90       	pop	r8
   106b8:	6f 90       	pop	r6
   106ba:	5f 90       	pop	r5
   106bc:	4f 90       	pop	r4
   106be:	3f 90       	pop	r3
   106c0:	2f 90       	pop	r2
   106c2:	08 95       	ret

000106c4 <posix_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int posix_tests(int argc,char *argv[])
{
   106c4:	a7 e0       	ldi	r26, 0x07	; 7
   106c6:	b1 e0       	ldi	r27, 0x01	; 1
   106c8:	e8 e6       	ldi	r30, 0x68	; 104
   106ca:	f3 e8       	ldi	r31, 0x83	; 131
   106cc:	0c 94 1b e5 	jmp	0x1ca36	; 0x1ca36 <__prologue_saves__+0x4>
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   106d0:	fb 01       	movw	r30, r22
   106d2:	c0 80       	ld	r12, Z
   106d4:	d1 80       	ldd	r13, Z+1	; 0x01

    if(!ptr)
   106d6:	c1 14       	cp	r12, r1
   106d8:	d1 04       	cpc	r13, r1
   106da:	09 f4       	brne	.+2      	; 0x106de <posix_tests+0x1a>
   106dc:	9a c1       	rjmp	.+820    	; 0x10a12 <posix_tests+0x34e>
   106de:	2b 01       	movw	r4, r22
   106e0:	8c 01       	movw	r16, r24
        return(0);

    if( MATCH(ptr,"posix") )
   106e2:	6c ed       	ldi	r22, 0xDC	; 220
   106e4:	7a e0       	ldi	r23, 0x0A	; 10
   106e6:	c6 01       	movw	r24, r12
   106e8:	0e 94 dd 33 	call	0x67ba	; 0x67ba <MATCH>
   106ec:	89 2b       	or	r24, r25
   106ee:	a9 f0       	breq	.+42     	; 0x1071a <posix_tests+0x56>
    {
        ptr = argv[ind++];
   106f0:	f2 01       	movw	r30, r4
   106f2:	c2 80       	ldd	r12, Z+2	; 0x02
   106f4:	d3 80       	ldd	r13, Z+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
   106f6:	c1 14       	cp	r12, r1
   106f8:	d1 04       	cpc	r13, r1
   106fa:	21 f4       	brne	.+8      	; 0x10704 <posix_tests+0x40>
        {
            posix_help(1);
   106fc:	81 e0       	ldi	r24, 0x01	; 1
   106fe:	90 e0       	ldi	r25, 0x00	; 0
   10700:	6f dc       	rcall	.-1826   	; 0xffe0 <posix_help>
   10702:	28 c1       	rjmp	.+592    	; 0x10954 <posix_tests+0x290>
        return(0);

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
   10704:	6f eb       	ldi	r22, 0xBF	; 191
   10706:	75 e1       	ldi	r23, 0x15	; 21
   10708:	c6 01       	movw	r24, r12
   1070a:	0e 94 dd 33 	call	0x67ba	; 0x67ba <MATCH>
   1070e:	89 2b       	or	r24, r25
   10710:	a9 f7       	brne	.-22     	; 0x106fc <posix_tests+0x38>
    if(!ptr)
        return(0);

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
   10712:	22 e0       	ldi	r18, 0x02	; 2
   10714:	62 2e       	mov	r6, r18
   10716:	71 2c       	mov	r7, r1
   10718:	03 c0       	rjmp	.+6      	; 0x10720 <posix_tests+0x5c>
{
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   1071a:	66 24       	eor	r6, r6
   1071c:	63 94       	inc	r6
   1071e:	71 2c       	mov	r7, r1
            posix_help(1);
            return(1);
        }
    }

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
   10720:	73 01       	movw	r14, r6
   10722:	ff ef       	ldi	r31, 0xFF	; 255
   10724:	ef 1a       	sub	r14, r31
   10726:	ff 0a       	sbc	r15, r31
   10728:	98 01       	movw	r18, r16
   1072a:	a7 01       	movw	r20, r14
   1072c:	62 ee       	ldi	r22, 0xE2	; 226
   1072e:	7a e0       	ldi	r23, 0x0A	; 10
   10730:	c6 01       	movw	r24, r12
   10732:	0e 94 05 34 	call	0x680a	; 0x680a <MATCHARGS>
   10736:	89 2b       	or	r24, r25
   10738:	a1 f1       	breq	.+104    	; 0x107a2 <posix_tests+0xde>
   1073a:	73 01       	movw	r14, r6
   1073c:	ee 0c       	add	r14, r14
   1073e:	ff 1c       	adc	r15, r15
   10740:	e4 0c       	add	r14, r4
   10742:	f5 1c       	adc	r15, r5
   10744:	57 01       	movw	r10, r14
   10746:	47 01       	movw	r8, r14
   10748:	63 01       	movw	r12, r6
   1074a:	41 2c       	mov	r4, r1
   1074c:	51 2c       	mov	r5, r1
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   1074e:	c0 16       	cp	r12, r16
   10750:	d1 06       	cpc	r13, r17
   10752:	1c f5       	brge	.+70     	; 0x1079a <posix_tests+0xd6>
        {
            if(MATCH(argv[i],"-p"))
   10754:	66 ee       	ldi	r22, 0xE6	; 230
   10756:	7a e0       	ldi	r23, 0x0A	; 10
   10758:	f4 01       	movw	r30, r8
   1075a:	81 91       	ld	r24, Z+
   1075c:	91 91       	ld	r25, Z+
   1075e:	4f 01       	movw	r8, r30
   10760:	0e 94 dd 33 	call	0x67ba	; 0x67ba <MATCH>
   10764:	89 2b       	or	r24, r25
   10766:	19 f0       	breq	.+6      	; 0x1076e <posix_tests+0xaa>
                page = 1;
   10768:	44 24       	eor	r4, r4
   1076a:	43 94       	inc	r4
   1076c:	51 2c       	mov	r5, r1

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   1076e:	ff ef       	ldi	r31, 0xFF	; 255
   10770:	cf 1a       	sub	r12, r31
   10772:	df 0a       	sbc	r13, r31
   10774:	ec cf       	rjmp	.-40     	; 0x1074e <posix_tests+0x8a>
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
        {
            if(!MATCH(argv[i],"-p"))
   10776:	66 ee       	ldi	r22, 0xE6	; 230
   10778:	7a e0       	ldi	r23, 0x0A	; 10
   1077a:	f5 01       	movw	r30, r10
   1077c:	81 91       	ld	r24, Z+
   1077e:	91 91       	ld	r25, Z+
   10780:	5f 01       	movw	r10, r30
   10782:	0e 94 dd 33 	call	0x67ba	; 0x67ba <MATCH>
   10786:	89 2b       	or	r24, r25
   10788:	29 f4       	brne	.+10     	; 0x10794 <posix_tests+0xd0>
				cat(argv[ind], page);
   1078a:	b2 01       	movw	r22, r4
   1078c:	f7 01       	movw	r30, r14
   1078e:	80 81       	ld	r24, Z
   10790:	91 81       	ldd	r25, Z+1	; 0x01
   10792:	5d dd       	rcall	.-1350   	; 0x1024e <cat>
        for(i=ind;i<argc;++i)
        {
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
   10794:	ff ef       	ldi	r31, 0xFF	; 255
   10796:	6f 1a       	sub	r6, r31
   10798:	7f 0a       	sbc	r7, r31
   1079a:	60 16       	cp	r6, r16
   1079c:	71 06       	cpc	r7, r17
   1079e:	5c f3       	brlt	.-42     	; 0x10776 <posix_tests+0xb2>
   107a0:	d9 c0       	rjmp	.+434    	; 0x10954 <posix_tests+0x290>
        chmod( argv[ind],strtol(argv[ind+1],NULL,8));
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"copy", (ind + 2), argc))
   107a2:	53 01       	movw	r10, r6
   107a4:	82 e0       	ldi	r24, 0x02	; 2
   107a6:	a8 0e       	add	r10, r24
   107a8:	b1 1c       	adc	r11, r1
   107aa:	98 01       	movw	r18, r16
   107ac:	a5 01       	movw	r20, r10
   107ae:	69 ee       	ldi	r22, 0xE9	; 233
   107b0:	7a e0       	ldi	r23, 0x0A	; 10
   107b2:	c6 01       	movw	r24, r12
   107b4:	0e 94 05 34 	call	0x680a	; 0x680a <MATCHARGS>
   107b8:	89 2b       	or	r24, r25
   107ba:	59 f0       	breq	.+22     	; 0x107d2 <posix_tests+0x10e>
    {
        copy(argv[ind],argv[ind+1]);
   107bc:	f3 01       	movw	r30, r6
   107be:	ee 0f       	add	r30, r30
   107c0:	ff 1f       	adc	r31, r31
   107c2:	e4 0d       	add	r30, r4
   107c4:	f5 1d       	adc	r31, r5
   107c6:	62 81       	ldd	r22, Z+2	; 0x02
   107c8:	73 81       	ldd	r23, Z+3	; 0x03
   107ca:	80 81       	ld	r24, Z
   107cc:	91 81       	ldd	r25, Z+1	; 0x01
   107ce:	29 dc       	rcall	.-1966   	; 0x10022 <copy>
   107d0:	c1 c0       	rjmp	.+386    	; 0x10954 <posix_tests+0x290>
        return(1);
    }

    if (MATCHARGS(ptr,"cd", (ind + 1), argc))
   107d2:	98 01       	movw	r18, r16
   107d4:	a7 01       	movw	r20, r14
   107d6:	6e ee       	ldi	r22, 0xEE	; 238
   107d8:	7a e0       	ldi	r23, 0x0A	; 10
   107da:	c6 01       	movw	r24, r12
   107dc:	0e 94 05 34 	call	0x680a	; 0x680a <MATCHARGS>
   107e0:	89 2b       	or	r24, r25
   107e2:	b9 f0       	breq	.+46     	; 0x10812 <posix_tests+0x14e>
    {
        if ( chdir(argv[ind]) != 0)
   107e4:	73 01       	movw	r14, r6
   107e6:	ee 0c       	add	r14, r14
   107e8:	ff 1c       	adc	r15, r15
   107ea:	e4 0c       	add	r14, r4
   107ec:	f5 1c       	adc	r15, r5
   107ee:	f7 01       	movw	r30, r14
   107f0:	80 81       	ld	r24, Z
   107f2:	91 81       	ldd	r25, Z+1	; 0x01
   107f4:	0e 94 a3 78 	call	0xf146	; 0xf146 <chdir>
   107f8:	89 2b       	or	r24, r25
   107fa:	09 f4       	brne	.+2      	; 0x107fe <posix_tests+0x13a>
   107fc:	ab c0       	rjmp	.+342    	; 0x10954 <posix_tests+0x290>
			printf("chdir %s failed\n", argv[ind]);
   107fe:	f7 01       	movw	r30, r14
   10800:	80 81       	ld	r24, Z
   10802:	91 81       	ldd	r25, Z+1	; 0x01
   10804:	ed b7       	in	r30, 0x3d	; 61
   10806:	fe b7       	in	r31, 0x3e	; 62
   10808:	95 83       	std	Z+5, r25	; 0x05
   1080a:	84 83       	std	Z+4, r24	; 0x04
   1080c:	83 e0       	ldi	r24, 0x03	; 3
   1080e:	9d e0       	ldi	r25, 0x0D	; 13
   10810:	9b c0       	rjmp	.+310    	; 0x10948 <posix_tests+0x284>
        logfile(argv[ind],argv[ind+1]);
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
   10812:	98 01       	movw	r18, r16
   10814:	a3 01       	movw	r20, r6
   10816:	66 ef       	ldi	r22, 0xF6	; 246
   10818:	77 e0       	ldi	r23, 0x07	; 7
   1081a:	c6 01       	movw	r24, r12
   1081c:	0e 94 05 34 	call	0x680a	; 0x680a <MATCHARGS>
   10820:	4c 01       	movw	r8, r24
   10822:	89 2b       	or	r24, r25
   10824:	69 f1       	breq	.+90     	; 0x10880 <posix_tests+0x1bc>
   10826:	73 01       	movw	r14, r6
   10828:	ee 0c       	add	r14, r14
   1082a:	ff 1c       	adc	r15, r15
   1082c:	e4 0c       	add	r14, r4
   1082e:	f5 1c       	adc	r15, r5
   10830:	c1 2c       	mov	r12, r1
   10832:	d1 2c       	mov	r13, r1
    {
        int i;
        int args = 0;
        for(i=ind;i<argc;++i)
   10834:	c6 01       	movw	r24, r12
   10836:	86 0d       	add	r24, r6
   10838:	97 1d       	adc	r25, r7
   1083a:	80 17       	cp	r24, r16
   1083c:	91 07       	cpc	r25, r17
   1083e:	b4 f4       	brge	.+44     	; 0x1086c <posix_tests+0x1a8>
        {
            if(!MATCH(argv[i],"-l"))
   10840:	61 ef       	ldi	r22, 0xF1	; 241
   10842:	7a e0       	ldi	r23, 0x0A	; 10
   10844:	f7 01       	movw	r30, r14
   10846:	80 81       	ld	r24, Z
   10848:	91 81       	ldd	r25, Z+1	; 0x01
   1084a:	0e 94 dd 33 	call	0x67ba	; 0x67ba <MATCH>
   1084e:	89 2b       	or	r24, r25
   10850:	31 f4       	brne	.+12     	; 0x1085e <posix_tests+0x19a>
                ls(argv[i],1);
   10852:	61 e0       	ldi	r22, 0x01	; 1
   10854:	70 e0       	ldi	r23, 0x00	; 0
   10856:	f7 01       	movw	r30, r14
   10858:	80 81       	ld	r24, Z
   1085a:	91 81       	ldd	r25, Z+1	; 0x01
   1085c:	1f de       	rcall	.-962    	; 0x1049c <ls>
            ++args;
   1085e:	ff ef       	ldi	r31, 0xFF	; 255
   10860:	cf 1a       	sub	r12, r31
   10862:	df 0a       	sbc	r13, r31
   10864:	82 e0       	ldi	r24, 0x02	; 2
   10866:	e8 0e       	add	r14, r24
   10868:	f1 1c       	adc	r15, r1
   1086a:	e4 cf       	rjmp	.-56     	; 0x10834 <posix_tests+0x170>
        }
        if(!args)
   1086c:	c1 14       	cp	r12, r1
   1086e:	d1 04       	cpc	r13, r1
   10870:	09 f0       	breq	.+2      	; 0x10874 <posix_tests+0x1b0>
        {
            ls("",1);
   10872:	70 c0       	rjmp	.+224    	; 0x10954 <posix_tests+0x290>
   10874:	61 e0       	ldi	r22, 0x01	; 1
   10876:	70 e0       	ldi	r23, 0x00	; 0
   10878:	8f ed       	ldi	r24, 0xDF	; 223
   1087a:	96 e1       	ldi	r25, 0x16	; 22
   1087c:	0f de       	rcall	.-994    	; 0x1049c <ls>
        mkfs(argv[ind++]);
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
   1087e:	6a c0       	rjmp	.+212    	; 0x10954 <posix_tests+0x290>
   10880:	98 01       	movw	r18, r16
   10882:	a7 01       	movw	r20, r14
   10884:	64 ef       	ldi	r22, 0xF4	; 244
   10886:	7a e0       	ldi	r23, 0x0A	; 10
   10888:	c6 01       	movw	r24, r12
   1088a:	0e 94 05 34 	call	0x680a	; 0x680a <MATCHARGS>
   1088e:	89 2b       	or	r24, r25
    {
        int mode = 0777;
        if((ind+2) <= argc)
   10890:	71 f1       	breq	.+92     	; 0x108ee <posix_tests+0x22a>
   10892:	e0 16       	cp	r14, r16
   10894:	f1 06       	cpc	r15, r17
        {
            mode = strtol(argv[ind+1],NULL,8);
   10896:	7c f4       	brge	.+30     	; 0x108b6 <posix_tests+0x1f2>
   10898:	ee 0c       	add	r14, r14
   1089a:	ff 1c       	adc	r15, r15
   1089c:	f2 01       	movw	r30, r4
   1089e:	ee 0d       	add	r30, r14
   108a0:	ff 1d       	adc	r31, r15
   108a2:	48 e0       	ldi	r20, 0x08	; 8
   108a4:	50 e0       	ldi	r21, 0x00	; 0
   108a6:	60 e0       	ldi	r22, 0x00	; 0
   108a8:	70 e0       	ldi	r23, 0x00	; 0
   108aa:	80 81       	ld	r24, Z
   108ac:	91 81       	ldd	r25, Z+1	; 0x01
   108ae:	0e 94 28 48 	call	0x9050	; 0x9050 <strtol>
   108b2:	ab 01       	movw	r20, r22
    }
#endif

    if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
    {
        int mode = 0777;
   108b4:	02 c0       	rjmp	.+4      	; 0x108ba <posix_tests+0x1f6>
   108b6:	4f ef       	ldi	r20, 0xFF	; 255
        if((ind+2) <= argc)
        {
            mode = strtol(argv[ind+1],NULL,8);
        }
        if ( mkdir(argv[ind],mode) != 0 )
   108b8:	51 e0       	ldi	r21, 0x01	; 1
   108ba:	73 01       	movw	r14, r6
   108bc:	ee 0c       	add	r14, r14
   108be:	ff 1c       	adc	r15, r15
   108c0:	e4 0c       	add	r14, r4
   108c2:	f5 1c       	adc	r15, r5
   108c4:	05 2e       	mov	r0, r21
   108c6:	00 0c       	add	r0, r0
   108c8:	66 0b       	sbc	r22, r22
   108ca:	77 0b       	sbc	r23, r23
   108cc:	f7 01       	movw	r30, r14
   108ce:	80 81       	ld	r24, Z
   108d0:	91 81       	ldd	r25, Z+1	; 0x01
   108d2:	0e 94 10 79 	call	0xf220	; 0xf220 <mkdir>
   108d6:	89 2b       	or	r24, r25
		{
			printf("mkdir %s failed\n", argv[ind]);
   108d8:	e9 f1       	breq	.+122    	; 0x10954 <posix_tests+0x290>
   108da:	f7 01       	movw	r30, r14
   108dc:	80 81       	ld	r24, Z
   108de:	91 81       	ldd	r25, Z+1	; 0x01
   108e0:	ed b7       	in	r30, 0x3d	; 61
   108e2:	fe b7       	in	r31, 0x3e	; 62
   108e4:	95 83       	std	Z+5, r25	; 0x05
   108e6:	84 83       	std	Z+4, r24	; 0x04
   108e8:	82 ef       	ldi	r24, 0xF2	; 242
   108ea:	9c e0       	ldi	r25, 0x0C	; 12
			return(0);
		}
        return(1);
    }

    if (MATCHARGS(ptr,"page", (ind + 1), argc))
   108ec:	b4 c0       	rjmp	.+360    	; 0x10a56 <posix_tests+0x392>
   108ee:	98 01       	movw	r18, r16
   108f0:	a7 01       	movw	r20, r14
   108f2:	6a ef       	ldi	r22, 0xFA	; 250
   108f4:	7a e0       	ldi	r23, 0x0A	; 10
   108f6:	c6 01       	movw	r24, r12
   108f8:	0e 94 05 34 	call	0x680a	; 0x680a <MATCHARGS>
   108fc:	89 2b       	or	r24, r25
    {
        setpage(atoi(argv[ind]));
   108fe:	71 f0       	breq	.+28     	; 0x1091c <posix_tests+0x258>
   10900:	66 0c       	add	r6, r6
   10902:	77 1c       	adc	r7, r7
   10904:	f2 01       	movw	r30, r4
   10906:	e6 0d       	add	r30, r6
   10908:	f7 1d       	adc	r31, r7
   1090a:	80 81       	ld	r24, Z
   1090c:	91 81       	ldd	r25, Z+1	; 0x01
   1090e:	0e 94 86 48 	call	0x910c	; 0x910c <atoi>
/// @retrun void
static int _pagesize = 25;
MEMSPACE
int setpage(int count)
{
    _pagesize = count;
   10912:	90 93 8e 01 	sts	0x018E, r25	; 0x80018e <_pagesize+0x1>
   10916:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <_pagesize>
    {
        setpage(atoi(argv[ind]));
        return(1);
    }

    if (MATCHARGS(ptr,"pwd", (ind + 0), argc))
   1091a:	1c c0       	rjmp	.+56     	; 0x10954 <posix_tests+0x290>
   1091c:	98 01       	movw	r18, r16
   1091e:	a3 01       	movw	r20, r6
   10920:	6f ef       	ldi	r22, 0xFF	; 255
   10922:	7a e0       	ldi	r23, 0x0A	; 10
   10924:	c6 01       	movw	r24, r12
   10926:	0e 94 05 34 	call	0x680a	; 0x680a <MATCHARGS>
   1092a:	4c 01       	movw	r8, r24
   1092c:	89 2b       	or	r24, r25
    {
        char path[256];
        printf("%s\n", getcwd(path, sizeof(path)-2));
   1092e:	b1 f0       	breq	.+44     	; 0x1095c <posix_tests+0x298>
   10930:	6e ef       	ldi	r22, 0xFE	; 254
   10932:	70 e0       	ldi	r23, 0x00	; 0
   10934:	ce 01       	movw	r24, r28
   10936:	08 96       	adiw	r24, 0x08	; 8
   10938:	0e 94 eb 78 	call	0xf1d6	; 0xf1d6 <getcwd>
   1093c:	ed b7       	in	r30, 0x3d	; 61
   1093e:	fe b7       	in	r31, 0x3e	; 62
   10940:	95 83       	std	Z+5, r25	; 0x05
   10942:	84 83       	std	Z+4, r24	; 0x04
   10944:	8e ee       	ldi	r24, 0xEE	; 238
   10946:	9c e0       	ldi	r25, 0x0C	; 12
   10948:	a0 e0       	ldi	r26, 0x00	; 0
   1094a:	81 83       	std	Z+1, r24	; 0x01
   1094c:	92 83       	std	Z+2, r25	; 0x02
   1094e:	a3 83       	std	Z+3, r26	; 0x03
   10950:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
        return(1);
   10954:	88 24       	eor	r8, r8
   10956:	83 94       	inc	r8
   10958:	91 2c       	mov	r9, r1
    }

    if (MATCHARGS(ptr,"rename", (ind + 2), argc))
   1095a:	83 c0       	rjmp	.+262    	; 0x10a62 <posix_tests+0x39e>
   1095c:	98 01       	movw	r18, r16
   1095e:	a5 01       	movw	r20, r10
   10960:	63 e0       	ldi	r22, 0x03	; 3
   10962:	7b e0       	ldi	r23, 0x0B	; 11
   10964:	c6 01       	movw	r24, r12
   10966:	0e 94 05 34 	call	0x680a	; 0x680a <MATCHARGS>
   1096a:	89 2b       	or	r24, r25
    {
        if( rename(argv[ind],argv[ind+1]) != 0)
   1096c:	61 f1       	breq	.+88     	; 0x109c6 <posix_tests+0x302>
   1096e:	66 0c       	add	r6, r6
   10970:	77 1c       	adc	r7, r7
   10972:	82 01       	movw	r16, r4
   10974:	06 0d       	add	r16, r6
   10976:	17 1d       	adc	r17, r7
   10978:	f2 e0       	ldi	r31, 0x02	; 2
   1097a:	6f 0e       	add	r6, r31
   1097c:	71 1c       	adc	r7, r1
   1097e:	72 01       	movw	r14, r4
   10980:	e6 0c       	add	r14, r6
   10982:	f7 1c       	adc	r15, r7
   10984:	f7 01       	movw	r30, r14
   10986:	60 81       	ld	r22, Z
   10988:	71 81       	ldd	r23, Z+1	; 0x01
   1098a:	f8 01       	movw	r30, r16
   1098c:	80 81       	ld	r24, Z
   1098e:	91 81       	ldd	r25, Z+1	; 0x01
   10990:	0e 94 3e 79 	call	0xf27c	; 0xf27c <rename>
   10994:	89 2b       	or	r24, r25
		{
			printf("rename %s to %s\n", argv[ind], argv[ind+1]);
   10996:	f1 f2       	breq	.-68     	; 0x10954 <posix_tests+0x290>
   10998:	f7 01       	movw	r30, r14
   1099a:	80 81       	ld	r24, Z
   1099c:	91 81       	ldd	r25, Z+1	; 0x01
   1099e:	ed b7       	in	r30, 0x3d	; 61
   109a0:	fe b7       	in	r31, 0x3e	; 62
   109a2:	97 83       	std	Z+7, r25	; 0x07
   109a4:	86 83       	std	Z+6, r24	; 0x06
   109a6:	f8 01       	movw	r30, r16
   109a8:	80 81       	ld	r24, Z
   109aa:	91 81       	ldd	r25, Z+1	; 0x01
   109ac:	ed b7       	in	r30, 0x3d	; 61
   109ae:	fe b7       	in	r31, 0x3e	; 62
   109b0:	95 83       	std	Z+5, r25	; 0x05
   109b2:	84 83       	std	Z+4, r24	; 0x04
   109b4:	8d ed       	ldi	r24, 0xDD	; 221
   109b6:	9c e0       	ldi	r25, 0x0C	; 12
   109b8:	a0 e0       	ldi	r26, 0x00	; 0
   109ba:	81 83       	std	Z+1, r24	; 0x01
   109bc:	92 83       	std	Z+2, r25	; 0x02
   109be:	a3 83       	std	Z+3, r26	; 0x03
   109c0:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
			return(0);
		}
        return(1);
    }

    if (MATCHARGS(ptr,"rm", (ind + 1), argc))
   109c4:	4e c0       	rjmp	.+156    	; 0x10a62 <posix_tests+0x39e>
   109c6:	98 01       	movw	r18, r16
   109c8:	a7 01       	movw	r20, r14
   109ca:	6a e0       	ldi	r22, 0x0A	; 10
   109cc:	7b e0       	ldi	r23, 0x0B	; 11
   109ce:	c6 01       	movw	r24, r12
   109d0:	0e 94 05 34 	call	0x680a	; 0x680a <MATCHARGS>
   109d4:	4c 01       	movw	r8, r24
   109d6:	89 2b       	or	r24, r25
    {
        if ( unlink(argv[ind]) != 0)
   109d8:	f9 f0       	breq	.+62     	; 0x10a18 <posix_tests+0x354>
   109da:	73 01       	movw	r14, r6
   109dc:	ee 0c       	add	r14, r14
   109de:	ff 1c       	adc	r15, r15
   109e0:	e4 0c       	add	r14, r4
   109e2:	f5 1c       	adc	r15, r5
   109e4:	f7 01       	movw	r30, r14
   109e6:	80 81       	ld	r24, Z
   109e8:	91 81       	ldd	r25, Z+1	; 0x01
   109ea:	0e 94 5d 79 	call	0xf2ba	; 0xf2ba <unlink>
   109ee:	89 2b       	or	r24, r25
   109f0:	09 f4       	brne	.+2      	; 0x109f4 <posix_tests+0x330>
		{
			printf("rm %s failed\n", argv[ind]);
   109f2:	b0 cf       	rjmp	.-160    	; 0x10954 <posix_tests+0x290>
   109f4:	f7 01       	movw	r30, r14
   109f6:	80 81       	ld	r24, Z
   109f8:	91 81       	ldd	r25, Z+1	; 0x01
   109fa:	ed b7       	in	r30, 0x3d	; 61
   109fc:	fe b7       	in	r31, 0x3e	; 62
   109fe:	95 83       	std	Z+5, r25	; 0x05
   10a00:	84 83       	std	Z+4, r24	; 0x04
   10a02:	8f ec       	ldi	r24, 0xCF	; 207
   10a04:	9c e0       	ldi	r25, 0x0C	; 12
   10a06:	a0 e0       	ldi	r26, 0x00	; 0
   10a08:	81 83       	std	Z+1, r24	; 0x01
   10a0a:	92 83       	std	Z+2, r25	; 0x02
   10a0c:	a3 83       	std	Z+3, r26	; 0x03
   10a0e:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
			return(0);
   10a12:	81 2c       	mov	r8, r1
   10a14:	91 2c       	mov	r9, r1
        dump_stat(&p);
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"rmdir", (ind + 1), argc))
   10a16:	25 c0       	rjmp	.+74     	; 0x10a62 <posix_tests+0x39e>
   10a18:	98 01       	movw	r18, r16
   10a1a:	a7 01       	movw	r20, r14
   10a1c:	6d e0       	ldi	r22, 0x0D	; 13
   10a1e:	7b e0       	ldi	r23, 0x0B	; 11
   10a20:	c6 01       	movw	r24, r12
   10a22:	0e 94 05 34 	call	0x680a	; 0x680a <MATCHARGS>
   10a26:	89 2b       	or	r24, r25
    {
        if ( rmdir(argv[ind]) != 0)
   10a28:	a1 f3       	breq	.-24     	; 0x10a12 <posix_tests+0x34e>
   10a2a:	73 01       	movw	r14, r6
   10a2c:	ee 0c       	add	r14, r14
   10a2e:	ff 1c       	adc	r15, r15
   10a30:	e4 0c       	add	r14, r4
   10a32:	f5 1c       	adc	r15, r5
   10a34:	f7 01       	movw	r30, r14
   10a36:	80 81       	ld	r24, Z
   10a38:	91 81       	ldd	r25, Z+1	; 0x01
   10a3a:	0e 94 7c 79 	call	0xf2f8	; 0xf2f8 <rmdir>
   10a3e:	89 2b       	or	r24, r25
   10a40:	09 f4       	brne	.+2      	; 0x10a44 <posix_tests+0x380>
		{
			printf("rmdir %s failed\n", argv[ind]);
   10a42:	88 cf       	rjmp	.-240    	; 0x10954 <posix_tests+0x290>
   10a44:	f7 01       	movw	r30, r14
   10a46:	80 81       	ld	r24, Z
   10a48:	91 81       	ldd	r25, Z+1	; 0x01
   10a4a:	ed b7       	in	r30, 0x3d	; 61
   10a4c:	fe b7       	in	r31, 0x3e	; 62
   10a4e:	95 83       	std	Z+5, r25	; 0x05
   10a50:	84 83       	std	Z+4, r24	; 0x04
   10a52:	8e eb       	ldi	r24, 0xBE	; 190
   10a54:	9c e0       	ldi	r25, 0x0C	; 12
   10a56:	a0 e0       	ldi	r26, 0x00	; 0
   10a58:	81 83       	std	Z+1, r24	; 0x01
   10a5a:	92 83       	std	Z+2, r25	; 0x02
   10a5c:	a3 83       	std	Z+3, r26	; 0x03
   10a5e:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
        return(1);
    }
#endif

    return(0);
}
   10a62:	c4 01       	movw	r24, r8
   10a64:	c9 5f       	subi	r28, 0xF9	; 249
   10a66:	de 4f       	sbci	r29, 0xFE	; 254
   10a68:	e0 e1       	ldi	r30, 0x10	; 16
   10a6a:	0c 94 37 e5 	jmp	0x1ca6e	; 0x1ca6e <__epilogue_restores__+0x4>

00010a6e <gpib_timer_init>:
///
/// - Has some platform dependent code.
/// @return  void

void gpib_timer_init()
{
   10a6e:	00 d0       	rcall	.+0      	; 0x10a70 <gpib_timer_init+0x2>
   10a70:	1f 92       	push	r1
    if(set_timers(gpib_timer_task,1) == -1)       // Install Clock Task
   10a72:	61 e0       	ldi	r22, 0x01	; 1
   10a74:	70 e0       	ldi	r23, 0x00	; 0
   10a76:	83 ef       	ldi	r24, 0xF3	; 243
   10a78:	96 e8       	ldi	r25, 0x86	; 134
   10a7a:	0e 94 52 36 	call	0x6ca4	; 0x6ca4 <set_timers>
   10a7e:	01 96       	adiw	r24, 0x01	; 1
   10a80:	51 f4       	brne	.+20     	; 0x10a96 <gpib_timer_init+0x28>
        printf("GPIB Clock task init failed\n");
   10a82:	8a e3       	ldi	r24, 0x3A	; 58
   10a84:	9e e0       	ldi	r25, 0x0E	; 14
   10a86:	a0 e0       	ldi	r26, 0x00	; 0
   10a88:	ed b7       	in	r30, 0x3d	; 61
   10a8a:	fe b7       	in	r31, 0x3e	; 62
   10a8c:	81 83       	std	Z+1, r24	; 0x01
   10a8e:	92 83       	std	Z+2, r25	; 0x02
   10a90:	a3 83       	std	Z+3, r26	; 0x03
   10a92:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>

    gpib_timer_reset();
}
   10a96:	95 d1       	rcall	.+810    	; 0x10dc2 <gpib_timer_reset>
   10a98:	0f 90       	pop	r0
   10a9a:	0f 90       	pop	r0
   10a9c:	0f 90       	pop	r0
   10a9e:	08 95       	ret

00010aa0 <reverse_8bits>:
/// - GPIB D1 controls last device.
///
/// @param [in] mask: bit mask to reverse.
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
   10aa0:	28 2f       	mov	r18, r24
   10aa2:	98 e0       	ldi	r25, 0x08	; 8
    int8_t i;
    uint8_t rmask = 0;
   10aa4:	80 e0       	ldi	r24, 0x00	; 0
    for(i=0;i<8;++i)
    {
        rmask <<= 1;
   10aa6:	88 0f       	add	r24, r24
        if(mask & 1)
   10aa8:	20 fd       	sbrc	r18, 0
            rmask |= 1;
   10aaa:	81 60       	ori	r24, 0x01	; 1
        mask >>= 1;
   10aac:	26 95       	lsr	r18
   10aae:	91 50       	subi	r25, 0x01	; 1
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
    int8_t i;
    uint8_t rmask = 0;
    for(i=0;i<8;++i)
   10ab0:	d1 f7       	brne	.-12     	; 0x10aa6 <reverse_8bits+0x6>
        if(mask & 1)
            rmask |= 1;
        mask >>= 1;
    }
    return(rmask & 0xff);
}
   10ab2:	08 95       	ret

00010ab4 <ppr_set>:
   10ab4:	f5 df       	rcall	.-22     	; 0x10aa0 <reverse_8bits>
   10ab6:	80 93 fb 18 	sts	0x18FB, r24	; 0x8018fb <_ppr_reg>
   10aba:	0e 94 54 2d 	call	0x5aa8	; 0x5aa8 <SPI0_TXRX_Byte>
   10abe:	2a 9a       	sbi	0x05, 2	; 5
   10ac0:	22 9a       	sbi	0x04, 2	; 4
   10ac2:	2a 98       	cbi	0x05, 2	; 5
   10ac4:	22 9a       	sbi	0x04, 2	; 4
   10ac6:	08 95       	ret

00010ac8 <ppr_reg>:
   10ac8:	80 91 fb 18 	lds	r24, 0x18FB	; 0x8018fb <_ppr_reg>
   10acc:	e9 cf       	rjmp	.-46     	; 0x10aa0 <reverse_8bits>
   10ace:	08 95       	ret

00010ad0 <ppr_init>:
   10ad0:	00 d0       	rcall	.+0      	; 0x10ad2 <ppr_init+0x2>
   10ad2:	1f 92       	push	r1
   10ad4:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   10ad8:	81 ff       	sbrs	r24, 1
   10ada:	0a c0       	rjmp	.+20     	; 0x10af0 <ppr_init+0x20>
   10adc:	87 e2       	ldi	r24, 0x27	; 39
   10ade:	9e e0       	ldi	r25, 0x0E	; 14
   10ae0:	a0 e0       	ldi	r26, 0x00	; 0
   10ae2:	ed b7       	in	r30, 0x3d	; 61
   10ae4:	fe b7       	in	r31, 0x3e	; 62
   10ae6:	81 83       	std	Z+1, r24	; 0x01
   10ae8:	92 83       	std	Z+2, r25	; 0x02
   10aea:	a3 83       	std	Z+3, r26	; 0x03
   10aec:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   10af0:	80 e0       	ldi	r24, 0x00	; 0
   10af2:	e0 df       	rcall	.-64     	; 0x10ab4 <ppr_set>
   10af4:	0f 90       	pop	r0
   10af6:	0f 90       	pop	r0
   10af8:	0f 90       	pop	r0
   10afa:	08 95       	ret

00010afc <ppr_bit_set>:
   10afc:	21 e0       	ldi	r18, 0x01	; 1
   10afe:	30 e0       	ldi	r19, 0x00	; 0
   10b00:	01 c0       	rjmp	.+2      	; 0x10b04 <ppr_bit_set+0x8>
   10b02:	22 0f       	add	r18, r18
   10b04:	8a 95       	dec	r24
   10b06:	ea f7       	brpl	.-6      	; 0x10b02 <ppr_bit_set+0x6>
   10b08:	80 91 fb 18 	lds	r24, 0x18FB	; 0x8018fb <_ppr_reg>
   10b0c:	82 2b       	or	r24, r18
   10b0e:	80 93 fb 18 	sts	0x18FB, r24	; 0x8018fb <_ppr_reg>
   10b12:	d0 cf       	rjmp	.-96     	; 0x10ab4 <ppr_set>
   10b14:	08 95       	ret

00010b16 <ppr_bit_clr>:
   10b16:	21 e0       	ldi	r18, 0x01	; 1
   10b18:	30 e0       	ldi	r19, 0x00	; 0
   10b1a:	01 c0       	rjmp	.+2      	; 0x10b1e <ppr_bit_clr+0x8>
   10b1c:	22 0f       	add	r18, r18
   10b1e:	8a 95       	dec	r24
   10b20:	ea f7       	brpl	.-6      	; 0x10b1c <ppr_bit_clr+0x6>
   10b22:	20 95       	com	r18
   10b24:	80 91 fb 18 	lds	r24, 0x18FB	; 0x8018fb <_ppr_reg>
   10b28:	82 23       	and	r24, r18
   10b2a:	80 93 fb 18 	sts	0x18FB, r24	; 0x8018fb <_ppr_reg>
   10b2e:	c2 cf       	rjmp	.-124    	; 0x10ab4 <ppr_set>
   10b30:	08 95       	ret

00010b32 <dbf_open>:
   10b32:	0f 93       	push	r16
   10b34:	1f 93       	push	r17
   10b36:	cf 93       	push	r28
   10b38:	df 93       	push	r29
   10b3a:	00 d0       	rcall	.+0      	; 0x10b3c <dbf_open+0xa>
   10b3c:	00 d0       	rcall	.+0      	; 0x10b3e <dbf_open+0xc>
   10b3e:	1f 92       	push	r1
   10b40:	8b 01       	movw	r16, r22
   10b42:	0e 94 a5 5b 	call	0xb74a	; 0xb74a <f_open>
   10b46:	ec 01       	movw	r28, r24
   10b48:	89 2b       	or	r24, r25
   10b4a:	79 f0       	breq	.+30     	; 0x10b6a <dbf_open+0x38>
   10b4c:	ed b7       	in	r30, 0x3d	; 61
   10b4e:	fe b7       	in	r31, 0x3e	; 62
   10b50:	15 83       	std	Z+5, r17	; 0x05
   10b52:	04 83       	std	Z+4, r16	; 0x04
   10b54:	86 e1       	ldi	r24, 0x16	; 22
   10b56:	9e e0       	ldi	r25, 0x0E	; 14
   10b58:	a0 e0       	ldi	r26, 0x00	; 0
   10b5a:	81 83       	std	Z+1, r24	; 0x01
   10b5c:	92 83       	std	Z+2, r25	; 0x02
   10b5e:	a3 83       	std	Z+3, r26	; 0x03
   10b60:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   10b64:	ce 01       	movw	r24, r28
   10b66:	0e 94 12 72 	call	0xe424	; 0xe424 <put_rc>
   10b6a:	ce 01       	movw	r24, r28
   10b6c:	cd b7       	in	r28, 0x3d	; 61
   10b6e:	de b7       	in	r29, 0x3e	; 62
   10b70:	25 96       	adiw	r28, 0x05	; 5
   10b72:	e4 e0       	ldi	r30, 0x04	; 4
   10b74:	0c 94 43 e5 	jmp	0x1ca86	; 0x1ca86 <__epilogue_restores__+0x1c>

00010b78 <dbf_read>:
   10b78:	cf 93       	push	r28
   10b7a:	df 93       	push	r29
   10b7c:	00 d0       	rcall	.+0      	; 0x10b7e <dbf_read+0x6>
   10b7e:	1f 92       	push	r1
   10b80:	0e 94 5d 5d 	call	0xbaba	; 0xbaba <f_read>
   10b84:	ec 01       	movw	r28, r24
   10b86:	89 2b       	or	r24, r25
   10b88:	69 f0       	breq	.+26     	; 0x10ba4 <dbf_read+0x2c>
   10b8a:	89 e0       	ldi	r24, 0x09	; 9
   10b8c:	9e e0       	ldi	r25, 0x0E	; 14
   10b8e:	a0 e0       	ldi	r26, 0x00	; 0
   10b90:	ed b7       	in	r30, 0x3d	; 61
   10b92:	fe b7       	in	r31, 0x3e	; 62
   10b94:	81 83       	std	Z+1, r24	; 0x01
   10b96:	92 83       	std	Z+2, r25	; 0x02
   10b98:	a3 83       	std	Z+3, r26	; 0x03
   10b9a:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   10b9e:	ce 01       	movw	r24, r28
   10ba0:	0e 94 12 72 	call	0xe424	; 0xe424 <put_rc>
   10ba4:	ce 01       	movw	r24, r28
   10ba6:	cd b7       	in	r28, 0x3d	; 61
   10ba8:	de b7       	in	r29, 0x3e	; 62
   10baa:	23 96       	adiw	r28, 0x03	; 3
   10bac:	e2 e0       	ldi	r30, 0x02	; 2
   10bae:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__epilogue_restores__+0x20>

00010bb2 <dbf_write>:
   10bb2:	cf 93       	push	r28
   10bb4:	df 93       	push	r29
   10bb6:	00 d0       	rcall	.+0      	; 0x10bb8 <dbf_write+0x6>
   10bb8:	1f 92       	push	r1
   10bba:	0e 94 a8 5e 	call	0xbd50	; 0xbd50 <f_write>
   10bbe:	ec 01       	movw	r28, r24
   10bc0:	89 2b       	or	r24, r25
   10bc2:	69 f0       	breq	.+26     	; 0x10bde <dbf_write+0x2c>
   10bc4:	8b ef       	ldi	r24, 0xFB	; 251
   10bc6:	9d e0       	ldi	r25, 0x0D	; 13
   10bc8:	a0 e0       	ldi	r26, 0x00	; 0
   10bca:	ed b7       	in	r30, 0x3d	; 61
   10bcc:	fe b7       	in	r31, 0x3e	; 62
   10bce:	81 83       	std	Z+1, r24	; 0x01
   10bd0:	92 83       	std	Z+2, r25	; 0x02
   10bd2:	a3 83       	std	Z+3, r26	; 0x03
   10bd4:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   10bd8:	ce 01       	movw	r24, r28
   10bda:	0e 94 12 72 	call	0xe424	; 0xe424 <put_rc>
   10bde:	ce 01       	movw	r24, r28
   10be0:	cd b7       	in	r28, 0x3d	; 61
   10be2:	de b7       	in	r29, 0x3e	; 62
   10be4:	23 96       	adiw	r28, 0x03	; 3
   10be6:	e2 e0       	ldi	r30, 0x02	; 2
   10be8:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__epilogue_restores__+0x20>

00010bec <dbf_lseek>:
   10bec:	cf 93       	push	r28
   10bee:	df 93       	push	r29
   10bf0:	00 d0       	rcall	.+0      	; 0x10bf2 <dbf_lseek+0x6>
   10bf2:	1f 92       	push	r1
   10bf4:	0e 94 69 62 	call	0xc4d2	; 0xc4d2 <f_lseek>
   10bf8:	ec 01       	movw	r28, r24
   10bfa:	89 2b       	or	r24, r25
   10bfc:	69 f0       	breq	.+26     	; 0x10c18 <dbf_lseek+0x2c>
   10bfe:	8e ee       	ldi	r24, 0xEE	; 238
   10c00:	9d e0       	ldi	r25, 0x0D	; 13
   10c02:	a0 e0       	ldi	r26, 0x00	; 0
   10c04:	ed b7       	in	r30, 0x3d	; 61
   10c06:	fe b7       	in	r31, 0x3e	; 62
   10c08:	81 83       	std	Z+1, r24	; 0x01
   10c0a:	92 83       	std	Z+2, r25	; 0x02
   10c0c:	a3 83       	std	Z+3, r26	; 0x03
   10c0e:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   10c12:	ce 01       	movw	r24, r28
   10c14:	0e 94 12 72 	call	0xe424	; 0xe424 <put_rc>
   10c18:	ce 01       	movw	r24, r28
   10c1a:	cd b7       	in	r28, 0x3d	; 61
   10c1c:	de b7       	in	r29, 0x3e	; 62
   10c1e:	23 96       	adiw	r28, 0x03	; 3
   10c20:	e2 e0       	ldi	r30, 0x02	; 2
   10c22:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__epilogue_restores__+0x20>

00010c26 <dbf_close>:
   10c26:	cf 93       	push	r28
   10c28:	df 93       	push	r29
   10c2a:	00 d0       	rcall	.+0      	; 0x10c2c <dbf_close+0x6>
   10c2c:	1f 92       	push	r1
   10c2e:	0e 94 bf 60 	call	0xc17e	; 0xc17e <f_close>
   10c32:	ec 01       	movw	r28, r24
   10c34:	89 2b       	or	r24, r25
   10c36:	69 f0       	breq	.+26     	; 0x10c52 <dbf_close+0x2c>
   10c38:	80 ee       	ldi	r24, 0xE0	; 224
   10c3a:	9d e0       	ldi	r25, 0x0D	; 13
   10c3c:	a0 e0       	ldi	r26, 0x00	; 0
   10c3e:	ed b7       	in	r30, 0x3d	; 61
   10c40:	fe b7       	in	r31, 0x3e	; 62
   10c42:	81 83       	std	Z+1, r24	; 0x01
   10c44:	92 83       	std	Z+2, r25	; 0x02
   10c46:	a3 83       	std	Z+3, r26	; 0x03
   10c48:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   10c4c:	ce 01       	movw	r24, r28
   10c4e:	0e 94 12 72 	call	0xe424	; 0xe424 <put_rc>
   10c52:	ce 01       	movw	r24, r28
   10c54:	cd b7       	in	r28, 0x3d	; 61
   10c56:	de b7       	in	r29, 0x3e	; 62
   10c58:	23 96       	adiw	r28, 0x03	; 3
   10c5a:	e2 e0       	ldi	r30, 0x02	; 2
   10c5c:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__epilogue_restores__+0x20>

00010c60 <dbf_open_read>:
   10c60:	a6 e2       	ldi	r26, 0x26	; 38
   10c62:	b2 e0       	ldi	r27, 0x02	; 2
   10c64:	e6 e3       	ldi	r30, 0x36	; 54
   10c66:	f6 e8       	ldi	r31, 0x86	; 134
   10c68:	0c 94 1f e5 	jmp	0x1ca3e	; 0x1ca3e <__prologue_saves__+0xc>
   10c6c:	4a 01       	movw	r8, r20
   10c6e:	5b 01       	movw	r10, r22
   10c70:	69 01       	movw	r12, r18
   10c72:	cb 5d       	subi	r28, 0xDB	; 219
   10c74:	dd 4f       	sbci	r29, 0xFD	; 253
   10c76:	19 82       	std	Y+1, r1	; 0x01
   10c78:	18 82       	st	Y, r1
   10c7a:	c5 52       	subi	r28, 0x25	; 37
   10c7c:	d2 40       	sbci	r29, 0x02	; 2
   10c7e:	43 e0       	ldi	r20, 0x03	; 3
   10c80:	bc 01       	movw	r22, r24
   10c82:	ce 01       	movw	r24, r28
   10c84:	01 96       	adiw	r24, 0x01	; 1
   10c86:	55 df       	rcall	.-342    	; 0x10b32 <dbf_open>
   10c88:	89 2b       	or	r24, r25
   10c8a:	19 f0       	breq	.+6      	; 0x10c92 <dbf_open_read+0x32>
   10c8c:	81 e1       	ldi	r24, 0x11	; 17
   10c8e:	90 e0       	ldi	r25, 0x00	; 0
   10c90:	2f c0       	rjmp	.+94     	; 0x10cf0 <dbf_open_read+0x90>
   10c92:	b5 01       	movw	r22, r10
   10c94:	a4 01       	movw	r20, r8
   10c96:	ce 01       	movw	r24, r28
   10c98:	01 96       	adiw	r24, 0x01	; 1
   10c9a:	a8 df       	rcall	.-176    	; 0x10bec <dbf_lseek>
   10c9c:	89 2b       	or	r24, r25
   10c9e:	59 f0       	breq	.+22     	; 0x10cb6 <dbf_open_read+0x56>
   10ca0:	85 e0       	ldi	r24, 0x05	; 5
   10ca2:	90 e0       	ldi	r25, 0x00	; 0
   10ca4:	f7 01       	movw	r30, r14
   10ca6:	91 83       	std	Z+1, r25	; 0x01
   10ca8:	80 83       	st	Z, r24
   10caa:	ce 01       	movw	r24, r28
   10cac:	01 96       	adiw	r24, 0x01	; 1
   10cae:	bb df       	rcall	.-138    	; 0x10c26 <dbf_close>
   10cb0:	8f ef       	ldi	r24, 0xFF	; 255
   10cb2:	9f ef       	ldi	r25, 0xFF	; 255
   10cb4:	27 c0       	rjmp	.+78     	; 0x10d04 <dbf_open_read+0xa4>
   10cb6:	9e 01       	movw	r18, r28
   10cb8:	2b 5d       	subi	r18, 0xDB	; 219
   10cba:	3d 4f       	sbci	r19, 0xFD	; 253
   10cbc:	a8 01       	movw	r20, r16
   10cbe:	b6 01       	movw	r22, r12
   10cc0:	ce 01       	movw	r24, r28
   10cc2:	01 96       	adiw	r24, 0x01	; 1
   10cc4:	59 df       	rcall	.-334    	; 0x10b78 <dbf_read>
   10cc6:	89 2b       	or	r24, r25
   10cc8:	49 f4       	brne	.+18     	; 0x10cdc <dbf_open_read+0x7c>
   10cca:	cb 5d       	subi	r28, 0xDB	; 219
   10ccc:	dd 4f       	sbci	r29, 0xFD	; 253
   10cce:	88 81       	ld	r24, Y
   10cd0:	99 81       	ldd	r25, Y+1	; 0x01
   10cd2:	c5 52       	subi	r28, 0x25	; 37
   10cd4:	d2 40       	sbci	r29, 0x02	; 2
   10cd6:	08 17       	cp	r16, r24
   10cd8:	19 07       	cpc	r17, r25
   10cda:	19 f0       	breq	.+6      	; 0x10ce2 <dbf_open_read+0x82>
   10cdc:	81 e0       	ldi	r24, 0x01	; 1
   10cde:	90 e0       	ldi	r25, 0x00	; 0
   10ce0:	e1 cf       	rjmp	.-62     	; 0x10ca4 <dbf_open_read+0x44>
   10ce2:	ce 01       	movw	r24, r28
   10ce4:	01 96       	adiw	r24, 0x01	; 1
   10ce6:	9f df       	rcall	.-194    	; 0x10c26 <dbf_close>
   10ce8:	89 2b       	or	r24, r25
   10cea:	31 f0       	breq	.+12     	; 0x10cf8 <dbf_open_read+0x98>
   10cec:	80 e1       	ldi	r24, 0x10	; 16
   10cee:	90 e0       	ldi	r25, 0x00	; 0
   10cf0:	f7 01       	movw	r30, r14
   10cf2:	91 83       	std	Z+1, r25	; 0x01
   10cf4:	80 83       	st	Z, r24
   10cf6:	dc cf       	rjmp	.-72     	; 0x10cb0 <dbf_open_read+0x50>
   10cf8:	cb 5d       	subi	r28, 0xDB	; 219
   10cfa:	dd 4f       	sbci	r29, 0xFD	; 253
   10cfc:	88 81       	ld	r24, Y
   10cfe:	99 81       	ldd	r25, Y+1	; 0x01
   10d00:	c5 52       	subi	r28, 0x25	; 37
   10d02:	d2 40       	sbci	r29, 0x02	; 2
   10d04:	ca 5d       	subi	r28, 0xDA	; 218
   10d06:	dd 4f       	sbci	r29, 0xFD	; 253
   10d08:	ec e0       	ldi	r30, 0x0C	; 12
   10d0a:	0c 94 3b e5 	jmp	0x1ca76	; 0x1ca76 <__epilogue_restores__+0xc>

00010d0e <dbf_open_write>:
   10d0e:	a6 e2       	ldi	r26, 0x26	; 38
   10d10:	b2 e0       	ldi	r27, 0x02	; 2
   10d12:	ed e8       	ldi	r30, 0x8D	; 141
   10d14:	f6 e8       	ldi	r31, 0x86	; 134
   10d16:	0c 94 1f e5 	jmp	0x1ca3e	; 0x1ca3e <__prologue_saves__+0xc>
   10d1a:	4a 01       	movw	r8, r20
   10d1c:	5b 01       	movw	r10, r22
   10d1e:	69 01       	movw	r12, r18
   10d20:	cb 5d       	subi	r28, 0xDB	; 219
   10d22:	dd 4f       	sbci	r29, 0xFD	; 253
   10d24:	19 82       	std	Y+1, r1	; 0x01
   10d26:	18 82       	st	Y, r1
   10d28:	c5 52       	subi	r28, 0x25	; 37
   10d2a:	d2 40       	sbci	r29, 0x02	; 2
   10d2c:	43 e0       	ldi	r20, 0x03	; 3
   10d2e:	bc 01       	movw	r22, r24
   10d30:	ce 01       	movw	r24, r28
   10d32:	01 96       	adiw	r24, 0x01	; 1
   10d34:	fe de       	rcall	.-516    	; 0x10b32 <dbf_open>
   10d36:	89 2b       	or	r24, r25
   10d38:	19 f0       	breq	.+6      	; 0x10d40 <dbf_open_write+0x32>
   10d3a:	81 e1       	ldi	r24, 0x11	; 17
   10d3c:	90 e0       	ldi	r25, 0x00	; 0
   10d3e:	2f c0       	rjmp	.+94     	; 0x10d9e <dbf_open_write+0x90>
   10d40:	b5 01       	movw	r22, r10
   10d42:	a4 01       	movw	r20, r8
   10d44:	ce 01       	movw	r24, r28
   10d46:	01 96       	adiw	r24, 0x01	; 1
   10d48:	51 df       	rcall	.-350    	; 0x10bec <dbf_lseek>
   10d4a:	89 2b       	or	r24, r25
   10d4c:	59 f0       	breq	.+22     	; 0x10d64 <dbf_open_write+0x56>
   10d4e:	85 e0       	ldi	r24, 0x05	; 5
   10d50:	90 e0       	ldi	r25, 0x00	; 0
   10d52:	f7 01       	movw	r30, r14
   10d54:	91 83       	std	Z+1, r25	; 0x01
   10d56:	80 83       	st	Z, r24
   10d58:	ce 01       	movw	r24, r28
   10d5a:	01 96       	adiw	r24, 0x01	; 1
   10d5c:	64 df       	rcall	.-312    	; 0x10c26 <dbf_close>
   10d5e:	8f ef       	ldi	r24, 0xFF	; 255
   10d60:	9f ef       	ldi	r25, 0xFF	; 255
   10d62:	27 c0       	rjmp	.+78     	; 0x10db2 <dbf_open_write+0xa4>
   10d64:	9e 01       	movw	r18, r28
   10d66:	2b 5d       	subi	r18, 0xDB	; 219
   10d68:	3d 4f       	sbci	r19, 0xFD	; 253
   10d6a:	a8 01       	movw	r20, r16
   10d6c:	b6 01       	movw	r22, r12
   10d6e:	ce 01       	movw	r24, r28
   10d70:	01 96       	adiw	r24, 0x01	; 1
   10d72:	1f df       	rcall	.-450    	; 0x10bb2 <dbf_write>
   10d74:	89 2b       	or	r24, r25
   10d76:	49 f4       	brne	.+18     	; 0x10d8a <dbf_open_write+0x7c>
   10d78:	cb 5d       	subi	r28, 0xDB	; 219
   10d7a:	dd 4f       	sbci	r29, 0xFD	; 253
   10d7c:	88 81       	ld	r24, Y
   10d7e:	99 81       	ldd	r25, Y+1	; 0x01
   10d80:	c5 52       	subi	r28, 0x25	; 37
   10d82:	d2 40       	sbci	r29, 0x02	; 2
   10d84:	08 17       	cp	r16, r24
   10d86:	19 07       	cpc	r17, r25
   10d88:	19 f0       	breq	.+6      	; 0x10d90 <dbf_open_write+0x82>
   10d8a:	81 e0       	ldi	r24, 0x01	; 1
   10d8c:	90 e0       	ldi	r25, 0x00	; 0
   10d8e:	e1 cf       	rjmp	.-62     	; 0x10d52 <dbf_open_write+0x44>
   10d90:	ce 01       	movw	r24, r28
   10d92:	01 96       	adiw	r24, 0x01	; 1
   10d94:	48 df       	rcall	.-368    	; 0x10c26 <dbf_close>
   10d96:	89 2b       	or	r24, r25
   10d98:	31 f0       	breq	.+12     	; 0x10da6 <dbf_open_write+0x98>
   10d9a:	80 e1       	ldi	r24, 0x10	; 16
   10d9c:	90 e0       	ldi	r25, 0x00	; 0
   10d9e:	f7 01       	movw	r30, r14
   10da0:	91 83       	std	Z+1, r25	; 0x01
   10da2:	80 83       	st	Z, r24
   10da4:	dc cf       	rjmp	.-72     	; 0x10d5e <dbf_open_write+0x50>
   10da6:	cb 5d       	subi	r28, 0xDB	; 219
   10da8:	dd 4f       	sbci	r29, 0xFD	; 253
   10daa:	88 81       	ld	r24, Y
   10dac:	99 81       	ldd	r25, Y+1	; 0x01
   10dae:	c5 52       	subi	r28, 0x25	; 37
   10db0:	d2 40       	sbci	r29, 0x02	; 2
   10db2:	ca 5d       	subi	r28, 0xDA	; 218
   10db4:	dd 4f       	sbci	r29, 0xFD	; 253
   10db6:	ec e0       	ldi	r30, 0x0C	; 12
   10db8:	0c 94 3b e5 	jmp	0x1ca76	; 0x1ca76 <__epilogue_restores__+0xc>

00010dbc <gpib_timer_elapsed_begin>:
   10dbc:	0c 94 12 37 	jmp	0x6e24	; 0x6e24 <clock_elapsed_begin>
   10dc0:	08 95       	ret

00010dc2 <gpib_timer_reset>:
   10dc2:	f8 94       	cli
   10dc4:	e7 e7       	ldi	r30, 0x77	; 119
   10dc6:	fc e1       	ldi	r31, 0x1C	; 28
   10dc8:	10 82       	st	Z, r1
   10dca:	11 82       	std	Z+1, r1	; 0x01
   10dcc:	12 82       	std	Z+2, r1	; 0x02
   10dce:	13 82       	std	Z+3, r1	; 0x03
   10dd0:	14 82       	std	Z+4, r1	; 0x04
   10dd2:	15 82       	std	Z+5, r1	; 0x05
   10dd4:	16 82       	std	Z+6, r1	; 0x06
   10dd6:	17 82       	std	Z+7, r1	; 0x07
   10dd8:	81 e0       	ldi	r24, 0x01	; 1
   10dda:	80 87       	std	Z+8, r24	; 0x08
   10ddc:	78 94       	sei
   10dde:	08 95       	ret

00010de0 <gpib_timer_elapsed_end>:
   10de0:	0c 94 18 37 	jmp	0x6e30	; 0x6e30 <clock_elapsed_end>
   10de4:	08 95       	ret

00010de6 <gpib_timer_task>:
   10de6:	f8 94       	cli
   10de8:	80 91 7b 1c 	lds	r24, 0x1C7B	; 0x801c7b <gpib_timer+0x4>
   10dec:	90 91 7c 1c 	lds	r25, 0x1C7C	; 0x801c7c <gpib_timer+0x5>
   10df0:	a0 91 7d 1c 	lds	r26, 0x1C7D	; 0x801c7d <gpib_timer+0x6>
   10df4:	b0 91 7e 1c 	lds	r27, 0x1C7E	; 0x801c7e <gpib_timer+0x7>
   10df8:	89 2b       	or	r24, r25
   10dfa:	8a 2b       	or	r24, r26
   10dfc:	8b 2b       	or	r24, r27
   10dfe:	a1 f0       	breq	.+40     	; 0x10e28 <gpib_timer_task+0x42>
   10e00:	80 91 7b 1c 	lds	r24, 0x1C7B	; 0x801c7b <gpib_timer+0x4>
   10e04:	90 91 7c 1c 	lds	r25, 0x1C7C	; 0x801c7c <gpib_timer+0x5>
   10e08:	a0 91 7d 1c 	lds	r26, 0x1C7D	; 0x801c7d <gpib_timer+0x6>
   10e0c:	b0 91 7e 1c 	lds	r27, 0x1C7E	; 0x801c7e <gpib_timer+0x7>
   10e10:	01 97       	sbiw	r24, 0x01	; 1
   10e12:	a1 09       	sbc	r26, r1
   10e14:	b1 09       	sbc	r27, r1
   10e16:	80 93 7b 1c 	sts	0x1C7B, r24	; 0x801c7b <gpib_timer+0x4>
   10e1a:	90 93 7c 1c 	sts	0x1C7C, r25	; 0x801c7c <gpib_timer+0x5>
   10e1e:	a0 93 7d 1c 	sts	0x1C7D, r26	; 0x801c7d <gpib_timer+0x6>
   10e22:	b0 93 7e 1c 	sts	0x1C7E, r27	; 0x801c7e <gpib_timer+0x7>
   10e26:	03 c0       	rjmp	.+6      	; 0x10e2e <gpib_timer_task+0x48>
   10e28:	81 e0       	ldi	r24, 0x01	; 1
   10e2a:	80 93 7f 1c 	sts	0x1C7F, r24	; 0x801c7f <gpib_timer+0x8>
   10e2e:	78 94       	sei
   10e30:	08 95       	ret

00010e32 <gpib_timeout_set>:
   10e32:	f8 94       	cli
   10e34:	e7 e7       	ldi	r30, 0x77	; 119
   10e36:	fc e1       	ldi	r31, 0x1C	; 28
   10e38:	64 83       	std	Z+4, r22	; 0x04
   10e3a:	75 83       	std	Z+5, r23	; 0x05
   10e3c:	86 83       	std	Z+6, r24	; 0x06
   10e3e:	97 83       	std	Z+7, r25	; 0x07
   10e40:	10 86       	std	Z+8, r1	; 0x08
   10e42:	78 94       	sei
   10e44:	08 95       	ret

00010e46 <gpib_bus_read_init>:
   10e46:	54 98       	cbi	0x0a, 4	; 10
   10e48:	57 98       	cbi	0x0a, 7	; 10
   10e4a:	45 98       	cbi	0x08, 5	; 8
   10e4c:	3d 9a       	sbi	0x07, 5	; 7
   10e4e:	11 b8       	out	0x01, r1	; 1
   10e50:	2f ef       	ldi	r18, 0xFF	; 255
   10e52:	22 b9       	out	0x02, r18	; 2
   10e54:	43 98       	cbi	0x08, 3	; 8
   10e56:	3b 9a       	sbi	0x07, 3	; 7
   10e58:	21 98       	cbi	0x04, 1	; 4
   10e5a:	56 98       	cbi	0x0a, 6	; 10
   10e5c:	20 98       	cbi	0x04, 0	; 4
   10e5e:	55 98       	cbi	0x0a, 5	; 10
   10e60:	89 2b       	or	r24, r25
   10e62:	39 f4       	brne	.+14     	; 0x10e72 <gpib_bus_read_init+0x2c>
   10e64:	52 98       	cbi	0x0a, 2	; 10
   10e66:	53 98       	cbi	0x0a, 3	; 10
   10e68:	8d e0       	ldi	r24, 0x0D	; 13
   10e6a:	8a 95       	dec	r24
   10e6c:	f1 f7       	brne	.-4      	; 0x10e6a <gpib_bus_read_init+0x24>
   10e6e:	00 00       	nop
   10e70:	04 c0       	rjmp	.+8      	; 0x10e7a <gpib_bus_read_init+0x34>
   10e72:	5b 98       	cbi	0x0b, 3	; 11
   10e74:	53 9a       	sbi	0x0a, 3	; 10
   10e76:	5a 98       	cbi	0x0b, 2	; 11
   10e78:	52 9a       	sbi	0x0a, 2	; 10
   10e7a:	42 98       	cbi	0x08, 2	; 8
   10e7c:	3a 9a       	sbi	0x07, 2	; 7
   10e7e:	44 9a       	sbi	0x08, 4	; 8
   10e80:	3c 9a       	sbi	0x07, 4	; 7
   10e82:	8d e0       	ldi	r24, 0x0D	; 13
   10e84:	8a 95       	dec	r24
   10e86:	f1 f7       	brne	.-4      	; 0x10e84 <gpib_bus_read_init+0x3e>
   10e88:	00 00       	nop
   10e8a:	08 95       	ret

00010e8c <gpib_bus_init>:
   10e8c:	00 d0       	rcall	.+0      	; 0x10e8e <gpib_bus_init+0x2>
   10e8e:	1f 92       	push	r1
   10e90:	10 92 fc 18 	sts	0x18FC, r1	; 0x8018fc <gpib_unread_f>
   10e94:	11 b8       	out	0x01, r1	; 1
   10e96:	8f ef       	ldi	r24, 0xFF	; 255
   10e98:	82 b9       	out	0x02, r24	; 2
   10e9a:	21 98       	cbi	0x04, 1	; 4
   10e9c:	52 98       	cbi	0x0a, 2	; 10
   10e9e:	53 98       	cbi	0x0a, 3	; 10
   10ea0:	54 98       	cbi	0x0a, 4	; 10
   10ea2:	57 98       	cbi	0x0a, 7	; 10
   10ea4:	56 98       	cbi	0x0a, 6	; 10
   10ea6:	20 98       	cbi	0x04, 0	; 4
   10ea8:	55 98       	cbi	0x0a, 5	; 10
   10eaa:	45 98       	cbi	0x08, 5	; 8
   10eac:	3d 9a       	sbi	0x07, 5	; 7
   10eae:	43 98       	cbi	0x08, 3	; 8
   10eb0:	3b 9a       	sbi	0x07, 3	; 7
   10eb2:	42 98       	cbi	0x08, 2	; 8
   10eb4:	3a 9a       	sbi	0x07, 2	; 7
   10eb6:	44 9a       	sbi	0x08, 4	; 8
   10eb8:	3c 9a       	sbi	0x07, 4	; 7
   10eba:	8d e0       	ldi	r24, 0x0D	; 13
   10ebc:	8a 95       	dec	r24
   10ebe:	f1 f7       	brne	.-4      	; 0x10ebc <gpib_bus_init+0x30>
   10ec0:	00 00       	nop
   10ec2:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   10ec6:	82 ff       	sbrs	r24, 2
   10ec8:	0a c0       	rjmp	.+20     	; 0x10ede <gpib_bus_init+0x52>
   10eca:	8b ea       	ldi	r24, 0xAB	; 171
   10ecc:	90 e1       	ldi	r25, 0x10	; 16
   10ece:	a0 e0       	ldi	r26, 0x00	; 0
   10ed0:	ed b7       	in	r30, 0x3d	; 61
   10ed2:	fe b7       	in	r31, 0x3e	; 62
   10ed4:	81 83       	std	Z+1, r24	; 0x01
   10ed6:	92 83       	std	Z+2, r25	; 0x02
   10ed8:	a3 83       	std	Z+3, r26	; 0x03
   10eda:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   10ede:	0f 90       	pop	r0
   10ee0:	0f 90       	pop	r0
   10ee2:	0f 90       	pop	r0
   10ee4:	08 95       	ret

00010ee6 <gpib_state_init>:
   10ee6:	00 d0       	rcall	.+0      	; 0x10ee8 <gpib_state_init+0x2>
   10ee8:	1f 92       	push	r1
   10eea:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   10eee:	82 ff       	sbrs	r24, 2
   10ef0:	0a c0       	rjmp	.+20     	; 0x10f06 <gpib_state_init+0x20>
   10ef2:	88 e9       	ldi	r24, 0x98	; 152
   10ef4:	90 e1       	ldi	r25, 0x10	; 16
   10ef6:	a0 e0       	ldi	r26, 0x00	; 0
   10ef8:	ed b7       	in	r30, 0x3d	; 61
   10efa:	fe b7       	in	r31, 0x3e	; 62
   10efc:	81 83       	std	Z+1, r24	; 0x01
   10efe:	92 83       	std	Z+2, r25	; 0x02
   10f00:	a3 83       	std	Z+3, r26	; 0x03
   10f02:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   10f06:	e4 dd       	rcall	.-1080   	; 0x10ad0 <ppr_init>
   10f08:	0e 94 e3 91 	call	0x123c6	; 0x123c6 <listen_cleanup>
   10f0c:	0e 94 fb 92 	call	0x125f6	; 0x125f6 <talk_cleanup>
   10f10:	10 92 83 1e 	sts	0x1E83, r1	; 0x801e83 <spoll>
   10f14:	10 92 86 1e 	sts	0x1E86, r1	; 0x801e86 <talking>
   10f18:	10 92 89 1e 	sts	0x1E89, r1	; 0x801e89 <talking_last>
   10f1c:	10 92 88 1e 	sts	0x1E88, r1	; 0x801e88 <listening>
   10f20:	10 92 82 1e 	sts	0x1E82, r1	; 0x801e82 <listening_last>
   10f24:	10 92 81 1c 	sts	0x1C81, r1	; 0x801c81 <lastcmd+0x1>
   10f28:	10 92 80 1c 	sts	0x1C80, r1	; 0x801c80 <lastcmd>
   10f2c:	10 92 85 1e 	sts	0x1E85, r1	; 0x801e85 <current+0x1>
   10f30:	10 92 84 1e 	sts	0x1E84, r1	; 0x801e84 <current>
   10f34:	10 92 87 1e 	sts	0x1E87, r1	; 0x801e87 <secondary>
   10f38:	0f 90       	pop	r0
   10f3a:	0f 90       	pop	r0
   10f3c:	0f 90       	pop	r0
   10f3e:	08 95       	ret

00010f40 <gpib_enable_PPR>:
   10f40:	cf 93       	push	r28
   10f42:	df 93       	push	r29
   10f44:	ad b7       	in	r26, 0x3d	; 61
   10f46:	be b7       	in	r27, 0x3e	; 62
   10f48:	17 97       	sbiw	r26, 0x07	; 7
   10f4a:	0f b6       	in	r0, 0x3f	; 63
   10f4c:	f8 94       	cli
   10f4e:	be bf       	out	0x3e, r27	; 62
   10f50:	0f be       	out	0x3f, r0	; 63
   10f52:	ad bf       	out	0x3d, r26	; 61
   10f54:	ec 01       	movw	r28, r24
   10f56:	88 30       	cpi	r24, 0x08	; 8
   10f58:	91 05       	cpc	r25, r1
   10f5a:	68 f0       	brcs	.+26     	; 0x10f76 <gpib_enable_PPR+0x36>
   10f5c:	ed b7       	in	r30, 0x3d	; 61
   10f5e:	fe b7       	in	r31, 0x3e	; 62
   10f60:	95 83       	std	Z+5, r25	; 0x05
   10f62:	84 83       	std	Z+4, r24	; 0x04
   10f64:	82 e7       	ldi	r24, 0x72	; 114
   10f66:	90 e1       	ldi	r25, 0x10	; 16
   10f68:	a0 e0       	ldi	r26, 0x00	; 0
   10f6a:	81 83       	std	Z+1, r24	; 0x01
   10f6c:	92 83       	std	Z+2, r25	; 0x02
   10f6e:	a3 83       	std	Z+3, r26	; 0x03
   10f70:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   10f74:	15 c0       	rjmp	.+42     	; 0x10fa0 <gpib_enable_PPR+0x60>
   10f76:	c2 dd       	rcall	.-1148   	; 0x10afc <ppr_bit_set>
   10f78:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   10f7c:	81 ff       	sbrs	r24, 1
   10f7e:	10 c0       	rjmp	.+32     	; 0x10fa0 <gpib_enable_PPR+0x60>
   10f80:	a3 dd       	rcall	.-1210   	; 0x10ac8 <ppr_reg>
   10f82:	90 e0       	ldi	r25, 0x00	; 0
   10f84:	ed b7       	in	r30, 0x3d	; 61
   10f86:	fe b7       	in	r31, 0x3e	; 62
   10f88:	97 83       	std	Z+7, r25	; 0x07
   10f8a:	86 83       	std	Z+6, r24	; 0x06
   10f8c:	d5 83       	std	Z+5, r29	; 0x05
   10f8e:	c4 83       	std	Z+4, r28	; 0x04
   10f90:	87 e5       	ldi	r24, 0x57	; 87
   10f92:	90 e1       	ldi	r25, 0x10	; 16
   10f94:	a0 e0       	ldi	r26, 0x00	; 0
   10f96:	81 83       	std	Z+1, r24	; 0x01
   10f98:	92 83       	std	Z+2, r25	; 0x02
   10f9a:	a3 83       	std	Z+3, r26	; 0x03
   10f9c:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   10fa0:	cd b7       	in	r28, 0x3d	; 61
   10fa2:	de b7       	in	r29, 0x3e	; 62
   10fa4:	27 96       	adiw	r28, 0x07	; 7
   10fa6:	e2 e0       	ldi	r30, 0x02	; 2
   10fa8:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__epilogue_restores__+0x20>

00010fac <gpib_disable_PPR>:
   10fac:	cf 93       	push	r28
   10fae:	df 93       	push	r29
   10fb0:	ad b7       	in	r26, 0x3d	; 61
   10fb2:	be b7       	in	r27, 0x3e	; 62
   10fb4:	17 97       	sbiw	r26, 0x07	; 7
   10fb6:	0f b6       	in	r0, 0x3f	; 63
   10fb8:	f8 94       	cli
   10fba:	be bf       	out	0x3e, r27	; 62
   10fbc:	0f be       	out	0x3f, r0	; 63
   10fbe:	ad bf       	out	0x3d, r26	; 61
   10fc0:	ec 01       	movw	r28, r24
   10fc2:	88 30       	cpi	r24, 0x08	; 8
   10fc4:	91 05       	cpc	r25, r1
   10fc6:	68 f0       	brcs	.+26     	; 0x10fe2 <gpib_disable_PPR+0x36>
   10fc8:	ed b7       	in	r30, 0x3d	; 61
   10fca:	fe b7       	in	r31, 0x3e	; 62
   10fcc:	95 83       	std	Z+5, r25	; 0x05
   10fce:	84 83       	std	Z+4, r24	; 0x04
   10fd0:	80 e3       	ldi	r24, 0x30	; 48
   10fd2:	90 e1       	ldi	r25, 0x10	; 16
   10fd4:	a0 e0       	ldi	r26, 0x00	; 0
   10fd6:	81 83       	std	Z+1, r24	; 0x01
   10fd8:	92 83       	std	Z+2, r25	; 0x02
   10fda:	a3 83       	std	Z+3, r26	; 0x03
   10fdc:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   10fe0:	15 c0       	rjmp	.+42     	; 0x1100c <gpib_disable_PPR+0x60>
   10fe2:	99 dd       	rcall	.-1230   	; 0x10b16 <ppr_bit_clr>
   10fe4:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   10fe8:	81 ff       	sbrs	r24, 1
   10fea:	10 c0       	rjmp	.+32     	; 0x1100c <gpib_disable_PPR+0x60>
   10fec:	6d dd       	rcall	.-1318   	; 0x10ac8 <ppr_reg>
   10fee:	90 e0       	ldi	r25, 0x00	; 0
   10ff0:	ed b7       	in	r30, 0x3d	; 61
   10ff2:	fe b7       	in	r31, 0x3e	; 62
   10ff4:	97 83       	std	Z+7, r25	; 0x07
   10ff6:	86 83       	std	Z+6, r24	; 0x06
   10ff8:	d5 83       	std	Z+5, r29	; 0x05
   10ffa:	c4 83       	std	Z+4, r28	; 0x04
   10ffc:	85 e1       	ldi	r24, 0x15	; 21
   10ffe:	90 e1       	ldi	r25, 0x10	; 16
   11000:	a0 e0       	ldi	r26, 0x00	; 0
   11002:	81 83       	std	Z+1, r24	; 0x01
   11004:	92 83       	std	Z+2, r25	; 0x02
   11006:	a3 83       	std	Z+3, r26	; 0x03
   11008:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   1100c:	cd b7       	in	r28, 0x3d	; 61
   1100e:	de b7       	in	r29, 0x3e	; 62
   11010:	27 96       	adiw	r28, 0x07	; 7
   11012:	e2 e0       	ldi	r30, 0x02	; 2
   11014:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__epilogue_restores__+0x20>

00011018 <gpib_assert_ifc>:
   11018:	00 d0       	rcall	.+0      	; 0x1101a <gpib_assert_ifc+0x2>
   1101a:	1f 92       	push	r1
   1101c:	5c 98       	cbi	0x0b, 4	; 11
   1101e:	54 9a       	sbi	0x0a, 4	; 10
   11020:	6a ef       	ldi	r22, 0xFA	; 250
   11022:	70 e0       	ldi	r23, 0x00	; 0
   11024:	80 e0       	ldi	r24, 0x00	; 0
   11026:	90 e0       	ldi	r25, 0x00	; 0
   11028:	0e 94 7a 2a 	call	0x54f4	; 0x54f4 <delayus>
   1102c:	54 98       	cbi	0x0a, 4	; 10
   1102e:	6a ef       	ldi	r22, 0xFA	; 250
   11030:	70 e0       	ldi	r23, 0x00	; 0
   11032:	80 e0       	ldi	r24, 0x00	; 0
   11034:	90 e0       	ldi	r25, 0x00	; 0
   11036:	0e 94 7a 2a 	call	0x54f4	; 0x54f4 <delayus>
   1103a:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1103e:	82 ff       	sbrs	r24, 2
   11040:	0a c0       	rjmp	.+20     	; 0x11056 <gpib_assert_ifc+0x3e>
   11042:	89 e0       	ldi	r24, 0x09	; 9
   11044:	90 e1       	ldi	r25, 0x10	; 16
   11046:	a0 e0       	ldi	r26, 0x00	; 0
   11048:	ed b7       	in	r30, 0x3d	; 61
   1104a:	fe b7       	in	r31, 0x3e	; 62
   1104c:	81 83       	std	Z+1, r24	; 0x01
   1104e:	92 83       	std	Z+2, r25	; 0x02
   11050:	a3 83       	std	Z+3, r26	; 0x03
   11052:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   11056:	0f 90       	pop	r0
   11058:	0f 90       	pop	r0
   1105a:	0f 90       	pop	r0
   1105c:	08 95       	ret

0001105e <gpib_unread>:
   1105e:	cf 93       	push	r28
   11060:	df 93       	push	r29
   11062:	00 d0       	rcall	.+0      	; 0x11064 <gpib_unread+0x6>
   11064:	1f 92       	push	r1
   11066:	ec 01       	movw	r28, r24
   11068:	80 91 fc 18 	lds	r24, 0x18FC	; 0x8018fc <gpib_unread_f>
   1106c:	81 11       	cpse	r24, r1
   1106e:	08 c0       	rjmp	.+16     	; 0x11080 <gpib_unread+0x22>
   11070:	d0 93 8b 1e 	sts	0x1E8B, r29	; 0x801e8b <gpib_unread_data+0x1>
   11074:	c0 93 8a 1e 	sts	0x1E8A, r28	; 0x801e8a <gpib_unread_data>
   11078:	81 e0       	ldi	r24, 0x01	; 1
   1107a:	80 93 fc 18 	sts	0x18FC, r24	; 0x8018fc <gpib_unread_f>
   1107e:	12 c0       	rjmp	.+36     	; 0x110a4 <gpib_unread+0x46>
   11080:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   11084:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   11088:	85 70       	andi	r24, 0x05	; 5
   1108a:	99 27       	eor	r25, r25
   1108c:	89 2b       	or	r24, r25
   1108e:	51 f0       	breq	.+20     	; 0x110a4 <gpib_unread+0x46>
   11090:	8b ed       	ldi	r24, 0xDB	; 219
   11092:	9f e0       	ldi	r25, 0x0F	; 15
   11094:	a0 e0       	ldi	r26, 0x00	; 0
   11096:	ed b7       	in	r30, 0x3d	; 61
   11098:	fe b7       	in	r31, 0x3e	; 62
   1109a:	81 83       	std	Z+1, r24	; 0x01
   1109c:	92 83       	std	Z+2, r25	; 0x02
   1109e:	a3 83       	std	Z+3, r26	; 0x03
   110a0:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   110a4:	ce 01       	movw	r24, r28
   110a6:	cd b7       	in	r28, 0x3d	; 61
   110a8:	de b7       	in	r29, 0x3e	; 62
   110aa:	23 96       	adiw	r28, 0x03	; 3
   110ac:	e2 e0       	ldi	r30, 0x02	; 2
   110ae:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__epilogue_restores__+0x20>

000110b2 <gpib_bus_read>:

/// @brief Read GPIB data BUS only
/// @return  bus (lower 8 bits)
uint8_t gpib_bus_read()
{
    uint8_t bus = ~(GPIB_BUS_RD());
   110b2:	11 b8       	out	0x01, r1	; 1
   110b4:	80 b1       	in	r24, 0x00	; 0
   110b6:	80 95       	com	r24

    ///@brief if a command byte (ATN low) then strip partity
    if(!GPIB_PIN_TST(ATN))
   110b8:	4e 9b       	sbis	0x09, 6	; 9
        bus &= 0x7f;
   110ba:	8f 77       	andi	r24, 0x7F	; 127
    else
        bus &= 0xff;
    return(bus);
}
   110bc:	08 95       	ret

000110be <gpib_control_pin_read>:
/// @return  control lines (upper 8 bits)
/// @see gpib_bus_read_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
    if(GPIB_PIN_TST(ATN) == 0 )
   110be:	4e 99       	sbic	0x09, 6	; 9
   110c0:	03 c0       	rjmp	.+6      	; 0x110c8 <gpib_control_pin_read+0xa>
        control |= ATN_FLAG;
   110c2:	80 e0       	ldi	r24, 0x00	; 0
   110c4:	94 e0       	ldi	r25, 0x04	; 4
   110c6:	02 c0       	rjmp	.+4      	; 0x110cc <gpib_control_pin_read+0xe>
///   FIXME We could add a test for read/write state ??
/// @return  control lines (upper 8 bits)
/// @see gpib_bus_read_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
   110c8:	80 e0       	ldi	r24, 0x00	; 0
   110ca:	90 e0       	ldi	r25, 0x00	; 0
    if(GPIB_PIN_TST(ATN) == 0 )
        control |= ATN_FLAG;
    if(GPIB_PIN_TST(EOI) == 0 )
   110cc:	18 9b       	sbis	0x03, 0	; 3
        control |= EOI_FLAG;
   110ce:	91 60       	ori	r25, 0x01	; 1
    if(GPIB_PIN_TST(SRQ) == 0 )
   110d0:	4d 9b       	sbis	0x09, 5	; 9
        control |= SRQ_FLAG;
   110d2:	92 60       	ori	r25, 0x02	; 2
    if(GPIB_PIN_TST(REN) == 0 )
   110d4:	4f 9b       	sbis	0x09, 7	; 9
        control |= REN_FLAG;
   110d6:	98 60       	ori	r25, 0x08	; 8
    if(GPIB_PIN_TST(IFC) == 0 )
   110d8:	4c 9b       	sbis	0x09, 4	; 9
        control |= IFC_FLAG;
   110da:	90 61       	ori	r25, 0x10	; 16
    return(control);
}
   110dc:	08 95       	ret

000110de <gpib_handshake_pin_read>:
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
    ///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
    /// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
   110de:	19 99       	sbic	0x03, 1	; 3
   110e0:	03 c0       	rjmp	.+6      	; 0x110e8 <gpib_handshake_pin_read+0xa>
        control |= DAV_FLAG;
   110e2:	80 e0       	ldi	r24, 0x00	; 0
   110e4:	90 e2       	ldi	r25, 0x20	; 32
   110e6:	02 c0       	rjmp	.+4      	; 0x110ec <gpib_handshake_pin_read+0xe>
/// FIXME: V2 boards can only read pins enabled for read by the SN75162
///   FIXME We could add a test for read/write state ??
/// @return  handshake lines (upper 8 bits)
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
   110e8:	80 e0       	ldi	r24, 0x00	; 0
   110ea:	90 e0       	ldi	r25, 0x00	; 0
    ///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
    /// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
        control |= DAV_FLAG;
    if(GPIB_PIN_TST(NRFD) == 0 )
   110ec:	4a 9b       	sbis	0x09, 2	; 9
        control |= NRFD_FLAG;
   110ee:	90 64       	ori	r25, 0x40	; 64
    if(GPIB_PIN_TST(NDAC) == 0 )
   110f0:	4b 9b       	sbis	0x09, 3	; 9
        control |= NDAC_FLAG;
   110f2:	90 68       	ori	r25, 0x80	; 128
    return(control);
}
   110f4:	08 95       	ret

000110f6 <gpib_write_byte>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
uint16_t gpib_write_byte(uint16_t ch)
{
   110f6:	2f 92       	push	r2
   110f8:	3f 92       	push	r3
   110fa:	4f 92       	push	r4
   110fc:	6f 92       	push	r6
   110fe:	7f 92       	push	r7
   11100:	8f 92       	push	r8
   11102:	cf 92       	push	r12
   11104:	df 92       	push	r13
   11106:	ef 92       	push	r14
   11108:	1f 93       	push	r17
   1110a:	cf 93       	push	r28
   1110c:	df 93       	push	r29
   1110e:	cd b7       	in	r28, 0x3d	; 61
   11110:	de b7       	in	r29, 0x3e	; 62
   11112:	2f 97       	sbiw	r28, 0x0f	; 15
   11114:	0f b6       	in	r0, 0x3f	; 63
   11116:	f8 94       	cli
   11118:	de bf       	out	0x3e, r29	; 62
   1111a:	0f be       	out	0x3f, r0	; 63
   1111c:	cd bf       	out	0x3d, r28	; 61
   1111e:	9f 87       	std	Y+15, r25	; 0x0f
   11120:	8e 87       	std	Y+14, r24	; 0x0e
    uint8_t tx_state;

	// Wait for DAV to be released before starting
	// Read state for DAV
	gpib_bus_read_init(0);
   11122:	80 e0       	ldi	r24, 0x00	; 0
   11124:	90 e0       	ldi	r25, 0x00	; 0
   11126:	8f de       	rcall	.-738    	; 0x10e46 <gpib_bus_read_init>
	// Bus read init sets the following states
	// GPIB_BUS_LATCH_WR(0xff); // float OC BUS on write
	// GPIB_IO_LOW(PE);			// BUS OC PULLUP

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);
   11128:	64 ef       	ldi	r22, 0xF4	; 244
   1112a:	71 e0       	ldi	r23, 0x01	; 1
   1112c:	80 e0       	ldi	r24, 0x00	; 0
   1112e:	90 e0       	ldi	r25, 0x00	; 0
   11130:	80 de       	rcall	.-768    	; 0x10e32 <gpib_timeout_set>

	// Bus read init sets the following states
	// GPIB_BUS_LATCH_WR(0xff); // float OC BUS on write
	// GPIB_IO_LOW(PE);			// BUS OC PULLUP

    tx_state = GPIB_TX_START;
   11132:	10 e0       	ldi	r17, 0x00	; 0
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for DAV==1>\n");
   11134:	89 e4       	ldi	r24, 0x49	; 73
   11136:	9f e0       	ldi	r25, 0x0F	; 15
   11138:	6c 01       	movw	r12, r24
   1113a:	e1 2c       	mov	r14, r1
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for NDAC==1>\n");
   1113c:	83 e6       	ldi	r24, 0x63	; 99
   1113e:	9f e0       	ldi	r25, 0x0F	; 15
   11140:	3c 01       	movw	r6, r24
   11142:	81 2c       	mov	r8, r1
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for NRFD==0>\n");
   11144:	8e e7       	ldi	r24, 0x7E	; 126
   11146:	9f e0       	ldi	r25, 0x0F	; 15
   11148:	1c 01       	movw	r2, r24
   1114a:	41 2c       	mov	r4, r1
                }
                if (gpib_timeout_test())
                {
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for NRFD==1 && NDAC == 0>\n");
   1114c:	89 e9       	ldi	r24, 0x99	; 153
   1114e:	9f e0       	ldi	r25, 0x0F	; 15
   11150:	9c 01       	movw	r18, r24
   11152:	40 e0       	ldi	r20, 0x00	; 0
   11154:	28 87       	std	Y+8, r18	; 0x08
   11156:	39 87       	std	Y+9, r19	; 0x09
   11158:	4a 87       	std	Y+10, r20	; 0x0a
                }
                if (gpib_timeout_test())
                {
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for DAV==1>\n");
   1115a:	81 ec       	ldi	r24, 0xC1	; 193
   1115c:	9f e0       	ldi	r25, 0x0F	; 15
   1115e:	9c 01       	movw	r18, r24
   11160:	40 e0       	ldi	r20, 0x00	; 0
   11162:	2b 87       	std	Y+11, r18	; 0x0b
   11164:	3c 87       	std	Y+12, r19	; 0x0c
   11166:	4d 87       	std	Y+13, r20	; 0x0d
    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);

    while(tx_state != GPIB_TX_DONE )
    {
        if(uart_keyhit(0))
   11168:	80 e0       	ldi	r24, 0x00	; 0
   1116a:	0e 94 b1 2c 	call	0x5962	; 0x5962 <uart_keyhit>
   1116e:	89 2b       	or	r24, r25
   11170:	09 f0       	breq	.+2      	; 0x11174 <gpib_write_byte+0x7e>
   11172:	1b c1       	rjmp	.+566    	; 0x113aa <gpib_write_byte+0x2b4>
        if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

		// IFC is always in for a device
        if(GPIB_PIN_TST(IFC) == 0)
   11174:	4c 99       	sbic	0x09, 4	; 9
   11176:	07 c0       	rjmp	.+14     	; 0x11186 <gpib_write_byte+0x90>
        {
            ch |= IFC_FLAG;
   11178:	8e 85       	ldd	r24, Y+14	; 0x0e
   1117a:	9f 85       	ldd	r25, Y+15	; 0x0f
   1117c:	90 61       	ori	r25, 0x10	; 16
   1117e:	9f 87       	std	Y+15, r25	; 0x0f
			gpib_bus_init();
   11180:	8e 87       	std	Y+14, r24	; 0x0e
   11182:	84 de       	rcall	.-760    	; 0x10e8c <gpib_bus_init>
            break;
   11184:	12 c1       	rjmp	.+548    	; 0x113aa <gpib_write_byte+0x2b4>
        }

        switch(tx_state)
   11186:	81 2f       	mov	r24, r17
   11188:	90 e0       	ldi	r25, 0x00	; 0
   1118a:	8a 30       	cpi	r24, 0x0A	; 10
   1118c:	91 05       	cpc	r25, r1
   1118e:	08 f0       	brcs	.+2      	; 0x11192 <gpib_write_byte+0x9c>
   11190:	02 c1       	rjmp	.+516    	; 0x11396 <gpib_write_byte+0x2a0>
   11192:	fc 01       	movw	r30, r24
   11194:	e3 54       	subi	r30, 0x43	; 67
   11196:	ff 4f       	sbci	r31, 0xFF	; 255
   11198:	0c 94 d5 e4 	jmp	0x1c9aa	; 0x1c9aa <__tablejump2__>
        {
            case GPIB_TX_START:
                // Wait for release of DAV and EOI before starting
				// IF DAV = 0 the bus is busy
                if(GPIB_PIN_TST(DAV) == 1)
   1119c:	19 9b       	sbis	0x03, 1	; 3
   1119e:	12 c0       	rjmp	.+36     	; 0x111c4 <gpib_write_byte+0xce>
					// We arive here in Read Mode - see gpib_bus_read_init(0);

					// Switch GBIB driver direction to Write
					// CPU has BUS already set IN with pullups = 0xff - see gpib_bus_read_init(0);
					// When we switch the GPIB drivers will be in OC mode and off the bus (0xff)
					GPIB_IO_HI(TE); // BUS OUT, DAV OUT, NRFD and NDAC IN
   111a0:	42 9a       	sbi	0x08, 2	; 8
   111a2:	3a 9a       	sbi	0x07, 2	; 7
					GPIB_IO_LOW(DC);// ATN OUT, EOI OUT, SRQ IN
   111a4:	44 98       	cbi	0x08, 4	; 8
   111a6:	3c 9a       	sbi	0x07, 4	; 7
#endif
                    // My testing with various GPIB devices shows that we MUST assert ATN EARLY!
                    if(ch & ATN_FLAG)
   111a8:	ee 85       	ldd	r30, Y+14	; 0x0e
   111aa:	ff 85       	ldd	r31, Y+15	; 0x0f
   111ac:	f2 ff       	sbrs	r31, 2
   111ae:	03 c0       	rjmp	.+6      	; 0x111b6 <gpib_write_byte+0xc0>
                        GPIB_IO_LOW(ATN);   // FYI: SS80 never sends ATN from a device
   111b0:	5e 98       	cbi	0x0b, 6	; 11
   111b2:	56 9a       	sbi	0x0a, 6	; 10
   111b4:	01 c0       	rjmp	.+2      	; 0x111b8 <gpib_write_byte+0xc2>
                    else
                        GPIB_PIN_FLOAT_UP(ATN);
   111b6:	56 98       	cbi	0x0a, 6	; 10

                    gpib_timeout_set(HTIMEOUT);
   111b8:	64 ef       	ldi	r22, 0xF4	; 244
   111ba:	71 e0       	ldi	r23, 0x01	; 1
   111bc:	80 e0       	ldi	r24, 0x00	; 0
   111be:	90 e0       	ldi	r25, 0x00	; 0
   111c0:	38 de       	rcall	.-912    	; 0x10e32 <gpib_timeout_set>
                    tx_state = GPIB_TX_WAIT_READY;
   111c2:	11 e0       	ldi	r17, 0x01	; 1
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   111c4:	80 91 7f 1c 	lds	r24, 0x1C7F	; 0x801c7f <gpib_timer+0x8>
                        GPIB_PIN_FLOAT_UP(ATN);

                    gpib_timeout_set(HTIMEOUT);
                    tx_state = GPIB_TX_WAIT_READY;
                }
                if (gpib_timeout_test())
   111c8:	88 23       	and	r24, r24
   111ca:	71 f2       	breq	.-100    	; 0x11168 <gpib_write_byte+0x72>
                {
#if SDEBUG
                    if(debuglevel & (1+4))
   111cc:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   111d0:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   111d4:	85 70       	andi	r24, 0x05	; 5
   111d6:	99 27       	eor	r25, r25
   111d8:	89 2b       	or	r24, r25
   111da:	51 f1       	breq	.+84     	; 0x11230 <gpib_write_byte+0x13a>
                        printf("<BUS waiting for DAV==1>\n");
   111dc:	2b 85       	ldd	r18, Y+11	; 0x0b
   111de:	3c 85       	ldd	r19, Y+12	; 0x0c
   111e0:	4d 85       	ldd	r20, Y+13	; 0x0d
   111e2:	ed b7       	in	r30, 0x3d	; 61
   111e4:	fe b7       	in	r31, 0x3e	; 62
   111e6:	21 83       	std	Z+1, r18	; 0x01
   111e8:	32 83       	std	Z+2, r19	; 0x02
   111ea:	43 83       	std	Z+3, r20	; 0x03
   111ec:	1f c0       	rjmp	.+62     	; 0x1122c <gpib_write_byte+0x136>
                }
                break;

            case GPIB_TX_WAIT_READY:
                // Wait for ready condition
                if(GPIB_PIN_TST(NRFD) == 1 && GPIB_PIN_TST(NDAC) == 0)
   111ee:	4a 9b       	sbis	0x09, 2	; 9
   111f0:	08 c0       	rjmp	.+16     	; 0x11202 <gpib_write_byte+0x10c>
   111f2:	4b 99       	sbic	0x09, 3	; 9
                {
                    gpib_timeout_set(HTIMEOUT);
   111f4:	06 c0       	rjmp	.+12     	; 0x11202 <gpib_write_byte+0x10c>
   111f6:	64 ef       	ldi	r22, 0xF4	; 244
   111f8:	71 e0       	ldi	r23, 0x01	; 1
   111fa:	80 e0       	ldi	r24, 0x00	; 0
   111fc:	90 e0       	ldi	r25, 0x00	; 0
                    tx_state = GPIB_TX_PUT_DATA;
   111fe:	19 de       	rcall	.-974    	; 0x10e32 <gpib_timeout_set>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11200:	12 e0       	ldi	r17, 0x02	; 2
   11202:	80 91 7f 1c 	lds	r24, 0x1C7F	; 0x801c7f <gpib_timer+0x8>
                if(GPIB_PIN_TST(NRFD) == 1 && GPIB_PIN_TST(NDAC) == 0)
                {
                    gpib_timeout_set(HTIMEOUT);
                    tx_state = GPIB_TX_PUT_DATA;
                }
                if (gpib_timeout_test())
   11206:	88 23       	and	r24, r24
   11208:	09 f4       	brne	.+2      	; 0x1120c <gpib_write_byte+0x116>
                {
#if SDEBUG
                    if(debuglevel & (1+4))
   1120a:	ae cf       	rjmp	.-164    	; 0x11168 <gpib_write_byte+0x72>
   1120c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   11210:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   11214:	85 70       	andi	r24, 0x05	; 5
   11216:	99 27       	eor	r25, r25
   11218:	89 2b       	or	r24, r25
                        printf("<BUS waiting for NRFD==1 && NDAC == 0>\n");
   1121a:	51 f0       	breq	.+20     	; 0x11230 <gpib_write_byte+0x13a>
   1121c:	88 85       	ldd	r24, Y+8	; 0x08
   1121e:	99 85       	ldd	r25, Y+9	; 0x09
   11220:	aa 85       	ldd	r26, Y+10	; 0x0a
   11222:	ed b7       	in	r30, 0x3d	; 61
   11224:	fe b7       	in	r31, 0x3e	; 62
   11226:	81 83       	std	Z+1, r24	; 0x01
   11228:	92 83       	std	Z+2, r25	; 0x02
   1122a:	a3 83       	std	Z+3, r26	; 0x03
   1122c:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
#endif
                    ch |= TIMEOUT_FLAG;
   11230:	2e 85       	ldd	r18, Y+14	; 0x0e
   11232:	3f 85       	ldd	r19, Y+15	; 0x0f
   11234:	30 64       	ori	r19, 0x40	; 64
   11236:	3f 87       	std	Y+15, r19	; 0x0f
   11238:	2e 87       	std	Y+14, r18	; 0x0e
                }
                break;

            case GPIB_TX_PUT_DATA:

                if(ch & EOI_FLAG)
   1123a:	b5 c0       	rjmp	.+362    	; 0x113a6 <gpib_write_byte+0x2b0>
   1123c:	8e 85       	ldd	r24, Y+14	; 0x0e
   1123e:	9f 85       	ldd	r25, Y+15	; 0x0f
   11240:	90 ff       	sbrs	r25, 0
                    GPIB_IO_LOW(EOI);
   11242:	03 c0       	rjmp	.+6      	; 0x1124a <gpib_write_byte+0x154>
   11244:	28 98       	cbi	0x05, 0	; 5
   11246:	20 9a       	sbi	0x04, 0	; 4
                else
                    GPIB_PIN_FLOAT_UP(EOI);
   11248:	01 c0       	rjmp	.+2      	; 0x1124c <gpib_write_byte+0x156>

                GPIB_BUS_WR((ch & 0xff) ^ 0xff);  // Write Data inverted
   1124a:	20 98       	cbi	0x04, 0	; 4
   1124c:	8f ef       	ldi	r24, 0xFF	; 255
   1124e:	81 b9       	out	0x01, r24	; 1
   11250:	8e 85       	ldd	r24, Y+14	; 0x0e
   11252:	80 95       	com	r24
#if BOARD == 2
				// Switch to Tristate mode to soeed up Write
                GPIB_IO_HI(PE); 
   11254:	82 b9       	out	0x02, r24	; 2
   11256:	43 9a       	sbi	0x08, 3	; 8
   11258:	3b 9a       	sbi	0x07, 3	; 7
   1125a:	9d e0       	ldi	r25, 0x0D	; 13
   1125c:	9a 95       	dec	r25
#endif
                GPIB_BUS_SETTLE();                // Let Data BUS settle

                gpib_timeout_set(HTIMEOUT);
   1125e:	f1 f7       	brne	.-4      	; 0x1125c <gpib_write_byte+0x166>
   11260:	00 00       	nop
   11262:	64 ef       	ldi	r22, 0xF4	; 244
   11264:	71 e0       	ldi	r23, 0x01	; 1
   11266:	80 e0       	ldi	r24, 0x00	; 0
   11268:	90 e0       	ldi	r25, 0x00	; 0
                tx_state = GPIB_TX_SET_DAV_LOW;
   1126a:	e3 dd       	rcall	.-1082   	; 0x10e32 <gpib_timeout_set>
                break;


            case GPIB_TX_SET_DAV_LOW:
                GPIB_IO_LOW(DAV);
   1126c:	13 e0       	ldi	r17, 0x03	; 3
                gpib_timeout_set(HTIMEOUT);
   1126e:	7c cf       	rjmp	.-264    	; 0x11168 <gpib_write_byte+0x72>
   11270:	29 98       	cbi	0x05, 1	; 5
   11272:	21 9a       	sbi	0x04, 1	; 4
   11274:	64 ef       	ldi	r22, 0xF4	; 244
   11276:	71 e0       	ldi	r23, 0x01	; 1
   11278:	80 e0       	ldi	r24, 0x00	; 0
                tx_state = GPIB_TX_WAIT_FOR_NRFD_LOW;
                break;

            ///@brief first device is ready
            case GPIB_TX_WAIT_FOR_NRFD_LOW:
                if (GPIB_PIN_TST(NRFD) == 0)
   1127a:	90 e0       	ldi	r25, 0x00	; 0
   1127c:	da dd       	rcall	.-1100   	; 0x10e32 <gpib_timeout_set>
                {
                    gpib_timeout_set(HTIMEOUT);
   1127e:	14 e0       	ldi	r17, 0x04	; 4
   11280:	73 cf       	rjmp	.-282    	; 0x11168 <gpib_write_byte+0x72>
   11282:	4a 99       	sbic	0x09, 2	; 9
   11284:	07 c0       	rjmp	.+14     	; 0x11294 <gpib_write_byte+0x19e>
   11286:	64 ef       	ldi	r22, 0xF4	; 244
   11288:	71 e0       	ldi	r23, 0x01	; 1
                    tx_state = GPIB_TX_WAIT_FOR_NDAC_HI;
   1128a:	80 e0       	ldi	r24, 0x00	; 0
                    break;
   1128c:	90 e0       	ldi	r25, 0x00	; 0
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   1128e:	d1 dd       	rcall	.-1118   	; 0x10e32 <gpib_timeout_set>
   11290:	15 e0       	ldi	r17, 0x05	; 5
                {
                    gpib_timeout_set(HTIMEOUT);
                    tx_state = GPIB_TX_WAIT_FOR_NDAC_HI;
                    break;
                }
                if (gpib_timeout_test())
   11292:	6a cf       	rjmp	.-300    	; 0x11168 <gpib_write_byte+0x72>
   11294:	80 91 7f 1c 	lds	r24, 0x1C7F	; 0x801c7f <gpib_timer+0x8>
                {
                    ch |= TIMEOUT_FLAG;
   11298:	88 23       	and	r24, r24
   1129a:	09 f4       	brne	.+2      	; 0x1129e <gpib_write_byte+0x1a8>
   1129c:	65 cf       	rjmp	.-310    	; 0x11168 <gpib_write_byte+0x72>
   1129e:	ee 85       	ldd	r30, Y+14	; 0x0e
   112a0:	ff 85       	ldd	r31, Y+15	; 0x0f
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
   112a2:	f0 64       	ori	r31, 0x40	; 64
   112a4:	ff 87       	std	Y+15, r31	; 0x0f
   112a6:	ee 87       	std	Y+14, r30	; 0x0e
   112a8:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   112ac:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   112b0:	85 70       	andi	r24, 0x05	; 5
   112b2:	99 27       	eor	r25, r25
                        printf("<BUS waiting for NRFD==0>\n");
   112b4:	89 2b       	or	r24, r25
   112b6:	09 f4       	brne	.+2      	; 0x112ba <gpib_write_byte+0x1c4>
   112b8:	76 c0       	rjmp	.+236    	; 0x113a6 <gpib_write_byte+0x2b0>
   112ba:	ed b7       	in	r30, 0x3d	; 61
   112bc:	fe b7       	in	r31, 0x3e	; 62
   112be:	21 82       	std	Z+1, r2	; 0x01
                }
                break;

            ///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)         // Byte byte accepted
   112c0:	32 82       	std	Z+2, r3	; 0x02
   112c2:	43 82       	std	Z+3, r4	; 0x03
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   112c4:	43 c0       	rjmp	.+134    	; 0x1134c <gpib_write_byte+0x256>
   112c6:	4b 99       	sbic	0x09, 3	; 9
                if(GPIB_PIN_TST(NDAC) == 1)         // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
                    break;
                }
                if (gpib_timeout_test())
   112c8:	6a c0       	rjmp	.+212    	; 0x1139e <gpib_write_byte+0x2a8>
   112ca:	80 91 7f 1c 	lds	r24, 0x1C7F	; 0x801c7f <gpib_timer+0x8>
                {
                    ch |= TIMEOUT_FLAG;
   112ce:	88 23       	and	r24, r24
   112d0:	09 f4       	brne	.+2      	; 0x112d4 <gpib_write_byte+0x1de>
   112d2:	4a cf       	rjmp	.-364    	; 0x11168 <gpib_write_byte+0x72>
   112d4:	2e 85       	ldd	r18, Y+14	; 0x0e
   112d6:	3f 85       	ldd	r19, Y+15	; 0x0f
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
   112d8:	30 64       	ori	r19, 0x40	; 64
   112da:	3f 87       	std	Y+15, r19	; 0x0f
   112dc:	2e 87       	std	Y+14, r18	; 0x0e
   112de:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   112e2:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   112e6:	85 70       	andi	r24, 0x05	; 5
   112e8:	99 27       	eor	r25, r25
                        printf("<BUS waiting for NDAC==1>\n");
   112ea:	89 2b       	or	r24, r25
   112ec:	09 f4       	brne	.+2      	; 0x112f0 <gpib_write_byte+0x1fa>
   112ee:	5b c0       	rjmp	.+182    	; 0x113a6 <gpib_write_byte+0x2b0>
   112f0:	ed b7       	in	r30, 0x3d	; 61
   112f2:	fe b7       	in	r31, 0x3e	; 62
                }
                break;

            ///@release BUS
            case GPIB_TX_SET_DAV_HI:
                GPIB_PIN_FLOAT_UP(DAV);
   112f4:	61 82       	std	Z+1, r6	; 0x01
   112f6:	72 82       	std	Z+2, r7	; 0x02
   112f8:	83 82       	std	Z+3, r8	; 0x03
   112fa:	28 c0       	rjmp	.+80     	; 0x1134c <gpib_write_byte+0x256>
				GPIB_BUS_SETTLE();			// give some time

				gpib_bus_read_init(0);		// Free BUS, NOT busy
   112fc:	21 98       	cbi	0x04, 1	; 4
   112fe:	fd e0       	ldi	r31, 0x0D	; 13
   11300:	fa 95       	dec	r31
   11302:	f1 f7       	brne	.-4      	; 0x11300 <gpib_write_byte+0x20a>

                gpib_timeout_set(HTIMEOUT);
   11304:	00 00       	nop
   11306:	80 e0       	ldi	r24, 0x00	; 0
   11308:	90 e0       	ldi	r25, 0x00	; 0
   1130a:	9d dd       	rcall	.-1222   	; 0x10e46 <gpib_bus_read_init>
   1130c:	64 ef       	ldi	r22, 0xF4	; 244
   1130e:	71 e0       	ldi	r23, 0x01	; 1
                tx_state = GPIB_TX_WAIT_FOR_DAV_HI;
   11310:	80 e0       	ldi	r24, 0x00	; 0
                break;
   11312:	90 e0       	ldi	r25, 0x00	; 0

			/// We are in read mode now
            ///@wait for DAV to finish float HI - finishing floating HI
            case GPIB_TX_WAIT_FOR_DAV_HI:
                if(GPIO_PIN_TST(DAV) == 1)
   11314:	8e dd       	rcall	.-1252   	; 0x10e32 <gpib_timeout_set>
   11316:	17 e0       	ldi	r17, 0x07	; 7
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11318:	27 cf       	rjmp	.-434    	; 0x11168 <gpib_write_byte+0x72>
   1131a:	19 99       	sbic	0x03, 1	; 3
                if(GPIO_PIN_TST(DAV) == 1)
                {
                    tx_state = GPIB_TX_FINISH;
                    break;
                }
                if (gpib_timeout_test())
   1131c:	42 c0       	rjmp	.+132    	; 0x113a2 <gpib_write_byte+0x2ac>
   1131e:	80 91 7f 1c 	lds	r24, 0x1C7F	; 0x801c7f <gpib_timer+0x8>
                {
                    ch |= TIMEOUT_FLAG;
   11322:	88 23       	and	r24, r24
   11324:	09 f4       	brne	.+2      	; 0x11328 <gpib_write_byte+0x232>
   11326:	20 cf       	rjmp	.-448    	; 0x11168 <gpib_write_byte+0x72>
   11328:	2e 85       	ldd	r18, Y+14	; 0x0e
   1132a:	3f 85       	ldd	r19, Y+15	; 0x0f
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
   1132c:	30 64       	ori	r19, 0x40	; 64
   1132e:	3f 87       	std	Y+15, r19	; 0x0f
   11330:	2e 87       	std	Y+14, r18	; 0x0e
   11332:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   11336:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1133a:	85 70       	andi	r24, 0x05	; 5
                        printf("<BUS waiting for DAV==1>\n");
   1133c:	99 27       	eor	r25, r25
   1133e:	89 2b       	or	r24, r25
   11340:	91 f1       	breq	.+100    	; 0x113a6 <gpib_write_byte+0x2b0>
   11342:	ed b7       	in	r30, 0x3d	; 61
   11344:	fe b7       	in	r31, 0x3e	; 62
   11346:	c1 82       	std	Z+1, r12	; 0x01
   11348:	d2 82       	std	Z+2, r13	; 0x02
   1134a:	e3 82       	std	Z+3, r14	; 0x03
                tx_state = GPIB_TX_DONE;
                break;

            case GPIB_TX_ERROR:
#if SDEBUG
                if(debuglevel & (1+4))
   1134c:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   11350:	2a c0       	rjmp	.+84     	; 0x113a6 <gpib_write_byte+0x2b0>
   11352:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   11356:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1135a:	85 70       	andi	r24, 0x05	; 5
                    printf("<NRFD=%d,NDAV=%d>\n", GPIB_PIN_TST(NRFD),GPIB_PIN_TST(NDAC));
   1135c:	99 27       	eor	r25, r25
   1135e:	89 2b       	or	r24, r25
   11360:	b1 f0       	breq	.+44     	; 0x1138e <gpib_write_byte+0x298>
   11362:	89 b1       	in	r24, 0x09	; 9
   11364:	99 b1       	in	r25, 0x09	; 9
   11366:	93 fb       	bst	r25, 3
   11368:	99 27       	eor	r25, r25
   1136a:	90 f9       	bld	r25, 0
   1136c:	ed b7       	in	r30, 0x3d	; 61
   1136e:	fe b7       	in	r31, 0x3e	; 62
   11370:	96 83       	std	Z+6, r25	; 0x06
   11372:	17 82       	std	Z+7, r1	; 0x07
   11374:	82 fb       	bst	r24, 2
   11376:	88 27       	eor	r24, r24
   11378:	80 f9       	bld	r24, 0
   1137a:	84 83       	std	Z+4, r24	; 0x04
   1137c:	15 82       	std	Z+5, r1	; 0x05
   1137e:	86 e3       	ldi	r24, 0x36	; 54
   11380:	9f e0       	ldi	r25, 0x0F	; 15
   11382:	a0 e0       	ldi	r26, 0x00	; 0
   11384:	81 83       	std	Z+1, r24	; 0x01
#endif
// Free BUS, BUSY on error
				gpib_bus_read_init(1);		
   11386:	92 83       	std	Z+2, r25	; 0x02
   11388:	a3 83       	std	Z+3, r26	; 0x03
   1138a:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
                tx_state = GPIB_TX_DONE;
                break;
   1138e:	81 e0       	ldi	r24, 0x01	; 1
	// GPIB_IO_LOW(PE);			// BUS OC PULLUP

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);

    while(tx_state != GPIB_TX_DONE )
   11390:	90 e0       	ldi	r25, 0x00	; 0
   11392:	59 dd       	rcall	.-1358   	; 0x10e46 <gpib_bus_read_init>
   11394:	0a c0       	rjmp	.+20     	; 0x113aa <gpib_write_byte+0x2b4>
   11396:	1a 30       	cpi	r17, 0x0A	; 10

            ///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)         // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
   11398:	09 f0       	breq	.+2      	; 0x1139c <gpib_write_byte+0x2a6>
   1139a:	e6 ce       	rjmp	.-564    	; 0x11168 <gpib_write_byte+0x72>
			/// We are in read mode now
            ///@wait for DAV to finish float HI - finishing floating HI
            case GPIB_TX_WAIT_FOR_DAV_HI:
                if(GPIO_PIN_TST(DAV) == 1)
                {
                    tx_state = GPIB_TX_FINISH;
   1139c:	06 c0       	rjmp	.+12     	; 0x113aa <gpib_write_byte+0x2b4>
   1139e:	16 e0       	ldi	r17, 0x06	; 6
                    break;
                }
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
   113a0:	e3 ce       	rjmp	.-570    	; 0x11168 <gpib_write_byte+0x72>
   113a2:	18 e0       	ldi	r17, 0x08	; 8
            case GPIB_TX_DONE:
                break;
        }
    }
    return(ch);
}
   113a4:	e1 ce       	rjmp	.-574    	; 0x11168 <gpib_write_byte+0x72>
   113a6:	19 e0       	ldi	r17, 0x09	; 9
   113a8:	df ce       	rjmp	.-578    	; 0x11168 <gpib_write_byte+0x72>
   113aa:	8e 85       	ldd	r24, Y+14	; 0x0e
   113ac:	9f 85       	ldd	r25, Y+15	; 0x0f
   113ae:	2f 96       	adiw	r28, 0x0f	; 15
   113b0:	0f b6       	in	r0, 0x3f	; 63
   113b2:	f8 94       	cli
   113b4:	de bf       	out	0x3e, r29	; 62
   113b6:	0f be       	out	0x3f, r0	; 63
   113b8:	cd bf       	out	0x3d, r28	; 61
   113ba:	df 91       	pop	r29
   113bc:	cf 91       	pop	r28
   113be:	1f 91       	pop	r17
   113c0:	ef 90       	pop	r14
   113c2:	df 90       	pop	r13
   113c4:	cf 90       	pop	r12
   113c6:	8f 90       	pop	r8
   113c8:	7f 90       	pop	r7
   113ca:	6f 90       	pop	r6
   113cc:	4f 90       	pop	r4
   113ce:	3f 90       	pop	r3
   113d0:	2f 90       	pop	r2
   113d2:	08 95       	ret

000113d4 <gpib_decode_header>:
/// @see: gpib.h _FLAGS defines for a full list is control lines we track
/// @see: gpib_trace()
/// @return void
///@param[in] fo: FILE pointer or "stdout"
void gpib_decode_header( FILE *fo)
{
   113d4:	cf 93       	push	r28
   113d6:	df 93       	push	r29
   113d8:	ec 01       	movw	r28, r24
    if(fo == NULL)
   113da:	89 2b       	or	r24, r25
   113dc:	21 f4       	brne	.+8      	; 0x113e6 <gpib_decode_header+0x12>
        fo = stdout;
   113de:	c0 91 59 1c 	lds	r28, 0x1C59	; 0x801c59 <__iob+0x2>
   113e2:	d0 91 5a 1c 	lds	r29, 0x1C5A	; 0x801c5a <__iob+0x3>
        
    fprintf(fo,"===========================================\n");
   113e6:	be 01       	movw	r22, r28
   113e8:	8f e1       	ldi	r24, 0x1F	; 31
   113ea:	9b e0       	ldi	r25, 0x0B	; 11
   113ec:	0e 94 10 78 	call	0xf020	; 0xf020 <fputs>
    fprintf(fo,"GPIB bus state\n");
   113f0:	be 01       	movw	r22, r28
   113f2:	8c e4       	ldi	r24, 0x4C	; 76
   113f4:	9b e0       	ldi	r25, 0x0B	; 11
   113f6:	0e 94 10 78 	call	0xf020	; 0xf020 <fputs>
    fprintf(fo,"HH . AESRPITB gpib\n");
   113fa:	be 01       	movw	r22, r28
   113fc:	8c e5       	ldi	r24, 0x5C	; 92
   113fe:	9b e0       	ldi	r25, 0x0B	; 11
   11400:	0e 94 10 78 	call	0xf020	; 0xf020 <fputs>
    fprintf(fo,"HH = Hex value of Command or Data\n");
   11404:	be 01       	movw	r22, r28
   11406:	80 e7       	ldi	r24, 0x70	; 112
   11408:	9b e0       	ldi	r25, 0x0B	; 11
   1140a:	0e 94 10 78 	call	0xf020	; 0xf020 <fputs>
    fprintf(fo,"   . = ASCII of XX only for 0x20 .. 0x7e\n");
   1140e:	be 01       	movw	r22, r28
   11410:	83 e9       	ldi	r24, 0x93	; 147
   11412:	9b e0       	ldi	r25, 0x0B	; 11
   11414:	0e 94 10 78 	call	0xf020	; 0xf020 <fputs>
    fprintf(fo,"     A = ATN\n");
   11418:	be 01       	movw	r22, r28
   1141a:	8d eb       	ldi	r24, 0xBD	; 189
   1141c:	9b e0       	ldi	r25, 0x0B	; 11
   1141e:	0e 94 10 78 	call	0xf020	; 0xf020 <fputs>
    fprintf(fo,"      E = EOI\n");
   11422:	be 01       	movw	r22, r28
   11424:	8b ec       	ldi	r24, 0xCB	; 203
   11426:	9b e0       	ldi	r25, 0x0B	; 11
   11428:	0e 94 10 78 	call	0xf020	; 0xf020 <fputs>
    fprintf(fo,"       S = SRQ\n");
   1142c:	be 01       	movw	r22, r28
   1142e:	8a ed       	ldi	r24, 0xDA	; 218
   11430:	9b e0       	ldi	r25, 0x0B	; 11
   11432:	0e 94 10 78 	call	0xf020	; 0xf020 <fputs>
    fprintf(fo,"        R = REN\n");
   11436:	be 01       	movw	r22, r28
   11438:	8a ee       	ldi	r24, 0xEA	; 234
   1143a:	9b e0       	ldi	r25, 0x0B	; 11
   1143c:	0e 94 10 78 	call	0xf020	; 0xf020 <fputs>
    fprintf(fo,"         I = IFC\n");
   11440:	be 01       	movw	r22, r28
   11442:	8b ef       	ldi	r24, 0xFB	; 251
   11444:	9b e0       	ldi	r25, 0x0B	; 11
   11446:	0e 94 10 78 	call	0xf020	; 0xf020 <fputs>
    fprintf(fo,"          P = Parallel Poll seen\n");
   1144a:	be 01       	movw	r22, r28
   1144c:	8d e0       	ldi	r24, 0x0D	; 13
   1144e:	9c e0       	ldi	r25, 0x0C	; 12
   11450:	0e 94 10 78 	call	0xf020	; 0xf020 <fputs>
    fprintf(fo,"           T = TIMEOUT\n");
   11454:	be 01       	movw	r22, r28
   11456:	8f e2       	ldi	r24, 0x2F	; 47
   11458:	9c e0       	ldi	r25, 0x0C	; 12
   1145a:	0e 94 10 78 	call	0xf020	; 0xf020 <fputs>
    fprintf(fo,"            B = BUS_ERROR\n");
   1145e:	be 01       	movw	r22, r28
   11460:	87 e4       	ldi	r24, 0x47	; 71
   11462:	9c e0       	ldi	r25, 0x0C	; 12
   11464:	0e 94 10 78 	call	0xf020	; 0xf020 <fputs>
    fprintf(fo,"              GPIB commands\n");
   11468:	be 01       	movw	r22, r28
   1146a:	82 e6       	ldi	r24, 0x62	; 98
   1146c:	9c e0       	ldi	r25, 0x0C	; 12
   1146e:	0e 94 10 78 	call	0xf020	; 0xf020 <fputs>
}
   11472:	df 91       	pop	r29
   11474:	cf 91       	pop	r28
   11476:	08 95       	ret

00011478 <gpib_trace_display>:
/// @return  void
/// Note the bits we can read depends on what hardware verions we have
/// V2 hardware can only read status bits based on GPIB control buffer direction
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
   11478:	a9 e8       	ldi	r26, 0x89	; 137
   1147a:	b0 e0       	ldi	r27, 0x00	; 0
   1147c:	e2 e4       	ldi	r30, 0x42	; 66
   1147e:	fa e8       	ldi	r31, 0x8A	; 138
   11480:	0c 94 1f e5 	jmp	0x1ca3e	; 0x1ca3e <__prologue_saves__+0xc>
   11484:	8c 01       	movw	r16, r24
   11486:	5b 01       	movw	r10, r22
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
    extern FILE *gpib_log_fp;

    str[0] = 0;
   11488:	1a 86       	std	Y+10, r1	; 0x0a
   1148a:	4c 01       	movw	r8, r24
   1148c:	88 24       	eor	r8, r8
   1148e:	44 e0       	ldi	r20, 0x04	; 4
   11490:	94 22       	and	r9, r20
   11492:	ce 01       	movw	r24, r28
   11494:	0a 96       	adiw	r24, 0x0a	; 10
   11496:	7c 01       	movw	r14, r24

    // Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
   11498:	62 30       	cpi	r22, 0x02	; 2
   1149a:	71 05       	cpc	r23, r1
   1149c:	e8 f4       	brcc	.+58     	; 0x114d8 <gpib_trace_display+0x60>
    {
        uint8_t printable = ' ';                          // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   1149e:	81 14       	cp	r8, r1
   114a0:	91 04       	cpc	r9, r1
   114a2:	29 f4       	brne	.+10     	; 0x114ae <gpib_trace_display+0x36>
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
   114a4:	80 2f       	mov	r24, r16

    // Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                          // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   114a6:	90 ee       	ldi	r25, 0xE0	; 224
   114a8:	90 0f       	add	r25, r16
   114aa:	9f 35       	cpi	r25, 0x5F	; 95
   114ac:	08 f0       	brcs	.+2      	; 0x114b0 <gpib_trace_display+0x38>
    str[0] = 0;

    // Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                          // Data
   114ae:	80 e2       	ldi	r24, 0x20	; 32
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
            printable = bus;
        sprintf(str, "%02X %c ", (int)bus & 0xff, (int)printable);
   114b0:	90 e0       	ldi	r25, 0x00	; 0
   114b2:	ed b7       	in	r30, 0x3d	; 61
   114b4:	fe b7       	in	r31, 0x3e	; 62
   114b6:	91 87       	std	Z+9, r25	; 0x09
   114b8:	80 87       	std	Z+8, r24	; 0x08
   114ba:	c8 01       	movw	r24, r16
   114bc:	99 27       	eor	r25, r25
   114be:	97 83       	std	Z+7, r25	; 0x07
   114c0:	86 83       	std	Z+6, r24	; 0x06
   114c2:	8d e2       	ldi	r24, 0x2D	; 45
   114c4:	9f e0       	ldi	r25, 0x0F	; 15
   114c6:	a0 e0       	ldi	r26, 0x00	; 0
   114c8:	83 83       	std	Z+3, r24	; 0x03
   114ca:	94 83       	std	Z+4, r25	; 0x04
   114cc:	a5 83       	std	Z+5, r26	; 0x05
   114ce:	f2 82       	std	Z+2, r15	; 0x02
   114d0:	e1 82       	std	Z+1, r14	; 0x01
   114d2:	0e 94 d9 47 	call	0x8fb2	; 0x8fb2 <sprintf_P>
   114d6:	0c c0       	rjmp	.+24     	; 0x114f0 <gpib_trace_display+0x78>
    }
    else
    {
        sprintf(str, "     ");
   114d8:	87 e2       	ldi	r24, 0x27	; 39
   114da:	9f e0       	ldi	r25, 0x0F	; 15
   114dc:	a0 e0       	ldi	r26, 0x00	; 0
   114de:	ed b7       	in	r30, 0x3d	; 61
   114e0:	fe b7       	in	r31, 0x3e	; 62
   114e2:	83 83       	std	Z+3, r24	; 0x03
   114e4:	94 83       	std	Z+4, r25	; 0x04
   114e6:	a5 83       	std	Z+5, r26	; 0x05
   114e8:	f2 82       	std	Z+2, r15	; 0x02
   114ea:	e1 82       	std	Z+1, r14	; 0x01
   114ec:	0e 94 d9 47 	call	0x8fb2	; 0x8fb2 <sprintf_P>
    }

    tmp = str + strlen(str);
   114f0:	f7 01       	movw	r30, r14
   114f2:	01 90       	ld	r0, Z+
   114f4:	00 20       	and	r0, r0
   114f6:	e9 f7       	brne	.-6      	; 0x114f2 <gpib_trace_display+0x7a>
   114f8:	31 97       	sbiw	r30, 0x01	; 1
   114fa:	cf 01       	movw	r24, r30
   114fc:	01 96       	adiw	r24, 0x01	; 1

    if(status & ATN_FLAG)
   114fe:	81 14       	cp	r8, r1
   11500:	91 04       	cpc	r9, r1
   11502:	11 f0       	breq	.+4      	; 0x11508 <gpib_trace_display+0x90>
        *tmp++ = 'A';
   11504:	21 e4       	ldi	r18, 0x41	; 65
   11506:	01 c0       	rjmp	.+2      	; 0x1150a <gpib_trace_display+0x92>
    else
        *tmp++ = '-';
   11508:	2d e2       	ldi	r18, 0x2D	; 45
   1150a:	20 83       	st	Z, r18
   1150c:	dc 01       	movw	r26, r24
   1150e:	11 96       	adiw	r26, 0x01	; 1

    if(status & EOI_FLAG)
   11510:	10 ff       	sbrs	r17, 0
   11512:	02 c0       	rjmp	.+4      	; 0x11518 <gpib_trace_display+0xa0>
        *tmp++ = 'E';
   11514:	25 e4       	ldi	r18, 0x45	; 69
   11516:	01 c0       	rjmp	.+2      	; 0x1151a <gpib_trace_display+0xa2>
    else
        *tmp++ = '-';
   11518:	2d e2       	ldi	r18, 0x2D	; 45
   1151a:	fc 01       	movw	r30, r24
   1151c:	20 83       	st	Z, r18
   1151e:	fd 01       	movw	r30, r26
   11520:	31 96       	adiw	r30, 0x01	; 1

    if(status & SRQ_FLAG)
   11522:	11 ff       	sbrs	r17, 1
   11524:	02 c0       	rjmp	.+4      	; 0x1152a <gpib_trace_display+0xb2>
        *tmp++ = 'S';
   11526:	83 e5       	ldi	r24, 0x53	; 83
   11528:	01 c0       	rjmp	.+2      	; 0x1152c <gpib_trace_display+0xb4>
    else
        *tmp++ = '-';
   1152a:	8d e2       	ldi	r24, 0x2D	; 45
   1152c:	8c 93       	st	X, r24
   1152e:	df 01       	movw	r26, r30
   11530:	11 96       	adiw	r26, 0x01	; 1

    if(status & REN_FLAG)
   11532:	13 ff       	sbrs	r17, 3
   11534:	02 c0       	rjmp	.+4      	; 0x1153a <gpib_trace_display+0xc2>
        *tmp++ = 'R';
   11536:	82 e5       	ldi	r24, 0x52	; 82
   11538:	01 c0       	rjmp	.+2      	; 0x1153c <gpib_trace_display+0xc4>
    else
        *tmp++ = '-';
   1153a:	8d e2       	ldi	r24, 0x2D	; 45
   1153c:	80 83       	st	Z, r24
   1153e:	fd 01       	movw	r30, r26
   11540:	31 96       	adiw	r30, 0x01	; 1

    if(status & IFC_FLAG)
   11542:	14 ff       	sbrs	r17, 4
   11544:	02 c0       	rjmp	.+4      	; 0x1154a <gpib_trace_display+0xd2>
        *tmp++ = 'I';
   11546:	89 e4       	ldi	r24, 0x49	; 73
   11548:	01 c0       	rjmp	.+2      	; 0x1154c <gpib_trace_display+0xd4>
    else
        *tmp++ = '-';
   1154a:	8d e2       	ldi	r24, 0x2D	; 45
   1154c:	8c 93       	st	X, r24

    if(trace_state == TRACE_DISABLE)
   1154e:	a1 14       	cp	r10, r1
   11550:	b1 04       	cpc	r11, r1
   11552:	d1 f4       	brne	.+52     	; 0x11588 <gpib_trace_display+0x110>
   11554:	df 01       	movw	r26, r30
   11556:	11 96       	adiw	r26, 0x01	; 1
    {
        if(status & PP_FLAG)
   11558:	15 ff       	sbrs	r17, 5
   1155a:	02 c0       	rjmp	.+4      	; 0x11560 <gpib_trace_display+0xe8>
            *tmp++ = 'P';
   1155c:	80 e5       	ldi	r24, 0x50	; 80
   1155e:	01 c0       	rjmp	.+2      	; 0x11562 <gpib_trace_display+0xea>
        else
            *tmp++ = '-';
   11560:	8d e2       	ldi	r24, 0x2D	; 45
   11562:	80 83       	st	Z, r24
   11564:	fd 01       	movw	r30, r26
   11566:	31 96       	adiw	r30, 0x01	; 1
        if(status & TIMEOUT_FLAG)
   11568:	16 ff       	sbrs	r17, 6
   1156a:	02 c0       	rjmp	.+4      	; 0x11570 <gpib_trace_display+0xf8>
            *tmp++ = 'T';
   1156c:	84 e5       	ldi	r24, 0x54	; 84
   1156e:	01 c0       	rjmp	.+2      	; 0x11572 <gpib_trace_display+0xfa>
        else
            *tmp++ = '-';
   11570:	8d e2       	ldi	r24, 0x2D	; 45
   11572:	8c 93       	st	X, r24
   11574:	cf 01       	movw	r24, r30
   11576:	01 96       	adiw	r24, 0x01	; 1
        if(status & BUS_ERROR_FLAG)
            *tmp++ = 'B';
   11578:	6c 01       	movw	r12, r24
            *tmp++ = '-';
        if(status & TIMEOUT_FLAG)
            *tmp++ = 'T';
        else
            *tmp++ = '-';
        if(status & BUS_ERROR_FLAG)
   1157a:	17 ff       	sbrs	r17, 7
   1157c:	02 c0       	rjmp	.+4      	; 0x11582 <gpib_trace_display+0x10a>
            *tmp++ = 'B';
   1157e:	82 e4       	ldi	r24, 0x42	; 66
   11580:	01 c0       	rjmp	.+2      	; 0x11584 <gpib_trace_display+0x10c>
        else
            *tmp++ = '-';
   11582:	8d e2       	ldi	r24, 0x2D	; 45
   11584:	80 83       	st	Z, r24
   11586:	08 c0       	rjmp	.+16     	; 0x11598 <gpib_trace_display+0x120>
    }
    else
    {
        // not used when tracing
        *tmp++ = '-';
   11588:	8d e2       	ldi	r24, 0x2D	; 45
   1158a:	80 83       	st	Z, r24
        *tmp++ = '-';
   1158c:	81 83       	std	Z+1, r24	; 0x01
        *tmp++ = '-';
   1158e:	6f 01       	movw	r12, r30
   11590:	43 e0       	ldi	r20, 0x03	; 3
   11592:	c4 0e       	add	r12, r20
   11594:	d1 1c       	adc	r13, r1
   11596:	82 83       	std	Z+2, r24	; 0x02
    }
    *tmp = 0;
   11598:	f6 01       	movw	r30, r12
   1159a:	10 82       	st	Z, r1

    if(trace_state == TRACE_READ || trace_state == TRACE_BUS)
   1159c:	f1 e0       	ldi	r31, 0x01	; 1
   1159e:	af 1a       	sub	r10, r31
   115a0:	b1 08       	sbc	r11, r1
   115a2:	42 e0       	ldi	r20, 0x02	; 2
   115a4:	a4 16       	cp	r10, r20
   115a6:	b1 04       	cpc	r11, r1
   115a8:	f0 f4       	brcc	.+60     	; 0x115e6 <gpib_trace_display+0x16e>
    {
        if(status & DAV_FLAG)
   115aa:	15 ff       	sbrs	r17, 5
   115ac:	03 c0       	rjmp	.+6      	; 0x115b4 <gpib_trace_display+0x13c>
            strcat(str,"  DAV");
   115ae:	6f e7       	ldi	r22, 0x7F	; 127
   115b0:	7c e0       	ldi	r23, 0x0C	; 12
   115b2:	02 c0       	rjmp	.+4      	; 0x115b8 <gpib_trace_display+0x140>
        else
            strcat(str,"     ");
   115b4:	63 e8       	ldi	r22, 0x83	; 131
   115b6:	73 e0       	ldi	r23, 0x03	; 3
   115b8:	c7 01       	movw	r24, r14
   115ba:	0e 94 06 33 	call	0x660c	; 0x660c <strcat>
        if(status & NRFD_FLAG)
   115be:	16 ff       	sbrs	r17, 6
   115c0:	03 c0       	rjmp	.+6      	; 0x115c8 <gpib_trace_display+0x150>
            strcat(str," NRFD");
   115c2:	65 e8       	ldi	r22, 0x85	; 133
   115c4:	7c e0       	ldi	r23, 0x0C	; 12
   115c6:	02 c0       	rjmp	.+4      	; 0x115cc <gpib_trace_display+0x154>
        else
            strcat(str,"     ");
   115c8:	63 e8       	ldi	r22, 0x83	; 131
   115ca:	73 e0       	ldi	r23, 0x03	; 3
   115cc:	c7 01       	movw	r24, r14
   115ce:	0e 94 06 33 	call	0x660c	; 0x660c <strcat>
        if(status & NDAC_FLAG)
   115d2:	17 ff       	sbrs	r17, 7
   115d4:	03 c0       	rjmp	.+6      	; 0x115dc <gpib_trace_display+0x164>
            strcat(str," NDAC");
   115d6:	6b e8       	ldi	r22, 0x8B	; 139
   115d8:	7c e0       	ldi	r23, 0x0C	; 12
   115da:	02 c0       	rjmp	.+4      	; 0x115e0 <gpib_trace_display+0x168>
        else
            strcat(str,"     ");
   115dc:	63 e8       	ldi	r22, 0x83	; 131
   115de:	73 e0       	ldi	r23, 0x03	; 3
   115e0:	c7 01       	movw	r24, r14
   115e2:	0e 94 06 33 	call	0x660c	; 0x660c <strcat>
    }

    if( (status & ATN_FLAG) )
   115e6:	81 14       	cp	r8, r1
   115e8:	91 04       	cpc	r9, r1
   115ea:	09 f4       	brne	.+2      	; 0x115ee <gpib_trace_display+0x176>
   115ec:	5a c0       	rjmp	.+180    	; 0x116a2 <gpib_trace_display+0x22a>
    {
        int i;
        int cmd = status & CMD_MASK;
   115ee:	c8 01       	movw	r24, r16
   115f0:	8f 77       	andi	r24, 0x7F	; 127
   115f2:	99 27       	eor	r25, r25
        if(cmd >= 0x020 && cmd <= 0x3e)
   115f4:	9c 01       	movw	r18, r24
   115f6:	20 52       	subi	r18, 0x20	; 32
   115f8:	31 09       	sbc	r19, r1
   115fa:	2f 31       	cpi	r18, 0x1F	; 31
   115fc:	31 05       	cpc	r19, r1
   115fe:	48 f4       	brcc	.+18     	; 0x11612 <gpib_trace_display+0x19a>
            sprintf(tmp," MLA %02Xh", cmd & 0x1f);
   11600:	0f 71       	andi	r16, 0x1F	; 31
   11602:	11 27       	eor	r17, r17
   11604:	ed b7       	in	r30, 0x3d	; 61
   11606:	fe b7       	in	r31, 0x3e	; 62
   11608:	17 83       	std	Z+7, r17	; 0x07
   1160a:	06 83       	std	Z+6, r16	; 0x06
   1160c:	8c e1       	ldi	r24, 0x1C	; 28
   1160e:	9f e0       	ldi	r25, 0x0F	; 15
   11610:	0e c0       	rjmp	.+28     	; 0x1162e <gpib_trace_display+0x1b6>
        else if(cmd >= 0x040 && cmd <= 0x4e)
   11612:	9c 01       	movw	r18, r24
   11614:	20 54       	subi	r18, 0x40	; 64
   11616:	31 09       	sbc	r19, r1
   11618:	2f 30       	cpi	r18, 0x0F	; 15
   1161a:	31 05       	cpc	r19, r1
   1161c:	88 f4       	brcc	.+34     	; 0x11640 <gpib_trace_display+0x1c8>
            sprintf(tmp," MTA %02Xh", cmd & 0x1f);
   1161e:	0f 71       	andi	r16, 0x1F	; 31
   11620:	11 27       	eor	r17, r17
   11622:	ed b7       	in	r30, 0x3d	; 61
   11624:	fe b7       	in	r31, 0x3e	; 62
   11626:	17 83       	std	Z+7, r17	; 0x07
   11628:	06 83       	std	Z+6, r16	; 0x06
   1162a:	81 e1       	ldi	r24, 0x11	; 17
   1162c:	9f e0       	ldi	r25, 0x0F	; 15
   1162e:	a0 e0       	ldi	r26, 0x00	; 0
   11630:	83 83       	std	Z+3, r24	; 0x03
   11632:	94 83       	std	Z+4, r25	; 0x04
   11634:	a5 83       	std	Z+5, r26	; 0x05
   11636:	d2 82       	std	Z+2, r13	; 0x02
   11638:	c1 82       	std	Z+1, r12	; 0x01
   1163a:	0e 94 d9 47 	call	0x8fb2	; 0x8fb2 <sprintf_P>
   1163e:	31 c0       	rjmp	.+98     	; 0x116a2 <gpib_trace_display+0x22a>
        else if(cmd >= 0x060 && cmd <= 0x6f)
   11640:	9c 01       	movw	r18, r24
   11642:	20 56       	subi	r18, 0x60	; 96
   11644:	31 09       	sbc	r19, r1
   11646:	20 31       	cpi	r18, 0x10	; 16
   11648:	31 05       	cpc	r19, r1
   1164a:	28 f0       	brcs	.+10     	; 0x11656 <gpib_trace_display+0x1de>
   1164c:	ef e8       	ldi	r30, 0x8F	; 143
   1164e:	f1 e0       	ldi	r31, 0x01	; 1
   11650:	00 e0       	ldi	r16, 0x00	; 0
   11652:	10 e0       	ldi	r17, 0x00	; 0
   11654:	0b c0       	rjmp	.+22     	; 0x1166c <gpib_trace_display+0x1f4>
            sprintf(tmp," MSA %02Xh", cmd & 0x1f);
   11656:	0f 71       	andi	r16, 0x1F	; 31
   11658:	11 27       	eor	r17, r17
   1165a:	ed b7       	in	r30, 0x3d	; 61
   1165c:	fe b7       	in	r31, 0x3e	; 62
   1165e:	17 83       	std	Z+7, r17	; 0x07
   11660:	06 83       	std	Z+6, r16	; 0x06
   11662:	86 e0       	ldi	r24, 0x06	; 6
   11664:	9f e0       	ldi	r25, 0x0F	; 15
   11666:	e3 cf       	rjmp	.-58     	; 0x1162e <gpib_trace_display+0x1b6>
        else
        {
            for(i=0;gpib_tokens[i].cmd != -1;++i)
   11668:	0f 5f       	subi	r16, 0xFF	; 255
   1166a:	1f 4f       	sbci	r17, 0xFF	; 255
   1166c:	20 81       	ld	r18, Z
   1166e:	31 81       	ldd	r19, Z+1	; 0x01
   11670:	2f 3f       	cpi	r18, 0xFF	; 255
   11672:	4f ef       	ldi	r20, 0xFF	; 255
   11674:	34 07       	cpc	r19, r20
   11676:	a9 f0       	breq	.+42     	; 0x116a2 <gpib_trace_display+0x22a>
   11678:	34 96       	adiw	r30, 0x04	; 4
            {
                if(cmd == gpib_tokens[i].cmd)
   1167a:	82 17       	cp	r24, r18
   1167c:	93 07       	cpc	r25, r19
   1167e:	a1 f7       	brne	.-24     	; 0x11668 <gpib_trace_display+0x1f0>
                {
                    strcat(tmp," ");
   11680:	67 e8       	ldi	r22, 0x87	; 135
   11682:	73 e0       	ldi	r23, 0x03	; 3
   11684:	c6 01       	movw	r24, r12
   11686:	0e 94 06 33 	call	0x660c	; 0x660c <strcat>
                    strcat(tmp,gpib_tokens[i].name);
   1168a:	f8 01       	movw	r30, r16
   1168c:	ee 0f       	add	r30, r30
   1168e:	ff 1f       	adc	r31, r31
   11690:	ee 0f       	add	r30, r30
   11692:	ff 1f       	adc	r31, r31
   11694:	e1 57       	subi	r30, 0x71	; 113
   11696:	fe 4f       	sbci	r31, 0xFE	; 254
   11698:	62 81       	ldd	r22, Z+2	; 0x02
   1169a:	73 81       	ldd	r23, Z+3	; 0x03
   1169c:	c6 01       	movw	r24, r12
   1169e:	0e 94 06 33 	call	0x660c	; 0x660c <strcat>
                }
            }
        }
    }

    if(gpib_log_fp == NULL)
   116a2:	20 91 fd 18 	lds	r18, 0x18FD	; 0x8018fd <gpib_log_fp>
   116a6:	30 91 fe 18 	lds	r19, 0x18FE	; 0x8018fe <gpib_log_fp+0x1>
   116aa:	80 91 59 1c 	lds	r24, 0x1C59	; 0x801c59 <__iob+0x2>
   116ae:	90 91 5a 1c 	lds	r25, 0x1C5A	; 0x801c5a <__iob+0x3>
   116b2:	23 2b       	or	r18, r19
   116b4:	21 f4       	brne	.+8      	; 0x116be <gpib_trace_display+0x246>
        gpib_log_fp = stdout;
   116b6:	90 93 fe 18 	sts	0x18FE, r25	; 0x8018fe <gpib_log_fp+0x1>
   116ba:	80 93 fd 18 	sts	0x18FD, r24	; 0x8018fd <gpib_log_fp>

    // Echo to console unless file is the console
    if(gpib_log_fp != stdout)
   116be:	20 91 fd 18 	lds	r18, 0x18FD	; 0x8018fd <gpib_log_fp>
   116c2:	30 91 fe 18 	lds	r19, 0x18FE	; 0x8018fe <gpib_log_fp+0x1>
   116c6:	82 17       	cp	r24, r18
   116c8:	93 07       	cpc	r25, r19
   116ca:	19 f0       	breq	.+6      	; 0x116d2 <gpib_trace_display+0x25a>
        puts(str);
   116cc:	c7 01       	movw	r24, r14
   116ce:	0e 94 28 78 	call	0xf050	; 0xf050 <puts>

    // Save to file
    fprintf(gpib_log_fp,"%s\n",str);
   116d2:	ed b7       	in	r30, 0x3d	; 61
   116d4:	fe b7       	in	r31, 0x3e	; 62
   116d6:	f6 82       	std	Z+6, r15	; 0x06
   116d8:	e5 82       	std	Z+5, r14	; 0x05
   116da:	81 e9       	ldi	r24, 0x91	; 145
   116dc:	9c e0       	ldi	r25, 0x0C	; 12
   116de:	94 83       	std	Z+4, r25	; 0x04
   116e0:	83 83       	std	Z+3, r24	; 0x03
   116e2:	80 91 fd 18 	lds	r24, 0x18FD	; 0x8018fd <gpib_log_fp>
   116e6:	90 91 fe 18 	lds	r25, 0x18FE	; 0x8018fe <gpib_log_fp+0x1>
   116ea:	92 83       	std	Z+2, r25	; 0x02
   116ec:	81 83       	std	Z+1, r24	; 0x01
   116ee:	0e 94 d0 7f 	call	0xffa0	; 0xffa0 <fprintf>
}
   116f2:	c7 57       	subi	r28, 0x77	; 119
   116f4:	df 4f       	sbci	r29, 0xFF	; 255
   116f6:	ec e0       	ldi	r30, 0x0C	; 12
   116f8:	0c 94 3b e5 	jmp	0x1ca76	; 0x1ca76 <__epilogue_restores__+0xc>

000116fc <gpib_read_byte>:
///     - Error Flags:
///       - IFC_FLAG
///
/// @return (data bus, control and error status)
uint16_t gpib_read_byte(int trace)
{
   116fc:	af 92       	push	r10
   116fe:	bf 92       	push	r11
   11700:	cf 92       	push	r12
   11702:	df 92       	push	r13
   11704:	ff 92       	push	r15
   11706:	0f 93       	push	r16
   11708:	1f 93       	push	r17
   1170a:	cf 93       	push	r28
   1170c:	df 93       	push	r29

    ch = 0;
    control_last = 0;

    // If we have an unread state it has already been traced!
    if(gpib_unread_f)
   1170e:	20 91 fc 18 	lds	r18, 0x18FC	; 0x8018fc <gpib_unread_f>
   11712:	22 23       	and	r18, r18
   11714:	39 f0       	breq	.+14     	; 0x11724 <gpib_read_byte+0x28>
    {
        gpib_unread_f = 0;
   11716:	10 92 fc 18 	sts	0x18FC, r1	; 0x8018fc <gpib_unread_f>
        return(gpib_unread_data);
   1171a:	80 91 8a 1e 	lds	r24, 0x1E8A	; 0x801e8a <gpib_unread_data>
   1171e:	90 91 8b 1e 	lds	r25, 0x1E8B	; 0x801e8b <gpib_unread_data+0x1>
   11722:	b8 c0       	rjmp	.+368    	; 0x11894 <gpib_read_byte+0x198>
   11724:	6c 01       	movw	r12, r24
    }

	gpib_bus_read_init(1); // Busy until we are ready
   11726:	81 e0       	ldi	r24, 0x01	; 1
   11728:	90 e0       	ldi	r25, 0x00	; 0
   1172a:	8d db       	rcall	.-2278   	; 0x10e46 <gpib_bus_read_init>


///@brief V2 boards can NOT read all bits on the control bus at once
/// FIXME We could add a test for read/write state ??
///@brief NRFD,NDAC SRQ are outputs
    if(trace)
   1172c:	c1 14       	cp	r12, r1
   1172e:	d1 04       	cpc	r13, r1
    {
        control_last = gpib_control_pin_read();
   11730:	51 f0       	breq	.+20     	; 0x11746 <gpib_read_byte+0x4a>
   11732:	c5 dc       	rcall	.-1654   	; 0x110be <gpib_control_pin_read>
        control_last |= gpib_handshake_pin_read();
   11734:	8c 01       	movw	r16, r24
   11736:	d3 dc       	rcall	.-1626   	; 0x110de <gpib_handshake_pin_read>
   11738:	08 2b       	or	r16, r24
        gpib_trace_display(control_last, TRACE_BUS);
   1173a:	19 2b       	or	r17, r25
   1173c:	62 e0       	ldi	r22, 0x02	; 2
   1173e:	70 e0       	ldi	r23, 0x00	; 0
   11740:	c8 01       	movw	r24, r16
   11742:	9a de       	rcall	.-716    	; 0x11478 <gpib_trace_display>
    uint16_t bus, control, control_last;
    extern uint8_t gpib_unread_f;
    extern uint16_t gpib_unread_data;

    ch = 0;
    control_last = 0;
   11744:	02 c0       	rjmp	.+4      	; 0x1174a <gpib_read_byte+0x4e>
   11746:	00 e0       	ldi	r16, 0x00	; 0
        control_last |= gpib_handshake_pin_read();
        gpib_trace_display(control_last, TRACE_BUS);
    }

    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
   11748:	10 e0       	ldi	r17, 0x00	; 0
   1174a:	f1 2c       	mov	r15, r1
   1174c:	c0 e0       	ldi	r28, 0x00	; 0
    {
        if(uart_keyhit(0))
   1174e:	d0 e0       	ldi	r29, 0x00	; 0
   11750:	80 e0       	ldi	r24, 0x00	; 0
   11752:	0e 94 b1 2c 	call	0x5962	; 0x5962 <uart_keyhit>
   11756:	89 2b       	or	r24, r25
		if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

		// IFC is always in for a device
        if(GPIB_PIN_TST(IFC) == 0)
   11758:	09 f0       	breq	.+2      	; 0x1175c <gpib_read_byte+0x60>
   1175a:	78 c0       	rjmp	.+240    	; 0x1184c <gpib_read_byte+0x150>
        {
            ch |= IFC_FLAG;
   1175c:	4c 99       	sbic	0x09, 4	; 9
			gpib_bus_init();
   1175e:	03 c0       	rjmp	.+6      	; 0x11766 <gpib_read_byte+0x6a>
   11760:	d0 61       	ori	r29, 0x10	; 16
   11762:	94 db       	rcall	.-2264   	; 0x10e8c <gpib_bus_init>
            break;
        }


        switch(rx_state)
   11764:	73 c0       	rjmp	.+230    	; 0x1184c <gpib_read_byte+0x150>
   11766:	8f 2d       	mov	r24, r15
   11768:	90 e0       	ldi	r25, 0x00	; 0
   1176a:	89 30       	cpi	r24, 0x09	; 9
   1176c:	91 05       	cpc	r25, r1
   1176e:	08 f0       	brcs	.+2      	; 0x11772 <gpib_read_byte+0x76>
   11770:	51 c0       	rjmp	.+162    	; 0x11814 <gpib_read_byte+0x118>
   11772:	fc 01       	movw	r30, r24
   11774:	e9 53       	subi	r30, 0x39	; 57
   11776:	ff 4f       	sbci	r31, 0xFF	; 255
   11778:	0c 94 d5 e4 	jmp	0x1c9aa	; 0x1c9aa <__tablejump2__>
   1177c:	52 98       	cbi	0x0a, 2	; 10
   1177e:	8d e0       	ldi	r24, 0x0D	; 13
   11780:	8a 95       	dec	r24
   11782:	f1 f7       	brne	.-4      	; 0x11780 <gpib_read_byte+0x84>
        {
            case GPIB_RX_START:
                ///@brief Signal that we are ready to ready
                GPIB_PIN_FLOAT_UP(NRFD);
                GPIB_BUS_SETTLE();                // Let Data BUS settle
                rx_state = GPIB_RX_WAIT_FOR_DAV_LOW;
   11784:	00 00       	nop
   11786:	ff 24       	eor	r15, r15
   11788:	f3 94       	inc	r15
                break;

            case GPIB_RX_WAIT_FOR_DAV_LOW:
                ///@brief Wait for Ready acknowledge
                if ( GPIB_PIN_TST(DAV) == 0 )
   1178a:	7f c0       	rjmp	.+254    	; 0x1188a <gpib_read_byte+0x18e>
                    rx_state = GPIB_RX_DAV_IS_LOW;
   1178c:	19 99       	sbic	0x03, 1	; 3
                break;

// Accept Data
            case GPIB_RX_DAV_IS_LOW:
                GPIB_IO_LOW(NRFD);                // BUSY
   1178e:	7d c0       	rjmp	.+250    	; 0x1188a <gpib_read_byte+0x18e>

                ///@brief gpib_bus_read strips command parity if ATN is low at read time
                bus = gpib_bus_read();
   11790:	62 e0       	ldi	r22, 0x02	; 2
   11792:	f6 2e       	mov	r15, r22
   11794:	7a c0       	rjmp	.+244    	; 0x1188a <gpib_read_byte+0x18e>
   11796:	5a 98       	cbi	0x0b, 2	; 11
                ch |= bus;
///@brief V2 boards can NOT read all bits on the control bus at once
/// FIXME could add a test for read/write state ??
///@brief NRFD,NDAC SRQ are outputs
                control_last = gpib_control_pin_read();
   11798:	52 9a       	sbi	0x0a, 2	; 10
   1179a:	8b dc       	rcall	.-1770   	; 0x110b2 <gpib_bus_read>
   1179c:	a8 2e       	mov	r10, r24
   1179e:	b1 2c       	mov	r11, r1
                ch |= control_last;
   117a0:	8e dc       	rcall	.-1764   	; 0x110be <gpib_control_pin_read>
   117a2:	8c 01       	movw	r16, r24

                if(trace)
   117a4:	c8 2b       	or	r28, r24
   117a6:	d9 2b       	or	r29, r25
   117a8:	ca 29       	or	r28, r10
                {
///@brief V2 boards can NOT read all bits on the control bus at once
/// FIXME We could add a test for read/write state ??
///@brief NRFD,NDAC SRQ are outputs
                    control_last |= gpib_handshake_pin_read();
   117aa:	db 29       	or	r29, r11
   117ac:	c1 14       	cp	r12, r1
   117ae:	d1 04       	cpc	r13, r1
                    gpib_trace_display(bus | control_last, TRACE_READ);
   117b0:	49 f0       	breq	.+18     	; 0x117c4 <gpib_read_byte+0xc8>
   117b2:	95 dc       	rcall	.-1750   	; 0x110de <gpib_handshake_pin_read>
   117b4:	08 2b       	or	r16, r24
   117b6:	19 2b       	or	r17, r25
   117b8:	61 e0       	ldi	r22, 0x01	; 1
   117ba:	70 e0       	ldi	r23, 0x00	; 0
   117bc:	c5 01       	movw	r24, r10
   117be:	80 2b       	or	r24, r16
   117c0:	91 2b       	or	r25, r17
   117c2:	5a de       	rcall	.-844    	; 0x11478 <gpib_trace_display>
                }

                GPIB_PIN_FLOAT_UP(NDAC);
                GPIB_BUS_SETTLE();                // Let Data BUS settle
                gpib_timeout_set(HTIMEOUT);
   117c4:	53 98       	cbi	0x0a, 3	; 10
   117c6:	8d e0       	ldi	r24, 0x0D	; 13
   117c8:	8a 95       	dec	r24
   117ca:	f1 f7       	brne	.-4      	; 0x117c8 <gpib_read_byte+0xcc>
   117cc:	00 00       	nop
#if BOARD == 2
				/// FIXME do we want to keep the next state ?
                rx_state = GPIB_RX_WAIT_FOR_DAV_HI;
   117ce:	64 ef       	ldi	r22, 0xF4	; 244
   117d0:	71 e0       	ldi	r23, 0x01	; 1
   117d2:	80 e0       	ldi	r24, 0x00	; 0
/// FIXME We clould add a test for read/write state ??
///@brief V2 boards we can't - not a big deal as the DAV test works anyway
            ///@brief Wait for NDAC float HI

            case GPIB_RX_WAIT_FOR_NDAC_HI:
                if (GPIB_PIN_TST(NDAC) == 1)
   117d4:	90 e0       	ldi	r25, 0x00	; 0
   117d6:	2d db       	rcall	.-2470   	; 0x10e32 <gpib_timeout_set>
                {
                    gpib_timeout_set(HTIMEOUT);
   117d8:	54 e0       	ldi	r21, 0x04	; 4
   117da:	f5 2e       	mov	r15, r21
   117dc:	56 c0       	rjmp	.+172    	; 0x1188a <gpib_read_byte+0x18e>
   117de:	4b 9b       	sbis	0x09, 3	; 9
   117e0:	0c c0       	rjmp	.+24     	; 0x117fa <gpib_read_byte+0xfe>
   117e2:	64 ef       	ldi	r22, 0xF4	; 244
                    rx_state = GPIB_RX_WAIT_FOR_DAV_HI;
   117e4:	71 e0       	ldi	r23, 0x01	; 1
   117e6:	80 e0       	ldi	r24, 0x00	; 0
   117e8:	90 e0       	ldi	r25, 0x00	; 0
                }
                break;

            ///@brief Wait for DAV HI
            case GPIB_RX_WAIT_FOR_DAV_HI:
                if (GPIB_PIN_TST(DAV) == 1)
   117ea:	23 db       	rcall	.-2490   	; 0x10e32 <gpib_timeout_set>
   117ec:	44 e0       	ldi	r20, 0x04	; 4
				{
                    rx_state = GPIB_RX_DAV_IS_HI;
   117ee:	f4 2e       	mov	r15, r20
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   117f0:	04 c0       	rjmp	.+8      	; 0x117fa <gpib_read_byte+0xfe>
            case GPIB_RX_WAIT_FOR_DAV_HI:
                if (GPIB_PIN_TST(DAV) == 1)
				{
                    rx_state = GPIB_RX_DAV_IS_HI;
				}
                if (gpib_timeout_test())
   117f2:	19 9b       	sbis	0x03, 1	; 3
   117f4:	02 c0       	rjmp	.+4      	; 0x117fa <gpib_read_byte+0xfe>
   117f6:	35 e0       	ldi	r19, 0x05	; 5
                {
                    ch |= TIMEOUT_FLAG;
   117f8:	f3 2e       	mov	r15, r19
                    rx_state = GPIB_RX_ERROR;
   117fa:	80 91 7f 1c 	lds	r24, 0x1C7F	; 0x801c7f <gpib_timer+0x8>
   117fe:	88 23       	and	r24, r24
            case GPIB_RX_ERROR:
                rx_state = GPIB_RX_DONE;
                break;

            case GPIB_RX_DONE:
				gpib_bus_read_init(1); // Busy
   11800:	09 f4       	brne	.+2      	; 0x11804 <gpib_read_byte+0x108>
   11802:	43 c0       	rjmp	.+134    	; 0x1188a <gpib_read_byte+0x18e>
   11804:	d0 64       	ori	r29, 0x40	; 64
                break;
        }

        if(trace)
   11806:	27 e0       	ldi	r18, 0x07	; 7
   11808:	f2 2e       	mov	r15, r18
   1180a:	3f c0       	rjmp	.+126    	; 0x1188a <gpib_read_byte+0x18e>
   1180c:	81 e0       	ldi	r24, 0x01	; 1
   1180e:	90 e0       	ldi	r25, 0x00	; 0
   11810:	1a db       	rcall	.-2508   	; 0x10e46 <gpib_bus_read_init>
   11812:	04 c0       	rjmp	.+8      	; 0x1181c <gpib_read_byte+0x120>
   11814:	c1 14       	cp	r12, r1
        {
			/// V2 boards can not read all control and handshake bits at once
			/// FIXME We could add a test for read/write state ??
			/// NRFD,NDAC SRQ are outputs durring write phase, but not at very start
            control = gpib_control_pin_read();
   11816:	d1 04       	cpc	r13, r1
   11818:	99 f0       	breq	.+38     	; 0x11840 <gpib_read_byte+0x144>
   1181a:	05 c0       	rjmp	.+10     	; 0x11826 <gpib_read_byte+0x12a>
            control |= gpib_handshake_pin_read();
   1181c:	c1 14       	cp	r12, r1
   1181e:	d1 04       	cpc	r13, r1
   11820:	a9 f0       	breq	.+42     	; 0x1184c <gpib_read_byte+0x150>
   11822:	98 e0       	ldi	r25, 0x08	; 8
            if(control_last != control)
   11824:	f9 2e       	mov	r15, r25
   11826:	4b dc       	rcall	.-1898   	; 0x110be <gpib_control_pin_read>
   11828:	5c 01       	movw	r10, r24
            {
                gpib_trace_display(control, TRACE_BUS);
   1182a:	59 dc       	rcall	.-1870   	; 0x110de <gpib_handshake_pin_read>
   1182c:	a8 2a       	or	r10, r24
   1182e:	b9 2a       	or	r11, r25
   11830:	a0 16       	cp	r10, r16
   11832:	b1 06       	cpc	r11, r17
   11834:	31 f0       	breq	.+12     	; 0x11842 <gpib_read_byte+0x146>
            case GPIB_RX_DONE:
				gpib_bus_read_init(1); // Busy
                break;
        }

        if(trace)
   11836:	62 e0       	ldi	r22, 0x02	; 2
        control_last |= gpib_handshake_pin_read();
        gpib_trace_display(control_last, TRACE_BUS);
    }

    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
   11838:	70 e0       	ldi	r23, 0x00	; 0
   1183a:	c5 01       	movw	r24, r10
   1183c:	1d de       	rcall	.-966    	; 0x11478 <gpib_trace_display>
   1183e:	01 c0       	rjmp	.+2      	; 0x11842 <gpib_read_byte+0x146>
   11840:	58 01       	movw	r10, r16
///  - Remember that NDAC and NRFD are now both LOW!
///  - The spec says to KEEP BOTH LOW when NOT ready to read otherwise
///    we may miss a transfer and cause a controller timeout!
///  - GPIB TX state expects NRFD LOW on entry or it is an ERROR!

    lastcmd = current;
   11842:	88 e0       	ldi	r24, 0x08	; 8
   11844:	f8 16       	cp	r15, r24
   11846:	11 f0       	breq	.+4      	; 0x1184c <gpib_read_byte+0x150>
   11848:	85 01       	movw	r16, r10
   1184a:	82 cf       	rjmp	.-252    	; 0x11750 <gpib_read_byte+0x54>
   1184c:	80 91 84 1e 	lds	r24, 0x1E84	; 0x801e84 <current>
   11850:	90 91 85 1e 	lds	r25, 0x1E85	; 0x801e85 <current+0x1>

    if(ch & ERROR_MASK || (ch & ATN_FLAG) == 0)
   11854:	90 93 81 1c 	sts	0x1C81, r25	; 0x801c81 <lastcmd+0x1>
   11858:	80 93 80 1c 	sts	0x1C80, r24	; 0x801c80 <lastcmd>
   1185c:	ce 01       	movw	r24, r28
   1185e:	88 27       	eor	r24, r24
        current = 0;
   11860:	90 7d       	andi	r25, 0xD0	; 208
   11862:	89 2b       	or	r24, r25
   11864:	11 f4       	brne	.+4      	; 0x1186a <gpib_read_byte+0x16e>
   11866:	d2 fd       	sbrc	r29, 2
   11868:	05 c0       	rjmp	.+10     	; 0x11874 <gpib_read_byte+0x178>
    else
        current = ch & CMD_MASK;
   1186a:	10 92 85 1e 	sts	0x1E85, r1	; 0x801e85 <current+0x1>
   1186e:	10 92 84 1e 	sts	0x1E84, r1	; 0x801e84 <current>
   11872:	07 c0       	rjmp	.+14     	; 0x11882 <gpib_read_byte+0x186>
   11874:	ce 01       	movw	r24, r28
   11876:	8f 77       	andi	r24, 0x7F	; 127
   11878:	99 27       	eor	r25, r25
   1187a:	90 93 85 1e 	sts	0x1E85, r25	; 0x801e85 <current+0x1>
                }
                break;

            ///@brief Ready for next byte
            case GPIB_RX_DAV_IS_HI:
                rx_state = GPIB_RX_FINISH;        // DONE
   1187e:	80 93 84 1e 	sts	0x1E84, r24	; 0x801e84 <current>
            case GPIB_RX_DONE:
				gpib_bus_read_init(1); // Busy
                break;
        }

        if(trace)
   11882:	ce 01       	movw	r24, r28
   11884:	07 c0       	rjmp	.+14     	; 0x11894 <gpib_read_byte+0x198>
   11886:	86 e0       	ldi	r24, 0x06	; 6
   11888:	f8 2e       	mov	r15, r24
        current = 0;
    else
        current = ch & CMD_MASK;

    return (ch);
}
   1188a:	c1 14       	cp	r12, r1
   1188c:	d1 04       	cpc	r13, r1
   1188e:	09 f4       	brne	.+2      	; 0x11892 <gpib_read_byte+0x196>
   11890:	5f cf       	rjmp	.-322    	; 0x11750 <gpib_read_byte+0x54>
   11892:	c9 cf       	rjmp	.-110    	; 0x11826 <gpib_read_byte+0x12a>
   11894:	df 91       	pop	r29
   11896:	cf 91       	pop	r28
   11898:	1f 91       	pop	r17
   1189a:	0f 91       	pop	r16
   1189c:	ff 90       	pop	r15
   1189e:	df 90       	pop	r13
   118a0:	cf 90       	pop	r12
   118a2:	bf 90       	pop	r11
   118a4:	af 90       	pop	r10
   118a6:	08 95       	ret

000118a8 <gpib_decode>:
/// @see gpib_decode_str()
/// @return  void

void gpib_decode(uint16_t ch)
{
    gpib_trace_display(ch,0);
   118a8:	60 e0       	ldi	r22, 0x00	; 0
   118aa:	70 e0       	ldi	r23, 0x00	; 0
   118ac:	e5 cd       	rjmp	.-1078   	; 0x11478 <gpib_trace_display>
   118ae:	08 95       	ret

000118b0 <gpib_read_str>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
int gpib_read_str(uint8_t *buf, int size, uint16_t *status)
{
   118b0:	a7 e0       	ldi	r26, 0x07	; 7
   118b2:	b0 e0       	ldi	r27, 0x00	; 0
   118b4:	ee e5       	ldi	r30, 0x5E	; 94
   118b6:	fc e8       	ldi	r31, 0x8C	; 140
   118b8:	0c 94 21 e5 	jmp	0x1ca42	; 0x1ca42 <__prologue_saves__+0x10>
   118bc:	5b 01       	movw	r10, r22
   118be:	6a 01       	movw	r12, r20
    uint16_t val;
    int ind = 0;

    *status &= STATUS_MASK;
   118c0:	fa 01       	movw	r30, r20
   118c2:	20 81       	ld	r18, Z
   118c4:	31 81       	ldd	r19, Z+1	; 0x01
   118c6:	22 27       	eor	r18, r18
   118c8:	31 83       	std	Z+1, r19	; 0x01
   118ca:	20 83       	st	Z, r18

    if(!size)
   118cc:	67 2b       	or	r22, r23
   118ce:	21 f0       	breq	.+8      	; 0x118d8 <gpib_read_str+0x28>
   118d0:	7c 01       	movw	r14, r24
   118d2:	00 e0       	ldi	r16, 0x00	; 0
   118d4:	10 e0       	ldi	r17, 0x00	; 0
   118d6:	28 c0       	rjmp	.+80     	; 0x11928 <gpib_read_str+0x78>
    {
        if(debuglevel & (1+4))
   118d8:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   118dc:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   118e0:	85 70       	andi	r24, 0x05	; 5
   118e2:	99 27       	eor	r25, r25
   118e4:	89 2b       	or	r24, r25
   118e6:	09 f4       	brne	.+2      	; 0x118ea <gpib_read_str+0x3a>
   118e8:	7c c0       	rjmp	.+248    	; 0x119e2 <gpib_read_str+0x132>
            printf("gpib_read_str: size = 0\n");
   118ea:	8d ee       	ldi	r24, 0xED	; 237
   118ec:	9e e0       	ldi	r25, 0x0E	; 14
   118ee:	a0 e0       	ldi	r26, 0x00	; 0
   118f0:	ed b7       	in	r30, 0x3d	; 61
   118f2:	fe b7       	in	r31, 0x3e	; 62
   118f4:	81 83       	std	Z+1, r24	; 0x01
   118f6:	92 83       	std	Z+2, r25	; 0x02
   118f8:	a3 83       	std	Z+3, r26	; 0x03
   118fa:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   118fe:	71 c0       	rjmp	.+226    	; 0x119e2 <gpib_read_str+0x132>
        {
            *status |= (val & ERROR_MASK);
            break;
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
   11900:	8c 27       	eor	r24, r28
   11902:	9d 27       	eor	r25, r29
   11904:	92 fd       	sbrc	r25, 2
   11906:	2e c0       	rjmp	.+92     	; 0x11964 <gpib_read_str+0xb4>
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
            gpib_unread(val);
            break;
        }

        if(val & ATN_FLAG)
   11908:	ce 01       	movw	r24, r28
   1190a:	88 27       	eor	r24, r24
   1190c:	94 70       	andi	r25, 0x04	; 4
            buf[ind] = (val & CMD_MASK);
   1190e:	2c 2f       	mov	r18, r28
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
            gpib_unread(val);
            break;
        }

        if(val & ATN_FLAG)
   11910:	d2 fd       	sbrc	r29, 2
            buf[ind] = (val & CMD_MASK);
   11912:	2f 77       	andi	r18, 0x7F	; 127
        else
            buf[ind] = (val & DATA_MASK);
   11914:	f7 01       	movw	r30, r14
   11916:	20 83       	st	Z, r18
        ++ind;
   11918:	0f 5f       	subi	r16, 0xFF	; 255
   1191a:	1f 4f       	sbci	r17, 0xFF	; 255

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   1191c:	89 2b       	or	r24, r25
   1191e:	09 f4       	brne	.+2      	; 0x11922 <gpib_read_str+0x72>
   11920:	3c c0       	rjmp	.+120    	; 0x1199a <gpib_read_str+0xea>
   11922:	ff ef       	ldi	r31, 0xFF	; 255
   11924:	ef 1a       	sub	r14, r31
   11926:	ff 0a       	sbc	r15, r31
    {
        if(debuglevel & (1+4))
            printf("gpib_read_str: size = 0\n");
    }

    while(ind < size)
   11928:	0a 15       	cp	r16, r10
   1192a:	1b 05       	cpc	r17, r11
   1192c:	0c f0       	brlt	.+2      	; 0x11930 <gpib_read_str+0x80>
   1192e:	3f c0       	rjmp	.+126    	; 0x119ae <gpib_read_str+0xfe>
    {
        val = gpib_read_byte(NO_TRACE);
   11930:	80 e0       	ldi	r24, 0x00	; 0
   11932:	90 e0       	ldi	r25, 0x00	; 0
   11934:	e3 de       	rcall	.-570    	; 0x116fc <gpib_read_byte>
   11936:	ec 01       	movw	r28, r24
#if SDEBUG
        if(debuglevel & 256)
   11938:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1193c:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   11940:	90 ff       	sbrs	r25, 0
            gpib_decode(val);
   11942:	02 c0       	rjmp	.+4      	; 0x11948 <gpib_read_str+0x98>
   11944:	ce 01       	movw	r24, r28
#endif
        if(val & ERROR_MASK)
   11946:	b0 df       	rcall	.-160    	; 0x118a8 <gpib_decode>
   11948:	9e 01       	movw	r18, r28
   1194a:	22 27       	eor	r18, r18
   1194c:	30 7d       	andi	r19, 0xD0	; 208
   1194e:	f6 01       	movw	r30, r12
   11950:	80 81       	ld	r24, Z
   11952:	91 81       	ldd	r25, Z+1	; 0x01
   11954:	21 15       	cp	r18, r1
   11956:	31 05       	cpc	r19, r1
        {
            *status |= (val & ERROR_MASK);
   11958:	99 f2       	breq	.-90     	; 0x11900 <gpib_read_str+0x50>
   1195a:	82 2b       	or	r24, r18
   1195c:	93 2b       	or	r25, r19
   1195e:	91 83       	std	Z+1, r25	; 0x01
            break;
   11960:	80 83       	st	Z, r24
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
        {
            if(debuglevel & (1+4))
   11962:	28 c0       	rjmp	.+80     	; 0x119b4 <gpib_read_str+0x104>
   11964:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   11968:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1196c:	85 70       	andi	r24, 0x05	; 5
   1196e:	99 27       	eor	r25, r25
   11970:	89 2b       	or	r24, r25
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
   11972:	81 f0       	breq	.+32     	; 0x11994 <gpib_read_str+0xe4>
   11974:	ce 01       	movw	r24, r28
   11976:	99 27       	eor	r25, r25
   11978:	ed b7       	in	r30, 0x3d	; 61
   1197a:	fe b7       	in	r31, 0x3e	; 62
   1197c:	97 83       	std	Z+7, r25	; 0x07
   1197e:	86 83       	std	Z+6, r24	; 0x06
   11980:	15 83       	std	Z+5, r17	; 0x05
   11982:	04 83       	std	Z+4, r16	; 0x04
   11984:	80 ec       	ldi	r24, 0xC0	; 192
   11986:	9e e0       	ldi	r25, 0x0E	; 14
   11988:	a0 e0       	ldi	r26, 0x00	; 0
   1198a:	81 83       	std	Z+1, r24	; 0x01
   1198c:	92 83       	std	Z+2, r25	; 0x02
   1198e:	a3 83       	std	Z+3, r26	; 0x03
            gpib_unread(val);
   11990:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   11994:	ce 01       	movw	r24, r28
            break;
   11996:	63 db       	rcall	.-2362   	; 0x1105e <gpib_unread>
            buf[ind] = (val & CMD_MASK);
        else
            buf[ind] = (val & DATA_MASK);
        ++ind;

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   11998:	0d c0       	rjmp	.+26     	; 0x119b4 <gpib_read_str+0x104>
   1199a:	d0 ff       	sbrs	r29, 0
        {

            if(*status & EOI_FLAG)
   1199c:	c2 cf       	rjmp	.-124    	; 0x11922 <gpib_read_str+0x72>
   1199e:	f6 01       	movw	r30, r12
   119a0:	80 81       	ld	r24, Z
   119a2:	91 81       	ldd	r25, Z+1	; 0x01
   119a4:	90 fd       	sbrc	r25, 0
                return(ind);
/// @todo TODO
///  decode this state - for now I just set the EOI_FLAG
            *status |= EOI_FLAG;
   119a6:	1f c0       	rjmp	.+62     	; 0x119e6 <gpib_read_str+0x136>
   119a8:	91 60       	ori	r25, 0x01	; 1
   119aa:	91 83       	std	Z+1, r25	; 0x01
            break;
        }
    }
    if ( ind != size )
   119ac:	80 83       	st	Z, r24
   119ae:	0a 15       	cp	r16, r10
   119b0:	1b 05       	cpc	r17, r11
    {
        if(debuglevel & (1+4))
   119b2:	c9 f0       	breq	.+50     	; 0x119e6 <gpib_read_str+0x136>
   119b4:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   119b8:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   119bc:	85 70       	andi	r24, 0x05	; 5
   119be:	99 27       	eor	r25, r25
   119c0:	89 2b       	or	r24, r25
            printf("[gpib_read_str read(%d) expected(%d)]\n", ind , size);
   119c2:	89 f0       	breq	.+34     	; 0x119e6 <gpib_read_str+0x136>
   119c4:	ed b7       	in	r30, 0x3d	; 61
   119c6:	fe b7       	in	r31, 0x3e	; 62
   119c8:	b7 82       	std	Z+7, r11	; 0x07
   119ca:	a6 82       	std	Z+6, r10	; 0x06
   119cc:	15 83       	std	Z+5, r17	; 0x05
   119ce:	04 83       	std	Z+4, r16	; 0x04
   119d0:	89 e9       	ldi	r24, 0x99	; 153
   119d2:	9e e0       	ldi	r25, 0x0E	; 14
   119d4:	a0 e0       	ldi	r26, 0x00	; 0
   119d6:	81 83       	std	Z+1, r24	; 0x01
   119d8:	92 83       	std	Z+2, r25	; 0x02
   119da:	a3 83       	std	Z+3, r26	; 0x03
   119dc:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   119e0:	02 c0       	rjmp	.+4      	; 0x119e6 <gpib_read_str+0x136>
   119e2:	00 e0       	ldi	r16, 0x00	; 0
    }
    return(ind);
}
   119e4:	10 e0       	ldi	r17, 0x00	; 0
   119e6:	c8 01       	movw	r24, r16
   119e8:	cd b7       	in	r28, 0x3d	; 61
   119ea:	de b7       	in	r29, 0x3e	; 62
   119ec:	27 96       	adiw	r28, 0x07	; 7
   119ee:	ea e0       	ldi	r30, 0x0A	; 10
   119f0:	0c 94 3d e5 	jmp	0x1ca7a	; 0x1ca7a <__epilogue_restores__+0x10>

000119f4 <gpib_write_str>:
///     - Error Flags:
///       - IFC_FLAG
/// @see: gpib_write_byte()
/// @see: gpib.h _FLAGS defines for a full list)
int gpib_write_str(uint8_t *buf, int size, uint16_t *status)
{
   119f4:	a7 e0       	ldi	r26, 0x07	; 7
   119f6:	b0 e0       	ldi	r27, 0x00	; 0
   119f8:	e0 e0       	ldi	r30, 0x00	; 0
   119fa:	fd e8       	ldi	r31, 0x8D	; 141
   119fc:	0c 94 21 e5 	jmp	0x1ca42	; 0x1ca42 <__prologue_saves__+0x10>
   11a00:	8b 01       	movw	r16, r22
   11a02:	7a 01       	movw	r14, r20
    uint16_t val, ch;
    int ind = 0;

    *status &= STATUS_MASK;
   11a04:	fa 01       	movw	r30, r20
   11a06:	20 81       	ld	r18, Z
   11a08:	31 81       	ldd	r19, Z+1	; 0x01
   11a0a:	22 27       	eor	r18, r18
   11a0c:	31 83       	std	Z+1, r19	; 0x01
   11a0e:	20 83       	st	Z, r18

    if(!size)
   11a10:	67 2b       	or	r22, r23
   11a12:	21 f0       	breq	.+8      	; 0x11a1c <gpib_write_str+0x28>
   11a14:	6c 01       	movw	r12, r24
   11a16:	c0 e0       	ldi	r28, 0x00	; 0
   11a18:	d0 e0       	ldi	r29, 0x00	; 0
   11a1a:	35 c0       	rjmp	.+106    	; 0x11a86 <gpib_write_str+0x92>
    {
        if(debuglevel & (1+4))
   11a1c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   11a20:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   11a24:	85 70       	andi	r24, 0x05	; 5
   11a26:	99 27       	eor	r25, r25
   11a28:	89 2b       	or	r24, r25
   11a2a:	09 f4       	brne	.+2      	; 0x11a2e <gpib_write_str+0x3a>
   11a2c:	4f c0       	rjmp	.+158    	; 0x11acc <gpib_write_str+0xd8>
            printf("gpib_write_str: size = 0\n");
   11a2e:	8f e7       	ldi	r24, 0x7F	; 127
   11a30:	9e e0       	ldi	r25, 0x0E	; 14
   11a32:	a0 e0       	ldi	r26, 0x00	; 0
   11a34:	ed b7       	in	r30, 0x3d	; 61
   11a36:	fe b7       	in	r31, 0x3e	; 62
   11a38:	81 83       	std	Z+1, r24	; 0x01
   11a3a:	92 83       	std	Z+2, r25	; 0x02
   11a3c:	a3 83       	std	Z+3, r26	; 0x03
   11a3e:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   11a42:	44 c0       	rjmp	.+136    	; 0x11acc <gpib_write_str+0xd8>
    }

    while(ind < size)
    {
        ch = buf[ind++] & 0xff;                   // unsigned
   11a44:	21 96       	adiw	r28, 0x01	; 1
   11a46:	f6 01       	movw	r30, r12
   11a48:	81 91       	ld	r24, Z+
   11a4a:	6f 01       	movw	r12, r30
   11a4c:	90 e0       	ldi	r25, 0x00	; 0

        if(*status & ATN_FLAG)
   11a4e:	f7 01       	movw	r30, r14
   11a50:	20 81       	ld	r18, Z
   11a52:	31 81       	ldd	r19, Z+1	; 0x01
   11a54:	32 fd       	sbrc	r19, 2
        {
            ch |= ATN_FLAG;
   11a56:	94 60       	ori	r25, 0x04	; 4
        }

        if( (*status & EOI_FLAG) && (ind == size ) )
   11a58:	30 fd       	sbrc	r19, 0
            ch |= EOI_FLAG;

/// @return Returns

        val = gpib_write_byte(ch);
   11a5a:	19 c0       	rjmp	.+50     	; 0x11a8e <gpib_write_str+0x9a>
        *status |= (val & ERROR_MASK);
   11a5c:	4c db       	rcall	.-2408   	; 0x110f6 <gpib_write_byte>
   11a5e:	5c 01       	movw	r10, r24
   11a60:	aa 24       	eor	r10, r10
   11a62:	f0 ed       	ldi	r31, 0xD0	; 208
   11a64:	bf 22       	and	r11, r31
   11a66:	f7 01       	movw	r30, r14
   11a68:	20 81       	ld	r18, Z
   11a6a:	31 81       	ldd	r19, Z+1	; 0x01
   11a6c:	2a 29       	or	r18, r10
   11a6e:	3b 29       	or	r19, r11
   11a70:	31 83       	std	Z+1, r19	; 0x01

#if SDEBUG
        if(debuglevel & 256)
   11a72:	20 83       	st	Z, r18
   11a74:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   11a78:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
            gpib_decode(val);
   11a7c:	30 fd       	sbrc	r19, 0
#endif
        if(val & ERROR_MASK)
   11a7e:	14 df       	rcall	.-472    	; 0x118a8 <gpib_decode>
   11a80:	a1 14       	cp	r10, r1
   11a82:	b1 04       	cpc	r11, r1
    {
        if(debuglevel & (1+4))
            printf("gpib_write_str: size = 0\n");
    }

    while(ind < size)
   11a84:	49 f4       	brne	.+18     	; 0x11a98 <gpib_write_str+0xa4>
   11a86:	c0 17       	cp	r28, r16
   11a88:	d1 07       	cpc	r29, r17
   11a8a:	e4 f2       	brlt	.-72     	; 0x11a44 <gpib_write_str+0x50>
        if(*status & ATN_FLAG)
        {
            ch |= ATN_FLAG;
        }

        if( (*status & EOI_FLAG) && (ind == size ) )
   11a8c:	05 c0       	rjmp	.+10     	; 0x11a98 <gpib_write_str+0xa4>
   11a8e:	0c 17       	cp	r16, r28
   11a90:	1d 07       	cpc	r17, r29
            ch |= EOI_FLAG;
   11a92:	21 f7       	brne	.-56     	; 0x11a5c <gpib_write_str+0x68>
   11a94:	91 60       	ori	r25, 0x01	; 1
        {
            break;
        }

    }                                             // while(ind < size)
    if ( ind != size )
   11a96:	e2 cf       	rjmp	.-60     	; 0x11a5c <gpib_write_str+0x68>
   11a98:	c0 17       	cp	r28, r16
   11a9a:	d1 07       	cpc	r29, r17
    {
        if(debuglevel & (1+4))
   11a9c:	c9 f0       	breq	.+50     	; 0x11ad0 <gpib_write_str+0xdc>
   11a9e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   11aa2:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   11aa6:	85 70       	andi	r24, 0x05	; 5
   11aa8:	99 27       	eor	r25, r25
   11aaa:	89 2b       	or	r24, r25
            printf("[gpib_write_str sent(%d) expected(%d)]\n", ind,size);
   11aac:	89 f0       	breq	.+34     	; 0x11ad0 <gpib_write_str+0xdc>
   11aae:	ed b7       	in	r30, 0x3d	; 61
   11ab0:	fe b7       	in	r31, 0x3e	; 62
   11ab2:	17 83       	std	Z+7, r17	; 0x07
   11ab4:	06 83       	std	Z+6, r16	; 0x06
   11ab6:	d5 83       	std	Z+5, r29	; 0x05
   11ab8:	c4 83       	std	Z+4, r28	; 0x04
   11aba:	87 e5       	ldi	r24, 0x57	; 87
   11abc:	9e e0       	ldi	r25, 0x0E	; 14
   11abe:	a0 e0       	ldi	r26, 0x00	; 0
   11ac0:	81 83       	std	Z+1, r24	; 0x01
   11ac2:	92 83       	std	Z+2, r25	; 0x02
   11ac4:	a3 83       	std	Z+3, r26	; 0x03
   11ac6:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    uint16_t val, ch;
    int ind = 0;

    *status &= STATUS_MASK;

    if(!size)
   11aca:	02 c0       	rjmp	.+4      	; 0x11ad0 <gpib_write_str+0xdc>
   11acc:	c0 e0       	ldi	r28, 0x00	; 0
    {
        if(debuglevel & (1+4))
            printf("[gpib_write_str sent(%d) expected(%d)]\n", ind,size);
    }
    return(ind);
}
   11ace:	d0 e0       	ldi	r29, 0x00	; 0
   11ad0:	ce 01       	movw	r24, r28
   11ad2:	cd b7       	in	r28, 0x3d	; 61
   11ad4:	de b7       	in	r29, 0x3e	; 62
   11ad6:	27 96       	adiw	r28, 0x07	; 7
   11ad8:	ea e0       	ldi	r30, 0x0A	; 10
   11ada:	0c 94 3d e5 	jmp	0x1ca7a	; 0x1ca7a <__epilogue_restores__+0x10>

00011ade <gpib_file_init>:
   11ade:	ad b7       	in	r26, 0x3d	; 61
   11ae0:	be b7       	in	r27, 0x3e	; 62
   11ae2:	17 97       	sbiw	r26, 0x07	; 7
   11ae4:	0f b6       	in	r0, 0x3f	; 63
   11ae6:	f8 94       	cli
   11ae8:	be bf       	out	0x3e, r27	; 62
   11aea:	0f be       	out	0x3f, r0	; 63
   11aec:	ad bf       	out	0x3d, r26	; 61
   11aee:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <debuglevel+0x1>
   11af2:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <debuglevel>
   11af6:	85 ec       	ldi	r24, 0xC5	; 197
   11af8:	91 e0       	ldi	r25, 0x01	; 1
   11afa:	0e 94 1a 98 	call	0x13034	; 0x13034 <Read_Config>
   11afe:	18 16       	cp	r1, r24
   11b00:	19 06       	cpc	r1, r25
   11b02:	8c f4       	brge	.+34     	; 0x11b26 <gpib_file_init+0x48>
   11b04:	ed b7       	in	r30, 0x3d	; 61
   11b06:	fe b7       	in	r31, 0x3e	; 62
   11b08:	97 83       	std	Z+7, r25	; 0x07
   11b0a:	86 83       	std	Z+6, r24	; 0x06
   11b0c:	85 ec       	ldi	r24, 0xC5	; 197
   11b0e:	91 e0       	ldi	r25, 0x01	; 1
   11b10:	95 83       	std	Z+5, r25	; 0x05
   11b12:	84 83       	std	Z+4, r24	; 0x04
   11b14:	8f e4       	ldi	r24, 0x4F	; 79
   11b16:	93 e1       	ldi	r25, 0x13	; 19
   11b18:	a0 e0       	ldi	r26, 0x00	; 0
   11b1a:	81 83       	std	Z+1, r24	; 0x01
   11b1c:	92 83       	std	Z+2, r25	; 0x02
   11b1e:	a3 83       	std	Z+3, r26	; 0x03
   11b20:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   11b24:	10 c0       	rjmp	.+32     	; 0x11b46 <gpib_file_init+0x68>
   11b26:	89 2b       	or	r24, r25
   11b28:	71 f0       	breq	.+28     	; 0x11b46 <gpib_file_init+0x68>
   11b2a:	85 ec       	ldi	r24, 0xC5	; 197
   11b2c:	91 e0       	ldi	r25, 0x01	; 1
   11b2e:	ed b7       	in	r30, 0x3d	; 61
   11b30:	fe b7       	in	r31, 0x3e	; 62
   11b32:	95 83       	std	Z+5, r25	; 0x05
   11b34:	84 83       	std	Z+4, r24	; 0x04
   11b36:	8e e3       	ldi	r24, 0x3E	; 62
   11b38:	93 e1       	ldi	r25, 0x13	; 19
   11b3a:	a0 e0       	ldi	r26, 0x00	; 0
   11b3c:	81 83       	std	Z+1, r24	; 0x01
   11b3e:	92 83       	std	Z+2, r25	; 0x02
   11b40:	a3 83       	std	Z+3, r26	; 0x03
   11b42:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   11b46:	0e 94 d4 96 	call	0x12da8	; 0x12da8 <set_Config_Defaults>
   11b4a:	0e 94 90 71 	call	0xe320	; 0xe320 <mmc_wp_status>
   11b4e:	89 2b       	or	r24, r25
   11b50:	51 f0       	breq	.+20     	; 0x11b66 <gpib_file_init+0x88>
   11b52:	85 e2       	ldi	r24, 0x25	; 37
   11b54:	93 e1       	ldi	r25, 0x13	; 19
   11b56:	a0 e0       	ldi	r26, 0x00	; 0
   11b58:	ed b7       	in	r30, 0x3d	; 61
   11b5a:	fe b7       	in	r31, 0x3e	; 62
   11b5c:	81 83       	std	Z+1, r24	; 0x01
   11b5e:	92 83       	std	Z+2, r25	; 0x02
   11b60:	a3 83       	std	Z+3, r26	; 0x03
   11b62:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   11b66:	ad b7       	in	r26, 0x3d	; 61
   11b68:	be b7       	in	r27, 0x3e	; 62
   11b6a:	17 96       	adiw	r26, 0x07	; 7
   11b6c:	0f b6       	in	r0, 0x3f	; 63
   11b6e:	f8 94       	cli
   11b70:	be bf       	out	0x3e, r27	; 62
   11b72:	0f be       	out	0x3f, r0	; 63
   11b74:	ad bf       	out	0x3d, r26	; 61
   11b76:	08 95       	ret

00011b78 <SS80_is_MLA>:
   11b78:	40 e2       	ldi	r20, 0x20	; 32
   11b7a:	50 e0       	ldi	r21, 0x00	; 0
   11b7c:	bc 01       	movw	r22, r24
   11b7e:	83 e0       	ldi	r24, 0x03	; 3
   11b80:	90 e0       	ldi	r25, 0x00	; 0
   11b82:	78 d6       	rcall	.+3312   	; 0x12874 <find_device>
   11b84:	8f 3f       	cpi	r24, 0xFF	; 255
   11b86:	2f ef       	ldi	r18, 0xFF	; 255
   11b88:	92 07       	cpc	r25, r18
   11b8a:	11 f0       	breq	.+4      	; 0x11b90 <SS80_is_MLA+0x18>
   11b8c:	9d c6       	rjmp	.+3386   	; 0x128c8 <set_active_device>
   11b8e:	08 95       	ret
   11b90:	80 e0       	ldi	r24, 0x00	; 0
   11b92:	90 e0       	ldi	r25, 0x00	; 0
   11b94:	08 95       	ret

00011b96 <SS80_is_MTA>:
   11b96:	40 e4       	ldi	r20, 0x40	; 64
   11b98:	50 e0       	ldi	r21, 0x00	; 0
   11b9a:	bc 01       	movw	r22, r24
   11b9c:	83 e0       	ldi	r24, 0x03	; 3
   11b9e:	90 e0       	ldi	r25, 0x00	; 0
   11ba0:	69 d6       	rcall	.+3282   	; 0x12874 <find_device>
   11ba2:	8f 3f       	cpi	r24, 0xFF	; 255
   11ba4:	2f ef       	ldi	r18, 0xFF	; 255
   11ba6:	92 07       	cpc	r25, r18
   11ba8:	11 f0       	breq	.+4      	; 0x11bae <SS80_is_MTA+0x18>
   11baa:	8e c6       	rjmp	.+3356   	; 0x128c8 <set_active_device>
   11bac:	08 95       	ret
   11bae:	80 e0       	ldi	r24, 0x00	; 0
   11bb0:	90 e0       	ldi	r25, 0x00	; 0
   11bb2:	08 95       	ret

00011bb4 <SS80_is_MSA>:
   11bb4:	40 e6       	ldi	r20, 0x60	; 96
   11bb6:	50 e0       	ldi	r21, 0x00	; 0
   11bb8:	bc 01       	movw	r22, r24
   11bba:	83 e0       	ldi	r24, 0x03	; 3
   11bbc:	90 e0       	ldi	r25, 0x00	; 0
   11bbe:	5a d6       	rcall	.+3252   	; 0x12874 <find_device>
   11bc0:	8f 3f       	cpi	r24, 0xFF	; 255
   11bc2:	2f ef       	ldi	r18, 0xFF	; 255
   11bc4:	92 07       	cpc	r25, r18
   11bc6:	11 f0       	breq	.+4      	; 0x11bcc <SS80_is_MSA+0x18>
   11bc8:	7f c6       	rjmp	.+3326   	; 0x128c8 <set_active_device>
   11bca:	08 95       	ret
   11bcc:	80 e0       	ldi	r24, 0x00	; 0
   11bce:	90 e0       	ldi	r25, 0x00	; 0
   11bd0:	08 95       	ret

00011bd2 <AMIGO_is_MLA>:
   11bd2:	40 e2       	ldi	r20, 0x20	; 32
   11bd4:	50 e0       	ldi	r21, 0x00	; 0
   11bd6:	bc 01       	movw	r22, r24
   11bd8:	81 e0       	ldi	r24, 0x01	; 1
   11bda:	90 e0       	ldi	r25, 0x00	; 0
   11bdc:	4b d6       	rcall	.+3222   	; 0x12874 <find_device>
   11bde:	8f 3f       	cpi	r24, 0xFF	; 255
   11be0:	2f ef       	ldi	r18, 0xFF	; 255
   11be2:	92 07       	cpc	r25, r18
   11be4:	11 f0       	breq	.+4      	; 0x11bea <AMIGO_is_MLA+0x18>
   11be6:	70 c6       	rjmp	.+3296   	; 0x128c8 <set_active_device>
   11be8:	08 95       	ret
   11bea:	80 e0       	ldi	r24, 0x00	; 0
   11bec:	90 e0       	ldi	r25, 0x00	; 0
   11bee:	08 95       	ret

00011bf0 <AMIGO_is_MTA>:
   11bf0:	40 e4       	ldi	r20, 0x40	; 64
   11bf2:	50 e0       	ldi	r21, 0x00	; 0
   11bf4:	bc 01       	movw	r22, r24
   11bf6:	81 e0       	ldi	r24, 0x01	; 1
   11bf8:	90 e0       	ldi	r25, 0x00	; 0
   11bfa:	3c d6       	rcall	.+3192   	; 0x12874 <find_device>
   11bfc:	8f 3f       	cpi	r24, 0xFF	; 255
   11bfe:	2f ef       	ldi	r18, 0xFF	; 255
   11c00:	92 07       	cpc	r25, r18
   11c02:	11 f0       	breq	.+4      	; 0x11c08 <AMIGO_is_MTA+0x18>
   11c04:	61 c6       	rjmp	.+3266   	; 0x128c8 <set_active_device>
   11c06:	08 95       	ret
   11c08:	80 e0       	ldi	r24, 0x00	; 0
   11c0a:	90 e0       	ldi	r25, 0x00	; 0
   11c0c:	08 95       	ret

00011c0e <AMIGO_is_MSA>:
   11c0e:	40 e6       	ldi	r20, 0x60	; 96
   11c10:	50 e0       	ldi	r21, 0x00	; 0
   11c12:	bc 01       	movw	r22, r24
   11c14:	81 e0       	ldi	r24, 0x01	; 1
   11c16:	90 e0       	ldi	r25, 0x00	; 0
   11c18:	2d d6       	rcall	.+3162   	; 0x12874 <find_device>
   11c1a:	8f 3f       	cpi	r24, 0xFF	; 255
   11c1c:	2f ef       	ldi	r18, 0xFF	; 255
   11c1e:	92 07       	cpc	r25, r18
   11c20:	11 f0       	breq	.+4      	; 0x11c26 <AMIGO_is_MSA+0x18>
   11c22:	52 c6       	rjmp	.+3236   	; 0x128c8 <set_active_device>
   11c24:	08 95       	ret
   11c26:	80 e0       	ldi	r24, 0x00	; 0
   11c28:	90 e0       	ldi	r25, 0x00	; 0
   11c2a:	08 95       	ret

00011c2c <PRINTER_is_MLA>:
   11c2c:	40 e2       	ldi	r20, 0x20	; 32
   11c2e:	50 e0       	ldi	r21, 0x00	; 0
   11c30:	bc 01       	movw	r22, r24
   11c32:	84 e0       	ldi	r24, 0x04	; 4
   11c34:	90 e0       	ldi	r25, 0x00	; 0
   11c36:	1e d6       	rcall	.+3132   	; 0x12874 <find_device>
   11c38:	8f 3f       	cpi	r24, 0xFF	; 255
   11c3a:	2f ef       	ldi	r18, 0xFF	; 255
   11c3c:	92 07       	cpc	r25, r18
   11c3e:	11 f0       	breq	.+4      	; 0x11c44 <PRINTER_is_MLA+0x18>
   11c40:	43 c6       	rjmp	.+3206   	; 0x128c8 <set_active_device>
   11c42:	08 95       	ret
   11c44:	80 e0       	ldi	r24, 0x00	; 0
   11c46:	90 e0       	ldi	r25, 0x00	; 0
   11c48:	08 95       	ret

00011c4a <PRINTER_is_MTA>:
   11c4a:	40 e4       	ldi	r20, 0x40	; 64
   11c4c:	50 e0       	ldi	r21, 0x00	; 0
   11c4e:	bc 01       	movw	r22, r24
   11c50:	84 e0       	ldi	r24, 0x04	; 4
   11c52:	90 e0       	ldi	r25, 0x00	; 0
   11c54:	0f d6       	rcall	.+3102   	; 0x12874 <find_device>
   11c56:	8f 3f       	cpi	r24, 0xFF	; 255
   11c58:	2f ef       	ldi	r18, 0xFF	; 255
   11c5a:	92 07       	cpc	r25, r18
   11c5c:	11 f0       	breq	.+4      	; 0x11c62 <PRINTER_is_MTA+0x18>
   11c5e:	34 c6       	rjmp	.+3176   	; 0x128c8 <set_active_device>
   11c60:	08 95       	ret
   11c62:	80 e0       	ldi	r24, 0x00	; 0
   11c64:	90 e0       	ldi	r25, 0x00	; 0
   11c66:	08 95       	ret

00011c68 <gpib_init_devices>:
   11c68:	11 d9       	rcall	.-3550   	; 0x10e8c <gpib_bus_init>
   11c6a:	3d d9       	rcall	.-3462   	; 0x10ee6 <gpib_state_init>
   11c6c:	0e 94 e2 ae 	call	0x15dc4	; 0x15dc4 <SS80_init>
   11c70:	0e 94 71 b4 	call	0x168e2	; 0x168e2 <amigo_init>
   11c74:	0c 94 65 bf 	jmp	0x17eca	; 0x17eca <printer_close>
   11c78:	08 95       	ret

00011c7a <gpib_trace_task>:
/// @param name: File name to save log file to.
/// @return  void
///   Exit on Key Press

void gpib_trace_task( char *name , int detail)
{
   11c7a:	0f 93       	push	r16
   11c7c:	1f 93       	push	r17
   11c7e:	cf 93       	push	r28
   11c80:	df 93       	push	r29
   11c82:	00 d0       	rcall	.+0      	; 0x11c84 <gpib_trace_task+0xa>
   11c84:	00 d0       	rcall	.+0      	; 0x11c86 <gpib_trace_task+0xc>
   11c86:	1f 92       	push	r1
   11c88:	eb 01       	movw	r28, r22
    int ch;

    if(name && *name)
   11c8a:	00 97       	sbiw	r24, 0x00	; 0
   11c8c:	09 f4       	brne	.+2      	; 0x11c90 <gpib_trace_task+0x16>
   11c8e:	44 c0       	rjmp	.+136    	; 0x11d18 <gpib_trace_task+0x9e>
   11c90:	fc 01       	movw	r30, r24
   11c92:	20 81       	ld	r18, Z
   11c94:	22 23       	and	r18, r18
   11c96:	09 f4       	brne	.+2      	; 0x11c9a <gpib_trace_task+0x20>
   11c98:	3f c0       	rjmp	.+126    	; 0x11d18 <gpib_trace_task+0x9e>
    {
        name = skipspaces(name);
   11c9a:	0e 94 d3 33 	call	0x67a6	; 0x67a6 <skipspaces>
   11c9e:	8c 01       	movw	r16, r24
        printf("Capturing GPIB BUS to:%s\n", name);
   11ca0:	ed b7       	in	r30, 0x3d	; 61
   11ca2:	fe b7       	in	r31, 0x3e	; 62
   11ca4:	95 83       	std	Z+5, r25	; 0x05
   11ca6:	84 83       	std	Z+4, r24	; 0x04
   11ca8:	8b e0       	ldi	r24, 0x0B	; 11
   11caa:	93 e1       	ldi	r25, 0x13	; 19
   11cac:	a0 e0       	ldi	r26, 0x00	; 0
   11cae:	81 83       	std	Z+1, r24	; 0x01
   11cb0:	92 83       	std	Z+2, r25	; 0x02
   11cb2:	a3 83       	std	Z+3, r26	; 0x03
   11cb4:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
       if(detail)
   11cb8:	20 97       	sbiw	r28, 0x00	; 0
   11cba:	51 f0       	breq	.+20     	; 0x11cd0 <gpib_trace_task+0x56>
            printf("FULL GPIB BUS handshake logging requested\n");
   11cbc:	80 ee       	ldi	r24, 0xE0	; 224
   11cbe:	92 e1       	ldi	r25, 0x12	; 18
   11cc0:	a0 e0       	ldi	r26, 0x00	; 0
   11cc2:	ed b7       	in	r30, 0x3d	; 61
   11cc4:	fe b7       	in	r31, 0x3e	; 62
   11cc6:	81 83       	std	Z+1, r24	; 0x01
   11cc8:	92 83       	std	Z+2, r25	; 0x02
   11cca:	a3 83       	std	Z+3, r26	; 0x03
   11ccc:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
        printf("Press ANY key to exit\n");
   11cd0:	89 ec       	ldi	r24, 0xC9	; 201
   11cd2:	92 e1       	ldi	r25, 0x12	; 18
   11cd4:	a0 e0       	ldi	r26, 0x00	; 0
   11cd6:	ed b7       	in	r30, 0x3d	; 61
   11cd8:	fe b7       	in	r31, 0x3e	; 62
   11cda:	81 83       	std	Z+1, r24	; 0x01
   11cdc:	92 83       	std	Z+2, r25	; 0x02
   11cde:	a3 83       	std	Z+3, r26	; 0x03
   11ce0:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>

        gpib_log_fp = fopen(name,"wb");
   11ce4:	6a e2       	ldi	r22, 0x2A	; 42
   11ce6:	78 e0       	ldi	r23, 0x08	; 8
   11ce8:	c8 01       	movw	r24, r16
   11cea:	0e 94 c4 7f 	call	0xff88	; 0xff88 <fopen>
   11cee:	90 93 fe 18 	sts	0x18FE, r25	; 0x8018fe <gpib_log_fp+0x1>
   11cf2:	80 93 fd 18 	sts	0x18FD, r24	; 0x8018fd <gpib_log_fp>
        if(gpib_log_fp == NULL)
   11cf6:	89 2b       	or	r24, r25
   11cf8:	b9 f4       	brne	.+46     	; 0x11d28 <gpib_trace_task+0xae>
        {
            perror("open failed");
   11cfa:	85 ec       	ldi	r24, 0xC5	; 197
   11cfc:	9c e0       	ldi	r25, 0x0C	; 12
   11cfe:	0e 94 f5 79 	call	0xf3ea	; 0xf3ea <perror>
            printf("exiting...\n");
   11d02:	8d eb       	ldi	r24, 0xBD	; 189
   11d04:	92 e1       	ldi	r25, 0x12	; 18
   11d06:	a0 e0       	ldi	r26, 0x00	; 0
   11d08:	ed b7       	in	r30, 0x3d	; 61
   11d0a:	fe b7       	in	r31, 0x3e	; 62
   11d0c:	81 83       	std	Z+1, r24	; 0x01
   11d0e:	92 83       	std	Z+2, r25	; 0x02
   11d10:	a3 83       	std	Z+3, r26	; 0x03
   11d12:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
            return;
   11d16:	3e c0       	rjmp	.+124    	; 0x11d94 <gpib_trace_task+0x11a>
        }
    }
    else
    {
        gpib_log_fp = stdout;
   11d18:	80 91 59 1c 	lds	r24, 0x1C59	; 0x801c59 <__iob+0x2>
   11d1c:	90 91 5a 1c 	lds	r25, 0x1C5A	; 0x801c5a <__iob+0x3>
   11d20:	90 93 fe 18 	sts	0x18FE, r25	; 0x8018fe <gpib_log_fp+0x1>
   11d24:	80 93 fd 18 	sts	0x18FD, r24	; 0x8018fd <gpib_log_fp>
    }

    gpib_state_init();                            // Init PPR talking and listening states
    gpib_init_devices();
   11d28:	de d8       	rcall	.-3652   	; 0x10ee6 <gpib_state_init>

    gpib_decode_header(gpib_log_fp);
   11d2a:	9e df       	rcall	.-196    	; 0x11c68 <gpib_init_devices>
   11d2c:	80 91 fd 18 	lds	r24, 0x18FD	; 0x8018fd <gpib_log_fp>
   11d30:	90 91 fe 18 	lds	r25, 0x18FE	; 0x8018fe <gpib_log_fp+0x1>
    while(1)                                      // Main loop, forever
    {
        if(uart_keyhit(0))
   11d34:	4f db       	rcall	.-2402   	; 0x113d4 <gpib_decode_header>
   11d36:	80 e0       	ldi	r24, 0x00	; 0
   11d38:	0e 94 b1 2c 	call	0x5962	; 0x5962 <uart_keyhit>
            break;

        ch = gpib_read_byte(detail);
   11d3c:	89 2b       	or	r24, r25
   11d3e:	31 f4       	brne	.+12     	; 0x11d4c <gpib_trace_task+0xd2>
        if(!detail)
   11d40:	ce 01       	movw	r24, r28
   11d42:	dc dc       	rcall	.-1608   	; 0x116fc <gpib_read_byte>
            gpib_decode(ch);
   11d44:	20 97       	sbiw	r28, 0x00	; 0
   11d46:	b9 f7       	brne	.-18     	; 0x11d36 <gpib_trace_task+0xbc>
   11d48:	af dd       	rcall	.-1186   	; 0x118a8 <gpib_decode>
    }

    printf("Done\n");
   11d4a:	f5 cf       	rjmp	.-22     	; 0x11d36 <gpib_trace_task+0xbc>
   11d4c:	87 eb       	ldi	r24, 0xB7	; 183
   11d4e:	92 e1       	ldi	r25, 0x12	; 18
   11d50:	a0 e0       	ldi	r26, 0x00	; 0
   11d52:	ed b7       	in	r30, 0x3d	; 61
   11d54:	fe b7       	in	r31, 0x3e	; 62
   11d56:	81 83       	std	Z+1, r24	; 0x01
   11d58:	92 83       	std	Z+2, r25	; 0x02
   11d5a:	a3 83       	std	Z+3, r26	; 0x03
   11d5c:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    if(gpib_log_fp)
   11d60:	80 91 fd 18 	lds	r24, 0x18FD	; 0x8018fd <gpib_log_fp>
   11d64:	90 91 fe 18 	lds	r25, 0x18FE	; 0x8018fe <gpib_log_fp+0x1>
   11d68:	00 97       	sbiw	r24, 0x00	; 0
    {
        fclose(gpib_log_fp);
   11d6a:	a1 f0       	breq	.+40     	; 0x11d94 <gpib_trace_task+0x11a>
   11d6c:	0e 94 6e 7e 	call	0xfcdc	; 0xfcdc <fclose>
        printf("Capturing Closed\n");
   11d70:	85 ea       	ldi	r24, 0xA5	; 165
   11d72:	92 e1       	ldi	r25, 0x12	; 18
   11d74:	a0 e0       	ldi	r26, 0x00	; 0
   11d76:	ed b7       	in	r30, 0x3d	; 61
   11d78:	fe b7       	in	r31, 0x3e	; 62
   11d7a:	81 83       	std	Z+1, r24	; 0x01
   11d7c:	92 83       	std	Z+2, r25	; 0x02
   11d7e:	a3 83       	std	Z+3, r26	; 0x03
   11d80:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
        gpib_log_fp = stdout;
   11d84:	80 91 59 1c 	lds	r24, 0x1C59	; 0x801c59 <__iob+0x2>
   11d88:	90 91 5a 1c 	lds	r25, 0x1C5A	; 0x801c5a <__iob+0x3>
   11d8c:	90 93 fe 18 	sts	0x18FE, r25	; 0x8018fe <gpib_log_fp+0x1>
   11d90:	80 93 fd 18 	sts	0x18FD, r24	; 0x8018fd <gpib_log_fp>
    }
}
   11d94:	cd b7       	in	r28, 0x3d	; 61
   11d96:	de b7       	in	r29, 0x3e	; 62
   11d98:	25 96       	adiw	r28, 0x05	; 5
   11d9a:	e4 e0       	ldi	r30, 0x04	; 4
   11d9c:	0c 94 43 e5 	jmp	0x1ca86	; 0x1ca86 <__epilogue_restores__+0x1c>

00011da0 <gpib_error_test>:
///
/// @return  val
/// @return ABORT flag on user keypress

uint16_t gpib_error_test(uint16_t val)
{
   11da0:	ef 92       	push	r14
   11da2:	ff 92       	push	r15
   11da4:	0f 93       	push	r16
   11da6:	1f 93       	push	r17
   11da8:	cf 93       	push	r28
   11daa:	df 93       	push	r29
   11dac:	00 d0       	rcall	.+0      	; 0x11dae <gpib_error_test+0xe>
   11dae:	1f 92       	push	r1
   11db0:	7c 01       	movw	r14, r24

    if(val & ERROR_MASK || uart_keyhit(0) || mmc_ins_status() != 1 )
   11db2:	ec 01       	movw	r28, r24
   11db4:	cc 27       	eor	r28, r28
   11db6:	d0 7d       	andi	r29, 0xD0	; 208
   11db8:	20 97       	sbiw	r28, 0x00	; 0
   11dba:	61 f0       	breq	.+24     	; 0x11dd4 <gpib_error_test+0x34>
    {
        val &= ERROR_MASK;

        ///@brief IFC is and important state so display it for most messages
        if(debuglevel & (2+4+8+0x20))
   11dbc:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   11dc0:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   11dc4:	8e 72       	andi	r24, 0x2E	; 46
   11dc6:	99 27       	eor	r25, r25
   11dc8:	87 01       	movw	r16, r14
   11dca:	00 27       	eor	r16, r16
   11dcc:	10 71       	andi	r17, 0x10	; 16
   11dce:	89 2b       	or	r24, r25
   11dd0:	59 f4       	brne	.+22     	; 0x11de8 <gpib_error_test+0x48>
   11dd2:	17 c0       	rjmp	.+46     	; 0x11e02 <gpib_error_test+0x62>
/// @return ABORT flag on user keypress

uint16_t gpib_error_test(uint16_t val)
{

    if(val & ERROR_MASK || uart_keyhit(0) || mmc_ins_status() != 1 )
   11dd4:	80 e0       	ldi	r24, 0x00	; 0
   11dd6:	0e 94 b1 2c 	call	0x5962	; 0x5962 <uart_keyhit>
   11dda:	89 2b       	or	r24, r25
   11ddc:	79 f7       	brne	.-34     	; 0x11dbc <gpib_error_test+0x1c>
   11dde:	0e 94 8d 71 	call	0xe31a	; 0xe31a <mmc_ins_status>
   11de2:	01 97       	sbiw	r24, 0x01	; 1
   11de4:	59 f7       	brne	.-42     	; 0x11dbc <gpib_error_test+0x1c>
   11de6:	62 c0       	rjmp	.+196    	; 0x11eac <gpib_error_test+0x10c>

        ///@brief IFC is and important state so display it for most messages
        if(debuglevel & (2+4+8+0x20))
        {
            /// Bus Clear, reseat all states, etc
            if(val & IFC_FLAG)
   11de8:	01 15       	cp	r16, r1
   11dea:	11 05       	cpc	r17, r1
   11dec:	51 f0       	breq	.+20     	; 0x11e02 <gpib_error_test+0x62>
                printf("<IFC>\n");
   11dee:	8e e9       	ldi	r24, 0x9E	; 158
   11df0:	92 e1       	ldi	r25, 0x12	; 18
   11df2:	a0 e0       	ldi	r26, 0x00	; 0
   11df4:	ed b7       	in	r30, 0x3d	; 61
   11df6:	fe b7       	in	r31, 0x3e	; 62
   11df8:	81 83       	std	Z+1, r24	; 0x01
   11dfa:	92 83       	std	Z+2, r25	; 0x02
   11dfc:	a3 83       	std	Z+3, r26	; 0x03
   11dfe:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
        }

        if(debuglevel & (1+4))
   11e02:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   11e06:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   11e0a:	85 70       	andi	r24, 0x05	; 5
   11e0c:	99 27       	eor	r25, r25
   11e0e:	89 2b       	or	r24, r25
   11e10:	c1 f0       	breq	.+48     	; 0x11e42 <gpib_error_test+0xa2>
        {
            if(val & TIMEOUT_FLAG)
   11e12:	f6 fe       	sbrs	r15, 6
   11e14:	0a c0       	rjmp	.+20     	; 0x11e2a <gpib_error_test+0x8a>
                printf("<TIMEOUT>\n");
   11e16:	83 e9       	ldi	r24, 0x93	; 147
   11e18:	92 e1       	ldi	r25, 0x12	; 18
   11e1a:	a0 e0       	ldi	r26, 0x00	; 0
   11e1c:	ed b7       	in	r30, 0x3d	; 61
   11e1e:	fe b7       	in	r31, 0x3e	; 62
   11e20:	81 83       	std	Z+1, r24	; 0x01
   11e22:	92 83       	std	Z+2, r25	; 0x02
   11e24:	a3 83       	std	Z+3, r26	; 0x03
   11e26:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
            if(val & BUS_ERROR_FLAG)
   11e2a:	d7 ff       	sbrs	r29, 7
   11e2c:	0a c0       	rjmp	.+20     	; 0x11e42 <gpib_error_test+0xa2>
                printf("<BUS>\n");
   11e2e:	8c e8       	ldi	r24, 0x8C	; 140
   11e30:	92 e1       	ldi	r25, 0x12	; 18
   11e32:	a0 e0       	ldi	r26, 0x00	; 0
   11e34:	ed b7       	in	r30, 0x3d	; 61
   11e36:	fe b7       	in	r31, 0x3e	; 62
   11e38:	81 83       	std	Z+1, r24	; 0x01
   11e3a:	92 83       	std	Z+2, r25	; 0x02
   11e3c:	a3 83       	std	Z+3, r26	; 0x03
   11e3e:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
        }

        if(uart_keyhit(0))
   11e42:	80 e0       	ldi	r24, 0x00	; 0
   11e44:	0e 94 b1 2c 	call	0x5962	; 0x5962 <uart_keyhit>
   11e48:	89 2b       	or	r24, r25
   11e4a:	51 f0       	breq	.+20     	; 0x11e60 <gpib_error_test+0xc0>
            printf("<INTERRUPT>\n");
   11e4c:	8f e7       	ldi	r24, 0x7F	; 127
   11e4e:	92 e1       	ldi	r25, 0x12	; 18
   11e50:	a0 e0       	ldi	r26, 0x00	; 0
   11e52:	ed b7       	in	r30, 0x3d	; 61
   11e54:	fe b7       	in	r31, 0x3e	; 62
   11e56:	81 83       	std	Z+1, r24	; 0x01
   11e58:	92 83       	std	Z+2, r25	; 0x02
   11e5a:	a3 83       	std	Z+3, r26	; 0x03
   11e5c:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>

        if( mmc_ins_status() != 1 )
   11e60:	0e 94 8d 71 	call	0xe31a	; 0xe31a <mmc_ins_status>
   11e64:	01 97       	sbiw	r24, 0x01	; 1
   11e66:	51 f0       	breq	.+20     	; 0x11e7c <gpib_error_test+0xdc>
            printf("<MEDIA MISSING>\n");
   11e68:	8e e6       	ldi	r24, 0x6E	; 110
   11e6a:	92 e1       	ldi	r25, 0x12	; 18
   11e6c:	a0 e0       	ldi	r26, 0x00	; 0
   11e6e:	ed b7       	in	r30, 0x3d	; 61
   11e70:	fe b7       	in	r31, 0x3e	; 62
   11e72:	81 83       	std	Z+1, r24	; 0x01
   11e74:	92 83       	std	Z+2, r25	; 0x02
   11e76:	a3 83       	std	Z+3, r26	; 0x03
   11e78:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>

        if(val & IFC_FLAG)
   11e7c:	01 15       	cp	r16, r1
   11e7e:	11 05       	cpc	r17, r1
        {
            gpib_init_devices();
   11e80:	09 f0       	breq	.+2      	; 0x11e84 <gpib_error_test+0xe4>
        }

        if(uart_keyhit(0))
   11e82:	f2 de       	rcall	.-540    	; 0x11c68 <gpib_init_devices>
   11e84:	80 e0       	ldi	r24, 0x00	; 0
   11e86:	0e 94 b1 2c 	call	0x5962	; 0x5962 <uart_keyhit>
        {
            gpib_init_devices();
   11e8a:	89 2b       	or	r24, r25
   11e8c:	11 f0       	breq	.+4      	; 0x11e92 <gpib_error_test+0xf2>
   11e8e:	ec de       	rcall	.-552    	; 0x11c68 <gpib_init_devices>
            return(ABORT_FLAG);
        }

/// @todo  do we want to always exit here ?
///  low level GPIB functions are still useful even without a DISK
        if( mmc_ins_status() != 1 )
   11e90:	0b c0       	rjmp	.+22     	; 0x11ea8 <gpib_error_test+0x108>
   11e92:	0e 94 8d 71 	call	0xe31a	; 0xe31a <mmc_ins_status>
   11e96:	01 97       	sbiw	r24, 0x01	; 1
        {
            return(ABORT_FLAG);
        }

		// Wait for IFC free
        if(val & IFC_FLAG )
   11e98:	39 f4       	brne	.+14     	; 0x11ea8 <gpib_error_test+0x108>
   11e9a:	01 15       	cp	r16, r1
   11e9c:	11 05       	cpc	r17, r1
        {
            while(GPIB_IO_RD(IFC) == 0)
   11e9e:	31 f0       	breq	.+12     	; 0x11eac <gpib_error_test+0x10c>
   11ea0:	54 98       	cbi	0x0a, 4	; 10
   11ea2:	4c 9b       	sbis	0x09, 4	; 9
   11ea4:	fd cf       	rjmp	.-6      	; 0x11ea0 <gpib_error_test+0x100>

/// @todo  do we want to always exit here ?
///  low level GPIB functions are still useful even without a DISK
        if( mmc_ins_status() != 1 )
        {
            return(ABORT_FLAG);
   11ea6:	02 c0       	rjmp	.+4      	; 0x11eac <gpib_error_test+0x10c>
   11ea8:	c1 e0       	ldi	r28, 0x01	; 1
                ;
        }
        return(val);
    }
    return(0);
}
   11eaa:	d0 e0       	ldi	r29, 0x00	; 0
   11eac:	ce 01       	movw	r24, r28
   11eae:	cd b7       	in	r28, 0x3d	; 61
   11eb0:	de b7       	in	r29, 0x3e	; 62
   11eb2:	23 96       	adiw	r28, 0x03	; 3
   11eb4:	e6 e0       	ldi	r30, 0x06	; 6
   11eb6:	0c 94 41 e5 	jmp	0x1ca82	; 0x1ca82 <__epilogue_restores__+0x18>

00011eba <GPIB_COMMANDS>:
///
/// @return GPIB status from emulator command.
/// @return 0 if no emulator command processed.

uint16_t GPIB_COMMANDS(uint16_t val, uint8_t unread)
{
   11eba:	1f 93       	push	r17
   11ebc:	cf 93       	push	r28
   11ebe:	df 93       	push	r29
   11ec0:	ec 01       	movw	r28, r24
   11ec2:	16 2f       	mov	r17, r22
    uint16_t status;

    ///@brief talking ?
    if(talking != UNT)
   11ec4:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <talking>
   11ec8:	8f 35       	cpi	r24, 0x5F	; 95
   11eca:	91 f0       	breq	.+36     	; 0x11ef0 <GPIB_COMMANDS+0x36>
    {

#ifdef AMIGO
        if ( AMIGO_is_MLA(listening) )
   11ecc:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   11ed0:	90 e0       	ldi	r25, 0x00	; 0
   11ed2:	7f de       	rcall	.-770    	; 0x11bd2 <AMIGO_is_MLA>
   11ed4:	89 2b       	or	r24, r25
   11ed6:	c9 f4       	brne	.+50     	; 0x11f0a <GPIB_COMMANDS+0x50>
            secondary = 0;
            return(status);
        }
#endif                      // ifdef AMIGO

        if ( SS80_is_MLA(listening) )
   11ed8:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   11edc:	90 e0       	ldi	r25, 0x00	; 0
   11ede:	4c de       	rcall	.-872    	; 0x11b78 <SS80_is_MLA>
   11ee0:	89 2b       	or	r24, r25
   11ee2:	11 f5       	brne	.+68     	; 0x11f28 <GPIB_COMMANDS+0x6e>
            status = SS80_COMMANDS(secondary);
            secondary = 0;
            return(status);
        }

        if ( PRINTER_is_MLA(listening) )
   11ee4:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   11ee8:	90 e0       	ldi	r25, 0x00	; 0
   11eea:	a0 de       	rcall	.-704    	; 0x11c2c <PRINTER_is_MLA>
   11eec:	89 2b       	or	r24, r25
   11eee:	59 f5       	brne	.+86     	; 0x11f46 <GPIB_COMMANDS+0x8c>
            return(status);
        }
    }

    ///@brief listening ?
    if(listening != UNL)
   11ef0:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   11ef4:	8f 33       	cpi	r24, 0x3F	; 63
   11ef6:	19 f4       	brne	.+6      	; 0x11efe <GPIB_COMMANDS+0x44>
            status = PRINTER_COMMANDS(secondary);
            secondary = 0;
            return(status);
        }
    }
    return(0);
   11ef8:	80 e0       	ldi	r24, 0x00	; 0
   11efa:	90 e0       	ldi	r25, 0x00	; 0

    ///@brief listening ?
    if(listening != UNL)
    {
#ifdef AMIGO
        if ( AMIGO_is_MTA(talking) )
   11efc:	2e c0       	rjmp	.+92     	; 0x11f5a <GPIB_COMMANDS+0xa0>
   11efe:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <talking>
   11f02:	90 e0       	ldi	r25, 0x00	; 0
   11f04:	75 de       	rcall	.-790    	; 0x11bf0 <AMIGO_is_MTA>
        {
            if(unread)
   11f06:	89 2b       	or	r24, r25
   11f08:	49 f0       	breq	.+18     	; 0x11f1c <GPIB_COMMANDS+0x62>
                gpib_unread(val);
   11f0a:	11 23       	and	r17, r17
   11f0c:	11 f0       	breq	.+4      	; 0x11f12 <GPIB_COMMANDS+0x58>
   11f0e:	ce 01       	movw	r24, r28
            status = AMIGO_COMMANDS(secondary);
   11f10:	a6 d8       	rcall	.-3764   	; 0x1105e <gpib_unread>
   11f12:	80 91 87 1e 	lds	r24, 0x1E87	; 0x801e87 <secondary>
   11f16:	0e 94 60 be 	call	0x17cc0	; 0x17cc0 <AMIGO_COMMANDS>
            secondary = 0;
            return(status);
        }
#endif 

        if ( SS80_is_MTA(talking) )
   11f1a:	1d c0       	rjmp	.+58     	; 0x11f56 <GPIB_COMMANDS+0x9c>
   11f1c:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <talking>
   11f20:	90 e0       	ldi	r25, 0x00	; 0
   11f22:	39 de       	rcall	.-910    	; 0x11b96 <SS80_is_MTA>
        {
            if(unread)
   11f24:	89 2b       	or	r24, r25
   11f26:	49 f0       	breq	.+18     	; 0x11f3a <GPIB_COMMANDS+0x80>
                gpib_unread(val);
   11f28:	11 23       	and	r17, r17
   11f2a:	11 f0       	breq	.+4      	; 0x11f30 <GPIB_COMMANDS+0x76>
   11f2c:	ce 01       	movw	r24, r28
            status = SS80_COMMANDS(secondary);
   11f2e:	97 d8       	rcall	.-3794   	; 0x1105e <gpib_unread>
   11f30:	80 91 87 1e 	lds	r24, 0x1E87	; 0x801e87 <secondary>
   11f34:	0e 94 bd b2 	call	0x1657a	; 0x1657a <SS80_COMMANDS>
            secondary = 0;
            return(status);
        }

        if ( PRINTER_is_MTA(talking) )
   11f38:	0e c0       	rjmp	.+28     	; 0x11f56 <GPIB_COMMANDS+0x9c>
   11f3a:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <talking>
   11f3e:	90 e0       	ldi	r25, 0x00	; 0
   11f40:	84 de       	rcall	.-760    	; 0x11c4a <PRINTER_is_MTA>
        {
            if(unread)
   11f42:	89 2b       	or	r24, r25
   11f44:	c9 f2       	breq	.-78     	; 0x11ef8 <GPIB_COMMANDS+0x3e>
                gpib_unread(val);
   11f46:	11 23       	and	r17, r17
   11f48:	11 f0       	breq	.+4      	; 0x11f4e <GPIB_COMMANDS+0x94>
   11f4a:	ce 01       	movw	r24, r28
            status = PRINTER_COMMANDS(secondary);
   11f4c:	88 d8       	rcall	.-3824   	; 0x1105e <gpib_unread>
   11f4e:	80 91 87 1e 	lds	r24, 0x1E87	; 0x801e87 <secondary>
   11f52:	0e 94 d9 c0 	call	0x181b2	; 0x181b2 <PRINTER_COMMANDS>
            secondary = 0;
   11f56:	10 92 87 1e 	sts	0x1E87, r1	; 0x801e87 <secondary>
            return(status);
        }
    }
    return(0);
}
   11f5a:	df 91       	pop	r29
   11f5c:	cf 91       	pop	r28
   11f5e:	1f 91       	pop	r17
   11f60:	08 95       	ret

00011f62 <Send_Identify>:
///
/// @return  0 on GPIB error returns error flags
/// @see gpib.h ERROR_MASK for a full list.

int Send_Identify(uint8_t ch, uint16_t ID)
{
   11f62:	cf 92       	push	r12
   11f64:	df 92       	push	r13
   11f66:	ff 92       	push	r15
   11f68:	0f 93       	push	r16
   11f6a:	1f 93       	push	r17
   11f6c:	cf 93       	push	r28
   11f6e:	df 93       	push	r29
   11f70:	cd b7       	in	r28, 0x3d	; 61
   11f72:	de b7       	in	r29, 0x3e	; 62
   11f74:	2b 97       	sbiw	r28, 0x0b	; 11
   11f76:	0f b6       	in	r0, 0x3f	; 63
   11f78:	f8 94       	cli
   11f7a:	de bf       	out	0x3e, r29	; 62
   11f7c:	0f be       	out	0x3f, r0	; 63
   11f7e:	cd bf       	out	0x3d, r28	; 61
   11f80:	f8 2e       	mov	r15, r24
   11f82:	6b 01       	movw	r12, r22
    uint16_t status = EOI_FLAG;
   11f84:	80 e0       	ldi	r24, 0x00	; 0
   11f86:	91 e0       	ldi	r25, 0x01	; 1
   11f88:	9b 87       	std	Y+11, r25	; 0x0b
   11f8a:	8a 87       	std	Y+10, r24	; 0x0a
    uint8_t tmp[2];

    V2B_MSB(tmp,0,2,ID);
   11f8c:	8b 01       	movw	r16, r22
   11f8e:	20 e0       	ldi	r18, 0x00	; 0
   11f90:	30 e0       	ldi	r19, 0x00	; 0
   11f92:	42 e0       	ldi	r20, 0x02	; 2
   11f94:	50 e0       	ldi	r21, 0x00	; 0
   11f96:	60 e0       	ldi	r22, 0x00	; 0
   11f98:	70 e0       	ldi	r23, 0x00	; 0
   11f9a:	ce 01       	movw	r24, r28
   11f9c:	08 96       	adiw	r24, 0x08	; 8
   11f9e:	0e 94 14 c1 	call	0x18228	; 0x18228 <V2B_MSB>
    if(gpib_write_str(tmp,2, &status) != 2)
   11fa2:	ae 01       	movw	r20, r28
   11fa4:	46 5f       	subi	r20, 0xF6	; 246
   11fa6:	5f 4f       	sbci	r21, 0xFF	; 255
   11fa8:	62 e0       	ldi	r22, 0x02	; 2
   11faa:	70 e0       	ldi	r23, 0x00	; 0
   11fac:	ce 01       	movw	r24, r28
   11fae:	08 96       	adiw	r24, 0x08	; 8
   11fb0:	21 dd       	rcall	.-1470   	; 0x119f4 <gpib_write_str>
   11fb2:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   11fb6:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   11fba:	02 97       	sbiw	r24, 0x02	; 2
   11fbc:	79 f0       	breq	.+30     	; 0x11fdc <Send_Identify+0x7a>
    {
        if(debuglevel & (1+4))
   11fbe:	25 70       	andi	r18, 0x05	; 5
   11fc0:	33 27       	eor	r19, r19
   11fc2:	23 2b       	or	r18, r19
   11fc4:	e9 f0       	breq	.+58     	; 0x12000 <Send_Identify+0x9e>
            printf("[IDENT Unit:%02XH=%04XH FAILED]\n", 
   11fc6:	ed b7       	in	r30, 0x3d	; 61
   11fc8:	fe b7       	in	r31, 0x3e	; 62
   11fca:	d7 82       	std	Z+7, r13	; 0x07
   11fcc:	c6 82       	std	Z+6, r12	; 0x06
   11fce:	8f 2d       	mov	r24, r15
   11fd0:	90 e0       	ldi	r25, 0x00	; 0
   11fd2:	95 83       	std	Z+5, r25	; 0x05
   11fd4:	84 83       	std	Z+4, r24	; 0x04
   11fd6:	8d e4       	ldi	r24, 0x4D	; 77
   11fd8:	92 e1       	ldi	r25, 0x12	; 18
   11fda:	0c c0       	rjmp	.+24     	; 0x11ff4 <Send_Identify+0x92>
                (int)ch,(int)ID);
        return(status & ERROR_MASK);
    }
#if SDEBUG
    if(debuglevel & 4)
   11fdc:	22 ff       	sbrs	r18, 2
   11fde:	10 c0       	rjmp	.+32     	; 0x12000 <Send_Identify+0x9e>
        printf("[IDENT Unit:%02XH=%04XH]\n", (int)ch,(int)ID);
   11fe0:	ed b7       	in	r30, 0x3d	; 61
   11fe2:	fe b7       	in	r31, 0x3e	; 62
   11fe4:	d7 82       	std	Z+7, r13	; 0x07
   11fe6:	c6 82       	std	Z+6, r12	; 0x06
   11fe8:	8f 2d       	mov	r24, r15
   11fea:	90 e0       	ldi	r25, 0x00	; 0
   11fec:	95 83       	std	Z+5, r25	; 0x05
   11fee:	84 83       	std	Z+4, r24	; 0x04
   11ff0:	83 e3       	ldi	r24, 0x33	; 51
   11ff2:	92 e1       	ldi	r25, 0x12	; 18
   11ff4:	a0 e0       	ldi	r26, 0x00	; 0
   11ff6:	81 83       	std	Z+1, r24	; 0x01
   11ff8:	92 83       	std	Z+2, r25	; 0x02
   11ffa:	a3 83       	std	Z+3, r26	; 0x03
   11ffc:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
#endif
    return (status & ERROR_MASK);
   12000:	8a 85       	ldd	r24, Y+10	; 0x0a
   12002:	9b 85       	ldd	r25, Y+11	; 0x0b
   12004:	88 27       	eor	r24, r24
   12006:	90 7d       	andi	r25, 0xD0	; 208
}
   12008:	2b 96       	adiw	r28, 0x0b	; 11
   1200a:	0f b6       	in	r0, 0x3f	; 63
   1200c:	f8 94       	cli
   1200e:	de bf       	out	0x3e, r29	; 62
   12010:	0f be       	out	0x3f, r0	; 63
   12012:	cd bf       	out	0x3d, r28	; 61
   12014:	df 91       	pop	r29
   12016:	cf 91       	pop	r28
   12018:	1f 91       	pop	r17
   1201a:	0f 91       	pop	r16
   1201c:	ff 90       	pop	r15
   1201e:	df 90       	pop	r13
   12020:	cf 90       	pop	r12
   12022:	08 95       	ret

00012024 <GPIB>:
/// @return  0 on sucess
/// @return GPIB error flags on fail
/// @see gpib.h ERROR_MASK defines for a full list.

int GPIB(uint8_t ch)
{
   12024:	00 d0       	rcall	.+0      	; 0x12026 <GPIB+0x2>
   12026:	00 d0       	rcall	.+0      	; 0x12028 <GPIB+0x4>
   12028:	1f 92       	push	r1
   1202a:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   1202e:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
    ///@brief Parallel Poll Configure
    ///TODO
    if(ch == PPC)
   12032:	85 30       	cpi	r24, 0x05	; 5
   12034:	89 f4       	brne	.+34     	; 0x12058 <GPIB+0x34>
    {
#if SDEBUG
        if(debuglevel & (4+16))
   12036:	24 71       	andi	r18, 0x14	; 20
   12038:	33 27       	eor	r19, r19
   1203a:	23 2b       	or	r18, r19
   1203c:	51 f0       	breq	.+20     	; 0x12052 <GPIB+0x2e>
            printf("[PPC unsupported]\n");
   1203e:	80 e2       	ldi	r24, 0x20	; 32
   12040:	92 e1       	ldi	r25, 0x12	; 18
   12042:	a0 e0       	ldi	r26, 0x00	; 0
   12044:	ed b7       	in	r30, 0x3d	; 61
   12046:	fe b7       	in	r31, 0x3e	; 62
   12048:	81 83       	std	Z+1, r24	; 0x01
   1204a:	92 83       	std	Z+2, r25	; 0x02
   1204c:	a3 83       	std	Z+3, r26	; 0x03
   1204e:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
#endif
        spoll = 0;
   12052:	10 92 83 1e 	sts	0x1E83, r1	; 0x801e83 <spoll>
   12056:	9c c0       	rjmp	.+312    	; 0x12190 <GPIB+0x16c>
        return 0;
    }
    ///@brief Parallel Poll Unconfigure
    ///TODO
    if(ch == PPU)
   12058:	85 31       	cpi	r24, 0x15	; 21
   1205a:	39 f4       	brne	.+14     	; 0x1206a <GPIB+0x46>
    {
#if SDEBUG
        if(debuglevel & (4+16))
   1205c:	24 71       	andi	r18, 0x14	; 20
   1205e:	33 27       	eor	r19, r19
   12060:	23 2b       	or	r18, r19
   12062:	b9 f3       	breq	.-18     	; 0x12052 <GPIB+0x2e>
            printf("[PPU unsupported]\n");
   12064:	8d e0       	ldi	r24, 0x0D	; 13
   12066:	92 e1       	ldi	r25, 0x12	; 18
   12068:	ec cf       	rjmp	.-40     	; 0x12042 <GPIB+0x1e>
    }

/// @todo FIXME
#if defined(SPOLL)
    ///@brief Serial Poll Enable
    if(ch == SPE)
   1206a:	88 31       	cpi	r24, 0x18	; 24
   1206c:	c9 f4       	brne	.+50     	; 0x120a0 <GPIB+0x7c>
    {
#if SDEBUG
        if(debuglevel & 4)
   1206e:	22 ff       	sbrs	r18, 2
   12070:	0a c0       	rjmp	.+20     	; 0x12086 <GPIB+0x62>
            printf("[SPE]\n");
   12072:	86 e0       	ldi	r24, 0x06	; 6
   12074:	92 e1       	ldi	r25, 0x12	; 18
   12076:	a0 e0       	ldi	r26, 0x00	; 0
   12078:	ed b7       	in	r30, 0x3d	; 61
   1207a:	fe b7       	in	r31, 0x3e	; 62
   1207c:	81 83       	std	Z+1, r24	; 0x01
   1207e:	92 83       	std	Z+2, r25	; 0x02
   12080:	a3 83       	std	Z+3, r26	; 0x03
   12082:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
#endif
        spoll = 1;
   12086:	81 e0       	ldi	r24, 0x01	; 1
   12088:	80 93 83 1e 	sts	0x1E83, r24	; 0x801e83 <spoll>
        if(SS80_is_MTA(talking))
   1208c:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <talking>
   12090:	90 e0       	ldi	r25, 0x00	; 0
   12092:	81 dd       	rcall	.-1278   	; 0x11b96 <SS80_is_MTA>
   12094:	89 2b       	or	r24, r25
   12096:	09 f4       	brne	.+2      	; 0x1209a <GPIB+0x76>
   12098:	7b c0       	rjmp	.+246    	; 0x12190 <GPIB+0x16c>
        {
            return( SS80_Report() );
   1209a:	0e 94 76 ae 	call	0x15cec	; 0x15cec <SS80_Report>
   1209e:	7a c0       	rjmp	.+244    	; 0x12194 <GPIB+0x170>
        }
        return 0;
    }

    ///@brief Serial Poll Disable
    if(ch == SPD)
   120a0:	89 31       	cpi	r24, 0x19	; 25
   120a2:	29 f4       	brne	.+10     	; 0x120ae <GPIB+0x8a>
    {
#if SDEBUG
        if(debuglevel & 4)
   120a4:	22 ff       	sbrs	r18, 2
   120a6:	d5 cf       	rjmp	.-86     	; 0x12052 <GPIB+0x2e>
            printf("[SPD]\n");
   120a8:	8f ef       	ldi	r24, 0xFF	; 255
   120aa:	91 e1       	ldi	r25, 0x11	; 17
   120ac:	ca cf       	rjmp	.-108    	; 0x12042 <GPIB+0x1e>
        return 0;
    }
#endif                      // #if defined(SPOLL)

    ///@brief Selected Device Clear
    if(ch == SDC )
   120ae:	84 30       	cpi	r24, 0x04	; 4
   120b0:	09 f0       	breq	.+2      	; 0x120b4 <GPIB+0x90>
   120b2:	48 c0       	rjmp	.+144    	; 0x12144 <GPIB+0x120>
    {
#if SDEBUG
        if(debuglevel & 4)
   120b4:	22 ff       	sbrs	r18, 2
   120b6:	0a c0       	rjmp	.+20     	; 0x120cc <GPIB+0xa8>
            printf("[SDC]\n");
   120b8:	88 ef       	ldi	r24, 0xF8	; 248
   120ba:	91 e1       	ldi	r25, 0x11	; 17
   120bc:	a0 e0       	ldi	r26, 0x00	; 0
   120be:	ed b7       	in	r30, 0x3d	; 61
   120c0:	fe b7       	in	r31, 0x3e	; 62
   120c2:	81 83       	std	Z+1, r24	; 0x01
   120c4:	92 83       	std	Z+2, r25	; 0x02
   120c6:	a3 83       	std	Z+3, r26	; 0x03
   120c8:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
#endif
        if(SS80_is_MLA(listening))
   120cc:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   120d0:	90 e0       	ldi	r25, 0x00	; 0
   120d2:	52 dd       	rcall	.-1372   	; 0x11b78 <SS80_is_MLA>
   120d4:	89 2b       	or	r24, r25
   120d6:	d9 f0       	breq	.+54     	; 0x1210e <GPIB+0xea>
        {
///  Note: Suposed to be unsupported in SS80 - pg 4-2
///  CS80 3-4
#if SDEBUG
            if(debuglevel & (4+32))
   120d8:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   120dc:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   120e0:	84 72       	andi	r24, 0x24	; 36
   120e2:	99 27       	eor	r25, r25
   120e4:	89 2b       	or	r24, r25
   120e6:	51 f0       	breq	.+20     	; 0x120fc <GPIB+0xd8>
                printf("[SDC SS80]\n");
   120e8:	8c ee       	ldi	r24, 0xEC	; 236
   120ea:	91 e1       	ldi	r25, 0x11	; 17
   120ec:	a0 e0       	ldi	r26, 0x00	; 0
   120ee:	ed b7       	in	r30, 0x3d	; 61
   120f0:	fe b7       	in	r31, 0x3e	; 62
   120f2:	81 83       	std	Z+1, r24	; 0x01
   120f4:	92 83       	std	Z+2, r25	; 0x02
   120f6:	a3 83       	std	Z+3, r26	; 0x03
   120f8:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
#endif
            return(SS80_Selected_Device_Clear(SS80s->unitNO) );
   120fc:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   12100:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   12104:	85 81       	ldd	r24, Z+5	; 0x05
   12106:	90 e0       	ldi	r25, 0x00	; 0
   12108:	0e 94 42 af 	call	0x15e84	; 0x15e84 <SS80_Selected_Device_Clear>
   1210c:	43 c0       	rjmp	.+134    	; 0x12194 <GPIB+0x170>
        }

#ifdef AMIGO
        if(AMIGO_is_MLA(listening))
   1210e:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   12112:	90 e0       	ldi	r25, 0x00	; 0
   12114:	5e dd       	rcall	.-1348   	; 0x11bd2 <AMIGO_is_MLA>
   12116:	89 2b       	or	r24, r25
   12118:	d9 f1       	breq	.+118    	; 0x12190 <GPIB+0x16c>
        {
///  Note: Suposed to be unsupported in SS80 - pg 4-2
#if SDEBUG
            if(debuglevel & (4+32))
   1211a:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1211e:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   12122:	84 72       	andi	r24, 0x24	; 36
   12124:	99 27       	eor	r25, r25
   12126:	89 2b       	or	r24, r25
   12128:	51 f0       	breq	.+20     	; 0x1213e <GPIB+0x11a>
                printf("[SDC AMIGO]\n");
   1212a:	8f ed       	ldi	r24, 0xDF	; 223
   1212c:	91 e1       	ldi	r25, 0x11	; 17
   1212e:	a0 e0       	ldi	r26, 0x00	; 0
   12130:	ed b7       	in	r30, 0x3d	; 61
   12132:	fe b7       	in	r31, 0x3e	; 62
   12134:	81 83       	std	Z+1, r24	; 0x01
   12136:	92 83       	std	Z+2, r25	; 0x02
   12138:	a3 83       	std	Z+3, r26	; 0x03
   1213a:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
#endif
            return( amigo_cmd_clear() );
   1213e:	0e 94 48 b9 	call	0x17290	; 0x17290 <amigo_cmd_clear>
   12142:	28 c0       	rjmp	.+80     	; 0x12194 <GPIB+0x170>
        /// @todo FIXME
        return( 0 );
    }

    ///@brief   (Universal) Device Clear
    if(ch == DCL )
   12144:	84 31       	cpi	r24, 0x14	; 20
   12146:	99 f4       	brne	.+38     	; 0x1216e <GPIB+0x14a>
    {
#if SDEBUG
        if(debuglevel & 4)
   12148:	22 ff       	sbrs	r18, 2
   1214a:	0a c0       	rjmp	.+20     	; 0x12160 <GPIB+0x13c>
            printf("[DCL]\n");
   1214c:	88 ed       	ldi	r24, 0xD8	; 216
   1214e:	91 e1       	ldi	r25, 0x11	; 17
   12150:	a0 e0       	ldi	r26, 0x00	; 0
   12152:	ed b7       	in	r30, 0x3d	; 61
   12154:	fe b7       	in	r31, 0x3e	; 62
   12156:	81 83       	std	Z+1, r24	; 0x01
   12158:	92 83       	std	Z+2, r25	; 0x02
   1215a:	a3 83       	std	Z+3, r26	; 0x03
   1215c:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
#endif
        SS80_Universal_Device_Clear();
   12160:	0e 94 34 af 	call	0x15e68	; 0x15e68 <SS80_Universal_Device_Clear>

#ifdef AMIGO
        amigo_cmd_clear();
   12164:	0e 94 48 b9 	call	0x17290	; 0x17290 <amigo_cmd_clear>
#endif

/// @todo Fixme
        printer_close();
   12168:	0e 94 65 bf 	call	0x17eca	; 0x17eca <printer_close>
   1216c:	11 c0       	rjmp	.+34     	; 0x12190 <GPIB+0x16c>
        return( 0 );
    }

    if(debuglevel & (1+4+16))
   1216e:	25 71       	andi	r18, 0x15	; 21
   12170:	33 27       	eor	r19, r19
   12172:	23 2b       	or	r18, r19
   12174:	69 f0       	breq	.+26     	; 0x12190 <GPIB+0x16c>
        printf("[HPIB (%02XH) not defined]\n", 0xff & ch);
   12176:	90 e0       	ldi	r25, 0x00	; 0
   12178:	ed b7       	in	r30, 0x3d	; 61
   1217a:	fe b7       	in	r31, 0x3e	; 62
   1217c:	95 83       	std	Z+5, r25	; 0x05
   1217e:	84 83       	std	Z+4, r24	; 0x04
   12180:	8c eb       	ldi	r24, 0xBC	; 188
   12182:	91 e1       	ldi	r25, 0x11	; 17
   12184:	a0 e0       	ldi	r26, 0x00	; 0
   12186:	81 83       	std	Z+1, r24	; 0x01
   12188:	92 83       	std	Z+2, r25	; 0x02
   1218a:	a3 83       	std	Z+3, r26	; 0x03
   1218c:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    return(0);
   12190:	80 e0       	ldi	r24, 0x00	; 0
   12192:	90 e0       	ldi	r25, 0x00	; 0
}
   12194:	0f 90       	pop	r0
   12196:	0f 90       	pop	r0
   12198:	0f 90       	pop	r0
   1219a:	0f 90       	pop	r0
   1219c:	0f 90       	pop	r0
   1219e:	08 95       	ret

000121a0 <GPIB_TALK>:
/// @param[in] ch 8 bit talk command
///
/// @return  0

int GPIB_TALK(uint8_t ch)
{
   121a0:	cf 93       	push	r28
   121a2:	df 93       	push	r29
   121a4:	00 d0       	rcall	.+0      	; 0x121a6 <GPIB_TALK+0x6>
   121a6:	00 d0       	rcall	.+0      	; 0x121a8 <GPIB_TALK+0x8>
   121a8:	1f 92       	push	r1

///  NOTE: we must track the "addressed state" of each device
///  so we can determine its state - ie: command vs Secondary states
///  save talking state
    talking_last = talking;
   121aa:	90 91 86 1e 	lds	r25, 0x1E86	; 0x801e86 <talking>
   121ae:	90 93 89 1e 	sts	0x1E89, r25	; 0x801e89 <talking_last>
    talking = ch;
   121b2:	80 93 86 1e 	sts	0x1E86, r24	; 0x801e86 <talking>

    talk_cleanup();

    ///@brief  Universal Untalk
    if(ch == UNT)
   121b6:	8f 35       	cpi	r24, 0x5F	; 95
   121b8:	79 f4       	brne	.+30     	; 0x121d8 <GPIB_TALK+0x38>
    {
        //FIXME talking = 0 ????
#if SDEBUG
        if(debuglevel & 4)
   121ba:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   121be:	82 ff       	sbrs	r24, 2
   121c0:	7f c0       	rjmp	.+254    	; 0x122c0 <GPIB_TALK+0x120>
            printf("[UNT]\n");
   121c2:	89 e6       	ldi	r24, 0x69	; 105
   121c4:	91 e1       	ldi	r25, 0x11	; 17
   121c6:	a0 e0       	ldi	r26, 0x00	; 0
   121c8:	ed b7       	in	r30, 0x3d	; 61
   121ca:	fe b7       	in	r31, 0x3e	; 62
   121cc:	81 83       	std	Z+1, r24	; 0x01
   121ce:	92 83       	std	Z+2, r25	; 0x02
   121d0:	a3 83       	std	Z+3, r26	; 0x03
   121d2:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   121d6:	74 c0       	rjmp	.+232    	; 0x122c0 <GPIB_TALK+0x120>
#endif
        return(0);
    }

    
    if(SS80_is_MTA(ch))
   121d8:	c8 2f       	mov	r28, r24
   121da:	d0 e0       	ldi	r29, 0x00	; 0
   121dc:	ce 01       	movw	r24, r28
   121de:	db dc       	rcall	.-1610   	; 0x11b96 <SS80_is_MTA>
   121e0:	89 2b       	or	r24, r25
   121e2:	e1 f0       	breq	.+56     	; 0x1221c <GPIB_TALK+0x7c>
    {
#if SDEBUG
        if(debuglevel & (4+32))
   121e4:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   121e8:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   121ec:	84 72       	andi	r24, 0x24	; 36
   121ee:	99 27       	eor	r25, r25
   121f0:	89 2b       	or	r24, r25
   121f2:	61 f0       	breq	.+24     	; 0x1220c <GPIB_TALK+0x6c>
            printf("[TA %02XH SS80]\n", 0xff & ch);
   121f4:	ed b7       	in	r30, 0x3d	; 61
   121f6:	fe b7       	in	r31, 0x3e	; 62
   121f8:	d5 83       	std	Z+5, r29	; 0x05
   121fa:	c4 83       	std	Z+4, r28	; 0x04
   121fc:	88 e5       	ldi	r24, 0x58	; 88
   121fe:	91 e1       	ldi	r25, 0x11	; 17
   12200:	a0 e0       	ldi	r26, 0x00	; 0
   12202:	81 83       	std	Z+1, r24	; 0x01
   12204:	92 83       	std	Z+2, r25	; 0x02
   12206:	a3 83       	std	Z+3, r26	; 0x03
   12208:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
#endif

        if (spoll)
   1220c:	80 91 83 1e 	lds	r24, 0x1E83	; 0x801e83 <spoll>
   12210:	88 23       	and	r24, r24
   12212:	09 f4       	brne	.+2      	; 0x12216 <GPIB_TALK+0x76>
   12214:	55 c0       	rjmp	.+170    	; 0x122c0 <GPIB_TALK+0x120>
        {
            SS80_Report();
   12216:	0e 94 76 ae 	call	0x15cec	; 0x15cec <SS80_Report>
        }
        return(0);
    }

#ifdef AMIGO
    if(AMIGO_is_MTA(ch))
   1221a:	52 c0       	rjmp	.+164    	; 0x122c0 <GPIB_TALK+0x120>
   1221c:	ce 01       	movw	r24, r28
   1221e:	e8 dc       	rcall	.-1584   	; 0x11bf0 <AMIGO_is_MTA>
   12220:	89 2b       	or	r24, r25
    {
#if SDEBUG
        if(debuglevel & (4+32))
   12222:	81 f0       	breq	.+32     	; 0x12244 <GPIB_TALK+0xa4>
   12224:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   12228:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1222c:	84 72       	andi	r24, 0x24	; 36
   1222e:	99 27       	eor	r25, r25
   12230:	89 2b       	or	r24, r25
   12232:	09 f4       	brne	.+2      	; 0x12236 <GPIB_TALK+0x96>
            printf("[TA %02XH AMIGO]\n", 0xff & ch);
   12234:	45 c0       	rjmp	.+138    	; 0x122c0 <GPIB_TALK+0x120>
   12236:	ed b7       	in	r30, 0x3d	; 61
   12238:	fe b7       	in	r31, 0x3e	; 62
   1223a:	d5 83       	std	Z+5, r29	; 0x05
   1223c:	c4 83       	std	Z+4, r28	; 0x04
   1223e:	86 e4       	ldi	r24, 0x46	; 70
#endif
        return(0);
    }
#endif                      // #ifdef AMIGO

    if(PRINTER_is_MTA(ch))
   12240:	91 e1       	ldi	r25, 0x11	; 17
   12242:	38 c0       	rjmp	.+112    	; 0x122b4 <GPIB_TALK+0x114>
   12244:	ce 01       	movw	r24, r28
   12246:	01 dd       	rcall	.-1534   	; 0x11c4a <PRINTER_is_MTA>
   12248:	89 2b       	or	r24, r25
    {
#if SDEBUG
        if(debuglevel & (4+32))
   1224a:	79 f0       	breq	.+30     	; 0x1226a <GPIB_TALK+0xca>
   1224c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   12250:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   12254:	84 72       	andi	r24, 0x24	; 36
   12256:	99 27       	eor	r25, r25
   12258:	89 2b       	or	r24, r25
            printf("[TA %02XH PRINTER]\n", 0xff & ch);
   1225a:	91 f1       	breq	.+100    	; 0x122c0 <GPIB_TALK+0x120>
   1225c:	ed b7       	in	r30, 0x3d	; 61
   1225e:	fe b7       	in	r31, 0x3e	; 62
   12260:	d5 83       	std	Z+5, r29	; 0x05
   12262:	c4 83       	std	Z+4, r28	; 0x04
   12264:	82 e3       	ldi	r24, 0x32	; 50
#endif
        return(0);
    }

    if(PRINTER_is_MLA(listening))
   12266:	91 e1       	ldi	r25, 0x11	; 17
   12268:	25 c0       	rjmp	.+74     	; 0x122b4 <GPIB_TALK+0x114>
   1226a:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   1226e:	90 e0       	ldi	r25, 0x00	; 0
   12270:	dd dc       	rcall	.-1606   	; 0x11c2c <PRINTER_is_MLA>
   12272:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   12276:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
    {
        if(debuglevel & (4+32))
   1227a:	89 2b       	or	r24, r25
   1227c:	99 f0       	breq	.+38     	; 0x122a4 <GPIB_TALK+0x104>
   1227e:	24 72       	andi	r18, 0x24	; 36
   12280:	33 27       	eor	r19, r19
            printf("[PRINTER OPEN]\n");
   12282:	23 2b       	or	r18, r19
   12284:	51 f0       	breq	.+20     	; 0x1229a <GPIB_TALK+0xfa>
   12286:	82 e2       	ldi	r24, 0x22	; 34
   12288:	91 e1       	ldi	r25, 0x11	; 17
   1228a:	a0 e0       	ldi	r26, 0x00	; 0
   1228c:	ed b7       	in	r30, 0x3d	; 61
   1228e:	fe b7       	in	r31, 0x3e	; 62
   12290:	81 83       	std	Z+1, r24	; 0x01
   12292:	92 83       	std	Z+2, r25	; 0x02
   12294:	a3 83       	std	Z+3, r26	; 0x03
        printer_open(NULL);
   12296:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   1229a:	80 e0       	ldi	r24, 0x00	; 0
   1229c:	90 e0       	ldi	r25, 0x00	; 0
   1229e:	0e 94 bd bf 	call	0x17f7a	; 0x17f7a <printer_open>
        return(0);
    }

#if SDEBUG
    if(debuglevel & 4)
   122a2:	0e c0       	rjmp	.+28     	; 0x122c0 <GPIB_TALK+0x120>
        printf("[TA %02XH]\n", 0xff & ch);
   122a4:	22 ff       	sbrs	r18, 2
   122a6:	0c c0       	rjmp	.+24     	; 0x122c0 <GPIB_TALK+0x120>
   122a8:	ed b7       	in	r30, 0x3d	; 61
   122aa:	fe b7       	in	r31, 0x3e	; 62
   122ac:	d5 83       	std	Z+5, r29	; 0x05
   122ae:	c4 83       	std	Z+4, r28	; 0x04
   122b0:	86 e1       	ldi	r24, 0x16	; 22
   122b2:	91 e1       	ldi	r25, 0x11	; 17
   122b4:	a0 e0       	ldi	r26, 0x00	; 0
   122b6:	81 83       	std	Z+1, r24	; 0x01
   122b8:	92 83       	std	Z+2, r25	; 0x02
   122ba:	a3 83       	std	Z+3, r26	; 0x03
#endif
    return(0);
}                                                 // Talk Address primary address group
   122bc:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   122c0:	80 e0       	ldi	r24, 0x00	; 0
   122c2:	90 e0       	ldi	r25, 0x00	; 0
   122c4:	cd b7       	in	r28, 0x3d	; 61
   122c6:	de b7       	in	r29, 0x3e	; 62
   122c8:	25 96       	adiw	r28, 0x05	; 5
   122ca:	e2 e0       	ldi	r30, 0x02	; 2
   122cc:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__epilogue_restores__+0x20>

000122d0 <GPIB_SECONDARY_ADDRESS>:
///
/// @param[in] ch 8 bit secondary address.
///
/// @return  0
int GPIB_SECONDARY_ADDRESS(uint8_t ch)
{
   122d0:	a9 e0       	ldi	r26, 0x09	; 9
   122d2:	b0 e0       	ldi	r27, 0x00	; 0
   122d4:	ee e6       	ldi	r30, 0x6E	; 110
   122d6:	f1 e9       	ldi	r31, 0x91	; 145
   122d8:	0c 94 28 e5 	jmp	0x1ca50	; 0x1ca50 <__prologue_saves__+0x1e>
   122dc:	18 2f       	mov	r17, r24
///  note: any errors will reset lastcmd
///  Universal Talk mode
///  Treat this as a Secondary Address ?
///  SS80 Ident 4-31
///  If we have our secondary address then send IDENT
    if(SS80_is_MSA(ch) )
   122de:	c8 2f       	mov	r28, r24
   122e0:	d0 e0       	ldi	r29, 0x00	; 0
   122e2:	ce 01       	movw	r24, r28
   122e4:	67 dc       	rcall	.-1842   	; 0x11bb4 <SS80_is_MSA>
   122e6:	89 2b       	or	r24, r25
   122e8:	09 f1       	breq	.+66     	; 0x1232c <GPIB_SECONDARY_ADDRESS+0x5c>
    {
#if SDEBUG
        if(debuglevel & (4+32))
   122ea:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   122ee:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   122f2:	84 72       	andi	r24, 0x24	; 36
   122f4:	99 27       	eor	r25, r25
   122f6:	89 2b       	or	r24, r25
   122f8:	61 f0       	breq	.+24     	; 0x12312 <GPIB_SECONDARY_ADDRESS+0x42>
            printf("[SA %02XH SS80]\n", 0xff & ch);
   122fa:	ed b7       	in	r30, 0x3d	; 61
   122fc:	fe b7       	in	r31, 0x3e	; 62
   122fe:	d5 83       	std	Z+5, r29	; 0x05
   12300:	c4 83       	std	Z+4, r28	; 0x04
   12302:	85 e0       	ldi	r24, 0x05	; 5
   12304:	91 e1       	ldi	r25, 0x11	; 17
   12306:	a0 e0       	ldi	r26, 0x00	; 0
   12308:	81 83       	std	Z+1, r24	; 0x01
   1230a:	92 83       	std	Z+2, r25	; 0x02
   1230c:	a3 83       	std	Z+3, r26	; 0x03
   1230e:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
#endif
        ///@brief ch = secondary address
        gpib_disable_PPR(SS80p->HEADER.PPR);
   12312:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   12316:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   1231a:	81 81       	ldd	r24, Z+1	; 0x01
   1231c:	90 e0       	ldi	r25, 0x00	; 0
   1231e:	0e 94 d6 87 	call	0x10fac	; 0x10fac <gpib_disable_PPR>
        return(Send_Identify( ch, SS80p->CONFIG.ID) );
   12322:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   12326:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>

    }

#ifdef AMIGO
    if(AMIGO_is_MSA(ch) )
   1232a:	25 c0       	rjmp	.+74     	; 0x12376 <GPIB_SECONDARY_ADDRESS+0xa6>
   1232c:	ce 01       	movw	r24, r28
   1232e:	6f dc       	rcall	.-1826   	; 0x11c0e <AMIGO_is_MSA>
   12330:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   12334:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   12338:	89 2b       	or	r24, r25
    {
/// @todo 
///     Two identify bytes should be repeated until untalked
#if SDEBUG
        if(debuglevel & (4+32))
   1233a:	11 f1       	breq	.+68     	; 0x12380 <GPIB_SECONDARY_ADDRESS+0xb0>
   1233c:	c9 01       	movw	r24, r18
   1233e:	84 72       	andi	r24, 0x24	; 36
   12340:	99 27       	eor	r25, r25
   12342:	89 2b       	or	r24, r25
            printf("[SA %02XH AMIGO]\n", 0xff & ch);
   12344:	61 f0       	breq	.+24     	; 0x1235e <GPIB_SECONDARY_ADDRESS+0x8e>
   12346:	ed b7       	in	r30, 0x3d	; 61
   12348:	fe b7       	in	r31, 0x3e	; 62
   1234a:	d5 83       	std	Z+5, r29	; 0x05
   1234c:	c4 83       	std	Z+4, r28	; 0x04
   1234e:	83 ef       	ldi	r24, 0xF3	; 243
   12350:	90 e1       	ldi	r25, 0x10	; 16
   12352:	a0 e0       	ldi	r26, 0x00	; 0
   12354:	81 83       	std	Z+1, r24	; 0x01
   12356:	92 83       	std	Z+2, r25	; 0x02
   12358:	a3 83       	std	Z+3, r26	; 0x03
   1235a:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
#endif
        ///@brief ch = secondary address
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   1235e:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   12362:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   12366:	81 81       	ldd	r24, Z+1	; 0x01
   12368:	90 e0       	ldi	r25, 0x00	; 0
   1236a:	0e 94 d6 87 	call	0x10fac	; 0x10fac <gpib_disable_PPR>
        return( Send_Identify( ch, AMIGOp->CONFIG.ID) );
   1236e:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   12372:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   12376:	64 81       	ldd	r22, Z+4	; 0x04
   12378:	75 81       	ldd	r23, Z+5	; 0x05
   1237a:	81 2f       	mov	r24, r17
   1237c:	f2 dd       	rcall	.-1052   	; 0x11f62 <Send_Identify>
    }
#endif                      // #ifdef AMIGO

#if SDEBUG
    if(debuglevel & (4+32))
   1237e:	1d c0       	rjmp	.+58     	; 0x123ba <GPIB_SECONDARY_ADDRESS+0xea>
   12380:	c9 01       	movw	r24, r18
   12382:	84 72       	andi	r24, 0x24	; 36
   12384:	99 27       	eor	r25, r25
   12386:	00 97       	sbiw	r24, 0x00	; 0
        printf("[SA %02XH, listen:%02XH, talk:%02XH]\n",
   12388:	c1 f0       	breq	.+48     	; 0x123ba <GPIB_SECONDARY_ADDRESS+0xea>
   1238a:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <talking>
   1238e:	90 e0       	ldi	r25, 0x00	; 0
   12390:	ed b7       	in	r30, 0x3d	; 61
   12392:	fe b7       	in	r31, 0x3e	; 62
   12394:	91 87       	std	Z+9, r25	; 0x09
   12396:	80 87       	std	Z+8, r24	; 0x08
   12398:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   1239c:	90 e0       	ldi	r25, 0x00	; 0
   1239e:	97 83       	std	Z+7, r25	; 0x07
   123a0:	86 83       	std	Z+6, r24	; 0x06
   123a2:	d5 83       	std	Z+5, r29	; 0x05
   123a4:	c4 83       	std	Z+4, r28	; 0x04
   123a6:	8d ec       	ldi	r24, 0xCD	; 205
   123a8:	90 e1       	ldi	r25, 0x10	; 16
   123aa:	a0 e0       	ldi	r26, 0x00	; 0
   123ac:	81 83       	std	Z+1, r24	; 0x01
   123ae:	92 83       	std	Z+2, r25	; 0x02
   123b0:	a3 83       	std	Z+3, r26	; 0x03
   123b2:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
            0xff & ch, 0xff & listening, 0xff & talking);
#endif
    return(0);
   123b6:	80 e0       	ldi	r24, 0x00	; 0
} 
   123b8:	90 e0       	ldi	r25, 0x00	; 0
   123ba:	cd b7       	in	r28, 0x3d	; 61
   123bc:	de b7       	in	r29, 0x3e	; 62
   123be:	29 96       	adiw	r28, 0x09	; 9
   123c0:	e3 e0       	ldi	r30, 0x03	; 3
   123c2:	0c 94 44 e5 	jmp	0x1ca88	; 0x1ca88 <__epilogue_restores__+0x1e>

000123c6 <listen_cleanup>:
/// - Used to cleanup or close at the end of any listen address transition.
/// - Also called when GPIB bus reset or unlisten.
/// For now we just use this to close printer capture
/// @return  void
void listen_cleanup()
{
   123c6:	00 d0       	rcall	.+0      	; 0x123c8 <listen_cleanup+0x2>
   123c8:	1f 92       	push	r1
    if(listening_last)
   123ca:	60 91 82 1e 	lds	r22, 0x1E82	; 0x801e82 <listening_last>
   123ce:	66 23       	and	r22, r22
   123d0:	e1 f0       	breq	.+56     	; 0x1240a <listen_cleanup+0x44>
    {
        int index = find_device(PRINTER_TYPE, listening_last, BASE_MLA);
   123d2:	70 e0       	ldi	r23, 0x00	; 0
   123d4:	40 e2       	ldi	r20, 0x20	; 32
   123d6:	50 e0       	ldi	r21, 0x00	; 0
   123d8:	84 e0       	ldi	r24, 0x04	; 4
   123da:	90 e0       	ldi	r25, 0x00	; 0
   123dc:	4b d2       	rcall	.+1174   	; 0x12874 <find_device>
        if(index == -1)
   123de:	01 96       	adiw	r24, 0x01	; 1
   123e0:	a1 f0       	breq	.+40     	; 0x1240a <listen_cleanup+0x44>
            return;

        //We should not set the active device globally
        //FIXME if we have to then printer close should temprarily do so
        if(debuglevel & (4+32))
   123e2:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   123e6:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   123ea:	84 72       	andi	r24, 0x24	; 36
   123ec:	99 27       	eor	r25, r25
   123ee:	89 2b       	or	r24, r25
   123f0:	51 f0       	breq	.+20     	; 0x12406 <listen_cleanup+0x40>
            printf("[PRINTER close]\n");
   123f2:	8c eb       	ldi	r24, 0xBC	; 188
   123f4:	90 e1       	ldi	r25, 0x10	; 16
   123f6:	a0 e0       	ldi	r26, 0x00	; 0
   123f8:	ed b7       	in	r30, 0x3d	; 61
   123fa:	fe b7       	in	r31, 0x3e	; 62
   123fc:	81 83       	std	Z+1, r24	; 0x01
   123fe:	92 83       	std	Z+2, r25	; 0x02
   12400:	a3 83       	std	Z+3, r26	; 0x03
   12402:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
        printer_close();
   12406:	0e 94 65 bf 	call	0x17eca	; 0x17eca <printer_close>
    }
}
   1240a:	0f 90       	pop	r0
   1240c:	0f 90       	pop	r0
   1240e:	0f 90       	pop	r0
   12410:	08 95       	ret

00012412 <GPIB_LISTEN>:
/// @param[in] ch 8 bit listen command
///
/// @return  0 

int GPIB_LISTEN(uint8_t ch)
{
   12412:	cf 93       	push	r28
   12414:	df 93       	push	r29
   12416:	00 d0       	rcall	.+0      	; 0x12418 <GPIB_LISTEN+0x6>
   12418:	00 d0       	rcall	.+0      	; 0x1241a <GPIB_LISTEN+0x8>
   1241a:	1f 92       	push	r1
   1241c:	c8 2f       	mov	r28, r24
    listening_last = listening;
   1241e:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   12422:	80 93 82 1e 	sts	0x1E82, r24	; 0x801e82 <listening_last>
    listening = ch;
   12426:	c0 93 88 1e 	sts	0x1E88, r28	; 0x801e88 <listening>
    listen_cleanup();

///  NOTE: we must track the "addressed state" of each device
///  so we can determine its state - ie: command vs Secondary states
    ///@brief  Universal Unlisten
    if(ch == UNL)                                 
   1242a:	cd df       	rcall	.-102    	; 0x123c6 <listen_cleanup>
   1242c:	cf 33       	cpi	r28, 0x3F	; 63
    {
        listening = 0;
   1242e:	19 f5       	brne	.+70     	; 0x12476 <GPIB_LISTEN+0x64>
   12430:	10 92 88 1e 	sts	0x1E88, r1	; 0x801e88 <listening>
    
#if SDEBUG
        if(debuglevel & 4)
   12434:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   12438:	82 ff       	sbrs	r24, 2
        {
            printf("[UNL]\n");
   1243a:	74 c0       	rjmp	.+232    	; 0x12524 <GPIB_LISTEN+0x112>
   1243c:	85 eb       	ldi	r24, 0xB5	; 181
   1243e:	91 e1       	ldi	r25, 0x11	; 17
   12440:	a0 e0       	ldi	r26, 0x00	; 0
   12442:	ed b7       	in	r30, 0x3d	; 61
   12444:	fe b7       	in	r31, 0x3e	; 62
   12446:	81 83       	std	Z+1, r24	; 0x01
   12448:	92 83       	std	Z+2, r25	; 0x02
   1244a:	a3 83       	std	Z+3, r26	; 0x03
   1244c:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
            ///@brief add a line break if we both Untalk and Unlisten
            if(lastcmd == UNT)
   12450:	80 91 80 1c 	lds	r24, 0x1C80	; 0x801c80 <lastcmd>
   12454:	90 91 81 1c 	lds	r25, 0x1C81	; 0x801c81 <lastcmd+0x1>
   12458:	8f 35       	cpi	r24, 0x5F	; 95
   1245a:	91 05       	cpc	r25, r1
   1245c:	09 f0       	breq	.+2      	; 0x12460 <GPIB_LISTEN+0x4e>
                printf("\n");
   1245e:	62 c0       	rjmp	.+196    	; 0x12524 <GPIB_LISTEN+0x112>
   12460:	83 eb       	ldi	r24, 0xB3	; 179
   12462:	91 e1       	ldi	r25, 0x11	; 17
   12464:	a0 e0       	ldi	r26, 0x00	; 0
   12466:	ed b7       	in	r30, 0x3d	; 61
   12468:	fe b7       	in	r31, 0x3e	; 62
   1246a:	81 83       	std	Z+1, r24	; 0x01
   1246c:	92 83       	std	Z+2, r25	; 0x02
   1246e:	a3 83       	std	Z+3, r26	; 0x03
   12470:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
#endif
        return(0);
    }

#ifdef AMIGO
    if(AMIGO_is_MLA(ch))
   12474:	57 c0       	rjmp	.+174    	; 0x12524 <GPIB_LISTEN+0x112>
   12476:	d0 e0       	ldi	r29, 0x00	; 0
   12478:	ce 01       	movw	r24, r28
   1247a:	ab db       	rcall	.-2218   	; 0x11bd2 <AMIGO_is_MLA>
   1247c:	89 2b       	or	r24, r25
    {
#if SDEBUG
        if(debuglevel & (4+32))
   1247e:	81 f0       	breq	.+32     	; 0x124a0 <GPIB_LISTEN+0x8e>
   12480:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   12484:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   12488:	84 72       	andi	r24, 0x24	; 36
   1248a:	99 27       	eor	r25, r25
   1248c:	89 2b       	or	r24, r25
   1248e:	09 f4       	brne	.+2      	; 0x12492 <GPIB_LISTEN+0x80>
            printf("[LA %02XH AMIGO]\n", 0xff & ch);
   12490:	49 c0       	rjmp	.+146    	; 0x12524 <GPIB_LISTEN+0x112>
   12492:	ed b7       	in	r30, 0x3d	; 61
   12494:	fe b7       	in	r31, 0x3e	; 62
   12496:	d5 83       	std	Z+5, r29	; 0x05
   12498:	c4 83       	std	Z+4, r28	; 0x04
   1249a:	81 ea       	ldi	r24, 0xA1	; 161
#endif
        return(0);
    }
#endif                      // #ifdef AMIGO

    if(SS80_is_MLA(ch))
   1249c:	91 e1       	ldi	r25, 0x11	; 17
   1249e:	3c c0       	rjmp	.+120    	; 0x12518 <GPIB_LISTEN+0x106>
   124a0:	ce 01       	movw	r24, r28
   124a2:	6a db       	rcall	.-2348   	; 0x11b78 <SS80_is_MLA>
   124a4:	89 2b       	or	r24, r25
    {
#if SDEBUG
        if(debuglevel & (4+32))
   124a6:	79 f0       	breq	.+30     	; 0x124c6 <GPIB_LISTEN+0xb4>
   124a8:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   124ac:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   124b0:	84 72       	andi	r24, 0x24	; 36
   124b2:	99 27       	eor	r25, r25
   124b4:	89 2b       	or	r24, r25
            printf("[LA %02XH SS80]\n", 0xff & ch);
   124b6:	b1 f1       	breq	.+108    	; 0x12524 <GPIB_LISTEN+0x112>
   124b8:	ed b7       	in	r30, 0x3d	; 61
   124ba:	fe b7       	in	r31, 0x3e	; 62
   124bc:	d5 83       	std	Z+5, r29	; 0x05
   124be:	c4 83       	std	Z+4, r28	; 0x04
   124c0:	80 e9       	ldi	r24, 0x90	; 144
#endif
        return(0);
    }

    if(PRINTER_is_MLA(ch))
   124c2:	91 e1       	ldi	r25, 0x11	; 17
   124c4:	29 c0       	rjmp	.+82     	; 0x12518 <GPIB_LISTEN+0x106>
   124c6:	ce 01       	movw	r24, r28
   124c8:	b1 db       	rcall	.-2206   	; 0x11c2c <PRINTER_is_MLA>
   124ca:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   124ce:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   124d2:	89 2b       	or	r24, r25
    {
#if SDEBUG
        if(debuglevel & (4+32))
   124d4:	c9 f0       	breq	.+50     	; 0x12508 <GPIB_LISTEN+0xf6>
   124d6:	24 72       	andi	r18, 0x24	; 36
   124d8:	33 27       	eor	r19, r19
   124da:	23 2b       	or	r18, r19
            printf("[LA %02XH PRINTER]\n", 0xff & ch);
   124dc:	61 f0       	breq	.+24     	; 0x124f6 <GPIB_LISTEN+0xe4>
   124de:	ed b7       	in	r30, 0x3d	; 61
   124e0:	fe b7       	in	r31, 0x3e	; 62
   124e2:	d5 83       	std	Z+5, r29	; 0x05
   124e4:	c4 83       	std	Z+4, r28	; 0x04
   124e6:	8c e7       	ldi	r24, 0x7C	; 124
   124e8:	91 e1       	ldi	r25, 0x11	; 17
   124ea:	a0 e0       	ldi	r26, 0x00	; 0
   124ec:	81 83       	std	Z+1, r24	; 0x01
   124ee:	92 83       	std	Z+2, r25	; 0x02
   124f0:	a3 83       	std	Z+3, r26	; 0x03
   124f2:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
#endif
        if(talking != UNT)
   124f6:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <talking>
   124fa:	8f 35       	cpi	r24, 0x5F	; 95
        {
            ///@brief NULL creates a file named based on date and time
            printer_open(NULL);
   124fc:	99 f0       	breq	.+38     	; 0x12524 <GPIB_LISTEN+0x112>
   124fe:	80 e0       	ldi	r24, 0x00	; 0
   12500:	90 e0       	ldi	r25, 0x00	; 0
   12502:	0e 94 bd bf 	call	0x17f7a	; 0x17f7a <printer_open>
        }
        return(0);
    }
#if SDEBUG
    if(debuglevel & 4)
   12506:	0e c0       	rjmp	.+28     	; 0x12524 <GPIB_LISTEN+0x112>
   12508:	22 ff       	sbrs	r18, 2
        printf("[LA %02XH]\n", 0xff & ch);
   1250a:	0c c0       	rjmp	.+24     	; 0x12524 <GPIB_LISTEN+0x112>
   1250c:	ed b7       	in	r30, 0x3d	; 61
   1250e:	fe b7       	in	r31, 0x3e	; 62
   12510:	d5 83       	std	Z+5, r29	; 0x05
   12512:	c4 83       	std	Z+4, r28	; 0x04
   12514:	80 e7       	ldi	r24, 0x70	; 112
   12516:	91 e1       	ldi	r25, 0x11	; 17
   12518:	a0 e0       	ldi	r26, 0x00	; 0
   1251a:	81 83       	std	Z+1, r24	; 0x01
   1251c:	92 83       	std	Z+2, r25	; 0x02
   1251e:	a3 83       	std	Z+3, r26	; 0x03
   12520:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
#endif
    return(0);
}                                                 // Listen Primary Address group
   12524:	80 e0       	ldi	r24, 0x00	; 0
   12526:	90 e0       	ldi	r25, 0x00	; 0
   12528:	cd b7       	in	r28, 0x3d	; 61
   1252a:	de b7       	in	r29, 0x3e	; 62
   1252c:	25 96       	adiw	r28, 0x05	; 5
   1252e:	e2 e0       	ldi	r30, 0x02	; 2
   12530:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__epilogue_restores__+0x20>

00012534 <gpib_task>:
/// - Reads and processes GPIB control or data bytes
/// and calls emulator task.
/// @return  void

void gpib_task(void)
{
   12534:	cf 93       	push	r28
   12536:	df 93       	push	r29
    uint16_t val;
    uint8_t ch;
    uint16_t status;

    gpib_state_init();                            // Init PPR talking and listening states
   12538:	0e 94 73 87 	call	0x10ee6	; 0x10ee6 <gpib_state_init>
    gpib_init_devices();                          // Init devices

    gpib_log_fp = NULL;
   1253c:	95 db       	rcall	.-2262   	; 0x11c68 <gpib_init_devices>
   1253e:	10 92 fe 18 	sts	0x18FE, r1	; 0x8018fe <gpib_log_fp+0x1>
   12542:	10 92 fd 18 	sts	0x18FD, r1	; 0x8018fd <gpib_log_fp>

    while(1)
    {

        val = gpib_read_byte(NO_TRACE);
   12546:	80 e0       	ldi	r24, 0x00	; 0
   12548:	90 e0       	ldi	r25, 0x00	; 0
   1254a:	d8 d8       	rcall	.-3664   	; 0x116fc <gpib_read_byte>

#if SDEBUG
        if(debuglevel & 8)
   1254c:	ec 01       	movw	r28, r24
   1254e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
            gpib_decode(val);
   12552:	83 ff       	sbrs	r24, 3
   12554:	02 c0       	rjmp	.+4      	; 0x1255a <gpib_task+0x26>
#endif
        status = gpib_error_test(val);
   12556:	ce 01       	movw	r24, r28
   12558:	a7 d9       	rcall	.-3250   	; 0x118a8 <gpib_decode>
        if(status & ABORT_FLAG)
        {
            return;
        }
        else if(status & MEDIA_FLAG)
   1255a:	ce 01       	movw	r24, r28
   1255c:	21 dc       	rcall	.-1982   	; 0x11da0 <gpib_error_test>
   1255e:	9c 01       	movw	r18, r24
   12560:	23 70       	andi	r18, 0x03	; 3
   12562:	33 27       	eor	r19, r19
   12564:	23 2b       	or	r18, r19
        {
            return;
        }
        else if(status)
   12566:	09 f0       	breq	.+2      	; 0x1256a <gpib_task+0x36>
   12568:	43 c0       	rjmp	.+134    	; 0x125f0 <gpib_task+0xbc>
        {
            continue;
        }
        ///@brief GPIB commands with ATN set (COMMANDS)
        if(val & ATN_FLAG)
   1256a:	89 2b       	or	r24, r25
   1256c:	61 f7       	brne	.-40     	; 0x12546 <gpib_task+0x12>
        {
            ch = val & CMD_MASK;
   1256e:	d2 ff       	sbrs	r29, 2
            if(ch <= 0x1f)
   12570:	26 c0       	rjmp	.+76     	; 0x125be <gpib_task+0x8a>
            {
                GPIB(ch);
   12572:	8c 2f       	mov	r24, r28
   12574:	8f 77       	andi	r24, 0x7F	; 127
                continue;
   12576:	80 32       	cpi	r24, 0x20	; 32
            }
            ///@brief GPIB listen
            if(ch >= 0x20 && ch <= 0x3f)
   12578:	10 f4       	brcc	.+4      	; 0x1257e <gpib_task+0x4a>
   1257a:	54 dd       	rcall	.-1368   	; 0x12024 <GPIB>
   1257c:	e4 cf       	rjmp	.-56     	; 0x12546 <gpib_task+0x12>
            {
                GPIB_LISTEN(ch);
   1257e:	90 ee       	ldi	r25, 0xE0	; 224
   12580:	98 0f       	add	r25, r24
                continue;
            }
            ///@brief GPIB talk
            if(ch >= 0x40 && ch <= 0x5f)
   12582:	90 32       	cpi	r25, 0x20	; 32
   12584:	10 f4       	brcc	.+4      	; 0x1258a <gpib_task+0x56>
   12586:	45 df       	rcall	.-374    	; 0x12412 <GPIB_LISTEN>
            {
                GPIB_TALK(ch);
   12588:	de cf       	rjmp	.-68     	; 0x12546 <gpib_task+0x12>
   1258a:	90 ec       	ldi	r25, 0xC0	; 192
                continue;
   1258c:	98 0f       	add	r25, r24
            }

            ///@brief GPIB secondary
            /// Note: We know ch >= 0x60 && ch <= 0x7f because of previous tests

            if( listening && lastcmd == UNT)
   1258e:	90 32       	cpi	r25, 0x20	; 32
   12590:	10 f4       	brcc	.+4      	; 0x12596 <gpib_task+0x62>
   12592:	06 de       	rcall	.-1012   	; 0x121a0 <GPIB_TALK>
   12594:	d8 cf       	rjmp	.-80     	; 0x12546 <gpib_task+0x12>
   12596:	90 91 88 1e 	lds	r25, 0x1E88	; 0x801e88 <listening>
   1259a:	99 23       	and	r25, r25
   1259c:	59 f0       	breq	.+22     	; 0x125b4 <gpib_task+0x80>
   1259e:	20 91 80 1c 	lds	r18, 0x1C80	; 0x801c80 <lastcmd>
            {
                secondary = 0;
   125a2:	30 91 81 1c 	lds	r19, 0x1C81	; 0x801c81 <lastcmd+0x1>
                GPIB_SECONDARY_ADDRESS(ch);
   125a6:	2f 35       	cpi	r18, 0x5F	; 95
   125a8:	31 05       	cpc	r19, r1
                continue;
   125aa:	21 f4       	brne	.+8      	; 0x125b4 <gpib_task+0x80>
            }

            ///@brief We have to keep track of secondary address that may happen out of order with older AMIGO protocol
            /// this method works for SS80 as well
            secondary = ch;
   125ac:	10 92 87 1e 	sts	0x1E87, r1	; 0x801e87 <secondary>
            ///@brief GPIB_COMMANDS does most of the work
            status = GPIB_COMMANDS(secondary,0);
   125b0:	8f de       	rcall	.-738    	; 0x122d0 <GPIB_SECONDARY_ADDRESS>
        }                                         // GPIB ATN

        ///@brief GPIB commands without ATN set (DATA)
        else                                      // GPIB Data
        {
            if ( PRINTER_is_MLA(listening) )
   125b2:	c9 cf       	rjmp	.-110    	; 0x12546 <gpib_task+0x12>
   125b4:	80 93 87 1e 	sts	0x1E87, r24	; 0x801e87 <secondary>
   125b8:	60 e0       	ldi	r22, 0x00	; 0
   125ba:	90 e0       	ldi	r25, 0x00	; 0
   125bc:	12 c0       	rjmp	.+36     	; 0x125e2 <gpib_task+0xae>
   125be:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
            {
                printer_buffer( 0xff & val );
   125c2:	90 e0       	ldi	r25, 0x00	; 0
   125c4:	33 db       	rcall	.-2458   	; 0x11c2c <PRINTER_is_MLA>
   125c6:	89 2b       	or	r24, r25
                continue;
            }

            if(!secondary)
   125c8:	29 f0       	breq	.+10     	; 0x125d4 <gpib_task+0xa0>
   125ca:	ce 01       	movw	r24, r28
   125cc:	99 27       	eor	r25, r25
                continue;

            // ONLY secondar commands at this point
            ///@brief GPIB_COMMANDS does most of the work
            status = GPIB_COMMANDS(val,1);
   125ce:	0e 94 60 c0 	call	0x180c0	; 0x180c0 <printer_buffer>
   125d2:	b9 cf       	rjmp	.-142    	; 0x12546 <gpib_task+0x12>
   125d4:	80 91 87 1e 	lds	r24, 0x1E87	; 0x801e87 <secondary>
            status = gpib_error_test(status);
   125d8:	88 23       	and	r24, r24

            if(status & ( ABORT_FLAG | MEDIA_FLAG ))
   125da:	09 f4       	brne	.+2      	; 0x125de <gpib_task+0xaa>
   125dc:	b4 cf       	rjmp	.-152    	; 0x12546 <gpib_task+0x12>
   125de:	61 e0       	ldi	r22, 0x01	; 1
   125e0:	ce 01       	movw	r24, r28
   125e2:	6b dc       	rcall	.-1834   	; 0x11eba <GPIB_COMMANDS>
            }
            continue;
        }
    }                                             // while(1)
    return;
}
   125e4:	dd db       	rcall	.-2118   	; 0x11da0 <gpib_error_test>
   125e6:	83 70       	andi	r24, 0x03	; 3
   125e8:	99 27       	eor	r25, r25
   125ea:	89 2b       	or	r24, r25
   125ec:	09 f4       	brne	.+2      	; 0x125f0 <gpib_task+0xbc>
   125ee:	ab cf       	rjmp	.-170    	; 0x12546 <gpib_task+0x12>
   125f0:	df 91       	pop	r29
   125f2:	cf 91       	pop	r28
   125f4:	08 95       	ret

000125f6 <talk_cleanup>:
/// - Not used in this emulator.
/// 
/// @return  void

void talk_cleanup()
{
   125f6:	08 95       	ret

000125f8 <gpib_help>:
///  Help Menu for User invoked GPIB functions and tasks
///  See: int gpib_tests(char *str)
/// @return  void

void gpib_help(int full)
{
   125f8:	cf 93       	push	r28
   125fa:	df 93       	push	r29
   125fc:	00 d0       	rcall	.+0      	; 0x125fe <gpib_help+0x6>
   125fe:	1f 92       	push	r1
   12600:	ec 01       	movw	r28, r24
    printf("gpib help\n");
   12602:	81 e3       	ldi	r24, 0x31	; 49
   12604:	95 e1       	ldi	r25, 0x15	; 21
   12606:	a0 e0       	ldi	r26, 0x00	; 0
   12608:	ed b7       	in	r30, 0x3d	; 61
   1260a:	fe b7       	in	r31, 0x3e	; 62
   1260c:	81 83       	std	Z+1, r24	; 0x01
   1260e:	92 83       	std	Z+2, r25	; 0x02
   12610:	a3 83       	std	Z+3, r26	; 0x03
   12612:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    if(full)
   12616:	cd 2b       	or	r28, r29
   12618:	51 f0       	breq	.+20     	; 0x1262e <gpib_help+0x36>
    {
        printf("gpib prefix is optional\n"
   1261a:	8e e6       	ldi	r24, 0x6E	; 110
   1261c:	93 e1       	ldi	r25, 0x13	; 19
   1261e:	a0 e0       	ldi	r26, 0x00	; 0
   12620:	ed b7       	in	r30, 0x3d	; 61
   12622:	fe b7       	in	r31, 0x3e	; 62
   12624:	81 83       	std	Z+1, r24	; 0x01
   12626:	92 83       	std	Z+2, r25	; 0x02
   12628:	a3 83       	std	Z+3, r26	; 0x03
   1262a:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
            "gpib ppr_set XX\n"
#endif
            "\n"
            );
    }
}
   1262e:	cd b7       	in	r28, 0x3d	; 61
   12630:	de b7       	in	r29, 0x3e	; 62
   12632:	23 96       	adiw	r28, 0x03	; 3
   12634:	e2 e0       	ldi	r30, 0x02	; 2
   12636:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__epilogue_restores__+0x20>

0001263a <gpib_tests>:

/// @brief GPIB user tests
///  User invoked GPIB functions and tasks
/// @return  1 matched token, 0 if not
int gpib_tests(int argc, char * argv[])
{
   1263a:	ef 92       	push	r14
   1263c:	ff 92       	push	r15
   1263e:	0f 93       	push	r16
   12640:	1f 93       	push	r17
   12642:	cf 93       	push	r28
   12644:	df 93       	push	r29
   12646:	00 d0       	rcall	.+0      	; 0x12648 <gpib_tests+0xe>
   12648:	00 d0       	rcall	.+0      	; 0x1264a <gpib_tests+0x10>
   1264a:	1f 92       	push	r1
   1264c:	7c 01       	movw	r14, r24

    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   1264e:	eb 01       	movw	r28, r22
   12650:	88 81       	ld	r24, Y
   12652:	99 81       	ldd	r25, Y+1	; 0x01

    // skip optional gpib key word
    if( !ptr || !MATCH(ptr,"gpib") )
   12654:	00 97       	sbiw	r24, 0x00	; 0
   12656:	19 f4       	brne	.+6      	; 0x1265e <gpib_tests+0x24>
        return(0);
   12658:	80 e0       	ldi	r24, 0x00	; 0
   1265a:	90 e0       	ldi	r25, 0x00	; 0
   1265c:	c5 c0       	rjmp	.+394    	; 0x127e8 <gpib_tests+0x1ae>
   1265e:	8b 01       	movw	r16, r22

    ind = 0;
    ptr = argv[ind++];

    // skip optional gpib key word
    if( !ptr || !MATCH(ptr,"gpib") )
   12660:	61 ed       	ldi	r22, 0xD1	; 209
   12662:	7c e0       	ldi	r23, 0x0C	; 12
   12664:	0e 94 dd 33 	call	0x67ba	; 0x67ba <MATCH>
   12668:	89 2b       	or	r24, r25
   1266a:	b1 f3       	breq	.-20     	; 0x12658 <gpib_tests+0x1e>
        return(0);

    ptr = argv[ind++];
   1266c:	0a 80       	ldd	r0, Y+2	; 0x02
   1266e:	db 81       	ldd	r29, Y+3	; 0x03
   12670:	c0 2d       	mov	r28, r0
    if ( !ptr || MATCH(ptr,"help") )
   12672:	20 97       	sbiw	r28, 0x00	; 0
   12674:	21 f4       	brne	.+8      	; 0x1267e <gpib_tests+0x44>
    {
        gpib_help(1);
   12676:	81 e0       	ldi	r24, 0x01	; 1
   12678:	90 e0       	ldi	r25, 0x00	; 0
   1267a:	be df       	rcall	.-132    	; 0x125f8 <gpib_help>
   1267c:	b3 c0       	rjmp	.+358    	; 0x127e4 <gpib_tests+0x1aa>
    // skip optional gpib key word
    if( !ptr || !MATCH(ptr,"gpib") )
        return(0);

    ptr = argv[ind++];
    if ( !ptr || MATCH(ptr,"help") )
   1267e:	6f eb       	ldi	r22, 0xBF	; 191
   12680:	75 e1       	ldi	r23, 0x15	; 21
   12682:	ce 01       	movw	r24, r28
   12684:	0e 94 dd 33 	call	0x67ba	; 0x67ba <MATCH>
   12688:	89 2b       	or	r24, r25
   1268a:	a9 f7       	brne	.-22     	; 0x12676 <gpib_tests+0x3c>
    {
        gpib_help(1);
        return(1);
    }

    if (MATCHI(ptr,"debug") )
   1268c:	66 ed       	ldi	r22, 0xD6	; 214
   1268e:	7c e0       	ldi	r23, 0x0C	; 12
   12690:	ce 01       	movw	r24, r28
   12692:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <MATCHI>
   12696:	89 2b       	or	r24, r25
   12698:	29 f1       	breq	.+74     	; 0x126e4 <gpib_tests+0xaa>
    {
        ptr = argv[ind];
		if(*ptr == '=')
   1269a:	e8 01       	movw	r28, r16
   1269c:	ec 81       	ldd	r30, Y+4	; 0x04
   1269e:	fd 81       	ldd	r31, Y+5	; 0x05
   126a0:	80 81       	ld	r24, Z
   126a2:	8d 33       	cpi	r24, 0x3D	; 61
   126a4:	19 f4       	brne	.+6      	; 0x126ac <gpib_tests+0x72>
			++ind;
   126a6:	63 e0       	ldi	r22, 0x03	; 3
   126a8:	70 e0       	ldi	r23, 0x00	; 0
   126aa:	02 c0       	rjmp	.+4      	; 0x126b0 <gpib_tests+0x76>

    // skip optional gpib key word
    if( !ptr || !MATCH(ptr,"gpib") )
        return(0);

    ptr = argv[ind++];
   126ac:	62 e0       	ldi	r22, 0x02	; 2
   126ae:	70 e0       	ldi	r23, 0x00	; 0
    if (MATCHI(ptr,"debug") )
    {
        ptr = argv[ind];
		if(*ptr == '=')
			++ind;
        debuglevel = get_value(argv[ind]);
   126b0:	66 0f       	add	r22, r22
   126b2:	77 1f       	adc	r23, r23
   126b4:	f8 01       	movw	r30, r16
   126b6:	e6 0f       	add	r30, r22
   126b8:	f7 1f       	adc	r31, r23
   126ba:	80 81       	ld	r24, Z
   126bc:	91 81       	ldd	r25, Z+1	; 0x01
   126be:	0e 94 e8 34 	call	0x69d0	; 0x69d0 <get_value>
   126c2:	70 93 c4 01 	sts	0x01C4, r23	; 0x8001c4 <debuglevel+0x1>
   126c6:	60 93 c3 01 	sts	0x01C3, r22	; 0x8001c3 <debuglevel>
        printf("debug=%04XH\n", debuglevel);
   126ca:	ed b7       	in	r30, 0x3d	; 61
   126cc:	fe b7       	in	r31, 0x3e	; 62
   126ce:	75 83       	std	Z+5, r23	; 0x05
   126d0:	64 83       	std	Z+4, r22	; 0x04
   126d2:	81 e6       	ldi	r24, 0x61	; 97
   126d4:	93 e1       	ldi	r25, 0x13	; 19
   126d6:	a0 e0       	ldi	r26, 0x00	; 0
   126d8:	81 83       	std	Z+1, r24	; 0x01
   126da:	92 83       	std	Z+2, r25	; 0x02
   126dc:	a3 83       	std	Z+3, r26	; 0x03
   126de:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   126e2:	80 c0       	rjmp	.+256    	; 0x127e4 <gpib_tests+0x1aa>
        return(1);
    }

    if (MATCHARGS(ptr,"addresses",(ind+0),argc))
   126e4:	97 01       	movw	r18, r14
   126e6:	42 e0       	ldi	r20, 0x02	; 2
   126e8:	50 e0       	ldi	r21, 0x00	; 0
   126ea:	6c ed       	ldi	r22, 0xDC	; 220
   126ec:	7c e0       	ldi	r23, 0x0C	; 12
   126ee:	ce 01       	movw	r24, r28
   126f0:	0e 94 05 34 	call	0x680a	; 0x680a <MATCHARGS>
   126f4:	89 2b       	or	r24, r25
   126f6:	19 f0       	breq	.+6      	; 0x126fe <gpib_tests+0xc4>
    {
        display_Addresses();
   126f8:	0e 94 02 9f 	call	0x13e04	; 0x13e04 <display_Addresses>
   126fc:	73 c0       	rjmp	.+230    	; 0x127e4 <gpib_tests+0x1aa>
        return(1);
    }

    if (MATCH(ptr,"config") )
   126fe:	66 ee       	ldi	r22, 0xE6	; 230
   12700:	7c e0       	ldi	r23, 0x0C	; 12
   12702:	ce 01       	movw	r24, r28
   12704:	0e 94 dd 33 	call	0x67ba	; 0x67ba <MATCH>
   12708:	89 2b       	or	r24, r25
   1270a:	b9 f0       	breq	.+46     	; 0x1273a <gpib_tests+0x100>
    {
        ptr = argv[ind];
   1270c:	f8 01       	movw	r30, r16
   1270e:	84 81       	ldd	r24, Z+4	; 0x04
   12710:	95 81       	ldd	r25, Z+5	; 0x05
		if(ptr && *ptr && MATCH(ptr,"-v"))
   12712:	00 97       	sbiw	r24, 0x00	; 0
   12714:	69 f0       	breq	.+26     	; 0x12730 <gpib_tests+0xf6>
   12716:	ec 01       	movw	r28, r24
   12718:	28 81       	ld	r18, Y
   1271a:	22 23       	and	r18, r18
   1271c:	49 f0       	breq	.+18     	; 0x12730 <gpib_tests+0xf6>
   1271e:	6d ee       	ldi	r22, 0xED	; 237
   12720:	7c e0       	ldi	r23, 0x0C	; 12
   12722:	0e 94 dd 33 	call	0x67ba	; 0x67ba <MATCH>
   12726:	89 2b       	or	r24, r25
   12728:	19 f0       	breq	.+6      	; 0x12730 <gpib_tests+0xf6>
			display_Config(1);
   1272a:	81 e0       	ldi	r24, 0x01	; 1
   1272c:	90 e0       	ldi	r25, 0x00	; 0
   1272e:	02 c0       	rjmp	.+4      	; 0x12734 <gpib_tests+0xfa>
		else
			display_Config(0);
   12730:	80 e0       	ldi	r24, 0x00	; 0
   12732:	90 e0       	ldi	r25, 0x00	; 0
   12734:	0e 94 07 a0 	call	0x1400e	; 0x1400e <display_Config>
   12738:	55 c0       	rjmp	.+170    	; 0x127e4 <gpib_tests+0x1aa>
        return(1);
    }


    if (MATCHARGS(ptr,"elapsed_reset",(ind+0),argc))
   1273a:	97 01       	movw	r18, r14
   1273c:	42 e0       	ldi	r20, 0x02	; 2
   1273e:	50 e0       	ldi	r21, 0x00	; 0
   12740:	60 ef       	ldi	r22, 0xF0	; 240
   12742:	7c e0       	ldi	r23, 0x0C	; 12
   12744:	ce 01       	movw	r24, r28
   12746:	0e 94 05 34 	call	0x680a	; 0x680a <MATCHARGS>
   1274a:	89 2b       	or	r24, r25
   1274c:	19 f0       	breq	.+6      	; 0x12754 <gpib_tests+0x11a>
    {
        gpib_timer_elapsed_begin();
   1274e:	0e 94 de 86 	call	0x10dbc	; 0x10dbc <gpib_timer_elapsed_begin>
   12752:	48 c0       	rjmp	.+144    	; 0x127e4 <gpib_tests+0x1aa>
        return(1);
    }

    if (MATCHARGS(ptr,"elapsed",(ind+0),argc))
   12754:	97 01       	movw	r18, r14
   12756:	42 e0       	ldi	r20, 0x02	; 2
   12758:	50 e0       	ldi	r21, 0x00	; 0
   1275a:	6e ef       	ldi	r22, 0xFE	; 254
   1275c:	7c e0       	ldi	r23, 0x0C	; 12
   1275e:	ce 01       	movw	r24, r28
   12760:	0e 94 05 34 	call	0x680a	; 0x680a <MATCHARGS>
   12764:	89 2b       	or	r24, r25
   12766:	29 f0       	breq	.+10     	; 0x12772 <gpib_tests+0x138>
    {
        gpib_timer_elapsed_end("gpib elapsed:");
   12768:	86 e0       	ldi	r24, 0x06	; 6
   1276a:	9d e0       	ldi	r25, 0x0D	; 13
   1276c:	0e 94 f0 86 	call	0x10de0	; 0x10de0 <gpib_timer_elapsed_end>
   12770:	39 c0       	rjmp	.+114    	; 0x127e4 <gpib_tests+0x1aa>
        return(1);
    }

    if ( MATCHARGS(ptr, "ifc",(ind+0),argc))
   12772:	97 01       	movw	r18, r14
   12774:	42 e0       	ldi	r20, 0x02	; 2
   12776:	50 e0       	ldi	r21, 0x00	; 0
   12778:	64 e1       	ldi	r22, 0x14	; 20
   1277a:	7d e0       	ldi	r23, 0x0D	; 13
   1277c:	ce 01       	movw	r24, r28
   1277e:	0e 94 05 34 	call	0x680a	; 0x680a <MATCHARGS>
   12782:	89 2b       	or	r24, r25
   12784:	19 f0       	breq	.+6      	; 0x1278c <gpib_tests+0x152>
    {
        gpib_assert_ifc();
   12786:	0e 94 0c 88 	call	0x11018	; 0x11018 <gpib_assert_ifc>
   1278a:	2c c0       	rjmp	.+88     	; 0x127e4 <gpib_tests+0x1aa>
        return(1);

    }

    if (MATCHARGS(ptr,"task",(ind+0),argc))
   1278c:	97 01       	movw	r18, r14
   1278e:	42 e0       	ldi	r20, 0x02	; 2
   12790:	50 e0       	ldi	r21, 0x00	; 0
   12792:	68 e1       	ldi	r22, 0x18	; 24
   12794:	7d e0       	ldi	r23, 0x0D	; 13
   12796:	ce 01       	movw	r24, r28
   12798:	0e 94 05 34 	call	0x680a	; 0x680a <MATCHARGS>
   1279c:	89 2b       	or	r24, r25
    {
        gpib_task();
   1279e:	11 f0       	breq	.+4      	; 0x127a4 <gpib_tests+0x16a>
   127a0:	c9 de       	rcall	.-622    	; 0x12534 <gpib_task>
   127a2:	20 c0       	rjmp	.+64     	; 0x127e4 <gpib_tests+0x1aa>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
   127a4:	97 01       	movw	r18, r14
   127a6:	43 e0       	ldi	r20, 0x03	; 3
   127a8:	50 e0       	ldi	r21, 0x00	; 0
   127aa:	6d e1       	ldi	r22, 0x1D	; 29
   127ac:	7d e0       	ldi	r23, 0x0D	; 13
   127ae:	ce 01       	movw	r24, r28
   127b0:	0e 94 05 34 	call	0x680a	; 0x680a <MATCHARGS>
   127b4:	89 2b       	or	r24, r25
   127b6:	09 f4       	brne	.+2      	; 0x127ba <gpib_tests+0x180>
   127b8:	4f cf       	rjmp	.-354    	; 0x12658 <gpib_tests+0x1e>
    {
        int detail = 0;
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
   127ba:	f8 01       	movw	r30, r16
   127bc:	86 81       	ldd	r24, Z+6	; 0x06
   127be:	97 81       	ldd	r25, Z+7	; 0x07
   127c0:	00 97       	sbiw	r24, 0x00	; 0
   127c2:	51 f0       	breq	.+20     	; 0x127d8 <gpib_tests+0x19e>
   127c4:	63 e2       	ldi	r22, 0x23	; 35
   127c6:	7d e0       	ldi	r23, 0x0D	; 13
   127c8:	0e 94 dd 33 	call	0x67ba	; 0x67ba <MATCH>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
    {
        int detail = 0;
   127cc:	61 e0       	ldi	r22, 0x01	; 1
   127ce:	70 e0       	ldi	r23, 0x00	; 0
   127d0:	89 2b       	or	r24, r25
   127d2:	21 f4       	brne	.+8      	; 0x127dc <gpib_tests+0x1a2>
   127d4:	60 e0       	ldi	r22, 0x00	; 0
   127d6:	02 c0       	rjmp	.+4      	; 0x127dc <gpib_tests+0x1a2>
   127d8:	60 e0       	ldi	r22, 0x00	; 0
   127da:	70 e0       	ldi	r23, 0x00	; 0
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
            detail = 1;
        gpib_trace_task(argv[ind], detail);
   127dc:	e8 01       	movw	r28, r16
   127de:	8c 81       	ldd	r24, Y+4	; 0x04
   127e0:	9d 81       	ldd	r25, Y+5	; 0x05
   127e2:	4b da       	rcall	.-2922   	; 0x11c7a <gpib_trace_task>
        return(1);
   127e4:	81 e0       	ldi	r24, 0x01	; 1
   127e6:	90 e0       	ldi	r25, 0x00	; 0

	} // port write 
#endif  // #ifdef GPIB_EXTENDED_TESTS

    return(0);
}
   127e8:	cd b7       	in	r28, 0x3d	; 61
   127ea:	de b7       	in	r29, 0x3e	; 62
   127ec:	25 96       	adiw	r28, 0x05	; 5
   127ee:	e6 e0       	ldi	r30, 0x06	; 6
   127f0:	0c 94 41 e5 	jmp	0x1ca82	; 0x1ca82 <__epilogue_restores__+0x18>

000127f4 <find_type>:
   127f4:	ec e8       	ldi	r30, 0x8C	; 140
   127f6:	fe e1       	ldi	r31, 0x1E	; 30
   127f8:	20 e0       	ldi	r18, 0x00	; 0
   127fa:	30 e0       	ldi	r19, 0x00	; 0
   127fc:	40 81       	ld	r20, Z
   127fe:	50 e0       	ldi	r21, 0x00	; 0
   12800:	48 17       	cp	r20, r24
   12802:	59 07       	cpc	r21, r25
   12804:	49 f0       	breq	.+18     	; 0x12818 <find_type+0x24>
   12806:	2f 5f       	subi	r18, 0xFF	; 255
   12808:	3f 4f       	sbci	r19, 0xFF	; 255
   1280a:	bb 96       	adiw	r30, 0x2b	; 43
   1280c:	2c 30       	cpi	r18, 0x0C	; 12
   1280e:	31 05       	cpc	r19, r1
   12810:	a9 f7       	brne	.-22     	; 0x127fc <find_type+0x8>
   12812:	8f ef       	ldi	r24, 0xFF	; 255
   12814:	9f ef       	ldi	r25, 0xFF	; 255
   12816:	08 95       	ret
   12818:	c9 01       	movw	r24, r18
   1281a:	08 95       	ret

0001281c <count_drive_types>:
   1281c:	28 2f       	mov	r18, r24
   1281e:	ec e8       	ldi	r30, 0x8C	; 140
   12820:	fe e1       	ldi	r31, 0x1E	; 30
   12822:	80 e0       	ldi	r24, 0x00	; 0
   12824:	90 e0       	ldi	r25, 0x00	; 0
   12826:	30 81       	ld	r19, Z
   12828:	32 13       	cpse	r19, r18
   1282a:	01 c0       	rjmp	.+2      	; 0x1282e <count_drive_types+0x12>
   1282c:	01 96       	adiw	r24, 0x01	; 1
   1282e:	bb 96       	adiw	r30, 0x2b	; 43
   12830:	30 e2       	ldi	r19, 0x20	; 32
   12832:	e0 39       	cpi	r30, 0x90	; 144
   12834:	f3 07       	cpc	r31, r19
   12836:	b9 f7       	brne	.-18     	; 0x12826 <count_drive_types+0xa>
   12838:	08 95       	ret

0001283a <type_to_str>:
   1283a:	00 97       	sbiw	r24, 0x00	; 0
   1283c:	59 f0       	breq	.+22     	; 0x12854 <type_to_str+0x1a>
   1283e:	81 30       	cpi	r24, 0x01	; 1
   12840:	91 05       	cpc	r25, r1
   12842:	59 f0       	breq	.+22     	; 0x1285a <type_to_str+0x20>
   12844:	83 30       	cpi	r24, 0x03	; 3
   12846:	91 05       	cpc	r25, r1
   12848:	59 f0       	breq	.+22     	; 0x12860 <type_to_str+0x26>
   1284a:	04 97       	sbiw	r24, 0x04	; 4
   1284c:	61 f0       	breq	.+24     	; 0x12866 <type_to_str+0x2c>
   1284e:	81 e5       	ldi	r24, 0x51	; 81
   12850:	9d e0       	ldi	r25, 0x0D	; 13
   12852:	08 95       	ret
   12854:	87 e2       	ldi	r24, 0x27	; 39
   12856:	9d e0       	ldi	r25, 0x0D	; 13
   12858:	08 95       	ret
   1285a:	8f e2       	ldi	r24, 0x2F	; 47
   1285c:	9d e0       	ldi	r25, 0x0D	; 13
   1285e:	08 95       	ret
   12860:	87 e4       	ldi	r24, 0x47	; 71
   12862:	9d e0       	ldi	r25, 0x0D	; 13
   12864:	08 95       	ret
   12866:	8a e3       	ldi	r24, 0x3A	; 58
   12868:	9d e0       	ldi	r25, 0x0D	; 13
   1286a:	08 95       	ret

0001286c <find_free>:
   1286c:	80 e0       	ldi	r24, 0x00	; 0
   1286e:	90 e0       	ldi	r25, 0x00	; 0
   12870:	c1 cf       	rjmp	.-126    	; 0x127f4 <find_type>
   12872:	08 95       	ret

00012874 <find_device>:
   12874:	9b 01       	movw	r18, r22
   12876:	20 52       	subi	r18, 0x20	; 32
   12878:	31 09       	sbc	r19, r1
   1287a:	2f 35       	cpi	r18, 0x5F	; 95
   1287c:	31 05       	cpc	r19, r1
   1287e:	f8 f4       	brcc	.+62     	; 0x128be <find_device+0x4a>
   12880:	64 17       	cp	r22, r20
   12882:	75 07       	cpc	r23, r21
   12884:	e4 f0       	brlt	.+56     	; 0x128be <find_device+0x4a>
   12886:	9a 01       	movw	r18, r20
   12888:	22 5e       	subi	r18, 0xE2	; 226
   1288a:	3f 4f       	sbci	r19, 0xFF	; 255
   1288c:	26 17       	cp	r18, r22
   1288e:	37 07       	cpc	r19, r23
   12890:	b4 f0       	brlt	.+44     	; 0x128be <find_device+0x4a>
   12892:	64 1b       	sub	r22, r20
   12894:	75 0b       	sbc	r23, r21
   12896:	ec e8       	ldi	r30, 0x8C	; 140
   12898:	fe e1       	ldi	r31, 0x1E	; 30
   1289a:	20 e0       	ldi	r18, 0x00	; 0
   1289c:	30 e0       	ldi	r19, 0x00	; 0
   1289e:	40 81       	ld	r20, Z
   128a0:	50 e0       	ldi	r21, 0x00	; 0
   128a2:	48 17       	cp	r20, r24
   128a4:	59 07       	cpc	r21, r25
   128a6:	29 f4       	brne	.+10     	; 0x128b2 <find_device+0x3e>
   128a8:	41 81       	ldd	r20, Z+1	; 0x01
   128aa:	50 e0       	ldi	r21, 0x00	; 0
   128ac:	64 17       	cp	r22, r20
   128ae:	75 07       	cpc	r23, r21
   128b0:	49 f0       	breq	.+18     	; 0x128c4 <find_device+0x50>
   128b2:	2f 5f       	subi	r18, 0xFF	; 255
   128b4:	3f 4f       	sbci	r19, 0xFF	; 255
   128b6:	bb 96       	adiw	r30, 0x2b	; 43
   128b8:	2c 30       	cpi	r18, 0x0C	; 12
   128ba:	31 05       	cpc	r19, r1
   128bc:	81 f7       	brne	.-32     	; 0x1289e <find_device+0x2a>
   128be:	8f ef       	ldi	r24, 0xFF	; 255
   128c0:	9f ef       	ldi	r25, 0xFF	; 255
   128c2:	08 95       	ret
   128c4:	c9 01       	movw	r24, r18
   128c6:	08 95       	ret

000128c8 <set_active_device>:
   128c8:	a9 e0       	ldi	r26, 0x09	; 9
   128ca:	b0 e0       	ldi	r27, 0x00	; 0
   128cc:	ea e6       	ldi	r30, 0x6A	; 106
   128ce:	f4 e9       	ldi	r31, 0x94	; 148
   128d0:	0c 94 27 e5 	jmp	0x1ca4e	; 0x1ca4e <__prologue_saves__+0x1c>
   128d4:	8f 3f       	cpi	r24, 0xFF	; 255
   128d6:	2f ef       	ldi	r18, 0xFF	; 255
   128d8:	92 07       	cpc	r25, r18
   128da:	09 f4       	brne	.+2      	; 0x128de <set_active_device+0x16>
   128dc:	d0 c0       	rjmp	.+416    	; 0x12a7e <set_active_device+0x1b6>
   128de:	ec 01       	movw	r28, r24
   128e0:	0c 97       	sbiw	r24, 0x0c	; 12
   128e2:	b0 f0       	brcs	.+44     	; 0x12910 <set_active_device+0x48>
   128e4:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   128e8:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   128ec:	c9 01       	movw	r24, r18
   128ee:	81 70       	andi	r24, 0x01	; 1
   128f0:	99 27       	eor	r25, r25
   128f2:	20 ff       	sbrs	r18, 0
   128f4:	c6 c0       	rjmp	.+396    	; 0x12a82 <set_active_device+0x1ba>
   128f6:	ed b7       	in	r30, 0x3d	; 61
   128f8:	fe b7       	in	r31, 0x3e	; 62
   128fa:	d5 83       	std	Z+5, r29	; 0x05
   128fc:	c4 83       	std	Z+4, r28	; 0x04
   128fe:	8b e3       	ldi	r24, 0x3B	; 59
   12900:	90 e2       	ldi	r25, 0x20	; 32
   12902:	a0 e0       	ldi	r26, 0x00	; 0
   12904:	81 83       	std	Z+1, r24	; 0x01
   12906:	92 83       	std	Z+2, r25	; 0x02
   12908:	a3 83       	std	Z+3, r26	; 0x03
   1290a:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   1290e:	b7 c0       	rjmp	.+366    	; 0x12a7e <set_active_device+0x1b6>
   12910:	8b e2       	ldi	r24, 0x2B	; 43
   12912:	8c 9f       	mul	r24, r28
   12914:	f0 01       	movw	r30, r0
   12916:	8d 9f       	mul	r24, r29
   12918:	f0 0d       	add	r31, r0
   1291a:	11 24       	eor	r1, r1
   1291c:	e4 57       	subi	r30, 0x74	; 116
   1291e:	f1 4e       	sbci	r31, 0xE1	; 225
   12920:	21 81       	ldd	r18, Z+1	; 0x01
   12922:	2f 31       	cpi	r18, 0x1F	; 31
   12924:	d0 f0       	brcs	.+52     	; 0x1295a <set_active_device+0x92>
   12926:	40 91 c3 01 	lds	r20, 0x01C3	; 0x8001c3 <debuglevel>
   1292a:	50 91 c4 01 	lds	r21, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1292e:	ca 01       	movw	r24, r20
   12930:	81 70       	andi	r24, 0x01	; 1
   12932:	99 27       	eor	r25, r25
   12934:	40 ff       	sbrs	r20, 0
   12936:	a5 c0       	rjmp	.+330    	; 0x12a82 <set_active_device+0x1ba>
   12938:	82 2f       	mov	r24, r18
   1293a:	90 e0       	ldi	r25, 0x00	; 0
   1293c:	ed b7       	in	r30, 0x3d	; 61
   1293e:	fe b7       	in	r31, 0x3e	; 62
   12940:	97 83       	std	Z+7, r25	; 0x07
   12942:	86 83       	std	Z+6, r24	; 0x06
   12944:	d5 83       	std	Z+5, r29	; 0x05
   12946:	c4 83       	std	Z+4, r28	; 0x04
   12948:	82 e0       	ldi	r24, 0x02	; 2
   1294a:	90 e2       	ldi	r25, 0x20	; 32
   1294c:	a0 e0       	ldi	r26, 0x00	; 0
   1294e:	81 83       	std	Z+1, r24	; 0x01
   12950:	92 83       	std	Z+2, r25	; 0x02
   12952:	a3 83       	std	Z+3, r26	; 0x03
   12954:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   12958:	92 c0       	rjmp	.+292    	; 0x12a7e <set_active_device+0x1b6>
   1295a:	20 81       	ld	r18, Z
   1295c:	02 2f       	mov	r16, r18
   1295e:	10 e0       	ldi	r17, 0x00	; 0
   12960:	87 a1       	ldd	r24, Z+39	; 0x27
   12962:	90 a5       	ldd	r25, Z+40	; 0x28
   12964:	00 97       	sbiw	r24, 0x00	; 0
   12966:	b1 f4       	brne	.+44     	; 0x12994 <set_active_device+0xcc>
   12968:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   1296c:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   12970:	c9 01       	movw	r24, r18
   12972:	81 70       	andi	r24, 0x01	; 1
   12974:	99 27       	eor	r25, r25
   12976:	20 ff       	sbrs	r18, 0
   12978:	84 c0       	rjmp	.+264    	; 0x12a82 <set_active_device+0x1ba>
   1297a:	c8 01       	movw	r24, r16
   1297c:	5e df       	rcall	.-324    	; 0x1283a <type_to_str>
   1297e:	ed b7       	in	r30, 0x3d	; 61
   12980:	fe b7       	in	r31, 0x3e	; 62
   12982:	91 87       	std	Z+9, r25	; 0x09
   12984:	80 87       	std	Z+8, r24	; 0x08
   12986:	17 83       	std	Z+7, r17	; 0x07
   12988:	06 83       	std	Z+6, r16	; 0x06
   1298a:	d5 83       	std	Z+5, r29	; 0x05
   1298c:	c4 83       	std	Z+4, r28	; 0x04
   1298e:	8d ec       	ldi	r24, 0xCD	; 205
   12990:	9f e1       	ldi	r25, 0x1F	; 31
   12992:	6f c0       	rjmp	.+222    	; 0x12a72 <set_active_device+0x1aa>
   12994:	01 15       	cp	r16, r1
   12996:	11 05       	cpc	r17, r1
   12998:	b9 f4       	brne	.+46     	; 0x129c8 <set_active_device+0x100>
   1299a:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   1299e:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   129a2:	c9 01       	movw	r24, r18
   129a4:	81 70       	andi	r24, 0x01	; 1
   129a6:	99 27       	eor	r25, r25
   129a8:	20 ff       	sbrs	r18, 0
   129aa:	6b c0       	rjmp	.+214    	; 0x12a82 <set_active_device+0x1ba>
   129ac:	80 e0       	ldi	r24, 0x00	; 0
   129ae:	90 e0       	ldi	r25, 0x00	; 0
   129b0:	44 df       	rcall	.-376    	; 0x1283a <type_to_str>
   129b2:	ed b7       	in	r30, 0x3d	; 61
   129b4:	fe b7       	in	r31, 0x3e	; 62
   129b6:	91 87       	std	Z+9, r25	; 0x09
   129b8:	80 87       	std	Z+8, r24	; 0x08
   129ba:	17 82       	std	Z+7, r1	; 0x07
   129bc:	16 82       	std	Z+6, r1	; 0x06
   129be:	d5 83       	std	Z+5, r29	; 0x05
   129c0:	c4 83       	std	Z+4, r28	; 0x04
   129c2:	88 e9       	ldi	r24, 0x98	; 152
   129c4:	9f e1       	ldi	r25, 0x1F	; 31
   129c6:	55 c0       	rjmp	.+170    	; 0x12a72 <set_active_device+0x1aa>
   129c8:	04 30       	cpi	r16, 0x04	; 4
   129ca:	11 05       	cpc	r17, r1
   129cc:	29 f4       	brne	.+10     	; 0x129d8 <set_active_device+0x110>
   129ce:	90 93 0a 19 	sts	0x190A, r25	; 0x80190a <PRINTERp+0x1>
   129d2:	80 93 09 19 	sts	0x1909, r24	; 0x801909 <PRINTERp>
   129d6:	35 c0       	rjmp	.+106    	; 0x12a42 <set_active_device+0x17a>
   129d8:	2d 7f       	andi	r18, 0xFD	; 253
   129da:	21 30       	cpi	r18, 0x01	; 1
   129dc:	a9 f5       	brne	.+106    	; 0x12a48 <set_active_device+0x180>
   129de:	21 a5       	ldd	r18, Z+41	; 0x29
   129e0:	32 a5       	ldd	r19, Z+42	; 0x2a
   129e2:	21 15       	cp	r18, r1
   129e4:	31 05       	cpc	r19, r1
   129e6:	b1 f4       	brne	.+44     	; 0x12a14 <set_active_device+0x14c>
   129e8:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   129ec:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   129f0:	c9 01       	movw	r24, r18
   129f2:	81 70       	andi	r24, 0x01	; 1
   129f4:	99 27       	eor	r25, r25
   129f6:	20 ff       	sbrs	r18, 0
   129f8:	44 c0       	rjmp	.+136    	; 0x12a82 <set_active_device+0x1ba>
   129fa:	c8 01       	movw	r24, r16
   129fc:	1e df       	rcall	.-452    	; 0x1283a <type_to_str>
   129fe:	ed b7       	in	r30, 0x3d	; 61
   12a00:	fe b7       	in	r31, 0x3e	; 62
   12a02:	91 87       	std	Z+9, r25	; 0x09
   12a04:	80 87       	std	Z+8, r24	; 0x08
   12a06:	17 83       	std	Z+7, r17	; 0x07
   12a08:	06 83       	std	Z+6, r16	; 0x06
   12a0a:	d5 83       	std	Z+5, r29	; 0x05
   12a0c:	c4 83       	std	Z+4, r28	; 0x04
   12a0e:	80 e6       	ldi	r24, 0x60	; 96
   12a10:	9f e1       	ldi	r25, 0x1F	; 31
   12a12:	2f c0       	rjmp	.+94     	; 0x12a72 <set_active_device+0x1aa>
   12a14:	01 30       	cpi	r16, 0x01	; 1
   12a16:	11 05       	cpc	r17, r1
   12a18:	49 f4       	brne	.+18     	; 0x12a2c <set_active_device+0x164>
   12a1a:	90 93 04 19 	sts	0x1904, r25	; 0x801904 <AMIGOp+0x1>
   12a1e:	80 93 03 19 	sts	0x1903, r24	; 0x801903 <AMIGOp>
   12a22:	30 93 02 19 	sts	0x1902, r19	; 0x801902 <AMIGOs+0x1>
   12a26:	20 93 01 19 	sts	0x1901, r18	; 0x801901 <AMIGOs>
   12a2a:	0b c0       	rjmp	.+22     	; 0x12a42 <set_active_device+0x17a>
   12a2c:	03 30       	cpi	r16, 0x03	; 3
   12a2e:	11 05       	cpc	r17, r1
   12a30:	59 f4       	brne	.+22     	; 0x12a48 <set_active_device+0x180>
   12a32:	90 93 08 19 	sts	0x1908, r25	; 0x801908 <SS80p+0x1>
   12a36:	80 93 07 19 	sts	0x1907, r24	; 0x801907 <SS80p>
   12a3a:	30 93 06 19 	sts	0x1906, r19	; 0x801906 <SS80s+0x1>
   12a3e:	20 93 05 19 	sts	0x1905, r18	; 0x801905 <SS80s>
   12a42:	81 e0       	ldi	r24, 0x01	; 1
   12a44:	90 e0       	ldi	r25, 0x00	; 0
   12a46:	1d c0       	rjmp	.+58     	; 0x12a82 <set_active_device+0x1ba>
   12a48:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   12a4c:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   12a50:	c9 01       	movw	r24, r18
   12a52:	81 70       	andi	r24, 0x01	; 1
   12a54:	99 27       	eor	r25, r25
   12a56:	20 ff       	sbrs	r18, 0
   12a58:	14 c0       	rjmp	.+40     	; 0x12a82 <set_active_device+0x1ba>
   12a5a:	c8 01       	movw	r24, r16
   12a5c:	ee de       	rcall	.-548    	; 0x1283a <type_to_str>
   12a5e:	ed b7       	in	r30, 0x3d	; 61
   12a60:	fe b7       	in	r31, 0x3e	; 62
   12a62:	91 87       	std	Z+9, r25	; 0x09
   12a64:	80 87       	std	Z+8, r24	; 0x08
   12a66:	17 83       	std	Z+7, r17	; 0x07
   12a68:	06 83       	std	Z+6, r16	; 0x06
   12a6a:	d5 83       	std	Z+5, r29	; 0x05
   12a6c:	c4 83       	std	Z+4, r28	; 0x04
   12a6e:	85 e3       	ldi	r24, 0x35	; 53
   12a70:	9f e1       	ldi	r25, 0x1F	; 31
   12a72:	a0 e0       	ldi	r26, 0x00	; 0
   12a74:	81 83       	std	Z+1, r24	; 0x01
   12a76:	92 83       	std	Z+2, r25	; 0x02
   12a78:	a3 83       	std	Z+3, r26	; 0x03
   12a7a:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   12a7e:	80 e0       	ldi	r24, 0x00	; 0
   12a80:	90 e0       	ldi	r25, 0x00	; 0
   12a82:	cd b7       	in	r28, 0x3d	; 61
   12a84:	de b7       	in	r29, 0x3e	; 62
   12a86:	29 96       	adiw	r28, 0x09	; 9
   12a88:	e4 e0       	ldi	r30, 0x04	; 4
   12a8a:	0c 94 43 e5 	jmp	0x1ca86	; 0x1ca86 <__epilogue_restores__+0x1c>

00012a8e <SS80_Set_Defaults>:
   12a8e:	0f 93       	push	r16
   12a90:	1f 93       	push	r17
   12a92:	cf 93       	push	r28
   12a94:	df 93       	push	r29
   12a96:	ec 01       	movw	r28, r24
   12a98:	82 e0       	ldi	r24, 0x02	; 2
   12a9a:	90 e0       	ldi	r25, 0x00	; 0
   12a9c:	ab de       	rcall	.-682    	; 0x127f4 <find_type>
   12a9e:	97 fd       	sbrc	r25, 7
   12aa0:	6b c0       	rjmp	.+214    	; 0x12b78 <SS80_Set_Defaults+0xea>
   12aa2:	2b e2       	ldi	r18, 0x2B	; 43
   12aa4:	2c 9f       	mul	r18, r28
   12aa6:	f0 01       	movw	r30, r0
   12aa8:	2d 9f       	mul	r18, r29
   12aaa:	f0 0d       	add	r31, r0
   12aac:	11 24       	eor	r1, r1
   12aae:	e4 57       	subi	r30, 0x74	; 116
   12ab0:	f1 4e       	sbci	r31, 0xE1	; 225
   12ab2:	c7 a1       	ldd	r28, Z+39	; 0x27
   12ab4:	d0 a5       	ldd	r29, Z+40	; 0x28
   12ab6:	28 9f       	mul	r18, r24
   12ab8:	f0 01       	movw	r30, r0
   12aba:	29 9f       	mul	r18, r25
   12abc:	f0 0d       	add	r31, r0
   12abe:	11 24       	eor	r1, r1
   12ac0:	e4 57       	subi	r30, 0x74	; 116
   12ac2:	f1 4e       	sbci	r31, 0xE1	; 225
   12ac4:	07 a1       	ldd	r16, Z+39	; 0x27
   12ac6:	10 a5       	ldd	r17, Z+40	; 0x28
   12ac8:	f8 01       	movw	r30, r16
   12aca:	80 81       	ld	r24, Z
   12acc:	88 83       	st	Y, r24
   12ace:	81 81       	ldd	r24, Z+1	; 0x01
   12ad0:	89 83       	std	Y+1, r24	; 0x01
   12ad2:	82 81       	ldd	r24, Z+2	; 0x02
   12ad4:	93 81       	ldd	r25, Z+3	; 0x03
   12ad6:	0e 94 93 33 	call	0x6726	; 0x6726 <stralloc>
   12ada:	9b 83       	std	Y+3, r25	; 0x03
   12adc:	8a 83       	std	Y+2, r24	; 0x02
   12ade:	f8 01       	movw	r30, r16
   12ae0:	84 81       	ldd	r24, Z+4	; 0x04
   12ae2:	95 81       	ldd	r25, Z+5	; 0x05
   12ae4:	9d 83       	std	Y+5, r25	; 0x05
   12ae6:	8c 83       	std	Y+4, r24	; 0x04
   12ae8:	86 81       	ldd	r24, Z+6	; 0x06
   12aea:	97 81       	ldd	r25, Z+7	; 0x07
   12aec:	9f 83       	std	Y+7, r25	; 0x07
   12aee:	8e 83       	std	Y+6, r24	; 0x06
   12af0:	80 85       	ldd	r24, Z+8	; 0x08
   12af2:	91 85       	ldd	r25, Z+9	; 0x09
   12af4:	99 87       	std	Y+9, r25	; 0x09
   12af6:	88 87       	std	Y+8, r24	; 0x08
   12af8:	82 85       	ldd	r24, Z+10	; 0x0a
   12afa:	8a 87       	std	Y+10, r24	; 0x0a
   12afc:	83 85       	ldd	r24, Z+11	; 0x0b
   12afe:	8b 87       	std	Y+11, r24	; 0x0b
   12b00:	84 85       	ldd	r24, Z+12	; 0x0c
   12b02:	95 85       	ldd	r25, Z+13	; 0x0d
   12b04:	a6 85       	ldd	r26, Z+14	; 0x0e
   12b06:	b7 85       	ldd	r27, Z+15	; 0x0f
   12b08:	8c 87       	std	Y+12, r24	; 0x0c
   12b0a:	9d 87       	std	Y+13, r25	; 0x0d
   12b0c:	ae 87       	std	Y+14, r26	; 0x0e
   12b0e:	bf 87       	std	Y+15, r27	; 0x0f
   12b10:	80 89       	ldd	r24, Z+16	; 0x10
   12b12:	91 89       	ldd	r25, Z+17	; 0x11
   12b14:	99 8b       	std	Y+17, r25	; 0x11
   12b16:	88 8b       	std	Y+16, r24	; 0x10
   12b18:	82 89       	ldd	r24, Z+18	; 0x12
   12b1a:	8a 8b       	std	Y+18, r24	; 0x12
   12b1c:	83 89       	ldd	r24, Z+19	; 0x13
   12b1e:	8b 8b       	std	Y+19, r24	; 0x13
   12b20:	84 89       	ldd	r24, Z+20	; 0x14
   12b22:	95 89       	ldd	r25, Z+21	; 0x15
   12b24:	9d 8b       	std	Y+21, r25	; 0x15
   12b26:	8c 8b       	std	Y+20, r24	; 0x14
   12b28:	86 89       	ldd	r24, Z+22	; 0x16
   12b2a:	97 89       	ldd	r25, Z+23	; 0x17
   12b2c:	9f 8b       	std	Y+23, r25	; 0x17
   12b2e:	8e 8b       	std	Y+22, r24	; 0x16
   12b30:	80 8d       	ldd	r24, Z+24	; 0x18
   12b32:	91 8d       	ldd	r25, Z+25	; 0x19
   12b34:	99 8f       	std	Y+25, r25	; 0x19
   12b36:	88 8f       	std	Y+24, r24	; 0x18
   12b38:	82 8d       	ldd	r24, Z+26	; 0x1a
   12b3a:	93 8d       	ldd	r25, Z+27	; 0x1b
   12b3c:	9b 8f       	std	Y+27, r25	; 0x1b
   12b3e:	8a 8f       	std	Y+26, r24	; 0x1a
   12b40:	84 8d       	ldd	r24, Z+28	; 0x1c
   12b42:	8c 8f       	std	Y+28, r24	; 0x1c
   12b44:	85 8d       	ldd	r24, Z+29	; 0x1d
   12b46:	8d 8f       	std	Y+29, r24	; 0x1d
   12b48:	87 8d       	ldd	r24, Z+31	; 0x1f
   12b4a:	90 a1       	ldd	r25, Z+32	; 0x20
   12b4c:	a1 a1       	ldd	r26, Z+33	; 0x21
   12b4e:	b2 a1       	ldd	r27, Z+34	; 0x22
   12b50:	8f 8f       	std	Y+31, r24	; 0x1f
   12b52:	98 a3       	std	Y+32, r25	; 0x20
   12b54:	a9 a3       	std	Y+33, r26	; 0x21
   12b56:	ba a3       	std	Y+34, r27	; 0x22
   12b58:	83 a1       	ldd	r24, Z+35	; 0x23
   12b5a:	8b a3       	std	Y+35, r24	; 0x23
   12b5c:	84 a1       	ldd	r24, Z+36	; 0x24
   12b5e:	95 a1       	ldd	r25, Z+37	; 0x25
   12b60:	9d a3       	std	Y+37, r25	; 0x25
   12b62:	8c a3       	std	Y+36, r24	; 0x24
   12b64:	86 a1       	ldd	r24, Z+38	; 0x26
   12b66:	97 a1       	ldd	r25, Z+39	; 0x27
   12b68:	a0 a5       	ldd	r26, Z+40	; 0x28
   12b6a:	b1 a5       	ldd	r27, Z+41	; 0x29
   12b6c:	8e a3       	std	Y+38, r24	; 0x26
   12b6e:	9f a3       	std	Y+39, r25	; 0x27
   12b70:	a8 a7       	std	Y+40, r26	; 0x28
   12b72:	b9 a7       	std	Y+41, r27	; 0x29
   12b74:	82 a5       	ldd	r24, Z+42	; 0x2a
   12b76:	8a a7       	std	Y+42, r24	; 0x2a
   12b78:	df 91       	pop	r29
   12b7a:	cf 91       	pop	r28
   12b7c:	1f 91       	pop	r17
   12b7e:	0f 91       	pop	r16
   12b80:	08 95       	ret

00012b82 <alloc_device>:
   12b82:	0f 93       	push	r16
   12b84:	1f 93       	push	r17
   12b86:	cf 93       	push	r28
   12b88:	df 93       	push	r29
   12b8a:	ad b7       	in	r26, 0x3d	; 61
   12b8c:	be b7       	in	r27, 0x3e	; 62
   12b8e:	17 97       	sbiw	r26, 0x07	; 7
   12b90:	0f b6       	in	r0, 0x3f	; 63
   12b92:	f8 94       	cli
   12b94:	be bf       	out	0x3e, r27	; 62
   12b96:	0f be       	out	0x3f, r0	; 63
   12b98:	ad bf       	out	0x3d, r26	; 61
   12b9a:	8c 01       	movw	r16, r24
   12b9c:	67 de       	rcall	.-818    	; 0x1286c <find_free>
   12b9e:	ec 01       	movw	r28, r24
   12ba0:	cf 3f       	cpi	r28, 0xFF	; 255
   12ba2:	8f ef       	ldi	r24, 0xFF	; 255
   12ba4:	d8 07       	cpc	r29, r24
   12ba6:	89 f4       	brne	.+34     	; 0x12bca <alloc_device+0x48>
   12ba8:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   12bac:	80 ff       	sbrs	r24, 0
   12bae:	a1 c0       	rjmp	.+322    	; 0x12cf2 <alloc_device+0x170>
   12bb0:	ed b7       	in	r30, 0x3d	; 61
   12bb2:	fe b7       	in	r31, 0x3e	; 62
   12bb4:	15 83       	std	Z+5, r17	; 0x05
   12bb6:	04 83       	std	Z+4, r16	; 0x04
   12bb8:	81 e1       	ldi	r24, 0x11	; 17
   12bba:	9f e1       	ldi	r25, 0x1F	; 31
   12bbc:	a0 e0       	ldi	r26, 0x00	; 0
   12bbe:	81 83       	std	Z+1, r24	; 0x01
   12bc0:	92 83       	std	Z+2, r25	; 0x02
   12bc2:	a3 83       	std	Z+3, r26	; 0x03
   12bc4:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   12bc8:	94 c0       	rjmp	.+296    	; 0x12cf2 <alloc_device+0x170>
   12bca:	02 30       	cpi	r16, 0x02	; 2
   12bcc:	11 05       	cpc	r17, r1
   12bce:	e1 f1       	breq	.+120    	; 0x12c48 <alloc_device+0xc6>
   12bd0:	ec f4       	brge	.+58     	; 0x12c0c <alloc_device+0x8a>
   12bd2:	01 30       	cpi	r16, 0x01	; 1
   12bd4:	11 05       	cpc	r17, r1
   12bd6:	09 f0       	breq	.+2      	; 0x12bda <alloc_device+0x58>
   12bd8:	76 c0       	rjmp	.+236    	; 0x12cc6 <alloc_device+0x144>
   12bda:	8b e2       	ldi	r24, 0x2B	; 43
   12bdc:	8c 9f       	mul	r24, r28
   12bde:	80 01       	movw	r16, r0
   12be0:	8d 9f       	mul	r24, r29
   12be2:	10 0d       	add	r17, r0
   12be4:	11 24       	eor	r1, r1
   12be6:	04 57       	subi	r16, 0x74	; 116
   12be8:	11 4e       	sbci	r17, 0xE1	; 225
   12bea:	81 e0       	ldi	r24, 0x01	; 1
   12bec:	f8 01       	movw	r30, r16
   12bee:	80 83       	st	Z, r24
   12bf0:	61 e0       	ldi	r22, 0x01	; 1
   12bf2:	70 e0       	ldi	r23, 0x00	; 0
   12bf4:	85 e1       	ldi	r24, 0x15	; 21
   12bf6:	90 e0       	ldi	r25, 0x00	; 0
   12bf8:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <safecalloc>
   12bfc:	f8 01       	movw	r30, r16
   12bfe:	90 a7       	std	Z+40, r25	; 0x28
   12c00:	87 a3       	std	Z+39, r24	; 0x27
   12c02:	61 e0       	ldi	r22, 0x01	; 1
   12c04:	70 e0       	ldi	r23, 0x00	; 0
   12c06:	88 e1       	ldi	r24, 0x18	; 24
   12c08:	90 e0       	ldi	r25, 0x00	; 0
   12c0a:	57 c0       	rjmp	.+174    	; 0x12cba <alloc_device+0x138>
   12c0c:	03 30       	cpi	r16, 0x03	; 3
   12c0e:	11 05       	cpc	r17, r1
   12c10:	a1 f1       	breq	.+104    	; 0x12c7a <alloc_device+0xf8>
   12c12:	04 30       	cpi	r16, 0x04	; 4
   12c14:	11 05       	cpc	r17, r1
   12c16:	09 f0       	breq	.+2      	; 0x12c1a <alloc_device+0x98>
   12c18:	56 c0       	rjmp	.+172    	; 0x12cc6 <alloc_device+0x144>
   12c1a:	8b e2       	ldi	r24, 0x2B	; 43
   12c1c:	8c 9f       	mul	r24, r28
   12c1e:	80 01       	movw	r16, r0
   12c20:	8d 9f       	mul	r24, r29
   12c22:	10 0d       	add	r17, r0
   12c24:	11 24       	eor	r1, r1
   12c26:	04 57       	subi	r16, 0x74	; 116
   12c28:	11 4e       	sbci	r17, 0xE1	; 225
   12c2a:	84 e0       	ldi	r24, 0x04	; 4
   12c2c:	f8 01       	movw	r30, r16
   12c2e:	80 83       	st	Z, r24
   12c30:	61 e0       	ldi	r22, 0x01	; 1
   12c32:	70 e0       	ldi	r23, 0x00	; 0
   12c34:	8b e0       	ldi	r24, 0x0B	; 11
   12c36:	90 e0       	ldi	r25, 0x00	; 0
   12c38:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <safecalloc>
   12c3c:	f8 01       	movw	r30, r16
   12c3e:	90 a7       	std	Z+40, r25	; 0x28
   12c40:	87 a3       	std	Z+39, r24	; 0x27
   12c42:	12 a6       	std	Z+42, r1	; 0x2a
   12c44:	11 a6       	std	Z+41, r1	; 0x29
   12c46:	55 c0       	rjmp	.+170    	; 0x12cf2 <alloc_device+0x170>
   12c48:	8b e2       	ldi	r24, 0x2B	; 43
   12c4a:	8c 9f       	mul	r24, r28
   12c4c:	80 01       	movw	r16, r0
   12c4e:	8d 9f       	mul	r24, r29
   12c50:	10 0d       	add	r17, r0
   12c52:	11 24       	eor	r1, r1
   12c54:	04 57       	subi	r16, 0x74	; 116
   12c56:	11 4e       	sbci	r17, 0xE1	; 225
   12c58:	82 e0       	ldi	r24, 0x02	; 2
   12c5a:	f8 01       	movw	r30, r16
   12c5c:	80 83       	st	Z, r24
   12c5e:	61 e0       	ldi	r22, 0x01	; 1
   12c60:	70 e0       	ldi	r23, 0x00	; 0
   12c62:	82 e3       	ldi	r24, 0x32	; 50
   12c64:	90 e0       	ldi	r25, 0x00	; 0
   12c66:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <safecalloc>
   12c6a:	f8 01       	movw	r30, r16
   12c6c:	90 a7       	std	Z+40, r25	; 0x28
   12c6e:	87 a3       	std	Z+39, r24	; 0x27
   12c70:	61 e0       	ldi	r22, 0x01	; 1
   12c72:	70 e0       	ldi	r23, 0x00	; 0
   12c74:	86 e1       	ldi	r24, 0x16	; 22
   12c76:	90 e0       	ldi	r25, 0x00	; 0
   12c78:	20 c0       	rjmp	.+64     	; 0x12cba <alloc_device+0x138>
   12c7a:	8b e2       	ldi	r24, 0x2B	; 43
   12c7c:	8c 9f       	mul	r24, r28
   12c7e:	80 01       	movw	r16, r0
   12c80:	8d 9f       	mul	r24, r29
   12c82:	10 0d       	add	r17, r0
   12c84:	11 24       	eor	r1, r1
   12c86:	04 57       	subi	r16, 0x74	; 116
   12c88:	11 4e       	sbci	r17, 0xE1	; 225
   12c8a:	83 e0       	ldi	r24, 0x03	; 3
   12c8c:	f8 01       	movw	r30, r16
   12c8e:	80 83       	st	Z, r24
   12c90:	61 e0       	ldi	r22, 0x01	; 1
   12c92:	70 e0       	ldi	r23, 0x00	; 0
   12c94:	82 e3       	ldi	r24, 0x32	; 50
   12c96:	90 e0       	ldi	r25, 0x00	; 0
   12c98:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <safecalloc>
   12c9c:	f8 01       	movw	r30, r16
   12c9e:	90 a7       	std	Z+40, r25	; 0x28
   12ca0:	87 a3       	std	Z+39, r24	; 0x27
   12ca2:	61 e0       	ldi	r22, 0x01	; 1
   12ca4:	70 e0       	ldi	r23, 0x00	; 0
   12ca6:	86 e1       	ldi	r24, 0x16	; 22
   12ca8:	90 e0       	ldi	r25, 0x00	; 0
   12caa:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <safecalloc>
   12cae:	f8 01       	movw	r30, r16
   12cb0:	92 a7       	std	Z+42, r25	; 0x2a
   12cb2:	81 a7       	std	Z+41, r24	; 0x29
   12cb4:	ce 01       	movw	r24, r28
   12cb6:	eb de       	rcall	.-554    	; 0x12a8e <SS80_Set_Defaults>
   12cb8:	1c c0       	rjmp	.+56     	; 0x12cf2 <alloc_device+0x170>
   12cba:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <safecalloc>
   12cbe:	f8 01       	movw	r30, r16
   12cc0:	92 a7       	std	Z+42, r25	; 0x2a
   12cc2:	81 a7       	std	Z+41, r24	; 0x29
   12cc4:	16 c0       	rjmp	.+44     	; 0x12cf2 <alloc_device+0x170>
   12cc6:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   12cca:	80 ff       	sbrs	r24, 0
   12ccc:	10 c0       	rjmp	.+32     	; 0x12cee <alloc_device+0x16c>
   12cce:	c8 01       	movw	r24, r16
   12cd0:	b4 dd       	rcall	.-1176   	; 0x1283a <type_to_str>
   12cd2:	ed b7       	in	r30, 0x3d	; 61
   12cd4:	fe b7       	in	r31, 0x3e	; 62
   12cd6:	97 83       	std	Z+7, r25	; 0x07
   12cd8:	86 83       	std	Z+6, r24	; 0x06
   12cda:	15 83       	std	Z+5, r17	; 0x05
   12cdc:	04 83       	std	Z+4, r16	; 0x04
   12cde:	8f ee       	ldi	r24, 0xEF	; 239
   12ce0:	9e e1       	ldi	r25, 0x1E	; 30
   12ce2:	a0 e0       	ldi	r26, 0x00	; 0
   12ce4:	81 83       	std	Z+1, r24	; 0x01
   12ce6:	92 83       	std	Z+2, r25	; 0x02
   12ce8:	a3 83       	std	Z+3, r26	; 0x03
   12cea:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   12cee:	cf ef       	ldi	r28, 0xFF	; 255
   12cf0:	df ef       	ldi	r29, 0xFF	; 255
   12cf2:	ce 01       	movw	r24, r28
   12cf4:	cd b7       	in	r28, 0x3d	; 61
   12cf6:	de b7       	in	r29, 0x3e	; 62
   12cf8:	27 96       	adiw	r28, 0x07	; 7
   12cfa:	e4 e0       	ldi	r30, 0x04	; 4
   12cfc:	0c 94 43 e5 	jmp	0x1ca86	; 0x1ca86 <__epilogue_restores__+0x1c>

00012d00 <init_Devices>:
   12d00:	cf 93       	push	r28
   12d02:	df 93       	push	r29
   12d04:	10 92 16 19 	sts	0x1916, r1	; 0x801916 <stack_ind+0x1>
   12d08:	10 92 15 19 	sts	0x1915, r1	; 0x801915 <stack_ind>
   12d0c:	ec e8       	ldi	r30, 0x8C	; 140
   12d0e:	fe e1       	ldi	r31, 0x1E	; 30
   12d10:	9f ef       	ldi	r25, 0xFF	; 255
   12d12:	80 e2       	ldi	r24, 0x20	; 32
   12d14:	10 82       	st	Z, r1
   12d16:	11 82       	std	Z+1, r1	; 0x01
   12d18:	92 83       	std	Z+2, r25	; 0x02
   12d1a:	13 82       	std	Z+3, r1	; 0x03
   12d1c:	14 82       	std	Z+4, r1	; 0x04
   12d1e:	15 82       	std	Z+5, r1	; 0x05
   12d20:	16 82       	std	Z+6, r1	; 0x06
   12d22:	df 01       	movw	r26, r30
   12d24:	17 96       	adiw	r26, 0x07	; 7
   12d26:	ed 01       	movw	r28, r26
   12d28:	28 2f       	mov	r18, r24
   12d2a:	19 92       	st	Y+, r1
   12d2c:	2a 95       	dec	r18
   12d2e:	e9 f7       	brne	.-6      	; 0x12d2a <init_Devices+0x2a>
   12d30:	10 a6       	std	Z+40, r1	; 0x28
   12d32:	17 a2       	std	Z+39, r1	; 0x27
   12d34:	12 a6       	std	Z+42, r1	; 0x2a
   12d36:	11 a6       	std	Z+41, r1	; 0x29
   12d38:	bb 96       	adiw	r30, 0x2b	; 43
   12d3a:	c0 e2       	ldi	r28, 0x20	; 32
   12d3c:	e0 39       	cpi	r30, 0x90	; 144
   12d3e:	fc 07       	cpc	r31, r28
   12d40:	49 f7       	brne	.-46     	; 0x12d14 <init_Devices+0x14>
   12d42:	df 91       	pop	r29
   12d44:	cf 91       	pop	r28
   12d46:	08 95       	ret

00012d48 <push_state>:
   12d48:	20 91 15 19 	lds	r18, 0x1915	; 0x801915 <stack_ind>
   12d4c:	30 91 16 19 	lds	r19, 0x1916	; 0x801916 <stack_ind+0x1>
   12d50:	25 30       	cpi	r18, 0x05	; 5
   12d52:	31 05       	cpc	r19, r1
   12d54:	7c f4       	brge	.+30     	; 0x12d74 <push_state+0x2c>
   12d56:	a9 01       	movw	r20, r18
   12d58:	4f 5f       	subi	r20, 0xFF	; 255
   12d5a:	5f 4f       	sbci	r21, 0xFF	; 255
   12d5c:	50 93 16 19 	sts	0x1916, r21	; 0x801916 <stack_ind+0x1>
   12d60:	40 93 15 19 	sts	0x1915, r20	; 0x801915 <stack_ind>
   12d64:	22 0f       	add	r18, r18
   12d66:	33 1f       	adc	r19, r19
   12d68:	f9 01       	movw	r30, r18
   12d6a:	e5 5f       	subi	r30, 0xF5	; 245
   12d6c:	f6 4e       	sbci	r31, 0xE6	; 230
   12d6e:	80 83       	st	Z, r24
   12d70:	91 83       	std	Z+1, r25	; 0x01
   12d72:	08 95       	ret
   12d74:	80 e0       	ldi	r24, 0x00	; 0
   12d76:	90 e0       	ldi	r25, 0x00	; 0
   12d78:	08 95       	ret

00012d7a <pop_state>:
   12d7a:	80 91 15 19 	lds	r24, 0x1915	; 0x801915 <stack_ind>
   12d7e:	90 91 16 19 	lds	r25, 0x1916	; 0x801916 <stack_ind+0x1>
   12d82:	18 16       	cp	r1, r24
   12d84:	19 06       	cpc	r1, r25
   12d86:	6c f4       	brge	.+26     	; 0x12da2 <pop_state+0x28>
   12d88:	01 97       	sbiw	r24, 0x01	; 1
   12d8a:	90 93 16 19 	sts	0x1916, r25	; 0x801916 <stack_ind+0x1>
   12d8e:	80 93 15 19 	sts	0x1915, r24	; 0x801915 <stack_ind>
   12d92:	88 0f       	add	r24, r24
   12d94:	99 1f       	adc	r25, r25
   12d96:	fc 01       	movw	r30, r24
   12d98:	e5 5f       	subi	r30, 0xF5	; 245
   12d9a:	f6 4e       	sbci	r31, 0xE6	; 230
   12d9c:	80 81       	ld	r24, Z
   12d9e:	91 81       	ldd	r25, Z+1	; 0x01
   12da0:	08 95       	ret
   12da2:	80 e0       	ldi	r24, 0x00	; 0
   12da4:	90 e0       	ldi	r25, 0x00	; 0
   12da6:	08 95       	ret

00012da8 <set_Config_Defaults>:
   12da8:	08 95       	ret

00012daa <hpdir_set_device>:
///
///@param[in] model: model string
///
///@return 1 on sucess or 0 on fail
void hpdir_set_device(int index)
{
   12daa:	00 d0       	rcall	.+0      	; 0x12dac <hpdir_set_device+0x2>
   12dac:	1f 92       	push	r1
    SS80DiskType *SS80p = NULL;
#ifdef AMIGO
    AMIGODiskType *AMIGOp = NULL;
#endif
	if(Devices[index].TYPE == SS80_TYPE)
   12dae:	2b e2       	ldi	r18, 0x2B	; 43
   12db0:	28 9f       	mul	r18, r24
   12db2:	f0 01       	movw	r30, r0
   12db4:	29 9f       	mul	r18, r25
   12db6:	f0 0d       	add	r31, r0
   12db8:	11 24       	eor	r1, r1
   12dba:	e4 57       	subi	r30, 0x74	; 116
   12dbc:	f1 4e       	sbci	r31, 0xE1	; 225
   12dbe:	20 81       	ld	r18, Z
   12dc0:	23 30       	cpi	r18, 0x03	; 3
   12dc2:	a9 f5       	brne	.+106    	; 0x12e2e <hpdir_set_device+0x84>
	{
		SS80p = (SS80DiskType *) Devices[index].dev;
   12dc4:	07 a0       	ldd	r0, Z+39	; 0x27
   12dc6:	f0 a5       	ldd	r31, Z+40	; 0x28
   12dc8:	e0 2d       	mov	r30, r0
		return;
	}

	if(Devices[index].TYPE == SS80_TYPE)
	{
		SS80p->CONFIG.ID 				= hpdir.ID;
   12dca:	20 91 10 21 	lds	r18, 0x2110	; 0x802110 <hpdir+0x80>
   12dce:	30 91 11 21 	lds	r19, 0x2111	; 0x802111 <hpdir+0x81>
   12dd2:	35 83       	std	Z+5, r19	; 0x05
   12dd4:	24 83       	std	Z+4, r18	; 0x04
		SS80p->UNIT.DEVICE_NUMBER 		= hpdir.DEVICE_NUMBER;
   12dd6:	40 91 1c 21 	lds	r20, 0x211C	; 0x80211c <hpdir+0x8c>
   12dda:	50 91 1d 21 	lds	r21, 0x211D	; 0x80211d <hpdir+0x8d>
   12dde:	60 91 1e 21 	lds	r22, 0x211E	; 0x80211e <hpdir+0x8e>
   12de2:	70 91 1f 21 	lds	r23, 0x211F	; 0x80211f <hpdir+0x8f>
   12de6:	44 87       	std	Z+12, r20	; 0x0c
   12de8:	55 87       	std	Z+13, r21	; 0x0d
   12dea:	66 87       	std	Z+14, r22	; 0x0e
   12dec:	77 87       	std	Z+15, r23	; 0x0f
		SS80p->UNIT.BYTES_PER_BLOCK 	= hpdir.BYTES_PER_SECTOR;
   12dee:	20 91 30 21 	lds	r18, 0x2130	; 0x802130 <hpdir+0xa0>
   12df2:	30 91 31 21 	lds	r19, 0x2131	; 0x802131 <hpdir+0xa1>
   12df6:	31 8b       	std	Z+17, r19	; 0x11
   12df8:	20 8b       	std	Z+16, r18	; 0x10

		// CHS NOT used in this emulator!
		SS80p->VOLUME.MAX_CYLINDER 		= 0;	// hpdir.CYLINDERS-1;
   12dfa:	17 8e       	std	Z+31, r1	; 0x1f
   12dfc:	10 a2       	std	Z+32, r1	; 0x20
   12dfe:	11 a2       	std	Z+33, r1	; 0x21
   12e00:	12 a2       	std	Z+34, r1	; 0x22
		SS80p->VOLUME.MAX_HEAD 			= 0;	// hpdir.HEADS-1;
   12e02:	13 a2       	std	Z+35, r1	; 0x23
		SS80p->VOLUME.MAX_SECTOR 		= 0;	// hpdir.SECTORS-1;
   12e04:	15 a2       	std	Z+37, r1	; 0x25
   12e06:	14 a2       	std	Z+36, r1	; 0x24

		SS80p->VOLUME.MAX_BLOCK_NUMBER 	= hpdir.BLOCKS-1;
   12e08:	40 91 3c 21 	lds	r20, 0x213C	; 0x80213c <hpdir+0xac>
   12e0c:	50 91 3d 21 	lds	r21, 0x213D	; 0x80213d <hpdir+0xad>
   12e10:	60 91 3e 21 	lds	r22, 0x213E	; 0x80213e <hpdir+0xae>
   12e14:	70 91 3f 21 	lds	r23, 0x213F	; 0x80213f <hpdir+0xaf>
   12e18:	41 50       	subi	r20, 0x01	; 1
   12e1a:	51 09       	sbc	r21, r1
   12e1c:	61 09       	sbc	r22, r1
   12e1e:	71 09       	sbc	r23, r1
   12e20:	46 a3       	std	Z+38, r20	; 0x26
   12e22:	57 a3       	std	Z+39, r21	; 0x27
   12e24:	60 a7       	std	Z+40, r22	; 0x28
   12e26:	71 a7       	std	Z+41, r23	; 0x29
///@return 1 on sucess or 0 on fail
void hpdir_set_device(int index)
{
    SS80DiskType *SS80p = NULL;
#ifdef AMIGO
    AMIGODiskType *AMIGOp = NULL;
   12e28:	e0 e0       	ldi	r30, 0x00	; 0
   12e2a:	f0 e0       	ldi	r31, 0x00	; 0
   12e2c:	11 c0       	rjmp	.+34     	; 0x12e50 <hpdir_set_device+0xa6>
	if(Devices[index].TYPE == SS80_TYPE)
	{
		SS80p = (SS80DiskType *) Devices[index].dev;
	}
#ifdef AMIGO
	else if(Devices[index].TYPE == AMIGO_TYPE)
   12e2e:	21 30       	cpi	r18, 0x01	; 1
   12e30:	21 f4       	brne	.+8      	; 0x12e3a <hpdir_set_device+0x90>
	{
		AMIGOp = (AMIGODiskType *) Devices[index].dev;
   12e32:	07 a0       	ldd	r0, Z+39	; 0x27
   12e34:	f0 a5       	ldd	r31, Z+40	; 0x28
   12e36:	e0 2d       	mov	r30, r0
   12e38:	0b c0       	rjmp	.+22     	; 0x12e50 <hpdir_set_device+0xa6>
	}
#endif
	else
	{
		printf("hpdir_parameters invalid TYPE\n");
   12e3a:	80 ed       	ldi	r24, 0xD0	; 208
   12e3c:	9e e1       	ldi	r25, 0x1E	; 30
   12e3e:	a0 e0       	ldi	r26, 0x00	; 0
   12e40:	ed b7       	in	r30, 0x3d	; 61
   12e42:	fe b7       	in	r31, 0x3e	; 62
   12e44:	81 83       	std	Z+1, r24	; 0x01
   12e46:	92 83       	std	Z+2, r25	; 0x02
   12e48:	a3 83       	std	Z+3, r26	; 0x03
   12e4a:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
		return;
   12e4e:	47 c0       	rjmp	.+142    	; 0x12ede <hpdir_set_device+0x134>

		SS80p->VOLUME.MAX_BLOCK_NUMBER 	= hpdir.BLOCKS-1;
	}

#ifdef AMIGO
	if(Devices[index].TYPE == AMIGO_TYPE)
   12e50:	2b e2       	ldi	r18, 0x2B	; 43
   12e52:	28 9f       	mul	r18, r24
   12e54:	d0 01       	movw	r26, r0
   12e56:	29 9f       	mul	r18, r25
   12e58:	b0 0d       	add	r27, r0
   12e5a:	11 24       	eor	r1, r1
   12e5c:	a4 57       	subi	r26, 0x74	; 116
   12e5e:	b1 4e       	sbci	r27, 0xE1	; 225
   12e60:	2c 91       	ld	r18, X
   12e62:	21 30       	cpi	r18, 0x01	; 1
   12e64:	f1 f4       	brne	.+60     	; 0x12ea2 <hpdir_set_device+0xf8>
	{
		AMIGOp->CONFIG.ID = hpdir.ID;
   12e66:	20 91 10 21 	lds	r18, 0x2110	; 0x802110 <hpdir+0x80>
   12e6a:	30 91 11 21 	lds	r19, 0x2111	; 0x802111 <hpdir+0x81>
   12e6e:	35 83       	std	Z+5, r19	; 0x05
   12e70:	24 83       	std	Z+4, r18	; 0x04
		AMIGOp->GEOMETRY.BYTES_PER_SECTOR = hpdir.BYTES_PER_SECTOR;
   12e72:	20 91 30 21 	lds	r18, 0x2130	; 0x802130 <hpdir+0xa0>
   12e76:	30 91 31 21 	lds	r19, 0x2131	; 0x802131 <hpdir+0xa1>
   12e7a:	37 83       	std	Z+7, r19	; 0x07
   12e7c:	26 83       	std	Z+6, r18	; 0x06
		AMIGOp->GEOMETRY.SECTORS_PER_TRACK = hpdir.SECTORS;
   12e7e:	20 91 2c 21 	lds	r18, 0x212C	; 0x80212c <hpdir+0x9c>
   12e82:	30 91 2d 21 	lds	r19, 0x212D	; 0x80212d <hpdir+0x9d>
   12e86:	31 87       	std	Z+9, r19	; 0x09
   12e88:	20 87       	std	Z+8, r18	; 0x08
		AMIGOp->GEOMETRY.HEADS = hpdir.HEADS;
   12e8a:	20 91 28 21 	lds	r18, 0x2128	; 0x802128 <hpdir+0x98>
   12e8e:	30 91 29 21 	lds	r19, 0x2129	; 0x802129 <hpdir+0x99>
   12e92:	33 87       	std	Z+11, r19	; 0x0b
   12e94:	22 87       	std	Z+10, r18	; 0x0a
		AMIGOp->GEOMETRY.CYLINDERS = hpdir.CYLINDERS;
   12e96:	20 91 24 21 	lds	r18, 0x2124	; 0x802124 <hpdir+0x94>
   12e9a:	30 91 25 21 	lds	r19, 0x2125	; 0x802125 <hpdir+0x95>
   12e9e:	35 87       	std	Z+13, r19	; 0x0d
   12ea0:	24 87       	std	Z+12, r18	; 0x0c
	}
#endif
	Devices[index].BLOCKS = hpdir.BLOCKS;
   12ea2:	4b e2       	ldi	r20, 0x2B	; 43
   12ea4:	48 9f       	mul	r20, r24
   12ea6:	90 01       	movw	r18, r0
   12ea8:	49 9f       	mul	r20, r25
   12eaa:	30 0d       	add	r19, r0
   12eac:	11 24       	eor	r1, r1
   12eae:	f9 01       	movw	r30, r18
   12eb0:	e4 57       	subi	r30, 0x74	; 116
   12eb2:	f1 4e       	sbci	r31, 0xE1	; 225
   12eb4:	80 91 3c 21 	lds	r24, 0x213C	; 0x80213c <hpdir+0xac>
   12eb8:	90 91 3d 21 	lds	r25, 0x213D	; 0x80213d <hpdir+0xad>
   12ebc:	a0 91 3e 21 	lds	r26, 0x213E	; 0x80213e <hpdir+0xae>
   12ec0:	b0 91 3f 21 	lds	r27, 0x213F	; 0x80213f <hpdir+0xaf>
   12ec4:	83 83       	std	Z+3, r24	; 0x03
   12ec6:	94 83       	std	Z+4, r25	; 0x04
   12ec8:	a5 83       	std	Z+5, r26	; 0x05
   12eca:	b6 83       	std	Z+6, r27	; 0x06
	strncpy(Devices[index].model, hpdir.model, sizeof(Devices[index].model) -2);
   12ecc:	4e e1       	ldi	r20, 0x1E	; 30
   12ece:	50 e0       	ldi	r21, 0x00	; 0
   12ed0:	60 e9       	ldi	r22, 0x90	; 144
   12ed2:	70 e2       	ldi	r23, 0x20	; 32
   12ed4:	c9 01       	movw	r24, r18
   12ed6:	8d 56       	subi	r24, 0x6D	; 109
   12ed8:	91 4e       	sbci	r25, 0xE1	; 225
   12eda:	0e 94 f0 32 	call	0x65e0	; 0x65e0 <strncpy>

}
   12ede:	0f 90       	pop	r0
   12ee0:	0f 90       	pop	r0
   12ee2:	0f 90       	pop	r0
   12ee4:	08 95       	ret

00012ee6 <hpdir_set_parameters>:
///@param[in] index: Devices index
///@param[in] model: model string
///
///@return void
void hpdir_set_parameters(int index, char *model)
{
   12ee6:	cf 93       	push	r28
   12ee8:	df 93       	push	r29
   12eea:	ec 01       	movw	r28, r24
   12eec:	cb 01       	movw	r24, r22
	if ( hpdir_find_drive( model, 0 ,1) )
   12eee:	41 e0       	ldi	r20, 0x01	; 1
   12ef0:	50 e0       	ldi	r21, 0x00	; 0
   12ef2:	60 e0       	ldi	r22, 0x00	; 0
   12ef4:	70 e0       	ldi	r23, 0x00	; 0
   12ef6:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <hpdir_find_drive>
   12efa:	89 2b       	or	r24, r25
   12efc:	11 f0       	breq	.+4      	; 0x12f02 <hpdir_set_parameters+0x1c>
		hpdir_set_device(index);
   12efe:	ce 01       	movw	r24, r28
   12f00:	54 df       	rcall	.-344    	; 0x12daa <hpdir_set_device>
}
   12f02:	df 91       	pop	r29
   12f04:	cf 91       	pop	r28
   12f06:	08 95       	ret

00012f08 <Post_Config>:

/// ===============================================
/// @brief Post Process COnfiguration file after reading
/// @return  void
void Post_Config()
{
   12f08:	4f 92       	push	r4
   12f0a:	5f 92       	push	r5
   12f0c:	6f 92       	push	r6
   12f0e:	7f 92       	push	r7
   12f10:	8f 92       	push	r8
   12f12:	af 92       	push	r10
   12f14:	bf 92       	push	r11
   12f16:	cf 92       	push	r12
   12f18:	df 92       	push	r13
   12f1a:	ef 92       	push	r14
   12f1c:	0f 93       	push	r16
   12f1e:	1f 93       	push	r17
   12f20:	cf 93       	push	r28
   12f22:	df 93       	push	r29
   12f24:	00 d0       	rcall	.+0      	; 0x12f26 <Post_Config+0x1e>
   12f26:	00 d0       	rcall	.+0      	; 0x12f28 <Post_Config+0x20>
   12f28:	1f 92       	push	r1
   12f2a:	cc e8       	ldi	r28, 0x8C	; 140
   12f2c:	de e1       	ldi	r29, 0x1E	; 30
   12f2e:	80 e9       	ldi	r24, 0x90	; 144
   12f30:	48 2e       	mov	r4, r24
   12f32:	80 e2       	ldi	r24, 0x20	; 32
   12f34:	58 2e       	mov	r5, r24
        if(Devices[i].TYPE == AMIGO_TYPE )
        {
            AMIGOp = (AMIGODiskType *)Devices[i].dev;
			if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
			{
				AMIGOp->GEOMETRY.BYTES_PER_SECTOR = 256;
   12f36:	a1 2c       	mov	r10, r1
   12f38:	bb 24       	eor	r11, r11
   12f3a:	b3 94       	inc	r11
				printf("Warning: %s BYTES_PER_SECTOR != 256, Adjusting to 256\n", Devices[i].model);
   12f3c:	83 e6       	ldi	r24, 0x63	; 99
   12f3e:	9e e1       	ldi	r25, 0x1E	; 30
   12f40:	6c 01       	movw	r12, r24
   12f42:	e1 2c       	mov	r14, r1
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
			if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
			{
				// SS80p->UNIT.BYTES_PER_BLOCK = 256;
				printf("Warning: %s BYTES_PER_BLOCK != 256, Adjusting to 256\n", Devices[i].model);
   12f44:	8a e9       	ldi	r24, 0x9A	; 154
   12f46:	9e e1       	ldi	r25, 0x1E	; 30
   12f48:	3c 01       	movw	r6, r24
   12f4a:	81 2c       	mov	r8, r1
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   12f4c:	88 81       	ld	r24, Y
   12f4e:	88 23       	and	r24, r24
   12f50:	09 f4       	brne	.+2      	; 0x12f54 <Post_Config+0x4c>
   12f52:	57 c0       	rjmp	.+174    	; 0x13002 <Post_Config+0xfa>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   12f54:	83 30       	cpi	r24, 0x03	; 3
   12f56:	f9 f4       	brne	.+62     	; 0x12f96 <Post_Config+0x8e>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   12f58:	0f a1       	ldd	r16, Y+39	; 0x27
   12f5a:	18 a5       	ldd	r17, Y+40	; 0x28
			if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
   12f5c:	f8 01       	movw	r30, r16
   12f5e:	80 89       	ldd	r24, Z+16	; 0x10
   12f60:	91 89       	ldd	r25, Z+17	; 0x11
   12f62:	81 15       	cp	r24, r1
   12f64:	91 40       	sbci	r25, 0x01	; 1
   12f66:	59 f0       	breq	.+22     	; 0x12f7e <Post_Config+0x76>
			{
				// SS80p->UNIT.BYTES_PER_BLOCK = 256;
				printf("Warning: %s BYTES_PER_BLOCK != 256, Adjusting to 256\n", Devices[i].model);
   12f68:	ce 01       	movw	r24, r28
   12f6a:	07 96       	adiw	r24, 0x07	; 7
   12f6c:	ed b7       	in	r30, 0x3d	; 61
   12f6e:	fe b7       	in	r31, 0x3e	; 62
   12f70:	95 83       	std	Z+5, r25	; 0x05
   12f72:	84 83       	std	Z+4, r24	; 0x04
   12f74:	61 82       	std	Z+1, r6	; 0x01
   12f76:	72 82       	std	Z+2, r7	; 0x02
   12f78:	83 82       	std	Z+3, r8	; 0x03
   12f7a:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
			}
			sectors = SS80p->VOLUME.MAX_BLOCK_NUMBER+1;
			Devices[i].BLOCKS = sectors;
   12f7e:	f8 01       	movw	r30, r16
   12f80:	86 a1       	ldd	r24, Z+38	; 0x26
   12f82:	97 a1       	ldd	r25, Z+39	; 0x27
   12f84:	a0 a5       	ldd	r26, Z+40	; 0x28
   12f86:	b1 a5       	ldd	r27, Z+41	; 0x29
   12f88:	01 96       	adiw	r24, 0x01	; 1
   12f8a:	a1 1d       	adc	r26, r1
   12f8c:	b1 1d       	adc	r27, r1
   12f8e:	8b 83       	std	Y+3, r24	; 0x03
   12f90:	9c 83       	std	Y+4, r25	; 0x04
   12f92:	ad 83       	std	Y+5, r26	; 0x05
   12f94:	be 83       	std	Y+6, r27	; 0x06
        } // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   12f96:	88 81       	ld	r24, Y
   12f98:	81 30       	cpi	r24, 0x01	; 1
   12f9a:	99 f5       	brne	.+102    	; 0x13002 <Post_Config+0xfa>
        {
            AMIGOp = (AMIGODiskType *)Devices[i].dev;
   12f9c:	0f a1       	ldd	r16, Y+39	; 0x27
   12f9e:	18 a5       	ldd	r17, Y+40	; 0x28
			if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
   12fa0:	f8 01       	movw	r30, r16
   12fa2:	86 81       	ldd	r24, Z+6	; 0x06
   12fa4:	97 81       	ldd	r25, Z+7	; 0x07
   12fa6:	81 15       	cp	r24, r1
   12fa8:	91 40       	sbci	r25, 0x01	; 1
   12faa:	71 f0       	breq	.+28     	; 0x12fc8 <Post_Config+0xc0>
			{
				AMIGOp->GEOMETRY.BYTES_PER_SECTOR = 256;
   12fac:	f8 01       	movw	r30, r16
   12fae:	b7 82       	std	Z+7, r11	; 0x07
   12fb0:	a6 82       	std	Z+6, r10	; 0x06
				printf("Warning: %s BYTES_PER_SECTOR != 256, Adjusting to 256\n", Devices[i].model);
   12fb2:	ce 01       	movw	r24, r28
   12fb4:	07 96       	adiw	r24, 0x07	; 7
   12fb6:	ed b7       	in	r30, 0x3d	; 61
   12fb8:	fe b7       	in	r31, 0x3e	; 62
   12fba:	95 83       	std	Z+5, r25	; 0x05
   12fbc:	84 83       	std	Z+4, r24	; 0x04
   12fbe:	c1 82       	std	Z+1, r12	; 0x01
   12fc0:	d2 82       	std	Z+2, r13	; 0x02
   12fc2:	e3 82       	std	Z+3, r14	; 0x03
   12fc4:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
			}
			sectors = AMIGOp->GEOMETRY.SECTORS_PER_TRACK
				 * AMIGOp->GEOMETRY.HEADS
				 * AMIGOp->GEOMETRY.CYLINDERS;
			Devices[i].BLOCKS = sectors;
   12fc8:	f8 01       	movw	r30, r16
   12fca:	20 85       	ldd	r18, Z+8	; 0x08
   12fcc:	31 85       	ldd	r19, Z+9	; 0x09
   12fce:	82 85       	ldd	r24, Z+10	; 0x0a
   12fd0:	93 85       	ldd	r25, Z+11	; 0x0b
   12fd2:	28 9f       	mul	r18, r24
   12fd4:	a0 01       	movw	r20, r0
   12fd6:	29 9f       	mul	r18, r25
   12fd8:	50 0d       	add	r21, r0
   12fda:	38 9f       	mul	r19, r24
   12fdc:	50 0d       	add	r21, r0
   12fde:	11 24       	eor	r1, r1
   12fe0:	24 85       	ldd	r18, Z+12	; 0x0c
   12fe2:	35 85       	ldd	r19, Z+13	; 0x0d
   12fe4:	42 9f       	mul	r20, r18
   12fe6:	c0 01       	movw	r24, r0
   12fe8:	43 9f       	mul	r20, r19
   12fea:	90 0d       	add	r25, r0
   12fec:	52 9f       	mul	r21, r18
   12fee:	90 0d       	add	r25, r0
   12ff0:	11 24       	eor	r1, r1
   12ff2:	09 2e       	mov	r0, r25
   12ff4:	00 0c       	add	r0, r0
   12ff6:	aa 0b       	sbc	r26, r26
   12ff8:	bb 0b       	sbc	r27, r27
   12ffa:	8b 83       	std	Y+3, r24	; 0x03
   12ffc:	9c 83       	std	Y+4, r25	; 0x04
   12ffe:	ad 83       	std	Y+5, r26	; 0x05
   13000:	be 83       	std	Y+6, r27	; 0x06
   13002:	ab 96       	adiw	r28, 0x2b	; 43
#ifdef AMIGO
    ///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
   13004:	4c 16       	cp	r4, r28
   13006:	5d 06       	cpc	r5, r29
   13008:	09 f0       	breq	.+2      	; 0x1300c <Post_Config+0x104>
   1300a:	a0 cf       	rjmp	.-192    	; 0x12f4c <Post_Config+0x44>
				 * AMIGOp->GEOMETRY.CYLINDERS;
			Devices[i].BLOCKS = sectors;
        } 
#endif // #ifdef AMIGO
    }
}
   1300c:	0f 90       	pop	r0
   1300e:	0f 90       	pop	r0
   13010:	0f 90       	pop	r0
   13012:	0f 90       	pop	r0
   13014:	0f 90       	pop	r0
   13016:	df 91       	pop	r29
   13018:	cf 91       	pop	r28
   1301a:	1f 91       	pop	r17
   1301c:	0f 91       	pop	r16
   1301e:	ef 90       	pop	r14
   13020:	df 90       	pop	r13
   13022:	cf 90       	pop	r12
   13024:	bf 90       	pop	r11
   13026:	af 90       	pop	r10
   13028:	8f 90       	pop	r8
   1302a:	7f 90       	pop	r7
   1302c:	6f 90       	pop	r6
   1302e:	5f 90       	pop	r5
   13030:	4f 90       	pop	r4
   13032:	08 95       	ret

00013034 <Read_Config>:
/// Set all drive parameters and debuglevel 
///
/// @param name: config file name to process
/// @return  number of parse errors
int Read_Config(char *name)
{
   13034:	a3 ea       	ldi	r26, 0xA3	; 163
   13036:	b1 e0       	ldi	r27, 0x01	; 1
   13038:	e0 e2       	ldi	r30, 0x20	; 32
   1303a:	f8 e9       	ldi	r31, 0x98	; 152
   1303c:	0c 94 19 e5 	jmp	0x1ca32	; 0x1ca32 <__prologue_saves__>
    char *ptr;
    char str[128];
    char token[128];
    char arg[128];

    init_Devices();
   13040:	8c 01       	movw	r16, r24

    lines = 0;
   13042:	5e de       	rcall	.-836    	; 0x12d00 <init_Devices>
   13044:	10 92 00 19 	sts	0x1900, r1	; 0x801900 <lines+0x1>
   13048:	10 92 ff 18 	sts	0x18FF, r1	; 0x8018ff <lines>

    printf("Reading: %s\n", name);
   1304c:	ed b7       	in	r30, 0x3d	; 61
   1304e:	fe b7       	in	r31, 0x3e	; 62
   13050:	15 83       	std	Z+5, r17	; 0x05
   13052:	04 83       	std	Z+4, r16	; 0x04
   13054:	86 e5       	ldi	r24, 0x56	; 86
   13056:	9e e1       	ldi	r25, 0x1E	; 30
   13058:	a0 e0       	ldi	r26, 0x00	; 0
   1305a:	81 83       	std	Z+1, r24	; 0x01
   1305c:	92 83       	std	Z+2, r25	; 0x02
   1305e:	a3 83       	std	Z+3, r26	; 0x03
   13060:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    cfg = fopen(name, "rb");
   13064:	6c e1       	ldi	r22, 0x1C	; 28
   13066:	78 e0       	ldi	r23, 0x08	; 8
   13068:	c8 01       	movw	r24, r16
   1306a:	0e 94 c4 7f 	call	0xff88	; 0xff88 <fopen>
   1306e:	c0 57       	subi	r28, 0x70	; 112
   13070:	de 4f       	sbci	r29, 0xFE	; 254
   13072:	99 83       	std	Y+1, r25	; 0x01
   13074:	88 83       	st	Y, r24
   13076:	c0 59       	subi	r28, 0x90	; 144
    if(cfg == NULL)
   13078:	d1 40       	sbci	r29, 0x01	; 1
   1307a:	89 2b       	or	r24, r25
   1307c:	09 f4       	brne	.+2      	; 0x13080 <Read_Config+0x4c>
   1307e:	60 c0       	rjmp	.+192    	; 0x13140 <Read_Config+0x10c>
   13080:	c4 57       	subi	r28, 0x74	; 116
   13082:	de 4f       	sbci	r29, 0xFE	; 254
   13084:	19 82       	std	Y+1, r1	; 0x01
   13086:	18 82       	st	Y, r1
   13088:	cc 58       	subi	r28, 0x8C	; 140
   1308a:	d1 40       	sbci	r29, 0x01	; 1
   1308c:	a1 2c       	mov	r10, r1
   1308e:	b1 2c       	mov	r11, r1
   13090:	c2 57       	subi	r28, 0x72	; 114
   13092:	de 4f       	sbci	r29, 0xFE	; 254
   13094:	19 82       	std	Y+1, r1	; 0x01
   13096:	18 82       	st	Y, r1
   13098:	ce 58       	subi	r28, 0x8E	; 142
   1309a:	d1 40       	sbci	r29, 0x01	; 1
   1309c:	c1 2c       	mov	r12, r1
   1309e:	d1 2c       	mov	r13, r1
   130a0:	e1 2c       	mov	r14, r1
   130a2:	f1 2c       	mov	r15, r1
   130a4:	c6 57       	subi	r28, 0x76	; 118
   130a6:	de 4f       	sbci	r29, 0xFE	; 254
   130a8:	19 82       	std	Y+1, r1	; 0x01
   130aa:	18 82       	st	Y, r1
   130ac:	ca 58       	subi	r28, 0x8A	; 138
        printf("Read_Config: open(%s) failed\n", name);
        set_Config_Defaults();
        return(errors);
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   130ae:	d1 40       	sbci	r29, 0x01	; 1
   130b0:	4e 01       	movw	r8, r28
   130b2:	f6 ef       	ldi	r31, 0xF6	; 246
   130b4:	8f 1a       	sub	r8, r31
   130b6:	fe ef       	ldi	r31, 0xFE	; 254
            }
            break;
#endif // #ifdef AMIGO

        default:
            printf("Fatal Unexpected STATE %d at line:%d\n", state, lines);
   130b8:	9f 0a       	sbc	r9, r31
   130ba:	89 ec       	ldi	r24, 0xC9	; 201
   130bc:	99 e1       	ldi	r25, 0x19	; 25
   130be:	9c 01       	movw	r18, r24
   130c0:	40 e0       	ldi	r20, 0x00	; 0
   130c2:	ce 56       	subi	r28, 0x6E	; 110
   130c4:	de 4f       	sbci	r29, 0xFE	; 254
   130c6:	28 83       	st	Y, r18
   130c8:	39 83       	std	Y+1, r19	; 0x01
   130ca:	4a 83       	std	Y+2, r20	; 0x02
   130cc:	c2 59       	subi	r28, 0x92	; 146
            {
                AMIGOp->GEOMETRY.CYLINDERS = val.w;
            }
            else
            {
                printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", str,lines);
   130ce:	d1 40       	sbci	r29, 0x01	; 1
   130d0:	8f ee       	ldi	r24, 0xEF	; 239
   130d2:	99 e1       	ldi	r25, 0x19	; 25
   130d4:	9c 01       	movw	r18, r24
   130d6:	40 e0       	ldi	r20, 0x00	; 0
   130d8:	cb 56       	subi	r28, 0x6B	; 107
   130da:	de 4f       	sbci	r29, 0xFE	; 254
   130dc:	28 83       	st	Y, r18
   130de:	39 83       	std	Y+1, r19	; 0x01
   130e0:	4a 83       	std	Y+2, r20	; 0x02
   130e2:	c5 59       	subi	r28, 0x95	; 149
        case AMIGO_GEOMETRY:
            if( MATCHI (token,"BYTES_PER_SECTOR") )
            {
                if(val.w > 0x1000)
				{
					printf("Fatal: AMIGO BYTES_PER_SECTOR > 0x1000, set to 256 at line:%d\n", lines);
   130e4:	d1 40       	sbci	r29, 0x01	; 1
   130e6:	8f e1       	ldi	r24, 0x1F	; 31
   130e8:	9a e1       	ldi	r25, 0x1A	; 26
   130ea:	9c 01       	movw	r18, r24
   130ec:	40 e0       	ldi	r20, 0x00	; 0
   130ee:	c8 56       	subi	r28, 0x68	; 104
   130f0:	de 4f       	sbci	r29, 0xFE	; 254
   130f2:	28 83       	st	Y, r18
   130f4:	39 83       	std	Y+1, r19	; 0x01
   130f6:	4a 83       	std	Y+2, r20	; 0x02
   130f8:	c8 59       	subi	r28, 0x98	; 152
            {
                AMIGOp->CONFIG.ID = val.w;
            }
            else
            {
                printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", str,lines);
   130fa:	d1 40       	sbci	r29, 0x01	; 1
   130fc:	8e e5       	ldi	r24, 0x5E	; 94
   130fe:	9a e1       	ldi	r25, 0x1A	; 26
   13100:	9c 01       	movw	r18, r24
   13102:	40 e0       	ldi	r20, 0x00	; 0
   13104:	c5 56       	subi	r28, 0x65	; 101
   13106:	de 4f       	sbci	r29, 0xFE	; 254
   13108:	28 83       	st	Y, r18
   1310a:	39 83       	std	Y+1, r19	; 0x01
   1310c:	4a 83       	std	Y+2, r20	; 0x02
   1310e:	cb 59       	subi	r28, 0x9B	; 155
            {
                AMIGOp->HEADER.NAME = stralloc(arg);
            }
            else
            {
                printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", str,lines);
   13110:	d1 40       	sbci	r29, 0x01	; 1
   13112:	8d e8       	ldi	r24, 0x8D	; 141
   13114:	9a e1       	ldi	r25, 0x1A	; 26
   13116:	9c 01       	movw	r18, r24
   13118:	40 e0       	ldi	r20, 0x00	; 0
   1311a:	c2 56       	subi	r28, 0x62	; 98
   1311c:	de 4f       	sbci	r29, 0xFE	; 254
   1311e:	28 83       	st	Y, r18
   13120:	39 83       	std	Y+1, r19	; 0x01
   13122:	4a 83       	std	Y+2, r20	; 0x02
   13124:	ce 59       	subi	r28, 0x9E	; 158
            }
            else if( MATCHI (token,"PPR") )
            {
                if(val.b > 7)
				{
					printf("Warning AMIGO ADDRESS: %d > 7, disabled at line:%d\n", str,lines);
   13126:	d1 40       	sbci	r29, 0x01	; 1
   13128:	8d eb       	ldi	r24, 0xBD	; 189
   1312a:	9a e1       	ldi	r25, 0x1A	; 26
   1312c:	9c 01       	movw	r18, r24
   1312e:	40 e0       	ldi	r20, 0x00	; 0
   13130:	cf 55       	subi	r28, 0x5F	; 95
   13132:	de 4f       	sbci	r29, 0xFE	; 254
   13134:	28 83       	st	Y, r18
   13136:	39 83       	std	Y+1, r19	; 0x01
   13138:	4a 83       	std	Y+2, r20	; 0x02
   1313a:	c1 5a       	subi	r28, 0xA1	; 161
   1313c:	d1 40       	sbci	r29, 0x01	; 1
    cfg = fopen(name, "rb");
    if(cfg == NULL)
    {
        ++errors;
        //FIXME
        perror("Read_Config - open");
   1313e:	27 c0       	rjmp	.+78     	; 0x1318e <Read_Config+0x15a>
   13140:	89 e7       	ldi	r24, 0x79	; 121
   13142:	9d e0       	ldi	r25, 0x0D	; 13
   13144:	0e 94 f5 79 	call	0xf3ea	; 0xf3ea <perror>
        printf("Read_Config: open(%s) failed\n", name);
   13148:	ed b7       	in	r30, 0x3d	; 61
   1314a:	fe b7       	in	r31, 0x3e	; 62
   1314c:	15 83       	std	Z+5, r17	; 0x05
   1314e:	04 83       	std	Z+4, r16	; 0x04
   13150:	88 e3       	ldi	r24, 0x38	; 56
   13152:	9e e1       	ldi	r25, 0x1E	; 30
   13154:	a0 e0       	ldi	r26, 0x00	; 0
   13156:	81 83       	std	Z+1, r24	; 0x01
   13158:	92 83       	std	Z+2, r25	; 0x02
   1315a:	a3 83       	std	Z+3, r26	; 0x03
   1315c:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
        set_Config_Defaults();
        return(errors);
   13160:	81 e0       	ldi	r24, 0x01	; 1
   13162:	90 e0       	ldi	r25, 0x00	; 0
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
        ++lines;
   13164:	a9 c5       	rjmp	.+2898   	; 0x13cb8 <Read_Config+0xc84>
   13166:	2f 5f       	subi	r18, 0xFF	; 255
   13168:	3f 4f       	sbci	r19, 0xFF	; 255
   1316a:	30 93 00 19 	sts	0x1900, r19	; 0x801900 <lines+0x1>
   1316e:	20 93 ff 18 	sts	0x18FF, r18	; 0x8018ff <lines>

        ptr = str;

        trim_tail(ptr);
   13172:	c4 01       	movw	r24, r8
   13174:	0e 94 c3 33 	call	0x6786	; 0x6786 <trim_tail>
        ptr = skipspaces(ptr);
   13178:	c4 01       	movw	r24, r8
   1317a:	0e 94 d3 33 	call	0x67a6	; 0x67a6 <skipspaces>
        len = strlen(ptr);
   1317e:	fc 01       	movw	r30, r24
   13180:	01 90       	ld	r0, Z+
   13182:	00 20       	and	r0, r0
   13184:	e9 f7       	brne	.-6      	; 0x13180 <Read_Config+0x14c>

        if(!len)
   13186:	31 97       	sbiw	r30, 0x01	; 1
   13188:	8e 17       	cp	r24, r30
   1318a:	9f 07       	cpc	r25, r31
        printf("Read_Config: open(%s) failed\n", name);
        set_Config_Defaults();
        return(errors);
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   1318c:	91 f4       	brne	.+36     	; 0x131b2 <Read_Config+0x17e>
   1318e:	c0 57       	subi	r28, 0x70	; 112
   13190:	de 4f       	sbci	r29, 0xFE	; 254
   13192:	48 81       	ld	r20, Y
   13194:	59 81       	ldd	r21, Y+1	; 0x01
   13196:	c0 59       	subi	r28, 0x90	; 144
   13198:	d1 40       	sbci	r29, 0x01	; 1
   1319a:	6e e7       	ldi	r22, 0x7E	; 126
   1319c:	70 e0       	ldi	r23, 0x00	; 0
   1319e:	c4 01       	movw	r24, r8
   131a0:	0e 94 dc 77 	call	0xefb8	; 0xefb8 <fgets>
   131a4:	20 91 ff 18 	lds	r18, 0x18FF	; 0x8018ff <lines>
   131a8:	30 91 00 19 	lds	r19, 0x1900	; 0x801900 <lines+0x1>
   131ac:	89 2b       	or	r24, r25
   131ae:	d9 f6       	brne	.-74     	; 0x13166 <Read_Config+0x132>

        if(!len)
            continue;

        // Skip comments
        if(*ptr == '#')
   131b0:	3a c5       	rjmp	.+2676   	; 0x13c26 <Read_Config+0xbf2>
   131b2:	dc 01       	movw	r26, r24
   131b4:	2c 91       	ld	r18, X
   131b6:	23 32       	cpi	r18, 0x23	; 35
            continue;

		*token = 0;
   131b8:	51 f3       	breq	.-44     	; 0x1318e <Read_Config+0x15a>
   131ba:	8e 01       	movw	r16, r28
   131bc:	06 57       	subi	r16, 0x76	; 118
   131be:	1f 4f       	sbci	r17, 0xFF	; 255
   131c0:	f8 01       	movw	r30, r16
		*arg = 0;
   131c2:	10 82       	st	Z, r1
		val.l = 0;

		// To save on code we process a token and optional argument here
		ptr = get_token(ptr,token, sizeof(token)-2);
   131c4:	1a 86       	std	Y+10, r1	; 0x0a
   131c6:	4e e7       	ldi	r20, 0x7E	; 126
   131c8:	50 e0       	ldi	r21, 0x00	; 0
   131ca:	b8 01       	movw	r22, r16
   131cc:	0e 94 a5 34 	call	0x694a	; 0x694a <get_token>

		// Argument
		ptr = get_token(ptr,arg, sizeof(arg)-2);
   131d0:	4e e7       	ldi	r20, 0x7E	; 126
   131d2:	50 e0       	ldi	r21, 0x00	; 0
   131d4:	be 01       	movw	r22, r28
   131d6:	66 5f       	subi	r22, 0xF6	; 246
   131d8:	7f 4f       	sbci	r23, 0xFF	; 255
   131da:	0e 94 a5 34 	call	0x694a	; 0x694a <get_token>
		if( MATCHI(arg,"=") )
   131de:	3c 01       	movw	r6, r24
   131e0:	6c e8       	ldi	r22, 0x8C	; 140
   131e2:	7d e0       	ldi	r23, 0x0D	; 13
   131e4:	ce 01       	movw	r24, r28
   131e6:	0a 96       	adiw	r24, 0x0a	; 10
   131e8:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <MATCHI>
   131ec:	89 2b       	or	r24, r25
			ptr = get_token(ptr,arg,sizeof(arg)-2);
   131ee:	41 f0       	breq	.+16     	; 0x13200 <Read_Config+0x1cc>
   131f0:	4e e7       	ldi	r20, 0x7E	; 126
   131f2:	50 e0       	ldi	r21, 0x00	; 0
   131f4:	be 01       	movw	r22, r28
   131f6:	66 5f       	subi	r22, 0xF6	; 246
   131f8:	7f 4f       	sbci	r23, 0xFF	; 255
   131fa:	c3 01       	movw	r24, r6
   131fc:	0e 94 a5 34 	call	0x694a	; 0x694a <get_token>
		val.l = get_value(arg);
   13200:	ce 01       	movw	r24, r28
   13202:	0a 96       	adiw	r24, 0x0a	; 10
   13204:	0e 94 e8 34 	call	0x69d0	; 0x69d0 <get_value>
   13208:	2b 01       	movw	r4, r22
   1320a:	3c 01       	movw	r6, r24
   1320c:	36 2e       	mov	r3, r22

        //FIXME check for state and last state
        if( MATCHI(token,"END") )
   1320e:	25 2c       	mov	r2, r5
   13210:	6e e8       	ldi	r22, 0x8E	; 142
   13212:	7d e0       	ldi	r23, 0x0D	; 13
   13214:	c8 01       	movw	r24, r16
   13216:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <MATCHI>
        {
            state = pop_state();
   1321a:	89 2b       	or	r24, r25
   1321c:	11 f0       	breq	.+4      	; 0x13222 <Read_Config+0x1ee>
   1321e:	ad dd       	rcall	.-1190   	; 0x12d7a <pop_state>
            continue;
        }

        switch(state)
   13220:	2c c0       	rjmp	.+88     	; 0x1327a <Read_Config+0x246>
   13222:	c6 57       	subi	r28, 0x76	; 118
   13224:	de 4f       	sbci	r29, 0xFE	; 254
   13226:	28 81       	ld	r18, Y
   13228:	39 81       	ldd	r19, Y+1	; 0x01
   1322a:	ca 58       	subi	r28, 0x8A	; 138
   1322c:	d1 40       	sbci	r29, 0x01	; 1
   1322e:	20 31       	cpi	r18, 0x10	; 16
   13230:	31 05       	cpc	r19, r1
   13232:	08 f0       	brcs	.+2      	; 0x13236 <Read_Config+0x202>
   13234:	d8 c4       	rjmp	.+2480   	; 0x13be6 <Read_Config+0xbb2>
   13236:	f9 01       	movw	r30, r18
   13238:	e0 53       	subi	r30, 0x30	; 48
   1323a:	ff 4f       	sbci	r31, 0xFF	; 255
   1323c:	0c 94 d5 e4 	jmp	0x1c9aa	; 0x1c9aa <__tablejump2__>
        {
        case START_STATE:

            if( MATCHI (token,"SS80_DEFAULT") )
   13240:	62 e9       	ldi	r22, 0x92	; 146
   13242:	7d e0       	ldi	r23, 0x0D	; 13
   13244:	c8 01       	movw	r24, r16
   13246:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <MATCHI>
            {
                push_state(state);
   1324a:	89 2b       	or	r24, r25
   1324c:	e9 f0       	breq	.+58     	; 0x13288 <Read_Config+0x254>
				state = SS80_STATE;
				index = alloc_device(SS80_DEFAULT_TYPE);
   1324e:	80 e0       	ldi	r24, 0x00	; 0
   13250:	90 e0       	ldi	r25, 0x00	; 0
   13252:	7a dd       	rcall	.-1292   	; 0x12d48 <push_state>
   13254:	82 e0       	ldi	r24, 0x02	; 2
   13256:	90 e0       	ldi	r25, 0x00	; 0
				if(index == -1)
   13258:	94 dc       	rcall	.-1752   	; 0x12b82 <alloc_device>
   1325a:	6c 01       	movw	r12, r24
   1325c:	01 96       	adiw	r24, 0x01	; 1
					state = START_STATE;
				else
					SS80p = (SS80DiskType *) Devices[index].dev;
   1325e:	09 f4       	brne	.+2      	; 0x13262 <Read_Config+0x22e>
   13260:	96 cf       	rjmp	.-212    	; 0x1318e <Read_Config+0x15a>
   13262:	8b e2       	ldi	r24, 0x2B	; 43
   13264:	8c 9d       	mul	r24, r12
   13266:	f0 01       	movw	r30, r0
   13268:	8d 9d       	mul	r24, r13
   1326a:	f0 0d       	add	r31, r0
   1326c:	11 24       	eor	r1, r1
   1326e:	e4 57       	subi	r30, 0x74	; 116
   13270:	f1 4e       	sbci	r31, 0xE1	; 225
        case START_STATE:

            if( MATCHI (token,"SS80_DEFAULT") )
            {
                push_state(state);
				state = SS80_STATE;
   13272:	a7 a0       	ldd	r10, Z+39	; 0x27
   13274:	b0 a4       	ldd	r11, Z+40	; 0x28
   13276:	81 e0       	ldi	r24, 0x01	; 1
   13278:	90 e0       	ldi	r25, 0x00	; 0
   1327a:	c6 57       	subi	r28, 0x76	; 118
   1327c:	de 4f       	sbci	r29, 0xFE	; 254
   1327e:	99 83       	std	Y+1, r25	; 0x01
   13280:	88 83       	st	Y, r24
   13282:	ca 58       	subi	r28, 0x8A	; 138
					state = START_STATE;
				else
					SS80p = (SS80DiskType *) Devices[index].dev;
            }

            else if( MATCHI (token,"SS80") || MATCHI (token, "CS80") )
   13284:	d1 40       	sbci	r29, 0x01	; 1
   13286:	83 cf       	rjmp	.-250    	; 0x1318e <Read_Config+0x15a>
   13288:	6f e9       	ldi	r22, 0x9F	; 159
   1328a:	7d e0       	ldi	r23, 0x0D	; 13
   1328c:	c8 01       	movw	r24, r16
   1328e:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <MATCHI>
            {
                push_state(state);
   13292:	89 2b       	or	r24, r25
   13294:	f1 f0       	breq	.+60     	; 0x132d2 <Read_Config+0x29e>
				state = SS80_STATE;
				index = alloc_device(SS80_TYPE);
   13296:	80 e0       	ldi	r24, 0x00	; 0
   13298:	90 e0       	ldi	r25, 0x00	; 0
   1329a:	56 dd       	rcall	.-1364   	; 0x12d48 <push_state>
   1329c:	83 e0       	ldi	r24, 0x03	; 3
   1329e:	90 e0       	ldi	r25, 0x00	; 0
				if(index == -1)
   132a0:	70 dc       	rcall	.-1824   	; 0x12b82 <alloc_device>
   132a2:	6c 01       	movw	r12, r24
   132a4:	9f ef       	ldi	r25, 0xFF	; 255
   132a6:	c9 16       	cp	r12, r25
   132a8:	d9 06       	cpc	r13, r25
				{
					state = START_STATE;
				}
				else
				{
					SS80p = (SS80DiskType *) Devices[index].dev;
   132aa:	09 f4       	brne	.+2      	; 0x132ae <Read_Config+0x27a>
   132ac:	70 cf       	rjmp	.-288    	; 0x1318e <Read_Config+0x15a>
   132ae:	8b e2       	ldi	r24, 0x2B	; 43
   132b0:	8c 9d       	mul	r24, r12
   132b2:	f0 01       	movw	r30, r0
   132b4:	8d 9d       	mul	r24, r13
   132b6:	f0 0d       	add	r31, r0
   132b8:	11 24       	eor	r1, r1
   132ba:	e4 57       	subi	r30, 0x74	; 116
					hpdir_set_parameters(index,arg);	// Also sets Devices[index].model
   132bc:	f1 4e       	sbci	r31, 0xE1	; 225
   132be:	a7 a0       	ldd	r10, Z+39	; 0x27
   132c0:	b0 a4       	ldd	r11, Z+40	; 0x28
   132c2:	be 01       	movw	r22, r28
   132c4:	66 5f       	subi	r22, 0xF6	; 246
   132c6:	7f 4f       	sbci	r23, 0xFF	; 255
            }

            else if( MATCHI (token,"SS80") || MATCHI (token, "CS80") )
            {
                push_state(state);
				state = SS80_STATE;
   132c8:	c6 01       	movw	r24, r12
   132ca:	0d de       	rcall	.-998    	; 0x12ee6 <hpdir_set_parameters>
   132cc:	a1 e0       	ldi	r26, 0x01	; 1
					state = START_STATE;
				else
					SS80p = (SS80DiskType *) Devices[index].dev;
            }

            else if( MATCHI (token,"SS80") || MATCHI (token, "CS80") )
   132ce:	b0 e0       	ldi	r27, 0x00	; 0
   132d0:	05 c1       	rjmp	.+522    	; 0x134dc <Read_Config+0x4a8>
   132d2:	64 ea       	ldi	r22, 0xA4	; 164
   132d4:	7d e0       	ldi	r23, 0x0D	; 13
   132d6:	c8 01       	movw	r24, r16
   132d8:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <MATCHI>
					hpdir_set_parameters(index,arg);	// Also sets Devices[index].model
				}
			}

#ifdef AMIGO
            else if( MATCHI (token,"AMIGO") )
   132dc:	89 2b       	or	r24, r25
   132de:	d9 f6       	brne	.-74     	; 0x13296 <Read_Config+0x262>
   132e0:	69 ea       	ldi	r22, 0xA9	; 169
   132e2:	7d e0       	ldi	r23, 0x0D	; 13
   132e4:	c8 01       	movw	r24, r16
            {
                push_state(state);
   132e6:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <MATCHI>
   132ea:	89 2b       	or	r24, r25
   132ec:	11 f1       	breq	.+68     	; 0x13332 <Read_Config+0x2fe>
                state = AMIGO_STATE;
                index = alloc_device(AMIGO_TYPE);
   132ee:	80 e0       	ldi	r24, 0x00	; 0
   132f0:	90 e0       	ldi	r25, 0x00	; 0
   132f2:	2a dd       	rcall	.-1452   	; 0x12d48 <push_state>
   132f4:	81 e0       	ldi	r24, 0x01	; 1
   132f6:	90 e0       	ldi	r25, 0x00	; 0
                if(index == -1)
   132f8:	44 dc       	rcall	.-1912   	; 0x12b82 <alloc_device>
   132fa:	6c 01       	movw	r12, r24
   132fc:	01 96       	adiw	r24, 0x01	; 1
				{
                    state = START_STATE;
				}
                else
				{
                    AMIGOp = (AMIGODiskType *) Devices[index].dev;
   132fe:	09 f4       	brne	.+2      	; 0x13302 <Read_Config+0x2ce>
   13300:	46 cf       	rjmp	.-372    	; 0x1318e <Read_Config+0x15a>
   13302:	8b e2       	ldi	r24, 0x2B	; 43
   13304:	8c 9d       	mul	r24, r12
   13306:	f0 01       	movw	r30, r0
   13308:	8d 9d       	mul	r24, r13
   1330a:	f0 0d       	add	r31, r0
   1330c:	11 24       	eor	r1, r1
   1330e:	e4 57       	subi	r30, 0x74	; 116
   13310:	f1 4e       	sbci	r31, 0xE1	; 225
   13312:	27 a1       	ldd	r18, Z+39	; 0x27
   13314:	30 a5       	ldd	r19, Z+40	; 0x28
   13316:	c4 57       	subi	r28, 0x74	; 116
   13318:	de 4f       	sbci	r29, 0xFE	; 254
   1331a:	39 83       	std	Y+1, r19	; 0x01
					hpdir_set_parameters(index,arg);	// Also sets Devices[index.model
   1331c:	28 83       	st	Y, r18
   1331e:	cc 58       	subi	r28, 0x8C	; 140
   13320:	d1 40       	sbci	r29, 0x01	; 1
   13322:	be 01       	movw	r22, r28
   13324:	66 5f       	subi	r22, 0xF6	; 246
   13326:	7f 4f       	sbci	r23, 0xFF	; 255

#ifdef AMIGO
            else if( MATCHI (token,"AMIGO") )
            {
                push_state(state);
                state = AMIGO_STATE;
   13328:	c6 01       	movw	r24, r12
   1332a:	dd dd       	rcall	.-1094   	; 0x12ee6 <hpdir_set_parameters>
                    AMIGOp = (AMIGODiskType *) Devices[index].dev;
					hpdir_set_parameters(index,arg);	// Also sets Devices[index.model
				}
			}
#endif
            else if( MATCHI (token,"PRINTER") )
   1332c:	8a e0       	ldi	r24, 0x0A	; 10
   1332e:	90 e0       	ldi	r25, 0x00	; 0
   13330:	a4 cf       	rjmp	.-184    	; 0x1327a <Read_Config+0x246>
   13332:	6f ea       	ldi	r22, 0xAF	; 175
   13334:	7d e0       	ldi	r23, 0x0D	; 13
   13336:	c8 01       	movw	r24, r16
            {
                push_state(state);
   13338:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <MATCHI>
   1333c:	89 2b       	or	r24, r25
   1333e:	f9 f0       	breq	.+62     	; 0x1337e <Read_Config+0x34a>
                state = PRINTER_STATE;
                index = alloc_device(PRINTER_TYPE);
   13340:	80 e0       	ldi	r24, 0x00	; 0
   13342:	90 e0       	ldi	r25, 0x00	; 0
   13344:	01 dd       	rcall	.-1534   	; 0x12d48 <push_state>
   13346:	84 e0       	ldi	r24, 0x04	; 4
   13348:	90 e0       	ldi	r25, 0x00	; 0
                if(index == -1)
   1334a:	1b dc       	rcall	.-1994   	; 0x12b82 <alloc_device>
   1334c:	6c 01       	movw	r12, r24
   1334e:	9f ef       	ldi	r25, 0xFF	; 255
   13350:	c9 16       	cp	r12, r25
   13352:	d9 06       	cpc	r13, r25
                    state = START_STATE;
                else
                    PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
   13354:	09 f4       	brne	.+2      	; 0x13358 <Read_Config+0x324>
   13356:	1b cf       	rjmp	.-458    	; 0x1318e <Read_Config+0x15a>
   13358:	8b e2       	ldi	r24, 0x2B	; 43
   1335a:	8c 9d       	mul	r24, r12
   1335c:	f0 01       	movw	r30, r0
   1335e:	8d 9d       	mul	r24, r13
   13360:	f0 0d       	add	r31, r0
   13362:	11 24       	eor	r1, r1
   13364:	e4 57       	subi	r30, 0x74	; 116
   13366:	f1 4e       	sbci	r31, 0xE1	; 225
   13368:	a7 a1       	ldd	r26, Z+39	; 0x27
   1336a:	b0 a5       	ldd	r27, Z+40	; 0x28
   1336c:	c2 57       	subi	r28, 0x72	; 114
   1336e:	de 4f       	sbci	r29, 0xFE	; 254
   13370:	b9 83       	std	Y+1, r27	; 0x01
   13372:	a8 83       	st	Y, r26
			}
#endif
            else if( MATCHI (token,"PRINTER") )
            {
                push_state(state);
                state = PRINTER_STATE;
   13374:	ce 58       	subi	r28, 0x8E	; 142
   13376:	d1 40       	sbci	r29, 0x01	; 1
   13378:	ee e0       	ldi	r30, 0x0E	; 14
                if(index == -1)
                    state = START_STATE;
                else
                    PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
            }
            else if( MATCHI (token,"DEBUG") )
   1337a:	f0 e0       	ldi	r31, 0x00	; 0
   1337c:	c2 c0       	rjmp	.+388    	; 0x13502 <Read_Config+0x4ce>
   1337e:	67 eb       	ldi	r22, 0xB7	; 183
   13380:	7d e0       	ldi	r23, 0x0D	; 13
   13382:	c8 01       	movw	r24, r16
   13384:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <MATCHI>
            {
				debuglevel = val.w;
   13388:	89 2b       	or	r24, r25
   1338a:	29 f0       	breq	.+10     	; 0x13396 <Read_Config+0x362>
   1338c:	50 92 c4 01 	sts	0x01C4, r5	; 0x8001c4 <debuglevel+0x1>
   13390:	40 92 c3 01 	sts	0x01C3, r4	; 0x8001c3 <debuglevel>
            }
            else if( MATCHI (token,"PRINTER_DEFAULT_ADDRESS") )
   13394:	fc ce       	rjmp	.-520    	; 0x1318e <Read_Config+0x15a>
   13396:	6d eb       	ldi	r22, 0xBD	; 189
   13398:	7d e0       	ldi	r23, 0x0D	; 13
   1339a:	c8 01       	movw	r24, r16
   1339c:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <MATCHI>
   133a0:	20 91 ff 18 	lds	r18, 0x18FF	; 0x8018ff <lines>
            {
                //FIXME REMOVE from config
                printf("Skipping %s, at line:%d\n", str,lines);
   133a4:	30 91 00 19 	lds	r19, 0x1900	; 0x801900 <lines+0x1>
   133a8:	ed b7       	in	r30, 0x3d	; 61
   133aa:	fe b7       	in	r31, 0x3e	; 62
   133ac:	37 83       	std	Z+7, r19	; 0x07
   133ae:	26 83       	std	Z+6, r18	; 0x06
            }
            else if( MATCHI (token,"DEBUG") )
            {
				debuglevel = val.w;
            }
            else if( MATCHI (token,"PRINTER_DEFAULT_ADDRESS") )
   133b0:	95 82       	std	Z+5, r9	; 0x05
   133b2:	84 82       	std	Z+4, r8	; 0x04
            {
                //FIXME REMOVE from config
                printf("Skipping %s, at line:%d\n", str,lines);
   133b4:	89 2b       	or	r24, r25
   133b6:	19 f0       	breq	.+6      	; 0x133be <Read_Config+0x38a>
            }
            else
            {
                printf("Unexpected START token: %s, at line:%d\n", str,lines);
   133b8:	8f e1       	ldi	r24, 0x1F	; 31
   133ba:	9e e1       	ldi	r25, 0x1E	; 30
                ++errors;
            }
            break;

        case PRINTER_STATE:
            if( MATCHI (token,"CONFIG") )
   133bc:	e6 c2       	rjmp	.+1484   	; 0x1398a <Read_Config+0x956>
   133be:	87 ef       	ldi	r24, 0xF7	; 247
   133c0:	9d e1       	ldi	r25, 0x1D	; 29
   133c2:	19 c0       	rjmp	.+50     	; 0x133f6 <Read_Config+0x3c2>
   133c4:	65 ed       	ldi	r22, 0xD5	; 213
   133c6:	7d e0       	ldi	r23, 0x0D	; 13
   133c8:	c8 01       	movw	r24, r16
            {
                push_state(state);
   133ca:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <MATCHI>
   133ce:	89 2b       	or	r24, r25
   133d0:	31 f0       	breq	.+12     	; 0x133de <Read_Config+0x3aa>
                state = PRINTER_CONFIG;
   133d2:	8e e0       	ldi	r24, 0x0E	; 14
   133d4:	90 e0       	ldi	r25, 0x00	; 0
   133d6:	b8 dc       	rcall	.-1680   	; 0x12d48 <push_state>
            }
            else
            {
                printf("Unexpected PRINTER token: %s, at line:%d\n", str,lines);
   133d8:	2f e0       	ldi	r18, 0x0F	; 15
   133da:	30 e0       	ldi	r19, 0x00	; 0
   133dc:	5f c0       	rjmp	.+190    	; 0x1349c <Read_Config+0x468>
   133de:	80 91 ff 18 	lds	r24, 0x18FF	; 0x8018ff <lines>
   133e2:	90 91 00 19 	lds	r25, 0x1900	; 0x801900 <lines+0x1>
   133e6:	ed b7       	in	r30, 0x3d	; 61
   133e8:	fe b7       	in	r31, 0x3e	; 62
   133ea:	97 83       	std	Z+7, r25	; 0x07
   133ec:	86 83       	std	Z+6, r24	; 0x06
   133ee:	95 82       	std	Z+5, r9	; 0x05
   133f0:	84 82       	std	Z+4, r8	; 0x04
   133f2:	8d ec       	ldi	r24, 0xCD	; 205
                ++errors;
            }
            break;

        case PRINTER_CONFIG:
            if( MATCHI (token,"ADDRESS") )
   133f4:	9d e1       	ldi	r25, 0x1D	; 29
   133f6:	a0 e0       	ldi	r26, 0x00	; 0
   133f8:	0d c4       	rjmp	.+2074   	; 0x13c14 <Read_Config+0xbe0>
   133fa:	6d ec       	ldi	r22, 0xCD	; 205
   133fc:	7d e0       	ldi	r23, 0x0D	; 13
   133fe:	c8 01       	movw	r24, r16
   13400:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <MATCHI>
            {
				if(val.b > 31)
   13404:	89 2b       	or	r24, r25
   13406:	89 f1       	breq	.+98     	; 0x1346a <Read_Config+0x436>
				{
					printf("Fatal PRINTER ADDRESS out of range: %ld disabled:%d\n", val.l, lines);
   13408:	2f e1       	ldi	r18, 0x1F	; 31
   1340a:	24 15       	cp	r18, r4
   1340c:	c8 f4       	brcc	.+50     	; 0x13440 <Read_Config+0x40c>
   1340e:	80 91 ff 18 	lds	r24, 0x18FF	; 0x8018ff <lines>
   13412:	90 91 00 19 	lds	r25, 0x1900	; 0x801900 <lines+0x1>
   13416:	ed b7       	in	r30, 0x3d	; 61
   13418:	fe b7       	in	r31, 0x3e	; 62
   1341a:	91 87       	std	Z+9, r25	; 0x09
   1341c:	80 87       	std	Z+8, r24	; 0x08
   1341e:	44 82       	std	Z+4, r4	; 0x04
   13420:	55 82       	std	Z+5, r5	; 0x05
   13422:	66 82       	std	Z+6, r6	; 0x06
   13424:	77 82       	std	Z+7, r7	; 0x07
   13426:	88 e9       	ldi	r24, 0x98	; 152
   13428:	9d e1       	ldi	r25, 0x1D	; 29
   1342a:	a0 e0       	ldi	r26, 0x00	; 0
   1342c:	81 83       	std	Z+1, r24	; 0x01
   1342e:	92 83       	std	Z+2, r25	; 0x02
					val.b = 0xff;
   13430:	a3 83       	std	Z+3, r26	; 0x03
   13432:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
                    ++errors;
   13436:	33 24       	eor	r3, r3
   13438:	3a 94       	dec	r3
				}
                Devices[index].ADDRESS = val.b;
   1343a:	ff ef       	ldi	r31, 0xFF	; 255
   1343c:	ef 1a       	sub	r14, r31
   1343e:	ff 0a       	sbc	r15, r31
   13440:	8b e2       	ldi	r24, 0x2B	; 43
   13442:	8c 9d       	mul	r24, r12
   13444:	f0 01       	movw	r30, r0
   13446:	8d 9d       	mul	r24, r13
   13448:	f0 0d       	add	r31, r0
   1344a:	11 24       	eor	r1, r1
                PRINTERp->HEADER.ADDRESS  = val.b;
   1344c:	e4 57       	subi	r30, 0x74	; 116
   1344e:	f1 4e       	sbci	r31, 0xE1	; 225
   13450:	31 82       	std	Z+1, r3	; 0x01
   13452:	c2 57       	subi	r28, 0x72	; 114
   13454:	de 4f       	sbci	r29, 0xFE	; 254
   13456:	a8 81       	ld	r26, Y
   13458:	b9 81       	ldd	r27, Y+1	; 0x01
                // NO PPR
                Devices[index].PPR = 0xff;
   1345a:	ce 58       	subi	r28, 0x8E	; 142
   1345c:	d1 40       	sbci	r29, 0x01	; 1
                PRINTERp->HEADER.PPR = 0xff;
   1345e:	3c 92       	st	X, r3
   13460:	8f ef       	ldi	r24, 0xFF	; 255
   13462:	82 83       	std	Z+2, r24	; 0x02
            }
            else
            {
                printf("Unexpected PRINTER CONFIG token: %s, at line:%d\n", str,lines);
   13464:	fd 01       	movw	r30, r26
   13466:	81 83       	std	Z+1, r24	; 0x01
   13468:	92 ce       	rjmp	.-732    	; 0x1318e <Read_Config+0x15a>
   1346a:	80 91 ff 18 	lds	r24, 0x18FF	; 0x8018ff <lines>
   1346e:	90 91 00 19 	lds	r25, 0x1900	; 0x801900 <lines+0x1>
   13472:	ed b7       	in	r30, 0x3d	; 61
   13474:	fe b7       	in	r31, 0x3e	; 62
   13476:	97 83       	std	Z+7, r25	; 0x07
   13478:	86 83       	std	Z+6, r24	; 0x06
   1347a:	95 82       	std	Z+5, r9	; 0x05
                ++errors;
            }
            break;

        case SS80_STATE:
            if( MATCHI (token,"HEADER") )
   1347c:	84 82       	std	Z+4, r8	; 0x04
   1347e:	87 e6       	ldi	r24, 0x67	; 103
   13480:	9d e1       	ldi	r25, 0x1D	; 29
   13482:	b9 cf       	rjmp	.-142    	; 0x133f6 <Read_Config+0x3c2>
   13484:	6c ed       	ldi	r22, 0xDC	; 220
   13486:	7d e0       	ldi	r23, 0x0D	; 13
   13488:	c8 01       	movw	r24, r16
            {
                push_state(state);
   1348a:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <MATCHI>
   1348e:	89 2b       	or	r24, r25
   13490:	61 f0       	breq	.+24     	; 0x134aa <Read_Config+0x476>
                state = SS80_HEADER;
   13492:	81 e0       	ldi	r24, 0x01	; 1
   13494:	90 e0       	ldi	r25, 0x00	; 0
   13496:	58 dc       	rcall	.-1872   	; 0x12d48 <push_state>
   13498:	22 e0       	ldi	r18, 0x02	; 2
   1349a:	30 e0       	ldi	r19, 0x00	; 0
   1349c:	c6 57       	subi	r28, 0x76	; 118
   1349e:	de 4f       	sbci	r29, 0xFE	; 254
   134a0:	39 83       	std	Y+1, r19	; 0x01
            }
            else if( MATCHI (token,"CONFIG") )
   134a2:	28 83       	st	Y, r18
   134a4:	ca 58       	subi	r28, 0x8A	; 138
   134a6:	d1 40       	sbci	r29, 0x01	; 1
   134a8:	72 ce       	rjmp	.-796    	; 0x1318e <Read_Config+0x15a>
   134aa:	65 ed       	ldi	r22, 0xD5	; 213
   134ac:	7d e0       	ldi	r23, 0x0D	; 13
   134ae:	c8 01       	movw	r24, r16
            {
                push_state(state);
   134b0:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <MATCHI>
   134b4:	89 2b       	or	r24, r25
                state = SS80_CONFIG;
   134b6:	31 f0       	breq	.+12     	; 0x134c4 <Read_Config+0x490>
   134b8:	81 e0       	ldi	r24, 0x01	; 1
   134ba:	90 e0       	ldi	r25, 0x00	; 0
            }
            else if( MATCHI (token,"CONTROLLER") )
   134bc:	45 dc       	rcall	.-1910   	; 0x12d48 <push_state>
   134be:	83 e0       	ldi	r24, 0x03	; 3
   134c0:	90 e0       	ldi	r25, 0x00	; 0
   134c2:	db ce       	rjmp	.-586    	; 0x1327a <Read_Config+0x246>
   134c4:	63 ee       	ldi	r22, 0xE3	; 227
   134c6:	7d e0       	ldi	r23, 0x0D	; 13
   134c8:	c8 01       	movw	r24, r16
            {
                push_state(state);
   134ca:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <MATCHI>
   134ce:	89 2b       	or	r24, r25
   134d0:	61 f0       	breq	.+24     	; 0x134ea <Read_Config+0x4b6>
                state = SS80_CONTROLLER;
   134d2:	81 e0       	ldi	r24, 0x01	; 1
   134d4:	90 e0       	ldi	r25, 0x00	; 0
   134d6:	38 dc       	rcall	.-1936   	; 0x12d48 <push_state>
   134d8:	a4 e0       	ldi	r26, 0x04	; 4
   134da:	b0 e0       	ldi	r27, 0x00	; 0
   134dc:	c6 57       	subi	r28, 0x76	; 118
   134de:	de 4f       	sbci	r29, 0xFE	; 254
   134e0:	b9 83       	std	Y+1, r27	; 0x01
            }
            else if( MATCHI (token,"UNIT") )
   134e2:	a8 83       	st	Y, r26
   134e4:	ca 58       	subi	r28, 0x8A	; 138
   134e6:	d1 40       	sbci	r29, 0x01	; 1
   134e8:	52 ce       	rjmp	.-860    	; 0x1318e <Read_Config+0x15a>
   134ea:	6e ee       	ldi	r22, 0xEE	; 238
   134ec:	7d e0       	ldi	r23, 0x0D	; 13
   134ee:	c8 01       	movw	r24, r16
            {
                push_state(state);
   134f0:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <MATCHI>
   134f4:	89 2b       	or	r24, r25
   134f6:	61 f0       	breq	.+24     	; 0x13510 <Read_Config+0x4dc>
                state = SS80_UNIT;
   134f8:	81 e0       	ldi	r24, 0x01	; 1
   134fa:	90 e0       	ldi	r25, 0x00	; 0
   134fc:	25 dc       	rcall	.-1974   	; 0x12d48 <push_state>
   134fe:	e5 e0       	ldi	r30, 0x05	; 5
   13500:	f0 e0       	ldi	r31, 0x00	; 0
   13502:	c6 57       	subi	r28, 0x76	; 118
   13504:	de 4f       	sbci	r29, 0xFE	; 254
   13506:	f9 83       	std	Y+1, r31	; 0x01
            }
            else if( MATCHI (token,"VOLUME") )
   13508:	e8 83       	st	Y, r30
   1350a:	ca 58       	subi	r28, 0x8A	; 138
   1350c:	d1 40       	sbci	r29, 0x01	; 1
   1350e:	3f ce       	rjmp	.-898    	; 0x1318e <Read_Config+0x15a>
   13510:	63 ef       	ldi	r22, 0xF3	; 243
   13512:	7d e0       	ldi	r23, 0x0D	; 13
   13514:	c8 01       	movw	r24, r16
            {
                push_state(state);
   13516:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <MATCHI>
   1351a:	89 2b       	or	r24, r25
   1351c:	31 f0       	breq	.+12     	; 0x1352a <Read_Config+0x4f6>
                state = SS80_VOLUME;
   1351e:	81 e0       	ldi	r24, 0x01	; 1
   13520:	90 e0       	ldi	r25, 0x00	; 0
   13522:	12 dc       	rcall	.-2012   	; 0x12d48 <push_state>
            }
            else
            {
                printf("Unexpected SS80 START token: %s, at line:%d\n", str,lines);
   13524:	26 e0       	ldi	r18, 0x06	; 6
   13526:	30 e0       	ldi	r19, 0x00	; 0
   13528:	b9 cf       	rjmp	.-142    	; 0x1349c <Read_Config+0x468>
   1352a:	80 91 ff 18 	lds	r24, 0x18FF	; 0x8018ff <lines>
   1352e:	90 91 00 19 	lds	r25, 0x1900	; 0x801900 <lines+0x1>
   13532:	ed b7       	in	r30, 0x3d	; 61
   13534:	fe b7       	in	r31, 0x3e	; 62
   13536:	97 83       	std	Z+7, r25	; 0x07
   13538:	86 83       	std	Z+6, r24	; 0x06
   1353a:	95 82       	std	Z+5, r9	; 0x05
   1353c:	84 82       	std	Z+4, r8	; 0x04
            }
            break;


        case SS80_HEADER:
            if( MATCHI (token,"ADDRESS") )
   1353e:	8a e3       	ldi	r24, 0x3A	; 58
   13540:	9d e1       	ldi	r25, 0x1D	; 29
   13542:	59 cf       	rjmp	.-334    	; 0x133f6 <Read_Config+0x3c2>
   13544:	6d ec       	ldi	r22, 0xCD	; 205
   13546:	7d e0       	ldi	r23, 0x0D	; 13
   13548:	c8 01       	movw	r24, r16
   1354a:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <MATCHI>
            {
                if(val.b > 31)
   1354e:	89 2b       	or	r24, r25
   13550:	19 f1       	breq	.+70     	; 0x13598 <Read_Config+0x564>
				{
					printf("Fatal SS80 ADDRESS > 31 at line d\n", lines);
   13552:	2f e1       	ldi	r18, 0x1F	; 31
   13554:	24 15       	cp	r18, r4
   13556:	a8 f4       	brcc	.+42     	; 0x13582 <Read_Config+0x54e>
   13558:	80 91 ff 18 	lds	r24, 0x18FF	; 0x8018ff <lines>
   1355c:	90 91 00 19 	lds	r25, 0x1900	; 0x801900 <lines+0x1>
   13560:	ed b7       	in	r30, 0x3d	; 61
   13562:	fe b7       	in	r31, 0x3e	; 62
   13564:	95 83       	std	Z+5, r25	; 0x05
   13566:	84 83       	std	Z+4, r24	; 0x04
   13568:	87 e1       	ldi	r24, 0x17	; 23
   1356a:	9d e1       	ldi	r25, 0x1D	; 29
   1356c:	a0 e0       	ldi	r26, 0x00	; 0
   1356e:	81 83       	std	Z+1, r24	; 0x01
   13570:	92 83       	std	Z+2, r25	; 0x02
					val.b = 0xff;
   13572:	a3 83       	std	Z+3, r26	; 0x03
   13574:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
					++errors;
   13578:	33 24       	eor	r3, r3
   1357a:	3a 94       	dec	r3
				}
                Devices[index].ADDRESS = val.b;
   1357c:	ff ef       	ldi	r31, 0xFF	; 255
   1357e:	ef 1a       	sub	r14, r31
   13580:	ff 0a       	sbc	r15, r31
   13582:	8b e2       	ldi	r24, 0x2B	; 43
   13584:	8c 9d       	mul	r24, r12
   13586:	f0 01       	movw	r30, r0
   13588:	8d 9d       	mul	r24, r13
   1358a:	f0 0d       	add	r31, r0
   1358c:	11 24       	eor	r1, r1
                SS80p->HEADER.ADDRESS  = val.b;
   1358e:	e4 57       	subi	r30, 0x74	; 116
   13590:	f1 4e       	sbci	r31, 0xE1	; 225
            }
            else if( MATCHI (token,"PPR") )
   13592:	31 82       	std	Z+1, r3	; 0x01
   13594:	d5 01       	movw	r26, r10
   13596:	30 c2       	rjmp	.+1120   	; 0x139f8 <Read_Config+0x9c4>
   13598:	6a ef       	ldi	r22, 0xFA	; 250
   1359a:	7d e0       	ldi	r23, 0x0D	; 13
   1359c:	c8 01       	movw	r24, r16
   1359e:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <MATCHI>
            {
                if(val.b > 7)
   135a2:	89 2b       	or	r24, r25
   135a4:	19 f1       	breq	.+70     	; 0x135ec <Read_Config+0x5b8>
				{
					printf("Warning SS80 PPR > 7 at line:%d\n", lines);
   135a6:	b7 e0       	ldi	r27, 0x07	; 7
   135a8:	b4 15       	cp	r27, r4
   135aa:	a8 f4       	brcc	.+42     	; 0x135d6 <Read_Config+0x5a2>
   135ac:	80 91 ff 18 	lds	r24, 0x18FF	; 0x8018ff <lines>
   135b0:	90 91 00 19 	lds	r25, 0x1900	; 0x801900 <lines+0x1>
   135b4:	ed b7       	in	r30, 0x3d	; 61
   135b6:	fe b7       	in	r31, 0x3e	; 62
   135b8:	95 83       	std	Z+5, r25	; 0x05
   135ba:	84 83       	std	Z+4, r24	; 0x04
   135bc:	86 ef       	ldi	r24, 0xF6	; 246
   135be:	9c e1       	ldi	r25, 0x1C	; 28
   135c0:	a0 e0       	ldi	r26, 0x00	; 0
   135c2:	81 83       	std	Z+1, r24	; 0x01
   135c4:	92 83       	std	Z+2, r25	; 0x02
					val.b = 0xff;
   135c6:	a3 83       	std	Z+3, r26	; 0x03
   135c8:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
					++errors;
   135cc:	33 24       	eor	r3, r3
   135ce:	3a 94       	dec	r3
				}
                Devices[index].PPR = val.b;
   135d0:	ff ef       	ldi	r31, 0xFF	; 255
   135d2:	ef 1a       	sub	r14, r31
   135d4:	ff 0a       	sbc	r15, r31
   135d6:	8b e2       	ldi	r24, 0x2B	; 43
   135d8:	8c 9d       	mul	r24, r12
   135da:	f0 01       	movw	r30, r0
   135dc:	8d 9d       	mul	r24, r13
   135de:	f0 0d       	add	r31, r0
   135e0:	11 24       	eor	r1, r1
                SS80p->HEADER.PPR = val.b;
   135e2:	e4 57       	subi	r30, 0x74	; 116
   135e4:	f1 4e       	sbci	r31, 0xE1	; 225
            }
            else if( MATCHI (token,"FILE") )
   135e6:	32 82       	std	Z+2, r3	; 0x02
   135e8:	f5 01       	movw	r30, r10
   135ea:	3c c2       	rjmp	.+1144   	; 0x13a64 <Read_Config+0xa30>
   135ec:	6e ef       	ldi	r22, 0xFE	; 254
   135ee:	7d e0       	ldi	r23, 0x0D	; 13
   135f0:	c8 01       	movw	r24, r16
   135f2:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <MATCHI>
            {
                SS80p->HEADER.NAME = stralloc(arg);
   135f6:	89 2b       	or	r24, r25
   135f8:	31 f0       	breq	.+12     	; 0x13606 <Read_Config+0x5d2>
   135fa:	ce 01       	movw	r24, r28
   135fc:	0a 96       	adiw	r24, 0x0a	; 10
   135fe:	0e 94 93 33 	call	0x6726	; 0x6726 <stralloc>
            }
            else
            {
                printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", token,lines);
   13602:	f5 01       	movw	r30, r10
   13604:	42 c2       	rjmp	.+1156   	; 0x13a8a <Read_Config+0xa56>
   13606:	80 91 ff 18 	lds	r24, 0x18FF	; 0x8018ff <lines>
   1360a:	90 91 00 19 	lds	r25, 0x1900	; 0x801900 <lines+0x1>
   1360e:	ed b7       	in	r30, 0x3d	; 61
   13610:	fe b7       	in	r31, 0x3e	; 62
   13612:	97 83       	std	Z+7, r25	; 0x07
   13614:	86 83       	std	Z+6, r24	; 0x06
   13616:	15 83       	std	Z+5, r17	; 0x05
   13618:	04 83       	std	Z+4, r16	; 0x04
                ++errors;
            }
            break;

        case SS80_CONFIG:
            if( MATCHI (token,"ID") )
   1361a:	88 ec       	ldi	r24, 0xC8	; 200
   1361c:	9c e1       	ldi	r25, 0x1C	; 28
   1361e:	eb ce       	rjmp	.-554    	; 0x133f6 <Read_Config+0x3c2>
   13620:	63 e0       	ldi	r22, 0x03	; 3
   13622:	7e e0       	ldi	r23, 0x0E	; 14
   13624:	c8 01       	movw	r24, r16
   13626:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <MATCHI>
            {
                SS80p->CONFIG.ID = val.w;
   1362a:	89 2b       	or	r24, r25
            }
            else
            {
                printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", str,lines);
   1362c:	11 f0       	breq	.+4      	; 0x13632 <Read_Config+0x5fe>
   1362e:	f5 01       	movw	r30, r10
   13630:	4e c2       	rjmp	.+1180   	; 0x13ace <Read_Config+0xa9a>
   13632:	80 91 ff 18 	lds	r24, 0x18FF	; 0x8018ff <lines>
   13636:	90 91 00 19 	lds	r25, 0x1900	; 0x801900 <lines+0x1>
   1363a:	ed b7       	in	r30, 0x3d	; 61
   1363c:	fe b7       	in	r31, 0x3e	; 62
   1363e:	97 83       	std	Z+7, r25	; 0x07
   13640:	86 83       	std	Z+6, r24	; 0x06
   13642:	95 82       	std	Z+5, r9	; 0x05
   13644:	84 82       	std	Z+4, r8	; 0x04
                ++errors;
            }
            break;

        case SS80_CONTROLLER:
            if( MATCHI (token,"UNITS_INSTALLED") )
   13646:	8a e9       	ldi	r24, 0x9A	; 154
   13648:	9c e1       	ldi	r25, 0x1C	; 28
   1364a:	d5 ce       	rjmp	.-598    	; 0x133f6 <Read_Config+0x3c2>
   1364c:	66 e0       	ldi	r22, 0x06	; 6
   1364e:	7e e0       	ldi	r23, 0x0E	; 14
   13650:	c8 01       	movw	r24, r16
   13652:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <MATCHI>
            {
                SS80p->CONTROLLER.UNITS_INSTALLED = val.w;
   13656:	89 2b       	or	r24, r25
   13658:	21 f0       	breq	.+8      	; 0x13662 <Read_Config+0x62e>
   1365a:	f5 01       	movw	r30, r10
            }
            else if( MATCHI (token,"TRANSFER_RATE") )
   1365c:	57 82       	std	Z+7, r5	; 0x07
   1365e:	46 82       	std	Z+6, r4	; 0x06
   13660:	96 cd       	rjmp	.-1236   	; 0x1318e <Read_Config+0x15a>
   13662:	67 e8       	ldi	r22, 0x87	; 135
   13664:	7e e0       	ldi	r23, 0x0E	; 14
   13666:	c8 01       	movw	r24, r16
   13668:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <MATCHI>
            {
                SS80p->CONTROLLER.TRANSFER_RATE = val.w;
   1366c:	89 2b       	or	r24, r25
            }
            else if( MATCHI (token,"TYPE") )
   1366e:	11 f0       	breq	.+4      	; 0x13674 <Read_Config+0x640>
   13670:	f5 01       	movw	r30, r10
   13672:	81 c2       	rjmp	.+1282   	; 0x13b76 <Read_Config+0xb42>
   13674:	69 e5       	ldi	r22, 0x59	; 89
   13676:	7d e0       	ldi	r23, 0x0D	; 13
   13678:	c8 01       	movw	r24, r16
   1367a:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <MATCHI>
            {
                SS80p->CONTROLLER.TYPE = val.w;
   1367e:	89 2b       	or	r24, r25
   13680:	19 f0       	breq	.+6      	; 0x13688 <Read_Config+0x654>
            }
            else
            {
                printf("Unexpected SS80 CONTROLLER token: %s, at line:%d\n", token,lines);
   13682:	f5 01       	movw	r30, r10
   13684:	42 86       	std	Z+10, r4	; 0x0a
   13686:	83 cd       	rjmp	.-1274   	; 0x1318e <Read_Config+0x15a>
   13688:	80 91 ff 18 	lds	r24, 0x18FF	; 0x8018ff <lines>
   1368c:	90 91 00 19 	lds	r25, 0x1900	; 0x801900 <lines+0x1>
   13690:	ed b7       	in	r30, 0x3d	; 61
   13692:	fe b7       	in	r31, 0x3e	; 62
   13694:	97 83       	std	Z+7, r25	; 0x07
   13696:	86 83       	std	Z+6, r24	; 0x06
   13698:	15 83       	std	Z+5, r17	; 0x05
   1369a:	04 83       	std	Z+4, r16	; 0x04
            }
            break;


        case SS80_UNIT:
            if( MATCHI (token,"UNIT_TYPE") )
   1369c:	88 e6       	ldi	r24, 0x68	; 104
   1369e:	9c e1       	ldi	r25, 0x1C	; 28
   136a0:	aa ce       	rjmp	.-684    	; 0x133f6 <Read_Config+0x3c2>
   136a2:	66 e1       	ldi	r22, 0x16	; 22
   136a4:	7e e0       	ldi	r23, 0x0E	; 14
   136a6:	c8 01       	movw	r24, r16
   136a8:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <MATCHI>
            {
                SS80p->UNIT.UNIT_TYPE = val.w;
   136ac:	89 2b       	or	r24, r25
   136ae:	19 f0       	breq	.+6      	; 0x136b6 <Read_Config+0x682>
            }
            else if( MATCHI (token,"DEVICE_NUMBER") )
   136b0:	f5 01       	movw	r30, r10
   136b2:	43 86       	std	Z+11, r4	; 0x0b
   136b4:	6c cd       	rjmp	.-1320   	; 0x1318e <Read_Config+0x15a>
   136b6:	60 e2       	ldi	r22, 0x20	; 32
   136b8:	7e e0       	ldi	r23, 0x0E	; 14
   136ba:	c8 01       	movw	r24, r16
   136bc:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <MATCHI>
            {
                SS80p->UNIT.DEVICE_NUMBER = val.l;
   136c0:	89 2b       	or	r24, r25
   136c2:	31 f0       	breq	.+12     	; 0x136d0 <Read_Config+0x69c>
   136c4:	f5 01       	movw	r30, r10
   136c6:	44 86       	std	Z+12, r4	; 0x0c
   136c8:	55 86       	std	Z+13, r5	; 0x0d
            }
            else if( MATCHI (token,"BYTES_PER_BLOCK") )
   136ca:	66 86       	std	Z+14, r6	; 0x0e
   136cc:	77 86       	std	Z+15, r7	; 0x0f
   136ce:	5f cd       	rjmp	.-1346   	; 0x1318e <Read_Config+0x15a>
   136d0:	6e e2       	ldi	r22, 0x2E	; 46
   136d2:	7e e0       	ldi	r23, 0x0E	; 14
   136d4:	c8 01       	movw	r24, r16
   136d6:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <MATCHI>
            {
                if(val.w > 0x1000)
   136da:	89 2b       	or	r24, r25
   136dc:	11 f1       	breq	.+68     	; 0x13722 <Read_Config+0x6ee>
   136de:	f1 e0       	ldi	r31, 0x01	; 1
   136e0:	4f 16       	cp	r4, r31
				{
					printf("Fatal: SS80 BYTES_PER_BLOCK > 0x1000, set to 256 at line:%d\n", lines);
   136e2:	f0 e1       	ldi	r31, 0x10	; 16
   136e4:	5f 06       	cpc	r5, r31
   136e6:	b8 f0       	brcs	.+46     	; 0x13716 <Read_Config+0x6e2>
   136e8:	80 91 ff 18 	lds	r24, 0x18FF	; 0x8018ff <lines>
   136ec:	90 91 00 19 	lds	r25, 0x1900	; 0x801900 <lines+0x1>
   136f0:	ed b7       	in	r30, 0x3d	; 61
   136f2:	fe b7       	in	r31, 0x3e	; 62
   136f4:	95 83       	std	Z+5, r25	; 0x05
   136f6:	84 83       	std	Z+4, r24	; 0x04
   136f8:	8b e2       	ldi	r24, 0x2B	; 43
   136fa:	9c e1       	ldi	r25, 0x1C	; 28
   136fc:	a0 e0       	ldi	r26, 0x00	; 0
   136fe:	81 83       	std	Z+1, r24	; 0x01
   13700:	92 83       	std	Z+2, r25	; 0x02
					val.w = 256;
   13702:	a3 83       	std	Z+3, r26	; 0x03
   13704:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   13708:	80 e0       	ldi	r24, 0x00	; 0
                    ++errors;
   1370a:	91 e0       	ldi	r25, 0x01	; 1
   1370c:	38 2e       	mov	r3, r24
   1370e:	29 2e       	mov	r2, r25
				}
                SS80p->UNIT.BYTES_PER_BLOCK = val.w;
   13710:	ff ef       	ldi	r31, 0xFF	; 255
   13712:	ef 1a       	sub	r14, r31
   13714:	ff 0a       	sbc	r15, r31
   13716:	83 2d       	mov	r24, r3
   13718:	92 2d       	mov	r25, r2
   1371a:	f5 01       	movw	r30, r10
            }
            else if( MATCHI (token,"BUFFERED_BLOCKS") )
   1371c:	91 8b       	std	Z+17, r25	; 0x11
   1371e:	80 8b       	std	Z+16, r24	; 0x10
   13720:	36 cd       	rjmp	.-1428   	; 0x1318e <Read_Config+0x15a>
   13722:	6e e3       	ldi	r22, 0x3E	; 62
   13724:	7e e0       	ldi	r23, 0x0E	; 14
   13726:	c8 01       	movw	r24, r16
   13728:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <MATCHI>
            {
				if(val.b > 1)
   1372c:	89 2b       	or	r24, r25
   1372e:	e9 f0       	breq	.+58     	; 0x1376a <Read_Config+0x736>
				{
					printf("Fatal: SS80 BUFFERED_BLOCKS > 1, set to 1 at line:%d\n", lines);
   13730:	f1 e0       	ldi	r31, 0x01	; 1
   13732:	f4 15       	cp	r31, r4
   13734:	b8 f4       	brcc	.+46     	; 0x13764 <Read_Config+0x730>
   13736:	80 91 ff 18 	lds	r24, 0x18FF	; 0x8018ff <lines>
   1373a:	90 91 00 19 	lds	r25, 0x1900	; 0x801900 <lines+0x1>
   1373e:	ed b7       	in	r30, 0x3d	; 61
   13740:	fe b7       	in	r31, 0x3e	; 62
   13742:	95 83       	std	Z+5, r25	; 0x05
   13744:	84 83       	std	Z+4, r24	; 0x04
   13746:	85 ef       	ldi	r24, 0xF5	; 245
   13748:	9b e1       	ldi	r25, 0x1B	; 27
   1374a:	a0 e0       	ldi	r26, 0x00	; 0
   1374c:	81 83       	std	Z+1, r24	; 0x01
   1374e:	92 83       	std	Z+2, r25	; 0x02
                    ++errors;
   13750:	a3 83       	std	Z+3, r26	; 0x03
   13752:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
					val.w = 1;
   13756:	ff ef       	ldi	r31, 0xFF	; 255
   13758:	ef 1a       	sub	r14, r31
   1375a:	ff 0a       	sbc	r15, r31
   1375c:	81 e0       	ldi	r24, 0x01	; 1
				}
                SS80p->UNIT.BUFFERED_BLOCKS = val.b;
   1375e:	90 e0       	ldi	r25, 0x00	; 0
   13760:	38 2e       	mov	r3, r24
   13762:	29 2e       	mov	r2, r25
            }
            else if( MATCHI (token,"BURST_SIZE") )
   13764:	f5 01       	movw	r30, r10
   13766:	32 8a       	std	Z+18, r3	; 0x12
   13768:	12 cd       	rjmp	.-1500   	; 0x1318e <Read_Config+0x15a>
   1376a:	6e e4       	ldi	r22, 0x4E	; 78
   1376c:	7e e0       	ldi	r23, 0x0E	; 14
   1376e:	c8 01       	movw	r24, r16
   13770:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <MATCHI>
            {
				if(val.b > 0)
   13774:	89 2b       	or	r24, r25
				{
					printf("Fatal: SS80 BURST_SIZE > 0, set to 1 at line:%d\n", lines);
   13776:	e1 f0       	breq	.+56     	; 0x137b0 <Read_Config+0x77c>
   13778:	44 20       	and	r4, r4
   1377a:	b9 f0       	breq	.+46     	; 0x137aa <Read_Config+0x776>
   1377c:	80 91 ff 18 	lds	r24, 0x18FF	; 0x8018ff <lines>
   13780:	90 91 00 19 	lds	r25, 0x1900	; 0x801900 <lines+0x1>
   13784:	ed b7       	in	r30, 0x3d	; 61
   13786:	fe b7       	in	r31, 0x3e	; 62
   13788:	95 83       	std	Z+5, r25	; 0x05
   1378a:	84 83       	std	Z+4, r24	; 0x04
   1378c:	84 ec       	ldi	r24, 0xC4	; 196
   1378e:	9b e1       	ldi	r25, 0x1B	; 27
   13790:	a0 e0       	ldi	r26, 0x00	; 0
   13792:	81 83       	std	Z+1, r24	; 0x01
   13794:	92 83       	std	Z+2, r25	; 0x02
                    ++errors;
   13796:	a3 83       	std	Z+3, r26	; 0x03
   13798:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
					val.w = 0;
   1379c:	ff ef       	ldi	r31, 0xFF	; 255
   1379e:	ef 1a       	sub	r14, r31
   137a0:	ff 0a       	sbc	r15, r31
   137a2:	80 e0       	ldi	r24, 0x00	; 0
				}
                SS80p->UNIT.BURST_SIZE = val.b;
   137a4:	90 e0       	ldi	r25, 0x00	; 0
   137a6:	38 2e       	mov	r3, r24
   137a8:	29 2e       	mov	r2, r25
            }
            else if( MATCHI (token,"BLOCK_TIME") )
   137aa:	f5 01       	movw	r30, r10
   137ac:	33 8a       	std	Z+19, r3	; 0x13
   137ae:	ef cc       	rjmp	.-1570   	; 0x1318e <Read_Config+0x15a>
   137b0:	69 e5       	ldi	r22, 0x59	; 89
   137b2:	7e e0       	ldi	r23, 0x0E	; 14
   137b4:	c8 01       	movw	r24, r16
   137b6:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <MATCHI>
            {
                SS80p->UNIT.BLOCK_TIME = val.w;
   137ba:	89 2b       	or	r24, r25
   137bc:	21 f0       	breq	.+8      	; 0x137c6 <Read_Config+0x792>
   137be:	f5 01       	movw	r30, r10
            }
            else if( MATCHI (token,"CONTINUOUS_TRANSFER_RATE") || MATCHI (token,"CONTINOUS_TRANSFER_RATE") )
   137c0:	55 8a       	std	Z+21, r5	; 0x15
   137c2:	44 8a       	std	Z+20, r4	; 0x14
   137c4:	e4 cc       	rjmp	.-1592   	; 0x1318e <Read_Config+0x15a>
   137c6:	64 e6       	ldi	r22, 0x64	; 100
   137c8:	7e e0       	ldi	r23, 0x0E	; 14
   137ca:	c8 01       	movw	r24, r16
   137cc:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <MATCHI>
            {
                SS80p->UNIT.CONTINUOUS_TRANSFER_RATE = val.w;
   137d0:	89 2b       	or	r24, r25
   137d2:	21 f0       	breq	.+8      	; 0x137dc <Read_Config+0x7a8>
   137d4:	f5 01       	movw	r30, r10
            }
            else if( MATCHI (token,"BLOCK_TIME") )
            {
                SS80p->UNIT.BLOCK_TIME = val.w;
            }
            else if( MATCHI (token,"CONTINUOUS_TRANSFER_RATE") || MATCHI (token,"CONTINOUS_TRANSFER_RATE") )
   137d6:	57 8a       	std	Z+23, r5	; 0x17
   137d8:	46 8a       	std	Z+22, r4	; 0x16
   137da:	d9 cc       	rjmp	.-1614   	; 0x1318e <Read_Config+0x15a>
   137dc:	6d e7       	ldi	r22, 0x7D	; 125
   137de:	7e e0       	ldi	r23, 0x0E	; 14
   137e0:	c8 01       	movw	r24, r16
   137e2:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <MATCHI>
            {
                SS80p->UNIT.CONTINUOUS_TRANSFER_RATE = val.w;
            }
            else if( MATCHI (token,"OPTIMAL_RETRY_TIME") )
   137e6:	89 2b       	or	r24, r25
   137e8:	a9 f7       	brne	.-22     	; 0x137d4 <Read_Config+0x7a0>
   137ea:	65 e9       	ldi	r22, 0x95	; 149
   137ec:	7e e0       	ldi	r23, 0x0E	; 14
   137ee:	c8 01       	movw	r24, r16
   137f0:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <MATCHI>
            {
                SS80p->UNIT.OPTIMAL_RETRY_TIME = val.w;
   137f4:	89 2b       	or	r24, r25
   137f6:	21 f0       	breq	.+8      	; 0x13800 <Read_Config+0x7cc>
   137f8:	f5 01       	movw	r30, r10
            }
            else if( MATCHI (token,"ACCESS_TIME") )
   137fa:	51 8e       	std	Z+25, r5	; 0x19
   137fc:	40 8e       	std	Z+24, r4	; 0x18
   137fe:	c7 cc       	rjmp	.-1650   	; 0x1318e <Read_Config+0x15a>
   13800:	68 ea       	ldi	r22, 0xA8	; 168
   13802:	7e e0       	ldi	r23, 0x0E	; 14
   13804:	c8 01       	movw	r24, r16
   13806:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <MATCHI>
            {
                SS80p->UNIT.ACCESS_TIME = val.w;
   1380a:	89 2b       	or	r24, r25
   1380c:	21 f0       	breq	.+8      	; 0x13816 <Read_Config+0x7e2>
   1380e:	f5 01       	movw	r30, r10
            }
            else if( MATCHI (token,"MAXIMUM_INTERLEAVE") )
   13810:	53 8e       	std	Z+27, r5	; 0x1b
   13812:	42 8e       	std	Z+26, r4	; 0x1a
   13814:	bc cc       	rjmp	.-1672   	; 0x1318e <Read_Config+0x15a>
   13816:	64 eb       	ldi	r22, 0xB4	; 180
   13818:	7e e0       	ldi	r23, 0x0E	; 14
   1381a:	c8 01       	movw	r24, r16
   1381c:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <MATCHI>
            {
                SS80p->UNIT.MAXIMUM_INTERLEAVE = val.b;
   13820:	89 2b       	or	r24, r25
   13822:	19 f0       	breq	.+6      	; 0x1382a <Read_Config+0x7f6>
            }
            else if( MATCHI (token,"FIXED_VOLUMES") )
   13824:	f5 01       	movw	r30, r10
   13826:	44 8e       	std	Z+28, r4	; 0x1c
   13828:	b2 cc       	rjmp	.-1692   	; 0x1318e <Read_Config+0x15a>
   1382a:	67 ec       	ldi	r22, 0xC7	; 199
   1382c:	7e e0       	ldi	r23, 0x0E	; 14
   1382e:	c8 01       	movw	r24, r16
   13830:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <MATCHI>
            {
                SS80p->UNIT.FIXED_VOLUMES = val.b;
   13834:	89 2b       	or	r24, r25
   13836:	19 f0       	breq	.+6      	; 0x1383e <Read_Config+0x80a>
            }
            else if( MATCHI (token,"REMOVABLE_VOLUMES") )
   13838:	f5 01       	movw	r30, r10
   1383a:	45 8e       	std	Z+29, r4	; 0x1d
   1383c:	a8 cc       	rjmp	.-1712   	; 0x1318e <Read_Config+0x15a>
   1383e:	65 ed       	ldi	r22, 0xD5	; 213
   13840:	7e e0       	ldi	r23, 0x0E	; 14
   13842:	c8 01       	movw	r24, r16
   13844:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <MATCHI>
            {
                SS80p->UNIT.REMOVABLE_VOLUMES = val.b;
   13848:	89 2b       	or	r24, r25
   1384a:	19 f0       	breq	.+6      	; 0x13852 <Read_Config+0x81e>
            }
            else
            {
                printf("Unexpected SS80 UNIT token: %s, at line:%d\n", token,lines);
   1384c:	f5 01       	movw	r30, r10
   1384e:	46 8e       	std	Z+30, r4	; 0x1e
   13850:	9e cc       	rjmp	.-1732   	; 0x1318e <Read_Config+0x15a>
   13852:	80 91 ff 18 	lds	r24, 0x18FF	; 0x8018ff <lines>
   13856:	90 91 00 19 	lds	r25, 0x1900	; 0x801900 <lines+0x1>
   1385a:	ed b7       	in	r30, 0x3d	; 61
   1385c:	fe b7       	in	r31, 0x3e	; 62
   1385e:	97 83       	std	Z+7, r25	; 0x07
   13860:	86 83       	std	Z+6, r24	; 0x06
   13862:	15 83       	std	Z+5, r17	; 0x05
   13864:	04 83       	std	Z+4, r16	; 0x04
                ++errors;
            }
            break;

        case SS80_VOLUME:
            if( MATCHI (token,"MAX_CYLINDER") )
   13866:	88 e9       	ldi	r24, 0x98	; 152
   13868:	9b e1       	ldi	r25, 0x1B	; 27
   1386a:	c5 cd       	rjmp	.-1142   	; 0x133f6 <Read_Config+0x3c2>
   1386c:	67 ee       	ldi	r22, 0xE7	; 231
   1386e:	7e e0       	ldi	r23, 0x0E	; 14
   13870:	c8 01       	movw	r24, r16
   13872:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <MATCHI>
            {
                SS80p->VOLUME.MAX_CYLINDER = val.l;
   13876:	89 2b       	or	r24, r25
   13878:	31 f0       	breq	.+12     	; 0x13886 <Read_Config+0x852>
   1387a:	f5 01       	movw	r30, r10
   1387c:	47 8e       	std	Z+31, r4	; 0x1f
   1387e:	50 a2       	std	Z+32, r5	; 0x20
            }
            else if( MATCHI (token,"MAX_HEAD") )
   13880:	61 a2       	std	Z+33, r6	; 0x21
   13882:	72 a2       	std	Z+34, r7	; 0x22
   13884:	84 cc       	rjmp	.-1784   	; 0x1318e <Read_Config+0x15a>
   13886:	64 ef       	ldi	r22, 0xF4	; 244
   13888:	7e e0       	ldi	r23, 0x0E	; 14
   1388a:	c8 01       	movw	r24, r16
   1388c:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <MATCHI>
            {
                SS80p->VOLUME.MAX_HEAD = val.b;
   13890:	89 2b       	or	r24, r25
   13892:	19 f0       	breq	.+6      	; 0x1389a <Read_Config+0x866>
            }
            else if( MATCHI (token,"MAX_SECTOR") )
   13894:	f5 01       	movw	r30, r10
   13896:	43 a2       	std	Z+35, r4	; 0x23
   13898:	7a cc       	rjmp	.-1804   	; 0x1318e <Read_Config+0x15a>
   1389a:	6d ef       	ldi	r22, 0xFD	; 253
   1389c:	7e e0       	ldi	r23, 0x0E	; 14
   1389e:	c8 01       	movw	r24, r16
   138a0:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <MATCHI>
            {
                SS80p->VOLUME.MAX_SECTOR = val.w;
   138a4:	89 2b       	or	r24, r25
   138a6:	21 f0       	breq	.+8      	; 0x138b0 <Read_Config+0x87c>
   138a8:	f5 01       	movw	r30, r10
            }
            else if( MATCHI (token,"MAX_BLOCK_NUMBER") )
   138aa:	55 a2       	std	Z+37, r5	; 0x25
   138ac:	44 a2       	std	Z+36, r4	; 0x24
   138ae:	6f cc       	rjmp	.-1826   	; 0x1318e <Read_Config+0x15a>
   138b0:	68 e0       	ldi	r22, 0x08	; 8
   138b2:	7f e0       	ldi	r23, 0x0F	; 15
   138b4:	c8 01       	movw	r24, r16
   138b6:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <MATCHI>
            {
                SS80p->VOLUME.MAX_BLOCK_NUMBER = val.w;
   138ba:	89 2b       	or	r24, r25
   138bc:	41 f0       	breq	.+16     	; 0x138ce <Read_Config+0x89a>
   138be:	61 2c       	mov	r6, r1
   138c0:	71 2c       	mov	r7, r1
   138c2:	f5 01       	movw	r30, r10
   138c4:	46 a2       	std	Z+38, r4	; 0x26
   138c6:	57 a2       	std	Z+39, r5	; 0x27
            }
            else if( MATCHI (token,"INTERLEAVE") )
   138c8:	60 a6       	std	Z+40, r6	; 0x28
   138ca:	71 a6       	std	Z+41, r7	; 0x29
   138cc:	60 cc       	rjmp	.-1856   	; 0x1318e <Read_Config+0x15a>
   138ce:	6c eb       	ldi	r22, 0xBC	; 188
   138d0:	7e e0       	ldi	r23, 0x0E	; 14
   138d2:	c8 01       	movw	r24, r16
   138d4:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <MATCHI>
            {
                SS80p->VOLUME.INTERLEAVE = val.b;
   138d8:	89 2b       	or	r24, r25
   138da:	19 f0       	breq	.+6      	; 0x138e2 <Read_Config+0x8ae>

            }
            else
            {
                printf("Unexpected SS80 VOLUME token: %s, at line:%d\n", token,lines);
   138dc:	f5 01       	movw	r30, r10
   138de:	42 a6       	std	Z+42, r4	; 0x2a
   138e0:	56 cc       	rjmp	.-1876   	; 0x1318e <Read_Config+0x15a>
   138e2:	80 91 ff 18 	lds	r24, 0x18FF	; 0x8018ff <lines>
   138e6:	90 91 00 19 	lds	r25, 0x1900	; 0x801900 <lines+0x1>
   138ea:	ed b7       	in	r30, 0x3d	; 61
   138ec:	fe b7       	in	r31, 0x3e	; 62
   138ee:	97 83       	std	Z+7, r25	; 0x07
   138f0:	86 83       	std	Z+6, r24	; 0x06
   138f2:	15 83       	std	Z+5, r17	; 0x05
            }
            break;

#ifdef AMIGO
        case AMIGO_STATE:
            if( MATCHI (token,"HEADER") )
   138f4:	04 83       	std	Z+4, r16	; 0x04
   138f6:	8a e6       	ldi	r24, 0x6A	; 106
   138f8:	9b e1       	ldi	r25, 0x1B	; 27
   138fa:	7d cd       	rjmp	.-1286   	; 0x133f6 <Read_Config+0x3c2>
   138fc:	6c ed       	ldi	r22, 0xDC	; 220
   138fe:	7d e0       	ldi	r23, 0x0D	; 13
            {
                push_state(state);
   13900:	c8 01       	movw	r24, r16
   13902:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <MATCHI>
   13906:	89 2b       	or	r24, r25
                state = AMIGO_HEADER;
   13908:	31 f0       	breq	.+12     	; 0x13916 <Read_Config+0x8e2>
   1390a:	8a e0       	ldi	r24, 0x0A	; 10
   1390c:	90 e0       	ldi	r25, 0x00	; 0
            }
            else if( MATCHI (token,"CONFIG") )
   1390e:	1c da       	rcall	.-3016   	; 0x12d48 <push_state>
   13910:	2b e0       	ldi	r18, 0x0B	; 11
   13912:	30 e0       	ldi	r19, 0x00	; 0
   13914:	c3 cd       	rjmp	.-1146   	; 0x1349c <Read_Config+0x468>
   13916:	65 ed       	ldi	r22, 0xD5	; 213
   13918:	7d e0       	ldi	r23, 0x0D	; 13
            {
                push_state(state);
   1391a:	c8 01       	movw	r24, r16
   1391c:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <MATCHI>
   13920:	89 2b       	or	r24, r25
                state = AMIGO_CONFIG;
   13922:	31 f0       	breq	.+12     	; 0x13930 <Read_Config+0x8fc>
   13924:	8a e0       	ldi	r24, 0x0A	; 10
   13926:	90 e0       	ldi	r25, 0x00	; 0
            }
            else if( MATCHI (token,"GEOMETRY") )
   13928:	0f da       	rcall	.-3042   	; 0x12d48 <push_state>
   1392a:	8c e0       	ldi	r24, 0x0C	; 12
   1392c:	90 e0       	ldi	r25, 0x00	; 0
   1392e:	a5 cc       	rjmp	.-1718   	; 0x1327a <Read_Config+0x246>
   13930:	69 e1       	ldi	r22, 0x19	; 25
   13932:	7f e0       	ldi	r23, 0x0F	; 15
   13934:	c8 01       	movw	r24, r16
            {
                push_state(state);
   13936:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <MATCHI>
   1393a:	89 2b       	or	r24, r25
   1393c:	31 f0       	breq	.+12     	; 0x1394a <Read_Config+0x916>
                state = AMIGO_GEOMETRY;
   1393e:	8a e0       	ldi	r24, 0x0A	; 10
   13940:	90 e0       	ldi	r25, 0x00	; 0
   13942:	02 da       	rcall	.-3068   	; 0x12d48 <push_state>
            }
            else
            {
                printf("Unexpected AMIGO START token: %s, at line:%d\n", str,lines);
   13944:	ad e0       	ldi	r26, 0x0D	; 13
   13946:	b0 e0       	ldi	r27, 0x00	; 0
   13948:	c9 cd       	rjmp	.-1134   	; 0x134dc <Read_Config+0x4a8>
   1394a:	80 91 ff 18 	lds	r24, 0x18FF	; 0x8018ff <lines>
   1394e:	90 91 00 19 	lds	r25, 0x1900	; 0x801900 <lines+0x1>
   13952:	ed b7       	in	r30, 0x3d	; 61
   13954:	fe b7       	in	r31, 0x3e	; 62
   13956:	97 83       	std	Z+7, r25	; 0x07
   13958:	86 83       	std	Z+6, r24	; 0x06
   1395a:	95 82       	std	Z+5, r9	; 0x05
   1395c:	84 82       	std	Z+4, r8	; 0x04
                ++errors;
            }
            break;

        case AMIGO_HEADER:
            if( MATCHI (token,"DRIVE") )
   1395e:	8c e3       	ldi	r24, 0x3C	; 60
   13960:	9b e1       	ldi	r25, 0x1B	; 27
   13962:	49 cd       	rjmp	.-1390   	; 0x133f6 <Read_Config+0x3c2>
   13964:	62 e2       	ldi	r22, 0x22	; 34
   13966:	7f e0       	ldi	r23, 0x0F	; 15
   13968:	c8 01       	movw	r24, r16
   1396a:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <MATCHI>
            {
                //skip this
                printf("Skipping %s, at line:%d\n", str,lines);
   1396e:	89 2b       	or	r24, r25
   13970:	99 f0       	breq	.+38     	; 0x13998 <Read_Config+0x964>
   13972:	80 91 ff 18 	lds	r24, 0x18FF	; 0x8018ff <lines>
   13976:	90 91 00 19 	lds	r25, 0x1900	; 0x801900 <lines+0x1>
   1397a:	ed b7       	in	r30, 0x3d	; 61
   1397c:	fe b7       	in	r31, 0x3e	; 62
   1397e:	97 83       	std	Z+7, r25	; 0x07
   13980:	86 83       	std	Z+6, r24	; 0x06
   13982:	95 82       	std	Z+5, r9	; 0x05
   13984:	84 82       	std	Z+4, r8	; 0x04
   13986:	83 e2       	ldi	r24, 0x23	; 35
   13988:	9b e1       	ldi	r25, 0x1B	; 27
   1398a:	a0 e0       	ldi	r26, 0x00	; 0
   1398c:	81 83       	std	Z+1, r24	; 0x01
   1398e:	92 83       	std	Z+2, r25	; 0x02
   13990:	a3 83       	std	Z+3, r26	; 0x03
            }
            else if( MATCHI (token,"ADDRESS") )
   13992:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   13996:	fb cb       	rjmp	.-2058   	; 0x1318e <Read_Config+0x15a>
   13998:	6d ec       	ldi	r22, 0xCD	; 205
   1399a:	7d e0       	ldi	r23, 0x0D	; 13
   1399c:	c8 01       	movw	r24, r16
   1399e:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <MATCHI>
            {
                if(val.b > 31)
   139a2:	89 2b       	or	r24, r25
   139a4:	59 f1       	breq	.+86     	; 0x139fc <Read_Config+0x9c8>
				{
					printf("Fatal AMIGO ADDRESS: %d > 31 disabled at line:%d\n", str,lines);
   139a6:	ff e1       	ldi	r31, 0x1F	; 31
   139a8:	f4 15       	cp	r31, r4
   139aa:	b8 f4       	brcc	.+46     	; 0x139da <Read_Config+0x9a6>
   139ac:	80 91 ff 18 	lds	r24, 0x18FF	; 0x8018ff <lines>
   139b0:	90 91 00 19 	lds	r25, 0x1900	; 0x801900 <lines+0x1>
   139b4:	ed b7       	in	r30, 0x3d	; 61
   139b6:	fe b7       	in	r31, 0x3e	; 62
   139b8:	97 83       	std	Z+7, r25	; 0x07
   139ba:	86 83       	std	Z+6, r24	; 0x06
   139bc:	95 82       	std	Z+5, r9	; 0x05
   139be:	84 82       	std	Z+4, r8	; 0x04
   139c0:	81 ef       	ldi	r24, 0xF1	; 241
   139c2:	9a e1       	ldi	r25, 0x1A	; 26
   139c4:	a0 e0       	ldi	r26, 0x00	; 0
   139c6:	81 83       	std	Z+1, r24	; 0x01
   139c8:	92 83       	std	Z+2, r25	; 0x02
					val.b = 0xff;
   139ca:	a3 83       	std	Z+3, r26	; 0x03
   139cc:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
					++errors;
   139d0:	33 24       	eor	r3, r3
   139d2:	3a 94       	dec	r3
				}
                Devices[index].ADDRESS = val.b;
   139d4:	ff ef       	ldi	r31, 0xFF	; 255
   139d6:	ef 1a       	sub	r14, r31
   139d8:	ff 0a       	sbc	r15, r31
   139da:	8b e2       	ldi	r24, 0x2B	; 43
   139dc:	8c 9d       	mul	r24, r12
   139de:	f0 01       	movw	r30, r0
   139e0:	8d 9d       	mul	r24, r13
   139e2:	f0 0d       	add	r31, r0
   139e4:	11 24       	eor	r1, r1
                AMIGOp->HEADER.ADDRESS = val.b;
   139e6:	e4 57       	subi	r30, 0x74	; 116
   139e8:	f1 4e       	sbci	r31, 0xE1	; 225
   139ea:	31 82       	std	Z+1, r3	; 0x01
   139ec:	c4 57       	subi	r28, 0x74	; 116
   139ee:	de 4f       	sbci	r29, 0xFE	; 254
   139f0:	a8 81       	ld	r26, Y
   139f2:	b9 81       	ldd	r27, Y+1	; 0x01
   139f4:	cc 58       	subi	r28, 0x8C	; 140
            }
            else if( MATCHI (token,"PPR") )
   139f6:	d1 40       	sbci	r29, 0x01	; 1
   139f8:	3c 92       	st	X, r3
   139fa:	c9 cb       	rjmp	.-2158   	; 0x1318e <Read_Config+0x15a>
   139fc:	6a ef       	ldi	r22, 0xFA	; 250
   139fe:	7d e0       	ldi	r23, 0x0D	; 13
   13a00:	c8 01       	movw	r24, r16
   13a02:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <MATCHI>
            {
                if(val.b > 7)
   13a06:	89 2b       	or	r24, r25
   13a08:	79 f1       	breq	.+94     	; 0x13a68 <Read_Config+0xa34>
				{
					printf("Warning AMIGO ADDRESS: %d > 7, disabled at line:%d\n", str,lines);
   13a0a:	b7 e0       	ldi	r27, 0x07	; 7
   13a0c:	b4 15       	cp	r27, r4
   13a0e:	d8 f4       	brcc	.+54     	; 0x13a46 <Read_Config+0xa12>
   13a10:	80 91 ff 18 	lds	r24, 0x18FF	; 0x8018ff <lines>
   13a14:	90 91 00 19 	lds	r25, 0x1900	; 0x801900 <lines+0x1>
   13a18:	ed b7       	in	r30, 0x3d	; 61
   13a1a:	fe b7       	in	r31, 0x3e	; 62
   13a1c:	97 83       	std	Z+7, r25	; 0x07
   13a1e:	86 83       	std	Z+6, r24	; 0x06
   13a20:	95 82       	std	Z+5, r9	; 0x05
   13a22:	84 82       	std	Z+4, r8	; 0x04
   13a24:	cf 55       	subi	r28, 0x5F	; 95
   13a26:	de 4f       	sbci	r29, 0xFE	; 254
   13a28:	28 81       	ld	r18, Y
   13a2a:	39 81       	ldd	r19, Y+1	; 0x01
   13a2c:	4a 81       	ldd	r20, Y+2	; 0x02
   13a2e:	c1 5a       	subi	r28, 0xA1	; 161
   13a30:	d1 40       	sbci	r29, 0x01	; 1
   13a32:	21 83       	std	Z+1, r18	; 0x01
   13a34:	32 83       	std	Z+2, r19	; 0x02
					val.b = 0xff;
   13a36:	43 83       	std	Z+3, r20	; 0x03
   13a38:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
					++errors;
   13a3c:	33 24       	eor	r3, r3
   13a3e:	3a 94       	dec	r3
				}
                Devices[index].PPR = val.b;
   13a40:	ff ef       	ldi	r31, 0xFF	; 255
   13a42:	ef 1a       	sub	r14, r31
   13a44:	ff 0a       	sbc	r15, r31
   13a46:	8b e2       	ldi	r24, 0x2B	; 43
   13a48:	8c 9d       	mul	r24, r12
   13a4a:	f0 01       	movw	r30, r0
   13a4c:	8d 9d       	mul	r24, r13
   13a4e:	f0 0d       	add	r31, r0
   13a50:	11 24       	eor	r1, r1
                AMIGOp->HEADER.PPR = val.b;
   13a52:	e4 57       	subi	r30, 0x74	; 116
   13a54:	f1 4e       	sbci	r31, 0xE1	; 225
   13a56:	32 82       	std	Z+2, r3	; 0x02
   13a58:	c4 57       	subi	r28, 0x74	; 116
   13a5a:	de 4f       	sbci	r29, 0xFE	; 254
   13a5c:	e8 81       	ld	r30, Y
   13a5e:	f9 81       	ldd	r31, Y+1	; 0x01
   13a60:	cc 58       	subi	r28, 0x8C	; 140
            }
            else if( MATCHI (token,"FILE") )
   13a62:	d1 40       	sbci	r29, 0x01	; 1
   13a64:	31 82       	std	Z+1, r3	; 0x01
   13a66:	93 cb       	rjmp	.-2266   	; 0x1318e <Read_Config+0x15a>
   13a68:	6e ef       	ldi	r22, 0xFE	; 254
   13a6a:	7d e0       	ldi	r23, 0x0D	; 13
   13a6c:	c8 01       	movw	r24, r16
   13a6e:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <MATCHI>
            {
                AMIGOp->HEADER.NAME = stralloc(arg);
   13a72:	89 2b       	or	r24, r25
   13a74:	69 f0       	breq	.+26     	; 0x13a90 <Read_Config+0xa5c>
   13a76:	ce 01       	movw	r24, r28
   13a78:	0a 96       	adiw	r24, 0x0a	; 10
   13a7a:	0e 94 93 33 	call	0x6726	; 0x6726 <stralloc>
   13a7e:	c4 57       	subi	r28, 0x74	; 116
   13a80:	de 4f       	sbci	r29, 0xFE	; 254
   13a82:	e8 81       	ld	r30, Y
   13a84:	f9 81       	ldd	r31, Y+1	; 0x01
   13a86:	cc 58       	subi	r28, 0x8C	; 140
   13a88:	d1 40       	sbci	r29, 0x01	; 1
            }
            else
            {
                printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", str,lines);
   13a8a:	93 83       	std	Z+3, r25	; 0x03
   13a8c:	82 83       	std	Z+2, r24	; 0x02
   13a8e:	7f cb       	rjmp	.-2306   	; 0x1318e <Read_Config+0x15a>
   13a90:	80 91 ff 18 	lds	r24, 0x18FF	; 0x8018ff <lines>
   13a94:	90 91 00 19 	lds	r25, 0x1900	; 0x801900 <lines+0x1>
   13a98:	ed b7       	in	r30, 0x3d	; 61
   13a9a:	fe b7       	in	r31, 0x3e	; 62
   13a9c:	97 83       	std	Z+7, r25	; 0x07
   13a9e:	86 83       	std	Z+6, r24	; 0x06
   13aa0:	95 82       	std	Z+5, r9	; 0x05
   13aa2:	84 82       	std	Z+4, r8	; 0x04
   13aa4:	c2 56       	subi	r28, 0x62	; 98
   13aa6:	de 4f       	sbci	r29, 0xFE	; 254
   13aa8:	28 81       	ld	r18, Y
   13aaa:	39 81       	ldd	r19, Y+1	; 0x01
   13aac:	4a 81       	ldd	r20, Y+2	; 0x02
                ++errors;
            }
            break;

        case AMIGO_CONFIG:
            if( MATCHI (token,"ID") )
   13aae:	ce 59       	subi	r28, 0x9E	; 158
   13ab0:	d1 40       	sbci	r29, 0x01	; 1
   13ab2:	95 c0       	rjmp	.+298    	; 0x13bde <Read_Config+0xbaa>
   13ab4:	63 e0       	ldi	r22, 0x03	; 3
   13ab6:	7e e0       	ldi	r23, 0x0E	; 14
   13ab8:	c8 01       	movw	r24, r16
   13aba:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <MATCHI>
            {
                AMIGOp->CONFIG.ID = val.w;
   13abe:	89 2b       	or	r24, r25
   13ac0:	49 f0       	breq	.+18     	; 0x13ad4 <Read_Config+0xaa0>
   13ac2:	c4 57       	subi	r28, 0x74	; 116
   13ac4:	de 4f       	sbci	r29, 0xFE	; 254
   13ac6:	e8 81       	ld	r30, Y
   13ac8:	f9 81       	ldd	r31, Y+1	; 0x01
   13aca:	cc 58       	subi	r28, 0x8C	; 140
   13acc:	d1 40       	sbci	r29, 0x01	; 1
            }
            else
            {
                printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", str,lines);
   13ace:	55 82       	std	Z+5, r5	; 0x05
   13ad0:	44 82       	std	Z+4, r4	; 0x04
   13ad2:	5d cb       	rjmp	.-2374   	; 0x1318e <Read_Config+0x15a>
   13ad4:	80 91 ff 18 	lds	r24, 0x18FF	; 0x8018ff <lines>
   13ad8:	90 91 00 19 	lds	r25, 0x1900	; 0x801900 <lines+0x1>
   13adc:	ed b7       	in	r30, 0x3d	; 61
   13ade:	fe b7       	in	r31, 0x3e	; 62
   13ae0:	97 83       	std	Z+7, r25	; 0x07
   13ae2:	86 83       	std	Z+6, r24	; 0x06
   13ae4:	95 82       	std	Z+5, r9	; 0x05
   13ae6:	84 82       	std	Z+4, r8	; 0x04
   13ae8:	c5 56       	subi	r28, 0x65	; 101
   13aea:	de 4f       	sbci	r29, 0xFE	; 254
   13aec:	28 81       	ld	r18, Y
   13aee:	39 81       	ldd	r19, Y+1	; 0x01
   13af0:	4a 81       	ldd	r20, Y+2	; 0x02
                ++errors;
            }
            break;

        case AMIGO_GEOMETRY:
            if( MATCHI (token,"BYTES_PER_SECTOR") )
   13af2:	cb 59       	subi	r28, 0x9B	; 155
   13af4:	d1 40       	sbci	r29, 0x01	; 1
   13af6:	73 c0       	rjmp	.+230    	; 0x13bde <Read_Config+0xbaa>
   13af8:	68 e2       	ldi	r22, 0x28	; 40
   13afa:	7f e0       	ldi	r23, 0x0F	; 15
   13afc:	c8 01       	movw	r24, r16
   13afe:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <MATCHI>
            {
                if(val.w > 0x1000)
   13b02:	89 2b       	or	r24, r25
   13b04:	59 f1       	breq	.+86     	; 0x13b5c <Read_Config+0xb28>
   13b06:	21 e0       	ldi	r18, 0x01	; 1
   13b08:	42 16       	cp	r4, r18
				{
					printf("Fatal: AMIGO BYTES_PER_SECTOR > 0x1000, set to 256 at line:%d\n", lines);
   13b0a:	20 e1       	ldi	r18, 0x10	; 16
   13b0c:	52 06       	cpc	r5, r18
   13b0e:	d8 f0       	brcs	.+54     	; 0x13b46 <Read_Config+0xb12>
   13b10:	80 91 ff 18 	lds	r24, 0x18FF	; 0x8018ff <lines>
   13b14:	90 91 00 19 	lds	r25, 0x1900	; 0x801900 <lines+0x1>
   13b18:	ed b7       	in	r30, 0x3d	; 61
   13b1a:	fe b7       	in	r31, 0x3e	; 62
   13b1c:	95 83       	std	Z+5, r25	; 0x05
   13b1e:	84 83       	std	Z+4, r24	; 0x04
   13b20:	c8 56       	subi	r28, 0x68	; 104
   13b22:	de 4f       	sbci	r29, 0xFE	; 254
   13b24:	28 81       	ld	r18, Y
   13b26:	39 81       	ldd	r19, Y+1	; 0x01
   13b28:	4a 81       	ldd	r20, Y+2	; 0x02
   13b2a:	c8 59       	subi	r28, 0x98	; 152
   13b2c:	d1 40       	sbci	r29, 0x01	; 1
   13b2e:	21 83       	std	Z+1, r18	; 0x01
   13b30:	32 83       	std	Z+2, r19	; 0x02
					val.w = 256;
   13b32:	43 83       	std	Z+3, r20	; 0x03
   13b34:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   13b38:	80 e0       	ldi	r24, 0x00	; 0
                    ++errors;
   13b3a:	91 e0       	ldi	r25, 0x01	; 1
   13b3c:	38 2e       	mov	r3, r24
   13b3e:	29 2e       	mov	r2, r25
				}
                AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
   13b40:	ff ef       	ldi	r31, 0xFF	; 255
   13b42:	ef 1a       	sub	r14, r31
   13b44:	ff 0a       	sbc	r15, r31
   13b46:	83 2d       	mov	r24, r3
   13b48:	92 2d       	mov	r25, r2
   13b4a:	c4 57       	subi	r28, 0x74	; 116
   13b4c:	de 4f       	sbci	r29, 0xFE	; 254
   13b4e:	e8 81       	ld	r30, Y
   13b50:	f9 81       	ldd	r31, Y+1	; 0x01
   13b52:	cc 58       	subi	r28, 0x8C	; 140
   13b54:	d1 40       	sbci	r29, 0x01	; 1
            }
            else if( MATCHI (token,"SECTORS_PER_TRACK") )
   13b56:	97 83       	std	Z+7, r25	; 0x07
   13b58:	86 83       	std	Z+6, r24	; 0x06
   13b5a:	19 cb       	rjmp	.-2510   	; 0x1318e <Read_Config+0x15a>
   13b5c:	69 e3       	ldi	r22, 0x39	; 57
   13b5e:	7f e0       	ldi	r23, 0x0F	; 15
   13b60:	c8 01       	movw	r24, r16
   13b62:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <MATCHI>
            {
                AMIGOp->GEOMETRY.SECTORS_PER_TRACK = val.w;
   13b66:	89 2b       	or	r24, r25
   13b68:	49 f0       	breq	.+18     	; 0x13b7c <Read_Config+0xb48>
   13b6a:	c4 57       	subi	r28, 0x74	; 116
   13b6c:	de 4f       	sbci	r29, 0xFE	; 254
   13b6e:	e8 81       	ld	r30, Y
   13b70:	f9 81       	ldd	r31, Y+1	; 0x01
   13b72:	cc 58       	subi	r28, 0x8C	; 140
   13b74:	d1 40       	sbci	r29, 0x01	; 1
            }
            else if( MATCHI (token,"HEADS") )
   13b76:	51 86       	std	Z+9, r5	; 0x09
   13b78:	40 86       	std	Z+8, r4	; 0x08
   13b7a:	09 cb       	rjmp	.-2542   	; 0x1318e <Read_Config+0x15a>
   13b7c:	6b e4       	ldi	r22, 0x4B	; 75
   13b7e:	7f e0       	ldi	r23, 0x0F	; 15
   13b80:	c8 01       	movw	r24, r16
   13b82:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <MATCHI>
            {
                AMIGOp->GEOMETRY.HEADS = val.w;
   13b86:	89 2b       	or	r24, r25
   13b88:	49 f0       	breq	.+18     	; 0x13b9c <Read_Config+0xb68>
   13b8a:	c4 57       	subi	r28, 0x74	; 116
   13b8c:	de 4f       	sbci	r29, 0xFE	; 254
   13b8e:	e8 81       	ld	r30, Y
   13b90:	f9 81       	ldd	r31, Y+1	; 0x01
   13b92:	cc 58       	subi	r28, 0x8C	; 140
   13b94:	d1 40       	sbci	r29, 0x01	; 1
            }
            else if( MATCHI (token,"CYLINDERS") )
   13b96:	53 86       	std	Z+11, r5	; 0x0b
   13b98:	42 86       	std	Z+10, r4	; 0x0a
   13b9a:	f9 ca       	rjmp	.-2574   	; 0x1318e <Read_Config+0x15a>
   13b9c:	61 e5       	ldi	r22, 0x51	; 81
   13b9e:	7f e0       	ldi	r23, 0x0F	; 15
   13ba0:	c8 01       	movw	r24, r16
   13ba2:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <MATCHI>
            {
                AMIGOp->GEOMETRY.CYLINDERS = val.w;
   13ba6:	89 2b       	or	r24, r25
   13ba8:	49 f0       	breq	.+18     	; 0x13bbc <Read_Config+0xb88>
   13baa:	c4 57       	subi	r28, 0x74	; 116
   13bac:	de 4f       	sbci	r29, 0xFE	; 254
   13bae:	e8 81       	ld	r30, Y
   13bb0:	f9 81       	ldd	r31, Y+1	; 0x01
   13bb2:	cc 58       	subi	r28, 0x8C	; 140
   13bb4:	d1 40       	sbci	r29, 0x01	; 1
            }
            else
            {
                printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", str,lines);
   13bb6:	55 86       	std	Z+13, r5	; 0x0d
   13bb8:	44 86       	std	Z+12, r4	; 0x0c
   13bba:	e9 ca       	rjmp	.-2606   	; 0x1318e <Read_Config+0x15a>
   13bbc:	80 91 ff 18 	lds	r24, 0x18FF	; 0x8018ff <lines>
   13bc0:	90 91 00 19 	lds	r25, 0x1900	; 0x801900 <lines+0x1>
   13bc4:	ed b7       	in	r30, 0x3d	; 61
   13bc6:	fe b7       	in	r31, 0x3e	; 62
   13bc8:	97 83       	std	Z+7, r25	; 0x07
   13bca:	86 83       	std	Z+6, r24	; 0x06
   13bcc:	95 82       	std	Z+5, r9	; 0x05
   13bce:	84 82       	std	Z+4, r8	; 0x04
   13bd0:	cb 56       	subi	r28, 0x6B	; 107
   13bd2:	de 4f       	sbci	r29, 0xFE	; 254
   13bd4:	28 81       	ld	r18, Y
   13bd6:	39 81       	ldd	r19, Y+1	; 0x01
   13bd8:	4a 81       	ldd	r20, Y+2	; 0x02
   13bda:	c5 59       	subi	r28, 0x95	; 149
   13bdc:	d1 40       	sbci	r29, 0x01	; 1
   13bde:	21 83       	std	Z+1, r18	; 0x01
            }
            break;
#endif // #ifdef AMIGO

        default:
            printf("Fatal Unexpected STATE %d at line:%d\n", state, lines);
   13be0:	32 83       	std	Z+2, r19	; 0x02
   13be2:	43 83       	std	Z+3, r20	; 0x03
   13be4:	1a c0       	rjmp	.+52     	; 0x13c1a <Read_Config+0xbe6>
   13be6:	80 91 ff 18 	lds	r24, 0x18FF	; 0x8018ff <lines>
   13bea:	90 91 00 19 	lds	r25, 0x1900	; 0x801900 <lines+0x1>
   13bee:	ed b7       	in	r30, 0x3d	; 61
   13bf0:	fe b7       	in	r31, 0x3e	; 62
   13bf2:	97 83       	std	Z+7, r25	; 0x07
   13bf4:	86 83       	std	Z+6, r24	; 0x06
   13bf6:	c6 57       	subi	r28, 0x76	; 118
   13bf8:	de 4f       	sbci	r29, 0xFE	; 254
   13bfa:	28 81       	ld	r18, Y
   13bfc:	39 81       	ldd	r19, Y+1	; 0x01
   13bfe:	ca 58       	subi	r28, 0x8A	; 138
   13c00:	d1 40       	sbci	r29, 0x01	; 1
   13c02:	35 83       	std	Z+5, r19	; 0x05
   13c04:	24 83       	std	Z+4, r18	; 0x04
   13c06:	ce 56       	subi	r28, 0x6E	; 110
   13c08:	de 4f       	sbci	r29, 0xFE	; 254
   13c0a:	88 81       	ld	r24, Y
   13c0c:	99 81       	ldd	r25, Y+1	; 0x01
   13c0e:	aa 81       	ldd	r26, Y+2	; 0x02
   13c10:	c2 59       	subi	r28, 0x92	; 146
   13c12:	d1 40       	sbci	r29, 0x01	; 1
   13c14:	81 83       	std	Z+1, r24	; 0x01
   13c16:	92 83       	std	Z+2, r25	; 0x02
            ++errors;
   13c18:	a3 83       	std	Z+3, r26	; 0x03
   13c1a:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
            break;
   13c1e:	ff ef       	ldi	r31, 0xFF	; 255

        } // switch
    } //while
    if(state != START_STATE)
   13c20:	ef 1a       	sub	r14, r31
   13c22:	ff 0a       	sbc	r15, r31
   13c24:	b4 ca       	rjmp	.-2712   	; 0x1318e <Read_Config+0x15a>
   13c26:	c6 57       	subi	r28, 0x76	; 118
   13c28:	de 4f       	sbci	r29, 0xFE	; 254
   13c2a:	88 81       	ld	r24, Y
   13c2c:	99 81       	ldd	r25, Y+1	; 0x01
   13c2e:	ca 58       	subi	r28, 0x8A	; 138
    {
        printf("Missing END statement at line:%d\n", lines);
   13c30:	d1 40       	sbci	r29, 0x01	; 1
   13c32:	89 2b       	or	r24, r25
   13c34:	79 f0       	breq	.+30     	; 0x13c54 <Read_Config+0xc20>
   13c36:	ed b7       	in	r30, 0x3d	; 61
   13c38:	fe b7       	in	r31, 0x3e	; 62
   13c3a:	35 83       	std	Z+5, r19	; 0x05
   13c3c:	24 83       	std	Z+4, r18	; 0x04
   13c3e:	87 ea       	ldi	r24, 0xA7	; 167
   13c40:	99 e1       	ldi	r25, 0x19	; 25
   13c42:	a0 e0       	ldi	r26, 0x00	; 0
   13c44:	81 83       	std	Z+1, r24	; 0x01
   13c46:	92 83       	std	Z+2, r25	; 0x02
        ++errors;
   13c48:	a3 83       	std	Z+3, r26	; 0x03
   13c4a:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    }
    printf("Read_Config: read(%d) lines\n", lines);
   13c4e:	ff ef       	ldi	r31, 0xFF	; 255
   13c50:	ef 1a       	sub	r14, r31
   13c52:	ff 0a       	sbc	r15, r31
   13c54:	80 91 ff 18 	lds	r24, 0x18FF	; 0x8018ff <lines>
   13c58:	90 91 00 19 	lds	r25, 0x1900	; 0x801900 <lines+0x1>
   13c5c:	ed b7       	in	r30, 0x3d	; 61
   13c5e:	fe b7       	in	r31, 0x3e	; 62
   13c60:	95 83       	std	Z+5, r25	; 0x05
   13c62:	84 83       	std	Z+4, r24	; 0x04
   13c64:	8a e8       	ldi	r24, 0x8A	; 138
   13c66:	99 e1       	ldi	r25, 0x19	; 25
   13c68:	a0 e0       	ldi	r26, 0x00	; 0
   13c6a:	81 83       	std	Z+1, r24	; 0x01
   13c6c:	92 83       	std	Z+2, r25	; 0x02
    if(errors)
   13c6e:	a3 83       	std	Z+3, r26	; 0x03
   13c70:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
        printf("Read_Config: ****** errors(%d) ******\n", errors);
   13c74:	e1 14       	cp	r14, r1
   13c76:	f1 04       	cpc	r15, r1
   13c78:	61 f0       	breq	.+24     	; 0x13c92 <Read_Config+0xc5e>
   13c7a:	ed b7       	in	r30, 0x3d	; 61
   13c7c:	fe b7       	in	r31, 0x3e	; 62
   13c7e:	f5 82       	std	Z+5, r15	; 0x05
   13c80:	e4 82       	std	Z+4, r14	; 0x04
   13c82:	83 e6       	ldi	r24, 0x63	; 99
   13c84:	99 e1       	ldi	r25, 0x19	; 25
   13c86:	a0 e0       	ldi	r26, 0x00	; 0
   13c88:	81 83       	std	Z+1, r24	; 0x01

    ret = fclose(cfg);
   13c8a:	92 83       	std	Z+2, r25	; 0x02
   13c8c:	a3 83       	std	Z+3, r26	; 0x03
   13c8e:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   13c92:	c0 57       	subi	r28, 0x70	; 112
   13c94:	de 4f       	sbci	r29, 0xFE	; 254
   13c96:	88 81       	ld	r24, Y
   13c98:	99 81       	ldd	r25, Y+1	; 0x01
    if(ret == EOF)
   13c9a:	c0 59       	subi	r28, 0x90	; 144
   13c9c:	d1 40       	sbci	r29, 0x01	; 1
    {
        perror("Read_Config - close error");
   13c9e:	0e 94 6e 7e 	call	0xfcdc	; 0xfcdc <fclose>
   13ca2:	01 96       	adiw	r24, 0x01	; 1
   13ca4:	39 f4       	brne	.+14     	; 0x13cb4 <Read_Config+0xc80>
        ++errors;
   13ca6:	8b e5       	ldi	r24, 0x5B	; 91
   13ca8:	9f e0       	ldi	r25, 0x0F	; 15
   13caa:	0e 94 f5 79 	call	0xf3ea	; 0xf3ea <perror>
    }

	// Post process device values
	Post_Config();
   13cae:	2f ef       	ldi	r18, 0xFF	; 255

    return(errors);
   13cb0:	e2 1a       	sub	r14, r18
}
   13cb2:	f2 0a       	sbc	r15, r18
   13cb4:	29 d9       	rcall	.-3502   	; 0x12f08 <Post_Config>
   13cb6:	c7 01       	movw	r24, r14
   13cb8:	cd 55       	subi	r28, 0x5D	; 93
   13cba:	de 4f       	sbci	r29, 0xFE	; 254
   13cbc:	e2 e1       	ldi	r30, 0x12	; 18
   13cbe:	0c 94 35 e5 	jmp	0x1ca6a	; 0x1ca6a <__epilogue_restores__>

00013cc2 <print_var_P>:
/// @brief Display Configuration File variable
/// @param str: title
/// @param val: variable value
/// @return  void
void print_var_P(__memx const char *str, uint32_t val)
{
   13cc2:	8f 92       	push	r8
   13cc4:	9f 92       	push	r9
   13cc6:	af 92       	push	r10
   13cc8:	bf 92       	push	r11
   13cca:	cf 92       	push	r12
   13ccc:	df 92       	push	r13
   13cce:	ef 92       	push	r14
   13cd0:	0f 93       	push	r16
   13cd2:	1f 93       	push	r17
   13cd4:	cf 93       	push	r28
   13cd6:	df 93       	push	r29
   13cd8:	cd b7       	in	r28, 0x3d	; 61
   13cda:	de b7       	in	r29, 0x3e	; 62
   13cdc:	cd 54       	subi	r28, 0x4D	; 77
   13cde:	d1 09       	sbc	r29, r1
   13ce0:	0f b6       	in	r0, 0x3f	; 63
   13ce2:	f8 94       	cli
   13ce4:	de bf       	out	0x3e, r29	; 62
   13ce6:	0f be       	out	0x3f, r0	; 63
   13ce8:	cd bf       	out	0x3d, r28	; 61
   13cea:	6b 01       	movw	r12, r22
   13cec:	e8 2e       	mov	r14, r24
   13cee:	49 01       	movw	r8, r18
   13cf0:	5a 01       	movw	r10, r20
   13cf2:	de 01       	movw	r26, r28
   13cf4:	1e 96       	adiw	r26, 0x0e	; 14
    char tmp[64];
    int i=0;
   13cf6:	80 e0       	ldi	r24, 0x00	; 0
   13cf8:	90 e0       	ldi	r25, 0x00	; 0
   13cfa:	8d 01       	movw	r16, r26
    while( *str && i < 62)
   13cfc:	f6 01       	movw	r30, r12
   13cfe:	5e 2d       	mov	r21, r14
   13d00:	0e 94 50 e5 	call	0x1caa0	; 0x1caa0 <__xload_1>
   13d04:	66 23       	and	r22, r22
   13d06:	51 f0       	breq	.+20     	; 0x13d1c <print_var_P+0x5a>
   13d08:	8e 33       	cpi	r24, 0x3E	; 62
   13d0a:	91 05       	cpc	r25, r1
   13d0c:	39 f0       	breq	.+14     	; 0x13d1c <print_var_P+0x5a>
        tmp[i++] = *str++;
   13d0e:	01 96       	adiw	r24, 0x01	; 1
   13d10:	2f ef       	ldi	r18, 0xFF	; 255
   13d12:	c2 1a       	sub	r12, r18
   13d14:	d2 0a       	sbc	r13, r18
   13d16:	e2 0a       	sbc	r14, r18
   13d18:	6d 93       	st	X+, r22
   13d1a:	f0 cf       	rjmp	.-32     	; 0x13cfc <print_var_P+0x3a>
    tmp[i++] = 0;
   13d1c:	f8 01       	movw	r30, r16
   13d1e:	e8 0f       	add	r30, r24
   13d20:	f9 1f       	adc	r31, r25
   13d22:	10 82       	st	Z, r1

    printf("    %-25s = %8lxH (%ld)\n", tmp, val, val); 
   13d24:	ed b7       	in	r30, 0x3d	; 61
   13d26:	fe b7       	in	r31, 0x3e	; 62
   13d28:	82 86       	std	Z+10, r8	; 0x0a
   13d2a:	93 86       	std	Z+11, r9	; 0x0b
   13d2c:	a4 86       	std	Z+12, r10	; 0x0c
   13d2e:	b5 86       	std	Z+13, r11	; 0x0d
   13d30:	86 82       	std	Z+6, r8	; 0x06
   13d32:	97 82       	std	Z+7, r9	; 0x07
   13d34:	a0 86       	std	Z+8, r10	; 0x08
   13d36:	b1 86       	std	Z+9, r11	; 0x09
   13d38:	15 83       	std	Z+5, r17	; 0x05
   13d3a:	04 83       	std	Z+4, r16	; 0x04
   13d3c:	8a e4       	ldi	r24, 0x4A	; 74
   13d3e:	99 e1       	ldi	r25, 0x19	; 25
   13d40:	a0 e0       	ldi	r26, 0x00	; 0
   13d42:	81 83       	std	Z+1, r24	; 0x01
   13d44:	92 83       	std	Z+2, r25	; 0x02
   13d46:	a3 83       	std	Z+3, r26	; 0x03
   13d48:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
}
   13d4c:	c3 5b       	subi	r28, 0xB3	; 179
   13d4e:	df 4f       	sbci	r29, 0xFF	; 255
   13d50:	0f b6       	in	r0, 0x3f	; 63
   13d52:	f8 94       	cli
   13d54:	de bf       	out	0x3e, r29	; 62
   13d56:	0f be       	out	0x3f, r0	; 63
   13d58:	cd bf       	out	0x3d, r28	; 61
   13d5a:	df 91       	pop	r29
   13d5c:	cf 91       	pop	r28
   13d5e:	1f 91       	pop	r17
   13d60:	0f 91       	pop	r16
   13d62:	ef 90       	pop	r14
   13d64:	df 90       	pop	r13
   13d66:	cf 90       	pop	r12
   13d68:	bf 90       	pop	r11
   13d6a:	af 90       	pop	r10
   13d6c:	9f 90       	pop	r9
   13d6e:	8f 90       	pop	r8
   13d70:	08 95       	ret

00013d72 <print_str_P>:
/// @brief Display Configuration File string
/// @param *str: title
/// @param *arg: string
/// @return  void
void print_str_P(__memx const char *str, char *arg)
{
   13d72:	cf 92       	push	r12
   13d74:	df 92       	push	r13
   13d76:	ef 92       	push	r14
   13d78:	0f 93       	push	r16
   13d7a:	1f 93       	push	r17
   13d7c:	cf 93       	push	r28
   13d7e:	df 93       	push	r29
   13d80:	cd b7       	in	r28, 0x3d	; 61
   13d82:	de b7       	in	r29, 0x3e	; 62
   13d84:	c7 54       	subi	r28, 0x47	; 71
   13d86:	d1 09       	sbc	r29, r1
   13d88:	0f b6       	in	r0, 0x3f	; 63
   13d8a:	f8 94       	cli
   13d8c:	de bf       	out	0x3e, r29	; 62
   13d8e:	0f be       	out	0x3f, r0	; 63
   13d90:	cd bf       	out	0x3d, r28	; 61
   13d92:	6b 01       	movw	r12, r22
   13d94:	e8 2e       	mov	r14, r24
   13d96:	8a 01       	movw	r16, r20
   13d98:	de 01       	movw	r26, r28
   13d9a:	18 96       	adiw	r26, 0x08	; 8
    char tmp[64];
    int i=0;
   13d9c:	80 e0       	ldi	r24, 0x00	; 0
   13d9e:	90 e0       	ldi	r25, 0x00	; 0
   13da0:	9d 01       	movw	r18, r26
    while( *str && i < 62)
   13da2:	f6 01       	movw	r30, r12
   13da4:	5e 2d       	mov	r21, r14
   13da6:	0e 94 50 e5 	call	0x1caa0	; 0x1caa0 <__xload_1>
   13daa:	66 23       	and	r22, r22
   13dac:	51 f0       	breq	.+20     	; 0x13dc2 <print_str_P+0x50>
   13dae:	8e 33       	cpi	r24, 0x3E	; 62
   13db0:	91 05       	cpc	r25, r1
   13db2:	39 f0       	breq	.+14     	; 0x13dc2 <print_str_P+0x50>
        tmp[i++] = *str++;
   13db4:	01 96       	adiw	r24, 0x01	; 1
   13db6:	4f ef       	ldi	r20, 0xFF	; 255
   13db8:	c4 1a       	sub	r12, r20
   13dba:	d4 0a       	sbc	r13, r20
   13dbc:	e4 0a       	sbc	r14, r20
   13dbe:	6d 93       	st	X+, r22
   13dc0:	f0 cf       	rjmp	.-32     	; 0x13da2 <print_str_P+0x30>
    tmp[i++] = 0;
   13dc2:	f9 01       	movw	r30, r18
   13dc4:	e8 0f       	add	r30, r24
   13dc6:	f9 1f       	adc	r31, r25
   13dc8:	10 82       	st	Z, r1
    printf("    %-25s = \"%s\"\n", tmp, arg);   
   13dca:	ed b7       	in	r30, 0x3d	; 61
   13dcc:	fe b7       	in	r31, 0x3e	; 62
   13dce:	17 83       	std	Z+7, r17	; 0x07
   13dd0:	06 83       	std	Z+6, r16	; 0x06
   13dd2:	35 83       	std	Z+5, r19	; 0x05
   13dd4:	24 83       	std	Z+4, r18	; 0x04
   13dd6:	88 e3       	ldi	r24, 0x38	; 56
   13dd8:	99 e1       	ldi	r25, 0x19	; 25
   13dda:	a0 e0       	ldi	r26, 0x00	; 0
   13ddc:	81 83       	std	Z+1, r24	; 0x01
   13dde:	92 83       	std	Z+2, r25	; 0x02
   13de0:	a3 83       	std	Z+3, r26	; 0x03
   13de2:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
}
   13de6:	c9 5b       	subi	r28, 0xB9	; 185
   13de8:	df 4f       	sbci	r29, 0xFF	; 255
   13dea:	0f b6       	in	r0, 0x3f	; 63
   13dec:	f8 94       	cli
   13dee:	de bf       	out	0x3e, r29	; 62
   13df0:	0f be       	out	0x3f, r0	; 63
   13df2:	cd bf       	out	0x3d, r28	; 61
   13df4:	df 91       	pop	r29
   13df6:	cf 91       	pop	r28
   13df8:	1f 91       	pop	r17
   13dfa:	0f 91       	pop	r16
   13dfc:	ef 90       	pop	r14
   13dfe:	df 90       	pop	r13
   13e00:	cf 90       	pop	r12
   13e02:	08 95       	ret

00013e04 <display_Addresses>:

/// ===============================================
/// @brief Display Configuration device address saummary
/// @return  void
void display_Addresses()
{
   13e04:	2f 92       	push	r2
   13e06:	3f 92       	push	r3
   13e08:	4f 92       	push	r4
   13e0a:	6f 92       	push	r6
   13e0c:	7f 92       	push	r7
   13e0e:	8f 92       	push	r8
   13e10:	af 92       	push	r10
   13e12:	bf 92       	push	r11
   13e14:	cf 92       	push	r12
   13e16:	df 92       	push	r13
   13e18:	ef 92       	push	r14
   13e1a:	0f 93       	push	r16
   13e1c:	1f 93       	push	r17
   13e1e:	cf 93       	push	r28
   13e20:	df 93       	push	r29
   13e22:	cd b7       	in	r28, 0x3d	; 61
   13e24:	de b7       	in	r29, 0x3e	; 62
   13e26:	60 97       	sbiw	r28, 0x10	; 16
   13e28:	0f b6       	in	r0, 0x3f	; 63
   13e2a:	f8 94       	cli
   13e2c:	de bf       	out	0x3e, r29	; 62
   13e2e:	0f be       	out	0x3f, r0	; 63
   13e30:	cd bf       	out	0x3d, r28	; 61
    int i;
    int address;
    printf("Listen and Talk Address Settings\n");
   13e32:	86 e1       	ldi	r24, 0x16	; 22
   13e34:	99 e1       	ldi	r25, 0x19	; 25
   13e36:	a0 e0       	ldi	r26, 0x00	; 0
   13e38:	ed b7       	in	r30, 0x3d	; 61
   13e3a:	fe b7       	in	r31, 0x3e	; 62
   13e3c:	81 83       	std	Z+1, r24	; 0x01
   13e3e:	92 83       	std	Z+2, r25	; 0x02
   13e40:	a3 83       	std	Z+3, r26	; 0x03
   13e42:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   13e46:	0c e8       	ldi	r16, 0x8C	; 140
   13e48:	1e e1       	ldi	r17, 0x1E	; 30
            printf("  AMIGO_MSA   = %02XH\n",BASE_MSA + address );
        }
#endif
        if(Devices[i].TYPE == PRINTER_TYPE )
        {
            printf("  PRINTER_MLA = %02XH\n",BASE_MLA + address );
   13e4a:	85 e7       	ldi	r24, 0x75	; 117
   13e4c:	98 e1       	ldi	r25, 0x18	; 24
   13e4e:	9c 01       	movw	r18, r24
   13e50:	40 e0       	ldi	r20, 0x00	; 0
   13e52:	2e 83       	std	Y+6, r18	; 0x06
   13e54:	3f 83       	std	Y+7, r19	; 0x07
   13e56:	48 87       	std	Y+8, r20	; 0x08
            printf("  PRINTER_MTA = %02XH\n",BASE_MTA + address );
   13e58:	8e e5       	ldi	r24, 0x5E	; 94
   13e5a:	98 e1       	ldi	r25, 0x18	; 24
   13e5c:	9c 01       	movw	r18, r24
   13e5e:	40 e0       	ldi	r20, 0x00	; 0
   13e60:	29 87       	std	Y+9, r18	; 0x09
   13e62:	3a 87       	std	Y+10, r19	; 0x0a
   13e64:	4b 87       	std	Y+11, r20	; 0x0b
            printf("  PRINTER_MSA = %02XH\n",BASE_MSA + address );
   13e66:	87 e4       	ldi	r24, 0x47	; 71
   13e68:	98 e1       	ldi	r25, 0x18	; 24
   13e6a:	6c 01       	movw	r12, r24
   13e6c:	e1 2c       	mov	r14, r1
            printf("  SS80_MSA    = %02XH\n",BASE_MSA + address );
        }
#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
        {
            printf("  AMIGO_MLA   = %02XH\n",BASE_MLA + address );
   13e6e:	8a eb       	ldi	r24, 0xBA	; 186
   13e70:	98 e1       	ldi	r25, 0x18	; 24
   13e72:	3c 01       	movw	r6, r24
   13e74:	81 2c       	mov	r8, r1
            printf("  AMIGO_MTA   = %02XH\n",BASE_MTA + address );
   13e76:	83 ea       	ldi	r24, 0xA3	; 163
   13e78:	98 e1       	ldi	r25, 0x18	; 24
   13e7a:	1c 01       	movw	r2, r24
   13e7c:	41 2c       	mov	r4, r1
            printf("  AMIGO_MSA   = %02XH\n",BASE_MSA + address );
   13e7e:	8c e8       	ldi	r24, 0x8C	; 140
   13e80:	98 e1       	ldi	r25, 0x18	; 24
   13e82:	9c 01       	movw	r18, r24
   13e84:	40 e0       	ldi	r20, 0x00	; 0
   13e86:	2c 87       	std	Y+12, r18	; 0x0c
   13e88:	3d 87       	std	Y+13, r19	; 0x0d
   13e8a:	4e 87       	std	Y+14, r20	; 0x0e
            continue;
        address = Devices[i].ADDRESS;

        if(Devices[i].TYPE == SS80_TYPE)
        {
            printf("  SS80_MLA    = %02XH\n",BASE_MLA + address );
   13e8c:	8f ef       	ldi	r24, 0xFF	; 255
   13e8e:	a8 2e       	mov	r10, r24
   13e90:	88 e1       	ldi	r24, 0x18	; 24
   13e92:	b8 2e       	mov	r11, r24
    int i;
    int address;
    printf("Listen and Talk Address Settings\n");
    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   13e94:	f8 01       	movw	r30, r16
   13e96:	80 81       	ld	r24, Z
   13e98:	88 23       	and	r24, r24
   13e9a:	09 f4       	brne	.+2      	; 0x13e9e <display_Addresses+0x9a>
   13e9c:	91 c0       	rjmp	.+290    	; 0x13fc0 <display_Addresses+0x1bc>
            continue;
        address = Devices[i].ADDRESS;
   13e9e:	f1 81       	ldd	r31, Z+1	; 0x01
   13ea0:	2f 2f       	mov	r18, r31
   13ea2:	30 e0       	ldi	r19, 0x00	; 0
   13ea4:	38 8b       	std	Y+16, r19	; 0x10
   13ea6:	2f 87       	std	Y+15, r18	; 0x0f

        if(Devices[i].TYPE == SS80_TYPE)
   13ea8:	83 30       	cpi	r24, 0x03	; 3
   13eaa:	69 f5       	brne	.+90     	; 0x13f06 <display_Addresses+0x102>
        {
            printf("  SS80_MLA    = %02XH\n",BASE_MLA + address );
   13eac:	c9 01       	movw	r24, r18
   13eae:	80 96       	adiw	r24, 0x20	; 32
   13eb0:	ed b7       	in	r30, 0x3d	; 61
   13eb2:	fe b7       	in	r31, 0x3e	; 62
   13eb4:	95 83       	std	Z+5, r25	; 0x05
   13eb6:	84 83       	std	Z+4, r24	; 0x04
   13eb8:	c5 01       	movw	r24, r10
   13eba:	a0 e0       	ldi	r26, 0x00	; 0
   13ebc:	81 83       	std	Z+1, r24	; 0x01
   13ebe:	92 83       	std	Z+2, r25	; 0x02
   13ec0:	a3 83       	std	Z+3, r26	; 0x03
   13ec2:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
            printf("  SS80_MTA    = %02XH\n",BASE_MTA + address );
   13ec6:	8f 85       	ldd	r24, Y+15	; 0x0f
   13ec8:	98 89       	ldd	r25, Y+16	; 0x10
   13eca:	80 5c       	subi	r24, 0xC0	; 192
   13ecc:	9f 4f       	sbci	r25, 0xFF	; 255
   13ece:	ed b7       	in	r30, 0x3d	; 61
   13ed0:	fe b7       	in	r31, 0x3e	; 62
   13ed2:	95 83       	std	Z+5, r25	; 0x05
   13ed4:	84 83       	std	Z+4, r24	; 0x04
   13ed6:	88 ee       	ldi	r24, 0xE8	; 232
   13ed8:	98 e1       	ldi	r25, 0x18	; 24
   13eda:	a0 e0       	ldi	r26, 0x00	; 0
   13edc:	81 83       	std	Z+1, r24	; 0x01
   13ede:	92 83       	std	Z+2, r25	; 0x02
   13ee0:	a3 83       	std	Z+3, r26	; 0x03
   13ee2:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
            printf("  SS80_MSA    = %02XH\n",BASE_MSA + address );
   13ee6:	8f 85       	ldd	r24, Y+15	; 0x0f
   13ee8:	98 89       	ldd	r25, Y+16	; 0x10
   13eea:	80 5a       	subi	r24, 0xA0	; 160
   13eec:	9f 4f       	sbci	r25, 0xFF	; 255
   13eee:	ed b7       	in	r30, 0x3d	; 61
   13ef0:	fe b7       	in	r31, 0x3e	; 62
   13ef2:	95 83       	std	Z+5, r25	; 0x05
   13ef4:	84 83       	std	Z+4, r24	; 0x04
   13ef6:	81 ed       	ldi	r24, 0xD1	; 209
   13ef8:	98 e1       	ldi	r25, 0x18	; 24
   13efa:	a0 e0       	ldi	r26, 0x00	; 0
   13efc:	81 83       	std	Z+1, r24	; 0x01
   13efe:	92 83       	std	Z+2, r25	; 0x02
   13f00:	a3 83       	std	Z+3, r26	; 0x03
   13f02:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
        }
#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   13f06:	f8 01       	movw	r30, r16
   13f08:	80 81       	ld	r24, Z
   13f0a:	81 30       	cpi	r24, 0x01	; 1
   13f0c:	49 f5       	brne	.+82     	; 0x13f60 <display_Addresses+0x15c>
        {
            printf("  AMIGO_MLA   = %02XH\n",BASE_MLA + address );
   13f0e:	8f 85       	ldd	r24, Y+15	; 0x0f
   13f10:	98 89       	ldd	r25, Y+16	; 0x10
   13f12:	80 96       	adiw	r24, 0x20	; 32
   13f14:	ed b7       	in	r30, 0x3d	; 61
   13f16:	fe b7       	in	r31, 0x3e	; 62
   13f18:	95 83       	std	Z+5, r25	; 0x05
   13f1a:	84 83       	std	Z+4, r24	; 0x04
   13f1c:	61 82       	std	Z+1, r6	; 0x01
   13f1e:	72 82       	std	Z+2, r7	; 0x02
   13f20:	83 82       	std	Z+3, r8	; 0x03
   13f22:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
            printf("  AMIGO_MTA   = %02XH\n",BASE_MTA + address );
   13f26:	8f 85       	ldd	r24, Y+15	; 0x0f
   13f28:	98 89       	ldd	r25, Y+16	; 0x10
   13f2a:	80 5c       	subi	r24, 0xC0	; 192
   13f2c:	9f 4f       	sbci	r25, 0xFF	; 255
   13f2e:	ed b7       	in	r30, 0x3d	; 61
   13f30:	fe b7       	in	r31, 0x3e	; 62
   13f32:	95 83       	std	Z+5, r25	; 0x05
   13f34:	84 83       	std	Z+4, r24	; 0x04
   13f36:	21 82       	std	Z+1, r2	; 0x01
   13f38:	32 82       	std	Z+2, r3	; 0x02
   13f3a:	43 82       	std	Z+3, r4	; 0x03
   13f3c:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
            printf("  AMIGO_MSA   = %02XH\n",BASE_MSA + address );
   13f40:	8f 85       	ldd	r24, Y+15	; 0x0f
   13f42:	98 89       	ldd	r25, Y+16	; 0x10
   13f44:	80 5a       	subi	r24, 0xA0	; 160
   13f46:	9f 4f       	sbci	r25, 0xFF	; 255
   13f48:	ed b7       	in	r30, 0x3d	; 61
   13f4a:	fe b7       	in	r31, 0x3e	; 62
   13f4c:	95 83       	std	Z+5, r25	; 0x05
   13f4e:	84 83       	std	Z+4, r24	; 0x04
   13f50:	2c 85       	ldd	r18, Y+12	; 0x0c
   13f52:	3d 85       	ldd	r19, Y+13	; 0x0d
   13f54:	4e 85       	ldd	r20, Y+14	; 0x0e
   13f56:	21 83       	std	Z+1, r18	; 0x01
   13f58:	32 83       	std	Z+2, r19	; 0x02
   13f5a:	43 83       	std	Z+3, r20	; 0x03
   13f5c:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
        }
#endif
        if(Devices[i].TYPE == PRINTER_TYPE )
   13f60:	f8 01       	movw	r30, r16
   13f62:	80 81       	ld	r24, Z
   13f64:	84 30       	cpi	r24, 0x04	; 4
   13f66:	61 f5       	brne	.+88     	; 0x13fc0 <display_Addresses+0x1bc>
        {
            printf("  PRINTER_MLA = %02XH\n",BASE_MLA + address );
   13f68:	8f 85       	ldd	r24, Y+15	; 0x0f
   13f6a:	98 89       	ldd	r25, Y+16	; 0x10
   13f6c:	80 96       	adiw	r24, 0x20	; 32
   13f6e:	ed b7       	in	r30, 0x3d	; 61
   13f70:	fe b7       	in	r31, 0x3e	; 62
   13f72:	95 83       	std	Z+5, r25	; 0x05
   13f74:	84 83       	std	Z+4, r24	; 0x04
   13f76:	2e 81       	ldd	r18, Y+6	; 0x06
   13f78:	3f 81       	ldd	r19, Y+7	; 0x07
   13f7a:	48 85       	ldd	r20, Y+8	; 0x08
   13f7c:	21 83       	std	Z+1, r18	; 0x01
   13f7e:	32 83       	std	Z+2, r19	; 0x02
   13f80:	43 83       	std	Z+3, r20	; 0x03
   13f82:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
            printf("  PRINTER_MTA = %02XH\n",BASE_MTA + address );
   13f86:	8f 85       	ldd	r24, Y+15	; 0x0f
   13f88:	98 89       	ldd	r25, Y+16	; 0x10
   13f8a:	80 5c       	subi	r24, 0xC0	; 192
   13f8c:	9f 4f       	sbci	r25, 0xFF	; 255
   13f8e:	ed b7       	in	r30, 0x3d	; 61
   13f90:	fe b7       	in	r31, 0x3e	; 62
   13f92:	95 83       	std	Z+5, r25	; 0x05
   13f94:	84 83       	std	Z+4, r24	; 0x04
   13f96:	29 85       	ldd	r18, Y+9	; 0x09
   13f98:	3a 85       	ldd	r19, Y+10	; 0x0a
   13f9a:	4b 85       	ldd	r20, Y+11	; 0x0b
   13f9c:	21 83       	std	Z+1, r18	; 0x01
   13f9e:	32 83       	std	Z+2, r19	; 0x02
   13fa0:	43 83       	std	Z+3, r20	; 0x03
   13fa2:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
            printf("  PRINTER_MSA = %02XH\n",BASE_MSA + address );
   13fa6:	2f 85       	ldd	r18, Y+15	; 0x0f
   13fa8:	38 89       	ldd	r19, Y+16	; 0x10
   13faa:	20 5a       	subi	r18, 0xA0	; 160
   13fac:	3f 4f       	sbci	r19, 0xFF	; 255
   13fae:	ed b7       	in	r30, 0x3d	; 61
   13fb0:	fe b7       	in	r31, 0x3e	; 62
   13fb2:	35 83       	std	Z+5, r19	; 0x05
   13fb4:	24 83       	std	Z+4, r18	; 0x04
   13fb6:	c1 82       	std	Z+1, r12	; 0x01
   13fb8:	d2 82       	std	Z+2, r13	; 0x02
   13fba:	e3 82       	std	Z+3, r14	; 0x03
   13fbc:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   13fc0:	05 5d       	subi	r16, 0xD5	; 213
   13fc2:	1f 4f       	sbci	r17, 0xFF	; 255
void display_Addresses()
{
    int i;
    int address;
    printf("Listen and Talk Address Settings\n");
    for(i=0;i<MAX_DEVICES;++i)
   13fc4:	f0 e2       	ldi	r31, 0x20	; 32
   13fc6:	00 39       	cpi	r16, 0x90	; 144
   13fc8:	1f 07       	cpc	r17, r31
   13fca:	09 f0       	breq	.+2      	; 0x13fce <display_Addresses+0x1ca>
   13fcc:	63 cf       	rjmp	.-314    	; 0x13e94 <display_Addresses+0x90>
            printf("  PRINTER_MLA = %02XH\n",BASE_MLA + address );
            printf("  PRINTER_MTA = %02XH\n",BASE_MTA + address );
            printf("  PRINTER_MSA = %02XH\n",BASE_MSA + address );
        }
    }
    printf("\n");
   13fce:	85 e4       	ldi	r24, 0x45	; 69
   13fd0:	98 e1       	ldi	r25, 0x18	; 24
   13fd2:	a0 e0       	ldi	r26, 0x00	; 0
   13fd4:	ed b7       	in	r30, 0x3d	; 61
   13fd6:	fe b7       	in	r31, 0x3e	; 62
   13fd8:	81 83       	std	Z+1, r24	; 0x01
   13fda:	92 83       	std	Z+2, r25	; 0x02
   13fdc:	a3 83       	std	Z+3, r26	; 0x03
   13fde:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
}
   13fe2:	60 96       	adiw	r28, 0x10	; 16
   13fe4:	0f b6       	in	r0, 0x3f	; 63
   13fe6:	f8 94       	cli
   13fe8:	de bf       	out	0x3e, r29	; 62
   13fea:	0f be       	out	0x3f, r0	; 63
   13fec:	cd bf       	out	0x3d, r28	; 61
   13fee:	df 91       	pop	r29
   13ff0:	cf 91       	pop	r28
   13ff2:	1f 91       	pop	r17
   13ff4:	0f 91       	pop	r16
   13ff6:	ef 90       	pop	r14
   13ff8:	df 90       	pop	r13
   13ffa:	cf 90       	pop	r12
   13ffc:	bf 90       	pop	r11
   13ffe:	af 90       	pop	r10
   14000:	8f 90       	pop	r8
   14002:	7f 90       	pop	r7
   14004:	6f 90       	pop	r6
   14006:	4f 90       	pop	r4
   14008:	3f 90       	pop	r3
   1400a:	2f 90       	pop	r2
   1400c:	08 95       	ret

0001400e <display_Config>:

/// ===============================================
/// @brief Display current Configuration File values
/// @return  void
void display_Config( int verbose)
{
   1400e:	2f 92       	push	r2
   14010:	3f 92       	push	r3
   14012:	4f 92       	push	r4
   14014:	6f 92       	push	r6
   14016:	7f 92       	push	r7
   14018:	8f 92       	push	r8
   1401a:	af 92       	push	r10
   1401c:	bf 92       	push	r11
   1401e:	cf 92       	push	r12
   14020:	df 92       	push	r13
   14022:	ef 92       	push	r14
   14024:	0f 93       	push	r16
   14026:	1f 93       	push	r17
   14028:	cf 93       	push	r28
   1402a:	df 93       	push	r29
   1402c:	cd b7       	in	r28, 0x3d	; 61
   1402e:	de b7       	in	r29, 0x3e	; 62
   14030:	60 97       	sbiw	r28, 0x10	; 16
   14032:	0f b6       	in	r0, 0x3f	; 63
   14034:	f8 94       	cli
   14036:	de bf       	out	0x3e, r29	; 62
   14038:	0f be       	out	0x3f, r0	; 63
   1403a:	cd bf       	out	0x3d, r28	; 61
   1403c:	5c 01       	movw	r10, r24
#ifdef AMIGO
    ///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    printf("Current Configuration Settings\n");
   1403e:	85 e2       	ldi	r24, 0x25	; 37
   14040:	98 e1       	ldi	r25, 0x18	; 24
   14042:	a0 e0       	ldi	r26, 0x00	; 0
   14044:	ed b7       	in	r30, 0x3d	; 61
   14046:	fe b7       	in	r31, 0x3e	; 62
   14048:	81 83       	std	Z+1, r24	; 0x01
   1404a:	92 83       	std	Z+2, r25	; 0x02
   1404c:	a3 83       	std	Z+3, r26	; 0x03
   1404e:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   14052:	0c e8       	ldi	r16, 0x8C	; 140
   14054:	1e e1       	ldi	r17, 0x1E	; 30
            printf("PRINTER\n");
            printf("  CONFIG\n");
                print_var("ADDRESS", (uint32_t) PRINTERp->HEADER.ADDRESS);
			printf("  END\n");
        }
		printf("END\n");
   14056:	8b e9       	ldi	r24, 0x9B	; 155
   14058:	95 e1       	ldi	r25, 0x15	; 21
   1405a:	9c 01       	movw	r18, r24
   1405c:	40 e0       	ldi	r20, 0x00	; 0
   1405e:	2e 83       	std	Y+6, r18	; 0x06
   14060:	3f 83       	std	Y+7, r19	; 0x07
   14062:	48 87       	std	Y+8, r20	; 0x08
		printf("\n");
   14064:	89 e9       	ldi	r24, 0x99	; 153
   14066:	95 e1       	ldi	r25, 0x15	; 21
   14068:	9c 01       	movw	r18, r24
   1406a:	40 e0       	ldi	r20, 0x00	; 0
   1406c:	29 87       	std	Y+9, r18	; 0x09
   1406e:	3a 87       	std	Y+10, r19	; 0x0a
   14070:	4b 87       	std	Y+11, r20	; 0x0b

        if(Devices[i].TYPE == PRINTER_TYPE )
        {
            PRINTERp= (PRINTERDeviceType *)Devices[i].dev;

            printf("PRINTER\n");
   14072:	89 eb       	ldi	r24, 0xB9	; 185
   14074:	95 e1       	ldi	r25, 0x15	; 21
   14076:	9c 01       	movw	r18, r24
   14078:	40 e0       	ldi	r20, 0x00	; 0
   1407a:	2c 87       	std	Y+12, r18	; 0x0c
   1407c:	3d 87       	std	Y+13, r19	; 0x0d
   1407e:	4e 87       	std	Y+14, r20	; 0x0e
            printf("  CONFIG\n");
   14080:	8f ea       	ldi	r24, 0xAF	; 175
   14082:	95 e1       	ldi	r25, 0x15	; 21
   14084:	1c 01       	movw	r2, r24
   14086:	41 2c       	mov	r4, r1
                print_var("ADDRESS", (uint32_t) PRINTERp->HEADER.ADDRESS);
   14088:	87 ea       	ldi	r24, 0xA7	; 167
   1408a:	95 e1       	ldi	r25, 0x15	; 21
   1408c:	6c 01       	movw	r12, r24
   1408e:	e1 2c       	mov	r14, r1
			printf("  END\n");
   14090:	80 ea       	ldi	r24, 0xA0	; 160
   14092:	95 e1       	ldi	r25, 0x15	; 21
   14094:	3c 01       	movw	r6, r24
   14096:	81 2c       	mov	r8, r1
#endif

    printf("Current Configuration Settings\n");
    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   14098:	f8 01       	movw	r30, r16
   1409a:	80 81       	ld	r24, Z
   1409c:	88 23       	and	r24, r24
   1409e:	09 f4       	brne	.+2      	; 0x140a2 <display_Config+0x94>
   140a0:	a2 c2       	rjmp	.+1348   	; 0x145e6 <display_Config+0x5d8>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   140a2:	83 30       	cpi	r24, 0x03	; 3
   140a4:	09 f0       	breq	.+2      	; 0x140a8 <display_Config+0x9a>
   140a6:	91 c1       	rjmp	.+802    	; 0x143ca <display_Config+0x3bc>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   140a8:	27 a1       	ldd	r18, Z+39	; 0x27
   140aa:	30 a5       	ldd	r19, Z+40	; 0x28
   140ac:	38 8b       	std	Y+16, r19	; 0x10
   140ae:	2f 87       	std	Y+15, r18	; 0x0f

            printf("SS80 %s\n", Devices[i].model);
   140b0:	c8 01       	movw	r24, r16
   140b2:	07 96       	adiw	r24, 0x07	; 7
   140b4:	ed b7       	in	r30, 0x3d	; 61
   140b6:	fe b7       	in	r31, 0x3e	; 62
   140b8:	95 83       	std	Z+5, r25	; 0x05
   140ba:	84 83       	std	Z+4, r24	; 0x04
   140bc:	8c e1       	ldi	r24, 0x1C	; 28
   140be:	98 e1       	ldi	r25, 0x18	; 24
   140c0:	a0 e0       	ldi	r26, 0x00	; 0
   140c2:	81 83       	std	Z+1, r24	; 0x01
   140c4:	92 83       	std	Z+2, r25	; 0x02
   140c6:	a3 83       	std	Z+3, r26	; 0x03
   140c8:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
			printf("  # HP85 BASIC ADDRESS :D7%d0\n", (int) SS80p->HEADER.ADDRESS);
   140cc:	ef 85       	ldd	r30, Y+15	; 0x0f
   140ce:	f8 89       	ldd	r31, Y+16	; 0x10
   140d0:	80 81       	ld	r24, Z
   140d2:	90 e0       	ldi	r25, 0x00	; 0
   140d4:	ed b7       	in	r30, 0x3d	; 61
   140d6:	fe b7       	in	r31, 0x3e	; 62
   140d8:	95 83       	std	Z+5, r25	; 0x05
   140da:	84 83       	std	Z+4, r24	; 0x04
   140dc:	8d ef       	ldi	r24, 0xFD	; 253
   140de:	97 e1       	ldi	r25, 0x17	; 23
   140e0:	a0 e0       	ldi	r26, 0x00	; 0
   140e2:	81 83       	std	Z+1, r24	; 0x01
   140e4:	92 83       	std	Z+2, r25	; 0x02
   140e6:	a3 83       	std	Z+3, r26	; 0x03
   140e8:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
            printf("  CONFIG\n");
   140ec:	83 ef       	ldi	r24, 0xF3	; 243
   140ee:	97 e1       	ldi	r25, 0x17	; 23
   140f0:	a0 e0       	ldi	r26, 0x00	; 0
   140f2:	ed b7       	in	r30, 0x3d	; 61
   140f4:	fe b7       	in	r31, 0x3e	; 62
   140f6:	81 83       	std	Z+1, r24	; 0x01
   140f8:	92 83       	std	Z+2, r25	; 0x02
   140fa:	a3 83       	std	Z+3, r26	; 0x03
   140fc:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
                print_var("ADDRESS", (uint32_t) SS80p->HEADER.ADDRESS);
   14100:	ef 85       	ldd	r30, Y+15	; 0x0f
   14102:	f8 89       	ldd	r31, Y+16	; 0x10
   14104:	20 81       	ld	r18, Z
   14106:	30 e0       	ldi	r19, 0x00	; 0
   14108:	40 e0       	ldi	r20, 0x00	; 0
   1410a:	50 e0       	ldi	r21, 0x00	; 0
   1410c:	6b ee       	ldi	r22, 0xEB	; 235
   1410e:	77 e1       	ldi	r23, 0x17	; 23
   14110:	80 e0       	ldi	r24, 0x00	; 0
   14112:	d7 dd       	rcall	.-1106   	; 0x13cc2 <print_var_P>
                print_var("PPR", (uint32_t) SS80p->HEADER.PPR);
   14114:	ef 85       	ldd	r30, Y+15	; 0x0f
   14116:	f8 89       	ldd	r31, Y+16	; 0x10
   14118:	21 81       	ldd	r18, Z+1	; 0x01
   1411a:	30 e0       	ldi	r19, 0x00	; 0
   1411c:	40 e0       	ldi	r20, 0x00	; 0
   1411e:	50 e0       	ldi	r21, 0x00	; 0
   14120:	67 ee       	ldi	r22, 0xE7	; 231
   14122:	77 e1       	ldi	r23, 0x17	; 23
   14124:	80 e0       	ldi	r24, 0x00	; 0
   14126:	cd dd       	rcall	.-1126   	; 0x13cc2 <print_var_P>
                print_str("FILE", SS80p->HEADER.NAME);
   14128:	ef 85       	ldd	r30, Y+15	; 0x0f
   1412a:	f8 89       	ldd	r31, Y+16	; 0x10
   1412c:	42 81       	ldd	r20, Z+2	; 0x02
   1412e:	53 81       	ldd	r21, Z+3	; 0x03
   14130:	62 ee       	ldi	r22, 0xE2	; 226
   14132:	77 e1       	ldi	r23, 0x17	; 23
   14134:	80 e0       	ldi	r24, 0x00	; 0
   14136:	1d de       	rcall	.-966    	; 0x13d72 <print_str_P>
			printf("  END\n");
   14138:	8b ed       	ldi	r24, 0xDB	; 219
   1413a:	97 e1       	ldi	r25, 0x17	; 23
   1413c:	a0 e0       	ldi	r26, 0x00	; 0
   1413e:	ed b7       	in	r30, 0x3d	; 61
   14140:	fe b7       	in	r31, 0x3e	; 62
   14142:	81 83       	std	Z+1, r24	; 0x01
   14144:	92 83       	std	Z+2, r25	; 0x02
   14146:	a3 83       	std	Z+3, r26	; 0x03
   14148:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
            printf("  HEADER\n");
   1414c:	81 ed       	ldi	r24, 0xD1	; 209
   1414e:	97 e1       	ldi	r25, 0x17	; 23
   14150:	a0 e0       	ldi	r26, 0x00	; 0
   14152:	ed b7       	in	r30, 0x3d	; 61
   14154:	fe b7       	in	r31, 0x3e	; 62
   14156:	81 83       	std	Z+1, r24	; 0x01
   14158:	92 83       	std	Z+2, r25	; 0x02
   1415a:	a3 83       	std	Z+3, r26	; 0x03
   1415c:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
                print_var("ID", (uint32_t) SS80p->CONFIG.ID);
   14160:	ef 85       	ldd	r30, Y+15	; 0x0f
   14162:	f8 89       	ldd	r31, Y+16	; 0x10
   14164:	24 81       	ldd	r18, Z+4	; 0x04
   14166:	35 81       	ldd	r19, Z+5	; 0x05
   14168:	40 e0       	ldi	r20, 0x00	; 0
   1416a:	50 e0       	ldi	r21, 0x00	; 0
   1416c:	6e ec       	ldi	r22, 0xCE	; 206
   1416e:	77 e1       	ldi	r23, 0x17	; 23
   14170:	80 e0       	ldi	r24, 0x00	; 0
   14172:	a7 dd       	rcall	.-1202   	; 0x13cc2 <print_var_P>
			printf("  END\n");
   14174:	87 ec       	ldi	r24, 0xC7	; 199
   14176:	97 e1       	ldi	r25, 0x17	; 23
   14178:	a0 e0       	ldi	r26, 0x00	; 0
   1417a:	ed b7       	in	r30, 0x3d	; 61
   1417c:	fe b7       	in	r31, 0x3e	; 62
   1417e:	81 83       	std	Z+1, r24	; 0x01
   14180:	92 83       	std	Z+2, r25	; 0x02
   14182:	a3 83       	std	Z+3, r26	; 0x03
   14184:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
			if(verbose)
   14188:	a1 14       	cp	r10, r1
   1418a:	b1 04       	cpc	r11, r1
   1418c:	91 f1       	breq	.+100    	; 0x141f2 <display_Config+0x1e4>
			{
				printf("  CONTROLLER\n");
   1418e:	89 eb       	ldi	r24, 0xB9	; 185
   14190:	97 e1       	ldi	r25, 0x17	; 23
   14192:	a0 e0       	ldi	r26, 0x00	; 0
   14194:	ed b7       	in	r30, 0x3d	; 61
   14196:	fe b7       	in	r31, 0x3e	; 62
   14198:	81 83       	std	Z+1, r24	; 0x01
   1419a:	92 83       	std	Z+2, r25	; 0x02
   1419c:	a3 83       	std	Z+3, r26	; 0x03
   1419e:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
					print_var("UNITS_INSTALLED", (uint32_t) SS80p->CONTROLLER.UNITS_INSTALLED);
   141a2:	ef 85       	ldd	r30, Y+15	; 0x0f
   141a4:	f8 89       	ldd	r31, Y+16	; 0x10
   141a6:	26 81       	ldd	r18, Z+6	; 0x06
   141a8:	37 81       	ldd	r19, Z+7	; 0x07
   141aa:	40 e0       	ldi	r20, 0x00	; 0
   141ac:	50 e0       	ldi	r21, 0x00	; 0
   141ae:	69 ea       	ldi	r22, 0xA9	; 169
   141b0:	77 e1       	ldi	r23, 0x17	; 23
   141b2:	80 e0       	ldi	r24, 0x00	; 0
   141b4:	86 dd       	rcall	.-1268   	; 0x13cc2 <print_var_P>
					print_var("TRANSFER_RATE", (uint32_t)  SS80p->CONTROLLER.TRANSFER_RATE);
   141b6:	ef 85       	ldd	r30, Y+15	; 0x0f
   141b8:	f8 89       	ldd	r31, Y+16	; 0x10
   141ba:	20 85       	ldd	r18, Z+8	; 0x08
   141bc:	31 85       	ldd	r19, Z+9	; 0x09
   141be:	40 e0       	ldi	r20, 0x00	; 0
   141c0:	50 e0       	ldi	r21, 0x00	; 0
   141c2:	6b e9       	ldi	r22, 0x9B	; 155
   141c4:	77 e1       	ldi	r23, 0x17	; 23
   141c6:	80 e0       	ldi	r24, 0x00	; 0
   141c8:	7c dd       	rcall	.-1288   	; 0x13cc2 <print_var_P>
					print_var("TYPE", (uint32_t)  SS80p->CONTROLLER.TYPE);
   141ca:	ef 85       	ldd	r30, Y+15	; 0x0f
   141cc:	f8 89       	ldd	r31, Y+16	; 0x10
   141ce:	22 85       	ldd	r18, Z+10	; 0x0a
   141d0:	30 e0       	ldi	r19, 0x00	; 0
   141d2:	40 e0       	ldi	r20, 0x00	; 0
   141d4:	50 e0       	ldi	r21, 0x00	; 0
   141d6:	66 e9       	ldi	r22, 0x96	; 150
   141d8:	77 e1       	ldi	r23, 0x17	; 23
   141da:	80 e0       	ldi	r24, 0x00	; 0
   141dc:	72 dd       	rcall	.-1308   	; 0x13cc2 <print_var_P>
				printf("  END\n");
   141de:	8f e8       	ldi	r24, 0x8F	; 143
   141e0:	97 e1       	ldi	r25, 0x17	; 23
   141e2:	a0 e0       	ldi	r26, 0x00	; 0
   141e4:	ed b7       	in	r30, 0x3d	; 61
   141e6:	fe b7       	in	r31, 0x3e	; 62
   141e8:	81 83       	std	Z+1, r24	; 0x01
   141ea:	92 83       	std	Z+2, r25	; 0x02
   141ec:	a3 83       	std	Z+3, r26	; 0x03
   141ee:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
			}
            printf("  UNIT\n");
   141f2:	87 e8       	ldi	r24, 0x87	; 135
   141f4:	97 e1       	ldi	r25, 0x17	; 23
   141f6:	a0 e0       	ldi	r26, 0x00	; 0
   141f8:	ed b7       	in	r30, 0x3d	; 61
   141fa:	fe b7       	in	r31, 0x3e	; 62
   141fc:	81 83       	std	Z+1, r24	; 0x01
   141fe:	92 83       	std	Z+2, r25	; 0x02
   14200:	a3 83       	std	Z+3, r26	; 0x03
   14202:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
				if(verbose)
   14206:	a1 14       	cp	r10, r1
   14208:	b1 04       	cpc	r11, r1
   1420a:	51 f0       	breq	.+20     	; 0x14220 <display_Config+0x212>
				{
					print_var("UNIT_TYPE", (uint32_t)SS80p->UNIT.UNIT_TYPE);
   1420c:	ef 85       	ldd	r30, Y+15	; 0x0f
   1420e:	f8 89       	ldd	r31, Y+16	; 0x10
   14210:	23 85       	ldd	r18, Z+11	; 0x0b
   14212:	30 e0       	ldi	r19, 0x00	; 0
   14214:	40 e0       	ldi	r20, 0x00	; 0
   14216:	50 e0       	ldi	r21, 0x00	; 0
   14218:	6d e7       	ldi	r22, 0x7D	; 125
   1421a:	77 e1       	ldi	r23, 0x17	; 23
   1421c:	80 e0       	ldi	r24, 0x00	; 0
   1421e:	51 dd       	rcall	.-1374   	; 0x13cc2 <print_var_P>
				}
                print_var("DEVICE_NUMBER", (uint32_t)SS80p->UNIT.DEVICE_NUMBER);
   14220:	ef 85       	ldd	r30, Y+15	; 0x0f
   14222:	f8 89       	ldd	r31, Y+16	; 0x10
   14224:	24 85       	ldd	r18, Z+12	; 0x0c
   14226:	35 85       	ldd	r19, Z+13	; 0x0d
   14228:	46 85       	ldd	r20, Z+14	; 0x0e
   1422a:	57 85       	ldd	r21, Z+15	; 0x0f
   1422c:	6f e6       	ldi	r22, 0x6F	; 111
   1422e:	77 e1       	ldi	r23, 0x17	; 23
   14230:	80 e0       	ldi	r24, 0x00	; 0
   14232:	47 dd       	rcall	.-1394   	; 0x13cc2 <print_var_P>
				if(verbose)
   14234:	a1 14       	cp	r10, r1
   14236:	b1 04       	cpc	r11, r1
   14238:	09 f4       	brne	.+2      	; 0x1423c <display_Config+0x22e>
				{
					print_var("BYTES_PER_BLOCK", (uint32_t)SS80p->UNIT.BYTES_PER_BLOCK);
   1423a:	64 c0       	rjmp	.+200    	; 0x14304 <display_Config+0x2f6>
   1423c:	ef 85       	ldd	r30, Y+15	; 0x0f
   1423e:	f8 89       	ldd	r31, Y+16	; 0x10
   14240:	20 89       	ldd	r18, Z+16	; 0x10
   14242:	31 89       	ldd	r19, Z+17	; 0x11
   14244:	40 e0       	ldi	r20, 0x00	; 0
   14246:	50 e0       	ldi	r21, 0x00	; 0
   14248:	6f e5       	ldi	r22, 0x5F	; 95
   1424a:	77 e1       	ldi	r23, 0x17	; 23
					print_var("BUFFERED_BLOCKS", (uint32_t)SS80p->UNIT.BUFFERED_BLOCKS);
   1424c:	80 e0       	ldi	r24, 0x00	; 0
   1424e:	39 dd       	rcall	.-1422   	; 0x13cc2 <print_var_P>
   14250:	ef 85       	ldd	r30, Y+15	; 0x0f
   14252:	f8 89       	ldd	r31, Y+16	; 0x10
   14254:	22 89       	ldd	r18, Z+18	; 0x12
   14256:	30 e0       	ldi	r19, 0x00	; 0
   14258:	40 e0       	ldi	r20, 0x00	; 0
   1425a:	50 e0       	ldi	r21, 0x00	; 0
   1425c:	6f e4       	ldi	r22, 0x4F	; 79
   1425e:	77 e1       	ldi	r23, 0x17	; 23
					print_var("BURST_SIZE", (uint32_t)SS80p->UNIT.BURST_SIZE);
   14260:	80 e0       	ldi	r24, 0x00	; 0
   14262:	2f dd       	rcall	.-1442   	; 0x13cc2 <print_var_P>
   14264:	ef 85       	ldd	r30, Y+15	; 0x0f
   14266:	f8 89       	ldd	r31, Y+16	; 0x10
   14268:	23 89       	ldd	r18, Z+19	; 0x13
   1426a:	30 e0       	ldi	r19, 0x00	; 0
   1426c:	40 e0       	ldi	r20, 0x00	; 0
   1426e:	50 e0       	ldi	r21, 0x00	; 0
   14270:	64 e4       	ldi	r22, 0x44	; 68
   14272:	77 e1       	ldi	r23, 0x17	; 23
					print_var("BLOCK_TIME", (uint32_t)SS80p->UNIT.BLOCK_TIME);
   14274:	80 e0       	ldi	r24, 0x00	; 0
   14276:	25 dd       	rcall	.-1462   	; 0x13cc2 <print_var_P>
   14278:	ef 85       	ldd	r30, Y+15	; 0x0f
   1427a:	f8 89       	ldd	r31, Y+16	; 0x10
   1427c:	24 89       	ldd	r18, Z+20	; 0x14
   1427e:	35 89       	ldd	r19, Z+21	; 0x15
   14280:	40 e0       	ldi	r20, 0x00	; 0
   14282:	50 e0       	ldi	r21, 0x00	; 0
   14284:	69 e3       	ldi	r22, 0x39	; 57
   14286:	77 e1       	ldi	r23, 0x17	; 23
					print_var("CONTINUOUS_TRANSFER_RATE", (uint32_t)SS80p->UNIT.CONTINUOUS_TRANSFER_RATE);
   14288:	80 e0       	ldi	r24, 0x00	; 0
   1428a:	1b dd       	rcall	.-1482   	; 0x13cc2 <print_var_P>
   1428c:	ef 85       	ldd	r30, Y+15	; 0x0f
   1428e:	f8 89       	ldd	r31, Y+16	; 0x10
   14290:	26 89       	ldd	r18, Z+22	; 0x16
   14292:	37 89       	ldd	r19, Z+23	; 0x17
   14294:	40 e0       	ldi	r20, 0x00	; 0
   14296:	50 e0       	ldi	r21, 0x00	; 0
   14298:	60 e2       	ldi	r22, 0x20	; 32
   1429a:	77 e1       	ldi	r23, 0x17	; 23
					print_var("OPTIMAL_RETRY_TIME", (uint32_t)SS80p->UNIT.OPTIMAL_RETRY_TIME);
   1429c:	80 e0       	ldi	r24, 0x00	; 0
   1429e:	11 dd       	rcall	.-1502   	; 0x13cc2 <print_var_P>
   142a0:	ef 85       	ldd	r30, Y+15	; 0x0f
   142a2:	f8 89       	ldd	r31, Y+16	; 0x10
   142a4:	20 8d       	ldd	r18, Z+24	; 0x18
   142a6:	31 8d       	ldd	r19, Z+25	; 0x19
   142a8:	40 e0       	ldi	r20, 0x00	; 0
   142aa:	50 e0       	ldi	r21, 0x00	; 0
   142ac:	6d e0       	ldi	r22, 0x0D	; 13
   142ae:	77 e1       	ldi	r23, 0x17	; 23
					print_var("ACCESS_TIME", (uint32_t)SS80p->UNIT.ACCESS_TIME);
   142b0:	80 e0       	ldi	r24, 0x00	; 0
   142b2:	07 dd       	rcall	.-1522   	; 0x13cc2 <print_var_P>
   142b4:	ef 85       	ldd	r30, Y+15	; 0x0f
   142b6:	f8 89       	ldd	r31, Y+16	; 0x10
   142b8:	22 8d       	ldd	r18, Z+26	; 0x1a
   142ba:	33 8d       	ldd	r19, Z+27	; 0x1b
   142bc:	40 e0       	ldi	r20, 0x00	; 0
   142be:	50 e0       	ldi	r21, 0x00	; 0
   142c0:	61 e0       	ldi	r22, 0x01	; 1
   142c2:	77 e1       	ldi	r23, 0x17	; 23
					print_var("MAXIMUM_INTERLEAVE", (uint32_t)SS80p->UNIT.MAXIMUM_INTERLEAVE);
   142c4:	80 e0       	ldi	r24, 0x00	; 0
   142c6:	fd dc       	rcall	.-1542   	; 0x13cc2 <print_var_P>
   142c8:	ef 85       	ldd	r30, Y+15	; 0x0f
   142ca:	f8 89       	ldd	r31, Y+16	; 0x10
   142cc:	24 8d       	ldd	r18, Z+28	; 0x1c
   142ce:	30 e0       	ldi	r19, 0x00	; 0
   142d0:	40 e0       	ldi	r20, 0x00	; 0
   142d2:	50 e0       	ldi	r21, 0x00	; 0
   142d4:	6e ee       	ldi	r22, 0xEE	; 238
   142d6:	76 e1       	ldi	r23, 0x16	; 22
					print_var("FIXED_VOLUMES", (uint32_t)SS80p->UNIT.FIXED_VOLUMES);
   142d8:	80 e0       	ldi	r24, 0x00	; 0
   142da:	f3 dc       	rcall	.-1562   	; 0x13cc2 <print_var_P>
   142dc:	ef 85       	ldd	r30, Y+15	; 0x0f
   142de:	f8 89       	ldd	r31, Y+16	; 0x10
   142e0:	25 8d       	ldd	r18, Z+29	; 0x1d
   142e2:	30 e0       	ldi	r19, 0x00	; 0
   142e4:	40 e0       	ldi	r20, 0x00	; 0
   142e6:	50 e0       	ldi	r21, 0x00	; 0
   142e8:	60 ee       	ldi	r22, 0xE0	; 224
   142ea:	76 e1       	ldi	r23, 0x16	; 22
					print_var("REMOVABLE_VOLUMES", (uint32_t)SS80p->UNIT.REMOVABLE_VOLUMES);
   142ec:	80 e0       	ldi	r24, 0x00	; 0
   142ee:	e9 dc       	rcall	.-1582   	; 0x13cc2 <print_var_P>
   142f0:	ef 85       	ldd	r30, Y+15	; 0x0f
   142f2:	f8 89       	ldd	r31, Y+16	; 0x10
   142f4:	26 8d       	ldd	r18, Z+30	; 0x1e
   142f6:	30 e0       	ldi	r19, 0x00	; 0
   142f8:	40 e0       	ldi	r20, 0x00	; 0
   142fa:	50 e0       	ldi	r21, 0x00	; 0
   142fc:	6e ec       	ldi	r22, 0xCE	; 206
   142fe:	76 e1       	ldi	r23, 0x16	; 22
   14300:	80 e0       	ldi	r24, 0x00	; 0
				}
			printf("  END\n");
   14302:	df dc       	rcall	.-1602   	; 0x13cc2 <print_var_P>
   14304:	87 ec       	ldi	r24, 0xC7	; 199
   14306:	96 e1       	ldi	r25, 0x16	; 22
   14308:	a0 e0       	ldi	r26, 0x00	; 0
   1430a:	ed b7       	in	r30, 0x3d	; 61
   1430c:	fe b7       	in	r31, 0x3e	; 62
   1430e:	81 83       	std	Z+1, r24	; 0x01
   14310:	92 83       	std	Z+2, r25	; 0x02
   14312:	a3 83       	std	Z+3, r26	; 0x03
   14314:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
            printf("  VOLUME\n");
   14318:	8d eb       	ldi	r24, 0xBD	; 189
   1431a:	96 e1       	ldi	r25, 0x16	; 22
   1431c:	a0 e0       	ldi	r26, 0x00	; 0
   1431e:	ed b7       	in	r30, 0x3d	; 61
   14320:	fe b7       	in	r31, 0x3e	; 62
   14322:	81 83       	std	Z+1, r24	; 0x01
   14324:	92 83       	std	Z+2, r25	; 0x02
   14326:	a3 83       	std	Z+3, r26	; 0x03
				if(verbose)
   14328:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
				{
					print_var("MAX_CYLINDER", (uint32_t)SS80p->VOLUME.MAX_CYLINDER);
   1432c:	a1 14       	cp	r10, r1
   1432e:	b1 04       	cpc	r11, r1
   14330:	91 f1       	breq	.+100    	; 0x14396 <display_Config+0x388>
   14332:	ef 85       	ldd	r30, Y+15	; 0x0f
   14334:	f8 89       	ldd	r31, Y+16	; 0x10
   14336:	27 8d       	ldd	r18, Z+31	; 0x1f
   14338:	30 a1       	ldd	r19, Z+32	; 0x20
   1433a:	41 a1       	ldd	r20, Z+33	; 0x21
   1433c:	52 a1       	ldd	r21, Z+34	; 0x22
					print_var("MAX_HEAD", (uint32_t)SS80p->VOLUME.MAX_HEAD);
   1433e:	60 eb       	ldi	r22, 0xB0	; 176
   14340:	76 e1       	ldi	r23, 0x16	; 22
   14342:	80 e0       	ldi	r24, 0x00	; 0
   14344:	be dc       	rcall	.-1668   	; 0x13cc2 <print_var_P>
   14346:	ef 85       	ldd	r30, Y+15	; 0x0f
   14348:	f8 89       	ldd	r31, Y+16	; 0x10
   1434a:	23 a1       	ldd	r18, Z+35	; 0x23
   1434c:	30 e0       	ldi	r19, 0x00	; 0
   1434e:	40 e0       	ldi	r20, 0x00	; 0
   14350:	50 e0       	ldi	r21, 0x00	; 0
					print_var("MAX_SECTOR", (uint32_t)SS80p->VOLUME.MAX_SECTOR);
   14352:	67 ea       	ldi	r22, 0xA7	; 167
   14354:	76 e1       	ldi	r23, 0x16	; 22
   14356:	80 e0       	ldi	r24, 0x00	; 0
   14358:	b4 dc       	rcall	.-1688   	; 0x13cc2 <print_var_P>
   1435a:	ef 85       	ldd	r30, Y+15	; 0x0f
   1435c:	f8 89       	ldd	r31, Y+16	; 0x10
   1435e:	24 a1       	ldd	r18, Z+36	; 0x24
   14360:	35 a1       	ldd	r19, Z+37	; 0x25
   14362:	40 e0       	ldi	r20, 0x00	; 0
   14364:	50 e0       	ldi	r21, 0x00	; 0
					print_var("MAX_BLOCK_NUMBER", (uint32_t)SS80p->VOLUME.MAX_BLOCK_NUMBER);
   14366:	6c e9       	ldi	r22, 0x9C	; 156
   14368:	76 e1       	ldi	r23, 0x16	; 22
   1436a:	80 e0       	ldi	r24, 0x00	; 0
   1436c:	aa dc       	rcall	.-1708   	; 0x13cc2 <print_var_P>
   1436e:	ef 85       	ldd	r30, Y+15	; 0x0f
   14370:	f8 89       	ldd	r31, Y+16	; 0x10
   14372:	26 a1       	ldd	r18, Z+38	; 0x26
   14374:	37 a1       	ldd	r19, Z+39	; 0x27
   14376:	40 a5       	ldd	r20, Z+40	; 0x28
   14378:	51 a5       	ldd	r21, Z+41	; 0x29
   1437a:	6b e8       	ldi	r22, 0x8B	; 139
					print_var("INTERLEAVE", (uint32_t)SS80p->VOLUME.INTERLEAVE);
   1437c:	76 e1       	ldi	r23, 0x16	; 22
   1437e:	80 e0       	ldi	r24, 0x00	; 0
   14380:	a0 dc       	rcall	.-1728   	; 0x13cc2 <print_var_P>
   14382:	ef 85       	ldd	r30, Y+15	; 0x0f
   14384:	f8 89       	ldd	r31, Y+16	; 0x10
   14386:	22 a5       	ldd	r18, Z+42	; 0x2a
   14388:	30 e0       	ldi	r19, 0x00	; 0
   1438a:	40 e0       	ldi	r20, 0x00	; 0
   1438c:	50 e0       	ldi	r21, 0x00	; 0
   1438e:	60 e8       	ldi	r22, 0x80	; 128
				}
                print_var("# BLOCKS", (uint32_t)SS80p->VOLUME.MAX_BLOCK_NUMBER+1);
   14390:	76 e1       	ldi	r23, 0x16	; 22
   14392:	80 e0       	ldi	r24, 0x00	; 0
   14394:	96 dc       	rcall	.-1748   	; 0x13cc2 <print_var_P>
   14396:	ef 85       	ldd	r30, Y+15	; 0x0f
   14398:	f8 89       	ldd	r31, Y+16	; 0x10
   1439a:	86 a1       	ldd	r24, Z+38	; 0x26
   1439c:	97 a1       	ldd	r25, Z+39	; 0x27
   1439e:	a0 a5       	ldd	r26, Z+40	; 0x28
   143a0:	b1 a5       	ldd	r27, Z+41	; 0x29
   143a2:	9c 01       	movw	r18, r24
   143a4:	ad 01       	movw	r20, r26
   143a6:	2f 5f       	subi	r18, 0xFF	; 255
   143a8:	3f 4f       	sbci	r19, 0xFF	; 255
   143aa:	4f 4f       	sbci	r20, 0xFF	; 255
   143ac:	5f 4f       	sbci	r21, 0xFF	; 255
   143ae:	67 e7       	ldi	r22, 0x77	; 119
   143b0:	76 e1       	ldi	r23, 0x16	; 22
			printf("  END\n");
   143b2:	80 e0       	ldi	r24, 0x00	; 0
   143b4:	86 dc       	rcall	.-1780   	; 0x13cc2 <print_var_P>
   143b6:	80 e7       	ldi	r24, 0x70	; 112
   143b8:	96 e1       	ldi	r25, 0x16	; 22
   143ba:	a0 e0       	ldi	r26, 0x00	; 0
   143bc:	ed b7       	in	r30, 0x3d	; 61
   143be:	fe b7       	in	r31, 0x3e	; 62
   143c0:	81 83       	std	Z+1, r24	; 0x01
   143c2:	92 83       	std	Z+2, r25	; 0x02
   143c4:	a3 83       	std	Z+3, r26	; 0x03
        } // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   143c6:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   143ca:	f8 01       	movw	r30, r16
   143cc:	80 81       	ld	r24, Z
   143ce:	81 30       	cpi	r24, 0x01	; 1
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
   143d0:	09 f0       	breq	.+2      	; 0x143d4 <display_Config+0x3c6>
   143d2:	cc c0       	rjmp	.+408    	; 0x1456c <display_Config+0x55e>
   143d4:	27 a1       	ldd	r18, Z+39	; 0x27
   143d6:	30 a5       	ldd	r19, Z+40	; 0x28

            printf("AMIGO %s\n", Devices[i].model);
   143d8:	38 8b       	std	Y+16, r19	; 0x10
   143da:	2f 87       	std	Y+15, r18	; 0x0f
   143dc:	c8 01       	movw	r24, r16
   143de:	07 96       	adiw	r24, 0x07	; 7
   143e0:	ed b7       	in	r30, 0x3d	; 61
   143e2:	fe b7       	in	r31, 0x3e	; 62
   143e4:	95 83       	std	Z+5, r25	; 0x05
   143e6:	84 83       	std	Z+4, r24	; 0x04
   143e8:	26 e6       	ldi	r18, 0x66	; 102
   143ea:	36 e1       	ldi	r19, 0x16	; 22
   143ec:	c9 01       	movw	r24, r18
   143ee:	a0 e0       	ldi	r26, 0x00	; 0
   143f0:	81 83       	std	Z+1, r24	; 0x01
   143f2:	92 83       	std	Z+2, r25	; 0x02
   143f4:	a3 83       	std	Z+3, r26	; 0x03
			printf("  # HP85 BASIC ADDRESS :D7%d0\n", (int) AMIGOp->HEADER.ADDRESS);
   143f6:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   143fa:	ef 85       	ldd	r30, Y+15	; 0x0f
   143fc:	f8 89       	ldd	r31, Y+16	; 0x10
   143fe:	80 81       	ld	r24, Z
   14400:	90 e0       	ldi	r25, 0x00	; 0
   14402:	ed b7       	in	r30, 0x3d	; 61
   14404:	fe b7       	in	r31, 0x3e	; 62
   14406:	95 83       	std	Z+5, r25	; 0x05
   14408:	84 83       	std	Z+4, r24	; 0x04
   1440a:	87 e4       	ldi	r24, 0x47	; 71
   1440c:	96 e1       	ldi	r25, 0x16	; 22
   1440e:	a0 e0       	ldi	r26, 0x00	; 0
   14410:	81 83       	std	Z+1, r24	; 0x01
   14412:	92 83       	std	Z+2, r25	; 0x02
            printf("  HEADER\n");
   14414:	a3 83       	std	Z+3, r26	; 0x03
   14416:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   1441a:	8d e3       	ldi	r24, 0x3D	; 61
   1441c:	96 e1       	ldi	r25, 0x16	; 22
   1441e:	a0 e0       	ldi	r26, 0x00	; 0
   14420:	ed b7       	in	r30, 0x3d	; 61
   14422:	fe b7       	in	r31, 0x3e	; 62
   14424:	81 83       	std	Z+1, r24	; 0x01
                print_var("ADDRESS", (uint32_t) AMIGOp->HEADER.ADDRESS);
   14426:	92 83       	std	Z+2, r25	; 0x02
   14428:	a3 83       	std	Z+3, r26	; 0x03
   1442a:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   1442e:	ef 85       	ldd	r30, Y+15	; 0x0f
   14430:	f8 89       	ldd	r31, Y+16	; 0x10
   14432:	20 81       	ld	r18, Z
   14434:	30 e0       	ldi	r19, 0x00	; 0
   14436:	40 e0       	ldi	r20, 0x00	; 0
   14438:	50 e0       	ldi	r21, 0x00	; 0
                print_var("PPR", (uint32_t) AMIGOp->HEADER.PPR);
   1443a:	65 e3       	ldi	r22, 0x35	; 53
   1443c:	76 e1       	ldi	r23, 0x16	; 22
   1443e:	80 e0       	ldi	r24, 0x00	; 0
   14440:	40 dc       	rcall	.-1920   	; 0x13cc2 <print_var_P>
   14442:	ef 85       	ldd	r30, Y+15	; 0x0f
   14444:	f8 89       	ldd	r31, Y+16	; 0x10
   14446:	21 81       	ldd	r18, Z+1	; 0x01
   14448:	30 e0       	ldi	r19, 0x00	; 0
   1444a:	40 e0       	ldi	r20, 0x00	; 0
   1444c:	50 e0       	ldi	r21, 0x00	; 0
   1444e:	61 e3       	ldi	r22, 0x31	; 49
                print_str("FILE", AMIGOp->HEADER.NAME);
   14450:	76 e1       	ldi	r23, 0x16	; 22
   14452:	80 e0       	ldi	r24, 0x00	; 0
   14454:	36 dc       	rcall	.-1940   	; 0x13cc2 <print_var_P>
   14456:	ef 85       	ldd	r30, Y+15	; 0x0f
   14458:	f8 89       	ldd	r31, Y+16	; 0x10
   1445a:	42 81       	ldd	r20, Z+2	; 0x02
   1445c:	53 81       	ldd	r21, Z+3	; 0x03
   1445e:	6c e2       	ldi	r22, 0x2C	; 44
   14460:	76 e1       	ldi	r23, 0x16	; 22
			printf("  END\n");
   14462:	80 e0       	ldi	r24, 0x00	; 0
   14464:	86 dc       	rcall	.-1780   	; 0x13d72 <print_str_P>
   14466:	85 e2       	ldi	r24, 0x25	; 37
   14468:	96 e1       	ldi	r25, 0x16	; 22
   1446a:	a0 e0       	ldi	r26, 0x00	; 0
   1446c:	ed b7       	in	r30, 0x3d	; 61
   1446e:	fe b7       	in	r31, 0x3e	; 62
   14470:	81 83       	std	Z+1, r24	; 0x01
   14472:	92 83       	std	Z+2, r25	; 0x02
            printf("  CONFIG\n");
   14474:	a3 83       	std	Z+3, r26	; 0x03
   14476:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   1447a:	8b e1       	ldi	r24, 0x1B	; 27
   1447c:	96 e1       	ldi	r25, 0x16	; 22
   1447e:	a0 e0       	ldi	r26, 0x00	; 0
   14480:	ed b7       	in	r30, 0x3d	; 61
   14482:	fe b7       	in	r31, 0x3e	; 62
   14484:	81 83       	std	Z+1, r24	; 0x01
   14486:	92 83       	std	Z+2, r25	; 0x02
                print_var("ID", (uint32_t) AMIGOp->CONFIG.ID);
   14488:	a3 83       	std	Z+3, r26	; 0x03
   1448a:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   1448e:	ef 85       	ldd	r30, Y+15	; 0x0f
   14490:	f8 89       	ldd	r31, Y+16	; 0x10
   14492:	24 81       	ldd	r18, Z+4	; 0x04
   14494:	35 81       	ldd	r19, Z+5	; 0x05
   14496:	40 e0       	ldi	r20, 0x00	; 0
   14498:	50 e0       	ldi	r21, 0x00	; 0
   1449a:	68 e1       	ldi	r22, 0x18	; 24
   1449c:	76 e1       	ldi	r23, 0x16	; 22
			printf("  END\n");
   1449e:	80 e0       	ldi	r24, 0x00	; 0
   144a0:	10 dc       	rcall	.-2016   	; 0x13cc2 <print_var_P>
   144a2:	81 e1       	ldi	r24, 0x11	; 17
   144a4:	96 e1       	ldi	r25, 0x16	; 22
   144a6:	a0 e0       	ldi	r26, 0x00	; 0
   144a8:	ed b7       	in	r30, 0x3d	; 61
   144aa:	fe b7       	in	r31, 0x3e	; 62
   144ac:	81 83       	std	Z+1, r24	; 0x01
   144ae:	92 83       	std	Z+2, r25	; 0x02
            printf("  GEOMETRY\n");
   144b0:	a3 83       	std	Z+3, r26	; 0x03
   144b2:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   144b6:	85 e0       	ldi	r24, 0x05	; 5
   144b8:	96 e1       	ldi	r25, 0x16	; 22
   144ba:	a0 e0       	ldi	r26, 0x00	; 0
   144bc:	ed b7       	in	r30, 0x3d	; 61
   144be:	fe b7       	in	r31, 0x3e	; 62
   144c0:	81 83       	std	Z+1, r24	; 0x01
				if(verbose)
   144c2:	92 83       	std	Z+2, r25	; 0x02
   144c4:	a3 83       	std	Z+3, r26	; 0x03
   144c6:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
				{
					print_var("BYTES_PER_SECTOR", (uint32_t) AMIGOp->GEOMETRY.BYTES_PER_SECTOR);
   144ca:	a1 14       	cp	r10, r1
   144cc:	b1 04       	cpc	r11, r1
   144ce:	81 f1       	breq	.+96     	; 0x14530 <display_Config+0x522>
   144d0:	ef 85       	ldd	r30, Y+15	; 0x0f
   144d2:	f8 89       	ldd	r31, Y+16	; 0x10
   144d4:	26 81       	ldd	r18, Z+6	; 0x06
   144d6:	37 81       	ldd	r19, Z+7	; 0x07
   144d8:	03 2e       	mov	r0, r19
   144da:	00 0c       	add	r0, r0
   144dc:	44 0b       	sbc	r20, r20
   144de:	55 0b       	sbc	r21, r21
					print_var("SECTORS_PER_TRACK", (uint32_t) AMIGOp->GEOMETRY.SECTORS_PER_TRACK);
   144e0:	64 ef       	ldi	r22, 0xF4	; 244
   144e2:	75 e1       	ldi	r23, 0x15	; 21
   144e4:	80 e0       	ldi	r24, 0x00	; 0
   144e6:	ed db       	rcall	.-2086   	; 0x13cc2 <print_var_P>
   144e8:	ef 85       	ldd	r30, Y+15	; 0x0f
   144ea:	f8 89       	ldd	r31, Y+16	; 0x10
   144ec:	20 85       	ldd	r18, Z+8	; 0x08
   144ee:	31 85       	ldd	r19, Z+9	; 0x09
   144f0:	03 2e       	mov	r0, r19
   144f2:	00 0c       	add	r0, r0
   144f4:	44 0b       	sbc	r20, r20
   144f6:	55 0b       	sbc	r21, r21
					print_var("HEADS", (uint32_t) AMIGOp->GEOMETRY.HEADS);
   144f8:	62 ee       	ldi	r22, 0xE2	; 226
   144fa:	75 e1       	ldi	r23, 0x15	; 21
   144fc:	80 e0       	ldi	r24, 0x00	; 0
   144fe:	e1 db       	rcall	.-2110   	; 0x13cc2 <print_var_P>
   14500:	ef 85       	ldd	r30, Y+15	; 0x0f
   14502:	f8 89       	ldd	r31, Y+16	; 0x10
   14504:	22 85       	ldd	r18, Z+10	; 0x0a
   14506:	33 85       	ldd	r19, Z+11	; 0x0b
   14508:	03 2e       	mov	r0, r19
   1450a:	00 0c       	add	r0, r0
   1450c:	44 0b       	sbc	r20, r20
   1450e:	55 0b       	sbc	r21, r21
					print_var("CYLINDERS", (uint32_t) AMIGOp->GEOMETRY.CYLINDERS);
   14510:	6c ed       	ldi	r22, 0xDC	; 220
   14512:	75 e1       	ldi	r23, 0x15	; 21
   14514:	80 e0       	ldi	r24, 0x00	; 0
   14516:	d5 db       	rcall	.-2134   	; 0x13cc2 <print_var_P>
   14518:	ef 85       	ldd	r30, Y+15	; 0x0f
   1451a:	f8 89       	ldd	r31, Y+16	; 0x10
   1451c:	24 85       	ldd	r18, Z+12	; 0x0c
   1451e:	35 85       	ldd	r19, Z+13	; 0x0d
   14520:	03 2e       	mov	r0, r19
   14522:	00 0c       	add	r0, r0
   14524:	44 0b       	sbc	r20, r20
   14526:	55 0b       	sbc	r21, r21
   14528:	62 ed       	ldi	r22, 0xD2	; 210
				}
                print_var("# BLOCKS", (uint32_t)AMIGOp->GEOMETRY.CYLINDERS * AMIGOp->GEOMETRY.SECTORS_PER_TRACK * AMIGOp->GEOMETRY.HEADS );
   1452a:	75 e1       	ldi	r23, 0x15	; 21
   1452c:	80 e0       	ldi	r24, 0x00	; 0
   1452e:	c9 db       	rcall	.-2158   	; 0x13cc2 <print_var_P>
   14530:	ef 85       	ldd	r30, Y+15	; 0x0f
   14532:	f8 89       	ldd	r31, Y+16	; 0x10
   14534:	24 85       	ldd	r18, Z+12	; 0x0c
   14536:	35 85       	ldd	r19, Z+13	; 0x0d
   14538:	a0 85       	ldd	r26, Z+8	; 0x08
   1453a:	b1 85       	ldd	r27, Z+9	; 0x09
   1453c:	0e 94 de e4 	call	0x1c9bc	; 0x1c9bc <__mulhisi3>
   14540:	9b 01       	movw	r18, r22
   14542:	ac 01       	movw	r20, r24
   14544:	a2 85       	ldd	r26, Z+10	; 0x0a
   14546:	b3 85       	ldd	r27, Z+11	; 0x0b
   14548:	0e 94 03 e5 	call	0x1ca06	; 0x1ca06 <__mulshisi3>
   1454c:	9b 01       	movw	r18, r22
   1454e:	ac 01       	movw	r20, r24
   14550:	69 ec       	ldi	r22, 0xC9	; 201
   14552:	75 e1       	ldi	r23, 0x15	; 21
			printf("  END\n");
   14554:	80 e0       	ldi	r24, 0x00	; 0
   14556:	b5 db       	rcall	.-2198   	; 0x13cc2 <print_var_P>
   14558:	82 ec       	ldi	r24, 0xC2	; 194
   1455a:	95 e1       	ldi	r25, 0x15	; 21
   1455c:	a0 e0       	ldi	r26, 0x00	; 0
   1455e:	ed b7       	in	r30, 0x3d	; 61
   14560:	fe b7       	in	r31, 0x3e	; 62
   14562:	81 83       	std	Z+1, r24	; 0x01
   14564:	92 83       	std	Z+2, r25	; 0x02
        } 
#endif // #ifdef AMIGO

        if(Devices[i].TYPE == PRINTER_TYPE )
   14566:	a3 83       	std	Z+3, r26	; 0x03
   14568:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   1456c:	f8 01       	movw	r30, r16
        {
            PRINTERp= (PRINTERDeviceType *)Devices[i].dev;
   1456e:	80 81       	ld	r24, Z
   14570:	84 30       	cpi	r24, 0x04	; 4
   14572:	29 f5       	brne	.+74     	; 0x145be <display_Config+0x5b0>
   14574:	27 a1       	ldd	r18, Z+39	; 0x27

            printf("PRINTER\n");
   14576:	30 a5       	ldd	r19, Z+40	; 0x28
   14578:	38 8b       	std	Y+16, r19	; 0x10
   1457a:	2f 87       	std	Y+15, r18	; 0x0f
   1457c:	8c 85       	ldd	r24, Y+12	; 0x0c
   1457e:	9d 85       	ldd	r25, Y+13	; 0x0d
   14580:	ae 85       	ldd	r26, Y+14	; 0x0e
   14582:	ed b7       	in	r30, 0x3d	; 61
   14584:	fe b7       	in	r31, 0x3e	; 62
   14586:	81 83       	std	Z+1, r24	; 0x01
   14588:	92 83       	std	Z+2, r25	; 0x02
            printf("  CONFIG\n");
   1458a:	a3 83       	std	Z+3, r26	; 0x03
   1458c:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   14590:	ed b7       	in	r30, 0x3d	; 61
   14592:	fe b7       	in	r31, 0x3e	; 62
   14594:	21 82       	std	Z+1, r2	; 0x01
   14596:	32 82       	std	Z+2, r3	; 0x02
                print_var("ADDRESS", (uint32_t) PRINTERp->HEADER.ADDRESS);
   14598:	43 82       	std	Z+3, r4	; 0x03
   1459a:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   1459e:	ef 85       	ldd	r30, Y+15	; 0x0f
   145a0:	f8 89       	ldd	r31, Y+16	; 0x10
   145a2:	20 81       	ld	r18, Z
   145a4:	30 e0       	ldi	r19, 0x00	; 0
   145a6:	40 e0       	ldi	r20, 0x00	; 0
   145a8:	50 e0       	ldi	r21, 0x00	; 0
   145aa:	8e 2d       	mov	r24, r14
			printf("  END\n");
   145ac:	b6 01       	movw	r22, r12
   145ae:	89 db       	rcall	.-2286   	; 0x13cc2 <print_var_P>
   145b0:	ed b7       	in	r30, 0x3d	; 61
   145b2:	fe b7       	in	r31, 0x3e	; 62
   145b4:	61 82       	std	Z+1, r6	; 0x01
   145b6:	72 82       	std	Z+2, r7	; 0x02
   145b8:	83 82       	std	Z+3, r8	; 0x03
        }
		printf("END\n");
   145ba:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   145be:	2e 81       	ldd	r18, Y+6	; 0x06
   145c0:	3f 81       	ldd	r19, Y+7	; 0x07
   145c2:	48 85       	ldd	r20, Y+8	; 0x08
   145c4:	ed b7       	in	r30, 0x3d	; 61
   145c6:	fe b7       	in	r31, 0x3e	; 62
   145c8:	21 83       	std	Z+1, r18	; 0x01
   145ca:	32 83       	std	Z+2, r19	; 0x02
   145cc:	43 83       	std	Z+3, r20	; 0x03
		printf("\n");
   145ce:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   145d2:	29 85       	ldd	r18, Y+9	; 0x09
   145d4:	3a 85       	ldd	r19, Y+10	; 0x0a
   145d6:	4b 85       	ldd	r20, Y+11	; 0x0b
   145d8:	ed b7       	in	r30, 0x3d	; 61
   145da:	fe b7       	in	r31, 0x3e	; 62
   145dc:	21 83       	std	Z+1, r18	; 0x01
   145de:	32 83       	std	Z+2, r19	; 0x02
   145e0:	43 83       	std	Z+3, r20	; 0x03
   145e2:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    ///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    printf("Current Configuration Settings\n");
    for(i=0;i<MAX_DEVICES;++i)
   145e6:	05 5d       	subi	r16, 0xD5	; 213
   145e8:	1f 4f       	sbci	r17, 0xFF	; 255
   145ea:	20 e9       	ldi	r18, 0x90	; 144
   145ec:	30 e2       	ldi	r19, 0x20	; 32
   145ee:	20 17       	cp	r18, r16
   145f0:	31 07       	cpc	r19, r17
			printf("  END\n");
        }
		printf("END\n");
		printf("\n");
    }
    printf("END\n");
   145f2:	09 f0       	breq	.+2      	; 0x145f6 <display_Config+0x5e8>
   145f4:	51 cd       	rjmp	.-1374   	; 0x14098 <display_Config+0x8a>
   145f6:	84 e9       	ldi	r24, 0x94	; 148
   145f8:	95 e1       	ldi	r25, 0x15	; 21
   145fa:	a0 e0       	ldi	r26, 0x00	; 0
   145fc:	ed b7       	in	r30, 0x3d	; 61
   145fe:	fe b7       	in	r31, 0x3e	; 62
   14600:	81 83       	std	Z+1, r24	; 0x01
   14602:	92 83       	std	Z+2, r25	; 0x02
   14604:	a3 83       	std	Z+3, r26	; 0x03
    printf("\n");
   14606:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   1460a:	82 e9       	ldi	r24, 0x92	; 146
   1460c:	95 e1       	ldi	r25, 0x15	; 21
   1460e:	a0 e0       	ldi	r26, 0x00	; 0
   14610:	ed b7       	in	r30, 0x3d	; 61
   14612:	fe b7       	in	r31, 0x3e	; 62
   14614:	81 83       	std	Z+1, r24	; 0x01
   14616:	92 83       	std	Z+2, r25	; 0x02
   14618:	a3 83       	std	Z+3, r26	; 0x03
}
   1461a:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   1461e:	60 96       	adiw	r28, 0x10	; 16
   14620:	0f b6       	in	r0, 0x3f	; 63
   14622:	f8 94       	cli
   14624:	de bf       	out	0x3e, r29	; 62
   14626:	0f be       	out	0x3f, r0	; 63
   14628:	cd bf       	out	0x3d, r28	; 61
   1462a:	df 91       	pop	r29
   1462c:	cf 91       	pop	r28
   1462e:	1f 91       	pop	r17
   14630:	0f 91       	pop	r16
   14632:	ef 90       	pop	r14
   14634:	df 90       	pop	r13
   14636:	cf 90       	pop	r12
   14638:	bf 90       	pop	r11
   1463a:	af 90       	pop	r10
   1463c:	8f 90       	pop	r8
   1463e:	7f 90       	pop	r7
   14640:	6f 90       	pop	r6
   14642:	4f 90       	pop	r4
   14644:	3f 90       	pop	r3
   14646:	2f 90       	pop	r2
   14648:	08 95       	ret

0001464a <format_drives>:

/// ===============================================
/// @brief Format devices that have no image file
/// @return  void
void format_drives()
{
   1464a:	2f 92       	push	r2
   1464c:	3f 92       	push	r3
   1464e:	4f 92       	push	r4
   14650:	6f 92       	push	r6
   14652:	7f 92       	push	r7
   14654:	8f 92       	push	r8
   14656:	af 92       	push	r10
   14658:	bf 92       	push	r11
   1465a:	cf 92       	push	r12
   1465c:	ef 92       	push	r14
   1465e:	ff 92       	push	r15
   14660:	0f 93       	push	r16
   14662:	1f 93       	push	r17
   14664:	cf 93       	push	r28
   14666:	df 93       	push	r29
   14668:	cd b7       	in	r28, 0x3d	; 61
   1466a:	de b7       	in	r29, 0x3e	; 62
   1466c:	c6 56       	subi	r28, 0x66	; 102
   1466e:	d1 09       	sbc	r29, r1
   14670:	0f b6       	in	r0, 0x3f	; 63
   14672:	f8 94       	cli
   14674:	de bf       	out	0x3e, r29	; 62
   14676:	0f be       	out	0x3f, r0	; 63
   14678:	cd bf       	out	0x3d, r28	; 61
   1467a:	2c e8       	ldi	r18, 0x8C	; 140
   1467c:	3e e1       	ldi	r19, 0x1E	; 30
   1467e:	6a 96       	adiw	r28, 0x1a	; 26
   14680:	3f af       	std	Y+63, r19	; 0x3f
   14682:	2e af       	std	Y+62, r18	; 0x3e
   14684:	6a 97       	sbiw	r28, 0x1a	; 26
    int i;
    struct stat st;
    long sectors;
    char label[32];
    int ss80 = 1;
    int amigo = 1;
   14686:	81 e0       	ldi	r24, 0x01	; 1
   14688:	90 e0       	ldi	r25, 0x00	; 0
   1468a:	a2 96       	adiw	r28, 0x22	; 34
   1468c:	9f af       	std	Y+63, r25	; 0x3f
   1468e:	8e af       	std	Y+62, r24	; 0x3e
   14690:	a2 97       	sbiw	r28, 0x22	; 34
{
    int i;
    struct stat st;
    long sectors;
    char label[32];
    int ss80 = 1;
   14692:	a1 e0       	ldi	r26, 0x01	; 1
   14694:	b0 e0       	ldi	r27, 0x00	; 0
   14696:	a0 96       	adiw	r28, 0x20	; 32
   14698:	bf af       	std	Y+63, r27	; 0x3f
   1469a:	ae af       	std	Y+62, r26	; 0x3e
   1469c:	a0 97       	sbiw	r28, 0x20	; 32
                {
                    printf("Can not use non 256 byte sectors\n");
                    continue;
                }
                sectors = Devices[i].BLOCKS;
                sprintf(label,"AMIGO%d", amigo);
   1469e:	8e e3       	ldi	r24, 0x3E	; 62
   146a0:	95 e1       	ldi	r25, 0x15	; 21
   146a2:	9c 01       	movw	r18, r24
   146a4:	40 e0       	ldi	r20, 0x00	; 0
   146a6:	a7 96       	adiw	r28, 0x27	; 39
   146a8:	2d af       	std	Y+61, r18	; 0x3d
   146aa:	3e af       	std	Y+62, r19	; 0x3e
   146ac:	4f af       	std	Y+63, r20	; 0x3f
   146ae:	a7 97       	sbiw	r28, 0x27	; 39
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
            if(stat(AMIGOp->HEADER.NAME, &st) == -1) 
            {
                if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
                {
                    printf("Can not use non 256 byte sectors\n");
   146b0:	86 e4       	ldi	r24, 0x46	; 70
   146b2:	95 e1       	ldi	r25, 0x15	; 21
   146b4:	3c 01       	movw	r6, r24
   146b6:	81 2c       	mov	r8, r1
                }
                //SS80p->VOLUME.MAX_CYLINDER;
                //SS80p->VOLUME.MAX_HEAD;
                //SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
                sprintf(label,"SS80-%d", ss80);
   146b8:	88 e6       	ldi	r24, 0x68	; 104
   146ba:	95 e1       	ldi	r25, 0x15	; 21
   146bc:	5c 01       	movw	r10, r24
   146be:	c1 2c       	mov	r12, r1

            if(stat(SS80p->HEADER.NAME, &st) == -1) 
            {
                if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
                {
                    printf("Can not use non 256 byte sectors\n");
   146c0:	80 e7       	ldi	r24, 0x70	; 112
   146c2:	95 e1       	ldi	r25, 0x15	; 21
   146c4:	1c 01       	movw	r2, r24
   146c6:	41 2c       	mov	r4, r1
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   146c8:	6a 96       	adiw	r28, 0x1a	; 26
   146ca:	ae ad       	ldd	r26, Y+62	; 0x3e
   146cc:	bf ad       	ldd	r27, Y+63	; 0x3f
   146ce:	6a 97       	sbiw	r28, 0x1a	; 26
   146d0:	8c 91       	ld	r24, X
   146d2:	88 23       	and	r24, r24
   146d4:	09 f4       	brne	.+2      	; 0x146d8 <format_drives+0x8e>
   146d6:	dc c0       	rjmp	.+440    	; 0x14890 <format_drives+0x246>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   146d8:	83 30       	cpi	r24, 0x03	; 3
   146da:	09 f0       	breq	.+2      	; 0x146de <format_drives+0x94>
   146dc:	65 c0       	rjmp	.+202    	; 0x147a8 <format_drives+0x15e>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   146de:	fd 01       	movw	r30, r26
   146e0:	07 a1       	ldd	r16, Z+39	; 0x27
   146e2:	10 a5       	ldd	r17, Z+40	; 0x28

            if(stat(SS80p->HEADER.NAME, &st) == -1) 
   146e4:	be 01       	movw	r22, r28
   146e6:	68 5f       	subi	r22, 0xF8	; 248
   146e8:	7f 4f       	sbci	r23, 0xFF	; 255
   146ea:	f8 01       	movw	r30, r16
   146ec:	82 81       	ldd	r24, Z+2	; 0x02
   146ee:	93 81       	ldd	r25, Z+3	; 0x03
   146f0:	0e 94 c9 7a 	call	0xf592	; 0xf592 <stat>
   146f4:	01 96       	adiw	r24, 0x01	; 1
   146f6:	09 f0       	breq	.+2      	; 0x146fa <format_drives+0xb0>
   146f8:	4d c0       	rjmp	.+154    	; 0x14794 <format_drives+0x14a>
            {
                if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
   146fa:	f8 01       	movw	r30, r16
   146fc:	80 89       	ldd	r24, Z+16	; 0x10
   146fe:	91 89       	ldd	r25, Z+17	; 0x11
   14700:	81 15       	cp	r24, r1
   14702:	91 40       	sbci	r25, 0x01	; 1
   14704:	31 f0       	breq	.+12     	; 0x14712 <format_drives+0xc8>
                {
                    printf("Can not use non 256 byte sectors\n");
   14706:	ed b7       	in	r30, 0x3d	; 61
   14708:	fe b7       	in	r31, 0x3e	; 62
   1470a:	21 82       	std	Z+1, r2	; 0x01
   1470c:	32 82       	std	Z+2, r3	; 0x02
   1470e:	43 82       	std	Z+3, r4	; 0x03
   14710:	6c c0       	rjmp	.+216    	; 0x147ea <format_drives+0x1a0>
                    continue;
                }
                //SS80p->VOLUME.MAX_CYLINDER;
                //SS80p->VOLUME.MAX_HEAD;
                //SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
   14712:	6a 96       	adiw	r28, 0x1a	; 26
   14714:	ee ad       	ldd	r30, Y+62	; 0x3e
   14716:	ff ad       	ldd	r31, Y+63	; 0x3f
   14718:	6a 97       	sbiw	r28, 0x1a	; 26
   1471a:	83 81       	ldd	r24, Z+3	; 0x03
   1471c:	94 81       	ldd	r25, Z+4	; 0x04
   1471e:	a5 81       	ldd	r26, Z+5	; 0x05
   14720:	b6 81       	ldd	r27, Z+6	; 0x06
   14722:	6e 96       	adiw	r28, 0x1e	; 30
   14724:	8c af       	std	Y+60, r24	; 0x3c
   14726:	9d af       	std	Y+61, r25	; 0x3d
   14728:	ae af       	std	Y+62, r26	; 0x3e
   1472a:	bf af       	std	Y+63, r27	; 0x3f
   1472c:	6e 97       	sbiw	r28, 0x1e	; 30
                sprintf(label,"SS80-%d", ss80);
   1472e:	a0 96       	adiw	r28, 0x20	; 32
   14730:	2e ad       	ldd	r18, Y+62	; 0x3e
   14732:	3f ad       	ldd	r19, Y+63	; 0x3f
   14734:	a0 97       	sbiw	r28, 0x20	; 32
   14736:	ed b7       	in	r30, 0x3d	; 61
   14738:	fe b7       	in	r31, 0x3e	; 62
   1473a:	37 83       	std	Z+7, r19	; 0x07
   1473c:	26 83       	std	Z+6, r18	; 0x06
   1473e:	a3 82       	std	Z+3, r10	; 0x03
   14740:	b4 82       	std	Z+4, r11	; 0x04
   14742:	c5 82       	std	Z+5, r12	; 0x05
   14744:	28 e3       	ldi	r18, 0x38	; 56
   14746:	30 e0       	ldi	r19, 0x00	; 0
   14748:	2c 0f       	add	r18, r28
   1474a:	3d 1f       	adc	r19, r29
   1474c:	32 83       	std	Z+2, r19	; 0x02
   1474e:	21 83       	std	Z+1, r18	; 0x01
   14750:	0e 94 d9 47 	call	0x8fb2	; 0x8fb2 <sprintf_P>
#ifdef LIF_SUPPORT
                lif_create_image(SS80p->HEADER.NAME,
   14754:	f8 01       	movw	r30, r16
   14756:	02 80       	ldd	r0, Z+2	; 0x02
   14758:	f3 81       	ldd	r31, Z+3	; 0x03
   1475a:	e0 2d       	mov	r30, r0
   1475c:	a4 96       	adiw	r28, 0x24	; 36
   1475e:	ff af       	std	Y+63, r31	; 0x3f
   14760:	ee af       	std	Y+62, r30	; 0x3e
   14762:	a4 97       	sbiw	r28, 0x24	; 36
                    label,
                    lif_dir_count(sectors), 
   14764:	6e 96       	adiw	r28, 0x1e	; 30
   14766:	6c ad       	ldd	r22, Y+60	; 0x3c
   14768:	7d ad       	ldd	r23, Y+61	; 0x3d
   1476a:	8e ad       	ldd	r24, Y+62	; 0x3e
   1476c:	9f ad       	ldd	r25, Y+63	; 0x3f
   1476e:	6e 97       	sbiw	r28, 0x1e	; 30
   14770:	3d d1       	rcall	.+634    	; 0x149ec <lif_dir_count>
   14772:	9b 01       	movw	r18, r22
   14774:	ac 01       	movw	r20, r24
                //SS80p->VOLUME.MAX_HEAD;
                //SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
                sprintf(label,"SS80-%d", ss80);
#ifdef LIF_SUPPORT
                lif_create_image(SS80p->HEADER.NAME,
   14776:	6e 96       	adiw	r28, 0x1e	; 30
   14778:	ec ac       	ldd	r14, Y+60	; 0x3c
   1477a:	fd ac       	ldd	r15, Y+61	; 0x3d
   1477c:	0e ad       	ldd	r16, Y+62	; 0x3e
   1477e:	1f ad       	ldd	r17, Y+63	; 0x3f
   14780:	6e 97       	sbiw	r28, 0x1e	; 30
   14782:	be 01       	movw	r22, r28
   14784:	68 5c       	subi	r22, 0xC8	; 200
   14786:	7f 4f       	sbci	r23, 0xFF	; 255
   14788:	a4 96       	adiw	r28, 0x24	; 36
   1478a:	8e ad       	ldd	r24, Y+62	; 0x3e
   1478c:	9f ad       	ldd	r25, Y+63	; 0x3f
   1478e:	a4 97       	sbiw	r28, 0x24	; 36
   14790:	0e 94 f8 de 	call	0x1bdf0	; 0x1bdf0 <lif_create_image>
#else
                printf("please create a SS80 LIF image with %ld sectors and 128 directory sectors\n", sectors);
#endif

            }
            ss80++;
   14794:	a0 96       	adiw	r28, 0x20	; 32
   14796:	2e ad       	ldd	r18, Y+62	; 0x3e
   14798:	3f ad       	ldd	r19, Y+63	; 0x3f
   1479a:	a0 97       	sbiw	r28, 0x20	; 32
   1479c:	2f 5f       	subi	r18, 0xFF	; 255
   1479e:	3f 4f       	sbci	r19, 0xFF	; 255
   147a0:	a0 96       	adiw	r28, 0x20	; 32
   147a2:	3f af       	std	Y+63, r19	; 0x3f
   147a4:	2e af       	std	Y+62, r18	; 0x3e
   147a6:	a0 97       	sbiw	r28, 0x20	; 32
        } // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   147a8:	6a 96       	adiw	r28, 0x1a	; 26
   147aa:	ae ad       	ldd	r26, Y+62	; 0x3e
   147ac:	bf ad       	ldd	r27, Y+63	; 0x3f
   147ae:	6a 97       	sbiw	r28, 0x1a	; 26
   147b0:	8c 91       	ld	r24, X
   147b2:	81 30       	cpi	r24, 0x01	; 1
   147b4:	09 f0       	breq	.+2      	; 0x147b8 <format_drives+0x16e>
   147b6:	6c c0       	rjmp	.+216    	; 0x14890 <format_drives+0x246>
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
   147b8:	fd 01       	movw	r30, r26
   147ba:	07 a1       	ldd	r16, Z+39	; 0x27
   147bc:	10 a5       	ldd	r17, Z+40	; 0x28
            if(stat(AMIGOp->HEADER.NAME, &st) == -1) 
   147be:	be 01       	movw	r22, r28
   147c0:	68 5f       	subi	r22, 0xF8	; 248
   147c2:	7f 4f       	sbci	r23, 0xFF	; 255
   147c4:	f8 01       	movw	r30, r16
   147c6:	82 81       	ldd	r24, Z+2	; 0x02
   147c8:	93 81       	ldd	r25, Z+3	; 0x03
   147ca:	0e 94 c9 7a 	call	0xf592	; 0xf592 <stat>
   147ce:	01 96       	adiw	r24, 0x01	; 1
   147d0:	09 f0       	breq	.+2      	; 0x147d4 <format_drives+0x18a>
   147d2:	54 c0       	rjmp	.+168    	; 0x1487c <format_drives+0x232>
            {
                if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
   147d4:	f8 01       	movw	r30, r16
   147d6:	86 81       	ldd	r24, Z+6	; 0x06
   147d8:	97 81       	ldd	r25, Z+7	; 0x07
   147da:	81 15       	cp	r24, r1
   147dc:	91 40       	sbci	r25, 0x01	; 1
   147de:	41 f0       	breq	.+16     	; 0x147f0 <format_drives+0x1a6>
                {
                    printf("Can not use non 256 byte sectors\n");
   147e0:	ed b7       	in	r30, 0x3d	; 61
   147e2:	fe b7       	in	r31, 0x3e	; 62
   147e4:	61 82       	std	Z+1, r6	; 0x01
   147e6:	72 82       	std	Z+2, r7	; 0x02
   147e8:	83 82       	std	Z+3, r8	; 0x03
   147ea:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
                    continue;
   147ee:	50 c0       	rjmp	.+160    	; 0x14890 <format_drives+0x246>
                }
                sectors = Devices[i].BLOCKS;
   147f0:	6a 96       	adiw	r28, 0x1a	; 26
   147f2:	ee ad       	ldd	r30, Y+62	; 0x3e
   147f4:	ff ad       	ldd	r31, Y+63	; 0x3f
   147f6:	6a 97       	sbiw	r28, 0x1a	; 26
   147f8:	83 81       	ldd	r24, Z+3	; 0x03
   147fa:	94 81       	ldd	r25, Z+4	; 0x04
   147fc:	a5 81       	ldd	r26, Z+5	; 0x05
   147fe:	b6 81       	ldd	r27, Z+6	; 0x06
   14800:	6e 96       	adiw	r28, 0x1e	; 30
   14802:	8c af       	std	Y+60, r24	; 0x3c
   14804:	9d af       	std	Y+61, r25	; 0x3d
   14806:	ae af       	std	Y+62, r26	; 0x3e
   14808:	bf af       	std	Y+63, r27	; 0x3f
   1480a:	6e 97       	sbiw	r28, 0x1e	; 30
                sprintf(label,"AMIGO%d", amigo);
   1480c:	a2 96       	adiw	r28, 0x22	; 34
   1480e:	2e ad       	ldd	r18, Y+62	; 0x3e
   14810:	3f ad       	ldd	r19, Y+63	; 0x3f
   14812:	a2 97       	sbiw	r28, 0x22	; 34
   14814:	ed b7       	in	r30, 0x3d	; 61
   14816:	fe b7       	in	r31, 0x3e	; 62
   14818:	37 83       	std	Z+7, r19	; 0x07
   1481a:	26 83       	std	Z+6, r18	; 0x06
   1481c:	a7 96       	adiw	r28, 0x27	; 39
   1481e:	8d ad       	ldd	r24, Y+61	; 0x3d
   14820:	9e ad       	ldd	r25, Y+62	; 0x3e
   14822:	af ad       	ldd	r26, Y+63	; 0x3f
   14824:	a7 97       	sbiw	r28, 0x27	; 39
   14826:	83 83       	std	Z+3, r24	; 0x03
   14828:	94 83       	std	Z+4, r25	; 0x04
   1482a:	a5 83       	std	Z+5, r26	; 0x05
   1482c:	28 e3       	ldi	r18, 0x38	; 56
   1482e:	30 e0       	ldi	r19, 0x00	; 0
   14830:	2c 0f       	add	r18, r28
   14832:	3d 1f       	adc	r19, r29
   14834:	32 83       	std	Z+2, r19	; 0x02
   14836:	21 83       	std	Z+1, r18	; 0x01
   14838:	0e 94 d9 47 	call	0x8fb2	; 0x8fb2 <sprintf_P>
#ifdef LIF_SUPPORT
                lif_create_image(AMIGOp->HEADER.NAME,
   1483c:	f8 01       	movw	r30, r16
   1483e:	02 80       	ldd	r0, Z+2	; 0x02
   14840:	f3 81       	ldd	r31, Z+3	; 0x03
   14842:	e0 2d       	mov	r30, r0
   14844:	a4 96       	adiw	r28, 0x24	; 36
   14846:	ff af       	std	Y+63, r31	; 0x3f
   14848:	ee af       	std	Y+62, r30	; 0x3e
   1484a:	a4 97       	sbiw	r28, 0x24	; 36
                    label,
                    lif_dir_count(sectors), 
   1484c:	6e 96       	adiw	r28, 0x1e	; 30
   1484e:	6c ad       	ldd	r22, Y+60	; 0x3c
   14850:	7d ad       	ldd	r23, Y+61	; 0x3d
   14852:	8e ad       	ldd	r24, Y+62	; 0x3e
   14854:	9f ad       	ldd	r25, Y+63	; 0x3f
   14856:	6e 97       	sbiw	r28, 0x1e	; 30
   14858:	c9 d0       	rcall	.+402    	; 0x149ec <lif_dir_count>
   1485a:	9b 01       	movw	r18, r22
   1485c:	ac 01       	movw	r20, r24
                    continue;
                }
                sectors = Devices[i].BLOCKS;
                sprintf(label,"AMIGO%d", amigo);
#ifdef LIF_SUPPORT
                lif_create_image(AMIGOp->HEADER.NAME,
   1485e:	6e 96       	adiw	r28, 0x1e	; 30
   14860:	ec ac       	ldd	r14, Y+60	; 0x3c
   14862:	fd ac       	ldd	r15, Y+61	; 0x3d
   14864:	0e ad       	ldd	r16, Y+62	; 0x3e
   14866:	1f ad       	ldd	r17, Y+63	; 0x3f
   14868:	6e 97       	sbiw	r28, 0x1e	; 30
   1486a:	be 01       	movw	r22, r28
   1486c:	68 5c       	subi	r22, 0xC8	; 200
   1486e:	7f 4f       	sbci	r23, 0xFF	; 255
   14870:	a4 96       	adiw	r28, 0x24	; 36
   14872:	8e ad       	ldd	r24, Y+62	; 0x3e
   14874:	9f ad       	ldd	r25, Y+63	; 0x3f
   14876:	a4 97       	sbiw	r28, 0x24	; 36
   14878:	0e 94 f8 de 	call	0x1bdf0	; 0x1bdf0 <lif_create_image>
                    sectors);
#else
                printf("please create a AMIGO LIF image with %ld sectors and 15 directory sectors\n", sectors);
#endif
            }
            amigo++;
   1487c:	a2 96       	adiw	r28, 0x22	; 34
   1487e:	2e ad       	ldd	r18, Y+62	; 0x3e
   14880:	3f ad       	ldd	r19, Y+63	; 0x3f
   14882:	a2 97       	sbiw	r28, 0x22	; 34
   14884:	2f 5f       	subi	r18, 0xFF	; 255
   14886:	3f 4f       	sbci	r19, 0xFF	; 255
   14888:	a2 96       	adiw	r28, 0x22	; 34
   1488a:	3f af       	std	Y+63, r19	; 0x3f
   1488c:	2e af       	std	Y+62, r18	; 0x3e
   1488e:	a2 97       	sbiw	r28, 0x22	; 34
   14890:	6a 96       	adiw	r28, 0x1a	; 26
   14892:	8e ad       	ldd	r24, Y+62	; 0x3e
   14894:	9f ad       	ldd	r25, Y+63	; 0x3f
   14896:	6a 97       	sbiw	r28, 0x1a	; 26
   14898:	8b 96       	adiw	r24, 0x2b	; 43
   1489a:	6a 96       	adiw	r28, 0x1a	; 26
   1489c:	9f af       	std	Y+63, r25	; 0x3f
   1489e:	8e af       	std	Y+62, r24	; 0x3e
   148a0:	6a 97       	sbiw	r28, 0x1a	; 26
#ifdef AMIGO
    ///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
   148a2:	a0 e9       	ldi	r26, 0x90	; 144
   148a4:	b0 e2       	ldi	r27, 0x20	; 32
   148a6:	a8 17       	cp	r26, r24
   148a8:	b9 07       	cpc	r27, r25
   148aa:	09 f0       	breq	.+2      	; 0x148ae <format_drives+0x264>
   148ac:	0d cf       	rjmp	.-486    	; 0x146c8 <format_drives+0x7e>
            }
            amigo++;
        } 
#endif // #ifdef AMIGO
    }
    printf("\n");
   148ae:	8c e3       	ldi	r24, 0x3C	; 60
   148b0:	95 e1       	ldi	r25, 0x15	; 21
   148b2:	a0 e0       	ldi	r26, 0x00	; 0
   148b4:	ed b7       	in	r30, 0x3d	; 61
   148b6:	fe b7       	in	r31, 0x3e	; 62
   148b8:	81 83       	std	Z+1, r24	; 0x01
   148ba:	92 83       	std	Z+2, r25	; 0x02
   148bc:	a3 83       	std	Z+3, r26	; 0x03
   148be:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
}
   148c2:	ca 59       	subi	r28, 0x9A	; 154
   148c4:	df 4f       	sbci	r29, 0xFF	; 255
   148c6:	0f b6       	in	r0, 0x3f	; 63
   148c8:	f8 94       	cli
   148ca:	de bf       	out	0x3e, r29	; 62
   148cc:	0f be       	out	0x3f, r0	; 63
   148ce:	cd bf       	out	0x3d, r28	; 61
   148d0:	df 91       	pop	r29
   148d2:	cf 91       	pop	r28
   148d4:	1f 91       	pop	r17
   148d6:	0f 91       	pop	r16
   148d8:	ff 90       	pop	r15
   148da:	ef 90       	pop	r14
   148dc:	cf 90       	pop	r12
   148de:	bf 90       	pop	r11
   148e0:	af 90       	pop	r10
   148e2:	8f 90       	pop	r8
   148e4:	7f 90       	pop	r7
   148e6:	6f 90       	pop	r6
   148e8:	4f 90       	pop	r4
   148ea:	3f 90       	pop	r3
   148ec:	2f 90       	pop	r2
   148ee:	08 95       	ret

000148f0 <hpdir_init>:
/// disk parameters from a single hpdir disk entry
///
///@return void
void hpdir_init()
{
    memset(hpdir.model,0,sizeof(hpdir.model) -1);		// 1
   148f0:	8f e1       	ldi	r24, 0x1F	; 31
   148f2:	e0 e9       	ldi	r30, 0x90	; 144
   148f4:	f0 e2       	ldi	r31, 0x20	; 32
   148f6:	df 01       	movw	r26, r30
   148f8:	98 2f       	mov	r25, r24
   148fa:	1d 92       	st	X+, r1
   148fc:	9a 95       	dec	r25
   148fe:	e9 f7       	brne	.-6      	; 0x148fa <hpdir_init+0xa>
    memset(hpdir.comment,0,sizeof(hpdir.comment) -1);	// 2
   14900:	9f e3       	ldi	r25, 0x3F	; 63
   14902:	e0 eb       	ldi	r30, 0xB0	; 176
   14904:	f0 e2       	ldi	r31, 0x20	; 32
   14906:	df 01       	movw	r26, r30
   14908:	1d 92       	st	X+, r1
   1490a:	9a 95       	dec	r25
   1490c:	e9 f7       	brne	.-6      	; 0x14908 <hpdir_init+0x18>
    memset(hpdir.TYPE,0,sizeof(hpdir.TYPE) -1);		// 3
   1490e:	e0 ef       	ldi	r30, 0xF0	; 240
   14910:	f0 e2       	ldi	r31, 0x20	; 32
   14912:	df 01       	movw	r26, r30
   14914:	1d 92       	st	X+, r1
   14916:	8a 95       	dec	r24
   14918:	e9 f7       	brne	.-6      	; 0x14914 <hpdir_init+0x24>
    hpdir.ID = 0;						// 4
   1491a:	10 92 10 21 	sts	0x2110, r1	; 0x802110 <hpdir+0x80>
   1491e:	10 92 11 21 	sts	0x2111, r1	; 0x802111 <hpdir+0x81>
   14922:	10 92 12 21 	sts	0x2112, r1	; 0x802112 <hpdir+0x82>
   14926:	10 92 13 21 	sts	0x2113, r1	; 0x802113 <hpdir+0x83>
	hpdir.mask_stat2 = 0;				// 5
   1492a:	10 92 14 21 	sts	0x2114, r1	; 0x802114 <hpdir+0x84>
   1492e:	10 92 15 21 	sts	0x2115, r1	; 0x802115 <hpdir+0x85>
   14932:	10 92 16 21 	sts	0x2116, r1	; 0x802116 <hpdir+0x86>
   14936:	10 92 17 21 	sts	0x2117, r1	; 0x802117 <hpdir+0x87>
	hpdir.id_stat2 = 0;					// 6
   1493a:	10 92 18 21 	sts	0x2118, r1	; 0x802118 <hpdir+0x88>
   1493e:	10 92 19 21 	sts	0x2119, r1	; 0x802119 <hpdir+0x89>
   14942:	10 92 1a 21 	sts	0x211A, r1	; 0x80211a <hpdir+0x8a>
   14946:	10 92 1b 21 	sts	0x211B, r1	; 0x80211b <hpdir+0x8b>
	hpdir.DEVICE_NUMBER = 0;			// 7
   1494a:	10 92 1c 21 	sts	0x211C, r1	; 0x80211c <hpdir+0x8c>
   1494e:	10 92 1d 21 	sts	0x211D, r1	; 0x80211d <hpdir+0x8d>
   14952:	10 92 1e 21 	sts	0x211E, r1	; 0x80211e <hpdir+0x8e>
   14956:	10 92 1f 21 	sts	0x211F, r1	; 0x80211f <hpdir+0x8f>
	hpdir.UNITS_INSTALLED = 0x8001;		// 8
   1495a:	81 e0       	ldi	r24, 0x01	; 1
   1495c:	90 e8       	ldi	r25, 0x80	; 128
   1495e:	a0 e0       	ldi	r26, 0x00	; 0
   14960:	b0 e0       	ldi	r27, 0x00	; 0
   14962:	80 93 20 21 	sts	0x2120, r24	; 0x802120 <hpdir+0x90>
   14966:	90 93 21 21 	sts	0x2121, r25	; 0x802121 <hpdir+0x91>
   1496a:	a0 93 22 21 	sts	0x2122, r26	; 0x802122 <hpdir+0x92>
   1496e:	b0 93 23 21 	sts	0x2123, r27	; 0x802123 <hpdir+0x93>
	hpdir.CYLINDERS = 0;  				// 9
   14972:	10 92 24 21 	sts	0x2124, r1	; 0x802124 <hpdir+0x94>
   14976:	10 92 25 21 	sts	0x2125, r1	; 0x802125 <hpdir+0x95>
   1497a:	10 92 26 21 	sts	0x2126, r1	; 0x802126 <hpdir+0x96>
   1497e:	10 92 27 21 	sts	0x2127, r1	; 0x802127 <hpdir+0x97>
	hpdir.HEADS= 0;	     				// 10
   14982:	10 92 28 21 	sts	0x2128, r1	; 0x802128 <hpdir+0x98>
   14986:	10 92 29 21 	sts	0x2129, r1	; 0x802129 <hpdir+0x99>
   1498a:	10 92 2a 21 	sts	0x212A, r1	; 0x80212a <hpdir+0x9a>
   1498e:	10 92 2b 21 	sts	0x212B, r1	; 0x80212b <hpdir+0x9b>
	hpdir.SECTORS= 0;    				// 11
   14992:	10 92 2c 21 	sts	0x212C, r1	; 0x80212c <hpdir+0x9c>
   14996:	10 92 2d 21 	sts	0x212D, r1	; 0x80212d <hpdir+0x9d>
   1499a:	10 92 2e 21 	sts	0x212E, r1	; 0x80212e <hpdir+0x9e>
   1499e:	10 92 2f 21 	sts	0x212F, r1	; 0x80212f <hpdir+0x9f>
	hpdir.BYTES_PER_SECTOR = 0;			// 12
   149a2:	10 92 30 21 	sts	0x2130, r1	; 0x802130 <hpdir+0xa0>
   149a6:	10 92 31 21 	sts	0x2131, r1	; 0x802131 <hpdir+0xa1>
   149aa:	10 92 32 21 	sts	0x2132, r1	; 0x802132 <hpdir+0xa2>
   149ae:	10 92 33 21 	sts	0x2133, r1	; 0x802133 <hpdir+0xa3>
	hpdir.INTERLEAVE = 0;				// 13
   149b2:	10 92 34 21 	sts	0x2134, r1	; 0x802134 <hpdir+0xa4>
   149b6:	10 92 35 21 	sts	0x2135, r1	; 0x802135 <hpdir+0xa5>
   149ba:	10 92 36 21 	sts	0x2136, r1	; 0x802136 <hpdir+0xa6>
   149be:	10 92 37 21 	sts	0x2137, r1	; 0x802137 <hpdir+0xa7>
    hpdir.FIXED = 1;					// 14 ALWAYS 1
   149c2:	81 e0       	ldi	r24, 0x01	; 1
   149c4:	90 e0       	ldi	r25, 0x00	; 0
   149c6:	a0 e0       	ldi	r26, 0x00	; 0
   149c8:	b0 e0       	ldi	r27, 0x00	; 0
   149ca:	80 93 38 21 	sts	0x2138, r24	; 0x802138 <hpdir+0xa8>
   149ce:	90 93 39 21 	sts	0x2139, r25	; 0x802139 <hpdir+0xa9>
   149d2:	a0 93 3a 21 	sts	0x213A, r26	; 0x80213a <hpdir+0xaa>
   149d6:	b0 93 3b 21 	sts	0x213B, r27	; 0x80213b <hpdir+0xab>

	// Computed values
    hpdir.BLOCKS = 0;
   149da:	10 92 3c 21 	sts	0x213C, r1	; 0x80213c <hpdir+0xac>
   149de:	10 92 3d 21 	sts	0x213D, r1	; 0x80213d <hpdir+0xad>
   149e2:	10 92 3e 21 	sts	0x213E, r1	; 0x80213e <hpdir+0xae>
   149e6:	10 92 3f 21 	sts	0x213F, r1	; 0x80213f <hpdir+0xaf>
   149ea:	08 95       	ret

000149ec <lif_dir_count>:
///@param[in] blocks: size of LIF image in total
///
///@return Size of LIF directory in blocks
long lif_dir_count(long blocks)
{
	int scale = 0;
   149ec:	20 e0       	ldi	r18, 0x00	; 0
   149ee:	30 e0       	ldi	r19, 0x00	; 0
	long num = 1;
	while(blocks)
   149f0:	61 15       	cp	r22, r1
   149f2:	71 05       	cpc	r23, r1
   149f4:	81 05       	cpc	r24, r1
   149f6:	91 05       	cpc	r25, r1
   149f8:	39 f0       	breq	.+14     	; 0x14a08 <lif_dir_count+0x1c>
	{
		scale++;
   149fa:	2f 5f       	subi	r18, 0xFF	; 255
   149fc:	3f 4f       	sbci	r19, 0xFF	; 255
 		blocks >>= 1;
   149fe:	95 95       	asr	r25
   14a00:	87 95       	ror	r24
   14a02:	77 95       	ror	r23
   14a04:	67 95       	ror	r22
   14a06:	f4 cf       	rjmp	.-24     	; 0x149f0 <lif_dir_count+0x4>
	}
	scale>>=1;
   14a08:	35 95       	asr	r19
   14a0a:	27 95       	ror	r18
///
///@return Size of LIF directory in blocks
long lif_dir_count(long blocks)
{
	int scale = 0;
	long num = 1;
   14a0c:	61 e0       	ldi	r22, 0x01	; 1
   14a0e:	70 e0       	ldi	r23, 0x00	; 0
   14a10:	80 e0       	ldi	r24, 0x00	; 0
   14a12:	90 e0       	ldi	r25, 0x00	; 0
	{
		scale++;
 		blocks >>= 1;
	}
	scale>>=1;
	while(scale--)
   14a14:	21 50       	subi	r18, 0x01	; 1
   14a16:	31 09       	sbc	r19, r1
   14a18:	28 f0       	brcs	.+10     	; 0x14a24 <lif_dir_count+0x38>
		num <<=1;
   14a1a:	66 0f       	add	r22, r22
   14a1c:	77 1f       	adc	r23, r23
   14a1e:	88 1f       	adc	r24, r24
   14a20:	99 1f       	adc	r25, r25
   14a22:	f8 cf       	rjmp	.-16     	; 0x14a14 <lif_dir_count+0x28>
	return(num);
}
   14a24:	08 95       	ret

00014a26 <hpdir_find_drive>:
///
///@param[in] model: model string
///
///@return 1 on sucess or 0 on fail
int hpdir_find_drive(char *model, int list, int verbose)
{
   14a26:	2f 92       	push	r2
   14a28:	3f 92       	push	r3
   14a2a:	4f 92       	push	r4
   14a2c:	5f 92       	push	r5
   14a2e:	6f 92       	push	r6
   14a30:	8f 92       	push	r8
   14a32:	9f 92       	push	r9
   14a34:	af 92       	push	r10
   14a36:	bf 92       	push	r11
   14a38:	cf 92       	push	r12
   14a3a:	df 92       	push	r13
   14a3c:	ef 92       	push	r14
   14a3e:	ff 92       	push	r15
   14a40:	0f 93       	push	r16
   14a42:	1f 93       	push	r17
   14a44:	cf 93       	push	r28
   14a46:	df 93       	push	r29
   14a48:	cd b7       	in	r28, 0x3d	; 61
   14a4a:	de b7       	in	r29, 0x3e	; 62
   14a4c:	c9 58       	subi	r28, 0x89	; 137
   14a4e:	d1 40       	sbci	r29, 0x01	; 1
   14a50:	0f b6       	in	r0, 0x3f	; 63
   14a52:	f8 94       	cli
   14a54:	de bf       	out	0x3e, r29	; 62
   14a56:	0f be       	out	0x3f, r0	; 63
   14a58:	cd bf       	out	0x3d, r28	; 61
   14a5a:	6c 01       	movw	r12, r24
   14a5c:	c8 57       	subi	r28, 0x78	; 120
   14a5e:	de 4f       	sbci	r29, 0xFE	; 254
   14a60:	79 83       	std	Y+1, r23	; 0x01
   14a62:	68 83       	st	Y, r22
   14a64:	c8 58       	subi	r28, 0x88	; 136
   14a66:	d1 40       	sbci	r29, 0x01	; 1
	FILE *cfg;
	char *ptr;
    char str[256];
    char token[128];

	hpdir_init();
   14a68:	5a 01       	movw	r10, r20

	cfg = fopen("hpdir.ini","rb");
   14a6a:	42 df       	rcall	.-380    	; 0x148f0 <hpdir_init>
   14a6c:	6c e1       	ldi	r22, 0x1C	; 28
   14a6e:	78 e0       	ldi	r23, 0x08	; 8
   14a70:	86 e7       	ldi	r24, 0x76	; 118
   14a72:	9f e0       	ldi	r25, 0x0F	; 15
   14a74:	0e 94 c4 7f 	call	0xff88	; 0xff88 <fopen>

#ifndef LIF_STAND_ALONE
	if(cfg == NULL)
   14a78:	7c 01       	movw	r14, r24
   14a7a:	89 2b       	or	r24, r25
		cfg = fopen("/hpdir.ini","rb");
   14a7c:	49 f4       	brne	.+18     	; 0x14a90 <hpdir_find_drive+0x6a>
   14a7e:	6c e1       	ldi	r22, 0x1C	; 28
   14a80:	78 e0       	ldi	r23, 0x08	; 8
   14a82:	85 e7       	ldi	r24, 0x75	; 117
   14a84:	9f e0       	ldi	r25, 0x0F	; 15
   14a86:	0e 94 c4 7f 	call	0xff88	; 0xff88 <fopen>
        strcat  (name, "/hpdir.ini");
        cfg = fopen(name, "rb");
    }
#endif

	if(cfg == NULL)
   14a8a:	7c 01       	movw	r14, r24
   14a8c:	89 2b       	or	r24, r25
		// MODEL something else
		ptr = get_token(ptr, token, 	sizeof(token)-2);

        if(MATCHI(token,"[driveinfo]"))
        {
			driveinfo = 1;
   14a8e:	51 f0       	breq	.+20     	; 0x14aa4 <hpdir_find_drive+0x7e>
   14a90:	21 2c       	mov	r2, r1

		if(*ptr == '[' && driveinfo == 1 )
                break;

		// MODEL something else
		ptr = get_token(ptr, token, 	sizeof(token)-2);
   14a92:	31 2c       	mov	r3, r1
   14a94:	8e 01       	movw	r16, r28
   14a96:	08 5f       	subi	r16, 0xF8	; 248
		if( driveinfo != 1)
			continue;

        if(list)
        {
            printf("%s %s\n", token, ptr);
   14a98:	1e 4f       	sbci	r17, 0xFE	; 254
   14a9a:	81 e7       	ldi	r24, 0x71	; 113
   14a9c:	90 e2       	ldi	r25, 0x20	; 32
   14a9e:	2c 01       	movw	r4, r24
   14aa0:	61 2c       	mov	r6, r1
    }
#endif

	if(cfg == NULL)
	{
		if(verbose)
   14aa2:	1e c0       	rjmp	.+60     	; 0x14ae0 <hpdir_find_drive+0xba>
   14aa4:	ab 28       	or	r10, r11
   14aa6:	09 f4       	brne	.+2      	; 0x14aaa <hpdir_find_drive+0x84>
			printf("Error: hpdir.ini not found!\n");
   14aa8:	69 c1       	rjmp	.+722    	; 0x14d7c <hpdir_find_drive+0x356>
   14aaa:	88 e7       	ldi	r24, 0x78	; 120
   14aac:	90 e2       	ldi	r25, 0x20	; 32
   14aae:	a0 e0       	ldi	r26, 0x00	; 0
   14ab0:	ed b7       	in	r30, 0x3d	; 61
   14ab2:	fe b7       	in	r31, 0x3e	; 62
   14ab4:	81 83       	std	Z+1, r24	; 0x01
   14ab6:	92 83       	std	Z+2, r25	; 0x02
   14ab8:	a3 83       	std	Z+3, r26	; 0x03
   14aba:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
		errors = 0;
        ptr = str;

        trim_tail(ptr);
   14abe:	5e c1       	rjmp	.+700    	; 0x14d7c <hpdir_find_drive+0x356>
   14ac0:	ce 01       	movw	r24, r28
   14ac2:	08 96       	adiw	r24, 0x08	; 8
   14ac4:	0e 94 c3 33 	call	0x6786	; 0x6786 <trim_tail>
        ptr = skipspaces(ptr);
   14ac8:	ce 01       	movw	r24, r28
   14aca:	08 96       	adiw	r24, 0x08	; 8
   14acc:	0e 94 d3 33 	call	0x67a6	; 0x67a6 <skipspaces>

        len = strlen(ptr);
   14ad0:	fc 01       	movw	r30, r24
   14ad2:	01 90       	ld	r0, Z+
   14ad4:	00 20       	and	r0, r0
   14ad6:	e9 f7       	brne	.-6      	; 0x14ad2 <hpdir_find_drive+0xac>
        if(!len)
   14ad8:	31 97       	sbiw	r30, 0x01	; 1
   14ada:	8e 17       	cp	r24, r30
   14adc:	9f 07       	cpc	r25, r31
		return(0);
	}

	// printf("Searching /hpdir.ini for model:%s\n", model);

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   14ade:	51 f4       	brne	.+20     	; 0x14af4 <hpdir_find_drive+0xce>
   14ae0:	a7 01       	movw	r20, r14
   14ae2:	6e ef       	ldi	r22, 0xFE	; 254
   14ae4:	70 e0       	ldi	r23, 0x00	; 0
   14ae6:	ce 01       	movw	r24, r28
   14ae8:	08 96       	adiw	r24, 0x08	; 8
   14aea:	0e 94 dc 77 	call	0xefb8	; 0xefb8 <fgets>
   14aee:	89 2b       	or	r24, r25
   14af0:	39 f7       	brne	.-50     	; 0x14ac0 <hpdir_find_drive+0x9a>
        len = strlen(ptr);
        if(!len)
            continue;

        // Skip comments
        if(*ptr == ';' || *ptr == '#' )
   14af2:	0c c0       	rjmp	.+24     	; 0x14b0c <hpdir_find_drive+0xe6>
   14af4:	fc 01       	movw	r30, r24
   14af6:	20 81       	ld	r18, Z
   14af8:	2b 33       	cpi	r18, 0x3B	; 59
   14afa:	91 f3       	breq	.-28     	; 0x14ae0 <hpdir_find_drive+0xba>
   14afc:	23 32       	cpi	r18, 0x23	; 35
            continue;

		if(*ptr == '[' && driveinfo == 1 )
   14afe:	81 f3       	breq	.-32     	; 0x14ae0 <hpdir_find_drive+0xba>
   14b00:	2b 35       	cpi	r18, 0x5B	; 91
   14b02:	31 f4       	brne	.+12     	; 0x14b10 <hpdir_find_drive+0xea>
   14b04:	f1 e0       	ldi	r31, 0x01	; 1
   14b06:	2f 16       	cp	r2, r31
   14b08:	31 04       	cpc	r3, r1
int hpdir_find_drive(char *model, int list, int verbose)
{
    int len;
    int errors = 0;
    int driveinfo=0;
    int found = 0;
   14b0a:	11 f4       	brne	.+4      	; 0x14b10 <hpdir_find_drive+0xea>
   14b0c:	00 e0       	ldi	r16, 0x00	; 0

		if(*ptr == '[' && driveinfo == 1 )
                break;

		// MODEL something else
		ptr = get_token(ptr, token, 	sizeof(token)-2);
   14b0e:	30 c1       	rjmp	.+608    	; 0x14d70 <hpdir_find_drive+0x34a>
   14b10:	4e e7       	ldi	r20, 0x7E	; 126
   14b12:	50 e0       	ldi	r21, 0x00	; 0
   14b14:	b8 01       	movw	r22, r16
   14b16:	0e 94 a5 34 	call	0x694a	; 0x694a <get_token>

        if(MATCHI(token,"[driveinfo]"))
   14b1a:	4c 01       	movw	r8, r24
   14b1c:	60 e8       	ldi	r22, 0x80	; 128
   14b1e:	7f e0       	ldi	r23, 0x0F	; 15
   14b20:	c8 01       	movw	r24, r16
   14b22:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <MATCHI>
   14b26:	89 2b       	or	r24, r25
        {
			driveinfo = 1;
   14b28:	21 f0       	breq	.+8      	; 0x14b32 <hpdir_find_drive+0x10c>
   14b2a:	22 24       	eor	r2, r2
   14b2c:	23 94       	inc	r2
   14b2e:	31 2c       	mov	r3, r1
            continue;
        }

		if( driveinfo != 1)
   14b30:	d7 cf       	rjmp	.-82     	; 0x14ae0 <hpdir_find_drive+0xba>
   14b32:	21 e0       	ldi	r18, 0x01	; 1
   14b34:	22 16       	cp	r2, r18
   14b36:	31 04       	cpc	r3, r1
			continue;

        if(list)
   14b38:	99 f6       	brne	.-90     	; 0x14ae0 <hpdir_find_drive+0xba>
   14b3a:	c8 57       	subi	r28, 0x78	; 120
   14b3c:	de 4f       	sbci	r29, 0xFE	; 254
   14b3e:	88 81       	ld	r24, Y
   14b40:	99 81       	ldd	r25, Y+1	; 0x01
   14b42:	c8 58       	subi	r28, 0x88	; 136
   14b44:	d1 40       	sbci	r29, 0x01	; 1
   14b46:	89 2b       	or	r24, r25
        {
            printf("%s %s\n", token, ptr);
   14b48:	61 f0       	breq	.+24     	; 0x14b62 <hpdir_find_drive+0x13c>
   14b4a:	ed b7       	in	r30, 0x3d	; 61
   14b4c:	fe b7       	in	r31, 0x3e	; 62
   14b4e:	97 82       	std	Z+7, r9	; 0x07
   14b50:	86 82       	std	Z+6, r8	; 0x06
   14b52:	15 83       	std	Z+5, r17	; 0x05
   14b54:	04 83       	std	Z+4, r16	; 0x04
   14b56:	41 82       	std	Z+1, r4	; 0x01
   14b58:	52 82       	std	Z+2, r5	; 0x02
   14b5a:	63 82       	std	Z+3, r6	; 0x03
   14b5c:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
            continue;
        }

		if ( ! MATCHI(model,token) )
   14b60:	bf cf       	rjmp	.-130    	; 0x14ae0 <hpdir_find_drive+0xba>
   14b62:	b8 01       	movw	r22, r16
   14b64:	c6 01       	movw	r24, r12
   14b66:	0e 94 f1 33 	call	0x67e2	; 0x67e2 <MATCHI>
			continue;

		hpdir_init();
   14b6a:	89 2b       	or	r24, r25
   14b6c:	f1 f2       	breq	.-68     	; 0x14b2a <hpdir_find_drive+0x104>

		if(verbose)
   14b6e:	c0 de       	rcall	.-640    	; 0x148f0 <hpdir_init>
   14b70:	ab 28       	or	r10, r11
			printf("Found Model: %s\n", model);
   14b72:	61 f0       	breq	.+24     	; 0x14b8c <hpdir_find_drive+0x166>
   14b74:	ed b7       	in	r30, 0x3d	; 61
   14b76:	fe b7       	in	r31, 0x3e	; 62
   14b78:	d5 82       	std	Z+5, r13	; 0x05
   14b7a:	c4 82       	std	Z+4, r12	; 0x04
   14b7c:	80 e6       	ldi	r24, 0x60	; 96
   14b7e:	90 e2       	ldi	r25, 0x20	; 32
   14b80:	a0 e0       	ldi	r26, 0x00	; 0
   14b82:	81 83       	std	Z+1, r24	; 0x01
   14b84:	92 83       	std	Z+2, r25	; 0x02
   14b86:	a3 83       	std	Z+3, r26	; 0x03
   14b88:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>

		strncpy(hpdir.model,token,sizeof(hpdir.model)-2);				// 1 Model
   14b8c:	4e e1       	ldi	r20, 0x1E	; 30
   14b8e:	50 e0       	ldi	r21, 0x00	; 0
   14b90:	b8 01       	movw	r22, r16
   14b92:	80 e9       	ldi	r24, 0x90	; 144
   14b94:	90 e2       	ldi	r25, 0x20	; 32
   14b96:	0e 94 f0 32 	call	0x65e0	; 0x65e0 <strncpy>

		ptr = get_token(ptr, token, 	sizeof(token)-2);				// =
   14b9a:	4e e7       	ldi	r20, 0x7E	; 126
   14b9c:	50 e0       	ldi	r21, 0x00	; 0
   14b9e:	b8 01       	movw	r22, r16
   14ba0:	c4 01       	movw	r24, r8
   14ba2:	0e 94 a5 34 	call	0x694a	; 0x694a <get_token>

		ptr = get_token(ptr, hpdir.comment, sizeof(hpdir.comment)-2);	// 2 Comment
   14ba6:	4e e3       	ldi	r20, 0x3E	; 62
   14ba8:	50 e0       	ldi	r21, 0x00	; 0
   14baa:	60 eb       	ldi	r22, 0xB0	; 176
   14bac:	70 e2       	ldi	r23, 0x20	; 32
   14bae:	0e 94 a5 34 	call	0x694a	; 0x694a <get_token>

		ptr = get_token(ptr, hpdir.TYPE,  sizeof(hpdir.TYPE)-2);		// 3 AMIGO/SS80/CS80
   14bb2:	4e e1       	ldi	r20, 0x1E	; 30
   14bb4:	50 e0       	ldi	r21, 0x00	; 0
   14bb6:	60 ef       	ldi	r22, 0xF0	; 240
   14bb8:	70 e2       	ldi	r23, 0x20	; 32
   14bba:	0e 94 a5 34 	call	0x694a	; 0x694a <get_token>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 4 Identify ID
   14bbe:	4e e7       	ldi	r20, 0x7E	; 126
   14bc0:	50 e0       	ldi	r21, 0x00	; 0
   14bc2:	b8 01       	movw	r22, r16
   14bc4:	0e 94 a5 34 	call	0x694a	; 0x694a <get_token>
		hpdir.ID = get_value(token);
   14bc8:	6c 01       	movw	r12, r24
   14bca:	c8 01       	movw	r24, r16
   14bcc:	0e 94 e8 34 	call	0x69d0	; 0x69d0 <get_value>
   14bd0:	60 93 10 21 	sts	0x2110, r22	; 0x802110 <hpdir+0x80>
   14bd4:	70 93 11 21 	sts	0x2111, r23	; 0x802111 <hpdir+0x81>
   14bd8:	80 93 12 21 	sts	0x2112, r24	; 0x802112 <hpdir+0x82>
   14bdc:	90 93 13 21 	sts	0x2113, r25	; 0x802113 <hpdir+0x83>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 5 MASK STAT 2
   14be0:	4e e7       	ldi	r20, 0x7E	; 126
   14be2:	50 e0       	ldi	r21, 0x00	; 0
   14be4:	b8 01       	movw	r22, r16
   14be6:	c6 01       	movw	r24, r12
   14be8:	0e 94 a5 34 	call	0x694a	; 0x694a <get_token>
		hpdir.mask_stat2 = get_value(token);
   14bec:	6c 01       	movw	r12, r24
   14bee:	c8 01       	movw	r24, r16
   14bf0:	0e 94 e8 34 	call	0x69d0	; 0x69d0 <get_value>
   14bf4:	60 93 14 21 	sts	0x2114, r22	; 0x802114 <hpdir+0x84>
   14bf8:	70 93 15 21 	sts	0x2115, r23	; 0x802115 <hpdir+0x85>
   14bfc:	80 93 16 21 	sts	0x2116, r24	; 0x802116 <hpdir+0x86>
   14c00:	90 93 17 21 	sts	0x2117, r25	; 0x802117 <hpdir+0x87>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 6 STAT2
   14c04:	4e e7       	ldi	r20, 0x7E	; 126
   14c06:	50 e0       	ldi	r21, 0x00	; 0
   14c08:	b8 01       	movw	r22, r16
   14c0a:	c6 01       	movw	r24, r12
   14c0c:	0e 94 a5 34 	call	0x694a	; 0x694a <get_token>
		hpdir.id_stat2 = get_value(token);
   14c10:	6c 01       	movw	r12, r24
   14c12:	c8 01       	movw	r24, r16
   14c14:	0e 94 e8 34 	call	0x69d0	; 0x69d0 <get_value>
   14c18:	60 93 18 21 	sts	0x2118, r22	; 0x802118 <hpdir+0x88>
   14c1c:	70 93 19 21 	sts	0x2119, r23	; 0x802119 <hpdir+0x89>
   14c20:	80 93 1a 21 	sts	0x211A, r24	; 0x80211a <hpdir+0x8a>
   14c24:	90 93 1b 21 	sts	0x211B, r25	; 0x80211b <hpdir+0x8b>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 7 BCD include model number
   14c28:	4e e7       	ldi	r20, 0x7E	; 126
   14c2a:	50 e0       	ldi	r21, 0x00	; 0
   14c2c:	b8 01       	movw	r22, r16
   14c2e:	c6 01       	movw	r24, r12
   14c30:	0e 94 a5 34 	call	0x694a	; 0x694a <get_token>
		hpdir.DEVICE_NUMBER = get_value(token);
   14c34:	6c 01       	movw	r12, r24
   14c36:	c8 01       	movw	r24, r16
   14c38:	0e 94 e8 34 	call	0x69d0	; 0x69d0 <get_value>
   14c3c:	60 93 1c 21 	sts	0x211C, r22	; 0x80211c <hpdir+0x8c>
   14c40:	70 93 1d 21 	sts	0x211D, r23	; 0x80211d <hpdir+0x8d>
   14c44:	80 93 1e 21 	sts	0x211E, r24	; 0x80211e <hpdir+0x8e>
   14c48:	90 93 1f 21 	sts	0x211F, r25	; 0x80211f <hpdir+0x8f>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 8 Units installed
   14c4c:	4e e7       	ldi	r20, 0x7E	; 126
   14c4e:	50 e0       	ldi	r21, 0x00	; 0
   14c50:	b8 01       	movw	r22, r16
   14c52:	c6 01       	movw	r24, r12
   14c54:	0e 94 a5 34 	call	0x694a	; 0x694a <get_token>
		hpdir.UNITS_INSTALLED = get_value(token);
   14c58:	6c 01       	movw	r12, r24
   14c5a:	c8 01       	movw	r24, r16
   14c5c:	0e 94 e8 34 	call	0x69d0	; 0x69d0 <get_value>
   14c60:	60 93 20 21 	sts	0x2120, r22	; 0x802120 <hpdir+0x90>
   14c64:	70 93 21 21 	sts	0x2121, r23	; 0x802121 <hpdir+0x91>
   14c68:	80 93 22 21 	sts	0x2122, r24	; 0x802122 <hpdir+0x92>
   14c6c:	90 93 23 21 	sts	0x2123, r25	; 0x802123 <hpdir+0x93>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 9 Cylinders
   14c70:	4e e7       	ldi	r20, 0x7E	; 126
   14c72:	50 e0       	ldi	r21, 0x00	; 0
   14c74:	b8 01       	movw	r22, r16
   14c76:	c6 01       	movw	r24, r12
   14c78:	0e 94 a5 34 	call	0x694a	; 0x694a <get_token>
		hpdir.CYLINDERS = get_value(token);
   14c7c:	6c 01       	movw	r12, r24
   14c7e:	c8 01       	movw	r24, r16
   14c80:	0e 94 e8 34 	call	0x69d0	; 0x69d0 <get_value>
   14c84:	60 93 24 21 	sts	0x2124, r22	; 0x802124 <hpdir+0x94>
   14c88:	70 93 25 21 	sts	0x2125, r23	; 0x802125 <hpdir+0x95>
   14c8c:	80 93 26 21 	sts	0x2126, r24	; 0x802126 <hpdir+0x96>
   14c90:	90 93 27 21 	sts	0x2127, r25	; 0x802127 <hpdir+0x97>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 10 Heads
   14c94:	4e e7       	ldi	r20, 0x7E	; 126
   14c96:	50 e0       	ldi	r21, 0x00	; 0
   14c98:	b8 01       	movw	r22, r16
   14c9a:	c6 01       	movw	r24, r12
   14c9c:	0e 94 a5 34 	call	0x694a	; 0x694a <get_token>
		hpdir.HEADS = get_value(token);
   14ca0:	6c 01       	movw	r12, r24
   14ca2:	c8 01       	movw	r24, r16
   14ca4:	0e 94 e8 34 	call	0x69d0	; 0x69d0 <get_value>
   14ca8:	60 93 28 21 	sts	0x2128, r22	; 0x802128 <hpdir+0x98>
   14cac:	70 93 29 21 	sts	0x2129, r23	; 0x802129 <hpdir+0x99>
   14cb0:	80 93 2a 21 	sts	0x212A, r24	; 0x80212a <hpdir+0x9a>
   14cb4:	90 93 2b 21 	sts	0x212B, r25	; 0x80212b <hpdir+0x9b>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 11 Sectors
   14cb8:	4e e7       	ldi	r20, 0x7E	; 126
   14cba:	50 e0       	ldi	r21, 0x00	; 0
   14cbc:	b8 01       	movw	r22, r16
   14cbe:	c6 01       	movw	r24, r12
   14cc0:	0e 94 a5 34 	call	0x694a	; 0x694a <get_token>
		hpdir.SECTORS = get_value(token);
   14cc4:	6c 01       	movw	r12, r24
   14cc6:	c8 01       	movw	r24, r16
   14cc8:	0e 94 e8 34 	call	0x69d0	; 0x69d0 <get_value>
   14ccc:	60 93 2c 21 	sts	0x212C, r22	; 0x80212c <hpdir+0x9c>
   14cd0:	70 93 2d 21 	sts	0x212D, r23	; 0x80212d <hpdir+0x9d>
   14cd4:	80 93 2e 21 	sts	0x212E, r24	; 0x80212e <hpdir+0x9e>
   14cd8:	90 93 2f 21 	sts	0x212F, r25	; 0x80212f <hpdir+0x9f>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 12 Bytes Per Block/Sector
   14cdc:	4e e7       	ldi	r20, 0x7E	; 126
   14cde:	50 e0       	ldi	r21, 0x00	; 0
   14ce0:	b8 01       	movw	r22, r16
   14ce2:	c6 01       	movw	r24, r12
   14ce4:	0e 94 a5 34 	call	0x694a	; 0x694a <get_token>
		hpdir.BYTES_PER_SECTOR = get_value(token);
   14ce8:	6c 01       	movw	r12, r24
   14cea:	c8 01       	movw	r24, r16
   14cec:	0e 94 e8 34 	call	0x69d0	; 0x69d0 <get_value>
   14cf0:	60 93 30 21 	sts	0x2130, r22	; 0x802130 <hpdir+0xa0>
   14cf4:	70 93 31 21 	sts	0x2131, r23	; 0x802131 <hpdir+0xa1>
   14cf8:	80 93 32 21 	sts	0x2132, r24	; 0x802132 <hpdir+0xa2>
   14cfc:	90 93 33 21 	sts	0x2133, r25	; 0x802133 <hpdir+0xa3>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 13 Interleave
   14d00:	4e e7       	ldi	r20, 0x7E	; 126
   14d02:	50 e0       	ldi	r21, 0x00	; 0
   14d04:	b8 01       	movw	r22, r16
   14d06:	c6 01       	movw	r24, r12
   14d08:	0e 94 a5 34 	call	0x694a	; 0x694a <get_token>
		hpdir.INTERLEAVE = get_value(token);
   14d0c:	c8 01       	movw	r24, r16
   14d0e:	0e 94 e8 34 	call	0x69d0	; 0x69d0 <get_value>
   14d12:	60 93 34 21 	sts	0x2134, r22	; 0x802134 <hpdir+0xa4>
   14d16:	70 93 35 21 	sts	0x2135, r23	; 0x802135 <hpdir+0xa5>
   14d1a:	80 93 36 21 	sts	0x2136, r24	; 0x802136 <hpdir+0xa6>
   14d1e:	90 93 37 21 	sts	0x2137, r25	; 0x802137 <hpdir+0xa7>

		// Computed values
		hpdir.BLOCKS = ( hpdir.CYLINDERS * hpdir.HEADS * hpdir.SECTORS );
   14d22:	20 91 24 21 	lds	r18, 0x2124	; 0x802124 <hpdir+0x94>
   14d26:	30 91 25 21 	lds	r19, 0x2125	; 0x802125 <hpdir+0x95>
   14d2a:	40 91 26 21 	lds	r20, 0x2126	; 0x802126 <hpdir+0x96>
   14d2e:	50 91 27 21 	lds	r21, 0x2127	; 0x802127 <hpdir+0x97>
   14d32:	60 91 28 21 	lds	r22, 0x2128	; 0x802128 <hpdir+0x98>
   14d36:	70 91 29 21 	lds	r23, 0x2129	; 0x802129 <hpdir+0x99>
   14d3a:	80 91 2a 21 	lds	r24, 0x212A	; 0x80212a <hpdir+0x9a>
   14d3e:	90 91 2b 21 	lds	r25, 0x212B	; 0x80212b <hpdir+0x9b>
   14d42:	0e 94 55 e4 	call	0x1c8aa	; 0x1c8aa <__mulsi3>
   14d46:	9b 01       	movw	r18, r22
   14d48:	ac 01       	movw	r20, r24
   14d4a:	60 91 2c 21 	lds	r22, 0x212C	; 0x80212c <hpdir+0x9c>
   14d4e:	70 91 2d 21 	lds	r23, 0x212D	; 0x80212d <hpdir+0x9d>
   14d52:	80 91 2e 21 	lds	r24, 0x212E	; 0x80212e <hpdir+0x9e>
   14d56:	90 91 2f 21 	lds	r25, 0x212F	; 0x80212f <hpdir+0x9f>
   14d5a:	0e 94 55 e4 	call	0x1c8aa	; 0x1c8aa <__mulsi3>
   14d5e:	60 93 3c 21 	sts	0x213C, r22	; 0x80213c <hpdir+0xac>
   14d62:	70 93 3d 21 	sts	0x213D, r23	; 0x80213d <hpdir+0xad>
   14d66:	80 93 3e 21 	sts	0x213E, r24	; 0x80213e <hpdir+0xae>
   14d6a:	90 93 3f 21 	sts	0x213F, r25	; 0x80213f <hpdir+0xaf>
		{
			if(verbose)
				printf("Error /hpdir.ini parsing\n");
			break;
		}
		found = 1;
   14d6e:	01 e0       	ldi	r16, 0x01	; 1
		break;

	}	// while
	fclose(cfg);
   14d70:	10 e0       	ldi	r17, 0x00	; 0
   14d72:	c7 01       	movw	r24, r14
   14d74:	0e 94 6e 7e 	call	0xfcdc	; 0xfcdc <fclose>
	return(found);
   14d78:	c8 01       	movw	r24, r16

	if(cfg == NULL)
	{
		if(verbose)
			printf("Error: hpdir.ini not found!\n");
		return(0);
   14d7a:	02 c0       	rjmp	.+4      	; 0x14d80 <hpdir_find_drive+0x35a>
   14d7c:	80 e0       	ldi	r24, 0x00	; 0
		break;

	}	// while
	fclose(cfg);
	return(found);
}
   14d7e:	90 e0       	ldi	r25, 0x00	; 0
   14d80:	c7 57       	subi	r28, 0x77	; 119
   14d82:	de 4f       	sbci	r29, 0xFE	; 254
   14d84:	0f b6       	in	r0, 0x3f	; 63
   14d86:	f8 94       	cli
   14d88:	de bf       	out	0x3e, r29	; 62
   14d8a:	0f be       	out	0x3f, r0	; 63
   14d8c:	cd bf       	out	0x3d, r28	; 61
   14d8e:	df 91       	pop	r29
   14d90:	cf 91       	pop	r28
   14d92:	1f 91       	pop	r17
   14d94:	0f 91       	pop	r16
   14d96:	ff 90       	pop	r15
   14d98:	ef 90       	pop	r14
   14d9a:	df 90       	pop	r13
   14d9c:	cf 90       	pop	r12
   14d9e:	bf 90       	pop	r11
   14da0:	af 90       	pop	r10
   14da2:	9f 90       	pop	r9
   14da4:	8f 90       	pop	r8
   14da6:	6f 90       	pop	r6
   14da8:	5f 90       	pop	r5
   14daa:	4f 90       	pop	r4
   14dac:	3f 90       	pop	r3
   14dae:	2f 90       	pop	r2
   14db0:	08 95       	ret

00014db2 <SS80ControllerPack>:
   14db2:	0f 93       	push	r16
   14db4:	1f 93       	push	r17
   14db6:	25 e0       	ldi	r18, 0x05	; 5
   14db8:	30 e0       	ldi	r19, 0x00	; 0
   14dba:	fc 01       	movw	r30, r24
   14dbc:	31 83       	std	Z+1, r19	; 0x01
   14dbe:	20 83       	st	Z, r18
   14dc0:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   14dc4:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   14dc8:	06 81       	ldd	r16, Z+6	; 0x06
   14dca:	17 81       	ldd	r17, Z+7	; 0x07
   14dcc:	20 e0       	ldi	r18, 0x00	; 0
   14dce:	30 e0       	ldi	r19, 0x00	; 0
   14dd0:	42 e0       	ldi	r20, 0x02	; 2
   14dd2:	50 e0       	ldi	r21, 0x00	; 0
   14dd4:	60 e0       	ldi	r22, 0x00	; 0
   14dd6:	70 e0       	ldi	r23, 0x00	; 0
   14dd8:	87 e3       	ldi	r24, 0x37	; 55
   14dda:	99 e1       	ldi	r25, 0x19	; 25
   14ddc:	0e 94 14 c1 	call	0x18228	; 0x18228 <V2B_MSB>
   14de0:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   14de4:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   14de8:	00 85       	ldd	r16, Z+8	; 0x08
   14dea:	11 85       	ldd	r17, Z+9	; 0x09
   14dec:	20 e0       	ldi	r18, 0x00	; 0
   14dee:	30 e0       	ldi	r19, 0x00	; 0
   14df0:	42 e0       	ldi	r20, 0x02	; 2
   14df2:	50 e0       	ldi	r21, 0x00	; 0
   14df4:	61 e0       	ldi	r22, 0x01	; 1
   14df6:	70 e0       	ldi	r23, 0x00	; 0
   14df8:	87 e3       	ldi	r24, 0x37	; 55
   14dfa:	99 e1       	ldi	r25, 0x19	; 25
   14dfc:	0e 94 14 c1 	call	0x18228	; 0x18228 <V2B_MSB>
   14e00:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   14e04:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   14e08:	02 85       	ldd	r16, Z+10	; 0x0a
   14e0a:	10 e0       	ldi	r17, 0x00	; 0
   14e0c:	20 e0       	ldi	r18, 0x00	; 0
   14e0e:	30 e0       	ldi	r19, 0x00	; 0
   14e10:	41 e0       	ldi	r20, 0x01	; 1
   14e12:	50 e0       	ldi	r21, 0x00	; 0
   14e14:	64 e0       	ldi	r22, 0x04	; 4
   14e16:	70 e0       	ldi	r23, 0x00	; 0
   14e18:	87 e3       	ldi	r24, 0x37	; 55
   14e1a:	99 e1       	ldi	r25, 0x19	; 25
   14e1c:	0e 94 14 c1 	call	0x18228	; 0x18228 <V2B_MSB>
   14e20:	87 e3       	ldi	r24, 0x37	; 55
   14e22:	99 e1       	ldi	r25, 0x19	; 25
   14e24:	1f 91       	pop	r17
   14e26:	0f 91       	pop	r16
   14e28:	08 95       	ret

00014e2a <SS80UnitPack>:
   14e2a:	0f 93       	push	r16
   14e2c:	1f 93       	push	r17
   14e2e:	23 e1       	ldi	r18, 0x13	; 19
   14e30:	30 e0       	ldi	r19, 0x00	; 0
   14e32:	fc 01       	movw	r30, r24
   14e34:	31 83       	std	Z+1, r19	; 0x01
   14e36:	20 83       	st	Z, r18
   14e38:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   14e3c:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   14e40:	03 85       	ldd	r16, Z+11	; 0x0b
   14e42:	10 e0       	ldi	r17, 0x00	; 0
   14e44:	20 e0       	ldi	r18, 0x00	; 0
   14e46:	30 e0       	ldi	r19, 0x00	; 0
   14e48:	41 e0       	ldi	r20, 0x01	; 1
   14e4a:	50 e0       	ldi	r21, 0x00	; 0
   14e4c:	60 e0       	ldi	r22, 0x00	; 0
   14e4e:	70 e0       	ldi	r23, 0x00	; 0
   14e50:	84 e2       	ldi	r24, 0x24	; 36
   14e52:	99 e1       	ldi	r25, 0x19	; 25
   14e54:	0e 94 14 c1 	call	0x18228	; 0x18228 <V2B_MSB>
   14e58:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   14e5c:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   14e60:	04 85       	ldd	r16, Z+12	; 0x0c
   14e62:	15 85       	ldd	r17, Z+13	; 0x0d
   14e64:	26 85       	ldd	r18, Z+14	; 0x0e
   14e66:	37 85       	ldd	r19, Z+15	; 0x0f
   14e68:	43 e0       	ldi	r20, 0x03	; 3
   14e6a:	50 e0       	ldi	r21, 0x00	; 0
   14e6c:	61 e0       	ldi	r22, 0x01	; 1
   14e6e:	70 e0       	ldi	r23, 0x00	; 0
   14e70:	84 e2       	ldi	r24, 0x24	; 36
   14e72:	99 e1       	ldi	r25, 0x19	; 25
   14e74:	0e 94 14 c1 	call	0x18228	; 0x18228 <V2B_MSB>
   14e78:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   14e7c:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   14e80:	00 89       	ldd	r16, Z+16	; 0x10
   14e82:	11 89       	ldd	r17, Z+17	; 0x11
   14e84:	20 e0       	ldi	r18, 0x00	; 0
   14e86:	30 e0       	ldi	r19, 0x00	; 0
   14e88:	42 e0       	ldi	r20, 0x02	; 2
   14e8a:	50 e0       	ldi	r21, 0x00	; 0
   14e8c:	64 e0       	ldi	r22, 0x04	; 4
   14e8e:	70 e0       	ldi	r23, 0x00	; 0
   14e90:	84 e2       	ldi	r24, 0x24	; 36
   14e92:	99 e1       	ldi	r25, 0x19	; 25
   14e94:	0e 94 14 c1 	call	0x18228	; 0x18228 <V2B_MSB>
   14e98:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   14e9c:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   14ea0:	02 89       	ldd	r16, Z+18	; 0x12
   14ea2:	10 e0       	ldi	r17, 0x00	; 0
   14ea4:	20 e0       	ldi	r18, 0x00	; 0
   14ea6:	30 e0       	ldi	r19, 0x00	; 0
   14ea8:	41 e0       	ldi	r20, 0x01	; 1
   14eaa:	50 e0       	ldi	r21, 0x00	; 0
   14eac:	66 e0       	ldi	r22, 0x06	; 6
   14eae:	70 e0       	ldi	r23, 0x00	; 0
   14eb0:	84 e2       	ldi	r24, 0x24	; 36
   14eb2:	99 e1       	ldi	r25, 0x19	; 25
   14eb4:	0e 94 14 c1 	call	0x18228	; 0x18228 <V2B_MSB>
   14eb8:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   14ebc:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   14ec0:	03 89       	ldd	r16, Z+19	; 0x13
   14ec2:	10 e0       	ldi	r17, 0x00	; 0
   14ec4:	20 e0       	ldi	r18, 0x00	; 0
   14ec6:	30 e0       	ldi	r19, 0x00	; 0
   14ec8:	41 e0       	ldi	r20, 0x01	; 1
   14eca:	50 e0       	ldi	r21, 0x00	; 0
   14ecc:	67 e0       	ldi	r22, 0x07	; 7
   14ece:	70 e0       	ldi	r23, 0x00	; 0
   14ed0:	84 e2       	ldi	r24, 0x24	; 36
   14ed2:	99 e1       	ldi	r25, 0x19	; 25
   14ed4:	0e 94 14 c1 	call	0x18228	; 0x18228 <V2B_MSB>
   14ed8:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   14edc:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   14ee0:	04 89       	ldd	r16, Z+20	; 0x14
   14ee2:	15 89       	ldd	r17, Z+21	; 0x15
   14ee4:	20 e0       	ldi	r18, 0x00	; 0
   14ee6:	30 e0       	ldi	r19, 0x00	; 0
   14ee8:	42 e0       	ldi	r20, 0x02	; 2
   14eea:	50 e0       	ldi	r21, 0x00	; 0
   14eec:	68 e0       	ldi	r22, 0x08	; 8
   14eee:	70 e0       	ldi	r23, 0x00	; 0
   14ef0:	84 e2       	ldi	r24, 0x24	; 36
   14ef2:	99 e1       	ldi	r25, 0x19	; 25
   14ef4:	0e 94 14 c1 	call	0x18228	; 0x18228 <V2B_MSB>
   14ef8:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   14efc:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   14f00:	06 89       	ldd	r16, Z+22	; 0x16
   14f02:	17 89       	ldd	r17, Z+23	; 0x17
   14f04:	20 e0       	ldi	r18, 0x00	; 0
   14f06:	30 e0       	ldi	r19, 0x00	; 0
   14f08:	42 e0       	ldi	r20, 0x02	; 2
   14f0a:	50 e0       	ldi	r21, 0x00	; 0
   14f0c:	6a e0       	ldi	r22, 0x0A	; 10
   14f0e:	70 e0       	ldi	r23, 0x00	; 0
   14f10:	84 e2       	ldi	r24, 0x24	; 36
   14f12:	99 e1       	ldi	r25, 0x19	; 25
   14f14:	0e 94 14 c1 	call	0x18228	; 0x18228 <V2B_MSB>
   14f18:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   14f1c:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   14f20:	00 8d       	ldd	r16, Z+24	; 0x18
   14f22:	11 8d       	ldd	r17, Z+25	; 0x19
   14f24:	20 e0       	ldi	r18, 0x00	; 0
   14f26:	30 e0       	ldi	r19, 0x00	; 0
   14f28:	42 e0       	ldi	r20, 0x02	; 2
   14f2a:	50 e0       	ldi	r21, 0x00	; 0
   14f2c:	6c e0       	ldi	r22, 0x0C	; 12
   14f2e:	70 e0       	ldi	r23, 0x00	; 0
   14f30:	84 e2       	ldi	r24, 0x24	; 36
   14f32:	99 e1       	ldi	r25, 0x19	; 25
   14f34:	0e 94 14 c1 	call	0x18228	; 0x18228 <V2B_MSB>
   14f38:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   14f3c:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   14f40:	02 8d       	ldd	r16, Z+26	; 0x1a
   14f42:	13 8d       	ldd	r17, Z+27	; 0x1b
   14f44:	20 e0       	ldi	r18, 0x00	; 0
   14f46:	30 e0       	ldi	r19, 0x00	; 0
   14f48:	42 e0       	ldi	r20, 0x02	; 2
   14f4a:	50 e0       	ldi	r21, 0x00	; 0
   14f4c:	6e e0       	ldi	r22, 0x0E	; 14
   14f4e:	70 e0       	ldi	r23, 0x00	; 0
   14f50:	84 e2       	ldi	r24, 0x24	; 36
   14f52:	99 e1       	ldi	r25, 0x19	; 25
   14f54:	0e 94 14 c1 	call	0x18228	; 0x18228 <V2B_MSB>
   14f58:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   14f5c:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   14f60:	04 8d       	ldd	r16, Z+28	; 0x1c
   14f62:	10 e0       	ldi	r17, 0x00	; 0
   14f64:	20 e0       	ldi	r18, 0x00	; 0
   14f66:	30 e0       	ldi	r19, 0x00	; 0
   14f68:	41 e0       	ldi	r20, 0x01	; 1
   14f6a:	50 e0       	ldi	r21, 0x00	; 0
   14f6c:	60 e1       	ldi	r22, 0x10	; 16
   14f6e:	70 e0       	ldi	r23, 0x00	; 0
   14f70:	84 e2       	ldi	r24, 0x24	; 36
   14f72:	99 e1       	ldi	r25, 0x19	; 25
   14f74:	0e 94 14 c1 	call	0x18228	; 0x18228 <V2B_MSB>
   14f78:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   14f7c:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   14f80:	05 8d       	ldd	r16, Z+29	; 0x1d
   14f82:	10 e0       	ldi	r17, 0x00	; 0
   14f84:	20 e0       	ldi	r18, 0x00	; 0
   14f86:	30 e0       	ldi	r19, 0x00	; 0
   14f88:	41 e0       	ldi	r20, 0x01	; 1
   14f8a:	50 e0       	ldi	r21, 0x00	; 0
   14f8c:	61 e1       	ldi	r22, 0x11	; 17
   14f8e:	70 e0       	ldi	r23, 0x00	; 0
   14f90:	84 e2       	ldi	r24, 0x24	; 36
   14f92:	99 e1       	ldi	r25, 0x19	; 25
   14f94:	0e 94 14 c1 	call	0x18228	; 0x18228 <V2B_MSB>
   14f98:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   14f9c:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   14fa0:	06 8d       	ldd	r16, Z+30	; 0x1e
   14fa2:	10 e0       	ldi	r17, 0x00	; 0
   14fa4:	20 e0       	ldi	r18, 0x00	; 0
   14fa6:	30 e0       	ldi	r19, 0x00	; 0
   14fa8:	41 e0       	ldi	r20, 0x01	; 1
   14faa:	50 e0       	ldi	r21, 0x00	; 0
   14fac:	62 e1       	ldi	r22, 0x12	; 18
   14fae:	70 e0       	ldi	r23, 0x00	; 0
   14fb0:	84 e2       	ldi	r24, 0x24	; 36
   14fb2:	99 e1       	ldi	r25, 0x19	; 25
   14fb4:	0e 94 14 c1 	call	0x18228	; 0x18228 <V2B_MSB>
   14fb8:	84 e2       	ldi	r24, 0x24	; 36
   14fba:	99 e1       	ldi	r25, 0x19	; 25
   14fbc:	1f 91       	pop	r17
   14fbe:	0f 91       	pop	r16
   14fc0:	08 95       	ret

00014fc2 <SS80VolumePack>:
   14fc2:	0f 93       	push	r16
   14fc4:	1f 93       	push	r17
   14fc6:	2d e0       	ldi	r18, 0x0D	; 13
   14fc8:	30 e0       	ldi	r19, 0x00	; 0
   14fca:	fc 01       	movw	r30, r24
   14fcc:	31 83       	std	Z+1, r19	; 0x01
   14fce:	20 83       	st	Z, r18
   14fd0:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   14fd4:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   14fd8:	07 8d       	ldd	r16, Z+31	; 0x1f
   14fda:	10 a1       	ldd	r17, Z+32	; 0x20
   14fdc:	21 a1       	ldd	r18, Z+33	; 0x21
   14fde:	32 a1       	ldd	r19, Z+34	; 0x22
   14fe0:	43 e0       	ldi	r20, 0x03	; 3
   14fe2:	50 e0       	ldi	r21, 0x00	; 0
   14fe4:	60 e0       	ldi	r22, 0x00	; 0
   14fe6:	70 e0       	ldi	r23, 0x00	; 0
   14fe8:	87 e1       	ldi	r24, 0x17	; 23
   14fea:	99 e1       	ldi	r25, 0x19	; 25
   14fec:	0e 94 14 c1 	call	0x18228	; 0x18228 <V2B_MSB>
   14ff0:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   14ff4:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   14ff8:	03 a1       	ldd	r16, Z+35	; 0x23
   14ffa:	10 e0       	ldi	r17, 0x00	; 0
   14ffc:	20 e0       	ldi	r18, 0x00	; 0
   14ffe:	30 e0       	ldi	r19, 0x00	; 0
   15000:	41 e0       	ldi	r20, 0x01	; 1
   15002:	50 e0       	ldi	r21, 0x00	; 0
   15004:	63 e0       	ldi	r22, 0x03	; 3
   15006:	70 e0       	ldi	r23, 0x00	; 0
   15008:	87 e1       	ldi	r24, 0x17	; 23
   1500a:	99 e1       	ldi	r25, 0x19	; 25
   1500c:	0e 94 14 c1 	call	0x18228	; 0x18228 <V2B_MSB>
   15010:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   15014:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   15018:	04 a1       	ldd	r16, Z+36	; 0x24
   1501a:	15 a1       	ldd	r17, Z+37	; 0x25
   1501c:	20 e0       	ldi	r18, 0x00	; 0
   1501e:	30 e0       	ldi	r19, 0x00	; 0
   15020:	42 e0       	ldi	r20, 0x02	; 2
   15022:	50 e0       	ldi	r21, 0x00	; 0
   15024:	64 e0       	ldi	r22, 0x04	; 4
   15026:	70 e0       	ldi	r23, 0x00	; 0
   15028:	87 e1       	ldi	r24, 0x17	; 23
   1502a:	99 e1       	ldi	r25, 0x19	; 25
   1502c:	0e 94 14 c1 	call	0x18228	; 0x18228 <V2B_MSB>
   15030:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   15034:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   15038:	06 a1       	ldd	r16, Z+38	; 0x26
   1503a:	17 a1       	ldd	r17, Z+39	; 0x27
   1503c:	20 a5       	ldd	r18, Z+40	; 0x28
   1503e:	31 a5       	ldd	r19, Z+41	; 0x29
   15040:	46 e0       	ldi	r20, 0x06	; 6
   15042:	50 e0       	ldi	r21, 0x00	; 0
   15044:	66 e0       	ldi	r22, 0x06	; 6
   15046:	70 e0       	ldi	r23, 0x00	; 0
   15048:	87 e1       	ldi	r24, 0x17	; 23
   1504a:	99 e1       	ldi	r25, 0x19	; 25
   1504c:	0e 94 14 c1 	call	0x18228	; 0x18228 <V2B_MSB>
   15050:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   15054:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   15058:	02 a5       	ldd	r16, Z+42	; 0x2a
   1505a:	10 e0       	ldi	r17, 0x00	; 0
   1505c:	20 e0       	ldi	r18, 0x00	; 0
   1505e:	30 e0       	ldi	r19, 0x00	; 0
   15060:	41 e0       	ldi	r20, 0x01	; 1
   15062:	50 e0       	ldi	r21, 0x00	; 0
   15064:	6c e0       	ldi	r22, 0x0C	; 12
   15066:	70 e0       	ldi	r23, 0x00	; 0
   15068:	87 e1       	ldi	r24, 0x17	; 23
   1506a:	99 e1       	ldi	r25, 0x19	; 25
   1506c:	0e 94 14 c1 	call	0x18228	; 0x18228 <V2B_MSB>
   15070:	87 e1       	ldi	r24, 0x17	; 23
   15072:	99 e1       	ldi	r25, 0x19	; 25
   15074:	1f 91       	pop	r17
   15076:	0f 91       	pop	r16
   15078:	08 95       	ret

0001507a <SS80_test_extended_status>:
   1507a:	9b 01       	movw	r18, r22
   1507c:	43 e0       	ldi	r20, 0x03	; 3
   1507e:	35 95       	asr	r19
   15080:	27 95       	ror	r18
   15082:	4a 95       	dec	r20
   15084:	e1 f7       	brne	.-8      	; 0x1507e <SS80_test_extended_status+0x4>
   15086:	82 0f       	add	r24, r18
   15088:	93 1f       	adc	r25, r19
   1508a:	67 70       	andi	r22, 0x07	; 7
   1508c:	77 27       	eor	r23, r23
   1508e:	20 e8       	ldi	r18, 0x80	; 128
   15090:	30 e0       	ldi	r19, 0x00	; 0
   15092:	02 c0       	rjmp	.+4      	; 0x15098 <SS80_test_extended_status+0x1e>
   15094:	35 95       	asr	r19
   15096:	27 95       	ror	r18
   15098:	6a 95       	dec	r22
   1509a:	e2 f7       	brpl	.-8      	; 0x15094 <SS80_test_extended_status+0x1a>
   1509c:	fc 01       	movw	r30, r24
   1509e:	80 81       	ld	r24, Z
   150a0:	28 23       	and	r18, r24
   150a2:	81 e0       	ldi	r24, 0x01	; 1
   150a4:	90 e0       	ldi	r25, 0x00	; 0
   150a6:	11 f4       	brne	.+4      	; 0x150ac <SS80_test_extended_status+0x32>
   150a8:	80 e0       	ldi	r24, 0x00	; 0
   150aa:	90 e0       	ldi	r25, 0x00	; 0
   150ac:	08 95       	ret

000150ae <SS80_display_extended_status>:
   150ae:	6f 92       	push	r6
   150b0:	7f 92       	push	r7
   150b2:	8f 92       	push	r8
   150b4:	ef 92       	push	r14
   150b6:	ff 92       	push	r15
   150b8:	0f 93       	push	r16
   150ba:	1f 93       	push	r17
   150bc:	cf 93       	push	r28
   150be:	df 93       	push	r29
   150c0:	ad b7       	in	r26, 0x3d	; 61
   150c2:	be b7       	in	r27, 0x3e	; 62
   150c4:	17 97       	sbiw	r26, 0x07	; 7
   150c6:	0f b6       	in	r0, 0x3f	; 63
   150c8:	f8 94       	cli
   150ca:	be bf       	out	0x3e, r27	; 62
   150cc:	0f be       	out	0x3f, r0	; 63
   150ce:	ad bf       	out	0x3d, r26	; 61
   150d0:	fc 01       	movw	r30, r24
   150d2:	ac 01       	movw	r20, r24
   150d4:	48 5f       	subi	r20, 0xF8	; 248
   150d6:	5f 4f       	sbci	r21, 0xFF	; 255
   150d8:	20 e0       	ldi	r18, 0x00	; 0
   150da:	30 e0       	ldi	r19, 0x00	; 0
   150dc:	a1 91       	ld	r26, Z+
   150de:	aa 23       	and	r26, r26
   150e0:	11 f0       	breq	.+4      	; 0x150e6 <SS80_display_extended_status+0x38>
   150e2:	21 e0       	ldi	r18, 0x01	; 1
   150e4:	30 e0       	ldi	r19, 0x00	; 0
   150e6:	e4 17       	cp	r30, r20
   150e8:	f5 07       	cpc	r31, r21
   150ea:	c1 f7       	brne	.-16     	; 0x150dc <SS80_display_extended_status+0x2e>
   150ec:	23 2b       	or	r18, r19
   150ee:	81 f1       	breq	.+96     	; 0x15150 <SS80_display_extended_status+0xa2>
   150f0:	ec 01       	movw	r28, r24
   150f2:	ed b7       	in	r30, 0x3d	; 61
   150f4:	fe b7       	in	r31, 0x3e	; 62
   150f6:	75 83       	std	Z+5, r23	; 0x05
   150f8:	64 83       	std	Z+4, r22	; 0x04
   150fa:	8f ec       	ldi	r24, 0xCF	; 207
   150fc:	96 e2       	ldi	r25, 0x26	; 38
   150fe:	a0 e0       	ldi	r26, 0x00	; 0
   15100:	81 83       	std	Z+1, r24	; 0x01
   15102:	92 83       	std	Z+2, r25	; 0x02
   15104:	a3 83       	std	Z+3, r26	; 0x03
   15106:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   1510a:	01 ed       	ldi	r16, 0xD1	; 209
   1510c:	11 e0       	ldi	r17, 0x01	; 1
   1510e:	84 ec       	ldi	r24, 0xC4	; 196
   15110:	96 e2       	ldi	r25, 0x26	; 38
   15112:	3c 01       	movw	r6, r24
   15114:	81 2c       	mov	r8, r1
   15116:	f8 01       	movw	r30, r16
   15118:	e0 80       	ld	r14, Z
   1511a:	f1 80       	ldd	r15, Z+1	; 0x01
   1511c:	ff ef       	ldi	r31, 0xFF	; 255
   1511e:	ef 16       	cp	r14, r31
   15120:	ff 06       	cpc	r15, r31
   15122:	b1 f0       	breq	.+44     	; 0x15150 <SS80_display_extended_status+0xa2>
   15124:	b7 01       	movw	r22, r14
   15126:	ce 01       	movw	r24, r28
   15128:	a8 df       	rcall	.-176    	; 0x1507a <SS80_test_extended_status>
   1512a:	89 2b       	or	r24, r25
   1512c:	71 f0       	breq	.+28     	; 0x1514a <SS80_display_extended_status+0x9c>
   1512e:	f8 01       	movw	r30, r16
   15130:	82 81       	ldd	r24, Z+2	; 0x02
   15132:	93 81       	ldd	r25, Z+3	; 0x03
   15134:	ed b7       	in	r30, 0x3d	; 61
   15136:	fe b7       	in	r31, 0x3e	; 62
   15138:	97 83       	std	Z+7, r25	; 0x07
   1513a:	86 83       	std	Z+6, r24	; 0x06
   1513c:	f5 82       	std	Z+5, r15	; 0x05
   1513e:	e4 82       	std	Z+4, r14	; 0x04
   15140:	61 82       	std	Z+1, r6	; 0x01
   15142:	72 82       	std	Z+2, r7	; 0x02
   15144:	83 82       	std	Z+3, r8	; 0x03
   15146:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   1514a:	0c 5f       	subi	r16, 0xFC	; 252
   1514c:	1f 4f       	sbci	r17, 0xFF	; 255
   1514e:	e3 cf       	rjmp	.-58     	; 0x15116 <SS80_display_extended_status+0x68>
   15150:	ad b7       	in	r26, 0x3d	; 61
   15152:	be b7       	in	r27, 0x3e	; 62
   15154:	17 96       	adiw	r26, 0x07	; 7
   15156:	0f b6       	in	r0, 0x3f	; 63
   15158:	f8 94       	cli
   1515a:	be bf       	out	0x3e, r27	; 62
   1515c:	0f be       	out	0x3f, r0	; 63
   1515e:	ad bf       	out	0x3d, r26	; 61
   15160:	df 91       	pop	r29
   15162:	cf 91       	pop	r28
   15164:	1f 91       	pop	r17
   15166:	0f 91       	pop	r16
   15168:	ff 90       	pop	r15
   1516a:	ef 90       	pop	r14
   1516c:	8f 90       	pop	r8
   1516e:	7f 90       	pop	r7
   15170:	6f 90       	pop	r6
   15172:	08 95       	ret

00015174 <SS80_send_status>:
   15174:	a9 e1       	ldi	r26, 0x19	; 25
   15176:	b0 e0       	ldi	r27, 0x00	; 0
   15178:	e0 ec       	ldi	r30, 0xC0	; 192
   1517a:	f8 ea       	ldi	r31, 0xA8	; 168
   1517c:	0c 94 25 e5 	jmp	0x1ca4a	; 0x1ca4a <__prologue_saves__+0x18>
   15180:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15184:	85 ff       	sbrs	r24, 5
   15186:	0a c0       	rjmp	.+20     	; 0x1519c <SS80_send_status+0x28>
   15188:	80 eb       	ldi	r24, 0xB0	; 176
{
#ifdef ESP8266
    hspi_RX((uint8_t *) data,count);
#endif
#ifdef AVR
    SPI0_RX((uint8_t *)data,count);
   1518a:	96 e2       	ldi	r25, 0x26	; 38
   1518c:	a0 e0       	ldi	r26, 0x00	; 0
   1518e:	ed b7       	in	r30, 0x3d	; 61
   15190:	fe b7       	in	r31, 0x3e	; 62
   15192:	81 83       	std	Z+1, r24	; 0x01
   15194:	92 83       	std	Z+2, r25	; 0x02
   15196:	a3 83       	std	Z+3, r26	; 0x03
   15198:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   1519c:	ce 01       	movw	r24, r28
   1519e:	04 96       	adiw	r24, 0x04	; 4
   151a0:	7c 01       	movw	r14, r24
   151a2:	84 e1       	ldi	r24, 0x14	; 20
   151a4:	f7 01       	movw	r30, r14
   151a6:	11 92       	st	Z+, r1
   151a8:	8a 95       	dec	r24
   151aa:	e9 f7       	brne	.-6      	; 0x151a6 <SS80_send_status+0x32>
   151ac:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   151b0:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   151b4:	86 81       	ldd	r24, Z+6	; 0x06
   151b6:	20 e1       	ldi	r18, 0x10	; 16
   151b8:	82 9f       	mul	r24, r18
   151ba:	c0 01       	movw	r24, r0
   151bc:	11 24       	eor	r1, r1
   151be:	95 81       	ldd	r25, Z+5	; 0x05
   151c0:	9f 70       	andi	r25, 0x0F	; 15
   151c2:	89 2b       	or	r24, r25
   151c4:	8c 83       	std	Y+4, r24	; 0x04
   151c6:	8f ef       	ldi	r24, 0xFF	; 255
   151c8:	8d 83       	std	Y+5, r24	; 0x05
   151ca:	83 81       	ldd	r24, Z+3	; 0x03
   151cc:	86 ff       	sbrs	r24, 6
   151ce:	02 c0       	rjmp	.+4      	; 0x151d4 <SS80_send_status+0x60>
   151d0:	92 e0       	ldi	r25, 0x02	; 2
   151d2:	9e 83       	std	Y+6, r25	; 0x06
   151d4:	82 ff       	sbrs	r24, 2
   151d6:	03 c0       	rjmp	.+6      	; 0x151de <SS80_send_status+0x6a>
   151d8:	9e 81       	ldd	r25, Y+6	; 0x06
   151da:	91 60       	ori	r25, 0x01	; 1
   151dc:	9e 83       	std	Y+6, r25	; 0x06
   151de:	80 ff       	sbrs	r24, 0
   151e0:	02 c0       	rjmp	.+4      	; 0x151e6 <SS80_send_status+0x72>
   151e2:	82 e0       	ldi	r24, 0x02	; 2
   151e4:	88 87       	std	Y+8, r24	; 0x08
   151e6:	83 81       	ldd	r24, Z+3	; 0x03
   151e8:	81 ff       	sbrs	r24, 1
   151ea:	03 c0       	rjmp	.+6      	; 0x151f2 <SS80_send_status+0x7e>
   151ec:	88 85       	ldd	r24, Y+8	; 0x08
   151ee:	82 60       	ori	r24, 0x02	; 2
   151f0:	88 87       	std	Y+8, r24	; 0x08
   151f2:	83 81       	ldd	r24, Z+3	; 0x03
   151f4:	83 ff       	sbrs	r24, 3
   151f6:	02 c0       	rjmp	.+4      	; 0x151fc <SS80_send_status+0x88>
   151f8:	88 e0       	ldi	r24, 0x08	; 8
   151fa:	8a 87       	std	Y+10, r24	; 0x0a
   151fc:	83 81       	ldd	r24, Z+3	; 0x03
   151fe:	94 81       	ldd	r25, Z+4	; 0x04
   15200:	89 2b       	or	r24, r25
   15202:	59 f4       	brne	.+22     	; 0x1521a <SS80_send_status+0xa6>
   15204:	07 81       	ldd	r16, Z+7	; 0x07
   15206:	10 85       	ldd	r17, Z+8	; 0x08
   15208:	21 85       	ldd	r18, Z+9	; 0x09
   1520a:	32 85       	ldd	r19, Z+10	; 0x0a
   1520c:	46 e0       	ldi	r20, 0x06	; 6
   1520e:	50 e0       	ldi	r21, 0x00	; 0
   15210:	6a e0       	ldi	r22, 0x0A	; 10
   15212:	70 e0       	ldi	r23, 0x00	; 0
   15214:	c7 01       	movw	r24, r14
   15216:	0e 94 14 c1 	call	0x18228	; 0x18228 <V2B_MSB>
   1521a:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   1521e:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   15222:	83 81       	ldd	r24, Z+3	; 0x03
   15224:	94 81       	ldd	r25, Z+4	; 0x04
   15226:	89 2b       	or	r24, r25
   15228:	11 f0       	breq	.+4      	; 0x1522e <SS80_send_status+0xba>
   1522a:	81 e0       	ldi	r24, 0x01	; 1
   1522c:	82 83       	std	Z+2, r24	; 0x02
   1522e:	80 e0       	ldi	r24, 0x00	; 0
   15230:	91 e0       	ldi	r25, 0x01	; 1
   15232:	99 8f       	std	Y+25, r25	; 0x19
   15234:	88 8f       	std	Y+24, r24	; 0x18
   15236:	ae 01       	movw	r20, r28
   15238:	48 5e       	subi	r20, 0xE8	; 232
   1523a:	5f 4f       	sbci	r21, 0xFF	; 255
   1523c:	64 e1       	ldi	r22, 0x14	; 20
   1523e:	70 e0       	ldi	r23, 0x00	; 0
   15240:	c7 01       	movw	r24, r14
   15242:	0e 94 fa 8c 	call	0x119f4	; 0x119f4 <gpib_write_str>
   15246:	44 97       	sbiw	r24, 0x14	; 20
   15248:	71 f0       	breq	.+28     	; 0x15266 <SS80_send_status+0xf2>
   1524a:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1524e:	80 ff       	sbrs	r24, 0
   15250:	0a c0       	rjmp	.+20     	; 0x15266 <SS80_send_status+0xf2>
   15252:	85 e9       	ldi	r24, 0x95	; 149
   15254:	96 e2       	ldi	r25, 0x26	; 38
   15256:	a0 e0       	ldi	r26, 0x00	; 0
   15258:	ed b7       	in	r30, 0x3d	; 61
   1525a:	fe b7       	in	r31, 0x3e	; 62
   1525c:	81 83       	std	Z+1, r24	; 0x01
   1525e:	92 83       	std	Z+2, r25	; 0x02
   15260:	a3 83       	std	Z+3, r26	; 0x03
   15262:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   15266:	88 8d       	ldd	r24, Y+24	; 0x18
   15268:	99 8d       	ldd	r25, Y+25	; 0x19
   1526a:	88 27       	eor	r24, r24
   1526c:	90 7d       	andi	r25, 0xD0	; 208
   1526e:	69 96       	adiw	r28, 0x19	; 25
   15270:	e6 e0       	ldi	r30, 0x06	; 6
   15272:	0c 94 41 e5 	jmp	0x1ca82	; 0x1ca82 <__epilogue_restores__+0x18>

00015276 <SS80_describe>:
   15276:	a7 e0       	ldi	r26, 0x07	; 7
   15278:	b0 e0       	ldi	r27, 0x00	; 0
   1527a:	e1 e4       	ldi	r30, 0x41	; 65
   1527c:	f9 ea       	ldi	r31, 0xA9	; 169
   1527e:	0c 94 29 e5 	jmp	0x1ca52	; 0x1ca52 <__prologue_saves__+0x20>
   15282:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15286:	85 ff       	sbrs	r24, 5
   15288:	0a c0       	rjmp	.+20     	; 0x1529e <SS80_describe+0x28>
   1528a:	84 e8       	ldi	r24, 0x84	; 132
   1528c:	96 e2       	ldi	r25, 0x26	; 38
   1528e:	a0 e0       	ldi	r26, 0x00	; 0
   15290:	ed b7       	in	r30, 0x3d	; 61
   15292:	fe b7       	in	r31, 0x3e	; 62
   15294:	81 83       	std	Z+1, r24	; 0x01
   15296:	92 83       	std	Z+2, r25	; 0x02
   15298:	a3 83       	std	Z+3, r26	; 0x03
   1529a:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   1529e:	1f 82       	std	Y+7, r1	; 0x07
   152a0:	1e 82       	std	Y+6, r1	; 0x06
   152a2:	ce 01       	movw	r24, r28
   152a4:	04 96       	adiw	r24, 0x04	; 4
   152a6:	85 dd       	rcall	.-1270   	; 0x14db2 <SS80ControllerPack>
   152a8:	6c 81       	ldd	r22, Y+4	; 0x04
   152aa:	7d 81       	ldd	r23, Y+5	; 0x05
   152ac:	ae 01       	movw	r20, r28
   152ae:	4a 5f       	subi	r20, 0xFA	; 250
   152b0:	5f 4f       	sbci	r21, 0xFF	; 255
   152b2:	0e 94 fa 8c 	call	0x119f4	; 0x119f4 <gpib_write_str>
   152b6:	2c 81       	ldd	r18, Y+4	; 0x04
   152b8:	3d 81       	ldd	r19, Y+5	; 0x05
   152ba:	82 17       	cp	r24, r18
   152bc:	93 07       	cpc	r25, r19
   152be:	39 f0       	breq	.+14     	; 0x152ce <SS80_describe+0x58>
   152c0:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   152c4:	80 ff       	sbrs	r24, 0
   152c6:	3c c0       	rjmp	.+120    	; 0x15340 <SS80_describe+0xca>
   152c8:	81 e6       	ldi	r24, 0x61	; 97
   152ca:	96 e2       	ldi	r25, 0x26	; 38
   152cc:	31 c0       	rjmp	.+98     	; 0x15330 <SS80_describe+0xba>
   152ce:	1f 82       	std	Y+7, r1	; 0x07
   152d0:	1e 82       	std	Y+6, r1	; 0x06
   152d2:	ce 01       	movw	r24, r28
   152d4:	04 96       	adiw	r24, 0x04	; 4
   152d6:	a9 dd       	rcall	.-1198   	; 0x14e2a <SS80UnitPack>
   152d8:	6c 81       	ldd	r22, Y+4	; 0x04
   152da:	7d 81       	ldd	r23, Y+5	; 0x05
   152dc:	ae 01       	movw	r20, r28
   152de:	4a 5f       	subi	r20, 0xFA	; 250
   152e0:	5f 4f       	sbci	r21, 0xFF	; 255
   152e2:	0e 94 fa 8c 	call	0x119f4	; 0x119f4 <gpib_write_str>
   152e6:	2c 81       	ldd	r18, Y+4	; 0x04
   152e8:	3d 81       	ldd	r19, Y+5	; 0x05
   152ea:	82 17       	cp	r24, r18
   152ec:	93 07       	cpc	r25, r19
   152ee:	39 f0       	breq	.+14     	; 0x152fe <SS80_describe+0x88>
   152f0:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   152f4:	80 ff       	sbrs	r24, 0
   152f6:	24 c0       	rjmp	.+72     	; 0x15340 <SS80_describe+0xca>
   152f8:	84 e4       	ldi	r24, 0x44	; 68
   152fa:	96 e2       	ldi	r25, 0x26	; 38
   152fc:	19 c0       	rjmp	.+50     	; 0x15330 <SS80_describe+0xba>
   152fe:	80 e0       	ldi	r24, 0x00	; 0
   15300:	91 e0       	ldi	r25, 0x01	; 1
   15302:	9f 83       	std	Y+7, r25	; 0x07
   15304:	8e 83       	std	Y+6, r24	; 0x06
   15306:	ce 01       	movw	r24, r28
   15308:	04 96       	adiw	r24, 0x04	; 4
   1530a:	5b de       	rcall	.-842    	; 0x14fc2 <SS80VolumePack>
   1530c:	6c 81       	ldd	r22, Y+4	; 0x04
   1530e:	7d 81       	ldd	r23, Y+5	; 0x05
   15310:	ae 01       	movw	r20, r28
   15312:	4a 5f       	subi	r20, 0xFA	; 250
   15314:	5f 4f       	sbci	r21, 0xFF	; 255
   15316:	0e 94 fa 8c 	call	0x119f4	; 0x119f4 <gpib_write_str>
   1531a:	2c 81       	ldd	r18, Y+4	; 0x04
   1531c:	3d 81       	ldd	r19, Y+5	; 0x05
   1531e:	82 17       	cp	r24, r18
   15320:	93 07       	cpc	r25, r19
   15322:	99 f0       	breq	.+38     	; 0x1534a <SS80_describe+0xd4>
   15324:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15328:	80 ff       	sbrs	r24, 0
   1532a:	0a c0       	rjmp	.+20     	; 0x15340 <SS80_describe+0xca>
   1532c:	85 e2       	ldi	r24, 0x25	; 37
   1532e:	96 e2       	ldi	r25, 0x26	; 38
   15330:	a0 e0       	ldi	r26, 0x00	; 0
   15332:	ed b7       	in	r30, 0x3d	; 61
   15334:	fe b7       	in	r31, 0x3e	; 62
   15336:	81 83       	std	Z+1, r24	; 0x01
   15338:	92 83       	std	Z+2, r25	; 0x02
   1533a:	a3 83       	std	Z+3, r26	; 0x03
   1533c:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   15340:	8e 81       	ldd	r24, Y+6	; 0x06
   15342:	9f 81       	ldd	r25, Y+7	; 0x07
   15344:	88 27       	eor	r24, r24
   15346:	90 7d       	andi	r25, 0xD0	; 208
   15348:	02 c0       	rjmp	.+4      	; 0x1534e <SS80_describe+0xd8>
   1534a:	80 e0       	ldi	r24, 0x00	; 0
   1534c:	90 e0       	ldi	r25, 0x00	; 0
   1534e:	27 96       	adiw	r28, 0x07	; 7
   15350:	e2 e0       	ldi	r30, 0x02	; 2
   15352:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__epilogue_restores__+0x20>

00015356 <SS80_Check_Unit>:
   15356:	00 d0       	rcall	.+0      	; 0x15358 <SS80_Check_Unit+0x2>
   15358:	00 d0       	rcall	.+0      	; 0x1535a <SS80_Check_Unit+0x4>
   1535a:	1f 92       	push	r1
   1535c:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   15360:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   15364:	88 23       	and	r24, r24
   15366:	c9 f0       	breq	.+50     	; 0x1539a <SS80_Check_Unit+0x44>
   15368:	8f 30       	cpi	r24, 0x0F	; 15
   1536a:	b9 f0       	breq	.+46     	; 0x1539a <SS80_Check_Unit+0x44>
   1536c:	23 81       	ldd	r18, Z+3	; 0x03
   1536e:	34 81       	ldd	r19, Z+4	; 0x04
   15370:	20 64       	ori	r18, 0x40	; 64
   15372:	34 83       	std	Z+4, r19	; 0x04
   15374:	23 83       	std	Z+3, r18	; 0x03
   15376:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <debuglevel>
   1537a:	90 ff       	sbrs	r25, 0
   1537c:	0f c0       	rjmp	.+30     	; 0x1539c <SS80_Check_Unit+0x46>
   1537e:	90 e0       	ldi	r25, 0x00	; 0
   15380:	ed b7       	in	r30, 0x3d	; 61
   15382:	fe b7       	in	r31, 0x3e	; 62
   15384:	95 83       	std	Z+5, r25	; 0x05
   15386:	84 83       	std	Z+4, r24	; 0x04
   15388:	8d e0       	ldi	r24, 0x0D	; 13
   1538a:	96 e2       	ldi	r25, 0x26	; 38
   1538c:	a0 e0       	ldi	r26, 0x00	; 0
   1538e:	81 83       	std	Z+1, r24	; 0x01
   15390:	92 83       	std	Z+2, r25	; 0x02
   15392:	a3 83       	std	Z+3, r26	; 0x03
   15394:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   15398:	01 c0       	rjmp	.+2      	; 0x1539c <SS80_Check_Unit+0x46>
   1539a:	85 83       	std	Z+5, r24	; 0x05
   1539c:	0f 90       	pop	r0
   1539e:	0f 90       	pop	r0
   153a0:	0f 90       	pop	r0
   153a2:	0f 90       	pop	r0
   153a4:	0f 90       	pop	r0
   153a6:	08 95       	ret

000153a8 <SS80_Check_Volume>:
   153a8:	00 d0       	rcall	.+0      	; 0x153aa <SS80_Check_Volume+0x2>
   153aa:	00 d0       	rcall	.+0      	; 0x153ac <SS80_Check_Volume+0x4>
   153ac:	1f 92       	push	r1
   153ae:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   153b2:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   153b6:	88 23       	and	r24, r24
   153b8:	b9 f0       	breq	.+46     	; 0x153e8 <SS80_Check_Volume+0x40>
   153ba:	23 81       	ldd	r18, Z+3	; 0x03
   153bc:	34 81       	ldd	r19, Z+4	; 0x04
   153be:	20 64       	ori	r18, 0x40	; 64
   153c0:	34 83       	std	Z+4, r19	; 0x04
   153c2:	23 83       	std	Z+3, r18	; 0x03
   153c4:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <debuglevel>
   153c8:	90 ff       	sbrs	r25, 0
   153ca:	0f c0       	rjmp	.+30     	; 0x153ea <SS80_Check_Volume+0x42>
   153cc:	90 e0       	ldi	r25, 0x00	; 0
   153ce:	ed b7       	in	r30, 0x3d	; 61
   153d0:	fe b7       	in	r31, 0x3e	; 62
   153d2:	95 83       	std	Z+5, r25	; 0x05
   153d4:	84 83       	std	Z+4, r24	; 0x04
   153d6:	83 ef       	ldi	r24, 0xF3	; 243
   153d8:	95 e2       	ldi	r25, 0x25	; 37
   153da:	a0 e0       	ldi	r26, 0x00	; 0
   153dc:	81 83       	std	Z+1, r24	; 0x01
   153de:	92 83       	std	Z+2, r25	; 0x02
   153e0:	a3 83       	std	Z+3, r26	; 0x03
   153e2:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   153e6:	01 c0       	rjmp	.+2      	; 0x153ea <SS80_Check_Volume+0x42>
   153e8:	16 82       	std	Z+6, r1	; 0x06
   153ea:	0f 90       	pop	r0
   153ec:	0f 90       	pop	r0
   153ee:	0f 90       	pop	r0
   153f0:	0f 90       	pop	r0
   153f2:	0f 90       	pop	r0
   153f4:	08 95       	ret

000153f6 <SS80_Command_State>:
   153f6:	2f 92       	push	r2
   153f8:	3f 92       	push	r3
   153fa:	4f 92       	push	r4
   153fc:	6f 92       	push	r6
   153fe:	7f 92       	push	r7
   15400:	8f 92       	push	r8
   15402:	af 92       	push	r10
   15404:	bf 92       	push	r11
   15406:	cf 92       	push	r12
   15408:	ef 92       	push	r14
   1540a:	ff 92       	push	r15
   1540c:	0f 93       	push	r16
   1540e:	1f 93       	push	r17
   15410:	cf 93       	push	r28
   15412:	df 93       	push	r29
   15414:	cd b7       	in	r28, 0x3d	; 61
   15416:	de b7       	in	r29, 0x3e	; 62
   15418:	66 97       	sbiw	r28, 0x16	; 22
   1541a:	0f b6       	in	r0, 0x3f	; 63
   1541c:	f8 94       	cli
   1541e:	de bf       	out	0x3e, r29	; 62
   15420:	0f be       	out	0x3f, r0	; 63
   15422:	cd bf       	out	0x3d, r28	; 61
   15424:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   15428:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   1542c:	81 81       	ldd	r24, Z+1	; 0x01
   1542e:	90 e0       	ldi	r25, 0x00	; 0
   15430:	0e 94 d6 87 	call	0x10fac	; 0x10fac <gpib_disable_PPR>
   15434:	80 e0       	ldi	r24, 0x00	; 0
   15436:	91 e0       	ldi	r25, 0x01	; 1
   15438:	99 87       	std	Y+9, r25	; 0x09
   1543a:	88 87       	std	Y+8, r24	; 0x08
   1543c:	ae 01       	movw	r20, r28
   1543e:	48 5f       	subi	r20, 0xF8	; 248
   15440:	5f 4f       	sbci	r21, 0xFF	; 255
   15442:	60 e0       	ldi	r22, 0x00	; 0
   15444:	72 e0       	ldi	r23, 0x02	; 2
   15446:	82 e8       	ldi	r24, 0x82	; 130
   15448:	9c e1       	ldi	r25, 0x1C	; 28
   1544a:	0e 94 58 8c 	call	0x118b0	; 0x118b0 <gpib_read_str>
   1544e:	9b 87       	std	Y+11, r25	; 0x0b
   15450:	8a 87       	std	Y+10, r24	; 0x0a
   15452:	88 85       	ldd	r24, Y+8	; 0x08
   15454:	99 85       	ldd	r25, Y+9	; 0x09
   15456:	9c 01       	movw	r18, r24
   15458:	22 27       	eor	r18, r18
   1545a:	30 7d       	andi	r19, 0xD0	; 208
   1545c:	23 2b       	or	r18, r19
   1545e:	79 f0       	breq	.+30     	; 0x1547e <SS80_Command_State+0x88>
   15460:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15464:	80 ff       	sbrs	r24, 0
   15466:	1e c2       	rjmp	.+1084   	; 0x158a4 <SS80_Command_State+0x4ae>
   15468:	8d ec       	ldi	r24, 0xCD	; 205
   1546a:	95 e2       	ldi	r25, 0x25	; 37
   1546c:	a0 e0       	ldi	r26, 0x00	; 0
   1546e:	ed b7       	in	r30, 0x3d	; 61
   15470:	fe b7       	in	r31, 0x3e	; 62
   15472:	81 83       	std	Z+1, r24	; 0x01
   15474:	92 83       	std	Z+2, r25	; 0x02
   15476:	a3 83       	std	Z+3, r26	; 0x03
   15478:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   1547c:	13 c2       	rjmp	.+1062   	; 0x158a4 <SS80_Command_State+0x4ae>
   1547e:	2a 85       	ldd	r18, Y+10	; 0x0a
   15480:	3b 85       	ldd	r19, Y+11	; 0x0b
   15482:	23 2b       	or	r18, r19
   15484:	09 f4       	brne	.+2      	; 0x15488 <SS80_Command_State+0x92>
   15486:	13 c2       	rjmp	.+1062   	; 0x158ae <SS80_Command_State+0x4b8>
   15488:	90 fd       	sbrc	r25, 0
   1548a:	0e c0       	rjmp	.+28     	; 0x154a8 <SS80_Command_State+0xb2>
   1548c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15490:	80 ff       	sbrs	r24, 0
   15492:	0a c0       	rjmp	.+20     	; 0x154a8 <SS80_Command_State+0xb2>
   15494:	84 eb       	ldi	r24, 0xB4	; 180
   15496:	95 e2       	ldi	r25, 0x25	; 37
   15498:	a0 e0       	ldi	r26, 0x00	; 0
   1549a:	ed b7       	in	r30, 0x3d	; 61
   1549c:	fe b7       	in	r31, 0x3e	; 62
   1549e:	81 83       	std	Z+1, r24	; 0x01
   154a0:	92 83       	std	Z+2, r25	; 0x02
   154a2:	a3 83       	std	Z+3, r26	; 0x03
   154a4:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   154a8:	e1 2c       	mov	r14, r1
   154aa:	f1 2c       	mov	r15, r1
   154ac:	88 eb       	ldi	r24, 0xB8	; 184
   154ae:	94 e2       	ldi	r25, 0x24	; 36
   154b0:	9c 01       	movw	r18, r24
   154b2:	40 e0       	ldi	r20, 0x00	; 0
   154b4:	2e 87       	std	Y+14, r18	; 0x0e
   154b6:	3f 87       	std	Y+15, r19	; 0x0f
   154b8:	48 8b       	std	Y+16, r20	; 0x10
   154ba:	8d ed       	ldi	r24, 0xDD	; 221
   154bc:	94 e2       	ldi	r25, 0x24	; 36
   154be:	9c 01       	movw	r18, r24
   154c0:	40 e0       	ldi	r20, 0x00	; 0
   154c2:	29 8b       	std	Y+17, r18	; 0x11
   154c4:	3a 8b       	std	Y+18, r19	; 0x12
   154c6:	4b 8b       	std	Y+19, r20	; 0x13
   154c8:	87 ef       	ldi	r24, 0xF7	; 247
   154ca:	94 e2       	ldi	r25, 0x24	; 36
   154cc:	9c 01       	movw	r18, r24
   154ce:	40 e0       	ldi	r20, 0x00	; 0
   154d0:	2c 8b       	std	Y+20, r18	; 0x14
   154d2:	3d 8b       	std	Y+21, r19	; 0x15
   154d4:	4e 8b       	std	Y+22, r20	; 0x16
   154d6:	8d e0       	ldi	r24, 0x0D	; 13
   154d8:	95 e2       	ldi	r25, 0x25	; 37
   154da:	3c 01       	movw	r6, r24
   154dc:	81 2c       	mov	r8, r1
   154de:	8b e1       	ldi	r24, 0x1B	; 27
   154e0:	95 e2       	ldi	r25, 0x25	; 37
   154e2:	5c 01       	movw	r10, r24
   154e4:	c1 2c       	mov	r12, r1
   154e6:	87 e3       	ldi	r24, 0x37	; 55
   154e8:	95 e2       	ldi	r25, 0x25	; 37
   154ea:	1c 01       	movw	r2, r24
   154ec:	41 2c       	mov	r4, r1
   154ee:	2a 85       	ldd	r18, Y+10	; 0x0a
   154f0:	3b 85       	ldd	r19, Y+11	; 0x0b
   154f2:	87 01       	movw	r16, r14
   154f4:	e2 16       	cp	r14, r18
   154f6:	f3 06       	cpc	r15, r19
   154f8:	0c f0       	brlt	.+2      	; 0x154fc <SS80_Command_State+0x106>
   154fa:	b3 c1       	rjmp	.+870    	; 0x15862 <SS80_Command_State+0x46c>
   154fc:	0f 5f       	subi	r16, 0xFF	; 255
   154fe:	1f 4f       	sbci	r17, 0xFF	; 255
   15500:	f7 01       	movw	r30, r14
   15502:	ee 57       	subi	r30, 0x7E	; 126
   15504:	f3 4e       	sbci	r31, 0xE3	; 227
   15506:	80 81       	ld	r24, Z
   15508:	28 2f       	mov	r18, r24
   1550a:	30 e0       	ldi	r19, 0x00	; 0
   1550c:	a9 01       	movw	r20, r18
   1550e:	40 52       	subi	r20, 0x20	; 32
   15510:	51 09       	sbc	r21, r1
   15512:	40 31       	cpi	r20, 0x10	; 16
   15514:	51 05       	cpc	r21, r1
   15516:	98 f4       	brcc	.+38     	; 0x1553e <SS80_Command_State+0x148>
   15518:	80 52       	subi	r24, 0x20	; 32
   1551a:	1d df       	rcall	.-454    	; 0x15356 <SS80_Check_Unit>
   1551c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15520:	85 ff       	sbrs	r24, 5
   15522:	9d c1       	rjmp	.+826    	; 0x1585e <SS80_Command_State+0x468>
   15524:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   15528:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   1552c:	85 81       	ldd	r24, Z+5	; 0x05
   1552e:	90 e0       	ldi	r25, 0x00	; 0
   15530:	ed b7       	in	r30, 0x3d	; 61
   15532:	fe b7       	in	r31, 0x3e	; 62
   15534:	95 83       	std	Z+5, r25	; 0x05
   15536:	84 83       	std	Z+4, r24	; 0x04
   15538:	8e e9       	ldi	r24, 0x9E	; 158
   1553a:	95 e2       	ldi	r25, 0x25	; 37
   1553c:	19 c0       	rjmp	.+50     	; 0x15570 <SS80_Command_State+0x17a>
   1553e:	a9 01       	movw	r20, r18
   15540:	40 54       	subi	r20, 0x40	; 64
   15542:	51 09       	sbc	r21, r1
   15544:	40 31       	cpi	r20, 0x10	; 16
   15546:	51 05       	cpc	r21, r1
   15548:	d0 f4       	brcc	.+52     	; 0x1557e <SS80_Command_State+0x188>
   1554a:	80 54       	subi	r24, 0x40	; 64
   1554c:	2d df       	rcall	.-422    	; 0x153a8 <SS80_Check_Volume>
   1554e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15552:	85 ff       	sbrs	r24, 5
   15554:	84 c1       	rjmp	.+776    	; 0x1585e <SS80_Command_State+0x468>
   15556:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   1555a:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   1555e:	86 81       	ldd	r24, Z+6	; 0x06
   15560:	90 e0       	ldi	r25, 0x00	; 0
   15562:	ed b7       	in	r30, 0x3d	; 61
   15564:	fe b7       	in	r31, 0x3e	; 62
   15566:	95 83       	std	Z+5, r25	; 0x05
   15568:	84 83       	std	Z+4, r24	; 0x04
   1556a:	25 e8       	ldi	r18, 0x85	; 133
   1556c:	35 e2       	ldi	r19, 0x25	; 37
   1556e:	c9 01       	movw	r24, r18
   15570:	a0 e0       	ldi	r26, 0x00	; 0
   15572:	81 83       	std	Z+1, r24	; 0x01
   15574:	92 83       	std	Z+2, r25	; 0x02
   15576:	a3 83       	std	Z+3, r26	; 0x03
   15578:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   1557c:	70 c1       	rjmp	.+736    	; 0x1585e <SS80_Command_State+0x468>
   1557e:	21 15       	cp	r18, r1
   15580:	31 05       	cpc	r19, r1
   15582:	79 f4       	brne	.+30     	; 0x155a2 <SS80_Command_State+0x1ac>
   15584:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   15588:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   1558c:	81 e0       	ldi	r24, 0x01	; 1
   1558e:	90 e0       	ldi	r25, 0x00	; 0
   15590:	91 83       	std	Z+1, r25	; 0x01
   15592:	80 83       	st	Z, r24
   15594:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15598:	85 ff       	sbrs	r24, 5
   1559a:	63 c1       	rjmp	.+710    	; 0x15862 <SS80_Command_State+0x46c>
   1559c:	8d e6       	ldi	r24, 0x6D	; 109
   1559e:	95 e2       	ldi	r25, 0x25	; 37
   155a0:	0f c0       	rjmp	.+30     	; 0x155c0 <SS80_Command_State+0x1ca>
   155a2:	22 30       	cpi	r18, 0x02	; 2
   155a4:	31 05       	cpc	r19, r1
   155a6:	a9 f4       	brne	.+42     	; 0x155d2 <SS80_Command_State+0x1dc>
   155a8:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   155ac:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   155b0:	31 83       	std	Z+1, r19	; 0x01
   155b2:	20 83       	st	Z, r18
   155b4:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   155b8:	85 ff       	sbrs	r24, 5
   155ba:	53 c1       	rjmp	.+678    	; 0x15862 <SS80_Command_State+0x46c>
   155bc:	84 e5       	ldi	r24, 0x54	; 84
   155be:	95 e2       	ldi	r25, 0x25	; 37
   155c0:	a0 e0       	ldi	r26, 0x00	; 0
   155c2:	ed b7       	in	r30, 0x3d	; 61
   155c4:	fe b7       	in	r31, 0x3e	; 62
   155c6:	81 83       	std	Z+1, r24	; 0x01
   155c8:	92 83       	std	Z+2, r25	; 0x02
   155ca:	a3 83       	std	Z+3, r26	; 0x03
   155cc:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   155d0:	48 c1       	rjmp	.+656    	; 0x15862 <SS80_Command_State+0x46c>
   155d2:	20 31       	cpi	r18, 0x10	; 16
   155d4:	31 05       	cpc	r19, r1
   155d6:	b1 f5       	brne	.+108    	; 0x15644 <SS80_Command_State+0x24e>
   155d8:	20 91 05 19 	lds	r18, 0x1905	; 0x801905 <SS80s>
   155dc:	30 91 06 19 	lds	r19, 0x1906	; 0x801906 <SS80s+0x1>
   155e0:	3d 87       	std	Y+13, r19	; 0x0d
   155e2:	2c 87       	std	Y+12, r18	; 0x0c
   155e4:	46 e0       	ldi	r20, 0x06	; 6
   155e6:	50 e0       	ldi	r21, 0x00	; 0
   155e8:	b8 01       	movw	r22, r16
   155ea:	82 e8       	ldi	r24, 0x82	; 130
   155ec:	9c e1       	ldi	r25, 0x1C	; 28
   155ee:	0e 94 3d c1 	call	0x1827a	; 0x1827a <B2V_MSB>
   155f2:	ec 85       	ldd	r30, Y+12	; 0x0c
   155f4:	fd 85       	ldd	r31, Y+13	; 0x0d
   155f6:	67 83       	std	Z+7, r22	; 0x07
   155f8:	70 87       	std	Z+8, r23	; 0x08
   155fa:	81 87       	std	Z+9, r24	; 0x09
   155fc:	92 87       	std	Z+10, r25	; 0x0a
   155fe:	87 01       	movw	r16, r14
   15600:	09 5f       	subi	r16, 0xF9	; 249
   15602:	1f 4f       	sbci	r17, 0xFF	; 255
   15604:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15608:	85 ff       	sbrs	r24, 5
   1560a:	29 c1       	rjmp	.+594    	; 0x1585e <SS80_Command_State+0x468>
   1560c:	20 91 05 19 	lds	r18, 0x1905	; 0x801905 <SS80s>
   15610:	30 91 06 19 	lds	r19, 0x1906	; 0x801906 <SS80s+0x1>
   15614:	80 91 07 19 	lds	r24, 0x1907	; 0x801907 <SS80p>
   15618:	90 91 08 19 	lds	r25, 0x1908	; 0x801908 <SS80p+0x1>
   1561c:	fc 01       	movw	r30, r24
   1561e:	a0 89       	ldd	r26, Z+16	; 0x10
   15620:	b1 89       	ldd	r27, Z+17	; 0x11
   15622:	f9 01       	movw	r30, r18
   15624:	27 81       	ldd	r18, Z+7	; 0x07
   15626:	30 85       	ldd	r19, Z+8	; 0x08
   15628:	41 85       	ldd	r20, Z+9	; 0x09
   1562a:	52 85       	ldd	r21, Z+10	; 0x0a
   1562c:	0e 94 f9 e4 	call	0x1c9f2	; 0x1c9f2 <__muluhisi3>
   15630:	ed b7       	in	r30, 0x3d	; 61
   15632:	fe b7       	in	r31, 0x3e	; 62
   15634:	64 83       	std	Z+4, r22	; 0x04
   15636:	75 83       	std	Z+5, r23	; 0x05
   15638:	86 83       	std	Z+6, r24	; 0x06
   1563a:	97 83       	std	Z+7, r25	; 0x07
   1563c:	21 82       	std	Z+1, r2	; 0x01
   1563e:	32 82       	std	Z+2, r3	; 0x02
   15640:	43 82       	std	Z+3, r4	; 0x03
   15642:	2e c0       	rjmp	.+92     	; 0x156a0 <SS80_Command_State+0x2aa>
   15644:	28 31       	cpi	r18, 0x18	; 24
   15646:	31 05       	cpc	r19, r1
   15648:	71 f5       	brne	.+92     	; 0x156a6 <SS80_Command_State+0x2b0>
   1564a:	20 91 05 19 	lds	r18, 0x1905	; 0x801905 <SS80s>
   1564e:	30 91 06 19 	lds	r19, 0x1906	; 0x801906 <SS80s+0x1>
   15652:	3d 87       	std	Y+13, r19	; 0x0d
   15654:	2c 87       	std	Y+12, r18	; 0x0c
   15656:	44 e0       	ldi	r20, 0x04	; 4
   15658:	50 e0       	ldi	r21, 0x00	; 0
   1565a:	b8 01       	movw	r22, r16
   1565c:	82 e8       	ldi	r24, 0x82	; 130
   1565e:	9c e1       	ldi	r25, 0x1C	; 28
   15660:	0e 94 3d c1 	call	0x1827a	; 0x1827a <B2V_MSB>
   15664:	ec 85       	ldd	r30, Y+12	; 0x0c
   15666:	fd 85       	ldd	r31, Y+13	; 0x0d
   15668:	63 87       	std	Z+11, r22	; 0x0b
   1566a:	74 87       	std	Z+12, r23	; 0x0c
   1566c:	85 87       	std	Z+13, r24	; 0x0d
   1566e:	96 87       	std	Z+14, r25	; 0x0e
   15670:	87 01       	movw	r16, r14
   15672:	0b 5f       	subi	r16, 0xFB	; 251
   15674:	1f 4f       	sbci	r17, 0xFF	; 255
   15676:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1567a:	85 ff       	sbrs	r24, 5
   1567c:	f0 c0       	rjmp	.+480    	; 0x1585e <SS80_Command_State+0x468>
   1567e:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   15682:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   15686:	83 85       	ldd	r24, Z+11	; 0x0b
   15688:	94 85       	ldd	r25, Z+12	; 0x0c
   1568a:	a5 85       	ldd	r26, Z+13	; 0x0d
   1568c:	b6 85       	ldd	r27, Z+14	; 0x0e
   1568e:	ed b7       	in	r30, 0x3d	; 61
   15690:	fe b7       	in	r31, 0x3e	; 62
   15692:	84 83       	std	Z+4, r24	; 0x04
   15694:	95 83       	std	Z+5, r25	; 0x05
   15696:	a6 83       	std	Z+6, r26	; 0x06
   15698:	b7 83       	std	Z+7, r27	; 0x07
   1569a:	a1 82       	std	Z+1, r10	; 0x01
   1569c:	b2 82       	std	Z+2, r11	; 0x02
   1569e:	c3 82       	std	Z+3, r12	; 0x03
   156a0:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   156a4:	dc c0       	rjmp	.+440    	; 0x1585e <SS80_Command_State+0x468>
   156a6:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   156aa:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   156ae:	24 33       	cpi	r18, 0x34	; 52
   156b0:	31 05       	cpc	r19, r1
   156b2:	41 f4       	brne	.+16     	; 0x156c4 <SS80_Command_State+0x2ce>
   156b4:	85 ff       	sbrs	r24, 5
   156b6:	d3 c0       	rjmp	.+422    	; 0x1585e <SS80_Command_State+0x468>
   156b8:	ed b7       	in	r30, 0x3d	; 61
   156ba:	fe b7       	in	r31, 0x3e	; 62
   156bc:	61 82       	std	Z+1, r6	; 0x01
   156be:	72 82       	std	Z+2, r7	; 0x02
   156c0:	83 82       	std	Z+3, r8	; 0x03
   156c2:	2b c0       	rjmp	.+86     	; 0x1571a <SS80_Command_State+0x324>
   156c4:	29 33       	cpi	r18, 0x39	; 57
   156c6:	31 05       	cpc	r19, r1
   156c8:	49 f4       	brne	.+18     	; 0x156dc <SS80_Command_State+0x2e6>
   156ca:	87 01       	movw	r16, r14
   156cc:	0d 5f       	subi	r16, 0xFD	; 253
   156ce:	1f 4f       	sbci	r17, 0xFF	; 255
   156d0:	85 ff       	sbrs	r24, 5
   156d2:	c5 c0       	rjmp	.+394    	; 0x1585e <SS80_Command_State+0x468>
   156d4:	2c 89       	ldd	r18, Y+20	; 0x14
   156d6:	3d 89       	ldd	r19, Y+21	; 0x15
   156d8:	4e 89       	ldd	r20, Y+22	; 0x16
   156da:	1a c0       	rjmp	.+52     	; 0x15710 <SS80_Command_State+0x31a>
   156dc:	2b 33       	cpi	r18, 0x3B	; 59
   156de:	31 05       	cpc	r19, r1
   156e0:	49 f4       	brne	.+18     	; 0x156f4 <SS80_Command_State+0x2fe>
   156e2:	87 01       	movw	r16, r14
   156e4:	0e 5f       	subi	r16, 0xFE	; 254
   156e6:	1f 4f       	sbci	r17, 0xFF	; 255
   156e8:	85 ff       	sbrs	r24, 5
   156ea:	b9 c0       	rjmp	.+370    	; 0x1585e <SS80_Command_State+0x468>
   156ec:	29 89       	ldd	r18, Y+17	; 0x11
   156ee:	3a 89       	ldd	r19, Y+18	; 0x12
   156f0:	4b 89       	ldd	r20, Y+19	; 0x13
   156f2:	0e c0       	rjmp	.+28     	; 0x15710 <SS80_Command_State+0x31a>
   156f4:	28 34       	cpi	r18, 0x48	; 72
   156f6:	31 05       	cpc	r19, r1
   156f8:	99 f4       	brne	.+38     	; 0x15720 <SS80_Command_State+0x32a>
   156fa:	87 01       	movw	r16, r14
   156fc:	0e 5f       	subi	r16, 0xFE	; 254
   156fe:	1f 4f       	sbci	r17, 0xFF	; 255
   15700:	80 73       	andi	r24, 0x30	; 48
   15702:	99 27       	eor	r25, r25
   15704:	89 2b       	or	r24, r25
   15706:	09 f4       	brne	.+2      	; 0x1570a <SS80_Command_State+0x314>
   15708:	aa c0       	rjmp	.+340    	; 0x1585e <SS80_Command_State+0x468>
   1570a:	2e 85       	ldd	r18, Y+14	; 0x0e
   1570c:	3f 85       	ldd	r19, Y+15	; 0x0f
   1570e:	48 89       	ldd	r20, Y+16	; 0x10
   15710:	ed b7       	in	r30, 0x3d	; 61
   15712:	fe b7       	in	r31, 0x3e	; 62
   15714:	21 83       	std	Z+1, r18	; 0x01
   15716:	32 83       	std	Z+2, r19	; 0x02
   15718:	43 83       	std	Z+3, r20	; 0x03
   1571a:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   1571e:	9f c0       	rjmp	.+318    	; 0x1585e <SS80_Command_State+0x468>
   15720:	24 30       	cpi	r18, 0x04	; 4
   15722:	31 05       	cpc	r19, r1
   15724:	41 f4       	brne	.+16     	; 0x15736 <SS80_Command_State+0x340>
   15726:	80 73       	andi	r24, 0x30	; 48
   15728:	99 27       	eor	r25, r25
   1572a:	89 2b       	or	r24, r25
   1572c:	09 f4       	brne	.+2      	; 0x15730 <SS80_Command_State+0x33a>
   1572e:	99 c0       	rjmp	.+306    	; 0x15862 <SS80_Command_State+0x46c>
   15730:	87 e9       	ldi	r24, 0x97	; 151
   15732:	94 e2       	ldi	r25, 0x24	; 36
   15734:	45 cf       	rjmp	.-374    	; 0x155c0 <SS80_Command_State+0x1ca>
   15736:	2e 30       	cpi	r18, 0x0E	; 14
   15738:	31 05       	cpc	r19, r1
   1573a:	29 f4       	brne	.+10     	; 0x15746 <SS80_Command_State+0x350>
   1573c:	85 ff       	sbrs	r24, 5
   1573e:	91 c0       	rjmp	.+290    	; 0x15862 <SS80_Command_State+0x46c>
   15740:	81 e8       	ldi	r24, 0x81	; 129
   15742:	94 e2       	ldi	r25, 0x24	; 36
   15744:	3d cf       	rjmp	.-390    	; 0x155c0 <SS80_Command_State+0x1ca>
   15746:	2f 30       	cpi	r18, 0x0F	; 15
   15748:	31 05       	cpc	r19, r1
   1574a:	29 f4       	brne	.+10     	; 0x15756 <SS80_Command_State+0x360>
   1574c:	85 ff       	sbrs	r24, 5
   1574e:	89 c0       	rjmp	.+274    	; 0x15862 <SS80_Command_State+0x46c>
   15750:	84 e6       	ldi	r24, 0x64	; 100
   15752:	94 e2       	ldi	r25, 0x24	; 36
   15754:	35 cf       	rjmp	.-406    	; 0x155c0 <SS80_Command_State+0x1ca>
   15756:	21 33       	cpi	r18, 0x31	; 49
   15758:	31 05       	cpc	r19, r1
   1575a:	41 f4       	brne	.+16     	; 0x1576c <SS80_Command_State+0x376>
   1575c:	87 01       	movw	r16, r14
   1575e:	0d 5f       	subi	r16, 0xFD	; 253
   15760:	1f 4f       	sbci	r17, 0xFF	; 255
   15762:	85 ff       	sbrs	r24, 5
   15764:	7e c0       	rjmp	.+252    	; 0x15862 <SS80_Command_State+0x46c>
   15766:	88 e4       	ldi	r24, 0x48	; 72
   15768:	94 e2       	ldi	r25, 0x24	; 36
   1576a:	2a cf       	rjmp	.-428    	; 0x155c0 <SS80_Command_State+0x1ca>
   1576c:	25 33       	cpi	r18, 0x35	; 53
   1576e:	31 05       	cpc	r19, r1
   15770:	69 f4       	brne	.+26     	; 0x1578c <SS80_Command_State+0x396>
   15772:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   15776:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   1577a:	24 e0       	ldi	r18, 0x04	; 4
   1577c:	30 e0       	ldi	r19, 0x00	; 0
   1577e:	31 83       	std	Z+1, r19	; 0x01
   15780:	20 83       	st	Z, r18
   15782:	85 ff       	sbrs	r24, 5
   15784:	6e c0       	rjmp	.+220    	; 0x15862 <SS80_Command_State+0x46c>
   15786:	87 e3       	ldi	r24, 0x37	; 55
   15788:	94 e2       	ldi	r25, 0x24	; 36
   1578a:	1a cf       	rjmp	.-460    	; 0x155c0 <SS80_Command_State+0x1ca>
   1578c:	27 33       	cpi	r18, 0x37	; 55
   1578e:	31 05       	cpc	r19, r1
   15790:	59 f4       	brne	.+22     	; 0x157a8 <SS80_Command_State+0x3b2>
   15792:	87 01       	movw	r16, r14
   15794:	0d 5f       	subi	r16, 0xFD	; 253
   15796:	1f 4f       	sbci	r17, 0xFF	; 255
   15798:	80 73       	andi	r24, 0x30	; 48
   1579a:	99 27       	eor	r25, r25
   1579c:	89 2b       	or	r24, r25
   1579e:	09 f4       	brne	.+2      	; 0x157a2 <SS80_Command_State+0x3ac>
   157a0:	60 c0       	rjmp	.+192    	; 0x15862 <SS80_Command_State+0x46c>
   157a2:	89 e1       	ldi	r24, 0x19	; 25
   157a4:	94 e2       	ldi	r25, 0x24	; 36
   157a6:	0c cf       	rjmp	.-488    	; 0x155c0 <SS80_Command_State+0x1ca>
   157a8:	2e 33       	cpi	r18, 0x3E	; 62
   157aa:	31 05       	cpc	r19, r1
   157ac:	c1 f4       	brne	.+48     	; 0x157de <SS80_Command_State+0x3e8>
   157ae:	80 73       	andi	r24, 0x30	; 48
   157b0:	99 27       	eor	r25, r25
   157b2:	89 2b       	or	r24, r25
   157b4:	81 f0       	breq	.+32     	; 0x157d6 <SS80_Command_State+0x3e0>
   157b6:	8a ef       	ldi	r24, 0xFA	; 250
   157b8:	93 e2       	ldi	r25, 0x23	; 35
   157ba:	a0 e0       	ldi	r26, 0x00	; 0
   157bc:	ed b7       	in	r30, 0x3d	; 61
   157be:	fe b7       	in	r31, 0x3e	; 62
   157c0:	81 83       	std	Z+1, r24	; 0x01
   157c2:	92 83       	std	Z+2, r25	; 0x02
   157c4:	a3 83       	std	Z+3, r26	; 0x03
   157c6:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   157ca:	6c e8       	ldi	r22, 0x8C	; 140
   157cc:	7f e0       	ldi	r23, 0x0F	; 15
   157ce:	c8 01       	movw	r24, r16
   157d0:	8e 57       	subi	r24, 0x7E	; 126
   157d2:	93 4e       	sbci	r25, 0xE3	; 227
   157d4:	6c dc       	rcall	.-1832   	; 0x150ae <SS80_display_extended_status>
   157d6:	87 01       	movw	r16, r14
   157d8:	07 5f       	subi	r16, 0xF7	; 247
   157da:	1f 4f       	sbci	r17, 0xFF	; 255
   157dc:	42 c0       	rjmp	.+132    	; 0x15862 <SS80_Command_State+0x46c>
   157de:	2c 34       	cpi	r18, 0x4C	; 76
   157e0:	31 05       	cpc	r19, r1
   157e2:	39 f4       	brne	.+14     	; 0x157f2 <SS80_Command_State+0x3fc>
   157e4:	80 73       	andi	r24, 0x30	; 48
   157e6:	99 27       	eor	r25, r25
   157e8:	89 2b       	or	r24, r25
   157ea:	d9 f1       	breq	.+118    	; 0x15862 <SS80_Command_State+0x46c>
   157ec:	8f ed       	ldi	r24, 0xDF	; 223
   157ee:	93 e2       	ldi	r25, 0x23	; 35
   157f0:	e7 ce       	rjmp	.-562    	; 0x155c0 <SS80_Command_State+0x1ca>
   157f2:	2d 34       	cpi	r18, 0x4D	; 77
   157f4:	31 05       	cpc	r19, r1
   157f6:	39 f4       	brne	.+14     	; 0x15806 <SS80_Command_State+0x410>
   157f8:	80 73       	andi	r24, 0x30	; 48
   157fa:	99 27       	eor	r25, r25
   157fc:	89 2b       	or	r24, r25
   157fe:	89 f1       	breq	.+98     	; 0x15862 <SS80_Command_State+0x46c>
   15800:	86 ec       	ldi	r24, 0xC6	; 198
   15802:	93 e2       	ldi	r25, 0x23	; 35
   15804:	dd ce       	rjmp	.-582    	; 0x155c0 <SS80_Command_State+0x1ca>
   15806:	2d 30       	cpi	r18, 0x0D	; 13
   15808:	31 05       	cpc	r19, r1
   1580a:	69 f4       	brne	.+26     	; 0x15826 <SS80_Command_State+0x430>
   1580c:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   15810:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   15814:	23 e0       	ldi	r18, 0x03	; 3
   15816:	30 e0       	ldi	r19, 0x00	; 0
   15818:	31 83       	std	Z+1, r19	; 0x01
   1581a:	20 83       	st	Z, r18
   1581c:	85 ff       	sbrs	r24, 5
   1581e:	21 c0       	rjmp	.+66     	; 0x15862 <SS80_Command_State+0x46c>
   15820:	8f ea       	ldi	r24, 0xAF	; 175
   15822:	93 e2       	ldi	r25, 0x23	; 35
   15824:	cd ce       	rjmp	.-614    	; 0x155c0 <SS80_Command_State+0x1ca>
   15826:	23 33       	cpi	r18, 0x33	; 51
   15828:	31 05       	cpc	r19, r1
   1582a:	51 f4       	brne	.+20     	; 0x15840 <SS80_Command_State+0x44a>
   1582c:	87 01       	movw	r16, r14
   1582e:	0c 5f       	subi	r16, 0xFC	; 252
   15830:	1f 4f       	sbci	r17, 0xFF	; 255
   15832:	80 73       	andi	r24, 0x30	; 48
   15834:	99 27       	eor	r25, r25
   15836:	89 2b       	or	r24, r25
   15838:	a1 f0       	breq	.+40     	; 0x15862 <SS80_Command_State+0x46c>
   1583a:	8e e8       	ldi	r24, 0x8E	; 142
   1583c:	93 e2       	ldi	r25, 0x23	; 35
   1583e:	c0 ce       	rjmp	.-640    	; 0x155c0 <SS80_Command_State+0x1ca>
   15840:	80 ff       	sbrs	r24, 0
   15842:	28 c0       	rjmp	.+80     	; 0x15894 <SS80_Command_State+0x49e>
   15844:	ed b7       	in	r30, 0x3d	; 61
   15846:	fe b7       	in	r31, 0x3e	; 62
   15848:	35 83       	std	Z+5, r19	; 0x05
   1584a:	24 83       	std	Z+4, r18	; 0x04
   1584c:	8e e6       	ldi	r24, 0x6E	; 110
   1584e:	93 e2       	ldi	r25, 0x23	; 35
   15850:	a0 e0       	ldi	r26, 0x00	; 0
   15852:	81 83       	std	Z+1, r24	; 0x01
   15854:	92 83       	std	Z+2, r25	; 0x02
   15856:	a3 83       	std	Z+3, r26	; 0x03
   15858:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   1585c:	02 c0       	rjmp	.+4      	; 0x15862 <SS80_Command_State+0x46c>
   1585e:	78 01       	movw	r14, r16
   15860:	46 ce       	rjmp	.-884    	; 0x154ee <SS80_Command_State+0xf8>
   15862:	8a 85       	ldd	r24, Y+10	; 0x0a
   15864:	9b 85       	ldd	r25, Y+11	; 0x0b
   15866:	08 17       	cp	r16, r24
   15868:	19 07       	cpc	r17, r25
   1586a:	a1 f0       	breq	.+40     	; 0x15894 <SS80_Command_State+0x49e>
   1586c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15870:	80 ff       	sbrs	r24, 0
   15872:	10 c0       	rjmp	.+32     	; 0x15894 <SS80_Command_State+0x49e>
   15874:	2a 85       	ldd	r18, Y+10	; 0x0a
   15876:	3b 85       	ldd	r19, Y+11	; 0x0b
   15878:	ed b7       	in	r30, 0x3d	; 61
   1587a:	fe b7       	in	r31, 0x3e	; 62
   1587c:	37 83       	std	Z+7, r19	; 0x07
   1587e:	26 83       	std	Z+6, r18	; 0x06
   15880:	15 83       	std	Z+5, r17	; 0x05
   15882:	04 83       	std	Z+4, r16	; 0x04
   15884:	86 e3       	ldi	r24, 0x36	; 54
   15886:	93 e2       	ldi	r25, 0x23	; 35
   15888:	a0 e0       	ldi	r26, 0x00	; 0
   1588a:	81 83       	std	Z+1, r24	; 0x01
   1588c:	92 83       	std	Z+2, r25	; 0x02
   1588e:	a3 83       	std	Z+3, r26	; 0x03
   15890:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   15894:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   15898:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   1589c:	81 81       	ldd	r24, Z+1	; 0x01
   1589e:	90 e0       	ldi	r25, 0x00	; 0
   158a0:	0e 94 a0 87 	call	0x10f40	; 0x10f40 <gpib_enable_PPR>
   158a4:	88 85       	ldd	r24, Y+8	; 0x08
   158a6:	99 85       	ldd	r25, Y+9	; 0x09
   158a8:	88 27       	eor	r24, r24
   158aa:	90 7d       	andi	r25, 0xD0	; 208
   158ac:	02 c0       	rjmp	.+4      	; 0x158b2 <SS80_Command_State+0x4bc>
   158ae:	80 e0       	ldi	r24, 0x00	; 0
   158b0:	90 e0       	ldi	r25, 0x00	; 0
   158b2:	66 96       	adiw	r28, 0x16	; 22
   158b4:	0f b6       	in	r0, 0x3f	; 63
   158b6:	f8 94       	cli
   158b8:	de bf       	out	0x3e, r29	; 62
   158ba:	0f be       	out	0x3f, r0	; 63
   158bc:	cd bf       	out	0x3d, r28	; 61
   158be:	df 91       	pop	r29
   158c0:	cf 91       	pop	r28
   158c2:	1f 91       	pop	r17
///
/// @param[in] uart: uart number.
///
/// @return  Character count in receive buffer.
int uart_keyhit(uint8_t uart)
{
   158c4:	0f 91       	pop	r16
   158c6:	ff 90       	pop	r15
   158c8:	ef 90       	pop	r14
   158ca:	cf 90       	pop	r12
   158cc:	bf 90       	pop	r11
   158ce:	af 90       	pop	r10
   158d0:	8f 90       	pop	r8
   158d2:	7f 90       	pop	r7
   158d4:	6f 90       	pop	r6
   158d6:	4f 90       	pop	r4
   158d8:	3f 90       	pop	r3
   158da:	2f 90       	pop	r2
   158dc:	08 95       	ret

000158de <SS80_cmd_seek>:
   158de:	a7 e0       	ldi	r26, 0x07	; 7
   158e0:	b0 e0       	ldi	r27, 0x00	; 0
   158e2:	e5 e7       	ldi	r30, 0x75	; 117
   158e4:	fc ea       	ldi	r31, 0xAC	; 172
   158e6:	0c 94 1b e5 	jmp	0x1ca36	; 0x1ca36 <__prologue_saves__+0x4>
   158ea:	c0 91 05 19 	lds	r28, 0x1905	; 0x801905 <SS80s>
   158ee:	d0 91 06 19 	lds	r29, 0x1906	; 0x801906 <SS80s+0x1>
   158f2:	8f 80       	ldd	r8, Y+7	; 0x07
   158f4:	98 84       	ldd	r9, Y+8	; 0x08
   158f6:	a9 84       	ldd	r10, Y+9	; 0x09
   158f8:	ba 84       	ldd	r11, Y+10	; 0x0a
   158fa:	00 91 07 19 	lds	r16, 0x1907	; 0x801907 <SS80p>
   158fe:	10 91 08 19 	lds	r17, 0x1908	; 0x801908 <SS80p+0x1>
   15902:	f8 01       	movw	r30, r16
   15904:	c0 88       	ldd	r12, Z+16	; 0x10
   15906:	d1 88       	ldd	r13, Z+17	; 0x11
   15908:	e1 2c       	mov	r14, r1
   1590a:	f1 2c       	mov	r15, r1
   1590c:	6b 85       	ldd	r22, Y+11	; 0x0b
   1590e:	7c 85       	ldd	r23, Y+12	; 0x0c
   15910:	8d 85       	ldd	r24, Y+13	; 0x0d
   15912:	9e 85       	ldd	r25, Y+14	; 0x0e
   15914:	a7 01       	movw	r20, r14
   15916:	96 01       	movw	r18, r12
   15918:	0e 94 97 e4 	call	0x1c92e	; 0x1c92e <__udivmodsi4>
   1591c:	da 01       	movw	r26, r20
   1591e:	c9 01       	movw	r24, r18
   15920:	88 0d       	add	r24, r8
   15922:	99 1d       	adc	r25, r9
   15924:	aa 1d       	adc	r26, r10
   15926:	bb 1d       	adc	r27, r11
   15928:	f8 01       	movw	r30, r16
   1592a:	46 a0       	ldd	r4, Z+38	; 0x26
   1592c:	57 a0       	ldd	r5, Z+39	; 0x27
   1592e:	60 a4       	ldd	r6, Z+40	; 0x28
   15930:	71 a4       	ldd	r7, Z+41	; 0x29
   15932:	40 91 c3 01 	lds	r20, 0x01C3	; 0x8001c3 <debuglevel>
   15936:	50 91 c4 01 	lds	r21, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1593a:	48 16       	cp	r4, r24
   1593c:	59 06       	cpc	r5, r25
   1593e:	6a 06       	cpc	r6, r26
   15940:	7b 06       	cpc	r7, r27
   15942:	f0 f4       	brcc	.+60     	; 0x15980 <SS80_cmd_seek+0xa2>
   15944:	81 e0       	ldi	r24, 0x01	; 1
   15946:	8a 83       	std	Y+2, r24	; 0x02
   15948:	8b 81       	ldd	r24, Y+3	; 0x03
   1594a:	9c 81       	ldd	r25, Y+4	; 0x04
   1594c:	84 60       	ori	r24, 0x04	; 4
   1594e:	9c 83       	std	Y+4, r25	; 0x04
   15950:	8b 83       	std	Y+3, r24	; 0x03
   15952:	40 ff       	sbrs	r20, 0
   15954:	31 c0       	rjmp	.+98     	; 0x159b8 <SS80_cmd_seek+0xda>
   15956:	a0 89       	ldd	r26, Z+16	; 0x10
   15958:	b1 89       	ldd	r27, Z+17	; 0x11
   1595a:	a5 01       	movw	r20, r10
   1595c:	94 01       	movw	r18, r8
   1595e:	0e 94 f9 e4 	call	0x1c9f2	; 0x1c9f2 <__muluhisi3>
    return ( uart_rx_count( uart ) );
}
   15962:	ed b7       	in	r30, 0x3d	; 61
   15964:	fe b7       	in	r31, 0x3e	; 62
   15966:	64 83       	std	Z+4, r22	; 0x04
   15968:	75 83       	std	Z+5, r23	; 0x05
   1596a:	86 83       	std	Z+6, r24	; 0x06
   1596c:	97 83       	std	Z+7, r25	; 0x07
   1596e:	83 ef       	ldi	r24, 0xF3	; 243
   15970:	91 e2       	ldi	r25, 0x21	; 33
   15972:	a0 e0       	ldi	r26, 0x00	; 0
   15974:	81 83       	std	Z+1, r24	; 0x01
   15976:	92 83       	std	Z+2, r25	; 0x02
   15978:	a3 83       	std	Z+3, r26	; 0x03
   1597a:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   1597e:	1c c0       	rjmp	.+56     	; 0x159b8 <SS80_cmd_seek+0xda>
   15980:	ca 01       	movw	r24, r20
   15982:	80 72       	andi	r24, 0x20	; 32
   15984:	99 27       	eor	r25, r25
   15986:	45 ff       	sbrs	r20, 5
   15988:	19 c0       	rjmp	.+50     	; 0x159bc <SS80_cmd_seek+0xde>
   1598a:	a5 01       	movw	r20, r10
   1598c:	94 01       	movw	r18, r8
   1598e:	c7 01       	movw	r24, r14
   15990:	b6 01       	movw	r22, r12
   15992:	0e 94 55 e4 	call	0x1c8aa	; 0x1c8aa <__mulsi3>
   15996:	ed b7       	in	r30, 0x3d	; 61
   15998:	fe b7       	in	r31, 0x3e	; 62
   1599a:	64 83       	std	Z+4, r22	; 0x04
   1599c:	75 83       	std	Z+5, r23	; 0x05
   1599e:	86 83       	std	Z+6, r24	; 0x06
   159a0:	97 83       	std	Z+7, r25	; 0x07
   159a2:	8f ed       	ldi	r24, 0xDF	; 223
   159a4:	91 e2       	ldi	r25, 0x21	; 33
   159a6:	a0 e0       	ldi	r26, 0x00	; 0
   159a8:	81 83       	std	Z+1, r24	; 0x01
   159aa:	92 83       	std	Z+2, r25	; 0x02
   159ac:	a3 83       	std	Z+3, r26	; 0x03
   159ae:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   159b2:	80 e0       	ldi	r24, 0x00	; 0
   159b4:	90 e0       	ldi	r25, 0x00	; 0
   159b6:	02 c0       	rjmp	.+4      	; 0x159bc <SS80_cmd_seek+0xde>
   159b8:	81 e0       	ldi	r24, 0x01	; 1
   159ba:	90 e0       	ldi	r25, 0x00	; 0
   159bc:	cd b7       	in	r28, 0x3d	; 61
   159be:	de b7       	in	r29, 0x3e	; 62
   159c0:	27 96       	adiw	r28, 0x07	; 7
   159c2:	e0 e1       	ldi	r30, 0x10	; 16
   159c4:	0c 94 37 e5 	jmp	0x1ca6e	; 0x1ca6e <__epilogue_restores__+0x4>

000159c8 <SS80_locate_and_write>:
   159c8:	a3 e1       	ldi	r26, 0x13	; 19
   159ca:	b0 e0       	ldi	r27, 0x00	; 0
   159cc:	ea ee       	ldi	r30, 0xEA	; 234
   159ce:	fc ea       	ldi	r31, 0xAC	; 172
   159d0:	0c 94 19 e5 	jmp	0x1ca32	; 0x1ca32 <__prologue_saves__>
   159d4:	00 91 05 19 	lds	r16, 0x1905	; 0x801905 <SS80s>
   159d8:	10 91 06 19 	lds	r17, 0x1906	; 0x801906 <SS80s+0x1>
   159dc:	80 91 07 19 	lds	r24, 0x1907	; 0x801907 <SS80p>
   159e0:	90 91 08 19 	lds	r25, 0x1908	; 0x801908 <SS80p+0x1>
   159e4:	fc 01       	movw	r30, r24
   159e6:	a0 89       	ldd	r26, Z+16	; 0x10
   159e8:	b1 89       	ldd	r27, Z+17	; 0x11
   159ea:	f8 01       	movw	r30, r16
   159ec:	27 81       	ldd	r18, Z+7	; 0x07
   159ee:	30 85       	ldd	r19, Z+8	; 0x08
   159f0:	41 85       	ldd	r20, Z+9	; 0x09
   159f2:	52 85       	ldd	r21, Z+10	; 0x0a
   159f4:	0e 94 f9 e4 	call	0x1c9f2	; 0x1c9f2 <__muluhisi3>
   159f8:	4b 01       	movw	r8, r22
   159fa:	5c 01       	movw	r10, r24
   159fc:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15a00:	85 ff       	sbrs	r24, 5
   15a02:	16 c0       	rjmp	.+44     	; 0x15a30 <SS80_locate_and_write+0x68>
   15a04:	83 85       	ldd	r24, Z+11	; 0x0b
   15a06:	94 85       	ldd	r25, Z+12	; 0x0c
   15a08:	a5 85       	ldd	r26, Z+13	; 0x0d
   15a0a:	b6 85       	ldd	r27, Z+14	; 0x0e
   15a0c:	ed b7       	in	r30, 0x3d	; 61
   15a0e:	fe b7       	in	r31, 0x3e	; 62
   15a10:	80 87       	std	Z+8, r24	; 0x08
   15a12:	91 87       	std	Z+9, r25	; 0x09
   15a14:	a2 87       	std	Z+10, r26	; 0x0a
   15a16:	b3 87       	std	Z+11, r27	; 0x0b
   15a18:	84 82       	std	Z+4, r8	; 0x04
   15a1a:	95 82       	std	Z+5, r9	; 0x05
   15a1c:	a6 82       	std	Z+6, r10	; 0x06
   15a1e:	b7 82       	std	Z+7, r11	; 0x07
   15a20:	84 e7       	ldi	r24, 0x74	; 116
   15a22:	97 e2       	ldi	r25, 0x27	; 39
   15a24:	a0 e0       	ldi	r26, 0x00	; 0
   15a26:	81 83       	std	Z+1, r24	; 0x01
   15a28:	92 83       	std	Z+2, r25	; 0x02
   15a2a:	a3 83       	std	Z+3, r26	; 0x03
   15a2c:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   15a30:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   15a34:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   15a38:	12 82       	std	Z+2, r1	; 0x02
   15a3a:	54 98       	cbi	0x0a, 4	; 10
   15a3c:	4c 99       	sbic	0x09, 4	; 9
   15a3e:	03 c0       	rjmp	.+6      	; 0x15a46 <SS80_locate_and_write+0x7e>
   15a40:	80 e0       	ldi	r24, 0x00	; 0
   15a42:	90 e1       	ldi	r25, 0x10	; 16
   15a44:	4f c1       	rjmp	.+670    	; 0x15ce4 <SS80_locate_and_write+0x31c>
   15a46:	4b df       	rcall	.-362    	; 0x158de <SS80_cmd_seek>
   15a48:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   15a4c:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   15a50:	89 2b       	or	r24, r25
   15a52:	41 f0       	breq	.+16     	; 0x15a64 <SS80_locate_and_write+0x9c>
   15a54:	83 81       	ldd	r24, Z+3	; 0x03
   15a56:	94 81       	ldd	r25, Z+4	; 0x04
   15a58:	82 60       	ori	r24, 0x02	; 2
   15a5a:	94 83       	std	Z+4, r25	; 0x04
   15a5c:	83 83       	std	Z+3, r24	; 0x03
   15a5e:	01 e0       	ldi	r16, 0x01	; 1
   15a60:	10 e0       	ldi	r17, 0x00	; 0
   15a62:	02 c0       	rjmp	.+4      	; 0x15a68 <SS80_locate_and_write+0xa0>
   15a64:	00 e0       	ldi	r16, 0x00	; 0
   15a66:	10 e0       	ldi	r17, 0x00	; 0
   15a68:	23 84       	ldd	r2, Z+11	; 0x0b
   15a6a:	34 84       	ldd	r3, Z+12	; 0x0c
   15a6c:	1d 86       	std	Y+13, r1	; 0x0d
   15a6e:	1c 86       	std	Y+12, r1	; 0x0c
   15a70:	41 2c       	mov	r4, r1
   15a72:	51 2c       	mov	r5, r1
   15a74:	32 01       	movw	r6, r4
   15a76:	87 e2       	ldi	r24, 0x27	; 39
   15a78:	97 e2       	ldi	r25, 0x27	; 39
   15a7a:	9c 01       	movw	r18, r24
   15a7c:	40 e0       	ldi	r20, 0x00	; 0
   15a7e:	2e 87       	std	Y+14, r18	; 0x0e
   15a80:	3f 87       	std	Y+15, r19	; 0x0f
   15a82:	48 8b       	std	Y+16, r20	; 0x10
   15a84:	8d e4       	ldi	r24, 0x4D	; 77
   15a86:	97 e2       	ldi	r25, 0x27	; 39
   15a88:	9c 01       	movw	r18, r24
   15a8a:	40 e0       	ldi	r20, 0x00	; 0
   15a8c:	29 8b       	std	Y+17, r18	; 0x11
   15a8e:	3a 8b       	std	Y+18, r19	; 0x12
   15a90:	4b 8b       	std	Y+19, r20	; 0x13
   15a92:	12 14       	cp	r1, r2
   15a94:	13 04       	cpc	r1, r3
   15a96:	0c f0       	brlt	.+2      	; 0x15a9a <SS80_locate_and_write+0xd2>
   15a98:	f5 c0       	rjmp	.+490    	; 0x15c84 <SS80_locate_and_write+0x2bc>
   15a9a:	54 98       	cbi	0x0a, 4	; 10
   15a9c:	4c 9b       	sbis	0x09, 4	; 9
   15a9e:	d0 cf       	rjmp	.-96     	; 0x15a40 <SS80_locate_and_write+0x78>
   15aa0:	71 01       	movw	r14, r2
   15aa2:	31 e0       	ldi	r19, 0x01	; 1
   15aa4:	23 16       	cp	r2, r19
   15aa6:	33 06       	cpc	r3, r19
   15aa8:	1c f0       	brlt	.+6      	; 0x15ab0 <SS80_locate_and_write+0xe8>
   15aaa:	e1 2c       	mov	r14, r1
   15aac:	ff 24       	eor	r15, r15
   15aae:	f3 94       	inc	r15
   15ab0:	e2 e8       	ldi	r30, 0x82	; 130
   15ab2:	fc e1       	ldi	r31, 0x1C	; 28
   15ab4:	20 e0       	ldi	r18, 0x00	; 0
   15ab6:	32 e0       	ldi	r19, 0x02	; 2
   15ab8:	11 92       	st	Z+, r1
   15aba:	21 50       	subi	r18, 0x01	; 1
   15abc:	30 40       	sbci	r19, 0x00	; 0
   15abe:	e1 f7       	brne	.-8      	; 0x15ab8 <SS80_locate_and_write+0xf0>
   15ac0:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15ac4:	87 fd       	sbrc	r24, 7
   15ac6:	0e 94 de 86 	call	0x10dbc	; 0x10dbc <gpib_timer_elapsed_begin>
   15aca:	ae 01       	movw	r20, r28
   15acc:	44 5f       	subi	r20, 0xF4	; 244
   15ace:	5f 4f       	sbci	r21, 0xFF	; 255
   15ad0:	b7 01       	movw	r22, r14
   15ad2:	82 e8       	ldi	r24, 0x82	; 130
   15ad4:	9c e1       	ldi	r25, 0x1C	; 28
   15ad6:	0e 94 58 8c 	call	0x118b0	; 0x118b0 <gpib_read_str>
   15ada:	6c 01       	movw	r12, r24
   15adc:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15ae0:	87 ff       	sbrs	r24, 7
   15ae2:	04 c0       	rjmp	.+8      	; 0x15aec <SS80_locate_and_write+0x124>
   15ae4:	88 ea       	ldi	r24, 0xA8	; 168
   15ae6:	9f e0       	ldi	r25, 0x0F	; 15
   15ae8:	0e 94 f0 86 	call	0x10de0	; 0x10de0 <gpib_timer_elapsed_end>
   15aec:	ce 14       	cp	r12, r14
   15aee:	df 04       	cpc	r13, r15
   15af0:	39 f1       	breq	.+78     	; 0x15b40 <SS80_locate_and_write+0x178>
   15af2:	8c 85       	ldd	r24, Y+12	; 0x0c
   15af4:	9d 85       	ldd	r25, Y+13	; 0x0d
   15af6:	9c 01       	movw	r18, r24
   15af8:	22 27       	eor	r18, r18
   15afa:	30 7d       	andi	r19, 0xD0	; 208
   15afc:	23 2b       	or	r18, r19
   15afe:	d1 f0       	breq	.+52     	; 0x15b34 <SS80_locate_and_write+0x16c>
   15b00:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15b04:	80 ff       	sbrs	r24, 0
   15b06:	0a c0       	rjmp	.+20     	; 0x15b1c <SS80_locate_and_write+0x154>
   15b08:	81 e6       	ldi	r24, 0x61	; 97
   15b0a:	97 e2       	ldi	r25, 0x27	; 39
   15b0c:	a0 e0       	ldi	r26, 0x00	; 0
   15b0e:	ed b7       	in	r30, 0x3d	; 61
   15b10:	fe b7       	in	r31, 0x3e	; 62
   15b12:	81 83       	std	Z+1, r24	; 0x01
   15b14:	92 83       	std	Z+2, r25	; 0x02
   15b16:	a3 83       	std	Z+3, r26	; 0x03
   15b18:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   15b1c:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   15b20:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   15b24:	83 81       	ldd	r24, Z+3	; 0x03
   15b26:	94 81       	ldd	r25, Z+4	; 0x04
   15b28:	82 60       	ori	r24, 0x02	; 2
   15b2a:	94 83       	std	Z+4, r25	; 0x04
   15b2c:	83 83       	std	Z+3, r24	; 0x03
   15b2e:	81 e0       	ldi	r24, 0x01	; 1
   15b30:	82 83       	std	Z+2, r24	; 0x02
   15b32:	99 c0       	rjmp	.+306    	; 0x15c66 <SS80_locate_and_write+0x29e>
   15b34:	c1 14       	cp	r12, r1
   15b36:	d1 04       	cpc	r13, r1
   15b38:	09 f0       	breq	.+2      	; 0x15b3c <SS80_locate_and_write+0x174>
   15b3a:	d0 c0       	rjmp	.+416    	; 0x15cdc <SS80_locate_and_write+0x314>
   15b3c:	90 fd       	sbrc	r25, 0
   15b3e:	93 c0       	rjmp	.+294    	; 0x15c66 <SS80_locate_and_write+0x29e>
   15b40:	01 15       	cp	r16, r1
   15b42:	11 05       	cpc	r17, r1
   15b44:	09 f0       	breq	.+2      	; 0x15b48 <SS80_locate_and_write+0x180>
   15b46:	84 c0       	rjmp	.+264    	; 0x15c50 <SS80_locate_and_write+0x288>
   15b48:	c1 14       	cp	r12, r1
   15b4a:	d1 04       	cpc	r13, r1
   15b4c:	09 f4       	brne	.+2      	; 0x15b50 <SS80_locate_and_write+0x188>
   15b4e:	82 c0       	rjmp	.+260    	; 0x15c54 <SS80_locate_and_write+0x28c>
   15b50:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15b54:	86 fd       	sbrc	r24, 6
   15b56:	0e 94 de 86 	call	0x10dbc	; 0x10dbc <gpib_timer_elapsed_begin>
   15b5a:	e0 90 05 19 	lds	r14, 0x1905	; 0x801905 <SS80s>
   15b5e:	f0 90 06 19 	lds	r15, 0x1906	; 0x801906 <SS80s+0x1>
   15b62:	f3 e0       	ldi	r31, 0x03	; 3
   15b64:	ef 0e       	add	r14, r31
   15b66:	f1 1c       	adc	r15, r1
   15b68:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   15b6c:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   15b70:	86 01       	movw	r16, r12
   15b72:	22 e8       	ldi	r18, 0x82	; 130
   15b74:	3c e1       	ldi	r19, 0x1C	; 28
   15b76:	b5 01       	movw	r22, r10
   15b78:	a4 01       	movw	r20, r8
   15b7a:	82 81       	ldd	r24, Z+2	; 0x02
   15b7c:	93 81       	ldd	r25, Z+3	; 0x03
   15b7e:	0e 94 87 86 	call	0x10d0e	; 0x10d0e <dbf_open_write>
   15b82:	7c 01       	movw	r14, r24
   15b84:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15b88:	86 ff       	sbrs	r24, 6
   15b8a:	04 c0       	rjmp	.+8      	; 0x15b94 <SS80_locate_and_write+0x1cc>
   15b8c:	82 eb       	ldi	r24, 0xB2	; 178
   15b8e:	9f e0       	ldi	r25, 0x0F	; 15
   15b90:	0e 94 f0 86 	call	0x10de0	; 0x10de0 <gpib_timer_elapsed_end>
   15b94:	ce 14       	cp	r12, r14
   15b96:	df 04       	cpc	r13, r15
   15b98:	39 f1       	breq	.+78     	; 0x15be8 <SS80_locate_and_write+0x220>
   15b9a:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   15b9e:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   15ba2:	83 81       	ldd	r24, Z+3	; 0x03
   15ba4:	94 81       	ldd	r25, Z+4	; 0x04
   15ba6:	82 60       	ori	r24, 0x02	; 2
   15ba8:	94 83       	std	Z+4, r25	; 0x04
   15baa:	83 83       	std	Z+3, r24	; 0x03
   15bac:	0e 94 90 71 	call	0xe320	; 0xe320 <mmc_wp_status>
   15bb0:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   15bb4:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   15bb8:	89 2b       	or	r24, r25
   15bba:	29 f0       	breq	.+10     	; 0x15bc6 <SS80_locate_and_write+0x1fe>
   15bbc:	83 81       	ldd	r24, Z+3	; 0x03
   15bbe:	94 81       	ldd	r25, Z+4	; 0x04
   15bc0:	88 60       	ori	r24, 0x08	; 8
   15bc2:	94 83       	std	Z+4, r25	; 0x04
   15bc4:	83 83       	std	Z+3, r24	; 0x03
   15bc6:	21 e0       	ldi	r18, 0x01	; 1
   15bc8:	22 83       	std	Z+2, r18	; 0x02
   15bca:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15bce:	80 ff       	sbrs	r24, 0
   15bd0:	27 c0       	rjmp	.+78     	; 0x15c20 <SS80_locate_and_write+0x258>
   15bd2:	89 89       	ldd	r24, Y+17	; 0x11
   15bd4:	9a 89       	ldd	r25, Y+18	; 0x12
   15bd6:	ab 89       	ldd	r26, Y+19	; 0x13
   15bd8:	ed b7       	in	r30, 0x3d	; 61
   15bda:	fe b7       	in	r31, 0x3e	; 62
   15bdc:	81 83       	std	Z+1, r24	; 0x01
   15bde:	92 83       	std	Z+2, r25	; 0x02
   15be0:	a3 83       	std	Z+3, r26	; 0x03
   15be2:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   15be6:	1c c0       	rjmp	.+56     	; 0x15c20 <SS80_locate_and_write+0x258>
   15be8:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15bec:	85 ff       	sbrs	r24, 5
   15bee:	0c c0       	rjmp	.+24     	; 0x15c08 <SS80_locate_and_write+0x240>
   15bf0:	ed b7       	in	r30, 0x3d	; 61
   15bf2:	fe b7       	in	r31, 0x3e	; 62
   15bf4:	d5 82       	std	Z+5, r13	; 0x05
   15bf6:	c4 82       	std	Z+4, r12	; 0x04
   15bf8:	2e 85       	ldd	r18, Y+14	; 0x0e
   15bfa:	3f 85       	ldd	r19, Y+15	; 0x0f
   15bfc:	48 89       	ldd	r20, Y+16	; 0x10
   15bfe:	21 83       	std	Z+1, r18	; 0x01
   15c00:	32 83       	std	Z+2, r19	; 0x02
   15c02:	43 83       	std	Z+3, r20	; 0x03
   15c04:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   15c08:	c6 01       	movw	r24, r12
   15c0a:	0d 2c       	mov	r0, r13
   15c0c:	00 0c       	add	r0, r0
   15c0e:	aa 0b       	sbc	r26, r26
   15c10:	bb 0b       	sbc	r27, r27
   15c12:	88 0e       	add	r8, r24
   15c14:	99 1e       	adc	r9, r25
   15c16:	aa 1e       	adc	r10, r26
   15c18:	bb 1e       	adc	r11, r27
   15c1a:	00 e0       	ldi	r16, 0x00	; 0
   15c1c:	10 e0       	ldi	r17, 0x00	; 0
   15c1e:	05 c0       	rjmp	.+10     	; 0x15c2a <SS80_locate_and_write+0x262>
   15c20:	ec 14       	cp	r14, r12
   15c22:	fd 04       	cpc	r15, r13
   15c24:	64 f0       	brlt	.+24     	; 0x15c3e <SS80_locate_and_write+0x276>
   15c26:	01 e0       	ldi	r16, 0x01	; 1
   15c28:	10 e0       	ldi	r17, 0x00	; 0
   15c2a:	c7 01       	movw	r24, r14
   15c2c:	0f 2c       	mov	r0, r15
   15c2e:	00 0c       	add	r0, r0
   15c30:	aa 0b       	sbc	r26, r26
   15c32:	bb 0b       	sbc	r27, r27
   15c34:	48 0e       	add	r4, r24
   15c36:	59 1e       	adc	r5, r25
   15c38:	6a 1e       	adc	r6, r26
   15c3a:	7b 1e       	adc	r7, r27
   15c3c:	0b c0       	rjmp	.+22     	; 0x15c54 <SS80_locate_and_write+0x28c>
   15c3e:	c6 01       	movw	r24, r12
   15c40:	0d 2c       	mov	r0, r13
   15c42:	00 0c       	add	r0, r0
   15c44:	aa 0b       	sbc	r26, r26
   15c46:	bb 0b       	sbc	r27, r27
   15c48:	48 0e       	add	r4, r24
   15c4a:	59 1e       	adc	r5, r25
   15c4c:	6a 1e       	adc	r6, r26
   15c4e:	7b 1e       	adc	r7, r27
   15c50:	01 e0       	ldi	r16, 0x01	; 1
   15c52:	10 e0       	ldi	r17, 0x00	; 0
   15c54:	2c 18       	sub	r2, r12
   15c56:	3d 08       	sbc	r3, r13
   15c58:	8c 85       	ldd	r24, Y+12	; 0x0c
   15c5a:	9d 85       	ldd	r25, Y+13	; 0x0d
   15c5c:	90 ff       	sbrs	r25, 0
   15c5e:	19 cf       	rjmp	.-462    	; 0x15a92 <SS80_locate_and_write+0xca>
   15c60:	12 14       	cp	r1, r2
   15c62:	13 04       	cpc	r1, r3
   15c64:	7c f4       	brge	.+30     	; 0x15c84 <SS80_locate_and_write+0x2bc>
   15c66:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15c6a:	80 ff       	sbrs	r24, 0
   15c6c:	1d c0       	rjmp	.+58     	; 0x15ca8 <SS80_locate_and_write+0x2e0>
   15c6e:	8f ef       	ldi	r24, 0xFF	; 255
   15c70:	96 e2       	ldi	r25, 0x26	; 38
   15c72:	a0 e0       	ldi	r26, 0x00	; 0
   15c74:	ed b7       	in	r30, 0x3d	; 61
   15c76:	fe b7       	in	r31, 0x3e	; 62
   15c78:	81 83       	std	Z+1, r24	; 0x01
   15c7a:	92 83       	std	Z+2, r25	; 0x02
   15c7c:	a3 83       	std	Z+3, r26	; 0x03
   15c7e:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   15c82:	12 c0       	rjmp	.+36     	; 0x15ca8 <SS80_locate_and_write+0x2e0>
   15c84:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15c88:	85 ff       	sbrs	r24, 5
   15c8a:	0e c0       	rjmp	.+28     	; 0x15ca8 <SS80_locate_and_write+0x2e0>
   15c8c:	ed b7       	in	r30, 0x3d	; 61
   15c8e:	fe b7       	in	r31, 0x3e	; 62
   15c90:	44 82       	std	Z+4, r4	; 0x04
   15c92:	55 82       	std	Z+5, r5	; 0x05
   15c94:	66 82       	std	Z+6, r6	; 0x06
   15c96:	77 82       	std	Z+7, r7	; 0x07
   15c98:	84 ed       	ldi	r24, 0xD4	; 212
   15c9a:	96 e2       	ldi	r25, 0x26	; 38
   15c9c:	a0 e0       	ldi	r26, 0x00	; 0
   15c9e:	81 83       	std	Z+1, r24	; 0x01
   15ca0:	92 83       	std	Z+2, r25	; 0x02
   15ca2:	a3 83       	std	Z+3, r26	; 0x03
   15ca4:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   15ca8:	00 91 05 19 	lds	r16, 0x1905	; 0x801905 <SS80s>
   15cac:	10 91 06 19 	lds	r17, 0x1906	; 0x801906 <SS80s+0x1>
   15cb0:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   15cb4:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   15cb8:	20 89       	ldd	r18, Z+16	; 0x10
   15cba:	31 89       	ldd	r19, Z+17	; 0x11
   15cbc:	40 e0       	ldi	r20, 0x00	; 0
   15cbe:	50 e0       	ldi	r21, 0x00	; 0
   15cc0:	c5 01       	movw	r24, r10
   15cc2:	b4 01       	movw	r22, r8
   15cc4:	0e 94 97 e4 	call	0x1c92e	; 0x1c92e <__udivmodsi4>
   15cc8:	f8 01       	movw	r30, r16
   15cca:	27 83       	std	Z+7, r18	; 0x07
   15ccc:	30 87       	std	Z+8, r19	; 0x08
   15cce:	41 87       	std	Z+9, r20	; 0x09
   15cd0:	52 87       	std	Z+10, r21	; 0x0a
   15cd2:	8c 85       	ldd	r24, Y+12	; 0x0c
   15cd4:	9d 85       	ldd	r25, Y+13	; 0x0d
   15cd6:	88 27       	eor	r24, r24
   15cd8:	90 7d       	andi	r25, 0xD0	; 208
   15cda:	04 c0       	rjmp	.+8      	; 0x15ce4 <SS80_locate_and_write+0x31c>
   15cdc:	01 2b       	or	r16, r17
   15cde:	09 f4       	brne	.+2      	; 0x15ce2 <SS80_locate_and_write+0x31a>
   15ce0:	37 cf       	rjmp	.-402    	; 0x15b50 <SS80_locate_and_write+0x188>
   15ce2:	b6 cf       	rjmp	.-148    	; 0x15c50 <SS80_locate_and_write+0x288>
   15ce4:	63 96       	adiw	r28, 0x13	; 19
   15ce6:	e2 e1       	ldi	r30, 0x12	; 18
   15ce8:	0c 94 35 e5 	jmp	0x1ca6a	; 0x1ca6a <__epilogue_restores__>

00015cec <SS80_Report>:
   15cec:	a8 e0       	ldi	r26, 0x08	; 8
   15cee:	b0 e0       	ldi	r27, 0x00	; 0
   15cf0:	ec e7       	ldi	r30, 0x7C	; 124
   15cf2:	fe ea       	ldi	r31, 0xAE	; 174
   15cf4:	0c 94 29 e5 	jmp	0x1ca52	; 0x1ca52 <__prologue_saves__+0x20>
   15cf8:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   15cfc:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   15d00:	82 81       	ldd	r24, Z+2	; 0x02
   15d02:	88 87       	std	Y+8, r24	; 0x08
   15d04:	80 e0       	ldi	r24, 0x00	; 0
   15d06:	91 e0       	ldi	r25, 0x01	; 1
   15d08:	9f 83       	std	Y+7, r25	; 0x07
   15d0a:	8e 83       	std	Y+6, r24	; 0x06
   15d0c:	ae 01       	movw	r20, r28
   15d0e:	4a 5f       	subi	r20, 0xFA	; 250
   15d10:	5f 4f       	sbci	r21, 0xFF	; 255
   15d12:	61 e0       	ldi	r22, 0x01	; 1
   15d14:	70 e0       	ldi	r23, 0x00	; 0
   15d16:	ce 01       	movw	r24, r28
   15d18:	08 96       	adiw	r24, 0x08	; 8
   15d1a:	0e 94 fa 8c 	call	0x119f4	; 0x119f4 <gpib_write_str>
   15d1e:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   15d22:	01 97       	sbiw	r24, 0x01	; 1
   15d24:	89 f0       	breq	.+34     	; 0x15d48 <SS80_Report+0x5c>
   15d26:	20 ff       	sbrs	r18, 0
   15d28:	0a c0       	rjmp	.+20     	; 0x15d3e <SS80_Report+0x52>
   15d2a:	85 ec       	ldi	r24, 0xC5	; 197
   15d2c:	91 e2       	ldi	r25, 0x21	; 33
   15d2e:	a0 e0       	ldi	r26, 0x00	; 0
   15d30:	ed b7       	in	r30, 0x3d	; 61
   15d32:	fe b7       	in	r31, 0x3e	; 62
   15d34:	81 83       	std	Z+1, r24	; 0x01
   15d36:	92 83       	std	Z+2, r25	; 0x02
   15d38:	a3 83       	std	Z+3, r26	; 0x03
   15d3a:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   15d3e:	8e 81       	ldd	r24, Y+6	; 0x06
   15d40:	9f 81       	ldd	r25, Y+7	; 0x07
   15d42:	88 27       	eor	r24, r24
   15d44:	90 7d       	andi	r25, 0xD0	; 208
   15d46:	1b c0       	rjmp	.+54     	; 0x15d7e <SS80_Report+0x92>
   15d48:	25 ff       	sbrs	r18, 5
   15d4a:	12 c0       	rjmp	.+36     	; 0x15d70 <SS80_Report+0x84>
   15d4c:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   15d50:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   15d54:	82 81       	ldd	r24, Z+2	; 0x02
   15d56:	90 e0       	ldi	r25, 0x00	; 0
   15d58:	ed b7       	in	r30, 0x3d	; 61
   15d5a:	fe b7       	in	r31, 0x3e	; 62
   15d5c:	95 83       	std	Z+5, r25	; 0x05
   15d5e:	84 83       	std	Z+4, r24	; 0x04
   15d60:	82 eb       	ldi	r24, 0xB2	; 178
   15d62:	91 e2       	ldi	r25, 0x21	; 33
   15d64:	a0 e0       	ldi	r26, 0x00	; 0
   15d66:	81 83       	std	Z+1, r24	; 0x01
   15d68:	92 83       	std	Z+2, r25	; 0x02
   15d6a:	a3 83       	std	Z+3, r26	; 0x03
   15d6c:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   15d70:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   15d74:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   15d78:	12 82       	std	Z+2, r1	; 0x02
   15d7a:	80 e0       	ldi	r24, 0x00	; 0
   15d7c:	90 e0       	ldi	r25, 0x00	; 0
   15d7e:	28 96       	adiw	r28, 0x08	; 8
   15d80:	e2 e0       	ldi	r30, 0x02	; 2
   15d82:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__epilogue_restores__+0x20>

00015d86 <Clear_Common>:
   15d86:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   15d8a:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   15d8e:	25 81       	ldd	r18, Z+5	; 0x05
   15d90:	30 e0       	ldi	r19, 0x00	; 0
   15d92:	28 17       	cp	r18, r24
   15d94:	39 07       	cpc	r19, r25
   15d96:	19 f0       	breq	.+6      	; 0x15d9e <Clear_Common+0x18>
   15d98:	0f 97       	sbiw	r24, 0x0f	; 15
   15d9a:	99 f4       	brne	.+38     	; 0x15dc2 <Clear_Common+0x3c>
   15d9c:	03 c0       	rjmp	.+6      	; 0x15da4 <Clear_Common+0x1e>
   15d9e:	2f 30       	cpi	r18, 0x0F	; 15
   15da0:	31 05       	cpc	r19, r1
   15da2:	09 f4       	brne	.+2      	; 0x15da6 <Clear_Common+0x20>
   15da4:	15 82       	std	Z+5, r1	; 0x05
   15da6:	16 82       	std	Z+6, r1	; 0x06
   15da8:	17 82       	std	Z+7, r1	; 0x07
   15daa:	10 86       	std	Z+8, r1	; 0x08
   15dac:	11 86       	std	Z+9, r1	; 0x09
   15dae:	12 86       	std	Z+10, r1	; 0x0a
   15db0:	13 86       	std	Z+11, r1	; 0x0b
   15db2:	14 86       	std	Z+12, r1	; 0x0c
   15db4:	15 86       	std	Z+13, r1	; 0x0d
   15db6:	16 86       	std	Z+14, r1	; 0x0e
   15db8:	11 82       	std	Z+1, r1	; 0x01
   15dba:	10 82       	st	Z, r1
   15dbc:	14 82       	std	Z+4, r1	; 0x04
   15dbe:	13 82       	std	Z+3, r1	; 0x03
   15dc0:	12 82       	std	Z+2, r1	; 0x02
   15dc2:	08 95       	ret

00015dc4 <SS80_init>:
   15dc4:	a5 e0       	ldi	r26, 0x05	; 5
   15dc6:	b0 e0       	ldi	r27, 0x00	; 0
   15dc8:	e8 ee       	ldi	r30, 0xE8	; 232
   15dca:	fe ea       	ldi	r31, 0xAE	; 174
   15dcc:	0c 94 23 e5 	jmp	0x1ca46	; 0x1ca46 <__prologue_saves__+0x14>
   15dd0:	05 e6       	ldi	r16, 0x65	; 101
   15dd2:	10 e2       	ldi	r17, 0x20	; 32
   15dd4:	cb e0       	ldi	r28, 0x0B	; 11
   15dd6:	d0 e0       	ldi	r29, 0x00	; 0
   15dd8:	82 e0       	ldi	r24, 0x02	; 2
   15dda:	f8 2e       	mov	r15, r24
   15ddc:	8d e7       	ldi	r24, 0x7D	; 125
   15dde:	98 e2       	ldi	r25, 0x28	; 40
   15de0:	6c 01       	movw	r12, r24
   15de2:	e1 2c       	mov	r14, r1
   15de4:	f8 01       	movw	r30, r16
   15de6:	80 81       	ld	r24, Z
   15de8:	83 30       	cpi	r24, 0x03	; 3
   15dea:	29 f5       	brne	.+74     	; 0x15e36 <SS80_init+0x72>
   15dec:	ce 01       	movw	r24, r28
   15dee:	0e 94 64 94 	call	0x128c8	; 0x128c8 <set_active_device>
   15df2:	89 2b       	or	r24, r25
   15df4:	01 f1       	breq	.+64     	; 0x15e36 <SS80_init+0x72>
   15df6:	8f e0       	ldi	r24, 0x0F	; 15
   15df8:	90 e0       	ldi	r25, 0x00	; 0
   15dfa:	c5 df       	rcall	.-118    	; 0x15d86 <Clear_Common>
   15dfc:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   15e00:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   15e04:	f2 82       	std	Z+2, r15	; 0x02
   15e06:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15e0a:	85 ff       	sbrs	r24, 5
   15e0c:	0c c0       	rjmp	.+24     	; 0x15e26 <SS80_init+0x62>
   15e0e:	f8 01       	movw	r30, r16
   15e10:	81 81       	ldd	r24, Z+1	; 0x01
   15e12:	90 e0       	ldi	r25, 0x00	; 0
   15e14:	ed b7       	in	r30, 0x3d	; 61
   15e16:	fe b7       	in	r31, 0x3e	; 62
   15e18:	95 83       	std	Z+5, r25	; 0x05
   15e1a:	84 83       	std	Z+4, r24	; 0x04
   15e1c:	c1 82       	std	Z+1, r12	; 0x01
   15e1e:	d2 82       	std	Z+2, r13	; 0x02
   15e20:	e3 82       	std	Z+3, r14	; 0x03
   15e22:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   15e26:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   15e2a:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   15e2e:	81 81       	ldd	r24, Z+1	; 0x01
   15e30:	90 e0       	ldi	r25, 0x00	; 0
   15e32:	0e 94 d6 87 	call	0x10fac	; 0x10fac <gpib_disable_PPR>
   15e36:	21 97       	sbiw	r28, 0x01	; 1
   15e38:	0b 52       	subi	r16, 0x2B	; 43
   15e3a:	11 09       	sbc	r17, r1
   15e3c:	cf 3f       	cpi	r28, 0xFF	; 255
   15e3e:	ff ef       	ldi	r31, 0xFF	; 255
   15e40:	df 07       	cpc	r29, r31
   15e42:	81 f6       	brne	.-96     	; 0x15de4 <SS80_init+0x20>
   15e44:	cd b7       	in	r28, 0x3d	; 61
   15e46:	de b7       	in	r29, 0x3e	; 62
   15e48:	25 96       	adiw	r28, 0x05	; 5
   15e4a:	e8 e0       	ldi	r30, 0x08	; 8
   15e4c:	0c 94 3f e5 	jmp	0x1ca7e	; 0x1ca7e <__epilogue_restores__+0x14>

00015e50 <SS80_Channel_Independent_Clear>:
   15e50:	9a df       	rcall	.-204    	; 0x15d86 <Clear_Common>
   15e52:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   15e56:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   15e5a:	81 81       	ldd	r24, Z+1	; 0x01
   15e5c:	90 e0       	ldi	r25, 0x00	; 0
   15e5e:	0e 94 a0 87 	call	0x10f40	; 0x10f40 <gpib_enable_PPR>
   15e62:	80 e0       	ldi	r24, 0x00	; 0
   15e64:	90 e0       	ldi	r25, 0x00	; 0
   15e66:	08 95       	ret

00015e68 <SS80_Universal_Device_Clear>:
   15e68:	8f e0       	ldi	r24, 0x0F	; 15
   15e6a:	90 e0       	ldi	r25, 0x00	; 0
   15e6c:	8c df       	rcall	.-232    	; 0x15d86 <Clear_Common>
   15e6e:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   15e72:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   15e76:	81 81       	ldd	r24, Z+1	; 0x01
   15e78:	90 e0       	ldi	r25, 0x00	; 0
   15e7a:	0e 94 a0 87 	call	0x10f40	; 0x10f40 <gpib_enable_PPR>
   15e7e:	80 e0       	ldi	r24, 0x00	; 0
   15e80:	90 e0       	ldi	r25, 0x00	; 0
   15e82:	08 95       	ret

00015e84 <SS80_Selected_Device_Clear>:
   15e84:	cf 93       	push	r28
   15e86:	df 93       	push	r29
   15e88:	00 d0       	rcall	.+0      	; 0x15e8a <SS80_Selected_Device_Clear+0x6>
   15e8a:	1f 92       	push	r1
   15e8c:	ec 01       	movw	r28, r24
   15e8e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15e92:	85 ff       	sbrs	r24, 5
   15e94:	0a c0       	rjmp	.+20     	; 0x15eaa <SS80_Selected_Device_Clear+0x26>
   15e96:	86 ea       	ldi	r24, 0xA6	; 166
   15e98:	91 e2       	ldi	r25, 0x21	; 33
   15e9a:	a0 e0       	ldi	r26, 0x00	; 0
   15e9c:	ed b7       	in	r30, 0x3d	; 61
   15e9e:	fe b7       	in	r31, 0x3e	; 62
   15ea0:	81 83       	std	Z+1, r24	; 0x01
   15ea2:	92 83       	std	Z+2, r25	; 0x02
   15ea4:	a3 83       	std	Z+3, r26	; 0x03
   15ea6:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   15eaa:	ce 01       	movw	r24, r28
   15eac:	6c df       	rcall	.-296    	; 0x15d86 <Clear_Common>
   15eae:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   15eb2:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   15eb6:	81 81       	ldd	r24, Z+1	; 0x01
   15eb8:	90 e0       	ldi	r25, 0x00	; 0
   15eba:	0e 94 a0 87 	call	0x10f40	; 0x10f40 <gpib_enable_PPR>
   15ebe:	80 e0       	ldi	r24, 0x00	; 0
   15ec0:	90 e0       	ldi	r25, 0x00	; 0
   15ec2:	cd b7       	in	r28, 0x3d	; 61
   15ec4:	de b7       	in	r29, 0x3e	; 62
   15ec6:	23 96       	adiw	r28, 0x03	; 3
   15ec8:	e2 e0       	ldi	r30, 0x02	; 2
   15eca:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__epilogue_restores__+0x20>

00015ece <SS80_Amigo_Clear>:
   15ece:	a6 e0       	ldi	r26, 0x06	; 6
   15ed0:	b0 e0       	ldi	r27, 0x00	; 0
   15ed2:	ed e6       	ldi	r30, 0x6D	; 109
   15ed4:	ff ea       	ldi	r31, 0xAF	; 175
   15ed6:	0c 94 29 e5 	jmp	0x1ca52	; 0x1ca52 <__prologue_saves__+0x20>
   15eda:	1d 82       	std	Y+5, r1	; 0x05
   15edc:	1c 82       	std	Y+4, r1	; 0x04
   15ede:	ae 01       	movw	r20, r28
   15ee0:	4c 5f       	subi	r20, 0xFC	; 252
   15ee2:	5f 4f       	sbci	r21, 0xFF	; 255
   15ee4:	61 e0       	ldi	r22, 0x01	; 1
   15ee6:	70 e0       	ldi	r23, 0x00	; 0
   15ee8:	ce 01       	movw	r24, r28
   15eea:	06 96       	adiw	r24, 0x06	; 6
   15eec:	0e 94 58 8c 	call	0x118b0	; 0x118b0 <gpib_read_str>
   15ef0:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   15ef4:	01 97       	sbiw	r24, 0x01	; 1
   15ef6:	89 f0       	breq	.+34     	; 0x15f1a <SS80_Amigo_Clear+0x4c>
   15ef8:	20 ff       	sbrs	r18, 0
   15efa:	0a c0       	rjmp	.+20     	; 0x15f10 <SS80_Amigo_Clear+0x42>
   15efc:	83 e9       	ldi	r24, 0x93	; 147
   15efe:	91 e2       	ldi	r25, 0x21	; 33
   15f00:	a0 e0       	ldi	r26, 0x00	; 0
   15f02:	ed b7       	in	r30, 0x3d	; 61
   15f04:	fe b7       	in	r31, 0x3e	; 62
   15f06:	81 83       	std	Z+1, r24	; 0x01
   15f08:	92 83       	std	Z+2, r25	; 0x02
   15f0a:	a3 83       	std	Z+3, r26	; 0x03
   15f0c:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   15f10:	8c 81       	ldd	r24, Y+4	; 0x04
   15f12:	9d 81       	ldd	r25, Y+5	; 0x05
   15f14:	88 27       	eor	r24, r24
   15f16:	90 7d       	andi	r25, 0xD0	; 208
   15f18:	19 c0       	rjmp	.+50     	; 0x15f4c <SS80_Amigo_Clear+0x7e>
   15f1a:	25 ff       	sbrs	r18, 5
   15f1c:	0a c0       	rjmp	.+20     	; 0x15f32 <SS80_Amigo_Clear+0x64>
   15f1e:	84 e8       	ldi	r24, 0x84	; 132
   15f20:	91 e2       	ldi	r25, 0x21	; 33
   15f22:	a0 e0       	ldi	r26, 0x00	; 0
   15f24:	ed b7       	in	r30, 0x3d	; 61
   15f26:	fe b7       	in	r31, 0x3e	; 62
   15f28:	81 83       	std	Z+1, r24	; 0x01
   15f2a:	92 83       	std	Z+2, r25	; 0x02
   15f2c:	a3 83       	std	Z+3, r26	; 0x03
   15f2e:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   15f32:	8f e0       	ldi	r24, 0x0F	; 15
   15f34:	90 e0       	ldi	r25, 0x00	; 0
   15f36:	27 df       	rcall	.-434    	; 0x15d86 <Clear_Common>
   15f38:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   15f3c:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   15f40:	81 81       	ldd	r24, Z+1	; 0x01
   15f42:	90 e0       	ldi	r25, 0x00	; 0
   15f44:	0e 94 a0 87 	call	0x10f40	; 0x10f40 <gpib_enable_PPR>
   15f48:	80 e0       	ldi	r24, 0x00	; 0
   15f4a:	90 e0       	ldi	r25, 0x00	; 0
   15f4c:	26 96       	adiw	r28, 0x06	; 6
   15f4e:	e2 e0       	ldi	r30, 0x02	; 2
   15f50:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__epilogue_restores__+0x20>

00015f54 <SS80_Cancel>:
   15f54:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   15f58:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   15f5c:	11 82       	std	Z+1, r1	; 0x01
   15f5e:	10 82       	st	Z, r1
   15f60:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   15f64:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   15f68:	81 81       	ldd	r24, Z+1	; 0x01
   15f6a:	90 e0       	ldi	r25, 0x00	; 0
   15f6c:	0e 94 a0 87 	call	0x10f40	; 0x10f40 <gpib_enable_PPR>
   15f70:	80 e0       	ldi	r24, 0x00	; 0
   15f72:	90 e0       	ldi	r25, 0x00	; 0
   15f74:	08 95       	ret

00015f76 <SS80_Transparent_State>:
   15f76:	a9 e0       	ldi	r26, 0x09	; 9
   15f78:	b0 e0       	ldi	r27, 0x00	; 0
   15f7a:	e1 ec       	ldi	r30, 0xC1	; 193
   15f7c:	ff ea       	ldi	r31, 0xAF	; 175
   15f7e:	0c 94 21 e5 	jmp	0x1ca42	; 0x1ca42 <__prologue_saves__+0x10>
   15f82:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   15f86:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   15f8a:	81 81       	ldd	r24, Z+1	; 0x01
   15f8c:	90 e0       	ldi	r25, 0x00	; 0
   15f8e:	0e 94 d6 87 	call	0x10fac	; 0x10fac <gpib_disable_PPR>
   15f92:	80 e0       	ldi	r24, 0x00	; 0
   15f94:	91 e0       	ldi	r25, 0x01	; 1
   15f96:	99 87       	std	Y+9, r25	; 0x09
   15f98:	88 87       	std	Y+8, r24	; 0x08
   15f9a:	ae 01       	movw	r20, r28
   15f9c:	48 5f       	subi	r20, 0xF8	; 248
   15f9e:	5f 4f       	sbci	r21, 0xFF	; 255
   15fa0:	60 e0       	ldi	r22, 0x00	; 0
   15fa2:	72 e0       	ldi	r23, 0x02	; 2
   15fa4:	82 e8       	ldi	r24, 0x82	; 130
   15fa6:	9c e1       	ldi	r25, 0x1C	; 28
   15fa8:	0e 94 58 8c 	call	0x118b0	; 0x118b0 <gpib_read_str>
   15fac:	7c 01       	movw	r14, r24
   15fae:	88 85       	ldd	r24, Y+8	; 0x08
   15fb0:	99 85       	ldd	r25, Y+9	; 0x09
   15fb2:	9c 01       	movw	r18, r24
   15fb4:	22 27       	eor	r18, r18
   15fb6:	30 7d       	andi	r19, 0xD0	; 208
   15fb8:	23 2b       	or	r18, r19
   15fba:	79 f0       	breq	.+30     	; 0x15fda <SS80_Transparent_State+0x64>
   15fbc:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15fc0:	80 ff       	sbrs	r24, 0
   15fc2:	da c0       	rjmp	.+436    	; 0x16178 <SS80_Transparent_State+0x202>
   15fc4:	83 e2       	ldi	r24, 0x23	; 35
   15fc6:	93 e2       	ldi	r25, 0x23	; 35
   15fc8:	a0 e0       	ldi	r26, 0x00	; 0
   15fca:	ed b7       	in	r30, 0x3d	; 61
   15fcc:	fe b7       	in	r31, 0x3e	; 62
   15fce:	81 83       	std	Z+1, r24	; 0x01
   15fd0:	92 83       	std	Z+2, r25	; 0x02
   15fd2:	a3 83       	std	Z+3, r26	; 0x03
   15fd4:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   15fd8:	cf c0       	rjmp	.+414    	; 0x16178 <SS80_Transparent_State+0x202>
   15fda:	e1 14       	cp	r14, r1
   15fdc:	f1 04       	cpc	r15, r1
   15fde:	09 f4       	brne	.+2      	; 0x15fe2 <SS80_Transparent_State+0x6c>
   15fe0:	d0 c0       	rjmp	.+416    	; 0x16182 <SS80_Transparent_State+0x20c>
   15fe2:	90 fd       	sbrc	r25, 0
   15fe4:	0e c0       	rjmp	.+28     	; 0x16002 <SS80_Transparent_State+0x8c>
   15fe6:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15fea:	80 ff       	sbrs	r24, 0
   15fec:	0a c0       	rjmp	.+20     	; 0x16002 <SS80_Transparent_State+0x8c>
   15fee:	8a e0       	ldi	r24, 0x0A	; 10
   15ff0:	93 e2       	ldi	r25, 0x23	; 35
   15ff2:	a0 e0       	ldi	r26, 0x00	; 0
   15ff4:	ed b7       	in	r30, 0x3d	; 61
   15ff6:	fe b7       	in	r31, 0x3e	; 62
   15ff8:	81 83       	std	Z+1, r24	; 0x01
   15ffa:	92 83       	std	Z+2, r25	; 0x02
   15ffc:	a3 83       	std	Z+3, r26	; 0x03
   15ffe:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   16002:	82 e8       	ldi	r24, 0x82	; 130
   16004:	a8 2e       	mov	r10, r24
   16006:	8c e1       	ldi	r24, 0x1C	; 28
   16008:	b8 2e       	mov	r11, r24
   1600a:	00 e0       	ldi	r16, 0x00	; 0
   1600c:	10 e0       	ldi	r17, 0x00	; 0
   1600e:	0e 15       	cp	r16, r14
   16010:	1f 05       	cpc	r17, r15
   16012:	0c f0       	brlt	.+2      	; 0x16016 <SS80_Transparent_State+0xa0>
   16014:	9c c0       	rjmp	.+312    	; 0x1614e <SS80_Transparent_State+0x1d8>
   16016:	68 01       	movw	r12, r16
   16018:	ff ef       	ldi	r31, 0xFF	; 255
   1601a:	cf 1a       	sub	r12, r31
   1601c:	df 0a       	sbc	r13, r31
   1601e:	f5 01       	movw	r30, r10
   16020:	81 91       	ld	r24, Z+
   16022:	5f 01       	movw	r10, r30
   16024:	28 2f       	mov	r18, r24
   16026:	30 e0       	ldi	r19, 0x00	; 0
   16028:	a9 01       	movw	r20, r18
   1602a:	40 52       	subi	r20, 0x20	; 32
   1602c:	51 09       	sbc	r21, r1
   1602e:	40 31       	cpi	r20, 0x10	; 16
   16030:	51 05       	cpc	r21, r1
   16032:	20 f4       	brcc	.+8      	; 0x1603c <SS80_Transparent_State+0xc6>
   16034:	80 52       	subi	r24, 0x20	; 32
   16036:	8f d9       	rcall	.-3298   	; 0x15356 <SS80_Check_Unit>
   16038:	86 01       	movw	r16, r12
   1603a:	e9 cf       	rjmp	.-46     	; 0x1600e <SS80_Transparent_State+0x98>
   1603c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16040:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   16044:	21 30       	cpi	r18, 0x01	; 1
   16046:	31 05       	cpc	r19, r1
   16048:	c9 f4       	brne	.+50     	; 0x1607c <SS80_Transparent_State+0x106>
   1604a:	0e 5f       	subi	r16, 0xFE	; 254
   1604c:	1f 4f       	sbci	r17, 0xFF	; 255
   1604e:	80 73       	andi	r24, 0x30	; 48
   16050:	99 27       	eor	r25, r25
   16052:	89 2b       	or	r24, r25
   16054:	51 f0       	breq	.+20     	; 0x1606a <SS80_Transparent_State+0xf4>
   16056:	85 ee       	ldi	r24, 0xE5	; 229
   16058:	92 e2       	ldi	r25, 0x22	; 34
   1605a:	a0 e0       	ldi	r26, 0x00	; 0
   1605c:	ed b7       	in	r30, 0x3d	; 61
   1605e:	fe b7       	in	r31, 0x3e	; 62
   16060:	81 83       	std	Z+1, r24	; 0x01
   16062:	92 83       	std	Z+2, r25	; 0x02
   16064:	a3 83       	std	Z+3, r26	; 0x03
   16066:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   1606a:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   1606e:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   16072:	81 81       	ldd	r24, Z+1	; 0x01
   16074:	90 e0       	ldi	r25, 0x00	; 0
   16076:	0e 94 a0 87 	call	0x10f40	; 0x10f40 <gpib_enable_PPR>
   1607a:	69 c0       	rjmp	.+210    	; 0x1614e <SS80_Transparent_State+0x1d8>
   1607c:	22 30       	cpi	r18, 0x02	; 2
   1607e:	31 05       	cpc	r19, r1
   16080:	51 f4       	brne	.+20     	; 0x16096 <SS80_Transparent_State+0x120>
   16082:	0b 5f       	subi	r16, 0xFB	; 251
   16084:	1f 4f       	sbci	r17, 0xFF	; 255
   16086:	80 73       	andi	r24, 0x30	; 48
   16088:	99 27       	eor	r25, r25
   1608a:	89 2b       	or	r24, r25
   1608c:	09 f4       	brne	.+2      	; 0x16090 <SS80_Transparent_State+0x11a>
   1608e:	5f c0       	rjmp	.+190    	; 0x1614e <SS80_Transparent_State+0x1d8>
   16090:	88 ec       	ldi	r24, 0xC8	; 200
   16092:	92 e2       	ldi	r25, 0x22	; 34
   16094:	0c c0       	rjmp	.+24     	; 0x160ae <SS80_Transparent_State+0x138>
   16096:	23 30       	cpi	r18, 0x03	; 3
   16098:	31 05       	cpc	r19, r1
   1609a:	91 f4       	brne	.+36     	; 0x160c0 <SS80_Transparent_State+0x14a>
   1609c:	0b 5f       	subi	r16, 0xFB	; 251
   1609e:	1f 4f       	sbci	r17, 0xFF	; 255
   160a0:	80 73       	andi	r24, 0x30	; 48
   160a2:	99 27       	eor	r25, r25
   160a4:	89 2b       	or	r24, r25
   160a6:	09 f4       	brne	.+2      	; 0x160aa <SS80_Transparent_State+0x134>
   160a8:	52 c0       	rjmp	.+164    	; 0x1614e <SS80_Transparent_State+0x1d8>
   160aa:	8a ea       	ldi	r24, 0xAA	; 170
   160ac:	92 e2       	ldi	r25, 0x22	; 34
   160ae:	a0 e0       	ldi	r26, 0x00	; 0
   160b0:	ed b7       	in	r30, 0x3d	; 61
   160b2:	fe b7       	in	r31, 0x3e	; 62
   160b4:	81 83       	std	Z+1, r24	; 0x01
   160b6:	92 83       	std	Z+2, r25	; 0x02
   160b8:	a3 83       	std	Z+3, r26	; 0x03
   160ba:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   160be:	47 c0       	rjmp	.+142    	; 0x1614e <SS80_Transparent_State+0x1d8>
   160c0:	28 30       	cpi	r18, 0x08	; 8
   160c2:	31 05       	cpc	r19, r1
   160c4:	e1 f4       	brne	.+56     	; 0x160fe <SS80_Transparent_State+0x188>
   160c6:	85 ff       	sbrs	r24, 5
   160c8:	12 c0       	rjmp	.+36     	; 0x160ee <SS80_Transparent_State+0x178>
   160ca:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   160ce:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   160d2:	85 81       	ldd	r24, Z+5	; 0x05
   160d4:	90 e0       	ldi	r25, 0x00	; 0
   160d6:	ed b7       	in	r30, 0x3d	; 61
   160d8:	fe b7       	in	r31, 0x3e	; 62
   160da:	95 83       	std	Z+5, r25	; 0x05
   160dc:	84 83       	std	Z+4, r24	; 0x04
   160de:	83 e8       	ldi	r24, 0x83	; 131
   160e0:	92 e2       	ldi	r25, 0x22	; 34
   160e2:	a0 e0       	ldi	r26, 0x00	; 0
   160e4:	81 83       	std	Z+1, r24	; 0x01
   160e6:	92 83       	std	Z+2, r25	; 0x02
   160e8:	a3 83       	std	Z+3, r26	; 0x03
   160ea:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   160ee:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   160f2:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   160f6:	85 81       	ldd	r24, Z+5	; 0x05
   160f8:	90 e0       	ldi	r25, 0x00	; 0
   160fa:	aa de       	rcall	.-684    	; 0x15e50 <SS80_Channel_Independent_Clear>
   160fc:	44 c0       	rjmp	.+136    	; 0x16186 <SS80_Transparent_State+0x210>
   160fe:	29 30       	cpi	r18, 0x09	; 9
   16100:	31 05       	cpc	r19, r1
   16102:	b1 f4       	brne	.+44     	; 0x16130 <SS80_Transparent_State+0x1ba>
   16104:	85 ff       	sbrs	r24, 5
   16106:	12 c0       	rjmp	.+36     	; 0x1612c <SS80_Transparent_State+0x1b6>
   16108:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   1610c:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   16110:	85 81       	ldd	r24, Z+5	; 0x05
   16112:	90 e0       	ldi	r25, 0x00	; 0
   16114:	ed b7       	in	r30, 0x3d	; 61
   16116:	fe b7       	in	r31, 0x3e	; 62
   16118:	95 83       	std	Z+5, r25	; 0x05
   1611a:	84 83       	std	Z+4, r24	; 0x04
   1611c:	8f e6       	ldi	r24, 0x6F	; 111
   1611e:	92 e2       	ldi	r25, 0x22	; 34
   16120:	a0 e0       	ldi	r26, 0x00	; 0
   16122:	81 83       	std	Z+1, r24	; 0x01
   16124:	92 83       	std	Z+2, r25	; 0x02
   16126:	a3 83       	std	Z+3, r26	; 0x03
   16128:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   1612c:	13 df       	rcall	.-474    	; 0x15f54 <SS80_Cancel>
   1612e:	2b c0       	rjmp	.+86     	; 0x16186 <SS80_Transparent_State+0x210>
   16130:	80 ff       	sbrs	r24, 0
   16132:	22 c0       	rjmp	.+68     	; 0x16178 <SS80_Transparent_State+0x202>
   16134:	ed b7       	in	r30, 0x3d	; 61
   16136:	fe b7       	in	r31, 0x3e	; 62
   16138:	35 83       	std	Z+5, r19	; 0x05
   1613a:	24 83       	std	Z+4, r18	; 0x04
   1613c:	8f e4       	ldi	r24, 0x4F	; 79
   1613e:	92 e2       	ldi	r25, 0x22	; 34
   16140:	a0 e0       	ldi	r26, 0x00	; 0
   16142:	81 83       	std	Z+1, r24	; 0x01
   16144:	92 83       	std	Z+2, r25	; 0x02
   16146:	a3 83       	std	Z+3, r26	; 0x03
   16148:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   1614c:	86 01       	movw	r16, r12
   1614e:	0e 15       	cp	r16, r14
   16150:	1f 05       	cpc	r17, r15
   16152:	91 f0       	breq	.+36     	; 0x16178 <SS80_Transparent_State+0x202>
   16154:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16158:	80 ff       	sbrs	r24, 0
   1615a:	0e c0       	rjmp	.+28     	; 0x16178 <SS80_Transparent_State+0x202>
   1615c:	ed b7       	in	r30, 0x3d	; 61
   1615e:	fe b7       	in	r31, 0x3e	; 62
   16160:	f7 82       	std	Z+7, r15	; 0x07
   16162:	e6 82       	std	Z+6, r14	; 0x06
   16164:	15 83       	std	Z+5, r17	; 0x05
   16166:	04 83       	std	Z+4, r16	; 0x04
   16168:	83 e1       	ldi	r24, 0x13	; 19
   1616a:	92 e2       	ldi	r25, 0x22	; 34
   1616c:	a0 e0       	ldi	r26, 0x00	; 0
   1616e:	81 83       	std	Z+1, r24	; 0x01
   16170:	92 83       	std	Z+2, r25	; 0x02
   16172:	a3 83       	std	Z+3, r26	; 0x03
   16174:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   16178:	88 85       	ldd	r24, Y+8	; 0x08
   1617a:	99 85       	ldd	r25, Y+9	; 0x09
   1617c:	88 27       	eor	r24, r24
   1617e:	90 7d       	andi	r25, 0xD0	; 208
   16180:	02 c0       	rjmp	.+4      	; 0x16186 <SS80_Transparent_State+0x210>
   16182:	80 e0       	ldi	r24, 0x00	; 0
   16184:	90 e0       	ldi	r25, 0x00	; 0
   16186:	29 96       	adiw	r28, 0x09	; 9
   16188:	ea e0       	ldi	r30, 0x0A	; 10
   1618a:	0c 94 3d e5 	jmp	0x1ca7a	; 0x1ca7a <__epilogue_restores__+0x10>

0001618e <SS80_error_return>:
   1618e:	a6 e0       	ldi	r26, 0x06	; 6
   16190:	b0 e0       	ldi	r27, 0x00	; 0
   16192:	ed ec       	ldi	r30, 0xCD	; 205
   16194:	f0 eb       	ldi	r31, 0xB0	; 176
   16196:	0c 94 29 e5 	jmp	0x1ca52	; 0x1ca52 <__prologue_saves__+0x20>
   1619a:	80 e0       	ldi	r24, 0x00	; 0
   1619c:	91 e0       	ldi	r25, 0x01	; 1
   1619e:	9d 83       	std	Y+5, r25	; 0x05
   161a0:	8c 83       	std	Y+4, r24	; 0x04
   161a2:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   161a6:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   161aa:	81 e0       	ldi	r24, 0x01	; 1
   161ac:	82 83       	std	Z+2, r24	; 0x02
   161ae:	8e 83       	std	Y+6, r24	; 0x06
   161b0:	ae 01       	movw	r20, r28
   161b2:	4c 5f       	subi	r20, 0xFC	; 252
   161b4:	5f 4f       	sbci	r21, 0xFF	; 255
   161b6:	61 e0       	ldi	r22, 0x01	; 1
   161b8:	70 e0       	ldi	r23, 0x00	; 0
   161ba:	ce 01       	movw	r24, r28
   161bc:	06 96       	adiw	r24, 0x06	; 6
   161be:	0e 94 fa 8c 	call	0x119f4	; 0x119f4 <gpib_write_str>
   161c2:	01 97       	sbiw	r24, 0x01	; 1
   161c4:	99 f0       	breq	.+38     	; 0x161ec <SS80_error_return+0x5e>
   161c6:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   161ca:	80 ff       	sbrs	r24, 0
   161cc:	0a c0       	rjmp	.+20     	; 0x161e2 <SS80_error_return+0x54>
   161ce:	81 e6       	ldi	r24, 0x61	; 97
   161d0:	91 e2       	ldi	r25, 0x21	; 33
   161d2:	a0 e0       	ldi	r26, 0x00	; 0
   161d4:	ed b7       	in	r30, 0x3d	; 61
   161d6:	fe b7       	in	r31, 0x3e	; 62
   161d8:	81 83       	std	Z+1, r24	; 0x01
   161da:	92 83       	std	Z+2, r25	; 0x02
   161dc:	a3 83       	std	Z+3, r26	; 0x03
   161de:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   161e2:	8c 81       	ldd	r24, Y+4	; 0x04
   161e4:	9d 81       	ldd	r25, Y+5	; 0x05
   161e6:	88 27       	eor	r24, r24
   161e8:	90 7d       	andi	r25, 0xD0	; 208
   161ea:	07 c0       	rjmp	.+14     	; 0x161fa <SS80_error_return+0x6c>
   161ec:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   161f0:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   161f4:	12 82       	std	Z+2, r1	; 0x02
   161f6:	80 e0       	ldi	r24, 0x00	; 0
   161f8:	90 e0       	ldi	r25, 0x00	; 0
   161fa:	26 96       	adiw	r28, 0x06	; 6
   161fc:	e2 e0       	ldi	r30, 0x02	; 2
   161fe:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__epilogue_restores__+0x20>

00016202 <SS80_locate_and_read>:
/// - Phases: Command, Report
/// @param[in] u: Unit
/// @return  0

int SS80_Channel_Independent_Clear( int u )
{
   16202:	a7 e1       	ldi	r26, 0x17	; 23
   16204:	b0 e0       	ldi	r27, 0x00	; 0
   16206:	e7 e0       	ldi	r30, 0x07	; 7
   16208:	f1 eb       	ldi	r31, 0xB1	; 177
   1620a:	0c 94 1a e5 	jmp	0x1ca34	; 0x1ca34 <__prologue_saves__+0x2>
   1620e:	60 91 05 19 	lds	r22, 0x1905	; 0x801905 <SS80s>
   16212:	70 91 06 19 	lds	r23, 0x1906	; 0x801906 <SS80s+0x1>
   16216:	fb 01       	movw	r30, r22
   16218:	27 81       	ldd	r18, Z+7	; 0x07
   1621a:	30 85       	ldd	r19, Z+8	; 0x08
   1621c:	41 85       	ldd	r20, Z+9	; 0x09
   1621e:	52 85       	ldd	r21, Z+10	; 0x0a
   16220:	80 91 07 19 	lds	r24, 0x1907	; 0x801907 <SS80p>
   16224:	90 91 08 19 	lds	r25, 0x1908	; 0x801908 <SS80p+0x1>
   16228:	fc 01       	movw	r30, r24
   1622a:	a0 89       	ldd	r26, Z+16	; 0x10
   1622c:	b1 89       	ldd	r27, Z+17	; 0x11
   1622e:	fb 01       	movw	r30, r22
   16230:	12 82       	std	Z+2, r1	; 0x02
   16232:	1d 86       	std	Y+13, r1	; 0x0d
   16234:	1c 86       	std	Y+12, r1	; 0x0c
   16236:	54 98       	cbi	0x0a, 4	; 10
   16238:	4c 99       	sbic	0x09, 4	; 9
   1623a:	03 c0       	rjmp	.+6      	; 0x16242 <SS80_locate_and_read+0x40>
   1623c:	80 e0       	ldi	r24, 0x00	; 0
   1623e:	90 e1       	ldi	r25, 0x10	; 16
   16240:	3e c1       	rjmp	.+636    	; 0x164be <SS80_locate_and_read+0x2bc>
   16242:	0e 94 f9 e4 	call	0x1c9f2	; 0x1c9f2 <__muluhisi3>
   16246:	4b 01       	movw	r8, r22
   16248:	5c 01       	movw	r10, r24
   1624a:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1624e:	85 ff       	sbrs	r24, 5
   16250:	1a c0       	rjmp	.+52     	; 0x16286 <SS80_locate_and_read+0x84>
   16252:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   16256:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   1625a:	83 85       	ldd	r24, Z+11	; 0x0b
   1625c:	94 85       	ldd	r25, Z+12	; 0x0c
   1625e:	a5 85       	ldd	r26, Z+13	; 0x0d
   16260:	b6 85       	ldd	r27, Z+14	; 0x0e
   16262:	ed b7       	in	r30, 0x3d	; 61
   16264:	fe b7       	in	r31, 0x3e	; 62
   16266:	80 87       	std	Z+8, r24	; 0x08
   16268:	91 87       	std	Z+9, r25	; 0x09
   1626a:	a2 87       	std	Z+10, r26	; 0x0a
   1626c:	b3 87       	std	Z+11, r27	; 0x0b
   1626e:	84 82       	std	Z+4, r8	; 0x04
   16270:	95 82       	std	Z+5, r9	; 0x05
   16272:	a6 82       	std	Z+6, r10	; 0x06
   16274:	b7 82       	std	Z+7, r11	; 0x07
   16276:	89 e3       	ldi	r24, 0x39	; 57
   16278:	98 e2       	ldi	r25, 0x28	; 40
   1627a:	a0 e0       	ldi	r26, 0x00	; 0
   1627c:	81 83       	std	Z+1, r24	; 0x01
   1627e:	92 83       	std	Z+2, r25	; 0x02
   16280:	a3 83       	std	Z+3, r26	; 0x03
   16282:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   16286:	2b db       	rcall	.-2474   	; 0x158de <SS80_cmd_seek>
   16288:	89 2b       	or	r24, r25
   1628a:	09 f0       	breq	.+2      	; 0x1628e <SS80_locate_and_read+0x8c>
   1628c:	ae c0       	rjmp	.+348    	; 0x163ea <SS80_locate_and_read+0x1e8>
   1628e:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   16292:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   16296:	43 84       	ldd	r4, Z+11	; 0x0b
   16298:	54 84       	ldd	r5, Z+12	; 0x0c
   1629a:	65 84       	ldd	r6, Z+13	; 0x0d
   1629c:	76 84       	ldd	r7, Z+14	; 0x0e
   1629e:	1e 86       	std	Y+14, r1	; 0x0e
   162a0:	1f 86       	std	Y+15, r1	; 0x0f
   162a2:	18 8a       	std	Y+16, r1	; 0x10
   162a4:	19 8a       	std	Y+17, r1	; 0x11
   162a6:	8b e1       	ldi	r24, 0x1B	; 27
   162a8:	98 e2       	ldi	r25, 0x28	; 40
   162aa:	9c 01       	movw	r18, r24
   162ac:	40 e0       	ldi	r20, 0x00	; 0
   162ae:	2a 8b       	std	Y+18, r18	; 0x12
   162b0:	3b 8b       	std	Y+19, r19	; 0x13
   162b2:	4c 8b       	std	Y+20, r20	; 0x14
   162b4:	33 24       	eor	r3, r3
   162b6:	33 94       	inc	r3
   162b8:	8a ee       	ldi	r24, 0xEA	; 234
   162ba:	97 e2       	ldi	r25, 0x27	; 39
   162bc:	9c 01       	movw	r18, r24
   162be:	40 e0       	ldi	r20, 0x00	; 0
   162c0:	2d 8b       	std	Y+21, r18	; 0x15
   162c2:	3e 8b       	std	Y+22, r19	; 0x16
   162c4:	4f 8b       	std	Y+23, r20	; 0x17
   162c6:	34 c0       	rjmp	.+104    	; 0x16330 <SS80_locate_and_read+0x12e>
   162c8:	86 fd       	sbrc	r24, 6
   162ca:	0e 94 de 86 	call	0x10dbc	; 0x10dbc <gpib_timer_elapsed_begin>
   162ce:	ae 01       	movw	r20, r28
   162d0:	44 5f       	subi	r20, 0xF4	; 244
   162d2:	5f 4f       	sbci	r21, 0xFF	; 255
   162d4:	b6 01       	movw	r22, r12
   162d6:	82 e8       	ldi	r24, 0x82	; 130
   162d8:	9c e1       	ldi	r25, 0x1C	; 28
   162da:	0e 94 fa 8c 	call	0x119f4	; 0x119f4 <gpib_write_str>
   162de:	8c 01       	movw	r16, r24
   162e0:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   162e4:	86 ff       	sbrs	r24, 6
   162e6:	04 c0       	rjmp	.+8      	; 0x162f0 <SS80_locate_and_read+0xee>
   162e8:	87 ec       	ldi	r24, 0xC7	; 199
   162ea:	9f e0       	ldi	r25, 0x0F	; 15
   162ec:	0e 94 f0 86 	call	0x10de0	; 0x10de0 <gpib_timer_elapsed_end>
   162f0:	c0 16       	cp	r12, r16
   162f2:	d1 06       	cpc	r13, r17
   162f4:	09 f0       	breq	.+2      	; 0x162f8 <SS80_locate_and_read+0xf6>
   162f6:	82 c0       	rjmp	.+260    	; 0x163fc <SS80_locate_and_read+0x1fa>
   162f8:	0d 2c       	mov	r0, r13
   162fa:	00 0c       	add	r0, r0
   162fc:	ee 08       	sbc	r14, r14
   162fe:	ff 08       	sbc	r15, r15
   16300:	8c 0c       	add	r8, r12
   16302:	9d 1c       	adc	r9, r13
   16304:	ae 1c       	adc	r10, r14
   16306:	bf 1c       	adc	r11, r15
   16308:	01 2e       	mov	r0, r17
   1630a:	00 0c       	add	r0, r0
   1630c:	22 0b       	sbc	r18, r18
   1630e:	33 0b       	sbc	r19, r19
   16310:	8e 85       	ldd	r24, Y+14	; 0x0e
   16312:	9f 85       	ldd	r25, Y+15	; 0x0f
   16314:	a8 89       	ldd	r26, Y+16	; 0x10
   16316:	b9 89       	ldd	r27, Y+17	; 0x11
   16318:	80 0f       	add	r24, r16
   1631a:	91 1f       	adc	r25, r17
   1631c:	a2 1f       	adc	r26, r18
   1631e:	b3 1f       	adc	r27, r19
   16320:	8e 87       	std	Y+14, r24	; 0x0e
   16322:	9f 87       	std	Y+15, r25	; 0x0f
   16324:	a8 8b       	std	Y+16, r26	; 0x10
   16326:	b9 8b       	std	Y+17, r27	; 0x11
   16328:	40 1a       	sub	r4, r16
   1632a:	51 0a       	sbc	r5, r17
   1632c:	62 0a       	sbc	r6, r18
   1632e:	73 0a       	sbc	r7, r19
   16330:	41 14       	cp	r4, r1
   16332:	51 04       	cpc	r5, r1
   16334:	61 04       	cpc	r6, r1
   16336:	71 04       	cpc	r7, r1
   16338:	09 f4       	brne	.+2      	; 0x1633c <SS80_locate_and_read+0x13a>
   1633a:	92 c0       	rjmp	.+292    	; 0x16460 <SS80_locate_and_read+0x25e>
   1633c:	54 98       	cbi	0x0a, 4	; 10
   1633e:	4c 9b       	sbis	0x09, 4	; 9
   16340:	7d cf       	rjmp	.-262    	; 0x1623c <SS80_locate_and_read+0x3a>
   16342:	31 e0       	ldi	r19, 0x01	; 1
   16344:	43 16       	cp	r4, r19
   16346:	53 06       	cpc	r5, r19
   16348:	61 04       	cpc	r6, r1
   1634a:	71 04       	cpc	r7, r1
   1634c:	08 f4       	brcc	.+2      	; 0x16350 <SS80_locate_and_read+0x14e>
   1634e:	4f c0       	rjmp	.+158    	; 0x163ee <SS80_locate_and_read+0x1ec>
   16350:	1d 86       	std	Y+13, r1	; 0x0d
   16352:	1c 86       	std	Y+12, r1	; 0x0c
   16354:	c1 2c       	mov	r12, r1
   16356:	dd 24       	eor	r13, r13
   16358:	d3 94       	inc	r13
   1635a:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1635e:	86 fd       	sbrc	r24, 6
   16360:	0e 94 de 86 	call	0x10dbc	; 0x10dbc <gpib_timer_elapsed_begin>
   16364:	e0 90 05 19 	lds	r14, 0x1905	; 0x801905 <SS80s>
   16368:	f0 90 06 19 	lds	r15, 0x1906	; 0x801906 <SS80s+0x1>
   1636c:	43 e0       	ldi	r20, 0x03	; 3
   1636e:	e4 0e       	add	r14, r20
   16370:	f1 1c       	adc	r15, r1
   16372:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   16376:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   1637a:	86 01       	movw	r16, r12
   1637c:	22 e8       	ldi	r18, 0x82	; 130
   1637e:	3c e1       	ldi	r19, 0x1C	; 28
   16380:	b5 01       	movw	r22, r10
   16382:	a4 01       	movw	r20, r8
   16384:	82 81       	ldd	r24, Z+2	; 0x02
   16386:	93 81       	ldd	r25, Z+3	; 0x03
   16388:	0e 94 30 86 	call	0x10c60	; 0x10c60 <dbf_open_read>
   1638c:	8c 01       	movw	r16, r24
   1638e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16392:	86 ff       	sbrs	r24, 6
   16394:	04 c0       	rjmp	.+8      	; 0x1639e <SS80_locate_and_read+0x19c>
   16396:	8d eb       	ldi	r24, 0xBD	; 189
   16398:	9f e0       	ldi	r25, 0x0F	; 15
   1639a:	0e 94 f0 86 	call	0x10de0	; 0x10de0 <gpib_timer_elapsed_end>
   1639e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   163a2:	85 ff       	sbrs	r24, 5
   163a4:	0c c0       	rjmp	.+24     	; 0x163be <SS80_locate_and_read+0x1bc>
   163a6:	ed b7       	in	r30, 0x3d	; 61
   163a8:	fe b7       	in	r31, 0x3e	; 62
   163aa:	15 83       	std	Z+5, r17	; 0x05
   163ac:	04 83       	std	Z+4, r16	; 0x04
   163ae:	2a 89       	ldd	r18, Y+18	; 0x12
   163b0:	3b 89       	ldd	r19, Y+19	; 0x13
   163b2:	4c 89       	ldd	r20, Y+20	; 0x14
   163b4:	21 83       	std	Z+1, r18	; 0x01
   163b6:	32 83       	std	Z+2, r19	; 0x02
   163b8:	43 83       	std	Z+3, r20	; 0x03
   163ba:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   163be:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   163c2:	17 ff       	sbrs	r17, 7
   163c4:	81 cf       	rjmp	.-254    	; 0x162c8 <SS80_locate_and_read+0xc6>
   163c6:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   163ca:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   163ce:	91 e0       	ldi	r25, 0x01	; 1
   163d0:	92 83       	std	Z+2, r25	; 0x02
   163d2:	80 ff       	sbrs	r24, 0
   163d4:	0a c0       	rjmp	.+20     	; 0x163ea <SS80_locate_and_read+0x1e8>
   163d6:	83 e0       	ldi	r24, 0x03	; 3
   163d8:	98 e2       	ldi	r25, 0x28	; 40
   163da:	a0 e0       	ldi	r26, 0x00	; 0
   163dc:	ed b7       	in	r30, 0x3d	; 61
   163de:	fe b7       	in	r31, 0x3e	; 62
   163e0:	81 83       	std	Z+1, r24	; 0x01
   163e2:	92 83       	std	Z+2, r25	; 0x02
   163e4:	a3 83       	std	Z+3, r26	; 0x03
   163e6:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   163ea:	d1 de       	rcall	.-606    	; 0x1618e <SS80_error_return>
   163ec:	68 c0       	rjmp	.+208    	; 0x164be <SS80_locate_and_read+0x2bc>
   163ee:	62 01       	movw	r12, r4
   163f0:	8c 85       	ldd	r24, Y+12	; 0x0c
   163f2:	9d 85       	ldd	r25, Y+13	; 0x0d
   163f4:	91 60       	ori	r25, 0x01	; 1
   163f6:	9d 87       	std	Y+13, r25	; 0x0d
   163f8:	8c 87       	std	Y+12, r24	; 0x0c
   163fa:	af cf       	rjmp	.-162    	; 0x1635a <SS80_locate_and_read+0x158>
   163fc:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   16400:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   16404:	32 82       	std	Z+2, r3	; 0x02
   16406:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1640a:	80 ff       	sbrs	r24, 0
   1640c:	0a c0       	rjmp	.+20     	; 0x16422 <SS80_locate_and_read+0x220>
   1640e:	2d 89       	ldd	r18, Y+21	; 0x15
   16410:	3e 89       	ldd	r19, Y+22	; 0x16
   16412:	4f 89       	ldd	r20, Y+23	; 0x17
   16414:	ed b7       	in	r30, 0x3d	; 61
   16416:	fe b7       	in	r31, 0x3e	; 62
   16418:	21 83       	std	Z+1, r18	; 0x01
   1641a:	32 83       	std	Z+2, r19	; 0x02
   1641c:	43 83       	std	Z+3, r20	; 0x03
   1641e:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   16422:	8c 85       	ldd	r24, Y+12	; 0x0c
   16424:	9d 85       	ldd	r25, Y+13	; 0x0d
   16426:	88 27       	eor	r24, r24
   16428:	90 7d       	andi	r25, 0xD0	; 208
   1642a:	89 2b       	or	r24, r25
   1642c:	09 f4       	brne	.+2      	; 0x16430 <SS80_locate_and_read+0x22e>
   1642e:	64 cf       	rjmp	.-312    	; 0x162f8 <SS80_locate_and_read+0xf6>
   16430:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   16434:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   16438:	83 81       	ldd	r24, Z+3	; 0x03
   1643a:	94 81       	ldd	r25, Z+4	; 0x04
   1643c:	80 62       	ori	r24, 0x20	; 32
   1643e:	94 83       	std	Z+4, r25	; 0x04
   16440:	83 83       	std	Z+3, r24	; 0x03
   16442:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16446:	80 ff       	sbrs	r24, 0
   16448:	21 c0       	rjmp	.+66     	; 0x1648c <SS80_locate_and_read+0x28a>
   1644a:	85 ec       	ldi	r24, 0xC5	; 197
   1644c:	97 e2       	ldi	r25, 0x27	; 39
   1644e:	a0 e0       	ldi	r26, 0x00	; 0
   16450:	ed b7       	in	r30, 0x3d	; 61
   16452:	fe b7       	in	r31, 0x3e	; 62
   16454:	81 83       	std	Z+1, r24	; 0x01
   16456:	92 83       	std	Z+2, r25	; 0x02
   16458:	a3 83       	std	Z+3, r26	; 0x03
   1645a:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   1645e:	16 c0       	rjmp	.+44     	; 0x1648c <SS80_locate_and_read+0x28a>
   16460:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16464:	85 ff       	sbrs	r24, 5
   16466:	12 c0       	rjmp	.+36     	; 0x1648c <SS80_locate_and_read+0x28a>
   16468:	8e 85       	ldd	r24, Y+14	; 0x0e
   1646a:	9f 85       	ldd	r25, Y+15	; 0x0f
   1646c:	a8 89       	ldd	r26, Y+16	; 0x10
   1646e:	b9 89       	ldd	r27, Y+17	; 0x11
   16470:	ed b7       	in	r30, 0x3d	; 61
   16472:	fe b7       	in	r31, 0x3e	; 62
   16474:	84 83       	std	Z+4, r24	; 0x04
   16476:	95 83       	std	Z+5, r25	; 0x05
   16478:	a6 83       	std	Z+6, r26	; 0x06
   1647a:	b7 83       	std	Z+7, r27	; 0x07
   1647c:	8d e9       	ldi	r24, 0x9D	; 157
   1647e:	97 e2       	ldi	r25, 0x27	; 39
   16480:	a0 e0       	ldi	r26, 0x00	; 0
   16482:	81 83       	std	Z+1, r24	; 0x01
   16484:	92 83       	std	Z+2, r25	; 0x02
   16486:	a3 83       	std	Z+3, r26	; 0x03
   16488:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   1648c:	00 91 05 19 	lds	r16, 0x1905	; 0x801905 <SS80s>
   16490:	10 91 06 19 	lds	r17, 0x1906	; 0x801906 <SS80s+0x1>
   16494:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   16498:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   1649c:	20 89       	ldd	r18, Z+16	; 0x10
   1649e:	31 89       	ldd	r19, Z+17	; 0x11
   164a0:	40 e0       	ldi	r20, 0x00	; 0
   164a2:	50 e0       	ldi	r21, 0x00	; 0
   164a4:	c5 01       	movw	r24, r10
   164a6:	b4 01       	movw	r22, r8
   164a8:	0e 94 97 e4 	call	0x1c92e	; 0x1c92e <__udivmodsi4>
   164ac:	f8 01       	movw	r30, r16
   164ae:	27 83       	std	Z+7, r18	; 0x07
   164b0:	30 87       	std	Z+8, r19	; 0x08
   164b2:	41 87       	std	Z+9, r20	; 0x09
   164b4:	52 87       	std	Z+10, r21	; 0x0a
   164b6:	8c 85       	ldd	r24, Y+12	; 0x0c
   164b8:	9d 85       	ldd	r25, Y+13	; 0x0d
   164ba:	88 27       	eor	r24, r24
   164bc:	90 7d       	andi	r25, 0xD0	; 208
   164be:	67 96       	adiw	r28, 0x17	; 23
   164c0:	e1 e1       	ldi	r30, 0x11	; 17
   164c2:	0c 94 36 e5 	jmp	0x1ca6c	; 0x1ca6c <__epilogue_restores__+0x2>

000164c6 <SS80_Execute_State>:
   164c6:	cf 93       	push	r28
   164c8:	df 93       	push	r29
   164ca:	00 d0       	rcall	.+0      	; 0x164cc <SS80_Execute_State+0x6>
   164cc:	00 d0       	rcall	.+0      	; 0x164ce <SS80_Execute_State+0x8>
   164ce:	1f 92       	push	r1
   164d0:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   164d4:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   164d8:	81 81       	ldd	r24, Z+1	; 0x01
   164da:	90 e0       	ldi	r25, 0x00	; 0
   164dc:	0e 94 d6 87 	call	0x10fac	; 0x10fac <gpib_disable_PPR>
   164e0:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   164e4:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   164e8:	80 81       	ld	r24, Z
   164ea:	91 81       	ldd	r25, Z+1	; 0x01
   164ec:	82 30       	cpi	r24, 0x02	; 2
   164ee:	91 05       	cpc	r25, r1
   164f0:	89 f0       	breq	.+34     	; 0x16514 <SS80_Execute_State+0x4e>
   164f2:	3c f4       	brge	.+14     	; 0x16502 <SS80_Execute_State+0x3c>
   164f4:	00 97       	sbiw	r24, 0x00	; 0
   164f6:	81 f1       	breq	.+96     	; 0x16558 <SS80_Execute_State+0x92>
   164f8:	81 30       	cpi	r24, 0x01	; 1
   164fa:	91 05       	cpc	r25, r1
   164fc:	b9 f4       	brne	.+46     	; 0x1652c <SS80_Execute_State+0x66>
   164fe:	81 de       	rcall	.-766    	; 0x16202 <SS80_locate_and_read>
   16500:	0d c0       	rjmp	.+26     	; 0x1651c <SS80_Execute_State+0x56>
   16502:	83 30       	cpi	r24, 0x03	; 3
   16504:	91 05       	cpc	r25, r1
   16506:	41 f0       	breq	.+16     	; 0x16518 <SS80_Execute_State+0x52>
   16508:	84 30       	cpi	r24, 0x04	; 4
   1650a:	91 05       	cpc	r25, r1
   1650c:	79 f4       	brne	.+30     	; 0x1652c <SS80_Execute_State+0x66>
   1650e:	0e 94 3b a9 	call	0x15276	; 0x15276 <SS80_describe>
   16512:	04 c0       	rjmp	.+8      	; 0x1651c <SS80_Execute_State+0x56>
   16514:	59 da       	rcall	.-2894   	; 0x159c8 <SS80_locate_and_write>
   16516:	02 c0       	rjmp	.+4      	; 0x1651c <SS80_Execute_State+0x56>
   16518:	0e 94 ba a8 	call	0x15174	; 0x15174 <SS80_send_status>
   1651c:	ec 01       	movw	r28, r24
   1651e:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   16522:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   16526:	11 82       	std	Z+1, r1	; 0x01
   16528:	10 82       	st	Z, r1
   1652a:	18 c0       	rjmp	.+48     	; 0x1655c <SS80_Execute_State+0x96>
   1652c:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   16530:	20 ff       	sbrs	r18, 0
   16532:	0c c0       	rjmp	.+24     	; 0x1654c <SS80_Execute_State+0x86>
   16534:	ed b7       	in	r30, 0x3d	; 61
   16536:	fe b7       	in	r31, 0x3e	; 62
   16538:	95 83       	std	Z+5, r25	; 0x05
   1653a:	84 83       	std	Z+4, r24	; 0x04
   1653c:	81 e6       	ldi	r24, 0x61	; 97
   1653e:	98 e2       	ldi	r25, 0x28	; 40
   16540:	a0 e0       	ldi	r26, 0x00	; 0
   16542:	81 83       	std	Z+1, r24	; 0x01
   16544:	92 83       	std	Z+2, r25	; 0x02
   16546:	a3 83       	std	Z+3, r26	; 0x03
   16548:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   1654c:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   16550:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   16554:	11 82       	std	Z+1, r1	; 0x01
   16556:	10 82       	st	Z, r1
   16558:	c0 e0       	ldi	r28, 0x00	; 0
   1655a:	d0 e0       	ldi	r29, 0x00	; 0
   1655c:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   16560:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   16564:	81 81       	ldd	r24, Z+1	; 0x01
   16566:	90 e0       	ldi	r25, 0x00	; 0
   16568:	0e 94 a0 87 	call	0x10f40	; 0x10f40 <gpib_enable_PPR>
   1656c:	ce 01       	movw	r24, r28
   1656e:	cd b7       	in	r28, 0x3d	; 61
   16570:	de b7       	in	r29, 0x3e	; 62
   16572:	25 96       	adiw	r28, 0x05	; 5
   16574:	e2 e0       	ldi	r30, 0x02	; 2
   16576:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__epilogue_restores__+0x20>

0001657a <SS80_COMMANDS>:
   1657a:	a9 e0       	ldi	r26, 0x09	; 9
   1657c:	b0 e0       	ldi	r27, 0x00	; 0
   1657e:	e3 ec       	ldi	r30, 0xC3	; 195
   16580:	f2 eb       	ldi	r31, 0xB2	; 178
   16582:	0c 94 28 e5 	jmp	0x1ca50	; 0x1ca50 <__prologue_saves__+0x1e>
   16586:	18 2f       	mov	r17, r24
   16588:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <talking>
   1658c:	90 e0       	ldi	r25, 0x00	; 0
   1658e:	0e 94 cb 8d 	call	0x11b96	; 0x11b96 <SS80_is_MTA>
   16592:	89 2b       	or	r24, r25
   16594:	19 f0       	breq	.+6      	; 0x1659c <SS80_COMMANDS+0x22>
   16596:	15 36       	cpi	r17, 0x65	; 101
   16598:	19 f5       	brne	.+70     	; 0x165e0 <SS80_COMMANDS+0x66>
   1659a:	09 c0       	rjmp	.+18     	; 0x165ae <SS80_COMMANDS+0x34>
   1659c:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   165a0:	90 e0       	ldi	r25, 0x00	; 0
   165a2:	0e 94 bc 8d 	call	0x11b78	; 0x11b78 <SS80_is_MLA>
   165a6:	ec 01       	movw	r28, r24
   165a8:	89 2b       	or	r24, r25
   165aa:	a9 f7       	brne	.-22     	; 0x16596 <SS80_COMMANDS+0x1c>
   165ac:	ad c0       	rjmp	.+346    	; 0x16708 <SS80_COMMANDS+0x18e>
   165ae:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   165b2:	90 e0       	ldi	r25, 0x00	; 0
   165b4:	0e 94 bc 8d 	call	0x11b78	; 0x11b78 <SS80_is_MLA>
   165b8:	89 2b       	or	r24, r25
   165ba:	09 f4       	brne	.+2      	; 0x165be <SS80_COMMANDS+0x44>
   165bc:	a2 c0       	rjmp	.+324    	; 0x16702 <SS80_COMMANDS+0x188>
   165be:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   165c2:	85 ff       	sbrs	r24, 5
   165c4:	0a c0       	rjmp	.+20     	; 0x165da <SS80_COMMANDS+0x60>
   165c6:	8b e4       	ldi	r24, 0x4B	; 75
   165c8:	91 e2       	ldi	r25, 0x21	; 33
   165ca:	a0 e0       	ldi	r26, 0x00	; 0
   165cc:	ed b7       	in	r30, 0x3d	; 61
   165ce:	fe b7       	in	r31, 0x3e	; 62
   165d0:	81 83       	std	Z+1, r24	; 0x01
   165d2:	92 83       	std	Z+2, r25	; 0x02
   165d4:	a3 83       	std	Z+3, r26	; 0x03
   165d6:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   165da:	0e 94 fb a9 	call	0x153f6	; 0x153f6 <SS80_Command_State>
   165de:	73 c0       	rjmp	.+230    	; 0x166c6 <SS80_COMMANDS+0x14c>
   165e0:	1e 36       	cpi	r17, 0x6E	; 110
   165e2:	01 f5       	brne	.+64     	; 0x16624 <SS80_COMMANDS+0xaa>
   165e4:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   165e8:	90 e0       	ldi	r25, 0x00	; 0
   165ea:	0e 94 bc 8d 	call	0x11b78	; 0x11b78 <SS80_is_MLA>
   165ee:	89 2b       	or	r24, r25
   165f0:	79 f0       	breq	.+30     	; 0x16610 <SS80_COMMANDS+0x96>
   165f2:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   165f6:	85 ff       	sbrs	r24, 5
   165f8:	13 c0       	rjmp	.+38     	; 0x16620 <SS80_COMMANDS+0xa6>
   165fa:	85 e3       	ldi	r24, 0x35	; 53
   165fc:	91 e2       	ldi	r25, 0x21	; 33
   165fe:	a0 e0       	ldi	r26, 0x00	; 0
   16600:	ed b7       	in	r30, 0x3d	; 61
   16602:	fe b7       	in	r31, 0x3e	; 62
   16604:	81 83       	std	Z+1, r24	; 0x01
   16606:	92 83       	std	Z+2, r25	; 0x02
   16608:	a3 83       	std	Z+3, r26	; 0x03
   1660a:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   1660e:	08 c0       	rjmp	.+16     	; 0x16620 <SS80_COMMANDS+0xa6>
   16610:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <talking>
   16614:	90 e0       	ldi	r25, 0x00	; 0
   16616:	0e 94 cb 8d 	call	0x11b96	; 0x11b96 <SS80_is_MTA>
   1661a:	89 2b       	or	r24, r25
   1661c:	51 f7       	brne	.-44     	; 0x165f2 <SS80_COMMANDS+0x78>
   1661e:	71 c0       	rjmp	.+226    	; 0x16702 <SS80_COMMANDS+0x188>
   16620:	52 df       	rcall	.-348    	; 0x164c6 <SS80_Execute_State>
   16622:	51 c0       	rjmp	.+162    	; 0x166c6 <SS80_COMMANDS+0x14c>
   16624:	10 37       	cpi	r17, 0x70	; 112
   16626:	b9 f5       	brne	.+110    	; 0x16696 <SS80_COMMANDS+0x11c>
   16628:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <talking>
   1662c:	90 e0       	ldi	r25, 0x00	; 0
   1662e:	0e 94 cb 8d 	call	0x11b96	; 0x11b96 <SS80_is_MTA>
   16632:	89 2b       	or	r24, r25
   16634:	81 f0       	breq	.+32     	; 0x16656 <SS80_COMMANDS+0xdc>
   16636:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1663a:	85 ff       	sbrs	r24, 5
   1663c:	0a c0       	rjmp	.+20     	; 0x16652 <SS80_COMMANDS+0xd8>
   1663e:	80 e2       	ldi	r24, 0x20	; 32
   16640:	91 e2       	ldi	r25, 0x21	; 33
   16642:	a0 e0       	ldi	r26, 0x00	; 0
   16644:	ed b7       	in	r30, 0x3d	; 61
   16646:	fe b7       	in	r31, 0x3e	; 62
   16648:	81 83       	std	Z+1, r24	; 0x01
   1664a:	92 83       	std	Z+2, r25	; 0x02
   1664c:	a3 83       	std	Z+3, r26	; 0x03
   1664e:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   16652:	4c db       	rcall	.-2408   	; 0x15cec <SS80_Report>
   16654:	38 c0       	rjmp	.+112    	; 0x166c6 <SS80_COMMANDS+0x14c>
   16656:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   1665a:	90 e0       	ldi	r25, 0x00	; 0
   1665c:	0e 94 bc 8d 	call	0x11b78	; 0x11b78 <SS80_is_MLA>
   16660:	89 2b       	or	r24, r25
   16662:	09 f4       	brne	.+2      	; 0x16666 <SS80_COMMANDS+0xec>
   16664:	4e c0       	rjmp	.+156    	; 0x16702 <SS80_COMMANDS+0x188>
   16666:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1666a:	85 ff       	sbrs	r24, 5
   1666c:	0a c0       	rjmp	.+20     	; 0x16682 <SS80_COMMANDS+0x108>
   1666e:	81 e1       	ldi	r24, 0x11	; 17
   16670:	91 e2       	ldi	r25, 0x21	; 33
   16672:	a0 e0       	ldi	r26, 0x00	; 0
   16674:	ed b7       	in	r30, 0x3d	; 61
   16676:	fe b7       	in	r31, 0x3e	; 62
   16678:	81 83       	std	Z+1, r24	; 0x01
   1667a:	92 83       	std	Z+2, r25	; 0x02
   1667c:	a3 83       	std	Z+3, r26	; 0x03
   1667e:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   16682:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   16686:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   1668a:	81 81       	ldd	r24, Z+1	; 0x01
   1668c:	90 e0       	ldi	r25, 0x00	; 0
   1668e:	0e 94 d6 87 	call	0x10fac	; 0x10fac <gpib_disable_PPR>
   16692:	1d dc       	rcall	.-1990   	; 0x15ece <SS80_Amigo_Clear>
   16694:	18 c0       	rjmp	.+48     	; 0x166c6 <SS80_COMMANDS+0x14c>
   16696:	12 37       	cpi	r17, 0x72	; 114
   16698:	c1 f4       	brne	.+48     	; 0x166ca <SS80_COMMANDS+0x150>
   1669a:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   1669e:	90 e0       	ldi	r25, 0x00	; 0
   166a0:	0e 94 bc 8d 	call	0x11b78	; 0x11b78 <SS80_is_MLA>
   166a4:	89 2b       	or	r24, r25
   166a6:	89 f0       	breq	.+34     	; 0x166ca <SS80_COMMANDS+0x150>
   166a8:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   166ac:	85 ff       	sbrs	r24, 5
   166ae:	0a c0       	rjmp	.+20     	; 0x166c4 <SS80_COMMANDS+0x14a>
   166b0:	8d ef       	ldi	r24, 0xFD	; 253
   166b2:	90 e2       	ldi	r25, 0x20	; 32
   166b4:	a0 e0       	ldi	r26, 0x00	; 0
   166b6:	ed b7       	in	r30, 0x3d	; 61
   166b8:	fe b7       	in	r31, 0x3e	; 62
   166ba:	81 83       	std	Z+1, r24	; 0x01
   166bc:	92 83       	std	Z+2, r25	; 0x02
   166be:	a3 83       	std	Z+3, r26	; 0x03
   166c0:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   166c4:	58 dc       	rcall	.-1872   	; 0x15f76 <SS80_Transparent_State>
   166c6:	ec 01       	movw	r28, r24
   166c8:	3b c0       	rjmp	.+118    	; 0x16740 <SS80_COMMANDS+0x1c6>
   166ca:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   166ce:	80 ff       	sbrs	r24, 0
   166d0:	18 c0       	rjmp	.+48     	; 0x16702 <SS80_COMMANDS+0x188>
   166d2:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <talking>
   166d6:	90 e0       	ldi	r25, 0x00	; 0
   166d8:	ed b7       	in	r30, 0x3d	; 61
   166da:	fe b7       	in	r31, 0x3e	; 62
   166dc:	91 87       	std	Z+9, r25	; 0x09
   166de:	80 87       	std	Z+8, r24	; 0x08
   166e0:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   166e4:	90 e0       	ldi	r25, 0x00	; 0
   166e6:	97 83       	std	Z+7, r25	; 0x07
   166e8:	86 83       	std	Z+6, r24	; 0x06
   166ea:	81 2f       	mov	r24, r17
   166ec:	90 e0       	ldi	r25, 0x00	; 0
   166ee:	95 83       	std	Z+5, r25	; 0x05
   166f0:	84 83       	std	Z+4, r24	; 0x04
   166f2:	89 ec       	ldi	r24, 0xC9	; 201
   166f4:	90 e2       	ldi	r25, 0x20	; 32
   166f6:	a0 e0       	ldi	r26, 0x00	; 0
   166f8:	81 83       	std	Z+1, r24	; 0x01
   166fa:	92 83       	std	Z+2, r25	; 0x02
   166fc:	a3 83       	std	Z+3, r26	; 0x03
   166fe:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   16702:	c0 e0       	ldi	r28, 0x00	; 0
   16704:	d0 e0       	ldi	r29, 0x00	; 0
   16706:	1c c0       	rjmp	.+56     	; 0x16740 <SS80_COMMANDS+0x1c6>
   16708:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1670c:	80 ff       	sbrs	r24, 0
   1670e:	f9 cf       	rjmp	.-14     	; 0x16702 <SS80_COMMANDS+0x188>
   16710:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <talking>
   16714:	90 e0       	ldi	r25, 0x00	; 0
   16716:	ed b7       	in	r30, 0x3d	; 61
   16718:	fe b7       	in	r31, 0x3e	; 62
   1671a:	91 87       	std	Z+9, r25	; 0x09
   1671c:	80 87       	std	Z+8, r24	; 0x08
   1671e:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   16722:	90 e0       	ldi	r25, 0x00	; 0
   16724:	97 83       	std	Z+7, r25	; 0x07
   16726:	86 83       	std	Z+6, r24	; 0x06
   16728:	81 2f       	mov	r24, r17
   1672a:	90 e0       	ldi	r25, 0x00	; 0
   1672c:	95 83       	std	Z+5, r25	; 0x05
   1672e:	84 83       	std	Z+4, r24	; 0x04
   16730:	85 e9       	ldi	r24, 0x95	; 149
   16732:	90 e2       	ldi	r25, 0x20	; 32
   16734:	a0 e0       	ldi	r26, 0x00	; 0
   16736:	81 83       	std	Z+1, r24	; 0x01
   16738:	92 83       	std	Z+2, r25	; 0x02
   1673a:	a3 83       	std	Z+3, r26	; 0x03
   1673c:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   16740:	ce 01       	movw	r24, r28
   16742:	cd b7       	in	r28, 0x3d	; 61
   16744:	de b7       	in	r29, 0x3e	; 62
   16746:	29 96       	adiw	r28, 0x09	; 9
   16748:	e3 e0       	ldi	r30, 0x03	; 3
   1674a:	0c 94 44 e5 	jmp	0x1ca88	; 0x1ca88 <__epilogue_restores__+0x1e>

0001674e <amigo_overflow_check>:
   1674e:	cf 92       	push	r12
   16750:	df 92       	push	r13
   16752:	ef 92       	push	r14
   16754:	0f 93       	push	r16
   16756:	1f 93       	push	r17
   16758:	cf 93       	push	r28
   1675a:	df 93       	push	r29
   1675c:	00 d0       	rcall	.+0      	; 0x1675e <amigo_overflow_check+0x10>
   1675e:	00 d0       	rcall	.+0      	; 0x16760 <amigo_overflow_check+0x12>
   16760:	1f 92       	push	r1
   16762:	ec 01       	movw	r28, r24
   16764:	8b 01       	movw	r16, r22
   16766:	80 e0       	ldi	r24, 0x00	; 0
   16768:	90 e0       	ldi	r25, 0x00	; 0
   1676a:	27 e0       	ldi	r18, 0x07	; 7
   1676c:	30 e3       	ldi	r19, 0x30	; 48
   1676e:	69 01       	movw	r12, r18
   16770:	e1 2c       	mov	r14, r1
   16772:	2d 81       	ldd	r18, Y+5	; 0x05
   16774:	30 e0       	ldi	r19, 0x00	; 0
   16776:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   1677a:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   1677e:	40 85       	ldd	r20, Z+8	; 0x08
   16780:	51 85       	ldd	r21, Z+9	; 0x09
   16782:	24 17       	cp	r18, r20
   16784:	35 07       	cpc	r19, r21
   16786:	64 f1       	brlt	.+88     	; 0x167e0 <amigo_overflow_check+0x92>
   16788:	1d 82       	std	Y+5, r1	; 0x05
   1678a:	2c 81       	ldd	r18, Y+4	; 0x04
   1678c:	2f 5f       	subi	r18, 0xFF	; 255
   1678e:	2c 83       	std	Y+4, r18	; 0x04
   16790:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   16794:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   16798:	2c 81       	ldd	r18, Y+4	; 0x04
   1679a:	30 e0       	ldi	r19, 0x00	; 0
   1679c:	42 85       	ldd	r20, Z+10	; 0x0a
   1679e:	53 85       	ldd	r21, Z+11	; 0x0b
   167a0:	24 17       	cp	r18, r20
   167a2:	35 07       	cpc	r19, r21
   167a4:	34 f3       	brlt	.-52     	; 0x16772 <amigo_overflow_check+0x24>
   167a6:	1c 82       	std	Y+4, r1	; 0x04
   167a8:	2b 81       	ldd	r18, Y+3	; 0x03
   167aa:	2f 5f       	subi	r18, 0xFF	; 255
   167ac:	2b 83       	std	Y+3, r18	; 0x03
   167ae:	30 e0       	ldi	r19, 0x00	; 0
   167b0:	44 85       	ldd	r20, Z+12	; 0x0c
   167b2:	55 85       	ldd	r21, Z+13	; 0x0d
   167b4:	24 17       	cp	r18, r20
   167b6:	35 07       	cpc	r19, r21
   167b8:	5c f3       	brlt	.-42     	; 0x16790 <amigo_overflow_check+0x42>
   167ba:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   167be:	80 ff       	sbrs	r24, 0
   167c0:	0c c0       	rjmp	.+24     	; 0x167da <amigo_overflow_check+0x8c>
   167c2:	01 15       	cp	r16, r1
   167c4:	11 05       	cpc	r17, r1
   167c6:	49 f0       	breq	.+18     	; 0x167da <amigo_overflow_check+0x8c>
   167c8:	ed b7       	in	r30, 0x3d	; 61
   167ca:	fe b7       	in	r31, 0x3e	; 62
   167cc:	15 83       	std	Z+5, r17	; 0x05
   167ce:	04 83       	std	Z+4, r16	; 0x04
   167d0:	c1 82       	std	Z+1, r12	; 0x01
   167d2:	d2 82       	std	Z+2, r13	; 0x02
   167d4:	e3 82       	std	Z+3, r14	; 0x03
   167d6:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   167da:	81 e0       	ldi	r24, 0x01	; 1
   167dc:	90 e0       	ldi	r25, 0x00	; 0
   167de:	d8 cf       	rjmp	.-80     	; 0x16790 <amigo_overflow_check+0x42>
   167e0:	0f 90       	pop	r0
   167e2:	0f 90       	pop	r0
   167e4:	0f 90       	pop	r0
   167e6:	0f 90       	pop	r0
   167e8:	0f 90       	pop	r0
   167ea:	df 91       	pop	r29
   167ec:	cf 91       	pop	r28
   167ee:	1f 91       	pop	r17
   167f0:	0f 91       	pop	r16
   167f2:	ef 90       	pop	r14
   167f4:	df 90       	pop	r13
   167f6:	cf 90       	pop	r12
   167f8:	08 95       	ret

000167fa <amigo_chs_to_logical>:
   167fa:	a1 e1       	ldi	r26, 0x11	; 17
   167fc:	b0 e0       	ldi	r27, 0x00	; 0
   167fe:	e3 e0       	ldi	r30, 0x03	; 3
   16800:	f4 eb       	ldi	r31, 0xB4	; 180
   16802:	0c 94 1d e5 	jmp	0x1ca3a	; 0x1ca3a <__prologue_saves__+0x8>
   16806:	8b 01       	movw	r16, r22
   16808:	60 91 03 19 	lds	r22, 0x1903	; 0x801903 <AMIGOp>
   1680c:	70 91 04 19 	lds	r23, 0x1904	; 0x801904 <AMIGOp+0x1>
   16810:	fb 01       	movw	r30, r22
   16812:	40 85       	ldd	r20, Z+8	; 0x08
   16814:	51 85       	ldd	r21, Z+9	; 0x09
   16816:	fc 01       	movw	r30, r24
   16818:	c4 81       	ldd	r28, Z+4	; 0x04
   1681a:	d0 e0       	ldi	r29, 0x00	; 0
   1681c:	4c 9f       	mul	r20, r28
   1681e:	90 01       	movw	r18, r0
   16820:	4d 9f       	mul	r20, r29
   16822:	30 0d       	add	r19, r0
   16824:	5c 9f       	mul	r21, r28
   16826:	30 0d       	add	r19, r0
   16828:	11 24       	eor	r1, r1
   1682a:	49 01       	movw	r8, r18
   1682c:	33 0f       	add	r19, r19
   1682e:	aa 08       	sbc	r10, r10
   16830:	bb 08       	sbc	r11, r11
   16832:	63 80       	ldd	r6, Z+3	; 0x03
   16834:	71 2c       	mov	r7, r1
   16836:	fb 01       	movw	r30, r22
   16838:	e2 84       	ldd	r14, Z+10	; 0x0a
   1683a:	f3 84       	ldd	r15, Z+11	; 0x0b
   1683c:	4e 9d       	mul	r20, r14
   1683e:	d0 01       	movw	r26, r0
   16840:	4f 9d       	mul	r20, r15
   16842:	b0 0d       	add	r27, r0
   16844:	5e 9d       	mul	r21, r14
   16846:	b0 0d       	add	r27, r0
   16848:	11 24       	eor	r1, r1
   1684a:	a6 9d       	mul	r26, r6
   1684c:	90 01       	movw	r18, r0
   1684e:	a7 9d       	mul	r26, r7
   16850:	30 0d       	add	r19, r0
   16852:	b6 9d       	mul	r27, r6
   16854:	30 0d       	add	r19, r0
   16856:	11 24       	eor	r1, r1
   16858:	69 01       	movw	r12, r18
   1685a:	33 0f       	add	r19, r19
   1685c:	ee 08       	sbc	r14, r14
   1685e:	ff 08       	sbc	r15, r15
   16860:	8c 0c       	add	r8, r12
   16862:	9d 1c       	adc	r9, r13
   16864:	ae 1c       	adc	r10, r14
   16866:	bf 1c       	adc	r11, r15
   16868:	fc 01       	movw	r30, r24
   1686a:	f5 80       	ldd	r15, Z+5	; 0x05
   1686c:	a5 01       	movw	r20, r10
   1686e:	94 01       	movw	r18, r8
   16870:	2f 0d       	add	r18, r15
   16872:	31 1d       	adc	r19, r1
   16874:	41 1d       	adc	r20, r1
   16876:	51 1d       	adc	r21, r1
   16878:	fb 01       	movw	r30, r22
   1687a:	a6 81       	ldd	r26, Z+6	; 0x06
   1687c:	b7 81       	ldd	r27, Z+7	; 0x07
   1687e:	0e 94 03 e5 	call	0x1ca06	; 0x1ca06 <__mulshisi3>
   16882:	4b 01       	movw	r8, r22
   16884:	5c 01       	movw	r10, r24
   16886:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1688a:	85 ff       	sbrs	r24, 5
   1688c:	22 c0       	rjmp	.+68     	; 0x168d2 <amigo_chs_to_logical+0xd8>
   1688e:	8f 2d       	mov	r24, r15
   16890:	90 e0       	ldi	r25, 0x00	; 0
   16892:	ed b7       	in	r30, 0x3d	; 61
   16894:	fe b7       	in	r31, 0x3e	; 62
   16896:	91 8b       	std	Z+17, r25	; 0x11
   16898:	80 8b       	std	Z+16, r24	; 0x10
   1689a:	d7 87       	std	Z+15, r29	; 0x0f
   1689c:	c6 87       	std	Z+14, r28	; 0x0e
   1689e:	75 86       	std	Z+13, r7	; 0x0d
   168a0:	64 86       	std	Z+12, r6	; 0x0c
   168a2:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   168a6:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   168aa:	81 81       	ldd	r24, Z+1	; 0x01
   168ac:	90 e0       	ldi	r25, 0x00	; 0
   168ae:	ed b7       	in	r30, 0x3d	; 61
   168b0:	fe b7       	in	r31, 0x3e	; 62
   168b2:	93 87       	std	Z+11, r25	; 0x0b
   168b4:	82 87       	std	Z+10, r24	; 0x0a
   168b6:	86 82       	std	Z+6, r8	; 0x06
   168b8:	97 82       	std	Z+7, r9	; 0x07
   168ba:	a0 86       	std	Z+8, r10	; 0x08
   168bc:	b1 86       	std	Z+9, r11	; 0x09
   168be:	15 83       	std	Z+5, r17	; 0x05
   168c0:	04 83       	std	Z+4, r16	; 0x04
   168c2:	84 eb       	ldi	r24, 0xB4	; 180
   168c4:	9f e2       	ldi	r25, 0x2F	; 47
   168c6:	a0 e0       	ldi	r26, 0x00	; 0
   168c8:	81 83       	std	Z+1, r24	; 0x01
   168ca:	92 83       	std	Z+2, r25	; 0x02
   168cc:	a3 83       	std	Z+3, r26	; 0x03
   168ce:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   168d2:	c5 01       	movw	r24, r10
   168d4:	b4 01       	movw	r22, r8
   168d6:	cd b7       	in	r28, 0x3d	; 61
   168d8:	de b7       	in	r29, 0x3e	; 62
   168da:	61 96       	adiw	r28, 0x11	; 17
   168dc:	ee e0       	ldi	r30, 0x0E	; 14
   168de:	0c 94 39 e5 	jmp	0x1ca72	; 0x1ca72 <__epilogue_restores__+0x8>

000168e2 <amigo_init>:
   168e2:	ef 92       	push	r14
   168e4:	ff 92       	push	r15
   168e6:	0f 93       	push	r16
   168e8:	1f 93       	push	r17
   168ea:	cf 93       	push	r28
   168ec:	df 93       	push	r29
   168ee:	05 e6       	ldi	r16, 0x65	; 101
   168f0:	10 e2       	ldi	r17, 0x20	; 32
   168f2:	cb e0       	ldi	r28, 0x0B	; 11
   168f4:	d0 e0       	ldi	r29, 0x00	; 0
   168f6:	84 e0       	ldi	r24, 0x04	; 4
   168f8:	f8 2e       	mov	r15, r24
   168fa:	92 e0       	ldi	r25, 0x02	; 2
   168fc:	e9 2e       	mov	r14, r25
   168fe:	d8 01       	movw	r26, r16
   16900:	8c 91       	ld	r24, X
   16902:	81 30       	cpi	r24, 0x01	; 1
   16904:	31 f5       	brne	.+76     	; 0x16952 <amigo_init+0x70>
   16906:	ce 01       	movw	r24, r28
   16908:	0e 94 64 94 	call	0x128c8	; 0x128c8 <set_active_device>
   1690c:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   16910:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   16914:	10 82       	st	Z, r1
   16916:	9f 01       	movw	r18, r30
   16918:	27 5f       	subi	r18, 0xF7	; 247
   1691a:	3f 4f       	sbci	r19, 0xFF	; 255
   1691c:	d9 01       	movw	r26, r18
   1691e:	8f 2d       	mov	r24, r15
   16920:	1d 92       	st	X+, r1
   16922:	8a 95       	dec	r24
   16924:	e9 f7       	brne	.-6      	; 0x16920 <amigo_init+0x3e>
   16926:	2c 5f       	subi	r18, 0xFC	; 252
   16928:	3f 4f       	sbci	r19, 0xFF	; 255
   1692a:	d9 01       	movw	r26, r18
   1692c:	8f 2d       	mov	r24, r15
   1692e:	1d 92       	st	X+, r1
   16930:	8a 95       	dec	r24
   16932:	e9 f7       	brne	.-6      	; 0x1692e <amigo_init+0x4c>
   16934:	11 82       	std	Z+1, r1	; 0x01
   16936:	15 82       	std	Z+5, r1	; 0x05
   16938:	14 82       	std	Z+4, r1	; 0x04
   1693a:	13 82       	std	Z+3, r1	; 0x03
   1693c:	e6 82       	std	Z+6, r14	; 0x06
   1693e:	10 86       	std	Z+8, r1	; 0x08
   16940:	17 82       	std	Z+7, r1	; 0x07
   16942:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   16946:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   1694a:	81 81       	ldd	r24, Z+1	; 0x01
   1694c:	90 e0       	ldi	r25, 0x00	; 0
   1694e:	0e 94 d6 87 	call	0x10fac	; 0x10fac <gpib_disable_PPR>
   16952:	21 97       	sbiw	r28, 0x01	; 1
   16954:	0b 52       	subi	r16, 0x2B	; 43
   16956:	11 09       	sbc	r17, r1
   16958:	cf 3f       	cpi	r28, 0xFF	; 255
   1695a:	af ef       	ldi	r26, 0xFF	; 255
   1695c:	da 07       	cpc	r29, r26
   1695e:	79 f6       	brne	.-98     	; 0x168fe <amigo_init+0x1c>
   16960:	cd b7       	in	r28, 0x3d	; 61
   16962:	de b7       	in	r29, 0x3e	; 62
   16964:	e6 e0       	ldi	r30, 0x06	; 6
   16966:	0c 94 41 e5 	jmp	0x1ca82	; 0x1ca82 <__epilogue_restores__+0x18>

0001696a <amigo_request_logical_address>:
   1696a:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   1696e:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   16972:	15 86       	std	Z+13, r1	; 0x0d
   16974:	83 81       	ldd	r24, Z+3	; 0x03
   16976:	86 87       	std	Z+14, r24	; 0x0e
   16978:	84 81       	ldd	r24, Z+4	; 0x04
   1697a:	87 87       	std	Z+15, r24	; 0x0f
   1697c:	85 81       	ldd	r24, Z+5	; 0x05
   1697e:	80 8b       	std	Z+16, r24	; 0x10
   16980:	80 e0       	ldi	r24, 0x00	; 0
   16982:	90 e0       	ldi	r25, 0x00	; 0
   16984:	08 95       	ret

00016986 <amigo_request_status>:
   16986:	00 d0       	rcall	.+0      	; 0x16988 <amigo_request_status+0x2>
   16988:	1f 92       	push	r1
   1698a:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1698e:	85 ff       	sbrs	r24, 5
   16990:	0a c0       	rjmp	.+20     	; 0x169a6 <amigo_request_status+0x20>
   16992:	87 e8       	ldi	r24, 0x87	; 135
   16994:	90 e3       	ldi	r25, 0x30	; 48
   16996:	a0 e0       	ldi	r26, 0x00	; 0
   16998:	ed b7       	in	r30, 0x3d	; 61
   1699a:	fe b7       	in	r31, 0x3e	; 62
   1699c:	81 83       	std	Z+1, r24	; 0x01
   1699e:	92 83       	std	Z+2, r25	; 0x02
   169a0:	a3 83       	std	Z+3, r26	; 0x03
   169a2:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   169a6:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   169aa:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   169ae:	11 86       	std	Z+9, r1	; 0x09
   169b0:	81 81       	ldd	r24, Z+1	; 0x01
   169b2:	82 87       	std	Z+10, r24	; 0x0a
   169b4:	8d e0       	ldi	r24, 0x0D	; 13
   169b6:	83 87       	std	Z+11, r24	; 0x0b
   169b8:	14 86       	std	Z+12, r1	; 0x0c
   169ba:	0e 94 90 71 	call	0xe320	; 0xe320 <mmc_wp_status>
   169be:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   169c2:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   169c6:	89 2b       	or	r24, r25
   169c8:	19 f0       	breq	.+6      	; 0x169d0 <amigo_request_status+0x4a>
   169ca:	84 85       	ldd	r24, Z+12	; 0x0c
   169cc:	80 66       	ori	r24, 0x60	; 96
   169ce:	84 87       	std	Z+12, r24	; 0x0c
   169d0:	86 81       	ldd	r24, Z+6	; 0x06
   169d2:	82 30       	cpi	r24, 0x02	; 2
   169d4:	31 f4       	brne	.+12     	; 0x169e2 <amigo_request_status+0x5c>
   169d6:	83 e1       	ldi	r24, 0x13	; 19
   169d8:	81 87       	std	Z+9, r24	; 0x09
   169da:	84 85       	ldd	r24, Z+12	; 0x0c
   169dc:	88 60       	ori	r24, 0x08	; 8
   169de:	84 87       	std	Z+12, r24	; 0x0c
   169e0:	21 c0       	rjmp	.+66     	; 0x16a24 <amigo_request_status+0x9e>
   169e2:	27 81       	ldd	r18, Z+7	; 0x07
   169e4:	30 85       	ldd	r19, Z+8	; 0x08
   169e6:	21 15       	cp	r18, r1
   169e8:	31 05       	cpc	r19, r1
   169ea:	11 f4       	brne	.+4      	; 0x169f0 <amigo_request_status+0x6a>
   169ec:	81 30       	cpi	r24, 0x01	; 1
   169ee:	d1 f4       	brne	.+52     	; 0x16a24 <amigo_request_status+0x9e>
   169f0:	26 fd       	sbrc	r18, 6
   169f2:	0c c0       	rjmp	.+24     	; 0x16a0c <amigo_request_status+0x86>
   169f4:	25 ff       	sbrs	r18, 5
   169f6:	03 c0       	rjmp	.+6      	; 0x169fe <amigo_request_status+0x78>
   169f8:	8a e0       	ldi	r24, 0x0A	; 10
   169fa:	81 87       	std	Z+9, r24	; 0x09
   169fc:	0d c0       	rjmp	.+26     	; 0x16a18 <amigo_request_status+0x92>
   169fe:	84 85       	ldd	r24, Z+12	; 0x0c
   16a00:	24 ff       	sbrs	r18, 4
   16a02:	02 c0       	rjmp	.+4      	; 0x16a08 <amigo_request_status+0x82>
   16a04:	83 60       	ori	r24, 0x03	; 3
   16a06:	07 c0       	rjmp	.+14     	; 0x16a16 <amigo_request_status+0x90>
   16a08:	21 ff       	sbrs	r18, 1
   16a0a:	02 c0       	rjmp	.+4      	; 0x16a10 <amigo_request_status+0x8a>
   16a0c:	83 e1       	ldi	r24, 0x13	; 19
   16a0e:	f5 cf       	rjmp	.-22     	; 0x169fa <amigo_request_status+0x74>
   16a10:	22 ff       	sbrs	r18, 2
   16a12:	02 c0       	rjmp	.+4      	; 0x16a18 <amigo_request_status+0x92>
   16a14:	84 60       	ori	r24, 0x04	; 4
   16a16:	84 87       	std	Z+12, r24	; 0x0c
   16a18:	84 85       	ldd	r24, Z+12	; 0x0c
   16a1a:	80 61       	ori	r24, 0x10	; 16
   16a1c:	84 87       	std	Z+12, r24	; 0x0c
   16a1e:	83 85       	ldd	r24, Z+11	; 0x0b
   16a20:	80 68       	ori	r24, 0x80	; 128
   16a22:	83 87       	std	Z+11, r24	; 0x0b
   16a24:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   16a28:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   16a2c:	81 81       	ldd	r24, Z+1	; 0x01
   16a2e:	90 e0       	ldi	r25, 0x00	; 0
   16a30:	0e 94 a0 87 	call	0x10f40	; 0x10f40 <gpib_enable_PPR>
   16a34:	80 e0       	ldi	r24, 0x00	; 0
   16a36:	90 e0       	ldi	r25, 0x00	; 0
   16a38:	0f 90       	pop	r0
   16a3a:	0f 90       	pop	r0
   16a3c:	0f 90       	pop	r0
   16a3e:	08 95       	ret

00016a40 <amigo_send_logical_address>:
   16a40:	a5 e0       	ldi	r26, 0x05	; 5
   16a42:	b0 e0       	ldi	r27, 0x00	; 0
   16a44:	e6 e2       	ldi	r30, 0x26	; 38
   16a46:	f5 eb       	ldi	r31, 0xB5	; 181
   16a48:	0c 94 29 e5 	jmp	0x1ca52	; 0x1ca52 <__prologue_saves__+0x20>
   16a4c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16a50:	85 ff       	sbrs	r24, 5
   16a52:	0a c0       	rjmp	.+20     	; 0x16a68 <amigo_send_logical_address+0x28>
   16a54:	89 e6       	ldi	r24, 0x69	; 105
   16a56:	90 e3       	ldi	r25, 0x30	; 48
   16a58:	a0 e0       	ldi	r26, 0x00	; 0
   16a5a:	ed b7       	in	r30, 0x3d	; 61
   16a5c:	fe b7       	in	r31, 0x3e	; 62
   16a5e:	81 83       	std	Z+1, r24	; 0x01
   16a60:	92 83       	std	Z+2, r25	; 0x02
   16a62:	a3 83       	std	Z+3, r26	; 0x03
   16a64:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   16a68:	80 e0       	ldi	r24, 0x00	; 0
   16a6a:	91 e0       	ldi	r25, 0x01	; 1
   16a6c:	9d 83       	std	Y+5, r25	; 0x05
   16a6e:	8c 83       	std	Y+4, r24	; 0x04
   16a70:	80 91 01 19 	lds	r24, 0x1901	; 0x801901 <AMIGOs>
   16a74:	90 91 02 19 	lds	r25, 0x1902	; 0x801902 <AMIGOs+0x1>
   16a78:	ae 01       	movw	r20, r28
   16a7a:	4c 5f       	subi	r20, 0xFC	; 252
   16a7c:	5f 4f       	sbci	r21, 0xFF	; 255
   16a7e:	64 e0       	ldi	r22, 0x04	; 4
   16a80:	70 e0       	ldi	r23, 0x00	; 0
   16a82:	0d 96       	adiw	r24, 0x0d	; 13
   16a84:	0e 94 fa 8c 	call	0x119f4	; 0x119f4 <gpib_write_str>
   16a88:	2c 81       	ldd	r18, Y+4	; 0x04
   16a8a:	3d 81       	ldd	r19, Y+5	; 0x05
   16a8c:	22 27       	eor	r18, r18
   16a8e:	30 7d       	andi	r19, 0xD0	; 208
   16a90:	23 2b       	or	r18, r19
   16a92:	49 f0       	breq	.+18     	; 0x16aa6 <amigo_send_logical_address+0x66>
   16a94:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   16a98:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   16a9c:	27 81       	ldd	r18, Z+7	; 0x07
   16a9e:	30 85       	ldd	r19, Z+8	; 0x08
   16aa0:	20 62       	ori	r18, 0x20	; 32
   16aa2:	30 87       	std	Z+8, r19	; 0x08
   16aa4:	27 83       	std	Z+7, r18	; 0x07
   16aa6:	04 97       	sbiw	r24, 0x04	; 4
   16aa8:	c9 f0       	breq	.+50     	; 0x16adc <amigo_send_logical_address+0x9c>
   16aaa:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   16aae:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   16ab2:	87 81       	ldd	r24, Z+7	; 0x07
   16ab4:	90 85       	ldd	r25, Z+8	; 0x08
   16ab6:	80 62       	ori	r24, 0x20	; 32
   16ab8:	90 87       	std	Z+8, r25	; 0x08
   16aba:	87 83       	std	Z+7, r24	; 0x07
   16abc:	81 e0       	ldi	r24, 0x01	; 1
   16abe:	86 83       	std	Z+6, r24	; 0x06
   16ac0:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16ac4:	80 ff       	sbrs	r24, 0
   16ac6:	0a c0       	rjmp	.+20     	; 0x16adc <amigo_send_logical_address+0x9c>
   16ac8:	8f e4       	ldi	r24, 0x4F	; 79
   16aca:	90 e3       	ldi	r25, 0x30	; 48
   16acc:	a0 e0       	ldi	r26, 0x00	; 0
   16ace:	ed b7       	in	r30, 0x3d	; 61
   16ad0:	fe b7       	in	r31, 0x3e	; 62
   16ad2:	81 83       	std	Z+1, r24	; 0x01
   16ad4:	92 83       	std	Z+2, r25	; 0x02
   16ad6:	a3 83       	std	Z+3, r26	; 0x03
   16ad8:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   16adc:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   16ae0:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   16ae4:	81 81       	ldd	r24, Z+1	; 0x01
   16ae6:	90 e0       	ldi	r25, 0x00	; 0
   16ae8:	0e 94 a0 87 	call	0x10f40	; 0x10f40 <gpib_enable_PPR>
   16aec:	8c 81       	ldd	r24, Y+4	; 0x04
   16aee:	9d 81       	ldd	r25, Y+5	; 0x05
   16af0:	88 27       	eor	r24, r24
   16af2:	90 7d       	andi	r25, 0xD0	; 208
   16af4:	25 96       	adiw	r28, 0x05	; 5
   16af6:	e2 e0       	ldi	r30, 0x02	; 2
   16af8:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__epilogue_restores__+0x20>

00016afc <amigo_send_status>:
   16afc:	a5 e0       	ldi	r26, 0x05	; 5
   16afe:	b0 e0       	ldi	r27, 0x00	; 0
   16b00:	e4 e8       	ldi	r30, 0x84	; 132
   16b02:	f5 eb       	ldi	r31, 0xB5	; 181
   16b04:	0c 94 29 e5 	jmp	0x1ca52	; 0x1ca52 <__prologue_saves__+0x20>
   16b08:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16b0c:	85 ff       	sbrs	r24, 5
   16b0e:	0a c0       	rjmp	.+20     	; 0x16b24 <amigo_send_status+0x28>
   16b10:	8a e3       	ldi	r24, 0x3A	; 58
   16b12:	90 e3       	ldi	r25, 0x30	; 48
   16b14:	a0 e0       	ldi	r26, 0x00	; 0
   16b16:	ed b7       	in	r30, 0x3d	; 61
   16b18:	fe b7       	in	r31, 0x3e	; 62
   16b1a:	81 83       	std	Z+1, r24	; 0x01
   16b1c:	92 83       	std	Z+2, r25	; 0x02
   16b1e:	a3 83       	std	Z+3, r26	; 0x03
   16b20:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   16b24:	80 e0       	ldi	r24, 0x00	; 0
   16b26:	91 e0       	ldi	r25, 0x01	; 1
   16b28:	9d 83       	std	Y+5, r25	; 0x05
   16b2a:	8c 83       	std	Y+4, r24	; 0x04
   16b2c:	80 91 01 19 	lds	r24, 0x1901	; 0x801901 <AMIGOs>
   16b30:	90 91 02 19 	lds	r25, 0x1902	; 0x801902 <AMIGOs+0x1>
   16b34:	ae 01       	movw	r20, r28
   16b36:	4c 5f       	subi	r20, 0xFC	; 252
   16b38:	5f 4f       	sbci	r21, 0xFF	; 255
   16b3a:	64 e0       	ldi	r22, 0x04	; 4
   16b3c:	70 e0       	ldi	r23, 0x00	; 0
   16b3e:	09 96       	adiw	r24, 0x09	; 9
   16b40:	0e 94 fa 8c 	call	0x119f4	; 0x119f4 <gpib_write_str>
   16b44:	2c 81       	ldd	r18, Y+4	; 0x04
   16b46:	3d 81       	ldd	r19, Y+5	; 0x05
   16b48:	22 27       	eor	r18, r18
   16b4a:	30 7d       	andi	r19, 0xD0	; 208
   16b4c:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   16b50:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   16b54:	23 2b       	or	r18, r19
   16b56:	29 f0       	breq	.+10     	; 0x16b62 <amigo_send_status+0x66>
   16b58:	27 81       	ldd	r18, Z+7	; 0x07
   16b5a:	30 85       	ldd	r19, Z+8	; 0x08
   16b5c:	20 62       	ori	r18, 0x20	; 32
   16b5e:	30 87       	std	Z+8, r19	; 0x08
   16b60:	27 83       	std	Z+7, r18	; 0x07
   16b62:	04 97       	sbiw	r24, 0x04	; 4
   16b64:	b1 f0       	breq	.+44     	; 0x16b92 <amigo_send_status+0x96>
   16b66:	87 81       	ldd	r24, Z+7	; 0x07
   16b68:	90 85       	ldd	r25, Z+8	; 0x08
   16b6a:	80 62       	ori	r24, 0x20	; 32
   16b6c:	90 87       	std	Z+8, r25	; 0x08
   16b6e:	87 83       	std	Z+7, r24	; 0x07
   16b70:	81 e0       	ldi	r24, 0x01	; 1
   16b72:	86 83       	std	Z+6, r24	; 0x06
   16b74:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16b78:	80 ff       	sbrs	r24, 0
   16b7a:	0e c0       	rjmp	.+28     	; 0x16b98 <amigo_send_status+0x9c>
   16b7c:	80 e2       	ldi	r24, 0x20	; 32
   16b7e:	90 e3       	ldi	r25, 0x30	; 48
   16b80:	a0 e0       	ldi	r26, 0x00	; 0
   16b82:	ed b7       	in	r30, 0x3d	; 61
   16b84:	fe b7       	in	r31, 0x3e	; 62
   16b86:	81 83       	std	Z+1, r24	; 0x01
   16b88:	92 83       	std	Z+2, r25	; 0x02
   16b8a:	a3 83       	std	Z+3, r26	; 0x03
   16b8c:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   16b90:	03 c0       	rjmp	.+6      	; 0x16b98 <amigo_send_status+0x9c>
   16b92:	10 86       	std	Z+8, r1	; 0x08
   16b94:	17 82       	std	Z+7, r1	; 0x07
   16b96:	16 82       	std	Z+6, r1	; 0x06
   16b98:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   16b9c:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   16ba0:	81 81       	ldd	r24, Z+1	; 0x01
   16ba2:	90 e0       	ldi	r25, 0x00	; 0
   16ba4:	0e 94 a0 87 	call	0x10f40	; 0x10f40 <gpib_enable_PPR>
   16ba8:	8c 81       	ldd	r24, Y+4	; 0x04
   16baa:	9d 81       	ldd	r25, Y+5	; 0x05
   16bac:	88 27       	eor	r24, r24
   16bae:	90 7d       	andi	r25, 0xD0	; 208
   16bb0:	25 96       	adiw	r28, 0x05	; 5
   16bb2:	e2 e0       	ldi	r30, 0x02	; 2
   16bb4:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__epilogue_restores__+0x20>

00016bb8 <amigo_increment>:
   16bb8:	a1 e1       	ldi	r26, 0x11	; 17
   16bba:	b0 e0       	ldi	r27, 0x00	; 0
   16bbc:	e2 ee       	ldi	r30, 0xE2	; 226
   16bbe:	f5 eb       	ldi	r31, 0xB5	; 181
   16bc0:	0c 94 29 e5 	jmp	0x1ca52	; 0x1ca52 <__prologue_saves__+0x20>
   16bc4:	bc 01       	movw	r22, r24
   16bc6:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   16bca:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   16bce:	91 e1       	ldi	r25, 0x11	; 17
   16bd0:	de 01       	movw	r26, r28
   16bd2:	11 96       	adiw	r26, 0x01	; 1
   16bd4:	01 90       	ld	r0, Z+
   16bd6:	0d 92       	st	X+, r0
   16bd8:	9a 95       	dec	r25
   16bda:	e1 f7       	brne	.-8      	; 0x16bd4 <amigo_increment+0x1c>
   16bdc:	9e 81       	ldd	r25, Y+6	; 0x06
   16bde:	9f 5f       	subi	r25, 0xFF	; 255
   16be0:	9e 83       	std	Y+6, r25	; 0x06
   16be2:	ce 01       	movw	r24, r28
   16be4:	01 96       	adiw	r24, 0x01	; 1
   16be6:	b3 dd       	rcall	.-1178   	; 0x1674e <amigo_overflow_check>
   16be8:	00 97       	sbiw	r24, 0x00	; 0
   16bea:	59 f4       	brne	.+22     	; 0x16c02 <amigo_increment+0x4a>
   16bec:	a0 91 01 19 	lds	r26, 0x1901	; 0x801901 <AMIGOs>
   16bf0:	b0 91 02 19 	lds	r27, 0x1902	; 0x801902 <AMIGOs+0x1>
   16bf4:	21 e1       	ldi	r18, 0x11	; 17
   16bf6:	fe 01       	movw	r30, r28
   16bf8:	31 96       	adiw	r30, 0x01	; 1
   16bfa:	01 90       	ld	r0, Z+
   16bfc:	0d 92       	st	X+, r0
   16bfe:	2a 95       	dec	r18
   16c00:	e1 f7       	brne	.-8      	; 0x16bfa <amigo_increment+0x42>
   16c02:	61 96       	adiw	r28, 0x11	; 17
   16c04:	e2 e0       	ldi	r30, 0x02	; 2
   16c06:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__epilogue_restores__+0x20>

00016c0a <amigo_seek>:
   16c0a:	0f 93       	push	r16
   16c0c:	1f 93       	push	r17
   16c0e:	cf 93       	push	r28
   16c10:	df 93       	push	r29
   16c12:	ec 01       	movw	r28, r24
   16c14:	63 ea       	ldi	r22, 0xA3	; 163
   16c16:	74 e1       	ldi	r23, 0x14	; 20
   16c18:	9a dd       	rcall	.-1228   	; 0x1674e <amigo_overflow_check>
   16c1a:	8c 01       	movw	r16, r24
   16c1c:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   16c20:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   16c24:	89 2b       	or	r24, r25
   16c26:	41 f0       	breq	.+16     	; 0x16c38 <amigo_seek+0x2e>
   16c28:	81 e0       	ldi	r24, 0x01	; 1
   16c2a:	86 83       	std	Z+6, r24	; 0x06
   16c2c:	87 81       	ldd	r24, Z+7	; 0x07
   16c2e:	90 85       	ldd	r25, Z+8	; 0x08
   16c30:	84 60       	ori	r24, 0x04	; 4
   16c32:	90 87       	std	Z+8, r25	; 0x08
   16c34:	87 83       	std	Z+7, r24	; 0x07
   16c36:	06 c0       	rjmp	.+12     	; 0x16c44 <amigo_seek+0x3a>
   16c38:	8d 81       	ldd	r24, Y+5	; 0x05
   16c3a:	85 83       	std	Z+5, r24	; 0x05
   16c3c:	8c 81       	ldd	r24, Y+4	; 0x04
   16c3e:	84 83       	std	Z+4, r24	; 0x04
   16c40:	8b 81       	ldd	r24, Y+3	; 0x03
   16c42:	83 83       	std	Z+3, r24	; 0x03
   16c44:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   16c48:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   16c4c:	81 81       	ldd	r24, Z+1	; 0x01
   16c4e:	90 e0       	ldi	r25, 0x00	; 0
   16c50:	0e 94 a0 87 	call	0x10f40	; 0x10f40 <gpib_enable_PPR>
   16c54:	c8 01       	movw	r24, r16
   16c56:	df 91       	pop	r29
   16c58:	cf 91       	pop	r28
   16c5a:	1f 91       	pop	r17
   16c5c:	0f 91       	pop	r16
   16c5e:	08 95       	ret

00016c60 <amigo_verify>:
   16c60:	8f 92       	push	r8
   16c62:	9f 92       	push	r9
   16c64:	af 92       	push	r10
   16c66:	bf 92       	push	r11
   16c68:	ef 92       	push	r14
   16c6a:	ff 92       	push	r15
   16c6c:	0f 93       	push	r16
   16c6e:	1f 93       	push	r17
   16c70:	cf 93       	push	r28
   16c72:	df 93       	push	r29
   16c74:	ad b7       	in	r26, 0x3d	; 61
   16c76:	be b7       	in	r27, 0x3e	; 62
   16c78:	19 97       	sbiw	r26, 0x09	; 9
   16c7a:	0f b6       	in	r0, 0x3f	; 63
   16c7c:	f8 94       	cli
   16c7e:	be bf       	out	0x3e, r27	; 62
   16c80:	0f be       	out	0x3f, r0	; 63
   16c82:	ad bf       	out	0x3d, r26	; 61
   16c84:	7c 01       	movw	r14, r24
   16c86:	68 ea       	ldi	r22, 0xA8	; 168
   16c88:	74 e1       	ldi	r23, 0x14	; 20
   16c8a:	80 91 01 19 	lds	r24, 0x1901	; 0x801901 <AMIGOs>
   16c8e:	90 91 02 19 	lds	r25, 0x1902	; 0x801902 <AMIGOs+0x1>
   16c92:	b3 dd       	rcall	.-1178   	; 0x167fa <amigo_chs_to_logical>
   16c94:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   16c98:	25 ff       	sbrs	r18, 5
   16c9a:	10 c0       	rjmp	.+32     	; 0x16cbc <amigo_verify+0x5c>
   16c9c:	ed b7       	in	r30, 0x3d	; 61
   16c9e:	fe b7       	in	r31, 0x3e	; 62
   16ca0:	e0 86       	std	Z+8, r14	; 0x08
   16ca2:	f1 86       	std	Z+9, r15	; 0x09
   16ca4:	64 83       	std	Z+4, r22	; 0x04
   16ca6:	75 83       	std	Z+5, r23	; 0x05
   16ca8:	86 83       	std	Z+6, r24	; 0x06
   16caa:	97 83       	std	Z+7, r25	; 0x07
   16cac:	8f ed       	ldi	r24, 0xDF	; 223
   16cae:	9f e2       	ldi	r25, 0x2F	; 47
   16cb0:	a0 e0       	ldi	r26, 0x00	; 0
   16cb2:	81 83       	std	Z+1, r24	; 0x01
   16cb4:	92 83       	std	Z+2, r25	; 0x02
   16cb6:	a3 83       	std	Z+3, r26	; 0x03
   16cb8:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   16cbc:	e7 01       	movw	r28, r14
   16cbe:	20 97       	sbiw	r28, 0x00	; 0
   16cc0:	09 f4       	brne	.+2      	; 0x16cc4 <amigo_verify+0x64>
   16cc2:	49 c0       	rjmp	.+146    	; 0x16d56 <amigo_verify+0xf6>
   16cc4:	65 eb       	ldi	r22, 0xB5	; 181
   16cc6:	74 e1       	ldi	r23, 0x14	; 20
   16cc8:	80 91 01 19 	lds	r24, 0x1901	; 0x801901 <AMIGOs>
   16ccc:	90 91 02 19 	lds	r25, 0x1902	; 0x801902 <AMIGOs+0x1>
   16cd0:	94 dd       	rcall	.-1240   	; 0x167fa <amigo_chs_to_logical>
   16cd2:	4b 01       	movw	r8, r22
   16cd4:	5c 01       	movw	r10, r24
   16cd6:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16cda:	86 fd       	sbrc	r24, 6
   16cdc:	0e 94 de 86 	call	0x10dbc	; 0x10dbc <gpib_timer_elapsed_begin>
   16ce0:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   16ce4:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   16ce8:	e0 90 01 19 	lds	r14, 0x1901	; 0x801901 <AMIGOs>
   16cec:	f0 90 02 19 	lds	r15, 0x1902	; 0x801902 <AMIGOs+0x1>
   16cf0:	87 e0       	ldi	r24, 0x07	; 7
   16cf2:	e8 0e       	add	r14, r24
   16cf4:	f1 1c       	adc	r15, r1
   16cf6:	06 81       	ldd	r16, Z+6	; 0x06
   16cf8:	17 81       	ldd	r17, Z+7	; 0x07
   16cfa:	22 e8       	ldi	r18, 0x82	; 130
   16cfc:	3c e1       	ldi	r19, 0x1C	; 28
   16cfe:	b5 01       	movw	r22, r10
   16d00:	a4 01       	movw	r20, r8
   16d02:	82 81       	ldd	r24, Z+2	; 0x02
   16d04:	93 81       	ldd	r25, Z+3	; 0x03
   16d06:	0e 94 30 86 	call	0x10c60	; 0x10c60 <dbf_open_read>
   16d0a:	7c 01       	movw	r14, r24
   16d0c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16d10:	86 ff       	sbrs	r24, 6
   16d12:	04 c0       	rjmp	.+8      	; 0x16d1c <amigo_verify+0xbc>
   16d14:	8d eb       	ldi	r24, 0xBD	; 189
   16d16:	9f e0       	ldi	r25, 0x0F	; 15
   16d18:	0e 94 f0 86 	call	0x10de0	; 0x10de0 <gpib_timer_elapsed_end>
   16d1c:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   16d20:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   16d24:	86 81       	ldd	r24, Z+6	; 0x06
   16d26:	97 81       	ldd	r25, Z+7	; 0x07
   16d28:	e8 16       	cp	r14, r24
   16d2a:	f9 06       	cpc	r15, r25
   16d2c:	61 f0       	breq	.+24     	; 0x16d46 <amigo_verify+0xe6>
   16d2e:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   16d32:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   16d36:	81 e0       	ldi	r24, 0x01	; 1
   16d38:	86 83       	std	Z+6, r24	; 0x06
   16d3a:	87 81       	ldd	r24, Z+7	; 0x07
   16d3c:	90 85       	ldd	r25, Z+8	; 0x08
   16d3e:	81 60       	ori	r24, 0x01	; 1
   16d40:	90 87       	std	Z+8, r25	; 0x08
   16d42:	87 83       	std	Z+7, r24	; 0x07
   16d44:	0b c0       	rjmp	.+22     	; 0x16d5c <amigo_verify+0xfc>
   16d46:	8d eb       	ldi	r24, 0xBD	; 189
   16d48:	94 e1       	ldi	r25, 0x14	; 20
   16d4a:	36 df       	rcall	.-404    	; 0x16bb8 <amigo_increment>
   16d4c:	21 97       	sbiw	r28, 0x01	; 1
   16d4e:	89 2b       	or	r24, r25
   16d50:	09 f4       	brne	.+2      	; 0x16d54 <amigo_verify+0xf4>
   16d52:	b5 cf       	rjmp	.-150    	; 0x16cbe <amigo_verify+0x5e>
   16d54:	03 c0       	rjmp	.+6      	; 0x16d5c <amigo_verify+0xfc>
   16d56:	c0 e0       	ldi	r28, 0x00	; 0
   16d58:	d0 e0       	ldi	r29, 0x00	; 0
   16d5a:	02 c0       	rjmp	.+4      	; 0x16d60 <amigo_verify+0x100>
   16d5c:	c1 e0       	ldi	r28, 0x01	; 1
   16d5e:	d0 e0       	ldi	r29, 0x00	; 0
   16d60:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   16d64:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   16d68:	81 81       	ldd	r24, Z+1	; 0x01
   16d6a:	90 e0       	ldi	r25, 0x00	; 0
   16d6c:	0e 94 a0 87 	call	0x10f40	; 0x10f40 <gpib_enable_PPR>
   16d70:	ce 01       	movw	r24, r28
   16d72:	ad b7       	in	r26, 0x3d	; 61
   16d74:	be b7       	in	r27, 0x3e	; 62
   16d76:	19 96       	adiw	r26, 0x09	; 9
   16d78:	0f b6       	in	r0, 0x3f	; 63
   16d7a:	f8 94       	cli
   16d7c:	be bf       	out	0x3e, r27	; 62
   16d7e:	0f be       	out	0x3f, r0	; 63
   16d80:	ad bf       	out	0x3d, r26	; 61
   16d82:	df 91       	pop	r29
   16d84:	cf 91       	pop	r28
   16d86:	1f 91       	pop	r17
   16d88:	0f 91       	pop	r16
   16d8a:	ff 90       	pop	r15
   16d8c:	ef 90       	pop	r14
   16d8e:	bf 90       	pop	r11
   16d90:	af 90       	pop	r10
   16d92:	9f 90       	pop	r9
   16d94:	8f 90       	pop	r8
   16d96:	08 95       	ret

00016d98 <amigo_format>:
   16d98:	ef 92       	push	r14
   16d9a:	ff 92       	push	r15
   16d9c:	0f 93       	push	r16
   16d9e:	1f 93       	push	r17
   16da0:	cf 93       	push	r28
   16da2:	df 93       	push	r29
   16da4:	00 d0       	rcall	.+0      	; 0x16da6 <amigo_format+0xe>
   16da6:	1f 92       	push	r1
   16da8:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   16dac:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   16db0:	15 82       	std	Z+5, r1	; 0x05
   16db2:	14 82       	std	Z+4, r1	; 0x04
   16db4:	13 82       	std	Z+3, r1	; 0x03
   16db6:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   16dba:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   16dbe:	46 81       	ldd	r20, Z+6	; 0x06
   16dc0:	57 81       	ldd	r21, Z+7	; 0x07
   16dc2:	68 2f       	mov	r22, r24
   16dc4:	70 e0       	ldi	r23, 0x00	; 0
   16dc6:	82 e8       	ldi	r24, 0x82	; 130
   16dc8:	9c e1       	ldi	r25, 0x1C	; 28
   16dca:	0e 94 e9 e9 	call	0x1d3d2	; 0x1d3d2 <memset>
   16dce:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16dd2:	85 ff       	sbrs	r24, 5
   16dd4:	0a c0       	rjmp	.+20     	; 0x16dea <amigo_format+0x52>
   16dd6:	84 ea       	ldi	r24, 0xA4	; 164
   16dd8:	9f e2       	ldi	r25, 0x2F	; 47
   16dda:	a0 e0       	ldi	r26, 0x00	; 0
   16ddc:	ed b7       	in	r30, 0x3d	; 61
   16dde:	fe b7       	in	r31, 0x3e	; 62
   16de0:	81 83       	std	Z+1, r24	; 0x01
   16de2:	92 83       	std	Z+2, r25	; 0x02
   16de4:	a3 83       	std	Z+3, r26	; 0x03
   16de6:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   16dea:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16dee:	86 fd       	sbrc	r24, 6
   16df0:	0e 94 de 86 	call	0x10dbc	; 0x10dbc <gpib_timer_elapsed_begin>
   16df4:	64 ec       	ldi	r22, 0xC4	; 196
   16df6:	74 e1       	ldi	r23, 0x14	; 20
   16df8:	80 91 01 19 	lds	r24, 0x1901	; 0x801901 <AMIGOs>
   16dfc:	90 91 02 19 	lds	r25, 0x1902	; 0x801902 <AMIGOs+0x1>
   16e00:	fc dc       	rcall	.-1544   	; 0x167fa <amigo_chs_to_logical>
   16e02:	ab 01       	movw	r20, r22
   16e04:	bc 01       	movw	r22, r24
   16e06:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   16e0a:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   16e0e:	e0 90 01 19 	lds	r14, 0x1901	; 0x801901 <AMIGOs>
   16e12:	f0 90 02 19 	lds	r15, 0x1902	; 0x801902 <AMIGOs+0x1>
   16e16:	87 e0       	ldi	r24, 0x07	; 7
   16e18:	e8 0e       	add	r14, r24
   16e1a:	f1 1c       	adc	r15, r1
   16e1c:	06 81       	ldd	r16, Z+6	; 0x06
   16e1e:	17 81       	ldd	r17, Z+7	; 0x07
   16e20:	22 e8       	ldi	r18, 0x82	; 130
   16e22:	3c e1       	ldi	r19, 0x1C	; 28
   16e24:	82 81       	ldd	r24, Z+2	; 0x02
   16e26:	93 81       	ldd	r25, Z+3	; 0x03
   16e28:	0e 94 87 86 	call	0x10d0e	; 0x10d0e <dbf_open_write>
   16e2c:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   16e30:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   16e34:	26 81       	ldd	r18, Z+6	; 0x06
   16e36:	37 81       	ldd	r19, Z+7	; 0x07
   16e38:	82 17       	cp	r24, r18
   16e3a:	93 07       	cpc	r25, r19
   16e3c:	71 f0       	breq	.+28     	; 0x16e5a <amigo_format+0xc2>
   16e3e:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   16e42:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   16e46:	87 81       	ldd	r24, Z+7	; 0x07
   16e48:	90 85       	ldd	r25, Z+8	; 0x08
   16e4a:	82 60       	ori	r24, 0x02	; 2
   16e4c:	90 87       	std	Z+8, r25	; 0x08
   16e4e:	87 83       	std	Z+7, r24	; 0x07
   16e50:	81 e0       	ldi	r24, 0x01	; 1
   16e52:	86 83       	std	Z+6, r24	; 0x06
   16e54:	c1 e0       	ldi	r28, 0x01	; 1
   16e56:	d0 e0       	ldi	r29, 0x00	; 0
   16e58:	0f c0       	rjmp	.+30     	; 0x16e78 <amigo_format+0xe0>
   16e5a:	80 e0       	ldi	r24, 0x00	; 0
   16e5c:	90 e0       	ldi	r25, 0x00	; 0
   16e5e:	ac de       	rcall	.-680    	; 0x16bb8 <amigo_increment>
   16e60:	89 2b       	or	r24, r25
   16e62:	41 f2       	breq	.-112    	; 0x16df4 <amigo_format+0x5c>
   16e64:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   16e68:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   16e6c:	15 82       	std	Z+5, r1	; 0x05
   16e6e:	14 82       	std	Z+4, r1	; 0x04
   16e70:	13 82       	std	Z+3, r1	; 0x03
   16e72:	16 82       	std	Z+6, r1	; 0x06
   16e74:	c0 e0       	ldi	r28, 0x00	; 0
   16e76:	d0 e0       	ldi	r29, 0x00	; 0
   16e78:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16e7c:	86 ff       	sbrs	r24, 6
   16e7e:	04 c0       	rjmp	.+8      	; 0x16e88 <amigo_format+0xf0>
   16e80:	84 ec       	ldi	r24, 0xC4	; 196
   16e82:	94 e1       	ldi	r25, 0x14	; 20
   16e84:	0e 94 f0 86 	call	0x10de0	; 0x10de0 <gpib_timer_elapsed_end>
   16e88:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16e8c:	85 ff       	sbrs	r24, 5
   16e8e:	0a c0       	rjmp	.+20     	; 0x16ea4 <amigo_format+0x10c>
   16e90:	8f e8       	ldi	r24, 0x8F	; 143
   16e92:	9f e2       	ldi	r25, 0x2F	; 47
   16e94:	a0 e0       	ldi	r26, 0x00	; 0
   16e96:	ed b7       	in	r30, 0x3d	; 61
   16e98:	fe b7       	in	r31, 0x3e	; 62
   16e9a:	81 83       	std	Z+1, r24	; 0x01
   16e9c:	92 83       	std	Z+2, r25	; 0x02
   16e9e:	a3 83       	std	Z+3, r26	; 0x03
   16ea0:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   16ea4:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   16ea8:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   16eac:	81 81       	ldd	r24, Z+1	; 0x01
   16eae:	90 e0       	ldi	r25, 0x00	; 0
   16eb0:	0e 94 a0 87 	call	0x10f40	; 0x10f40 <gpib_enable_PPR>
   16eb4:	ce 01       	movw	r24, r28
   16eb6:	cd b7       	in	r28, 0x3d	; 61
   16eb8:	de b7       	in	r29, 0x3e	; 62
   16eba:	23 96       	adiw	r28, 0x03	; 3
   16ebc:	e6 e0       	ldi	r30, 0x06	; 6
   16ebe:	0c 94 41 e5 	jmp	0x1ca82	; 0x1ca82 <__epilogue_restores__+0x18>

00016ec2 <amigo_buffered_read>:
   16ec2:	8f 92       	push	r8
   16ec4:	9f 92       	push	r9
   16ec6:	af 92       	push	r10
   16ec8:	bf 92       	push	r11
   16eca:	ef 92       	push	r14
   16ecc:	ff 92       	push	r15
   16ece:	0f 93       	push	r16
   16ed0:	1f 93       	push	r17
   16ed2:	cf 93       	push	r28
   16ed4:	df 93       	push	r29
   16ed6:	00 d0       	rcall	.+0      	; 0x16ed8 <amigo_buffered_read+0x16>
   16ed8:	00 d0       	rcall	.+0      	; 0x16eda <amigo_buffered_read+0x18>
   16eda:	1f 92       	push	r1
   16edc:	cd b7       	in	r28, 0x3d	; 61
   16ede:	de b7       	in	r29, 0x3e	; 62
   16ee0:	6b ec       	ldi	r22, 0xCB	; 203
   16ee2:	74 e1       	ldi	r23, 0x14	; 20
   16ee4:	80 91 01 19 	lds	r24, 0x1901	; 0x801901 <AMIGOs>
   16ee8:	90 91 02 19 	lds	r25, 0x1902	; 0x801902 <AMIGOs+0x1>
   16eec:	86 dc       	rcall	.-1780   	; 0x167fa <amigo_chs_to_logical>
   16eee:	4b 01       	movw	r8, r22
   16ef0:	5c 01       	movw	r10, r24
   16ef2:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16ef6:	86 fd       	sbrc	r24, 6
   16ef8:	0e 94 de 86 	call	0x10dbc	; 0x10dbc <gpib_timer_elapsed_begin>
   16efc:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   16f00:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   16f04:	e0 90 01 19 	lds	r14, 0x1901	; 0x801901 <AMIGOs>
   16f08:	f0 90 02 19 	lds	r15, 0x1902	; 0x801902 <AMIGOs+0x1>
   16f0c:	87 e0       	ldi	r24, 0x07	; 7
   16f0e:	e8 0e       	add	r14, r24
   16f10:	f1 1c       	adc	r15, r1
   16f12:	06 81       	ldd	r16, Z+6	; 0x06
   16f14:	17 81       	ldd	r17, Z+7	; 0x07
   16f16:	22 e8       	ldi	r18, 0x82	; 130
   16f18:	3c e1       	ldi	r19, 0x1C	; 28
   16f1a:	b5 01       	movw	r22, r10
   16f1c:	a4 01       	movw	r20, r8
   16f1e:	82 81       	ldd	r24, Z+2	; 0x02
   16f20:	93 81       	ldd	r25, Z+3	; 0x03
   16f22:	0e 94 30 86 	call	0x10c60	; 0x10c60 <dbf_open_read>
   16f26:	7c 01       	movw	r14, r24
   16f28:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16f2c:	86 ff       	sbrs	r24, 6
   16f2e:	04 c0       	rjmp	.+8      	; 0x16f38 <amigo_buffered_read+0x76>
   16f30:	8d eb       	ldi	r24, 0xBD	; 189
   16f32:	9f e0       	ldi	r25, 0x0F	; 15
   16f34:	0e 94 f0 86 	call	0x10de0	; 0x10de0 <gpib_timer_elapsed_end>
   16f38:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   16f3c:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   16f40:	86 81       	ldd	r24, Z+6	; 0x06
   16f42:	97 81       	ldd	r25, Z+7	; 0x07
   16f44:	e8 16       	cp	r14, r24
   16f46:	f9 06       	cpc	r15, r25
   16f48:	39 f0       	breq	.+14     	; 0x16f58 <amigo_buffered_read+0x96>
   16f4a:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   16f4e:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   16f52:	81 e0       	ldi	r24, 0x01	; 1
   16f54:	86 83       	std	Z+6, r24	; 0x06
   16f56:	6c c0       	rjmp	.+216    	; 0x17030 <amigo_buffered_read+0x16e>
   16f58:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16f5c:	87 fd       	sbrc	r24, 7
   16f5e:	0e 94 de 86 	call	0x10dbc	; 0x10dbc <gpib_timer_elapsed_begin>
   16f62:	80 e0       	ldi	r24, 0x00	; 0
   16f64:	91 e0       	ldi	r25, 0x01	; 1
   16f66:	9d 83       	std	Y+5, r25	; 0x05
   16f68:	8c 83       	std	Y+4, r24	; 0x04
   16f6a:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   16f6e:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   16f72:	66 81       	ldd	r22, Z+6	; 0x06
   16f74:	77 81       	ldd	r23, Z+7	; 0x07
   16f76:	ae 01       	movw	r20, r28
   16f78:	4c 5f       	subi	r20, 0xFC	; 252
   16f7a:	5f 4f       	sbci	r21, 0xFF	; 255
   16f7c:	82 e8       	ldi	r24, 0x82	; 130
   16f7e:	9c e1       	ldi	r25, 0x1C	; 28
   16f80:	0e 94 fa 8c 	call	0x119f4	; 0x119f4 <gpib_write_str>
   16f84:	7c 01       	movw	r14, r24
   16f86:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16f8a:	87 ff       	sbrs	r24, 7
   16f8c:	04 c0       	rjmp	.+8      	; 0x16f96 <amigo_buffered_read+0xd4>
   16f8e:	89 ed       	ldi	r24, 0xD9	; 217
   16f90:	94 e1       	ldi	r25, 0x14	; 20
   16f92:	0e 94 f0 86 	call	0x10de0	; 0x10de0 <gpib_timer_elapsed_end>
   16f96:	8c 81       	ldd	r24, Y+4	; 0x04
   16f98:	9d 81       	ldd	r25, Y+5	; 0x05
   16f9a:	88 27       	eor	r24, r24
   16f9c:	90 7d       	andi	r25, 0xD0	; 208
   16f9e:	89 2b       	or	r24, r25
   16fa0:	49 f4       	brne	.+18     	; 0x16fb4 <amigo_buffered_read+0xf2>
   16fa2:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   16fa6:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   16faa:	86 81       	ldd	r24, Z+6	; 0x06
   16fac:	97 81       	ldd	r25, Z+7	; 0x07
   16fae:	e8 16       	cp	r14, r24
   16fb0:	f9 06       	cpc	r15, r25
   16fb2:	31 f1       	breq	.+76     	; 0x17000 <amigo_buffered_read+0x13e>
   16fb4:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   16fb8:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   16fbc:	81 e0       	ldi	r24, 0x01	; 1
   16fbe:	86 83       	std	Z+6, r24	; 0x06
   16fc0:	87 81       	ldd	r24, Z+7	; 0x07
   16fc2:	90 85       	ldd	r25, Z+8	; 0x08
   16fc4:	80 62       	ori	r24, 0x20	; 32
   16fc6:	90 87       	std	Z+8, r25	; 0x08
   16fc8:	87 83       	std	Z+7, r24	; 0x07
   16fca:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16fce:	80 ff       	sbrs	r24, 0
   16fd0:	0a c0       	rjmp	.+20     	; 0x16fe6 <amigo_buffered_read+0x124>
   16fd2:	85 e7       	ldi	r24, 0x75	; 117
   16fd4:	9f e2       	ldi	r25, 0x2F	; 47
   16fd6:	a0 e0       	ldi	r26, 0x00	; 0
   16fd8:	ed b7       	in	r30, 0x3d	; 61
   16fda:	fe b7       	in	r31, 0x3e	; 62
   16fdc:	81 83       	std	Z+1, r24	; 0x01
   16fde:	92 83       	std	Z+2, r25	; 0x02
   16fe0:	a3 83       	std	Z+3, r26	; 0x03
   16fe2:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   16fe6:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   16fea:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   16fee:	81 81       	ldd	r24, Z+1	; 0x01
   16ff0:	90 e0       	ldi	r25, 0x00	; 0
   16ff2:	0e 94 a0 87 	call	0x10f40	; 0x10f40 <gpib_enable_PPR>
   16ff6:	8c 81       	ldd	r24, Y+4	; 0x04
   16ff8:	9d 81       	ldd	r25, Y+5	; 0x05
   16ffa:	88 27       	eor	r24, r24
   16ffc:	90 7d       	andi	r25, 0xD0	; 208
   16ffe:	1a c0       	rjmp	.+52     	; 0x17034 <amigo_buffered_read+0x172>
   17000:	8b ec       	ldi	r24, 0xCB	; 203
   17002:	94 e1       	ldi	r25, 0x14	; 20
   17004:	d9 dd       	rcall	.-1102   	; 0x16bb8 <amigo_increment>
   17006:	89 2b       	or	r24, r25
   17008:	59 f0       	breq	.+22     	; 0x17020 <amigo_buffered_read+0x15e>
   1700a:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   1700e:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   17012:	81 e0       	ldi	r24, 0x01	; 1
   17014:	86 83       	std	Z+6, r24	; 0x06
   17016:	87 81       	ldd	r24, Z+7	; 0x07
   17018:	90 85       	ldd	r25, Z+8	; 0x08
   1701a:	84 60       	ori	r24, 0x04	; 4
   1701c:	90 87       	std	Z+8, r25	; 0x08
   1701e:	87 83       	std	Z+7, r24	; 0x07
   17020:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   17024:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   17028:	81 81       	ldd	r24, Z+1	; 0x01
   1702a:	90 e0       	ldi	r25, 0x00	; 0
   1702c:	0e 94 a0 87 	call	0x10f40	; 0x10f40 <gpib_enable_PPR>
   17030:	80 e0       	ldi	r24, 0x00	; 0
   17032:	90 e0       	ldi	r25, 0x00	; 0
   17034:	0f 90       	pop	r0
   17036:	0f 90       	pop	r0
   17038:	0f 90       	pop	r0
   1703a:	0f 90       	pop	r0
   1703c:	0f 90       	pop	r0
   1703e:	df 91       	pop	r29
   17040:	cf 91       	pop	r28
   17042:	1f 91       	pop	r17
   17044:	0f 91       	pop	r16
   17046:	ff 90       	pop	r15
   17048:	ef 90       	pop	r14
   1704a:	bf 90       	pop	r11
   1704c:	af 90       	pop	r10
   1704e:	9f 90       	pop	r9
   17050:	8f 90       	pop	r8
   17052:	08 95       	ret

00017054 <amigo_buffered_write>:
   17054:	8f 92       	push	r8
   17056:	9f 92       	push	r9
   17058:	af 92       	push	r10
   1705a:	bf 92       	push	r11
   1705c:	ef 92       	push	r14
   1705e:	ff 92       	push	r15
   17060:	0f 93       	push	r16
   17062:	1f 93       	push	r17
   17064:	cf 93       	push	r28
   17066:	df 93       	push	r29
   17068:	00 d0       	rcall	.+0      	; 0x1706a <amigo_buffered_write+0x16>
   1706a:	00 d0       	rcall	.+0      	; 0x1706c <amigo_buffered_write+0x18>
   1706c:	1f 92       	push	r1
   1706e:	cd b7       	in	r28, 0x3d	; 61
   17070:	de b7       	in	r29, 0x3e	; 62
   17072:	64 ee       	ldi	r22, 0xE4	; 228
   17074:	74 e1       	ldi	r23, 0x14	; 20
   17076:	80 91 01 19 	lds	r24, 0x1901	; 0x801901 <AMIGOs>
   1707a:	90 91 02 19 	lds	r25, 0x1902	; 0x801902 <AMIGOs+0x1>
   1707e:	bd db       	rcall	.-2182   	; 0x167fa <amigo_chs_to_logical>
   17080:	4b 01       	movw	r8, r22
   17082:	5c 01       	movw	r10, r24
   17084:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17088:	87 fd       	sbrc	r24, 7
   1708a:	0e 94 de 86 	call	0x10dbc	; 0x10dbc <gpib_timer_elapsed_begin>
   1708e:	1d 82       	std	Y+5, r1	; 0x05
   17090:	1c 82       	std	Y+4, r1	; 0x04
   17092:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   17096:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   1709a:	66 81       	ldd	r22, Z+6	; 0x06
   1709c:	77 81       	ldd	r23, Z+7	; 0x07
   1709e:	ae 01       	movw	r20, r28
   170a0:	4c 5f       	subi	r20, 0xFC	; 252
   170a2:	5f 4f       	sbci	r21, 0xFF	; 255
   170a4:	82 e8       	ldi	r24, 0x82	; 130
   170a6:	9c e1       	ldi	r25, 0x1C	; 28
   170a8:	0e 94 58 8c 	call	0x118b0	; 0x118b0 <gpib_read_str>
   170ac:	7c 01       	movw	r14, r24
   170ae:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   170b2:	87 ff       	sbrs	r24, 7
   170b4:	04 c0       	rjmp	.+8      	; 0x170be <amigo_buffered_write+0x6a>
   170b6:	83 ef       	ldi	r24, 0xF3	; 243
   170b8:	94 e1       	ldi	r25, 0x14	; 20
   170ba:	0e 94 f0 86 	call	0x10de0	; 0x10de0 <gpib_timer_elapsed_end>
   170be:	8c 81       	ldd	r24, Y+4	; 0x04
   170c0:	9d 81       	ldd	r25, Y+5	; 0x05
   170c2:	88 27       	eor	r24, r24
   170c4:	90 7d       	andi	r25, 0xD0	; 208
   170c6:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   170ca:	89 2b       	or	r24, r25
   170cc:	49 f4       	brne	.+18     	; 0x170e0 <amigo_buffered_write+0x8c>
   170ce:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   170d2:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   170d6:	86 81       	ldd	r24, Z+6	; 0x06
   170d8:	97 81       	ldd	r25, Z+7	; 0x07
   170da:	e8 16       	cp	r14, r24
   170dc:	f9 06       	cpc	r15, r25
   170de:	c1 f0       	breq	.+48     	; 0x17110 <amigo_buffered_write+0xbc>
   170e0:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   170e4:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   170e8:	81 e0       	ldi	r24, 0x01	; 1
   170ea:	86 83       	std	Z+6, r24	; 0x06
   170ec:	87 81       	ldd	r24, Z+7	; 0x07
   170ee:	90 85       	ldd	r25, Z+8	; 0x08
   170f0:	80 62       	ori	r24, 0x20	; 32
   170f2:	90 87       	std	Z+8, r25	; 0x08
   170f4:	87 83       	std	Z+7, r24	; 0x07
   170f6:	20 ff       	sbrs	r18, 0
   170f8:	4e c0       	rjmp	.+156    	; 0x17196 <amigo_buffered_write+0x142>
   170fa:	86 e5       	ldi	r24, 0x56	; 86
   170fc:	9f e2       	ldi	r25, 0x2F	; 47
   170fe:	a0 e0       	ldi	r26, 0x00	; 0
   17100:	ed b7       	in	r30, 0x3d	; 61
   17102:	fe b7       	in	r31, 0x3e	; 62
   17104:	81 83       	std	Z+1, r24	; 0x01
   17106:	92 83       	std	Z+2, r25	; 0x02
   17108:	a3 83       	std	Z+3, r26	; 0x03
   1710a:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   1710e:	43 c0       	rjmp	.+134    	; 0x17196 <amigo_buffered_write+0x142>
   17110:	26 fd       	sbrc	r18, 6
   17112:	0e 94 de 86 	call	0x10dbc	; 0x10dbc <gpib_timer_elapsed_begin>
   17116:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   1711a:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   1711e:	e0 90 01 19 	lds	r14, 0x1901	; 0x801901 <AMIGOs>
   17122:	f0 90 02 19 	lds	r15, 0x1902	; 0x801902 <AMIGOs+0x1>
   17126:	87 e0       	ldi	r24, 0x07	; 7
   17128:	e8 0e       	add	r14, r24
   1712a:	f1 1c       	adc	r15, r1
   1712c:	06 81       	ldd	r16, Z+6	; 0x06
   1712e:	17 81       	ldd	r17, Z+7	; 0x07
   17130:	22 e8       	ldi	r18, 0x82	; 130
   17132:	3c e1       	ldi	r19, 0x1C	; 28
   17134:	b5 01       	movw	r22, r10
   17136:	a4 01       	movw	r20, r8
   17138:	82 81       	ldd	r24, Z+2	; 0x02
   1713a:	93 81       	ldd	r25, Z+3	; 0x03
   1713c:	0e 94 87 86 	call	0x10d0e	; 0x10d0e <dbf_open_write>
   17140:	7c 01       	movw	r14, r24
   17142:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17146:	86 ff       	sbrs	r24, 6
   17148:	04 c0       	rjmp	.+8      	; 0x17152 <amigo_buffered_write+0xfe>
   1714a:	82 eb       	ldi	r24, 0xB2	; 178
   1714c:	9f e0       	ldi	r25, 0x0F	; 15
   1714e:	0e 94 f0 86 	call	0x10de0	; 0x10de0 <gpib_timer_elapsed_end>
   17152:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   17156:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   1715a:	86 81       	ldd	r24, Z+6	; 0x06
   1715c:	97 81       	ldd	r25, Z+7	; 0x07
   1715e:	e8 16       	cp	r14, r24
   17160:	f9 06       	cpc	r15, r25
   17162:	49 f0       	breq	.+18     	; 0x17176 <amigo_buffered_write+0x122>
   17164:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   17168:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   1716c:	81 e0       	ldi	r24, 0x01	; 1
   1716e:	86 83       	std	Z+6, r24	; 0x06
   17170:	80 e0       	ldi	r24, 0x00	; 0
   17172:	90 e0       	ldi	r25, 0x00	; 0
   17174:	1c c0       	rjmp	.+56     	; 0x171ae <amigo_buffered_write+0x15a>
   17176:	84 ee       	ldi	r24, 0xE4	; 228
   17178:	94 e1       	ldi	r25, 0x14	; 20
   1717a:	1e dd       	rcall	.-1476   	; 0x16bb8 <amigo_increment>
   1717c:	89 2b       	or	r24, r25
   1717e:	59 f0       	breq	.+22     	; 0x17196 <amigo_buffered_write+0x142>
   17180:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   17184:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   17188:	81 e0       	ldi	r24, 0x01	; 1
   1718a:	86 83       	std	Z+6, r24	; 0x06
   1718c:	87 81       	ldd	r24, Z+7	; 0x07
   1718e:	90 85       	ldd	r25, Z+8	; 0x08
   17190:	84 60       	ori	r24, 0x04	; 4
   17192:	90 87       	std	Z+8, r25	; 0x08
   17194:	87 83       	std	Z+7, r24	; 0x07
   17196:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   1719a:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   1719e:	81 81       	ldd	r24, Z+1	; 0x01
   171a0:	90 e0       	ldi	r25, 0x00	; 0
   171a2:	0e 94 a0 87 	call	0x10f40	; 0x10f40 <gpib_enable_PPR>
   171a6:	8c 81       	ldd	r24, Y+4	; 0x04
   171a8:	9d 81       	ldd	r25, Y+5	; 0x05
   171aa:	88 27       	eor	r24, r24
   171ac:	90 7d       	andi	r25, 0xD0	; 208
   171ae:	0f 90       	pop	r0
   171b0:	0f 90       	pop	r0
   171b2:	0f 90       	pop	r0
   171b4:	0f 90       	pop	r0
   171b6:	0f 90       	pop	r0
   171b8:	df 91       	pop	r29
   171ba:	cf 91       	pop	r28
   171bc:	1f 91       	pop	r17
   171be:	0f 91       	pop	r16
   171c0:	ff 90       	pop	r15
   171c2:	ef 90       	pop	r14
   171c4:	bf 90       	pop	r11
   171c6:	af 90       	pop	r10
   171c8:	9f 90       	pop	r9
   171ca:	8f 90       	pop	r8
   171cc:	08 95       	ret

000171ce <amigo_cmd_dsj>:
   171ce:	a8 e0       	ldi	r26, 0x08	; 8
   171d0:	b0 e0       	ldi	r27, 0x00	; 0
   171d2:	ed ee       	ldi	r30, 0xED	; 237
   171d4:	f8 eb       	ldi	r31, 0xB8	; 184
   171d6:	0c 94 29 e5 	jmp	0x1ca52	; 0x1ca52 <__prologue_saves__+0x20>
   171da:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   171de:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   171e2:	86 81       	ldd	r24, Z+6	; 0x06
   171e4:	88 87       	std	Y+8, r24	; 0x08
   171e6:	80 e0       	ldi	r24, 0x00	; 0
   171e8:	91 e0       	ldi	r25, 0x01	; 1
   171ea:	9f 83       	std	Y+7, r25	; 0x07
   171ec:	8e 83       	std	Y+6, r24	; 0x06
   171ee:	ae 01       	movw	r20, r28
   171f0:	4a 5f       	subi	r20, 0xFA	; 250
   171f2:	5f 4f       	sbci	r21, 0xFF	; 255
   171f4:	61 e0       	ldi	r22, 0x01	; 1
   171f6:	70 e0       	ldi	r23, 0x00	; 0
   171f8:	ce 01       	movw	r24, r28
   171fa:	08 96       	adiw	r24, 0x08	; 8
   171fc:	0e 94 fa 8c 	call	0x119f4	; 0x119f4 <gpib_write_str>
   17200:	2e 81       	ldd	r18, Y+6	; 0x06
   17202:	3f 81       	ldd	r19, Y+7	; 0x07
   17204:	22 27       	eor	r18, r18
   17206:	30 7d       	andi	r19, 0xD0	; 208
   17208:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   1720c:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   17210:	23 2b       	or	r18, r19
   17212:	29 f0       	breq	.+10     	; 0x1721e <amigo_cmd_dsj+0x50>
   17214:	27 81       	ldd	r18, Z+7	; 0x07
   17216:	30 85       	ldd	r19, Z+8	; 0x08
   17218:	20 62       	ori	r18, 0x20	; 32
   1721a:	30 87       	std	Z+8, r19	; 0x08
   1721c:	27 83       	std	Z+7, r18	; 0x07
   1721e:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   17222:	01 97       	sbiw	r24, 0x01	; 1
   17224:	c1 f0       	breq	.+48     	; 0x17256 <amigo_cmd_dsj+0x88>
   17226:	81 e0       	ldi	r24, 0x01	; 1
   17228:	86 83       	std	Z+6, r24	; 0x06
   1722a:	87 81       	ldd	r24, Z+7	; 0x07
   1722c:	90 85       	ldd	r25, Z+8	; 0x08
   1722e:	80 62       	ori	r24, 0x20	; 32
   17230:	90 87       	std	Z+8, r25	; 0x08
   17232:	87 83       	std	Z+7, r24	; 0x07
   17234:	20 ff       	sbrs	r18, 0
   17236:	0a c0       	rjmp	.+20     	; 0x1724c <amigo_cmd_dsj+0x7e>
   17238:	8c e3       	ldi	r24, 0x3C	; 60
   1723a:	9f e2       	ldi	r25, 0x2F	; 47
   1723c:	a0 e0       	ldi	r26, 0x00	; 0
   1723e:	ed b7       	in	r30, 0x3d	; 61
   17240:	fe b7       	in	r31, 0x3e	; 62
   17242:	81 83       	std	Z+1, r24	; 0x01
   17244:	92 83       	std	Z+2, r25	; 0x02
   17246:	a3 83       	std	Z+3, r26	; 0x03
   17248:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   1724c:	8e 81       	ldd	r24, Y+6	; 0x06
   1724e:	9f 81       	ldd	r25, Y+7	; 0x07
   17250:	88 27       	eor	r24, r24
   17252:	90 7d       	andi	r25, 0xD0	; 208
   17254:	19 c0       	rjmp	.+50     	; 0x17288 <amigo_cmd_dsj+0xba>
   17256:	25 ff       	sbrs	r18, 5
   17258:	0e c0       	rjmp	.+28     	; 0x17276 <amigo_cmd_dsj+0xa8>
   1725a:	86 81       	ldd	r24, Z+6	; 0x06
   1725c:	90 e0       	ldi	r25, 0x00	; 0
   1725e:	ed b7       	in	r30, 0x3d	; 61
   17260:	fe b7       	in	r31, 0x3e	; 62
   17262:	95 83       	std	Z+5, r25	; 0x05
   17264:	84 83       	std	Z+4, r24	; 0x04
   17266:	8f e2       	ldi	r24, 0x2F	; 47
   17268:	9f e2       	ldi	r25, 0x2F	; 47
   1726a:	a0 e0       	ldi	r26, 0x00	; 0
   1726c:	81 83       	std	Z+1, r24	; 0x01
   1726e:	92 83       	std	Z+2, r25	; 0x02
   17270:	a3 83       	std	Z+3, r26	; 0x03
   17272:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   17276:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   1727a:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   1727e:	16 82       	std	Z+6, r1	; 0x06
   17280:	10 86       	std	Z+8, r1	; 0x08
   17282:	17 82       	std	Z+7, r1	; 0x07
   17284:	80 e0       	ldi	r24, 0x00	; 0
   17286:	90 e0       	ldi	r25, 0x00	; 0
   17288:	28 96       	adiw	r28, 0x08	; 8
   1728a:	e2 e0       	ldi	r30, 0x02	; 2
   1728c:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__epilogue_restores__+0x20>

00017290 <amigo_cmd_clear>:
   17290:	00 d0       	rcall	.+0      	; 0x17292 <amigo_cmd_clear+0x2>
   17292:	1f 92       	push	r1
   17294:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17298:	85 ff       	sbrs	r24, 5
   1729a:	0a c0       	rjmp	.+20     	; 0x172b0 <amigo_cmd_clear+0x20>
   1729c:	80 e2       	ldi	r24, 0x20	; 32
   1729e:	9f e2       	ldi	r25, 0x2F	; 47
   172a0:	a0 e0       	ldi	r26, 0x00	; 0
   172a2:	ed b7       	in	r30, 0x3d	; 61
   172a4:	fe b7       	in	r31, 0x3e	; 62
   172a6:	81 83       	std	Z+1, r24	; 0x01
   172a8:	92 83       	std	Z+2, r25	; 0x02
   172aa:	a3 83       	std	Z+3, r26	; 0x03
   172ac:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   172b0:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   172b4:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   172b8:	15 82       	std	Z+5, r1	; 0x05
   172ba:	14 82       	std	Z+4, r1	; 0x04
   172bc:	13 82       	std	Z+3, r1	; 0x03
   172be:	16 82       	std	Z+6, r1	; 0x06
   172c0:	10 86       	std	Z+8, r1	; 0x08
   172c2:	17 82       	std	Z+7, r1	; 0x07
   172c4:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   172c8:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   172cc:	81 81       	ldd	r24, Z+1	; 0x01
   172ce:	90 e0       	ldi	r25, 0x00	; 0
   172d0:	0e 94 a0 87 	call	0x10f40	; 0x10f40 <gpib_enable_PPR>
   172d4:	80 e0       	ldi	r24, 0x00	; 0
   172d6:	90 e0       	ldi	r25, 0x00	; 0
   172d8:	0f 90       	pop	r0
   172da:	0f 90       	pop	r0
   172dc:	0f 90       	pop	r0
   172de:	08 95       	ret

000172e0 <amigo_todo_op>:
/// @param[in] opcode: GPIB data byte OP Code
/// @param[in] len: Length of GOIB data returned
/// @return  0

int amigo_todo_op(uint8_t secondary, uint8_t opcode, int len)
{
   172e0:	af e0       	ldi	r26, 0x0F	; 15
   172e2:	b0 e0       	ldi	r27, 0x00	; 0
   172e4:	e6 e7       	ldi	r30, 0x76	; 118
   172e6:	f9 eb       	ldi	r31, 0xB9	; 185
   172e8:	0c 94 25 e5 	jmp	0x1ca4a	; 0x1ca4a <__prologue_saves__+0x18>
   172ec:	c8 2f       	mov	r28, r24
   172ee:	e6 2e       	mov	r14, r22
   172f0:	8a 01       	movw	r16, r20
    if(AMIGO_is_MLA(listening))
   172f2:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   172f6:	90 e0       	ldi	r25, 0x00	; 0
   172f8:	0e 94 e9 8d 	call	0x11bd2	; 0x11bd2 <AMIGO_is_MLA>
   172fc:	20 91 86 1e 	lds	r18, 0x1E86	; 0x801e86 <talking>
   17300:	f1 2c       	mov	r15, r1
   17302:	d0 e0       	ldi	r29, 0x00	; 0
   17304:	89 2b       	or	r24, r25
   17306:	f1 f0       	breq	.+60     	; 0x17344 <amigo_todo_op+0x64>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   17308:	82 2f       	mov	r24, r18
   1730a:	90 e0       	ldi	r25, 0x00	; 0
   1730c:	ed b7       	in	r30, 0x3d	; 61
   1730e:	fe b7       	in	r31, 0x3e	; 62
   17310:	97 87       	std	Z+15, r25	; 0x0f
   17312:	86 87       	std	Z+14, r24	; 0x0e
   17314:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   17318:	90 e0       	ldi	r25, 0x00	; 0
   1731a:	95 87       	std	Z+13, r25	; 0x0d
   1731c:	84 87       	std	Z+12, r24	; 0x0c
   1731e:	13 87       	std	Z+11, r17	; 0x0b
   17320:	02 87       	std	Z+10, r16	; 0x0a
   17322:	f1 86       	std	Z+9, r15	; 0x09
   17324:	e0 86       	std	Z+8, r14	; 0x08
   17326:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   1732a:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   1732e:	80 81       	ld	r24, Z
   17330:	90 e0       	ldi	r25, 0x00	; 0
   17332:	ed b7       	in	r30, 0x3d	; 61
   17334:	fe b7       	in	r31, 0x3e	; 62
   17336:	97 83       	std	Z+7, r25	; 0x07
   17338:	86 83       	std	Z+6, r24	; 0x06
   1733a:	d5 83       	std	Z+5, r29	; 0x05
   1733c:	c4 83       	std	Z+4, r28	; 0x04
   1733e:	89 eb       	ldi	r24, 0xB9	; 185
   17340:	9e e2       	ldi	r25, 0x2E	; 46
   17342:	51 c0       	rjmp	.+162    	; 0x173e6 <amigo_todo_op+0x106>
            secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(AMIGO_is_MTA(talking))
   17344:	82 2f       	mov	r24, r18
   17346:	90 e0       	ldi	r25, 0x00	; 0
   17348:	0e 94 f8 8d 	call	0x11bf0	; 0x11bf0 <AMIGO_is_MTA>
   1734c:	20 91 88 1e 	lds	r18, 0x1E88	; 0x801e88 <listening>
   17350:	30 91 86 1e 	lds	r19, 0x1E86	; 0x801e86 <talking>
   17354:	a0 91 01 19 	lds	r26, 0x1901	; 0x801901 <AMIGOs>
   17358:	b0 91 02 19 	lds	r27, 0x1902	; 0x801902 <AMIGOs+0x1>
   1735c:	89 2b       	or	r24, r25
   1735e:	b1 f0       	breq	.+44     	; 0x1738c <amigo_todo_op+0xac>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   17360:	83 2f       	mov	r24, r19
   17362:	90 e0       	ldi	r25, 0x00	; 0
   17364:	ed b7       	in	r30, 0x3d	; 61
   17366:	fe b7       	in	r31, 0x3e	; 62
   17368:	97 87       	std	Z+15, r25	; 0x0f
   1736a:	86 87       	std	Z+14, r24	; 0x0e
   1736c:	30 e0       	ldi	r19, 0x00	; 0
   1736e:	35 87       	std	Z+13, r19	; 0x0d
   17370:	24 87       	std	Z+12, r18	; 0x0c
   17372:	13 87       	std	Z+11, r17	; 0x0b
   17374:	02 87       	std	Z+10, r16	; 0x0a
   17376:	f1 86       	std	Z+9, r15	; 0x09
   17378:	e0 86       	std	Z+8, r14	; 0x08
   1737a:	8c 91       	ld	r24, X
   1737c:	90 e0       	ldi	r25, 0x00	; 0
   1737e:	97 83       	std	Z+7, r25	; 0x07
   17380:	86 83       	std	Z+6, r24	; 0x06
   17382:	d5 83       	std	Z+5, r29	; 0x05
   17384:	c4 83       	std	Z+4, r28	; 0x04
   17386:	82 e5       	ldi	r24, 0x52	; 82
   17388:	9e e2       	ldi	r25, 0x2E	; 46
   1738a:	2d c0       	rjmp	.+90     	; 0x173e6 <amigo_todo_op+0x106>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(talking == UNT)
   1738c:	3f 35       	cpi	r19, 0x5F	; 95
   1738e:	b1 f4       	brne	.+44     	; 0x173bc <amigo_todo_op+0xdc>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   17390:	8f e5       	ldi	r24, 0x5F	; 95
   17392:	90 e0       	ldi	r25, 0x00	; 0
   17394:	ed b7       	in	r30, 0x3d	; 61
   17396:	fe b7       	in	r31, 0x3e	; 62
   17398:	97 87       	std	Z+15, r25	; 0x0f
   1739a:	86 87       	std	Z+14, r24	; 0x0e
   1739c:	30 e0       	ldi	r19, 0x00	; 0
   1739e:	35 87       	std	Z+13, r19	; 0x0d
   173a0:	24 87       	std	Z+12, r18	; 0x0c
   173a2:	13 87       	std	Z+11, r17	; 0x0b
   173a4:	02 87       	std	Z+10, r16	; 0x0a
   173a6:	f1 86       	std	Z+9, r15	; 0x09
   173a8:	e0 86       	std	Z+8, r14	; 0x08
   173aa:	8c 91       	ld	r24, X
   173ac:	90 e0       	ldi	r25, 0x00	; 0
   173ae:	97 83       	std	Z+7, r25	; 0x07
   173b0:	86 83       	std	Z+6, r24	; 0x06
   173b2:	d5 83       	std	Z+5, r29	; 0x05
   173b4:	c4 83       	std	Z+4, r28	; 0x04
   173b6:	8b ee       	ldi	r24, 0xEB	; 235
   173b8:	9d e2       	ldi	r25, 0x2D	; 45
   173ba:	15 c0       	rjmp	.+42     	; 0x173e6 <amigo_todo_op+0x106>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else
        printf("[U Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   173bc:	83 2f       	mov	r24, r19
   173be:	90 e0       	ldi	r25, 0x00	; 0
   173c0:	ed b7       	in	r30, 0x3d	; 61
   173c2:	fe b7       	in	r31, 0x3e	; 62
   173c4:	97 87       	std	Z+15, r25	; 0x0f
   173c6:	86 87       	std	Z+14, r24	; 0x0e
   173c8:	30 e0       	ldi	r19, 0x00	; 0
   173ca:	35 87       	std	Z+13, r19	; 0x0d
   173cc:	24 87       	std	Z+12, r18	; 0x0c
   173ce:	13 87       	std	Z+11, r17	; 0x0b
   173d0:	02 87       	std	Z+10, r16	; 0x0a
   173d2:	f1 86       	std	Z+9, r15	; 0x09
   173d4:	e0 86       	std	Z+8, r14	; 0x08
   173d6:	8c 91       	ld	r24, X
   173d8:	90 e0       	ldi	r25, 0x00	; 0
   173da:	97 83       	std	Z+7, r25	; 0x07
   173dc:	86 83       	std	Z+6, r24	; 0x06
   173de:	d5 83       	std	Z+5, r29	; 0x05
   173e0:	c4 83       	std	Z+4, r28	; 0x04
   173e2:	86 e8       	ldi	r24, 0x86	; 134
   173e4:	9d e2       	ldi	r25, 0x2D	; 45
   173e6:	a0 e0       	ldi	r26, 0x00	; 0
   173e8:	81 83       	std	Z+1, r24	; 0x01
   173ea:	92 83       	std	Z+2, r25	; 0x02
   173ec:	a3 83       	std	Z+3, r26	; 0x03
   173ee:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
            secondary, AMIGOs->state, opcode, len, listening, talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   173f2:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   173f6:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   173fa:	81 81       	ldd	r24, Z+1	; 0x01
   173fc:	90 e0       	ldi	r25, 0x00	; 0
   173fe:	0e 94 a0 87 	call	0x10f40	; 0x10f40 <gpib_enable_PPR>
    return(0);
}
   17402:	80 e0       	ldi	r24, 0x00	; 0
   17404:	90 e0       	ldi	r25, 0x00	; 0
   17406:	cd b7       	in	r28, 0x3d	; 61
   17408:	de b7       	in	r29, 0x3e	; 62
   1740a:	2f 96       	adiw	r28, 0x0f	; 15
   1740c:	e6 e0       	ldi	r30, 0x06	; 6
   1740e:	0c 94 41 e5 	jmp	0x1ca82	; 0x1ca82 <__epilogue_restores__+0x18>

00017412 <amigo_todo>:
/// @param[in] secondary: GPIB seconday command
///
/// @return  0

int amigo_todo(uint8_t secondary)
{
   17412:	ab e0       	ldi	r26, 0x0B	; 11
   17414:	b0 e0       	ldi	r27, 0x00	; 0
   17416:	ef e0       	ldi	r30, 0x0F	; 15
   17418:	fa eb       	ldi	r31, 0xBA	; 186
   1741a:	0c 94 29 e5 	jmp	0x1ca52	; 0x1ca52 <__prologue_saves__+0x20>
   1741e:	c8 2f       	mov	r28, r24
    if(AMIGO_is_MLA(listening))
   17420:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   17424:	90 e0       	ldi	r25, 0x00	; 0
   17426:	0e 94 e9 8d 	call	0x11bd2	; 0x11bd2 <AMIGO_is_MLA>
   1742a:	20 91 86 1e 	lds	r18, 0x1E86	; 0x801e86 <talking>
   1742e:	d0 e0       	ldi	r29, 0x00	; 0
   17430:	89 2b       	or	r24, r25
   17432:	d1 f0       	breq	.+52     	; 0x17468 <amigo_todo+0x56>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   17434:	82 2f       	mov	r24, r18
   17436:	90 e0       	ldi	r25, 0x00	; 0
   17438:	ed b7       	in	r30, 0x3d	; 61
   1743a:	fe b7       	in	r31, 0x3e	; 62
   1743c:	93 87       	std	Z+11, r25	; 0x0b
   1743e:	82 87       	std	Z+10, r24	; 0x0a
   17440:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   17444:	90 e0       	ldi	r25, 0x00	; 0
   17446:	91 87       	std	Z+9, r25	; 0x09
   17448:	80 87       	std	Z+8, r24	; 0x08
   1744a:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   1744e:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   17452:	80 81       	ld	r24, Z
   17454:	90 e0       	ldi	r25, 0x00	; 0
   17456:	ed b7       	in	r30, 0x3d	; 61
   17458:	fe b7       	in	r31, 0x3e	; 62
   1745a:	97 83       	std	Z+7, r25	; 0x07
   1745c:	86 83       	std	Z+6, r24	; 0x06
   1745e:	d5 83       	std	Z+5, r29	; 0x05
   17460:	c4 83       	std	Z+4, r28	; 0x04
   17462:	86 e3       	ldi	r24, 0x36	; 54
   17464:	9d e2       	ldi	r25, 0x2D	; 45
   17466:	43 c0       	rjmp	.+134    	; 0x174ee <amigo_todo+0xdc>
            secondary,AMIGOs->state,listening,talking);
    else if(AMIGO_is_MTA(talking))
   17468:	82 2f       	mov	r24, r18
   1746a:	90 e0       	ldi	r25, 0x00	; 0
   1746c:	0e 94 f8 8d 	call	0x11bf0	; 0x11bf0 <AMIGO_is_MTA>
   17470:	20 91 88 1e 	lds	r18, 0x1E88	; 0x801e88 <listening>
   17474:	40 91 86 1e 	lds	r20, 0x1E86	; 0x801e86 <talking>
   17478:	a0 91 01 19 	lds	r26, 0x1901	; 0x801901 <AMIGOs>
   1747c:	b0 91 02 19 	lds	r27, 0x1902	; 0x801902 <AMIGOs+0x1>
   17480:	89 2b       	or	r24, r25
   17482:	89 f0       	breq	.+34     	; 0x174a6 <amigo_todo+0x94>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   17484:	50 e0       	ldi	r21, 0x00	; 0
   17486:	ed b7       	in	r30, 0x3d	; 61
   17488:	fe b7       	in	r31, 0x3e	; 62
   1748a:	53 87       	std	Z+11, r21	; 0x0b
   1748c:	42 87       	std	Z+10, r20	; 0x0a
   1748e:	30 e0       	ldi	r19, 0x00	; 0
   17490:	31 87       	std	Z+9, r19	; 0x09
   17492:	20 87       	std	Z+8, r18	; 0x08
   17494:	8c 91       	ld	r24, X
   17496:	90 e0       	ldi	r25, 0x00	; 0
   17498:	97 83       	std	Z+7, r25	; 0x07
   1749a:	86 83       	std	Z+6, r24	; 0x06
   1749c:	d5 83       	std	Z+5, r29	; 0x05
   1749e:	c4 83       	std	Z+4, r28	; 0x04
   174a0:	86 ee       	ldi	r24, 0xE6	; 230
   174a2:	9c e2       	ldi	r25, 0x2C	; 44
   174a4:	24 c0       	rjmp	.+72     	; 0x174ee <amigo_todo+0xdc>
                secondary,AMIGOs->state,listening,talking);
    else if(talking == UNT)
   174a6:	4f 35       	cpi	r20, 0x5F	; 95
   174a8:	91 f4       	brne	.+36     	; 0x174ce <amigo_todo+0xbc>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   174aa:	8f e5       	ldi	r24, 0x5F	; 95
   174ac:	90 e0       	ldi	r25, 0x00	; 0
   174ae:	ed b7       	in	r30, 0x3d	; 61
   174b0:	fe b7       	in	r31, 0x3e	; 62
   174b2:	93 87       	std	Z+11, r25	; 0x0b
   174b4:	82 87       	std	Z+10, r24	; 0x0a
   174b6:	30 e0       	ldi	r19, 0x00	; 0
   174b8:	31 87       	std	Z+9, r19	; 0x09
   174ba:	20 87       	std	Z+8, r18	; 0x08
   174bc:	8c 91       	ld	r24, X
   174be:	90 e0       	ldi	r25, 0x00	; 0
   174c0:	97 83       	std	Z+7, r25	; 0x07
   174c2:	86 83       	std	Z+6, r24	; 0x06
   174c4:	d5 83       	std	Z+5, r29	; 0x05
   174c6:	c4 83       	std	Z+4, r28	; 0x04
   174c8:	86 e9       	ldi	r24, 0x96	; 150
   174ca:	9c e2       	ldi	r25, 0x2C	; 44
   174cc:	10 c0       	rjmp	.+32     	; 0x174ee <amigo_todo+0xdc>
                secondary,AMIGOs->state,listening,talking);
    else
        printf("[E   Amigo ERROR secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   174ce:	50 e0       	ldi	r21, 0x00	; 0
   174d0:	ed b7       	in	r30, 0x3d	; 61
   174d2:	fe b7       	in	r31, 0x3e	; 62
   174d4:	53 87       	std	Z+11, r21	; 0x0b
   174d6:	42 87       	std	Z+10, r20	; 0x0a
   174d8:	30 e0       	ldi	r19, 0x00	; 0
   174da:	31 87       	std	Z+9, r19	; 0x09
   174dc:	20 87       	std	Z+8, r18	; 0x08
   174de:	8c 91       	ld	r24, X
   174e0:	90 e0       	ldi	r25, 0x00	; 0
   174e2:	97 83       	std	Z+7, r25	; 0x07
   174e4:	86 83       	std	Z+6, r24	; 0x06
   174e6:	d5 83       	std	Z+5, r29	; 0x05
   174e8:	c4 83       	std	Z+4, r28	; 0x04
   174ea:	85 e4       	ldi	r24, 0x45	; 69
   174ec:	9c e2       	ldi	r25, 0x2C	; 44
   174ee:	a0 e0       	ldi	r26, 0x00	; 0
   174f0:	81 83       	std	Z+1, r24	; 0x01
   174f2:	92 83       	std	Z+2, r25	; 0x02
   174f4:	a3 83       	std	Z+3, r26	; 0x03
   174f6:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
            secondary,AMIGOs->state,listening,talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   174fa:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   174fe:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   17502:	81 81       	ldd	r24, Z+1	; 0x01
   17504:	90 e0       	ldi	r25, 0x00	; 0
   17506:	0e 94 a0 87 	call	0x10f40	; 0x10f40 <gpib_enable_PPR>
    return(0);
}
   1750a:	80 e0       	ldi	r24, 0x00	; 0
   1750c:	90 e0       	ldi	r25, 0x00	; 0
   1750e:	cd b7       	in	r28, 0x3d	; 61
   17510:	de b7       	in	r29, 0x3e	; 62
   17512:	2b 96       	adiw	r28, 0x0b	; 11
   17514:	e2 e0       	ldi	r30, 0x02	; 2
   17516:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__epilogue_restores__+0x20>

0001751a <amigo_check_unit>:
/// @brief  Amigo Check Valid unit
/// @param[in] unit: unit to set
/// @return void
void amigo_check_unit(uint8_t unit)
{
    if(unit != 15)
   1751a:	8f 30       	cpi	r24, 0x0F	; 15
   1751c:	29 f0       	breq	.+10     	; 0x17528 <amigo_check_unit+0xe>
        AMIGOs->unitNO = unit;
   1751e:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   17522:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   17526:	81 83       	std	Z+1, r24	; 0x01
    if(AMIGOs->unitNO != 0)
   17528:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   1752c:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   17530:	81 81       	ldd	r24, Z+1	; 0x01
   17532:	88 23       	and	r24, r24
   17534:	29 f0       	breq	.+10     	; 0x17540 <amigo_check_unit+0x26>
        AMIGOs->Errors |= ERR_UNIT;
   17536:	87 81       	ldd	r24, Z+7	; 0x07
   17538:	90 85       	ldd	r25, Z+8	; 0x08
   1753a:	80 64       	ori	r24, 0x40	; 64
   1753c:	90 87       	std	Z+8, r25	; 0x08
   1753e:	87 83       	std	Z+7, r24	; 0x07
   17540:	08 95       	ret

00017542 <Amigo_Command>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)

int Amigo_Command( int secondary )
{
   17542:	ac e1       	ldi	r26, 0x1C	; 28
   17544:	b0 e0       	ldi	r27, 0x00	; 0
   17546:	e7 ea       	ldi	r30, 0xA7	; 167
   17548:	fa eb       	ldi	r31, 0xBA	; 186
   1754a:	0c 94 25 e5 	jmp	0x1ca4a	; 0x1ca4a <__prologue_saves__+0x18>
   1754e:	7c 01       	movw	r14, r24
    uint8_t *ptr;
    uint16_t status;                              // Current status
    UINT len;                                     // Size of Data/Op Codes/Parameters read in bytes

#if SDEBUG
    if(debuglevel & 32)
   17550:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17554:	85 ff       	sbrs	r24, 5
   17556:	16 c0       	rjmp	.+44     	; 0x17584 <Amigo_Command+0x42>
        printf("[AMIGO Command(%02XH): listen:%02XH, talk:%02XH]\n",
   17558:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <talking>
   1755c:	90 e0       	ldi	r25, 0x00	; 0
   1755e:	ed b7       	in	r30, 0x3d	; 61
   17560:	fe b7       	in	r31, 0x3e	; 62
   17562:	91 87       	std	Z+9, r25	; 0x09
   17564:	80 87       	std	Z+8, r24	; 0x08
   17566:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   1756a:	90 e0       	ldi	r25, 0x00	; 0
   1756c:	97 83       	std	Z+7, r25	; 0x07
   1756e:	86 83       	std	Z+6, r24	; 0x06
   17570:	f5 82       	std	Z+5, r15	; 0x05
   17572:	e4 82       	std	Z+4, r14	; 0x04
   17574:	83 e1       	ldi	r24, 0x13	; 19
   17576:	9c e2       	ldi	r25, 0x2C	; 44
   17578:	a0 e0       	ldi	r26, 0x00	; 0
   1757a:	81 83       	std	Z+1, r24	; 0x01
   1757c:	92 83       	std	Z+2, r25	; 0x02
   1757e:	a3 83       	std	Z+3, r26	; 0x03
   17580:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
            secondary, listening, talking);
#endif

///  Reference: A14
    if (secondary == 0x7e && AMIGO_is_MTA(talking))
   17584:	fe e7       	ldi	r31, 0x7E	; 126
   17586:	ef 16       	cp	r14, r31
   17588:	f1 04       	cpc	r15, r1
   1758a:	f1 f5       	brne	.+124    	; 0x17608 <Amigo_Command+0xc6>
   1758c:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <talking>
   17590:	90 e0       	ldi	r25, 0x00	; 0
   17592:	0e 94 f8 8d 	call	0x11bf0	; 0x11bf0 <AMIGO_is_MTA>
   17596:	89 2b       	or	r24, r25
   17598:	09 f4       	brne	.+2      	; 0x1759c <Amigo_Command+0x5a>
   1759a:	86 c0       	rjmp	.+268    	; 0x176a8 <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   1759c:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   175a0:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   175a4:	81 81       	ldd	r24, Z+1	; 0x01
   175a6:	90 e0       	ldi	r25, 0x00	; 0
   175a8:	0e 94 d6 87 	call	0x10fac	; 0x10fac <gpib_disable_PPR>
        status = EOI_FLAG;
   175ac:	80 e0       	ldi	r24, 0x00	; 0
   175ae:	91 e0       	ldi	r25, 0x01	; 1
   175b0:	9c 8f       	std	Y+28, r25	; 0x1c
   175b2:	8b 8f       	std	Y+27, r24	; 0x1b
        len = gpib_write_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   175b4:	ae 01       	movw	r20, r28
   175b6:	45 5e       	subi	r20, 0xE5	; 229
   175b8:	5f 4f       	sbci	r21, 0xFF	; 255
   175ba:	60 e0       	ldi	r22, 0x00	; 0
   175bc:	72 e0       	ldi	r23, 0x02	; 2
   175be:	82 e8       	ldi	r24, 0x82	; 130
   175c0:	9c e1       	ldi	r25, 0x1C	; 28
   175c2:	0e 94 fa 8c 	call	0x119f4	; 0x119f4 <gpib_write_str>
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   175c6:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   175ca:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   175ce:	81 81       	ldd	r24, Z+1	; 0x01
   175d0:	90 e0       	ldi	r25, 0x00	; 0
   175d2:	0e 94 a0 87 	call	0x10f40	; 0x10f40 <gpib_enable_PPR>
        if(status & ERROR_MASK)
   175d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
   175d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
   175da:	88 27       	eor	r24, r24
   175dc:	90 7d       	andi	r25, 0xD0	; 208
   175de:	89 2b       	or	r24, r25
   175e0:	09 f4       	brne	.+2      	; 0x175e4 <Amigo_Command+0xa2>
   175e2:	87 c2       	rjmp	.+1294   	; 0x17af2 <Amigo_Command+0x5b0>
        {
            AMIGOs->dsj = 1;
   175e4:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   175e8:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   175ec:	81 e0       	ldi	r24, 0x01	; 1
   175ee:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   175f0:	87 81       	ldd	r24, Z+7	; 0x07
   175f2:	90 85       	ldd	r25, Z+8	; 0x08
   175f4:	80 62       	ori	r24, 0x20	; 32
   175f6:	90 87       	std	Z+8, r25	; 0x08
   175f8:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & 1)
   175fa:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   175fe:	80 ff       	sbrs	r24, 0
   17600:	78 c2       	rjmp	.+1264   	; 0x17af2 <Amigo_Command+0x5b0>
                printf("[AMIGO_Command:GPIB write error]\n");
   17602:	81 ef       	ldi	r24, 0xF1	; 241
   17604:	9b e2       	ldi	r25, 0x2B	; 43
   17606:	8e c0       	rjmp	.+284    	; 0x17724 <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

///  Reference: A25
    if (secondary == 0x7f && AMIGO_is_MLA(listening))
   17608:	ff e7       	ldi	r31, 0x7F	; 127
   1760a:	ef 16       	cp	r14, r31
   1760c:	f1 04       	cpc	r15, r1
   1760e:	09 f0       	breq	.+2      	; 0x17612 <Amigo_Command+0xd0>
   17610:	4b c0       	rjmp	.+150    	; 0x176a8 <Amigo_Command+0x166>
   17612:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   17616:	90 e0       	ldi	r25, 0x00	; 0
   17618:	0e 94 e9 8d 	call	0x11bd2	; 0x11bd2 <AMIGO_is_MLA>
   1761c:	89 2b       	or	r24, r25
   1761e:	09 f4       	brne	.+2      	; 0x17622 <Amigo_Command+0xe0>
   17620:	43 c0       	rjmp	.+134    	; 0x176a8 <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17622:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   17626:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   1762a:	81 81       	ldd	r24, Z+1	; 0x01
   1762c:	90 e0       	ldi	r25, 0x00	; 0
   1762e:	0e 94 d6 87 	call	0x10fac	; 0x10fac <gpib_disable_PPR>
#if SDEBUG
        if(debuglevel & 128)
   17632:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17636:	87 fd       	sbrc	r24, 7
            gpib_timer_elapsed_begin();
   17638:	0e 94 de 86 	call	0x10dbc	; 0x10dbc <gpib_timer_elapsed_begin>
#endif
        status = EOI_FLAG;
   1763c:	80 e0       	ldi	r24, 0x00	; 0
   1763e:	91 e0       	ldi	r25, 0x01	; 1
   17640:	9c 8f       	std	Y+28, r25	; 0x1c
   17642:	8b 8f       	std	Y+27, r24	; 0x1b
        len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   17644:	ae 01       	movw	r20, r28
   17646:	45 5e       	subi	r20, 0xE5	; 229
   17648:	5f 4f       	sbci	r21, 0xFF	; 255
   1764a:	60 e0       	ldi	r22, 0x00	; 0
   1764c:	72 e0       	ldi	r23, 0x02	; 2
   1764e:	82 e8       	ldi	r24, 0x82	; 130
   17650:	9c e1       	ldi	r25, 0x1C	; 28
   17652:	0e 94 58 8c 	call	0x118b0	; 0x118b0 <gpib_read_str>
#if SDEBUG
        if(debuglevel & 128)
   17656:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1765a:	87 ff       	sbrs	r24, 7
   1765c:	04 c0       	rjmp	.+8      	; 0x17666 <Amigo_Command+0x124>
            gpib_timer_elapsed_end("GPIB read str");
   1765e:	83 ef       	ldi	r24, 0xF3	; 243
   17660:	94 e1       	ldi	r25, 0x14	; 20
   17662:	0e 94 f0 86 	call	0x10de0	; 0x10de0 <gpib_timer_elapsed_end>
#endif
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   17666:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   1766a:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   1766e:	81 81       	ldd	r24, Z+1	; 0x01
   17670:	90 e0       	ldi	r25, 0x00	; 0
   17672:	0e 94 a0 87 	call	0x10f40	; 0x10f40 <gpib_enable_PPR>
        if(status & ERROR_MASK)
   17676:	8b 8d       	ldd	r24, Y+27	; 0x1b
   17678:	9c 8d       	ldd	r25, Y+28	; 0x1c
   1767a:	88 27       	eor	r24, r24
   1767c:	90 7d       	andi	r25, 0xD0	; 208
   1767e:	89 2b       	or	r24, r25
   17680:	09 f4       	brne	.+2      	; 0x17684 <Amigo_Command+0x142>
   17682:	37 c2       	rjmp	.+1134   	; 0x17af2 <Amigo_Command+0x5b0>
        {
            AMIGOs->dsj = 1;
   17684:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   17688:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   1768c:	81 e0       	ldi	r24, 0x01	; 1
   1768e:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   17690:	87 81       	ldd	r24, Z+7	; 0x07
   17692:	90 85       	ldd	r25, Z+8	; 0x08
   17694:	80 62       	ori	r24, 0x20	; 32
   17696:	90 87       	std	Z+8, r25	; 0x08
   17698:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & 1)
   1769a:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1769e:	80 ff       	sbrs	r24, 0
   176a0:	28 c2       	rjmp	.+1104   	; 0x17af2 <Amigo_Command+0x5b0>
                printf("[AMIGO Command:GPIB read error]\n");
   176a2:	80 ed       	ldi	r24, 0xD0	; 208
   176a4:	9b e2       	ldi	r25, 0x2B	; 43
   176a6:	3e c0       	rjmp	.+124    	; 0x17724 <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   176a8:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   176ac:	90 e0       	ldi	r25, 0x00	; 0
   176ae:	0e 94 e9 8d 	call	0x11bd2	; 0x11bd2 <AMIGO_is_MLA>
   176b2:	89 2b       	or	r24, r25
   176b4:	19 f4       	brne	.+6      	; 0x176bc <Amigo_Command+0x17a>
        return(0);
   176b6:	80 e0       	ldi	r24, 0x00	; 0
   176b8:	90 e0       	ldi	r25, 0x00	; 0
   176ba:	23 c2       	rjmp	.+1094   	; 0x17b02 <Amigo_Command+0x5c0>
                printf("[AMIGO Command:GPIB read error]\n");
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   176bc:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <talking>
   176c0:	90 e0       	ldi	r25, 0x00	; 0
   176c2:	0e 94 f8 8d 	call	0x11bf0	; 0x11bf0 <AMIGO_is_MTA>
   176c6:	89 2b       	or	r24, r25
   176c8:	b1 f7       	brne	.-20     	; 0x176b6 <Amigo_Command+0x174>
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   176ca:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   176ce:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   176d2:	81 81       	ldd	r24, Z+1	; 0x01
   176d4:	90 e0       	ldi	r25, 0x00	; 0
   176d6:	0e 94 d6 87 	call	0x10fac	; 0x10fac <gpib_disable_PPR>


///  Note: the function will "unread" any commands and return
///  All Data MUST have EOI

    status = EOI_FLAG;
   176da:	80 e0       	ldi	r24, 0x00	; 0
   176dc:	91 e0       	ldi	r25, 0x01	; 1
   176de:	9c 8f       	std	Y+28, r25	; 0x1c
   176e0:	8b 8f       	std	Y+27, r24	; 0x1b
    len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   176e2:	ae 01       	movw	r20, r28
   176e4:	45 5e       	subi	r20, 0xE5	; 229
   176e6:	5f 4f       	sbci	r21, 0xFF	; 255
   176e8:	60 e0       	ldi	r22, 0x00	; 0
   176ea:	72 e0       	ldi	r23, 0x02	; 2
   176ec:	82 e8       	ldi	r24, 0x82	; 130
   176ee:	9c e1       	ldi	r25, 0x1C	; 28
   176f0:	0e 94 58 8c 	call	0x118b0	; 0x118b0 <gpib_read_str>
   176f4:	8c 01       	movw	r16, r24
    if(status & ERROR_MASK)
   176f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
   176f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
   176fa:	88 27       	eor	r24, r24
   176fc:	90 7d       	andi	r25, 0xD0	; 208
   176fe:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   17702:	89 2b       	or	r24, r25
   17704:	c1 f0       	breq	.+48     	; 0x17736 <Amigo_Command+0x1f4>
    {
        AMIGOs->dsj = 1;
   17706:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   1770a:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   1770e:	81 e0       	ldi	r24, 0x01	; 1
   17710:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   17712:	87 81       	ldd	r24, Z+7	; 0x07
   17714:	90 85       	ldd	r25, Z+8	; 0x08
   17716:	80 62       	ori	r24, 0x20	; 32
   17718:	90 87       	std	Z+8, r25	; 0x08
   1771a:	87 83       	std	Z+7, r24	; 0x07
        if(debuglevel & 1)
   1771c:	20 ff       	sbrs	r18, 0
   1771e:	e9 c1       	rjmp	.+978    	; 0x17af2 <Amigo_Command+0x5b0>
            printf("[AMIGO Command:GPIB read error]\n");
   17720:	8f ea       	ldi	r24, 0xAF	; 175
   17722:	9b e2       	ldi	r25, 0x2B	; 43
   17724:	a0 e0       	ldi	r26, 0x00	; 0
   17726:	ed b7       	in	r30, 0x3d	; 61
   17728:	fe b7       	in	r31, 0x3e	; 62
   1772a:	81 83       	std	Z+1, r24	; 0x01
   1772c:	92 83       	std	Z+2, r25	; 0x02
   1772e:	a3 83       	std	Z+3, r26	; 0x03
   17730:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   17734:	de c1       	rjmp	.+956    	; 0x17af2 <Amigo_Command+0x5b0>
        return(status & ERROR_MASK);
    }
#if SDEBUG
    if(debuglevel & 32)
   17736:	25 ff       	sbrs	r18, 5
   17738:	0e c0       	rjmp	.+28     	; 0x17756 <Amigo_Command+0x214>
        printf("[AMIGO Command(%02XH): GPIB read bytes:%02XH]\n",
   1773a:	ed b7       	in	r30, 0x3d	; 61
   1773c:	fe b7       	in	r31, 0x3e	; 62
   1773e:	17 83       	std	Z+7, r17	; 0x07
   17740:	06 83       	std	Z+6, r16	; 0x06
   17742:	f5 82       	std	Z+5, r15	; 0x05
   17744:	e4 82       	std	Z+4, r14	; 0x04
   17746:	80 e8       	ldi	r24, 0x80	; 128
   17748:	9b e2       	ldi	r25, 0x2B	; 43
   1774a:	a0 e0       	ldi	r26, 0x00	; 0
   1774c:	81 83       	std	Z+1, r24	; 0x01
   1774e:	92 83       	std	Z+2, r25	; 0x02
   17750:	a3 83       	std	Z+3, r26	; 0x03
   17752:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
            secondary, len);
#endif
    if(!len)
   17756:	01 15       	cp	r16, r1
   17758:	11 05       	cpc	r17, r1
   1775a:	61 f4       	brne	.+24     	; 0x17774 <Amigo_Command+0x232>
    {
        AMIGOs->dsj = 1;
   1775c:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   17760:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   17764:	81 e0       	ldi	r24, 0x01	; 1
   17766:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   17768:	87 81       	ldd	r24, Z+7	; 0x07
   1776a:	90 85       	ldd	r25, Z+8	; 0x08
   1776c:	80 62       	ori	r24, 0x20	; 32
   1776e:	90 87       	std	Z+8, r25	; 0x08
   17770:	87 83       	std	Z+7, r24	; 0x07
   17772:	bf c1       	rjmp	.+894    	; 0x17af2 <Amigo_Command+0x5b0>
        return(status & ERROR_MASK);
    }

    ptr = gpib_iobuff;
    op = *ptr++;
   17774:	60 91 82 1c 	lds	r22, 0x1C82	; 0x801c82 <gpib_iobuff>

    if (secondary == 0x68)
   17778:	f8 e6       	ldi	r31, 0x68	; 104
   1777a:	ef 16       	cp	r14, r31
   1777c:	f1 04       	cpc	r15, r1
   1777e:	09 f0       	breq	.+2      	; 0x17782 <Amigo_Command+0x240>
   17780:	28 c1       	rjmp	.+592    	; 0x179d2 <Amigo_Command+0x490>
    {
        if(op == 0x00 && len == 2)
   17782:	61 11       	cpse	r22, r1
   17784:	2e c0       	rjmp	.+92     	; 0x177e2 <Amigo_Command+0x2a0>
   17786:	02 30       	cpi	r16, 0x02	; 2
   17788:	11 05       	cpc	r17, r1
   1778a:	09 f0       	breq	.+2      	; 0x1778e <Amigo_Command+0x24c>
   1778c:	b7 c1       	rjmp	.+878    	; 0x17afc <Amigo_Command+0x5ba>
        {
///  Reference: A40

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & 32)
   1778e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17792:	85 ff       	sbrs	r24, 5
   17794:	0a c0       	rjmp	.+20     	; 0x177aa <Amigo_Command+0x268>
                printf("[AMIGO Cold Load Read Command]\n");
   17796:	80 e6       	ldi	r24, 0x60	; 96
   17798:	9b e2       	ldi	r25, 0x2B	; 43
   1779a:	a0 e0       	ldi	r26, 0x00	; 0
   1779c:	ed b7       	in	r30, 0x3d	; 61
   1779e:	fe b7       	in	r31, 0x3e	; 62
   177a0:	81 83       	std	Z+1, r24	; 0x01
   177a2:	92 83       	std	Z+2, r25	; 0x02
   177a4:	a3 83       	std	Z+3, r26	; 0x03
   177a6:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
#endif
            ///TODO we do NOT support multiple units yet
            AMIGOs->unitNO = 0;
   177aa:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   177ae:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   177b2:	11 82       	std	Z+1, r1	; 0x01
            AMIGOs->dsj = 0;
   177b4:	16 82       	std	Z+6, r1	; 0x06
            AMIGOs->Errors = 0;
   177b6:	10 86       	std	Z+8, r1	; 0x08
   177b8:	17 82       	std	Z+7, r1	; 0x07
            /// Fill in temparary address
            tmp.cyl = 0;
   177ba:	1d 86       	std	Y+13, r1	; 0x0d
            tmp.head = ( (0xff & *ptr) >> 6) & 0x03;
   177bc:	80 91 83 1c 	lds	r24, 0x1C83	; 0x801c83 <gpib_iobuff+0x1>
   177c0:	98 2f       	mov	r25, r24
   177c2:	92 95       	swap	r25
   177c4:	96 95       	lsr	r25
   177c6:	96 95       	lsr	r25
   177c8:	93 70       	andi	r25, 0x03	; 3
   177ca:	9e 87       	std	Y+14, r25	; 0x0e
            tmp.sector = 0x3f & *ptr;
   177cc:	8f 73       	andi	r24, 0x3F	; 63
   177ce:	8f 87       	std	Y+15, r24	; 0x0f
            ++ptr;
            //update to real address on sucess
            amigo_seek((AMIGOStateType *) &tmp);
   177d0:	ce 01       	movw	r24, r28
   177d2:	0a 96       	adiw	r24, 0x0a	; 10
   177d4:	1a da       	rcall	.-3020   	; 0x16c0a <amigo_seek>
            AMIGOs->state = AMIGO_COLD_LOAD_READ;
   177d6:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   177da:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   177de:	85 e0       	ldi	r24, 0x05	; 5
   177e0:	5c c1       	rjmp	.+696    	; 0x17a9a <Amigo_Command+0x558>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 5)
   177e2:	62 30       	cpi	r22, 0x02	; 2
   177e4:	09 f0       	breq	.+2      	; 0x177e8 <Amigo_Command+0x2a6>
   177e6:	3f c0       	rjmp	.+126    	; 0x17866 <Amigo_Command+0x324>
   177e8:	05 30       	cpi	r16, 0x05	; 5
   177ea:	11 05       	cpc	r17, r1
   177ec:	d1 f4       	brne	.+52     	; 0x17822 <Amigo_Command+0x2e0>
/// @brief 
///  Seek 1 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & 32)
   177ee:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   177f2:	85 ff       	sbrs	r24, 5
   177f4:	0a c0       	rjmp	.+20     	; 0x1780a <Amigo_Command+0x2c8>
                printf("[AMIGO Seek len=5]\n");
   177f6:	8c e4       	ldi	r24, 0x4C	; 76
   177f8:	9b e2       	ldi	r25, 0x2B	; 43
   177fa:	a0 e0       	ldi	r26, 0x00	; 0
   177fc:	ed b7       	in	r30, 0x3d	; 61
   177fe:	fe b7       	in	r31, 0x3e	; 62
   17800:	81 83       	std	Z+1, r24	; 0x01
   17802:	92 83       	std	Z+2, r25	; 0x02
   17804:	a3 83       	std	Z+3, r26	; 0x03
   17806:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1780a:	80 91 83 1c 	lds	r24, 0x1C83	; 0x801c83 <gpib_iobuff+0x1>
   1780e:	85 de       	rcall	.-758    	; 0x1751a <amigo_check_unit>

            /// Fill in temparary address
            tmp.cyl = 0xff & *ptr++;
   17810:	80 91 84 1c 	lds	r24, 0x1C84	; 0x801c84 <gpib_iobuff+0x2>
   17814:	8d 87       	std	Y+13, r24	; 0x0d
            tmp.head = 0xff & *ptr++;
   17816:	80 91 85 1c 	lds	r24, 0x1C85	; 0x801c85 <gpib_iobuff+0x3>
   1781a:	8e 87       	std	Y+14, r24	; 0x0e
            tmp.sector = 0xff & *ptr++;
   1781c:	80 91 86 1c 	lds	r24, 0x1C86	; 0x801c86 <gpib_iobuff+0x4>
   17820:	1d c0       	rjmp	.+58     	; 0x1785c <Amigo_Command+0x31a>
            //update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 6)
   17822:	06 30       	cpi	r16, 0x06	; 6
   17824:	11 05       	cpc	r17, r1
   17826:	09 f0       	breq	.+2      	; 0x1782a <Amigo_Command+0x2e8>
   17828:	69 c1       	rjmp	.+722    	; 0x17afc <Amigo_Command+0x5ba>
/// @brief 
///  Seek 2 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & 32)
   1782a:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1782e:	85 ff       	sbrs	r24, 5
   17830:	0a c0       	rjmp	.+20     	; 0x17846 <Amigo_Command+0x304>
                printf("[AMIGO Seek len=6]\n");
   17832:	88 e3       	ldi	r24, 0x38	; 56
   17834:	9b e2       	ldi	r25, 0x2B	; 43
   17836:	a0 e0       	ldi	r26, 0x00	; 0
   17838:	ed b7       	in	r30, 0x3d	; 61
   1783a:	fe b7       	in	r31, 0x3e	; 62
   1783c:	81 83       	std	Z+1, r24	; 0x01
   1783e:	92 83       	std	Z+2, r25	; 0x02
   17840:	a3 83       	std	Z+3, r26	; 0x03
   17842:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17846:	80 91 83 1c 	lds	r24, 0x1C83	; 0x801c83 <gpib_iobuff+0x1>
   1784a:	67 de       	rcall	.-818    	; 0x1751a <amigo_check_unit>
            /// Fill in temparary address
            tmp.cyl = (0xff & *ptr++) << 8;       // MSB
            tmp.cyl |= (0xff & *ptr++);           // LSB
   1784c:	80 91 85 1c 	lds	r24, 0x1C85	; 0x801c85 <gpib_iobuff+0x3>
   17850:	8d 87       	std	Y+13, r24	; 0x0d
            tmp.head = 0xff & *ptr++;
   17852:	80 91 86 1c 	lds	r24, 0x1C86	; 0x801c86 <gpib_iobuff+0x4>
   17856:	8e 87       	std	Y+14, r24	; 0x0e
            tmp.sector = 0xff & *ptr++;
   17858:	80 91 87 1c 	lds	r24, 0x1C87	; 0x801c87 <gpib_iobuff+0x5>
            //update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
   1785c:	8f 87       	std	Y+15, r24	; 0x0f
   1785e:	ce 01       	movw	r24, r28
   17860:	0a 96       	adiw	r24, 0x0a	; 10
   17862:	d3 d9       	rcall	.-3162   	; 0x16c0a <amigo_seek>
   17864:	1b c1       	rjmp	.+566    	; 0x17a9c <Amigo_Command+0x55a>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x03 && len == 2)
   17866:	63 30       	cpi	r22, 0x03	; 3
   17868:	e9 f4       	brne	.+58     	; 0x178a4 <Amigo_Command+0x362>
   1786a:	02 30       	cpi	r16, 0x02	; 2
   1786c:	11 05       	cpc	r17, r1
   1786e:	09 f0       	breq	.+2      	; 0x17872 <Amigo_Command+0x330>
   17870:	45 c1       	rjmp	.+650    	; 0x17afc <Amigo_Command+0x5ba>
        {
///  Reference: A15
#if SDEBUG
            if(debuglevel & 32)
   17872:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17876:	85 ff       	sbrs	r24, 5
   17878:	0a c0       	rjmp	.+20     	; 0x1788e <Amigo_Command+0x34c>
                printf("[AMIGO Request Status Buffered Command]\n");
   1787a:	8f e0       	ldi	r24, 0x0F	; 15
   1787c:	9b e2       	ldi	r25, 0x2B	; 43
   1787e:	a0 e0       	ldi	r26, 0x00	; 0
   17880:	ed b7       	in	r30, 0x3d	; 61
   17882:	fe b7       	in	r31, 0x3e	; 62
   17884:	81 83       	std	Z+1, r24	; 0x01
   17886:	92 83       	std	Z+2, r25	; 0x02
   17888:	a3 83       	std	Z+3, r26	; 0x03
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1788a:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   1788e:	80 91 83 1c 	lds	r24, 0x1C83	; 0x801c83 <gpib_iobuff+0x1>
            amigo_request_status();
   17892:	43 de       	rcall	.-890    	; 0x1751a <amigo_check_unit>
            AMIGOs->state = AMIGO_REQUEST_STATUS_BUFFERED;
   17894:	78 d8       	rcall	.-3856   	; 0x16986 <amigo_request_status>
   17896:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   1789a:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   1789e:	83 e0       	ldi	r24, 0x03	; 3
   178a0:	80 83       	st	Z, r24
            return(status & ERROR_MASK);
        }
        else if(op == 0x05 && len == 2)
   178a2:	27 c1       	rjmp	.+590    	; 0x17af2 <Amigo_Command+0x5b0>
   178a4:	65 30       	cpi	r22, 0x05	; 5
   178a6:	d9 f4       	brne	.+54     	; 0x178de <Amigo_Command+0x39c>
   178a8:	02 30       	cpi	r16, 0x02	; 2
   178aa:	11 05       	cpc	r17, r1
   178ac:	09 f0       	breq	.+2      	; 0x178b0 <Amigo_Command+0x36e>
        {
///  Reference: A35
#if SDEBUG
            if(debuglevel & 32)
   178ae:	26 c1       	rjmp	.+588    	; 0x17afc <Amigo_Command+0x5ba>
   178b0:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   178b4:	85 ff       	sbrs	r24, 5
                printf("[AMIGO Read Unbuffered Command]\n");
   178b6:	0a c0       	rjmp	.+20     	; 0x178cc <Amigo_Command+0x38a>
   178b8:	8e ee       	ldi	r24, 0xEE	; 238
   178ba:	9a e2       	ldi	r25, 0x2A	; 42
   178bc:	a0 e0       	ldi	r26, 0x00	; 0
   178be:	ed b7       	in	r30, 0x3d	; 61
   178c0:	fe b7       	in	r31, 0x3e	; 62
   178c2:	81 83       	std	Z+1, r24	; 0x01
   178c4:	92 83       	std	Z+2, r25	; 0x02
   178c6:	a3 83       	std	Z+3, r26	; 0x03
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   178c8:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   178cc:	80 91 83 1c 	lds	r24, 0x1C83	; 0x801c83 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_READ_UNBUFFERED;
   178d0:	24 de       	rcall	.-952    	; 0x1751a <amigo_check_unit>
   178d2:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   178d6:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   178da:	86 e0       	ldi	r24, 0x06	; 6
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x07 && len == 4)
   178dc:	de c0       	rjmp	.+444    	; 0x17a9a <Amigo_Command+0x558>
   178de:	67 30       	cpi	r22, 0x07	; 7
   178e0:	f9 f4       	brne	.+62     	; 0x17920 <Amigo_Command+0x3de>
   178e2:	04 30       	cpi	r16, 0x04	; 4
   178e4:	11 05       	cpc	r17, r1
   178e6:	09 f0       	breq	.+2      	; 0x178ea <Amigo_Command+0x3a8>
        {
            uint16_t sectors;
#if SDEBUG
            if(debuglevel & 32)
   178e8:	09 c1       	rjmp	.+530    	; 0x17afc <Amigo_Command+0x5ba>
   178ea:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   178ee:	85 ff       	sbrs	r24, 5
                printf("[AMIGO Verify]\n");
   178f0:	0a c0       	rjmp	.+20     	; 0x17906 <Amigo_Command+0x3c4>
   178f2:	8e ed       	ldi	r24, 0xDE	; 222
   178f4:	9a e2       	ldi	r25, 0x2A	; 42
   178f6:	a0 e0       	ldi	r26, 0x00	; 0
   178f8:	ed b7       	in	r30, 0x3d	; 61
   178fa:	fe b7       	in	r31, 0x3e	; 62
   178fc:	81 83       	std	Z+1, r24	; 0x01
   178fe:	92 83       	std	Z+2, r25	; 0x02
   17900:	a3 83       	std	Z+3, r26	; 0x03
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17902:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   17906:	80 91 83 1c 	lds	r24, 0x1C83	; 0x801c83 <gpib_iobuff+0x1>
            sectors = (0xff & *ptr++) << 8;
   1790a:	07 de       	rcall	.-1010   	; 0x1751a <amigo_check_unit>
   1790c:	80 91 84 1c 	lds	r24, 0x1C84	; 0x801c84 <gpib_iobuff+0x2>
            sectors |= (0xff & *ptr++);
            return ( amigo_verify( sectors) );
   17910:	90 e0       	ldi	r25, 0x00	; 0
   17912:	98 2f       	mov	r25, r24
   17914:	88 27       	eor	r24, r24
   17916:	20 91 85 1c 	lds	r18, 0x1C85	; 0x801c85 <gpib_iobuff+0x3>
   1791a:	82 2b       	or	r24, r18
        }
        else if(op == 0x08 && len == 2)
   1791c:	a1 d9       	rcall	.-3262   	; 0x16c60 <amigo_verify>
   1791e:	f1 c0       	rjmp	.+482    	; 0x17b02 <Amigo_Command+0x5c0>
   17920:	68 30       	cpi	r22, 0x08	; 8
   17922:	d9 f4       	brne	.+54     	; 0x1795a <Amigo_Command+0x418>
   17924:	02 30       	cpi	r16, 0x02	; 2
   17926:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   17928:	09 f0       	breq	.+2      	; 0x1792c <Amigo_Command+0x3ea>
   1792a:	e8 c0       	rjmp	.+464    	; 0x17afc <Amigo_Command+0x5ba>
   1792c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
                printf("[AMIGO Write Unbuffered Command]\n");
   17930:	85 ff       	sbrs	r24, 5
   17932:	0a c0       	rjmp	.+20     	; 0x17948 <Amigo_Command+0x406>
   17934:	8c eb       	ldi	r24, 0xBC	; 188
   17936:	9a e2       	ldi	r25, 0x2A	; 42
   17938:	a0 e0       	ldi	r26, 0x00	; 0
   1793a:	ed b7       	in	r30, 0x3d	; 61
   1793c:	fe b7       	in	r31, 0x3e	; 62
   1793e:	81 83       	std	Z+1, r24	; 0x01
   17940:	92 83       	std	Z+2, r25	; 0x02
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17942:	a3 83       	std	Z+3, r26	; 0x03
   17944:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   17948:	80 91 83 1c 	lds	r24, 0x1C83	; 0x801c83 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_WRITE_UNBUFFERED;
   1794c:	e6 dd       	rcall	.-1076   	; 0x1751a <amigo_check_unit>
   1794e:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   17952:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if((op == 0x0B || op == 0x2b) && len == 2)
   17956:	88 e0       	ldi	r24, 0x08	; 8
   17958:	a0 c0       	rjmp	.+320    	; 0x17a9a <Amigo_Command+0x558>
   1795a:	86 2f       	mov	r24, r22
   1795c:	8f 7d       	andi	r24, 0xDF	; 223
   1795e:	8b 30       	cpi	r24, 0x0B	; 11
   17960:	d9 f4       	brne	.+54     	; 0x17998 <Amigo_Command+0x456>
   17962:	02 30       	cpi	r16, 0x02	; 2
   17964:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   17966:	09 f0       	breq	.+2      	; 0x1796a <Amigo_Command+0x428>
   17968:	c9 c0       	rjmp	.+402    	; 0x17afc <Amigo_Command+0x5ba>
   1796a:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
                printf("[AMIGO Initialize Command]\n");
   1796e:	85 ff       	sbrs	r24, 5
   17970:	0a c0       	rjmp	.+20     	; 0x17986 <Amigo_Command+0x444>
   17972:	80 ea       	ldi	r24, 0xA0	; 160
   17974:	9a e2       	ldi	r25, 0x2A	; 42
   17976:	a0 e0       	ldi	r26, 0x00	; 0
   17978:	ed b7       	in	r30, 0x3d	; 61
   1797a:	fe b7       	in	r31, 0x3e	; 62
   1797c:	81 83       	std	Z+1, r24	; 0x01
   1797e:	92 83       	std	Z+2, r25	; 0x02
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17980:	a3 83       	std	Z+3, r26	; 0x03
   17982:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   17986:	80 91 83 1c 	lds	r24, 0x1C83	; 0x801c83 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_INITIALIZE;
   1798a:	c7 dd       	rcall	.-1138   	; 0x1751a <amigo_check_unit>
   1798c:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   17990:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x14 && len == 2)
   17994:	8a e0       	ldi	r24, 0x0A	; 10
   17996:	81 c0       	rjmp	.+258    	; 0x17a9a <Amigo_Command+0x558>
   17998:	64 31       	cpi	r22, 0x14	; 20
   1799a:	09 f0       	breq	.+2      	; 0x1799e <Amigo_Command+0x45c>
   1799c:	af c0       	rjmp	.+350    	; 0x17afc <Amigo_Command+0x5ba>
   1799e:	02 30       	cpi	r16, 0x02	; 2
   179a0:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   179a2:	09 f0       	breq	.+2      	; 0x179a6 <Amigo_Command+0x464>
   179a4:	ab c0       	rjmp	.+342    	; 0x17afc <Amigo_Command+0x5ba>
   179a6:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
                printf("[AMIGO Request Logical Address Command]\n");
   179aa:	85 ff       	sbrs	r24, 5
   179ac:	0a c0       	rjmp	.+20     	; 0x179c2 <Amigo_Command+0x480>
   179ae:	87 e7       	ldi	r24, 0x77	; 119
   179b0:	9a e2       	ldi	r25, 0x2A	; 42
   179b2:	a0 e0       	ldi	r26, 0x00	; 0
   179b4:	ed b7       	in	r30, 0x3d	; 61
   179b6:	fe b7       	in	r31, 0x3e	; 62
   179b8:	81 83       	std	Z+1, r24	; 0x01
   179ba:	92 83       	std	Z+2, r25	; 0x02
   179bc:	a3 83       	std	Z+3, r26	; 0x03
#endif
            amigo_request_logical_address();
   179be:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
            AMIGOs->state = AMIGO_REQUEST_LOGICAL_ADDRESS;
   179c2:	0e 94 b5 b4 	call	0x1696a	; 0x1696a <amigo_request_logical_address>
   179c6:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   179ca:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x69)
   179ce:	84 e0       	ldi	r24, 0x04	; 4
   179d0:	64 c0       	rjmp	.+200    	; 0x17a9a <Amigo_Command+0x558>
   179d2:	f9 e6       	ldi	r31, 0x69	; 105
   179d4:	ef 16       	cp	r14, r31
    {
        if(op == 0x08 && len == 2)
   179d6:	f1 04       	cpc	r15, r1
   179d8:	f1 f4       	brne	.+60     	; 0x17a16 <Amigo_Command+0x4d4>
   179da:	68 30       	cpi	r22, 0x08	; 8
   179dc:	09 f0       	breq	.+2      	; 0x179e0 <Amigo_Command+0x49e>
   179de:	8e c0       	rjmp	.+284    	; 0x17afc <Amigo_Command+0x5ba>
   179e0:	02 30       	cpi	r16, 0x02	; 2
   179e2:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   179e4:	09 f0       	breq	.+2      	; 0x179e8 <Amigo_Command+0x4a6>
   179e6:	8a c0       	rjmp	.+276    	; 0x17afc <Amigo_Command+0x5ba>
   179e8:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
                printf("[AMIGO Write Buffered Command]\n");
   179ec:	85 ff       	sbrs	r24, 5
   179ee:	0a c0       	rjmp	.+20     	; 0x17a04 <Amigo_Command+0x4c2>
   179f0:	87 e5       	ldi	r24, 0x57	; 87
   179f2:	9a e2       	ldi	r25, 0x2A	; 42
   179f4:	a0 e0       	ldi	r26, 0x00	; 0
   179f6:	ed b7       	in	r30, 0x3d	; 61
   179f8:	fe b7       	in	r31, 0x3e	; 62
   179fa:	81 83       	std	Z+1, r24	; 0x01
   179fc:	92 83       	std	Z+2, r25	; 0x02
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   179fe:	a3 83       	std	Z+3, r26	; 0x03
   17a00:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   17a04:	80 91 83 1c 	lds	r24, 0x1C83	; 0x801c83 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_WRITE_BUFFERED;
   17a08:	88 dd       	rcall	.-1264   	; 0x1751a <amigo_check_unit>
   17a0a:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   17a0e:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x6A)
   17a12:	89 e0       	ldi	r24, 0x09	; 9
   17a14:	42 c0       	rjmp	.+132    	; 0x17a9a <Amigo_Command+0x558>
   17a16:	fa e6       	ldi	r31, 0x6A	; 106
   17a18:	ef 16       	cp	r14, r31
   17a1a:	f1 04       	cpc	r15, r1
    {
        if(op == 0x08 && len == 2)
   17a1c:	09 f0       	breq	.+2      	; 0x17a20 <Amigo_Command+0x4de>
   17a1e:	47 c0       	rjmp	.+142    	; 0x17aae <Amigo_Command+0x56c>
   17a20:	68 30       	cpi	r22, 0x08	; 8
   17a22:	f1 f4       	brne	.+60     	; 0x17a60 <Amigo_Command+0x51e>
   17a24:	02 30       	cpi	r16, 0x02	; 2
   17a26:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   17a28:	09 f0       	breq	.+2      	; 0x17a2c <Amigo_Command+0x4ea>
   17a2a:	68 c0       	rjmp	.+208    	; 0x17afc <Amigo_Command+0x5ba>
   17a2c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
                printf("[AMIGO Request Status Unbuffered Command]\n");
   17a30:	85 ff       	sbrs	r24, 5
   17a32:	0a c0       	rjmp	.+20     	; 0x17a48 <Amigo_Command+0x506>
   17a34:	8c e2       	ldi	r24, 0x2C	; 44
   17a36:	9a e2       	ldi	r25, 0x2A	; 42
   17a38:	a0 e0       	ldi	r26, 0x00	; 0
   17a3a:	ed b7       	in	r30, 0x3d	; 61
   17a3c:	fe b7       	in	r31, 0x3e	; 62
   17a3e:	81 83       	std	Z+1, r24	; 0x01
   17a40:	92 83       	std	Z+2, r25	; 0x02
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17a42:	a3 83       	std	Z+3, r26	; 0x03
   17a44:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   17a48:	80 91 83 1c 	lds	r24, 0x1C83	; 0x801c83 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_REQUEST_STATUS_UNBUFFERED;
   17a4c:	66 dd       	rcall	.-1332   	; 0x1751a <amigo_check_unit>
   17a4e:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   17a52:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
            amigo_request_status();
   17a56:	82 e0       	ldi	r24, 0x02	; 2
   17a58:	80 83       	st	Z, r24
   17a5a:	0e 94 c3 b4 	call	0x16986	; 0x16986 <amigo_request_status>
            return(status & ERROR_MASK);
        }
        if(op == 0x05 && len == 2)
   17a5e:	49 c0       	rjmp	.+146    	; 0x17af2 <Amigo_Command+0x5b0>
   17a60:	65 30       	cpi	r22, 0x05	; 5
   17a62:	09 f0       	breq	.+2      	; 0x17a66 <Amigo_Command+0x524>
   17a64:	4b c0       	rjmp	.+150    	; 0x17afc <Amigo_Command+0x5ba>
   17a66:	02 30       	cpi	r16, 0x02	; 2
   17a68:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   17a6a:	09 f0       	breq	.+2      	; 0x17a6e <Amigo_Command+0x52c>
   17a6c:	47 c0       	rjmp	.+142    	; 0x17afc <Amigo_Command+0x5ba>
   17a6e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
                printf("[AMIGO Read Buffered Command]\n");
   17a72:	85 ff       	sbrs	r24, 5
   17a74:	0a c0       	rjmp	.+20     	; 0x17a8a <Amigo_Command+0x548>
   17a76:	8d e0       	ldi	r24, 0x0D	; 13
   17a78:	9a e2       	ldi	r25, 0x2A	; 42
   17a7a:	a0 e0       	ldi	r26, 0x00	; 0
   17a7c:	ed b7       	in	r30, 0x3d	; 61
   17a7e:	fe b7       	in	r31, 0x3e	; 62
   17a80:	81 83       	std	Z+1, r24	; 0x01
   17a82:	92 83       	std	Z+2, r25	; 0x02
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17a84:	a3 83       	std	Z+3, r26	; 0x03
   17a86:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   17a8a:	80 91 83 1c 	lds	r24, 0x1C83	; 0x801c83 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_READ_BUFFERED;
   17a8e:	45 dd       	rcall	.-1398   	; 0x1751a <amigo_check_unit>
   17a90:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   17a94:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
   17a98:	87 e0       	ldi	r24, 0x07	; 7
   17a9a:	80 83       	st	Z, r24
   17a9c:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   17aa0:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   17aa4:	81 81       	ldd	r24, Z+1	; 0x01
   17aa6:	90 e0       	ldi	r25, 0x00	; 0
   17aa8:	0e 94 a0 87 	call	0x10f40	; 0x10f40 <gpib_enable_PPR>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x6C)
   17aac:	22 c0       	rjmp	.+68     	; 0x17af2 <Amigo_Command+0x5b0>
   17aae:	fc e6       	ldi	r31, 0x6C	; 108
   17ab0:	ef 16       	cp	r14, r31
    {
        if(op == 0x18 && len == 5)
   17ab2:	f1 04       	cpc	r15, r1
   17ab4:	d1 f4       	brne	.+52     	; 0x17aea <Amigo_Command+0x5a8>
   17ab6:	68 31       	cpi	r22, 0x18	; 24
   17ab8:	09 f5       	brne	.+66     	; 0x17afc <Amigo_Command+0x5ba>
   17aba:	05 30       	cpi	r16, 0x05	; 5
        {
///  Reference: A48 ..  A50

            uint8_t db;
#if SDEBUG
            if(debuglevel & 32)
   17abc:	11 05       	cpc	r17, r1
   17abe:	f1 f4       	brne	.+60     	; 0x17afc <Amigo_Command+0x5ba>
   17ac0:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
                printf("[AMIGO Format]\n");
   17ac4:	85 ff       	sbrs	r24, 5
   17ac6:	0a c0       	rjmp	.+20     	; 0x17adc <Amigo_Command+0x59a>
   17ac8:	8d ef       	ldi	r24, 0xFD	; 253
   17aca:	99 e2       	ldi	r25, 0x29	; 41
   17acc:	a0 e0       	ldi	r26, 0x00	; 0
   17ace:	ed b7       	in	r30, 0x3d	; 61
   17ad0:	fe b7       	in	r31, 0x3e	; 62
   17ad2:	81 83       	std	Z+1, r24	; 0x01
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17ad4:	92 83       	std	Z+2, r25	; 0x02
   17ad6:	a3 83       	std	Z+3, r26	; 0x03
   17ad8:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
            ++ptr; // override not used
            ++ptr; // interleave not used
            db = 0xff & *ptr++;
            amigo_format(db);
   17adc:	80 91 83 1c 	lds	r24, 0x1C83	; 0x801c83 <gpib_iobuff+0x1>
   17ae0:	1c dd       	rcall	.-1480   	; 0x1751a <amigo_check_unit>
   17ae2:	80 91 86 1c 	lds	r24, 0x1C86	; 0x801c86 <gpib_iobuff+0x4>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x70)                   // HP-300 Clear
   17ae6:	58 d9       	rcall	.-3408   	; 0x16d98 <amigo_format>
   17ae8:	04 c0       	rjmp	.+8      	; 0x17af2 <Amigo_Command+0x5b0>
    {
///  Reference: A23
        ++ptr;                                    // Dummy byte
        return(status & ERROR_MASK);
   17aea:	f0 e7       	ldi	r31, 0x70	; 112
   17aec:	ef 16       	cp	r14, r31
   17aee:	f1 04       	cpc	r15, r1
   17af0:	29 f4       	brne	.+10     	; 0x17afc <Amigo_Command+0x5ba>
   17af2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    }
    return ( amigo_todo_op(secondary, op, len) );
   17af4:	9c 8d       	ldd	r25, Y+28	; 0x1c
   17af6:	88 27       	eor	r24, r24
   17af8:	90 7d       	andi	r25, 0xD0	; 208
   17afa:	03 c0       	rjmp	.+6      	; 0x17b02 <Amigo_Command+0x5c0>
}
   17afc:	a8 01       	movw	r20, r16
   17afe:	8e 2d       	mov	r24, r14
   17b00:	ef db       	rcall	.-2082   	; 0x172e0 <amigo_todo_op>
   17b02:	6c 96       	adiw	r28, 0x1c	; 28
   17b04:	e6 e0       	ldi	r30, 0x06	; 6
   17b06:	0c 94 41 e5 	jmp	0x1ca82	; 0x1ca82 <__epilogue_restores__+0x18>

00017b0a <Amigo_Execute>:
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)


int Amigo_Execute( int secondary )
{
   17b0a:	a9 e0       	ldi	r26, 0x09	; 9
   17b0c:	b0 e0       	ldi	r27, 0x00	; 0
   17b0e:	eb e8       	ldi	r30, 0x8B	; 139
   17b10:	fd eb       	ldi	r31, 0xBD	; 189
   17b12:	0c 94 29 e5 	jmp	0x1ca52	; 0x1ca52 <__prologue_saves__+0x20>
   17b16:	ec 01       	movw	r28, r24
#if SDEBUG
    if(debuglevel & 32)
   17b18:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17b1c:	85 ff       	sbrs	r24, 5
   17b1e:	16 c0       	rjmp	.+44     	; 0x17b4c <Amigo_Execute+0x42>
        printf("[AMIGO Execute(%02XH): listen:%02XH, talk:%02XH]\n",
   17b20:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <talking>
   17b24:	90 e0       	ldi	r25, 0x00	; 0
   17b26:	ed b7       	in	r30, 0x3d	; 61
   17b28:	fe b7       	in	r31, 0x3e	; 62
   17b2a:	91 87       	std	Z+9, r25	; 0x09
   17b2c:	80 87       	std	Z+8, r24	; 0x08
   17b2e:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   17b32:	90 e0       	ldi	r25, 0x00	; 0
   17b34:	97 83       	std	Z+7, r25	; 0x07
   17b36:	86 83       	std	Z+6, r24	; 0x06
   17b38:	d5 83       	std	Z+5, r29	; 0x05
   17b3a:	c4 83       	std	Z+4, r28	; 0x04
   17b3c:	8b ec       	ldi	r24, 0xCB	; 203
   17b3e:	99 e2       	ldi	r25, 0x29	; 41
   17b40:	a0 e0       	ldi	r26, 0x00	; 0
   17b42:	81 83       	std	Z+1, r24	; 0x01
   17b44:	92 83       	std	Z+2, r25	; 0x02
   17b46:	a3 83       	std	Z+3, r26	; 0x03
   17b48:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
            secondary, listening, talking);
#endif

    if(talking == UNT)
   17b4c:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <talking>
   17b50:	8f 35       	cpi	r24, 0x5F	; 95
   17b52:	09 f4       	brne	.+2      	; 0x17b56 <Amigo_Execute+0x4c>
   17b54:	ad c0       	rjmp	.+346    	; 0x17cb0 <Amigo_Execute+0x1a6>
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   17b56:	90 e0       	ldi	r25, 0x00	; 0
   17b58:	0e 94 f8 8d 	call	0x11bf0	; 0x11bf0 <AMIGO_is_MTA>
   17b5c:	89 2b       	or	r24, r25
   17b5e:	39 f0       	breq	.+14     	; 0x17b6e <Amigo_Execute+0x64>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
   17b60:	ce 01       	movw	r24, r28
   17b62:	87 7f       	andi	r24, 0xF7	; 247
   17b64:	80 36       	cpi	r24, 0x60	; 96
   17b66:	91 05       	cpc	r25, r1
   17b68:	09 f0       	breq	.+2      	; 0x17b6c <Amigo_Execute+0x62>
   17b6a:	a2 c0       	rjmp	.+324    	; 0x17cb0 <Amigo_Execute+0x1a6>
   17b6c:	08 c0       	rjmp	.+16     	; 0x17b7e <Amigo_Execute+0x74>
#endif

    if(talking == UNT)
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   17b6e:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   17b72:	90 e0       	ldi	r25, 0x00	; 0
   17b74:	0e 94 e9 8d 	call	0x11bd2	; 0x11bd2 <AMIGO_is_MLA>
   17b78:	89 2b       	or	r24, r25
   17b7a:	91 f7       	brne	.-28     	; 0x17b60 <Amigo_Execute+0x56>
   17b7c:	99 c0       	rjmp	.+306    	; 0x17cb0 <Amigo_Execute+0x1a6>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17b7e:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   17b82:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   17b86:	81 81       	ldd	r24, Z+1	; 0x01
   17b88:	90 e0       	ldi	r25, 0x00	; 0
   17b8a:	0e 94 d6 87 	call	0x10fac	; 0x10fac <gpib_disable_PPR>

    if(secondary == 0x60)
   17b8e:	c0 36       	cpi	r28, 0x60	; 96
   17b90:	d1 05       	cpc	r29, r1
   17b92:	09 f0       	breq	.+2      	; 0x17b96 <Amigo_Execute+0x8c>
   17b94:	4e c0       	rjmp	.+156    	; 0x17c32 <Amigo_Execute+0x128>
    {
        switch(AMIGOs->state)
   17b96:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   17b9a:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   17b9e:	e0 81       	ld	r30, Z
   17ba0:	8e 2f       	mov	r24, r30
   17ba2:	90 e0       	ldi	r25, 0x00	; 0
   17ba4:	8b 30       	cpi	r24, 0x0B	; 11
   17ba6:	91 05       	cpc	r25, r1
   17ba8:	08 f0       	brcs	.+2      	; 0x17bac <Amigo_Execute+0xa2>
   17baa:	41 c0       	rjmp	.+130    	; 0x17c2e <Amigo_Execute+0x124>
   17bac:	fc 01       	movw	r30, r24
   17bae:	e0 52       	subi	r30, 0x20	; 32
   17bb0:	ff 4f       	sbci	r31, 0xFF	; 255
   17bb2:	0c 94 d5 e4 	jmp	0x1c9aa	; 0x1c9aa <__tablejump2__>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_COLD_LOAD_READ:
#if SDEBUG
                if(debuglevel & 32)
   17bb6:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17bba:	85 ff       	sbrs	r24, 5
   17bbc:	18 c0       	rjmp	.+48     	; 0x17bee <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Cold Load Read]\n");
   17bbe:	8b ea       	ldi	r24, 0xAB	; 171
   17bc0:	99 e2       	ldi	r25, 0x29	; 41
   17bc2:	0d c0       	rjmp	.+26     	; 0x17bde <Amigo_Execute+0xd4>
#endif
                return ( amigo_buffered_read() );
            case AMIGO_READ_UNBUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   17bc4:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17bc8:	85 ff       	sbrs	r24, 5
   17bca:	11 c0       	rjmp	.+34     	; 0x17bee <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Read Unbuffered]\n");
   17bcc:	8a e8       	ldi	r24, 0x8A	; 138
   17bce:	99 e2       	ldi	r25, 0x29	; 41
   17bd0:	06 c0       	rjmp	.+12     	; 0x17bde <Amigo_Execute+0xd4>
#endif
                return ( amigo_buffered_read() );
            case AMIGO_READ_BUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   17bd2:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17bd6:	85 ff       	sbrs	r24, 5
   17bd8:	0a c0       	rjmp	.+20     	; 0x17bee <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Read Buffered]\n");
   17bda:	8b e6       	ldi	r24, 0x6B	; 107
   17bdc:	99 e2       	ldi	r25, 0x29	; 41
   17bde:	a0 e0       	ldi	r26, 0x00	; 0
   17be0:	ed b7       	in	r30, 0x3d	; 61
   17be2:	fe b7       	in	r31, 0x3e	; 62
   17be4:	81 83       	std	Z+1, r24	; 0x01
   17be6:	92 83       	std	Z+2, r25	; 0x02
   17be8:	a3 83       	std	Z+3, r26	; 0x03
   17bea:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
#endif
                return ( amigo_buffered_read() );
   17bee:	69 d9       	rcall	.-3374   	; 0x16ec2 <amigo_buffered_read>
            case AMIGO_WRITE_UNBUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   17bf0:	61 c0       	rjmp	.+194    	; 0x17cb4 <Amigo_Execute+0x1aa>
   17bf2:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17bf6:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Write Unbuffered]\n");
   17bf8:	18 c0       	rjmp	.+48     	; 0x17c2a <Amigo_Execute+0x120>
   17bfa:	89 e4       	ldi	r24, 0x49	; 73
   17bfc:	99 e2       	ldi	r25, 0x29	; 41
#endif
                return ( amigo_buffered_write() );
            case AMIGO_INITIALIZE:
#if SDEBUG
                if(debuglevel & 32)
   17bfe:	0d c0       	rjmp	.+26     	; 0x17c1a <Amigo_Execute+0x110>
   17c00:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17c04:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Initialize]\n");
   17c06:	11 c0       	rjmp	.+34     	; 0x17c2a <Amigo_Execute+0x120>
   17c08:	8d e2       	ldi	r24, 0x2D	; 45
   17c0a:	99 e2       	ldi	r25, 0x29	; 41
#endif
                return ( amigo_buffered_write() );
            case AMIGO_WRITE_BUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   17c0c:	06 c0       	rjmp	.+12     	; 0x17c1a <Amigo_Execute+0x110>
   17c0e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17c12:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Write Buffered]\n");
   17c14:	0a c0       	rjmp	.+20     	; 0x17c2a <Amigo_Execute+0x120>
   17c16:	8d e0       	ldi	r24, 0x0D	; 13
   17c18:	99 e2       	ldi	r25, 0x29	; 41
   17c1a:	a0 e0       	ldi	r26, 0x00	; 0
   17c1c:	ed b7       	in	r30, 0x3d	; 61
   17c1e:	fe b7       	in	r31, 0x3e	; 62
   17c20:	81 83       	std	Z+1, r24	; 0x01
   17c22:	92 83       	std	Z+2, r25	; 0x02
   17c24:	a3 83       	std	Z+3, r26	; 0x03
#endif
                return ( amigo_buffered_write() );
   17c26:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   17c2a:	14 da       	rcall	.-3032   	; 0x17054 <amigo_buffered_write>
            default:
                return ( amigo_todo(secondary) );
   17c2c:	43 c0       	rjmp	.+134    	; 0x17cb4 <Amigo_Execute+0x1aa>
   17c2e:	80 e6       	ldi	r24, 0x60	; 96
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    if(secondary == 0x68)
   17c30:	3d c0       	rjmp	.+122    	; 0x17cac <Amigo_Execute+0x1a2>
   17c32:	c8 36       	cpi	r28, 0x68	; 104
   17c34:	d1 05       	cpc	r29, r1
    {
        switch(AMIGOs->state)
   17c36:	e1 f5       	brne	.+120    	; 0x17cb0 <Amigo_Execute+0x1a6>
   17c38:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   17c3c:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   17c40:	80 81       	ld	r24, Z
   17c42:	82 30       	cpi	r24, 0x02	; 2
   17c44:	81 f0       	breq	.+32     	; 0x17c66 <Amigo_Execute+0x15c>
   17c46:	18 f4       	brcc	.+6      	; 0x17c4e <Amigo_Execute+0x144>
   17c48:	88 23       	and	r24, r24
   17c4a:	91 f1       	breq	.+100    	; 0x17cb0 <Amigo_Execute+0x1a6>
   17c4c:	2e c0       	rjmp	.+92     	; 0x17caa <Amigo_Execute+0x1a0>
   17c4e:	83 30       	cpi	r24, 0x03	; 3
   17c50:	19 f0       	breq	.+6      	; 0x17c58 <Amigo_Execute+0x14e>
   17c52:	84 30       	cpi	r24, 0x04	; 4
   17c54:	c9 f0       	breq	.+50     	; 0x17c88 <Amigo_Execute+0x17e>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_REQUEST_STATUS_BUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   17c56:	29 c0       	rjmp	.+82     	; 0x17caa <Amigo_Execute+0x1a0>
   17c58:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17c5c:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Request Status Buffered]\n");
   17c5e:	11 c0       	rjmp	.+34     	; 0x17c82 <Amigo_Execute+0x178>
   17c60:	84 ee       	ldi	r24, 0xE4	; 228
   17c62:	98 e2       	ldi	r25, 0x28	; 40
#endif
                return ( amigo_send_status() );
            case AMIGO_REQUEST_STATUS_UNBUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   17c64:	06 c0       	rjmp	.+12     	; 0x17c72 <Amigo_Execute+0x168>
   17c66:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17c6a:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Exicute Request Status Unbuffered]\n");
   17c6c:	0a c0       	rjmp	.+20     	; 0x17c82 <Amigo_Execute+0x178>
   17c6e:	89 eb       	ldi	r24, 0xB9	; 185
   17c70:	98 e2       	ldi	r25, 0x28	; 40
   17c72:	a0 e0       	ldi	r26, 0x00	; 0
   17c74:	ed b7       	in	r30, 0x3d	; 61
   17c76:	fe b7       	in	r31, 0x3e	; 62
   17c78:	81 83       	std	Z+1, r24	; 0x01
   17c7a:	92 83       	std	Z+2, r25	; 0x02
   17c7c:	a3 83       	std	Z+3, r26	; 0x03
   17c7e:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
#endif
                return ( amigo_send_status() );
   17c82:	0e 94 7e b5 	call	0x16afc	; 0x16afc <amigo_send_status>
            case AMIGO_REQUEST_LOGICAL_ADDRESS:
#if SDEBUG
                if(debuglevel & 32)
   17c86:	16 c0       	rjmp	.+44     	; 0x17cb4 <Amigo_Execute+0x1aa>
   17c88:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17c8c:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Request Logical Address]\n");
   17c8e:	0a c0       	rjmp	.+20     	; 0x17ca4 <Amigo_Execute+0x19a>
   17c90:	80 e9       	ldi	r24, 0x90	; 144
   17c92:	98 e2       	ldi	r25, 0x28	; 40
   17c94:	a0 e0       	ldi	r26, 0x00	; 0
   17c96:	ed b7       	in	r30, 0x3d	; 61
   17c98:	fe b7       	in	r31, 0x3e	; 62
   17c9a:	81 83       	std	Z+1, r24	; 0x01
   17c9c:	92 83       	std	Z+2, r25	; 0x02
   17c9e:	a3 83       	std	Z+3, r26	; 0x03
   17ca0:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
#endif
                return ( amigo_send_logical_address() );
   17ca4:	0e 94 20 b5 	call	0x16a40	; 0x16a40 <amigo_send_logical_address>
            default:
                return ( amigo_todo(secondary) );
   17ca8:	05 c0       	rjmp	.+10     	; 0x17cb4 <Amigo_Execute+0x1aa>
   17caa:	88 e6       	ldi	r24, 0x68	; 104
   17cac:	b2 db       	rcall	.-2204   	; 0x17412 <amigo_todo>
    if(secondary == 0x68)
    {
        switch(AMIGOs->state)
        {
            case AMIGO_IDLE:
                return(0);
   17cae:	02 c0       	rjmp	.+4      	; 0x17cb4 <Amigo_Execute+0x1aa>
   17cb0:	80 e0       	ldi	r24, 0x00	; 0
                return ( amigo_todo(secondary) );
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    return(0);
}
   17cb2:	90 e0       	ldi	r25, 0x00	; 0
   17cb4:	cd b7       	in	r28, 0x3d	; 61
   17cb6:	de b7       	in	r29, 0x3e	; 62
   17cb8:	29 96       	adiw	r28, 0x09	; 9
   17cba:	e2 e0       	ldi	r30, 0x02	; 2
   17cbc:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__epilogue_restores__+0x20>

00017cc0 <AMIGO_COMMANDS>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{
   17cc0:	cf 93       	push	r28
   17cc2:	df 93       	push	r29
   17cc4:	c8 2f       	mov	r28, r24

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   17cc6:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <talking>
   17cca:	90 e0       	ldi	r25, 0x00	; 0
   17ccc:	0e 94 f8 8d 	call	0x11bf0	; 0x11bf0 <AMIGO_is_MTA>
   17cd0:	89 2b       	or	r24, r25
   17cd2:	51 f0       	breq	.+20     	; 0x17ce8 <AMIGO_COMMANDS+0x28>
    {

        if(talking == UNT && AMIGO_is_MLA(listening))
   17cd4:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <talking>
   17cd8:	8f 35       	cpi	r24, 0x5F	; 95
   17cda:	71 f4       	brne	.+28     	; 0x17cf8 <AMIGO_COMMANDS+0x38>
   17cdc:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   17ce0:	90 e0       	ldi	r25, 0x00	; 0
   17ce2:	0e 94 e9 8d 	call	0x11bd2	; 0x11bd2 <AMIGO_is_MLA>
   17ce6:	08 c0       	rjmp	.+16     	; 0x17cf8 <AMIGO_COMMANDS+0x38>
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   17ce8:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   17cec:	90 e0       	ldi	r25, 0x00	; 0
   17cee:	0e 94 e9 8d 	call	0x11bd2	; 0x11bd2 <AMIGO_is_MLA>
   17cf2:	89 2b       	or	r24, r25
   17cf4:	79 f7       	brne	.-34     	; 0x17cd4 <AMIGO_COMMANDS+0x14>
   17cf6:	76 c0       	rjmp	.+236    	; 0x17de4 <AMIGO_COMMANDS+0x124>

        if(talking == UNT && AMIGO_is_MLA(listening))
        {
            // printf("AMIGO COMMANDS %02XH NO TALK ADDRESS!\n", ch);
        }
        if(listening == 0 && AMIGO_is_MTA(talking))
   17cf8:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   17cfc:	81 11       	cpse	r24, r1
   17cfe:	05 c0       	rjmp	.+10     	; 0x17d0a <AMIGO_COMMANDS+0x4a>
   17d00:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <talking>
   17d04:	90 e0       	ldi	r25, 0x00	; 0
   17d06:	0e 94 f8 8d 	call	0x11bf0	; 0x11bf0 <AMIGO_is_MTA>
        {
            // printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   17d0a:	c0 36       	cpi	r28, 0x60	; 96
   17d0c:	99 f4       	brne	.+38     	; 0x17d34 <AMIGO_COMMANDS+0x74>
   17d0e:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <talking>
   17d12:	90 e0       	ldi	r25, 0x00	; 0
   17d14:	0e 94 f8 8d 	call	0x11bf0	; 0x11bf0 <AMIGO_is_MTA>
   17d18:	89 2b       	or	r24, r25
   17d1a:	19 f0       	breq	.+6      	; 0x17d22 <AMIGO_COMMANDS+0x62>
        {
            return (Amigo_Execute(ch) );
   17d1c:	80 e6       	ldi	r24, 0x60	; 96
   17d1e:	90 e0       	ldi	r25, 0x00	; 0
   17d20:	14 c0       	rjmp	.+40     	; 0x17d4a <AMIGO_COMMANDS+0x8a>
        if(listening == 0 && AMIGO_is_MTA(talking))
        {
            // printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   17d22:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   17d26:	90 e0       	ldi	r25, 0x00	; 0
   17d28:	0e 94 e9 8d 	call	0x11bd2	; 0x11bd2 <AMIGO_is_MLA>
   17d2c:	89 2b       	or	r24, r25
   17d2e:	09 f4       	brne	.+2      	; 0x17d32 <AMIGO_COMMANDS+0x72>
   17d30:	59 c0       	rjmp	.+178    	; 0x17de4 <AMIGO_COMMANDS+0x124>
   17d32:	f4 cf       	rjmp	.-24     	; 0x17d1c <AMIGO_COMMANDS+0x5c>
        {
            return (Amigo_Execute(ch) );
        }

        if(ch == 0x68 && AMIGO_is_MTA(talking) )
   17d34:	c8 36       	cpi	r28, 0x68	; 104
   17d36:	c1 f4       	brne	.+48     	; 0x17d68 <AMIGO_COMMANDS+0xa8>
   17d38:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <talking>
   17d3c:	90 e0       	ldi	r25, 0x00	; 0
   17d3e:	0e 94 f8 8d 	call	0x11bf0	; 0x11bf0 <AMIGO_is_MTA>
   17d42:	89 2b       	or	r24, r25
   17d44:	21 f0       	breq	.+8      	; 0x17d4e <AMIGO_COMMANDS+0x8e>
        {
            return (Amigo_Execute(ch) );
   17d46:	88 e6       	ldi	r24, 0x68	; 104
   17d48:	90 e0       	ldi	r25, 0x00	; 0
   17d4a:	df de       	rcall	.-578    	; 0x17b0a <Amigo_Execute>
   17d4c:	0b c0       	rjmp	.+22     	; 0x17d64 <AMIGO_COMMANDS+0xa4>
        }

        if(ch == 0x68 && AMIGO_is_MLA(listening) ) // Single byte command
   17d4e:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   17d52:	90 e0       	ldi	r25, 0x00	; 0
   17d54:	0e 94 e9 8d 	call	0x11bd2	; 0x11bd2 <AMIGO_is_MLA>
   17d58:	89 2b       	or	r24, r25
   17d5a:	09 f4       	brne	.+2      	; 0x17d5e <AMIGO_COMMANDS+0x9e>
   17d5c:	43 c0       	rjmp	.+134    	; 0x17de4 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17d5e:	88 e6       	ldi	r24, 0x68	; 104
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) ) // Single byte command
        {
            return (Amigo_Command(ch) );
   17d60:	90 e0       	ldi	r25, 0x00	; 0
   17d62:	ef db       	rcall	.-2082   	; 0x17542 <Amigo_Command>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
            return( amigo_cmd_dsj() );
   17d64:	ec 01       	movw	r28, r24
   17d66:	40 c0       	rjmp	.+128    	; 0x17de8 <AMIGO_COMMANDS+0x128>

        if(ch == 0x68 && AMIGO_is_MLA(listening) ) // Single byte command
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x69 && AMIGO_is_MLA(listening) ) // Single byte command
   17d68:	c9 36       	cpi	r28, 0x69	; 105
   17d6a:	51 f4       	brne	.+20     	; 0x17d80 <AMIGO_COMMANDS+0xc0>
   17d6c:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   17d70:	90 e0       	ldi	r25, 0x00	; 0
   17d72:	0e 94 e9 8d 	call	0x11bd2	; 0x11bd2 <AMIGO_is_MLA>
   17d76:	89 2b       	or	r24, r25
   17d78:	a9 f1       	breq	.+106    	; 0x17de4 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17d7a:	89 e6       	ldi	r24, 0x69	; 105
   17d7c:	90 e0       	ldi	r25, 0x00	; 0
   17d7e:	f1 cf       	rjmp	.-30     	; 0x17d62 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6a && AMIGO_is_MLA(listening) ) // Single byte command
   17d80:	ca 36       	cpi	r28, 0x6A	; 106
   17d82:	51 f4       	brne	.+20     	; 0x17d98 <AMIGO_COMMANDS+0xd8>
   17d84:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   17d88:	90 e0       	ldi	r25, 0x00	; 0
   17d8a:	0e 94 e9 8d 	call	0x11bd2	; 0x11bd2 <AMIGO_is_MLA>
   17d8e:	89 2b       	or	r24, r25
   17d90:	49 f1       	breq	.+82     	; 0x17de4 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17d92:	8a e6       	ldi	r24, 0x6A	; 106
   17d94:	90 e0       	ldi	r25, 0x00	; 0
   17d96:	e5 cf       	rjmp	.-54     	; 0x17d62 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) ) // Single byte command
   17d98:	cc 36       	cpi	r28, 0x6C	; 108
   17d9a:	51 f4       	brne	.+20     	; 0x17db0 <AMIGO_COMMANDS+0xf0>
   17d9c:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   17da0:	90 e0       	ldi	r25, 0x00	; 0
   17da2:	0e 94 e9 8d 	call	0x11bd2	; 0x11bd2 <AMIGO_is_MLA>
   17da6:	89 2b       	or	r24, r25
   17da8:	e9 f0       	breq	.+58     	; 0x17de4 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17daa:	8c e6       	ldi	r24, 0x6C	; 108
   17dac:	90 e0       	ldi	r25, 0x00	; 0
   17dae:	d9 cf       	rjmp	.-78     	; 0x17d62 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
   17db0:	c0 37       	cpi	r28, 0x70	; 112
   17db2:	c1 f4       	brne	.+48     	; 0x17de4 <AMIGO_COMMANDS+0x124>
   17db4:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <talking>
   17db8:	90 e0       	ldi	r25, 0x00	; 0
   17dba:	0e 94 f8 8d 	call	0x11bf0	; 0x11bf0 <AMIGO_is_MTA>
   17dbe:	ec 01       	movw	r28, r24
   17dc0:	89 2b       	or	r24, r25
   17dc2:	51 f0       	breq	.+20     	; 0x17dd8 <AMIGO_COMMANDS+0x118>
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17dc4:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   17dc8:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   17dcc:	81 81       	ldd	r24, Z+1	; 0x01
   17dce:	90 e0       	ldi	r25, 0x00	; 0
   17dd0:	0e 94 d6 87 	call	0x10fac	; 0x10fac <gpib_disable_PPR>
            return( amigo_cmd_dsj() );
   17dd4:	fc d9       	rcall	.-3080   	; 0x171ce <amigo_cmd_dsj>
   17dd6:	c6 cf       	rjmp	.-116    	; 0x17d64 <AMIGO_COMMANDS+0xa4>
        }
        if(ch == 0x7e && ch == 0x7f)
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x70 && AMIGO_is_MLA(listening))
   17dd8:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   17ddc:	90 e0       	ldi	r25, 0x00	; 0
   17dde:	0e 94 e9 8d 	call	0x11bd2	; 0x11bd2 <AMIGO_is_MLA>
   17de2:	02 c0       	rjmp	.+4      	; 0x17de8 <AMIGO_COMMANDS+0x128>
        {
            // NOP
        }
    }
    return(0);
   17de4:	c0 e0       	ldi	r28, 0x00	; 0
   17de6:	d0 e0       	ldi	r29, 0x00	; 0
}
   17de8:	ce 01       	movw	r24, r28
   17dea:	df 91       	pop	r29
   17dec:	cf 91       	pop	r28
   17dee:	08 95       	ret

00017df0 <printer_init>:
/// - Only called once after power on by main().
/// @return  void

void printer_init()
{
    plot.error = 0;
   17df0:	ec e3       	ldi	r30, 0x3C	; 60
   17df2:	f9 e1       	ldi	r31, 0x19	; 25
   17df4:	10 86       	std	Z+8, r1	; 0x08
    plot.count = 0;
   17df6:	10 82       	st	Z, r1
   17df8:	11 82       	std	Z+1, r1	; 0x01
   17dfa:	12 82       	std	Z+2, r1	; 0x02
   17dfc:	13 82       	std	Z+3, r1	; 0x03
    plot.ind = 0;
   17dfe:	15 82       	std	Z+5, r1	; 0x05
   17e00:	14 82       	std	Z+4, r1	; 0x04
    plot.fp = NULL;
   17e02:	12 86       	std	Z+10, r1	; 0x0a
   17e04:	11 86       	std	Z+9, r1	; 0x09
    plot.buf = NULL;
   17e06:	14 86       	std	Z+12, r1	; 0x0c
   17e08:	13 86       	std	Z+11, r1	; 0x0b
   17e0a:	08 95       	ret

00017e0c <receive_plot_flush>:
/// @see posix.h
/// @see printer_buffer()
/// @return  file handle

int receive_plot_flush()
{
   17e0c:	cf 93       	push	r28
   17e0e:	df 93       	push	r29
   17e10:	ad b7       	in	r26, 0x3d	; 61
   17e12:	be b7       	in	r27, 0x3e	; 62
   17e14:	17 97       	sbiw	r26, 0x07	; 7
   17e16:	0f b6       	in	r0, 0x3f	; 63
   17e18:	f8 94       	cli
   17e1a:	be bf       	out	0x3e, r27	; 62
   17e1c:	0f be       	out	0x3f, r0	; 63
   17e1e:	ad bf       	out	0x3d, r26	; 61
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
   17e20:	20 91 45 19 	lds	r18, 0x1945	; 0x801945 <plot+0x9>
   17e24:	30 91 46 19 	lds	r19, 0x1946	; 0x801946 <plot+0xa>
   17e28:	21 15       	cp	r18, r1
   17e2a:	31 05       	cpc	r19, r1
   17e2c:	09 f4       	brne	.+2      	; 0x17e30 <receive_plot_flush+0x24>
   17e2e:	45 c0       	rjmp	.+138    	; 0x17eba <receive_plot_flush+0xae>
   17e30:	80 91 40 19 	lds	r24, 0x1940	; 0x801940 <plot+0x4>
   17e34:	90 91 41 19 	lds	r25, 0x1941	; 0x801941 <plot+0x5>
   17e38:	00 97       	sbiw	r24, 0x00	; 0
   17e3a:	09 f4       	brne	.+2      	; 0x17e3e <receive_plot_flush+0x32>
   17e3c:	40 c0       	rjmp	.+128    	; 0x17ebe <receive_plot_flush+0xb2>
        return(0);

    ret  = fwrite(plot.buf, 1, plot.ind , plot.fp);
   17e3e:	ac 01       	movw	r20, r24
   17e40:	61 e0       	ldi	r22, 0x01	; 1
   17e42:	70 e0       	ldi	r23, 0x00	; 0
   17e44:	80 91 47 19 	lds	r24, 0x1947	; 0x801947 <plot+0xb>
   17e48:	90 91 48 19 	lds	r25, 0x1948	; 0x801948 <plot+0xc>
   17e4c:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <fwrite>
   17e50:	ec 01       	movw	r28, r24
    if(ret != plot.ind)
   17e52:	80 91 40 19 	lds	r24, 0x1940	; 0x801940 <plot+0x4>
   17e56:	90 91 41 19 	lds	r25, 0x1941	; 0x801941 <plot+0x5>
   17e5a:	c8 17       	cp	r28, r24
   17e5c:	d9 07       	cpc	r29, r25
   17e5e:	09 f1       	breq	.+66     	; 0x17ea2 <receive_plot_flush+0x96>
    {
        if(debuglevel & (1+32))
   17e60:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17e64:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   17e68:	81 72       	andi	r24, 0x21	; 33
   17e6a:	99 27       	eor	r25, r25
   17e6c:	89 2b       	or	r24, r25
   17e6e:	b1 f0       	breq	.+44     	; 0x17e9c <receive_plot_flush+0x90>
        {
            perror("receive_plot_flush");
   17e70:	81 e0       	ldi	r24, 0x01	; 1
   17e72:	95 e1       	ldi	r25, 0x15	; 21
   17e74:	0e 94 f5 79 	call	0xf3ea	; 0xf3ea <perror>
            printf("write failed: wanted %d, got:%d\n", plot.ind, ret);
   17e78:	ed b7       	in	r30, 0x3d	; 61
   17e7a:	fe b7       	in	r31, 0x3e	; 62
   17e7c:	d7 83       	std	Z+7, r29	; 0x07
   17e7e:	c6 83       	std	Z+6, r28	; 0x06
   17e80:	80 91 40 19 	lds	r24, 0x1940	; 0x801940 <plot+0x4>
   17e84:	90 91 41 19 	lds	r25, 0x1941	; 0x801941 <plot+0x5>
   17e88:	95 83       	std	Z+5, r25	; 0x05
   17e8a:	84 83       	std	Z+4, r24	; 0x04
   17e8c:	8c ed       	ldi	r24, 0xDC	; 220
   17e8e:	90 e3       	ldi	r25, 0x30	; 48
   17e90:	a0 e0       	ldi	r26, 0x00	; 0
   17e92:	81 83       	std	Z+1, r24	; 0x01
   17e94:	92 83       	std	Z+2, r25	; 0x02
   17e96:	a3 83       	std	Z+3, r26	; 0x03
   17e98:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
        }
        return(-1);
   17e9c:	8f ef       	ldi	r24, 0xFF	; 255
   17e9e:	9f ef       	ldi	r25, 0xFF	; 255
   17ea0:	0e c0       	rjmp	.+28     	; 0x17ebe <receive_plot_flush+0xb2>
    }

    fno = fileno( plot.fp );
   17ea2:	80 91 45 19 	lds	r24, 0x1945	; 0x801945 <plot+0x9>
   17ea6:	90 91 46 19 	lds	r25, 0x1946	; 0x801946 <plot+0xa>
   17eaa:	0e 94 3f 78 	call	0xf07e	; 0xf07e <fileno>
    if(fno < 0)
   17eae:	97 fd       	sbrc	r25, 7
   17eb0:	f5 cf       	rjmp	.-22     	; 0x17e9c <receive_plot_flush+0x90>
        return(-1);
    ///@brief sync filesystem after every write 
    syncfs( fno );
   17eb2:	0e 94 36 7d 	call	0xfa6c	; 0xfa6c <syncfs>
    return (ret);
   17eb6:	ce 01       	movw	r24, r28
   17eb8:	02 c0       	rjmp	.+4      	; 0x17ebe <receive_plot_flush+0xb2>
{
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
        return(0);
   17eba:	80 e0       	ldi	r24, 0x00	; 0
   17ebc:	90 e0       	ldi	r25, 0x00	; 0
    if(fno < 0)
        return(-1);
    ///@brief sync filesystem after every write 
    syncfs( fno );
    return (ret);
}
   17ebe:	cd b7       	in	r28, 0x3d	; 61
   17ec0:	de b7       	in	r29, 0x3e	; 62
   17ec2:	27 96       	adiw	r28, 0x07	; 7
   17ec4:	e2 e0       	ldi	r30, 0x02	; 2
   17ec6:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__epilogue_restores__+0x20>

00017eca <printer_close>:
/// @see posix.h
/// @return  void
/// FYI: for the HP54645D plots end with: pd;pu;pu;sp0;
/// This gets called
void printer_close()
{
   17eca:	ad b7       	in	r26, 0x3d	; 61
   17ecc:	be b7       	in	r27, 0x3e	; 62
   17ece:	17 97       	sbiw	r26, 0x07	; 7
   17ed0:	0f b6       	in	r0, 0x3f	; 63
   17ed2:	f8 94       	cli
   17ed4:	be bf       	out	0x3e, r27	; 62
   17ed6:	0f be       	out	0x3f, r0	; 63
    if( receive_plot_flush() < 0 )
   17ed8:	ad bf       	out	0x3d, r26	; 61
   17eda:	98 df       	rcall	.-208    	; 0x17e0c <receive_plot_flush>
   17edc:	97 ff       	sbrs	r25, 7
        plot.error = 1;
   17ede:	03 c0       	rjmp	.+6      	; 0x17ee6 <printer_close+0x1c>
   17ee0:	81 e0       	ldi	r24, 0x01	; 1
   17ee2:	80 93 44 19 	sts	0x1944, r24	; 0x801944 <plot+0x8>

    if(debuglevel & (1+32))
   17ee6:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17eea:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   17eee:	81 72       	andi	r24, 0x21	; 33
   17ef0:	99 27       	eor	r25, r25
   17ef2:	89 2b       	or	r24, r25
    {
        if(plot.error)
   17ef4:	71 f0       	breq	.+28     	; 0x17f12 <printer_close+0x48>
   17ef6:	80 91 44 19 	lds	r24, 0x1944	; 0x801944 <plot+0x8>
   17efa:	88 23       	and	r24, r24
            printf("ERROR durring write\n");
   17efc:	51 f0       	breq	.+20     	; 0x17f12 <printer_close+0x48>
   17efe:	8b e0       	ldi	r24, 0x0B	; 11
   17f00:	91 e3       	ldi	r25, 0x31	; 49
   17f02:	a0 e0       	ldi	r26, 0x00	; 0
   17f04:	ed b7       	in	r30, 0x3d	; 61
   17f06:	fe b7       	in	r31, 0x3e	; 62
   17f08:	81 83       	std	Z+1, r24	; 0x01
   17f0a:	92 83       	std	Z+2, r25	; 0x02
   17f0c:	a3 83       	std	Z+3, r26	; 0x03
   17f0e:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    }

    if(plot.fp)
   17f12:	80 91 45 19 	lds	r24, 0x1945	; 0x801945 <plot+0x9>
   17f16:	90 91 46 19 	lds	r25, 0x1946	; 0x801946 <plot+0xa>
   17f1a:	00 97       	sbiw	r24, 0x00	; 0
    {
        fclose(plot.fp);
   17f1c:	e1 f0       	breq	.+56     	; 0x17f56 <printer_close+0x8c>
   17f1e:	0e 94 6e 7e 	call	0xfcdc	; 0xfcdc <fclose>
        if(debuglevel & 32)
   17f22:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17f26:	85 ff       	sbrs	r24, 5
            printf("\nDONE: %08ld\n",plot.count);
   17f28:	16 c0       	rjmp	.+44     	; 0x17f56 <printer_close+0x8c>
   17f2a:	80 91 3c 19 	lds	r24, 0x193C	; 0x80193c <plot>
   17f2e:	90 91 3d 19 	lds	r25, 0x193D	; 0x80193d <plot+0x1>
   17f32:	a0 91 3e 19 	lds	r26, 0x193E	; 0x80193e <plot+0x2>
   17f36:	b0 91 3f 19 	lds	r27, 0x193F	; 0x80193f <plot+0x3>
   17f3a:	ed b7       	in	r30, 0x3d	; 61
   17f3c:	fe b7       	in	r31, 0x3e	; 62
   17f3e:	84 83       	std	Z+4, r24	; 0x04
   17f40:	95 83       	std	Z+5, r25	; 0x05
   17f42:	a6 83       	std	Z+6, r26	; 0x06
   17f44:	b7 83       	std	Z+7, r27	; 0x07
   17f46:	8d ef       	ldi	r24, 0xFD	; 253
   17f48:	90 e3       	ldi	r25, 0x30	; 48
   17f4a:	a0 e0       	ldi	r26, 0x00	; 0
   17f4c:	81 83       	std	Z+1, r24	; 0x01
   17f4e:	92 83       	std	Z+2, r25	; 0x02
   17f50:	a3 83       	std	Z+3, r26	; 0x03
   17f52:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    }

    if(plot.buf)
   17f56:	80 91 47 19 	lds	r24, 0x1947	; 0x801947 <plot+0xb>
   17f5a:	90 91 48 19 	lds	r25, 0x1948	; 0x801948 <plot+0xc>
   17f5e:	00 97       	sbiw	r24, 0x00	; 0
        safefree(plot.buf);
   17f60:	11 f0       	breq	.+4      	; 0x17f66 <printer_close+0x9c>
    printer_init();
   17f62:	0e 94 45 2a 	call	0x548a	; 0x548a <safefree>
}
   17f66:	44 df       	rcall	.-376    	; 0x17df0 <printer_init>
   17f68:	ad b7       	in	r26, 0x3d	; 61
   17f6a:	be b7       	in	r27, 0x3e	; 62
   17f6c:	17 96       	adiw	r26, 0x07	; 7
   17f6e:	0f b6       	in	r0, 0x3f	; 63
   17f70:	f8 94       	cli
   17f72:	be bf       	out	0x3e, r27	; 62
   17f74:	0f be       	out	0x3f, r0	; 63
   17f76:	ad bf       	out	0x3d, r26	; 61
   17f78:	08 95       	ret

00017f7a <printer_open>:
/// @see posix.c
/// @see posix.h
/// @return  void

void printer_open(char *name)
{
   17f7a:	ad e5       	ldi	r26, 0x5D	; 93
   17f7c:	b0 e0       	ldi	r27, 0x00	; 0
   17f7e:	e3 ec       	ldi	r30, 0xC3	; 195
   17f80:	ff eb       	ldi	r31, 0xBF	; 191
   17f82:	0c 94 25 e5 	jmp	0x1ca4a	; 0x1ca4a <__prologue_saves__+0x18>
   17f86:	8c 01       	movw	r16, r24

    char *ptr;

    if(!name)
   17f88:	89 2b       	or	r24, r25
   17f8a:	09 f0       	breq	.+2      	; 0x17f8e <printer_open+0x14>
   17f8c:	4f c0       	rjmp	.+158    	; 0x1802c <printer_open+0xb2>
        time_t seconds;
        tm_t *tc;
        ts_t ts;
        char fname[64];

        clock_gettime(0, (ts_t *) &ts);
   17f8e:	be 01       	movw	r22, r28
   17f90:	6e 5a       	subi	r22, 0xAE	; 174
   17f92:	7f 4f       	sbci	r23, 0xFF	; 255
   17f94:	80 e0       	ldi	r24, 0x00	; 0
   17f96:	90 e0       	ldi	r25, 0x00	; 0
   17f98:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <clock_gettime>
        seconds = ts.tv_sec;
   17f9c:	66 96       	adiw	r28, 0x16	; 22
   17f9e:	8c ad       	ldd	r24, Y+60	; 0x3c
   17fa0:	9d ad       	ldd	r25, Y+61	; 0x3d
   17fa2:	ae ad       	ldd	r26, Y+62	; 0x3e
   17fa4:	bf ad       	ldd	r27, Y+63	; 0x3f
   17fa6:	66 97       	sbiw	r28, 0x16	; 22
   17fa8:	6e 96       	adiw	r28, 0x1e	; 30
   17faa:	8c af       	std	Y+60, r24	; 0x3c
   17fac:	9d af       	std	Y+61, r25	; 0x3d
   17fae:	ae af       	std	Y+62, r26	; 0x3e
   17fb0:	bf af       	std	Y+63, r27	; 0x3f
   17fb2:	6e 97       	sbiw	r28, 0x1e	; 30
        tc = gmtime(&seconds);
   17fb4:	ce 01       	movw	r24, r28
   17fb6:	86 5a       	subi	r24, 0xA6	; 166
   17fb8:	9f 4f       	sbci	r25, 0xFF	; 255
   17fba:	0e 94 4c 39 	call	0x7298	; 0x7298 <gmtime>
   17fbe:	8c 01       	movw	r16, r24
        sprintf(fname,"/plot-%02d%s%04d-%02d%02d%02d.plt",
   17fc0:	fc 01       	movw	r30, r24
   17fc2:	e6 80       	ldd	r14, Z+6	; 0x06
   17fc4:	f7 80       	ldd	r15, Z+7	; 0x07
   17fc6:	80 85       	ldd	r24, Z+8	; 0x08
   17fc8:	91 85       	ldd	r25, Z+9	; 0x09
   17fca:	0e 94 28 38 	call	0x7050	; 0x7050 <tm_mon_to_ascii>
   17fce:	f8 01       	movw	r30, r16
   17fd0:	20 81       	ld	r18, Z
   17fd2:	31 81       	ldd	r19, Z+1	; 0x01
   17fd4:	ed b7       	in	r30, 0x3d	; 61
   17fd6:	fe b7       	in	r31, 0x3e	; 62
   17fd8:	31 8b       	std	Z+17, r19	; 0x11
   17fda:	20 8b       	std	Z+16, r18	; 0x10
   17fdc:	f8 01       	movw	r30, r16
   17fde:	22 81       	ldd	r18, Z+2	; 0x02
   17fe0:	33 81       	ldd	r19, Z+3	; 0x03
   17fe2:	ed b7       	in	r30, 0x3d	; 61
   17fe4:	fe b7       	in	r31, 0x3e	; 62
   17fe6:	37 87       	std	Z+15, r19	; 0x0f
   17fe8:	26 87       	std	Z+14, r18	; 0x0e
   17fea:	f8 01       	movw	r30, r16
   17fec:	24 81       	ldd	r18, Z+4	; 0x04
   17fee:	35 81       	ldd	r19, Z+5	; 0x05
   17ff0:	ed b7       	in	r30, 0x3d	; 61
   17ff2:	fe b7       	in	r31, 0x3e	; 62
   17ff4:	35 87       	std	Z+13, r19	; 0x0d
   17ff6:	24 87       	std	Z+12, r18	; 0x0c
   17ff8:	f8 01       	movw	r30, r16
   17ffa:	22 85       	ldd	r18, Z+10	; 0x0a
   17ffc:	33 85       	ldd	r19, Z+11	; 0x0b
   17ffe:	24 59       	subi	r18, 0x94	; 148
   18000:	38 4f       	sbci	r19, 0xF8	; 248
   18002:	ed b7       	in	r30, 0x3d	; 61
   18004:	fe b7       	in	r31, 0x3e	; 62
   18006:	33 87       	std	Z+11, r19	; 0x0b
   18008:	22 87       	std	Z+10, r18	; 0x0a
   1800a:	91 87       	std	Z+9, r25	; 0x09
   1800c:	80 87       	std	Z+8, r24	; 0x08
   1800e:	f7 82       	std	Z+7, r15	; 0x07
   18010:	e6 82       	std	Z+6, r14	; 0x06
   18012:	82 e4       	ldi	r24, 0x42	; 66
   18014:	91 e3       	ldi	r25, 0x31	; 49
   18016:	a0 e0       	ldi	r26, 0x00	; 0
   18018:	83 83       	std	Z+3, r24	; 0x03
   1801a:	94 83       	std	Z+4, r25	; 0x04
   1801c:	a5 83       	std	Z+5, r26	; 0x05
   1801e:	8e 01       	movw	r16, r28
   18020:	0e 5e       	subi	r16, 0xEE	; 238
   18022:	1f 4f       	sbci	r17, 0xFF	; 255
   18024:	12 83       	std	Z+2, r17	; 0x02
   18026:	01 83       	std	Z+1, r16	; 0x01
   18028:	0e 94 d9 47 	call	0x8fb2	; 0x8fb2 <sprintf_P>
    else
    {
        ptr = name;
    }

    if(debuglevel & 32)
   1802c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   18030:	85 ff       	sbrs	r24, 5
   18032:	0c c0       	rjmp	.+24     	; 0x1804c <printer_open+0xd2>
        printf("Capturing plot to:%s\n", ptr);
   18034:	ed b7       	in	r30, 0x3d	; 61
   18036:	fe b7       	in	r31, 0x3e	; 62
   18038:	15 83       	std	Z+5, r17	; 0x05
   1803a:	04 83       	std	Z+4, r16	; 0x04
   1803c:	8c e2       	ldi	r24, 0x2C	; 44
   1803e:	91 e3       	ldi	r25, 0x31	; 49
   18040:	a0 e0       	ldi	r26, 0x00	; 0
   18042:	81 83       	std	Z+1, r24	; 0x01
   18044:	92 83       	std	Z+2, r25	; 0x02
   18046:	a3 83       	std	Z+3, r26	; 0x03
   18048:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>

    plot.fp = fopen(ptr,"wb");
   1804c:	6a e2       	ldi	r22, 0x2A	; 42
   1804e:	78 e0       	ldi	r23, 0x08	; 8
   18050:	c8 01       	movw	r24, r16
   18052:	0e 94 c4 7f 	call	0xff88	; 0xff88 <fopen>
   18056:	90 93 46 19 	sts	0x1946, r25	; 0x801946 <plot+0xa>
   1805a:	80 93 45 19 	sts	0x1945, r24	; 0x801945 <plot+0x9>
    if(plot.fp == NULL)
   1805e:	89 2b       	or	r24, r25
   18060:	b9 f4       	brne	.+46     	; 0x18090 <printer_open+0x116>
    {
        if(debuglevel & (1+32))
   18062:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   18066:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1806a:	81 72       	andi	r24, 0x21	; 33
   1806c:	99 27       	eor	r25, r25
   1806e:	89 2b       	or	r24, r25
   18070:	11 f1       	breq	.+68     	; 0x180b6 <printer_open+0x13c>
        {
            perror("open failed");
   18072:	85 ec       	ldi	r24, 0xC5	; 197
   18074:	9c e0       	ldi	r25, 0x0C	; 12
   18076:	0e 94 f5 79 	call	0xf3ea	; 0xf3ea <perror>
            printf("exiting...\n");
   1807a:	80 e2       	ldi	r24, 0x20	; 32
   1807c:	91 e3       	ldi	r25, 0x31	; 49
   1807e:	a0 e0       	ldi	r26, 0x00	; 0
   18080:	ed b7       	in	r30, 0x3d	; 61
   18082:	fe b7       	in	r31, 0x3e	; 62
   18084:	81 83       	std	Z+1, r24	; 0x01
   18086:	92 83       	std	Z+2, r25	; 0x02
   18088:	a3 83       	std	Z+3, r26	; 0x03
   1808a:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   1808e:	13 c0       	rjmp	.+38     	; 0x180b6 <printer_open+0x13c>
        }
        return;
    }

    plot.buf = calloc(512+1,1);
   18090:	61 e0       	ldi	r22, 0x01	; 1
   18092:	70 e0       	ldi	r23, 0x00	; 0
   18094:	81 e0       	ldi	r24, 0x01	; 1
   18096:	92 e0       	ldi	r25, 0x02	; 2
   18098:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <safecalloc>
   1809c:	90 93 48 19 	sts	0x1948, r25	; 0x801948 <plot+0xc>
   180a0:	80 93 47 19 	sts	0x1947, r24	; 0x801947 <plot+0xb>
    if(plot.buf == NULL)
   180a4:	89 2b       	or	r24, r25
        printer_close();
   180a6:	09 f4       	brne	.+2      	; 0x180aa <printer_open+0x130>
    plot.size = 512;
   180a8:	10 df       	rcall	.-480    	; 0x17eca <printer_close>
   180aa:	80 e0       	ldi	r24, 0x00	; 0
   180ac:	92 e0       	ldi	r25, 0x02	; 2
   180ae:	90 93 43 19 	sts	0x1943, r25	; 0x801943 <plot+0x7>
   180b2:	80 93 42 19 	sts	0x1942, r24	; 0x801942 <plot+0x6>
}
   180b6:	c3 5a       	subi	r28, 0xA3	; 163
   180b8:	df 4f       	sbci	r29, 0xFF	; 255
   180ba:	e6 e0       	ldi	r30, 0x06	; 6
   180bc:	0c 94 41 e5 	jmp	0x1ca82	; 0x1ca82 <__epilogue_restores__+0x18>

000180c0 <printer_buffer>:
///
/// @see posix.c
/// @see posix.h
/// @return  void
void printer_buffer( uint16_t val )
{
   180c0:	cf 93       	push	r28
   180c2:	df 93       	push	r29
   180c4:	ad b7       	in	r26, 0x3d	; 61
   180c6:	be b7       	in	r27, 0x3e	; 62
   180c8:	17 97       	sbiw	r26, 0x07	; 7
   180ca:	0f b6       	in	r0, 0x3f	; 63
   180cc:	f8 94       	cli
   180ce:	be bf       	out	0x3e, r27	; 62
   180d0:	0f be       	out	0x3f, r0	; 63
   180d2:	ad bf       	out	0x3d, r26	; 61
   180d4:	ec 01       	movw	r28, r24

    uint16_t ch;

    if(debuglevel & (1+32))
   180d6:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   180da:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   180de:	81 72       	andi	r24, 0x21	; 33
   180e0:	99 27       	eor	r25, r25
   180e2:	89 2b       	or	r24, r25
   180e4:	c1 f0       	breq	.+48     	; 0x18116 <printer_buffer+0x56>
    {
        if( ( plot.count & 255L ) == 0)
   180e6:	80 91 3c 19 	lds	r24, 0x193C	; 0x80193c <plot>
   180ea:	30 91 3d 19 	lds	r19, 0x193D	; 0x80193d <plot+0x1>
   180ee:	20 91 3e 19 	lds	r18, 0x193E	; 0x80193e <plot+0x2>
   180f2:	90 91 3f 19 	lds	r25, 0x193F	; 0x80193f <plot+0x3>
   180f6:	81 11       	cpse	r24, r1
   180f8:	0e c0       	rjmp	.+28     	; 0x18116 <printer_buffer+0x56>
            printf("%08ld\r",plot.count);
   180fa:	ed b7       	in	r30, 0x3d	; 61
   180fc:	fe b7       	in	r31, 0x3e	; 62
   180fe:	84 83       	std	Z+4, r24	; 0x04
   18100:	35 83       	std	Z+5, r19	; 0x05
   18102:	26 83       	std	Z+6, r18	; 0x06
   18104:	97 83       	std	Z+7, r25	; 0x07
   18106:	85 ed       	ldi	r24, 0xD5	; 213
   18108:	90 e3       	ldi	r25, 0x30	; 48
   1810a:	a0 e0       	ldi	r26, 0x00	; 0
   1810c:	81 83       	std	Z+1, r24	; 0x01
   1810e:	92 83       	std	Z+2, r25	; 0x02
   18110:	a3 83       	std	Z+3, r26	; 0x03
   18112:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    }

    ch = val & 0xff;
    if(val & (0xff00 & ~REN_FLAG))
   18116:	ce 01       	movw	r24, r28
   18118:	88 27       	eor	r24, r24
   1811a:	97 7f       	andi	r25, 0xF7	; 247
   1811c:	89 2b       	or	r24, r25
    {
        if( receive_plot_flush() )
   1811e:	41 f0       	breq	.+16     	; 0x18130 <printer_buffer+0x70>
   18120:	75 de       	rcall	.-790    	; 0x17e0c <receive_plot_flush>
   18122:	89 2b       	or	r24, r25
   18124:	09 f4       	brne	.+2      	; 0x18128 <printer_buffer+0x68>
            plot.error = 1;
   18126:	3f c0       	rjmp	.+126    	; 0x181a6 <printer_buffer+0xe6>
   18128:	81 e0       	ldi	r24, 0x01	; 1
   1812a:	80 93 44 19 	sts	0x1944, r24	; 0x801944 <plot+0x8>
        //plot.count += strlen(ptr);
    }
    else
    {
        ch  = val & 0xff;
        plot.buf[plot.ind++] = ch;
   1812e:	3b c0       	rjmp	.+118    	; 0x181a6 <printer_buffer+0xe6>
   18130:	20 91 47 19 	lds	r18, 0x1947	; 0x801947 <plot+0xb>
   18134:	30 91 48 19 	lds	r19, 0x1948	; 0x801948 <plot+0xc>
   18138:	80 91 40 19 	lds	r24, 0x1940	; 0x801940 <plot+0x4>
   1813c:	90 91 41 19 	lds	r25, 0x1941	; 0x801941 <plot+0x5>
   18140:	ac 01       	movw	r20, r24
   18142:	4f 5f       	subi	r20, 0xFF	; 255
   18144:	5f 4f       	sbci	r21, 0xFF	; 255
   18146:	50 93 41 19 	sts	0x1941, r21	; 0x801941 <plot+0x5>
   1814a:	40 93 40 19 	sts	0x1940, r20	; 0x801940 <plot+0x4>
   1814e:	f9 01       	movw	r30, r18
   18150:	e8 0f       	add	r30, r24
   18152:	f9 1f       	adc	r31, r25
        plot.count++;
   18154:	c0 83       	st	Z, r28
   18156:	80 91 3c 19 	lds	r24, 0x193C	; 0x80193c <plot>
   1815a:	90 91 3d 19 	lds	r25, 0x193D	; 0x80193d <plot+0x1>
   1815e:	a0 91 3e 19 	lds	r26, 0x193E	; 0x80193e <plot+0x2>
   18162:	b0 91 3f 19 	lds	r27, 0x193F	; 0x80193f <plot+0x3>
   18166:	01 96       	adiw	r24, 0x01	; 1
   18168:	a1 1d       	adc	r26, r1
   1816a:	b1 1d       	adc	r27, r1
   1816c:	80 93 3c 19 	sts	0x193C, r24	; 0x80193c <plot>
   18170:	90 93 3d 19 	sts	0x193D, r25	; 0x80193d <plot+0x1>
   18174:	a0 93 3e 19 	sts	0x193E, r26	; 0x80193e <plot+0x2>
   18178:	b0 93 3f 19 	sts	0x193F, r27	; 0x80193f <plot+0x3>

        if(plot.ind >= plot.size)
   1817c:	20 91 40 19 	lds	r18, 0x1940	; 0x801940 <plot+0x4>
   18180:	30 91 41 19 	lds	r19, 0x1941	; 0x801941 <plot+0x5>
   18184:	80 91 42 19 	lds	r24, 0x1942	; 0x801942 <plot+0x6>
   18188:	90 91 43 19 	lds	r25, 0x1943	; 0x801943 <plot+0x7>
   1818c:	28 17       	cp	r18, r24
        {
            if( receive_plot_flush() < 0 )
   1818e:	39 07       	cpc	r19, r25
   18190:	54 f0       	brlt	.+20     	; 0x181a6 <printer_buffer+0xe6>
   18192:	3c de       	rcall	.-904    	; 0x17e0c <receive_plot_flush>
   18194:	97 ff       	sbrs	r25, 7
                plot.error = 1;
   18196:	03 c0       	rjmp	.+6      	; 0x1819e <printer_buffer+0xde>
   18198:	81 e0       	ldi	r24, 0x01	; 1
   1819a:	80 93 44 19 	sts	0x1944, r24	; 0x801944 <plot+0x8>
            plot.ind  = 0;
   1819e:	10 92 41 19 	sts	0x1941, r1	; 0x801941 <plot+0x5>
   181a2:	10 92 40 19 	sts	0x1940, r1	; 0x801940 <plot+0x4>
        }
    }
}
   181a6:	cd b7       	in	r28, 0x3d	; 61
   181a8:	de b7       	in	r29, 0x3e	; 62
   181aa:	27 96       	adiw	r28, 0x07	; 7
   181ac:	e2 e0       	ldi	r30, 0x02	; 2
   181ae:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__epilogue_restores__+0x20>

000181b2 <PRINTER_COMMANDS>:
///
/// @todo  Fully emulated plotter response.
/// @return  0

int PRINTER_COMMANDS(uint8_t ch)
{
   181b2:	cf 93       	push	r28
   181b4:	00 d0       	rcall	.+0      	; 0x181b6 <PRINTER_COMMANDS+0x4>
   181b6:	00 d0       	rcall	.+0      	; 0x181b8 <PRINTER_COMMANDS+0x6>
   181b8:	1f 92       	push	r1
   181ba:	c8 2f       	mov	r28, r24

    // We could, for example, use secondaries to set file names, etc
    // We don not use them yet
    if(PRINTER_is_MLA(listening))
   181bc:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   181c0:	90 e0       	ldi	r25, 0x00	; 0
   181c2:	0e 94 16 8e 	call	0x11c2c	; 0x11c2c <PRINTER_is_MLA>
   181c6:	89 2b       	or	r24, r25
   181c8:	69 f0       	breq	.+26     	; 0x181e4 <PRINTER_COMMANDS+0x32>
    {
#if SDEBUG
        if(debuglevel & 32)
   181ca:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   181ce:	85 ff       	sbrs	r24, 5
   181d0:	22 c0       	rjmp	.+68     	; 0x18216 <PRINTER_COMMANDS+0x64>
            printf("[SC PRINTER Listen: %02XH]\n",  0xff & ch );
   181d2:	8c 2f       	mov	r24, r28
   181d4:	90 e0       	ldi	r25, 0x00	; 0
   181d6:	ed b7       	in	r30, 0x3d	; 61
   181d8:	fe b7       	in	r31, 0x3e	; 62
   181da:	95 83       	std	Z+5, r25	; 0x05
   181dc:	84 83       	std	Z+4, r24	; 0x04
   181de:	89 eb       	ldi	r24, 0xB9	; 185
   181e0:	90 e3       	ldi	r25, 0x30	; 48
   181e2:	13 c0       	rjmp	.+38     	; 0x1820a <PRINTER_COMMANDS+0x58>
#endif
        return(0);
    }

    if(PRINTER_is_MTA(talking))
   181e4:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <talking>
   181e8:	90 e0       	ldi	r25, 0x00	; 0
   181ea:	0e 94 25 8e 	call	0x11c4a	; 0x11c4a <PRINTER_is_MTA>
   181ee:	89 2b       	or	r24, r25
   181f0:	91 f0       	breq	.+36     	; 0x18216 <PRINTER_COMMANDS+0x64>
    {
#if SDEBUG
        if(debuglevel & 32)
   181f2:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   181f6:	85 ff       	sbrs	r24, 5
   181f8:	0e c0       	rjmp	.+28     	; 0x18216 <PRINTER_COMMANDS+0x64>
            printf("[SC PRINTER Talk: %02XH]\n",  0xff & ch );
   181fa:	8c 2f       	mov	r24, r28
   181fc:	90 e0       	ldi	r25, 0x00	; 0
   181fe:	ed b7       	in	r30, 0x3d	; 61
   18200:	fe b7       	in	r31, 0x3e	; 62
   18202:	95 83       	std	Z+5, r25	; 0x05
   18204:	84 83       	std	Z+4, r24	; 0x04
   18206:	8f e9       	ldi	r24, 0x9F	; 159
   18208:	90 e3       	ldi	r25, 0x30	; 48
   1820a:	a0 e0       	ldi	r26, 0x00	; 0
   1820c:	81 83       	std	Z+1, r24	; 0x01
   1820e:	92 83       	std	Z+2, r25	; 0x02
   18210:	a3 83       	std	Z+3, r26	; 0x03
   18212:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
#endif
        return(0);
    }
    return(0);
}
   18216:	80 e0       	ldi	r24, 0x00	; 0
   18218:	90 e0       	ldi	r25, 0x00	; 0
   1821a:	0f 90       	pop	r0
   1821c:	0f 90       	pop	r0
   1821e:	0f 90       	pop	r0
   18220:	0f 90       	pop	r0
   18222:	0f 90       	pop	r0
   18224:	cf 91       	pop	r28
   18226:	08 95       	ret

00018228 <V2B_MSB>:
///@param index: offset into byte array
///@param size: number of bytes to process
///@param val: Value to convert
///@return void
void V2B_MSB(uint8_t *B, int index, int size, uint32_t val)
{
   18228:	0f 93       	push	r16
   1822a:	1f 93       	push	r17
   1822c:	da 01       	movw	r26, r20
   1822e:	11 97       	sbiw	r26, 0x01	; 1
    int i;
    for(i=size-1;i>=0;--i)
   18230:	b7 fd       	sbrc	r27, 7
   18232:	0b c0       	rjmp	.+22     	; 0x1824a <V2B_MSB+0x22>
    {
        B[index+i] = val & 0xff;
   18234:	fd 01       	movw	r30, r26
   18236:	e6 0f       	add	r30, r22
   18238:	f7 1f       	adc	r31, r23
   1823a:	e8 0f       	add	r30, r24
   1823c:	f9 1f       	adc	r31, r25
   1823e:	00 83       	st	Z, r16
        val >>= 8;
   18240:	01 2f       	mov	r16, r17
   18242:	12 2f       	mov	r17, r18
   18244:	23 2f       	mov	r18, r19
   18246:	33 27       	eor	r19, r19
   18248:	f2 cf       	rjmp	.-28     	; 0x1822e <V2B_MSB+0x6>
    }
}
   1824a:	1f 91       	pop	r17
   1824c:	0f 91       	pop	r16
   1824e:	08 95       	ret

00018250 <V2B_LSB>:
///@param index: offset into byte array
///@param size: number of bytes to process
///@param val: Value to convert
///@return void
void V2B_LSB(uint8_t *B, int index, int size, uint32_t val)
{
   18250:	0f 93       	push	r16
   18252:	1f 93       	push	r17
   18254:	fc 01       	movw	r30, r24
   18256:	e6 0f       	add	r30, r22
   18258:	f7 1f       	adc	r31, r23
   1825a:	bf 01       	movw	r22, r30
    int i;
    for(i=0;i<size;++i)
   1825c:	cf 01       	movw	r24, r30
   1825e:	86 1b       	sub	r24, r22
   18260:	97 0b       	sbc	r25, r23
   18262:	84 17       	cp	r24, r20
   18264:	95 07       	cpc	r25, r21
   18266:	34 f4       	brge	.+12     	; 0x18274 <V2B_LSB+0x24>
    {
        B[index+i] = val & 0xff;
   18268:	01 93       	st	Z+, r16
        val >>= 8;
   1826a:	01 2f       	mov	r16, r17
   1826c:	12 2f       	mov	r17, r18
   1826e:	23 2f       	mov	r18, r19
   18270:	33 27       	eor	r19, r19
   18272:	f4 cf       	rjmp	.-24     	; 0x1825c <V2B_LSB+0xc>
    }
}
   18274:	1f 91       	pop	r17
   18276:	0f 91       	pop	r16
   18278:	08 95       	ret

0001827a <B2V_MSB>:
///@param B: byte array
///@param index: offset into byte array
///@param size: number of bytes to process
///@return value
uint32_t B2V_MSB(uint8_t *B, int index, int size)
{
   1827a:	cf 92       	push	r12
   1827c:	df 92       	push	r13
   1827e:	ef 92       	push	r14
   18280:	ff 92       	push	r15
   18282:	fc 01       	movw	r30, r24
   18284:	e6 0f       	add	r30, r22
   18286:	f7 1f       	adc	r31, r23
    int i;
    uint32_t val = 0;
   18288:	60 e0       	ldi	r22, 0x00	; 0
   1828a:	70 e0       	ldi	r23, 0x00	; 0
   1828c:	cb 01       	movw	r24, r22
   1828e:	df 01       	movw	r26, r30

    for(i=0;i<size;++i)
   18290:	9f 01       	movw	r18, r30
   18292:	2a 1b       	sub	r18, r26
   18294:	3b 0b       	sbc	r19, r27
   18296:	24 17       	cp	r18, r20
   18298:	35 07       	cpc	r19, r21
   1829a:	4c f4       	brge	.+18     	; 0x182ae <B2V_MSB+0x34>
    {
        val <<= 8;
   1829c:	cc 24       	eor	r12, r12
   1829e:	d6 2e       	mov	r13, r22
   182a0:	e7 2e       	mov	r14, r23
   182a2:	f8 2e       	mov	r15, r24
        val |= (uint8_t) (B[i+index] & 0xff);
   182a4:	21 91       	ld	r18, Z+
   182a6:	c7 01       	movw	r24, r14
   182a8:	b6 01       	movw	r22, r12
   182aa:	62 2b       	or	r22, r18
   182ac:	f1 cf       	rjmp	.-30     	; 0x18290 <B2V_MSB+0x16>
    }
        return(val);
}
   182ae:	ff 90       	pop	r15
   182b0:	ef 90       	pop	r14
   182b2:	df 90       	pop	r13
   182b4:	cf 90       	pop	r12
   182b6:	08 95       	ret

000182b8 <B2V_LSB>:
///@param B: byte array
///@param index: offset into byte array
///@param size: number of bytes to process
///@return value
uint32_t B2V_LSB(uint8_t *B, int index, int size)
{
   182b8:	cf 92       	push	r12
   182ba:	df 92       	push	r13
   182bc:	ef 92       	push	r14
   182be:	ff 92       	push	r15
   182c0:	9c 01       	movw	r18, r24
   182c2:	db 01       	movw	r26, r22
    int i;
    uint32_t val = 0;
   182c4:	60 e0       	ldi	r22, 0x00	; 0
   182c6:	70 e0       	ldi	r23, 0x00	; 0
   182c8:	cb 01       	movw	r24, r22
   182ca:	41 50       	subi	r20, 0x01	; 1
   182cc:	51 09       	sbc	r21, r1

    for(i=size-1;i>=0;--i)
   182ce:	57 fd       	sbrc	r21, 7
   182d0:	0e c0       	rjmp	.+28     	; 0x182ee <B2V_LSB+0x36>
    {
        val <<= 8;
   182d2:	cc 24       	eor	r12, r12
   182d4:	d6 2e       	mov	r13, r22
   182d6:	e7 2e       	mov	r14, r23
   182d8:	f8 2e       	mov	r15, r24
        val |= (uint8_t) (B[i+index] & 0xff);
   182da:	fa 01       	movw	r30, r20
   182dc:	ea 0f       	add	r30, r26
   182de:	fb 1f       	adc	r31, r27
   182e0:	e2 0f       	add	r30, r18
   182e2:	f3 1f       	adc	r31, r19
   182e4:	e0 81       	ld	r30, Z
   182e6:	c7 01       	movw	r24, r14
   182e8:	b6 01       	movw	r22, r12
   182ea:	6e 2b       	or	r22, r30
   182ec:	ee cf       	rjmp	.-36     	; 0x182ca <B2V_LSB+0x12>
    }
        return(val);
}
   182ee:	ff 90       	pop	r15
   182f0:	ef 90       	pop	r14
   182f2:	df 90       	pop	r13
   182f4:	cf 90       	pop	r12
   182f6:	08 95       	ret

000182f8 <lif_help>:
   182f8:	cf 93       	push	r28
   182fa:	df 93       	push	r29
   182fc:	00 d0       	rcall	.+0      	; 0x182fe <lif_help+0x6>
   182fe:	1f 92       	push	r1
   18300:	ec 01       	movw	r28, r24
   18302:	82 e8       	ldi	r24, 0x82	; 130
   18304:	95 e4       	ldi	r25, 0x45	; 69
   18306:	a0 e0       	ldi	r26, 0x00	; 0
   18308:	ed b7       	in	r30, 0x3d	; 61
   1830a:	fe b7       	in	r31, 0x3e	; 62
   1830c:	81 83       	std	Z+1, r24	; 0x01
   1830e:	92 83       	std	Z+2, r25	; 0x02
   18310:	a3 83       	std	Z+3, r26	; 0x03
   18312:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   18316:	cd 2b       	or	r28, r29
   18318:	51 f0       	breq	.+20     	; 0x1832e <lif_help+0x36>
   1831a:	89 eb       	ldi	r24, 0xB9	; 185
   1831c:	93 e4       	ldi	r25, 0x43	; 67
   1831e:	a0 e0       	ldi	r26, 0x00	; 0
   18320:	ed b7       	in	r30, 0x3d	; 61
   18322:	fe b7       	in	r31, 0x3e	; 62
   18324:	81 83       	std	Z+1, r24	; 0x01
   18326:	92 83       	std	Z+2, r25	; 0x02
   18328:	a3 83       	std	Z+3, r26	; 0x03
   1832a:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   1832e:	cd b7       	in	r28, 0x3d	; 61
   18330:	de b7       	in	r29, 0x3e	; 62
   18332:	23 96       	adiw	r28, 0x03	; 3
   18334:	e2 e0       	ldi	r30, 0x02	; 2
   18336:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__epilogue_restores__+0x20>

0001833a <lif_calloc>:
   1833a:	cf 92       	push	r12
   1833c:	df 92       	push	r13
   1833e:	ef 92       	push	r14
   18340:	ff 92       	push	r15
   18342:	cf 93       	push	r28
   18344:	df 93       	push	r29
   18346:	ad b7       	in	r26, 0x3d	; 61
   18348:	be b7       	in	r27, 0x3e	; 62
   1834a:	17 97       	sbiw	r26, 0x07	; 7
   1834c:	0f b6       	in	r0, 0x3f	; 63
   1834e:	f8 94       	cli
   18350:	be bf       	out	0x3e, r27	; 62
   18352:	0f be       	out	0x3f, r0	; 63
   18354:	ad bf       	out	0x3d, r26	; 61
   18356:	6b 01       	movw	r12, r22
   18358:	7c 01       	movw	r14, r24
   1835a:	61 e0       	ldi	r22, 0x01	; 1
   1835c:	70 e0       	ldi	r23, 0x00	; 0
   1835e:	c6 01       	movw	r24, r12
   18360:	0e 94 f9 29 	call	0x53f2	; 0x53f2 <safecalloc>
   18364:	ec 01       	movw	r28, r24
   18366:	89 2b       	or	r24, r25
   18368:	71 f4       	brne	.+28     	; 0x18386 <lif_calloc+0x4c>
   1836a:	ed b7       	in	r30, 0x3d	; 61
   1836c:	fe b7       	in	r31, 0x3e	; 62
   1836e:	c4 82       	std	Z+4, r12	; 0x04
   18370:	d5 82       	std	Z+5, r13	; 0x05
   18372:	e6 82       	std	Z+6, r14	; 0x06
   18374:	f7 82       	std	Z+7, r15	; 0x07
   18376:	8f e6       	ldi	r24, 0x6F	; 111
   18378:	93 e4       	ldi	r25, 0x43	; 67
   1837a:	a0 e0       	ldi	r26, 0x00	; 0
   1837c:	81 83       	std	Z+1, r24	; 0x01
   1837e:	92 83       	std	Z+2, r25	; 0x02
   18380:	a3 83       	std	Z+3, r26	; 0x03
   18382:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   18386:	ce 01       	movw	r24, r28
   18388:	ad b7       	in	r26, 0x3d	; 61
   1838a:	be b7       	in	r27, 0x3e	; 62
   1838c:	17 96       	adiw	r26, 0x07	; 7
   1838e:	0f b6       	in	r0, 0x3f	; 63
   18390:	f8 94       	cli
   18392:	be bf       	out	0x3e, r27	; 62
   18394:	0f be       	out	0x3f, r0	; 63
   18396:	ad bf       	out	0x3d, r26	; 61
   18398:	df 91       	pop	r29
   1839a:	cf 91       	pop	r28
   1839c:	ff 90       	pop	r15
   1839e:	ef 90       	pop	r14
   183a0:	df 90       	pop	r13
   183a2:	cf 90       	pop	r12
   183a4:	08 95       	ret

000183a6 <lif_free>:
   183a6:	00 d0       	rcall	.+0      	; 0x183a8 <lif_free+0x2>
   183a8:	1f 92       	push	r1
   183aa:	00 97       	sbiw	r24, 0x00	; 0
   183ac:	59 f4       	brne	.+22     	; 0x183c4 <lif_free+0x1e>
   183ae:	87 e5       	ldi	r24, 0x57	; 87
   183b0:	93 e4       	ldi	r25, 0x43	; 67
   183b2:	a0 e0       	ldi	r26, 0x00	; 0
   183b4:	ed b7       	in	r30, 0x3d	; 61
   183b6:	fe b7       	in	r31, 0x3e	; 62
   183b8:	81 83       	std	Z+1, r24	; 0x01
   183ba:	92 83       	std	Z+2, r25	; 0x02
   183bc:	a3 83       	std	Z+3, r26	; 0x03
   183be:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   183c2:	02 c0       	rjmp	.+4      	; 0x183c8 <lif_free+0x22>
   183c4:	0e 94 45 2a 	call	0x548a	; 0x548a <safefree>
   183c8:	0f 90       	pop	r0
   183ca:	0f 90       	pop	r0
   183cc:	0f 90       	pop	r0
   183ce:	08 95       	ret

000183d0 <lif_stralloc>:
   183d0:	0f 93       	push	r16
   183d2:	1f 93       	push	r17
   183d4:	cf 93       	push	r28
   183d6:	df 93       	push	r29
   183d8:	ec 01       	movw	r28, r24
   183da:	fc 01       	movw	r30, r24
   183dc:	01 90       	ld	r0, Z+
   183de:	00 20       	and	r0, r0
   183e0:	e9 f7       	brne	.-6      	; 0x183dc <lif_stralloc+0xc>
   183e2:	bf 01       	movw	r22, r30
   183e4:	68 1b       	sub	r22, r24
   183e6:	79 0b       	sbc	r23, r25
   183e8:	6d 5f       	subi	r22, 0xFD	; 253
   183ea:	7f 4f       	sbci	r23, 0xFF	; 255
   183ec:	07 2e       	mov	r0, r23
   183ee:	00 0c       	add	r0, r0
   183f0:	88 0b       	sbc	r24, r24
   183f2:	99 0b       	sbc	r25, r25
   183f4:	a2 df       	rcall	.-188    	; 0x1833a <lif_calloc>
   183f6:	8c 01       	movw	r16, r24
   183f8:	00 97       	sbiw	r24, 0x00	; 0
   183fa:	19 f0       	breq	.+6      	; 0x18402 <lif_stralloc+0x32>
   183fc:	be 01       	movw	r22, r28
   183fe:	0e 94 e5 32 	call	0x65ca	; 0x65ca <strcpy>
   18402:	c8 01       	movw	r24, r16
   18404:	df 91       	pop	r29
   18406:	cf 91       	pop	r28
   18408:	1f 91       	pop	r17
   1840a:	0f 91       	pop	r16
   1840c:	08 95       	ret

0001840e <lif_open>:
   1840e:	ef 92       	push	r14
   18410:	ff 92       	push	r15
   18412:	0f 93       	push	r16
   18414:	1f 93       	push	r17
   18416:	cf 93       	push	r28
   18418:	df 93       	push	r29
   1841a:	ad b7       	in	r26, 0x3d	; 61
   1841c:	be b7       	in	r27, 0x3e	; 62
   1841e:	17 97       	sbiw	r26, 0x07	; 7
   18420:	0f b6       	in	r0, 0x3f	; 63
   18422:	f8 94       	cli
   18424:	be bf       	out	0x3e, r27	; 62
   18426:	0f be       	out	0x3f, r0	; 63
   18428:	ad bf       	out	0x3d, r26	; 61
   1842a:	8c 01       	movw	r16, r24
   1842c:	7b 01       	movw	r14, r22
   1842e:	0e 94 c4 7f 	call	0xff88	; 0xff88 <fopen>
   18432:	ec 01       	movw	r28, r24
   18434:	89 2b       	or	r24, r25
   18436:	71 f4       	brne	.+28     	; 0x18454 <lif_open+0x46>
   18438:	ed b7       	in	r30, 0x3d	; 61
   1843a:	fe b7       	in	r31, 0x3e	; 62
   1843c:	f7 82       	std	Z+7, r15	; 0x07
   1843e:	e6 82       	std	Z+6, r14	; 0x06
   18440:	15 83       	std	Z+5, r17	; 0x05
   18442:	04 83       	std	Z+4, r16	; 0x04
   18444:	82 e3       	ldi	r24, 0x32	; 50
   18446:	93 e4       	ldi	r25, 0x43	; 67
   18448:	a0 e0       	ldi	r26, 0x00	; 0
   1844a:	81 83       	std	Z+1, r24	; 0x01
   1844c:	92 83       	std	Z+2, r25	; 0x02
   1844e:	a3 83       	std	Z+3, r26	; 0x03
   18450:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   18454:	ce 01       	movw	r24, r28
   18456:	cd b7       	in	r28, 0x3d	; 61
   18458:	de b7       	in	r29, 0x3e	; 62
   1845a:	27 96       	adiw	r28, 0x07	; 7
   1845c:	e6 e0       	ldi	r30, 0x06	; 6
   1845e:	0c 94 41 e5 	jmp	0x1ca82	; 0x1ca82 <__epilogue_restores__+0x18>

00018462 <lif_stat>:
   18462:	0f 93       	push	r16
   18464:	1f 93       	push	r17
   18466:	cf 93       	push	r28
   18468:	df 93       	push	r29
   1846a:	00 d0       	rcall	.+0      	; 0x1846c <lif_stat+0xa>
   1846c:	00 d0       	rcall	.+0      	; 0x1846e <lif_stat+0xc>
   1846e:	1f 92       	push	r1
   18470:	8c 01       	movw	r16, r24
   18472:	d6 2f       	mov	r29, r22
   18474:	c7 2f       	mov	r28, r23
   18476:	0e 94 c9 7a 	call	0xf592	; 0xf592 <stat>
   1847a:	97 ff       	sbrs	r25, 7
   1847c:	0f c0       	rjmp	.+30     	; 0x1849c <lif_stat+0x3a>
   1847e:	ed b7       	in	r30, 0x3d	; 61
   18480:	fe b7       	in	r31, 0x3e	; 62
   18482:	15 83       	std	Z+5, r17	; 0x05
   18484:	04 83       	std	Z+4, r16	; 0x04
   18486:	89 e1       	ldi	r24, 0x19	; 25
   18488:	93 e4       	ldi	r25, 0x43	; 67
   1848a:	a0 e0       	ldi	r26, 0x00	; 0
   1848c:	81 83       	std	Z+1, r24	; 0x01
   1848e:	92 83       	std	Z+2, r25	; 0x02
   18490:	a3 83       	std	Z+3, r26	; 0x03
   18492:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   18496:	80 e0       	ldi	r24, 0x00	; 0
   18498:	90 e0       	ldi	r25, 0x00	; 0
   1849a:	02 c0       	rjmp	.+4      	; 0x184a0 <lif_stat+0x3e>
   1849c:	8d 2f       	mov	r24, r29
   1849e:	9c 2f       	mov	r25, r28
   184a0:	cd b7       	in	r28, 0x3d	; 61
   184a2:	de b7       	in	r29, 0x3e	; 62
   184a4:	25 96       	adiw	r28, 0x05	; 5
   184a6:	e4 e0       	ldi	r30, 0x04	; 4
   184a8:	0c 94 43 e5 	jmp	0x1ca86	; 0x1ca86 <__epilogue_restores__+0x1c>

000184ac <lif_seek_msg>:
   184ac:	a9 e0       	ldi	r26, 0x09	; 9
   184ae:	b0 e0       	ldi	r27, 0x00	; 0
   184b0:	ec e5       	ldi	r30, 0x5C	; 92
   184b2:	f2 ec       	ldi	r31, 0xC2	; 194
   184b4:	0c 94 23 e5 	jmp	0x1ca46	; 0x1ca46 <__prologue_saves__+0x14>
   184b8:	ec 01       	movw	r28, r24
   184ba:	6a 01       	movw	r12, r20
   184bc:	7b 01       	movw	r14, r22
   184be:	89 01       	movw	r16, r18
   184c0:	0e 94 03 7c 	call	0xf806	; 0xf806 <ftell>
   184c4:	6c 15       	cp	r22, r12
   184c6:	7d 05       	cpc	r23, r13
   184c8:	8e 05       	cpc	r24, r14
   184ca:	9f 05       	cpc	r25, r15
   184cc:	19 f4       	brne	.+6      	; 0x184d4 <lif_seek_msg+0x28>
   184ce:	81 e0       	ldi	r24, 0x01	; 1
   184d0:	90 e0       	ldi	r25, 0x00	; 0
   184d2:	1b c0       	rjmp	.+54     	; 0x1850a <lif_seek_msg+0x5e>
   184d4:	20 e0       	ldi	r18, 0x00	; 0
   184d6:	30 e0       	ldi	r19, 0x00	; 0
   184d8:	b7 01       	movw	r22, r14
   184da:	a6 01       	movw	r20, r12
   184dc:	ce 01       	movw	r24, r28
   184de:	0e 94 86 7c 	call	0xf90c	; 0xf90c <fseek>
   184e2:	97 ff       	sbrs	r25, 7
   184e4:	f4 cf       	rjmp	.-24     	; 0x184ce <lif_seek_msg+0x22>
   184e6:	ed b7       	in	r30, 0x3d	; 61
   184e8:	fe b7       	in	r31, 0x3e	; 62
   184ea:	c6 82       	std	Z+6, r12	; 0x06
   184ec:	d7 82       	std	Z+7, r13	; 0x07
   184ee:	e0 86       	std	Z+8, r14	; 0x08
   184f0:	f1 86       	std	Z+9, r15	; 0x09
   184f2:	15 83       	std	Z+5, r17	; 0x05
   184f4:	04 83       	std	Z+4, r16	; 0x04
   184f6:	88 ef       	ldi	r24, 0xF8	; 248
   184f8:	92 e4       	ldi	r25, 0x42	; 66
   184fa:	a0 e0       	ldi	r26, 0x00	; 0
   184fc:	81 83       	std	Z+1, r24	; 0x01
   184fe:	92 83       	std	Z+2, r25	; 0x02
   18500:	a3 83       	std	Z+3, r26	; 0x03
   18502:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   18506:	80 e0       	ldi	r24, 0x00	; 0
   18508:	90 e0       	ldi	r25, 0x00	; 0
   1850a:	cd b7       	in	r28, 0x3d	; 61
   1850c:	de b7       	in	r29, 0x3e	; 62
   1850e:	29 96       	adiw	r28, 0x09	; 9
   18510:	e8 e0       	ldi	r30, 0x08	; 8
   18512:	0c 94 3f e5 	jmp	0x1ca7e	; 0x1ca7e <__epilogue_restores__+0x14>

00018516 <lif_read>:
   18516:	af e0       	ldi	r26, 0x0F	; 15
   18518:	b0 e0       	ldi	r27, 0x00	; 0
   1851a:	e1 e9       	ldi	r30, 0x91	; 145
   1851c:	f2 ec       	ldi	r31, 0xC2	; 194
   1851e:	0c 94 1f e5 	jmp	0x1ca3e	; 0x1ca3e <__prologue_saves__+0xc>
   18522:	ec 01       	movw	r28, r24
   18524:	7b 01       	movw	r14, r22
   18526:	49 01       	movw	r8, r18
   18528:	5a 01       	movw	r10, r20
   1852a:	28 81       	ld	r18, Y
   1852c:	39 81       	ldd	r19, Y+1	; 0x01
   1852e:	b5 01       	movw	r22, r10
   18530:	a4 01       	movw	r20, r8
   18532:	8a 81       	ldd	r24, Y+2	; 0x02
   18534:	9b 81       	ldd	r25, Y+3	; 0x03
   18536:	ba df       	rcall	.-140    	; 0x184ac <lif_seek_msg>
   18538:	89 2b       	or	r24, r25
   1853a:	91 f1       	breq	.+100    	; 0x185a0 <lif_read+0x8a>
   1853c:	2a 81       	ldd	r18, Y+2	; 0x02
   1853e:	3b 81       	ldd	r19, Y+3	; 0x03
   18540:	a8 01       	movw	r20, r16
   18542:	61 e0       	ldi	r22, 0x01	; 1
   18544:	70 e0       	ldi	r23, 0x00	; 0
   18546:	c7 01       	movw	r24, r14
   18548:	0e 94 1a 7d 	call	0xfa34	; 0xfa34 <fread>
   1854c:	6c 01       	movw	r12, r24
   1854e:	e1 2c       	mov	r14, r1
   18550:	f1 2c       	mov	r15, r1
   18552:	b8 01       	movw	r22, r16
   18554:	01 2e       	mov	r0, r17
   18556:	00 0c       	add	r0, r0
   18558:	88 0b       	sbc	r24, r24
   1855a:	99 0b       	sbc	r25, r25
   1855c:	c6 16       	cp	r12, r22
   1855e:	d7 06       	cpc	r13, r23
   18560:	e8 06       	cpc	r14, r24
   18562:	f9 06       	cpc	r15, r25
   18564:	19 f1       	breq	.+70     	; 0x185ac <lif_read+0x96>
   18566:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1856a:	80 ff       	sbrs	r24, 0
   1856c:	1d c0       	rjmp	.+58     	; 0x185a8 <lif_read+0x92>
   1856e:	ed b7       	in	r30, 0x3d	; 61
   18570:	fe b7       	in	r31, 0x3e	; 62
   18572:	17 87       	std	Z+15, r17	; 0x0f
   18574:	06 87       	std	Z+14, r16	; 0x0e
   18576:	c2 86       	std	Z+10, r12	; 0x0a
   18578:	d3 86       	std	Z+11, r13	; 0x0b
   1857a:	e4 86       	std	Z+12, r14	; 0x0c
   1857c:	f5 86       	std	Z+13, r15	; 0x0d
   1857e:	86 82       	std	Z+6, r8	; 0x06
   18580:	97 82       	std	Z+7, r9	; 0x07
   18582:	a0 86       	std	Z+8, r10	; 0x08
   18584:	b1 86       	std	Z+9, r11	; 0x09
   18586:	88 81       	ld	r24, Y
   18588:	99 81       	ldd	r25, Y+1	; 0x01
   1858a:	95 83       	std	Z+5, r25	; 0x05
   1858c:	84 83       	std	Z+4, r24	; 0x04
   1858e:	8c eb       	ldi	r24, 0xBC	; 188
   18590:	92 e4       	ldi	r25, 0x42	; 66
   18592:	a0 e0       	ldi	r26, 0x00	; 0
   18594:	81 83       	std	Z+1, r24	; 0x01
   18596:	92 83       	std	Z+2, r25	; 0x02
   18598:	a3 83       	std	Z+3, r26	; 0x03
   1859a:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   1859e:	04 c0       	rjmp	.+8      	; 0x185a8 <lif_read+0x92>
   185a0:	60 e0       	ldi	r22, 0x00	; 0
   185a2:	70 e0       	ldi	r23, 0x00	; 0
   185a4:	cb 01       	movw	r24, r22
   185a6:	02 c0       	rjmp	.+4      	; 0x185ac <lif_read+0x96>
   185a8:	c7 01       	movw	r24, r14
   185aa:	b6 01       	movw	r22, r12
   185ac:	cd b7       	in	r28, 0x3d	; 61
   185ae:	de b7       	in	r29, 0x3e	; 62
   185b0:	2f 96       	adiw	r28, 0x0f	; 15
   185b2:	ec e0       	ldi	r30, 0x0C	; 12
   185b4:	0c 94 3b e5 	jmp	0x1ca76	; 0x1ca76 <__epilogue_restores__+0xc>

000185b8 <lif_write>:
   185b8:	8f 92       	push	r8
   185ba:	9f 92       	push	r9
   185bc:	af 92       	push	r10
   185be:	bf 92       	push	r11
   185c0:	ef 92       	push	r14
   185c2:	ff 92       	push	r15
   185c4:	0f 93       	push	r16
   185c6:	1f 93       	push	r17
   185c8:	cf 93       	push	r28
   185ca:	df 93       	push	r29
   185cc:	ad b7       	in	r26, 0x3d	; 61
   185ce:	be b7       	in	r27, 0x3e	; 62
   185d0:	1d 97       	sbiw	r26, 0x0d	; 13
   185d2:	0f b6       	in	r0, 0x3f	; 63
   185d4:	f8 94       	cli
   185d6:	be bf       	out	0x3e, r27	; 62
   185d8:	0f be       	out	0x3f, r0	; 63
   185da:	ad bf       	out	0x3d, r26	; 61
   185dc:	7c 01       	movw	r14, r24
   185de:	eb 01       	movw	r28, r22
   185e0:	49 01       	movw	r8, r18
   185e2:	5a 01       	movw	r10, r20
   185e4:	fc 01       	movw	r30, r24
   185e6:	20 81       	ld	r18, Z
   185e8:	31 81       	ldd	r19, Z+1	; 0x01
   185ea:	b5 01       	movw	r22, r10
   185ec:	a4 01       	movw	r20, r8
   185ee:	82 81       	ldd	r24, Z+2	; 0x02
   185f0:	93 81       	ldd	r25, Z+3	; 0x03
   185f2:	5c df       	rcall	.-328    	; 0x184ac <lif_seek_msg>
   185f4:	00 97       	sbiw	r24, 0x00	; 0
   185f6:	71 f1       	breq	.+92     	; 0x18654 <lif_write+0x9c>
   185f8:	f7 01       	movw	r30, r14
   185fa:	22 81       	ldd	r18, Z+2	; 0x02
   185fc:	33 81       	ldd	r19, Z+3	; 0x03
   185fe:	a8 01       	movw	r20, r16
   18600:	61 e0       	ldi	r22, 0x01	; 1
   18602:	70 e0       	ldi	r23, 0x00	; 0
   18604:	ce 01       	movw	r24, r28
   18606:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <fwrite>
   1860a:	ec 01       	movw	r28, r24
   1860c:	08 17       	cp	r16, r24
   1860e:	19 07       	cpc	r17, r25
   18610:	f1 f0       	breq	.+60     	; 0x1864e <lif_write+0x96>
   18612:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   18616:	80 ff       	sbrs	r24, 0
   18618:	1c c0       	rjmp	.+56     	; 0x18652 <lif_write+0x9a>
   1861a:	ed b7       	in	r30, 0x3d	; 61
   1861c:	fe b7       	in	r31, 0x3e	; 62
   1861e:	15 87       	std	Z+13, r17	; 0x0d
   18620:	04 87       	std	Z+12, r16	; 0x0c
   18622:	d3 87       	std	Z+11, r29	; 0x0b
   18624:	c2 87       	std	Z+10, r28	; 0x0a
   18626:	86 82       	std	Z+6, r8	; 0x06
   18628:	97 82       	std	Z+7, r9	; 0x07
   1862a:	a0 86       	std	Z+8, r10	; 0x08
   1862c:	b1 86       	std	Z+9, r11	; 0x09
   1862e:	f7 01       	movw	r30, r14
   18630:	80 81       	ld	r24, Z
   18632:	91 81       	ldd	r25, Z+1	; 0x01
   18634:	ed b7       	in	r30, 0x3d	; 61
   18636:	fe b7       	in	r31, 0x3e	; 62
   18638:	95 83       	std	Z+5, r25	; 0x05
   1863a:	84 83       	std	Z+4, r24	; 0x04
   1863c:	8f e7       	ldi	r24, 0x7F	; 127
   1863e:	92 e4       	ldi	r25, 0x42	; 66
   18640:	a0 e0       	ldi	r26, 0x00	; 0
   18642:	81 83       	std	Z+1, r24	; 0x01
   18644:	92 83       	std	Z+2, r25	; 0x02
   18646:	a3 83       	std	Z+3, r26	; 0x03
   18648:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   1864c:	02 c0       	rjmp	.+4      	; 0x18652 <lif_write+0x9a>
   1864e:	c8 01       	movw	r24, r16
   18650:	01 c0       	rjmp	.+2      	; 0x18654 <lif_write+0x9c>
   18652:	ce 01       	movw	r24, r28
   18654:	ad b7       	in	r26, 0x3d	; 61
   18656:	be b7       	in	r27, 0x3e	; 62
   18658:	1d 96       	adiw	r26, 0x0d	; 13
   1865a:	0f b6       	in	r0, 0x3f	; 63
   1865c:	f8 94       	cli
   1865e:	be bf       	out	0x3e, r27	; 62
   18660:	0f be       	out	0x3f, r0	; 63
   18662:	ad bf       	out	0x3d, r26	; 61
   18664:	df 91       	pop	r29
   18666:	cf 91       	pop	r28
   18668:	1f 91       	pop	r17
   1866a:	0f 91       	pop	r16
   1866c:	ff 90       	pop	r15
   1866e:	ef 90       	pop	r14
   18670:	bf 90       	pop	r11
   18672:	af 90       	pop	r10
   18674:	9f 90       	pop	r9
   18676:	8f 90       	pop	r8
   18678:	08 95       	ret

0001867a <lif_chars>:
   1867a:	80 32       	cpi	r24, 0x20	; 32
   1867c:	91 05       	cpc	r25, r1
   1867e:	e1 f0       	breq	.+56     	; 0x186b8 <lif_chars+0x3e>
   18680:	9c 01       	movw	r18, r24
   18682:	21 56       	subi	r18, 0x61	; 97
   18684:	31 09       	sbc	r19, r1
   18686:	2a 31       	cpi	r18, 0x1A	; 26
   18688:	31 05       	cpc	r19, r1
   1868a:	10 f4       	brcc	.+4      	; 0x18690 <lif_chars+0x16>
   1868c:	80 97       	sbiw	r24, 0x20	; 32
   1868e:	08 95       	ret
   18690:	9c 01       	movw	r18, r24
   18692:	21 54       	subi	r18, 0x41	; 65
   18694:	31 09       	sbc	r19, r1
   18696:	2a 31       	cpi	r18, 0x1A	; 26
   18698:	31 05       	cpc	r19, r1
   1869a:	c8 f0       	brcs	.+50     	; 0x186ce <lif_chars+0x54>
   1869c:	16 16       	cp	r1, r22
   1869e:	17 06       	cpc	r1, r23
   186a0:	74 f4       	brge	.+28     	; 0x186be <lif_chars+0x44>
   186a2:	2f 5e       	subi	r18, 0xEF	; 239
   186a4:	3f 4f       	sbci	r19, 0xFF	; 255
   186a6:	2a 30       	cpi	r18, 0x0A	; 10
   186a8:	31 05       	cpc	r19, r1
   186aa:	88 f0       	brcs	.+34     	; 0x186ce <lif_chars+0x54>
   186ac:	8f 35       	cpi	r24, 0x5F	; 95
   186ae:	91 05       	cpc	r25, r1
   186b0:	49 f0       	breq	.+18     	; 0x186c4 <lif_chars+0x4a>
   186b2:	8d 97       	sbiw	r24, 0x2d	; 45
   186b4:	21 f4       	brne	.+8      	; 0x186be <lif_chars+0x44>
   186b6:	09 c0       	rjmp	.+18     	; 0x186ca <lif_chars+0x50>
   186b8:	80 e2       	ldi	r24, 0x20	; 32
   186ba:	90 e0       	ldi	r25, 0x00	; 0
   186bc:	08 95       	ret
   186be:	80 e0       	ldi	r24, 0x00	; 0
   186c0:	90 e0       	ldi	r25, 0x00	; 0
   186c2:	08 95       	ret
   186c4:	8f e5       	ldi	r24, 0x5F	; 95
   186c6:	90 e0       	ldi	r25, 0x00	; 0
   186c8:	08 95       	ret
   186ca:	8d e2       	ldi	r24, 0x2D	; 45
   186cc:	90 e0       	ldi	r25, 0x00	; 0
   186ce:	08 95       	ret

000186d0 <lif_B2S>:
   186d0:	a0 e0       	ldi	r26, 0x00	; 0
   186d2:	b0 e0       	ldi	r27, 0x00	; 0
   186d4:	ee e6       	ldi	r30, 0x6E	; 110
   186d6:	f3 ec       	ldi	r31, 0xC3	; 195
   186d8:	0c 94 1f e5 	jmp	0x1ca3e	; 0x1ca3e <__prologue_saves__+0xc>
   186dc:	5c 01       	movw	r10, r24
   186de:	6b 01       	movw	r12, r22
   186e0:	ea 01       	movw	r28, r20
   186e2:	4c 01       	movw	r8, r24
   186e4:	ee 24       	eor	r14, r14
   186e6:	e3 94       	inc	r14
   186e8:	f1 2c       	mov	r15, r1
   186ea:	00 e0       	ldi	r16, 0x00	; 0
   186ec:	10 e0       	ldi	r17, 0x00	; 0
   186ee:	0c 17       	cp	r16, r28
   186f0:	1d 07       	cpc	r17, r29
   186f2:	6c f4       	brge	.+26     	; 0x1870e <lif_B2S+0x3e>
   186f4:	f4 01       	movw	r30, r8
   186f6:	81 91       	ld	r24, Z+
   186f8:	4f 01       	movw	r8, r30
   186fa:	b8 01       	movw	r22, r16
   186fc:	90 e0       	ldi	r25, 0x00	; 0
   186fe:	bd df       	rcall	.-134    	; 0x1867a <lif_chars>
   18700:	89 2b       	or	r24, r25
   18702:	11 f4       	brne	.+4      	; 0x18708 <lif_B2S+0x38>
   18704:	e1 2c       	mov	r14, r1
   18706:	f1 2c       	mov	r15, r1
   18708:	0f 5f       	subi	r16, 0xFF	; 255
   1870a:	1f 4f       	sbci	r17, 0xFF	; 255
   1870c:	f0 cf       	rjmp	.-32     	; 0x186ee <lif_B2S+0x1e>
   1870e:	d6 01       	movw	r26, r12
   18710:	f5 01       	movw	r30, r10
   18712:	cf 01       	movw	r24, r30
   18714:	8a 19       	sub	r24, r10
   18716:	9b 09       	sbc	r25, r11
   18718:	8c 17       	cp	r24, r28
   1871a:	9d 07       	cpc	r25, r29
   1871c:	1c f4       	brge	.+6      	; 0x18724 <lif_B2S+0x54>
   1871e:	81 91       	ld	r24, Z+
   18720:	8d 93       	st	X+, r24
   18722:	f7 cf       	rjmp	.-18     	; 0x18712 <lif_B2S+0x42>
   18724:	d7 ff       	sbrs	r29, 7
   18726:	02 c0       	rjmp	.+4      	; 0x1872c <lif_B2S+0x5c>
   18728:	c0 e0       	ldi	r28, 0x00	; 0
   1872a:	d0 e0       	ldi	r29, 0x00	; 0
   1872c:	cc 0d       	add	r28, r12
   1872e:	dd 1d       	adc	r29, r13
   18730:	18 82       	st	Y, r1
   18732:	c6 01       	movw	r24, r12
   18734:	0e 94 c3 33 	call	0x6786	; 0x6786 <trim_tail>
   18738:	c7 01       	movw	r24, r14
   1873a:	cd b7       	in	r28, 0x3d	; 61
   1873c:	de b7       	in	r29, 0x3e	; 62
   1873e:	ec e0       	ldi	r30, 0x0C	; 12
   18740:	0c 94 3b e5 	jmp	0x1ca76	; 0x1ca76 <__epilogue_restores__+0xc>

00018744 <lif_checkname>:
   18744:	ef 92       	push	r14
   18746:	ff 92       	push	r15
   18748:	0f 93       	push	r16
   1874a:	1f 93       	push	r17
   1874c:	cf 93       	push	r28
   1874e:	df 93       	push	r29
   18750:	7c 01       	movw	r14, r24
   18752:	ec 01       	movw	r28, r24
   18754:	01 e0       	ldi	r16, 0x01	; 1
   18756:	10 e0       	ldi	r17, 0x00	; 0
   18758:	be 01       	movw	r22, r28
   1875a:	6e 19       	sub	r22, r14
   1875c:	7f 09       	sbc	r23, r15
   1875e:	89 91       	ld	r24, Y+
   18760:	88 23       	and	r24, r24
   18762:	39 f0       	breq	.+14     	; 0x18772 <lif_checkname+0x2e>
   18764:	90 e0       	ldi	r25, 0x00	; 0
   18766:	89 df       	rcall	.-238    	; 0x1867a <lif_chars>
   18768:	89 2b       	or	r24, r25
   1876a:	b1 f7       	brne	.-20     	; 0x18758 <lif_checkname+0x14>
   1876c:	00 e0       	ldi	r16, 0x00	; 0
   1876e:	10 e0       	ldi	r17, 0x00	; 0
   18770:	f3 cf       	rjmp	.-26     	; 0x18758 <lif_checkname+0x14>
   18772:	c8 01       	movw	r24, r16
   18774:	cd b7       	in	r28, 0x3d	; 61
   18776:	de b7       	in	r29, 0x3e	; 62
   18778:	e6 e0       	ldi	r30, 0x06	; 6
   1877a:	0c 94 41 e5 	jmp	0x1ca82	; 0x1ca82 <__epilogue_restores__+0x18>

0001877e <lif_S2B>:
   1877e:	fb 01       	movw	r30, r22
   18780:	dc 01       	movw	r26, r24
   18782:	20 e0       	ldi	r18, 0x00	; 0
   18784:	30 e0       	ldi	r19, 0x00	; 0
   18786:	61 91       	ld	r22, Z+
   18788:	61 11       	cpse	r22, r1
   1878a:	05 c0       	rjmp	.+10     	; 0x18796 <lif_S2B+0x18>
   1878c:	fc 01       	movw	r30, r24
   1878e:	e2 0f       	add	r30, r18
   18790:	f3 1f       	adc	r31, r19
   18792:	60 e2       	ldi	r22, 0x20	; 32
   18794:	08 c0       	rjmp	.+16     	; 0x187a6 <lif_S2B+0x28>
   18796:	24 17       	cp	r18, r20
   18798:	35 07       	cpc	r19, r21
   1879a:	24 f4       	brge	.+8      	; 0x187a4 <lif_S2B+0x26>
   1879c:	6d 93       	st	X+, r22
   1879e:	2f 5f       	subi	r18, 0xFF	; 255
   187a0:	3f 4f       	sbci	r19, 0xFF	; 255
   187a2:	f1 cf       	rjmp	.-30     	; 0x18786 <lif_S2B+0x8>
   187a4:	08 95       	ret
   187a6:	9f 01       	movw	r18, r30
   187a8:	28 1b       	sub	r18, r24
   187aa:	39 0b       	sbc	r19, r25
   187ac:	24 17       	cp	r18, r20
   187ae:	35 07       	cpc	r19, r21
   187b0:	14 f4       	brge	.+4      	; 0x187b6 <lif_S2B+0x38>
   187b2:	61 93       	st	Z+, r22
   187b4:	f8 cf       	rjmp	.-16     	; 0x187a6 <lif_S2B+0x28>
   187b6:	08 95       	ret

000187b8 <lif_fixname>:
   187b8:	a0 e0       	ldi	r26, 0x00	; 0
   187ba:	b0 e0       	ldi	r27, 0x00	; 0
   187bc:	e2 ee       	ldi	r30, 0xE2	; 226
   187be:	f3 ec       	ldi	r31, 0xC3	; 195
   187c0:	0c 94 22 e5 	jmp	0x1ca44	; 0x1ca44 <__prologue_saves__+0x12>
   187c4:	8c 01       	movw	r16, r24
   187c6:	cb 01       	movw	r24, r22
   187c8:	7a 01       	movw	r14, r20
   187ca:	0e 94 95 78 	call	0xf12a	; 0xf12a <basename>
   187ce:	6c 01       	movw	r12, r24
   187d0:	e8 01       	movw	r28, r16
   187d2:	80 e2       	ldi	r24, 0x20	; 32
   187d4:	b8 2e       	mov	r11, r24
   187d6:	be 01       	movw	r22, r28
   187d8:	60 1b       	sub	r22, r16
   187da:	71 0b       	sbc	r23, r17
   187dc:	f6 01       	movw	r30, r12
   187de:	81 91       	ld	r24, Z+
   187e0:	6f 01       	movw	r12, r30
   187e2:	81 11       	cpse	r24, r1
   187e4:	02 c0       	rjmp	.+4      	; 0x187ea <lif_fixname+0x32>
   187e6:	20 e2       	ldi	r18, 0x20	; 32
   187e8:	0e c0       	rjmp	.+28     	; 0x18806 <lif_fixname+0x4e>
   187ea:	1e 14       	cp	r1, r14
   187ec:	1f 04       	cpc	r1, r15
   187ee:	dc f7       	brge	.-10     	; 0x187e6 <lif_fixname+0x2e>
   187f0:	8e 32       	cpi	r24, 0x2E	; 46
   187f2:	c9 f3       	breq	.-14     	; 0x187e6 <lif_fixname+0x2e>
   187f4:	90 e0       	ldi	r25, 0x00	; 0
   187f6:	41 df       	rcall	.-382    	; 0x1867a <lif_chars>
   187f8:	88 23       	and	r24, r24
   187fa:	11 f0       	breq	.+4      	; 0x18800 <lif_fixname+0x48>
   187fc:	88 83       	st	Y, r24
   187fe:	01 c0       	rjmp	.+2      	; 0x18802 <lif_fixname+0x4a>
   18800:	b8 82       	st	Y, r11
   18802:	21 96       	adiw	r28, 0x01	; 1
   18804:	e8 cf       	rjmp	.-48     	; 0x187d6 <lif_fixname+0x1e>
   18806:	ce 01       	movw	r24, r28
   18808:	80 1b       	sub	r24, r16
   1880a:	91 0b       	sbc	r25, r17
   1880c:	8e 15       	cp	r24, r14
   1880e:	9f 05       	cpc	r25, r15
   18810:	14 f4       	brge	.+4      	; 0x18816 <lif_fixname+0x5e>
   18812:	29 93       	st	Y+, r18
   18814:	f8 cf       	rjmp	.-16     	; 0x18806 <lif_fixname+0x4e>
   18816:	18 82       	st	Y, r1
   18818:	f8 01       	movw	r30, r16
   1881a:	01 90       	ld	r0, Z+
   1881c:	00 20       	and	r0, r0
   1881e:	e9 f7       	brne	.-6      	; 0x1881a <lif_fixname+0x62>
   18820:	cf 01       	movw	r24, r30
   18822:	01 97       	sbiw	r24, 0x01	; 1
   18824:	80 1b       	sub	r24, r16
   18826:	91 0b       	sbc	r25, r17
   18828:	cd b7       	in	r28, 0x3d	; 61
   1882a:	de b7       	in	r29, 0x3e	; 62
   1882c:	e9 e0       	ldi	r30, 0x09	; 9
   1882e:	0c 94 3e e5 	jmp	0x1ca7c	; 0x1ca7c <__epilogue_restores__+0x12>

00018832 <lif_vol2str>:
   18832:	ef 92       	push	r14
   18834:	ff 92       	push	r15
   18836:	0f 93       	push	r16
   18838:	1f 93       	push	r17
   1883a:	cf 93       	push	r28
   1883c:	df 93       	push	r29
   1883e:	7c 01       	movw	r14, r24
   18840:	eb 01       	movw	r28, r22
   18842:	fc 01       	movw	r30, r24
   18844:	04 a1       	ldd	r16, Z+36	; 0x24
   18846:	15 a1       	ldd	r17, Z+37	; 0x25
   18848:	20 e0       	ldi	r18, 0x00	; 0
   1884a:	30 e0       	ldi	r19, 0x00	; 0
   1884c:	42 e0       	ldi	r20, 0x02	; 2
   1884e:	50 e0       	ldi	r21, 0x00	; 0
   18850:	60 e0       	ldi	r22, 0x00	; 0
   18852:	70 e0       	ldi	r23, 0x00	; 0
   18854:	ce 01       	movw	r24, r28
   18856:	e8 dc       	rcall	.-1584   	; 0x18228 <V2B_MSB>
   18858:	b7 01       	movw	r22, r14
   1885a:	6a 5d       	subi	r22, 0xDA	; 218
   1885c:	7f 4f       	sbci	r23, 0xFF	; 255
   1885e:	46 e0       	ldi	r20, 0x06	; 6
   18860:	50 e0       	ldi	r21, 0x00	; 0
   18862:	ce 01       	movw	r24, r28
   18864:	02 96       	adiw	r24, 0x02	; 2
   18866:	8b df       	rcall	.-234    	; 0x1877e <lif_S2B>
   18868:	f7 01       	movw	r30, r14
   1886a:	05 a5       	ldd	r16, Z+45	; 0x2d
   1886c:	16 a5       	ldd	r17, Z+46	; 0x2e
   1886e:	27 a5       	ldd	r18, Z+47	; 0x2f
   18870:	30 a9       	ldd	r19, Z+48	; 0x30
   18872:	44 e0       	ldi	r20, 0x04	; 4
   18874:	50 e0       	ldi	r21, 0x00	; 0
   18876:	68 e0       	ldi	r22, 0x08	; 8
   18878:	70 e0       	ldi	r23, 0x00	; 0
   1887a:	ce 01       	movw	r24, r28
   1887c:	d5 dc       	rcall	.-1622   	; 0x18228 <V2B_MSB>
   1887e:	f7 01       	movw	r30, r14
   18880:	01 a9       	ldd	r16, Z+49	; 0x31
   18882:	12 a9       	ldd	r17, Z+50	; 0x32
   18884:	20 e0       	ldi	r18, 0x00	; 0
   18886:	30 e0       	ldi	r19, 0x00	; 0
   18888:	42 e0       	ldi	r20, 0x02	; 2
   1888a:	50 e0       	ldi	r21, 0x00	; 0
   1888c:	6c e0       	ldi	r22, 0x0C	; 12
   1888e:	70 e0       	ldi	r23, 0x00	; 0
   18890:	ce 01       	movw	r24, r28
   18892:	ca dc       	rcall	.-1644   	; 0x18228 <V2B_MSB>
   18894:	00 e0       	ldi	r16, 0x00	; 0
   18896:	10 e0       	ldi	r17, 0x00	; 0
   18898:	98 01       	movw	r18, r16
   1889a:	42 e0       	ldi	r20, 0x02	; 2
   1889c:	50 e0       	ldi	r21, 0x00	; 0
   1889e:	6e e0       	ldi	r22, 0x0E	; 14
   188a0:	70 e0       	ldi	r23, 0x00	; 0
   188a2:	ce 01       	movw	r24, r28
   188a4:	c1 dc       	rcall	.-1662   	; 0x18228 <V2B_MSB>
   188a6:	f7 01       	movw	r30, r14
   188a8:	05 a9       	ldd	r16, Z+53	; 0x35
   188aa:	16 a9       	ldd	r17, Z+54	; 0x36
   188ac:	27 a9       	ldd	r18, Z+55	; 0x37
   188ae:	30 ad       	ldd	r19, Z+56	; 0x38
   188b0:	44 e0       	ldi	r20, 0x04	; 4
   188b2:	50 e0       	ldi	r21, 0x00	; 0
   188b4:	60 e1       	ldi	r22, 0x10	; 16
   188b6:	70 e0       	ldi	r23, 0x00	; 0
   188b8:	ce 01       	movw	r24, r28
   188ba:	b6 dc       	rcall	.-1684   	; 0x18228 <V2B_MSB>
   188bc:	f7 01       	movw	r30, r14
   188be:	01 ad       	ldd	r16, Z+57	; 0x39
   188c0:	12 ad       	ldd	r17, Z+58	; 0x3a
   188c2:	20 e0       	ldi	r18, 0x00	; 0
   188c4:	30 e0       	ldi	r19, 0x00	; 0
   188c6:	42 e0       	ldi	r20, 0x02	; 2
   188c8:	50 e0       	ldi	r21, 0x00	; 0
   188ca:	64 e1       	ldi	r22, 0x14	; 20
   188cc:	70 e0       	ldi	r23, 0x00	; 0
   188ce:	ce 01       	movw	r24, r28
   188d0:	ab dc       	rcall	.-1706   	; 0x18228 <V2B_MSB>
   188d2:	00 e0       	ldi	r16, 0x00	; 0
   188d4:	10 e0       	ldi	r17, 0x00	; 0
   188d6:	98 01       	movw	r18, r16
   188d8:	42 e0       	ldi	r20, 0x02	; 2
   188da:	50 e0       	ldi	r21, 0x00	; 0
   188dc:	66 e1       	ldi	r22, 0x16	; 22
   188de:	70 e0       	ldi	r23, 0x00	; 0
   188e0:	ce 01       	movw	r24, r28
   188e2:	a2 dc       	rcall	.-1724   	; 0x18228 <V2B_MSB>
   188e4:	f7 01       	movw	r30, r14
   188e6:	fd 96       	adiw	r30, 0x3d	; 61
   188e8:	00 81       	ld	r16, Z
   188ea:	11 81       	ldd	r17, Z+1	; 0x01
   188ec:	22 81       	ldd	r18, Z+2	; 0x02
   188ee:	33 81       	ldd	r19, Z+3	; 0x03
   188f0:	44 e0       	ldi	r20, 0x04	; 4
   188f2:	50 e0       	ldi	r21, 0x00	; 0
   188f4:	68 e1       	ldi	r22, 0x18	; 24
   188f6:	70 e0       	ldi	r23, 0x00	; 0
   188f8:	ce 01       	movw	r24, r28
   188fa:	96 dc       	rcall	.-1748   	; 0x18228 <V2B_MSB>
   188fc:	f7 01       	movw	r30, r14
   188fe:	ef 5b       	subi	r30, 0xBF	; 191
   18900:	ff 4f       	sbci	r31, 0xFF	; 255
   18902:	00 81       	ld	r16, Z
   18904:	11 81       	ldd	r17, Z+1	; 0x01
   18906:	22 81       	ldd	r18, Z+2	; 0x02
   18908:	33 81       	ldd	r19, Z+3	; 0x03
   1890a:	44 e0       	ldi	r20, 0x04	; 4
   1890c:	50 e0       	ldi	r21, 0x00	; 0
   1890e:	6c e1       	ldi	r22, 0x1C	; 28
   18910:	70 e0       	ldi	r23, 0x00	; 0
   18912:	ce 01       	movw	r24, r28
   18914:	89 dc       	rcall	.-1774   	; 0x18228 <V2B_MSB>
   18916:	f7 01       	movw	r30, r14
   18918:	eb 5b       	subi	r30, 0xBB	; 187
   1891a:	ff 4f       	sbci	r31, 0xFF	; 255
   1891c:	00 81       	ld	r16, Z
   1891e:	11 81       	ldd	r17, Z+1	; 0x01
   18920:	22 81       	ldd	r18, Z+2	; 0x02
   18922:	33 81       	ldd	r19, Z+3	; 0x03
   18924:	44 e0       	ldi	r20, 0x04	; 4
   18926:	50 e0       	ldi	r21, 0x00	; 0
   18928:	60 e2       	ldi	r22, 0x20	; 32
   1892a:	70 e0       	ldi	r23, 0x00	; 0
   1892c:	ce 01       	movw	r24, r28
   1892e:	7c dc       	rcall	.-1800   	; 0x18228 <V2B_MSB>
   18930:	de 01       	movw	r26, r28
   18932:	94 96       	adiw	r26, 0x24	; 36
   18934:	f7 01       	movw	r30, r14
   18936:	e7 5b       	subi	r30, 0xB7	; 183
   18938:	ff 4f       	sbci	r31, 0xFF	; 255
   1893a:	86 e0       	ldi	r24, 0x06	; 6
   1893c:	01 90       	ld	r0, Z+
   1893e:	0d 92       	st	X+, r0
   18940:	8a 95       	dec	r24
   18942:	e1 f7       	brne	.-8      	; 0x1893c <lif_vol2str+0x10a>
   18944:	cd b7       	in	r28, 0x3d	; 61
   18946:	de b7       	in	r29, 0x3e	; 62
   18948:	e6 e0       	ldi	r30, 0x06	; 6
   1894a:	0c 94 41 e5 	jmp	0x1ca82	; 0x1ca82 <__epilogue_restores__+0x18>

0001894e <lif_str2vol>:
   1894e:	0f 93       	push	r16
   18950:	1f 93       	push	r17
   18952:	cf 93       	push	r28
   18954:	df 93       	push	r29
   18956:	8c 01       	movw	r16, r24
   18958:	eb 01       	movw	r28, r22
   1895a:	42 e0       	ldi	r20, 0x02	; 2
   1895c:	50 e0       	ldi	r21, 0x00	; 0
   1895e:	60 e0       	ldi	r22, 0x00	; 0
   18960:	70 e0       	ldi	r23, 0x00	; 0
   18962:	8b dc       	rcall	.-1770   	; 0x1827a <B2V_MSB>
   18964:	7d a3       	std	Y+37, r23	; 0x25
   18966:	6c a3       	std	Y+36, r22	; 0x24
   18968:	be 01       	movw	r22, r28
   1896a:	6a 5d       	subi	r22, 0xDA	; 218
   1896c:	7f 4f       	sbci	r23, 0xFF	; 255
   1896e:	46 e0       	ldi	r20, 0x06	; 6
   18970:	50 e0       	ldi	r21, 0x00	; 0
   18972:	c8 01       	movw	r24, r16
   18974:	02 96       	adiw	r24, 0x02	; 2
   18976:	ac de       	rcall	.-680    	; 0x186d0 <lif_B2S>
   18978:	44 e0       	ldi	r20, 0x04	; 4
   1897a:	50 e0       	ldi	r21, 0x00	; 0
   1897c:	68 e0       	ldi	r22, 0x08	; 8
   1897e:	70 e0       	ldi	r23, 0x00	; 0
   18980:	c8 01       	movw	r24, r16
   18982:	7b dc       	rcall	.-1802   	; 0x1827a <B2V_MSB>
   18984:	6d a7       	std	Y+45, r22	; 0x2d
   18986:	7e a7       	std	Y+46, r23	; 0x2e
   18988:	8f a7       	std	Y+47, r24	; 0x2f
   1898a:	98 ab       	std	Y+48, r25	; 0x30
   1898c:	42 e0       	ldi	r20, 0x02	; 2
   1898e:	50 e0       	ldi	r21, 0x00	; 0
   18990:	6c e0       	ldi	r22, 0x0C	; 12
   18992:	70 e0       	ldi	r23, 0x00	; 0
   18994:	c8 01       	movw	r24, r16
   18996:	71 dc       	rcall	.-1822   	; 0x1827a <B2V_MSB>
   18998:	7a ab       	std	Y+50, r23	; 0x32
   1899a:	69 ab       	std	Y+49, r22	; 0x31
   1899c:	42 e0       	ldi	r20, 0x02	; 2
   1899e:	50 e0       	ldi	r21, 0x00	; 0
   189a0:	6e e0       	ldi	r22, 0x0E	; 14
   189a2:	70 e0       	ldi	r23, 0x00	; 0
   189a4:	c8 01       	movw	r24, r16
   189a6:	69 dc       	rcall	.-1838   	; 0x1827a <B2V_MSB>
   189a8:	7c ab       	std	Y+52, r23	; 0x34
   189aa:	6b ab       	std	Y+51, r22	; 0x33
   189ac:	44 e0       	ldi	r20, 0x04	; 4
   189ae:	50 e0       	ldi	r21, 0x00	; 0
   189b0:	60 e1       	ldi	r22, 0x10	; 16
   189b2:	70 e0       	ldi	r23, 0x00	; 0
   189b4:	c8 01       	movw	r24, r16
   189b6:	61 dc       	rcall	.-1854   	; 0x1827a <B2V_MSB>
   189b8:	6d ab       	std	Y+53, r22	; 0x35
   189ba:	7e ab       	std	Y+54, r23	; 0x36
   189bc:	8f ab       	std	Y+55, r24	; 0x37
   189be:	98 af       	std	Y+56, r25	; 0x38
   189c0:	42 e0       	ldi	r20, 0x02	; 2
   189c2:	50 e0       	ldi	r21, 0x00	; 0
   189c4:	64 e1       	ldi	r22, 0x14	; 20
   189c6:	70 e0       	ldi	r23, 0x00	; 0
   189c8:	c8 01       	movw	r24, r16
   189ca:	57 dc       	rcall	.-1874   	; 0x1827a <B2V_MSB>
   189cc:	7a af       	std	Y+58, r23	; 0x3a
   189ce:	69 af       	std	Y+57, r22	; 0x39
   189d0:	42 e0       	ldi	r20, 0x02	; 2
   189d2:	50 e0       	ldi	r21, 0x00	; 0
   189d4:	66 e1       	ldi	r22, 0x16	; 22
   189d6:	70 e0       	ldi	r23, 0x00	; 0
   189d8:	c8 01       	movw	r24, r16
   189da:	4f dc       	rcall	.-1890   	; 0x1827a <B2V_MSB>
   189dc:	7c af       	std	Y+60, r23	; 0x3c
   189de:	6b af       	std	Y+59, r22	; 0x3b
   189e0:	44 e0       	ldi	r20, 0x04	; 4
   189e2:	50 e0       	ldi	r21, 0x00	; 0
   189e4:	68 e1       	ldi	r22, 0x18	; 24
   189e6:	70 e0       	ldi	r23, 0x00	; 0
   189e8:	c8 01       	movw	r24, r16
   189ea:	47 dc       	rcall	.-1906   	; 0x1827a <B2V_MSB>
   189ec:	fe 01       	movw	r30, r28
   189ee:	fd 96       	adiw	r30, 0x3d	; 61
   189f0:	60 83       	st	Z, r22
   189f2:	71 83       	std	Z+1, r23	; 0x01
   189f4:	82 83       	std	Z+2, r24	; 0x02
   189f6:	93 83       	std	Z+3, r25	; 0x03
   189f8:	44 e0       	ldi	r20, 0x04	; 4
   189fa:	50 e0       	ldi	r21, 0x00	; 0
   189fc:	6c e1       	ldi	r22, 0x1C	; 28
   189fe:	70 e0       	ldi	r23, 0x00	; 0
   18a00:	c8 01       	movw	r24, r16
   18a02:	3b dc       	rcall	.-1930   	; 0x1827a <B2V_MSB>
   18a04:	fe 01       	movw	r30, r28
   18a06:	ef 5b       	subi	r30, 0xBF	; 191
   18a08:	ff 4f       	sbci	r31, 0xFF	; 255
   18a0a:	60 83       	st	Z, r22
   18a0c:	71 83       	std	Z+1, r23	; 0x01
   18a0e:	82 83       	std	Z+2, r24	; 0x02
   18a10:	93 83       	std	Z+3, r25	; 0x03
   18a12:	44 e0       	ldi	r20, 0x04	; 4
   18a14:	50 e0       	ldi	r21, 0x00	; 0
   18a16:	60 e2       	ldi	r22, 0x20	; 32
   18a18:	70 e0       	ldi	r23, 0x00	; 0
   18a1a:	c8 01       	movw	r24, r16
   18a1c:	2e dc       	rcall	.-1956   	; 0x1827a <B2V_MSB>
   18a1e:	fe 01       	movw	r30, r28
   18a20:	eb 5b       	subi	r30, 0xBB	; 187
   18a22:	ff 4f       	sbci	r31, 0xFF	; 255
   18a24:	60 83       	st	Z, r22
   18a26:	71 83       	std	Z+1, r23	; 0x01
   18a28:	82 83       	std	Z+2, r24	; 0x02
   18a2a:	93 83       	std	Z+3, r25	; 0x03
   18a2c:	de 01       	movw	r26, r28
   18a2e:	a7 5b       	subi	r26, 0xB7	; 183
   18a30:	bf 4f       	sbci	r27, 0xFF	; 255
   18a32:	f8 01       	movw	r30, r16
   18a34:	b4 96       	adiw	r30, 0x24	; 36
   18a36:	86 e0       	ldi	r24, 0x06	; 6
   18a38:	01 90       	ld	r0, Z+
   18a3a:	0d 92       	st	X+, r0
   18a3c:	8a 95       	dec	r24
   18a3e:	e1 f7       	brne	.-8      	; 0x18a38 <lif_str2vol+0xea>
   18a40:	df 91       	pop	r29
   18a42:	cf 91       	pop	r28
   18a44:	1f 91       	pop	r17
   18a46:	0f 91       	pop	r16
   18a48:	08 95       	ret

00018a4a <lif_dir2str>:
   18a4a:	ef 92       	push	r14
   18a4c:	ff 92       	push	r15
   18a4e:	0f 93       	push	r16
   18a50:	1f 93       	push	r17
   18a52:	cf 93       	push	r28
   18a54:	df 93       	push	r29
   18a56:	ec 01       	movw	r28, r24
   18a58:	7b 01       	movw	r14, r22
   18a5a:	bc 01       	movw	r22, r24
   18a5c:	61 5b       	subi	r22, 0xB1	; 177
   18a5e:	7f 4f       	sbci	r23, 0xFF	; 255
   18a60:	4a e0       	ldi	r20, 0x0A	; 10
   18a62:	50 e0       	ldi	r21, 0x00	; 0
   18a64:	c7 01       	movw	r24, r14
   18a66:	8b de       	rcall	.-746    	; 0x1877e <lif_S2B>
   18a68:	fe 01       	movw	r30, r28
   18a6a:	e6 5a       	subi	r30, 0xA6	; 166
   18a6c:	ff 4f       	sbci	r31, 0xFF	; 255
   18a6e:	00 81       	ld	r16, Z
   18a70:	11 81       	ldd	r17, Z+1	; 0x01
   18a72:	20 e0       	ldi	r18, 0x00	; 0
   18a74:	30 e0       	ldi	r19, 0x00	; 0
   18a76:	42 e0       	ldi	r20, 0x02	; 2
   18a78:	50 e0       	ldi	r21, 0x00	; 0
   18a7a:	6a e0       	ldi	r22, 0x0A	; 10
   18a7c:	70 e0       	ldi	r23, 0x00	; 0
   18a7e:	c7 01       	movw	r24, r14
   18a80:	d3 db       	rcall	.-2138   	; 0x18228 <V2B_MSB>
   18a82:	fe 01       	movw	r30, r28
   18a84:	e4 5a       	subi	r30, 0xA4	; 164
   18a86:	ff 4f       	sbci	r31, 0xFF	; 255
   18a88:	00 81       	ld	r16, Z
   18a8a:	11 81       	ldd	r17, Z+1	; 0x01
   18a8c:	22 81       	ldd	r18, Z+2	; 0x02
   18a8e:	33 81       	ldd	r19, Z+3	; 0x03
   18a90:	44 e0       	ldi	r20, 0x04	; 4
   18a92:	50 e0       	ldi	r21, 0x00	; 0
   18a94:	6c e0       	ldi	r22, 0x0C	; 12
   18a96:	70 e0       	ldi	r23, 0x00	; 0
   18a98:	c7 01       	movw	r24, r14
   18a9a:	c6 db       	rcall	.-2164   	; 0x18228 <V2B_MSB>
   18a9c:	fe 01       	movw	r30, r28
   18a9e:	e0 5a       	subi	r30, 0xA0	; 160
   18aa0:	ff 4f       	sbci	r31, 0xFF	; 255
   18aa2:	00 81       	ld	r16, Z
   18aa4:	11 81       	ldd	r17, Z+1	; 0x01
   18aa6:	22 81       	ldd	r18, Z+2	; 0x02
   18aa8:	33 81       	ldd	r19, Z+3	; 0x03
   18aaa:	44 e0       	ldi	r20, 0x04	; 4
   18aac:	50 e0       	ldi	r21, 0x00	; 0
   18aae:	60 e1       	ldi	r22, 0x10	; 16
   18ab0:	70 e0       	ldi	r23, 0x00	; 0
   18ab2:	c7 01       	movw	r24, r14
   18ab4:	b9 db       	rcall	.-2190   	; 0x18228 <V2B_MSB>
   18ab6:	d7 01       	movw	r26, r14
   18ab8:	54 96       	adiw	r26, 0x14	; 20
   18aba:	fe 01       	movw	r30, r28
   18abc:	ec 59       	subi	r30, 0x9C	; 156
   18abe:	ff 4f       	sbci	r31, 0xFF	; 255
   18ac0:	86 e0       	ldi	r24, 0x06	; 6
   18ac2:	01 90       	ld	r0, Z+
   18ac4:	0d 92       	st	X+, r0
   18ac6:	8a 95       	dec	r24
   18ac8:	e1 f7       	brne	.-8      	; 0x18ac2 <lif_dir2str+0x78>
   18aca:	fe 01       	movw	r30, r28
   18acc:	e6 59       	subi	r30, 0x96	; 150
   18ace:	ff 4f       	sbci	r31, 0xFF	; 255
   18ad0:	00 81       	ld	r16, Z
   18ad2:	11 81       	ldd	r17, Z+1	; 0x01
   18ad4:	20 e0       	ldi	r18, 0x00	; 0
   18ad6:	30 e0       	ldi	r19, 0x00	; 0
   18ad8:	42 e0       	ldi	r20, 0x02	; 2
   18ada:	50 e0       	ldi	r21, 0x00	; 0
   18adc:	6a e1       	ldi	r22, 0x1A	; 26
   18ade:	70 e0       	ldi	r23, 0x00	; 0
   18ae0:	c7 01       	movw	r24, r14
   18ae2:	a2 db       	rcall	.-2236   	; 0x18228 <V2B_MSB>
   18ae4:	fe 01       	movw	r30, r28
   18ae6:	e4 59       	subi	r30, 0x94	; 148
   18ae8:	ff 4f       	sbci	r31, 0xFF	; 255
   18aea:	00 81       	ld	r16, Z
   18aec:	11 81       	ldd	r17, Z+1	; 0x01
   18aee:	20 e0       	ldi	r18, 0x00	; 0
   18af0:	30 e0       	ldi	r19, 0x00	; 0
   18af2:	42 e0       	ldi	r20, 0x02	; 2
   18af4:	50 e0       	ldi	r21, 0x00	; 0
   18af6:	6c e1       	ldi	r22, 0x1C	; 28
   18af8:	70 e0       	ldi	r23, 0x00	; 0
   18afa:	c7 01       	movw	r24, r14
   18afc:	a9 db       	rcall	.-2222   	; 0x18250 <V2B_LSB>
   18afe:	c2 59       	subi	r28, 0x92	; 146
   18b00:	df 4f       	sbci	r29, 0xFF	; 255
   18b02:	08 81       	ld	r16, Y
   18b04:	19 81       	ldd	r17, Y+1	; 0x01
   18b06:	20 e0       	ldi	r18, 0x00	; 0
   18b08:	30 e0       	ldi	r19, 0x00	; 0
   18b0a:	42 e0       	ldi	r20, 0x02	; 2
   18b0c:	50 e0       	ldi	r21, 0x00	; 0
   18b0e:	6e e1       	ldi	r22, 0x1E	; 30
   18b10:	70 e0       	ldi	r23, 0x00	; 0
   18b12:	c7 01       	movw	r24, r14
   18b14:	9d db       	rcall	.-2246   	; 0x18250 <V2B_LSB>
   18b16:	cd b7       	in	r28, 0x3d	; 61
   18b18:	de b7       	in	r29, 0x3e	; 62
   18b1a:	e6 e0       	ldi	r30, 0x06	; 6
   18b1c:	0c 94 41 e5 	jmp	0x1ca82	; 0x1ca82 <__epilogue_restores__+0x18>

00018b20 <lif_str2dir>:
   18b20:	0f 93       	push	r16
   18b22:	1f 93       	push	r17
   18b24:	cf 93       	push	r28
   18b26:	df 93       	push	r29
   18b28:	8c 01       	movw	r16, r24
   18b2a:	eb 01       	movw	r28, r22
   18b2c:	61 5b       	subi	r22, 0xB1	; 177
   18b2e:	7f 4f       	sbci	r23, 0xFF	; 255
   18b30:	4a e0       	ldi	r20, 0x0A	; 10
   18b32:	50 e0       	ldi	r21, 0x00	; 0
   18b34:	cd dd       	rcall	.-1126   	; 0x186d0 <lif_B2S>
   18b36:	42 e0       	ldi	r20, 0x02	; 2
   18b38:	50 e0       	ldi	r21, 0x00	; 0
   18b3a:	6a e0       	ldi	r22, 0x0A	; 10
   18b3c:	70 e0       	ldi	r23, 0x00	; 0
   18b3e:	c8 01       	movw	r24, r16
   18b40:	9c db       	rcall	.-2248   	; 0x1827a <B2V_MSB>
   18b42:	fe 01       	movw	r30, r28
   18b44:	e6 5a       	subi	r30, 0xA6	; 166
   18b46:	ff 4f       	sbci	r31, 0xFF	; 255
   18b48:	71 83       	std	Z+1, r23	; 0x01
   18b4a:	60 83       	st	Z, r22
   18b4c:	44 e0       	ldi	r20, 0x04	; 4
   18b4e:	50 e0       	ldi	r21, 0x00	; 0
   18b50:	6c e0       	ldi	r22, 0x0C	; 12
   18b52:	70 e0       	ldi	r23, 0x00	; 0
   18b54:	c8 01       	movw	r24, r16
   18b56:	91 db       	rcall	.-2270   	; 0x1827a <B2V_MSB>
   18b58:	fe 01       	movw	r30, r28
   18b5a:	e4 5a       	subi	r30, 0xA4	; 164
   18b5c:	ff 4f       	sbci	r31, 0xFF	; 255
   18b5e:	60 83       	st	Z, r22
   18b60:	71 83       	std	Z+1, r23	; 0x01
   18b62:	82 83       	std	Z+2, r24	; 0x02
   18b64:	93 83       	std	Z+3, r25	; 0x03
   18b66:	44 e0       	ldi	r20, 0x04	; 4
   18b68:	50 e0       	ldi	r21, 0x00	; 0
   18b6a:	60 e1       	ldi	r22, 0x10	; 16
   18b6c:	70 e0       	ldi	r23, 0x00	; 0
   18b6e:	c8 01       	movw	r24, r16
   18b70:	84 db       	rcall	.-2296   	; 0x1827a <B2V_MSB>
   18b72:	fe 01       	movw	r30, r28
   18b74:	e0 5a       	subi	r30, 0xA0	; 160
   18b76:	ff 4f       	sbci	r31, 0xFF	; 255
   18b78:	60 83       	st	Z, r22
   18b7a:	71 83       	std	Z+1, r23	; 0x01
   18b7c:	82 83       	std	Z+2, r24	; 0x02
   18b7e:	93 83       	std	Z+3, r25	; 0x03
   18b80:	de 01       	movw	r26, r28
   18b82:	ac 59       	subi	r26, 0x9C	; 156
   18b84:	bf 4f       	sbci	r27, 0xFF	; 255
   18b86:	f8 01       	movw	r30, r16
   18b88:	74 96       	adiw	r30, 0x14	; 20
   18b8a:	86 e0       	ldi	r24, 0x06	; 6
   18b8c:	01 90       	ld	r0, Z+
   18b8e:	0d 92       	st	X+, r0
   18b90:	8a 95       	dec	r24
   18b92:	e1 f7       	brne	.-8      	; 0x18b8c <lif_str2dir+0x6c>
   18b94:	42 e0       	ldi	r20, 0x02	; 2
   18b96:	50 e0       	ldi	r21, 0x00	; 0
   18b98:	6a e1       	ldi	r22, 0x1A	; 26
   18b9a:	70 e0       	ldi	r23, 0x00	; 0
   18b9c:	c8 01       	movw	r24, r16
   18b9e:	6d db       	rcall	.-2342   	; 0x1827a <B2V_MSB>
   18ba0:	fe 01       	movw	r30, r28
   18ba2:	e6 59       	subi	r30, 0x96	; 150
   18ba4:	ff 4f       	sbci	r31, 0xFF	; 255
   18ba6:	71 83       	std	Z+1, r23	; 0x01
   18ba8:	60 83       	st	Z, r22
   18baa:	42 e0       	ldi	r20, 0x02	; 2
   18bac:	50 e0       	ldi	r21, 0x00	; 0
   18bae:	6c e1       	ldi	r22, 0x1C	; 28
   18bb0:	70 e0       	ldi	r23, 0x00	; 0
   18bb2:	c8 01       	movw	r24, r16
   18bb4:	81 db       	rcall	.-2302   	; 0x182b8 <B2V_LSB>
   18bb6:	fe 01       	movw	r30, r28
   18bb8:	e4 59       	subi	r30, 0x94	; 148
   18bba:	ff 4f       	sbci	r31, 0xFF	; 255
   18bbc:	71 83       	std	Z+1, r23	; 0x01
   18bbe:	60 83       	st	Z, r22
   18bc0:	42 e0       	ldi	r20, 0x02	; 2
   18bc2:	50 e0       	ldi	r21, 0x00	; 0
   18bc4:	6e e1       	ldi	r22, 0x1E	; 30
   18bc6:	70 e0       	ldi	r23, 0x00	; 0
   18bc8:	c8 01       	movw	r24, r16
   18bca:	76 db       	rcall	.-2324   	; 0x182b8 <B2V_LSB>
   18bcc:	c2 59       	subi	r28, 0x92	; 146
   18bce:	df 4f       	sbci	r29, 0xFF	; 255
   18bd0:	79 83       	std	Y+1, r23	; 0x01
   18bd2:	68 83       	st	Y, r22
   18bd4:	df 91       	pop	r29
   18bd6:	cf 91       	pop	r28
   18bd8:	1f 91       	pop	r17
   18bda:	0f 91       	pop	r16
   18bdc:	08 95       	ret

00018bde <lif_BIN2BCD>:
   18bde:	6a e0       	ldi	r22, 0x0A	; 10
   18be0:	0e 94 64 e4 	call	0x1c8c8	; 0x1c8c8 <__udivmodqi4>
   18be4:	82 95       	swap	r24
   18be6:	80 7f       	andi	r24, 0xF0	; 240
   18be8:	89 2b       	or	r24, r25
   18bea:	08 95       	ret

00018bec <lif_BCD2BIN>:
   18bec:	28 2f       	mov	r18, r24
   18bee:	22 95       	swap	r18
   18bf0:	2f 70       	andi	r18, 0x0F	; 15
   18bf2:	8f 70       	andi	r24, 0x0F	; 15
   18bf4:	90 e0       	ldi	r25, 0x00	; 0
   18bf6:	3a e0       	ldi	r19, 0x0A	; 10
   18bf8:	23 9f       	mul	r18, r19
   18bfa:	80 0d       	add	r24, r0
   18bfc:	91 1d       	adc	r25, r1
   18bfe:	11 24       	eor	r1, r1
   18c00:	08 95       	ret

00018c02 <lif_time2lifbcd>:
   18c02:	aa e1       	ldi	r26, 0x1A	; 26
   18c04:	b0 e0       	ldi	r27, 0x00	; 0
   18c06:	e7 e0       	ldi	r30, 0x07	; 7
   18c08:	f6 ec       	ldi	r31, 0xC6	; 198
   18c0a:	0c 94 27 e5 	jmp	0x1ca4e	; 0x1ca4e <__prologue_saves__+0x1c>
   18c0e:	8b 01       	movw	r16, r22
   18c10:	9c 01       	movw	r18, r24
   18c12:	6f 8b       	std	Y+23, r22	; 0x17
   18c14:	78 8f       	std	Y+24, r23	; 0x18
   18c16:	89 8f       	std	Y+25, r24	; 0x19
   18c18:	9a 8f       	std	Y+26, r25	; 0x1a
   18c1a:	67 2b       	or	r22, r23
   18c1c:	68 2b       	or	r22, r24
   18c1e:	69 2b       	or	r22, r25
   18c20:	41 f4       	brne	.+16     	; 0x18c32 <lif_time2lifbcd+0x30>
   18c22:	fa 01       	movw	r30, r20
   18c24:	ca 01       	movw	r24, r20
   18c26:	06 96       	adiw	r24, 0x06	; 6
   18c28:	11 92       	st	Z+, r1
   18c2a:	e8 17       	cp	r30, r24
   18c2c:	f9 07       	cpc	r31, r25
   18c2e:	e1 f7       	brne	.-8      	; 0x18c28 <lif_time2lifbcd+0x26>
   18c30:	26 c0       	rjmp	.+76     	; 0x18c7e <lif_time2lifbcd+0x7c>
   18c32:	8a 01       	movw	r16, r20
   18c34:	be 01       	movw	r22, r28
   18c36:	6f 5f       	subi	r22, 0xFF	; 255
   18c38:	7f 4f       	sbci	r23, 0xFF	; 255
   18c3a:	ce 01       	movw	r24, r28
   18c3c:	47 96       	adiw	r24, 0x17	; 23
   18c3e:	0e 94 37 39 	call	0x726e	; 0x726e <gmtime_r>
   18c42:	8b 85       	ldd	r24, Y+11	; 0x0b
   18c44:	9c 85       	ldd	r25, Y+12	; 0x0c
   18c46:	64 e6       	ldi	r22, 0x64	; 100
   18c48:	70 e0       	ldi	r23, 0x00	; 0
   18c4a:	0e 94 84 e4 	call	0x1c908	; 0x1c908 <__divmodhi4>
   18c4e:	c7 df       	rcall	.-114    	; 0x18bde <lif_BIN2BCD>
   18c50:	f8 01       	movw	r30, r16
   18c52:	80 83       	st	Z, r24
   18c54:	89 85       	ldd	r24, Y+9	; 0x09
   18c56:	8f 5f       	subi	r24, 0xFF	; 255
   18c58:	c2 df       	rcall	.-124    	; 0x18bde <lif_BIN2BCD>
   18c5a:	f8 01       	movw	r30, r16
   18c5c:	81 83       	std	Z+1, r24	; 0x01
   18c5e:	8f 81       	ldd	r24, Y+7	; 0x07
   18c60:	be df       	rcall	.-132    	; 0x18bde <lif_BIN2BCD>
   18c62:	f8 01       	movw	r30, r16
   18c64:	82 83       	std	Z+2, r24	; 0x02
   18c66:	8d 81       	ldd	r24, Y+5	; 0x05
   18c68:	ba df       	rcall	.-140    	; 0x18bde <lif_BIN2BCD>
   18c6a:	f8 01       	movw	r30, r16
   18c6c:	83 83       	std	Z+3, r24	; 0x03
   18c6e:	8b 81       	ldd	r24, Y+3	; 0x03
   18c70:	b6 df       	rcall	.-148    	; 0x18bde <lif_BIN2BCD>
   18c72:	f8 01       	movw	r30, r16
   18c74:	84 83       	std	Z+4, r24	; 0x04
   18c76:	89 81       	ldd	r24, Y+1	; 0x01
   18c78:	b2 df       	rcall	.-156    	; 0x18bde <lif_BIN2BCD>
   18c7a:	f8 01       	movw	r30, r16
   18c7c:	85 83       	std	Z+5, r24	; 0x05
   18c7e:	6a 96       	adiw	r28, 0x1a	; 26
   18c80:	e4 e0       	ldi	r30, 0x04	; 4
   18c82:	0c 94 43 e5 	jmp	0x1ca86	; 0x1ca86 <__epilogue_restores__+0x1c>

00018c86 <lif_lifbcd2time>:
   18c86:	a6 e1       	ldi	r26, 0x16	; 22
   18c88:	b0 e0       	ldi	r27, 0x00	; 0
   18c8a:	e9 e4       	ldi	r30, 0x49	; 73
   18c8c:	f6 ec       	ldi	r31, 0xC6	; 198
   18c8e:	0c 94 21 e5 	jmp	0x1ca42	; 0x1ca42 <__prologue_saves__+0x10>
   18c92:	8c 01       	movw	r16, r24
   18c94:	7c 01       	movw	r14, r24
   18c96:	5c 01       	movw	r10, r24
   18c98:	26 e0       	ldi	r18, 0x06	; 6
   18c9a:	a2 0e       	add	r10, r18
   18c9c:	b1 1c       	adc	r11, r1
   18c9e:	cc 24       	eor	r12, r12
   18ca0:	c3 94       	inc	r12
   18ca2:	d1 2c       	mov	r13, r1
   18ca4:	f7 01       	movw	r30, r14
   18ca6:	81 91       	ld	r24, Z+
   18ca8:	7f 01       	movw	r14, r30
   18caa:	a0 df       	rcall	.-192    	; 0x18bec <lif_BCD2BIN>
   18cac:	89 2b       	or	r24, r25
   18cae:	11 f0       	breq	.+4      	; 0x18cb4 <lif_lifbcd2time+0x2e>
   18cb0:	c1 2c       	mov	r12, r1
   18cb2:	d1 2c       	mov	r13, r1
   18cb4:	ea 14       	cp	r14, r10
   18cb6:	fb 04       	cpc	r15, r11
   18cb8:	a9 f7       	brne	.-22     	; 0x18ca4 <lif_lifbcd2time+0x1e>
   18cba:	c1 14       	cp	r12, r1
   18cbc:	d1 04       	cpc	r13, r1
   18cbe:	61 f5       	brne	.+88     	; 0x18d18 <lif_lifbcd2time+0x92>
   18cc0:	f8 01       	movw	r30, r16
   18cc2:	80 81       	ld	r24, Z
   18cc4:	93 df       	rcall	.-218    	; 0x18bec <lif_BCD2BIN>
   18cc6:	7c 01       	movw	r14, r24
   18cc8:	f8 01       	movw	r30, r16
   18cca:	81 81       	ldd	r24, Z+1	; 0x01
   18ccc:	8f df       	rcall	.-226    	; 0x18bec <lif_BCD2BIN>
   18cce:	01 97       	sbiw	r24, 0x01	; 1
   18cd0:	f6 e4       	ldi	r31, 0x46	; 70
   18cd2:	ef 16       	cp	r14, r31
   18cd4:	f1 04       	cpc	r15, r1
   18cd6:	1c f4       	brge	.+6      	; 0x18cde <lif_lifbcd2time+0x58>
   18cd8:	24 e6       	ldi	r18, 0x64	; 100
   18cda:	e2 0e       	add	r14, r18
   18cdc:	f1 1c       	adc	r15, r1
   18cde:	fc 86       	std	Y+12, r15	; 0x0c
   18ce0:	eb 86       	std	Y+11, r14	; 0x0b
   18ce2:	9a 87       	std	Y+10, r25	; 0x0a
   18ce4:	89 87       	std	Y+9, r24	; 0x09
   18ce6:	f8 01       	movw	r30, r16
   18ce8:	82 81       	ldd	r24, Z+2	; 0x02
   18cea:	80 df       	rcall	.-256    	; 0x18bec <lif_BCD2BIN>
   18cec:	98 87       	std	Y+8, r25	; 0x08
   18cee:	8f 83       	std	Y+7, r24	; 0x07
   18cf0:	f8 01       	movw	r30, r16
   18cf2:	83 81       	ldd	r24, Z+3	; 0x03
   18cf4:	7b df       	rcall	.-266    	; 0x18bec <lif_BCD2BIN>
   18cf6:	9e 83       	std	Y+6, r25	; 0x06
   18cf8:	8d 83       	std	Y+5, r24	; 0x05
   18cfa:	f8 01       	movw	r30, r16
   18cfc:	84 81       	ldd	r24, Z+4	; 0x04
   18cfe:	76 df       	rcall	.-276    	; 0x18bec <lif_BCD2BIN>
   18d00:	9c 83       	std	Y+4, r25	; 0x04
   18d02:	8b 83       	std	Y+3, r24	; 0x03
   18d04:	f8 01       	movw	r30, r16
   18d06:	85 81       	ldd	r24, Z+5	; 0x05
   18d08:	71 df       	rcall	.-286    	; 0x18bec <lif_BCD2BIN>
   18d0a:	9a 83       	std	Y+2, r25	; 0x02
   18d0c:	89 83       	std	Y+1, r24	; 0x01
   18d0e:	ce 01       	movw	r24, r28
   18d10:	01 96       	adiw	r24, 0x01	; 1
   18d12:	0e 94 0b 3c 	call	0x7816	; 0x7816 <timegm>
   18d16:	03 c0       	rjmp	.+6      	; 0x18d1e <lif_lifbcd2time+0x98>
   18d18:	60 e0       	ldi	r22, 0x00	; 0
   18d1a:	70 e0       	ldi	r23, 0x00	; 0
   18d1c:	cb 01       	movw	r24, r22
   18d1e:	66 96       	adiw	r28, 0x16	; 22
   18d20:	ea e0       	ldi	r30, 0x0A	; 10
   18d22:	0c 94 3d e5 	jmp	0x1ca7a	; 0x1ca7a <__epilogue_restores__+0x10>

00018d26 <lif_ctime_gmt>:
   18d26:	a6 e1       	ldi	r26, 0x16	; 22
   18d28:	b0 e0       	ldi	r27, 0x00	; 0
   18d2a:	e9 e9       	ldi	r30, 0x99	; 153
   18d2c:	f6 ec       	ldi	r31, 0xC6	; 198
   18d2e:	0c 94 27 e5 	jmp	0x1ca4e	; 0x1ca4e <__prologue_saves__+0x1c>
   18d32:	20 e2       	ldi	r18, 0x20	; 32
   18d34:	e9 e6       	ldi	r30, 0x69	; 105
   18d36:	f9 e1       	ldi	r31, 0x19	; 25
   18d38:	df 01       	movw	r26, r30
   18d3a:	1d 92       	st	X+, r1
   18d3c:	2a 95       	dec	r18
   18d3e:	e9 f7       	brne	.-6      	; 0x18d3a <lif_ctime_gmt+0x14>
   18d40:	be 01       	movw	r22, r28
   18d42:	6f 5f       	subi	r22, 0xFF	; 255
   18d44:	7f 4f       	sbci	r23, 0xFF	; 255
   18d46:	0e 94 37 39 	call	0x726e	; 0x726e <gmtime_r>
   18d4a:	69 e6       	ldi	r22, 0x69	; 105
   18d4c:	79 e1       	ldi	r23, 0x19	; 25
   18d4e:	0e 94 67 3e 	call	0x7cce	; 0x7cce <asctime_r>
   18d52:	8c 01       	movw	r16, r24
   18d54:	0e 94 c3 33 	call	0x6786	; 0x6786 <trim_tail>
   18d58:	c8 01       	movw	r24, r16
   18d5a:	66 96       	adiw	r28, 0x16	; 22
   18d5c:	e4 e0       	ldi	r30, 0x04	; 4
   18d5e:	0c 94 43 e5 	jmp	0x1ca86	; 0x1ca86 <__epilogue_restores__+0x1c>

00018d62 <lif_lifbcd2timestr>:
   18d62:	a4 e0       	ldi	r26, 0x04	; 4
   18d64:	b0 e0       	ldi	r27, 0x00	; 0
   18d66:	e7 eb       	ldi	r30, 0xB7	; 183
   18d68:	f6 ec       	ldi	r31, 0xC6	; 198
   18d6a:	0c 94 29 e5 	jmp	0x1ca52	; 0x1ca52 <__prologue_saves__+0x20>
   18d6e:	20 e2       	ldi	r18, 0x20	; 32
   18d70:	e9 e4       	ldi	r30, 0x49	; 73
   18d72:	f9 e1       	ldi	r31, 0x19	; 25
   18d74:	df 01       	movw	r26, r30
   18d76:	1d 92       	st	X+, r1
   18d78:	2a 95       	dec	r18
   18d7a:	e9 f7       	brne	.-6      	; 0x18d76 <lif_lifbcd2timestr+0x14>
   18d7c:	84 df       	rcall	.-248    	; 0x18c86 <lif_lifbcd2time>
   18d7e:	69 83       	std	Y+1, r22	; 0x01
   18d80:	7a 83       	std	Y+2, r23	; 0x02
   18d82:	8b 83       	std	Y+3, r24	; 0x03
   18d84:	9c 83       	std	Y+4, r25	; 0x04
   18d86:	67 2b       	or	r22, r23
   18d88:	68 2b       	or	r22, r24
   18d8a:	69 2b       	or	r22, r25
   18d8c:	29 f0       	breq	.+10     	; 0x18d98 <lif_lifbcd2timestr+0x36>
   18d8e:	ce 01       	movw	r24, r28
   18d90:	01 96       	adiw	r24, 0x01	; 1
   18d92:	c9 df       	rcall	.-110    	; 0x18d26 <lif_ctime_gmt>
   18d94:	bc 01       	movw	r22, r24
   18d96:	02 c0       	rjmp	.+4      	; 0x18d9c <lif_lifbcd2timestr+0x3a>
   18d98:	6a e3       	ldi	r22, 0x3A	; 58
   18d9a:	75 e1       	ldi	r23, 0x15	; 21
   18d9c:	89 e4       	ldi	r24, 0x49	; 73
   18d9e:	99 e1       	ldi	r25, 0x19	; 25
   18da0:	0e 94 e5 32 	call	0x65ca	; 0x65ca <strcpy>
   18da4:	89 e4       	ldi	r24, 0x49	; 73
   18da6:	99 e1       	ldi	r25, 0x19	; 25
   18da8:	24 96       	adiw	r28, 0x04	; 4
   18daa:	e2 e0       	ldi	r30, 0x02	; 2
   18dac:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__epilogue_restores__+0x20>

00018db0 <lif_image_clear>:
   18db0:	20 e7       	ldi	r18, 0x70	; 112
   18db2:	fc 01       	movw	r30, r24
   18db4:	11 92       	st	Z+, r1
   18db6:	2a 95       	dec	r18
   18db8:	e9 f7       	brne	.-6      	; 0x18db4 <lif_image_clear+0x4>
   18dba:	08 95       	ret

00018dbc <lif_dir_clear>:
   18dbc:	81 5b       	subi	r24, 0xB1	; 177
   18dbe:	9f 4f       	sbci	r25, 0xFF	; 255
   18dc0:	21 e2       	ldi	r18, 0x21	; 33
   18dc2:	fc 01       	movw	r30, r24
   18dc4:	11 92       	st	Z+, r1
   18dc6:	2a 95       	dec	r18
   18dc8:	e9 f7       	brne	.-6      	; 0x18dc4 <lif_dir_clear+0x8>
   18dca:	08 95       	ret

00018dcc <lif_vol_clear>:
   18dcc:	84 96       	adiw	r24, 0x24	; 36
   18dce:	2b e2       	ldi	r18, 0x2B	; 43
   18dd0:	fc 01       	movw	r30, r24
   18dd2:	11 92       	st	Z+, r1
   18dd4:	2a 95       	dec	r18
   18dd6:	e9 f7       	brne	.-6      	; 0x18dd2 <lif_vol_clear+0x6>
   18dd8:	08 95       	ret

00018dda <lif_dump_vol>:
   18dda:	cf 93       	push	r28
   18ddc:	df 93       	push	r29
   18dde:	ad b7       	in	r26, 0x3d	; 61
   18de0:	be b7       	in	r27, 0x3e	; 62
   18de2:	17 97       	sbiw	r26, 0x07	; 7
   18de4:	0f b6       	in	r0, 0x3f	; 63
   18de6:	f8 94       	cli
   18de8:	be bf       	out	0x3e, r27	; 62
   18dea:	0f be       	out	0x3f, r0	; 63
   18dec:	ad bf       	out	0x3d, r26	; 61
   18dee:	ec 01       	movw	r28, r24
   18df0:	ed b7       	in	r30, 0x3d	; 61
   18df2:	fe b7       	in	r31, 0x3e	; 62
   18df4:	75 83       	std	Z+5, r23	; 0x05
   18df6:	64 83       	std	Z+4, r22	; 0x04
   18df8:	8a e7       	ldi	r24, 0x7A	; 122
   18dfa:	92 e4       	ldi	r25, 0x42	; 66
   18dfc:	a0 e0       	ldi	r26, 0x00	; 0
   18dfe:	81 83       	std	Z+1, r24	; 0x01
   18e00:	92 83       	std	Z+2, r25	; 0x02
   18e02:	a3 83       	std	Z+3, r26	; 0x03
   18e04:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   18e08:	88 81       	ld	r24, Y
   18e0a:	99 81       	ldd	r25, Y+1	; 0x01
   18e0c:	ed b7       	in	r30, 0x3d	; 61
   18e0e:	fe b7       	in	r31, 0x3e	; 62
   18e10:	95 83       	std	Z+5, r25	; 0x05
   18e12:	84 83       	std	Z+4, r24	; 0x04
   18e14:	80 e6       	ldi	r24, 0x60	; 96
   18e16:	92 e4       	ldi	r25, 0x42	; 66
   18e18:	a0 e0       	ldi	r26, 0x00	; 0
   18e1a:	81 83       	std	Z+1, r24	; 0x01
   18e1c:	92 83       	std	Z+2, r25	; 0x02
   18e1e:	a3 83       	std	Z+3, r26	; 0x03
   18e20:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   18e24:	8c 81       	ldd	r24, Y+4	; 0x04
   18e26:	9d 81       	ldd	r25, Y+5	; 0x05
   18e28:	ae 81       	ldd	r26, Y+6	; 0x06
   18e2a:	bf 81       	ldd	r27, Y+7	; 0x07
   18e2c:	ed b7       	in	r30, 0x3d	; 61
   18e2e:	fe b7       	in	r31, 0x3e	; 62
   18e30:	84 83       	std	Z+4, r24	; 0x04
   18e32:	95 83       	std	Z+5, r25	; 0x05
   18e34:	a6 83       	std	Z+6, r26	; 0x06
   18e36:	b7 83       	std	Z+7, r27	; 0x07
   18e38:	83 e4       	ldi	r24, 0x43	; 67
   18e3a:	92 e4       	ldi	r25, 0x42	; 66
   18e3c:	a0 e0       	ldi	r26, 0x00	; 0
   18e3e:	81 83       	std	Z+1, r24	; 0x01
   18e40:	92 83       	std	Z+2, r25	; 0x02
   18e42:	a3 83       	std	Z+3, r26	; 0x03
   18e44:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   18e48:	88 85       	ldd	r24, Y+8	; 0x08
   18e4a:	99 85       	ldd	r25, Y+9	; 0x09
   18e4c:	aa 85       	ldd	r26, Y+10	; 0x0a
   18e4e:	bb 85       	ldd	r27, Y+11	; 0x0b
   18e50:	ed b7       	in	r30, 0x3d	; 61
   18e52:	fe b7       	in	r31, 0x3e	; 62
   18e54:	84 83       	std	Z+4, r24	; 0x04
   18e56:	95 83       	std	Z+5, r25	; 0x05
   18e58:	a6 83       	std	Z+6, r26	; 0x06
   18e5a:	b7 83       	std	Z+7, r27	; 0x07
   18e5c:	86 e2       	ldi	r24, 0x26	; 38
   18e5e:	92 e4       	ldi	r25, 0x42	; 66
   18e60:	a0 e0       	ldi	r26, 0x00	; 0
   18e62:	81 83       	std	Z+1, r24	; 0x01
   18e64:	92 83       	std	Z+2, r25	; 0x02
   18e66:	a3 83       	std	Z+3, r26	; 0x03
   18e68:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   18e6c:	8c 85       	ldd	r24, Y+12	; 0x0c
   18e6e:	9d 85       	ldd	r25, Y+13	; 0x0d
   18e70:	ae 85       	ldd	r26, Y+14	; 0x0e
   18e72:	bf 85       	ldd	r27, Y+15	; 0x0f
   18e74:	ed b7       	in	r30, 0x3d	; 61
   18e76:	fe b7       	in	r31, 0x3e	; 62
   18e78:	84 83       	std	Z+4, r24	; 0x04
   18e7a:	95 83       	std	Z+5, r25	; 0x05
   18e7c:	a6 83       	std	Z+6, r26	; 0x06
   18e7e:	b7 83       	std	Z+7, r27	; 0x07
   18e80:	89 e0       	ldi	r24, 0x09	; 9
   18e82:	92 e4       	ldi	r25, 0x42	; 66
   18e84:	a0 e0       	ldi	r26, 0x00	; 0
   18e86:	81 83       	std	Z+1, r24	; 0x01
   18e88:	92 83       	std	Z+2, r25	; 0x02
   18e8a:	a3 83       	std	Z+3, r26	; 0x03
   18e8c:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   18e90:	88 89       	ldd	r24, Y+16	; 0x10
   18e92:	99 89       	ldd	r25, Y+17	; 0x11
   18e94:	aa 89       	ldd	r26, Y+18	; 0x12
   18e96:	bb 89       	ldd	r27, Y+19	; 0x13
   18e98:	ed b7       	in	r30, 0x3d	; 61
   18e9a:	fe b7       	in	r31, 0x3e	; 62
   18e9c:	84 83       	std	Z+4, r24	; 0x04
   18e9e:	95 83       	std	Z+5, r25	; 0x05
   18ea0:	a6 83       	std	Z+6, r26	; 0x06
   18ea2:	b7 83       	std	Z+7, r27	; 0x07
   18ea4:	8c ee       	ldi	r24, 0xEC	; 236
   18ea6:	91 e4       	ldi	r25, 0x41	; 65
   18ea8:	a0 e0       	ldi	r26, 0x00	; 0
   18eaa:	81 83       	std	Z+1, r24	; 0x01
   18eac:	92 83       	std	Z+2, r25	; 0x02
   18eae:	a3 83       	std	Z+3, r26	; 0x03
   18eb0:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   18eb4:	8c 89       	ldd	r24, Y+20	; 0x14
   18eb6:	9d 89       	ldd	r25, Y+21	; 0x15
   18eb8:	ae 89       	ldd	r26, Y+22	; 0x16
   18eba:	bf 89       	ldd	r27, Y+23	; 0x17
   18ebc:	ed b7       	in	r30, 0x3d	; 61
   18ebe:	fe b7       	in	r31, 0x3e	; 62
   18ec0:	84 83       	std	Z+4, r24	; 0x04
   18ec2:	95 83       	std	Z+5, r25	; 0x05
   18ec4:	a6 83       	std	Z+6, r26	; 0x06
   18ec6:	b7 83       	std	Z+7, r27	; 0x07
   18ec8:	8f ec       	ldi	r24, 0xCF	; 207
   18eca:	91 e4       	ldi	r25, 0x41	; 65
   18ecc:	a0 e0       	ldi	r26, 0x00	; 0
   18ece:	81 83       	std	Z+1, r24	; 0x01
   18ed0:	92 83       	std	Z+2, r25	; 0x02
   18ed2:	a3 83       	std	Z+3, r26	; 0x03
   18ed4:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   18ed8:	88 8d       	ldd	r24, Y+24	; 0x18
   18eda:	99 8d       	ldd	r25, Y+25	; 0x19
   18edc:	aa 8d       	ldd	r26, Y+26	; 0x1a
   18ede:	bb 8d       	ldd	r27, Y+27	; 0x1b
   18ee0:	ed b7       	in	r30, 0x3d	; 61
   18ee2:	fe b7       	in	r31, 0x3e	; 62
   18ee4:	84 83       	std	Z+4, r24	; 0x04
   18ee6:	95 83       	std	Z+5, r25	; 0x05
   18ee8:	a6 83       	std	Z+6, r26	; 0x06
   18eea:	b7 83       	std	Z+7, r27	; 0x07
   18eec:	82 eb       	ldi	r24, 0xB2	; 178
   18eee:	91 e4       	ldi	r25, 0x41	; 65
   18ef0:	a0 e0       	ldi	r26, 0x00	; 0
   18ef2:	81 83       	std	Z+1, r24	; 0x01
   18ef4:	92 83       	std	Z+2, r25	; 0x02
   18ef6:	a3 83       	std	Z+3, r26	; 0x03
   18ef8:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   18efc:	8c 8d       	ldd	r24, Y+28	; 0x1c
   18efe:	9d 8d       	ldd	r25, Y+29	; 0x1d
   18f00:	09 2e       	mov	r0, r25
   18f02:	00 0c       	add	r0, r0
   18f04:	aa 0b       	sbc	r26, r26
   18f06:	bb 0b       	sbc	r27, r27
   18f08:	ed b7       	in	r30, 0x3d	; 61
   18f0a:	fe b7       	in	r31, 0x3e	; 62
   18f0c:	84 83       	std	Z+4, r24	; 0x04
   18f0e:	95 83       	std	Z+5, r25	; 0x05
   18f10:	a6 83       	std	Z+6, r26	; 0x06
   18f12:	b7 83       	std	Z+7, r27	; 0x07
   18f14:	85 e9       	ldi	r24, 0x95	; 149
   18f16:	91 e4       	ldi	r25, 0x41	; 65
   18f18:	a0 e0       	ldi	r26, 0x00	; 0
   18f1a:	81 83       	std	Z+1, r24	; 0x01
   18f1c:	92 83       	std	Z+2, r25	; 0x02
   18f1e:	a3 83       	std	Z+3, r26	; 0x03
   18f20:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   18f24:	8e 8d       	ldd	r24, Y+30	; 0x1e
   18f26:	9f 8d       	ldd	r25, Y+31	; 0x1f
   18f28:	09 2e       	mov	r0, r25
   18f2a:	00 0c       	add	r0, r0
   18f2c:	aa 0b       	sbc	r26, r26
   18f2e:	bb 0b       	sbc	r27, r27
   18f30:	ed b7       	in	r30, 0x3d	; 61
   18f32:	fe b7       	in	r31, 0x3e	; 62
   18f34:	84 83       	std	Z+4, r24	; 0x04
   18f36:	95 83       	std	Z+5, r25	; 0x05
   18f38:	a6 83       	std	Z+6, r26	; 0x06
   18f3a:	b7 83       	std	Z+7, r27	; 0x07
   18f3c:	88 e7       	ldi	r24, 0x78	; 120
   18f3e:	91 e4       	ldi	r25, 0x41	; 65
   18f40:	a0 e0       	ldi	r26, 0x00	; 0
   18f42:	81 83       	std	Z+1, r24	; 0x01
   18f44:	92 83       	std	Z+2, r25	; 0x02
   18f46:	a3 83       	std	Z+3, r26	; 0x03
   18f48:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   18f4c:	ce 01       	movw	r24, r28
   18f4e:	86 96       	adiw	r24, 0x26	; 38
   18f50:	ed b7       	in	r30, 0x3d	; 61
   18f52:	fe b7       	in	r31, 0x3e	; 62
   18f54:	95 83       	std	Z+5, r25	; 0x05
   18f56:	84 83       	std	Z+4, r24	; 0x04
   18f58:	8e e5       	ldi	r24, 0x5E	; 94
   18f5a:	91 e4       	ldi	r25, 0x41	; 65
   18f5c:	a0 e0       	ldi	r26, 0x00	; 0
   18f5e:	81 83       	std	Z+1, r24	; 0x01
   18f60:	92 83       	std	Z+2, r25	; 0x02
   18f62:	a3 83       	std	Z+3, r26	; 0x03
   18f64:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   18f68:	8c a1       	ldd	r24, Y+36	; 0x24
   18f6a:	9d a1       	ldd	r25, Y+37	; 0x25
   18f6c:	ed b7       	in	r30, 0x3d	; 61
   18f6e:	fe b7       	in	r31, 0x3e	; 62
   18f70:	95 83       	std	Z+5, r25	; 0x05
   18f72:	84 83       	std	Z+4, r24	; 0x04
   18f74:	82 e4       	ldi	r24, 0x42	; 66
   18f76:	91 e4       	ldi	r25, 0x41	; 65
   18f78:	a0 e0       	ldi	r26, 0x00	; 0
   18f7a:	81 83       	std	Z+1, r24	; 0x01
   18f7c:	92 83       	std	Z+2, r25	; 0x02
   18f7e:	a3 83       	std	Z+3, r26	; 0x03
   18f80:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   18f84:	8d a5       	ldd	r24, Y+45	; 0x2d
   18f86:	9e a5       	ldd	r25, Y+46	; 0x2e
   18f88:	af a5       	ldd	r26, Y+47	; 0x2f
   18f8a:	b8 a9       	ldd	r27, Y+48	; 0x30
   18f8c:	ed b7       	in	r30, 0x3d	; 61
   18f8e:	fe b7       	in	r31, 0x3e	; 62
   18f90:	84 83       	std	Z+4, r24	; 0x04
   18f92:	95 83       	std	Z+5, r25	; 0x05
   18f94:	a6 83       	std	Z+6, r26	; 0x06
   18f96:	b7 83       	std	Z+7, r27	; 0x07
   18f98:	85 e2       	ldi	r24, 0x25	; 37
   18f9a:	91 e4       	ldi	r25, 0x41	; 65
   18f9c:	a0 e0       	ldi	r26, 0x00	; 0
   18f9e:	81 83       	std	Z+1, r24	; 0x01
   18fa0:	92 83       	std	Z+2, r25	; 0x02
   18fa2:	a3 83       	std	Z+3, r26	; 0x03
   18fa4:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   18fa8:	8d a9       	ldd	r24, Y+53	; 0x35
   18faa:	9e a9       	ldd	r25, Y+54	; 0x36
   18fac:	af a9       	ldd	r26, Y+55	; 0x37
   18fae:	b8 ad       	ldd	r27, Y+56	; 0x38
   18fb0:	ed b7       	in	r30, 0x3d	; 61
   18fb2:	fe b7       	in	r31, 0x3e	; 62
   18fb4:	84 83       	std	Z+4, r24	; 0x04
   18fb6:	95 83       	std	Z+5, r25	; 0x05
   18fb8:	a6 83       	std	Z+6, r26	; 0x06
   18fba:	b7 83       	std	Z+7, r27	; 0x07
   18fbc:	88 e0       	ldi	r24, 0x08	; 8
   18fbe:	91 e4       	ldi	r25, 0x41	; 65
   18fc0:	a0 e0       	ldi	r26, 0x00	; 0
   18fc2:	81 83       	std	Z+1, r24	; 0x01
   18fc4:	92 83       	std	Z+2, r25	; 0x02
   18fc6:	a3 83       	std	Z+3, r26	; 0x03
   18fc8:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   18fcc:	89 a9       	ldd	r24, Y+49	; 0x31
   18fce:	9a a9       	ldd	r25, Y+50	; 0x32
   18fd0:	ed b7       	in	r30, 0x3d	; 61
   18fd2:	fe b7       	in	r31, 0x3e	; 62
   18fd4:	95 83       	std	Z+5, r25	; 0x05
   18fd6:	84 83       	std	Z+4, r24	; 0x04
   18fd8:	8c ee       	ldi	r24, 0xEC	; 236
   18fda:	90 e4       	ldi	r25, 0x40	; 64
   18fdc:	a0 e0       	ldi	r26, 0x00	; 0
   18fde:	81 83       	std	Z+1, r24	; 0x01
   18fe0:	92 83       	std	Z+2, r25	; 0x02
   18fe2:	a3 83       	std	Z+3, r26	; 0x03
   18fe4:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   18fe8:	89 ad       	ldd	r24, Y+57	; 0x39
   18fea:	9a ad       	ldd	r25, Y+58	; 0x3a
   18fec:	ed b7       	in	r30, 0x3d	; 61
   18fee:	fe b7       	in	r31, 0x3e	; 62
   18ff0:	95 83       	std	Z+5, r25	; 0x05
   18ff2:	84 83       	std	Z+4, r24	; 0x04
   18ff4:	80 ed       	ldi	r24, 0xD0	; 208
   18ff6:	90 e4       	ldi	r25, 0x40	; 64
   18ff8:	a0 e0       	ldi	r26, 0x00	; 0
   18ffa:	81 83       	std	Z+1, r24	; 0x01
   18ffc:	92 83       	std	Z+2, r25	; 0x02
   18ffe:	a3 83       	std	Z+3, r26	; 0x03
   19000:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   19004:	ce 01       	movw	r24, r28
   19006:	87 5b       	subi	r24, 0xB7	; 183
   19008:	9f 4f       	sbci	r25, 0xFF	; 255
   1900a:	ab de       	rcall	.-682    	; 0x18d62 <lif_lifbcd2timestr>
   1900c:	ed b7       	in	r30, 0x3d	; 61
   1900e:	fe b7       	in	r31, 0x3e	; 62
   19010:	95 83       	std	Z+5, r25	; 0x05
   19012:	84 83       	std	Z+4, r24	; 0x04
   19014:	86 eb       	ldi	r24, 0xB6	; 182
   19016:	90 e4       	ldi	r25, 0x40	; 64
   19018:	a0 e0       	ldi	r26, 0x00	; 0
   1901a:	81 83       	std	Z+1, r24	; 0x01
   1901c:	92 83       	std	Z+2, r25	; 0x02
   1901e:	a3 83       	std	Z+3, r26	; 0x03
   19020:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   19024:	ce 01       	movw	r24, r28
   19026:	81 5b       	subi	r24, 0xB1	; 177
   19028:	9f 4f       	sbci	r25, 0xFF	; 255
   1902a:	ed b7       	in	r30, 0x3d	; 61
   1902c:	fe b7       	in	r31, 0x3e	; 62
   1902e:	95 83       	std	Z+5, r25	; 0x05
   19030:	84 83       	std	Z+4, r24	; 0x04
   19032:	8c e9       	ldi	r24, 0x9C	; 156
   19034:	90 e4       	ldi	r25, 0x40	; 64
   19036:	a0 e0       	ldi	r26, 0x00	; 0
   19038:	81 83       	std	Z+1, r24	; 0x01
   1903a:	92 83       	std	Z+2, r25	; 0x02
   1903c:	a3 83       	std	Z+3, r26	; 0x03
   1903e:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   19042:	fe 01       	movw	r30, r28
   19044:	e6 5a       	subi	r30, 0xA6	; 166
   19046:	ff 4f       	sbci	r31, 0xFF	; 255
   19048:	80 81       	ld	r24, Z
   1904a:	91 81       	ldd	r25, Z+1	; 0x01
   1904c:	ed b7       	in	r30, 0x3d	; 61
   1904e:	fe b7       	in	r31, 0x3e	; 62
   19050:	95 83       	std	Z+5, r25	; 0x05
   19052:	84 83       	std	Z+4, r24	; 0x04
   19054:	80 e8       	ldi	r24, 0x80	; 128
   19056:	90 e4       	ldi	r25, 0x40	; 64
   19058:	a0 e0       	ldi	r26, 0x00	; 0
   1905a:	81 83       	std	Z+1, r24	; 0x01
   1905c:	92 83       	std	Z+2, r25	; 0x02
   1905e:	a3 83       	std	Z+3, r26	; 0x03
   19060:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   19064:	fe 01       	movw	r30, r28
   19066:	e6 59       	subi	r30, 0x96	; 150
   19068:	ff 4f       	sbci	r31, 0xFF	; 255
   1906a:	80 81       	ld	r24, Z
   1906c:	91 81       	ldd	r25, Z+1	; 0x01
   1906e:	ed b7       	in	r30, 0x3d	; 61
   19070:	fe b7       	in	r31, 0x3e	; 62
   19072:	95 83       	std	Z+5, r25	; 0x05
   19074:	84 83       	std	Z+4, r24	; 0x04
   19076:	84 e6       	ldi	r24, 0x64	; 100
   19078:	90 e4       	ldi	r25, 0x40	; 64
   1907a:	a0 e0       	ldi	r26, 0x00	; 0
   1907c:	81 83       	std	Z+1, r24	; 0x01
   1907e:	92 83       	std	Z+2, r25	; 0x02
   19080:	a3 83       	std	Z+3, r26	; 0x03
   19082:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   19086:	fe 01       	movw	r30, r28
   19088:	e4 5a       	subi	r30, 0xA4	; 164
   1908a:	ff 4f       	sbci	r31, 0xFF	; 255
   1908c:	80 81       	ld	r24, Z
   1908e:	91 81       	ldd	r25, Z+1	; 0x01
   19090:	a2 81       	ldd	r26, Z+2	; 0x02
   19092:	b3 81       	ldd	r27, Z+3	; 0x03
   19094:	ed b7       	in	r30, 0x3d	; 61
   19096:	fe b7       	in	r31, 0x3e	; 62
   19098:	84 83       	std	Z+4, r24	; 0x04
   1909a:	95 83       	std	Z+5, r25	; 0x05
   1909c:	a6 83       	std	Z+6, r26	; 0x06
   1909e:	b7 83       	std	Z+7, r27	; 0x07
   190a0:	87 e4       	ldi	r24, 0x47	; 71
   190a2:	90 e4       	ldi	r25, 0x40	; 64
   190a4:	a0 e0       	ldi	r26, 0x00	; 0
   190a6:	81 83       	std	Z+1, r24	; 0x01
   190a8:	92 83       	std	Z+2, r25	; 0x02
   190aa:	a3 83       	std	Z+3, r26	; 0x03
   190ac:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   190b0:	fe 01       	movw	r30, r28
   190b2:	e0 5a       	subi	r30, 0xA0	; 160
   190b4:	ff 4f       	sbci	r31, 0xFF	; 255
   190b6:	80 81       	ld	r24, Z
   190b8:	91 81       	ldd	r25, Z+1	; 0x01
   190ba:	a2 81       	ldd	r26, Z+2	; 0x02
   190bc:	b3 81       	ldd	r27, Z+3	; 0x03
   190be:	ed b7       	in	r30, 0x3d	; 61
   190c0:	fe b7       	in	r31, 0x3e	; 62
   190c2:	84 83       	std	Z+4, r24	; 0x04
   190c4:	95 83       	std	Z+5, r25	; 0x05
   190c6:	a6 83       	std	Z+6, r26	; 0x06
   190c8:	b7 83       	std	Z+7, r27	; 0x07
   190ca:	8a e2       	ldi	r24, 0x2A	; 42
   190cc:	90 e4       	ldi	r25, 0x40	; 64
   190ce:	a0 e0       	ldi	r26, 0x00	; 0
   190d0:	81 83       	std	Z+1, r24	; 0x01
   190d2:	92 83       	std	Z+2, r25	; 0x02
   190d4:	a3 83       	std	Z+3, r26	; 0x03
   190d6:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   190da:	fe 01       	movw	r30, r28
   190dc:	e4 59       	subi	r30, 0x94	; 148
   190de:	ff 4f       	sbci	r31, 0xFF	; 255
   190e0:	80 81       	ld	r24, Z
   190e2:	91 81       	ldd	r25, Z+1	; 0x01
   190e4:	a0 e0       	ldi	r26, 0x00	; 0
   190e6:	b0 e0       	ldi	r27, 0x00	; 0
   190e8:	ed b7       	in	r30, 0x3d	; 61
   190ea:	fe b7       	in	r31, 0x3e	; 62
   190ec:	84 83       	std	Z+4, r24	; 0x04
   190ee:	95 83       	std	Z+5, r25	; 0x05
   190f0:	a6 83       	std	Z+6, r26	; 0x06
   190f2:	b7 83       	std	Z+7, r27	; 0x07
   190f4:	8d e0       	ldi	r24, 0x0D	; 13
   190f6:	90 e4       	ldi	r25, 0x40	; 64
   190f8:	a0 e0       	ldi	r26, 0x00	; 0
   190fa:	81 83       	std	Z+1, r24	; 0x01
   190fc:	92 83       	std	Z+2, r25	; 0x02
   190fe:	a3 83       	std	Z+3, r26	; 0x03
   19100:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   19104:	fe 01       	movw	r30, r28
   19106:	e2 59       	subi	r30, 0x92	; 146
   19108:	ff 4f       	sbci	r31, 0xFF	; 255
   1910a:	80 81       	ld	r24, Z
   1910c:	91 81       	ldd	r25, Z+1	; 0x01
   1910e:	ed b7       	in	r30, 0x3d	; 61
   19110:	fe b7       	in	r31, 0x3e	; 62
   19112:	95 83       	std	Z+5, r25	; 0x05
   19114:	84 83       	std	Z+4, r24	; 0x04
   19116:	81 ef       	ldi	r24, 0xF1	; 241
   19118:	9f e3       	ldi	r25, 0x3F	; 63
   1911a:	a0 e0       	ldi	r26, 0x00	; 0
   1911c:	81 83       	std	Z+1, r24	; 0x01
   1911e:	92 83       	std	Z+2, r25	; 0x02
   19120:	a3 83       	std	Z+3, r26	; 0x03
   19122:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   19126:	ce 01       	movw	r24, r28
   19128:	8c 59       	subi	r24, 0x9C	; 156
   1912a:	9f 4f       	sbci	r25, 0xFF	; 255
   1912c:	1a de       	rcall	.-972    	; 0x18d62 <lif_lifbcd2timestr>
   1912e:	ed b7       	in	r30, 0x3d	; 61
   19130:	fe b7       	in	r31, 0x3e	; 62
   19132:	95 83       	std	Z+5, r25	; 0x05
   19134:	84 83       	std	Z+4, r24	; 0x04
   19136:	87 ed       	ldi	r24, 0xD7	; 215
   19138:	9f e3       	ldi	r25, 0x3F	; 63
   1913a:	a0 e0       	ldi	r26, 0x00	; 0
   1913c:	81 83       	std	Z+1, r24	; 0x01
   1913e:	92 83       	std	Z+2, r25	; 0x02
   19140:	a3 83       	std	Z+3, r26	; 0x03
   19142:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   19146:	85 ed       	ldi	r24, 0xD5	; 213
   19148:	9f e3       	ldi	r25, 0x3F	; 63
   1914a:	a0 e0       	ldi	r26, 0x00	; 0
   1914c:	ed b7       	in	r30, 0x3d	; 61
   1914e:	fe b7       	in	r31, 0x3e	; 62
   19150:	81 83       	std	Z+1, r24	; 0x01
   19152:	92 83       	std	Z+2, r25	; 0x02
   19154:	a3 83       	std	Z+3, r26	; 0x03
   19156:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   1915a:	cd b7       	in	r28, 0x3d	; 61
   1915c:	de b7       	in	r29, 0x3e	; 62
   1915e:	27 96       	adiw	r28, 0x07	; 7
   19160:	e2 e0       	ldi	r30, 0x02	; 2
   19162:	0c 94 45 e5 	jmp	0x1ca8a	; 0x1ca8a <__epilogue_restores__+0x20>

00019166 <lif_check_volume>:
   19166:	0f 93       	push	r16
   19168:	1f 93       	push	r17
   1916a:	cf 93       	push	r28
   1916c:	df 93       	push	r29
   1916e:	ad b7       	in	r26, 0x3d	; 61
   19170:	be b7       	in	r27, 0x3e	; 62
   19172:	17 97       	sbiw	r26, 0x07	; 7
   19174:	0f b6       	in	r0, 0x3f	; 63
   19176:	f8 94       	cli
   19178:	be bf       	out	0x3e, r27	; 62
   1917a:	0f be       	out	0x3f, r0	; 63
   1917c:	ad bf       	out	0x3d, r26	; 61
   1917e:	ec 01       	movw	r28, r24
   19180:	86 96       	adiw	r24, 0x26	; 38
   19182:	e0 da       	rcall	.-2624   	; 0x18744 <lif_checkname>
   19184:	89 2b       	or	r24, r25
   19186:	79 f4       	brne	.+30     	; 0x191a6 <lif_check_volume+0x40>
   19188:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1918c:	80 ff       	sbrs	r24, 0
   1918e:	0e c0       	rjmp	.+28     	; 0x191ac <lif_check_volume+0x46>
   19190:	86 eb       	ldi	r24, 0xB6	; 182
   19192:	9f e3       	ldi	r25, 0x3F	; 63
   19194:	a0 e0       	ldi	r26, 0x00	; 0
   19196:	ed b7       	in	r30, 0x3d	; 61
   19198:	fe b7       	in	r31, 0x3e	; 62
   1919a:	81 83       	std	Z+1, r24	; 0x01
   1919c:	92 83       	std	Z+2, r25	; 0x02
   1919e:	a3 83       	std	Z+3, r26	; 0x03
   191a0:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   191a4:	03 c0       	rjmp	.+6      	; 0x191ac <lif_check_volume+0x46>
   191a6:	81 e0       	ldi	r24, 0x01	; 1
   191a8:	90 e0       	ldi	r25, 0x00	; 0
   191aa:	02 c0       	rjmp	.+4      	; 0x191b0 <lif_check_volume+0x4a>
   191ac:	80 e0       	ldi	r24, 0x00	; 0
   191ae:	90 e0       	ldi	r25, 0x00	; 0
   191b0:	29 a9       	ldd	r18, Y+49	; 0x31
   191b2:	3a a9       	ldd	r19, Y+50	; 0x32
   191b4:	21 15       	cp	r18, r1
   191b6:	f0 e1       	ldi	r31, 0x10	; 16
   191b8:	3f 07       	cpc	r19, r31
   191ba:	91 f0       	breq	.+36     	; 0x191e0 <lif_check_volume+0x7a>
   191bc:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   191c0:	80 ff       	sbrs	r24, 0
   191c2:	0c c0       	rjmp	.+24     	; 0x191dc <lif_check_volume+0x76>
   191c4:	ed b7       	in	r30, 0x3d	; 61
   191c6:	fe b7       	in	r31, 0x3e	; 62
   191c8:	35 83       	std	Z+5, r19	; 0x05
   191ca:	24 83       	std	Z+4, r18	; 0x04
   191cc:	8d e7       	ldi	r24, 0x7D	; 125
   191ce:	9f e3       	ldi	r25, 0x3F	; 63
   191d0:	a0 e0       	ldi	r26, 0x00	; 0
   191d2:	81 83       	std	Z+1, r24	; 0x01
   191d4:	92 83       	std	Z+2, r25	; 0x02
   191d6:	a3 83       	std	Z+3, r26	; 0x03
   191d8:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   191dc:	80 e0       	ldi	r24, 0x00	; 0
   191de:	90 e0       	ldi	r25, 0x00	; 0
   191e0:	29 ad       	ldd	r18, Y+57	; 0x39
   191e2:	3a ad       	ldd	r19, Y+58	; 0x3a
   191e4:	22 30       	cpi	r18, 0x02	; 2
   191e6:	31 05       	cpc	r19, r1
   191e8:	90 f0       	brcs	.+36     	; 0x1920e <lif_check_volume+0xa8>
   191ea:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   191ee:	80 ff       	sbrs	r24, 0
   191f0:	0c c0       	rjmp	.+24     	; 0x1920a <lif_check_volume+0xa4>
   191f2:	ed b7       	in	r30, 0x3d	; 61
   191f4:	fe b7       	in	r31, 0x3e	; 62
   191f6:	35 83       	std	Z+5, r19	; 0x05
   191f8:	24 83       	std	Z+4, r18	; 0x04
   191fa:	85 e6       	ldi	r24, 0x65	; 101
   191fc:	9f e3       	ldi	r25, 0x3F	; 63
   191fe:	a0 e0       	ldi	r26, 0x00	; 0
   19200:	81 83       	std	Z+1, r24	; 0x01
   19202:	92 83       	std	Z+2, r25	; 0x02
   19204:	a3 83       	std	Z+3, r26	; 0x03
   19206:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   1920a:	80 e0       	ldi	r24, 0x00	; 0
   1920c:	90 e0       	ldi	r25, 0x00	; 0
   1920e:	2b a9       	ldd	r18, Y+51	; 0x33
   19210:	3c a9       	ldd	r19, Y+52	; 0x34
   19212:	23 2b       	or	r18, r19
   19214:	81 f0       	breq	.+32     	; 0x19236 <lif_check_volume+0xd0>
   19216:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1921a:	80 ff       	sbrs	r24, 0
   1921c:	0a c0       	rjmp	.+20     	; 0x19232 <lif_check_volume+0xcc>
   1921e:	8c e2       	ldi	r24, 0x2C	; 44
   19220:	9f e3       	ldi	r25, 0x3F	; 63
   19222:	a0 e0       	ldi	r26, 0x00	; 0
   19224:	ed b7       	in	r30, 0x3d	; 61
   19226:	fe b7       	in	r31, 0x3e	; 62
   19228:	81 83       	std	Z+1, r24	; 0x01
   1922a:	92 83       	std	Z+2, r25	; 0x02
   1922c:	a3 83       	std	Z+3, r26	; 0x03
   1922e:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   19232:	80 e0       	ldi	r24, 0x00	; 0
   19234:	90 e0       	ldi	r25, 0x00	; 0
   19236:	2b ad       	ldd	r18, Y+59	; 0x3b
   19238:	3c ad       	ldd	r19, Y+60	; 0x3c
   1923a:	23 2b       	or	r18, r19
   1923c:	81 f0       	breq	.+32     	; 0x1925e <lif_check_volume+0xf8>
   1923e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   19242:	80 ff       	sbrs	r24, 0
   19244:	0a c0       	rjmp	.+20     	; 0x1925a <lif_check_volume+0xf4>
   19246:	83 ef       	ldi	r24, 0xF3	; 243
   19248:	9e e3       	ldi	r25, 0x3E	; 62
   1924a:	a0 e0       	ldi	r26, 0x00	; 0
   1924c:	ed b7       	in	r30, 0x3d	; 61
   1924e:	fe b7       	in	r31, 0x3e	; 62
   19250:	81 83       	std	Z+1, r24	; 0x01
   19252:	92 83       	std	Z+2, r25	; 0x02
   19254:	a3 83       	std	Z+3, r26	; 0x03
   19256:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   1925a:	80 e0       	ldi	r24, 0x00	; 0
   1925c:	90 e0       	ldi	r25, 0x00	; 0
   1925e:	4d a5       	ldd	r20, Y+45	; 0x2d
   19260:	5e a5       	ldd	r21, Y+46	; 0x2e
   19262:	6f a5       	ldd	r22, Y+47	; 0x2f
   19264:	78 a9       	ldd	r23, Y+48	; 0x30
   19266:	45 2b       	or	r20, r21
   19268:	46 2b       	or	r20, r22
   1926a:	47 2b       	or	r20, r23
   1926c:	a1 f4       	brne	.+40     	; 0x19296 <lif_check_volume+0x130>
   1926e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   19272:	80 ff       	sbrs	r24, 0
   19274:	0e c0       	rjmp	.+28     	; 0x19292 <lif_check_volume+0x12c>
   19276:	ed b7       	in	r30, 0x3d	; 61
   19278:	fe b7       	in	r31, 0x3e	; 62
   1927a:	14 82       	std	Z+4, r1	; 0x04
   1927c:	15 82       	std	Z+5, r1	; 0x05
   1927e:	16 82       	std	Z+6, r1	; 0x06
   19280:	17 82       	std	Z+7, r1	; 0x07
   19282:	8e ec       	ldi	r24, 0xCE	; 206
   19284:	9e e3       	ldi	r25, 0x3E	; 62
   19286:	a0 e0       	ldi	r26, 0x00	; 0
   19288:	81 83       	std	Z+1, r24	; 0x01
   1928a:	92 83       	std	Z+2, r25	; 0x02
   1928c:	a3 83       	std	Z+3, r26	; 0x03
   1928e:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   19292:	80 e0       	ldi	r24, 0x00	; 0
   19294:	90 e0       	ldi	r25, 0x00	; 0
   19296:	4d a9       	ldd	r20, Y+53	; 0x35
   19298:	5e a9       	ldd	r21, Y+54	; 0x36
   1929a:	6f a9       	ldd	r22, Y+55	; 0x37
   1929c:	78 ad       	ldd	r23, Y+56	; 0x38
   1929e:	45 2b       	or	r20, r21
   192a0:	46 2b       	or	r20, r22
   192a2:	47 2b       	or	r20, r23
   192a4:	81 f4       	brne	.+32     	; 0x192c6 <lif_check_volume+0x160>
   192a6:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   192aa:	80 ff       	sbrs	r24, 0
   192ac:	0a c0       	rjmp	.+20     	; 0x192c2 <lif_check_volume+0x15c>
   192ae:	8f e9       	ldi	r24, 0x9F	; 159
   192b0:	9e e3       	ldi	r25, 0x3E	; 62
   192b2:	a0 e0       	ldi	r26, 0x00	; 0
   192b4:	ed b7       	in	r30, 0x3d	; 61
   192b6:	fe b7       	in	r31, 0x3e	; 62
   192b8:	81 83       	std	Z+1, r24	; 0x01
   192ba:	92 83       	std	Z+2, r25	; 0x02
   192bc:	a3 83       	std	Z+3, r26	; 0x03
   192be:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   192c2:	80 e0       	ldi	r24, 0x00	; 0
   192c4:	90 e0       	ldi	r25, 0x00	; 0
   192c6:	0d a5       	ldd	r16, Y+45	; 0x2d
   192c8:	1e a5       	ldd	r17, Y+46	; 0x2e
   192ca:	2f a5       	ldd	r18, Y+47	; 0x2f
   192cc:	38 a9       	ldd	r19, Y+48	; 0x30
   192ce:	4d a9       	ldd	r20, Y+53	; 0x35
   192d0:	5e a9       	ldd	r21, Y+54	; 0x36
   192d2:	6f a9       	ldd	r22, Y+55	; 0x37
   192d4:	78 ad       	ldd	r23, Y+56	; 0x38
   192d6:	40 0f       	add	r20, r16
   192d8:	51 1f       	adc	r21, r17
   192da:	62 1f       	adc	r22, r18
   192dc:	73 1f       	adc	r23, r19
   192de:	0c 81       	ldd	r16, Y+4	; 0x04
   192e0:	1d 81       	ldd	r17, Y+5	; 0x05
   192e2:	2e 81       	ldd	r18, Y+6	; 0x06
   192e4:	3f 81       	ldd	r19, Y+7	; 0x07
   192e6:	04 17       	cp	r16, r20
   192e8:	15 07       	cpc	r17, r21
   192ea:	26 07       	cpc	r18, r22
   192ec:	37 07       	cpc	r19, r23
   192ee:	80 f4       	brcc	.+32     	; 0x19310 <lif_check_volume+0x1aa>
   192f0:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   192f4:	80 ff       	sbrs	r24, 0
   192f6:	0a c0       	rjmp	.+20     	; 0x1930c <lif_check_volume+0x1a6>
   192f8:	83 e7       	ldi	r24, 0x73	; 115
   192fa:	9e e3       	ldi	r25, 0x3E	; 62
   192fc:	a0 e0       	ldi	r26, 0x00	; 0
   192fe:	ed b7       	in	r30, 0x3d	; 61
   19300:	fe b7       	in	r31, 0x3e	; 62
   19302:	81 83       	std	Z+1, r24	; 0x01
   19304:	92 83       	std	Z+2, r25	; 0x02
   19306:	a3 83       	std	Z+3, r26	; 0x03
   19308:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   1930c:	80 e0       	ldi	r24, 0x00	; 0
   1930e:	90 e0       	ldi	r25, 0x00	; 0
   19310:	cd b7       	in	r28, 0x3d	; 61
   19312:	de b7       	in	r29, 0x3e	; 62
   19314:	27 96       	adiw	r28, 0x07	; 7
   19316:	e4 e0       	ldi	r30, 0x04	; 4
   19318:	0c 94 43 e5 	jmp	0x1ca86	; 0x1ca86 <__epilogue_restores__+0x1c>

0001931c <lif_check_dir>:
   1931c:	a5 e1       	ldi	r26, 0x15	; 21
   1931e:	b0 e0       	ldi	r27, 0x00	; 0
   19320:	e4 e9       	ldi	r30, 0x94	; 148
   19322:	f9 ec       	ldi	r31, 0xC9	; 201
   19324:	0c 94 19 e5 	jmp	0x1ca32	; 0x1ca32 <__prologue_saves__>
   19328:	6c 01       	movw	r12, r24
   1932a:	2a e5       	ldi	r18, 0x5A	; 90
   1932c:	c2 0e       	add	r12, r18
   1932e:	d1 1c       	adc	r13, r1
   19330:	f6 01       	movw	r30, r12
   19332:	20 81       	ld	r18, Z
   19334:	31 81       	ldd	r19, Z+1	; 0x01
   19336:	21 50       	subi	r18, 0x01	; 1
   19338:	31 09       	sbc	r19, r1
   1933a:	2e 3f       	cpi	r18, 0xFE	; 254
   1933c:	3f 4f       	sbci	r19, 0xFF	; 255
   1933e:	08 f0       	brcs	.+2      	; 0x19342 <lif_check_dir+0x26>
   19340:	8e c1       	rjmp	.+796    	; 0x1965e <lif_check_dir+0x342>
   19342:	9d 8b       	std	Y+21, r25	; 0x15
   19344:	8c 8b       	std	Y+20, r24	; 0x14
   19346:	7c 01       	movw	r14, r24
   19348:	2f e4       	ldi	r18, 0x4F	; 79
   1934a:	e2 0e       	add	r14, r18
   1934c:	f1 1c       	adc	r15, r1
   1934e:	c7 01       	movw	r24, r14
   19350:	f9 d9       	rcall	.-3086   	; 0x18744 <lif_checkname>
   19352:	89 2b       	or	r24, r25
   19354:	89 f4       	brne	.+34     	; 0x19378 <lif_check_dir+0x5c>
   19356:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1935a:	80 ff       	sbrs	r24, 0
   1935c:	0f c0       	rjmp	.+30     	; 0x1937c <lif_check_dir+0x60>
   1935e:	ed b7       	in	r30, 0x3d	; 61
   19360:	fe b7       	in	r31, 0x3e	; 62
   19362:	f5 82       	std	Z+5, r15	; 0x05
   19364:	e4 82       	std	Z+4, r14	; 0x04
   19366:	82 e5       	ldi	r24, 0x52	; 82
   19368:	9e e3       	ldi	r25, 0x3E	; 62
   1936a:	a0 e0       	ldi	r26, 0x00	; 0
   1936c:	81 83       	std	Z+1, r24	; 0x01
   1936e:	92 83       	std	Z+2, r25	; 0x02
   19370:	a3 83       	std	Z+3, r26	; 0x03
   19372:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   19376:	02 c0       	rjmp	.+4      	; 0x1937c <lif_check_dir+0x60>
   19378:	01 e0       	ldi	r16, 0x01	; 1
   1937a:	01 c0       	rjmp	.+2      	; 0x1937e <lif_check_dir+0x62>
   1937c:	00 e0       	ldi	r16, 0x00	; 0
   1937e:	10 e0       	ldi	r17, 0x00	; 0
   19380:	ec 89       	ldd	r30, Y+20	; 0x14
   19382:	fd 89       	ldd	r31, Y+21	; 0x15
   19384:	84 85       	ldd	r24, Z+12	; 0x0c
   19386:	95 85       	ldd	r25, Z+13	; 0x0d
   19388:	a6 85       	ldd	r26, Z+14	; 0x0e
   1938a:	b7 85       	ldd	r27, Z+15	; 0x0f
   1938c:	00 97       	sbiw	r24, 0x00	; 0
   1938e:	a1 05       	cpc	r26, r1
   19390:	b1 05       	cpc	r27, r1
   19392:	29 f1       	breq	.+74     	; 0x193de <lif_check_dir+0xc2>
   19394:	e4 5a       	subi	r30, 0xA4	; 164
   19396:	ff 4f       	sbci	r31, 0xFF	; 255
   19398:	40 81       	ld	r20, Z
   1939a:	51 81       	ldd	r21, Z+1	; 0x01
   1939c:	62 81       	ldd	r22, Z+2	; 0x02
   1939e:	73 81       	ldd	r23, Z+3	; 0x03
   193a0:	48 17       	cp	r20, r24
   193a2:	59 07       	cpc	r21, r25
   193a4:	6a 07       	cpc	r22, r26
   193a6:	7b 07       	cpc	r23, r27
   193a8:	d0 f4       	brcc	.+52     	; 0x193de <lif_check_dir+0xc2>
   193aa:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   193ae:	20 ff       	sbrs	r18, 0
   193b0:	14 c0       	rjmp	.+40     	; 0x193da <lif_check_dir+0xbe>
   193b2:	ed b7       	in	r30, 0x3d	; 61
   193b4:	fe b7       	in	r31, 0x3e	; 62
   193b6:	82 87       	std	Z+10, r24	; 0x0a
   193b8:	93 87       	std	Z+11, r25	; 0x0b
   193ba:	a4 87       	std	Z+12, r26	; 0x0c
   193bc:	b5 87       	std	Z+13, r27	; 0x0d
   193be:	46 83       	std	Z+6, r20	; 0x06
   193c0:	57 83       	std	Z+7, r21	; 0x07
   193c2:	60 87       	std	Z+8, r22	; 0x08
   193c4:	71 87       	std	Z+9, r23	; 0x09
   193c6:	f5 82       	std	Z+5, r15	; 0x05
   193c8:	e4 82       	std	Z+4, r14	; 0x04
   193ca:	8e e0       	ldi	r24, 0x0E	; 14
   193cc:	9e e3       	ldi	r25, 0x3E	; 62
   193ce:	a0 e0       	ldi	r26, 0x00	; 0
   193d0:	81 83       	std	Z+1, r24	; 0x01
   193d2:	92 83       	std	Z+2, r25	; 0x02
   193d4:	a3 83       	std	Z+3, r26	; 0x03
   193d6:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   193da:	00 e0       	ldi	r16, 0x00	; 0
   193dc:	10 e0       	ldi	r17, 0x00	; 0
   193de:	ec 89       	ldd	r30, Y+20	; 0x14
   193e0:	fd 89       	ldd	r31, Y+21	; 0x15
   193e2:	44 81       	ldd	r20, Z+4	; 0x04
   193e4:	55 81       	ldd	r21, Z+5	; 0x05
   193e6:	66 81       	ldd	r22, Z+6	; 0x06
   193e8:	77 81       	ldd	r23, Z+7	; 0x07
   193ea:	41 15       	cp	r20, r1
   193ec:	51 05       	cpc	r21, r1
   193ee:	61 05       	cpc	r22, r1
   193f0:	71 05       	cpc	r23, r1
   193f2:	89 f1       	breq	.+98     	; 0x19456 <lif_check_dir+0x13a>
   193f4:	e4 5a       	subi	r30, 0xA4	; 164
   193f6:	ff 4f       	sbci	r31, 0xFF	; 255
   193f8:	80 80       	ld	r8, Z
   193fa:	91 80       	ldd	r9, Z+1	; 0x01
   193fc:	a2 80       	ldd	r10, Z+2	; 0x02
   193fe:	b3 80       	ldd	r11, Z+3	; 0x03
   19400:	ec 89       	ldd	r30, Y+20	; 0x14
   19402:	fd 89       	ldd	r31, Y+21	; 0x15
   19404:	e0 5a       	subi	r30, 0xA0	; 160
   19406:	ff 4f       	sbci	r31, 0xFF	; 255
   19408:	80 81       	ld	r24, Z
   1940a:	91 81       	ldd	r25, Z+1	; 0x01
   1940c:	a2 81       	ldd	r26, Z+2	; 0x02
   1940e:	b3 81       	ldd	r27, Z+3	; 0x03
   19410:	88 0d       	add	r24, r8
   19412:	99 1d       	adc	r25, r9
   19414:	aa 1d       	adc	r26, r10
   19416:	bb 1d       	adc	r27, r11
   19418:	48 17       	cp	r20, r24
   1941a:	59 07       	cpc	r21, r25
   1941c:	6a 07       	cpc	r22, r26
   1941e:	7b 07       	cpc	r23, r27
   19420:	d0 f4       	brcc	.+52     	; 0x19456 <lif_check_dir+0x13a>
   19422:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   19426:	20 ff       	sbrs	r18, 0
   19428:	14 c0       	rjmp	.+40     	; 0x19452 <lif_check_dir+0x136>
   1942a:	ed b7       	in	r30, 0x3d	; 61
   1942c:	fe b7       	in	r31, 0x3e	; 62
   1942e:	42 87       	std	Z+10, r20	; 0x0a
   19430:	53 87       	std	Z+11, r21	; 0x0b
   19432:	64 87       	std	Z+12, r22	; 0x0c
   19434:	75 87       	std	Z+13, r23	; 0x0d
   19436:	86 83       	std	Z+6, r24	; 0x06
   19438:	97 83       	std	Z+7, r25	; 0x07
   1943a:	a0 87       	std	Z+8, r26	; 0x08
   1943c:	b1 87       	std	Z+9, r27	; 0x09
   1943e:	f5 82       	std	Z+5, r15	; 0x05
   19440:	e4 82       	std	Z+4, r14	; 0x04
   19442:	8d ec       	ldi	r24, 0xCD	; 205
   19444:	9d e3       	ldi	r25, 0x3D	; 61
   19446:	a0 e0       	ldi	r26, 0x00	; 0
   19448:	81 83       	std	Z+1, r24	; 0x01
   1944a:	92 83       	std	Z+2, r25	; 0x02
   1944c:	a3 83       	std	Z+3, r26	; 0x03
   1944e:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   19452:	00 e0       	ldi	r16, 0x00	; 0
   19454:	10 e0       	ldi	r17, 0x00	; 0
   19456:	ec 89       	ldd	r30, Y+20	; 0x14
   19458:	fd 89       	ldd	r31, Y+21	; 0x15
   1945a:	e6 59       	subi	r30, 0x96	; 150
   1945c:	ff 4f       	sbci	r31, 0xFF	; 255
   1945e:	80 81       	ld	r24, Z
   19460:	91 81       	ldd	r25, Z+1	; 0x01
   19462:	81 30       	cpi	r24, 0x01	; 1
   19464:	f0 e8       	ldi	r31, 0x80	; 128
   19466:	9f 07       	cpc	r25, r31
   19468:	a1 f0       	breq	.+40     	; 0x19492 <lif_check_dir+0x176>
   1946a:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   1946e:	20 ff       	sbrs	r18, 0
   19470:	0e c0       	rjmp	.+28     	; 0x1948e <lif_check_dir+0x172>
   19472:	ed b7       	in	r30, 0x3d	; 61
   19474:	fe b7       	in	r31, 0x3e	; 62
   19476:	97 83       	std	Z+7, r25	; 0x07
   19478:	86 83       	std	Z+6, r24	; 0x06
   1947a:	f5 82       	std	Z+5, r15	; 0x05
   1947c:	e4 82       	std	Z+4, r14	; 0x04
   1947e:	8f e9       	ldi	r24, 0x9F	; 159
   19480:	9d e3       	ldi	r25, 0x3D	; 61
   19482:	a0 e0       	ldi	r26, 0x00	; 0
   19484:	81 83       	std	Z+1, r24	; 0x01
   19486:	92 83       	std	Z+2, r25	; 0x02
   19488:	a3 83       	std	Z+3, r26	; 0x03
   1948a:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   1948e:	00 e0       	ldi	r16, 0x00	; 0
   19490:	10 e0       	ldi	r17, 0x00	; 0
   19492:	f6 01       	movw	r30, r12
   19494:	80 81       	ld	r24, Z
   19496:	91 81       	ldd	r25, Z+1	; 0x01
   19498:	8c 7f       	andi	r24, 0xFC	; 252
   1949a:	80 31       	cpi	r24, 0x10	; 16
   1949c:	90 4e       	sbci	r25, 0xE0	; 224
   1949e:	09 f0       	breq	.+2      	; 0x194a2 <lif_check_dir+0x186>
   194a0:	af c0       	rjmp	.+350    	; 0x19600 <lif_check_dir+0x2e4>
   194a2:	cc 88       	ldd	r12, Y+20	; 0x14
   194a4:	dd 88       	ldd	r13, Y+21	; 0x15
   194a6:	2c e6       	ldi	r18, 0x6C	; 108
   194a8:	c2 0e       	add	r12, r18
   194aa:	d1 1c       	adc	r13, r1
   194ac:	f6 01       	movw	r30, r12
   194ae:	80 81       	ld	r24, Z
   194b0:	91 81       	ldd	r25, Z+1	; 0x01
   194b2:	00 97       	sbiw	r24, 0x00	; 0
   194b4:	09 f4       	brne	.+2      	; 0x194b8 <lif_check_dir+0x19c>
   194b6:	a4 c0       	rjmp	.+328    	; 0x19600 <lif_check_dir+0x2e4>
   194b8:	4c 01       	movw	r8, r24
   194ba:	a1 2c       	mov	r10, r1
   194bc:	b1 2c       	mov	r11, r1
   194be:	77 27       	eor	r23, r23
   194c0:	6b 2d       	mov	r22, r11
   194c2:	5a 2d       	mov	r21, r10
   194c4:	49 2d       	mov	r20, r9
   194c6:	9c 01       	movw	r18, r24
   194c8:	33 27       	eor	r19, r19
   194ca:	3b 8b       	std	Y+19, r19	; 0x13
   194cc:	2a 8b       	std	Y+18, r18	; 0x12
   194ce:	db 01       	movw	r26, r22
   194d0:	ca 01       	movw	r24, r20
   194d2:	23 2b       	or	r18, r19
   194d4:	19 f0       	breq	.+6      	; 0x194dc <lif_check_dir+0x1c0>
   194d6:	01 96       	adiw	r24, 0x01	; 1
   194d8:	a1 1d       	adc	r26, r1
   194da:	b1 1d       	adc	r27, r1
   194dc:	2c 88       	ldd	r2, Y+20	; 0x14
   194de:	3d 88       	ldd	r3, Y+21	; 0x15
   194e0:	30 e6       	ldi	r19, 0x60	; 96
   194e2:	23 0e       	add	r2, r19
   194e4:	31 1c       	adc	r3, r1
   194e6:	f1 01       	movw	r30, r2
   194e8:	40 80       	ld	r4, Z
   194ea:	51 80       	ldd	r5, Z+1	; 0x01
   194ec:	62 80       	ldd	r6, Z+2	; 0x02
   194ee:	73 80       	ldd	r7, Z+3	; 0x03
   194f0:	48 16       	cp	r4, r24
   194f2:	59 06       	cpc	r5, r25
   194f4:	6a 06       	cpc	r6, r26
   194f6:	7b 06       	cpc	r7, r27
   194f8:	30 f5       	brcc	.+76     	; 0x19546 <lif_check_dir+0x22a>
   194fa:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   194fe:	20 ff       	sbrs	r18, 0
   19500:	20 c0       	rjmp	.+64     	; 0x19542 <lif_check_dir+0x226>
   19502:	2a 89       	ldd	r18, Y+18	; 0x12
   19504:	3b 89       	ldd	r19, Y+19	; 0x13
   19506:	23 2b       	or	r18, r19
   19508:	21 f0       	breq	.+8      	; 0x19512 <lif_check_dir+0x1f6>
   1950a:	4f 5f       	subi	r20, 0xFF	; 255
   1950c:	5f 4f       	sbci	r21, 0xFF	; 255
   1950e:	6f 4f       	sbci	r22, 0xFF	; 255
   19510:	7f 4f       	sbci	r23, 0xFF	; 255
   19512:	ed b7       	in	r30, 0x3d	; 61
   19514:	fe b7       	in	r31, 0x3e	; 62
   19516:	46 86       	std	Z+14, r4	; 0x0e
   19518:	57 86       	std	Z+15, r5	; 0x0f
   1951a:	60 8a       	std	Z+16, r6	; 0x10
   1951c:	71 8a       	std	Z+17, r7	; 0x11
   1951e:	42 87       	std	Z+10, r20	; 0x0a
   19520:	53 87       	std	Z+11, r21	; 0x0b
   19522:	64 87       	std	Z+12, r22	; 0x0c
   19524:	75 87       	std	Z+13, r23	; 0x0d
   19526:	86 82       	std	Z+6, r8	; 0x06
   19528:	97 82       	std	Z+7, r9	; 0x07
   1952a:	a0 86       	std	Z+8, r10	; 0x08
   1952c:	b1 86       	std	Z+9, r11	; 0x09
   1952e:	f5 82       	std	Z+5, r15	; 0x05
   19530:	e4 82       	std	Z+4, r14	; 0x04
   19532:	84 e5       	ldi	r24, 0x54	; 84
   19534:	9d e3       	ldi	r25, 0x3D	; 61
   19536:	a0 e0       	ldi	r26, 0x00	; 0
   19538:	81 83       	std	Z+1, r24	; 0x01
   1953a:	92 83       	std	Z+2, r25	; 0x02
   1953c:	a3 83       	std	Z+3, r26	; 0x03
   1953e:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   19542:	00 e0       	ldi	r16, 0x00	; 0
   19544:	10 e0       	ldi	r17, 0x00	; 0
   19546:	f6 01       	movw	r30, r12
   19548:	20 81       	ld	r18, Z
   1954a:	31 81       	ldd	r19, Z+1	; 0x01
   1954c:	a9 01       	movw	r20, r18
   1954e:	60 e0       	ldi	r22, 0x00	; 0
   19550:	70 e0       	ldi	r23, 0x00	; 0
   19552:	bb 27       	eor	r27, r27
   19554:	a7 2f       	mov	r26, r23
   19556:	96 2f       	mov	r25, r22
   19558:	85 2f       	mov	r24, r21
   1955a:	f9 01       	movw	r30, r18
   1955c:	ff 27       	eor	r31, r31
   1955e:	fb 8b       	std	Y+19, r31	; 0x13
   19560:	ea 8b       	std	Y+18, r30	; 0x12
   19562:	2c 01       	movw	r4, r24
   19564:	3d 01       	movw	r6, r26
   19566:	ef 2b       	or	r30, r31
   19568:	29 f0       	breq	.+10     	; 0x19574 <lif_check_dir+0x258>
   1956a:	ff ef       	ldi	r31, 0xFF	; 255
   1956c:	4f 1a       	sub	r4, r31
   1956e:	5f 0a       	sbc	r5, r31
   19570:	6f 0a       	sbc	r6, r31
   19572:	7f 0a       	sbc	r7, r31
   19574:	f1 01       	movw	r30, r2
   19576:	80 80       	ld	r8, Z
   19578:	91 80       	ldd	r9, Z+1	; 0x01
   1957a:	a2 80       	ldd	r10, Z+2	; 0x02
   1957c:	b3 80       	ldd	r11, Z+3	; 0x03
   1957e:	48 14       	cp	r4, r8
   19580:	59 04       	cpc	r5, r9
   19582:	6a 04       	cpc	r6, r10
   19584:	7b 04       	cpc	r7, r11
   19586:	28 f5       	brcc	.+74     	; 0x195d2 <lif_check_dir+0x2b6>
   19588:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   1958c:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   19590:	32 ff       	sbrs	r19, 2
   19592:	1f c0       	rjmp	.+62     	; 0x195d2 <lif_check_dir+0x2b6>
   19594:	2a 89       	ldd	r18, Y+18	; 0x12
   19596:	3b 89       	ldd	r19, Y+19	; 0x13
   19598:	23 2b       	or	r18, r19
   1959a:	19 f0       	breq	.+6      	; 0x195a2 <lif_check_dir+0x286>
   1959c:	01 96       	adiw	r24, 0x01	; 1
   1959e:	a1 1d       	adc	r26, r1
   195a0:	b1 1d       	adc	r27, r1
   195a2:	ed b7       	in	r30, 0x3d	; 61
   195a4:	fe b7       	in	r31, 0x3e	; 62
   195a6:	86 86       	std	Z+14, r8	; 0x0e
   195a8:	97 86       	std	Z+15, r9	; 0x0f
   195aa:	a0 8a       	std	Z+16, r10	; 0x10
   195ac:	b1 8a       	std	Z+17, r11	; 0x11
   195ae:	82 87       	std	Z+10, r24	; 0x0a
   195b0:	93 87       	std	Z+11, r25	; 0x0b
   195b2:	a4 87       	std	Z+12, r26	; 0x0c
   195b4:	b5 87       	std	Z+13, r27	; 0x0d
   195b6:	46 83       	std	Z+6, r20	; 0x06
   195b8:	57 83       	std	Z+7, r21	; 0x07
   195ba:	60 87       	std	Z+8, r22	; 0x08
   195bc:	71 87       	std	Z+9, r23	; 0x09
   195be:	f5 82       	std	Z+5, r15	; 0x05
   195c0:	e4 82       	std	Z+4, r14	; 0x04
   195c2:	89 e0       	ldi	r24, 0x09	; 9
   195c4:	9d e3       	ldi	r25, 0x3D	; 61
   195c6:	a0 e0       	ldi	r26, 0x00	; 0
   195c8:	81 83       	std	Z+1, r24	; 0x01
   195ca:	92 83       	std	Z+2, r25	; 0x02
   195cc:	a3 83       	std	Z+3, r26	; 0x03
   195ce:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   195d2:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   195d6:	80 ff       	sbrs	r24, 0
   195d8:	13 c0       	rjmp	.+38     	; 0x19600 <lif_check_dir+0x2e4>
   195da:	f6 01       	movw	r30, r12
   195dc:	80 81       	ld	r24, Z
   195de:	91 81       	ldd	r25, Z+1	; 0x01
   195e0:	89 2b       	or	r24, r25
   195e2:	71 f4       	brne	.+28     	; 0x19600 <lif_check_dir+0x2e4>
   195e4:	ed b7       	in	r30, 0x3d	; 61
   195e6:	fe b7       	in	r31, 0x3e	; 62
   195e8:	f5 82       	std	Z+5, r15	; 0x05
   195ea:	e4 82       	std	Z+4, r14	; 0x04
   195ec:	8e ed       	ldi	r24, 0xDE	; 222
   195ee:	9c e3       	ldi	r25, 0x3C	; 60
   195f0:	a0 e0       	ldi	r26, 0x00	; 0
   195f2:	81 83       	std	Z+1, r24	; 0x01
   195f4:	92 83       	std	Z+2, r25	; 0x02
   195f6:	a3 83       	std	Z+3, r26	; 0x03
   195f8:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   195fc:	00 e0       	ldi	r16, 0x00	; 0
   195fe:	10 e0       	ldi	r17, 0x00	; 0
   19600:	ec 89       	ldd	r30, Y+20	; 0x14
   19602:	fd 89       	ldd	r31, Y+21	; 0x15
   19604:	e2 59       	subi	r30, 0x92	; 146
   19606:	ff 4f       	sbci	r31, 0xFF	; 255
   19608:	20 81       	ld	r18, Z
   1960a:	31 81       	ldd	r19, Z+1	; 0x01
   1960c:	21 15       	cp	r18, r1
   1960e:	f1 e0       	ldi	r31, 0x01	; 1
   19610:	3f 07       	cpc	r19, r31
   19612:	41 f1       	breq	.+80     	; 0x19664 <lif_check_dir+0x348>
   19614:	40 91 c3 01 	lds	r20, 0x01C3	; 0x8001c3 <debuglevel>
   19618:	50 91 c4 01 	lds	r21, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1961c:	ca 01       	movw	r24, r20
   1961e:	81 70       	andi	r24, 0x01	; 1
   19620:	99 27       	eor	r25, r25
   19622:	40 ff       	sbrs	r20, 0
   19624:	20 c0       	rjmp	.+64     	; 0x19666 <lif_check_dir+0x34a>
   19626:	c9 01       	movw	r24, r18
   19628:	a0 e0       	ldi	r26, 0x00	; 0
   1962a:	b0 e0       	ldi	r27, 0x00	; 0
   1962c:	ed b7       	in	r30, 0x3d	; 61
   1962e:	fe b7       	in	r31, 0x3e	; 62
   19630:	86 83       	std	Z+6, r24	; 0x06
   19632:	97 83       	std	Z+7, r25	; 0x07
   19634:	a0 87       	std	Z+8, r26	; 0x08
   19636:	b1 87       	std	Z+9, r27	; 0x09
   19638:	ec 89       	ldd	r30, Y+20	; 0x14
   1963a:	fd 89       	ldd	r31, Y+21	; 0x15
   1963c:	80 81       	ld	r24, Z
   1963e:	91 81       	ldd	r25, Z+1	; 0x01
   19640:	ed b7       	in	r30, 0x3d	; 61
   19642:	fe b7       	in	r31, 0x3e	; 62
   19644:	95 83       	std	Z+5, r25	; 0x05
   19646:	84 83       	std	Z+4, r24	; 0x04
   19648:	82 eb       	ldi	r24, 0xB2	; 178
   1964a:	9c e3       	ldi	r25, 0x3C	; 60
   1964c:	a0 e0       	ldi	r26, 0x00	; 0
   1964e:	81 83       	std	Z+1, r24	; 0x01
   19650:	92 83       	std	Z+2, r25	; 0x02
   19652:	a3 83       	std	Z+3, r26	; 0x03
   19654:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   19658:	80 e0       	ldi	r24, 0x00	; 0
   1965a:	90 e0       	ldi	r25, 0x00	; 0
   1965c:	04 c0       	rjmp	.+8      	; 0x19666 <lif_check_dir+0x34a>
   1965e:	81 e0       	ldi	r24, 0x01	; 1
   19660:	90 e0       	ldi	r25, 0x00	; 0
   19662:	01 c0       	rjmp	.+2      	; 0x19666 <lif_check_dir+0x34a>
   19664:	c8 01       	movw	r24, r16
   19666:	65 96       	adiw	r28, 0x15	; 21
   19668:	e2 e1       	ldi	r30, 0x12	; 18
   1966a:	0c 94 35 e5 	jmp	0x1ca6a	; 0x1ca6a <__epilogue_restores__>

0001966e <lif_close_volume>:
   1966e:	cf 93       	push	r28
   19670:	df 93       	push	r29
   19672:	00 97       	sbiw	r24, 0x00	; 0
   19674:	f9 f0       	breq	.+62     	; 0x196b4 <lif_close_volume+0x46>
   19676:	ec 01       	movw	r28, r24
   19678:	8a 81       	ldd	r24, Y+2	; 0x02
   1967a:	9b 81       	ldd	r25, Y+3	; 0x03
   1967c:	00 97       	sbiw	r24, 0x00	; 0
   1967e:	79 f0       	breq	.+30     	; 0x1969e <lif_close_volume+0x30>
   19680:	22 e0       	ldi	r18, 0x02	; 2
   19682:	30 e0       	ldi	r19, 0x00	; 0
   19684:	40 e0       	ldi	r20, 0x00	; 0
   19686:	50 e0       	ldi	r21, 0x00	; 0
   19688:	ba 01       	movw	r22, r20
   1968a:	0e 94 86 7c 	call	0xf90c	; 0xf90c <fseek>
   1968e:	8a 81       	ldd	r24, Y+2	; 0x02
   19690:	9b 81       	ldd	r25, Y+3	; 0x03
   19692:	0e 94 6e 7e 	call	0xfcdc	; 0xfcdc <fclose>
   19696:	1b 82       	std	Y+3, r1	; 0x03
   19698:	1a 82       	std	Y+2, r1	; 0x02
   1969a:	0e 94 69 7d 	call	0xfad2	; 0xfad2 <sync>
   1969e:	88 81       	ld	r24, Y
   196a0:	99 81       	ldd	r25, Y+1	; 0x01
   196a2:	00 97       	sbiw	r24, 0x00	; 0
   196a4:	11 f0       	breq	.+4      	; 0x196aa <lif_close_volume+0x3c>
   196a6:	0e 94 d3 c1 	call	0x183a6	; 0x183a6 <lif_free>
   196aa:	ce 01       	movw	r24, r28
   196ac:	8f db       	rcall	.-2274   	; 0x18dcc <lif_vol_clear>
   196ae:	ce 01       	movw	r24, r28
   196b0:	0e 94 d3 c1 	call	0x183a6	; 0x183a6 <lif_free>
   196b4:	df 91       	pop	r29
   196b6:	cf 91       	pop	r28
   196b8:	08 95       	ret

000196ba <lif_checkdirindex>:
   196ba:	cf 92       	push	r12
   196bc:	df 92       	push	r13
   196be:	ef 92       	push	r14
   196c0:	ff 92       	push	r15
   196c2:	cf 93       	push	r28
   196c4:	df 93       	push	r29
   196c6:	ad b7       	in	r26, 0x3d	; 61
   196c8:	be b7       	in	r27, 0x3e	; 62
   196ca:	17 97       	sbiw	r26, 0x07	; 7
   196cc:	0f b6       	in	r0, 0x3f	; 63
   196ce:	f8 94       	cli
   196d0:	be bf       	out	0x3e, r27	; 62
   196d2:	0f be       	out	0x3f, r0	; 63
   196d4:	ad bf       	out	0x3d, r26	; 61
   196d6:	9b 01       	movw	r18, r22
   196d8:	77 fd       	sbrc	r23, 7
   196da:	25 c0       	rjmp	.+74     	; 0x19726 <lif_checkdirindex+0x6c>
   196dc:	ab 01       	movw	r20, r22
   196de:	77 0f       	add	r23, r23
   196e0:	66 0b       	sbc	r22, r22
   196e2:	77 0b       	sbc	r23, r23
   196e4:	e5 e0       	ldi	r30, 0x05	; 5
   196e6:	44 0f       	add	r20, r20
   196e8:	55 1f       	adc	r21, r21
   196ea:	66 1f       	adc	r22, r22
   196ec:	77 1f       	adc	r23, r23
   196ee:	ea 95       	dec	r30
   196f0:	d1 f7       	brne	.-12     	; 0x196e6 <lif_checkdirindex+0x2c>
   196f2:	c5 2e       	mov	r12, r21
   196f4:	d6 2e       	mov	r13, r22
   196f6:	e7 2e       	mov	r14, r23
   196f8:	ff 24       	eor	r15, r15
   196fa:	55 27       	eor	r21, r21
   196fc:	66 27       	eor	r22, r22
   196fe:	77 27       	eor	r23, r23
   19700:	45 2b       	or	r20, r21
   19702:	46 2b       	or	r20, r22
   19704:	47 2b       	or	r20, r23
   19706:	29 f0       	breq	.+10     	; 0x19712 <lif_checkdirindex+0x58>
   19708:	4f ef       	ldi	r20, 0xFF	; 255
   1970a:	c4 1a       	sub	r12, r20
   1970c:	d4 0a       	sbc	r13, r20
   1970e:	e4 0a       	sbc	r14, r20
   19710:	f4 0a       	sbc	r15, r20
   19712:	fc 01       	movw	r30, r24
   19714:	45 a9       	ldd	r20, Z+53	; 0x35
   19716:	56 a9       	ldd	r21, Z+54	; 0x36
   19718:	67 a9       	ldd	r22, Z+55	; 0x37
   1971a:	70 ad       	ldd	r23, Z+56	; 0x38
   1971c:	4c 15       	cp	r20, r12
   1971e:	5d 05       	cpc	r21, r13
   19720:	6e 05       	cpc	r22, r14
   19722:	7f 05       	cpc	r23, r15
   19724:	08 f5       	brcc	.+66     	; 0x19768 <lif_checkdirindex+0xae>
   19726:	ec 01       	movw	r28, r24
   19728:	ed b7       	in	r30, 0x3d	; 61
   1972a:	fe b7       	in	r31, 0x3e	; 62
   1972c:	37 83       	std	Z+7, r19	; 0x07
   1972e:	26 83       	std	Z+6, r18	; 0x06
   19730:	88 81       	ld	r24, Y
   19732:	99 81       	ldd	r25, Y+1	; 0x01
   19734:	95 83       	std	Z+5, r25	; 0x05
   19736:	84 83       	std	Z+4, r24	; 0x04
   19738:	8f ee       	ldi	r24, 0xEF	; 239
   1973a:	9b e3       	ldi	r25, 0x3B	; 59
   1973c:	a0 e0       	ldi	r26, 0x00	; 0
   1973e:	81 83       	std	Z+1, r24	; 0x01
   19740:	92 83       	std	Z+2, r25	; 0x02
   19742:	a3 83       	std	Z+3, r26	; 0x03
   19744:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   19748:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   1974c:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   19750:	c9 01       	movw	r24, r18
   19752:	88 27       	eor	r24, r24
   19754:	94 70       	andi	r25, 0x04	; 4
   19756:	32 ff       	sbrs	r19, 2
   19758:	09 c0       	rjmp	.+18     	; 0x1976c <lif_checkdirindex+0xb2>
   1975a:	62 e4       	ldi	r22, 0x42	; 66
   1975c:	75 e1       	ldi	r23, 0x15	; 21
   1975e:	ce 01       	movw	r24, r28
   19760:	3c db       	rcall	.-2440   	; 0x18dda <lif_dump_vol>
   19762:	80 e0       	ldi	r24, 0x00	; 0
   19764:	90 e0       	ldi	r25, 0x00	; 0
   19766:	02 c0       	rjmp	.+4      	; 0x1976c <lif_checkdirindex+0xb2>
   19768:	81 e0       	ldi	r24, 0x01	; 1
   1976a:	90 e0       	ldi	r25, 0x00	; 0
   1976c:	ad b7       	in	r26, 0x3d	; 61
   1976e:	be b7       	in	r27, 0x3e	; 62
   19770:	17 96       	adiw	r26, 0x07	; 7
   19772:	0f b6       	in	r0, 0x3f	; 63
   19774:	f8 94       	cli
   19776:	be bf       	out	0x3e, r27	; 62
   19778:	0f be       	out	0x3f, r0	; 63
   1977a:	ad bf       	out	0x3d, r26	; 61
   1977c:	df 91       	pop	r29
   1977e:	cf 91       	pop	r28
   19780:	ff 90       	pop	r15
   19782:	ef 90       	pop	r14
   19784:	df 90       	pop	r13
   19786:	cf 90       	pop	r12
   19788:	08 95       	ret

0001978a <lif_readdirindex>:
   1978a:	a5 e2       	ldi	r26, 0x25	; 37
   1978c:	b0 e0       	ldi	r27, 0x00	; 0
   1978e:	eb ec       	ldi	r30, 0xCB	; 203
   19790:	fb ec       	ldi	r31, 0xCB	; 203
   19792:	0c 94 23 e5 	jmp	0x1ca46	; 0x1ca46 <__prologue_saves__+0x14>
   19796:	7c 01       	movw	r14, r24
   19798:	6b 01       	movw	r12, r22
   1979a:	8f df       	rcall	.-226    	; 0x196ba <lif_checkdirindex>
   1979c:	89 2b       	or	r24, r25
   1979e:	19 f4       	brne	.+6      	; 0x197a6 <lif_readdirindex+0x1c>
   197a0:	00 e0       	ldi	r16, 0x00	; 0
   197a2:	10 e0       	ldi	r17, 0x00	; 0
   197a4:	54 c0       	rjmp	.+168    	; 0x1984e <lif_readdirindex+0xc4>
   197a6:	f7 01       	movw	r30, r14
   197a8:	85 a5       	ldd	r24, Z+45	; 0x2d
   197aa:	96 a5       	ldd	r25, Z+46	; 0x2e
   197ac:	a7 a5       	ldd	r26, Z+47	; 0x2f
   197ae:	b0 a9       	ldd	r27, Z+48	; 0x30
   197b0:	44 27       	eor	r20, r20
   197b2:	58 2f       	mov	r21, r24
   197b4:	69 2f       	mov	r22, r25
   197b6:	7a 2f       	mov	r23, r26
   197b8:	c6 01       	movw	r24, r12
   197ba:	0d 2c       	mov	r0, r13
   197bc:	00 0c       	add	r0, r0
   197be:	aa 0b       	sbc	r26, r26
   197c0:	bb 0b       	sbc	r27, r27
   197c2:	35 e0       	ldi	r19, 0x05	; 5
   197c4:	88 0f       	add	r24, r24
   197c6:	99 1f       	adc	r25, r25
   197c8:	aa 1f       	adc	r26, r26
   197ca:	bb 1f       	adc	r27, r27
   197cc:	3a 95       	dec	r19
   197ce:	d1 f7       	brne	.-12     	; 0x197c4 <lif_readdirindex+0x3a>
   197d0:	9a 01       	movw	r18, r20
   197d2:	ab 01       	movw	r20, r22
   197d4:	28 0f       	add	r18, r24
   197d6:	39 1f       	adc	r19, r25
   197d8:	4a 1f       	adc	r20, r26
   197da:	5b 1f       	adc	r21, r27
   197dc:	00 e2       	ldi	r16, 0x20	; 32
   197de:	10 e0       	ldi	r17, 0x00	; 0
   197e0:	be 01       	movw	r22, r28
   197e2:	6a 5f       	subi	r22, 0xFA	; 250
   197e4:	7f 4f       	sbci	r23, 0xFF	; 255
   197e6:	c7 01       	movw	r24, r14
   197e8:	0e 94 8b c2 	call	0x18516	; 0x18516 <lif_read>
   197ec:	60 32       	cpi	r22, 0x20	; 32
   197ee:	71 05       	cpc	r23, r1
   197f0:	81 05       	cpc	r24, r1
   197f2:	91 05       	cpc	r25, r1
   197f4:	a8 f2       	brcs	.-86     	; 0x197a0 <lif_readdirindex+0x16>
   197f6:	b7 01       	movw	r22, r14
   197f8:	ce 01       	movw	r24, r28
   197fa:	06 96       	adiw	r24, 0x06	; 6
   197fc:	91 d9       	rcall	.-3294   	; 0x18b20 <lif_str2dir>
   197fe:	f7 01       	movw	r30, r14
   19800:	e6 5a       	subi	r30, 0xA6	; 166
   19802:	ff 4f       	sbci	r31, 0xFF	; 255
   19804:	80 81       	ld	r24, Z
   19806:	91 81       	ldd	r25, Z+1	; 0x01
   19808:	01 96       	adiw	r24, 0x01	; 1
   1980a:	19 f4       	brne	.+6      	; 0x19812 <lif_readdirindex+0x88>
   1980c:	f7 01       	movw	r30, r14
   1980e:	d3 a2       	std	Z+35, r13	; 0x23
   19810:	c2 a2       	std	Z+34, r12	; 0x22
   19812:	c7 01       	movw	r24, r14
   19814:	83 dd       	rcall	.-1274   	; 0x1931c <lif_check_dir>
   19816:	8c 01       	movw	r16, r24
   19818:	89 2b       	or	r24, r25
   1981a:	b9 f4       	brne	.+46     	; 0x1984a <lif_readdirindex+0xc0>
   1981c:	ed b7       	in	r30, 0x3d	; 61
   1981e:	fe b7       	in	r31, 0x3e	; 62
   19820:	d5 82       	std	Z+5, r13	; 0x05
   19822:	c4 82       	std	Z+4, r12	; 0x04
   19824:	8f ec       	ldi	r24, 0xCF	; 207
   19826:	9b e3       	ldi	r25, 0x3B	; 59
   19828:	a0 e0       	ldi	r26, 0x00	; 0
   1982a:	81 83       	std	Z+1, r24	; 0x01
   1982c:	92 83       	std	Z+2, r25	; 0x02
   1982e:	a3 83       	std	Z+3, r26	; 0x03
   19830:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   19834:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   19838:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1983c:	92 ff       	sbrs	r25, 2
   1983e:	b0 cf       	rjmp	.-160    	; 0x197a0 <lif_readdirindex+0x16>
   19840:	63 e5       	ldi	r22, 0x53	; 83
   19842:	75 e1       	ldi	r23, 0x15	; 21
   19844:	c7 01       	movw	r24, r14
   19846:	c9 da       	rcall	.-2670   	; 0x18dda <lif_dump_vol>
   19848:	02 c0       	rjmp	.+4      	; 0x1984e <lif_readdirindex+0xc4>
   1984a:	01 e0       	ldi	r16, 0x01	; 1
   1984c:	10 e0       	ldi	r17, 0x00	; 0
   1984e:	c8 01       	movw	r24, r16
   19850:	a5 96       	adiw	r28, 0x25	; 37
   19852:	e8 e0       	ldi	r30, 0x08	; 8
   19854:	0c 94 3f e5 	jmp	0x1ca7e	; 0x1ca7e <__epilogue_restores__+0x14>

00019858 <lif_writedirindex>:
   19858:	a0 e2       	ldi	r26, 0x20	; 32
   1985a:	b0 e0       	ldi	r27, 0x00	; 0
   1985c:	e2 e3       	ldi	r30, 0x32	; 50
   1985e:	fc ec       	ldi	r31, 0xCC	; 204
   19860:	0c 94 21 e5 	jmp	0x1ca42	; 0x1ca42 <__prologue_saves__+0x10>
   19864:	5c 01       	movw	r10, r24
   19866:	6b 01       	movw	r12, r22
   19868:	59 dd       	rcall	.-1358   	; 0x1931c <lif_check_dir>
   1986a:	7c 01       	movw	r14, r24
   1986c:	89 2b       	or	r24, r25
   1986e:	71 f4       	brne	.+28     	; 0x1988c <lif_writedirindex+0x34>
   19870:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   19874:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   19878:	92 fd       	sbrc	r25, 2
   1987a:	03 c0       	rjmp	.+6      	; 0x19882 <lif_writedirindex+0x2a>
   1987c:	e1 2c       	mov	r14, r1
   1987e:	f1 2c       	mov	r15, r1
   19880:	42 c0       	rjmp	.+132    	; 0x19906 <lif_writedirindex+0xae>
   19882:	64 e6       	ldi	r22, 0x64	; 100
   19884:	75 e1       	ldi	r23, 0x15	; 21
   19886:	c5 01       	movw	r24, r10
   19888:	a8 da       	rcall	.-2736   	; 0x18dda <lif_dump_vol>
   1988a:	3d c0       	rjmp	.+122    	; 0x19906 <lif_writedirindex+0xae>
   1988c:	b6 01       	movw	r22, r12
   1988e:	c5 01       	movw	r24, r10
   19890:	14 df       	rcall	.-472    	; 0x196ba <lif_checkdirindex>
   19892:	89 2b       	or	r24, r25
   19894:	99 f3       	breq	.-26     	; 0x1987c <lif_writedirindex+0x24>
   19896:	f5 01       	movw	r30, r10
   19898:	e6 5a       	subi	r30, 0xA6	; 166
   1989a:	ff 4f       	sbci	r31, 0xFF	; 255
   1989c:	80 81       	ld	r24, Z
   1989e:	91 81       	ldd	r25, Z+1	; 0x01
   198a0:	01 96       	adiw	r24, 0x01	; 1
   198a2:	19 f4       	brne	.+6      	; 0x198aa <lif_writedirindex+0x52>
   198a4:	f5 01       	movw	r30, r10
   198a6:	d3 a2       	std	Z+35, r13	; 0x23
   198a8:	c2 a2       	std	Z+34, r12	; 0x22
   198aa:	f5 01       	movw	r30, r10
   198ac:	85 a5       	ldd	r24, Z+45	; 0x2d
   198ae:	96 a5       	ldd	r25, Z+46	; 0x2e
   198b0:	a7 a5       	ldd	r26, Z+47	; 0x2f
   198b2:	b0 a9       	ldd	r27, Z+48	; 0x30
   198b4:	ba 2f       	mov	r27, r26
   198b6:	a9 2f       	mov	r26, r25
   198b8:	98 2f       	mov	r25, r24
   198ba:	88 27       	eor	r24, r24
   198bc:	0d 2c       	mov	r0, r13
   198be:	00 0c       	add	r0, r0
   198c0:	ee 08       	sbc	r14, r14
   198c2:	ff 08       	sbc	r15, r15
   198c4:	35 e0       	ldi	r19, 0x05	; 5
   198c6:	cc 0c       	add	r12, r12
   198c8:	dd 1c       	adc	r13, r13
   198ca:	ee 1c       	adc	r14, r14
   198cc:	ff 1c       	adc	r15, r15
   198ce:	3a 95       	dec	r19
   198d0:	d1 f7       	brne	.-12     	; 0x198c6 <lif_writedirindex+0x6e>
   198d2:	c8 0e       	add	r12, r24
   198d4:	d9 1e       	adc	r13, r25
   198d6:	ea 1e       	adc	r14, r26
   198d8:	fb 1e       	adc	r15, r27
   198da:	be 01       	movw	r22, r28
   198dc:	6f 5f       	subi	r22, 0xFF	; 255
   198de:	7f 4f       	sbci	r23, 0xFF	; 255
   198e0:	c5 01       	movw	r24, r10
   198e2:	b3 d8       	rcall	.-3738   	; 0x18a4a <lif_dir2str>
   198e4:	00 e2       	ldi	r16, 0x20	; 32
   198e6:	10 e0       	ldi	r17, 0x00	; 0
   198e8:	a7 01       	movw	r20, r14
   198ea:	96 01       	movw	r18, r12
   198ec:	be 01       	movw	r22, r28
   198ee:	6f 5f       	subi	r22, 0xFF	; 255
   198f0:	7f 4f       	sbci	r23, 0xFF	; 255
   198f2:	c5 01       	movw	r24, r10
   198f4:	0e 94 dc c2 	call	0x185b8	; 0x185b8 <lif_write>
   198f8:	31 e0       	ldi	r19, 0x01	; 1
   198fa:	20 e0       	ldi	r18, 0x00	; 0
   198fc:	80 97       	sbiw	r24, 0x20	; 32
   198fe:	0c f4       	brge	.+2      	; 0x19902 <lif_writedirindex+0xaa>
   19900:	30 e0       	ldi	r19, 0x00	; 0
   19902:	e3 2e       	mov	r14, r19
   19904:	f2 2e       	mov	r15, r18
   19906:	c7 01       	movw	r24, r14
   19908:	a0 96       	adiw	r28, 0x20	; 32
   1990a:	ea e0       	ldi	r30, 0x0A	; 10
   1990c:	0c 94 3d e5 	jmp	0x1ca7a	; 0x1ca7a <__epilogue_restores__+0x10>

00019910 <lif_writedirEOF>:
   19910:	0f 93       	push	r16
   19912:	1f 93       	push	r17
   19914:	cf 93       	push	r28
   19916:	df 93       	push	r29
   19918:	ec 01       	movw	r28, r24
   1991a:	8b 01       	movw	r16, r22
   1991c:	4f da       	rcall	.-2914   	; 0x18dbc <lif_dir_clear>
   1991e:	fe 01       	movw	r30, r28
   19920:	e6 5a       	subi	r30, 0xA6	; 166
   19922:	ff 4f       	sbci	r31, 0xFF	; 255
   19924:	8f ef       	ldi	r24, 0xFF	; 255
   19926:	9f ef       	ldi	r25, 0xFF	; 255
   19928:	91 83       	std	Z+1, r25	; 0x01
   1992a:	80 83       	st	Z, r24
   1992c:	1b a3       	std	Y+35, r17	; 0x23
   1992e:	0a a3       	std	Y+34, r16	; 0x22
   19930:	b8 01       	movw	r22, r16
   19932:	ce 01       	movw	r24, r28
   19934:	91 df       	rcall	.-222    	; 0x19858 <lif_writedirindex>
   19936:	df 91       	pop	r29
   19938:	cf 91       	pop	r28
   1993a:	1f 91       	pop	r17
   1993c:	0f 91       	pop	r16
   1993e:	08 95       	ret

00019940 <lif_updatefree>:
   19940:	2f 92       	push	r2
   19942:	3f 92       	push	r3
   19944:	4f 92       	push	r4
   19946:	5f 92       	push	r5
   19948:	6f 92       	push	r6
   1994a:	7f 92       	push	r7
   1994c:	8f 92       	push	r8
   1994e:	af 92       	push	r10
   19950:	bf 92       	push	r11
   19952:	cf 92       	push	r12
   19954:	df 92       	push	r13
   19956:	ef 92       	push	r14
   19958:	ff 92       	push	r15
   1995a:	0f 93       	push	r16
   1995c:	1f 93       	push	r17
   1995e:	cf 93       	push	r28
   19960:	df 93       	push	r29
   19962:	cd b7       	in	r28, 0x3d	; 61
   19964:	de b7       	in	r29, 0x3e	; 62
   19966:	2f 97       	sbiw	r28, 0x0f	; 15
   19968:	0f b6       	in	r0, 0x3f	; 63
   1996a:	f8 94       	cli
   1996c:	de bf       	out	0x3e, r29	; 62
   1996e:	0f be       	out	0x3f, r0	; 63
   19970:	cd bf       	out	0x3d, r28	; 61
   19972:	9f 87       	std	Y+15, r25	; 0x0f
   19974:	8e 87       	std	Y+14, r24	; 0x0e
   19976:	fc 01       	movw	r30, r24
   19978:	24 84       	ldd	r2, Z+12	; 0x0c
   1997a:	35 84       	ldd	r3, Z+13	; 0x0d
   1997c:	46 84       	ldd	r4, Z+14	; 0x0e
   1997e:	57 84       	ldd	r5, Z+15	; 0x0f
   19980:	80 89       	ldd	r24, Z+16	; 0x10
   19982:	91 89       	ldd	r25, Z+17	; 0x11
   19984:	a2 89       	ldd	r26, Z+18	; 0x12
   19986:	b3 89       	ldd	r27, Z+19	; 0x13
   19988:	80 8f       	std	Z+24, r24	; 0x18
   1998a:	91 8f       	std	Z+25, r25	; 0x19
   1998c:	a2 8f       	std	Z+26, r26	; 0x1a
   1998e:	b3 8f       	std	Z+27, r27	; 0x1b
   19990:	14 8a       	std	Z+20, r1	; 0x14
   19992:	15 8a       	std	Z+21, r1	; 0x15
   19994:	16 8a       	std	Z+22, r1	; 0x16
   19996:	17 8a       	std	Z+23, r1	; 0x17
   19998:	17 8e       	std	Z+31, r1	; 0x1f
   1999a:	16 8e       	std	Z+30, r1	; 0x1e
   1999c:	15 8e       	std	Z+29, r1	; 0x1d
   1999e:	14 8e       	std	Z+28, r1	; 0x1c
   199a0:	11 a2       	std	Z+33, r1	; 0x21
   199a2:	10 a2       	std	Z+32, r1	; 0x20
   199a4:	13 a2       	std	Z+35, r1	; 0x23
   199a6:	12 a2       	std	Z+34, r1	; 0x22
   199a8:	cc 24       	eor	r12, r12
   199aa:	c3 94       	inc	r12
   199ac:	d1 2c       	mov	r13, r1
   199ae:	0f ef       	ldi	r16, 0xFF	; 255
   199b0:	1f ef       	ldi	r17, 0xFF	; 255
   199b2:	e6 5a       	subi	r30, 0xA6	; 166
   199b4:	ff 4f       	sbci	r31, 0xFF	; 255
   199b6:	f9 87       	std	Y+9, r31	; 0x09
   199b8:	e8 87       	std	Y+8, r30	; 0x08
   199ba:	ae 84       	ldd	r10, Y+14	; 0x0e
   199bc:	bf 84       	ldd	r11, Y+15	; 0x0f
   199be:	fc e5       	ldi	r31, 0x5C	; 92
   199c0:	af 0e       	add	r10, r31
   199c2:	b1 1c       	adc	r11, r1
   199c4:	8e 85       	ldd	r24, Y+14	; 0x0e
   199c6:	9f 85       	ldd	r25, Y+15	; 0x0f
   199c8:	80 5a       	subi	r24, 0xA0	; 160
   199ca:	9f 4f       	sbci	r25, 0xFF	; 255
   199cc:	9b 87       	std	Y+11, r25	; 0x0b
   199ce:	8a 87       	std	Y+10, r24	; 0x0a
   199d0:	ee 85       	ldd	r30, Y+14	; 0x0e
   199d2:	ff 85       	ldd	r31, Y+15	; 0x0f
   199d4:	e1 5b       	subi	r30, 0xB1	; 177
   199d6:	ff 4f       	sbci	r31, 0xFF	; 255
   199d8:	fd 87       	std	Y+13, r31	; 0x0d
   199da:	ec 87       	std	Y+12, r30	; 0x0c
   199dc:	82 e8       	ldi	r24, 0x82	; 130
   199de:	9b e3       	ldi	r25, 0x3B	; 59
   199e0:	3c 01       	movw	r6, r24
   199e2:	81 2c       	mov	r8, r1
   199e4:	76 01       	movw	r14, r12
   199e6:	21 e0       	ldi	r18, 0x01	; 1
   199e8:	e2 1a       	sub	r14, r18
   199ea:	f1 08       	sbc	r15, r1
   199ec:	b7 01       	movw	r22, r14
   199ee:	8e 85       	ldd	r24, Y+14	; 0x0e
   199f0:	9f 85       	ldd	r25, Y+15	; 0x0f
   199f2:	cb de       	rcall	.-618    	; 0x1978a <lif_readdirindex>
   199f4:	89 2b       	or	r24, r25
   199f6:	19 f4       	brne	.+6      	; 0x199fe <lif_updatefree+0xbe>
   199f8:	80 e0       	ldi	r24, 0x00	; 0
   199fa:	90 e0       	ldi	r25, 0x00	; 0
   199fc:	91 c0       	rjmp	.+290    	; 0x19b20 <lif_updatefree+0x1e0>
   199fe:	e8 85       	ldd	r30, Y+8	; 0x08
   19a00:	f9 85       	ldd	r31, Y+9	; 0x09
   19a02:	80 81       	ld	r24, Z
   19a04:	91 81       	ldd	r25, Z+1	; 0x01
   19a06:	8f 3f       	cpi	r24, 0xFF	; 255
   19a08:	ff ef       	ldi	r31, 0xFF	; 255
   19a0a:	9f 07       	cpc	r25, r31
   19a0c:	c1 f4       	brne	.+48     	; 0x19a3e <lif_updatefree+0xfe>
   19a0e:	ee 85       	ldd	r30, Y+14	; 0x0e
   19a10:	ff 85       	ldd	r31, Y+15	; 0x0f
   19a12:	0f 3f       	cpi	r16, 0xFF	; 255
   19a14:	2f ef       	ldi	r18, 0xFF	; 255
   19a16:	12 07       	cpc	r17, r18
   19a18:	09 f4       	brne	.+2      	; 0x19a1c <lif_updatefree+0xdc>
   19a1a:	78 c0       	rjmp	.+240    	; 0x19b0c <lif_updatefree+0x1cc>
   19a1c:	13 a3       	std	Z+35, r17	; 0x23
   19a1e:	02 a3       	std	Z+34, r16	; 0x22
   19a20:	e0 1a       	sub	r14, r16
   19a22:	f1 0a       	sbc	r15, r17
   19a24:	86 8d       	ldd	r24, Z+30	; 0x1e
   19a26:	97 8d       	ldd	r25, Z+31	; 0x1f
   19a28:	8e 19       	sub	r24, r14
   19a2a:	9f 09       	sbc	r25, r15
   19a2c:	97 8f       	std	Z+31, r25	; 0x1f
   19a2e:	86 8f       	std	Z+30, r24	; 0x1e
   19a30:	b8 01       	movw	r22, r16
   19a32:	cf 01       	movw	r24, r30
   19a34:	6d df       	rcall	.-294    	; 0x19910 <lif_writedirEOF>
   19a36:	89 2b       	or	r24, r25
   19a38:	09 f0       	breq	.+2      	; 0x19a3c <lif_updatefree+0xfc>
   19a3a:	6a c0       	rjmp	.+212    	; 0x19b10 <lif_updatefree+0x1d0>
   19a3c:	dd cf       	rjmp	.-70     	; 0x199f8 <lif_updatefree+0xb8>
   19a3e:	89 2b       	or	r24, r25
   19a40:	81 f4       	brne	.+32     	; 0x19a62 <lif_updatefree+0x122>
   19a42:	0f 3f       	cpi	r16, 0xFF	; 255
   19a44:	ff ef       	ldi	r31, 0xFF	; 255
   19a46:	1f 07       	cpc	r17, r31
   19a48:	09 f4       	brne	.+2      	; 0x19a4c <lif_updatefree+0x10c>
   19a4a:	87 01       	movw	r16, r14
   19a4c:	ee 85       	ldd	r30, Y+14	; 0x0e
   19a4e:	ff 85       	ldd	r31, Y+15	; 0x0f
   19a50:	86 8d       	ldd	r24, Z+30	; 0x1e
   19a52:	97 8d       	ldd	r25, Z+31	; 0x1f
   19a54:	01 96       	adiw	r24, 0x01	; 1
   19a56:	97 8f       	std	Z+31, r25	; 0x1f
   19a58:	86 8f       	std	Z+30, r24	; 0x1e
   19a5a:	ff ef       	ldi	r31, 0xFF	; 255
   19a5c:	cf 1a       	sub	r12, r31
   19a5e:	df 0a       	sbc	r13, r31
   19a60:	c1 cf       	rjmp	.-126    	; 0x199e4 <lif_updatefree+0xa4>
   19a62:	f5 01       	movw	r30, r10
   19a64:	80 81       	ld	r24, Z
   19a66:	91 81       	ldd	r25, Z+1	; 0x01
   19a68:	a2 81       	ldd	r26, Z+2	; 0x02
   19a6a:	b3 81       	ldd	r27, Z+3	; 0x03
   19a6c:	82 15       	cp	r24, r2
   19a6e:	93 05       	cpc	r25, r3
   19a70:	a4 05       	cpc	r26, r4
   19a72:	b5 05       	cpc	r27, r5
   19a74:	b8 f4       	brcc	.+46     	; 0x19aa4 <lif_updatefree+0x164>
   19a76:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   19a7a:	80 ff       	sbrs	r24, 0
   19a7c:	13 c0       	rjmp	.+38     	; 0x19aa4 <lif_updatefree+0x164>
   19a7e:	8c 85       	ldd	r24, Y+12	; 0x0c
   19a80:	9d 85       	ldd	r25, Y+13	; 0x0d
   19a82:	ed b7       	in	r30, 0x3d	; 61
   19a84:	fe b7       	in	r31, 0x3e	; 62
   19a86:	97 83       	std	Z+7, r25	; 0x07
   19a88:	86 83       	std	Z+6, r24	; 0x06
   19a8a:	ee 85       	ldd	r30, Y+14	; 0x0e
   19a8c:	ff 85       	ldd	r31, Y+15	; 0x0f
   19a8e:	80 81       	ld	r24, Z
   19a90:	91 81       	ldd	r25, Z+1	; 0x01
   19a92:	ed b7       	in	r30, 0x3d	; 61
   19a94:	fe b7       	in	r31, 0x3e	; 62
   19a96:	95 83       	std	Z+5, r25	; 0x05
   19a98:	84 83       	std	Z+4, r24	; 0x04
   19a9a:	61 82       	std	Z+1, r6	; 0x01
   19a9c:	72 82       	std	Z+2, r7	; 0x02
   19a9e:	83 82       	std	Z+3, r8	; 0x03
   19aa0:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   19aa4:	ea 85       	ldd	r30, Y+10	; 0x0a
   19aa6:	fb 85       	ldd	r31, Y+11	; 0x0b
   19aa8:	80 81       	ld	r24, Z
   19aaa:	91 81       	ldd	r25, Z+1	; 0x01
   19aac:	a2 81       	ldd	r26, Z+2	; 0x02
   19aae:	b3 81       	ldd	r27, Z+3	; 0x03
   19ab0:	ee 85       	ldd	r30, Y+14	; 0x0e
   19ab2:	ff 85       	ldd	r31, Y+15	; 0x0f
   19ab4:	44 89       	ldd	r20, Z+20	; 0x14
   19ab6:	55 89       	ldd	r21, Z+21	; 0x15
   19ab8:	66 89       	ldd	r22, Z+22	; 0x16
   19aba:	77 89       	ldd	r23, Z+23	; 0x17
   19abc:	48 0f       	add	r20, r24
   19abe:	59 1f       	adc	r21, r25
   19ac0:	6a 1f       	adc	r22, r26
   19ac2:	7b 1f       	adc	r23, r27
   19ac4:	44 8b       	std	Z+20, r20	; 0x14
   19ac6:	55 8b       	std	Z+21, r21	; 0x15
   19ac8:	66 8b       	std	Z+22, r22	; 0x16
   19aca:	77 8b       	std	Z+23, r23	; 0x17
   19acc:	40 8d       	ldd	r20, Z+24	; 0x18
   19ace:	51 8d       	ldd	r21, Z+25	; 0x19
   19ad0:	62 8d       	ldd	r22, Z+26	; 0x1a
   19ad2:	73 8d       	ldd	r23, Z+27	; 0x1b
   19ad4:	48 1b       	sub	r20, r24
   19ad6:	59 0b       	sbc	r21, r25
   19ad8:	6a 0b       	sbc	r22, r26
   19ada:	7b 0b       	sbc	r23, r27
   19adc:	40 8f       	std	Z+24, r20	; 0x18
   19ade:	51 8f       	std	Z+25, r21	; 0x19
   19ae0:	62 8f       	std	Z+26, r22	; 0x1a
   19ae2:	73 8f       	std	Z+27, r23	; 0x1b
   19ae4:	24 8d       	ldd	r18, Z+28	; 0x1c
   19ae6:	35 8d       	ldd	r19, Z+29	; 0x1d
   19ae8:	2f 5f       	subi	r18, 0xFF	; 255
   19aea:	3f 4f       	sbci	r19, 0xFF	; 255
   19aec:	35 8f       	std	Z+29, r19	; 0x1d
   19aee:	24 8f       	std	Z+28, r18	; 0x1c
   19af0:	f5 01       	movw	r30, r10
   19af2:	40 81       	ld	r20, Z
   19af4:	51 81       	ldd	r21, Z+1	; 0x01
   19af6:	62 81       	ldd	r22, Z+2	; 0x02
   19af8:	73 81       	ldd	r23, Z+3	; 0x03
   19afa:	1c 01       	movw	r2, r24
   19afc:	2d 01       	movw	r4, r26
   19afe:	24 0e       	add	r2, r20
   19b00:	35 1e       	adc	r3, r21
   19b02:	46 1e       	adc	r4, r22
   19b04:	57 1e       	adc	r5, r23
   19b06:	0f ef       	ldi	r16, 0xFF	; 255
   19b08:	1f ef       	ldi	r17, 0xFF	; 255
   19b0a:	a7 cf       	rjmp	.-178    	; 0x19a5a <lif_updatefree+0x11a>
   19b0c:	f3 a2       	std	Z+35, r15	; 0x23
   19b0e:	e2 a2       	std	Z+34, r14	; 0x22
   19b10:	8f ef       	ldi	r24, 0xFF	; 255
   19b12:	9f ef       	ldi	r25, 0xFF	; 255
   19b14:	ee 85       	ldd	r30, Y+14	; 0x0e
   19b16:	ff 85       	ldd	r31, Y+15	; 0x0f
   19b18:	91 a3       	std	Z+33, r25	; 0x21
   19b1a:	80 a3       	std	Z+32, r24	; 0x20
   19b1c:	8e 85       	ldd	r24, Y+14	; 0x0e
   19b1e:	9f 85       	ldd	r25, Y+15	; 0x0f
   19b20:	2f 96       	adiw	r28, 0x0f	; 15
   19b22:	0f b6       	in	r0, 0x3f	; 63
   19b24:	f8 94       	cli
   19b26:	de bf       	out	0x3e, r29	; 62
   19b28:	0f be       	out	0x3f, r0	; 63
   19b2a:	cd bf       	out	0x3d, r28	; 61
   19b2c:	df 91       	pop	r29
   19b2e:	cf 91       	pop	r28
   19b30:	1f 91       	pop	r17
   19b32:	0f 91       	pop	r16
   19b34:	ff 90       	pop	r15
   19b36:	ef 90       	pop	r14
   19b38:	df 90       	pop	r13
   19b3a:	cf 90       	pop	r12
   19b3c:	bf 90       	pop	r11
   19b3e:	af 90       	pop	r10
   19b40:	8f 90       	pop	r8
   19b42:	7f 90       	pop	r7
   19b44:	6f 90       	pop	r6
   19b46:	5f 90       	pop	r5
   19b48:	4f 90       	pop	r4
   19b4a:	3f 90       	pop	r3
   19b4c:	2f 90       	pop	r2
   19b4e:	08 95       	ret

00019b50 <lif_create_volume>:
/// @param[in] dirstart:   Directory start sector
/// @param[in] dirsectors: Directory sectors
/// @return pointer to LIF structure
MEMSPACE
lif_t *lif_create_volume(char *imagename, char *liflabel, long dirstart, long dirsectors, long filesectors)
{
   19b50:	a9 e2       	ldi	r26, 0x29	; 41
   19b52:	b1 e0       	ldi	r27, 0x01	; 1
   19b54:	ee ea       	ldi	r30, 0xAE	; 174
   19b56:	fd ec       	ldi	r31, 0xCD	; 205
   19b58:	0c 94 19 e5 	jmp	0x1ca32	; 0x1ca32 <__prologue_saves__>
   19b5c:	4c 01       	movw	r8, r24
   19b5e:	3b 01       	movw	r6, r22
   19b60:	19 01       	movw	r2, r18
   19b62:	2a 01       	movw	r4, r20
   19b64:	ca 5d       	subi	r28, 0xDA	; 218
   19b66:	de 4f       	sbci	r29, 0xFE	; 254
   19b68:	e8 82       	st	Y, r14
   19b6a:	f9 82       	std	Y+1, r15	; 0x01
   19b6c:	0a 83       	std	Y+2, r16	; 0x02
   19b6e:	1b 83       	std	Y+3, r17	; 0x03
   19b70:	c6 52       	subi	r28, 0x26	; 38
   19b72:	d1 40       	sbci	r29, 0x01	; 1
   19b74:	c2 5e       	subi	r28, 0xE2	; 226
   19b76:	de 4f       	sbci	r29, 0xFE	; 254
   19b78:	a8 82       	st	Y, r10
   19b7a:	b9 82       	std	Y+1, r11	; 0x01
   19b7c:	ca 82       	std	Y+2, r12	; 0x02
   19b7e:	db 82       	std	Y+3, r13	; 0x03
   19b80:	ce 51       	subi	r28, 0x1E	; 30
   19b82:	d1 40       	sbci	r29, 0x01	; 1
    long i;
    long offset;
    long count;
    uint8_t buffer[LIF_SECTOR_SIZE];

    time_t t = time(NULL);
   19b84:	80 e0       	ldi	r24, 0x00	; 0
   19b86:	90 e0       	ldi	r25, 0x00	; 0
   19b88:	0e 94 a6 39 	call	0x734c	; 0x734c <time>
   19b8c:	5b 01       	movw	r10, r22
   19b8e:	6c 01       	movw	r12, r24

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
   19b90:	64 e7       	ldi	r22, 0x74	; 116
   19b92:	70 e0       	ldi	r23, 0x00	; 0
   19b94:	80 e0       	ldi	r24, 0x00	; 0
   19b96:	90 e0       	ldi	r25, 0x00	; 0
   19b98:	0e 94 9d c1 	call	0x1833a	; 0x1833a <lif_calloc>
   19b9c:	7c 01       	movw	r14, r24
    if(LIF == NULL)
   19b9e:	89 2b       	or	r24, r25
   19ba0:	09 f4       	brne	.+2      	; 0x19ba4 <lif_create_volume+0x54>
   19ba2:	b6 c2       	rjmp	.+1388   	; 0x1a110 <lif_create_volume+0x5c0>
        return(NULL);

	printf("Creating:%s, Label:[%s], Directory Start %ld, Directory Size: %ld, File Sectors:%ld\n",
   19ba4:	c2 5e       	subi	r28, 0xE2	; 226
   19ba6:	de 4f       	sbci	r29, 0xFE	; 254
   19ba8:	28 81       	ld	r18, Y
   19baa:	39 81       	ldd	r19, Y+1	; 0x01
   19bac:	4a 81       	ldd	r20, Y+2	; 0x02
   19bae:	5b 81       	ldd	r21, Y+3	; 0x03
   19bb0:	ce 51       	subi	r28, 0x1E	; 30
   19bb2:	d1 40       	sbci	r29, 0x01	; 1
   19bb4:	ed b7       	in	r30, 0x3d	; 61
   19bb6:	fe b7       	in	r31, 0x3e	; 62
   19bb8:	20 8b       	std	Z+16, r18	; 0x10
   19bba:	31 8b       	std	Z+17, r19	; 0x11
   19bbc:	42 8b       	std	Z+18, r20	; 0x12
   19bbe:	53 8b       	std	Z+19, r21	; 0x13
   19bc0:	ca 5d       	subi	r28, 0xDA	; 218
   19bc2:	de 4f       	sbci	r29, 0xFE	; 254
   19bc4:	28 81       	ld	r18, Y
   19bc6:	39 81       	ldd	r19, Y+1	; 0x01
   19bc8:	4a 81       	ldd	r20, Y+2	; 0x02
   19bca:	5b 81       	ldd	r21, Y+3	; 0x03
   19bcc:	c6 52       	subi	r28, 0x26	; 38
   19bce:	d1 40       	sbci	r29, 0x01	; 1
   19bd0:	24 87       	std	Z+12, r18	; 0x0c
   19bd2:	35 87       	std	Z+13, r19	; 0x0d
   19bd4:	46 87       	std	Z+14, r20	; 0x0e
   19bd6:	57 87       	std	Z+15, r21	; 0x0f
   19bd8:	20 86       	std	Z+8, r2	; 0x08
   19bda:	31 86       	std	Z+9, r3	; 0x09
   19bdc:	42 86       	std	Z+10, r4	; 0x0a
   19bde:	53 86       	std	Z+11, r5	; 0x0b
   19be0:	77 82       	std	Z+7, r7	; 0x07
   19be2:	66 82       	std	Z+6, r6	; 0x06
   19be4:	95 82       	std	Z+5, r9	; 0x05
   19be6:	84 82       	std	Z+4, r8	; 0x04
   19be8:	8d e5       	ldi	r24, 0x5D	; 93
   19bea:	9c e3       	ldi	r25, 0x3C	; 60
   19bec:	a0 e0       	ldi	r26, 0x00	; 0
   19bee:	81 83       	std	Z+1, r24	; 0x01
   19bf0:	92 83       	std	Z+2, r25	; 0x02
   19bf2:	a3 83       	std	Z+3, r26	; 0x03
   19bf4:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
		imagename, liflabel, dirstart, dirsectors, filesectors );

    if(debuglevel & 0x400)
   19bf8:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   19bfc:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   19c00:	92 ff       	sbrs	r25, 2
   19c02:	04 c0       	rjmp	.+8      	; 0x19c0c <lif_create_volume+0xbc>
        lif_dump_vol(LIF,"lif_create_volume");
   19c04:	66 e7       	ldi	r22, 0x76	; 118
   19c06:	75 e1       	ldi	r23, 0x15	; 21
   19c08:	c7 01       	movw	r24, r14
    
    lif_image_clear(LIF);
   19c0a:	e7 d8       	rcall	.-3634   	; 0x18dda <lif_dump_vol>
   19c0c:	c7 01       	movw	r24, r14

    // Initialize volume header
    LIF->VOL.LIFid = 0x8000;
   19c0e:	d0 d8       	rcall	.-3680   	; 0x18db0 <lif_image_clear>
   19c10:	80 e0       	ldi	r24, 0x00	; 0
   19c12:	90 e8       	ldi	r25, 0x80	; 128
   19c14:	f7 01       	movw	r30, r14
   19c16:	95 a3       	std	Z+37, r25	; 0x25
    lif_fixname(LIF->VOL.Label, liflabel, 6);
   19c18:	84 a3       	std	Z+36, r24	; 0x24
   19c1a:	46 e0       	ldi	r20, 0x06	; 6
   19c1c:	50 e0       	ldi	r21, 0x00	; 0
   19c1e:	b3 01       	movw	r22, r6
   19c20:	c7 01       	movw	r24, r14
   19c22:	86 96       	adiw	r24, 0x26	; 38
   19c24:	0e 94 dc c3 	call	0x187b8	; 0x187b8 <lif_fixname>
    LIF->VOL.DirStartSector = dirstart;
   19c28:	f7 01       	movw	r30, r14
   19c2a:	25 a6       	std	Z+45, r2	; 0x2d
   19c2c:	36 a6       	std	Z+46, r3	; 0x2e
   19c2e:	47 a6       	std	Z+47, r4	; 0x2f
    LIF->VOL.DirSectors = dirsectors;
   19c30:	50 aa       	std	Z+48, r5	; 0x30
   19c32:	ca 5d       	subi	r28, 0xDA	; 218
   19c34:	de 4f       	sbci	r29, 0xFE	; 254
   19c36:	28 81       	ld	r18, Y
   19c38:	39 81       	ldd	r19, Y+1	; 0x01
   19c3a:	4a 81       	ldd	r20, Y+2	; 0x02
   19c3c:	5b 81       	ldd	r21, Y+3	; 0x03
   19c3e:	c6 52       	subi	r28, 0x26	; 38
   19c40:	d1 40       	sbci	r29, 0x01	; 1
   19c42:	25 ab       	std	Z+53, r18	; 0x35
   19c44:	36 ab       	std	Z+54, r19	; 0x36
   19c46:	47 ab       	std	Z+55, r20	; 0x37
    LIF->VOL.System3000LIFid = 0x1000;
   19c48:	50 af       	std	Z+56, r21	; 0x38
   19c4a:	80 e0       	ldi	r24, 0x00	; 0
   19c4c:	90 e1       	ldi	r25, 0x10	; 16
   19c4e:	92 ab       	std	Z+50, r25	; 0x32
    LIF->VOL.tracks_per_side = 0;
   19c50:	81 ab       	std	Z+49, r24	; 0x31
   19c52:	fd 96       	adiw	r30, 0x3d	; 61
   19c54:	10 82       	st	Z, r1
   19c56:	11 82       	std	Z+1, r1	; 0x01
   19c58:	12 82       	std	Z+2, r1	; 0x02
    LIF->VOL.sides = 0;
   19c5a:	13 82       	std	Z+3, r1	; 0x03
   19c5c:	34 96       	adiw	r30, 0x04	; 4
   19c5e:	10 82       	st	Z, r1
   19c60:	11 82       	std	Z+1, r1	; 0x01
   19c62:	12 82       	std	Z+2, r1	; 0x02
    LIF->VOL.sectors_per_track = 0;
   19c64:	13 82       	std	Z+3, r1	; 0x03
   19c66:	34 96       	adiw	r30, 0x04	; 4
   19c68:	10 82       	st	Z, r1
   19c6a:	11 82       	std	Z+1, r1	; 0x01
   19c6c:	12 82       	std	Z+2, r1	; 0x02
    ///@brief 0 causes time to return the current date

    lif_time2lifbcd(t, LIF->VOL.date);
   19c6e:	13 82       	std	Z+3, r1	; 0x03
   19c70:	a7 01       	movw	r20, r14
   19c72:	47 5b       	subi	r20, 0xB7	; 183
   19c74:	5f 4f       	sbci	r21, 0xFF	; 255
   19c76:	c6 01       	movw	r24, r12
   19c78:	b5 01       	movw	r22, r10
   19c7a:	0e 94 01 c6 	call	0x18c02	; 0x18c02 <lif_time2lifbcd>

    // update LIF headers
    LIF->name = lif_stralloc(imagename);
   19c7e:	c4 01       	movw	r24, r8
   19c80:	0e 94 e8 c1 	call	0x183d0	; 0x183d0 <lif_stralloc>
   19c84:	d7 01       	movw	r26, r14
   19c86:	8d 93       	st	X+, r24
    if(LIF->name == NULL)
   19c88:	9c 93       	st	X, r25
   19c8a:	89 2b       	or	r24, r25
   19c8c:	09 f4       	brne	.+2      	; 0x19c90 <lif_create_volume+0x140>
        lif_close_volume(LIF);
        return(NULL);
    }

    // Initilize all LIF headers
    LIF->filesectors = filesectors;
   19c8e:	35 c2       	rjmp	.+1130   	; 0x1a0fa <lif_create_volume+0x5aa>
   19c90:	c2 5e       	subi	r28, 0xE2	; 226
   19c92:	de 4f       	sbci	r29, 0xFE	; 254
   19c94:	28 81       	ld	r18, Y
   19c96:	39 81       	ldd	r19, Y+1	; 0x01
   19c98:	4a 81       	ldd	r20, Y+2	; 0x02
   19c9a:	5b 81       	ldd	r21, Y+3	; 0x03
   19c9c:	ce 51       	subi	r28, 0x1E	; 30
   19c9e:	d1 40       	sbci	r29, 0x01	; 1
   19ca0:	f7 01       	movw	r30, r14
   19ca2:	20 8b       	std	Z+16, r18	; 0x10
   19ca4:	31 8b       	std	Z+17, r19	; 0x11
   19ca6:	42 8b       	std	Z+18, r20	; 0x12
    LIF->filestart = dirstart + dirsectors;
   19ca8:	53 8b       	std	Z+19, r21	; 0x13
   19caa:	ca 5d       	subi	r28, 0xDA	; 218
   19cac:	de 4f       	sbci	r29, 0xFE	; 254
   19cae:	88 81       	ld	r24, Y
   19cb0:	99 81       	ldd	r25, Y+1	; 0x01
   19cb2:	aa 81       	ldd	r26, Y+2	; 0x02
   19cb4:	bb 81       	ldd	r27, Y+3	; 0x03
   19cb6:	c6 52       	subi	r28, 0x26	; 38
   19cb8:	d1 40       	sbci	r29, 0x01	; 1
   19cba:	82 0d       	add	r24, r2
   19cbc:	93 1d       	adc	r25, r3
   19cbe:	a4 1d       	adc	r26, r4
   19cc0:	b5 1d       	adc	r27, r5
   19cc2:	84 87       	std	Z+12, r24	; 0x0c
   19cc4:	95 87       	std	Z+13, r25	; 0x0d
   19cc6:	a6 87       	std	Z+14, r26	; 0x0e
    LIF->sectors = (LIF->filestart+LIF->filesectors);
   19cc8:	b7 87       	std	Z+15, r27	; 0x0f
   19cca:	82 0f       	add	r24, r18
   19ccc:	93 1f       	adc	r25, r19
   19cce:	a4 1f       	adc	r26, r20
   19cd0:	b5 1f       	adc	r27, r21
   19cd2:	84 83       	std	Z+4, r24	; 0x04
   19cd4:	95 83       	std	Z+5, r25	; 0x05
   19cd6:	a6 83       	std	Z+6, r26	; 0x06
    LIF->imagebytes = LIF->sectors * (long)LIF_SECTOR_SIZE;
   19cd8:	b7 83       	std	Z+7, r27	; 0x07
   19cda:	ba 2f       	mov	r27, r26
   19cdc:	a9 2f       	mov	r26, r25
   19cde:	98 2f       	mov	r25, r24
   19ce0:	88 27       	eor	r24, r24
   19ce2:	80 87       	std	Z+8, r24	; 0x08
   19ce4:	91 87       	std	Z+9, r25	; 0x09
   19ce6:	a2 87       	std	Z+10, r26	; 0x0a
    LIF->freesectors = LIF->filesectors;
   19ce8:	b3 87       	std	Z+11, r27	; 0x0b
   19cea:	20 8f       	std	Z+24, r18	; 0x18
   19cec:	31 8f       	std	Z+25, r19	; 0x19
   19cee:	42 8f       	std	Z+26, r20	; 0x1a
    LIF->usedsectors = 0;
   19cf0:	53 8f       	std	Z+27, r21	; 0x1b
   19cf2:	14 8a       	std	Z+20, r1	; 0x14
   19cf4:	15 8a       	std	Z+21, r1	; 0x15
   19cf6:	16 8a       	std	Z+22, r1	; 0x16
    LIF->files = 0;
   19cf8:	17 8a       	std	Z+23, r1	; 0x17
   19cfa:	15 8e       	std	Z+29, r1	; 0x1d
    LIF->purged = 0;
   19cfc:	14 8e       	std	Z+28, r1	; 0x1c
   19cfe:	17 8e       	std	Z+31, r1	; 0x1f
    LIF->dirindex = 0;
   19d00:	16 8e       	std	Z+30, r1	; 0x1e
   19d02:	11 a2       	std	Z+33, r1	; 0x21
    LIF->EOFindex = 0;
   19d04:	10 a2       	std	Z+32, r1	; 0x20
   19d06:	13 a2       	std	Z+35, r1	; 0x23

    memset(buffer,0,LIF_SECTOR_SIZE);
   19d08:	12 a2       	std	Z+34, r1	; 0x22
   19d0a:	61 2c       	mov	r6, r1
   19d0c:	77 24       	eor	r7, r7
   19d0e:	73 94       	inc	r7
   19d10:	9e 01       	movw	r18, r28
   19d12:	2c 5e       	subi	r18, 0xEC	; 236
   19d14:	3f 4f       	sbci	r19, 0xFF	; 255
   19d16:	49 01       	movw	r8, r18
   19d18:	d9 01       	movw	r26, r18
   19d1a:	f3 01       	movw	r30, r6
   19d1c:	1d 92       	st	X+, r1
   19d1e:	31 97       	sbiw	r30, 0x01	; 1

    lif_vol2str(LIF,buffer);
   19d20:	e9 f7       	brne	.-6      	; 0x19d1c <lif_create_volume+0x1cc>
   19d22:	b9 01       	movw	r22, r18
   19d24:	c7 01       	movw	r24, r14
   19d26:	0e 94 19 c4 	call	0x18832	; 0x18832 <lif_vol2str>

    // Write Volume header
    LIF->fp = lif_open(LIF->name,"wb+");
   19d2a:	64 e3       	ldi	r22, 0x34	; 52
   19d2c:	78 e0       	ldi	r23, 0x08	; 8
   19d2e:	d7 01       	movw	r26, r14
   19d30:	8d 91       	ld	r24, X+
   19d32:	9c 91       	ld	r25, X
   19d34:	0e 94 07 c2 	call	0x1840e	; 0x1840e <lif_open>
   19d38:	f7 01       	movw	r30, r14
   19d3a:	93 83       	std	Z+3, r25	; 0x03
    if(LIF->fp == NULL)
   19d3c:	82 83       	std	Z+2, r24	; 0x02
   19d3e:	89 2b       	or	r24, r25
   19d40:	09 f4       	brne	.+2      	; 0x19d44 <lif_create_volume+0x1f4>
    }

    offset = 0;
    count = 0;

    size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19d42:	db c1       	rjmp	.+950    	; 0x1a0fa <lif_create_volume+0x5aa>
   19d44:	00 e0       	ldi	r16, 0x00	; 0
   19d46:	11 e0       	ldi	r17, 0x01	; 1
   19d48:	20 e0       	ldi	r18, 0x00	; 0
   19d4a:	30 e0       	ldi	r19, 0x00	; 0
   19d4c:	a9 01       	movw	r20, r18
   19d4e:	b4 01       	movw	r22, r8
   19d50:	c7 01       	movw	r24, r14
   19d52:	0e 94 dc c2 	call	0x185b8	; 0x185b8 <lif_write>
   19d56:	9c 01       	movw	r18, r24
   19d58:	99 0f       	add	r25, r25
   19d5a:	44 0b       	sbc	r20, r20
   19d5c:	55 0b       	sbc	r21, r21
   19d5e:	ca 5e       	subi	r28, 0xEA	; 234
   19d60:	de 4f       	sbci	r29, 0xFE	; 254
   19d62:	28 83       	st	Y, r18
   19d64:	39 83       	std	Y+1, r19	; 0x01
   19d66:	4a 83       	std	Y+2, r20	; 0x02
   19d68:	5b 83       	std	Y+3, r21	; 0x03
   19d6a:	c6 51       	subi	r28, 0x16	; 22

    if(size < LIF_SECTOR_SIZE)
   19d6c:	d1 40       	sbci	r29, 0x01	; 1
   19d6e:	2f 3f       	cpi	r18, 0xFF	; 255
   19d70:	31 05       	cpc	r19, r1
   19d72:	41 05       	cpc	r20, r1
   19d74:	51 05       	cpc	r21, r1
   19d76:	09 f0       	breq	.+2      	; 0x19d7a <lif_create_volume+0x22a>
   19d78:	0c f4       	brge	.+2      	; 0x19d7c <lif_create_volume+0x22c>
    }
    offset += size;
    ++count;


    memset(buffer,0,LIF_SECTOR_SIZE);
   19d7a:	bf c1       	rjmp	.+894    	; 0x1a0fa <lif_create_volume+0x5aa>
   19d7c:	d4 01       	movw	r26, r8
   19d7e:	f3 01       	movw	r30, r6
   19d80:	1d 92       	st	X+, r1
   19d82:	31 97       	sbiw	r30, 0x01	; 1

    // Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19d84:	e9 f7       	brne	.-6      	; 0x19d80 <lif_create_volume+0x230>
   19d86:	21 e0       	ldi	r18, 0x01	; 1
   19d88:	30 e0       	ldi	r19, 0x00	; 0
   19d8a:	40 e0       	ldi	r20, 0x00	; 0
   19d8c:	50 e0       	ldi	r21, 0x00	; 0
   19d8e:	c6 5e       	subi	r28, 0xE6	; 230
   19d90:	de 4f       	sbci	r29, 0xFE	; 254
   19d92:	28 83       	st	Y, r18
   19d94:	39 83       	std	Y+1, r19	; 0x01
   19d96:	4a 83       	std	Y+2, r20	; 0x02
   19d98:	5b 83       	std	Y+3, r21	; 0x03
   19d9a:	ca 51       	subi	r28, 0x1A	; 26
   19d9c:	d1 40       	sbci	r29, 0x01	; 1
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
            printf("\tWrote: %ld\r", count);
   19d9e:	64 01       	movw	r12, r8
   19da0:	80 e5       	ldi	r24, 0x50	; 80
   19da2:	9c e3       	ldi	r25, 0x3C	; 60
   19da4:	3c 01       	movw	r6, r24


    memset(buffer,0,LIF_SECTOR_SIZE);

    // Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19da6:	81 2c       	mov	r8, r1
   19da8:	c6 5e       	subi	r28, 0xE6	; 230
   19daa:	de 4f       	sbci	r29, 0xFE	; 254
   19dac:	88 81       	ld	r24, Y
   19dae:	99 81       	ldd	r25, Y+1	; 0x01
   19db0:	aa 81       	ldd	r26, Y+2	; 0x02
   19db2:	bb 81       	ldd	r27, Y+3	; 0x03
   19db4:	ca 51       	subi	r28, 0x1A	; 26
   19db6:	d1 40       	sbci	r29, 0x01	; 1
   19db8:	82 15       	cp	r24, r2
   19dba:	93 05       	cpc	r25, r3
   19dbc:	a4 05       	cpc	r26, r4
   19dbe:	b5 05       	cpc	r27, r5
   19dc0:	0c f0       	brlt	.+2      	; 0x19dc4 <lif_create_volume+0x274>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19dc2:	55 c0       	rjmp	.+170    	; 0x19e6e <lif_create_volume+0x31e>
   19dc4:	00 e0       	ldi	r16, 0x00	; 0
   19dc6:	11 e0       	ldi	r17, 0x01	; 1
   19dc8:	ca 5e       	subi	r28, 0xEA	; 234
   19dca:	de 4f       	sbci	r29, 0xFE	; 254
   19dcc:	28 81       	ld	r18, Y
   19dce:	39 81       	ldd	r19, Y+1	; 0x01
   19dd0:	4a 81       	ldd	r20, Y+2	; 0x02
   19dd2:	5b 81       	ldd	r21, Y+3	; 0x03
   19dd4:	c6 51       	subi	r28, 0x16	; 22
   19dd6:	d1 40       	sbci	r29, 0x01	; 1
   19dd8:	b6 01       	movw	r22, r12
   19dda:	c7 01       	movw	r24, r14
   19ddc:	0e 94 dc c2 	call	0x185b8	; 0x185b8 <lif_write>
   19de0:	09 2e       	mov	r0, r25
   19de2:	00 0c       	add	r0, r0
   19de4:	aa 0b       	sbc	r26, r26
        if(size < LIF_SECTOR_SIZE)
   19de6:	bb 0b       	sbc	r27, r27
   19de8:	8f 3f       	cpi	r24, 0xFF	; 255
   19dea:	91 05       	cpc	r25, r1
   19dec:	a1 05       	cpc	r26, r1
   19dee:	b1 05       	cpc	r27, r1
   19df0:	09 f0       	breq	.+2      	; 0x19df4 <lif_create_volume+0x2a4>
   19df2:	0c f4       	brge	.+2      	; 0x19df6 <lif_create_volume+0x2a6>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   19df4:	82 c1       	rjmp	.+772    	; 0x1a0fa <lif_create_volume+0x5aa>
   19df6:	ca 5e       	subi	r28, 0xEA	; 234
   19df8:	de 4f       	sbci	r29, 0xFE	; 254
   19dfa:	28 81       	ld	r18, Y
   19dfc:	39 81       	ldd	r19, Y+1	; 0x01
   19dfe:	4a 81       	ldd	r20, Y+2	; 0x02
   19e00:	5b 81       	ldd	r21, Y+3	; 0x03
   19e02:	c6 51       	subi	r28, 0x16	; 22
   19e04:	d1 40       	sbci	r29, 0x01	; 1
   19e06:	28 0f       	add	r18, r24
   19e08:	39 1f       	adc	r19, r25
   19e0a:	4a 1f       	adc	r20, r26
   19e0c:	5b 1f       	adc	r21, r27
   19e0e:	ca 5e       	subi	r28, 0xEA	; 234
   19e10:	de 4f       	sbci	r29, 0xFE	; 254
   19e12:	28 83       	st	Y, r18
   19e14:	39 83       	std	Y+1, r19	; 0x01
   19e16:	4a 83       	std	Y+2, r20	; 0x02
   19e18:	5b 83       	std	Y+3, r21	; 0x03
   19e1a:	c6 51       	subi	r28, 0x16	; 22
            printf("\tWrote: %ld\r", count);
   19e1c:	d1 40       	sbci	r29, 0x01	; 1
   19e1e:	c6 5e       	subi	r28, 0xE6	; 230
   19e20:	de 4f       	sbci	r29, 0xFE	; 254
   19e22:	88 81       	ld	r24, Y
   19e24:	99 81       	ldd	r25, Y+1	; 0x01
   19e26:	aa 81       	ldd	r26, Y+2	; 0x02
   19e28:	bb 81       	ldd	r27, Y+3	; 0x03
   19e2a:	ca 51       	subi	r28, 0x1A	; 26
   19e2c:	d1 40       	sbci	r29, 0x01	; 1
   19e2e:	ed b7       	in	r30, 0x3d	; 61
   19e30:	fe b7       	in	r31, 0x3e	; 62
   19e32:	84 83       	std	Z+4, r24	; 0x04
   19e34:	95 83       	std	Z+5, r25	; 0x05
   19e36:	a6 83       	std	Z+6, r26	; 0x06
   19e38:	b7 83       	std	Z+7, r27	; 0x07
   19e3a:	61 82       	std	Z+1, r6	; 0x01
   19e3c:	72 82       	std	Z+2, r7	; 0x02
   19e3e:	83 82       	std	Z+3, r8	; 0x03
   19e40:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>


    memset(buffer,0,LIF_SECTOR_SIZE);

    // Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19e44:	c6 5e       	subi	r28, 0xE6	; 230
   19e46:	de 4f       	sbci	r29, 0xFE	; 254
   19e48:	28 81       	ld	r18, Y
   19e4a:	39 81       	ldd	r19, Y+1	; 0x01
   19e4c:	4a 81       	ldd	r20, Y+2	; 0x02
   19e4e:	5b 81       	ldd	r21, Y+3	; 0x03
   19e50:	ca 51       	subi	r28, 0x1A	; 26
   19e52:	d1 40       	sbci	r29, 0x01	; 1
   19e54:	2f 5f       	subi	r18, 0xFF	; 255
   19e56:	3f 4f       	sbci	r19, 0xFF	; 255
   19e58:	4f 4f       	sbci	r20, 0xFF	; 255
   19e5a:	5f 4f       	sbci	r21, 0xFF	; 255
   19e5c:	c6 5e       	subi	r28, 0xE6	; 230
   19e5e:	de 4f       	sbci	r29, 0xFE	; 254
   19e60:	28 83       	st	Y, r18
   19e62:	39 83       	std	Y+1, r19	; 0x01
   19e64:	4a 83       	std	Y+2, r20	; 0x02
   19e66:	5b 83       	std	Y+3, r21	; 0x03
   19e68:	ca 51       	subi	r28, 0x1A	; 26
   19e6a:	d1 40       	sbci	r29, 0x01	; 1
            printf("\tWrote: %ld\r", count);
        ++count;
    }

    // Write Directory sectors
    lif_dir_clear(LIF);
   19e6c:	9d cf       	rjmp	.-198    	; 0x19da8 <lif_create_volume+0x258>
   19e6e:	c7 01       	movw	r24, r14
   19e70:	0e 94 de c6 	call	0x18dbc	; 0x18dbc <lif_dir_clear>
    LIF->DIR.FileType = 0xffff;
   19e74:	8f ef       	ldi	r24, 0xFF	; 255
   19e76:	9f ef       	ldi	r25, 0xFF	; 255
   19e78:	f7 01       	movw	r30, r14
   19e7a:	e6 5a       	subi	r30, 0xA6	; 166
   19e7c:	ff 4f       	sbci	r31, 0xFF	; 255
   19e7e:	91 83       	std	Z+1, r25	; 0x01
   19e80:	80 83       	st	Z, r24
   19e82:	46 01       	movw	r8, r12
   19e84:	6e 01       	movw	r12, r28
   19e86:	9c ee       	ldi	r25, 0xEC	; 236
   19e88:	c9 1a       	sub	r12, r25
   19e8a:	9e ef       	ldi	r25, 0xFE	; 254

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);
   19e8c:	d9 0a       	sbc	r13, r25
   19e8e:	b4 01       	movw	r22, r8
   19e90:	c7 01       	movw	r24, r14
   19e92:	0e 94 25 c5 	call	0x18a4a	; 0x18a4a <lif_dir2str>
   19e96:	a0 e2       	ldi	r26, 0x20	; 32
   19e98:	8a 0e       	add	r8, r26

    // Write Directory sectors
    lif_dir_clear(LIF);
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
   19e9a:	91 1c       	adc	r9, r1
   19e9c:	c8 14       	cp	r12, r8
   19e9e:	d9 04       	cpc	r13, r9
   19ea0:	b1 f7       	brne	.-20     	; 0x19e8e <lif_create_volume+0x33e>
   19ea2:	a1 2c       	mov	r10, r1
   19ea4:	b1 2c       	mov	r11, r1
   19ea6:	65 01       	movw	r12, r10
   19ea8:	fe 01       	movw	r30, r28
   19eaa:	74 96       	adiw	r30, 0x14	; 20
   19eac:	cc 5e       	subi	r28, 0xEC	; 236
   19eae:	de 4f       	sbci	r29, 0xFE	; 254
   19eb0:	f9 83       	std	Y+1, r31	; 0x01
   19eb2:	e8 83       	st	Y, r30
   19eb4:	c4 51       	subi	r28, 0x14	; 20
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
   19eb6:	d1 40       	sbci	r29, 0x01	; 1
   19eb8:	84 e6       	ldi	r24, 0x64	; 100
   19eba:	28 2e       	mov	r2, r24
   19ebc:	31 2c       	mov	r3, r1
   19ebe:	41 2c       	mov	r4, r1
            printf("\tWrote: %ld\r", count);
   19ec0:	51 2c       	mov	r5, r1
   19ec2:	83 e4       	ldi	r24, 0x43	; 67
   19ec4:	9c e3       	ldi	r25, 0x3C	; 60
   19ec6:	3c 01       	movw	r6, r24
   19ec8:	81 2c       	mov	r8, r1
   19eca:	c6 5e       	subi	r28, 0xE6	; 230
   19ecc:	de 4f       	sbci	r29, 0xFE	; 254
   19ece:	28 81       	ld	r18, Y
   19ed0:	39 81       	ldd	r19, Y+1	; 0x01
   19ed2:	4a 81       	ldd	r20, Y+2	; 0x02
   19ed4:	5b 81       	ldd	r21, Y+3	; 0x03
   19ed6:	ca 51       	subi	r28, 0x1A	; 26
   19ed8:	d1 40       	sbci	r29, 0x01	; 1
   19eda:	2a 0d       	add	r18, r10
   19edc:	3b 1d       	adc	r19, r11
   19ede:	4c 1d       	adc	r20, r12
   19ee0:	5d 1d       	adc	r21, r13
   19ee2:	ce 5d       	subi	r28, 0xDE	; 222
   19ee4:	de 4f       	sbci	r29, 0xFE	; 254
   19ee6:	28 83       	st	Y, r18
   19ee8:	39 83       	std	Y+1, r19	; 0x01
   19eea:	4a 83       	std	Y+2, r20	; 0x02
   19eec:	5b 83       	std	Y+3, r21	; 0x03
   19eee:	c2 52       	subi	r28, 0x22	; 34
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   19ef0:	d1 40       	sbci	r29, 0x01	; 1
   19ef2:	ca 5d       	subi	r28, 0xDA	; 218
   19ef4:	de 4f       	sbci	r29, 0xFE	; 254
   19ef6:	88 81       	ld	r24, Y
   19ef8:	99 81       	ldd	r25, Y+1	; 0x01
   19efa:	aa 81       	ldd	r26, Y+2	; 0x02
   19efc:	bb 81       	ldd	r27, Y+3	; 0x03
   19efe:	c6 52       	subi	r28, 0x26	; 38
   19f00:	d1 40       	sbci	r29, 0x01	; 1
   19f02:	a8 16       	cp	r10, r24
   19f04:	b9 06       	cpc	r11, r25
   19f06:	ca 06       	cpc	r12, r26
   19f08:	db 06       	cpc	r13, r27
   19f0a:	0c f0       	brlt	.+2      	; 0x19f0e <lif_create_volume+0x3be>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19f0c:	58 c0       	rjmp	.+176    	; 0x19fbe <lif_create_volume+0x46e>
   19f0e:	00 e0       	ldi	r16, 0x00	; 0
   19f10:	11 e0       	ldi	r17, 0x01	; 1
   19f12:	ca 5e       	subi	r28, 0xEA	; 234
   19f14:	de 4f       	sbci	r29, 0xFE	; 254
   19f16:	28 81       	ld	r18, Y
   19f18:	39 81       	ldd	r19, Y+1	; 0x01
   19f1a:	4a 81       	ldd	r20, Y+2	; 0x02
   19f1c:	5b 81       	ldd	r21, Y+3	; 0x03
   19f1e:	c6 51       	subi	r28, 0x16	; 22
   19f20:	d1 40       	sbci	r29, 0x01	; 1
   19f22:	be 01       	movw	r22, r28
   19f24:	6c 5e       	subi	r22, 0xEC	; 236
   19f26:	7f 4f       	sbci	r23, 0xFF	; 255
   19f28:	c7 01       	movw	r24, r14
   19f2a:	0e 94 dc c2 	call	0x185b8	; 0x185b8 <lif_write>
   19f2e:	09 2e       	mov	r0, r25
   19f30:	00 0c       	add	r0, r0
   19f32:	aa 0b       	sbc	r26, r26
        if(size < LIF_SECTOR_SIZE)
   19f34:	bb 0b       	sbc	r27, r27
   19f36:	8f 3f       	cpi	r24, 0xFF	; 255
   19f38:	91 05       	cpc	r25, r1
   19f3a:	a1 05       	cpc	r26, r1
   19f3c:	b1 05       	cpc	r27, r1
   19f3e:	09 f0       	breq	.+2      	; 0x19f42 <lif_create_volume+0x3f2>
   19f40:	0c f4       	brge	.+2      	; 0x19f44 <lif_create_volume+0x3f4>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   19f42:	db c0       	rjmp	.+438    	; 0x1a0fa <lif_create_volume+0x5aa>
   19f44:	ca 5e       	subi	r28, 0xEA	; 234
   19f46:	de 4f       	sbci	r29, 0xFE	; 254
   19f48:	28 81       	ld	r18, Y
   19f4a:	39 81       	ldd	r19, Y+1	; 0x01
   19f4c:	4a 81       	ldd	r20, Y+2	; 0x02
   19f4e:	5b 81       	ldd	r21, Y+3	; 0x03
   19f50:	c6 51       	subi	r28, 0x16	; 22
   19f52:	d1 40       	sbci	r29, 0x01	; 1
   19f54:	28 0f       	add	r18, r24
   19f56:	39 1f       	adc	r19, r25
   19f58:	4a 1f       	adc	r20, r26
   19f5a:	5b 1f       	adc	r21, r27
   19f5c:	ca 5e       	subi	r28, 0xEA	; 234
   19f5e:	de 4f       	sbci	r29, 0xFE	; 254
   19f60:	28 83       	st	Y, r18
   19f62:	39 83       	std	Y+1, r19	; 0x01
   19f64:	4a 83       	std	Y+2, r20	; 0x02
   19f66:	5b 83       	std	Y+3, r21	; 0x03
   19f68:	c6 51       	subi	r28, 0x16	; 22
        if((count % 100) == 0)
   19f6a:	d1 40       	sbci	r29, 0x01	; 1
   19f6c:	ce 5d       	subi	r28, 0xDE	; 222
   19f6e:	de 4f       	sbci	r29, 0xFE	; 254
   19f70:	68 81       	ld	r22, Y
   19f72:	79 81       	ldd	r23, Y+1	; 0x01
   19f74:	8a 81       	ldd	r24, Y+2	; 0x02
   19f76:	9b 81       	ldd	r25, Y+3	; 0x03
   19f78:	c2 52       	subi	r28, 0x22	; 34
   19f7a:	d1 40       	sbci	r29, 0x01	; 1
   19f7c:	a2 01       	movw	r20, r4
   19f7e:	91 01       	movw	r18, r2
   19f80:	0e 94 b9 e4 	call	0x1c972	; 0x1c972 <__divmodsi4>
   19f84:	67 2b       	or	r22, r23
   19f86:	68 2b       	or	r22, r24
   19f88:	69 2b       	or	r22, r25
            printf("\tWrote: %ld\r", count);
   19f8a:	99 f4       	brne	.+38     	; 0x19fb2 <lif_create_volume+0x462>
   19f8c:	ce 5d       	subi	r28, 0xDE	; 222
   19f8e:	de 4f       	sbci	r29, 0xFE	; 254
   19f90:	88 81       	ld	r24, Y
   19f92:	99 81       	ldd	r25, Y+1	; 0x01
   19f94:	aa 81       	ldd	r26, Y+2	; 0x02
   19f96:	bb 81       	ldd	r27, Y+3	; 0x03
   19f98:	c2 52       	subi	r28, 0x22	; 34
   19f9a:	d1 40       	sbci	r29, 0x01	; 1
   19f9c:	ed b7       	in	r30, 0x3d	; 61
   19f9e:	fe b7       	in	r31, 0x3e	; 62
   19fa0:	84 83       	std	Z+4, r24	; 0x04
   19fa2:	95 83       	std	Z+5, r25	; 0x05
   19fa4:	a6 83       	std	Z+6, r26	; 0x06
   19fa6:	b7 83       	std	Z+7, r27	; 0x07
   19fa8:	61 82       	std	Z+1, r6	; 0x01
   19faa:	72 82       	std	Z+2, r7	; 0x02
   19fac:	83 82       	std	Z+3, r8	; 0x03
   19fae:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   19fb2:	ff ef       	ldi	r31, 0xFF	; 255
   19fb4:	af 1a       	sub	r10, r31
   19fb6:	bf 0a       	sbc	r11, r31
   19fb8:	cf 0a       	sbc	r12, r31
   19fba:	df 0a       	sbc	r13, r31
            printf("\tWrote: %ld\r", count);
        ++count;
    }

    // File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
   19fbc:	86 cf       	rjmp	.-244    	; 0x19eca <lif_create_volume+0x37a>
   19fbe:	80 e0       	ldi	r24, 0x00	; 0
   19fc0:	91 e0       	ldi	r25, 0x01	; 1
   19fc2:	cc 5e       	subi	r28, 0xEC	; 236
   19fc4:	de 4f       	sbci	r29, 0xFE	; 254
   19fc6:	a8 81       	ld	r26, Y
   19fc8:	b9 81       	ldd	r27, Y+1	; 0x01
   19fca:	c4 51       	subi	r28, 0x14	; 20
   19fcc:	d1 40       	sbci	r29, 0x01	; 1
   19fce:	fc 01       	movw	r30, r24
   19fd0:	1d 92       	st	X+, r1
   19fd2:	31 97       	sbiw	r30, 0x01	; 1
    for(i=0;i<filesectors;++i)
   19fd4:	e9 f7       	brne	.-6      	; 0x19fd0 <lif_create_volume+0x480>
   19fd6:	81 2c       	mov	r8, r1
   19fd8:	91 2c       	mov	r9, r1
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
            printf("\tWrote: %ld\r", count);
   19fda:	54 01       	movw	r10, r8
   19fdc:	86 e3       	ldi	r24, 0x36	; 54
   19fde:	9c e3       	ldi	r25, 0x3C	; 60
   19fe0:	9c 01       	movw	r18, r24
   19fe2:	40 e0       	ldi	r20, 0x00	; 0
   19fe4:	c6 5e       	subi	r28, 0xE6	; 230
   19fe6:	de 4f       	sbci	r29, 0xFE	; 254
   19fe8:	28 83       	st	Y, r18
   19fea:	39 83       	std	Y+1, r19	; 0x01
   19fec:	4a 83       	std	Y+2, r20	; 0x02
   19fee:	ca 51       	subi	r28, 0x1A	; 26
   19ff0:	d1 40       	sbci	r29, 0x01	; 1
   19ff2:	ce 5d       	subi	r28, 0xDE	; 222
   19ff4:	de 4f       	sbci	r29, 0xFE	; 254
   19ff6:	48 80       	ld	r4, Y
   19ff8:	59 80       	ldd	r5, Y+1	; 0x01
   19ffa:	6a 80       	ldd	r6, Y+2	; 0x02
   19ffc:	7b 80       	ldd	r7, Y+3	; 0x03
   19ffe:	c2 52       	subi	r28, 0x22	; 34
   1a000:	d1 40       	sbci	r29, 0x01	; 1
   1a002:	48 0c       	add	r4, r8
   1a004:	59 1c       	adc	r5, r9
   1a006:	6a 1c       	adc	r6, r10
        ++count;
    }

    // File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   1a008:	7b 1c       	adc	r7, r11
   1a00a:	c2 5e       	subi	r28, 0xE2	; 226
   1a00c:	de 4f       	sbci	r29, 0xFE	; 254
   1a00e:	28 81       	ld	r18, Y
   1a010:	39 81       	ldd	r19, Y+1	; 0x01
   1a012:	4a 81       	ldd	r20, Y+2	; 0x02
   1a014:	5b 81       	ldd	r21, Y+3	; 0x03
   1a016:	ce 51       	subi	r28, 0x1E	; 30
   1a018:	d1 40       	sbci	r29, 0x01	; 1
   1a01a:	82 16       	cp	r8, r18
   1a01c:	93 06       	cpc	r9, r19
   1a01e:	a4 06       	cpc	r10, r20
   1a020:	b5 06       	cpc	r11, r21
   1a022:	0c f0       	brlt	.+2      	; 0x1a026 <lif_create_volume+0x4d6>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   1a024:	53 c0       	rjmp	.+166    	; 0x1a0cc <lif_create_volume+0x57c>
   1a026:	00 e0       	ldi	r16, 0x00	; 0
   1a028:	11 e0       	ldi	r17, 0x01	; 1
   1a02a:	ca 5e       	subi	r28, 0xEA	; 234
   1a02c:	de 4f       	sbci	r29, 0xFE	; 254
   1a02e:	28 81       	ld	r18, Y
   1a030:	39 81       	ldd	r19, Y+1	; 0x01
   1a032:	4a 81       	ldd	r20, Y+2	; 0x02
   1a034:	5b 81       	ldd	r21, Y+3	; 0x03
   1a036:	c6 51       	subi	r28, 0x16	; 22
   1a038:	d1 40       	sbci	r29, 0x01	; 1
   1a03a:	be 01       	movw	r22, r28
   1a03c:	6c 5e       	subi	r22, 0xEC	; 236
   1a03e:	7f 4f       	sbci	r23, 0xFF	; 255
   1a040:	c7 01       	movw	r24, r14
   1a042:	0e 94 dc c2 	call	0x185b8	; 0x185b8 <lif_write>
   1a046:	09 2e       	mov	r0, r25
   1a048:	00 0c       	add	r0, r0
   1a04a:	aa 0b       	sbc	r26, r26
        if(size < LIF_SECTOR_SIZE)
   1a04c:	bb 0b       	sbc	r27, r27
   1a04e:	8f 3f       	cpi	r24, 0xFF	; 255
   1a050:	91 05       	cpc	r25, r1
   1a052:	a1 05       	cpc	r26, r1
   1a054:	b1 05       	cpc	r27, r1
   1a056:	09 f0       	breq	.+2      	; 0x1a05a <lif_create_volume+0x50a>
   1a058:	0c f4       	brge	.+2      	; 0x1a05c <lif_create_volume+0x50c>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   1a05a:	4f c0       	rjmp	.+158    	; 0x1a0fa <lif_create_volume+0x5aa>
   1a05c:	ca 5e       	subi	r28, 0xEA	; 234
   1a05e:	de 4f       	sbci	r29, 0xFE	; 254
   1a060:	28 81       	ld	r18, Y
   1a062:	39 81       	ldd	r19, Y+1	; 0x01
   1a064:	4a 81       	ldd	r20, Y+2	; 0x02
   1a066:	5b 81       	ldd	r21, Y+3	; 0x03
   1a068:	c6 51       	subi	r28, 0x16	; 22
   1a06a:	d1 40       	sbci	r29, 0x01	; 1
   1a06c:	28 0f       	add	r18, r24
   1a06e:	39 1f       	adc	r19, r25
   1a070:	4a 1f       	adc	r20, r26
   1a072:	5b 1f       	adc	r21, r27
   1a074:	ca 5e       	subi	r28, 0xEA	; 234
   1a076:	de 4f       	sbci	r29, 0xFE	; 254
   1a078:	28 83       	st	Y, r18
   1a07a:	39 83       	std	Y+1, r19	; 0x01
   1a07c:	4a 83       	std	Y+2, r20	; 0x02
   1a07e:	5b 83       	std	Y+3, r21	; 0x03
   1a080:	c6 51       	subi	r28, 0x16	; 22
        if((count % 100) == 0)
   1a082:	d1 40       	sbci	r29, 0x01	; 1
   1a084:	c3 01       	movw	r24, r6
   1a086:	b2 01       	movw	r22, r4
   1a088:	24 e6       	ldi	r18, 0x64	; 100
   1a08a:	30 e0       	ldi	r19, 0x00	; 0
   1a08c:	40 e0       	ldi	r20, 0x00	; 0
   1a08e:	50 e0       	ldi	r21, 0x00	; 0
   1a090:	0e 94 b9 e4 	call	0x1c972	; 0x1c972 <__divmodsi4>
   1a094:	67 2b       	or	r22, r23
   1a096:	68 2b       	or	r22, r24
   1a098:	69 2b       	or	r22, r25
            printf("\tWrote: %ld\r", count);
   1a09a:	91 f4       	brne	.+36     	; 0x1a0c0 <lif_create_volume+0x570>
   1a09c:	ed b7       	in	r30, 0x3d	; 61
   1a09e:	fe b7       	in	r31, 0x3e	; 62
   1a0a0:	44 82       	std	Z+4, r4	; 0x04
   1a0a2:	55 82       	std	Z+5, r5	; 0x05
   1a0a4:	66 82       	std	Z+6, r6	; 0x06
   1a0a6:	77 82       	std	Z+7, r7	; 0x07
   1a0a8:	c6 5e       	subi	r28, 0xE6	; 230
   1a0aa:	de 4f       	sbci	r29, 0xFE	; 254
   1a0ac:	28 81       	ld	r18, Y
   1a0ae:	39 81       	ldd	r19, Y+1	; 0x01
   1a0b0:	4a 81       	ldd	r20, Y+2	; 0x02
   1a0b2:	ca 51       	subi	r28, 0x1A	; 26
   1a0b4:	d1 40       	sbci	r29, 0x01	; 1
   1a0b6:	21 83       	std	Z+1, r18	; 0x01
   1a0b8:	32 83       	std	Z+2, r19	; 0x02
   1a0ba:	43 83       	std	Z+3, r20	; 0x03
   1a0bc:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
        ++count;
    }

    // File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   1a0c0:	ff ef       	ldi	r31, 0xFF	; 255
   1a0c2:	8f 1a       	sub	r8, r31
   1a0c4:	9f 0a       	sbc	r9, r31
   1a0c6:	af 0a       	sbc	r10, r31
   1a0c8:	bf 0a       	sbc	r11, r31
        offset += size;
        if((count % 100) == 0)
            printf("\tWrote: %ld\r", count);
        ++count;
    }
    printf("\tWrote: %ld\n", count);
   1a0ca:	93 cf       	rjmp	.-218    	; 0x19ff2 <lif_create_volume+0x4a2>
   1a0cc:	ed b7       	in	r30, 0x3d	; 61
   1a0ce:	fe b7       	in	r31, 0x3e	; 62
   1a0d0:	44 82       	std	Z+4, r4	; 0x04
   1a0d2:	55 82       	std	Z+5, r5	; 0x05
   1a0d4:	66 82       	std	Z+6, r6	; 0x06
   1a0d6:	77 82       	std	Z+7, r7	; 0x07
   1a0d8:	89 e2       	ldi	r24, 0x29	; 41
   1a0da:	9c e3       	ldi	r25, 0x3C	; 60
   1a0dc:	a0 e0       	ldi	r26, 0x00	; 0
   1a0de:	81 83       	std	Z+1, r24	; 0x01
   1a0e0:	92 83       	std	Z+2, r25	; 0x02
   1a0e2:	a3 83       	std	Z+3, r26	; 0x03
   1a0e4:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
/// @return void
MEMSPACE
void lif_rewinddir(lif_t *LIF)
{
    // Directory index
    LIF->dirindex = -1;
   1a0e8:	8f ef       	ldi	r24, 0xFF	; 255
   1a0ea:	9f ef       	ldi	r25, 0xFF	; 255
   1a0ec:	f7 01       	movw	r30, r14
    printf("\tWrote: %ld\n", count);

    lif_rewinddir(LIF);

    // As a sanity check verify basic values
    if( !lif_check_volume(LIF) )
   1a0ee:	91 a3       	std	Z+33, r25	; 0x21
   1a0f0:	80 a3       	std	Z+32, r24	; 0x20
   1a0f2:	c7 01       	movw	r24, r14
   1a0f4:	38 d8       	rcall	.-3984   	; 0x19166 <lif_check_volume>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a0f6:	89 2b       	or	r24, r25
   1a0f8:	19 f4       	brne	.+6      	; 0x1a100 <lif_create_volume+0x5b0>
   1a0fa:	c7 01       	movw	r24, r14
   1a0fc:	b8 da       	rcall	.-2704   	; 0x1966e <lif_close_volume>
        lif_closedir(LIF);
        return(NULL);
    }

    // Scan directory and verify values
    if( !lif_updatefree(LIF))
   1a0fe:	08 c0       	rjmp	.+16     	; 0x1a110 <lif_create_volume+0x5c0>
   1a100:	c7 01       	movw	r24, r14
   1a102:	1e dc       	rcall	.-1988   	; 0x19940 <lif_updatefree>
   1a104:	6c 01       	movw	r12, r24
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a106:	89 2b       	or	r24, r25
   1a108:	31 f4       	brne	.+12     	; 0x1a116 <lif_create_volume+0x5c6>
   1a10a:	c7 01       	movw	r24, r14

    // Scan directory and verify values
    if( !lif_updatefree(LIF))
    {
        lif_closedir(LIF);
        return(NULL);
   1a10c:	b0 da       	rcall	.-2720   	; 0x1966e <lif_close_volume>

    time_t t = time(NULL);

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
    if(LIF == NULL)
        return(NULL);
   1a10e:	04 c0       	rjmp	.+8      	; 0x1a118 <lif_create_volume+0x5c8>
   1a110:	c1 2c       	mov	r12, r1
   1a112:	d1 2c       	mov	r13, r1
   1a114:	01 c0       	rjmp	.+2      	; 0x1a118 <lif_create_volume+0x5c8>
        lif_closedir(LIF);
        return(NULL);
    }

    return(LIF);
}
   1a116:	67 01       	movw	r12, r14
   1a118:	c6 01       	movw	r24, r12
   1a11a:	c7 5d       	subi	r28, 0xD7	; 215
   1a11c:	de 4f       	sbci	r29, 0xFE	; 254
   1a11e:	e2 e1       	ldi	r30, 0x12	; 18
   1a120:	0c 94 35 e5 	jmp	0x1ca6a	; 0x1ca6a <__epilogue_restores__>

0001a124 <lif_newdir>:
/// @param[in] *LIF: LIF pointer
/// @param[in] sectors: try to find specified free space
/// @return index or free record or -1 on error
MEMSPACE
int lif_newdir(lif_t *LIF, long sectors)
{
   1a124:	ad e1       	ldi	r26, 0x1D	; 29
   1a126:	b0 e0       	ldi	r27, 0x00	; 0
   1a128:	e8 e9       	ldi	r30, 0x98	; 152
   1a12a:	f0 ed       	ldi	r31, 0xD0	; 208
   1a12c:	0c 94 19 e5 	jmp	0x1ca32	; 0x1ca32 <__prologue_saves__>
   1a130:	9d 8f       	std	Y+29, r25	; 0x1d
   1a132:	8c 8f       	std	Y+28, r24	; 0x1c
   1a134:	4a 01       	movw	r8, r20
   1a136:	5b 01       	movw	r10, r22

    // Directory index
    index = 0;

    // Start of free space
    start = LIF->filestart;
   1a138:	fc 01       	movw	r30, r24
   1a13a:	c4 84       	ldd	r12, Z+12	; 0x0c
   1a13c:	d5 84       	ldd	r13, Z+13	; 0x0d
   1a13e:	e6 84       	ldd	r14, Z+14	; 0x0e

    // Update all file information
    if(lif_updatefree(LIF) == NULL)
   1a140:	f7 84       	ldd	r15, Z+15	; 0x0f
   1a142:	fe db       	rcall	.-2052   	; 0x19940 <lif_updatefree>
   1a144:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a146:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a148:	40 8d       	ldd	r20, Z+24	; 0x18
   1a14a:	51 8d       	ldd	r21, Z+25	; 0x19
   1a14c:	62 8d       	ldd	r22, Z+26	; 0x1a
   1a14e:	73 8d       	ldd	r23, Z+27	; 0x1b
   1a150:	89 2b       	or	r24, r25
    {
        printf("lif_newdir: not enough free space:[%ld] for size:[%ld]\n", (long)LIF->freesectors, (long) sectors);
   1a152:	99 f4       	brne	.+38     	; 0x1a17a <lif_newdir+0x56>
   1a154:	ed b7       	in	r30, 0x3d	; 61
   1a156:	fe b7       	in	r31, 0x3e	; 62
   1a158:	80 86       	std	Z+8, r8	; 0x08
   1a15a:	91 86       	std	Z+9, r9	; 0x09
   1a15c:	a2 86       	std	Z+10, r10	; 0x0a
   1a15e:	b3 86       	std	Z+11, r11	; 0x0b
   1a160:	44 83       	std	Z+4, r20	; 0x04
   1a162:	55 83       	std	Z+5, r21	; 0x05
   1a164:	66 83       	std	Z+6, r22	; 0x06
   1a166:	77 83       	std	Z+7, r23	; 0x07
   1a168:	8a e4       	ldi	r24, 0x4A	; 74
   1a16a:	9b e3       	ldi	r25, 0x3B	; 59
   1a16c:	a0 e0       	ldi	r26, 0x00	; 0
   1a16e:	81 83       	std	Z+1, r24	; 0x01
   1a170:	92 83       	std	Z+2, r25	; 0x02
   1a172:	a3 83       	std	Z+3, r26	; 0x03
   1a174:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
        return(-1);
    }

    // Not enough room ?
    if(sectors > (long)LIF->freesectors)
   1a178:	2f c1       	rjmp	.+606    	; 0x1a3d8 <lif_newdir+0x2b4>
   1a17a:	48 15       	cp	r20, r8
   1a17c:	59 05       	cpc	r21, r9
   1a17e:	6a 05       	cpc	r22, r10
   1a180:	7b 05       	cpc	r23, r11
   1a182:	c4 f0       	brlt	.+48     	; 0x1a1b4 <lif_newdir+0x90>
   1a184:	44 24       	eor	r4, r4
   1a186:	43 94       	inc	r4
   1a188:	51 2c       	mov	r5, r1
   1a18a:	61 2c       	mov	r6, r1
#endif
            break;
        }

        // We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   1a18c:	71 2c       	mov	r7, r1
   1a18e:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a190:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1a192:	86 5a       	subi	r24, 0xA6	; 166
   1a194:	9f 4f       	sbci	r25, 0xFF	; 255
   1a196:	9d 8b       	std	Y+21, r25	; 0x15
   1a198:	8c 8b       	std	Y+20, r24	; 0x14
   1a19a:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a19c:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a19e:	e4 5a       	subi	r30, 0xA4	; 164
   1a1a0:	ff 4f       	sbci	r31, 0xFF	; 255
   1a1a2:	fb 8b       	std	Y+19, r31	; 0x13
                freestate = 0;  // Try again
        }
        
        // Computed start of next record
        // Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   1a1a4:	ea 8b       	std	Y+18, r30	; 0x12
   1a1a6:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a1a8:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1a1aa:	80 5a       	subi	r24, 0xA0	; 160
   1a1ac:	9f 4f       	sbci	r25, 0xFF	; 255
   1a1ae:	9f 8b       	std	Y+23, r25	; 0x17
   1a1b0:	8e 8b       	std	Y+22, r24	; 0x16
    }

    // Not enough room ?
    if(sectors > (long)LIF->freesectors)
    {
        printf("lif_newdir: not enough free space:[%ld]\n", (long)LIF->freesectors);
   1a1b2:	21 c0       	rjmp	.+66     	; 0x1a1f6 <lif_newdir+0xd2>
   1a1b4:	ed b7       	in	r30, 0x3d	; 61
   1a1b6:	fe b7       	in	r31, 0x3e	; 62
   1a1b8:	44 83       	std	Z+4, r20	; 0x04
   1a1ba:	55 83       	std	Z+5, r21	; 0x05
   1a1bc:	66 83       	std	Z+6, r22	; 0x06
   1a1be:	77 83       	std	Z+7, r23	; 0x07
   1a1c0:	81 e2       	ldi	r24, 0x21	; 33
   1a1c2:	9b e3       	ldi	r25, 0x3B	; 59
   1a1c4:	a0 e0       	ldi	r26, 0x00	; 0
   1a1c6:	81 83       	std	Z+1, r24	; 0x01
   1a1c8:	92 83       	std	Z+2, r25	; 0x02
   1a1ca:	a3 83       	std	Z+3, r26	; 0x03
   1a1cc:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
#endif
            break;
        }

        // We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   1a1d0:	03 c1       	rjmp	.+518    	; 0x1a3d8 <lif_newdir+0x2b4>
   1a1d2:	ec 89       	ldd	r30, Y+20	; 0x14
   1a1d4:	fd 89       	ldd	r31, Y+21	; 0x15
   1a1d6:	80 81       	ld	r24, Z
   1a1d8:	91 81       	ldd	r25, Z+1	; 0x01
   1a1da:	8f 3f       	cpi	r24, 0xFF	; 255
   1a1dc:	ff ef       	ldi	r31, 0xFF	; 255
   1a1de:	9f 07       	cpc	r25, r31
            return(index);
        }


        // PURGED records
        if(LIF->DIR.FileType == 0)
   1a1e0:	a1 f0       	breq	.+40     	; 0x1a20a <lif_newdir+0xe6>
   1a1e2:	89 2b       	or	r24, r25
   1a1e4:	09 f0       	breq	.+2      	; 0x1a1e8 <lif_newdir+0xc4>
        {
            if(freestate == 0)
   1a1e6:	ce c0       	rjmp	.+412    	; 0x1a384 <lif_newdir+0x260>
   1a1e8:	61 14       	cp	r6, r1
   1a1ea:	71 04       	cpc	r7, r1
   1a1ec:	09 f4       	brne	.+2      	; 0x1a1f0 <lif_newdir+0xcc>
   1a1ee:	c1 c0       	rjmp	.+386    	; 0x1a372 <lif_newdir+0x24e>
   1a1f0:	ff ef       	ldi	r31, 0xFF	; 255
   1a1f2:	4f 1a       	sub	r4, r31
   1a1f4:	5f 0a       	sbc	r5, r31
   1a1f6:	82 01       	movw	r16, r4
   1a1f8:	01 50       	subi	r16, 0x01	; 1

    // Update free space and EOF pointers
    while(1)
    {
        // Write new EOF after current one
        if( !lif_readdirindex(LIF,index) )
   1a1fa:	11 09       	sbc	r17, r1
   1a1fc:	b8 01       	movw	r22, r16
   1a1fe:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a200:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1a202:	c3 da       	rcall	.-2682   	; 0x1978a <lif_readdirindex>
   1a204:	89 2b       	or	r24, r25
   1a206:	29 f7       	brne	.-54     	; 0x1a1d2 <lif_newdir+0xae>
        if(LIF->DIR.FileType == 0xffff)
        {

            // Was enough free space found in purged area ?
            // Do NOT need to update EOF!
            if(freestate == 2)
   1a208:	e7 c0       	rjmp	.+462    	; 0x1a3d8 <lif_newdir+0x2b4>
   1a20a:	22 e0       	ldi	r18, 0x02	; 2
   1a20c:	62 16       	cp	r6, r18
   1a20e:	71 04       	cpc	r7, r1
   1a210:	09 f0       	breq	.+2      	; 0x1a214 <lif_newdir+0xf0>
            {
                // Update free pace for new file
                lif_dir_clear(LIF);
   1a212:	46 c0       	rjmp	.+140    	; 0x1a2a0 <lif_newdir+0x17c>
   1a214:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a216:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1a218:	0e 94 de c6 	call	0x18dbc	; 0x18dbc <lif_dir_clear>
                LIF->DIR.FileStartSector = freestart;
   1a21c:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a21e:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a220:	e4 5a       	subi	r30, 0xA4	; 164
   1a222:	ff 4f       	sbci	r31, 0xFF	; 255
   1a224:	88 8d       	ldd	r24, Y+24	; 0x18
   1a226:	80 83       	st	Z, r24
   1a228:	99 8d       	ldd	r25, Y+25	; 0x19
   1a22a:	91 83       	std	Z+1, r25	; 0x01
   1a22c:	2a 8d       	ldd	r18, Y+26	; 0x1a
   1a22e:	22 83       	std	Z+2, r18	; 0x02
   1a230:	8b 8d       	ldd	r24, Y+27	; 0x1b
                LIF->DIR.FileSectors = sectors;
   1a232:	83 83       	std	Z+3, r24	; 0x03
   1a234:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a236:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a238:	e0 5a       	subi	r30, 0xA0	; 160
   1a23a:	ff 4f       	sbci	r31, 0xFF	; 255
   1a23c:	80 82       	st	Z, r8
   1a23e:	91 82       	std	Z+1, r9	; 0x01
   1a240:	a2 82       	std	Z+2, r10	; 0x02
                LIF->usedsectors += sectors;
   1a242:	b3 82       	std	Z+3, r11	; 0x03
   1a244:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a246:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a248:	84 89       	ldd	r24, Z+20	; 0x14
   1a24a:	95 89       	ldd	r25, Z+21	; 0x15
   1a24c:	a6 89       	ldd	r26, Z+22	; 0x16
   1a24e:	b7 89       	ldd	r27, Z+23	; 0x17
   1a250:	88 0d       	add	r24, r8
   1a252:	99 1d       	adc	r25, r9
   1a254:	aa 1d       	adc	r26, r10
   1a256:	bb 1d       	adc	r27, r11
   1a258:	84 8b       	std	Z+20, r24	; 0x14
   1a25a:	95 8b       	std	Z+21, r25	; 0x15
   1a25c:	a6 8b       	std	Z+22, r26	; 0x16
                LIF->freesectors -= sectors;
   1a25e:	b7 8b       	std	Z+23, r27	; 0x17
   1a260:	80 8d       	ldd	r24, Z+24	; 0x18
   1a262:	91 8d       	ldd	r25, Z+25	; 0x19
   1a264:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a266:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a268:	88 19       	sub	r24, r8
   1a26a:	99 09       	sbc	r25, r9
   1a26c:	aa 09       	sbc	r26, r10
   1a26e:	bb 09       	sbc	r27, r11
   1a270:	80 8f       	std	Z+24, r24	; 0x18
   1a272:	91 8f       	std	Z+25, r25	; 0x19
   1a274:	a2 8f       	std	Z+26, r26	; 0x1a
                LIF->files++;
   1a276:	b3 8f       	std	Z+27, r27	; 0x1b
   1a278:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a27a:	95 8d       	ldd	r25, Z+29	; 0x1d
   1a27c:	01 96       	adiw	r24, 0x01	; 1
   1a27e:	95 8f       	std	Z+29, r25	; 0x1d
                LIF->purged--;
   1a280:	84 8f       	std	Z+28, r24	; 0x1c
   1a282:	86 8d       	ldd	r24, Z+30	; 0x1e
   1a284:	97 8d       	ldd	r25, Z+31	; 0x1f
   1a286:	01 97       	sbiw	r24, 0x01	; 1
   1a288:	97 8f       	std	Z+31, r25	; 0x1f
                LIF->dirindex = freeindex;
   1a28a:	86 8f       	std	Z+30, r24	; 0x1e
                // Write new record (FileType is still EOF until data is updated by user)
                if( !lif_writedirindex(LIF,freeindex))
   1a28c:	20 a2       	std	Z+32, r2	; 0x20
   1a28e:	31 a2       	std	Z+33, r3	; 0x21
   1a290:	b1 01       	movw	r22, r2
   1a292:	cf 01       	movw	r24, r30
   1a294:	e1 da       	rcall	.-2622   	; 0x19858 <lif_writedirindex>
   1a296:	89 2b       	or	r24, r25
   1a298:	09 f4       	brne	.+2      	; 0x1a29c <lif_newdir+0x178>
   1a29a:	9e c0       	rjmp	.+316    	; 0x1a3d8 <lif_newdir+0x2b4>
                    break;
                }
                return(freeindex);
            }

            if(debuglevel & 0x400)
   1a29c:	c1 01       	movw	r24, r2
   1a29e:	9e c0       	rjmp	.+316    	; 0x1a3dc <lif_newdir+0x2b8>
   1a2a0:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1a2a4:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
                printf("lif_newdir: index:[%d] adding at:[%ld]to purged space:[%ld] sectors, free:[%ld]\n", 
   1a2a8:	92 ff       	sbrs	r25, 2
   1a2aa:	1e c0       	rjmp	.+60     	; 0x1a2e8 <lif_newdir+0x1c4>
   1a2ac:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a2ae:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a2b0:	80 8d       	ldd	r24, Z+24	; 0x18
   1a2b2:	91 8d       	ldd	r25, Z+25	; 0x19
   1a2b4:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a2b6:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a2b8:	ed b7       	in	r30, 0x3d	; 61
   1a2ba:	fe b7       	in	r31, 0x3e	; 62
   1a2bc:	86 87       	std	Z+14, r24	; 0x0e
   1a2be:	97 87       	std	Z+15, r25	; 0x0f
   1a2c0:	a0 8b       	std	Z+16, r26	; 0x10
   1a2c2:	b1 8b       	std	Z+17, r27	; 0x11
   1a2c4:	82 86       	std	Z+10, r8	; 0x0a
   1a2c6:	93 86       	std	Z+11, r9	; 0x0b
   1a2c8:	a4 86       	std	Z+12, r10	; 0x0c
   1a2ca:	b5 86       	std	Z+13, r11	; 0x0d
   1a2cc:	c6 82       	std	Z+6, r12	; 0x06
   1a2ce:	d7 82       	std	Z+7, r13	; 0x07
   1a2d0:	e0 86       	std	Z+8, r14	; 0x08
   1a2d2:	f1 86       	std	Z+9, r15	; 0x09
   1a2d4:	15 83       	std	Z+5, r17	; 0x05
   1a2d6:	04 83       	std	Z+4, r16	; 0x04
   1a2d8:	80 ed       	ldi	r24, 0xD0	; 208
   1a2da:	9a e3       	ldi	r25, 0x3A	; 58
   1a2dc:	a0 e0       	ldi	r26, 0x00	; 0
   1a2de:	81 83       	std	Z+1, r24	; 0x01
   1a2e0:	92 83       	std	Z+2, r25	; 0x02
   1a2e2:	a3 83       	std	Z+3, r26	; 0x03
                    (int) index,(long)start,(long) sectors, (long)LIF->freesectors);

            // Write new EOF after current one
            if( !lif_writedirEOF(LIF,index+1) )
   1a2e4:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   1a2e8:	b8 01       	movw	r22, r16
   1a2ea:	6f 5f       	subi	r22, 0xFF	; 255
   1a2ec:	7f 4f       	sbci	r23, 0xFF	; 255
   1a2ee:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a2f0:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1a2f2:	0e db       	rcall	.-2532   	; 0x19910 <lif_writedirEOF>
   1a2f4:	89 2b       	or	r24, r25
            {
                break;
            }

            lif_dir_clear(LIF);
   1a2f6:	09 f4       	brne	.+2      	; 0x1a2fa <lif_newdir+0x1d6>
   1a2f8:	6f c0       	rjmp	.+222    	; 0x1a3d8 <lif_newdir+0x2b4>
   1a2fa:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a2fc:	9d 8d       	ldd	r25, Y+29	; 0x1d
            LIF->DIR.FileStartSector = start;
   1a2fe:	0e 94 de c6 	call	0x18dbc	; 0x18dbc <lif_dir_clear>
   1a302:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a304:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a306:	e4 5a       	subi	r30, 0xA4	; 164
   1a308:	ff 4f       	sbci	r31, 0xFF	; 255
   1a30a:	c0 82       	st	Z, r12
   1a30c:	d1 82       	std	Z+1, r13	; 0x01
            LIF->DIR.FileSectors = sectors;
   1a30e:	e2 82       	std	Z+2, r14	; 0x02
   1a310:	f3 82       	std	Z+3, r15	; 0x03
   1a312:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a314:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a316:	e0 5a       	subi	r30, 0xA0	; 160
   1a318:	ff 4f       	sbci	r31, 0xFF	; 255
   1a31a:	80 82       	st	Z, r8
   1a31c:	91 82       	std	Z+1, r9	; 0x01
            LIF->usedsectors += sectors;
   1a31e:	a2 82       	std	Z+2, r10	; 0x02
   1a320:	b3 82       	std	Z+3, r11	; 0x03
   1a322:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a324:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a326:	84 89       	ldd	r24, Z+20	; 0x14
   1a328:	95 89       	ldd	r25, Z+21	; 0x15
   1a32a:	a6 89       	ldd	r26, Z+22	; 0x16
   1a32c:	b7 89       	ldd	r27, Z+23	; 0x17
   1a32e:	88 0d       	add	r24, r8
   1a330:	99 1d       	adc	r25, r9
   1a332:	aa 1d       	adc	r26, r10
   1a334:	bb 1d       	adc	r27, r11
   1a336:	84 8b       	std	Z+20, r24	; 0x14
   1a338:	95 8b       	std	Z+21, r25	; 0x15
            LIF->freesectors -= sectors;
   1a33a:	a6 8b       	std	Z+22, r26	; 0x16
   1a33c:	b7 8b       	std	Z+23, r27	; 0x17
   1a33e:	80 8d       	ldd	r24, Z+24	; 0x18
   1a340:	91 8d       	ldd	r25, Z+25	; 0x19
   1a342:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a344:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a346:	88 19       	sub	r24, r8
   1a348:	99 09       	sbc	r25, r9
   1a34a:	aa 09       	sbc	r26, r10
   1a34c:	bb 09       	sbc	r27, r11
   1a34e:	80 8f       	std	Z+24, r24	; 0x18
   1a350:	91 8f       	std	Z+25, r25	; 0x19
            LIF->files++;
   1a352:	a2 8f       	std	Z+26, r26	; 0x1a
   1a354:	b3 8f       	std	Z+27, r27	; 0x1b
   1a356:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a358:	95 8d       	ldd	r25, Z+29	; 0x1d
            LIF->dirindex = index;
   1a35a:	01 96       	adiw	r24, 0x01	; 1
            // Write new record (FileType is still EOF until data is updated by user )
            if( !lif_writedirindex(LIF,index))
   1a35c:	95 8f       	std	Z+29, r25	; 0x1d
   1a35e:	84 8f       	std	Z+28, r24	; 0x1c
   1a360:	11 a3       	std	Z+33, r17	; 0x21
   1a362:	00 a3       	std	Z+32, r16	; 0x20
   1a364:	b8 01       	movw	r22, r16
   1a366:	cf 01       	movw	r24, r30
   1a368:	77 da       	rcall	.-2834   	; 0x19858 <lif_writedirindex>
   1a36a:	89 2b       	or	r24, r25


        // PURGED records
        if(LIF->DIR.FileType == 0)
        {
            if(freestate == 0)
   1a36c:	a9 f1       	breq	.+106    	; 0x1a3d8 <lif_newdir+0x2b4>
   1a36e:	c8 01       	movw	r24, r16
   1a370:	35 c0       	rjmp	.+106    	; 0x1a3dc <lif_newdir+0x2b8>
   1a372:	c8 8e       	std	Y+24, r12	; 0x18
   1a374:	d9 8e       	std	Y+25, r13	; 0x19
            {
                freeindex = index;
                freestart = start;
                freestate = 1;
   1a376:	ea 8e       	std	Y+26, r14	; 0x1a
   1a378:	fb 8e       	std	Y+27, r15	; 0x1b
   1a37a:	18 01       	movw	r2, r16
            }
            ++index;
            continue;
   1a37c:	66 24       	eor	r6, r6
        }
        

        // VALID record
        if(freestate == 1)
   1a37e:	63 94       	inc	r6
   1a380:	71 2c       	mov	r7, r1
   1a382:	36 cf       	rjmp	.-404    	; 0x1a1f0 <lif_newdir+0xcc>
   1a384:	f1 e0       	ldi	r31, 0x01	; 1
        {
            long freesectors;
            // Compute sectors of purged space between valid records
            // Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
   1a386:	6f 16       	cp	r6, r31
   1a388:	71 04       	cpc	r7, r1
   1a38a:	a9 f4       	brne	.+42     	; 0x1a3b6 <lif_newdir+0x292>
   1a38c:	ea 89       	ldd	r30, Y+18	; 0x12
   1a38e:	fb 89       	ldd	r31, Y+19	; 0x13
   1a390:	80 81       	ld	r24, Z
   1a392:	91 81       	ldd	r25, Z+1	; 0x01
   1a394:	a2 81       	ldd	r26, Z+2	; 0x02
   1a396:	b3 81       	ldd	r27, Z+3	; 0x03
   1a398:	8c 19       	sub	r24, r12
   1a39a:	9d 09       	sbc	r25, r13
   1a39c:	ae 09       	sbc	r26, r14
   1a39e:	bf 09       	sbc	r27, r15
   1a3a0:	88 15       	cp	r24, r8
   1a3a2:	99 05       	cpc	r25, r9
                freestate = 2;      // Found free space in purged record
            else
                freestate = 0;  // Try again
   1a3a4:	aa 05       	cpc	r26, r10
   1a3a6:	bb 05       	cpc	r27, r11
   1a3a8:	1c f4       	brge	.+6      	; 0x1a3b0 <lif_newdir+0x28c>
            long freesectors;
            // Compute sectors of purged space between valid records
            // Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
                freestate = 2;      // Found free space in purged record
   1a3aa:	61 2c       	mov	r6, r1
   1a3ac:	71 2c       	mov	r7, r1
   1a3ae:	03 c0       	rjmp	.+6      	; 0x1a3b6 <lif_newdir+0x292>
                freestate = 0;  // Try again
        }
        
        // Computed start of next record
        // Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   1a3b0:	82 e0       	ldi	r24, 0x02	; 2
   1a3b2:	68 2e       	mov	r6, r24
   1a3b4:	71 2c       	mov	r7, r1
   1a3b6:	ea 89       	ldd	r30, Y+18	; 0x12
   1a3b8:	fb 89       	ldd	r31, Y+19	; 0x13
   1a3ba:	c0 80       	ld	r12, Z
   1a3bc:	d1 80       	ldd	r13, Z+1	; 0x01
   1a3be:	e2 80       	ldd	r14, Z+2	; 0x02
   1a3c0:	f3 80       	ldd	r15, Z+3	; 0x03
   1a3c2:	ee 89       	ldd	r30, Y+22	; 0x16
   1a3c4:	ff 89       	ldd	r31, Y+23	; 0x17
   1a3c6:	80 81       	ld	r24, Z
   1a3c8:	91 81       	ldd	r25, Z+1	; 0x01
   1a3ca:	a2 81       	ldd	r26, Z+2	; 0x02
   1a3cc:	b3 81       	ldd	r27, Z+3	; 0x03
   1a3ce:	c8 0e       	add	r12, r24
   1a3d0:	d9 1e       	adc	r13, r25
        ++index;
    }
    // ERROR
    return(-1);
   1a3d2:	ea 1e       	adc	r14, r26
   1a3d4:	fb 1e       	adc	r15, r27
}
   1a3d6:	0c cf       	rjmp	.-488    	; 0x1a1f0 <lif_newdir+0xcc>
   1a3d8:	8f ef       	ldi	r24, 0xFF	; 255
   1a3da:	9f ef       	ldi	r25, 0xFF	; 255
   1a3dc:	6d 96       	adiw	r28, 0x1d	; 29
   1a3de:	e2 e1       	ldi	r30, 0x12	; 18
   1a3e0:	0c 94 35 e5 	jmp	0x1ca6a	; 0x1ca6a <__epilogue_restores__>

0001a3e4 <lif_open_volume>:
/// @param[in] *name: file name of LIF image
/// @param[in] *mode: "rb" = read, "rb+" = read/write
/// @return LIF pointer on sucesses or NULL on error
MEMSPACE
lif_t *lif_open_volume(char *name, char *mode)
{
   1a3e4:	a9 e3       	ldi	r26, 0x39	; 57
   1a3e6:	b1 e0       	ldi	r27, 0x01	; 1
   1a3e8:	e8 ef       	ldi	r30, 0xF8	; 248
   1a3ea:	f1 ed       	ldi	r31, 0xD1	; 209
   1a3ec:	0c 94 1f e5 	jmp	0x1ca3e	; 0x1ca3e <__prologue_saves__+0xc>
   1a3f0:	6c 01       	movw	r12, r24
   1a3f2:	8b 01       	movw	r16, r22
    lif_t *LIF;
    stat_t sb, *sp;
    uint8_t buffer[LIF_SECTOR_SIZE];


    sp = lif_stat(name, (stat_t *)&sb);
   1a3f4:	be 01       	movw	r22, r28
   1a3f6:	66 5f       	subi	r22, 0xF6	; 246
   1a3f8:	7e 4f       	sbci	r23, 0xFE	; 254
   1a3fa:	0e 94 31 c2 	call	0x18462	; 0x18462 <lif_stat>
   1a3fe:	5c 01       	movw	r10, r24
    if(sp == NULL)
   1a400:	00 97       	sbiw	r24, 0x00	; 0
   1a402:	f9 f0       	breq	.+62     	; 0x1a442 <lif_open_volume+0x5e>
        return(NULL);


    // To read LIF volume we must have at minimum two sectors
    // volume header a directory entry
    if(sp->st_size < (long)LIF_SECTOR_SIZE*2)
   1a404:	fc 01       	movw	r30, r24
   1a406:	80 8d       	ldd	r24, Z+24	; 0x18
   1a408:	91 8d       	ldd	r25, Z+25	; 0x19
   1a40a:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a40c:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a40e:	81 15       	cp	r24, r1
   1a410:	f2 e0       	ldi	r31, 0x02	; 2
   1a412:	9f 07       	cpc	r25, r31
   1a414:	a1 05       	cpc	r26, r1
   1a416:	b1 05       	cpc	r27, r1
   1a418:	b8 f4       	brcc	.+46     	; 0x1a448 <lif_open_volume+0x64>
    {
        if(debuglevel & 1)
   1a41a:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   1a41e:	20 ff       	sbrs	r18, 0
   1a420:	10 c0       	rjmp	.+32     	; 0x1a442 <lif_open_volume+0x5e>
            printf("lif_open_volume:[%s] error volume header area too small:[%ld]\n", name, (long)sp->st_size);
   1a422:	ed b7       	in	r30, 0x3d	; 61
   1a424:	fe b7       	in	r31, 0x3e	; 62
   1a426:	86 83       	std	Z+6, r24	; 0x06
   1a428:	97 83       	std	Z+7, r25	; 0x07
   1a42a:	a0 87       	std	Z+8, r26	; 0x08
   1a42c:	b1 87       	std	Z+9, r27	; 0x09
   1a42e:	d5 82       	std	Z+5, r13	; 0x05
   1a430:	c4 82       	std	Z+4, r12	; 0x04
   1a432:	81 e9       	ldi	r24, 0x91	; 145
   1a434:	9a e3       	ldi	r25, 0x3A	; 58
   1a436:	a0 e0       	ldi	r26, 0x00	; 0
   1a438:	81 83       	std	Z+1, r24	; 0x01
   1a43a:	92 83       	std	Z+2, r25	; 0x02
   1a43c:	a3 83       	std	Z+3, r26	; 0x03
   1a43e:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
        return(NULL);
   1a442:	00 e0       	ldi	r16, 0x00	; 0
   1a444:	10 e0       	ldi	r17, 0x00	; 0
   1a446:	c2 c0       	rjmp	.+388    	; 0x1a5cc <lif_open_volume+0x1e8>
    }


    // Allocate LIF structure
    LIF = lif_calloc(sizeof(lif_t)+4);
   1a448:	64 e7       	ldi	r22, 0x74	; 116
   1a44a:	70 e0       	ldi	r23, 0x00	; 0
   1a44c:	80 e0       	ldi	r24, 0x00	; 0
   1a44e:	90 e0       	ldi	r25, 0x00	; 0
   1a450:	0e 94 9d c1 	call	0x1833a	; 0x1833a <lif_calloc>
   1a454:	7c 01       	movw	r14, r24
    if(!LIF)
   1a456:	89 2b       	or	r24, r25
   1a458:	a1 f3       	breq	.-24     	; 0x1a442 <lif_open_volume+0x5e>
        return(NULL);

    LIF->name = lif_stralloc(name);
   1a45a:	c6 01       	movw	r24, r12
   1a45c:	0e 94 e8 c1 	call	0x183d0	; 0x183d0 <lif_stralloc>
   1a460:	f7 01       	movw	r30, r14
   1a462:	91 83       	std	Z+1, r25	; 0x01
   1a464:	80 83       	st	Z, r24
    if(!LIF->name)
   1a466:	00 97       	sbiw	r24, 0x00	; 0
   1a468:	09 f4       	brne	.+2      	; 0x1a46c <lif_open_volume+0x88>
   1a46a:	5a c0       	rjmp	.+180    	; 0x1a520 <lif_open_volume+0x13c>
    {
        lif_closedir(LIF);
        return(NULL);
    }
        
    LIF->imagebytes = sp->st_size;
   1a46c:	f5 01       	movw	r30, r10
   1a46e:	80 8c       	ldd	r8, Z+24	; 0x18
   1a470:	91 8c       	ldd	r9, Z+25	; 0x19
   1a472:	a2 8c       	ldd	r10, Z+26	; 0x1a
   1a474:	b3 8c       	ldd	r11, Z+27	; 0x1b
   1a476:	f7 01       	movw	r30, r14
   1a478:	80 86       	std	Z+8, r8	; 0x08
   1a47a:	91 86       	std	Z+9, r9	; 0x09
   1a47c:	a2 86       	std	Z+10, r10	; 0x0a
   1a47e:	b3 86       	std	Z+11, r11	; 0x0b
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a480:	77 27       	eor	r23, r23
   1a482:	6b 2d       	mov	r22, r11
   1a484:	5a 2d       	mov	r21, r10
   1a486:	49 2d       	mov	r20, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a488:	88 20       	and	r8, r8
   1a48a:	21 f0       	breq	.+8      	; 0x1a494 <lif_open_volume+0xb0>
        ++sectors;
   1a48c:	4f 5f       	subi	r20, 0xFF	; 255
   1a48e:	5f 4f       	sbci	r21, 0xFF	; 255
   1a490:	6f 4f       	sbci	r22, 0xFF	; 255
   1a492:	7f 4f       	sbci	r23, 0xFF	; 255
        lif_closedir(LIF);
        return(NULL);
    }
        
    LIF->imagebytes = sp->st_size;
    LIF->sectors = lif_bytes2sectors(sp->st_size);
   1a494:	f7 01       	movw	r30, r14
   1a496:	44 83       	std	Z+4, r20	; 0x04
   1a498:	55 83       	std	Z+5, r21	; 0x05
   1a49a:	66 83       	std	Z+6, r22	; 0x06
   1a49c:	77 83       	std	Z+7, r23	; 0x07

    LIF->fp = lif_open(LIF->name,mode);
   1a49e:	b8 01       	movw	r22, r16
   1a4a0:	0e 94 07 c2 	call	0x1840e	; 0x1840e <lif_open>
   1a4a4:	f7 01       	movw	r30, r14
   1a4a6:	93 83       	std	Z+3, r25	; 0x03
   1a4a8:	82 83       	std	Z+2, r24	; 0x02
    if(!LIF->fp)
   1a4aa:	89 2b       	or	r24, r25
   1a4ac:	c9 f1       	breq	.+114    	; 0x1a520 <lif_open_volume+0x13c>
        return(NULL);
    }
        
        
    // Volume header must be it least one sector
    if( lif_read(LIF, buffer, 0, LIF_SECTOR_SIZE) < LIF_SECTOR_SIZE)
   1a4ae:	00 e0       	ldi	r16, 0x00	; 0
   1a4b0:	11 e0       	ldi	r17, 0x01	; 1
   1a4b2:	20 e0       	ldi	r18, 0x00	; 0
   1a4b4:	30 e0       	ldi	r19, 0x00	; 0
   1a4b6:	a9 01       	movw	r20, r18
   1a4b8:	be 01       	movw	r22, r28
   1a4ba:	66 5f       	subi	r22, 0xF6	; 246
   1a4bc:	7f 4f       	sbci	r23, 0xFF	; 255
   1a4be:	c7 01       	movw	r24, r14
   1a4c0:	0e 94 8b c2 	call	0x18516	; 0x18516 <lif_read>
   1a4c4:	6f 3f       	cpi	r22, 0xFF	; 255
   1a4c6:	71 05       	cpc	r23, r1
   1a4c8:	81 05       	cpc	r24, r1
   1a4ca:	91 05       	cpc	r25, r1
   1a4cc:	09 f0       	breq	.+2      	; 0x1a4d0 <lif_open_volume+0xec>
   1a4ce:	5c f4       	brge	.+22     	; 0x1a4e6 <lif_open_volume+0x102>
    {
        if(debuglevel & 1)
   1a4d0:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1a4d4:	80 ff       	sbrs	r24, 0
   1a4d6:	24 c0       	rjmp	.+72     	; 0x1a520 <lif_open_volume+0x13c>
            printf("lif_open_volume:[%s] error read volume header failed\n", name);
   1a4d8:	ed b7       	in	r30, 0x3d	; 61
   1a4da:	fe b7       	in	r31, 0x3e	; 62
   1a4dc:	d5 82       	std	Z+5, r13	; 0x05
   1a4de:	c4 82       	std	Z+4, r12	; 0x04
   1a4e0:	8b e5       	ldi	r24, 0x5B	; 91
   1a4e2:	9a e3       	ldi	r25, 0x3A	; 58
   1a4e4:	17 c0       	rjmp	.+46     	; 0x1a514 <lif_open_volume+0x130>
        lif_closedir(LIF);
        return(NULL);
    }

    // Unpack Volumes has the Directory start sector
    lif_str2vol(buffer, LIF);
   1a4e6:	b7 01       	movw	r22, r14
   1a4e8:	ce 01       	movw	r24, r28
   1a4ea:	0a 96       	adiw	r24, 0x0a	; 10
   1a4ec:	0e 94 a7 c4 	call	0x1894e	; 0x1894e <lif_str2vol>

    // Validate basic Volume headers 
    if( !lif_check_volume(LIF) )
   1a4f0:	c7 01       	movw	r24, r14
   1a4f2:	0e 94 b3 c8 	call	0x19166	; 0x19166 <lif_check_volume>
   1a4f6:	89 2b       	or	r24, r25
   1a4f8:	b1 f4       	brne	.+44     	; 0x1a526 <lif_open_volume+0x142>
    {
        if(debuglevel & 1)
   1a4fa:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1a4fe:	80 ff       	sbrs	r24, 0
   1a500:	0f c0       	rjmp	.+30     	; 0x1a520 <lif_open_volume+0x13c>
            printf("lif_open_volume:[%s] error volume validate failed\n", LIF->name);
   1a502:	f7 01       	movw	r30, r14
   1a504:	80 81       	ld	r24, Z
   1a506:	91 81       	ldd	r25, Z+1	; 0x01
   1a508:	ed b7       	in	r30, 0x3d	; 61
   1a50a:	fe b7       	in	r31, 0x3e	; 62
   1a50c:	95 83       	std	Z+5, r25	; 0x05
   1a50e:	84 83       	std	Z+4, r24	; 0x04
   1a510:	88 e2       	ldi	r24, 0x28	; 40
   1a512:	9a e3       	ldi	r25, 0x3A	; 58
   1a514:	a0 e0       	ldi	r26, 0x00	; 0
   1a516:	81 83       	std	Z+1, r24	; 0x01
   1a518:	92 83       	std	Z+2, r25	; 0x02
   1a51a:	a3 83       	std	Z+3, r26	; 0x03
   1a51c:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a520:	c7 01       	movw	r24, r14
   1a522:	a5 d8       	rcall	.-3766   	; 0x1966e <lif_close_volume>
   1a524:	8e cf       	rjmp	.-228    	; 0x1a442 <lif_open_volume+0x5e>
        lif_closedir(LIF);
        return(NULL);
    }

    // Initialize remaining LIF headers
    LIF->filestart = LIF->VOL.DirStartSector + LIF->VOL.DirSectors;
   1a526:	f7 01       	movw	r30, r14
   1a528:	45 a5       	ldd	r20, Z+45	; 0x2d
   1a52a:	56 a5       	ldd	r21, Z+46	; 0x2e
   1a52c:	67 a5       	ldd	r22, Z+47	; 0x2f
   1a52e:	70 a9       	ldd	r23, Z+48	; 0x30
   1a530:	85 a9       	ldd	r24, Z+53	; 0x35
   1a532:	96 a9       	ldd	r25, Z+54	; 0x36
   1a534:	a7 a9       	ldd	r26, Z+55	; 0x37
   1a536:	b0 ad       	ldd	r27, Z+56	; 0x38
   1a538:	48 0f       	add	r20, r24
   1a53a:	59 1f       	adc	r21, r25
   1a53c:	6a 1f       	adc	r22, r26
   1a53e:	7b 1f       	adc	r23, r27
   1a540:	44 87       	std	Z+12, r20	; 0x0c
   1a542:	55 87       	std	Z+13, r21	; 0x0d
   1a544:	66 87       	std	Z+14, r22	; 0x0e
   1a546:	77 87       	std	Z+15, r23	; 0x0f
    LIF->filesectors = LIF->sectors - LIF->filestart;
   1a548:	84 81       	ldd	r24, Z+4	; 0x04
   1a54a:	95 81       	ldd	r25, Z+5	; 0x05
   1a54c:	a6 81       	ldd	r26, Z+6	; 0x06
   1a54e:	b7 81       	ldd	r27, Z+7	; 0x07
   1a550:	84 1b       	sub	r24, r20
   1a552:	95 0b       	sbc	r25, r21
   1a554:	a6 0b       	sbc	r26, r22
   1a556:	b7 0b       	sbc	r27, r23
   1a558:	80 8b       	std	Z+16, r24	; 0x10
   1a55a:	91 8b       	std	Z+17, r25	; 0x11
   1a55c:	a2 8b       	std	Z+18, r26	; 0x12
   1a55e:	b3 8b       	std	Z+19, r27	; 0x13
    LIF->freesectors = LIF->filesectors;
   1a560:	80 8f       	std	Z+24, r24	; 0x18
   1a562:	91 8f       	std	Z+25, r25	; 0x19
   1a564:	a2 8f       	std	Z+26, r26	; 0x1a
   1a566:	b3 8f       	std	Z+27, r27	; 0x1b
    LIF->usedsectors = 0;
   1a568:	14 8a       	std	Z+20, r1	; 0x14
   1a56a:	15 8a       	std	Z+21, r1	; 0x15
   1a56c:	16 8a       	std	Z+22, r1	; 0x16
   1a56e:	17 8a       	std	Z+23, r1	; 0x17
    LIF->purged = 0;
   1a570:	17 8e       	std	Z+31, r1	; 0x1f
   1a572:	16 8e       	std	Z+30, r1	; 0x1e
    LIF->files = 0;
   1a574:	15 8e       	std	Z+29, r1	; 0x1d
   1a576:	14 8e       	std	Z+28, r1	; 0x1c
    LIF->dirindex = 0;
   1a578:	11 a2       	std	Z+33, r1	; 0x21
   1a57a:	10 a2       	std	Z+32, r1	; 0x20
    LIF->EOFindex = 0;
   1a57c:	13 a2       	std	Z+35, r1	; 0x23

    if( lif_updatefree(LIF) == NULL)
   1a57e:	12 a2       	std	Z+34, r1	; 0x22
   1a580:	c7 01       	movw	r24, r14
   1a582:	de d9       	rcall	.-3140   	; 0x19940 <lif_updatefree>
   1a584:	8c 01       	movw	r16, r24
   1a586:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1a58a:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1a58e:	01 15       	cp	r16, r1
   1a590:	11 05       	cpc	r17, r1
    {
        if(debuglevel & 1)
   1a592:	a1 f4       	brne	.+40     	; 0x1a5bc <lif_open_volume+0x1d8>
   1a594:	80 ff       	sbrs	r24, 0
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
   1a596:	0f c0       	rjmp	.+30     	; 0x1a5b6 <lif_open_volume+0x1d2>
   1a598:	f7 01       	movw	r30, r14
   1a59a:	80 81       	ld	r24, Z
   1a59c:	91 81       	ldd	r25, Z+1	; 0x01
   1a59e:	ed b7       	in	r30, 0x3d	; 61
   1a5a0:	fe b7       	in	r31, 0x3e	; 62
   1a5a2:	95 83       	std	Z+5, r25	; 0x05
   1a5a4:	84 83       	std	Z+4, r24	; 0x04
   1a5a6:	85 ef       	ldi	r24, 0xF5	; 245
   1a5a8:	99 e3       	ldi	r25, 0x39	; 57
   1a5aa:	a0 e0       	ldi	r26, 0x00	; 0
   1a5ac:	81 83       	std	Z+1, r24	; 0x01
   1a5ae:	92 83       	std	Z+2, r25	; 0x02
   1a5b0:	a3 83       	std	Z+3, r26	; 0x03
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a5b2:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   1a5b6:	c7 01       	movw	r24, r14
    if( lif_updatefree(LIF) == NULL)
    {
        if(debuglevel & 1)
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
        lif_closedir(LIF);
        return(NULL);
   1a5b8:	5a d8       	rcall	.-3916   	; 0x1966e <lif_close_volume>
    }

	if(debuglevel &0x400)
   1a5ba:	08 c0       	rjmp	.+16     	; 0x1a5cc <lif_open_volume+0x1e8>
   1a5bc:	92 ff       	sbrs	r25, 2
		lif_dump_vol(LIF, "Volume Listing");	
   1a5be:	05 c0       	rjmp	.+10     	; 0x1a5ca <lif_open_volume+0x1e6>
   1a5c0:	68 e8       	ldi	r22, 0x88	; 136
   1a5c2:	75 e1       	ldi	r23, 0x15	; 21
   1a5c4:	c7 01       	movw	r24, r14
   1a5c6:	0e 94 ed c6 	call	0x18dda	; 0x18dda <lif_dump_vol>
    return( LIF );
}
   1a5ca:	87 01       	movw	r16, r14
   1a5cc:	c8 01       	movw	r24, r16
   1a5ce:	c7 5c       	subi	r28, 0xC7	; 199
   1a5d0:	de 4f       	sbci	r29, 0xFE	; 254
   1a5d2:	ec e0       	ldi	r30, 0x0C	; 12
   1a5d4:	0c 94 3b e5 	jmp	0x1ca76	; 0x1ca76 <__epilogue_restores__+0xc>

0001a5d8 <lif_dir>:
/// @brief Display a LIF image file directory
/// @param[in] lifimagename: LIF disk image name
/// @return -1 on error or number of files found
MEMSPACE
void lif_dir(char *lifimagename)
{
   1a5d8:	2f 92       	push	r2
   1a5da:	3f 92       	push	r3
   1a5dc:	4f 92       	push	r4
   1a5de:	5f 92       	push	r5
   1a5e0:	6f 92       	push	r6
   1a5e2:	8f 92       	push	r8
   1a5e4:	9f 92       	push	r9
   1a5e6:	af 92       	push	r10
   1a5e8:	bf 92       	push	r11
   1a5ea:	cf 92       	push	r12
   1a5ec:	df 92       	push	r13
   1a5ee:	ef 92       	push	r14
   1a5f0:	0f 93       	push	r16
   1a5f2:	1f 93       	push	r17
   1a5f4:	cf 93       	push	r28
   1a5f6:	df 93       	push	r29
   1a5f8:	cd b7       	in	r28, 0x3d	; 61
   1a5fa:	de b7       	in	r29, 0x3e	; 62
   1a5fc:	af 97       	sbiw	r28, 0x2f	; 47
   1a5fe:	0f b6       	in	r0, 0x3f	; 63
   1a600:	f8 94       	cli
   1a602:	de bf       	out	0x3e, r29	; 62
   1a604:	0f be       	out	0x3f, r0	; 63
   1a606:	cd bf       	out	0x3d, r28	; 61
    int index = 0;
    char *vol;

    int warn = ' ';

    LIF = lif_open_volume(lifimagename,"rb+");
   1a608:	66 e2       	ldi	r22, 0x26	; 38
   1a60a:	78 e0       	ldi	r23, 0x08	; 8
   1a60c:	eb de       	rcall	.-554    	; 0x1a3e4 <lif_open_volume>
   1a60e:	9f a7       	std	Y+47, r25	; 0x2f
   1a610:	8e a7       	std	Y+46, r24	; 0x2e
    if(LIF == NULL)
   1a612:	00 97       	sbiw	r24, 0x00	; 0
   1a614:	09 f4       	brne	.+2      	; 0x1a618 <lif_dir+0x40>
   1a616:	9e c1       	rjmp	.+828    	; 0x1a954 <lif_dir+0x37c>
        return;

    vol = (char *)LIF->VOL.Label;
    if(!vol[0])
   1a618:	fc 01       	movw	r30, r24
   1a61a:	86 a1       	ldd	r24, Z+38	; 0x26
   1a61c:	88 23       	and	r24, r24
   1a61e:	21 f0       	breq	.+8      	; 0x1a628 <lif_dir+0x50>

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return;

    vol = (char *)LIF->VOL.Label;
   1a620:	8f 01       	movw	r16, r30
   1a622:	0a 5d       	subi	r16, 0xDA	; 218
   1a624:	1f 4f       	sbci	r17, 0xFF	; 255
   1a626:	02 c0       	rjmp	.+4      	; 0x1a62c <lif_dir+0x54>
    if(!vol[0])
        vol = "<EMPTY>";
   1a628:	0a e3       	ldi	r16, 0x3A	; 58
   1a62a:	15 e1       	ldi	r17, 0x15	; 21

    printf("Volume:[%s] Date:[%s]\n", vol, lif_lifbcd2timestr(LIF->VOL.date));
   1a62c:	8e a5       	ldd	r24, Y+46	; 0x2e
   1a62e:	9f a5       	ldd	r25, Y+47	; 0x2f
   1a630:	87 5b       	subi	r24, 0xB7	; 183
   1a632:	9f 4f       	sbci	r25, 0xFF	; 255
   1a634:	0e 94 b1 c6 	call	0x18d62	; 0x18d62 <lif_lifbcd2timestr>
   1a638:	ed b7       	in	r30, 0x3d	; 61
   1a63a:	fe b7       	in	r31, 0x3e	; 62
   1a63c:	97 83       	std	Z+7, r25	; 0x07
   1a63e:	86 83       	std	Z+6, r24	; 0x06
   1a640:	15 83       	std	Z+5, r17	; 0x05
   1a642:	04 83       	std	Z+4, r16	; 0x04
   1a644:	8e ed       	ldi	r24, 0xDE	; 222
   1a646:	99 e3       	ldi	r25, 0x39	; 57
   1a648:	a0 e0       	ldi	r26, 0x00	; 0
   1a64a:	81 83       	std	Z+1, r24	; 0x01
   1a64c:	92 83       	std	Z+2, r25	; 0x02
   1a64e:	a3 83       	std	Z+3, r26	; 0x03
   1a650:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    
    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
   1a654:	8e e9       	ldi	r24, 0x9E	; 158
   1a656:	99 e3       	ldi	r25, 0x39	; 57
   1a658:	a0 e0       	ldi	r26, 0x00	; 0
   1a65a:	ed b7       	in	r30, 0x3d	; 61
   1a65c:	fe b7       	in	r31, 0x3e	; 62
   1a65e:	81 83       	std	Z+1, r24	; 0x01
   1a660:	92 83       	std	Z+2, r25	; 0x02
   1a662:	a3 83       	std	Z+3, r26	; 0x03
   1a664:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    long bytes;
    lif_t *LIF;
    int index = 0;
    char *vol;

    int warn = ' ';
   1a668:	00 e2       	ldi	r16, 0x20	; 32
   1a66a:	10 e0       	ldi	r17, 0x00	; 0
   1a66c:	1f 8b       	std	Y+23, r17	; 0x17
   1a66e:	0e 8b       	std	Y+22, r16	; 0x16
MEMSPACE
void lif_dir(char *lifimagename)
{
    long bytes;
    lif_t *LIF;
    int index = 0;
   1a670:	21 2c       	mov	r2, r1
   1a672:	31 2c       	mov	r3, r1

        if(!lif_readdirindex(LIF,index))
            break;


        if(LIF->DIR.FileType == 0xffff)
   1a674:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a676:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a678:	06 5a       	subi	r16, 0xA6	; 166
   1a67a:	1f 4f       	sbci	r17, 0xFF	; 255
   1a67c:	1d 8f       	std	Y+29, r17	; 0x1d
   1a67e:	0c 8f       	std	Y+28, r16	; 0x1c
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   1a680:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a682:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a684:	00 5a       	subi	r16, 0xA0	; 160
   1a686:	1f 4f       	sbci	r17, 0xFF	; 255
   1a688:	1d a3       	std	Y+37, r17	; 0x25
   1a68a:	0c a3       	std	Y+36, r16	; 0x24

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1a68c:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a68e:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a690:	04 59       	subi	r16, 0x94	; 148
   1a692:	1f 4f       	sbci	r17, 0xFF	; 255
   1a694:	1f a3       	std	Y+39, r17	; 0x27
   1a696:	0e a3       	std	Y+38, r16	; 0x26
            else
            {
                warn = '!';
                if(debuglevel & 0x400)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n", 
   1a698:	82 e5       	ldi	r24, 0x52	; 82
   1a69a:	99 e3       	ldi	r25, 0x39	; 57
   1a69c:	6c 01       	movw	r12, r24
   1a69e:	e1 2c       	mov	r14, r1
   1a6a0:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a6a2:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a6a4:	01 5b       	subi	r16, 0xB1	; 177
   1a6a6:	1f 4f       	sbci	r17, 0xFF	; 255
   1a6a8:	1f 8f       	std	Y+31, r17	; 0x1f
   1a6aa:	0e 8f       	std	Y+30, r16	; 0x1e
            }
        }


        // name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n", 
   1a6ac:	82 e2       	ldi	r24, 0x22	; 34
   1a6ae:	99 e3       	ldi	r25, 0x39	; 57
   1a6b0:	2c 01       	movw	r4, r24
   1a6b2:	61 2c       	mov	r6, r1
   1a6b4:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a6b6:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a6b8:	04 5a       	subi	r16, 0xA4	; 164
   1a6ba:	1f 4f       	sbci	r17, 0xFF	; 255
   1a6bc:	19 a7       	std	Y+41, r17	; 0x29
   1a6be:	08 a7       	std	Y+40, r16	; 0x28
   1a6c0:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a6c2:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a6c4:	02 59       	subi	r16, 0x92	; 146
   1a6c6:	1f 4f       	sbci	r17, 0xFF	; 255
   1a6c8:	1b a7       	std	Y+43, r17	; 0x2b
   1a6ca:	0a a7       	std	Y+42, r16	; 0x2a
   1a6cc:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a6ce:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a6d0:	0c 59       	subi	r16, 0x9C	; 156
   1a6d2:	1f 4f       	sbci	r17, 0xFF	; 255
   1a6d4:	1d a7       	std	Y+45, r17	; 0x2d
   1a6d6:	0c a7       	std	Y+44, r16	; 0x2c
    
    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
    while(1)
    {

        if(!lif_readdirindex(LIF,index))
   1a6d8:	b1 01       	movw	r22, r2
   1a6da:	8e a5       	ldd	r24, Y+46	; 0x2e
   1a6dc:	9f a5       	ldd	r25, Y+47	; 0x2f
   1a6de:	55 d8       	rcall	.-3926   	; 0x1978a <lif_readdirindex>
   1a6e0:	89 2b       	or	r24, r25
   1a6e2:	09 f4       	brne	.+2      	; 0x1a6e6 <lif_dir+0x10e>
   1a6e4:	ad c0       	rjmp	.+346    	; 0x1a840 <lif_dir+0x268>
            break;


        if(LIF->DIR.FileType == 0xffff)
   1a6e6:	ac 8d       	ldd	r26, Y+28	; 0x1c
   1a6e8:	bd 8d       	ldd	r27, Y+29	; 0x1d
   1a6ea:	8d 91       	ld	r24, X+
   1a6ec:	9c 91       	ld	r25, X
   1a6ee:	8f 3f       	cpi	r24, 0xFF	; 255
   1a6f0:	bf ef       	ldi	r27, 0xFF	; 255
   1a6f2:	9b 07       	cpc	r25, r27
   1a6f4:	09 f4       	brne	.+2      	; 0x1a6f8 <lif_dir+0x120>
   1a6f6:	a4 c0       	rjmp	.+328    	; 0x1a840 <lif_dir+0x268>
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   1a6f8:	ec a1       	ldd	r30, Y+36	; 0x24
   1a6fa:	fd a1       	ldd	r31, Y+37	; 0x25
   1a6fc:	40 81       	ld	r20, Z
   1a6fe:	51 81       	ldd	r21, Z+1	; 0x01
   1a700:	62 81       	ldd	r22, Z+2	; 0x02
   1a702:	73 81       	ldd	r23, Z+3	; 0x03
   1a704:	00 27       	eor	r16, r16
   1a706:	14 2f       	mov	r17, r20
   1a708:	25 2f       	mov	r18, r21
   1a70a:	36 2f       	mov	r19, r22
   1a70c:	08 8f       	std	Y+24, r16	; 0x18
   1a70e:	19 8f       	std	Y+25, r17	; 0x19
   1a710:	2a 8f       	std	Y+26, r18	; 0x1a
   1a712:	3b 8f       	std	Y+27, r19	; 0x1b

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
   1a714:	8c 7f       	andi	r24, 0xFC	; 252
   1a716:	80 31       	cpi	r24, 0x10	; 16
   1a718:	90 4e       	sbci	r25, 0xE0	; 224
   1a71a:	09 f0       	breq	.+2      	; 0x1a71e <lif_dir+0x146>
   1a71c:	4b c0       	rjmp	.+150    	; 0x1a7b4 <lif_dir+0x1dc>
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1a71e:	ae a1       	ldd	r26, Y+38	; 0x26
   1a720:	bf a1       	ldd	r27, Y+39	; 0x27
   1a722:	8d 91       	ld	r24, X+
   1a724:	9c 91       	ld	r25, X
   1a726:	00 97       	sbiw	r24, 0x00	; 0
   1a728:	b9 f0       	breq	.+46     	; 0x1a758 <lif_dir+0x180>
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a72a:	4c 01       	movw	r8, r24
   1a72c:	a1 2c       	mov	r10, r1
   1a72e:	b1 2c       	mov	r11, r1
   1a730:	33 27       	eor	r19, r19
   1a732:	2b 2d       	mov	r18, r11
   1a734:	1a 2d       	mov	r17, r10
   1a736:	09 2d       	mov	r16, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a738:	88 23       	and	r24, r24
   1a73a:	21 f0       	breq	.+8      	; 0x1a744 <lif_dir+0x16c>
        ++sectors;
   1a73c:	0f 5f       	subi	r16, 0xFF	; 255
   1a73e:	1f 4f       	sbci	r17, 0xFF	; 255
   1a740:	2f 4f       	sbci	r18, 0xFF	; 255
   1a742:	3f 4f       	sbci	r19, 0xFF	; 255

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1a744:	40 17       	cp	r20, r16
   1a746:	51 07       	cpc	r21, r17
   1a748:	62 07       	cpc	r22, r18
   1a74a:	73 07       	cpc	r23, r19
   1a74c:	29 f4       	brne	.+10     	; 0x1a758 <lif_dir+0x180>
            {
                bytes = LIF->DIR.FileBytes;
   1a74e:	88 8e       	std	Y+24, r8	; 0x18
   1a750:	99 8e       	std	Y+25, r9	; 0x19
   1a752:	aa 8e       	std	Y+26, r10	; 0x1a
   1a754:	bb 8e       	std	Y+27, r11	; 0x1b
   1a756:	2e c0       	rjmp	.+92     	; 0x1a7b4 <lif_dir+0x1dc>
            }
            else
            {
                warn = '!';
                if(debuglevel & 0x400)
   1a758:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   1a75c:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1a760:	32 ff       	sbrs	r19, 2
   1a762:	24 c0       	rjmp	.+72     	; 0x1a7ac <lif_dir+0x1d4>
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n", 
   1a764:	4c 01       	movw	r8, r24
   1a766:	a1 2c       	mov	r10, r1
   1a768:	b1 2c       	mov	r11, r1
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a76a:	33 27       	eor	r19, r19
   1a76c:	2b 2d       	mov	r18, r11
   1a76e:	1a 2d       	mov	r17, r10
   1a770:	09 2d       	mov	r16, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a772:	88 23       	and	r24, r24
   1a774:	21 f0       	breq	.+8      	; 0x1a77e <lif_dir+0x1a6>
        ++sectors;
   1a776:	0f 5f       	subi	r16, 0xFF	; 255
   1a778:	1f 4f       	sbci	r17, 0xFF	; 255
   1a77a:	2f 4f       	sbci	r18, 0xFF	; 255
   1a77c:	3f 4f       	sbci	r19, 0xFF	; 255
            else
            {
                warn = '!';
                if(debuglevel & 0x400)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n", 
   1a77e:	ed b7       	in	r30, 0x3d	; 61
   1a780:	fe b7       	in	r31, 0x3e	; 62
   1a782:	46 87       	std	Z+14, r20	; 0x0e
   1a784:	57 87       	std	Z+15, r21	; 0x0f
   1a786:	60 8b       	std	Z+16, r22	; 0x10
   1a788:	71 8b       	std	Z+17, r23	; 0x11
   1a78a:	02 87       	std	Z+10, r16	; 0x0a
   1a78c:	13 87       	std	Z+11, r17	; 0x0b
   1a78e:	24 87       	std	Z+12, r18	; 0x0c
   1a790:	35 87       	std	Z+13, r19	; 0x0d
   1a792:	86 82       	std	Z+6, r8	; 0x06
   1a794:	97 82       	std	Z+7, r9	; 0x07
   1a796:	a0 86       	std	Z+8, r10	; 0x08
   1a798:	b1 86       	std	Z+9, r11	; 0x09
   1a79a:	0e 8d       	ldd	r16, Y+30	; 0x1e
   1a79c:	1f 8d       	ldd	r17, Y+31	; 0x1f
   1a79e:	15 83       	std	Z+5, r17	; 0x05
   1a7a0:	04 83       	std	Z+4, r16	; 0x04
   1a7a2:	c1 82       	std	Z+1, r12	; 0x01
   1a7a4:	d2 82       	std	Z+2, r13	; 0x02
   1a7a6:	e3 82       	std	Z+3, r14	; 0x03
   1a7a8:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
            {
                bytes = LIF->DIR.FileBytes;
            }
            else
            {
                warn = '!';
   1a7ac:	01 e2       	ldi	r16, 0x21	; 33
   1a7ae:	10 e0       	ldi	r17, 0x00	; 0
   1a7b0:	1f 8b       	std	Y+23, r17	; 0x17
   1a7b2:	0e 8b       	std	Y+22, r16	; 0x16
            }
        }


        // name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n", 
   1a7b4:	ac 8d       	ldd	r26, Y+28	; 0x1c
   1a7b6:	bd 8d       	ldd	r27, Y+29	; 0x1d
   1a7b8:	8d 90       	ld	r8, X+
   1a7ba:	9c 90       	ld	r9, X
   1a7bc:	81 14       	cp	r8, r1
   1a7be:	91 04       	cpc	r9, r1
   1a7c0:	19 f0       	breq	.+6      	; 0x1a7c8 <lif_dir+0x1f0>
   1a7c2:	0e 8d       	ldd	r16, Y+30	; 0x1e
   1a7c4:	1f 8d       	ldd	r17, Y+31	; 0x1f
   1a7c6:	02 c0       	rjmp	.+4      	; 0x1a7cc <lif_dir+0x1f4>
   1a7c8:	07 e9       	ldi	r16, 0x97	; 151
   1a7ca:	15 e1       	ldi	r17, 0x15	; 21
   1a7cc:	a8 a5       	ldd	r26, Y+40	; 0x28
   1a7ce:	b9 a5       	ldd	r27, Y+41	; 0x29
   1a7d0:	8d 91       	ld	r24, X+
   1a7d2:	9d 91       	ld	r25, X+
   1a7d4:	0d 90       	ld	r0, X+
   1a7d6:	bc 91       	ld	r27, X
   1a7d8:	a0 2d       	mov	r26, r0
   1a7da:	88 a3       	std	Y+32, r24	; 0x20
   1a7dc:	99 a3       	std	Y+33, r25	; 0x21
   1a7de:	aa a3       	std	Y+34, r26	; 0x22
   1a7e0:	bb a3       	std	Y+35, r27	; 0x23
   1a7e2:	ea a5       	ldd	r30, Y+42	; 0x2a
   1a7e4:	fb a5       	ldd	r31, Y+43	; 0x2b
   1a7e6:	a0 80       	ld	r10, Z
   1a7e8:	b1 80       	ldd	r11, Z+1	; 0x01
   1a7ea:	8c a5       	ldd	r24, Y+44	; 0x2c
   1a7ec:	9d a5       	ldd	r25, Y+45	; 0x2d
   1a7ee:	0e 94 b1 c6 	call	0x18d62	; 0x18d62 <lif_lifbcd2timestr>
   1a7f2:	ed b7       	in	r30, 0x3d	; 61
   1a7f4:	fe b7       	in	r31, 0x3e	; 62
   1a7f6:	95 8b       	std	Z+21, r25	; 0x15
   1a7f8:	84 8b       	std	Z+20, r24	; 0x14
   1a7fa:	b3 8a       	std	Z+19, r11	; 0x13
   1a7fc:	a2 8a       	std	Z+18, r10	; 0x12
   1a7fe:	2e 89       	ldd	r18, Y+22	; 0x16
   1a800:	3f 89       	ldd	r19, Y+23	; 0x17
   1a802:	31 8b       	std	Z+17, r19	; 0x11
   1a804:	20 8b       	std	Z+16, r18	; 0x10
   1a806:	88 8d       	ldd	r24, Y+24	; 0x18
   1a808:	99 8d       	ldd	r25, Y+25	; 0x19
   1a80a:	aa 8d       	ldd	r26, Y+26	; 0x1a
   1a80c:	bb 8d       	ldd	r27, Y+27	; 0x1b
   1a80e:	84 87       	std	Z+12, r24	; 0x0c
   1a810:	95 87       	std	Z+13, r25	; 0x0d
   1a812:	a6 87       	std	Z+14, r26	; 0x0e
   1a814:	b7 87       	std	Z+15, r27	; 0x0f
   1a816:	88 a1       	ldd	r24, Y+32	; 0x20
   1a818:	99 a1       	ldd	r25, Y+33	; 0x21
   1a81a:	aa a1       	ldd	r26, Y+34	; 0x22
   1a81c:	bb a1       	ldd	r27, Y+35	; 0x23
   1a81e:	80 87       	std	Z+8, r24	; 0x08
   1a820:	91 87       	std	Z+9, r25	; 0x09
   1a822:	a2 87       	std	Z+10, r26	; 0x0a
   1a824:	b3 87       	std	Z+11, r27	; 0x0b
   1a826:	97 82       	std	Z+7, r9	; 0x07
   1a828:	86 82       	std	Z+6, r8	; 0x06
   1a82a:	15 83       	std	Z+5, r17	; 0x05
   1a82c:	04 83       	std	Z+4, r16	; 0x04
   1a82e:	41 82       	std	Z+1, r4	; 0x01
   1a830:	52 82       	std	Z+2, r5	; 0x02
   1a832:	63 82       	std	Z+3, r6	; 0x03
   1a834:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
            (long)bytes, 
            warn,
            (int)LIF->DIR.SectorSize,
            lif_lifbcd2timestr(LIF->DIR.date));

        ++index;
   1a838:	ff ef       	ldi	r31, 0xFF	; 255
   1a83a:	2f 1a       	sub	r2, r31
   1a83c:	3f 0a       	sbc	r3, r31
    }   
   1a83e:	4c cf       	rjmp	.-360    	; 0x1a6d8 <lif_dir+0x100>

    printf("\n");
   1a840:	80 e2       	ldi	r24, 0x20	; 32
   1a842:	99 e3       	ldi	r25, 0x39	; 57
   1a844:	a0 e0       	ldi	r26, 0x00	; 0
   1a846:	ed b7       	in	r30, 0x3d	; 61
   1a848:	fe b7       	in	r31, 0x3e	; 62
   1a84a:	81 83       	std	Z+1, r24	; 0x01
   1a84c:	92 83       	std	Z+2, r25	; 0x02
   1a84e:	a3 83       	std	Z+3, r26	; 0x03
   1a850:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    printf("%8ld Files\n", (long)LIF->files);
   1a854:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a856:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a858:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a85a:	95 8d       	ldd	r25, Z+29	; 0x1d
   1a85c:	09 2e       	mov	r0, r25
   1a85e:	00 0c       	add	r0, r0
   1a860:	aa 0b       	sbc	r26, r26
   1a862:	bb 0b       	sbc	r27, r27
   1a864:	ed b7       	in	r30, 0x3d	; 61
   1a866:	fe b7       	in	r31, 0x3e	; 62
   1a868:	84 83       	std	Z+4, r24	; 0x04
   1a86a:	95 83       	std	Z+5, r25	; 0x05
   1a86c:	a6 83       	std	Z+6, r26	; 0x06
   1a86e:	b7 83       	std	Z+7, r27	; 0x07
   1a870:	84 e1       	ldi	r24, 0x14	; 20
   1a872:	99 e3       	ldi	r25, 0x39	; 57
   1a874:	a0 e0       	ldi	r26, 0x00	; 0
   1a876:	81 83       	std	Z+1, r24	; 0x01
   1a878:	92 83       	std	Z+2, r25	; 0x02
   1a87a:	a3 83       	std	Z+3, r26	; 0x03
   1a87c:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    printf("%8ld Purged\n", (long)LIF->purged);
   1a880:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a882:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a884:	86 8d       	ldd	r24, Z+30	; 0x1e
   1a886:	97 8d       	ldd	r25, Z+31	; 0x1f
   1a888:	09 2e       	mov	r0, r25
   1a88a:	00 0c       	add	r0, r0
   1a88c:	aa 0b       	sbc	r26, r26
   1a88e:	bb 0b       	sbc	r27, r27
   1a890:	ed b7       	in	r30, 0x3d	; 61
   1a892:	fe b7       	in	r31, 0x3e	; 62
   1a894:	84 83       	std	Z+4, r24	; 0x04
   1a896:	95 83       	std	Z+5, r25	; 0x05
   1a898:	a6 83       	std	Z+6, r26	; 0x06
   1a89a:	b7 83       	std	Z+7, r27	; 0x07
   1a89c:	87 e0       	ldi	r24, 0x07	; 7
   1a89e:	99 e3       	ldi	r25, 0x39	; 57
   1a8a0:	a0 e0       	ldi	r26, 0x00	; 0
   1a8a2:	81 83       	std	Z+1, r24	; 0x01
   1a8a4:	92 83       	std	Z+2, r25	; 0x02
   1a8a6:	a3 83       	std	Z+3, r26	; 0x03
   1a8a8:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    printf("%8ld Dir  start\n",   (long)LIF->VOL.DirStartSector);
   1a8ac:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a8ae:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a8b0:	85 a5       	ldd	r24, Z+45	; 0x2d
   1a8b2:	96 a5       	ldd	r25, Z+46	; 0x2e
   1a8b4:	a7 a5       	ldd	r26, Z+47	; 0x2f
   1a8b6:	b0 a9       	ldd	r27, Z+48	; 0x30
   1a8b8:	ed b7       	in	r30, 0x3d	; 61
   1a8ba:	fe b7       	in	r31, 0x3e	; 62
   1a8bc:	84 83       	std	Z+4, r24	; 0x04
   1a8be:	95 83       	std	Z+5, r25	; 0x05
   1a8c0:	a6 83       	std	Z+6, r26	; 0x06
   1a8c2:	b7 83       	std	Z+7, r27	; 0x07
   1a8c4:	86 ef       	ldi	r24, 0xF6	; 246
   1a8c6:	98 e3       	ldi	r25, 0x38	; 56
   1a8c8:	a0 e0       	ldi	r26, 0x00	; 0
   1a8ca:	81 83       	std	Z+1, r24	; 0x01
   1a8cc:	92 83       	std	Z+2, r25	; 0x02
   1a8ce:	a3 83       	std	Z+3, r26	; 0x03
   1a8d0:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    printf("%8ld Dir  sectors\n", (long)LIF->VOL.DirSectors);
   1a8d4:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a8d6:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a8d8:	85 a9       	ldd	r24, Z+53	; 0x35
   1a8da:	96 a9       	ldd	r25, Z+54	; 0x36
   1a8dc:	a7 a9       	ldd	r26, Z+55	; 0x37
   1a8de:	b0 ad       	ldd	r27, Z+56	; 0x38
   1a8e0:	ed b7       	in	r30, 0x3d	; 61
   1a8e2:	fe b7       	in	r31, 0x3e	; 62
   1a8e4:	84 83       	std	Z+4, r24	; 0x04
   1a8e6:	95 83       	std	Z+5, r25	; 0x05
   1a8e8:	a6 83       	std	Z+6, r26	; 0x06
   1a8ea:	b7 83       	std	Z+7, r27	; 0x07
   1a8ec:	83 ee       	ldi	r24, 0xE3	; 227
   1a8ee:	98 e3       	ldi	r25, 0x38	; 56
   1a8f0:	a0 e0       	ldi	r26, 0x00	; 0
   1a8f2:	81 83       	std	Z+1, r24	; 0x01
   1a8f4:	92 83       	std	Z+2, r25	; 0x02
   1a8f6:	a3 83       	std	Z+3, r26	; 0x03
   1a8f8:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
   1a8fc:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a8fe:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a900:	84 89       	ldd	r24, Z+20	; 0x14
   1a902:	95 89       	ldd	r25, Z+21	; 0x15
   1a904:	a6 89       	ldd	r26, Z+22	; 0x16
   1a906:	b7 89       	ldd	r27, Z+23	; 0x17
   1a908:	ed b7       	in	r30, 0x3d	; 61
   1a90a:	fe b7       	in	r31, 0x3e	; 62
   1a90c:	84 83       	std	Z+4, r24	; 0x04
   1a90e:	95 83       	std	Z+5, r25	; 0x05
   1a910:	a6 83       	std	Z+6, r26	; 0x06
   1a912:	b7 83       	std	Z+7, r27	; 0x07
   1a914:	80 ed       	ldi	r24, 0xD0	; 208
   1a916:	98 e3       	ldi	r25, 0x38	; 56
   1a918:	a0 e0       	ldi	r26, 0x00	; 0
   1a91a:	81 83       	std	Z+1, r24	; 0x01
   1a91c:	92 83       	std	Z+2, r25	; 0x02
   1a91e:	a3 83       	std	Z+3, r26	; 0x03
   1a920:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    printf("%8ld Free sectors\n", (long)LIF->freesectors);
   1a924:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a926:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a928:	80 8d       	ldd	r24, Z+24	; 0x18
   1a92a:	91 8d       	ldd	r25, Z+25	; 0x19
   1a92c:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a92e:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a930:	ed b7       	in	r30, 0x3d	; 61
   1a932:	fe b7       	in	r31, 0x3e	; 62
   1a934:	84 83       	std	Z+4, r24	; 0x04
   1a936:	95 83       	std	Z+5, r25	; 0x05
   1a938:	a6 83       	std	Z+6, r26	; 0x06
   1a93a:	b7 83       	std	Z+7, r27	; 0x07
   1a93c:	8d eb       	ldi	r24, 0xBD	; 189
   1a93e:	98 e3       	ldi	r25, 0x38	; 56
   1a940:	a0 e0       	ldi	r26, 0x00	; 0
   1a942:	81 83       	std	Z+1, r24	; 0x01
   1a944:	92 83       	std	Z+2, r25	; 0x02
   1a946:	a3 83       	std	Z+3, r26	; 0x03
   1a948:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a94c:	8e a5       	ldd	r24, Y+46	; 0x2e
   1a94e:	9f a5       	ldd	r25, Y+47	; 0x2f
   1a950:	0e 94 37 cb 	call	0x1966e	; 0x1966e <lif_close_volume>
    printf("%8ld Dir  sectors\n", (long)LIF->VOL.DirSectors);
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
    printf("%8ld Free sectors\n", (long)LIF->freesectors);

    lif_closedir(LIF);
}
   1a954:	af 96       	adiw	r28, 0x2f	; 47
   1a956:	0f b6       	in	r0, 0x3f	; 63
   1a958:	f8 94       	cli
   1a95a:	de bf       	out	0x3e, r29	; 62
   1a95c:	0f be       	out	0x3f, r0	; 63
   1a95e:	cd bf       	out	0x3d, r28	; 61
   1a960:	df 91       	pop	r29
   1a962:	cf 91       	pop	r28
   1a964:	1f 91       	pop	r17
   1a966:	0f 91       	pop	r16
   1a968:	ef 90       	pop	r14
   1a96a:	df 90       	pop	r13
   1a96c:	cf 90       	pop	r12
   1a96e:	bf 90       	pop	r11
   1a970:	af 90       	pop	r10
   1a972:	9f 90       	pop	r9
   1a974:	8f 90       	pop	r8
   1a976:	6f 90       	pop	r6
   1a978:	5f 90       	pop	r5
   1a97a:	4f 90       	pop	r4
   1a97c:	3f 90       	pop	r3
   1a97e:	2f 90       	pop	r2
   1a980:	08 95       	ret

0001a982 <lif_find_file>:
/// @param[in] *LIF: directory pointer
/// @param[in] liflabel: File name in LIF image
/// @return Directory index of record
MEMSPACE
int lif_find_file(lif_t *LIF, char *liflabel)
{
   1a982:	a5 e0       	ldi	r26, 0x05	; 5
   1a984:	b0 e0       	ldi	r27, 0x00	; 0
   1a986:	e7 ec       	ldi	r30, 0xC7	; 199
   1a988:	f4 ed       	ldi	r31, 0xD4	; 212
   1a98a:	0c 94 21 e5 	jmp	0x1ca42	; 0x1ca42 <__prologue_saves__+0x10>
   1a98e:	7c 01       	movw	r14, r24
   1a990:	eb 01       	movw	r28, r22
    int index;

    if( !lif_checkname(liflabel) )
   1a992:	cb 01       	movw	r24, r22
   1a994:	0e 94 a2 c3 	call	0x18744	; 0x18744 <lif_checkname>
   1a998:	89 2b       	or	r24, r25
   1a99a:	59 f4       	brne	.+22     	; 0x1a9b2 <lif_find_file+0x30>
    {
        if(debuglevel & 1)
   1a99c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1a9a0:	80 ff       	sbrs	r24, 0
   1a9a2:	46 c0       	rjmp	.+140    	; 0x1aa30 <lif_find_file+0xae>
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
   1a9a4:	ed b7       	in	r30, 0x3d	; 61
   1a9a6:	fe b7       	in	r31, 0x3e	; 62
   1a9a8:	d5 83       	std	Z+5, r29	; 0x05
   1a9aa:	c4 83       	std	Z+4, r28	; 0x04
   1a9ac:	86 e9       	ldi	r24, 0x96	; 150
   1a9ae:	98 e3       	ldi	r25, 0x38	; 56
   1a9b0:	13 c0       	rjmp	.+38     	; 0x1a9d8 <lif_find_file+0x56>
        return(-1);
    }
    if(strlen(liflabel) > 10)
   1a9b2:	fe 01       	movw	r30, r28
   1a9b4:	01 90       	ld	r0, Z+
   1a9b6:	00 20       	and	r0, r0
   1a9b8:	e9 f7       	brne	.-6      	; 0x1a9b4 <lif_find_file+0x32>
   1a9ba:	31 97       	sbiw	r30, 0x01	; 1
   1a9bc:	ec 1b       	sub	r30, r28
   1a9be:	fd 0b       	sbc	r31, r29
   1a9c0:	3b 97       	sbiw	r30, 0x0b	; 11
   1a9c2:	88 f0       	brcs	.+34     	; 0x1a9e6 <lif_find_file+0x64>
    {
        if(debuglevel & 1)
   1a9c4:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1a9c8:	80 ff       	sbrs	r24, 0
   1a9ca:	32 c0       	rjmp	.+100    	; 0x1aa30 <lif_find_file+0xae>
            printf("lif_find_file:[%s] liflabel too big\n", liflabel);
   1a9cc:	ed b7       	in	r30, 0x3d	; 61
   1a9ce:	fe b7       	in	r31, 0x3e	; 62
   1a9d0:	d5 83       	std	Z+5, r29	; 0x05
   1a9d2:	c4 83       	std	Z+4, r28	; 0x04
   1a9d4:	81 e7       	ldi	r24, 0x71	; 113
   1a9d6:	98 e3       	ldi	r25, 0x38	; 56
   1a9d8:	a0 e0       	ldi	r26, 0x00	; 0
   1a9da:	81 83       	std	Z+1, r24	; 0x01
   1a9dc:	92 83       	std	Z+2, r25	; 0x02
   1a9de:	a3 83       	std	Z+3, r26	; 0x03
   1a9e0:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   1a9e4:	25 c0       	rjmp	.+74     	; 0x1aa30 <lif_find_file+0xae>
        return(-1);
    }

    if(LIF == NULL)
   1a9e6:	e1 14       	cp	r14, r1
   1a9e8:	f1 04       	cpc	r15, r1
   1a9ea:	11 f1       	breq	.+68     	; 0x1aa30 <lif_find_file+0xae>
   1a9ec:	00 e0       	ldi	r16, 0x00	; 0
   1a9ee:	10 e0       	ldi	r17, 0x00	; 0
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1a9f0:	67 01       	movw	r12, r14
   1a9f2:	fa e5       	ldi	r31, 0x5A	; 90
   1a9f4:	cf 0e       	add	r12, r31
   1a9f6:	d1 1c       	adc	r13, r1
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a9f8:	57 01       	movw	r10, r14
   1a9fa:	2f e4       	ldi	r18, 0x4F	; 79
   1a9fc:	a2 0e       	add	r10, r18
   1a9fe:	b1 1c       	adc	r11, r1
        return(-1);
    
    index = 0;
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
   1aa00:	b8 01       	movw	r22, r16
   1aa02:	c7 01       	movw	r24, r14
   1aa04:	0e 94 c5 cb 	call	0x1978a	; 0x1978a <lif_readdirindex>
   1aa08:	89 2b       	or	r24, r25
   1aa0a:	91 f0       	breq	.+36     	; 0x1aa30 <lif_find_file+0xae>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1aa0c:	f6 01       	movw	r30, r12
   1aa0e:	80 81       	ld	r24, Z
   1aa10:	91 81       	ldd	r25, Z+1	; 0x01
   1aa12:	8f 3f       	cpi	r24, 0xFF	; 255
   1aa14:	ff ef       	ldi	r31, 0xFF	; 255
   1aa16:	9f 07       	cpc	r25, r31
   1aa18:	59 f0       	breq	.+22     	; 0x1aa30 <lif_find_file+0xae>
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1aa1a:	89 2b       	or	r24, r25
   1aa1c:	31 f0       	breq	.+12     	; 0x1aa2a <lif_find_file+0xa8>
   1aa1e:	be 01       	movw	r22, r28
   1aa20:	c5 01       	movw	r24, r10
   1aa22:	0e 94 4c 33 	call	0x6698	; 0x6698 <strcasecmp>
   1aa26:	89 2b       	or	r24, r25
   1aa28:	31 f0       	breq	.+12     	; 0x1aa36 <lif_find_file+0xb4>
            break;
        ++index;
   1aa2a:	0f 5f       	subi	r16, 0xFF	; 255
   1aa2c:	1f 4f       	sbci	r17, 0xFF	; 255
   1aa2e:	e8 cf       	rjmp	.-48     	; 0x1aa00 <lif_find_file+0x7e>

    if( !lif_checkname(liflabel) )
    {
        if(debuglevel & 1)
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
        return(-1);
   1aa30:	8f ef       	ldi	r24, 0xFF	; 255
   1aa32:	9f ef       	ldi	r25, 0xFF	; 255
   1aa34:	01 c0       	rjmp	.+2      	; 0x1aa38 <lif_find_file+0xb6>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1aa36:	c8 01       	movw	r24, r16
            break;
        ++index;
    }
    return(index);
}
   1aa38:	cd b7       	in	r28, 0x3d	; 61
   1aa3a:	de b7       	in	r29, 0x3e	; 62
   1aa3c:	25 96       	adiw	r28, 0x05	; 5
   1aa3e:	ea e0       	ldi	r30, 0x0A	; 10
   1aa40:	0c 94 3d e5 	jmp	0x1ca7a	; 0x1ca7a <__epilogue_restores__+0x10>

0001aa44 <lif_e010_pad_sector>:
/// @param[in] offset: sector offset
/// @param[in] wbuf: E010 PAD data
/// @return size of E010 PAD data
MEMSPACE
int lif_e010_pad_sector(long offset, uint8_t *wbuf)
{
   1aa44:	a5 e0       	ldi	r26, 0x05	; 5
   1aa46:	b0 e0       	ldi	r27, 0x00	; 0
   1aa48:	e8 e2       	ldi	r30, 0x28	; 40
   1aa4a:	f5 ed       	ldi	r31, 0xD5	; 213
   1aa4c:	0c 94 23 e5 	jmp	0x1ca46	; 0x1ca46 <__prologue_saves__+0x14>
   1aa50:	6b 01       	movw	r12, r22
   1aa52:	7c 01       	movw	r14, r24
   1aa54:	8a 01       	movw	r16, r20
    int ind;
    int pos,rem;
    
    // Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
   1aa56:	20 e0       	ldi	r18, 0x00	; 0
   1aa58:	31 e0       	ldi	r19, 0x01	; 1
   1aa5a:	40 e0       	ldi	r20, 0x00	; 0
   1aa5c:	50 e0       	ldi	r21, 0x00	; 0
   1aa5e:	0e 94 b9 e4 	call	0x1c972	; 0x1c972 <__divmodsi4>
    if(!pos)
   1aa62:	61 15       	cp	r22, r1
   1aa64:	71 05       	cpc	r23, r1
   1aa66:	d1 f1       	breq	.+116    	; 0x1aadc <lif_e010_pad_sector+0x98>
        return(0);

    // Number of bytes free in this sector
    rem = (long)LIF_SECTOR_SIZE - (long)pos;
   1aa68:	c0 e0       	ldi	r28, 0x00	; 0
   1aa6a:	d1 e0       	ldi	r29, 0x01	; 1
   1aa6c:	c6 1b       	sub	r28, r22
   1aa6e:	d7 0b       	sbc	r29, r23

    // Bytes written to wbuf
    ind = 0;
    // PAD
    wbuf[ind++] = 0xEF;
   1aa70:	f8 01       	movw	r30, r16
   1aa72:	8f ee       	ldi	r24, 0xEF	; 239
   1aa74:	81 93       	st	Z+, r24
    while(ind<rem)
        wbuf[ind++] = 0xff;
   1aa76:	2f ef       	ldi	r18, 0xFF	; 255

    // Bytes written to wbuf
    ind = 0;
    // PAD
    wbuf[ind++] = 0xEF;
    while(ind<rem)
   1aa78:	cf 01       	movw	r24, r30
   1aa7a:	80 1b       	sub	r24, r16
   1aa7c:	91 0b       	sbc	r25, r17
   1aa7e:	8c 17       	cp	r24, r28
   1aa80:	9d 07       	cpc	r25, r29
   1aa82:	14 f4       	brge	.+4      	; 0x1aa88 <lif_e010_pad_sector+0x44>
        wbuf[ind++] = 0xff;
   1aa84:	21 93       	st	Z+, r18
   1aa86:	f8 cf       	rjmp	.-16     	; 0x1aa78 <lif_e010_pad_sector+0x34>
   1aa88:	1c 16       	cp	r1, r28
   1aa8a:	1d 06       	cpc	r1, r29
   1aa8c:	14 f0       	brlt	.+4      	; 0x1aa92 <lif_e010_pad_sector+0x4e>
   1aa8e:	c1 e0       	ldi	r28, 0x01	; 1
   1aa90:	d0 e0       	ldi	r29, 0x00	; 0

    pos = (offset + (long) ind)  % (long) LIF_SECTOR_SIZE;
   1aa92:	ce 01       	movw	r24, r28
   1aa94:	0d 2e       	mov	r0, r29
   1aa96:	00 0c       	add	r0, r0
   1aa98:	aa 0b       	sbc	r26, r26
   1aa9a:	bb 0b       	sbc	r27, r27
   1aa9c:	bc 01       	movw	r22, r24
   1aa9e:	cd 01       	movw	r24, r26
   1aaa0:	6c 0d       	add	r22, r12
   1aaa2:	7d 1d       	adc	r23, r13
   1aaa4:	8e 1d       	adc	r24, r14
   1aaa6:	9f 1d       	adc	r25, r15
   1aaa8:	20 e0       	ldi	r18, 0x00	; 0
   1aaaa:	31 e0       	ldi	r19, 0x01	; 1
   1aaac:	40 e0       	ldi	r20, 0x00	; 0
   1aaae:	50 e0       	ldi	r21, 0x00	; 0
   1aab0:	0e 94 b9 e4 	call	0x1c972	; 0x1c972 <__divmodsi4>
    // NEW SECTOR
    // Debugging make sure we are at sector boundry
    if(pos)
   1aab4:	61 15       	cp	r22, r1
   1aab6:	71 05       	cpc	r23, r1
   1aab8:	a1 f0       	breq	.+40     	; 0x1aae2 <lif_e010_pad_sector+0x9e>
    {
        if(debuglevel & 1)
   1aaba:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   1aabe:	20 ff       	sbrs	r18, 0
   1aac0:	12 c0       	rjmp	.+36     	; 0x1aae6 <lif_e010_pad_sector+0xa2>
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
   1aac2:	ed b7       	in	r30, 0x3d	; 61
   1aac4:	fe b7       	in	r31, 0x3e	; 62
   1aac6:	75 83       	std	Z+5, r23	; 0x05
   1aac8:	64 83       	std	Z+4, r22	; 0x04
   1aaca:	88 e3       	ldi	r24, 0x38	; 56
   1aacc:	98 e3       	ldi	r25, 0x38	; 56
   1aace:	a0 e0       	ldi	r26, 0x00	; 0
   1aad0:	81 83       	std	Z+1, r24	; 0x01
   1aad2:	92 83       	std	Z+2, r25	; 0x02
   1aad4:	a3 83       	std	Z+3, r26	; 0x03
   1aad6:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   1aada:	05 c0       	rjmp	.+10     	; 0x1aae6 <lif_e010_pad_sector+0xa2>
    int pos,rem;
    
    // Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
    if(!pos)
        return(0);
   1aadc:	80 e0       	ldi	r24, 0x00	; 0
   1aade:	90 e0       	ldi	r25, 0x00	; 0
   1aae0:	04 c0       	rjmp	.+8      	; 0x1aaea <lif_e010_pad_sector+0xa6>
   1aae2:	ce 01       	movw	r24, r28
   1aae4:	02 c0       	rjmp	.+4      	; 0x1aaea <lif_e010_pad_sector+0xa6>
    // Debugging make sure we are at sector boundry
    if(pos)
    {
        if(debuglevel & 1)
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
        return(-1);
   1aae6:	8f ef       	ldi	r24, 0xFF	; 255
   1aae8:	9f ef       	ldi	r25, 0xFF	; 255
    }
    return(ind);
}
   1aaea:	cd b7       	in	r28, 0x3d	; 61
   1aaec:	de b7       	in	r29, 0x3e	; 62
   1aaee:	25 96       	adiw	r28, 0x05	; 5
   1aaf0:	e8 e0       	ldi	r30, 0x08	; 8
   1aaf2:	0c 94 3f e5 	jmp	0x1ca7e	; 0x1ca7e <__epilogue_restores__+0x14>

0001aaf6 <lif_ascii_string_to_e010>:
/// @param[in] offset: E010 data sector offset, only used in formatting wbuf with headers
/// @param[in] wbuf: E010 data result
/// @return size of E010 data
MEMSPACE
int lif_ascii_string_to_e010(char *str, long offset, uint8_t *wbuf)
{
   1aaf6:	a5 e0       	ldi	r26, 0x05	; 5
   1aaf8:	b0 e0       	ldi	r27, 0x00	; 0
   1aafa:	e1 e8       	ldi	r30, 0x81	; 129
   1aafc:	f5 ed       	ldi	r31, 0xD5	; 213
   1aafe:	0c 94 19 e5 	jmp	0x1ca32	; 0x1ca32 <__prologue_saves__>
   1ab02:	ec 01       	movw	r28, r24
   1ab04:	4a 01       	movw	r8, r20
   1ab06:	5b 01       	movw	r10, r22
   1ab08:	79 01       	movw	r14, r18
    int ind;
    int len;
    int pos,rem;
    
    // String size
    len = strlen(str);
   1ab0a:	fc 01       	movw	r30, r24
   1ab0c:	01 90       	ld	r0, Z+
   1ab0e:	00 20       	and	r0, r0
   1ab10:	e9 f7       	brne	.-6      	; 0x1ab0c <lif_ascii_string_to_e010+0x16>
   1ab12:	31 97       	sbiw	r30, 0x01	; 1
   1ab14:	6f 01       	movw	r12, r30
   1ab16:	c8 1a       	sub	r12, r24
   1ab18:	d9 0a       	sbc	r13, r25
    ind = 0;

    // Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
    // Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1ab1a:	41 2c       	mov	r4, r1
   1ab1c:	51 2c       	mov	r5, r1
   1ab1e:	32 01       	movw	r6, r4
   1ab20:	53 94       	inc	r5
   1ab22:	cb 01       	movw	r24, r22
   1ab24:	ba 01       	movw	r22, r20
   1ab26:	a3 01       	movw	r20, r6
   1ab28:	92 01       	movw	r18, r4
   1ab2a:	0e 94 b9 e4 	call	0x1c972	; 0x1c972 <__divmodsi4>
   1ab2e:	21 2c       	mov	r2, r1
   1ab30:	33 24       	eor	r3, r3
   1ab32:	33 94       	inc	r3
   1ab34:	c1 01       	movw	r24, r2
   1ab36:	86 1b       	sub	r24, r22
   1ab38:	97 0b       	sbc	r25, r23

    /// We ALWAYS pad a sector if:
    ///   There is no room for a 0xdf single header 
    ///   - OR - 
    ///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
   1ab3a:	86 30       	cpi	r24, 0x06	; 6
   1ab3c:	91 05       	cpc	r25, r1
   1ab3e:	20 f0       	brcs	.+8      	; 0x1ab48 <lif_ascii_string_to_e010+0x52>
    ind = 0;

    // Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
    // Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1ab40:	1c 01       	movw	r2, r24
    
    // String size
    len = strlen(str);

    // Output buffer index
    ind = 0;
   1ab42:	00 e0       	ldi	r16, 0x00	; 0
   1ab44:	10 e0       	ldi	r17, 0x00	; 0
   1ab46:	17 c0       	rjmp	.+46     	; 0x1ab76 <lif_ascii_string_to_e010+0x80>
    ///   There is no room for a 0xdf single header 
    ///   - OR - 
    ///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
    {
        ind = lif_e010_pad_sector(offset, wbuf);
   1ab48:	a7 01       	movw	r20, r14
   1ab4a:	c5 01       	movw	r24, r10
   1ab4c:	b4 01       	movw	r22, r8
   1ab4e:	7a df       	rcall	.-268    	; 0x1aa44 <lif_e010_pad_sector>
   1ab50:	8c 01       	movw	r16, r24
        if(ind < 0)
   1ab52:	97 fd       	sbrc	r25, 7
   1ab54:	81 c0       	rjmp	.+258    	; 0x1ac58 <lif_ascii_string_to_e010+0x162>
            return(ind);

        // Compute the current offset in this sector
        pos = ((offset + ind) % (long) LIF_SECTOR_SIZE);
        // Number of bytes free in this sector
        rem = (long) LIF_SECTOR_SIZE - pos;
   1ab56:	09 2e       	mov	r0, r25
   1ab58:	00 0c       	add	r0, r0
   1ab5a:	aa 0b       	sbc	r26, r26
   1ab5c:	bb 0b       	sbc	r27, r27
   1ab5e:	bc 01       	movw	r22, r24
   1ab60:	cd 01       	movw	r24, r26
   1ab62:	68 0d       	add	r22, r8
   1ab64:	79 1d       	adc	r23, r9
   1ab66:	8a 1d       	adc	r24, r10
   1ab68:	9b 1d       	adc	r25, r11
   1ab6a:	a3 01       	movw	r20, r6
   1ab6c:	92 01       	movw	r18, r4
   1ab6e:	0e 94 b9 e4 	call	0x1c972	; 0x1c972 <__divmodsi4>
   1ab72:	26 1a       	sub	r2, r22
   1ab74:	37 0a       	sbc	r3, r23
   1ab76:	f7 01       	movw	r30, r14
   1ab78:	e0 0f       	add	r30, r16
   1ab7a:	f1 1f       	adc	r31, r17
   1ab7c:	0d 5f       	subi	r16, 0xFD	; 253
   1ab7e:	1f 4f       	sbci	r17, 0xFF	; 255
    }

    // Note: IMPORTANT we have >= 6 bytes!!!

    // Do not have to split, there is enough room
    if(rem >= (3 + len)) 
   1ab80:	c6 01       	movw	r24, r12
   1ab82:	02 96       	adiw	r24, 0x02	; 2
   1ab84:	82 15       	cp	r24, r2
   1ab86:	93 05       	cpc	r25, r3
   1ab88:	84 f4       	brge	.+32     	; 0x1abaa <lif_ascii_string_to_e010+0xb4>
    {

        // Write string in new sector
        // The full string + header will fit
        wbuf[ind++] = 0xDF;
   1ab8a:	8f ed       	ldi	r24, 0xDF	; 223
   1ab8c:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1ab8e:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >> 8) & 0xff;
   1ab90:	d2 82       	std	Z+2, r13	; 0x02
   1ab92:	f7 01       	movw	r30, r14
   1ab94:	e0 0f       	add	r30, r16
   1ab96:	f1 1f       	adc	r31, r17
   1ab98:	cf 01       	movw	r24, r30
   1ab9a:	8e 19       	sub	r24, r14
   1ab9c:	9f 09       	sbc	r25, r15
        // Write string
        while(*str)
   1ab9e:	29 91       	ld	r18, Y+
   1aba0:	22 23       	and	r18, r18
   1aba2:	09 f4       	brne	.+2      	; 0x1aba6 <lif_ascii_string_to_e010+0xb0>
   1aba4:	59 c0       	rjmp	.+178    	; 0x1ac58 <lif_ascii_string_to_e010+0x162>
            wbuf[ind++] = *str++;
   1aba6:	21 93       	st	Z+, r18
   1aba8:	f7 cf       	rjmp	.-18     	; 0x1ab98 <lif_ascii_string_to_e010+0xa2>

        // CURRENT SECTOR
        // String spans a sector , so split the string

        // 1st Split string header
        wbuf[ind++] = 0xCF;
   1abaa:	8f ec       	ldi	r24, 0xCF	; 207
   1abac:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1abae:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >>8) & 0xff;
   1abb0:	d2 82       	std	Z+2, r13	; 0x02
   1abb2:	d7 01       	movw	r26, r14
   1abb4:	a0 0f       	add	r26, r16
   1abb6:	b1 1f       	adc	r27, r17
        // Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1abb8:	fe 01       	movw	r30, r28
   1abba:	81 91       	ld	r24, Z+
   1abbc:	81 11       	cpse	r24, r1
   1abbe:	0e c0       	rjmp	.+28     	; 0x1abdc <lif_ascii_string_to_e010+0xe6>
            wbuf[ind++] = *str++;

        // NEW SECTOR
        // Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
   1abc0:	c8 01       	movw	r24, r16
   1abc2:	01 2e       	mov	r0, r17
   1abc4:	00 0c       	add	r0, r0
   1abc6:	aa 0b       	sbc	r26, r26
   1abc8:	bb 0b       	sbc	r27, r27
   1abca:	bc 01       	movw	r22, r24
   1abcc:	cd 01       	movw	r24, r26
   1abce:	68 0d       	add	r22, r8
   1abd0:	79 1d       	adc	r23, r9
   1abd2:	8a 1d       	adc	r24, r10
   1abd4:	9b 1d       	adc	r25, r11
   1abd6:	61 11       	cpse	r22, r1
   1abd8:	09 c0       	rjmp	.+18     	; 0x1abec <lif_ascii_string_to_e010+0xf6>
   1abda:	1f c0       	rjmp	.+62     	; 0x1ac1a <lif_ascii_string_to_e010+0x124>
        // 1st Split string header
        wbuf[ind++] = 0xCF;
        wbuf[ind++] = len & 0xff;
        wbuf[ind++] = (len >>8) & 0xff;
        // Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1abdc:	02 15       	cp	r16, r2
   1abde:	13 05       	cpc	r17, r3
   1abe0:	7c f7       	brge	.-34     	; 0x1abc0 <lif_ascii_string_to_e010+0xca>
            wbuf[ind++] = *str++;
   1abe2:	0f 5f       	subi	r16, 0xFF	; 255
   1abe4:	1f 4f       	sbci	r17, 0xFF	; 255
   1abe6:	8d 93       	st	X+, r24
   1abe8:	ef 01       	movw	r28, r30
   1abea:	e6 cf       	rjmp	.-52     	; 0x1abb8 <lif_ascii_string_to_e010+0xc2>

        // NEW SECTOR
        // Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & 1)
   1abec:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   1abf0:	20 ff       	sbrs	r18, 0
   1abf2:	30 c0       	rjmp	.+96     	; 0x1ac54 <lif_ascii_string_to_e010+0x15e>
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
   1abf4:	20 e0       	ldi	r18, 0x00	; 0
   1abf6:	31 e0       	ldi	r19, 0x01	; 1
   1abf8:	40 e0       	ldi	r20, 0x00	; 0
   1abfa:	50 e0       	ldi	r21, 0x00	; 0
   1abfc:	0e 94 b9 e4 	call	0x1c972	; 0x1c972 <__divmodsi4>
   1ac00:	ed b7       	in	r30, 0x3d	; 61
   1ac02:	fe b7       	in	r31, 0x3e	; 62
   1ac04:	75 83       	std	Z+5, r23	; 0x05
   1ac06:	64 83       	std	Z+4, r22	; 0x04
   1ac08:	84 e1       	ldi	r24, 0x14	; 20
   1ac0a:	98 e3       	ldi	r25, 0x38	; 56
   1ac0c:	a0 e0       	ldi	r26, 0x00	; 0
   1ac0e:	81 83       	std	Z+1, r24	; 0x01
   1ac10:	92 83       	std	Z+2, r25	; 0x02
   1ac12:	a3 83       	std	Z+3, r26	; 0x03
   1ac14:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   1ac18:	1d c0       	rjmp	.+58     	; 0x1ac54 <lif_ascii_string_to_e010+0x15e>
            return(-1);
        }

        // Update remining string length
        len = strlen(str);
   1ac1a:	fe 01       	movw	r30, r28
   1ac1c:	01 90       	ld	r0, Z+
   1ac1e:	00 20       	and	r0, r0
   1ac20:	e9 f7       	brne	.-6      	; 0x1ac1c <lif_ascii_string_to_e010+0x126>
   1ac22:	31 97       	sbiw	r30, 0x01	; 1
   1ac24:	9f 01       	movw	r18, r30
   1ac26:	2c 1b       	sub	r18, r28
   1ac28:	3d 0b       	sbc	r19, r29
        // 2nd Split string header 
        wbuf[ind++] = 0x6F;
   1ac2a:	d7 01       	movw	r26, r14
   1ac2c:	a0 0f       	add	r26, r16
   1ac2e:	b1 1f       	adc	r27, r17
   1ac30:	8f e6       	ldi	r24, 0x6F	; 111
   1ac32:	8c 93       	st	X, r24
        wbuf[ind++] = (len & 0xff);
   1ac34:	fd 01       	movw	r30, r26
   1ac36:	21 83       	std	Z+1, r18	; 0x01
        wbuf[ind++] = (len>>8) & 0xff;
   1ac38:	32 83       	std	Z+2, r19	; 0x02
   1ac3a:	0d 5f       	subi	r16, 0xFD	; 253
   1ac3c:	1f 4f       	sbci	r17, 0xFF	; 255
   1ac3e:	f7 01       	movw	r30, r14
   1ac40:	e0 0f       	add	r30, r16
   1ac42:	f1 1f       	adc	r31, r17
   1ac44:	cf 01       	movw	r24, r30
   1ac46:	8e 19       	sub	r24, r14
   1ac48:	9f 09       	sbc	r25, r15
        // Write string
        while(*str)
   1ac4a:	29 91       	ld	r18, Y+
   1ac4c:	22 23       	and	r18, r18
   1ac4e:	21 f0       	breq	.+8      	; 0x1ac58 <lif_ascii_string_to_e010+0x162>
            wbuf[ind++] = *str++;
   1ac50:	21 93       	st	Z+, r18
   1ac52:	f8 cf       	rjmp	.-16     	; 0x1ac44 <lif_ascii_string_to_e010+0x14e>
        // Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & 1)
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
            return(-1);
   1ac54:	8f ef       	ldi	r24, 0xFF	; 255
   1ac56:	9f ef       	ldi	r25, 0xFF	; 255
        while(*str)
            wbuf[ind++] = *str++;
    }

    return(ind);
}
   1ac58:	cd b7       	in	r28, 0x3d	; 61
   1ac5a:	de b7       	in	r29, 0x3e	; 62
   1ac5c:	25 96       	adiw	r28, 0x05	; 5
   1ac5e:	e2 e1       	ldi	r30, 0x12	; 18
   1ac60:	0c 94 35 e5 	jmp	0x1ca6a	; 0x1ca6a <__epilogue_restores__>

0001ac64 <lif_add_ascii_file_as_e010_wrapper>:
/// @param[in] userfile: User ASCII file source
/// @param[in] *LIF: Where to write file if set (not NULL)
/// @return size of formatted result
MEMSPACE
long lif_add_ascii_file_as_e010_wrapper(lif_t *LIF, uint32_t offset, char *username)
{
   1ac64:	ad e0       	ldi	r26, 0x0D	; 13
   1ac66:	b3 e0       	ldi	r27, 0x03	; 3
   1ac68:	e8 e3       	ldi	r30, 0x38	; 56
   1ac6a:	f6 ed       	ldi	r31, 0xD6	; 214
   1ac6c:	0c 94 19 e5 	jmp	0x1ca32	; 0x1ca32 <__prologue_saves__>
   1ac70:	5c 01       	movw	r10, r24
   1ac72:	2a 01       	movw	r4, r20
   1ac74:	3b 01       	movw	r6, r22
   1ac76:	c9 01       	movw	r24, r18
    // strings are limited to less then this
    char str[LIF_SECTOR_SIZE+1];
    // output buffer must be larger then a single sectors because of either headers or padding
    uint8_t obuf[LIF_SECTOR_SIZE*2];

    fi = lif_open(username, "rb");
   1ac78:	6c e1       	ldi	r22, 0x1C	; 28
   1ac7a:	78 e0       	ldi	r23, 0x08	; 8
   1ac7c:	0e 94 07 c2 	call	0x1840e	; 0x1840e <lif_open>
   1ac80:	c7 5f       	subi	r28, 0xF7	; 247
   1ac82:	dc 4f       	sbci	r29, 0xFC	; 252
   1ac84:	99 83       	std	Y+1, r25	; 0x01
   1ac86:	88 83       	st	Y, r24
   1ac88:	c9 50       	subi	r28, 0x09	; 9
   1ac8a:	d3 40       	sbci	r29, 0x03	; 3
    if(fi == NULL)
   1ac8c:	89 2b       	or	r24, r25
   1ac8e:	09 f4       	brne	.+2      	; 0x1ac92 <lif_add_ascii_file_as_e010_wrapper+0x2e>
   1ac90:	63 c0       	rjmp	.+198    	; 0x1ad58 <lif_add_ascii_file_as_e010_wrapper+0xf4>
   1ac92:	81 2c       	mov	r8, r1
   1ac94:	91 2c       	mov	r9, r1
   1ac96:	c1 2c       	mov	r12, r1
   1ac98:	d1 2c       	mov	r13, r1
   1ac9a:	76 01       	movw	r14, r12

        if(count > 256)
        {       
            count = 0;
            if(LIF)
                printf("\tWrote: %8ld\r", (long)bytes);
   1ac9c:	86 e0       	ldi	r24, 0x06	; 6
   1ac9e:	98 e3       	ldi	r25, 0x38	; 56
   1aca0:	9c 01       	movw	r18, r24
   1aca2:	40 e0       	ldi	r20, 0x00	; 0
   1aca4:	c5 5f       	subi	r28, 0xF5	; 245
   1aca6:	dc 4f       	sbci	r29, 0xFC	; 252
   1aca8:	28 83       	st	Y, r18
   1acaa:	39 83       	std	Y+1, r19	; 0x01
   1acac:	4a 83       	std	Y+2, r20	; 0x02
   1acae:	cb 50       	subi	r28, 0x0B	; 11
   1acb0:	d3 40       	sbci	r29, 0x03	; 3
   1acb2:	14 c0       	rjmp	.+40     	; 0x1acdc <lif_add_ascii_file_as_e010_wrapper+0x78>
                fclose(fi);
                return(-1);
            }
        }

        offset += size;
   1acb4:	c1 01       	movw	r24, r2
   1acb6:	03 2c       	mov	r0, r3
   1acb8:	00 0c       	add	r0, r0
   1acba:	aa 0b       	sbc	r26, r26
   1acbc:	bb 0b       	sbc	r27, r27
   1acbe:	48 0e       	add	r4, r24
   1acc0:	59 1e       	adc	r5, r25
   1acc2:	6a 1e       	adc	r6, r26
   1acc4:	7b 1e       	adc	r7, r27
        bytes += size;
   1acc6:	c8 0e       	add	r12, r24
   1acc8:	d9 1e       	adc	r13, r25
   1acca:	ea 1e       	adc	r14, r26
   1accc:	fb 1e       	adc	r15, r27
        count += size;
   1acce:	82 0c       	add	r8, r2
   1acd0:	93 1c       	adc	r9, r3

        if(count > 256)
   1acd2:	31 e0       	ldi	r19, 0x01	; 1
   1acd4:	83 16       	cp	r8, r19
   1acd6:	93 06       	cpc	r9, r19
   1acd8:	0c f0       	brlt	.+2      	; 0x1acdc <lif_add_ascii_file_as_e010_wrapper+0x78>
   1acda:	43 c0       	rjmp	.+134    	; 0x1ad62 <lif_add_ascii_file_as_e010_wrapper+0xfe>
    bytes = 0;
    count = 0;

    // Read user file and write LIF records
    // reserve 3 + LIF header bytes + 1 (EOS)
    while( fgets((char *)str,(int)sizeof(str) - 4, fi) != NULL )
   1acdc:	c7 5f       	subi	r28, 0xF7	; 247
   1acde:	dc 4f       	sbci	r29, 0xFC	; 252
   1ace0:	48 81       	ld	r20, Y
   1ace2:	59 81       	ldd	r21, Y+1	; 0x01
   1ace4:	c9 50       	subi	r28, 0x09	; 9
   1ace6:	d3 40       	sbci	r29, 0x03	; 3
   1ace8:	6d ef       	ldi	r22, 0xFD	; 253
   1acea:	70 e0       	ldi	r23, 0x00	; 0
   1acec:	ce 01       	movw	r24, r28
   1acee:	88 5f       	subi	r24, 0xF8	; 248
   1acf0:	9d 4f       	sbci	r25, 0xFD	; 253
   1acf2:	0e 94 dc 77 	call	0xefb8	; 0xefb8 <fgets>
   1acf6:	89 2b       	or	r24, r25
   1acf8:	09 f4       	brne	.+2      	; 0x1acfc <lif_add_ascii_file_as_e010_wrapper+0x98>
   1acfa:	4b c0       	rjmp	.+150    	; 0x1ad92 <lif_add_ascii_file_as_e010_wrapper+0x12e>
    {
        trim_tail((char *)str);
   1acfc:	ce 01       	movw	r24, r28
   1acfe:	88 5f       	subi	r24, 0xF8	; 248
   1ad00:	9d 4f       	sbci	r25, 0xFD	; 253
   1ad02:	0e 94 c3 33 	call	0x6786	; 0x6786 <trim_tail>

        strcat((char *)str,"\r"); // HP85 lines end with "\r"
   1ad06:	60 ea       	ldi	r22, 0xA0	; 160
   1ad08:	75 e1       	ldi	r23, 0x15	; 21
   1ad0a:	ce 01       	movw	r24, r28
   1ad0c:	88 5f       	subi	r24, 0xF8	; 248
   1ad0e:	9d 4f       	sbci	r25, 0xFD	; 253
   1ad10:	0e 94 06 33 	call	0x660c	; 0x660c <strcat>

        size = lif_ascii_string_to_e010(str, offset, obuf);
   1ad14:	9e 01       	movw	r18, r28
   1ad16:	28 5f       	subi	r18, 0xF8	; 248
   1ad18:	3f 4f       	sbci	r19, 0xFF	; 255
   1ad1a:	b3 01       	movw	r22, r6
   1ad1c:	a2 01       	movw	r20, r4
   1ad1e:	ce 01       	movw	r24, r28
   1ad20:	88 5f       	subi	r24, 0xF8	; 248
   1ad22:	9d 4f       	sbci	r25, 0xFD	; 253
   1ad24:	e8 de       	rcall	.-560    	; 0x1aaf6 <lif_ascii_string_to_e010>
   1ad26:	1c 01       	movw	r2, r24
        // Write string
        // Now Write string
        if(LIF)
   1ad28:	a1 14       	cp	r10, r1
   1ad2a:	b1 04       	cpc	r11, r1
   1ad2c:	19 f2       	breq	.-122    	; 0x1acb4 <lif_add_ascii_file_as_e010_wrapper+0x50>
        {
            len = lif_write(LIF, obuf, offset, size);
   1ad2e:	8c 01       	movw	r16, r24
   1ad30:	a3 01       	movw	r20, r6
   1ad32:	92 01       	movw	r18, r4
   1ad34:	be 01       	movw	r22, r28
   1ad36:	68 5f       	subi	r22, 0xF8	; 248
   1ad38:	7f 4f       	sbci	r23, 0xFF	; 255
   1ad3a:	c5 01       	movw	r24, r10
   1ad3c:	0e 94 dc c2 	call	0x185b8	; 0x185b8 <lif_write>
            if(len < size)
   1ad40:	82 15       	cp	r24, r2
   1ad42:	93 05       	cpc	r25, r3
   1ad44:	0c f0       	brlt	.+2      	; 0x1ad48 <lif_add_ascii_file_as_e010_wrapper+0xe4>
   1ad46:	b6 cf       	rjmp	.-148    	; 0x1acb4 <lif_add_ascii_file_as_e010_wrapper+0x50>
            {
                fclose(fi);
   1ad48:	c7 5f       	subi	r28, 0xF7	; 247
   1ad4a:	dc 4f       	sbci	r29, 0xFC	; 252
   1ad4c:	88 81       	ld	r24, Y
   1ad4e:	99 81       	ldd	r25, Y+1	; 0x01
   1ad50:	c9 50       	subi	r28, 0x09	; 9
   1ad52:	d3 40       	sbci	r29, 0x03	; 3
   1ad54:	0e 94 6e 7e 	call	0xfcdc	; 0xfcdc <fclose>
                return(-1);
   1ad58:	6f ef       	ldi	r22, 0xFF	; 255
   1ad5a:	7f ef       	ldi	r23, 0xFF	; 255
   1ad5c:	8f ef       	ldi	r24, 0xFF	; 255
   1ad5e:	9f ef       	ldi	r25, 0xFF	; 255
   1ad60:	84 c0       	rjmp	.+264    	; 0x1ae6a <lif_add_ascii_file_as_e010_wrapper+0x206>
        count += size;

        if(count > 256)
        {       
            count = 0;
            if(LIF)
   1ad62:	a1 14       	cp	r10, r1
   1ad64:	b1 04       	cpc	r11, r1
   1ad66:	91 f0       	breq	.+36     	; 0x1ad8c <lif_add_ascii_file_as_e010_wrapper+0x128>
                printf("\tWrote: %8ld\r", (long)bytes);
   1ad68:	ed b7       	in	r30, 0x3d	; 61
   1ad6a:	fe b7       	in	r31, 0x3e	; 62
   1ad6c:	c4 82       	std	Z+4, r12	; 0x04
   1ad6e:	d5 82       	std	Z+5, r13	; 0x05
   1ad70:	e6 82       	std	Z+6, r14	; 0x06
   1ad72:	f7 82       	std	Z+7, r15	; 0x07
   1ad74:	c5 5f       	subi	r28, 0xF5	; 245
   1ad76:	dc 4f       	sbci	r29, 0xFC	; 252
   1ad78:	28 81       	ld	r18, Y
   1ad7a:	39 81       	ldd	r19, Y+1	; 0x01
   1ad7c:	4a 81       	ldd	r20, Y+2	; 0x02
   1ad7e:	cb 50       	subi	r28, 0x0B	; 11
   1ad80:	d3 40       	sbci	r29, 0x03	; 3
   1ad82:	21 83       	std	Z+1, r18	; 0x01
   1ad84:	32 83       	std	Z+2, r19	; 0x02
   1ad86:	43 83       	std	Z+3, r20	; 0x03
   1ad88:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
        bytes += size;
        count += size;

        if(count > 256)
        {       
            count = 0;
   1ad8c:	81 2c       	mov	r8, r1
   1ad8e:	91 2c       	mov	r9, r1
   1ad90:	a5 cf       	rjmp	.-182    	; 0x1acdc <lif_add_ascii_file_as_e010_wrapper+0x78>
            if(LIF)
                printf("\tWrote: %8ld\r", (long)bytes);
        }
    }

    fclose(fi);
   1ad92:	c7 5f       	subi	r28, 0xF7	; 247
   1ad94:	dc 4f       	sbci	r29, 0xFC	; 252
   1ad96:	88 81       	ld	r24, Y
   1ad98:	99 81       	ldd	r25, Y+1	; 0x01
   1ad9a:	c9 50       	subi	r28, 0x09	; 9
   1ad9c:	d3 40       	sbci	r29, 0x03	; 3
   1ad9e:	0e 94 6e 7e 	call	0xfcdc	; 0xfcdc <fclose>

    // Write EOF
    str[0] = 0;
   1ada2:	c8 5f       	subi	r28, 0xF8	; 248
   1ada4:	dd 4f       	sbci	r29, 0xFD	; 253
   1ada6:	18 82       	st	Y, r1
   1ada8:	c8 50       	subi	r28, 0x08	; 8
   1adaa:	d2 40       	sbci	r29, 0x02	; 2
    // We only want to return the count of bytes in the file NOT the padding at the end
    // Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);
   1adac:	9e 01       	movw	r18, r28
   1adae:	28 5f       	subi	r18, 0xF8	; 248
   1adb0:	3f 4f       	sbci	r19, 0xFF	; 255
   1adb2:	b3 01       	movw	r22, r6
   1adb4:	a2 01       	movw	r20, r4
   1adb6:	ce 01       	movw	r24, r28
   1adb8:	88 5f       	subi	r24, 0xF8	; 248
   1adba:	9d 4f       	sbci	r25, 0xFD	; 253
   1adbc:	9c de       	rcall	.-712    	; 0x1aaf6 <lif_ascii_string_to_e010>
   1adbe:	4c 01       	movw	r8, r24

    if(LIF)
   1adc0:	a1 14       	cp	r10, r1
   1adc2:	b1 04       	cpc	r11, r1
   1adc4:	d1 f4       	brne	.+52     	; 0x1adfa <lif_add_ascii_file_as_e010_wrapper+0x196>
            return(-1);

    }

    offset += size;
    bytes += size;
   1adc6:	c4 01       	movw	r24, r8
   1adc8:	09 2c       	mov	r0, r9
   1adca:	00 0c       	add	r0, r0
   1adcc:	aa 0b       	sbc	r26, r26
   1adce:	bb 0b       	sbc	r27, r27
   1add0:	c8 0e       	add	r12, r24
   1add2:	d9 1e       	adc	r13, r25
   1add4:	ea 1e       	adc	r14, r26
   1add6:	fb 1e       	adc	r15, r27

    // PAD
    size = lif_e010_pad_sector(offset, obuf);
   1add8:	12 01       	movw	r2, r4
   1adda:	23 01       	movw	r4, r6
   1addc:	28 0e       	add	r2, r24
   1adde:	39 1e       	adc	r3, r25
   1ade0:	4a 1e       	adc	r4, r26
   1ade2:	5b 1e       	adc	r5, r27
   1ade4:	ae 01       	movw	r20, r28
   1ade6:	48 5f       	subi	r20, 0xF8	; 248
   1ade8:	5f 4f       	sbci	r21, 0xFF	; 255
   1adea:	c2 01       	movw	r24, r4
   1adec:	b1 01       	movw	r22, r2
   1adee:	2a de       	rcall	.-940    	; 0x1aa44 <lif_e010_pad_sector>
   1adf0:	3c 01       	movw	r6, r24
    if(LIF)
   1adf2:	a1 14       	cp	r10, r1
   1adf4:	b1 04       	cpc	r11, r1
   1adf6:	e1 f4       	brne	.+56     	; 0x1ae30 <lif_add_ascii_file_as_e010_wrapper+0x1cc>
   1adf8:	36 c0       	rjmp	.+108    	; 0x1ae66 <lif_add_ascii_file_as_e010_wrapper+0x202>
    // Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);

    if(LIF)
    {
        printf("\tWrote: %8ld\r", (long)bytes);
   1adfa:	ed b7       	in	r30, 0x3d	; 61
   1adfc:	fe b7       	in	r31, 0x3e	; 62
   1adfe:	c4 82       	std	Z+4, r12	; 0x04
   1ae00:	d5 82       	std	Z+5, r13	; 0x05
   1ae02:	e6 82       	std	Z+6, r14	; 0x06
   1ae04:	f7 82       	std	Z+7, r15	; 0x07
   1ae06:	88 ef       	ldi	r24, 0xF8	; 248
   1ae08:	97 e3       	ldi	r25, 0x37	; 55
   1ae0a:	a0 e0       	ldi	r26, 0x00	; 0
   1ae0c:	81 83       	std	Z+1, r24	; 0x01
   1ae0e:	92 83       	std	Z+2, r25	; 0x02
   1ae10:	a3 83       	std	Z+3, r26	; 0x03
   1ae12:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
        len = lif_write(LIF, obuf, offset, size);
   1ae16:	84 01       	movw	r16, r8
   1ae18:	a3 01       	movw	r20, r6
   1ae1a:	92 01       	movw	r18, r4
   1ae1c:	be 01       	movw	r22, r28
   1ae1e:	68 5f       	subi	r22, 0xF8	; 248
   1ae20:	7f 4f       	sbci	r23, 0xFF	; 255
   1ae22:	c5 01       	movw	r24, r10
   1ae24:	0e 94 dc c2 	call	0x185b8	; 0x185b8 <lif_write>
        if(len < size)
   1ae28:	88 15       	cp	r24, r8
   1ae2a:	99 05       	cpc	r25, r9
   1ae2c:	64 f6       	brge	.-104    	; 0x1adc6 <lif_add_ascii_file_as_e010_wrapper+0x162>
   1ae2e:	94 cf       	rjmp	.-216    	; 0x1ad58 <lif_add_ascii_file_as_e010_wrapper+0xf4>

    // PAD
    size = lif_e010_pad_sector(offset, obuf);
    if(LIF)
    {
        len = lif_write(LIF, obuf, offset, size);
   1ae30:	8c 01       	movw	r16, r24
   1ae32:	a2 01       	movw	r20, r4
   1ae34:	91 01       	movw	r18, r2
   1ae36:	be 01       	movw	r22, r28
   1ae38:	68 5f       	subi	r22, 0xF8	; 248
   1ae3a:	7f 4f       	sbci	r23, 0xFF	; 255
   1ae3c:	c5 01       	movw	r24, r10
   1ae3e:	0e 94 dc c2 	call	0x185b8	; 0x185b8 <lif_write>
        if(len < size)
   1ae42:	86 15       	cp	r24, r6
   1ae44:	97 05       	cpc	r25, r7
   1ae46:	0c f4       	brge	.+2      	; 0x1ae4a <lif_add_ascii_file_as_e010_wrapper+0x1e6>
   1ae48:	87 cf       	rjmp	.-242    	; 0x1ad58 <lif_add_ascii_file_as_e010_wrapper+0xf4>
            return(-1);
    }

    if(LIF)
        printf("\tWrote: %8ld\r",(long)bytes);
   1ae4a:	ed b7       	in	r30, 0x3d	; 61
   1ae4c:	fe b7       	in	r31, 0x3e	; 62
   1ae4e:	c4 82       	std	Z+4, r12	; 0x04
   1ae50:	d5 82       	std	Z+5, r13	; 0x05
   1ae52:	e6 82       	std	Z+6, r14	; 0x06
   1ae54:	f7 82       	std	Z+7, r15	; 0x07
   1ae56:	8a ee       	ldi	r24, 0xEA	; 234
   1ae58:	97 e3       	ldi	r25, 0x37	; 55
   1ae5a:	a0 e0       	ldi	r26, 0x00	; 0
   1ae5c:	81 83       	std	Z+1, r24	; 0x01
   1ae5e:	92 83       	std	Z+2, r25	; 0x02
   1ae60:	a3 83       	std	Z+3, r26	; 0x03
   1ae62:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>

    return(bytes);
   1ae66:	b6 01       	movw	r22, r12
   1ae68:	c7 01       	movw	r24, r14
}
   1ae6a:	c3 5f       	subi	r28, 0xF3	; 243
   1ae6c:	dc 4f       	sbci	r29, 0xFC	; 252
   1ae6e:	e2 e1       	ldi	r30, 0x12	; 18
   1ae70:	0c 94 35 e5 	jmp	0x1ca6a	; 0x1ca6a <__epilogue_restores__>

0001ae74 <lif_add_ascii_file_as_e010>:
/// @param[in] lifname: LIF file name
/// @param[in] userfile: userfile name
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_ascii_file_as_e010(char *lifimagename, char *lifname, char *userfile)
{
   1ae74:	ab e3       	ldi	r26, 0x3B	; 59
   1ae76:	b0 e0       	ldi	r27, 0x00	; 0
   1ae78:	e0 e4       	ldi	r30, 0x40	; 64
   1ae7a:	f7 ed       	ldi	r31, 0xD7	; 215
   1ae7c:	0c 94 19 e5 	jmp	0x1ca32	; 0x1ca32 <__prologue_saves__>
   1ae80:	6c 01       	movw	r12, r24
   1ae82:	1b 01       	movw	r2, r22
   1ae84:	7a 01       	movw	r14, r20
    int index;
    lif_t *LIF;
    stat_t st, *sp;


    if(!*lifimagename)
   1ae86:	fc 01       	movw	r30, r24
   1ae88:	80 81       	ld	r24, Z
   1ae8a:	81 11       	cpse	r24, r1
   1ae8c:	03 c0       	rjmp	.+6      	; 0x1ae94 <lif_add_ascii_file_as_e010+0x20>
    {
        printf("lif_add_ascii_file_as_e010: lifimagename is empty\n");
   1ae8e:	87 eb       	ldi	r24, 0xB7	; 183
   1ae90:	97 e3       	ldi	r25, 0x37	; 55
   1ae92:	1a c0       	rjmp	.+52     	; 0x1aec8 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*lifname)
   1ae94:	fb 01       	movw	r30, r22
   1ae96:	80 81       	ld	r24, Z
   1ae98:	81 11       	cpse	r24, r1
   1ae9a:	03 c0       	rjmp	.+6      	; 0x1aea2 <lif_add_ascii_file_as_e010+0x2e>
    {
        printf("lif_add_ascii_file_as_e010: lifname is empty\n");
   1ae9c:	89 e8       	ldi	r24, 0x89	; 137
   1ae9e:	97 e3       	ldi	r25, 0x37	; 55
   1aea0:	13 c0       	rjmp	.+38     	; 0x1aec8 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*userfile)
   1aea2:	fa 01       	movw	r30, r20
   1aea4:	80 81       	ld	r24, Z
   1aea6:	81 11       	cpse	r24, r1
   1aea8:	03 c0       	rjmp	.+6      	; 0x1aeb0 <lif_add_ascii_file_as_e010+0x3c>
    {
        printf("lif_add_ascii_file_as_e010: userfile is empty\n");
   1aeaa:	8a e5       	ldi	r24, 0x5A	; 90
   1aeac:	97 e3       	ldi	r25, 0x37	; 55
   1aeae:	0c c0       	rjmp	.+24     	; 0x1aec8 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }

    //Get size and date info
    sp = lif_stat(userfile, (stat_t *)&st);
   1aeb0:	be 01       	movw	r22, r28
   1aeb2:	66 5f       	subi	r22, 0xF6	; 246
   1aeb4:	7f 4f       	sbci	r23, 0xFF	; 255
   1aeb6:	ca 01       	movw	r24, r20
   1aeb8:	0e 94 31 c2 	call	0x18462	; 0x18462 <lif_stat>
   1aebc:	9b af       	std	Y+59, r25	; 0x3b
   1aebe:	8a af       	std	Y+58, r24	; 0x3a
    if(!sp)
   1aec0:	89 2b       	or	r24, r25
   1aec2:	59 f4       	brne	.+22     	; 0x1aeda <lif_add_ascii_file_as_e010+0x66>
    {
        printf("lif_add_ascii_file_as_e010: userfile not found\n");
   1aec4:	8a e2       	ldi	r24, 0x2A	; 42
   1aec6:	97 e3       	ldi	r25, 0x37	; 55
   1aec8:	a0 e0       	ldi	r26, 0x00	; 0
   1aeca:	ed b7       	in	r30, 0x3d	; 61
   1aecc:	fe b7       	in	r31, 0x3e	; 62
   1aece:	81 83       	std	Z+1, r24	; 0x01
   1aed0:	92 83       	std	Z+2, r25	; 0x02
   1aed2:	a3 83       	std	Z+3, r26	; 0x03
   1aed4:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   1aed8:	01 c1       	rjmp	.+514    	; 0x1b0dc <lif_add_ascii_file_as_e010+0x268>
        return(-1);
    }

    if(debuglevel & 0x400)
   1aeda:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1aede:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1aee2:	92 ff       	sbrs	r25, 2
   1aee4:	10 c0       	rjmp	.+32     	; 0x1af06 <lif_add_ascii_file_as_e010+0x92>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n", 
   1aee6:	ed b7       	in	r30, 0x3d	; 61
   1aee8:	fe b7       	in	r31, 0x3e	; 62
   1aeea:	f1 86       	std	Z+9, r15	; 0x09
   1aeec:	e0 86       	std	Z+8, r14	; 0x08
   1aeee:	37 82       	std	Z+7, r3	; 0x07
   1aef0:	26 82       	std	Z+6, r2	; 0x06
   1aef2:	d5 82       	std	Z+5, r13	; 0x05
   1aef4:	c4 82       	std	Z+4, r12	; 0x04
   1aef6:	8b ef       	ldi	r24, 0xFB	; 251
   1aef8:	96 e3       	ldi	r25, 0x36	; 54
   1aefa:	a0 e0       	ldi	r26, 0x00	; 0
   1aefc:	81 83       	std	Z+1, r24	; 0x01
   1aefe:	92 83       	std	Z+2, r25	; 0x02
   1af00:	a3 83       	std	Z+3, r26	; 0x03
   1af02:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
            lifimagename, lifname, userfile);

    // Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
   1af06:	97 01       	movw	r18, r14
   1af08:	40 e0       	ldi	r20, 0x00	; 0
   1af0a:	50 e0       	ldi	r21, 0x00	; 0
   1af0c:	ba 01       	movw	r22, r20
   1af0e:	80 e0       	ldi	r24, 0x00	; 0
   1af10:	90 e0       	ldi	r25, 0x00	; 0
   1af12:	a8 de       	rcall	.-688    	; 0x1ac64 <lif_add_ascii_file_as_e010_wrapper>
   1af14:	4b 01       	movw	r8, r22
   1af16:	5c 01       	movw	r10, r24
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1af18:	47 2e       	mov	r4, r23
   1af1a:	58 2e       	mov	r5, r24
   1af1c:	69 2e       	mov	r6, r25
   1af1e:	77 24       	eor	r7, r7
    if(bytes % (long)LIF_SECTOR_SIZE)
   1af20:	66 23       	and	r22, r22
   1af22:	29 f0       	breq	.+10     	; 0x1af2e <lif_add_ascii_file_as_e010+0xba>
        ++sectors;
   1af24:	ff ef       	ldi	r31, 0xFF	; 255
   1af26:	4f 1a       	sub	r4, r31
   1af28:	5f 0a       	sbc	r5, r31
   1af2a:	6f 0a       	sbc	r6, r31
   1af2c:	7f 0a       	sbc	r7, r31

    // Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
   1af2e:	6f e1       	ldi	r22, 0x1F	; 31
   1af30:	78 e0       	ldi	r23, 0x08	; 8
   1af32:	c6 01       	movw	r24, r12
   1af34:	57 da       	rcall	.-2898   	; 0x1a3e4 <lif_open_volume>
   1af36:	8c 01       	movw	r16, r24
    if(LIF == NULL)
   1af38:	00 97       	sbiw	r24, 0x00	; 0
   1af3a:	09 f4       	brne	.+2      	; 0x1af3e <lif_add_ascii_file_as_e010+0xca>
        return(-1); 

    // Now find free record
    index = lif_newdir(LIF, sectors);
   1af3c:	cf c0       	rjmp	.+414    	; 0x1b0dc <lif_add_ascii_file_as_e010+0x268>
   1af3e:	b3 01       	movw	r22, r6
   1af40:	a2 01       	movw	r20, r4
   1af42:	f0 d8       	rcall	.-3616   	; 0x1a124 <lif_newdir>
    if(index == -1)
   1af44:	3c 01       	movw	r6, r24
   1af46:	8f ef       	ldi	r24, 0xFF	; 255
   1af48:	68 16       	cp	r6, r24
   1af4a:	78 06       	cpc	r7, r24
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n", 
   1af4c:	79 f4       	brne	.+30     	; 0x1af6c <lif_add_ascii_file_as_e010+0xf8>
   1af4e:	ed b7       	in	r30, 0x3d	; 61
   1af50:	fe b7       	in	r31, 0x3e	; 62
   1af52:	f7 82       	std	Z+7, r15	; 0x07
   1af54:	e6 82       	std	Z+6, r14	; 0x06
   1af56:	d5 82       	std	Z+5, r13	; 0x05
   1af58:	c4 82       	std	Z+4, r12	; 0x04
   1af5a:	8b ec       	ldi	r24, 0xCB	; 203
   1af5c:	96 e3       	ldi	r25, 0x36	; 54
   1af5e:	a0 e0       	ldi	r26, 0x00	; 0
   1af60:	81 83       	std	Z+1, r24	; 0x01
   1af62:	92 83       	std	Z+2, r25	; 0x02
   1af64:	a3 83       	std	Z+3, r26	; 0x03
   1af66:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
            lif_closedir(LIF);
            return(-1);
    }

    // Initialize the free directory entry
    lif_fixname(LIF->DIR.filename, lifname,10);
   1af6a:	a0 c0       	rjmp	.+320    	; 0x1b0ac <lif_add_ascii_file_as_e010+0x238>
   1af6c:	68 01       	movw	r12, r16
   1af6e:	ff e4       	ldi	r31, 0x4F	; 79
   1af70:	cf 0e       	add	r12, r31
   1af72:	d1 1c       	adc	r13, r1
   1af74:	4a e0       	ldi	r20, 0x0A	; 10
   1af76:	50 e0       	ldi	r21, 0x00	; 0
   1af78:	b1 01       	movw	r22, r2
   1af7a:	c6 01       	movw	r24, r12
   1af7c:	0e 94 dc c3 	call	0x187b8	; 0x187b8 <lif_fixname>
    LIF->DIR.FileType = 0xe010;             // 10
   1af80:	80 e1       	ldi	r24, 0x10	; 16
   1af82:	90 ee       	ldi	r25, 0xE0	; 224
   1af84:	f8 01       	movw	r30, r16
   1af86:	e6 5a       	subi	r30, 0xA6	; 166
   1af88:	ff 4f       	sbci	r31, 0xFF	; 255
   1af8a:	91 83       	std	Z+1, r25	; 0x01
    lif_time2lifbcd(sp->st_mtime, LIF->DIR.date);
   1af8c:	80 83       	st	Z, r24
   1af8e:	ea ad       	ldd	r30, Y+58	; 0x3a
   1af90:	fb ad       	ldd	r31, Y+59	; 0x3b
   1af92:	60 a5       	ldd	r22, Z+40	; 0x28
   1af94:	71 a5       	ldd	r23, Z+41	; 0x29
   1af96:	82 a5       	ldd	r24, Z+42	; 0x2a
   1af98:	93 a5       	ldd	r25, Z+43	; 0x2b
   1af9a:	a8 01       	movw	r20, r16
   1af9c:	4c 59       	subi	r20, 0x9C	; 156
   1af9e:	5f 4f       	sbci	r21, 0xFF	; 255
   1afa0:	0e 94 01 c6 	call	0x18c02	; 0x18c02 <lif_time2lifbcd>

    LIF->DIR.VolNumber = 0x8001;            // 26
   1afa4:	81 e0       	ldi	r24, 0x01	; 1
   1afa6:	90 e8       	ldi	r25, 0x80	; 128
   1afa8:	f8 01       	movw	r30, r16
   1afaa:	e6 59       	subi	r30, 0x96	; 150
   1afac:	ff 4f       	sbci	r31, 0xFF	; 255
   1afae:	91 83       	std	Z+1, r25	; 0x01
    LIF->DIR.FileBytes = bytes;                 // 28
   1afb0:	80 83       	st	Z, r24
   1afb2:	32 96       	adiw	r30, 0x02	; 2
   1afb4:	91 82       	std	Z+1, r9	; 0x01
    LIF->DIR.SectorSize  = 0x100;           // 30
   1afb6:	80 82       	st	Z, r8
   1afb8:	80 e0       	ldi	r24, 0x00	; 0
   1afba:	91 e0       	ldi	r25, 0x01	; 1
   1afbc:	32 96       	adiw	r30, 0x02	; 2
   1afbe:	91 83       	std	Z+1, r25	; 0x01
    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1afc0:	80 83       	st	Z, r24
   1afc2:	58 01       	movw	r10, r16
   1afc4:	fc e5       	ldi	r31, 0x5C	; 92
   1afc6:	af 0e       	add	r10, r31
   1afc8:	b1 1c       	adc	r11, r1
   1afca:	f5 01       	movw	r30, r10
   1afcc:	80 81       	ld	r24, Z
   1afce:	91 81       	ldd	r25, Z+1	; 0x01
   1afd0:	a2 81       	ldd	r26, Z+2	; 0x02
   1afd2:	b3 81       	ldd	r27, Z+3	; 0x03
   1afd4:	22 24       	eor	r2, r2
   1afd6:	38 2e       	mov	r3, r24
   1afd8:	49 2e       	mov	r4, r25

    if(debuglevel & 0x400)
   1afda:	5a 2e       	mov	r5, r26
   1afdc:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1afe0:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1afe4:	92 ff       	sbrs	r25, 2
        lif_dump_vol(LIF,"lif_after lif_newdir");
   1afe6:	05 c0       	rjmp	.+10     	; 0x1aff2 <lif_add_ascii_file_as_e010+0x17e>
   1afe8:	62 ea       	ldi	r22, 0xA2	; 162
   1afea:	75 e1       	ldi	r23, 0x15	; 21
   1afec:	c8 01       	movw	r24, r16
   1afee:	0e 94 ed c6 	call	0x18dda	; 0x18dda <lif_dump_vol>

    // Write converted file into free space first
    bytes = lif_add_ascii_file_as_e010_wrapper(LIF,offset,userfile);
   1aff2:	97 01       	movw	r18, r14
   1aff4:	b2 01       	movw	r22, r4
   1aff6:	a1 01       	movw	r20, r2
   1aff8:	c8 01       	movw	r24, r16
   1affa:	34 de       	rcall	.-920    	; 0x1ac64 <lif_add_ascii_file_as_e010_wrapper>
   1affc:	4b 01       	movw	r8, r22

    if(debuglevel & 0x400)
   1affe:	7c 01       	movw	r14, r24
   1b000:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1b004:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1b008:	92 ff       	sbrs	r25, 2
    {
        printf("New Directory Information AFTER write\n");
   1b00a:	4a c0       	rjmp	.+148    	; 0x1b0a0 <lif_add_ascii_file_as_e010+0x22c>
   1b00c:	84 ea       	ldi	r24, 0xA4	; 164
   1b00e:	96 e3       	ldi	r25, 0x36	; 54
   1b010:	a0 e0       	ldi	r26, 0x00	; 0
   1b012:	ed b7       	in	r30, 0x3d	; 61
   1b014:	fe b7       	in	r31, 0x3e	; 62
   1b016:	81 83       	std	Z+1, r24	; 0x01
   1b018:	92 83       	std	Z+2, r25	; 0x02
   1b01a:	a3 83       	std	Z+3, r26	; 0x03
   1b01c:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
        printf("Name:              %s\n", LIF->DIR.filename);
   1b020:	ed b7       	in	r30, 0x3d	; 61
   1b022:	fe b7       	in	r31, 0x3e	; 62
   1b024:	d5 82       	std	Z+5, r13	; 0x05
   1b026:	c4 82       	std	Z+4, r12	; 0x04
   1b028:	8d e8       	ldi	r24, 0x8D	; 141
   1b02a:	96 e3       	ldi	r25, 0x36	; 54
   1b02c:	a0 e0       	ldi	r26, 0x00	; 0
   1b02e:	81 83       	std	Z+1, r24	; 0x01
   1b030:	92 83       	std	Z+2, r25	; 0x02
   1b032:	a3 83       	std	Z+3, r26	; 0x03
   1b034:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
        printf("Index:            %4d\n", (int)index);
   1b038:	ed b7       	in	r30, 0x3d	; 61
   1b03a:	fe b7       	in	r31, 0x3e	; 62
   1b03c:	75 82       	std	Z+5, r7	; 0x05
   1b03e:	64 82       	std	Z+4, r6	; 0x04
   1b040:	86 e7       	ldi	r24, 0x76	; 118
   1b042:	96 e3       	ldi	r25, 0x36	; 54
   1b044:	a0 e0       	ldi	r26, 0x00	; 0
   1b046:	81 83       	std	Z+1, r24	; 0x01
   1b048:	92 83       	std	Z+2, r25	; 0x02
   1b04a:	a3 83       	std	Z+3, r26	; 0x03
   1b04c:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
        printf("First Sector:     %4lxH\n", (long) LIF->DIR.FileStartSector);
   1b050:	f5 01       	movw	r30, r10
   1b052:	80 81       	ld	r24, Z
   1b054:	91 81       	ldd	r25, Z+1	; 0x01
   1b056:	a2 81       	ldd	r26, Z+2	; 0x02
   1b058:	b3 81       	ldd	r27, Z+3	; 0x03
   1b05a:	ed b7       	in	r30, 0x3d	; 61
   1b05c:	fe b7       	in	r31, 0x3e	; 62
   1b05e:	84 83       	std	Z+4, r24	; 0x04
   1b060:	95 83       	std	Z+5, r25	; 0x05
   1b062:	a6 83       	std	Z+6, r26	; 0x06
   1b064:	b7 83       	std	Z+7, r27	; 0x07
   1b066:	8d e5       	ldi	r24, 0x5D	; 93
   1b068:	96 e3       	ldi	r25, 0x36	; 54
   1b06a:	a0 e0       	ldi	r26, 0x00	; 0
   1b06c:	81 83       	std	Z+1, r24	; 0x01
   1b06e:	92 83       	std	Z+2, r25	; 0x02
   1b070:	a3 83       	std	Z+3, r26	; 0x03
   1b072:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
        printf("File Sectors:     %4lxH\n", (long)LIF->DIR.FileSectors);
   1b076:	f8 01       	movw	r30, r16
   1b078:	e0 5a       	subi	r30, 0xA0	; 160
   1b07a:	ff 4f       	sbci	r31, 0xFF	; 255
   1b07c:	80 81       	ld	r24, Z
   1b07e:	91 81       	ldd	r25, Z+1	; 0x01
   1b080:	a2 81       	ldd	r26, Z+2	; 0x02
   1b082:	b3 81       	ldd	r27, Z+3	; 0x03
   1b084:	ed b7       	in	r30, 0x3d	; 61
   1b086:	fe b7       	in	r31, 0x3e	; 62
   1b088:	84 83       	std	Z+4, r24	; 0x04
   1b08a:	95 83       	std	Z+5, r25	; 0x05
   1b08c:	a6 83       	std	Z+6, r26	; 0x06
   1b08e:	b7 83       	std	Z+7, r27	; 0x07
   1b090:	84 e4       	ldi	r24, 0x44	; 68
   1b092:	96 e3       	ldi	r25, 0x36	; 54
   1b094:	a0 e0       	ldi	r26, 0x00	; 0
   1b096:	81 83       	std	Z+1, r24	; 0x01
   1b098:	92 83       	std	Z+2, r25	; 0x02
   1b09a:	a3 83       	std	Z+3, r26	; 0x03
   1b09c:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    }

    // Write directory record
    // Note: lif_newdir alrwady did the new EOF
    if( !lif_writedirindex(LIF,index))
   1b0a0:	b3 01       	movw	r22, r6
   1b0a2:	c8 01       	movw	r24, r16
   1b0a4:	0e 94 2c cc 	call	0x19858	; 0x19858 <lif_writedirindex>
   1b0a8:	89 2b       	or	r24, r25
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b0aa:	21 f4       	brne	.+8      	; 0x1b0b4 <lif_add_ascii_file_as_e010+0x240>
   1b0ac:	c8 01       	movw	r24, r16
   1b0ae:	0e 94 37 cb 	call	0x1966e	; 0x1966e <lif_close_volume>
   1b0b2:	14 c0       	rjmp	.+40     	; 0x1b0dc <lif_add_ascii_file_as_e010+0x268>
   1b0b4:	c8 01       	movw	r24, r16
   1b0b6:	0e 94 37 cb 	call	0x1966e	; 0x1966e <lif_close_volume>
        return(-1);
    }

    lif_closedir(LIF);

    printf("\tWrote: %8ld\n", bytes);
   1b0ba:	ed b7       	in	r30, 0x3d	; 61
   1b0bc:	fe b7       	in	r31, 0x3e	; 62
   1b0be:	84 82       	std	Z+4, r8	; 0x04
   1b0c0:	95 82       	std	Z+5, r9	; 0x05
   1b0c2:	e6 82       	std	Z+6, r14	; 0x06
   1b0c4:	f7 82       	std	Z+7, r15	; 0x07
   1b0c6:	86 e3       	ldi	r24, 0x36	; 54
   1b0c8:	96 e3       	ldi	r25, 0x36	; 54
   1b0ca:	a0 e0       	ldi	r26, 0x00	; 0
   1b0cc:	81 83       	std	Z+1, r24	; 0x01
   1b0ce:	92 83       	std	Z+2, r25	; 0x02
   1b0d0:	a3 83       	std	Z+3, r26	; 0x03
   1b0d2:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>

    // Return file size
    return(bytes);
   1b0d6:	b4 01       	movw	r22, r8
   1b0d8:	c7 01       	movw	r24, r14
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
    if(LIF == NULL)
        return(-1); 
   1b0da:	04 c0       	rjmp	.+8      	; 0x1b0e4 <lif_add_ascii_file_as_e010+0x270>
   1b0dc:	6f ef       	ldi	r22, 0xFF	; 255
   1b0de:	7f ef       	ldi	r23, 0xFF	; 255
   1b0e0:	8f ef       	ldi	r24, 0xFF	; 255

    printf("\tWrote: %8ld\n", bytes);

    // Return file size
    return(bytes);
}
   1b0e2:	9f ef       	ldi	r25, 0xFF	; 255
   1b0e4:	eb 96       	adiw	r28, 0x3b	; 59
   1b0e6:	e2 e1       	ldi	r30, 0x12	; 18
   1b0e8:	0c 94 35 e5 	jmp	0x1ca6a	; 0x1ca6a <__epilogue_restores__>

0001b0ec <lif_extract_e010_as_ascii>:
/// @param[in] lifname:  name of file in LIF image
/// @param[in] username: name to call the extracted image
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_e010_as_ascii(char *lifimagename, char *lifname, char *username)
{
   1b0ec:	a7 e3       	ldi	r26, 0x37	; 55
   1b0ee:	b2 e0       	ldi	r27, 0x02	; 2
   1b0f0:	ec e7       	ldi	r30, 0x7C	; 124
   1b0f2:	f8 ed       	ldi	r31, 0xD8	; 216
   1b0f4:	0c 94 19 e5 	jmp	0x1ca32	; 0x1ca32 <__prologue_saves__>
   1b0f8:	7c 01       	movw	r14, r24
   1b0fa:	8b 01       	movw	r16, r22
   1b0fc:	ca 5d       	subi	r28, 0xDA	; 218
   1b0fe:	dd 4f       	sbci	r29, 0xFD	; 253
   1b100:	59 83       	std	Y+1, r21	; 0x01
   1b102:	48 83       	st	Y, r20
   1b104:	c6 52       	subi	r28, 0x26	; 38
   1b106:	d2 40       	sbci	r29, 0x02	; 2
    uint8_t buf[LIF_SECTOR_SIZE+4];
    // Write buffer, FYI: will ALWAYS be smaller then the read data buffer
    uint8_t wbuf[LIF_SECTOR_SIZE+4];


    LIF = lif_open_volume(lifimagename,"r");
   1b108:	60 e6       	ldi	r22, 0x60	; 96
   1b10a:	72 e0       	ldi	r23, 0x02	; 2
   1b10c:	6b d9       	rcall	.-3370   	; 0x1a3e4 <lif_open_volume>
   1b10e:	6c 01       	movw	r12, r24
    if(LIF == NULL)
   1b110:	00 97       	sbiw	r24, 0x00	; 0
   1b112:	69 f4       	brne	.+26     	; 0x1b12e <lif_extract_e010_as_ascii+0x42>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1b114:	ed b7       	in	r30, 0x3d	; 61
   1b116:	fe b7       	in	r31, 0x3e	; 62
   1b118:	f5 82       	std	Z+5, r15	; 0x05
   1b11a:	e4 82       	std	Z+4, r14	; 0x04
   1b11c:	8e e1       	ldi	r24, 0x1E	; 30
   1b11e:	96 e3       	ldi	r25, 0x36	; 54
   1b120:	a0 e0       	ldi	r26, 0x00	; 0
   1b122:	81 83       	std	Z+1, r24	; 0x01
   1b124:	92 83       	std	Z+2, r25	; 0x02
   1b126:	a3 83       	std	Z+3, r26	; 0x03
   1b128:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   1b12c:	13 c0       	rjmp	.+38     	; 0x1b154 <lif_extract_e010_as_ascii+0x68>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1b12e:	b8 01       	movw	r22, r16
   1b130:	28 dc       	rcall	.-1968   	; 0x1a982 <lif_find_file>
    if(index == -1)
   1b132:	01 96       	adiw	r24, 0x01	; 1
   1b134:	91 f4       	brne	.+36     	; 0x1b15a <lif_extract_e010_as_ascii+0x6e>
    {
        printf("LIF File not found:%s\n", lifname);
   1b136:	ed b7       	in	r30, 0x3d	; 61
   1b138:	fe b7       	in	r31, 0x3e	; 62
   1b13a:	15 83       	std	Z+5, r17	; 0x05
   1b13c:	04 83       	std	Z+4, r16	; 0x04
   1b13e:	87 e0       	ldi	r24, 0x07	; 7
   1b140:	96 e3       	ldi	r25, 0x36	; 54
   1b142:	a0 e0       	ldi	r26, 0x00	; 0
   1b144:	81 83       	std	Z+1, r24	; 0x01
   1b146:	92 83       	std	Z+2, r25	; 0x02
   1b148:	a3 83       	std	Z+3, r26	; 0x03
   1b14a:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b14e:	c6 01       	movw	r24, r12
   1b150:	0e 94 37 cb 	call	0x1966e	; 0x1966e <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("LIF File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1b154:	80 e0       	ldi	r24, 0x00	; 0
   1b156:	90 e0       	ldi	r25, 0x00	; 0
   1b158:	73 c2       	rjmp	.+1254   	; 0x1b640 <lif_extract_e010_as_ascii+0x554>
    }

    if((LIF->DIR.FileType & 0xFFFC) != 0xE010)
   1b15a:	f6 01       	movw	r30, r12
   1b15c:	e6 5a       	subi	r30, 0xA6	; 166
   1b15e:	ff 4f       	sbci	r31, 0xFF	; 255
   1b160:	80 81       	ld	r24, Z
   1b162:	91 81       	ldd	r25, Z+1	; 0x01
   1b164:	9c 01       	movw	r18, r24
   1b166:	2c 7f       	andi	r18, 0xFC	; 252
   1b168:	20 31       	cpi	r18, 0x10	; 16
   1b16a:	30 4e       	sbci	r19, 0xE0	; 224
   1b16c:	a9 f0       	breq	.+42     	; 0x1b198 <lif_extract_e010_as_ascii+0xac>
    {
        printf("File %s has wrong type:[%04XH] expected 0xE010..0xE013\n", username, (int) LIF->DIR.FileType);
   1b16e:	ed b7       	in	r30, 0x3d	; 61
   1b170:	fe b7       	in	r31, 0x3e	; 62
   1b172:	97 83       	std	Z+7, r25	; 0x07
   1b174:	86 83       	std	Z+6, r24	; 0x06
   1b176:	ca 5d       	subi	r28, 0xDA	; 218
   1b178:	dd 4f       	sbci	r29, 0xFD	; 253
   1b17a:	28 81       	ld	r18, Y
   1b17c:	39 81       	ldd	r19, Y+1	; 0x01
   1b17e:	c6 52       	subi	r28, 0x26	; 38
   1b180:	d2 40       	sbci	r29, 0x02	; 2
   1b182:	35 83       	std	Z+5, r19	; 0x05
   1b184:	24 83       	std	Z+4, r18	; 0x04
   1b186:	8f ec       	ldi	r24, 0xCF	; 207
   1b188:	95 e3       	ldi	r25, 0x35	; 53
   1b18a:	a0 e0       	ldi	r26, 0x00	; 0
   1b18c:	81 83       	std	Z+1, r24	; 0x01
   1b18e:	92 83       	std	Z+2, r25	; 0x02
   1b190:	a3 83       	std	Z+3, r26	; 0x03
   1b192:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   1b196:	db cf       	rjmp	.-74     	; 0x1b14e <lif_extract_e010_as_ascii+0x62>
        lif_closedir(LIF);
        return(0);
    }

    start = LIF->DIR.FileStartSector;
   1b198:	f6 01       	movw	r30, r12
   1b19a:	e4 5a       	subi	r30, 0xA4	; 164
   1b19c:	ff 4f       	sbci	r31, 0xFF	; 255
   1b19e:	80 80       	ld	r8, Z
   1b1a0:	91 80       	ldd	r9, Z+1	; 0x01
   1b1a2:	a2 80       	ldd	r10, Z+2	; 0x02
   1b1a4:	b3 80       	ldd	r11, Z+3	; 0x03
    end = start + LIF->DIR.FileSectors;
   1b1a6:	34 96       	adiw	r30, 0x04	; 4
   1b1a8:	80 81       	ld	r24, Z
   1b1aa:	91 81       	ldd	r25, Z+1	; 0x01
   1b1ac:	a2 81       	ldd	r26, Z+2	; 0x02
   1b1ae:	b3 81       	ldd	r27, Z+3	; 0x03
   1b1b0:	a5 01       	movw	r20, r10
   1b1b2:	94 01       	movw	r18, r8
   1b1b4:	28 0f       	add	r18, r24
   1b1b6:	39 1f       	adc	r19, r25
   1b1b8:	4a 1f       	adc	r20, r26
   1b1ba:	5b 1f       	adc	r21, r27
   1b1bc:	c4 5d       	subi	r28, 0xD4	; 212
   1b1be:	dd 4f       	sbci	r29, 0xFD	; 253
   1b1c0:	28 83       	st	Y, r18
   1b1c2:	39 83       	std	Y+1, r19	; 0x01
   1b1c4:	4a 83       	std	Y+2, r20	; 0x02
   1b1c6:	5b 83       	std	Y+3, r21	; 0x03
   1b1c8:	cc 52       	subi	r28, 0x2C	; 44
   1b1ca:	d2 40       	sbci	r29, 0x02	; 2

    t = lif_lifbcd2time(LIF->DIR.date);
   1b1cc:	c6 01       	movw	r24, r12
   1b1ce:	8c 59       	subi	r24, 0x9C	; 156
   1b1d0:	9f 4f       	sbci	r25, 0xFF	; 255
   1b1d2:	0e 94 43 c6 	call	0x18c86	; 0x18c86 <lif_lifbcd2time>
   1b1d6:	c8 5d       	subi	r28, 0xD8	; 216
   1b1d8:	dd 4f       	sbci	r29, 0xFD	; 253
   1b1da:	68 83       	st	Y, r22
   1b1dc:	79 83       	std	Y+1, r23	; 0x01
   1b1de:	8a 83       	std	Y+2, r24	; 0x02
   1b1e0:	9b 83       	std	Y+3, r25	; 0x03
   1b1e2:	c8 52       	subi	r28, 0x28	; 40
   1b1e4:	d2 40       	sbci	r29, 0x02	; 2

    offset = start * (long) LIF_SECTOR_SIZE;
   1b1e6:	ba 2d       	mov	r27, r10
   1b1e8:	a9 2d       	mov	r26, r9
   1b1ea:	98 2d       	mov	r25, r8
   1b1ec:	88 27       	eor	r24, r24
   1b1ee:	c2 5e       	subi	r28, 0xE2	; 226
   1b1f0:	dd 4f       	sbci	r29, 0xFD	; 253
   1b1f2:	88 83       	st	Y, r24
   1b1f4:	99 83       	std	Y+1, r25	; 0x01
   1b1f6:	aa 83       	std	Y+2, r26	; 0x02
   1b1f8:	bb 83       	std	Y+3, r27	; 0x03
   1b1fa:	ce 51       	subi	r28, 0x1E	; 30
   1b1fc:	d2 40       	sbci	r29, 0x02	; 2

    fo = lif_open(username,"wb");
   1b1fe:	6a e2       	ldi	r22, 0x2A	; 42
   1b200:	78 e0       	ldi	r23, 0x08	; 8
   1b202:	ca 5d       	subi	r28, 0xDA	; 218
   1b204:	dd 4f       	sbci	r29, 0xFD	; 253
   1b206:	88 81       	ld	r24, Y
   1b208:	99 81       	ldd	r25, Y+1	; 0x01
   1b20a:	c6 52       	subi	r28, 0x26	; 38
   1b20c:	d2 40       	sbci	r29, 0x02	; 2
   1b20e:	0e 94 07 c2 	call	0x1840e	; 0x1840e <lif_open>
   1b212:	cc 5d       	subi	r28, 0xDC	; 220
   1b214:	dd 4f       	sbci	r29, 0xFD	; 253
   1b216:	99 83       	std	Y+1, r25	; 0x01
   1b218:	88 83       	st	Y, r24
   1b21a:	c4 52       	subi	r28, 0x24	; 36
   1b21c:	d2 40       	sbci	r29, 0x02	; 2
    if(fo == NULL)
   1b21e:	89 2b       	or	r24, r25
   1b220:	09 f4       	brne	.+2      	; 0x1b224 <lif_extract_e010_as_ascii+0x138>
   1b222:	95 cf       	rjmp	.-214    	; 0x1b14e <lif_extract_e010_as_ascii+0x62>
    {
        lif_closedir(LIF);
        return(0);
    }

    printf("Extracting: %s\n", username);
   1b224:	ca 5d       	subi	r28, 0xDA	; 218
   1b226:	dd 4f       	sbci	r29, 0xFD	; 253
   1b228:	28 81       	ld	r18, Y
   1b22a:	39 81       	ldd	r19, Y+1	; 0x01
   1b22c:	c6 52       	subi	r28, 0x26	; 38
   1b22e:	d2 40       	sbci	r29, 0x02	; 2
   1b230:	ed b7       	in	r30, 0x3d	; 61
   1b232:	fe b7       	in	r31, 0x3e	; 62
   1b234:	35 83       	std	Z+5, r19	; 0x05
   1b236:	24 83       	std	Z+4, r18	; 0x04
   1b238:	8f eb       	ldi	r24, 0xBF	; 191
   1b23a:	95 e3       	ldi	r25, 0x35	; 53
   1b23c:	a0 e0       	ldi	r26, 0x00	; 0
   1b23e:	81 83       	std	Z+1, r24	; 0x01
   1b240:	92 83       	std	Z+2, r25	; 0x02
   1b242:	a3 83       	std	Z+3, r26	; 0x03
   1b244:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>

    bytes = 0;
    wind = 0;
   1b248:	21 2c       	mov	r2, r1
   1b24a:	31 2c       	mov	r3, r1
    uint32_t start, end;    // sectors
    long offset, bytes;     // bytes
    int index;
    int i, len,size;
    int status = 1;
    int done = 0;
   1b24c:	ce 5d       	subi	r28, 0xDE	; 222
   1b24e:	dd 4f       	sbci	r29, 0xFD	; 253
   1b250:	19 82       	std	Y+1, r1	; 0x01
   1b252:	18 82       	st	Y, r1
   1b254:	c2 52       	subi	r28, 0x22	; 34
   1b256:	d2 40       	sbci	r29, 0x02	; 2
    lif_t *LIF;
    uint32_t start, end;    // sectors
    long offset, bytes;     // bytes
    int index;
    int i, len,size;
    int status = 1;
   1b258:	ee 24       	eor	r14, r14
   1b25a:	e3 94       	inc	r14
   1b25c:	f1 2c       	mov	r15, r1
        return(0);
    }

    printf("Extracting: %s\n", username);

    bytes = 0;
   1b25e:	41 2c       	mov	r4, r1
   1b260:	51 2c       	mov	r5, r1
   1b262:	32 01       	movw	r6, r4
                        status = 0;
                        done = 1;
                        break;
                    }
                    bytes += size;
                    printf("\tWrote: %8ld\r", bytes);
   1b264:	8e ef       	ldi	r24, 0xFE	; 254
   1b266:	94 e3       	ldi	r25, 0x34	; 52
   1b268:	9c 01       	movw	r18, r24
   1b26a:	40 e0       	ldi	r20, 0x00	; 0
   1b26c:	ce 5c       	subi	r28, 0xCE	; 206
   1b26e:	dd 4f       	sbci	r29, 0xFD	; 253
   1b270:	28 83       	st	Y, r18
   1b272:	39 83       	std	Y+1, r19	; 0x01
   1b274:	4a 83       	std	Y+2, r20	; 0x02
   1b276:	c2 53       	subi	r28, 0x32	; 50
   1b278:	d2 40       	sbci	r29, 0x02	; 2
                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1b27a:	8c e0       	ldi	r24, 0x0C	; 12
   1b27c:	95 e3       	ldi	r25, 0x35	; 53
   1b27e:	9c 01       	movw	r18, r24
   1b280:	40 e0       	ldi	r20, 0x00	; 0
   1b282:	cb 5c       	subi	r28, 0xCB	; 203
   1b284:	dd 4f       	sbci	r29, 0xFD	; 253
   1b286:	28 83       	st	Y, r18
   1b288:	39 83       	std	Y+1, r19	; 0x01
   1b28a:	4a 83       	std	Y+2, r20	; 0x02
   1b28c:	c5 53       	subi	r28, 0x35	; 53
   1b28e:	d2 40       	sbci	r29, 0x02	; 2

    bytes = 0;
    wind = 0;
    ind = 0;

    while(lif_bytes2sectors(offset) <= end)
   1b290:	c2 5e       	subi	r28, 0xE2	; 226
   1b292:	dd 4f       	sbci	r29, 0xFD	; 253
   1b294:	28 81       	ld	r18, Y
   1b296:	39 81       	ldd	r19, Y+1	; 0x01
   1b298:	4a 81       	ldd	r20, Y+2	; 0x02
   1b29a:	5b 81       	ldd	r21, Y+3	; 0x03
   1b29c:	ce 51       	subi	r28, 0x1E	; 30
   1b29e:	d2 40       	sbci	r29, 0x02	; 2
   1b2a0:	bb 27       	eor	r27, r27
   1b2a2:	a5 2f       	mov	r26, r21
   1b2a4:	94 2f       	mov	r25, r20
   1b2a6:	83 2f       	mov	r24, r19
   1b2a8:	c4 5d       	subi	r28, 0xD4	; 212
   1b2aa:	dd 4f       	sbci	r29, 0xFD	; 253
   1b2ac:	28 81       	ld	r18, Y
   1b2ae:	39 81       	ldd	r19, Y+1	; 0x01
   1b2b0:	4a 81       	ldd	r20, Y+2	; 0x02
   1b2b2:	5b 81       	ldd	r21, Y+3	; 0x03
   1b2b4:	cc 52       	subi	r28, 0x2C	; 44
   1b2b6:	d2 40       	sbci	r29, 0x02	; 2
   1b2b8:	28 17       	cp	r18, r24
   1b2ba:	39 07       	cpc	r19, r25
   1b2bc:	4a 07       	cpc	r20, r26
   1b2be:	5b 07       	cpc	r21, r27
   1b2c0:	08 f4       	brcc	.+2      	; 0x1b2c4 <lif_extract_e010_as_ascii+0x1d8>
   1b2c2:	51 c1       	rjmp	.+674    	; 0x1b566 <lif_extract_e010_as_ascii+0x47a>
    {
        // LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
   1b2c4:	00 e0       	ldi	r16, 0x00	; 0
   1b2c6:	11 e0       	ldi	r17, 0x01	; 1
   1b2c8:	c2 5e       	subi	r28, 0xE2	; 226
   1b2ca:	dd 4f       	sbci	r29, 0xFD	; 253
   1b2cc:	28 81       	ld	r18, Y
   1b2ce:	39 81       	ldd	r19, Y+1	; 0x01
   1b2d0:	4a 81       	ldd	r20, Y+2	; 0x02
   1b2d2:	5b 81       	ldd	r21, Y+3	; 0x03
   1b2d4:	ce 51       	subi	r28, 0x1E	; 30
   1b2d6:	d2 40       	sbci	r29, 0x02	; 2
   1b2d8:	be 01       	movw	r22, r28
   1b2da:	60 5f       	subi	r22, 0xF0	; 240
   1b2dc:	7e 4f       	sbci	r23, 0xFE	; 254
   1b2de:	c6 01       	movw	r24, r12
   1b2e0:	0e 94 8b c2 	call	0x18516	; 0x18516 <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1b2e4:	6f 3f       	cpi	r22, 0xFF	; 255
   1b2e6:	71 05       	cpc	r23, r1
   1b2e8:	09 f0       	breq	.+2      	; 0x1b2ec <lif_extract_e010_as_ascii+0x200>
   1b2ea:	0c f4       	brge	.+2      	; 0x1b2ee <lif_extract_e010_as_ascii+0x202>
   1b2ec:	3a c1       	rjmp	.+628    	; 0x1b562 <lif_extract_e010_as_ascii+0x476>
   1b2ee:	00 e0       	ldi	r16, 0x00	; 0
   1b2f0:	10 e0       	ldi	r17, 0x00	; 0
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1b2f2:	ce 5d       	subi	r28, 0xDE	; 222
   1b2f4:	dd 4f       	sbci	r29, 0xFD	; 253
   1b2f6:	88 81       	ld	r24, Y
   1b2f8:	99 81       	ldd	r25, Y+1	; 0x01
   1b2fa:	c2 52       	subi	r28, 0x22	; 34
   1b2fc:	d2 40       	sbci	r29, 0x02	; 2
   1b2fe:	89 2b       	or	r24, r25
   1b300:	09 f0       	breq	.+2      	; 0x1b304 <lif_extract_e010_as_ascii+0x218>
   1b302:	1b c1       	rjmp	.+566    	; 0x1b53a <lif_extract_e010_as_ascii+0x44e>
        {
            if(buf[ind] == 0xDF || buf[ind] == 0xCF || buf[ind] == 0x6F)
   1b304:	e0 e1       	ldi	r30, 0x10	; 16
   1b306:	f1 e0       	ldi	r31, 0x01	; 1
   1b308:	ec 0f       	add	r30, r28
   1b30a:	fd 1f       	adc	r31, r29
   1b30c:	e0 0f       	add	r30, r16
   1b30e:	f1 1f       	adc	r31, r17
   1b310:	80 81       	ld	r24, Z
   1b312:	98 2f       	mov	r25, r24
   1b314:	9f 7e       	andi	r25, 0xEF	; 239
   1b316:	9f 3c       	cpi	r25, 0xCF	; 207
   1b318:	11 f0       	breq	.+4      	; 0x1b31e <lif_extract_e010_as_ascii+0x232>
   1b31a:	8f 36       	cpi	r24, 0x6F	; 111
   1b31c:	c9 f5       	brne	.+114    	; 0x1b390 <lif_extract_e010_as_ascii+0x2a4>
            {
                ++ind;
                len = buf[ind++] & 0xff;
   1b31e:	e0 e1       	ldi	r30, 0x10	; 16
   1b320:	f1 e0       	ldi	r31, 0x01	; 1
   1b322:	ec 0f       	add	r30, r28
   1b324:	fd 1f       	adc	r31, r29
   1b326:	e0 0f       	add	r30, r16
   1b328:	f1 1f       	adc	r31, r17
   1b32a:	a1 80       	ldd	r10, Z+1	; 0x01
                len |= ((buf[ind++] & 0xff) <<8); 
   1b32c:	f8 01       	movw	r30, r16
   1b32e:	32 96       	adiw	r30, 0x02	; 2
   1b330:	40 e1       	ldi	r20, 0x10	; 16
   1b332:	51 e0       	ldi	r21, 0x01	; 1
   1b334:	4c 0f       	add	r20, r28
   1b336:	5d 1f       	adc	r21, r29
   1b338:	e4 0f       	add	r30, r20
   1b33a:	f5 1f       	adc	r31, r21
   1b33c:	0d 5f       	subi	r16, 0xFD	; 253
   1b33e:	1f 4f       	sbci	r17, 0xFF	; 255
   1b340:	80 81       	ld	r24, Z
   1b342:	b1 2c       	mov	r11, r1
   1b344:	b8 2a       	or	r11, r24
                // EOF ?
                if(len == 0)
   1b346:	a1 14       	cp	r10, r1
   1b348:	b1 04       	cpc	r11, r1
   1b34a:	09 f4       	brne	.+2      	; 0x1b34e <lif_extract_e010_as_ascii+0x262>
   1b34c:	ee c0       	rjmp	.+476    	; 0x1b52a <lif_extract_e010_as_ascii+0x43e>
                {
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
   1b34e:	5f ef       	ldi	r21, 0xFF	; 255
   1b350:	a5 16       	cp	r10, r21
   1b352:	b1 04       	cpc	r11, r1
   1b354:	09 f0       	breq	.+2      	; 0x1b358 <lif_extract_e010_as_ascii+0x26c>
   1b356:	7c f4       	brge	.+30     	; 0x1b376 <lif_extract_e010_as_ascii+0x28a>
   1b358:	c4 5e       	subi	r28, 0xE4	; 228
   1b35a:	dd 4f       	sbci	r29, 0xFD	; 253
   1b35c:	19 82       	std	Y+1, r1	; 0x01
   1b35e:	18 82       	st	Y, r1
   1b360:	cc 51       	subi	r28, 0x1C	; 28
   1b362:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
            // write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
   1b364:	c5 01       	movw	r24, r10
   1b366:	01 97       	sbiw	r24, 0x01	; 1
   1b368:	c0 5d       	subi	r28, 0xD0	; 208
   1b36a:	dd 4f       	sbci	r29, 0xFD	; 253
   1b36c:	99 83       	std	Y+1, r25	; 0x01
   1b36e:	88 83       	st	Y, r24
   1b370:	c0 53       	subi	r28, 0x30	; 48
   1b372:	d2 40       	sbci	r29, 0x02	; 2
   1b374:	68 c0       	rjmp	.+208    	; 0x1b446 <lif_extract_e010_as_ascii+0x35a>
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
                {
                    printf("lif_extract_e010_as_ascii: string too big size = %d\n", (int)len);
   1b376:	ed b7       	in	r30, 0x3d	; 61
   1b378:	fe b7       	in	r31, 0x3e	; 62
   1b37a:	b5 82       	std	Z+5, r11	; 0x05
   1b37c:	a4 82       	std	Z+4, r10	; 0x04
   1b37e:	8a e8       	ldi	r24, 0x8A	; 138
   1b380:	95 e3       	ldi	r25, 0x35	; 53
   1b382:	a0 e0       	ldi	r26, 0x00	; 0
   1b384:	81 83       	std	Z+1, r24	; 0x01
   1b386:	92 83       	std	Z+2, r25	; 0x02
   1b388:	a3 83       	std	Z+3, r26	; 0x03
   1b38a:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   1b38e:	1e c0       	rjmp	.+60     	; 0x1b3cc <lif_extract_e010_as_ascii+0x2e0>
                    status = 0;
                    done = 1;
                    break;
                }
            }
            else if(buf[ind] == 0xEF)
   1b390:	8f 3e       	cpi	r24, 0xEF	; 239
   1b392:	09 f4       	brne	.+2      	; 0x1b396 <lif_extract_e010_as_ascii+0x2aa>
   1b394:	d2 c0       	rjmp	.+420    	; 0x1b53a <lif_extract_e010_as_ascii+0x44e>
                ind = 0;
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
   1b396:	ed b7       	in	r30, 0x3d	; 61
   1b398:	fe b7       	in	r31, 0x3e	; 62
   1b39a:	13 87       	std	Z+11, r17	; 0x0b
   1b39c:	02 87       	std	Z+10, r16	; 0x0a
   1b39e:	c2 5e       	subi	r28, 0xE2	; 226
   1b3a0:	dd 4f       	sbci	r29, 0xFD	; 253
   1b3a2:	28 81       	ld	r18, Y
   1b3a4:	39 81       	ldd	r19, Y+1	; 0x01
   1b3a6:	4a 81       	ldd	r20, Y+2	; 0x02
   1b3a8:	5b 81       	ldd	r21, Y+3	; 0x03
   1b3aa:	ce 51       	subi	r28, 0x1E	; 30
   1b3ac:	d2 40       	sbci	r29, 0x02	; 2
   1b3ae:	26 83       	std	Z+6, r18	; 0x06
   1b3b0:	37 83       	std	Z+7, r19	; 0x07
   1b3b2:	40 87       	std	Z+8, r20	; 0x08
   1b3b4:	51 87       	std	Z+9, r21	; 0x09
   1b3b6:	90 e0       	ldi	r25, 0x00	; 0
   1b3b8:	95 83       	std	Z+5, r25	; 0x05
   1b3ba:	84 83       	std	Z+4, r24	; 0x04
   1b3bc:	84 e3       	ldi	r24, 0x34	; 52
   1b3be:	95 e3       	ldi	r25, 0x35	; 53
   1b3c0:	a0 e0       	ldi	r26, 0x00	; 0
   1b3c2:	81 83       	std	Z+1, r24	; 0x01
   1b3c4:	92 83       	std	Z+2, r25	; 0x02
   1b3c6:	a3 83       	std	Z+3, r26	; 0x03
   1b3c8:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
                status = 0;
                done = 1;
   1b3cc:	21 e0       	ldi	r18, 0x01	; 1
   1b3ce:	30 e0       	ldi	r19, 0x00	; 0
   1b3d0:	ce 5d       	subi	r28, 0xDE	; 222
   1b3d2:	dd 4f       	sbci	r29, 0xFD	; 253
   1b3d4:	39 83       	std	Y+1, r19	; 0x01
   1b3d6:	28 83       	st	Y, r18
   1b3d8:	c2 52       	subi	r28, 0x22	; 34
   1b3da:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
                status = 0;
   1b3dc:	e1 2c       	mov	r14, r1
   1b3de:	f1 2c       	mov	r15, r1
                done = 1;
                break;
   1b3e0:	ac c0       	rjmp	.+344    	; 0x1b53a <lif_extract_e010_as_ascii+0x44e>
            }
            // write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1b3e2:	0f 3f       	cpi	r16, 0xFF	; 255
   1b3e4:	11 05       	cpc	r17, r1
   1b3e6:	11 f0       	breq	.+4      	; 0x1b3ec <lif_extract_e010_as_ascii+0x300>
   1b3e8:	0c f0       	brlt	.+2      	; 0x1b3ec <lif_extract_e010_as_ascii+0x300>
   1b3ea:	a7 c0       	rjmp	.+334    	; 0x1b53a <lif_extract_e010_as_ascii+0x44e>
            {
                if(buf[ind] == '\r' && i == len-1)
   1b3ec:	e0 e1       	ldi	r30, 0x10	; 16
   1b3ee:	f1 e0       	ldi	r31, 0x01	; 1
   1b3f0:	ec 0f       	add	r30, r28
   1b3f2:	fd 1f       	adc	r31, r29
   1b3f4:	e0 0f       	add	r30, r16
   1b3f6:	f1 1f       	adc	r31, r17
   1b3f8:	20 81       	ld	r18, Z
   1b3fa:	a1 01       	movw	r20, r2
   1b3fc:	4f 5f       	subi	r20, 0xFF	; 255
   1b3fe:	5f 4f       	sbci	r21, 0xFF	; 255
   1b400:	4a 01       	movw	r8, r20
   1b402:	2d 30       	cpi	r18, 0x0D	; 13
   1b404:	51 f1       	breq	.+84     	; 0x1b45a <lif_extract_e010_as_ascii+0x36e>
                    ++ind;
                    break;
                }
                else 
                {
                    wbuf[wind++] = buf[ind++];
   1b406:	98 2d       	mov	r25, r8
   1b408:	89 2d       	mov	r24, r9
   1b40a:	0f 5f       	subi	r16, 0xFF	; 255
   1b40c:	1f 4f       	sbci	r17, 0xFF	; 255
   1b40e:	ec e0       	ldi	r30, 0x0C	; 12
   1b410:	f0 e0       	ldi	r31, 0x00	; 0
   1b412:	ec 0f       	add	r30, r28
   1b414:	fd 1f       	adc	r31, r29
   1b416:	e2 0d       	add	r30, r2
   1b418:	f3 1d       	adc	r31, r3
   1b41a:	20 83       	st	Z, r18
                }

                if(wind >= LIF_SECTOR_SIZE)
   1b41c:	ef ef       	ldi	r30, 0xFF	; 255
   1b41e:	8e 16       	cp	r8, r30
   1b420:	91 04       	cpc	r9, r1
   1b422:	09 f0       	breq	.+2      	; 0x1b426 <lif_extract_e010_as_ascii+0x33a>
   1b424:	ac f5       	brge	.+106    	; 0x1b490 <lif_extract_e010_as_ascii+0x3a4>
                status = 0;
                done = 1;
                break;
            }
            // write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1b426:	c4 5e       	subi	r28, 0xE4	; 228
   1b428:	dd 4f       	sbci	r29, 0xFD	; 253
   1b42a:	28 81       	ld	r18, Y
   1b42c:	39 81       	ldd	r19, Y+1	; 0x01
   1b42e:	cc 51       	subi	r28, 0x1C	; 28
   1b430:	d2 40       	sbci	r29, 0x02	; 2
   1b432:	2f 5f       	subi	r18, 0xFF	; 255
   1b434:	3f 4f       	sbci	r19, 0xFF	; 255
   1b436:	c4 5e       	subi	r28, 0xE4	; 228
   1b438:	dd 4f       	sbci	r29, 0xFD	; 253
   1b43a:	39 83       	std	Y+1, r19	; 0x01
   1b43c:	28 83       	st	Y, r18
   1b43e:	cc 51       	subi	r28, 0x1C	; 28
   1b440:	d2 40       	sbci	r29, 0x02	; 2
   1b442:	29 2e       	mov	r2, r25
   1b444:	38 2e       	mov	r3, r24
   1b446:	c4 5e       	subi	r28, 0xE4	; 228
   1b448:	dd 4f       	sbci	r29, 0xFD	; 253
   1b44a:	48 81       	ld	r20, Y
   1b44c:	59 81       	ldd	r21, Y+1	; 0x01
   1b44e:	cc 51       	subi	r28, 0x1C	; 28
   1b450:	d2 40       	sbci	r29, 0x02	; 2
   1b452:	4a 15       	cp	r20, r10
   1b454:	5b 05       	cpc	r21, r11
   1b456:	2c f2       	brlt	.-118    	; 0x1b3e2 <lif_extract_e010_as_ascii+0x2f6>
   1b458:	62 c0       	rjmp	.+196    	; 0x1b51e <lif_extract_e010_as_ascii+0x432>
            {
                if(buf[ind] == '\r' && i == len-1)
   1b45a:	c4 5e       	subi	r28, 0xE4	; 228
   1b45c:	dd 4f       	sbci	r29, 0xFD	; 253
   1b45e:	88 81       	ld	r24, Y
   1b460:	99 81       	ldd	r25, Y+1	; 0x01
   1b462:	cc 51       	subi	r28, 0x1C	; 28
   1b464:	d2 40       	sbci	r29, 0x02	; 2
   1b466:	c0 5d       	subi	r28, 0xD0	; 208
   1b468:	dd 4f       	sbci	r29, 0xFD	; 253
   1b46a:	a8 81       	ld	r26, Y
   1b46c:	b9 81       	ldd	r27, Y+1	; 0x01
   1b46e:	c0 53       	subi	r28, 0x30	; 48
   1b470:	d2 40       	sbci	r29, 0x02	; 2
   1b472:	8a 17       	cp	r24, r26
   1b474:	9b 07       	cpc	r25, r27
   1b476:	39 f6       	brne	.-114    	; 0x1b406 <lif_extract_e010_as_ascii+0x31a>
                {
                    wbuf[wind++] = '\n';
   1b478:	ec e0       	ldi	r30, 0x0C	; 12
   1b47a:	f0 e0       	ldi	r31, 0x00	; 0
   1b47c:	ec 0f       	add	r30, r28
   1b47e:	fd 1f       	adc	r31, r29
   1b480:	e2 0d       	add	r30, r2
   1b482:	f3 1d       	adc	r31, r3
   1b484:	ba e0       	ldi	r27, 0x0A	; 10
   1b486:	b0 83       	st	Z, r27
                    ++ind;
   1b488:	0f 5f       	subi	r16, 0xFF	; 255
   1b48a:	1f 4f       	sbci	r17, 0xFF	; 255
            // write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
                {
                    wbuf[wind++] = '\n';
   1b48c:	1a 01       	movw	r2, r20
                    ++ind;
                    break;
   1b48e:	47 c0       	rjmp	.+142    	; 0x1b51e <lif_extract_e010_as_ascii+0x432>
                    wbuf[wind++] = buf[ind++];
                }

                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
   1b490:	cc 5d       	subi	r28, 0xDC	; 220
   1b492:	dd 4f       	sbci	r29, 0xFD	; 253
   1b494:	28 81       	ld	r18, Y
   1b496:	39 81       	ldd	r19, Y+1	; 0x01
   1b498:	c4 52       	subi	r28, 0x24	; 36
   1b49a:	d2 40       	sbci	r29, 0x02	; 2
   1b49c:	a4 01       	movw	r20, r8
   1b49e:	61 e0       	ldi	r22, 0x01	; 1
   1b4a0:	70 e0       	ldi	r23, 0x00	; 0
   1b4a2:	ce 01       	movw	r24, r28
   1b4a4:	0c 96       	adiw	r24, 0x0c	; 12
   1b4a6:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <fwrite>
                    if(size < wind)
   1b4aa:	88 15       	cp	r24, r8
   1b4ac:	99 05       	cpc	r25, r9
   1b4ae:	d4 f4       	brge	.+52     	; 0x1b4e4 <lif_extract_e010_as_ascii+0x3f8>
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1b4b0:	cb 5c       	subi	r28, 0xCB	; 203
   1b4b2:	dd 4f       	sbci	r29, 0xFD	; 253
   1b4b4:	28 81       	ld	r18, Y
   1b4b6:	39 81       	ldd	r19, Y+1	; 0x01
   1b4b8:	4a 81       	ldd	r20, Y+2	; 0x02
   1b4ba:	c5 53       	subi	r28, 0x35	; 53
   1b4bc:	d2 40       	sbci	r29, 0x02	; 2
   1b4be:	ed b7       	in	r30, 0x3d	; 61
   1b4c0:	fe b7       	in	r31, 0x3e	; 62
   1b4c2:	21 83       	std	Z+1, r18	; 0x01
   1b4c4:	32 83       	std	Z+2, r19	; 0x02
   1b4c6:	43 83       	std	Z+3, r20	; 0x03
   1b4c8:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
                    ++ind;
                    break;
                }
                else 
                {
                    wbuf[wind++] = buf[ind++];
   1b4cc:	14 01       	movw	r2, r8
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
                        done = 1;
   1b4ce:	21 e0       	ldi	r18, 0x01	; 1
   1b4d0:	30 e0       	ldi	r19, 0x00	; 0
   1b4d2:	ce 5d       	subi	r28, 0xDE	; 222
   1b4d4:	dd 4f       	sbci	r29, 0xFD	; 253
   1b4d6:	39 83       	std	Y+1, r19	; 0x01
   1b4d8:	28 83       	st	Y, r18
   1b4da:	c2 52       	subi	r28, 0x22	; 34
   1b4dc:	d2 40       	sbci	r29, 0x02	; 2
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
   1b4de:	e1 2c       	mov	r14, r1
   1b4e0:	f1 2c       	mov	r15, r1
                        done = 1;
                        break;
   1b4e2:	1d c0       	rjmp	.+58     	; 0x1b51e <lif_extract_e010_as_ascii+0x432>
                    }
                    bytes += size;
   1b4e4:	09 2e       	mov	r0, r25
   1b4e6:	00 0c       	add	r0, r0
   1b4e8:	aa 0b       	sbc	r26, r26
   1b4ea:	bb 0b       	sbc	r27, r27
   1b4ec:	48 0e       	add	r4, r24
   1b4ee:	59 1e       	adc	r5, r25
   1b4f0:	6a 1e       	adc	r6, r26
   1b4f2:	7b 1e       	adc	r7, r27
                    printf("\tWrote: %8ld\r", bytes);
   1b4f4:	ed b7       	in	r30, 0x3d	; 61
   1b4f6:	fe b7       	in	r31, 0x3e	; 62
   1b4f8:	44 82       	std	Z+4, r4	; 0x04
   1b4fa:	55 82       	std	Z+5, r5	; 0x05
   1b4fc:	66 82       	std	Z+6, r6	; 0x06
   1b4fe:	77 82       	std	Z+7, r7	; 0x07
   1b500:	ce 5c       	subi	r28, 0xCE	; 206
   1b502:	dd 4f       	sbci	r29, 0xFD	; 253
   1b504:	28 81       	ld	r18, Y
   1b506:	39 81       	ldd	r19, Y+1	; 0x01
   1b508:	4a 81       	ldd	r20, Y+2	; 0x02
   1b50a:	c2 53       	subi	r28, 0x32	; 50
   1b50c:	d2 40       	sbci	r29, 0x02	; 2
   1b50e:	21 83       	std	Z+1, r18	; 0x01
   1b510:	32 83       	std	Z+2, r19	; 0x02
   1b512:	43 83       	std	Z+3, r20	; 0x03
   1b514:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
                    wind = 0;
   1b518:	90 e0       	ldi	r25, 0x00	; 0
   1b51a:	80 e0       	ldi	r24, 0x00	; 0
   1b51c:	84 cf       	rjmp	.-248    	; 0x1b426 <lif_extract_e010_as_ascii+0x33a>
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1b51e:	0f 3f       	cpi	r16, 0xFF	; 255
   1b520:	11 05       	cpc	r17, r1
   1b522:	09 f0       	breq	.+2      	; 0x1b526 <lif_extract_e010_as_ascii+0x43a>
   1b524:	0c f4       	brge	.+2      	; 0x1b528 <lif_extract_e010_as_ascii+0x43c>
   1b526:	e5 ce       	rjmp	.-566    	; 0x1b2f2 <lif_extract_e010_as_ascii+0x206>
   1b528:	08 c0       	rjmp	.+16     	; 0x1b53a <lif_extract_e010_as_ascii+0x44e>
                len = buf[ind++] & 0xff;
                len |= ((buf[ind++] & 0xff) <<8); 
                // EOF ?
                if(len == 0)
                {
                    done = 1;
   1b52a:	a1 e0       	ldi	r26, 0x01	; 1
   1b52c:	b0 e0       	ldi	r27, 0x00	; 0
   1b52e:	ce 5d       	subi	r28, 0xDE	; 222
   1b530:	dd 4f       	sbci	r29, 0xFD	; 253
   1b532:	b9 83       	std	Y+1, r27	; 0x01
   1b534:	a8 83       	st	Y, r26
   1b536:	c2 52       	subi	r28, 0x22	; 34
   1b538:	d2 40       	sbci	r29, 0x02	; 2

            }   // for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)

        }   // while(ind < LIF_SECTOR_SIZE && status)

        offset += (long) LIF_SECTOR_SIZE;
   1b53a:	c2 5e       	subi	r28, 0xE2	; 226
   1b53c:	dd 4f       	sbci	r29, 0xFD	; 253
   1b53e:	28 81       	ld	r18, Y
   1b540:	39 81       	ldd	r19, Y+1	; 0x01
   1b542:	4a 81       	ldd	r20, Y+2	; 0x02
   1b544:	5b 81       	ldd	r21, Y+3	; 0x03
   1b546:	ce 51       	subi	r28, 0x1E	; 30
   1b548:	d2 40       	sbci	r29, 0x02	; 2
   1b54a:	3f 5f       	subi	r19, 0xFF	; 255
   1b54c:	4f 4f       	sbci	r20, 0xFF	; 255
   1b54e:	5f 4f       	sbci	r21, 0xFF	; 255
   1b550:	c2 5e       	subi	r28, 0xE2	; 226
   1b552:	dd 4f       	sbci	r29, 0xFD	; 253
   1b554:	28 83       	st	Y, r18
   1b556:	39 83       	std	Y+1, r19	; 0x01
   1b558:	4a 83       	std	Y+2, r20	; 0x02
   1b55a:	5b 83       	std	Y+3, r21	; 0x03
   1b55c:	ce 51       	subi	r28, 0x1E	; 30
   1b55e:	d2 40       	sbci	r29, 0x02	; 2
   1b560:	97 ce       	rjmp	.-722    	; 0x1b290 <lif_extract_e010_as_ascii+0x1a4>
    {
        // LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
        if(size < LIF_SECTOR_SIZE)
        {
            status = 0;
   1b562:	e1 2c       	mov	r14, r1
   1b564:	f1 2c       	mov	r15, r1
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b566:	c6 01       	movw	r24, r12
   1b568:	0e 94 37 cb 	call	0x1966e	; 0x1966e <lif_close_volume>

    }   // while(offset <= end)

    lif_closedir(LIF);
    // Flush any remaining bytes
    if(wind)
   1b56c:	21 14       	cp	r2, r1
   1b56e:	31 04       	cpc	r3, r1
   1b570:	31 f1       	breq	.+76     	; 0x1b5be <lif_extract_e010_as_ascii+0x4d2>
    {
        size = fwrite(wbuf,1,wind,fo);
   1b572:	cc 5d       	subi	r28, 0xDC	; 220
   1b574:	dd 4f       	sbci	r29, 0xFD	; 253
   1b576:	28 81       	ld	r18, Y
   1b578:	39 81       	ldd	r19, Y+1	; 0x01
   1b57a:	c4 52       	subi	r28, 0x24	; 36
   1b57c:	d2 40       	sbci	r29, 0x02	; 2
   1b57e:	a1 01       	movw	r20, r2
   1b580:	61 e0       	ldi	r22, 0x01	; 1
   1b582:	70 e0       	ldi	r23, 0x00	; 0
   1b584:	ce 01       	movw	r24, r28
   1b586:	0c 96       	adiw	r24, 0x0c	; 12
   1b588:	0e 94 ec 7d 	call	0xfbd8	; 0xfbd8 <fwrite>
   1b58c:	8c 01       	movw	r16, r24
        if(size < wind)
   1b58e:	82 15       	cp	r24, r2
   1b590:	93 05       	cpc	r25, r3
   1b592:	64 f4       	brge	.+24     	; 0x1b5ac <lif_extract_e010_as_ascii+0x4c0>
        {
            printf("lif_extract_e010_as_ascii: write error\n");
   1b594:	86 ed       	ldi	r24, 0xD6	; 214
   1b596:	94 e3       	ldi	r25, 0x34	; 52
   1b598:	a0 e0       	ldi	r26, 0x00	; 0
   1b59a:	ed b7       	in	r30, 0x3d	; 61
   1b59c:	fe b7       	in	r31, 0x3e	; 62
   1b59e:	81 83       	std	Z+1, r24	; 0x01
   1b5a0:	92 83       	std	Z+2, r25	; 0x02
   1b5a2:	a3 83       	std	Z+3, r26	; 0x03
   1b5a4:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
            status = 0;
   1b5a8:	e1 2c       	mov	r14, r1
   1b5aa:	f1 2c       	mov	r15, r1
        }
        bytes += size;
   1b5ac:	c8 01       	movw	r24, r16
   1b5ae:	01 2e       	mov	r0, r17
   1b5b0:	00 0c       	add	r0, r0
   1b5b2:	aa 0b       	sbc	r26, r26
   1b5b4:	bb 0b       	sbc	r27, r27
   1b5b6:	48 0e       	add	r4, r24
   1b5b8:	59 1e       	adc	r5, r25
   1b5ba:	6a 1e       	adc	r6, r26
   1b5bc:	7b 1e       	adc	r7, r27
    }
    fclose(fo);
   1b5be:	cc 5d       	subi	r28, 0xDC	; 220
   1b5c0:	dd 4f       	sbci	r29, 0xFD	; 253
   1b5c2:	88 81       	ld	r24, Y
   1b5c4:	99 81       	ldd	r25, Y+1	; 0x01
   1b5c6:	c4 52       	subi	r28, 0x24	; 36
   1b5c8:	d2 40       	sbci	r29, 0x02	; 2
   1b5ca:	0e 94 6e 7e 	call	0xfcdc	; 0xfcdc <fclose>
    if(t)
   1b5ce:	c8 5d       	subi	r28, 0xD8	; 216
   1b5d0:	dd 4f       	sbci	r29, 0xFD	; 253
   1b5d2:	28 81       	ld	r18, Y
   1b5d4:	39 81       	ldd	r19, Y+1	; 0x01
   1b5d6:	4a 81       	ldd	r20, Y+2	; 0x02
   1b5d8:	5b 81       	ldd	r21, Y+3	; 0x03
   1b5da:	c8 52       	subi	r28, 0x28	; 40
   1b5dc:	d2 40       	sbci	r29, 0x02	; 2
   1b5de:	21 15       	cp	r18, r1
   1b5e0:	31 05       	cpc	r19, r1
   1b5e2:	41 05       	cpc	r20, r1
   1b5e4:	51 05       	cpc	r21, r1
   1b5e6:	d9 f0       	breq	.+54     	; 0x1b61e <lif_extract_e010_as_ascii+0x532>
    {
        struct utimbuf times;
        times.modtime = t;
   1b5e8:	c8 5e       	subi	r28, 0xE8	; 232
   1b5ea:	dd 4f       	sbci	r29, 0xFD	; 253
   1b5ec:	28 83       	st	Y, r18
   1b5ee:	39 83       	std	Y+1, r19	; 0x01
   1b5f0:	4a 83       	std	Y+2, r20	; 0x02
   1b5f2:	5b 83       	std	Y+3, r21	; 0x03
   1b5f4:	c8 51       	subi	r28, 0x18	; 24
   1b5f6:	d2 40       	sbci	r29, 0x02	; 2
        times.actime = t;
   1b5f8:	cc 5e       	subi	r28, 0xEC	; 236
   1b5fa:	dd 4f       	sbci	r29, 0xFD	; 253
   1b5fc:	28 83       	st	Y, r18
   1b5fe:	39 83       	std	Y+1, r19	; 0x01
   1b600:	4a 83       	std	Y+2, r20	; 0x02
   1b602:	5b 83       	std	Y+3, r21	; 0x03
   1b604:	c4 51       	subi	r28, 0x14	; 20
   1b606:	d2 40       	sbci	r29, 0x02	; 2
        utime(username, (struct utimbuf *) &times);
   1b608:	be 01       	movw	r22, r28
   1b60a:	6c 5e       	subi	r22, 0xEC	; 236
   1b60c:	7d 4f       	sbci	r23, 0xFD	; 253
   1b60e:	ca 5d       	subi	r28, 0xDA	; 218
   1b610:	dd 4f       	sbci	r29, 0xFD	; 253
   1b612:	88 81       	ld	r24, Y
   1b614:	99 81       	ldd	r25, Y+1	; 0x01
   1b616:	c6 52       	subi	r28, 0x26	; 38
   1b618:	d2 40       	sbci	r29, 0x02	; 2
   1b61a:	0e 94 ab 7b 	call	0xf756	; 0xf756 <utime>
    }
    sync();
   1b61e:	0e 94 69 7d 	call	0xfad2	; 0xfad2 <sync>
    printf("\tWrote: %8ld\n", bytes);
   1b622:	ed b7       	in	r30, 0x3d	; 61
   1b624:	fe b7       	in	r31, 0x3e	; 62
   1b626:	44 82       	std	Z+4, r4	; 0x04
   1b628:	55 82       	std	Z+5, r5	; 0x05
   1b62a:	66 82       	std	Z+6, r6	; 0x06
   1b62c:	77 82       	std	Z+7, r7	; 0x07
   1b62e:	88 ec       	ldi	r24, 0xC8	; 200
   1b630:	94 e3       	ldi	r25, 0x34	; 52
   1b632:	a0 e0       	ldi	r26, 0x00	; 0
   1b634:	81 83       	std	Z+1, r24	; 0x01
   1b636:	92 83       	std	Z+2, r25	; 0x02
   1b638:	a3 83       	std	Z+3, r26	; 0x03
   1b63a:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    return(status);
   1b63e:	c7 01       	movw	r24, r14
}
   1b640:	c9 5c       	subi	r28, 0xC9	; 201
   1b642:	dd 4f       	sbci	r29, 0xFD	; 253
   1b644:	e2 e1       	ldi	r30, 0x12	; 18
   1b646:	0c 94 35 e5 	jmp	0x1ca6a	; 0x1ca6a <__epilogue_restores__>

0001b64a <lif_extract_lif_as_lif>:
/// @param[in] lifname:  name of file in LIF image we want to extract
/// @param[in] username: new LIF file to create
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_lif_as_lif(char *lifimagename, char *lifname, char *username)
{
   1b64a:	a4 e1       	ldi	r26, 0x14	; 20
   1b64c:	b1 e0       	ldi	r27, 0x01	; 1
   1b64e:	eb e2       	ldi	r30, 0x2B	; 43
   1b650:	fb ed       	ldi	r31, 0xDB	; 219
   1b652:	0c 94 19 e5 	jmp	0x1ca32	; 0x1ca32 <__prologue_saves__>
   1b656:	7c 01       	movw	r14, r24
   1b658:	8b 01       	movw	r16, r22
   1b65a:	3a 01       	movw	r6, r20
    int i, size;
    int sectors;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    LIF = lif_open_volume(lifimagename,"r");
   1b65c:	60 e6       	ldi	r22, 0x60	; 96
   1b65e:	72 e0       	ldi	r23, 0x02	; 2
   1b660:	0e 94 f2 d1 	call	0x1a3e4	; 0x1a3e4 <lif_open_volume>
   1b664:	4c 01       	movw	r8, r24
    if(LIF == NULL)
   1b666:	00 97       	sbiw	r24, 0x00	; 0
   1b668:	69 f4       	brne	.+26     	; 0x1b684 <lif_extract_lif_as_lif+0x3a>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1b66a:	ed b7       	in	r30, 0x3d	; 61
   1b66c:	fe b7       	in	r31, 0x3e	; 62
   1b66e:	f5 82       	std	Z+5, r15	; 0x05
   1b670:	e4 82       	std	Z+4, r14	; 0x04
   1b672:	80 eb       	ldi	r24, 0xB0	; 176
   1b674:	94 e3       	ldi	r25, 0x34	; 52
   1b676:	a0 e0       	ldi	r26, 0x00	; 0
   1b678:	81 83       	std	Z+1, r24	; 0x01
   1b67a:	92 83       	std	Z+2, r25	; 0x02
   1b67c:	a3 83       	std	Z+3, r26	; 0x03
   1b67e:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   1b682:	13 c0       	rjmp	.+38     	; 0x1b6aa <lif_extract_lif_as_lif+0x60>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1b684:	b8 01       	movw	r22, r16
   1b686:	7d d9       	rcall	.-3334   	; 0x1a982 <lif_find_file>
    if(index == -1)
   1b688:	01 96       	adiw	r24, 0x01	; 1
   1b68a:	91 f4       	brne	.+36     	; 0x1b6b0 <lif_extract_lif_as_lif+0x66>
    {
        printf("File not found:%s\n", lifname);
   1b68c:	ed b7       	in	r30, 0x3d	; 61
   1b68e:	fe b7       	in	r31, 0x3e	; 62
   1b690:	15 83       	std	Z+5, r17	; 0x05
   1b692:	04 83       	std	Z+4, r16	; 0x04
   1b694:	8d e9       	ldi	r24, 0x9D	; 157
   1b696:	94 e3       	ldi	r25, 0x34	; 52
   1b698:	a0 e0       	ldi	r26, 0x00	; 0
   1b69a:	81 83       	std	Z+1, r24	; 0x01
   1b69c:	92 83       	std	Z+2, r25	; 0x02
   1b69e:	a3 83       	std	Z+3, r26	; 0x03
   1b6a0:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b6a4:	c4 01       	movw	r24, r8
   1b6a6:	0e 94 37 cb 	call	0x1966e	; 0x1966e <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1b6aa:	00 e0       	ldi	r16, 0x00	; 0
   1b6ac:	10 e0       	ldi	r17, 0x00	; 0
   1b6ae:	ff c0       	rjmp	.+510    	; 0x1b8ae <lif_extract_lif_as_lif+0x264>
    }

    sectors = LIF->DIR.FileSectors;
   1b6b0:	94 01       	movw	r18, r8
   1b6b2:	20 5a       	subi	r18, 0xA0	; 160
   1b6b4:	3f 4f       	sbci	r19, 0xFF	; 255
   1b6b6:	c0 5f       	subi	r28, 0xF0	; 240
   1b6b8:	de 4f       	sbci	r29, 0xFE	; 254
   1b6ba:	39 83       	std	Y+1, r19	; 0x01
   1b6bc:	28 83       	st	Y, r18
   1b6be:	c0 51       	subi	r28, 0x10	; 16
   1b6c0:	d1 40       	sbci	r29, 0x01	; 1

    //Initialize the user file lif_t structure
    ULIF = lif_create_volume(username, "HFSLIF",1,1,sectors);
   1b6c2:	f9 01       	movw	r30, r18
   1b6c4:	a0 80       	ld	r10, Z
   1b6c6:	b1 80       	ldd	r11, Z+1	; 0x01
   1b6c8:	0b 2c       	mov	r0, r11
   1b6ca:	00 0c       	add	r0, r0
   1b6cc:	cc 08       	sbc	r12, r12
   1b6ce:	dd 08       	sbc	r13, r13
   1b6d0:	e1 2c       	mov	r14, r1
   1b6d2:	f1 2c       	mov	r15, r1
   1b6d4:	87 01       	movw	r16, r14
   1b6d6:	e3 94       	inc	r14
   1b6d8:	21 e0       	ldi	r18, 0x01	; 1
   1b6da:	30 e0       	ldi	r19, 0x00	; 0
   1b6dc:	40 e0       	ldi	r20, 0x00	; 0
   1b6de:	50 e0       	ldi	r21, 0x00	; 0
   1b6e0:	67 eb       	ldi	r22, 0xB7	; 183
   1b6e2:	75 e1       	ldi	r23, 0x15	; 21
   1b6e4:	c3 01       	movw	r24, r6
   1b6e6:	0e 94 a8 cd 	call	0x19b50	; 0x19b50 <lif_create_volume>
   1b6ea:	7c 01       	movw	r14, r24
    if(ULIF == NULL)
   1b6ec:	89 2b       	or	r24, r25
   1b6ee:	d1 f2       	breq	.-76     	; 0x1b6a4 <lif_extract_lif_as_lif+0x5a>
    }

    // Only the start sector changes

    // Copy directory record
    ULIF->DIR = LIF->DIR;
   1b6f0:	81 e2       	ldi	r24, 0x21	; 33
   1b6f2:	f4 01       	movw	r30, r8
   1b6f4:	e1 5b       	subi	r30, 0xB1	; 177
   1b6f6:	ff 4f       	sbci	r31, 0xFF	; 255
   1b6f8:	d7 01       	movw	r26, r14
   1b6fa:	a1 5b       	subi	r26, 0xB1	; 177
   1b6fc:	bf 4f       	sbci	r27, 0xFF	; 255
   1b6fe:	01 90       	ld	r0, Z+
   1b700:	0d 92       	st	X+, r0
   1b702:	8a 95       	dec	r24
   1b704:	e1 f7       	brne	.-8      	; 0x1b6fe <lif_extract_lif_as_lif+0xb4>

    ULIF->DIR.FileStartSector = 2;
   1b706:	82 e0       	ldi	r24, 0x02	; 2
   1b708:	90 e0       	ldi	r25, 0x00	; 0
   1b70a:	a0 e0       	ldi	r26, 0x00	; 0
   1b70c:	b0 e0       	ldi	r27, 0x00	; 0
   1b70e:	f7 01       	movw	r30, r14
   1b710:	e4 5a       	subi	r30, 0xA4	; 164
   1b712:	ff 4f       	sbci	r31, 0xFF	; 255
   1b714:	80 83       	st	Z, r24
   1b716:	91 83       	std	Z+1, r25	; 0x01
   1b718:	a2 83       	std	Z+2, r26	; 0x02
   1b71a:	b3 83       	std	Z+3, r27	; 0x03
    ULIF->filesectors = LIF->DIR.FileSectors;
   1b71c:	c0 5f       	subi	r28, 0xF0	; 240
   1b71e:	de 4f       	sbci	r29, 0xFE	; 254
   1b720:	e8 81       	ld	r30, Y
   1b722:	f9 81       	ldd	r31, Y+1	; 0x01
   1b724:	c0 51       	subi	r28, 0x10	; 16
   1b726:	d1 40       	sbci	r29, 0x01	; 1
   1b728:	80 81       	ld	r24, Z
   1b72a:	91 81       	ldd	r25, Z+1	; 0x01
   1b72c:	a2 81       	ldd	r26, Z+2	; 0x02
   1b72e:	b3 81       	ldd	r27, Z+3	; 0x03
   1b730:	f7 01       	movw	r30, r14
   1b732:	80 8b       	std	Z+16, r24	; 0x10
   1b734:	91 8b       	std	Z+17, r25	; 0x11
   1b736:	a2 8b       	std	Z+18, r26	; 0x12
   1b738:	b3 8b       	std	Z+19, r27	; 0x13

    if( !lif_writedirindex(ULIF,0))
   1b73a:	60 e0       	ldi	r22, 0x00	; 0
   1b73c:	70 e0       	ldi	r23, 0x00	; 0
   1b73e:	c7 01       	movw	r24, r14
   1b740:	0e 94 2c cc 	call	0x19858	; 0x19858 <lif_writedirindex>
   1b744:	8c 01       	movw	r16, r24
   1b746:	89 2b       	or	r24, r25
   1b748:	41 f0       	breq	.+16     	; 0x1b75a <lif_extract_lif_as_lif+0x110>
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
    }
    if( !lif_writedirEOF(ULIF,1) )
   1b74a:	61 e0       	ldi	r22, 0x01	; 1
   1b74c:	70 e0       	ldi	r23, 0x00	; 0
   1b74e:	c7 01       	movw	r24, r14
   1b750:	0e 94 88 cc 	call	0x19910	; 0x19910 <lif_writedirEOF>
   1b754:	8c 01       	movw	r16, r24
   1b756:	89 2b       	or	r24, r25
   1b758:	39 f4       	brne	.+14     	; 0x1b768 <lif_extract_lif_as_lif+0x11e>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b75a:	c4 01       	movw	r24, r8
   1b75c:	0e 94 37 cb 	call	0x1966e	; 0x1966e <lif_close_volume>
   1b760:	c7 01       	movw	r24, r14
   1b762:	0e 94 37 cb 	call	0x1966e	; 0x1966e <lif_close_volume>
    }
    if( !lif_writedirEOF(ULIF,1) )
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
   1b766:	a3 c0       	rjmp	.+326    	; 0x1b8ae <lif_extract_lif_as_lif+0x264>
    }

    uoffset =  ULIF->filestart * (long) LIF_SECTOR_SIZE;
   1b768:	f7 01       	movw	r30, r14
   1b76a:	44 84       	ldd	r4, Z+12	; 0x0c
   1b76c:	55 84       	ldd	r5, Z+13	; 0x0d
   1b76e:	66 84       	ldd	r6, Z+14	; 0x0e
   1b770:	77 84       	ldd	r7, Z+15	; 0x0f
   1b772:	76 2c       	mov	r7, r6
   1b774:	65 2c       	mov	r6, r5
   1b776:	54 2c       	mov	r5, r4
   1b778:	44 24       	eor	r4, r4

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b77a:	f4 01       	movw	r30, r8
   1b77c:	e4 5a       	subi	r30, 0xA4	; 164
   1b77e:	ff 4f       	sbci	r31, 0xFF	; 255
   1b780:	80 81       	ld	r24, Z
   1b782:	91 81       	ldd	r25, Z+1	; 0x01
   1b784:	a2 81       	ldd	r26, Z+2	; 0x02
   1b786:	b3 81       	ldd	r27, Z+3	; 0x03
   1b788:	22 27       	eor	r18, r18
   1b78a:	38 2f       	mov	r19, r24
   1b78c:	49 2f       	mov	r20, r25
   1b78e:	5a 2f       	mov	r21, r26
   1b790:	c4 5f       	subi	r28, 0xF4	; 244
   1b792:	de 4f       	sbci	r29, 0xFE	; 254
   1b794:	28 83       	st	Y, r18
   1b796:	39 83       	std	Y+1, r19	; 0x01
   1b798:	4a 83       	std	Y+2, r20	; 0x02
   1b79a:	5b 83       	std	Y+3, r21	; 0x03
   1b79c:	cc 50       	subi	r28, 0x0C	; 12
   1b79e:	d1 40       	sbci	r29, 0x01	; 1

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b7a0:	21 2c       	mov	r2, r1
   1b7a2:	31 2c       	mov	r3, r1
            return(0);
        }
        bytes += size;
        offset += size;
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
   1b7a4:	8f e8       	ldi	r24, 0x8F	; 143
   1b7a6:	94 e3       	ldi	r25, 0x34	; 52
   1b7a8:	9c 01       	movw	r18, r24
   1b7aa:	40 e0       	ldi	r20, 0x00	; 0
   1b7ac:	ce 5e       	subi	r28, 0xEE	; 238
   1b7ae:	de 4f       	sbci	r29, 0xFE	; 254
   1b7b0:	28 83       	st	Y, r18
   1b7b2:	39 83       	std	Y+1, r19	; 0x01
   1b7b4:	4a 83       	std	Y+2, r20	; 0x02
   1b7b6:	c2 51       	subi	r28, 0x12	; 18
   1b7b8:	d1 40       	sbci	r29, 0x01	; 1

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b7ba:	c0 5f       	subi	r28, 0xF0	; 240
   1b7bc:	de 4f       	sbci	r29, 0xFE	; 254
   1b7be:	e8 81       	ld	r30, Y
   1b7c0:	f9 81       	ldd	r31, Y+1	; 0x01
   1b7c2:	c0 51       	subi	r28, 0x10	; 16
   1b7c4:	d1 40       	sbci	r29, 0x01	; 1
   1b7c6:	80 81       	ld	r24, Z
   1b7c8:	91 81       	ldd	r25, Z+1	; 0x01
   1b7ca:	28 16       	cp	r2, r24
   1b7cc:	39 06       	cpc	r3, r25
   1b7ce:	0c f0       	brlt	.+2      	; 0x1b7d2 <lif_extract_lif_as_lif+0x188>
   1b7d0:	58 c0       	rjmp	.+176    	; 0x1b882 <lif_extract_lif_as_lif+0x238>
    {
        size = lif_read(LIF, buf, offset,LIF_SECTOR_SIZE);
   1b7d2:	00 e0       	ldi	r16, 0x00	; 0
   1b7d4:	11 e0       	ldi	r17, 0x01	; 1
   1b7d6:	c4 5f       	subi	r28, 0xF4	; 244
   1b7d8:	de 4f       	sbci	r29, 0xFE	; 254
   1b7da:	28 81       	ld	r18, Y
   1b7dc:	39 81       	ldd	r19, Y+1	; 0x01
   1b7de:	4a 81       	ldd	r20, Y+2	; 0x02
   1b7e0:	5b 81       	ldd	r21, Y+3	; 0x03
   1b7e2:	cc 50       	subi	r28, 0x0C	; 12
   1b7e4:	d1 40       	sbci	r29, 0x01	; 1
   1b7e6:	be 01       	movw	r22, r28
   1b7e8:	68 5f       	subi	r22, 0xF8	; 248
   1b7ea:	7f 4f       	sbci	r23, 0xFF	; 255
   1b7ec:	c4 01       	movw	r24, r8
   1b7ee:	0e 94 8b c2 	call	0x18516	; 0x18516 <lif_read>
   1b7f2:	5b 01       	movw	r10, r22
   1b7f4:	6c 01       	movw	r12, r24
        if(size < LIF_SECTOR_SIZE)
   1b7f6:	6f 3f       	cpi	r22, 0xFF	; 255
   1b7f8:	71 05       	cpc	r23, r1
   1b7fa:	09 f0       	breq	.+2      	; 0x1b7fe <lif_extract_lif_as_lif+0x1b4>
   1b7fc:	2c f4       	brge	.+10     	; 0x1b808 <lif_extract_lif_as_lif+0x1be>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b7fe:	c4 01       	movw	r24, r8
   1b800:	0e 94 37 cb 	call	0x1966e	; 0x1966e <lif_close_volume>
   1b804:	c7 01       	movw	r24, r14
   1b806:	4f cf       	rjmp	.-354    	; 0x1b6a6 <lif_extract_lif_as_lif+0x5c>
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }

        lif_write(ULIF,buf,uoffset,LIF_SECTOR_SIZE);
   1b808:	00 e0       	ldi	r16, 0x00	; 0
   1b80a:	11 e0       	ldi	r17, 0x01	; 1
   1b80c:	a3 01       	movw	r20, r6
   1b80e:	92 01       	movw	r18, r4
   1b810:	be 01       	movw	r22, r28
   1b812:	68 5f       	subi	r22, 0xF8	; 248
   1b814:	7f 4f       	sbci	r23, 0xFF	; 255
   1b816:	c7 01       	movw	r24, r14
   1b818:	0e 94 dc c2 	call	0x185b8	; 0x185b8 <lif_write>
        {
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }
        bytes += size;
   1b81c:	c5 01       	movw	r24, r10
   1b81e:	0b 2c       	mov	r0, r11
   1b820:	00 0c       	add	r0, r0
   1b822:	aa 0b       	sbc	r26, r26
   1b824:	bb 0b       	sbc	r27, r27
   1b826:	48 0e       	add	r4, r24
   1b828:	59 1e       	adc	r5, r25
   1b82a:	6a 1e       	adc	r6, r26
   1b82c:	7b 1e       	adc	r7, r27
        offset += size;
   1b82e:	c4 5f       	subi	r28, 0xF4	; 244
   1b830:	de 4f       	sbci	r29, 0xFE	; 254
   1b832:	28 81       	ld	r18, Y
   1b834:	39 81       	ldd	r19, Y+1	; 0x01
   1b836:	4a 81       	ldd	r20, Y+2	; 0x02
   1b838:	5b 81       	ldd	r21, Y+3	; 0x03
   1b83a:	cc 50       	subi	r28, 0x0C	; 12
   1b83c:	d1 40       	sbci	r29, 0x01	; 1
   1b83e:	28 0f       	add	r18, r24
   1b840:	39 1f       	adc	r19, r25
   1b842:	4a 1f       	adc	r20, r26
   1b844:	5b 1f       	adc	r21, r27
   1b846:	c4 5f       	subi	r28, 0xF4	; 244
   1b848:	de 4f       	sbci	r29, 0xFE	; 254
   1b84a:	28 83       	st	Y, r18
   1b84c:	39 83       	std	Y+1, r19	; 0x01
   1b84e:	4a 83       	std	Y+2, r20	; 0x02
   1b850:	5b 83       	std	Y+3, r21	; 0x03
   1b852:	cc 50       	subi	r28, 0x0C	; 12
   1b854:	d1 40       	sbci	r29, 0x01	; 1
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
   1b856:	ed b7       	in	r30, 0x3d	; 61
   1b858:	fe b7       	in	r31, 0x3e	; 62
   1b85a:	44 82       	std	Z+4, r4	; 0x04
   1b85c:	55 82       	std	Z+5, r5	; 0x05
   1b85e:	66 82       	std	Z+6, r6	; 0x06
   1b860:	77 82       	std	Z+7, r7	; 0x07
   1b862:	ce 5e       	subi	r28, 0xEE	; 238
   1b864:	de 4f       	sbci	r29, 0xFE	; 254
   1b866:	28 81       	ld	r18, Y
   1b868:	39 81       	ldd	r19, Y+1	; 0x01
   1b86a:	4a 81       	ldd	r20, Y+2	; 0x02
   1b86c:	c2 51       	subi	r28, 0x12	; 18
   1b86e:	d1 40       	sbci	r29, 0x01	; 1
   1b870:	21 83       	std	Z+1, r18	; 0x01
   1b872:	32 83       	std	Z+2, r19	; 0x02
   1b874:	43 83       	std	Z+3, r20	; 0x03
   1b876:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b87a:	ff ef       	ldi	r31, 0xFF	; 255
   1b87c:	2f 1a       	sub	r2, r31
   1b87e:	3f 0a       	sbc	r3, r31
   1b880:	9c cf       	rjmp	.-200    	; 0x1b7ba <lif_extract_lif_as_lif+0x170>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b882:	c4 01       	movw	r24, r8
   1b884:	0e 94 37 cb 	call	0x1966e	; 0x1966e <lif_close_volume>
   1b888:	c7 01       	movw	r24, r14
   1b88a:	0e 94 37 cb 	call	0x1966e	; 0x1966e <lif_close_volume>
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
    }
    lif_closedir(LIF);
    lif_closedir(ULIF);
    printf("\tWrote: %8ld\n", bytes);
   1b88e:	ed b7       	in	r30, 0x3d	; 61
   1b890:	fe b7       	in	r31, 0x3e	; 62
   1b892:	44 82       	std	Z+4, r4	; 0x04
   1b894:	55 82       	std	Z+5, r5	; 0x05
   1b896:	66 82       	std	Z+6, r6	; 0x06
   1b898:	77 82       	std	Z+7, r7	; 0x07
   1b89a:	81 e8       	ldi	r24, 0x81	; 129
   1b89c:	94 e3       	ldi	r25, 0x34	; 52
   1b89e:	a0 e0       	ldi	r26, 0x00	; 0
   1b8a0:	81 83       	std	Z+1, r24	; 0x01
   1b8a2:	92 83       	std	Z+2, r25	; 0x02
   1b8a4:	a3 83       	std	Z+3, r26	; 0x03
   1b8a6:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    return(1);
   1b8aa:	01 e0       	ldi	r16, 0x01	; 1
   1b8ac:	10 e0       	ldi	r17, 0x00	; 0
}
   1b8ae:	c8 01       	movw	r24, r16
   1b8b0:	cc 5e       	subi	r28, 0xEC	; 236
   1b8b2:	de 4f       	sbci	r29, 0xFE	; 254
   1b8b4:	e2 e1       	ldi	r30, 0x12	; 18
   1b8b6:	0c 94 35 e5 	jmp	0x1ca6a	; 0x1ca6a <__epilogue_restores__>

0001b8ba <lif_add_lif_file>:
/// @param[in] lifname: LIF file name to copy file to
/// @param[in] userfile: LIF mage name copy file from 
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_lif_file(char *lifimagename, char *lifname, char *userfile)
{
   1b8ba:	2f 92       	push	r2
   1b8bc:	3f 92       	push	r3
   1b8be:	4f 92       	push	r4
   1b8c0:	5f 92       	push	r5
   1b8c2:	6f 92       	push	r6
   1b8c4:	8f 92       	push	r8
   1b8c6:	9f 92       	push	r9
   1b8c8:	af 92       	push	r10
   1b8ca:	bf 92       	push	r11
   1b8cc:	cf 92       	push	r12
   1b8ce:	df 92       	push	r13
   1b8d0:	ef 92       	push	r14
   1b8d2:	ff 92       	push	r15
   1b8d4:	0f 93       	push	r16
   1b8d6:	1f 93       	push	r17
   1b8d8:	cf 93       	push	r28
   1b8da:	df 93       	push	r29
   1b8dc:	cd b7       	in	r28, 0x3d	; 61
   1b8de:	de b7       	in	r29, 0x3e	; 62
   1b8e0:	cd 51       	subi	r28, 0x1D	; 29
   1b8e2:	d1 40       	sbci	r29, 0x01	; 1
   1b8e4:	0f b6       	in	r0, 0x3f	; 63
   1b8e6:	f8 94       	cli
   1b8e8:	de bf       	out	0x3e, r29	; 62
   1b8ea:	0f be       	out	0x3f, r0	; 63
   1b8ec:	cd bf       	out	0x3d, r28	; 61
   1b8ee:	5c 01       	movw	r10, r24
   1b8f0:	7b 01       	movw	r14, r22
   1b8f2:	4a 01       	movw	r8, r20
    long offset, uoffset, start, bytes;
    int i, size;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    if(!*lifimagename)
   1b8f4:	dc 01       	movw	r26, r24
   1b8f6:	8c 91       	ld	r24, X
   1b8f8:	81 11       	cpse	r24, r1
   1b8fa:	03 c0       	rjmp	.+6      	; 0x1b902 <lif_add_lif_file+0x48>
    {
        printf("lif_add: lifimagename is empty\n");
   1b8fc:	81 e6       	ldi	r24, 0x61	; 97
   1b8fe:	94 e3       	ldi	r25, 0x34	; 52
   1b900:	06 c0       	rjmp	.+12     	; 0x1b90e <lif_add_lif_file+0x54>
        return(-1);
    }
    if(!*lifname)
   1b902:	db 01       	movw	r26, r22
   1b904:	8c 91       	ld	r24, X
   1b906:	81 11       	cpse	r24, r1
   1b908:	0b c0       	rjmp	.+22     	; 0x1b920 <lif_add_lif_file+0x66>
    {
        printf("lif_add: lifname is empty\n");
   1b90a:	86 e4       	ldi	r24, 0x46	; 70
   1b90c:	94 e3       	ldi	r25, 0x34	; 52
   1b90e:	a0 e0       	ldi	r26, 0x00	; 0
   1b910:	ed b7       	in	r30, 0x3d	; 61
   1b912:	fe b7       	in	r31, 0x3e	; 62
   1b914:	81 83       	std	Z+1, r24	; 0x01
   1b916:	92 83       	std	Z+2, r25	; 0x02
   1b918:	a3 83       	std	Z+3, r26	; 0x03
   1b91a:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   1b91e:	25 c1       	rjmp	.+586    	; 0x1bb6a <lif_add_lif_file+0x2b0>
        return(-1);
    }
    if(!*userfile)
   1b920:	da 01       	movw	r26, r20
   1b922:	8c 91       	ld	r24, X
   1b924:	81 11       	cpse	r24, r1
   1b926:	03 c0       	rjmp	.+6      	; 0x1b92e <lif_add_lif_file+0x74>
    {
        printf("lif_add: userfile is empty\n");
   1b928:	8a e2       	ldi	r24, 0x2A	; 42
   1b92a:	94 e3       	ldi	r25, 0x34	; 52
   1b92c:	f0 cf       	rjmp	.-32     	; 0x1b90e <lif_add_lif_file+0x54>
        return(-1);
    }

    if(debuglevel & 0x400)
   1b92e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1b932:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1b936:	92 ff       	sbrs	r25, 2
   1b938:	10 c0       	rjmp	.+32     	; 0x1b95a <lif_add_lif_file+0xa0>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n", 
   1b93a:	ed b7       	in	r30, 0x3d	; 61
   1b93c:	fe b7       	in	r31, 0x3e	; 62
   1b93e:	51 87       	std	Z+9, r21	; 0x09
   1b940:	40 87       	std	Z+8, r20	; 0x08
   1b942:	77 83       	std	Z+7, r23	; 0x07
   1b944:	66 83       	std	Z+6, r22	; 0x06
   1b946:	b5 82       	std	Z+5, r11	; 0x05
   1b948:	a4 82       	std	Z+4, r10	; 0x04
   1b94a:	8b ef       	ldi	r24, 0xFB	; 251
   1b94c:	93 e3       	ldi	r25, 0x33	; 51
   1b94e:	a0 e0       	ldi	r26, 0x00	; 0
   1b950:	81 83       	std	Z+1, r24	; 0x01
   1b952:	92 83       	std	Z+2, r25	; 0x02
   1b954:	a3 83       	std	Z+3, r26	; 0x03
   1b956:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
            lifimagename, lifname, userfile);

    // open  userfile as LIF image
    ULIF = lif_open_volume(userfile,"rb+");
   1b95a:	66 e2       	ldi	r22, 0x26	; 38
   1b95c:	78 e0       	ldi	r23, 0x08	; 8
   1b95e:	c4 01       	movw	r24, r8
   1b960:	0e 94 f2 d1 	call	0x1a3e4	; 0x1a3e4 <lif_open_volume>
   1b964:	6c 01       	movw	r12, r24
    if(ULIF == NULL)
   1b966:	00 97       	sbiw	r24, 0x00	; 0
   1b968:	09 f4       	brne	.+2      	; 0x1b96c <lif_add_lif_file+0xb2>
   1b96a:	ff c0       	rjmp	.+510    	; 0x1bb6a <lif_add_lif_file+0x2b0>
        return(-1); 

    // find lif file in user image
    index = lif_find_file(ULIF, lifname);
   1b96c:	b7 01       	movw	r22, r14
   1b96e:	09 d8       	rcall	.-4078   	; 0x1a982 <lif_find_file>
    if(index == -1)
   1b970:	01 96       	adiw	r24, 0x01	; 1
   1b972:	a1 f4       	brne	.+40     	; 0x1b99c <lif_add_lif_file+0xe2>
    {
        printf("File not found:%s\n", lifname);
   1b974:	ed b7       	in	r30, 0x3d	; 61
   1b976:	fe b7       	in	r31, 0x3e	; 62
   1b978:	f5 82       	std	Z+5, r15	; 0x05
   1b97a:	e4 82       	std	Z+4, r14	; 0x04
   1b97c:	88 ee       	ldi	r24, 0xE8	; 232
   1b97e:	93 e3       	ldi	r25, 0x33	; 51
   1b980:	a0 e0       	ldi	r26, 0x00	; 0
   1b982:	81 83       	std	Z+1, r24	; 0x01
   1b984:	92 83       	std	Z+2, r25	; 0x02
   1b986:	a3 83       	std	Z+3, r26	; 0x03
   1b988:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b98c:	c6 01       	movw	r24, r12
   1b98e:	0e 94 37 cb 	call	0x1966e	; 0x1966e <lif_close_volume>
    index = lif_find_file(ULIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(ULIF);
        return(0);
   1b992:	60 e0       	ldi	r22, 0x00	; 0
   1b994:	70 e0       	ldi	r23, 0x00	; 0
   1b996:	80 e0       	ldi	r24, 0x00	; 0
   1b998:	90 e0       	ldi	r25, 0x00	; 0
   1b99a:	ff c0       	rjmp	.+510    	; 0x1bb9a <lif_add_lif_file+0x2e0>
    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1b99c:	66 e2       	ldi	r22, 0x26	; 38
   1b99e:	78 e0       	ldi	r23, 0x08	; 8
   1b9a0:	c5 01       	movw	r24, r10
   1b9a2:	0e 94 f2 d1 	call	0x1a3e4	; 0x1a3e4 <lif_open_volume>
   1b9a6:	7c 01       	movw	r14, r24
    if(LIF == NULL)
   1b9a8:	00 97       	sbiw	r24, 0x00	; 0
   1b9aa:	09 f4       	brne	.+2      	; 0x1b9ae <lif_add_lif_file+0xf4>
   1b9ac:	de c0       	rjmp	.+444    	; 0x1bb6a <lif_add_lif_file+0x2b0>
        return(-1); 

    // Now find a new free record that is big enough
    index = lif_newdir(LIF, ULIF->DIR.FileSectors);
   1b9ae:	f6 01       	movw	r30, r12
   1b9b0:	e0 5a       	subi	r30, 0xA0	; 160
   1b9b2:	ff 4f       	sbci	r31, 0xFF	; 255
   1b9b4:	40 81       	ld	r20, Z
   1b9b6:	51 81       	ldd	r21, Z+1	; 0x01
   1b9b8:	62 81       	ldd	r22, Z+2	; 0x02
   1b9ba:	73 81       	ldd	r23, Z+3	; 0x03
   1b9bc:	0e 94 92 d0 	call	0x1a124	; 0x1a124 <lif_newdir>
   1b9c0:	ca 5e       	subi	r28, 0xEA	; 234
   1b9c2:	de 4f       	sbci	r29, 0xFE	; 254
   1b9c4:	99 83       	std	Y+1, r25	; 0x01
   1b9c6:	88 83       	st	Y, r24
   1b9c8:	c6 51       	subi	r28, 0x16	; 22
   1b9ca:	d1 40       	sbci	r29, 0x01	; 1
    if(index == -1)
   1b9cc:	01 96       	adiw	r24, 0x01	; 1
   1b9ce:	79 f4       	brne	.+30     	; 0x1b9ee <lif_add_lif_file+0x134>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n", 
   1b9d0:	ed b7       	in	r30, 0x3d	; 61
   1b9d2:	fe b7       	in	r31, 0x3e	; 62
   1b9d4:	97 82       	std	Z+7, r9	; 0x07
   1b9d6:	86 82       	std	Z+6, r8	; 0x06
   1b9d8:	b5 82       	std	Z+5, r11	; 0x05
   1b9da:	a4 82       	std	Z+4, r10	; 0x04
   1b9dc:	88 eb       	ldi	r24, 0xB8	; 184
   1b9de:	93 e3       	ldi	r25, 0x33	; 51
   1b9e0:	a0 e0       	ldi	r26, 0x00	; 0
   1b9e2:	81 83       	std	Z+1, r24	; 0x01
   1b9e4:	92 83       	std	Z+2, r25	; 0x02
   1b9e6:	a3 83       	std	Z+3, r26	; 0x03
   1b9e8:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   1b9ec:	a8 c0       	rjmp	.+336    	; 0x1bb3e <lif_add_lif_file+0x284>
            lif_closedir(ULIF);
        return(-1);
    }

    // Save start sector
    start = LIF->DIR.FileStartSector;
   1b9ee:	c7 01       	movw	r24, r14
   1b9f0:	84 5a       	subi	r24, 0xA4	; 164
   1b9f2:	9f 4f       	sbci	r25, 0xFF	; 255
   1b9f4:	dc 01       	movw	r26, r24
   1b9f6:	4d 91       	ld	r20, X+
   1b9f8:	5d 91       	ld	r21, X+
   1b9fa:	6d 91       	ld	r22, X+
   1b9fc:	7c 91       	ld	r23, X
   1b9fe:	13 97       	sbiw	r26, 0x03	; 3

    // Copy user image directory record to master image directory record
    LIF->DIR = ULIF->DIR;
   1ba00:	21 e2       	ldi	r18, 0x21	; 33
   1ba02:	f6 01       	movw	r30, r12
   1ba04:	e1 5b       	subi	r30, 0xB1	; 177
   1ba06:	ff 4f       	sbci	r31, 0xFF	; 255
   1ba08:	1d 97       	sbiw	r26, 0x0d	; 13
   1ba0a:	01 90       	ld	r0, Z+
   1ba0c:	0d 92       	st	X+, r0
   1ba0e:	2a 95       	dec	r18
   1ba10:	e1 f7       	brne	.-8      	; 0x1ba0a <lif_add_lif_file+0x150>

    // Restore FileStartSector
    LIF->DIR.FileStartSector = start;
   1ba12:	fc 01       	movw	r30, r24
   1ba14:	40 83       	st	Z, r20
   1ba16:	51 83       	std	Z+1, r21	; 0x01
   1ba18:	62 83       	std	Z+2, r22	; 0x02
   1ba1a:	73 83       	std	Z+3, r23	; 0x03

    // Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1ba1c:	b6 2f       	mov	r27, r22
   1ba1e:	a5 2f       	mov	r26, r21
   1ba20:	94 2f       	mov	r25, r20
   1ba22:	88 27       	eor	r24, r24
   1ba24:	c2 5f       	subi	r28, 0xF2	; 242
   1ba26:	de 4f       	sbci	r29, 0xFE	; 254
   1ba28:	88 83       	st	Y, r24
   1ba2a:	99 83       	std	Y+1, r25	; 0x01
   1ba2c:	aa 83       	std	Y+2, r26	; 0x02
   1ba2e:	bb 83       	std	Y+3, r27	; 0x03
   1ba30:	ce 50       	subi	r28, 0x0E	; 14
   1ba32:	d1 40       	sbci	r29, 0x01	; 1
    // User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1ba34:	f6 01       	movw	r30, r12
   1ba36:	e4 5a       	subi	r30, 0xA4	; 164
   1ba38:	ff 4f       	sbci	r31, 0xFF	; 255
   1ba3a:	80 81       	ld	r24, Z
   1ba3c:	91 81       	ldd	r25, Z+1	; 0x01
   1ba3e:	a2 81       	ldd	r26, Z+2	; 0x02
   1ba40:	b3 81       	ldd	r27, Z+3	; 0x03
   1ba42:	22 27       	eor	r18, r18
   1ba44:	38 2f       	mov	r19, r24
   1ba46:	49 2f       	mov	r20, r25
   1ba48:	5a 2f       	mov	r21, r26
   1ba4a:	ce 5e       	subi	r28, 0xEE	; 238
   1ba4c:	de 4f       	sbci	r29, 0xFE	; 254
   1ba4e:	28 83       	st	Y, r18
   1ba50:	39 83       	std	Y+1, r19	; 0x01
   1ba52:	4a 83       	std	Y+2, r20	; 0x02
   1ba54:	5b 83       	std	Y+3, r21	; 0x03
   1ba56:	c2 51       	subi	r28, 0x12	; 18
   1ba58:	d1 40       	sbci	r29, 0x01	; 1
    bytes = 0;
    // Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1ba5a:	21 2c       	mov	r2, r1
   1ba5c:	31 2c       	mov	r3, r1

    // Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    // User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
   1ba5e:	81 2c       	mov	r8, r1
   1ba60:	91 2c       	mov	r9, r1
   1ba62:	54 01       	movw	r10, r8
    // Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1ba64:	a7 01       	movw	r20, r14
   1ba66:	40 5a       	subi	r20, 0xA0	; 160
   1ba68:	5f 4f       	sbci	r21, 0xFF	; 255
   1ba6a:	c4 5e       	subi	r28, 0xE4	; 228
   1ba6c:	de 4f       	sbci	r29, 0xFE	; 254
   1ba6e:	59 83       	std	Y+1, r21	; 0x01
   1ba70:	48 83       	st	Y, r20
   1ba72:	cc 51       	subi	r28, 0x1C	; 28
   1ba74:	d1 40       	sbci	r29, 0x01	; 1
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
        printf("\tWrote: %8ld\r", bytes);
   1ba76:	8a ea       	ldi	r24, 0xAA	; 170
   1ba78:	93 e3       	ldi	r25, 0x33	; 51
   1ba7a:	2c 01       	movw	r4, r24
   1ba7c:	61 2c       	mov	r6, r1
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    // User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
    // Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1ba7e:	27 c0       	rjmp	.+78     	; 0x1bace <lif_add_lif_file+0x214>
            lif_closedir(ULIF);
            return(-1);
        }

        // Write
        size = lif_write(LIF, buf, offset, LIF_SECTOR_SIZE);
   1ba80:	00 e0       	ldi	r16, 0x00	; 0
   1ba82:	11 e0       	ldi	r17, 0x01	; 1
   1ba84:	c8 5e       	subi	r28, 0xE8	; 232
   1ba86:	de 4f       	sbci	r29, 0xFE	; 254
   1ba88:	28 81       	ld	r18, Y
   1ba8a:	39 81       	ldd	r19, Y+1	; 0x01
   1ba8c:	4a 81       	ldd	r20, Y+2	; 0x02
   1ba8e:	5b 81       	ldd	r21, Y+3	; 0x03
   1ba90:	c8 51       	subi	r28, 0x18	; 24
   1ba92:	d1 40       	sbci	r29, 0x01	; 1
   1ba94:	be 01       	movw	r22, r28
   1ba96:	66 5f       	subi	r22, 0xF6	; 246
   1ba98:	7f 4f       	sbci	r23, 0xFF	; 255
   1ba9a:	c7 01       	movw	r24, r14
   1ba9c:	0e 94 dc c2 	call	0x185b8	; 0x185b8 <lif_write>
        if(size < LIF_SECTOR_SIZE)
   1baa0:	8f 3f       	cpi	r24, 0xFF	; 255
   1baa2:	91 05       	cpc	r25, r1
   1baa4:	09 f0       	breq	.+2      	; 0x1baa8 <lif_add_lif_file+0x1ee>
   1baa6:	0c f4       	brge	.+2      	; 0x1baaa <lif_add_lif_file+0x1f0>
   1baa8:	4a c0       	rjmp	.+148    	; 0x1bb3e <lif_add_lif_file+0x284>
            lif_closedir(ULIF);
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
   1baaa:	5f ef       	ldi	r21, 0xFF	; 255
   1baac:	95 1a       	sub	r9, r21
   1baae:	a5 0a       	sbc	r10, r21
   1bab0:	b5 0a       	sbc	r11, r21
        printf("\tWrote: %8ld\r", bytes);
   1bab2:	ed b7       	in	r30, 0x3d	; 61
   1bab4:	fe b7       	in	r31, 0x3e	; 62
   1bab6:	84 82       	std	Z+4, r8	; 0x04
   1bab8:	95 82       	std	Z+5, r9	; 0x05
   1baba:	a6 82       	std	Z+6, r10	; 0x06
   1babc:	b7 82       	std	Z+7, r11	; 0x07
   1babe:	41 82       	std	Z+1, r4	; 0x01
   1bac0:	52 82       	std	Z+2, r5	; 0x02
   1bac2:	63 82       	std	Z+3, r6	; 0x03
   1bac4:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    // User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
    // Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1bac8:	ff ef       	ldi	r31, 0xFF	; 255
   1baca:	2f 1a       	sub	r2, r31
   1bacc:	3f 0a       	sbc	r3, r31
   1bace:	ce 5e       	subi	r28, 0xEE	; 238
   1bad0:	de 4f       	sbci	r29, 0xFE	; 254
   1bad2:	28 81       	ld	r18, Y
   1bad4:	39 81       	ldd	r19, Y+1	; 0x01
   1bad6:	4a 81       	ldd	r20, Y+2	; 0x02
   1bad8:	5b 81       	ldd	r21, Y+3	; 0x03
   1bada:	c2 51       	subi	r28, 0x12	; 18
   1badc:	d1 40       	sbci	r29, 0x01	; 1
   1bade:	28 0d       	add	r18, r8
   1bae0:	39 1d       	adc	r19, r9
   1bae2:	4a 1d       	adc	r20, r10
   1bae4:	5b 1d       	adc	r21, r11
   1bae6:	c2 5f       	subi	r28, 0xF2	; 242
   1bae8:	de 4f       	sbci	r29, 0xFE	; 254
   1baea:	88 81       	ld	r24, Y
   1baec:	99 81       	ldd	r25, Y+1	; 0x01
   1baee:	aa 81       	ldd	r26, Y+2	; 0x02
   1baf0:	bb 81       	ldd	r27, Y+3	; 0x03
   1baf2:	ce 50       	subi	r28, 0x0E	; 14
   1baf4:	d1 40       	sbci	r29, 0x01	; 1
   1baf6:	88 0d       	add	r24, r8
   1baf8:	99 1d       	adc	r25, r9
   1bafa:	aa 1d       	adc	r26, r10
   1bafc:	bb 1d       	adc	r27, r11
   1bafe:	c8 5e       	subi	r28, 0xE8	; 232
   1bb00:	de 4f       	sbci	r29, 0xFE	; 254
   1bb02:	88 83       	st	Y, r24
   1bb04:	99 83       	std	Y+1, r25	; 0x01
   1bb06:	aa 83       	std	Y+2, r26	; 0x02
   1bb08:	bb 83       	std	Y+3, r27	; 0x03
   1bb0a:	c8 51       	subi	r28, 0x18	; 24
   1bb0c:	d1 40       	sbci	r29, 0x01	; 1
   1bb0e:	c4 5e       	subi	r28, 0xE4	; 228
   1bb10:	de 4f       	sbci	r29, 0xFE	; 254
   1bb12:	a8 81       	ld	r26, Y
   1bb14:	b9 81       	ldd	r27, Y+1	; 0x01
   1bb16:	cc 51       	subi	r28, 0x1C	; 28
   1bb18:	d1 40       	sbci	r29, 0x01	; 1
   1bb1a:	8d 91       	ld	r24, X+
   1bb1c:	9c 91       	ld	r25, X
   1bb1e:	28 16       	cp	r2, r24
   1bb20:	39 06       	cpc	r3, r25
   1bb22:	94 f4       	brge	.+36     	; 0x1bb48 <lif_add_lif_file+0x28e>
    {
        // Read
        size = lif_read(ULIF, buf, uoffset, LIF_SECTOR_SIZE);
   1bb24:	00 e0       	ldi	r16, 0x00	; 0
   1bb26:	11 e0       	ldi	r17, 0x01	; 1
   1bb28:	be 01       	movw	r22, r28
   1bb2a:	66 5f       	subi	r22, 0xF6	; 246
   1bb2c:	7f 4f       	sbci	r23, 0xFF	; 255
   1bb2e:	c6 01       	movw	r24, r12
   1bb30:	0e 94 8b c2 	call	0x18516	; 0x18516 <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1bb34:	6f 3f       	cpi	r22, 0xFF	; 255
   1bb36:	71 05       	cpc	r23, r1
   1bb38:	11 f0       	breq	.+4      	; 0x1bb3e <lif_add_lif_file+0x284>
   1bb3a:	0c f0       	brlt	.+2      	; 0x1bb3e <lif_add_lif_file+0x284>
   1bb3c:	a1 cf       	rjmp	.-190    	; 0x1ba80 <lif_add_lif_file+0x1c6>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bb3e:	c7 01       	movw	r24, r14
   1bb40:	0e 94 37 cb 	call	0x1966e	; 0x1966e <lif_close_volume>
   1bb44:	c6 01       	movw	r24, r12
   1bb46:	0f c0       	rjmp	.+30     	; 0x1bb66 <lif_add_lif_file+0x2ac>
   1bb48:	c6 01       	movw	r24, r12
   1bb4a:	0e 94 37 cb 	call	0x1966e	; 0x1966e <lif_close_volume>
        printf("\tWrote: %8ld\r", bytes);
    }
    lif_closedir(ULIF);

    // Write directory record
    if( !lif_writedirindex(LIF,index))
   1bb4e:	ca 5e       	subi	r28, 0xEA	; 234
   1bb50:	de 4f       	sbci	r29, 0xFE	; 254
   1bb52:	68 81       	ld	r22, Y
   1bb54:	79 81       	ldd	r23, Y+1	; 0x01
   1bb56:	c6 51       	subi	r28, 0x16	; 22
   1bb58:	d1 40       	sbci	r29, 0x01	; 1
   1bb5a:	c7 01       	movw	r24, r14
   1bb5c:	0e 94 2c cc 	call	0x19858	; 0x19858 <lif_writedirindex>
   1bb60:	89 2b       	or	r24, r25
   1bb62:	41 f4       	brne	.+16     	; 0x1bb74 <lif_add_lif_file+0x2ba>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bb64:	c7 01       	movw	r24, r14
   1bb66:	0e 94 37 cb 	call	0x1966e	; 0x1966e <lif_close_volume>

    // Write directory record
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
   1bb6a:	6f ef       	ldi	r22, 0xFF	; 255
   1bb6c:	7f ef       	ldi	r23, 0xFF	; 255
   1bb6e:	8f ef       	ldi	r24, 0xFF	; 255
   1bb70:	9f ef       	ldi	r25, 0xFF	; 255
   1bb72:	13 c0       	rjmp	.+38     	; 0x1bb9a <lif_add_lif_file+0x2e0>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bb74:	c7 01       	movw	r24, r14
   1bb76:	0e 94 37 cb 	call	0x1966e	; 0x1966e <lif_close_volume>
    {
        lif_closedir(LIF);
        return(-1);
    }
    lif_closedir(LIF);
    printf("\tWrote: %8ld\n", bytes);
   1bb7a:	ed b7       	in	r30, 0x3d	; 61
   1bb7c:	fe b7       	in	r31, 0x3e	; 62
   1bb7e:	84 82       	std	Z+4, r8	; 0x04
   1bb80:	95 82       	std	Z+5, r9	; 0x05
   1bb82:	a6 82       	std	Z+6, r10	; 0x06
   1bb84:	b7 82       	std	Z+7, r11	; 0x07
   1bb86:	8c e9       	ldi	r24, 0x9C	; 156
   1bb88:	93 e3       	ldi	r25, 0x33	; 51
   1bb8a:	a0 e0       	ldi	r26, 0x00	; 0
   1bb8c:	81 83       	std	Z+1, r24	; 0x01
   1bb8e:	92 83       	std	Z+2, r25	; 0x02
   1bb90:	a3 83       	std	Z+3, r26	; 0x03
   1bb92:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    return(bytes);
   1bb96:	b4 01       	movw	r22, r8
   1bb98:	c5 01       	movw	r24, r10
}
   1bb9a:	c3 5e       	subi	r28, 0xE3	; 227
   1bb9c:	de 4f       	sbci	r29, 0xFE	; 254
   1bb9e:	0f b6       	in	r0, 0x3f	; 63
   1bba0:	f8 94       	cli
   1bba2:	de bf       	out	0x3e, r29	; 62
   1bba4:	0f be       	out	0x3f, r0	; 63
   1bba6:	cd bf       	out	0x3d, r28	; 61
   1bba8:	df 91       	pop	r29
   1bbaa:	cf 91       	pop	r28
   1bbac:	1f 91       	pop	r17
   1bbae:	0f 91       	pop	r16
   1bbb0:	ff 90       	pop	r15
   1bbb2:	ef 90       	pop	r14
   1bbb4:	df 90       	pop	r13
   1bbb6:	cf 90       	pop	r12
   1bbb8:	bf 90       	pop	r11
   1bbba:	af 90       	pop	r10
   1bbbc:	9f 90       	pop	r9
   1bbbe:	8f 90       	pop	r8
   1bbc0:	6f 90       	pop	r6
   1bbc2:	5f 90       	pop	r5
   1bbc4:	4f 90       	pop	r4
   1bbc6:	3f 90       	pop	r3
   1bbc8:	2f 90       	pop	r2
   1bbca:	08 95       	ret

0001bbcc <lif_del_file>:
/// @param[in] lifimagename: LIF image name
/// @param[in] lifname: LIF file name
/// @return 1 if deleted, 0 if not found, -1 error
MEMSPACE
int lif_del_file(char *lifimagename, char *lifname)
{
   1bbcc:	ef 92       	push	r14
   1bbce:	ff 92       	push	r15
   1bbd0:	0f 93       	push	r16
   1bbd2:	1f 93       	push	r17
   1bbd4:	cf 93       	push	r28
   1bbd6:	df 93       	push	r29
   1bbd8:	ad b7       	in	r26, 0x3d	; 61
   1bbda:	be b7       	in	r27, 0x3e	; 62
   1bbdc:	17 97       	sbiw	r26, 0x07	; 7
   1bbde:	0f b6       	in	r0, 0x3f	; 63
   1bbe0:	f8 94       	cli
   1bbe2:	be bf       	out	0x3e, r27	; 62
   1bbe4:	0f be       	out	0x3f, r0	; 63
   1bbe6:	ad bf       	out	0x3d, r26	; 61
   1bbe8:	7c 01       	movw	r14, r24
   1bbea:	8b 01       	movw	r16, r22
    lif_t *LIF;
    int index;

    if(!*lifimagename)
   1bbec:	fc 01       	movw	r30, r24
   1bbee:	80 81       	ld	r24, Z
   1bbf0:	81 11       	cpse	r24, r1
   1bbf2:	03 c0       	rjmp	.+6      	; 0x1bbfa <lif_del_file+0x2e>
    {
        printf("lif_del_file: lifimagename is empty\n");
   1bbf4:	87 e7       	ldi	r24, 0x77	; 119
   1bbf6:	93 e3       	ldi	r25, 0x33	; 51
   1bbf8:	06 c0       	rjmp	.+12     	; 0x1bc06 <lif_del_file+0x3a>
        return(-1);
    }
    if(!*lifname)
   1bbfa:	fb 01       	movw	r30, r22
   1bbfc:	80 81       	ld	r24, Z
   1bbfe:	81 11       	cpse	r24, r1
   1bc00:	0b c0       	rjmp	.+22     	; 0x1bc18 <lif_del_file+0x4c>
    {
        printf("lif_del_file: lifname is empty\n");
   1bc02:	87 e5       	ldi	r24, 0x57	; 87
   1bc04:	93 e3       	ldi	r25, 0x33	; 51
   1bc06:	a0 e0       	ldi	r26, 0x00	; 0
   1bc08:	ed b7       	in	r30, 0x3d	; 61
   1bc0a:	fe b7       	in	r31, 0x3e	; 62
   1bc0c:	81 83       	std	Z+1, r24	; 0x01
   1bc0e:	92 83       	std	Z+2, r25	; 0x02
   1bc10:	a3 83       	std	Z+3, r26	; 0x03
   1bc12:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   1bc16:	68 c0       	rjmp	.+208    	; 0x1bce8 <lif_del_file+0x11c>
        return(-1);
    }
    if(debuglevel & 0x400)
   1bc18:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1bc1c:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1bc20:	92 ff       	sbrs	r25, 2
   1bc22:	0e c0       	rjmp	.+28     	; 0x1bc40 <lif_del_file+0x74>
        printf("LIF image:[%s], LIF name:[%s]\n", 
   1bc24:	ed b7       	in	r30, 0x3d	; 61
   1bc26:	fe b7       	in	r31, 0x3e	; 62
   1bc28:	77 83       	std	Z+7, r23	; 0x07
   1bc2a:	66 83       	std	Z+6, r22	; 0x06
   1bc2c:	f5 82       	std	Z+5, r15	; 0x05
   1bc2e:	e4 82       	std	Z+4, r14	; 0x04
   1bc30:	88 e3       	ldi	r24, 0x38	; 56
   1bc32:	93 e3       	ldi	r25, 0x33	; 51
   1bc34:	a0 e0       	ldi	r26, 0x00	; 0
   1bc36:	81 83       	std	Z+1, r24	; 0x01
   1bc38:	92 83       	std	Z+2, r25	; 0x02
   1bc3a:	a3 83       	std	Z+3, r26	; 0x03
   1bc3c:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
            lifimagename, lifname);


    LIF = lif_open_volume(lifimagename,"rb+");
   1bc40:	66 e2       	ldi	r22, 0x26	; 38
   1bc42:	78 e0       	ldi	r23, 0x08	; 8
   1bc44:	c7 01       	movw	r24, r14
   1bc46:	0e 94 f2 d1 	call	0x1a3e4	; 0x1a3e4 <lif_open_volume>
   1bc4a:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1bc4c:	00 97       	sbiw	r24, 0x00	; 0
   1bc4e:	09 f4       	brne	.+2      	; 0x1bc52 <lif_del_file+0x86>
   1bc50:	4b c0       	rjmp	.+150    	; 0x1bce8 <lif_del_file+0x11c>
        return(-1); 

    // Now find file record
    index = lif_find_file(LIF, lifname);
   1bc52:	b8 01       	movw	r22, r16
   1bc54:	0e 94 c1 d4 	call	0x1a982	; 0x1a982 <lif_find_file>
    if(index == -1)
   1bc58:	8f 3f       	cpi	r24, 0xFF	; 255
   1bc5a:	ff ef       	ldi	r31, 0xFF	; 255
   1bc5c:	9f 07       	cpc	r25, r31
   1bc5e:	a1 f4       	brne	.+40     	; 0x1bc88 <lif_del_file+0xbc>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bc60:	ce 01       	movw	r24, r28
   1bc62:	0e 94 37 cb 	call	0x1966e	; 0x1966e <lif_close_volume>
    // Now find file record
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        lif_closedir(LIF);
        printf("LIF image:[%s] lif name:[%s] not found\n", lifimagename, lifname);
   1bc66:	ed b7       	in	r30, 0x3d	; 61
   1bc68:	fe b7       	in	r31, 0x3e	; 62
   1bc6a:	17 83       	std	Z+7, r17	; 0x07
   1bc6c:	06 83       	std	Z+6, r16	; 0x06
   1bc6e:	f5 82       	std	Z+5, r15	; 0x05
   1bc70:	e4 82       	std	Z+4, r14	; 0x04
   1bc72:	80 e1       	ldi	r24, 0x10	; 16
   1bc74:	93 e3       	ldi	r25, 0x33	; 51
   1bc76:	a0 e0       	ldi	r26, 0x00	; 0
   1bc78:	81 83       	std	Z+1, r24	; 0x01
   1bc7a:	92 83       	std	Z+2, r25	; 0x02
   1bc7c:	a3 83       	std	Z+3, r26	; 0x03
   1bc7e:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
        return(0);
   1bc82:	80 e0       	ldi	r24, 0x00	; 0
   1bc84:	90 e0       	ldi	r25, 0x00	; 0
   1bc86:	32 c0       	rjmp	.+100    	; 0x1bcec <lif_del_file+0x120>
    }


// IF the next record is EOF then update EOF
    if(index >= LIF->EOFindex-1)
   1bc88:	2a a1       	ldd	r18, Y+34	; 0x22
   1bc8a:	3b a1       	ldd	r19, Y+35	; 0x23
   1bc8c:	21 50       	subi	r18, 0x01	; 1
   1bc8e:	31 09       	sbc	r19, r1
   1bc90:	fe 01       	movw	r30, r28
   1bc92:	e6 5a       	subi	r30, 0xA6	; 166
   1bc94:	ff 4f       	sbci	r31, 0xFF	; 255
   1bc96:	82 17       	cp	r24, r18
   1bc98:	93 07       	cpc	r25, r19
   1bc9a:	2c f0       	brlt	.+10     	; 0x1bca6 <lif_del_file+0xda>
        LIF->DIR.FileType = 0xffff;
   1bc9c:	2f ef       	ldi	r18, 0xFF	; 255
   1bc9e:	3f ef       	ldi	r19, 0xFF	; 255
   1bca0:	31 83       	std	Z+1, r19	; 0x01
   1bca2:	20 83       	st	Z, r18
   1bca4:	02 c0       	rjmp	.+4      	; 0x1bcaa <lif_del_file+0xde>
    else
        LIF->DIR.FileType = 0;
   1bca6:	11 82       	std	Z+1, r1	; 0x01
   1bca8:	10 82       	st	Z, r1

    // re-Write directory record
    if( !lif_writedirindex(LIF,index) )
   1bcaa:	bc 01       	movw	r22, r24
   1bcac:	ce 01       	movw	r24, r28
   1bcae:	0e 94 2c cc 	call	0x19858	; 0x19858 <lif_writedirindex>
   1bcb2:	89 2b       	or	r24, r25
   1bcb4:	21 f4       	brne	.+8      	; 0x1bcbe <lif_del_file+0xf2>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bcb6:	ce 01       	movw	r24, r28
   1bcb8:	0e 94 37 cb 	call	0x1966e	; 0x1966e <lif_close_volume>
   1bcbc:	15 c0       	rjmp	.+42     	; 0x1bce8 <lif_del_file+0x11c>
    {
        lif_closedir(LIF);
        return(-1);
    }

    lif_updatefree(LIF);
   1bcbe:	ce 01       	movw	r24, r28
   1bcc0:	0e 94 a0 cc 	call	0x19940	; 0x19940 <lif_updatefree>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bcc4:	ce 01       	movw	r24, r28
   1bcc6:	0e 94 37 cb 	call	0x1966e	; 0x1966e <lif_close_volume>
    }

    lif_updatefree(LIF);

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);
   1bcca:	ed b7       	in	r30, 0x3d	; 61
   1bccc:	fe b7       	in	r31, 0x3e	; 62
   1bcce:	15 83       	std	Z+5, r17	; 0x05
   1bcd0:	04 83       	std	Z+4, r16	; 0x04
   1bcd2:	81 e0       	ldi	r24, 0x01	; 1
   1bcd4:	93 e3       	ldi	r25, 0x33	; 51
   1bcd6:	a0 e0       	ldi	r26, 0x00	; 0
   1bcd8:	81 83       	std	Z+1, r24	; 0x01
   1bcda:	92 83       	std	Z+2, r25	; 0x02
   1bcdc:	a3 83       	std	Z+3, r26	; 0x03
   1bcde:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>

    return(1);
   1bce2:	81 e0       	ldi	r24, 0x01	; 1
   1bce4:	90 e0       	ldi	r25, 0x00	; 0
   1bce6:	02 c0       	rjmp	.+4      	; 0x1bcec <lif_del_file+0x120>
            lifimagename, lifname);


    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1); 
   1bce8:	8f ef       	ldi	r24, 0xFF	; 255
   1bcea:	9f ef       	ldi	r25, 0xFF	; 255

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);

    return(1);
}
   1bcec:	cd b7       	in	r28, 0x3d	; 61
   1bcee:	de b7       	in	r29, 0x3e	; 62
   1bcf0:	27 96       	adiw	r28, 0x07	; 7
   1bcf2:	e6 e0       	ldi	r30, 0x06	; 6
   1bcf4:	c6 c6       	rjmp	.+3468   	; 0x1ca82 <__epilogue_restores__+0x18>

0001bcf6 <lif_rename_file>:
/// @param[in] oldlifname: old LIF file name
/// @param[in] newlifname: new LIF file name
/// @return 1 if renamed, 0 if not found, -1 error
MEMSPACE
int lif_rename_file(char *lifimagename, char *oldlifname, char *newlifname)
{
   1bcf6:	a7 e0       	ldi	r26, 0x07	; 7
   1bcf8:	b0 e0       	ldi	r27, 0x00	; 0
   1bcfa:	e0 e8       	ldi	r30, 0x80	; 128
   1bcfc:	fe ed       	ldi	r31, 0xDE	; 222
   1bcfe:	a1 c6       	rjmp	.+3394   	; 0x1ca42 <__prologue_saves__+0x10>
   1bd00:	6c 01       	movw	r12, r24
   1bd02:	8b 01       	movw	r16, r22
   1bd04:	7a 01       	movw	r14, r20
    int index;
    lif_t *LIF;

    if(!*lifimagename)
   1bd06:	fc 01       	movw	r30, r24
   1bd08:	80 81       	ld	r24, Z
   1bd0a:	81 11       	cpse	r24, r1
   1bd0c:	03 c0       	rjmp	.+6      	; 0x1bd14 <lif_rename_file+0x1e>
    {
        printf("lif_rename_file: lifimagename is empty\n");
   1bd0e:	89 ed       	ldi	r24, 0xD9	; 217
   1bd10:	92 e3       	ldi	r25, 0x32	; 50
   1bd12:	06 c0       	rjmp	.+12     	; 0x1bd20 <lif_rename_file+0x2a>
        return(-1);
    }
    if(!*oldlifname)
   1bd14:	fb 01       	movw	r30, r22
   1bd16:	80 81       	ld	r24, Z
   1bd18:	81 11       	cpse	r24, r1
   1bd1a:	0b c0       	rjmp	.+22     	; 0x1bd32 <lif_rename_file+0x3c>
    {
        printf("lif_rename_file: old lifname is empty\n");
   1bd1c:	82 eb       	ldi	r24, 0xB2	; 178
   1bd1e:	92 e3       	ldi	r25, 0x32	; 50
   1bd20:	a0 e0       	ldi	r26, 0x00	; 0
   1bd22:	ed b7       	in	r30, 0x3d	; 61
   1bd24:	fe b7       	in	r31, 0x3e	; 62
   1bd26:	81 83       	std	Z+1, r24	; 0x01
   1bd28:	92 83       	std	Z+2, r25	; 0x02
   1bd2a:	a3 83       	std	Z+3, r26	; 0x03
   1bd2c:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   1bd30:	58 c0       	rjmp	.+176    	; 0x1bde2 <lif_rename_file+0xec>
        return(-1);
    }
    if(!*newlifname)
   1bd32:	fa 01       	movw	r30, r20
   1bd34:	80 81       	ld	r24, Z
   1bd36:	81 11       	cpse	r24, r1
   1bd38:	03 c0       	rjmp	.+6      	; 0x1bd40 <lif_rename_file+0x4a>
    {
        printf("lif_rename_file: new lifname is empty\n");
   1bd3a:	8b e8       	ldi	r24, 0x8B	; 139
   1bd3c:	92 e3       	ldi	r25, 0x32	; 50
   1bd3e:	f0 cf       	rjmp	.-32     	; 0x1bd20 <lif_rename_file+0x2a>
        return(-1);
    }

    if(!lif_checkname(newlifname))
   1bd40:	ca 01       	movw	r24, r20
   1bd42:	0e 94 a2 c3 	call	0x18744	; 0x18744 <lif_checkname>
   1bd46:	89 2b       	or	r24, r25
   1bd48:	19 f4       	brne	.+6      	; 0x1bd50 <lif_rename_file+0x5a>
    {
        printf("lif_rename_file: new lifname contains bad characters\n");
   1bd4a:	85 e5       	ldi	r24, 0x55	; 85
   1bd4c:	92 e3       	ldi	r25, 0x32	; 50
   1bd4e:	e8 cf       	rjmp	.-48     	; 0x1bd20 <lif_rename_file+0x2a>
        return(-1);

    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1bd50:	66 e2       	ldi	r22, 0x26	; 38
   1bd52:	78 e0       	ldi	r23, 0x08	; 8
   1bd54:	c6 01       	movw	r24, r12
   1bd56:	0e 94 f2 d1 	call	0x1a3e4	; 0x1a3e4 <lif_open_volume>
   1bd5a:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1bd5c:	00 97       	sbiw	r24, 0x00	; 0
   1bd5e:	09 f4       	brne	.+2      	; 0x1bd62 <lif_rename_file+0x6c>
   1bd60:	40 c0       	rjmp	.+128    	; 0x1bde2 <lif_rename_file+0xec>
        return(-1); 

    // Now find file record
    index = lif_find_file(LIF, oldlifname);
   1bd62:	b8 01       	movw	r22, r16
   1bd64:	0e 94 c1 d4 	call	0x1a982	; 0x1a982 <lif_find_file>
   1bd68:	5c 01       	movw	r10, r24
    if(index == -1)
   1bd6a:	01 96       	adiw	r24, 0x01	; 1
   1bd6c:	a1 f4       	brne	.+40     	; 0x1bd96 <lif_rename_file+0xa0>
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
   1bd6e:	ed b7       	in	r30, 0x3d	; 61
   1bd70:	fe b7       	in	r31, 0x3e	; 62
   1bd72:	17 83       	std	Z+7, r17	; 0x07
   1bd74:	06 83       	std	Z+6, r16	; 0x06
   1bd76:	d5 82       	std	Z+5, r13	; 0x05
   1bd78:	c4 82       	std	Z+4, r12	; 0x04
   1bd7a:	8c e2       	ldi	r24, 0x2C	; 44
   1bd7c:	92 e3       	ldi	r25, 0x32	; 50
   1bd7e:	a0 e0       	ldi	r26, 0x00	; 0
   1bd80:	81 83       	std	Z+1, r24	; 0x01
   1bd82:	92 83       	std	Z+2, r25	; 0x02
   1bd84:	a3 83       	std	Z+3, r26	; 0x03
   1bd86:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bd8a:	ce 01       	movw	r24, r28
   1bd8c:	0e 94 37 cb 	call	0x1966e	; 0x1966e <lif_close_volume>
    index = lif_find_file(LIF, oldlifname);
    if(index == -1)
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
        lif_closedir(LIF);
        return(0);
   1bd90:	80 e0       	ldi	r24, 0x00	; 0
   1bd92:	90 e0       	ldi	r25, 0x00	; 0
   1bd94:	28 c0       	rjmp	.+80     	; 0x1bde6 <lif_rename_file+0xf0>
    }
    lif_fixname(LIF->DIR.filename, newlifname, 10);
   1bd96:	4a e0       	ldi	r20, 0x0A	; 10
   1bd98:	50 e0       	ldi	r21, 0x00	; 0
   1bd9a:	b7 01       	movw	r22, r14
   1bd9c:	ce 01       	movw	r24, r28
   1bd9e:	81 5b       	subi	r24, 0xB1	; 177
   1bda0:	9f 4f       	sbci	r25, 0xFF	; 255
   1bda2:	0e 94 dc c3 	call	0x187b8	; 0x187b8 <lif_fixname>

    // re-Write directory record
    if( !lif_writedirindex(LIF,index))
   1bda6:	b5 01       	movw	r22, r10
   1bda8:	ce 01       	movw	r24, r28
   1bdaa:	0e 94 2c cc 	call	0x19858	; 0x19858 <lif_writedirindex>
   1bdae:	89 2b       	or	r24, r25
   1bdb0:	21 f4       	brne	.+8      	; 0x1bdba <lif_rename_file+0xc4>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bdb2:	ce 01       	movw	r24, r28
   1bdb4:	0e 94 37 cb 	call	0x1966e	; 0x1966e <lif_close_volume>
   1bdb8:	14 c0       	rjmp	.+40     	; 0x1bde2 <lif_rename_file+0xec>
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);
   1bdba:	ed b7       	in	r30, 0x3d	; 61
   1bdbc:	fe b7       	in	r31, 0x3e	; 62
   1bdbe:	f7 82       	std	Z+7, r15	; 0x07
   1bdc0:	e6 82       	std	Z+6, r14	; 0x06
   1bdc2:	15 83       	std	Z+5, r17	; 0x05
   1bdc4:	04 83       	std	Z+4, r16	; 0x04
   1bdc6:	85 e1       	ldi	r24, 0x15	; 21
   1bdc8:	92 e3       	ldi	r25, 0x32	; 50
   1bdca:	a0 e0       	ldi	r26, 0x00	; 0
   1bdcc:	81 83       	std	Z+1, r24	; 0x01
   1bdce:	92 83       	std	Z+2, r25	; 0x02
   1bdd0:	a3 83       	std	Z+3, r26	; 0x03
   1bdd2:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bdd6:	ce 01       	movw	r24, r28
   1bdd8:	0e 94 37 cb 	call	0x1966e	; 0x1966e <lif_close_volume>
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
   1bddc:	81 e0       	ldi	r24, 0x01	; 1
   1bdde:	90 e0       	ldi	r25, 0x00	; 0
   1bde0:	02 c0       	rjmp	.+4      	; 0x1bde6 <lif_rename_file+0xf0>

    }

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1); 
   1bde2:	8f ef       	ldi	r24, 0xFF	; 255
   1bde4:	9f ef       	ldi	r25, 0xFF	; 255
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
}
   1bde6:	cd b7       	in	r28, 0x3d	; 61
   1bde8:	de b7       	in	r29, 0x3e	; 62
   1bdea:	27 96       	adiw	r28, 0x07	; 7
   1bdec:	ea e0       	ldi	r30, 0x0A	; 10
   1bdee:	45 c6       	rjmp	.+3210   	; 0x1ca7a <__epilogue_restores__+0x10>

0001bdf0 <lif_create_image>:
/// @param[in] dirsectors: Number of LIF directory sectors
/// @param[in] sectors: total disk image size in sectors
///@return bytes writting to disk image
MEMSPACE
long lif_create_image(char *lifimagename, char *liflabel, uint32_t dirsectors, uint32_t sectors)
{
   1bdf0:	4f 92       	push	r4
   1bdf2:	5f 92       	push	r5
   1bdf4:	6f 92       	push	r6
   1bdf6:	7f 92       	push	r7
   1bdf8:	af 92       	push	r10
   1bdfa:	bf 92       	push	r11
   1bdfc:	cf 92       	push	r12
   1bdfe:	df 92       	push	r13
   1be00:	ef 92       	push	r14
   1be02:	ff 92       	push	r15
   1be04:	0f 93       	push	r16
   1be06:	1f 93       	push	r17
   1be08:	cf 93       	push	r28
   1be0a:	df 93       	push	r29
   1be0c:	ad b7       	in	r26, 0x3d	; 61
   1be0e:	be b7       	in	r27, 0x3e	; 62
   1be10:	17 97       	sbiw	r26, 0x07	; 7
   1be12:	0f b6       	in	r0, 0x3f	; 63
   1be14:	f8 94       	cli
   1be16:	be bf       	out	0x3e, r27	; 62
   1be18:	0f be       	out	0x3f, r0	; 63
   1be1a:	ad bf       	out	0x3d, r26	; 61
   1be1c:	27 01       	movw	r4, r14
   1be1e:	38 01       	movw	r6, r16
    uint32_t dirstart,filestart,filesectors,end;
    lif_t *LIF;

    if(!*lifimagename)
   1be20:	dc 01       	movw	r26, r24
   1be22:	ec 91       	ld	r30, X
   1be24:	e1 11       	cpse	r30, r1
   1be26:	03 c0       	rjmp	.+6      	; 0x1be2e <lif_create_image+0x3e>
    {
        printf("lif_create_image: lifimagename is empty\n");
   1be28:	8c ee       	ldi	r24, 0xEC	; 236
   1be2a:	91 e3       	ldi	r25, 0x31	; 49
   1be2c:	16 c0       	rjmp	.+44     	; 0x1be5a <lif_create_image+0x6a>
        return(-1);
    }
    if(!*liflabel)
   1be2e:	db 01       	movw	r26, r22
   1be30:	ec 91       	ld	r30, X
   1be32:	e1 11       	cpse	r30, r1
   1be34:	03 c0       	rjmp	.+6      	; 0x1be3c <lif_create_image+0x4c>
    {
        printf("lif_create_image: liflabel is empty\n");
   1be36:	87 ec       	ldi	r24, 0xC7	; 199
   1be38:	91 e3       	ldi	r25, 0x31	; 49
   1be3a:	0f c0       	rjmp	.+30     	; 0x1be5a <lif_create_image+0x6a>
        return(-1);
    }
    if(!dirsectors)
   1be3c:	21 15       	cp	r18, r1
   1be3e:	31 05       	cpc	r19, r1
   1be40:	41 05       	cpc	r20, r1
   1be42:	51 05       	cpc	r21, r1
   1be44:	19 f4       	brne	.+6      	; 0x1be4c <lif_create_image+0x5c>
    {
        printf("lif_create_image: dirsectors is 0\n");
   1be46:	84 ea       	ldi	r24, 0xA4	; 164
   1be48:	91 e3       	ldi	r25, 0x31	; 49
   1be4a:	07 c0       	rjmp	.+14     	; 0x1be5a <lif_create_image+0x6a>
        return(-1);
    }
    if(!sectors)
   1be4c:	e1 14       	cp	r14, r1
   1be4e:	f1 04       	cpc	r15, r1
   1be50:	01 05       	cpc	r16, r1
   1be52:	11 05       	cpc	r17, r1
   1be54:	59 f4       	brne	.+22     	; 0x1be6c <lif_create_image+0x7c>
    {
        printf("lif_create_image: sectors is 0\n");
   1be56:	84 e8       	ldi	r24, 0x84	; 132
   1be58:	91 e3       	ldi	r25, 0x31	; 49
   1be5a:	a0 e0       	ldi	r26, 0x00	; 0
   1be5c:	ed b7       	in	r30, 0x3d	; 61
   1be5e:	fe b7       	in	r31, 0x3e	; 62
   1be60:	81 83       	std	Z+1, r24	; 0x01
   1be62:	92 83       	std	Z+2, r25	; 0x02
   1be64:	a3 83       	std	Z+3, r26	; 0x03
   1be66:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   1be6a:	2b c0       	rjmp	.+86     	; 0x1bec2 <lif_create_image+0xd2>
    dirstart = 2;
    filestart = dirstart + dirsectors;
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
   1be6c:	67 01       	movw	r12, r14
   1be6e:	78 01       	movw	r14, r16
   1be70:	f2 e0       	ldi	r31, 0x02	; 2
   1be72:	cf 1a       	sub	r12, r31
   1be74:	d1 08       	sbc	r13, r1
   1be76:	e1 08       	sbc	r14, r1
   1be78:	f1 08       	sbc	r15, r1
   1be7a:	56 01       	movw	r10, r12
   1be7c:	67 01       	movw	r12, r14
   1be7e:	a2 1a       	sub	r10, r18
   1be80:	b3 0a       	sbc	r11, r19
   1be82:	c4 0a       	sbc	r12, r20
   1be84:	d5 0a       	sbc	r13, r21
   1be86:	79 01       	movw	r14, r18
   1be88:	8a 01       	movw	r16, r20
   1be8a:	22 e0       	ldi	r18, 0x02	; 2
   1be8c:	30 e0       	ldi	r19, 0x00	; 0
   1be8e:	40 e0       	ldi	r20, 0x00	; 0
   1be90:	50 e0       	ldi	r21, 0x00	; 0
   1be92:	0e 94 a8 cd 	call	0x19b50	; 0x19b50 <lif_create_volume>
    if(LIF == NULL)
   1be96:	00 97       	sbiw	r24, 0x00	; 0
   1be98:	a1 f0       	breq	.+40     	; 0x1bec2 <lif_create_image+0xd2>
        return(-1);
    lif_close_volume(LIF);
   1be9a:	0e 94 37 cb 	call	0x1966e	; 0x1966e <lif_close_volume>

    printf("\tFormatting: wrote %ld sectors\n", (long)end);
   1be9e:	82 01       	movw	r16, r4
   1bea0:	d6 2d       	mov	r29, r6
   1bea2:	c7 2d       	mov	r28, r7
   1bea4:	ed b7       	in	r30, 0x3d	; 61
   1bea6:	fe b7       	in	r31, 0x3e	; 62
   1bea8:	44 82       	std	Z+4, r4	; 0x04
   1beaa:	15 83       	std	Z+5, r17	; 0x05
   1beac:	66 82       	std	Z+6, r6	; 0x06
   1beae:	77 82       	std	Z+7, r7	; 0x07
   1beb0:	84 e6       	ldi	r24, 0x64	; 100
   1beb2:	91 e3       	ldi	r25, 0x31	; 49
   1beb4:	a0 e0       	ldi	r26, 0x00	; 0
   1beb6:	81 83       	std	Z+1, r24	; 0x01
   1beb8:	92 83       	std	Z+2, r25	; 0x02
   1beba:	a3 83       	std	Z+3, r26	; 0x03
   1bebc:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    return(end);
   1bec0:	04 c0       	rjmp	.+8      	; 0x1beca <lif_create_image+0xda>
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
    if(LIF == NULL)
        return(-1);
   1bec2:	0f ef       	ldi	r16, 0xFF	; 255
   1bec4:	1f ef       	ldi	r17, 0xFF	; 255
   1bec6:	df ef       	ldi	r29, 0xFF	; 255
   1bec8:	cf ef       	ldi	r28, 0xFF	; 255
    lif_close_volume(LIF);

    printf("\tFormatting: wrote %ld sectors\n", (long)end);
    return(end);
}
   1beca:	b8 01       	movw	r22, r16
   1becc:	8d 2f       	mov	r24, r29
   1bece:	9c 2f       	mov	r25, r28
   1bed0:	ad b7       	in	r26, 0x3d	; 61
   1bed2:	be b7       	in	r27, 0x3e	; 62
   1bed4:	17 96       	adiw	r26, 0x07	; 7
   1bed6:	0f b6       	in	r0, 0x3f	; 63
   1bed8:	f8 94       	cli
   1beda:	be bf       	out	0x3e, r27	; 62
   1bedc:	0f be       	out	0x3f, r0	; 63
   1bede:	ad bf       	out	0x3d, r26	; 61
   1bee0:	df 91       	pop	r29
   1bee2:	cf 91       	pop	r28
   1bee4:	1f 91       	pop	r17
   1bee6:	0f 91       	pop	r16
   1bee8:	ff 90       	pop	r15
   1beea:	ef 90       	pop	r14
   1beec:	df 90       	pop	r13
   1beee:	cf 90       	pop	r12
   1bef0:	bf 90       	pop	r11
   1bef2:	af 90       	pop	r10
   1bef4:	7f 90       	pop	r7
   1bef6:	6f 90       	pop	r6
   1bef8:	5f 90       	pop	r5
   1befa:	4f 90       	pop	r4
   1befc:	08 95       	ret

0001befe <lif_tests>:

/// @brief LIF user tests
/// @return  1 matched token, 0 if not
MEMSPACE
int lif_tests(int argc, char *argv[])
{
   1befe:	8f 92       	push	r8
   1bf00:	9f 92       	push	r9
   1bf02:	af 92       	push	r10
   1bf04:	bf 92       	push	r11
   1bf06:	ef 92       	push	r14
   1bf08:	ff 92       	push	r15
   1bf0a:	0f 93       	push	r16
   1bf0c:	1f 93       	push	r17
   1bf0e:	cf 93       	push	r28
   1bf10:	df 93       	push	r29
   1bf12:	00 d0       	rcall	.+0      	; 0x1bf14 <lif_tests+0x16>
   1bf14:	00 d0       	rcall	.+0      	; 0x1bf16 <lif_tests+0x18>
   1bf16:	1f 92       	push	r1
        printf("%d:%s\n", i, argv[i]);
    printf("\n");
#endif

	// Nothing to do ?
	if(argc < 2)
   1bf18:	82 30       	cpi	r24, 0x02	; 2
   1bf1a:	91 05       	cpc	r25, r1
   1bf1c:	0c f4       	brge	.+2      	; 0x1bf20 <lif_tests+0x22>
   1bf1e:	17 c1       	rjmp	.+558    	; 0x1c14e <lif_tests+0x250>
		return (1);

    // Argument 1
    ind = 1;
	ptr = argv[ind++];
   1bf20:	fb 01       	movw	r30, r22
   1bf22:	02 81       	ldd	r16, Z+2	; 0x02
   1bf24:	13 81       	ldd	r17, Z+3	; 0x03

	// Argument 1 missing ?
    //        Nothing to do
	// argc should really get this 
    if(!ptr || !*ptr)
   1bf26:	01 15       	cp	r16, r1
   1bf28:	11 05       	cpc	r17, r1
   1bf2a:	09 f4       	brne	.+2      	; 0x1bf2e <lif_tests+0x30>
   1bf2c:	10 c1       	rjmp	.+544    	; 0x1c14e <lif_tests+0x250>
   1bf2e:	f8 01       	movw	r30, r16
   1bf30:	20 81       	ld	r18, Z
   1bf32:	22 23       	and	r18, r18
   1bf34:	09 f4       	brne	.+2      	; 0x1bf38 <lif_tests+0x3a>
   1bf36:	0b c1       	rjmp	.+534    	; 0x1c14e <lif_tests+0x250>
   1bf38:	eb 01       	movw	r28, r22
   1bf3a:	7c 01       	movw	r14, r24
        return(1);

    if(MATCH(ptr,"help") || MATCH(ptr,"-help") || MATCH(ptr,"-?") )
   1bf3c:	6f eb       	ldi	r22, 0xBF	; 191
   1bf3e:	75 e1       	ldi	r23, 0x15	; 21
   1bf40:	c8 01       	movw	r24, r16
   1bf42:	0e 94 dd 33 	call	0x67ba	; 0x67ba <MATCH>
   1bf46:	89 2b       	or	r24, r25
   1bf48:	29 f0       	breq	.+10     	; 0x1bf54 <lif_tests+0x56>
    {
        lif_help(1);
   1bf4a:	81 e0       	ldi	r24, 0x01	; 1
   1bf4c:	90 e0       	ldi	r25, 0x00	; 0
   1bf4e:	0e 94 7c c1 	call	0x182f8	; 0x182f8 <lif_help>
   1bf52:	fd c0       	rjmp	.+506    	; 0x1c14e <lif_tests+0x250>
    //        Nothing to do
	// argc should really get this 
    if(!ptr || !*ptr)
        return(1);

    if(MATCH(ptr,"help") || MATCH(ptr,"-help") || MATCH(ptr,"-?") )
   1bf54:	6e eb       	ldi	r22, 0xBE	; 190
   1bf56:	75 e1       	ldi	r23, 0x15	; 21
   1bf58:	c8 01       	movw	r24, r16
   1bf5a:	0e 94 dd 33 	call	0x67ba	; 0x67ba <MATCH>
   1bf5e:	89 2b       	or	r24, r25
   1bf60:	a1 f7       	brne	.-24     	; 0x1bf4a <lif_tests+0x4c>
   1bf62:	64 ec       	ldi	r22, 0xC4	; 196
   1bf64:	75 e1       	ldi	r23, 0x15	; 21
   1bf66:	c8 01       	movw	r24, r16
   1bf68:	0e 94 dd 33 	call	0x67ba	; 0x67ba <MATCH>
   1bf6c:	89 2b       	or	r24, r25
   1bf6e:	69 f7       	brne	.-38     	; 0x1bf4a <lif_tests+0x4c>
        return(1);
    }

	// Turn one debugging
	// in the future we can add tests for specific messages
    if (MATCHARGS(ptr,"-d", (ind + 0) ,argc))
   1bf70:	97 01       	movw	r18, r14
   1bf72:	42 e0       	ldi	r20, 0x02	; 2
   1bf74:	50 e0       	ldi	r21, 0x00	; 0
   1bf76:	67 ec       	ldi	r22, 0xC7	; 199
   1bf78:	75 e1       	ldi	r23, 0x15	; 21
   1bf7a:	c8 01       	movw	r24, r16
   1bf7c:	0e 94 05 34 	call	0x680a	; 0x680a <MATCHARGS>
   1bf80:	89 2b       	or	r24, r25
   1bf82:	39 f0       	breq	.+14     	; 0x1bf92 <lif_tests+0x94>
    {
		debuglevel = 0xffff;
   1bf84:	8f ef       	ldi	r24, 0xFF	; 255
   1bf86:	9f ef       	ldi	r25, 0xFF	; 255
   1bf88:	90 93 c4 01 	sts	0x01C4, r25	; 0x8001c4 <debuglevel+0x1>
   1bf8c:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <debuglevel>
   1bf90:	de c0       	rjmp	.+444    	; 0x1c14e <lif_tests+0x250>
        return(1);
		ptr = argv[ind++];
    }

    if (MATCHARGS(ptr,"addbin", (ind + 3) ,argc))
   1bf92:	97 01       	movw	r18, r14
   1bf94:	45 e0       	ldi	r20, 0x05	; 5
   1bf96:	50 e0       	ldi	r21, 0x00	; 0
   1bf98:	6a ec       	ldi	r22, 0xCA	; 202
   1bf9a:	75 e1       	ldi	r23, 0x15	; 21
   1bf9c:	c8 01       	movw	r24, r16
   1bf9e:	0e 94 05 34 	call	0x680a	; 0x680a <MATCHARGS>
   1bfa2:	89 2b       	or	r24, r25
   1bfa4:	41 f0       	breq	.+16     	; 0x1bfb6 <lif_tests+0xb8>
    {
        lif_add_lif_file(argv[ind],argv[ind+1],argv[ind+2]);
   1bfa6:	48 85       	ldd	r20, Y+8	; 0x08
   1bfa8:	59 85       	ldd	r21, Y+9	; 0x09
   1bfaa:	6e 81       	ldd	r22, Y+6	; 0x06
   1bfac:	7f 81       	ldd	r23, Y+7	; 0x07
   1bfae:	8c 81       	ldd	r24, Y+4	; 0x04
   1bfb0:	9d 81       	ldd	r25, Y+5	; 0x05
   1bfb2:	83 dc       	rcall	.-1786   	; 0x1b8ba <lif_add_lif_file>
   1bfb4:	cc c0       	rjmp	.+408    	; 0x1c14e <lif_tests+0x250>

        return(1);
    }
    if (MATCHARGS(ptr,"add", (ind + 3) ,argc))
   1bfb6:	97 01       	movw	r18, r14
   1bfb8:	45 e0       	ldi	r20, 0x05	; 5
   1bfba:	50 e0       	ldi	r21, 0x00	; 0
   1bfbc:	61 ed       	ldi	r22, 0xD1	; 209
   1bfbe:	75 e1       	ldi	r23, 0x15	; 21
   1bfc0:	c8 01       	movw	r24, r16
   1bfc2:	0e 94 05 34 	call	0x680a	; 0x680a <MATCHARGS>
   1bfc6:	89 2b       	or	r24, r25
   1bfc8:	49 f0       	breq	.+18     	; 0x1bfdc <lif_tests+0xde>
    {
        lif_add_ascii_file_as_e010(argv[ind],argv[ind+1],argv[ind+2]);
   1bfca:	48 85       	ldd	r20, Y+8	; 0x08
   1bfcc:	59 85       	ldd	r21, Y+9	; 0x09
   1bfce:	6e 81       	ldd	r22, Y+6	; 0x06
   1bfd0:	7f 81       	ldd	r23, Y+7	; 0x07
   1bfd2:	8c 81       	ldd	r24, Y+4	; 0x04
   1bfd4:	9d 81       	ldd	r25, Y+5	; 0x05
   1bfd6:	0e 94 3a d7 	call	0x1ae74	; 0x1ae74 <lif_add_ascii_file_as_e010>
   1bfda:	b9 c0       	rjmp	.+370    	; 0x1c14e <lif_tests+0x250>
        return(1);
    }
    if (MATCHARGS(ptr,"createdisk", (ind + 3) ,argc))
   1bfdc:	97 01       	movw	r18, r14
   1bfde:	45 e0       	ldi	r20, 0x05	; 5
   1bfe0:	50 e0       	ldi	r21, 0x00	; 0
   1bfe2:	65 ed       	ldi	r22, 0xD5	; 213
   1bfe4:	75 e1       	ldi	r23, 0x15	; 21
   1bfe6:	c8 01       	movw	r24, r16
   1bfe8:	0e 94 05 34 	call	0x680a	; 0x680a <MATCHARGS>
   1bfec:	89 2b       	or	r24, r25
   1bfee:	e1 f1       	breq	.+120    	; 0x1c068 <lif_tests+0x16a>
    {
		///@brief format LIF image
		long dir,sectors;
		char *name = argv[ind];
   1bff0:	ac 80       	ldd	r10, Y+4	; 0x04
   1bff2:	bd 80       	ldd	r11, Y+5	; 0x05
		char *label = argv[ind+1];
   1bff4:	8e 80       	ldd	r8, Y+6	; 0x06
   1bff6:	9f 80       	ldd	r9, Y+7	; 0x07
		char *model = argv[ind+2];
   1bff8:	08 84       	ldd	r0, Y+8	; 0x08
   1bffa:	d9 85       	ldd	r29, Y+9	; 0x09
   1bffc:	c0 2d       	mov	r28, r0
		if( MATCHI_LEN(model,"hp"))
   1bffe:	60 ee       	ldi	r22, 0xE0	; 224
   1c000:	75 e1       	ldi	r23, 0x15	; 21
   1c002:	ce 01       	movw	r24, r28
   1c004:	0e 94 2f 34 	call	0x685e	; 0x685e <MATCHI_LEN>
   1c008:	89 2b       	or	r24, r25
   1c00a:	09 f0       	breq	.+2      	; 0x1c00e <lif_tests+0x110>
			model +=2;
   1c00c:	22 96       	adiw	r28, 0x02	; 2
		if(hpdir_find_drive(model,0, 0))
   1c00e:	40 e0       	ldi	r20, 0x00	; 0
   1c010:	50 e0       	ldi	r21, 0x00	; 0
   1c012:	60 e0       	ldi	r22, 0x00	; 0
   1c014:	70 e0       	ldi	r23, 0x00	; 0
   1c016:	ce 01       	movw	r24, r28
   1c018:	0e 94 13 a5 	call	0x14a26	; 0x14a26 <hpdir_find_drive>
   1c01c:	89 2b       	or	r24, r25
   1c01e:	b9 f0       	breq	.+46     	; 0x1c04e <lif_tests+0x150>
		{
			dir = lif_dir_count(hpdir.BLOCKS);
   1c020:	60 91 3c 21 	lds	r22, 0x213C	; 0x80213c <hpdir+0xac>
   1c024:	70 91 3d 21 	lds	r23, 0x213D	; 0x80213d <hpdir+0xad>
   1c028:	80 91 3e 21 	lds	r24, 0x213E	; 0x80213e <hpdir+0xae>
   1c02c:	90 91 3f 21 	lds	r25, 0x213F	; 0x80213f <hpdir+0xaf>
   1c030:	0e 94 f6 a4 	call	0x149ec	; 0x149ec <lif_dir_count>
   1c034:	9b 01       	movw	r18, r22
   1c036:	ac 01       	movw	r20, r24
			sectors = hpdir.BLOCKS;
			lif_create_image(name, label, dir, sectors);
   1c038:	e0 90 3c 21 	lds	r14, 0x213C	; 0x80213c <hpdir+0xac>
   1c03c:	f0 90 3d 21 	lds	r15, 0x213D	; 0x80213d <hpdir+0xad>
   1c040:	00 91 3e 21 	lds	r16, 0x213E	; 0x80213e <hpdir+0xae>
   1c044:	10 91 3f 21 	lds	r17, 0x213F	; 0x80213f <hpdir+0xaf>
   1c048:	b4 01       	movw	r22, r8
   1c04a:	c5 01       	movw	r24, r10
   1c04c:	29 c0       	rjmp	.+82     	; 0x1c0a0 <lif_tests+0x1a2>
			return(1);
		}
		printf("Disk: %s not found in hpdir.ini\n", model);
   1c04e:	ed b7       	in	r30, 0x3d	; 61
   1c050:	fe b7       	in	r31, 0x3e	; 62
   1c052:	d5 83       	std	Z+5, r29	; 0x05
   1c054:	c4 83       	std	Z+4, r28	; 0x04
   1c056:	88 e9       	ldi	r24, 0x98	; 152
   1c058:	93 e4       	ldi	r25, 0x43	; 67
   1c05a:	a0 e0       	ldi	r26, 0x00	; 0
   1c05c:	81 83       	std	Z+1, r24	; 0x01
   1c05e:	92 83       	std	Z+2, r25	; 0x02
   1c060:	a3 83       	std	Z+3, r26	; 0x03
   1c062:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   1c066:	73 c0       	rjmp	.+230    	; 0x1c14e <lif_tests+0x250>
        return(1);
    }
    if (MATCHARGS(ptr,"create", (ind + 4) ,argc))
   1c068:	97 01       	movw	r18, r14
   1c06a:	46 e0       	ldi	r20, 0x06	; 6
   1c06c:	50 e0       	ldi	r21, 0x00	; 0
   1c06e:	63 ee       	ldi	r22, 0xE3	; 227
   1c070:	75 e1       	ldi	r23, 0x15	; 21
   1c072:	c8 01       	movw	r24, r16
   1c074:	0e 94 05 34 	call	0x680a	; 0x680a <MATCHARGS>
   1c078:	89 2b       	or	r24, r25
   1c07a:	a1 f0       	breq	.+40     	; 0x1c0a4 <lif_tests+0x1a6>
    {
        ///@brief format LIF image
        lif_create_image(argv[ind],argv[ind+1], atol(argv[ind+2]), atol(argv[ind+3]) );
   1c07c:	88 85       	ldd	r24, Y+8	; 0x08
   1c07e:	99 85       	ldd	r25, Y+9	; 0x09
   1c080:	0e 94 8d 48 	call	0x911a	; 0x911a <atol>
   1c084:	4b 01       	movw	r8, r22
   1c086:	5c 01       	movw	r10, r24
   1c088:	8a 85       	ldd	r24, Y+10	; 0x0a
   1c08a:	9b 85       	ldd	r25, Y+11	; 0x0b
   1c08c:	0e 94 8d 48 	call	0x911a	; 0x911a <atol>
   1c090:	7b 01       	movw	r14, r22
   1c092:	8c 01       	movw	r16, r24
   1c094:	6e 81       	ldd	r22, Y+6	; 0x06
   1c096:	7f 81       	ldd	r23, Y+7	; 0x07
   1c098:	a5 01       	movw	r20, r10
   1c09a:	94 01       	movw	r18, r8
   1c09c:	8c 81       	ldd	r24, Y+4	; 0x04
   1c09e:	9d 81       	ldd	r25, Y+5	; 0x05
   1c0a0:	a7 de       	rcall	.-690    	; 0x1bdf0 <lif_create_image>
   1c0a2:	55 c0       	rjmp	.+170    	; 0x1c14e <lif_tests+0x250>
        return(1);
    }
    if (MATCHARGS(ptr,"del", (ind + 2) ,argc))
   1c0a4:	97 01       	movw	r18, r14
   1c0a6:	44 e0       	ldi	r20, 0x04	; 4
   1c0a8:	50 e0       	ldi	r21, 0x00	; 0
   1c0aa:	6a ee       	ldi	r22, 0xEA	; 234
   1c0ac:	75 e1       	ldi	r23, 0x15	; 21
   1c0ae:	c8 01       	movw	r24, r16
   1c0b0:	0e 94 05 34 	call	0x680a	; 0x680a <MATCHARGS>
   1c0b4:	89 2b       	or	r24, r25
   1c0b6:	31 f0       	breq	.+12     	; 0x1c0c4 <lif_tests+0x1c6>
    {
        lif_del_file(argv[ind],argv[ind+1]);
   1c0b8:	6e 81       	ldd	r22, Y+6	; 0x06
   1c0ba:	7f 81       	ldd	r23, Y+7	; 0x07
   1c0bc:	8c 81       	ldd	r24, Y+4	; 0x04
   1c0be:	9d 81       	ldd	r25, Y+5	; 0x05
   1c0c0:	85 dd       	rcall	.-1270   	; 0x1bbcc <lif_del_file>
   1c0c2:	45 c0       	rjmp	.+138    	; 0x1c14e <lif_tests+0x250>
        return(1);
    }
    if (MATCHARGS(ptr,"dir", (ind + 1) ,argc))
   1c0c4:	97 01       	movw	r18, r14
   1c0c6:	43 e0       	ldi	r20, 0x03	; 3
   1c0c8:	50 e0       	ldi	r21, 0x00	; 0
   1c0ca:	66 ef       	ldi	r22, 0xF6	; 246
   1c0cc:	7a e0       	ldi	r23, 0x0A	; 10
   1c0ce:	c8 01       	movw	r24, r16
   1c0d0:	0e 94 05 34 	call	0x680a	; 0x680a <MATCHARGS>
   1c0d4:	89 2b       	or	r24, r25
   1c0d6:	29 f0       	breq	.+10     	; 0x1c0e2 <lif_tests+0x1e4>
    {
        lif_dir(argv[ind]);
   1c0d8:	8c 81       	ldd	r24, Y+4	; 0x04
   1c0da:	9d 81       	ldd	r25, Y+5	; 0x05
   1c0dc:	0e 94 ec d2 	call	0x1a5d8	; 0x1a5d8 <lif_dir>
   1c0e0:	36 c0       	rjmp	.+108    	; 0x1c14e <lif_tests+0x250>
        return(1);
    }
    if (MATCHARGS(ptr,"extractbin", (ind + 3) ,argc))
   1c0e2:	97 01       	movw	r18, r14
   1c0e4:	45 e0       	ldi	r20, 0x05	; 5
   1c0e6:	50 e0       	ldi	r21, 0x00	; 0
   1c0e8:	6e ee       	ldi	r22, 0xEE	; 238
   1c0ea:	75 e1       	ldi	r23, 0x15	; 21
   1c0ec:	c8 01       	movw	r24, r16
   1c0ee:	0e 94 05 34 	call	0x680a	; 0x680a <MATCHARGS>
   1c0f2:	89 2b       	or	r24, r25
   1c0f4:	41 f0       	breq	.+16     	; 0x1c106 <lif_tests+0x208>
    {

        lif_extract_lif_as_lif(argv[ind],argv[ind+1],argv[ind+2]);
   1c0f6:	48 85       	ldd	r20, Y+8	; 0x08
   1c0f8:	59 85       	ldd	r21, Y+9	; 0x09
   1c0fa:	6e 81       	ldd	r22, Y+6	; 0x06
   1c0fc:	7f 81       	ldd	r23, Y+7	; 0x07
   1c0fe:	8c 81       	ldd	r24, Y+4	; 0x04
   1c100:	9d 81       	ldd	r25, Y+5	; 0x05
   1c102:	a3 da       	rcall	.-2746   	; 0x1b64a <lif_extract_lif_as_lif>
   1c104:	24 c0       	rjmp	.+72     	; 0x1c14e <lif_tests+0x250>
        return(1);
    }
    if (MATCHARGS(ptr,"extract", (ind + 3) ,argc))
   1c106:	97 01       	movw	r18, r14
   1c108:	45 e0       	ldi	r20, 0x05	; 5
   1c10a:	50 e0       	ldi	r21, 0x00	; 0
   1c10c:	69 ef       	ldi	r22, 0xF9	; 249
   1c10e:	75 e1       	ldi	r23, 0x15	; 21
   1c110:	c8 01       	movw	r24, r16
   1c112:	0e 94 05 34 	call	0x680a	; 0x680a <MATCHARGS>
   1c116:	89 2b       	or	r24, r25
   1c118:	49 f0       	breq	.+18     	; 0x1c12c <lif_tests+0x22e>
    {

        lif_extract_e010_as_ascii(argv[ind],argv[ind+1],argv[ind+2]);
   1c11a:	48 85       	ldd	r20, Y+8	; 0x08
   1c11c:	59 85       	ldd	r21, Y+9	; 0x09
   1c11e:	6e 81       	ldd	r22, Y+6	; 0x06
   1c120:	7f 81       	ldd	r23, Y+7	; 0x07
   1c122:	8c 81       	ldd	r24, Y+4	; 0x04
   1c124:	9d 81       	ldd	r25, Y+5	; 0x05
   1c126:	0e 94 76 d8 	call	0x1b0ec	; 0x1b0ec <lif_extract_e010_as_ascii>
   1c12a:	11 c0       	rjmp	.+34     	; 0x1c14e <lif_tests+0x250>
        return(1);
    }
    if (MATCHARGS(ptr,"rename", (ind + 3) ,argc))
   1c12c:	97 01       	movw	r18, r14
   1c12e:	45 e0       	ldi	r20, 0x05	; 5
   1c130:	50 e0       	ldi	r21, 0x00	; 0
   1c132:	63 e0       	ldi	r22, 0x03	; 3
   1c134:	7b e0       	ldi	r23, 0x0B	; 11
   1c136:	c8 01       	movw	r24, r16
   1c138:	0e 94 05 34 	call	0x680a	; 0x680a <MATCHARGS>
   1c13c:	00 97       	sbiw	r24, 0x00	; 0
   1c13e:	49 f0       	breq	.+18     	; 0x1c152 <lif_tests+0x254>
    {
        lif_rename_file(argv[ind],argv[ind+1],argv[ind+2]);
   1c140:	48 85       	ldd	r20, Y+8	; 0x08
   1c142:	59 85       	ldd	r21, Y+9	; 0x09
   1c144:	6e 81       	ldd	r22, Y+6	; 0x06
   1c146:	7f 81       	ldd	r23, Y+7	; 0x07
   1c148:	8c 81       	ldd	r24, Y+4	; 0x04
   1c14a:	9d 81       	ldd	r25, Y+5	; 0x05
   1c14c:	d4 dd       	rcall	.-1112   	; 0x1bcf6 <lif_rename_file>
    printf("\n");
#endif

	// Nothing to do ?
	if(argc < 2)
		return (1);
   1c14e:	81 e0       	ldi	r24, 0x01	; 1
   1c150:	90 e0       	ldi	r25, 0x00	; 0
        td02lif(argc,argv);
        return(1);
    }
#endif
    return(0);
}
   1c152:	0f 90       	pop	r0
   1c154:	0f 90       	pop	r0
   1c156:	0f 90       	pop	r0
   1c158:	0f 90       	pop	r0
   1c15a:	0f 90       	pop	r0
   1c15c:	df 91       	pop	r29
   1c15e:	cf 91       	pop	r28
   1c160:	1f 91       	pop	r17
   1c162:	0f 91       	pop	r16
   1c164:	ff 90       	pop	r15
   1c166:	ef 90       	pop	r14
   1c168:	bf 90       	pop	r11
   1c16a:	af 90       	pop	r10
   1c16c:	9f 90       	pop	r9
   1c16e:	8f 90       	pop	r8
   1c170:	08 95       	ret

0001c172 <copyright>:
#include <math.h>

///@brief Display Copyright
///@return void
void copyright()
{
   1c172:	00 d0       	rcall	.+0      	; 0x1c174 <copyright+0x2>
   1c174:	00 d0       	rcall	.+0      	; 0x1c176 <copyright+0x4>
   1c176:	1f 92       	push	r1
    printf("Stand alone version of LIF utilities for linux\n");
   1c178:	84 e0       	ldi	r24, 0x04	; 4
   1c17a:	99 e4       	ldi	r25, 0x49	; 73
   1c17c:	a0 e0       	ldi	r26, 0x00	; 0
   1c17e:	ed b7       	in	r30, 0x3d	; 61
   1c180:	fe b7       	in	r31, 0x3e	; 62
   1c182:	81 83       	std	Z+1, r24	; 0x01
   1c184:	92 83       	std	Z+2, r25	; 0x02
   1c186:	a3 83       	std	Z+3, r26	; 0x03
   1c188:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    printf("HP85 Disk and Device Emulator\n");
   1c18c:	85 ee       	ldi	r24, 0xE5	; 229
   1c18e:	98 e4       	ldi	r25, 0x48	; 72
   1c190:	a0 e0       	ldi	r26, 0x00	; 0
   1c192:	ed b7       	in	r30, 0x3d	; 61
   1c194:	fe b7       	in	r31, 0x3e	; 62
   1c196:	81 83       	std	Z+1, r24	; 0x01
   1c198:	92 83       	std	Z+2, r25	; 0x02
   1c19a:	a3 83       	std	Z+3, r26	; 0x03
   1c19c:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    printf(" (c) 2014-2020 by Mike Gore\n");
   1c1a0:	88 ec       	ldi	r24, 0xC8	; 200
   1c1a2:	98 e4       	ldi	r25, 0x48	; 72
   1c1a4:	a0 e0       	ldi	r26, 0x00	; 0
   1c1a6:	ed b7       	in	r30, 0x3d	; 61
   1c1a8:	fe b7       	in	r31, 0x3e	; 62
   1c1aa:	81 83       	std	Z+1, r24	; 0x01
   1c1ac:	92 83       	std	Z+2, r25	; 0x02
   1c1ae:	a3 83       	std	Z+3, r26	; 0x03
   1c1b0:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    printf(" GNU version 3\n");
   1c1b4:	88 eb       	ldi	r24, 0xB8	; 184
   1c1b6:	98 e4       	ldi	r25, 0x48	; 72
   1c1b8:	a0 e0       	ldi	r26, 0x00	; 0
   1c1ba:	ed b7       	in	r30, 0x3d	; 61
   1c1bc:	fe b7       	in	r31, 0x3e	; 62
   1c1be:	81 83       	std	Z+1, r24	; 0x01
   1c1c0:	92 83       	std	Z+2, r25	; 0x02
   1c1c2:	a3 83       	std	Z+3, r26	; 0x03
   1c1c4:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    printf("-> https://github.com/magore/hp85disk\n");
   1c1c8:	81 e9       	ldi	r24, 0x91	; 145
   1c1ca:	98 e4       	ldi	r25, 0x48	; 72
   1c1cc:	a0 e0       	ldi	r26, 0x00	; 0
   1c1ce:	ed b7       	in	r30, 0x3d	; 61
   1c1d0:	fe b7       	in	r31, 0x3e	; 62
   1c1d2:	81 83       	std	Z+1, r24	; 0x01
   1c1d4:	92 83       	std	Z+2, r25	; 0x02
   1c1d6:	a3 83       	std	Z+3, r26	; 0x03
   1c1d8:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    printf("   GIT last pushed:   %s\n", GIT_VERSION);
   1c1dc:	81 e0       	ldi	r24, 0x01	; 1
   1c1de:	96 e1       	ldi	r25, 0x16	; 22
   1c1e0:	ed b7       	in	r30, 0x3d	; 61
   1c1e2:	fe b7       	in	r31, 0x3e	; 62
   1c1e4:	95 83       	std	Z+5, r25	; 0x05
   1c1e6:	84 83       	std	Z+4, r24	; 0x04
   1c1e8:	87 e7       	ldi	r24, 0x77	; 119
   1c1ea:	98 e4       	ldi	r25, 0x48	; 72
   1c1ec:	a0 e0       	ldi	r26, 0x00	; 0
   1c1ee:	81 83       	std	Z+1, r24	; 0x01
   1c1f0:	92 83       	std	Z+2, r25	; 0x02
   1c1f2:	a3 83       	std	Z+3, r26	; 0x03
   1c1f4:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    printf("   Last updated file: %s\n", LOCAL_MOD);
   1c1f8:	85 e2       	ldi	r24, 0x25	; 37
   1c1fa:	96 e1       	ldi	r25, 0x16	; 22
   1c1fc:	ed b7       	in	r30, 0x3d	; 61
   1c1fe:	fe b7       	in	r31, 0x3e	; 62
   1c200:	95 83       	std	Z+5, r25	; 0x05
   1c202:	84 83       	std	Z+4, r24	; 0x04
   1c204:	8d e5       	ldi	r24, 0x5D	; 93
   1c206:	98 e4       	ldi	r25, 0x48	; 72
   1c208:	a0 e0       	ldi	r26, 0x00	; 0
   1c20a:	81 83       	std	Z+1, r24	; 0x01
   1c20c:	92 83       	std	Z+2, r25	; 0x02
   1c20e:	a3 83       	std	Z+3, r26	; 0x03
   1c210:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    printf("\n");
   1c214:	8b e5       	ldi	r24, 0x5B	; 91
   1c216:	98 e4       	ldi	r25, 0x48	; 72
   1c218:	a0 e0       	ldi	r26, 0x00	; 0
   1c21a:	ed b7       	in	r30, 0x3d	; 61
   1c21c:	fe b7       	in	r31, 0x3e	; 62
   1c21e:	81 83       	std	Z+1, r24	; 0x01
   1c220:	92 83       	std	Z+2, r25	; 0x02
   1c222:	a3 83       	std	Z+3, r26	; 0x03
   1c224:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
}
   1c228:	0f 90       	pop	r0
   1c22a:	0f 90       	pop	r0
   1c22c:	0f 90       	pop	r0
   1c22e:	0f 90       	pop	r0
   1c230:	0f 90       	pop	r0
   1c232:	08 95       	ret

0001c234 <delay_tests>:
/// @brief  perform tests on delay functions
///
/// This included measurement of avr-libc delays
/// @return  void
void delay_tests()
{
   1c234:	00 d0       	rcall	.+0      	; 0x1c236 <delay_tests+0x2>
   1c236:	1f 92       	push	r1
    printf("System delays\n");
   1c238:	8c e4       	ldi	r24, 0x4C	; 76
   1c23a:	98 e4       	ldi	r25, 0x48	; 72
   1c23c:	a0 e0       	ldi	r26, 0x00	; 0
   1c23e:	ed b7       	in	r30, 0x3d	; 61
   1c240:	fe b7       	in	r31, 0x3e	; 62
   1c242:	81 83       	std	Z+1, r24	; 0x01
   1c244:	92 83       	std	Z+2, r25	; 0x02
   1c246:	a3 83       	std	Z+3, r26	; 0x03
   1c248:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>

    clock_elapsed_begin();
   1c24c:	0e 94 12 37 	call	0x6e24	; 0x6e24 <clock_elapsed_begin>
    clock_elapsed_end("elapsed timer overhead");
   1c250:	89 e4       	ldi	r24, 0x49	; 73
   1c252:	96 e1       	ldi	r25, 0x16	; 22
   1c254:	0e 94 18 37 	call	0x6e30	; 0x6e30 <clock_elapsed_end>

    clock_elapsed_begin();
   1c258:	0e 94 12 37 	call	0x6e24	; 0x6e24 <clock_elapsed_begin>
   1c25c:	83 ef       	ldi	r24, 0xF3	; 243
   1c25e:	91 e0       	ldi	r25, 0x01	; 1
   1c260:	01 97       	sbiw	r24, 0x01	; 1
   1c262:	f1 f7       	brne	.-4      	; 0x1c260 <delay_tests+0x2c>
   1c264:	00 c0       	rjmp	.+0      	; 0x1c266 <delay_tests+0x32>
   1c266:	00 00       	nop
    _delay_us(100);
    clock_elapsed_end("_delay_us(100)");
   1c268:	80 e6       	ldi	r24, 0x60	; 96
   1c26a:	96 e1       	ldi	r25, 0x16	; 22
   1c26c:	0e 94 18 37 	call	0x6e30	; 0x6e30 <clock_elapsed_end>

    clock_elapsed_begin();
   1c270:	0e 94 12 37 	call	0x6e24	; 0x6e24 <clock_elapsed_begin>
   1c274:	e3 ec       	ldi	r30, 0xC3	; 195
   1c276:	f9 e0       	ldi	r31, 0x09	; 9
   1c278:	31 97       	sbiw	r30, 0x01	; 1
   1c27a:	f1 f7       	brne	.-4      	; 0x1c278 <delay_tests+0x44>
   1c27c:	00 c0       	rjmp	.+0      	; 0x1c27e <delay_tests+0x4a>
   1c27e:	00 00       	nop
    _delay_us(500);
    clock_elapsed_end("_delay_us(500)");
   1c280:	8f e6       	ldi	r24, 0x6F	; 111
   1c282:	96 e1       	ldi	r25, 0x16	; 22
   1c284:	0e 94 18 37 	call	0x6e30	; 0x6e30 <clock_elapsed_end>

    printf("My delays\n");
   1c288:	81 e4       	ldi	r24, 0x41	; 65
   1c28a:	98 e4       	ldi	r25, 0x48	; 72
   1c28c:	a0 e0       	ldi	r26, 0x00	; 0
   1c28e:	ed b7       	in	r30, 0x3d	; 61
   1c290:	fe b7       	in	r31, 0x3e	; 62
   1c292:	81 83       	std	Z+1, r24	; 0x01
   1c294:	92 83       	std	Z+2, r25	; 0x02
   1c296:	a3 83       	std	Z+3, r26	; 0x03
   1c298:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>

    clock_elapsed_begin();
   1c29c:	0e 94 12 37 	call	0x6e24	; 0x6e24 <clock_elapsed_begin>
    delayus(100U);
   1c2a0:	64 e6       	ldi	r22, 0x64	; 100
   1c2a2:	70 e0       	ldi	r23, 0x00	; 0
   1c2a4:	80 e0       	ldi	r24, 0x00	; 0
   1c2a6:	90 e0       	ldi	r25, 0x00	; 0
   1c2a8:	0e 94 7a 2a 	call	0x54f4	; 0x54f4 <delayus>
    clock_elapsed_end("delayus(100)");
   1c2ac:	8e e7       	ldi	r24, 0x7E	; 126
   1c2ae:	96 e1       	ldi	r25, 0x16	; 22
   1c2b0:	0e 94 18 37 	call	0x6e30	; 0x6e30 <clock_elapsed_end>

    clock_elapsed_begin();
   1c2b4:	0e 94 12 37 	call	0x6e24	; 0x6e24 <clock_elapsed_begin>
    delayus(500U);
   1c2b8:	64 ef       	ldi	r22, 0xF4	; 244
   1c2ba:	71 e0       	ldi	r23, 0x01	; 1
   1c2bc:	80 e0       	ldi	r24, 0x00	; 0
   1c2be:	90 e0       	ldi	r25, 0x00	; 0
   1c2c0:	0e 94 7a 2a 	call	0x54f4	; 0x54f4 <delayus>
    clock_elapsed_end("delayus(500)");
   1c2c4:	8b e8       	ldi	r24, 0x8B	; 139
   1c2c6:	96 e1       	ldi	r25, 0x16	; 22
   1c2c8:	0e 94 18 37 	call	0x6e30	; 0x6e30 <clock_elapsed_end>

    clock_elapsed_begin();
   1c2cc:	0e 94 12 37 	call	0x6e24	; 0x6e24 <clock_elapsed_begin>
    delayus(1100);
   1c2d0:	6c e4       	ldi	r22, 0x4C	; 76
   1c2d2:	74 e0       	ldi	r23, 0x04	; 4
   1c2d4:	80 e0       	ldi	r24, 0x00	; 0
   1c2d6:	90 e0       	ldi	r25, 0x00	; 0
   1c2d8:	0e 94 7a 2a 	call	0x54f4	; 0x54f4 <delayus>
    clock_elapsed_end("delayus(1100)");
   1c2dc:	88 e9       	ldi	r24, 0x98	; 152
   1c2de:	96 e1       	ldi	r25, 0x16	; 22
   1c2e0:	0e 94 18 37 	call	0x6e30	; 0x6e30 <clock_elapsed_end>

    clock_elapsed_begin();
   1c2e4:	0e 94 12 37 	call	0x6e24	; 0x6e24 <clock_elapsed_begin>
    delayms(1000);
   1c2e8:	68 ee       	ldi	r22, 0xE8	; 232
   1c2ea:	73 e0       	ldi	r23, 0x03	; 3
   1c2ec:	80 e0       	ldi	r24, 0x00	; 0
   1c2ee:	90 e0       	ldi	r25, 0x00	; 0
   1c2f0:	0e 94 a7 2a 	call	0x554e	; 0x554e <delayms>
    clock_elapsed_end("delayms(1100)");
   1c2f4:	86 ea       	ldi	r24, 0xA6	; 166
   1c2f6:	96 e1       	ldi	r25, 0x16	; 22
   1c2f8:	0e 94 18 37 	call	0x6e30	; 0x6e30 <clock_elapsed_end>
}
   1c2fc:	0f 90       	pop	r0
   1c2fe:	0f 90       	pop	r0
   1c300:	0f 90       	pop	r0
   1c302:	08 95       	ret

0001c304 <help>:
/// @brief  Display the main help menu - calls all other help menus
/// @return  void
/// @see gpib_help()
/// @see fatfs_help()
void help()
{
   1c304:	00 d0       	rcall	.+0      	; 0x1c306 <help+0x2>

    copyright();
   1c306:	1f 92       	push	r1

#ifdef FATFS_TESTS
    fatfs_help(0);
   1c308:	34 df       	rcall	.-408    	; 0x1c172 <copyright>
   1c30a:	80 e0       	ldi	r24, 0x00	; 0
   1c30c:	90 e0       	ldi	r25, 0x00	; 0
   1c30e:	0e 94 a3 74 	call	0xe946	; 0xe946 <fatfs_help>
#endif

#ifdef POSIX_TESTS
    posix_help(0);
   1c312:	80 e0       	ldi	r24, 0x00	; 0
   1c314:	90 e0       	ldi	r25, 0x00	; 0
   1c316:	0e 94 f0 7f 	call	0xffe0	; 0xffe0 <posix_help>
#endif

#ifdef LIF_SUPPORT
    lif_help(0);
   1c31a:	80 e0       	ldi	r24, 0x00	; 0
   1c31c:	90 e0       	ldi	r25, 0x00	; 0
   1c31e:	0e 94 7c c1 	call	0x182f8	; 0x182f8 <lif_help>
#endif

    gpib_help(0);
   1c322:	80 e0       	ldi	r24, 0x00	; 0
   1c324:	90 e0       	ldi	r25, 0x00	; 0
   1c326:	0e 94 fc 92 	call	0x125f8	; 0x125f8 <gpib_help>

    printf(
   1c32a:	87 e1       	ldi	r24, 0x17	; 23
   1c32c:	98 e4       	ldi	r25, 0x48	; 72
   1c32e:	a0 e0       	ldi	r26, 0x00	; 0
   1c330:	ed b7       	in	r30, 0x3d	; 61
   1c332:	fe b7       	in	r31, 0x3e	; 62
   1c334:	81 83       	std	Z+1, r24	; 0x01
   1c336:	92 83       	std	Z+2, r25	; 0x02
   1c338:	a3 83       	std	Z+3, r26	; 0x03
   1c33a:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
        "setdate\n"
        "time\n"
        "reset\n"
        "\n"
        );
}
   1c33e:	0f 90       	pop	r0
   1c340:	0f 90       	pop	r0
   1c342:	0f 90       	pop	r0
   1c344:	08 95       	ret

0001c346 <task.part.0>:
/// If a keypress is detected read a line from the uart
/// parse the result and call various user functions.
/// ? will return a list of fuctions and paramters permitted
/// @param[in] gpib - if non-zero run gpib while there are no user commands
/// @return  void
void task(uint8_t gpib)
   1c346:	a9 e6       	ldi	r26, 0x69	; 105
   1c348:	b1 e0       	ldi	r27, 0x01	; 1
   1c34a:	e8 ea       	ldi	r30, 0xA8	; 168
   1c34c:	f1 ee       	ldi	r31, 0xE1	; 225
   1c34e:	7b c3       	rjmp	.+1782   	; 0x1ca46 <__prologue_saves__+0x14>
        gpib_task();

    if(!kbhit(0))
        return;

    printf("\n>");
   1c350:	84 e1       	ldi	r24, 0x14	; 20
   1c352:	98 e4       	ldi	r25, 0x48	; 72
   1c354:	a0 e0       	ldi	r26, 0x00	; 0
   1c356:	ed b7       	in	r30, 0x3d	; 61
   1c358:	fe b7       	in	r31, 0x3e	; 62
   1c35a:	81 83       	std	Z+1, r24	; 0x01
   1c35c:	92 83       	std	Z+2, r25	; 0x02
   1c35e:	a3 83       	std	Z+3, r26	; 0x03
   1c360:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>

    fgets(line,sizeof(line)-2,stdin);
   1c364:	40 91 57 1c 	lds	r20, 0x1C57	; 0x801c57 <__iob>
   1c368:	50 91 58 1c 	lds	r21, 0x1C58	; 0x801c58 <__iob+0x1>
   1c36c:	6e ef       	ldi	r22, 0xFE	; 254
   1c36e:	70 e0       	ldi	r23, 0x00	; 0
   1c370:	ce 01       	movw	r24, r28
   1c372:	06 96       	adiw	r24, 0x06	; 6
   1c374:	6c 01       	movw	r12, r24
   1c376:	0e 94 dc 77 	call	0xefb8	; 0xefb8 <fgets>
	trim_tail(line);
   1c37a:	c6 01       	movw	r24, r12
   1c37c:	0e 94 c3 33 	call	0x6786	; 0x6786 <trim_tail>
    argc = split_args(line,argv,50);
   1c380:	42 e3       	ldi	r20, 0x32	; 50
   1c382:	50 e0       	ldi	r21, 0x00	; 0
   1c384:	be 01       	movw	r22, r28
   1c386:	6a 5f       	subi	r22, 0xFA	; 250
   1c388:	7e 4f       	sbci	r23, 0xFE	; 254
   1c38a:	c6 01       	movw	r24, r12
   1c38c:	0e 94 49 34 	call	0x6892	; 0x6892 <split_args>
   1c390:	8c 01       	movw	r16, r24
    for(i=0;i<argc;++i)
        printf("   [%s]\n", argv[i]);
#endif

    ind = 0;
    ptr = argv[ind++];
   1c392:	ca 5f       	subi	r28, 0xFA	; 250
   1c394:	de 4f       	sbci	r29, 0xFE	; 254
   1c396:	e8 80       	ld	r14, Y
   1c398:	f9 80       	ldd	r15, Y+1	; 0x01
   1c39a:	c6 50       	subi	r28, 0x06	; 6
   1c39c:	d1 40       	sbci	r29, 0x01	; 1

	if(!ptr || argc < 1)
   1c39e:	e1 14       	cp	r14, r1
   1c3a0:	f1 04       	cpc	r15, r1
   1c3a2:	09 f4       	brne	.+2      	; 0x1c3a6 <task.part.0+0x60>
   1c3a4:	82 c0       	rjmp	.+260    	; 0x1c4aa <task.part.0+0x164>
   1c3a6:	18 16       	cp	r1, r24
   1c3a8:	19 06       	cpc	r1, r25
   1c3aa:	0c f0       	brlt	.+2      	; 0x1c3ae <task.part.0+0x68>
   1c3ac:	7e c0       	rjmp	.+252    	; 0x1c4aa <task.part.0+0x164>
	{
        result = 1;
	}
    else if (MATCHARGS(ptr,"delay_tests",(ind+0),argc))
   1c3ae:	9c 01       	movw	r18, r24
   1c3b0:	41 e0       	ldi	r20, 0x01	; 1
   1c3b2:	50 e0       	ldi	r21, 0x00	; 0
   1c3b4:	64 eb       	ldi	r22, 0xB4	; 180
   1c3b6:	76 e1       	ldi	r23, 0x16	; 22
   1c3b8:	c7 01       	movw	r24, r14
   1c3ba:	0e 94 05 34 	call	0x680a	; 0x680a <MATCHARGS>
   1c3be:	89 2b       	or	r24, r25
    {
        delay_tests();
   1c3c0:	11 f0       	breq	.+4      	; 0x1c3c6 <task.part.0+0x80>
   1c3c2:	38 df       	rcall	.-400    	; 0x1c234 <delay_tests>
   1c3c4:	72 c0       	rjmp	.+228    	; 0x1c4aa <task.part.0+0x164>
        result = 1;

    }
    else if ( MATCHARGS(ptr,"time",(ind+0),argc))
   1c3c6:	98 01       	movw	r18, r16
   1c3c8:	41 e0       	ldi	r20, 0x01	; 1
   1c3ca:	50 e0       	ldi	r21, 0x00	; 0
   1c3cc:	60 ec       	ldi	r22, 0xC0	; 192
   1c3ce:	76 e1       	ldi	r23, 0x16	; 22
   1c3d0:	c7 01       	movw	r24, r14
   1c3d2:	0e 94 05 34 	call	0x680a	; 0x680a <MATCHARGS>
   1c3d6:	89 2b       	or	r24, r25
   1c3d8:	01 f5       	brne	.+64     	; 0x1c41a <task.part.0+0xd4>
    {
		display_clock();
        result = 1;
    }
    else if ( MATCHARGS(ptr,"reset",(ind+0),argc))
   1c3da:	98 01       	movw	r18, r16
   1c3dc:	41 e0       	ldi	r20, 0x01	; 1
   1c3de:	50 e0       	ldi	r21, 0x00	; 0
   1c3e0:	68 ef       	ldi	r22, 0xF8	; 248
   1c3e2:	7c e0       	ldi	r23, 0x0C	; 12
   1c3e4:	c7 01       	movw	r24, r14
   1c3e6:	0e 94 05 34 	call	0x680a	; 0x680a <MATCHARGS>
   1c3ea:	89 2b       	or	r24, r25
   1c3ec:	51 f0       	breq	.+20     	; 0x1c402 <task.part.0+0xbc>
    {
		cli();	
   1c3ee:	f8 94       	cli
		uart_rx_flush(0);
   1c3f0:	80 e0       	ldi	r24, 0x00	; 0
   1c3f2:	0e 94 ef 2a 	call	0x55de	; 0x55de <uart_rx_flush>
		cli();	
   1c3f6:	f8 94       	cli
		MCUSR = (1 << EXTRF);
   1c3f8:	82 e0       	ldi	r24, 0x02	; 2
   1c3fa:	84 bf       	out	0x34, r24	; 52
        RESET();
   1c3fc:	e0 e0       	ldi	r30, 0x00	; 0
   1c3fe:	fc ef       	ldi	r31, 0xFC	; 252
   1c400:	09 95       	icall
		// should not return!
        result = 1;
    }
    else if ( MATCHARGS(ptr,"setdate",(ind+0),argc))
   1c402:	98 01       	movw	r18, r16
   1c404:	41 e0       	ldi	r20, 0x01	; 1
   1c406:	50 e0       	ldi	r21, 0x00	; 0
   1c408:	65 ec       	ldi	r22, 0xC5	; 197
   1c40a:	76 e1       	ldi	r23, 0x16	; 22
   1c40c:	c7 01       	movw	r24, r14
   1c40e:	0e 94 05 34 	call	0x680a	; 0x680a <MATCHARGS>
   1c412:	89 2b       	or	r24, r25
   1c414:	29 f0       	breq	.+10     	; 0x1c420 <task.part.0+0xda>
    {
        setdate();
   1c416:	0e 94 2c 3d 	call	0x7a58	; 0x7a58 <setdate>
        display_clock();
   1c41a:	0e 94 48 3f 	call	0x7e90	; 0x7e90 <display_clock>
   1c41e:	45 c0       	rjmp	.+138    	; 0x1c4aa <task.part.0+0x164>
        result = 1;
    }
    else if ( MATCHARGS(ptr,"mem",(ind+0),argc))
   1c420:	98 01       	movw	r18, r16
   1c422:	41 e0       	ldi	r20, 0x01	; 1
   1c424:	50 e0       	ldi	r21, 0x00	; 0
   1c426:	6d ec       	ldi	r22, 0xCD	; 205
   1c428:	76 e1       	ldi	r23, 0x16	; 22
   1c42a:	c7 01       	movw	r24, r14
   1c42c:	0e 94 05 34 	call	0x680a	; 0x680a <MATCHARGS>
   1c430:	89 2b       	or	r24, r25
   1c432:	19 f0       	breq	.+6      	; 0x1c43a <task.part.0+0xf4>
    {
        PrintFree();
   1c434:	0e 94 68 29 	call	0x52d0	; 0x52d0 <PrintFree>
   1c438:	38 c0       	rjmp	.+112    	; 0x1c4aa <task.part.0+0x164>
        result = 1;

    }
    else if ( MATCHARGS(ptr,"help",(ind+0),argc) || MATCHARGS(ptr,"?",(ind+0),argc))
   1c43a:	98 01       	movw	r18, r16
   1c43c:	41 e0       	ldi	r20, 0x01	; 1
   1c43e:	50 e0       	ldi	r21, 0x00	; 0
   1c440:	6f eb       	ldi	r22, 0xBF	; 191
   1c442:	75 e1       	ldi	r23, 0x15	; 21
   1c444:	c7 01       	movw	r24, r14
   1c446:	0e 94 05 34 	call	0x680a	; 0x680a <MATCHARGS>
   1c44a:	89 2b       	or	r24, r25
    {
        help();
   1c44c:	11 f0       	breq	.+4      	; 0x1c452 <task.part.0+0x10c>
   1c44e:	5a df       	rcall	.-332    	; 0x1c304 <help>
   1c450:	2c c0       	rjmp	.+88     	; 0x1c4aa <task.part.0+0x164>
    {
        PrintFree();
        result = 1;

    }
    else if ( MATCHARGS(ptr,"help",(ind+0),argc) || MATCHARGS(ptr,"?",(ind+0),argc))
   1c452:	98 01       	movw	r18, r16
   1c454:	41 e0       	ldi	r20, 0x01	; 1
   1c456:	50 e0       	ldi	r21, 0x00	; 0
   1c458:	65 ec       	ldi	r22, 0xC5	; 197
   1c45a:	75 e1       	ldi	r23, 0x15	; 21
   1c45c:	c7 01       	movw	r24, r14
   1c45e:	0e 94 05 34 	call	0x680a	; 0x680a <MATCHARGS>
   1c462:	89 2b       	or	r24, r25
   1c464:	a1 f7       	brne	.-24     	; 0x1c44e <task.part.0+0x108>
    {
        help();
        result = 1;
    }

    else if(gpib_tests(argc,argv))
   1c466:	be 01       	movw	r22, r28
   1c468:	6a 5f       	subi	r22, 0xFA	; 250
   1c46a:	7e 4f       	sbci	r23, 0xFE	; 254
   1c46c:	c8 01       	movw	r24, r16
   1c46e:	0e 94 1d 93 	call	0x1263a	; 0x1263a <gpib_tests>
   1c472:	89 2b       	or	r24, r25
   1c474:	19 f0       	breq	.+6      	; 0x1c47c <task.part.0+0x136>
    {
        // Restore GPIB BUS states
        gpib_init_devices();
   1c476:	0e 94 34 8e 	call	0x11c68	; 0x11c68 <gpib_init_devices>
   1c47a:	17 c0       	rjmp	.+46     	; 0x1c4aa <task.part.0+0x164>
        result = 1;
    }

#ifdef POSIX_TESTS
    else if(posix_tests(argc,argv))
   1c47c:	be 01       	movw	r22, r28
   1c47e:	6a 5f       	subi	r22, 0xFA	; 250
   1c480:	7e 4f       	sbci	r23, 0xFE	; 254
   1c482:	c8 01       	movw	r24, r16
   1c484:	0e 94 62 83 	call	0x106c4	; 0x106c4 <posix_tests>
   1c488:	89 2b       	or	r24, r25
   1c48a:	79 f4       	brne	.+30     	; 0x1c4aa <task.part.0+0x164>
        result = 1;
#endif

#ifdef FATFS_TESTS
    else if(fatfs_tests(argc,argv))
   1c48c:	be 01       	movw	r22, r28
   1c48e:	6a 5f       	subi	r22, 0xFA	; 250
   1c490:	7e 4f       	sbci	r23, 0xFE	; 254
   1c492:	c8 01       	movw	r24, r16
   1c494:	0e 94 bd 75 	call	0xeb7a	; 0xeb7a <fatfs_tests>
   1c498:	89 2b       	or	r24, r25
   1c49a:	39 f4       	brne	.+14     	; 0x1c4aa <task.part.0+0x164>
        result = 1;
#endif

#ifdef LIF_SUPPORT
    else if(lif_tests(argc,argv))
   1c49c:	be 01       	movw	r22, r28
   1c49e:	6a 5f       	subi	r22, 0xFA	; 250
   1c4a0:	7e 4f       	sbci	r23, 0xFE	; 254
   1c4a2:	c8 01       	movw	r24, r16
   1c4a4:	2c dd       	rcall	.-1448   	; 0x1befe <lif_tests>
   1c4a6:	89 2b       	or	r24, r25
   1c4a8:	59 f0       	breq	.+22     	; 0x1c4c0 <task.part.0+0x17a>
        result = 1;
#endif
	if(result)
		printf("OK\n");
   1c4aa:	80 e1       	ldi	r24, 0x10	; 16
   1c4ac:	98 e4       	ldi	r25, 0x48	; 72
   1c4ae:	a0 e0       	ldi	r26, 0x00	; 0
   1c4b0:	ed b7       	in	r30, 0x3d	; 61
   1c4b2:	fe b7       	in	r31, 0x3e	; 62
   1c4b4:	81 83       	std	Z+1, r24	; 0x01
   1c4b6:	92 83       	std	Z+2, r25	; 0x02
   1c4b8:	a3 83       	std	Z+3, r26	; 0x03
   1c4ba:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
   1c4be:	0c c0       	rjmp	.+24     	; 0x1c4d8 <task.part.0+0x192>
	else
		printf("Error:[%s]\n",line);
   1c4c0:	ed b7       	in	r30, 0x3d	; 61
   1c4c2:	fe b7       	in	r31, 0x3e	; 62
   1c4c4:	d5 82       	std	Z+5, r13	; 0x05
   1c4c6:	c4 82       	std	Z+4, r12	; 0x04
   1c4c8:	84 e0       	ldi	r24, 0x04	; 4
   1c4ca:	98 e4       	ldi	r25, 0x48	; 72
   1c4cc:	a0 e0       	ldi	r26, 0x00	; 0
   1c4ce:	81 83       	std	Z+1, r24	; 0x01
   1c4d0:	92 83       	std	Z+2, r25	; 0x02
   1c4d2:	a3 83       	std	Z+3, r26	; 0x03
   1c4d4:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
}
   1c4d8:	c7 59       	subi	r28, 0x97	; 151
   1c4da:	de 4f       	sbci	r29, 0xFE	; 254
   1c4dc:	e8 e0       	ldi	r30, 0x08	; 8
   1c4de:	cf c2       	rjmp	.+1438   	; 0x1ca7e <__epilogue_restores__+0x14>

0001c4e0 <task>:
    int argc;
	int result = 0;
    char *argv[50];
    char line[256];

    if(gpib)
   1c4e0:	81 11       	cpse	r24, r1
        gpib_task();
   1c4e2:	0e 94 9a 92 	call	0x12534	; 0x12534 <gpib_task>

    if(!kbhit(0))
   1c4e6:	80 e0       	ldi	r24, 0x00	; 0
   1c4e8:	0e 94 2e 2c 	call	0x585c	; 0x585c <uart_rx_count>
   1c4ec:	89 2b       	or	r24, r25
   1c4ee:	09 f0       	breq	.+2      	; 0x1c4f2 <task+0x12>
   1c4f0:	2a cf       	rjmp	.-428    	; 0x1c346 <task.part.0>
   1c4f2:	08 95       	ret

0001c4f4 <main>:


/// @brief  main() for gpib project
/// @return  should never return!
int main(void)
{
   1c4f4:	cf 93       	push	r28
   1c4f6:	df 93       	push	r29
   1c4f8:	cd b7       	in	r28, 0x3d	; 61
   1c4fa:	de b7       	in	r29, 0x3e	; 62
   1c4fc:	63 97       	sbiw	r28, 0x13	; 19
   1c4fe:	0f b6       	in	r0, 0x3f	; 63
   1c500:	f8 94       	cli
   1c502:	de bf       	out	0x3e, r29	; 62
   1c504:	0f be       	out	0x3f, r0	; 63
   1c506:	cd bf       	out	0x3d, r28	; 61
    ts_t ts;
    uint32_t actual,baud;

    ///@ initialize bus state as soon as practical
    gpib_bus_init();
   1c508:	0e 94 46 87 	call	0x10e8c	; 0x10e8c <gpib_bus_init>
    // BAUD setting moved to Makefile
    baud = BAUD;

    ///@ Initialize UART early
	/// Returns actual BAUD rate - possible with hardware - may differ slightly
    actual = uart_init(0, baud); // Serial Port Initialize
   1c50c:	40 e0       	ldi	r20, 0x00	; 0
   1c50e:	52 ec       	ldi	r21, 0xC2	; 194
   1c510:	61 e0       	ldi	r22, 0x01	; 1
   1c512:	70 e0       	ldi	r23, 0x00	; 0
   1c514:	80 e0       	ldi	r24, 0x00	; 0
   1c516:	0e 94 9a 2b 	call	0x5734	; 0x5734 <uart_init>
   1c51a:	6b 01       	movw	r12, r22
   1c51c:	7c 01       	movw	r14, r24

    ///@brief Power up delay
    delayms(200); 
   1c51e:	68 ec       	ldi	r22, 0xC8	; 200
   1c520:	70 e0       	ldi	r23, 0x00	; 0
   1c522:	80 e0       	ldi	r24, 0x00	; 0
   1c524:	90 e0       	ldi	r25, 0x00	; 0
   1c526:	0e 94 a7 2a 	call	0x554e	; 0x554e <delayms>

    sep();
   1c52a:	0e 94 b3 33 	call	0x6766	; 0x6766 <sep>
    printf("Start\n");
   1c52e:	8d ef       	ldi	r24, 0xFD	; 253
   1c530:	97 e4       	ldi	r25, 0x47	; 71
   1c532:	a0 e0       	ldi	r26, 0x00	; 0
   1c534:	ed b7       	in	r30, 0x3d	; 61
   1c536:	fe b7       	in	r31, 0x3e	; 62
   1c538:	81 83       	std	Z+1, r24	; 0x01
   1c53a:	92 83       	std	Z+2, r25	; 0x02
   1c53c:	a3 83       	std	Z+3, r26	; 0x03
   1c53e:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    printf("CPU Clock = %lu\n", F_CPU);
   1c542:	80 e0       	ldi	r24, 0x00	; 0
   1c544:	9d e2       	ldi	r25, 0x2D	; 45
   1c546:	a1 e3       	ldi	r26, 0x31	; 49
   1c548:	b1 e0       	ldi	r27, 0x01	; 1
   1c54a:	ed b7       	in	r30, 0x3d	; 61
   1c54c:	fe b7       	in	r31, 0x3e	; 62
   1c54e:	84 83       	std	Z+4, r24	; 0x04
   1c550:	95 83       	std	Z+5, r25	; 0x05
   1c552:	a6 83       	std	Z+6, r26	; 0x06
   1c554:	b7 83       	std	Z+7, r27	; 0x07
   1c556:	8c ee       	ldi	r24, 0xEC	; 236
   1c558:	97 e4       	ldi	r25, 0x47	; 71
   1c55a:	a0 e0       	ldi	r26, 0x00	; 0
   1c55c:	81 83       	std	Z+1, r24	; 0x01
   1c55e:	92 83       	std	Z+2, r25	; 0x02
   1c560:	a3 83       	std	Z+3, r26	; 0x03
   1c562:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    printf("Requested Baud Rate: %ld, Actual: %ld\n", (long)baud, (long)actual);
   1c566:	ed b7       	in	r30, 0x3d	; 61
   1c568:	fe b7       	in	r31, 0x3e	; 62
   1c56a:	c0 86       	std	Z+8, r12	; 0x08
   1c56c:	d1 86       	std	Z+9, r13	; 0x09
   1c56e:	e2 86       	std	Z+10, r14	; 0x0a
   1c570:	f3 86       	std	Z+11, r15	; 0x0b
   1c572:	80 e0       	ldi	r24, 0x00	; 0
   1c574:	92 ec       	ldi	r25, 0xC2	; 194
   1c576:	a1 e0       	ldi	r26, 0x01	; 1
   1c578:	b0 e0       	ldi	r27, 0x00	; 0
   1c57a:	84 83       	std	Z+4, r24	; 0x04
   1c57c:	95 83       	std	Z+5, r25	; 0x05
   1c57e:	a6 83       	std	Z+6, r26	; 0x06
   1c580:	b7 83       	std	Z+7, r27	; 0x07
   1c582:	85 ec       	ldi	r24, 0xC5	; 197
   1c584:	97 e4       	ldi	r25, 0x47	; 71
   1c586:	a0 e0       	ldi	r26, 0x00	; 0
   1c588:	81 83       	std	Z+1, r24	; 0x01
   1c58a:	92 83       	std	Z+2, r25	; 0x02
   1c58c:	a3 83       	std	Z+3, r26	; 0x03
   1c58e:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>

    init_timers();
   1c592:	0e 94 99 37 	call	0x6f32	; 0x6f32 <init_timers>

    sep();
   1c596:	0e 94 b3 33 	call	0x6766	; 0x6766 <sep>
    printf("HP85 Disk and Device Emulator\n");
   1c59a:	86 ea       	ldi	r24, 0xA6	; 166
   1c59c:	97 e4       	ldi	r25, 0x47	; 71
   1c59e:	a0 e0       	ldi	r26, 0x00	; 0
   1c5a0:	ed b7       	in	r30, 0x3d	; 61
   1c5a2:	fe b7       	in	r31, 0x3e	; 62
   1c5a4:	81 83       	std	Z+1, r24	; 0x01
   1c5a6:	92 83       	std	Z+2, r25	; 0x02
   1c5a8:	a3 83       	std	Z+3, r26	; 0x03
   1c5aa:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    printf(" (C) 2014-2020 by Mike Gore\n");
   1c5ae:	89 e8       	ldi	r24, 0x89	; 137
   1c5b0:	97 e4       	ldi	r25, 0x47	; 71
   1c5b2:	a0 e0       	ldi	r26, 0x00	; 0
   1c5b4:	ed b7       	in	r30, 0x3d	; 61
   1c5b6:	fe b7       	in	r31, 0x3e	; 62
   1c5b8:	81 83       	std	Z+1, r24	; 0x01
   1c5ba:	92 83       	std	Z+2, r25	; 0x02
   1c5bc:	a3 83       	std	Z+3, r26	; 0x03
   1c5be:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
	printf(" GNU version 3\n");
   1c5c2:	89 e7       	ldi	r24, 0x79	; 121
   1c5c4:	97 e4       	ldi	r25, 0x47	; 71
   1c5c6:	a0 e0       	ldi	r26, 0x00	; 0
   1c5c8:	ed b7       	in	r30, 0x3d	; 61
   1c5ca:	fe b7       	in	r31, 0x3e	; 62
   1c5cc:	81 83       	std	Z+1, r24	; 0x01
   1c5ce:	92 83       	std	Z+2, r25	; 0x02
   1c5d0:	a3 83       	std	Z+3, r26	; 0x03
   1c5d2:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    printf("-> https://github.com/magore/hp85disk\n");
   1c5d6:	82 e5       	ldi	r24, 0x52	; 82
   1c5d8:	97 e4       	ldi	r25, 0x47	; 71
   1c5da:	a0 e0       	ldi	r26, 0x00	; 0
   1c5dc:	ed b7       	in	r30, 0x3d	; 61
   1c5de:	fe b7       	in	r31, 0x3e	; 62
   1c5e0:	81 83       	std	Z+1, r24	; 0x01
   1c5e2:	92 83       	std	Z+2, r25	; 0x02
   1c5e4:	a3 83       	std	Z+3, r26	; 0x03
   1c5e6:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    printf("   GIT last pushed:   %s\n", GIT_VERSION);
   1c5ea:	81 e0       	ldi	r24, 0x01	; 1
   1c5ec:	96 e1       	ldi	r25, 0x16	; 22
   1c5ee:	ed b7       	in	r30, 0x3d	; 61
   1c5f0:	fe b7       	in	r31, 0x3e	; 62
   1c5f2:	95 83       	std	Z+5, r25	; 0x05
   1c5f4:	84 83       	std	Z+4, r24	; 0x04
   1c5f6:	88 e3       	ldi	r24, 0x38	; 56
   1c5f8:	97 e4       	ldi	r25, 0x47	; 71
   1c5fa:	a0 e0       	ldi	r26, 0x00	; 0
   1c5fc:	81 83       	std	Z+1, r24	; 0x01
   1c5fe:	92 83       	std	Z+2, r25	; 0x02
   1c600:	a3 83       	std	Z+3, r26	; 0x03
   1c602:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    printf("   Last updated file: %s\n", LOCAL_MOD);
   1c606:	85 e2       	ldi	r24, 0x25	; 37
   1c608:	96 e1       	ldi	r25, 0x16	; 22
   1c60a:	ed b7       	in	r30, 0x3d	; 61
   1c60c:	fe b7       	in	r31, 0x3e	; 62
   1c60e:	95 83       	std	Z+5, r25	; 0x05
   1c610:	84 83       	std	Z+4, r24	; 0x04
   1c612:	8e e1       	ldi	r24, 0x1E	; 30
   1c614:	97 e4       	ldi	r25, 0x47	; 71
   1c616:	a0 e0       	ldi	r26, 0x00	; 0
   1c618:	81 83       	std	Z+1, r24	; 0x01
   1c61a:	92 83       	std	Z+2, r25	; 0x02
   1c61c:	a3 83       	std	Z+3, r26	; 0x03
   1c61e:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>

    sep();
   1c622:	0e 94 b3 33 	call	0x6766	; 0x6766 <sep>
    PrintFree();
   1c626:	0e 94 68 29 	call	0x52d0	; 0x52d0 <PrintFree>

    sep();
   1c62a:	0e 94 b3 33 	call	0x6766	; 0x6766 <sep>
    delayms(200); ///@brief Power up delay
   1c62e:	68 ec       	ldi	r22, 0xC8	; 200
   1c630:	70 e0       	ldi	r23, 0x00	; 0
   1c632:	80 e0       	ldi	r24, 0x00	; 0
   1c634:	90 e0       	ldi	r25, 0x00	; 0
   1c636:	0e 94 a7 2a 	call	0x554e	; 0x554e <delayms>


    ///@ initialize SPI bus 
    printf("initializing SPI bus\n");
   1c63a:	88 e0       	ldi	r24, 0x08	; 8
   1c63c:	97 e4       	ldi	r25, 0x47	; 71
   1c63e:	a0 e0       	ldi	r26, 0x00	; 0
   1c640:	ed b7       	in	r30, 0x3d	; 61
   1c642:	fe b7       	in	r31, 0x3e	; 62
   1c644:	81 83       	std	Z+1, r24	; 0x01
   1c646:	92 83       	std	Z+2, r25	; 0x02
   1c648:	a3 83       	std	Z+3, r26	; 0x03
   1c64a:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    spi_init(MMC_SLOW,GPIO_B3);
   1c64e:	4b e0       	ldi	r20, 0x0B	; 11
   1c650:	50 e0       	ldi	r21, 0x00	; 0
   1c652:	60 e2       	ldi	r22, 0x20	; 32
   1c654:	71 ea       	ldi	r23, 0xA1	; 161
   1c656:	87 e0       	ldi	r24, 0x07	; 7
   1c658:	90 e0       	ldi	r25, 0x00	; 0
   1c65a:	0e 94 d8 28 	call	0x51b0	; 0x51b0 <spi_init>

    ///@ initialize I2C bus 
    printf("initializing I2C bus\n");
   1c65e:	82 ef       	ldi	r24, 0xF2	; 242
   1c660:	96 e4       	ldi	r25, 0x46	; 70
   1c662:	a0 e0       	ldi	r26, 0x00	; 0
   1c664:	ed b7       	in	r30, 0x3d	; 61
   1c666:	fe b7       	in	r31, 0x3e	; 62
   1c668:	81 83       	std	Z+1, r24	; 0x01
   1c66a:	92 83       	std	Z+2, r25	; 0x02
   1c66c:	a3 83       	std	Z+3, r26	; 0x03
   1c66e:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    TWI_Init(TWI_BIT_PRESCALE_4, TWI_BITLENGTH_FROM_FREQ(4, 100000));
   1c672:	61 e1       	ldi	r22, 0x11	; 17
   1c674:	81 e0       	ldi	r24, 0x01	; 1
   1c676:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <TWI_Init>
    sep();
   1c67a:	0e 94 b3 33 	call	0x6766	; 0x6766 <sep>

    printf("initializing RTC\n");
   1c67e:	80 ee       	ldi	r24, 0xE0	; 224
   1c680:	96 e4       	ldi	r25, 0x46	; 70
   1c682:	a0 e0       	ldi	r26, 0x00	; 0
   1c684:	ed b7       	in	r30, 0x3d	; 61
   1c686:	fe b7       	in	r31, 0x3e	; 62
   1c688:	81 83       	std	Z+1, r24	; 0x01
   1c68a:	92 83       	std	Z+2, r25	; 0x02
   1c68c:	a3 83       	std	Z+3, r26	; 0x03
   1c68e:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    ///@ initialize clock by RTC if we have it
    clock_clear();
   1c692:	0e 94 56 37 	call	0x6eac	; 0x6eac <clock_clear>
    printf("Clock cleared\n");
   1c696:	81 ed       	ldi	r24, 0xD1	; 209
   1c698:	96 e4       	ldi	r25, 0x46	; 70
   1c69a:	a0 e0       	ldi	r26, 0x00	; 0
   1c69c:	ed b7       	in	r30, 0x3d	; 61
   1c69e:	fe b7       	in	r31, 0x3e	; 62
   1c6a0:	81 83       	std	Z+1, r24	; 0x01
   1c6a2:	92 83       	std	Z+2, r25	; 0x02
   1c6a4:	a3 83       	std	Z+3, r26	; 0x03
   1c6a6:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    clock_getres(0, (ts_t *) &ts);
   1c6aa:	be 01       	movw	r22, r28
   1c6ac:	64 5f       	subi	r22, 0xF4	; 244
   1c6ae:	7f 4f       	sbci	r23, 0xFF	; 255
   1c6b0:	80 e0       	ldi	r24, 0x00	; 0
   1c6b2:	90 e0       	ldi	r25, 0x00	; 0
   1c6b4:	0e 94 f6 37 	call	0x6fec	; 0x6fec <clock_getres>
    printf("SYSTEM_TASK_COUNTER_RES:%ld\n", (uint32_t) ts.tv_nsec);
   1c6b8:	88 89       	ldd	r24, Y+16	; 0x10
   1c6ba:	99 89       	ldd	r25, Y+17	; 0x11
   1c6bc:	aa 89       	ldd	r26, Y+18	; 0x12
   1c6be:	bb 89       	ldd	r27, Y+19	; 0x13
   1c6c0:	ed b7       	in	r30, 0x3d	; 61
   1c6c2:	fe b7       	in	r31, 0x3e	; 62
   1c6c4:	84 83       	std	Z+4, r24	; 0x04
   1c6c6:	95 83       	std	Z+5, r25	; 0x05
   1c6c8:	a6 83       	std	Z+6, r26	; 0x06
   1c6ca:	b7 83       	std	Z+7, r27	; 0x07
   1c6cc:	84 eb       	ldi	r24, 0xB4	; 180
   1c6ce:	96 e4       	ldi	r25, 0x46	; 70
   1c6d0:	a0 e0       	ldi	r26, 0x00	; 0
   1c6d2:	81 83       	std	Z+1, r24	; 0x01
   1c6d4:	92 83       	std	Z+2, r25	; 0x02
   1c6d6:	a3 83       	std	Z+3, r26	; 0x03
   1c6d8:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>

	// Timezone offset
    initialize_clock(300);
   1c6dc:	8c e2       	ldi	r24, 0x2C	; 44
   1c6de:	91 e0       	ldi	r25, 0x01	; 1
   1c6e0:	0e 94 d1 3e 	call	0x7da2	; 0x7da2 <initialize_clock>
    display_clock();
   1c6e4:	0e 94 48 3f 	call	0x7e90	; 0x7e90 <display_clock>
    sep();
   1c6e8:	0e 94 b3 33 	call	0x6766	; 0x6766 <sep>

	///@ initialize Optional I2C LCD
#ifdef LCD_SUPPORT
	printf("I2C LCD initialization start\n");
   1c6ec:	86 e9       	ldi	r24, 0x96	; 150
   1c6ee:	96 e4       	ldi	r25, 0x46	; 70
   1c6f0:	a0 e0       	ldi	r26, 0x00	; 0
   1c6f2:	ed b7       	in	r30, 0x3d	; 61
   1c6f4:	fe b7       	in	r31, 0x3e	; 62
   1c6f6:	81 83       	std	Z+1, r24	; 0x01
   1c6f8:	92 83       	std	Z+2, r25	; 0x02
   1c6fa:	a3 83       	std	Z+3, r26	; 0x03
   1c6fc:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
	if ( LCD_init(LCD_ADDR) )
   1c700:	84 ee       	ldi	r24, 0xE4	; 228
   1c702:	0e 94 f6 31 	call	0x63ec	; 0x63ec <LCD_init>
   1c706:	89 2b       	or	r24, r25
   1c708:	b9 f0       	breq	.+46     	; 0x1c738 <main+0x244>
	{
		// Display LCD firmware version
		// LCD_command(',');
		// delayms(1000);

		LCD_pos(0,0);
   1c70a:	60 e0       	ldi	r22, 0x00	; 0
   1c70c:	80 e0       	ldi	r24, 0x00	; 0
   1c70e:	0e 94 c0 31 	call	0x6380	; 0x6380 <LCD_pos>
		lcd_printf("hp85disk V2.0\n");
   1c712:	81 ed       	ldi	r24, 0xD1	; 209
   1c714:	96 e1       	ldi	r25, 0x16	; 22
   1c716:	ed b7       	in	r30, 0x3d	; 61
   1c718:	fe b7       	in	r31, 0x3e	; 62
   1c71a:	92 83       	std	Z+2, r25	; 0x02
   1c71c:	81 83       	std	Z+1, r24	; 0x01
   1c71e:	0e 94 af 32 	call	0x655e	; 0x655e <lcd_printf>
		lcd_printf("(C)Mike Gore ");
   1c722:	80 ee       	ldi	r24, 0xE0	; 224
   1c724:	96 e1       	ldi	r25, 0x16	; 22
   1c726:	ed b7       	in	r30, 0x3d	; 61
   1c728:	fe b7       	in	r31, 0x3e	; 62
   1c72a:	92 83       	std	Z+2, r25	; 0x02
   1c72c:	81 83       	std	Z+1, r24	; 0x01
   1c72e:	0e 94 af 32 	call	0x655e	; 0x655e <lcd_printf>
		// SparkFun V1.1 firmware loses the last character when the LCD goes to sleep 

		printf("I2C LCD initialization Done\n");
   1c732:	89 e7       	ldi	r24, 0x79	; 121
   1c734:	96 e4       	ldi	r25, 0x46	; 70
   1c736:	02 c0       	rjmp	.+4      	; 0x1c73c <main+0x248>
	}
	else
	{
		printf("I2C LCD is NOT attached!\n");
   1c738:	8f e5       	ldi	r24, 0x5F	; 95
   1c73a:	96 e4       	ldi	r25, 0x46	; 70
   1c73c:	a0 e0       	ldi	r26, 0x00	; 0
   1c73e:	ed b7       	in	r30, 0x3d	; 61
   1c740:	fe b7       	in	r31, 0x3e	; 62
   1c742:	81 83       	std	Z+1, r24	; 0x01
   1c744:	92 83       	std	Z+2, r25	; 0x02
   1c746:	a3 83       	std	Z+3, r26	; 0x03
   1c748:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
	}
    sep();
   1c74c:	0e 94 b3 33 	call	0x6766	; 0x6766 <sep>
#endif

    ///@ initialize MMC bus
    printf("MMC initializing start\n");
   1c750:	87 e4       	ldi	r24, 0x47	; 71
   1c752:	96 e4       	ldi	r25, 0x46	; 70
   1c754:	a0 e0       	ldi	r26, 0x00	; 0
   1c756:	ed b7       	in	r30, 0x3d	; 61
   1c758:	fe b7       	in	r31, 0x3e	; 62
   1c75a:	81 83       	std	Z+1, r24	; 0x01
   1c75c:	92 83       	std	Z+2, r25	; 0x02
   1c75e:	a3 83       	std	Z+3, r26	; 0x03
   1c760:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    mmc_init(1);
   1c764:	81 e0       	ldi	r24, 0x01	; 1
   1c766:	90 e0       	ldi	r25, 0x00	; 0
   1c768:	0e 94 ef 70 	call	0xe1de	; 0xe1de <mmc_init>
    printf("MMC initialized\n");
   1c76c:	86 e3       	ldi	r24, 0x36	; 54
   1c76e:	96 e4       	ldi	r25, 0x46	; 70
   1c770:	a0 e0       	ldi	r26, 0x00	; 0
   1c772:	ed b7       	in	r30, 0x3d	; 61
   1c774:	fe b7       	in	r31, 0x3e	; 62
   1c776:	81 83       	std	Z+1, r24	; 0x01
   1c778:	92 83       	std	Z+2, r25	; 0x02
   1c77a:	a3 83       	std	Z+3, r26	; 0x03
   1c77c:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    sep();
   1c780:	0e 94 b3 33 	call	0x6766	; 0x6766 <sep>

    ///@ initialize bus state as soon as practical
    gpib_bus_init();
   1c784:	0e 94 46 87 	call	0x10e8c	; 0x10e8c <gpib_bus_init>
    printf("GPIB bus initialized\n");
   1c788:	80 e2       	ldi	r24, 0x20	; 32
   1c78a:	96 e4       	ldi	r25, 0x46	; 70
   1c78c:	a0 e0       	ldi	r26, 0x00	; 0
   1c78e:	ed b7       	in	r30, 0x3d	; 61
   1c790:	fe b7       	in	r31, 0x3e	; 62
   1c792:	81 83       	std	Z+1, r24	; 0x01
   1c794:	92 83       	std	Z+2, r25	; 0x02
   1c796:	a3 83       	std	Z+3, r26	; 0x03
   1c798:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>

    ///@ initialize Printer Capture
    printer_init();
   1c79c:	0e 94 f8 be 	call	0x17df0	; 0x17df0 <printer_init>
    printf("Printer initialized\n");
   1c7a0:	8b e0       	ldi	r24, 0x0B	; 11
   1c7a2:	96 e4       	ldi	r25, 0x46	; 70
   1c7a4:	a0 e0       	ldi	r26, 0x00	; 0
   1c7a6:	ed b7       	in	r30, 0x3d	; 61
   1c7a8:	fe b7       	in	r31, 0x3e	; 62
   1c7aa:	81 83       	std	Z+1, r24	; 0x01
   1c7ac:	92 83       	std	Z+2, r25	; 0x02
   1c7ae:	a3 83       	std	Z+3, r26	; 0x03
   1c7b0:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>

    ///@ initialize GPIB timer tasks
    sep();
   1c7b4:	0e 94 b3 33 	call	0x6766	; 0x6766 <sep>
    printf("GPIB Timer Setup\n");
   1c7b8:	89 ef       	ldi	r24, 0xF9	; 249
   1c7ba:	95 e4       	ldi	r25, 0x45	; 69
   1c7bc:	a0 e0       	ldi	r26, 0x00	; 0
   1c7be:	ed b7       	in	r30, 0x3d	; 61
   1c7c0:	fe b7       	in	r31, 0x3e	; 62
   1c7c2:	81 83       	std	Z+1, r24	; 0x01
   1c7c4:	92 83       	std	Z+2, r25	; 0x02
   1c7c6:	a3 83       	std	Z+3, r26	; 0x03
   1c7c8:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    gpib_timer_init();
   1c7cc:	0e 94 37 85 	call	0x10a6e	; 0x10a6e <gpib_timer_init>
    printf("GPIB Timer initialized\n");
   1c7d0:	81 ee       	ldi	r24, 0xE1	; 225
   1c7d2:	95 e4       	ldi	r25, 0x45	; 69
   1c7d4:	a0 e0       	ldi	r26, 0x00	; 0
   1c7d6:	ed b7       	in	r30, 0x3d	; 61
   1c7d8:	fe b7       	in	r31, 0x3e	; 62
   1c7da:	81 83       	std	Z+1, r24	; 0x01
   1c7dc:	92 83       	std	Z+2, r25	; 0x02
   1c7de:	a3 83       	std	Z+3, r26	; 0x03
   1c7e0:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>

    ///@brief Process hp85disk emulator config file
    gpib_file_init();
   1c7e4:	0e 94 6f 8d 	call	0x11ade	; 0x11ade <gpib_file_init>
    printf("GPIB File init done\n");
   1c7e8:	8c ec       	ldi	r24, 0xCC	; 204
   1c7ea:	95 e4       	ldi	r25, 0x45	; 69
   1c7ec:	a0 e0       	ldi	r26, 0x00	; 0
   1c7ee:	ed b7       	in	r30, 0x3d	; 61
   1c7f0:	fe b7       	in	r31, 0x3e	; 62
   1c7f2:	81 83       	std	Z+1, r24	; 0x01
   1c7f4:	92 83       	std	Z+2, r25	; 0x02
   1c7f6:	a3 83       	std	Z+3, r26	; 0x03
   1c7f8:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>

    ///@brief GPIB talking/listening state variables 
    ///Must be done AFTER gpib_file_init() so we have a valid configuration
    gpib_state_init();
   1c7fc:	0e 94 73 87 	call	0x10ee6	; 0x10ee6 <gpib_state_init>
    printf("GPIB State init done\n");
   1c800:	86 eb       	ldi	r24, 0xB6	; 182
   1c802:	95 e4       	ldi	r25, 0x45	; 69
   1c804:	a0 e0       	ldi	r26, 0x00	; 0
   1c806:	ed b7       	in	r30, 0x3d	; 61
   1c808:	fe b7       	in	r31, 0x3e	; 62
   1c80a:	81 83       	std	Z+1, r24	; 0x01
   1c80c:	92 83       	std	Z+2, r25	; 0x02
   1c80e:	a3 83       	std	Z+3, r26	; 0x03
   1c810:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>
    sep();
   1c814:	0e 94 b3 33 	call	0x6766	; 0x6766 <sep>

    ///@brief Display Configuration
    display_Config(0);
   1c818:	80 e0       	ldi	r24, 0x00	; 0
   1c81a:	90 e0       	ldi	r25, 0x00	; 0
   1c81c:	0e 94 07 a0 	call	0x1400e	; 0x1400e <display_Config>

    ///@brief Format any drives that do not yet exist
    format_drives();
   1c820:	0e 94 25 a3 	call	0x1464a	; 0x1464a <format_drives>

    ///@brief Display Address Summary
    sep();
   1c824:	0e 94 b3 33 	call	0x6766	; 0x6766 <sep>
    display_Addresses();
   1c828:	0e 94 02 9f 	call	0x13e04	; 0x13e04 <display_Addresses>

    ///@brief Display debug level
    sep();
   1c82c:	0e 94 b3 33 	call	0x6766	; 0x6766 <sep>
    printf("debuglevel   = %04xH\n",(int)debuglevel);
   1c830:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1c834:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1c838:	ed b7       	in	r30, 0x3d	; 61
   1c83a:	fe b7       	in	r31, 0x3e	; 62
   1c83c:	95 83       	std	Z+5, r25	; 0x05
   1c83e:	84 83       	std	Z+4, r24	; 0x04
   1c840:	80 ea       	ldi	r24, 0xA0	; 160
   1c842:	95 e4       	ldi	r25, 0x45	; 69
   1c844:	a0 e0       	ldi	r26, 0x00	; 0
   1c846:	81 83       	std	Z+1, r24	; 0x01
   1c848:	92 83       	std	Z+2, r25	; 0x02
   1c84a:	a3 83       	std	Z+3, r26	; 0x03
   1c84c:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>

#ifdef LCD_SUPPORT
	LCD_pos(0,0);
   1c850:	60 e0       	ldi	r22, 0x00	; 0
   1c852:	80 e0       	ldi	r24, 0x00	; 0
   1c854:	0e 94 c0 31 	call	0x6380	; 0x6380 <LCD_pos>
	lcd_printf("SS80  Drives:%d\n",(int) count_drive_types(SS80_TYPE));
   1c858:	83 e0       	ldi	r24, 0x03	; 3
   1c85a:	0e 94 0e 94 	call	0x1281c	; 0x1281c <count_drive_types>
   1c85e:	ed b7       	in	r30, 0x3d	; 61
   1c860:	fe b7       	in	r31, 0x3e	; 62
   1c862:	94 83       	std	Z+4, r25	; 0x04
   1c864:	83 83       	std	Z+3, r24	; 0x03
   1c866:	8e ee       	ldi	r24, 0xEE	; 238
   1c868:	96 e1       	ldi	r25, 0x16	; 22
   1c86a:	92 83       	std	Z+2, r25	; 0x02
   1c86c:	81 83       	std	Z+1, r24	; 0x01
   1c86e:	0e 94 af 32 	call	0x655e	; 0x655e <lcd_printf>
	lcd_printf("AMIGO Drives:%d ",(int) count_drive_types(AMIGO_TYPE));
   1c872:	81 e0       	ldi	r24, 0x01	; 1
   1c874:	0e 94 0e 94 	call	0x1281c	; 0x1281c <count_drive_types>
   1c878:	ed b7       	in	r30, 0x3d	; 61
   1c87a:	fe b7       	in	r31, 0x3e	; 62
   1c87c:	94 83       	std	Z+4, r25	; 0x04
   1c87e:	83 83       	std	Z+3, r24	; 0x03
   1c880:	8f ef       	ldi	r24, 0xFF	; 255
   1c882:	96 e1       	ldi	r25, 0x16	; 22
   1c884:	92 83       	std	Z+2, r25	; 0x02
   1c886:	81 83       	std	Z+1, r24	; 0x01
   1c888:	0e 94 af 32 	call	0x655e	; 0x655e <lcd_printf>
	//lcd_printf("Debug: %04xH\n", (int)debuglevel);
#endif


    ///@brief Start main GPIB state machine
    sep();
   1c88c:	0e 94 b3 33 	call	0x6766	; 0x6766 <sep>
    printf("Starting GPIB TASK\n");
   1c890:	8c e8       	ldi	r24, 0x8C	; 140
   1c892:	95 e4       	ldi	r25, 0x45	; 69
   1c894:	a0 e0       	ldi	r26, 0x00	; 0
   1c896:	ed b7       	in	r30, 0x3d	; 61
   1c898:	fe b7       	in	r31, 0x3e	; 62
   1c89a:	81 83       	std	Z+1, r24	; 0x01
   1c89c:	92 83       	std	Z+2, r25	; 0x02
   1c89e:	a3 83       	std	Z+3, r26	; 0x03
   1c8a0:	0e 94 ed 47 	call	0x8fda	; 0x8fda <printf_P>

    ///@brief Keep the task running - it exits after every user interaction, ie key press
    while (1)
    {
        task(1);
   1c8a4:	81 e0       	ldi	r24, 0x01	; 1
   1c8a6:	1c de       	rcall	.-968    	; 0x1c4e0 <task>
   1c8a8:	fd cf       	rjmp	.-6      	; 0x1c8a4 <main+0x3b0>

0001c8aa <__mulsi3>:
   1c8aa:	db 01       	movw	r26, r22
   1c8ac:	8f 93       	push	r24
   1c8ae:	9f 93       	push	r25
   1c8b0:	a0 d0       	rcall	.+320    	; 0x1c9f2 <__muluhisi3>
   1c8b2:	bf 91       	pop	r27
   1c8b4:	af 91       	pop	r26
   1c8b6:	a2 9f       	mul	r26, r18
   1c8b8:	80 0d       	add	r24, r0
   1c8ba:	91 1d       	adc	r25, r1
   1c8bc:	a3 9f       	mul	r26, r19
   1c8be:	90 0d       	add	r25, r0
   1c8c0:	b2 9f       	mul	r27, r18
   1c8c2:	90 0d       	add	r25, r0
   1c8c4:	11 24       	eor	r1, r1
   1c8c6:	08 95       	ret

0001c8c8 <__udivmodqi4>:
   1c8c8:	99 1b       	sub	r25, r25
   1c8ca:	79 e0       	ldi	r23, 0x09	; 9
   1c8cc:	04 c0       	rjmp	.+8      	; 0x1c8d6 <__udivmodqi4_ep>

0001c8ce <__udivmodqi4_loop>:
   1c8ce:	99 1f       	adc	r25, r25
   1c8d0:	96 17       	cp	r25, r22
   1c8d2:	08 f0       	brcs	.+2      	; 0x1c8d6 <__udivmodqi4_ep>
   1c8d4:	96 1b       	sub	r25, r22

0001c8d6 <__udivmodqi4_ep>:
   1c8d6:	88 1f       	adc	r24, r24
   1c8d8:	7a 95       	dec	r23
   1c8da:	c9 f7       	brne	.-14     	; 0x1c8ce <__udivmodqi4_loop>
   1c8dc:	80 95       	com	r24
   1c8de:	08 95       	ret

0001c8e0 <__udivmodhi4>:
   1c8e0:	aa 1b       	sub	r26, r26
   1c8e2:	bb 1b       	sub	r27, r27
   1c8e4:	51 e1       	ldi	r21, 0x11	; 17
   1c8e6:	07 c0       	rjmp	.+14     	; 0x1c8f6 <__udivmodhi4_ep>

0001c8e8 <__udivmodhi4_loop>:
   1c8e8:	aa 1f       	adc	r26, r26
   1c8ea:	bb 1f       	adc	r27, r27
   1c8ec:	a6 17       	cp	r26, r22
   1c8ee:	b7 07       	cpc	r27, r23
   1c8f0:	10 f0       	brcs	.+4      	; 0x1c8f6 <__udivmodhi4_ep>
   1c8f2:	a6 1b       	sub	r26, r22
   1c8f4:	b7 0b       	sbc	r27, r23

0001c8f6 <__udivmodhi4_ep>:
   1c8f6:	88 1f       	adc	r24, r24
   1c8f8:	99 1f       	adc	r25, r25
   1c8fa:	5a 95       	dec	r21
   1c8fc:	a9 f7       	brne	.-22     	; 0x1c8e8 <__udivmodhi4_loop>
   1c8fe:	80 95       	com	r24
   1c900:	90 95       	com	r25
   1c902:	bc 01       	movw	r22, r24
   1c904:	cd 01       	movw	r24, r26
   1c906:	08 95       	ret

0001c908 <__divmodhi4>:
   1c908:	97 fb       	bst	r25, 7
   1c90a:	07 2e       	mov	r0, r23
   1c90c:	16 f4       	brtc	.+4      	; 0x1c912 <__divmodhi4+0xa>
   1c90e:	00 94       	com	r0
   1c910:	06 d0       	rcall	.+12     	; 0x1c91e <__divmodhi4_neg1>
   1c912:	77 fd       	sbrc	r23, 7
   1c914:	08 d0       	rcall	.+16     	; 0x1c926 <__divmodhi4_neg2>
   1c916:	e4 df       	rcall	.-56     	; 0x1c8e0 <__udivmodhi4>
   1c918:	07 fc       	sbrc	r0, 7
   1c91a:	05 d0       	rcall	.+10     	; 0x1c926 <__divmodhi4_neg2>
   1c91c:	3e f4       	brtc	.+14     	; 0x1c92c <__divmodhi4_exit>

0001c91e <__divmodhi4_neg1>:
   1c91e:	90 95       	com	r25
   1c920:	81 95       	neg	r24
   1c922:	9f 4f       	sbci	r25, 0xFF	; 255
   1c924:	08 95       	ret

0001c926 <__divmodhi4_neg2>:
   1c926:	70 95       	com	r23
   1c928:	61 95       	neg	r22
   1c92a:	7f 4f       	sbci	r23, 0xFF	; 255

0001c92c <__divmodhi4_exit>:
   1c92c:	08 95       	ret

0001c92e <__udivmodsi4>:
   1c92e:	a1 e2       	ldi	r26, 0x21	; 33
   1c930:	1a 2e       	mov	r1, r26
   1c932:	aa 1b       	sub	r26, r26
   1c934:	bb 1b       	sub	r27, r27
   1c936:	fd 01       	movw	r30, r26
   1c938:	0d c0       	rjmp	.+26     	; 0x1c954 <__udivmodsi4_ep>

0001c93a <__udivmodsi4_loop>:
   1c93a:	aa 1f       	adc	r26, r26
   1c93c:	bb 1f       	adc	r27, r27
   1c93e:	ee 1f       	adc	r30, r30
   1c940:	ff 1f       	adc	r31, r31
   1c942:	a2 17       	cp	r26, r18
   1c944:	b3 07       	cpc	r27, r19
   1c946:	e4 07       	cpc	r30, r20
   1c948:	f5 07       	cpc	r31, r21
   1c94a:	20 f0       	brcs	.+8      	; 0x1c954 <__udivmodsi4_ep>
   1c94c:	a2 1b       	sub	r26, r18
   1c94e:	b3 0b       	sbc	r27, r19
   1c950:	e4 0b       	sbc	r30, r20
   1c952:	f5 0b       	sbc	r31, r21

0001c954 <__udivmodsi4_ep>:
   1c954:	66 1f       	adc	r22, r22
   1c956:	77 1f       	adc	r23, r23
   1c958:	88 1f       	adc	r24, r24
   1c95a:	99 1f       	adc	r25, r25
   1c95c:	1a 94       	dec	r1
   1c95e:	69 f7       	brne	.-38     	; 0x1c93a <__udivmodsi4_loop>
   1c960:	60 95       	com	r22
   1c962:	70 95       	com	r23
   1c964:	80 95       	com	r24
   1c966:	90 95       	com	r25
   1c968:	9b 01       	movw	r18, r22
   1c96a:	ac 01       	movw	r20, r24
   1c96c:	bd 01       	movw	r22, r26
   1c96e:	cf 01       	movw	r24, r30
   1c970:	08 95       	ret

0001c972 <__divmodsi4>:
   1c972:	05 2e       	mov	r0, r21
   1c974:	97 fb       	bst	r25, 7
   1c976:	16 f4       	brtc	.+4      	; 0x1c97c <__divmodsi4+0xa>
   1c978:	00 94       	com	r0
   1c97a:	0f d0       	rcall	.+30     	; 0x1c99a <__negsi2>
   1c97c:	57 fd       	sbrc	r21, 7
   1c97e:	05 d0       	rcall	.+10     	; 0x1c98a <__divmodsi4_neg2>
   1c980:	d6 df       	rcall	.-84     	; 0x1c92e <__udivmodsi4>
   1c982:	07 fc       	sbrc	r0, 7
   1c984:	02 d0       	rcall	.+4      	; 0x1c98a <__divmodsi4_neg2>
   1c986:	46 f4       	brtc	.+16     	; 0x1c998 <__divmodsi4_exit>
   1c988:	08 c0       	rjmp	.+16     	; 0x1c99a <__negsi2>

0001c98a <__divmodsi4_neg2>:
   1c98a:	50 95       	com	r21
   1c98c:	40 95       	com	r20
   1c98e:	30 95       	com	r19
   1c990:	21 95       	neg	r18
   1c992:	3f 4f       	sbci	r19, 0xFF	; 255
   1c994:	4f 4f       	sbci	r20, 0xFF	; 255
   1c996:	5f 4f       	sbci	r21, 0xFF	; 255

0001c998 <__divmodsi4_exit>:
   1c998:	08 95       	ret

0001c99a <__negsi2>:
   1c99a:	90 95       	com	r25
   1c99c:	80 95       	com	r24
   1c99e:	70 95       	com	r23
   1c9a0:	61 95       	neg	r22
   1c9a2:	7f 4f       	sbci	r23, 0xFF	; 255
   1c9a4:	8f 4f       	sbci	r24, 0xFF	; 255
   1c9a6:	9f 4f       	sbci	r25, 0xFF	; 255
   1c9a8:	08 95       	ret

0001c9aa <__tablejump2__>:
   1c9aa:	ee 0f       	add	r30, r30
   1c9ac:	ff 1f       	adc	r31, r31
   1c9ae:	00 24       	eor	r0, r0
   1c9b0:	00 1c       	adc	r0, r0
   1c9b2:	0b be       	out	0x3b, r0	; 59
   1c9b4:	07 90       	elpm	r0, Z+
   1c9b6:	f6 91       	elpm	r31, Z
   1c9b8:	e0 2d       	mov	r30, r0
   1c9ba:	09 94       	ijmp

0001c9bc <__mulhisi3>:
   1c9bc:	05 d0       	rcall	.+10     	; 0x1c9c8 <__umulhisi3>
   1c9be:	33 23       	and	r19, r19
   1c9c0:	12 f4       	brpl	.+4      	; 0x1c9c6 <__mulhisi3+0xa>
   1c9c2:	8a 1b       	sub	r24, r26
   1c9c4:	9b 0b       	sbc	r25, r27
   1c9c6:	10 c0       	rjmp	.+32     	; 0x1c9e8 <__usmulhisi3_tail>

0001c9c8 <__umulhisi3>:
   1c9c8:	a2 9f       	mul	r26, r18
   1c9ca:	b0 01       	movw	r22, r0
   1c9cc:	b3 9f       	mul	r27, r19
   1c9ce:	c0 01       	movw	r24, r0
   1c9d0:	a3 9f       	mul	r26, r19
   1c9d2:	70 0d       	add	r23, r0
   1c9d4:	81 1d       	adc	r24, r1
   1c9d6:	11 24       	eor	r1, r1
   1c9d8:	91 1d       	adc	r25, r1
   1c9da:	b2 9f       	mul	r27, r18
   1c9dc:	70 0d       	add	r23, r0
   1c9de:	81 1d       	adc	r24, r1
   1c9e0:	11 24       	eor	r1, r1
   1c9e2:	91 1d       	adc	r25, r1
   1c9e4:	08 95       	ret

0001c9e6 <__usmulhisi3>:
   1c9e6:	f0 df       	rcall	.-32     	; 0x1c9c8 <__umulhisi3>

0001c9e8 <__usmulhisi3_tail>:
   1c9e8:	b7 ff       	sbrs	r27, 7
   1c9ea:	08 95       	ret
   1c9ec:	82 1b       	sub	r24, r18
   1c9ee:	93 0b       	sbc	r25, r19
   1c9f0:	08 95       	ret

0001c9f2 <__muluhisi3>:
   1c9f2:	ea df       	rcall	.-44     	; 0x1c9c8 <__umulhisi3>
   1c9f4:	a5 9f       	mul	r26, r21
   1c9f6:	90 0d       	add	r25, r0
   1c9f8:	b4 9f       	mul	r27, r20
   1c9fa:	90 0d       	add	r25, r0
   1c9fc:	a4 9f       	mul	r26, r20
   1c9fe:	80 0d       	add	r24, r0
   1ca00:	91 1d       	adc	r25, r1
   1ca02:	11 24       	eor	r1, r1
   1ca04:	08 95       	ret

0001ca06 <__mulshisi3>:
   1ca06:	b7 ff       	sbrs	r27, 7
   1ca08:	f4 cf       	rjmp	.-24     	; 0x1c9f2 <__muluhisi3>

0001ca0a <__mulohisi3>:
   1ca0a:	f3 df       	rcall	.-26     	; 0x1c9f2 <__muluhisi3>
   1ca0c:	82 1b       	sub	r24, r18
   1ca0e:	93 0b       	sbc	r25, r19
   1ca10:	08 95       	ret

0001ca12 <__negdi2>:
   1ca12:	60 95       	com	r22
   1ca14:	70 95       	com	r23
   1ca16:	80 95       	com	r24
   1ca18:	90 95       	com	r25
   1ca1a:	30 95       	com	r19
   1ca1c:	40 95       	com	r20
   1ca1e:	50 95       	com	r21
   1ca20:	21 95       	neg	r18
   1ca22:	3f 4f       	sbci	r19, 0xFF	; 255
   1ca24:	4f 4f       	sbci	r20, 0xFF	; 255
   1ca26:	5f 4f       	sbci	r21, 0xFF	; 255
   1ca28:	6f 4f       	sbci	r22, 0xFF	; 255
   1ca2a:	7f 4f       	sbci	r23, 0xFF	; 255
   1ca2c:	8f 4f       	sbci	r24, 0xFF	; 255
   1ca2e:	9f 4f       	sbci	r25, 0xFF	; 255
   1ca30:	08 95       	ret

0001ca32 <__prologue_saves__>:
   1ca32:	2f 92       	push	r2
   1ca34:	3f 92       	push	r3
   1ca36:	4f 92       	push	r4
   1ca38:	5f 92       	push	r5
   1ca3a:	6f 92       	push	r6
   1ca3c:	7f 92       	push	r7
   1ca3e:	8f 92       	push	r8
   1ca40:	9f 92       	push	r9
   1ca42:	af 92       	push	r10
   1ca44:	bf 92       	push	r11
   1ca46:	cf 92       	push	r12
   1ca48:	df 92       	push	r13
   1ca4a:	ef 92       	push	r14
   1ca4c:	ff 92       	push	r15
   1ca4e:	0f 93       	push	r16
   1ca50:	1f 93       	push	r17
   1ca52:	cf 93       	push	r28
   1ca54:	df 93       	push	r29
   1ca56:	cd b7       	in	r28, 0x3d	; 61
   1ca58:	de b7       	in	r29, 0x3e	; 62
   1ca5a:	ca 1b       	sub	r28, r26
   1ca5c:	db 0b       	sbc	r29, r27
   1ca5e:	0f b6       	in	r0, 0x3f	; 63
   1ca60:	f8 94       	cli
   1ca62:	de bf       	out	0x3e, r29	; 62
   1ca64:	0f be       	out	0x3f, r0	; 63
   1ca66:	cd bf       	out	0x3d, r28	; 61
   1ca68:	09 94       	ijmp

0001ca6a <__epilogue_restores__>:
   1ca6a:	2a 88       	ldd	r2, Y+18	; 0x12
   1ca6c:	39 88       	ldd	r3, Y+17	; 0x11
   1ca6e:	48 88       	ldd	r4, Y+16	; 0x10
   1ca70:	5f 84       	ldd	r5, Y+15	; 0x0f
   1ca72:	6e 84       	ldd	r6, Y+14	; 0x0e
   1ca74:	7d 84       	ldd	r7, Y+13	; 0x0d
   1ca76:	8c 84       	ldd	r8, Y+12	; 0x0c
   1ca78:	9b 84       	ldd	r9, Y+11	; 0x0b
   1ca7a:	aa 84       	ldd	r10, Y+10	; 0x0a
   1ca7c:	b9 84       	ldd	r11, Y+9	; 0x09
   1ca7e:	c8 84       	ldd	r12, Y+8	; 0x08
   1ca80:	df 80       	ldd	r13, Y+7	; 0x07
   1ca82:	ee 80       	ldd	r14, Y+6	; 0x06
   1ca84:	fd 80       	ldd	r15, Y+5	; 0x05
   1ca86:	0c 81       	ldd	r16, Y+4	; 0x04
   1ca88:	1b 81       	ldd	r17, Y+3	; 0x03
   1ca8a:	aa 81       	ldd	r26, Y+2	; 0x02
   1ca8c:	b9 81       	ldd	r27, Y+1	; 0x01
   1ca8e:	ce 0f       	add	r28, r30
   1ca90:	d1 1d       	adc	r29, r1
   1ca92:	0f b6       	in	r0, 0x3f	; 63
   1ca94:	f8 94       	cli
   1ca96:	de bf       	out	0x3e, r29	; 62
   1ca98:	0f be       	out	0x3f, r0	; 63
   1ca9a:	cd bf       	out	0x3d, r28	; 61
   1ca9c:	ed 01       	movw	r28, r26
   1ca9e:	08 95       	ret

0001caa0 <__xload_1>:
   1caa0:	57 fd       	sbrc	r21, 7
   1caa2:	03 c0       	rjmp	.+6      	; 0x1caaa <__xload_1+0xa>
   1caa4:	5b bf       	out	0x3b, r21	; 59
   1caa6:	67 91       	elpm	r22, Z+
   1caa8:	08 95       	ret
   1caaa:	60 81       	ld	r22, Z
   1caac:	08 95       	ret

0001caae <__cmpdi2_s8>:
   1caae:	00 24       	eor	r0, r0
   1cab0:	a7 fd       	sbrc	r26, 7
   1cab2:	00 94       	com	r0
   1cab4:	2a 17       	cp	r18, r26
   1cab6:	30 05       	cpc	r19, r0
   1cab8:	40 05       	cpc	r20, r0
   1caba:	50 05       	cpc	r21, r0
   1cabc:	60 05       	cpc	r22, r0
   1cabe:	70 05       	cpc	r23, r0
   1cac0:	80 05       	cpc	r24, r0
   1cac2:	90 05       	cpc	r25, r0
   1cac4:	08 95       	ret

0001cac6 <__subsf3>:
   1cac6:	50 58       	subi	r21, 0x80	; 128

0001cac8 <__addsf3>:
   1cac8:	bb 27       	eor	r27, r27
   1caca:	aa 27       	eor	r26, r26
   1cacc:	0e d0       	rcall	.+28     	; 0x1caea <__addsf3x>
   1cace:	75 c1       	rjmp	.+746    	; 0x1cdba <__fp_round>
   1cad0:	66 d1       	rcall	.+716    	; 0x1cd9e <__fp_pscA>
   1cad2:	30 f0       	brcs	.+12     	; 0x1cae0 <__addsf3+0x18>
   1cad4:	6b d1       	rcall	.+726    	; 0x1cdac <__fp_pscB>
   1cad6:	20 f0       	brcs	.+8      	; 0x1cae0 <__addsf3+0x18>
   1cad8:	31 f4       	brne	.+12     	; 0x1cae6 <__addsf3+0x1e>
   1cada:	9f 3f       	cpi	r25, 0xFF	; 255
   1cadc:	11 f4       	brne	.+4      	; 0x1cae2 <__addsf3+0x1a>
   1cade:	1e f4       	brtc	.+6      	; 0x1cae6 <__addsf3+0x1e>
   1cae0:	5b c1       	rjmp	.+694    	; 0x1cd98 <__fp_nan>
   1cae2:	0e f4       	brtc	.+2      	; 0x1cae6 <__addsf3+0x1e>
   1cae4:	e0 95       	com	r30
   1cae6:	e7 fb       	bst	r30, 7
   1cae8:	51 c1       	rjmp	.+674    	; 0x1cd8c <__fp_inf>

0001caea <__addsf3x>:
   1caea:	e9 2f       	mov	r30, r25
   1caec:	77 d1       	rcall	.+750    	; 0x1cddc <__fp_split3>
   1caee:	80 f3       	brcs	.-32     	; 0x1cad0 <__addsf3+0x8>
   1caf0:	ba 17       	cp	r27, r26
   1caf2:	62 07       	cpc	r22, r18
   1caf4:	73 07       	cpc	r23, r19
   1caf6:	84 07       	cpc	r24, r20
   1caf8:	95 07       	cpc	r25, r21
   1cafa:	18 f0       	brcs	.+6      	; 0x1cb02 <__addsf3x+0x18>
   1cafc:	71 f4       	brne	.+28     	; 0x1cb1a <__addsf3x+0x30>
   1cafe:	9e f5       	brtc	.+102    	; 0x1cb66 <__addsf3x+0x7c>
   1cb00:	8f c1       	rjmp	.+798    	; 0x1ce20 <__fp_zero>
   1cb02:	0e f4       	brtc	.+2      	; 0x1cb06 <__addsf3x+0x1c>
   1cb04:	e0 95       	com	r30
   1cb06:	0b 2e       	mov	r0, r27
   1cb08:	ba 2f       	mov	r27, r26
   1cb0a:	a0 2d       	mov	r26, r0
   1cb0c:	0b 01       	movw	r0, r22
   1cb0e:	b9 01       	movw	r22, r18
   1cb10:	90 01       	movw	r18, r0
   1cb12:	0c 01       	movw	r0, r24
   1cb14:	ca 01       	movw	r24, r20
   1cb16:	a0 01       	movw	r20, r0
   1cb18:	11 24       	eor	r1, r1
   1cb1a:	ff 27       	eor	r31, r31
   1cb1c:	59 1b       	sub	r21, r25
   1cb1e:	99 f0       	breq	.+38     	; 0x1cb46 <__addsf3x+0x5c>
   1cb20:	59 3f       	cpi	r21, 0xF9	; 249
   1cb22:	50 f4       	brcc	.+20     	; 0x1cb38 <__addsf3x+0x4e>
   1cb24:	50 3e       	cpi	r21, 0xE0	; 224
   1cb26:	68 f1       	brcs	.+90     	; 0x1cb82 <__addsf3x+0x98>
   1cb28:	1a 16       	cp	r1, r26
   1cb2a:	f0 40       	sbci	r31, 0x00	; 0
   1cb2c:	a2 2f       	mov	r26, r18
   1cb2e:	23 2f       	mov	r18, r19
   1cb30:	34 2f       	mov	r19, r20
   1cb32:	44 27       	eor	r20, r20
   1cb34:	58 5f       	subi	r21, 0xF8	; 248
   1cb36:	f3 cf       	rjmp	.-26     	; 0x1cb1e <__addsf3x+0x34>
   1cb38:	46 95       	lsr	r20
   1cb3a:	37 95       	ror	r19
   1cb3c:	27 95       	ror	r18
   1cb3e:	a7 95       	ror	r26
   1cb40:	f0 40       	sbci	r31, 0x00	; 0
   1cb42:	53 95       	inc	r21
   1cb44:	c9 f7       	brne	.-14     	; 0x1cb38 <__addsf3x+0x4e>
   1cb46:	7e f4       	brtc	.+30     	; 0x1cb66 <__addsf3x+0x7c>
   1cb48:	1f 16       	cp	r1, r31
   1cb4a:	ba 0b       	sbc	r27, r26
   1cb4c:	62 0b       	sbc	r22, r18
   1cb4e:	73 0b       	sbc	r23, r19
   1cb50:	84 0b       	sbc	r24, r20
   1cb52:	ba f0       	brmi	.+46     	; 0x1cb82 <__addsf3x+0x98>
   1cb54:	91 50       	subi	r25, 0x01	; 1
   1cb56:	a1 f0       	breq	.+40     	; 0x1cb80 <__addsf3x+0x96>
   1cb58:	ff 0f       	add	r31, r31
   1cb5a:	bb 1f       	adc	r27, r27
   1cb5c:	66 1f       	adc	r22, r22
   1cb5e:	77 1f       	adc	r23, r23
   1cb60:	88 1f       	adc	r24, r24
   1cb62:	c2 f7       	brpl	.-16     	; 0x1cb54 <__addsf3x+0x6a>
   1cb64:	0e c0       	rjmp	.+28     	; 0x1cb82 <__addsf3x+0x98>
   1cb66:	ba 0f       	add	r27, r26
   1cb68:	62 1f       	adc	r22, r18
   1cb6a:	73 1f       	adc	r23, r19
   1cb6c:	84 1f       	adc	r24, r20
   1cb6e:	48 f4       	brcc	.+18     	; 0x1cb82 <__addsf3x+0x98>
   1cb70:	87 95       	ror	r24
   1cb72:	77 95       	ror	r23
   1cb74:	67 95       	ror	r22
   1cb76:	b7 95       	ror	r27
   1cb78:	f7 95       	ror	r31
   1cb7a:	9e 3f       	cpi	r25, 0xFE	; 254
   1cb7c:	08 f0       	brcs	.+2      	; 0x1cb80 <__addsf3x+0x96>
   1cb7e:	b3 cf       	rjmp	.-154    	; 0x1cae6 <__addsf3+0x1e>
   1cb80:	93 95       	inc	r25
   1cb82:	88 0f       	add	r24, r24
   1cb84:	08 f0       	brcs	.+2      	; 0x1cb88 <__addsf3x+0x9e>
   1cb86:	99 27       	eor	r25, r25
   1cb88:	ee 0f       	add	r30, r30
   1cb8a:	97 95       	ror	r25
   1cb8c:	87 95       	ror	r24
   1cb8e:	08 95       	ret

0001cb90 <__cmpsf2>:
   1cb90:	d9 d0       	rcall	.+434    	; 0x1cd44 <__fp_cmp>
   1cb92:	08 f4       	brcc	.+2      	; 0x1cb96 <__cmpsf2+0x6>
   1cb94:	81 e0       	ldi	r24, 0x01	; 1
   1cb96:	08 95       	ret

0001cb98 <__divsf3>:
   1cb98:	0c d0       	rcall	.+24     	; 0x1cbb2 <__divsf3x>
   1cb9a:	0f c1       	rjmp	.+542    	; 0x1cdba <__fp_round>
   1cb9c:	07 d1       	rcall	.+526    	; 0x1cdac <__fp_pscB>
   1cb9e:	40 f0       	brcs	.+16     	; 0x1cbb0 <__divsf3+0x18>
   1cba0:	fe d0       	rcall	.+508    	; 0x1cd9e <__fp_pscA>
   1cba2:	30 f0       	brcs	.+12     	; 0x1cbb0 <__divsf3+0x18>
   1cba4:	21 f4       	brne	.+8      	; 0x1cbae <__divsf3+0x16>
   1cba6:	5f 3f       	cpi	r21, 0xFF	; 255
   1cba8:	19 f0       	breq	.+6      	; 0x1cbb0 <__divsf3+0x18>
   1cbaa:	f0 c0       	rjmp	.+480    	; 0x1cd8c <__fp_inf>
   1cbac:	51 11       	cpse	r21, r1
   1cbae:	39 c1       	rjmp	.+626    	; 0x1ce22 <__fp_szero>
   1cbb0:	f3 c0       	rjmp	.+486    	; 0x1cd98 <__fp_nan>

0001cbb2 <__divsf3x>:
   1cbb2:	14 d1       	rcall	.+552    	; 0x1cddc <__fp_split3>
   1cbb4:	98 f3       	brcs	.-26     	; 0x1cb9c <__divsf3+0x4>

0001cbb6 <__divsf3_pse>:
   1cbb6:	99 23       	and	r25, r25
   1cbb8:	c9 f3       	breq	.-14     	; 0x1cbac <__divsf3+0x14>
   1cbba:	55 23       	and	r21, r21
   1cbbc:	b1 f3       	breq	.-20     	; 0x1cbaa <__divsf3+0x12>
   1cbbe:	95 1b       	sub	r25, r21
   1cbc0:	55 0b       	sbc	r21, r21
   1cbc2:	bb 27       	eor	r27, r27
   1cbc4:	aa 27       	eor	r26, r26
   1cbc6:	62 17       	cp	r22, r18
   1cbc8:	73 07       	cpc	r23, r19
   1cbca:	84 07       	cpc	r24, r20
   1cbcc:	38 f0       	brcs	.+14     	; 0x1cbdc <__divsf3_pse+0x26>
   1cbce:	9f 5f       	subi	r25, 0xFF	; 255
   1cbd0:	5f 4f       	sbci	r21, 0xFF	; 255
   1cbd2:	22 0f       	add	r18, r18
   1cbd4:	33 1f       	adc	r19, r19
   1cbd6:	44 1f       	adc	r20, r20
   1cbd8:	aa 1f       	adc	r26, r26
   1cbda:	a9 f3       	breq	.-22     	; 0x1cbc6 <__divsf3_pse+0x10>
   1cbdc:	33 d0       	rcall	.+102    	; 0x1cc44 <__divsf3_pse+0x8e>
   1cbde:	0e 2e       	mov	r0, r30
   1cbe0:	3a f0       	brmi	.+14     	; 0x1cbf0 <__divsf3_pse+0x3a>
   1cbe2:	e0 e8       	ldi	r30, 0x80	; 128
   1cbe4:	30 d0       	rcall	.+96     	; 0x1cc46 <__divsf3_pse+0x90>
   1cbe6:	91 50       	subi	r25, 0x01	; 1
   1cbe8:	50 40       	sbci	r21, 0x00	; 0
   1cbea:	e6 95       	lsr	r30
   1cbec:	00 1c       	adc	r0, r0
   1cbee:	ca f7       	brpl	.-14     	; 0x1cbe2 <__divsf3_pse+0x2c>
   1cbf0:	29 d0       	rcall	.+82     	; 0x1cc44 <__divsf3_pse+0x8e>
   1cbf2:	fe 2f       	mov	r31, r30
   1cbf4:	27 d0       	rcall	.+78     	; 0x1cc44 <__divsf3_pse+0x8e>
   1cbf6:	66 0f       	add	r22, r22
   1cbf8:	77 1f       	adc	r23, r23
   1cbfa:	88 1f       	adc	r24, r24
   1cbfc:	bb 1f       	adc	r27, r27
   1cbfe:	26 17       	cp	r18, r22
   1cc00:	37 07       	cpc	r19, r23
   1cc02:	48 07       	cpc	r20, r24
   1cc04:	ab 07       	cpc	r26, r27
   1cc06:	b0 e8       	ldi	r27, 0x80	; 128
   1cc08:	09 f0       	breq	.+2      	; 0x1cc0c <__divsf3_pse+0x56>
   1cc0a:	bb 0b       	sbc	r27, r27
   1cc0c:	80 2d       	mov	r24, r0
   1cc0e:	bf 01       	movw	r22, r30
   1cc10:	ff 27       	eor	r31, r31
   1cc12:	93 58       	subi	r25, 0x83	; 131
   1cc14:	5f 4f       	sbci	r21, 0xFF	; 255
   1cc16:	2a f0       	brmi	.+10     	; 0x1cc22 <__divsf3_pse+0x6c>
   1cc18:	9e 3f       	cpi	r25, 0xFE	; 254
   1cc1a:	51 05       	cpc	r21, r1
   1cc1c:	68 f0       	brcs	.+26     	; 0x1cc38 <__divsf3_pse+0x82>
   1cc1e:	b6 c0       	rjmp	.+364    	; 0x1cd8c <__fp_inf>
   1cc20:	00 c1       	rjmp	.+512    	; 0x1ce22 <__fp_szero>
   1cc22:	5f 3f       	cpi	r21, 0xFF	; 255
   1cc24:	ec f3       	brlt	.-6      	; 0x1cc20 <__divsf3_pse+0x6a>
   1cc26:	98 3e       	cpi	r25, 0xE8	; 232
   1cc28:	dc f3       	brlt	.-10     	; 0x1cc20 <__divsf3_pse+0x6a>
   1cc2a:	86 95       	lsr	r24
   1cc2c:	77 95       	ror	r23
   1cc2e:	67 95       	ror	r22
   1cc30:	b7 95       	ror	r27
   1cc32:	f7 95       	ror	r31
   1cc34:	9f 5f       	subi	r25, 0xFF	; 255
   1cc36:	c9 f7       	brne	.-14     	; 0x1cc2a <__divsf3_pse+0x74>
   1cc38:	88 0f       	add	r24, r24
   1cc3a:	91 1d       	adc	r25, r1
   1cc3c:	96 95       	lsr	r25
   1cc3e:	87 95       	ror	r24
   1cc40:	97 f9       	bld	r25, 7
   1cc42:	08 95       	ret
   1cc44:	e1 e0       	ldi	r30, 0x01	; 1
   1cc46:	66 0f       	add	r22, r22
   1cc48:	77 1f       	adc	r23, r23
   1cc4a:	88 1f       	adc	r24, r24
   1cc4c:	bb 1f       	adc	r27, r27
   1cc4e:	62 17       	cp	r22, r18
   1cc50:	73 07       	cpc	r23, r19
   1cc52:	84 07       	cpc	r24, r20
   1cc54:	ba 07       	cpc	r27, r26
   1cc56:	20 f0       	brcs	.+8      	; 0x1cc60 <__divsf3_pse+0xaa>
   1cc58:	62 1b       	sub	r22, r18
   1cc5a:	73 0b       	sbc	r23, r19
   1cc5c:	84 0b       	sbc	r24, r20
   1cc5e:	ba 0b       	sbc	r27, r26
   1cc60:	ee 1f       	adc	r30, r30
   1cc62:	88 f7       	brcc	.-30     	; 0x1cc46 <__divsf3_pse+0x90>
   1cc64:	e0 95       	com	r30
   1cc66:	08 95       	ret

0001cc68 <__fixsfsi>:
   1cc68:	04 d0       	rcall	.+8      	; 0x1cc72 <__fixunssfsi>
   1cc6a:	68 94       	set
   1cc6c:	b1 11       	cpse	r27, r1
   1cc6e:	d9 c0       	rjmp	.+434    	; 0x1ce22 <__fp_szero>
   1cc70:	08 95       	ret

0001cc72 <__fixunssfsi>:
   1cc72:	bc d0       	rcall	.+376    	; 0x1cdec <__fp_splitA>
   1cc74:	88 f0       	brcs	.+34     	; 0x1cc98 <__fixunssfsi+0x26>
   1cc76:	9f 57       	subi	r25, 0x7F	; 127
   1cc78:	90 f0       	brcs	.+36     	; 0x1cc9e <__fixunssfsi+0x2c>
   1cc7a:	b9 2f       	mov	r27, r25
   1cc7c:	99 27       	eor	r25, r25
   1cc7e:	b7 51       	subi	r27, 0x17	; 23
   1cc80:	a0 f0       	brcs	.+40     	; 0x1ccaa <__fixunssfsi+0x38>
   1cc82:	d1 f0       	breq	.+52     	; 0x1ccb8 <__fixunssfsi+0x46>
   1cc84:	66 0f       	add	r22, r22
   1cc86:	77 1f       	adc	r23, r23
   1cc88:	88 1f       	adc	r24, r24
   1cc8a:	99 1f       	adc	r25, r25
   1cc8c:	1a f0       	brmi	.+6      	; 0x1cc94 <__fixunssfsi+0x22>
   1cc8e:	ba 95       	dec	r27
   1cc90:	c9 f7       	brne	.-14     	; 0x1cc84 <__fixunssfsi+0x12>
   1cc92:	12 c0       	rjmp	.+36     	; 0x1ccb8 <__fixunssfsi+0x46>
   1cc94:	b1 30       	cpi	r27, 0x01	; 1
   1cc96:	81 f0       	breq	.+32     	; 0x1ccb8 <__fixunssfsi+0x46>
   1cc98:	c3 d0       	rcall	.+390    	; 0x1ce20 <__fp_zero>
   1cc9a:	b1 e0       	ldi	r27, 0x01	; 1
   1cc9c:	08 95       	ret
   1cc9e:	c0 c0       	rjmp	.+384    	; 0x1ce20 <__fp_zero>
   1cca0:	67 2f       	mov	r22, r23
   1cca2:	78 2f       	mov	r23, r24
   1cca4:	88 27       	eor	r24, r24
   1cca6:	b8 5f       	subi	r27, 0xF8	; 248
   1cca8:	39 f0       	breq	.+14     	; 0x1ccb8 <__fixunssfsi+0x46>
   1ccaa:	b9 3f       	cpi	r27, 0xF9	; 249
   1ccac:	cc f3       	brlt	.-14     	; 0x1cca0 <__fixunssfsi+0x2e>
   1ccae:	86 95       	lsr	r24
   1ccb0:	77 95       	ror	r23
   1ccb2:	67 95       	ror	r22
   1ccb4:	b3 95       	inc	r27
   1ccb6:	d9 f7       	brne	.-10     	; 0x1ccae <__fixunssfsi+0x3c>
   1ccb8:	3e f4       	brtc	.+14     	; 0x1ccc8 <__fixunssfsi+0x56>
   1ccba:	90 95       	com	r25
   1ccbc:	80 95       	com	r24
   1ccbe:	70 95       	com	r23
   1ccc0:	61 95       	neg	r22
   1ccc2:	7f 4f       	sbci	r23, 0xFF	; 255
   1ccc4:	8f 4f       	sbci	r24, 0xFF	; 255
   1ccc6:	9f 4f       	sbci	r25, 0xFF	; 255
   1ccc8:	08 95       	ret

0001ccca <__floatunsisf>:
   1ccca:	e8 94       	clt
   1cccc:	09 c0       	rjmp	.+18     	; 0x1cce0 <__floatsisf+0x12>

0001ccce <__floatsisf>:
   1ccce:	97 fb       	bst	r25, 7
   1ccd0:	3e f4       	brtc	.+14     	; 0x1cce0 <__floatsisf+0x12>
   1ccd2:	90 95       	com	r25
   1ccd4:	80 95       	com	r24
   1ccd6:	70 95       	com	r23
   1ccd8:	61 95       	neg	r22
   1ccda:	7f 4f       	sbci	r23, 0xFF	; 255
   1ccdc:	8f 4f       	sbci	r24, 0xFF	; 255
   1ccde:	9f 4f       	sbci	r25, 0xFF	; 255
   1cce0:	99 23       	and	r25, r25
   1cce2:	a9 f0       	breq	.+42     	; 0x1cd0e <__floatsisf+0x40>
   1cce4:	f9 2f       	mov	r31, r25
   1cce6:	96 e9       	ldi	r25, 0x96	; 150
   1cce8:	bb 27       	eor	r27, r27
   1ccea:	93 95       	inc	r25
   1ccec:	f6 95       	lsr	r31
   1ccee:	87 95       	ror	r24
   1ccf0:	77 95       	ror	r23
   1ccf2:	67 95       	ror	r22
   1ccf4:	b7 95       	ror	r27
   1ccf6:	f1 11       	cpse	r31, r1
   1ccf8:	f8 cf       	rjmp	.-16     	; 0x1ccea <__floatsisf+0x1c>
   1ccfa:	fa f4       	brpl	.+62     	; 0x1cd3a <__floatsisf+0x6c>
   1ccfc:	bb 0f       	add	r27, r27
   1ccfe:	11 f4       	brne	.+4      	; 0x1cd04 <__floatsisf+0x36>
   1cd00:	60 ff       	sbrs	r22, 0
   1cd02:	1b c0       	rjmp	.+54     	; 0x1cd3a <__floatsisf+0x6c>
   1cd04:	6f 5f       	subi	r22, 0xFF	; 255
   1cd06:	7f 4f       	sbci	r23, 0xFF	; 255
   1cd08:	8f 4f       	sbci	r24, 0xFF	; 255
   1cd0a:	9f 4f       	sbci	r25, 0xFF	; 255
   1cd0c:	16 c0       	rjmp	.+44     	; 0x1cd3a <__floatsisf+0x6c>
   1cd0e:	88 23       	and	r24, r24
   1cd10:	11 f0       	breq	.+4      	; 0x1cd16 <__floatsisf+0x48>
   1cd12:	96 e9       	ldi	r25, 0x96	; 150
   1cd14:	11 c0       	rjmp	.+34     	; 0x1cd38 <__floatsisf+0x6a>
   1cd16:	77 23       	and	r23, r23
   1cd18:	21 f0       	breq	.+8      	; 0x1cd22 <__floatsisf+0x54>
   1cd1a:	9e e8       	ldi	r25, 0x8E	; 142
   1cd1c:	87 2f       	mov	r24, r23
   1cd1e:	76 2f       	mov	r23, r22
   1cd20:	05 c0       	rjmp	.+10     	; 0x1cd2c <__floatsisf+0x5e>
   1cd22:	66 23       	and	r22, r22
   1cd24:	71 f0       	breq	.+28     	; 0x1cd42 <__floatsisf+0x74>
   1cd26:	96 e8       	ldi	r25, 0x86	; 134
   1cd28:	86 2f       	mov	r24, r22
   1cd2a:	70 e0       	ldi	r23, 0x00	; 0
   1cd2c:	60 e0       	ldi	r22, 0x00	; 0
   1cd2e:	2a f0       	brmi	.+10     	; 0x1cd3a <__floatsisf+0x6c>
   1cd30:	9a 95       	dec	r25
   1cd32:	66 0f       	add	r22, r22
   1cd34:	77 1f       	adc	r23, r23
   1cd36:	88 1f       	adc	r24, r24
   1cd38:	da f7       	brpl	.-10     	; 0x1cd30 <__floatsisf+0x62>
   1cd3a:	88 0f       	add	r24, r24
   1cd3c:	96 95       	lsr	r25
   1cd3e:	87 95       	ror	r24
   1cd40:	97 f9       	bld	r25, 7
   1cd42:	08 95       	ret

0001cd44 <__fp_cmp>:
   1cd44:	99 0f       	add	r25, r25
   1cd46:	00 08       	sbc	r0, r0
   1cd48:	55 0f       	add	r21, r21
   1cd4a:	aa 0b       	sbc	r26, r26
   1cd4c:	e0 e8       	ldi	r30, 0x80	; 128
   1cd4e:	fe ef       	ldi	r31, 0xFE	; 254
   1cd50:	16 16       	cp	r1, r22
   1cd52:	17 06       	cpc	r1, r23
   1cd54:	e8 07       	cpc	r30, r24
   1cd56:	f9 07       	cpc	r31, r25
   1cd58:	c0 f0       	brcs	.+48     	; 0x1cd8a <__fp_cmp+0x46>
   1cd5a:	12 16       	cp	r1, r18
   1cd5c:	13 06       	cpc	r1, r19
   1cd5e:	e4 07       	cpc	r30, r20
   1cd60:	f5 07       	cpc	r31, r21
   1cd62:	98 f0       	brcs	.+38     	; 0x1cd8a <__fp_cmp+0x46>
   1cd64:	62 1b       	sub	r22, r18
   1cd66:	73 0b       	sbc	r23, r19
   1cd68:	84 0b       	sbc	r24, r20
   1cd6a:	95 0b       	sbc	r25, r21
   1cd6c:	39 f4       	brne	.+14     	; 0x1cd7c <__fp_cmp+0x38>
   1cd6e:	0a 26       	eor	r0, r26
   1cd70:	61 f0       	breq	.+24     	; 0x1cd8a <__fp_cmp+0x46>
   1cd72:	23 2b       	or	r18, r19
   1cd74:	24 2b       	or	r18, r20
   1cd76:	25 2b       	or	r18, r21
   1cd78:	21 f4       	brne	.+8      	; 0x1cd82 <__fp_cmp+0x3e>
   1cd7a:	08 95       	ret
   1cd7c:	0a 26       	eor	r0, r26
   1cd7e:	09 f4       	brne	.+2      	; 0x1cd82 <__fp_cmp+0x3e>
   1cd80:	a1 40       	sbci	r26, 0x01	; 1
   1cd82:	a6 95       	lsr	r26
   1cd84:	8f ef       	ldi	r24, 0xFF	; 255
   1cd86:	81 1d       	adc	r24, r1
   1cd88:	81 1d       	adc	r24, r1
   1cd8a:	08 95       	ret

0001cd8c <__fp_inf>:
   1cd8c:	97 f9       	bld	r25, 7
   1cd8e:	9f 67       	ori	r25, 0x7F	; 127
   1cd90:	80 e8       	ldi	r24, 0x80	; 128
   1cd92:	70 e0       	ldi	r23, 0x00	; 0
   1cd94:	60 e0       	ldi	r22, 0x00	; 0
   1cd96:	08 95       	ret

0001cd98 <__fp_nan>:
   1cd98:	9f ef       	ldi	r25, 0xFF	; 255
   1cd9a:	80 ec       	ldi	r24, 0xC0	; 192
   1cd9c:	08 95       	ret

0001cd9e <__fp_pscA>:
   1cd9e:	00 24       	eor	r0, r0
   1cda0:	0a 94       	dec	r0
   1cda2:	16 16       	cp	r1, r22
   1cda4:	17 06       	cpc	r1, r23
   1cda6:	18 06       	cpc	r1, r24
   1cda8:	09 06       	cpc	r0, r25
   1cdaa:	08 95       	ret

0001cdac <__fp_pscB>:
   1cdac:	00 24       	eor	r0, r0
   1cdae:	0a 94       	dec	r0
   1cdb0:	12 16       	cp	r1, r18
   1cdb2:	13 06       	cpc	r1, r19
   1cdb4:	14 06       	cpc	r1, r20
   1cdb6:	05 06       	cpc	r0, r21
   1cdb8:	08 95       	ret

0001cdba <__fp_round>:
   1cdba:	09 2e       	mov	r0, r25
   1cdbc:	03 94       	inc	r0
   1cdbe:	00 0c       	add	r0, r0
   1cdc0:	11 f4       	brne	.+4      	; 0x1cdc6 <__fp_round+0xc>
   1cdc2:	88 23       	and	r24, r24
   1cdc4:	52 f0       	brmi	.+20     	; 0x1cdda <__fp_round+0x20>
   1cdc6:	bb 0f       	add	r27, r27
   1cdc8:	40 f4       	brcc	.+16     	; 0x1cdda <__fp_round+0x20>
   1cdca:	bf 2b       	or	r27, r31
   1cdcc:	11 f4       	brne	.+4      	; 0x1cdd2 <__fp_round+0x18>
   1cdce:	60 ff       	sbrs	r22, 0
   1cdd0:	04 c0       	rjmp	.+8      	; 0x1cdda <__fp_round+0x20>
   1cdd2:	6f 5f       	subi	r22, 0xFF	; 255
   1cdd4:	7f 4f       	sbci	r23, 0xFF	; 255
   1cdd6:	8f 4f       	sbci	r24, 0xFF	; 255
   1cdd8:	9f 4f       	sbci	r25, 0xFF	; 255
   1cdda:	08 95       	ret

0001cddc <__fp_split3>:
   1cddc:	57 fd       	sbrc	r21, 7
   1cdde:	90 58       	subi	r25, 0x80	; 128
   1cde0:	44 0f       	add	r20, r20
   1cde2:	55 1f       	adc	r21, r21
   1cde4:	59 f0       	breq	.+22     	; 0x1cdfc <__fp_splitA+0x10>
   1cde6:	5f 3f       	cpi	r21, 0xFF	; 255
   1cde8:	71 f0       	breq	.+28     	; 0x1ce06 <__fp_splitA+0x1a>
   1cdea:	47 95       	ror	r20

0001cdec <__fp_splitA>:
   1cdec:	88 0f       	add	r24, r24
   1cdee:	97 fb       	bst	r25, 7
   1cdf0:	99 1f       	adc	r25, r25
   1cdf2:	61 f0       	breq	.+24     	; 0x1ce0c <__fp_splitA+0x20>
   1cdf4:	9f 3f       	cpi	r25, 0xFF	; 255
   1cdf6:	79 f0       	breq	.+30     	; 0x1ce16 <__fp_splitA+0x2a>
   1cdf8:	87 95       	ror	r24
   1cdfa:	08 95       	ret
   1cdfc:	12 16       	cp	r1, r18
   1cdfe:	13 06       	cpc	r1, r19
   1ce00:	14 06       	cpc	r1, r20
   1ce02:	55 1f       	adc	r21, r21
   1ce04:	f2 cf       	rjmp	.-28     	; 0x1cdea <__fp_split3+0xe>
   1ce06:	46 95       	lsr	r20
   1ce08:	f1 df       	rcall	.-30     	; 0x1cdec <__fp_splitA>
   1ce0a:	08 c0       	rjmp	.+16     	; 0x1ce1c <__fp_splitA+0x30>
   1ce0c:	16 16       	cp	r1, r22
   1ce0e:	17 06       	cpc	r1, r23
   1ce10:	18 06       	cpc	r1, r24
   1ce12:	99 1f       	adc	r25, r25
   1ce14:	f1 cf       	rjmp	.-30     	; 0x1cdf8 <__fp_splitA+0xc>
   1ce16:	86 95       	lsr	r24
   1ce18:	71 05       	cpc	r23, r1
   1ce1a:	61 05       	cpc	r22, r1
   1ce1c:	08 94       	sec
   1ce1e:	08 95       	ret

0001ce20 <__fp_zero>:
   1ce20:	e8 94       	clt

0001ce22 <__fp_szero>:
   1ce22:	bb 27       	eor	r27, r27
   1ce24:	66 27       	eor	r22, r22
   1ce26:	77 27       	eor	r23, r23
   1ce28:	cb 01       	movw	r24, r22
   1ce2a:	97 f9       	bld	r25, 7
   1ce2c:	08 95       	ret

0001ce2e <__gesf2>:
   1ce2e:	8a df       	rcall	.-236    	; 0x1cd44 <__fp_cmp>
   1ce30:	08 f4       	brcc	.+2      	; 0x1ce34 <__gesf2+0x6>
   1ce32:	8f ef       	ldi	r24, 0xFF	; 255
   1ce34:	08 95       	ret

0001ce36 <__mulsf3>:
   1ce36:	0b d0       	rcall	.+22     	; 0x1ce4e <__mulsf3x>
   1ce38:	c0 cf       	rjmp	.-128    	; 0x1cdba <__fp_round>
   1ce3a:	b1 df       	rcall	.-158    	; 0x1cd9e <__fp_pscA>
   1ce3c:	28 f0       	brcs	.+10     	; 0x1ce48 <__mulsf3+0x12>
   1ce3e:	b6 df       	rcall	.-148    	; 0x1cdac <__fp_pscB>
   1ce40:	18 f0       	brcs	.+6      	; 0x1ce48 <__mulsf3+0x12>
   1ce42:	95 23       	and	r25, r21
   1ce44:	09 f0       	breq	.+2      	; 0x1ce48 <__mulsf3+0x12>
   1ce46:	a2 cf       	rjmp	.-188    	; 0x1cd8c <__fp_inf>
   1ce48:	a7 cf       	rjmp	.-178    	; 0x1cd98 <__fp_nan>
   1ce4a:	11 24       	eor	r1, r1
   1ce4c:	ea cf       	rjmp	.-44     	; 0x1ce22 <__fp_szero>

0001ce4e <__mulsf3x>:
   1ce4e:	c6 df       	rcall	.-116    	; 0x1cddc <__fp_split3>
   1ce50:	a0 f3       	brcs	.-24     	; 0x1ce3a <__mulsf3+0x4>

0001ce52 <__mulsf3_pse>:
   1ce52:	95 9f       	mul	r25, r21
   1ce54:	d1 f3       	breq	.-12     	; 0x1ce4a <__mulsf3+0x14>
   1ce56:	95 0f       	add	r25, r21
   1ce58:	50 e0       	ldi	r21, 0x00	; 0
   1ce5a:	55 1f       	adc	r21, r21
   1ce5c:	62 9f       	mul	r22, r18
   1ce5e:	f0 01       	movw	r30, r0
   1ce60:	72 9f       	mul	r23, r18
   1ce62:	bb 27       	eor	r27, r27
   1ce64:	f0 0d       	add	r31, r0
   1ce66:	b1 1d       	adc	r27, r1
   1ce68:	63 9f       	mul	r22, r19
   1ce6a:	aa 27       	eor	r26, r26
   1ce6c:	f0 0d       	add	r31, r0
   1ce6e:	b1 1d       	adc	r27, r1
   1ce70:	aa 1f       	adc	r26, r26
   1ce72:	64 9f       	mul	r22, r20
   1ce74:	66 27       	eor	r22, r22
   1ce76:	b0 0d       	add	r27, r0
   1ce78:	a1 1d       	adc	r26, r1
   1ce7a:	66 1f       	adc	r22, r22
   1ce7c:	82 9f       	mul	r24, r18
   1ce7e:	22 27       	eor	r18, r18
   1ce80:	b0 0d       	add	r27, r0
   1ce82:	a1 1d       	adc	r26, r1
   1ce84:	62 1f       	adc	r22, r18
   1ce86:	73 9f       	mul	r23, r19
   1ce88:	b0 0d       	add	r27, r0
   1ce8a:	a1 1d       	adc	r26, r1
   1ce8c:	62 1f       	adc	r22, r18
   1ce8e:	83 9f       	mul	r24, r19
   1ce90:	a0 0d       	add	r26, r0
   1ce92:	61 1d       	adc	r22, r1
   1ce94:	22 1f       	adc	r18, r18
   1ce96:	74 9f       	mul	r23, r20
   1ce98:	33 27       	eor	r19, r19
   1ce9a:	a0 0d       	add	r26, r0
   1ce9c:	61 1d       	adc	r22, r1
   1ce9e:	23 1f       	adc	r18, r19
   1cea0:	84 9f       	mul	r24, r20
   1cea2:	60 0d       	add	r22, r0
   1cea4:	21 1d       	adc	r18, r1
   1cea6:	82 2f       	mov	r24, r18
   1cea8:	76 2f       	mov	r23, r22
   1ceaa:	6a 2f       	mov	r22, r26
   1ceac:	11 24       	eor	r1, r1
   1ceae:	9f 57       	subi	r25, 0x7F	; 127
   1ceb0:	50 40       	sbci	r21, 0x00	; 0
   1ceb2:	8a f0       	brmi	.+34     	; 0x1ced6 <__mulsf3_pse+0x84>
   1ceb4:	e1 f0       	breq	.+56     	; 0x1ceee <__mulsf3_pse+0x9c>
   1ceb6:	88 23       	and	r24, r24
   1ceb8:	4a f0       	brmi	.+18     	; 0x1cecc <__mulsf3_pse+0x7a>
   1ceba:	ee 0f       	add	r30, r30
   1cebc:	ff 1f       	adc	r31, r31
   1cebe:	bb 1f       	adc	r27, r27
   1cec0:	66 1f       	adc	r22, r22
   1cec2:	77 1f       	adc	r23, r23
   1cec4:	88 1f       	adc	r24, r24
   1cec6:	91 50       	subi	r25, 0x01	; 1
   1cec8:	50 40       	sbci	r21, 0x00	; 0
   1ceca:	a9 f7       	brne	.-22     	; 0x1ceb6 <__mulsf3_pse+0x64>
   1cecc:	9e 3f       	cpi	r25, 0xFE	; 254
   1cece:	51 05       	cpc	r21, r1
   1ced0:	70 f0       	brcs	.+28     	; 0x1ceee <__mulsf3_pse+0x9c>
   1ced2:	5c cf       	rjmp	.-328    	; 0x1cd8c <__fp_inf>
   1ced4:	a6 cf       	rjmp	.-180    	; 0x1ce22 <__fp_szero>
   1ced6:	5f 3f       	cpi	r21, 0xFF	; 255
   1ced8:	ec f3       	brlt	.-6      	; 0x1ced4 <__mulsf3_pse+0x82>
   1ceda:	98 3e       	cpi	r25, 0xE8	; 232
   1cedc:	dc f3       	brlt	.-10     	; 0x1ced4 <__mulsf3_pse+0x82>
   1cede:	86 95       	lsr	r24
   1cee0:	77 95       	ror	r23
   1cee2:	67 95       	ror	r22
   1cee4:	b7 95       	ror	r27
   1cee6:	f7 95       	ror	r31
   1cee8:	e7 95       	ror	r30
   1ceea:	9f 5f       	subi	r25, 0xFF	; 255
   1ceec:	c1 f7       	brne	.-16     	; 0x1cede <__mulsf3_pse+0x8c>
   1ceee:	fe 2b       	or	r31, r30
   1cef0:	88 0f       	add	r24, r24
   1cef2:	91 1d       	adc	r25, r1
   1cef4:	96 95       	lsr	r25
   1cef6:	87 95       	ror	r24
   1cef8:	97 f9       	bld	r25, 7
   1cefa:	08 95       	ret

0001cefc <round>:
   1cefc:	77 df       	rcall	.-274    	; 0x1cdec <__fp_splitA>
   1cefe:	e0 f0       	brcs	.+56     	; 0x1cf38 <round+0x3c>
   1cf00:	9e 37       	cpi	r25, 0x7E	; 126
   1cf02:	d8 f0       	brcs	.+54     	; 0x1cf3a <round+0x3e>
   1cf04:	96 39       	cpi	r25, 0x96	; 150
   1cf06:	b8 f4       	brcc	.+46     	; 0x1cf36 <round+0x3a>
   1cf08:	9e 38       	cpi	r25, 0x8E	; 142
   1cf0a:	48 f4       	brcc	.+18     	; 0x1cf1e <round+0x22>
   1cf0c:	67 2f       	mov	r22, r23
   1cf0e:	78 2f       	mov	r23, r24
   1cf10:	88 27       	eor	r24, r24
   1cf12:	98 5f       	subi	r25, 0xF8	; 248
   1cf14:	f9 cf       	rjmp	.-14     	; 0x1cf08 <round+0xc>
   1cf16:	86 95       	lsr	r24
   1cf18:	77 95       	ror	r23
   1cf1a:	67 95       	ror	r22
   1cf1c:	93 95       	inc	r25
   1cf1e:	95 39       	cpi	r25, 0x95	; 149
   1cf20:	d0 f3       	brcs	.-12     	; 0x1cf16 <round+0x1a>
   1cf22:	b6 2f       	mov	r27, r22
   1cf24:	b1 70       	andi	r27, 0x01	; 1
   1cf26:	6b 0f       	add	r22, r27
   1cf28:	71 1d       	adc	r23, r1
   1cf2a:	81 1d       	adc	r24, r1
   1cf2c:	20 f4       	brcc	.+8      	; 0x1cf36 <round+0x3a>
   1cf2e:	87 95       	ror	r24
   1cf30:	77 95       	ror	r23
   1cf32:	67 95       	ror	r22
   1cf34:	93 95       	inc	r25
   1cf36:	02 c0       	rjmp	.+4      	; 0x1cf3c <__fp_mintl>
   1cf38:	1c c0       	rjmp	.+56     	; 0x1cf72 <__fp_mpack>
   1cf3a:	73 cf       	rjmp	.-282    	; 0x1ce22 <__fp_szero>

0001cf3c <__fp_mintl>:
   1cf3c:	88 23       	and	r24, r24
   1cf3e:	71 f4       	brne	.+28     	; 0x1cf5c <__fp_mintl+0x20>
   1cf40:	77 23       	and	r23, r23
   1cf42:	21 f0       	breq	.+8      	; 0x1cf4c <__fp_mintl+0x10>
   1cf44:	98 50       	subi	r25, 0x08	; 8
   1cf46:	87 2b       	or	r24, r23
   1cf48:	76 2f       	mov	r23, r22
   1cf4a:	07 c0       	rjmp	.+14     	; 0x1cf5a <__fp_mintl+0x1e>
   1cf4c:	66 23       	and	r22, r22
   1cf4e:	11 f4       	brne	.+4      	; 0x1cf54 <__fp_mintl+0x18>
   1cf50:	99 27       	eor	r25, r25
   1cf52:	0d c0       	rjmp	.+26     	; 0x1cf6e <__fp_mintl+0x32>
   1cf54:	90 51       	subi	r25, 0x10	; 16
   1cf56:	86 2b       	or	r24, r22
   1cf58:	70 e0       	ldi	r23, 0x00	; 0
   1cf5a:	60 e0       	ldi	r22, 0x00	; 0
   1cf5c:	2a f0       	brmi	.+10     	; 0x1cf68 <__fp_mintl+0x2c>
   1cf5e:	9a 95       	dec	r25
   1cf60:	66 0f       	add	r22, r22
   1cf62:	77 1f       	adc	r23, r23
   1cf64:	88 1f       	adc	r24, r24
   1cf66:	da f7       	brpl	.-10     	; 0x1cf5e <__fp_mintl+0x22>
   1cf68:	88 0f       	add	r24, r24
   1cf6a:	96 95       	lsr	r25
   1cf6c:	87 95       	ror	r24
   1cf6e:	97 f9       	bld	r25, 7
   1cf70:	08 95       	ret

0001cf72 <__fp_mpack>:
   1cf72:	9f 3f       	cpi	r25, 0xFF	; 255
   1cf74:	31 f0       	breq	.+12     	; 0x1cf82 <__fp_mpack_finite+0xc>

0001cf76 <__fp_mpack_finite>:
   1cf76:	91 50       	subi	r25, 0x01	; 1
   1cf78:	20 f4       	brcc	.+8      	; 0x1cf82 <__fp_mpack_finite+0xc>
   1cf7a:	87 95       	ror	r24
   1cf7c:	77 95       	ror	r23
   1cf7e:	67 95       	ror	r22
   1cf80:	b7 95       	ror	r27
   1cf82:	88 0f       	add	r24, r24
   1cf84:	91 1d       	adc	r25, r1
   1cf86:	96 95       	lsr	r25
   1cf88:	87 95       	ror	r24
   1cf8a:	97 f9       	bld	r25, 7
   1cf8c:	08 95       	ret

0001cf8e <calloc>:
   1cf8e:	0f 93       	push	r16
   1cf90:	1f 93       	push	r17
   1cf92:	cf 93       	push	r28
   1cf94:	df 93       	push	r29
   1cf96:	86 9f       	mul	r24, r22
   1cf98:	80 01       	movw	r16, r0
   1cf9a:	87 9f       	mul	r24, r23
   1cf9c:	10 0d       	add	r17, r0
   1cf9e:	96 9f       	mul	r25, r22
   1cfa0:	10 0d       	add	r17, r0
   1cfa2:	11 24       	eor	r1, r1
   1cfa4:	c8 01       	movw	r24, r16
   1cfa6:	0d d0       	rcall	.+26     	; 0x1cfc2 <malloc>
   1cfa8:	ec 01       	movw	r28, r24
   1cfaa:	00 97       	sbiw	r24, 0x00	; 0
   1cfac:	21 f0       	breq	.+8      	; 0x1cfb6 <calloc+0x28>
   1cfae:	a8 01       	movw	r20, r16
   1cfb0:	60 e0       	ldi	r22, 0x00	; 0
   1cfb2:	70 e0       	ldi	r23, 0x00	; 0
   1cfb4:	0e d2       	rcall	.+1052   	; 0x1d3d2 <memset>
   1cfb6:	ce 01       	movw	r24, r28
   1cfb8:	df 91       	pop	r29
   1cfba:	cf 91       	pop	r28
   1cfbc:	1f 91       	pop	r17
   1cfbe:	0f 91       	pop	r16
   1cfc0:	08 95       	ret

0001cfc2 <malloc>:
   1cfc2:	0f 93       	push	r16
   1cfc4:	1f 93       	push	r17
   1cfc6:	cf 93       	push	r28
   1cfc8:	df 93       	push	r29
   1cfca:	82 30       	cpi	r24, 0x02	; 2
   1cfcc:	91 05       	cpc	r25, r1
   1cfce:	10 f4       	brcc	.+4      	; 0x1cfd4 <malloc+0x12>
   1cfd0:	82 e0       	ldi	r24, 0x02	; 2
   1cfd2:	90 e0       	ldi	r25, 0x00	; 0
   1cfd4:	e0 91 46 21 	lds	r30, 0x2146	; 0x802146 <__flp>
   1cfd8:	f0 91 47 21 	lds	r31, 0x2147	; 0x802147 <__flp+0x1>
   1cfdc:	20 e0       	ldi	r18, 0x00	; 0
   1cfde:	30 e0       	ldi	r19, 0x00	; 0
   1cfe0:	a0 e0       	ldi	r26, 0x00	; 0
   1cfe2:	b0 e0       	ldi	r27, 0x00	; 0
   1cfe4:	30 97       	sbiw	r30, 0x00	; 0
   1cfe6:	19 f1       	breq	.+70     	; 0x1d02e <malloc+0x6c>
   1cfe8:	40 81       	ld	r20, Z
   1cfea:	51 81       	ldd	r21, Z+1	; 0x01
   1cfec:	02 81       	ldd	r16, Z+2	; 0x02
   1cfee:	13 81       	ldd	r17, Z+3	; 0x03
   1cff0:	48 17       	cp	r20, r24
   1cff2:	59 07       	cpc	r21, r25
   1cff4:	c8 f0       	brcs	.+50     	; 0x1d028 <malloc+0x66>
   1cff6:	84 17       	cp	r24, r20
   1cff8:	95 07       	cpc	r25, r21
   1cffa:	69 f4       	brne	.+26     	; 0x1d016 <malloc+0x54>
   1cffc:	10 97       	sbiw	r26, 0x00	; 0
   1cffe:	31 f0       	breq	.+12     	; 0x1d00c <malloc+0x4a>
   1d000:	12 96       	adiw	r26, 0x02	; 2
   1d002:	0c 93       	st	X, r16
   1d004:	12 97       	sbiw	r26, 0x02	; 2
   1d006:	13 96       	adiw	r26, 0x03	; 3
   1d008:	1c 93       	st	X, r17
   1d00a:	27 c0       	rjmp	.+78     	; 0x1d05a <malloc+0x98>
   1d00c:	00 93 46 21 	sts	0x2146, r16	; 0x802146 <__flp>
   1d010:	10 93 47 21 	sts	0x2147, r17	; 0x802147 <__flp+0x1>
   1d014:	22 c0       	rjmp	.+68     	; 0x1d05a <malloc+0x98>
   1d016:	21 15       	cp	r18, r1
   1d018:	31 05       	cpc	r19, r1
   1d01a:	19 f0       	breq	.+6      	; 0x1d022 <malloc+0x60>
   1d01c:	42 17       	cp	r20, r18
   1d01e:	53 07       	cpc	r21, r19
   1d020:	18 f4       	brcc	.+6      	; 0x1d028 <malloc+0x66>
   1d022:	9a 01       	movw	r18, r20
   1d024:	bd 01       	movw	r22, r26
   1d026:	ef 01       	movw	r28, r30
   1d028:	df 01       	movw	r26, r30
   1d02a:	f8 01       	movw	r30, r16
   1d02c:	db cf       	rjmp	.-74     	; 0x1cfe4 <malloc+0x22>
   1d02e:	21 15       	cp	r18, r1
   1d030:	31 05       	cpc	r19, r1
   1d032:	f9 f0       	breq	.+62     	; 0x1d072 <malloc+0xb0>
   1d034:	28 1b       	sub	r18, r24
   1d036:	39 0b       	sbc	r19, r25
   1d038:	24 30       	cpi	r18, 0x04	; 4
   1d03a:	31 05       	cpc	r19, r1
   1d03c:	80 f4       	brcc	.+32     	; 0x1d05e <malloc+0x9c>
   1d03e:	8a 81       	ldd	r24, Y+2	; 0x02
   1d040:	9b 81       	ldd	r25, Y+3	; 0x03
   1d042:	61 15       	cp	r22, r1
   1d044:	71 05       	cpc	r23, r1
   1d046:	21 f0       	breq	.+8      	; 0x1d050 <malloc+0x8e>
   1d048:	fb 01       	movw	r30, r22
   1d04a:	93 83       	std	Z+3, r25	; 0x03
   1d04c:	82 83       	std	Z+2, r24	; 0x02
   1d04e:	04 c0       	rjmp	.+8      	; 0x1d058 <malloc+0x96>
   1d050:	90 93 47 21 	sts	0x2147, r25	; 0x802147 <__flp+0x1>
   1d054:	80 93 46 21 	sts	0x2146, r24	; 0x802146 <__flp>
   1d058:	fe 01       	movw	r30, r28
   1d05a:	32 96       	adiw	r30, 0x02	; 2
   1d05c:	44 c0       	rjmp	.+136    	; 0x1d0e6 <malloc+0x124>
   1d05e:	fe 01       	movw	r30, r28
   1d060:	e2 0f       	add	r30, r18
   1d062:	f3 1f       	adc	r31, r19
   1d064:	81 93       	st	Z+, r24
   1d066:	91 93       	st	Z+, r25
   1d068:	22 50       	subi	r18, 0x02	; 2
   1d06a:	31 09       	sbc	r19, r1
   1d06c:	39 83       	std	Y+1, r19	; 0x01
   1d06e:	28 83       	st	Y, r18
   1d070:	3a c0       	rjmp	.+116    	; 0x1d0e6 <malloc+0x124>
   1d072:	20 91 44 21 	lds	r18, 0x2144	; 0x802144 <__brkval>
   1d076:	30 91 45 21 	lds	r19, 0x2145	; 0x802145 <__brkval+0x1>
   1d07a:	23 2b       	or	r18, r19
   1d07c:	41 f4       	brne	.+16     	; 0x1d08e <malloc+0xcc>
   1d07e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
   1d082:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
   1d086:	30 93 45 21 	sts	0x2145, r19	; 0x802145 <__brkval+0x1>
   1d08a:	20 93 44 21 	sts	0x2144, r18	; 0x802144 <__brkval>
   1d08e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
   1d092:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
   1d096:	21 15       	cp	r18, r1
   1d098:	31 05       	cpc	r19, r1
   1d09a:	41 f4       	brne	.+16     	; 0x1d0ac <malloc+0xea>
   1d09c:	2d b7       	in	r18, 0x3d	; 61
   1d09e:	3e b7       	in	r19, 0x3e	; 62
   1d0a0:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
   1d0a4:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
   1d0a8:	24 1b       	sub	r18, r20
   1d0aa:	35 0b       	sbc	r19, r21
   1d0ac:	e0 91 44 21 	lds	r30, 0x2144	; 0x802144 <__brkval>
   1d0b0:	f0 91 45 21 	lds	r31, 0x2145	; 0x802145 <__brkval+0x1>
   1d0b4:	e2 17       	cp	r30, r18
   1d0b6:	f3 07       	cpc	r31, r19
   1d0b8:	a0 f4       	brcc	.+40     	; 0x1d0e2 <malloc+0x120>
   1d0ba:	2e 1b       	sub	r18, r30
   1d0bc:	3f 0b       	sbc	r19, r31
   1d0be:	28 17       	cp	r18, r24
   1d0c0:	39 07       	cpc	r19, r25
   1d0c2:	78 f0       	brcs	.+30     	; 0x1d0e2 <malloc+0x120>
   1d0c4:	ac 01       	movw	r20, r24
   1d0c6:	4e 5f       	subi	r20, 0xFE	; 254
   1d0c8:	5f 4f       	sbci	r21, 0xFF	; 255
   1d0ca:	24 17       	cp	r18, r20
   1d0cc:	35 07       	cpc	r19, r21
   1d0ce:	48 f0       	brcs	.+18     	; 0x1d0e2 <malloc+0x120>
   1d0d0:	4e 0f       	add	r20, r30
   1d0d2:	5f 1f       	adc	r21, r31
   1d0d4:	50 93 45 21 	sts	0x2145, r21	; 0x802145 <__brkval+0x1>
   1d0d8:	40 93 44 21 	sts	0x2144, r20	; 0x802144 <__brkval>
   1d0dc:	81 93       	st	Z+, r24
   1d0de:	91 93       	st	Z+, r25
   1d0e0:	02 c0       	rjmp	.+4      	; 0x1d0e6 <malloc+0x124>
   1d0e2:	e0 e0       	ldi	r30, 0x00	; 0
   1d0e4:	f0 e0       	ldi	r31, 0x00	; 0
   1d0e6:	cf 01       	movw	r24, r30
   1d0e8:	df 91       	pop	r29
   1d0ea:	cf 91       	pop	r28
   1d0ec:	1f 91       	pop	r17
   1d0ee:	0f 91       	pop	r16
   1d0f0:	08 95       	ret

0001d0f2 <free>:
   1d0f2:	cf 93       	push	r28
   1d0f4:	df 93       	push	r29
   1d0f6:	00 97       	sbiw	r24, 0x00	; 0
   1d0f8:	09 f4       	brne	.+2      	; 0x1d0fc <free+0xa>
   1d0fa:	81 c0       	rjmp	.+258    	; 0x1d1fe <free+0x10c>
   1d0fc:	fc 01       	movw	r30, r24
   1d0fe:	32 97       	sbiw	r30, 0x02	; 2
   1d100:	13 82       	std	Z+3, r1	; 0x03
   1d102:	12 82       	std	Z+2, r1	; 0x02
   1d104:	a0 91 46 21 	lds	r26, 0x2146	; 0x802146 <__flp>
   1d108:	b0 91 47 21 	lds	r27, 0x2147	; 0x802147 <__flp+0x1>
   1d10c:	10 97       	sbiw	r26, 0x00	; 0
   1d10e:	81 f4       	brne	.+32     	; 0x1d130 <free+0x3e>
   1d110:	20 81       	ld	r18, Z
   1d112:	31 81       	ldd	r19, Z+1	; 0x01
   1d114:	82 0f       	add	r24, r18
   1d116:	93 1f       	adc	r25, r19
   1d118:	20 91 44 21 	lds	r18, 0x2144	; 0x802144 <__brkval>
   1d11c:	30 91 45 21 	lds	r19, 0x2145	; 0x802145 <__brkval+0x1>
   1d120:	28 17       	cp	r18, r24
   1d122:	39 07       	cpc	r19, r25
   1d124:	51 f5       	brne	.+84     	; 0x1d17a <free+0x88>
   1d126:	f0 93 45 21 	sts	0x2145, r31	; 0x802145 <__brkval+0x1>
   1d12a:	e0 93 44 21 	sts	0x2144, r30	; 0x802144 <__brkval>
   1d12e:	67 c0       	rjmp	.+206    	; 0x1d1fe <free+0x10c>
   1d130:	ed 01       	movw	r28, r26
   1d132:	20 e0       	ldi	r18, 0x00	; 0
   1d134:	30 e0       	ldi	r19, 0x00	; 0
   1d136:	ce 17       	cp	r28, r30
   1d138:	df 07       	cpc	r29, r31
   1d13a:	40 f4       	brcc	.+16     	; 0x1d14c <free+0x5a>
   1d13c:	4a 81       	ldd	r20, Y+2	; 0x02
   1d13e:	5b 81       	ldd	r21, Y+3	; 0x03
   1d140:	9e 01       	movw	r18, r28
   1d142:	41 15       	cp	r20, r1
   1d144:	51 05       	cpc	r21, r1
   1d146:	f1 f0       	breq	.+60     	; 0x1d184 <free+0x92>
   1d148:	ea 01       	movw	r28, r20
   1d14a:	f5 cf       	rjmp	.-22     	; 0x1d136 <free+0x44>
   1d14c:	d3 83       	std	Z+3, r29	; 0x03
   1d14e:	c2 83       	std	Z+2, r28	; 0x02
   1d150:	40 81       	ld	r20, Z
   1d152:	51 81       	ldd	r21, Z+1	; 0x01
   1d154:	84 0f       	add	r24, r20
   1d156:	95 1f       	adc	r25, r21
   1d158:	c8 17       	cp	r28, r24
   1d15a:	d9 07       	cpc	r29, r25
   1d15c:	59 f4       	brne	.+22     	; 0x1d174 <free+0x82>
   1d15e:	88 81       	ld	r24, Y
   1d160:	99 81       	ldd	r25, Y+1	; 0x01
   1d162:	84 0f       	add	r24, r20
   1d164:	95 1f       	adc	r25, r21
   1d166:	02 96       	adiw	r24, 0x02	; 2
   1d168:	91 83       	std	Z+1, r25	; 0x01
   1d16a:	80 83       	st	Z, r24
   1d16c:	8a 81       	ldd	r24, Y+2	; 0x02
   1d16e:	9b 81       	ldd	r25, Y+3	; 0x03
   1d170:	93 83       	std	Z+3, r25	; 0x03
   1d172:	82 83       	std	Z+2, r24	; 0x02
   1d174:	21 15       	cp	r18, r1
   1d176:	31 05       	cpc	r19, r1
   1d178:	29 f4       	brne	.+10     	; 0x1d184 <free+0x92>
   1d17a:	f0 93 47 21 	sts	0x2147, r31	; 0x802147 <__flp+0x1>
   1d17e:	e0 93 46 21 	sts	0x2146, r30	; 0x802146 <__flp>
   1d182:	3d c0       	rjmp	.+122    	; 0x1d1fe <free+0x10c>
   1d184:	e9 01       	movw	r28, r18
   1d186:	fb 83       	std	Y+3, r31	; 0x03
   1d188:	ea 83       	std	Y+2, r30	; 0x02
   1d18a:	49 91       	ld	r20, Y+
   1d18c:	59 91       	ld	r21, Y+
   1d18e:	c4 0f       	add	r28, r20
   1d190:	d5 1f       	adc	r29, r21
   1d192:	ec 17       	cp	r30, r28
   1d194:	fd 07       	cpc	r31, r29
   1d196:	61 f4       	brne	.+24     	; 0x1d1b0 <free+0xbe>
   1d198:	80 81       	ld	r24, Z
   1d19a:	91 81       	ldd	r25, Z+1	; 0x01
   1d19c:	84 0f       	add	r24, r20
   1d19e:	95 1f       	adc	r25, r21
   1d1a0:	02 96       	adiw	r24, 0x02	; 2
   1d1a2:	e9 01       	movw	r28, r18
   1d1a4:	99 83       	std	Y+1, r25	; 0x01
   1d1a6:	88 83       	st	Y, r24
   1d1a8:	82 81       	ldd	r24, Z+2	; 0x02
   1d1aa:	93 81       	ldd	r25, Z+3	; 0x03
   1d1ac:	9b 83       	std	Y+3, r25	; 0x03
   1d1ae:	8a 83       	std	Y+2, r24	; 0x02
   1d1b0:	e0 e0       	ldi	r30, 0x00	; 0
   1d1b2:	f0 e0       	ldi	r31, 0x00	; 0
   1d1b4:	12 96       	adiw	r26, 0x02	; 2
   1d1b6:	8d 91       	ld	r24, X+
   1d1b8:	9c 91       	ld	r25, X
   1d1ba:	13 97       	sbiw	r26, 0x03	; 3
   1d1bc:	00 97       	sbiw	r24, 0x00	; 0
   1d1be:	19 f0       	breq	.+6      	; 0x1d1c6 <free+0xd4>
   1d1c0:	fd 01       	movw	r30, r26
   1d1c2:	dc 01       	movw	r26, r24
   1d1c4:	f7 cf       	rjmp	.-18     	; 0x1d1b4 <free+0xc2>
   1d1c6:	8d 91       	ld	r24, X+
   1d1c8:	9c 91       	ld	r25, X
   1d1ca:	11 97       	sbiw	r26, 0x01	; 1
   1d1cc:	9d 01       	movw	r18, r26
   1d1ce:	2e 5f       	subi	r18, 0xFE	; 254
   1d1d0:	3f 4f       	sbci	r19, 0xFF	; 255
   1d1d2:	82 0f       	add	r24, r18
   1d1d4:	93 1f       	adc	r25, r19
   1d1d6:	20 91 44 21 	lds	r18, 0x2144	; 0x802144 <__brkval>
   1d1da:	30 91 45 21 	lds	r19, 0x2145	; 0x802145 <__brkval+0x1>
   1d1de:	28 17       	cp	r18, r24
   1d1e0:	39 07       	cpc	r19, r25
   1d1e2:	69 f4       	brne	.+26     	; 0x1d1fe <free+0x10c>
   1d1e4:	30 97       	sbiw	r30, 0x00	; 0
   1d1e6:	29 f4       	brne	.+10     	; 0x1d1f2 <free+0x100>
   1d1e8:	10 92 47 21 	sts	0x2147, r1	; 0x802147 <__flp+0x1>
   1d1ec:	10 92 46 21 	sts	0x2146, r1	; 0x802146 <__flp>
   1d1f0:	02 c0       	rjmp	.+4      	; 0x1d1f6 <free+0x104>
   1d1f2:	13 82       	std	Z+3, r1	; 0x03
   1d1f4:	12 82       	std	Z+2, r1	; 0x02
   1d1f6:	b0 93 45 21 	sts	0x2145, r27	; 0x802145 <__brkval+0x1>
   1d1fa:	a0 93 44 21 	sts	0x2144, r26	; 0x802144 <__brkval>
   1d1fe:	df 91       	pop	r29
   1d200:	cf 91       	pop	r28
   1d202:	08 95       	ret

0001d204 <abort>:
   1d204:	81 e0       	ldi	r24, 0x01	; 1
   1d206:	90 e0       	ldi	r25, 0x00	; 0
   1d208:	f8 94       	cli
   1d20a:	53 c1       	rjmp	.+678    	; 0x1d4b2 <_exit>

0001d20c <__ftoa_engine>:
   1d20c:	28 30       	cpi	r18, 0x08	; 8
   1d20e:	08 f0       	brcs	.+2      	; 0x1d212 <__ftoa_engine+0x6>
   1d210:	27 e0       	ldi	r18, 0x07	; 7
   1d212:	33 27       	eor	r19, r19
   1d214:	da 01       	movw	r26, r20
   1d216:	99 0f       	add	r25, r25
   1d218:	31 1d       	adc	r19, r1
   1d21a:	87 fd       	sbrc	r24, 7
   1d21c:	91 60       	ori	r25, 0x01	; 1
   1d21e:	00 96       	adiw	r24, 0x00	; 0
   1d220:	61 05       	cpc	r22, r1
   1d222:	71 05       	cpc	r23, r1
   1d224:	39 f4       	brne	.+14     	; 0x1d234 <__ftoa_engine+0x28>
   1d226:	32 60       	ori	r19, 0x02	; 2
   1d228:	2e 5f       	subi	r18, 0xFE	; 254
   1d22a:	3d 93       	st	X+, r19
   1d22c:	30 e3       	ldi	r19, 0x30	; 48
   1d22e:	2a 95       	dec	r18
   1d230:	e1 f7       	brne	.-8      	; 0x1d22a <__ftoa_engine+0x1e>
   1d232:	08 95       	ret
   1d234:	9f 3f       	cpi	r25, 0xFF	; 255
   1d236:	30 f0       	brcs	.+12     	; 0x1d244 <__ftoa_engine+0x38>
   1d238:	80 38       	cpi	r24, 0x80	; 128
   1d23a:	71 05       	cpc	r23, r1
   1d23c:	61 05       	cpc	r22, r1
   1d23e:	09 f0       	breq	.+2      	; 0x1d242 <__ftoa_engine+0x36>
   1d240:	3c 5f       	subi	r19, 0xFC	; 252
   1d242:	3c 5f       	subi	r19, 0xFC	; 252
   1d244:	3d 93       	st	X+, r19
   1d246:	91 30       	cpi	r25, 0x01	; 1
   1d248:	08 f0       	brcs	.+2      	; 0x1d24c <__ftoa_engine+0x40>
   1d24a:	80 68       	ori	r24, 0x80	; 128
   1d24c:	91 1d       	adc	r25, r1
   1d24e:	df 93       	push	r29
   1d250:	cf 93       	push	r28
   1d252:	1f 93       	push	r17
   1d254:	0f 93       	push	r16
   1d256:	ff 92       	push	r15
   1d258:	ef 92       	push	r14
   1d25a:	19 2f       	mov	r17, r25
   1d25c:	98 7f       	andi	r25, 0xF8	; 248
   1d25e:	96 95       	lsr	r25
   1d260:	e9 2f       	mov	r30, r25
   1d262:	96 95       	lsr	r25
   1d264:	96 95       	lsr	r25
   1d266:	e9 0f       	add	r30, r25
   1d268:	ff 27       	eor	r31, r31
   1d26a:	e8 5c       	subi	r30, 0xC8	; 200
   1d26c:	fd 4f       	sbci	r31, 0xFD	; 253
   1d26e:	99 27       	eor	r25, r25
   1d270:	33 27       	eor	r19, r19
   1d272:	ee 24       	eor	r14, r14
   1d274:	ff 24       	eor	r15, r15
   1d276:	a7 01       	movw	r20, r14
   1d278:	e7 01       	movw	r28, r14
   1d27a:	05 90       	lpm	r0, Z+
   1d27c:	08 94       	sec
   1d27e:	07 94       	ror	r0
   1d280:	28 f4       	brcc	.+10     	; 0x1d28c <__ftoa_engine+0x80>
   1d282:	36 0f       	add	r19, r22
   1d284:	e7 1e       	adc	r14, r23
   1d286:	f8 1e       	adc	r15, r24
   1d288:	49 1f       	adc	r20, r25
   1d28a:	51 1d       	adc	r21, r1
   1d28c:	66 0f       	add	r22, r22
   1d28e:	77 1f       	adc	r23, r23
   1d290:	88 1f       	adc	r24, r24
   1d292:	99 1f       	adc	r25, r25
   1d294:	06 94       	lsr	r0
   1d296:	a1 f7       	brne	.-24     	; 0x1d280 <__ftoa_engine+0x74>
   1d298:	05 90       	lpm	r0, Z+
   1d29a:	07 94       	ror	r0
   1d29c:	28 f4       	brcc	.+10     	; 0x1d2a8 <__ftoa_engine+0x9c>
   1d29e:	e7 0e       	add	r14, r23
   1d2a0:	f8 1e       	adc	r15, r24
   1d2a2:	49 1f       	adc	r20, r25
   1d2a4:	56 1f       	adc	r21, r22
   1d2a6:	c1 1d       	adc	r28, r1
   1d2a8:	77 0f       	add	r23, r23
   1d2aa:	88 1f       	adc	r24, r24
   1d2ac:	99 1f       	adc	r25, r25
   1d2ae:	66 1f       	adc	r22, r22
   1d2b0:	06 94       	lsr	r0
   1d2b2:	a1 f7       	brne	.-24     	; 0x1d29c <__ftoa_engine+0x90>
   1d2b4:	05 90       	lpm	r0, Z+
   1d2b6:	07 94       	ror	r0
   1d2b8:	28 f4       	brcc	.+10     	; 0x1d2c4 <__ftoa_engine+0xb8>
   1d2ba:	f8 0e       	add	r15, r24
   1d2bc:	49 1f       	adc	r20, r25
   1d2be:	56 1f       	adc	r21, r22
   1d2c0:	c7 1f       	adc	r28, r23
   1d2c2:	d1 1d       	adc	r29, r1
   1d2c4:	88 0f       	add	r24, r24
   1d2c6:	99 1f       	adc	r25, r25
   1d2c8:	66 1f       	adc	r22, r22
   1d2ca:	77 1f       	adc	r23, r23
   1d2cc:	06 94       	lsr	r0
   1d2ce:	a1 f7       	brne	.-24     	; 0x1d2b8 <__ftoa_engine+0xac>
   1d2d0:	05 90       	lpm	r0, Z+
   1d2d2:	07 94       	ror	r0
   1d2d4:	20 f4       	brcc	.+8      	; 0x1d2de <__ftoa_engine+0xd2>
   1d2d6:	49 0f       	add	r20, r25
   1d2d8:	56 1f       	adc	r21, r22
   1d2da:	c7 1f       	adc	r28, r23
   1d2dc:	d8 1f       	adc	r29, r24
   1d2de:	99 0f       	add	r25, r25
   1d2e0:	66 1f       	adc	r22, r22
   1d2e2:	77 1f       	adc	r23, r23
   1d2e4:	88 1f       	adc	r24, r24
   1d2e6:	06 94       	lsr	r0
   1d2e8:	a9 f7       	brne	.-22     	; 0x1d2d4 <__ftoa_engine+0xc8>
   1d2ea:	84 91       	lpm	r24, Z
   1d2ec:	10 95       	com	r17
   1d2ee:	17 70       	andi	r17, 0x07	; 7
   1d2f0:	41 f0       	breq	.+16     	; 0x1d302 <__ftoa_engine+0xf6>
   1d2f2:	d6 95       	lsr	r29
   1d2f4:	c7 95       	ror	r28
   1d2f6:	57 95       	ror	r21
   1d2f8:	47 95       	ror	r20
   1d2fa:	f7 94       	ror	r15
   1d2fc:	e7 94       	ror	r14
   1d2fe:	1a 95       	dec	r17
   1d300:	c1 f7       	brne	.-16     	; 0x1d2f2 <__ftoa_engine+0xe6>
   1d302:	ee ed       	ldi	r30, 0xDE	; 222
   1d304:	f1 e0       	ldi	r31, 0x01	; 1
   1d306:	68 94       	set
   1d308:	15 90       	lpm	r1, Z+
   1d30a:	15 91       	lpm	r17, Z+
   1d30c:	35 91       	lpm	r19, Z+
   1d30e:	65 91       	lpm	r22, Z+
   1d310:	95 91       	lpm	r25, Z+
   1d312:	05 90       	lpm	r0, Z+
   1d314:	7f e2       	ldi	r23, 0x2F	; 47
   1d316:	73 95       	inc	r23
   1d318:	e1 18       	sub	r14, r1
   1d31a:	f1 0a       	sbc	r15, r17
   1d31c:	43 0b       	sbc	r20, r19
   1d31e:	56 0b       	sbc	r21, r22
   1d320:	c9 0b       	sbc	r28, r25
   1d322:	d0 09       	sbc	r29, r0
   1d324:	c0 f7       	brcc	.-16     	; 0x1d316 <__ftoa_engine+0x10a>
   1d326:	e1 0c       	add	r14, r1
   1d328:	f1 1e       	adc	r15, r17
   1d32a:	43 1f       	adc	r20, r19
   1d32c:	56 1f       	adc	r21, r22
   1d32e:	c9 1f       	adc	r28, r25
   1d330:	d0 1d       	adc	r29, r0
   1d332:	7e f4       	brtc	.+30     	; 0x1d352 <__ftoa_engine+0x146>
   1d334:	70 33       	cpi	r23, 0x30	; 48
   1d336:	11 f4       	brne	.+4      	; 0x1d33c <__ftoa_engine+0x130>
   1d338:	8a 95       	dec	r24
   1d33a:	e6 cf       	rjmp	.-52     	; 0x1d308 <__ftoa_engine+0xfc>
   1d33c:	e8 94       	clt
   1d33e:	01 50       	subi	r16, 0x01	; 1
   1d340:	30 f0       	brcs	.+12     	; 0x1d34e <__ftoa_engine+0x142>
   1d342:	08 0f       	add	r16, r24
   1d344:	0a f4       	brpl	.+2      	; 0x1d348 <__ftoa_engine+0x13c>
   1d346:	00 27       	eor	r16, r16
   1d348:	02 17       	cp	r16, r18
   1d34a:	08 f4       	brcc	.+2      	; 0x1d34e <__ftoa_engine+0x142>
   1d34c:	20 2f       	mov	r18, r16
   1d34e:	23 95       	inc	r18
   1d350:	02 2f       	mov	r16, r18
   1d352:	7a 33       	cpi	r23, 0x3A	; 58
   1d354:	28 f0       	brcs	.+10     	; 0x1d360 <__ftoa_engine+0x154>
   1d356:	79 e3       	ldi	r23, 0x39	; 57
   1d358:	7d 93       	st	X+, r23
   1d35a:	2a 95       	dec	r18
   1d35c:	e9 f7       	brne	.-6      	; 0x1d358 <__ftoa_engine+0x14c>
   1d35e:	10 c0       	rjmp	.+32     	; 0x1d380 <__ftoa_engine+0x174>
   1d360:	7d 93       	st	X+, r23
   1d362:	2a 95       	dec	r18
   1d364:	89 f6       	brne	.-94     	; 0x1d308 <__ftoa_engine+0xfc>
   1d366:	06 94       	lsr	r0
   1d368:	97 95       	ror	r25
   1d36a:	67 95       	ror	r22
   1d36c:	37 95       	ror	r19
   1d36e:	17 95       	ror	r17
   1d370:	17 94       	ror	r1
   1d372:	e1 18       	sub	r14, r1
   1d374:	f1 0a       	sbc	r15, r17
   1d376:	43 0b       	sbc	r20, r19
   1d378:	56 0b       	sbc	r21, r22
   1d37a:	c9 0b       	sbc	r28, r25
   1d37c:	d0 09       	sbc	r29, r0
   1d37e:	98 f0       	brcs	.+38     	; 0x1d3a6 <__ftoa_engine+0x19a>
   1d380:	23 95       	inc	r18
   1d382:	7e 91       	ld	r23, -X
   1d384:	73 95       	inc	r23
   1d386:	7a 33       	cpi	r23, 0x3A	; 58
   1d388:	08 f0       	brcs	.+2      	; 0x1d38c <__ftoa_engine+0x180>
   1d38a:	70 e3       	ldi	r23, 0x30	; 48
   1d38c:	7c 93       	st	X, r23
   1d38e:	20 13       	cpse	r18, r16
   1d390:	b8 f7       	brcc	.-18     	; 0x1d380 <__ftoa_engine+0x174>
   1d392:	7e 91       	ld	r23, -X
   1d394:	70 61       	ori	r23, 0x10	; 16
   1d396:	7d 93       	st	X+, r23
   1d398:	30 f0       	brcs	.+12     	; 0x1d3a6 <__ftoa_engine+0x19a>
   1d39a:	83 95       	inc	r24
   1d39c:	71 e3       	ldi	r23, 0x31	; 49
   1d39e:	7d 93       	st	X+, r23
   1d3a0:	70 e3       	ldi	r23, 0x30	; 48
   1d3a2:	2a 95       	dec	r18
   1d3a4:	e1 f7       	brne	.-8      	; 0x1d39e <__ftoa_engine+0x192>
   1d3a6:	11 24       	eor	r1, r1
   1d3a8:	ef 90       	pop	r14
   1d3aa:	ff 90       	pop	r15
   1d3ac:	0f 91       	pop	r16
   1d3ae:	1f 91       	pop	r17
   1d3b0:	cf 91       	pop	r28
   1d3b2:	df 91       	pop	r29
   1d3b4:	99 27       	eor	r25, r25
   1d3b6:	87 fd       	sbrc	r24, 7
   1d3b8:	90 95       	com	r25
   1d3ba:	08 95       	ret

0001d3bc <strnlen_P>:
   1d3bc:	fc 01       	movw	r30, r24
   1d3be:	05 90       	lpm	r0, Z+
   1d3c0:	61 50       	subi	r22, 0x01	; 1
   1d3c2:	70 40       	sbci	r23, 0x00	; 0
   1d3c4:	01 10       	cpse	r0, r1
   1d3c6:	d8 f7       	brcc	.-10     	; 0x1d3be <strnlen_P+0x2>
   1d3c8:	80 95       	com	r24
   1d3ca:	90 95       	com	r25
   1d3cc:	8e 0f       	add	r24, r30
   1d3ce:	9f 1f       	adc	r25, r31
   1d3d0:	08 95       	ret

0001d3d2 <memset>:
   1d3d2:	dc 01       	movw	r26, r24
   1d3d4:	01 c0       	rjmp	.+2      	; 0x1d3d8 <memset+0x6>
   1d3d6:	6d 93       	st	X+, r22
   1d3d8:	41 50       	subi	r20, 0x01	; 1
   1d3da:	50 40       	sbci	r21, 0x00	; 0
   1d3dc:	e0 f7       	brcc	.-8      	; 0x1d3d6 <memset+0x4>
   1d3de:	08 95       	ret

0001d3e0 <strnlen>:
   1d3e0:	fc 01       	movw	r30, r24
   1d3e2:	61 50       	subi	r22, 0x01	; 1
   1d3e4:	70 40       	sbci	r23, 0x00	; 0
   1d3e6:	01 90       	ld	r0, Z+
   1d3e8:	01 10       	cpse	r0, r1
   1d3ea:	d8 f7       	brcc	.-10     	; 0x1d3e2 <strnlen+0x2>
   1d3ec:	80 95       	com	r24
   1d3ee:	90 95       	com	r25
   1d3f0:	8e 0f       	add	r24, r30
   1d3f2:	9f 1f       	adc	r25, r31
   1d3f4:	08 95       	ret

0001d3f6 <__ultoa_invert>:
   1d3f6:	fa 01       	movw	r30, r20
   1d3f8:	aa 27       	eor	r26, r26
   1d3fa:	28 30       	cpi	r18, 0x08	; 8
   1d3fc:	51 f1       	breq	.+84     	; 0x1d452 <__ultoa_invert+0x5c>
   1d3fe:	20 31       	cpi	r18, 0x10	; 16
   1d400:	81 f1       	breq	.+96     	; 0x1d462 <__ultoa_invert+0x6c>
   1d402:	e8 94       	clt
   1d404:	6f 93       	push	r22
   1d406:	6e 7f       	andi	r22, 0xFE	; 254
   1d408:	6e 5f       	subi	r22, 0xFE	; 254
   1d40a:	7f 4f       	sbci	r23, 0xFF	; 255
   1d40c:	8f 4f       	sbci	r24, 0xFF	; 255
   1d40e:	9f 4f       	sbci	r25, 0xFF	; 255
   1d410:	af 4f       	sbci	r26, 0xFF	; 255
   1d412:	b1 e0       	ldi	r27, 0x01	; 1
   1d414:	3e d0       	rcall	.+124    	; 0x1d492 <__ultoa_invert+0x9c>
   1d416:	b4 e0       	ldi	r27, 0x04	; 4
   1d418:	3c d0       	rcall	.+120    	; 0x1d492 <__ultoa_invert+0x9c>
   1d41a:	67 0f       	add	r22, r23
   1d41c:	78 1f       	adc	r23, r24
   1d41e:	89 1f       	adc	r24, r25
   1d420:	9a 1f       	adc	r25, r26
   1d422:	a1 1d       	adc	r26, r1
   1d424:	68 0f       	add	r22, r24
   1d426:	79 1f       	adc	r23, r25
   1d428:	8a 1f       	adc	r24, r26
   1d42a:	91 1d       	adc	r25, r1
   1d42c:	a1 1d       	adc	r26, r1
   1d42e:	6a 0f       	add	r22, r26
   1d430:	71 1d       	adc	r23, r1
   1d432:	81 1d       	adc	r24, r1
   1d434:	91 1d       	adc	r25, r1
   1d436:	a1 1d       	adc	r26, r1
   1d438:	20 d0       	rcall	.+64     	; 0x1d47a <__ultoa_invert+0x84>
   1d43a:	09 f4       	brne	.+2      	; 0x1d43e <__ultoa_invert+0x48>
   1d43c:	68 94       	set
   1d43e:	3f 91       	pop	r19
   1d440:	2a e0       	ldi	r18, 0x0A	; 10
   1d442:	26 9f       	mul	r18, r22
   1d444:	11 24       	eor	r1, r1
   1d446:	30 19       	sub	r19, r0
   1d448:	30 5d       	subi	r19, 0xD0	; 208
   1d44a:	31 93       	st	Z+, r19
   1d44c:	de f6       	brtc	.-74     	; 0x1d404 <__ultoa_invert+0xe>
   1d44e:	cf 01       	movw	r24, r30
   1d450:	08 95       	ret
   1d452:	46 2f       	mov	r20, r22
   1d454:	47 70       	andi	r20, 0x07	; 7
   1d456:	40 5d       	subi	r20, 0xD0	; 208
   1d458:	41 93       	st	Z+, r20
   1d45a:	b3 e0       	ldi	r27, 0x03	; 3
   1d45c:	0f d0       	rcall	.+30     	; 0x1d47c <__ultoa_invert+0x86>
   1d45e:	c9 f7       	brne	.-14     	; 0x1d452 <__ultoa_invert+0x5c>
   1d460:	f6 cf       	rjmp	.-20     	; 0x1d44e <__ultoa_invert+0x58>
   1d462:	46 2f       	mov	r20, r22
   1d464:	4f 70       	andi	r20, 0x0F	; 15
   1d466:	40 5d       	subi	r20, 0xD0	; 208
   1d468:	4a 33       	cpi	r20, 0x3A	; 58
   1d46a:	18 f0       	brcs	.+6      	; 0x1d472 <__ultoa_invert+0x7c>
   1d46c:	49 5d       	subi	r20, 0xD9	; 217
   1d46e:	31 fd       	sbrc	r19, 1
   1d470:	40 52       	subi	r20, 0x20	; 32
   1d472:	41 93       	st	Z+, r20
   1d474:	02 d0       	rcall	.+4      	; 0x1d47a <__ultoa_invert+0x84>
   1d476:	a9 f7       	brne	.-22     	; 0x1d462 <__ultoa_invert+0x6c>
   1d478:	ea cf       	rjmp	.-44     	; 0x1d44e <__ultoa_invert+0x58>
   1d47a:	b4 e0       	ldi	r27, 0x04	; 4
   1d47c:	a6 95       	lsr	r26
   1d47e:	97 95       	ror	r25
   1d480:	87 95       	ror	r24
   1d482:	77 95       	ror	r23
   1d484:	67 95       	ror	r22
   1d486:	ba 95       	dec	r27
   1d488:	c9 f7       	brne	.-14     	; 0x1d47c <__ultoa_invert+0x86>
   1d48a:	00 97       	sbiw	r24, 0x00	; 0
   1d48c:	61 05       	cpc	r22, r1
   1d48e:	71 05       	cpc	r23, r1
   1d490:	08 95       	ret
   1d492:	9b 01       	movw	r18, r22
   1d494:	ac 01       	movw	r20, r24
   1d496:	0a 2e       	mov	r0, r26
   1d498:	06 94       	lsr	r0
   1d49a:	57 95       	ror	r21
   1d49c:	47 95       	ror	r20
   1d49e:	37 95       	ror	r19
   1d4a0:	27 95       	ror	r18
   1d4a2:	ba 95       	dec	r27
   1d4a4:	c9 f7       	brne	.-14     	; 0x1d498 <__ultoa_invert+0xa2>
   1d4a6:	62 0f       	add	r22, r18
   1d4a8:	73 1f       	adc	r23, r19
   1d4aa:	84 1f       	adc	r24, r20
   1d4ac:	95 1f       	adc	r25, r21
   1d4ae:	a0 1d       	adc	r26, r0
   1d4b0:	08 95       	ret

0001d4b2 <_exit>:
   1d4b2:	f8 94       	cli

0001d4b4 <__stop_program>:
   1d4b4:	ff cf       	rjmp	.-2      	; 0x1d4b4 <__stop_program>
