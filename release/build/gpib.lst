
gpib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000166c  00800100  0001daa2  0001db36  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0001daa2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000a53  0080176c  0080176c  0001f1a2  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0001f1a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001f1b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00001778  00000000  00000000  0001f1f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000281e3  00000000  00000000  0002096c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000061b0  00000000  00000000  00048b4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000122a6  00000000  00000000  0004ecff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00006144  00000000  00000000  00060fa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004738  00000000  00000000  000670ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00026ae2  00000000  00000000  0006b824  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001718  00000000  00000000  00092306  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d0 24 	jmp	0x49a0	; 0x49a0 <__ctors_end>
       4:	0c 94 ef 24 	jmp	0x49de	; 0x49de <__bad_interrupt>
       8:	0c 94 ef 24 	jmp	0x49de	; 0x49de <__bad_interrupt>
       c:	0c 94 ef 24 	jmp	0x49de	; 0x49de <__bad_interrupt>
      10:	0c 94 ef 24 	jmp	0x49de	; 0x49de <__bad_interrupt>
      14:	0c 94 ef 24 	jmp	0x49de	; 0x49de <__bad_interrupt>
      18:	0c 94 ef 24 	jmp	0x49de	; 0x49de <__bad_interrupt>
      1c:	0c 94 ef 24 	jmp	0x49de	; 0x49de <__bad_interrupt>
      20:	0c 94 ef 24 	jmp	0x49de	; 0x49de <__bad_interrupt>
      24:	0c 94 ef 24 	jmp	0x49de	; 0x49de <__bad_interrupt>
      28:	0c 94 ef 24 	jmp	0x49de	; 0x49de <__bad_interrupt>
      2c:	0c 94 ef 24 	jmp	0x49de	; 0x49de <__bad_interrupt>
      30:	0c 94 ef 24 	jmp	0x49de	; 0x49de <__bad_interrupt>
      34:	0c 94 89 34 	jmp	0x6912	; 0x6912 <__vector_13>
      38:	0c 94 ef 24 	jmp	0x49de	; 0x49de <__bad_interrupt>
      3c:	0c 94 ef 24 	jmp	0x49de	; 0x49de <__bad_interrupt>
      40:	0c 94 ef 24 	jmp	0x49de	; 0x49de <__bad_interrupt>
      44:	0c 94 ef 24 	jmp	0x49de	; 0x49de <__bad_interrupt>
      48:	0c 94 ef 24 	jmp	0x49de	; 0x49de <__bad_interrupt>
      4c:	0c 94 ef 24 	jmp	0x49de	; 0x49de <__bad_interrupt>
      50:	0c 94 f0 2b 	jmp	0x57e0	; 0x57e0 <__vector_20>
      54:	0c 94 ef 24 	jmp	0x49de	; 0x49de <__bad_interrupt>
      58:	0c 94 ef 24 	jmp	0x49de	; 0x49de <__bad_interrupt>
      5c:	0c 94 ef 24 	jmp	0x49de	; 0x49de <__bad_interrupt>
      60:	0c 94 ef 24 	jmp	0x49de	; 0x49de <__bad_interrupt>
      64:	0c 94 ef 24 	jmp	0x49de	; 0x49de <__bad_interrupt>
      68:	0c 94 ef 24 	jmp	0x49de	; 0x49de <__bad_interrupt>
      6c:	0c 94 ef 24 	jmp	0x49de	; 0x49de <__bad_interrupt>
      70:	0c 94 ef 24 	jmp	0x49de	; 0x49de <__bad_interrupt>
      74:	0c 94 ef 24 	jmp	0x49de	; 0x49de <__bad_interrupt>
      78:	0c 94 ef 24 	jmp	0x49de	; 0x49de <__bad_interrupt>
      7c:	0c 94 ef 24 	jmp	0x49de	; 0x49de <__bad_interrupt>
      80:	0c 94 ef 24 	jmp	0x49de	; 0x49de <__bad_interrupt>
      84:	0c 94 ef 24 	jmp	0x49de	; 0x49de <__bad_interrupt>
      88:	0c 94 ef 24 	jmp	0x49de	; 0x49de <__bad_interrupt>
      8c:	30 44       	sbci	r19, 0x40	; 64
      8e:	8b 45       	sbci	r24, 0x5B	; 91
      90:	60 44       	sbci	r22, 0x40	; 64
      92:	64 45       	sbci	r22, 0x54	; 84
      94:	64 45       	sbci	r22, 0x54	; 84
      96:	8b 45       	sbci	r24, 0x5B	; 91
      98:	8b 45       	sbci	r24, 0x5B	; 91
      9a:	8b 45       	sbci	r24, 0x5B	; 91
      9c:	8b 45       	sbci	r24, 0x5B	; 91
      9e:	8b 45       	sbci	r24, 0x5B	; 91
      a0:	8b 45       	sbci	r24, 0x5B	; 91
      a2:	8b 45       	sbci	r24, 0x5B	; 91
      a4:	8b 45       	sbci	r24, 0x5B	; 91
      a6:	30 44       	sbci	r19, 0x40	; 64
      a8:	2a 44       	sbci	r18, 0x4A	; 74
      aa:	8b 45       	sbci	r24, 0x5B	; 91
      ac:	8b 45       	sbci	r24, 0x5B	; 91
      ae:	8b 45       	sbci	r24, 0x5B	; 91
      b0:	8b 45       	sbci	r24, 0x5B	; 91
      b2:	5a 44       	sbci	r21, 0x4A	; 74
      b4:	8b 45       	sbci	r24, 0x5B	; 91
      b6:	8b 45       	sbci	r24, 0x5B	; 91
      b8:	30 44       	sbci	r19, 0x40	; 64
      ba:	8b 45       	sbci	r24, 0x5B	; 91
      bc:	8b 45       	sbci	r24, 0x5B	; 91
      be:	8b 45       	sbci	r24, 0x5B	; 91
      c0:	8b 45       	sbci	r24, 0x5B	; 91
      c2:	8b 45       	sbci	r24, 0x5B	; 91
      c4:	8b 45       	sbci	r24, 0x5B	; 91
      c6:	8b 45       	sbci	r24, 0x5B	; 91
      c8:	8b 45       	sbci	r24, 0x5B	; 91
      ca:	8b 45       	sbci	r24, 0x5B	; 91
      cc:	30 44       	sbci	r19, 0x40	; 64
      ce:	86 45       	sbci	r24, 0x56	; 86
      d0:	60 44       	sbci	r22, 0x40	; 64
      d2:	64 45       	sbci	r22, 0x54	; 84
      d4:	64 45       	sbci	r22, 0x54	; 84
      d6:	8b 45       	sbci	r24, 0x5B	; 91
      d8:	8b 45       	sbci	r24, 0x5B	; 91
      da:	8b 45       	sbci	r24, 0x5B	; 91
      dc:	8b 45       	sbci	r24, 0x5B	; 91
      de:	8b 45       	sbci	r24, 0x5B	; 91
      e0:	8b 45       	sbci	r24, 0x5B	; 91
      e2:	8b 45       	sbci	r24, 0x5B	; 91
      e4:	8b 45       	sbci	r24, 0x5B	; 91
      e6:	30 44       	sbci	r19, 0x40	; 64
      e8:	2a 44       	sbci	r18, 0x4A	; 74
      ea:	8b 45       	sbci	r24, 0x5B	; 91
      ec:	8b 45       	sbci	r24, 0x5B	; 91
      ee:	81 45       	sbci	r24, 0x51	; 81
      f0:	8b 45       	sbci	r24, 0x5B	; 91
      f2:	5a 44       	sbci	r21, 0x4A	; 74
      f4:	8b 45       	sbci	r24, 0x5B	; 91
      f6:	8b 45       	sbci	r24, 0x5B	; 91
      f8:	30 44       	sbci	r19, 0x40	; 64
      fa:	ad 45       	sbci	r26, 0x5D	; 93
      fc:	94 46       	sbci	r25, 0x64	; 100
      fe:	a3 45       	sbci	r26, 0x53	; 83
     100:	01 46       	sbci	r16, 0x61	; 97
     102:	e8 45       	sbci	r30, 0x58	; 88
     104:	94 46       	sbci	r25, 0x64	; 100
     106:	94 46       	sbci	r25, 0x64	; 100
     108:	94 46       	sbci	r25, 0x64	; 100
     10a:	94 46       	sbci	r25, 0x64	; 100
     10c:	94 46       	sbci	r25, 0x64	; 100
     10e:	94 46       	sbci	r25, 0x64	; 100
     110:	94 46       	sbci	r25, 0x64	; 100
     112:	94 46       	sbci	r25, 0x64	; 100
     114:	b7 45       	sbci	r27, 0x57	; 87
     116:	cb 45       	sbci	r28, 0x5B	; 91
     118:	94 46       	sbci	r25, 0x64	; 100
     11a:	94 46       	sbci	r25, 0x64	; 100
     11c:	94 46       	sbci	r25, 0x64	; 100
     11e:	94 46       	sbci	r25, 0x64	; 100
     120:	9f 45       	sbci	r25, 0x5F	; 95
     122:	94 46       	sbci	r25, 0x64	; 100
     124:	94 46       	sbci	r25, 0x64	; 100
     126:	cb 45       	sbci	r28, 0x5B	; 91
     128:	94 46       	sbci	r25, 0x64	; 100
     12a:	94 46       	sbci	r25, 0x64	; 100
     12c:	94 46       	sbci	r25, 0x64	; 100
     12e:	94 46       	sbci	r25, 0x64	; 100
     130:	94 46       	sbci	r25, 0x64	; 100
     132:	94 46       	sbci	r25, 0x64	; 100
     134:	94 46       	sbci	r25, 0x64	; 100
     136:	94 46       	sbci	r25, 0x64	; 100
     138:	94 46       	sbci	r25, 0x64	; 100
     13a:	ad 45       	sbci	r26, 0x5D	; 93
     13c:	2f 46       	sbci	r18, 0x6F	; 111
     13e:	a3 45       	sbci	r26, 0x53	; 83
     140:	01 46       	sbci	r16, 0x61	; 97
     142:	e8 45       	sbci	r30, 0x58	; 88
     144:	94 46       	sbci	r25, 0x64	; 100
     146:	94 46       	sbci	r25, 0x64	; 100
     148:	94 46       	sbci	r25, 0x64	; 100
     14a:	94 46       	sbci	r25, 0x64	; 100
     14c:	94 46       	sbci	r25, 0x64	; 100
     14e:	94 46       	sbci	r25, 0x64	; 100
     150:	94 46       	sbci	r25, 0x64	; 100
     152:	94 46       	sbci	r25, 0x64	; 100
     154:	b7 45       	sbci	r27, 0x57	; 87
     156:	cb 45       	sbci	r28, 0x5B	; 91
     158:	94 46       	sbci	r25, 0x64	; 100
     15a:	94 46       	sbci	r25, 0x64	; 100
     15c:	2f 46       	sbci	r18, 0x6F	; 111
     15e:	94 46       	sbci	r25, 0x64	; 100
     160:	9f 45       	sbci	r25, 0x5F	; 95
     162:	94 46       	sbci	r25, 0x64	; 100
     164:	94 46       	sbci	r25, 0x64	; 100
     166:	cb 45       	sbci	r28, 0x5B	; 91
     168:	4e 69       	ori	r20, 0x9E	; 158
     16a:	58 69       	ori	r21, 0x98	; 152
     16c:	60 69       	ori	r22, 0x90	; 144
     16e:	62 69       	ori	r22, 0x92	; 146
     170:	64 69       	ori	r22, 0x94	; 148
     172:	66 69       	ori	r22, 0x96	; 150
     174:	68 69       	ori	r22, 0x98	; 152
     176:	6a 69       	ori	r22, 0x9A	; 154
     178:	6d 69       	ori	r22, 0x9D	; 157
     17a:	07 86       	std	Z+15, r0	; 0x0f
     17c:	2d 86       	std	Y+13, r2	; 0x0d
     17e:	54 86       	std	Z+12, r5	; 0x0c
     180:	6e 86       	std	Y+14, r6	; 0x0e
     182:	77 86       	std	Z+15, r7	; 0x0f
     184:	97 86       	std	Z+15, r9	; 0x0f
     186:	b0 86       	std	Z+8, r11	; 0x08
     188:	bf 86       	std	Y+15, r11	; 0x0f
     18a:	0a 87       	std	Y+10, r16	; 0x0a
     18c:	dc 86       	std	Y+12, r13	; 0x0c
     18e:	f8 88       	ldd	r15, Y+16	; 0x10
     190:	00 89       	ldd	r16, Z+16	; 0x10
     192:	05 89       	ldd	r16, Z+21	; 0x15
     194:	29 89       	ldd	r18, Y+17	; 0x11
     196:	33 89       	ldd	r19, Z+19	; 0x13
     198:	7d 89       	ldd	r23, Y+21	; 0x15
     19a:	48 89       	ldd	r20, Y+16	; 0x10
     19c:	48 89       	ldd	r20, Y+16	; 0x10
     19e:	40 89       	ldd	r20, Z+16	; 0x10
     1a0:	39 9c       	mul	r3, r9
     1a2:	6d 9d       	mul	r22, r13
     1a4:	c1 9d       	mul	r28, r1
     1a6:	41 9e       	mul	r4, r17
     1a8:	72 9e       	mul	r7, r18
     1aa:	ea 9e       	mul	r14, r26
     1ac:	b8 a0       	ldd	r11, Y+32	; 0x20
     1ae:	6e a3       	std	Y+38, r22	; 0x26
     1b0:	6e a3       	std	Y+38, r22	; 0x26
     1b2:	6e a3       	std	Y+38, r22	; 0x26
     1b4:	89 a1       	ldd	r24, Y+33	; 0x21
     1b6:	cb a1       	ldd	r28, Y+35	; 0x23
     1b8:	79 a2       	std	Y+33, r7	; 0x21
     1ba:	b9 a2       	std	Y+33, r11	; 0x21
     1bc:	0a 9d       	mul	r16, r10
     1be:	26 9d       	mul	r18, r6
     1c0:	07 c1       	rjmp	.+526    	; 0x3d0 <__c.3680+0x15>
     1c2:	c6 c0       	rjmp	.+396    	; 0x350 <__c.3701>
     1c4:	c6 c0       	rjmp	.+396    	; 0x352 <__c.3701+0x2>
     1c6:	c6 c0       	rjmp	.+396    	; 0x354 <__c.3701+0x4>
     1c8:	c6 c0       	rjmp	.+396    	; 0x356 <__c.3701+0x6>
     1ca:	8a c0       	rjmp	.+276    	; 0x2e0 <__c.3690+0x8>
     1cc:	91 c0       	rjmp	.+290    	; 0x2f0 <__c.3690+0x18>
     1ce:	98 c0       	rjmp	.+304    	; 0x300 <__c.3685+0xa>
     1d0:	a8 c0       	rjmp	.+336    	; 0x322 <__c.3716+0xf>
     1d2:	b6 c0       	rjmp	.+364    	; 0x340 <__c.3707+0x8>
     1d4:	af c0       	rjmp	.+350    	; 0x334 <__c.3716+0x21>

000001d6 <__trampolines_end>:
     1d6:	6e 61       	ori	r22, 0x1E	; 30
     1d8:	6e 00       	.word	0x006e	; ????

000001da <__c.2332>:
     1da:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1ea:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1fa:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     20a:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     21a:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     22a:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     23a:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     24a:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     25a:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     26a:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     27a:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     28a:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     29a:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2aa:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2ba:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     2ca:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000002d8 <__c.3690>:
     2d8:	63 73 5f 64 69 73 61 62 6c 65 20 77 61 73 3a 20     cs_disable was: 
     2e8:	25 64 2c 20 77 61 6e 74 3a 20 25 64 0a 00           %d, want: %d..

000002f6 <__c.3685>:
     2f6:	63 73 5f 65 6e 61 62 6c 65 20 77 61 73 3a 20 25     cs_enable was: %
     306:	64 2c 20 77 61 6e 74 3a 20 25 64 0a 00              d, want: %d..

00000313 <__c.3716>:
     313:	73 61 66 65 66 72 65 65 3a 20 46 52 45 45 20 45     safefree: FREE E
     323:	52 52 4f 52 20 28 25 75 29 2c 20 74 6f 70 3a 28     RROR (%u), top:(
     333:	25 75 29 0a 00                                      %u)..

00000338 <__c.3707>:
     338:	73 61 66 65 6d 61 6c 6c 6f 63 28 25 64 29 20 66     safemalloc(%d) f
     348:	61 69 6c 65 64 21 0a 00                             ailed!..

00000350 <__c.3701>:
     350:	73 61 66 65 63 61 6c 6c 6f 63 28 25 64 2c 25 64     safecalloc(%d,%d
     360:	29 20 66 61 69 6c 65 64 21 0a 00                    ) failed!..

0000036b <__c.3686>:
     36b:	20 20 5f 5f 62 72 6b 76 61 6c 3a 20 20 20 20 25       __brkval:    %
     37b:	35 75 0a 00                                         5u..

0000037f <__c.3684>:
     37f:	20 20 4d 61 6c 6c 6f 63 20 73 74 61 72 74 20 25       Malloc start %
     38f:	35 75 20 20 65 6e 64 3a 20 25 35 75 0a 00           5u  end: %5u..

0000039d <__c.3682>:
     39d:	20 20 48 65 61 70 3a 20 73 74 61 72 74 3a 20 25       Heap: start: %
     3ad:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000003bb <__c.3680>:
     3bb:	20 20 44 61 74 61 20 20 73 74 61 72 74 3a 20 25       Data  start: %
     3cb:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000003d9 <__c.3678>:
     3d9:	20 20 42 53 53 20 20 20 73 74 61 72 74 3a 20 25       BSS   start: %
     3e9:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000003f7 <__c.3676>:
     3f7:	20 20 53 74 61 63 6b 20 46 72 65 65 3a 20 20 25       Stack Free:  %
     407:	75 0a 00                                            u..

0000040a <__c.3674>:
     40a:	20 20 53 74 61 63 6b 20 54 6f 70 3a 20 20 20 25       Stack Top:   %
     41a:	75 0a 00                                            u..

0000041d <__c.3672>:
     41d:	46 72 65 65 20 52 61 6d 3a 25 75 0a 00              Free Ram:%u..

0000042a <__c.3670>:
     42a:	53 50 49 30 5f 4d 6f 64 65 3a 20 49 6e 76 61 6c     SPI0_Mode: Inval
     43a:	69 64 20 6d 6f 64 65 28 25 64 29 0a 00              id mode(%d)..

00000447 <__c.3702>:
     447:	72 74 63 5f 72 65 61 64 20 65 72 72 6f 72 0a 00     rtc_read error..

00000457 <__c.3695>:
     457:	72 74 63 5f 77 72 69 74 65 20 65 72 72 6f 72 0a     rtc_write error.
	...

00000468 <__c.3685>:
     468:	72 74 63 5f 69 6e 69 74 20 72 61 6d 20 2d 20 77     rtc_init ram - w
     478:	72 69 74 65 20 65 72 72 6f 72 0a 00                 rite error..

00000484 <__c.3683>:
     484:	72 74 63 20 5f 77 72 69 74 65 20 65 70 6f 63 68     rtc _write epoch
     494:	20 66 61 69 6c 65 64 0a 00                           failed..

0000049d <__c.3672>:
     49d:	72 74 63 5f 72 75 6e 20 2d 20 77 72 69 74 65 20     rtc_run - write 
     4ad:	65 72 72 6f 72 0a 00                                error..

000004b4 <__c.3670>:
     4b4:	72 74 63 5f 72 75 6e 20 72 65 61 64 20 65 72 72     rtc_run read err
     4c4:	6f 72 0a 00                                         or..

000004c8 <__c.3662>:
     4c8:	72 74 63 5f 73 74 61 74 65 20 72 65 61 64 20 65     rtc_state read e
     4d8:	72 72 6f 72 0a 00                                   rror..

000004de <__c.3820>:
     4de:	25 73 20 65 78 70 65 63 74 65 64 20 25 64 20 61     %s expected %d a
     4ee:	72 67 75 6d 65 6e 74 73 20 6f 6e 6c 79 20 67 6f     rguments only go
     4fe:	74 20 25 64 0a 00                                   t %d..

00000504 <__c.3654>:
     504:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     514:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000524 <__c.3733>:
     524:	54 69 6d 65 72 73 20 65 6e 61 62 6c 65 64 0a 00     Timers enabled..

00000534 <__c.3731>:
     534:	43 6c 6f 63 6b 20 49 6e 73 74 61 6c 6c 65 64 0a     Clock Installed.
	...

00000545 <__c.3729>:
     545:	43 6c 6f 63 6b 20 74 61 73 6b 20 69 6e 69 74 20     Clock task init 
     555:	66 61 69 6c 65 64 0a 00                             failed..

0000055d <__c.3727>:
     55d:	43 6c 6f 63 6b 20 49 6e 69 74 0a 00                 Clock Init..

00000569 <__c.3725>:
     569:	54 69 6d 65 72 73 20 63 6f 6e 66 69 67 75 72 65     Timers configure
     579:	64 0a 00                                            d..

0000057c <__c.3723>:
     57c:	54 69 6d 65 72 73 20 69 6e 69 74 20 63 61 6c 6c     Timers init call
     58c:	65 64 0a 00                                         ed..

00000590 <__c.3703>:
     590:	5b 54 69 6d 65 3a 25 73 5d 0a 00                    [Time:%s]..

0000059b <__c.3701>:
     59b:	5b 25 73 20 54 69 6d 65 3a 25 73 5d 0a 00           [%s Time:%s]..

000005a9 <__c.3692>:
     5a9:	5b 53 65 63 6f 6e 64 73 3a 20 25 73 5d 0a 00        [Seconds: %s]..

000005b8 <__c.3687>:
     5b8:	25 6c 64 2e 25 30 39 6c 64 00                       %ld.%09ld.

000005c2 <__c.3667>:
     5c2:	73 65 74 5f 74 69 6d 65 72 73 3a 20 4e 6f 20 6d     set_timers: No m
     5d2:	6f 72 65 20 74 69 6d 65 72 73 21 0a 00              ore timers!..

000005df <__c.3942>:
     5df:	63 6c 6b 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     clk time:    %s.
	...

000005f0 <__c.3940>:
     5f0:	63 6c 6b 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     clk seconds: %lu
     600:	0a 00                                               ..

00000602 <__c.3938>:
     602:	52 54 43 20 72 65 61 64 20 66 61 69 6c 65 64 0a     RTC read failed.
	...

00000613 <__c.3936>:
     613:	72 74 63 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     rtc time:    %s.
	...

00000624 <__c.3934>:
     624:	72 74 63 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     rtc seconds: %lu
     634:	0a 00                                               ..

00000636 <__c.3927>:
     636:	75 73 65 20 73 65 74 64 61 74 65 20 63 6f 6d 6d     use setdate comm
     646:	61 6e 64 20 74 6f 20 63 68 61 6e 67 65 20 74 69     and to change ti
     656:	6d 65 0a 00                                         me..

0000065a <__c.3925>:
     65a:	72 74 63 20 72 65 61 64 20 65 72 72 6f 72 61 66     rtc read erroraf
     66a:	74 65 72 20 69 6e 69 74 0a 00                       ter init..

00000674 <__c.3923>:
     674:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     684:	61 69 6c 65 64 0a 00                                ailed..

0000068b <__c.3921>:
     68b:	61 74 74 65 6d 70 74 69 6e 67 20 72 74 63 20 69     attempting rtc i
     69b:	6e 69 74 0a 00                                      nit..

000006a0 <__c.3919>:
     6a0:	72 74 63 20 75 6e 69 6e 69 74 69 6c 69 7a 65 64     rtc uninitilized
     6b0:	0a 00                                               ..

000006b2 <__c.3910>:
     6b2:	44 53 54 20 45 4e 44 20 20 20 20 20 20 20 20 20     DST END         
     6c2:	47 4d 54 3a 20 25 73 0a 00                          GMT: %s..

000006cb <__c.3908>:
     6cb:	44 53 54 20 53 54 41 52 54 20 20 20 20 20 20 20     DST START       
     6db:	47 4d 54 3a 20 25 73 0a 00                          GMT: %s..

000006e4 <__c.3904>:
     6e4:	44 53 54 20 45 4e 44 20 20 20 6c 6f 63 61 6c 74     DST END   localt
     6f4:	69 6d 65 3a 20 25 73 0a 00                          ime: %s..

000006fd <__c.3902>:
     6fd:	44 53 54 20 53 54 41 52 54 20 6c 6f 63 61 6c 74     DST START localt
     70d:	69 6d 65 3a 20 25 73 0a 00                          ime: %s..

00000716 <__c.3873>:
     716:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     726:	61 69 6c 65 64 0a 00                                ailed..

0000072d <__c.3871>:
     72d:	69 6e 76 61 6c 69 64 20 6d 69 6e 3a 20 25 64 0a     invalid min: %d.
	...

0000073e <__c.3869>:
     73e:	69 6e 76 61 6c 69 64 20 68 6f 75 72 3a 20 25 64     invalid hour: %d
     74e:	0a 00                                               ..

00000750 <__c.3867>:
     750:	69 6e 76 61 6c 69 64 20 64 61 79 3a 20 25 64 0a     invalid day: %d.
	...

00000761 <__c.3865>:
     761:	69 6e 76 61 6c 69 64 20 6d 6f 6e 3a 20 25 64 0a     invalid mon: %d.
	...

00000772 <__c.3863>:
     772:	69 6e 76 61 6c 69 64 20 79 65 61 72 3a 20 25 64     invalid year: %d
     782:	0a 00                                               ..

00000784 <__c.3842>:
     784:	45 6e 74 65 72 20 64 61 74 65 20 59 59 59 59 20     Enter date YYYY 
     794:	4d 4d 20 44 44 20 48 48 3a 4d 4d 3a 53 53 20 3e     MM DD HH:MM:SS >
	...

000007a5 <__c.3717>:
     7a5:	25 73 20 25 73 20 25 32 64 20 25 30 32 64 3a 25     %s %s %2d %02d:%
     7b5:	30 32 64 3a 25 30 32 64 20 25 34 64 00              02d:%02d %4d.

000007c2 <__c.3685>:
     7c2:	73 65 6c 65 63 74 20 66 61 69 6c 65 64 21 0a 00     select failed!..

000007d2 <__c.3714>:
     7d2:	45 4e 44 20 4d 4d 43 20 49 4e 49 54 0a 00           END MMC INIT..

000007e0 <__c.3712>:
     7e0:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 3a 20     MMC Block Size: 
     7f0:	25 6c 64 0a 00                                      %ld..

000007f5 <__c.3710>:
     7f5:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 20 2d     MMC Block Size -
     805:	20 72 65 61 64 20 66 61 69 6c 65 64 0a 00            read failed..

00000813 <__c.3707>:
     813:	2c 20 43 6f 64 65 20 70 61 67 65 3a 20 25 75 0a     , Code page: %u.
	...

00000824 <__c.3705>:
     824:	4c 46 4e 20 45 6e 61 62 6c 65 64 00                 LFN Enabled.

00000830 <__c.3703>:
     830:	53 54 41 52 54 20 4d 4d 43 20 49 4e 49 54 0a 00     START MMC INIT..

00000840 <__c.3690>:
     840:	4d 4d 43 20 54 49 4d 45 4f 55 54 0a 00              MMC TIMEOUT..

0000084d <__c.3662>:
     84d:	4d 4d 43 20 43 6c 6f 63 6b 20 74 61 73 6b 20 69     MMC Clock task i
     85d:	6e 69 74 20 66 61 69 6c 65 64 0a 00                 nit failed..

00000869 <__c.3734>:
     869:	0a 00                                               ..

0000086b <__c.3732>:
     86b:	25 73 20 25 75 2f 25 30 32 75 2f 25 30 32 75 20     %s %u/%02u/%02u 
     87b:	25 30 32 75 3a 25 30 32 75 20 25 39 6c 75 20 25     %02u:%02u %9lu %
     88b:	73 00                                               s.

0000088d <__c.3730>:
     88d:	66 61 74 66 73 5f 66 69 6c 69 6e 66 6f 5f 6c 69     fatfs_filinfo_li
     89d:	73 74 3a 20 65 6d 70 74 79 0a 00                    st: empty..

000008a8 <__c.3724>:
     8a8:	25 75 20 66 69 6c 65 73 2c 20 25 6c 75 20 62 79     %u files, %lu by
     8b8:	74 65 73 2e 0a 25 75 20 66 6f 6c 64 65 72 73 2e     tes..%u folders.
     8c8:	0a 25 6c 75 20 4b 42 20 74 6f 74 61 6c 20 64 69     .%lu KB total di
     8d8:	73 6b 20 73 70 61 63 65 2e 0a 25 6c 75 20 4b 42     sk space..%lu KB
     8e8:	20 61 76 61 69 6c 61 62 6c 65 2e 0a 00               available...

000008f5 <__c.3722>:
     8f5:	56 6f 6c 75 6d 65 20 53 2f 4e 20 20 20 20 20 20     Volume S/N      
     905:	20 20 20 20 20 20 20 20 3d 20 25 30 34 58 2d 25             = %04X-%
     915:	30 34 58 0a 00                                      04X..

0000091a <__c.3720>:
     91a:	56 6f 6c 75 6d 65 20 6e 61 6d 65 20 20 20 20 20     Volume name     
     92a:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

00000938 <__c.3718>:
     938:	44 61 74 61 20 73 74 61 72 74 20 28 6c 62 61 29     Data start (lba)
     948:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000957 <__c.3716>:
     957:	44 49 52 20 73 74 61 72 74 20 28 6c 62 61 2c 63     DIR start (lba,c
     967:	6c 75 73 74 6f 72 29 20 3d 20 25 6c 75 0a 00        lustor) = %lu..

00000976 <__c.3714>:
     976:	46 41 54 20 73 74 61 72 74 20 28 6c 62 61 29 20     FAT start (lba) 
     986:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000995 <__c.3712>:
     995:	4e 75 6d 62 65 72 20 6f 66 20 63 6c 75 73 74 65     Number of cluste
     9a5:	72 73 20 20 20 20 20 20 3d 20 25 6c 75 0a 00        rs      = %lu..

000009b4 <__c.3710>:
     9b4:	53 65 63 74 6f 72 73 2f 46 41 54 20 20 20 20 20     Sectors/FAT     
     9c4:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

000009d3 <__c.3708>:
     9d3:	52 6f 6f 74 20 44 49 52 20 65 6e 74 72 69 65 73     Root DIR entries
     9e3:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

000009f1 <__c.3706>:
     9f1:	4e 75 6d 62 65 72 20 6f 66 20 46 41 54 73 20 20     Number of FATs  
     a01:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

00000a0f <__c.3704>:
     a0f:	42 79 74 65 73 2f 43 6c 75 73 74 65 72 20 20 20     Bytes/Cluster   
     a1f:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000a2e <__c.3702>:
     a2e:	46 41 54 20 74 79 70 65 20 20 20 20 20 20 20 20     FAT type        
     a3e:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

00000a4c <__c.3700>:
     a4c:	66 61 74 66 73 20 73 74 61 74 75 73 3a 25 73 0a     fatfs status:%s.
	...

00000a5d <__c.3664>:
     a5d:	72 63 3d 25 75 0a 00                                rc=%u..

00000a64 <__c.3702>:
     a64:	2c 20 25 31 30 6c 75 4b 20 62 79 74 65 73 20 66     , %10luK bytes f
     a74:	72 65 65 0a 00                                      ree..

00000a79 <__c.3700>:
     a79:	25 34 75 20 46 69 6c 65 28 73 29 2c 25 31 30 6c     %4u File(s),%10l
     a89:	75 20 62 79 74 65 73 20 74 6f 74 61 6c 0a 25 34     u bytes total.%4
     a99:	75 20 44 69 72 28 73 29 00                          u Dir(s).

00000aa2 <__c.3696>:
     aa2:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000ab0 <__c.3683>:
     ab0:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     ac0:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000ad0 <__c.3681>:
     ad0:	45 4e 44 20 4d 4d 43 20 54 45 53 54 0a 00           END MMC TEST..

00000ade <__c.3679>:
     ade:	4d 4d 43 20 44 69 72 65 63 74 6f 72 79 20 4c 69     MMC Directory Li
     aee:	73 74 0a 00                                         st..

00000af2 <__c.3677>:
     af2:	53 54 41 52 54 20 4d 4d 43 20 54 45 53 54 0a 00     START MMC TEST..

00000b02 <__c.3675>:
     b02:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     b12:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000b22 <__c.3667>:
     b22:	69 6e 64 3a 25 64 2c 61 72 67 63 3a 25 64 0a 00     ind:%d,argc:%d..

00000b32 <__c.3657>:
     b32:	4e 6f 74 65 3a 20 66 61 74 66 73 20 74 65 73 74     Note: fatfs test
     b42:	73 20 4d 55 53 54 20 73 74 61 72 74 20 77 69 74     s MUST start wit
     b52:	68 20 22 66 61 74 66 73 22 20 6b 65 79 77 6f 72     h "fatfs" keywor
     b62:	64 0a 66 61 74 66 73 20 68 65 6c 70 0a 66 61 74     d.fatfs help.fat
     b72:	66 73 20 6d 6d 63 5f 74 65 73 74 0a 66 61 74 66     fs mmc_test.fatf
     b82:	73 20 6d 6d 63 5f 69 6e 69 74 0a 66 61 74 66 73     s mmc_init.fatfs
     b92:	20 6c 73 20 64 69 72 0a 66 61 74 66 73 20 73 74      ls dir.fatfs st
     ba2:	61 74 75 73 20 66 69 6c 65 0a 0a 00                 atus file...

00000bae <__c.3655>:
     bae:	66 61 74 66 73 20 68 65 6c 70 0a 00                 fatfs help..

00000bba <__c.4014>:
     bba:	45 78 70 65 63 74 65 64 20 2f 64 65 76 2f 73 64     Expected /dev/sd
     bca:	61 20 2e 2e 20 2f 64 65 76 2f 73 64 6a 0a 00        a .. /dev/sdj..

00000bd9 <__c.3987>:
     bd9:	25 73 0a 00                                         %s..

00000bdd <__c.3985>:
     bdd:	25 73 3a 20 25 73 0a 00                             %s: %s..

00000be5 <__c.3881>:
     be5:	09 63 74 69 6d 65 3a 20 25 73 0a 00                 .ctime: %s..

00000bf1 <__c.3879>:
     bf1:	09 6d 74 69 6d 65 3a 20 25 73 0a 00                 .mtime: %s..

00000bfd <__c.3877>:
     bfd:	09 61 74 69 6d 65 3a 20 25 73 0a 00                 .atime: %s..

00000c09 <__c.3875>:
     c09:	09 47 49 44 3a 20 20 20 25 6c 75 0a 00              .GID:   %lu..

00000c16 <__c.3873>:
     c16:	09 55 49 44 3a 20 20 20 25 6c 75 0a 00              .UID:   %lu..

00000c23 <__c.3871>:
     c23:	09 4d 6f 64 65 3a 20 20 25 6c 6f 0a 00              .Mode:  %lo..

00000c30 <__c.3869>:
     c30:	55 6e 6b 6e 6f 77 6e 0a 00                          Unknown..

00000c39 <__c.3867>:
     c39:	46 69 6c 65 0a 00                                   File..

00000c3f <__c.3865>:
     c3f:	44 49 52 0a 00                                      DIR..

00000c44 <__c.3863>:
     c44:	09 54 79 70 65 3a 20 20 00                          .Type:  .

00000c4d <__c.3861>:
     c4d:	09 53 69 7a 65 3a 20 20 25 6c 75 0a 00              .Size:  %lu..

00000c5a <__c.3740>:
     c5a:	53 65 65 6b 20 66 61 69 6c 65 64 00                 Seek failed.

00000c66 <__c.3669>:
     c66:	66 70 75 74 63 20 73 74 72 65 61 6d 2d 3e 70 75     fputc stream->pu
     c76:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000c7e <__c.3662>:
     c7e:	66 67 65 74 63 20 73 74 72 65 61 6d 2d 3e 67 65     fgetc stream->ge
     c8e:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000c96 <__c.3816>:
     c96:	46 69 6c 65 73 3a 20 25 64 0a 00                    Files: %d..

00000ca1 <__c.3812>:
     ca1:	6e 61 6d 65 3a 5b 25 73 5d 20 74 6f 6f 20 6c 6f     name:[%s] too lo
     cb1:	6e 67 20 77 69 74 68 20 66 75 6c 6c 20 70 61 74     ng with full pat
     cc1:	68 0a 00                                            h..

00000cc4 <__c.3809>:
     cc4:	6f 70 65 6e 64 69 72 20 66 61 69 6c 65 64 0a 00     opendir failed..

00000cd4 <__c.3804>:
     cd4:	6c 73 3a 20 63 61 6e 6e 6f 74 20 73 74 61 74 20     ls: cannot stat 
     ce4:	5b 25 73 5d 0a 00                                   [%s]..

00000cea <__c.3802>:
     cea:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000cf8 <__c.3800>:
     cf8:	6c 73 3a 20 43 61 6e 27 74 20 67 65 74 20 63 75     ls: Can't get cu
     d08:	72 72 65 6e 74 20 64 69 72 65 63 74 6f 72 79 0a     rrent directory.
	...

00000d19 <__c.3787>:
     d19:	25 73 20 6e 6f 6e 65 20 6e 6f 6e 65 20 25 31 32     %s none none %12
     d29:	6c 64 20 25 73 20 25 73 0a 00                       ld %s %s..

00000d33 <__c.3782>:
     d33:	25 73 0a 00                                         %s..

00000d37 <__c.3780>:
     d37:	63 61 6e 20 6e 6f 74 20 73 74 61 74 3a 20 25 73     can not stat: %s
     d47:	0a 00                                               ..

00000d49 <__c.3768>:
     d49:	0d 00                                               ..

00000d4b <__c.3766>:
     d4b:	4d 6f 72 65 2e 2e 00                                More...

00000d52 <__c.3756>:
     d52:	25 6c 75 20 62 79 74 65 73 20 63 6f 70 69 65 64     %lu bytes copied
     d62:	2e 0a 00                                            ...

00000d65 <__c.3752>:
     d65:	43 6f 70 69 65 64 3a 20 25 30 38 6c 64 0d 00        Copied: %08ld..

00000d74 <__c.3749>:
     d74:	57 72 69 74 65 20 65 72 72 6f 72 0a 00              Write error..

00000d81 <__c.3747>:
     d81:	0a 43 6f 70 79 69 6e 67 2e 2e 2e 0a 00              .Copying.....

00000d8e <__c.3745>:
     d8e:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000d9e <__c.3743>:
     d9e:	43 72 65 61 74 69 6e 67 20 25 73 0a 00              Creating %s..

00000dab <__c.3741>:
     dab:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000dbb <__c.3739>:
     dbb:	4f 70 65 6e 69 6e 67 20 25 73 0a 00                 Opening %s..

00000dc7 <__c.3728>:
     dc7:	25 6c 64 20 62 79 74 65 73 0a 00                    %ld bytes..

00000dd2 <__c.3726>:
     dd2:	0a 00                                               ..

00000dd4 <__c.3721>:
     dd4:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000de4 <__c.3711>:
     de4:	25 73 0a 00                                         %s..

00000de8 <__c.3688>:
     de8:	70 6f 73 69 78 20 70 72 65 66 69 78 20 69 73 20     posix prefix is 
     df8:	6f 70 74 69 6f 6e 61 6c 0a 70 6f 73 69 78 20 63     optional.posix c
     e08:	61 74 20 66 69 6c 65 20 5b 2d 70 5d 0a 70 6f 73     at file [-p].pos
     e18:	69 78 20 63 64 20 64 69 72 0a 70 6f 73 69 78 20     ix cd dir.posix 
     e28:	63 6f 70 79 20 66 69 6c 65 31 20 66 69 6c 65 32     copy file1 file2
     e38:	0a 70 6f 73 69 78 20 6c 73 20 64 69 72 20 5b 2d     .posix ls dir [-
     e48:	6c 5d 0a 70 6f 73 69 78 20 6d 6b 64 69 72 20 64     l].posix mkdir d
     e58:	69 72 0a 70 6f 73 69 78 20 70 61 67 65 20 4e 4e     ir.posix page NN
     e68:	0a 70 6f 73 69 78 20 70 77 64 0a 70 6f 73 69 78     .posix pwd.posix
     e78:	20 72 6d 20 66 69 6c 65 0a 70 6f 73 69 78 20 72      rm file.posix r
     e88:	6d 64 69 72 20 64 69 72 0a 70 6f 73 69 78 20 72     mdir dir.posix r
     e98:	65 6e 61 6d 65 20 6f 6c 64 20 6e 65 77 0a 0a 00     ename old new...

00000ea8 <__c.3686>:
     ea8:	70 6f 73 69 78 20 68 65 6c 70 0a 00                 posix help..

00000eb4 <__c.3877>:
     eb4:	43 6c 6f 73 65 20 65 72 72 6f 72 3a 20 00           Close error: .

00000ec2 <__c.3871>:
     ec2:	53 65 65 6b 20 65 72 72 6f 72 3a 20 00              Seek error: .

00000ecf <__c.3864>:
     ecf:	57 72 69 74 65 20 65 72 72 6f 72 3a 20 00           Write error: .

00000edd <__c.3855>:
     edd:	52 65 61 64 20 65 72 72 6f 72 3a 20 00              Read error: .

00000eea <__c.3846>:
     eea:	4f 70 65 6e 20 65 72 72 6f 72 3a 5b 25 73 5d 20     Open error:[%s] 
	...

00000efb <__c.3832>:
     efb:	5b 50 50 52 20 44 49 53 41 42 4c 45 20 41 4c 4c     [PPR DISABLE ALL
     f0b:	5d 0a 00                                            ]..

00000f0e <__c.3814>:
     f0e:	47 50 49 42 20 43 6c 6f 63 6b 20 74 61 73 6b 20     GPIB Clock task 
     f1e:	69 6e 69 74 20 66 61 69 6c 65 64 0a 00              init failed..

00000f2b <__c.4396>:
     f2b:	5b 67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 20     [gpib_write_str 
     f3b:	73 65 6e 74 28 25 64 29 20 65 78 70 65 63 74 65     sent(%d) expecte
     f4b:	64 28 25 64 29 5d 0a 00                             d(%d)]..

00000f53 <__c.4391>:
     f53:	67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 3a 20     gpib_write_str: 
     f63:	73 69 7a 65 20 3d 20 30 0a 00                       size = 0..

00000f6d <__c.4381>:
     f6d:	5b 67 70 69 62 5f 72 65 61 64 5f 73 74 72 20 72     [gpib_read_str r
     f7d:	65 61 64 28 25 64 29 20 65 78 70 65 63 74 65 64     ead(%d) expected
     f8d:	28 25 64 29 5d 0a 00                                (%d)]..

00000f94 <__c.4377>:
     f94:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 28 69 6e     gpib_read_str(in
     fa4:	64 3a 25 64 29 3a 20 41 54 4e 20 25 30 32 58 48     d:%d): ATN %02XH
     fb4:	20 75 6e 65 78 70 65 63 74 65 64 0a 00               unexpected..

00000fc1 <__c.4374>:
     fc1:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 3a 20 73     gpib_read_str: s
     fd1:	69 7a 65 20 3d 20 30 0a 00                          ize = 0..

00000fda <__c.4358>:
     fda:	20 4d 53 41 20 25 30 32 58 68 00                     MSA %02Xh.

00000fe5 <__c.4356>:
     fe5:	20 4d 54 41 20 25 30 32 58 68 00                     MTA %02Xh.

00000ff0 <__c.4354>:
     ff0:	20 4d 4c 41 20 25 30 32 58 68 00                     MLA %02Xh.

00000ffb <__c.4350>:
     ffb:	20 20 20 20 20 00                                        .

00001001 <__c.4348>:
    1001:	25 30 32 58 20 25 63 20 00                          %02X %c .

0000100a <__c.4306>:
    100a:	3c 4e 52 46 44 3d 25 64 2c 4e 44 41 56 3d 25 64     <NRFD=%d,NDAV=%d
    101a:	3e 0a 00                                            >..

0000101d <__c.4302>:
    101d:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    102d:	20 44 41 56 3d 3d 31 3e 0a 00                        DAV==1>..

00001037 <__c.4298>:
    1037:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    1047:	20 4e 44 41 43 3d 3d 31 3e 0a 00                     NDAC==1>..

00001052 <__c.4295>:
    1052:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    1062:	20 4e 52 46 44 3d 3d 30 3e 0a 00                     NRFD==0>..

0000106d <__c.4290>:
    106d:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    107d:	20 4e 52 46 44 3d 3d 31 20 26 26 20 4e 44 41 43      NRFD==1 && NDAC
    108d:	20 3d 3d 20 30 3e 0a 00                              == 0>..

00001095 <__c.4286>:
    1095:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    10a5:	20 44 41 56 3d 3d 31 3e 0a 00                        DAV==1>..

000010af <__c.4269>:
    10af:	67 70 69 62 5f 75 6e 72 65 61 64 3a 20 65 72 72     gpib_unread: err
    10bf:	6f 72 2c 20 63 61 6e 20 6f 6e 6c 79 20 62 65 20     or, can only be 
    10cf:	63 61 6c 6c 65 64 20 6f 6e 63 65 21 0a 00           called once!..

000010dd <__c.4264>:
    10dd:	5b 52 45 4e 20 48 49 5d 0a 00                       [REN HI]..

000010e7 <__c.4262>:
    10e7:	5b 52 45 4e 20 4c 4f 57 5d 0a 00                    [REN LOW]..

000010f2 <__c.4257>:
    10f2:	5b 49 46 43 20 53 45 4e 54 5d 0a 00                 [IFC SENT]..

000010fe <__c.4249>:
    10fe:	5b 50 50 52 3a 25 30 32 58 48 2c 20 50 49 4e 3a     [PPR:%02XH, PIN:
    110e:	25 30 32 58 48 2c 20 44 44 52 3a 25 30 32 58 48     %02XH, DDR:%02XH
    111e:	5d 0a 00                                            ]..

00001121 <__c.4243>:
    1121:	5b 44 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [DPPR bit:%d, ma
    1131:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

0000113c <__c.4241>:
    113c:	67 70 69 62 5f 64 69 73 61 62 6c 65 5f 50 50 52     gpib_disable_PPR
    114c:	3a 20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20     : bit %d out of 
    115c:	72 61 6e 67 65 0a 00                                range..

00001163 <__c.4236>:
    1163:	5b 45 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [EPPR bit:%d, ma
    1173:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

0000117e <__c.4234>:
    117e:	67 70 69 62 5f 65 6e 61 62 6c 65 5f 50 50 52 3a     gpib_enable_PPR:
    118e:	20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20 72      bit %d out of r
    119e:	61 6e 67 65 0a 00                                   ange..

000011a4 <__c.4229>:
    11a4:	5b 47 50 49 42 20 53 54 41 54 45 20 49 4e 49 54     [GPIB STATE INIT
    11b4:	5d 0a 00                                            ]..

000011b7 <__c.4224>:
    11b7:	5b 47 50 49 42 20 42 55 53 5f 49 4e 49 54 5d 0a     [GPIB BUS_INIT].
	...

000011c8 <__c.4409>:
    11c8:	0a 00                                               ..

000011ca <__c.4401>:
    11ca:	2e 00                                               ..

000011cc <__c.4399>:
    11cc:	25 63 00                                            %c.

000011cf <__c.4397>:
    11cf:	20 7c 20 00                                          | .

000011d3 <__c.4392>:
    11d3:	20 25 30 32 58 00                                    %02X.

000011d9 <__c.4390>:
    11d9:	0a 00                                               ..

000011db <__c.4388>:
    11db:	5b 44 75 6d 70 3a 20 25 64 5d 0a 00                 [Dump: %d]..

000011e7 <__c.4377>:
    11e7:	5b 50 52 49 4e 54 45 52 20 63 6c 6f 73 65 5d 0a     [PRINTER close].
	...

000011f8 <__c.4372>:
    11f8:	5b 53 41 20 25 30 32 58 48 2c 20 6c 69 73 74 65     [SA %02XH, liste
    1208:	6e 3a 25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30     n:%02XH, talk:%0
    1218:	32 58 48 5d 0a 00                                   2XH]..

0000121e <__c.4370>:
    121e:	5b 53 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [SA %02XH AMIGO]
    122e:	0a 00                                               ..

00001230 <__c.4368>:
    1230:	5b 53 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [SA %02XH SS80].
	...

00001241 <__c.4363>:
    1241:	5b 54 41 20 25 30 32 58 48 5d 0a 00                 [TA %02XH]..

0000124d <__c.4361>:
    124d:	5b 50 52 49 4e 54 45 52 20 4f 50 45 4e 5d 0a 00     [PRINTER OPEN]..

0000125d <__c.4359>:
    125d:	5b 54 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [TA %02XH PRINTE
    126d:	52 5d 0a 00                                         R]..

00001271 <__c.4357>:
    1271:	5b 54 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [TA %02XH AMIGO]
    1281:	0a 00                                               ..

00001283 <__c.4355>:
    1283:	5b 54 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [TA %02XH SS80].
	...

00001294 <__c.4353>:
    1294:	5b 55 4e 54 5d 0a 00                                [UNT]..

0000129b <__c.4348>:
    129b:	5b 4c 41 20 25 30 32 58 48 5d 0a 00                 [LA %02XH]..

000012a7 <__c.4346>:
    12a7:	5b 4c 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [LA %02XH PRINTE
    12b7:	52 5d 0a 00                                         R]..

000012bb <__c.4344>:
    12bb:	5b 4c 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [LA %02XH SS80].
	...

000012cc <__c.4342>:
    12cc:	5b 4c 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [LA %02XH AMIGO]
    12dc:	0a 00                                               ..

000012de <__c.4340>:
    12de:	0a 00                                               ..

000012e0 <__c.4338>:
    12e0:	5b 55 4e 4c 5d 0a 00                                [UNL]..

000012e7 <__c.4333>:
    12e7:	5b 48 50 49 42 20 28 25 30 32 58 48 29 20 6e 6f     [HPIB (%02XH) no
    12f7:	74 20 64 65 66 69 6e 65 64 5d 0a 00                 t defined]..

00001303 <__c.4331>:
    1303:	5b 44 43 4c 5d 0a 00                                [DCL]..

0000130a <__c.4329>:
    130a:	5b 53 44 43 20 41 4d 49 47 4f 5d 0a 00              [SDC AMIGO]..

00001317 <__c.4327>:
    1317:	5b 53 44 43 20 53 53 38 30 5d 0a 00                 [SDC SS80]..

00001323 <__c.4325>:
    1323:	5b 53 44 43 5d 0a 00                                [SDC]..

0000132a <__c.4323>:
    132a:	5b 53 50 44 5d 0a 00                                [SPD]..

00001331 <__c.4321>:
    1331:	5b 53 50 45 5d 0a 00                                [SPE]..

00001338 <__c.4319>:
    1338:	5b 50 50 55 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPU unsupported
    1348:	5d 0a 00                                            ]..

0000134b <__c.4317>:
    134b:	5b 50 50 43 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPC unsupported
    135b:	5d 0a 00                                            ]..

0000135e <__c.4312>:
    135e:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    136e:	48 3d 25 30 34 58 48 5d 0a 00                       H=%04XH]..

00001378 <__c.4310>:
    1378:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    1388:	48 3d 25 30 34 58 48 20 46 41 49 4c 45 44 5d 0a     H=%04XH FAILED].
	...

00001399 <__c.4283>:
    1399:	3c 4d 45 44 49 41 20 4d 49 53 53 49 4e 47 3e 0a     <MEDIA MISSING>.
	...

000013aa <__c.4281>:
    13aa:	3c 49 4e 54 45 52 52 55 50 54 3e 0a 00              <INTERRUPT>..

000013b7 <__c.4279>:
    13b7:	3c 42 55 53 3e 0a 00                                <BUS>..

000013be <__c.4277>:
    13be:	3c 54 49 4d 45 4f 55 54 3e 0a 00                    <TIMEOUT>..

000013c9 <__c.4275>:
    13c9:	3c 49 46 43 3e 0a 00                                <IFC>..

000013d0 <__c.4270>:
    13d0:	43 61 70 74 75 72 69 6e 67 20 43 6c 6f 73 65 64     Capturing Closed
    13e0:	0a 00                                               ..

000013e2 <__c.4268>:
    13e2:	44 6f 6e 65 0a 00                                   Done..

000013e8 <__c.4264>:
    13e8:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

000013f4 <__c.4262>:
    13f4:	50 72 65 73 73 20 41 4e 59 20 6b 65 79 20 74 6f     Press ANY key to
    1404:	20 65 78 69 74 0a 00                                 exit..

0000140b <__c.4260>:
    140b:	46 55 4c 4c 20 47 50 49 42 20 42 55 53 20 68 61     FULL GPIB BUS ha
    141b:	6e 64 73 68 61 6b 65 20 6c 6f 67 67 69 6e 67 20     ndshake logging 
    142b:	72 65 71 75 65 73 74 65 64 0a 00                    requested..

00001436 <__c.4258>:
    1436:	43 61 70 74 75 72 69 6e 67 20 47 50 49 42 20 42     Capturing GPIB B
    1446:	55 53 20 74 6f 3a 25 73 0a 00                       US to:%s..

00001450 <__c.4212>:
    1450:	43 61 72 64 20 69 73 20 77 72 69 74 65 20 70 72     Card is write pr
    1460:	6f 74 65 63 74 65 64 0a 00                          otected..

00001469 <__c.4210>:
    1469:	25 73 20 6f 70 65 6e 20 66 61 69 6c 75 72 65 0a     %s open failure.
	...

0000147a <__c.4208>:
    147a:	25 73 20 68 61 64 20 25 64 20 65 72 72 6f 72 73     %s had %d errors
    148a:	0a 00                                               ..

0000148c <__c.4452>:
    148c:	50 6f 72 74 20 64 64 72 20 44 20 52 44 3a 5b 25     Port ddr D RD:[%
    149c:	30 32 58 48 5d 0a 00                                02XH]..

000014a3 <__c.4450>:
    14a3:	50 6f 72 74 20 64 64 72 20 43 20 52 44 3a 5b 25     Port ddr C RD:[%
    14b3:	30 32 58 48 5d 0a 00                                02XH]..

000014ba <__c.4448>:
    14ba:	50 6f 72 74 20 64 64 72 20 42 20 52 44 3a 5b 25     Port ddr B RD:[%
    14ca:	30 32 58 48 5d 0a 00                                02XH]..

000014d1 <__c.4446>:
    14d1:	50 6f 72 74 20 64 64 72 20 41 20 52 44 3a 5b 25     Port ddr A RD:[%
    14e1:	30 32 58 48 5d 0a 00                                02XH]..

000014e8 <__c.4444>:
    14e8:	50 6f 72 74 20 6c 61 74 63 68 20 44 20 52 44 3a     Port latch D RD:
    14f8:	5b 25 30 32 58 48 5d 0a 00                          [%02XH]..

00001501 <__c.4442>:
    1501:	50 6f 72 74 20 6c 61 74 63 68 20 43 20 52 44 3a     Port latch C RD:
    1511:	5b 25 30 32 58 48 5d 0a 00                          [%02XH]..

0000151a <__c.4440>:
    151a:	50 6f 72 74 20 6c 61 74 63 68 20 42 20 52 44 3a     Port latch B RD:
    152a:	5b 25 30 32 58 48 5d 0a 00                          [%02XH]..

00001533 <__c.4438>:
    1533:	50 6f 72 74 20 6c 61 74 63 68 20 41 20 52 44 3a     Port latch A RD:
    1543:	5b 25 30 32 58 48 5d 0a 00                          [%02XH]..

0000154c <__c.4436>:
    154c:	50 6f 72 74 20 70 69 6e 73 20 44 20 52 44 3a 5b     Port pins D RD:[
    155c:	25 30 32 58 48 5d 0a 00                             %02XH]..

00001564 <__c.4434>:
    1564:	50 6f 72 74 20 70 69 6e 73 20 43 20 52 44 3a 5b     Port pins C RD:[
    1574:	25 30 32 58 48 5d 0a 00                             %02XH]..

0000157c <__c.4432>:
    157c:	50 6f 72 74 20 70 69 6e 73 20 42 20 52 44 3a 5b     Port pins B RD:[
    158c:	25 30 32 58 48 5d 0a 00                             %02XH]..

00001594 <__c.4430>:
    1594:	50 6f 72 74 20 70 69 6e 73 20 41 20 52 44 3a 5b     Port pins A RD:[
    15a4:	25 30 32 58 48 5d 0a 00                             %02XH]..

000015ac <__c.4427>:
    15ac:	64 65 62 75 67 3d 25 30 34 58 48 0a 00              debug=%04XH..

000015b9 <__c.4419>:
    15b9:	67 70 69 62 20 70 72 65 66 69 78 20 69 73 20 6f     gpib prefix is o
    15c9:	70 74 69 6f 6e 61 6c 0a 67 70 69 62 20 61 64 64     ptional.gpib add
    15d9:	72 65 73 73 65 73 0a 67 70 69 62 20 63 6f 6e 66     resses.gpib conf
    15e9:	69 67 0a 67 70 69 62 20 64 65 62 75 67 20 4e 0a     ig.gpib debug N.
    15f9:	67 70 69 62 20 65 6c 61 70 73 65 64 0a 67 70 69     gpib elapsed.gpi
    1609:	62 20 65 6c 61 70 73 65 64 5f 72 65 73 65 74 0a     b elapsed_reset.
    1619:	67 70 69 62 20 74 61 73 6b 0a 67 70 69 62 20 74     gpib task.gpib t
    1629:	72 61 63 65 20 66 69 6c 65 6e 61 6d 65 2e 74 78     race filename.tx
    1639:	74 20 5b 42 55 53 5d 0a 67 70 69 62 20 69 66 63     t [BUS].gpib ifc
    1649:	0a 67 70 69 62 20 70 6c 6f 74 20 66 69 6c 65 6e     .gpib plot filen
    1659:	61 6d 65 2e 74 78 74 0a 67 70 69 62 20 70 70 72     ame.txt.gpib ppr
    1669:	5f 62 69 74 5f 6f 6e 20 4e 0a 67 70 69 62 20 70     _bit_on N.gpib p
    1679:	70 72 5f 62 69 74 5f 6f 66 66 20 4e 0a 67 70 69     pr_bit_off N.gpi
    1689:	62 20 70 70 72 5f 73 65 74 20 58 58 0a 67 70 69     b ppr_set XX.gpi
    1699:	62 20 70 70 72 5f 69 6e 69 74 0a 67 70 69 62 20     b ppr_init.gpib 
    16a9:	70 6f 72 74 20 72 65 61 64 20 70 69 6e 73 20 20     port read pins  
    16b9:	20 5b 41 2d 44 5d 0a 67 70 69 62 20 70 6f 72 74      [A-D].gpib port
    16c9:	20 72 65 61 64 20 6c 61 74 63 68 20 20 5b 41 2d      read latch  [A-
    16d9:	44 5d 0a 67 70 69 62 20 70 6f 72 74 20 72 65 61     D].gpib port rea
    16e9:	64 20 64 64 72 20 20 20 20 5b 41 2d 44 5d 0a 67     d ddr    [A-D].g
    16f9:	70 69 62 20 70 6f 72 74 20 77 72 69 74 65 20 6c     pib port write l
    1709:	61 74 63 68 20 5b 41 2d 44 5d 20 76 61 6c 0a 67     atch [A-D] val.g
    1719:	70 69 62 20 70 6f 72 74 20 77 72 69 74 65 20 70     pib port write p
    1729:	69 6e 73 20 20 5b 41 2d 44 5d 20 76 61 6c 0a 0a     ins  [A-D] val..
	...

0000173a <__c.4417>:
    173a:	67 70 69 62 20 68 65 6c 70 0a 00                    gpib help..

00001745 <__c.4868>:
    1745:	0a 00                                               ..

00001747 <__c.4863>:
    1747:	41 4d 49 47 4f 25 64 00                             AMIGO%d.

0000174f <__c.4861>:
    174f:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    175f:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    176f:	0a 00                                               ..

00001771 <__c.4859>:
    1771:	53 53 38 30 2d 25 64 00                             SS80-%d.

00001779 <__c.4857>:
    1779:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    1789:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    1799:	0a 00                                               ..

0000179b <__c.4844>:
    179b:	0a 00                                               ..

0000179d <__c.4842>:
    179d:	45 4e 44 0a 00                                      END..

000017a2 <__c.4837>:
    17a2:	0a 00                                               ..

000017a4 <__c.4835>:
    17a4:	45 4e 44 0a 00                                      END..

000017a9 <__c.4833>:
    17a9:	20 20 45 4e 44 0a 00                                  END..

000017b0 <__c.4831>:
    17b0:	41 44 44 52 45 53 53 00                             ADDRESS.

000017b8 <__c.4829>:
    17b8:	20 20 43 4f 4e 46 49 47 0a 00                         CONFIG..

000017c2 <__c.4827>:
    17c2:	50 52 49 4e 54 45 52 0a 00                          PRINTER..

000017cb <__c.4825>:
    17cb:	20 20 45 4e 44 0a 00                                  END..

000017d2 <__c.4823>:
    17d2:	23 20 42 4c 4f 43 4b 53 00                          # BLOCKS.

000017db <__c.4821>:
    17db:	43 59 4c 49 4e 44 45 52 53 00                       CYLINDERS.

000017e5 <__c.4819>:
    17e5:	48 45 41 44 53 00                                   HEADS.

000017eb <__c.4817>:
    17eb:	53 45 43 54 4f 52 53 5f 50 45 52 5f 54 52 41 43     SECTORS_PER_TRAC
    17fb:	4b 00                                               K.

000017fd <__c.4815>:
    17fd:	42 59 54 45 53 5f 50 45 52 5f 53 45 43 54 4f 52     BYTES_PER_SECTOR
	...

0000180e <__c.4813>:
    180e:	20 20 47 45 4f 4d 45 54 52 59 0a 00                   GEOMETRY..

0000181a <__c.4811>:
    181a:	20 20 45 4e 44 0a 00                                  END..

00001821 <__c.4809>:
    1821:	49 44 00                                            ID.

00001824 <__c.4807>:
    1824:	20 20 43 4f 4e 46 49 47 0a 00                         CONFIG..

0000182e <__c.4805>:
    182e:	20 20 45 4e 44 0a 00                                  END..

00001835 <__c.4803>:
    1835:	46 49 4c 45 00                                      FILE.

0000183a <__c.4801>:
    183a:	50 50 52 00                                         PPR.

0000183e <__c.4799>:
    183e:	41 44 44 52 45 53 53 00                             ADDRESS.

00001846 <__c.4797>:
    1846:	20 20 48 45 41 44 45 52 0a 00                         HEADER..

00001850 <__c.4795>:
    1850:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    1860:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

0000186f <__c.4793>:
    186f:	41 4d 49 47 4f 20 25 73 0a 00                       AMIGO %s..

00001879 <__c.4791>:
    1879:	20 20 45 4e 44 0a 00                                  END..

00001880 <__c.4789>:
    1880:	23 20 42 4c 4f 43 4b 53 00                          # BLOCKS.

00001889 <__c.4787>:
    1889:	49 4e 54 45 52 4c 45 41 56 45 00                    INTERLEAVE.

00001894 <__c.4785>:
    1894:	4d 41 58 5f 42 4c 4f 43 4b 5f 4e 55 4d 42 45 52     MAX_BLOCK_NUMBER
	...

000018a5 <__c.4783>:
    18a5:	4d 41 58 5f 53 45 43 54 4f 52 00                    MAX_SECTOR.

000018b0 <__c.4781>:
    18b0:	4d 41 58 5f 48 45 41 44 00                          MAX_HEAD.

000018b9 <__c.4779>:
    18b9:	4d 41 58 5f 43 59 4c 49 4e 44 45 52 00              MAX_CYLINDER.

000018c6 <__c.4777>:
    18c6:	20 20 56 4f 4c 55 4d 45 0a 00                         VOLUME..

000018d0 <__c.4775>:
    18d0:	20 20 45 4e 44 0a 00                                  END..

000018d7 <__c.4773>:
    18d7:	52 45 4d 4f 56 41 42 4c 45 5f 56 4f 4c 55 4d 45     REMOVABLE_VOLUME
    18e7:	53 00                                               S.

000018e9 <__c.4771>:
    18e9:	46 49 58 45 44 5f 56 4f 4c 55 4d 45 53 00           FIXED_VOLUMES.

000018f7 <__c.4769>:
    18f7:	4d 41 58 49 4d 55 4d 5f 49 4e 54 45 52 4c 45 41     MAXIMUM_INTERLEA
    1907:	56 45 00                                            VE.

0000190a <__c.4767>:
    190a:	41 43 43 45 53 53 5f 54 49 4d 45 00                 ACCESS_TIME.

00001916 <__c.4765>:
    1916:	4f 50 54 49 4d 41 4c 5f 52 45 54 52 59 5f 54 49     OPTIMAL_RETRY_TI
    1926:	4d 45 00                                            ME.

00001929 <__c.4763>:
    1929:	43 4f 4e 54 49 4e 4f 55 53 5f 54 52 41 4e 53 46     CONTINOUS_TRANSF
    1939:	45 52 5f 52 41 54 45 00                             ER_RATE.

00001941 <__c.4761>:
    1941:	42 4c 4f 43 4b 5f 54 49 4d 45 00                    BLOCK_TIME.

0000194c <__c.4759>:
    194c:	42 55 52 53 54 5f 53 49 5a 45 00                    BURST_SIZE.

00001957 <__c.4757>:
    1957:	42 55 46 46 45 52 45 44 5f 42 4c 4f 43 4b 53 00     BUFFERED_BLOCKS.

00001967 <__c.4755>:
    1967:	42 59 54 45 53 5f 50 45 52 5f 42 4c 4f 43 4b 00     BYTES_PER_BLOCK.

00001977 <__c.4753>:
    1977:	44 45 56 49 43 45 5f 4e 55 4d 42 45 52 00           DEVICE_NUMBER.

00001985 <__c.4751>:
    1985:	55 4e 49 54 5f 54 59 50 45 00                       UNIT_TYPE.

0000198f <__c.4749>:
    198f:	20 20 55 4e 49 54 0a 00                               UNIT..

00001997 <__c.4747>:
    1997:	20 20 45 4e 44 0a 00                                  END..

0000199e <__c.4745>:
    199e:	54 59 50 45 00                                      TYPE.

000019a3 <__c.4743>:
    19a3:	54 52 41 4e 53 46 45 52 5f 52 41 54 45 00           TRANSFER_RATE.

000019b1 <__c.4741>:
    19b1:	55 4e 49 54 53 5f 49 4e 53 54 41 4c 4c 45 44 00     UNITS_INSTALLED.

000019c1 <__c.4739>:
    19c1:	20 20 43 4f 4e 54 52 4f 4c 4c 45 52 0a 00             CONTROLLER..

000019cf <__c.4737>:
    19cf:	20 20 45 4e 44 0a 00                                  END..

000019d6 <__c.4735>:
    19d6:	49 44 00                                            ID.

000019d9 <__c.4733>:
    19d9:	20 20 48 45 41 44 45 52 0a 00                         HEADER..

000019e3 <__c.4731>:
    19e3:	20 20 45 4e 44 0a 00                                  END..

000019ea <__c.4729>:
    19ea:	46 49 4c 45 00                                      FILE.

000019ef <__c.4727>:
    19ef:	50 50 52 00                                         PPR.

000019f3 <__c.4725>:
    19f3:	41 44 44 52 45 53 53 00                             ADDRESS.

000019fb <__c.4723>:
    19fb:	20 20 43 4f 4e 46 49 47 0a 00                         CONFIG..

00001a05 <__c.4721>:
    1a05:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    1a15:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

00001a24 <__c.4719>:
    1a24:	53 53 38 30 20 25 73 0a 00                          SS80 %s..

00001a2d <__c.4716>:
    1a2d:	43 75 72 72 65 6e 74 20 43 6f 6e 66 69 67 75 72     Current Configur
    1a3d:	61 74 69 6f 6e 20 53 65 74 74 69 6e 67 73 0a 00     ation Settings..

00001a4d <__c.4708>:
    1a4d:	0a 00                                               ..

00001a4f <__c.4703>:
    1a4f:	20 20 50 52 49 4e 54 45 52 5f 4d 53 41 20 3d 20       PRINTER_MSA = 
    1a5f:	25 30 32 58 48 0a 00                                %02XH..

00001a66 <__c.4701>:
    1a66:	20 20 50 52 49 4e 54 45 52 5f 4d 54 41 20 3d 20       PRINTER_MTA = 
    1a76:	25 30 32 58 48 0a 00                                %02XH..

00001a7d <__c.4699>:
    1a7d:	20 20 50 52 49 4e 54 45 52 5f 4d 4c 41 20 3d 20       PRINTER_MLA = 
    1a8d:	25 30 32 58 48 0a 00                                %02XH..

00001a94 <__c.4697>:
    1a94:	20 20 41 4d 49 47 4f 5f 4d 53 41 20 20 20 3d 20       AMIGO_MSA   = 
    1aa4:	25 30 32 58 48 0a 00                                %02XH..

00001aab <__c.4695>:
    1aab:	20 20 41 4d 49 47 4f 5f 4d 54 41 20 20 20 3d 20       AMIGO_MTA   = 
    1abb:	25 30 32 58 48 0a 00                                %02XH..

00001ac2 <__c.4693>:
    1ac2:	20 20 41 4d 49 47 4f 5f 4d 4c 41 20 20 20 3d 20       AMIGO_MLA   = 
    1ad2:	25 30 32 58 48 0a 00                                %02XH..

00001ad9 <__c.4691>:
    1ad9:	20 20 53 53 38 30 5f 4d 53 41 20 20 20 20 3d 20       SS80_MSA    = 
    1ae9:	25 30 32 58 48 0a 00                                %02XH..

00001af0 <__c.4689>:
    1af0:	20 20 53 53 38 30 5f 4d 54 41 20 20 20 20 3d 20       SS80_MTA    = 
    1b00:	25 30 32 58 48 0a 00                                %02XH..

00001b07 <__c.4687>:
    1b07:	20 20 53 53 38 30 5f 4d 4c 41 20 20 20 20 3d 20       SS80_MLA    = 
    1b17:	25 30 32 58 48 0a 00                                %02XH..

00001b1e <__c.4684>:
    1b1e:	4c 69 73 74 65 6e 20 61 6e 64 20 54 61 6c 6b 20     Listen and Talk 
    1b2e:	41 64 64 72 65 73 73 20 53 65 74 74 69 6e 67 73     Address Settings
    1b3e:	0a 00                                               ..

00001b40 <__c.4678>:
    1b40:	20 20 20 20 25 2d 32 35 73 20 3d 20 22 25 73 22         %-25s = "%s"
    1b50:	0a 00                                               ..

00001b52 <__c.4667>:
    1b52:	20 20 20 20 25 2d 32 35 73 20 3d 20 25 38 6c 78         %-25s = %8lx
    1b62:	48 20 28 25 6c 64 29 0a 00                          H (%ld)..

00001b6b <__c.4656>:
    1b6b:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 2a 2a 2a     Read_Config: ***
    1b7b:	2a 2a 2a 20 65 72 72 6f 72 73 28 25 64 29 20 2a     *** errors(%d) *
    1b8b:	2a 2a 2a 2a 2a 0a 00                                *****..

00001b92 <__c.4654>:
    1b92:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 72 65 61     Read_Config: rea
    1ba2:	64 28 25 64 29 20 6c 69 6e 65 73 0a 00              d(%d) lines..

00001baf <__c.4652>:
    1baf:	4d 69 73 73 69 6e 67 20 45 4e 44 20 73 74 61 74     Missing END stat
    1bbf:	65 6d 65 6e 74 20 61 74 20 6c 69 6e 65 3a 25 64     ement at line:%d
    1bcf:	0a 00                                               ..

00001bd1 <__c.4648>:
    1bd1:	55 6e 65 78 70 65 63 74 65 64 20 53 54 41 54 45     Unexpected STATE
    1be1:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1bf1:	0a 00                                               ..

00001bf3 <__c.4645>:
    1bf3:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1c03:	20 47 45 4d 45 54 52 59 20 74 6f 6b 65 6e 3a 20      GEMETRY token: 
    1c13:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00001c23 <__c.4642>:
    1c23:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1c33:	20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25      CONFIG token: %
    1c43:	73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00        s, at line:%d..

00001c52 <__c.4639>:
    1c52:	55 6e 65 78 70 65 63 74 65 64 20 48 45 41 44 45     Unexpected HEADE
    1c62:	52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20     R CONFIG token: 
    1c72:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00001c82 <__c.4637>:
    1c82:	53 6b 69 70 70 69 6e 67 20 25 73 2c 20 61 74 20     Skipping %s, at 
    1c92:	6c 69 6e 65 3a 25 64 0a 00                          line:%d..

00001c9b <__c.4634>:
    1c9b:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1cab:	20 53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73      START token: %s
    1cbb:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001cc9 <__c.4631>:
    1cc9:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1cd9:	56 4f 4c 55 4d 45 20 74 6f 6b 65 6e 3a 20 25 73     VOLUME token: %s
    1ce9:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001cf7 <__c.4628>:
    1cf7:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1d07:	55 4e 49 54 20 74 6f 6b 65 6e 3a 20 25 73 2c 20     UNIT token: %s, 
    1d17:	61 74 20 6c 69 6e 65 3a 25 64 0a 00                 at line:%d..

00001d23 <__c.4625>:
    1d23:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1d33:	43 4f 4e 54 52 4f 4c 4c 45 52 20 74 6f 6b 65 6e     CONTROLLER token
    1d43:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1d53:	0a 00                                               ..

00001d55 <__c.4622>:
    1d55:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1d65:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    1d75:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001d83 <__c.4619>:
    1d83:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1d93:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    1da3:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001db1 <__c.4616>:
    1db1:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1dc1:	53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73 2c     START token: %s,
    1dd1:	20 61 74 20 6c 69 6e 65 3a 25 64 0a 00               at line:%d..

00001dde <__c.4613>:
    1dde:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    1dee:	45 52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a     ER CONFIG token:
    1dfe:	20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a      %s, at line:%d.
	...

00001e0f <__c.4610>:
    1e0f:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    1e1f:	45 52 20 74 6f 6b 65 6e 3a 20 25 73 2c 20 61 74     ER token: %s, at
    1e2f:	20 6c 69 6e 65 3a 25 64 0a 00                        line:%d..

00001e39 <__c.4606>:
    1e39:	55 6e 65 78 70 65 63 74 65 64 20 53 54 41 52 54     Unexpected START
    1e49:	20 74 6f 6b 65 6e 3a 20 25 73 2c 20 61 74 20 6c      token: %s, at l
    1e59:	69 6e 65 3a 25 64 0a 00                             ine:%d..

00001e61 <__c.4604>:
    1e61:	53 6b 69 70 70 69 6e 67 20 25 73 2c 20 61 74 20     Skipping %s, at 
    1e71:	6c 69 6e 65 3a 25 64 0a 00                          line:%d..

00001e7a <__c.4600>:
    1e7a:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 6f 70 65     Read_Config: ope
    1e8a:	6e 28 25 73 29 20 66 61 69 6c 65 64 0a 00           n(%s) failed..

00001e98 <__c.4598>:
    1e98:	52 65 61 64 69 6e 67 3a 20 25 73 0a 00              Reading: %s..

00001ea5 <__c.4578>:
    1ea5:	45 72 72 6f 72 20 2f 68 70 64 69 72 2e 69 6e 69     Error /hpdir.ini
    1eb5:	20 70 61 72 73 69 6e 67 0a 00                        parsing..

00001ebf <__c.4576>:
    1ebf:	46 6f 75 6e 64 20 4d 6f 64 65 6c 3a 20 25 73 0a     Found Model: %s.
	...

00001ed0 <__c.4572>:
    1ed0:	45 72 72 6f 72 3a 20 2f 68 70 64 69 72 2e 69 6e     Error: /hpdir.in
    1ee0:	69 20 6e 6f 74 20 66 6f 75 6e 64 21 0a 00           i not found!..

00001eee <__c.4570>:
    1eee:	68 70 64 69 72 5f 70 61 72 61 6d 65 74 65 72 73     hpdir_parameters
    1efe:	20 69 6e 76 61 6c 69 64 20 54 59 50 45 0a 00         invalid TYPE..

00001f0d <__c.4539>:
    1f0d:	6c 69 6e 65 3a 25 64 2c 20 25 73 20 69 73 20 61     line:%d, %s is a
    1f1d:	62 6f 76 65 20 72 61 6e 67 65 20 25 64 0a 00        bove range %d..

00001f2c <__c.4537>:
    1f2c:	6c 69 6e 65 3a 25 64 2c 20 25 73 20 69 73 20 62     line:%d, %s is b
    1f3c:	65 6c 6f 77 20 72 61 6e 67 65 20 25 64 0a 00        elow range %d..

00001f4b <__c.4535>:
    1f4b:	6c 69 6e 65 3a 25 64 2c 20 6d 69 73 73 69 6e 67     line:%d, missing
    1f5b:	20 76 61 6c 75 65 0a 00                              value..

00001f63 <__c.4512>:
    1f63:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 69 6e     alloc_device: in
    1f73:	76 61 6c 69 64 20 74 79 70 65 3a 25 64 3a 25 73     valid type:%d:%s
    1f83:	0a 00                                               ..

00001f85 <__c.4504>:
    1f85:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 44 65     alloc_device: De
    1f95:	76 69 63 65 20 74 61 62 6c 65 20 69 73 20 66 75     vice table is fu
    1fa5:	6c 6c 0a 00                                         ll..

00001fa9 <__c.4491>:
    1fa9:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1fb9:	65 3a 28 25 64 29 20 69 6e 76 61 6c 69 64 20 74     e:(%d) invalid t
    1fc9:	79 70 65 3a 25 64 3a 25 73 0a 00                    ype:%d:%s..

00001fd4 <__c.4489>:
    1fd4:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1fe4:	65 3a 20 69 6e 64 65 78 3a 20 25 64 20 74 79 70     e: index: %d typ
    1ff4:	65 3a 25 64 3a 25 73 2c 20 73 74 61 74 65 20 3d     e:%d:%s, state =
    2004:	3d 20 4e 55 4c 4c 0a 00                             = NULL..

0000200c <__c.4487>:
    200c:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    201c:	65 3a 20 69 6e 64 65 78 20 25 64 20 75 6e 69 6e     e: index %d unin
    202c:	69 74 61 6c 69 7a 65 64 20 74 79 70 65 3a 25 64     italized type:%d
    203c:	3a 25 73 0a 00                                      :%s..

00002041 <__c.4485>:
    2041:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    2051:	65 3a 20 69 6e 64 65 78 3a 25 64 20 74 79 70 65     e: index:%d type
    2061:	3a 25 64 3a 25 73 2c 20 64 65 76 20 3d 3d 20 4e     :%d:%s, dev == N
    2071:	55 4c 4c 0a 00                                      ULL..

00002076 <__c.4483>:
    2076:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    2086:	65 3a 20 69 6e 64 65 78 3a 25 64 20 61 64 64 72     e: index:%d addr
    2096:	65 73 73 3a 20 25 30 32 58 48 20 6f 75 74 20 6f     ess: %02XH out o
    20a6:	66 20 72 61 6e 67 65 0a 00                          f range..

000020af <__c.4481>:
    20af:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    20bf:	65 3a 28 25 64 29 20 6f 75 74 20 6f 66 20 72 61     e:(%d) out of ra
    20cf:	6e 67 65 0a 00                                      nge..

000020d4 <__c.4520>:
    20d4:	5b 53 53 38 30 20 55 6e 6b 6e 6f 77 6e 20 53 43     [SS80 Unknown SC
    20e4:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    20f4:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    2104:	48 5d 0a 00                                         H]..

00002108 <__c.4518>:
    2108:	5b 53 53 38 30 20 53 43 20 55 6e 6b 6e 6f 77 6e     [SS80 SC Unknown
    2118:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    2128:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    2138:	48 5d 0a 00                                         H]..

0000213c <__c.4516>:
    213c:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    214c:	74 5d 0a 00                                         t]..

00002150 <__c.4514>:
    2150:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

0000215f <__c.4512>:
    215f:	5b 53 53 38 30 20 52 65 70 6f 72 74 20 53 74 61     [SS80 Report Sta
    216f:	74 65 5d 0a 00                                      te]..

00002174 <__c.4510>:
    2174:	5b 53 53 30 30 20 45 78 65 63 75 74 65 20 53 74     [SS00 Execute St
    2184:	61 74 65 5d 0a 00                                   ate]..

0000218a <__c.4508>:
    218a:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    219a:	61 74 65 5d 0a 00                                   ate]..

000021a0 <__c.4503>:
    21a0:	5b 47 50 49 42 20 45 72 72 6f 72 20 52 65 74 75     [GPIB Error Retu
    21b0:	72 6e 20 2d 20 57 72 69 74 65 20 45 52 52 4f 52     rn - Write ERROR
    21c0:	5d 0a 00                                            ]..

000021c3 <__c.4496>:
    21c3:	5b 53 53 38 30 20 49 6e 63 72 65 6d 65 6e 74 20     [SS80 Increment 
    21d3:	74 6f 20 28 25 6c 58 48 29 5d 0a 00                 to (%lXH)]..

000021df <__c.4489>:
    21df:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

000021ee <__c.4487>:
    21ee:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    21fe:	5d 0a 00                                            ]..

00002201 <__c.4480>:
    2201:	5b 53 53 38 30 20 53 44 43 5d 0a 00                 [SS80 SDC]..

0000220d <__c.4466>:
    220d:	5b 53 53 38 30 20 71 73 74 61 74 20 25 30 32 58     [SS80 qstat %02X
    221d:	5d 0a 00                                            ]..

00002220 <__c.4464>:
    2220:	5b 53 53 38 30 20 71 73 74 61 74 20 73 65 6e 64     [SS80 qstat send
    2230:	20 46 41 49 4c 45 44 5d 0a 00                        FAILED]..

0000223a <__c.4457>:
    223a:	5b 53 53 38 30 20 53 65 65 6b 3a 25 30 38 6c 58     [SS80 Seek:%08lX
    224a:	48 5d 0a 00                                         H]..

0000224e <__c.4455>:
    224e:	5b 53 53 38 30 20 53 65 65 6b 20 4f 56 45 52 46     [SS80 Seek OVERF
    225e:	4c 4f 57 20 61 74 20 25 30 38 6c 58 48 5d 0a 00     LOW at %08lXH]..

0000226e <__c.4450>:
    226e:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    227e:	74 20 43 6f 6d 6d 61 6e 64 2c 20 45 72 72 6f 72     t Command, Error
    228e:	20 61 74 20 28 25 64 29 20 6f 66 20 28 25 64 29      at (%d) of (%d)
    229e:	20 4f 50 20 43 6f 64 65 73 5d 0a 00                  OP Codes]..

000022aa <__c.4447>:
    22aa:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    22ba:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

000022ca <__c.4445>:
    22ca:	5b 53 53 38 30 20 43 61 6e 63 65 6c 20 28 25 64     [SS80 Cancel (%d
    22da:	29 5d 0a 00                                         )]..

000022de <__c.4443>:
    22de:	5b 53 53 38 30 20 43 68 61 6e 6e 65 6c 20 49 6e     [SS80 Channel In
    22ee:	64 65 70 65 6e 64 65 6e 74 20 43 6c 65 61 72 20     dependent Clear 
    22fe:	28 25 64 29 5d 0a 00                                (%d)]..

00002305 <__c.4441>:
    2305:	5b 53 53 38 30 20 57 72 69 74 65 20 4c 6f 6f 70     [SS80 Write Loop
    2315:	62 61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00           back - TODO]..

00002323 <__c.4439>:
    2323:	5b 53 53 38 30 20 52 65 61 64 20 4c 6f 6f 70 62     [SS80 Read Loopb
    2333:	61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00              ack - TODO]..

00002340 <__c.4436>:
    2340:	5b 53 53 38 30 20 48 50 2d 49 42 20 50 61 72 69     [SS80 HP-IB Pari
    2350:	74 79 20 43 68 65 63 6b 69 6e 67 20 2d 20 54 4f     ty Checking - TO
    2360:	44 4f 5d 0a 00                                      DO]..

00002365 <__c.4433>:
    2365:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    2375:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

0000237e <__c.4431>:
    237e:	5b 47 50 49 42 20 52 65 61 64 20 45 52 52 4f 52     [GPIB Read ERROR
    238e:	5d 0a 00                                            ]..

00002391 <__c.4422>:
    2391:	5b 53 53 38 30 20 45 78 65 63 75 74 65 20 43 6f     [SS80 Execute Co
    23a1:	6d 6d 61 6e 64 2c 20 45 72 72 6f 72 20 61 74 20     mmand, Error at 
    23b1:	28 25 64 29 20 6f 66 20 28 25 64 29 20 4f 50 20     (%d) of (%d) OP 
    23c1:	43 6f 64 65 73 5d 0a 00                             Codes]..

000023c9 <__c.4419>:
    23c9:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    23d9:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

000023e9 <__c.4417>:
    23e9:	5b 53 53 38 30 20 49 6e 69 61 74 65 20 44 69 61     [SS80 Iniate Dia
    23f9:	67 6e 6f 73 74 69 63 20 2d 20 54 4f 44 4f 5d 0a     gnostic - TODO].
	...

0000240a <__c.4415>:
    240a:	5b 53 53 38 30 20 52 65 71 75 65 73 74 20 53 74     [SS80 Request St
    241a:	61 74 75 73 5d 0a 00                                atus]..

00002421 <__c.4413>:
    2421:	5b 53 53 38 30 20 44 6f 6f 72 20 4c 6f 63 6b 20     [SS80 Door Lock 
    2431:	2d 20 54 4f 44 4f 5d 0a 00                          - TODO]..

0000243a <__c.4411>:
    243a:	5b 53 53 38 30 20 44 6f 6f 72 20 55 6e 4c 6f 63     [SS80 Door UnLoc
    244a:	6b 20 2d 20 54 4f 44 4f 5d 0a 00                    k - TODO]..

00002455 <__c.4409>:
    2455:	5b 53 53 38 30 20 53 65 74 20 53 74 61 74 75 73     [SS80 Set Status
    2465:	20 4d 61 73 6b 20 2d 20 54 4f 44 4f 5d 0a 00         Mask - TODO]..

00002474 <__c.4407>:
    2474:	5b 53 53 38 30 20 49 6e 69 74 69 61 6c 69 7a 65     [SS80 Initialize
    2484:	20 4d 65 64 69 61 20 54 4f 44 4f 5d 0a 00            Media TODO]..

00002492 <__c.4405>:
    2492:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

000024a3 <__c.4403>:
    24a3:	5b 53 53 38 30 20 56 61 6c 69 64 61 74 65 20 4b     [SS80 Validate K
    24b3:	65 79 20 2d 20 54 4f 44 4f 5d 0a 00                 ey - TODO]..

000024bf <__c.4401>:
    24bf:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 44 65     [SS80 Release De
    24cf:	6e 69 65 64 20 4e 4f 2d 4f 50 5d 0a 00              nied NO-OP]..

000024dc <__c.4399>:
    24dc:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 4e 4f     [SS80 Release NO
    24ec:	2d 4f 50 5d 0a 00                                   -OP]..

000024f2 <__c.4397>:
    24f2:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2502:	20 56 65 72 69 66 79 20 2d 20 54 4f 44 4f 5d 0a      Verify - TODO].
	...

00002513 <__c.4395>:
    2513:	5b 53 53 38 30 20 53 65 74 20 52 65 74 75 72 6e     [SS80 Set Return
    2523:	20 41 64 64 72 65 73 73 69 6e 67 20 2d 20 54 4f      Addressing - TO
    2533:	44 4f 5d 0a 00                                      DO]..

00002538 <__c.4393>:
    2538:	5b 53 53 38 30 20 53 65 74 20 52 65 6c 65 61 73     [SS80 Set Releas
    2548:	65 20 4e 4f 2d 4f 50 5d 0a 00                       e NO-OP]..

00002552 <__c.4391>:
    2552:	5b 53 53 38 30 20 53 65 74 20 52 50 53 20 4e 4f     [SS80 Set RPS NO
    2562:	2d 4f 50 5d 0a 00                                   -OP]..

00002568 <__c.4389>:
    2568:	5b 53 53 38 30 20 4e 4f 2d 4f 50 5d 0a 00           [SS80 NO-OP]..

00002576 <__c.4387>:
    2576:	5b 53 53 38 30 20 53 65 74 20 4c 65 6e 67 74 68     [SS80 Set Length
    2586:	3a 28 25 30 38 6c 58 48 29 5d 0a 00                 :(%08lXH)]..

00002592 <__c.4385>:
    2592:	5b 53 53 38 30 20 53 65 74 20 41 64 64 72 65 73     [SS80 Set Addres
    25a2:	73 3a 28 25 30 38 6c 58 48 29 5d 0a 00              s:(%08lXH)]..

000025af <__c.4383>:
    25af:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    25bf:	20 57 72 69 74 65 5d 0a 00                           Write]..

000025c8 <__c.4380>:
    25c8:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    25d8:	20 52 65 61 64 5d 0a 00                              Read]..

000025e0 <__c.4378>:
    25e0:	5b 53 53 38 30 20 53 65 74 20 56 6f 6c 75 6d 65     [SS80 Set Volume
    25f0:	3a 20 28 25 64 29 5d 0a 00                          : (%d)]..

000025f9 <__c.4375>:
    25f9:	5b 53 53 38 30 20 53 65 74 20 55 6e 69 74 3a 28     [SS80 Set Unit:(
    2609:	25 64 29 5d 0a 00                                   %d)]..

0000260f <__c.4373>:
    260f:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    261f:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

00002628 <__c.4371>:
    2628:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    2638:	61 74 65 20 47 50 49 42 20 52 65 61 64 20 45 52     ate GPIB Read ER
    2648:	52 4f 52 5d 0a 00                                   ROR]..

0000264e <__c.4362>:
    264e:	5b 53 53 38 30 20 56 6f 6c 75 6d 65 3a 25 64 20     [SS80 Volume:%d 
    265e:	69 6e 76 61 6c 69 64 5d 0a 00                       invalid]..

00002668 <__c.4357>:
    2668:	5b 53 53 38 30 20 55 4e 49 54 3a 25 64 20 69 6e     [SS80 UNIT:%d in
    2678:	76 61 6c 69 64 5d 0a 00                             valid]..

00002680 <__c.4352>:
    2680:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 56     [SS80 Describe V
    2690:	6f 6c 75 6d 65 20 46 41 49 4c 45 44 5d 0a 00        olume FAILED]..

0000269f <__c.4350>:
    269f:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 55     [SS80 Describe U
    26af:	6e 69 74 20 46 41 49 4c 45 44 5d 0a 00              nit FAILED]..

000026bc <__c.4348>:
    26bc:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 43     [SS80 Describe C
    26cc:	6f 6e 74 72 6f 6c 6c 65 72 20 46 41 49 4c 45 44     ontroller FAILED
    26dc:	5d 0a 00                                            ]..

000026df <__c.4346>:
    26df:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

000026f0 <__c.4338>:
    26f0:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    2700:	73 20 46 41 49 4c 45 44 5d 0a 00                    s FAILED]..

0000270b <__c.4336>:
    270b:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    271b:	73 5d 0a 00                                         s]..

0000271f <__c.4326>:
    271f:	20 20 20 20 25 64 3a 25 73 0a 00                        %d:%s..

0000272a <__c.4324>:
    272a:	25 73 3a 0a 00                                      %s:..

0000272f <__c.4299>:
    272f:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    273f:	20 57 72 69 74 65 20 57 72 6f 74 65 20 54 6f 74      Write Wrote Tot
    274f:	61 6c 28 25 6c 78 48 29 5d 0a 00                    al(%lxH)]..

0000275a <__c.4297>:
    275a:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    276a:	20 57 72 69 74 65 20 44 49 44 20 4e 4f 54 20 46      Write DID NOT F
    277a:	49 4e 49 53 48 5d 0a 00                             INISH]..

00002782 <__c.4293>:
    2782:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2792:	20 57 72 69 74 65 20 77 72 6f 74 65 28 25 30 32      Write wrote(%02
    27a2:	58 48 29 5d 0a 00                                   XH)]..

000027a8 <__c.4291>:
    27a8:	5b 44 69 73 6b 20 57 72 69 74 65 20 45 72 72 6f     [Disk Write Erro
    27b8:	72 5d 0a 00                                         r]..

000027bc <__c.4287>:
    27bc:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    27cc:	5d 0a 00                                            ]..

000027cf <__c.4285>:
    27cf:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    27df:	20 57 72 69 74 65 20 61 74 20 25 30 38 6c 58 48      Write at %08lXH
    27ef:	28 25 6c 58 48 29 5d 0a 00                          (%lXH)]..

000027f8 <__c.4273>:
    27f8:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    2808:	65 61 64 20 54 6f 74 61 6c 28 25 6c 58 48 29 20     ead Total(%lXH) 
    2818:	62 79 74 65 73 5d 0a 00                             bytes]..

00002820 <__c.4271>:
    2820:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    2830:	65 61 64 20 44 49 44 20 4e 4f 54 20 46 49 4e 49     ead DID NOT FINI
    2840:	53 48 5d 0a 00                                      SH]..

00002845 <__c.4266>:
    2845:	5b 53 53 38 30 20 47 50 49 42 20 57 72 69 74 65     [SS80 GPIB Write
    2855:	20 57 72 72 6f 72 5d 0a 00                           Wrror]..

0000285e <__c.4264>:
    285e:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    286e:	45 72 72 6f 72 5d 0a 00                             Error]..

00002876 <__c.4262>:
    2876:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    2886:	25 30 32 58 48 20 62 79 74 65 73 5d 0a 00           %02XH bytes]..

00002894 <__c.4260>:
    2894:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    28a4:	20 52 65 61 64 20 61 74 20 25 30 38 6c 58 48 28      Read at %08lXH(
    28b4:	25 6c 58 48 29 5d 0a 00                             %lXH)]..

000028bc <__c.4243>:
    28bc:	5b 53 53 38 30 20 45 58 45 43 20 73 74 61 74 65     [SS80 EXEC state
    28cc:	3a 25 64 20 65 72 72 6f 72 5d 0a 00                 :%d error]..

000028d8 <__c.4227>:
    28d8:	5b 53 53 38 30 20 25 30 32 58 48 20 49 4e 49 54     [SS80 %02XH INIT
    28e8:	5d 0a 00                                            ]..

000028eb <__c.4202>:
    28eb:	5b 53 53 38 30 20 54 65 73 74 20 44 6f 6e 65 5d     [SS80 Test Done]
    28fb:	0a 00                                               ..

000028fd <__c.4200>:
    28fd:	5b 53 53 38 30 20 54 65 73 74 5d 0a 00              [SS80 Test]..

0000290a <__c.4357>:
    290a:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    291a:	65 71 75 65 73 74 20 4c 6f 67 69 63 61 6c 20 41     equest Logical A
    292a:	64 64 72 65 73 73 5d 0a 00                          ddress]..

00002933 <__c.4354>:
    2933:	5b 41 4d 49 47 4f 20 45 78 69 63 75 74 65 20 52     [AMIGO Exicute R
    2943:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 55 6e     equest Status Un
    2953:	62 75 66 66 65 72 65 64 5d 0a 00                    buffered]..

0000295e <__c.4351>:
    295e:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    296e:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 42 75     equest Status Bu
    297e:	66 66 65 72 65 64 5d 0a 00                          ffered]..

00002987 <__c.4346>:
    2987:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    2997:	72 69 74 65 20 42 75 66 66 65 72 65 64 5d 0a 00     rite Buffered]..

000029a7 <__c.4343>:
    29a7:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 49     [AMIGO Execute I
    29b7:	6e 69 74 69 61 6c 69 7a 65 5d 0a 00                 nitialize]..

000029c3 <__c.4340>:
    29c3:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    29d3:	72 69 74 65 20 55 6e 62 75 66 66 65 72 65 64 5d     rite Unbuffered]
    29e3:	0a 00                                               ..

000029e5 <__c.4337>:
    29e5:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    29f5:	65 61 64 20 42 75 66 66 65 72 65 64 5d 0a 00        ead Buffered]..

00002a04 <__c.4334>:
    2a04:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2a14:	65 61 64 20 55 6e 62 75 66 66 65 72 65 64 5d 0a     ead Unbuffered].
	...

00002a25 <__c.4331>:
    2a25:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 43     [AMIGO Execute C
    2a35:	6f 6c 64 20 4c 6f 61 64 20 52 65 61 64 5d 0a 00     old Load Read]..

00002a45 <__c.4327>:
    2a45:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 28 25     [AMIGO Execute(%
    2a55:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    2a65:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    2a75:	0a 00                                               ..

00002a77 <__c.4322>:
    2a77:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 5d 0a 00     [AMIGO Format]..

00002a87 <__c.4319>:
    2a87:	5b 41 4d 49 47 4f 20 52 65 61 64 20 42 75 66 66     [AMIGO Read Buff
    2a97:	65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00        ered Command]..

00002aa6 <__c.4317>:
    2aa6:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    2ab6:	74 61 74 75 73 20 55 6e 62 75 66 66 65 72 65 64     tatus Unbuffered
    2ac6:	20 43 6f 6d 6d 61 6e 64 5d 0a 00                     Command]..

00002ad1 <__c.4315>:
    2ad1:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 42 75 66     [AMIGO Write Buf
    2ae1:	66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00     fered Command]..

00002af1 <__c.4313>:
    2af1:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 4c     [AMIGO Request L
    2b01:	6f 67 69 63 61 6c 20 41 64 64 72 65 73 73 20 43     ogical Address C
    2b11:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

00002b1a <__c.4311>:
    2b1a:	5b 41 4d 49 47 4f 20 49 6e 69 74 69 61 6c 69 7a     [AMIGO Initializ
    2b2a:	65 20 43 6f 6d 6d 61 6e 64 5d 0a 00                 e Command]..

00002b36 <__c.4309>:
    2b36:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 55 6e 62     [AMIGO Write Unb
    2b46:	75 66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d     uffered Command]
    2b56:	0a 00                                               ..

00002b58 <__c.4307>:
    2b58:	5b 41 4d 49 47 4f 20 56 65 72 69 66 79 5d 0a 00     [AMIGO Verify]..

00002b68 <__c.4304>:
    2b68:	5b 41 4d 49 47 4f 20 52 65 61 64 20 55 6e 62 75     [AMIGO Read Unbu
    2b78:	66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a     ffered Command].
	...

00002b89 <__c.4302>:
    2b89:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    2b99:	74 61 74 75 73 20 42 75 66 66 65 72 65 64 20 43     tatus Buffered C
    2ba9:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

00002bb2 <__c.4300>:
    2bb2:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    2bc2:	36 5d 0a 00                                         6]..

00002bc6 <__c.4297>:
    2bc6:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    2bd6:	35 5d 0a 00                                         5]..

00002bda <__c.4294>:
    2bda:	5b 41 4d 49 47 4f 20 43 6f 6c 64 20 4c 6f 61 64     [AMIGO Cold Load
    2bea:	20 52 65 61 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00      Read Command]..

00002bfa <__c.4291>:
    2bfa:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    2c0a:	30 32 58 48 29 3a 20 47 50 49 42 20 72 65 61 64     02XH): GPIB read
    2c1a:	20 62 79 74 65 73 3a 25 30 32 58 48 5d 0a 00         bytes:%02XH]..

00002c29 <__c.4289>:
    2c29:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    2c39:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

00002c4a <__c.4287>:
    2c4a:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    2c5a:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

00002c6b <__c.4285>:
    2c6b:	5b 41 4d 49 47 4f 5f 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO_Command:G
    2c7b:	50 49 42 20 77 72 69 74 65 20 65 72 72 6f 72 5d     PIB write error]
    2c8b:	0a 00                                               ..

00002c8d <__c.4283>:
    2c8d:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    2c9d:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    2cad:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    2cbd:	0a 00                                               ..

00002cbf <__c.4271>:
    2cbf:	5b 45 20 20 20 41 6d 69 67 6f 20 45 52 52 4f 52     [E   Amigo ERROR
    2ccf:	20 73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58      secondary: %02X
    2cdf:	48 2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20     H, state:%02XH, 
    2cef:	6c 69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c     listening:%02XH,
    2cff:	20 74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a      talking:%02XH].
	...

00002d10 <__c.4269>:
    2d10:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    2d20:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2d30:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2d40:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2d50:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002d60 <__c.4267>:
    2d60:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    2d70:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2d80:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2d90:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2da0:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002db0 <__c.4265>:
    2db0:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    2dc0:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2dd0:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2de0:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2df0:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002e00 <__c.4260>:
    2e00:	5b 55 20 41 6d 69 67 6f 20 54 4f 44 4f 20 73 65     [U Amigo TODO se
    2e10:	63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48 2c 20     condary: %02XH, 
    2e20:	73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f 70 63     state:%02XH, opc
    2e30:	6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e 3a 25     ode:%02XH, len:%
    2e40:	33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a 25 30     3d, listening:%0
    2e50:	32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25 30 32     2XH, talking:%02
    2e60:	58 48 5d 0a 00                                      XH]..

00002e65 <__c.4258>:
    2e65:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    2e75:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2e85:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2e95:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2ea5:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2eb5:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2ec5:	30 32 58 48 5d 0a 00                                02XH]..

00002ecc <__c.4256>:
    2ecc:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    2edc:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2eec:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2efc:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2f0c:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2f1c:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2f2c:	30 32 58 48 5d 0a 00                                02XH]..

00002f33 <__c.4254>:
    2f33:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    2f43:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2f53:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2f63:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2f73:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2f83:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2f93:	30 32 58 48 5d 0a 00                                02XH]..

00002f9a <__c.4247>:
    2f9a:	5b 41 4d 49 47 4f 20 43 6c 65 61 72 5d 0a 00        [AMIGO Clear]..

00002fa9 <__c.4243>:
    2fa9:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2fb9:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002fc3 <__c.4241>:
    2fc3:	5b 41 4d 49 47 4f 20 57 61 6b 65 75 70 5d 0a 00     [AMIGO Wakeup]..

00002fd3 <__c.4234>:
    2fd3:	5b 44 53 4a 20 25 30 32 58 48 5d 0a 00              [DSJ %02XH]..

00002fe0 <__c.4232>:
    2fe0:	5b 41 49 4d 47 4f 3a 20 44 53 4a 20 73 65 6e 64     [AIMGO: DSJ send
    2ff0:	20 66 61 69 6c 65 64 5d 0a 00                        failed]..

00002ffa <__c.4225>:
    2ffa:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 47 50 49     [AMIGO Write GPI
    300a:	42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a 00        B read error]..

00003019 <__c.4218>:
    3019:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    3029:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00003033 <__c.4211>:
    3033:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 20 44 6f     [AMIGO Format Do
    3043:	6e 65 5d 0a 00                                      ne]..

00003048 <__c.4207>:
    3048:	5b 41 4d 49 47 4f 20 66 6f 72 6d 61 74 5d 0a 00     [AMIGO format]..

00003058 <__c.4166>:
    3058:	5b 41 4d 49 47 4f 20 25 73 2c 20 50 3a 25 30 38     [AMIGO %s, P:%08
    3068:	6c 78 48 2c 20 55 3a 25 64 20 43 3a 25 64 20 48     lxH, U:%d C:%d H
    3078:	3a 25 64 20 53 3a 25 64 5d 0a 00                    :%d S:%d]..

00003083 <__c.4196>:
    3083:	5b 41 4d 49 47 4f 20 76 65 72 69 66 79 20 50 3a     [AMIGO verify P:
    3093:	25 30 38 6c 58 48 2c 20 73 65 63 74 6f 72 73 3a     %08lXH, sectors:
    30a3:	25 30 34 58 48 5d 0a 00                             %04XH]..

000030ab <__c.4173>:
    30ab:	5b 41 4d 49 47 4f 20 25 73 20 70 6f 73 20 4f 56     [AMIGO %s pos OV
    30bb:	45 52 46 4c 4f 57 5d 0a 00                          ERFLOW]..

000030c4 <__c.4159>:
    30c4:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    30d4:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

000030de <__c.4157>:
    30de:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 73 74 61 74     [AMIGO send stat
    30ee:	75 73 5d 0a 00                                      us]..

000030f3 <__c.4151>:
    30f3:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    3103:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

0000310d <__c.4149>:
    310d:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 6c 6f 67 69     [AMIGO send logi
    311d:	63 61 6c 20 61 64 64 72 65 73 73 5d 0a 00           cal address]..

0000312b <__c.4143>:
    312b:	5b 41 4d 49 47 4f 20 72 65 71 75 65 73 74 20 73     [AMIGO request s
    313b:	74 61 74 75 73 5d 0a 00                             tatus]..

00003143 <__c.4165>:
    3143:	72 65 63 65 69 76 65 64 3a 5b 25 64 5d 20 62 79     received:[%d] by
    3153:	74 65 73 0a 00                                      tes..

00003158 <__c.4163>:
    3158:	72 65 63 65 69 76 65 64 3a 5b 25 64 5d 20 25 73     received:[%d] %s
    3168:	0a 00                                               ..

0000316a <__c.4161>:
    316a:	72 65 63 65 69 76 65 64 3a 5b 25 64 5d 20 25 73     received:[%d] %s
    317a:	0a 00                                               ..

0000317c <__c.4156>:
    317c:	70 72 69 6e 74 65 72 20 6e 6f 74 20 64 65 66 69     printer not defi
    318c:	6e 65 64 0a 00                                      ned..

00003191 <__c.4147>:
    3191:	5b 53 43 20 50 52 49 4e 54 45 52 20 54 61 6c 6b     [SC PRINTER Talk
    31a1:	3a 20 25 30 32 58 48 5d 0a 00                       : %02XH]..

000031ab <__c.4145>:
    31ab:	5b 53 43 20 50 52 49 4e 54 45 52 20 4c 69 73 74     [SC PRINTER List
    31bb:	65 6e 3a 20 25 30 32 58 48 5d 0a 00                 en: %02XH]..

000031c7 <__c.4140>:
    31c7:	25 30 38 6c 64 0d 00                                %08ld..

000031ce <__c.4134>:
    31ce:	77 72 69 74 65 20 66 61 69 6c 65 64 3a 20 77 61     write failed: wa
    31de:	6e 74 65 64 20 25 64 2c 20 67 6f 74 3a 25 64 0a     nted %d, got:%d.
	...

000031ef <__c.4128>:
    31ef:	0a 44 4f 4e 45 3a 20 25 30 38 6c 64 0a 00           .DONE: %08ld..

000031fd <__c.4126>:
    31fd:	45 52 52 4f 52 20 64 75 72 72 69 6e 67 20 77 72     ERROR durring wr
    320d:	69 74 65 0a 00                                      ite..

00003212 <__c.4120>:
    3212:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

0000321e <__c.4118>:
    321e:	43 61 70 74 75 72 69 6e 67 20 70 6c 6f 74 20 74     Capturing plot t
    322e:	6f 3a 25 73 0a 00                                   o:%s..

00003234 <__c.4116>:
    3234:	2f 70 6c 6f 74 2d 25 30 32 64 25 73 25 30 34 64     /plot-%02d%s%04d
    3244:	2d 25 30 32 64 25 30 32 64 25 30 32 64 2e 70 6c     -%02d%02d%02d.pl
    3254:	74 00                                               t.

00003256 <__c.4778>:
    3256:	46 6f 72 6d 61 74 69 6e 67 3a 20 77 72 6f 74 65     Formating: wrote
    3266:	3a 5b 25 6c 64 5d 20 73 65 63 74 6f 72 73 0a 00     :[%ld] sectors..

00003276 <__c.4776>:
    3276:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    3286:	3a 20 73 65 63 74 6f 72 73 20 69 73 20 30 0a 00     : sectors is 0..

00003296 <__c.4774>:
    3296:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    32a6:	3a 20 64 69 72 73 65 63 74 6f 72 73 20 69 73 20     : dirsectors is 
    32b6:	30 0a 00                                            0..

000032b9 <__c.4772>:
    32b9:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    32c9:	3a 20 6c 69 66 6c 61 62 65 6c 20 69 73 20 65 6d     : liflabel is em
    32d9:	70 74 79 0a 00                                      pty..

000032de <__c.4770>:
    32de:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    32ee:	3a 20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69     : lifimagename i
    32fe:	73 20 65 6d 70 74 79 0a 00                          s empty..

00003307 <__c.4757>:
    3307:	72 65 6e 61 6d 65 64 3a 20 25 31 30 73 20 74 6f     renamed: %10s to
    3317:	20 25 31 30 73 0a 00                                 %10s..

0000331e <__c.4755>:
    331e:	6c 69 66 5f 72 65 6e 61 6d 65 3a 5b 25 73 5d 20     lif_rename:[%s] 
    332e:	6c 69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f     lif name:[%s] no
    333e:	74 20 66 6f 75 6e 64 0a 00                          t found..

00003347 <__c.4753>:
    3347:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    3357:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 63 6f 6e      new lifname con
    3367:	74 61 69 6e 73 20 62 61 64 20 63 68 61 72 61 63     tains bad charac
    3377:	74 65 72 73 0a 00                                   ters..

0000337d <__c.4751>:
    337d:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    338d:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 69 73 20      new lifname is 
    339d:	65 6d 70 74 79 0a 00                                empty..

000033a4 <__c.4749>:
    33a4:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    33b4:	20 6f 6c 64 20 6c 69 66 6e 61 6d 65 20 69 73 20      old lifname is 
    33c4:	65 6d 70 74 79 0a 00                                empty..

000033cb <__c.4747>:
    33cb:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    33db:	20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69 73      lifimagename is
    33eb:	20 65 6d 70 74 79 0a 00                              empty..

000033f3 <__c.4738>:
    33f3:	44 65 6c 65 74 65 64 3a 20 25 31 30 73 0a 00        Deleted: %10s..

00003402 <__c.4736>:
    3402:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 20 6c     LIF image:[%s] l
    3412:	69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f 74     if name:[%s] not
    3422:	20 66 6f 75 6e 64 0a 00                              found..

0000342a <__c.4734>:
    342a:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    343a:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 0a 00        LIF name:[%s]..

00003449 <__c.4732>:
    3449:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    3459:	66 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     fname is empty..

00003469 <__c.4730>:
    3469:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    3479:	66 69 6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d     fimagename is em
    3489:	70 74 79 0a 00                                      pty..

0000348e <__c.4722>:
    348e:	57 72 6f 74 65 3a 20 25 38 6c 64 0a 00              Wrote: %8ld..

0000349b <__c.4717>:
    349b:	57 72 6f 74 65 3a 20 25 38 6c 64 0d 00              Wrote: %8ld..

000034a8 <__c.4715>:
    34a8:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    34b8:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    34c8:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

000034d8 <__c.4713>:
    34d8:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    34e8:	73 0a 00                                            s..

000034eb <__c.4711>:
    34eb:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    34fb:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    350b:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

0000351a <__c.4709>:
    351a:	6c 69 66 5f 61 64 64 3a 20 75 73 65 72 66 69 6c     lif_add: userfil
    352a:	65 20 69 73 20 65 6d 70 74 79 0a 00                 e is empty..

00003536 <__c.4707>:
    3536:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 6e 61 6d 65     lif_add: lifname
    3546:	20 69 73 20 65 6d 70 74 79 0a 00                     is empty..

00003551 <__c.4705>:
    3551:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 69 6d 61 67     lif_add: lifimag
    3561:	65 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     ename is empty..

00003571 <__c.4688>:
    3571:	57 72 6f 74 65 3a 20 25 38 6c 64 0a 00              Wrote: %8ld..

0000357e <__c.4683>:
    357e:	57 72 6f 74 65 3a 20 25 38 6c 64 0d 00              Wrote: %8ld..

0000358b <__c.4681>:
    358b:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    359b:	73 0a 00                                            s..

0000359e <__c.4679>:
    359e:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    35ae:	75 6e 64 3a 25 73 0a 00                             und:%s..

000035b6 <__c.4662>:
    35b6:	57 72 6f 74 65 3a 20 25 38 6c 64 0a 00              Wrote: %8ld..

000035c3 <__c.4659>:
    35c3:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    35d3:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    35e3:	20 65 72 72 6f 72 0a 00                              error..

000035eb <__c.4651>:
    35eb:	57 72 6f 74 65 3a 20 25 38 6c 64 0d 00              Wrote: %8ld..

000035f8 <__c.4649>:
    35f8:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    3608:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    3618:	20 65 72 72 6f 72 0a 00                              error..

00003620 <__c.4646>:
    3620:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    3630:	5f 61 73 5f 61 73 63 69 69 3a 20 75 6e 65 78 70     _as_ascii: unexp
    3640:	65 63 74 65 64 20 63 6f 6e 74 72 6f 6c 20 62 79     ected control by
    3650:	74 65 3a 5b 25 30 32 58 48 5d 20 40 20 6f 66 66     te:[%02XH] @ off
    3660:	73 65 74 3a 20 25 38 6c 78 2c 20 69 6e 64 3a 25     set: %8lx, ind:%
    3670:	30 32 58 48 0a 00                                   02XH..

00003676 <__c.4644>:
    3676:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    3686:	5f 61 73 5f 61 73 63 69 69 3a 20 73 74 72 69 6e     _as_ascii: strin
    3696:	67 20 74 6f 6f 20 62 69 67 20 73 69 7a 65 20 3d     g too big size =
    36a6:	20 25 64 0a 00                                       %d..

000036ab <__c.4640>:
    36ab:	45 78 74 72 61 63 74 69 6e 67 3a 20 25 73 0a 00     Extracting: %s..

000036bb <__c.4638>:
    36bb:	46 69 6c 65 20 25 73 20 68 61 73 20 77 72 6f 6e     File %s has wron
    36cb:	67 20 74 79 70 65 3a 5b 25 30 34 58 48 5d 20 65     g type:[%04XH] e
    36db:	78 70 65 63 74 65 64 20 30 78 45 30 31 30 2e 2e     xpected 0xE010..
    36eb:	30 78 45 30 31 33 0a 00                             0xE013..

000036f3 <__c.4636>:
    36f3:	4c 49 46 20 46 69 6c 65 20 6e 6f 74 20 66 6f 75     LIF File not fou
    3703:	6e 64 3a 25 73 0a 00                                nd:%s..

0000370a <__c.4634>:
    370a:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    371a:	75 6e 64 3a 25 73 0a 00                             und:%s..

00003722 <__c.4610>:
    3722:	57 72 6f 74 65 3a 20 25 38 6c 64 0a 00              Wrote: %8ld..

0000372f <__c.4608>:
    372f:	46 69 6c 65 20 53 65 63 74 6f 72 73 3a 20 20 20     File Sectors:   
    373f:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

00003748 <__c.4606>:
    3748:	46 69 72 73 74 20 53 65 63 74 6f 72 3a 20 20 20     First Sector:   
    3758:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

00003761 <__c.4604>:
    3761:	49 6e 64 65 78 3a 20 20 20 20 20 20 20 20 20 20     Index:          
    3771:	20 20 25 34 64 0a 00                                  %4d..

00003778 <__c.4602>:
    3778:	4e 61 6d 65 3a 20 20 20 20 20 20 20 20 20 20 20     Name:           
    3788:	20 20 20 25 73 0a 00                                   %s..

0000378f <__c.4600>:
    378f:	4e 65 77 20 44 69 72 65 63 74 6f 72 79 20 49 6e     New Directory In
    379f:	66 6f 72 6d 61 74 69 6f 6e 20 41 46 54 45 52 20     formation AFTER 
    37af:	77 72 69 74 65 0a 00                                write..

000037b6 <__c.4598>:
    37b6:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    37c6:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    37d6:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

000037e6 <__c.4596>:
    37e6:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    37f6:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    3806:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

00003815 <__c.4594>:
    3815:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    3825:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    3835:	66 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 0a 00     file not found..

00003845 <__c.4592>:
    3845:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    3855:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    3865:	66 69 6c 65 20 69 73 20 65 6d 70 74 79 0a 00        file is empty..

00003874 <__c.4590>:
    3874:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    3884:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 6e     le_as_e010: lifn
    3894:	61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00           ame is empty..

000038a2 <__c.4588>:
    38a2:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    38b2:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 69     le_as_e010: lifi
    38c2:	6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d 70 74     magename is empt
    38d2:	79 0a 00                                            y..

000038d5 <__c.4574>:
    38d5:	57 72 6f 74 65 3a 20 25 38 6c 64 0d 00              Wrote: %8ld..

000038e2 <__c.4572>:
    38e2:	57 72 6f 74 65 3a 20 25 38 6c 64 0d 00              Wrote: %8ld..

000038ef <__c.4567>:
    38ef:	57 72 6f 74 65 3a 20 25 38 6c 64 0d 00              Wrote: %8ld..

000038fc <__c.4550>:
    38fc:	45 78 70 65 63 74 65 64 20 73 65 63 74 6f 72 20     Expected sector 
    390c:	62 6f 75 6e 64 72 79 2c 20 6f 66 66 73 65 74 3a     boundry, offset:
    391c:	25 64 0a 00                                         %d..

00003920 <__c.4533>:
    3920:	6c 69 66 5f 65 30 31 30 5f 64 61 70 5f 73 65 63     lif_e010_dap_sec
    3930:	74 6f 72 3a 20 65 78 70 65 63 74 65 64 20 73 65     tor: expected se
    3940:	63 74 6f 72 20 62 6f 75 6e 64 72 79 3a 20 6f 66     ctor boundry: of
    3950:	66 73 65 74 3a 25 64 0a 00                          fset:%d..

00003959 <__c.4519>:
    3959:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    3969:	73 5d 20 6c 69 66 6c 61 62 65 6c 20 74 6f 6f 20     s] liflabel too 
    3979:	62 69 67 0a 00                                      big..

0000397e <__c.4517>:
    397e:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    398e:	73 5d 20 69 6e 76 61 6c 69 64 20 63 68 61 72 61     s] invalid chara
    399e:	63 74 65 72 73 0a 00                                cters..

000039a5 <__c.4510>:
    39a5:	25 38 6c 64 20 46 72 65 65 20 73 65 63 74 6f 72     %8ld Free sector
    39b5:	73 0a 00                                            s..

000039b8 <__c.4508>:
    39b8:	25 38 6c 64 20 55 73 65 64 20 73 65 63 74 6f 72     %8ld Used sector
    39c8:	73 0a 00                                            s..

000039cb <__c.4506>:
    39cb:	25 38 6c 64 20 50 75 72 67 65 64 0a 00              %8ld Purged..

000039d8 <__c.4504>:
    39d8:	25 38 6c 64 20 46 69 6c 65 73 0a 00                 %8ld Files..

000039e4 <__c.4502>:
    39e4:	0a 00                                               ..

000039e6 <__c.4499>:
    39e6:	25 2d 31 30 73 20 20 25 30 34 58 68 20 20 20 20     %-10s  %04Xh    
    39f6:	20 20 25 38 6c 58 68 20 20 20 25 39 6c 64 25 63       %8lXh   %9ld%c
    3a06:	20 20 20 20 20 20 25 34 64 20 20 20 25 73 0a 00           %4d   %s..

00003a16 <__c.4497>:
    3a16:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3a26:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    3a36:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3a46:	6f 72 73 3a 25 6c 64 20 21 3d 20 46 69 6c 65 53     ors:%ld != FileS
    3a56:	65 63 74 6f 72 73 3a 25 6c 64 0a 00                 ectors:%ld..

00003a62 <__c.4494>:
    3a62:	4e 41 4d 45 20 20 20 20 20 20 20 20 20 54 59 50     NAME         TYP
    3a72:	45 20 20 20 53 54 41 52 54 20 53 45 43 54 4f 52     E   START SECTOR
    3a82:	20 20 20 20 20 20 20 20 53 49 5a 45 20 20 20 20             SIZE    
    3a92:	52 45 43 53 49 5a 45 20 20 20 44 41 54 45 0a 00     RECSIZE   DATE..

00003aa2 <__c.4492>:
    3aa2:	56 6f 6c 75 6d 65 3a 5b 25 73 5d 20 44 61 74 65     Volume:[%s] Date
    3ab2:	3a 5b 25 73 5d 0a 00                                :[%s]..

00003ab9 <__c.4482>:
    3ab9:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3ac9:	5b 25 73 5d 20 65 72 72 6f 72 20 64 69 72 65 63     [%s] error direc
    3ad9:	74 6f 72 79 20 63 68 65 63 6b 20 66 61 69 6c 65     tory check faile
    3ae9:	64 0a 00                                            d..

00003aec <__c.4480>:
    3aec:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3afc:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    3b0c:	65 20 76 61 6c 69 64 61 74 65 20 66 61 69 6c 65     e validate faile
    3b1c:	64 0a 00                                            d..

00003b1f <__c.4478>:
    3b1f:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3b2f:	5b 25 73 5d 20 65 72 72 6f 72 20 72 65 61 64 20     [%s] error read 
    3b3f:	76 6f 6c 75 6d 65 20 68 65 61 64 65 72 20 66 61     volume header fa
    3b4f:	69 6c 65 64 0a 00                                   iled..

00003b55 <__c.4476>:
    3b55:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3b65:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    3b75:	65 20 68 65 61 64 65 72 20 61 72 65 61 20 74 6f     e header area to
    3b85:	6f 20 73 6d 61 6c 6c 3a 5b 25 6c 64 5d 0a 00        o small:[%ld]..

00003b94 <__c.4463>:
    3b94:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 69 6e 64 65     lif_newdir: inde
    3ba4:	78 3a 5b 25 64 5d 20 61 64 64 69 6e 67 20 61 74     x:[%d] adding at
    3bb4:	3a 5b 25 6c 64 5d 74 6f 20 70 75 72 67 65 64 20     :[%ld]to purged 
    3bc4:	73 70 61 63 65 3a 5b 25 6c 64 5d 20 73 65 63 74     space:[%ld] sect
    3bd4:	6f 72 73 2c 20 66 72 65 65 3a 5b 25 6c 64 5d 0a     ors, free:[%ld].
	...

00003be5 <__c.4460>:
    3be5:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    3bf5:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    3c05:	65 3a 5b 25 6c 64 5d 0a 00                          e:[%ld]..

00003c0e <__c.4458>:
    3c0e:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    3c1e:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    3c2e:	65 3a 5b 25 6c 64 5d 20 66 6f 72 20 73 69 7a 65     e:[%ld] for size
    3c3e:	3a 5b 25 6c 64 5d 0a 00                             :[%ld]..

00003c46 <__c.4446>:
    3c46:	6c 69 66 5f 75 70 64 61 74 65 5f 66 72 65 65 3a     lif_update_free:
    3c56:	5b 25 73 5d 20 65 72 72 6f 72 20 70 72 65 76 69     [%s] error previ
    3c66:	6f 75 73 20 72 65 63 6f 72 64 20 66 69 6c 65 20     ous record file 
    3c76:	61 72 65 61 20 6f 76 65 72 6c 61 70 73 20 74 68     area overlaps th
    3c86:	69 73 20 6f 6e 65 3a 5b 25 73 5d 0a 00              is one:[%s]..

00003c93 <__c.4421>:
    3c93:	6c 69 66 5f 63 68 65 63 6b 5f 64 69 72 3a 20 65     lif_check_dir: e
    3ca3:	72 72 6f 72 2c 20 69 6e 64 65 78 3a 25 64 0a 00     rror, index:%d..

00003cb3 <__c.4412>:
    3cb3:	6c 69 66 5f 63 68 65 63 6b 64 69 72 69 6e 64 65     lif_checkdirinde
    3cc3:	78 3a 5b 25 73 5d 20 64 69 72 65 63 6f 72 79 20     x:[%s] direcory 
    3cd3:	69 6e 64 65 78 3a 5b 25 64 5d 20 6f 75 74 20 6f     index:[%d] out o
    3ce3:	66 20 62 6f 75 6e 64 73 0a 00                       f bounds..

00003ced <__c.4393>:
    3ced:	57 72 6f 74 65 3a 20 25 6c 64 0a 00                 Wrote: %ld..

00003cf9 <__c.4388>:
    3cf9:	57 72 6f 74 65 3a 20 25 6c 64 0d 00                 Wrote: %ld..

00003d05 <__c.4383>:
    3d05:	57 72 6f 74 65 3a 20 25 6c 64 0d 00                 Wrote: %ld..

00003d11 <__c.4375>:
    3d11:	57 72 6f 74 65 3a 20 25 6c 64 0d 00                 Wrote: %ld..

00003d1d <__c.4373>:
    3d1d:	43 72 65 61 74 69 6e 67 3a 25 73 2c 20 4c 61 62     Creating:%s, Lab
    3d2d:	65 6c 3a 25 31 30 73 2c 20 44 69 72 65 63 74 6f     el:%10s, Directo
    3d3d:	72 79 20 53 74 61 72 74 20 25 6c 64 2c 20 44 69     ry Start %ld, Di
    3d4d:	72 65 63 74 6f 72 79 20 53 69 7a 65 3a 20 25 6c     rectory Size: %l
    3d5d:	64 2c 20 46 69 6c 65 20 53 65 63 74 6f 72 73 3a     d, File Sectors:
    3d6d:	25 6c 64 0a 00                                      %ld..

00003d72 <__c.4357>:
    3d72:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3d82:	73 5d 20 69 6e 76 61 6c 69 64 20 73 65 63 74 6f     s] invalid secto
    3d92:	72 20 73 69 7a 65 3a 25 6c 64 0a 00                 r size:%ld..

00003d9e <__c.4355>:
    3d9e:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3dae:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3dbe:	79 74 65 73 20 3d 3d 20 30 0a 00                    ytes == 0..

00003dc9 <__c.4353>:
    3dc9:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3dd9:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    3de9:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3df9:	6f 72 73 3a 25 6c 64 20 3c 20 46 69 6c 65 53 65     ors:%ld < FileSe
    3e09:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003e14 <__c.4351>:
    3e14:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3e24:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3e34:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3e44:	6f 72 73 3a 25 6c 64 20 3e 20 46 69 6c 65 53 65     ors:%ld > FileSe
    3e54:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003e5f <__c.4349>:
    3e5f:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3e6f:	73 5d 20 69 6e 76 61 6c 69 64 20 56 6f 6c 75 6d     s] invalid Volum
    3e7f:	65 20 4e 75 6d 62 65 72 3a 25 58 68 0a 00           e Number:%Xh..

00003e8d <__c.4347>:
    3e8d:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3e9d:	73 5d 20 69 6e 76 61 6c 69 64 20 65 6e 64 20 73     s] invalid end s
    3ead:	65 63 74 6f 72 3a 25 6c 58 68 20 3e 20 74 6f 74     ector:%lXh > tot
    3ebd:	61 6c 20 73 65 63 74 6f 72 73 3a 25 6c 58 68 0a     al sectors:%lXh.
	...

00003ece <__c.4345>:
    3ece:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3ede:	73 5d 20 69 6e 76 61 6c 69 64 20 73 74 61 72 74     s] invalid start
    3eee:	20 73 65 63 74 6f 72 3a 25 6c 58 68 20 3c 20 66      sector:%lXh < f
    3efe:	69 65 20 61 72 65 61 20 73 74 61 72 74 3a 25 6c     ie area start:%l
    3f0e:	58 68 0a 00                                         Xh..

00003f12 <__c.4343>:
    3f12:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3f22:	73 5d 20 69 6e 76 61 6c 69 64 20 4e 61 6d 65 0a     s] invalid Name.
	...

00003f33 <__c.4337>:
    3f33:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3f43:	69 64 20 66 69 6c 65 20 73 74 61 72 74 20 3e 20     id file start > 
    3f53:	69 6d 61 67 65 20 73 69 7a 65 0a 00                 image size..

00003f5f <__c.4335>:
    3f5f:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3f6f:	69 64 20 44 69 72 65 63 74 6f 72 79 20 53 65 63     id Directory Sec
    3f7f:	74 6f 72 20 43 6f 75 6e 74 20 3c 20 31 0a 00        tor Count < 1..

00003f8e <__c.4333>:
    3f8e:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3f9e:	69 64 20 73 74 61 72 74 20 73 65 63 74 6f 72 3a     id start sector:
    3fae:	25 6c 64 0a 00                                      %ld..

00003fb3 <__c.4331>:
    3fb3:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3fc3:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    3fd3:	65 74 20 32 32 26 32 33 20 73 68 6f 75 6c 64 20     et 22&23 should 
    3fe3:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00003fec <__c.4329>:
    3fec:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3ffc:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    400c:	65 74 20 31 34 26 31 35 20 73 68 6f 75 6c 64 20     et 14&15 should 
    401c:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00004025 <__c.4327>:
    4025:	4c 49 46 20 56 65 72 73 69 6f 6e 3a 20 25 30 34     LIF Version: %04
    4035:	58 48 20 3e 20 31 0a 00                             XH > 1..

0000403d <__c.4325>:
    403d:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    404d:	69 64 20 53 79 73 74 65 6d 33 30 30 30 20 49 44     id System3000 ID
    405d:	20 28 25 30 34 58 48 29 20 65 78 70 65 63 74 65      (%04XH) expecte
    406d:	64 20 31 30 30 30 48 0a 00                          d 1000H..

00004076 <__c.4323>:
    4076:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    4086:	69 64 20 56 6f 6c 75 6d 65 20 4e 61 6d 65 00        id Volume Name.

00004095 <__c.4316>:
    4095:	0a 00                                               ..

00004097 <__c.4314>:
    4097:	44 49 52 20 46 69 6c 65 20 44 61 74 65 3a 20 20     DIR File Date:  
    40a7:	20 20 20 20 20 20 25 73 0a 00                             %s..

000040b1 <__c.4312>:
    40b1:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 20     DIR File sector 
    40c1:	73 69 7a 65 3a 20 25 38 58 68 0a 00                 size: %8Xh..

000040cd <__c.4310>:
    40cd:	44 49 52 20 46 69 6c 65 20 62 79 74 65 73 3a 20     DIR File bytes: 
    40dd:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000040ea <__c.4308>:
    40ea:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 73     DIR File sectors
    40fa:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

00004107 <__c.4306>:
    4107:	44 49 52 20 46 69 6c 65 20 73 74 61 72 74 3a 20     DIR File start: 
    4117:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004124 <__c.4304>:
    4124:	44 49 52 20 46 69 6c 65 20 56 6f 6c 75 6d 65 23     DIR File Volume#
    4134:	3a 20 20 20 20 20 25 38 58 68 0a 00                 :     %8Xh..

00004140 <__c.4302>:
    4140:	44 49 52 20 46 69 6c 65 20 54 79 70 65 3a 20 20     DIR File Type:  
    4150:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

0000415c <__c.4300>:
    415c:	44 49 52 20 46 69 6c 65 20 4e 61 6d 65 3a 20 20     DIR File Name:  
    416c:	20 20 20 20 20 20 25 73 0a 00                             %s..

00004176 <__c.4298>:
    4176:	56 4f 4c 20 44 61 74 65 3a 20 20 20 20 20 20 20     VOL Date:       
    4186:	20 20 20 20 20 20 25 73 0a 00                             %s..

00004190 <__c.4296>:
    4190:	56 4f 4c 20 4c 49 46 56 65 72 73 69 6f 6e 3a 20     VOL LIFVersion: 
    41a0:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

000041ac <__c.4294>:
    41ac:	56 4f 4c 20 33 30 30 30 4c 49 46 69 64 3a 20 20     VOL 3000LIFid:  
    41bc:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

000041c8 <__c.4292>:
    41c8:	56 4f 4c 20 44 69 72 20 73 65 63 74 6f 72 73 3a     VOL Dir sectors:
    41d8:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000041e5 <__c.4290>:
    41e5:	56 4f 4c 20 44 69 72 20 73 74 61 72 74 3a 20 20     VOL Dir start:  
    41f5:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004202 <__c.4288>:
    4202:	56 4f 4c 20 4c 49 46 69 64 3a 20 20 20 20 20 20     VOL LIFid:      
    4212:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

0000421e <__c.4286>:
    421e:	56 4f 4c 20 4c 61 62 65 6c 3a 20 20 20 20 20 20     VOL Label:      
    422e:	20 20 20 20 20 20 25 73 0a 00                             %s..

00004238 <__c.4284>:
    4238:	4c 49 46 20 70 75 72 67 65 64 3a 20 20 20 20 20     LIF purged:     
    4248:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004255 <__c.4282>:
    4255:	4c 49 46 20 66 69 6c 65 73 3a 20 20 20 20 20 20     LIF files:      
    4265:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004272 <__c.4280>:
    4272:	4c 49 46 20 66 72 65 65 3a 20 20 20 20 20 20 20     LIF free:       
    4282:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

0000428f <__c.4278>:
    428f:	4c 49 46 20 75 73 65 64 3a 20 20 20 20 20 20 20     LIF used:       
    429f:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000042ac <__c.4276>:
    42ac:	4c 49 46 20 66 69 6c 65 20 73 65 63 74 6f 72 73     LIF file sectors
    42bc:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

000042c9 <__c.4274>:
    42c9:	4c 49 46 20 66 69 6c 65 73 74 61 72 74 3a 20 20     LIF filestart:  
    42d9:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000042e6 <__c.4272>:
    42e6:	4c 49 46 20 62 79 74 65 73 3a 20 20 20 20 20 20     LIF bytes:      
    42f6:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004303 <__c.4270>:
    4303:	4c 49 46 20 73 65 63 74 6f 72 73 3a 20 20 20 20     LIF sectors:    
    4313:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004320 <__c.4268>:
    4320:	4c 49 46 20 6e 61 6d 65 3a 20 20 20 20 20 20 20     LIF name:       
    4330:	20 20 20 20 20 20 25 73 0a 00                             %s..

0000433a <__c.4266>:
    433a:	0a 25 73 0a 00                                      .%s..

0000433f <__c.4143>:
    433f:	6c 69 66 5f 77 72 69 74 65 3a 20 57 72 69 74 65     lif_write: Write
    434f:	3a 5b 25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c     :[%s] offset:[%l
    435f:	64 5d 20 77 72 69 74 65 3a 5b 25 64 5d 20 65 78     d] write:[%d] ex
    436f:	70 65 63 74 65 64 3a 5b 25 64 5d 0a 00              pected:[%d]..

0000437c <__c.4134>:
    437c:	6c 69 66 5f 72 65 61 64 3a 20 72 65 61 64 3a 5b     lif_read: read:[
    438c:	25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c 64 5d     %s] offset:[%ld]
    439c:	20 77 72 69 74 65 3a 5b 25 6c 64 5d 20 65 78 70      write:[%ld] exp
    43ac:	65 63 74 65 64 3a 5b 25 64 5d 0a 00                 ected:[%d]..

000043b8 <__c.4125>:
    43b8:	6c 69 66 5f 72 65 61 64 5f 6d 73 67 3a 20 25 73     lif_read_msg: %s
    43c8:	20 53 65 65 6b 20 65 72 72 6f 72 20 25 6c 64 0a      Seek error %ld.
	...

000043d9 <__c.4118>:
    43d9:	6c 69 66 5f 73 74 61 74 3a 20 43 61 6e 27 74 20     lif_stat: Can't 
    43e9:	73 74 61 74 3a 25 73 0a 00                          stat:%s..

000043f2 <__c.4112>:
    43f2:	6c 69 66 5f 6f 70 65 6e 3a 20 43 61 6e 27 74 20     lif_open: Can't 
    4402:	6f 70 65 6e 3a 5b 25 73 5d 20 6d 6f 64 65 3a 5b     open:[%s] mode:[
    4412:	25 73 5d 0a 00                                      %s]..

00004417 <__c.4100>:
    4417:	6c 69 66 5f 66 72 65 65 3a 20 4e 55 4c 4c 20 70     lif_free: NULL p
    4427:	6f 69 6e 74 65 72 0a 00                             ointer..

0000442f <__c.4095>:
    442f:	6c 69 66 5f 63 61 6c 6c 6f 63 3a 5b 25 6c 64 5d     lif_calloc:[%ld]
    443f:	20 6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65      not enough free
    444f:	20 6d 65 6d 6f 72 79 0a 00                           memory..

00004458 <__c.4083>:
    4458:	6c 69 66 20 61 64 64 20 6c 69 66 69 6d 61 67 65     lif add lifimage
    4468:	20 6c 69 66 6e 61 6d 65 20 66 72 6f 6d 5f 61 73      lifname from_as
    4478:	63 69 69 5f 66 69 6c 65 0a 6c 69 66 20 61 64 64     cii_file.lif add
    4488:	62 69 6e 20 6c 69 66 69 6d 61 67 65 20 6c 69 66     bin lifimage lif
    4498:	6e 61 6d 65 20 66 72 6f 6d 5f 6c 69 66 5f 66 69     name from_lif_fi
    44a8:	6c 65 0a 6c 69 66 20 63 72 65 61 74 65 20 6c 69     le.lif create li
    44b8:	66 69 6d 61 67 65 20 6c 61 62 65 6c 20 64 69 72     fimage label dir
    44c8:	65 63 74 6f 72 79 5f 73 65 63 74 6f 72 73 20 73     ectory_sectors s
    44d8:	65 63 74 6f 72 73 0a 6c 69 66 20 64 65 6c 20 6c     ectors.lif del l
    44e8:	69 66 69 6d 61 67 65 20 6e 61 6d 65 0a 6c 69 66     ifimage name.lif
    44f8:	20 64 69 72 20 6c 69 66 69 6d 61 67 65 0a 6c 69      dir lifimage.li
    4508:	66 20 65 78 74 72 61 63 74 20 6c 69 66 69 6d 61     f extract lifima
    4518:	67 65 20 6c 69 66 6e 61 6d 65 20 74 6f 5f 61 73     ge lifname to_as
    4528:	63 69 69 5f 66 69 6c 65 0a 6c 69 66 20 65 78 74     cii_file.lif ext
    4538:	72 61 63 74 62 69 6e 20 6c 69 66 69 6d 61 67 65     ractbin lifimage
    4548:	20 6c 69 66 6e 61 6d 65 20 74 6f 5f 6c 69 66 5f      lifname to_lif_
    4558:	66 69 6c 65 0a 20 20 20 20 65 78 74 72 61 63 74     file.    extract
    4568:	73 20 61 20 66 69 6c 65 20 69 6e 74 6f 20 61 20     s a file into a 
    4578:	73 69 67 6c 65 20 66 69 6c 65 20 4c 49 46 20 69     sigle file LIF i
    4588:	6d 61 67 65 0a 6c 69 66 20 72 65 6e 61 6d 65 20     mage.lif rename 
    4598:	6c 69 66 69 6d 61 67 65 20 6f 6c 64 6c 69 66 6e     lifimage oldlifn
    45a8:	61 6d 65 20 6e 65 77 6c 69 66 6e 61 6d 65 0a 55     ame newlifname.U
    45b8:	73 65 20 2d 64 20 61 66 74 65 72 20 66 69 72 73     se -d after firs
    45c8:	74 20 6b 65 79 77 6f 72 64 20 27 6c 69 66 27 20     t keyword 'lif' 
    45d8:	61 62 6f 76 65 20 66 6f 72 20 4c 49 46 20 66 69     above for LIF fi
    45e8:	6c 65 73 79 73 74 65 6d 20 64 65 62 75 67 67 69     lesystem debuggi
    45f8:	6e 67 0a 0a 00                                      ng...

000045fd <__c.4081>:
    45fd:	6c 69 66 20 68 65 6c 70 0a 00                       lif help..

00004607 <__c.4543>:
    4607:	53 74 61 72 74 69 6e 67 20 47 50 49 42 20 54 41     Starting GPIB TA
    4617:	53 4b 0a 00                                         SK..

0000461b <__c.4541>:
    461b:	64 65 62 75 67 6c 65 76 65 6c 20 20 20 3d 20 25     debuglevel   = %
    462b:	30 34 78 48 0a 00                                   04xH..

00004631 <__c.4539>:
    4631:	47 50 49 42 20 53 74 61 74 65 20 69 6e 69 74 20     GPIB State init 
    4641:	64 6f 6e 65 0a 00                                   done..

00004647 <__c.4537>:
    4647:	47 50 49 42 20 46 69 6c 65 20 69 6e 69 74 20 64     GPIB File init d
    4657:	6f 6e 65 0a 00                                      one..

0000465c <__c.4535>:
    465c:	47 50 49 42 20 54 69 6d 65 72 20 69 6e 69 74 69     GPIB Timer initi
    466c:	61 6c 69 7a 65 64 0a 00                             alized..

00004674 <__c.4533>:
    4674:	47 50 49 42 20 54 69 6d 65 72 20 53 65 74 75 70     GPIB Timer Setup
    4684:	0a 00                                               ..

00004686 <__c.4531>:
    4686:	50 72 69 6e 74 65 72 20 69 6e 69 74 69 61 6c 69     Printer initiali
    4696:	7a 65 64 0a 00                                      zed..

0000469b <__c.4529>:
    469b:	47 50 49 42 20 62 75 73 20 69 6e 69 74 69 61 6c     GPIB bus initial
    46ab:	69 7a 65 64 0a 00                                   ized..

000046b1 <__c.4527>:
    46b1:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 65 64 0a     MMC initialized.
	...

000046c2 <__c.4525>:
    46c2:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 69 6e 67     MMC initializing
    46d2:	20 73 74 61 72 74 0a 00                              start..

000046da <__c.4523>:
    46da:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    46ea:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

000046f4 <__c.4521>:
    46f4:	49 32 43 20 4c 43 44 20 69 6e 69 74 69 61 6c 69     I2C LCD initiali
    4704:	7a 61 74 69 6f 6e 20 44 6f 6e 65 0a 00              zation Done..

00004711 <__c.4519>:
    4711:	49 32 43 20 4c 43 44 20 69 6e 69 74 69 61 6c 69     I2C LCD initiali
    4721:	7a 61 74 69 6f 6e 20 73 74 61 72 74 0a 00           zation start..

0000472f <__c.4517>:
    472f:	53 59 53 54 45 4d 5f 54 41 53 4b 5f 43 4f 55 4e     SYSTEM_TASK_COUN
    473f:	54 45 52 5f 52 45 53 3a 25 6c 64 0a 00              TER_RES:%ld..

0000474c <__c.4515>:
    474c:	43 6c 6f 63 6b 20 63 6c 65 61 72 65 64 0a 00        Clock cleared..

0000475b <__c.4513>:
    475b:	69 6e 69 74 69 61 6c 69 7a 69 6e 67 20 52 54 43     initializing RTC
    476b:	0a 00                                               ..

0000476d <__c.4511>:
    476d:	69 6e 69 74 69 61 6c 69 7a 69 6e 67 20 49 32 43     initializing I2C
    477d:	20 62 75 73 0a 00                                    bus..

00004783 <__c.4509>:
    4783:	69 6e 69 74 69 61 6c 69 7a 69 6e 67 20 53 50 49     initializing SPI
    4793:	20 62 75 73 0a 00                                    bus..

00004799 <__c.4507>:
    4799:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    47a9:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

000047b3 <__c.4505>:
    47b3:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    47c3:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

000047cd <__c.4503>:
    47cd:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    47dd:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    47ed:	35 64 69 73 6b 0a 00                                5disk..

000047f4 <__c.4501>:
    47f4:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

00004804 <__c.4499>:
    4804:	20 28 43 29 20 32 30 31 34 2d 32 30 32 30 20 62      (C) 2014-2020 b
    4814:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

00004821 <__c.4497>:
    4821:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    4831:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

00004840 <__c.4495>:
    4840:	52 65 71 75 65 73 74 65 64 20 42 61 75 64 20 52     Requested Baud R
    4850:	61 74 65 3a 20 25 6c 64 2c 20 41 63 74 75 61 6c     ate: %ld, Actual
    4860:	3a 20 25 6c 64 0a 00                                : %ld..

00004867 <__c.4493>:
    4867:	43 50 55 20 43 6c 6f 63 6b 20 3d 20 25 6c 75 0a     CPU Clock = %lu.
	...

00004878 <__c.4491>:
    4878:	53 74 61 72 74 0a 00                                Start..

0000487f <__c.4483>:
    487f:	45 72 72 6f 72 3a 5b 25 73 5d 0a 00                 Error:[%s]..

0000488b <__c.4481>:
    488b:	0a 3e 00                                            .>.

0000488e <__c.4471>:
    488e:	64 65 6c 61 79 5f 74 65 73 74 73 0a 74 69 6d 65     delay_tests.time
    489e:	0a 73 65 74 64 61 74 65 0a 6d 65 6d 0a 0a 00        .setdate.mem...

000048ad <__c.4467>:
    48ad:	4d 79 20 64 65 6c 61 79 73 0a 00                    My delays..

000048b8 <__c.4465>:
    48b8:	53 79 73 74 65 6d 20 64 65 6c 61 79 73 0a 00        System delays..

000048c7 <__c.4461>:
    48c7:	0a 00                                               ..

000048c9 <__c.4459>:
    48c9:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    48d9:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

000048e3 <__c.4457>:
    48e3:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    48f3:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

000048fd <__c.4455>:
    48fd:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    490d:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    491d:	35 64 69 73 6b 0a 00                                5disk..

00004924 <__c.4453>:
    4924:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

00004934 <__c.4451>:
    4934:	20 28 63 29 20 32 30 31 34 2d 32 30 32 30 20 62      (c) 2014-2020 b
    4944:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

00004951 <__c.4449>:
    4951:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    4961:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

00004970 <__c.4447>:
    4970:	53 74 61 6e 64 20 61 6c 6f 6e 65 20 76 65 72 73     Stand alone vers
    4980:	69 6f 6e 20 6f 66 20 4c 49 46 20 75 74 69 6c 69     ion of LIF utili
    4990:	74 69 65 73 20 66 6f 72 20 6c 69 6e 75 78 0a 00     ties for linux..

000049a0 <__ctors_end>:
    49a0:	11 24       	eor	r1, r1
    49a2:	1f be       	out	0x3f, r1	; 63
    49a4:	cf ef       	ldi	r28, 0xFF	; 255
    49a6:	d0 e4       	ldi	r29, 0x40	; 64
    49a8:	de bf       	out	0x3e, r29	; 62
    49aa:	cd bf       	out	0x3d, r28	; 61

000049ac <__do_copy_data>:
    49ac:	17 e1       	ldi	r17, 0x17	; 23
    49ae:	a0 e0       	ldi	r26, 0x00	; 0
    49b0:	b1 e0       	ldi	r27, 0x01	; 1
    49b2:	e2 ea       	ldi	r30, 0xA2	; 162
    49b4:	fa ed       	ldi	r31, 0xDA	; 218
    49b6:	01 e0       	ldi	r16, 0x01	; 1
    49b8:	0b bf       	out	0x3b, r16	; 59
    49ba:	02 c0       	rjmp	.+4      	; 0x49c0 <__do_copy_data+0x14>
    49bc:	07 90       	elpm	r0, Z+
    49be:	0d 92       	st	X+, r0
    49c0:	ac 36       	cpi	r26, 0x6C	; 108
    49c2:	b1 07       	cpc	r27, r17
    49c4:	d9 f7       	brne	.-10     	; 0x49bc <__do_copy_data+0x10>

000049c6 <__do_clear_bss>:
    49c6:	21 e2       	ldi	r18, 0x21	; 33
    49c8:	ac e6       	ldi	r26, 0x6C	; 108
    49ca:	b7 e1       	ldi	r27, 0x17	; 23
    49cc:	01 c0       	rjmp	.+2      	; 0x49d0 <.do_clear_bss_start>

000049ce <.do_clear_bss_loop>:
    49ce:	1d 92       	st	X+, r1

000049d0 <.do_clear_bss_start>:
    49d0:	af 3b       	cpi	r26, 0xBF	; 191
    49d2:	b2 07       	cpc	r27, r18
    49d4:	e1 f7       	brne	.-8      	; 0x49ce <.do_clear_bss_loop>
    49d6:	0e 94 b2 e5 	call	0x1cb64	; 0x1cb64 <main>
    49da:	0c 94 4f ed 	jmp	0x1da9e	; 0x1da9e <_exit>

000049de <__bad_interrupt>:
    49de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000049e2 <vfprintf>:
    49e2:	2f 92       	push	r2
    49e4:	3f 92       	push	r3
    49e6:	4f 92       	push	r4
    49e8:	5f 92       	push	r5
    49ea:	6f 92       	push	r6
    49ec:	7f 92       	push	r7
    49ee:	8f 92       	push	r8
    49f0:	9f 92       	push	r9
    49f2:	af 92       	push	r10
    49f4:	bf 92       	push	r11
    49f6:	cf 92       	push	r12
    49f8:	df 92       	push	r13
    49fa:	ef 92       	push	r14
    49fc:	ff 92       	push	r15
    49fe:	0f 93       	push	r16
    4a00:	1f 93       	push	r17
    4a02:	cf 93       	push	r28
    4a04:	df 93       	push	r29
    4a06:	cd b7       	in	r28, 0x3d	; 61
    4a08:	de b7       	in	r29, 0x3e	; 62
    4a0a:	60 97       	sbiw	r28, 0x10	; 16
    4a0c:	0f b6       	in	r0, 0x3f	; 63
    4a0e:	f8 94       	cli
    4a10:	de bf       	out	0x3e, r29	; 62
    4a12:	0f be       	out	0x3f, r0	; 63
    4a14:	cd bf       	out	0x3d, r28	; 61
    4a16:	7c 01       	movw	r14, r24
    4a18:	1b 01       	movw	r2, r22
    4a1a:	6a 01       	movw	r12, r20
    4a1c:	fc 01       	movw	r30, r24
    4a1e:	17 82       	std	Z+7, r1	; 0x07
    4a20:	16 82       	std	Z+6, r1	; 0x06
    4a22:	83 81       	ldd	r24, Z+3	; 0x03
    4a24:	81 ff       	sbrs	r24, 1
    4a26:	44 c3       	rjmp	.+1672   	; 0x50b0 <vfprintf+0x6ce>
    4a28:	9e 01       	movw	r18, r28
    4a2a:	2f 5f       	subi	r18, 0xFF	; 255
    4a2c:	3f 4f       	sbci	r19, 0xFF	; 255
    4a2e:	39 01       	movw	r6, r18
    4a30:	f7 01       	movw	r30, r14
    4a32:	93 81       	ldd	r25, Z+3	; 0x03
    4a34:	f1 01       	movw	r30, r2
    4a36:	93 fd       	sbrc	r25, 3
    4a38:	85 91       	lpm	r24, Z+
    4a3a:	93 ff       	sbrs	r25, 3
    4a3c:	81 91       	ld	r24, Z+
    4a3e:	1f 01       	movw	r2, r30
    4a40:	88 23       	and	r24, r24
    4a42:	09 f4       	brne	.+2      	; 0x4a46 <vfprintf+0x64>
    4a44:	31 c3       	rjmp	.+1634   	; 0x50a8 <vfprintf+0x6c6>
    4a46:	85 32       	cpi	r24, 0x25	; 37
    4a48:	39 f4       	brne	.+14     	; 0x4a58 <vfprintf+0x76>
    4a4a:	93 fd       	sbrc	r25, 3
    4a4c:	85 91       	lpm	r24, Z+
    4a4e:	93 ff       	sbrs	r25, 3
    4a50:	81 91       	ld	r24, Z+
    4a52:	1f 01       	movw	r2, r30
    4a54:	85 32       	cpi	r24, 0x25	; 37
    4a56:	39 f4       	brne	.+14     	; 0x4a66 <vfprintf+0x84>
    4a58:	b7 01       	movw	r22, r14
    4a5a:	90 e0       	ldi	r25, 0x00	; 0
    4a5c:	0e 94 61 75 	call	0xeac2	; 0xeac2 <fputc>
    4a60:	56 01       	movw	r10, r12
    4a62:	65 01       	movw	r12, r10
    4a64:	e5 cf       	rjmp	.-54     	; 0x4a30 <vfprintf+0x4e>
    4a66:	10 e0       	ldi	r17, 0x00	; 0
    4a68:	51 2c       	mov	r5, r1
    4a6a:	91 2c       	mov	r9, r1
    4a6c:	ff e1       	ldi	r31, 0x1F	; 31
    4a6e:	f9 15       	cp	r31, r9
    4a70:	d8 f0       	brcs	.+54     	; 0x4aa8 <vfprintf+0xc6>
    4a72:	8b 32       	cpi	r24, 0x2B	; 43
    4a74:	79 f0       	breq	.+30     	; 0x4a94 <vfprintf+0xb2>
    4a76:	38 f4       	brcc	.+14     	; 0x4a86 <vfprintf+0xa4>
    4a78:	80 32       	cpi	r24, 0x20	; 32
    4a7a:	79 f0       	breq	.+30     	; 0x4a9a <vfprintf+0xb8>
    4a7c:	83 32       	cpi	r24, 0x23	; 35
    4a7e:	a1 f4       	brne	.+40     	; 0x4aa8 <vfprintf+0xc6>
    4a80:	f9 2d       	mov	r31, r9
    4a82:	f0 61       	ori	r31, 0x10	; 16
    4a84:	2e c0       	rjmp	.+92     	; 0x4ae2 <vfprintf+0x100>
    4a86:	8d 32       	cpi	r24, 0x2D	; 45
    4a88:	61 f0       	breq	.+24     	; 0x4aa2 <vfprintf+0xc0>
    4a8a:	80 33       	cpi	r24, 0x30	; 48
    4a8c:	69 f4       	brne	.+26     	; 0x4aa8 <vfprintf+0xc6>
    4a8e:	29 2d       	mov	r18, r9
    4a90:	21 60       	ori	r18, 0x01	; 1
    4a92:	2d c0       	rjmp	.+90     	; 0x4aee <vfprintf+0x10c>
    4a94:	39 2d       	mov	r19, r9
    4a96:	32 60       	ori	r19, 0x02	; 2
    4a98:	93 2e       	mov	r9, r19
    4a9a:	89 2d       	mov	r24, r9
    4a9c:	84 60       	ori	r24, 0x04	; 4
    4a9e:	98 2e       	mov	r9, r24
    4aa0:	2a c0       	rjmp	.+84     	; 0x4af6 <vfprintf+0x114>
    4aa2:	e9 2d       	mov	r30, r9
    4aa4:	e8 60       	ori	r30, 0x08	; 8
    4aa6:	15 c0       	rjmp	.+42     	; 0x4ad2 <vfprintf+0xf0>
    4aa8:	97 fc       	sbrc	r9, 7
    4aaa:	2d c0       	rjmp	.+90     	; 0x4b06 <vfprintf+0x124>
    4aac:	20 ed       	ldi	r18, 0xD0	; 208
    4aae:	28 0f       	add	r18, r24
    4ab0:	2a 30       	cpi	r18, 0x0A	; 10
    4ab2:	88 f4       	brcc	.+34     	; 0x4ad6 <vfprintf+0xf4>
    4ab4:	96 fe       	sbrs	r9, 6
    4ab6:	06 c0       	rjmp	.+12     	; 0x4ac4 <vfprintf+0xe2>
    4ab8:	3a e0       	ldi	r19, 0x0A	; 10
    4aba:	13 9f       	mul	r17, r19
    4abc:	20 0d       	add	r18, r0
    4abe:	11 24       	eor	r1, r1
    4ac0:	12 2f       	mov	r17, r18
    4ac2:	19 c0       	rjmp	.+50     	; 0x4af6 <vfprintf+0x114>
    4ac4:	8a e0       	ldi	r24, 0x0A	; 10
    4ac6:	58 9e       	mul	r5, r24
    4ac8:	20 0d       	add	r18, r0
    4aca:	11 24       	eor	r1, r1
    4acc:	52 2e       	mov	r5, r18
    4ace:	e9 2d       	mov	r30, r9
    4ad0:	e0 62       	ori	r30, 0x20	; 32
    4ad2:	9e 2e       	mov	r9, r30
    4ad4:	10 c0       	rjmp	.+32     	; 0x4af6 <vfprintf+0x114>
    4ad6:	8e 32       	cpi	r24, 0x2E	; 46
    4ad8:	31 f4       	brne	.+12     	; 0x4ae6 <vfprintf+0x104>
    4ada:	96 fc       	sbrc	r9, 6
    4adc:	e5 c2       	rjmp	.+1482   	; 0x50a8 <vfprintf+0x6c6>
    4ade:	f9 2d       	mov	r31, r9
    4ae0:	f0 64       	ori	r31, 0x40	; 64
    4ae2:	9f 2e       	mov	r9, r31
    4ae4:	08 c0       	rjmp	.+16     	; 0x4af6 <vfprintf+0x114>
    4ae6:	8c 36       	cpi	r24, 0x6C	; 108
    4ae8:	21 f4       	brne	.+8      	; 0x4af2 <vfprintf+0x110>
    4aea:	29 2d       	mov	r18, r9
    4aec:	20 68       	ori	r18, 0x80	; 128
    4aee:	92 2e       	mov	r9, r18
    4af0:	02 c0       	rjmp	.+4      	; 0x4af6 <vfprintf+0x114>
    4af2:	88 36       	cpi	r24, 0x68	; 104
    4af4:	41 f4       	brne	.+16     	; 0x4b06 <vfprintf+0x124>
    4af6:	f1 01       	movw	r30, r2
    4af8:	93 fd       	sbrc	r25, 3
    4afa:	85 91       	lpm	r24, Z+
    4afc:	93 ff       	sbrs	r25, 3
    4afe:	81 91       	ld	r24, Z+
    4b00:	1f 01       	movw	r2, r30
    4b02:	81 11       	cpse	r24, r1
    4b04:	b3 cf       	rjmp	.-154    	; 0x4a6c <vfprintf+0x8a>
    4b06:	9b eb       	ldi	r25, 0xBB	; 187
    4b08:	98 0f       	add	r25, r24
    4b0a:	93 30       	cpi	r25, 0x03	; 3
    4b0c:	20 f4       	brcc	.+8      	; 0x4b16 <vfprintf+0x134>
    4b0e:	99 2d       	mov	r25, r9
    4b10:	90 61       	ori	r25, 0x10	; 16
    4b12:	80 5e       	subi	r24, 0xE0	; 224
    4b14:	07 c0       	rjmp	.+14     	; 0x4b24 <vfprintf+0x142>
    4b16:	9b e9       	ldi	r25, 0x9B	; 155
    4b18:	98 0f       	add	r25, r24
    4b1a:	93 30       	cpi	r25, 0x03	; 3
    4b1c:	08 f0       	brcs	.+2      	; 0x4b20 <vfprintf+0x13e>
    4b1e:	66 c1       	rjmp	.+716    	; 0x4dec <vfprintf+0x40a>
    4b20:	99 2d       	mov	r25, r9
    4b22:	9f 7e       	andi	r25, 0xEF	; 239
    4b24:	96 ff       	sbrs	r25, 6
    4b26:	16 e0       	ldi	r17, 0x06	; 6
    4b28:	9f 73       	andi	r25, 0x3F	; 63
    4b2a:	99 2e       	mov	r9, r25
    4b2c:	85 36       	cpi	r24, 0x65	; 101
    4b2e:	19 f4       	brne	.+6      	; 0x4b36 <vfprintf+0x154>
    4b30:	90 64       	ori	r25, 0x40	; 64
    4b32:	99 2e       	mov	r9, r25
    4b34:	08 c0       	rjmp	.+16     	; 0x4b46 <vfprintf+0x164>
    4b36:	86 36       	cpi	r24, 0x66	; 102
    4b38:	21 f4       	brne	.+8      	; 0x4b42 <vfprintf+0x160>
    4b3a:	39 2f       	mov	r19, r25
    4b3c:	30 68       	ori	r19, 0x80	; 128
    4b3e:	93 2e       	mov	r9, r19
    4b40:	02 c0       	rjmp	.+4      	; 0x4b46 <vfprintf+0x164>
    4b42:	11 11       	cpse	r17, r1
    4b44:	11 50       	subi	r17, 0x01	; 1
    4b46:	97 fe       	sbrs	r9, 7
    4b48:	07 c0       	rjmp	.+14     	; 0x4b58 <vfprintf+0x176>
    4b4a:	1c 33       	cpi	r17, 0x3C	; 60
    4b4c:	50 f4       	brcc	.+20     	; 0x4b62 <vfprintf+0x180>
    4b4e:	44 24       	eor	r4, r4
    4b50:	43 94       	inc	r4
    4b52:	41 0e       	add	r4, r17
    4b54:	27 e0       	ldi	r18, 0x07	; 7
    4b56:	0b c0       	rjmp	.+22     	; 0x4b6e <vfprintf+0x18c>
    4b58:	18 30       	cpi	r17, 0x08	; 8
    4b5a:	38 f0       	brcs	.+14     	; 0x4b6a <vfprintf+0x188>
    4b5c:	27 e0       	ldi	r18, 0x07	; 7
    4b5e:	17 e0       	ldi	r17, 0x07	; 7
    4b60:	05 c0       	rjmp	.+10     	; 0x4b6c <vfprintf+0x18a>
    4b62:	27 e0       	ldi	r18, 0x07	; 7
    4b64:	9c e3       	ldi	r25, 0x3C	; 60
    4b66:	49 2e       	mov	r4, r25
    4b68:	02 c0       	rjmp	.+4      	; 0x4b6e <vfprintf+0x18c>
    4b6a:	21 2f       	mov	r18, r17
    4b6c:	41 2c       	mov	r4, r1
    4b6e:	56 01       	movw	r10, r12
    4b70:	84 e0       	ldi	r24, 0x04	; 4
    4b72:	a8 0e       	add	r10, r24
    4b74:	b1 1c       	adc	r11, r1
    4b76:	f6 01       	movw	r30, r12
    4b78:	60 81       	ld	r22, Z
    4b7a:	71 81       	ldd	r23, Z+1	; 0x01
    4b7c:	82 81       	ldd	r24, Z+2	; 0x02
    4b7e:	93 81       	ldd	r25, Z+3	; 0x03
    4b80:	04 2d       	mov	r16, r4
    4b82:	a3 01       	movw	r20, r6
    4b84:	0e 94 fc eb 	call	0x1d7f8	; 0x1d7f8 <__ftoa_engine>
    4b88:	6c 01       	movw	r12, r24
    4b8a:	f9 81       	ldd	r31, Y+1	; 0x01
    4b8c:	fc 87       	std	Y+12, r31	; 0x0c
    4b8e:	f0 ff       	sbrs	r31, 0
    4b90:	02 c0       	rjmp	.+4      	; 0x4b96 <vfprintf+0x1b4>
    4b92:	f3 ff       	sbrs	r31, 3
    4b94:	06 c0       	rjmp	.+12     	; 0x4ba2 <vfprintf+0x1c0>
    4b96:	91 fc       	sbrc	r9, 1
    4b98:	06 c0       	rjmp	.+12     	; 0x4ba6 <vfprintf+0x1c4>
    4b9a:	92 fe       	sbrs	r9, 2
    4b9c:	06 c0       	rjmp	.+12     	; 0x4baa <vfprintf+0x1c8>
    4b9e:	00 e2       	ldi	r16, 0x20	; 32
    4ba0:	05 c0       	rjmp	.+10     	; 0x4bac <vfprintf+0x1ca>
    4ba2:	0d e2       	ldi	r16, 0x2D	; 45
    4ba4:	03 c0       	rjmp	.+6      	; 0x4bac <vfprintf+0x1ca>
    4ba6:	0b e2       	ldi	r16, 0x2B	; 43
    4ba8:	01 c0       	rjmp	.+2      	; 0x4bac <vfprintf+0x1ca>
    4baa:	00 e0       	ldi	r16, 0x00	; 0
    4bac:	8c 85       	ldd	r24, Y+12	; 0x0c
    4bae:	8c 70       	andi	r24, 0x0C	; 12
    4bb0:	19 f0       	breq	.+6      	; 0x4bb8 <vfprintf+0x1d6>
    4bb2:	01 11       	cpse	r16, r1
    4bb4:	5a c2       	rjmp	.+1204   	; 0x506a <vfprintf+0x688>
    4bb6:	9b c2       	rjmp	.+1334   	; 0x50ee <vfprintf+0x70c>
    4bb8:	97 fe       	sbrs	r9, 7
    4bba:	10 c0       	rjmp	.+32     	; 0x4bdc <vfprintf+0x1fa>
    4bbc:	4c 0c       	add	r4, r12
    4bbe:	fc 85       	ldd	r31, Y+12	; 0x0c
    4bc0:	f4 ff       	sbrs	r31, 4
    4bc2:	04 c0       	rjmp	.+8      	; 0x4bcc <vfprintf+0x1ea>
    4bc4:	8a 81       	ldd	r24, Y+2	; 0x02
    4bc6:	81 33       	cpi	r24, 0x31	; 49
    4bc8:	09 f4       	brne	.+2      	; 0x4bcc <vfprintf+0x1ea>
    4bca:	4a 94       	dec	r4
    4bcc:	14 14       	cp	r1, r4
    4bce:	74 f5       	brge	.+92     	; 0x4c2c <vfprintf+0x24a>
    4bd0:	28 e0       	ldi	r18, 0x08	; 8
    4bd2:	24 15       	cp	r18, r4
    4bd4:	78 f5       	brcc	.+94     	; 0x4c34 <vfprintf+0x252>
    4bd6:	88 e0       	ldi	r24, 0x08	; 8
    4bd8:	48 2e       	mov	r4, r24
    4bda:	2c c0       	rjmp	.+88     	; 0x4c34 <vfprintf+0x252>
    4bdc:	96 fc       	sbrc	r9, 6
    4bde:	2a c0       	rjmp	.+84     	; 0x4c34 <vfprintf+0x252>
    4be0:	81 2f       	mov	r24, r17
    4be2:	90 e0       	ldi	r25, 0x00	; 0
    4be4:	8c 15       	cp	r24, r12
    4be6:	9d 05       	cpc	r25, r13
    4be8:	9c f0       	brlt	.+38     	; 0x4c10 <vfprintf+0x22e>
    4bea:	3c ef       	ldi	r19, 0xFC	; 252
    4bec:	c3 16       	cp	r12, r19
    4bee:	3f ef       	ldi	r19, 0xFF	; 255
    4bf0:	d3 06       	cpc	r13, r19
    4bf2:	74 f0       	brlt	.+28     	; 0x4c10 <vfprintf+0x22e>
    4bf4:	89 2d       	mov	r24, r9
    4bf6:	80 68       	ori	r24, 0x80	; 128
    4bf8:	98 2e       	mov	r9, r24
    4bfa:	0a c0       	rjmp	.+20     	; 0x4c10 <vfprintf+0x22e>
    4bfc:	e2 e0       	ldi	r30, 0x02	; 2
    4bfe:	f0 e0       	ldi	r31, 0x00	; 0
    4c00:	ec 0f       	add	r30, r28
    4c02:	fd 1f       	adc	r31, r29
    4c04:	e1 0f       	add	r30, r17
    4c06:	f1 1d       	adc	r31, r1
    4c08:	80 81       	ld	r24, Z
    4c0a:	80 33       	cpi	r24, 0x30	; 48
    4c0c:	19 f4       	brne	.+6      	; 0x4c14 <vfprintf+0x232>
    4c0e:	11 50       	subi	r17, 0x01	; 1
    4c10:	11 11       	cpse	r17, r1
    4c12:	f4 cf       	rjmp	.-24     	; 0x4bfc <vfprintf+0x21a>
    4c14:	97 fe       	sbrs	r9, 7
    4c16:	0e c0       	rjmp	.+28     	; 0x4c34 <vfprintf+0x252>
    4c18:	44 24       	eor	r4, r4
    4c1a:	43 94       	inc	r4
    4c1c:	41 0e       	add	r4, r17
    4c1e:	81 2f       	mov	r24, r17
    4c20:	90 e0       	ldi	r25, 0x00	; 0
    4c22:	c8 16       	cp	r12, r24
    4c24:	d9 06       	cpc	r13, r25
    4c26:	2c f4       	brge	.+10     	; 0x4c32 <vfprintf+0x250>
    4c28:	1c 19       	sub	r17, r12
    4c2a:	04 c0       	rjmp	.+8      	; 0x4c34 <vfprintf+0x252>
    4c2c:	44 24       	eor	r4, r4
    4c2e:	43 94       	inc	r4
    4c30:	01 c0       	rjmp	.+2      	; 0x4c34 <vfprintf+0x252>
    4c32:	10 e0       	ldi	r17, 0x00	; 0
    4c34:	97 fe       	sbrs	r9, 7
    4c36:	06 c0       	rjmp	.+12     	; 0x4c44 <vfprintf+0x262>
    4c38:	1c 14       	cp	r1, r12
    4c3a:	1d 04       	cpc	r1, r13
    4c3c:	34 f4       	brge	.+12     	; 0x4c4a <vfprintf+0x268>
    4c3e:	c6 01       	movw	r24, r12
    4c40:	01 96       	adiw	r24, 0x01	; 1
    4c42:	05 c0       	rjmp	.+10     	; 0x4c4e <vfprintf+0x26c>
    4c44:	85 e0       	ldi	r24, 0x05	; 5
    4c46:	90 e0       	ldi	r25, 0x00	; 0
    4c48:	02 c0       	rjmp	.+4      	; 0x4c4e <vfprintf+0x26c>
    4c4a:	81 e0       	ldi	r24, 0x01	; 1
    4c4c:	90 e0       	ldi	r25, 0x00	; 0
    4c4e:	01 11       	cpse	r16, r1
    4c50:	01 96       	adiw	r24, 0x01	; 1
    4c52:	11 23       	and	r17, r17
    4c54:	31 f0       	breq	.+12     	; 0x4c62 <vfprintf+0x280>
    4c56:	21 2f       	mov	r18, r17
    4c58:	30 e0       	ldi	r19, 0x00	; 0
    4c5a:	2f 5f       	subi	r18, 0xFF	; 255
    4c5c:	3f 4f       	sbci	r19, 0xFF	; 255
    4c5e:	82 0f       	add	r24, r18
    4c60:	93 1f       	adc	r25, r19
    4c62:	25 2d       	mov	r18, r5
    4c64:	30 e0       	ldi	r19, 0x00	; 0
    4c66:	82 17       	cp	r24, r18
    4c68:	93 07       	cpc	r25, r19
    4c6a:	14 f4       	brge	.+4      	; 0x4c70 <vfprintf+0x28e>
    4c6c:	58 1a       	sub	r5, r24
    4c6e:	01 c0       	rjmp	.+2      	; 0x4c72 <vfprintf+0x290>
    4c70:	51 2c       	mov	r5, r1
    4c72:	89 2d       	mov	r24, r9
    4c74:	89 70       	andi	r24, 0x09	; 9
    4c76:	49 f4       	brne	.+18     	; 0x4c8a <vfprintf+0x2a8>
    4c78:	55 20       	and	r5, r5
    4c7a:	39 f0       	breq	.+14     	; 0x4c8a <vfprintf+0x2a8>
    4c7c:	b7 01       	movw	r22, r14
    4c7e:	80 e2       	ldi	r24, 0x20	; 32
    4c80:	90 e0       	ldi	r25, 0x00	; 0
    4c82:	0e 94 61 75 	call	0xeac2	; 0xeac2 <fputc>
    4c86:	5a 94       	dec	r5
    4c88:	f7 cf       	rjmp	.-18     	; 0x4c78 <vfprintf+0x296>
    4c8a:	00 23       	and	r16, r16
    4c8c:	29 f0       	breq	.+10     	; 0x4c98 <vfprintf+0x2b6>
    4c8e:	b7 01       	movw	r22, r14
    4c90:	80 2f       	mov	r24, r16
    4c92:	90 e0       	ldi	r25, 0x00	; 0
    4c94:	0e 94 61 75 	call	0xeac2	; 0xeac2 <fputc>
    4c98:	93 fc       	sbrc	r9, 3
    4c9a:	09 c0       	rjmp	.+18     	; 0x4cae <vfprintf+0x2cc>
    4c9c:	55 20       	and	r5, r5
    4c9e:	39 f0       	breq	.+14     	; 0x4cae <vfprintf+0x2cc>
    4ca0:	b7 01       	movw	r22, r14
    4ca2:	80 e3       	ldi	r24, 0x30	; 48
    4ca4:	90 e0       	ldi	r25, 0x00	; 0
    4ca6:	0e 94 61 75 	call	0xeac2	; 0xeac2 <fputc>
    4caa:	5a 94       	dec	r5
    4cac:	f7 cf       	rjmp	.-18     	; 0x4c9c <vfprintf+0x2ba>
    4cae:	97 fe       	sbrs	r9, 7
    4cb0:	4c c0       	rjmp	.+152    	; 0x4d4a <vfprintf+0x368>
    4cb2:	46 01       	movw	r8, r12
    4cb4:	d7 fe       	sbrs	r13, 7
    4cb6:	02 c0       	rjmp	.+4      	; 0x4cbc <vfprintf+0x2da>
    4cb8:	81 2c       	mov	r8, r1
    4cba:	91 2c       	mov	r9, r1
    4cbc:	c6 01       	movw	r24, r12
    4cbe:	88 19       	sub	r24, r8
    4cc0:	99 09       	sbc	r25, r9
    4cc2:	f3 01       	movw	r30, r6
    4cc4:	e8 0f       	add	r30, r24
    4cc6:	f9 1f       	adc	r31, r25
    4cc8:	fe 87       	std	Y+14, r31	; 0x0e
    4cca:	ed 87       	std	Y+13, r30	; 0x0d
    4ccc:	96 01       	movw	r18, r12
    4cce:	24 19       	sub	r18, r4
    4cd0:	31 09       	sbc	r19, r1
    4cd2:	38 8b       	std	Y+16, r19	; 0x10
    4cd4:	2f 87       	std	Y+15, r18	; 0x0f
    4cd6:	01 2f       	mov	r16, r17
    4cd8:	10 e0       	ldi	r17, 0x00	; 0
    4cda:	11 95       	neg	r17
    4cdc:	01 95       	neg	r16
    4cde:	11 09       	sbc	r17, r1
    4ce0:	3f ef       	ldi	r19, 0xFF	; 255
    4ce2:	83 16       	cp	r8, r19
    4ce4:	93 06       	cpc	r9, r19
    4ce6:	29 f4       	brne	.+10     	; 0x4cf2 <vfprintf+0x310>
    4ce8:	b7 01       	movw	r22, r14
    4cea:	8e e2       	ldi	r24, 0x2E	; 46
    4cec:	90 e0       	ldi	r25, 0x00	; 0
    4cee:	0e 94 61 75 	call	0xeac2	; 0xeac2 <fputc>
    4cf2:	c8 14       	cp	r12, r8
    4cf4:	d9 04       	cpc	r13, r9
    4cf6:	4c f0       	brlt	.+18     	; 0x4d0a <vfprintf+0x328>
    4cf8:	8f 85       	ldd	r24, Y+15	; 0x0f
    4cfa:	98 89       	ldd	r25, Y+16	; 0x10
    4cfc:	88 15       	cp	r24, r8
    4cfe:	99 05       	cpc	r25, r9
    4d00:	24 f4       	brge	.+8      	; 0x4d0a <vfprintf+0x328>
    4d02:	ed 85       	ldd	r30, Y+13	; 0x0d
    4d04:	fe 85       	ldd	r31, Y+14	; 0x0e
    4d06:	81 81       	ldd	r24, Z+1	; 0x01
    4d08:	01 c0       	rjmp	.+2      	; 0x4d0c <vfprintf+0x32a>
    4d0a:	80 e3       	ldi	r24, 0x30	; 48
    4d0c:	f1 e0       	ldi	r31, 0x01	; 1
    4d0e:	8f 1a       	sub	r8, r31
    4d10:	91 08       	sbc	r9, r1
    4d12:	2d 85       	ldd	r18, Y+13	; 0x0d
    4d14:	3e 85       	ldd	r19, Y+14	; 0x0e
    4d16:	2f 5f       	subi	r18, 0xFF	; 255
    4d18:	3f 4f       	sbci	r19, 0xFF	; 255
    4d1a:	3e 87       	std	Y+14, r19	; 0x0e
    4d1c:	2d 87       	std	Y+13, r18	; 0x0d
    4d1e:	80 16       	cp	r8, r16
    4d20:	91 06       	cpc	r9, r17
    4d22:	2c f0       	brlt	.+10     	; 0x4d2e <vfprintf+0x34c>
    4d24:	b7 01       	movw	r22, r14
    4d26:	90 e0       	ldi	r25, 0x00	; 0
    4d28:	0e 94 61 75 	call	0xeac2	; 0xeac2 <fputc>
    4d2c:	d9 cf       	rjmp	.-78     	; 0x4ce0 <vfprintf+0x2fe>
    4d2e:	c8 14       	cp	r12, r8
    4d30:	d9 04       	cpc	r13, r9
    4d32:	41 f4       	brne	.+16     	; 0x4d44 <vfprintf+0x362>
    4d34:	9a 81       	ldd	r25, Y+2	; 0x02
    4d36:	96 33       	cpi	r25, 0x36	; 54
    4d38:	20 f4       	brcc	.+8      	; 0x4d42 <vfprintf+0x360>
    4d3a:	95 33       	cpi	r25, 0x35	; 53
    4d3c:	19 f4       	brne	.+6      	; 0x4d44 <vfprintf+0x362>
    4d3e:	3c 85       	ldd	r19, Y+12	; 0x0c
    4d40:	34 ff       	sbrs	r19, 4
    4d42:	81 e3       	ldi	r24, 0x31	; 49
    4d44:	b7 01       	movw	r22, r14
    4d46:	90 e0       	ldi	r25, 0x00	; 0
    4d48:	4e c0       	rjmp	.+156    	; 0x4de6 <vfprintf+0x404>
    4d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    4d4c:	81 33       	cpi	r24, 0x31	; 49
    4d4e:	19 f0       	breq	.+6      	; 0x4d56 <vfprintf+0x374>
    4d50:	9c 85       	ldd	r25, Y+12	; 0x0c
    4d52:	9f 7e       	andi	r25, 0xEF	; 239
    4d54:	9c 87       	std	Y+12, r25	; 0x0c
    4d56:	b7 01       	movw	r22, r14
    4d58:	90 e0       	ldi	r25, 0x00	; 0
    4d5a:	0e 94 61 75 	call	0xeac2	; 0xeac2 <fputc>
    4d5e:	11 11       	cpse	r17, r1
    4d60:	05 c0       	rjmp	.+10     	; 0x4d6c <vfprintf+0x38a>
    4d62:	94 fc       	sbrc	r9, 4
    4d64:	18 c0       	rjmp	.+48     	; 0x4d96 <vfprintf+0x3b4>
    4d66:	85 e6       	ldi	r24, 0x65	; 101
    4d68:	90 e0       	ldi	r25, 0x00	; 0
    4d6a:	17 c0       	rjmp	.+46     	; 0x4d9a <vfprintf+0x3b8>
    4d6c:	b7 01       	movw	r22, r14
    4d6e:	8e e2       	ldi	r24, 0x2E	; 46
    4d70:	90 e0       	ldi	r25, 0x00	; 0
    4d72:	0e 94 61 75 	call	0xeac2	; 0xeac2 <fputc>
    4d76:	1e 5f       	subi	r17, 0xFE	; 254
    4d78:	82 e0       	ldi	r24, 0x02	; 2
    4d7a:	01 e0       	ldi	r16, 0x01	; 1
    4d7c:	08 0f       	add	r16, r24
    4d7e:	f3 01       	movw	r30, r6
    4d80:	e8 0f       	add	r30, r24
    4d82:	f1 1d       	adc	r31, r1
    4d84:	80 81       	ld	r24, Z
    4d86:	b7 01       	movw	r22, r14
    4d88:	90 e0       	ldi	r25, 0x00	; 0
    4d8a:	0e 94 61 75 	call	0xeac2	; 0xeac2 <fputc>
    4d8e:	80 2f       	mov	r24, r16
    4d90:	01 13       	cpse	r16, r17
    4d92:	f3 cf       	rjmp	.-26     	; 0x4d7a <vfprintf+0x398>
    4d94:	e6 cf       	rjmp	.-52     	; 0x4d62 <vfprintf+0x380>
    4d96:	85 e4       	ldi	r24, 0x45	; 69
    4d98:	90 e0       	ldi	r25, 0x00	; 0
    4d9a:	b7 01       	movw	r22, r14
    4d9c:	0e 94 61 75 	call	0xeac2	; 0xeac2 <fputc>
    4da0:	d7 fc       	sbrc	r13, 7
    4da2:	06 c0       	rjmp	.+12     	; 0x4db0 <vfprintf+0x3ce>
    4da4:	c1 14       	cp	r12, r1
    4da6:	d1 04       	cpc	r13, r1
    4da8:	41 f4       	brne	.+16     	; 0x4dba <vfprintf+0x3d8>
    4daa:	ec 85       	ldd	r30, Y+12	; 0x0c
    4dac:	e4 ff       	sbrs	r30, 4
    4dae:	05 c0       	rjmp	.+10     	; 0x4dba <vfprintf+0x3d8>
    4db0:	d1 94       	neg	r13
    4db2:	c1 94       	neg	r12
    4db4:	d1 08       	sbc	r13, r1
    4db6:	8d e2       	ldi	r24, 0x2D	; 45
    4db8:	01 c0       	rjmp	.+2      	; 0x4dbc <vfprintf+0x3da>
    4dba:	8b e2       	ldi	r24, 0x2B	; 43
    4dbc:	b7 01       	movw	r22, r14
    4dbe:	90 e0       	ldi	r25, 0x00	; 0
    4dc0:	0e 94 61 75 	call	0xeac2	; 0xeac2 <fputc>
    4dc4:	80 e3       	ldi	r24, 0x30	; 48
    4dc6:	2a e0       	ldi	r18, 0x0A	; 10
    4dc8:	c2 16       	cp	r12, r18
    4dca:	d1 04       	cpc	r13, r1
    4dcc:	2c f0       	brlt	.+10     	; 0x4dd8 <vfprintf+0x3f6>
    4dce:	8f 5f       	subi	r24, 0xFF	; 255
    4dd0:	fa e0       	ldi	r31, 0x0A	; 10
    4dd2:	cf 1a       	sub	r12, r31
    4dd4:	d1 08       	sbc	r13, r1
    4dd6:	f7 cf       	rjmp	.-18     	; 0x4dc6 <vfprintf+0x3e4>
    4dd8:	b7 01       	movw	r22, r14
    4dda:	90 e0       	ldi	r25, 0x00	; 0
    4ddc:	0e 94 61 75 	call	0xeac2	; 0xeac2 <fputc>
    4de0:	b7 01       	movw	r22, r14
    4de2:	c6 01       	movw	r24, r12
    4de4:	c0 96       	adiw	r24, 0x30	; 48
    4de6:	0e 94 61 75 	call	0xeac2	; 0xeac2 <fputc>
    4dea:	54 c1       	rjmp	.+680    	; 0x5094 <vfprintf+0x6b2>
    4dec:	83 36       	cpi	r24, 0x63	; 99
    4dee:	31 f0       	breq	.+12     	; 0x4dfc <vfprintf+0x41a>
    4df0:	83 37       	cpi	r24, 0x73	; 115
    4df2:	79 f0       	breq	.+30     	; 0x4e12 <vfprintf+0x430>
    4df4:	83 35       	cpi	r24, 0x53	; 83
    4df6:	09 f0       	breq	.+2      	; 0x4dfa <vfprintf+0x418>
    4df8:	56 c0       	rjmp	.+172    	; 0x4ea6 <vfprintf+0x4c4>
    4dfa:	20 c0       	rjmp	.+64     	; 0x4e3c <vfprintf+0x45a>
    4dfc:	56 01       	movw	r10, r12
    4dfe:	32 e0       	ldi	r19, 0x02	; 2
    4e00:	a3 0e       	add	r10, r19
    4e02:	b1 1c       	adc	r11, r1
    4e04:	f6 01       	movw	r30, r12
    4e06:	80 81       	ld	r24, Z
    4e08:	89 83       	std	Y+1, r24	; 0x01
    4e0a:	01 e0       	ldi	r16, 0x01	; 1
    4e0c:	10 e0       	ldi	r17, 0x00	; 0
    4e0e:	63 01       	movw	r12, r6
    4e10:	12 c0       	rjmp	.+36     	; 0x4e36 <vfprintf+0x454>
    4e12:	56 01       	movw	r10, r12
    4e14:	f2 e0       	ldi	r31, 0x02	; 2
    4e16:	af 0e       	add	r10, r31
    4e18:	b1 1c       	adc	r11, r1
    4e1a:	f6 01       	movw	r30, r12
    4e1c:	c0 80       	ld	r12, Z
    4e1e:	d1 80       	ldd	r13, Z+1	; 0x01
    4e20:	96 fe       	sbrs	r9, 6
    4e22:	03 c0       	rjmp	.+6      	; 0x4e2a <vfprintf+0x448>
    4e24:	61 2f       	mov	r22, r17
    4e26:	70 e0       	ldi	r23, 0x00	; 0
    4e28:	02 c0       	rjmp	.+4      	; 0x4e2e <vfprintf+0x44c>
    4e2a:	6f ef       	ldi	r22, 0xFF	; 255
    4e2c:	7f ef       	ldi	r23, 0xFF	; 255
    4e2e:	c6 01       	movw	r24, r12
    4e30:	0e 94 e6 ec 	call	0x1d9cc	; 0x1d9cc <strnlen>
    4e34:	8c 01       	movw	r16, r24
    4e36:	f9 2d       	mov	r31, r9
    4e38:	ff 77       	andi	r31, 0x7F	; 127
    4e3a:	14 c0       	rjmp	.+40     	; 0x4e64 <vfprintf+0x482>
    4e3c:	56 01       	movw	r10, r12
    4e3e:	22 e0       	ldi	r18, 0x02	; 2
    4e40:	a2 0e       	add	r10, r18
    4e42:	b1 1c       	adc	r11, r1
    4e44:	f6 01       	movw	r30, r12
    4e46:	c0 80       	ld	r12, Z
    4e48:	d1 80       	ldd	r13, Z+1	; 0x01
    4e4a:	96 fe       	sbrs	r9, 6
    4e4c:	03 c0       	rjmp	.+6      	; 0x4e54 <vfprintf+0x472>
    4e4e:	61 2f       	mov	r22, r17
    4e50:	70 e0       	ldi	r23, 0x00	; 0
    4e52:	02 c0       	rjmp	.+4      	; 0x4e58 <vfprintf+0x476>
    4e54:	6f ef       	ldi	r22, 0xFF	; 255
    4e56:	7f ef       	ldi	r23, 0xFF	; 255
    4e58:	c6 01       	movw	r24, r12
    4e5a:	0e 94 d4 ec 	call	0x1d9a8	; 0x1d9a8 <strnlen_P>
    4e5e:	8c 01       	movw	r16, r24
    4e60:	f9 2d       	mov	r31, r9
    4e62:	f0 68       	ori	r31, 0x80	; 128
    4e64:	9f 2e       	mov	r9, r31
    4e66:	f3 fd       	sbrc	r31, 3
    4e68:	1a c0       	rjmp	.+52     	; 0x4e9e <vfprintf+0x4bc>
    4e6a:	85 2d       	mov	r24, r5
    4e6c:	90 e0       	ldi	r25, 0x00	; 0
    4e6e:	08 17       	cp	r16, r24
    4e70:	19 07       	cpc	r17, r25
    4e72:	a8 f4       	brcc	.+42     	; 0x4e9e <vfprintf+0x4bc>
    4e74:	b7 01       	movw	r22, r14
    4e76:	80 e2       	ldi	r24, 0x20	; 32
    4e78:	90 e0       	ldi	r25, 0x00	; 0
    4e7a:	0e 94 61 75 	call	0xeac2	; 0xeac2 <fputc>
    4e7e:	5a 94       	dec	r5
    4e80:	f4 cf       	rjmp	.-24     	; 0x4e6a <vfprintf+0x488>
    4e82:	f6 01       	movw	r30, r12
    4e84:	97 fc       	sbrc	r9, 7
    4e86:	85 91       	lpm	r24, Z+
    4e88:	97 fe       	sbrs	r9, 7
    4e8a:	81 91       	ld	r24, Z+
    4e8c:	6f 01       	movw	r12, r30
    4e8e:	b7 01       	movw	r22, r14
    4e90:	90 e0       	ldi	r25, 0x00	; 0
    4e92:	0e 94 61 75 	call	0xeac2	; 0xeac2 <fputc>
    4e96:	51 10       	cpse	r5, r1
    4e98:	5a 94       	dec	r5
    4e9a:	01 50       	subi	r16, 0x01	; 1
    4e9c:	11 09       	sbc	r17, r1
    4e9e:	01 15       	cp	r16, r1
    4ea0:	11 05       	cpc	r17, r1
    4ea2:	79 f7       	brne	.-34     	; 0x4e82 <vfprintf+0x4a0>
    4ea4:	f7 c0       	rjmp	.+494    	; 0x5094 <vfprintf+0x6b2>
    4ea6:	84 36       	cpi	r24, 0x64	; 100
    4ea8:	11 f0       	breq	.+4      	; 0x4eae <vfprintf+0x4cc>
    4eaa:	89 36       	cpi	r24, 0x69	; 105
    4eac:	61 f5       	brne	.+88     	; 0x4f06 <vfprintf+0x524>
    4eae:	56 01       	movw	r10, r12
    4eb0:	97 fe       	sbrs	r9, 7
    4eb2:	09 c0       	rjmp	.+18     	; 0x4ec6 <vfprintf+0x4e4>
    4eb4:	24 e0       	ldi	r18, 0x04	; 4
    4eb6:	a2 0e       	add	r10, r18
    4eb8:	b1 1c       	adc	r11, r1
    4eba:	f6 01       	movw	r30, r12
    4ebc:	60 81       	ld	r22, Z
    4ebe:	71 81       	ldd	r23, Z+1	; 0x01
    4ec0:	82 81       	ldd	r24, Z+2	; 0x02
    4ec2:	93 81       	ldd	r25, Z+3	; 0x03
    4ec4:	0a c0       	rjmp	.+20     	; 0x4eda <vfprintf+0x4f8>
    4ec6:	f2 e0       	ldi	r31, 0x02	; 2
    4ec8:	af 0e       	add	r10, r31
    4eca:	b1 1c       	adc	r11, r1
    4ecc:	f6 01       	movw	r30, r12
    4ece:	60 81       	ld	r22, Z
    4ed0:	71 81       	ldd	r23, Z+1	; 0x01
    4ed2:	07 2e       	mov	r0, r23
    4ed4:	00 0c       	add	r0, r0
    4ed6:	88 0b       	sbc	r24, r24
    4ed8:	99 0b       	sbc	r25, r25
    4eda:	f9 2d       	mov	r31, r9
    4edc:	ff 76       	andi	r31, 0x6F	; 111
    4ede:	9f 2e       	mov	r9, r31
    4ee0:	97 ff       	sbrs	r25, 7
    4ee2:	09 c0       	rjmp	.+18     	; 0x4ef6 <vfprintf+0x514>
    4ee4:	90 95       	com	r25
    4ee6:	80 95       	com	r24
    4ee8:	70 95       	com	r23
    4eea:	61 95       	neg	r22
    4eec:	7f 4f       	sbci	r23, 0xFF	; 255
    4eee:	8f 4f       	sbci	r24, 0xFF	; 255
    4ef0:	9f 4f       	sbci	r25, 0xFF	; 255
    4ef2:	f0 68       	ori	r31, 0x80	; 128
    4ef4:	9f 2e       	mov	r9, r31
    4ef6:	2a e0       	ldi	r18, 0x0A	; 10
    4ef8:	30 e0       	ldi	r19, 0x00	; 0
    4efa:	a3 01       	movw	r20, r6
    4efc:	0e 94 f1 ec 	call	0x1d9e2	; 0x1d9e2 <__ultoa_invert>
    4f00:	c8 2e       	mov	r12, r24
    4f02:	c6 18       	sub	r12, r6
    4f04:	3f c0       	rjmp	.+126    	; 0x4f84 <vfprintf+0x5a2>
    4f06:	09 2d       	mov	r16, r9
    4f08:	85 37       	cpi	r24, 0x75	; 117
    4f0a:	21 f4       	brne	.+8      	; 0x4f14 <vfprintf+0x532>
    4f0c:	0f 7e       	andi	r16, 0xEF	; 239
    4f0e:	2a e0       	ldi	r18, 0x0A	; 10
    4f10:	30 e0       	ldi	r19, 0x00	; 0
    4f12:	1d c0       	rjmp	.+58     	; 0x4f4e <vfprintf+0x56c>
    4f14:	09 7f       	andi	r16, 0xF9	; 249
    4f16:	8f 36       	cpi	r24, 0x6F	; 111
    4f18:	91 f0       	breq	.+36     	; 0x4f3e <vfprintf+0x55c>
    4f1a:	18 f4       	brcc	.+6      	; 0x4f22 <vfprintf+0x540>
    4f1c:	88 35       	cpi	r24, 0x58	; 88
    4f1e:	59 f0       	breq	.+22     	; 0x4f36 <vfprintf+0x554>
    4f20:	c3 c0       	rjmp	.+390    	; 0x50a8 <vfprintf+0x6c6>
    4f22:	80 37       	cpi	r24, 0x70	; 112
    4f24:	19 f0       	breq	.+6      	; 0x4f2c <vfprintf+0x54a>
    4f26:	88 37       	cpi	r24, 0x78	; 120
    4f28:	11 f0       	breq	.+4      	; 0x4f2e <vfprintf+0x54c>
    4f2a:	be c0       	rjmp	.+380    	; 0x50a8 <vfprintf+0x6c6>
    4f2c:	00 61       	ori	r16, 0x10	; 16
    4f2e:	04 ff       	sbrs	r16, 4
    4f30:	09 c0       	rjmp	.+18     	; 0x4f44 <vfprintf+0x562>
    4f32:	04 60       	ori	r16, 0x04	; 4
    4f34:	07 c0       	rjmp	.+14     	; 0x4f44 <vfprintf+0x562>
    4f36:	94 fe       	sbrs	r9, 4
    4f38:	08 c0       	rjmp	.+16     	; 0x4f4a <vfprintf+0x568>
    4f3a:	06 60       	ori	r16, 0x06	; 6
    4f3c:	06 c0       	rjmp	.+12     	; 0x4f4a <vfprintf+0x568>
    4f3e:	28 e0       	ldi	r18, 0x08	; 8
    4f40:	30 e0       	ldi	r19, 0x00	; 0
    4f42:	05 c0       	rjmp	.+10     	; 0x4f4e <vfprintf+0x56c>
    4f44:	20 e1       	ldi	r18, 0x10	; 16
    4f46:	30 e0       	ldi	r19, 0x00	; 0
    4f48:	02 c0       	rjmp	.+4      	; 0x4f4e <vfprintf+0x56c>
    4f4a:	20 e1       	ldi	r18, 0x10	; 16
    4f4c:	32 e0       	ldi	r19, 0x02	; 2
    4f4e:	56 01       	movw	r10, r12
    4f50:	07 ff       	sbrs	r16, 7
    4f52:	09 c0       	rjmp	.+18     	; 0x4f66 <vfprintf+0x584>
    4f54:	84 e0       	ldi	r24, 0x04	; 4
    4f56:	a8 0e       	add	r10, r24
    4f58:	b1 1c       	adc	r11, r1
    4f5a:	f6 01       	movw	r30, r12
    4f5c:	60 81       	ld	r22, Z
    4f5e:	71 81       	ldd	r23, Z+1	; 0x01
    4f60:	82 81       	ldd	r24, Z+2	; 0x02
    4f62:	93 81       	ldd	r25, Z+3	; 0x03
    4f64:	08 c0       	rjmp	.+16     	; 0x4f76 <vfprintf+0x594>
    4f66:	f2 e0       	ldi	r31, 0x02	; 2
    4f68:	af 0e       	add	r10, r31
    4f6a:	b1 1c       	adc	r11, r1
    4f6c:	f6 01       	movw	r30, r12
    4f6e:	60 81       	ld	r22, Z
    4f70:	71 81       	ldd	r23, Z+1	; 0x01
    4f72:	80 e0       	ldi	r24, 0x00	; 0
    4f74:	90 e0       	ldi	r25, 0x00	; 0
    4f76:	a3 01       	movw	r20, r6
    4f78:	0e 94 f1 ec 	call	0x1d9e2	; 0x1d9e2 <__ultoa_invert>
    4f7c:	c8 2e       	mov	r12, r24
    4f7e:	c6 18       	sub	r12, r6
    4f80:	0f 77       	andi	r16, 0x7F	; 127
    4f82:	90 2e       	mov	r9, r16
    4f84:	96 fe       	sbrs	r9, 6
    4f86:	0b c0       	rjmp	.+22     	; 0x4f9e <vfprintf+0x5bc>
    4f88:	09 2d       	mov	r16, r9
    4f8a:	0e 7f       	andi	r16, 0xFE	; 254
    4f8c:	c1 16       	cp	r12, r17
    4f8e:	50 f4       	brcc	.+20     	; 0x4fa4 <vfprintf+0x5c2>
    4f90:	94 fe       	sbrs	r9, 4
    4f92:	0a c0       	rjmp	.+20     	; 0x4fa8 <vfprintf+0x5c6>
    4f94:	92 fc       	sbrc	r9, 2
    4f96:	08 c0       	rjmp	.+16     	; 0x4fa8 <vfprintf+0x5c6>
    4f98:	09 2d       	mov	r16, r9
    4f9a:	0e 7e       	andi	r16, 0xEE	; 238
    4f9c:	05 c0       	rjmp	.+10     	; 0x4fa8 <vfprintf+0x5c6>
    4f9e:	dc 2c       	mov	r13, r12
    4fa0:	09 2d       	mov	r16, r9
    4fa2:	03 c0       	rjmp	.+6      	; 0x4faa <vfprintf+0x5c8>
    4fa4:	dc 2c       	mov	r13, r12
    4fa6:	01 c0       	rjmp	.+2      	; 0x4faa <vfprintf+0x5c8>
    4fa8:	d1 2e       	mov	r13, r17
    4faa:	04 ff       	sbrs	r16, 4
    4fac:	0d c0       	rjmp	.+26     	; 0x4fc8 <vfprintf+0x5e6>
    4fae:	fe 01       	movw	r30, r28
    4fb0:	ec 0d       	add	r30, r12
    4fb2:	f1 1d       	adc	r31, r1
    4fb4:	80 81       	ld	r24, Z
    4fb6:	80 33       	cpi	r24, 0x30	; 48
    4fb8:	11 f4       	brne	.+4      	; 0x4fbe <vfprintf+0x5dc>
    4fba:	09 7e       	andi	r16, 0xE9	; 233
    4fbc:	09 c0       	rjmp	.+18     	; 0x4fd0 <vfprintf+0x5ee>
    4fbe:	02 ff       	sbrs	r16, 2
    4fc0:	06 c0       	rjmp	.+12     	; 0x4fce <vfprintf+0x5ec>
    4fc2:	d3 94       	inc	r13
    4fc4:	d3 94       	inc	r13
    4fc6:	04 c0       	rjmp	.+8      	; 0x4fd0 <vfprintf+0x5ee>
    4fc8:	80 2f       	mov	r24, r16
    4fca:	86 78       	andi	r24, 0x86	; 134
    4fcc:	09 f0       	breq	.+2      	; 0x4fd0 <vfprintf+0x5ee>
    4fce:	d3 94       	inc	r13
    4fd0:	03 fd       	sbrc	r16, 3
    4fd2:	11 c0       	rjmp	.+34     	; 0x4ff6 <vfprintf+0x614>
    4fd4:	00 ff       	sbrs	r16, 0
    4fd6:	06 c0       	rjmp	.+12     	; 0x4fe4 <vfprintf+0x602>
    4fd8:	1c 2d       	mov	r17, r12
    4fda:	d5 14       	cp	r13, r5
    4fdc:	80 f4       	brcc	.+32     	; 0x4ffe <vfprintf+0x61c>
    4fde:	15 0d       	add	r17, r5
    4fe0:	1d 19       	sub	r17, r13
    4fe2:	0d c0       	rjmp	.+26     	; 0x4ffe <vfprintf+0x61c>
    4fe4:	d5 14       	cp	r13, r5
    4fe6:	58 f4       	brcc	.+22     	; 0x4ffe <vfprintf+0x61c>
    4fe8:	b7 01       	movw	r22, r14
    4fea:	80 e2       	ldi	r24, 0x20	; 32
    4fec:	90 e0       	ldi	r25, 0x00	; 0
    4fee:	0e 94 61 75 	call	0xeac2	; 0xeac2 <fputc>
    4ff2:	d3 94       	inc	r13
    4ff4:	f7 cf       	rjmp	.-18     	; 0x4fe4 <vfprintf+0x602>
    4ff6:	d5 14       	cp	r13, r5
    4ff8:	10 f4       	brcc	.+4      	; 0x4ffe <vfprintf+0x61c>
    4ffa:	5d 18       	sub	r5, r13
    4ffc:	01 c0       	rjmp	.+2      	; 0x5000 <vfprintf+0x61e>
    4ffe:	51 2c       	mov	r5, r1
    5000:	04 ff       	sbrs	r16, 4
    5002:	10 c0       	rjmp	.+32     	; 0x5024 <vfprintf+0x642>
    5004:	b7 01       	movw	r22, r14
    5006:	80 e3       	ldi	r24, 0x30	; 48
    5008:	90 e0       	ldi	r25, 0x00	; 0
    500a:	0e 94 61 75 	call	0xeac2	; 0xeac2 <fputc>
    500e:	02 ff       	sbrs	r16, 2
    5010:	17 c0       	rjmp	.+46     	; 0x5040 <vfprintf+0x65e>
    5012:	01 fd       	sbrc	r16, 1
    5014:	03 c0       	rjmp	.+6      	; 0x501c <vfprintf+0x63a>
    5016:	88 e7       	ldi	r24, 0x78	; 120
    5018:	90 e0       	ldi	r25, 0x00	; 0
    501a:	02 c0       	rjmp	.+4      	; 0x5020 <vfprintf+0x63e>
    501c:	88 e5       	ldi	r24, 0x58	; 88
    501e:	90 e0       	ldi	r25, 0x00	; 0
    5020:	b7 01       	movw	r22, r14
    5022:	0c c0       	rjmp	.+24     	; 0x503c <vfprintf+0x65a>
    5024:	80 2f       	mov	r24, r16
    5026:	86 78       	andi	r24, 0x86	; 134
    5028:	59 f0       	breq	.+22     	; 0x5040 <vfprintf+0x65e>
    502a:	01 ff       	sbrs	r16, 1
    502c:	02 c0       	rjmp	.+4      	; 0x5032 <vfprintf+0x650>
    502e:	8b e2       	ldi	r24, 0x2B	; 43
    5030:	01 c0       	rjmp	.+2      	; 0x5034 <vfprintf+0x652>
    5032:	80 e2       	ldi	r24, 0x20	; 32
    5034:	07 fd       	sbrc	r16, 7
    5036:	8d e2       	ldi	r24, 0x2D	; 45
    5038:	b7 01       	movw	r22, r14
    503a:	90 e0       	ldi	r25, 0x00	; 0
    503c:	0e 94 61 75 	call	0xeac2	; 0xeac2 <fputc>
    5040:	c1 16       	cp	r12, r17
    5042:	38 f4       	brcc	.+14     	; 0x5052 <vfprintf+0x670>
    5044:	b7 01       	movw	r22, r14
    5046:	80 e3       	ldi	r24, 0x30	; 48
    5048:	90 e0       	ldi	r25, 0x00	; 0
    504a:	0e 94 61 75 	call	0xeac2	; 0xeac2 <fputc>
    504e:	11 50       	subi	r17, 0x01	; 1
    5050:	f7 cf       	rjmp	.-18     	; 0x5040 <vfprintf+0x65e>
    5052:	ca 94       	dec	r12
    5054:	f3 01       	movw	r30, r6
    5056:	ec 0d       	add	r30, r12
    5058:	f1 1d       	adc	r31, r1
    505a:	80 81       	ld	r24, Z
    505c:	b7 01       	movw	r22, r14
    505e:	90 e0       	ldi	r25, 0x00	; 0
    5060:	0e 94 61 75 	call	0xeac2	; 0xeac2 <fputc>
    5064:	c1 10       	cpse	r12, r1
    5066:	f5 cf       	rjmp	.-22     	; 0x5052 <vfprintf+0x670>
    5068:	15 c0       	rjmp	.+42     	; 0x5094 <vfprintf+0x6b2>
    506a:	f4 e0       	ldi	r31, 0x04	; 4
    506c:	f5 15       	cp	r31, r5
    506e:	60 f5       	brcc	.+88     	; 0x50c8 <vfprintf+0x6e6>
    5070:	84 e0       	ldi	r24, 0x04	; 4
    5072:	58 1a       	sub	r5, r24
    5074:	93 fe       	sbrs	r9, 3
    5076:	1f c0       	rjmp	.+62     	; 0x50b6 <vfprintf+0x6d4>
    5078:	01 11       	cpse	r16, r1
    507a:	27 c0       	rjmp	.+78     	; 0x50ca <vfprintf+0x6e8>
    507c:	2c 85       	ldd	r18, Y+12	; 0x0c
    507e:	23 ff       	sbrs	r18, 3
    5080:	2a c0       	rjmp	.+84     	; 0x50d6 <vfprintf+0x6f4>
    5082:	06 ed       	ldi	r16, 0xD6	; 214
    5084:	11 e0       	ldi	r17, 0x01	; 1
    5086:	39 2d       	mov	r19, r9
    5088:	30 71       	andi	r19, 0x10	; 16
    508a:	93 2e       	mov	r9, r19
    508c:	f8 01       	movw	r30, r16
    508e:	84 91       	lpm	r24, Z
    5090:	81 11       	cpse	r24, r1
    5092:	24 c0       	rjmp	.+72     	; 0x50dc <vfprintf+0x6fa>
    5094:	55 20       	and	r5, r5
    5096:	09 f4       	brne	.+2      	; 0x509a <vfprintf+0x6b8>
    5098:	e4 cc       	rjmp	.-1592   	; 0x4a62 <vfprintf+0x80>
    509a:	b7 01       	movw	r22, r14
    509c:	80 e2       	ldi	r24, 0x20	; 32
    509e:	90 e0       	ldi	r25, 0x00	; 0
    50a0:	0e 94 61 75 	call	0xeac2	; 0xeac2 <fputc>
    50a4:	5a 94       	dec	r5
    50a6:	f6 cf       	rjmp	.-20     	; 0x5094 <vfprintf+0x6b2>
    50a8:	f7 01       	movw	r30, r14
    50aa:	86 81       	ldd	r24, Z+6	; 0x06
    50ac:	97 81       	ldd	r25, Z+7	; 0x07
    50ae:	26 c0       	rjmp	.+76     	; 0x50fc <vfprintf+0x71a>
    50b0:	8f ef       	ldi	r24, 0xFF	; 255
    50b2:	9f ef       	ldi	r25, 0xFF	; 255
    50b4:	23 c0       	rjmp	.+70     	; 0x50fc <vfprintf+0x71a>
    50b6:	b7 01       	movw	r22, r14
    50b8:	80 e2       	ldi	r24, 0x20	; 32
    50ba:	90 e0       	ldi	r25, 0x00	; 0
    50bc:	0e 94 61 75 	call	0xeac2	; 0xeac2 <fputc>
    50c0:	5a 94       	dec	r5
    50c2:	51 10       	cpse	r5, r1
    50c4:	f8 cf       	rjmp	.-16     	; 0x50b6 <vfprintf+0x6d4>
    50c6:	d8 cf       	rjmp	.-80     	; 0x5078 <vfprintf+0x696>
    50c8:	51 2c       	mov	r5, r1
    50ca:	b7 01       	movw	r22, r14
    50cc:	80 2f       	mov	r24, r16
    50ce:	90 e0       	ldi	r25, 0x00	; 0
    50d0:	0e 94 61 75 	call	0xeac2	; 0xeac2 <fputc>
    50d4:	d3 cf       	rjmp	.-90     	; 0x507c <vfprintf+0x69a>
    50d6:	0a ed       	ldi	r16, 0xDA	; 218
    50d8:	11 e0       	ldi	r17, 0x01	; 1
    50da:	d5 cf       	rjmp	.-86     	; 0x5086 <vfprintf+0x6a4>
    50dc:	91 10       	cpse	r9, r1
    50de:	80 52       	subi	r24, 0x20	; 32
    50e0:	b7 01       	movw	r22, r14
    50e2:	90 e0       	ldi	r25, 0x00	; 0
    50e4:	0e 94 61 75 	call	0xeac2	; 0xeac2 <fputc>
    50e8:	0f 5f       	subi	r16, 0xFF	; 255
    50ea:	1f 4f       	sbci	r17, 0xFF	; 255
    50ec:	cf cf       	rjmp	.-98     	; 0x508c <vfprintf+0x6aa>
    50ee:	23 e0       	ldi	r18, 0x03	; 3
    50f0:	25 15       	cp	r18, r5
    50f2:	10 f4       	brcc	.+4      	; 0x50f8 <vfprintf+0x716>
    50f4:	83 e0       	ldi	r24, 0x03	; 3
    50f6:	bd cf       	rjmp	.-134    	; 0x5072 <vfprintf+0x690>
    50f8:	51 2c       	mov	r5, r1
    50fa:	c0 cf       	rjmp	.-128    	; 0x507c <vfprintf+0x69a>
    50fc:	60 96       	adiw	r28, 0x10	; 16
    50fe:	0f b6       	in	r0, 0x3f	; 63
    5100:	f8 94       	cli
    5102:	de bf       	out	0x3e, r29	; 62
    5104:	0f be       	out	0x3f, r0	; 63
    5106:	cd bf       	out	0x3d, r28	; 61
    5108:	df 91       	pop	r29
    510a:	cf 91       	pop	r28
    510c:	1f 91       	pop	r17
    510e:	0f 91       	pop	r16
    5110:	ff 90       	pop	r15
    5112:	ef 90       	pop	r14
    5114:	df 90       	pop	r13
    5116:	cf 90       	pop	r12
    5118:	bf 90       	pop	r11
    511a:	af 90       	pop	r10
    511c:	9f 90       	pop	r9
    511e:	8f 90       	pop	r8
    5120:	7f 90       	pop	r7
    5122:	6f 90       	pop	r6
    5124:	5f 90       	pop	r5
    5126:	4f 90       	pop	r4
    5128:	3f 90       	pop	r3
    512a:	2f 90       	pop	r2
    512c:	08 95       	ret

0000512e <chip_select>:
/// @brief SPI CS pin status
/// return CS GPIO pin number or 0xff
uint8_t spi_chip_select_status()
{
    return(_cs_pin);
}
    512e:	e8 2f       	mov	r30, r24
    5130:	e6 95       	lsr	r30
    5132:	e6 95       	lsr	r30
    5134:	e6 95       	lsr	r30
    5136:	93 e0       	ldi	r25, 0x03	; 3
    5138:	e9 9f       	mul	r30, r25
    513a:	f0 01       	movw	r30, r0
    513c:	11 24       	eor	r1, r1
    513e:	32 a1       	ldd	r19, Z+34	; 0x22
    5140:	28 2f       	mov	r18, r24
    5142:	27 70       	andi	r18, 0x07	; 7
    5144:	81 e0       	ldi	r24, 0x01	; 1
    5146:	90 e0       	ldi	r25, 0x00	; 0
    5148:	01 c0       	rjmp	.+2      	; 0x514c <chip_select+0x1e>
    514a:	88 0f       	add	r24, r24
    514c:	2a 95       	dec	r18
    514e:	ea f7       	brpl	.-6      	; 0x514a <chip_select+0x1c>
    5150:	98 2f       	mov	r25, r24
    5152:	90 95       	com	r25
    5154:	93 23       	and	r25, r19
    5156:	92 a3       	std	Z+34, r25	; 0x22
    5158:	91 a1       	ldd	r25, Z+33	; 0x21
    515a:	89 2b       	or	r24, r25
    515c:	81 a3       	std	Z+33, r24	; 0x21
    515e:	08 95       	ret

00005160 <chip_deselect>:
    5160:	e8 2f       	mov	r30, r24
    5162:	e6 95       	lsr	r30
    5164:	e6 95       	lsr	r30
    5166:	e6 95       	lsr	r30
    5168:	93 e0       	ldi	r25, 0x03	; 3
    516a:	e9 9f       	mul	r30, r25
    516c:	f0 01       	movw	r30, r0
    516e:	11 24       	eor	r1, r1
    5170:	32 a1       	ldd	r19, Z+34	; 0x22
    5172:	28 2f       	mov	r18, r24
    5174:	27 70       	andi	r18, 0x07	; 7
    5176:	81 e0       	ldi	r24, 0x01	; 1
    5178:	90 e0       	ldi	r25, 0x00	; 0
    517a:	01 c0       	rjmp	.+2      	; 0x517e <chip_deselect+0x1e>
    517c:	88 0f       	add	r24, r24
    517e:	2a 95       	dec	r18
    5180:	ea f7       	brpl	.-6      	; 0x517c <chip_deselect+0x1c>
    5182:	93 2f       	mov	r25, r19
    5184:	98 2b       	or	r25, r24
    5186:	92 a3       	std	Z+34, r25	; 0x22
    5188:	91 a1       	ldd	r25, Z+33	; 0x21
    518a:	89 2b       	or	r24, r25
    518c:	81 a3       	std	Z+33, r24	; 0x21
    518e:	08 95       	ret

00005190 <chip_select_init>:
    5190:	e7 cf       	rjmp	.-50     	; 0x5160 <chip_deselect>
    5192:	08 95       	ret

00005194 <spi_end>:
    5194:	cf 93       	push	r28
    5196:	c8 2f       	mov	r28, r24
    5198:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_cs_pin>
    519c:	8c 17       	cp	r24, r28
    519e:	a9 f0       	breq	.+42     	; 0x51ca <spi_end+0x36>
    51a0:	8f 3f       	cpi	r24, 0xFF	; 255
    51a2:	99 f0       	breq	.+38     	; 0x51ca <spi_end+0x36>
    51a4:	1f 92       	push	r1
    51a6:	cf 93       	push	r28
    51a8:	1f 92       	push	r1
    51aa:	8f 93       	push	r24
    51ac:	88 ed       	ldi	r24, 0xD8	; 216
    51ae:	92 e0       	ldi	r25, 0x02	; 2
    51b0:	1f 92       	push	r1
    51b2:	9f 93       	push	r25
    51b4:	8f 93       	push	r24
    51b6:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    51ba:	8d b7       	in	r24, 0x3d	; 61
    51bc:	9e b7       	in	r25, 0x3e	; 62
    51be:	07 96       	adiw	r24, 0x07	; 7
    51c0:	0f b6       	in	r0, 0x3f	; 63
    51c2:	f8 94       	cli
    51c4:	9e bf       	out	0x3e, r25	; 62
    51c6:	0f be       	out	0x3f, r0	; 63
    51c8:	8d bf       	out	0x3d, r24	; 61
    51ca:	8c 2f       	mov	r24, r28
    51cc:	c9 df       	rcall	.-110    	; 0x5160 <chip_deselect>
    51ce:	8f ef       	ldi	r24, 0xFF	; 255
    51d0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_cs_pin>
    51d4:	cf 91       	pop	r28
    51d6:	08 95       	ret

000051d8 <spi_TX_buffer>:
/// @brief SPI write buffer
/// @param[in] *data: transmit buffer
/// @param[in] count: number of bytes to write
/// @return  void
void spi_TX_buffer(const uint8_t *data, int count)
{
    51d8:	7a c4       	rjmp	.+2292   	; 0x5ace <SPI0_TX>
    51da:	08 95       	ret

000051dc <spi_RX_buffer>:
    51dc:	a2 c4       	rjmp	.+2372   	; 0x5b22 <SPI0_RX>
    51de:	08 95       	ret

000051e0 <spi_TX>:
    51e0:	a1 e0       	ldi	r26, 0x01	; 1
    51e2:	b0 e0       	ldi	r27, 0x00	; 0
    51e4:	e6 ef       	ldi	r30, 0xF6	; 246
    51e6:	f8 e2       	ldi	r31, 0x28	; 40
    51e8:	0c 94 23 e8 	jmp	0x1d046	; 0x1d046 <__prologue_saves__+0x20>
    51ec:	89 83       	std	Y+1, r24	; 0x01
    51ee:	61 e0       	ldi	r22, 0x01	; 1
    51f0:	70 e0       	ldi	r23, 0x00	; 0
    51f2:	ce 01       	movw	r24, r28
    51f4:	01 96       	adiw	r24, 0x01	; 1
    51f6:	6b d4       	rcall	.+2262   	; 0x5ace <SPI0_TX>
    51f8:	21 96       	adiw	r28, 0x01	; 1
    51fa:	e2 e0       	ldi	r30, 0x02	; 2
    51fc:	0c 94 3f e8 	jmp	0x1d07e	; 0x1d07e <__epilogue_restores__+0x20>

00005200 <spi_init>:
    5200:	cf 92       	push	r12
    5202:	df 92       	push	r13
    5204:	ef 92       	push	r14
    5206:	ff 92       	push	r15
    5208:	6b 01       	movw	r12, r22
    520a:	7c 01       	movw	r14, r24
    520c:	84 2f       	mov	r24, r20
    520e:	a8 df       	rcall	.-176    	; 0x5160 <chip_deselect>
    5210:	8f ef       	ldi	r24, 0xFF	; 255
    5212:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_cs_pin>
    5216:	c7 01       	movw	r24, r14
    5218:	b6 01       	movw	r22, r12
    521a:	34 d4       	rcall	.+2152   	; 0x5a84 <SPI0_Init>
    521c:	80 e0       	ldi	r24, 0x00	; 0
    521e:	90 e0       	ldi	r25, 0x00	; 0
    5220:	f5 d3       	rcall	.+2026   	; 0x5a0c <SPI0_Mode>
    5222:	8f ef       	ldi	r24, 0xFF	; 255
    5224:	dd df       	rcall	.-70     	; 0x51e0 <spi_TX>
    5226:	c0 92 00 01 	sts	0x0100, r12	; 0x800100 <__data_start>
    522a:	d0 92 01 01 	sts	0x0101, r13	; 0x800101 <__data_start+0x1>
    522e:	e0 92 02 01 	sts	0x0102, r14	; 0x800102 <__data_start+0x2>
    5232:	f0 92 03 01 	sts	0x0103, r15	; 0x800103 <__data_start+0x3>
    5236:	ff 90       	pop	r15
    5238:	ef 90       	pop	r14
    523a:	df 90       	pop	r13
    523c:	cf 90       	pop	r12
    523e:	08 95       	ret

00005240 <spi_begin>:
    5240:	cf 92       	push	r12
    5242:	df 92       	push	r13
    5244:	ef 92       	push	r14
    5246:	ff 92       	push	r15
    5248:	cf 93       	push	r28
    524a:	df 93       	push	r29
    524c:	6b 01       	movw	r12, r22
    524e:	7c 01       	movw	r14, r24
    5250:	ea 01       	movw	r28, r20
    5252:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_cs_pin>
    5256:	8f 3f       	cpi	r24, 0xFF	; 255
    5258:	99 f0       	breq	.+38     	; 0x5280 <spi_begin+0x40>
    525a:	df 93       	push	r29
    525c:	4f 93       	push	r20
    525e:	1f 92       	push	r1
    5260:	8f 93       	push	r24
    5262:	86 ef       	ldi	r24, 0xF6	; 246
    5264:	92 e0       	ldi	r25, 0x02	; 2
    5266:	1f 92       	push	r1
    5268:	9f 93       	push	r25
    526a:	8f 93       	push	r24
    526c:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    5270:	8d b7       	in	r24, 0x3d	; 61
    5272:	9e b7       	in	r25, 0x3e	; 62
    5274:	07 96       	adiw	r24, 0x07	; 7
    5276:	0f b6       	in	r0, 0x3f	; 63
    5278:	f8 94       	cli
    527a:	9e bf       	out	0x3e, r25	; 62
    527c:	0f be       	out	0x3f, r0	; 63
    527e:	8d bf       	out	0x3d, r24	; 61
    5280:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    5284:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    5288:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
    528c:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
    5290:	8c 15       	cp	r24, r12
    5292:	9d 05       	cpc	r25, r13
    5294:	ae 05       	cpc	r26, r14
    5296:	bf 05       	cpc	r27, r15
    5298:	21 f0       	breq	.+8      	; 0x52a2 <spi_begin+0x62>
    529a:	ae 01       	movw	r20, r28
    529c:	c7 01       	movw	r24, r14
    529e:	b6 01       	movw	r22, r12
    52a0:	af df       	rcall	.-162    	; 0x5200 <spi_init>
    52a2:	8c 2f       	mov	r24, r28
    52a4:	44 df       	rcall	.-376    	; 0x512e <chip_select>
    52a6:	c0 93 04 01 	sts	0x0104, r28	; 0x800104 <_cs_pin>
    52aa:	df 91       	pop	r29
    52ac:	cf 91       	pop	r28
    52ae:	ff 90       	pop	r15
    52b0:	ef 90       	pop	r14
    52b2:	df 90       	pop	r13
    52b4:	cf 90       	pop	r12
    52b6:	08 95       	ret

000052b8 <spi_TXRX>:
    52b8:	a1 e0       	ldi	r26, 0x01	; 1
    52ba:	b0 e0       	ldi	r27, 0x00	; 0
    52bc:	e2 e6       	ldi	r30, 0x62	; 98
    52be:	f9 e2       	ldi	r31, 0x29	; 41
    52c0:	0c 94 23 e8 	jmp	0x1d046	; 0x1d046 <__prologue_saves__+0x20>
    52c4:	89 83       	std	Y+1, r24	; 0x01
    52c6:	61 e0       	ldi	r22, 0x01	; 1
    52c8:	70 e0       	ldi	r23, 0x00	; 0
    52ca:	ce 01       	movw	r24, r28
    52cc:	01 96       	adiw	r24, 0x01	; 1
    52ce:	13 d4       	rcall	.+2086   	; 0x5af6 <SPI0_TXRX>
    52d0:	89 81       	ldd	r24, Y+1	; 0x01
    52d2:	21 96       	adiw	r28, 0x01	; 1
    52d4:	e2 e0       	ldi	r30, 0x02	; 2
    52d6:	0c 94 3f e8 	jmp	0x1d07e	; 0x1d07e <__epilogue_restores__+0x20>

000052da <freeRam>:
/// - avr-libc dependent code.
///
/// @return free memory in bytes.
/// @see malloc().
uint16_t freeRam ()
{
    52da:	a2 e0       	ldi	r26, 0x02	; 2
    52dc:	b0 e0       	ldi	r27, 0x00	; 0
    52de:	e3 e7       	ldi	r30, 0x73	; 115
    52e0:	f9 e2       	ldi	r31, 0x29	; 41
    52e2:	0c 94 23 e8 	jmp	0x1d046	; 0x1d046 <__prologue_saves__+0x20>
    extern void * __heap_start;
    extern void * __brkval;
    int ret;
    uint16_t top;

    if(__brkval)
    52e6:	20 91 bb 21 	lds	r18, 0x21BB	; 0x8021bb <__brkval>
    52ea:	30 91 bc 21 	lds	r19, 0x21BC	; 0x8021bc <__brkval+0x1>
    52ee:	21 15       	cp	r18, r1
    52f0:	31 05       	cpc	r19, r1
    52f2:	11 f4       	brne	.+4      	; 0x52f8 <freeRam+0x1e>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    52f4:	2f eb       	ldi	r18, 0xBF	; 191
    52f6:	31 e2       	ldi	r19, 0x21	; 33

    ret = (uint16_t) &v - top;
    return ( ret );
}
    52f8:	ce 01       	movw	r24, r28
    52fa:	01 96       	adiw	r24, 0x01	; 1
    52fc:	82 1b       	sub	r24, r18
    52fe:	93 0b       	sbc	r25, r19
    5300:	22 96       	adiw	r28, 0x02	; 2
    5302:	e2 e0       	ldi	r30, 0x02	; 2
    5304:	0c 94 3f e8 	jmp	0x1d07e	; 0x1d07e <__epilogue_restores__+0x20>

00005308 <PrintFree>:
/// - avr-libc dependent code.
/// - Stack, BSS, Data, Heap, Malloc.
///
/// @return  void
void PrintFree()
{
    5308:	a2 e0       	ldi	r26, 0x02	; 2
    530a:	b0 e0       	ldi	r27, 0x00	; 0
    530c:	ea e8       	ldi	r30, 0x8A	; 138
    530e:	f9 e2       	ldi	r31, 0x29	; 41
    5310:	0c 94 23 e8 	jmp	0x1d046	; 0x1d046 <__prologue_saves__+0x20>
    extern void * __data_start;
    extern void * __data_end;
    extern void * __stack;
    uint16_t ram;

    ram = freeRam();
    5314:	e2 df       	rcall	.-60     	; 0x52da <freeRam>
    5316:	89 83       	std	Y+1, r24	; 0x01

    printf("Free Ram:%u\n", ram);
    5318:	9a 83       	std	Y+2, r25	; 0x02
    531a:	9f 93       	push	r25
    531c:	8f 93       	push	r24
    531e:	8d e1       	ldi	r24, 0x1D	; 29
    5320:	94 e0       	ldi	r25, 0x04	; 4
    5322:	1f 92       	push	r1
    5324:	9f 93       	push	r25
    5326:	8f 93       	push	r24
    5328:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    printf("  Stack Top:   %u\n", (unsigned int) &__stack);
    532c:	8f ef       	ldi	r24, 0xFF	; 255
    532e:	90 e4       	ldi	r25, 0x40	; 64
    5330:	9f 93       	push	r25
    5332:	8f 93       	push	r24
    5334:	8a e0       	ldi	r24, 0x0A	; 10
    5336:	94 e0       	ldi	r25, 0x04	; 4
    5338:	1f 92       	push	r1
    533a:	9f 93       	push	r25
    533c:	8f 93       	push	r24
    533e:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    printf("  Stack Free:  %u\n", (unsigned int) &ram - 0);
    5342:	ce 01       	movw	r24, r28
    5344:	01 96       	adiw	r24, 0x01	; 1
    5346:	9f 93       	push	r25
    5348:	8f 93       	push	r24
    534a:	87 ef       	ldi	r24, 0xF7	; 247
    534c:	93 e0       	ldi	r25, 0x03	; 3
    534e:	1f 92       	push	r1
    5350:	9f 93       	push	r25
    5352:	8f 93       	push	r24
    5354:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>

    printf("  BSS   start: %5u, end: %5u\n",
    5358:	8f eb       	ldi	r24, 0xBF	; 191
    535a:	91 e2       	ldi	r25, 0x21	; 33
    535c:	9f 93       	push	r25
    535e:	8f 93       	push	r24
    5360:	8c e6       	ldi	r24, 0x6C	; 108
    5362:	97 e1       	ldi	r25, 0x17	; 23
    5364:	9f 93       	push	r25
    5366:	8f 93       	push	r24
    5368:	89 ed       	ldi	r24, 0xD9	; 217
    536a:	93 e0       	ldi	r25, 0x03	; 3
    536c:	1f 92       	push	r1
    536e:	9f 93       	push	r25
    5370:	8f 93       	push	r24
    5372:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
        (unsigned int)&__bss_start, (unsigned int)&__bss_end);

    printf("  Data  start: %5u, end: %5u\n",
    5376:	8c e6       	ldi	r24, 0x6C	; 108
    5378:	97 e1       	ldi	r25, 0x17	; 23
    537a:	9f 93       	push	r25
    537c:	8f 93       	push	r24
    537e:	80 e0       	ldi	r24, 0x00	; 0
    5380:	91 e0       	ldi	r25, 0x01	; 1
    5382:	9f 93       	push	r25
    5384:	8f 93       	push	r24
    5386:	8b eb       	ldi	r24, 0xBB	; 187
    5388:	93 e0       	ldi	r25, 0x03	; 3
    538a:	1f 92       	push	r1
    538c:	9f 93       	push	r25
    538e:	8f 93       	push	r24
    5390:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
        (unsigned int)&__data_start, (unsigned int)&__data_end);

    printf("  Heap: start: %5u, end: %5u\n",
    5394:	80 e0       	ldi	r24, 0x00	; 0
    5396:	90 e0       	ldi	r25, 0x00	; 0
    5398:	9f 93       	push	r25
    539a:	8f 93       	push	r24
    539c:	8f eb       	ldi	r24, 0xBF	; 191
    539e:	91 e2       	ldi	r25, 0x21	; 33
    53a0:	9f 93       	push	r25
    53a2:	8f 93       	push	r24
    53a4:	8d e9       	ldi	r24, 0x9D	; 157
    53a6:	93 e0       	ldi	r25, 0x03	; 3
    53a8:	1f 92       	push	r1
    53aa:	9f 93       	push	r25
    53ac:	8f 93       	push	r24
    53ae:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
        (unsigned int)&__heap_start, (unsigned int)&__heap_end);

    printf("  Malloc start %5u  end: %5u\n",
    53b2:	0f b6       	in	r0, 0x3f	; 63
    53b4:	f8 94       	cli
    53b6:	de bf       	out	0x3e, r29	; 62
    53b8:	0f be       	out	0x3f, r0	; 63
    53ba:	cd bf       	out	0x3d, r28	; 61
    53bc:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <__malloc_heap_end+0x1>
    53c0:	8f 93       	push	r24
    53c2:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <__malloc_heap_end>
    53c6:	8f 93       	push	r24
    53c8:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <__malloc_heap_start+0x1>
    53cc:	8f 93       	push	r24
    53ce:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <__malloc_heap_start>
    53d2:	8f 93       	push	r24
    53d4:	8f e7       	ldi	r24, 0x7F	; 127
    53d6:	93 e0       	ldi	r25, 0x03	; 3
    53d8:	1f 92       	push	r1
    53da:	9f 93       	push	r25
    53dc:	8f 93       	push	r24
    53de:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
        (unsigned int)__malloc_heap_start, (unsigned int) __malloc_heap_end );

    printf("  __brkval:    %5u\n", (unsigned int) __brkval);
    53e2:	80 91 bc 21 	lds	r24, 0x21BC	; 0x8021bc <__brkval+0x1>
    53e6:	8f 93       	push	r24
    53e8:	80 91 bb 21 	lds	r24, 0x21BB	; 0x8021bb <__brkval>
    53ec:	8f 93       	push	r24
    53ee:	8b e6       	ldi	r24, 0x6B	; 107
    53f0:	93 e0       	ldi	r25, 0x03	; 3
    53f2:	1f 92       	push	r1
    53f4:	9f 93       	push	r25
    53f6:	8f 93       	push	r24
    53f8:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>

}
    53fc:	0f b6       	in	r0, 0x3f	; 63
    53fe:	f8 94       	cli
    5400:	de bf       	out	0x3e, r29	; 62
    5402:	0f be       	out	0x3f, r0	; 63
    5404:	cd bf       	out	0x3d, r28	; 61
    5406:	22 96       	adiw	r28, 0x02	; 2
    5408:	e2 e0       	ldi	r30, 0x02	; 2
    540a:	0c 94 3f e8 	jmp	0x1d07e	; 0x1d07e <__epilogue_restores__+0x20>

0000540e <safecalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
///
/// @return  void.
void *safecalloc(int size, int elements)
{
    540e:	ef 92       	push	r14
    5410:	ff 92       	push	r15
    5412:	0f 93       	push	r16
    5414:	1f 93       	push	r17
    5416:	cf 93       	push	r28
    5418:	df 93       	push	r29
    541a:	18 2f       	mov	r17, r24
    541c:	09 2f       	mov	r16, r25
    541e:	f6 2e       	mov	r15, r22
    5420:	e7 2e       	mov	r14, r23
	void *p = calloc(size, elements);
    5422:	0e 94 c1 ea 	call	0x1d582	; 0x1d582 <calloc>
    5426:	ec 01       	movw	r28, r24
	if(!p)
    5428:	89 2b       	or	r24, r25
    542a:	99 f4       	brne	.+38     	; 0x5452 <safecalloc+0x44>
	{
		printf("safecalloc(%d,%d) failed!\n", size, elements);
    542c:	ef 92       	push	r14
    542e:	ff 92       	push	r15
    5430:	0f 93       	push	r16
    5432:	1f 93       	push	r17
    5434:	80 e5       	ldi	r24, 0x50	; 80
    5436:	93 e0       	ldi	r25, 0x03	; 3
    5438:	1f 92       	push	r1
    543a:	9f 93       	push	r25
    543c:	8f 93       	push	r24
    543e:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    5442:	8d b7       	in	r24, 0x3d	; 61
    5444:	9e b7       	in	r25, 0x3e	; 62
    5446:	07 96       	adiw	r24, 0x07	; 7
    5448:	0f b6       	in	r0, 0x3f	; 63
    544a:	f8 94       	cli
    544c:	9e bf       	out	0x3e, r25	; 62
    544e:	0f be       	out	0x3f, r0	; 63
    5450:	8d bf       	out	0x3d, r24	; 61
	}
	return(p);
}
    5452:	ce 01       	movw	r24, r28
    5454:	cd b7       	in	r28, 0x3d	; 61
    5456:	de b7       	in	r29, 0x3e	; 62
    5458:	e6 e0       	ldi	r30, 0x06	; 6
    545a:	0c 94 3b e8 	jmp	0x1d076	; 0x1d076 <__epilogue_restores__+0x18>

0000545e <safemalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
/// @param[in] size:  size
/// @return  void.
void *safemalloc(size_t size)
{
    545e:	0f 93       	push	r16
    5460:	1f 93       	push	r17
    5462:	cf 93       	push	r28
    5464:	df 93       	push	r29
    5466:	18 2f       	mov	r17, r24
    5468:	09 2f       	mov	r16, r25
    void *p = calloc(size, 1);
    546a:	61 e0       	ldi	r22, 0x01	; 1
    546c:	70 e0       	ldi	r23, 0x00	; 0
    546e:	0e 94 c1 ea 	call	0x1d582	; 0x1d582 <calloc>
    5472:	ec 01       	movw	r28, r24
    if(!p)
    5474:	89 2b       	or	r24, r25
    5476:	71 f4       	brne	.+28     	; 0x5494 <safemalloc+0x36>
    {
        printf("safemalloc(%d) failed!\n", size);
    5478:	0f 93       	push	r16
    547a:	1f 93       	push	r17
    547c:	88 e3       	ldi	r24, 0x38	; 56
    547e:	93 e0       	ldi	r25, 0x03	; 3
    5480:	1f 92       	push	r1
    5482:	9f 93       	push	r25
    5484:	8f 93       	push	r24
    5486:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    548a:	0f 90       	pop	r0
    548c:	0f 90       	pop	r0
    548e:	0f 90       	pop	r0
    5490:	0f 90       	pop	r0
    5492:	0f 90       	pop	r0
    }
    return(p);
}
    5494:	ce 01       	movw	r24, r28
    5496:	df 91       	pop	r29
    5498:	cf 91       	pop	r28
    549a:	1f 91       	pop	r17
    549c:	0f 91       	pop	r16
    549e:	08 95       	ret

000054a0 <safefree>:
    extern void *__brkval;
    extern void * __heap_start;
    extern void * __heap_end;
    uint16_t top;

    if(p == NULL)
    54a0:	00 97       	sbiw	r24, 0x00	; 0
    54a2:	39 f1       	breq	.+78     	; 0x54f2 <safefree+0x52>
        return;

    if(__brkval)
    54a4:	20 91 bb 21 	lds	r18, 0x21BB	; 0x8021bb <__brkval>
    54a8:	30 91 bc 21 	lds	r19, 0x21BC	; 0x8021bc <__brkval+0x1>
    54ac:	21 15       	cp	r18, r1
    54ae:	31 05       	cpc	r19, r1
    54b0:	11 f4       	brne	.+4      	; 0x54b6 <safefree+0x16>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    54b2:	2f eb       	ldi	r18, 0xBF	; 191
    54b4:	31 e2       	ldi	r19, 0x21	; 33

    if( ((uint16_t) p >= (uint16_t) &__heap_start) &&
    54b6:	41 e2       	ldi	r20, 0x21	; 33
    54b8:	8f 3b       	cpi	r24, 0xBF	; 191
    54ba:	94 07       	cpc	r25, r20
    54bc:	30 f0       	brcs	.+12     	; 0x54ca <safefree+0x2a>
    54be:	28 17       	cp	r18, r24
    54c0:	39 07       	cpc	r19, r25
    54c2:	18 f0       	brcs	.+6      	; 0x54ca <safefree+0x2a>
        ((uint16_t) p <= top) )
    {
        free(p);
    54c4:	0c 94 73 eb 	jmp	0x1d6e6	; 0x1d6e6 <free>
        return;
    54c8:	08 95       	ret
    }
    printf("safefree: FREE ERROR (%u), top:(%u)\n", (uint16_t) p, (uint16_t) top);
    54ca:	3f 93       	push	r19
    54cc:	2f 93       	push	r18
    54ce:	9f 93       	push	r25
    54d0:	8f 93       	push	r24
    54d2:	83 e1       	ldi	r24, 0x13	; 19
    54d4:	93 e0       	ldi	r25, 0x03	; 3
    54d6:	1f 92       	push	r1
    54d8:	9f 93       	push	r25
    54da:	8f 93       	push	r24
    54dc:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    PrintFree();
    54e0:	13 df       	rcall	.-474    	; 0x5308 <PrintFree>
    54e2:	8d b7       	in	r24, 0x3d	; 61
    54e4:	9e b7       	in	r25, 0x3e	; 62
    54e6:	07 96       	adiw	r24, 0x07	; 7
    54e8:	0f b6       	in	r0, 0x3f	; 63
    54ea:	f8 94       	cli
    54ec:	9e bf       	out	0x3e, r25	; 62
    54ee:	0f be       	out	0x3f, r0	; 63
    54f0:	8d bf       	out	0x3d, r24	; 61
    54f2:	08 95       	ret

000054f4 <delayus>:
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayus(uint32_t us)
{

    while (us >= 100U)
    54f4:	64 36       	cpi	r22, 0x64	; 100
    54f6:	71 05       	cpc	r23, r1
    54f8:	81 05       	cpc	r24, r1
    54fa:	91 05       	cpc	r25, r1
    54fc:	58 f0       	brcs	.+22     	; 0x5514 <delayus+0x20>
    {
        us -= 100U;
    54fe:	64 56       	subi	r22, 0x64	; 100
    5500:	71 09       	sbc	r23, r1
    5502:	81 09       	sbc	r24, r1
    5504:	91 09       	sbc	r25, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    5506:	e3 ef       	ldi	r30, 0xF3	; 243
    5508:	f1 e0       	ldi	r31, 0x01	; 1
    550a:	31 97       	sbiw	r30, 0x01	; 1
    550c:	f1 f7       	brne	.-4      	; 0x550a <delayus+0x16>
    550e:	00 c0       	rjmp	.+0      	; 0x5510 <delayus+0x1c>
    5510:	00 00       	nop
    5512:	f0 cf       	rjmp	.-32     	; 0x54f4 <delayus>
        _delay_us(100);
    }
    while (us >= 10U)
    5514:	6a 30       	cpi	r22, 0x0A	; 10
    5516:	71 05       	cpc	r23, r1
    5518:	81 05       	cpc	r24, r1
    551a:	91 05       	cpc	r25, r1
    551c:	48 f0       	brcs	.+18     	; 0x5530 <delayus+0x3c>
    {
        us -= 10U;
    551e:	6a 50       	subi	r22, 0x0A	; 10
    5520:	71 09       	sbc	r23, r1
    5522:	81 09       	sbc	r24, r1
    5524:	91 09       	sbc	r25, r1
    5526:	f2 e4       	ldi	r31, 0x42	; 66
    5528:	fa 95       	dec	r31
    552a:	f1 f7       	brne	.-4      	; 0x5528 <delayus+0x34>
    552c:	00 c0       	rjmp	.+0      	; 0x552e <delayus+0x3a>
    552e:	f2 cf       	rjmp	.-28     	; 0x5514 <delayus+0x20>
        _delay_us(10);
    }
    while (us != 0U)
    5530:	61 15       	cp	r22, r1
    5532:	71 05       	cpc	r23, r1
    5534:	81 05       	cpc	r24, r1
    5536:	91 05       	cpc	r25, r1
    5538:	49 f0       	breq	.+18     	; 0x554c <delayus+0x58>
    {
        --us;
    553a:	61 50       	subi	r22, 0x01	; 1
    553c:	71 09       	sbc	r23, r1
    553e:	81 09       	sbc	r24, r1
    5540:	91 09       	sbc	r25, r1
    5542:	26 e0       	ldi	r18, 0x06	; 6
    5544:	2a 95       	dec	r18
    5546:	f1 f7       	brne	.-4      	; 0x5544 <delayus+0x50>
    5548:	00 c0       	rjmp	.+0      	; 0x554a <delayus+0x56>
    554a:	f2 cf       	rjmp	.-28     	; 0x5530 <delayus+0x3c>
        _delay_us(1);
    }
}
    554c:	08 95       	ret

0000554e <delayms>:
/// _delay_us() has limited range - this extends it.
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayms(uint32_t ms)
{
    while (ms--)
    554e:	61 15       	cp	r22, r1
    5550:	71 05       	cpc	r23, r1
    5552:	81 05       	cpc	r24, r1
    5554:	91 05       	cpc	r25, r1
    5556:	09 f4       	brne	.+2      	; 0x555a <delayms+0xc>
    5558:	41 c0       	rjmp	.+130    	; 0x55dc <delayms+0x8e>
    555a:	e3 ef       	ldi	r30, 0xF3	; 243
    555c:	f1 e0       	ldi	r31, 0x01	; 1
    555e:	31 97       	sbiw	r30, 0x01	; 1
    5560:	f1 f7       	brne	.-4      	; 0x555e <delayms+0x10>
    5562:	00 c0       	rjmp	.+0      	; 0x5564 <delayms+0x16>
    5564:	00 00       	nop
    5566:	e3 ef       	ldi	r30, 0xF3	; 243
    5568:	f1 e0       	ldi	r31, 0x01	; 1
    556a:	31 97       	sbiw	r30, 0x01	; 1
    556c:	f1 f7       	brne	.-4      	; 0x556a <delayms+0x1c>
    556e:	00 c0       	rjmp	.+0      	; 0x5570 <delayms+0x22>
    5570:	00 00       	nop
    5572:	e3 ef       	ldi	r30, 0xF3	; 243
    5574:	f1 e0       	ldi	r31, 0x01	; 1
    5576:	31 97       	sbiw	r30, 0x01	; 1
    5578:	f1 f7       	brne	.-4      	; 0x5576 <delayms+0x28>
    557a:	00 c0       	rjmp	.+0      	; 0x557c <delayms+0x2e>
    557c:	00 00       	nop
    557e:	e3 ef       	ldi	r30, 0xF3	; 243
    5580:	f1 e0       	ldi	r31, 0x01	; 1
    5582:	31 97       	sbiw	r30, 0x01	; 1
    5584:	f1 f7       	brne	.-4      	; 0x5582 <delayms+0x34>
    5586:	00 c0       	rjmp	.+0      	; 0x5588 <delayms+0x3a>
    5588:	00 00       	nop
    558a:	e3 ef       	ldi	r30, 0xF3	; 243
    558c:	f1 e0       	ldi	r31, 0x01	; 1
    558e:	31 97       	sbiw	r30, 0x01	; 1
    5590:	f1 f7       	brne	.-4      	; 0x558e <delayms+0x40>
    5592:	00 c0       	rjmp	.+0      	; 0x5594 <delayms+0x46>
    5594:	00 00       	nop
    5596:	e3 ef       	ldi	r30, 0xF3	; 243
    5598:	f1 e0       	ldi	r31, 0x01	; 1
    559a:	31 97       	sbiw	r30, 0x01	; 1
    559c:	f1 f7       	brne	.-4      	; 0x559a <delayms+0x4c>
    559e:	00 c0       	rjmp	.+0      	; 0x55a0 <delayms+0x52>
    55a0:	00 00       	nop
    55a2:	e3 ef       	ldi	r30, 0xF3	; 243
    55a4:	f1 e0       	ldi	r31, 0x01	; 1
    55a6:	31 97       	sbiw	r30, 0x01	; 1
    55a8:	f1 f7       	brne	.-4      	; 0x55a6 <delayms+0x58>
    55aa:	00 c0       	rjmp	.+0      	; 0x55ac <delayms+0x5e>
    55ac:	00 00       	nop
    55ae:	e3 ef       	ldi	r30, 0xF3	; 243
    55b0:	f1 e0       	ldi	r31, 0x01	; 1
    55b2:	31 97       	sbiw	r30, 0x01	; 1
    55b4:	f1 f7       	brne	.-4      	; 0x55b2 <delayms+0x64>
    55b6:	00 c0       	rjmp	.+0      	; 0x55b8 <delayms+0x6a>
    55b8:	00 00       	nop
    55ba:	e3 ef       	ldi	r30, 0xF3	; 243
    55bc:	f1 e0       	ldi	r31, 0x01	; 1
    55be:	31 97       	sbiw	r30, 0x01	; 1
    55c0:	f1 f7       	brne	.-4      	; 0x55be <delayms+0x70>
    55c2:	00 c0       	rjmp	.+0      	; 0x55c4 <delayms+0x76>
    55c4:	00 00       	nop
    55c6:	e3 ef       	ldi	r30, 0xF3	; 243
    55c8:	f1 e0       	ldi	r31, 0x01	; 1
    55ca:	31 97       	sbiw	r30, 0x01	; 1
    55cc:	f1 f7       	brne	.-4      	; 0x55ca <delayms+0x7c>
    55ce:	00 c0       	rjmp	.+0      	; 0x55d0 <delayms+0x82>
    55d0:	00 00       	nop
    55d2:	61 50       	subi	r22, 0x01	; 1
    55d4:	71 09       	sbc	r23, r1
    55d6:	81 09       	sbc	r24, r1
    55d8:	91 09       	sbc	r25, r1
    55da:	b9 cf       	rjmp	.-142    	; 0x554e <delayms>
        _delay_us(100);                           // 700
        _delay_us(100);                           // 800
        _delay_us(100);                           // 900
        _delay_us(100);                           //1000
    }
}
    55dc:	08 95       	ret

000055de <uart_ubr>:

    cli();
    c = uarts[uart].rx_buf[uarts[uart].rx_tail];
    sei();
    return (c & 0xff);
}
    55de:	4f 92       	push	r4
    55e0:	5f 92       	push	r5
    55e2:	6f 92       	push	r6
    55e4:	7f 92       	push	r7
    55e6:	8f 92       	push	r8
    55e8:	9f 92       	push	r9
    55ea:	af 92       	push	r10
    55ec:	bf 92       	push	r11
    55ee:	cf 92       	push	r12
    55f0:	df 92       	push	r13
    55f2:	ef 92       	push	r14
    55f4:	ff 92       	push	r15
    55f6:	cf 93       	push	r28
    55f8:	df 93       	push	r29
    55fa:	5a 01       	movw	r10, r20
    55fc:	e9 01       	movw	r28, r18
    55fe:	0e 94 5f e9 	call	0x1d2be	; 0x1d2be <__floatunsisf>
    5602:	2b 01       	movw	r4, r22
    5604:	3c 01       	movw	r6, r24
    5606:	20 e0       	ldi	r18, 0x00	; 0
    5608:	30 e0       	ldi	r19, 0x00	; 0
    560a:	40 e0       	ldi	r20, 0x00	; 0
    560c:	51 e4       	ldi	r21, 0x41	; 65
    560e:	0e 94 15 ea 	call	0x1d42a	; 0x1d42a <__mulsf3>
    5612:	9b 01       	movw	r18, r22
    5614:	ac 01       	movw	r20, r24
    5616:	60 e8       	ldi	r22, 0x80	; 128
    5618:	76 e9       	ldi	r23, 0x96	; 150
    561a:	88 e9       	ldi	r24, 0x98	; 152
    561c:	9b e4       	ldi	r25, 0x4B	; 75
    561e:	0e 94 c6 e8 	call	0x1d18c	; 0x1d18c <__divsf3>
    5622:	20 e0       	ldi	r18, 0x00	; 0
    5624:	30 e0       	ldi	r19, 0x00	; 0
    5626:	40 e8       	ldi	r20, 0x80	; 128
    5628:	5f e3       	ldi	r21, 0x3F	; 63
    562a:	0e 94 5d e8 	call	0x1d0ba	; 0x1d0ba <__subsf3>
    562e:	0e 94 78 ea 	call	0x1d4f0	; 0x1d4f0 <round>
    5632:	0e 94 33 e9 	call	0x1d266	; 0x1d266 <__fixunssfsi>
    5636:	6b 01       	movw	r12, r22
    5638:	7c 01       	movw	r14, r24
    563a:	c1 14       	cp	r12, r1
    563c:	80 e1       	ldi	r24, 0x10	; 16
    563e:	d8 06       	cpc	r13, r24
    5640:	e1 04       	cpc	r14, r1
    5642:	f1 04       	cpc	r15, r1
    5644:	58 f4       	brcc	.+22     	; 0x565c <uart_ubr+0x7e>
    5646:	81 e0       	ldi	r24, 0x01	; 1
    5648:	90 e0       	ldi	r25, 0x00	; 0
    564a:	f5 01       	movw	r30, r10
    564c:	91 83       	std	Z+1, r25	; 0x01
    564e:	80 83       	st	Z, r24
    5650:	81 2c       	mov	r8, r1
    5652:	91 2c       	mov	r9, r1
    5654:	a1 2c       	mov	r10, r1
    5656:	21 e4       	ldi	r18, 0x41	; 65
    5658:	b2 2e       	mov	r11, r18
    565a:	31 c0       	rjmp	.+98     	; 0x56be <uart_ubr+0xe0>
    565c:	f5 01       	movw	r30, r10
    565e:	11 82       	std	Z+1, r1	; 0x01
    5660:	10 82       	st	Z, r1
    5662:	20 e0       	ldi	r18, 0x00	; 0
    5664:	30 e0       	ldi	r19, 0x00	; 0
    5666:	40 e8       	ldi	r20, 0x80	; 128
    5668:	51 e4       	ldi	r21, 0x41	; 65
    566a:	c3 01       	movw	r24, r6
    566c:	b2 01       	movw	r22, r4
    566e:	0e 94 15 ea 	call	0x1d42a	; 0x1d42a <__mulsf3>
    5672:	9b 01       	movw	r18, r22
    5674:	ac 01       	movw	r20, r24
    5676:	60 e8       	ldi	r22, 0x80	; 128
    5678:	76 e9       	ldi	r23, 0x96	; 150
    567a:	88 e9       	ldi	r24, 0x98	; 152
    567c:	9b e4       	ldi	r25, 0x4B	; 75
    567e:	0e 94 c6 e8 	call	0x1d18c	; 0x1d18c <__divsf3>
    5682:	20 e0       	ldi	r18, 0x00	; 0
    5684:	30 e0       	ldi	r19, 0x00	; 0
    5686:	40 e8       	ldi	r20, 0x80	; 128
    5688:	5f e3       	ldi	r21, 0x3F	; 63
    568a:	0e 94 5d e8 	call	0x1d0ba	; 0x1d0ba <__subsf3>
    568e:	0e 94 78 ea 	call	0x1d4f0	; 0x1d4f0 <round>
    5692:	0e 94 33 e9 	call	0x1d266	; 0x1d266 <__fixunssfsi>
    5696:	6b 01       	movw	r12, r22
    5698:	7c 01       	movw	r14, r24
    569a:	81 2c       	mov	r8, r1
    569c:	91 2c       	mov	r9, r1
    569e:	90 e8       	ldi	r25, 0x80	; 128
    56a0:	a9 2e       	mov	r10, r25
    56a2:	91 e4       	ldi	r25, 0x41	; 65
    56a4:	b9 2e       	mov	r11, r25
    56a6:	c1 14       	cp	r12, r1
    56a8:	f0 e1       	ldi	r31, 0x10	; 16
    56aa:	df 06       	cpc	r13, r31
    56ac:	e1 04       	cpc	r14, r1
    56ae:	f1 04       	cpc	r15, r1
    56b0:	30 f0       	brcs	.+12     	; 0x56be <uart_ubr+0xe0>
    56b2:	cc 24       	eor	r12, r12
    56b4:	ca 94       	dec	r12
    56b6:	8f e0       	ldi	r24, 0x0F	; 15
    56b8:	d8 2e       	mov	r13, r24
    56ba:	e1 2c       	mov	r14, r1
    56bc:	f1 2c       	mov	r15, r1
    56be:	c7 01       	movw	r24, r14
    56c0:	b6 01       	movw	r22, r12
    56c2:	6f 5f       	subi	r22, 0xFF	; 255
    56c4:	7f 4f       	sbci	r23, 0xFF	; 255
    56c6:	8f 4f       	sbci	r24, 0xFF	; 255
    56c8:	9f 4f       	sbci	r25, 0xFF	; 255
    56ca:	0e 94 5f e9 	call	0x1d2be	; 0x1d2be <__floatunsisf>
    56ce:	a5 01       	movw	r20, r10
    56d0:	94 01       	movw	r18, r8
    56d2:	0e 94 15 ea 	call	0x1d42a	; 0x1d42a <__mulsf3>
    56d6:	9b 01       	movw	r18, r22
    56d8:	ac 01       	movw	r20, r24
    56da:	60 e8       	ldi	r22, 0x80	; 128
    56dc:	76 e9       	ldi	r23, 0x96	; 150
    56de:	88 e9       	ldi	r24, 0x98	; 152
    56e0:	9b e4       	ldi	r25, 0x4B	; 75
    56e2:	0e 94 c6 e8 	call	0x1d18c	; 0x1d18c <__divsf3>
    56e6:	0e 94 33 e9 	call	0x1d266	; 0x1d266 <__fixunssfsi>
    56ea:	68 83       	st	Y, r22
    56ec:	79 83       	std	Y+1, r23	; 0x01
    56ee:	8a 83       	std	Y+2, r24	; 0x02
    56f0:	9b 83       	std	Y+3, r25	; 0x03
    56f2:	c6 01       	movw	r24, r12
    56f4:	df 91       	pop	r29
    56f6:	cf 91       	pop	r28
    56f8:	ff 90       	pop	r15
    56fa:	ef 90       	pop	r14
    56fc:	df 90       	pop	r13
    56fe:	cf 90       	pop	r12
    5700:	bf 90       	pop	r11
    5702:	af 90       	pop	r10
    5704:	9f 90       	pop	r9
    5706:	8f 90       	pop	r8
    5708:	7f 90       	pop	r7
    570a:	6f 90       	pop	r6
    570c:	5f 90       	pop	r5
    570e:	4f 90       	pop	r4
    5710:	08 95       	ret

00005712 <uart_init>:
    5712:	a6 e0       	ldi	r26, 0x06	; 6
    5714:	b0 e0       	ldi	r27, 0x00	; 0
    5716:	ef e8       	ldi	r30, 0x8F	; 143
    5718:	fb e2       	ldi	r31, 0x2B	; 43
    571a:	0c 94 23 e8 	jmp	0x1d046	; 0x1d046 <__prologue_saves__+0x20>
    571e:	1e 82       	std	Y+6, r1	; 0x06
    5720:	1d 82       	std	Y+5, r1	; 0x05
    5722:	81 11       	cpse	r24, r1
    5724:	36 c0       	rjmp	.+108    	; 0x5792 <uart_init+0x80>
    5726:	cb 01       	movw	r24, r22
    5728:	ba 01       	movw	r22, r20
    572a:	9e 01       	movw	r18, r28
    572c:	2f 5f       	subi	r18, 0xFF	; 255
    572e:	3f 4f       	sbci	r19, 0xFF	; 255
    5730:	ae 01       	movw	r20, r28
    5732:	4b 5f       	subi	r20, 0xFB	; 251
    5734:	5f 4f       	sbci	r21, 0xFF	; 255
    5736:	53 df       	rcall	.-346    	; 0x55de <uart_ubr>
    5738:	f8 94       	cli
    573a:	10 92 06 1a 	sts	0x1A06, r1	; 0x801a06 <uarts+0x4>
    573e:	10 92 05 1a 	sts	0x1A05, r1	; 0x801a05 <uarts+0x3>
    5742:	10 92 02 1a 	sts	0x1A02, r1	; 0x801a02 <uarts>
    5746:	10 92 03 1a 	sts	0x1A03, r1	; 0x801a03 <uarts+0x1>
    574a:	10 92 04 1a 	sts	0x1A04, r1	; 0x801a04 <uarts+0x2>
    574e:	10 92 07 1a 	sts	0x1A07, r1	; 0x801a07 <uarts+0x5>
    5752:	78 94       	sei
    5754:	f8 94       	cli
    5756:	58 9a       	sbi	0x0b, 0	; 11
    5758:	59 9a       	sbi	0x0b, 1	; 11
    575a:	50 98       	cbi	0x0a, 0	; 10
    575c:	51 9a       	sbi	0x0a, 1	; 10
    575e:	28 e9       	ldi	r18, 0x98	; 152
    5760:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    5764:	2d 81       	ldd	r18, Y+5	; 0x05
    5766:	3e 81       	ldd	r19, Y+6	; 0x06
    5768:	23 2b       	or	r18, r19
    576a:	19 f0       	breq	.+6      	; 0x5772 <uart_init+0x60>
    576c:	22 e0       	ldi	r18, 0x02	; 2
    576e:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    5772:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    5776:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    577a:	78 94       	sei
    577c:	6e e7       	ldi	r22, 0x7E	; 126
    577e:	7c e2       	ldi	r23, 0x2C	; 44
    5780:	83 e9       	ldi	r24, 0x93	; 147
    5782:	9c e2       	ldi	r25, 0x2C	; 44
    5784:	0e 94 1b 78 	call	0xf036	; 0xf036 <fdevopen>
    5788:	69 81       	ldd	r22, Y+1	; 0x01
    578a:	7a 81       	ldd	r23, Y+2	; 0x02
    578c:	8b 81       	ldd	r24, Y+3	; 0x03
    578e:	9c 81       	ldd	r25, Y+4	; 0x04
    5790:	03 c0       	rjmp	.+6      	; 0x5798 <uart_init+0x86>
    5792:	60 e0       	ldi	r22, 0x00	; 0
    5794:	70 e0       	ldi	r23, 0x00	; 0
    5796:	cb 01       	movw	r24, r22
    5798:	26 96       	adiw	r28, 0x06	; 6
    579a:	e2 e0       	ldi	r30, 0x02	; 2
    579c:	0c 94 3f e8 	jmp	0x1d07e	; 0x1d07e <__epilogue_restores__+0x20>

000057a0 <uart_rx_interrupt>:
    57a0:	27 e5       	ldi	r18, 0x57	; 87
    57a2:	82 9f       	mul	r24, r18
    57a4:	c0 01       	movw	r24, r0
    57a6:	11 24       	eor	r1, r1
    57a8:	fc 01       	movw	r30, r24
    57aa:	ee 5f       	subi	r30, 0xFE	; 254
    57ac:	f5 4e       	sbci	r31, 0xE5	; 229
    57ae:	83 81       	ldd	r24, Z+3	; 0x03
    57b0:	94 81       	ldd	r25, Z+4	; 0x04
    57b2:	80 35       	cpi	r24, 0x50	; 80
    57b4:	91 05       	cpc	r25, r1
    57b6:	84 f4       	brge	.+32     	; 0x57d8 <uart_rx_interrupt+0x38>
    57b8:	30 81       	ld	r19, Z
    57ba:	21 e0       	ldi	r18, 0x01	; 1
    57bc:	23 0f       	add	r18, r19
    57be:	20 83       	st	Z, r18
    57c0:	df 01       	movw	r26, r30
    57c2:	a3 0f       	add	r26, r19
    57c4:	b1 1d       	adc	r27, r1
    57c6:	16 96       	adiw	r26, 0x06	; 6
    57c8:	6c 93       	st	X, r22
    57ca:	01 96       	adiw	r24, 0x01	; 1
    57cc:	94 83       	std	Z+4, r25	; 0x04
    57ce:	83 83       	std	Z+3, r24	; 0x03
    57d0:	20 35       	cpi	r18, 0x50	; 80
    57d2:	28 f0       	brcs	.+10     	; 0x57de <uart_rx_interrupt+0x3e>
    57d4:	10 82       	st	Z, r1
    57d6:	08 95       	ret
    57d8:	85 81       	ldd	r24, Z+5	; 0x05
    57da:	81 60       	ori	r24, 0x01	; 1
    57dc:	85 83       	std	Z+5, r24	; 0x05
    57de:	08 95       	ret

000057e0 <__vector_20>:
    57e0:	1f 92       	push	r1
    57e2:	0f 92       	push	r0
    57e4:	0f b6       	in	r0, 0x3f	; 63
    57e6:	0f 92       	push	r0
    57e8:	11 24       	eor	r1, r1
    57ea:	0b b6       	in	r0, 0x3b	; 59
    57ec:	0f 92       	push	r0
    57ee:	2f 93       	push	r18
    57f0:	3f 93       	push	r19
    57f2:	4f 93       	push	r20
    57f4:	5f 93       	push	r21
    57f6:	6f 93       	push	r22
    57f8:	7f 93       	push	r23
    57fa:	8f 93       	push	r24
    57fc:	9f 93       	push	r25
    57fe:	af 93       	push	r26
    5800:	bf 93       	push	r27
    5802:	ef 93       	push	r30
    5804:	ff 93       	push	r31
    5806:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    580a:	80 e0       	ldi	r24, 0x00	; 0
    580c:	c9 df       	rcall	.-110    	; 0x57a0 <uart_rx_interrupt>
    580e:	ff 91       	pop	r31
    5810:	ef 91       	pop	r30
    5812:	bf 91       	pop	r27
    5814:	af 91       	pop	r26
    5816:	9f 91       	pop	r25
    5818:	8f 91       	pop	r24
    581a:	7f 91       	pop	r23
    581c:	6f 91       	pop	r22
    581e:	5f 91       	pop	r21
    5820:	4f 91       	pop	r20
    5822:	3f 91       	pop	r19
    5824:	2f 91       	pop	r18
    5826:	0f 90       	pop	r0
    5828:	0b be       	out	0x3b, r0	; 59
    582a:	0f 90       	pop	r0
    582c:	0f be       	out	0x3f, r0	; 63
    582e:	0f 90       	pop	r0
    5830:	1f 90       	pop	r1
    5832:	18 95       	reti

00005834 <uart_rx_count>:
/// @return  Character count in ring buffer.
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
    5834:	81 11       	cpse	r24, r1
    5836:	07 c0       	rjmp	.+14     	; 0x5846 <uart_rx_count+0x12>
        return(EOF);

    cli();
    5838:	f8 94       	cli

    count = uarts[uart].rx_count;
    583a:	80 91 05 1a 	lds	r24, 0x1A05	; 0x801a05 <uarts+0x3>
    583e:	90 91 06 1a 	lds	r25, 0x1A06	; 0x801a06 <uarts+0x4>

    sei();
    5842:	78 94       	sei

    return (count );
    5844:	08 95       	ret
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
        return(EOF);
    5846:	8f ef       	ldi	r24, 0xFF	; 255
    5848:	9f ef       	ldi	r25, 0xFF	; 255
    count = uarts[uart].rx_count;

    sei();

    return (count );
}
    584a:	08 95       	ret

0000584c <uart_get_tail>:
/// @see uart_rx_count().
int uart_get_tail(uint8_t uart)
{
    uint8_t c;

    if (uart >= UARTS)
    584c:	81 11       	cpse	r24, r1
    584e:	21 c0       	rjmp	.+66     	; 0x5892 <uart_get_tail+0x46>
	{
        return(EOF);
	}

	while(uart_rx_count(uart) < 1)
    5850:	80 e0       	ldi	r24, 0x00	; 0
    5852:	f0 df       	rcall	.-32     	; 0x5834 <uart_rx_count>
    5854:	18 16       	cp	r1, r24
    5856:	19 06       	cpc	r1, r25
    5858:	dc f7       	brge	.-10     	; 0x5850 <uart_get_tail+0x4>
		;

    cli();
    585a:	f8 94       	cli
    c = uarts[uart].rx_buf[uarts[uart].rx_tail++];
    585c:	e0 91 03 1a 	lds	r30, 0x1A03	; 0x801a03 <uarts+0x1>
    5860:	91 e0       	ldi	r25, 0x01	; 1
    5862:	9e 0f       	add	r25, r30
    5864:	90 93 03 1a 	sts	0x1A03, r25	; 0x801a03 <uarts+0x1>
    5868:	f0 e0       	ldi	r31, 0x00	; 0
    586a:	ee 5f       	subi	r30, 0xFE	; 254
    586c:	f5 4e       	sbci	r31, 0xE5	; 229
    586e:	86 81       	ldd	r24, Z+6	; 0x06
    if (uarts[uart].rx_tail >= RX_BUF_SIZE)
    5870:	90 35       	cpi	r25, 0x50	; 80
    5872:	10 f0       	brcs	.+4      	; 0x5878 <uart_get_tail+0x2c>
        uarts[uart].rx_tail = 0;
    5874:	10 92 03 1a 	sts	0x1A03, r1	; 0x801a03 <uarts+0x1>
    uarts[uart].rx_count--;
    5878:	20 91 05 1a 	lds	r18, 0x1A05	; 0x801a05 <uarts+0x3>
    587c:	30 91 06 1a 	lds	r19, 0x1A06	; 0x801a06 <uarts+0x4>
    5880:	21 50       	subi	r18, 0x01	; 1
    5882:	31 09       	sbc	r19, r1
    5884:	30 93 06 1a 	sts	0x1A06, r19	; 0x801a06 <uarts+0x4>
    5888:	20 93 05 1a 	sts	0x1A05, r18	; 0x801a05 <uarts+0x3>
    sei();
    588c:	78 94       	sei

    return (c & 0xff);
    588e:	90 e0       	ldi	r25, 0x00	; 0
    5890:	08 95       	ret
{
    uint8_t c;

    if (uart >= UARTS)
	{
        return(EOF);
    5892:	8f ef       	ldi	r24, 0xFF	; 255
    5894:	9f ef       	ldi	r25, 0xFF	; 255
        uarts[uart].rx_tail = 0;
    uarts[uart].rx_count--;
    sei();

    return (c & 0xff);
}
    5896:	08 95       	ret

00005898 <uart_rx_byte>:
///
/// @param[in] uart: uart number.
///
/// @return  Character.
int uart_rx_byte(uint8_t uart)
{
    5898:	d9 df       	rcall	.-78     	; 0x584c <uart_get_tail>
    589a:	99 27       	eor	r25, r25
    589c:	08 95       	ret

0000589e <uart_tx_byte>:
    589e:	61 11       	cpse	r22, r1
    58a0:	09 c0       	rjmp	.+18     	; 0x58b4 <uart_tx_byte+0x16>
    58a2:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    58a6:	25 ff       	sbrs	r18, 5
    58a8:	fc cf       	rjmp	.-8      	; 0x58a2 <uart_tx_byte+0x4>
    58aa:	28 2f       	mov	r18, r24
    58ac:	2f 77       	andi	r18, 0x7F	; 127
    58ae:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    58b2:	08 95       	ret
    58b4:	61 30       	cpi	r22, 0x01	; 1
    58b6:	49 f4       	brne	.+18     	; 0x58ca <uart_tx_byte+0x2c>
    58b8:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    58bc:	25 ff       	sbrs	r18, 5
    58be:	fc cf       	rjmp	.-8      	; 0x58b8 <uart_tx_byte+0x1a>
    58c0:	28 2f       	mov	r18, r24
    58c2:	2f 77       	andi	r18, 0x7F	; 127
    58c4:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    58c8:	08 95       	ret
    58ca:	8f ef       	ldi	r24, 0xFF	; 255
    58cc:	9f ef       	ldi	r25, 0xFF	; 255
    58ce:	08 95       	ret

000058d0 <uart_getchar>:
    58d0:	cf 93       	push	r28
    58d2:	81 11       	cpse	r24, r1
    58d4:	0f c0       	rjmp	.+30     	; 0x58f4 <uart_getchar+0x24>
    58d6:	e0 df       	rcall	.-64     	; 0x5898 <uart_rx_byte>
    58d8:	c8 2f       	mov	r28, r24
    58da:	60 e0       	ldi	r22, 0x00	; 0
    58dc:	90 e0       	ldi	r25, 0x00	; 0
    58de:	df df       	rcall	.-66     	; 0x589e <uart_tx_byte>
    58e0:	cd 30       	cpi	r28, 0x0D	; 13
    58e2:	29 f4       	brne	.+10     	; 0x58ee <uart_getchar+0x1e>
    58e4:	60 e0       	ldi	r22, 0x00	; 0
    58e6:	8a e0       	ldi	r24, 0x0A	; 10
    58e8:	90 e0       	ldi	r25, 0x00	; 0
    58ea:	d9 df       	rcall	.-78     	; 0x589e <uart_tx_byte>
    58ec:	ca e0       	ldi	r28, 0x0A	; 10
    58ee:	8c 2f       	mov	r24, r28
    58f0:	90 e0       	ldi	r25, 0x00	; 0
    58f2:	02 c0       	rjmp	.+4      	; 0x58f8 <uart_getchar+0x28>
    58f4:	8f ef       	ldi	r24, 0xFF	; 255
    58f6:	9f ef       	ldi	r25, 0xFF	; 255
    58f8:	cf 91       	pop	r28
    58fa:	08 95       	ret

000058fc <uart0_getchar>:
    58fc:	80 e0       	ldi	r24, 0x00	; 0
    58fe:	e8 cf       	rjmp	.-48     	; 0x58d0 <uart_getchar>
    5900:	08 95       	ret

00005902 <uart_putchar>:
    5902:	1f 93       	push	r17
    5904:	cf 93       	push	r28
    5906:	df 93       	push	r29
    5908:	ec 01       	movw	r28, r24
    590a:	16 2f       	mov	r17, r22
    590c:	c8 df       	rcall	.-112    	; 0x589e <uart_tx_byte>
    590e:	ca 30       	cpi	r28, 0x0A	; 10
    5910:	d1 05       	cpc	r29, r1
    5912:	21 f4       	brne	.+8      	; 0x591c <uart_putchar+0x1a>
    5914:	61 2f       	mov	r22, r17
    5916:	8d e0       	ldi	r24, 0x0D	; 13
    5918:	90 e0       	ldi	r25, 0x00	; 0
    591a:	c1 df       	rcall	.-126    	; 0x589e <uart_tx_byte>
    591c:	ce 01       	movw	r24, r28
    591e:	df 91       	pop	r29
    5920:	cf 91       	pop	r28
    5922:	1f 91       	pop	r17
    5924:	08 95       	ret

00005926 <uart0_putchar>:
    5926:	cf 93       	push	r28
    5928:	df 93       	push	r29
    592a:	ec 01       	movw	r28, r24
    592c:	60 e0       	ldi	r22, 0x00	; 0
    592e:	70 e0       	ldi	r23, 0x00	; 0
    5930:	e8 df       	rcall	.-48     	; 0x5902 <uart_putchar>
    5932:	ce 01       	movw	r24, r28
    5934:	df 91       	pop	r29
    5936:	cf 91       	pop	r28
    5938:	08 95       	ret

0000593a <uart_keyhit>:
    593a:	7c cf       	rjmp	.-264    	; 0x5834 <uart_rx_count>
    593c:	08 95       	ret

0000593e <SPI0_Speed>:
/// @brief  Return saved SPI mode as set by SPI0_Mode().
/// @return  saved mode.
int SPI0_Get_Mode( void )
{
    return(SPI0_Mode_value);
}
    593e:	cf 92       	push	r12
    5940:	df 92       	push	r13
    5942:	ef 92       	push	r14
    5944:	ff 92       	push	r15
    5946:	6b 01       	movw	r12, r22
    5948:	7c 01       	movw	r14, r24
    594a:	80 91 6e 17 	lds	r24, 0x176E	; 0x80176e <SPI0_Speed_value>
    594e:	90 91 6f 17 	lds	r25, 0x176F	; 0x80176f <SPI0_Speed_value+0x1>
    5952:	a0 91 70 17 	lds	r26, 0x1770	; 0x801770 <SPI0_Speed_value+0x2>
    5956:	b0 91 71 17 	lds	r27, 0x1771	; 0x801771 <SPI0_Speed_value+0x3>
    595a:	8c 15       	cp	r24, r12
    595c:	9d 05       	cpc	r25, r13
    595e:	ae 05       	cpc	r26, r14
    5960:	bf 05       	cpc	r27, r15
    5962:	09 f4       	brne	.+2      	; 0x5966 <SPI0_Speed+0x28>
    5964:	4e c0       	rjmp	.+156    	; 0x5a02 <SPI0_Speed+0xc4>
    5966:	60 e0       	ldi	r22, 0x00	; 0
    5968:	7d e2       	ldi	r23, 0x2D	; 45
    596a:	81 e3       	ldi	r24, 0x31	; 49
    596c:	91 e0       	ldi	r25, 0x01	; 1
    596e:	a7 01       	movw	r20, r14
    5970:	96 01       	movw	r18, r12
    5972:	0e 94 91 e7 	call	0x1cf22	; 0x1cf22 <__udivmodsi4>
    5976:	20 38       	cpi	r18, 0x80	; 128
    5978:	31 05       	cpc	r19, r1
    597a:	41 05       	cpc	r20, r1
    597c:	51 05       	cpc	r21, r1
    597e:	28 f4       	brcc	.+10     	; 0x598a <SPI0_Speed+0x4c>
    5980:	20 34       	cpi	r18, 0x40	; 64
    5982:	31 05       	cpc	r19, r1
    5984:	41 05       	cpc	r20, r1
    5986:	51 05       	cpc	r21, r1
    5988:	30 f0       	brcs	.+12     	; 0x5996 <SPI0_Speed+0x58>
    598a:	8d b5       	in	r24, 0x2d	; 45
    598c:	8e 7f       	andi	r24, 0xFE	; 254
    598e:	8d bd       	out	0x2d, r24	; 45
    5990:	8c b5       	in	r24, 0x2c	; 44
    5992:	82 60       	ori	r24, 0x02	; 2
    5994:	1b c0       	rjmp	.+54     	; 0x59cc <SPI0_Speed+0x8e>
    5996:	8d b5       	in	r24, 0x2d	; 45
    5998:	20 32       	cpi	r18, 0x20	; 32
    599a:	31 05       	cpc	r19, r1
    599c:	41 05       	cpc	r20, r1
    599e:	51 05       	cpc	r21, r1
    59a0:	28 f0       	brcs	.+10     	; 0x59ac <SPI0_Speed+0x6e>
    59a2:	81 60       	ori	r24, 0x01	; 1
    59a4:	8d bd       	out	0x2d, r24	; 45
    59a6:	8c b5       	in	r24, 0x2c	; 44
    59a8:	82 60       	ori	r24, 0x02	; 2
    59aa:	1f c0       	rjmp	.+62     	; 0x59ea <SPI0_Speed+0xac>
    59ac:	20 31       	cpi	r18, 0x10	; 16
    59ae:	31 05       	cpc	r19, r1
    59b0:	41 05       	cpc	r20, r1
    59b2:	51 05       	cpc	r21, r1
    59b4:	10 f0       	brcs	.+4      	; 0x59ba <SPI0_Speed+0x7c>
    59b6:	8e 7f       	andi	r24, 0xFE	; 254
    59b8:	06 c0       	rjmp	.+12     	; 0x59c6 <SPI0_Speed+0x88>
    59ba:	28 30       	cpi	r18, 0x08	; 8
    59bc:	31 05       	cpc	r19, r1
    59be:	41 05       	cpc	r20, r1
    59c0:	51 05       	cpc	r21, r1
    59c2:	40 f0       	brcs	.+16     	; 0x59d4 <SPI0_Speed+0x96>
    59c4:	81 60       	ori	r24, 0x01	; 1
    59c6:	8d bd       	out	0x2d, r24	; 45
    59c8:	8c b5       	in	r24, 0x2c	; 44
    59ca:	8d 7f       	andi	r24, 0xFD	; 253
    59cc:	8c bd       	out	0x2c, r24	; 44
    59ce:	8c b5       	in	r24, 0x2c	; 44
    59d0:	81 60       	ori	r24, 0x01	; 1
    59d2:	0e c0       	rjmp	.+28     	; 0x59f0 <SPI0_Speed+0xb2>
    59d4:	24 30       	cpi	r18, 0x04	; 4
    59d6:	31 05       	cpc	r19, r1
    59d8:	41 05       	cpc	r20, r1
    59da:	51 05       	cpc	r21, r1
    59dc:	10 f0       	brcs	.+4      	; 0x59e2 <SPI0_Speed+0xa4>
    59de:	8e 7f       	andi	r24, 0xFE	; 254
    59e0:	01 c0       	rjmp	.+2      	; 0x59e4 <SPI0_Speed+0xa6>
    59e2:	81 60       	ori	r24, 0x01	; 1
    59e4:	8d bd       	out	0x2d, r24	; 45
    59e6:	8c b5       	in	r24, 0x2c	; 44
    59e8:	8d 7f       	andi	r24, 0xFD	; 253
    59ea:	8c bd       	out	0x2c, r24	; 44
    59ec:	8c b5       	in	r24, 0x2c	; 44
    59ee:	8e 7f       	andi	r24, 0xFE	; 254
    59f0:	8c bd       	out	0x2c, r24	; 44
    59f2:	c0 92 6e 17 	sts	0x176E, r12	; 0x80176e <SPI0_Speed_value>
    59f6:	d0 92 6f 17 	sts	0x176F, r13	; 0x80176f <SPI0_Speed_value+0x1>
    59fa:	e0 92 70 17 	sts	0x1770, r14	; 0x801770 <SPI0_Speed_value+0x2>
    59fe:	f0 92 71 17 	sts	0x1771, r15	; 0x801771 <SPI0_Speed_value+0x3>
    5a02:	ff 90       	pop	r15
    5a04:	ef 90       	pop	r14
    5a06:	df 90       	pop	r13
    5a08:	cf 90       	pop	r12
    5a0a:	08 95       	ret

00005a0c <SPI0_Mode>:
    5a0c:	cf 93       	push	r28
    5a0e:	df 93       	push	r29
    5a10:	ec 01       	movw	r28, r24
    5a12:	81 30       	cpi	r24, 0x01	; 1
    5a14:	91 05       	cpc	r25, r1
    5a16:	71 f0       	breq	.+28     	; 0x5a34 <SPI0_Mode+0x28>
    5a18:	2c f4       	brge	.+10     	; 0x5a24 <SPI0_Mode+0x18>
    5a1a:	89 2b       	or	r24, r25
    5a1c:	c1 f4       	brne	.+48     	; 0x5a4e <SPI0_Mode+0x42>
    5a1e:	8c b5       	in	r24, 0x2c	; 44
    5a20:	87 7f       	andi	r24, 0xF7	; 247
    5a22:	11 c0       	rjmp	.+34     	; 0x5a46 <SPI0_Mode+0x3a>
    5a24:	82 30       	cpi	r24, 0x02	; 2
    5a26:	91 05       	cpc	r25, r1
    5a28:	61 f0       	breq	.+24     	; 0x5a42 <SPI0_Mode+0x36>
    5a2a:	03 97       	sbiw	r24, 0x03	; 3
    5a2c:	81 f4       	brne	.+32     	; 0x5a4e <SPI0_Mode+0x42>
    5a2e:	8c b5       	in	r24, 0x2c	; 44
    5a30:	88 60       	ori	r24, 0x08	; 8
    5a32:	02 c0       	rjmp	.+4      	; 0x5a38 <SPI0_Mode+0x2c>
    5a34:	8c b5       	in	r24, 0x2c	; 44
    5a36:	87 7f       	andi	r24, 0xF7	; 247
    5a38:	8c bd       	out	0x2c, r24	; 44
    5a3a:	8c b5       	in	r24, 0x2c	; 44
    5a3c:	84 60       	ori	r24, 0x04	; 4
    5a3e:	8c bd       	out	0x2c, r24	; 44
    5a40:	14 c0       	rjmp	.+40     	; 0x5a6a <SPI0_Mode+0x5e>
    5a42:	8c b5       	in	r24, 0x2c	; 44
    5a44:	88 60       	ori	r24, 0x08	; 8
    5a46:	8c bd       	out	0x2c, r24	; 44
    5a48:	8c b5       	in	r24, 0x2c	; 44
    5a4a:	8b 7f       	andi	r24, 0xFB	; 251
    5a4c:	f8 cf       	rjmp	.-16     	; 0x5a3e <SPI0_Mode+0x32>
    5a4e:	df 93       	push	r29
    5a50:	cf 93       	push	r28
    5a52:	8a e2       	ldi	r24, 0x2A	; 42
    5a54:	94 e0       	ldi	r25, 0x04	; 4
    5a56:	1f 92       	push	r1
    5a58:	9f 93       	push	r25
    5a5a:	8f 93       	push	r24
    5a5c:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    5a60:	0f 90       	pop	r0
    5a62:	0f 90       	pop	r0
    5a64:	0f 90       	pop	r0
    5a66:	0f 90       	pop	r0
    5a68:	0f 90       	pop	r0
    5a6a:	d0 93 6d 17 	sts	0x176D, r29	; 0x80176d <__data_end+0x1>
    5a6e:	c0 93 6c 17 	sts	0x176C, r28	; 0x80176c <__data_end>
    5a72:	df 91       	pop	r29
    5a74:	cf 91       	pop	r28
    5a76:	08 95       	ret

00005a78 <SPI0_TXRX_Byte>:
/// @param[in] Data: Data to send.
///
/// @return  Data received.
uint8_t SPI0_TXRX_Byte(uint8_t Data)
{
    SPDR = Data;                                  // Transmit
    5a78:	8e bd       	out	0x2e, r24	; 46

    while( !BIT_TST(SPSR,SPIF) )                  // Wait for send
    5a7a:	0d b4       	in	r0, 0x2d	; 45
    5a7c:	07 fe       	sbrs	r0, 7
    5a7e:	fd cf       	rjmp	.-6      	; 0x5a7a <SPI0_TXRX_Byte+0x2>
        ;

    return (SPDR);                                // Received Data
    5a80:	8e b5       	in	r24, 0x2e	; 46
}
    5a82:	08 95       	ret

00005a84 <SPI0_Init>:

///@brief Initialize SPI0 device.
///
/// - Set default speed, IO pins and mode.
void SPI0_Init(uint32_t speed)
{
    5a84:	cf 92       	push	r12
    5a86:	df 92       	push	r13
    5a88:	ef 92       	push	r14
    5a8a:	ff 92       	push	r15
    5a8c:	6b 01       	movw	r12, r22
    5a8e:	7c 01       	movw	r14, r24

    GPIO_PIN_HI(SS);                                    // SS Output HI
    5a90:	2c 9a       	sbi	0x05, 4	; 5
    5a92:	24 9a       	sbi	0x04, 4	; 4

    delayus(10);
    5a94:	6a e0       	ldi	r22, 0x0A	; 10
    5a96:	70 e0       	ldi	r23, 0x00	; 0
    5a98:	80 e0       	ldi	r24, 0x00	; 0
    5a9a:	90 e0       	ldi	r25, 0x00	; 0
    5a9c:	2b dd       	rcall	.-1450   	; 0x54f4 <delayus>

    GPIO_PIN_HI(SCK);                                   // SCK Output
    5a9e:	2f 9a       	sbi	0x05, 7	; 5
    5aa0:	27 9a       	sbi	0x04, 7	; 4
    GPIO_PIN_HI(MOSI);                                  // MOSI Output
    5aa2:	2d 9a       	sbi	0x05, 5	; 5
    5aa4:	25 9a       	sbi	0x04, 5	; 4
    GPIO_PIN_FLOAT(MISO);                               // MISO Input, no pull-up
    5aa6:	26 98       	cbi	0x04, 6	; 4

    BIT_SET(SPCR, SPE);                           // Enable SPI
    5aa8:	8c b5       	in	r24, 0x2c	; 44
    5aaa:	80 64       	ori	r24, 0x40	; 64
    5aac:	8c bd       	out	0x2c, r24	; 44
    BIT_SET(SPCR, MSTR);                          // Master Mode
    5aae:	8c b5       	in	r24, 0x2c	; 44
    5ab0:	80 61       	ori	r24, 0x10	; 16
    5ab2:	8c bd       	out	0x2c, r24	; 44

    SPI0_Mode(0);
    5ab4:	80 e0       	ldi	r24, 0x00	; 0
    5ab6:	90 e0       	ldi	r25, 0x00	; 0
    SPI0_Speed(speed);
    5ab8:	a9 df       	rcall	.-174    	; 0x5a0c <SPI0_Mode>
    5aba:	c7 01       	movw	r24, r14
    SPI0_TXRX_Byte(0xff);
    5abc:	b6 01       	movw	r22, r12
    5abe:	3f df       	rcall	.-386    	; 0x593e <SPI0_Speed>
    5ac0:	8f ef       	ldi	r24, 0xFF	; 255
	SPI0_Init_state = 1;
}
    5ac2:	da df       	rcall	.-76     	; 0x5a78 <SPI0_TXRX_Byte>
    5ac4:	ff 90       	pop	r15
    5ac6:	ef 90       	pop	r14
    5ac8:	df 90       	pop	r13
    5aca:	cf 90       	pop	r12
    5acc:	08 95       	ret

00005ace <SPI0_TX>:
/// @brief HSPI write using FIFO
/// @param[in] *data: transmit buffer
/// @param[in] count: number of bytes to write
/// @return  void
void SPI0_TX(uint8_t *data, int count)
{
    5ace:	0f 93       	push	r16
    5ad0:	1f 93       	push	r17
    5ad2:	cf 93       	push	r28
    5ad4:	df 93       	push	r29
    5ad6:	8c 01       	movw	r16, r24
    5ad8:	eb 01       	movw	r28, r22

    while(count > 0)
    5ada:	1c 16       	cp	r1, r28
    5adc:	1d 06       	cpc	r1, r29
    5ade:	34 f4       	brge	.+12     	; 0x5aec <SPI0_TX+0x1e>
    {
		SPI0_TXRX_Byte(*data);
    5ae0:	f8 01       	movw	r30, r16
    5ae2:	81 91       	ld	r24, Z+
    5ae4:	8f 01       	movw	r16, r30
    5ae6:	c8 df       	rcall	.-112    	; 0x5a78 <SPI0_TXRX_Byte>
		++data;
		--count;
    5ae8:	21 97       	sbiw	r28, 0x01	; 1
    5aea:	f7 cf       	rjmp	.-18     	; 0x5ada <SPI0_TX+0xc>
	}
}
    5aec:	df 91       	pop	r29
    5aee:	cf 91       	pop	r28
    5af0:	1f 91       	pop	r17
    5af2:	0f 91       	pop	r16
    5af4:	08 95       	ret

00005af6 <SPI0_TXRX>:
/// @param[in] *data: transmit / receive buffer
/// @param[in] count: number of bytes to write / read
/// @return  void

void SPI0_TXRX(uint8_t *data, int count)
{
    5af6:	0f 93       	push	r16
    5af8:	1f 93       	push	r17
    5afa:	cf 93       	push	r28
    5afc:	df 93       	push	r29
    5afe:	8c 01       	movw	r16, r24
    5b00:	eb 01       	movw	r28, r22

    while(count > 0)
    5b02:	1c 16       	cp	r1, r28
    5b04:	1d 06       	cpc	r1, r29
    5b06:	44 f4       	brge	.+16     	; 0x5b18 <SPI0_TXRX+0x22>
    {
		*data = SPI0_TXRX_Byte(*data);
    5b08:	f8 01       	movw	r30, r16
    5b0a:	80 81       	ld	r24, Z
    5b0c:	b5 df       	rcall	.-150    	; 0x5a78 <SPI0_TXRX_Byte>
    5b0e:	f8 01       	movw	r30, r16
    5b10:	81 93       	st	Z+, r24
    5b12:	8f 01       	movw	r16, r30
		++data;
		--count;
    5b14:	21 97       	sbiw	r28, 0x01	; 1
    5b16:	f5 cf       	rjmp	.-22     	; 0x5b02 <SPI0_TXRX+0xc>
	}
}
    5b18:	df 91       	pop	r29
    5b1a:	cf 91       	pop	r28
    5b1c:	1f 91       	pop	r17
    5b1e:	0f 91       	pop	r16
    5b20:	08 95       	ret

00005b22 <SPI0_RX>:
/// @brief HSPI read using FIFO
/// @param[in] *data: receive buffer
/// @param[in] count: number of bytes to read
/// @return  void
void SPI0_RX(uint8_t *data, int count)
{
    5b22:	0f 93       	push	r16
    5b24:	1f 93       	push	r17
    5b26:	cf 93       	push	r28
    5b28:	df 93       	push	r29
    5b2a:	8c 01       	movw	r16, r24
    5b2c:	eb 01       	movw	r28, r22

    while(count > 0)
    5b2e:	1c 16       	cp	r1, r28
    5b30:	1d 06       	cpc	r1, r29
    5b32:	3c f4       	brge	.+14     	; 0x5b42 <SPI0_RX+0x20>
    {
		*data = SPI0_TXRX_Byte(0xff);
    5b34:	8f ef       	ldi	r24, 0xFF	; 255
    5b36:	a0 df       	rcall	.-192    	; 0x5a78 <SPI0_TXRX_Byte>
    5b38:	f8 01       	movw	r30, r16
    5b3a:	81 93       	st	Z+, r24
    5b3c:	8f 01       	movw	r16, r30
		++data;
		--count;
    5b3e:	21 97       	sbiw	r28, 0x01	; 1
    5b40:	f6 cf       	rjmp	.-20     	; 0x5b2e <SPI0_RX+0xc>
	}
}
    5b42:	df 91       	pop	r29
    5b44:	cf 91       	pop	r28
    5b46:	1f 91       	pop	r17
    5b48:	0f 91       	pop	r16
    5b4a:	08 95       	ret

00005b4c <TWI_Init>:
///
///@return void.
void TWI_Init(const uint8_t Prescale, const uint8_t BitLength)
{

    GPIO_PIN_LATCH_HI(SCL);                   // Pull Up on
    5b4c:	40 9a       	sbi	0x08, 0	; 8
    GPIO_PIN_LATCH_HI(SDA);                   // Pull Up on
    5b4e:	41 9a       	sbi	0x08, 1	; 8

    BIT_SET(TWCR,TWEN);
    5b50:	ec eb       	ldi	r30, 0xBC	; 188
    5b52:	f0 e0       	ldi	r31, 0x00	; 0
    5b54:	90 81       	ld	r25, Z
    5b56:	94 60       	ori	r25, 0x04	; 4
    5b58:	90 83       	st	Z, r25

    TWSR  = Prescale;
    5b5a:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    TWBR  = BitLength;
    5b5e:	60 93 b8 00 	sts	0x00B8, r22	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    5b62:	08 95       	ret

00005b64 <TWI_StopTransmission>:


/** @brief Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
inline void TWI_StopTransmission(void)
{
    TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    5b64:	84 e9       	ldi	r24, 0x94	; 148
    5b66:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5b6a:	08 95       	ret

00005b6c <TWI_StartTransmission>:
    for (;;)
    {
        bool     BusCaptured = false;
        uint16_t TimeoutRemaining;

        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    5b6c:	94 ea       	ldi	r25, 0xA4	; 164
    5b6e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5b72:	24 e6       	ldi	r18, 0x64	; 100
    5b74:	62 9f       	mul	r22, r18
    5b76:	b0 01       	movw	r22, r0
    5b78:	11 24       	eor	r1, r1
    5b7a:	61 50       	subi	r22, 0x01	; 1
    5b7c:	71 09       	sbc	r23, r1

        TimeoutRemaining = (TimeoutMS * 100);
        while (TimeoutRemaining-- && !(BusCaptured))
    5b7e:	9b 01       	movw	r18, r22
///@return TWI error value on fail.
uint8_t TWI_StartTransmission(const uint8_t SlaveAddress, const uint8_t TimeoutMS)
{
    for (;;)
    {
        bool     BusCaptured = false;
    5b80:	40 e0       	ldi	r20, 0x00	; 0
    5b82:	50 e0       	ldi	r21, 0x00	; 0
                    case TW_START:
                    case TW_REP_START:
                        BusCaptured = true;
                        break;
                    case TW_MT_ARB_LOST:
                        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    5b84:	e4 ea       	ldi	r30, 0xA4	; 164
        uint16_t TimeoutRemaining;

        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));

        TimeoutRemaining = (TimeoutMS * 100);
        while (TimeoutRemaining-- && !(BusCaptured))
    5b86:	2f 3f       	cpi	r18, 0xFF	; 255
    5b88:	9f ef       	ldi	r25, 0xFF	; 255
    5b8a:	39 07       	cpc	r19, r25
    5b8c:	41 f1       	breq	.+80     	; 0x5bde <TWI_StartTransmission+0x72>
    5b8e:	41 15       	cp	r20, r1
    5b90:	51 05       	cpc	r21, r1
    5b92:	f1 f4       	brne	.+60     	; 0x5bd0 <TWI_StartTransmission+0x64>
        {
            if (TWCR & (1 << TWINT))
    5b94:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5b98:	97 ff       	sbrs	r25, 7
    5b9a:	13 c0       	rjmp	.+38     	; 0x5bc2 <TWI_StartTransmission+0x56>
            {
                switch (TWSR & TW_STATUS_MASK)
    5b9c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5ba0:	98 7f       	andi	r25, 0xF8	; 248
    5ba2:	90 31       	cpi	r25, 0x10	; 16
    5ba4:	61 f0       	breq	.+24     	; 0x5bbe <TWI_StartTransmission+0x52>
    5ba6:	98 33       	cpi	r25, 0x38	; 56
    5ba8:	39 f0       	breq	.+14     	; 0x5bb8 <TWI_StartTransmission+0x4c>
    5baa:	98 30       	cpi	r25, 0x08	; 8
    5bac:	41 f0       	breq	.+16     	; 0x5bbe <TWI_StartTransmission+0x52>
                        break;
                    case TW_MT_ARB_LOST:
                        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
                        continue;
                    default:
                        TWCR = (1 << TWEN);
    5bae:	84 e0       	ldi	r24, 0x04	; 4
    5bb0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
                        return TWI_ERROR_BusFault;
    5bb4:	81 e0       	ldi	r24, 0x01	; 1
    5bb6:	08 95       	ret
                    case TW_START:
                    case TW_REP_START:
                        BusCaptured = true;
                        break;
                    case TW_MT_ARB_LOST:
                        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    5bb8:	e0 93 bc 00 	sts	0x00BC, r30	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
                        continue;
    5bbc:	06 c0       	rjmp	.+12     	; 0x5bca <TWI_StartTransmission+0x5e>
            {
                switch (TWSR & TW_STATUS_MASK)
                {
                    case TW_START:
                    case TW_REP_START:
                        BusCaptured = true;
    5bbe:	41 e0       	ldi	r20, 0x01	; 1
    5bc0:	50 e0       	ldi	r21, 0x00	; 0
    5bc2:	92 e4       	ldi	r25, 0x42	; 66
    5bc4:	9a 95       	dec	r25
    5bc6:	f1 f7       	brne	.-4      	; 0x5bc4 <TWI_StartTransmission+0x58>
    5bc8:	00 c0       	rjmp	.+0      	; 0x5bca <TWI_StartTransmission+0x5e>
    5bca:	21 50       	subi	r18, 0x01	; 1
    5bcc:	31 09       	sbc	r19, r1
    5bce:	db cf       	rjmp	.-74     	; 0x5b86 <TWI_StartTransmission+0x1a>
            }

            _delay_us(10);
        }

        if (!(TimeoutRemaining))
    5bd0:	23 2b       	or	r18, r19
    5bd2:	29 f4       	brne	.+10     	; 0x5bde <TWI_StartTransmission+0x72>
        {
            TWCR = (1 << TWEN);
    5bd4:	84 e0       	ldi	r24, 0x04	; 4
    5bd6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
            return TWI_ERROR_BusCaptureTimeout;
    5bda:	82 e0       	ldi	r24, 0x02	; 2
    5bdc:	08 95       	ret
        }

        TWDR = SlaveAddress;
    5bde:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
        TWCR = ((1 << TWINT) | (1 << TWEN));
    5be2:	84 e8       	ldi	r24, 0x84	; 132
    5be4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

        TimeoutRemaining = (TimeoutMS * 100);
        while (TimeoutRemaining--)
    5be8:	6f 3f       	cpi	r22, 0xFF	; 255
    5bea:	8f ef       	ldi	r24, 0xFF	; 255
    5bec:	78 07       	cpc	r23, r24
    5bee:	71 f0       	breq	.+28     	; 0x5c0c <TWI_StartTransmission+0xa0>
        {
            if (TWCR & (1 << TWINT))
    5bf0:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5bf4:	cb 01       	movw	r24, r22
    5bf6:	01 97       	sbiw	r24, 0x01	; 1
    5bf8:	27 fd       	sbrc	r18, 7
    5bfa:	06 c0       	rjmp	.+12     	; 0x5c08 <TWI_StartTransmission+0x9c>
    5bfc:	22 e4       	ldi	r18, 0x42	; 66
    5bfe:	2a 95       	dec	r18
    5c00:	f1 f7       	brne	.-4      	; 0x5bfe <TWI_StartTransmission+0x92>
    5c02:	00 c0       	rjmp	.+0      	; 0x5c04 <TWI_StartTransmission+0x98>
    5c04:	bc 01       	movw	r22, r24
    5c06:	f0 cf       	rjmp	.-32     	; 0x5be8 <TWI_StartTransmission+0x7c>
                break;

            _delay_us(10);
        }

        if (!(TimeoutRemaining))
    5c08:	67 2b       	or	r22, r23
    5c0a:	61 f0       	breq	.+24     	; 0x5c24 <TWI_StartTransmission+0xb8>
            return TWI_ERROR_SlaveResponseTimeout;

        switch (TWSR & TW_STATUS_MASK)
    5c0c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5c10:	88 7f       	andi	r24, 0xF8	; 248
    5c12:	88 31       	cpi	r24, 0x18	; 24
    5c14:	49 f0       	breq	.+18     	; 0x5c28 <TWI_StartTransmission+0xbc>
    5c16:	80 34       	cpi	r24, 0x40	; 64
    5c18:	39 f0       	breq	.+14     	; 0x5c28 <TWI_StartTransmission+0xbc>
        {
            case TW_MT_SLA_ACK:
            case TW_MR_SLA_ACK:
                return TWI_ERROR_NoError;
            default:
                TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    5c1a:	84 e9       	ldi	r24, 0x94	; 148
    5c1c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
                return TWI_ERROR_SlaveNotReady;
    5c20:	84 e0       	ldi	r24, 0x04	; 4
    5c22:	08 95       	ret

            _delay_us(10);
        }

        if (!(TimeoutRemaining))
            return TWI_ERROR_SlaveResponseTimeout;
    5c24:	83 e0       	ldi	r24, 0x03	; 3
    5c26:	08 95       	ret

        switch (TWSR & TW_STATUS_MASK)
        {
            case TW_MT_SLA_ACK:
            case TW_MR_SLA_ACK:
                return TWI_ERROR_NoError;
    5c28:	80 e0       	ldi	r24, 0x00	; 0
            default:
                TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
                return TWI_ERROR_SlaveNotReady;
        }
    }
}
    5c2a:	08 95       	ret

00005c2c <TWI_SendByte>:
///
///@return 1 if Acknowledge.
///@return 0 on fail.
bool TWI_SendByte(const uint8_t Byte)
{
    TWDR = Byte;
    5c2c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    TWCR = ((1 << TWINT) | (1 << TWEN));
    5c30:	84 e8       	ldi	r24, 0x84	; 132
    5c32:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while (!(TWCR & (1 << TWINT)));
    5c36:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5c3a:	87 ff       	sbrs	r24, 7
    5c3c:	fc cf       	rjmp	.-8      	; 0x5c36 <TWI_SendByte+0xa>

    return ((TWSR & TW_STATUS_MASK) == TW_MT_DATA_ACK);
    5c3e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5c42:	98 7f       	andi	r25, 0xF8	; 248
    5c44:	21 e0       	ldi	r18, 0x01	; 1
    5c46:	30 e0       	ldi	r19, 0x00	; 0
    5c48:	98 32       	cpi	r25, 0x28	; 40
    5c4a:	11 f0       	breq	.+4      	; 0x5c50 <TWI_SendByte+0x24>
    5c4c:	20 e0       	ldi	r18, 0x00	; 0
    5c4e:	30 e0       	ldi	r19, 0x00	; 0
}
    5c50:	c9 01       	movw	r24, r18
    5c52:	08 95       	ret

00005c54 <TWI_ReceiveByte>:


bool TWI_ReceiveByte(uint8_t* const Byte,
const bool LastByte)
{
    5c54:	fc 01       	movw	r30, r24
    uint8_t TWCRMask;

    if (LastByte)
    5c56:	61 15       	cp	r22, r1
    5c58:	71 05       	cpc	r23, r1
    5c5a:	11 f4       	brne	.+4      	; 0x5c60 <TWI_ReceiveByte+0xc>
        TWCRMask = ((1 << TWINT) | (1 << TWEN));
    else
        TWCRMask = ((1 << TWINT) | (1 << TWEN) | (1 << TWEA));
    5c5c:	94 ec       	ldi	r25, 0xC4	; 196
    5c5e:	01 c0       	rjmp	.+2      	; 0x5c62 <TWI_ReceiveByte+0xe>
const bool LastByte)
{
    uint8_t TWCRMask;

    if (LastByte)
        TWCRMask = ((1 << TWINT) | (1 << TWEN));
    5c60:	94 e8       	ldi	r25, 0x84	; 132
    else
        TWCRMask = ((1 << TWINT) | (1 << TWEN) | (1 << TWEA));

    TWCR = TWCRMask;
    5c62:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while (!BIT_TST(TWCR, TWINT))
    5c66:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5c6a:	87 ff       	sbrs	r24, 7
    5c6c:	fc cf       	rjmp	.-8      	; 0x5c66 <TWI_ReceiveByte+0x12>
        ;
    *Byte = TWDR;
    5c6e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5c72:	80 83       	st	Z, r24

    uint8_t Status = (TWSR & TW_STATUS_MASK);
    5c74:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5c78:	28 7f       	andi	r18, 0xF8	; 248

    return ((LastByte) ? (Status == TW_MR_DATA_NACK) : (Status == TW_MR_DATA_ACK));
    5c7a:	81 e0       	ldi	r24, 0x01	; 1
    5c7c:	90 e0       	ldi	r25, 0x00	; 0
    5c7e:	67 2b       	or	r22, r23
    5c80:	19 f0       	breq	.+6      	; 0x5c88 <TWI_ReceiveByte+0x34>
    5c82:	28 35       	cpi	r18, 0x58	; 88
    5c84:	19 f4       	brne	.+6      	; 0x5c8c <TWI_ReceiveByte+0x38>
    5c86:	03 c0       	rjmp	.+6      	; 0x5c8e <TWI_ReceiveByte+0x3a>
    5c88:	20 35       	cpi	r18, 0x50	; 80
    5c8a:	09 f0       	breq	.+2      	; 0x5c8e <TWI_ReceiveByte+0x3a>
    5c8c:	80 e0       	ldi	r24, 0x00	; 0
}
    5c8e:	08 95       	ret

00005c90 <TWI_ReadPacket>:
const uint8_t TimeoutMS,
const uint8_t* InternalAddress,
uint8_t InternalAddressLen,
uint8_t* Buffer,
uint8_t Length)
{
    5c90:	a0 e0       	ldi	r26, 0x00	; 0
    5c92:	b0 e0       	ldi	r27, 0x00	; 0
    5c94:	ee e4       	ldi	r30, 0x4E	; 78
    5c96:	fe e2       	ldi	r31, 0x2E	; 46
    5c98:	0c 94 1a e8 	jmp	0x1d034	; 0x1d034 <__prologue_saves__+0xe>
    5c9c:	f8 2e       	mov	r15, r24
    5c9e:	b6 2e       	mov	r11, r22
    5ca0:	94 2e       	mov	r9, r20
    5ca2:	a5 2e       	mov	r10, r21
    5ca4:	c2 2f       	mov	r28, r18
    uint8_t ErrorCode;

    if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_WRITE,
    5ca6:	8e 7f       	andi	r24, 0xFE	; 254
    5ca8:	61 df       	rcall	.-318    	; 0x5b6c <TWI_StartTransmission>
    5caa:	d8 2f       	mov	r29, r24
    5cac:	81 11       	cpse	r24, r1
    5cae:	2b c0       	rjmp	.+86     	; 0x5d06 <TWI_ReadPacket+0x76>
    5cb0:	c9 2c       	mov	r12, r9
    5cb2:	da 2c       	mov	r13, r10
        TimeoutMS)) == TWI_ERROR_NoError)
    {
        while (InternalAddressLen--)
    5cb4:	cc 23       	and	r28, r28
    5cb6:	39 f0       	breq	.+14     	; 0x5cc6 <TWI_ReadPacket+0x36>
        {
            if (!(TWI_SendByte(*(InternalAddress++))))
    5cb8:	f6 01       	movw	r30, r12
    5cba:	81 91       	ld	r24, Z+
    5cbc:	6f 01       	movw	r12, r30
    5cbe:	b6 df       	rcall	.-148    	; 0x5c2c <TWI_SendByte>
    5cc0:	c1 50       	subi	r28, 0x01	; 1
    5cc2:	89 2b       	or	r24, r25
    5cc4:	b9 f7       	brne	.-18     	; 0x5cb4 <TWI_ReadPacket+0x24>
                ErrorCode = TWI_ERROR_SlaveNAK;
                break;
            }
        }

        if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_READ,
    5cc6:	6b 2d       	mov	r22, r11
    5cc8:	8f 2d       	mov	r24, r15
    5cca:	81 60       	ori	r24, 0x01	; 1
    5ccc:	4f df       	rcall	.-354    	; 0x5b6c <TWI_StartTransmission>
    5cce:	d8 2f       	mov	r29, r24
    5cd0:	81 11       	cpse	r24, r1
    5cd2:	19 c0       	rjmp	.+50     	; 0x5d06 <TWI_ReadPacket+0x76>
    5cd4:	cf ef       	ldi	r28, 0xFF	; 255
    5cd6:	ce 0d       	add	r28, r14
            TimeoutMS)) == TWI_ERROR_NoError)
        {
            while (Length--)
    5cd8:	cf 3f       	cpi	r28, 0xFF	; 255
    5cda:	91 f0       	breq	.+36     	; 0x5d00 <TWI_ReadPacket+0x70>
            {
                if (!(TWI_ReceiveByte(Buffer++, (Length == 0))))
    5cdc:	78 01       	movw	r14, r16
    5cde:	ff ef       	ldi	r31, 0xFF	; 255
    5ce0:	ef 1a       	sub	r14, r31
    5ce2:	ff 0a       	sbc	r15, r31
    5ce4:	61 e0       	ldi	r22, 0x01	; 1
    5ce6:	70 e0       	ldi	r23, 0x00	; 0
    5ce8:	cc 23       	and	r28, r28
    5cea:	11 f0       	breq	.+4      	; 0x5cf0 <TWI_ReadPacket+0x60>
    5cec:	60 e0       	ldi	r22, 0x00	; 0
    5cee:	70 e0       	ldi	r23, 0x00	; 0
    5cf0:	c8 01       	movw	r24, r16
    5cf2:	b0 df       	rcall	.-160    	; 0x5c54 <TWI_ReceiveByte>
    5cf4:	c1 50       	subi	r28, 0x01	; 1
    5cf6:	89 2b       	or	r24, r25
    5cf8:	11 f0       	breq	.+4      	; 0x5cfe <TWI_ReadPacket+0x6e>
    5cfa:	87 01       	movw	r16, r14
    5cfc:	ed cf       	rjmp	.-38     	; 0x5cd8 <TWI_ReadPacket+0x48>
                {
                    ErrorCode = TWI_ERROR_SlaveNAK;
    5cfe:	d5 e0       	ldi	r29, 0x05	; 5


/** @brief Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
inline void TWI_StopTransmission(void)
{
    TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    5d00:	84 e9       	ldi	r24, 0x94	; 148
    5d02:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
            TWI_StopTransmission();
        }
    }

    return ErrorCode;
}
    5d06:	8d 2f       	mov	r24, r29
    5d08:	cd b7       	in	r28, 0x3d	; 61
    5d0a:	de b7       	in	r29, 0x3e	; 62
    5d0c:	eb e0       	ldi	r30, 0x0B	; 11
    5d0e:	0c 94 36 e8 	jmp	0x1d06c	; 0x1d06c <__epilogue_restores__+0xe>

00005d12 <TWI_WritePacket>:
const uint8_t TimeoutMS,
const uint8_t* InternalAddress,
uint8_t InternalAddressLen,
const uint8_t* Buffer,
uint8_t Length)
{
    5d12:	a0 e0       	ldi	r26, 0x00	; 0
    5d14:	b0 e0       	ldi	r27, 0x00	; 0
    5d16:	ef e8       	ldi	r30, 0x8F	; 143
    5d18:	fe e2       	ldi	r31, 0x2E	; 46
    5d1a:	0c 94 1c e8 	jmp	0x1d038	; 0x1d038 <__prologue_saves__+0x12>
    5d1e:	b4 2e       	mov	r11, r20
    5d20:	f5 2e       	mov	r15, r21
    5d22:	c2 2f       	mov	r28, r18
    uint8_t ErrorCode;

    if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_WRITE,
    5d24:	8e 7f       	andi	r24, 0xFE	; 254
    5d26:	22 df       	rcall	.-444    	; 0x5b6c <TWI_StartTransmission>
    5d28:	d8 2f       	mov	r29, r24
    5d2a:	81 11       	cpse	r24, r1
    5d2c:	1a c0       	rjmp	.+52     	; 0x5d62 <TWI_WritePacket+0x50>
    5d2e:	cb 2c       	mov	r12, r11
    5d30:	df 2c       	mov	r13, r15
        TimeoutMS)) == TWI_ERROR_NoError)
    {
        while (InternalAddressLen--)
    5d32:	cc 23       	and	r28, r28
    5d34:	41 f0       	breq	.+16     	; 0x5d46 <TWI_WritePacket+0x34>
        {
            if (!(TWI_SendByte(*(InternalAddress++))))
    5d36:	f6 01       	movw	r30, r12
    5d38:	81 91       	ld	r24, Z+
    5d3a:	6f 01       	movw	r12, r30
    5d3c:	77 df       	rcall	.-274    	; 0x5c2c <TWI_SendByte>
    5d3e:	c1 50       	subi	r28, 0x01	; 1
    5d40:	89 2b       	or	r24, r25
    5d42:	b9 f7       	brne	.-18     	; 0x5d32 <TWI_WritePacket+0x20>
            {
                ErrorCode = TWI_ERROR_SlaveNAK;
    5d44:	d5 e0       	ldi	r29, 0x05	; 5
    5d46:	68 01       	movw	r12, r16
                break;
            }
        }

        while (Length--)
    5d48:	ee 20       	and	r14, r14
    5d4a:	41 f0       	breq	.+16     	; 0x5d5c <TWI_WritePacket+0x4a>
        {
            if (!(TWI_SendByte(*(Buffer++))))
    5d4c:	f6 01       	movw	r30, r12
    5d4e:	81 91       	ld	r24, Z+
    5d50:	6f 01       	movw	r12, r30
    5d52:	6c df       	rcall	.-296    	; 0x5c2c <TWI_SendByte>
    5d54:	ea 94       	dec	r14
    5d56:	89 2b       	or	r24, r25
    5d58:	b9 f7       	brne	.-18     	; 0x5d48 <TWI_WritePacket+0x36>
            {
                ErrorCode = TWI_ERROR_SlaveNAK;
    5d5a:	d5 e0       	ldi	r29, 0x05	; 5


/** @brief Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
inline void TWI_StopTransmission(void)
{
    TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    5d5c:	84 e9       	ldi	r24, 0x94	; 148
    5d5e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

        TWI_StopTransmission();
    }

    return ErrorCode;
}
    5d62:	8d 2f       	mov	r24, r29
    5d64:	cd b7       	in	r28, 0x3d	; 61
    5d66:	de b7       	in	r29, 0x3e	; 62
    5d68:	e9 e0       	ldi	r30, 0x09	; 9
    5d6a:	0c 94 38 e8 	jmp	0x1d070	; 0x1d070 <__epilogue_restores__+0x12>

00005d6e <BINtoBCD>:
        return -1;
    }
    if(b & 8)
        return 0;
    return 1;
}
    5d6e:	6a e0       	ldi	r22, 0x0A	; 10
    5d70:	0e 94 5e e7 	call	0x1cebc	; 0x1cebc <__udivmodqi4>
    5d74:	82 95       	swap	r24
    5d76:	80 7f       	andi	r24, 0xF0	; 240
    5d78:	89 2b       	or	r24, r25
    5d7a:	08 95       	ret

00005d7c <BCDtoBIN>:
    5d7c:	98 2f       	mov	r25, r24
    5d7e:	92 95       	swap	r25
    5d80:	9f 70       	andi	r25, 0x0F	; 15
    5d82:	8f 70       	andi	r24, 0x0F	; 15
    5d84:	2a e0       	ldi	r18, 0x0A	; 10
    5d86:	92 9f       	mul	r25, r18
    5d88:	80 0d       	add	r24, r0
    5d8a:	11 24       	eor	r1, r1
    5d8c:	08 95       	ret

00005d8e <rtc_run>:
///  - -1 = check run state.
///
/// @return  run state 0/1 on success.
/// @return -1 on error.
int rtc_run(int run)
{
    5d8e:	cf 92       	push	r12
    5d90:	df 92       	push	r13
    5d92:	ef 92       	push	r14
    5d94:	0f 93       	push	r16
    5d96:	1f 93       	push	r17
    5d98:	cf 93       	push	r28
    5d9a:	df 93       	push	r29
    5d9c:	00 d0       	rcall	.+0      	; 0x5d9e <rtc_run+0x10>
    5d9e:	1f 92       	push	r1
    5da0:	cd b7       	in	r28, 0x3d	; 61
    5da2:	de b7       	in	r29, 0x3e	; 62
    5da4:	6c 01       	movw	r12, r24
    uint8_t  WriteAddress;
    uint8_t  ReadAddress;
    uint8_t b = 0;
    5da6:	19 82       	std	Y+1, r1	; 0x01

    ReadAddress = 0;
    5da8:	1a 82       	std	Y+2, r1	; 0x02
    if (TWI_ReadPacket(DS1307_R, 20, &ReadAddress, sizeof(ReadAddress),
    5daa:	ee 24       	eor	r14, r14
    5dac:	e3 94       	inc	r14
    5dae:	8e 01       	movw	r16, r28
    5db0:	0f 5f       	subi	r16, 0xFF	; 255
    5db2:	1f 4f       	sbci	r17, 0xFF	; 255
    5db4:	21 e0       	ldi	r18, 0x01	; 1
    5db6:	ae 01       	movw	r20, r28
    5db8:	4e 5f       	subi	r20, 0xFE	; 254
    5dba:	5f 4f       	sbci	r21, 0xFF	; 255
    5dbc:	64 e1       	ldi	r22, 0x14	; 20
    5dbe:	81 ed       	ldi	r24, 0xD1	; 209
    5dc0:	67 df       	rcall	.-306    	; 0x5c90 <TWI_ReadPacket>
    5dc2:	88 23       	and	r24, r24
    5dc4:	19 f0       	breq	.+6      	; 0x5dcc <rtc_run+0x3e>
        (uint8_t*)&b, 1) != TWI_ERROR_NoError)
    {
        printf("rtc_run read error\n");
    5dc6:	84 eb       	ldi	r24, 0xB4	; 180
    5dc8:	94 e0       	ldi	r25, 0x04	; 4
    5dca:	2a c0       	rjmp	.+84     	; 0x5e20 <rtc_run+0x92>
    5dcc:	89 81       	ldd	r24, Y+1	; 0x01
        return -1;
    }

    if(run == -1)
    5dce:	9f ef       	ldi	r25, 0xFF	; 255
    5dd0:	c9 16       	cp	r12, r25
    5dd2:	d9 06       	cpc	r13, r25
    5dd4:	59 f4       	brne	.+22     	; 0x5dec <rtc_run+0x5e>
        return ((b & 0x80) ? 0 : 1);
    5dd6:	08 2e       	mov	r0, r24
    5dd8:	00 0c       	add	r0, r0
    5dda:	99 0b       	sbc	r25, r25
    5ddc:	80 95       	com	r24
    5dde:	90 95       	com	r25
    5de0:	89 2f       	mov	r24, r25
    5de2:	88 1f       	adc	r24, r24
    5de4:	88 27       	eor	r24, r24
    5de6:	88 1f       	adc	r24, r24
    5de8:	90 e0       	ldi	r25, 0x00	; 0
    5dea:	26 c0       	rjmp	.+76     	; 0x5e38 <rtc_run+0xaa>

    b = ( b  & 0x7f) | (run ? 0 : 0x80);
    5dec:	8f 77       	andi	r24, 0x7F	; 127
    5dee:	c1 14       	cp	r12, r1
    5df0:	d1 04       	cpc	r13, r1
    5df2:	11 f4       	brne	.+4      	; 0x5df8 <rtc_run+0x6a>
    5df4:	90 e8       	ldi	r25, 0x80	; 128
    5df6:	01 c0       	rjmp	.+2      	; 0x5dfa <rtc_run+0x6c>
    5df8:	90 e0       	ldi	r25, 0x00	; 0
    5dfa:	89 2b       	or	r24, r25
    5dfc:	89 83       	std	Y+1, r24	; 0x01

    WriteAddress = 0;
    5dfe:	1b 82       	std	Y+3, r1	; 0x03
    if (TWI_WritePacket(DS1307_W, 20, &WriteAddress, sizeof(WriteAddress),
    5e00:	ee 24       	eor	r14, r14
    5e02:	e3 94       	inc	r14
    5e04:	8e 01       	movw	r16, r28
    5e06:	0f 5f       	subi	r16, 0xFF	; 255
    5e08:	1f 4f       	sbci	r17, 0xFF	; 255
    5e0a:	21 e0       	ldi	r18, 0x01	; 1
    5e0c:	ae 01       	movw	r20, r28
    5e0e:	4d 5f       	subi	r20, 0xFD	; 253
    5e10:	5f 4f       	sbci	r21, 0xFF	; 255
    5e12:	64 e1       	ldi	r22, 0x14	; 20
    5e14:	80 ed       	ldi	r24, 0xD0	; 208
    5e16:	7d df       	rcall	.-262    	; 0x5d12 <TWI_WritePacket>
    5e18:	88 23       	and	r24, r24
    5e1a:	69 f0       	breq	.+26     	; 0x5e36 <rtc_run+0xa8>
        (uint8_t*)&b, 1) != TWI_ERROR_NoError)
    {
        printf("rtc_run - write error\n");
    5e1c:	8d e9       	ldi	r24, 0x9D	; 157
    5e1e:	94 e0       	ldi	r25, 0x04	; 4
    5e20:	1f 92       	push	r1
    5e22:	9f 93       	push	r25
    5e24:	8f 93       	push	r24
    5e26:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
        return(-1);
    5e2a:	0f 90       	pop	r0
    5e2c:	0f 90       	pop	r0
    5e2e:	0f 90       	pop	r0
    5e30:	8f ef       	ldi	r24, 0xFF	; 255
    5e32:	9f ef       	ldi	r25, 0xFF	; 255
    5e34:	01 c0       	rjmp	.+2      	; 0x5e38 <rtc_run+0xaa>
    5e36:	c6 01       	movw	r24, r12
    }
    return(run);
}
    5e38:	0f 90       	pop	r0
    5e3a:	0f 90       	pop	r0
    5e3c:	0f 90       	pop	r0
    5e3e:	df 91       	pop	r29
    5e40:	cf 91       	pop	r28
    5e42:	1f 91       	pop	r17
    5e44:	0f 91       	pop	r16
    5e46:	ef 90       	pop	r14
    5e48:	df 90       	pop	r13
    5e4a:	cf 90       	pop	r12
    5e4c:	08 95       	ret

00005e4e <rtc_write>:
/// @param[in] t: POSIX struct tm * time to set.
///
/// @return 1 on sucess.
/// @return 0 on fail.
uint8_t rtc_write(tm_t *t)
{
    5e4e:	ef 92       	push	r14
    5e50:	0f 93       	push	r16
    5e52:	1f 93       	push	r17
    5e54:	cf 93       	push	r28
    5e56:	df 93       	push	r29
    5e58:	cd b7       	in	r28, 0x3d	; 61
    5e5a:	de b7       	in	r29, 0x3e	; 62
    5e5c:	29 97       	sbiw	r28, 0x09	; 9
    5e5e:	0f b6       	in	r0, 0x3f	; 63
    5e60:	f8 94       	cli
    5e62:	de bf       	out	0x3e, r29	; 62
    5e64:	0f be       	out	0x3f, r0	; 63
    5e66:	cd bf       	out	0x3d, r28	; 61
    5e68:	8c 01       	movw	r16, r24
    uint8_t buf[8];
    uint8_t WriteAddress;

    buf[0] =  BINtoBCD(t->tm_sec) & 0x7f;
    5e6a:	fc 01       	movw	r30, r24
    5e6c:	80 81       	ld	r24, Z
    5e6e:	7f df       	rcall	.-258    	; 0x5d6e <BINtoBCD>
    5e70:	8f 77       	andi	r24, 0x7F	; 127
    5e72:	89 83       	std	Y+1, r24	; 0x01
    buf[1] =  BINtoBCD(t->tm_min) & 0x7f;
    5e74:	f8 01       	movw	r30, r16
    5e76:	82 81       	ldd	r24, Z+2	; 0x02
    5e78:	7a df       	rcall	.-268    	; 0x5d6e <BINtoBCD>
    5e7a:	8f 77       	andi	r24, 0x7F	; 127
    buf[2] =  BINtoBCD(t->tm_hour) & 0x3f;
    5e7c:	8a 83       	std	Y+2, r24	; 0x02
    5e7e:	f8 01       	movw	r30, r16
    5e80:	84 81       	ldd	r24, Z+4	; 0x04
    5e82:	75 df       	rcall	.-278    	; 0x5d6e <BINtoBCD>
    5e84:	8f 73       	andi	r24, 0x3F	; 63
    buf[3] =  ((t->tm_wday & 7) + 1) & 0x0f;
    5e86:	8b 83       	std	Y+3, r24	; 0x03
    5e88:	f8 01       	movw	r30, r16
    5e8a:	84 85       	ldd	r24, Z+12	; 0x0c
    5e8c:	87 70       	andi	r24, 0x07	; 7
    buf[4] =  BINtoBCD(t->tm_mday ) & 0x3f;
    5e8e:	8f 5f       	subi	r24, 0xFF	; 255
    5e90:	8c 83       	std	Y+4, r24	; 0x04
    5e92:	86 81       	ldd	r24, Z+6	; 0x06
    5e94:	6c df       	rcall	.-296    	; 0x5d6e <BINtoBCD>
    buf[5] =  BINtoBCD(t->tm_mon + 1) & 0x1f;
    5e96:	8f 73       	andi	r24, 0x3F	; 63
    5e98:	8d 83       	std	Y+5, r24	; 0x05
    5e9a:	f8 01       	movw	r30, r16
    5e9c:	80 85       	ldd	r24, Z+8	; 0x08
    5e9e:	8f 5f       	subi	r24, 0xFF	; 255
    5ea0:	66 df       	rcall	.-308    	; 0x5d6e <BINtoBCD>
    buf[6] =  BINtoBCD(t->tm_year - 100) & 0xff;  // 2000 = 0
    5ea2:	8f 71       	andi	r24, 0x1F	; 31
    5ea4:	8e 83       	std	Y+6, r24	; 0x06
    5ea6:	f8 01       	movw	r30, r16
    5ea8:	82 85       	ldd	r24, Z+10	; 0x0a
    5eaa:	84 56       	subi	r24, 0x64	; 100
    5eac:	60 df       	rcall	.-320    	; 0x5d6e <BINtoBCD>
    buf[7] = 0x93;                                // 32khz, out square wave
    5eae:	8f 83       	std	Y+7, r24	; 0x07
    5eb0:	83 e9       	ldi	r24, 0x93	; 147
	for(i=0;i<7;++i)
		printf("%02x ", 0xff & buf[i]);
    printf("\n");
#endif

    WriteAddress = 0;
    5eb2:	88 87       	std	Y+8, r24	; 0x08
    if (TWI_WritePacket(DS1307_W, 20, &WriteAddress, sizeof(WriteAddress),
    5eb4:	19 86       	std	Y+9, r1	; 0x09
    5eb6:	88 e0       	ldi	r24, 0x08	; 8
    5eb8:	e8 2e       	mov	r14, r24
    5eba:	8e 01       	movw	r16, r28
    5ebc:	0f 5f       	subi	r16, 0xFF	; 255
    5ebe:	1f 4f       	sbci	r17, 0xFF	; 255
    5ec0:	21 e0       	ldi	r18, 0x01	; 1
    5ec2:	ae 01       	movw	r20, r28
    5ec4:	47 5f       	subi	r20, 0xF7	; 247
    5ec6:	5f 4f       	sbci	r21, 0xFF	; 255
    5ec8:	64 e1       	ldi	r22, 0x14	; 20
    5eca:	80 ed       	ldi	r24, 0xD0	; 208
    5ecc:	22 df       	rcall	.-444    	; 0x5d12 <TWI_WritePacket>
    5ece:	88 23       	and	r24, r24
        (uint8_t*)buf, 8) != TWI_ERROR_NoError)
    {
        printf("rtc_write error\n");
    5ed0:	61 f0       	breq	.+24     	; 0x5eea <rtc_write+0x9c>
    5ed2:	87 e5       	ldi	r24, 0x57	; 87
    5ed4:	94 e0       	ldi	r25, 0x04	; 4
    5ed6:	1f 92       	push	r1
    5ed8:	9f 93       	push	r25
    5eda:	8f 93       	push	r24
    5edc:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
        return(0);
    5ee0:	0f 90       	pop	r0
    5ee2:	0f 90       	pop	r0
    5ee4:	0f 90       	pop	r0
    5ee6:	80 e0       	ldi	r24, 0x00	; 0
    }

    return(1);
    5ee8:	01 c0       	rjmp	.+2      	; 0x5eec <rtc_write+0x9e>
}
    5eea:	81 e0       	ldi	r24, 0x01	; 1
    5eec:	29 96       	adiw	r28, 0x09	; 9
    5eee:	0f b6       	in	r0, 0x3f	; 63
    5ef0:	f8 94       	cli
    5ef2:	de bf       	out	0x3e, r29	; 62
    5ef4:	0f be       	out	0x3f, r0	; 63
    5ef6:	cd bf       	out	0x3d, r28	; 61
    5ef8:	df 91       	pop	r29
    5efa:	cf 91       	pop	r28
    5efc:	1f 91       	pop	r17
    5efe:	0f 91       	pop	r16
    5f00:	ef 90       	pop	r14
    5f02:	08 95       	ret

00005f04 <rtc_init>:
/// @param[in] seconds: POSIX EPOCH time in seconds.
///
/// @return  1 on success.
/// @return 0 on fail.
uint8_t rtc_init (int force, time_t seconds)
{
    5f04:	ad e0       	ldi	r26, 0x0D	; 13
    5f06:	b0 e0       	ldi	r27, 0x00	; 0
    5f08:	e8 e8       	ldi	r30, 0x88	; 136
    5f0a:	ff e2       	ldi	r31, 0x2F	; 47
    5f0c:	0c 94 1d e8 	jmp	0x1d03a	; 0x1d03a <__prologue_saves__+0x14>
    5f10:	6c 01       	movw	r12, r24
    5f12:	4a 87       	std	Y+10, r20	; 0x0a
    5f14:	5b 87       	std	Y+11, r21	; 0x0b
    5f16:	6c 87       	std	Y+12, r22	; 0x0c
    5f18:	7d 87       	std	Y+13, r23	; 0x0d
    uint8_t  WriteAddress;
    int8_t    state;

    tm_t *tmp;

    TWI_Init(TWI_BIT_PRESCALE_4, TWI_BITLENGTH_FROM_FREQ(4, 50000));
    5f1a:	6a e2       	ldi	r22, 0x2A	; 42
    5f1c:	81 e0       	ldi	r24, 0x01	; 1
    5f1e:	16 de       	rcall	.-980    	; 0x5b4c <TWI_Init>

    if(!force)
    5f20:	c1 14       	cp	r12, r1
    5f22:	d1 04       	cpc	r13, r1
    5f24:	09 f0       	breq	.+2      	; 0x5f28 <rtc_init+0x24>
    5f26:	42 c0       	rjmp	.+132    	; 0x5fac <rtc_init+0xa8>
    {
        state = rtc_run(-1);
    5f28:	8f ef       	ldi	r24, 0xFF	; 255
    5f2a:	9f ef       	ldi	r25, 0xFF	; 255
    5f2c:	30 df       	rcall	.-416    	; 0x5d8e <rtc_run>
        if(state < 0)
    5f2e:	87 ff       	sbrs	r24, 7
    5f30:	05 c0       	rjmp	.+10     	; 0x5f3c <rtc_init+0x38>
        {
            rtc_ok = 0;
    5f32:	10 92 01 1a 	sts	0x1A01, r1	; 0x801a01 <rtc_ok+0x1>
    5f36:	10 92 00 1a 	sts	0x1A00, r1	; 0x801a00 <rtc_ok>
    5f3a:	24 c0       	rjmp	.+72     	; 0x5f84 <rtc_init+0x80>
            return 0;
        }
        if(state == 0)                            // stopped
    5f3c:	88 23       	and	r24, r24
    5f3e:	b1 f1       	breq	.+108    	; 0x5fac <rtc_init+0xa8>
    5f40:	2d c0       	rjmp	.+90     	; 0x5f9c <rtc_init+0x98>
            printf("rtc _write epoch failed\n");
            rtc_ok = 0;
            return 0;
        }

        memset(buf, 0, 8);
    5f42:	ce 01       	movw	r24, r28
    5f44:	01 96       	adiw	r24, 0x01	; 1
    5f46:	6c 01       	movw	r12, r24
    5f48:	88 e0       	ldi	r24, 0x08	; 8
    5f4a:	f6 01       	movw	r30, r12
    5f4c:	11 92       	st	Z+, r1
    5f4e:	8a 95       	dec	r24
    5f50:	e9 f7       	brne	.-6      	; 0x5f4c <rtc_init+0x48>
        for (addr = 8; addr < 0x3f; addr += 8)
    5f52:	98 e0       	ldi	r25, 0x08	; 8
    5f54:	f9 2e       	mov	r15, r25
        {
            WriteAddress = addr;
    5f56:	f9 86       	std	Y+9, r15	; 0x09
            if (TWI_WritePacket(DS1307_W, 20, &WriteAddress, sizeof(WriteAddress),
    5f58:	88 e0       	ldi	r24, 0x08	; 8
    5f5a:	e8 2e       	mov	r14, r24
    5f5c:	86 01       	movw	r16, r12
    5f5e:	21 e0       	ldi	r18, 0x01	; 1
    5f60:	ae 01       	movw	r20, r28
    5f62:	47 5f       	subi	r20, 0xF7	; 247
    5f64:	5f 4f       	sbci	r21, 0xFF	; 255
    5f66:	64 e1       	ldi	r22, 0x14	; 20
    5f68:	80 ed       	ldi	r24, 0xD0	; 208
    5f6a:	d3 de       	rcall	.-602    	; 0x5d12 <TWI_WritePacket>
    5f6c:	88 23       	and	r24, r24
    5f6e:	61 f0       	breq	.+24     	; 0x5f88 <rtc_init+0x84>
                (uint8_t*)buf, 8) != TWI_ERROR_NoError)
            {
                printf("rtc_init ram - write error\n");
    5f70:	88 e6       	ldi	r24, 0x68	; 104
    5f72:	94 e0       	ldi	r25, 0x04	; 4
    5f74:	1f 92       	push	r1
    5f76:	9f 93       	push	r25
    5f78:	8f 93       	push	r24
    5f7a:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
                return(0);
    5f7e:	0f 90       	pop	r0
    5f80:	0f 90       	pop	r0
    5f82:	0f 90       	pop	r0
    5f84:	10 e0       	ldi	r17, 0x00	; 0
    5f86:	2d c0       	rjmp	.+90     	; 0x5fe2 <rtc_init+0xde>
            rtc_ok = 0;
            return 0;
        }

        memset(buf, 0, 8);
        for (addr = 8; addr < 0x3f; addr += 8)
    5f88:	f8 e0       	ldi	r31, 0x08	; 8
    5f8a:	ff 0e       	add	r15, r31
    5f8c:	80 e4       	ldi	r24, 0x40	; 64
    5f8e:	f8 12       	cpse	r15, r24
                printf("rtc_init ram - write error\n");
                return(0);
            }
        }

        if(rtc_run(1) < 0)                        // START RTC
    5f90:	e2 cf       	rjmp	.-60     	; 0x5f56 <rtc_init+0x52>
    5f92:	81 e0       	ldi	r24, 0x01	; 1
    5f94:	90 e0       	ldi	r25, 0x00	; 0
    5f96:	fb de       	rcall	.-522    	; 0x5d8e <rtc_run>
    5f98:	97 fd       	sbrc	r25, 7
    5f9a:	cb cf       	rjmp	.-106    	; 0x5f32 <rtc_init+0x2e>
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }
    }
    rtc_ok = 1;
    5f9c:	81 e0       	ldi	r24, 0x01	; 1
    5f9e:	90 e0       	ldi	r25, 0x00	; 0
    5fa0:	90 93 01 1a 	sts	0x1A01, r25	; 0x801a01 <rtc_ok+0x1>
    5fa4:	80 93 00 1a 	sts	0x1A00, r24	; 0x801a00 <rtc_ok>
            force = 1;
    }

    if(force)                                     // INIT
    {
        if(rtc_run(0) < 0)                        // STOP RTC
    5fa8:	11 e0       	ldi	r17, 0x01	; 1
    5faa:	1b c0       	rjmp	.+54     	; 0x5fe2 <rtc_init+0xde>
    5fac:	80 e0       	ldi	r24, 0x00	; 0
    5fae:	90 e0       	ldi	r25, 0x00	; 0
    5fb0:	ee de       	rcall	.-548    	; 0x5d8e <rtc_run>
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }
        tmp = gmtime(&seconds);
    5fb2:	97 fd       	sbrc	r25, 7
    5fb4:	be cf       	rjmp	.-132    	; 0x5f32 <rtc_init+0x2e>
    5fb6:	ce 01       	movw	r24, r28
    5fb8:	0a 96       	adiw	r24, 0x0a	; 10
        if(!rtc_write(tmp))
    5fba:	0e 94 80 38 	call	0x7100	; 0x7100 <gmtime>
    5fbe:	47 df       	rcall	.-370    	; 0x5e4e <rtc_write>
    5fc0:	18 2f       	mov	r17, r24
    5fc2:	81 11       	cpse	r24, r1
        {
            printf("rtc _write epoch failed\n");
    5fc4:	be cf       	rjmp	.-132    	; 0x5f42 <rtc_init+0x3e>
    5fc6:	84 e8       	ldi	r24, 0x84	; 132
    5fc8:	94 e0       	ldi	r25, 0x04	; 4
    5fca:	1f 92       	push	r1
    5fcc:	9f 93       	push	r25
    5fce:	8f 93       	push	r24
    5fd0:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
            rtc_ok = 0;
    5fd4:	10 92 01 1a 	sts	0x1A01, r1	; 0x801a01 <rtc_ok+0x1>
    5fd8:	10 92 00 1a 	sts	0x1A00, r1	; 0x801a00 <rtc_ok>
            return 0;
    5fdc:	0f 90       	pop	r0
    5fde:	0f 90       	pop	r0
            return 0;
        }
    }
    rtc_ok = 1;
    return 1;
}
    5fe0:	0f 90       	pop	r0
    5fe2:	81 2f       	mov	r24, r17
    5fe4:	2d 96       	adiw	r28, 0x0d	; 13
    5fe6:	e8 e0       	ldi	r30, 0x08	; 8
    5fe8:	0c 94 39 e8 	jmp	0x1d072	; 0x1d072 <__epilogue_restores__+0x14>

00005fec <rtc_read>:
///
/// @param[out] t: struct tm * POSIX time returned.
/// @return  1 on sucess.
/// @return 0 on fail.
uint8_t rtc_read(tm_t *t)
{
    5fec:	cf 92       	push	r12
    5fee:	df 92       	push	r13
    5ff0:	ef 92       	push	r14
    5ff2:	0f 93       	push	r16
    5ff4:	1f 93       	push	r17
    5ff6:	cf 93       	push	r28
    5ff8:	df 93       	push	r29
    5ffa:	cd b7       	in	r28, 0x3d	; 61
    5ffc:	de b7       	in	r29, 0x3e	; 62
    5ffe:	29 97       	sbiw	r28, 0x09	; 9
    6000:	0f b6       	in	r0, 0x3f	; 63
    6002:	f8 94       	cli
    6004:	de bf       	out	0x3e, r29	; 62
    6006:	0f be       	out	0x3f, r0	; 63
    6008:	cd bf       	out	0x3d, r28	; 61
    600a:	6c 01       	movw	r12, r24
    uint8_t buf[8];

    uint8_t ReadAddress = 0;
    600c:	19 86       	std	Y+9, r1	; 0x09

    ReadAddress = 0;
    if (TWI_ReadPacket(DS1307_R, 20, &ReadAddress, sizeof(ReadAddress),
    600e:	88 e0       	ldi	r24, 0x08	; 8
    6010:	e8 2e       	mov	r14, r24
    6012:	8e 01       	movw	r16, r28
    6014:	0f 5f       	subi	r16, 0xFF	; 255
    6016:	1f 4f       	sbci	r17, 0xFF	; 255
    6018:	21 e0       	ldi	r18, 0x01	; 1
    601a:	ae 01       	movw	r20, r28
    601c:	47 5f       	subi	r20, 0xF7	; 247
    601e:	5f 4f       	sbci	r21, 0xFF	; 255
    6020:	64 e1       	ldi	r22, 0x14	; 20
    6022:	81 ed       	ldi	r24, 0xD1	; 209
    6024:	35 de       	rcall	.-918    	; 0x5c90 <TWI_ReadPacket>
    6026:	88 23       	and	r24, r24
    6028:	61 f0       	breq	.+24     	; 0x6042 <rtc_read+0x56>
        (uint8_t*)buf, 8) != TWI_ERROR_NoError)
    {
        printf("rtc_read error\n");
    602a:	87 e4       	ldi	r24, 0x47	; 71
    602c:	94 e0       	ldi	r25, 0x04	; 4
    602e:	1f 92       	push	r1
    6030:	9f 93       	push	r25
    6032:	8f 93       	push	r24
    6034:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
        return 0;
    6038:	0f 90       	pop	r0
    603a:	0f 90       	pop	r0
    603c:	0f 90       	pop	r0
    603e:	80 e0       	ldi	r24, 0x00	; 0
    6040:	33 c0       	rjmp	.+102    	; 0x60a8 <rtc_read+0xbc>
    for(i=0;i<7;++i)
        printf("%02x ", 0xff & buf[i]);
    printf("\n");
#endif

    t->tm_sec =   BCDtoBIN( buf[0] & 0x7f);
    6042:	89 81       	ldd	r24, Y+1	; 0x01
    6044:	8f 77       	andi	r24, 0x7F	; 127
    6046:	9a de       	rcall	.-716    	; 0x5d7c <BCDtoBIN>
    6048:	90 e0       	ldi	r25, 0x00	; 0
    604a:	f6 01       	movw	r30, r12
    604c:	91 83       	std	Z+1, r25	; 0x01
    t->tm_min =   BCDtoBIN( buf[1] & 0x7f);
    604e:	80 83       	st	Z, r24
    6050:	8a 81       	ldd	r24, Y+2	; 0x02
    6052:	8f 77       	andi	r24, 0x7F	; 127
    6054:	93 de       	rcall	.-730    	; 0x5d7c <BCDtoBIN>
    6056:	90 e0       	ldi	r25, 0x00	; 0
    6058:	f6 01       	movw	r30, r12
    t->tm_hour =  BCDtoBIN( buf[2] & 0x3f);
    605a:	93 83       	std	Z+3, r25	; 0x03
    605c:	82 83       	std	Z+2, r24	; 0x02
    605e:	8b 81       	ldd	r24, Y+3	; 0x03
    6060:	8f 73       	andi	r24, 0x3F	; 63
    6062:	8c de       	rcall	.-744    	; 0x5d7c <BCDtoBIN>
    6064:	90 e0       	ldi	r25, 0x00	; 0
    6066:	f6 01       	movw	r30, r12
    6068:	95 83       	std	Z+5, r25	; 0x05
    t->tm_wday =  ( buf[3] & 0x07) - 1;
    606a:	84 83       	std	Z+4, r24	; 0x04
    606c:	8c 81       	ldd	r24, Y+4	; 0x04
    606e:	87 70       	andi	r24, 0x07	; 7
    6070:	90 e0       	ldi	r25, 0x00	; 0
    6072:	01 97       	sbiw	r24, 0x01	; 1
    t->tm_mday =  BCDtoBIN( buf[4] & 0x3f) ;
    6074:	95 87       	std	Z+13, r25	; 0x0d
    6076:	84 87       	std	Z+12, r24	; 0x0c
    6078:	8d 81       	ldd	r24, Y+5	; 0x05
    607a:	8f 73       	andi	r24, 0x3F	; 63
    607c:	7f de       	rcall	.-770    	; 0x5d7c <BCDtoBIN>
    607e:	90 e0       	ldi	r25, 0x00	; 0
    6080:	f6 01       	movw	r30, r12
    t->tm_mon=    BCDtoBIN( buf[5] & 0x1f) - 1;
    6082:	97 83       	std	Z+7, r25	; 0x07
    6084:	86 83       	std	Z+6, r24	; 0x06
    6086:	8e 81       	ldd	r24, Y+6	; 0x06
    6088:	8f 71       	andi	r24, 0x1F	; 31
    608a:	78 de       	rcall	.-784    	; 0x5d7c <BCDtoBIN>
    608c:	90 e0       	ldi	r25, 0x00	; 0
    608e:	01 97       	sbiw	r24, 0x01	; 1
    6090:	f6 01       	movw	r30, r12
    t->tm_year =  BCDtoBIN( buf[6] & 0xff) + 100;
    6092:	91 87       	std	Z+9, r25	; 0x09
    6094:	80 87       	std	Z+8, r24	; 0x08
    6096:	8f 81       	ldd	r24, Y+7	; 0x07
    6098:	71 de       	rcall	.-798    	; 0x5d7c <BCDtoBIN>
    609a:	90 e0       	ldi	r25, 0x00	; 0
    609c:	8c 59       	subi	r24, 0x9C	; 156
    609e:	9f 4f       	sbci	r25, 0xFF	; 255
    60a0:	f6 01       	movw	r30, r12
    60a2:	93 87       	std	Z+11, r25	; 0x0b
        t->tm_min,
        t->tm_sec,
        t->tm_wday);
#endif

    return 1;
    60a4:	82 87       	std	Z+10, r24	; 0x0a
}
    60a6:	81 e0       	ldi	r24, 0x01	; 1
    60a8:	29 96       	adiw	r28, 0x09	; 9
    60aa:	0f b6       	in	r0, 0x3f	; 63
    60ac:	f8 94       	cli
    60ae:	de bf       	out	0x3e, r29	; 62
    60b0:	0f be       	out	0x3f, r0	; 63
    60b2:	cd bf       	out	0x3d, r28	; 61
    60b4:	df 91       	pop	r29
    60b6:	cf 91       	pop	r28
    60b8:	1f 91       	pop	r17
    60ba:	0f 91       	pop	r16
    60bc:	ef 90       	pop	r14
    60be:	df 90       	pop	r13
    60c0:	cf 90       	pop	r12
    60c2:	08 95       	ret

000060c4 <I2C_Start>:
/*
 *  Move the cursor one character to the right.
 */
void LCD_moveCursorRight()
{
	LCD_moveCursorRightCount(1);
    60c4:	64 e1       	ldi	r22, 0x14	; 20
    60c6:	52 dd       	rcall	.-1372   	; 0x5b6c <TWI_StartTransmission>
    60c8:	81 11       	cpse	r24, r1
    60ca:	07 c0       	rjmp	.+14     	; 0x60da <I2C_Start+0x16>
    60cc:	81 e0       	ldi	r24, 0x01	; 1
    60ce:	90 e0       	ldi	r25, 0x00	; 0
    60d0:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <LCD_ok+0x1>
    60d4:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <LCD_ok>
    60d8:	04 c0       	rjmp	.+8      	; 0x60e2 <I2C_Start+0x1e>
    60da:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <LCD_ok+0x1>
    60de:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <LCD_ok>
    60e2:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <LCD_ok>
    60e6:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <LCD_ok+0x1>
    60ea:	08 95       	ret

000060ec <I2C_Stop>:
    60ec:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <LCD_ok>
    60f0:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <LCD_ok+0x1>
    60f4:	89 2b       	or	r24, r25
    60f6:	09 f0       	breq	.+2      	; 0x60fa <I2C_Stop+0xe>
    60f8:	35 cd       	rjmp	.-1430   	; 0x5b64 <TWI_StopTransmission>
    60fa:	08 95       	ret

000060fc <I2C_Send>:
    60fc:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <LCD_ok>
    6100:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <LCD_ok+0x1>
    6104:	21 15       	cp	r18, r1
    6106:	31 05       	cpc	r19, r1
    6108:	41 f0       	breq	.+16     	; 0x611a <I2C_Send+0x1e>
    610a:	90 dd       	rcall	.-1248   	; 0x5c2c <TWI_SendByte>
    610c:	51 e0       	ldi	r21, 0x01	; 1
    610e:	40 e0       	ldi	r20, 0x00	; 0
    6110:	89 2b       	or	r24, r25
    6112:	09 f0       	breq	.+2      	; 0x6116 <I2C_Send+0x1a>
    6114:	50 e0       	ldi	r21, 0x00	; 0
    6116:	25 2f       	mov	r18, r21
    6118:	34 2f       	mov	r19, r20
    611a:	c9 01       	movw	r24, r18
    611c:	08 95       	ret

0000611e <LCD_putb>:
    611e:	cf 93       	push	r28
    6120:	c8 2f       	mov	r28, r24
    6122:	84 ee       	ldi	r24, 0xE4	; 228
    6124:	cf df       	rcall	.-98     	; 0x60c4 <I2C_Start>
    6126:	89 2b       	or	r24, r25
    6128:	19 f4       	brne	.+6      	; 0x6130 <LCD_putb+0x12>
    612a:	80 e0       	ldi	r24, 0x00	; 0
    612c:	90 e0       	ldi	r25, 0x00	; 0
    612e:	07 c0       	rjmp	.+14     	; 0x613e <LCD_putb+0x20>
    6130:	8c 2f       	mov	r24, r28
    6132:	e4 df       	rcall	.-56     	; 0x60fc <I2C_Send>
    6134:	89 2b       	or	r24, r25
    6136:	c9 f3       	breq	.-14     	; 0x612a <LCD_putb+0xc>
    6138:	d9 df       	rcall	.-78     	; 0x60ec <I2C_Stop>
    613a:	81 e0       	ldi	r24, 0x01	; 1
    613c:	90 e0       	ldi	r25, 0x00	; 0
    613e:	cf 91       	pop	r28
    6140:	08 95       	ret

00006142 <LCD_command>:
    6142:	cf 93       	push	r28
    6144:	c8 2f       	mov	r28, r24
    6146:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <lcd_address>
    614a:	bc df       	rcall	.-136    	; 0x60c4 <I2C_Start>
    614c:	89 2b       	or	r24, r25
    614e:	51 f0       	breq	.+20     	; 0x6164 <LCD_command+0x22>
    6150:	8c e7       	ldi	r24, 0x7C	; 124
    6152:	d4 df       	rcall	.-88     	; 0x60fc <I2C_Send>
    6154:	8c 2f       	mov	r24, r28
    6156:	d2 df       	rcall	.-92     	; 0x60fc <I2C_Send>
    6158:	c9 df       	rcall	.-110    	; 0x60ec <I2C_Stop>
    615a:	6a e0       	ldi	r22, 0x0A	; 10
    615c:	70 e0       	ldi	r23, 0x00	; 0
    615e:	80 e0       	ldi	r24, 0x00	; 0
    6160:	90 e0       	ldi	r25, 0x00	; 0
    6162:	f5 d9       	rcall	.-3094   	; 0x554e <delayms>
    6164:	cf 91       	pop	r28
    6166:	08 95       	ret

00006168 <LCD_specialCommand>:
    6168:	cf 93       	push	r28
    616a:	c8 2f       	mov	r28, r24
    616c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <lcd_address>
    6170:	a9 df       	rcall	.-174    	; 0x60c4 <I2C_Start>
    6172:	89 2b       	or	r24, r25
    6174:	51 f0       	breq	.+20     	; 0x618a <LCD_specialCommand+0x22>
    6176:	8e ef       	ldi	r24, 0xFE	; 254
    6178:	c1 df       	rcall	.-126    	; 0x60fc <I2C_Send>
    617a:	8c 2f       	mov	r24, r28
    617c:	bf df       	rcall	.-130    	; 0x60fc <I2C_Send>
    617e:	b6 df       	rcall	.-148    	; 0x60ec <I2C_Stop>
    6180:	62 e3       	ldi	r22, 0x32	; 50
    6182:	70 e0       	ldi	r23, 0x00	; 0
    6184:	80 e0       	ldi	r24, 0x00	; 0
    6186:	90 e0       	ldi	r25, 0x00	; 0
    6188:	e2 d9       	rcall	.-3132   	; 0x554e <delayms>
    618a:	cf 91       	pop	r28
    618c:	08 95       	ret

0000618e <LCD_setCursor>:
    618e:	a8 e0       	ldi	r26, 0x08	; 8
    6190:	b0 e0       	ldi	r27, 0x00	; 0
    6192:	ed ec       	ldi	r30, 0xCD	; 205
    6194:	f0 e3       	ldi	r31, 0x30	; 48
    6196:	0c 94 23 e8 	jmp	0x1d046	; 0x1d046 <__prologue_saves__+0x20>
    619a:	98 e0       	ldi	r25, 0x08	; 8
    619c:	eb e5       	ldi	r30, 0x5B	; 91
    619e:	f2 e0       	ldi	r31, 0x02	; 2
    61a0:	de 01       	movw	r26, r28
    61a2:	11 96       	adiw	r26, 0x01	; 1
    61a4:	01 90       	ld	r0, Z+
    61a6:	0d 92       	st	X+, r0
    61a8:	9a 95       	dec	r25
    61aa:	e1 f7       	brne	.-8      	; 0x61a4 <LCD_setCursor+0x16>
    61ac:	64 30       	cpi	r22, 0x04	; 4
    61ae:	08 f0       	brcs	.+2      	; 0x61b2 <LCD_setCursor+0x24>
    61b0:	63 e0       	ldi	r22, 0x03	; 3
    61b2:	fe 01       	movw	r30, r28
    61b4:	31 96       	adiw	r30, 0x01	; 1
    61b6:	e6 0f       	add	r30, r22
    61b8:	f1 1d       	adc	r31, r1
    61ba:	e6 0f       	add	r30, r22
    61bc:	f1 1d       	adc	r31, r1
    61be:	90 81       	ld	r25, Z
    61c0:	89 0f       	add	r24, r25
    61c2:	80 68       	ori	r24, 0x80	; 128
    61c4:	d1 df       	rcall	.-94     	; 0x6168 <LCD_specialCommand>
    61c6:	28 96       	adiw	r28, 0x08	; 8
    61c8:	e2 e0       	ldi	r30, 0x02	; 2
    61ca:	0c 94 3f e8 	jmp	0x1d07e	; 0x1d07e <__epilogue_restores__+0x20>

000061ce <LCD_pos>:
    61ce:	ea e0       	ldi	r30, 0x0A	; 10
    61d0:	f1 e0       	ldi	r31, 0x01	; 1
    61d2:	28 2f       	mov	r18, r24
    61d4:	30 e0       	ldi	r19, 0x00	; 0
    61d6:	31 83       	std	Z+1, r19	; 0x01
    61d8:	20 83       	st	Z, r18
    61da:	26 2f       	mov	r18, r22
    61dc:	30 e0       	ldi	r19, 0x00	; 0
    61de:	33 83       	std	Z+3, r19	; 0x03
    61e0:	22 83       	std	Z+2, r18	; 0x02
    61e2:	d5 cf       	rjmp	.-86     	; 0x618e <LCD_setCursor>
    61e4:	08 95       	ret

000061e6 <LCD_clear>:
    61e6:	8d e2       	ldi	r24, 0x2D	; 45
    61e8:	ac df       	rcall	.-168    	; 0x6142 <LCD_command>
    61ea:	60 e0       	ldi	r22, 0x00	; 0
    61ec:	80 e0       	ldi	r24, 0x00	; 0
    61ee:	ef df       	rcall	.-34     	; 0x61ce <LCD_pos>
    61f0:	6a e0       	ldi	r22, 0x0A	; 10
    61f2:	70 e0       	ldi	r23, 0x00	; 0
    61f4:	80 e0       	ldi	r24, 0x00	; 0
    61f6:	90 e0       	ldi	r25, 0x00	; 0
    61f8:	aa c9       	rjmp	.-3244   	; 0x554e <delayms>
    61fa:	08 95       	ret

000061fc <LCD_setFastBacklightRGB>:
} // moveCursorRight


//New command - set backlight with LCD messages or delaymss
void LCD_setFastBacklightRGB(byte r, byte g, byte b)
{
    61fc:	1f 93       	push	r17
    61fe:	cf 93       	push	r28
    6200:	df 93       	push	r29
    6202:	18 2f       	mov	r17, r24
    6204:	d6 2f       	mov	r29, r22
    6206:	c4 2f       	mov	r28, r20
  //send commands to the display to set backlights
  if( !I2C_Start(lcd_address) )
    6208:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <lcd_address>
    620c:	5b df       	rcall	.-330    	; 0x60c4 <I2C_Start>
    620e:	89 2b       	or	r24, r25
	return;
  I2C_Send(SETTING_COMMAND); //Send special command character
    6210:	81 f0       	breq	.+32     	; 0x6232 <LCD_setFastBacklightRGB+0x36>
  I2C_Send(SET_RGB_COMMAND); //Send the set RGB character '+' or plus
    6212:	8c e7       	ldi	r24, 0x7C	; 124
  I2C_Send(r);               //Send the red value
  I2C_Send(g);               //Send the green value
    6214:	73 df       	rcall	.-282    	; 0x60fc <I2C_Send>
    6216:	8b e2       	ldi	r24, 0x2B	; 43
  I2C_Send(b);               //Send the blue value
    6218:	71 df       	rcall	.-286    	; 0x60fc <I2C_Send>
    621a:	81 2f       	mov	r24, r17
  I2C_Stop();         //Stop transmission
    621c:	6f df       	rcall	.-290    	; 0x60fc <I2C_Send>
    621e:	8d 2f       	mov	r24, r29
  delayms(10);
    6220:	6d df       	rcall	.-294    	; 0x60fc <I2C_Send>
    6222:	8c 2f       	mov	r24, r28
    6224:	6b df       	rcall	.-298    	; 0x60fc <I2C_Send>
    6226:	62 df       	rcall	.-316    	; 0x60ec <I2C_Stop>
    6228:	6a e0       	ldi	r22, 0x0A	; 10
    622a:	70 e0       	ldi	r23, 0x00	; 0
} // setFastBacklight
    622c:	80 e0       	ldi	r24, 0x00	; 0
    622e:	90 e0       	ldi	r25, 0x00	; 0
    6230:	8e d9       	rcall	.-3300   	; 0x554e <delayms>
    6232:	df 91       	pop	r29
    6234:	cf 91       	pop	r28
    6236:	1f 91       	pop	r17
    6238:	08 95       	ret

0000623a <LCD_init>:
 *
 */
bool LCD_init(uint8_t addr)
{
  
  if( !I2C_Start(lcd_address = addr) )
    623a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <lcd_address>
    623e:	42 df       	rcall	.-380    	; 0x60c4 <I2C_Start>
    6240:	00 97       	sbiw	r24, 0x00	; 0
	return 0;

  I2C_Send(SPECIAL_COMMAND);                      //Send special command character
    6242:	61 f1       	breq	.+88     	; 0x629c <LCD_init+0x62>
    6244:	8e ef       	ldi	r24, 0xFE	; 254
  I2C_Send(LCD_DISPLAYCONTROL | _displayControl); //Send the display command
    6246:	5a df       	rcall	.-332    	; 0x60fc <I2C_Send>
    6248:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <_displayControl>

  I2C_Send(SPECIAL_COMMAND);                      //Send special command character
    624c:	88 60       	ori	r24, 0x08	; 8
    624e:	56 df       	rcall	.-340    	; 0x60fc <I2C_Send>
  I2C_Send(LCD_ENTRYMODESET | _displayMode);      //Send the entry mode command
    6250:	8e ef       	ldi	r24, 0xFE	; 254
    6252:	54 df       	rcall	.-344    	; 0x60fc <I2C_Send>

  I2C_Send(SETTING_COMMAND);                      //Put LCD into setting mode
    6254:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_displayMode>
  I2C_Send(CLEAR_COMMAND);                        //Send clear display command

  I2C_Send(SETTING_COMMAND);                      //Send special command character
    6258:	84 60       	ori	r24, 0x04	; 4
  I2C_Send(DISABLE_SYSTEM_MESSAGE_DISPLAY);       //Send the set '.' character
    625a:	50 df       	rcall	.-352    	; 0x60fc <I2C_Send>
    625c:	8c e7       	ldi	r24, 0x7C	; 124

  I2C_Send(SPECIAL_COMMAND);                      //Send special command character
    625e:	4e df       	rcall	.-356    	; 0x60fc <I2C_Send>
    6260:	8d e2       	ldi	r24, 0x2D	; 45
  I2C_Send(LCD_SETDDRAMADDR | 0);				// HOME 0,0
    6262:	4c df       	rcall	.-360    	; 0x60fc <I2C_Send>
    6264:	8c e7       	ldi	r24, 0x7C	; 124

  I2C_Stop();
    6266:	4a df       	rcall	.-364    	; 0x60fc <I2C_Send>
    6268:	8f e2       	ldi	r24, 0x2F	; 47
  delayms(50);                                      //let things settle a bit
    626a:	48 df       	rcall	.-368    	; 0x60fc <I2C_Send>
    626c:	8e ef       	ldi	r24, 0xFE	; 254
    626e:	46 df       	rcall	.-372    	; 0x60fc <I2C_Send>
    6270:	80 e8       	ldi	r24, 0x80	; 128
    6272:	44 df       	rcall	.-376    	; 0x60fc <I2C_Send>
    6274:	3b df       	rcall	.-394    	; 0x60ec <I2C_Stop>

  LCD_setFastBacklightRGB ( 0xC0, 0xC0, 0xC0 );
    6276:	62 e3       	ldi	r22, 0x32	; 50
    6278:	70 e0       	ldi	r23, 0x00	; 0
    627a:	80 e0       	ldi	r24, 0x00	; 0
    627c:	90 e0       	ldi	r25, 0x00	; 0
    627e:	67 d9       	rcall	.-3378   	; 0x554e <delayms>

  lcd.xpos = 0;
    6280:	40 ec       	ldi	r20, 0xC0	; 192
    6282:	60 ec       	ldi	r22, 0xC0	; 192
    6284:	80 ec       	ldi	r24, 0xC0	; 192
    6286:	ba df       	rcall	.-140    	; 0x61fc <LCD_setFastBacklightRGB>
  lcd.ypos = 0;
    6288:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <lcd+0x1>
    628c:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <lcd>

  return(1);
    6290:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <lcd+0x3>
} //init
    6294:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <lcd+0x2>
    6298:	81 e0       	ldi	r24, 0x01	; 1
    629a:	90 e0       	ldi	r25, 0x00	; 0
    629c:	08 95       	ret

0000629e <lcd_cleareol>:
	{
		LCD_putb(' ');
		rem--;
	}
	LCD_pos(lcd.xpos = 0,lcd.ypos);
}
    629e:	cf 93       	push	r28
    62a0:	df 93       	push	r29
    62a2:	c0 91 0e 01 	lds	r28, 0x010E	; 0x80010e <lcd+0x4>
    62a6:	d0 91 0f 01 	lds	r29, 0x010F	; 0x80010f <lcd+0x5>
    62aa:	21 97       	sbiw	r28, 0x01	; 1
    62ac:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lcd>
    62b0:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <lcd+0x1>
    62b4:	c8 1b       	sub	r28, r24
    62b6:	d9 0b       	sbc	r29, r25
    62b8:	1c 16       	cp	r1, r28
    62ba:	1d 06       	cpc	r1, r29
    62bc:	24 f4       	brge	.+8      	; 0x62c6 <lcd_cleareol+0x28>
    62be:	80 e2       	ldi	r24, 0x20	; 32
    62c0:	2e df       	rcall	.-420    	; 0x611e <LCD_putb>
    62c2:	21 97       	sbiw	r28, 0x01	; 1
    62c4:	f9 cf       	rjmp	.-14     	; 0x62b8 <lcd_cleareol+0x1a>
    62c6:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <lcd+0x2>
    62ca:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <lcd+0x4>
    62ce:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <lcd+0x5>
    62d2:	01 97       	sbiw	r24, 0x01	; 1
    62d4:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <lcd+0x1>
    62d8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <lcd>
    62dc:	78 df       	rcall	.-272    	; 0x61ce <LCD_pos>
    62de:	df 91       	pop	r29
    62e0:	cf 91       	pop	r28
    62e2:	08 95       	ret

000062e4 <lcd_putch>:

/// @brief  put character 
/// @param[in] c: character
/// return: void
void lcd_putch(int c)
{
    62e4:	cf 93       	push	r28
    62e6:	df 93       	push	r29
	int rem;

	if(c < 0 || c > 0x7e)
    62e8:	8f 37       	cpi	r24, 0x7F	; 127
    62ea:	91 05       	cpc	r25, r1
    62ec:	08 f0       	brcs	.+2      	; 0x62f0 <lcd_putch+0xc>
    62ee:	50 c0       	rjmp	.+160    	; 0x6390 <lcd_putch+0xac>
    62f0:	ec 01       	movw	r28, r24
		return;

	// Normal visible characters
	if(c >= ' ')
    62f2:	80 32       	cpi	r24, 0x20	; 32
    62f4:	91 05       	cpc	r25, r1
    62f6:	4c f1       	brlt	.+82     	; 0x634a <lcd_putch+0x66>
	{
		rem = (lcd.w - 1 - lcd.xpos);
		if( rem <= 0 )
    62f8:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <lcd+0x4>
    62fc:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <lcd+0x5>
    6300:	01 97       	sbiw	r24, 0x01	; 1
    6302:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <lcd>
    6306:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <lcd+0x1>
    630a:	82 1b       	sub	r24, r18
    630c:	93 0b       	sbc	r25, r19
    630e:	18 16       	cp	r1, r24
    6310:	19 06       	cpc	r1, r25
    6312:	7c f0       	brlt	.+30     	; 0x6332 <lcd_putch+0x4e>
		{
			LCD_pos(++lcd.ypos,lcd.xpos=0);
    6314:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <lcd+0x1>
    6318:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <lcd>
    631c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <lcd+0x2>
    6320:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <lcd+0x3>
    6324:	01 96       	adiw	r24, 0x01	; 1
    6326:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <lcd+0x3>
    632a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <lcd+0x2>
    632e:	60 e0       	ldi	r22, 0x00	; 0
		}
		(void) LCD_putb(c);
    6330:	4e df       	rcall	.-356    	; 0x61ce <LCD_pos>
    6332:	8c 2f       	mov	r24, r28
		// uart_putchar(c,0);
		lcd.xpos++;
    6334:	f4 de       	rcall	.-536    	; 0x611e <LCD_putb>
    6336:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lcd>
    633a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <lcd+0x1>
    633e:	01 96       	adiw	r24, 0x01	; 1
    6340:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <lcd+0x1>
    6344:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <lcd>
		return;
	}

	// Control characters
	if(c == '\n')
    6348:	23 c0       	rjmp	.+70     	; 0x6390 <lcd_putch+0xac>
    634a:	8a 30       	cpi	r24, 0x0A	; 10
	{
		// uart_putchar(c,0);
		lcd_cleareol();
    634c:	91 05       	cpc	r25, r1
    634e:	91 f4       	brne	.+36     	; 0x6374 <lcd_putch+0x90>
		++lcd.ypos;
		lcd.ypos &= 3;
    6350:	a6 df       	rcall	.-180    	; 0x629e <lcd_cleareol>
    6352:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <lcd+0x2>
    6356:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <lcd+0x3>
    635a:	6f 5f       	subi	r22, 0xFF	; 255
    635c:	7f 4f       	sbci	r23, 0xFF	; 255
    635e:	63 70       	andi	r22, 0x03	; 3
    6360:	77 27       	eor	r23, r23
    6362:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <lcd+0x3>
    6366:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <lcd+0x2>
		LCD_pos(lcd.xpos=0,lcd.ypos);
    636a:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <lcd+0x1>
    636e:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <lcd>
	}

	if(c == '\f')
    6372:	0c c0       	rjmp	.+24     	; 0x638c <lcd_putch+0xa8>
	{
		LCD_clear();
    6374:	0c 97       	sbiw	r24, 0x0c	; 12
    6376:	61 f4       	brne	.+24     	; 0x6390 <lcd_putch+0xac>
		LCD_pos(lcd.xpos=0,lcd.ypos=0);
    6378:	36 df       	rcall	.-404    	; 0x61e6 <LCD_clear>
    637a:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <lcd+0x3>
    637e:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <lcd+0x2>
    6382:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <lcd+0x1>
    6386:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <lcd>
    638a:	60 e0       	ldi	r22, 0x00	; 0
    638c:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    638e:	1f df       	rcall	.-450    	; 0x61ce <LCD_pos>
    6390:	df 91       	pop	r29
    6392:	cf 91       	pop	r28
    6394:	08 95       	ret

00006396 <_putc_win>:


// We do not use the printf structure
static void _putc_win(struct _printf_t *p, char ch)
{
    6396:	fc 01       	movw	r30, r24
	p->sent++;
    6398:	26 81       	ldd	r18, Z+6	; 0x06
    639a:	37 81       	ldd	r19, Z+7	; 0x07
    639c:	2f 5f       	subi	r18, 0xFF	; 255
    639e:	3f 4f       	sbci	r19, 0xFF	; 255
    63a0:	37 83       	std	Z+7, r19	; 0x07
    63a2:	26 83       	std	Z+6, r18	; 0x06
	lcd_putch(ch);
    63a4:	86 2f       	mov	r24, r22
    63a6:	90 e0       	ldi	r25, 0x00	; 0
    63a8:	9d cf       	rjmp	.-198    	; 0x62e4 <lcd_putch>
    63aa:	08 95       	ret

000063ac <lcd_printf>:
/// @param[in] fmt: printf forat string
/// @param[in] ...: vararg list or arguments
/// @return size of string
MEMSPACE
int lcd_printf(const char *fmt, ... )
{
    63ac:	a8 e0       	ldi	r26, 0x08	; 8
    63ae:	b0 e0       	ldi	r27, 0x00	; 0
    63b0:	ec ed       	ldi	r30, 0xDC	; 220
    63b2:	f1 e3       	ldi	r31, 0x31	; 49
    63b4:	0c 94 23 e8 	jmp	0x1d046	; 0x1d046 <__prologue_saves__+0x20>
    63b8:	9e 01       	movw	r18, r28
    63ba:	23 5f       	subi	r18, 0xF3	; 243
    63bc:	3f 4f       	sbci	r19, 0xFF	; 255
    63be:	f9 01       	movw	r30, r18
    63c0:	41 91       	ld	r20, Z+
    63c2:	51 91       	ld	r21, Z+
    63c4:	9f 01       	movw	r18, r30
    printf_t fn;

    fn.put = _putc_win;
    63c6:	8b ec       	ldi	r24, 0xCB	; 203
    63c8:	91 e3       	ldi	r25, 0x31	; 49
    63ca:	9a 83       	std	Y+2, r25	; 0x02
    63cc:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    63ce:	18 86       	std	Y+8, r1	; 0x08
    63d0:	1f 82       	std	Y+7, r1	; 0x07

    va_list va;
    va_start(va, fmt);

    _printf_fn(&fn, fmt, va);
    63d2:	60 e8       	ldi	r22, 0x80	; 128
    63d4:	ce 01       	movw	r24, r28
    63d6:	01 96       	adiw	r24, 0x01	; 1
    63d8:	0e 94 b7 42 	call	0x856e	; 0x856e <_printf_fn>

    va_end(va);

	return(fn.sent);

}
    63dc:	8f 81       	ldd	r24, Y+7	; 0x07
    63de:	98 85       	ldd	r25, Y+8	; 0x08
    63e0:	28 96       	adiw	r28, 0x08	; 8
    63e2:	e2 e0       	ldi	r30, 0x02	; 2
    63e4:	0c 94 3f e8 	jmp	0x1d07e	; 0x1d07e <__epilogue_restores__+0x20>

000063e8 <sep>:
    {
        if(strncmp(str,pat,len) == 0 )
            return(len);
    }
    return(0);
}
    63e8:	84 e0       	ldi	r24, 0x04	; 4
    63ea:	95 e0       	ldi	r25, 0x05	; 5
    63ec:	1f 92       	push	r1
    63ee:	9f 93       	push	r25
    63f0:	8f 93       	push	r24
    63f2:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    63f6:	0f 90       	pop	r0
    63f8:	0f 90       	pop	r0
    63fa:	0f 90       	pop	r0
    63fc:	08 95       	ret

000063fe <islower>:
    63fe:	9c 01       	movw	r18, r24
    6400:	21 56       	subi	r18, 0x61	; 97
    6402:	31 09       	sbc	r19, r1
    6404:	81 e0       	ldi	r24, 0x01	; 1
    6406:	90 e0       	ldi	r25, 0x00	; 0
    6408:	2a 31       	cpi	r18, 0x1A	; 26
    640a:	31 05       	cpc	r19, r1
    640c:	10 f0       	brcs	.+4      	; 0x6412 <islower+0x14>
    640e:	80 e0       	ldi	r24, 0x00	; 0
    6410:	90 e0       	ldi	r25, 0x00	; 0
    6412:	08 95       	ret

00006414 <toupper>:
    6414:	cf 93       	push	r28
    6416:	df 93       	push	r29
    6418:	ec 01       	movw	r28, r24
    641a:	f1 df       	rcall	.-30     	; 0x63fe <islower>
    641c:	89 2b       	or	r24, r25
    641e:	19 f0       	breq	.+6      	; 0x6426 <toupper+0x12>
    6420:	ce 01       	movw	r24, r28
    6422:	80 97       	sbiw	r24, 0x20	; 32
    6424:	01 c0       	rjmp	.+2      	; 0x6428 <toupper+0x14>
    6426:	ce 01       	movw	r24, r28
    6428:	df 91       	pop	r29
    642a:	cf 91       	pop	r28
    642c:	08 95       	ret

0000642e <strcpy>:
    642e:	fc 01       	movw	r30, r24
    6430:	db 01       	movw	r26, r22
    6432:	2d 91       	ld	r18, X+
    6434:	bd 01       	movw	r22, r26
    6436:	01 96       	adiw	r24, 0x01	; 1
    6438:	22 23       	and	r18, r18
    643a:	11 f0       	breq	.+4      	; 0x6440 <strcpy+0x12>
    643c:	20 83       	st	Z, r18
    643e:	f7 cf       	rjmp	.-18     	; 0x642e <strcpy>
    6440:	10 82       	st	Z, r1
    6442:	08 95       	ret

00006444 <strncpy>:
    6444:	db 01       	movw	r26, r22
    6446:	fc 01       	movw	r30, r24
    6448:	2d 91       	ld	r18, X+
    644a:	21 11       	cpse	r18, r1
    644c:	03 c0       	rjmp	.+6      	; 0x6454 <strncpy+0x10>
    644e:	4e 0f       	add	r20, r30
    6450:	5f 1f       	adc	r21, r31
    6452:	08 c0       	rjmp	.+16     	; 0x6464 <strncpy+0x20>
    6454:	41 15       	cp	r20, r1
    6456:	51 05       	cpc	r21, r1
    6458:	21 f0       	breq	.+8      	; 0x6462 <strncpy+0x1e>
    645a:	21 93       	st	Z+, r18
    645c:	41 50       	subi	r20, 0x01	; 1
    645e:	51 09       	sbc	r21, r1
    6460:	f3 cf       	rjmp	.-26     	; 0x6448 <strncpy+0x4>
    6462:	08 95       	ret
    6464:	4e 17       	cp	r20, r30
    6466:	5f 07       	cpc	r21, r31
    6468:	11 f0       	breq	.+4      	; 0x646e <strncpy+0x2a>
    646a:	11 92       	st	Z+, r1
    646c:	fb cf       	rjmp	.-10     	; 0x6464 <strncpy+0x20>
    646e:	08 95       	ret

00006470 <strcat>:
    6470:	cf 93       	push	r28
    6472:	df 93       	push	r29
    6474:	d8 2f       	mov	r29, r24
    6476:	c9 2f       	mov	r28, r25
    6478:	28 2f       	mov	r18, r24
    647a:	39 2f       	mov	r19, r25
    647c:	c9 01       	movw	r24, r18
    647e:	2f 5f       	subi	r18, 0xFF	; 255
    6480:	3f 4f       	sbci	r19, 0xFF	; 255
    6482:	fc 01       	movw	r30, r24
    6484:	40 81       	ld	r20, Z
    6486:	41 11       	cpse	r20, r1
    6488:	f9 cf       	rjmp	.-14     	; 0x647c <strcat+0xc>
    648a:	d1 df       	rcall	.-94     	; 0x642e <strcpy>
    648c:	8d 2f       	mov	r24, r29
    648e:	9c 2f       	mov	r25, r28
    6490:	df 91       	pop	r29
    6492:	cf 91       	pop	r28
    6494:	08 95       	ret

00006496 <reverse>:
    6496:	fc 01       	movw	r30, r24
    6498:	01 90       	ld	r0, Z+
    649a:	00 20       	and	r0, r0
    649c:	e9 f7       	brne	.-6      	; 0x6498 <reverse+0x2>
    649e:	31 97       	sbiw	r30, 0x01	; 1
    64a0:	e8 1b       	sub	r30, r24
    64a2:	f9 0b       	sbc	r31, r25
    64a4:	af 01       	movw	r20, r30
    64a6:	55 95       	asr	r21
    64a8:	47 95       	ror	r20
    64aa:	e8 0f       	add	r30, r24
    64ac:	f9 1f       	adc	r31, r25
    64ae:	dc 01       	movw	r26, r24
    64b0:	9d 01       	movw	r18, r26
    64b2:	28 1b       	sub	r18, r24
    64b4:	39 0b       	sbc	r19, r25
    64b6:	24 17       	cp	r18, r20
    64b8:	35 07       	cpc	r19, r21
    64ba:	2c f4       	brge	.+10     	; 0x64c6 <reverse+0x30>
    64bc:	22 91       	ld	r18, -Z
    64be:	3c 91       	ld	r19, X
    64c0:	30 83       	st	Z, r19
    64c2:	2d 93       	st	X+, r18
    64c4:	f5 cf       	rjmp	.-22     	; 0x64b0 <reverse+0x1a>
    64c6:	08 95       	ret

000064c8 <strupper>:
    64c8:	cf 93       	push	r28
    64ca:	df 93       	push	r29
    64cc:	ec 01       	movw	r28, r24
    64ce:	88 81       	ld	r24, Y
    64d0:	88 23       	and	r24, r24
    64d2:	21 f0       	breq	.+8      	; 0x64dc <strupper+0x14>
    64d4:	90 e0       	ldi	r25, 0x00	; 0
    64d6:	9e df       	rcall	.-196    	; 0x6414 <toupper>
    64d8:	89 93       	st	Y+, r24
    64da:	f9 cf       	rjmp	.-14     	; 0x64ce <strupper+0x6>
    64dc:	df 91       	pop	r29
    64de:	cf 91       	pop	r28
    64e0:	08 95       	ret

000064e2 <trim_tail>:
    64e2:	00 97       	sbiw	r24, 0x00	; 0
    64e4:	69 f0       	breq	.+26     	; 0x6500 <trim_tail+0x1e>
    64e6:	fc 01       	movw	r30, r24
    64e8:	01 90       	ld	r0, Z+
    64ea:	00 20       	and	r0, r0
    64ec:	e9 f7       	brne	.-6      	; 0x64e8 <trim_tail+0x6>
    64ee:	31 97       	sbiw	r30, 0x01	; 1
    64f0:	e8 17       	cp	r30, r24
    64f2:	f9 07       	cpc	r31, r25
    64f4:	29 f0       	breq	.+10     	; 0x6500 <trim_tail+0x1e>
    64f6:	22 91       	ld	r18, -Z
    64f8:	21 32       	cpi	r18, 0x21	; 33
    64fa:	10 f4       	brcc	.+4      	; 0x6500 <trim_tail+0x1e>
    64fc:	10 82       	st	Z, r1
    64fe:	f8 cf       	rjmp	.-16     	; 0x64f0 <trim_tail+0xe>
    6500:	08 95       	ret

00006502 <skipspaces>:
    6502:	00 97       	sbiw	r24, 0x00	; 0
    6504:	39 f0       	breq	.+14     	; 0x6514 <skipspaces+0x12>
    6506:	fc 01       	movw	r30, r24
    6508:	cf 01       	movw	r24, r30
    650a:	21 91       	ld	r18, Z+
    650c:	20 32       	cpi	r18, 0x20	; 32
    650e:	e1 f3       	breq	.-8      	; 0x6508 <skipspaces+0x6>
    6510:	29 30       	cpi	r18, 0x09	; 9
    6512:	d1 f3       	breq	.-12     	; 0x6508 <skipspaces+0x6>
    6514:	08 95       	ret

00006516 <strcmp>:
    6516:	dc 01       	movw	r26, r24
    6518:	fb 01       	movw	r30, r22
    651a:	2d 91       	ld	r18, X+
    651c:	41 91       	ld	r20, Z+
    651e:	50 e0       	ldi	r21, 0x00	; 0
    6520:	30 e0       	ldi	r19, 0x00	; 0
    6522:	c9 01       	movw	r24, r18
    6524:	84 1b       	sub	r24, r20
    6526:	95 0b       	sbc	r25, r21
    6528:	11 f4       	brne	.+4      	; 0x652e <strcmp+0x18>
    652a:	45 2b       	or	r20, r21
    652c:	b1 f7       	brne	.-20     	; 0x651a <strcmp+0x4>
    652e:	08 95       	ret

00006530 <strncmp>:
    6530:	fc 01       	movw	r30, r24
    6532:	db 01       	movw	r26, r22
    6534:	48 0f       	add	r20, r24
    6536:	59 1f       	adc	r21, r25
    6538:	e4 17       	cp	r30, r20
    653a:	f5 07       	cpc	r31, r21
    653c:	59 f0       	breq	.+22     	; 0x6554 <strncmp+0x24>
    653e:	21 91       	ld	r18, Z+
    6540:	6d 91       	ld	r22, X+
    6542:	70 e0       	ldi	r23, 0x00	; 0
    6544:	30 e0       	ldi	r19, 0x00	; 0
    6546:	c9 01       	movw	r24, r18
    6548:	86 1b       	sub	r24, r22
    654a:	97 0b       	sbc	r25, r23
    654c:	29 f4       	brne	.+10     	; 0x6558 <strncmp+0x28>
    654e:	67 2b       	or	r22, r23
    6550:	99 f7       	brne	.-26     	; 0x6538 <strncmp+0x8>
    6552:	02 c0       	rjmp	.+4      	; 0x6558 <strncmp+0x28>
    6554:	80 e0       	ldi	r24, 0x00	; 0
    6556:	90 e0       	ldi	r25, 0x00	; 0
    6558:	08 95       	ret

0000655a <strcasecmp>:
    655a:	ef 92       	push	r14
    655c:	ff 92       	push	r15
    655e:	0f 93       	push	r16
    6560:	1f 93       	push	r17
    6562:	cf 93       	push	r28
    6564:	df 93       	push	r29
    6566:	7c 01       	movw	r14, r24
    6568:	8b 01       	movw	r16, r22
    656a:	f7 01       	movw	r30, r14
    656c:	81 91       	ld	r24, Z+
    656e:	7f 01       	movw	r14, r30
    6570:	90 e0       	ldi	r25, 0x00	; 0
    6572:	50 df       	rcall	.-352    	; 0x6414 <toupper>
    6574:	ec 01       	movw	r28, r24
    6576:	f8 01       	movw	r30, r16
    6578:	81 91       	ld	r24, Z+
    657a:	8f 01       	movw	r16, r30
    657c:	90 e0       	ldi	r25, 0x00	; 0
    657e:	4a df       	rcall	.-364    	; 0x6414 <toupper>
    6580:	9c 01       	movw	r18, r24
    6582:	ce 01       	movw	r24, r28
    6584:	82 1b       	sub	r24, r18
    6586:	93 0b       	sbc	r25, r19
    6588:	11 f4       	brne	.+4      	; 0x658e <strcasecmp+0x34>
    658a:	23 2b       	or	r18, r19
    658c:	71 f7       	brne	.-36     	; 0x656a <strcasecmp+0x10>
    658e:	cd b7       	in	r28, 0x3d	; 61
    6590:	de b7       	in	r29, 0x3e	; 62
    6592:	e6 e0       	ldi	r30, 0x06	; 6
    6594:	0c 94 3b e8 	jmp	0x1d076	; 0x1d076 <__epilogue_restores__+0x18>

00006598 <strncasecmp>:
    6598:	a0 e0       	ldi	r26, 0x00	; 0
    659a:	b0 e0       	ldi	r27, 0x00	; 0
    659c:	e2 ed       	ldi	r30, 0xD2	; 210
    659e:	f2 e3       	ldi	r31, 0x32	; 50
    65a0:	0c 94 1d e8 	jmp	0x1d03a	; 0x1d03a <__prologue_saves__+0x14>
    65a4:	8c 01       	movw	r16, r24
    65a6:	7b 01       	movw	r14, r22
    65a8:	6c 01       	movw	r12, r24
    65aa:	c4 0e       	add	r12, r20
    65ac:	d5 1e       	adc	r13, r21
    65ae:	0c 15       	cp	r16, r12
    65b0:	1d 05       	cpc	r17, r13
    65b2:	99 f0       	breq	.+38     	; 0x65da <strncasecmp+0x42>
    65b4:	f8 01       	movw	r30, r16
    65b6:	81 91       	ld	r24, Z+
    65b8:	8f 01       	movw	r16, r30
    65ba:	90 e0       	ldi	r25, 0x00	; 0
    65bc:	2b df       	rcall	.-426    	; 0x6414 <toupper>
    65be:	ec 01       	movw	r28, r24
    65c0:	f7 01       	movw	r30, r14
    65c2:	81 91       	ld	r24, Z+
    65c4:	7f 01       	movw	r14, r30
    65c6:	90 e0       	ldi	r25, 0x00	; 0
    65c8:	25 df       	rcall	.-438    	; 0x6414 <toupper>
    65ca:	9c 01       	movw	r18, r24
    65cc:	ce 01       	movw	r24, r28
    65ce:	82 1b       	sub	r24, r18
    65d0:	93 0b       	sbc	r25, r19
    65d2:	29 f4       	brne	.+10     	; 0x65de <strncasecmp+0x46>
    65d4:	23 2b       	or	r18, r19
    65d6:	59 f7       	brne	.-42     	; 0x65ae <strncasecmp+0x16>
    65d8:	02 c0       	rjmp	.+4      	; 0x65de <strncasecmp+0x46>
    65da:	80 e0       	ldi	r24, 0x00	; 0
    65dc:	90 e0       	ldi	r25, 0x00	; 0
    65de:	cd b7       	in	r28, 0x3d	; 61
    65e0:	de b7       	in	r29, 0x3e	; 62
    65e2:	e8 e0       	ldi	r30, 0x08	; 8
    65e4:	0c 94 39 e8 	jmp	0x1d072	; 0x1d072 <__epilogue_restores__+0x14>

000065e8 <MATCH>:
    65e8:	cf 93       	push	r28
    65ea:	df 93       	push	r29
    65ec:	fb 01       	movw	r30, r22
    65ee:	01 90       	ld	r0, Z+
    65f0:	00 20       	and	r0, r0
    65f2:	e9 f7       	brne	.-6      	; 0x65ee <MATCH+0x6>
    65f4:	31 97       	sbiw	r30, 0x01	; 1
    65f6:	ef 01       	movw	r28, r30
    65f8:	c6 1b       	sub	r28, r22
    65fa:	d7 0b       	sbc	r29, r23
    65fc:	8c df       	rcall	.-232    	; 0x6516 <strcmp>
    65fe:	89 2b       	or	r24, r25
    6600:	11 f4       	brne	.+4      	; 0x6606 <MATCH+0x1e>
    6602:	ce 01       	movw	r24, r28
    6604:	02 c0       	rjmp	.+4      	; 0x660a <MATCH+0x22>
    6606:	80 e0       	ldi	r24, 0x00	; 0
    6608:	90 e0       	ldi	r25, 0x00	; 0
    660a:	df 91       	pop	r29
    660c:	cf 91       	pop	r28
    660e:	08 95       	ret

00006610 <MATCHARGS>:
    6610:	ef 92       	push	r14
    6612:	ff 92       	push	r15
    6614:	0f 93       	push	r16
    6616:	1f 93       	push	r17
    6618:	cf 93       	push	r28
    661a:	df 93       	push	r29
    661c:	f6 2e       	mov	r15, r22
    661e:	e7 2e       	mov	r14, r23
    6620:	ea 01       	movw	r28, r20
    6622:	89 01       	movw	r16, r18
    6624:	e1 df       	rcall	.-62     	; 0x65e8 <MATCH>
    6626:	00 97       	sbiw	r24, 0x00	; 0
    6628:	e9 f0       	breq	.+58     	; 0x6664 <MATCHARGS+0x54>
    662a:	0c 17       	cp	r16, r28
    662c:	1d 07       	cpc	r17, r29
    662e:	c4 f4       	brge	.+48     	; 0x6660 <MATCHARGS+0x50>
    6630:	1f 93       	push	r17
    6632:	0f 93       	push	r16
    6634:	df 93       	push	r29
    6636:	cf 93       	push	r28
    6638:	ef 92       	push	r14
    663a:	ff 92       	push	r15
    663c:	8e ed       	ldi	r24, 0xDE	; 222
    663e:	94 e0       	ldi	r25, 0x04	; 4
    6640:	1f 92       	push	r1
    6642:	9f 93       	push	r25
    6644:	8f 93       	push	r24
    6646:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    664a:	8d b7       	in	r24, 0x3d	; 61
    664c:	9e b7       	in	r25, 0x3e	; 62
    664e:	09 96       	adiw	r24, 0x09	; 9
    6650:	0f b6       	in	r0, 0x3f	; 63
    6652:	f8 94       	cli
    6654:	9e bf       	out	0x3e, r25	; 62
    6656:	0f be       	out	0x3f, r0	; 63
    6658:	8d bf       	out	0x3d, r24	; 61
    665a:	80 e0       	ldi	r24, 0x00	; 0
    665c:	90 e0       	ldi	r25, 0x00	; 0
    665e:	02 c0       	rjmp	.+4      	; 0x6664 <MATCHARGS+0x54>
    6660:	81 e0       	ldi	r24, 0x01	; 1
    6662:	90 e0       	ldi	r25, 0x00	; 0
    6664:	cd b7       	in	r28, 0x3d	; 61
    6666:	de b7       	in	r29, 0x3e	; 62
    6668:	e6 e0       	ldi	r30, 0x06	; 6
    666a:	0c 94 3b e8 	jmp	0x1d076	; 0x1d076 <__epilogue_restores__+0x18>

0000666e <MATCHI>:
    666e:	cf 93       	push	r28
    6670:	df 93       	push	r29
    6672:	fb 01       	movw	r30, r22
    6674:	01 90       	ld	r0, Z+
    6676:	00 20       	and	r0, r0
    6678:	e9 f7       	brne	.-6      	; 0x6674 <MATCHI+0x6>
    667a:	31 97       	sbiw	r30, 0x01	; 1
    667c:	ef 01       	movw	r28, r30
    667e:	c6 1b       	sub	r28, r22
    6680:	d7 0b       	sbc	r29, r23
    6682:	6b df       	rcall	.-298    	; 0x655a <strcasecmp>
    6684:	89 2b       	or	r24, r25
    6686:	11 f4       	brne	.+4      	; 0x668c <MATCHI+0x1e>
    6688:	ce 01       	movw	r24, r28
    668a:	02 c0       	rjmp	.+4      	; 0x6690 <MATCHI+0x22>
    668c:	80 e0       	ldi	r24, 0x00	; 0
    668e:	90 e0       	ldi	r25, 0x00	; 0
    6690:	df 91       	pop	r29
    6692:	cf 91       	pop	r28
    6694:	08 95       	ret

00006696 <MATCHI_LEN>:
///@return string lenth on match.
///@return 0 on no match.
///@warning Matches sub strings so be caeful.
MEMSPACE
int MATCHI_LEN(char *str, char *pat)
{
    6696:	cf 93       	push	r28
    6698:	df 93       	push	r29
    int len;

    if(!str || !pat)
    669a:	00 97       	sbiw	r24, 0x00	; 0
    669c:	89 f0       	breq	.+34     	; 0x66c0 <MATCHI_LEN+0x2a>
    669e:	61 15       	cp	r22, r1
    66a0:	71 05       	cpc	r23, r1
    66a2:	71 f0       	breq	.+28     	; 0x66c0 <MATCHI_LEN+0x2a>
        return(0);
    len = strlen(pat);
    66a4:	eb 01       	movw	r28, r22
    66a6:	09 90       	ld	r0, Y+
    66a8:	00 20       	and	r0, r0
    66aa:	e9 f7       	brne	.-6      	; 0x66a6 <MATCHI_LEN+0x10>
    66ac:	21 97       	sbiw	r28, 0x01	; 1
    66ae:	c6 1b       	sub	r28, r22
    66b0:	d7 0b       	sbc	r29, r23

    if( len )
    66b2:	31 f0       	breq	.+12     	; 0x66c0 <MATCHI_LEN+0x2a>
    {
        if(strncasecmp(str,pat,len) == 0 )
    66b4:	ae 01       	movw	r20, r28
    66b6:	70 df       	rcall	.-288    	; 0x6598 <strncasecmp>
    66b8:	89 2b       	or	r24, r25
    66ba:	11 f4       	brne	.+4      	; 0x66c0 <MATCHI_LEN+0x2a>
    66bc:	ce 01       	movw	r24, r28
    66be:	02 c0       	rjmp	.+4      	; 0x66c4 <MATCHI_LEN+0x2e>
int MATCHI_LEN(char *str, char *pat)
{
    int len;

    if(!str || !pat)
        return(0);
    66c0:	80 e0       	ldi	r24, 0x00	; 0
    66c2:	90 e0       	ldi	r25, 0x00	; 0
    {
        if(strncasecmp(str,pat,len) == 0 )
            return(len);
    }
    return(0);
}
    66c4:	df 91       	pop	r29
    66c6:	cf 91       	pop	r28
    66c8:	08 95       	ret

000066ca <split_args>:
///@param[out] *argv[]: token array
///@param[in] max: maximum argument count
///@return count
MEMSPACE
int split_args(char *str, char *argv[], int max)
{
    66ca:	a0 e0       	ldi	r26, 0x00	; 0
    66cc:	b0 e0       	ldi	r27, 0x00	; 0
    66ce:	eb e6       	ldi	r30, 0x6B	; 107
    66d0:	f3 e3       	ldi	r31, 0x33	; 51
    66d2:	0c 94 1d e8 	jmp	0x1d03a	; 0x1d03a <__prologue_saves__+0x14>
    66d6:	dc 01       	movw	r26, r24
    66d8:	6a 01       	movw	r12, r20
    66da:	8b 01       	movw	r16, r22
    int i;
    int count = 0;
    // NULL ?

    for(i=0;i<max;++i)
    66dc:	fb 01       	movw	r30, r22
    66de:	80 e0       	ldi	r24, 0x00	; 0
    66e0:	90 e0       	ldi	r25, 0x00	; 0
    66e2:	8c 15       	cp	r24, r12
    66e4:	9d 05       	cpc	r25, r13
    66e6:	24 f4       	brge	.+8      	; 0x66f0 <split_args+0x26>
        argv[i] = NULL; 
    66e8:	11 92       	st	Z+, r1
    66ea:	11 92       	st	Z+, r1
{
    int i;
    int count = 0;
    // NULL ?

    for(i=0;i<max;++i)
    66ec:	01 96       	adiw	r24, 0x01	; 1
    66ee:	f9 cf       	rjmp	.-14     	; 0x66e2 <split_args+0x18>
        argv[i] = NULL; 

    // You may replace argv[0]
    // argv[count++] = "main";

    if(!max)
    66f0:	c1 14       	cp	r12, r1
    66f2:	d1 04       	cpc	r13, r1
    66f4:	d9 f1       	breq	.+118    	; 0x676c <split_args+0xa2>
        return(0);

    if(!str)
    66f6:	10 97       	sbiw	r26, 0x00	; 0
    66f8:	c9 f1       	breq	.+114    	; 0x676c <split_args+0xa2>
    66fa:	ee 24       	eor	r14, r14
    66fc:	e3 94       	inc	r14
    66fe:	f1 2c       	mov	r15, r1
    6700:	c0 e0       	ldi	r28, 0x00	; 0
    6702:	d0 e0       	ldi	r29, 0x00	; 0
        return(0);

    while(*str && count < max)
    6704:	8c 91       	ld	r24, X
    6706:	88 23       	and	r24, r24
    6708:	b1 f1       	breq	.+108    	; 0x6776 <split_args+0xac>
    670a:	cc 15       	cp	r28, r12
    670c:	dd 05       	cpc	r29, r13
    670e:	9c f5       	brge	.+102    	; 0x6776 <split_args+0xac>
    {
        str = skipspaces(str);
    6710:	cd 01       	movw	r24, r26
    6712:	f7 de       	rcall	.-530    	; 0x6502 <skipspaces>
        if(!*str)
    6714:	dc 01       	movw	r26, r24
    6716:	2c 91       	ld	r18, X
    6718:	22 23       	and	r18, r18
    671a:	69 f1       	breq	.+90     	; 0x6776 <split_args+0xac>
            break;

        // string processing
        if(*str == '"')
    671c:	22 32       	cpi	r18, 0x22	; 34
    671e:	79 f4       	brne	.+30     	; 0x673e <split_args+0x74>
        {
            ++str;
    6720:	fc 01       	movw	r30, r24
    6722:	31 96       	adiw	r30, 0x01	; 1
            // Save string pointer
            argv[count++] = str;
    6724:	d8 01       	movw	r26, r16
    6726:	ed 93       	st	X+, r30
    6728:	fc 93       	st	X, r31
    672a:	df 01       	movw	r26, r30
            while(*str && *str != '"')
    672c:	80 81       	ld	r24, Z
    672e:	31 96       	adiw	r30, 0x01	; 1
    6730:	88 23       	and	r24, r24
    6732:	a9 f0       	breq	.+42     	; 0x675e <split_args+0x94>
    6734:	82 32       	cpi	r24, 0x22	; 34
    6736:	c9 f7       	brne	.-14     	; 0x672a <split_args+0x60>
                ++str;
            if(*str == '"')
                *str++ = 0;
    6738:	1c 92       	st	X, r1
    673a:	df 01       	movw	r26, r30
    673c:	10 c0       	rjmp	.+32     	; 0x675e <split_args+0x94>
            continue;
        }

        argv[count++] = str;
    673e:	f8 01       	movw	r30, r16
    6740:	91 83       	std	Z+1, r25	; 0x01
    6742:	80 83       	st	Z, r24
    6744:	fc 01       	movw	r30, r24
    6746:	2e 2f       	mov	r18, r30
    6748:	9f 2f       	mov	r25, r31
        // Find size of token
        while(*str > ' ' && *str <= 0x7e)
    674a:	81 91       	ld	r24, Z+
    674c:	3f ed       	ldi	r19, 0xDF	; 223
    674e:	38 0f       	add	r19, r24
    6750:	3e 35       	cpi	r19, 0x5E	; 94
    6752:	c8 f3       	brcs	.-14     	; 0x6746 <split_args+0x7c>
            ++str;
        if(!*str)
    6754:	88 23       	and	r24, r24
    6756:	69 f0       	breq	.+26     	; 0x6772 <split_args+0xa8>
            break;
        *str  = 0;
    6758:	a2 2f       	mov	r26, r18
    675a:	b9 2f       	mov	r27, r25
    675c:	1d 92       	st	X+, r1
    675e:	21 96       	adiw	r28, 0x01	; 1
    6760:	ff ef       	ldi	r31, 0xFF	; 255
    6762:	ef 1a       	sub	r14, r31
    6764:	ff 0a       	sbc	r15, r31
    6766:	0e 5f       	subi	r16, 0xFE	; 254
    6768:	1f 4f       	sbci	r17, 0xFF	; 255
    676a:	cc cf       	rjmp	.-104    	; 0x6704 <split_args+0x3a>

    // You may replace argv[0]
    // argv[count++] = "main";

    if(!max)
        return(0);
    676c:	80 e0       	ldi	r24, 0x00	; 0
    676e:	90 e0       	ldi	r25, 0x00	; 0
    6770:	03 c0       	rjmp	.+6      	; 0x6778 <split_args+0xae>
            if(*str == '"')
                *str++ = 0;
            continue;
        }

        argv[count++] = str;
    6772:	c7 01       	movw	r24, r14
    6774:	01 c0       	rjmp	.+2      	; 0x6778 <split_args+0xae>
    6776:	ce 01       	movw	r24, r28
            break;
        *str  = 0;
        ++str;
    }
    return(count);
}
    6778:	cd b7       	in	r28, 0x3d	; 61
    677a:	de b7       	in	r29, 0x3e	; 62
    677c:	e8 e0       	ldi	r30, 0x08	; 8
    677e:	0c 94 39 e8 	jmp	0x1d072	; 0x1d072 <__epilogue_restores__+0x14>

00006782 <get_token>:
///
///@return pointer past token on success .
///@return NULL if no token found
MEMSPACE
char *get_token(char *str, char *token, int max)
{
    6782:	ef 92       	push	r14
    6784:	ff 92       	push	r15
    6786:	0f 93       	push	r16
    6788:	1f 93       	push	r17
    678a:	cf 93       	push	r28
    678c:	df 93       	push	r29
    678e:	eb 01       	movw	r28, r22
    6790:	8a 01       	movw	r16, r20

	*token = 0;
    6792:	18 82       	st	Y, r1

    if(!str || *str == 0)
    6794:	00 97       	sbiw	r24, 0x00	; 0
    6796:	89 f1       	breq	.+98     	; 0x67fa <get_token+0x78>
    6798:	fc 01       	movw	r30, r24
    679a:	20 81       	ld	r18, Z
    679c:	22 23       	and	r18, r18
        return(str);

    // Skip beginning spaces
    str = skipspaces(str);
    679e:	79 f1       	breq	.+94     	; 0x67fe <get_token+0x7c>
    // Delete all trailing spaces
    trim_tail(str);
    67a0:	b0 de       	rcall	.-672    	; 0x6502 <skipspaces>
    67a2:	7c 01       	movw	r14, r24
    67a4:	9e de       	rcall	.-708    	; 0x64e2 <trim_tail>
    67a6:	f7 01       	movw	r30, r14

    while(*str > ' ' && max > 0) {
    67a8:	cf 01       	movw	r24, r30
    67aa:	21 91       	ld	r18, Z+
    67ac:	21 32       	cpi	r18, 0x21	; 33
    67ae:	e0 f0       	brcs	.+56     	; 0x67e8 <get_token+0x66>
    67b0:	10 16       	cp	r1, r16
    67b2:	11 06       	cpc	r1, r17

        // String processing
        // A token can be a quoted string
        if(*str == '"')
    67b4:	cc f4       	brge	.+50     	; 0x67e8 <get_token+0x66>
    67b6:	22 32       	cpi	r18, 0x22	; 34
    67b8:	79 f4       	brne	.+30     	; 0x67d8 <get_token+0x56>
    67ba:	fc 01       	movw	r30, r24
    67bc:	31 96       	adiw	r30, 0x01	; 1
    67be:	0c 0f       	add	r16, r28
    67c0:	1d 1f       	adc	r17, r29
        {
            ++str;
            // We are pointing at the body of the quoted string now
            while(*str && *str != '"' && max > 0)
    67c2:	cf 01       	movw	r24, r30
    67c4:	21 91       	ld	r18, Z+
    67c6:	22 23       	and	r18, r18
    67c8:	79 f0       	breq	.+30     	; 0x67e8 <get_token+0x66>
    67ca:	22 32       	cpi	r18, 0x22	; 34
    67cc:	59 f0       	breq	.+22     	; 0x67e4 <get_token+0x62>
    67ce:	c0 17       	cp	r28, r16
    67d0:	d1 07       	cpc	r29, r17
            {
                *token++ = *str++;
    67d2:	51 f0       	breq	.+20     	; 0x67e8 <get_token+0x66>
    67d4:	29 93       	st	Y+, r18
            }
            break;
        }

        // If we have a comma, outside of a string, break
        if(*str == ',' )
    67d6:	f5 cf       	rjmp	.-22     	; 0x67c2 <get_token+0x40>
    67d8:	2c 32       	cpi	r18, 0x2C	; 44
            break;

        // copy token
        *token++ = *str++;
    67da:	31 f0       	breq	.+12     	; 0x67e8 <get_token+0x66>
        --max;
    67dc:	29 93       	st	Y+, r18
    67de:	01 50       	subi	r16, 0x01	; 1
                --max;
            }
            if(*str == '"')
            {
                ++str;
                *token = 0;
    67e0:	11 09       	sbc	r17, r1
        *token++ = *str++;
        --max;
    }

    // Skip trailing spaces
    str = skipspaces(str);
    67e2:	e2 cf       	rjmp	.-60     	; 0x67a8 <get_token+0x26>
    67e4:	cf 01       	movw	r24, r30
    67e6:	18 82       	st	Y, r1
    // If we had a trailing comma skip it
    if(*str == ',' )
    67e8:	8c de       	rcall	.-744    	; 0x6502 <skipspaces>
    67ea:	fc 01       	movw	r30, r24
    67ec:	80 81       	ld	r24, Z
        ++str;
    67ee:	8c 32       	cpi	r24, 0x2C	; 44

    *token = 0;
    67f0:	09 f4       	brne	.+2      	; 0x67f4 <get_token+0x72>
    return(str);
    67f2:	31 96       	adiw	r30, 0x01	; 1
    67f4:	18 82       	st	Y, r1
    67f6:	cf 01       	movw	r24, r30
    67f8:	02 c0       	rjmp	.+4      	; 0x67fe <get_token+0x7c>
}
    67fa:	80 e0       	ldi	r24, 0x00	; 0
    67fc:	90 e0       	ldi	r25, 0x00	; 0
    67fe:	cd b7       	in	r28, 0x3d	; 61
    6800:	de b7       	in	r29, 0x3e	; 62
    6802:	e6 e0       	ldi	r30, 0x06	; 6
    6804:	0c 94 3b e8 	jmp	0x1d076	; 0x1d076 <__epilogue_restores__+0x18>

00006808 <token>:
///@return string lenth on match.
///@return 0 on no match.

MEMSPACE
int token(char *str, char *pat)
{
    6808:	ef 92       	push	r14
    680a:	ff 92       	push	r15
    680c:	0f 93       	push	r16
    680e:	1f 93       	push	r17
    6810:	cf 93       	push	r28
    6812:	df 93       	push	r29
    int patlen;
    int len;
    char *ptr;

    if(!str || *str == 0)
    6814:	00 97       	sbiw	r24, 0x00	; 0
    6816:	11 f1       	breq	.+68     	; 0x685c <token+0x54>
    6818:	fc 01       	movw	r30, r24
    681a:	20 81       	ld	r18, Z
    681c:	22 23       	and	r18, r18
    681e:	f1 f0       	breq	.+60     	; 0x685c <token+0x54>
    6820:	7b 01       	movw	r14, r22
        return(0);

    ptr = skipspaces(str);
    6822:	8c 01       	movw	r16, r24
    6824:	6e de       	rcall	.-804    	; 0x6502 <skipspaces>
    len = 0;
    while(*ptr > ' ' && *ptr <= 0x7e )
    6826:	9c 01       	movw	r18, r24
    6828:	fc 01       	movw	r30, r24
    682a:	ef 01       	movw	r28, r30
    682c:	c2 1b       	sub	r28, r18
    682e:	d3 0b       	sbc	r29, r19
    6830:	91 91       	ld	r25, Z+
    6832:	91 52       	subi	r25, 0x21	; 33
    6834:	9e 35       	cpi	r25, 0x5E	; 94
    {
        ++len;
        ++ptr;
    }

    if(!len)
    6836:	c8 f3       	brcs	.-14     	; 0x682a <token+0x22>
    6838:	20 97       	sbiw	r28, 0x00	; 0
        return(0);

    patlen = strlen(pat);
    683a:	91 f0       	breq	.+36     	; 0x6860 <token+0x58>
    683c:	f7 01       	movw	r30, r14
    683e:	01 90       	ld	r0, Z+
    6840:	00 20       	and	r0, r0
    6842:	e9 f7       	brne	.-6      	; 0x683e <token+0x36>
    6844:	31 97       	sbiw	r30, 0x01	; 1
    6846:	ee 19       	sub	r30, r14

    if(len != patlen)
    6848:	ff 09       	sbc	r31, r15
    684a:	ec 17       	cp	r30, r28
    684c:	fd 07       	cpc	r31, r29
        return(0);

    if(strncmp(str,pat,patlen) == 0)
    684e:	31 f4       	brne	.+12     	; 0x685c <token+0x54>
    6850:	ae 01       	movw	r20, r28
    6852:	b7 01       	movw	r22, r14
    6854:	c8 01       	movw	r24, r16
    6856:	6c de       	rcall	.-808    	; 0x6530 <strncmp>
    6858:	89 2b       	or	r24, r25
    int patlen;
    int len;
    char *ptr;

    if(!str || *str == 0)
        return(0);
    685a:	11 f0       	breq	.+4      	; 0x6860 <token+0x58>
    685c:	c0 e0       	ldi	r28, 0x00	; 0
        return(0);

    if(strncmp(str,pat,patlen) == 0)
        return(len);
    return(0);
}
    685e:	d0 e0       	ldi	r29, 0x00	; 0
    6860:	ce 01       	movw	r24, r28
    6862:	cd b7       	in	r28, 0x3d	; 61
    6864:	de b7       	in	r29, 0x3e	; 62
    6866:	e6 e0       	ldi	r30, 0x06	; 6
    6868:	0c 94 3b e8 	jmp	0x1d076	; 0x1d076 <__epilogue_restores__+0x18>

0000686c <get_value>:
/// @param[in] str: string to examine
///
/// @return  value
MEMSPACE
int32_t get_value(char *str)
{ 
    686c:	a2 e0       	ldi	r26, 0x02	; 2
    686e:	b0 e0       	ldi	r27, 0x00	; 0
    6870:	ec e3       	ldi	r30, 0x3C	; 60
    6872:	f4 e3       	ldi	r31, 0x34	; 52
    6874:	0c 94 21 e8 	jmp	0x1d042	; 0x1d042 <__prologue_saves__+0x1c>
    int base;
    int ret;
    char *ptr;
    char *endptr;

    if(!str || *str == 0)
    6878:	00 97       	sbiw	r24, 0x00	; 0
    687a:	79 f1       	breq	.+94     	; 0x68da <get_value+0x6e>
    687c:	fc 01       	movw	r30, r24
    687e:	20 81       	ld	r18, Z
    6880:	22 23       	and	r18, r18
        return(0);

    ptr = skipspaces(str);
    6882:	59 f1       	breq	.+86     	; 0x68da <get_value+0x6e>
    6884:	3e de       	rcall	.-900    	; 0x6502 <skipspaces>
    base = 10;

    // convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    6886:	8c 01       	movw	r16, r24
    6888:	68 e1       	ldi	r22, 0x18	; 24
    688a:	77 e0       	ldi	r23, 0x07	; 7
    688c:	04 df       	rcall	.-504    	; 0x6696 <MATCHI_LEN>
    688e:	00 97       	sbiw	r24, 0x00	; 0
    {
        base = 16;
        ptr += ret;
    6890:	29 f0       	breq	.+10     	; 0x689c <get_value+0x30>
    6892:	08 0f       	add	r16, r24
    base = 10;

    // convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    {
        base = 16;
    6894:	19 1f       	adc	r17, r25
    6896:	40 e1       	ldi	r20, 0x10	; 16
    6898:	50 e0       	ldi	r21, 0x00	; 0
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    689a:	18 c0       	rjmp	.+48     	; 0x68cc <get_value+0x60>
    689c:	6b e1       	ldi	r22, 0x1B	; 27
    689e:	77 e0       	ldi	r23, 0x07	; 7
    68a0:	c8 01       	movw	r24, r16
    68a2:	f9 de       	rcall	.-526    	; 0x6696 <MATCHI_LEN>
    68a4:	00 97       	sbiw	r24, 0x00	; 0
    {
        base = 8;
        ptr += ret;
    68a6:	29 f0       	breq	.+10     	; 0x68b2 <get_value+0x46>
    68a8:	08 0f       	add	r16, r24
        base = 16;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    {
        base = 8;
    68aa:	19 1f       	adc	r17, r25
    68ac:	48 e0       	ldi	r20, 0x08	; 8
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    68ae:	50 e0       	ldi	r21, 0x00	; 0
    68b0:	0d c0       	rjmp	.+26     	; 0x68cc <get_value+0x60>
    68b2:	6e e1       	ldi	r22, 0x1E	; 30
    68b4:	77 e0       	ldi	r23, 0x07	; 7
    68b6:	c8 01       	movw	r24, r16
    68b8:	ee de       	rcall	.-548    	; 0x6696 <MATCHI_LEN>
    {
        base = 2;
        ptr += ret;
    68ba:	00 97       	sbiw	r24, 0x00	; 0
    68bc:	29 f0       	breq	.+10     	; 0x68c8 <get_value+0x5c>
        base = 8;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
    68be:	08 0f       	add	r16, r24
    68c0:	19 1f       	adc	r17, r25
    68c2:	42 e0       	ldi	r20, 0x02	; 2

    if(!str || *str == 0)
        return(0);

    ptr = skipspaces(str);
    base = 10;
    68c4:	50 e0       	ldi	r21, 0x00	; 0
    68c6:	02 c0       	rjmp	.+4      	; 0x68cc <get_value+0x60>
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
    68c8:	4a e0       	ldi	r20, 0x0A	; 10
    68ca:	50 e0       	ldi	r21, 0x00	; 0
    68cc:	be 01       	movw	r22, r28
    68ce:	6f 5f       	subi	r22, 0xFF	; 255
    68d0:	7f 4f       	sbci	r23, 0xFF	; 255
    68d2:	c8 01       	movw	r24, r16
    68d4:	0e 94 5a 47 	call	0x8eb4	; 0x8eb4 <strtol>
    int ret;
    char *ptr;
    char *endptr;

    if(!str || *str == 0)
        return(0);
    68d8:	03 c0       	rjmp	.+6      	; 0x68e0 <get_value+0x74>
    68da:	60 e0       	ldi	r22, 0x00	; 0
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
}
    68dc:	70 e0       	ldi	r23, 0x00	; 0
    68de:	cb 01       	movw	r24, r22
    68e0:	22 96       	adiw	r28, 0x02	; 2
    68e2:	e4 e0       	ldi	r30, 0x04	; 4
    68e4:	0c 94 3d e8 	jmp	0x1d07a	; 0x1d07a <__epilogue_restores__+0x1c>

000068e8 <enable_system_task>:
/// @brief Enable interrupts
/// @return void.
MEMSPACE
void enable_system_task()
{
    sei();
    68e8:	78 94       	sei
    68ea:	08 95       	ret

000068ec <install_timers_isr>:
///
/// @see ISR().
/// @return void.
MEMSPACE void install_timers_isr()
{
    cli();
    68ec:	f8 94       	cli
    TCCR1B=(1<<WGM12) | TIMER1_PRE_1;   // No Prescale
    68ee:	89 e0       	ldi	r24, 0x09	; 9
    68f0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    TCCR1A=0;
    68f4:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    OCR1A=(TIMER1_COUNTS_PER_TIC-1);    // 0 .. count
    68f8:	8f e1       	ldi	r24, 0x1F	; 31
    68fa:	9e e4       	ldi	r25, 0x4E	; 78
    68fc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    6900:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    TIMSK1 |= (1<<OCIE1A);              //Enable the Output Compare A interrupt
    6904:	ef e6       	ldi	r30, 0x6F	; 111
    6906:	f0 e0       	ldi	r31, 0x00	; 0
    6908:	80 81       	ld	r24, Z
    690a:	82 60       	ori	r24, 0x02	; 2
    690c:	80 83       	st	Z, r24
    sei();
    690e:	78 94       	sei
    6910:	08 95       	ret

00006912 <__vector_13>:
/// @brief AVR Timer Interrupt Vector
///
/// - calls execute_timers() - we call this the System task.
///
ISR(TIMER1_COMPA_vect)
{
    6912:	1f 92       	push	r1
    6914:	0f 92       	push	r0
    6916:	0f b6       	in	r0, 0x3f	; 63
    6918:	0f 92       	push	r0
    691a:	11 24       	eor	r1, r1
    691c:	0b b6       	in	r0, 0x3b	; 59
    691e:	0f 92       	push	r0
    6920:	2f 93       	push	r18
    6922:	3f 93       	push	r19
    6924:	4f 93       	push	r20
    6926:	5f 93       	push	r21
    6928:	6f 93       	push	r22
    692a:	7f 93       	push	r23
    692c:	8f 93       	push	r24
    692e:	9f 93       	push	r25
    6930:	af 93       	push	r26
    6932:	bf 93       	push	r27
    6934:	ef 93       	push	r30
    execute_timers();
    6936:	ff 93       	push	r31
}
    6938:	26 d2       	rcall	.+1100   	; 0x6d86 <execute_timers>
    693a:	ff 91       	pop	r31
    693c:	ef 91       	pop	r30
    693e:	bf 91       	pop	r27
    6940:	af 91       	pop	r26
    6942:	9f 91       	pop	r25
    6944:	8f 91       	pop	r24
    6946:	7f 91       	pop	r23
    6948:	6f 91       	pop	r22
    694a:	5f 91       	pop	r21
    694c:	4f 91       	pop	r20
    694e:	3f 91       	pop	r19
    6950:	2f 91       	pop	r18
    6952:	0f 90       	pop	r0
    6954:	0b be       	out	0x3b, r0	; 59
    6956:	0f 90       	pop	r0
    6958:	0f be       	out	0x3f, r0	; 63
    695a:	0f 90       	pop	r0
    695c:	1f 90       	pop	r1
    695e:	18 95       	reti

00006960 <clock_gettime>:
///
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id, struct timespec *ts)
{
    6960:	0f 93       	push	r16
    6962:	1f 93       	push	r17
    6964:	cf 93       	push	r28
    6966:	df 93       	push	r29
    6968:	fb 01       	movw	r30, r22
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;

    // disable interrupts
    cli();
    696a:	f8 94       	cli

    count1 = TCNT1;
    696c:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    6970:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    ts->tv_sec = __clock.tv_sec;
    6974:	80 91 59 1a 	lds	r24, 0x1A59	; 0x801a59 <__clock>
    6978:	90 91 5a 1a 	lds	r25, 0x1A5A	; 0x801a5a <__clock+0x1>
    697c:	a0 91 5b 1a 	lds	r26, 0x1A5B	; 0x801a5b <__clock+0x2>
    6980:	b0 91 5c 1a 	lds	r27, 0x1A5C	; 0x801a5c <__clock+0x3>
    6984:	80 83       	st	Z, r24
    6986:	91 83       	std	Z+1, r25	; 0x01
    6988:	a2 83       	std	Z+2, r26	; 0x02
    698a:	b3 83       	std	Z+3, r27	; 0x03
    ts->tv_nsec = __clock.tv_nsec;
    698c:	80 91 5d 1a 	lds	r24, 0x1A5D	; 0x801a5d <__clock+0x4>
    6990:	90 91 5e 1a 	lds	r25, 0x1A5E	; 0x801a5e <__clock+0x5>
    6994:	a0 91 5f 1a 	lds	r26, 0x1A5F	; 0x801a5f <__clock+0x6>
    6998:	b0 91 60 1a 	lds	r27, 0x1A60	; 0x801a60 <__clock+0x7>
    699c:	84 83       	std	Z+4, r24	; 0x04
    699e:	95 83       	std	Z+5, r25	; 0x05
    69a0:	a6 83       	std	Z+6, r26	; 0x06
    69a2:	b7 83       	std	Z+7, r27	; 0x07

    count2 = TCNT1;
    69a4:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    69a8:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    if( TIFR1 & (1<<OCF1A) )
    69ac:	b1 9b       	sbis	0x16, 1	; 22
    69ae:	03 c0       	rjmp	.+6      	; 0x69b6 <clock_gettime+0x56>
int clock_gettime(clockid_t clk_id, struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    69b0:	c0 e0       	ldi	r28, 0x00	; 0
    69b2:	d0 e0       	ldi	r29, 0x00	; 0
    69b4:	3f c0       	rjmp	.+126    	; 0x6a34 <clock_gettime+0xd4>
    count2 = TCNT1;

    if( TIFR1 & (1<<OCF1A) )
        pendingf = 1;

    if (count2 < count1)
    69b6:	82 17       	cp	r24, r18
    69b8:	93 07       	cpc	r25, r19
    69ba:	d0 f1       	brcs	.+116    	; 0x6a30 <clock_gettime+0xd0>
int clock_gettime(clockid_t clk_id, struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    69bc:	c0 e0       	ldi	r28, 0x00	; 0
    69be:	d0 e0       	ldi	r29, 0x00	; 0
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id, struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    69c0:	40 e0       	ldi	r20, 0x00	; 0
    69c2:	50 e0       	ldi	r21, 0x00	; 0
    69c4:	ba 01       	movw	r22, r20
    else
    {
        if( pendingf )
            offset = TIMER1_COUNTS_PER_TIC;       // overflow
    }
    offset += count2;
    69c6:	9a 01       	movw	r18, r20
    69c8:	ab 01       	movw	r20, r22
    69ca:	28 0f       	add	r18, r24
    69cc:	39 1f       	adc	r19, r25
    69ce:	41 1d       	adc	r20, r1
    69d0:	51 1d       	adc	r21, r1

    // enable interrupts
    sei();
    69d2:	78 94       	sei

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    69d4:	a2 e3       	ldi	r26, 0x32	; 50
    69d6:	b0 e0       	ldi	r27, 0x00	; 0
    69d8:	0e 94 f3 e7 	call	0x1cfe6	; 0x1cfe6 <__muluhisi3>
    69dc:	04 81       	ldd	r16, Z+4	; 0x04
    69de:	15 81       	ldd	r17, Z+5	; 0x05
    69e0:	26 81       	ldd	r18, Z+6	; 0x06
    69e2:	37 81       	ldd	r19, Z+7	; 0x07
    69e4:	dc 01       	movw	r26, r24
    69e6:	cb 01       	movw	r24, r22
    69e8:	80 0f       	add	r24, r16
    69ea:	91 1f       	adc	r25, r17
    69ec:	a2 1f       	adc	r26, r18
    69ee:	b3 1f       	adc	r27, r19

    if (ts->tv_nsec >= 1000000000L)
    69f0:	81 15       	cp	r24, r1
    69f2:	2a ec       	ldi	r18, 0xCA	; 202
    69f4:	92 07       	cpc	r25, r18
    69f6:	2a e9       	ldi	r18, 0x9A	; 154
    69f8:	a2 07       	cpc	r26, r18
    69fa:	2b e3       	ldi	r18, 0x3B	; 59
    69fc:	b2 07       	cpc	r27, r18
    69fe:	2c f4       	brge	.+10     	; 0x6a0a <clock_gettime+0xaa>
    // enable interrupts
    sei();

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    6a00:	84 83       	std	Z+4, r24	; 0x04
    6a02:	95 83       	std	Z+5, r25	; 0x05
    6a04:	a6 83       	std	Z+6, r26	; 0x06
    6a06:	b7 83       	std	Z+7, r27	; 0x07
    6a08:	1a c0       	rjmp	.+52     	; 0x6a3e <clock_gettime+0xde>

    if (ts->tv_nsec >= 1000000000L)
    {
        ts->tv_nsec -= 1000000000L;
    6a0a:	9a 5c       	subi	r25, 0xCA	; 202
    6a0c:	aa 49       	sbci	r26, 0x9A	; 154
    6a0e:	bb 43       	sbci	r27, 0x3B	; 59
    6a10:	84 83       	std	Z+4, r24	; 0x04
    6a12:	95 83       	std	Z+5, r25	; 0x05
    6a14:	a6 83       	std	Z+6, r26	; 0x06
    6a16:	b7 83       	std	Z+7, r27	; 0x07
        ts->tv_sec++;
    6a18:	80 81       	ld	r24, Z
    6a1a:	91 81       	ldd	r25, Z+1	; 0x01
    6a1c:	a2 81       	ldd	r26, Z+2	; 0x02
    6a1e:	b3 81       	ldd	r27, Z+3	; 0x03
    6a20:	01 96       	adiw	r24, 0x01	; 1
    6a22:	a1 1d       	adc	r26, r1
    6a24:	b1 1d       	adc	r27, r1
    6a26:	80 83       	st	Z, r24
    6a28:	91 83       	std	Z+1, r25	; 0x01
    6a2a:	a2 83       	std	Z+2, r26	; 0x02
    6a2c:	b3 83       	std	Z+3, r27	; 0x03
    }
    return(errorf);
    6a2e:	07 c0       	rjmp	.+14     	; 0x6a3e <clock_gettime+0xde>

    if (count2 < count1)
    {
///  note: counter2 < count1 implies ISR flag must be set
        if( !pendingf )
            errorf = -1;    // counter overflow and NO pending is an error!
    6a30:	cf ef       	ldi	r28, 0xFF	; 255
    6a32:	df ef       	ldi	r29, 0xFF	; 255
        offset = TIMER1_COUNTS_PER_TIC;           // overflow
    6a34:	40 e2       	ldi	r20, 0x20	; 32
    6a36:	5e e4       	ldi	r21, 0x4E	; 78
    6a38:	60 e0       	ldi	r22, 0x00	; 0
    6a3a:	70 e0       	ldi	r23, 0x00	; 0
    6a3c:	c4 cf       	rjmp	.-120    	; 0x69c6 <clock_gettime+0x66>
    {
        ts->tv_nsec -= 1000000000L;
        ts->tv_sec++;
    }
    return(errorf);
}
    6a3e:	ce 01       	movw	r24, r28
    6a40:	df 91       	pop	r29
    6a42:	cf 91       	pop	r28
    6a44:	1f 91       	pop	r17
    6a46:	0f 91       	pop	r16
    6a48:	08 95       	ret

00006a4a <clock_task>:
void disable_timers()
{
    if(timers_configured && timers_enabled)
    {
        disable_system_task();
        timers_enabled = 0;
    6a4a:	80 91 5d 1a 	lds	r24, 0x1A5D	; 0x801a5d <__clock+0x4>
    6a4e:	90 91 5e 1a 	lds	r25, 0x1A5E	; 0x801a5e <__clock+0x5>
    6a52:	a0 91 5f 1a 	lds	r26, 0x1A5F	; 0x801a5f <__clock+0x6>
    6a56:	b0 91 60 1a 	lds	r27, 0x1A60	; 0x801a60 <__clock+0x7>
    6a5a:	80 5c       	subi	r24, 0xC0	; 192
    6a5c:	9d 4b       	sbci	r25, 0xBD	; 189
    6a5e:	a0 4f       	sbci	r26, 0xF0	; 240
    6a60:	bf 4f       	sbci	r27, 0xFF	; 255
    6a62:	80 93 5d 1a 	sts	0x1A5D, r24	; 0x801a5d <__clock+0x4>
    6a66:	90 93 5e 1a 	sts	0x1A5E, r25	; 0x801a5e <__clock+0x5>
    6a6a:	a0 93 5f 1a 	sts	0x1A5F, r26	; 0x801a5f <__clock+0x6>
    6a6e:	b0 93 60 1a 	sts	0x1A60, r27	; 0x801a60 <__clock+0x7>
    6a72:	80 91 5d 1a 	lds	r24, 0x1A5D	; 0x801a5d <__clock+0x4>
    6a76:	90 91 5e 1a 	lds	r25, 0x1A5E	; 0x801a5e <__clock+0x5>
    6a7a:	a0 91 5f 1a 	lds	r26, 0x1A5F	; 0x801a5f <__clock+0x6>
    6a7e:	b0 91 60 1a 	lds	r27, 0x1A60	; 0x801a60 <__clock+0x7>
    6a82:	81 15       	cp	r24, r1
    6a84:	9a 4c       	sbci	r25, 0xCA	; 202
    6a86:	aa 49       	sbci	r26, 0x9A	; 154
    6a88:	bb 43       	sbci	r27, 0x3B	; 59
    6a8a:	dc f0       	brlt	.+54     	; 0x6ac2 <clock_task+0x78>
    6a8c:	80 91 59 1a 	lds	r24, 0x1A59	; 0x801a59 <__clock>
    6a90:	90 91 5a 1a 	lds	r25, 0x1A5A	; 0x801a5a <__clock+0x1>
    6a94:	a0 91 5b 1a 	lds	r26, 0x1A5B	; 0x801a5b <__clock+0x2>
    6a98:	b0 91 5c 1a 	lds	r27, 0x1A5C	; 0x801a5c <__clock+0x3>
    6a9c:	01 96       	adiw	r24, 0x01	; 1
    6a9e:	a1 1d       	adc	r26, r1
    6aa0:	b1 1d       	adc	r27, r1
    6aa2:	80 93 59 1a 	sts	0x1A59, r24	; 0x801a59 <__clock>
    6aa6:	90 93 5a 1a 	sts	0x1A5A, r25	; 0x801a5a <__clock+0x1>
    6aaa:	a0 93 5b 1a 	sts	0x1A5B, r26	; 0x801a5b <__clock+0x2>
    6aae:	b0 93 5c 1a 	sts	0x1A5C, r27	; 0x801a5c <__clock+0x3>
    6ab2:	10 92 5d 1a 	sts	0x1A5D, r1	; 0x801a5d <__clock+0x4>
    6ab6:	10 92 5e 1a 	sts	0x1A5E, r1	; 0x801a5e <__clock+0x5>
    6aba:	10 92 5f 1a 	sts	0x1A5F, r1	; 0x801a5f <__clock+0x6>
    6abe:	10 92 60 1a 	sts	0x1A60, r1	; 0x801a60 <__clock+0x7>
    6ac2:	08 95       	ret

00006ac4 <clock_settime.part.2>:
    6ac4:	fc 01       	movw	r30, r24
    6ac6:	84 81       	ldd	r24, Z+4	; 0x04
    6ac8:	95 81       	ldd	r25, Z+5	; 0x05
    6aca:	a6 81       	ldd	r26, Z+6	; 0x06
    6acc:	b7 81       	ldd	r27, Z+7	; 0x07
    6ace:	80 93 5d 1a 	sts	0x1A5D, r24	; 0x801a5d <__clock+0x4>
    6ad2:	90 93 5e 1a 	sts	0x1A5E, r25	; 0x801a5e <__clock+0x5>
    6ad6:	a0 93 5f 1a 	sts	0x1A5F, r26	; 0x801a5f <__clock+0x6>
    6ada:	b0 93 60 1a 	sts	0x1A60, r27	; 0x801a60 <__clock+0x7>
    6ade:	80 81       	ld	r24, Z
    6ae0:	91 81       	ldd	r25, Z+1	; 0x01
    6ae2:	a2 81       	ldd	r26, Z+2	; 0x02
    6ae4:	b3 81       	ldd	r27, Z+3	; 0x03
    6ae6:	80 93 59 1a 	sts	0x1A59, r24	; 0x801a59 <__clock>
    6aea:	90 93 5a 1a 	sts	0x1A5A, r25	; 0x801a5a <__clock+0x1>
    6aee:	a0 93 5b 1a 	sts	0x1A5B, r26	; 0x801a5b <__clock+0x2>
    6af2:	b0 93 5c 1a 	sts	0x1A5C, r27	; 0x801a5c <__clock+0x3>
    6af6:	80 91 5d 1a 	lds	r24, 0x1A5D	; 0x801a5d <__clock+0x4>
    6afa:	90 91 5e 1a 	lds	r25, 0x1A5E	; 0x801a5e <__clock+0x5>
    6afe:	a0 91 5f 1a 	lds	r26, 0x1A5F	; 0x801a5f <__clock+0x6>
    6b02:	b0 91 60 1a 	lds	r27, 0x1A60	; 0x801a60 <__clock+0x7>
    6b06:	44 81       	ldd	r20, Z+4	; 0x04
    6b08:	55 81       	ldd	r21, Z+5	; 0x05
    6b0a:	66 81       	ldd	r22, Z+6	; 0x06
    6b0c:	77 81       	ldd	r23, Z+7	; 0x07
    6b0e:	48 17       	cp	r20, r24
    6b10:	59 07       	cpc	r21, r25
    6b12:	6a 07       	cpc	r22, r26
    6b14:	7b 07       	cpc	r23, r27
    6b16:	b9 f6       	brne	.-82     	; 0x6ac6 <clock_settime.part.2+0x2>
    6b18:	80 91 59 1a 	lds	r24, 0x1A59	; 0x801a59 <__clock>
    6b1c:	90 91 5a 1a 	lds	r25, 0x1A5A	; 0x801a5a <__clock+0x1>
    6b20:	a0 91 5b 1a 	lds	r26, 0x1A5B	; 0x801a5b <__clock+0x2>
    6b24:	b0 91 5c 1a 	lds	r27, 0x1A5C	; 0x801a5c <__clock+0x3>
    6b28:	40 81       	ld	r20, Z
    6b2a:	51 81       	ldd	r21, Z+1	; 0x01
    6b2c:	62 81       	ldd	r22, Z+2	; 0x02
    6b2e:	73 81       	ldd	r23, Z+3	; 0x03
    6b30:	48 17       	cp	r20, r24
    6b32:	59 07       	cpc	r21, r25
    6b34:	6a 07       	cpc	r22, r26
    6b36:	7b 07       	cpc	r23, r27
    6b38:	31 f6       	brne	.-116    	; 0x6ac6 <clock_settime.part.2+0x2>
    6b3a:	80 e0       	ldi	r24, 0x00	; 0
    6b3c:	90 e0       	ldi	r25, 0x00	; 0
    6b3e:	08 95       	ret

00006b40 <set_timers>:
    6b40:	00 97       	sbiw	r24, 0x00	; 0
    6b42:	79 f1       	breq	.+94     	; 0x6ba2 <set_timers+0x62>
    6b44:	e1 e6       	ldi	r30, 0x61	; 97
    6b46:	fa e1       	ldi	r31, 0x1A	; 26
    6b48:	4f ef       	ldi	r20, 0xFF	; 255
    6b4a:	5f ef       	ldi	r21, 0xFF	; 255
    6b4c:	20 e0       	ldi	r18, 0x00	; 0
    6b4e:	30 e0       	ldi	r19, 0x00	; 0
    6b50:	60 81       	ld	r22, Z
    6b52:	71 81       	ldd	r23, Z+1	; 0x01
    6b54:	86 17       	cp	r24, r22
    6b56:	97 07       	cpc	r25, r23
    6b58:	79 f0       	breq	.+30     	; 0x6b78 <set_timers+0x38>
    6b5a:	67 2b       	or	r22, r23
    6b5c:	71 f4       	brne	.+28     	; 0x6b7a <set_timers+0x3a>
    6b5e:	f9 01       	movw	r30, r18
    6b60:	ee 0f       	add	r30, r30
    6b62:	ff 1f       	adc	r31, r31
    6b64:	e2 0f       	add	r30, r18
    6b66:	f3 1f       	adc	r31, r19
    6b68:	ef 59       	subi	r30, 0x9F	; 159
    6b6a:	f5 4e       	sbci	r31, 0xE5	; 229
    6b6c:	91 83       	std	Z+1, r25	; 0x01
    6b6e:	80 83       	st	Z, r24
    6b70:	81 e0       	ldi	r24, 0x01	; 1
    6b72:	82 83       	std	Z+2, r24	; 0x02
    6b74:	c9 01       	movw	r24, r18
    6b76:	08 95       	ret
    6b78:	a9 01       	movw	r20, r18
    6b7a:	2f 5f       	subi	r18, 0xFF	; 255
    6b7c:	3f 4f       	sbci	r19, 0xFF	; 255
    6b7e:	33 96       	adiw	r30, 0x03	; 3
    6b80:	28 30       	cpi	r18, 0x08	; 8
    6b82:	31 05       	cpc	r19, r1
    6b84:	29 f7       	brne	.-54     	; 0x6b50 <set_timers+0x10>
    6b86:	4f 3f       	cpi	r20, 0xFF	; 255
    6b88:	8f ef       	ldi	r24, 0xFF	; 255
    6b8a:	58 07       	cpc	r21, r24
    6b8c:	69 f4       	brne	.+26     	; 0x6ba8 <set_timers+0x68>
    6b8e:	82 ec       	ldi	r24, 0xC2	; 194
    6b90:	95 e0       	ldi	r25, 0x05	; 5
    6b92:	1f 92       	push	r1
    6b94:	9f 93       	push	r25
    6b96:	8f 93       	push	r24
    6b98:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    6b9c:	0f 90       	pop	r0
    6b9e:	0f 90       	pop	r0
    6ba0:	0f 90       	pop	r0
    6ba2:	8f ef       	ldi	r24, 0xFF	; 255
    6ba4:	9f ef       	ldi	r25, 0xFF	; 255
    6ba6:	08 95       	ret
    6ba8:	ca 01       	movw	r24, r20
    6baa:	08 95       	ret

00006bac <delete_all_timers>:
    6bac:	e1 e6       	ldi	r30, 0x61	; 97
    6bae:	fa e1       	ldi	r31, 0x1A	; 26
    6bb0:	12 82       	std	Z+2, r1	; 0x02
    6bb2:	11 82       	std	Z+1, r1	; 0x01
    6bb4:	10 82       	st	Z, r1
    6bb6:	33 96       	adiw	r30, 0x03	; 3
    6bb8:	8a e1       	ldi	r24, 0x1A	; 26
    6bba:	e9 37       	cpi	r30, 0x79	; 121
    6bbc:	f8 07       	cpc	r31, r24
    6bbe:	c1 f7       	brne	.-16     	; 0x6bb0 <delete_all_timers+0x4>
    6bc0:	08 95       	ret

00006bc2 <subtract_timespec>:
    6bc2:	0f 93       	push	r16
    6bc4:	1f 93       	push	r17
    6bc6:	cf 93       	push	r28
    6bc8:	df 93       	push	r29
    6bca:	fc 01       	movw	r30, r24
    6bcc:	84 81       	ldd	r24, Z+4	; 0x04
    6bce:	95 81       	ldd	r25, Z+5	; 0x05
    6bd0:	a6 81       	ldd	r26, Z+6	; 0x06
    6bd2:	b7 81       	ldd	r27, Z+7	; 0x07
    6bd4:	eb 01       	movw	r28, r22
    6bd6:	0c 81       	ldd	r16, Y+4	; 0x04
    6bd8:	1d 81       	ldd	r17, Y+5	; 0x05
    6bda:	2e 81       	ldd	r18, Y+6	; 0x06
    6bdc:	3f 81       	ldd	r19, Y+7	; 0x07
    6bde:	80 1b       	sub	r24, r16
    6be0:	91 0b       	sbc	r25, r17
    6be2:	a2 0b       	sbc	r26, r18
    6be4:	b3 0b       	sbc	r27, r19
    6be6:	b7 fd       	sbrc	r27, 7
    6be8:	05 c0       	rjmp	.+10     	; 0x6bf4 <subtract_timespec+0x32>
    6bea:	84 83       	std	Z+4, r24	; 0x04
    6bec:	95 83       	std	Z+5, r25	; 0x05
    6bee:	a6 83       	std	Z+6, r26	; 0x06
    6bf0:	b7 83       	std	Z+7, r27	; 0x07
    6bf2:	12 c0       	rjmp	.+36     	; 0x6c18 <subtract_timespec+0x56>
    6bf4:	96 53       	subi	r25, 0x36	; 54
    6bf6:	a5 46       	sbci	r26, 0x65	; 101
    6bf8:	b4 4c       	sbci	r27, 0xC4	; 196
    6bfa:	84 83       	std	Z+4, r24	; 0x04
    6bfc:	95 83       	std	Z+5, r25	; 0x05
    6bfe:	a6 83       	std	Z+6, r26	; 0x06
    6c00:	b7 83       	std	Z+7, r27	; 0x07
    6c02:	80 81       	ld	r24, Z
    6c04:	91 81       	ldd	r25, Z+1	; 0x01
    6c06:	a2 81       	ldd	r26, Z+2	; 0x02
    6c08:	b3 81       	ldd	r27, Z+3	; 0x03
    6c0a:	01 97       	sbiw	r24, 0x01	; 1
    6c0c:	a1 09       	sbc	r26, r1
    6c0e:	b1 09       	sbc	r27, r1
    6c10:	80 83       	st	Z, r24
    6c12:	91 83       	std	Z+1, r25	; 0x01
    6c14:	a2 83       	std	Z+2, r26	; 0x02
    6c16:	b3 83       	std	Z+3, r27	; 0x03
    6c18:	80 81       	ld	r24, Z
    6c1a:	91 81       	ldd	r25, Z+1	; 0x01
    6c1c:	a2 81       	ldd	r26, Z+2	; 0x02
    6c1e:	b3 81       	ldd	r27, Z+3	; 0x03
    6c20:	eb 01       	movw	r28, r22
    6c22:	48 81       	ld	r20, Y
    6c24:	59 81       	ldd	r21, Y+1	; 0x01
    6c26:	6a 81       	ldd	r22, Y+2	; 0x02
    6c28:	7b 81       	ldd	r23, Y+3	; 0x03
    6c2a:	84 1b       	sub	r24, r20
    6c2c:	95 0b       	sbc	r25, r21
    6c2e:	a6 0b       	sbc	r26, r22
    6c30:	b7 0b       	sbc	r27, r23
    6c32:	80 83       	st	Z, r24
    6c34:	91 83       	std	Z+1, r25	; 0x01
    6c36:	a2 83       	std	Z+2, r26	; 0x02
    6c38:	b3 83       	std	Z+3, r27	; 0x03
    6c3a:	df 91       	pop	r29
    6c3c:	cf 91       	pop	r28
    6c3e:	1f 91       	pop	r17
    6c40:	0f 91       	pop	r16
    6c42:	08 95       	ret

00006c44 <ts_to_str>:
    6c44:	fc 01       	movw	r30, r24
    6c46:	87 81       	ldd	r24, Z+7	; 0x07
    6c48:	8f 93       	push	r24
    6c4a:	86 81       	ldd	r24, Z+6	; 0x06
    6c4c:	8f 93       	push	r24
    6c4e:	85 81       	ldd	r24, Z+5	; 0x05
    6c50:	8f 93       	push	r24
    6c52:	84 81       	ldd	r24, Z+4	; 0x04
    6c54:	8f 93       	push	r24
    6c56:	83 81       	ldd	r24, Z+3	; 0x03
    6c58:	8f 93       	push	r24
    6c5a:	82 81       	ldd	r24, Z+2	; 0x02
    6c5c:	8f 93       	push	r24
    6c5e:	81 81       	ldd	r24, Z+1	; 0x01
    6c60:	8f 93       	push	r24
    6c62:	80 81       	ld	r24, Z
    6c64:	8f 93       	push	r24
    6c66:	88 eb       	ldi	r24, 0xB8	; 184
    6c68:	95 e0       	ldi	r25, 0x05	; 5
    6c6a:	1f 92       	push	r1
    6c6c:	9f 93       	push	r25
    6c6e:	8f 93       	push	r24
    6c70:	1f 92       	push	r1
    6c72:	8f e1       	ldi	r24, 0x1F	; 31
    6c74:	8f 93       	push	r24
    6c76:	8a e7       	ldi	r24, 0x7A	; 122
    6c78:	97 e1       	ldi	r25, 0x17	; 23
    6c7a:	9f 93       	push	r25
    6c7c:	8f 93       	push	r24
    6c7e:	0e 94 f7 46 	call	0x8dee	; 0x8dee <snprintf_P>
    6c82:	8d b7       	in	r24, 0x3d	; 61
    6c84:	9e b7       	in	r25, 0x3e	; 62
    6c86:	0f 96       	adiw	r24, 0x0f	; 15
    6c88:	0f b6       	in	r0, 0x3f	; 63
    6c8a:	f8 94       	cli
    6c8c:	9e bf       	out	0x3e, r25	; 62
    6c8e:	0f be       	out	0x3f, r0	; 63
    6c90:	8d bf       	out	0x3d, r24	; 61
    6c92:	8a e7       	ldi	r24, 0x7A	; 122
    6c94:	97 e1       	ldi	r25, 0x17	; 23
    6c96:	08 95       	ret

00006c98 <clock_elapsed_begin>:
    6c98:	62 e7       	ldi	r22, 0x72	; 114
    6c9a:	77 e1       	ldi	r23, 0x17	; 23
    6c9c:	80 e0       	ldi	r24, 0x00	; 0
    6c9e:	90 e0       	ldi	r25, 0x00	; 0
    6ca0:	5f ce       	rjmp	.-834    	; 0x6960 <clock_gettime>
    6ca2:	08 95       	ret

00006ca4 <clock_elapsed_end>:
    6ca4:	a8 e0       	ldi	r26, 0x08	; 8
    6ca6:	b0 e0       	ldi	r27, 0x00	; 0
    6ca8:	e8 e5       	ldi	r30, 0x58	; 88
    6caa:	f6 e3       	ldi	r31, 0x36	; 54
    6cac:	0c 94 21 e8 	jmp	0x1d042	; 0x1d042 <__prologue_saves__+0x1c>
    6cb0:	8c 01       	movw	r16, r24
    6cb2:	be 01       	movw	r22, r28
    6cb4:	6f 5f       	subi	r22, 0xFF	; 255
    6cb6:	7f 4f       	sbci	r23, 0xFF	; 255
    6cb8:	80 e0       	ldi	r24, 0x00	; 0
    6cba:	90 e0       	ldi	r25, 0x00	; 0
    6cbc:	51 de       	rcall	.-862    	; 0x6960 <clock_gettime>
    6cbe:	62 e7       	ldi	r22, 0x72	; 114
    6cc0:	77 e1       	ldi	r23, 0x17	; 23
    6cc2:	ce 01       	movw	r24, r28
    6cc4:	01 96       	adiw	r24, 0x01	; 1
    6cc6:	7d df       	rcall	.-262    	; 0x6bc2 <subtract_timespec>
    6cc8:	01 15       	cp	r16, r1
    6cca:	11 05       	cpc	r17, r1
    6ccc:	c1 f0       	breq	.+48     	; 0x6cfe <clock_elapsed_end+0x5a>
    6cce:	f8 01       	movw	r30, r16
    6cd0:	80 81       	ld	r24, Z
    6cd2:	88 23       	and	r24, r24
    6cd4:	a1 f0       	breq	.+40     	; 0x6cfe <clock_elapsed_end+0x5a>
    6cd6:	ce 01       	movw	r24, r28
    6cd8:	01 96       	adiw	r24, 0x01	; 1
    6cda:	b4 df       	rcall	.-152    	; 0x6c44 <ts_to_str>
    6cdc:	9f 93       	push	r25
    6cde:	8f 93       	push	r24
    6ce0:	1f 93       	push	r17
    6ce2:	0f 93       	push	r16
    6ce4:	8b e9       	ldi	r24, 0x9B	; 155
    6ce6:	95 e0       	ldi	r25, 0x05	; 5
    6ce8:	1f 92       	push	r1
    6cea:	9f 93       	push	r25
    6cec:	8f 93       	push	r24
    6cee:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    6cf2:	0f b6       	in	r0, 0x3f	; 63
    6cf4:	f8 94       	cli
    6cf6:	de bf       	out	0x3e, r29	; 62
    6cf8:	0f be       	out	0x3f, r0	; 63
    6cfa:	cd bf       	out	0x3d, r28	; 61
    6cfc:	11 c0       	rjmp	.+34     	; 0x6d20 <clock_elapsed_end+0x7c>
    6cfe:	ce 01       	movw	r24, r28
    6d00:	01 96       	adiw	r24, 0x01	; 1
    6d02:	a0 df       	rcall	.-192    	; 0x6c44 <ts_to_str>
    6d04:	9f 93       	push	r25
    6d06:	8f 93       	push	r24
    6d08:	80 e9       	ldi	r24, 0x90	; 144
    6d0a:	95 e0       	ldi	r25, 0x05	; 5
    6d0c:	1f 92       	push	r1
    6d0e:	9f 93       	push	r25
    6d10:	8f 93       	push	r24
    6d12:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    6d16:	0f 90       	pop	r0
    6d18:	0f 90       	pop	r0
    6d1a:	0f 90       	pop	r0
    6d1c:	0f 90       	pop	r0
    6d1e:	0f 90       	pop	r0
    6d20:	28 96       	adiw	r28, 0x08	; 8
    6d22:	e4 e0       	ldi	r30, 0x04	; 4
    6d24:	0c 94 3d e8 	jmp	0x1d07a	; 0x1d07a <__epilogue_restores__+0x1c>

00006d28 <clock_clear>:
    6d28:	a8 e0       	ldi	r26, 0x08	; 8
    6d2a:	b0 e0       	ldi	r27, 0x00	; 0
    6d2c:	ea e9       	ldi	r30, 0x9A	; 154
    6d2e:	f6 e3       	ldi	r31, 0x36	; 54
    6d30:	0c 94 23 e8 	jmp	0x1d046	; 0x1d046 <__prologue_saves__+0x20>
    6d34:	1d 82       	std	Y+5, r1	; 0x05
    6d36:	1e 82       	std	Y+6, r1	; 0x06
    6d38:	1f 82       	std	Y+7, r1	; 0x07
    6d3a:	18 86       	std	Y+8, r1	; 0x08
    6d3c:	19 82       	std	Y+1, r1	; 0x01
    6d3e:	1a 82       	std	Y+2, r1	; 0x02
    6d40:	1b 82       	std	Y+3, r1	; 0x03
    6d42:	1c 82       	std	Y+4, r1	; 0x04
    6d44:	ce 01       	movw	r24, r28
    6d46:	01 96       	adiw	r24, 0x01	; 1
    6d48:	bd de       	rcall	.-646    	; 0x6ac4 <clock_settime.part.2>
    6d4a:	e9 e7       	ldi	r30, 0x79	; 121
    6d4c:	fa e1       	ldi	r31, 0x1A	; 26
    6d4e:	11 82       	std	Z+1, r1	; 0x01
    6d50:	10 82       	st	Z, r1
    6d52:	13 82       	std	Z+3, r1	; 0x03
    6d54:	12 82       	std	Z+2, r1	; 0x02
    6d56:	28 96       	adiw	r28, 0x08	; 8
    6d58:	e2 e0       	ldi	r30, 0x02	; 2
    6d5a:	0c 94 3f e8 	jmp	0x1d07e	; 0x1d07e <__epilogue_restores__+0x20>

00006d5e <enable_timers>:
///
/// @return  void
MEMSPACE
void enable_timers()
{
    if(timers_configured && !timers_enabled)
    6d5e:	80 91 9a 17 	lds	r24, 0x179A	; 0x80179a <timers_configured>
    6d62:	90 91 9b 17 	lds	r25, 0x179B	; 0x80179b <timers_configured+0x1>
    6d66:	89 2b       	or	r24, r25
    6d68:	69 f0       	breq	.+26     	; 0x6d84 <enable_timers+0x26>
    6d6a:	80 91 9c 17 	lds	r24, 0x179C	; 0x80179c <timers_enabled>
    6d6e:	90 91 9d 17 	lds	r25, 0x179D	; 0x80179d <timers_enabled+0x1>
    6d72:	89 2b       	or	r24, r25
    {
        enable_system_task();
    6d74:	39 f4       	brne	.+14     	; 0x6d84 <enable_timers+0x26>
        timers_enabled = 1;
    6d76:	b8 dd       	rcall	.-1168   	; 0x68e8 <enable_system_task>
    6d78:	81 e0       	ldi	r24, 0x01	; 1
    6d7a:	90 e0       	ldi	r25, 0x00	; 0
    6d7c:	90 93 9d 17 	sts	0x179D, r25	; 0x80179d <timers_enabled+0x1>
    6d80:	80 93 9c 17 	sts	0x179C, r24	; 0x80179c <timers_enabled>
    6d84:	08 95       	ret

00006d86 <execute_timers>:
/// @brief  Execute all user timers at SYSTEM_HZ rate.
///  Called by system task
///
/// @return  void
void execute_timers()
{
    6d86:	cf 93       	push	r28
    6d88:	df 93       	push	r29
    6d8a:	c1 e6       	ldi	r28, 0x61	; 97
    6d8c:	da e1       	ldi	r29, 0x1A	; 26
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
    6d8e:	8a 81       	ldd	r24, Y+2	; 0x02
    6d90:	88 23       	and	r24, r24
    6d92:	29 f0       	breq	.+10     	; 0x6d9e <execute_timers+0x18>
    6d94:	e8 81       	ld	r30, Y
    6d96:	f9 81       	ldd	r31, Y+1	; 0x01
    6d98:	30 97       	sbiw	r30, 0x00	; 0
    6d9a:	09 f0       	breq	.+2      	; 0x6d9e <execute_timers+0x18>
            (*timer_irq[i].user_timer_handler)();
    6d9c:	09 95       	icall
    6d9e:	23 96       	adiw	r28, 0x03	; 3
/// @return  void
void execute_timers()
{
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    6da0:	8a e1       	ldi	r24, 0x1A	; 26
    6da2:	c9 37       	cpi	r28, 0x79	; 121
    6da4:	d8 07       	cpc	r29, r24
    6da6:	99 f7       	brne	.-26     	; 0x6d8e <execute_timers+0x8>
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
            (*timer_irq[i].user_timer_handler)();
    }
}
    6da8:	df 91       	pop	r29
    6daa:	cf 91       	pop	r28
    6dac:	08 95       	ret

00006dae <init_timers>:
//
/// @return  void
MEMSPACE
void init_timers()
{
    printf("Timers init called\n");
    6dae:	8c e7       	ldi	r24, 0x7C	; 124
    6db0:	95 e0       	ldi	r25, 0x05	; 5
    6db2:	1f 92       	push	r1
    6db4:	9f 93       	push	r25
    6db6:	8f 93       	push	r24
    6db8:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>

    if(!timers_configured)
    6dbc:	0f 90       	pop	r0
    6dbe:	0f 90       	pop	r0
    6dc0:	0f 90       	pop	r0
    6dc2:	80 91 9a 17 	lds	r24, 0x179A	; 0x80179a <timers_configured>
    6dc6:	90 91 9b 17 	lds	r25, 0x179B	; 0x80179b <timers_configured+0x1>
    6dca:	89 2b       	or	r24, r25
    {
        install_timers_isr();
    6dcc:	a9 f4       	brne	.+42     	; 0x6df8 <init_timers+0x4a>
        timers_configured = 1;
    6dce:	8e dd       	rcall	.-1252   	; 0x68ec <install_timers_isr>
    6dd0:	81 e0       	ldi	r24, 0x01	; 1
    6dd2:	90 e0       	ldi	r25, 0x00	; 0
    6dd4:	90 93 9b 17 	sts	0x179B, r25	; 0x80179b <timers_configured+0x1>
    6dd8:	80 93 9a 17 	sts	0x179A, r24	; 0x80179a <timers_configured>
        timers_enabled = 0;
    6ddc:	10 92 9d 17 	sts	0x179D, r1	; 0x80179d <timers_enabled+0x1>
    6de0:	10 92 9c 17 	sts	0x179C, r1	; 0x80179c <timers_enabled>
        printf("Timers configured\n");
    6de4:	89 e6       	ldi	r24, 0x69	; 105
    6de6:	95 e0       	ldi	r25, 0x05	; 5
    6de8:	1f 92       	push	r1
    6dea:	9f 93       	push	r25
    6dec:	8f 93       	push	r24
    6dee:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    }

    delete_all_timers();
    6df2:	0f 90       	pop	r0

    clock_clear();
    6df4:	0f 90       	pop	r0
    6df6:	0f 90       	pop	r0
    printf("Clock Init\n");
    6df8:	d9 de       	rcall	.-590    	; 0x6bac <delete_all_timers>
    6dfa:	96 df       	rcall	.-212    	; 0x6d28 <clock_clear>
    6dfc:	8d e5       	ldi	r24, 0x5D	; 93
    6dfe:	95 e0       	ldi	r25, 0x05	; 5
    6e00:	1f 92       	push	r1
    6e02:	9f 93       	push	r25
    6e04:	8f 93       	push	r24

///  See time.c
    if(set_timers(clock_task,1) == -1)
    6e06:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    6e0a:	61 e0       	ldi	r22, 0x01	; 1
    6e0c:	70 e0       	ldi	r23, 0x00	; 0
    6e0e:	85 e2       	ldi	r24, 0x25	; 37
    6e10:	95 e3       	ldi	r25, 0x35	; 53
    6e12:	96 de       	rcall	.-724    	; 0x6b40 <set_timers>
    6e14:	0f 90       	pop	r0
    6e16:	0f 90       	pop	r0
    6e18:	0f 90       	pop	r0
        printf("Clock task init failed\n");
    6e1a:	01 96       	adiw	r24, 0x01	; 1
    6e1c:	51 f4       	brne	.+20     	; 0x6e32 <init_timers+0x84>
    6e1e:	85 e4       	ldi	r24, 0x45	; 69
    6e20:	95 e0       	ldi	r25, 0x05	; 5
    6e22:	1f 92       	push	r1
    6e24:	9f 93       	push	r25
    6e26:	8f 93       	push	r24
    6e28:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    6e2c:	0f 90       	pop	r0
    printf("Clock Installed\n");
    6e2e:	0f 90       	pop	r0
    6e30:	0f 90       	pop	r0
    6e32:	84 e3       	ldi	r24, 0x34	; 52
    6e34:	95 e0       	ldi	r25, 0x05	; 5
    6e36:	1f 92       	push	r1
    6e38:	9f 93       	push	r25

    enable_timers();
    6e3a:	8f 93       	push	r24
    6e3c:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>

    printf("Timers enabled\n");
    6e40:	8e df       	rcall	.-228    	; 0x6d5e <enable_timers>
    6e42:	84 e2       	ldi	r24, 0x24	; 36
    6e44:	95 e0       	ldi	r25, 0x05	; 5
    6e46:	1f 92       	push	r1
    6e48:	9f 93       	push	r25
    6e4a:	8f 93       	push	r24
}
    6e4c:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    6e50:	0f 90       	pop	r0
    6e52:	0f 90       	pop	r0
    6e54:	0f 90       	pop	r0
    6e56:	0f 90       	pop	r0
    6e58:	0f 90       	pop	r0
    6e5a:	0f 90       	pop	r0
    6e5c:	08 95       	ret

00006e5e <clock_getres>:
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_getres(clockid_t clk_id, struct timespec *res)
{
    res->tv_sec = 0;
    6e5e:	fb 01       	movw	r30, r22
    6e60:	10 82       	st	Z, r1
    6e62:	11 82       	std	Z+1, r1	; 0x01
    6e64:	12 82       	std	Z+2, r1	; 0x02
    6e66:	13 82       	std	Z+3, r1	; 0x03
    res->tv_nsec = SYSTEM_TASK_TIC_NS;
    6e68:	80 e4       	ldi	r24, 0x40	; 64
    6e6a:	92 e4       	ldi	r25, 0x42	; 66
    6e6c:	af e0       	ldi	r26, 0x0F	; 15
    6e6e:	b0 e0       	ldi	r27, 0x00	; 0
    6e70:	84 83       	std	Z+4, r24	; 0x04
    6e72:	95 83       	std	Z+5, r25	; 0x05
    6e74:	a6 83       	std	Z+6, r26	; 0x06
    6e76:	b7 83       	std	Z+7, r27	; 0x07
    return(0);
}
    6e78:	80 e0       	ldi	r24, 0x00	; 0
    6e7a:	90 e0       	ldi	r25, 0x00	; 0
    6e7c:	08 95       	ret

00006e7e <clock_settime>:
///
/// @return 0.
MEMSPACE
int clock_settime(clockid_t clk_id, const struct timespec *ts)
{
    if(clk_id)
    6e7e:	89 2b       	or	r24, r25
    6e80:	19 f4       	brne	.+6      	; 0x6e88 <clock_settime+0xa>
    6e82:	cb 01       	movw	r24, r22
    6e84:	1f ce       	rjmp	.-962    	; 0x6ac4 <clock_settime.part.2>
    6e86:	08 95       	ret
        return(-1);
    6e88:	8f ef       	ldi	r24, 0xFF	; 255
    6e8a:	9f ef       	ldi	r25, 0xFF	; 255
            continue;
        break;
    }

    return(0);
}
    6e8c:	08 95       	ret

00006e8e <IS_Leap>:
void print_dst_gmt()
{
    printf("DST START       GMT: %s\n", ctime_gm(&dst.start));
    printf("DST END         GMT: %s\n", ctime_gm(&dst.end));

}
    6e8e:	9c 01       	movw	r18, r24
    6e90:	83 70       	andi	r24, 0x03	; 3
    6e92:	99 27       	eor	r25, r25
    6e94:	00 97       	sbiw	r24, 0x00	; 0
    6e96:	69 f4       	brne	.+26     	; 0x6eb2 <IS_Leap+0x24>
    6e98:	2c 36       	cpi	r18, 0x6C	; 108
    6e9a:	47 e0       	ldi	r20, 0x07	; 7
    6e9c:	34 07       	cpc	r19, r20
    6e9e:	59 f0       	breq	.+22     	; 0x6eb6 <IS_Leap+0x28>
    6ea0:	51 e0       	ldi	r21, 0x01	; 1
    6ea2:	40 e0       	ldi	r20, 0x00	; 0
    6ea4:	24 33       	cpi	r18, 0x34	; 52
    6ea6:	38 40       	sbci	r19, 0x08	; 8
    6ea8:	09 f4       	brne	.+2      	; 0x6eac <IS_Leap+0x1e>
    6eaa:	50 e0       	ldi	r21, 0x00	; 0
    6eac:	85 2f       	mov	r24, r21
    6eae:	94 2f       	mov	r25, r20
    6eb0:	08 95       	ret
    6eb2:	80 e0       	ldi	r24, 0x00	; 0
    6eb4:	90 e0       	ldi	r25, 0x00	; 0
    6eb6:	08 95       	ret

00006eb8 <tm_mon_to_ascii>:
    6eb8:	8c 30       	cpi	r24, 0x0C	; 12
    6eba:	91 05       	cpc	r25, r1
    6ebc:	40 f4       	brcc	.+16     	; 0x6ece <tm_mon_to_ascii+0x16>
    6ebe:	88 0f       	add	r24, r24
    6ec0:	99 1f       	adc	r25, r25
    6ec2:	fc 01       	movw	r30, r24
    6ec4:	ee 5e       	subi	r30, 0xEE	; 238
    6ec6:	fe 4f       	sbci	r31, 0xFE	; 254
    6ec8:	80 81       	ld	r24, Z
    6eca:	91 81       	ldd	r25, Z+1	; 0x01
    6ecc:	08 95       	ret
    6ece:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__Month+0x18>
    6ed2:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <__Month+0x19>
    6ed6:	08 95       	ret

00006ed8 <Days_Per_Month>:
    6ed8:	cf 93       	push	r28
    6eda:	df 93       	push	r29
    6edc:	8c 30       	cpi	r24, 0x0C	; 12
    6ede:	91 05       	cpc	r25, r1
    6ee0:	24 f0       	brlt	.+8      	; 0x6eea <Days_Per_Month+0x12>
    6ee2:	6f 5f       	subi	r22, 0xFF	; 255
    6ee4:	7f 4f       	sbci	r23, 0xFF	; 255
    6ee6:	0c 97       	sbiw	r24, 0x0c	; 12
    6ee8:	f9 cf       	rjmp	.-14     	; 0x6edc <Days_Per_Month+0x4>
    6eea:	97 ff       	sbrs	r25, 7
    6eec:	04 c0       	rjmp	.+8      	; 0x6ef6 <Days_Per_Month+0x1e>
    6eee:	61 50       	subi	r22, 0x01	; 1
    6ef0:	71 09       	sbc	r23, r1
    6ef2:	0c 96       	adiw	r24, 0x0c	; 12
    6ef4:	fa cf       	rjmp	.-12     	; 0x6eea <Days_Per_Month+0x12>
    6ef6:	fc 01       	movw	r30, r24
    6ef8:	ee 0f       	add	r30, r30
    6efa:	ff 1f       	adc	r31, r31
    6efc:	ed 59       	subi	r30, 0x9D	; 157
    6efe:	fd 4f       	sbci	r31, 0xFD	; 253
    6f00:	c0 81       	ld	r28, Z
    6f02:	d1 81       	ldd	r29, Z+1	; 0x01
    6f04:	01 97       	sbiw	r24, 0x01	; 1
    6f06:	29 f4       	brne	.+10     	; 0x6f12 <Days_Per_Month+0x3a>
    6f08:	cb 01       	movw	r24, r22
    6f0a:	c1 df       	rcall	.-126    	; 0x6e8e <IS_Leap>
    6f0c:	89 2b       	or	r24, r25
    6f0e:	09 f0       	breq	.+2      	; 0x6f12 <Days_Per_Month+0x3a>
    6f10:	21 96       	adiw	r28, 0x01	; 1
    6f12:	ce 01       	movw	r24, r28
    6f14:	df 91       	pop	r29
    6f16:	cf 91       	pop	r28
    6f18:	08 95       	ret

00006f1a <time_to_tm>:
    6f1a:	a0 e0       	ldi	r26, 0x00	; 0
    6f1c:	b0 e0       	ldi	r27, 0x00	; 0
    6f1e:	e3 e9       	ldi	r30, 0x93	; 147
    6f20:	f7 e3       	ldi	r31, 0x37	; 55
    6f22:	0c 94 15 e8 	jmp	0x1d02a	; 0x1d02a <__prologue_saves__+0x4>
    6f26:	e8 01       	movw	r28, r16
    6f28:	e6 e1       	ldi	r30, 0x16	; 22
    6f2a:	d8 01       	movw	r26, r16
    6f2c:	1d 92       	st	X+, r1
    6f2e:	ea 95       	dec	r30
    6f30:	e9 f7       	brne	.-6      	; 0x6f2c <time_to_tm+0x12>
    6f32:	61 15       	cp	r22, r1
    6f34:	bd e5       	ldi	r27, 0x5D	; 93
    6f36:	7b 07       	cpc	r23, r27
    6f38:	bd ef       	ldi	r27, 0xFD	; 253
    6f3a:	8b 07       	cpc	r24, r27
    6f3c:	bf ef       	ldi	r27, 0xFF	; 255
    6f3e:	9b 07       	cpc	r25, r27
    6f40:	08 f0       	brcs	.+2      	; 0x6f44 <time_to_tm+0x2a>
    6f42:	c0 c0       	rjmp	.+384    	; 0x70c4 <time_to_tm+0x1aa>
    6f44:	6b 01       	movw	r12, r22
    6f46:	7c 01       	movw	r14, r24
    6f48:	c2 1a       	sub	r12, r18
    6f4a:	d3 0a       	sbc	r13, r19
    6f4c:	e4 0a       	sbc	r14, r20
    6f4e:	f5 0a       	sbc	r15, r21
    6f50:	46 01       	movw	r8, r12
    6f52:	57 01       	movw	r10, r14
    6f54:	e0 e8       	ldi	r30, 0x80	; 128
    6f56:	ce 16       	cp	r12, r30
    6f58:	ee ea       	ldi	r30, 0xAE	; 174
    6f5a:	de 06       	cpc	r13, r30
    6f5c:	ee ef       	ldi	r30, 0xFE	; 254
    6f5e:	ee 06       	cpc	r14, r30
    6f60:	ef ef       	ldi	r30, 0xFF	; 255
    6f62:	fe 06       	cpc	r15, r30
    6f64:	50 f0       	brcs	.+20     	; 0x6f7a <time_to_tm+0x60>
    6f66:	80 e8       	ldi	r24, 0x80	; 128
    6f68:	88 0e       	add	r8, r24
    6f6a:	81 e5       	ldi	r24, 0x51	; 81
    6f6c:	98 1e       	adc	r9, r24
    6f6e:	81 e0       	ldi	r24, 0x01	; 1
    6f70:	a8 1e       	adc	r10, r24
    6f72:	b1 1c       	adc	r11, r1
    6f74:	01 e0       	ldi	r16, 0x01	; 1
    6f76:	10 e0       	ldi	r17, 0x00	; 0
    6f78:	02 c0       	rjmp	.+4      	; 0x6f7e <time_to_tm+0x64>
    6f7a:	00 e0       	ldi	r16, 0x00	; 0
    6f7c:	10 e0       	ldi	r17, 0x00	; 0
    6f7e:	8c e3       	ldi	r24, 0x3C	; 60
    6f80:	48 2e       	mov	r4, r24
    6f82:	51 2c       	mov	r5, r1
    6f84:	61 2c       	mov	r6, r1
    6f86:	71 2c       	mov	r7, r1
    6f88:	c5 01       	movw	r24, r10
    6f8a:	b4 01       	movw	r22, r8
    6f8c:	a3 01       	movw	r20, r6
    6f8e:	92 01       	movw	r18, r4
    6f90:	0e 94 91 e7 	call	0x1cf22	; 0x1cf22 <__udivmodsi4>
    6f94:	79 83       	std	Y+1, r23	; 0x01
    6f96:	68 83       	st	Y, r22
    6f98:	ca 01       	movw	r24, r20
    6f9a:	b9 01       	movw	r22, r18
    6f9c:	a3 01       	movw	r20, r6
    6f9e:	92 01       	movw	r18, r4
    6fa0:	0e 94 91 e7 	call	0x1cf22	; 0x1cf22 <__udivmodsi4>
    6fa4:	7b 83       	std	Y+3, r23	; 0x03
    6fa6:	6a 83       	std	Y+2, r22	; 0x02
    6fa8:	c5 01       	movw	r24, r10
    6faa:	b4 01       	movw	r22, r8
    6fac:	20 e1       	ldi	r18, 0x10	; 16
    6fae:	3e e0       	ldi	r19, 0x0E	; 14
    6fb0:	40 e0       	ldi	r20, 0x00	; 0
    6fb2:	50 e0       	ldi	r21, 0x00	; 0
    6fb4:	0e 94 91 e7 	call	0x1cf22	; 0x1cf22 <__udivmodsi4>
    6fb8:	ca 01       	movw	r24, r20
    6fba:	b9 01       	movw	r22, r18
    6fbc:	28 e1       	ldi	r18, 0x18	; 24
    6fbe:	30 e0       	ldi	r19, 0x00	; 0
    6fc0:	40 e0       	ldi	r20, 0x00	; 0
    6fc2:	50 e0       	ldi	r21, 0x00	; 0
    6fc4:	0e 94 91 e7 	call	0x1cf22	; 0x1cf22 <__udivmodsi4>
    6fc8:	7d 83       	std	Y+5, r23	; 0x05
    6fca:	6c 83       	std	Y+4, r22	; 0x04
    6fcc:	01 15       	cp	r16, r1
    6fce:	11 05       	cpc	r17, r1
    6fd0:	89 f0       	breq	.+34     	; 0x6ff4 <time_to_tm+0xda>
    6fd2:	85 e4       	ldi	r24, 0x45	; 69
    6fd4:	90 e0       	ldi	r25, 0x00	; 0
    6fd6:	9b 87       	std	Y+11, r25	; 0x0b
    6fd8:	8a 87       	std	Y+10, r24	; 0x0a
    6fda:	8b e0       	ldi	r24, 0x0B	; 11
    6fdc:	90 e0       	ldi	r25, 0x00	; 0
    6fde:	99 87       	std	Y+9, r25	; 0x09
    6fe0:	88 87       	std	Y+8, r24	; 0x08
    6fe2:	8f e1       	ldi	r24, 0x1F	; 31
    6fe4:	90 e0       	ldi	r25, 0x00	; 0
    6fe6:	9f 83       	std	Y+7, r25	; 0x07
    6fe8:	8e 83       	std	Y+6, r24	; 0x06
    6fea:	83 e0       	ldi	r24, 0x03	; 3
    6fec:	90 e0       	ldi	r25, 0x00	; 0
    6fee:	9d 87       	std	Y+13, r25	; 0x0d
    6ff0:	8c 87       	std	Y+12, r24	; 0x0c
    6ff2:	65 c0       	rjmp	.+202    	; 0x70be <time_to_tm+0x1a4>
    6ff4:	c5 01       	movw	r24, r10
    6ff6:	b4 01       	movw	r22, r8
    6ff8:	20 e8       	ldi	r18, 0x80	; 128
    6ffa:	31 e5       	ldi	r19, 0x51	; 81
    6ffc:	41 e0       	ldi	r20, 0x01	; 1
    6ffe:	50 e0       	ldi	r21, 0x00	; 0
    7000:	0e 94 91 e7 	call	0x1cf22	; 0x1cf22 <__udivmodsi4>
    7004:	49 01       	movw	r8, r18
    7006:	5a 01       	movw	r10, r20
    7008:	ca 01       	movw	r24, r20
    700a:	b9 01       	movw	r22, r18
    700c:	6c 5f       	subi	r22, 0xFC	; 252
    700e:	7f 4f       	sbci	r23, 0xFF	; 255
    7010:	8f 4f       	sbci	r24, 0xFF	; 255
    7012:	9f 4f       	sbci	r25, 0xFF	; 255
    7014:	27 e0       	ldi	r18, 0x07	; 7
    7016:	30 e0       	ldi	r19, 0x00	; 0
    7018:	40 e0       	ldi	r20, 0x00	; 0
    701a:	50 e0       	ldi	r21, 0x00	; 0
    701c:	0e 94 b3 e7 	call	0x1cf66	; 0x1cf66 <__divmodsi4>
    7020:	7d 87       	std	Y+13, r23	; 0x0d
    7022:	6c 87       	std	Y+12, r22	; 0x0c
    7024:	02 eb       	ldi	r16, 0xB2	; 178
    7026:	17 e0       	ldi	r17, 0x07	; 7
    7028:	c8 01       	movw	r24, r16
    702a:	31 df       	rcall	.-414    	; 0x6e8e <IS_Leap>
    702c:	00 97       	sbiw	r24, 0x00	; 0
    702e:	19 f4       	brne	.+6      	; 0x7036 <time_to_tm+0x11c>
    7030:	4d e6       	ldi	r20, 0x6D	; 109
    7032:	51 e0       	ldi	r21, 0x01	; 1
    7034:	02 c0       	rjmp	.+4      	; 0x703a <time_to_tm+0x120>
    7036:	4e e6       	ldi	r20, 0x6E	; 110
    7038:	51 e0       	ldi	r21, 0x01	; 1
    703a:	05 2e       	mov	r0, r21
    703c:	00 0c       	add	r0, r0
    703e:	66 0b       	sbc	r22, r22
    7040:	77 0b       	sbc	r23, r23
    7042:	84 16       	cp	r8, r20
    7044:	95 06       	cpc	r9, r21
    7046:	a6 06       	cpc	r10, r22
    7048:	b7 06       	cpc	r11, r23
    704a:	3c f0       	brlt	.+14     	; 0x705a <time_to_tm+0x140>
    704c:	0f 5f       	subi	r16, 0xFF	; 255
    704e:	1f 4f       	sbci	r17, 0xFF	; 255
    7050:	84 1a       	sub	r8, r20
    7052:	95 0a       	sbc	r9, r21
    7054:	a6 0a       	sbc	r10, r22
    7056:	b7 0a       	sbc	r11, r23
    7058:	e7 cf       	rjmp	.-50     	; 0x7028 <time_to_tm+0x10e>
    705a:	0c 56       	subi	r16, 0x6C	; 108
    705c:	17 40       	sbci	r17, 0x07	; 7
    705e:	1b 87       	std	Y+11, r17	; 0x0b
    7060:	0a 87       	std	Y+10, r16	; 0x0a
    7062:	9f 86       	std	Y+15, r9	; 0x0f
    7064:	8e 86       	std	Y+14, r8	; 0x0e
    7066:	e3 e6       	ldi	r30, 0x63	; 99
    7068:	f2 e0       	ldi	r31, 0x02	; 2
    706a:	20 e0       	ldi	r18, 0x00	; 0
    706c:	30 e0       	ldi	r19, 0x00	; 0
    706e:	18 14       	cp	r1, r8
    7070:	19 04       	cpc	r1, r9
    7072:	1a 04       	cpc	r1, r10
    7074:	1b 04       	cpc	r1, r11
    7076:	e4 f4       	brge	.+56     	; 0x70b0 <time_to_tm+0x196>
    7078:	2c 30       	cpi	r18, 0x0C	; 12
    707a:	31 05       	cpc	r19, r1
    707c:	c9 f0       	breq	.+50     	; 0x70b0 <time_to_tm+0x196>
    707e:	41 91       	ld	r20, Z+
    7080:	51 91       	ld	r21, Z+
    7082:	21 30       	cpi	r18, 0x01	; 1
    7084:	31 05       	cpc	r19, r1
    7086:	21 f4       	brne	.+8      	; 0x7090 <time_to_tm+0x176>
    7088:	00 97       	sbiw	r24, 0x00	; 0
    708a:	11 f0       	breq	.+4      	; 0x7090 <time_to_tm+0x176>
    708c:	4f 5f       	subi	r20, 0xFF	; 255
    708e:	5f 4f       	sbci	r21, 0xFF	; 255
    7090:	05 2e       	mov	r0, r21
    7092:	00 0c       	add	r0, r0
    7094:	66 0b       	sbc	r22, r22
    7096:	77 0b       	sbc	r23, r23
    7098:	84 16       	cp	r8, r20
    709a:	95 06       	cpc	r9, r21
    709c:	a6 06       	cpc	r10, r22
    709e:	b7 06       	cpc	r11, r23
    70a0:	3c f0       	brlt	.+14     	; 0x70b0 <time_to_tm+0x196>
    70a2:	84 1a       	sub	r8, r20
    70a4:	95 0a       	sbc	r9, r21
    70a6:	a6 0a       	sbc	r10, r22
    70a8:	b7 0a       	sbc	r11, r23
    70aa:	2f 5f       	subi	r18, 0xFF	; 255
    70ac:	3f 4f       	sbci	r19, 0xFF	; 255
    70ae:	df cf       	rjmp	.-66     	; 0x706e <time_to_tm+0x154>
    70b0:	39 87       	std	Y+9, r19	; 0x09
    70b2:	28 87       	std	Y+8, r18	; 0x08
    70b4:	af ef       	ldi	r26, 0xFF	; 255
    70b6:	8a 1a       	sub	r8, r26
    70b8:	9a 0a       	sbc	r9, r26
    70ba:	9f 82       	std	Y+7, r9	; 0x07
    70bc:	8e 82       	std	Y+6, r8	; 0x06
    70be:	b6 01       	movw	r22, r12
    70c0:	c7 01       	movw	r24, r14
    70c2:	04 c0       	rjmp	.+8      	; 0x70cc <time_to_tm+0x1b2>
    70c4:	6f ef       	ldi	r22, 0xFF	; 255
    70c6:	7f ef       	ldi	r23, 0xFF	; 255
    70c8:	8f ef       	ldi	r24, 0xFF	; 255
    70ca:	9f ef       	ldi	r25, 0xFF	; 255
    70cc:	cd b7       	in	r28, 0x3d	; 61
    70ce:	de b7       	in	r29, 0x3e	; 62
    70d0:	e0 e1       	ldi	r30, 0x10	; 16
    70d2:	0c 94 31 e8 	jmp	0x1d062	; 0x1d062 <__epilogue_restores__+0x4>

000070d6 <gmtime_r>:
    70d6:	0f 93       	push	r16
    70d8:	1f 93       	push	r17
    70da:	cf 93       	push	r28
    70dc:	df 93       	push	r29
    70de:	eb 01       	movw	r28, r22
    70e0:	fc 01       	movw	r30, r24
    70e2:	60 81       	ld	r22, Z
    70e4:	71 81       	ldd	r23, Z+1	; 0x01
    70e6:	82 81       	ldd	r24, Z+2	; 0x02
    70e8:	93 81       	ldd	r25, Z+3	; 0x03
    70ea:	8e 01       	movw	r16, r28
    70ec:	20 e0       	ldi	r18, 0x00	; 0
    70ee:	30 e0       	ldi	r19, 0x00	; 0
    70f0:	a9 01       	movw	r20, r18
    70f2:	13 df       	rcall	.-474    	; 0x6f1a <time_to_tm>
    70f4:	ce 01       	movw	r24, r28
    70f6:	df 91       	pop	r29
    70f8:	cf 91       	pop	r28
    70fa:	1f 91       	pop	r17
    70fc:	0f 91       	pop	r16
    70fe:	08 95       	ret

00007100 <gmtime>:
    7100:	2c eb       	ldi	r18, 0xBC	; 188
    7102:	37 e1       	ldi	r19, 0x17	; 23
    7104:	30 93 d3 17 	sts	0x17D3, r19	; 0x8017d3 <p.3745+0x1>
    7108:	20 93 d2 17 	sts	0x17D2, r18	; 0x8017d2 <p.3745>
    710c:	b9 01       	movw	r22, r18
    710e:	e3 df       	rcall	.-58     	; 0x70d6 <gmtime_r>
    7110:	8c eb       	ldi	r24, 0xBC	; 188
    7112:	97 e1       	ldi	r25, 0x17	; 23
    7114:	08 95       	ret

00007116 <gettimezone>:
    7116:	e9 e7       	ldi	r30, 0x79	; 121
    7118:	fa e1       	ldi	r31, 0x1A	; 26
    711a:	20 81       	ld	r18, Z
    711c:	31 81       	ldd	r19, Z+1	; 0x01
    711e:	dc 01       	movw	r26, r24
    7120:	11 96       	adiw	r26, 0x01	; 1
    7122:	3c 93       	st	X, r19
    7124:	2e 93       	st	-X, r18
    7126:	22 81       	ldd	r18, Z+2	; 0x02
    7128:	33 81       	ldd	r19, Z+3	; 0x03
    712a:	13 96       	adiw	r26, 0x03	; 3
    712c:	3c 93       	st	X, r19
    712e:	2e 93       	st	-X, r18
    7130:	12 97       	sbiw	r26, 0x02	; 2
    7132:	80 e0       	ldi	r24, 0x00	; 0
    7134:	90 e0       	ldi	r25, 0x00	; 0
    7136:	08 95       	ret

00007138 <settimezone>:
    7138:	dc 01       	movw	r26, r24
    713a:	2d 91       	ld	r18, X+
    713c:	3c 91       	ld	r19, X
    713e:	11 97       	sbiw	r26, 0x01	; 1
    7140:	e9 e7       	ldi	r30, 0x79	; 121
    7142:	fa e1       	ldi	r31, 0x1A	; 26
    7144:	31 83       	std	Z+1, r19	; 0x01
    7146:	20 83       	st	Z, r18
    7148:	12 96       	adiw	r26, 0x02	; 2
    714a:	8d 91       	ld	r24, X+
    714c:	9c 91       	ld	r25, X
    714e:	13 97       	sbiw	r26, 0x03	; 3
    7150:	93 83       	std	Z+3, r25	; 0x03
    7152:	82 83       	std	Z+2, r24	; 0x02
    7154:	80 e0       	ldi	r24, 0x00	; 0
    7156:	90 e0       	ldi	r25, 0x00	; 0
    7158:	08 95       	ret

0000715a <gettimeofday>:
    715a:	a8 e0       	ldi	r26, 0x08	; 8
    715c:	b0 e0       	ldi	r27, 0x00	; 0
    715e:	e3 eb       	ldi	r30, 0xB3	; 179
    7160:	f8 e3       	ldi	r31, 0x38	; 56
    7162:	0c 94 1f e8 	jmp	0x1d03e	; 0x1d03e <__prologue_saves__+0x18>
    7166:	8c 01       	movw	r16, r24
    7168:	7b 01       	movw	r14, r22
    716a:	be 01       	movw	r22, r28
    716c:	6f 5f       	subi	r22, 0xFF	; 255
    716e:	7f 4f       	sbci	r23, 0xFF	; 255
    7170:	80 e0       	ldi	r24, 0x00	; 0
    7172:	90 e0       	ldi	r25, 0x00	; 0
    7174:	f5 db       	rcall	.-2070   	; 0x6960 <clock_gettime>
    7176:	89 81       	ldd	r24, Y+1	; 0x01
    7178:	9a 81       	ldd	r25, Y+2	; 0x02
    717a:	ab 81       	ldd	r26, Y+3	; 0x03
    717c:	bc 81       	ldd	r27, Y+4	; 0x04
    717e:	f8 01       	movw	r30, r16
    7180:	80 83       	st	Z, r24
    7182:	91 83       	std	Z+1, r25	; 0x01
    7184:	a2 83       	std	Z+2, r26	; 0x02
    7186:	b3 83       	std	Z+3, r27	; 0x03
    7188:	6d 81       	ldd	r22, Y+5	; 0x05
    718a:	7e 81       	ldd	r23, Y+6	; 0x06
    718c:	8f 81       	ldd	r24, Y+7	; 0x07
    718e:	98 85       	ldd	r25, Y+8	; 0x08
    7190:	28 ee       	ldi	r18, 0xE8	; 232
    7192:	33 e0       	ldi	r19, 0x03	; 3
    7194:	40 e0       	ldi	r20, 0x00	; 0
    7196:	50 e0       	ldi	r21, 0x00	; 0
    7198:	0e 94 b3 e7 	call	0x1cf66	; 0x1cf66 <__divmodsi4>
    719c:	f8 01       	movw	r30, r16
    719e:	24 83       	std	Z+4, r18	; 0x04
    71a0:	35 83       	std	Z+5, r19	; 0x05
    71a2:	46 83       	std	Z+6, r20	; 0x06
    71a4:	57 83       	std	Z+7, r21	; 0x07
    71a6:	c7 01       	movw	r24, r14
    71a8:	b6 df       	rcall	.-148    	; 0x7116 <gettimezone>
    71aa:	80 e0       	ldi	r24, 0x00	; 0
    71ac:	90 e0       	ldi	r25, 0x00	; 0
    71ae:	28 96       	adiw	r28, 0x08	; 8
    71b0:	e6 e0       	ldi	r30, 0x06	; 6
    71b2:	0c 94 3b e8 	jmp	0x1d076	; 0x1d076 <__epilogue_restores__+0x18>

000071b6 <time>:
    71b6:	cf 93       	push	r28
    71b8:	df 93       	push	r29
    71ba:	ec 01       	movw	r28, r24
    71bc:	6e e9       	ldi	r22, 0x9E	; 158
    71be:	77 e1       	ldi	r23, 0x17	; 23
    71c0:	80 e0       	ldi	r24, 0x00	; 0
    71c2:	90 e0       	ldi	r25, 0x00	; 0
    71c4:	cd db       	rcall	.-2150   	; 0x6960 <clock_gettime>
    71c6:	20 97       	sbiw	r28, 0x00	; 0
    71c8:	61 f0       	breq	.+24     	; 0x71e2 <time+0x2c>
    71ca:	80 91 9e 17 	lds	r24, 0x179E	; 0x80179e <ts.3823>
    71ce:	90 91 9f 17 	lds	r25, 0x179F	; 0x80179f <ts.3823+0x1>
    71d2:	a0 91 a0 17 	lds	r26, 0x17A0	; 0x8017a0 <ts.3823+0x2>
    71d6:	b0 91 a1 17 	lds	r27, 0x17A1	; 0x8017a1 <ts.3823+0x3>
    71da:	88 83       	st	Y, r24
    71dc:	99 83       	std	Y+1, r25	; 0x01
    71de:	aa 83       	std	Y+2, r26	; 0x02
    71e0:	bb 83       	std	Y+3, r27	; 0x03
    71e2:	60 91 9e 17 	lds	r22, 0x179E	; 0x80179e <ts.3823>
    71e6:	70 91 9f 17 	lds	r23, 0x179F	; 0x80179f <ts.3823+0x1>
    71ea:	80 91 a0 17 	lds	r24, 0x17A0	; 0x8017a0 <ts.3823+0x2>
    71ee:	90 91 a1 17 	lds	r25, 0x17A1	; 0x8017a1 <ts.3823+0x3>
    71f2:	df 91       	pop	r29
    71f4:	cf 91       	pop	r28
    71f6:	08 95       	ret

000071f8 <is_dst>:
    71f8:	cf 92       	push	r12
    71fa:	df 92       	push	r13
    71fc:	ef 92       	push	r14
    71fe:	ff 92       	push	r15
    7200:	6b 01       	movw	r12, r22
    7202:	7c 01       	movw	r14, r24
    7204:	ff d3       	rcall	.+2046   	; 0x7a04 <set_dst>
    7206:	80 91 7d 1a 	lds	r24, 0x1A7D	; 0x801a7d <dst>
    720a:	90 91 7e 1a 	lds	r25, 0x1A7E	; 0x801a7e <dst+0x1>
    720e:	a0 91 7f 1a 	lds	r26, 0x1A7F	; 0x801a7f <dst+0x2>
    7212:	b0 91 80 1a 	lds	r27, 0x1A80	; 0x801a80 <dst+0x3>
    7216:	c8 16       	cp	r12, r24
    7218:	d9 06       	cpc	r13, r25
    721a:	ea 06       	cpc	r14, r26
    721c:	fb 06       	cpc	r15, r27
    721e:	88 f0       	brcs	.+34     	; 0x7242 <is_dst+0x4a>
    7220:	81 e0       	ldi	r24, 0x01	; 1
    7222:	90 e0       	ldi	r25, 0x00	; 0
    7224:	40 91 81 1a 	lds	r20, 0x1A81	; 0x801a81 <dst+0x4>
    7228:	50 91 82 1a 	lds	r21, 0x1A82	; 0x801a82 <dst+0x5>
    722c:	60 91 83 1a 	lds	r22, 0x1A83	; 0x801a83 <dst+0x6>
    7230:	70 91 84 1a 	lds	r23, 0x1A84	; 0x801a84 <dst+0x7>
    7234:	4c 15       	cp	r20, r12
    7236:	5d 05       	cpc	r21, r13
    7238:	6e 05       	cpc	r22, r14
    723a:	7f 05       	cpc	r23, r15
    723c:	20 f4       	brcc	.+8      	; 0x7246 <is_dst+0x4e>
    723e:	80 e0       	ldi	r24, 0x00	; 0
    7240:	02 c0       	rjmp	.+4      	; 0x7246 <is_dst+0x4e>
    7242:	80 e0       	ldi	r24, 0x00	; 0
    7244:	90 e0       	ldi	r25, 0x00	; 0
    7246:	ff 90       	pop	r15
    7248:	ef 90       	pop	r14
    724a:	df 90       	pop	r13
    724c:	cf 90       	pop	r12
    724e:	08 95       	ret

00007250 <localtime_r>:
    7250:	4f 92       	push	r4
    7252:	5f 92       	push	r5
    7254:	6f 92       	push	r6
    7256:	7f 92       	push	r7
    7258:	af 92       	push	r10
    725a:	bf 92       	push	r11
    725c:	cf 92       	push	r12
    725e:	df 92       	push	r13
    7260:	ef 92       	push	r14
    7262:	ff 92       	push	r15
    7264:	0f 93       	push	r16
    7266:	1f 93       	push	r17
    7268:	cf 93       	push	r28
    726a:	df 93       	push	r29
    726c:	00 d0       	rcall	.+0      	; 0x726e <localtime_r+0x1e>
    726e:	00 d0       	rcall	.+0      	; 0x7270 <localtime_r+0x20>
    7270:	cd b7       	in	r28, 0x3d	; 61
    7272:	de b7       	in	r29, 0x3e	; 62
    7274:	5b 01       	movw	r10, r22
    7276:	fc 01       	movw	r30, r24
    7278:	40 80       	ld	r4, Z
    727a:	51 80       	ldd	r5, Z+1	; 0x01
    727c:	62 80       	ldd	r6, Z+2	; 0x02
    727e:	73 80       	ldd	r7, Z+3	; 0x03
    7280:	ce 01       	movw	r24, r28
    7282:	01 96       	adiw	r24, 0x01	; 1
    7284:	48 df       	rcall	.-368    	; 0x7116 <gettimezone>
    7286:	a9 81       	ldd	r26, Y+1	; 0x01
    7288:	ba 81       	ldd	r27, Y+2	; 0x02
    728a:	2c e3       	ldi	r18, 0x3C	; 60
    728c:	30 e0       	ldi	r19, 0x00	; 0
    728e:	0e 94 ed e7 	call	0x1cfda	; 0x1cfda <__usmulhisi3>
    7292:	6b 01       	movw	r12, r22
    7294:	7c 01       	movw	r14, r24
    7296:	c3 01       	movw	r24, r6
    7298:	b2 01       	movw	r22, r4
    729a:	6c 19       	sub	r22, r12
    729c:	7d 09       	sbc	r23, r13
    729e:	8e 09       	sbc	r24, r14
    72a0:	9f 09       	sbc	r25, r15
    72a2:	aa df       	rcall	.-172    	; 0x71f8 <is_dst>
    72a4:	89 2b       	or	r24, r25
    72a6:	31 f0       	breq	.+12     	; 0x72b4 <localtime_r+0x64>
    72a8:	f0 e1       	ldi	r31, 0x10	; 16
    72aa:	cf 1a       	sub	r12, r31
    72ac:	fe e0       	ldi	r31, 0x0E	; 14
    72ae:	df 0a       	sbc	r13, r31
    72b0:	e1 08       	sbc	r14, r1
    72b2:	f1 08       	sbc	r15, r1
    72b4:	85 01       	movw	r16, r10
    72b6:	a7 01       	movw	r20, r14
    72b8:	96 01       	movw	r18, r12
    72ba:	c3 01       	movw	r24, r6
    72bc:	b2 01       	movw	r22, r4
    72be:	2d de       	rcall	.-934    	; 0x6f1a <time_to_tm>
    72c0:	c5 01       	movw	r24, r10
    72c2:	0f 90       	pop	r0
    72c4:	0f 90       	pop	r0
    72c6:	0f 90       	pop	r0
    72c8:	0f 90       	pop	r0
    72ca:	df 91       	pop	r29
    72cc:	cf 91       	pop	r28
    72ce:	1f 91       	pop	r17
    72d0:	0f 91       	pop	r16
    72d2:	ff 90       	pop	r15
    72d4:	ef 90       	pop	r14
    72d6:	df 90       	pop	r13
    72d8:	cf 90       	pop	r12
    72da:	bf 90       	pop	r11
    72dc:	af 90       	pop	r10
    72de:	7f 90       	pop	r7
    72e0:	6f 90       	pop	r6
    72e2:	5f 90       	pop	r5
    72e4:	4f 90       	pop	r4
    72e6:	08 95       	ret

000072e8 <localtime>:
    72e8:	66 ea       	ldi	r22, 0xA6	; 166
    72ea:	77 e1       	ldi	r23, 0x17	; 23
    72ec:	b1 cf       	rjmp	.-158    	; 0x7250 <localtime_r>
    72ee:	08 95       	ret

000072f0 <normalize>:
    72f0:	aa e0       	ldi	r26, 0x0A	; 10
    72f2:	b0 e0       	ldi	r27, 0x00	; 0
    72f4:	ee e7       	ldi	r30, 0x7E	; 126
    72f6:	f9 e3       	ldi	r31, 0x39	; 57
    72f8:	0c 94 13 e8 	jmp	0x1d026	; 0x1d026 <__prologue_saves__>
    72fc:	7c 01       	movw	r14, r24
    72fe:	7a 87       	std	Y+10, r23	; 0x0a
    7300:	69 87       	std	Y+9, r22	; 0x09
    7302:	f7 01       	movw	r30, r14
    7304:	80 81       	ld	r24, Z
    7306:	91 81       	ldd	r25, Z+1	; 0x01
    7308:	8c 33       	cpi	r24, 0x3C	; 60
    730a:	91 05       	cpc	r25, r1
    730c:	5c f0       	brlt	.+22     	; 0x7324 <normalize+0x34>
    730e:	f7 01       	movw	r30, r14
    7310:	22 81       	ldd	r18, Z+2	; 0x02
    7312:	33 81       	ldd	r19, Z+3	; 0x03
    7314:	2f 5f       	subi	r18, 0xFF	; 255
    7316:	3f 4f       	sbci	r19, 0xFF	; 255
    7318:	33 83       	std	Z+3, r19	; 0x03
    731a:	22 83       	std	Z+2, r18	; 0x02
    731c:	cc 97       	sbiw	r24, 0x3c	; 60
    731e:	91 83       	std	Z+1, r25	; 0x01
    7320:	80 83       	st	Z, r24
    7322:	ef cf       	rjmp	.-34     	; 0x7302 <normalize+0x12>
    7324:	f7 01       	movw	r30, r14
    7326:	01 90       	ld	r0, Z+
    7328:	f0 81       	ld	r31, Z
    732a:	e0 2d       	mov	r30, r0
    732c:	fe 83       	std	Y+6, r31	; 0x06
    732e:	ed 83       	std	Y+5, r30	; 0x05
    7330:	f7 ff       	sbrs	r31, 7
    7332:	0d c0       	rjmp	.+26     	; 0x734e <normalize+0x5e>
    7334:	f7 01       	movw	r30, r14
    7336:	82 81       	ldd	r24, Z+2	; 0x02
    7338:	93 81       	ldd	r25, Z+3	; 0x03
    733a:	01 97       	sbiw	r24, 0x01	; 1
    733c:	93 83       	std	Z+3, r25	; 0x03
    733e:	82 83       	std	Z+2, r24	; 0x02
    7340:	6d 81       	ldd	r22, Y+5	; 0x05
    7342:	7e 81       	ldd	r23, Y+6	; 0x06
    7344:	64 5c       	subi	r22, 0xC4	; 196
    7346:	7f 4f       	sbci	r23, 0xFF	; 255
    7348:	71 83       	std	Z+1, r23	; 0x01
    734a:	60 83       	st	Z, r22
    734c:	eb cf       	rjmp	.-42     	; 0x7324 <normalize+0x34>
    734e:	f7 01       	movw	r30, r14
    7350:	82 81       	ldd	r24, Z+2	; 0x02
    7352:	93 81       	ldd	r25, Z+3	; 0x03
    7354:	8c 33       	cpi	r24, 0x3C	; 60
    7356:	91 05       	cpc	r25, r1
    7358:	5c f0       	brlt	.+22     	; 0x7370 <normalize+0x80>
    735a:	f7 01       	movw	r30, r14
    735c:	24 81       	ldd	r18, Z+4	; 0x04
    735e:	35 81       	ldd	r19, Z+5	; 0x05
    7360:	2f 5f       	subi	r18, 0xFF	; 255
    7362:	3f 4f       	sbci	r19, 0xFF	; 255
    7364:	35 83       	std	Z+5, r19	; 0x05
    7366:	24 83       	std	Z+4, r18	; 0x04
    7368:	cc 97       	sbiw	r24, 0x3c	; 60
    736a:	93 83       	std	Z+3, r25	; 0x03
    736c:	82 83       	std	Z+2, r24	; 0x02
    736e:	ef cf       	rjmp	.-34     	; 0x734e <normalize+0x5e>
    7370:	f7 01       	movw	r30, r14
    7372:	22 80       	ldd	r2, Z+2	; 0x02
    7374:	33 80       	ldd	r3, Z+3	; 0x03
    7376:	37 fe       	sbrs	r3, 7
    7378:	0d c0       	rjmp	.+26     	; 0x7394 <normalize+0xa4>
    737a:	f7 01       	movw	r30, r14
    737c:	84 81       	ldd	r24, Z+4	; 0x04
    737e:	95 81       	ldd	r25, Z+5	; 0x05
    7380:	01 97       	sbiw	r24, 0x01	; 1
    7382:	95 83       	std	Z+5, r25	; 0x05
    7384:	84 83       	std	Z+4, r24	; 0x04
    7386:	fc e3       	ldi	r31, 0x3C	; 60
    7388:	2f 0e       	add	r2, r31
    738a:	31 1c       	adc	r3, r1
    738c:	f7 01       	movw	r30, r14
    738e:	33 82       	std	Z+3, r3	; 0x03
    7390:	22 82       	std	Z+2, r2	; 0x02
    7392:	ee cf       	rjmp	.-36     	; 0x7370 <normalize+0x80>
    7394:	f7 01       	movw	r30, r14
    7396:	84 81       	ldd	r24, Z+4	; 0x04
    7398:	95 81       	ldd	r25, Z+5	; 0x05
    739a:	88 31       	cpi	r24, 0x18	; 24
    739c:	91 05       	cpc	r25, r1
    739e:	5c f0       	brlt	.+22     	; 0x73b6 <normalize+0xc6>
    73a0:	f7 01       	movw	r30, r14
    73a2:	26 81       	ldd	r18, Z+6	; 0x06
    73a4:	37 81       	ldd	r19, Z+7	; 0x07
    73a6:	2f 5f       	subi	r18, 0xFF	; 255
    73a8:	3f 4f       	sbci	r19, 0xFF	; 255
    73aa:	37 83       	std	Z+7, r19	; 0x07
    73ac:	26 83       	std	Z+6, r18	; 0x06
    73ae:	48 97       	sbiw	r24, 0x18	; 24
    73b0:	95 83       	std	Z+5, r25	; 0x05
    73b2:	84 83       	std	Z+4, r24	; 0x04
    73b4:	ef cf       	rjmp	.-34     	; 0x7394 <normalize+0xa4>
    73b6:	f7 01       	movw	r30, r14
    73b8:	04 81       	ldd	r16, Z+4	; 0x04
    73ba:	15 81       	ldd	r17, Z+5	; 0x05
    73bc:	17 ff       	sbrs	r17, 7
    73be:	0b c0       	rjmp	.+22     	; 0x73d6 <normalize+0xe6>
    73c0:	f7 01       	movw	r30, r14
    73c2:	86 81       	ldd	r24, Z+6	; 0x06
    73c4:	97 81       	ldd	r25, Z+7	; 0x07
    73c6:	01 97       	sbiw	r24, 0x01	; 1
    73c8:	97 83       	std	Z+7, r25	; 0x07
    73ca:	86 83       	std	Z+6, r24	; 0x06
    73cc:	08 5e       	subi	r16, 0xE8	; 232
    73ce:	1f 4f       	sbci	r17, 0xFF	; 255
    73d0:	15 83       	std	Z+5, r17	; 0x05
    73d2:	04 83       	std	Z+4, r16	; 0x04
    73d4:	f0 cf       	rjmp	.-32     	; 0x73b6 <normalize+0xc6>
    73d6:	f7 01       	movw	r30, r14
    73d8:	80 85       	ldd	r24, Z+8	; 0x08
    73da:	91 85       	ldd	r25, Z+9	; 0x09
    73dc:	8c 30       	cpi	r24, 0x0C	; 12
    73de:	91 05       	cpc	r25, r1
    73e0:	5c f0       	brlt	.+22     	; 0x73f8 <normalize+0x108>
    73e2:	f7 01       	movw	r30, r14
    73e4:	22 85       	ldd	r18, Z+10	; 0x0a
    73e6:	33 85       	ldd	r19, Z+11	; 0x0b
    73e8:	2f 5f       	subi	r18, 0xFF	; 255
    73ea:	3f 4f       	sbci	r19, 0xFF	; 255
    73ec:	33 87       	std	Z+11, r19	; 0x0b
    73ee:	22 87       	std	Z+10, r18	; 0x0a
    73f0:	0c 97       	sbiw	r24, 0x0c	; 12
    73f2:	91 87       	std	Z+9, r25	; 0x09
    73f4:	80 87       	std	Z+8, r24	; 0x08
    73f6:	ef cf       	rjmp	.-34     	; 0x73d6 <normalize+0xe6>
    73f8:	f7 01       	movw	r30, r14
    73fa:	80 85       	ldd	r24, Z+8	; 0x08
    73fc:	91 85       	ldd	r25, Z+9	; 0x09
    73fe:	97 ff       	sbrs	r25, 7
    7400:	2d c0       	rjmp	.+90     	; 0x745c <normalize+0x16c>
    7402:	f7 01       	movw	r30, r14
    7404:	22 85       	ldd	r18, Z+10	; 0x0a
    7406:	33 85       	ldd	r19, Z+11	; 0x0b
    7408:	21 50       	subi	r18, 0x01	; 1
    740a:	31 09       	sbc	r19, r1
    740c:	33 87       	std	Z+11, r19	; 0x0b
    740e:	22 87       	std	Z+10, r18	; 0x0a
    7410:	0c 96       	adiw	r24, 0x0c	; 12
    7412:	91 87       	std	Z+9, r25	; 0x09
    7414:	80 87       	std	Z+8, r24	; 0x08
    7416:	f0 cf       	rjmp	.-32     	; 0x73f8 <normalize+0x108>
    7418:	f7 01       	movw	r30, r14
    741a:	c6 80       	ldd	r12, Z+6	; 0x06
    741c:	d7 80       	ldd	r13, Z+7	; 0x07
    741e:	a0 84       	ldd	r10, Z+8	; 0x08
    7420:	b1 84       	ldd	r11, Z+9	; 0x09
    7422:	b4 01       	movw	r22, r8
    7424:	c5 01       	movw	r24, r10
    7426:	58 dd       	rcall	.-1360   	; 0x6ed8 <Days_Per_Month>
    7428:	8c 15       	cp	r24, r12
    742a:	9d 05       	cpc	r25, r13
    742c:	84 f5       	brge	.+96     	; 0x748e <normalize+0x19e>
    742e:	c8 1a       	sub	r12, r24
    7430:	d9 0a       	sbc	r13, r25
    7432:	f7 01       	movw	r30, r14
    7434:	d7 82       	std	Z+7, r13	; 0x07
    7436:	c6 82       	std	Z+6, r12	; 0x06
    7438:	c5 01       	movw	r24, r10
    743a:	01 96       	adiw	r24, 0x01	; 1
    743c:	91 87       	std	Z+9, r25	; 0x09
    743e:	80 87       	std	Z+8, r24	; 0x08
    7440:	0c 97       	sbiw	r24, 0x0c	; 12
    7442:	54 f3       	brlt	.-44     	; 0x7418 <normalize+0x128>
    7444:	fb e0       	ldi	r31, 0x0B	; 11
    7446:	af 1a       	sub	r10, r31
    7448:	b1 08       	sbc	r11, r1
    744a:	f7 01       	movw	r30, r14
    744c:	b1 86       	std	Z+9, r11	; 0x09
    744e:	a0 86       	std	Z+8, r10	; 0x08
    7450:	ff ef       	ldi	r31, 0xFF	; 255
    7452:	8f 1a       	sub	r8, r31
    7454:	9f 0a       	sbc	r9, r31
    7456:	f7 01       	movw	r30, r14
    7458:	93 86       	std	Z+11, r9	; 0x0b
    745a:	82 86       	std	Z+10, r8	; 0x0a
    745c:	f7 01       	movw	r30, r14
    745e:	82 84       	ldd	r8, Z+10	; 0x0a
    7460:	93 84       	ldd	r9, Z+11	; 0x0b
    7462:	da cf       	rjmp	.-76     	; 0x7418 <normalize+0x128>
    7464:	f7 01       	movw	r30, r14
    7466:	80 85       	ldd	r24, Z+8	; 0x08
    7468:	91 85       	ldd	r25, Z+9	; 0x09
    746a:	9c 01       	movw	r18, r24
    746c:	21 50       	subi	r18, 0x01	; 1
    746e:	31 09       	sbc	r19, r1
    7470:	37 fd       	sbrc	r19, 7
    7472:	16 c0       	rjmp	.+44     	; 0x74a0 <normalize+0x1b0>
    7474:	31 87       	std	Z+9, r19	; 0x09
    7476:	20 87       	std	Z+8, r18	; 0x08
    7478:	f7 01       	movw	r30, r14
    747a:	62 85       	ldd	r22, Z+10	; 0x0a
    747c:	73 85       	ldd	r23, Z+11	; 0x0b
    747e:	80 85       	ldd	r24, Z+8	; 0x08
    7480:	91 85       	ldd	r25, Z+9	; 0x09
    7482:	2a dd       	rcall	.-1452   	; 0x6ed8 <Days_Per_Month>
    7484:	88 0d       	add	r24, r8
    7486:	99 1d       	adc	r25, r9
    7488:	f7 01       	movw	r30, r14
    748a:	97 83       	std	Z+7, r25	; 0x07
    748c:	86 83       	std	Z+6, r24	; 0x06
    748e:	f7 01       	movw	r30, r14
    7490:	86 80       	ldd	r8, Z+6	; 0x06
    7492:	97 80       	ldd	r9, Z+7	; 0x07
    7494:	a2 84       	ldd	r10, Z+10	; 0x0a
    7496:	b3 84       	ldd	r11, Z+11	; 0x0b
    7498:	18 14       	cp	r1, r8
    749a:	19 04       	cpc	r1, r9
    749c:	1c f7       	brge	.-58     	; 0x7464 <normalize+0x174>
    749e:	0b c0       	rjmp	.+22     	; 0x74b6 <normalize+0x1c6>
    74a0:	0b 96       	adiw	r24, 0x0b	; 11
    74a2:	f7 01       	movw	r30, r14
    74a4:	91 87       	std	Z+9, r25	; 0x09
    74a6:	80 87       	std	Z+8, r24	; 0x08
    74a8:	f1 e0       	ldi	r31, 0x01	; 1
    74aa:	af 1a       	sub	r10, r31
    74ac:	b1 08       	sbc	r11, r1
    74ae:	f7 01       	movw	r30, r14
    74b0:	b3 86       	std	Z+11, r11	; 0x0b
    74b2:	a2 86       	std	Z+10, r10	; 0x0a
    74b4:	e1 cf       	rjmp	.-62     	; 0x7478 <normalize+0x188>
    74b6:	a5 01       	movw	r20, r10
    74b8:	44 59       	subi	r20, 0x94	; 148
    74ba:	58 4f       	sbci	r21, 0xF8	; 248
    74bc:	58 87       	std	Y+8, r21	; 0x08
    74be:	4f 83       	std	Y+7, r20	; 0x07
    74c0:	35 01       	movw	r6, r10
    74c2:	56 e4       	ldi	r21, 0x46	; 70
    74c4:	65 1a       	sub	r6, r21
    74c6:	71 08       	sbc	r7, r1
    74c8:	89 e8       	ldi	r24, 0x89	; 137
    74ca:	68 16       	cp	r6, r24
    74cc:	71 04       	cpc	r7, r1
    74ce:	08 f0       	brcs	.+2      	; 0x74d2 <normalize+0x1e2>
    74d0:	9b c0       	rjmp	.+310    	; 0x7608 <normalize+0x318>
    74d2:	c0 84       	ldd	r12, Z+8	; 0x08
    74d4:	d1 84       	ldd	r13, Z+9	; 0x09
    74d6:	9c e0       	ldi	r25, 0x0C	; 12
    74d8:	c9 16       	cp	r12, r25
    74da:	d1 04       	cpc	r13, r1
    74dc:	08 f0       	brcs	.+2      	; 0x74e0 <normalize+0x1f0>
    74de:	94 c0       	rjmp	.+296    	; 0x7608 <normalize+0x318>
    74e0:	24 01       	movw	r4, r8
    74e2:	e1 e0       	ldi	r30, 0x01	; 1
    74e4:	4e 1a       	sub	r4, r30
    74e6:	51 08       	sbc	r5, r1
    74e8:	6f 81       	ldd	r22, Y+7	; 0x07
    74ea:	78 85       	ldd	r23, Y+8	; 0x08
    74ec:	c6 01       	movw	r24, r12
    74ee:	f4 dc       	rcall	.-1560   	; 0x6ed8 <Days_Per_Month>
    74f0:	48 16       	cp	r4, r24
    74f2:	59 06       	cpc	r5, r25
    74f4:	0c f0       	brlt	.+2      	; 0x74f8 <normalize+0x208>
    74f6:	88 c0       	rjmp	.+272    	; 0x7608 <normalize+0x318>
    74f8:	08 31       	cpi	r16, 0x18	; 24
    74fa:	11 05       	cpc	r17, r1
    74fc:	0c f0       	brlt	.+2      	; 0x7500 <normalize+0x210>
    74fe:	84 c0       	rjmp	.+264    	; 0x7608 <normalize+0x318>
    7500:	fc e3       	ldi	r31, 0x3C	; 60
    7502:	2f 16       	cp	r2, r31
    7504:	31 04       	cpc	r3, r1
    7506:	0c f0       	brlt	.+2      	; 0x750a <normalize+0x21a>
    7508:	7f c0       	rjmp	.+254    	; 0x7608 <normalize+0x318>
    750a:	4d 81       	ldd	r20, Y+5	; 0x05
    750c:	5e 81       	ldd	r21, Y+6	; 0x06
    750e:	4c 33       	cpi	r20, 0x3C	; 60
    7510:	51 05       	cpc	r21, r1
    7512:	0c f0       	brlt	.+2      	; 0x7516 <normalize+0x226>
    7514:	79 c0       	rjmp	.+242    	; 0x7608 <normalize+0x318>
    7516:	2d e6       	ldi	r18, 0x6D	; 109
    7518:	31 e0       	ldi	r19, 0x01	; 1
    751a:	d3 01       	movw	r26, r6
    751c:	0e 94 ed e7 	call	0x1cfda	; 0x1cfda <__usmulhisi3>
    7520:	f6 01       	movw	r30, r12
    7522:	ee 0f       	add	r30, r30
    7524:	ff 1f       	adc	r31, r31
    7526:	e5 58       	subi	r30, 0x85	; 133
    7528:	fd 4f       	sbci	r31, 0xFD	; 253
    752a:	20 81       	ld	r18, Z
    752c:	31 81       	ldd	r19, Z+1	; 0x01
    752e:	dc 01       	movw	r26, r24
    7530:	cb 01       	movw	r24, r22
    7532:	82 0f       	add	r24, r18
    7534:	93 1f       	adc	r25, r19
    7536:	a1 1d       	adc	r26, r1
    7538:	b1 1d       	adc	r27, r1
    753a:	05 2c       	mov	r0, r5
    753c:	00 0c       	add	r0, r0
    753e:	66 08       	sbc	r6, r6
    7540:	77 08       	sbc	r7, r7
    7542:	48 0e       	add	r4, r24
    7544:	59 1e       	adc	r5, r25
    7546:	6a 1e       	adc	r6, r26
    7548:	7b 1e       	adc	r7, r27
    754a:	1a 14       	cp	r1, r10
    754c:	1b 04       	cpc	r1, r11
    754e:	1c f4       	brge	.+6      	; 0x7556 <normalize+0x266>
    7550:	51 e0       	ldi	r21, 0x01	; 1
    7552:	a5 1a       	sub	r10, r21
    7554:	b1 08       	sbc	r11, r1
    7556:	45 01       	movw	r8, r10
    7558:	95 94       	asr	r9
    755a:	87 94       	ror	r8
    755c:	95 94       	asr	r9
    755e:	87 94       	ror	r8
    7560:	88 ec       	ldi	r24, 0xC8	; 200
    7562:	a8 16       	cp	r10, r24
    7564:	b1 04       	cpc	r11, r1
    7566:	1c f0       	brlt	.+6      	; 0x756e <normalize+0x27e>
    7568:	91 e0       	ldi	r25, 0x01	; 1
    756a:	89 1a       	sub	r8, r25
    756c:	91 08       	sbc	r9, r1
    756e:	09 2c       	mov	r0, r9
    7570:	00 0c       	add	r0, r0
    7572:	aa 08       	sbc	r10, r10
    7574:	bb 08       	sbc	r11, r11
    7576:	84 0c       	add	r8, r4
    7578:	95 1c       	adc	r9, r5
    757a:	a6 1c       	adc	r10, r6
    757c:	b7 1c       	adc	r11, r7
    757e:	24 01       	movw	r4, r8
    7580:	35 01       	movw	r6, r10
    7582:	e1 e1       	ldi	r30, 0x11	; 17
    7584:	4e 1a       	sub	r4, r30
    7586:	51 08       	sbc	r5, r1
    7588:	61 08       	sbc	r6, r1
    758a:	71 08       	sbc	r7, r1
    758c:	f2 e0       	ldi	r31, 0x02	; 2
    758e:	cf 16       	cp	r12, r31
    7590:	d1 04       	cpc	r13, r1
    7592:	64 f0       	brlt	.+24     	; 0x75ac <normalize+0x2bc>
    7594:	8f 81       	ldd	r24, Y+7	; 0x07
    7596:	98 85       	ldd	r25, Y+8	; 0x08
    7598:	7a dc       	rcall	.-1804   	; 0x6e8e <IS_Leap>
    759a:	89 2b       	or	r24, r25
    759c:	39 f0       	breq	.+14     	; 0x75ac <normalize+0x2bc>
    759e:	24 01       	movw	r4, r8
    75a0:	35 01       	movw	r6, r10
    75a2:	40 e1       	ldi	r20, 0x10	; 16
    75a4:	44 1a       	sub	r4, r20
    75a6:	51 08       	sbc	r5, r1
    75a8:	61 08       	sbc	r6, r1
    75aa:	71 08       	sbc	r7, r1
    75ac:	a8 e1       	ldi	r26, 0x18	; 24
    75ae:	b0 e0       	ldi	r27, 0x00	; 0
    75b0:	a3 01       	movw	r20, r6
    75b2:	92 01       	movw	r18, r4
    75b4:	0e 94 f3 e7 	call	0x1cfe6	; 0x1cfe6 <__muluhisi3>
    75b8:	01 2e       	mov	r0, r17
    75ba:	00 0c       	add	r0, r0
    75bc:	22 0b       	sbc	r18, r18
    75be:	33 0b       	sbc	r19, r19
    75c0:	a9 01       	movw	r20, r18
    75c2:	98 01       	movw	r18, r16
    75c4:	26 0f       	add	r18, r22
    75c6:	37 1f       	adc	r19, r23
    75c8:	48 1f       	adc	r20, r24
    75ca:	59 1f       	adc	r21, r25
    75cc:	ac e3       	ldi	r26, 0x3C	; 60
    75ce:	b0 e0       	ldi	r27, 0x00	; 0
    75d0:	0e 94 f3 e7 	call	0x1cfe6	; 0x1cfe6 <__muluhisi3>
    75d4:	81 01       	movw	r16, r2
    75d6:	03 2c       	mov	r0, r3
    75d8:	00 0c       	add	r0, r0
    75da:	22 0b       	sbc	r18, r18
    75dc:	33 0b       	sbc	r19, r19
    75de:	a9 01       	movw	r20, r18
    75e0:	98 01       	movw	r18, r16
    75e2:	26 0f       	add	r18, r22
    75e4:	37 1f       	adc	r19, r23
    75e6:	48 1f       	adc	r20, r24
    75e8:	59 1f       	adc	r21, r25
    75ea:	0e 94 f3 e7 	call	0x1cfe6	; 0x1cfe6 <__muluhisi3>
    75ee:	ed 81       	ldd	r30, Y+5	; 0x05
    75f0:	fe 81       	ldd	r31, Y+6	; 0x06
    75f2:	8f 01       	movw	r16, r30
    75f4:	ff 0f       	add	r31, r31
    75f6:	22 0b       	sbc	r18, r18
    75f8:	33 0b       	sbc	r19, r19
    75fa:	48 01       	movw	r8, r16
    75fc:	59 01       	movw	r10, r18
    75fe:	86 0e       	add	r8, r22
    7600:	97 1e       	adc	r9, r23
    7602:	a8 1e       	adc	r10, r24
    7604:	b9 1e       	adc	r11, r25
    7606:	04 c0       	rjmp	.+8      	; 0x7610 <normalize+0x320>
    7608:	88 24       	eor	r8, r8
    760a:	8a 94       	dec	r8
    760c:	98 2c       	mov	r9, r8
    760e:	54 01       	movw	r10, r8
    7610:	49 85       	ldd	r20, Y+9	; 0x09
    7612:	5a 85       	ldd	r21, Y+10	; 0x0a
    7614:	45 2b       	or	r20, r21
    7616:	e9 f0       	breq	.+58     	; 0x7652 <normalize+0x362>
    7618:	ce 01       	movw	r24, r28
    761a:	01 96       	adiw	r24, 0x01	; 1
    761c:	7c dd       	rcall	.-1288   	; 0x7116 <gettimezone>
    761e:	a9 81       	ldd	r26, Y+1	; 0x01
    7620:	ba 81       	ldd	r27, Y+2	; 0x02
    7622:	2c e3       	ldi	r18, 0x3C	; 60
    7624:	30 e0       	ldi	r19, 0x00	; 0
    7626:	0e 94 ed e7 	call	0x1cfda	; 0x1cfda <__usmulhisi3>
    762a:	2b 01       	movw	r4, r22
    762c:	3c 01       	movw	r6, r24
    762e:	c5 01       	movw	r24, r10
    7630:	b4 01       	movw	r22, r8
    7632:	e2 dd       	rcall	.-1084   	; 0x71f8 <is_dst>
    7634:	89 2b       	or	r24, r25
    7636:	51 f0       	breq	.+20     	; 0x764c <normalize+0x35c>
    7638:	50 e1       	ldi	r21, 0x10	; 16
    763a:	45 1a       	sub	r4, r21
    763c:	5e e0       	ldi	r21, 0x0E	; 14
    763e:	55 0a       	sbc	r5, r21
    7640:	61 08       	sbc	r6, r1
    7642:	71 08       	sbc	r7, r1
    7644:	cc 24       	eor	r12, r12
    7646:	c3 94       	inc	r12
    7648:	d1 2c       	mov	r13, r1
    764a:	08 c0       	rjmp	.+16     	; 0x765c <normalize+0x36c>
    764c:	c1 2c       	mov	r12, r1
    764e:	d1 2c       	mov	r13, r1
    7650:	05 c0       	rjmp	.+10     	; 0x765c <normalize+0x36c>
    7652:	c1 2c       	mov	r12, r1
    7654:	d1 2c       	mov	r13, r1
    7656:	41 2c       	mov	r4, r1
    7658:	51 2c       	mov	r5, r1
    765a:	32 01       	movw	r6, r4
    765c:	87 01       	movw	r16, r14
    765e:	a3 01       	movw	r20, r6
    7660:	92 01       	movw	r18, r4
    7662:	c5 01       	movw	r24, r10
    7664:	b4 01       	movw	r22, r8
    7666:	59 dc       	rcall	.-1870   	; 0x6f1a <time_to_tm>
    7668:	c1 14       	cp	r12, r1
    766a:	d1 04       	cpc	r13, r1
    766c:	29 f0       	breq	.+10     	; 0x7678 <normalize+0x388>
    766e:	21 e0       	ldi	r18, 0x01	; 1
    7670:	30 e0       	ldi	r19, 0x00	; 0
    7672:	f7 01       	movw	r30, r14
    7674:	31 8b       	std	Z+17, r19	; 0x11
    7676:	20 8b       	std	Z+16, r18	; 0x10
    7678:	2a 96       	adiw	r28, 0x0a	; 10
    767a:	e2 e1       	ldi	r30, 0x12	; 18
    767c:	0c 94 2f e8 	jmp	0x1d05e	; 0x1d05e <__epilogue_restores__>

00007680 <timegm>:
    7680:	60 e0       	ldi	r22, 0x00	; 0
    7682:	70 e0       	ldi	r23, 0x00	; 0
    7684:	35 ce       	rjmp	.-918    	; 0x72f0 <normalize>
    7686:	08 95       	ret

00007688 <setdate_r>:
    7688:	cf 92       	push	r12
    768a:	df 92       	push	r13
    768c:	ef 92       	push	r14
    768e:	ff 92       	push	r15
    7690:	cf 93       	push	r28
    7692:	df 93       	push	r29
    7694:	cd b7       	in	r28, 0x3d	; 61
    7696:	de b7       	in	r29, 0x3e	; 62
    7698:	a0 97       	sbiw	r28, 0x20	; 32
    769a:	0f b6       	in	r0, 0x3f	; 63
    769c:	f8 94       	cli
    769e:	de bf       	out	0x3e, r29	; 62
    76a0:	0f be       	out	0x3f, r0	; 63
    76a2:	cd bf       	out	0x3d, r28	; 61
    76a4:	98 a3       	std	Y+32, r25	; 0x20
    76a6:	8f 8f       	std	Y+31, r24	; 0x1f
    76a8:	1a 82       	std	Y+2, r1	; 0x02
    76aa:	19 82       	std	Y+1, r1	; 0x01
    76ac:	1c 82       	std	Y+4, r1	; 0x04
    76ae:	1b 82       	std	Y+3, r1	; 0x03
    76b0:	1e 82       	std	Y+6, r1	; 0x06
    76b2:	1d 82       	std	Y+5, r1	; 0x05
    76b4:	18 86       	std	Y+8, r1	; 0x08
    76b6:	1f 82       	std	Y+7, r1	; 0x07
    76b8:	1a 86       	std	Y+10, r1	; 0x0a
    76ba:	19 86       	std	Y+9, r1	; 0x09
    76bc:	1c 86       	std	Y+12, r1	; 0x0c
    76be:	1b 86       	std	Y+11, r1	; 0x0b
    76c0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    76c2:	98 a1       	ldd	r25, Y+32	; 0x20
    76c4:	fc 01       	movw	r30, r24
    76c6:	20 81       	ld	r18, Z
    76c8:	20 32       	cpi	r18, 0x20	; 32
    76ca:	21 f4       	brne	.+8      	; 0x76d4 <setdate_r+0x4c>
    76cc:	01 96       	adiw	r24, 0x01	; 1
    76ce:	98 a3       	std	Y+32, r25	; 0x20
    76d0:	8f 8f       	std	Y+31, r24	; 0x1f
    76d2:	f6 cf       	rjmp	.-20     	; 0x76c0 <setdate_r+0x38>
    76d4:	4a e0       	ldi	r20, 0x0A	; 10
    76d6:	50 e0       	ldi	r21, 0x00	; 0
    76d8:	be 01       	movw	r22, r28
    76da:	61 5e       	subi	r22, 0xE1	; 225
    76dc:	7f 4f       	sbci	r23, 0xFF	; 255
    76de:	0e 94 5a 47 	call	0x8eb4	; 0x8eb4 <strtol>
    76e2:	7c 87       	std	Y+12, r23	; 0x0c
    76e4:	6b 87       	std	Y+11, r22	; 0x0b
    76e6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    76e8:	98 a1       	ldd	r25, Y+32	; 0x20
    76ea:	fc 01       	movw	r30, r24
    76ec:	20 81       	ld	r18, Z
    76ee:	20 32       	cpi	r18, 0x20	; 32
    76f0:	21 f4       	brne	.+8      	; 0x76fa <setdate_r+0x72>
    76f2:	01 96       	adiw	r24, 0x01	; 1
    76f4:	98 a3       	std	Y+32, r25	; 0x20
    76f6:	8f 8f       	std	Y+31, r24	; 0x1f
    76f8:	f6 cf       	rjmp	.-20     	; 0x76e6 <setdate_r+0x5e>
    76fa:	4a e0       	ldi	r20, 0x0A	; 10
    76fc:	50 e0       	ldi	r21, 0x00	; 0
    76fe:	be 01       	movw	r22, r28
    7700:	61 5e       	subi	r22, 0xE1	; 225
    7702:	7f 4f       	sbci	r23, 0xFF	; 255
    7704:	0e 94 5a 47 	call	0x8eb4	; 0x8eb4 <strtol>
    7708:	7a 87       	std	Y+10, r23	; 0x0a
    770a:	69 87       	std	Y+9, r22	; 0x09
    770c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    770e:	98 a1       	ldd	r25, Y+32	; 0x20
    7710:	fc 01       	movw	r30, r24
    7712:	20 81       	ld	r18, Z
    7714:	20 32       	cpi	r18, 0x20	; 32
    7716:	21 f4       	brne	.+8      	; 0x7720 <setdate_r+0x98>
    7718:	01 96       	adiw	r24, 0x01	; 1
    771a:	98 a3       	std	Y+32, r25	; 0x20
    771c:	8f 8f       	std	Y+31, r24	; 0x1f
    771e:	f6 cf       	rjmp	.-20     	; 0x770c <setdate_r+0x84>
    7720:	4a e0       	ldi	r20, 0x0A	; 10
    7722:	50 e0       	ldi	r21, 0x00	; 0
    7724:	be 01       	movw	r22, r28
    7726:	61 5e       	subi	r22, 0xE1	; 225
    7728:	7f 4f       	sbci	r23, 0xFF	; 255
    772a:	0e 94 5a 47 	call	0x8eb4	; 0x8eb4 <strtol>
    772e:	78 87       	std	Y+8, r23	; 0x08
    7730:	6f 83       	std	Y+7, r22	; 0x07
    7732:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7734:	98 a1       	ldd	r25, Y+32	; 0x20
    7736:	fc 01       	movw	r30, r24
    7738:	20 81       	ld	r18, Z
    773a:	20 32       	cpi	r18, 0x20	; 32
    773c:	21 f4       	brne	.+8      	; 0x7746 <setdate_r+0xbe>
    773e:	01 96       	adiw	r24, 0x01	; 1
    7740:	98 a3       	std	Y+32, r25	; 0x20
    7742:	8f 8f       	std	Y+31, r24	; 0x1f
    7744:	f6 cf       	rjmp	.-20     	; 0x7732 <setdate_r+0xaa>
    7746:	4a e0       	ldi	r20, 0x0A	; 10
    7748:	50 e0       	ldi	r21, 0x00	; 0
    774a:	be 01       	movw	r22, r28
    774c:	61 5e       	subi	r22, 0xE1	; 225
    774e:	7f 4f       	sbci	r23, 0xFF	; 255
    7750:	0e 94 5a 47 	call	0x8eb4	; 0x8eb4 <strtol>
    7754:	7e 83       	std	Y+6, r23	; 0x06
    7756:	6d 83       	std	Y+5, r22	; 0x05
    7758:	ef 8d       	ldd	r30, Y+31	; 0x1f
    775a:	f8 a1       	ldd	r31, Y+32	; 0x20
    775c:	80 81       	ld	r24, Z
    775e:	88 23       	and	r24, r24
    7760:	39 f0       	breq	.+14     	; 0x7770 <setdate_r+0xe8>
    7762:	80 32       	cpi	r24, 0x20	; 32
    7764:	11 f0       	breq	.+4      	; 0x776a <setdate_r+0xe2>
    7766:	8a 33       	cpi	r24, 0x3A	; 58
    7768:	19 f4       	brne	.+6      	; 0x7770 <setdate_r+0xe8>
    776a:	31 96       	adiw	r30, 0x01	; 1
    776c:	f8 a3       	std	Y+32, r31	; 0x20
    776e:	ef 8f       	std	Y+31, r30	; 0x1f
    7770:	4a e0       	ldi	r20, 0x0A	; 10
    7772:	50 e0       	ldi	r21, 0x00	; 0
    7774:	be 01       	movw	r22, r28
    7776:	61 5e       	subi	r22, 0xE1	; 225
    7778:	7f 4f       	sbci	r23, 0xFF	; 255
    777a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    777c:	98 a1       	ldd	r25, Y+32	; 0x20
    777e:	0e 94 5a 47 	call	0x8eb4	; 0x8eb4 <strtol>
    7782:	7c 83       	std	Y+4, r23	; 0x04
    7784:	6b 83       	std	Y+3, r22	; 0x03
    7786:	ef 8d       	ldd	r30, Y+31	; 0x1f
    7788:	f8 a1       	ldd	r31, Y+32	; 0x20
    778a:	80 81       	ld	r24, Z
    778c:	88 23       	and	r24, r24
    778e:	39 f0       	breq	.+14     	; 0x779e <setdate_r+0x116>
    7790:	80 32       	cpi	r24, 0x20	; 32
    7792:	11 f0       	breq	.+4      	; 0x7798 <setdate_r+0x110>
    7794:	8a 33       	cpi	r24, 0x3A	; 58
    7796:	19 f4       	brne	.+6      	; 0x779e <setdate_r+0x116>
    7798:	31 96       	adiw	r30, 0x01	; 1
    779a:	f8 a3       	std	Y+32, r31	; 0x20
    779c:	ef 8f       	std	Y+31, r30	; 0x1f
    779e:	4a e0       	ldi	r20, 0x0A	; 10
    77a0:	50 e0       	ldi	r21, 0x00	; 0
    77a2:	be 01       	movw	r22, r28
    77a4:	61 5e       	subi	r22, 0xE1	; 225
    77a6:	7f 4f       	sbci	r23, 0xFF	; 255
    77a8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    77aa:	98 a1       	ldd	r25, Y+32	; 0x20
    77ac:	0e 94 5a 47 	call	0x8eb4	; 0x8eb4 <strtol>
    77b0:	7a 83       	std	Y+2, r23	; 0x02
    77b2:	69 83       	std	Y+1, r22	; 0x01
    77b4:	29 85       	ldd	r18, Y+9	; 0x09
    77b6:	3a 85       	ldd	r19, Y+10	; 0x0a
    77b8:	21 50       	subi	r18, 0x01	; 1
    77ba:	31 09       	sbc	r19, r1
    77bc:	3a 87       	std	Y+10, r19	; 0x0a
    77be:	29 87       	std	Y+9, r18	; 0x09
    77c0:	8b 85       	ldd	r24, Y+11	; 0x0b
    77c2:	9c 85       	ldd	r25, Y+12	; 0x0c
    77c4:	ac 01       	movw	r20, r24
    77c6:	42 5b       	subi	r20, 0xB2	; 178
    77c8:	57 40       	sbci	r21, 0x07	; 7
    77ca:	45 34       	cpi	r20, 0x45	; 69
    77cc:	51 05       	cpc	r21, r1
    77ce:	28 f0       	brcs	.+10     	; 0x77da <setdate_r+0x152>
    77d0:	9f 93       	push	r25
    77d2:	8f 93       	push	r24
    77d4:	82 e7       	ldi	r24, 0x72	; 114
    77d6:	97 e0       	ldi	r25, 0x07	; 7
    77d8:	2c c0       	rjmp	.+88     	; 0x7832 <setdate_r+0x1aa>
    77da:	8c 56       	subi	r24, 0x6C	; 108
    77dc:	97 40       	sbci	r25, 0x07	; 7
    77de:	9c 87       	std	Y+12, r25	; 0x0c
    77e0:	8b 87       	std	Y+11, r24	; 0x0b
    77e2:	2c 30       	cpi	r18, 0x0C	; 12
    77e4:	31 05       	cpc	r19, r1
    77e6:	28 f0       	brcs	.+10     	; 0x77f2 <setdate_r+0x16a>
    77e8:	9f 93       	push	r25
    77ea:	8f 93       	push	r24
    77ec:	81 e6       	ldi	r24, 0x61	; 97
    77ee:	97 e0       	ldi	r25, 0x07	; 7
    77f0:	20 c0       	rjmp	.+64     	; 0x7832 <setdate_r+0x1aa>
    77f2:	8f 81       	ldd	r24, Y+7	; 0x07
    77f4:	98 85       	ldd	r25, Y+8	; 0x08
    77f6:	9c 01       	movw	r18, r24
    77f8:	21 50       	subi	r18, 0x01	; 1
    77fa:	31 09       	sbc	r19, r1
    77fc:	2f 31       	cpi	r18, 0x1F	; 31
    77fe:	31 05       	cpc	r19, r1
    7800:	28 f0       	brcs	.+10     	; 0x780c <setdate_r+0x184>
    7802:	9f 93       	push	r25
    7804:	8f 93       	push	r24
    7806:	80 e5       	ldi	r24, 0x50	; 80
    7808:	97 e0       	ldi	r25, 0x07	; 7
    780a:	13 c0       	rjmp	.+38     	; 0x7832 <setdate_r+0x1aa>
    780c:	8d 81       	ldd	r24, Y+5	; 0x05
    780e:	9e 81       	ldd	r25, Y+6	; 0x06
    7810:	88 31       	cpi	r24, 0x18	; 24
    7812:	91 05       	cpc	r25, r1
    7814:	28 f0       	brcs	.+10     	; 0x7820 <setdate_r+0x198>
    7816:	9f 93       	push	r25
    7818:	8f 93       	push	r24
    781a:	8e e3       	ldi	r24, 0x3E	; 62
    781c:	97 e0       	ldi	r25, 0x07	; 7
    781e:	09 c0       	rjmp	.+18     	; 0x7832 <setdate_r+0x1aa>
    7820:	8b 81       	ldd	r24, Y+3	; 0x03
    7822:	9c 81       	ldd	r25, Y+4	; 0x04
    7824:	8c 33       	cpi	r24, 0x3C	; 60
    7826:	91 05       	cpc	r25, r1
    7828:	78 f0       	brcs	.+30     	; 0x7848 <setdate_r+0x1c0>
    782a:	9f 93       	push	r25
    782c:	8f 93       	push	r24
    782e:	8d e2       	ldi	r24, 0x2D	; 45
    7830:	97 e0       	ldi	r25, 0x07	; 7
    7832:	1f 92       	push	r1
    7834:	9f 93       	push	r25
    7836:	8f 93       	push	r24
    7838:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    783c:	0f 90       	pop	r0
    783e:	0f 90       	pop	r0
    7840:	0f 90       	pop	r0
    7842:	0f 90       	pop	r0
    7844:	0f 90       	pop	r0
    7846:	25 c0       	rjmp	.+74     	; 0x7892 <setdate_r+0x20a>
    7848:	ce 01       	movw	r24, r28
    784a:	01 96       	adiw	r24, 0x01	; 1
    784c:	19 df       	rcall	.-462    	; 0x7680 <timegm>
    784e:	6b 01       	movw	r12, r22
    7850:	7c 01       	movw	r14, r24
    7852:	6f 8b       	std	Y+23, r22	; 0x17
    7854:	78 8f       	std	Y+24, r23	; 0x18
    7856:	89 8f       	std	Y+25, r24	; 0x19
    7858:	9a 8f       	std	Y+26, r25	; 0x1a
    785a:	1b 8e       	std	Y+27, r1	; 0x1b
    785c:	1c 8e       	std	Y+28, r1	; 0x1c
    785e:	1d 8e       	std	Y+29, r1	; 0x1d
    7860:	1e 8e       	std	Y+30, r1	; 0x1e
    7862:	be 01       	movw	r22, r28
    7864:	69 5e       	subi	r22, 0xE9	; 233
    7866:	7f 4f       	sbci	r23, 0xFF	; 255
    7868:	80 e0       	ldi	r24, 0x00	; 0
    786a:	90 e0       	ldi	r25, 0x00	; 0
    786c:	08 db       	rcall	.-2544   	; 0x6e7e <clock_settime>
    786e:	b7 01       	movw	r22, r14
    7870:	a6 01       	movw	r20, r12
    7872:	81 e0       	ldi	r24, 0x01	; 1
    7874:	90 e0       	ldi	r25, 0x00	; 0
    7876:	0e 94 82 2f 	call	0x5f04	; 0x5f04 <rtc_init>
    787a:	81 11       	cpse	r24, r1
    787c:	0d c0       	rjmp	.+26     	; 0x7898 <setdate_r+0x210>
    787e:	86 e1       	ldi	r24, 0x16	; 22
    7880:	97 e0       	ldi	r25, 0x07	; 7
    7882:	1f 92       	push	r1
    7884:	9f 93       	push	r25
    7886:	8f 93       	push	r24
    7888:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    788c:	0f 90       	pop	r0
    788e:	0f 90       	pop	r0
    7890:	0f 90       	pop	r0
    7892:	8f ef       	ldi	r24, 0xFF	; 255
    7894:	9f ef       	ldi	r25, 0xFF	; 255
    7896:	02 c0       	rjmp	.+4      	; 0x789c <setdate_r+0x214>
    7898:	80 e0       	ldi	r24, 0x00	; 0
    789a:	90 e0       	ldi	r25, 0x00	; 0
    789c:	a0 96       	adiw	r28, 0x20	; 32
    789e:	0f b6       	in	r0, 0x3f	; 63
    78a0:	f8 94       	cli
    78a2:	de bf       	out	0x3e, r29	; 62
    78a4:	0f be       	out	0x3f, r0	; 63
    78a6:	cd bf       	out	0x3d, r28	; 61
    78a8:	df 91       	pop	r29
    78aa:	cf 91       	pop	r28
    78ac:	ff 90       	pop	r15
    78ae:	ef 90       	pop	r14
    78b0:	df 90       	pop	r13
    78b2:	cf 90       	pop	r12
    78b4:	08 95       	ret

000078b6 <setdate>:
    78b6:	a8 e2       	ldi	r26, 0x28	; 40
    78b8:	b0 e0       	ldi	r27, 0x00	; 0
    78ba:	e1 e6       	ldi	r30, 0x61	; 97
    78bc:	fc e3       	ldi	r31, 0x3C	; 60
    78be:	0c 94 23 e8 	jmp	0x1d046	; 0x1d046 <__prologue_saves__+0x20>
    78c2:	84 e8       	ldi	r24, 0x84	; 132
    78c4:	97 e0       	ldi	r25, 0x07	; 7
    78c6:	1f 92       	push	r1
    78c8:	9f 93       	push	r25
    78ca:	8f 93       	push	r24
    78cc:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    78d0:	40 91 ce 1c 	lds	r20, 0x1CCE	; 0x801cce <__iob>
    78d4:	50 91 cf 1c 	lds	r21, 0x1CCF	; 0x801ccf <__iob+0x1>
    78d8:	67 e2       	ldi	r22, 0x27	; 39
    78da:	70 e0       	ldi	r23, 0x00	; 0
    78dc:	ce 01       	movw	r24, r28
    78de:	01 96       	adiw	r24, 0x01	; 1
    78e0:	0e 94 c7 75 	call	0xeb8e	; 0xeb8e <fgets>
    78e4:	ce 01       	movw	r24, r28
    78e6:	01 96       	adiw	r24, 0x01	; 1
    78e8:	cf de       	rcall	.-610    	; 0x7688 <setdate_r>
    78ea:	0f 90       	pop	r0
    78ec:	0f 90       	pop	r0
    78ee:	0f 90       	pop	r0
    78f0:	a8 96       	adiw	r28, 0x28	; 40
    78f2:	e2 e0       	ldi	r30, 0x02	; 2
    78f4:	0c 94 3f e8 	jmp	0x1d07e	; 0x1d07e <__epilogue_restores__+0x20>

000078f8 <find_dst>:
    78f8:	a8 e2       	ldi	r26, 0x28	; 40
    78fa:	b0 e0       	ldi	r27, 0x00	; 0
    78fc:	e2 e8       	ldi	r30, 0x82	; 130
    78fe:	fc e3       	ldi	r31, 0x3C	; 60
    7900:	0c 94 13 e8 	jmp	0x1d026	; 0x1d026 <__prologue_saves__>
    7904:	3c 01       	movw	r6, r24
    7906:	1a 01       	movw	r2, r20
    7908:	2b 01       	movw	r4, r22
    790a:	49 01       	movw	r8, r18
    790c:	1c a3       	std	Y+36, r17	; 0x24
    790e:	0b a3       	std	Y+35, r16	; 0x23
    7910:	de a2       	std	Y+38, r13	; 0x26
    7912:	cd a2       	std	Y+37, r12	; 0x25
    7914:	b8 a6       	std	Y+40, r11	; 0x28
    7916:	af a2       	std	Y+39, r10	; 0x27
    7918:	be 01       	movw	r22, r28
    791a:	61 5e       	subi	r22, 0xE1	; 225
    791c:	7f 4f       	sbci	r23, 0xFF	; 255
    791e:	ce 01       	movw	r24, r28
    7920:	47 96       	adiw	r24, 0x17	; 23
    7922:	1b dc       	rcall	.-1994   	; 0x715a <gettimeofday>
    7924:	af 8d       	ldd	r26, Y+31	; 0x1f
    7926:	b8 a1       	ldd	r27, Y+32	; 0x20
    7928:	2c e3       	ldi	r18, 0x3C	; 60
    792a:	30 e0       	ldi	r19, 0x00	; 0
    792c:	0e 94 ed e7 	call	0x1cfda	; 0x1cfda <__usmulhisi3>
    7930:	5b 01       	movw	r10, r22
    7932:	6c 01       	movw	r12, r24
    7934:	61 14       	cp	r6, r1
    7936:	71 04       	cpc	r7, r1
    7938:	31 f0       	breq	.+12     	; 0x7946 <find_dst+0x4e>
    793a:	20 e1       	ldi	r18, 0x10	; 16
    793c:	a2 1a       	sub	r10, r18
    793e:	2e e0       	ldi	r18, 0x0E	; 14
    7940:	b2 0a       	sbc	r11, r18
    7942:	c1 08       	sbc	r12, r1
    7944:	d1 08       	sbc	r13, r1
    7946:	81 14       	cp	r8, r1
    7948:	91 04       	cpc	r9, r1
    794a:	39 f0       	breq	.+14     	; 0x795a <find_dst+0x62>
    794c:	4c e6       	ldi	r20, 0x6C	; 108
    794e:	84 1a       	sub	r8, r20
    7950:	47 e0       	ldi	r20, 0x07	; 7
    7952:	94 0a       	sbc	r9, r20
    7954:	9c 86       	std	Y+12, r9	; 0x0c
    7956:	8b 86       	std	Y+11, r8	; 0x0b
    7958:	11 c0       	rjmp	.+34     	; 0x797c <find_dst+0x84>
    795a:	21 14       	cp	r2, r1
    795c:	31 04       	cpc	r3, r1
    795e:	41 04       	cpc	r4, r1
    7960:	51 04       	cpc	r5, r1
    7962:	21 f4       	brne	.+8      	; 0x796c <find_dst+0x74>
    7964:	2f 88       	ldd	r2, Y+23	; 0x17
    7966:	38 8c       	ldd	r3, Y+24	; 0x18
    7968:	49 8c       	ldd	r4, Y+25	; 0x19
    796a:	5a 8c       	ldd	r5, Y+26	; 0x1a
    796c:	8e 01       	movw	r16, r28
    796e:	0f 5f       	subi	r16, 0xFF	; 255
    7970:	1f 4f       	sbci	r17, 0xFF	; 255
    7972:	a6 01       	movw	r20, r12
    7974:	95 01       	movw	r18, r10
    7976:	c2 01       	movw	r24, r4
    7978:	b1 01       	movw	r22, r2
    797a:	cf da       	rcall	.-2658   	; 0x6f1a <time_to_tm>
    797c:	8b a1       	ldd	r24, Y+35	; 0x23
    797e:	9c a1       	ldd	r25, Y+36	; 0x24
    7980:	01 97       	sbiw	r24, 0x01	; 1
    7982:	9a 87       	std	Y+10, r25	; 0x0a
    7984:	89 87       	std	Y+9, r24	; 0x09
    7986:	81 e0       	ldi	r24, 0x01	; 1
    7988:	90 e0       	ldi	r25, 0x00	; 0
    798a:	98 87       	std	Y+8, r25	; 0x08
    798c:	8f 83       	std	Y+7, r24	; 0x07
    798e:	8f a1       	ldd	r24, Y+39	; 0x27
    7990:	98 a5       	ldd	r25, Y+40	; 0x28
    7992:	9e 83       	std	Y+6, r25	; 0x06
    7994:	8d 83       	std	Y+5, r24	; 0x05
    7996:	1c 82       	std	Y+4, r1	; 0x04
    7998:	1b 82       	std	Y+3, r1	; 0x03
    799a:	1a 82       	std	Y+2, r1	; 0x02
    799c:	19 82       	std	Y+1, r1	; 0x01
    799e:	ce 01       	movw	r24, r28
    79a0:	01 96       	adiw	r24, 0x01	; 1
    79a2:	6e de       	rcall	.-804    	; 0x7680 <timegm>
    79a4:	45 01       	movw	r8, r10
    79a6:	56 01       	movw	r10, r12
    79a8:	86 0e       	add	r8, r22
    79aa:	97 1e       	adc	r9, r23
    79ac:	a8 1e       	adc	r10, r24
    79ae:	b9 1e       	adc	r11, r25
    79b0:	8e 01       	movw	r16, r28
    79b2:	0f 5f       	subi	r16, 0xFF	; 255
    79b4:	1f 4f       	sbci	r17, 0xFF	; 255
    79b6:	20 e0       	ldi	r18, 0x00	; 0
    79b8:	30 e0       	ldi	r19, 0x00	; 0
    79ba:	a9 01       	movw	r20, r18
    79bc:	c5 01       	movw	r24, r10
    79be:	b4 01       	movw	r22, r8
    79c0:	ac da       	rcall	.-2728   	; 0x6f1a <time_to_tm>
    79c2:	2d 85       	ldd	r18, Y+13	; 0x0d
    79c4:	3e 85       	ldd	r19, Y+14	; 0x0e
    79c6:	e7 e0       	ldi	r30, 0x07	; 7
    79c8:	f0 e0       	ldi	r31, 0x00	; 0
    79ca:	c9 01       	movw	r24, r18
    79cc:	bf 01       	movw	r22, r30
    79ce:	0e 94 7e e7 	call	0x1cefc	; 0x1cefc <__divmodhi4>
    79d2:	4d a1       	ldd	r20, Y+37	; 0x25
    79d4:	5e a1       	ldd	r21, Y+38	; 0x26
    79d6:	48 17       	cp	r20, r24
    79d8:	59 07       	cpc	r21, r25
    79da:	21 f4       	brne	.+8      	; 0x79e4 <find_dst+0xec>
    79dc:	51 e0       	ldi	r21, 0x01	; 1
    79de:	e5 1a       	sub	r14, r21
    79e0:	f1 08       	sbc	r15, r1
    79e2:	51 f0       	breq	.+20     	; 0x79f8 <find_dst+0x100>
    79e4:	80 e8       	ldi	r24, 0x80	; 128
    79e6:	88 0e       	add	r8, r24
    79e8:	81 e5       	ldi	r24, 0x51	; 81
    79ea:	98 1e       	adc	r9, r24
    79ec:	81 e0       	ldi	r24, 0x01	; 1
    79ee:	a8 1e       	adc	r10, r24
    79f0:	b1 1c       	adc	r11, r1
    79f2:	2f 5f       	subi	r18, 0xFF	; 255
    79f4:	3f 4f       	sbci	r19, 0xFF	; 255
    79f6:	e9 cf       	rjmp	.-46     	; 0x79ca <find_dst+0xd2>
    79f8:	c5 01       	movw	r24, r10
    79fa:	b4 01       	movw	r22, r8
    79fc:	a8 96       	adiw	r28, 0x28	; 40
    79fe:	e2 e1       	ldi	r30, 0x12	; 18
    7a00:	0c 94 2f e8 	jmp	0x1d05e	; 0x1d05e <__epilogue_restores__>

00007a04 <set_dst>:
    7a04:	4f 92       	push	r4
    7a06:	5f 92       	push	r5
    7a08:	6f 92       	push	r6
    7a0a:	7f 92       	push	r7
    7a0c:	af 92       	push	r10
    7a0e:	bf 92       	push	r11
    7a10:	cf 92       	push	r12
    7a12:	df 92       	push	r13
    7a14:	ef 92       	push	r14
    7a16:	ff 92       	push	r15
    7a18:	0f 93       	push	r16
    7a1a:	1f 93       	push	r17
    7a1c:	cf 93       	push	r28
    7a1e:	df 93       	push	r29
    7a20:	cd b7       	in	r28, 0x3d	; 61
    7a22:	de b7       	in	r29, 0x3e	; 62
    7a24:	2c 97       	sbiw	r28, 0x0c	; 12
    7a26:	0f b6       	in	r0, 0x3f	; 63
    7a28:	f8 94       	cli
    7a2a:	de bf       	out	0x3e, r29	; 62
    7a2c:	0f be       	out	0x3f, r0	; 63
    7a2e:	cd bf       	out	0x3d, r28	; 61
    7a30:	2b 01       	movw	r4, r22
    7a32:	3c 01       	movw	r6, r24
    7a34:	67 2b       	or	r22, r23
    7a36:	68 2b       	or	r22, r24
    7a38:	69 2b       	or	r22, r25
    7a3a:	51 f4       	brne	.+20     	; 0x7a50 <set_dst+0x4c>
    7a3c:	be 01       	movw	r22, r28
    7a3e:	67 5f       	subi	r22, 0xF7	; 247
    7a40:	7f 4f       	sbci	r23, 0xFF	; 255
    7a42:	ce 01       	movw	r24, r28
    7a44:	01 96       	adiw	r24, 0x01	; 1
    7a46:	89 db       	rcall	.-2286   	; 0x715a <gettimeofday>
    7a48:	49 80       	ldd	r4, Y+1	; 0x01
    7a4a:	5a 80       	ldd	r5, Y+2	; 0x02
    7a4c:	6b 80       	ldd	r6, Y+3	; 0x03
    7a4e:	7c 80       	ldd	r7, Y+4	; 0x04
    7a50:	80 91 85 1a 	lds	r24, 0x1A85	; 0x801a85 <dst+0x8>
    7a54:	90 91 86 1a 	lds	r25, 0x1A86	; 0x801a86 <dst+0x9>
    7a58:	a0 91 87 1a 	lds	r26, 0x1A87	; 0x801a87 <dst+0xa>
    7a5c:	b0 91 88 1a 	lds	r27, 0x1A88	; 0x801a88 <dst+0xb>
    7a60:	84 15       	cp	r24, r4
    7a62:	95 05       	cpc	r25, r5
    7a64:	a6 05       	cpc	r26, r6
    7a66:	b7 05       	cpc	r27, r7
    7a68:	50 f0       	brcs	.+20     	; 0x7a7e <set_dst+0x7a>
    7a6a:	84 19       	sub	r24, r4
    7a6c:	95 09       	sbc	r25, r5
    7a6e:	a6 09       	sbc	r26, r6
    7a70:	b7 09       	sbc	r27, r7
    7a72:	80 38       	cpi	r24, 0x80	; 128
    7a74:	91 45       	sbci	r25, 0x51	; 81
    7a76:	a1 40       	sbci	r26, 0x01	; 1
    7a78:	b1 05       	cpc	r27, r1
    7a7a:	70 f4       	brcc	.+28     	; 0x7a98 <set_dst+0x94>
    7a7c:	42 c0       	rjmp	.+132    	; 0x7b02 <set_dst+0xfe>
    7a7e:	a3 01       	movw	r20, r6
    7a80:	92 01       	movw	r18, r4
    7a82:	28 1b       	sub	r18, r24
    7a84:	39 0b       	sbc	r19, r25
    7a86:	4a 0b       	sbc	r20, r26
    7a88:	5b 0b       	sbc	r21, r27
    7a8a:	da 01       	movw	r26, r20
    7a8c:	c9 01       	movw	r24, r18
    7a8e:	80 38       	cpi	r24, 0x80	; 128
    7a90:	91 45       	sbci	r25, 0x51	; 81
    7a92:	a1 40       	sbci	r26, 0x01	; 1
    7a94:	b1 05       	cpc	r27, r1
    7a96:	a8 f1       	brcs	.+106    	; 0x7b02 <set_dst+0xfe>
    7a98:	40 92 85 1a 	sts	0x1A85, r4	; 0x801a85 <dst+0x8>
    7a9c:	50 92 86 1a 	sts	0x1A86, r5	; 0x801a86 <dst+0x9>
    7aa0:	60 92 87 1a 	sts	0x1A87, r6	; 0x801a87 <dst+0xa>
    7aa4:	70 92 88 1a 	sts	0x1A88, r7	; 0x801a88 <dst+0xb>
    7aa8:	82 e0       	ldi	r24, 0x02	; 2
    7aaa:	a8 2e       	mov	r10, r24
    7aac:	b1 2c       	mov	r11, r1
    7aae:	c1 2c       	mov	r12, r1
    7ab0:	d1 2c       	mov	r13, r1
    7ab2:	92 e0       	ldi	r25, 0x02	; 2
    7ab4:	e9 2e       	mov	r14, r25
    7ab6:	f1 2c       	mov	r15, r1
    7ab8:	03 e0       	ldi	r16, 0x03	; 3
    7aba:	10 e0       	ldi	r17, 0x00	; 0
    7abc:	20 e0       	ldi	r18, 0x00	; 0
    7abe:	30 e0       	ldi	r19, 0x00	; 0
    7ac0:	b3 01       	movw	r22, r6
    7ac2:	a2 01       	movw	r20, r4
    7ac4:	80 e0       	ldi	r24, 0x00	; 0
    7ac6:	90 e0       	ldi	r25, 0x00	; 0
    7ac8:	17 df       	rcall	.-466    	; 0x78f8 <find_dst>
    7aca:	60 93 7d 1a 	sts	0x1A7D, r22	; 0x801a7d <dst>
    7ace:	70 93 7e 1a 	sts	0x1A7E, r23	; 0x801a7e <dst+0x1>
    7ad2:	80 93 7f 1a 	sts	0x1A7F, r24	; 0x801a7f <dst+0x2>
    7ad6:	90 93 80 1a 	sts	0x1A80, r25	; 0x801a80 <dst+0x3>
    7ada:	ee 24       	eor	r14, r14
    7adc:	e3 94       	inc	r14
    7ade:	f1 2c       	mov	r15, r1
    7ae0:	0b e0       	ldi	r16, 0x0B	; 11
    7ae2:	10 e0       	ldi	r17, 0x00	; 0
    7ae4:	20 e0       	ldi	r18, 0x00	; 0
    7ae6:	30 e0       	ldi	r19, 0x00	; 0
    7ae8:	b3 01       	movw	r22, r6
    7aea:	a2 01       	movw	r20, r4
    7aec:	81 e0       	ldi	r24, 0x01	; 1
    7aee:	90 e0       	ldi	r25, 0x00	; 0
    7af0:	03 df       	rcall	.-506    	; 0x78f8 <find_dst>
    7af2:	60 93 81 1a 	sts	0x1A81, r22	; 0x801a81 <dst+0x4>
    7af6:	70 93 82 1a 	sts	0x1A82, r23	; 0x801a82 <dst+0x5>
    7afa:	80 93 83 1a 	sts	0x1A83, r24	; 0x801a83 <dst+0x6>
    7afe:	90 93 84 1a 	sts	0x1A84, r25	; 0x801a84 <dst+0x7>
    7b02:	2c 96       	adiw	r28, 0x0c	; 12
    7b04:	0f b6       	in	r0, 0x3f	; 63
    7b06:	f8 94       	cli
    7b08:	de bf       	out	0x3e, r29	; 62
    7b0a:	0f be       	out	0x3f, r0	; 63
    7b0c:	cd bf       	out	0x3d, r28	; 61
    7b0e:	df 91       	pop	r29
    7b10:	cf 91       	pop	r28
    7b12:	1f 91       	pop	r17
    7b14:	0f 91       	pop	r16
    7b16:	ff 90       	pop	r15
    7b18:	ef 90       	pop	r14
    7b1a:	df 90       	pop	r13
    7b1c:	cf 90       	pop	r12
    7b1e:	bf 90       	pop	r11
    7b20:	af 90       	pop	r10
    7b22:	7f 90       	pop	r7
    7b24:	6f 90       	pop	r6
    7b26:	5f 90       	pop	r5
    7b28:	4f 90       	pop	r4
    7b2a:	08 95       	ret

00007b2c <asctime_r>:
    7b2c:	0f 93       	push	r16
    7b2e:	1f 93       	push	r17
    7b30:	cf 93       	push	r28
    7b32:	df 93       	push	r29
    7b34:	ec 01       	movw	r28, r24
    7b36:	8b 01       	movw	r16, r22
    7b38:	60 e0       	ldi	r22, 0x00	; 0
    7b3a:	70 e0       	ldi	r23, 0x00	; 0
    7b3c:	d9 db       	rcall	.-2126   	; 0x72f0 <normalize>
    7b3e:	20 e2       	ldi	r18, 0x20	; 32
    7b40:	d8 01       	movw	r26, r16
    7b42:	82 2f       	mov	r24, r18
    7b44:	1d 92       	st	X+, r1
    7b46:	8a 95       	dec	r24
    7b48:	e9 f7       	brne	.-6      	; 0x7b44 <asctime_r+0x18>
    7b4a:	8a 85       	ldd	r24, Y+10	; 0x0a
    7b4c:	9b 85       	ldd	r25, Y+11	; 0x0b
    7b4e:	84 59       	subi	r24, 0x94	; 148
    7b50:	98 4f       	sbci	r25, 0xF8	; 248
    7b52:	9f 93       	push	r25
    7b54:	8f 93       	push	r24
    7b56:	89 81       	ldd	r24, Y+1	; 0x01
    7b58:	8f 93       	push	r24
    7b5a:	88 81       	ld	r24, Y
    7b5c:	8f 93       	push	r24
    7b5e:	8b 81       	ldd	r24, Y+3	; 0x03
    7b60:	8f 93       	push	r24
    7b62:	8a 81       	ldd	r24, Y+2	; 0x02
    7b64:	8f 93       	push	r24
    7b66:	8d 81       	ldd	r24, Y+5	; 0x05
    7b68:	8f 93       	push	r24
    7b6a:	8c 81       	ldd	r24, Y+4	; 0x04
    7b6c:	8f 93       	push	r24
    7b6e:	8f 81       	ldd	r24, Y+7	; 0x07
    7b70:	8f 93       	push	r24
    7b72:	8e 81       	ldd	r24, Y+6	; 0x06
    7b74:	8f 93       	push	r24
    7b76:	e8 85       	ldd	r30, Y+8	; 0x08
    7b78:	f9 85       	ldd	r31, Y+9	; 0x09
    7b7a:	ee 0f       	add	r30, r30
    7b7c:	ff 1f       	adc	r31, r31
    7b7e:	ee 5e       	subi	r30, 0xEE	; 238
    7b80:	fe 4f       	sbci	r31, 0xFE	; 254
    7b82:	81 81       	ldd	r24, Z+1	; 0x01
    7b84:	8f 93       	push	r24
    7b86:	80 81       	ld	r24, Z
    7b88:	8f 93       	push	r24
    7b8a:	ec 85       	ldd	r30, Y+12	; 0x0c
    7b8c:	fd 85       	ldd	r31, Y+13	; 0x0d
    7b8e:	ee 0f       	add	r30, r30
    7b90:	ff 1f       	adc	r31, r31
    7b92:	e4 5d       	subi	r30, 0xD4	; 212
    7b94:	fe 4f       	sbci	r31, 0xFE	; 254
    7b96:	81 81       	ldd	r24, Z+1	; 0x01
    7b98:	8f 93       	push	r24
    7b9a:	80 81       	ld	r24, Z
    7b9c:	8f 93       	push	r24
    7b9e:	85 ea       	ldi	r24, 0xA5	; 165
    7ba0:	97 e0       	ldi	r25, 0x07	; 7
    7ba2:	1f 92       	push	r1
    7ba4:	9f 93       	push	r25
    7ba6:	8f 93       	push	r24
    7ba8:	1f 92       	push	r1
    7baa:	2f 93       	push	r18
    7bac:	1f 93       	push	r17
    7bae:	0f 93       	push	r16
    7bb0:	0e 94 f7 46 	call	0x8dee	; 0x8dee <snprintf_P>
    7bb4:	ad b7       	in	r26, 0x3d	; 61
    7bb6:	be b7       	in	r27, 0x3e	; 62
    7bb8:	55 96       	adiw	r26, 0x15	; 21
    7bba:	0f b6       	in	r0, 0x3f	; 63
    7bbc:	f8 94       	cli
    7bbe:	be bf       	out	0x3e, r27	; 62
    7bc0:	0f be       	out	0x3f, r0	; 63
    7bc2:	ad bf       	out	0x3d, r26	; 61
    7bc4:	c8 01       	movw	r24, r16
    7bc6:	df 91       	pop	r29
    7bc8:	cf 91       	pop	r28
    7bca:	1f 91       	pop	r17
    7bcc:	0f 91       	pop	r16
    7bce:	08 95       	ret

00007bd0 <asctime>:
    7bd0:	64 e1       	ldi	r22, 0x14	; 20
    7bd2:	78 e1       	ldi	r23, 0x18	; 24
    7bd4:	ab cf       	rjmp	.-170    	; 0x7b2c <asctime_r>
    7bd6:	08 95       	ret

00007bd8 <ctime_gm>:
    7bd8:	a6 e1       	ldi	r26, 0x16	; 22
    7bda:	b0 e0       	ldi	r27, 0x00	; 0
    7bdc:	e2 ef       	ldi	r30, 0xF2	; 242
    7bde:	fd e3       	ldi	r31, 0x3D	; 61
    7be0:	0c 94 23 e8 	jmp	0x1d046	; 0x1d046 <__prologue_saves__+0x20>
    7be4:	be 01       	movw	r22, r28
    7be6:	6f 5f       	subi	r22, 0xFF	; 255
    7be8:	7f 4f       	sbci	r23, 0xFF	; 255
    7bea:	75 da       	rcall	.-2838   	; 0x70d6 <gmtime_r>
    7bec:	64 ed       	ldi	r22, 0xD4	; 212
    7bee:	77 e1       	ldi	r23, 0x17	; 23
    7bf0:	9d df       	rcall	.-198    	; 0x7b2c <asctime_r>
    7bf2:	66 96       	adiw	r28, 0x16	; 22
    7bf4:	e2 e0       	ldi	r30, 0x02	; 2
    7bf6:	0c 94 3f e8 	jmp	0x1d07e	; 0x1d07e <__epilogue_restores__+0x20>

00007bfa <initialize_clock>:
/// @param[in] minwest: your time zone as minute west
///@return  void
///@see: clock_settime()
MEMSPACE
void initialize_clock(int minwest)
{
    7bfa:	a2 e2       	ldi	r26, 0x22	; 34
    7bfc:	b0 e0       	ldi	r27, 0x00	; 0
    7bfe:	e3 e0       	ldi	r30, 0x03	; 3
    7c00:	fe e3       	ldi	r31, 0x3E	; 62
    7c02:	0c 94 1d e8 	jmp	0x1d03a	; 0x1d03a <__prologue_saves__+0x14>
    7c06:	8c 01       	movw	r16, r24
    tm_t tc;
    ts_t ts;
    tz_t tz;

#ifdef RTC_SUPPORT
    if(!rtc_init(0,0L))
    7c08:	40 e0       	ldi	r20, 0x00	; 0
    7c0a:	50 e0       	ldi	r21, 0x00	; 0
    7c0c:	ba 01       	movw	r22, r20
    7c0e:	80 e0       	ldi	r24, 0x00	; 0
    7c10:	90 e0       	ldi	r25, 0x00	; 0
    7c12:	0e 94 82 2f 	call	0x5f04	; 0x5f04 <rtc_init>
    7c16:	81 11       	cpse	r24, r1
    7c18:	27 c0       	rjmp	.+78     	; 0x7c68 <initialize_clock+0x6e>
    {
        printf("rtc uninitilized\n");
    7c1a:	80 ea       	ldi	r24, 0xA0	; 160
    7c1c:	96 e0       	ldi	r25, 0x06	; 6
    7c1e:	1f 92       	push	r1
    7c20:	9f 93       	push	r25
    7c22:	8f 93       	push	r24
    7c24:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
        printf("attempting rtc init\n");
    7c28:	8b e8       	ldi	r24, 0x8B	; 139
    7c2a:	96 e0       	ldi	r25, 0x06	; 6
    7c2c:	1f 92       	push	r1
    7c2e:	9f 93       	push	r25
    7c30:	8f 93       	push	r24
    7c32:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
        if( !rtc_init(1, (time_t) 0) )
    7c36:	40 e0       	ldi	r20, 0x00	; 0
    7c38:	50 e0       	ldi	r21, 0x00	; 0
    7c3a:	ba 01       	movw	r22, r20
    7c3c:	81 e0       	ldi	r24, 0x01	; 1
    7c3e:	90 e0       	ldi	r25, 0x00	; 0
    7c40:	0e 94 82 2f 	call	0x5f04	; 0x5f04 <rtc_init>
    7c44:	0f 90       	pop	r0
    7c46:	0f 90       	pop	r0
    7c48:	0f 90       	pop	r0
    7c4a:	0f 90       	pop	r0
    7c4c:	0f 90       	pop	r0
    7c4e:	0f 90       	pop	r0
    7c50:	81 11       	cpse	r24, r1
    7c52:	0a c0       	rjmp	.+20     	; 0x7c68 <initialize_clock+0x6e>
        {
            printf("rtc force init failed\n");
    7c54:	84 e7       	ldi	r24, 0x74	; 116
    7c56:	96 e0       	ldi	r25, 0x06	; 6
    7c58:	1f 92       	push	r1
    7c5a:	9f 93       	push	r25
    7c5c:	8f 93       	push	r24
    7c5e:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    7c62:	0f 90       	pop	r0
    7c64:	0f 90       	pop	r0
    7c66:	0f 90       	pop	r0
        }
    }

    if(rtc_read(&tc))
    7c68:	ce 01       	movw	r24, r28
    7c6a:	01 96       	adiw	r24, 0x01	; 1
    7c6c:	0e 94 f6 2f 	call	0x5fec	; 0x5fec <rtc_read>
    7c70:	88 23       	and	r24, r24
    7c72:	51 f0       	breq	.+20     	; 0x7c88 <initialize_clock+0x8e>
    {
        seconds = timegm(&tc);
    7c74:	ce 01       	movw	r24, r28
    7c76:	01 96       	adiw	r24, 0x01	; 1
    7c78:	03 dd       	rcall	.-1530   	; 0x7680 <timegm>
    7c7a:	6b 01       	movw	r12, r22
    7c7c:	7c 01       	movw	r14, r24
    }
#else
    printf("NO RTC\n");
    seconds = 0;
#endif  // RTC_SUPPORT
    if(!seconds)
    7c7e:	67 2b       	or	r22, r23
    7c80:	68 2b       	or	r22, r24
    7c82:	69 2b       	or	r22, r25
    7c84:	c1 f4       	brne	.+48     	; 0x7cb6 <initialize_clock+0xbc>
    7c86:	0a c0       	rjmp	.+20     	; 0x7c9c <initialize_clock+0xa2>
        seconds = timegm(&tc);
    }
    else
    {
        seconds = 0;
        printf("rtc read errorafter init\n");
    7c88:	8a e5       	ldi	r24, 0x5A	; 90
    7c8a:	96 e0       	ldi	r25, 0x06	; 6
    7c8c:	1f 92       	push	r1
    7c8e:	9f 93       	push	r25
    7c90:	8f 93       	push	r24
    7c92:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    7c96:	0f 90       	pop	r0
    7c98:	0f 90       	pop	r0
    7c9a:	0f 90       	pop	r0
#else
    printf("NO RTC\n");
    seconds = 0;
#endif  // RTC_SUPPORT
    if(!seconds)
        printf("use setdate command to change time\n");
    7c9c:	86 e3       	ldi	r24, 0x36	; 54
    7c9e:	96 e0       	ldi	r25, 0x06	; 6
    7ca0:	1f 92       	push	r1
    7ca2:	9f 93       	push	r25
    7ca4:	8f 93       	push	r24
    7ca6:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    7caa:	0f 90       	pop	r0
    7cac:	0f 90       	pop	r0
    7cae:	0f 90       	pop	r0
    7cb0:	c1 2c       	mov	r12, r1
    7cb2:	d1 2c       	mov	r13, r1
    7cb4:	76 01       	movw	r14, r12
    tz.tz_minuteswest = minwest;
    7cb6:	18 a3       	std	Y+32, r17	; 0x20
    7cb8:	0f 8f       	std	Y+31, r16	; 0x1f
    tz.tz_dsttime = 0;
    7cba:	1a a2       	std	Y+34, r1	; 0x22
    7cbc:	19 a2       	std	Y+33, r1	; 0x21
    settimezone( &tz );
    7cbe:	ce 01       	movw	r24, r28
    7cc0:	4f 96       	adiw	r24, 0x1f	; 31
    7cc2:	3a da       	rcall	.-2956   	; 0x7138 <settimezone>

    ts.tv_sec = seconds;
    7cc4:	cf 8a       	std	Y+23, r12	; 0x17
    7cc6:	d8 8e       	std	Y+24, r13	; 0x18
    7cc8:	e9 8e       	std	Y+25, r14	; 0x19
    7cca:	fa 8e       	std	Y+26, r15	; 0x1a
    ts.tv_nsec = 0L;
    7ccc:	1b 8e       	std	Y+27, r1	; 0x1b
    7cce:	1c 8e       	std	Y+28, r1	; 0x1c
    7cd0:	1d 8e       	std	Y+29, r1	; 0x1d
    7cd2:	1e 8e       	std	Y+30, r1	; 0x1e
    clock_settime(0, (ts_t *) &ts);
    7cd4:	be 01       	movw	r22, r28
    7cd6:	69 5e       	subi	r22, 0xE9	; 233
    7cd8:	7f 4f       	sbci	r23, 0xFF	; 255
    7cda:	80 e0       	ldi	r24, 0x00	; 0
    7cdc:	90 e0       	ldi	r25, 0x00	; 0
    7cde:	cf d8       	rcall	.-3682   	; 0x6e7e <clock_settime>
}
    7ce0:	a2 96       	adiw	r28, 0x22	; 34
    7ce2:	e8 e0       	ldi	r30, 0x08	; 8
    7ce4:	0c 94 39 e8 	jmp	0x1d072	; 0x1d072 <__epilogue_restores__+0x14>

00007ce8 <display_clock>:
/// @see: rtc_read
/// @see: timegm()
/// @see: ascitime()
MEMSPACE
void display_clock()
{
    7ce8:	a2 e2       	ldi	r26, 0x22	; 34
    7cea:	b0 e0       	ldi	r27, 0x00	; 0
    7cec:	ea e7       	ldi	r30, 0x7A	; 122
    7cee:	fe e3       	ldi	r31, 0x3E	; 62
    7cf0:	0c 94 23 e8 	jmp	0x1d046	; 0x1d046 <__prologue_saves__+0x20>
    time_t seconds;
    tm_t tc;
    ts_t ts;

#ifdef RTC_SUPPORT
    if(rtc_read(&tc))
    7cf4:	ce 01       	movw	r24, r28
    7cf6:	01 96       	adiw	r24, 0x01	; 1
    7cf8:	0e 94 f6 2f 	call	0x5fec	; 0x5fec <rtc_read>
    7cfc:	88 23       	and	r24, r24
    7cfe:	21 f1       	breq	.+72     	; 0x7d48 <display_clock+0x60>
    {
        seconds = timegm(&tc);
    7d00:	ce 01       	movw	r24, r28
    7d02:	01 96       	adiw	r24, 0x01	; 1
    7d04:	bd dc       	rcall	.-1670   	; 0x7680 <timegm>
    7d06:	6f 8f       	std	Y+31, r22	; 0x1f
    7d08:	78 a3       	std	Y+32, r23	; 0x20
    7d0a:	89 a3       	std	Y+33, r24	; 0x21
    7d0c:	9a a3       	std	Y+34, r25	; 0x22
        printf("rtc seconds: %lu\n",seconds);
    7d0e:	9f 93       	push	r25
    7d10:	8f 93       	push	r24
    7d12:	7f 93       	push	r23
    7d14:	6f 93       	push	r22
    7d16:	84 e2       	ldi	r24, 0x24	; 36
    7d18:	96 e0       	ldi	r25, 0x06	; 6
    7d1a:	1f 92       	push	r1
    7d1c:	9f 93       	push	r25
    7d1e:	8f 93       	push	r24
    7d20:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
        printf("rtc time:    %s\n",asctime(&tc));
    7d24:	ce 01       	movw	r24, r28
    7d26:	01 96       	adiw	r24, 0x01	; 1
    7d28:	53 df       	rcall	.-346    	; 0x7bd0 <asctime>
    7d2a:	9f 93       	push	r25
    7d2c:	8f 93       	push	r24
    7d2e:	83 e1       	ldi	r24, 0x13	; 19
    7d30:	96 e0       	ldi	r25, 0x06	; 6
    7d32:	1f 92       	push	r1
    7d34:	9f 93       	push	r25
    7d36:	8f 93       	push	r24
    7d38:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    7d3c:	0f b6       	in	r0, 0x3f	; 63
    7d3e:	f8 94       	cli
    7d40:	de bf       	out	0x3e, r29	; 62
    7d42:	0f be       	out	0x3f, r0	; 63
    7d44:	cd bf       	out	0x3d, r28	; 61
    7d46:	0a c0       	rjmp	.+20     	; 0x7d5c <display_clock+0x74>
            (int) tc.tm_wday);
#endif
    }
    else
    {
        printf("RTC read failed\n");
    7d48:	82 e0       	ldi	r24, 0x02	; 2
    7d4a:	96 e0       	ldi	r25, 0x06	; 6
    7d4c:	1f 92       	push	r1
    7d4e:	9f 93       	push	r25
    7d50:	8f 93       	push	r24
    7d52:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    7d56:	0f 90       	pop	r0
    7d58:	0f 90       	pop	r0
    7d5a:	0f 90       	pop	r0
    }
#endif  // RTC_SUPPORT

    clock_gettime(0, (ts_t *) &ts);
    7d5c:	be 01       	movw	r22, r28
    7d5e:	69 5e       	subi	r22, 0xE9	; 233
    7d60:	7f 4f       	sbci	r23, 0xFF	; 255
    7d62:	80 e0       	ldi	r24, 0x00	; 0
    7d64:	90 e0       	ldi	r25, 0x00	; 0
    7d66:	0e 94 b0 34 	call	0x6960	; 0x6960 <clock_gettime>
    seconds = ts.tv_sec;
    7d6a:	8f 89       	ldd	r24, Y+23	; 0x17
    7d6c:	98 8d       	ldd	r25, Y+24	; 0x18
    7d6e:	29 8d       	ldd	r18, Y+25	; 0x19
    7d70:	3a 8d       	ldd	r19, Y+26	; 0x1a
    7d72:	8f 8f       	std	Y+31, r24	; 0x1f
    7d74:	98 a3       	std	Y+32, r25	; 0x20
    7d76:	29 a3       	std	Y+33, r18	; 0x21
    7d78:	3a a3       	std	Y+34, r19	; 0x22
    printf("clk seconds: %lu\n",seconds);
    7d7a:	3f 93       	push	r19
    7d7c:	2f 93       	push	r18
    7d7e:	9f 93       	push	r25
    7d80:	8f 93       	push	r24
    7d82:	80 ef       	ldi	r24, 0xF0	; 240
    7d84:	95 e0       	ldi	r25, 0x05	; 5
    7d86:	1f 92       	push	r1
    7d88:	9f 93       	push	r25
    7d8a:	8f 93       	push	r24
    7d8c:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    printf("clk time:    %s\n", asctime(gmtime(&seconds)));
    7d90:	ce 01       	movw	r24, r28
    7d92:	4f 96       	adiw	r24, 0x1f	; 31
    7d94:	b5 d9       	rcall	.-3222   	; 0x7100 <gmtime>
    7d96:	1c df       	rcall	.-456    	; 0x7bd0 <asctime>
    7d98:	9f 93       	push	r25
    7d9a:	8f 93       	push	r24
    7d9c:	8f ed       	ldi	r24, 0xDF	; 223
    7d9e:	95 e0       	ldi	r25, 0x05	; 5
    7da0:	1f 92       	push	r1
    7da2:	9f 93       	push	r25
    7da4:	8f 93       	push	r24
    7da6:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
}
    7daa:	0f b6       	in	r0, 0x3f	; 63
    7dac:	f8 94       	cli
    7dae:	de bf       	out	0x3e, r29	; 62
    7db0:	0f be       	out	0x3f, r0	; 63
    7db2:	cd bf       	out	0x3d, r28	; 61
    7db4:	a2 96       	adiw	r28, 0x22	; 34
    7db6:	e2 e0       	ldi	r30, 0x02	; 2
    7db8:	0c 94 3f e8 	jmp	0x1d07e	; 0x1d07e <__epilogue_restores__+0x20>

00007dbc <_putc_buffer_fn>:
    va_start(va, format);
    _printf_fn(&fn, format, va);
    va_end(va);

    return ((int)fn.sent);
}
    7dbc:	fc 01       	movw	r30, r24
    7dbe:	84 81       	ldd	r24, Z+4	; 0x04
    7dc0:	95 81       	ldd	r25, Z+5	; 0x05
    7dc2:	00 97       	sbiw	r24, 0x00	; 0
    7dc4:	79 f0       	breq	.+30     	; 0x7de4 <_putc_buffer_fn+0x28>
    7dc6:	66 23       	and	r22, r22
    7dc8:	69 f0       	breq	.+26     	; 0x7de4 <_putc_buffer_fn+0x28>
    7dca:	01 97       	sbiw	r24, 0x01	; 1
    7dcc:	95 83       	std	Z+5, r25	; 0x05
    7dce:	84 83       	std	Z+4, r24	; 0x04
    7dd0:	86 81       	ldd	r24, Z+6	; 0x06
    7dd2:	97 81       	ldd	r25, Z+7	; 0x07
    7dd4:	01 96       	adiw	r24, 0x01	; 1
    7dd6:	97 83       	std	Z+7, r25	; 0x07
    7dd8:	86 83       	std	Z+6, r24	; 0x06
    7dda:	a2 81       	ldd	r26, Z+2	; 0x02
    7ddc:	b3 81       	ldd	r27, Z+3	; 0x03
    7dde:	6d 93       	st	X+, r22
    7de0:	b3 83       	std	Z+3, r27	; 0x03
    7de2:	a2 83       	std	Z+2, r26	; 0x02
    7de4:	02 80       	ldd	r0, Z+2	; 0x02
    7de6:	f3 81       	ldd	r31, Z+3	; 0x03
    7de8:	e0 2d       	mov	r30, r0
    7dea:	10 82       	st	Z, r1
    7dec:	08 95       	ret

00007dee <_putc_fn>:
    7dee:	fc 01       	movw	r30, r24
    7df0:	26 81       	ldd	r18, Z+6	; 0x06
    7df2:	37 81       	ldd	r19, Z+7	; 0x07
    7df4:	2f 5f       	subi	r18, 0xFF	; 255
    7df6:	3f 4f       	sbci	r19, 0xFF	; 255
    7df8:	37 83       	std	Z+7, r19	; 0x07
    7dfa:	26 83       	std	Z+6, r18	; 0x06
    7dfc:	86 2f       	mov	r24, r22
    7dfe:	90 e0       	ldi	r25, 0x00	; 0
    7e00:	0c 94 c1 75 	jmp	0xeb82	; 0xeb82 <putchar>
    7e04:	08 95       	ret

00007e06 <bin2num>:
    7e06:	a0 e0       	ldi	r26, 0x00	; 0
    7e08:	b0 e0       	ldi	r27, 0x00	; 0
    7e0a:	e9 e0       	ldi	r30, 0x09	; 9
    7e0c:	ff e3       	ldi	r31, 0x3F	; 63
    7e0e:	0c 94 1a e8 	jmp	0x1d034	; 0x1d034 <__prologue_saves__+0xe>
    7e12:	ea 01       	movw	r28, r20
    7e14:	53 e0       	ldi	r21, 0x03	; 3
    7e16:	ee 0c       	add	r14, r14
    7e18:	ff 1c       	adc	r15, r15
    7e1a:	5a 95       	dec	r21
    7e1c:	e1 f7       	brne	.-8      	; 0x7e16 <bin2num+0x10>
    7e1e:	fc 01       	movw	r30, r24
    7e20:	af 01       	movw	r20, r30
    7e22:	48 1b       	sub	r20, r24
    7e24:	59 0b       	sbc	r21, r25
    7e26:	c4 17       	cp	r28, r20
    7e28:	d5 07       	cpc	r29, r21
    7e2a:	14 f0       	brlt	.+4      	; 0x7e30 <bin2num+0x2a>
    7e2c:	11 92       	st	Z+, r1
    7e2e:	f8 cf       	rjmp	.-16     	; 0x7e20 <bin2num+0x1a>
    7e30:	41 e0       	ldi	r20, 0x01	; 1
    7e32:	e4 1a       	sub	r14, r20
    7e34:	f1 08       	sbc	r15, r1
    7e36:	5b 01       	movw	r10, r22
    7e38:	42 e0       	ldi	r20, 0x02	; 2
    7e3a:	a4 1a       	sub	r10, r20
    7e3c:	b1 08       	sbc	r11, r1
    7e3e:	f7 fc       	sbrc	r15, 7
    7e40:	3b c0       	rjmp	.+118    	; 0x7eb8 <bin2num+0xb2>
    7e42:	f7 01       	movw	r30, r14
    7e44:	43 e0       	ldi	r20, 0x03	; 3
    7e46:	f5 95       	asr	r31
    7e48:	e7 95       	ror	r30
    7e4a:	4a 95       	dec	r20
    7e4c:	e1 f7       	brne	.-8      	; 0x7e46 <bin2num+0x40>
    7e4e:	e0 0f       	add	r30, r16
    7e50:	f1 1f       	adc	r31, r17
    7e52:	40 81       	ld	r20, Z
    7e54:	50 e0       	ldi	r21, 0x00	; 0
    7e56:	f7 01       	movw	r30, r14
    7e58:	e7 70       	andi	r30, 0x07	; 7
    7e5a:	ff 27       	eor	r31, r31
    7e5c:	02 c0       	rjmp	.+4      	; 0x7e62 <bin2num+0x5c>
    7e5e:	55 95       	asr	r21
    7e60:	47 95       	ror	r20
    7e62:	ea 95       	dec	r30
    7e64:	e2 f7       	brpl	.-8      	; 0x7e5e <bin2num+0x58>
    7e66:	41 70       	andi	r20, 0x01	; 1
    7e68:	55 27       	eor	r21, r21
    7e6a:	dc 01       	movw	r26, r24
    7e6c:	e0 e0       	ldi	r30, 0x00	; 0
    7e6e:	f0 e0       	ldi	r31, 0x00	; 0
    7e70:	ec 17       	cp	r30, r28
    7e72:	fd 07       	cpc	r31, r29
    7e74:	ec f4       	brge	.+58     	; 0x7eb0 <bin2num+0xaa>
    7e76:	ea 15       	cp	r30, r10
    7e78:	fb 05       	cpc	r31, r11
    7e7a:	4c f0       	brlt	.+18     	; 0x7e8e <bin2num+0x88>
    7e7c:	dc 01       	movw	r26, r24
    7e7e:	ae 0f       	add	r26, r30
    7e80:	bf 1f       	adc	r27, r31
    7e82:	1c 92       	st	X, r1
    7e84:	41 e0       	ldi	r20, 0x01	; 1
    7e86:	e4 1a       	sub	r14, r20
    7e88:	f1 08       	sbc	r15, r1
    7e8a:	ef 01       	movw	r28, r30
    7e8c:	d8 cf       	rjmp	.-80     	; 0x7e3e <bin2num+0x38>
    7e8e:	9c 90       	ld	r9, X
    7e90:	99 0c       	add	r9, r9
    7e92:	94 2a       	or	r9, r20
    7e94:	49 2d       	mov	r20, r9
    7e96:	50 e0       	ldi	r21, 0x00	; 0
    7e98:	42 17       	cp	r20, r18
    7e9a:	53 07       	cpc	r21, r19
    7e9c:	24 f0       	brlt	.+8      	; 0x7ea6 <bin2num+0xa0>
    7e9e:	92 1a       	sub	r9, r18
    7ea0:	41 e0       	ldi	r20, 0x01	; 1
    7ea2:	50 e0       	ldi	r21, 0x00	; 0
    7ea4:	02 c0       	rjmp	.+4      	; 0x7eaa <bin2num+0xa4>
    7ea6:	40 e0       	ldi	r20, 0x00	; 0
    7ea8:	50 e0       	ldi	r21, 0x00	; 0
    7eaa:	9d 92       	st	X+, r9
    7eac:	31 96       	adiw	r30, 0x01	; 1
    7eae:	e0 cf       	rjmp	.-64     	; 0x7e70 <bin2num+0x6a>
    7eb0:	41 15       	cp	r20, r1
    7eb2:	51 05       	cpc	r21, r1
    7eb4:	01 f7       	brne	.-64     	; 0x7e76 <bin2num+0x70>
    7eb6:	e2 cf       	rjmp	.-60     	; 0x7e7c <bin2num+0x76>
    7eb8:	fc 01       	movw	r30, r24
    7eba:	9f 01       	movw	r18, r30
    7ebc:	28 1b       	sub	r18, r24
    7ebe:	39 0b       	sbc	r19, r25
    7ec0:	2c 17       	cp	r18, r28
    7ec2:	3d 07       	cpc	r19, r29
    7ec4:	4c f4       	brge	.+18     	; 0x7ed8 <bin2num+0xd2>
    7ec6:	20 81       	ld	r18, Z
    7ec8:	2a 30       	cpi	r18, 0x0A	; 10
    7eca:	10 f4       	brcc	.+4      	; 0x7ed0 <bin2num+0xca>
    7ecc:	20 5d       	subi	r18, 0xD0	; 208
    7ece:	01 c0       	rjmp	.+2      	; 0x7ed2 <bin2num+0xcc>
    7ed0:	29 5a       	subi	r18, 0xA9	; 169
    7ed2:	20 83       	st	Z, r18
    7ed4:	31 96       	adiw	r30, 0x01	; 1
    7ed6:	f1 cf       	rjmp	.-30     	; 0x7eba <bin2num+0xb4>
    7ed8:	9e 01       	movw	r18, r28
    7eda:	d7 ff       	sbrs	r29, 7
    7edc:	02 c0       	rjmp	.+4      	; 0x7ee2 <bin2num+0xdc>
    7ede:	20 e0       	ldi	r18, 0x00	; 0
    7ee0:	30 e0       	ldi	r19, 0x00	; 0
    7ee2:	c1 14       	cp	r12, r1
    7ee4:	d1 04       	cpc	r13, r1
    7ee6:	61 f0       	breq	.+24     	; 0x7f00 <bin2num+0xfa>
    7ee8:	61 50       	subi	r22, 0x01	; 1
    7eea:	71 09       	sbc	r23, r1
    7eec:	26 17       	cp	r18, r22
    7eee:	37 07       	cpc	r19, r23
    7ef0:	3c f4       	brge	.+14     	; 0x7f00 <bin2num+0xfa>
    7ef2:	fc 01       	movw	r30, r24
    7ef4:	e2 0f       	add	r30, r18
    7ef6:	f3 1f       	adc	r31, r19
    7ef8:	c0 82       	st	Z, r12
    7efa:	21 96       	adiw	r28, 0x01	; 1
    7efc:	2f 5f       	subi	r18, 0xFF	; 255
    7efe:	3f 4f       	sbci	r19, 0xFF	; 255
    7f00:	fc 01       	movw	r30, r24
    7f02:	e2 0f       	add	r30, r18
    7f04:	f3 1f       	adc	r31, r19
    7f06:	10 82       	st	Z, r1
    7f08:	0e 94 4b 32 	call	0x6496	; 0x6496 <reverse>
    7f0c:	ce 01       	movw	r24, r28
    7f0e:	cd b7       	in	r28, 0x3d	; 61
    7f10:	de b7       	in	r29, 0x3e	; 62
    7f12:	eb e0       	ldi	r30, 0x0B	; 11
    7f14:	0c 94 36 e8 	jmp	0x1d06c	; 0x1d06c <__epilogue_restores__+0xe>

00007f18 <pch_init>:
    7f18:	e9 e8       	ldi	r30, 0x89	; 137
    7f1a:	fa e1       	ldi	r31, 0x1A	; 26
    7f1c:	91 83       	std	Z+1, r25	; 0x01
    7f1e:	80 83       	st	Z, r24
    7f20:	13 82       	std	Z+3, r1	; 0x03
    7f22:	12 82       	std	Z+2, r1	; 0x02
    7f24:	61 50       	subi	r22, 0x01	; 1
    7f26:	71 09       	sbc	r23, r1
    7f28:	75 83       	std	Z+5, r23	; 0x05
    7f2a:	64 83       	std	Z+4, r22	; 0x04
    7f2c:	fc 01       	movw	r30, r24
    7f2e:	10 82       	st	Z, r1
    7f30:	08 95       	ret

00007f32 <pch>:
    7f32:	20 91 8b 1a 	lds	r18, 0x1A8B	; 0x801a8b <_pch+0x2>
    7f36:	30 91 8c 1a 	lds	r19, 0x1A8C	; 0x801a8c <_pch+0x3>
    7f3a:	60 91 8d 1a 	lds	r22, 0x1A8D	; 0x801a8d <_pch+0x4>
    7f3e:	70 91 8e 1a 	lds	r23, 0x1A8E	; 0x801a8e <_pch+0x5>
    7f42:	40 91 89 1a 	lds	r20, 0x1A89	; 0x801a89 <_pch>
    7f46:	50 91 8a 1a 	lds	r21, 0x1A8A	; 0x801a8a <_pch+0x1>
    7f4a:	26 17       	cp	r18, r22
    7f4c:	37 07       	cpc	r19, r23
    7f4e:	64 f4       	brge	.+24     	; 0x7f68 <pch+0x36>
    7f50:	b9 01       	movw	r22, r18
    7f52:	6f 5f       	subi	r22, 0xFF	; 255
    7f54:	7f 4f       	sbci	r23, 0xFF	; 255
    7f56:	70 93 8c 1a 	sts	0x1A8C, r23	; 0x801a8c <_pch+0x3>
    7f5a:	60 93 8b 1a 	sts	0x1A8B, r22	; 0x801a8b <_pch+0x2>
    7f5e:	fa 01       	movw	r30, r20
    7f60:	e2 0f       	add	r30, r18
    7f62:	f3 1f       	adc	r31, r19
    7f64:	80 83       	st	Z, r24
    7f66:	04 c0       	rjmp	.+8      	; 0x7f70 <pch+0x3e>
    7f68:	fa 01       	movw	r30, r20
    7f6a:	e2 0f       	add	r30, r18
    7f6c:	f3 1f       	adc	r31, r19
    7f6e:	10 82       	st	Z, r1
    7f70:	80 91 8b 1a 	lds	r24, 0x1A8B	; 0x801a8b <_pch+0x2>
    7f74:	90 91 8c 1a 	lds	r25, 0x1A8C	; 0x801a8c <_pch+0x3>
    7f78:	08 95       	ret

00007f7a <p_ntoa>:
    7f7a:	af 92       	push	r10
    7f7c:	cf 92       	push	r12
    7f7e:	df 92       	push	r13
    7f80:	ef 92       	push	r14
    7f82:	ff 92       	push	r15
    7f84:	0f 93       	push	r16
    7f86:	1f 93       	push	r17
    7f88:	cf 93       	push	r28
    7f8a:	df 93       	push	r29
    7f8c:	dc 01       	movw	r26, r24
    7f8e:	eb 01       	movw	r28, r22
    7f90:	fa 01       	movw	r30, r20
    7f92:	b9 01       	movw	r22, r18
    7f94:	98 01       	movw	r18, r16
    7f96:	a6 01       	movw	r20, r12
    7f98:	9a 2d       	mov	r25, r10
    7f9a:	a5 fa       	bst	r10, 5
    7f9c:	cc 24       	eor	r12, r12
    7f9e:	c0 f8       	bld	r12, 0
    7fa0:	a6 fc       	sbrc	r10, 6
    7fa2:	07 c0       	rjmp	.+14     	; 0x7fb2 <p_ntoa+0x38>
    7fa4:	a2 fc       	sbrc	r10, 2
    7fa6:	08 c0       	rjmp	.+16     	; 0x7fb8 <p_ntoa+0x3e>
    7fa8:	a4 fe       	sbrs	r10, 4
    7faa:	09 c0       	rjmp	.+18     	; 0x7fbe <p_ntoa+0x44>
    7fac:	00 e2       	ldi	r16, 0x20	; 32
    7fae:	10 e0       	ldi	r17, 0x00	; 0
    7fb0:	08 c0       	rjmp	.+16     	; 0x7fc2 <p_ntoa+0x48>
    7fb2:	0d e2       	ldi	r16, 0x2D	; 45
    7fb4:	10 e0       	ldi	r17, 0x00	; 0
    7fb6:	05 c0       	rjmp	.+10     	; 0x7fc2 <p_ntoa+0x48>
    7fb8:	0b e2       	ldi	r16, 0x2B	; 43
    7fba:	10 e0       	ldi	r17, 0x00	; 0
    7fbc:	02 c0       	rjmp	.+4      	; 0x7fc2 <p_ntoa+0x48>
    7fbe:	00 e0       	ldi	r16, 0x00	; 0
    7fc0:	10 e0       	ldi	r17, 0x00	; 0
    7fc2:	95 ff       	sbrs	r25, 5
    7fc4:	04 c0       	rjmp	.+8      	; 0x7fce <p_ntoa+0x54>
    7fc6:	89 2f       	mov	r24, r25
    7fc8:	8a 70       	andi	r24, 0x0A	; 10
    7fca:	09 f0       	breq	.+2      	; 0x7fce <p_ntoa+0x54>
    7fcc:	c1 2c       	mov	r12, r1
    7fce:	c0 fa       	bst	r12, 0
    7fd0:	95 f9       	bld	r25, 5
    7fd2:	89 2f       	mov	r24, r25
    7fd4:	82 70       	andi	r24, 0x02	; 2
    7fd6:	c8 2e       	mov	r12, r24
    7fd8:	91 fd       	sbrc	r25, 1
    7fda:	02 c0       	rjmp	.+4      	; 0x7fe0 <p_ntoa+0x66>
    7fdc:	40 e0       	ldi	r20, 0x00	; 0
    7fde:	50 e0       	ldi	r21, 0x00	; 0
    7fe0:	89 2f       	mov	r24, r25
    7fe2:	83 70       	andi	r24, 0x03	; 3
    7fe4:	11 f4       	brne	.+4      	; 0x7fea <p_ntoa+0x70>
    7fe6:	41 e0       	ldi	r20, 0x01	; 1
    7fe8:	50 e0       	ldi	r21, 0x00	; 0
    7fea:	90 ff       	sbrs	r25, 0
    7fec:	0c c0       	rjmp	.+24     	; 0x8006 <p_ntoa+0x8c>
    7fee:	95 fd       	sbrc	r25, 5
    7ff0:	05 c0       	rjmp	.+10     	; 0x7ffc <p_ntoa+0x82>
    7ff2:	c1 10       	cpse	r12, r1
    7ff4:	08 c0       	rjmp	.+16     	; 0x8006 <p_ntoa+0x8c>
    7ff6:	41 e0       	ldi	r20, 0x01	; 1
    7ff8:	50 e0       	ldi	r21, 0x00	; 0
    7ffa:	05 c0       	rjmp	.+10     	; 0x8006 <p_ntoa+0x8c>
    7ffc:	94 75       	andi	r25, 0x54	; 84
    7ffe:	a7 01       	movw	r20, r14
    8000:	11 f0       	breq	.+4      	; 0x8006 <p_ntoa+0x8c>
    8002:	41 50       	subi	r20, 0x01	; 1
    8004:	51 09       	sbc	r21, r1
    8006:	68 01       	movw	r12, r16
    8008:	7e 01       	movw	r14, r28
    800a:	8d 01       	movw	r16, r26
    800c:	cf 01       	movw	r24, r30
    800e:	fb de       	rcall	.-522    	; 0x7e06 <bin2num>
    8010:	df 91       	pop	r29
    8012:	cf 91       	pop	r28
    8014:	1f 91       	pop	r17
    8016:	0f 91       	pop	r16
    8018:	ff 90       	pop	r15
    801a:	ef 90       	pop	r14
    801c:	df 90       	pop	r13
    801e:	cf 90       	pop	r12
    8020:	af 90       	pop	r10
    8022:	08 95       	ret

00008024 <p_ftoa>:
    8024:	2f 92       	push	r2
    8026:	3f 92       	push	r3
    8028:	4f 92       	push	r4
    802a:	5f 92       	push	r5
    802c:	6f 92       	push	r6
    802e:	7f 92       	push	r7
    8030:	8f 92       	push	r8
    8032:	9f 92       	push	r9
    8034:	af 92       	push	r10
    8036:	bf 92       	push	r11
    8038:	cf 92       	push	r12
    803a:	ef 92       	push	r14
    803c:	ff 92       	push	r15
    803e:	0f 93       	push	r16
    8040:	1f 93       	push	r17
    8042:	cf 93       	push	r28
    8044:	df 93       	push	r29
    8046:	4b 01       	movw	r8, r22
    8048:	5c 01       	movw	r10, r24
    804a:	1a 01       	movw	r2, r20
    804c:	38 01       	movw	r6, r16
    804e:	c6 fa       	bst	r12, 6
    8050:	cc 27       	eor	r28, r28
    8052:	c0 f9       	bld	r28, 0
    8054:	b9 01       	movw	r22, r18
    8056:	ca 01       	movw	r24, r20
    8058:	5f df       	rcall	.-322    	; 0x7f18 <pch_init>
    805a:	20 e0       	ldi	r18, 0x00	; 0
    805c:	30 e0       	ldi	r19, 0x00	; 0
    805e:	a9 01       	movw	r20, r18
    8060:	c5 01       	movw	r24, r10
    8062:	b4 01       	movw	r22, r8
    8064:	0e 94 c2 e8 	call	0x1d184	; 0x1d184 <__cmpsf2>
    8068:	87 ff       	sbrs	r24, 7
    806a:	05 c0       	rjmp	.+10     	; 0x8076 <p_ftoa+0x52>
    806c:	b7 fa       	bst	r11, 7
    806e:	b0 94       	com	r11
    8070:	b7 f8       	bld	r11, 7
    8072:	b0 94       	com	r11
    8074:	c1 e0       	ldi	r28, 0x01	; 1
    8076:	c0 fb       	bst	r28, 0
    8078:	c6 f8       	bld	r12, 6
    807a:	c6 fe       	sbrs	r12, 6
    807c:	02 c0       	rjmp	.+4      	; 0x8082 <p_ftoa+0x5e>
    807e:	8d e2       	ldi	r24, 0x2D	; 45
    8080:	07 c0       	rjmp	.+14     	; 0x8090 <p_ftoa+0x6c>
    8082:	c2 fe       	sbrs	r12, 2
    8084:	02 c0       	rjmp	.+4      	; 0x808a <p_ftoa+0x66>
    8086:	8b e2       	ldi	r24, 0x2B	; 43
    8088:	03 c0       	rjmp	.+6      	; 0x8090 <p_ftoa+0x6c>
    808a:	c4 fe       	sbrs	r12, 4
    808c:	02 c0       	rjmp	.+4      	; 0x8092 <p_ftoa+0x6e>
    808e:	80 e2       	ldi	r24, 0x20	; 32
    8090:	50 df       	rcall	.-352    	; 0x7f32 <pch>
    8092:	e7 01       	movw	r28, r14
    8094:	f7 fe       	sbrs	r15, 7
    8096:	02 c0       	rjmp	.+4      	; 0x809c <p_ftoa+0x78>
    8098:	c0 e0       	ldi	r28, 0x00	; 0
    809a:	d0 e0       	ldi	r29, 0x00	; 0
    809c:	20 e0       	ldi	r18, 0x00	; 0
    809e:	30 e0       	ldi	r19, 0x00	; 0
    80a0:	a9 01       	movw	r20, r18
    80a2:	c5 01       	movw	r24, r10
    80a4:	b4 01       	movw	r22, r8
    80a6:	0e 94 c2 e8 	call	0x1d184	; 0x1d184 <__cmpsf2>
    80aa:	88 23       	and	r24, r24
    80ac:	d1 f1       	breq	.+116    	; 0x8122 <p_ftoa+0xfe>
    80ae:	c1 fe       	sbrs	r12, 1
    80b0:	11 c0       	rjmp	.+34     	; 0x80d4 <p_ftoa+0xb0>
    80b2:	8e 01       	movw	r16, r28
    80b4:	60 e0       	ldi	r22, 0x00	; 0
    80b6:	70 e0       	ldi	r23, 0x00	; 0
    80b8:	80 e0       	ldi	r24, 0x00	; 0
    80ba:	9f e3       	ldi	r25, 0x3F	; 63
    80bc:	01 15       	cp	r16, r1
    80be:	11 05       	cpc	r17, r1
    80c0:	69 f0       	breq	.+26     	; 0x80dc <p_ftoa+0xb8>
    80c2:	20 e0       	ldi	r18, 0x00	; 0
    80c4:	30 e0       	ldi	r19, 0x00	; 0
    80c6:	40 e2       	ldi	r20, 0x20	; 32
    80c8:	51 e4       	ldi	r21, 0x41	; 65
    80ca:	0e 94 c6 e8 	call	0x1d18c	; 0x1d18c <__divsf3>
    80ce:	01 50       	subi	r16, 0x01	; 1
    80d0:	11 09       	sbc	r17, r1
    80d2:	f4 cf       	rjmp	.-24     	; 0x80bc <p_ftoa+0x98>
    80d4:	60 e0       	ldi	r22, 0x00	; 0
    80d6:	70 e0       	ldi	r23, 0x00	; 0
    80d8:	80 e0       	ldi	r24, 0x00	; 0
    80da:	9f e3       	ldi	r25, 0x3F	; 63
    80dc:	9b 01       	movw	r18, r22
    80de:	ac 01       	movw	r20, r24
    80e0:	c5 01       	movw	r24, r10
    80e2:	b4 01       	movw	r22, r8
    80e4:	0e 94 5e e8 	call	0x1d0bc	; 0x1d0bc <__addsf3>
    80e8:	4b 01       	movw	r8, r22
    80ea:	5c 01       	movw	r10, r24
    80ec:	ee 24       	eor	r14, r14
    80ee:	e3 94       	inc	r14
    80f0:	f1 2c       	mov	r15, r1
    80f2:	20 e0       	ldi	r18, 0x00	; 0
    80f4:	30 e0       	ldi	r19, 0x00	; 0
    80f6:	40 e2       	ldi	r20, 0x20	; 32
    80f8:	51 e4       	ldi	r21, 0x41	; 65
    80fa:	c5 01       	movw	r24, r10
    80fc:	b4 01       	movw	r22, r8
    80fe:	0e 94 11 ea 	call	0x1d422	; 0x1d422 <__gesf2>
    8102:	87 fd       	sbrc	r24, 7
    8104:	11 c0       	rjmp	.+34     	; 0x8128 <p_ftoa+0x104>
    8106:	2f ef       	ldi	r18, 0xFF	; 255
    8108:	e2 1a       	sub	r14, r18
    810a:	f2 0a       	sbc	r15, r18
    810c:	20 e0       	ldi	r18, 0x00	; 0
    810e:	30 e0       	ldi	r19, 0x00	; 0
    8110:	40 e2       	ldi	r20, 0x20	; 32
    8112:	51 e4       	ldi	r21, 0x41	; 65
    8114:	c5 01       	movw	r24, r10
    8116:	b4 01       	movw	r22, r8
    8118:	0e 94 c6 e8 	call	0x1d18c	; 0x1d18c <__divsf3>
    811c:	4b 01       	movw	r8, r22
    811e:	5c 01       	movw	r10, r24
    8120:	e8 cf       	rjmp	.-48     	; 0x80f2 <p_ftoa+0xce>
    8122:	ee 24       	eor	r14, r14
    8124:	e3 94       	inc	r14
    8126:	f1 2c       	mov	r15, r1
    8128:	8c 2d       	mov	r24, r12
    812a:	88 72       	andi	r24, 0x28	; 40
    812c:	80 32       	cpi	r24, 0x20	; 32
    812e:	b9 f4       	brne	.+46     	; 0x815e <p_ftoa+0x13a>
    8130:	83 01       	movw	r16, r6
    8132:	0e 19       	sub	r16, r14
    8134:	1f 09       	sbc	r17, r15
    8136:	80 91 8b 1a 	lds	r24, 0x1A8B	; 0x801a8b <_pch+0x2>
    813a:	90 91 8c 1a 	lds	r25, 0x1A8C	; 0x801a8c <_pch+0x3>
    813e:	08 1b       	sub	r16, r24
    8140:	19 0b       	sbc	r17, r25
    8142:	c1 fe       	sbrs	r12, 1
    8144:	06 c0       	rjmp	.+12     	; 0x8152 <p_ftoa+0x12e>
    8146:	20 97       	sbiw	r28, 0x00	; 0
    8148:	21 f0       	breq	.+8      	; 0x8152 <p_ftoa+0x12e>
    814a:	0c 1b       	sub	r16, r28
    814c:	1d 0b       	sbc	r17, r29
    814e:	01 50       	subi	r16, 0x01	; 1
    8150:	11 09       	sbc	r17, r1
    8152:	10 16       	cp	r1, r16
    8154:	11 06       	cpc	r1, r17
    8156:	1c f4       	brge	.+6      	; 0x815e <p_ftoa+0x13a>
    8158:	80 e3       	ldi	r24, 0x30	; 48
    815a:	eb de       	rcall	.-554    	; 0x7f32 <pch>
    815c:	f8 cf       	rjmp	.-16     	; 0x814e <p_ftoa+0x12a>
    815e:	c5 01       	movw	r24, r10
    8160:	b4 01       	movw	r22, r8
    8162:	0e 94 2e e9 	call	0x1d25c	; 0x1d25c <__fixsfsi>
    8166:	2b 01       	movw	r4, r22
    8168:	3c 01       	movw	r6, r24
    816a:	80 e3       	ldi	r24, 0x30	; 48
    816c:	84 0d       	add	r24, r4
    816e:	e1 de       	rcall	.-574    	; 0x7f32 <pch>
    8170:	b2 01       	movw	r22, r4
    8172:	55 0c       	add	r5, r5
    8174:	88 0b       	sbc	r24, r24
    8176:	99 0b       	sbc	r25, r25
    8178:	0e 94 61 e9 	call	0x1d2c2	; 0x1d2c2 <__floatsisf>
    817c:	9b 01       	movw	r18, r22
    817e:	ac 01       	movw	r20, r24
    8180:	c5 01       	movw	r24, r10
    8182:	b4 01       	movw	r22, r8
    8184:	0e 94 5d e8 	call	0x1d0ba	; 0x1d0ba <__subsf3>
    8188:	21 e0       	ldi	r18, 0x01	; 1
    818a:	e2 1a       	sub	r14, r18
    818c:	f1 08       	sbc	r15, r1
    818e:	20 e0       	ldi	r18, 0x00	; 0
    8190:	30 e0       	ldi	r19, 0x00	; 0
    8192:	40 e2       	ldi	r20, 0x20	; 32
    8194:	51 e4       	ldi	r21, 0x41	; 65
    8196:	0e 94 15 ea 	call	0x1d42a	; 0x1d42a <__mulsf3>
    819a:	4b 01       	movw	r8, r22
    819c:	5c 01       	movw	r10, r24
    819e:	e1 14       	cp	r14, r1
    81a0:	f1 04       	cpc	r15, r1
    81a2:	e9 f6       	brne	.-70     	; 0x815e <p_ftoa+0x13a>
    81a4:	c1 fc       	sbrc	r12, 1
    81a6:	1c c0       	rjmp	.+56     	; 0x81e0 <p_ftoa+0x1bc>
    81a8:	80 e0       	ldi	r24, 0x00	; 0
    81aa:	c3 de       	rcall	.-634    	; 0x7f32 <pch>
    81ac:	f1 01       	movw	r30, r2
    81ae:	01 90       	ld	r0, Z+
    81b0:	00 20       	and	r0, r0
    81b2:	e9 f7       	brne	.-6      	; 0x81ae <p_ftoa+0x18a>
    81b4:	31 97       	sbiw	r30, 0x01	; 1
    81b6:	cf 01       	movw	r24, r30
    81b8:	82 19       	sub	r24, r2
    81ba:	93 09       	sbc	r25, r3
    81bc:	df 91       	pop	r29
    81be:	cf 91       	pop	r28
    81c0:	1f 91       	pop	r17
    81c2:	0f 91       	pop	r16
    81c4:	ff 90       	pop	r15
    81c6:	ef 90       	pop	r14
    81c8:	cf 90       	pop	r12
    81ca:	bf 90       	pop	r11
    81cc:	af 90       	pop	r10
    81ce:	9f 90       	pop	r9
    81d0:	8f 90       	pop	r8
    81d2:	7f 90       	pop	r7
    81d4:	6f 90       	pop	r6
    81d6:	5f 90       	pop	r5
    81d8:	4f 90       	pop	r4
    81da:	3f 90       	pop	r3
    81dc:	2f 90       	pop	r2
    81de:	08 95       	ret
    81e0:	20 97       	sbiw	r28, 0x00	; 0
    81e2:	11 f3       	breq	.-60     	; 0x81a8 <p_ftoa+0x184>
    81e4:	8e e2       	ldi	r24, 0x2E	; 46
    81e6:	a5 de       	rcall	.-694    	; 0x7f32 <pch>
    81e8:	c5 01       	movw	r24, r10
    81ea:	b4 01       	movw	r22, r8
    81ec:	0e 94 2e e9 	call	0x1d25c	; 0x1d25c <__fixsfsi>
    81f0:	2b 01       	movw	r4, r22
    81f2:	3c 01       	movw	r6, r24
    81f4:	07 2e       	mov	r0, r23
    81f6:	00 0c       	add	r0, r0
    81f8:	88 0b       	sbc	r24, r24
    81fa:	99 0b       	sbc	r25, r25
    81fc:	0e 94 61 e9 	call	0x1d2c2	; 0x1d2c2 <__floatsisf>
    8200:	9b 01       	movw	r18, r22
    8202:	ac 01       	movw	r20, r24
    8204:	c5 01       	movw	r24, r10
    8206:	b4 01       	movw	r22, r8
    8208:	0e 94 5d e8 	call	0x1d0ba	; 0x1d0ba <__subsf3>
    820c:	4b 01       	movw	r8, r22
    820e:	5c 01       	movw	r10, r24
    8210:	80 e3       	ldi	r24, 0x30	; 48
    8212:	84 0d       	add	r24, r4
    8214:	8e de       	rcall	.-740    	; 0x7f32 <pch>
    8216:	21 97       	sbiw	r28, 0x01	; 1
    8218:	20 e0       	ldi	r18, 0x00	; 0
    821a:	30 e0       	ldi	r19, 0x00	; 0
    821c:	40 e2       	ldi	r20, 0x20	; 32
    821e:	51 e4       	ldi	r21, 0x41	; 65
    8220:	c5 01       	movw	r24, r10
    8222:	b4 01       	movw	r22, r8
    8224:	0e 94 15 ea 	call	0x1d42a	; 0x1d42a <__mulsf3>
    8228:	4b 01       	movw	r8, r22
    822a:	5c 01       	movw	r10, r24
    822c:	20 97       	sbiw	r28, 0x00	; 0
    822e:	e1 f6       	brne	.-72     	; 0x81e8 <p_ftoa+0x1c4>
    8230:	bb cf       	rjmp	.-138    	; 0x81a8 <p_ftoa+0x184>

00008232 <p_etoa>:
    8232:	ad e0       	ldi	r26, 0x0D	; 13
    8234:	b0 e0       	ldi	r27, 0x00	; 0
    8236:	ef e1       	ldi	r30, 0x1F	; 31
    8238:	f1 e4       	ldi	r31, 0x41	; 65
    823a:	0c 94 13 e8 	jmp	0x1d026	; 0x1d026 <__prologue_saves__>
    823e:	4b 01       	movw	r8, r22
    8240:	5c 01       	movw	r10, r24
    8242:	5b 87       	std	Y+11, r21	; 0x0b
    8244:	4a 87       	std	Y+10, r20	; 0x0a
    8246:	1d 87       	std	Y+13, r17	; 0x0d
    8248:	0c 87       	std	Y+12, r16	; 0x0c
    824a:	3c 2c       	mov	r3, r12
    824c:	c6 fa       	bst	r12, 6
    824e:	11 27       	eor	r17, r17
    8250:	10 f9       	bld	r17, 0
    8252:	b9 01       	movw	r22, r18
    8254:	ca 01       	movw	r24, r20
    8256:	60 de       	rcall	.-832    	; 0x7f18 <pch_init>
    8258:	20 e0       	ldi	r18, 0x00	; 0
    825a:	30 e0       	ldi	r19, 0x00	; 0
    825c:	a9 01       	movw	r20, r18
    825e:	c5 01       	movw	r24, r10
    8260:	b4 01       	movw	r22, r8
    8262:	0e 94 c2 e8 	call	0x1d184	; 0x1d184 <__cmpsf2>
    8266:	87 ff       	sbrs	r24, 7
    8268:	05 c0       	rjmp	.+10     	; 0x8274 <p_etoa+0x42>
    826a:	b7 fa       	bst	r11, 7
    826c:	b0 94       	com	r11
    826e:	b7 f8       	bld	r11, 7
    8270:	b0 94       	com	r11
    8272:	11 e0       	ldi	r17, 0x01	; 1
    8274:	10 fb       	bst	r17, 0
    8276:	36 f8       	bld	r3, 6
    8278:	36 fe       	sbrs	r3, 6
    827a:	02 c0       	rjmp	.+4      	; 0x8280 <p_etoa+0x4e>
    827c:	8d e2       	ldi	r24, 0x2D	; 45
    827e:	07 c0       	rjmp	.+14     	; 0x828e <p_etoa+0x5c>
    8280:	32 fe       	sbrs	r3, 2
    8282:	02 c0       	rjmp	.+4      	; 0x8288 <p_etoa+0x56>
    8284:	8b e2       	ldi	r24, 0x2B	; 43
    8286:	03 c0       	rjmp	.+6      	; 0x828e <p_etoa+0x5c>
    8288:	34 fe       	sbrs	r3, 4
    828a:	02 c0       	rjmp	.+4      	; 0x8290 <p_etoa+0x5e>
    828c:	80 e2       	ldi	r24, 0x20	; 32
    828e:	51 de       	rcall	.-862    	; 0x7f32 <pch>
    8290:	37 01       	movw	r6, r14
    8292:	f7 fe       	sbrs	r15, 7
    8294:	02 c0       	rjmp	.+4      	; 0x829a <p_etoa+0x68>
    8296:	61 2c       	mov	r6, r1
    8298:	71 2c       	mov	r7, r1
    829a:	19 86       	std	Y+9, r1	; 0x09
    829c:	18 86       	std	Y+8, r1	; 0x08
    829e:	20 e0       	ldi	r18, 0x00	; 0
    82a0:	30 e0       	ldi	r19, 0x00	; 0
    82a2:	a9 01       	movw	r20, r18
    82a4:	c5 01       	movw	r24, r10
    82a6:	b4 01       	movw	r22, r8
    82a8:	0e 94 c2 e8 	call	0x1d184	; 0x1d184 <__cmpsf2>
    82ac:	23 2d       	mov	r18, r3
    82ae:	22 70       	andi	r18, 0x02	; 2
    82b0:	22 2e       	mov	r2, r18
    82b2:	88 23       	and	r24, r24
    82b4:	09 f4       	brne	.+2      	; 0x82b8 <p_etoa+0x86>
    82b6:	70 c0       	rjmp	.+224    	; 0x8398 <p_etoa+0x166>
    82b8:	22 23       	and	r18, r18
    82ba:	b1 f0       	breq	.+44     	; 0x82e8 <p_etoa+0xb6>
    82bc:	83 01       	movw	r16, r6
    82be:	c1 2c       	mov	r12, r1
    82c0:	d1 2c       	mov	r13, r1
    82c2:	e1 2c       	mov	r14, r1
    82c4:	2f e3       	ldi	r18, 0x3F	; 63
    82c6:	f2 2e       	mov	r15, r18
    82c8:	01 15       	cp	r16, r1
    82ca:	11 05       	cpc	r17, r1
    82cc:	91 f0       	breq	.+36     	; 0x82f2 <p_etoa+0xc0>
    82ce:	20 e0       	ldi	r18, 0x00	; 0
    82d0:	30 e0       	ldi	r19, 0x00	; 0
    82d2:	40 e2       	ldi	r20, 0x20	; 32
    82d4:	51 e4       	ldi	r21, 0x41	; 65
    82d6:	c7 01       	movw	r24, r14
    82d8:	b6 01       	movw	r22, r12
    82da:	0e 94 c6 e8 	call	0x1d18c	; 0x1d18c <__divsf3>
    82de:	6b 01       	movw	r12, r22
    82e0:	7c 01       	movw	r14, r24
    82e2:	01 50       	subi	r16, 0x01	; 1
    82e4:	11 09       	sbc	r17, r1
    82e6:	f0 cf       	rjmp	.-32     	; 0x82c8 <p_etoa+0x96>
    82e8:	c1 2c       	mov	r12, r1
    82ea:	d1 2c       	mov	r13, r1
    82ec:	e1 2c       	mov	r14, r1
    82ee:	9f e3       	ldi	r25, 0x3F	; 63
    82f0:	f9 2e       	mov	r15, r25
    82f2:	41 2c       	mov	r4, r1
    82f4:	51 2c       	mov	r5, r1
    82f6:	82 01       	movw	r16, r4
    82f8:	01 50       	subi	r16, 0x01	; 1
    82fa:	11 09       	sbc	r17, r1
    82fc:	20 e0       	ldi	r18, 0x00	; 0
    82fe:	30 e0       	ldi	r19, 0x00	; 0
    8300:	40 e8       	ldi	r20, 0x80	; 128
    8302:	5f e3       	ldi	r21, 0x3F	; 63
    8304:	c5 01       	movw	r24, r10
    8306:	b4 01       	movw	r22, r8
    8308:	0e 94 c2 e8 	call	0x1d184	; 0x1d184 <__cmpsf2>
    830c:	87 ff       	sbrs	r24, 7
    830e:	0c c0       	rjmp	.+24     	; 0x8328 <p_etoa+0xf6>
    8310:	20 e0       	ldi	r18, 0x00	; 0
    8312:	30 e0       	ldi	r19, 0x00	; 0
    8314:	40 e2       	ldi	r20, 0x20	; 32
    8316:	51 e4       	ldi	r21, 0x41	; 65
    8318:	c5 01       	movw	r24, r10
    831a:	b4 01       	movw	r22, r8
    831c:	0e 94 15 ea 	call	0x1d42a	; 0x1d42a <__mulsf3>
    8320:	4b 01       	movw	r8, r22
    8322:	5c 01       	movw	r10, r24
    8324:	28 01       	movw	r4, r16
    8326:	e7 cf       	rjmp	.-50     	; 0x82f6 <p_etoa+0xc4>
    8328:	82 01       	movw	r16, r4
    832a:	0f 5f       	subi	r16, 0xFF	; 255
    832c:	1f 4f       	sbci	r17, 0xFF	; 255
    832e:	20 e0       	ldi	r18, 0x00	; 0
    8330:	30 e0       	ldi	r19, 0x00	; 0
    8332:	40 e2       	ldi	r20, 0x20	; 32
    8334:	51 e4       	ldi	r21, 0x41	; 65
    8336:	c5 01       	movw	r24, r10
    8338:	b4 01       	movw	r22, r8
    833a:	0e 94 11 ea 	call	0x1d422	; 0x1d422 <__gesf2>
    833e:	87 fd       	sbrc	r24, 7
    8340:	0c c0       	rjmp	.+24     	; 0x835a <p_etoa+0x128>
    8342:	20 e0       	ldi	r18, 0x00	; 0
    8344:	30 e0       	ldi	r19, 0x00	; 0
    8346:	40 e2       	ldi	r20, 0x20	; 32
    8348:	51 e4       	ldi	r21, 0x41	; 65
    834a:	c5 01       	movw	r24, r10
    834c:	b4 01       	movw	r22, r8
    834e:	0e 94 c6 e8 	call	0x1d18c	; 0x1d18c <__divsf3>
    8352:	4b 01       	movw	r8, r22
    8354:	5c 01       	movw	r10, r24
    8356:	28 01       	movw	r4, r16
    8358:	e7 cf       	rjmp	.-50     	; 0x8328 <p_etoa+0xf6>
    835a:	a7 01       	movw	r20, r14
    835c:	96 01       	movw	r18, r12
    835e:	c5 01       	movw	r24, r10
    8360:	b4 01       	movw	r22, r8
    8362:	0e 94 5e e8 	call	0x1d0bc	; 0x1d0bc <__addsf3>
    8366:	4b 01       	movw	r8, r22
    8368:	5c 01       	movw	r10, r24
    836a:	82 01       	movw	r16, r4
    836c:	3f ef       	ldi	r19, 0xFF	; 255
    836e:	43 1a       	sub	r4, r19
    8370:	53 0a       	sbc	r5, r19
    8372:	20 e0       	ldi	r18, 0x00	; 0
    8374:	30 e0       	ldi	r19, 0x00	; 0
    8376:	40 e2       	ldi	r20, 0x20	; 32
    8378:	51 e4       	ldi	r21, 0x41	; 65
    837a:	0e 94 11 ea 	call	0x1d422	; 0x1d422 <__gesf2>
    837e:	87 fd       	sbrc	r24, 7
    8380:	09 c0       	rjmp	.+18     	; 0x8394 <p_etoa+0x162>
    8382:	20 e0       	ldi	r18, 0x00	; 0
    8384:	30 e0       	ldi	r19, 0x00	; 0
    8386:	40 e2       	ldi	r20, 0x20	; 32
    8388:	51 e4       	ldi	r21, 0x41	; 65
    838a:	c5 01       	movw	r24, r10
    838c:	b4 01       	movw	r22, r8
    838e:	0e 94 c6 e8 	call	0x1d18c	; 0x1d18c <__divsf3>
    8392:	e9 cf       	rjmp	.-46     	; 0x8366 <p_etoa+0x134>
    8394:	08 87       	std	Y+8, r16	; 0x08
    8396:	19 87       	std	Y+9, r17	; 0x09
    8398:	85 e6       	ldi	r24, 0x65	; 101
    839a:	89 83       	std	Y+1, r24	; 0x01
    839c:	88 85       	ldd	r24, Y+8	; 0x08
    839e:	99 85       	ldd	r25, Y+9	; 0x09
    83a0:	97 ff       	sbrs	r25, 7
    83a2:	08 c0       	rjmp	.+16     	; 0x83b4 <p_etoa+0x182>
    83a4:	91 95       	neg	r25
    83a6:	81 95       	neg	r24
    83a8:	91 09       	sbc	r25, r1
    83aa:	99 87       	std	Y+9, r25	; 0x09
    83ac:	88 87       	std	Y+8, r24	; 0x08
    83ae:	8d e2       	ldi	r24, 0x2D	; 45
    83b0:	90 e0       	ldi	r25, 0x00	; 0
    83b2:	02 c0       	rjmp	.+4      	; 0x83b8 <p_etoa+0x186>
    83b4:	8b e2       	ldi	r24, 0x2B	; 43
    83b6:	90 e0       	ldi	r25, 0x00	; 0
    83b8:	6c 01       	movw	r12, r24
    83ba:	82 e0       	ldi	r24, 0x02	; 2
    83bc:	e8 2e       	mov	r14, r24
    83be:	f1 2c       	mov	r15, r1
    83c0:	8e 01       	movw	r16, r28
    83c2:	08 5f       	subi	r16, 0xF8	; 248
    83c4:	1f 4f       	sbci	r17, 0xFF	; 255
    83c6:	2a e0       	ldi	r18, 0x0A	; 10
    83c8:	30 e0       	ldi	r19, 0x00	; 0
    83ca:	42 e0       	ldi	r20, 0x02	; 2
    83cc:	50 e0       	ldi	r21, 0x00	; 0
    83ce:	65 e0       	ldi	r22, 0x05	; 5
    83d0:	70 e0       	ldi	r23, 0x00	; 0
    83d2:	ce 01       	movw	r24, r28
    83d4:	02 96       	adiw	r24, 0x02	; 2
    83d6:	17 dd       	rcall	.-1490   	; 0x7e06 <bin2num>
    83d8:	9c 01       	movw	r18, r24
    83da:	93 2d       	mov	r25, r3
    83dc:	98 72       	andi	r25, 0x28	; 40
    83de:	90 32       	cpi	r25, 0x20	; 32
    83e0:	61 f0       	breq	.+24     	; 0x83fa <p_etoa+0x1c8>
    83e2:	c5 01       	movw	r24, r10
    83e4:	b4 01       	movw	r22, r8
    83e6:	0e 94 2e e9 	call	0x1d25c	; 0x1d25c <__fixsfsi>
    83ea:	6b 01       	movw	r12, r22
    83ec:	7c 01       	movw	r14, r24
    83ee:	80 e3       	ldi	r24, 0x30	; 48
    83f0:	8c 0d       	add	r24, r12
    83f2:	9f dd       	rcall	.-1218   	; 0x7f32 <pch>
    83f4:	21 10       	cpse	r2, r1
    83f6:	20 c0       	rjmp	.+64     	; 0x8438 <p_etoa+0x206>
    83f8:	5e c0       	rjmp	.+188    	; 0x84b6 <p_etoa+0x284>
    83fa:	80 91 8b 1a 	lds	r24, 0x1A8B	; 0x801a8b <_pch+0x2>
    83fe:	90 91 8c 1a 	lds	r25, 0x1A8C	; 0x801a8c <_pch+0x3>
    8402:	0c 85       	ldd	r16, Y+12	; 0x0c
    8404:	1d 85       	ldd	r17, Y+13	; 0x0d
    8406:	08 1b       	sub	r16, r24
    8408:	19 0b       	sbc	r17, r25
    840a:	22 20       	and	r2, r2
    840c:	41 f0       	breq	.+16     	; 0x841e <p_etoa+0x1ec>
    840e:	61 14       	cp	r6, r1
    8410:	71 04       	cpc	r7, r1
    8412:	29 f0       	breq	.+10     	; 0x841e <p_etoa+0x1ec>
    8414:	06 19       	sub	r16, r6
    8416:	17 09       	sbc	r17, r7
    8418:	06 50       	subi	r16, 0x06	; 6
    841a:	11 09       	sbc	r17, r1
    841c:	02 c0       	rjmp	.+4      	; 0x8422 <p_etoa+0x1f0>
    841e:	05 50       	subi	r16, 0x05	; 5
    8420:	11 09       	sbc	r17, r1
    8422:	24 30       	cpi	r18, 0x04	; 4
    8424:	31 05       	cpc	r19, r1
    8426:	14 f0       	brlt	.+4      	; 0x842c <p_etoa+0x1fa>
    8428:	01 50       	subi	r16, 0x01	; 1
    842a:	11 09       	sbc	r17, r1
    842c:	10 16       	cp	r1, r16
    842e:	11 06       	cpc	r1, r17
    8430:	c4 f6       	brge	.-80     	; 0x83e2 <p_etoa+0x1b0>
    8432:	80 e3       	ldi	r24, 0x30	; 48
    8434:	7e dd       	rcall	.-1284   	; 0x7f32 <pch>
    8436:	f8 cf       	rjmp	.-16     	; 0x8428 <p_etoa+0x1f6>
    8438:	61 14       	cp	r6, r1
    843a:	71 04       	cpc	r7, r1
    843c:	09 f4       	brne	.+2      	; 0x8440 <p_etoa+0x20e>
    843e:	3b c0       	rjmp	.+118    	; 0x84b6 <p_etoa+0x284>
    8440:	b6 01       	movw	r22, r12
    8442:	dd 0c       	add	r13, r13
    8444:	88 0b       	sbc	r24, r24
    8446:	99 0b       	sbc	r25, r25
    8448:	0e 94 61 e9 	call	0x1d2c2	; 0x1d2c2 <__floatsisf>
    844c:	9b 01       	movw	r18, r22
    844e:	ac 01       	movw	r20, r24
    8450:	c5 01       	movw	r24, r10
    8452:	b4 01       	movw	r22, r8
    8454:	0e 94 5d e8 	call	0x1d0ba	; 0x1d0ba <__subsf3>
    8458:	20 e0       	ldi	r18, 0x00	; 0
    845a:	30 e0       	ldi	r19, 0x00	; 0
    845c:	40 e2       	ldi	r20, 0x20	; 32
    845e:	51 e4       	ldi	r21, 0x41	; 65
    8460:	0e 94 15 ea 	call	0x1d42a	; 0x1d42a <__mulsf3>
    8464:	6b 01       	movw	r12, r22
    8466:	7c 01       	movw	r14, r24
    8468:	8e e2       	ldi	r24, 0x2E	; 46
    846a:	63 dd       	rcall	.-1338   	; 0x7f32 <pch>
    846c:	c7 01       	movw	r24, r14
    846e:	b6 01       	movw	r22, r12
    8470:	0e 94 2e e9 	call	0x1d25c	; 0x1d25c <__fixsfsi>
    8474:	4b 01       	movw	r8, r22
    8476:	5c 01       	movw	r10, r24
    8478:	07 2e       	mov	r0, r23
    847a:	00 0c       	add	r0, r0
    847c:	88 0b       	sbc	r24, r24
    847e:	99 0b       	sbc	r25, r25
    8480:	0e 94 61 e9 	call	0x1d2c2	; 0x1d2c2 <__floatsisf>
    8484:	9b 01       	movw	r18, r22
    8486:	ac 01       	movw	r20, r24
    8488:	c7 01       	movw	r24, r14
    848a:	b6 01       	movw	r22, r12
    848c:	0e 94 5d e8 	call	0x1d0ba	; 0x1d0ba <__subsf3>
    8490:	6b 01       	movw	r12, r22
    8492:	7c 01       	movw	r14, r24
    8494:	80 e3       	ldi	r24, 0x30	; 48
    8496:	88 0d       	add	r24, r8
    8498:	4c dd       	rcall	.-1384   	; 0x7f32 <pch>
    849a:	20 e0       	ldi	r18, 0x00	; 0
    849c:	30 e0       	ldi	r19, 0x00	; 0
    849e:	40 e2       	ldi	r20, 0x20	; 32
    84a0:	51 e4       	ldi	r21, 0x41	; 65
    84a2:	c7 01       	movw	r24, r14
    84a4:	b6 01       	movw	r22, r12
    84a6:	0e 94 15 ea 	call	0x1d42a	; 0x1d42a <__mulsf3>
    84aa:	6b 01       	movw	r12, r22
    84ac:	7c 01       	movw	r14, r24
    84ae:	81 e0       	ldi	r24, 0x01	; 1
    84b0:	68 1a       	sub	r6, r24
    84b2:	71 08       	sbc	r7, r1
    84b4:	d9 f6       	brne	.-74     	; 0x846c <p_etoa+0x23a>
    84b6:	8e 01       	movw	r16, r28
    84b8:	0f 5f       	subi	r16, 0xFF	; 255
    84ba:	1f 4f       	sbci	r17, 0xFF	; 255
    84bc:	f8 01       	movw	r30, r16
    84be:	81 91       	ld	r24, Z+
    84c0:	8f 01       	movw	r16, r30
    84c2:	88 23       	and	r24, r24
    84c4:	11 f0       	breq	.+4      	; 0x84ca <p_etoa+0x298>
    84c6:	35 dd       	rcall	.-1430   	; 0x7f32 <pch>
    84c8:	f9 cf       	rjmp	.-14     	; 0x84bc <p_etoa+0x28a>
    84ca:	33 dd       	rcall	.-1434   	; 0x7f32 <pch>
    84cc:	ea 85       	ldd	r30, Y+10	; 0x0a
    84ce:	fb 85       	ldd	r31, Y+11	; 0x0b
    84d0:	01 90       	ld	r0, Z+
    84d2:	00 20       	and	r0, r0
    84d4:	e9 f7       	brne	.-6      	; 0x84d0 <p_etoa+0x29e>
    84d6:	cf 01       	movw	r24, r30
    84d8:	01 97       	sbiw	r24, 0x01	; 1
    84da:	2a 85       	ldd	r18, Y+10	; 0x0a
    84dc:	3b 85       	ldd	r19, Y+11	; 0x0b
    84de:	82 1b       	sub	r24, r18
    84e0:	93 0b       	sbc	r25, r19
    84e2:	2d 96       	adiw	r28, 0x0d	; 13
    84e4:	e2 e1       	ldi	r30, 0x12	; 18
    84e6:	0c 94 2f e8 	jmp	0x1d05e	; 0x1d05e <__epilogue_restores__>

000084ea <_puts_pad>:
    84ea:	a0 e0       	ldi	r26, 0x00	; 0
    84ec:	b0 e0       	ldi	r27, 0x00	; 0
    84ee:	eb e7       	ldi	r30, 0x7B	; 123
    84f0:	f2 e4       	ldi	r31, 0x42	; 66
    84f2:	0c 94 19 e8 	jmp	0x1d032	; 0x1d032 <__prologue_saves__+0xc>
    84f6:	6c 01       	movw	r12, r24
    84f8:	4b 01       	movw	r8, r22
    84fa:	79 01       	movw	r14, r18
    84fc:	24 17       	cp	r18, r20
    84fe:	35 07       	cpc	r19, r21
    8500:	24 f4       	brge	.+8      	; 0x850a <_puts_pad+0x20>
    8502:	ea 01       	movw	r28, r20
    8504:	c2 1b       	sub	r28, r18
    8506:	d3 0b       	sbc	r29, r19
    8508:	02 c0       	rjmp	.+4      	; 0x850e <_puts_pad+0x24>
    850a:	c0 e0       	ldi	r28, 0x00	; 0
    850c:	d0 e0       	ldi	r29, 0x00	; 0
    850e:	01 15       	cp	r16, r1
    8510:	11 05       	cpc	r17, r1
    8512:	49 f4       	brne	.+18     	; 0x8526 <_puts_pad+0x3c>
    8514:	21 97       	sbiw	r28, 0x01	; 1
    8516:	38 f0       	brcs	.+14     	; 0x8526 <_puts_pad+0x3c>
    8518:	d6 01       	movw	r26, r12
    851a:	ed 91       	ld	r30, X+
    851c:	fc 91       	ld	r31, X
    851e:	60 e2       	ldi	r22, 0x20	; 32
    8520:	c6 01       	movw	r24, r12
    8522:	09 95       	icall
    8524:	f7 cf       	rjmp	.-18     	; 0x8514 <_puts_pad+0x2a>
    8526:	54 01       	movw	r10, r8
    8528:	f5 01       	movw	r30, r10
    852a:	61 91       	ld	r22, Z+
    852c:	5f 01       	movw	r10, r30
    852e:	66 23       	and	r22, r22
    8530:	61 f0       	breq	.+24     	; 0x854a <_puts_pad+0x60>
    8532:	e1 14       	cp	r14, r1
    8534:	f1 04       	cpc	r15, r1
    8536:	49 f0       	breq	.+18     	; 0x854a <_puts_pad+0x60>
    8538:	d6 01       	movw	r26, r12
    853a:	ed 91       	ld	r30, X+
    853c:	fc 91       	ld	r31, X
    853e:	c6 01       	movw	r24, r12
    8540:	09 95       	icall
    8542:	b1 e0       	ldi	r27, 0x01	; 1
    8544:	eb 1a       	sub	r14, r27
    8546:	f1 08       	sbc	r15, r1
    8548:	ef cf       	rjmp	.-34     	; 0x8528 <_puts_pad+0x3e>
    854a:	01 15       	cp	r16, r1
    854c:	11 05       	cpc	r17, r1
    854e:	51 f0       	breq	.+20     	; 0x8564 <_puts_pad+0x7a>
    8550:	20 97       	sbiw	r28, 0x00	; 0
    8552:	41 f0       	breq	.+16     	; 0x8564 <_puts_pad+0x7a>
    8554:	d6 01       	movw	r26, r12
    8556:	ed 91       	ld	r30, X+
    8558:	fc 91       	ld	r31, X
    855a:	60 e2       	ldi	r22, 0x20	; 32
    855c:	c6 01       	movw	r24, r12
    855e:	09 95       	icall
    8560:	21 97       	sbiw	r28, 0x01	; 1
    8562:	f6 cf       	rjmp	.-20     	; 0x8550 <_puts_pad+0x66>
    8564:	cd b7       	in	r28, 0x3d	; 61
    8566:	de b7       	in	r29, 0x3e	; 62
    8568:	ec e0       	ldi	r30, 0x0C	; 12
    856a:	0c 94 35 e8 	jmp	0x1d06a	; 0x1d06a <__epilogue_restores__+0xc>

0000856e <_printf_fn>:
    856e:	ab e6       	ldi	r26, 0x6B	; 107
    8570:	b0 e0       	ldi	r27, 0x00	; 0
    8572:	ed eb       	ldi	r30, 0xBD	; 189
    8574:	f2 e4       	ldi	r31, 0x42	; 66
    8576:	0c 94 13 e8 	jmp	0x1d026	; 0x1d026 <__prologue_saves__>
    857a:	a5 96       	adiw	r28, 0x25	; 37
    857c:	9f af       	std	Y+63, r25	; 0x3f
    857e:	8e af       	std	Y+62, r24	; 0x3e
    8580:	a5 97       	sbiw	r28, 0x25	; 37
    8582:	6a 01       	movw	r12, r20
    8584:	e6 2e       	mov	r14, r22
    8586:	19 01       	movw	r2, r18
    8588:	a9 96       	adiw	r28, 0x29	; 41
    858a:	1c ae       	std	Y+60, r1	; 0x3c
    858c:	1d ae       	std	Y+61, r1	; 0x3d
    858e:	1e ae       	std	Y+62, r1	; 0x3e
    8590:	1f ae       	std	Y+63, r1	; 0x3f
    8592:	a9 97       	sbiw	r28, 0x29	; 41
    8594:	9e 01       	movw	r18, r28
    8596:	2f 5a       	subi	r18, 0xAF	; 175
    8598:	3f 4f       	sbci	r19, 0xFF	; 255
    859a:	67 96       	adiw	r28, 0x17	; 23
    859c:	3f af       	std	Y+63, r19	; 0x3f
    859e:	2e af       	std	Y+62, r18	; 0x3e
    85a0:	67 97       	sbiw	r28, 0x17	; 23
    85a2:	ae 01       	movw	r20, r28
    85a4:	4d 5b       	subi	r20, 0xBD	; 189
    85a6:	5f 4f       	sbci	r21, 0xFF	; 255
    85a8:	69 96       	adiw	r28, 0x19	; 25
    85aa:	5f af       	std	Y+63, r21	; 0x3f
    85ac:	4e af       	std	Y+62, r20	; 0x3e
    85ae:	69 97       	sbiw	r28, 0x19	; 25
    85b0:	ce 01       	movw	r24, r28
    85b2:	85 5b       	subi	r24, 0xB5	; 181
    85b4:	9f 4f       	sbci	r25, 0xFF	; 255
    85b6:	6b 96       	adiw	r28, 0x1b	; 27
    85b8:	9f af       	std	Y+63, r25	; 0x3f
    85ba:	8e af       	std	Y+62, r24	; 0x3e
    85bc:	6b 97       	sbiw	r28, 0x1b	; 27
    85be:	de 01       	movw	r26, r28
    85c0:	ad 5a       	subi	r26, 0xAD	; 173
    85c2:	bf 4f       	sbci	r27, 0xFF	; 255
    85c4:	6d 96       	adiw	r28, 0x1d	; 29
    85c6:	bf af       	std	Y+63, r27	; 0x3f
    85c8:	ae af       	std	Y+62, r26	; 0x3e
    85ca:	6d 97       	sbiw	r28, 0x1d	; 29
    85cc:	f6 01       	movw	r30, r12
    85ce:	5e 2d       	mov	r21, r14
    85d0:	0e 94 4a e8 	call	0x1d094	; 0x1d094 <__xload_1>
    85d4:	66 23       	and	r22, r22
    85d6:	09 f4       	brne	.+2      	; 0x85da <_printf_fn+0x6c>
    85d8:	df c3       	rjmp	.+1982   	; 0x8d98 <_printf_fn+0x82a>
    85da:	ae 2d       	mov	r26, r14
    85dc:	c6 01       	movw	r24, r12
    85de:	01 96       	adiw	r24, 0x01	; 1
    85e0:	a1 1d       	adc	r26, r1
    85e2:	3c 01       	movw	r6, r24
    85e4:	8a 2e       	mov	r8, r26
    85e6:	65 32       	cpi	r22, 0x25	; 37
    85e8:	51 f0       	breq	.+20     	; 0x85fe <_printf_fn+0x90>
    85ea:	a5 96       	adiw	r28, 0x25	; 37
    85ec:	ae ad       	ldd	r26, Y+62	; 0x3e
    85ee:	bf ad       	ldd	r27, Y+63	; 0x3f
    85f0:	a5 97       	sbiw	r28, 0x25	; 37
    85f2:	ed 91       	ld	r30, X+
    85f4:	fc 91       	ld	r31, X
    85f6:	11 97       	sbiw	r26, 0x01	; 1
    85f8:	cd 01       	movw	r24, r26
    85fa:	09 95       	icall
    85fc:	99 c3       	rjmp	.+1842   	; 0x8d30 <_printf_fn+0x7c2>
    85fe:	91 2c       	mov	r9, r1
    8600:	f3 01       	movw	r30, r6
    8602:	58 2d       	mov	r21, r8
    8604:	0e 94 4a e8 	call	0x1d094	; 0x1d094 <__xload_1>
    8608:	63 32       	cpi	r22, 0x23	; 35
    860a:	19 f4       	brne	.+6      	; 0x8612 <_printf_fn+0xa4>
    860c:	68 94       	set
    860e:	97 f8       	bld	r9, 7
    8610:	04 c0       	rjmp	.+8      	; 0x861a <_printf_fn+0xac>
    8612:	6b 32       	cpi	r22, 0x2B	; 43
    8614:	39 f4       	brne	.+14     	; 0x8624 <_printf_fn+0xb6>
    8616:	68 94       	set
    8618:	92 f8       	bld	r9, 2
    861a:	bf ef       	ldi	r27, 0xFF	; 255
    861c:	6b 1a       	sub	r6, r27
    861e:	7b 0a       	sbc	r7, r27
    8620:	8b 0a       	sbc	r8, r27
    8622:	ee cf       	rjmp	.-36     	; 0x8600 <_printf_fn+0x92>
    8624:	6d 32       	cpi	r22, 0x2D	; 45
    8626:	a9 f4       	brne	.+42     	; 0x8652 <_printf_fn+0xe4>
    8628:	93 fc       	sbrc	r9, 3
    862a:	05 c0       	rjmp	.+10     	; 0x8636 <_printf_fn+0xc8>
    862c:	6d 32       	cpi	r22, 0x2D	; 45
    862e:	19 f4       	brne	.+6      	; 0x8636 <_printf_fn+0xc8>
    8630:	68 94       	set
    8632:	93 f8       	bld	r9, 3
    8634:	f2 cf       	rjmp	.-28     	; 0x861a <_printf_fn+0xac>
    8636:	94 fc       	sbrc	r9, 4
    8638:	05 c0       	rjmp	.+10     	; 0x8644 <_printf_fn+0xd6>
    863a:	60 32       	cpi	r22, 0x20	; 32
    863c:	19 f4       	brne	.+6      	; 0x8644 <_printf_fn+0xd6>
    863e:	68 94       	set
    8640:	94 f8       	bld	r9, 4
    8642:	eb cf       	rjmp	.-42     	; 0x861a <_printf_fn+0xac>
    8644:	95 fc       	sbrc	r9, 5
    8646:	e9 cf       	rjmp	.-46     	; 0x861a <_printf_fn+0xac>
    8648:	60 33       	cpi	r22, 0x30	; 48
    864a:	39 f7       	brne	.-50     	; 0x861a <_printf_fn+0xac>
    864c:	68 94       	set
    864e:	95 f8       	bld	r9, 5
    8650:	e4 cf       	rjmp	.-56     	; 0x861a <_printf_fn+0xac>
    8652:	86 2f       	mov	r24, r22
    8654:	8f 7e       	andi	r24, 0xEF	; 239
    8656:	80 32       	cpi	r24, 0x20	; 32
    8658:	39 f3       	breq	.-50     	; 0x8628 <_printf_fn+0xba>
    865a:	70 e0       	ldi	r23, 0x00	; 0
    865c:	60 53       	subi	r22, 0x30	; 48
    865e:	71 09       	sbc	r23, r1
    8660:	41 2c       	mov	r4, r1
    8662:	51 2c       	mov	r5, r1
    8664:	6a 30       	cpi	r22, 0x0A	; 10
    8666:	71 05       	cpc	r23, r1
    8668:	e0 f4       	brcc	.+56     	; 0x86a2 <_printf_fn+0x134>
    866a:	2a e0       	ldi	r18, 0x0A	; 10
    866c:	f3 01       	movw	r30, r6
    866e:	58 2d       	mov	r21, r8
    8670:	0e 94 4a e8 	call	0x1d094	; 0x1d094 <__xload_1>
    8674:	70 e0       	ldi	r23, 0x00	; 0
    8676:	cb 01       	movw	r24, r22
    8678:	c0 97       	sbiw	r24, 0x30	; 48
    867a:	0a 97       	sbiw	r24, 0x0a	; 10
    867c:	80 f4       	brcc	.+32     	; 0x869e <_printf_fn+0x130>
    867e:	ef ef       	ldi	r30, 0xFF	; 255
    8680:	6e 1a       	sub	r6, r30
    8682:	7e 0a       	sbc	r7, r30
    8684:	8e 0a       	sbc	r8, r30
    8686:	24 9d       	mul	r18, r4
    8688:	c0 01       	movw	r24, r0
    868a:	25 9d       	mul	r18, r5
    868c:	90 0d       	add	r25, r0
    868e:	11 24       	eor	r1, r1
    8690:	68 0f       	add	r22, r24
    8692:	79 1f       	adc	r23, r25
    8694:	2b 01       	movw	r4, r22
    8696:	f0 e3       	ldi	r31, 0x30	; 48
    8698:	4f 1a       	sub	r4, r31
    869a:	51 08       	sbc	r5, r1
    869c:	e7 cf       	rjmp	.-50     	; 0x866c <_printf_fn+0xfe>
    869e:	68 94       	set
    86a0:	90 f8       	bld	r9, 0
    86a2:	f3 01       	movw	r30, r6
    86a4:	58 2d       	mov	r21, r8
    86a6:	0e 94 4a e8 	call	0x1d094	; 0x1d094 <__xload_1>
    86aa:	6e 32       	cpi	r22, 0x2E	; 46
    86ac:	59 f5       	brne	.+86     	; 0x8704 <_printf_fn+0x196>
    86ae:	2f ef       	ldi	r18, 0xFF	; 255
    86b0:	62 1a       	sub	r6, r18
    86b2:	72 0a       	sbc	r7, r18
    86b4:	82 0a       	sbc	r8, r18
    86b6:	a1 96       	adiw	r28, 0x21	; 33
    86b8:	1f ae       	std	Y+63, r1	; 0x3f
    86ba:	1e ae       	std	Y+62, r1	; 0x3e
    86bc:	a1 97       	sbiw	r28, 0x21	; 33
    86be:	2a e0       	ldi	r18, 0x0A	; 10
    86c0:	f3 01       	movw	r30, r6
    86c2:	58 2d       	mov	r21, r8
    86c4:	0e 94 4a e8 	call	0x1d094	; 0x1d094 <__xload_1>
    86c8:	70 e0       	ldi	r23, 0x00	; 0
    86ca:	cb 01       	movw	r24, r22
    86cc:	c0 97       	sbiw	r24, 0x30	; 48
    86ce:	0a 97       	sbiw	r24, 0x0a	; 10
    86d0:	b0 f4       	brcc	.+44     	; 0x86fe <_printf_fn+0x190>
    86d2:	3f ef       	ldi	r19, 0xFF	; 255
    86d4:	63 1a       	sub	r6, r19
    86d6:	73 0a       	sbc	r7, r19
    86d8:	83 0a       	sbc	r8, r19
    86da:	a1 96       	adiw	r28, 0x21	; 33
    86dc:	4e ad       	ldd	r20, Y+62	; 0x3e
    86de:	5f ad       	ldd	r21, Y+63	; 0x3f
    86e0:	a1 97       	sbiw	r28, 0x21	; 33
    86e2:	24 9f       	mul	r18, r20
    86e4:	c0 01       	movw	r24, r0
    86e6:	25 9f       	mul	r18, r21
    86e8:	90 0d       	add	r25, r0
    86ea:	11 24       	eor	r1, r1
    86ec:	68 0f       	add	r22, r24
    86ee:	79 1f       	adc	r23, r25
    86f0:	cb 01       	movw	r24, r22
    86f2:	c0 97       	sbiw	r24, 0x30	; 48
    86f4:	a1 96       	adiw	r28, 0x21	; 33
    86f6:	9f af       	std	Y+63, r25	; 0x3f
    86f8:	8e af       	std	Y+62, r24	; 0x3e
    86fa:	a1 97       	sbiw	r28, 0x21	; 33
    86fc:	e1 cf       	rjmp	.-62     	; 0x86c0 <_printf_fn+0x152>
    86fe:	68 94       	set
    8700:	91 f8       	bld	r9, 1
    8702:	04 c0       	rjmp	.+8      	; 0x870c <_printf_fn+0x19e>
    8704:	a1 96       	adiw	r28, 0x21	; 33
    8706:	1f ae       	std	Y+63, r1	; 0x3f
    8708:	1e ae       	std	Y+62, r1	; 0x3e
    870a:	a1 97       	sbiw	r28, 0x21	; 33
    870c:	f3 01       	movw	r30, r6
    870e:	58 2d       	mov	r21, r8
    8710:	0e 94 4a e8 	call	0x1d094	; 0x1d094 <__xload_1>
    8714:	69 34       	cpi	r22, 0x49	; 73
    8716:	09 f0       	breq	.+2      	; 0x871a <_printf_fn+0x1ac>
    8718:	45 c0       	rjmp	.+138    	; 0x87a4 <_printf_fn+0x236>
    871a:	9f ef       	ldi	r25, 0xFF	; 255
    871c:	69 1a       	sub	r6, r25
    871e:	79 0a       	sbc	r7, r25
    8720:	89 0a       	sbc	r8, r25
    8722:	6f 96       	adiw	r28, 0x1f	; 31
    8724:	1f ae       	std	Y+63, r1	; 0x3f
    8726:	1e ae       	std	Y+62, r1	; 0x3e
    8728:	6f 97       	sbiw	r28, 0x1f	; 31
    872a:	2a e0       	ldi	r18, 0x0A	; 10
    872c:	f3 01       	movw	r30, r6
    872e:	58 2d       	mov	r21, r8
    8730:	0e 94 4a e8 	call	0x1d094	; 0x1d094 <__xload_1>
    8734:	70 e0       	ldi	r23, 0x00	; 0
    8736:	cb 01       	movw	r24, r22
    8738:	c0 97       	sbiw	r24, 0x30	; 48
    873a:	0a 97       	sbiw	r24, 0x0a	; 10
    873c:	b8 f4       	brcc	.+46     	; 0x876c <_printf_fn+0x1fe>
    873e:	af ef       	ldi	r26, 0xFF	; 255
    8740:	6a 1a       	sub	r6, r26
    8742:	7a 0a       	sbc	r7, r26
    8744:	8a 0a       	sbc	r8, r26
    8746:	6f 96       	adiw	r28, 0x1f	; 31
    8748:	ee ad       	ldd	r30, Y+62	; 0x3e
    874a:	ff ad       	ldd	r31, Y+63	; 0x3f
    874c:	6f 97       	sbiw	r28, 0x1f	; 31
    874e:	2e 9f       	mul	r18, r30
    8750:	c0 01       	movw	r24, r0
    8752:	2f 9f       	mul	r18, r31
    8754:	90 0d       	add	r25, r0
    8756:	11 24       	eor	r1, r1
    8758:	68 0f       	add	r22, r24
    875a:	79 1f       	adc	r23, r25
    875c:	ab 01       	movw	r20, r22
    875e:	40 53       	subi	r20, 0x30	; 48
    8760:	51 09       	sbc	r21, r1
    8762:	6f 96       	adiw	r28, 0x1f	; 31
    8764:	5f af       	std	Y+63, r21	; 0x3f
    8766:	4e af       	std	Y+62, r20	; 0x3e
    8768:	6f 97       	sbiw	r28, 0x1f	; 31
    876a:	e0 cf       	rjmp	.-64     	; 0x872c <_printf_fn+0x1be>
    876c:	6f 96       	adiw	r28, 0x1f	; 31
    876e:	8e ad       	ldd	r24, Y+62	; 0x3e
    8770:	9f ad       	ldd	r25, Y+63	; 0x3f
    8772:	6f 97       	sbiw	r28, 0x1f	; 31
    8774:	00 97       	sbiw	r24, 0x00	; 0
    8776:	09 f4       	brne	.+2      	; 0x877a <_printf_fn+0x20c>
    8778:	4f c0       	rjmp	.+158    	; 0x8818 <_printf_fn+0x2aa>
    877a:	87 70       	andi	r24, 0x07	; 7
    877c:	99 27       	eor	r25, r25
    877e:	89 2b       	or	r24, r25
    8780:	09 f0       	breq	.+2      	; 0x8784 <_printf_fn+0x216>
    8782:	46 c0       	rjmp	.+140    	; 0x8810 <_printf_fn+0x2a2>
    8784:	6f 96       	adiw	r28, 0x1f	; 31
    8786:	ae ad       	ldd	r26, Y+62	; 0x3e
    8788:	bf ad       	ldd	r27, Y+63	; 0x3f
    878a:	6f 97       	sbiw	r28, 0x1f	; 31
    878c:	83 e0       	ldi	r24, 0x03	; 3
    878e:	b5 95       	asr	r27
    8790:	a7 95       	ror	r26
    8792:	8a 95       	dec	r24
    8794:	e1 f7       	brne	.-8      	; 0x878e <_printf_fn+0x220>
    8796:	6f 96       	adiw	r28, 0x1f	; 31
    8798:	bf af       	std	Y+63, r27	; 0x3f
    879a:	ae af       	std	Y+62, r26	; 0x3e
    879c:	6f 97       	sbiw	r28, 0x1f	; 31
    879e:	ab 2b       	or	r26, r27
    87a0:	d9 f1       	breq	.+118    	; 0x8818 <_printf_fn+0x2aa>
    87a2:	27 c0       	rjmp	.+78     	; 0x87f2 <_printf_fn+0x284>
    87a4:	68 36       	cpi	r22, 0x68	; 104
    87a6:	29 f4       	brne	.+10     	; 0x87b2 <_printf_fn+0x244>
    87a8:	bf ef       	ldi	r27, 0xFF	; 255
    87aa:	6b 1a       	sub	r6, r27
    87ac:	7b 0a       	sbc	r7, r27
    87ae:	8b 0a       	sbc	r8, r27
    87b0:	c2 c2       	rjmp	.+1412   	; 0x8d36 <_printf_fn+0x7c8>
    87b2:	6c 36       	cpi	r22, 0x6C	; 108
    87b4:	09 f0       	breq	.+2      	; 0x87b8 <_printf_fn+0x24a>
    87b6:	bf c2       	rjmp	.+1406   	; 0x8d36 <_printf_fn+0x7c8>
    87b8:	a8 2d       	mov	r26, r8
    87ba:	c3 01       	movw	r24, r6
    87bc:	01 96       	adiw	r24, 0x01	; 1
    87be:	a1 1d       	adc	r26, r1
    87c0:	fc 01       	movw	r30, r24
    87c2:	5a 2f       	mov	r21, r26
    87c4:	0e 94 4a e8 	call	0x1d094	; 0x1d094 <__xload_1>
    87c8:	6c 36       	cpi	r22, 0x6C	; 108
    87ca:	49 f0       	breq	.+18     	; 0x87de <_printf_fn+0x270>
    87cc:	3c 01       	movw	r6, r24
    87ce:	8a 2e       	mov	r8, r26
    87d0:	24 e0       	ldi	r18, 0x04	; 4
    87d2:	30 e0       	ldi	r19, 0x00	; 0
    87d4:	6f 96       	adiw	r28, 0x1f	; 31
    87d6:	3f af       	std	Y+63, r19	; 0x3f
    87d8:	2e af       	std	Y+62, r18	; 0x3e
    87da:	6f 97       	sbiw	r28, 0x1f	; 31
    87dc:	0a c0       	rjmp	.+20     	; 0x87f2 <_printf_fn+0x284>
    87de:	32 e0       	ldi	r19, 0x02	; 2
    87e0:	63 0e       	add	r6, r19
    87e2:	71 1c       	adc	r7, r1
    87e4:	81 1c       	adc	r8, r1
    87e6:	48 e0       	ldi	r20, 0x08	; 8
    87e8:	50 e0       	ldi	r21, 0x00	; 0
    87ea:	6f 96       	adiw	r28, 0x1f	; 31
    87ec:	5f af       	std	Y+63, r21	; 0x3f
    87ee:	4e af       	std	Y+62, r20	; 0x3e
    87f0:	6f 97       	sbiw	r28, 0x1f	; 31
    87f2:	f3 01       	movw	r30, r6
    87f4:	58 2d       	mov	r21, r8
    87f6:	0e 94 4a e8 	call	0x1d094	; 0x1d094 <__xload_1>
    87fa:	86 2f       	mov	r24, r22
    87fc:	90 e0       	ldi	r25, 0x00	; 0
    87fe:	a3 96       	adiw	r28, 0x23	; 35
    8800:	9f af       	std	Y+63, r25	; 0x3f
    8802:	8e af       	std	Y+62, r24	; 0x3e
    8804:	a3 97       	sbiw	r28, 0x23	; 35
    8806:	84 36       	cpi	r24, 0x64	; 100
    8808:	91 05       	cpc	r25, r1
    880a:	09 f4       	brne	.+2      	; 0x880e <_printf_fn+0x2a0>
    880c:	9b c2       	rjmp	.+1334   	; 0x8d44 <_printf_fn+0x7d6>
    880e:	08 c0       	rjmp	.+16     	; 0x8820 <_printf_fn+0x2b2>
    8810:	6f 96       	adiw	r28, 0x1f	; 31
    8812:	1f ae       	std	Y+63, r1	; 0x3f
    8814:	1e ae       	std	Y+62, r1	; 0x3e
    8816:	6f 97       	sbiw	r28, 0x1f	; 31
    8818:	a3 96       	adiw	r28, 0x23	; 35
    881a:	1f ae       	std	Y+63, r1	; 0x3f
    881c:	1e ae       	std	Y+62, r1	; 0x3e
    881e:	a3 97       	sbiw	r28, 0x23	; 35
    8820:	31 e0       	ldi	r19, 0x01	; 1
    8822:	20 e0       	ldi	r18, 0x00	; 0
    8824:	a3 96       	adiw	r28, 0x23	; 35
    8826:	ae ad       	ldd	r26, Y+62	; 0x3e
    8828:	bf ad       	ldd	r27, Y+63	; 0x3f
    882a:	a3 97       	sbiw	r28, 0x23	; 35
    882c:	a4 34       	cpi	r26, 0x44	; 68
    882e:	b1 05       	cpc	r27, r1
    8830:	09 f0       	breq	.+2      	; 0x8834 <_printf_fn+0x2c6>
    8832:	30 e0       	ldi	r19, 0x00	; 0
    8834:	83 2f       	mov	r24, r19
    8836:	92 2f       	mov	r25, r18
    8838:	a3 96       	adiw	r28, 0x23	; 35
    883a:	ee ad       	ldd	r30, Y+62	; 0x3e
    883c:	ff ad       	ldd	r31, Y+63	; 0x3f
    883e:	a3 97       	sbiw	r28, 0x23	; 35
    8840:	e2 54       	subi	r30, 0x42	; 66
    8842:	f1 09       	sbc	r31, r1
    8844:	e7 33       	cpi	r30, 0x37	; 55
    8846:	f1 05       	cpc	r31, r1
    8848:	08 f0       	brcs	.+2      	; 0x884c <_printf_fn+0x2de>
    884a:	65 c1       	rjmp	.+714    	; 0x8b16 <_printf_fn+0x5a8>
    884c:	ea 5b       	subi	r30, 0xBA	; 186
    884e:	ff 4f       	sbci	r31, 0xFF	; 255
    8850:	0c 94 cf e7 	jmp	0x1cf9e	; 0x1cf9e <__tablejump2__>
    8854:	e2 e0       	ldi	r30, 0x02	; 2
    8856:	f0 e0       	ldi	r31, 0x00	; 0
    8858:	6f 96       	adiw	r28, 0x1f	; 31
    885a:	ff af       	std	Y+63, r31	; 0x3f
    885c:	ee af       	std	Y+62, r30	; 0x3e
    885e:	6f 97       	sbiw	r28, 0x1f	; 31
    8860:	29 2d       	mov	r18, r9
    8862:	28 72       	andi	r18, 0x28	; 40
    8864:	28 32       	cpi	r18, 0x28	; 40
    8866:	11 f4       	brne	.+4      	; 0x886c <_printf_fn+0x2fe>
    8868:	e8 94       	clt
    886a:	95 f8       	bld	r9, 5
    886c:	29 2d       	mov	r18, r9
    886e:	22 72       	andi	r18, 0x22	; 34
    8870:	22 32       	cpi	r18, 0x22	; 34
    8872:	11 f4       	brne	.+4      	; 0x8878 <_printf_fn+0x30a>
    8874:	e8 94       	clt
    8876:	95 f8       	bld	r9, 5
    8878:	29 2d       	mov	r18, r9
    887a:	21 72       	andi	r18, 0x21	; 33
    887c:	21 32       	cpi	r18, 0x21	; 33
    887e:	59 f4       	brne	.+22     	; 0x8896 <_printf_fn+0x328>
    8880:	a1 96       	adiw	r28, 0x21	; 33
    8882:	2e ad       	ldd	r18, Y+62	; 0x3e
    8884:	3f ad       	ldd	r19, Y+63	; 0x3f
    8886:	a1 97       	sbiw	r28, 0x21	; 33
    8888:	24 15       	cp	r18, r4
    888a:	35 05       	cpc	r19, r5
    888c:	24 f4       	brge	.+8      	; 0x8896 <_printf_fn+0x328>
    888e:	a1 96       	adiw	r28, 0x21	; 33
    8890:	5f ae       	std	Y+63, r5	; 0x3f
    8892:	4e ae       	std	Y+62, r4	; 0x3e
    8894:	a1 97       	sbiw	r28, 0x21	; 33
    8896:	29 2d       	mov	r18, r9
    8898:	23 72       	andi	r18, 0x23	; 35
    889a:	23 32       	cpi	r18, 0x23	; 35
    889c:	59 f4       	brne	.+22     	; 0x88b4 <_printf_fn+0x346>
    889e:	a1 96       	adiw	r28, 0x21	; 33
    88a0:	4e ad       	ldd	r20, Y+62	; 0x3e
    88a2:	5f ad       	ldd	r21, Y+63	; 0x3f
    88a4:	a1 97       	sbiw	r28, 0x21	; 33
    88a6:	44 15       	cp	r20, r4
    88a8:	55 05       	cpc	r21, r5
    88aa:	24 f4       	brge	.+8      	; 0x88b4 <_printf_fn+0x346>
    88ac:	a1 96       	adiw	r28, 0x21	; 33
    88ae:	5f ae       	std	Y+63, r5	; 0x3f
    88b0:	4e ae       	std	Y+62, r4	; 0x3e
    88b2:	a1 97       	sbiw	r28, 0x21	; 33
    88b4:	e8 94       	clt
    88b6:	94 f8       	bld	r9, 4
    88b8:	e8 94       	clt
    88ba:	92 f8       	bld	r9, 2
    88bc:	e8 94       	clt
    88be:	96 f8       	bld	r9, 6
    88c0:	6f 96       	adiw	r28, 0x1f	; 31
    88c2:	ae ad       	ldd	r26, Y+62	; 0x3e
    88c4:	bf ad       	ldd	r27, Y+63	; 0x3f
    88c6:	6f 97       	sbiw	r28, 0x1f	; 31
    88c8:	12 97       	sbiw	r26, 0x02	; 2
    88ca:	29 f5       	brne	.+74     	; 0x8916 <_printf_fn+0x3a8>
    88cc:	51 01       	movw	r10, r2
    88ce:	b2 e0       	ldi	r27, 0x02	; 2
    88d0:	ab 0e       	add	r10, r27
    88d2:	b1 1c       	adc	r11, r1
    88d4:	f1 01       	movw	r30, r2
    88d6:	80 81       	ld	r24, Z
    88d8:	91 81       	ldd	r25, Z+1	; 0x01
    88da:	65 96       	adiw	r28, 0x15	; 21
    88dc:	9f af       	std	Y+63, r25	; 0x3f
    88de:	8e af       	std	Y+62, r24	; 0x3e
    88e0:	65 97       	sbiw	r28, 0x15	; 21
    88e2:	a3 96       	adiw	r28, 0x23	; 35
    88e4:	2e ad       	ldd	r18, Y+62	; 0x3e
    88e6:	3f ad       	ldd	r19, Y+63	; 0x3f
    88e8:	a3 97       	sbiw	r28, 0x23	; 35
    88ea:	24 34       	cpi	r18, 0x44	; 68
    88ec:	31 05       	cpc	r19, r1
    88ee:	09 f0       	breq	.+2      	; 0x88f2 <_printf_fn+0x384>
    88f0:	c0 c0       	rjmp	.+384    	; 0x8a72 <_printf_fn+0x504>
    88f2:	97 ff       	sbrs	r25, 7
    88f4:	b8 c0       	rjmp	.+368    	; 0x8a66 <_printf_fn+0x4f8>
    88f6:	68 94       	set
    88f8:	96 f8       	bld	r9, 6
    88fa:	91 95       	neg	r25
    88fc:	81 95       	neg	r24
    88fe:	91 09       	sbc	r25, r1
    8900:	65 96       	adiw	r28, 0x15	; 21
    8902:	9f af       	std	Y+63, r25	; 0x3f
    8904:	8e af       	std	Y+62, r24	; 0x3e
    8906:	65 97       	sbiw	r28, 0x15	; 21
    8908:	42 e0       	ldi	r20, 0x02	; 2
    890a:	50 e0       	ldi	r21, 0x00	; 0
    890c:	6f 96       	adiw	r28, 0x1f	; 31
    890e:	5f af       	std	Y+63, r21	; 0x3f
    8910:	4e af       	std	Y+62, r20	; 0x3e
    8912:	6f 97       	sbiw	r28, 0x1f	; 31
    8914:	ae c0       	rjmp	.+348    	; 0x8a72 <_printf_fn+0x504>
    8916:	6f 96       	adiw	r28, 0x1f	; 31
    8918:	ae ad       	ldd	r26, Y+62	; 0x3e
    891a:	bf ad       	ldd	r27, Y+63	; 0x3f
    891c:	6f 97       	sbiw	r28, 0x1f	; 31
    891e:	14 97       	sbiw	r26, 0x04	; 4
    8920:	59 f5       	brne	.+86     	; 0x8978 <_printf_fn+0x40a>
    8922:	51 01       	movw	r10, r2
    8924:	b4 e0       	ldi	r27, 0x04	; 4
    8926:	ab 0e       	add	r10, r27
    8928:	b1 1c       	adc	r11, r1
    892a:	f1 01       	movw	r30, r2
    892c:	80 81       	ld	r24, Z
    892e:	91 81       	ldd	r25, Z+1	; 0x01
    8930:	a2 81       	ldd	r26, Z+2	; 0x02
    8932:	b3 81       	ldd	r27, Z+3	; 0x03
    8934:	2f 96       	adiw	r28, 0x0f	; 15
    8936:	8c af       	std	Y+60, r24	; 0x3c
    8938:	9d af       	std	Y+61, r25	; 0x3d
    893a:	ae af       	std	Y+62, r26	; 0x3e
    893c:	bf af       	std	Y+63, r27	; 0x3f
    893e:	2f 97       	sbiw	r28, 0x0f	; 15
    8940:	a3 96       	adiw	r28, 0x23	; 35
    8942:	2e ad       	ldd	r18, Y+62	; 0x3e
    8944:	3f ad       	ldd	r19, Y+63	; 0x3f
    8946:	a3 97       	sbiw	r28, 0x23	; 35
    8948:	24 34       	cpi	r18, 0x44	; 68
    894a:	31 05       	cpc	r19, r1
    894c:	09 f0       	breq	.+2      	; 0x8950 <_printf_fn+0x3e2>
    894e:	9e c0       	rjmp	.+316    	; 0x8a8c <_printf_fn+0x51e>
    8950:	b7 ff       	sbrs	r27, 7
    8952:	96 c0       	rjmp	.+300    	; 0x8a80 <_printf_fn+0x512>
    8954:	68 94       	set
    8956:	96 f8       	bld	r9, 6
    8958:	b0 95       	com	r27
    895a:	a0 95       	com	r26
    895c:	90 95       	com	r25
    895e:	81 95       	neg	r24
    8960:	9f 4f       	sbci	r25, 0xFF	; 255
    8962:	af 4f       	sbci	r26, 0xFF	; 255
    8964:	bf 4f       	sbci	r27, 0xFF	; 255
    8966:	2f 96       	adiw	r28, 0x0f	; 15
    8968:	8c af       	std	Y+60, r24	; 0x3c
    896a:	9d af       	std	Y+61, r25	; 0x3d
    896c:	ae af       	std	Y+62, r26	; 0x3e
    896e:	bf af       	std	Y+63, r27	; 0x3f
    8970:	2f 97       	sbiw	r28, 0x0f	; 15
    8972:	86 c0       	rjmp	.+268    	; 0x8a80 <_printf_fn+0x512>
    8974:	81 e0       	ldi	r24, 0x01	; 1
    8976:	90 e0       	ldi	r25, 0x00	; 0
    8978:	6f 96       	adiw	r28, 0x1f	; 31
    897a:	ae ad       	ldd	r26, Y+62	; 0x3e
    897c:	bf ad       	ldd	r27, Y+63	; 0x3f
    897e:	6f 97       	sbiw	r28, 0x1f	; 31
    8980:	51 01       	movw	r10, r2
    8982:	18 97       	sbiw	r26, 0x08	; 8
    8984:	09 f0       	breq	.+2      	; 0x8988 <_printf_fn+0x41a>
    8986:	89 c0       	rjmp	.+274    	; 0x8a9a <_printf_fn+0x52c>
    8988:	b8 e0       	ldi	r27, 0x08	; 8
    898a:	ab 0e       	add	r10, r27
    898c:	b1 1c       	adc	r11, r1
    898e:	f1 01       	movw	r30, r2
    8990:	f0 81       	ld	r31, Z
    8992:	aa 96       	adiw	r28, 0x2a	; 42
    8994:	ff af       	std	Y+63, r31	; 0x3f
    8996:	aa 97       	sbiw	r28, 0x2a	; 42
    8998:	d1 01       	movw	r26, r2
    899a:	11 96       	adiw	r26, 0x01	; 1
    899c:	fc 90       	ld	r15, X
    899e:	11 97       	sbiw	r26, 0x01	; 1
    89a0:	12 96       	adiw	r26, 0x02	; 2
    89a2:	0c 91       	ld	r16, X
    89a4:	12 97       	sbiw	r26, 0x02	; 2
    89a6:	13 96       	adiw	r26, 0x03	; 3
    89a8:	1c 91       	ld	r17, X
    89aa:	13 97       	sbiw	r26, 0x03	; 3
    89ac:	14 96       	adiw	r26, 0x04	; 4
    89ae:	bc 91       	ld	r27, X
    89b0:	f1 01       	movw	r30, r2
    89b2:	f5 81       	ldd	r31, Z+5	; 0x05
    89b4:	ab 96       	adiw	r28, 0x2b	; 43
    89b6:	ff af       	std	Y+63, r31	; 0x3f
    89b8:	ab 97       	sbiw	r28, 0x2b	; 43
    89ba:	f1 01       	movw	r30, r2
    89bc:	f6 81       	ldd	r31, Z+6	; 0x06
    89be:	ac 96       	adiw	r28, 0x2c	; 44
    89c0:	ff af       	std	Y+63, r31	; 0x3f
    89c2:	ac 97       	sbiw	r28, 0x2c	; 44
    89c4:	f1 01       	movw	r30, r2
    89c6:	37 80       	ldd	r3, Z+7	; 0x07
    89c8:	aa 96       	adiw	r28, 0x2a	; 42
    89ca:	ff ad       	ldd	r31, Y+63	; 0x3f
    89cc:	aa 97       	sbiw	r28, 0x2a	; 42
    89ce:	24 96       	adiw	r28, 0x04	; 4
    89d0:	ff af       	std	Y+63, r31	; 0x3f
    89d2:	24 97       	sbiw	r28, 0x04	; 4
    89d4:	25 96       	adiw	r28, 0x05	; 5
    89d6:	ff ae       	std	Y+63, r15	; 0x3f
    89d8:	25 97       	sbiw	r28, 0x05	; 5
    89da:	26 96       	adiw	r28, 0x06	; 6
    89dc:	0f af       	std	Y+63, r16	; 0x3f
    89de:	26 97       	sbiw	r28, 0x06	; 6
    89e0:	27 96       	adiw	r28, 0x07	; 7
    89e2:	1f af       	std	Y+63, r17	; 0x3f
    89e4:	27 97       	sbiw	r28, 0x07	; 7
    89e6:	28 96       	adiw	r28, 0x08	; 8
    89e8:	bf af       	std	Y+63, r27	; 0x3f
    89ea:	28 97       	sbiw	r28, 0x08	; 8
    89ec:	ab 96       	adiw	r28, 0x2b	; 43
    89ee:	ef ad       	ldd	r30, Y+63	; 0x3f
    89f0:	ab 97       	sbiw	r28, 0x2b	; 43
    89f2:	29 96       	adiw	r28, 0x09	; 9
    89f4:	ef af       	std	Y+63, r30	; 0x3f
    89f6:	29 97       	sbiw	r28, 0x09	; 9
    89f8:	ac 96       	adiw	r28, 0x2c	; 44
    89fa:	ff ad       	ldd	r31, Y+63	; 0x3f
    89fc:	ac 97       	sbiw	r28, 0x2c	; 44
    89fe:	2a 96       	adiw	r28, 0x0a	; 10
    8a00:	ff af       	std	Y+63, r31	; 0x3f
    8a02:	2a 97       	sbiw	r28, 0x0a	; 10
    8a04:	2b 96       	adiw	r28, 0x0b	; 11
    8a06:	3f ae       	std	Y+63, r3	; 0x3f
    8a08:	2b 97       	sbiw	r28, 0x0b	; 11
    8a0a:	89 2b       	or	r24, r25
    8a0c:	09 f4       	brne	.+2      	; 0x8a10 <_printf_fn+0x4a2>
    8a0e:	50 c0       	rjmp	.+160    	; 0x8ab0 <_printf_fn+0x542>
    8a10:	aa 96       	adiw	r28, 0x2a	; 42
    8a12:	2f ad       	ldd	r18, Y+63	; 0x3f
    8a14:	aa 97       	sbiw	r28, 0x2a	; 42
    8a16:	3f 2d       	mov	r19, r15
    8a18:	a8 01       	movw	r20, r16
    8a1a:	6b 2f       	mov	r22, r27
    8a1c:	7e 2f       	mov	r23, r30
    8a1e:	8f 2f       	mov	r24, r31
    8a20:	93 2d       	mov	r25, r3
    8a22:	a0 e0       	ldi	r26, 0x00	; 0
    8a24:	0e 94 51 e8 	call	0x1d0a2	; 0x1d0a2 <__cmpdi2_s8>
    8a28:	0c f0       	brlt	.+2      	; 0x8a2c <_printf_fn+0x4be>
    8a2a:	42 c0       	rjmp	.+132    	; 0x8ab0 <_printf_fn+0x542>
    8a2c:	68 94       	set
    8a2e:	96 f8       	bld	r9, 6
    8a30:	0e 94 03 e8 	call	0x1d006	; 0x1d006 <__negdi2>
    8a34:	24 96       	adiw	r28, 0x04	; 4
    8a36:	2f af       	std	Y+63, r18	; 0x3f
    8a38:	24 97       	sbiw	r28, 0x04	; 4
    8a3a:	25 96       	adiw	r28, 0x05	; 5
    8a3c:	3f af       	std	Y+63, r19	; 0x3f
    8a3e:	25 97       	sbiw	r28, 0x05	; 5
    8a40:	26 96       	adiw	r28, 0x06	; 6
    8a42:	4f af       	std	Y+63, r20	; 0x3f
    8a44:	26 97       	sbiw	r28, 0x06	; 6
    8a46:	27 96       	adiw	r28, 0x07	; 7
    8a48:	5f af       	std	Y+63, r21	; 0x3f
    8a4a:	27 97       	sbiw	r28, 0x07	; 7
    8a4c:	28 96       	adiw	r28, 0x08	; 8
    8a4e:	6f af       	std	Y+63, r22	; 0x3f
    8a50:	28 97       	sbiw	r28, 0x08	; 8
    8a52:	29 96       	adiw	r28, 0x09	; 9
    8a54:	7f af       	std	Y+63, r23	; 0x3f
    8a56:	29 97       	sbiw	r28, 0x09	; 9
    8a58:	2a 96       	adiw	r28, 0x0a	; 10
    8a5a:	8f af       	std	Y+63, r24	; 0x3f
    8a5c:	2a 97       	sbiw	r28, 0x0a	; 10
    8a5e:	2b 96       	adiw	r28, 0x0b	; 11
    8a60:	9f af       	std	Y+63, r25	; 0x3f
    8a62:	2b 97       	sbiw	r28, 0x0b	; 11
    8a64:	25 c0       	rjmp	.+74     	; 0x8ab0 <_printf_fn+0x542>
    8a66:	22 e0       	ldi	r18, 0x02	; 2
    8a68:	30 e0       	ldi	r19, 0x00	; 0
    8a6a:	6f 96       	adiw	r28, 0x1f	; 31
    8a6c:	3f af       	std	Y+63, r19	; 0x3f
    8a6e:	2e af       	std	Y+62, r18	; 0x3e
    8a70:	6f 97       	sbiw	r28, 0x1f	; 31
    8a72:	6c 96       	adiw	r28, 0x1c	; 28
    8a74:	8f ad       	ldd	r24, Y+63	; 0x3f
    8a76:	6c 97       	sbiw	r28, 0x1c	; 28
    8a78:	6d 96       	adiw	r28, 0x1d	; 29
    8a7a:	9f ad       	ldd	r25, Y+63	; 0x3f
    8a7c:	6d 97       	sbiw	r28, 0x1d	; 29
    8a7e:	1e c0       	rjmp	.+60     	; 0x8abc <_printf_fn+0x54e>
    8a80:	44 e0       	ldi	r20, 0x04	; 4
    8a82:	50 e0       	ldi	r21, 0x00	; 0
    8a84:	6f 96       	adiw	r28, 0x1f	; 31
    8a86:	5f af       	std	Y+63, r21	; 0x3f
    8a88:	4e af       	std	Y+62, r20	; 0x3e
    8a8a:	6f 97       	sbiw	r28, 0x1f	; 31
    8a8c:	6a 96       	adiw	r28, 0x1a	; 26
    8a8e:	8f ad       	ldd	r24, Y+63	; 0x3f
    8a90:	6a 97       	sbiw	r28, 0x1a	; 26
    8a92:	6b 96       	adiw	r28, 0x1b	; 27
    8a94:	9f ad       	ldd	r25, Y+63	; 0x3f
    8a96:	6b 97       	sbiw	r28, 0x1b	; 27
    8a98:	11 c0       	rjmp	.+34     	; 0x8abc <_printf_fn+0x54e>
    8a9a:	66 96       	adiw	r28, 0x16	; 22
    8a9c:	8f ad       	ldd	r24, Y+63	; 0x3f
    8a9e:	66 97       	sbiw	r28, 0x16	; 22
    8aa0:	67 96       	adiw	r28, 0x17	; 23
    8aa2:	9f ad       	ldd	r25, Y+63	; 0x3f
    8aa4:	67 97       	sbiw	r28, 0x17	; 23
    8aa6:	a3 96       	adiw	r28, 0x23	; 35
    8aa8:	1f ae       	std	Y+63, r1	; 0x3f
    8aaa:	1e ae       	std	Y+62, r1	; 0x3e
    8aac:	a3 97       	sbiw	r28, 0x23	; 35
    8aae:	06 c0       	rjmp	.+12     	; 0x8abc <_printf_fn+0x54e>
    8ab0:	68 96       	adiw	r28, 0x18	; 24
    8ab2:	8f ad       	ldd	r24, Y+63	; 0x3f
    8ab4:	68 97       	sbiw	r28, 0x18	; 24
    8ab6:	69 96       	adiw	r28, 0x19	; 25
    8ab8:	9f ad       	ldd	r25, Y+63	; 0x3f
    8aba:	69 97       	sbiw	r28, 0x19	; 25
    8abc:	5f ef       	ldi	r21, 0xFF	; 255
    8abe:	65 1a       	sub	r6, r21
    8ac0:	75 0a       	sbc	r7, r21
    8ac2:	85 0a       	sbc	r8, r21
    8ac4:	15 01       	movw	r2, r10
    8ac6:	2d c0       	rjmp	.+90     	; 0x8b22 <_printf_fn+0x5b4>
    8ac8:	91 fc       	sbrc	r9, 1
    8aca:	08 c0       	rjmp	.+16     	; 0x8adc <_printf_fn+0x56e>
    8acc:	68 94       	set
    8ace:	91 f8       	bld	r9, 1
    8ad0:	86 e0       	ldi	r24, 0x06	; 6
    8ad2:	90 e0       	ldi	r25, 0x00	; 0
    8ad4:	a1 96       	adiw	r28, 0x21	; 33
    8ad6:	9f af       	std	Y+63, r25	; 0x3f
    8ad8:	8e af       	std	Y+62, r24	; 0x3e
    8ada:	a1 97       	sbiw	r28, 0x21	; 33
    8adc:	d1 01       	movw	r26, r2
    8ade:	2d 91       	ld	r18, X+
    8ae0:	3d 91       	ld	r19, X+
    8ae2:	4d 91       	ld	r20, X+
    8ae4:	5c 91       	ld	r21, X
    8ae6:	a9 96       	adiw	r28, 0x29	; 41
    8ae8:	2c af       	std	Y+60, r18	; 0x3c
    8aea:	3d af       	std	Y+61, r19	; 0x3d
    8aec:	4e af       	std	Y+62, r20	; 0x3e
    8aee:	5f af       	std	Y+63, r21	; 0x3f
    8af0:	a9 97       	sbiw	r28, 0x29	; 41
    8af2:	bf ef       	ldi	r27, 0xFF	; 255
    8af4:	6b 1a       	sub	r6, r27
    8af6:	7b 0a       	sbc	r7, r27
    8af8:	8b 0a       	sbc	r8, r27
    8afa:	f1 01       	movw	r30, r2
    8afc:	34 96       	adiw	r30, 0x04	; 4
    8afe:	1f 01       	movw	r2, r30
    8b00:	0a c0       	rjmp	.+20     	; 0x8b16 <_printf_fn+0x5a8>
    8b02:	ff ef       	ldi	r31, 0xFF	; 255
    8b04:	6f 1a       	sub	r6, r31
    8b06:	7f 0a       	sbc	r7, r31
    8b08:	8f 0a       	sbc	r8, r31
    8b0a:	b0 c0       	rjmp	.+352    	; 0x8c6c <_printf_fn+0x6fe>
    8b0c:	2f ef       	ldi	r18, 0xFF	; 255
    8b0e:	62 1a       	sub	r6, r18
    8b10:	72 0a       	sbc	r7, r18
    8b12:	82 0a       	sbc	r8, r18
    8b14:	b8 c0       	rjmp	.+368    	; 0x8c86 <_printf_fn+0x718>
    8b16:	66 96       	adiw	r28, 0x16	; 22
    8b18:	8f ad       	ldd	r24, Y+63	; 0x3f
    8b1a:	66 97       	sbiw	r28, 0x16	; 22
    8b1c:	67 96       	adiw	r28, 0x17	; 23
    8b1e:	9f ad       	ldd	r25, Y+63	; 0x3f
    8b20:	67 97       	sbiw	r28, 0x17	; 23
    8b22:	a3 96       	adiw	r28, 0x23	; 35
    8b24:	ee ad       	ldd	r30, Y+62	; 0x3e
    8b26:	ff ad       	ldd	r31, Y+63	; 0x3f
    8b28:	a3 97       	sbiw	r28, 0x23	; 35
    8b2a:	e2 54       	subi	r30, 0x42	; 66
    8b2c:	f1 09       	sbc	r31, r1
    8b2e:	e7 33       	cpi	r30, 0x37	; 55
    8b30:	f1 05       	cpc	r31, r1
    8b32:	08 f0       	brcs	.+2      	; 0x8b36 <_printf_fn+0x5c8>
    8b34:	f9 c0       	rjmp	.+498    	; 0x8d28 <_printf_fn+0x7ba>
    8b36:	e3 58       	subi	r30, 0x83	; 131
    8b38:	ff 4f       	sbci	r31, 0xFF	; 255
    8b3a:	0c 94 cf e7 	jmp	0x1cf9e	; 0x1cf9e <__tablejump2__>
    8b3e:	e8 94       	clt
    8b40:	94 f8       	bld	r9, 4
    8b42:	e8 94       	clt
    8b44:	92 f8       	bld	r9, 2
    8b46:	a9 2c       	mov	r10, r9
    8b48:	b1 2c       	mov	r11, r1
    8b4a:	a1 96       	adiw	r28, 0x21	; 33
    8b4c:	ce ac       	ldd	r12, Y+62	; 0x3e
    8b4e:	df ac       	ldd	r13, Y+63	; 0x3f
    8b50:	a1 97       	sbiw	r28, 0x21	; 33
    8b52:	72 01       	movw	r14, r4
    8b54:	0a e0       	ldi	r16, 0x0A	; 10
    8b56:	10 e0       	ldi	r17, 0x00	; 0
    8b58:	13 c0       	rjmp	.+38     	; 0x8b80 <_printf_fn+0x612>
    8b5a:	a9 2c       	mov	r10, r9
    8b5c:	b1 2c       	mov	r11, r1
    8b5e:	a1 96       	adiw	r28, 0x21	; 33
    8b60:	ce ac       	ldd	r12, Y+62	; 0x3e
    8b62:	df ac       	ldd	r13, Y+63	; 0x3f
    8b64:	a1 97       	sbiw	r28, 0x21	; 33
    8b66:	72 01       	movw	r14, r4
    8b68:	02 e0       	ldi	r16, 0x02	; 2
    8b6a:	10 e0       	ldi	r17, 0x00	; 0
    8b6c:	09 c0       	rjmp	.+18     	; 0x8b80 <_printf_fn+0x612>
    8b6e:	a9 2c       	mov	r10, r9
    8b70:	b1 2c       	mov	r11, r1
    8b72:	a1 96       	adiw	r28, 0x21	; 33
    8b74:	ce ac       	ldd	r12, Y+62	; 0x3e
    8b76:	df ac       	ldd	r13, Y+63	; 0x3f
    8b78:	a1 97       	sbiw	r28, 0x21	; 33
    8b7a:	72 01       	movw	r14, r4
    8b7c:	08 e0       	ldi	r16, 0x08	; 8
    8b7e:	10 e0       	ldi	r17, 0x00	; 0
    8b80:	22 e4       	ldi	r18, 0x42	; 66
    8b82:	30 e0       	ldi	r19, 0x00	; 0
    8b84:	ae 01       	movw	r20, r28
    8b86:	4f 5f       	subi	r20, 0xFF	; 255
    8b88:	5f 4f       	sbci	r21, 0xFF	; 255
    8b8a:	6f 96       	adiw	r28, 0x1f	; 31
    8b8c:	6e ad       	ldd	r22, Y+62	; 0x3e
    8b8e:	7f ad       	ldd	r23, Y+63	; 0x3f
    8b90:	6f 97       	sbiw	r28, 0x1f	; 31
    8b92:	f3 d9       	rcall	.-3098   	; 0x7f7a <p_ntoa>
    8b94:	30 c0       	rjmp	.+96     	; 0x8bf6 <_printf_fn+0x688>
    8b96:	a9 2c       	mov	r10, r9
    8b98:	b1 2c       	mov	r11, r1
    8b9a:	a1 96       	adiw	r28, 0x21	; 33
    8b9c:	ce ac       	ldd	r12, Y+62	; 0x3e
    8b9e:	df ac       	ldd	r13, Y+63	; 0x3f
    8ba0:	a1 97       	sbiw	r28, 0x21	; 33
    8ba2:	72 01       	movw	r14, r4
    8ba4:	00 e1       	ldi	r16, 0x10	; 16
    8ba6:	10 e0       	ldi	r17, 0x00	; 0
    8ba8:	22 e4       	ldi	r18, 0x42	; 66
    8baa:	30 e0       	ldi	r19, 0x00	; 0
    8bac:	ae 01       	movw	r20, r28
    8bae:	4f 5f       	subi	r20, 0xFF	; 255
    8bb0:	5f 4f       	sbci	r21, 0xFF	; 255
    8bb2:	6f 96       	adiw	r28, 0x1f	; 31
    8bb4:	6e ad       	ldd	r22, Y+62	; 0x3e
    8bb6:	7f ad       	ldd	r23, Y+63	; 0x3f
    8bb8:	6f 97       	sbiw	r28, 0x1f	; 31
    8bba:	df d9       	rcall	.-3138   	; 0x7f7a <p_ntoa>
    8bbc:	7c 01       	movw	r14, r24
    8bbe:	a3 96       	adiw	r28, 0x23	; 35
    8bc0:	6e ad       	ldd	r22, Y+62	; 0x3e
    8bc2:	7f ad       	ldd	r23, Y+63	; 0x3f
    8bc4:	a3 97       	sbiw	r28, 0x23	; 35
    8bc6:	67 7f       	andi	r22, 0xF7	; 247
    8bc8:	60 35       	cpi	r22, 0x50	; 80
    8bca:	71 05       	cpc	r23, r1
    8bcc:	c9 f5       	brne	.+114    	; 0x8c40 <_printf_fn+0x6d2>
    8bce:	34 c0       	rjmp	.+104    	; 0x8c38 <_printf_fn+0x6ca>
    8bd0:	c9 2c       	mov	r12, r9
    8bd2:	d1 2c       	mov	r13, r1
    8bd4:	a1 96       	adiw	r28, 0x21	; 33
    8bd6:	ee ac       	ldd	r14, Y+62	; 0x3e
    8bd8:	ff ac       	ldd	r15, Y+63	; 0x3f
    8bda:	a1 97       	sbiw	r28, 0x21	; 33
    8bdc:	82 01       	movw	r16, r4
    8bde:	22 e4       	ldi	r18, 0x42	; 66
    8be0:	30 e0       	ldi	r19, 0x00	; 0
    8be2:	ae 01       	movw	r20, r28
    8be4:	4f 5f       	subi	r20, 0xFF	; 255
    8be6:	5f 4f       	sbci	r21, 0xFF	; 255
    8be8:	a9 96       	adiw	r28, 0x29	; 41
    8bea:	6c ad       	ldd	r22, Y+60	; 0x3c
    8bec:	7d ad       	ldd	r23, Y+61	; 0x3d
    8bee:	8e ad       	ldd	r24, Y+62	; 0x3e
    8bf0:	9f ad       	ldd	r25, Y+63	; 0x3f
    8bf2:	a9 97       	sbiw	r28, 0x29	; 41
    8bf4:	17 da       	rcall	.-3026   	; 0x8024 <p_ftoa>
    8bf6:	93 fa       	bst	r9, 3
    8bf8:	00 27       	eor	r16, r16
    8bfa:	00 f9       	bld	r16, 0
    8bfc:	10 e0       	ldi	r17, 0x00	; 0
    8bfe:	9c 01       	movw	r18, r24
    8c00:	24 c0       	rjmp	.+72     	; 0x8c4a <_printf_fn+0x6dc>
    8c02:	c9 2c       	mov	r12, r9
    8c04:	d1 2c       	mov	r13, r1
    8c06:	a1 96       	adiw	r28, 0x21	; 33
    8c08:	ee ac       	ldd	r14, Y+62	; 0x3e
    8c0a:	ff ac       	ldd	r15, Y+63	; 0x3f
    8c0c:	a1 97       	sbiw	r28, 0x21	; 33
    8c0e:	82 01       	movw	r16, r4
    8c10:	22 e4       	ldi	r18, 0x42	; 66
    8c12:	30 e0       	ldi	r19, 0x00	; 0
    8c14:	ae 01       	movw	r20, r28
    8c16:	4f 5f       	subi	r20, 0xFF	; 255
    8c18:	5f 4f       	sbci	r21, 0xFF	; 255
    8c1a:	a9 96       	adiw	r28, 0x29	; 41
    8c1c:	6c ad       	ldd	r22, Y+60	; 0x3c
    8c1e:	7d ad       	ldd	r23, Y+61	; 0x3d
    8c20:	8e ad       	ldd	r24, Y+62	; 0x3e
    8c22:	9f ad       	ldd	r25, Y+63	; 0x3f
    8c24:	a9 97       	sbiw	r28, 0x29	; 41
    8c26:	05 db       	rcall	.-2550   	; 0x8232 <p_etoa>
    8c28:	7c 01       	movw	r14, r24
    8c2a:	a3 96       	adiw	r28, 0x23	; 35
    8c2c:	4e ad       	ldd	r20, Y+62	; 0x3e
    8c2e:	5f ad       	ldd	r21, Y+63	; 0x3f
    8c30:	a3 97       	sbiw	r28, 0x23	; 35
    8c32:	45 34       	cpi	r20, 0x45	; 69
    8c34:	51 05       	cpc	r21, r1
    8c36:	21 f4       	brne	.+8      	; 0x8c40 <_printf_fn+0x6d2>
    8c38:	ce 01       	movw	r24, r28
    8c3a:	01 96       	adiw	r24, 0x01	; 1
    8c3c:	0e 94 64 32 	call	0x64c8	; 0x64c8 <strupper>
    8c40:	93 fa       	bst	r9, 3
    8c42:	00 27       	eor	r16, r16
    8c44:	00 f9       	bld	r16, 0
    8c46:	10 e0       	ldi	r17, 0x00	; 0
    8c48:	97 01       	movw	r18, r14
    8c4a:	a2 01       	movw	r20, r4
    8c4c:	be 01       	movw	r22, r28
    8c4e:	6f 5f       	subi	r22, 0xFF	; 255
    8c50:	7f 4f       	sbci	r23, 0xFF	; 255
    8c52:	a5 96       	adiw	r28, 0x25	; 37
    8c54:	8e ad       	ldd	r24, Y+62	; 0x3e
    8c56:	9f ad       	ldd	r25, Y+63	; 0x3f
    8c58:	a5 97       	sbiw	r28, 0x25	; 37
    8c5a:	47 dc       	rcall	.-1906   	; 0x84ea <_puts_pad>
    8c5c:	69 c0       	rjmp	.+210    	; 0x8d30 <_printf_fn+0x7c2>
    8c5e:	a3 96       	adiw	r28, 0x23	; 35
    8c60:	8e ad       	ldd	r24, Y+62	; 0x3e
    8c62:	9f ad       	ldd	r25, Y+63	; 0x3f
    8c64:	a3 97       	sbiw	r28, 0x23	; 35
    8c66:	83 37       	cpi	r24, 0x73	; 115
    8c68:	91 05       	cpc	r25, r1
    8c6a:	69 f4       	brne	.+26     	; 0x8c86 <_printf_fn+0x718>
    8c6c:	71 01       	movw	r14, r2
    8c6e:	92 e0       	ldi	r25, 0x02	; 2
    8c70:	e9 0e       	add	r14, r25
    8c72:	f1 1c       	adc	r15, r1
    8c74:	d1 01       	movw	r26, r2
    8c76:	6d 91       	ld	r22, X+
    8c78:	7c 91       	ld	r23, X
    8c7a:	61 15       	cp	r22, r1
    8c7c:	71 05       	cpc	r23, r1
    8c7e:	91 f4       	brne	.+36     	; 0x8ca4 <_printf_fn+0x736>
    8c80:	61 ed       	ldi	r22, 0xD1	; 209
    8c82:	77 e0       	ldi	r23, 0x07	; 7
    8c84:	0f c0       	rjmp	.+30     	; 0x8ca4 <_printf_fn+0x736>
    8c86:	71 01       	movw	r14, r2
    8c88:	b2 e0       	ldi	r27, 0x02	; 2
    8c8a:	eb 0e       	add	r14, r27
    8c8c:	f1 1c       	adc	r15, r1
    8c8e:	f1 01       	movw	r30, r2
    8c90:	80 81       	ld	r24, Z
    8c92:	60 96       	adiw	r28, 0x10	; 16
    8c94:	8f af       	std	Y+63, r24	; 0x3f
    8c96:	60 97       	sbiw	r28, 0x10	; 16
    8c98:	61 96       	adiw	r28, 0x11	; 17
    8c9a:	1f ae       	std	Y+63, r1	; 0x3f
    8c9c:	61 97       	sbiw	r28, 0x11	; 17
    8c9e:	be 01       	movw	r22, r28
    8ca0:	61 5b       	subi	r22, 0xB1	; 177
    8ca2:	7f 4f       	sbci	r23, 0xFF	; 255
    8ca4:	fb 01       	movw	r30, r22
    8ca6:	01 90       	ld	r0, Z+
    8ca8:	00 20       	and	r0, r0
    8caa:	e9 f7       	brne	.-6      	; 0x8ca6 <_printf_fn+0x738>
    8cac:	31 97       	sbiw	r30, 0x01	; 1
    8cae:	e6 1b       	sub	r30, r22
    8cb0:	f7 0b       	sbc	r31, r23
    8cb2:	a1 96       	adiw	r28, 0x21	; 33
    8cb4:	2e ad       	ldd	r18, Y+62	; 0x3e
    8cb6:	3f ad       	ldd	r19, Y+63	; 0x3f
    8cb8:	a1 97       	sbiw	r28, 0x21	; 33
    8cba:	23 2b       	or	r18, r19
    8cbc:	21 f4       	brne	.+8      	; 0x8cc6 <_printf_fn+0x758>
    8cbe:	a1 96       	adiw	r28, 0x21	; 33
    8cc0:	ff af       	std	Y+63, r31	; 0x3f
    8cc2:	ee af       	std	Y+62, r30	; 0x3e
    8cc4:	a1 97       	sbiw	r28, 0x21	; 33
    8cc6:	a1 96       	adiw	r28, 0x21	; 33
    8cc8:	4e ad       	ldd	r20, Y+62	; 0x3e
    8cca:	5f ad       	ldd	r21, Y+63	; 0x3f
    8ccc:	a1 97       	sbiw	r28, 0x21	; 33
    8cce:	44 16       	cp	r4, r20
    8cd0:	55 06       	cpc	r5, r21
    8cd2:	3c f4       	brge	.+14     	; 0x8ce2 <_printf_fn+0x774>
    8cd4:	41 14       	cp	r4, r1
    8cd6:	51 04       	cpc	r5, r1
    8cd8:	21 f0       	breq	.+8      	; 0x8ce2 <_printf_fn+0x774>
    8cda:	a1 96       	adiw	r28, 0x21	; 33
    8cdc:	5f ae       	std	Y+63, r5	; 0x3f
    8cde:	4e ae       	std	Y+62, r4	; 0x3e
    8ce0:	a1 97       	sbiw	r28, 0x21	; 33
    8ce2:	93 fa       	bst	r9, 3
    8ce4:	00 27       	eor	r16, r16
    8ce6:	00 f9       	bld	r16, 0
    8ce8:	10 e0       	ldi	r17, 0x00	; 0
    8cea:	a1 96       	adiw	r28, 0x21	; 33
    8cec:	2e ad       	ldd	r18, Y+62	; 0x3e
    8cee:	3f ad       	ldd	r19, Y+63	; 0x3f
    8cf0:	a1 97       	sbiw	r28, 0x21	; 33
    8cf2:	a2 01       	movw	r20, r4
    8cf4:	a5 96       	adiw	r28, 0x25	; 37
    8cf6:	8e ad       	ldd	r24, Y+62	; 0x3e
    8cf8:	9f ad       	ldd	r25, Y+63	; 0x3f
    8cfa:	a5 97       	sbiw	r28, 0x25	; 37
    8cfc:	f6 db       	rcall	.-2068   	; 0x84ea <_puts_pad>
    8cfe:	17 01       	movw	r2, r14
    8d00:	17 c0       	rjmp	.+46     	; 0x8d30 <_printf_fn+0x7c2>
    8d02:	f6 01       	movw	r30, r12
    8d04:	5e 2d       	mov	r21, r14
    8d06:	0e 94 4a e8 	call	0x1d094	; 0x1d094 <__xload_1>
    8d0a:	66 23       	and	r22, r22
    8d0c:	89 f0       	breq	.+34     	; 0x8d30 <_printf_fn+0x7c2>
    8d0e:	5f ef       	ldi	r21, 0xFF	; 255
    8d10:	c5 1a       	sub	r12, r21
    8d12:	d5 0a       	sbc	r13, r21
    8d14:	e5 0a       	sbc	r14, r21
    8d16:	a5 96       	adiw	r28, 0x25	; 37
    8d18:	ae ad       	ldd	r26, Y+62	; 0x3e
    8d1a:	bf ad       	ldd	r27, Y+63	; 0x3f
    8d1c:	a5 97       	sbiw	r28, 0x25	; 37
    8d1e:	ed 91       	ld	r30, X+
    8d20:	fc 91       	ld	r31, X
    8d22:	11 97       	sbiw	r26, 0x01	; 1
    8d24:	cd 01       	movw	r24, r26
    8d26:	09 95       	icall
    8d28:	6c 14       	cp	r6, r12
    8d2a:	7d 04       	cpc	r7, r13
    8d2c:	8e 04       	cpc	r8, r14
    8d2e:	48 f7       	brcc	.-46     	; 0x8d02 <_printf_fn+0x794>
    8d30:	e8 2c       	mov	r14, r8
    8d32:	63 01       	movw	r12, r6
    8d34:	4b cc       	rjmp	.-1898   	; 0x85cc <_printf_fn+0x5e>
    8d36:	e2 e0       	ldi	r30, 0x02	; 2
    8d38:	f0 e0       	ldi	r31, 0x00	; 0
    8d3a:	6f 96       	adiw	r28, 0x1f	; 31
    8d3c:	ff af       	std	Y+63, r31	; 0x3f
    8d3e:	ee af       	std	Y+62, r30	; 0x3e
    8d40:	6f 97       	sbiw	r28, 0x1f	; 31
    8d42:	57 cd       	rjmp	.-1362   	; 0x87f2 <_printf_fn+0x284>
    8d44:	6f 96       	adiw	r28, 0x1f	; 31
    8d46:	ee ad       	ldd	r30, Y+62	; 0x3e
    8d48:	ff ad       	ldd	r31, Y+63	; 0x3f
    8d4a:	6f 97       	sbiw	r28, 0x1f	; 31
    8d4c:	32 97       	sbiw	r30, 0x02	; 2
    8d4e:	61 f4       	brne	.+24     	; 0x8d68 <_printf_fn+0x7fa>
    8d50:	51 01       	movw	r10, r2
    8d52:	f2 e0       	ldi	r31, 0x02	; 2
    8d54:	af 0e       	add	r10, r31
    8d56:	b1 1c       	adc	r11, r1
    8d58:	d1 01       	movw	r26, r2
    8d5a:	8d 91       	ld	r24, X+
    8d5c:	9c 91       	ld	r25, X
    8d5e:	65 96       	adiw	r28, 0x15	; 21
    8d60:	9f af       	std	Y+63, r25	; 0x3f
    8d62:	8e af       	std	Y+62, r24	; 0x3e
    8d64:	65 97       	sbiw	r28, 0x15	; 21
    8d66:	c5 cd       	rjmp	.-1142   	; 0x88f2 <_printf_fn+0x384>
    8d68:	6f 96       	adiw	r28, 0x1f	; 31
    8d6a:	2e ad       	ldd	r18, Y+62	; 0x3e
    8d6c:	3f ad       	ldd	r19, Y+63	; 0x3f
    8d6e:	6f 97       	sbiw	r28, 0x1f	; 31
    8d70:	24 30       	cpi	r18, 0x04	; 4
    8d72:	31 05       	cpc	r19, r1
    8d74:	09 f0       	breq	.+2      	; 0x8d78 <_printf_fn+0x80a>
    8d76:	fe cd       	rjmp	.-1028   	; 0x8974 <_printf_fn+0x406>
    8d78:	51 01       	movw	r10, r2
    8d7a:	f4 e0       	ldi	r31, 0x04	; 4
    8d7c:	af 0e       	add	r10, r31
    8d7e:	b1 1c       	adc	r11, r1
    8d80:	f1 01       	movw	r30, r2
    8d82:	80 81       	ld	r24, Z
    8d84:	91 81       	ldd	r25, Z+1	; 0x01
    8d86:	a2 81       	ldd	r26, Z+2	; 0x02
    8d88:	b3 81       	ldd	r27, Z+3	; 0x03
    8d8a:	2f 96       	adiw	r28, 0x0f	; 15
    8d8c:	8c af       	std	Y+60, r24	; 0x3c
    8d8e:	9d af       	std	Y+61, r25	; 0x3d
    8d90:	ae af       	std	Y+62, r26	; 0x3e
    8d92:	bf af       	std	Y+63, r27	; 0x3f
    8d94:	2f 97       	sbiw	r28, 0x0f	; 15
    8d96:	dc cd       	rjmp	.-1096   	; 0x8950 <_printf_fn+0x3e2>
    8d98:	c5 59       	subi	r28, 0x95	; 149
    8d9a:	df 4f       	sbci	r29, 0xFF	; 255
    8d9c:	e2 e1       	ldi	r30, 0x12	; 18
    8d9e:	0c 94 2f e8 	jmp	0x1d05e	; 0x1d05e <__epilogue_restores__>

00008da2 <vsnprintf_P>:
    8da2:	a8 e0       	ldi	r26, 0x08	; 8
    8da4:	b0 e0       	ldi	r27, 0x00	; 0
    8da6:	e7 ed       	ldi	r30, 0xD7	; 215
    8da8:	f6 e4       	ldi	r31, 0x46	; 70
    8daa:	0c 94 1f e8 	jmp	0x1d03e	; 0x1d03e <__prologue_saves__+0x18>
    8dae:	7c 01       	movw	r14, r24
    8db0:	cb 01       	movw	r24, r22
    8db2:	64 2f       	mov	r22, r20
    8db4:	a9 01       	movw	r20, r18
    8db6:	98 01       	movw	r18, r16
    8db8:	f7 01       	movw	r30, r14
    8dba:	10 82       	st	Z, r1
    8dbc:	ee ed       	ldi	r30, 0xDE	; 222
    8dbe:	fe e3       	ldi	r31, 0x3E	; 62
    8dc0:	fa 83       	std	Y+2, r31	; 0x02
    8dc2:	e9 83       	std	Y+1, r30	; 0x01
    8dc4:	9e 83       	std	Y+6, r25	; 0x06
    8dc6:	8d 83       	std	Y+5, r24	; 0x05
    8dc8:	18 86       	std	Y+8, r1	; 0x08
    8dca:	1f 82       	std	Y+7, r1	; 0x07
    8dcc:	fc 82       	std	Y+4, r15	; 0x04
    8dce:	eb 82       	std	Y+3, r14	; 0x03
    8dd0:	ce 01       	movw	r24, r28
    8dd2:	01 96       	adiw	r24, 0x01	; 1
    8dd4:	cc db       	rcall	.-2152   	; 0x856e <_printf_fn>
    8dd6:	f7 01       	movw	r30, r14
    8dd8:	01 90       	ld	r0, Z+
    8dda:	00 20       	and	r0, r0
    8ddc:	e9 f7       	brne	.-6      	; 0x8dd8 <vsnprintf_P+0x36>
    8dde:	cf 01       	movw	r24, r30
    8de0:	01 97       	sbiw	r24, 0x01	; 1
    8de2:	8e 19       	sub	r24, r14
    8de4:	9f 09       	sbc	r25, r15
    8de6:	28 96       	adiw	r28, 0x08	; 8
    8de8:	e6 e0       	ldi	r30, 0x06	; 6
    8dea:	0c 94 3b e8 	jmp	0x1d076	; 0x1d076 <__epilogue_restores__+0x18>

00008dee <snprintf_P>:
    8dee:	a0 e0       	ldi	r26, 0x00	; 0
    8df0:	b0 e0       	ldi	r27, 0x00	; 0
    8df2:	ed ef       	ldi	r30, 0xFD	; 253
    8df4:	f6 e4       	ldi	r31, 0x46	; 70
    8df6:	0c 94 21 e8 	jmp	0x1d042	; 0x1d042 <__prologue_saves__+0x1c>
    8dfa:	8e 01       	movw	r16, r28
    8dfc:	02 5f       	subi	r16, 0xF2	; 242
    8dfe:	1f 4f       	sbci	r17, 0xFF	; 255
    8e00:	2b 85       	ldd	r18, Y+11	; 0x0b
    8e02:	3c 85       	ldd	r19, Y+12	; 0x0c
    8e04:	4d 85       	ldd	r20, Y+13	; 0x0d
    8e06:	69 85       	ldd	r22, Y+9	; 0x09
    8e08:	7a 85       	ldd	r23, Y+10	; 0x0a
    8e0a:	8f 81       	ldd	r24, Y+7	; 0x07
    8e0c:	98 85       	ldd	r25, Y+8	; 0x08
    8e0e:	c9 df       	rcall	.-110    	; 0x8da2 <vsnprintf_P>
    8e10:	e4 e0       	ldi	r30, 0x04	; 4
    8e12:	0c 94 3d e8 	jmp	0x1d07a	; 0x1d07a <__epilogue_restores__+0x1c>

00008e16 <sprintf_P>:
    8e16:	a0 e0       	ldi	r26, 0x00	; 0
    8e18:	b0 e0       	ldi	r27, 0x00	; 0
    8e1a:	e1 e1       	ldi	r30, 0x11	; 17
    8e1c:	f7 e4       	ldi	r31, 0x47	; 71
    8e1e:	0c 94 21 e8 	jmp	0x1d042	; 0x1d042 <__prologue_saves__+0x1c>
    8e22:	8e 01       	movw	r16, r28
    8e24:	04 5f       	subi	r16, 0xF4	; 244
    8e26:	1f 4f       	sbci	r17, 0xFF	; 255
    8e28:	29 85       	ldd	r18, Y+9	; 0x09
    8e2a:	3a 85       	ldd	r19, Y+10	; 0x0a
    8e2c:	4b 85       	ldd	r20, Y+11	; 0x0b
    8e2e:	60 e0       	ldi	r22, 0x00	; 0
    8e30:	74 e0       	ldi	r23, 0x04	; 4
    8e32:	8f 81       	ldd	r24, Y+7	; 0x07
    8e34:	98 85       	ldd	r25, Y+8	; 0x08
    8e36:	b5 df       	rcall	.-150    	; 0x8da2 <vsnprintf_P>
    8e38:	e4 e0       	ldi	r30, 0x04	; 4
    8e3a:	0c 94 3d e8 	jmp	0x1d07a	; 0x1d07a <__epilogue_restores__+0x1c>

00008e3e <printf_P>:
/// @return size of printed string
/// TODO create a devprintf using an array of function prointers ?
MEMSPACE 
int 
printf_P(__memx const char *format, ...)
{
    8e3e:	a8 e0       	ldi	r26, 0x08	; 8
    8e40:	b0 e0       	ldi	r27, 0x00	; 0
    8e42:	e5 e2       	ldi	r30, 0x25	; 37
    8e44:	f7 e4       	ldi	r31, 0x47	; 71
    8e46:	0c 94 23 e8 	jmp	0x1d046	; 0x1d046 <__prologue_saves__+0x20>
    8e4a:	9e 01       	movw	r18, r28
    8e4c:	23 5f       	subi	r18, 0xF3	; 243
    8e4e:	3f 4f       	sbci	r19, 0xFF	; 255
    8e50:	f9 01       	movw	r30, r18
    8e52:	41 91       	ld	r20, Z+
    8e54:	51 91       	ld	r21, Z+
    8e56:	61 91       	ld	r22, Z+
    8e58:	9f 01       	movw	r18, r30
    printf_t fn;
    va_list va;

    fn.put = _putc_fn;
    8e5a:	87 ef       	ldi	r24, 0xF7	; 247
    8e5c:	9e e3       	ldi	r25, 0x3E	; 62
    8e5e:	9a 83       	std	Y+2, r25	; 0x02
    8e60:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    8e62:	18 86       	std	Y+8, r1	; 0x08
    8e64:	1f 82       	std	Y+7, r1	; 0x07

    va_start(va, format);
    _printf_fn(&fn, format, va);
    8e66:	ce 01       	movw	r24, r28
    8e68:	01 96       	adiw	r24, 0x01	; 1
    8e6a:	81 db       	rcall	.-2302   	; 0x856e <_printf_fn>
    va_end(va);

    return ((int)fn.sent);
}
    8e6c:	8f 81       	ldd	r24, Y+7	; 0x07
    8e6e:	98 85       	ldd	r25, Y+8	; 0x08
    8e70:	28 96       	adiw	r28, 0x08	; 8
    8e72:	e2 e0       	ldi	r30, 0x02	; 2
    8e74:	0c 94 3f e8 	jmp	0x1d07e	; 0x1d07e <__epilogue_restores__+0x20>

00008e78 <atodigit>:
    if(sign)
        num = -num;
    if(endptr)
        *endptr = (char *) nptr;
    return(num);
}
    8e78:	9c 01       	movw	r18, r24
    8e7a:	20 53       	subi	r18, 0x30	; 48
    8e7c:	31 09       	sbc	r19, r1
    8e7e:	2a 30       	cpi	r18, 0x0A	; 10
    8e80:	31 05       	cpc	r19, r1
    8e82:	10 f4       	brcc	.+4      	; 0x8e88 <atodigit+0x10>
    8e84:	c9 01       	movw	r24, r18
    8e86:	10 c0       	rjmp	.+32     	; 0x8ea8 <atodigit+0x30>
    8e88:	9c 01       	movw	r18, r24
    8e8a:	21 54       	subi	r18, 0x41	; 65
    8e8c:	31 09       	sbc	r19, r1
    8e8e:	26 30       	cpi	r18, 0x06	; 6
    8e90:	31 05       	cpc	r19, r1
    8e92:	10 f4       	brcc	.+4      	; 0x8e98 <atodigit+0x20>
    8e94:	c7 97       	sbiw	r24, 0x37	; 55
    8e96:	08 c0       	rjmp	.+16     	; 0x8ea8 <atodigit+0x30>
    8e98:	9c 01       	movw	r18, r24
    8e9a:	21 56       	subi	r18, 0x61	; 97
    8e9c:	31 09       	sbc	r19, r1
    8e9e:	26 30       	cpi	r18, 0x06	; 6
    8ea0:	31 05       	cpc	r19, r1
    8ea2:	28 f4       	brcc	.+10     	; 0x8eae <atodigit+0x36>
    8ea4:	87 55       	subi	r24, 0x57	; 87
    8ea6:	91 09       	sbc	r25, r1
    8ea8:	86 17       	cp	r24, r22
    8eaa:	97 07       	cpc	r25, r23
    8eac:	14 f0       	brlt	.+4      	; 0x8eb2 <atodigit+0x3a>
    8eae:	8f ef       	ldi	r24, 0xFF	; 255
    8eb0:	9f ef       	ldi	r25, 0xFF	; 255
    8eb2:	08 95       	ret

00008eb4 <strtol>:
    8eb4:	a0 e0       	ldi	r26, 0x00	; 0
    8eb6:	b0 e0       	ldi	r27, 0x00	; 0
    8eb8:	e0 e6       	ldi	r30, 0x60	; 96
    8eba:	f7 e4       	ldi	r31, 0x47	; 71
    8ebc:	0c 94 13 e8 	jmp	0x1d026	; 0x1d026 <__prologue_saves__>
    8ec0:	2b 01       	movw	r4, r22
    8ec2:	8a 01       	movw	r16, r20
    8ec4:	ec 01       	movw	r28, r24
    8ec6:	28 81       	ld	r18, Y
    8ec8:	01 96       	adiw	r24, 0x01	; 1
    8eca:	20 32       	cpi	r18, 0x20	; 32
    8ecc:	d9 f3       	breq	.-10     	; 0x8ec4 <strtol+0x10>
    8ece:	29 30       	cpi	r18, 0x09	; 9
    8ed0:	c9 f3       	breq	.-14     	; 0x8ec4 <strtol+0x10>
    8ed2:	2d 32       	cpi	r18, 0x2D	; 45
    8ed4:	29 f4       	brne	.+10     	; 0x8ee0 <strtol+0x2c>
    8ed6:	ec 01       	movw	r28, r24
    8ed8:	66 24       	eor	r6, r6
    8eda:	63 94       	inc	r6
    8edc:	71 2c       	mov	r7, r1
    8ede:	05 c0       	rjmp	.+10     	; 0x8eea <strtol+0x36>
    8ee0:	2b 32       	cpi	r18, 0x2B	; 43
    8ee2:	09 f4       	brne	.+2      	; 0x8ee6 <strtol+0x32>
    8ee4:	ec 01       	movw	r28, r24
    8ee6:	61 2c       	mov	r6, r1
    8ee8:	71 2c       	mov	r7, r1
    8eea:	9e 01       	movw	r18, r28
    8eec:	2f 5f       	subi	r18, 0xFF	; 255
    8eee:	3f 4f       	sbci	r19, 0xFF	; 255
    8ef0:	88 81       	ld	r24, Y
    8ef2:	80 33       	cpi	r24, 0x30	; 48
    8ef4:	11 f4       	brne	.+4      	; 0x8efa <strtol+0x46>
    8ef6:	e9 01       	movw	r28, r18
    8ef8:	f8 cf       	rjmp	.-16     	; 0x8eea <strtol+0x36>
    8efa:	c1 2c       	mov	r12, r1
    8efc:	d1 2c       	mov	r13, r1
    8efe:	76 01       	movw	r14, r12
    8f00:	48 01       	movw	r8, r16
    8f02:	01 2e       	mov	r0, r17
    8f04:	00 0c       	add	r0, r0
    8f06:	aa 08       	sbc	r10, r10
    8f08:	bb 08       	sbc	r11, r11
    8f0a:	3c 2e       	mov	r3, r28
    8f0c:	2d 2e       	mov	r2, r29
    8f0e:	89 91       	ld	r24, Y+
    8f10:	88 23       	and	r24, r24
    8f12:	31 f0       	breq	.+12     	; 0x8f20 <strtol+0x6c>
    8f14:	b8 01       	movw	r22, r16
    8f16:	90 e0       	ldi	r25, 0x00	; 0
    8f18:	af df       	rcall	.-162    	; 0x8e78 <atodigit>
    8f1a:	fc 01       	movw	r30, r24
    8f1c:	97 ff       	sbrs	r25, 7
    8f1e:	0c c0       	rjmp	.+24     	; 0x8f38 <strtol+0x84>
    8f20:	61 14       	cp	r6, r1
    8f22:	71 04       	cpc	r7, r1
    8f24:	c1 f0       	breq	.+48     	; 0x8f56 <strtol+0xa2>
    8f26:	f0 94       	com	r15
    8f28:	e0 94       	com	r14
    8f2a:	d0 94       	com	r13
    8f2c:	c0 94       	com	r12
    8f2e:	c1 1c       	adc	r12, r1
    8f30:	d1 1c       	adc	r13, r1
    8f32:	e1 1c       	adc	r14, r1
    8f34:	f1 1c       	adc	r15, r1
    8f36:	0f c0       	rjmp	.+30     	; 0x8f56 <strtol+0xa2>
    8f38:	a5 01       	movw	r20, r10
    8f3a:	94 01       	movw	r18, r8
    8f3c:	c7 01       	movw	r24, r14
    8f3e:	b6 01       	movw	r22, r12
    8f40:	0e 94 4f e7 	call	0x1ce9e	; 0x1ce9e <__mulsi3>
    8f44:	6f 01       	movw	r12, r30
    8f46:	ff 0f       	add	r31, r31
    8f48:	ee 08       	sbc	r14, r14
    8f4a:	ff 08       	sbc	r15, r15
    8f4c:	c6 0e       	add	r12, r22
    8f4e:	d7 1e       	adc	r13, r23
    8f50:	e8 1e       	adc	r14, r24
    8f52:	f9 1e       	adc	r15, r25
    8f54:	da cf       	rjmp	.-76     	; 0x8f0a <strtol+0x56>
    8f56:	41 14       	cp	r4, r1
    8f58:	51 04       	cpc	r5, r1
    8f5a:	19 f0       	breq	.+6      	; 0x8f62 <strtol+0xae>
    8f5c:	f2 01       	movw	r30, r4
    8f5e:	30 82       	st	Z, r3
    8f60:	21 82       	std	Z+1, r2	; 0x01
    8f62:	c7 01       	movw	r24, r14
    8f64:	b6 01       	movw	r22, r12
    8f66:	cd b7       	in	r28, 0x3d	; 61
    8f68:	de b7       	in	r29, 0x3e	; 62
    8f6a:	e2 e1       	ldi	r30, 0x12	; 18
    8f6c:	0c 94 2f e8 	jmp	0x1d05e	; 0x1d05e <__epilogue_restores__>

00008f70 <atoh>:
    8f70:	40 e1       	ldi	r20, 0x10	; 16
    8f72:	50 e0       	ldi	r21, 0x00	; 0
    8f74:	60 e0       	ldi	r22, 0x00	; 0
    8f76:	70 e0       	ldi	r23, 0x00	; 0
    8f78:	9d cf       	rjmp	.-198    	; 0x8eb4 <strtol>
    8f7a:	08 95       	ret

00008f7c <atoi>:
MEMSPACE 
int
atoi(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    8f7c:	4a e0       	ldi	r20, 0x0A	; 10
    8f7e:	50 e0       	ldi	r21, 0x00	; 0
    8f80:	60 e0       	ldi	r22, 0x00	; 0
    8f82:	70 e0       	ldi	r23, 0x00	; 0
    8f84:	97 df       	rcall	.-210    	; 0x8eb4 <strtol>
    return((int)num);
}
    8f86:	cb 01       	movw	r24, r22
    8f88:	08 95       	ret

00008f8a <atol>:
MEMSPACE 
long
atol(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    8f8a:	4a e0       	ldi	r20, 0x0A	; 10
    8f8c:	50 e0       	ldi	r21, 0x00	; 0
    8f8e:	60 e0       	ldi	r22, 0x00	; 0
    8f90:	70 e0       	ldi	r23, 0x00	; 0
    8f92:	90 cf       	rjmp	.-224    	; 0x8eb4 <strtol>
    return(num);
}
    8f94:	08 95       	ret

00008f96 <ld_dword>:
#endif
		if (res != FR_OK) ABORT(fs, res);
	}

	LEAVE_FF(fs, res);
}
    8f96:	fc 01       	movw	r30, r24
    8f98:	62 81       	ldd	r22, Z+2	; 0x02
    8f9a:	73 81       	ldd	r23, Z+3	; 0x03
    8f9c:	cb 01       	movw	r24, r22
    8f9e:	a0 e0       	ldi	r26, 0x00	; 0
    8fa0:	b0 e0       	ldi	r27, 0x00	; 0
    8fa2:	ba 2f       	mov	r27, r26
    8fa4:	a9 2f       	mov	r26, r25
    8fa6:	98 2f       	mov	r25, r24
    8fa8:	88 27       	eor	r24, r24
    8faa:	21 81       	ldd	r18, Z+1	; 0x01
    8fac:	82 2b       	or	r24, r18
    8fae:	ba 2f       	mov	r27, r26
    8fb0:	a9 2f       	mov	r26, r25
    8fb2:	98 2f       	mov	r25, r24
    8fb4:	88 27       	eor	r24, r24
    8fb6:	20 81       	ld	r18, Z
    8fb8:	bc 01       	movw	r22, r24
    8fba:	cd 01       	movw	r24, r26
    8fbc:	62 2b       	or	r22, r18
    8fbe:	08 95       	ret

00008fc0 <st_dword>:
    8fc0:	fc 01       	movw	r30, r24
    8fc2:	40 83       	st	Z, r20
    8fc4:	51 83       	std	Z+1, r21	; 0x01
    8fc6:	62 83       	std	Z+2, r22	; 0x02
    8fc8:	73 83       	std	Z+3, r23	; 0x03
    8fca:	08 95       	ret

00008fcc <mem_set>:
    8fcc:	48 0f       	add	r20, r24
    8fce:	59 1f       	adc	r21, r25
    8fd0:	fc 01       	movw	r30, r24
    8fd2:	61 93       	st	Z+, r22
    8fd4:	cf 01       	movw	r24, r30
    8fd6:	e4 17       	cp	r30, r20
    8fd8:	f5 07       	cpc	r31, r21
    8fda:	d1 f7       	brne	.-12     	; 0x8fd0 <mem_set+0x4>
    8fdc:	08 95       	ret

00008fde <clust2sect>:
    8fde:	0f 93       	push	r16
    8fe0:	1f 93       	push	r17
    8fe2:	fc 01       	movw	r30, r24
    8fe4:	9a 01       	movw	r18, r20
    8fe6:	ab 01       	movw	r20, r22
    8fe8:	22 50       	subi	r18, 0x02	; 2
    8fea:	31 09       	sbc	r19, r1
    8fec:	41 09       	sbc	r20, r1
    8fee:	51 09       	sbc	r21, r1
    8ff0:	81 8d       	ldd	r24, Z+25	; 0x19
    8ff2:	92 8d       	ldd	r25, Z+26	; 0x1a
    8ff4:	a3 8d       	ldd	r26, Z+27	; 0x1b
    8ff6:	b4 8d       	ldd	r27, Z+28	; 0x1c
    8ff8:	02 97       	sbiw	r24, 0x02	; 2
    8ffa:	a1 09       	sbc	r26, r1
    8ffc:	b1 09       	sbc	r27, r1
    8ffe:	28 17       	cp	r18, r24
    9000:	39 07       	cpc	r19, r25
    9002:	4a 07       	cpc	r20, r26
    9004:	5b 07       	cpc	r21, r27
    9006:	68 f4       	brcc	.+26     	; 0x9022 <clust2sect+0x44>
    9008:	a1 85       	ldd	r26, Z+9	; 0x09
    900a:	b2 85       	ldd	r27, Z+10	; 0x0a
    900c:	0e 94 f3 e7 	call	0x1cfe6	; 0x1cfe6 <__muluhisi3>
    9010:	05 a5       	ldd	r16, Z+45	; 0x2d
    9012:	16 a5       	ldd	r17, Z+46	; 0x2e
    9014:	27 a5       	ldd	r18, Z+47	; 0x2f
    9016:	30 a9       	ldd	r19, Z+48	; 0x30
    9018:	60 0f       	add	r22, r16
    901a:	71 1f       	adc	r23, r17
    901c:	82 1f       	adc	r24, r18
    901e:	93 1f       	adc	r25, r19
    9020:	03 c0       	rjmp	.+6      	; 0x9028 <clust2sect+0x4a>
    9022:	60 e0       	ldi	r22, 0x00	; 0
    9024:	70 e0       	ldi	r23, 0x00	; 0
    9026:	cb 01       	movw	r24, r22
    9028:	1f 91       	pop	r17
    902a:	0f 91       	pop	r16
    902c:	08 95       	ret

0000902e <clmt_clust>:
    902e:	cf 93       	push	r28
    9030:	df 93       	push	r29
    9032:	fc 01       	movw	r30, r24
    9034:	c2 a1       	ldd	r28, Z+34	; 0x22
    9036:	d3 a1       	ldd	r29, Z+35	; 0x23
    9038:	24 96       	adiw	r28, 0x04	; 4
    903a:	cb 01       	movw	r24, r22
    903c:	ba 01       	movw	r22, r20
    903e:	29 e0       	ldi	r18, 0x09	; 9
    9040:	96 95       	lsr	r25
    9042:	87 95       	ror	r24
    9044:	77 95       	ror	r23
    9046:	67 95       	ror	r22
    9048:	2a 95       	dec	r18
    904a:	d1 f7       	brne	.-12     	; 0x9040 <clmt_clust+0x12>
    904c:	01 90       	ld	r0, Z+
    904e:	f0 81       	ld	r31, Z
    9050:	e0 2d       	mov	r30, r0
    9052:	21 85       	ldd	r18, Z+9	; 0x09
    9054:	32 85       	ldd	r19, Z+10	; 0x0a
    9056:	40 e0       	ldi	r20, 0x00	; 0
    9058:	50 e0       	ldi	r21, 0x00	; 0
    905a:	0e 94 91 e7 	call	0x1cf22	; 0x1cf22 <__udivmodsi4>
    905e:	88 81       	ld	r24, Y
    9060:	99 81       	ldd	r25, Y+1	; 0x01
    9062:	aa 81       	ldd	r26, Y+2	; 0x02
    9064:	bb 81       	ldd	r27, Y+3	; 0x03
    9066:	00 97       	sbiw	r24, 0x00	; 0
    9068:	a1 05       	cpc	r26, r1
    906a:	b1 05       	cpc	r27, r1
    906c:	b1 f0       	breq	.+44     	; 0x909a <clmt_clust+0x6c>
    906e:	28 17       	cp	r18, r24
    9070:	39 07       	cpc	r19, r25
    9072:	4a 07       	cpc	r20, r26
    9074:	5b 07       	cpc	r21, r27
    9076:	30 f0       	brcs	.+12     	; 0x9084 <clmt_clust+0x56>
    9078:	28 1b       	sub	r18, r24
    907a:	39 0b       	sbc	r19, r25
    907c:	4a 0b       	sbc	r20, r26
    907e:	5b 0b       	sbc	r21, r27
    9080:	28 96       	adiw	r28, 0x08	; 8
    9082:	ed cf       	rjmp	.-38     	; 0x905e <clmt_clust+0x30>
    9084:	8c 81       	ldd	r24, Y+4	; 0x04
    9086:	9d 81       	ldd	r25, Y+5	; 0x05
    9088:	ae 81       	ldd	r26, Y+6	; 0x06
    908a:	bf 81       	ldd	r27, Y+7	; 0x07
    908c:	bc 01       	movw	r22, r24
    908e:	cd 01       	movw	r24, r26
    9090:	62 0f       	add	r22, r18
    9092:	73 1f       	adc	r23, r19
    9094:	84 1f       	adc	r24, r20
    9096:	95 1f       	adc	r25, r21
    9098:	03 c0       	rjmp	.+6      	; 0x90a0 <clmt_clust+0x72>
    909a:	60 e0       	ldi	r22, 0x00	; 0
    909c:	70 e0       	ldi	r23, 0x00	; 0
    909e:	cb 01       	movw	r24, r22
    90a0:	df 91       	pop	r29
    90a2:	cf 91       	pop	r28
    90a4:	08 95       	ret

000090a6 <sum_sfn>:
    90a6:	fc 01       	movw	r30, r24
    90a8:	9c 01       	movw	r18, r24
    90aa:	25 5f       	subi	r18, 0xF5	; 245
    90ac:	3f 4f       	sbci	r19, 0xFF	; 255
    90ae:	80 e0       	ldi	r24, 0x00	; 0
    90b0:	98 2f       	mov	r25, r24
    90b2:	90 fb       	bst	r25, 0
    90b4:	97 95       	ror	r25
    90b6:	97 f9       	bld	r25, 7
    90b8:	81 91       	ld	r24, Z+
    90ba:	89 0f       	add	r24, r25
    90bc:	e2 17       	cp	r30, r18
    90be:	f3 07       	cpc	r31, r19
    90c0:	b9 f7       	brne	.-18     	; 0x90b0 <sum_sfn+0xa>
    90c2:	08 95       	ret

000090c4 <get_ldnumber>:
    90c4:	dc 01       	movw	r26, r24
    90c6:	ed 91       	ld	r30, X+
    90c8:	fc 91       	ld	r31, X
    90ca:	30 97       	sbiw	r30, 0x00	; 0
    90cc:	c1 f0       	breq	.+48     	; 0x90fe <get_ldnumber+0x3a>
    90ce:	df 01       	movw	r26, r30
    90d0:	9d 01       	movw	r18, r26
    90d2:	4d 91       	ld	r20, X+
    90d4:	40 32       	cpi	r20, 0x20	; 32
    90d6:	80 f0       	brcs	.+32     	; 0x90f8 <get_ldnumber+0x34>
    90d8:	4a 33       	cpi	r20, 0x3A	; 58
    90da:	d1 f7       	brne	.-12     	; 0x90d0 <get_ldnumber+0xc>
    90dc:	af 01       	movw	r20, r30
    90de:	4f 5f       	subi	r20, 0xFF	; 255
    90e0:	5f 4f       	sbci	r21, 0xFF	; 255
    90e2:	24 17       	cp	r18, r20
    90e4:	35 07       	cpc	r19, r21
    90e6:	59 f4       	brne	.+22     	; 0x90fe <get_ldnumber+0x3a>
    90e8:	40 81       	ld	r20, Z
    90ea:	40 33       	cpi	r20, 0x30	; 48
    90ec:	41 f4       	brne	.+16     	; 0x90fe <get_ldnumber+0x3a>
    90ee:	2f 5f       	subi	r18, 0xFF	; 255
    90f0:	3f 4f       	sbci	r19, 0xFF	; 255
    90f2:	fc 01       	movw	r30, r24
    90f4:	31 83       	std	Z+1, r19	; 0x01
    90f6:	20 83       	st	Z, r18
    90f8:	80 e0       	ldi	r24, 0x00	; 0
    90fa:	90 e0       	ldi	r25, 0x00	; 0
    90fc:	08 95       	ret
    90fe:	8f ef       	ldi	r24, 0xFF	; 255
    9100:	9f ef       	ldi	r25, 0xFF	; 255
    9102:	08 95       	ret

00009104 <validate>:
    9104:	0f 93       	push	r16
    9106:	1f 93       	push	r17
    9108:	cf 93       	push	r28
    910a:	df 93       	push	r29
    910c:	ec 01       	movw	r28, r24
    910e:	8b 01       	movw	r16, r22
    9110:	89 2b       	or	r24, r25
    9112:	31 f4       	brne	.+12     	; 0x9120 <validate+0x1c>
    9114:	f8 01       	movw	r30, r16
    9116:	11 82       	std	Z+1, r1	; 0x01
    9118:	10 82       	st	Z, r1
    911a:	89 e0       	ldi	r24, 0x09	; 9
    911c:	90 e0       	ldi	r25, 0x00	; 0
    911e:	1a c0       	rjmp	.+52     	; 0x9154 <validate+0x50>
    9120:	e8 81       	ld	r30, Y
    9122:	f9 81       	ldd	r31, Y+1	; 0x01
    9124:	30 97       	sbiw	r30, 0x00	; 0
    9126:	b1 f3       	breq	.-20     	; 0x9114 <validate+0x10>
    9128:	80 81       	ld	r24, Z
    912a:	88 23       	and	r24, r24
    912c:	99 f3       	breq	.-26     	; 0x9114 <validate+0x10>
    912e:	25 81       	ldd	r18, Z+5	; 0x05
    9130:	36 81       	ldd	r19, Z+6	; 0x06
    9132:	8a 81       	ldd	r24, Y+2	; 0x02
    9134:	9b 81       	ldd	r25, Y+3	; 0x03
    9136:	28 17       	cp	r18, r24
    9138:	39 07       	cpc	r19, r25
    913a:	61 f7       	brne	.-40     	; 0x9114 <validate+0x10>
    913c:	81 81       	ldd	r24, Z+1	; 0x01
    913e:	0e 94 79 69 	call	0xd2f2	; 0xd2f2 <disk_status>
    9142:	80 fd       	sbrc	r24, 0
    9144:	e7 cf       	rjmp	.-50     	; 0x9114 <validate+0x10>
    9146:	88 81       	ld	r24, Y
    9148:	99 81       	ldd	r25, Y+1	; 0x01
    914a:	f8 01       	movw	r30, r16
    914c:	91 83       	std	Z+1, r25	; 0x01
    914e:	80 83       	st	Z, r24
    9150:	80 e0       	ldi	r24, 0x00	; 0
    9152:	90 e0       	ldi	r25, 0x00	; 0
    9154:	df 91       	pop	r29
    9156:	cf 91       	pop	r28
    9158:	1f 91       	pop	r17
    915a:	0f 91       	pop	r16
    915c:	08 95       	ret

0000915e <mem_cpy.part.0>:
    915e:	fb 01       	movw	r30, r22
    9160:	48 0f       	add	r20, r24
    9162:	59 1f       	adc	r21, r25
    9164:	21 91       	ld	r18, Z+
    9166:	dc 01       	movw	r26, r24
    9168:	2d 93       	st	X+, r18
    916a:	cd 01       	movw	r24, r26
    916c:	a4 17       	cp	r26, r20
    916e:	b5 07       	cpc	r27, r21
    9170:	c9 f7       	brne	.-14     	; 0x9164 <mem_cpy.part.0+0x6>
    9172:	08 95       	ret

00009174 <ld_clust.isra.1>:
    9174:	fb 01       	movw	r30, r22
    9176:	42 8d       	ldd	r20, Z+26	; 0x1a
    9178:	53 8d       	ldd	r21, Z+27	; 0x1b
    917a:	60 e0       	ldi	r22, 0x00	; 0
    917c:	70 e0       	ldi	r23, 0x00	; 0
    917e:	83 30       	cpi	r24, 0x03	; 3
    9180:	59 f4       	brne	.+22     	; 0x9198 <ld_clust.isra.1+0x24>
    9182:	84 89       	ldd	r24, Z+20	; 0x14
    9184:	95 89       	ldd	r25, Z+21	; 0x15
    9186:	a0 e0       	ldi	r26, 0x00	; 0
    9188:	b0 e0       	ldi	r27, 0x00	; 0
    918a:	dc 01       	movw	r26, r24
    918c:	99 27       	eor	r25, r25
    918e:	88 27       	eor	r24, r24
    9190:	48 2b       	or	r20, r24
    9192:	59 2b       	or	r21, r25
    9194:	6a 2b       	or	r22, r26
    9196:	7b 2b       	or	r23, r27
    9198:	cb 01       	movw	r24, r22
    919a:	ba 01       	movw	r22, r20
    919c:	08 95       	ret

0000919e <st_clust.isra.2>:
    919e:	fb 01       	movw	r30, r22
    91a0:	22 8f       	std	Z+26, r18	; 0x1a
    91a2:	33 8f       	std	Z+27, r19	; 0x1b
    91a4:	dc 01       	movw	r26, r24
    91a6:	8c 91       	ld	r24, X
    91a8:	83 30       	cpi	r24, 0x03	; 3
    91aa:	29 f4       	brne	.+10     	; 0x91b6 <st_clust.isra.2+0x18>
    91ac:	ca 01       	movw	r24, r20
    91ae:	aa 27       	eor	r26, r26
    91b0:	bb 27       	eor	r27, r27
    91b2:	84 8b       	std	Z+20, r24	; 0x14
    91b4:	95 8b       	std	Z+21, r25	; 0x15
    91b6:	08 95       	ret

000091b8 <sync_window.part.3>:
    91b8:	a0 e0       	ldi	r26, 0x00	; 0
    91ba:	b0 e0       	ldi	r27, 0x00	; 0
    91bc:	e2 ee       	ldi	r30, 0xE2	; 226
    91be:	f8 e4       	ldi	r31, 0x48	; 72
    91c0:	0c 94 19 e8 	jmp	0x1d032	; 0x1d032 <__prologue_saves__+0xc>
    91c4:	ec 01       	movw	r28, r24
    91c6:	89 a8       	ldd	r8, Y+49	; 0x31
    91c8:	9a a8       	ldd	r9, Y+50	; 0x32
    91ca:	ab a8       	ldd	r10, Y+51	; 0x33
    91cc:	bc a8       	ldd	r11, Y+52	; 0x34
    91ce:	6c 01       	movw	r12, r24
    91d0:	85 e3       	ldi	r24, 0x35	; 53
    91d2:	c8 0e       	add	r12, r24
    91d4:	d1 1c       	adc	r13, r1
    91d6:	01 e0       	ldi	r16, 0x01	; 1
    91d8:	10 e0       	ldi	r17, 0x00	; 0
    91da:	a5 01       	movw	r20, r10
    91dc:	94 01       	movw	r18, r8
    91de:	b6 01       	movw	r22, r12
    91e0:	89 81       	ldd	r24, Y+1	; 0x01
    91e2:	0e 94 95 69 	call	0xd32a	; 0xd32a <disk_write>
    91e6:	89 2b       	or	r24, r25
    91e8:	89 f5       	brne	.+98     	; 0x924c <sync_window.part.3+0x94>
    91ea:	1b 82       	std	Y+3, r1	; 0x03
    91ec:	8d a1       	ldd	r24, Y+37	; 0x25
    91ee:	9e a1       	ldd	r25, Y+38	; 0x26
    91f0:	af a1       	ldd	r26, Y+39	; 0x27
    91f2:	b8 a5       	ldd	r27, Y+40	; 0x28
    91f4:	b5 01       	movw	r22, r10
    91f6:	a4 01       	movw	r20, r8
    91f8:	48 1b       	sub	r20, r24
    91fa:	59 0b       	sbc	r21, r25
    91fc:	6a 0b       	sbc	r22, r26
    91fe:	7b 0b       	sbc	r23, r27
    9200:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9202:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9204:	af 8d       	ldd	r26, Y+31	; 0x1f
    9206:	b8 a1       	ldd	r27, Y+32	; 0x20
    9208:	48 17       	cp	r20, r24
    920a:	59 07       	cpc	r21, r25
    920c:	6a 07       	cpc	r22, r26
    920e:	7b 07       	cpc	r23, r27
    9210:	18 f0       	brcs	.+6      	; 0x9218 <sync_window.part.3+0x60>
    9212:	80 e0       	ldi	r24, 0x00	; 0
    9214:	90 e0       	ldi	r25, 0x00	; 0
    9216:	1c c0       	rjmp	.+56     	; 0x9250 <sync_window.part.3+0x98>
    9218:	ea 80       	ldd	r14, Y+2	; 0x02
    921a:	f1 2c       	mov	r15, r1
    921c:	82 e0       	ldi	r24, 0x02	; 2
    921e:	e8 16       	cp	r14, r24
    9220:	f1 04       	cpc	r15, r1
    9222:	b8 f3       	brcs	.-18     	; 0x9212 <sync_window.part.3+0x5a>
    9224:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9226:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9228:	af 8d       	ldd	r26, Y+31	; 0x1f
    922a:	b8 a1       	ldd	r27, Y+32	; 0x20
    922c:	88 0e       	add	r8, r24
    922e:	99 1e       	adc	r9, r25
    9230:	aa 1e       	adc	r10, r26
    9232:	bb 1e       	adc	r11, r27
    9234:	01 e0       	ldi	r16, 0x01	; 1
    9236:	10 e0       	ldi	r17, 0x00	; 0
    9238:	a5 01       	movw	r20, r10
    923a:	94 01       	movw	r18, r8
    923c:	b6 01       	movw	r22, r12
    923e:	89 81       	ldd	r24, Y+1	; 0x01
    9240:	0e 94 95 69 	call	0xd32a	; 0xd32a <disk_write>
    9244:	81 e0       	ldi	r24, 0x01	; 1
    9246:	e8 1a       	sub	r14, r24
    9248:	f1 08       	sbc	r15, r1
    924a:	e8 cf       	rjmp	.-48     	; 0x921c <sync_window.part.3+0x64>
    924c:	81 e0       	ldi	r24, 0x01	; 1
    924e:	90 e0       	ldi	r25, 0x00	; 0
    9250:	cd b7       	in	r28, 0x3d	; 61
    9252:	de b7       	in	r29, 0x3e	; 62
    9254:	ec e0       	ldi	r30, 0x0C	; 12
    9256:	0c 94 35 e8 	jmp	0x1d06a	; 0x1d06a <__epilogue_restores__+0xc>

0000925a <sync_window>:
    925a:	fc 01       	movw	r30, r24
    925c:	23 81       	ldd	r18, Z+3	; 0x03
    925e:	22 23       	and	r18, r18
    9260:	11 f0       	breq	.+4      	; 0x9266 <sync_window+0xc>
    9262:	aa cf       	rjmp	.-172    	; 0x91b8 <sync_window.part.3>
    9264:	08 95       	ret
    9266:	80 e0       	ldi	r24, 0x00	; 0
    9268:	90 e0       	ldi	r25, 0x00	; 0
    926a:	08 95       	ret

0000926c <sync_fs>:
    926c:	ef 92       	push	r14
    926e:	ff 92       	push	r15
    9270:	0f 93       	push	r16
    9272:	1f 93       	push	r17
    9274:	cf 93       	push	r28
    9276:	df 93       	push	r29
    9278:	ec 01       	movw	r28, r24
    927a:	ef df       	rcall	.-34     	; 0x925a <sync_window>
    927c:	00 97       	sbiw	r24, 0x00	; 0
    927e:	09 f0       	breq	.+2      	; 0x9282 <sync_fs+0x16>
    9280:	5c c0       	rjmp	.+184    	; 0x933a <sync_fs+0xce>
    9282:	88 81       	ld	r24, Y
    9284:	83 30       	cpi	r24, 0x03	; 3
    9286:	09 f0       	breq	.+2      	; 0x928a <sync_fs+0x1e>
    9288:	4b c0       	rjmp	.+150    	; 0x9320 <sync_fs+0xb4>
    928a:	8c 81       	ldd	r24, Y+4	; 0x04
    928c:	81 30       	cpi	r24, 0x01	; 1
    928e:	09 f0       	breq	.+2      	; 0x9292 <sync_fs+0x26>
    9290:	47 c0       	rjmp	.+142    	; 0x9320 <sync_fs+0xb4>
    9292:	40 e0       	ldi	r20, 0x00	; 0
    9294:	52 e0       	ldi	r21, 0x02	; 2
    9296:	60 e0       	ldi	r22, 0x00	; 0
    9298:	70 e0       	ldi	r23, 0x00	; 0
    929a:	7e 01       	movw	r14, r28
    929c:	85 e3       	ldi	r24, 0x35	; 53
    929e:	e8 0e       	add	r14, r24
    92a0:	f1 1c       	adc	r15, r1
    92a2:	c7 01       	movw	r24, r14
    92a4:	93 de       	rcall	.-730    	; 0x8fcc <mem_set>
    92a6:	85 e5       	ldi	r24, 0x55	; 85
    92a8:	fe 01       	movw	r30, r28
    92aa:	ed 5c       	subi	r30, 0xCD	; 205
    92ac:	fd 4f       	sbci	r31, 0xFD	; 253
    92ae:	80 83       	st	Z, r24
    92b0:	8a ea       	ldi	r24, 0xAA	; 170
    92b2:	31 96       	adiw	r30, 0x01	; 1
    92b4:	80 83       	st	Z, r24
    92b6:	82 e5       	ldi	r24, 0x52	; 82
    92b8:	8d ab       	std	Y+53, r24	; 0x35
    92ba:	8e ab       	std	Y+54, r24	; 0x36
    92bc:	81 e6       	ldi	r24, 0x61	; 97
    92be:	8f ab       	std	Y+55, r24	; 0x37
    92c0:	91 e4       	ldi	r25, 0x41	; 65
    92c2:	98 af       	std	Y+56, r25	; 0x38
    92c4:	22 e7       	ldi	r18, 0x72	; 114
    92c6:	7b 97       	sbiw	r30, 0x1b	; 27
    92c8:	20 83       	st	Z, r18
    92ca:	31 96       	adiw	r30, 0x01	; 1
    92cc:	20 83       	st	Z, r18
    92ce:	31 96       	adiw	r30, 0x01	; 1
    92d0:	90 83       	st	Z, r25
    92d2:	31 96       	adiw	r30, 0x01	; 1
    92d4:	80 83       	st	Z, r24
    92d6:	49 89       	ldd	r20, Y+17	; 0x11
    92d8:	5a 89       	ldd	r21, Y+18	; 0x12
    92da:	6b 89       	ldd	r22, Y+19	; 0x13
    92dc:	7c 89       	ldd	r23, Y+20	; 0x14
    92de:	ce 01       	movw	r24, r28
    92e0:	83 5e       	subi	r24, 0xE3	; 227
    92e2:	9d 4f       	sbci	r25, 0xFD	; 253
    92e4:	6d de       	rcall	.-806    	; 0x8fc0 <st_dword>
    92e6:	4d 85       	ldd	r20, Y+13	; 0x0d
    92e8:	5e 85       	ldd	r21, Y+14	; 0x0e
    92ea:	6f 85       	ldd	r22, Y+15	; 0x0f
    92ec:	78 89       	ldd	r23, Y+16	; 0x10
    92ee:	ce 01       	movw	r24, r28
    92f0:	8f 5d       	subi	r24, 0xDF	; 223
    92f2:	9d 4f       	sbci	r25, 0xFD	; 253
    92f4:	65 de       	rcall	.-822    	; 0x8fc0 <st_dword>
    92f6:	89 a1       	ldd	r24, Y+33	; 0x21
    92f8:	9a a1       	ldd	r25, Y+34	; 0x22
    92fa:	ab a1       	ldd	r26, Y+35	; 0x23
    92fc:	bc a1       	ldd	r27, Y+36	; 0x24
    92fe:	9c 01       	movw	r18, r24
    9300:	ad 01       	movw	r20, r26
    9302:	2f 5f       	subi	r18, 0xFF	; 255
    9304:	3f 4f       	sbci	r19, 0xFF	; 255
    9306:	4f 4f       	sbci	r20, 0xFF	; 255
    9308:	5f 4f       	sbci	r21, 0xFF	; 255
    930a:	29 ab       	std	Y+49, r18	; 0x31
    930c:	3a ab       	std	Y+50, r19	; 0x32
    930e:	4b ab       	std	Y+51, r20	; 0x33
    9310:	5c ab       	std	Y+52, r21	; 0x34
    9312:	01 e0       	ldi	r16, 0x01	; 1
    9314:	10 e0       	ldi	r17, 0x00	; 0
    9316:	b7 01       	movw	r22, r14
    9318:	89 81       	ldd	r24, Y+1	; 0x01
    931a:	0e 94 95 69 	call	0xd32a	; 0xd32a <disk_write>
    931e:	1c 82       	std	Y+4, r1	; 0x04
    9320:	40 e0       	ldi	r20, 0x00	; 0
    9322:	50 e0       	ldi	r21, 0x00	; 0
    9324:	60 e0       	ldi	r22, 0x00	; 0
    9326:	89 81       	ldd	r24, Y+1	; 0x01
    9328:	0e 94 a5 69 	call	0xd34a	; 0xd34a <disk_ioctl>
    932c:	31 e0       	ldi	r19, 0x01	; 1
    932e:	20 e0       	ldi	r18, 0x00	; 0
    9330:	89 2b       	or	r24, r25
    9332:	09 f4       	brne	.+2      	; 0x9336 <sync_fs+0xca>
    9334:	30 e0       	ldi	r19, 0x00	; 0
    9336:	83 2f       	mov	r24, r19
    9338:	92 2f       	mov	r25, r18
    933a:	cd b7       	in	r28, 0x3d	; 61
    933c:	de b7       	in	r29, 0x3e	; 62
    933e:	e6 e0       	ldi	r30, 0x06	; 6
    9340:	0c 94 3b e8 	jmp	0x1d076	; 0x1d076 <__epilogue_restores__+0x18>

00009344 <move_window>:
    9344:	8f 92       	push	r8
    9346:	9f 92       	push	r9
    9348:	af 92       	push	r10
    934a:	bf 92       	push	r11
    934c:	ef 92       	push	r14
    934e:	ff 92       	push	r15
    9350:	0f 93       	push	r16
    9352:	1f 93       	push	r17
    9354:	cf 93       	push	r28
    9356:	df 93       	push	r29
    9358:	ec 01       	movw	r28, r24
    935a:	4a 01       	movw	r8, r20
    935c:	5b 01       	movw	r10, r22
    935e:	89 a9       	ldd	r24, Y+49	; 0x31
    9360:	9a a9       	ldd	r25, Y+50	; 0x32
    9362:	ab a9       	ldd	r26, Y+51	; 0x33
    9364:	bc a9       	ldd	r27, Y+52	; 0x34
    9366:	84 17       	cp	r24, r20
    9368:	95 07       	cpc	r25, r21
    936a:	a6 07       	cpc	r26, r22
    936c:	b7 07       	cpc	r27, r23
    936e:	e9 f0       	breq	.+58     	; 0x93aa <move_window+0x66>
    9370:	ce 01       	movw	r24, r28
    9372:	73 df       	rcall	.-282    	; 0x925a <sync_window>
    9374:	7c 01       	movw	r14, r24
    9376:	89 2b       	or	r24, r25
    9378:	d1 f4       	brne	.+52     	; 0x93ae <move_window+0x6a>
    937a:	01 e0       	ldi	r16, 0x01	; 1
    937c:	10 e0       	ldi	r17, 0x00	; 0
    937e:	a5 01       	movw	r20, r10
    9380:	94 01       	movw	r18, r8
    9382:	be 01       	movw	r22, r28
    9384:	6b 5c       	subi	r22, 0xCB	; 203
    9386:	7f 4f       	sbci	r23, 0xFF	; 255
    9388:	89 81       	ldd	r24, Y+1	; 0x01
    938a:	0e 94 85 69 	call	0xd30a	; 0xd30a <disk_read>
    938e:	89 2b       	or	r24, r25
    9390:	39 f0       	breq	.+14     	; 0x93a0 <move_window+0x5c>
    9392:	ee 24       	eor	r14, r14
    9394:	e3 94       	inc	r14
    9396:	f1 2c       	mov	r15, r1
    9398:	88 24       	eor	r8, r8
    939a:	8a 94       	dec	r8
    939c:	98 2c       	mov	r9, r8
    939e:	54 01       	movw	r10, r8
    93a0:	89 aa       	std	Y+49, r8	; 0x31
    93a2:	9a aa       	std	Y+50, r9	; 0x32
    93a4:	ab aa       	std	Y+51, r10	; 0x33
    93a6:	bc aa       	std	Y+52, r11	; 0x34
    93a8:	02 c0       	rjmp	.+4      	; 0x93ae <move_window+0x6a>
    93aa:	e1 2c       	mov	r14, r1
    93ac:	f1 2c       	mov	r15, r1
    93ae:	c7 01       	movw	r24, r14
    93b0:	df 91       	pop	r29
    93b2:	cf 91       	pop	r28
    93b4:	1f 91       	pop	r17
    93b6:	0f 91       	pop	r16
    93b8:	ff 90       	pop	r15
    93ba:	ef 90       	pop	r14
    93bc:	bf 90       	pop	r11
    93be:	af 90       	pop	r10
    93c0:	9f 90       	pop	r9
    93c2:	8f 90       	pop	r8
    93c4:	08 95       	ret

000093c6 <check_fs>:
    93c6:	cf 93       	push	r28
    93c8:	df 93       	push	r29
    93ca:	ec 01       	movw	r28, r24
    93cc:	1b 82       	std	Y+3, r1	; 0x03
    93ce:	8f ef       	ldi	r24, 0xFF	; 255
    93d0:	9f ef       	ldi	r25, 0xFF	; 255
    93d2:	dc 01       	movw	r26, r24
    93d4:	89 ab       	std	Y+49, r24	; 0x31
    93d6:	9a ab       	std	Y+50, r25	; 0x32
    93d8:	ab ab       	std	Y+51, r26	; 0x33
    93da:	bc ab       	std	Y+52, r27	; 0x34
    93dc:	ce 01       	movw	r24, r28
    93de:	b2 df       	rcall	.-156    	; 0x9344 <move_window>
    93e0:	89 2b       	or	r24, r25
    93e2:	31 f5       	brne	.+76     	; 0x9430 <check_fs+0x6a>
    93e4:	fe 01       	movw	r30, r28
    93e6:	ed 5c       	subi	r30, 0xCD	; 205
    93e8:	fd 4f       	sbci	r31, 0xFD	; 253
    93ea:	80 81       	ld	r24, Z
    93ec:	91 81       	ldd	r25, Z+1	; 0x01
    93ee:	85 35       	cpi	r24, 0x55	; 85
    93f0:	9a 4a       	sbci	r25, 0xAA	; 170
    93f2:	01 f5       	brne	.+64     	; 0x9434 <check_fs+0x6e>
    93f4:	8d a9       	ldd	r24, Y+53	; 0x35
    93f6:	89 3e       	cpi	r24, 0xE9	; 233
    93f8:	29 f0       	breq	.+10     	; 0x9404 <check_fs+0x3e>
    93fa:	8b 3e       	cpi	r24, 0xEB	; 235
    93fc:	f9 f4       	brne	.+62     	; 0x943c <check_fs+0x76>
    93fe:	8f a9       	ldd	r24, Y+55	; 0x37
    9400:	80 39       	cpi	r24, 0x90	; 144
    9402:	e1 f4       	brne	.+56     	; 0x943c <check_fs+0x76>
    9404:	ce 01       	movw	r24, r28
    9406:	85 59       	subi	r24, 0x95	; 149
    9408:	9f 4f       	sbci	r25, 0xFF	; 255
    940a:	c5 dd       	rcall	.-1142   	; 0x8f96 <ld_dword>
    940c:	dc 01       	movw	r26, r24
    940e:	cb 01       	movw	r24, r22
    9410:	bb 27       	eor	r27, r27
    9412:	86 34       	cpi	r24, 0x46	; 70
    9414:	91 44       	sbci	r25, 0x41	; 65
    9416:	a4 45       	sbci	r26, 0x54	; 84
    9418:	b1 05       	cpc	r27, r1
    941a:	71 f0       	breq	.+28     	; 0x9438 <check_fs+0x72>
    941c:	ce 01       	movw	r24, r28
    941e:	89 57       	subi	r24, 0x79	; 121
    9420:	9f 4f       	sbci	r25, 0xFF	; 255
    9422:	b9 dd       	rcall	.-1166   	; 0x8f96 <ld_dword>
    9424:	66 34       	cpi	r22, 0x46	; 70
    9426:	71 44       	sbci	r23, 0x41	; 65
    9428:	84 45       	sbci	r24, 0x54	; 84
    942a:	93 43       	sbci	r25, 0x33	; 51
    942c:	39 f4       	brne	.+14     	; 0x943c <check_fs+0x76>
    942e:	04 c0       	rjmp	.+8      	; 0x9438 <check_fs+0x72>
    9430:	84 e0       	ldi	r24, 0x04	; 4
    9432:	05 c0       	rjmp	.+10     	; 0x943e <check_fs+0x78>
    9434:	83 e0       	ldi	r24, 0x03	; 3
    9436:	03 c0       	rjmp	.+6      	; 0x943e <check_fs+0x78>
    9438:	80 e0       	ldi	r24, 0x00	; 0
    943a:	01 c0       	rjmp	.+2      	; 0x943e <check_fs+0x78>
    943c:	82 e0       	ldi	r24, 0x02	; 2
    943e:	df 91       	pop	r29
    9440:	cf 91       	pop	r28
    9442:	08 95       	ret

00009444 <find_volume>:
    9444:	ad e1       	ldi	r26, 0x1D	; 29
    9446:	b0 e0       	ldi	r27, 0x00	; 0
    9448:	e8 e2       	ldi	r30, 0x28	; 40
    944a:	fa e4       	ldi	r31, 0x4A	; 74
    944c:	0c 94 13 e8 	jmp	0x1d026	; 0x1d026 <__prologue_saves__>
    9450:	5b 01       	movw	r10, r22
    9452:	f4 2e       	mov	r15, r20
    9454:	db 01       	movw	r26, r22
    9456:	1d 92       	st	X+, r1
    9458:	1c 92       	st	X, r1
    945a:	34 de       	rcall	.-920    	; 0x90c4 <get_ldnumber>
    945c:	6c 01       	movw	r12, r24
    945e:	97 fd       	sbrc	r25, 7
    9460:	1b c2       	rjmp	.+1078   	; 0x9898 <find_volume+0x454>
    9462:	fc 01       	movw	r30, r24
    9464:	ee 0f       	add	r30, r30
    9466:	ff 1f       	adc	r31, r31
    9468:	ea 5c       	subi	r30, 0xCA	; 202
    946a:	f7 4e       	sbci	r31, 0xE7	; 231
    946c:	00 81       	ld	r16, Z
    946e:	11 81       	ldd	r17, Z+1	; 0x01
    9470:	01 15       	cp	r16, r1
    9472:	11 05       	cpc	r17, r1
    9474:	09 f4       	brne	.+2      	; 0x9478 <find_volume+0x34>
    9476:	13 c2       	rjmp	.+1062   	; 0x989e <find_volume+0x45a>
    9478:	f5 01       	movw	r30, r10
    947a:	11 83       	std	Z+1, r17	; 0x01
    947c:	00 83       	st	Z, r16
    947e:	ff 2d       	mov	r31, r15
    9480:	fe 7f       	andi	r31, 0xFE	; 254
    9482:	ff 2e       	mov	r15, r31
    9484:	d8 01       	movw	r26, r16
    9486:	8c 91       	ld	r24, X
    9488:	88 23       	and	r24, r24
    948a:	71 f0       	breq	.+28     	; 0x94a8 <find_volume+0x64>
    948c:	11 96       	adiw	r26, 0x01	; 1
    948e:	8c 91       	ld	r24, X
    9490:	0e 94 79 69 	call	0xd2f2	; 0xd2f2 <disk_status>
    9494:	80 fd       	sbrc	r24, 0
    9496:	08 c0       	rjmp	.+16     	; 0x94a8 <find_volume+0x64>
    9498:	ff 20       	and	r15, r15
    949a:	09 f4       	brne	.+2      	; 0x949e <find_volume+0x5a>
    949c:	03 c2       	rjmp	.+1030   	; 0x98a4 <find_volume+0x460>
    949e:	82 ff       	sbrs	r24, 2
    94a0:	01 c2       	rjmp	.+1026   	; 0x98a4 <find_volume+0x460>
    94a2:	8a e0       	ldi	r24, 0x0A	; 10
    94a4:	90 e0       	ldi	r25, 0x00	; 0
    94a6:	73 c2       	rjmp	.+1254   	; 0x998e <find_volume+0x54a>
    94a8:	f8 01       	movw	r30, r16
    94aa:	10 82       	st	Z, r1
    94ac:	c1 82       	std	Z+1, r12	; 0x01
    94ae:	8c 2d       	mov	r24, r12
    94b0:	0e 94 7f 69 	call	0xd2fe	; 0xd2fe <disk_initialize>
    94b4:	80 fd       	sbrc	r24, 0
    94b6:	f9 c1       	rjmp	.+1010   	; 0x98aa <find_volume+0x466>
    94b8:	ff 20       	and	r15, r15
    94ba:	11 f0       	breq	.+4      	; 0x94c0 <find_volume+0x7c>
    94bc:	82 fd       	sbrc	r24, 2
    94be:	f1 cf       	rjmp	.-30     	; 0x94a2 <find_volume+0x5e>
    94c0:	40 e0       	ldi	r20, 0x00	; 0
    94c2:	50 e0       	ldi	r21, 0x00	; 0
    94c4:	ba 01       	movw	r22, r20
    94c6:	c8 01       	movw	r24, r16
    94c8:	7e df       	rcall	.-260    	; 0x93c6 <check_fs>
    94ca:	82 30       	cpi	r24, 0x02	; 2
    94cc:	09 f0       	breq	.+2      	; 0x94d0 <find_volume+0x8c>
    94ce:	41 c0       	rjmp	.+130    	; 0x9552 <find_volume+0x10e>
    94d0:	9e 01       	movw	r18, r28
    94d2:	2f 5f       	subi	r18, 0xFF	; 255
    94d4:	3f 4f       	sbci	r19, 0xFF	; 255
    94d6:	79 01       	movw	r14, r18
    94d8:	68 01       	movw	r12, r16
    94da:	35 e0       	ldi	r19, 0x05	; 5
    94dc:	c3 1a       	sub	r12, r19
    94de:	3e ef       	ldi	r19, 0xFE	; 254
    94e0:	d3 0a       	sbc	r13, r19
    94e2:	48 01       	movw	r8, r16
    94e4:	45 ec       	ldi	r20, 0xC5	; 197
    94e6:	84 1a       	sub	r8, r20
    94e8:	4d ef       	ldi	r20, 0xFD	; 253
    94ea:	94 0a       	sbc	r9, r20
    94ec:	57 01       	movw	r10, r14
    94ee:	f6 01       	movw	r30, r12
    94f0:	34 97       	sbiw	r30, 0x04	; 4
    94f2:	80 81       	ld	r24, Z
    94f4:	88 23       	and	r24, r24
    94f6:	19 f0       	breq	.+6      	; 0x94fe <find_volume+0xba>
    94f8:	c6 01       	movw	r24, r12
    94fa:	4d dd       	rcall	.-1382   	; 0x8f96 <ld_dword>
    94fc:	03 c0       	rjmp	.+6      	; 0x9504 <find_volume+0xc0>
    94fe:	60 e0       	ldi	r22, 0x00	; 0
    9500:	70 e0       	ldi	r23, 0x00	; 0
    9502:	cb 01       	movw	r24, r22
    9504:	d5 01       	movw	r26, r10
    9506:	6d 93       	st	X+, r22
    9508:	7d 93       	st	X+, r23
    950a:	8d 93       	st	X+, r24
    950c:	9d 93       	st	X+, r25
    950e:	5d 01       	movw	r10, r26
    9510:	b0 e1       	ldi	r27, 0x10	; 16
    9512:	cb 0e       	add	r12, r27
    9514:	d1 1c       	adc	r13, r1
    9516:	c8 14       	cp	r12, r8
    9518:	d9 04       	cpc	r13, r9
    951a:	49 f7       	brne	.-46     	; 0x94ee <find_volume+0xaa>
    951c:	6e 01       	movw	r12, r28
    951e:	e1 e1       	ldi	r30, 0x11	; 17
    9520:	ce 0e       	add	r12, r30
    9522:	d1 1c       	adc	r13, r1
    9524:	d7 01       	movw	r26, r14
    9526:	8d 90       	ld	r8, X+
    9528:	9d 90       	ld	r9, X+
    952a:	ad 90       	ld	r10, X+
    952c:	bd 90       	ld	r11, X+
    952e:	7d 01       	movw	r14, r26
    9530:	81 14       	cp	r8, r1
    9532:	91 04       	cpc	r9, r1
    9534:	a1 04       	cpc	r10, r1
    9536:	b1 04       	cpc	r11, r1
    9538:	39 f0       	breq	.+14     	; 0x9548 <find_volume+0x104>
    953a:	b5 01       	movw	r22, r10
    953c:	a4 01       	movw	r20, r8
    953e:	c8 01       	movw	r24, r16
    9540:	42 df       	rcall	.-380    	; 0x93c6 <check_fs>
    9542:	82 30       	cpi	r24, 0x02	; 2
    9544:	10 f4       	brcc	.+4      	; 0x954a <find_volume+0x106>
    9546:	10 c0       	rjmp	.+32     	; 0x9568 <find_volume+0x124>
    9548:	83 e0       	ldi	r24, 0x03	; 3
    954a:	ce 14       	cp	r12, r14
    954c:	df 04       	cpc	r13, r15
    954e:	51 f7       	brne	.-44     	; 0x9524 <find_volume+0xe0>
    9550:	af c1       	rjmp	.+862    	; 0x98b0 <find_volume+0x46c>
    9552:	84 30       	cpi	r24, 0x04	; 4
    9554:	09 f4       	brne	.+2      	; 0x9558 <find_volume+0x114>
    9556:	af c1       	rjmp	.+862    	; 0x98b6 <find_volume+0x472>
    9558:	82 30       	cpi	r24, 0x02	; 2
    955a:	18 f0       	brcs	.+6      	; 0x9562 <find_volume+0x11e>
    955c:	8d e0       	ldi	r24, 0x0D	; 13
    955e:	90 e0       	ldi	r25, 0x00	; 0
    9560:	16 c2       	rjmp	.+1068   	; 0x998e <find_volume+0x54a>
    9562:	81 2c       	mov	r8, r1
    9564:	91 2c       	mov	r9, r1
    9566:	54 01       	movw	r10, r8
    9568:	f8 01       	movw	r30, r16
    956a:	e0 5c       	subi	r30, 0xC0	; 192
    956c:	ff 4f       	sbci	r31, 0xFF	; 255
    956e:	80 81       	ld	r24, Z
    9570:	91 81       	ldd	r25, Z+1	; 0x01
    9572:	81 15       	cp	r24, r1
    9574:	92 40       	sbci	r25, 0x02	; 2
    9576:	91 f7       	brne	.-28     	; 0x955c <find_volume+0x118>
    9578:	3b 96       	adiw	r30, 0x0b	; 11
    957a:	80 81       	ld	r24, Z
    957c:	91 81       	ldd	r25, Z+1	; 0x01
    957e:	00 97       	sbiw	r24, 0x00	; 0
    9580:	41 f0       	breq	.+16     	; 0x9592 <find_volume+0x14e>
    9582:	9c 01       	movw	r18, r24
    9584:	40 e0       	ldi	r20, 0x00	; 0
    9586:	50 e0       	ldi	r21, 0x00	; 0
    9588:	2d 8b       	std	Y+21, r18	; 0x15
    958a:	3e 8b       	std	Y+22, r19	; 0x16
    958c:	4f 8b       	std	Y+23, r20	; 0x17
    958e:	58 8f       	std	Y+24, r21	; 0x18
    9590:	08 c0       	rjmp	.+16     	; 0x95a2 <find_volume+0x15e>
    9592:	c8 01       	movw	r24, r16
    9594:	87 5a       	subi	r24, 0xA7	; 167
    9596:	9f 4f       	sbci	r25, 0xFF	; 255
    9598:	fe dc       	rcall	.-1540   	; 0x8f96 <ld_dword>
    959a:	6d 8b       	std	Y+21, r22	; 0x15
    959c:	7e 8b       	std	Y+22, r23	; 0x16
    959e:	8f 8b       	std	Y+23, r24	; 0x17
    95a0:	98 8f       	std	Y+24, r25	; 0x18
    95a2:	8d 89       	ldd	r24, Y+21	; 0x15
    95a4:	9e 89       	ldd	r25, Y+22	; 0x16
    95a6:	af 89       	ldd	r26, Y+23	; 0x17
    95a8:	b8 8d       	ldd	r27, Y+24	; 0x18
    95aa:	f8 01       	movw	r30, r16
    95ac:	85 8f       	std	Z+29, r24	; 0x1d
    95ae:	96 8f       	std	Z+30, r25	; 0x1e
    95b0:	a7 8f       	std	Z+31, r26	; 0x1f
    95b2:	b0 a3       	std	Z+32, r27	; 0x20
    95b4:	eb 5b       	subi	r30, 0xBB	; 187
    95b6:	ff 4f       	sbci	r31, 0xFF	; 255
    95b8:	70 80       	ld	r7, Z
    95ba:	d8 01       	movw	r26, r16
    95bc:	12 96       	adiw	r26, 0x02	; 2
    95be:	7c 92       	st	X, r7
    95c0:	8f ef       	ldi	r24, 0xFF	; 255
    95c2:	87 0d       	add	r24, r7
    95c4:	82 30       	cpi	r24, 0x02	; 2
    95c6:	50 f6       	brcc	.-108    	; 0x955c <find_volume+0x118>
    95c8:	33 97       	sbiw	r30, 0x03	; 3
    95ca:	b0 81       	ld	r27, Z
    95cc:	b9 8f       	std	Y+25, r27	; 0x19
    95ce:	8b 2f       	mov	r24, r27
    95d0:	90 e0       	ldi	r25, 0x00	; 0
    95d2:	f8 01       	movw	r30, r16
    95d4:	92 87       	std	Z+10, r25	; 0x0a
    95d6:	81 87       	std	Z+9, r24	; 0x09
    95d8:	00 97       	sbiw	r24, 0x00	; 0
    95da:	09 f4       	brne	.+2      	; 0x95de <find_volume+0x19a>
    95dc:	bf cf       	rjmp	.-130    	; 0x955c <find_volume+0x118>
    95de:	9c 01       	movw	r18, r24
    95e0:	21 50       	subi	r18, 0x01	; 1
    95e2:	31 09       	sbc	r19, r1
    95e4:	82 23       	and	r24, r18
    95e6:	93 23       	and	r25, r19
    95e8:	89 2b       	or	r24, r25
    95ea:	09 f0       	breq	.+2      	; 0x95ee <find_volume+0x1aa>
    95ec:	b7 cf       	rjmp	.-146    	; 0x955c <find_volume+0x118>
    95ee:	ea 5b       	subi	r30, 0xBA	; 186
    95f0:	ff 4f       	sbci	r31, 0xFF	; 255
    95f2:	20 80       	ld	r2, Z
    95f4:	31 80       	ldd	r3, Z+1	; 0x01
    95f6:	d8 01       	movw	r26, r16
    95f8:	18 96       	adiw	r26, 0x08	; 8
    95fa:	3c 92       	st	X, r3
    95fc:	2e 92       	st	-X, r2
    95fe:	17 97       	sbiw	r26, 0x07	; 7
    9600:	c1 01       	movw	r24, r2
    9602:	8f 70       	andi	r24, 0x0F	; 15
    9604:	99 27       	eor	r25, r25
    9606:	89 2b       	or	r24, r25
    9608:	09 f0       	breq	.+2      	; 0x960c <find_volume+0x1c8>
    960a:	a8 cf       	rjmp	.-176    	; 0x955c <find_volume+0x118>
    960c:	32 96       	adiw	r30, 0x02	; 2
    960e:	80 81       	ld	r24, Z
    9610:	91 81       	ldd	r25, Z+1	; 0x01
    9612:	6c 01       	movw	r12, r24
    9614:	e1 2c       	mov	r14, r1
    9616:	f1 2c       	mov	r15, r1
    9618:	89 2b       	or	r24, r25
    961a:	31 f4       	brne	.+12     	; 0x9628 <find_volume+0x1e4>
    961c:	c8 01       	movw	r24, r16
    961e:	8b 5a       	subi	r24, 0xAB	; 171
    9620:	9f 4f       	sbci	r25, 0xFF	; 255
    9622:	b9 dc       	rcall	.-1678   	; 0x8f96 <ld_dword>
    9624:	6b 01       	movw	r12, r22
    9626:	7c 01       	movw	r14, r24
    9628:	f8 01       	movw	r30, r16
    962a:	ed 5b       	subi	r30, 0xBD	; 189
    962c:	ff 4f       	sbci	r31, 0xFF	; 255
    962e:	01 90       	ld	r0, Z+
    9630:	f0 81       	ld	r31, Z
    9632:	e0 2d       	mov	r30, r0
    9634:	30 97       	sbiw	r30, 0x00	; 0
    9636:	09 f4       	brne	.+2      	; 0x963a <find_volume+0x1f6>
    9638:	91 cf       	rjmp	.-222    	; 0x955c <find_volume+0x118>
    963a:	a7 2d       	mov	r26, r7
    963c:	b0 e0       	ldi	r27, 0x00	; 0
    963e:	2d 89       	ldd	r18, Y+21	; 0x15
    9640:	3e 89       	ldd	r19, Y+22	; 0x16
    9642:	4f 89       	ldd	r20, Y+23	; 0x17
    9644:	58 8d       	ldd	r21, Y+24	; 0x18
    9646:	0e 94 f3 e7 	call	0x1cfe6	; 0x1cfe6 <__muluhisi3>
    964a:	2b 01       	movw	r4, r22
    964c:	3c 01       	movw	r6, r24
    964e:	9f 01       	movw	r18, r30
    9650:	40 e0       	ldi	r20, 0x00	; 0
    9652:	50 e0       	ldi	r21, 0x00	; 0
    9654:	2a 8f       	std	Y+26, r18	; 0x1a
    9656:	3b 8f       	std	Y+27, r19	; 0x1b
    9658:	4c 8f       	std	Y+28, r20	; 0x1c
    965a:	5d 8f       	std	Y+29, r21	; 0x1d
    965c:	c1 01       	movw	r24, r2
    965e:	e4 e0       	ldi	r30, 0x04	; 4
    9660:	96 95       	lsr	r25
    9662:	87 95       	ror	r24
    9664:	ea 95       	dec	r30
    9666:	e1 f7       	brne	.-8      	; 0x9660 <find_volume+0x21c>
    9668:	ba 01       	movw	r22, r20
    966a:	a9 01       	movw	r20, r18
    966c:	48 0f       	add	r20, r24
    966e:	59 1f       	adc	r21, r25
    9670:	61 1d       	adc	r22, r1
    9672:	71 1d       	adc	r23, r1
    9674:	db 01       	movw	r26, r22
    9676:	ca 01       	movw	r24, r20
    9678:	84 0d       	add	r24, r4
    967a:	95 1d       	adc	r25, r5
    967c:	a6 1d       	adc	r26, r6
    967e:	b7 1d       	adc	r27, r7
    9680:	89 8b       	std	Y+17, r24	; 0x11
    9682:	9a 8b       	std	Y+18, r25	; 0x12
    9684:	ab 8b       	std	Y+19, r26	; 0x13
    9686:	bc 8b       	std	Y+20, r27	; 0x14
    9688:	c8 16       	cp	r12, r24
    968a:	d9 06       	cpc	r13, r25
    968c:	ea 06       	cpc	r14, r26
    968e:	fb 06       	cpc	r15, r27
    9690:	08 f4       	brcc	.+2      	; 0x9694 <find_volume+0x250>
    9692:	64 cf       	rjmp	.-312    	; 0x955c <find_volume+0x118>
    9694:	c7 01       	movw	r24, r14
    9696:	b6 01       	movw	r22, r12
    9698:	29 89       	ldd	r18, Y+17	; 0x11
    969a:	3a 89       	ldd	r19, Y+18	; 0x12
    969c:	4b 89       	ldd	r20, Y+19	; 0x13
    969e:	5c 89       	ldd	r21, Y+20	; 0x14
    96a0:	62 1b       	sub	r22, r18
    96a2:	73 0b       	sbc	r23, r19
    96a4:	84 0b       	sbc	r24, r20
    96a6:	95 0b       	sbc	r25, r21
    96a8:	a9 8d       	ldd	r26, Y+25	; 0x19
    96aa:	2a 2f       	mov	r18, r26
    96ac:	30 e0       	ldi	r19, 0x00	; 0
    96ae:	40 e0       	ldi	r20, 0x00	; 0
    96b0:	50 e0       	ldi	r21, 0x00	; 0
    96b2:	0e 94 91 e7 	call	0x1cf22	; 0x1cf22 <__udivmodsi4>
    96b6:	21 15       	cp	r18, r1
    96b8:	31 05       	cpc	r19, r1
    96ba:	41 05       	cpc	r20, r1
    96bc:	51 05       	cpc	r21, r1
    96be:	09 f4       	brne	.+2      	; 0x96c2 <find_volume+0x27e>
    96c0:	4d cf       	rjmp	.-358    	; 0x955c <find_volume+0x118>
    96c2:	69 01       	movw	r12, r18
    96c4:	7a 01       	movw	r14, r20
    96c6:	b2 e0       	ldi	r27, 0x02	; 2
    96c8:	cb 0e       	add	r12, r27
    96ca:	d1 1c       	adc	r13, r1
    96cc:	e1 1c       	adc	r14, r1
    96ce:	f1 1c       	adc	r15, r1
    96d0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    96d2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    96d4:	ac 8d       	ldd	r26, Y+28	; 0x1c
    96d6:	bd 8d       	ldd	r27, Y+29	; 0x1d
    96d8:	88 0d       	add	r24, r8
    96da:	99 1d       	adc	r25, r9
    96dc:	aa 1d       	adc	r26, r10
    96de:	bb 1d       	adc	r27, r11
    96e0:	8a 8f       	std	Y+26, r24	; 0x1a
    96e2:	9b 8f       	std	Y+27, r25	; 0x1b
    96e4:	ac 8f       	std	Y+28, r26	; 0x1c
    96e6:	bd 8f       	std	Y+29, r27	; 0x1d
    96e8:	89 89       	ldd	r24, Y+17	; 0x11
    96ea:	9a 89       	ldd	r25, Y+18	; 0x12
    96ec:	ab 89       	ldd	r26, Y+19	; 0x13
    96ee:	bc 89       	ldd	r27, Y+20	; 0x14
    96f0:	88 0d       	add	r24, r8
    96f2:	99 1d       	adc	r25, r9
    96f4:	aa 1d       	adc	r26, r10
    96f6:	bb 1d       	adc	r27, r11
    96f8:	89 8b       	std	Y+17, r24	; 0x11
    96fa:	9a 8b       	std	Y+18, r25	; 0x12
    96fc:	ab 8b       	std	Y+19, r26	; 0x13
    96fe:	bc 8b       	std	Y+20, r27	; 0x14
    9700:	26 3f       	cpi	r18, 0xF6	; 246
    9702:	9f ef       	ldi	r25, 0xFF	; 255
    9704:	39 07       	cpc	r19, r25
    9706:	41 05       	cpc	r20, r1
    9708:	51 05       	cpc	r21, r1
    970a:	08 f0       	brcs	.+2      	; 0x970e <find_volume+0x2ca>
    970c:	d7 c0       	rjmp	.+430    	; 0x98bc <find_volume+0x478>
    970e:	f8 01       	movw	r30, r16
    9710:	c1 8e       	std	Z+25, r12	; 0x19
    9712:	d2 8e       	std	Z+26, r13	; 0x1a
    9714:	e3 8e       	std	Z+27, r14	; 0x1b
    9716:	f4 8e       	std	Z+28, r15	; 0x1c
    9718:	26 3f       	cpi	r18, 0xF6	; 246
    971a:	3f 40       	sbci	r19, 0x0F	; 15
    971c:	41 05       	cpc	r20, r1
    971e:	51 05       	cpc	r21, r1
    9720:	08 f0       	brcs	.+2      	; 0x9724 <find_volume+0x2e0>
    9722:	0a c1       	rjmp	.+532    	; 0x9938 <find_volume+0x4f4>
    9724:	81 a2       	std	Z+33, r8	; 0x21
    9726:	92 a2       	std	Z+34, r9	; 0x22
    9728:	a3 a2       	std	Z+35, r10	; 0x23
    972a:	b4 a2       	std	Z+36, r11	; 0x24
    972c:	2a 8d       	ldd	r18, Y+26	; 0x1a
    972e:	3b 8d       	ldd	r19, Y+27	; 0x1b
    9730:	4c 8d       	ldd	r20, Y+28	; 0x1c
    9732:	5d 8d       	ldd	r21, Y+29	; 0x1d
    9734:	25 a3       	std	Z+37, r18	; 0x25
    9736:	36 a3       	std	Z+38, r19	; 0x26
    9738:	47 a3       	std	Z+39, r20	; 0x27
    973a:	50 a7       	std	Z+40, r21	; 0x28
    973c:	29 89       	ldd	r18, Y+17	; 0x11
    973e:	3a 89       	ldd	r19, Y+18	; 0x12
    9740:	4b 89       	ldd	r20, Y+19	; 0x13
    9742:	5c 89       	ldd	r21, Y+20	; 0x14
    9744:	25 a7       	std	Z+45, r18	; 0x2d
    9746:	36 a7       	std	Z+46, r19	; 0x2e
    9748:	47 a7       	std	Z+47, r20	; 0x2f
    974a:	50 ab       	std	Z+48, r21	; 0x30
    974c:	21 14       	cp	r2, r1
    974e:	31 04       	cpc	r3, r1
    9750:	09 f4       	brne	.+2      	; 0x9754 <find_volume+0x310>
    9752:	04 cf       	rjmp	.-504    	; 0x955c <find_volume+0x118>
    9754:	2a 8d       	ldd	r18, Y+26	; 0x1a
    9756:	3b 8d       	ldd	r19, Y+27	; 0x1b
    9758:	4c 8d       	ldd	r20, Y+28	; 0x1c
    975a:	5d 8d       	ldd	r21, Y+29	; 0x1d
    975c:	42 0e       	add	r4, r18
    975e:	53 1e       	adc	r5, r19
    9760:	64 1e       	adc	r6, r20
    9762:	75 1e       	adc	r7, r21
    9764:	41 a6       	std	Z+41, r4	; 0x29
    9766:	52 a6       	std	Z+42, r5	; 0x2a
    9768:	63 a6       	std	Z+43, r6	; 0x2b
    976a:	74 a6       	std	Z+44, r7	; 0x2c
    976c:	a3 e0       	ldi	r26, 0x03	; 3
    976e:	b0 e0       	ldi	r27, 0x00	; 0
    9770:	a7 01       	movw	r20, r14
    9772:	96 01       	movw	r18, r12
    9774:	0e 94 f3 e7 	call	0x1cfe6	; 0x1cfe6 <__muluhisi3>
    9778:	dc 01       	movw	r26, r24
    977a:	cb 01       	movw	r24, r22
    977c:	b6 95       	lsr	r27
    977e:	a7 95       	ror	r26
    9780:	97 95       	ror	r25
    9782:	87 95       	ror	r24
    9784:	e1 e0       	ldi	r30, 0x01	; 1
    9786:	ce 22       	and	r12, r30
    9788:	dd 24       	eor	r13, r13
    978a:	ee 24       	eor	r14, r14
    978c:	ff 24       	eor	r15, r15
    978e:	c8 0e       	add	r12, r24
    9790:	d9 1e       	adc	r13, r25
    9792:	ea 1e       	adc	r14, r26
    9794:	fb 1e       	adc	r15, r27
    9796:	77 24       	eor	r7, r7
    9798:	73 94       	inc	r7
    979a:	ff ef       	ldi	r31, 0xFF	; 255
    979c:	cf 0e       	add	r12, r31
    979e:	f1 e0       	ldi	r31, 0x01	; 1
    97a0:	df 1e       	adc	r13, r31
    97a2:	e1 1c       	adc	r14, r1
    97a4:	f1 1c       	adc	r15, r1
    97a6:	59 e0       	ldi	r21, 0x09	; 9
    97a8:	f6 94       	lsr	r15
    97aa:	e7 94       	ror	r14
    97ac:	d7 94       	ror	r13
    97ae:	c7 94       	ror	r12
    97b0:	5a 95       	dec	r21
    97b2:	d1 f7       	brne	.-12     	; 0x97a8 <find_volume+0x364>
    97b4:	2d 89       	ldd	r18, Y+21	; 0x15
    97b6:	3e 89       	ldd	r19, Y+22	; 0x16
    97b8:	4f 89       	ldd	r20, Y+23	; 0x17
    97ba:	58 8d       	ldd	r21, Y+24	; 0x18
    97bc:	2c 15       	cp	r18, r12
    97be:	3d 05       	cpc	r19, r13
    97c0:	4e 05       	cpc	r20, r14
    97c2:	5f 05       	cpc	r21, r15
    97c4:	08 f4       	brcc	.+2      	; 0x97c8 <find_volume+0x384>
    97c6:	ca ce       	rjmp	.-620    	; 0x955c <find_volume+0x118>
    97c8:	8f ef       	ldi	r24, 0xFF	; 255
    97ca:	9f ef       	ldi	r25, 0xFF	; 255
    97cc:	dc 01       	movw	r26, r24
    97ce:	f8 01       	movw	r30, r16
    97d0:	81 8b       	std	Z+17, r24	; 0x11
    97d2:	92 8b       	std	Z+18, r25	; 0x12
    97d4:	a3 8b       	std	Z+19, r26	; 0x13
    97d6:	b4 8b       	std	Z+20, r27	; 0x14
    97d8:	85 87       	std	Z+13, r24	; 0x0d
    97da:	96 87       	std	Z+14, r25	; 0x0e
    97dc:	a7 87       	std	Z+15, r26	; 0x0f
    97de:	b0 8b       	std	Z+16, r27	; 0x10
    97e0:	80 e8       	ldi	r24, 0x80	; 128
    97e2:	84 83       	std	Z+4, r24	; 0x04
    97e4:	f3 e0       	ldi	r31, 0x03	; 3
    97e6:	7f 12       	cpse	r7, r31
    97e8:	42 c0       	rjmp	.+132    	; 0x986e <find_volume+0x42a>
    97ea:	f8 01       	movw	r30, r16
    97ec:	eb 59       	subi	r30, 0x9B	; 155
    97ee:	ff 4f       	sbci	r31, 0xFF	; 255
    97f0:	80 81       	ld	r24, Z
    97f2:	91 81       	ldd	r25, Z+1	; 0x01
    97f4:	01 97       	sbiw	r24, 0x01	; 1
    97f6:	09 f0       	breq	.+2      	; 0x97fa <find_volume+0x3b6>
    97f8:	3a c0       	rjmp	.+116    	; 0x986e <find_volume+0x42a>
    97fa:	b5 01       	movw	r22, r10
    97fc:	a4 01       	movw	r20, r8
    97fe:	4f 5f       	subi	r20, 0xFF	; 255
    9800:	5f 4f       	sbci	r21, 0xFF	; 255
    9802:	6f 4f       	sbci	r22, 0xFF	; 255
    9804:	7f 4f       	sbci	r23, 0xFF	; 255
    9806:	c8 01       	movw	r24, r16
    9808:	9d dd       	rcall	.-1222   	; 0x9344 <move_window>
    980a:	89 2b       	or	r24, r25
    980c:	81 f5       	brne	.+96     	; 0x986e <find_volume+0x42a>
    980e:	d8 01       	movw	r26, r16
    9810:	14 96       	adiw	r26, 0x04	; 4
    9812:	1c 92       	st	X, r1
    9814:	f8 01       	movw	r30, r16
    9816:	ed 5c       	subi	r30, 0xCD	; 205
    9818:	fd 4f       	sbci	r31, 0xFD	; 253
    981a:	80 81       	ld	r24, Z
    981c:	91 81       	ldd	r25, Z+1	; 0x01
    981e:	85 35       	cpi	r24, 0x55	; 85
    9820:	9a 4a       	sbci	r25, 0xAA	; 170
    9822:	29 f5       	brne	.+74     	; 0x986e <find_volume+0x42a>
    9824:	c8 01       	movw	r24, r16
    9826:	c5 96       	adiw	r24, 0x35	; 53
    9828:	b6 db       	rcall	.-2196   	; 0x8f96 <ld_dword>
    982a:	62 35       	cpi	r22, 0x52	; 82
    982c:	72 45       	sbci	r23, 0x52	; 82
    982e:	81 46       	sbci	r24, 0x61	; 97
    9830:	91 44       	sbci	r25, 0x41	; 65
    9832:	e9 f4       	brne	.+58     	; 0x986e <find_volume+0x42a>
    9834:	c8 01       	movw	r24, r16
    9836:	87 5e       	subi	r24, 0xE7	; 231
    9838:	9d 4f       	sbci	r25, 0xFD	; 253
    983a:	ad db       	rcall	.-2214   	; 0x8f96 <ld_dword>
    983c:	62 37       	cpi	r22, 0x72	; 114
    983e:	72 47       	sbci	r23, 0x72	; 114
    9840:	81 44       	sbci	r24, 0x41	; 65
    9842:	91 46       	sbci	r25, 0x61	; 97
    9844:	a1 f4       	brne	.+40     	; 0x986e <find_volume+0x42a>
    9846:	c8 01       	movw	r24, r16
    9848:	83 5e       	subi	r24, 0xE3	; 227
    984a:	9d 4f       	sbci	r25, 0xFD	; 253
    984c:	a4 db       	rcall	.-2232   	; 0x8f96 <ld_dword>
    984e:	d8 01       	movw	r26, r16
    9850:	51 96       	adiw	r26, 0x11	; 17
    9852:	6d 93       	st	X+, r22
    9854:	7d 93       	st	X+, r23
    9856:	8d 93       	st	X+, r24
    9858:	9c 93       	st	X, r25
    985a:	54 97       	sbiw	r26, 0x14	; 20
    985c:	c8 01       	movw	r24, r16
    985e:	8f 5d       	subi	r24, 0xDF	; 223
    9860:	9d 4f       	sbci	r25, 0xFD	; 253
    9862:	99 db       	rcall	.-2254   	; 0x8f96 <ld_dword>
    9864:	f8 01       	movw	r30, r16
    9866:	65 87       	std	Z+13, r22	; 0x0d
    9868:	76 87       	std	Z+14, r23	; 0x0e
    986a:	87 87       	std	Z+15, r24	; 0x0f
    986c:	90 8b       	std	Z+16, r25	; 0x10
    986e:	d8 01       	movw	r26, r16
    9870:	7c 92       	st	X, r7
    9872:	80 91 34 18 	lds	r24, 0x1834	; 0x801834 <Fsid>
    9876:	90 91 35 18 	lds	r25, 0x1835	; 0x801835 <Fsid+0x1>
    987a:	01 96       	adiw	r24, 0x01	; 1
    987c:	90 93 35 18 	sts	0x1835, r25	; 0x801835 <Fsid+0x1>
    9880:	80 93 34 18 	sts	0x1834, r24	; 0x801834 <Fsid>
    9884:	16 96       	adiw	r26, 0x06	; 6
    9886:	9c 93       	st	X, r25
    9888:	8e 93       	st	-X, r24
    988a:	15 97       	sbiw	r26, 0x05	; 5
    988c:	f8 01       	movw	r30, r16
    988e:	15 8a       	std	Z+21, r1	; 0x15
    9890:	16 8a       	std	Z+22, r1	; 0x16
    9892:	17 8a       	std	Z+23, r1	; 0x17
    9894:	10 8e       	std	Z+24, r1	; 0x18
    9896:	06 c0       	rjmp	.+12     	; 0x98a4 <find_volume+0x460>
    9898:	8b e0       	ldi	r24, 0x0B	; 11
    989a:	90 e0       	ldi	r25, 0x00	; 0
    989c:	78 c0       	rjmp	.+240    	; 0x998e <find_volume+0x54a>
    989e:	8c e0       	ldi	r24, 0x0C	; 12
    98a0:	90 e0       	ldi	r25, 0x00	; 0
    98a2:	75 c0       	rjmp	.+234    	; 0x998e <find_volume+0x54a>
    98a4:	80 e0       	ldi	r24, 0x00	; 0
    98a6:	90 e0       	ldi	r25, 0x00	; 0
    98a8:	72 c0       	rjmp	.+228    	; 0x998e <find_volume+0x54a>
    98aa:	83 e0       	ldi	r24, 0x03	; 3
    98ac:	90 e0       	ldi	r25, 0x00	; 0
    98ae:	6f c0       	rjmp	.+222    	; 0x998e <find_volume+0x54a>
    98b0:	84 30       	cpi	r24, 0x04	; 4
    98b2:	09 f0       	breq	.+2      	; 0x98b6 <find_volume+0x472>
    98b4:	53 ce       	rjmp	.-858    	; 0x955c <find_volume+0x118>
    98b6:	81 e0       	ldi	r24, 0x01	; 1
    98b8:	90 e0       	ldi	r25, 0x00	; 0
    98ba:	69 c0       	rjmp	.+210    	; 0x998e <find_volume+0x54a>
    98bc:	d8 01       	movw	r26, r16
    98be:	59 96       	adiw	r26, 0x19	; 25
    98c0:	cd 92       	st	X+, r12
    98c2:	dd 92       	st	X+, r13
    98c4:	ed 92       	st	X+, r14
    98c6:	fc 92       	st	X, r15
    98c8:	5c 97       	sbiw	r26, 0x1c	; 28
    98ca:	f8 01       	movw	r30, r16
    98cc:	81 a2       	std	Z+33, r8	; 0x21
    98ce:	92 a2       	std	Z+34, r9	; 0x22
    98d0:	a3 a2       	std	Z+35, r10	; 0x23
    98d2:	b4 a2       	std	Z+36, r11	; 0x24
    98d4:	2a 8d       	ldd	r18, Y+26	; 0x1a
    98d6:	3b 8d       	ldd	r19, Y+27	; 0x1b
    98d8:	4c 8d       	ldd	r20, Y+28	; 0x1c
    98da:	5d 8d       	ldd	r21, Y+29	; 0x1d
    98dc:	95 96       	adiw	r26, 0x25	; 37
    98de:	2d 93       	st	X+, r18
    98e0:	3d 93       	st	X+, r19
    98e2:	4d 93       	st	X+, r20
    98e4:	5c 93       	st	X, r21
    98e6:	98 97       	sbiw	r26, 0x28	; 40
    98e8:	29 89       	ldd	r18, Y+17	; 0x11
    98ea:	3a 89       	ldd	r19, Y+18	; 0x12
    98ec:	4b 89       	ldd	r20, Y+19	; 0x13
    98ee:	5c 89       	ldd	r21, Y+20	; 0x14
    98f0:	9d 96       	adiw	r26, 0x2d	; 45
    98f2:	2d 93       	st	X+, r18
    98f4:	3d 93       	st	X+, r19
    98f6:	4d 93       	st	X+, r20
    98f8:	5c 93       	st	X, r21
    98fa:	d0 97       	sbiw	r26, 0x30	; 48
    98fc:	e1 5a       	subi	r30, 0xA1	; 161
    98fe:	ff 4f       	sbci	r31, 0xFF	; 255
    9900:	80 81       	ld	r24, Z
    9902:	91 81       	ldd	r25, Z+1	; 0x01
    9904:	89 2b       	or	r24, r25
    9906:	09 f0       	breq	.+2      	; 0x990a <find_volume+0x4c6>
    9908:	29 ce       	rjmp	.-942    	; 0x955c <find_volume+0x118>
    990a:	21 14       	cp	r2, r1
    990c:	31 04       	cpc	r3, r1
    990e:	09 f0       	breq	.+2      	; 0x9912 <find_volume+0x4ce>
    9910:	25 ce       	rjmp	.-950    	; 0x955c <find_volume+0x118>
    9912:	c8 01       	movw	r24, r16
    9914:	8f 59       	subi	r24, 0x9F	; 159
    9916:	9f 4f       	sbci	r25, 0xFF	; 255
    9918:	3e db       	rcall	.-2436   	; 0x8f96 <ld_dword>
    991a:	f8 01       	movw	r30, r16
    991c:	61 a7       	std	Z+41, r22	; 0x29
    991e:	72 a7       	std	Z+42, r23	; 0x2a
    9920:	83 a7       	std	Z+43, r24	; 0x2b
    9922:	94 a7       	std	Z+44, r25	; 0x2c
    9924:	62 e0       	ldi	r22, 0x02	; 2
    9926:	cc 0c       	add	r12, r12
    9928:	dd 1c       	adc	r13, r13
    992a:	ee 1c       	adc	r14, r14
    992c:	ff 1c       	adc	r15, r15
    992e:	6a 95       	dec	r22
    9930:	d1 f7       	brne	.-12     	; 0x9926 <find_volume+0x4e2>
    9932:	73 e0       	ldi	r23, 0x03	; 3
    9934:	77 2e       	mov	r7, r23
    9936:	31 cf       	rjmp	.-414    	; 0x979a <find_volume+0x356>
    9938:	81 a2       	std	Z+33, r8	; 0x21
    993a:	92 a2       	std	Z+34, r9	; 0x22
    993c:	a3 a2       	std	Z+35, r10	; 0x23
    993e:	b4 a2       	std	Z+36, r11	; 0x24
    9940:	2a 8d       	ldd	r18, Y+26	; 0x1a
    9942:	3b 8d       	ldd	r19, Y+27	; 0x1b
    9944:	4c 8d       	ldd	r20, Y+28	; 0x1c
    9946:	5d 8d       	ldd	r21, Y+29	; 0x1d
    9948:	25 a3       	std	Z+37, r18	; 0x25
    994a:	36 a3       	std	Z+38, r19	; 0x26
    994c:	47 a3       	std	Z+39, r20	; 0x27
    994e:	50 a7       	std	Z+40, r21	; 0x28
    9950:	29 89       	ldd	r18, Y+17	; 0x11
    9952:	3a 89       	ldd	r19, Y+18	; 0x12
    9954:	4b 89       	ldd	r20, Y+19	; 0x13
    9956:	5c 89       	ldd	r21, Y+20	; 0x14
    9958:	25 a7       	std	Z+45, r18	; 0x2d
    995a:	36 a7       	std	Z+46, r19	; 0x2e
    995c:	47 a7       	std	Z+47, r20	; 0x2f
    995e:	50 ab       	std	Z+48, r21	; 0x30
    9960:	21 14       	cp	r2, r1
    9962:	31 04       	cpc	r3, r1
    9964:	09 f4       	brne	.+2      	; 0x9968 <find_volume+0x524>
    9966:	fa cd       	rjmp	.-1036   	; 0x955c <find_volume+0x118>
    9968:	2a 8d       	ldd	r18, Y+26	; 0x1a
    996a:	3b 8d       	ldd	r19, Y+27	; 0x1b
    996c:	4c 8d       	ldd	r20, Y+28	; 0x1c
    996e:	5d 8d       	ldd	r21, Y+29	; 0x1d
    9970:	42 0e       	add	r4, r18
    9972:	53 1e       	adc	r5, r19
    9974:	64 1e       	adc	r6, r20
    9976:	75 1e       	adc	r7, r21
    9978:	41 a6       	std	Z+41, r4	; 0x29
    997a:	52 a6       	std	Z+42, r5	; 0x2a
    997c:	63 a6       	std	Z+43, r6	; 0x2b
    997e:	74 a6       	std	Z+44, r7	; 0x2c
    9980:	cc 0c       	add	r12, r12
    9982:	dd 1c       	adc	r13, r13
    9984:	ee 1c       	adc	r14, r14
    9986:	ff 1c       	adc	r15, r15
    9988:	42 e0       	ldi	r20, 0x02	; 2
    998a:	74 2e       	mov	r7, r20
    998c:	06 cf       	rjmp	.-500    	; 0x979a <find_volume+0x356>
    998e:	6d 96       	adiw	r28, 0x1d	; 29
    9990:	e2 e1       	ldi	r30, 0x12	; 18
    9992:	0c 94 2f e8 	jmp	0x1d05e	; 0x1d05e <__epilogue_restores__>

00009996 <put_fat>:
    9996:	a6 e0       	ldi	r26, 0x06	; 6
    9998:	b0 e0       	ldi	r27, 0x00	; 0
    999a:	e1 ed       	ldi	r30, 0xD1	; 209
    999c:	fc e4       	ldi	r31, 0x4C	; 76
    999e:	0c 94 13 e8 	jmp	0x1d026	; 0x1d026 <__prologue_saves__>
    99a2:	42 30       	cpi	r20, 0x02	; 2
    99a4:	51 05       	cpc	r21, r1
    99a6:	61 05       	cpc	r22, r1
    99a8:	71 05       	cpc	r23, r1
    99aa:	08 f4       	brcc	.+2      	; 0x99ae <put_fat+0x18>
    99ac:	e9 c0       	rjmp	.+466    	; 0x9b80 <put_fat+0x1ea>
    99ae:	dc 01       	movw	r26, r24
    99b0:	59 96       	adiw	r26, 0x19	; 25
    99b2:	cd 90       	ld	r12, X+
    99b4:	dd 90       	ld	r13, X+
    99b6:	ed 90       	ld	r14, X+
    99b8:	fc 90       	ld	r15, X
    99ba:	5c 97       	sbiw	r26, 0x1c	; 28
    99bc:	4c 15       	cp	r20, r12
    99be:	5d 05       	cpc	r21, r13
    99c0:	6e 05       	cpc	r22, r14
    99c2:	7f 05       	cpc	r23, r15
    99c4:	08 f0       	brcs	.+2      	; 0x99c8 <put_fat+0x32>
    99c6:	dc c0       	rjmp	.+440    	; 0x9b80 <put_fat+0x1ea>
    99c8:	28 01       	movw	r4, r16
    99ca:	39 01       	movw	r6, r18
    99cc:	6a 01       	movw	r12, r20
    99ce:	7b 01       	movw	r14, r22
    99d0:	9e 83       	std	Y+6, r25	; 0x06
    99d2:	8d 83       	std	Y+5, r24	; 0x05
    99d4:	fc 01       	movw	r30, r24
    99d6:	80 81       	ld	r24, Z
    99d8:	82 30       	cpi	r24, 0x02	; 2
    99da:	09 f4       	brne	.+2      	; 0x99de <put_fat+0x48>
    99dc:	73 c0       	rjmp	.+230    	; 0x9ac4 <put_fat+0x12e>
    99de:	83 30       	cpi	r24, 0x03	; 3
    99e0:	09 f4       	brne	.+2      	; 0x99e4 <put_fat+0x4e>
    99e2:	92 c0       	rjmp	.+292    	; 0x9b08 <put_fat+0x172>
    99e4:	81 30       	cpi	r24, 0x01	; 1
    99e6:	09 f0       	breq	.+2      	; 0x99ea <put_fat+0x54>
    99e8:	cb c0       	rjmp	.+406    	; 0x9b80 <put_fat+0x1ea>
    99ea:	4a 01       	movw	r8, r20
    99ec:	96 94       	lsr	r9
    99ee:	87 94       	ror	r8
    99f0:	84 0e       	add	r8, r20
    99f2:	95 1e       	adc	r9, r21
    99f4:	c4 01       	movw	r24, r8
    99f6:	89 2f       	mov	r24, r25
    99f8:	99 27       	eor	r25, r25
    99fa:	86 95       	lsr	r24
    99fc:	45 a1       	ldd	r20, Z+37	; 0x25
    99fe:	56 a1       	ldd	r21, Z+38	; 0x26
    9a00:	67 a1       	ldd	r22, Z+39	; 0x27
    9a02:	70 a5       	ldd	r23, Z+40	; 0x28
    9a04:	48 0f       	add	r20, r24
    9a06:	59 1f       	adc	r21, r25
    9a08:	61 1d       	adc	r22, r1
    9a0a:	71 1d       	adc	r23, r1
    9a0c:	cf 01       	movw	r24, r30
    9a0e:	9a dc       	rcall	.-1740   	; 0x9344 <move_window>
    9a10:	5c 01       	movw	r10, r24
    9a12:	89 2b       	or	r24, r25
    9a14:	09 f0       	breq	.+2      	; 0x9a18 <put_fat+0x82>
    9a16:	b7 c0       	rjmp	.+366    	; 0x9b86 <put_fat+0x1f0>
    9a18:	2d 80       	ldd	r2, Y+5	; 0x05
    9a1a:	3e 80       	ldd	r3, Y+6	; 0x06
    9a1c:	f5 e3       	ldi	r31, 0x35	; 53
    9a1e:	2f 0e       	add	r2, r31
    9a20:	31 1c       	adc	r3, r1
    9a22:	84 01       	movw	r16, r8
    9a24:	0f 5f       	subi	r16, 0xFF	; 255
    9a26:	1f 4f       	sbci	r17, 0xFF	; 255
    9a28:	21 e0       	ldi	r18, 0x01	; 1
    9a2a:	92 22       	and	r9, r18
    9a2c:	f1 01       	movw	r30, r2
    9a2e:	e8 0d       	add	r30, r8
    9a30:	f9 1d       	adc	r31, r9
    9a32:	d7 01       	movw	r26, r14
    9a34:	c6 01       	movw	r24, r12
    9a36:	81 70       	andi	r24, 0x01	; 1
    9a38:	99 27       	eor	r25, r25
    9a3a:	aa 27       	eor	r26, r26
    9a3c:	bb 27       	eor	r27, r27
    9a3e:	89 83       	std	Y+1, r24	; 0x01
    9a40:	9a 83       	std	Y+2, r25	; 0x02
    9a42:	ab 83       	std	Y+3, r26	; 0x03
    9a44:	bc 83       	std	Y+4, r27	; 0x04
    9a46:	c0 fe       	sbrs	r12, 0
    9a48:	09 c0       	rjmp	.+18     	; 0x9a5c <put_fat+0xc6>
    9a4a:	80 81       	ld	r24, Z
    9a4c:	28 2f       	mov	r18, r24
    9a4e:	2f 70       	andi	r18, 0x0F	; 15
    9a50:	a0 e1       	ldi	r26, 0x10	; 16
    9a52:	4a 9e       	mul	r4, r26
    9a54:	c0 01       	movw	r24, r0
    9a56:	11 24       	eor	r1, r1
    9a58:	82 2b       	or	r24, r18
    9a5a:	01 c0       	rjmp	.+2      	; 0x9a5e <put_fat+0xc8>
    9a5c:	84 2d       	mov	r24, r4
    9a5e:	80 83       	st	Z, r24
    9a60:	81 e0       	ldi	r24, 0x01	; 1
    9a62:	ed 81       	ldd	r30, Y+5	; 0x05
    9a64:	fe 81       	ldd	r31, Y+6	; 0x06
    9a66:	83 83       	std	Z+3, r24	; 0x03
    9a68:	45 a1       	ldd	r20, Z+37	; 0x25
    9a6a:	56 a1       	ldd	r21, Z+38	; 0x26
    9a6c:	67 a1       	ldd	r22, Z+39	; 0x27
    9a6e:	70 a5       	ldd	r23, Z+40	; 0x28
    9a70:	c8 01       	movw	r24, r16
    9a72:	89 2f       	mov	r24, r25
    9a74:	99 27       	eor	r25, r25
    9a76:	86 95       	lsr	r24
    9a78:	48 0f       	add	r20, r24
    9a7a:	59 1f       	adc	r21, r25
    9a7c:	61 1d       	adc	r22, r1
    9a7e:	71 1d       	adc	r23, r1
    9a80:	cf 01       	movw	r24, r30
    9a82:	60 dc       	rcall	.-1856   	; 0x9344 <move_window>
    9a84:	5c 01       	movw	r10, r24
    9a86:	89 2b       	or	r24, r25
    9a88:	09 f0       	breq	.+2      	; 0x9a8c <put_fat+0xf6>
    9a8a:	7d c0       	rjmp	.+250    	; 0x9b86 <put_fat+0x1f0>
    9a8c:	11 70       	andi	r17, 0x01	; 1
    9a8e:	f1 01       	movw	r30, r2
    9a90:	e0 0f       	add	r30, r16
    9a92:	f1 1f       	adc	r31, r17
    9a94:	89 81       	ldd	r24, Y+1	; 0x01
    9a96:	9a 81       	ldd	r25, Y+2	; 0x02
    9a98:	ab 81       	ldd	r26, Y+3	; 0x03
    9a9a:	bc 81       	ldd	r27, Y+4	; 0x04
    9a9c:	89 2b       	or	r24, r25
    9a9e:	8a 2b       	or	r24, r26
    9aa0:	8b 2b       	or	r24, r27
    9aa2:	41 f0       	breq	.+16     	; 0x9ab4 <put_fat+0x11e>
    9aa4:	54 e0       	ldi	r21, 0x04	; 4
    9aa6:	76 94       	lsr	r7
    9aa8:	67 94       	ror	r6
    9aaa:	57 94       	ror	r5
    9aac:	47 94       	ror	r4
    9aae:	5a 95       	dec	r21
    9ab0:	d1 f7       	brne	.-12     	; 0x9aa6 <put_fat+0x110>
    9ab2:	06 c0       	rjmp	.+12     	; 0x9ac0 <put_fat+0x12a>
    9ab4:	00 81       	ld	r16, Z
    9ab6:	00 7f       	andi	r16, 0xF0	; 240
    9ab8:	85 2d       	mov	r24, r5
    9aba:	8f 70       	andi	r24, 0x0F	; 15
    9abc:	40 2e       	mov	r4, r16
    9abe:	48 2a       	or	r4, r24
    9ac0:	40 82       	st	Z, r4
    9ac2:	58 c0       	rjmp	.+176    	; 0x9b74 <put_fat+0x1de>
    9ac4:	77 27       	eor	r23, r23
    9ac6:	6f 2d       	mov	r22, r15
    9ac8:	5e 2d       	mov	r21, r14
    9aca:	4d 2d       	mov	r20, r13
    9acc:	ed 81       	ldd	r30, Y+5	; 0x05
    9ace:	fe 81       	ldd	r31, Y+6	; 0x06
    9ad0:	85 a1       	ldd	r24, Z+37	; 0x25
    9ad2:	96 a1       	ldd	r25, Z+38	; 0x26
    9ad4:	a7 a1       	ldd	r26, Z+39	; 0x27
    9ad6:	b0 a5       	ldd	r27, Z+40	; 0x28
    9ad8:	48 0f       	add	r20, r24
    9ada:	59 1f       	adc	r21, r25
    9adc:	6a 1f       	adc	r22, r26
    9ade:	7b 1f       	adc	r23, r27
    9ae0:	cf 01       	movw	r24, r30
    9ae2:	30 dc       	rcall	.-1952   	; 0x9344 <move_window>
    9ae4:	5c 01       	movw	r10, r24
    9ae6:	89 2b       	or	r24, r25
    9ae8:	09 f0       	breq	.+2      	; 0x9aec <put_fat+0x156>
    9aea:	4d c0       	rjmp	.+154    	; 0x9b86 <put_fat+0x1f0>
    9aec:	ed 81       	ldd	r30, Y+5	; 0x05
    9aee:	fe 81       	ldd	r31, Y+6	; 0x06
    9af0:	f5 96       	adiw	r30, 0x35	; 53
    9af2:	cc 0c       	add	r12, r12
    9af4:	dd 1c       	adc	r13, r13
    9af6:	e8 94       	clt
    9af8:	c0 f8       	bld	r12, 0
    9afa:	21 e0       	ldi	r18, 0x01	; 1
    9afc:	d2 22       	and	r13, r18
    9afe:	ec 0d       	add	r30, r12
    9b00:	fd 1d       	adc	r31, r13
    9b02:	40 82       	st	Z, r4
    9b04:	51 82       	std	Z+1, r5	; 0x01
    9b06:	36 c0       	rjmp	.+108    	; 0x9b74 <put_fat+0x1de>
    9b08:	ed 81       	ldd	r30, Y+5	; 0x05
    9b0a:	fe 81       	ldd	r31, Y+6	; 0x06
    9b0c:	85 a1       	ldd	r24, Z+37	; 0x25
    9b0e:	96 a1       	ldd	r25, Z+38	; 0x26
    9b10:	a7 a1       	ldd	r26, Z+39	; 0x27
    9b12:	b0 a5       	ldd	r27, Z+40	; 0x28
    9b14:	27 e0       	ldi	r18, 0x07	; 7
    9b16:	76 95       	lsr	r23
    9b18:	67 95       	ror	r22
    9b1a:	57 95       	ror	r21
    9b1c:	47 95       	ror	r20
    9b1e:	2a 95       	dec	r18
    9b20:	d1 f7       	brne	.-12     	; 0x9b16 <put_fat+0x180>
    9b22:	48 0f       	add	r20, r24
    9b24:	59 1f       	adc	r21, r25
    9b26:	6a 1f       	adc	r22, r26
    9b28:	7b 1f       	adc	r23, r27
    9b2a:	cf 01       	movw	r24, r30
    9b2c:	0b dc       	rcall	.-2026   	; 0x9344 <move_window>
    9b2e:	5c 01       	movw	r10, r24
    9b30:	89 2b       	or	r24, r25
    9b32:	49 f5       	brne	.+82     	; 0x9b86 <put_fat+0x1f0>
    9b34:	4d 81       	ldd	r20, Y+5	; 0x05
    9b36:	5e 81       	ldd	r21, Y+6	; 0x06
    9b38:	4b 5c       	subi	r20, 0xCB	; 203
    9b3a:	5f 4f       	sbci	r21, 0xFF	; 255
    9b3c:	cc 0c       	add	r12, r12
    9b3e:	dd 1c       	adc	r13, r13
    9b40:	cc 0c       	add	r12, r12
    9b42:	dd 1c       	adc	r13, r13
    9b44:	fc ef       	ldi	r31, 0xFC	; 252
    9b46:	cf 22       	and	r12, r31
    9b48:	f1 e0       	ldi	r31, 0x01	; 1
    9b4a:	df 22       	and	r13, r31
    9b4c:	c4 0e       	add	r12, r20
    9b4e:	d5 1e       	adc	r13, r21
    9b50:	c6 01       	movw	r24, r12
    9b52:	21 da       	rcall	.-3006   	; 0x8f96 <ld_dword>
    9b54:	2f e0       	ldi	r18, 0x0F	; 15
    9b56:	72 22       	and	r7, r18
    9b58:	dc 01       	movw	r26, r24
    9b5a:	cb 01       	movw	r24, r22
    9b5c:	88 27       	eor	r24, r24
    9b5e:	99 27       	eor	r25, r25
    9b60:	aa 27       	eor	r26, r26
    9b62:	b0 7f       	andi	r27, 0xF0	; 240
    9b64:	b3 01       	movw	r22, r6
    9b66:	a2 01       	movw	r20, r4
    9b68:	48 2b       	or	r20, r24
    9b6a:	59 2b       	or	r21, r25
    9b6c:	6a 2b       	or	r22, r26
    9b6e:	7b 2b       	or	r23, r27
    9b70:	c6 01       	movw	r24, r12
    9b72:	26 da       	rcall	.-2996   	; 0x8fc0 <st_dword>
    9b74:	81 e0       	ldi	r24, 0x01	; 1
    9b76:	ad 81       	ldd	r26, Y+5	; 0x05
    9b78:	be 81       	ldd	r27, Y+6	; 0x06
    9b7a:	13 96       	adiw	r26, 0x03	; 3
    9b7c:	8c 93       	st	X, r24
    9b7e:	03 c0       	rjmp	.+6      	; 0x9b86 <put_fat+0x1f0>
    9b80:	82 e0       	ldi	r24, 0x02	; 2
    9b82:	a8 2e       	mov	r10, r24
    9b84:	b1 2c       	mov	r11, r1
    9b86:	c5 01       	movw	r24, r10
    9b88:	26 96       	adiw	r28, 0x06	; 6
    9b8a:	e2 e1       	ldi	r30, 0x12	; 18
    9b8c:	0c 94 2f e8 	jmp	0x1d05e	; 0x1d05e <__epilogue_restores__>

00009b90 <get_fat.isra.7>:
    9b90:	a0 e0       	ldi	r26, 0x00	; 0
    9b92:	b0 e0       	ldi	r27, 0x00	; 0
    9b94:	ee ec       	ldi	r30, 0xCE	; 206
    9b96:	fd e4       	ldi	r31, 0x4D	; 77
    9b98:	0c 94 1b e8 	jmp	0x1d036	; 0x1d036 <__prologue_saves__+0x10>
    9b9c:	42 30       	cpi	r20, 0x02	; 2
    9b9e:	51 05       	cpc	r21, r1
    9ba0:	61 05       	cpc	r22, r1
    9ba2:	71 05       	cpc	r23, r1
    9ba4:	08 f4       	brcc	.+2      	; 0x9ba8 <get_fat.isra.7+0x18>
    9ba6:	9e c0       	rjmp	.+316    	; 0x9ce4 <get_fat.isra.7+0x154>
    9ba8:	fc 01       	movw	r30, r24
    9baa:	01 8d       	ldd	r16, Z+25	; 0x19
    9bac:	12 8d       	ldd	r17, Z+26	; 0x1a
    9bae:	23 8d       	ldd	r18, Z+27	; 0x1b
    9bb0:	34 8d       	ldd	r19, Z+28	; 0x1c
    9bb2:	40 17       	cp	r20, r16
    9bb4:	51 07       	cpc	r21, r17
    9bb6:	62 07       	cpc	r22, r18
    9bb8:	73 07       	cpc	r23, r19
    9bba:	08 f0       	brcs	.+2      	; 0x9bbe <get_fat.isra.7+0x2e>
    9bbc:	93 c0       	rjmp	.+294    	; 0x9ce4 <get_fat.isra.7+0x154>
    9bbe:	6a 01       	movw	r12, r20
    9bc0:	7b 01       	movw	r14, r22
    9bc2:	8c 01       	movw	r16, r24
    9bc4:	80 81       	ld	r24, Z
    9bc6:	82 30       	cpi	r24, 0x02	; 2
    9bc8:	09 f4       	brne	.+2      	; 0x9bcc <get_fat.isra.7+0x3c>
    9bca:	4b c0       	rjmp	.+150    	; 0x9c62 <get_fat.isra.7+0xd2>
    9bcc:	83 30       	cpi	r24, 0x03	; 3
    9bce:	09 f4       	brne	.+2      	; 0x9bd2 <get_fat.isra.7+0x42>
    9bd0:	67 c0       	rjmp	.+206    	; 0x9ca0 <get_fat.isra.7+0x110>
    9bd2:	81 30       	cpi	r24, 0x01	; 1
    9bd4:	09 f0       	breq	.+2      	; 0x9bd8 <get_fat.isra.7+0x48>
    9bd6:	86 c0       	rjmp	.+268    	; 0x9ce4 <get_fat.isra.7+0x154>
    9bd8:	ea 01       	movw	r28, r20
    9bda:	d6 95       	lsr	r29
    9bdc:	c7 95       	ror	r28
    9bde:	cc 0d       	add	r28, r12
    9be0:	dd 1d       	adc	r29, r13
    9be2:	ce 01       	movw	r24, r28
    9be4:	89 2f       	mov	r24, r25
    9be6:	99 27       	eor	r25, r25
    9be8:	86 95       	lsr	r24
    9bea:	45 a1       	ldd	r20, Z+37	; 0x25
    9bec:	56 a1       	ldd	r21, Z+38	; 0x26
    9bee:	67 a1       	ldd	r22, Z+39	; 0x27
    9bf0:	70 a5       	ldd	r23, Z+40	; 0x28
    9bf2:	48 0f       	add	r20, r24
    9bf4:	59 1f       	adc	r21, r25
    9bf6:	61 1d       	adc	r22, r1
    9bf8:	71 1d       	adc	r23, r1
    9bfa:	cf 01       	movw	r24, r30
    9bfc:	a3 db       	rcall	.-2234   	; 0x9344 <move_window>
    9bfe:	89 2b       	or	r24, r25
    9c00:	21 f0       	breq	.+8      	; 0x9c0a <get_fat.isra.7+0x7a>
    9c02:	6f ef       	ldi	r22, 0xFF	; 255
    9c04:	7f ef       	ldi	r23, 0xFF	; 255
    9c06:	cb 01       	movw	r24, r22
    9c08:	71 c0       	rjmp	.+226    	; 0x9cec <get_fat.isra.7+0x15c>
    9c0a:	5e 01       	movw	r10, r28
    9c0c:	ff ef       	ldi	r31, 0xFF	; 255
    9c0e:	af 1a       	sub	r10, r31
    9c10:	bf 0a       	sbc	r11, r31
    9c12:	d1 70       	andi	r29, 0x01	; 1
    9c14:	c0 0f       	add	r28, r16
    9c16:	d1 1f       	adc	r29, r17
    9c18:	cd a9       	ldd	r28, Y+53	; 0x35
    9c1a:	c5 01       	movw	r24, r10
    9c1c:	89 2f       	mov	r24, r25
    9c1e:	99 27       	eor	r25, r25
    9c20:	86 95       	lsr	r24
    9c22:	f8 01       	movw	r30, r16
    9c24:	45 a1       	ldd	r20, Z+37	; 0x25
    9c26:	56 a1       	ldd	r21, Z+38	; 0x26
    9c28:	67 a1       	ldd	r22, Z+39	; 0x27
    9c2a:	70 a5       	ldd	r23, Z+40	; 0x28
    9c2c:	48 0f       	add	r20, r24
    9c2e:	59 1f       	adc	r21, r25
    9c30:	61 1d       	adc	r22, r1
    9c32:	71 1d       	adc	r23, r1
    9c34:	c8 01       	movw	r24, r16
    9c36:	86 db       	rcall	.-2292   	; 0x9344 <move_window>
    9c38:	89 2b       	or	r24, r25
    9c3a:	19 f7       	brne	.-58     	; 0x9c02 <get_fat.isra.7+0x72>
    9c3c:	f1 e0       	ldi	r31, 0x01	; 1
    9c3e:	bf 22       	and	r11, r31
    9c40:	f8 01       	movw	r30, r16
    9c42:	ea 0d       	add	r30, r10
    9c44:	fb 1d       	adc	r31, r11
    9c46:	85 a9       	ldd	r24, Z+53	; 0x35
    9c48:	6c 2f       	mov	r22, r28
    9c4a:	70 e0       	ldi	r23, 0x00	; 0
    9c4c:	78 2b       	or	r23, r24
    9c4e:	c0 fe       	sbrs	r12, 0
    9c50:	06 c0       	rjmp	.+12     	; 0x9c5e <get_fat.isra.7+0xce>
    9c52:	54 e0       	ldi	r21, 0x04	; 4
    9c54:	76 95       	lsr	r23
    9c56:	67 95       	ror	r22
    9c58:	5a 95       	dec	r21
    9c5a:	e1 f7       	brne	.-8      	; 0x9c54 <get_fat.isra.7+0xc4>
    9c5c:	1e c0       	rjmp	.+60     	; 0x9c9a <get_fat.isra.7+0x10a>
    9c5e:	7f 70       	andi	r23, 0x0F	; 15
    9c60:	1c c0       	rjmp	.+56     	; 0x9c9a <get_fat.isra.7+0x10a>
    9c62:	77 27       	eor	r23, r23
    9c64:	6f 2d       	mov	r22, r15
    9c66:	5e 2d       	mov	r21, r14
    9c68:	4d 2d       	mov	r20, r13
    9c6a:	85 a1       	ldd	r24, Z+37	; 0x25
    9c6c:	96 a1       	ldd	r25, Z+38	; 0x26
    9c6e:	a7 a1       	ldd	r26, Z+39	; 0x27
    9c70:	b0 a5       	ldd	r27, Z+40	; 0x28
    9c72:	48 0f       	add	r20, r24
    9c74:	59 1f       	adc	r21, r25
    9c76:	6a 1f       	adc	r22, r26
    9c78:	7b 1f       	adc	r23, r27
    9c7a:	cf 01       	movw	r24, r30
    9c7c:	63 db       	rcall	.-2362   	; 0x9344 <move_window>
    9c7e:	89 2b       	or	r24, r25
    9c80:	09 f0       	breq	.+2      	; 0x9c84 <get_fat.isra.7+0xf4>
    9c82:	bf cf       	rjmp	.-130    	; 0x9c02 <get_fat.isra.7+0x72>
    9c84:	cc 0c       	add	r12, r12
    9c86:	dd 1c       	adc	r13, r13
    9c88:	e8 94       	clt
    9c8a:	c0 f8       	bld	r12, 0
    9c8c:	f1 e0       	ldi	r31, 0x01	; 1
    9c8e:	df 22       	and	r13, r31
    9c90:	f8 01       	movw	r30, r16
    9c92:	ec 0d       	add	r30, r12
    9c94:	fd 1d       	adc	r31, r13
    9c96:	65 a9       	ldd	r22, Z+53	; 0x35
    9c98:	76 a9       	ldd	r23, Z+54	; 0x36
    9c9a:	80 e0       	ldi	r24, 0x00	; 0
    9c9c:	90 e0       	ldi	r25, 0x00	; 0
    9c9e:	26 c0       	rjmp	.+76     	; 0x9cec <get_fat.isra.7+0x15c>
    9ca0:	85 a1       	ldd	r24, Z+37	; 0x25
    9ca2:	96 a1       	ldd	r25, Z+38	; 0x26
    9ca4:	a7 a1       	ldd	r26, Z+39	; 0x27
    9ca6:	b0 a5       	ldd	r27, Z+40	; 0x28
    9ca8:	27 e0       	ldi	r18, 0x07	; 7
    9caa:	76 95       	lsr	r23
    9cac:	67 95       	ror	r22
    9cae:	57 95       	ror	r21
    9cb0:	47 95       	ror	r20
    9cb2:	2a 95       	dec	r18
    9cb4:	d1 f7       	brne	.-12     	; 0x9caa <get_fat.isra.7+0x11a>
    9cb6:	48 0f       	add	r20, r24
    9cb8:	59 1f       	adc	r21, r25
    9cba:	6a 1f       	adc	r22, r26
    9cbc:	7b 1f       	adc	r23, r27
    9cbe:	cf 01       	movw	r24, r30
    9cc0:	41 db       	rcall	.-2430   	; 0x9344 <move_window>
    9cc2:	89 2b       	or	r24, r25
    9cc4:	09 f0       	breq	.+2      	; 0x9cc8 <get_fat.isra.7+0x138>
    9cc6:	9d cf       	rjmp	.-198    	; 0x9c02 <get_fat.isra.7+0x72>
    9cc8:	0b 5c       	subi	r16, 0xCB	; 203
    9cca:	1f 4f       	sbci	r17, 0xFF	; 255
    9ccc:	cc 0c       	add	r12, r12
    9cce:	dd 1c       	adc	r13, r13
    9cd0:	cc 0c       	add	r12, r12
    9cd2:	dd 1c       	adc	r13, r13
    9cd4:	c6 01       	movw	r24, r12
    9cd6:	8c 7f       	andi	r24, 0xFC	; 252
    9cd8:	91 70       	andi	r25, 0x01	; 1
    9cda:	80 0f       	add	r24, r16
    9cdc:	91 1f       	adc	r25, r17
    9cde:	5b d9       	rcall	.-3402   	; 0x8f96 <ld_dword>
    9ce0:	9f 70       	andi	r25, 0x0F	; 15
    9ce2:	04 c0       	rjmp	.+8      	; 0x9cec <get_fat.isra.7+0x15c>
    9ce4:	61 e0       	ldi	r22, 0x01	; 1
    9ce6:	70 e0       	ldi	r23, 0x00	; 0
    9ce8:	80 e0       	ldi	r24, 0x00	; 0
    9cea:	90 e0       	ldi	r25, 0x00	; 0
    9cec:	cd b7       	in	r28, 0x3d	; 61
    9cee:	de b7       	in	r29, 0x3e	; 62
    9cf0:	ea e0       	ldi	r30, 0x0A	; 10
    9cf2:	0c 94 37 e8 	jmp	0x1d06e	; 0x1d06e <__epilogue_restores__+0x10>

00009cf6 <dir_sdi>:
    9cf6:	a0 e0       	ldi	r26, 0x00	; 0
    9cf8:	b0 e0       	ldi	r27, 0x00	; 0
    9cfa:	e1 e8       	ldi	r30, 0x81	; 129
    9cfc:	fe e4       	ldi	r31, 0x4E	; 78
    9cfe:	0c 94 15 e8 	jmp	0x1d02a	; 0x1d02a <__prologue_saves__+0x4>
    9d02:	ec 01       	movw	r28, r24
    9d04:	6a 01       	movw	r12, r20
    9d06:	7b 01       	movw	r14, r22
    9d08:	41 15       	cp	r20, r1
    9d0a:	51 05       	cpc	r21, r1
    9d0c:	80 e2       	ldi	r24, 0x20	; 32
    9d0e:	68 07       	cpc	r22, r24
    9d10:	71 05       	cpc	r23, r1
    9d12:	18 f0       	brcs	.+6      	; 0x9d1a <dir_sdi+0x24>
    9d14:	82 e0       	ldi	r24, 0x02	; 2
    9d16:	90 e0       	ldi	r25, 0x00	; 0
    9d18:	a9 c0       	rjmp	.+338    	; 0x9e6c <dir_sdi+0x176>
    9d1a:	db 01       	movw	r26, r22
    9d1c:	ca 01       	movw	r24, r20
    9d1e:	8f 71       	andi	r24, 0x1F	; 31
    9d20:	99 27       	eor	r25, r25
    9d22:	aa 27       	eor	r26, r26
    9d24:	bb 27       	eor	r27, r27
    9d26:	89 2b       	or	r24, r25
    9d28:	8a 2b       	or	r24, r26
    9d2a:	8b 2b       	or	r24, r27
    9d2c:	99 f7       	brne	.-26     	; 0x9d14 <dir_sdi+0x1e>
    9d2e:	08 81       	ld	r16, Y
    9d30:	19 81       	ldd	r17, Y+1	; 0x01
    9d32:	4e 87       	std	Y+14, r20	; 0x0e
    9d34:	5f 87       	std	Y+15, r21	; 0x0f
    9d36:	68 8b       	std	Y+16, r22	; 0x10
    9d38:	79 8b       	std	Y+17, r23	; 0x11
    9d3a:	8e 80       	ldd	r8, Y+6	; 0x06
    9d3c:	9f 80       	ldd	r9, Y+7	; 0x07
    9d3e:	a8 84       	ldd	r10, Y+8	; 0x08
    9d40:	b9 84       	ldd	r11, Y+9	; 0x09
    9d42:	81 14       	cp	r8, r1
    9d44:	91 04       	cpc	r9, r1
    9d46:	a1 04       	cpc	r10, r1
    9d48:	b1 04       	cpc	r11, r1
    9d4a:	51 f5       	brne	.+84     	; 0x9da0 <dir_sdi+0xaa>
    9d4c:	f8 01       	movw	r30, r16
    9d4e:	80 81       	ld	r24, Z
    9d50:	83 30       	cpi	r24, 0x03	; 3
    9d52:	40 f0       	brcs	.+16     	; 0x9d64 <dir_sdi+0x6e>
    9d54:	81 a5       	ldd	r24, Z+41	; 0x29
    9d56:	92 a5       	ldd	r25, Z+42	; 0x2a
    9d58:	a3 a5       	ldd	r26, Z+43	; 0x2b
    9d5a:	b4 a5       	ldd	r27, Z+44	; 0x2c
    9d5c:	00 97       	sbiw	r24, 0x00	; 0
    9d5e:	a1 05       	cpc	r26, r1
    9d60:	b1 05       	cpc	r27, r1
    9d62:	e1 f4       	brne	.+56     	; 0x9d9c <dir_sdi+0xa6>
    9d64:	f8 01       	movw	r30, r16
    9d66:	87 81       	ldd	r24, Z+7	; 0x07
    9d68:	90 85       	ldd	r25, Z+8	; 0x08
    9d6a:	a0 e0       	ldi	r26, 0x00	; 0
    9d6c:	b0 e0       	ldi	r27, 0x00	; 0
    9d6e:	b7 01       	movw	r22, r14
    9d70:	a6 01       	movw	r20, r12
    9d72:	25 e0       	ldi	r18, 0x05	; 5
    9d74:	76 95       	lsr	r23
    9d76:	67 95       	ror	r22
    9d78:	57 95       	ror	r21
    9d7a:	47 95       	ror	r20
    9d7c:	2a 95       	dec	r18
    9d7e:	d1 f7       	brne	.-12     	; 0x9d74 <dir_sdi+0x7e>
    9d80:	48 17       	cp	r20, r24
    9d82:	59 07       	cpc	r21, r25
    9d84:	6a 07       	cpc	r22, r26
    9d86:	7b 07       	cpc	r23, r27
    9d88:	28 f6       	brcc	.-118    	; 0x9d14 <dir_sdi+0x1e>
    9d8a:	81 a5       	ldd	r24, Z+41	; 0x29
    9d8c:	92 a5       	ldd	r25, Z+42	; 0x2a
    9d8e:	a3 a5       	ldd	r26, Z+43	; 0x2b
    9d90:	b4 a5       	ldd	r27, Z+44	; 0x2c
    9d92:	8e 8b       	std	Y+22, r24	; 0x16
    9d94:	9f 8b       	std	Y+23, r25	; 0x17
    9d96:	a8 8f       	std	Y+24, r26	; 0x18
    9d98:	b9 8f       	std	Y+25, r27	; 0x19
    9d9a:	3d c0       	rjmp	.+122    	; 0x9e16 <dir_sdi+0x120>
    9d9c:	4c 01       	movw	r8, r24
    9d9e:	5d 01       	movw	r10, r26
    9da0:	f8 01       	movw	r30, r16
    9da2:	41 84       	ldd	r4, Z+9	; 0x09
    9da4:	52 84       	ldd	r5, Z+10	; 0x0a
    9da6:	61 2c       	mov	r6, r1
    9da8:	71 2c       	mov	r7, r1
    9daa:	39 e0       	ldi	r19, 0x09	; 9
    9dac:	44 0c       	add	r4, r4
    9dae:	55 1c       	adc	r5, r5
    9db0:	66 1c       	adc	r6, r6
    9db2:	77 1c       	adc	r7, r7
    9db4:	3a 95       	dec	r19
    9db6:	d1 f7       	brne	.-12     	; 0x9dac <dir_sdi+0xb6>
    9db8:	b5 01       	movw	r22, r10
    9dba:	a4 01       	movw	r20, r8
    9dbc:	c4 14       	cp	r12, r4
    9dbe:	d5 04       	cpc	r13, r5
    9dc0:	e6 04       	cpc	r14, r6
    9dc2:	f7 04       	cpc	r15, r7
    9dc4:	10 f1       	brcs	.+68     	; 0x9e0a <dir_sdi+0x114>
    9dc6:	88 81       	ld	r24, Y
    9dc8:	99 81       	ldd	r25, Y+1	; 0x01
    9dca:	e2 de       	rcall	.-572    	; 0x9b90 <get_fat.isra.7>
    9dcc:	4b 01       	movw	r8, r22
    9dce:	5c 01       	movw	r10, r24
    9dd0:	6f 3f       	cpi	r22, 0xFF	; 255
    9dd2:	7f 4f       	sbci	r23, 0xFF	; 255
    9dd4:	8f 4f       	sbci	r24, 0xFF	; 255
    9dd6:	9f 4f       	sbci	r25, 0xFF	; 255
    9dd8:	09 f4       	brne	.+2      	; 0x9ddc <dir_sdi+0xe6>
    9dda:	46 c0       	rjmp	.+140    	; 0x9e68 <dir_sdi+0x172>
    9ddc:	82 e0       	ldi	r24, 0x02	; 2
    9dde:	88 16       	cp	r8, r24
    9de0:	91 04       	cpc	r9, r1
    9de2:	a1 04       	cpc	r10, r1
    9de4:	b1 04       	cpc	r11, r1
    9de6:	08 f4       	brcc	.+2      	; 0x9dea <dir_sdi+0xf4>
    9de8:	95 cf       	rjmp	.-214    	; 0x9d14 <dir_sdi+0x1e>
    9dea:	f8 01       	movw	r30, r16
    9dec:	81 8d       	ldd	r24, Z+25	; 0x19
    9dee:	92 8d       	ldd	r25, Z+26	; 0x1a
    9df0:	a3 8d       	ldd	r26, Z+27	; 0x1b
    9df2:	b4 8d       	ldd	r27, Z+28	; 0x1c
    9df4:	88 16       	cp	r8, r24
    9df6:	99 06       	cpc	r9, r25
    9df8:	aa 06       	cpc	r10, r26
    9dfa:	bb 06       	cpc	r11, r27
    9dfc:	08 f0       	brcs	.+2      	; 0x9e00 <dir_sdi+0x10a>
    9dfe:	8a cf       	rjmp	.-236    	; 0x9d14 <dir_sdi+0x1e>
    9e00:	c4 18       	sub	r12, r4
    9e02:	d5 08       	sbc	r13, r5
    9e04:	e6 08       	sbc	r14, r6
    9e06:	f7 08       	sbc	r15, r7
    9e08:	d7 cf       	rjmp	.-82     	; 0x9db8 <dir_sdi+0xc2>
    9e0a:	c8 01       	movw	r24, r16
    9e0c:	e8 d8       	rcall	.-3632   	; 0x8fde <clust2sect>
    9e0e:	6e 8b       	std	Y+22, r22	; 0x16
    9e10:	7f 8b       	std	Y+23, r23	; 0x17
    9e12:	88 8f       	std	Y+24, r24	; 0x18
    9e14:	99 8f       	std	Y+25, r25	; 0x19
    9e16:	8a 8a       	std	Y+18, r8	; 0x12
    9e18:	9b 8a       	std	Y+19, r9	; 0x13
    9e1a:	ac 8a       	std	Y+20, r10	; 0x14
    9e1c:	bd 8a       	std	Y+21, r11	; 0x15
    9e1e:	8e 89       	ldd	r24, Y+22	; 0x16
    9e20:	9f 89       	ldd	r25, Y+23	; 0x17
    9e22:	a8 8d       	ldd	r26, Y+24	; 0x18
    9e24:	b9 8d       	ldd	r27, Y+25	; 0x19
    9e26:	00 97       	sbiw	r24, 0x00	; 0
    9e28:	a1 05       	cpc	r26, r1
    9e2a:	b1 05       	cpc	r27, r1
    9e2c:	09 f4       	brne	.+2      	; 0x9e30 <dir_sdi+0x13a>
    9e2e:	72 cf       	rjmp	.-284    	; 0x9d14 <dir_sdi+0x1e>
    9e30:	b7 01       	movw	r22, r14
    9e32:	a6 01       	movw	r20, r12
    9e34:	29 e0       	ldi	r18, 0x09	; 9
    9e36:	76 95       	lsr	r23
    9e38:	67 95       	ror	r22
    9e3a:	57 95       	ror	r21
    9e3c:	47 95       	ror	r20
    9e3e:	2a 95       	dec	r18
    9e40:	d1 f7       	brne	.-12     	; 0x9e36 <dir_sdi+0x140>
    9e42:	84 0f       	add	r24, r20
    9e44:	95 1f       	adc	r25, r21
    9e46:	a6 1f       	adc	r26, r22
    9e48:	b7 1f       	adc	r27, r23
    9e4a:	8e 8b       	std	Y+22, r24	; 0x16
    9e4c:	9f 8b       	std	Y+23, r25	; 0x17
    9e4e:	a8 8f       	std	Y+24, r26	; 0x18
    9e50:	b9 8f       	std	Y+25, r27	; 0x19
    9e52:	0b 5c       	subi	r16, 0xCB	; 203
    9e54:	1f 4f       	sbci	r17, 0xFF	; 255
    9e56:	f1 e0       	ldi	r31, 0x01	; 1
    9e58:	df 22       	and	r13, r31
    9e5a:	c0 0e       	add	r12, r16
    9e5c:	d1 1e       	adc	r13, r17
    9e5e:	db 8e       	std	Y+27, r13	; 0x1b
    9e60:	ca 8e       	std	Y+26, r12	; 0x1a
    9e62:	80 e0       	ldi	r24, 0x00	; 0
    9e64:	90 e0       	ldi	r25, 0x00	; 0
    9e66:	02 c0       	rjmp	.+4      	; 0x9e6c <dir_sdi+0x176>
    9e68:	81 e0       	ldi	r24, 0x01	; 1
    9e6a:	90 e0       	ldi	r25, 0x00	; 0
    9e6c:	cd b7       	in	r28, 0x3d	; 61
    9e6e:	de b7       	in	r29, 0x3e	; 62
    9e70:	e0 e1       	ldi	r30, 0x10	; 16
    9e72:	0c 94 31 e8 	jmp	0x1d062	; 0x1d062 <__epilogue_restores__+0x4>

00009e76 <create_chain>:
    9e76:	a0 e0       	ldi	r26, 0x00	; 0
    9e78:	b0 e0       	ldi	r27, 0x00	; 0
    9e7a:	e1 e4       	ldi	r30, 0x41	; 65
    9e7c:	ff e4       	ldi	r31, 0x4F	; 79
    9e7e:	0c 94 15 e8 	jmp	0x1d02a	; 0x1d02a <__prologue_saves__+0x4>
    9e82:	8c 01       	movw	r16, r24
    9e84:	2a 01       	movw	r4, r20
    9e86:	3b 01       	movw	r6, r22
    9e88:	fc 01       	movw	r30, r24
    9e8a:	c0 81       	ld	r28, Z
    9e8c:	d1 81       	ldd	r29, Z+1	; 0x01
    9e8e:	41 15       	cp	r20, r1
    9e90:	51 05       	cpc	r21, r1
    9e92:	61 05       	cpc	r22, r1
    9e94:	71 05       	cpc	r23, r1
    9e96:	99 f4       	brne	.+38     	; 0x9ebe <create_chain+0x48>
    9e98:	8d 84       	ldd	r8, Y+13	; 0x0d
    9e9a:	9e 84       	ldd	r9, Y+14	; 0x0e
    9e9c:	af 84       	ldd	r10, Y+15	; 0x0f
    9e9e:	b8 88       	ldd	r11, Y+16	; 0x10
    9ea0:	81 14       	cp	r8, r1
    9ea2:	91 04       	cpc	r9, r1
    9ea4:	a1 04       	cpc	r10, r1
    9ea6:	b1 04       	cpc	r11, r1
    9ea8:	51 f1       	breq	.+84     	; 0x9efe <create_chain+0x88>
    9eaa:	89 8d       	ldd	r24, Y+25	; 0x19
    9eac:	9a 8d       	ldd	r25, Y+26	; 0x1a
    9eae:	ab 8d       	ldd	r26, Y+27	; 0x1b
    9eb0:	bc 8d       	ldd	r27, Y+28	; 0x1c
    9eb2:	88 16       	cp	r8, r24
    9eb4:	99 06       	cpc	r9, r25
    9eb6:	aa 06       	cpc	r10, r26
    9eb8:	bb 06       	cpc	r11, r27
    9eba:	28 f1       	brcs	.+74     	; 0x9f06 <create_chain+0x90>
    9ebc:	20 c0       	rjmp	.+64     	; 0x9efe <create_chain+0x88>
    9ebe:	ce 01       	movw	r24, r28
    9ec0:	67 de       	rcall	.-818    	; 0x9b90 <get_fat.isra.7>
    9ec2:	62 30       	cpi	r22, 0x02	; 2
    9ec4:	71 05       	cpc	r23, r1
    9ec6:	81 05       	cpc	r24, r1
    9ec8:	91 05       	cpc	r25, r1
    9eca:	08 f4       	brcc	.+2      	; 0x9ece <create_chain+0x58>
    9ecc:	95 c0       	rjmp	.+298    	; 0x9ff8 <create_chain+0x182>
    9ece:	6f 3f       	cpi	r22, 0xFF	; 255
    9ed0:	ff ef       	ldi	r31, 0xFF	; 255
    9ed2:	7f 07       	cpc	r23, r31
    9ed4:	8f 07       	cpc	r24, r31
    9ed6:	9f 07       	cpc	r25, r31
    9ed8:	29 f4       	brne	.+10     	; 0x9ee4 <create_chain+0x6e>
    9eda:	4f ef       	ldi	r20, 0xFF	; 255
    9edc:	3f ef       	ldi	r19, 0xFF	; 255
    9ede:	2f ef       	ldi	r18, 0xFF	; 255
    9ee0:	9f ef       	ldi	r25, 0xFF	; 255
    9ee2:	92 c0       	rjmp	.+292    	; 0xa008 <create_chain+0x192>
    9ee4:	c9 8c       	ldd	r12, Y+25	; 0x19
    9ee6:	da 8c       	ldd	r13, Y+26	; 0x1a
    9ee8:	eb 8c       	ldd	r14, Y+27	; 0x1b
    9eea:	fc 8c       	ldd	r15, Y+28	; 0x1c
    9eec:	6c 15       	cp	r22, r12
    9eee:	7d 05       	cpc	r23, r13
    9ef0:	8e 05       	cpc	r24, r14
    9ef2:	9f 05       	cpc	r25, r15
    9ef4:	08 f4       	brcc	.+2      	; 0x9ef8 <create_chain+0x82>
    9ef6:	85 c0       	rjmp	.+266    	; 0xa002 <create_chain+0x18c>
    9ef8:	53 01       	movw	r10, r6
    9efa:	42 01       	movw	r8, r4
    9efc:	04 c0       	rjmp	.+8      	; 0x9f06 <create_chain+0x90>
    9efe:	81 2c       	mov	r8, r1
    9f00:	91 2c       	mov	r9, r1
    9f02:	54 01       	movw	r10, r8
    9f04:	83 94       	inc	r8
    9f06:	75 01       	movw	r14, r10
    9f08:	64 01       	movw	r12, r8
    9f0a:	2f ef       	ldi	r18, 0xFF	; 255
    9f0c:	c2 1a       	sub	r12, r18
    9f0e:	d2 0a       	sbc	r13, r18
    9f10:	e2 0a       	sbc	r14, r18
    9f12:	f2 0a       	sbc	r15, r18
    9f14:	89 8d       	ldd	r24, Y+25	; 0x19
    9f16:	9a 8d       	ldd	r25, Y+26	; 0x1a
    9f18:	ab 8d       	ldd	r26, Y+27	; 0x1b
    9f1a:	bc 8d       	ldd	r27, Y+28	; 0x1c
    9f1c:	c8 16       	cp	r12, r24
    9f1e:	d9 06       	cpc	r13, r25
    9f20:	ea 06       	cpc	r14, r26
    9f22:	fb 06       	cpc	r15, r27
    9f24:	68 f0       	brcs	.+26     	; 0x9f40 <create_chain+0xca>
    9f26:	82 e0       	ldi	r24, 0x02	; 2
    9f28:	88 16       	cp	r8, r24
    9f2a:	91 04       	cpc	r9, r1
    9f2c:	a1 04       	cpc	r10, r1
    9f2e:	b1 04       	cpc	r11, r1
    9f30:	10 f4       	brcc	.+4      	; 0x9f36 <create_chain+0xc0>
    9f32:	40 e0       	ldi	r20, 0x00	; 0
    9f34:	62 c0       	rjmp	.+196    	; 0x9ffa <create_chain+0x184>
    9f36:	82 e0       	ldi	r24, 0x02	; 2
    9f38:	c8 2e       	mov	r12, r24
    9f3a:	d1 2c       	mov	r13, r1
    9f3c:	e1 2c       	mov	r14, r1
    9f3e:	f1 2c       	mov	r15, r1
    9f40:	b7 01       	movw	r22, r14
    9f42:	a6 01       	movw	r20, r12
    9f44:	f8 01       	movw	r30, r16
    9f46:	80 81       	ld	r24, Z
    9f48:	91 81       	ldd	r25, Z+1	; 0x01
    9f4a:	22 de       	rcall	.-956    	; 0x9b90 <get_fat.isra.7>
    9f4c:	61 15       	cp	r22, r1
    9f4e:	71 05       	cpc	r23, r1
    9f50:	81 05       	cpc	r24, r1
    9f52:	91 05       	cpc	r25, r1
    9f54:	91 f0       	breq	.+36     	; 0x9f7a <create_chain+0x104>
    9f56:	61 30       	cpi	r22, 0x01	; 1
    9f58:	71 05       	cpc	r23, r1
    9f5a:	81 05       	cpc	r24, r1
    9f5c:	91 05       	cpc	r25, r1
    9f5e:	09 f4       	brne	.+2      	; 0x9f62 <create_chain+0xec>
    9f60:	4b c0       	rjmp	.+150    	; 0x9ff8 <create_chain+0x182>
    9f62:	6f 3f       	cpi	r22, 0xFF	; 255
    9f64:	7f 4f       	sbci	r23, 0xFF	; 255
    9f66:	8f 4f       	sbci	r24, 0xFF	; 255
    9f68:	9f 4f       	sbci	r25, 0xFF	; 255
    9f6a:	09 f4       	brne	.+2      	; 0x9f6e <create_chain+0xf8>
    9f6c:	b6 cf       	rjmp	.-148    	; 0x9eda <create_chain+0x64>
    9f6e:	c8 14       	cp	r12, r8
    9f70:	d9 04       	cpc	r13, r9
    9f72:	ea 04       	cpc	r14, r10
    9f74:	fb 04       	cpc	r15, r11
    9f76:	49 f6       	brne	.-110    	; 0x9f0a <create_chain+0x94>
    9f78:	dc cf       	rjmp	.-72     	; 0x9f32 <create_chain+0xbc>
    9f7a:	0f ef       	ldi	r16, 0xFF	; 255
    9f7c:	1f ef       	ldi	r17, 0xFF	; 255
    9f7e:	98 01       	movw	r18, r16
    9f80:	b7 01       	movw	r22, r14
    9f82:	a6 01       	movw	r20, r12
    9f84:	ce 01       	movw	r24, r28
    9f86:	07 dd       	rcall	.-1522   	; 0x9996 <put_fat>
    9f88:	00 97       	sbiw	r24, 0x00	; 0
    9f8a:	99 f5       	brne	.+102    	; 0x9ff2 <create_chain+0x17c>
    9f8c:	41 14       	cp	r4, r1
    9f8e:	51 04       	cpc	r5, r1
    9f90:	61 04       	cpc	r6, r1
    9f92:	71 04       	cpc	r7, r1
    9f94:	e9 f4       	brne	.+58     	; 0x9fd0 <create_chain+0x15a>
    9f96:	cd 86       	std	Y+13, r12	; 0x0d
    9f98:	de 86       	std	Y+14, r13	; 0x0e
    9f9a:	ef 86       	std	Y+15, r14	; 0x0f
    9f9c:	f8 8a       	std	Y+16, r15	; 0x10
    9f9e:	89 89       	ldd	r24, Y+17	; 0x11
    9fa0:	9a 89       	ldd	r25, Y+18	; 0x12
    9fa2:	ab 89       	ldd	r26, Y+19	; 0x13
    9fa4:	bc 89       	ldd	r27, Y+20	; 0x14
    9fa6:	49 8d       	ldd	r20, Y+25	; 0x19
    9fa8:	5a 8d       	ldd	r21, Y+26	; 0x1a
    9faa:	6b 8d       	ldd	r22, Y+27	; 0x1b
    9fac:	7c 8d       	ldd	r23, Y+28	; 0x1c
    9fae:	42 50       	subi	r20, 0x02	; 2
    9fb0:	51 09       	sbc	r21, r1
    9fb2:	61 09       	sbc	r22, r1
    9fb4:	71 09       	sbc	r23, r1
    9fb6:	84 17       	cp	r24, r20
    9fb8:	95 07       	cpc	r25, r21
    9fba:	a6 07       	cpc	r26, r22
    9fbc:	b7 07       	cpc	r27, r23
    9fbe:	88 f4       	brcc	.+34     	; 0x9fe2 <create_chain+0x16c>
    9fc0:	01 97       	sbiw	r24, 0x01	; 1
    9fc2:	a1 09       	sbc	r26, r1
    9fc4:	b1 09       	sbc	r27, r1
    9fc6:	89 8b       	std	Y+17, r24	; 0x11
    9fc8:	9a 8b       	std	Y+18, r25	; 0x12
    9fca:	ab 8b       	std	Y+19, r26	; 0x13
    9fcc:	bc 8b       	std	Y+20, r27	; 0x14
    9fce:	09 c0       	rjmp	.+18     	; 0x9fe2 <create_chain+0x16c>
    9fd0:	97 01       	movw	r18, r14
    9fd2:	86 01       	movw	r16, r12
    9fd4:	b3 01       	movw	r22, r6
    9fd6:	a2 01       	movw	r20, r4
    9fd8:	ce 01       	movw	r24, r28
    9fda:	dd dc       	rcall	.-1606   	; 0x9996 <put_fat>
    9fdc:	00 97       	sbiw	r24, 0x00	; 0
    9fde:	d9 f2       	breq	.-74     	; 0x9f96 <create_chain+0x120>
    9fe0:	08 c0       	rjmp	.+16     	; 0x9ff2 <create_chain+0x17c>
    9fe2:	8c 81       	ldd	r24, Y+4	; 0x04
    9fe4:	81 60       	ori	r24, 0x01	; 1
    9fe6:	8c 83       	std	Y+4, r24	; 0x04
    9fe8:	4c 2d       	mov	r20, r12
    9fea:	3d 2d       	mov	r19, r13
    9fec:	2e 2d       	mov	r18, r14
    9fee:	9f 2d       	mov	r25, r15
    9ff0:	0b c0       	rjmp	.+22     	; 0xa008 <create_chain+0x192>
    9ff2:	01 97       	sbiw	r24, 0x01	; 1
    9ff4:	09 f4       	brne	.+2      	; 0x9ff8 <create_chain+0x182>
    9ff6:	71 cf       	rjmp	.-286    	; 0x9eda <create_chain+0x64>
    9ff8:	41 e0       	ldi	r20, 0x01	; 1
    9ffa:	30 e0       	ldi	r19, 0x00	; 0
    9ffc:	20 e0       	ldi	r18, 0x00	; 0
    9ffe:	90 e0       	ldi	r25, 0x00	; 0
    a000:	03 c0       	rjmp	.+6      	; 0xa008 <create_chain+0x192>
    a002:	46 2f       	mov	r20, r22
    a004:	37 2f       	mov	r19, r23
    a006:	28 2f       	mov	r18, r24
    a008:	64 2f       	mov	r22, r20
    a00a:	73 2f       	mov	r23, r19
    a00c:	82 2f       	mov	r24, r18
    a00e:	cd b7       	in	r28, 0x3d	; 61
    a010:	de b7       	in	r29, 0x3e	; 62
    a012:	e0 e1       	ldi	r30, 0x10	; 16
    a014:	0c 94 31 e8 	jmp	0x1d062	; 0x1d062 <__epilogue_restores__+0x4>

0000a018 <remove_chain>:
    a018:	4f 92       	push	r4
    a01a:	5f 92       	push	r5
    a01c:	6f 92       	push	r6
    a01e:	7f 92       	push	r7
    a020:	af 92       	push	r10
    a022:	bf 92       	push	r11
    a024:	cf 92       	push	r12
    a026:	df 92       	push	r13
    a028:	ef 92       	push	r14
    a02a:	ff 92       	push	r15
    a02c:	0f 93       	push	r16
    a02e:	1f 93       	push	r17
    a030:	cf 93       	push	r28
    a032:	df 93       	push	r29
    a034:	5c 01       	movw	r10, r24
    a036:	6a 01       	movw	r12, r20
    a038:	7b 01       	movw	r14, r22
    a03a:	b9 01       	movw	r22, r18
    a03c:	a8 01       	movw	r20, r16
    a03e:	22 e0       	ldi	r18, 0x02	; 2
    a040:	c2 16       	cp	r12, r18
    a042:	d1 04       	cpc	r13, r1
    a044:	e1 04       	cpc	r14, r1
    a046:	f1 04       	cpc	r15, r1
    a048:	10 f4       	brcc	.+4      	; 0xa04e <remove_chain+0x36>
    a04a:	22 e0       	ldi	r18, 0x02	; 2
    a04c:	27 c0       	rjmp	.+78     	; 0xa09c <remove_chain+0x84>
    a04e:	fc 01       	movw	r30, r24
    a050:	c0 81       	ld	r28, Z
    a052:	d1 81       	ldd	r29, Z+1	; 0x01
    a054:	89 8d       	ldd	r24, Y+25	; 0x19
    a056:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a058:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a05a:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a05c:	c8 16       	cp	r12, r24
    a05e:	d9 06       	cpc	r13, r25
    a060:	ea 06       	cpc	r14, r26
    a062:	fb 06       	cpc	r15, r27
    a064:	90 f7       	brcc	.-28     	; 0xa04a <remove_chain+0x32>
    a066:	41 15       	cp	r20, r1
    a068:	51 05       	cpc	r21, r1
    a06a:	61 05       	cpc	r22, r1
    a06c:	71 05       	cpc	r23, r1
    a06e:	41 f0       	breq	.+16     	; 0xa080 <remove_chain+0x68>
    a070:	0f ef       	ldi	r16, 0xFF	; 255
    a072:	1f ef       	ldi	r17, 0xFF	; 255
    a074:	98 01       	movw	r18, r16
    a076:	ce 01       	movw	r24, r28
    a078:	8e dc       	rcall	.-1764   	; 0x9996 <put_fat>
    a07a:	00 97       	sbiw	r24, 0x00	; 0
    a07c:	09 f0       	breq	.+2      	; 0xa080 <remove_chain+0x68>
    a07e:	4c c0       	rjmp	.+152    	; 0xa118 <remove_chain+0x100>
    a080:	b7 01       	movw	r22, r14
    a082:	a6 01       	movw	r20, r12
    a084:	f5 01       	movw	r30, r10
    a086:	80 81       	ld	r24, Z
    a088:	91 81       	ldd	r25, Z+1	; 0x01
    a08a:	82 dd       	rcall	.-1276   	; 0x9b90 <get_fat.isra.7>
    a08c:	2b 01       	movw	r4, r22
    a08e:	3c 01       	movw	r6, r24
    a090:	61 15       	cp	r22, r1
    a092:	71 05       	cpc	r23, r1
    a094:	81 05       	cpc	r24, r1
    a096:	91 05       	cpc	r25, r1
    a098:	19 f4       	brne	.+6      	; 0xa0a0 <remove_chain+0x88>
    a09a:	20 e0       	ldi	r18, 0x00	; 0
    a09c:	90 e0       	ldi	r25, 0x00	; 0
    a09e:	3d c0       	rjmp	.+122    	; 0xa11a <remove_chain+0x102>
    a0a0:	61 30       	cpi	r22, 0x01	; 1
    a0a2:	71 05       	cpc	r23, r1
    a0a4:	81 05       	cpc	r24, r1
    a0a6:	91 05       	cpc	r25, r1
    a0a8:	81 f2       	breq	.-96     	; 0xa04a <remove_chain+0x32>
    a0aa:	6f 3f       	cpi	r22, 0xFF	; 255
    a0ac:	7f 4f       	sbci	r23, 0xFF	; 255
    a0ae:	8f 4f       	sbci	r24, 0xFF	; 255
    a0b0:	9f 4f       	sbci	r25, 0xFF	; 255
    a0b2:	81 f1       	breq	.+96     	; 0xa114 <remove_chain+0xfc>
    a0b4:	00 e0       	ldi	r16, 0x00	; 0
    a0b6:	10 e0       	ldi	r17, 0x00	; 0
    a0b8:	98 01       	movw	r18, r16
    a0ba:	b7 01       	movw	r22, r14
    a0bc:	a6 01       	movw	r20, r12
    a0be:	ce 01       	movw	r24, r28
    a0c0:	6a dc       	rcall	.-1836   	; 0x9996 <put_fat>
    a0c2:	00 97       	sbiw	r24, 0x00	; 0
    a0c4:	49 f5       	brne	.+82     	; 0xa118 <remove_chain+0x100>
    a0c6:	89 89       	ldd	r24, Y+17	; 0x11
    a0c8:	9a 89       	ldd	r25, Y+18	; 0x12
    a0ca:	ab 89       	ldd	r26, Y+19	; 0x13
    a0cc:	bc 89       	ldd	r27, Y+20	; 0x14
    a0ce:	49 8d       	ldd	r20, Y+25	; 0x19
    a0d0:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a0d2:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a0d4:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a0d6:	6a 01       	movw	r12, r20
    a0d8:	7b 01       	movw	r14, r22
    a0da:	e2 e0       	ldi	r30, 0x02	; 2
    a0dc:	ce 1a       	sub	r12, r30
    a0de:	d1 08       	sbc	r13, r1
    a0e0:	e1 08       	sbc	r14, r1
    a0e2:	f1 08       	sbc	r15, r1
    a0e4:	8c 15       	cp	r24, r12
    a0e6:	9d 05       	cpc	r25, r13
    a0e8:	ae 05       	cpc	r26, r14
    a0ea:	bf 05       	cpc	r27, r15
    a0ec:	50 f4       	brcc	.+20     	; 0xa102 <remove_chain+0xea>
    a0ee:	01 96       	adiw	r24, 0x01	; 1
    a0f0:	a1 1d       	adc	r26, r1
    a0f2:	b1 1d       	adc	r27, r1
    a0f4:	89 8b       	std	Y+17, r24	; 0x11
    a0f6:	9a 8b       	std	Y+18, r25	; 0x12
    a0f8:	ab 8b       	std	Y+19, r26	; 0x13
    a0fa:	bc 8b       	std	Y+20, r27	; 0x14
    a0fc:	8c 81       	ldd	r24, Y+4	; 0x04
    a0fe:	81 60       	ori	r24, 0x01	; 1
    a100:	8c 83       	std	Y+4, r24	; 0x04
    a102:	73 01       	movw	r14, r6
    a104:	62 01       	movw	r12, r4
    a106:	44 16       	cp	r4, r20
    a108:	55 06       	cpc	r5, r21
    a10a:	66 06       	cpc	r6, r22
    a10c:	77 06       	cpc	r7, r23
    a10e:	08 f4       	brcc	.+2      	; 0xa112 <remove_chain+0xfa>
    a110:	b7 cf       	rjmp	.-146    	; 0xa080 <remove_chain+0x68>
    a112:	c3 cf       	rjmp	.-122    	; 0xa09a <remove_chain+0x82>
    a114:	21 e0       	ldi	r18, 0x01	; 1
    a116:	c2 cf       	rjmp	.-124    	; 0xa09c <remove_chain+0x84>
    a118:	28 2f       	mov	r18, r24
    a11a:	82 2f       	mov	r24, r18
    a11c:	df 91       	pop	r29
    a11e:	cf 91       	pop	r28
    a120:	1f 91       	pop	r17
    a122:	0f 91       	pop	r16
    a124:	ff 90       	pop	r15
    a126:	ef 90       	pop	r14
    a128:	df 90       	pop	r13
    a12a:	cf 90       	pop	r12
    a12c:	bf 90       	pop	r11
    a12e:	af 90       	pop	r10
    a130:	7f 90       	pop	r7
    a132:	6f 90       	pop	r6
    a134:	5f 90       	pop	r5
    a136:	4f 90       	pop	r4
    a138:	08 95       	ret

0000a13a <get_fileinfo>:
    a13a:	a0 e0       	ldi	r26, 0x00	; 0
    a13c:	b0 e0       	ldi	r27, 0x00	; 0
    a13e:	e3 ea       	ldi	r30, 0xA3	; 163
    a140:	f0 e5       	ldi	r31, 0x50	; 80
    a142:	0c 94 1b e8 	jmp	0x1d036	; 0x1d036 <__prologue_saves__+0x10>
    a146:	dc 01       	movw	r26, r24
    a148:	cd 90       	ld	r12, X+
    a14a:	dc 90       	ld	r13, X
    a14c:	11 97       	sbiw	r26, 0x01	; 1
    a14e:	fb 01       	movw	r30, r22
    a150:	16 8a       	std	Z+22, r1	; 0x16
    a152:	56 96       	adiw	r26, 0x16	; 22
    a154:	0d 91       	ld	r16, X+
    a156:	1d 91       	ld	r17, X+
    a158:	2d 91       	ld	r18, X+
    a15a:	3c 91       	ld	r19, X
    a15c:	59 97       	sbiw	r26, 0x19	; 25
    a15e:	01 15       	cp	r16, r1
    a160:	11 05       	cpc	r17, r1
    a162:	21 05       	cpc	r18, r1
    a164:	31 05       	cpc	r19, r1
    a166:	09 f4       	brne	.+2      	; 0xa16a <get_fileinfo+0x30>
    a168:	bb c0       	rjmp	.+374    	; 0xa2e0 <get_fileinfo+0x1a6>
    a16a:	eb 01       	movw	r28, r22
    a16c:	8c 01       	movw	r16, r24
    a16e:	fc 01       	movw	r30, r24
    a170:	80 a5       	ldd	r24, Z+40	; 0x28
    a172:	91 a5       	ldd	r25, Z+41	; 0x29
    a174:	a2 a5       	ldd	r26, Z+42	; 0x2a
    a176:	b3 a5       	ldd	r27, Z+43	; 0x2b
    a178:	8f 3f       	cpi	r24, 0xFF	; 255
    a17a:	9f 4f       	sbci	r25, 0xFF	; 255
    a17c:	af 4f       	sbci	r26, 0xFF	; 255
    a17e:	bf 4f       	sbci	r27, 0xFF	; 255
    a180:	59 f1       	breq	.+86     	; 0xa1d8 <get_fileinfo+0x9e>
    a182:	5b 01       	movw	r10, r22
    a184:	26 e1       	ldi	r18, 0x16	; 22
    a186:	a2 0e       	add	r10, r18
    a188:	b1 1c       	adc	r11, r1
    a18a:	e1 2c       	mov	r14, r1
    a18c:	f1 2c       	mov	r15, r1
    a18e:	d6 01       	movw	r26, r12
    a190:	1b 96       	adiw	r26, 0x0b	; 11
    a192:	ed 91       	ld	r30, X+
    a194:	fc 91       	ld	r31, X
    a196:	1c 97       	sbiw	r26, 0x0c	; 12
    a198:	c7 01       	movw	r24, r14
    a19a:	88 0f       	add	r24, r24
    a19c:	99 1f       	adc	r25, r25
    a19e:	e8 0f       	add	r30, r24
    a1a0:	f9 1f       	adc	r31, r25
    a1a2:	80 81       	ld	r24, Z
    a1a4:	91 81       	ldd	r25, Z+1	; 0x01
    a1a6:	00 97       	sbiw	r24, 0x00	; 0
    a1a8:	99 f0       	breq	.+38     	; 0xa1d0 <get_fileinfo+0x96>
    a1aa:	60 e0       	ldi	r22, 0x00	; 0
    a1ac:	70 e0       	ldi	r23, 0x00	; 0
    a1ae:	0e 94 fe 68 	call	0xd1fc	; 0xd1fc <ff_convert>
    a1b2:	00 97       	sbiw	r24, 0x00	; 0
    a1b4:	59 f0       	breq	.+22     	; 0xa1cc <get_fileinfo+0x92>
    a1b6:	af ef       	ldi	r26, 0xFF	; 255
    a1b8:	ea 16       	cp	r14, r26
    a1ba:	f1 04       	cpc	r15, r1
    a1bc:	39 f0       	breq	.+14     	; 0xa1cc <get_fileinfo+0x92>
    a1be:	bf ef       	ldi	r27, 0xFF	; 255
    a1c0:	eb 1a       	sub	r14, r27
    a1c2:	fb 0a       	sbc	r15, r27
    a1c4:	f5 01       	movw	r30, r10
    a1c6:	81 93       	st	Z+, r24
    a1c8:	5f 01       	movw	r10, r30
    a1ca:	e1 cf       	rjmp	.-62     	; 0xa18e <get_fileinfo+0x54>
    a1cc:	e1 2c       	mov	r14, r1
    a1ce:	f1 2c       	mov	r15, r1
    a1d0:	fe 01       	movw	r30, r28
    a1d2:	ee 0d       	add	r30, r14
    a1d4:	ff 1d       	adc	r31, r15
    a1d6:	16 8a       	std	Z+22, r1	; 0x16
    a1d8:	4e 89       	ldd	r20, Y+22	; 0x16
    a1da:	50 e0       	ldi	r21, 0x00	; 0
    a1dc:	20 e0       	ldi	r18, 0x00	; 0
    a1de:	30 e0       	ldi	r19, 0x00	; 0
    a1e0:	80 e0       	ldi	r24, 0x00	; 0
    a1e2:	90 e0       	ldi	r25, 0x00	; 0
    a1e4:	6e e2       	ldi	r22, 0x2E	; 46
    a1e6:	d6 2e       	mov	r13, r22
    a1e8:	fc 01       	movw	r30, r24
    a1ea:	31 96       	adiw	r30, 0x01	; 1
    a1ec:	d8 01       	movw	r26, r16
    a1ee:	5a 96       	adiw	r26, 0x1a	; 26
    a1f0:	6d 91       	ld	r22, X+
    a1f2:	7c 91       	ld	r23, X
    a1f4:	5b 97       	sbiw	r26, 0x1b	; 27
    a1f6:	db 01       	movw	r26, r22
    a1f8:	a8 0f       	add	r26, r24
    a1fa:	b9 1f       	adc	r27, r25
    a1fc:	8c 91       	ld	r24, X
    a1fe:	80 32       	cpi	r24, 0x20	; 32
    a200:	e1 f1       	breq	.+120    	; 0xa27a <get_fileinfo+0x140>
    a202:	85 30       	cpi	r24, 0x05	; 5
    a204:	09 f4       	brne	.+2      	; 0xa208 <get_fileinfo+0xce>
    a206:	85 ee       	ldi	r24, 0xE5	; 229
    a208:	e9 30       	cpi	r30, 0x09	; 9
    a20a:	f1 05       	cpc	r31, r1
    a20c:	69 f4       	brne	.+26     	; 0xa228 <get_fileinfo+0xee>
    a20e:	de 01       	movw	r26, r28
    a210:	a2 0f       	add	r26, r18
    a212:	b3 1f       	adc	r27, r19
    a214:	41 15       	cp	r20, r1
    a216:	51 05       	cpc	r21, r1
    a218:	19 f4       	brne	.+6      	; 0xa220 <get_fileinfo+0xe6>
    a21a:	56 96       	adiw	r26, 0x16	; 22
    a21c:	dc 92       	st	X, r13
    a21e:	56 97       	sbiw	r26, 0x16	; 22
    a220:	19 96       	adiw	r26, 0x09	; 9
    a222:	dc 92       	st	X, r13
    a224:	2f 5f       	subi	r18, 0xFF	; 255
    a226:	3f 4f       	sbci	r19, 0xFF	; 255
    a228:	7e 01       	movw	r14, r28
    a22a:	e2 0e       	add	r14, r18
    a22c:	f3 1e       	adc	r15, r19
    a22e:	d7 01       	movw	r26, r14
    a230:	19 96       	adiw	r26, 0x09	; 9
    a232:	8c 93       	st	X, r24
    a234:	41 15       	cp	r20, r1
    a236:	51 05       	cpc	r21, r1
    a238:	f1 f4       	brne	.+60     	; 0xa276 <get_fileinfo+0x13c>
    a23a:	9f eb       	ldi	r25, 0xBF	; 191
    a23c:	98 0f       	add	r25, r24
    a23e:	9a 31       	cpi	r25, 0x1A	; 26
    a240:	b8 f4       	brcc	.+46     	; 0xa270 <get_fileinfo+0x136>
    a242:	d8 01       	movw	r26, r16
    a244:	5a 96       	adiw	r26, 0x1a	; 26
    a246:	6d 91       	ld	r22, X+
    a248:	7c 91       	ld	r23, X
    a24a:	5b 97       	sbiw	r26, 0x1b	; 27
    a24c:	db 01       	movw	r26, r22
    a24e:	1c 96       	adiw	r26, 0x0c	; 12
    a250:	6c 91       	ld	r22, X
    a252:	a6 2f       	mov	r26, r22
    a254:	b0 e0       	ldi	r27, 0x00	; 0
    a256:	e9 30       	cpi	r30, 0x09	; 9
    a258:	f1 05       	cpc	r31, r1
    a25a:	18 f4       	brcc	.+6      	; 0xa262 <get_fileinfo+0x128>
    a25c:	68 e0       	ldi	r22, 0x08	; 8
    a25e:	70 e0       	ldi	r23, 0x00	; 0
    a260:	02 c0       	rjmp	.+4      	; 0xa266 <get_fileinfo+0x12c>
    a262:	60 e1       	ldi	r22, 0x10	; 16
    a264:	70 e0       	ldi	r23, 0x00	; 0
    a266:	6a 23       	and	r22, r26
    a268:	7b 23       	and	r23, r27
    a26a:	67 2b       	or	r22, r23
    a26c:	09 f0       	breq	.+2      	; 0xa270 <get_fileinfo+0x136>
    a26e:	80 5e       	subi	r24, 0xE0	; 224
    a270:	d7 01       	movw	r26, r14
    a272:	56 96       	adiw	r26, 0x16	; 22
    a274:	8c 93       	st	X, r24
    a276:	2f 5f       	subi	r18, 0xFF	; 255
    a278:	3f 4f       	sbci	r19, 0xFF	; 255
    a27a:	cf 01       	movw	r24, r30
    a27c:	3b 97       	sbiw	r30, 0x0b	; 11
    a27e:	09 f0       	breq	.+2      	; 0xa282 <get_fileinfo+0x148>
    a280:	b3 cf       	rjmp	.-154    	; 0xa1e8 <get_fileinfo+0xae>
    a282:	45 2b       	or	r20, r21
    a284:	71 f4       	brne	.+28     	; 0xa2a2 <get_fileinfo+0x168>
    a286:	fe 01       	movw	r30, r28
    a288:	e2 0f       	add	r30, r18
    a28a:	f3 1f       	adc	r31, r19
    a28c:	16 8a       	std	Z+22, r1	; 0x16
    a28e:	d8 01       	movw	r26, r16
    a290:	5a 96       	adiw	r26, 0x1a	; 26
    a292:	ed 91       	ld	r30, X+
    a294:	fc 91       	ld	r31, X
    a296:	5b 97       	sbiw	r26, 0x1b	; 27
    a298:	84 85       	ldd	r24, Z+12	; 0x0c
    a29a:	81 11       	cpse	r24, r1
    a29c:	02 c0       	rjmp	.+4      	; 0xa2a2 <get_fileinfo+0x168>
    a29e:	20 e0       	ldi	r18, 0x00	; 0
    a2a0:	30 e0       	ldi	r19, 0x00	; 0
    a2a2:	fe 01       	movw	r30, r28
    a2a4:	e2 0f       	add	r30, r18
    a2a6:	f3 1f       	adc	r31, r19
    a2a8:	11 86       	std	Z+9, r1	; 0x09
    a2aa:	d8 01       	movw	r26, r16
    a2ac:	5a 96       	adiw	r26, 0x1a	; 26
    a2ae:	ed 91       	ld	r30, X+
    a2b0:	fc 91       	ld	r31, X
    a2b2:	5b 97       	sbiw	r26, 0x1b	; 27
    a2b4:	83 85       	ldd	r24, Z+11	; 0x0b
    a2b6:	88 87       	std	Y+8, r24	; 0x08
    a2b8:	5a 96       	adiw	r26, 0x1a	; 26
    a2ba:	0d 91       	ld	r16, X+
    a2bc:	1c 91       	ld	r17, X
    a2be:	5b 97       	sbiw	r26, 0x1b	; 27
    a2c0:	c8 01       	movw	r24, r16
    a2c2:	4c 96       	adiw	r24, 0x1c	; 28
    a2c4:	0e 94 cb 47 	call	0x8f96	; 0x8f96 <ld_dword>
    a2c8:	68 83       	st	Y, r22
    a2ca:	79 83       	std	Y+1, r23	; 0x01
    a2cc:	8a 83       	std	Y+2, r24	; 0x02
    a2ce:	9b 83       	std	Y+3, r25	; 0x03
    a2d0:	c8 01       	movw	r24, r16
    a2d2:	46 96       	adiw	r24, 0x16	; 22
    a2d4:	0e 94 cb 47 	call	0x8f96	; 0x8f96 <ld_dword>
    a2d8:	7f 83       	std	Y+7, r23	; 0x07
    a2da:	6e 83       	std	Y+6, r22	; 0x06
    a2dc:	9d 83       	std	Y+5, r25	; 0x05
    a2de:	8c 83       	std	Y+4, r24	; 0x04
    a2e0:	cd b7       	in	r28, 0x3d	; 61
    a2e2:	de b7       	in	r29, 0x3e	; 62
    a2e4:	ea e0       	ldi	r30, 0x0A	; 10
    a2e6:	0c 94 37 e8 	jmp	0x1d06e	; 0x1d06e <__epilogue_restores__+0x10>

0000a2ea <dir_next>:
    a2ea:	4f 92       	push	r4
    a2ec:	5f 92       	push	r5
    a2ee:	6f 92       	push	r6
    a2f0:	7f 92       	push	r7
    a2f2:	9f 92       	push	r9
    a2f4:	af 92       	push	r10
    a2f6:	bf 92       	push	r11
    a2f8:	cf 92       	push	r12
    a2fa:	df 92       	push	r13
    a2fc:	ef 92       	push	r14
    a2fe:	ff 92       	push	r15
    a300:	0f 93       	push	r16
    a302:	1f 93       	push	r17
    a304:	cf 93       	push	r28
    a306:	df 93       	push	r29
    a308:	5b 01       	movw	r10, r22
    a30a:	fc 01       	movw	r30, r24
    a30c:	46 89       	ldd	r20, Z+22	; 0x16
    a30e:	57 89       	ldd	r21, Z+23	; 0x17
    a310:	60 8d       	ldd	r22, Z+24	; 0x18
    a312:	71 8d       	ldd	r23, Z+25	; 0x19
    a314:	41 15       	cp	r20, r1
    a316:	51 05       	cpc	r21, r1
    a318:	61 05       	cpc	r22, r1
    a31a:	71 05       	cpc	r23, r1
    a31c:	09 f4       	brne	.+2      	; 0xa320 <dir_next+0x36>
    a31e:	f8 c0       	rjmp	.+496    	; 0xa510 <dir_next+0x226>
    a320:	c6 84       	ldd	r12, Z+14	; 0x0e
    a322:	d7 84       	ldd	r13, Z+15	; 0x0f
    a324:	e0 88       	ldd	r14, Z+16	; 0x10
    a326:	f1 88       	ldd	r15, Z+17	; 0x11
    a328:	f0 e2       	ldi	r31, 0x20	; 32
    a32a:	cf 0e       	add	r12, r31
    a32c:	d1 1c       	adc	r13, r1
    a32e:	e1 1c       	adc	r14, r1
    a330:	f1 1c       	adc	r15, r1
    a332:	c1 14       	cp	r12, r1
    a334:	d1 04       	cpc	r13, r1
    a336:	20 e2       	ldi	r18, 0x20	; 32
    a338:	e2 06       	cpc	r14, r18
    a33a:	f1 04       	cpc	r15, r1
    a33c:	08 f0       	brcs	.+2      	; 0xa340 <dir_next+0x56>
    a33e:	e8 c0       	rjmp	.+464    	; 0xa510 <dir_next+0x226>
    a340:	8c 01       	movw	r16, r24
    a342:	fc 01       	movw	r30, r24
    a344:	c0 81       	ld	r28, Z
    a346:	d1 81       	ldd	r29, Z+1	; 0x01
    a348:	d7 01       	movw	r26, r14
    a34a:	c6 01       	movw	r24, r12
    a34c:	91 70       	andi	r25, 0x01	; 1
    a34e:	aa 27       	eor	r26, r26
    a350:	bb 27       	eor	r27, r27
    a352:	89 2b       	or	r24, r25
    a354:	8a 2b       	or	r24, r26
    a356:	8b 2b       	or	r24, r27
    a358:	09 f0       	breq	.+2      	; 0xa35c <dir_next+0x72>
    a35a:	ca c0       	rjmp	.+404    	; 0xa4f0 <dir_next+0x206>
    a35c:	4f 5f       	subi	r20, 0xFF	; 255
    a35e:	5f 4f       	sbci	r21, 0xFF	; 255
    a360:	6f 4f       	sbci	r22, 0xFF	; 255
    a362:	7f 4f       	sbci	r23, 0xFF	; 255
    a364:	46 8b       	std	Z+22, r20	; 0x16
    a366:	57 8b       	std	Z+23, r21	; 0x17
    a368:	60 8f       	std	Z+24, r22	; 0x18
    a36a:	71 8f       	std	Z+25, r23	; 0x19
    a36c:	42 89       	ldd	r20, Z+18	; 0x12
    a36e:	53 89       	ldd	r21, Z+19	; 0x13
    a370:	64 89       	ldd	r22, Z+20	; 0x14
    a372:	75 89       	ldd	r23, Z+21	; 0x15
    a374:	41 15       	cp	r20, r1
    a376:	51 05       	cpc	r21, r1
    a378:	61 05       	cpc	r22, r1
    a37a:	71 05       	cpc	r23, r1
    a37c:	c9 f4       	brne	.+50     	; 0xa3b0 <dir_next+0xc6>
    a37e:	8f 81       	ldd	r24, Y+7	; 0x07
    a380:	98 85       	ldd	r25, Y+8	; 0x08
    a382:	a0 e0       	ldi	r26, 0x00	; 0
    a384:	b0 e0       	ldi	r27, 0x00	; 0
    a386:	b7 01       	movw	r22, r14
    a388:	a6 01       	movw	r20, r12
    a38a:	35 e0       	ldi	r19, 0x05	; 5
    a38c:	76 95       	lsr	r23
    a38e:	67 95       	ror	r22
    a390:	57 95       	ror	r21
    a392:	47 95       	ror	r20
    a394:	3a 95       	dec	r19
    a396:	d1 f7       	brne	.-12     	; 0xa38c <dir_next+0xa2>
    a398:	48 17       	cp	r20, r24
    a39a:	59 07       	cpc	r21, r25
    a39c:	6a 07       	cpc	r22, r26
    a39e:	7b 07       	cpc	r23, r27
    a3a0:	08 f4       	brcc	.+2      	; 0xa3a4 <dir_next+0xba>
    a3a2:	a6 c0       	rjmp	.+332    	; 0xa4f0 <dir_next+0x206>
    a3a4:	f8 01       	movw	r30, r16
    a3a6:	16 8a       	std	Z+22, r1	; 0x16
    a3a8:	17 8a       	std	Z+23, r1	; 0x17
    a3aa:	10 8e       	std	Z+24, r1	; 0x18
    a3ac:	11 8e       	std	Z+25, r1	; 0x19
    a3ae:	b0 c0       	rjmp	.+352    	; 0xa510 <dir_next+0x226>
    a3b0:	89 85       	ldd	r24, Y+9	; 0x09
    a3b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    a3b4:	01 97       	sbiw	r24, 0x01	; 1
    a3b6:	a0 e0       	ldi	r26, 0x00	; 0
    a3b8:	b0 e0       	ldi	r27, 0x00	; 0
    a3ba:	26 01       	movw	r4, r12
    a3bc:	37 01       	movw	r6, r14
    a3be:	29 e0       	ldi	r18, 0x09	; 9
    a3c0:	76 94       	lsr	r7
    a3c2:	67 94       	ror	r6
    a3c4:	57 94       	ror	r5
    a3c6:	47 94       	ror	r4
    a3c8:	2a 95       	dec	r18
    a3ca:	d1 f7       	brne	.-12     	; 0xa3c0 <dir_next+0xd6>
    a3cc:	84 21       	and	r24, r4
    a3ce:	95 21       	and	r25, r5
    a3d0:	a6 21       	and	r26, r6
    a3d2:	b7 21       	and	r27, r7
    a3d4:	89 2b       	or	r24, r25
    a3d6:	8a 2b       	or	r24, r26
    a3d8:	8b 2b       	or	r24, r27
    a3da:	09 f0       	breq	.+2      	; 0xa3de <dir_next+0xf4>
    a3dc:	89 c0       	rjmp	.+274    	; 0xa4f0 <dir_next+0x206>
    a3de:	ce 01       	movw	r24, r28
    a3e0:	d7 db       	rcall	.-2130   	; 0x9b90 <get_fat.isra.7>
    a3e2:	2b 01       	movw	r4, r22
    a3e4:	3c 01       	movw	r6, r24
    a3e6:	62 30       	cpi	r22, 0x02	; 2
    a3e8:	71 05       	cpc	r23, r1
    a3ea:	81 05       	cpc	r24, r1
    a3ec:	91 05       	cpc	r25, r1
    a3ee:	18 f4       	brcc	.+6      	; 0xa3f6 <dir_next+0x10c>
    a3f0:	82 e0       	ldi	r24, 0x02	; 2
    a3f2:	90 e0       	ldi	r25, 0x00	; 0
    a3f4:	92 c0       	rjmp	.+292    	; 0xa51a <dir_next+0x230>
    a3f6:	6f 3f       	cpi	r22, 0xFF	; 255
    a3f8:	7f 4f       	sbci	r23, 0xFF	; 255
    a3fa:	8f 4f       	sbci	r24, 0xFF	; 255
    a3fc:	9f 4f       	sbci	r25, 0xFF	; 255
    a3fe:	19 f4       	brne	.+6      	; 0xa406 <dir_next+0x11c>
    a400:	81 e0       	ldi	r24, 0x01	; 1
    a402:	90 e0       	ldi	r25, 0x00	; 0
    a404:	8a c0       	rjmp	.+276    	; 0xa51a <dir_next+0x230>
    a406:	89 8d       	ldd	r24, Y+25	; 0x19
    a408:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a40a:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a40c:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a40e:	48 16       	cp	r4, r24
    a410:	59 06       	cpc	r5, r25
    a412:	6a 06       	cpc	r6, r26
    a414:	7b 06       	cpc	r7, r27
    a416:	08 f4       	brcc	.+2      	; 0xa41a <dir_next+0x130>
    a418:	5c c0       	rjmp	.+184    	; 0xa4d2 <dir_next+0x1e8>
    a41a:	ab 28       	or	r10, r11
    a41c:	19 f2       	breq	.-122    	; 0xa3a4 <dir_next+0xba>
    a41e:	f8 01       	movw	r30, r16
    a420:	42 89       	ldd	r20, Z+18	; 0x12
    a422:	53 89       	ldd	r21, Z+19	; 0x13
    a424:	64 89       	ldd	r22, Z+20	; 0x14
    a426:	75 89       	ldd	r23, Z+21	; 0x15
    a428:	c8 01       	movw	r24, r16
    a42a:	25 dd       	rcall	.-1462   	; 0x9e76 <create_chain>
    a42c:	2b 01       	movw	r4, r22
    a42e:	3c 01       	movw	r6, r24
    a430:	61 15       	cp	r22, r1
    a432:	71 05       	cpc	r23, r1
    a434:	81 05       	cpc	r24, r1
    a436:	91 05       	cpc	r25, r1
    a438:	09 f4       	brne	.+2      	; 0xa43c <dir_next+0x152>
    a43a:	6d c0       	rjmp	.+218    	; 0xa516 <dir_next+0x22c>
    a43c:	61 30       	cpi	r22, 0x01	; 1
    a43e:	71 05       	cpc	r23, r1
    a440:	81 05       	cpc	r24, r1
    a442:	91 05       	cpc	r25, r1
    a444:	a9 f2       	breq	.-86     	; 0xa3f0 <dir_next+0x106>
    a446:	6f 3f       	cpi	r22, 0xFF	; 255
    a448:	7f 4f       	sbci	r23, 0xFF	; 255
    a44a:	8f 4f       	sbci	r24, 0xFF	; 255
    a44c:	9f 4f       	sbci	r25, 0xFF	; 255
    a44e:	c1 f2       	breq	.-80     	; 0xa400 <dir_next+0x116>
    a450:	ce 01       	movw	r24, r28
    a452:	0e 94 2d 49 	call	0x925a	; 0x925a <sync_window>
    a456:	89 2b       	or	r24, r25
    a458:	99 f6       	brne	.-90     	; 0xa400 <dir_next+0x116>
    a45a:	40 e0       	ldi	r20, 0x00	; 0
    a45c:	52 e0       	ldi	r21, 0x02	; 2
    a45e:	60 e0       	ldi	r22, 0x00	; 0
    a460:	70 e0       	ldi	r23, 0x00	; 0
    a462:	ce 01       	movw	r24, r28
    a464:	c5 96       	adiw	r24, 0x35	; 53
    a466:	0e 94 e6 47 	call	0x8fcc	; 0x8fcc <mem_set>
    a46a:	b3 01       	movw	r22, r6
    a46c:	a2 01       	movw	r20, r4
    a46e:	ce 01       	movw	r24, r28
    a470:	0e 94 ef 47 	call	0x8fde	; 0x8fde <clust2sect>
    a474:	69 ab       	std	Y+49, r22	; 0x31
    a476:	7a ab       	std	Y+50, r23	; 0x32
    a478:	8b ab       	std	Y+51, r24	; 0x33
    a47a:	9c ab       	std	Y+52, r25	; 0x34
    a47c:	a1 2c       	mov	r10, r1
    a47e:	b1 2c       	mov	r11, r1
    a480:	99 24       	eor	r9, r9
    a482:	93 94       	inc	r9
    a484:	89 85       	ldd	r24, Y+9	; 0x09
    a486:	9a 85       	ldd	r25, Y+10	; 0x0a
    a488:	a8 16       	cp	r10, r24
    a48a:	b9 06       	cpc	r11, r25
    a48c:	b0 f4       	brcc	.+44     	; 0xa4ba <dir_next+0x1d0>
    a48e:	9b 82       	std	Y+3, r9	; 0x03
    a490:	ce 01       	movw	r24, r28
    a492:	0e 94 dc 48 	call	0x91b8	; 0x91b8 <sync_window.part.3>
    a496:	89 2b       	or	r24, r25
    a498:	09 f0       	breq	.+2      	; 0xa49c <dir_next+0x1b2>
    a49a:	b2 cf       	rjmp	.-156    	; 0xa400 <dir_next+0x116>
    a49c:	8f ef       	ldi	r24, 0xFF	; 255
    a49e:	a8 1a       	sub	r10, r24
    a4a0:	b8 0a       	sbc	r11, r24
    a4a2:	89 a9       	ldd	r24, Y+49	; 0x31
    a4a4:	9a a9       	ldd	r25, Y+50	; 0x32
    a4a6:	ab a9       	ldd	r26, Y+51	; 0x33
    a4a8:	bc a9       	ldd	r27, Y+52	; 0x34
    a4aa:	01 96       	adiw	r24, 0x01	; 1
    a4ac:	a1 1d       	adc	r26, r1
    a4ae:	b1 1d       	adc	r27, r1
    a4b0:	89 ab       	std	Y+49, r24	; 0x31
    a4b2:	9a ab       	std	Y+50, r25	; 0x32
    a4b4:	ab ab       	std	Y+51, r26	; 0x33
    a4b6:	bc ab       	std	Y+52, r27	; 0x34
    a4b8:	e5 cf       	rjmp	.-54     	; 0xa484 <dir_next+0x19a>
    a4ba:	89 a9       	ldd	r24, Y+49	; 0x31
    a4bc:	9a a9       	ldd	r25, Y+50	; 0x32
    a4be:	ab a9       	ldd	r26, Y+51	; 0x33
    a4c0:	bc a9       	ldd	r27, Y+52	; 0x34
    a4c2:	8a 19       	sub	r24, r10
    a4c4:	9b 09       	sbc	r25, r11
    a4c6:	a1 09       	sbc	r26, r1
    a4c8:	b1 09       	sbc	r27, r1
    a4ca:	89 ab       	std	Y+49, r24	; 0x31
    a4cc:	9a ab       	std	Y+50, r25	; 0x32
    a4ce:	ab ab       	std	Y+51, r26	; 0x33
    a4d0:	bc ab       	std	Y+52, r27	; 0x34
    a4d2:	f8 01       	movw	r30, r16
    a4d4:	42 8a       	std	Z+18, r4	; 0x12
    a4d6:	53 8a       	std	Z+19, r5	; 0x13
    a4d8:	64 8a       	std	Z+20, r6	; 0x14
    a4da:	75 8a       	std	Z+21, r7	; 0x15
    a4dc:	b3 01       	movw	r22, r6
    a4de:	a2 01       	movw	r20, r4
    a4e0:	ce 01       	movw	r24, r28
    a4e2:	0e 94 ef 47 	call	0x8fde	; 0x8fde <clust2sect>
    a4e6:	f8 01       	movw	r30, r16
    a4e8:	66 8b       	std	Z+22, r22	; 0x16
    a4ea:	77 8b       	std	Z+23, r23	; 0x17
    a4ec:	80 8f       	std	Z+24, r24	; 0x18
    a4ee:	91 8f       	std	Z+25, r25	; 0x19
    a4f0:	f8 01       	movw	r30, r16
    a4f2:	c6 86       	std	Z+14, r12	; 0x0e
    a4f4:	d7 86       	std	Z+15, r13	; 0x0f
    a4f6:	e0 8a       	std	Z+16, r14	; 0x10
    a4f8:	f1 8a       	std	Z+17, r15	; 0x11
    a4fa:	ce 01       	movw	r24, r28
    a4fc:	c5 96       	adiw	r24, 0x35	; 53
    a4fe:	e6 01       	movw	r28, r12
    a500:	d1 70       	andi	r29, 0x01	; 1
    a502:	c8 0f       	add	r28, r24
    a504:	d9 1f       	adc	r29, r25
    a506:	d3 8f       	std	Z+27, r29	; 0x1b
    a508:	c2 8f       	std	Z+26, r28	; 0x1a
    a50a:	80 e0       	ldi	r24, 0x00	; 0
    a50c:	90 e0       	ldi	r25, 0x00	; 0
    a50e:	05 c0       	rjmp	.+10     	; 0xa51a <dir_next+0x230>
    a510:	84 e0       	ldi	r24, 0x04	; 4
    a512:	90 e0       	ldi	r25, 0x00	; 0
    a514:	02 c0       	rjmp	.+4      	; 0xa51a <dir_next+0x230>
    a516:	87 e0       	ldi	r24, 0x07	; 7
    a518:	90 e0       	ldi	r25, 0x00	; 0
    a51a:	df 91       	pop	r29
    a51c:	cf 91       	pop	r28
    a51e:	1f 91       	pop	r17
    a520:	0f 91       	pop	r16
    a522:	ff 90       	pop	r15
    a524:	ef 90       	pop	r14
    a526:	df 90       	pop	r13
    a528:	cf 90       	pop	r12
    a52a:	bf 90       	pop	r11
    a52c:	af 90       	pop	r10
    a52e:	9f 90       	pop	r9
    a530:	7f 90       	pop	r7
    a532:	6f 90       	pop	r6
    a534:	5f 90       	pop	r5
    a536:	4f 90       	pop	r4
    a538:	08 95       	ret

0000a53a <dir_alloc>:
    a53a:	a0 e0       	ldi	r26, 0x00	; 0
    a53c:	b0 e0       	ldi	r27, 0x00	; 0
    a53e:	e3 ea       	ldi	r30, 0xA3	; 163
    a540:	f2 e5       	ldi	r31, 0x52	; 82
    a542:	0c 94 1d e8 	jmp	0x1d03a	; 0x1d03a <__prologue_saves__+0x14>
    a546:	ec 01       	movw	r28, r24
    a548:	6b 01       	movw	r12, r22
    a54a:	e8 80       	ld	r14, Y
    a54c:	f9 80       	ldd	r15, Y+1	; 0x01
    a54e:	40 e0       	ldi	r20, 0x00	; 0
    a550:	50 e0       	ldi	r21, 0x00	; 0
    a552:	ba 01       	movw	r22, r20
    a554:	d0 db       	rcall	.-2144   	; 0x9cf6 <dir_sdi>
    a556:	00 97       	sbiw	r24, 0x00	; 0
    a558:	01 f5       	brne	.+64     	; 0xa59a <dir_alloc+0x60>
    a55a:	00 e0       	ldi	r16, 0x00	; 0
    a55c:	10 e0       	ldi	r17, 0x00	; 0
    a55e:	4e 89       	ldd	r20, Y+22	; 0x16
    a560:	5f 89       	ldd	r21, Y+23	; 0x17
    a562:	68 8d       	ldd	r22, Y+24	; 0x18
    a564:	79 8d       	ldd	r23, Y+25	; 0x19
    a566:	c7 01       	movw	r24, r14
    a568:	0e 94 a2 49 	call	0x9344	; 0x9344 <move_window>
    a56c:	00 97       	sbiw	r24, 0x00	; 0
    a56e:	a9 f4       	brne	.+42     	; 0xa59a <dir_alloc+0x60>
    a570:	ea 8d       	ldd	r30, Y+26	; 0x1a
    a572:	fb 8d       	ldd	r31, Y+27	; 0x1b
    a574:	20 81       	ld	r18, Z
    a576:	25 3e       	cpi	r18, 0xE5	; 229
    a578:	11 f0       	breq	.+4      	; 0xa57e <dir_alloc+0x44>
    a57a:	21 11       	cpse	r18, r1
    a57c:	06 c0       	rjmp	.+12     	; 0xa58a <dir_alloc+0x50>
    a57e:	0f 5f       	subi	r16, 0xFF	; 255
    a580:	1f 4f       	sbci	r17, 0xFF	; 255
    a582:	0c 15       	cp	r16, r12
    a584:	1d 05       	cpc	r17, r13
    a586:	19 f4       	brne	.+6      	; 0xa58e <dir_alloc+0x54>
    a588:	0d c0       	rjmp	.+26     	; 0xa5a4 <dir_alloc+0x6a>
    a58a:	00 e0       	ldi	r16, 0x00	; 0
    a58c:	10 e0       	ldi	r17, 0x00	; 0
    a58e:	61 e0       	ldi	r22, 0x01	; 1
    a590:	70 e0       	ldi	r23, 0x00	; 0
    a592:	ce 01       	movw	r24, r28
    a594:	aa de       	rcall	.-684    	; 0xa2ea <dir_next>
    a596:	00 97       	sbiw	r24, 0x00	; 0
    a598:	11 f3       	breq	.-60     	; 0xa55e <dir_alloc+0x24>
    a59a:	84 30       	cpi	r24, 0x04	; 4
    a59c:	91 05       	cpc	r25, r1
    a59e:	11 f4       	brne	.+4      	; 0xa5a4 <dir_alloc+0x6a>
    a5a0:	87 e0       	ldi	r24, 0x07	; 7
    a5a2:	90 e0       	ldi	r25, 0x00	; 0
    a5a4:	cd b7       	in	r28, 0x3d	; 61
    a5a6:	de b7       	in	r29, 0x3e	; 62
    a5a8:	e8 e0       	ldi	r30, 0x08	; 8
    a5aa:	0c 94 39 e8 	jmp	0x1d072	; 0x1d072 <__epilogue_restores__+0x14>

0000a5ae <dir_read>:
    a5ae:	a0 e0       	ldi	r26, 0x00	; 0
    a5b0:	b0 e0       	ldi	r27, 0x00	; 0
    a5b2:	ed ed       	ldi	r30, 0xDD	; 221
    a5b4:	f2 e5       	ldi	r31, 0x52	; 82
    a5b6:	0c 94 17 e8 	jmp	0x1d02e	; 0x1d02e <__prologue_saves__+0x8>
    a5ba:	ec 01       	movw	r28, r24
    a5bc:	7b 01       	movw	r14, r22
    a5be:	a8 80       	ld	r10, Y
    a5c0:	b9 80       	ldd	r11, Y+1	; 0x01
    a5c2:	dd 24       	eor	r13, r13
    a5c4:	da 94       	dec	r13
    a5c6:	1f ef       	ldi	r17, 0xFF	; 255
    a5c8:	84 e0       	ldi	r24, 0x04	; 4
    a5ca:	90 e0       	ldi	r25, 0x00	; 0
    a5cc:	ad e0       	ldi	r26, 0x0D	; 13
    a5ce:	ca 2e       	mov	r12, r26
    a5d0:	4e 89       	ldd	r20, Y+22	; 0x16
    a5d2:	5f 89       	ldd	r21, Y+23	; 0x17
    a5d4:	68 8d       	ldd	r22, Y+24	; 0x18
    a5d6:	79 8d       	ldd	r23, Y+25	; 0x19
    a5d8:	41 15       	cp	r20, r1
    a5da:	51 05       	cpc	r21, r1
    a5dc:	61 05       	cpc	r22, r1
    a5de:	71 05       	cpc	r23, r1
    a5e0:	09 f4       	brne	.+2      	; 0xa5e4 <dir_read+0x36>
    a5e2:	9f c0       	rjmp	.+318    	; 0xa722 <dir_read+0x174>
    a5e4:	c5 01       	movw	r24, r10
    a5e6:	0e 94 a2 49 	call	0x9344	; 0x9344 <move_window>
    a5ea:	00 97       	sbiw	r24, 0x00	; 0
    a5ec:	09 f0       	breq	.+2      	; 0xa5f0 <dir_read+0x42>
    a5ee:	9b c0       	rjmp	.+310    	; 0xa726 <dir_read+0x178>
    a5f0:	aa 8d       	ldd	r26, Y+26	; 0x1a
    a5f2:	bb 8d       	ldd	r27, Y+27	; 0x1b
    a5f4:	0c 91       	ld	r16, X
    a5f6:	00 23       	and	r16, r16
    a5f8:	09 f4       	brne	.+2      	; 0xa5fc <dir_read+0x4e>
    a5fa:	9d c0       	rjmp	.+314    	; 0xa736 <dir_read+0x188>
    a5fc:	1b 96       	adiw	r26, 0x0b	; 11
    a5fe:	8c 91       	ld	r24, X
    a600:	1b 97       	sbiw	r26, 0x0b	; 11
    a602:	8f 73       	andi	r24, 0x3F	; 63
    a604:	8c 83       	std	Y+4, r24	; 0x04
    a606:	05 3e       	cpi	r16, 0xE5	; 229
    a608:	09 f4       	brne	.+2      	; 0xa60c <dir_read+0x5e>
    a60a:	82 c0       	rjmp	.+260    	; 0xa710 <dir_read+0x162>
    a60c:	0e 32       	cpi	r16, 0x2E	; 46
    a60e:	09 f4       	brne	.+2      	; 0xa612 <dir_read+0x64>
    a610:	7f c0       	rjmp	.+254    	; 0xa710 <dir_read+0x162>
    a612:	21 e0       	ldi	r18, 0x01	; 1
    a614:	30 e0       	ldi	r19, 0x00	; 0
    a616:	98 2f       	mov	r25, r24
    a618:	9f 71       	andi	r25, 0x1F	; 31
    a61a:	98 30       	cpi	r25, 0x08	; 8
    a61c:	11 f0       	breq	.+4      	; 0xa622 <dir_read+0x74>
    a61e:	20 e0       	ldi	r18, 0x00	; 0
    a620:	30 e0       	ldi	r19, 0x00	; 0
    a622:	2e 15       	cp	r18, r14
    a624:	3f 05       	cpc	r19, r15
    a626:	09 f0       	breq	.+2      	; 0xa62a <dir_read+0x7c>
    a628:	73 c0       	rjmp	.+230    	; 0xa710 <dir_read+0x162>
    a62a:	8f 30       	cpi	r24, 0x0F	; 15
    a62c:	09 f0       	breq	.+2      	; 0xa630 <dir_read+0x82>
    a62e:	60 c0       	rjmp	.+192    	; 0xa6f0 <dir_read+0x142>
    a630:	06 ff       	sbrs	r16, 6
    a632:	0d c0       	rjmp	.+26     	; 0xa64e <dir_read+0xa0>
    a634:	1d 96       	adiw	r26, 0x0d	; 13
    a636:	8c 91       	ld	r24, X
    a638:	1d 97       	sbiw	r26, 0x0d	; 13
    a63a:	0f 7b       	andi	r16, 0xBF	; 191
    a63c:	4e 85       	ldd	r20, Y+14	; 0x0e
    a63e:	5f 85       	ldd	r21, Y+15	; 0x0f
    a640:	68 89       	ldd	r22, Y+16	; 0x10
    a642:	79 89       	ldd	r23, Y+17	; 0x11
    a644:	48 a7       	std	Y+40, r20	; 0x28
    a646:	59 a7       	std	Y+41, r21	; 0x29
    a648:	6a a7       	std	Y+42, r22	; 0x2a
    a64a:	7b a7       	std	Y+43, r23	; 0x2b
    a64c:	03 c0       	rjmp	.+6      	; 0xa654 <dir_read+0xa6>
    a64e:	10 13       	cpse	r17, r16
    a650:	5f c0       	rjmp	.+190    	; 0xa710 <dir_read+0x162>
    a652:	8d 2d       	mov	r24, r13
    a654:	1d 96       	adiw	r26, 0x0d	; 13
    a656:	dc 90       	ld	r13, X
    a658:	1d 97       	sbiw	r26, 0x0d	; 13
    a65a:	d8 12       	cpse	r13, r24
    a65c:	58 c0       	rjmp	.+176    	; 0xa70e <dir_read+0x160>
    a65e:	5a 96       	adiw	r26, 0x1a	; 26
    a660:	8d 91       	ld	r24, X+
    a662:	9c 91       	ld	r25, X
    a664:	5b 97       	sbiw	r26, 0x1b	; 27
    a666:	89 2b       	or	r24, r25
    a668:	09 f0       	breq	.+2      	; 0xa66c <dir_read+0xbe>
    a66a:	52 c0       	rjmp	.+164    	; 0xa710 <dir_read+0x162>
    a66c:	f5 01       	movw	r30, r10
    a66e:	63 85       	ldd	r22, Z+11	; 0x0b
    a670:	74 85       	ldd	r23, Z+12	; 0x0c
    a672:	8c 91       	ld	r24, X
    a674:	8f 73       	andi	r24, 0x3F	; 63
    a676:	90 e0       	ldi	r25, 0x00	; 0
    a678:	01 97       	sbiw	r24, 0x01	; 1
    a67a:	c8 9e       	mul	r12, r24
    a67c:	90 01       	movw	r18, r0
    a67e:	c9 9e       	mul	r12, r25
    a680:	30 0d       	add	r19, r0
    a682:	11 24       	eor	r1, r1
    a684:	f1 ec       	ldi	r31, 0xC1	; 193
    a686:	6f 2e       	mov	r6, r31
    a688:	f2 e0       	ldi	r31, 0x02	; 2
    a68a:	7f 2e       	mov	r7, r31
    a68c:	41 e0       	ldi	r20, 0x01	; 1
    a68e:	50 e0       	ldi	r21, 0x00	; 0
    a690:	f3 01       	movw	r30, r6
    a692:	81 91       	ld	r24, Z+
    a694:	3f 01       	movw	r6, r30
    a696:	4d 01       	movw	r8, r26
    a698:	88 0e       	add	r8, r24
    a69a:	91 1c       	adc	r9, r1
    a69c:	f4 01       	movw	r30, r8
    a69e:	80 81       	ld	r24, Z
    a6a0:	91 81       	ldd	r25, Z+1	; 0x01
    a6a2:	41 15       	cp	r20, r1
    a6a4:	51 05       	cpc	r21, r1
    a6a6:	79 f0       	breq	.+30     	; 0xa6c6 <dir_read+0x118>
    a6a8:	2f 3f       	cpi	r18, 0xFF	; 255
    a6aa:	31 05       	cpc	r19, r1
    a6ac:	88 f5       	brcc	.+98     	; 0xa710 <dir_read+0x162>
    a6ae:	a9 01       	movw	r20, r18
    a6b0:	44 0f       	add	r20, r20
    a6b2:	55 1f       	adc	r21, r21
    a6b4:	46 0f       	add	r20, r22
    a6b6:	57 1f       	adc	r21, r23
    a6b8:	fa 01       	movw	r30, r20
    a6ba:	91 83       	std	Z+1, r25	; 0x01
    a6bc:	80 83       	st	Z, r24
    a6be:	ac 01       	movw	r20, r24
    a6c0:	2f 5f       	subi	r18, 0xFF	; 255
    a6c2:	3f 4f       	sbci	r19, 0xFF	; 255
    a6c4:	02 c0       	rjmp	.+4      	; 0xa6ca <dir_read+0x11c>
    a6c6:	01 96       	adiw	r24, 0x01	; 1
    a6c8:	19 f5       	brne	.+70     	; 0xa710 <dir_read+0x162>
    a6ca:	8e ec       	ldi	r24, 0xCE	; 206
    a6cc:	68 16       	cp	r6, r24
    a6ce:	82 e0       	ldi	r24, 0x02	; 2
    a6d0:	78 06       	cpc	r7, r24
    a6d2:	f1 f6       	brne	.-68     	; 0xa690 <dir_read+0xe2>
    a6d4:	8c 91       	ld	r24, X
    a6d6:	86 ff       	sbrs	r24, 6
    a6d8:	2b c0       	rjmp	.+86     	; 0xa730 <dir_read+0x182>
    a6da:	2f 3f       	cpi	r18, 0xFF	; 255
    a6dc:	31 05       	cpc	r19, r1
    a6de:	c0 f4       	brcc	.+48     	; 0xa710 <dir_read+0x162>
    a6e0:	22 0f       	add	r18, r18
    a6e2:	33 1f       	adc	r19, r19
    a6e4:	fb 01       	movw	r30, r22
    a6e6:	e2 0f       	add	r30, r18
    a6e8:	f3 1f       	adc	r31, r19
    a6ea:	11 82       	std	Z+1, r1	; 0x01
    a6ec:	10 82       	st	Z, r1
    a6ee:	20 c0       	rjmp	.+64     	; 0xa730 <dir_read+0x182>
    a6f0:	11 11       	cpse	r17, r1
    a6f2:	05 c0       	rjmp	.+10     	; 0xa6fe <dir_read+0x150>
    a6f4:	cd 01       	movw	r24, r26
    a6f6:	0e 94 53 48 	call	0x90a6	; 0x90a6 <sum_sfn>
    a6fa:	d8 16       	cp	r13, r24
    a6fc:	f9 f0       	breq	.+62     	; 0xa73c <dir_read+0x18e>
    a6fe:	8f ef       	ldi	r24, 0xFF	; 255
    a700:	9f ef       	ldi	r25, 0xFF	; 255
    a702:	dc 01       	movw	r26, r24
    a704:	88 a7       	std	Y+40, r24	; 0x28
    a706:	99 a7       	std	Y+41, r25	; 0x29
    a708:	aa a7       	std	Y+42, r26	; 0x2a
    a70a:	bb a7       	std	Y+43, r27	; 0x2b
    a70c:	17 c0       	rjmp	.+46     	; 0xa73c <dir_read+0x18e>
    a70e:	d8 2e       	mov	r13, r24
    a710:	1f ef       	ldi	r17, 0xFF	; 255
    a712:	60 e0       	ldi	r22, 0x00	; 0
    a714:	70 e0       	ldi	r23, 0x00	; 0
    a716:	ce 01       	movw	r24, r28
    a718:	e8 dd       	rcall	.-1072   	; 0xa2ea <dir_next>
    a71a:	00 97       	sbiw	r24, 0x00	; 0
    a71c:	09 f4       	brne	.+2      	; 0xa720 <dir_read+0x172>
    a71e:	58 cf       	rjmp	.-336    	; 0xa5d0 <dir_read+0x22>
    a720:	02 c0       	rjmp	.+4      	; 0xa726 <dir_read+0x178>
    a722:	00 97       	sbiw	r24, 0x00	; 0
    a724:	59 f0       	breq	.+22     	; 0xa73c <dir_read+0x18e>
    a726:	1e 8a       	std	Y+22, r1	; 0x16
    a728:	1f 8a       	std	Y+23, r1	; 0x17
    a72a:	18 8e       	std	Y+24, r1	; 0x18
    a72c:	19 8e       	std	Y+25, r1	; 0x19
    a72e:	08 c0       	rjmp	.+16     	; 0xa740 <dir_read+0x192>
    a730:	1f ef       	ldi	r17, 0xFF	; 255
    a732:	10 0f       	add	r17, r16
    a734:	ee cf       	rjmp	.-36     	; 0xa712 <dir_read+0x164>
    a736:	84 e0       	ldi	r24, 0x04	; 4
    a738:	90 e0       	ldi	r25, 0x00	; 0
    a73a:	f5 cf       	rjmp	.-22     	; 0xa726 <dir_read+0x178>
    a73c:	80 e0       	ldi	r24, 0x00	; 0
    a73e:	90 e0       	ldi	r25, 0x00	; 0
    a740:	cd b7       	in	r28, 0x3d	; 61
    a742:	de b7       	in	r29, 0x3e	; 62
    a744:	ee e0       	ldi	r30, 0x0E	; 14
    a746:	0c 94 33 e8 	jmp	0x1d066	; 0x1d066 <__epilogue_restores__+0x8>

0000a74a <dir_remove>:
    a74a:	a0 e0       	ldi	r26, 0x00	; 0
    a74c:	b0 e0       	ldi	r27, 0x00	; 0
    a74e:	eb ea       	ldi	r30, 0xAB	; 171
    a750:	f3 e5       	ldi	r31, 0x53	; 83
    a752:	0c 94 1b e8 	jmp	0x1d036	; 0x1d036 <__prologue_saves__+0x10>
    a756:	ec 01       	movw	r28, r24
    a758:	08 81       	ld	r16, Y
    a75a:	19 81       	ldd	r17, Y+1	; 0x01
    a75c:	ce 84       	ldd	r12, Y+14	; 0x0e
    a75e:	df 84       	ldd	r13, Y+15	; 0x0f
    a760:	e8 88       	ldd	r14, Y+16	; 0x10
    a762:	f9 88       	ldd	r15, Y+17	; 0x11
    a764:	48 a5       	ldd	r20, Y+40	; 0x28
    a766:	59 a5       	ldd	r21, Y+41	; 0x29
    a768:	6a a5       	ldd	r22, Y+42	; 0x2a
    a76a:	7b a5       	ldd	r23, Y+43	; 0x2b
    a76c:	4f 3f       	cpi	r20, 0xFF	; 255
    a76e:	8f ef       	ldi	r24, 0xFF	; 255
    a770:	58 07       	cpc	r21, r24
    a772:	68 07       	cpc	r22, r24
    a774:	78 07       	cpc	r23, r24
    a776:	29 f4       	brne	.+10     	; 0xa782 <dir_remove+0x38>
    a778:	85 ee       	ldi	r24, 0xE5	; 229
    a77a:	b8 2e       	mov	r11, r24
    a77c:	aa 24       	eor	r10, r10
    a77e:	a3 94       	inc	r10
    a780:	19 c0       	rjmp	.+50     	; 0xa7b4 <dir_remove+0x6a>
    a782:	ce 01       	movw	r24, r28
    a784:	b8 da       	rcall	.-2704   	; 0x9cf6 <dir_sdi>
    a786:	00 97       	sbiw	r24, 0x00	; 0
    a788:	19 f5       	brne	.+70     	; 0xa7d0 <dir_remove+0x86>
    a78a:	f6 cf       	rjmp	.-20     	; 0xa778 <dir_remove+0x2e>
    a78c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    a78e:	fb 8d       	ldd	r31, Y+27	; 0x1b
    a790:	b0 82       	st	Z, r11
    a792:	f8 01       	movw	r30, r16
    a794:	a3 82       	std	Z+3, r10	; 0x03
    a796:	4e 85       	ldd	r20, Y+14	; 0x0e
    a798:	5f 85       	ldd	r21, Y+15	; 0x0f
    a79a:	68 89       	ldd	r22, Y+16	; 0x10
    a79c:	79 89       	ldd	r23, Y+17	; 0x11
    a79e:	4c 15       	cp	r20, r12
    a7a0:	5d 05       	cpc	r21, r13
    a7a2:	6e 05       	cpc	r22, r14
    a7a4:	7f 05       	cpc	r23, r15
    a7a6:	a0 f4       	brcc	.+40     	; 0xa7d0 <dir_remove+0x86>
    a7a8:	60 e0       	ldi	r22, 0x00	; 0
    a7aa:	70 e0       	ldi	r23, 0x00	; 0
    a7ac:	ce 01       	movw	r24, r28
    a7ae:	9d dd       	rcall	.-1222   	; 0xa2ea <dir_next>
    a7b0:	00 97       	sbiw	r24, 0x00	; 0
    a7b2:	49 f4       	brne	.+18     	; 0xa7c6 <dir_remove+0x7c>
    a7b4:	4e 89       	ldd	r20, Y+22	; 0x16
    a7b6:	5f 89       	ldd	r21, Y+23	; 0x17
    a7b8:	68 8d       	ldd	r22, Y+24	; 0x18
    a7ba:	79 8d       	ldd	r23, Y+25	; 0x19
    a7bc:	c8 01       	movw	r24, r16
    a7be:	0e 94 a2 49 	call	0x9344	; 0x9344 <move_window>
    a7c2:	00 97       	sbiw	r24, 0x00	; 0
    a7c4:	19 f3       	breq	.-58     	; 0xa78c <dir_remove+0x42>
    a7c6:	84 30       	cpi	r24, 0x04	; 4
    a7c8:	91 05       	cpc	r25, r1
    a7ca:	11 f4       	brne	.+4      	; 0xa7d0 <dir_remove+0x86>
    a7cc:	82 e0       	ldi	r24, 0x02	; 2
    a7ce:	90 e0       	ldi	r25, 0x00	; 0
    a7d0:	cd b7       	in	r28, 0x3d	; 61
    a7d2:	de b7       	in	r29, 0x3e	; 62
    a7d4:	ea e0       	ldi	r30, 0x0A	; 10
    a7d6:	0c 94 37 e8 	jmp	0x1d06e	; 0x1d06e <__epilogue_restores__+0x10>

0000a7da <dir_find>:
    a7da:	a8 e0       	ldi	r26, 0x08	; 8
    a7dc:	b0 e0       	ldi	r27, 0x00	; 0
    a7de:	e3 ef       	ldi	r30, 0xF3	; 243
    a7e0:	f3 e5       	ldi	r31, 0x53	; 83
    a7e2:	0c 94 13 e8 	jmp	0x1d026	; 0x1d026 <__prologue_saves__>
    a7e6:	8c 01       	movw	r16, r24
    a7e8:	dc 01       	movw	r26, r24
    a7ea:	8d 90       	ld	r8, X+
    a7ec:	9c 90       	ld	r9, X
    a7ee:	40 e0       	ldi	r20, 0x00	; 0
    a7f0:	50 e0       	ldi	r21, 0x00	; 0
    a7f2:	ba 01       	movw	r22, r20
    a7f4:	80 da       	rcall	.-2816   	; 0x9cf6 <dir_sdi>
    a7f6:	00 97       	sbiw	r24, 0x00	; 0
    a7f8:	09 f0       	breq	.+2      	; 0xa7fc <dir_find+0x22>
    a7fa:	f3 c0       	rjmp	.+486    	; 0xa9e2 <dir_find+0x208>
    a7fc:	8f ef       	ldi	r24, 0xFF	; 255
    a7fe:	9f ef       	ldi	r25, 0xFF	; 255
    a800:	dc 01       	movw	r26, r24
    a802:	f8 01       	movw	r30, r16
    a804:	80 a7       	std	Z+40, r24	; 0x28
    a806:	91 a7       	std	Z+41, r25	; 0x29
    a808:	a2 a7       	std	Z+42, r26	; 0x2a
    a80a:	b3 a7       	std	Z+43, r27	; 0x2b
    a80c:	ee 24       	eor	r14, r14
    a80e:	ea 94       	dec	r14
    a810:	ff 24       	eor	r15, r15
    a812:	fa 94       	dec	r15
    a814:	44 24       	eor	r4, r4
    a816:	4a 94       	dec	r4
    a818:	54 2c       	mov	r5, r4
    a81a:	32 01       	movw	r6, r4
    a81c:	d8 01       	movw	r26, r16
    a81e:	56 96       	adiw	r26, 0x16	; 22
    a820:	4d 91       	ld	r20, X+
    a822:	5d 91       	ld	r21, X+
    a824:	6d 91       	ld	r22, X+
    a826:	7c 91       	ld	r23, X
    a828:	59 97       	sbiw	r26, 0x19	; 25
    a82a:	c4 01       	movw	r24, r8
    a82c:	0e 94 a2 49 	call	0x9344	; 0x9344 <move_window>
    a830:	00 97       	sbiw	r24, 0x00	; 0
    a832:	09 f0       	breq	.+2      	; 0xa836 <dir_find+0x5c>
    a834:	d6 c0       	rjmp	.+428    	; 0xa9e2 <dir_find+0x208>
    a836:	f8 01       	movw	r30, r16
    a838:	02 8c       	ldd	r0, Z+26	; 0x1a
    a83a:	f3 8d       	ldd	r31, Z+27	; 0x1b
    a83c:	e0 2d       	mov	r30, r0
    a83e:	f8 87       	std	Y+8, r31	; 0x08
    a840:	ef 83       	std	Y+7, r30	; 0x07
    a842:	30 80       	ld	r3, Z
    a844:	33 20       	and	r3, r3
    a846:	09 f4       	brne	.+2      	; 0xa84a <dir_find+0x70>
    a848:	ce c0       	rjmp	.+412    	; 0xa9e6 <dir_find+0x20c>
    a84a:	93 85       	ldd	r25, Z+11	; 0x0b
    a84c:	89 2f       	mov	r24, r25
    a84e:	8f 73       	andi	r24, 0x3F	; 63
    a850:	d8 01       	movw	r26, r16
    a852:	14 96       	adiw	r26, 0x04	; 4
    a854:	8c 93       	st	X, r24
    a856:	b5 ee       	ldi	r27, 0xE5	; 229
    a858:	3b 16       	cp	r3, r27
    a85a:	09 f4       	brne	.+2      	; 0xa85e <dir_find+0x84>
    a85c:	b4 c0       	rjmp	.+360    	; 0xa9c6 <dir_find+0x1ec>
    a85e:	93 ff       	sbrs	r25, 3
    a860:	04 c0       	rjmp	.+8      	; 0xa86a <dir_find+0x90>
    a862:	8f 30       	cpi	r24, 0x0F	; 15
    a864:	09 f0       	breq	.+2      	; 0xa868 <dir_find+0x8e>
    a866:	af c0       	rjmp	.+350    	; 0xa9c6 <dir_find+0x1ec>
    a868:	03 c0       	rjmp	.+6      	; 0xa870 <dir_find+0x96>
    a86a:	8f 30       	cpi	r24, 0x0F	; 15
    a86c:	09 f0       	breq	.+2      	; 0xa870 <dir_find+0x96>
    a86e:	87 c0       	rjmp	.+270    	; 0xa97e <dir_find+0x1a4>
    a870:	d8 01       	movw	r26, r16
    a872:	97 96       	adiw	r26, 0x27	; 39
    a874:	8c 91       	ld	r24, X
    a876:	97 97       	sbiw	r26, 0x27	; 39
    a878:	86 fd       	sbrc	r24, 6
    a87a:	ac c0       	rjmp	.+344    	; 0xa9d4 <dir_find+0x1fa>
    a87c:	36 fe       	sbrs	r3, 6
    a87e:	12 c0       	rjmp	.+36     	; 0xa8a4 <dir_find+0xca>
    a880:	ef 81       	ldd	r30, Y+7	; 0x07
    a882:	f8 85       	ldd	r31, Y+8	; 0x08
    a884:	e5 84       	ldd	r14, Z+13	; 0x0d
    a886:	f3 2d       	mov	r31, r3
    a888:	ff 7b       	andi	r31, 0xBF	; 191
    a88a:	3f 2e       	mov	r3, r31
    a88c:	1e 96       	adiw	r26, 0x0e	; 14
    a88e:	8d 91       	ld	r24, X+
    a890:	9d 91       	ld	r25, X+
    a892:	0d 90       	ld	r0, X+
    a894:	bc 91       	ld	r27, X
    a896:	a0 2d       	mov	r26, r0
    a898:	f8 01       	movw	r30, r16
    a89a:	80 a7       	std	Z+40, r24	; 0x28
    a89c:	91 a7       	std	Z+41, r25	; 0x29
    a89e:	a2 a7       	std	Z+42, r26	; 0x2a
    a8a0:	b3 a7       	std	Z+43, r27	; 0x2b
    a8a2:	02 c0       	rjmp	.+4      	; 0xa8a8 <dir_find+0xce>
    a8a4:	f3 10       	cpse	r15, r3
    a8a6:	94 c0       	rjmp	.+296    	; 0xa9d0 <dir_find+0x1f6>
    a8a8:	af 81       	ldd	r26, Y+7	; 0x07
    a8aa:	b8 85       	ldd	r27, Y+8	; 0x08
    a8ac:	1d 96       	adiw	r26, 0x0d	; 13
    a8ae:	2c 90       	ld	r2, X
    a8b0:	1d 97       	sbiw	r26, 0x0d	; 13
    a8b2:	2e 10       	cpse	r2, r14
    a8b4:	8d c0       	rjmp	.+282    	; 0xa9d0 <dir_find+0x1f6>
    a8b6:	5a 96       	adiw	r26, 0x1a	; 26
    a8b8:	8d 91       	ld	r24, X+
    a8ba:	9c 91       	ld	r25, X
    a8bc:	5b 97       	sbiw	r26, 0x1b	; 27
    a8be:	89 2b       	or	r24, r25
    a8c0:	09 f0       	breq	.+2      	; 0xa8c4 <dir_find+0xea>
    a8c2:	9b c0       	rjmp	.+310    	; 0xa9fa <dir_find+0x220>
    a8c4:	f4 01       	movw	r30, r8
    a8c6:	c3 84       	ldd	r12, Z+11	; 0x0b
    a8c8:	d4 84       	ldd	r13, Z+12	; 0x0c
    a8ca:	8c 91       	ld	r24, X
    a8cc:	8f 73       	andi	r24, 0x3F	; 63
    a8ce:	90 e0       	ldi	r25, 0x00	; 0
    a8d0:	01 97       	sbiw	r24, 0x01	; 1
    a8d2:	fd e0       	ldi	r31, 0x0D	; 13
    a8d4:	f8 9f       	mul	r31, r24
    a8d6:	70 01       	movw	r14, r0
    a8d8:	f9 9f       	mul	r31, r25
    a8da:	f0 0c       	add	r15, r0
    a8dc:	11 24       	eor	r1, r1
    a8de:	21 ec       	ldi	r18, 0xC1	; 193
    a8e0:	32 e0       	ldi	r19, 0x02	; 2
    a8e2:	3a 83       	std	Y+2, r19	; 0x02
    a8e4:	29 83       	std	Y+1, r18	; 0x01
    a8e6:	81 e0       	ldi	r24, 0x01	; 1
    a8e8:	90 e0       	ldi	r25, 0x00	; 0
    a8ea:	a9 81       	ldd	r26, Y+1	; 0x01
    a8ec:	ba 81       	ldd	r27, Y+2	; 0x02
    a8ee:	2d 91       	ld	r18, X+
    a8f0:	ba 83       	std	Y+2, r27	; 0x02
    a8f2:	a9 83       	std	Y+1, r26	; 0x01
    a8f4:	ef 81       	ldd	r30, Y+7	; 0x07
    a8f6:	f8 85       	ldd	r31, Y+8	; 0x08
    a8f8:	e2 0f       	add	r30, r18
    a8fa:	f1 1d       	adc	r31, r1
    a8fc:	a0 80       	ld	r10, Z
    a8fe:	b1 80       	ldd	r11, Z+1	; 0x01
    a900:	00 97       	sbiw	r24, 0x00	; 0
    a902:	09 f1       	breq	.+66     	; 0xa946 <dir_find+0x16c>
    a904:	bf ef       	ldi	r27, 0xFF	; 255
    a906:	eb 16       	cp	r14, r27
    a908:	f1 04       	cpc	r15, r1
    a90a:	08 f0       	brcs	.+2      	; 0xa90e <dir_find+0x134>
    a90c:	76 c0       	rjmp	.+236    	; 0xa9fa <dir_find+0x220>
    a90e:	c5 01       	movw	r24, r10
    a910:	0e 94 25 69 	call	0xd24a	; 0xd24a <ff_wtoupper>
    a914:	9c 83       	std	Y+4, r25	; 0x04
    a916:	8b 83       	std	Y+3, r24	; 0x03
    a918:	f7 01       	movw	r30, r14
    a91a:	31 96       	adiw	r30, 0x01	; 1
    a91c:	fe 83       	std	Y+6, r31	; 0x06
    a91e:	ed 83       	std	Y+5, r30	; 0x05
    a920:	ee 0c       	add	r14, r14
    a922:	ff 1c       	adc	r15, r15
    a924:	f6 01       	movw	r30, r12
    a926:	ee 0d       	add	r30, r14
    a928:	ff 1d       	adc	r31, r15
    a92a:	80 81       	ld	r24, Z
    a92c:	91 81       	ldd	r25, Z+1	; 0x01
    a92e:	0e 94 25 69 	call	0xd24a	; 0xd24a <ff_wtoupper>
    a932:	2b 81       	ldd	r18, Y+3	; 0x03
    a934:	3c 81       	ldd	r19, Y+4	; 0x04
    a936:	28 17       	cp	r18, r24
    a938:	39 07       	cpc	r19, r25
    a93a:	09 f0       	breq	.+2      	; 0xa93e <dir_find+0x164>
    a93c:	5e c0       	rjmp	.+188    	; 0xa9fa <dir_find+0x220>
    a93e:	c5 01       	movw	r24, r10
    a940:	ed 80       	ldd	r14, Y+5	; 0x05
    a942:	fe 80       	ldd	r15, Y+6	; 0x06
    a944:	05 c0       	rjmp	.+10     	; 0xa950 <dir_find+0x176>
    a946:	3f ef       	ldi	r19, 0xFF	; 255
    a948:	a3 16       	cp	r10, r19
    a94a:	b3 06       	cpc	r11, r19
    a94c:	09 f0       	breq	.+2      	; 0xa950 <dir_find+0x176>
    a94e:	55 c0       	rjmp	.+170    	; 0xa9fa <dir_find+0x220>
    a950:	49 81       	ldd	r20, Y+1	; 0x01
    a952:	5a 81       	ldd	r21, Y+2	; 0x02
    a954:	4e 5c       	subi	r20, 0xCE	; 206
    a956:	52 40       	sbci	r21, 0x02	; 2
    a958:	41 f6       	brne	.-112    	; 0xa8ea <dir_find+0x110>
    a95a:	ef 81       	ldd	r30, Y+7	; 0x07
    a95c:	f8 85       	ldd	r31, Y+8	; 0x08
    a95e:	20 81       	ld	r18, Z
    a960:	26 ff       	sbrs	r18, 6
    a962:	46 c0       	rjmp	.+140    	; 0xa9f0 <dir_find+0x216>
    a964:	89 2b       	or	r24, r25
    a966:	09 f4       	brne	.+2      	; 0xa96a <dir_find+0x190>
    a968:	43 c0       	rjmp	.+134    	; 0xa9f0 <dir_find+0x216>
    a96a:	ee 0c       	add	r14, r14
    a96c:	ff 1c       	adc	r15, r15
    a96e:	f6 01       	movw	r30, r12
    a970:	ee 0d       	add	r30, r14
    a972:	ff 1d       	adc	r31, r15
    a974:	80 81       	ld	r24, Z
    a976:	91 81       	ldd	r25, Z+1	; 0x01
    a978:	89 2b       	or	r24, r25
    a97a:	d1 f1       	breq	.+116    	; 0xa9f0 <dir_find+0x216>
    a97c:	3e c0       	rjmp	.+124    	; 0xa9fa <dir_find+0x220>
    a97e:	f1 10       	cpse	r15, r1
    a980:	06 c0       	rjmp	.+12     	; 0xa98e <dir_find+0x1b4>
    a982:	8f 81       	ldd	r24, Y+7	; 0x07
    a984:	98 85       	ldd	r25, Y+8	; 0x08
    a986:	0e 94 53 48 	call	0x90a6	; 0x90a6 <sum_sfn>
    a98a:	e8 16       	cp	r14, r24
    a98c:	71 f1       	breq	.+92     	; 0xa9ea <dir_find+0x210>
    a98e:	d8 01       	movw	r26, r16
    a990:	97 96       	adiw	r26, 0x27	; 39
    a992:	8c 91       	ld	r24, X
    a994:	80 fd       	sbrc	r24, 0
    a996:	17 c0       	rjmp	.+46     	; 0xa9c6 <dir_find+0x1ec>
    a998:	f8 01       	movw	r30, r16
    a99a:	7c 96       	adiw	r30, 0x1c	; 28
    a99c:	2f 81       	ldd	r18, Y+7	; 0x07
    a99e:	38 85       	ldd	r19, Y+8	; 0x08
    a9a0:	25 5f       	subi	r18, 0xF5	; 245
    a9a2:	3f 4f       	sbci	r19, 0xFF	; 255
    a9a4:	af 81       	ldd	r26, Y+7	; 0x07
    a9a6:	b8 85       	ldd	r27, Y+8	; 0x08
    a9a8:	8d 91       	ld	r24, X+
    a9aa:	b8 87       	std	Y+8, r27	; 0x08
    a9ac:	af 83       	std	Y+7, r26	; 0x07
    a9ae:	41 91       	ld	r20, Z+
    a9b0:	90 e0       	ldi	r25, 0x00	; 0
    a9b2:	84 1b       	sub	r24, r20
    a9b4:	91 09       	sbc	r25, r1
    a9b6:	2a 17       	cp	r18, r26
    a9b8:	3b 07       	cpc	r19, r27
    a9ba:	19 f0       	breq	.+6      	; 0xa9c2 <dir_find+0x1e8>
    a9bc:	89 2b       	or	r24, r25
    a9be:	91 f3       	breq	.-28     	; 0xa9a4 <dir_find+0x1ca>
    a9c0:	02 c0       	rjmp	.+4      	; 0xa9c6 <dir_find+0x1ec>
    a9c2:	89 2b       	or	r24, r25
    a9c4:	91 f0       	breq	.+36     	; 0xa9ea <dir_find+0x210>
    a9c6:	f8 01       	movw	r30, r16
    a9c8:	40 a6       	std	Z+40, r4	; 0x28
    a9ca:	51 a6       	std	Z+41, r5	; 0x29
    a9cc:	62 a6       	std	Z+42, r6	; 0x2a
    a9ce:	73 a6       	std	Z+43, r7	; 0x2b
    a9d0:	ff 24       	eor	r15, r15
    a9d2:	fa 94       	dec	r15
    a9d4:	60 e0       	ldi	r22, 0x00	; 0
    a9d6:	70 e0       	ldi	r23, 0x00	; 0
    a9d8:	c8 01       	movw	r24, r16
    a9da:	87 dc       	rcall	.-1778   	; 0xa2ea <dir_next>
    a9dc:	00 97       	sbiw	r24, 0x00	; 0
    a9de:	09 f4       	brne	.+2      	; 0xa9e2 <dir_find+0x208>
    a9e0:	1d cf       	rjmp	.-454    	; 0xa81c <dir_find+0x42>
    a9e2:	28 2f       	mov	r18, r24
    a9e4:	0c c0       	rjmp	.+24     	; 0xa9fe <dir_find+0x224>
    a9e6:	24 e0       	ldi	r18, 0x04	; 4
    a9e8:	01 c0       	rjmp	.+2      	; 0xa9ec <dir_find+0x212>
    a9ea:	20 e0       	ldi	r18, 0x00	; 0
    a9ec:	90 e0       	ldi	r25, 0x00	; 0
    a9ee:	07 c0       	rjmp	.+14     	; 0xa9fe <dir_find+0x224>
    a9f0:	ff 24       	eor	r15, r15
    a9f2:	fa 94       	dec	r15
    a9f4:	f3 0c       	add	r15, r3
    a9f6:	e2 2c       	mov	r14, r2
    a9f8:	ed cf       	rjmp	.-38     	; 0xa9d4 <dir_find+0x1fa>
    a9fa:	e2 2c       	mov	r14, r2
    a9fc:	e9 cf       	rjmp	.-46     	; 0xa9d0 <dir_find+0x1f6>
    a9fe:	82 2f       	mov	r24, r18
    aa00:	28 96       	adiw	r28, 0x08	; 8
    aa02:	e2 e1       	ldi	r30, 0x12	; 18
    aa04:	0c 94 2f e8 	jmp	0x1d05e	; 0x1d05e <__epilogue_restores__>

0000aa08 <dir_register>:
    aa08:	a6 e1       	ldi	r26, 0x16	; 22
    aa0a:	b0 e0       	ldi	r27, 0x00	; 0
    aa0c:	ea e0       	ldi	r30, 0x0A	; 10
    aa0e:	f5 e5       	ldi	r31, 0x55	; 85
    aa10:	0c 94 13 e8 	jmp	0x1d026	; 0x1d026 <__prologue_saves__>
    aa14:	dc 01       	movw	r26, r24
    aa16:	97 96       	adiw	r26, 0x27	; 39
    aa18:	2c 91       	ld	r18, X
    aa1a:	97 97       	sbiw	r26, 0x27	; 39
    aa1c:	20 7a       	andi	r18, 0xA0	; 160
    aa1e:	09 f0       	breq	.+2      	; 0xaa22 <dir_register+0x1a>
    aa20:	61 c1       	rjmp	.+706    	; 0xace4 <dir_register+0x2dc>
    aa22:	cd 90       	ld	r12, X+
    aa24:	dc 90       	ld	r13, X
    aa26:	d6 01       	movw	r26, r12
    aa28:	1b 96       	adiw	r26, 0x0b	; 11
    aa2a:	ed 91       	ld	r30, X+
    aa2c:	fc 91       	ld	r31, X
    aa2e:	1c 97       	sbiw	r26, 0x0c	; 12
    aa30:	81 2c       	mov	r8, r1
    aa32:	91 2c       	mov	r9, r1
    aa34:	21 91       	ld	r18, Z+
    aa36:	31 91       	ld	r19, Z+
    aa38:	23 2b       	or	r18, r19
    aa3a:	21 f0       	breq	.+8      	; 0xaa44 <dir_register+0x3c>
    aa3c:	bf ef       	ldi	r27, 0xFF	; 255
    aa3e:	8b 1a       	sub	r8, r27
    aa40:	9b 0a       	sbc	r9, r27
    aa42:	f8 cf       	rjmp	.-16     	; 0xaa34 <dir_register+0x2c>
    aa44:	8c 01       	movw	r16, r24
    aa46:	5c 01       	movw	r10, r24
    aa48:	ec e1       	ldi	r30, 0x1C	; 28
    aa4a:	ae 0e       	add	r10, r30
    aa4c:	b1 1c       	adc	r11, r1
    aa4e:	4c e0       	ldi	r20, 0x0C	; 12
    aa50:	50 e0       	ldi	r21, 0x00	; 0
    aa52:	b5 01       	movw	r22, r10
    aa54:	ce 01       	movw	r24, r28
    aa56:	01 96       	adiw	r24, 0x01	; 1
    aa58:	0e 94 af 48 	call	0x915e	; 0x915e <mem_cpy.part.0>
    aa5c:	8c 85       	ldd	r24, Y+12	; 0x0c
    aa5e:	80 ff       	sbrs	r24, 0
    aa60:	96 c0       	rjmp	.+300    	; 0xab8e <dir_register+0x186>
    aa62:	80 e4       	ldi	r24, 0x40	; 64
    aa64:	d8 01       	movw	r26, r16
    aa66:	97 96       	adiw	r26, 0x27	; 39
    aa68:	8c 93       	st	X, r24
    aa6a:	41 2c       	mov	r4, r1
    aa6c:	51 2c       	mov	r5, r1
    aa6e:	32 01       	movw	r6, r4
    aa70:	43 94       	inc	r4
    aa72:	72 01       	movw	r14, r4
    aa74:	f6 01       	movw	r30, r12
    aa76:	23 84       	ldd	r2, Z+11	; 0x0b
    aa78:	34 84       	ldd	r3, Z+12	; 0x0c
    aa7a:	4b e0       	ldi	r20, 0x0B	; 11
    aa7c:	50 e0       	ldi	r21, 0x00	; 0
    aa7e:	be 01       	movw	r22, r28
    aa80:	6f 5f       	subi	r22, 0xFF	; 255
    aa82:	7f 4f       	sbci	r23, 0xFF	; 255
    aa84:	c5 01       	movw	r24, r10
    aa86:	0e 94 af 48 	call	0x915e	; 0x915e <mem_cpy.part.0>
    aa8a:	f6 e0       	ldi	r31, 0x06	; 6
    aa8c:	4f 16       	cp	r4, r31
    aa8e:	51 04       	cpc	r5, r1
    aa90:	18 f1       	brcs	.+70     	; 0xaad8 <dir_register+0xd0>
    aa92:	f1 01       	movw	r30, r2
    aa94:	b3 01       	movw	r22, r6
    aa96:	a2 01       	movw	r20, r4
    aa98:	81 91       	ld	r24, Z+
    aa9a:	91 91       	ld	r25, Z+
    aa9c:	00 97       	sbiw	r24, 0x00	; 0
    aa9e:	d9 f0       	breq	.+54     	; 0xaad6 <dir_register+0xce>
    aaa0:	20 e1       	ldi	r18, 0x10	; 16
    aaa2:	30 e0       	ldi	r19, 0x00	; 0
    aaa4:	44 0f       	add	r20, r20
    aaa6:	55 1f       	adc	r21, r21
    aaa8:	66 1f       	adc	r22, r22
    aaaa:	77 1f       	adc	r23, r23
    aaac:	dc 01       	movw	r26, r24
    aaae:	a1 70       	andi	r26, 0x01	; 1
    aab0:	bb 27       	eor	r27, r27
    aab2:	4a 0f       	add	r20, r26
    aab4:	5b 1f       	adc	r21, r27
    aab6:	61 1d       	adc	r22, r1
    aab8:	71 1d       	adc	r23, r1
    aaba:	96 95       	lsr	r25
    aabc:	87 95       	ror	r24
    aabe:	60 ff       	sbrs	r22, 0
    aac0:	06 c0       	rjmp	.+12     	; 0xaace <dir_register+0xc6>
    aac2:	a1 e2       	ldi	r26, 0x21	; 33
    aac4:	4a 27       	eor	r20, r26
    aac6:	a0 e1       	ldi	r26, 0x10	; 16
    aac8:	5a 27       	eor	r21, r26
    aaca:	a1 e0       	ldi	r26, 0x01	; 1
    aacc:	6a 27       	eor	r22, r26
    aace:	21 50       	subi	r18, 0x01	; 1
    aad0:	31 09       	sbc	r19, r1
    aad2:	41 f7       	brne	.-48     	; 0xaaa4 <dir_register+0x9c>
    aad4:	e1 cf       	rjmp	.-62     	; 0xaa98 <dir_register+0x90>
    aad6:	7a 01       	movw	r14, r20
    aad8:	fe 01       	movw	r30, r28
    aada:	75 96       	adiw	r30, 0x15	; 21
    aadc:	27 e0       	ldi	r18, 0x07	; 7
    aade:	30 e0       	ldi	r19, 0x00	; 0
    aae0:	9e 2d       	mov	r25, r14
    aae2:	9f 70       	andi	r25, 0x0F	; 15
    aae4:	80 e3       	ldi	r24, 0x30	; 48
    aae6:	89 0f       	add	r24, r25
    aae8:	8a 33       	cpi	r24, 0x3A	; 58
    aaea:	10 f0       	brcs	.+4      	; 0xaaf0 <dir_register+0xe8>
    aaec:	87 e3       	ldi	r24, 0x37	; 55
    aaee:	89 0f       	add	r24, r25
    aaf0:	21 50       	subi	r18, 0x01	; 1
    aaf2:	31 09       	sbc	r19, r1
    aaf4:	82 93       	st	-Z, r24
    aaf6:	a4 e0       	ldi	r26, 0x04	; 4
    aaf8:	f6 94       	lsr	r15
    aafa:	e7 94       	ror	r14
    aafc:	aa 95       	dec	r26
    aafe:	e1 f7       	brne	.-8      	; 0xaaf8 <dir_register+0xf0>
    ab00:	e1 14       	cp	r14, r1
    ab02:	f1 04       	cpc	r15, r1
    ab04:	69 f7       	brne	.-38     	; 0xaae0 <dir_register+0xd8>
    ab06:	ed e0       	ldi	r30, 0x0D	; 13
    ab08:	f0 e0       	ldi	r31, 0x00	; 0
    ab0a:	ec 0f       	add	r30, r28
    ab0c:	fd 1f       	adc	r31, r29
    ab0e:	e2 0f       	add	r30, r18
    ab10:	f3 1f       	adc	r31, r19
    ab12:	be e7       	ldi	r27, 0x7E	; 126
    ab14:	b0 83       	st	Z, r27
    ab16:	f5 01       	movw	r30, r10
    ab18:	80 e0       	ldi	r24, 0x00	; 0
    ab1a:	90 e0       	ldi	r25, 0x00	; 0
    ab1c:	28 17       	cp	r18, r24
    ab1e:	39 07       	cpc	r19, r25
    ab20:	29 f0       	breq	.+10     	; 0xab2c <dir_register+0x124>
    ab22:	41 91       	ld	r20, Z+
    ab24:	40 32       	cpi	r20, 0x20	; 32
    ab26:	11 f0       	breq	.+4      	; 0xab2c <dir_register+0x124>
    ab28:	01 96       	adiw	r24, 0x01	; 1
    ab2a:	f8 cf       	rjmp	.-16     	; 0xab1c <dir_register+0x114>
    ab2c:	f5 01       	movw	r30, r10
    ab2e:	e8 0f       	add	r30, r24
    ab30:	f9 1f       	adc	r31, r25
    ab32:	28 30       	cpi	r18, 0x08	; 8
    ab34:	31 05       	cpc	r19, r1
    ab36:	50 f4       	brcc	.+20     	; 0xab4c <dir_register+0x144>
    ab38:	ad e0       	ldi	r26, 0x0D	; 13
    ab3a:	b0 e0       	ldi	r27, 0x00	; 0
    ab3c:	ac 0f       	add	r26, r28
    ab3e:	bd 1f       	adc	r27, r29
    ab40:	a2 0f       	add	r26, r18
    ab42:	b3 1f       	adc	r27, r19
    ab44:	8c 91       	ld	r24, X
    ab46:	2f 5f       	subi	r18, 0xFF	; 255
    ab48:	3f 4f       	sbci	r19, 0xFF	; 255
    ab4a:	01 c0       	rjmp	.+2      	; 0xab4e <dir_register+0x146>
    ab4c:	80 e2       	ldi	r24, 0x20	; 32
    ab4e:	81 93       	st	Z+, r24
    ab50:	cf 01       	movw	r24, r30
    ab52:	8a 19       	sub	r24, r10
    ab54:	9b 09       	sbc	r25, r11
    ab56:	08 97       	sbiw	r24, 0x08	; 8
    ab58:	60 f3       	brcs	.-40     	; 0xab32 <dir_register+0x12a>
    ab5a:	c8 01       	movw	r24, r16
    ab5c:	3e de       	rcall	.-900    	; 0xa7da <dir_find>
    ab5e:	00 97       	sbiw	r24, 0x00	; 0
    ab60:	71 f4       	brne	.+28     	; 0xab7e <dir_register+0x176>
    ab62:	ef ef       	ldi	r30, 0xFF	; 255
    ab64:	4e 1a       	sub	r4, r30
    ab66:	5e 0a       	sbc	r5, r30
    ab68:	6e 0a       	sbc	r6, r30
    ab6a:	7e 0a       	sbc	r7, r30
    ab6c:	f4 e6       	ldi	r31, 0x64	; 100
    ab6e:	4f 16       	cp	r4, r31
    ab70:	51 04       	cpc	r5, r1
    ab72:	61 04       	cpc	r6, r1
    ab74:	71 04       	cpc	r7, r1
    ab76:	09 f0       	breq	.+2      	; 0xab7a <dir_register+0x172>
    ab78:	7c cf       	rjmp	.-264    	; 0xaa72 <dir_register+0x6a>
    ab7a:	27 e0       	ldi	r18, 0x07	; 7
    ab7c:	b4 c0       	rjmp	.+360    	; 0xace6 <dir_register+0x2de>
    ab7e:	84 30       	cpi	r24, 0x04	; 4
    ab80:	91 05       	cpc	r25, r1
    ab82:	09 f0       	breq	.+2      	; 0xab86 <dir_register+0x17e>
    ab84:	df c0       	rjmp	.+446    	; 0xad44 <dir_register+0x33c>
    ab86:	8c 85       	ldd	r24, Y+12	; 0x0c
    ab88:	d8 01       	movw	r26, r16
    ab8a:	97 96       	adiw	r26, 0x27	; 39
    ab8c:	8c 93       	st	X, r24
    ab8e:	8c 85       	ldd	r24, Y+12	; 0x0c
    ab90:	81 ff       	sbrs	r24, 1
    ab92:	0b c0       	rjmp	.+22     	; 0xabaa <dir_register+0x1a2>
    ab94:	c4 01       	movw	r24, r8
    ab96:	0c 96       	adiw	r24, 0x0c	; 12
    ab98:	6d e0       	ldi	r22, 0x0D	; 13
    ab9a:	70 e0       	ldi	r23, 0x00	; 0
    ab9c:	0e 94 6a e7 	call	0x1ced4	; 0x1ced4 <__udivmodhi4>
    aba0:	7b 01       	movw	r14, r22
    aba2:	bf ef       	ldi	r27, 0xFF	; 255
    aba4:	eb 1a       	sub	r14, r27
    aba6:	fb 0a       	sbc	r15, r27
    aba8:	03 c0       	rjmp	.+6      	; 0xabb0 <dir_register+0x1a8>
    abaa:	ee 24       	eor	r14, r14
    abac:	e3 94       	inc	r14
    abae:	f1 2c       	mov	r15, r1
    abb0:	b7 01       	movw	r22, r14
    abb2:	c8 01       	movw	r24, r16
    abb4:	c2 dc       	rcall	.-1660   	; 0xa53a <dir_alloc>
    abb6:	00 97       	sbiw	r24, 0x00	; 0
    abb8:	09 f0       	breq	.+2      	; 0xabbc <dir_register+0x1b4>
    abba:	c4 c0       	rjmp	.+392    	; 0xad44 <dir_register+0x33c>
    abbc:	e1 e0       	ldi	r30, 0x01	; 1
    abbe:	ee 1a       	sub	r14, r30
    abc0:	f1 08       	sbc	r15, r1
    abc2:	09 f4       	brne	.+2      	; 0xabc6 <dir_register+0x1be>
    abc4:	92 c0       	rjmp	.+292    	; 0xacea <dir_register+0x2e2>
    abc6:	d8 01       	movw	r26, r16
    abc8:	1e 96       	adiw	r26, 0x0e	; 14
    abca:	4d 91       	ld	r20, X+
    abcc:	5d 91       	ld	r21, X+
    abce:	6d 91       	ld	r22, X+
    abd0:	7c 91       	ld	r23, X
    abd2:	51 97       	sbiw	r26, 0x11	; 17
    abd4:	c7 01       	movw	r24, r14
    abd6:	e5 e0       	ldi	r30, 0x05	; 5
    abd8:	88 0f       	add	r24, r24
    abda:	99 1f       	adc	r25, r25
    abdc:	ea 95       	dec	r30
    abde:	e1 f7       	brne	.-8      	; 0xabd8 <dir_register+0x1d0>
    abe0:	48 1b       	sub	r20, r24
    abe2:	59 0b       	sbc	r21, r25
    abe4:	61 09       	sbc	r22, r1
    abe6:	71 09       	sbc	r23, r1
    abe8:	c8 01       	movw	r24, r16
    abea:	85 d8       	rcall	.-3830   	; 0x9cf6 <dir_sdi>
    abec:	00 97       	sbiw	r24, 0x00	; 0
    abee:	09 f0       	breq	.+2      	; 0xabf2 <dir_register+0x1ea>
    abf0:	a9 c0       	rjmp	.+338    	; 0xad44 <dir_register+0x33c>
    abf2:	c5 01       	movw	r24, r10
    abf4:	0e 94 53 48 	call	0x90a6	; 0x90a6 <sum_sfn>
    abf8:	68 2e       	mov	r6, r24
    abfa:	5f e0       	ldi	r21, 0x0F	; 15
    abfc:	35 2e       	mov	r3, r21
    abfe:	6d e0       	ldi	r22, 0x0D	; 13
    ac00:	46 2e       	mov	r4, r22
    ac02:	7e ec       	ldi	r23, 0xCE	; 206
    ac04:	87 2e       	mov	r8, r23
    ac06:	72 e0       	ldi	r23, 0x02	; 2
    ac08:	97 2e       	mov	r9, r23
    ac0a:	55 24       	eor	r5, r5
    ac0c:	53 94       	inc	r5
    ac0e:	f8 01       	movw	r30, r16
    ac10:	46 89       	ldd	r20, Z+22	; 0x16
    ac12:	57 89       	ldd	r21, Z+23	; 0x17
    ac14:	60 8d       	ldd	r22, Z+24	; 0x18
    ac16:	71 8d       	ldd	r23, Z+25	; 0x19
    ac18:	c6 01       	movw	r24, r12
    ac1a:	0e 94 a2 49 	call	0x9344	; 0x9344 <move_window>
    ac1e:	00 97       	sbiw	r24, 0x00	; 0
    ac20:	09 f0       	breq	.+2      	; 0xac24 <dir_register+0x21c>
    ac22:	90 c0       	rjmp	.+288    	; 0xad44 <dir_register+0x33c>
    ac24:	7e 2c       	mov	r7, r14
    ac26:	d8 01       	movw	r26, r16
    ac28:	5a 96       	adiw	r26, 0x1a	; 26
    ac2a:	ed 91       	ld	r30, X+
    ac2c:	fc 91       	ld	r31, X
    ac2e:	5b 97       	sbiw	r26, 0x1b	; 27
    ac30:	d6 01       	movw	r26, r12
    ac32:	1b 96       	adiw	r26, 0x0b	; 11
    ac34:	6d 91       	ld	r22, X+
    ac36:	7c 91       	ld	r23, X
    ac38:	1c 97       	sbiw	r26, 0x0c	; 12
    ac3a:	65 86       	std	Z+13, r6	; 0x0d
    ac3c:	33 86       	std	Z+11, r3	; 0x0b
    ac3e:	14 86       	std	Z+12, r1	; 0x0c
    ac40:	12 8e       	std	Z+26, r1	; 0x1a
    ac42:	13 8e       	std	Z+27, r1	; 0x1b
    ac44:	97 01       	movw	r18, r14
    ac46:	33 27       	eor	r19, r19
    ac48:	21 50       	subi	r18, 0x01	; 1
    ac4a:	31 09       	sbc	r19, r1
    ac4c:	42 9e       	mul	r4, r18
    ac4e:	c0 01       	movw	r24, r0
    ac50:	43 9e       	mul	r4, r19
    ac52:	90 0d       	add	r25, r0
    ac54:	11 24       	eor	r1, r1
    ac56:	21 ec       	ldi	r18, 0xC1	; 193
    ac58:	32 e0       	ldi	r19, 0x02	; 2
    ac5a:	3e 8b       	std	Y+22, r19	; 0x16
    ac5c:	2d 8b       	std	Y+21, r18	; 0x15
    ac5e:	20 e0       	ldi	r18, 0x00	; 0
    ac60:	30 e0       	ldi	r19, 0x00	; 0
    ac62:	2f 3f       	cpi	r18, 0xFF	; 255
    ac64:	4f ef       	ldi	r20, 0xFF	; 255
    ac66:	34 07       	cpc	r19, r20
    ac68:	49 f0       	breq	.+18     	; 0xac7c <dir_register+0x274>
    ac6a:	9c 01       	movw	r18, r24
    ac6c:	22 0f       	add	r18, r18
    ac6e:	33 1f       	adc	r19, r19
    ac70:	26 0f       	add	r18, r22
    ac72:	37 1f       	adc	r19, r23
    ac74:	d9 01       	movw	r26, r18
    ac76:	2d 91       	ld	r18, X+
    ac78:	3c 91       	ld	r19, X
    ac7a:	01 96       	adiw	r24, 0x01	; 1
    ac7c:	ad 89       	ldd	r26, Y+21	; 0x15
    ac7e:	be 89       	ldd	r27, Y+22	; 0x16
    ac80:	4d 91       	ld	r20, X+
    ac82:	be 8b       	std	Y+22, r27	; 0x16
    ac84:	ad 8b       	std	Y+21, r26	; 0x15
    ac86:	df 01       	movw	r26, r30
    ac88:	a4 0f       	add	r26, r20
    ac8a:	b1 1d       	adc	r27, r1
    ac8c:	2c 93       	st	X, r18
    ac8e:	11 96       	adiw	r26, 0x01	; 1
    ac90:	3c 93       	st	X, r19
    ac92:	21 15       	cp	r18, r1
    ac94:	31 05       	cpc	r19, r1
    ac96:	11 f4       	brne	.+4      	; 0xac9c <dir_register+0x294>
    ac98:	2f ef       	ldi	r18, 0xFF	; 255
    ac9a:	3f ef       	ldi	r19, 0xFF	; 255
    ac9c:	4d 89       	ldd	r20, Y+21	; 0x15
    ac9e:	5e 89       	ldd	r21, Y+22	; 0x16
    aca0:	84 16       	cp	r8, r20
    aca2:	95 06       	cpc	r9, r21
    aca4:	f1 f6       	brne	.-68     	; 0xac62 <dir_register+0x25a>
    aca6:	2f 3f       	cpi	r18, 0xFF	; 255
    aca8:	3f 4f       	sbci	r19, 0xFF	; 255
    acaa:	49 f0       	breq	.+18     	; 0xacbe <dir_register+0x2b6>
    acac:	88 0f       	add	r24, r24
    acae:	99 1f       	adc	r25, r25
    acb0:	db 01       	movw	r26, r22
    acb2:	a8 0f       	add	r26, r24
    acb4:	b9 1f       	adc	r27, r25
    acb6:	8d 91       	ld	r24, X+
    acb8:	9c 91       	ld	r25, X
    acba:	89 2b       	or	r24, r25
    acbc:	19 f4       	brne	.+6      	; 0xacc4 <dir_register+0x2bc>
    acbe:	87 2d       	mov	r24, r7
    acc0:	80 64       	ori	r24, 0x40	; 64
    acc2:	78 2e       	mov	r7, r24
    acc4:	70 82       	st	Z, r7
    acc6:	d6 01       	movw	r26, r12
    acc8:	13 96       	adiw	r26, 0x03	; 3
    acca:	5c 92       	st	X, r5
    accc:	60 e0       	ldi	r22, 0x00	; 0
    acce:	70 e0       	ldi	r23, 0x00	; 0
    acd0:	c8 01       	movw	r24, r16
    acd2:	0b db       	rcall	.-2538   	; 0xa2ea <dir_next>
    acd4:	00 97       	sbiw	r24, 0x00	; 0
    acd6:	b1 f5       	brne	.+108    	; 0xad44 <dir_register+0x33c>
    acd8:	b1 e0       	ldi	r27, 0x01	; 1
    acda:	eb 1a       	sub	r14, r27
    acdc:	f1 08       	sbc	r15, r1
    acde:	09 f0       	breq	.+2      	; 0xace2 <dir_register+0x2da>
    ace0:	96 cf       	rjmp	.-212    	; 0xac0e <dir_register+0x206>
    ace2:	03 c0       	rjmp	.+6      	; 0xacea <dir_register+0x2e2>
    ace4:	26 e0       	ldi	r18, 0x06	; 6
    ace6:	90 e0       	ldi	r25, 0x00	; 0
    ace8:	2e c0       	rjmp	.+92     	; 0xad46 <dir_register+0x33e>
    acea:	d8 01       	movw	r26, r16
    acec:	56 96       	adiw	r26, 0x16	; 22
    acee:	4d 91       	ld	r20, X+
    acf0:	5d 91       	ld	r21, X+
    acf2:	6d 91       	ld	r22, X+
    acf4:	7c 91       	ld	r23, X
    acf6:	59 97       	sbiw	r26, 0x19	; 25
    acf8:	c6 01       	movw	r24, r12
    acfa:	0e 94 a2 49 	call	0x9344	; 0x9344 <move_window>
    acfe:	00 97       	sbiw	r24, 0x00	; 0
    ad00:	09 f5       	brne	.+66     	; 0xad44 <dir_register+0x33c>
    ad02:	40 e2       	ldi	r20, 0x20	; 32
    ad04:	50 e0       	ldi	r21, 0x00	; 0
    ad06:	60 e0       	ldi	r22, 0x00	; 0
    ad08:	70 e0       	ldi	r23, 0x00	; 0
    ad0a:	f8 01       	movw	r30, r16
    ad0c:	82 8d       	ldd	r24, Z+26	; 0x1a
    ad0e:	93 8d       	ldd	r25, Z+27	; 0x1b
    ad10:	0e 94 e6 47 	call	0x8fcc	; 0x8fcc <mem_set>
    ad14:	4b e0       	ldi	r20, 0x0B	; 11
    ad16:	50 e0       	ldi	r21, 0x00	; 0
    ad18:	b5 01       	movw	r22, r10
    ad1a:	d8 01       	movw	r26, r16
    ad1c:	5a 96       	adiw	r26, 0x1a	; 26
    ad1e:	8d 91       	ld	r24, X+
    ad20:	9c 91       	ld	r25, X
    ad22:	5b 97       	sbiw	r26, 0x1b	; 27
    ad24:	0e 94 af 48 	call	0x915e	; 0x915e <mem_cpy.part.0>
    ad28:	d8 01       	movw	r26, r16
    ad2a:	5a 96       	adiw	r26, 0x1a	; 26
    ad2c:	ed 91       	ld	r30, X+
    ad2e:	fc 91       	ld	r31, X
    ad30:	5b 97       	sbiw	r26, 0x1b	; 27
    ad32:	97 96       	adiw	r26, 0x27	; 39
    ad34:	8c 91       	ld	r24, X
    ad36:	88 71       	andi	r24, 0x18	; 24
    ad38:	84 87       	std	Z+12, r24	; 0x0c
    ad3a:	81 e0       	ldi	r24, 0x01	; 1
    ad3c:	f6 01       	movw	r30, r12
    ad3e:	83 83       	std	Z+3, r24	; 0x03
    ad40:	20 e0       	ldi	r18, 0x00	; 0
    ad42:	d1 cf       	rjmp	.-94     	; 0xace6 <dir_register+0x2de>
    ad44:	28 2f       	mov	r18, r24
    ad46:	82 2f       	mov	r24, r18
    ad48:	66 96       	adiw	r28, 0x16	; 22
    ad4a:	e2 e1       	ldi	r30, 0x12	; 18
    ad4c:	0c 94 2f e8 	jmp	0x1d05e	; 0x1d05e <__epilogue_restores__>

0000ad50 <follow_path>:
    ad50:	a7 e0       	ldi	r26, 0x07	; 7
    ad52:	b0 e0       	ldi	r27, 0x00	; 0
    ad54:	ee ea       	ldi	r30, 0xAE	; 174
    ad56:	f6 e5       	ldi	r31, 0x56	; 86
    ad58:	0c 94 13 e8 	jmp	0x1d026	; 0x1d026 <__prologue_saves__>
    ad5c:	8c 01       	movw	r16, r24
    ad5e:	7b 01       	movw	r14, r22
    ad60:	dc 01       	movw	r26, r24
    ad62:	2d 90       	ld	r2, X+
    ad64:	3c 90       	ld	r3, X
    ad66:	fb 01       	movw	r30, r22
    ad68:	80 81       	ld	r24, Z
    ad6a:	8f 32       	cpi	r24, 0x2F	; 47
    ad6c:	11 f0       	breq	.+4      	; 0xad72 <follow_path+0x22>
    ad6e:	8c 35       	cpi	r24, 0x5C	; 92
    ad70:	11 f4       	brne	.+4      	; 0xad76 <follow_path+0x26>
    ad72:	97 01       	movw	r18, r14
    ad74:	0b c0       	rjmp	.+22     	; 0xad8c <follow_path+0x3c>
    ad76:	f1 01       	movw	r30, r2
    ad78:	85 89       	ldd	r24, Z+21	; 0x15
    ad7a:	96 89       	ldd	r25, Z+22	; 0x16
    ad7c:	a7 89       	ldd	r26, Z+23	; 0x17
    ad7e:	b0 8d       	ldd	r27, Z+24	; 0x18
    ad80:	f8 01       	movw	r30, r16
    ad82:	86 83       	std	Z+6, r24	; 0x06
    ad84:	97 83       	std	Z+7, r25	; 0x07
    ad86:	a0 87       	std	Z+8, r26	; 0x08
    ad88:	b1 87       	std	Z+9, r27	; 0x09
    ad8a:	0e c0       	rjmp	.+28     	; 0xada8 <follow_path+0x58>
    ad8c:	79 01       	movw	r14, r18
    ad8e:	d9 01       	movw	r26, r18
    ad90:	8c 91       	ld	r24, X
    ad92:	2f 5f       	subi	r18, 0xFF	; 255
    ad94:	3f 4f       	sbci	r19, 0xFF	; 255
    ad96:	8f 32       	cpi	r24, 0x2F	; 47
    ad98:	c9 f3       	breq	.-14     	; 0xad8c <follow_path+0x3c>
    ad9a:	8c 35       	cpi	r24, 0x5C	; 92
    ad9c:	b9 f3       	breq	.-18     	; 0xad8c <follow_path+0x3c>
    ad9e:	f8 01       	movw	r30, r16
    ada0:	16 82       	std	Z+6, r1	; 0x06
    ada2:	17 82       	std	Z+7, r1	; 0x07
    ada4:	10 86       	std	Z+8, r1	; 0x08
    ada6:	11 86       	std	Z+9, r1	; 0x09
    ada8:	d7 01       	movw	r26, r14
    adaa:	8c 91       	ld	r24, X
    adac:	80 32       	cpi	r24, 0x20	; 32
    adae:	50 f0       	brcs	.+20     	; 0xadc4 <follow_path+0x74>
    adb0:	f8 01       	movw	r30, r16
    adb2:	7c 96       	adiw	r30, 0x1c	; 28
    adb4:	fb 83       	std	Y+3, r31	; 0x03
    adb6:	ea 83       	std	Y+2, r30	; 0x02
    adb8:	91 01       	movw	r18, r2
    adba:	2b 5c       	subi	r18, 0xCB	; 203
    adbc:	3f 4f       	sbci	r19, 0xFF	; 255
    adbe:	3d 83       	std	Y+5, r19	; 0x05
    adc0:	2c 83       	std	Y+4, r18	; 0x04
    adc2:	87 c0       	rjmp	.+270    	; 0xaed2 <follow_path+0x182>
    adc4:	80 e8       	ldi	r24, 0x80	; 128
    adc6:	d8 01       	movw	r26, r16
    adc8:	97 96       	adiw	r26, 0x27	; 39
    adca:	8c 93       	st	X, r24
    adcc:	40 e0       	ldi	r20, 0x00	; 0
    adce:	50 e0       	ldi	r21, 0x00	; 0
    add0:	ba 01       	movw	r22, r20
    add2:	c8 01       	movw	r24, r16
    add4:	0e 94 7b 4e 	call	0x9cf6	; 0x9cf6 <dir_sdi>
    add8:	d8 c1       	rjmp	.+944    	; 0xb18a <follow_path+0x43a>
    adda:	8f 32       	cpi	r24, 0x2F	; 47
    addc:	91 05       	cpc	r25, r1
    adde:	09 f4       	brne	.+2      	; 0xade2 <follow_path+0x92>
    ade0:	83 c0       	rjmp	.+262    	; 0xaee8 <follow_path+0x198>
    ade2:	8c 35       	cpi	r24, 0x5C	; 92
    ade4:	91 05       	cpc	r25, r1
    ade6:	09 f4       	brne	.+2      	; 0xadea <follow_path+0x9a>
    ade8:	7f c0       	rjmp	.+254    	; 0xaee8 <follow_path+0x198>
    adea:	a1 14       	cp	r10, r1
    adec:	f1 e0       	ldi	r31, 0x01	; 1
    adee:	bf 06       	cpc	r11, r31
    adf0:	09 f4       	brne	.+2      	; 0xadf4 <follow_path+0xa4>
    adf2:	ac c1       	rjmp	.+856    	; 0xb14c <follow_path+0x3fc>
    adf4:	61 e0       	ldi	r22, 0x01	; 1
    adf6:	70 e0       	ldi	r23, 0x00	; 0
    adf8:	0e 94 fe 68 	call	0xd1fc	; 0xd1fc <ff_convert>
    adfc:	00 97       	sbiw	r24, 0x00	; 0
    adfe:	09 f4       	brne	.+2      	; 0xae02 <follow_path+0xb2>
    ae00:	a5 c1       	rjmp	.+842    	; 0xb14c <follow_path+0x3fc>
    ae02:	80 38       	cpi	r24, 0x80	; 128
    ae04:	91 05       	cpc	r25, r1
    ae06:	28 f4       	brcc	.+10     	; 0xae12 <follow_path+0xc2>
    ae08:	e8 ed       	ldi	r30, 0xD8	; 216
    ae0a:	f7 e0       	ldi	r31, 0x07	; 7
    ae0c:	21 91       	ld	r18, Z+
    ae0e:	21 11       	cpse	r18, r1
    ae10:	79 c0       	rjmp	.+242    	; 0xaf04 <follow_path+0x1b4>
    ae12:	d3 01       	movw	r26, r6
    ae14:	8d 93       	st	X+, r24
    ae16:	9d 93       	st	X+, r25
    ae18:	3d 01       	movw	r6, r26
    ae1a:	bf 82       	std	Y+7, r11	; 0x07
    ae1c:	ae 82       	std	Y+6, r10	; 0x06
    ae1e:	ae 80       	ldd	r10, Y+6	; 0x06
    ae20:	bf 80       	ldd	r11, Y+7	; 0x07
    ae22:	bf ef       	ldi	r27, 0xFF	; 255
    ae24:	ab 1a       	sub	r10, r27
    ae26:	bb 0a       	sbc	r11, r27
    ae28:	f4 01       	movw	r30, r8
    ae2a:	81 91       	ld	r24, Z+
    ae2c:	4f 01       	movw	r8, r30
    ae2e:	90 e0       	ldi	r25, 0x00	; 0
    ae30:	80 32       	cpi	r24, 0x20	; 32
    ae32:	91 05       	cpc	r25, r1
    ae34:	90 f6       	brcc	.-92     	; 0xadda <follow_path+0x8a>
    ae36:	ea 0c       	add	r14, r10
    ae38:	fb 1c       	adc	r15, r11
    ae3a:	80 97       	sbiw	r24, 0x20	; 32
    ae3c:	08 f0       	brcs	.+2      	; 0xae40 <follow_path+0xf0>
    ae3e:	68 c0       	rjmp	.+208    	; 0xaf10 <follow_path+0x1c0>
    ae40:	b4 e0       	ldi	r27, 0x04	; 4
    ae42:	b9 83       	std	Y+1, r27	; 0x01
    ae44:	ee 81       	ldd	r30, Y+6	; 0x06
    ae46:	ff 81       	ldd	r31, Y+7	; 0x07
    ae48:	ee 0f       	add	r30, r30
    ae4a:	ff 1f       	adc	r31, r31
    ae4c:	2e 81       	ldd	r18, Y+6	; 0x06
    ae4e:	3f 81       	ldd	r19, Y+7	; 0x07
    ae50:	21 30       	cpi	r18, 0x01	; 1
    ae52:	31 05       	cpc	r19, r1
    ae54:	09 f0       	breq	.+2      	; 0xae58 <follow_path+0x108>
    ae56:	5e c0       	rjmp	.+188    	; 0xaf14 <follow_path+0x1c4>
    ae58:	d6 01       	movw	r26, r12
    ae5a:	8d 91       	ld	r24, X+
    ae5c:	9c 91       	ld	r25, X
    ae5e:	8e 97       	sbiw	r24, 0x2e	; 46
    ae60:	09 f0       	breq	.+2      	; 0xae64 <follow_path+0x114>
    ae62:	65 c0       	rjmp	.+202    	; 0xaf2e <follow_path+0x1de>
    ae64:	ec 0d       	add	r30, r12
    ae66:	fd 1d       	adc	r31, r13
    ae68:	11 82       	std	Z+1, r1	; 0x01
    ae6a:	10 82       	st	Z, r1
    ae6c:	f8 01       	movw	r30, r16
    ae6e:	7c 96       	adiw	r30, 0x1c	; 28
    ae70:	80 e0       	ldi	r24, 0x00	; 0
    ae72:	90 e0       	ldi	r25, 0x00	; 0
    ae74:	2e 81       	ldd	r18, Y+6	; 0x06
    ae76:	3f 81       	ldd	r19, Y+7	; 0x07
    ae78:	82 17       	cp	r24, r18
    ae7a:	93 07       	cpc	r25, r19
    ae7c:	08 f0       	brcs	.+2      	; 0xae80 <follow_path+0x130>
    ae7e:	5a c0       	rjmp	.+180    	; 0xaf34 <follow_path+0x1e4>
    ae80:	2e e2       	ldi	r18, 0x2E	; 46
    ae82:	21 93       	st	Z+, r18
    ae84:	01 96       	adiw	r24, 0x01	; 1
    ae86:	8b 30       	cpi	r24, 0x0B	; 11
    ae88:	91 05       	cpc	r25, r1
    ae8a:	a1 f7       	brne	.-24     	; 0xae74 <follow_path+0x124>
    ae8c:	89 81       	ldd	r24, Y+1	; 0x01
    ae8e:	80 62       	ori	r24, 0x20	; 32
    ae90:	d8 01       	movw	r26, r16
    ae92:	97 96       	adiw	r26, 0x27	; 39
    ae94:	8c 93       	st	X, r24
    ae96:	c8 01       	movw	r24, r16
    ae98:	a0 dc       	rcall	.-1728   	; 0xa7da <dir_find>
    ae9a:	d8 01       	movw	r26, r16
    ae9c:	97 96       	adiw	r26, 0x27	; 39
    ae9e:	2c 91       	ld	r18, X
    aea0:	00 97       	sbiw	r24, 0x00	; 0
    aea2:	09 f0       	breq	.+2      	; 0xaea6 <follow_path+0x156>
    aea4:	56 c1       	rjmp	.+684    	; 0xb152 <follow_path+0x402>
    aea6:	22 fd       	sbrc	r18, 2
    aea8:	70 c1       	rjmp	.+736    	; 0xb18a <follow_path+0x43a>
    aeaa:	f8 01       	movw	r30, r16
    aeac:	84 81       	ldd	r24, Z+4	; 0x04
    aeae:	84 ff       	sbrs	r24, 4
    aeb0:	63 c1       	rjmp	.+710    	; 0xb178 <follow_path+0x428>
    aeb2:	66 85       	ldd	r22, Z+14	; 0x0e
    aeb4:	77 85       	ldd	r23, Z+15	; 0x0f
    aeb6:	71 70       	andi	r23, 0x01	; 1
    aeb8:	2c 81       	ldd	r18, Y+4	; 0x04
    aeba:	3d 81       	ldd	r19, Y+5	; 0x05
    aebc:	62 0f       	add	r22, r18
    aebe:	73 1f       	adc	r23, r19
    aec0:	d1 01       	movw	r26, r2
    aec2:	8c 91       	ld	r24, X
    aec4:	0e 94 ba 48 	call	0x9174	; 0x9174 <ld_clust.isra.1>
    aec8:	f8 01       	movw	r30, r16
    aeca:	66 83       	std	Z+6, r22	; 0x06
    aecc:	77 83       	std	Z+7, r23	; 0x07
    aece:	80 87       	std	Z+8, r24	; 0x08
    aed0:	91 87       	std	Z+9, r25	; 0x09
    aed2:	d8 01       	movw	r26, r16
    aed4:	ed 91       	ld	r30, X+
    aed6:	fc 91       	ld	r31, X
    aed8:	c3 84       	ldd	r12, Z+11	; 0x0b
    aeda:	d4 84       	ldd	r13, Z+12	; 0x0c
    aedc:	26 01       	movw	r4, r12
    aede:	36 01       	movw	r6, r12
    aee0:	47 01       	movw	r8, r14
    aee2:	1f 82       	std	Y+7, r1	; 0x07
    aee4:	1e 82       	std	Y+6, r1	; 0x06
    aee6:	9b cf       	rjmp	.-202    	; 0xae1e <follow_path+0xce>
    aee8:	f7 01       	movw	r30, r14
    aeea:	ea 0d       	add	r30, r10
    aeec:	fb 1d       	adc	r31, r11
    aeee:	03 c0       	rjmp	.+6      	; 0xaef6 <follow_path+0x1a6>
    aef0:	2c 35       	cpi	r18, 0x5C	; 92
    aef2:	09 f0       	breq	.+2      	; 0xaef6 <follow_path+0x1a6>
    aef4:	a0 cf       	rjmp	.-192    	; 0xae36 <follow_path+0xe6>
    aef6:	5f 01       	movw	r10, r30
    aef8:	ae 18       	sub	r10, r14
    aefa:	bf 08       	sbc	r11, r15
    aefc:	21 91       	ld	r18, Z+
    aefe:	2f 32       	cpi	r18, 0x2F	; 47
    af00:	b9 f7       	brne	.-18     	; 0xaef0 <follow_path+0x1a0>
    af02:	f9 cf       	rjmp	.-14     	; 0xaef6 <follow_path+0x1a6>
    af04:	30 e0       	ldi	r19, 0x00	; 0
    af06:	82 17       	cp	r24, r18
    af08:	93 07       	cpc	r25, r19
    af0a:	09 f0       	breq	.+2      	; 0xaf0e <follow_path+0x1be>
    af0c:	7f cf       	rjmp	.-258    	; 0xae0c <follow_path+0xbc>
    af0e:	1e c1       	rjmp	.+572    	; 0xb14c <follow_path+0x3fc>
    af10:	19 82       	std	Y+1, r1	; 0x01
    af12:	98 cf       	rjmp	.-208    	; 0xae44 <follow_path+0xf4>
    af14:	2e 81       	ldd	r18, Y+6	; 0x06
    af16:	3f 81       	ldd	r19, Y+7	; 0x07
    af18:	22 30       	cpi	r18, 0x02	; 2
    af1a:	31 05       	cpc	r19, r1
    af1c:	41 f4       	brne	.+16     	; 0xaf2e <follow_path+0x1de>
    af1e:	d6 01       	movw	r26, r12
    af20:	12 96       	adiw	r26, 0x02	; 2
    af22:	8d 91       	ld	r24, X+
    af24:	9c 91       	ld	r25, X
    af26:	13 97       	sbiw	r26, 0x03	; 3
    af28:	8e 97       	sbiw	r24, 0x2e	; 46
    af2a:	09 f4       	brne	.+2      	; 0xaf2e <follow_path+0x1de>
    af2c:	96 cf       	rjmp	.-212    	; 0xae5a <follow_path+0x10a>
    af2e:	ec 0d       	add	r30, r12
    af30:	fd 1d       	adc	r31, r13
    af32:	0d c0       	rjmp	.+26     	; 0xaf4e <follow_path+0x1fe>
    af34:	20 e2       	ldi	r18, 0x20	; 32
    af36:	a5 cf       	rjmp	.-182    	; 0xae82 <follow_path+0x132>
    af38:	92 91       	ld	r25, -Z
    af3a:	82 91       	ld	r24, -Z
    af3c:	80 32       	cpi	r24, 0x20	; 32
    af3e:	91 05       	cpc	r25, r1
    af40:	59 f4       	brne	.+22     	; 0xaf58 <follow_path+0x208>
    af42:	2e 81       	ldd	r18, Y+6	; 0x06
    af44:	3f 81       	ldd	r19, Y+7	; 0x07
    af46:	21 50       	subi	r18, 0x01	; 1
    af48:	31 09       	sbc	r19, r1
    af4a:	3f 83       	std	Y+7, r19	; 0x07
    af4c:	2e 83       	std	Y+6, r18	; 0x06
    af4e:	8e 81       	ldd	r24, Y+6	; 0x06
    af50:	9f 81       	ldd	r25, Y+7	; 0x07
    af52:	89 2b       	or	r24, r25
    af54:	89 f7       	brne	.-30     	; 0xaf38 <follow_path+0x1e8>
    af56:	02 c0       	rjmp	.+4      	; 0xaf5c <follow_path+0x20c>
    af58:	8e 97       	sbiw	r24, 0x2e	; 46
    af5a:	99 f3       	breq	.-26     	; 0xaf42 <follow_path+0x1f2>
    af5c:	ae 80       	ldd	r10, Y+6	; 0x06
    af5e:	bf 80       	ldd	r11, Y+7	; 0x07
    af60:	aa 0c       	add	r10, r10
    af62:	bb 1c       	adc	r11, r11
    af64:	ac 0c       	add	r10, r12
    af66:	bd 1c       	adc	r11, r13
    af68:	d5 01       	movw	r26, r10
    af6a:	1d 92       	st	X+, r1
    af6c:	1c 92       	st	X, r1
    af6e:	ee 81       	ldd	r30, Y+6	; 0x06
    af70:	ff 81       	ldd	r31, Y+7	; 0x07
    af72:	ef 2b       	or	r30, r31
    af74:	09 f4       	brne	.+2      	; 0xaf78 <follow_path+0x228>
    af76:	ea c0       	rjmp	.+468    	; 0xb14c <follow_path+0x3fc>
    af78:	4b e0       	ldi	r20, 0x0B	; 11
    af7a:	50 e0       	ldi	r21, 0x00	; 0
    af7c:	60 e2       	ldi	r22, 0x20	; 32
    af7e:	70 e0       	ldi	r23, 0x00	; 0
    af80:	8a 81       	ldd	r24, Y+2	; 0x02
    af82:	9b 81       	ldd	r25, Y+3	; 0x03
    af84:	0e 94 e6 47 	call	0x8fcc	; 0x8fcc <mem_set>
    af88:	80 e0       	ldi	r24, 0x00	; 0
    af8a:	90 e0       	ldi	r25, 0x00	; 0
    af8c:	d2 01       	movw	r26, r4
    af8e:	2d 91       	ld	r18, X+
    af90:	3d 91       	ld	r19, X+
    af92:	2d 01       	movw	r4, r26
    af94:	20 32       	cpi	r18, 0x20	; 32
    af96:	31 05       	cpc	r19, r1
    af98:	11 f4       	brne	.+4      	; 0xaf9e <follow_path+0x24e>
    af9a:	01 96       	adiw	r24, 0x01	; 1
    af9c:	f7 cf       	rjmp	.-18     	; 0xaf8c <follow_path+0x23c>
    af9e:	2e 32       	cpi	r18, 0x2E	; 46
    afa0:	31 05       	cpc	r19, r1
    afa2:	d9 f3       	breq	.-10     	; 0xaf9a <follow_path+0x24a>
    afa4:	00 97       	sbiw	r24, 0x00	; 0
    afa6:	19 f0       	breq	.+6      	; 0xafae <follow_path+0x25e>
    afa8:	b9 81       	ldd	r27, Y+1	; 0x01
    afaa:	b3 60       	ori	r27, 0x03	; 3
    afac:	b9 83       	std	Y+1, r27	; 0x01
    afae:	f5 01       	movw	r30, r10
    afb0:	32 91       	ld	r19, -Z
    afb2:	22 91       	ld	r18, -Z
    afb4:	2e 32       	cpi	r18, 0x2E	; 46
    afb6:	31 05       	cpc	r19, r1
    afb8:	41 f0       	breq	.+16     	; 0xafca <follow_path+0x27a>
    afba:	2e 81       	ldd	r18, Y+6	; 0x06
    afbc:	3f 81       	ldd	r19, Y+7	; 0x07
    afbe:	21 50       	subi	r18, 0x01	; 1
    afc0:	31 09       	sbc	r19, r1
    afc2:	3f 83       	std	Y+7, r19	; 0x07
    afc4:	2e 83       	std	Y+6, r18	; 0x06
    afc6:	23 2b       	or	r18, r19
    afc8:	99 f7       	brne	.-26     	; 0xafb0 <follow_path+0x260>
    afca:	48 e0       	ldi	r20, 0x08	; 8
    afcc:	a4 2e       	mov	r10, r20
    afce:	b1 2c       	mov	r11, r1
    afd0:	81 2c       	mov	r8, r1
    afd2:	91 2c       	mov	r9, r1
    afd4:	41 2c       	mov	r4, r1
    afd6:	3c 01       	movw	r6, r24
    afd8:	3f ef       	ldi	r19, 0xFF	; 255
    afda:	63 1a       	sub	r6, r19
    afdc:	73 0a       	sbc	r7, r19
    afde:	88 0f       	add	r24, r24
    afe0:	99 1f       	adc	r25, r25
    afe2:	f6 01       	movw	r30, r12
    afe4:	e8 0f       	add	r30, r24
    afe6:	f9 1f       	adc	r31, r25
    afe8:	80 81       	ld	r24, Z
    afea:	91 81       	ldd	r25, Z+1	; 0x01
    afec:	00 97       	sbiw	r24, 0x00	; 0
    afee:	09 f4       	brne	.+2      	; 0xaff2 <follow_path+0x2a2>
    aff0:	75 c0       	rjmp	.+234    	; 0xb0dc <follow_path+0x38c>
    aff2:	80 32       	cpi	r24, 0x20	; 32
    aff4:	91 05       	cpc	r25, r1
    aff6:	41 f0       	breq	.+16     	; 0xb008 <follow_path+0x2b8>
    aff8:	8e 32       	cpi	r24, 0x2E	; 46
    affa:	91 05       	cpc	r25, r1
    affc:	51 f4       	brne	.+20     	; 0xb012 <follow_path+0x2c2>
    affe:	8e 81       	ldd	r24, Y+6	; 0x06
    b000:	9f 81       	ldd	r25, Y+7	; 0x07
    b002:	68 16       	cp	r6, r24
    b004:	79 06       	cpc	r7, r25
    b006:	71 f0       	breq	.+28     	; 0xb024 <follow_path+0x2d4>
    b008:	99 81       	ldd	r25, Y+1	; 0x01
    b00a:	93 60       	ori	r25, 0x03	; 3
    b00c:	99 83       	std	Y+1, r25	; 0x01
    b00e:	c3 01       	movw	r24, r6
    b010:	e2 cf       	rjmp	.-60     	; 0xafd6 <follow_path+0x286>
    b012:	8a 14       	cp	r8, r10
    b014:	9b 04       	cpc	r9, r11
    b016:	50 f4       	brcc	.+20     	; 0xb02c <follow_path+0x2dc>
    b018:	ae 81       	ldd	r26, Y+6	; 0x06
    b01a:	bf 81       	ldd	r27, Y+7	; 0x07
    b01c:	6a 16       	cp	r6, r26
    b01e:	7b 06       	cpc	r7, r27
    b020:	49 f5       	brne	.+82     	; 0xb074 <follow_path+0x324>
    b022:	ad c0       	rjmp	.+346    	; 0xb17e <follow_path+0x42e>
    b024:	8a 14       	cp	r8, r10
    b026:	9b 04       	cpc	r9, r11
    b028:	08 f4       	brcc	.+2      	; 0xb02c <follow_path+0x2dc>
    b02a:	a9 c0       	rjmp	.+338    	; 0xb17e <follow_path+0x42e>
    b02c:	bb e0       	ldi	r27, 0x0B	; 11
    b02e:	ab 16       	cp	r10, r27
    b030:	b1 04       	cpc	r11, r1
    b032:	39 f4       	brne	.+14     	; 0xb042 <follow_path+0x2f2>
    b034:	e9 81       	ldd	r30, Y+1	; 0x01
    b036:	e3 60       	ori	r30, 0x03	; 3
    b038:	e9 83       	std	Y+1, r30	; 0x01
    b03a:	2b e0       	ldi	r18, 0x0B	; 11
    b03c:	a2 2e       	mov	r10, r18
    b03e:	b1 2c       	mov	r11, r1
    b040:	4d c0       	rjmp	.+154    	; 0xb0dc <follow_path+0x38c>
    b042:	2e 81       	ldd	r18, Y+6	; 0x06
    b044:	3f 81       	ldd	r19, Y+7	; 0x07
    b046:	62 16       	cp	r6, r18
    b048:	73 06       	cpc	r7, r19
    b04a:	49 f0       	breq	.+18     	; 0xb05e <follow_path+0x30e>
    b04c:	39 81       	ldd	r19, Y+1	; 0x01
    b04e:	33 60       	ori	r19, 0x03	; 3
    b050:	39 83       	std	Y+1, r19	; 0x01
    b052:	8e 81       	ldd	r24, Y+6	; 0x06
    b054:	9f 81       	ldd	r25, Y+7	; 0x07
    b056:	86 15       	cp	r24, r6
    b058:	97 05       	cpc	r25, r7
    b05a:	08 f4       	brcc	.+2      	; 0xb05e <follow_path+0x30e>
    b05c:	3f c0       	rjmp	.+126    	; 0xb0dc <follow_path+0x38c>
    b05e:	44 0c       	add	r4, r4
    b060:	44 0c       	add	r4, r4
    b062:	6e 80       	ldd	r6, Y+6	; 0x06
    b064:	7f 80       	ldd	r7, Y+7	; 0x07
    b066:	8b e0       	ldi	r24, 0x0B	; 11
    b068:	a8 2e       	mov	r10, r24
    b06a:	b1 2c       	mov	r11, r1
    b06c:	98 e0       	ldi	r25, 0x08	; 8
    b06e:	89 2e       	mov	r8, r25
    b070:	91 2c       	mov	r9, r1
    b072:	cd cf       	rjmp	.-102    	; 0xb00e <follow_path+0x2be>
    b074:	80 38       	cpi	r24, 0x80	; 128
    b076:	91 05       	cpc	r25, r1
    b078:	80 f0       	brcs	.+32     	; 0xb09a <follow_path+0x34a>
    b07a:	60 e0       	ldi	r22, 0x00	; 0
    b07c:	70 e0       	ldi	r23, 0x00	; 0
    b07e:	0e 94 fe 68 	call	0xd1fc	; 0xd1fc <ff_convert>
    b082:	00 97       	sbiw	r24, 0x00	; 0
    b084:	29 f0       	breq	.+10     	; 0xb090 <follow_path+0x340>
    b086:	fc 01       	movw	r30, r24
    b088:	e2 5b       	subi	r30, 0xB2	; 178
    b08a:	fd 4f       	sbci	r31, 0xFD	; 253
    b08c:	80 81       	ld	r24, Z
    b08e:	90 e0       	ldi	r25, 0x00	; 0
    b090:	a9 81       	ldd	r26, Y+1	; 0x01
    b092:	a2 60       	ori	r26, 0x02	; 2
    b094:	a9 83       	std	Y+1, r26	; 0x01
    b096:	00 97       	sbiw	r24, 0x00	; 0
    b098:	49 f0       	breq	.+18     	; 0xb0ac <follow_path+0x35c>
    b09a:	e1 ee       	ldi	r30, 0xE1	; 225
    b09c:	f7 e0       	ldi	r31, 0x07	; 7
    b09e:	21 91       	ld	r18, Z+
    b0a0:	22 23       	and	r18, r18
    b0a2:	51 f0       	breq	.+20     	; 0xb0b8 <follow_path+0x368>
    b0a4:	30 e0       	ldi	r19, 0x00	; 0
    b0a6:	82 17       	cp	r24, r18
    b0a8:	93 07       	cpc	r25, r19
    b0aa:	c9 f7       	brne	.-14     	; 0xb09e <follow_path+0x34e>
    b0ac:	b9 81       	ldd	r27, Y+1	; 0x01
    b0ae:	b3 60       	ori	r27, 0x03	; 3
    b0b0:	b9 83       	std	Y+1, r27	; 0x01
    b0b2:	8f e5       	ldi	r24, 0x5F	; 95
    b0b4:	90 e0       	ldi	r25, 0x00	; 0
    b0b6:	09 c0       	rjmp	.+18     	; 0xb0ca <follow_path+0x37a>
    b0b8:	9c 01       	movw	r18, r24
    b0ba:	21 54       	subi	r18, 0x41	; 65
    b0bc:	31 09       	sbc	r19, r1
    b0be:	2a 31       	cpi	r18, 0x1A	; 26
    b0c0:	31 05       	cpc	r19, r1
    b0c2:	c8 f5       	brcc	.+114    	; 0xb136 <follow_path+0x3e6>
    b0c4:	e4 2d       	mov	r30, r4
    b0c6:	e2 60       	ori	r30, 0x02	; 2
    b0c8:	4e 2e       	mov	r4, r30
    b0ca:	f8 01       	movw	r30, r16
    b0cc:	e8 0d       	add	r30, r8
    b0ce:	f9 1d       	adc	r31, r9
    b0d0:	84 8f       	std	Z+28, r24	; 0x1c
    b0d2:	94 01       	movw	r18, r8
    b0d4:	2f 5f       	subi	r18, 0xFF	; 255
    b0d6:	3f 4f       	sbci	r19, 0xFF	; 255
    b0d8:	49 01       	movw	r8, r18
    b0da:	99 cf       	rjmp	.-206    	; 0xb00e <follow_path+0x2be>
    b0dc:	d8 01       	movw	r26, r16
    b0de:	5c 96       	adiw	r26, 0x1c	; 28
    b0e0:	8c 91       	ld	r24, X
    b0e2:	5c 97       	sbiw	r26, 0x1c	; 28
    b0e4:	85 3e       	cpi	r24, 0xE5	; 229
    b0e6:	19 f4       	brne	.+6      	; 0xb0ee <follow_path+0x39e>
    b0e8:	e5 e0       	ldi	r30, 0x05	; 5
    b0ea:	5c 96       	adiw	r26, 0x1c	; 28
    b0ec:	ec 93       	st	X, r30
    b0ee:	f8 e0       	ldi	r31, 0x08	; 8
    b0f0:	af 16       	cp	r10, r31
    b0f2:	b1 04       	cpc	r11, r1
    b0f4:	11 f4       	brne	.+4      	; 0xb0fa <follow_path+0x3aa>
    b0f6:	44 0c       	add	r4, r4
    b0f8:	44 0c       	add	r4, r4
    b0fa:	84 2d       	mov	r24, r4
    b0fc:	8c 70       	andi	r24, 0x0C	; 12
    b0fe:	8c 30       	cpi	r24, 0x0C	; 12
    b100:	21 f0       	breq	.+8      	; 0xb10a <follow_path+0x3ba>
    b102:	94 2d       	mov	r25, r4
    b104:	93 70       	andi	r25, 0x03	; 3
    b106:	93 30       	cpi	r25, 0x03	; 3
    b108:	19 f4       	brne	.+6      	; 0xb110 <follow_path+0x3c0>
    b10a:	29 81       	ldd	r18, Y+1	; 0x01
    b10c:	22 60       	ori	r18, 0x02	; 2
    b10e:	29 83       	std	Y+1, r18	; 0x01
    b110:	39 81       	ldd	r19, Y+1	; 0x01
    b112:	31 fd       	sbrc	r19, 1
    b114:	0b c0       	rjmp	.+22     	; 0xb12c <follow_path+0x3dc>
    b116:	94 2d       	mov	r25, r4
    b118:	93 70       	andi	r25, 0x03	; 3
    b11a:	91 30       	cpi	r25, 0x01	; 1
    b11c:	11 f4       	brne	.+4      	; 0xb122 <follow_path+0x3d2>
    b11e:	30 61       	ori	r19, 0x10	; 16
    b120:	39 83       	std	Y+1, r19	; 0x01
    b122:	84 30       	cpi	r24, 0x04	; 4
    b124:	19 f4       	brne	.+6      	; 0xb12c <follow_path+0x3dc>
    b126:	89 81       	ldd	r24, Y+1	; 0x01
    b128:	88 60       	ori	r24, 0x08	; 8
    b12a:	89 83       	std	Y+1, r24	; 0x01
    b12c:	e9 81       	ldd	r30, Y+1	; 0x01
    b12e:	d8 01       	movw	r26, r16
    b130:	97 96       	adiw	r26, 0x27	; 39
    b132:	ec 93       	st	X, r30
    b134:	b0 ce       	rjmp	.-672    	; 0xae96 <follow_path+0x146>
    b136:	9c 01       	movw	r18, r24
    b138:	21 56       	subi	r18, 0x61	; 97
    b13a:	31 09       	sbc	r19, r1
    b13c:	2a 31       	cpi	r18, 0x1A	; 26
    b13e:	31 05       	cpc	r19, r1
    b140:	20 f6       	brcc	.-120    	; 0xb0ca <follow_path+0x37a>
    b142:	f4 2d       	mov	r31, r4
    b144:	f1 60       	ori	r31, 0x01	; 1
    b146:	4f 2e       	mov	r4, r31
    b148:	80 97       	sbiw	r24, 0x20	; 32
    b14a:	bf cf       	rjmp	.-130    	; 0xb0ca <follow_path+0x37a>
    b14c:	86 e0       	ldi	r24, 0x06	; 6
    b14e:	90 e0       	ldi	r25, 0x00	; 0
    b150:	1c c0       	rjmp	.+56     	; 0xb18a <follow_path+0x43a>
    b152:	84 30       	cpi	r24, 0x04	; 4
    b154:	91 05       	cpc	r25, r1
    b156:	c9 f4       	brne	.+50     	; 0xb18a <follow_path+0x43a>
    b158:	32 2f       	mov	r19, r18
    b15a:	34 70       	andi	r19, 0x04	; 4
    b15c:	25 ff       	sbrs	r18, 5
    b15e:	0a c0       	rjmp	.+20     	; 0xb174 <follow_path+0x424>
    b160:	33 23       	and	r19, r19
    b162:	09 f4       	brne	.+2      	; 0xb166 <follow_path+0x416>
    b164:	b6 ce       	rjmp	.-660    	; 0xaed2 <follow_path+0x182>
    b166:	80 e8       	ldi	r24, 0x80	; 128
    b168:	d8 01       	movw	r26, r16
    b16a:	97 96       	adiw	r26, 0x27	; 39
    b16c:	8c 93       	st	X, r24
    b16e:	80 e0       	ldi	r24, 0x00	; 0
    b170:	90 e0       	ldi	r25, 0x00	; 0
    b172:	0b c0       	rjmp	.+22     	; 0xb18a <follow_path+0x43a>
    b174:	31 11       	cpse	r19, r1
    b176:	09 c0       	rjmp	.+18     	; 0xb18a <follow_path+0x43a>
    b178:	85 e0       	ldi	r24, 0x05	; 5
    b17a:	90 e0       	ldi	r25, 0x00	; 0
    b17c:	06 c0       	rjmp	.+12     	; 0xb18a <follow_path+0x43a>
    b17e:	bb e0       	ldi	r27, 0x0B	; 11
    b180:	ab 16       	cp	r10, r27
    b182:	b1 04       	cpc	r11, r1
    b184:	09 f0       	breq	.+2      	; 0xb188 <follow_path+0x438>
    b186:	6b cf       	rjmp	.-298    	; 0xb05e <follow_path+0x30e>
    b188:	55 cf       	rjmp	.-342    	; 0xb034 <follow_path+0x2e4>
    b18a:	27 96       	adiw	r28, 0x07	; 7
    b18c:	e2 e1       	ldi	r30, 0x12	; 18
    b18e:	0c 94 2f e8 	jmp	0x1d05e	; 0x1d05e <__epilogue_restores__>

0000b192 <f_mount>:
    b192:	a6 e0       	ldi	r26, 0x06	; 6
    b194:	b0 e0       	ldi	r27, 0x00	; 0
    b196:	ef ec       	ldi	r30, 0xCF	; 207
    b198:	f8 e5       	ldi	r31, 0x58	; 88
    b19a:	0c 94 22 e8 	jmp	0x1d044	; 0x1d044 <__prologue_saves__+0x1e>
    b19e:	9c 83       	std	Y+4, r25	; 0x04
    b1a0:	8b 83       	std	Y+3, r24	; 0x03
    b1a2:	7e 83       	std	Y+6, r23	; 0x06
    b1a4:	6d 83       	std	Y+5, r22	; 0x05
    b1a6:	14 2f       	mov	r17, r20
    b1a8:	7a 83       	std	Y+2, r23	; 0x02
    b1aa:	69 83       	std	Y+1, r22	; 0x01
    b1ac:	ce 01       	movw	r24, r28
    b1ae:	01 96       	adiw	r24, 0x01	; 1
    b1b0:	0e 94 62 48 	call	0x90c4	; 0x90c4 <get_ldnumber>
    b1b4:	97 fd       	sbrc	r25, 7
    b1b6:	22 c0       	rjmp	.+68     	; 0xb1fc <f_mount+0x6a>
    b1b8:	88 0f       	add	r24, r24
    b1ba:	99 1f       	adc	r25, r25
    b1bc:	fc 01       	movw	r30, r24
    b1be:	ea 5c       	subi	r30, 0xCA	; 202
    b1c0:	f7 4e       	sbci	r31, 0xE7	; 231
    b1c2:	01 90       	ld	r0, Z+
    b1c4:	f0 81       	ld	r31, Z
    b1c6:	e0 2d       	mov	r30, r0
    b1c8:	30 97       	sbiw	r30, 0x00	; 0
    b1ca:	09 f0       	breq	.+2      	; 0xb1ce <f_mount+0x3c>
    b1cc:	10 82       	st	Z, r1
    b1ce:	eb 81       	ldd	r30, Y+3	; 0x03
    b1d0:	fc 81       	ldd	r31, Y+4	; 0x04
    b1d2:	30 97       	sbiw	r30, 0x00	; 0
    b1d4:	09 f0       	breq	.+2      	; 0xb1d8 <f_mount+0x46>
    b1d6:	10 82       	st	Z, r1
    b1d8:	dc 01       	movw	r26, r24
    b1da:	aa 5c       	subi	r26, 0xCA	; 202
    b1dc:	b7 4e       	sbci	r27, 0xE7	; 231
    b1de:	ed 93       	st	X+, r30
    b1e0:	fc 93       	st	X, r31
    b1e2:	ef 2b       	or	r30, r31
    b1e4:	71 f0       	breq	.+28     	; 0xb202 <f_mount+0x70>
    b1e6:	11 30       	cpi	r17, 0x01	; 1
    b1e8:	61 f4       	brne	.+24     	; 0xb202 <f_mount+0x70>
    b1ea:	40 e0       	ldi	r20, 0x00	; 0
    b1ec:	be 01       	movw	r22, r28
    b1ee:	6d 5f       	subi	r22, 0xFD	; 253
    b1f0:	7f 4f       	sbci	r23, 0xFF	; 255
    b1f2:	ce 01       	movw	r24, r28
    b1f4:	05 96       	adiw	r24, 0x05	; 5
    b1f6:	0e 94 22 4a 	call	0x9444	; 0x9444 <find_volume>
    b1fa:	05 c0       	rjmp	.+10     	; 0xb206 <f_mount+0x74>
    b1fc:	8b e0       	ldi	r24, 0x0B	; 11
    b1fe:	90 e0       	ldi	r25, 0x00	; 0
    b200:	02 c0       	rjmp	.+4      	; 0xb206 <f_mount+0x74>
    b202:	80 e0       	ldi	r24, 0x00	; 0
    b204:	90 e0       	ldi	r25, 0x00	; 0
    b206:	26 96       	adiw	r28, 0x06	; 6
    b208:	e3 e0       	ldi	r30, 0x03	; 3
    b20a:	0c 94 3e e8 	jmp	0x1d07c	; 0x1d07c <__epilogue_restores__+0x1e>

0000b20e <f_open>:
    b20e:	2f 92       	push	r2
    b210:	3f 92       	push	r3
    b212:	4f 92       	push	r4
    b214:	5f 92       	push	r5
    b216:	6f 92       	push	r6
    b218:	7f 92       	push	r7
    b21a:	8f 92       	push	r8
    b21c:	9f 92       	push	r9
    b21e:	af 92       	push	r10
    b220:	bf 92       	push	r11
    b222:	df 92       	push	r13
    b224:	ef 92       	push	r14
    b226:	ff 92       	push	r15
    b228:	0f 93       	push	r16
    b22a:	1f 93       	push	r17
    b22c:	cf 93       	push	r28
    b22e:	df 93       	push	r29
    b230:	cd b7       	in	r28, 0x3d	; 61
    b232:	de b7       	in	r29, 0x3e	; 62
    b234:	e6 97       	sbiw	r28, 0x36	; 54
    b236:	0f b6       	in	r0, 0x3f	; 63
    b238:	f8 94       	cli
    b23a:	de bf       	out	0x3e, r29	; 62
    b23c:	0f be       	out	0x3f, r0	; 63
    b23e:	cd bf       	out	0x3d, r28	; 61
    b240:	7a ab       	std	Y+50, r23	; 0x32
    b242:	69 ab       	std	Y+49, r22	; 0x31
    b244:	00 97       	sbiw	r24, 0x00	; 0
    b246:	09 f4       	brne	.+2      	; 0xb24a <f_open+0x3c>
    b248:	b0 c1       	rjmp	.+864    	; 0xb5aa <f_open+0x39c>
    b24a:	94 2e       	mov	r9, r20
    b24c:	7c 01       	movw	r14, r24
    b24e:	24 2f       	mov	r18, r20
    b250:	2f 73       	andi	r18, 0x3F	; 63
    b252:	d2 2e       	mov	r13, r18
    b254:	42 2f       	mov	r20, r18
    b256:	be 01       	movw	r22, r28
    b258:	61 5d       	subi	r22, 0xD1	; 209
    b25a:	7f 4f       	sbci	r23, 0xFF	; 255
    b25c:	ce 01       	movw	r24, r28
    b25e:	c1 96       	adiw	r24, 0x31	; 49
    b260:	0e 94 22 4a 	call	0x9444	; 0x9444 <find_volume>
    b264:	00 97       	sbiw	r24, 0x00	; 0
    b266:	09 f0       	breq	.+2      	; 0xb26a <f_open+0x5c>
    b268:	9a c1       	rjmp	.+820    	; 0xb59e <f_open+0x390>
    b26a:	8f a5       	ldd	r24, Y+47	; 0x2f
    b26c:	98 a9       	ldd	r25, Y+48	; 0x30
    b26e:	9a 83       	std	Y+2, r25	; 0x02
    b270:	89 83       	std	Y+1, r24	; 0x01
    b272:	80 e0       	ldi	r24, 0x00	; 0
    b274:	92 e0       	ldi	r25, 0x02	; 2
    b276:	0e 94 f8 68 	call	0xd1f0	; 0xd1f0 <ff_memalloc>
    b27a:	5c 01       	movw	r10, r24
    b27c:	00 97       	sbiw	r24, 0x00	; 0
    b27e:	09 f4       	brne	.+2      	; 0xb282 <f_open+0x74>
    b280:	96 c1       	rjmp	.+812    	; 0xb5ae <f_open+0x3a0>
    b282:	ef a5       	ldd	r30, Y+47	; 0x2f
    b284:	f8 a9       	ldd	r31, Y+48	; 0x30
    b286:	94 87       	std	Z+12, r25	; 0x0c
    b288:	83 87       	std	Z+11, r24	; 0x0b
    b28a:	69 a9       	ldd	r22, Y+49	; 0x31
    b28c:	7a a9       	ldd	r23, Y+50	; 0x32
    b28e:	ce 01       	movw	r24, r28
    b290:	01 96       	adiw	r24, 0x01	; 1
    b292:	5e dd       	rcall	.-1348   	; 0xad50 <follow_path>
    b294:	8c 01       	movw	r16, r24
    b296:	89 2b       	or	r24, r25
    b298:	29 f4       	brne	.+10     	; 0xb2a4 <f_open+0x96>
    b29a:	88 a5       	ldd	r24, Y+40	; 0x28
    b29c:	87 ff       	sbrs	r24, 7
    b29e:	02 c0       	rjmp	.+4      	; 0xb2a4 <f_open+0x96>
    b2a0:	06 e0       	ldi	r16, 0x06	; 6
    b2a2:	10 e0       	ldi	r17, 0x00	; 0
    b2a4:	89 2d       	mov	r24, r9
    b2a6:	8c 71       	andi	r24, 0x1C	; 28
    b2a8:	09 f4       	brne	.+2      	; 0xb2ac <f_open+0x9e>
    b2aa:	7e c0       	rjmp	.+252    	; 0xb3a8 <f_open+0x19a>
    b2ac:	01 15       	cp	r16, r1
    b2ae:	11 05       	cpc	r17, r1
    b2b0:	79 f0       	breq	.+30     	; 0xb2d0 <f_open+0xc2>
    b2b2:	04 30       	cpi	r16, 0x04	; 4
    b2b4:	11 05       	cpc	r17, r1
    b2b6:	09 f0       	breq	.+2      	; 0xb2ba <f_open+0xac>
    b2b8:	8a c1       	rjmp	.+788    	; 0xb5ce <f_open+0x3c0>
    b2ba:	ce 01       	movw	r24, r28
    b2bc:	01 96       	adiw	r24, 0x01	; 1
    b2be:	a4 db       	rcall	.-2232   	; 0xaa08 <dir_register>
    b2c0:	8c 01       	movw	r16, r24
    b2c2:	89 2b       	or	r24, r25
    b2c4:	09 f0       	breq	.+2      	; 0xb2c8 <f_open+0xba>
    b2c6:	83 c1       	rjmp	.+774    	; 0xb5ce <f_open+0x3c0>
    b2c8:	8d 2d       	mov	r24, r13
    b2ca:	88 60       	ori	r24, 0x08	; 8
    b2cc:	d8 2e       	mov	r13, r24
    b2ce:	06 c0       	rjmp	.+12     	; 0xb2dc <f_open+0xce>
    b2d0:	8d 81       	ldd	r24, Y+5	; 0x05
    b2d2:	81 71       	andi	r24, 0x11	; 17
    b2d4:	09 f0       	breq	.+2      	; 0xb2d8 <f_open+0xca>
    b2d6:	79 c1       	rjmp	.+754    	; 0xb5ca <f_open+0x3bc>
    b2d8:	92 fc       	sbrc	r9, 2
    b2da:	6e c1       	rjmp	.+732    	; 0xb5b8 <f_open+0x3aa>
    b2dc:	d3 fe       	sbrs	r13, 3
    b2de:	74 c0       	rjmp	.+232    	; 0xb3c8 <f_open+0x1ba>
    b2e0:	0e 94 08 70 	call	0xe010	; 0xe010 <get_fattime>
    b2e4:	2b 01       	movw	r4, r22
    b2e6:	3c 01       	movw	r6, r24
    b2e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    b2ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    b2ec:	b3 01       	movw	r22, r6
    b2ee:	a2 01       	movw	r20, r4
    b2f0:	0e 96       	adiw	r24, 0x0e	; 14
    b2f2:	0e 94 e0 47 	call	0x8fc0	; 0x8fc0 <st_dword>
    b2f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    b2f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    b2fa:	b3 01       	movw	r22, r6
    b2fc:	a2 01       	movw	r20, r4
    b2fe:	46 96       	adiw	r24, 0x16	; 22
    b300:	0e 94 e0 47 	call	0x8fc0	; 0x8fc0 <st_dword>
    b304:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b306:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b308:	80 e2       	ldi	r24, 0x20	; 32
    b30a:	83 87       	std	Z+11, r24	; 0x0b
    b30c:	0b 8d       	ldd	r16, Y+27	; 0x1b
    b30e:	1c 8d       	ldd	r17, Y+28	; 0x1c
    b310:	8f a4       	ldd	r8, Y+47	; 0x2f
    b312:	98 a8       	ldd	r9, Y+48	; 0x30
    b314:	b8 01       	movw	r22, r16
    b316:	d4 01       	movw	r26, r8
    b318:	8c 91       	ld	r24, X
    b31a:	0e 94 ba 48 	call	0x9174	; 0x9174 <ld_clust.isra.1>
    b31e:	2b 01       	movw	r4, r22
    b320:	3c 01       	movw	r6, r24
    b322:	f8 01       	movw	r30, r16
    b324:	12 8e       	std	Z+26, r1	; 0x1a
    b326:	13 8e       	std	Z+27, r1	; 0x1b
    b328:	d4 01       	movw	r26, r8
    b32a:	8c 91       	ld	r24, X
    b32c:	83 30       	cpi	r24, 0x03	; 3
    b32e:	11 f4       	brne	.+4      	; 0xb334 <f_open+0x126>
    b330:	14 8a       	std	Z+20, r1	; 0x14
    b332:	15 8a       	std	Z+21, r1	; 0x15
    b334:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b336:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b338:	14 8e       	std	Z+28, r1	; 0x1c
    b33a:	15 8e       	std	Z+29, r1	; 0x1d
    b33c:	16 8e       	std	Z+30, r1	; 0x1e
    b33e:	17 8e       	std	Z+31, r1	; 0x1f
    b340:	81 e0       	ldi	r24, 0x01	; 1
    b342:	f4 01       	movw	r30, r8
    b344:	83 83       	std	Z+3, r24	; 0x03
    b346:	41 14       	cp	r4, r1
    b348:	51 04       	cpc	r5, r1
    b34a:	61 04       	cpc	r6, r1
    b34c:	71 04       	cpc	r7, r1
    b34e:	c9 f1       	breq	.+114    	; 0xb3c2 <f_open+0x1b4>
    b350:	81 a9       	ldd	r24, Z+49	; 0x31
    b352:	92 a9       	ldd	r25, Z+50	; 0x32
    b354:	a3 a9       	ldd	r26, Z+51	; 0x33
    b356:	b4 a9       	ldd	r27, Z+52	; 0x34
    b358:	8b ab       	std	Y+51, r24	; 0x33
    b35a:	9c ab       	std	Y+52, r25	; 0x34
    b35c:	ad ab       	std	Y+53, r26	; 0x35
    b35e:	be ab       	std	Y+54, r27	; 0x36
    b360:	00 e0       	ldi	r16, 0x00	; 0
    b362:	10 e0       	ldi	r17, 0x00	; 0
    b364:	98 01       	movw	r18, r16
    b366:	b3 01       	movw	r22, r6
    b368:	a2 01       	movw	r20, r4
    b36a:	ce 01       	movw	r24, r28
    b36c:	01 96       	adiw	r24, 0x01	; 1
    b36e:	0e 94 0c 50 	call	0xa018	; 0xa018 <remove_chain>
    b372:	8c 01       	movw	r16, r24
    b374:	89 2b       	or	r24, r25
    b376:	09 f0       	breq	.+2      	; 0xb37a <f_open+0x16c>
    b378:	2a c1       	rjmp	.+596    	; 0xb5ce <f_open+0x3c0>
    b37a:	4b a9       	ldd	r20, Y+51	; 0x33
    b37c:	5c a9       	ldd	r21, Y+52	; 0x34
    b37e:	6d a9       	ldd	r22, Y+53	; 0x35
    b380:	7e a9       	ldd	r23, Y+54	; 0x36
    b382:	8f a5       	ldd	r24, Y+47	; 0x2f
    b384:	98 a9       	ldd	r25, Y+48	; 0x30
    b386:	0e 94 a2 49 	call	0x9344	; 0x9344 <move_window>
    b38a:	8c 01       	movw	r16, r24
    b38c:	ef a5       	ldd	r30, Y+47	; 0x2f
    b38e:	f8 a9       	ldd	r31, Y+48	; 0x30
    b390:	b1 e0       	ldi	r27, 0x01	; 1
    b392:	4b 1a       	sub	r4, r27
    b394:	51 08       	sbc	r5, r1
    b396:	61 08       	sbc	r6, r1
    b398:	71 08       	sbc	r7, r1
    b39a:	45 86       	std	Z+13, r4	; 0x0d
    b39c:	56 86       	std	Z+14, r5	; 0x0e
    b39e:	67 86       	std	Z+15, r6	; 0x0f
    b3a0:	70 8a       	std	Z+16, r7	; 0x10
    b3a2:	89 2b       	or	r24, r25
    b3a4:	61 f0       	breq	.+24     	; 0xb3be <f_open+0x1b0>
    b3a6:	13 c1       	rjmp	.+550    	; 0xb5ce <f_open+0x3c0>
    b3a8:	01 15       	cp	r16, r1
    b3aa:	11 05       	cpc	r17, r1
    b3ac:	09 f0       	breq	.+2      	; 0xb3b0 <f_open+0x1a2>
    b3ae:	0f c1       	rjmp	.+542    	; 0xb5ce <f_open+0x3c0>
    b3b0:	8d 81       	ldd	r24, Y+5	; 0x05
    b3b2:	84 fd       	sbrc	r24, 4
    b3b4:	07 c1       	rjmp	.+526    	; 0xb5c4 <f_open+0x3b6>
    b3b6:	91 fe       	sbrs	r9, 1
    b3b8:	02 c0       	rjmp	.+4      	; 0xb3be <f_open+0x1b0>
    b3ba:	80 fd       	sbrc	r24, 0
    b3bc:	06 c1       	rjmp	.+524    	; 0xb5ca <f_open+0x3bc>
    b3be:	d3 fe       	sbrs	r13, 3
    b3c0:	03 c0       	rjmp	.+6      	; 0xb3c8 <f_open+0x1ba>
    b3c2:	ed 2d       	mov	r30, r13
    b3c4:	e0 64       	ori	r30, 0x40	; 64
    b3c6:	de 2e       	mov	r13, r30
    b3c8:	0f a5       	ldd	r16, Y+47	; 0x2f
    b3ca:	18 a9       	ldd	r17, Y+48	; 0x30
    b3cc:	f8 01       	movw	r30, r16
    b3ce:	81 a9       	ldd	r24, Z+49	; 0x31
    b3d0:	92 a9       	ldd	r25, Z+50	; 0x32
    b3d2:	a3 a9       	ldd	r26, Z+51	; 0x33
    b3d4:	b4 a9       	ldd	r27, Z+52	; 0x34
    b3d6:	f7 01       	movw	r30, r14
    b3d8:	84 8f       	std	Z+28, r24	; 0x1c
    b3da:	95 8f       	std	Z+29, r25	; 0x1d
    b3dc:	a6 8f       	std	Z+30, r26	; 0x1e
    b3de:	b7 8f       	std	Z+31, r27	; 0x1f
    b3e0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    b3e2:	9c 8c       	ldd	r9, Y+28	; 0x1c
    b3e4:	91 a2       	std	Z+33, r9	; 0x21
    b3e6:	80 a2       	std	Z+32, r8	; 0x20
    b3e8:	b4 01       	movw	r22, r8
    b3ea:	d8 01       	movw	r26, r16
    b3ec:	8c 91       	ld	r24, X
    b3ee:	0e 94 ba 48 	call	0x9174	; 0x9174 <ld_clust.isra.1>
    b3f2:	f7 01       	movw	r30, r14
    b3f4:	66 83       	std	Z+6, r22	; 0x06
    b3f6:	77 83       	std	Z+7, r23	; 0x07
    b3f8:	80 87       	std	Z+8, r24	; 0x08
    b3fa:	91 87       	std	Z+9, r25	; 0x09
    b3fc:	c4 01       	movw	r24, r8
    b3fe:	4c 96       	adiw	r24, 0x1c	; 28
    b400:	0e 94 cb 47 	call	0x8f96	; 0x8f96 <ld_dword>
    b404:	d7 01       	movw	r26, r14
    b406:	1a 96       	adiw	r26, 0x0a	; 10
    b408:	6d 93       	st	X+, r22
    b40a:	7d 93       	st	X+, r23
    b40c:	8d 93       	st	X+, r24
    b40e:	9c 93       	st	X, r25
    b410:	1d 97       	sbiw	r26, 0x0d	; 13
    b412:	93 96       	adiw	r26, 0x23	; 35
    b414:	1c 92       	st	X, r1
    b416:	1e 92       	st	-X, r1
    b418:	92 97       	sbiw	r26, 0x22	; 34
    b41a:	11 96       	adiw	r26, 0x01	; 1
    b41c:	1c 93       	st	X, r17
    b41e:	0e 93       	st	-X, r16
    b420:	f8 01       	movw	r30, r16
    b422:	85 81       	ldd	r24, Z+5	; 0x05
    b424:	96 81       	ldd	r25, Z+6	; 0x06
    b426:	13 96       	adiw	r26, 0x03	; 3
    b428:	9c 93       	st	X, r25
    b42a:	8e 93       	st	-X, r24
    b42c:	12 97       	sbiw	r26, 0x02	; 2
    b42e:	1e 96       	adiw	r26, 0x0e	; 14
    b430:	dc 92       	st	X, r13
    b432:	1e 97       	sbiw	r26, 0x0e	; 14
    b434:	1f 96       	adiw	r26, 0x0f	; 15
    b436:	1c 92       	st	X, r1
    b438:	1f 97       	sbiw	r26, 0x0f	; 15
    b43a:	58 96       	adiw	r26, 0x18	; 24
    b43c:	1d 92       	st	X+, r1
    b43e:	1d 92       	st	X+, r1
    b440:	1d 92       	st	X+, r1
    b442:	1c 92       	st	X, r1
    b444:	5b 97       	sbiw	r26, 0x1b	; 27
    b446:	f7 01       	movw	r30, r14
    b448:	10 8a       	std	Z+16, r1	; 0x10
    b44a:	11 8a       	std	Z+17, r1	; 0x11
    b44c:	12 8a       	std	Z+18, r1	; 0x12
    b44e:	13 8a       	std	Z+19, r1	; 0x13
    b450:	c7 01       	movw	r24, r14
    b452:	84 96       	adiw	r24, 0x24	; 36
    b454:	9c ab       	std	Y+52, r25	; 0x34
    b456:	8b ab       	std	Y+51, r24	; 0x33
    b458:	40 e0       	ldi	r20, 0x00	; 0
    b45a:	52 e0       	ldi	r21, 0x02	; 2
    b45c:	60 e0       	ldi	r22, 0x00	; 0
    b45e:	70 e0       	ldi	r23, 0x00	; 0
    b460:	0e 94 e6 47 	call	0x8fcc	; 0x8fcc <mem_set>
    b464:	d5 fc       	sbrc	r13, 5
    b466:	03 c0       	rjmp	.+6      	; 0xb46e <f_open+0x260>
    b468:	00 e0       	ldi	r16, 0x00	; 0
    b46a:	10 e0       	ldi	r17, 0x00	; 0
    b46c:	91 c0       	rjmp	.+290    	; 0xb590 <f_open+0x382>
    b46e:	d7 01       	movw	r26, r14
    b470:	1a 96       	adiw	r26, 0x0a	; 10
    b472:	2d 90       	ld	r2, X+
    b474:	3d 90       	ld	r3, X+
    b476:	4d 90       	ld	r4, X+
    b478:	5c 90       	ld	r5, X
    b47a:	1d 97       	sbiw	r26, 0x0d	; 13
    b47c:	21 14       	cp	r2, r1
    b47e:	31 04       	cpc	r3, r1
    b480:	41 04       	cpc	r4, r1
    b482:	51 04       	cpc	r5, r1
    b484:	89 f3       	breq	.-30     	; 0xb468 <f_open+0x25a>
    b486:	f7 01       	movw	r30, r14
    b488:	20 8a       	std	Z+16, r2	; 0x10
    b48a:	31 8a       	std	Z+17, r3	; 0x11
    b48c:	42 8a       	std	Z+18, r4	; 0x12
    b48e:	53 8a       	std	Z+19, r5	; 0x13
    b490:	ef a5       	ldd	r30, Y+47	; 0x2f
    b492:	f8 a9       	ldd	r31, Y+48	; 0x30
    b494:	81 85       	ldd	r24, Z+9	; 0x09
    b496:	92 85       	ldd	r25, Z+10	; 0x0a
    b498:	a0 e0       	ldi	r26, 0x00	; 0
    b49a:	b0 e0       	ldi	r27, 0x00	; 0
    b49c:	3c 01       	movw	r6, r24
    b49e:	4d 01       	movw	r8, r26
    b4a0:	59 e0       	ldi	r21, 0x09	; 9
    b4a2:	66 0c       	add	r6, r6
    b4a4:	77 1c       	adc	r7, r7
    b4a6:	88 1c       	adc	r8, r8
    b4a8:	99 1c       	adc	r9, r9
    b4aa:	5a 95       	dec	r21
    b4ac:	d1 f7       	brne	.-12     	; 0xb4a2 <f_open+0x294>
    b4ae:	d7 01       	movw	r26, r14
    b4b0:	16 96       	adiw	r26, 0x06	; 6
    b4b2:	4d 91       	ld	r20, X+
    b4b4:	5d 91       	ld	r21, X+
    b4b6:	6d 91       	ld	r22, X+
    b4b8:	7c 91       	ld	r23, X
    b4ba:	19 97       	sbiw	r26, 0x09	; 9
    b4bc:	62 14       	cp	r6, r2
    b4be:	73 04       	cpc	r7, r3
    b4c0:	84 04       	cpc	r8, r4
    b4c2:	95 04       	cpc	r9, r5
    b4c4:	f0 f4       	brcc	.+60     	; 0xb502 <f_open+0x2f4>
    b4c6:	f7 01       	movw	r30, r14
    b4c8:	80 81       	ld	r24, Z
    b4ca:	91 81       	ldd	r25, Z+1	; 0x01
    b4cc:	0e 94 c8 4d 	call	0x9b90	; 0x9b90 <get_fat.isra.7>
    b4d0:	ab 01       	movw	r20, r22
    b4d2:	bc 01       	movw	r22, r24
    b4d4:	d2 01       	movw	r26, r4
    b4d6:	c1 01       	movw	r24, r2
    b4d8:	86 19       	sub	r24, r6
    b4da:	97 09       	sbc	r25, r7
    b4dc:	a8 09       	sbc	r26, r8
    b4de:	b9 09       	sbc	r27, r9
    b4e0:	1c 01       	movw	r2, r24
    b4e2:	2d 01       	movw	r4, r26
    b4e4:	42 30       	cpi	r20, 0x02	; 2
    b4e6:	51 05       	cpc	r21, r1
    b4e8:	61 05       	cpc	r22, r1
    b4ea:	71 05       	cpc	r23, r1
    b4ec:	08 f4       	brcc	.+2      	; 0xb4f0 <f_open+0x2e2>
    b4ee:	67 c0       	rjmp	.+206    	; 0xb5be <f_open+0x3b0>
    b4f0:	4f 3f       	cpi	r20, 0xFF	; 255
    b4f2:	ff ef       	ldi	r31, 0xFF	; 255
    b4f4:	5f 07       	cpc	r21, r31
    b4f6:	6f 07       	cpc	r22, r31
    b4f8:	7f 07       	cpc	r23, r31
    b4fa:	01 f7       	brne	.-64     	; 0xb4bc <f_open+0x2ae>
    b4fc:	01 e0       	ldi	r16, 0x01	; 1
    b4fe:	10 e0       	ldi	r17, 0x00	; 0
    b500:	02 c0       	rjmp	.+4      	; 0xb506 <f_open+0x2f8>
    b502:	00 e0       	ldi	r16, 0x00	; 0
    b504:	10 e0       	ldi	r17, 0x00	; 0
    b506:	d7 01       	movw	r26, r14
    b508:	54 96       	adiw	r26, 0x14	; 20
    b50a:	4d 93       	st	X+, r20
    b50c:	5d 93       	st	X+, r21
    b50e:	6d 93       	st	X+, r22
    b510:	7c 93       	st	X, r23
    b512:	57 97       	sbiw	r26, 0x17	; 23
    b514:	01 15       	cp	r16, r1
    b516:	11 05       	cpc	r17, r1
    b518:	d9 f5       	brne	.+118    	; 0xb590 <f_open+0x382>
    b51a:	d2 01       	movw	r26, r4
    b51c:	c1 01       	movw	r24, r2
    b51e:	91 70       	andi	r25, 0x01	; 1
    b520:	aa 27       	eor	r26, r26
    b522:	bb 27       	eor	r27, r27
    b524:	89 2b       	or	r24, r25
    b526:	8a 2b       	or	r24, r26
    b528:	8b 2b       	or	r24, r27
    b52a:	09 f4       	brne	.+2      	; 0xb52e <f_open+0x320>
    b52c:	9d cf       	rjmp	.-198    	; 0xb468 <f_open+0x25a>
    b52e:	6f a4       	ldd	r6, Y+47	; 0x2f
    b530:	78 a8       	ldd	r7, Y+48	; 0x30
    b532:	c3 01       	movw	r24, r6
    b534:	0e 94 ef 47 	call	0x8fde	; 0x8fde <clust2sect>
    b538:	61 15       	cp	r22, r1
    b53a:	71 05       	cpc	r23, r1
    b53c:	81 05       	cpc	r24, r1
    b53e:	91 05       	cpc	r25, r1
    b540:	29 f1       	breq	.+74     	; 0xb58c <f_open+0x37e>
    b542:	92 01       	movw	r18, r4
    b544:	81 01       	movw	r16, r2
    b546:	49 e0       	ldi	r20, 0x09	; 9
    b548:	36 95       	lsr	r19
    b54a:	27 95       	ror	r18
    b54c:	17 95       	ror	r17
    b54e:	07 95       	ror	r16
    b550:	4a 95       	dec	r20
    b552:	d1 f7       	brne	.-12     	; 0xb548 <f_open+0x33a>
    b554:	a9 01       	movw	r20, r18
    b556:	98 01       	movw	r18, r16
    b558:	26 0f       	add	r18, r22
    b55a:	37 1f       	adc	r19, r23
    b55c:	48 1f       	adc	r20, r24
    b55e:	59 1f       	adc	r21, r25
    b560:	f7 01       	movw	r30, r14
    b562:	20 8f       	std	Z+24, r18	; 0x18
    b564:	31 8f       	std	Z+25, r19	; 0x19
    b566:	42 8f       	std	Z+26, r20	; 0x1a
    b568:	53 8f       	std	Z+27, r21	; 0x1b
    b56a:	01 e0       	ldi	r16, 0x01	; 1
    b56c:	10 e0       	ldi	r17, 0x00	; 0
    b56e:	6b a9       	ldd	r22, Y+51	; 0x33
    b570:	7c a9       	ldd	r23, Y+52	; 0x34
    b572:	d3 01       	movw	r26, r6
    b574:	11 96       	adiw	r26, 0x01	; 1
    b576:	8c 91       	ld	r24, X
    b578:	0e 94 85 69 	call	0xd30a	; 0xd30a <disk_read>
    b57c:	31 e0       	ldi	r19, 0x01	; 1
    b57e:	20 e0       	ldi	r18, 0x00	; 0
    b580:	89 2b       	or	r24, r25
    b582:	09 f4       	brne	.+2      	; 0xb586 <f_open+0x378>
    b584:	30 e0       	ldi	r19, 0x00	; 0
    b586:	03 2f       	mov	r16, r19
    b588:	12 2f       	mov	r17, r18
    b58a:	02 c0       	rjmp	.+4      	; 0xb590 <f_open+0x382>
    b58c:	02 e0       	ldi	r16, 0x02	; 2
    b58e:	10 e0       	ldi	r17, 0x00	; 0
    b590:	c5 01       	movw	r24, r10
    b592:	0e 94 fb 68 	call	0xd1f6	; 0xd1f6 <ff_memfree>
    b596:	01 15       	cp	r16, r1
    b598:	11 05       	cpc	r17, r1
    b59a:	59 f0       	breq	.+22     	; 0xb5b2 <f_open+0x3a4>
    b59c:	01 c0       	rjmp	.+2      	; 0xb5a0 <f_open+0x392>
    b59e:	8c 01       	movw	r16, r24
    b5a0:	f7 01       	movw	r30, r14
    b5a2:	11 82       	std	Z+1, r1	; 0x01
    b5a4:	10 82       	st	Z, r1
    b5a6:	c8 01       	movw	r24, r16
    b5a8:	16 c0       	rjmp	.+44     	; 0xb5d6 <f_open+0x3c8>
    b5aa:	89 e0       	ldi	r24, 0x09	; 9
    b5ac:	03 c0       	rjmp	.+6      	; 0xb5b4 <f_open+0x3a6>
    b5ae:	81 e1       	ldi	r24, 0x11	; 17
    b5b0:	01 c0       	rjmp	.+2      	; 0xb5b4 <f_open+0x3a6>
    b5b2:	80 e0       	ldi	r24, 0x00	; 0
    b5b4:	90 e0       	ldi	r25, 0x00	; 0
    b5b6:	0f c0       	rjmp	.+30     	; 0xb5d6 <f_open+0x3c8>
    b5b8:	08 e0       	ldi	r16, 0x08	; 8
    b5ba:	10 e0       	ldi	r17, 0x00	; 0
    b5bc:	08 c0       	rjmp	.+16     	; 0xb5ce <f_open+0x3c0>
    b5be:	02 e0       	ldi	r16, 0x02	; 2
    b5c0:	10 e0       	ldi	r17, 0x00	; 0
    b5c2:	a1 cf       	rjmp	.-190    	; 0xb506 <f_open+0x2f8>
    b5c4:	04 e0       	ldi	r16, 0x04	; 4
    b5c6:	10 e0       	ldi	r17, 0x00	; 0
    b5c8:	02 c0       	rjmp	.+4      	; 0xb5ce <f_open+0x3c0>
    b5ca:	07 e0       	ldi	r16, 0x07	; 7
    b5cc:	10 e0       	ldi	r17, 0x00	; 0
    b5ce:	c5 01       	movw	r24, r10
    b5d0:	0e 94 fb 68 	call	0xd1f6	; 0xd1f6 <ff_memfree>
    b5d4:	e5 cf       	rjmp	.-54     	; 0xb5a0 <f_open+0x392>
    b5d6:	e6 96       	adiw	r28, 0x36	; 54
    b5d8:	0f b6       	in	r0, 0x3f	; 63
    b5da:	f8 94       	cli
    b5dc:	de bf       	out	0x3e, r29	; 62
    b5de:	0f be       	out	0x3f, r0	; 63
    b5e0:	cd bf       	out	0x3d, r28	; 61
    b5e2:	df 91       	pop	r29
    b5e4:	cf 91       	pop	r28
    b5e6:	1f 91       	pop	r17
    b5e8:	0f 91       	pop	r16
    b5ea:	ff 90       	pop	r15
    b5ec:	ef 90       	pop	r14
    b5ee:	df 90       	pop	r13
    b5f0:	bf 90       	pop	r11
    b5f2:	af 90       	pop	r10
    b5f4:	9f 90       	pop	r9
    b5f6:	8f 90       	pop	r8
    b5f8:	7f 90       	pop	r7
    b5fa:	6f 90       	pop	r6
    b5fc:	5f 90       	pop	r5
    b5fe:	4f 90       	pop	r4
    b600:	3f 90       	pop	r3
    b602:	2f 90       	pop	r2
    b604:	08 95       	ret

0000b606 <f_read>:
    b606:	a6 e0       	ldi	r26, 0x06	; 6
    b608:	b0 e0       	ldi	r27, 0x00	; 0
    b60a:	e9 e0       	ldi	r30, 0x09	; 9
    b60c:	fb e5       	ldi	r31, 0x5B	; 91
    b60e:	0c 94 13 e8 	jmp	0x1d026	; 0x1d026 <__prologue_saves__>
    b612:	7c 01       	movw	r14, r24
    b614:	4b 01       	movw	r8, r22
    b616:	5a 01       	movw	r10, r20
    b618:	3e 83       	std	Y+6, r19	; 0x06
    b61a:	2d 83       	std	Y+5, r18	; 0x05
    b61c:	f9 01       	movw	r30, r18
    b61e:	11 82       	std	Z+1, r1	; 0x01
    b620:	10 82       	st	Z, r1
    b622:	be 01       	movw	r22, r28
    b624:	6f 5f       	subi	r22, 0xFF	; 255
    b626:	7f 4f       	sbci	r23, 0xFF	; 255
    b628:	0e 94 82 48 	call	0x9104	; 0x9104 <validate>
    b62c:	00 97       	sbiw	r24, 0x00	; 0
    b62e:	09 f0       	breq	.+2      	; 0xb632 <f_read+0x2c>
    b630:	31 c1       	rjmp	.+610    	; 0xb894 <f_read+0x28e>
    b632:	f7 01       	movw	r30, r14
    b634:	87 85       	ldd	r24, Z+15	; 0x0f
    b636:	90 e0       	ldi	r25, 0x00	; 0
    b638:	00 97       	sbiw	r24, 0x00	; 0
    b63a:	09 f0       	breq	.+2      	; 0xb63e <f_read+0x38>
    b63c:	2b c1       	rjmp	.+598    	; 0xb894 <f_read+0x28e>
    b63e:	86 85       	ldd	r24, Z+14	; 0x0e
    b640:	80 ff       	sbrs	r24, 0
    b642:	26 c1       	rjmp	.+588    	; 0xb890 <f_read+0x28a>
    b644:	82 85       	ldd	r24, Z+10	; 0x0a
    b646:	93 85       	ldd	r25, Z+11	; 0x0b
    b648:	a4 85       	ldd	r26, Z+12	; 0x0c
    b64a:	b5 85       	ldd	r27, Z+13	; 0x0d
    b64c:	40 89       	ldd	r20, Z+16	; 0x10
    b64e:	51 89       	ldd	r21, Z+17	; 0x11
    b650:	62 89       	ldd	r22, Z+18	; 0x12
    b652:	73 89       	ldd	r23, Z+19	; 0x13
    b654:	84 1b       	sub	r24, r20
    b656:	95 0b       	sbc	r25, r21
    b658:	a6 0b       	sbc	r26, r22
    b65a:	b7 0b       	sbc	r27, r23
    b65c:	a5 01       	movw	r20, r10
    b65e:	60 e0       	ldi	r22, 0x00	; 0
    b660:	70 e0       	ldi	r23, 0x00	; 0
    b662:	84 17       	cp	r24, r20
    b664:	95 07       	cpc	r25, r21
    b666:	a6 07       	cpc	r26, r22
    b668:	b7 07       	cpc	r27, r23
    b66a:	08 f4       	brcc	.+2      	; 0xb66e <f_read+0x68>
    b66c:	5c 01       	movw	r10, r24
    b66e:	17 01       	movw	r2, r14
    b670:	f4 e2       	ldi	r31, 0x24	; 36
    b672:	2f 0e       	add	r2, r31
    b674:	31 1c       	adc	r3, r1
    b676:	a1 14       	cp	r10, r1
    b678:	b1 04       	cpc	r11, r1
    b67a:	09 f4       	brne	.+2      	; 0xb67e <f_read+0x78>
    b67c:	07 c1       	rjmp	.+526    	; 0xb88c <f_read+0x286>
    b67e:	f7 01       	movw	r30, r14
    b680:	40 89       	ldd	r20, Z+16	; 0x10
    b682:	51 89       	ldd	r21, Z+17	; 0x11
    b684:	62 89       	ldd	r22, Z+18	; 0x12
    b686:	73 89       	ldd	r23, Z+19	; 0x13
    b688:	db 01       	movw	r26, r22
    b68a:	ca 01       	movw	r24, r20
    b68c:	91 70       	andi	r25, 0x01	; 1
    b68e:	aa 27       	eor	r26, r26
    b690:	bb 27       	eor	r27, r27
    b692:	89 2b       	or	r24, r25
    b694:	8a 2b       	or	r24, r26
    b696:	8b 2b       	or	r24, r27
    b698:	09 f0       	breq	.+2      	; 0xb69c <f_read+0x96>
    b69a:	cb c0       	rjmp	.+406    	; 0xb832 <f_read+0x22c>
    b69c:	e9 81       	ldd	r30, Y+1	; 0x01
    b69e:	fa 81       	ldd	r31, Y+2	; 0x02
    b6a0:	01 85       	ldd	r16, Z+9	; 0x09
    b6a2:	12 85       	ldd	r17, Z+10	; 0x0a
    b6a4:	01 50       	subi	r16, 0x01	; 1
    b6a6:	11 09       	sbc	r17, r1
    b6a8:	db 01       	movw	r26, r22
    b6aa:	ca 01       	movw	r24, r20
    b6ac:	e9 e0       	ldi	r30, 0x09	; 9
    b6ae:	b6 95       	lsr	r27
    b6b0:	a7 95       	ror	r26
    b6b2:	97 95       	ror	r25
    b6b4:	87 95       	ror	r24
    b6b6:	ea 95       	dec	r30
    b6b8:	d1 f7       	brne	.-12     	; 0xb6ae <f_read+0xa8>
    b6ba:	08 23       	and	r16, r24
    b6bc:	19 23       	and	r17, r25
    b6be:	01 15       	cp	r16, r1
    b6c0:	11 05       	cpc	r17, r1
    b6c2:	91 f5       	brne	.+100    	; 0xb728 <f_read+0x122>
    b6c4:	f7 01       	movw	r30, r14
    b6c6:	41 15       	cp	r20, r1
    b6c8:	51 05       	cpc	r21, r1
    b6ca:	61 05       	cpc	r22, r1
    b6cc:	71 05       	cpc	r23, r1
    b6ce:	29 f4       	brne	.+10     	; 0xb6da <f_read+0xd4>
    b6d0:	66 81       	ldd	r22, Z+6	; 0x06
    b6d2:	77 81       	ldd	r23, Z+7	; 0x07
    b6d4:	80 85       	ldd	r24, Z+8	; 0x08
    b6d6:	91 85       	ldd	r25, Z+9	; 0x09
    b6d8:	11 c0       	rjmp	.+34     	; 0xb6fc <f_read+0xf6>
    b6da:	82 a1       	ldd	r24, Z+34	; 0x22
    b6dc:	93 a1       	ldd	r25, Z+35	; 0x23
    b6de:	89 2b       	or	r24, r25
    b6e0:	21 f0       	breq	.+8      	; 0xb6ea <f_read+0xe4>
    b6e2:	c7 01       	movw	r24, r14
    b6e4:	0e 94 17 48 	call	0x902e	; 0x902e <clmt_clust>
    b6e8:	09 c0       	rjmp	.+18     	; 0xb6fc <f_read+0xf6>
    b6ea:	f7 01       	movw	r30, r14
    b6ec:	44 89       	ldd	r20, Z+20	; 0x14
    b6ee:	55 89       	ldd	r21, Z+21	; 0x15
    b6f0:	66 89       	ldd	r22, Z+22	; 0x16
    b6f2:	77 89       	ldd	r23, Z+23	; 0x17
    b6f4:	80 81       	ld	r24, Z
    b6f6:	91 81       	ldd	r25, Z+1	; 0x01
    b6f8:	0e 94 c8 4d 	call	0x9b90	; 0x9b90 <get_fat.isra.7>
    b6fc:	62 30       	cpi	r22, 0x02	; 2
    b6fe:	71 05       	cpc	r23, r1
    b700:	81 05       	cpc	r24, r1
    b702:	91 05       	cpc	r25, r1
    b704:	10 f4       	brcc	.+4      	; 0xb70a <f_read+0x104>
    b706:	82 e0       	ldi	r24, 0x02	; 2
    b708:	07 c0       	rjmp	.+14     	; 0xb718 <f_read+0x112>
    b70a:	6f 3f       	cpi	r22, 0xFF	; 255
    b70c:	ff ef       	ldi	r31, 0xFF	; 255
    b70e:	7f 07       	cpc	r23, r31
    b710:	8f 07       	cpc	r24, r31
    b712:	9f 07       	cpc	r25, r31
    b714:	21 f4       	brne	.+8      	; 0xb71e <f_read+0x118>
    b716:	81 e0       	ldi	r24, 0x01	; 1
    b718:	f7 01       	movw	r30, r14
    b71a:	87 87       	std	Z+15, r24	; 0x0f
    b71c:	ba c0       	rjmp	.+372    	; 0xb892 <f_read+0x28c>
    b71e:	f7 01       	movw	r30, r14
    b720:	64 8b       	std	Z+20, r22	; 0x14
    b722:	75 8b       	std	Z+21, r23	; 0x15
    b724:	86 8b       	std	Z+22, r24	; 0x16
    b726:	97 8b       	std	Z+23, r25	; 0x17
    b728:	89 81       	ldd	r24, Y+1	; 0x01
    b72a:	9a 81       	ldd	r25, Y+2	; 0x02
    b72c:	9c 83       	std	Y+4, r25	; 0x04
    b72e:	8b 83       	std	Y+3, r24	; 0x03
    b730:	f7 01       	movw	r30, r14
    b732:	44 89       	ldd	r20, Z+20	; 0x14
    b734:	55 89       	ldd	r21, Z+21	; 0x15
    b736:	66 89       	ldd	r22, Z+22	; 0x16
    b738:	77 89       	ldd	r23, Z+23	; 0x17
    b73a:	0e 94 ef 47 	call	0x8fde	; 0x8fde <clust2sect>
    b73e:	61 15       	cp	r22, r1
    b740:	71 05       	cpc	r23, r1
    b742:	81 05       	cpc	r24, r1
    b744:	91 05       	cpc	r25, r1
    b746:	f9 f2       	breq	.-66     	; 0xb706 <f_read+0x100>
    b748:	2b 01       	movw	r4, r22
    b74a:	3c 01       	movw	r6, r24
    b74c:	40 0e       	add	r4, r16
    b74e:	51 1e       	adc	r5, r17
    b750:	61 1c       	adc	r6, r1
    b752:	71 1c       	adc	r7, r1
    b754:	65 01       	movw	r12, r10
    b756:	cd 2c       	mov	r12, r13
    b758:	dd 24       	eor	r13, r13
    b75a:	c6 94       	lsr	r12
    b75c:	c1 14       	cp	r12, r1
    b75e:	d1 04       	cpc	r13, r1
    b760:	d1 f1       	breq	.+116    	; 0xb7d6 <f_read+0x1d0>
    b762:	eb 81       	ldd	r30, Y+3	; 0x03
    b764:	fc 81       	ldd	r31, Y+4	; 0x04
    b766:	81 85       	ldd	r24, Z+9	; 0x09
    b768:	92 85       	ldd	r25, Z+10	; 0x0a
    b76a:	98 01       	movw	r18, r16
    b76c:	2c 0d       	add	r18, r12
    b76e:	3d 1d       	adc	r19, r13
    b770:	82 17       	cp	r24, r18
    b772:	93 07       	cpc	r25, r19
    b774:	18 f4       	brcc	.+6      	; 0xb77c <f_read+0x176>
    b776:	6c 01       	movw	r12, r24
    b778:	c0 1a       	sub	r12, r16
    b77a:	d1 0a       	sbc	r13, r17
    b77c:	86 01       	movw	r16, r12
    b77e:	a3 01       	movw	r20, r6
    b780:	92 01       	movw	r18, r4
    b782:	b4 01       	movw	r22, r8
    b784:	eb 81       	ldd	r30, Y+3	; 0x03
    b786:	fc 81       	ldd	r31, Y+4	; 0x04
    b788:	81 81       	ldd	r24, Z+1	; 0x01
    b78a:	0e 94 85 69 	call	0xd30a	; 0xd30a <disk_read>
    b78e:	89 2b       	or	r24, r25
    b790:	11 f6       	brne	.-124    	; 0xb716 <f_read+0x110>
    b792:	f7 01       	movw	r30, r14
    b794:	86 85       	ldd	r24, Z+14	; 0x0e
    b796:	87 ff       	sbrs	r24, 7
    b798:	1a c0       	rjmp	.+52     	; 0xb7ce <f_read+0x1c8>
    b79a:	80 8d       	ldd	r24, Z+24	; 0x18
    b79c:	91 8d       	ldd	r25, Z+25	; 0x19
    b79e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    b7a0:	b3 8d       	ldd	r27, Z+27	; 0x1b
    b7a2:	84 19       	sub	r24, r4
    b7a4:	95 09       	sbc	r25, r5
    b7a6:	a6 09       	sbc	r26, r6
    b7a8:	b7 09       	sbc	r27, r7
    b7aa:	a6 01       	movw	r20, r12
    b7ac:	60 e0       	ldi	r22, 0x00	; 0
    b7ae:	70 e0       	ldi	r23, 0x00	; 0
    b7b0:	84 17       	cp	r24, r20
    b7b2:	95 07       	cpc	r25, r21
    b7b4:	a6 07       	cpc	r26, r22
    b7b6:	b7 07       	cpc	r27, r23
    b7b8:	50 f4       	brcc	.+20     	; 0xb7ce <f_read+0x1c8>
    b7ba:	98 2f       	mov	r25, r24
    b7bc:	88 27       	eor	r24, r24
    b7be:	99 0f       	add	r25, r25
    b7c0:	40 e0       	ldi	r20, 0x00	; 0
    b7c2:	52 e0       	ldi	r21, 0x02	; 2
    b7c4:	b1 01       	movw	r22, r2
    b7c6:	88 0d       	add	r24, r8
    b7c8:	99 1d       	adc	r25, r9
    b7ca:	0e 94 af 48 	call	0x915e	; 0x915e <mem_cpy.part.0>
    b7ce:	dc 2c       	mov	r13, r12
    b7d0:	cc 24       	eor	r12, r12
    b7d2:	dd 0c       	add	r13, r13
    b7d4:	41 c0       	rjmp	.+130    	; 0xb858 <f_read+0x252>
    b7d6:	f7 01       	movw	r30, r14
    b7d8:	20 8d       	ldd	r18, Z+24	; 0x18
    b7da:	31 8d       	ldd	r19, Z+25	; 0x19
    b7dc:	42 8d       	ldd	r20, Z+26	; 0x1a
    b7de:	53 8d       	ldd	r21, Z+27	; 0x1b
    b7e0:	42 16       	cp	r4, r18
    b7e2:	53 06       	cpc	r5, r19
    b7e4:	64 06       	cpc	r6, r20
    b7e6:	75 06       	cpc	r7, r21
    b7e8:	f9 f0       	breq	.+62     	; 0xb828 <f_read+0x222>
    b7ea:	86 85       	ldd	r24, Z+14	; 0x0e
    b7ec:	87 ff       	sbrs	r24, 7
    b7ee:	0f c0       	rjmp	.+30     	; 0xb80e <f_read+0x208>
    b7f0:	01 e0       	ldi	r16, 0x01	; 1
    b7f2:	10 e0       	ldi	r17, 0x00	; 0
    b7f4:	b1 01       	movw	r22, r2
    b7f6:	eb 81       	ldd	r30, Y+3	; 0x03
    b7f8:	fc 81       	ldd	r31, Y+4	; 0x04
    b7fa:	81 81       	ldd	r24, Z+1	; 0x01
    b7fc:	0e 94 95 69 	call	0xd32a	; 0xd32a <disk_write>
    b800:	89 2b       	or	r24, r25
    b802:	09 f0       	breq	.+2      	; 0xb806 <f_read+0x200>
    b804:	88 cf       	rjmp	.-240    	; 0xb716 <f_read+0x110>
    b806:	f7 01       	movw	r30, r14
    b808:	86 85       	ldd	r24, Z+14	; 0x0e
    b80a:	8f 77       	andi	r24, 0x7F	; 127
    b80c:	86 87       	std	Z+14, r24	; 0x0e
    b80e:	e9 81       	ldd	r30, Y+1	; 0x01
    b810:	fa 81       	ldd	r31, Y+2	; 0x02
    b812:	01 e0       	ldi	r16, 0x01	; 1
    b814:	10 e0       	ldi	r17, 0x00	; 0
    b816:	a3 01       	movw	r20, r6
    b818:	92 01       	movw	r18, r4
    b81a:	b1 01       	movw	r22, r2
    b81c:	81 81       	ldd	r24, Z+1	; 0x01
    b81e:	0e 94 85 69 	call	0xd30a	; 0xd30a <disk_read>
    b822:	89 2b       	or	r24, r25
    b824:	09 f0       	breq	.+2      	; 0xb828 <f_read+0x222>
    b826:	77 cf       	rjmp	.-274    	; 0xb716 <f_read+0x110>
    b828:	f7 01       	movw	r30, r14
    b82a:	40 8e       	std	Z+24, r4	; 0x18
    b82c:	51 8e       	std	Z+25, r5	; 0x19
    b82e:	62 8e       	std	Z+26, r6	; 0x1a
    b830:	73 8e       	std	Z+27, r7	; 0x1b
    b832:	f7 01       	movw	r30, r14
    b834:	60 89       	ldd	r22, Z+16	; 0x10
    b836:	71 89       	ldd	r23, Z+17	; 0x11
    b838:	71 70       	andi	r23, 0x01	; 1
    b83a:	80 e0       	ldi	r24, 0x00	; 0
    b83c:	92 e0       	ldi	r25, 0x02	; 2
    b83e:	86 1b       	sub	r24, r22
    b840:	97 0b       	sbc	r25, r23
    b842:	65 01       	movw	r12, r10
    b844:	8a 15       	cp	r24, r10
    b846:	9b 05       	cpc	r25, r11
    b848:	08 f4       	brcc	.+2      	; 0xb84c <f_read+0x246>
    b84a:	6c 01       	movw	r12, r24
    b84c:	62 0d       	add	r22, r2
    b84e:	73 1d       	adc	r23, r3
    b850:	a6 01       	movw	r20, r12
    b852:	c4 01       	movw	r24, r8
    b854:	0e 94 af 48 	call	0x915e	; 0x915e <mem_cpy.part.0>
    b858:	8c 0c       	add	r8, r12
    b85a:	9d 1c       	adc	r9, r13
    b85c:	f7 01       	movw	r30, r14
    b85e:	80 89       	ldd	r24, Z+16	; 0x10
    b860:	91 89       	ldd	r25, Z+17	; 0x11
    b862:	a2 89       	ldd	r26, Z+18	; 0x12
    b864:	b3 89       	ldd	r27, Z+19	; 0x13
    b866:	8c 0d       	add	r24, r12
    b868:	9d 1d       	adc	r25, r13
    b86a:	a1 1d       	adc	r26, r1
    b86c:	b1 1d       	adc	r27, r1
    b86e:	80 8b       	std	Z+16, r24	; 0x10
    b870:	91 8b       	std	Z+17, r25	; 0x11
    b872:	a2 8b       	std	Z+18, r26	; 0x12
    b874:	b3 8b       	std	Z+19, r27	; 0x13
    b876:	ed 81       	ldd	r30, Y+5	; 0x05
    b878:	fe 81       	ldd	r31, Y+6	; 0x06
    b87a:	80 81       	ld	r24, Z
    b87c:	91 81       	ldd	r25, Z+1	; 0x01
    b87e:	8c 0d       	add	r24, r12
    b880:	9d 1d       	adc	r25, r13
    b882:	91 83       	std	Z+1, r25	; 0x01
    b884:	80 83       	st	Z, r24
    b886:	ac 18       	sub	r10, r12
    b888:	bd 08       	sbc	r11, r13
    b88a:	f5 ce       	rjmp	.-534    	; 0xb676 <f_read+0x70>
    b88c:	80 e0       	ldi	r24, 0x00	; 0
    b88e:	01 c0       	rjmp	.+2      	; 0xb892 <f_read+0x28c>
    b890:	87 e0       	ldi	r24, 0x07	; 7
    b892:	90 e0       	ldi	r25, 0x00	; 0
    b894:	26 96       	adiw	r28, 0x06	; 6
    b896:	e2 e1       	ldi	r30, 0x12	; 18
    b898:	0c 94 2f e8 	jmp	0x1d05e	; 0x1d05e <__epilogue_restores__>

0000b89c <f_write>:
    b89c:	a8 e0       	ldi	r26, 0x08	; 8
    b89e:	b0 e0       	ldi	r27, 0x00	; 0
    b8a0:	e4 e5       	ldi	r30, 0x54	; 84
    b8a2:	fc e5       	ldi	r31, 0x5C	; 92
    b8a4:	0c 94 13 e8 	jmp	0x1d026	; 0x1d026 <__prologue_saves__>
    b8a8:	7c 01       	movw	r14, r24
    b8aa:	3b 01       	movw	r6, r22
    b8ac:	5a 01       	movw	r10, r20
    b8ae:	38 87       	std	Y+8, r19	; 0x08
    b8b0:	2f 83       	std	Y+7, r18	; 0x07
    b8b2:	f9 01       	movw	r30, r18
    b8b4:	11 82       	std	Z+1, r1	; 0x01
    b8b6:	10 82       	st	Z, r1
    b8b8:	be 01       	movw	r22, r28
    b8ba:	6f 5f       	subi	r22, 0xFF	; 255
    b8bc:	7f 4f       	sbci	r23, 0xFF	; 255
    b8be:	0e 94 82 48 	call	0x9104	; 0x9104 <validate>
    b8c2:	00 97       	sbiw	r24, 0x00	; 0
    b8c4:	09 f0       	breq	.+2      	; 0xb8c8 <f_write+0x2c>
    b8c6:	7d c1       	rjmp	.+762    	; 0xbbc2 <f_write+0x326>
    b8c8:	f7 01       	movw	r30, r14
    b8ca:	87 85       	ldd	r24, Z+15	; 0x0f
    b8cc:	90 e0       	ldi	r25, 0x00	; 0
    b8ce:	00 97       	sbiw	r24, 0x00	; 0
    b8d0:	09 f0       	breq	.+2      	; 0xb8d4 <f_write+0x38>
    b8d2:	77 c1       	rjmp	.+750    	; 0xbbc2 <f_write+0x326>
    b8d4:	86 85       	ldd	r24, Z+14	; 0x0e
    b8d6:	81 ff       	sbrs	r24, 1
    b8d8:	72 c1       	rjmp	.+740    	; 0xbbbe <f_write+0x322>
    b8da:	80 89       	ldd	r24, Z+16	; 0x10
    b8dc:	91 89       	ldd	r25, Z+17	; 0x11
    b8de:	a2 89       	ldd	r26, Z+18	; 0x12
    b8e0:	b3 89       	ldd	r27, Z+19	; 0x13
    b8e2:	ac 01       	movw	r20, r24
    b8e4:	bd 01       	movw	r22, r26
    b8e6:	4a 0d       	add	r20, r10
    b8e8:	5b 1d       	adc	r21, r11
    b8ea:	61 1d       	adc	r22, r1
    b8ec:	71 1d       	adc	r23, r1
    b8ee:	48 17       	cp	r20, r24
    b8f0:	59 07       	cpc	r21, r25
    b8f2:	6a 07       	cpc	r22, r26
    b8f4:	7b 07       	cpc	r23, r27
    b8f6:	18 f4       	brcc	.+6      	; 0xb8fe <f_write+0x62>
    b8f8:	5c 01       	movw	r10, r24
    b8fa:	a0 94       	com	r10
    b8fc:	b0 94       	com	r11
    b8fe:	97 01       	movw	r18, r14
    b900:	2c 5d       	subi	r18, 0xDC	; 220
    b902:	3f 4f       	sbci	r19, 0xFF	; 255
    b904:	3e 83       	std	Y+6, r19	; 0x06
    b906:	2d 83       	std	Y+5, r18	; 0x05
    b908:	a1 14       	cp	r10, r1
    b90a:	b1 04       	cpc	r11, r1
    b90c:	09 f4       	brne	.+2      	; 0xb910 <f_write+0x74>
    b90e:	4d c0       	rjmp	.+154    	; 0xb9aa <f_write+0x10e>
    b910:	f7 01       	movw	r30, r14
    b912:	40 89       	ldd	r20, Z+16	; 0x10
    b914:	51 89       	ldd	r21, Z+17	; 0x11
    b916:	62 89       	ldd	r22, Z+18	; 0x12
    b918:	73 89       	ldd	r23, Z+19	; 0x13
    b91a:	db 01       	movw	r26, r22
    b91c:	ca 01       	movw	r24, r20
    b91e:	91 70       	andi	r25, 0x01	; 1
    b920:	aa 27       	eor	r26, r26
    b922:	bb 27       	eor	r27, r27
    b924:	89 2b       	or	r24, r25
    b926:	8a 2b       	or	r24, r26
    b928:	8b 2b       	or	r24, r27
    b92a:	09 f0       	breq	.+2      	; 0xb92e <f_write+0x92>
    b92c:	05 c1       	rjmp	.+522    	; 0xbb38 <f_write+0x29c>
    b92e:	e9 81       	ldd	r30, Y+1	; 0x01
    b930:	fa 81       	ldd	r31, Y+2	; 0x02
    b932:	81 84       	ldd	r8, Z+9	; 0x09
    b934:	92 84       	ldd	r9, Z+10	; 0x0a
    b936:	f1 e0       	ldi	r31, 0x01	; 1
    b938:	8f 1a       	sub	r8, r31
    b93a:	91 08       	sbc	r9, r1
    b93c:	db 01       	movw	r26, r22
    b93e:	ca 01       	movw	r24, r20
    b940:	e9 e0       	ldi	r30, 0x09	; 9
    b942:	b6 95       	lsr	r27
    b944:	a7 95       	ror	r26
    b946:	97 95       	ror	r25
    b948:	87 95       	ror	r24
    b94a:	ea 95       	dec	r30
    b94c:	d1 f7       	brne	.-12     	; 0xb942 <f_write+0xa6>
    b94e:	88 22       	and	r8, r24
    b950:	99 22       	and	r9, r25
    b952:	81 14       	cp	r8, r1
    b954:	91 04       	cpc	r9, r1
    b956:	09 f0       	breq	.+2      	; 0xb95a <f_write+0xbe>
    b958:	51 c0       	rjmp	.+162    	; 0xb9fc <f_write+0x160>
    b95a:	f7 01       	movw	r30, r14
    b95c:	41 15       	cp	r20, r1
    b95e:	51 05       	cpc	r21, r1
    b960:	61 05       	cpc	r22, r1
    b962:	71 05       	cpc	r23, r1
    b964:	69 f4       	brne	.+26     	; 0xb980 <f_write+0xe4>
    b966:	66 81       	ldd	r22, Z+6	; 0x06
    b968:	77 81       	ldd	r23, Z+7	; 0x07
    b96a:	80 85       	ldd	r24, Z+8	; 0x08
    b96c:	91 85       	ldd	r25, Z+9	; 0x09
    b96e:	61 15       	cp	r22, r1
    b970:	71 05       	cpc	r23, r1
    b972:	81 05       	cpc	r24, r1
    b974:	91 05       	cpc	r25, r1
    b976:	f9 f4       	brne	.+62     	; 0xb9b6 <f_write+0x11a>
    b978:	40 e0       	ldi	r20, 0x00	; 0
    b97a:	50 e0       	ldi	r21, 0x00	; 0
    b97c:	ba 01       	movw	r22, r20
    b97e:	0d c0       	rjmp	.+26     	; 0xb99a <f_write+0xfe>
    b980:	82 a1       	ldd	r24, Z+34	; 0x22
    b982:	93 a1       	ldd	r25, Z+35	; 0x23
    b984:	89 2b       	or	r24, r25
    b986:	21 f0       	breq	.+8      	; 0xb990 <f_write+0xf4>
    b988:	c7 01       	movw	r24, r14
    b98a:	0e 94 17 48 	call	0x902e	; 0x902e <clmt_clust>
    b98e:	08 c0       	rjmp	.+16     	; 0xb9a0 <f_write+0x104>
    b990:	f7 01       	movw	r30, r14
    b992:	44 89       	ldd	r20, Z+20	; 0x14
    b994:	55 89       	ldd	r21, Z+21	; 0x15
    b996:	66 89       	ldd	r22, Z+22	; 0x16
    b998:	77 89       	ldd	r23, Z+23	; 0x17
    b99a:	c7 01       	movw	r24, r14
    b99c:	0e 94 3b 4f 	call	0x9e76	; 0x9e76 <create_chain>
    b9a0:	61 15       	cp	r22, r1
    b9a2:	71 05       	cpc	r23, r1
    b9a4:	81 05       	cpc	r24, r1
    b9a6:	91 05       	cpc	r25, r1
    b9a8:	31 f4       	brne	.+12     	; 0xb9b6 <f_write+0x11a>
    b9aa:	f7 01       	movw	r30, r14
    b9ac:	86 85       	ldd	r24, Z+14	; 0x0e
    b9ae:	80 64       	ori	r24, 0x40	; 64
    b9b0:	86 87       	std	Z+14, r24	; 0x0e
    b9b2:	80 e0       	ldi	r24, 0x00	; 0
    b9b4:	05 c1       	rjmp	.+522    	; 0xbbc0 <f_write+0x324>
    b9b6:	61 30       	cpi	r22, 0x01	; 1
    b9b8:	71 05       	cpc	r23, r1
    b9ba:	81 05       	cpc	r24, r1
    b9bc:	91 05       	cpc	r25, r1
    b9be:	11 f4       	brne	.+4      	; 0xb9c4 <f_write+0x128>
    b9c0:	82 e0       	ldi	r24, 0x02	; 2
    b9c2:	07 c0       	rjmp	.+14     	; 0xb9d2 <f_write+0x136>
    b9c4:	6f 3f       	cpi	r22, 0xFF	; 255
    b9c6:	ff ef       	ldi	r31, 0xFF	; 255
    b9c8:	7f 07       	cpc	r23, r31
    b9ca:	8f 07       	cpc	r24, r31
    b9cc:	9f 07       	cpc	r25, r31
    b9ce:	21 f4       	brne	.+8      	; 0xb9d8 <f_write+0x13c>
    b9d0:	81 e0       	ldi	r24, 0x01	; 1
    b9d2:	f7 01       	movw	r30, r14
    b9d4:	87 87       	std	Z+15, r24	; 0x0f
    b9d6:	f4 c0       	rjmp	.+488    	; 0xbbc0 <f_write+0x324>
    b9d8:	f7 01       	movw	r30, r14
    b9da:	64 8b       	std	Z+20, r22	; 0x14
    b9dc:	75 8b       	std	Z+21, r23	; 0x15
    b9de:	86 8b       	std	Z+22, r24	; 0x16
    b9e0:	97 8b       	std	Z+23, r25	; 0x17
    b9e2:	06 81       	ldd	r16, Z+6	; 0x06
    b9e4:	17 81       	ldd	r17, Z+7	; 0x07
    b9e6:	20 85       	ldd	r18, Z+8	; 0x08
    b9e8:	31 85       	ldd	r19, Z+9	; 0x09
    b9ea:	01 15       	cp	r16, r1
    b9ec:	11 05       	cpc	r17, r1
    b9ee:	21 05       	cpc	r18, r1
    b9f0:	31 05       	cpc	r19, r1
    b9f2:	21 f4       	brne	.+8      	; 0xb9fc <f_write+0x160>
    b9f4:	66 83       	std	Z+6, r22	; 0x06
    b9f6:	77 83       	std	Z+7, r23	; 0x07
    b9f8:	80 87       	std	Z+8, r24	; 0x08
    b9fa:	91 87       	std	Z+9, r25	; 0x09
    b9fc:	f7 01       	movw	r30, r14
    b9fe:	86 85       	ldd	r24, Z+14	; 0x0e
    ba00:	87 ff       	sbrs	r24, 7
    ba02:	13 c0       	rjmp	.+38     	; 0xba2a <f_write+0x18e>
    ba04:	20 8d       	ldd	r18, Z+24	; 0x18
    ba06:	31 8d       	ldd	r19, Z+25	; 0x19
    ba08:	42 8d       	ldd	r20, Z+26	; 0x1a
    ba0a:	53 8d       	ldd	r21, Z+27	; 0x1b
    ba0c:	e9 81       	ldd	r30, Y+1	; 0x01
    ba0e:	fa 81       	ldd	r31, Y+2	; 0x02
    ba10:	01 e0       	ldi	r16, 0x01	; 1
    ba12:	10 e0       	ldi	r17, 0x00	; 0
    ba14:	6d 81       	ldd	r22, Y+5	; 0x05
    ba16:	7e 81       	ldd	r23, Y+6	; 0x06
    ba18:	81 81       	ldd	r24, Z+1	; 0x01
    ba1a:	0e 94 95 69 	call	0xd32a	; 0xd32a <disk_write>
    ba1e:	89 2b       	or	r24, r25
    ba20:	b9 f6       	brne	.-82     	; 0xb9d0 <f_write+0x134>
    ba22:	f7 01       	movw	r30, r14
    ba24:	86 85       	ldd	r24, Z+14	; 0x0e
    ba26:	8f 77       	andi	r24, 0x7F	; 127
    ba28:	86 87       	std	Z+14, r24	; 0x0e
    ba2a:	29 81       	ldd	r18, Y+1	; 0x01
    ba2c:	3a 81       	ldd	r19, Y+2	; 0x02
    ba2e:	3c 83       	std	Y+4, r19	; 0x04
    ba30:	2b 83       	std	Y+3, r18	; 0x03
    ba32:	f7 01       	movw	r30, r14
    ba34:	44 89       	ldd	r20, Z+20	; 0x14
    ba36:	55 89       	ldd	r21, Z+21	; 0x15
    ba38:	66 89       	ldd	r22, Z+22	; 0x16
    ba3a:	77 89       	ldd	r23, Z+23	; 0x17
    ba3c:	c9 01       	movw	r24, r18
    ba3e:	0e 94 ef 47 	call	0x8fde	; 0x8fde <clust2sect>
    ba42:	61 15       	cp	r22, r1
    ba44:	71 05       	cpc	r23, r1
    ba46:	81 05       	cpc	r24, r1
    ba48:	91 05       	cpc	r25, r1
    ba4a:	09 f4       	brne	.+2      	; 0xba4e <f_write+0x1b2>
    ba4c:	b9 cf       	rjmp	.-142    	; 0xb9c0 <f_write+0x124>
    ba4e:	1b 01       	movw	r2, r22
    ba50:	2c 01       	movw	r4, r24
    ba52:	28 0c       	add	r2, r8
    ba54:	39 1c       	adc	r3, r9
    ba56:	41 1c       	adc	r4, r1
    ba58:	51 1c       	adc	r5, r1
    ba5a:	65 01       	movw	r12, r10
    ba5c:	cd 2c       	mov	r12, r13
    ba5e:	dd 24       	eor	r13, r13
    ba60:	c6 94       	lsr	r12
    ba62:	c1 14       	cp	r12, r1
    ba64:	d1 04       	cpc	r13, r1
    ba66:	f1 f1       	breq	.+124    	; 0xbae4 <f_write+0x248>
    ba68:	eb 81       	ldd	r30, Y+3	; 0x03
    ba6a:	fc 81       	ldd	r31, Y+4	; 0x04
    ba6c:	81 85       	ldd	r24, Z+9	; 0x09
    ba6e:	92 85       	ldd	r25, Z+10	; 0x0a
    ba70:	94 01       	movw	r18, r8
    ba72:	2c 0d       	add	r18, r12
    ba74:	3d 1d       	adc	r19, r13
    ba76:	82 17       	cp	r24, r18
    ba78:	93 07       	cpc	r25, r19
    ba7a:	18 f4       	brcc	.+6      	; 0xba82 <f_write+0x1e6>
    ba7c:	6c 01       	movw	r12, r24
    ba7e:	c8 18       	sub	r12, r8
    ba80:	d9 08       	sbc	r13, r9
    ba82:	86 01       	movw	r16, r12
    ba84:	a2 01       	movw	r20, r4
    ba86:	91 01       	movw	r18, r2
    ba88:	b3 01       	movw	r22, r6
    ba8a:	eb 81       	ldd	r30, Y+3	; 0x03
    ba8c:	fc 81       	ldd	r31, Y+4	; 0x04
    ba8e:	81 81       	ldd	r24, Z+1	; 0x01
    ba90:	0e 94 95 69 	call	0xd32a	; 0xd32a <disk_write>
    ba94:	89 2b       	or	r24, r25
    ba96:	09 f0       	breq	.+2      	; 0xba9a <f_write+0x1fe>
    ba98:	9b cf       	rjmp	.-202    	; 0xb9d0 <f_write+0x134>
    ba9a:	f7 01       	movw	r30, r14
    ba9c:	80 8d       	ldd	r24, Z+24	; 0x18
    ba9e:	91 8d       	ldd	r25, Z+25	; 0x19
    baa0:	a2 8d       	ldd	r26, Z+26	; 0x1a
    baa2:	b3 8d       	ldd	r27, Z+27	; 0x1b
    baa4:	82 19       	sub	r24, r2
    baa6:	93 09       	sbc	r25, r3
    baa8:	a4 09       	sbc	r26, r4
    baaa:	b5 09       	sbc	r27, r5
    baac:	a6 01       	movw	r20, r12
    baae:	60 e0       	ldi	r22, 0x00	; 0
    bab0:	70 e0       	ldi	r23, 0x00	; 0
    bab2:	84 17       	cp	r24, r20
    bab4:	95 07       	cpc	r25, r21
    bab6:	a6 07       	cpc	r26, r22
    bab8:	b7 07       	cpc	r27, r23
    baba:	80 f4       	brcc	.+32     	; 0xbadc <f_write+0x240>
    babc:	98 2f       	mov	r25, r24
    babe:	88 27       	eor	r24, r24
    bac0:	99 0f       	add	r25, r25
    bac2:	b3 01       	movw	r22, r6
    bac4:	68 0f       	add	r22, r24
    bac6:	79 1f       	adc	r23, r25
    bac8:	40 e0       	ldi	r20, 0x00	; 0
    baca:	52 e0       	ldi	r21, 0x02	; 2
    bacc:	8d 81       	ldd	r24, Y+5	; 0x05
    bace:	9e 81       	ldd	r25, Y+6	; 0x06
    bad0:	0e 94 af 48 	call	0x915e	; 0x915e <mem_cpy.part.0>
    bad4:	f7 01       	movw	r30, r14
    bad6:	86 85       	ldd	r24, Z+14	; 0x0e
    bad8:	8f 77       	andi	r24, 0x7F	; 127
    bada:	86 87       	std	Z+14, r24	; 0x0e
    badc:	dc 2c       	mov	r13, r12
    bade:	cc 24       	eor	r12, r12
    bae0:	dd 0c       	add	r13, r13
    bae2:	43 c0       	rjmp	.+134    	; 0xbb6a <f_write+0x2ce>
    bae4:	f7 01       	movw	r30, r14
    bae6:	80 8d       	ldd	r24, Z+24	; 0x18
    bae8:	91 8d       	ldd	r25, Z+25	; 0x19
    baea:	a2 8d       	ldd	r26, Z+26	; 0x1a
    baec:	b3 8d       	ldd	r27, Z+27	; 0x1b
    baee:	28 16       	cp	r2, r24
    baf0:	39 06       	cpc	r3, r25
    baf2:	4a 06       	cpc	r4, r26
    baf4:	5b 06       	cpc	r5, r27
    baf6:	d9 f0       	breq	.+54     	; 0xbb2e <f_write+0x292>
    baf8:	40 89       	ldd	r20, Z+16	; 0x10
    bafa:	51 89       	ldd	r21, Z+17	; 0x11
    bafc:	62 89       	ldd	r22, Z+18	; 0x12
    bafe:	73 89       	ldd	r23, Z+19	; 0x13
    bb00:	82 85       	ldd	r24, Z+10	; 0x0a
    bb02:	93 85       	ldd	r25, Z+11	; 0x0b
    bb04:	a4 85       	ldd	r26, Z+12	; 0x0c
    bb06:	b5 85       	ldd	r27, Z+13	; 0x0d
    bb08:	48 17       	cp	r20, r24
    bb0a:	59 07       	cpc	r21, r25
    bb0c:	6a 07       	cpc	r22, r26
    bb0e:	7b 07       	cpc	r23, r27
    bb10:	70 f4       	brcc	.+28     	; 0xbb2e <f_write+0x292>
    bb12:	01 e0       	ldi	r16, 0x01	; 1
    bb14:	10 e0       	ldi	r17, 0x00	; 0
    bb16:	a2 01       	movw	r20, r4
    bb18:	91 01       	movw	r18, r2
    bb1a:	6d 81       	ldd	r22, Y+5	; 0x05
    bb1c:	7e 81       	ldd	r23, Y+6	; 0x06
    bb1e:	eb 81       	ldd	r30, Y+3	; 0x03
    bb20:	fc 81       	ldd	r31, Y+4	; 0x04
    bb22:	81 81       	ldd	r24, Z+1	; 0x01
    bb24:	0e 94 85 69 	call	0xd30a	; 0xd30a <disk_read>
    bb28:	89 2b       	or	r24, r25
    bb2a:	09 f0       	breq	.+2      	; 0xbb2e <f_write+0x292>
    bb2c:	51 cf       	rjmp	.-350    	; 0xb9d0 <f_write+0x134>
    bb2e:	f7 01       	movw	r30, r14
    bb30:	20 8e       	std	Z+24, r2	; 0x18
    bb32:	31 8e       	std	Z+25, r3	; 0x19
    bb34:	42 8e       	std	Z+26, r4	; 0x1a
    bb36:	53 8e       	std	Z+27, r5	; 0x1b
    bb38:	f7 01       	movw	r30, r14
    bb3a:	80 89       	ldd	r24, Z+16	; 0x10
    bb3c:	91 89       	ldd	r25, Z+17	; 0x11
    bb3e:	91 70       	andi	r25, 0x01	; 1
    bb40:	20 e0       	ldi	r18, 0x00	; 0
    bb42:	32 e0       	ldi	r19, 0x02	; 2
    bb44:	28 1b       	sub	r18, r24
    bb46:	39 0b       	sbc	r19, r25
    bb48:	65 01       	movw	r12, r10
    bb4a:	2a 15       	cp	r18, r10
    bb4c:	3b 05       	cpc	r19, r11
    bb4e:	08 f4       	brcc	.+2      	; 0xbb52 <f_write+0x2b6>
    bb50:	69 01       	movw	r12, r18
    bb52:	a6 01       	movw	r20, r12
    bb54:	b3 01       	movw	r22, r6
    bb56:	2d 81       	ldd	r18, Y+5	; 0x05
    bb58:	3e 81       	ldd	r19, Y+6	; 0x06
    bb5a:	82 0f       	add	r24, r18
    bb5c:	93 1f       	adc	r25, r19
    bb5e:	0e 94 af 48 	call	0x915e	; 0x915e <mem_cpy.part.0>
    bb62:	f7 01       	movw	r30, r14
    bb64:	86 85       	ldd	r24, Z+14	; 0x0e
    bb66:	80 68       	ori	r24, 0x80	; 128
    bb68:	86 87       	std	Z+14, r24	; 0x0e
    bb6a:	6c 0c       	add	r6, r12
    bb6c:	7d 1c       	adc	r7, r13
    bb6e:	f7 01       	movw	r30, r14
    bb70:	80 89       	ldd	r24, Z+16	; 0x10
    bb72:	91 89       	ldd	r25, Z+17	; 0x11
    bb74:	a2 89       	ldd	r26, Z+18	; 0x12
    bb76:	b3 89       	ldd	r27, Z+19	; 0x13
    bb78:	8c 0d       	add	r24, r12
    bb7a:	9d 1d       	adc	r25, r13
    bb7c:	a1 1d       	adc	r26, r1
    bb7e:	b1 1d       	adc	r27, r1
    bb80:	80 8b       	std	Z+16, r24	; 0x10
    bb82:	91 8b       	std	Z+17, r25	; 0x11
    bb84:	a2 8b       	std	Z+18, r26	; 0x12
    bb86:	b3 8b       	std	Z+19, r27	; 0x13
    bb88:	42 85       	ldd	r20, Z+10	; 0x0a
    bb8a:	53 85       	ldd	r21, Z+11	; 0x0b
    bb8c:	64 85       	ldd	r22, Z+12	; 0x0c
    bb8e:	75 85       	ldd	r23, Z+13	; 0x0d
    bb90:	48 17       	cp	r20, r24
    bb92:	59 07       	cpc	r21, r25
    bb94:	6a 07       	cpc	r22, r26
    bb96:	7b 07       	cpc	r23, r27
    bb98:	10 f4       	brcc	.+4      	; 0xbb9e <f_write+0x302>
    bb9a:	ac 01       	movw	r20, r24
    bb9c:	bd 01       	movw	r22, r26
    bb9e:	f7 01       	movw	r30, r14
    bba0:	42 87       	std	Z+10, r20	; 0x0a
    bba2:	53 87       	std	Z+11, r21	; 0x0b
    bba4:	64 87       	std	Z+12, r22	; 0x0c
    bba6:	75 87       	std	Z+13, r23	; 0x0d
    bba8:	ef 81       	ldd	r30, Y+7	; 0x07
    bbaa:	f8 85       	ldd	r31, Y+8	; 0x08
    bbac:	80 81       	ld	r24, Z
    bbae:	91 81       	ldd	r25, Z+1	; 0x01
    bbb0:	8c 0d       	add	r24, r12
    bbb2:	9d 1d       	adc	r25, r13
    bbb4:	91 83       	std	Z+1, r25	; 0x01
    bbb6:	80 83       	st	Z, r24
    bbb8:	ac 18       	sub	r10, r12
    bbba:	bd 08       	sbc	r11, r13
    bbbc:	a5 ce       	rjmp	.-694    	; 0xb908 <f_write+0x6c>
    bbbe:	87 e0       	ldi	r24, 0x07	; 7
    bbc0:	90 e0       	ldi	r25, 0x00	; 0
    bbc2:	28 96       	adiw	r28, 0x08	; 8
    bbc4:	e2 e1       	ldi	r30, 0x12	; 18
    bbc6:	0c 94 2f e8 	jmp	0x1d05e	; 0x1d05e <__epilogue_restores__>

0000bbca <f_sync>:
    bbca:	8f 92       	push	r8
    bbcc:	9f 92       	push	r9
    bbce:	af 92       	push	r10
    bbd0:	bf 92       	push	r11
    bbd2:	ef 92       	push	r14
    bbd4:	ff 92       	push	r15
    bbd6:	0f 93       	push	r16
    bbd8:	1f 93       	push	r17
    bbda:	cf 93       	push	r28
    bbdc:	df 93       	push	r29
    bbde:	00 d0       	rcall	.+0      	; 0xbbe0 <f_sync+0x16>
    bbe0:	cd b7       	in	r28, 0x3d	; 61
    bbe2:	de b7       	in	r29, 0x3e	; 62
    bbe4:	7c 01       	movw	r14, r24
    bbe6:	be 01       	movw	r22, r28
    bbe8:	6f 5f       	subi	r22, 0xFF	; 255
    bbea:	7f 4f       	sbci	r23, 0xFF	; 255
    bbec:	0e 94 82 48 	call	0x9104	; 0x9104 <validate>
    bbf0:	00 97       	sbiw	r24, 0x00	; 0
    bbf2:	09 f0       	breq	.+2      	; 0xbbf6 <f_sync+0x2c>
    bbf4:	5d c0       	rjmp	.+186    	; 0xbcb0 <f_sync+0xe6>
    bbf6:	f7 01       	movw	r30, r14
    bbf8:	86 85       	ldd	r24, Z+14	; 0x0e
    bbfa:	86 ff       	sbrs	r24, 6
    bbfc:	55 c0       	rjmp	.+170    	; 0xbca8 <f_sync+0xde>
    bbfe:	87 ff       	sbrs	r24, 7
    bc00:	15 c0       	rjmp	.+42     	; 0xbc2c <f_sync+0x62>
    bc02:	20 8d       	ldd	r18, Z+24	; 0x18
    bc04:	31 8d       	ldd	r19, Z+25	; 0x19
    bc06:	42 8d       	ldd	r20, Z+26	; 0x1a
    bc08:	53 8d       	ldd	r21, Z+27	; 0x1b
    bc0a:	e9 81       	ldd	r30, Y+1	; 0x01
    bc0c:	fa 81       	ldd	r31, Y+2	; 0x02
    bc0e:	01 e0       	ldi	r16, 0x01	; 1
    bc10:	10 e0       	ldi	r17, 0x00	; 0
    bc12:	b7 01       	movw	r22, r14
    bc14:	6c 5d       	subi	r22, 0xDC	; 220
    bc16:	7f 4f       	sbci	r23, 0xFF	; 255
    bc18:	81 81       	ldd	r24, Z+1	; 0x01
    bc1a:	0e 94 95 69 	call	0xd32a	; 0xd32a <disk_write>
    bc1e:	89 2b       	or	r24, r25
    bc20:	09 f0       	breq	.+2      	; 0xbc24 <f_sync+0x5a>
    bc22:	44 c0       	rjmp	.+136    	; 0xbcac <f_sync+0xe2>
    bc24:	f7 01       	movw	r30, r14
    bc26:	86 85       	ldd	r24, Z+14	; 0x0e
    bc28:	8f 77       	andi	r24, 0x7F	; 127
    bc2a:	86 87       	std	Z+14, r24	; 0x0e
    bc2c:	0e 94 08 70 	call	0xe010	; 0xe010 <get_fattime>
    bc30:	4b 01       	movw	r8, r22
    bc32:	5c 01       	movw	r10, r24
    bc34:	f7 01       	movw	r30, r14
    bc36:	44 8d       	ldd	r20, Z+28	; 0x1c
    bc38:	55 8d       	ldd	r21, Z+29	; 0x1d
    bc3a:	66 8d       	ldd	r22, Z+30	; 0x1e
    bc3c:	77 8d       	ldd	r23, Z+31	; 0x1f
    bc3e:	89 81       	ldd	r24, Y+1	; 0x01
    bc40:	9a 81       	ldd	r25, Y+2	; 0x02
    bc42:	0e 94 a2 49 	call	0x9344	; 0x9344 <move_window>
    bc46:	00 97       	sbiw	r24, 0x00	; 0
    bc48:	99 f5       	brne	.+102    	; 0xbcb0 <f_sync+0xe6>
    bc4a:	f7 01       	movw	r30, r14
    bc4c:	00 a1       	ldd	r16, Z+32	; 0x20
    bc4e:	11 a1       	ldd	r17, Z+33	; 0x21
    bc50:	f8 01       	movw	r30, r16
    bc52:	83 85       	ldd	r24, Z+11	; 0x0b
    bc54:	80 62       	ori	r24, 0x20	; 32
    bc56:	83 87       	std	Z+11, r24	; 0x0b
    bc58:	f7 01       	movw	r30, r14
    bc5a:	26 81       	ldd	r18, Z+6	; 0x06
    bc5c:	37 81       	ldd	r19, Z+7	; 0x07
    bc5e:	40 85       	ldd	r20, Z+8	; 0x08
    bc60:	51 85       	ldd	r21, Z+9	; 0x09
    bc62:	b8 01       	movw	r22, r16
    bc64:	80 81       	ld	r24, Z
    bc66:	91 81       	ldd	r25, Z+1	; 0x01
    bc68:	0e 94 cf 48 	call	0x919e	; 0x919e <st_clust.isra.2>
    bc6c:	f7 01       	movw	r30, r14
    bc6e:	42 85       	ldd	r20, Z+10	; 0x0a
    bc70:	53 85       	ldd	r21, Z+11	; 0x0b
    bc72:	64 85       	ldd	r22, Z+12	; 0x0c
    bc74:	75 85       	ldd	r23, Z+13	; 0x0d
    bc76:	c8 01       	movw	r24, r16
    bc78:	4c 96       	adiw	r24, 0x1c	; 28
    bc7a:	0e 94 e0 47 	call	0x8fc0	; 0x8fc0 <st_dword>
    bc7e:	b5 01       	movw	r22, r10
    bc80:	a4 01       	movw	r20, r8
    bc82:	c8 01       	movw	r24, r16
    bc84:	46 96       	adiw	r24, 0x16	; 22
    bc86:	0e 94 e0 47 	call	0x8fc0	; 0x8fc0 <st_dword>
    bc8a:	f8 01       	movw	r30, r16
    bc8c:	12 8a       	std	Z+18, r1	; 0x12
    bc8e:	13 8a       	std	Z+19, r1	; 0x13
    bc90:	89 81       	ldd	r24, Y+1	; 0x01
    bc92:	9a 81       	ldd	r25, Y+2	; 0x02
    bc94:	21 e0       	ldi	r18, 0x01	; 1
    bc96:	fc 01       	movw	r30, r24
    bc98:	23 83       	std	Z+3, r18	; 0x03
    bc9a:	0e 94 36 49 	call	0x926c	; 0x926c <sync_fs>
    bc9e:	f7 01       	movw	r30, r14
    bca0:	26 85       	ldd	r18, Z+14	; 0x0e
    bca2:	2f 7b       	andi	r18, 0xBF	; 191
    bca4:	26 87       	std	Z+14, r18	; 0x0e
    bca6:	04 c0       	rjmp	.+8      	; 0xbcb0 <f_sync+0xe6>
    bca8:	80 e0       	ldi	r24, 0x00	; 0
    bcaa:	01 c0       	rjmp	.+2      	; 0xbcae <f_sync+0xe4>
    bcac:	81 e0       	ldi	r24, 0x01	; 1
    bcae:	90 e0       	ldi	r25, 0x00	; 0
    bcb0:	0f 90       	pop	r0
    bcb2:	0f 90       	pop	r0
    bcb4:	df 91       	pop	r29
    bcb6:	cf 91       	pop	r28
    bcb8:	1f 91       	pop	r17
    bcba:	0f 91       	pop	r16
    bcbc:	ff 90       	pop	r15
    bcbe:	ef 90       	pop	r14
    bcc0:	bf 90       	pop	r11
    bcc2:	af 90       	pop	r10
    bcc4:	9f 90       	pop	r9
    bcc6:	8f 90       	pop	r8
    bcc8:	08 95       	ret

0000bcca <f_close>:
    bcca:	a2 e0       	ldi	r26, 0x02	; 2
    bccc:	b0 e0       	ldi	r27, 0x00	; 0
    bcce:	eb e6       	ldi	r30, 0x6B	; 107
    bcd0:	fe e5       	ldi	r31, 0x5E	; 94
    bcd2:	0c 94 21 e8 	jmp	0x1d042	; 0x1d042 <__prologue_saves__+0x1c>
    bcd6:	8c 01       	movw	r16, r24
    bcd8:	78 df       	rcall	.-272    	; 0xbbca <f_sync>
    bcda:	00 97       	sbiw	r24, 0x00	; 0
    bcdc:	59 f4       	brne	.+22     	; 0xbcf4 <f_close+0x2a>
    bcde:	be 01       	movw	r22, r28
    bce0:	6f 5f       	subi	r22, 0xFF	; 255
    bce2:	7f 4f       	sbci	r23, 0xFF	; 255
    bce4:	c8 01       	movw	r24, r16
    bce6:	0e 94 82 48 	call	0x9104	; 0x9104 <validate>
    bcea:	00 97       	sbiw	r24, 0x00	; 0
    bcec:	19 f4       	brne	.+6      	; 0xbcf4 <f_close+0x2a>
    bcee:	f8 01       	movw	r30, r16
    bcf0:	11 82       	std	Z+1, r1	; 0x01
    bcf2:	10 82       	st	Z, r1
    bcf4:	22 96       	adiw	r28, 0x02	; 2
    bcf6:	e4 e0       	ldi	r30, 0x04	; 4
    bcf8:	0c 94 3d e8 	jmp	0x1d07a	; 0x1d07a <__epilogue_restores__+0x1c>

0000bcfc <f_chdir>:
    bcfc:	a2 e3       	ldi	r26, 0x32	; 50
    bcfe:	b0 e0       	ldi	r27, 0x00	; 0
    bd00:	e4 e8       	ldi	r30, 0x84	; 132
    bd02:	fe e5       	ldi	r31, 0x5E	; 94
    bd04:	0c 94 1d e8 	jmp	0x1d03a	; 0x1d03a <__prologue_saves__+0x14>
    bd08:	9a ab       	std	Y+50, r25	; 0x32
    bd0a:	89 ab       	std	Y+49, r24	; 0x31
    bd0c:	40 e0       	ldi	r20, 0x00	; 0
    bd0e:	be 01       	movw	r22, r28
    bd10:	61 5d       	subi	r22, 0xD1	; 209
    bd12:	7f 4f       	sbci	r23, 0xFF	; 255
    bd14:	ce 01       	movw	r24, r28
    bd16:	c1 96       	adiw	r24, 0x31	; 49
    bd18:	0e 94 22 4a 	call	0x9444	; 0x9444 <find_volume>
    bd1c:	00 97       	sbiw	r24, 0x00	; 0
    bd1e:	09 f0       	breq	.+2      	; 0xbd22 <f_chdir+0x26>
    bd20:	44 c0       	rjmp	.+136    	; 0xbdaa <f_chdir+0xae>
    bd22:	8f a5       	ldd	r24, Y+47	; 0x2f
    bd24:	98 a9       	ldd	r25, Y+48	; 0x30
    bd26:	9a 83       	std	Y+2, r25	; 0x02
    bd28:	89 83       	std	Y+1, r24	; 0x01
    bd2a:	80 e0       	ldi	r24, 0x00	; 0
    bd2c:	92 e0       	ldi	r25, 0x02	; 2
    bd2e:	0e 94 f8 68 	call	0xd1f0	; 0xd1f0 <ff_memalloc>
    bd32:	7c 01       	movw	r14, r24
    bd34:	00 97       	sbiw	r24, 0x00	; 0
    bd36:	a9 f1       	breq	.+106    	; 0xbda2 <f_chdir+0xa6>
    bd38:	ef a5       	ldd	r30, Y+47	; 0x2f
    bd3a:	f8 a9       	ldd	r31, Y+48	; 0x30
    bd3c:	94 87       	std	Z+12, r25	; 0x0c
    bd3e:	83 87       	std	Z+11, r24	; 0x0b
    bd40:	69 a9       	ldd	r22, Y+49	; 0x31
    bd42:	7a a9       	ldd	r23, Y+50	; 0x32
    bd44:	ce 01       	movw	r24, r28
    bd46:	01 96       	adiw	r24, 0x01	; 1
    bd48:	03 d8       	rcall	.-4090   	; 0xad50 <follow_path>
    bd4a:	8c 01       	movw	r16, r24
    bd4c:	89 2b       	or	r24, r25
    bd4e:	09 f5       	brne	.+66     	; 0xbd92 <f_chdir+0x96>
    bd50:	88 a5       	ldd	r24, Y+40	; 0x28
    bd52:	87 ff       	sbrs	r24, 7
    bd54:	0b c0       	rjmp	.+22     	; 0xbd6c <f_chdir+0x70>
    bd56:	ef a5       	ldd	r30, Y+47	; 0x2f
    bd58:	f8 a9       	ldd	r31, Y+48	; 0x30
    bd5a:	8f 81       	ldd	r24, Y+7	; 0x07
    bd5c:	98 85       	ldd	r25, Y+8	; 0x08
    bd5e:	a9 85       	ldd	r26, Y+9	; 0x09
    bd60:	ba 85       	ldd	r27, Y+10	; 0x0a
    bd62:	85 8b       	std	Z+21, r24	; 0x15
    bd64:	96 8b       	std	Z+22, r25	; 0x16
    bd66:	a7 8b       	std	Z+23, r26	; 0x17
    bd68:	b0 8f       	std	Z+24, r27	; 0x18
    bd6a:	13 c0       	rjmp	.+38     	; 0xbd92 <f_chdir+0x96>
    bd6c:	8d 81       	ldd	r24, Y+5	; 0x05
    bd6e:	84 ff       	sbrs	r24, 4
    bd70:	0e c0       	rjmp	.+28     	; 0xbd8e <f_chdir+0x92>
    bd72:	cf a4       	ldd	r12, Y+47	; 0x2f
    bd74:	d8 a8       	ldd	r13, Y+48	; 0x30
    bd76:	6b 8d       	ldd	r22, Y+27	; 0x1b
    bd78:	7c 8d       	ldd	r23, Y+28	; 0x1c
    bd7a:	f6 01       	movw	r30, r12
    bd7c:	80 81       	ld	r24, Z
    bd7e:	0e 94 ba 48 	call	0x9174	; 0x9174 <ld_clust.isra.1>
    bd82:	f6 01       	movw	r30, r12
    bd84:	65 8b       	std	Z+21, r22	; 0x15
    bd86:	76 8b       	std	Z+22, r23	; 0x16
    bd88:	87 8b       	std	Z+23, r24	; 0x17
    bd8a:	90 8f       	std	Z+24, r25	; 0x18
    bd8c:	02 c0       	rjmp	.+4      	; 0xbd92 <f_chdir+0x96>
    bd8e:	05 e0       	ldi	r16, 0x05	; 5
    bd90:	10 e0       	ldi	r17, 0x00	; 0
    bd92:	c7 01       	movw	r24, r14
    bd94:	0e 94 fb 68 	call	0xd1f6	; 0xd1f6 <ff_memfree>
    bd98:	04 30       	cpi	r16, 0x04	; 4
    bd9a:	11 05       	cpc	r17, r1
    bd9c:	29 f4       	brne	.+10     	; 0xbda8 <f_chdir+0xac>
    bd9e:	85 e0       	ldi	r24, 0x05	; 5
    bda0:	01 c0       	rjmp	.+2      	; 0xbda4 <f_chdir+0xa8>
    bda2:	81 e1       	ldi	r24, 0x11	; 17
    bda4:	90 e0       	ldi	r25, 0x00	; 0
    bda6:	01 c0       	rjmp	.+2      	; 0xbdaa <f_chdir+0xae>
    bda8:	c8 01       	movw	r24, r16
    bdaa:	e2 96       	adiw	r28, 0x32	; 50
    bdac:	e8 e0       	ldi	r30, 0x08	; 8
    bdae:	0c 94 39 e8 	jmp	0x1d072	; 0x1d072 <__epilogue_restores__+0x14>

0000bdb2 <f_getcwd>:
    bdb2:	a8 e4       	ldi	r26, 0x48	; 72
    bdb4:	b1 e0       	ldi	r27, 0x01	; 1
    bdb6:	ef ed       	ldi	r30, 0xDF	; 223
    bdb8:	fe e5       	ldi	r31, 0x5E	; 94
    bdba:	0c 94 14 e8 	jmp	0x1d028	; 0x1d028 <__prologue_saves__+0x2>
    bdbe:	c9 5b       	subi	r28, 0xB9	; 185
    bdc0:	de 4f       	sbci	r29, 0xFE	; 254
    bdc2:	99 83       	std	Y+1, r25	; 0x01
    bdc4:	88 83       	st	Y, r24
    bdc6:	c7 54       	subi	r28, 0x47	; 71
    bdc8:	d1 40       	sbci	r29, 0x01	; 1
    bdca:	5b 01       	movw	r10, r22
    bdcc:	fc 01       	movw	r30, r24
    bdce:	10 82       	st	Z, r1
    bdd0:	40 e0       	ldi	r20, 0x00	; 0
    bdd2:	be 01       	movw	r22, r28
    bdd4:	6b 5b       	subi	r22, 0xBB	; 187
    bdd6:	7e 4f       	sbci	r23, 0xFE	; 254
    bdd8:	ce 01       	movw	r24, r28
    bdda:	89 5b       	subi	r24, 0xB9	; 185
    bddc:	9e 4f       	sbci	r25, 0xFE	; 254
    bdde:	0e 94 22 4a 	call	0x9444	; 0x9444 <find_volume>
    bde2:	8c 01       	movw	r16, r24
    bde4:	89 2b       	or	r24, r25
    bde6:	09 f0       	breq	.+2      	; 0xbdea <f_getcwd+0x38>
    bde8:	08 c1       	rjmp	.+528    	; 0xbffa <f_getcwd+0x248>
    bdea:	cb 5b       	subi	r28, 0xBB	; 187
    bdec:	de 4f       	sbci	r29, 0xFE	; 254
    bdee:	88 81       	ld	r24, Y
    bdf0:	99 81       	ldd	r25, Y+1	; 0x01
    bdf2:	c5 54       	subi	r28, 0x45	; 69
    bdf4:	d1 40       	sbci	r29, 0x01	; 1
    bdf6:	c9 5e       	subi	r28, 0xE9	; 233
    bdf8:	de 4f       	sbci	r29, 0xFE	; 254
    bdfa:	99 83       	std	Y+1, r25	; 0x01
    bdfc:	88 83       	st	Y, r24
    bdfe:	c7 51       	subi	r28, 0x17	; 23
    be00:	d1 40       	sbci	r29, 0x01	; 1
    be02:	80 e0       	ldi	r24, 0x00	; 0
    be04:	92 e0       	ldi	r25, 0x02	; 2
    be06:	0e 94 f8 68 	call	0xd1f0	; 0xd1f0 <ff_memalloc>
    be0a:	6c 01       	movw	r12, r24
    be0c:	00 97       	sbiw	r24, 0x00	; 0
    be0e:	09 f4       	brne	.+2      	; 0xbe12 <f_getcwd+0x60>
    be10:	f6 c0       	rjmp	.+492    	; 0xbffe <f_getcwd+0x24c>
    be12:	cb 5b       	subi	r28, 0xBB	; 187
    be14:	de 4f       	sbci	r29, 0xFE	; 254
    be16:	e8 81       	ld	r30, Y
    be18:	f9 81       	ldd	r31, Y+1	; 0x01
    be1a:	c5 54       	subi	r28, 0x45	; 69
    be1c:	d1 40       	sbci	r29, 0x01	; 1
    be1e:	94 87       	std	Z+12, r25	; 0x0c
    be20:	83 87       	std	Z+11, r24	; 0x0b
    be22:	85 89       	ldd	r24, Z+21	; 0x15
    be24:	96 89       	ldd	r25, Z+22	; 0x16
    be26:	a7 89       	ldd	r26, Z+23	; 0x17
    be28:	b0 8d       	ldd	r27, Z+24	; 0x18
    be2a:	c3 5e       	subi	r28, 0xE3	; 227
    be2c:	de 4f       	sbci	r29, 0xFE	; 254
    be2e:	88 83       	st	Y, r24
    be30:	99 83       	std	Y+1, r25	; 0x01
    be32:	aa 83       	std	Y+2, r26	; 0x02
    be34:	bb 83       	std	Y+3, r27	; 0x03
    be36:	cd 51       	subi	r28, 0x1D	; 29
    be38:	d1 40       	sbci	r29, 0x01	; 1
    be3a:	75 01       	movw	r14, r10
    be3c:	ce 01       	movw	r24, r28
    be3e:	01 96       	adiw	r24, 0x01	; 1
    be40:	4c 01       	movw	r8, r24
    be42:	8f e2       	ldi	r24, 0x2F	; 47
    be44:	38 2e       	mov	r3, r24
    be46:	c3 5e       	subi	r28, 0xE3	; 227
    be48:	de 4f       	sbci	r29, 0xFE	; 254
    be4a:	48 80       	ld	r4, Y
    be4c:	59 80       	ldd	r5, Y+1	; 0x01
    be4e:	6a 80       	ldd	r6, Y+2	; 0x02
    be50:	7b 80       	ldd	r7, Y+3	; 0x03
    be52:	cd 51       	subi	r28, 0x1D	; 29
    be54:	d1 40       	sbci	r29, 0x01	; 1
    be56:	41 14       	cp	r4, r1
    be58:	51 04       	cpc	r5, r1
    be5a:	61 04       	cpc	r6, r1
    be5c:	71 04       	cpc	r7, r1
    be5e:	09 f4       	brne	.+2      	; 0xbe62 <f_getcwd+0xb0>
    be60:	a5 c0       	rjmp	.+330    	; 0xbfac <f_getcwd+0x1fa>
    be62:	40 e2       	ldi	r20, 0x20	; 32
    be64:	50 e0       	ldi	r21, 0x00	; 0
    be66:	60 e0       	ldi	r22, 0x00	; 0
    be68:	70 e0       	ldi	r23, 0x00	; 0
    be6a:	ce 01       	movw	r24, r28
    be6c:	89 5e       	subi	r24, 0xE9	; 233
    be6e:	9e 4f       	sbci	r25, 0xFE	; 254
    be70:	0e 94 7b 4e 	call	0x9cf6	; 0x9cf6 <dir_sdi>
    be74:	00 97       	sbiw	r24, 0x00	; 0
    be76:	09 f0       	breq	.+2      	; 0xbe7a <f_getcwd+0xc8>
    be78:	95 c0       	rjmp	.+298    	; 0xbfa4 <f_getcwd+0x1f2>
    be7a:	c3 5d       	subi	r28, 0xD3	; 211
    be7c:	de 4f       	sbci	r29, 0xFE	; 254
    be7e:	48 81       	ld	r20, Y
    be80:	59 81       	ldd	r21, Y+1	; 0x01
    be82:	6a 81       	ldd	r22, Y+2	; 0x02
    be84:	7b 81       	ldd	r23, Y+3	; 0x03
    be86:	cd 52       	subi	r28, 0x2D	; 45
    be88:	d1 40       	sbci	r29, 0x01	; 1
    be8a:	cb 5b       	subi	r28, 0xBB	; 187
    be8c:	de 4f       	sbci	r29, 0xFE	; 254
    be8e:	88 81       	ld	r24, Y
    be90:	99 81       	ldd	r25, Y+1	; 0x01
    be92:	c5 54       	subi	r28, 0x45	; 69
    be94:	d1 40       	sbci	r29, 0x01	; 1
    be96:	0e 94 a2 49 	call	0x9344	; 0x9344 <move_window>
    be9a:	00 97       	sbiw	r24, 0x00	; 0
    be9c:	09 f0       	breq	.+2      	; 0xbea0 <f_getcwd+0xee>
    be9e:	82 c0       	rjmp	.+260    	; 0xbfa4 <f_getcwd+0x1f2>
    bea0:	cf 5c       	subi	r28, 0xCF	; 207
    bea2:	de 4f       	sbci	r29, 0xFE	; 254
    bea4:	68 81       	ld	r22, Y
    bea6:	79 81       	ldd	r23, Y+1	; 0x01
    bea8:	c1 53       	subi	r28, 0x31	; 49
    beaa:	d1 40       	sbci	r29, 0x01	; 1
    beac:	cb 5b       	subi	r28, 0xBB	; 187
    beae:	de 4f       	sbci	r29, 0xFE	; 254
    beb0:	e8 81       	ld	r30, Y
    beb2:	f9 81       	ldd	r31, Y+1	; 0x01
    beb4:	c5 54       	subi	r28, 0x45	; 69
    beb6:	d1 40       	sbci	r29, 0x01	; 1
    beb8:	80 81       	ld	r24, Z
    beba:	0e 94 ba 48 	call	0x9174	; 0x9174 <ld_clust.isra.1>
    bebe:	c3 5e       	subi	r28, 0xE3	; 227
    bec0:	de 4f       	sbci	r29, 0xFE	; 254
    bec2:	68 83       	st	Y, r22
    bec4:	79 83       	std	Y+1, r23	; 0x01
    bec6:	8a 83       	std	Y+2, r24	; 0x02
    bec8:	9b 83       	std	Y+3, r25	; 0x03
    beca:	cd 51       	subi	r28, 0x1D	; 29
    becc:	d1 40       	sbci	r29, 0x01	; 1
    bece:	40 e0       	ldi	r20, 0x00	; 0
    bed0:	50 e0       	ldi	r21, 0x00	; 0
    bed2:	ba 01       	movw	r22, r20
    bed4:	ce 01       	movw	r24, r28
    bed6:	89 5e       	subi	r24, 0xE9	; 233
    bed8:	9e 4f       	sbci	r25, 0xFE	; 254
    beda:	0e 94 7b 4e 	call	0x9cf6	; 0x9cf6 <dir_sdi>
    bede:	00 97       	sbiw	r24, 0x00	; 0
    bee0:	09 f0       	breq	.+2      	; 0xbee4 <f_getcwd+0x132>
    bee2:	60 c0       	rjmp	.+192    	; 0xbfa4 <f_getcwd+0x1f2>
    bee4:	60 e0       	ldi	r22, 0x00	; 0
    bee6:	70 e0       	ldi	r23, 0x00	; 0
    bee8:	ce 01       	movw	r24, r28
    beea:	89 5e       	subi	r24, 0xE9	; 233
    beec:	9e 4f       	sbci	r25, 0xFE	; 254
    beee:	0e 94 d7 52 	call	0xa5ae	; 0xa5ae <dir_read>
    bef2:	00 97       	sbiw	r24, 0x00	; 0
    bef4:	09 f0       	breq	.+2      	; 0xbef8 <f_getcwd+0x146>
    bef6:	86 c0       	rjmp	.+268    	; 0xc004 <f_getcwd+0x252>
    bef8:	cf 5c       	subi	r28, 0xCF	; 207
    befa:	de 4f       	sbci	r29, 0xFE	; 254
    befc:	68 81       	ld	r22, Y
    befe:	79 81       	ldd	r23, Y+1	; 0x01
    bf00:	c1 53       	subi	r28, 0x31	; 49
    bf02:	d1 40       	sbci	r29, 0x01	; 1
    bf04:	cb 5b       	subi	r28, 0xBB	; 187
    bf06:	de 4f       	sbci	r29, 0xFE	; 254
    bf08:	e8 81       	ld	r30, Y
    bf0a:	f9 81       	ldd	r31, Y+1	; 0x01
    bf0c:	c5 54       	subi	r28, 0x45	; 69
    bf0e:	d1 40       	sbci	r29, 0x01	; 1
    bf10:	80 81       	ld	r24, Z
    bf12:	0e 94 ba 48 	call	0x9174	; 0x9174 <ld_clust.isra.1>
    bf16:	46 16       	cp	r4, r22
    bf18:	57 06       	cpc	r5, r23
    bf1a:	68 06       	cpc	r6, r24
    bf1c:	79 06       	cpc	r7, r25
    bf1e:	41 f4       	brne	.+16     	; 0xbf30 <f_getcwd+0x17e>
    bf20:	b4 01       	movw	r22, r8
    bf22:	ce 01       	movw	r24, r28
    bf24:	89 5e       	subi	r24, 0xE9	; 233
    bf26:	9e 4f       	sbci	r25, 0xFE	; 254
    bf28:	0e 94 9d 50 	call	0xa13a	; 0xa13a <get_fileinfo>
    bf2c:	f4 01       	movw	r30, r8
    bf2e:	0a c0       	rjmp	.+20     	; 0xbf44 <f_getcwd+0x192>
    bf30:	60 e0       	ldi	r22, 0x00	; 0
    bf32:	70 e0       	ldi	r23, 0x00	; 0
    bf34:	ce 01       	movw	r24, r28
    bf36:	89 5e       	subi	r24, 0xE9	; 233
    bf38:	9e 4f       	sbci	r25, 0xFE	; 254
    bf3a:	0e 94 75 51 	call	0xa2ea	; 0xa2ea <dir_next>
    bf3e:	00 97       	sbiw	r24, 0x00	; 0
    bf40:	89 f2       	breq	.-94     	; 0xbee4 <f_getcwd+0x132>
    bf42:	60 c0       	rjmp	.+192    	; 0xc004 <f_getcwd+0x252>
    bf44:	cf 01       	movw	r24, r30
    bf46:	88 19       	sub	r24, r8
    bf48:	99 09       	sbc	r25, r9
    bf4a:	31 96       	adiw	r30, 0x01	; 1
    bf4c:	25 89       	ldd	r18, Z+21	; 0x15
    bf4e:	21 11       	cpse	r18, r1
    bf50:	f9 cf       	rjmp	.-14     	; 0xbf44 <f_getcwd+0x192>
    bf52:	9c 01       	movw	r18, r24
    bf54:	2d 5f       	subi	r18, 0xFD	; 253
    bf56:	3f 4f       	sbci	r19, 0xFF	; 255
    bf58:	e2 16       	cp	r14, r18
    bf5a:	f3 06       	cpc	r15, r19
    bf5c:	28 f1       	brcs	.+74     	; 0xbfa8 <f_getcwd+0x1f6>
    bf5e:	f4 01       	movw	r30, r8
    bf60:	e8 0f       	add	r30, r24
    bf62:	f9 1f       	adc	r31, r25
    bf64:	97 01       	movw	r18, r14
    bf66:	e8 15       	cp	r30, r8
    bf68:	f9 05       	cpc	r31, r9
    bf6a:	71 f0       	breq	.+28     	; 0xbf88 <f_getcwd+0x1d6>
    bf6c:	21 50       	subi	r18, 0x01	; 1
    bf6e:	31 09       	sbc	r19, r1
    bf70:	45 89       	ldd	r20, Z+21	; 0x15
    bf72:	c9 5b       	subi	r28, 0xB9	; 185
    bf74:	de 4f       	sbci	r29, 0xFE	; 254
    bf76:	a8 81       	ld	r26, Y
    bf78:	b9 81       	ldd	r27, Y+1	; 0x01
    bf7a:	c7 54       	subi	r28, 0x47	; 71
    bf7c:	d1 40       	sbci	r29, 0x01	; 1
    bf7e:	a2 0f       	add	r26, r18
    bf80:	b3 1f       	adc	r27, r19
    bf82:	4c 93       	st	X, r20
    bf84:	31 97       	sbiw	r30, 0x01	; 1
    bf86:	ef cf       	rjmp	.-34     	; 0xbf66 <f_getcwd+0x1b4>
    bf88:	80 95       	com	r24
    bf8a:	90 95       	com	r25
    bf8c:	e8 0e       	add	r14, r24
    bf8e:	f9 1e       	adc	r15, r25
    bf90:	c9 5b       	subi	r28, 0xB9	; 185
    bf92:	de 4f       	sbci	r29, 0xFE	; 254
    bf94:	e8 81       	ld	r30, Y
    bf96:	f9 81       	ldd	r31, Y+1	; 0x01
    bf98:	c7 54       	subi	r28, 0x47	; 71
    bf9a:	d1 40       	sbci	r29, 0x01	; 1
    bf9c:	ee 0d       	add	r30, r14
    bf9e:	ff 1d       	adc	r31, r15
    bfa0:	30 82       	st	Z, r3
    bfa2:	51 cf       	rjmp	.-350    	; 0xbe46 <f_getcwd+0x94>
    bfa4:	8c 01       	movw	r16, r24
    bfa6:	02 c0       	rjmp	.+4      	; 0xbfac <f_getcwd+0x1fa>
    bfa8:	01 e1       	ldi	r16, 0x11	; 17
    bfaa:	10 e0       	ldi	r17, 0x00	; 0
    bfac:	c9 5b       	subi	r28, 0xB9	; 185
    bfae:	de 4f       	sbci	r29, 0xFE	; 254
    bfb0:	e8 81       	ld	r30, Y
    bfb2:	f9 81       	ldd	r31, Y+1	; 0x01
    bfb4:	c7 54       	subi	r28, 0x47	; 71
    bfb6:	d1 40       	sbci	r29, 0x01	; 1
    bfb8:	01 15       	cp	r16, r1
    bfba:	11 05       	cpc	r17, r1
    bfbc:	d1 f4       	brne	.+52     	; 0xbff2 <f_getcwd+0x240>
    bfbe:	ea 14       	cp	r14, r10
    bfc0:	fb 04       	cpc	r15, r11
    bfc2:	21 f4       	brne	.+8      	; 0xbfcc <f_getcwd+0x21a>
    bfc4:	8f e2       	ldi	r24, 0x2F	; 47
    bfc6:	80 83       	st	Z, r24
    bfc8:	31 96       	adiw	r30, 0x01	; 1
    bfca:	13 c0       	rjmp	.+38     	; 0xbff2 <f_getcwd+0x240>
    bfcc:	31 96       	adiw	r30, 0x01	; 1
    bfce:	c9 5b       	subi	r28, 0xB9	; 185
    bfd0:	de 4f       	sbci	r29, 0xFE	; 254
    bfd2:	a8 81       	ld	r26, Y
    bfd4:	b9 81       	ldd	r27, Y+1	; 0x01
    bfd6:	c7 54       	subi	r28, 0x47	; 71
    bfd8:	d1 40       	sbci	r29, 0x01	; 1
    bfda:	ae 0d       	add	r26, r14
    bfdc:	bf 1d       	adc	r27, r15
    bfde:	8c 91       	ld	r24, X
    bfe0:	df 01       	movw	r26, r30
    bfe2:	11 97       	sbiw	r26, 0x01	; 1
    bfe4:	8c 93       	st	X, r24
    bfe6:	c7 01       	movw	r24, r14
    bfe8:	01 96       	adiw	r24, 0x01	; 1
    bfea:	7c 01       	movw	r14, r24
    bfec:	8a 15       	cp	r24, r10
    bfee:	9b 05       	cpc	r25, r11
    bff0:	68 f3       	brcs	.-38     	; 0xbfcc <f_getcwd+0x21a>
    bff2:	10 82       	st	Z, r1
    bff4:	c6 01       	movw	r24, r12
    bff6:	0e 94 fb 68 	call	0xd1f6	; 0xd1f6 <ff_memfree>
    bffa:	c8 01       	movw	r24, r16
    bffc:	09 c0       	rjmp	.+18     	; 0xc010 <f_getcwd+0x25e>
    bffe:	81 e1       	ldi	r24, 0x11	; 17
    c000:	90 e0       	ldi	r25, 0x00	; 0
    c002:	06 c0       	rjmp	.+12     	; 0xc010 <f_getcwd+0x25e>
    c004:	8c 01       	movw	r16, r24
    c006:	04 97       	sbiw	r24, 0x04	; 4
    c008:	89 f6       	brne	.-94     	; 0xbfac <f_getcwd+0x1fa>
    c00a:	02 e0       	ldi	r16, 0x02	; 2
    c00c:	10 e0       	ldi	r17, 0x00	; 0
    c00e:	ce cf       	rjmp	.-100    	; 0xbfac <f_getcwd+0x1fa>
    c010:	c8 5b       	subi	r28, 0xB8	; 184
    c012:	de 4f       	sbci	r29, 0xFE	; 254
    c014:	e1 e1       	ldi	r30, 0x11	; 17
    c016:	0c 94 30 e8 	jmp	0x1d060	; 0x1d060 <__epilogue_restores__+0x2>

0000c01a <f_lseek>:
    c01a:	aa e0       	ldi	r26, 0x0A	; 10
    c01c:	b0 e0       	ldi	r27, 0x00	; 0
    c01e:	e3 e1       	ldi	r30, 0x13	; 19
    c020:	f0 e6       	ldi	r31, 0x60	; 96
    c022:	0c 94 13 e8 	jmp	0x1d026	; 0x1d026 <__prologue_saves__>
    c026:	1c 01       	movw	r2, r24
    c028:	6a 01       	movw	r12, r20
    c02a:	7b 01       	movw	r14, r22
    c02c:	be 01       	movw	r22, r28
    c02e:	6f 5f       	subi	r22, 0xFF	; 255
    c030:	7f 4f       	sbci	r23, 0xFF	; 255
    c032:	0e 94 82 48 	call	0x9104	; 0x9104 <validate>
    c036:	00 97       	sbiw	r24, 0x00	; 0
    c038:	09 f0       	breq	.+2      	; 0xc03c <f_lseek+0x22>
    c03a:	c6 c2       	rjmp	.+1420   	; 0xc5c8 <f_lseek+0x5ae>
    c03c:	d1 01       	movw	r26, r2
    c03e:	1f 96       	adiw	r26, 0x0f	; 15
    c040:	8c 91       	ld	r24, X
    c042:	1f 97       	sbiw	r26, 0x0f	; 15
    c044:	90 e0       	ldi	r25, 0x00	; 0
    c046:	00 97       	sbiw	r24, 0x00	; 0
    c048:	09 f0       	breq	.+2      	; 0xc04c <f_lseek+0x32>
    c04a:	be c2       	rjmp	.+1404   	; 0xc5c8 <f_lseek+0x5ae>
    c04c:	92 96       	adiw	r26, 0x22	; 34
    c04e:	ed 91       	ld	r30, X+
    c050:	fc 91       	ld	r31, X
    c052:	93 97       	sbiw	r26, 0x23	; 35
    c054:	30 97       	sbiw	r30, 0x00	; 0
    c056:	09 f4       	brne	.+2      	; 0xc05a <f_lseek+0x40>
    c058:	3a c1       	rjmp	.+628    	; 0xc2ce <f_lseek+0x2b4>
    c05a:	bf ef       	ldi	r27, 0xFF	; 255
    c05c:	cb 16       	cp	r12, r27
    c05e:	db 06       	cpc	r13, r27
    c060:	eb 06       	cpc	r14, r27
    c062:	fb 06       	cpc	r15, r27
    c064:	09 f0       	breq	.+2      	; 0xc068 <f_lseek+0x4e>
    c066:	9f c0       	rjmp	.+318    	; 0xc1a6 <f_lseek+0x18c>
    c068:	8f 01       	movw	r16, r30
    c06a:	0c 5f       	subi	r16, 0xFC	; 252
    c06c:	1f 4f       	sbci	r17, 0xFF	; 255
    c06e:	20 81       	ld	r18, Z
    c070:	31 81       	ldd	r19, Z+1	; 0x01
    c072:	42 81       	ldd	r20, Z+2	; 0x02
    c074:	53 81       	ldd	r21, Z+3	; 0x03
    c076:	2f 83       	std	Y+7, r18	; 0x07
    c078:	38 87       	std	Y+8, r19	; 0x08
    c07a:	49 87       	std	Y+9, r20	; 0x09
    c07c:	5a 87       	std	Y+10, r21	; 0x0a
    c07e:	d1 01       	movw	r26, r2
    c080:	16 96       	adiw	r26, 0x06	; 6
    c082:	8d 90       	ld	r8, X+
    c084:	9d 90       	ld	r9, X+
    c086:	ad 90       	ld	r10, X+
    c088:	bc 90       	ld	r11, X
    c08a:	19 97       	sbiw	r26, 0x09	; 9
    c08c:	52 e0       	ldi	r21, 0x02	; 2
    c08e:	c5 2e       	mov	r12, r21
    c090:	d1 2c       	mov	r13, r1
    c092:	e1 2c       	mov	r14, r1
    c094:	f1 2c       	mov	r15, r1
    c096:	81 14       	cp	r8, r1
    c098:	91 04       	cpc	r9, r1
    c09a:	a1 04       	cpc	r10, r1
    c09c:	b1 04       	cpc	r11, r1
    c09e:	09 f4       	brne	.+2      	; 0xc0a2 <f_lseek+0x88>
    c0a0:	68 c0       	rjmp	.+208    	; 0xc172 <f_lseek+0x158>
    c0a2:	24 01       	movw	r4, r8
    c0a4:	35 01       	movw	r6, r10
    c0a6:	1b 82       	std	Y+3, r1	; 0x03
    c0a8:	1c 82       	std	Y+4, r1	; 0x04
    c0aa:	1d 82       	std	Y+5, r1	; 0x05
    c0ac:	1e 82       	std	Y+6, r1	; 0x06
    c0ae:	2b 81       	ldd	r18, Y+3	; 0x03
    c0b0:	3c 81       	ldd	r19, Y+4	; 0x04
    c0b2:	4d 81       	ldd	r20, Y+5	; 0x05
    c0b4:	5e 81       	ldd	r21, Y+6	; 0x06
    c0b6:	2f 5f       	subi	r18, 0xFF	; 255
    c0b8:	3f 4f       	sbci	r19, 0xFF	; 255
    c0ba:	4f 4f       	sbci	r20, 0xFF	; 255
    c0bc:	5f 4f       	sbci	r21, 0xFF	; 255
    c0be:	2b 83       	std	Y+3, r18	; 0x03
    c0c0:	3c 83       	std	Y+4, r19	; 0x04
    c0c2:	4d 83       	std	Y+5, r20	; 0x05
    c0c4:	5e 83       	std	Y+6, r21	; 0x06
    c0c6:	b3 01       	movw	r22, r6
    c0c8:	a2 01       	movw	r20, r4
    c0ca:	d1 01       	movw	r26, r2
    c0cc:	8d 91       	ld	r24, X+
    c0ce:	9c 91       	ld	r25, X
    c0d0:	0e 94 c8 4d 	call	0x9b90	; 0x9b90 <get_fat.isra.7>
    c0d4:	62 30       	cpi	r22, 0x02	; 2
    c0d6:	71 05       	cpc	r23, r1
    c0d8:	81 05       	cpc	r24, r1
    c0da:	91 05       	cpc	r25, r1
    c0dc:	20 f4       	brcc	.+8      	; 0xc0e6 <f_lseek+0xcc>
    c0de:	82 e0       	ldi	r24, 0x02	; 2
    c0e0:	f1 01       	movw	r30, r2
    c0e2:	87 87       	std	Z+15, r24	; 0x0f
    c0e4:	0a c0       	rjmp	.+20     	; 0xc0fa <f_lseek+0xe0>
    c0e6:	6f 3f       	cpi	r22, 0xFF	; 255
    c0e8:	ff ef       	ldi	r31, 0xFF	; 255
    c0ea:	7f 07       	cpc	r23, r31
    c0ec:	8f 07       	cpc	r24, r31
    c0ee:	9f 07       	cpc	r25, r31
    c0f0:	31 f4       	brne	.+12     	; 0xc0fe <f_lseek+0xe4>
    c0f2:	81 e0       	ldi	r24, 0x01	; 1
    c0f4:	d1 01       	movw	r26, r2
    c0f6:	1f 96       	adiw	r26, 0x0f	; 15
    c0f8:	8c 93       	st	X, r24
    c0fa:	90 e0       	ldi	r25, 0x00	; 0
    c0fc:	65 c2       	rjmp	.+1226   	; 0xc5c8 <f_lseek+0x5ae>
    c0fe:	a3 01       	movw	r20, r6
    c100:	92 01       	movw	r18, r4
    c102:	2f 5f       	subi	r18, 0xFF	; 255
    c104:	3f 4f       	sbci	r19, 0xFF	; 255
    c106:	4f 4f       	sbci	r20, 0xFF	; 255
    c108:	5f 4f       	sbci	r21, 0xFF	; 255
    c10a:	2b 01       	movw	r4, r22
    c10c:	3c 01       	movw	r6, r24
    c10e:	62 17       	cp	r22, r18
    c110:	73 07       	cpc	r23, r19
    c112:	84 07       	cpc	r24, r20
    c114:	95 07       	cpc	r25, r21
    c116:	59 f2       	breq	.-106    	; 0xc0ae <f_lseek+0x94>
    c118:	b2 e0       	ldi	r27, 0x02	; 2
    c11a:	cb 0e       	add	r12, r27
    c11c:	d1 1c       	adc	r13, r1
    c11e:	e1 1c       	adc	r14, r1
    c120:	f1 1c       	adc	r15, r1
    c122:	2f 81       	ldd	r18, Y+7	; 0x07
    c124:	38 85       	ldd	r19, Y+8	; 0x08
    c126:	49 85       	ldd	r20, Y+9	; 0x09
    c128:	5a 85       	ldd	r21, Y+10	; 0x0a
    c12a:	2c 15       	cp	r18, r12
    c12c:	3d 05       	cpc	r19, r13
    c12e:	4e 05       	cpc	r20, r14
    c130:	5f 05       	cpc	r21, r15
    c132:	88 f0       	brcs	.+34     	; 0xc156 <f_lseek+0x13c>
    c134:	2b 81       	ldd	r18, Y+3	; 0x03
    c136:	3c 81       	ldd	r19, Y+4	; 0x04
    c138:	4d 81       	ldd	r20, Y+5	; 0x05
    c13a:	5e 81       	ldd	r21, Y+6	; 0x06
    c13c:	d8 01       	movw	r26, r16
    c13e:	2d 93       	st	X+, r18
    c140:	3d 93       	st	X+, r19
    c142:	4d 93       	st	X+, r20
    c144:	5c 93       	st	X, r21
    c146:	13 97       	sbiw	r26, 0x03	; 3
    c148:	f8 01       	movw	r30, r16
    c14a:	84 82       	std	Z+4, r8	; 0x04
    c14c:	95 82       	std	Z+5, r9	; 0x05
    c14e:	a6 82       	std	Z+6, r10	; 0x06
    c150:	b7 82       	std	Z+7, r11	; 0x07
    c152:	08 5f       	subi	r16, 0xF8	; 248
    c154:	1f 4f       	sbci	r17, 0xFF	; 255
    c156:	e9 81       	ldd	r30, Y+1	; 0x01
    c158:	fa 81       	ldd	r31, Y+2	; 0x02
    c15a:	81 8c       	ldd	r8, Z+25	; 0x19
    c15c:	92 8c       	ldd	r9, Z+26	; 0x1a
    c15e:	a3 8c       	ldd	r10, Z+27	; 0x1b
    c160:	b4 8c       	ldd	r11, Z+28	; 0x1c
    c162:	68 15       	cp	r22, r8
    c164:	79 05       	cpc	r23, r9
    c166:	8a 05       	cpc	r24, r10
    c168:	9b 05       	cpc	r25, r11
    c16a:	18 f4       	brcc	.+6      	; 0xc172 <f_lseek+0x158>
    c16c:	4b 01       	movw	r8, r22
    c16e:	5c 01       	movw	r10, r24
    c170:	98 cf       	rjmp	.-208    	; 0xc0a2 <f_lseek+0x88>
    c172:	d1 01       	movw	r26, r2
    c174:	92 96       	adiw	r26, 0x22	; 34
    c176:	ed 91       	ld	r30, X+
    c178:	fc 91       	ld	r31, X
    c17a:	93 97       	sbiw	r26, 0x23	; 35
    c17c:	c0 82       	st	Z, r12
    c17e:	d1 82       	std	Z+1, r13	; 0x01
    c180:	e2 82       	std	Z+2, r14	; 0x02
    c182:	f3 82       	std	Z+3, r15	; 0x03
    c184:	2f 81       	ldd	r18, Y+7	; 0x07
    c186:	38 85       	ldd	r19, Y+8	; 0x08
    c188:	49 85       	ldd	r20, Y+9	; 0x09
    c18a:	5a 85       	ldd	r21, Y+10	; 0x0a
    c18c:	2c 15       	cp	r18, r12
    c18e:	3d 05       	cpc	r19, r13
    c190:	4e 05       	cpc	r20, r14
    c192:	5f 05       	cpc	r21, r15
    c194:	08 f4       	brcc	.+2      	; 0xc198 <f_lseek+0x17e>
    c196:	0f c2       	rjmp	.+1054   	; 0xc5b6 <f_lseek+0x59c>
    c198:	d8 01       	movw	r26, r16
    c19a:	1d 92       	st	X+, r1
    c19c:	1d 92       	st	X+, r1
    c19e:	1d 92       	st	X+, r1
    c1a0:	1c 92       	st	X, r1
    c1a2:	13 97       	sbiw	r26, 0x03	; 3
    c1a4:	06 c2       	rjmp	.+1036   	; 0xc5b2 <f_lseek+0x598>
    c1a6:	f1 01       	movw	r30, r2
    c1a8:	82 85       	ldd	r24, Z+10	; 0x0a
    c1aa:	93 85       	ldd	r25, Z+11	; 0x0b
    c1ac:	a4 85       	ldd	r26, Z+12	; 0x0c
    c1ae:	b5 85       	ldd	r27, Z+13	; 0x0d
    c1b0:	46 01       	movw	r8, r12
    c1b2:	57 01       	movw	r10, r14
    c1b4:	8c 15       	cp	r24, r12
    c1b6:	9d 05       	cpc	r25, r13
    c1b8:	ae 05       	cpc	r26, r14
    c1ba:	bf 05       	cpc	r27, r15
    c1bc:	10 f4       	brcc	.+4      	; 0xc1c2 <f_lseek+0x1a8>
    c1be:	4c 01       	movw	r8, r24
    c1c0:	5d 01       	movw	r10, r26
    c1c2:	d1 01       	movw	r26, r2
    c1c4:	50 96       	adiw	r26, 0x10	; 16
    c1c6:	8d 92       	st	X+, r8
    c1c8:	9d 92       	st	X+, r9
    c1ca:	ad 92       	st	X+, r10
    c1cc:	bc 92       	st	X, r11
    c1ce:	53 97       	sbiw	r26, 0x13	; 19
    c1d0:	81 14       	cp	r8, r1
    c1d2:	91 04       	cpc	r9, r1
    c1d4:	a1 04       	cpc	r10, r1
    c1d6:	b1 04       	cpc	r11, r1
    c1d8:	09 f4       	brne	.+2      	; 0xc1dc <f_lseek+0x1c2>
    c1da:	eb c1       	rjmp	.+982    	; 0xc5b2 <f_lseek+0x598>
    c1dc:	24 01       	movw	r4, r8
    c1de:	35 01       	movw	r6, r10
    c1e0:	b1 e0       	ldi	r27, 0x01	; 1
    c1e2:	4b 1a       	sub	r4, r27
    c1e4:	51 08       	sbc	r5, r1
    c1e6:	61 08       	sbc	r6, r1
    c1e8:	71 08       	sbc	r7, r1
    c1ea:	b3 01       	movw	r22, r6
    c1ec:	a2 01       	movw	r20, r4
    c1ee:	c1 01       	movw	r24, r2
    c1f0:	0e 94 17 48 	call	0x902e	; 0x902e <clmt_clust>
    c1f4:	ab 01       	movw	r20, r22
    c1f6:	bc 01       	movw	r22, r24
    c1f8:	f1 01       	movw	r30, r2
    c1fa:	44 8b       	std	Z+20, r20	; 0x14
    c1fc:	55 8b       	std	Z+21, r21	; 0x15
    c1fe:	66 8b       	std	Z+22, r22	; 0x16
    c200:	77 8b       	std	Z+23, r23	; 0x17
    c202:	e9 80       	ldd	r14, Y+1	; 0x01
    c204:	fa 80       	ldd	r15, Y+2	; 0x02
    c206:	c7 01       	movw	r24, r14
    c208:	0e 94 ef 47 	call	0x8fde	; 0x8fde <clust2sect>
    c20c:	61 15       	cp	r22, r1
    c20e:	71 05       	cpc	r23, r1
    c210:	81 05       	cpc	r24, r1
    c212:	91 05       	cpc	r25, r1
    c214:	09 f4       	brne	.+2      	; 0xc218 <f_lseek+0x1fe>
    c216:	63 cf       	rjmp	.-314    	; 0xc0de <f_lseek+0xc4>
    c218:	95 01       	movw	r18, r10
    c21a:	84 01       	movw	r16, r8
    c21c:	11 70       	andi	r17, 0x01	; 1
    c21e:	22 27       	eor	r18, r18
    c220:	33 27       	eor	r19, r19
    c222:	01 15       	cp	r16, r1
    c224:	11 05       	cpc	r17, r1
    c226:	21 05       	cpc	r18, r1
    c228:	31 05       	cpc	r19, r1
    c22a:	09 f4       	brne	.+2      	; 0xc22e <f_lseek+0x214>
    c22c:	c2 c1       	rjmp	.+900    	; 0xc5b2 <f_lseek+0x598>
    c22e:	d7 01       	movw	r26, r14
    c230:	19 96       	adiw	r26, 0x09	; 9
    c232:	8d 90       	ld	r8, X+
    c234:	9c 90       	ld	r9, X
    c236:	1a 97       	sbiw	r26, 0x0a	; 10
    c238:	b1 e0       	ldi	r27, 0x01	; 1
    c23a:	8b 1a       	sub	r8, r27
    c23c:	91 08       	sbc	r9, r1
    c23e:	a1 2c       	mov	r10, r1
    c240:	b1 2c       	mov	r11, r1
    c242:	49 e0       	ldi	r20, 0x09	; 9
    c244:	76 94       	lsr	r7
    c246:	67 94       	ror	r6
    c248:	57 94       	ror	r5
    c24a:	47 94       	ror	r4
    c24c:	4a 95       	dec	r20
    c24e:	d1 f7       	brne	.-12     	; 0xc244 <f_lseek+0x22a>
    c250:	48 20       	and	r4, r8
    c252:	59 20       	and	r5, r9
    c254:	6a 20       	and	r6, r10
    c256:	7b 20       	and	r7, r11
    c258:	53 01       	movw	r10, r6
    c25a:	42 01       	movw	r8, r4
    c25c:	86 0e       	add	r8, r22
    c25e:	97 1e       	adc	r9, r23
    c260:	a8 1e       	adc	r10, r24
    c262:	b9 1e       	adc	r11, r25
    c264:	f1 01       	movw	r30, r2
    c266:	20 8d       	ldd	r18, Z+24	; 0x18
    c268:	31 8d       	ldd	r19, Z+25	; 0x19
    c26a:	42 8d       	ldd	r20, Z+26	; 0x1a
    c26c:	53 8d       	ldd	r21, Z+27	; 0x1b
    c26e:	82 16       	cp	r8, r18
    c270:	93 06       	cpc	r9, r19
    c272:	a4 06       	cpc	r10, r20
    c274:	b5 06       	cpc	r11, r21
    c276:	09 f4       	brne	.+2      	; 0xc27a <f_lseek+0x260>
    c278:	9c c1       	rjmp	.+824    	; 0xc5b2 <f_lseek+0x598>
    c27a:	86 85       	ldd	r24, Z+14	; 0x0e
    c27c:	b1 01       	movw	r22, r2
    c27e:	6c 5d       	subi	r22, 0xDC	; 220
    c280:	7f 4f       	sbci	r23, 0xFF	; 255
    c282:	6b 01       	movw	r12, r22
    c284:	87 ff       	sbrs	r24, 7
    c286:	0e c0       	rjmp	.+28     	; 0xc2a4 <f_lseek+0x28a>
    c288:	01 e0       	ldi	r16, 0x01	; 1
    c28a:	10 e0       	ldi	r17, 0x00	; 0
    c28c:	d7 01       	movw	r26, r14
    c28e:	11 96       	adiw	r26, 0x01	; 1
    c290:	8c 91       	ld	r24, X
    c292:	0e 94 95 69 	call	0xd32a	; 0xd32a <disk_write>
    c296:	89 2b       	or	r24, r25
    c298:	09 f0       	breq	.+2      	; 0xc29c <f_lseek+0x282>
    c29a:	2b cf       	rjmp	.-426    	; 0xc0f2 <f_lseek+0xd8>
    c29c:	f1 01       	movw	r30, r2
    c29e:	86 85       	ldd	r24, Z+14	; 0x0e
    c2a0:	8f 77       	andi	r24, 0x7F	; 127
    c2a2:	86 87       	std	Z+14, r24	; 0x0e
    c2a4:	e9 81       	ldd	r30, Y+1	; 0x01
    c2a6:	fa 81       	ldd	r31, Y+2	; 0x02
    c2a8:	01 e0       	ldi	r16, 0x01	; 1
    c2aa:	10 e0       	ldi	r17, 0x00	; 0
    c2ac:	a5 01       	movw	r20, r10
    c2ae:	94 01       	movw	r18, r8
    c2b0:	b6 01       	movw	r22, r12
    c2b2:	81 81       	ldd	r24, Z+1	; 0x01
    c2b4:	0e 94 85 69 	call	0xd30a	; 0xd30a <disk_read>
    c2b8:	89 2b       	or	r24, r25
    c2ba:	09 f0       	breq	.+2      	; 0xc2be <f_lseek+0x2a4>
    c2bc:	1a cf       	rjmp	.-460    	; 0xc0f2 <f_lseek+0xd8>
    c2be:	d1 01       	movw	r26, r2
    c2c0:	58 96       	adiw	r26, 0x18	; 24
    c2c2:	8d 92       	st	X+, r8
    c2c4:	9d 92       	st	X+, r9
    c2c6:	ad 92       	st	X+, r10
    c2c8:	bc 92       	st	X, r11
    c2ca:	5b 97       	sbiw	r26, 0x1b	; 27
    c2cc:	72 c1       	rjmp	.+740    	; 0xc5b2 <f_lseek+0x598>
    c2ce:	f1 01       	movw	r30, r2
    c2d0:	82 85       	ldd	r24, Z+10	; 0x0a
    c2d2:	93 85       	ldd	r25, Z+11	; 0x0b
    c2d4:	a4 85       	ldd	r26, Z+12	; 0x0c
    c2d6:	b5 85       	ldd	r27, Z+13	; 0x0d
    c2d8:	8c 15       	cp	r24, r12
    c2da:	9d 05       	cpc	r25, r13
    c2dc:	ae 05       	cpc	r26, r14
    c2de:	bf 05       	cpc	r27, r15
    c2e0:	28 f4       	brcc	.+10     	; 0xc2ec <f_lseek+0x2d2>
    c2e2:	26 85       	ldd	r18, Z+14	; 0x0e
    c2e4:	21 fd       	sbrc	r18, 1
    c2e6:	02 c0       	rjmp	.+4      	; 0xc2ec <f_lseek+0x2d2>
    c2e8:	6c 01       	movw	r12, r24
    c2ea:	7d 01       	movw	r14, r26
    c2ec:	d1 01       	movw	r26, r2
    c2ee:	50 96       	adiw	r26, 0x10	; 16
    c2f0:	4d 90       	ld	r4, X+
    c2f2:	5d 90       	ld	r5, X+
    c2f4:	6d 90       	ld	r6, X+
    c2f6:	7c 90       	ld	r7, X
    c2f8:	53 97       	sbiw	r26, 0x13	; 19
    c2fa:	f1 01       	movw	r30, r2
    c2fc:	10 8a       	std	Z+16, r1	; 0x10
    c2fe:	11 8a       	std	Z+17, r1	; 0x11
    c300:	12 8a       	std	Z+18, r1	; 0x12
    c302:	13 8a       	std	Z+19, r1	; 0x13
    c304:	c1 14       	cp	r12, r1
    c306:	d1 04       	cpc	r13, r1
    c308:	e1 04       	cpc	r14, r1
    c30a:	f1 04       	cpc	r15, r1
    c30c:	09 f4       	brne	.+2      	; 0xc310 <f_lseek+0x2f6>
    c30e:	55 c1       	rjmp	.+682    	; 0xc5ba <f_lseek+0x5a0>
    c310:	e9 81       	ldd	r30, Y+1	; 0x01
    c312:	fa 81       	ldd	r31, Y+2	; 0x02
    c314:	81 84       	ldd	r8, Z+9	; 0x09
    c316:	92 84       	ldd	r9, Z+10	; 0x0a
    c318:	a1 2c       	mov	r10, r1
    c31a:	b1 2c       	mov	r11, r1
    c31c:	39 e0       	ldi	r19, 0x09	; 9
    c31e:	88 0c       	add	r8, r8
    c320:	99 1c       	adc	r9, r9
    c322:	aa 1c       	adc	r10, r10
    c324:	bb 1c       	adc	r11, r11
    c326:	3a 95       	dec	r19
    c328:	d1 f7       	brne	.-12     	; 0xc31e <f_lseek+0x304>
    c32a:	41 14       	cp	r4, r1
    c32c:	51 04       	cpc	r5, r1
    c32e:	61 04       	cpc	r6, r1
    c330:	71 04       	cpc	r7, r1
    c332:	09 f4       	brne	.+2      	; 0xc336 <f_lseek+0x31c>
    c334:	3f c0       	rjmp	.+126    	; 0xc3b4 <f_lseek+0x39a>
    c336:	f1 e0       	ldi	r31, 0x01	; 1
    c338:	4f 1a       	sub	r4, r31
    c33a:	51 08       	sbc	r5, r1
    c33c:	61 08       	sbc	r6, r1
    c33e:	71 08       	sbc	r7, r1
    c340:	c7 01       	movw	r24, r14
    c342:	b6 01       	movw	r22, r12
    c344:	61 50       	subi	r22, 0x01	; 1
    c346:	71 09       	sbc	r23, r1
    c348:	81 09       	sbc	r24, r1
    c34a:	91 09       	sbc	r25, r1
    c34c:	a5 01       	movw	r20, r10
    c34e:	94 01       	movw	r18, r8
    c350:	0e 94 91 e7 	call	0x1cf22	; 0x1cf22 <__udivmodsi4>
    c354:	2b 83       	std	Y+3, r18	; 0x03
    c356:	3c 83       	std	Y+4, r19	; 0x04
    c358:	4d 83       	std	Y+5, r20	; 0x05
    c35a:	5e 83       	std	Y+6, r21	; 0x06
    c35c:	c3 01       	movw	r24, r6
    c35e:	b2 01       	movw	r22, r4
    c360:	a5 01       	movw	r20, r10
    c362:	94 01       	movw	r18, r8
    c364:	0e 94 91 e7 	call	0x1cf22	; 0x1cf22 <__udivmodsi4>
    c368:	6b 81       	ldd	r22, Y+3	; 0x03
    c36a:	7c 81       	ldd	r23, Y+4	; 0x04
    c36c:	8d 81       	ldd	r24, Y+5	; 0x05
    c36e:	9e 81       	ldd	r25, Y+6	; 0x06
    c370:	62 17       	cp	r22, r18
    c372:	73 07       	cpc	r23, r19
    c374:	84 07       	cpc	r24, r20
    c376:	95 07       	cpc	r25, r21
    c378:	e8 f0       	brcs	.+58     	; 0xc3b4 <f_lseek+0x39a>
    c37a:	88 27       	eor	r24, r24
    c37c:	99 27       	eor	r25, r25
    c37e:	dc 01       	movw	r26, r24
    c380:	88 19       	sub	r24, r8
    c382:	99 09       	sbc	r25, r9
    c384:	aa 09       	sbc	r26, r10
    c386:	bb 09       	sbc	r27, r11
    c388:	48 22       	and	r4, r24
    c38a:	59 22       	and	r5, r25
    c38c:	6a 22       	and	r6, r26
    c38e:	7b 22       	and	r7, r27
    c390:	d1 01       	movw	r26, r2
    c392:	50 96       	adiw	r26, 0x10	; 16
    c394:	4d 92       	st	X+, r4
    c396:	5d 92       	st	X+, r5
    c398:	6d 92       	st	X+, r6
    c39a:	7c 92       	st	X, r7
    c39c:	53 97       	sbiw	r26, 0x13	; 19
    c39e:	c4 18       	sub	r12, r4
    c3a0:	d5 08       	sbc	r13, r5
    c3a2:	e6 08       	sbc	r14, r6
    c3a4:	f7 08       	sbc	r15, r7
    c3a6:	54 96       	adiw	r26, 0x14	; 20
    c3a8:	4d 91       	ld	r20, X+
    c3aa:	5d 91       	ld	r21, X+
    c3ac:	6d 91       	ld	r22, X+
    c3ae:	7c 91       	ld	r23, X
    c3b0:	57 97       	sbiw	r26, 0x17	; 23
    c3b2:	2b c0       	rjmp	.+86     	; 0xc40a <f_lseek+0x3f0>
    c3b4:	f1 01       	movw	r30, r2
    c3b6:	46 81       	ldd	r20, Z+6	; 0x06
    c3b8:	57 81       	ldd	r21, Z+7	; 0x07
    c3ba:	60 85       	ldd	r22, Z+8	; 0x08
    c3bc:	71 85       	ldd	r23, Z+9	; 0x09
    c3be:	41 15       	cp	r20, r1
    c3c0:	51 05       	cpc	r21, r1
    c3c2:	61 05       	cpc	r22, r1
    c3c4:	71 05       	cpc	r23, r1
    c3c6:	e1 f4       	brne	.+56     	; 0xc400 <f_lseek+0x3e6>
    c3c8:	40 e0       	ldi	r20, 0x00	; 0
    c3ca:	50 e0       	ldi	r21, 0x00	; 0
    c3cc:	ba 01       	movw	r22, r20
    c3ce:	c1 01       	movw	r24, r2
    c3d0:	0e 94 3b 4f 	call	0x9e76	; 0x9e76 <create_chain>
    c3d4:	ab 01       	movw	r20, r22
    c3d6:	bc 01       	movw	r22, r24
    c3d8:	41 30       	cpi	r20, 0x01	; 1
    c3da:	51 05       	cpc	r21, r1
    c3dc:	61 05       	cpc	r22, r1
    c3de:	71 05       	cpc	r23, r1
    c3e0:	09 f4       	brne	.+2      	; 0xc3e4 <f_lseek+0x3ca>
    c3e2:	7d ce       	rjmp	.-774    	; 0xc0de <f_lseek+0xc4>
    c3e4:	4f 3f       	cpi	r20, 0xFF	; 255
    c3e6:	ff ef       	ldi	r31, 0xFF	; 255
    c3e8:	5f 07       	cpc	r21, r31
    c3ea:	6f 07       	cpc	r22, r31
    c3ec:	7f 07       	cpc	r23, r31
    c3ee:	09 f4       	brne	.+2      	; 0xc3f2 <f_lseek+0x3d8>
    c3f0:	80 ce       	rjmp	.-768    	; 0xc0f2 <f_lseek+0xd8>
    c3f2:	d1 01       	movw	r26, r2
    c3f4:	16 96       	adiw	r26, 0x06	; 6
    c3f6:	4d 93       	st	X+, r20
    c3f8:	5d 93       	st	X+, r21
    c3fa:	6d 93       	st	X+, r22
    c3fc:	7c 93       	st	X, r23
    c3fe:	19 97       	sbiw	r26, 0x09	; 9
    c400:	f1 01       	movw	r30, r2
    c402:	44 8b       	std	Z+20, r20	; 0x14
    c404:	55 8b       	std	Z+21, r21	; 0x15
    c406:	66 8b       	std	Z+22, r22	; 0x16
    c408:	77 8b       	std	Z+23, r23	; 0x17
    c40a:	41 15       	cp	r20, r1
    c40c:	51 05       	cpc	r21, r1
    c40e:	61 05       	cpc	r22, r1
    c410:	71 05       	cpc	r23, r1
    c412:	09 f0       	breq	.+2      	; 0xc416 <f_lseek+0x3fc>
    c414:	40 c0       	rjmp	.+128    	; 0xc496 <f_lseek+0x47c>
    c416:	c1 2c       	mov	r12, r1
    c418:	d1 2c       	mov	r13, r1
    c41a:	76 01       	movw	r14, r12
    c41c:	79 c0       	rjmp	.+242    	; 0xc510 <f_lseek+0x4f6>
    c41e:	c8 18       	sub	r12, r8
    c420:	d9 08       	sbc	r13, r9
    c422:	ea 08       	sbc	r14, r10
    c424:	fb 08       	sbc	r15, r11
    c426:	f1 01       	movw	r30, r2
    c428:	80 89       	ldd	r24, Z+16	; 0x10
    c42a:	91 89       	ldd	r25, Z+17	; 0x11
    c42c:	a2 89       	ldd	r26, Z+18	; 0x12
    c42e:	b3 89       	ldd	r27, Z+19	; 0x13
    c430:	88 0d       	add	r24, r8
    c432:	99 1d       	adc	r25, r9
    c434:	aa 1d       	adc	r26, r10
    c436:	bb 1d       	adc	r27, r11
    c438:	80 8b       	std	Z+16, r24	; 0x10
    c43a:	91 8b       	std	Z+17, r25	; 0x11
    c43c:	a2 8b       	std	Z+18, r26	; 0x12
    c43e:	b3 8b       	std	Z+19, r27	; 0x13
    c440:	86 85       	ldd	r24, Z+14	; 0x0e
    c442:	81 ff       	sbrs	r24, 1
    c444:	2f c0       	rjmp	.+94     	; 0xc4a4 <f_lseek+0x48a>
    c446:	c1 01       	movw	r24, r2
    c448:	0e 94 3b 4f 	call	0x9e76	; 0x9e76 <create_chain>
    c44c:	ab 01       	movw	r20, r22
    c44e:	bc 01       	movw	r22, r24
    c450:	41 15       	cp	r20, r1
    c452:	51 05       	cpc	r21, r1
    c454:	61 05       	cpc	r22, r1
    c456:	71 05       	cpc	r23, r1
    c458:	61 f1       	breq	.+88     	; 0xc4b2 <f_lseek+0x498>
    c45a:	4f 3f       	cpi	r20, 0xFF	; 255
    c45c:	bf ef       	ldi	r27, 0xFF	; 255
    c45e:	5b 07       	cpc	r21, r27
    c460:	6b 07       	cpc	r22, r27
    c462:	7b 07       	cpc	r23, r27
    c464:	09 f4       	brne	.+2      	; 0xc468 <f_lseek+0x44e>
    c466:	45 ce       	rjmp	.-886    	; 0xc0f2 <f_lseek+0xd8>
    c468:	42 30       	cpi	r20, 0x02	; 2
    c46a:	51 05       	cpc	r21, r1
    c46c:	61 05       	cpc	r22, r1
    c46e:	71 05       	cpc	r23, r1
    c470:	08 f4       	brcc	.+2      	; 0xc474 <f_lseek+0x45a>
    c472:	35 ce       	rjmp	.-918    	; 0xc0de <f_lseek+0xc4>
    c474:	e9 81       	ldd	r30, Y+1	; 0x01
    c476:	fa 81       	ldd	r31, Y+2	; 0x02
    c478:	81 8d       	ldd	r24, Z+25	; 0x19
    c47a:	92 8d       	ldd	r25, Z+26	; 0x1a
    c47c:	a3 8d       	ldd	r26, Z+27	; 0x1b
    c47e:	b4 8d       	ldd	r27, Z+28	; 0x1c
    c480:	48 17       	cp	r20, r24
    c482:	59 07       	cpc	r21, r25
    c484:	6a 07       	cpc	r22, r26
    c486:	7b 07       	cpc	r23, r27
    c488:	08 f0       	brcs	.+2      	; 0xc48c <f_lseek+0x472>
    c48a:	29 ce       	rjmp	.-942    	; 0xc0de <f_lseek+0xc4>
    c48c:	f1 01       	movw	r30, r2
    c48e:	44 8b       	std	Z+20, r20	; 0x14
    c490:	55 8b       	std	Z+21, r21	; 0x15
    c492:	66 8b       	std	Z+22, r22	; 0x16
    c494:	77 8b       	std	Z+23, r23	; 0x17
    c496:	8c 14       	cp	r8, r12
    c498:	9d 04       	cpc	r9, r13
    c49a:	ae 04       	cpc	r10, r14
    c49c:	bf 04       	cpc	r11, r15
    c49e:	08 f4       	brcc	.+2      	; 0xc4a2 <f_lseek+0x488>
    c4a0:	be cf       	rjmp	.-132    	; 0xc41e <f_lseek+0x404>
    c4a2:	0a c0       	rjmp	.+20     	; 0xc4b8 <f_lseek+0x49e>
    c4a4:	80 81       	ld	r24, Z
    c4a6:	91 81       	ldd	r25, Z+1	; 0x01
    c4a8:	0e 94 c8 4d 	call	0x9b90	; 0x9b90 <get_fat.isra.7>
    c4ac:	ab 01       	movw	r20, r22
    c4ae:	bc 01       	movw	r22, r24
    c4b0:	d4 cf       	rjmp	.-88     	; 0xc45a <f_lseek+0x440>
    c4b2:	c1 2c       	mov	r12, r1
    c4b4:	d1 2c       	mov	r13, r1
    c4b6:	76 01       	movw	r14, r12
    c4b8:	f1 01       	movw	r30, r2
    c4ba:	80 89       	ldd	r24, Z+16	; 0x10
    c4bc:	91 89       	ldd	r25, Z+17	; 0x11
    c4be:	a2 89       	ldd	r26, Z+18	; 0x12
    c4c0:	b3 89       	ldd	r27, Z+19	; 0x13
    c4c2:	8c 0d       	add	r24, r12
    c4c4:	9d 1d       	adc	r25, r13
    c4c6:	ae 1d       	adc	r26, r14
    c4c8:	bf 1d       	adc	r27, r15
    c4ca:	80 8b       	std	Z+16, r24	; 0x10
    c4cc:	91 8b       	std	Z+17, r25	; 0x11
    c4ce:	a2 8b       	std	Z+18, r26	; 0x12
    c4d0:	b3 8b       	std	Z+19, r27	; 0x13
    c4d2:	d7 01       	movw	r26, r14
    c4d4:	c6 01       	movw	r24, r12
    c4d6:	91 70       	andi	r25, 0x01	; 1
    c4d8:	aa 27       	eor	r26, r26
    c4da:	bb 27       	eor	r27, r27
    c4dc:	89 2b       	or	r24, r25
    c4de:	8a 2b       	or	r24, r26
    c4e0:	8b 2b       	or	r24, r27
    c4e2:	09 f4       	brne	.+2      	; 0xc4e6 <f_lseek+0x4cc>
    c4e4:	98 cf       	rjmp	.-208    	; 0xc416 <f_lseek+0x3fc>
    c4e6:	89 81       	ldd	r24, Y+1	; 0x01
    c4e8:	9a 81       	ldd	r25, Y+2	; 0x02
    c4ea:	0e 94 ef 47 	call	0x8fde	; 0x8fde <clust2sect>
    c4ee:	61 15       	cp	r22, r1
    c4f0:	71 05       	cpc	r23, r1
    c4f2:	81 05       	cpc	r24, r1
    c4f4:	91 05       	cpc	r25, r1
    c4f6:	09 f4       	brne	.+2      	; 0xc4fa <f_lseek+0x4e0>
    c4f8:	f2 cd       	rjmp	.-1052   	; 0xc0de <f_lseek+0xc4>
    c4fa:	29 e0       	ldi	r18, 0x09	; 9
    c4fc:	f6 94       	lsr	r15
    c4fe:	e7 94       	ror	r14
    c500:	d7 94       	ror	r13
    c502:	c7 94       	ror	r12
    c504:	2a 95       	dec	r18
    c506:	d1 f7       	brne	.-12     	; 0xc4fc <f_lseek+0x4e2>
    c508:	c6 0e       	add	r12, r22
    c50a:	d7 1e       	adc	r13, r23
    c50c:	e8 1e       	adc	r14, r24
    c50e:	f9 1e       	adc	r15, r25
    c510:	f1 01       	movw	r30, r2
    c512:	80 89       	ldd	r24, Z+16	; 0x10
    c514:	91 89       	ldd	r25, Z+17	; 0x11
    c516:	a2 89       	ldd	r26, Z+18	; 0x12
    c518:	b3 89       	ldd	r27, Z+19	; 0x13
    c51a:	42 85       	ldd	r20, Z+10	; 0x0a
    c51c:	53 85       	ldd	r21, Z+11	; 0x0b
    c51e:	64 85       	ldd	r22, Z+12	; 0x0c
    c520:	75 85       	ldd	r23, Z+13	; 0x0d
    c522:	48 17       	cp	r20, r24
    c524:	59 07       	cpc	r21, r25
    c526:	6a 07       	cpc	r22, r26
    c528:	7b 07       	cpc	r23, r27
    c52a:	38 f4       	brcc	.+14     	; 0xc53a <f_lseek+0x520>
    c52c:	82 87       	std	Z+10, r24	; 0x0a
    c52e:	93 87       	std	Z+11, r25	; 0x0b
    c530:	a4 87       	std	Z+12, r26	; 0x0c
    c532:	b5 87       	std	Z+13, r27	; 0x0d
    c534:	26 85       	ldd	r18, Z+14	; 0x0e
    c536:	20 64       	ori	r18, 0x40	; 64
    c538:	26 87       	std	Z+14, r18	; 0x0e
    c53a:	91 70       	andi	r25, 0x01	; 1
    c53c:	aa 27       	eor	r26, r26
    c53e:	bb 27       	eor	r27, r27
    c540:	89 2b       	or	r24, r25
    c542:	8a 2b       	or	r24, r26
    c544:	8b 2b       	or	r24, r27
    c546:	a9 f1       	breq	.+106    	; 0xc5b2 <f_lseek+0x598>
    c548:	d1 01       	movw	r26, r2
    c54a:	58 96       	adiw	r26, 0x18	; 24
    c54c:	2d 91       	ld	r18, X+
    c54e:	3d 91       	ld	r19, X+
    c550:	4d 91       	ld	r20, X+
    c552:	5c 91       	ld	r21, X
    c554:	5b 97       	sbiw	r26, 0x1b	; 27
    c556:	2c 15       	cp	r18, r12
    c558:	3d 05       	cpc	r19, r13
    c55a:	4e 05       	cpc	r20, r14
    c55c:	5f 05       	cpc	r21, r15
    c55e:	49 f1       	breq	.+82     	; 0xc5b2 <f_lseek+0x598>
    c560:	1e 96       	adiw	r26, 0x0e	; 14
    c562:	8c 91       	ld	r24, X
    c564:	f1 01       	movw	r30, r2
    c566:	b4 96       	adiw	r30, 0x24	; 36
    c568:	5f 01       	movw	r10, r30
    c56a:	87 ff       	sbrs	r24, 7
    c56c:	11 c0       	rjmp	.+34     	; 0xc590 <f_lseek+0x576>
    c56e:	e9 81       	ldd	r30, Y+1	; 0x01
    c570:	fa 81       	ldd	r31, Y+2	; 0x02
    c572:	01 e0       	ldi	r16, 0x01	; 1
    c574:	10 e0       	ldi	r17, 0x00	; 0
    c576:	b5 01       	movw	r22, r10
    c578:	81 81       	ldd	r24, Z+1	; 0x01
    c57a:	d7 d6       	rcall	.+3502   	; 0xd32a <disk_write>
    c57c:	89 2b       	or	r24, r25
    c57e:	09 f0       	breq	.+2      	; 0xc582 <f_lseek+0x568>
    c580:	b8 cd       	rjmp	.-1168   	; 0xc0f2 <f_lseek+0xd8>
    c582:	d1 01       	movw	r26, r2
    c584:	1e 96       	adiw	r26, 0x0e	; 14
    c586:	8c 91       	ld	r24, X
    c588:	1e 97       	sbiw	r26, 0x0e	; 14
    c58a:	8f 77       	andi	r24, 0x7F	; 127
    c58c:	1e 96       	adiw	r26, 0x0e	; 14
    c58e:	8c 93       	st	X, r24
    c590:	e9 81       	ldd	r30, Y+1	; 0x01
    c592:	fa 81       	ldd	r31, Y+2	; 0x02
    c594:	01 e0       	ldi	r16, 0x01	; 1
    c596:	10 e0       	ldi	r17, 0x00	; 0
    c598:	a7 01       	movw	r20, r14
    c59a:	96 01       	movw	r18, r12
    c59c:	b5 01       	movw	r22, r10
    c59e:	81 81       	ldd	r24, Z+1	; 0x01
    c5a0:	b4 d6       	rcall	.+3432   	; 0xd30a <disk_read>
    c5a2:	89 2b       	or	r24, r25
    c5a4:	09 f0       	breq	.+2      	; 0xc5a8 <f_lseek+0x58e>
    c5a6:	a5 cd       	rjmp	.-1206   	; 0xc0f2 <f_lseek+0xd8>
    c5a8:	f1 01       	movw	r30, r2
    c5aa:	c0 8e       	std	Z+24, r12	; 0x18
    c5ac:	d1 8e       	std	Z+25, r13	; 0x19
    c5ae:	e2 8e       	std	Z+26, r14	; 0x1a
    c5b0:	f3 8e       	std	Z+27, r15	; 0x1b
    c5b2:	80 e0       	ldi	r24, 0x00	; 0
    c5b4:	a2 cd       	rjmp	.-1212   	; 0xc0fa <f_lseek+0xe0>
    c5b6:	81 e1       	ldi	r24, 0x11	; 17
    c5b8:	a0 cd       	rjmp	.-1216   	; 0xc0fa <f_lseek+0xe0>
    c5ba:	80 e0       	ldi	r24, 0x00	; 0
    c5bc:	90 e0       	ldi	r25, 0x00	; 0
    c5be:	dc 01       	movw	r26, r24
    c5c0:	c1 2c       	mov	r12, r1
    c5c2:	d1 2c       	mov	r13, r1
    c5c4:	76 01       	movw	r14, r12
    c5c6:	b9 cf       	rjmp	.-142    	; 0xc53a <f_lseek+0x520>
    c5c8:	2a 96       	adiw	r28, 0x0a	; 10
    c5ca:	e2 e1       	ldi	r30, 0x12	; 18
    c5cc:	0c 94 2f e8 	jmp	0x1d05e	; 0x1d05e <__epilogue_restores__>

0000c5d0 <f_opendir>:
    c5d0:	a4 e0       	ldi	r26, 0x04	; 4
    c5d2:	b0 e0       	ldi	r27, 0x00	; 0
    c5d4:	ee ee       	ldi	r30, 0xEE	; 238
    c5d6:	f2 e6       	ldi	r31, 0x62	; 98
    c5d8:	0c 94 1d e8 	jmp	0x1d03a	; 0x1d03a <__prologue_saves__+0x14>
    c5dc:	7c 83       	std	Y+4, r23	; 0x04
    c5de:	6b 83       	std	Y+3, r22	; 0x03
    c5e0:	00 97       	sbiw	r24, 0x00	; 0
    c5e2:	09 f4       	brne	.+2      	; 0xc5e6 <f_opendir+0x16>
    c5e4:	48 c0       	rjmp	.+144    	; 0xc676 <f_opendir+0xa6>
    c5e6:	8c 01       	movw	r16, r24
    c5e8:	40 e0       	ldi	r20, 0x00	; 0
    c5ea:	be 01       	movw	r22, r28
    c5ec:	6f 5f       	subi	r22, 0xFF	; 255
    c5ee:	7f 4f       	sbci	r23, 0xFF	; 255
    c5f0:	ce 01       	movw	r24, r28
    c5f2:	03 96       	adiw	r24, 0x03	; 3
    c5f4:	0e 94 22 4a 	call	0x9444	; 0x9444 <find_volume>
    c5f8:	7c 01       	movw	r14, r24
    c5fa:	89 2b       	or	r24, r25
    c5fc:	b9 f5       	brne	.+110    	; 0xc66c <f_opendir+0x9c>
    c5fe:	89 81       	ldd	r24, Y+1	; 0x01
    c600:	9a 81       	ldd	r25, Y+2	; 0x02
    c602:	f8 01       	movw	r30, r16
    c604:	91 83       	std	Z+1, r25	; 0x01
    c606:	80 83       	st	Z, r24
    c608:	80 e0       	ldi	r24, 0x00	; 0
    c60a:	92 e0       	ldi	r25, 0x02	; 2
    c60c:	f1 d5       	rcall	.+3042   	; 0xd1f0 <ff_memalloc>
    c60e:	6c 01       	movw	r12, r24
    c610:	00 97       	sbiw	r24, 0x00	; 0
    c612:	99 f1       	breq	.+102    	; 0xc67a <f_opendir+0xaa>
    c614:	e9 81       	ldd	r30, Y+1	; 0x01
    c616:	fa 81       	ldd	r31, Y+2	; 0x02
    c618:	94 87       	std	Z+12, r25	; 0x0c
    c61a:	83 87       	std	Z+11, r24	; 0x0b
    c61c:	6b 81       	ldd	r22, Y+3	; 0x03
    c61e:	7c 81       	ldd	r23, Y+4	; 0x04
    c620:	c8 01       	movw	r24, r16
    c622:	0e 94 a8 56 	call	0xad50	; 0xad50 <follow_path>
    c626:	7c 01       	movw	r14, r24
    c628:	89 2b       	or	r24, r25
    c62a:	b9 f4       	brne	.+46     	; 0xc65a <f_opendir+0x8a>
    c62c:	f8 01       	movw	r30, r16
    c62e:	87 a1       	ldd	r24, Z+39	; 0x27
    c630:	87 fd       	sbrc	r24, 7
    c632:	28 c0       	rjmp	.+80     	; 0xc684 <f_opendir+0xb4>
    c634:	84 81       	ldd	r24, Z+4	; 0x04
    c636:	84 ff       	sbrs	r24, 4
    c638:	0d c0       	rjmp	.+26     	; 0xc654 <f_opendir+0x84>
    c63a:	62 8d       	ldd	r22, Z+26	; 0x1a
    c63c:	73 8d       	ldd	r23, Z+27	; 0x1b
    c63e:	e9 81       	ldd	r30, Y+1	; 0x01
    c640:	fa 81       	ldd	r31, Y+2	; 0x02
    c642:	80 81       	ld	r24, Z
    c644:	0e 94 ba 48 	call	0x9174	; 0x9174 <ld_clust.isra.1>
    c648:	f8 01       	movw	r30, r16
    c64a:	66 83       	std	Z+6, r22	; 0x06
    c64c:	77 83       	std	Z+7, r23	; 0x07
    c64e:	80 87       	std	Z+8, r24	; 0x08
    c650:	91 87       	std	Z+9, r25	; 0x09
    c652:	18 c0       	rjmp	.+48     	; 0xc684 <f_opendir+0xb4>
    c654:	95 e0       	ldi	r25, 0x05	; 5
    c656:	e9 2e       	mov	r14, r25
    c658:	f1 2c       	mov	r15, r1
    c65a:	c6 01       	movw	r24, r12
    c65c:	cc d5       	rcall	.+2968   	; 0xd1f6 <ff_memfree>
    c65e:	f4 e0       	ldi	r31, 0x04	; 4
    c660:	ef 16       	cp	r14, r31
    c662:	f1 04       	cpc	r15, r1
    c664:	f1 f0       	breq	.+60     	; 0xc6a2 <f_opendir+0xd2>
    c666:	e1 14       	cp	r14, r1
    c668:	f1 04       	cpc	r15, r1
    c66a:	49 f0       	breq	.+18     	; 0xc67e <f_opendir+0xae>
    c66c:	f8 01       	movw	r30, r16
    c66e:	11 82       	std	Z+1, r1	; 0x01
    c670:	10 82       	st	Z, r1
    c672:	c7 01       	movw	r24, r14
    c674:	1a c0       	rjmp	.+52     	; 0xc6aa <f_opendir+0xda>
    c676:	89 e0       	ldi	r24, 0x09	; 9
    c678:	03 c0       	rjmp	.+6      	; 0xc680 <f_opendir+0xb0>
    c67a:	81 e1       	ldi	r24, 0x11	; 17
    c67c:	01 c0       	rjmp	.+2      	; 0xc680 <f_opendir+0xb0>
    c67e:	80 e0       	ldi	r24, 0x00	; 0
    c680:	90 e0       	ldi	r25, 0x00	; 0
    c682:	13 c0       	rjmp	.+38     	; 0xc6aa <f_opendir+0xda>
    c684:	e9 81       	ldd	r30, Y+1	; 0x01
    c686:	fa 81       	ldd	r31, Y+2	; 0x02
    c688:	85 81       	ldd	r24, Z+5	; 0x05
    c68a:	96 81       	ldd	r25, Z+6	; 0x06
    c68c:	f8 01       	movw	r30, r16
    c68e:	93 83       	std	Z+3, r25	; 0x03
    c690:	82 83       	std	Z+2, r24	; 0x02
    c692:	40 e0       	ldi	r20, 0x00	; 0
    c694:	50 e0       	ldi	r21, 0x00	; 0
    c696:	ba 01       	movw	r22, r20
    c698:	c8 01       	movw	r24, r16
    c69a:	0e 94 7b 4e 	call	0x9cf6	; 0x9cf6 <dir_sdi>
    c69e:	7c 01       	movw	r14, r24
    c6a0:	dc cf       	rjmp	.-72     	; 0xc65a <f_opendir+0x8a>
    c6a2:	85 e0       	ldi	r24, 0x05	; 5
    c6a4:	e8 2e       	mov	r14, r24
    c6a6:	f1 2c       	mov	r15, r1
    c6a8:	e1 cf       	rjmp	.-62     	; 0xc66c <f_opendir+0x9c>
    c6aa:	24 96       	adiw	r28, 0x04	; 4
    c6ac:	e8 e0       	ldi	r30, 0x08	; 8
    c6ae:	0c 94 39 e8 	jmp	0x1d072	; 0x1d072 <__epilogue_restores__+0x14>

0000c6b2 <f_closedir>:
    c6b2:	a2 e0       	ldi	r26, 0x02	; 2
    c6b4:	b0 e0       	ldi	r27, 0x00	; 0
    c6b6:	ef e5       	ldi	r30, 0x5F	; 95
    c6b8:	f3 e6       	ldi	r31, 0x63	; 99
    c6ba:	0c 94 21 e8 	jmp	0x1d042	; 0x1d042 <__prologue_saves__+0x1c>
    c6be:	8c 01       	movw	r16, r24
    c6c0:	be 01       	movw	r22, r28
    c6c2:	6f 5f       	subi	r22, 0xFF	; 255
    c6c4:	7f 4f       	sbci	r23, 0xFF	; 255
    c6c6:	0e 94 82 48 	call	0x9104	; 0x9104 <validate>
    c6ca:	00 97       	sbiw	r24, 0x00	; 0
    c6cc:	19 f4       	brne	.+6      	; 0xc6d4 <f_closedir+0x22>
    c6ce:	f8 01       	movw	r30, r16
    c6d0:	11 82       	std	Z+1, r1	; 0x01
    c6d2:	10 82       	st	Z, r1
    c6d4:	22 96       	adiw	r28, 0x02	; 2
    c6d6:	e4 e0       	ldi	r30, 0x04	; 4
    c6d8:	0c 94 3d e8 	jmp	0x1d07a	; 0x1d07a <__epilogue_restores__+0x1c>

0000c6dc <f_readdir>:
    c6dc:	a2 e0       	ldi	r26, 0x02	; 2
    c6de:	b0 e0       	ldi	r27, 0x00	; 0
    c6e0:	e4 e7       	ldi	r30, 0x74	; 116
    c6e2:	f3 e6       	ldi	r31, 0x63	; 99
    c6e4:	0c 94 1b e8 	jmp	0x1d036	; 0x1d036 <__prologue_saves__+0x10>
    c6e8:	7c 01       	movw	r14, r24
    c6ea:	5b 01       	movw	r10, r22
    c6ec:	be 01       	movw	r22, r28
    c6ee:	6f 5f       	subi	r22, 0xFF	; 255
    c6f0:	7f 4f       	sbci	r23, 0xFF	; 255
    c6f2:	0e 94 82 48 	call	0x9104	; 0x9104 <validate>
    c6f6:	00 97       	sbiw	r24, 0x00	; 0
    c6f8:	89 f5       	brne	.+98     	; 0xc75c <f_readdir+0x80>
    c6fa:	a1 14       	cp	r10, r1
    c6fc:	b1 04       	cpc	r11, r1
    c6fe:	39 f4       	brne	.+14     	; 0xc70e <f_readdir+0x32>
    c700:	40 e0       	ldi	r20, 0x00	; 0
    c702:	50 e0       	ldi	r21, 0x00	; 0
    c704:	ba 01       	movw	r22, r20
    c706:	c7 01       	movw	r24, r14
    c708:	0e 94 7b 4e 	call	0x9cf6	; 0x9cf6 <dir_sdi>
    c70c:	27 c0       	rjmp	.+78     	; 0xc75c <f_readdir+0x80>
    c70e:	80 e0       	ldi	r24, 0x00	; 0
    c710:	92 e0       	ldi	r25, 0x02	; 2
    c712:	6e d5       	rcall	.+2780   	; 0xd1f0 <ff_memalloc>
    c714:	6c 01       	movw	r12, r24
    c716:	00 97       	sbiw	r24, 0x00	; 0
    c718:	f9 f0       	breq	.+62     	; 0xc758 <f_readdir+0x7c>
    c71a:	e9 81       	ldd	r30, Y+1	; 0x01
    c71c:	fa 81       	ldd	r31, Y+2	; 0x02
    c71e:	94 87       	std	Z+12, r25	; 0x0c
    c720:	83 87       	std	Z+11, r24	; 0x0b
    c722:	60 e0       	ldi	r22, 0x00	; 0
    c724:	70 e0       	ldi	r23, 0x00	; 0
    c726:	c7 01       	movw	r24, r14
    c728:	0e 94 d7 52 	call	0xa5ae	; 0xa5ae <dir_read>
    c72c:	8c 01       	movw	r16, r24
    c72e:	8b 7f       	andi	r24, 0xFB	; 251
    c730:	89 2b       	or	r24, r25
    c732:	71 f4       	brne	.+28     	; 0xc750 <f_readdir+0x74>
    c734:	b5 01       	movw	r22, r10
    c736:	c7 01       	movw	r24, r14
    c738:	0e 94 9d 50 	call	0xa13a	; 0xa13a <get_fileinfo>
    c73c:	60 e0       	ldi	r22, 0x00	; 0
    c73e:	70 e0       	ldi	r23, 0x00	; 0
    c740:	c7 01       	movw	r24, r14
    c742:	0e 94 75 51 	call	0xa2ea	; 0xa2ea <dir_next>
    c746:	8c 01       	movw	r16, r24
    c748:	04 97       	sbiw	r24, 0x04	; 4
    c74a:	11 f4       	brne	.+4      	; 0xc750 <f_readdir+0x74>
    c74c:	00 e0       	ldi	r16, 0x00	; 0
    c74e:	10 e0       	ldi	r17, 0x00	; 0
    c750:	c6 01       	movw	r24, r12
    c752:	51 d5       	rcall	.+2722   	; 0xd1f6 <ff_memfree>
    c754:	c8 01       	movw	r24, r16
    c756:	02 c0       	rjmp	.+4      	; 0xc75c <f_readdir+0x80>
    c758:	81 e1       	ldi	r24, 0x11	; 17
    c75a:	90 e0       	ldi	r25, 0x00	; 0
    c75c:	22 96       	adiw	r28, 0x02	; 2
    c75e:	ea e0       	ldi	r30, 0x0A	; 10
    c760:	0c 94 37 e8 	jmp	0x1d06e	; 0x1d06e <__epilogue_restores__+0x10>

0000c764 <f_stat>:
    c764:	a0 e3       	ldi	r26, 0x30	; 48
    c766:	b0 e0       	ldi	r27, 0x00	; 0
    c768:	e8 eb       	ldi	r30, 0xB8	; 184
    c76a:	f3 e6       	ldi	r31, 0x63	; 99
    c76c:	0c 94 1d e8 	jmp	0x1d03a	; 0x1d03a <__prologue_saves__+0x14>
    c770:	98 ab       	std	Y+48, r25	; 0x30
    c772:	8f a7       	std	Y+47, r24	; 0x2f
    c774:	6b 01       	movw	r12, r22
    c776:	40 e0       	ldi	r20, 0x00	; 0
    c778:	be 01       	movw	r22, r28
    c77a:	6f 5f       	subi	r22, 0xFF	; 255
    c77c:	7f 4f       	sbci	r23, 0xFF	; 255
    c77e:	ce 01       	movw	r24, r28
    c780:	8f 96       	adiw	r24, 0x2f	; 47
    c782:	0e 94 22 4a 	call	0x9444	; 0x9444 <find_volume>
    c786:	00 97       	sbiw	r24, 0x00	; 0
    c788:	39 f5       	brne	.+78     	; 0xc7d8 <f_stat+0x74>
    c78a:	80 e0       	ldi	r24, 0x00	; 0
    c78c:	92 e0       	ldi	r25, 0x02	; 2
    c78e:	30 d5       	rcall	.+2656   	; 0xd1f0 <ff_memalloc>
    c790:	7c 01       	movw	r14, r24
    c792:	00 97       	sbiw	r24, 0x00	; 0
    c794:	f9 f0       	breq	.+62     	; 0xc7d4 <f_stat+0x70>
    c796:	e9 81       	ldd	r30, Y+1	; 0x01
    c798:	fa 81       	ldd	r31, Y+2	; 0x02
    c79a:	94 87       	std	Z+12, r25	; 0x0c
    c79c:	83 87       	std	Z+11, r24	; 0x0b
    c79e:	6f a5       	ldd	r22, Y+47	; 0x2f
    c7a0:	78 a9       	ldd	r23, Y+48	; 0x30
    c7a2:	ce 01       	movw	r24, r28
    c7a4:	01 96       	adiw	r24, 0x01	; 1
    c7a6:	0e 94 a8 56 	call	0xad50	; 0xad50 <follow_path>
    c7aa:	8c 01       	movw	r16, r24
    c7ac:	89 2b       	or	r24, r25
    c7ae:	71 f4       	brne	.+28     	; 0xc7cc <f_stat+0x68>
    c7b0:	88 a5       	ldd	r24, Y+40	; 0x28
    c7b2:	87 fd       	sbrc	r24, 7
    c7b4:	09 c0       	rjmp	.+18     	; 0xc7c8 <f_stat+0x64>
    c7b6:	c1 14       	cp	r12, r1
    c7b8:	d1 04       	cpc	r13, r1
    c7ba:	41 f0       	breq	.+16     	; 0xc7cc <f_stat+0x68>
    c7bc:	b6 01       	movw	r22, r12
    c7be:	ce 01       	movw	r24, r28
    c7c0:	01 96       	adiw	r24, 0x01	; 1
    c7c2:	0e 94 9d 50 	call	0xa13a	; 0xa13a <get_fileinfo>
    c7c6:	02 c0       	rjmp	.+4      	; 0xc7cc <f_stat+0x68>
    c7c8:	06 e0       	ldi	r16, 0x06	; 6
    c7ca:	10 e0       	ldi	r17, 0x00	; 0
    c7cc:	c7 01       	movw	r24, r14
    c7ce:	13 d5       	rcall	.+2598   	; 0xd1f6 <ff_memfree>
    c7d0:	c8 01       	movw	r24, r16
    c7d2:	02 c0       	rjmp	.+4      	; 0xc7d8 <f_stat+0x74>
    c7d4:	81 e1       	ldi	r24, 0x11	; 17
    c7d6:	90 e0       	ldi	r25, 0x00	; 0
    c7d8:	e0 96       	adiw	r28, 0x30	; 48
    c7da:	e8 e0       	ldi	r30, 0x08	; 8
    c7dc:	0c 94 39 e8 	jmp	0x1d072	; 0x1d072 <__epilogue_restores__+0x14>

0000c7e0 <f_getfree>:
    c7e0:	ac e0       	ldi	r26, 0x0C	; 12
    c7e2:	b0 e0       	ldi	r27, 0x00	; 0
    c7e4:	e6 ef       	ldi	r30, 0xF6	; 246
    c7e6:	f3 e6       	ldi	r31, 0x63	; 99
    c7e8:	0c 94 13 e8 	jmp	0x1d026	; 0x1d026 <__prologue_saves__>
    c7ec:	9c 83       	std	Y+4, r25	; 0x04
    c7ee:	8b 83       	std	Y+3, r24	; 0x03
    c7f0:	78 87       	std	Y+8, r23	; 0x08
    c7f2:	6f 83       	std	Y+7, r22	; 0x07
    c7f4:	7a 01       	movw	r14, r20
    c7f6:	40 e0       	ldi	r20, 0x00	; 0
    c7f8:	be 01       	movw	r22, r28
    c7fa:	6f 5f       	subi	r22, 0xFF	; 255
    c7fc:	7f 4f       	sbci	r23, 0xFF	; 255
    c7fe:	ce 01       	movw	r24, r28
    c800:	03 96       	adiw	r24, 0x03	; 3
    c802:	0e 94 22 4a 	call	0x9444	; 0x9444 <find_volume>
    c806:	9e 83       	std	Y+6, r25	; 0x06
    c808:	8d 83       	std	Y+5, r24	; 0x05
    c80a:	89 2b       	or	r24, r25
    c80c:	09 f0       	breq	.+2      	; 0xc810 <f_getfree+0x30>
    c80e:	cf c0       	rjmp	.+414    	; 0xc9ae <f_getfree+0x1ce>
    c810:	69 80       	ldd	r6, Y+1	; 0x01
    c812:	7a 80       	ldd	r7, Y+2	; 0x02
    c814:	d7 01       	movw	r26, r14
    c816:	6d 92       	st	X+, r6
    c818:	7c 92       	st	X, r7
    c81a:	f3 01       	movw	r30, r6
    c81c:	81 89       	ldd	r24, Z+17	; 0x11
    c81e:	92 89       	ldd	r25, Z+18	; 0x12
    c820:	a3 89       	ldd	r26, Z+19	; 0x13
    c822:	b4 89       	ldd	r27, Z+20	; 0x14
    c824:	81 8c       	ldd	r8, Z+25	; 0x19
    c826:	92 8c       	ldd	r9, Z+26	; 0x1a
    c828:	a3 8c       	ldd	r10, Z+27	; 0x1b
    c82a:	b4 8c       	ldd	r11, Z+28	; 0x1c
    c82c:	b5 01       	movw	r22, r10
    c82e:	a4 01       	movw	r20, r8
    c830:	42 50       	subi	r20, 0x02	; 2
    c832:	51 09       	sbc	r21, r1
    c834:	61 09       	sbc	r22, r1
    c836:	71 09       	sbc	r23, r1
    c838:	48 17       	cp	r20, r24
    c83a:	59 07       	cpc	r21, r25
    c83c:	6a 07       	cpc	r22, r26
    c83e:	7b 07       	cpc	r23, r27
    c840:	38 f0       	brcs	.+14     	; 0xc850 <f_getfree+0x70>
    c842:	ef 81       	ldd	r30, Y+7	; 0x07
    c844:	f8 85       	ldd	r31, Y+8	; 0x08
    c846:	80 83       	st	Z, r24
    c848:	91 83       	std	Z+1, r25	; 0x01
    c84a:	a2 83       	std	Z+2, r26	; 0x02
    c84c:	b3 83       	std	Z+3, r27	; 0x03
    c84e:	af c0       	rjmp	.+350    	; 0xc9ae <f_getfree+0x1ce>
    c850:	80 81       	ld	r24, Z
    c852:	81 30       	cpi	r24, 0x01	; 1
    c854:	a1 f5       	brne	.+104    	; 0xc8be <f_getfree+0xde>
    c856:	82 e0       	ldi	r24, 0x02	; 2
    c858:	88 2e       	mov	r8, r24
    c85a:	91 2c       	mov	r9, r1
    c85c:	a1 2c       	mov	r10, r1
    c85e:	b1 2c       	mov	r11, r1
    c860:	c1 2c       	mov	r12, r1
    c862:	d1 2c       	mov	r13, r1
    c864:	76 01       	movw	r14, r12
    c866:	b5 01       	movw	r22, r10
    c868:	a4 01       	movw	r20, r8
    c86a:	c3 01       	movw	r24, r6
    c86c:	0e 94 c8 4d 	call	0x9b90	; 0x9b90 <get_fat.isra.7>
    c870:	6f 3f       	cpi	r22, 0xFF	; 255
    c872:	bf ef       	ldi	r27, 0xFF	; 255
    c874:	7b 07       	cpc	r23, r27
    c876:	8b 07       	cpc	r24, r27
    c878:	9b 07       	cpc	r25, r27
    c87a:	09 f4       	brne	.+2      	; 0xc87e <f_getfree+0x9e>
    c87c:	7c c0       	rjmp	.+248    	; 0xc976 <f_getfree+0x196>
    c87e:	61 30       	cpi	r22, 0x01	; 1
    c880:	71 05       	cpc	r23, r1
    c882:	81 05       	cpc	r24, r1
    c884:	91 05       	cpc	r25, r1
    c886:	09 f4       	brne	.+2      	; 0xc88a <f_getfree+0xaa>
    c888:	7b c0       	rjmp	.+246    	; 0xc980 <f_getfree+0x1a0>
    c88a:	67 2b       	or	r22, r23
    c88c:	68 2b       	or	r22, r24
    c88e:	69 2b       	or	r22, r25
    c890:	29 f4       	brne	.+10     	; 0xc89c <f_getfree+0xbc>
    c892:	ef ef       	ldi	r30, 0xFF	; 255
    c894:	ce 1a       	sub	r12, r30
    c896:	de 0a       	sbc	r13, r30
    c898:	ee 0a       	sbc	r14, r30
    c89a:	fe 0a       	sbc	r15, r30
    c89c:	ff ef       	ldi	r31, 0xFF	; 255
    c89e:	8f 1a       	sub	r8, r31
    c8a0:	9f 0a       	sbc	r9, r31
    c8a2:	af 0a       	sbc	r10, r31
    c8a4:	bf 0a       	sbc	r11, r31
    c8a6:	e9 81       	ldd	r30, Y+1	; 0x01
    c8a8:	fa 81       	ldd	r31, Y+2	; 0x02
    c8aa:	81 8d       	ldd	r24, Z+25	; 0x19
    c8ac:	92 8d       	ldd	r25, Z+26	; 0x1a
    c8ae:	a3 8d       	ldd	r26, Z+27	; 0x1b
    c8b0:	b4 8d       	ldd	r27, Z+28	; 0x1c
    c8b2:	88 16       	cp	r8, r24
    c8b4:	99 06       	cpc	r9, r25
    c8b6:	aa 06       	cpc	r10, r26
    c8b8:	bb 06       	cpc	r11, r27
    c8ba:	a8 f2       	brcs	.-86     	; 0xc866 <f_getfree+0x86>
    c8bc:	68 c0       	rjmp	.+208    	; 0xc98e <f_getfree+0x1ae>
    c8be:	45 a0       	ldd	r4, Z+37	; 0x25
    c8c0:	56 a0       	ldd	r5, Z+38	; 0x26
    c8c2:	67 a0       	ldd	r6, Z+39	; 0x27
    c8c4:	70 a4       	ldd	r7, Z+40	; 0x28
    c8c6:	21 2c       	mov	r2, r1
    c8c8:	31 2c       	mov	r3, r1
    c8ca:	00 e0       	ldi	r16, 0x00	; 0
    c8cc:	10 e0       	ldi	r17, 0x00	; 0
    c8ce:	c1 2c       	mov	r12, r1
    c8d0:	d1 2c       	mov	r13, r1
    c8d2:	76 01       	movw	r14, r12
    c8d4:	01 15       	cp	r16, r1
    c8d6:	11 05       	cpc	r17, r1
    c8d8:	e9 f4       	brne	.+58     	; 0xc914 <f_getfree+0x134>
    c8da:	d3 01       	movw	r26, r6
    c8dc:	c2 01       	movw	r24, r4
    c8de:	01 96       	adiw	r24, 0x01	; 1
    c8e0:	a1 1d       	adc	r26, r1
    c8e2:	b1 1d       	adc	r27, r1
    c8e4:	89 87       	std	Y+9, r24	; 0x09
    c8e6:	9a 87       	std	Y+10, r25	; 0x0a
    c8e8:	ab 87       	std	Y+11, r26	; 0x0b
    c8ea:	bc 87       	std	Y+12, r27	; 0x0c
    c8ec:	b3 01       	movw	r22, r6
    c8ee:	a2 01       	movw	r20, r4
    c8f0:	89 81       	ldd	r24, Y+1	; 0x01
    c8f2:	9a 81       	ldd	r25, Y+2	; 0x02
    c8f4:	0e 94 a2 49 	call	0x9344	; 0x9344 <move_window>
    c8f8:	00 97       	sbiw	r24, 0x00	; 0
    c8fa:	09 f0       	breq	.+2      	; 0xc8fe <f_getfree+0x11e>
    c8fc:	46 c0       	rjmp	.+140    	; 0xc98a <f_getfree+0x1aa>
    c8fe:	29 80       	ldd	r2, Y+1	; 0x01
    c900:	3a 80       	ldd	r3, Y+2	; 0x02
    c902:	95 e3       	ldi	r25, 0x35	; 53
    c904:	29 0e       	add	r2, r25
    c906:	31 1c       	adc	r3, r1
    c908:	49 84       	ldd	r4, Y+9	; 0x09
    c90a:	5a 84       	ldd	r5, Y+10	; 0x0a
    c90c:	6b 84       	ldd	r6, Y+11	; 0x0b
    c90e:	7c 84       	ldd	r7, Y+12	; 0x0c
    c910:	00 e0       	ldi	r16, 0x00	; 0
    c912:	12 e0       	ldi	r17, 0x02	; 2
    c914:	e9 81       	ldd	r30, Y+1	; 0x01
    c916:	fa 81       	ldd	r31, Y+2	; 0x02
    c918:	80 81       	ld	r24, Z
    c91a:	82 30       	cpi	r24, 0x02	; 2
    c91c:	81 f4       	brne	.+32     	; 0xc93e <f_getfree+0x15e>
    c91e:	d1 01       	movw	r26, r2
    c920:	8d 91       	ld	r24, X+
    c922:	9c 91       	ld	r25, X
    c924:	89 2b       	or	r24, r25
    c926:	29 f4       	brne	.+10     	; 0xc932 <f_getfree+0x152>
    c928:	bf ef       	ldi	r27, 0xFF	; 255
    c92a:	cb 1a       	sub	r12, r27
    c92c:	db 0a       	sbc	r13, r27
    c92e:	eb 0a       	sbc	r14, r27
    c930:	fb 0a       	sbc	r15, r27
    c932:	e2 e0       	ldi	r30, 0x02	; 2
    c934:	2e 0e       	add	r2, r30
    c936:	31 1c       	adc	r3, r1
    c938:	02 50       	subi	r16, 0x02	; 2
    c93a:	11 09       	sbc	r17, r1
    c93c:	14 c0       	rjmp	.+40     	; 0xc966 <f_getfree+0x186>
    c93e:	c1 01       	movw	r24, r2
    c940:	0e 94 cb 47 	call	0x8f96	; 0x8f96 <ld_dword>
    c944:	dc 01       	movw	r26, r24
    c946:	cb 01       	movw	r24, r22
    c948:	bf 70       	andi	r27, 0x0F	; 15
    c94a:	89 2b       	or	r24, r25
    c94c:	8a 2b       	or	r24, r26
    c94e:	8b 2b       	or	r24, r27
    c950:	29 f4       	brne	.+10     	; 0xc95c <f_getfree+0x17c>
    c952:	ff ef       	ldi	r31, 0xFF	; 255
    c954:	cf 1a       	sub	r12, r31
    c956:	df 0a       	sbc	r13, r31
    c958:	ef 0a       	sbc	r14, r31
    c95a:	ff 0a       	sbc	r15, r31
    c95c:	24 e0       	ldi	r18, 0x04	; 4
    c95e:	22 0e       	add	r2, r18
    c960:	31 1c       	adc	r3, r1
    c962:	04 50       	subi	r16, 0x04	; 4
    c964:	11 09       	sbc	r17, r1
    c966:	81 e0       	ldi	r24, 0x01	; 1
    c968:	88 1a       	sub	r8, r24
    c96a:	91 08       	sbc	r9, r1
    c96c:	a1 08       	sbc	r10, r1
    c96e:	b1 08       	sbc	r11, r1
    c970:	09 f0       	breq	.+2      	; 0xc974 <f_getfree+0x194>
    c972:	b0 cf       	rjmp	.-160    	; 0xc8d4 <f_getfree+0xf4>
    c974:	0c c0       	rjmp	.+24     	; 0xc98e <f_getfree+0x1ae>
    c976:	a1 e0       	ldi	r26, 0x01	; 1
    c978:	b0 e0       	ldi	r27, 0x00	; 0
    c97a:	be 83       	std	Y+6, r27	; 0x06
    c97c:	ad 83       	std	Y+5, r26	; 0x05
    c97e:	07 c0       	rjmp	.+14     	; 0xc98e <f_getfree+0x1ae>
    c980:	e2 e0       	ldi	r30, 0x02	; 2
    c982:	f0 e0       	ldi	r31, 0x00	; 0
    c984:	fe 83       	std	Y+6, r31	; 0x06
    c986:	ed 83       	std	Y+5, r30	; 0x05
    c988:	02 c0       	rjmp	.+4      	; 0xc98e <f_getfree+0x1ae>
    c98a:	9e 83       	std	Y+6, r25	; 0x06
    c98c:	8d 83       	std	Y+5, r24	; 0x05
    c98e:	af 81       	ldd	r26, Y+7	; 0x07
    c990:	b8 85       	ldd	r27, Y+8	; 0x08
    c992:	cd 92       	st	X+, r12
    c994:	dd 92       	st	X+, r13
    c996:	ed 92       	st	X+, r14
    c998:	fc 92       	st	X, r15
    c99a:	13 97       	sbiw	r26, 0x03	; 3
    c99c:	e9 81       	ldd	r30, Y+1	; 0x01
    c99e:	fa 81       	ldd	r31, Y+2	; 0x02
    c9a0:	c1 8a       	std	Z+17, r12	; 0x11
    c9a2:	d2 8a       	std	Z+18, r13	; 0x12
    c9a4:	e3 8a       	std	Z+19, r14	; 0x13
    c9a6:	f4 8a       	std	Z+20, r15	; 0x14
    c9a8:	84 81       	ldd	r24, Z+4	; 0x04
    c9aa:	81 60       	ori	r24, 0x01	; 1
    c9ac:	84 83       	std	Z+4, r24	; 0x04
    c9ae:	8d 81       	ldd	r24, Y+5	; 0x05
    c9b0:	9e 81       	ldd	r25, Y+6	; 0x06
    c9b2:	2c 96       	adiw	r28, 0x0c	; 12
    c9b4:	e2 e1       	ldi	r30, 0x12	; 18
    c9b6:	0c 94 2f e8 	jmp	0x1d05e	; 0x1d05e <__epilogue_restores__>

0000c9ba <f_unlink>:

MEMSPACE
FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
    c9ba:	a0 e6       	ldi	r26, 0x60	; 96
    c9bc:	b0 e0       	ldi	r27, 0x00	; 0
    c9be:	e3 ee       	ldi	r30, 0xE3	; 227
    c9c0:	f4 e6       	ldi	r31, 0x64	; 100
    c9c2:	0c 94 1a e8 	jmp	0x1d034	; 0x1d034 <__prologue_saves__+0xe>
    c9c6:	a1 96       	adiw	r28, 0x21	; 33
    c9c8:	9f af       	std	Y+63, r25	; 0x3f
    c9ca:	8e af       	std	Y+62, r24	; 0x3e
    c9cc:	a1 97       	sbiw	r28, 0x21	; 33
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
    c9ce:	42 e0       	ldi	r20, 0x02	; 2
    c9d0:	be 01       	movw	r22, r28
    c9d2:	63 5a       	subi	r22, 0xA3	; 163
    c9d4:	7f 4f       	sbci	r23, 0xFF	; 255
    c9d6:	ce 01       	movw	r24, r28
    c9d8:	81 5a       	subi	r24, 0xA1	; 161
    c9da:	9f 4f       	sbci	r25, 0xFF	; 255
    c9dc:	0e 94 22 4a 	call	0x9444	; 0x9444 <find_volume>
	dj.obj.fs = fs;
    c9e0:	6f 96       	adiw	r28, 0x1f	; 31
    c9e2:	2e ad       	ldd	r18, Y+62	; 0x3e
    c9e4:	3f ad       	ldd	r19, Y+63	; 0x3f
    c9e6:	6f 97       	sbiw	r28, 0x1f	; 31
    c9e8:	38 ab       	std	Y+48, r19	; 0x30
    c9ea:	2f a7       	std	Y+47, r18	; 0x2f
	if (res == FR_OK) {
    c9ec:	00 97       	sbiw	r24, 0x00	; 0
    c9ee:	09 f0       	breq	.+2      	; 0xc9f2 <f_unlink+0x38>
    c9f0:	86 c0       	rjmp	.+268    	; 0xcafe <f_unlink+0x144>
		INIT_NAMBUF(fs);
    c9f2:	80 e0       	ldi	r24, 0x00	; 0
    c9f4:	92 e0       	ldi	r25, 0x02	; 2
    c9f6:	fc d3       	rcall	.+2040   	; 0xd1f0 <ff_memalloc>
    c9f8:	5c 01       	movw	r10, r24
    c9fa:	00 97       	sbiw	r24, 0x00	; 0
    c9fc:	09 f4       	brne	.+2      	; 0xca00 <f_unlink+0x46>
    c9fe:	49 c0       	rjmp	.+146    	; 0xca92 <f_unlink+0xd8>
    ca00:	6f 96       	adiw	r28, 0x1f	; 31
    ca02:	ee ad       	ldd	r30, Y+62	; 0x3e
    ca04:	ff ad       	ldd	r31, Y+63	; 0x3f
    ca06:	6f 97       	sbiw	r28, 0x1f	; 31
    ca08:	94 87       	std	Z+12, r25	; 0x0c
    ca0a:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);		/* Follow the file path */
    ca0c:	a1 96       	adiw	r28, 0x21	; 33
    ca0e:	6e ad       	ldd	r22, Y+62	; 0x3e
    ca10:	7f ad       	ldd	r23, Y+63	; 0x3f
    ca12:	a1 97       	sbiw	r28, 0x21	; 33
    ca14:	ce 01       	movw	r24, r28
    ca16:	8f 96       	adiw	r24, 0x2f	; 47
    ca18:	0e 94 a8 56 	call	0xad50	; 0xad50 <follow_path>
    ca1c:	8c 01       	movw	r16, r24
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
    ca1e:	89 2b       	or	r24, r25
    ca20:	a1 f5       	brne	.+104    	; 0xca8a <f_unlink+0xd0>
    ca22:	67 96       	adiw	r28, 0x17	; 23
    ca24:	8f ad       	ldd	r24, Y+63	; 0x3f
    ca26:	67 97       	sbiw	r28, 0x17	; 23
    ca28:	85 fd       	sbrc	r24, 5
    ca2a:	36 c0       	rjmp	.+108    	; 0xca98 <f_unlink+0xde>
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
    ca2c:	87 fd       	sbrc	r24, 7
    ca2e:	34 c0       	rjmp	.+104    	; 0xca98 <f_unlink+0xde>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
			} else {
				if (dj.obj.attr & AM_RDO) {
    ca30:	9b a8       	ldd	r9, Y+51	; 0x33
    ca32:	90 fc       	sbrc	r9, 0
    ca34:	40 c0       	rjmp	.+128    	; 0xcab6 <f_unlink+0xfc>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
    ca36:	6f 96       	adiw	r28, 0x1f	; 31
    ca38:	0e ad       	ldd	r16, Y+62	; 0x3e
    ca3a:	1f ad       	ldd	r17, Y+63	; 0x3f
    ca3c:	6f 97       	sbiw	r28, 0x1f	; 31
    ca3e:	2b 96       	adiw	r28, 0x0b	; 11
    ca40:	6e ad       	ldd	r22, Y+62	; 0x3e
    ca42:	7f ad       	ldd	r23, Y+63	; 0x3f
    ca44:	2b 97       	sbiw	r28, 0x0b	; 11
    ca46:	f8 01       	movw	r30, r16
    ca48:	80 81       	ld	r24, Z
    ca4a:	0e 94 ba 48 	call	0x9174	; 0x9174 <ld_clust.isra.1>
    ca4e:	6b 01       	movw	r12, r22
    ca50:	7c 01       	movw	r14, r24
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory ? */
    ca52:	94 fe       	sbrs	r9, 4
    ca54:	33 c0       	rjmp	.+102    	; 0xcabc <f_unlink+0x102>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
    ca56:	f8 01       	movw	r30, r16
    ca58:	85 89       	ldd	r24, Z+21	; 0x15
    ca5a:	96 89       	ldd	r25, Z+22	; 0x16
    ca5c:	a7 89       	ldd	r26, Z+23	; 0x17
    ca5e:	b0 8d       	ldd	r27, Z+24	; 0x18
    ca60:	c8 16       	cp	r12, r24
    ca62:	d9 06       	cpc	r13, r25
    ca64:	ea 06       	cpc	r14, r26
    ca66:	fb 06       	cpc	r15, r27
    ca68:	31 f1       	breq	.+76     	; 0xcab6 <f_unlink+0xfc>
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
    ca6a:	1a 83       	std	Y+2, r17	; 0x02
    ca6c:	09 83       	std	Y+1, r16	; 0x01
						sdj.obj.sclust = dclst;
    ca6e:	cf 82       	std	Y+7, r12	; 0x07
    ca70:	d8 86       	std	Y+8, r13	; 0x08
    ca72:	e9 86       	std	Y+9, r14	; 0x09
    ca74:	fa 86       	std	Y+10, r15	; 0x0a
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
    ca76:	40 e0       	ldi	r20, 0x00	; 0
    ca78:	50 e0       	ldi	r21, 0x00	; 0
    ca7a:	ba 01       	movw	r22, r20
    ca7c:	ce 01       	movw	r24, r28
    ca7e:	01 96       	adiw	r24, 0x01	; 1
    ca80:	0e 94 7b 4e 	call	0x9cf6	; 0x9cf6 <dir_sdi>
    ca84:	8c 01       	movw	r16, r24
						if (res == FR_OK) {
    ca86:	89 2b       	or	r24, r25
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    ca88:	51 f0       	breq	.+20     	; 0xca9e <f_unlink+0xe4>
    ca8a:	c5 01       	movw	r24, r10
    ca8c:	b4 d3       	rcall	.+1896   	; 0xd1f6 <ff_memfree>
    ca8e:	c8 01       	movw	r24, r16

	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
	dj.obj.fs = fs;
	if (res == FR_OK) {
		INIT_NAMBUF(fs);
    ca90:	36 c0       	rjmp	.+108    	; 0xcafe <f_unlink+0x144>
    ca92:	81 e1       	ldi	r24, 0x11	; 17
    ca94:	90 e0       	ldi	r25, 0x00	; 0
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
    ca96:	33 c0       	rjmp	.+102    	; 0xcafe <f_unlink+0x144>
    ca98:	06 e0       	ldi	r16, 0x06	; 6
    ca9a:	10 e0       	ldi	r17, 0x00	; 0
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
						if (res == FR_OK) {
							res = dir_read(&sdj, 0);			/* Read an item */
    ca9c:	f6 cf       	rjmp	.-20     	; 0xca8a <f_unlink+0xd0>
    ca9e:	60 e0       	ldi	r22, 0x00	; 0
    caa0:	70 e0       	ldi	r23, 0x00	; 0
    caa2:	ce 01       	movw	r24, r28
    caa4:	01 96       	adiw	r24, 0x01	; 1
    caa6:	0e 94 d7 52 	call	0xa5ae	; 0xa5ae <dir_read>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
    caaa:	8c 01       	movw	r16, r24
    caac:	00 97       	sbiw	r24, 0x00	; 0
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
    caae:	19 f0       	breq	.+6      	; 0xcab6 <f_unlink+0xfc>
    cab0:	04 97       	sbiw	r24, 0x04	; 4
    cab2:	21 f0       	breq	.+8      	; 0xcabc <f_unlink+0x102>
					dclst = ld_clust(fs, dj.dir);
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory ? */
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
    cab4:	ea cf       	rjmp	.-44     	; 0xca8a <f_unlink+0xd0>
    cab6:	07 e0       	ldi	r16, 0x07	; 7
    cab8:	10 e0       	ldi	r17, 0x00	; 0
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);			/* Remove the directory entry */
    caba:	e7 cf       	rjmp	.-50     	; 0xca8a <f_unlink+0xd0>
    cabc:	ce 01       	movw	r24, r28
    cabe:	8f 96       	adiw	r24, 0x2f	; 47
    cac0:	0e 94 a5 53 	call	0xa74a	; 0xa74a <dir_remove>
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
    cac4:	8c 01       	movw	r16, r24
    cac6:	89 2b       	or	r24, r25
    cac8:	01 f7       	brne	.-64     	; 0xca8a <f_unlink+0xd0>
    caca:	c1 14       	cp	r12, r1
    cacc:	d1 04       	cpc	r13, r1
    cace:	e1 04       	cpc	r14, r1
    cad0:	f1 04       	cpc	r15, r1
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    cad2:	41 f4       	brne	.+16     	; 0xcae4 <f_unlink+0x12a>
    cad4:	6f 96       	adiw	r28, 0x1f	; 31
    cad6:	8e ad       	ldd	r24, Y+62	; 0x3e
    cad8:	9f ad       	ldd	r25, Y+63	; 0x3f
    cada:	6f 97       	sbiw	r28, 0x1f	; 31
    cadc:	0e 94 36 49 	call	0x926c	; 0x926c <sync_fs>
    cae0:	8c 01       	movw	r16, r24
				res = dir_remove(&dj);			/* Remove the directory entry */
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
    cae2:	d3 cf       	rjmp	.-90     	; 0xca8a <f_unlink+0xd0>
    cae4:	00 e0       	ldi	r16, 0x00	; 0
    cae6:	10 e0       	ldi	r17, 0x00	; 0
    cae8:	98 01       	movw	r18, r16
    caea:	b7 01       	movw	r22, r14
    caec:	a6 01       	movw	r20, r12
    caee:	ce 01       	movw	r24, r28
    caf0:	8f 96       	adiw	r24, 0x2f	; 47
    caf2:	0e 94 0c 50 	call	0xa018	; 0xa018 <remove_chain>
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    caf6:	8c 01       	movw	r16, r24
    caf8:	89 2b       	or	r24, r25
    cafa:	39 f6       	brne	.-114    	; 0xca8a <f_unlink+0xd0>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cafc:	eb cf       	rjmp	.-42     	; 0xcad4 <f_unlink+0x11a>
    cafe:	c0 5a       	subi	r28, 0xA0	; 160
    cb00:	df 4f       	sbci	r29, 0xFF	; 255
    cb02:	eb e0       	ldi	r30, 0x0B	; 11
    cb04:	0c 94 36 e8 	jmp	0x1d06c	; 0x1d06c <__epilogue_restores__+0xe>

0000cb08 <f_mkdir>:

MEMSPACE
FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
    cb08:	ac e3       	ldi	r26, 0x3C	; 60
    cb0a:	b0 e0       	ldi	r27, 0x00	; 0
    cb0c:	ea e8       	ldi	r30, 0x8A	; 138
    cb0e:	f5 e6       	ldi	r31, 0x65	; 101
    cb10:	0c 94 13 e8 	jmp	0x1d026	; 0x1d026 <__prologue_saves__>
    cb14:	9a ab       	std	Y+50, r25	; 0x32
    cb16:	89 ab       	std	Y+49, r24	; 0x31
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
    cb18:	42 e0       	ldi	r20, 0x02	; 2
    cb1a:	be 01       	movw	r22, r28
    cb1c:	61 5d       	subi	r22, 0xD1	; 209
    cb1e:	7f 4f       	sbci	r23, 0xFF	; 255
    cb20:	ce 01       	movw	r24, r28
    cb22:	c1 96       	adiw	r24, 0x31	; 49
    cb24:	0e 94 22 4a 	call	0x9444	; 0x9444 <find_volume>
	dj.obj.fs = fs;
    cb28:	2f a5       	ldd	r18, Y+47	; 0x2f
    cb2a:	38 a9       	ldd	r19, Y+48	; 0x30
    cb2c:	3a 83       	std	Y+2, r19	; 0x02
    cb2e:	29 83       	std	Y+1, r18	; 0x01
	if (res == FR_OK) {
    cb30:	00 97       	sbiw	r24, 0x00	; 0
    cb32:	09 f0       	breq	.+2      	; 0xcb36 <f_mkdir+0x2e>
    cb34:	2a c1       	rjmp	.+596    	; 0xcd8a <f_mkdir+0x282>
		INIT_NAMBUF(fs);
    cb36:	80 e0       	ldi	r24, 0x00	; 0
    cb38:	92 e0       	ldi	r25, 0x02	; 2
    cb3a:	5a d3       	rcall	.+1716   	; 0xd1f0 <ff_memalloc>
    cb3c:	98 af       	std	Y+56, r25	; 0x38
    cb3e:	8f ab       	std	Y+55, r24	; 0x37
    cb40:	00 97       	sbiw	r24, 0x00	; 0
    cb42:	d1 f0       	breq	.+52     	; 0xcb78 <f_mkdir+0x70>
    cb44:	ef a5       	ldd	r30, Y+47	; 0x2f
    cb46:	f8 a9       	ldd	r31, Y+48	; 0x30
    cb48:	94 87       	std	Z+12, r25	; 0x0c
    cb4a:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);			/* Follow the file path */
    cb4c:	69 a9       	ldd	r22, Y+49	; 0x31
    cb4e:	7a a9       	ldd	r23, Y+50	; 0x32
    cb50:	ce 01       	movw	r24, r28
    cb52:	01 96       	adiw	r24, 0x01	; 1
    cb54:	0e 94 a8 56 	call	0xad50	; 0xad50 <follow_path>
    cb58:	7c 01       	movw	r14, r24
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
    cb5a:	00 97       	sbiw	r24, 0x00	; 0
    cb5c:	81 f0       	breq	.+32     	; 0xcb7e <f_mkdir+0x76>
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
    cb5e:	04 97       	sbiw	r24, 0x04	; 4
    cb60:	31 f4       	brne	.+12     	; 0xcb6e <f_mkdir+0x66>
    cb62:	88 a5       	ldd	r24, Y+40	; 0x28
    cb64:	85 ff       	sbrs	r24, 5
    cb66:	0f c0       	rjmp	.+30     	; 0xcb86 <f_mkdir+0x7e>
			res = FR_INVALID_NAME;
    cb68:	36 e0       	ldi	r19, 0x06	; 6
    cb6a:	e3 2e       	mov	r14, r19
    cb6c:	f1 2c       	mov	r15, r1
				if (res == FR_OK) res = sync_fs(fs);
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
			}
		}
		FREE_NAMBUF();
    cb6e:	8f a9       	ldd	r24, Y+55	; 0x37
    cb70:	98 ad       	ldd	r25, Y+56	; 0x38
    cb72:	41 d3       	rcall	.+1666   	; 0xd1f6 <ff_memfree>
    cb74:	c7 01       	movw	r24, r14
    cb76:	09 c1       	rjmp	.+530    	; 0xcd8a <f_mkdir+0x282>

	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
	dj.obj.fs = fs;
	if (res == FR_OK) {
		INIT_NAMBUF(fs);
    cb78:	81 e1       	ldi	r24, 0x11	; 17
    cb7a:	90 e0       	ldi	r25, 0x00	; 0
    cb7c:	06 c1       	rjmp	.+524    	; 0xcd8a <f_mkdir+0x282>
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
    cb7e:	48 e0       	ldi	r20, 0x08	; 8
    cb80:	e4 2e       	mov	r14, r20
    cb82:	f1 2c       	mov	r15, r1
    cb84:	f4 cf       	rjmp	.-24     	; 0xcb6e <f_mkdir+0x66>
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
    cb86:	40 e0       	ldi	r20, 0x00	; 0
    cb88:	50 e0       	ldi	r21, 0x00	; 0
    cb8a:	ba 01       	movw	r22, r20
    cb8c:	ce 01       	movw	r24, r28
    cb8e:	01 96       	adiw	r24, 0x01	; 1
    cb90:	0e 94 3b 4f 	call	0x9e76	; 0x9e76 <create_chain>
    cb94:	4b 01       	movw	r8, r22
    cb96:	5c 01       	movw	r10, r24
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
    cb98:	8f a5       	ldd	r24, Y+47	; 0x2f
    cb9a:	98 a9       	ldd	r25, Y+48	; 0x30
    cb9c:	dc 01       	movw	r26, r24
    cb9e:	19 96       	adiw	r26, 0x09	; 9
    cba0:	4d 91       	ld	r20, X+
    cba2:	5c 91       	ld	r21, X
    cba4:	1a 97       	sbiw	r26, 0x0a	; 10
    cba6:	60 e0       	ldi	r22, 0x00	; 0
    cba8:	70 e0       	ldi	r23, 0x00	; 0
    cbaa:	29 e0       	ldi	r18, 0x09	; 9
    cbac:	44 0f       	add	r20, r20
    cbae:	55 1f       	adc	r21, r21
    cbb0:	66 1f       	adc	r22, r22
    cbb2:	77 1f       	adc	r23, r23
    cbb4:	2a 95       	dec	r18
    cbb6:	d1 f7       	brne	.-12     	; 0xcbac <f_mkdir+0xa4>
    cbb8:	4b 87       	std	Y+11, r20	; 0x0b
    cbba:	5c 87       	std	Y+12, r21	; 0x0c
    cbbc:	6d 87       	std	Y+13, r22	; 0x0d
    cbbe:	7e 87       	std	Y+14, r23	; 0x0e
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
    cbc0:	81 14       	cp	r8, r1
    cbc2:	91 04       	cpc	r9, r1
    cbc4:	a1 04       	cpc	r10, r1
    cbc6:	b1 04       	cpc	r11, r1
    cbc8:	a9 f0       	breq	.+42     	; 0xcbf4 <f_mkdir+0xec>
			if (dcl == 1) res = FR_INT_ERR;
    cbca:	31 e0       	ldi	r19, 0x01	; 1
    cbcc:	83 16       	cp	r8, r19
    cbce:	91 04       	cpc	r9, r1
    cbd0:	a1 04       	cpc	r10, r1
    cbd2:	b1 04       	cpc	r11, r1
    cbd4:	59 f0       	breq	.+22     	; 0xcbec <f_mkdir+0xe4>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
    cbd6:	4f ef       	ldi	r20, 0xFF	; 255
    cbd8:	84 16       	cp	r8, r20
    cbda:	94 06       	cpc	r9, r20
    cbdc:	a4 06       	cpc	r10, r20
    cbde:	b4 06       	cpc	r11, r20
    cbe0:	09 f0       	breq	.+2      	; 0xcbe4 <f_mkdir+0xdc>
    cbe2:	cf c0       	rjmp	.+414    	; 0xcd82 <f_mkdir+0x27a>
    cbe4:	ee 24       	eor	r14, r14
    cbe6:	e3 94       	inc	r14
    cbe8:	f1 2c       	mov	r15, r1
    cbea:	07 c0       	rjmp	.+14     	; 0xcbfa <f_mkdir+0xf2>
		if (res == FR_NO_FILE) {				/* Can create a new directory */
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
			if (dcl == 1) res = FR_INT_ERR;
    cbec:	62 e0       	ldi	r22, 0x02	; 2
    cbee:	e6 2e       	mov	r14, r22
    cbf0:	f1 2c       	mov	r15, r1
    cbf2:	03 c0       	rjmp	.+6      	; 0xcbfa <f_mkdir+0xf2>
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
    cbf4:	57 e0       	ldi	r21, 0x07	; 7
    cbf6:	e5 2e       	mov	r14, r21
    cbf8:	f1 2c       	mov	r15, r1
			if (dcl == 1) res = FR_INT_ERR;
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
			tm = GET_FATTIME();
    cbfa:	0e 94 08 70 	call	0xe010	; 0xe010 <get_fattime>
    cbfe:	2b 01       	movw	r4, r22
    cc00:	3c 01       	movw	r6, r24
			if (res == FR_OK) {					/* Initialize the new directory table */
    cc02:	e1 14       	cp	r14, r1
    cc04:	f1 04       	cpc	r15, r1
    cc06:	09 f0       	breq	.+2      	; 0xcc0a <f_mkdir+0x102>
    cc08:	8f c0       	rjmp	.+286    	; 0xcd28 <f_mkdir+0x220>
				dsc = clust2sect(fs, dcl);
    cc0a:	0f a5       	ldd	r16, Y+47	; 0x2f
    cc0c:	18 a9       	ldd	r17, Y+48	; 0x30
    cc0e:	b5 01       	movw	r22, r10
    cc10:	a4 01       	movw	r20, r8
    cc12:	c8 01       	movw	r24, r16
    cc14:	0e 94 ef 47 	call	0x8fde	; 0x8fde <clust2sect>
    cc18:	6b 01       	movw	r12, r22
    cc1a:	7c 01       	movw	r14, r24
				dir = fs->win;
    cc1c:	18 01       	movw	r2, r16
    cc1e:	55 e3       	ldi	r21, 0x35	; 53
    cc20:	25 0e       	add	r2, r21
    cc22:	31 1c       	adc	r3, r1
				mem_set(dir, 0, SS(fs));
    cc24:	40 e0       	ldi	r20, 0x00	; 0
    cc26:	52 e0       	ldi	r21, 0x02	; 2
    cc28:	60 e0       	ldi	r22, 0x00	; 0
    cc2a:	70 e0       	ldi	r23, 0x00	; 0
    cc2c:	c1 01       	movw	r24, r2
    cc2e:	0e 94 e6 47 	call	0x8fcc	; 0x8fcc <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
    cc32:	4b e0       	ldi	r20, 0x0B	; 11
    cc34:	50 e0       	ldi	r21, 0x00	; 0
    cc36:	60 e2       	ldi	r22, 0x20	; 32
    cc38:	70 e0       	ldi	r23, 0x00	; 0
    cc3a:	c1 01       	movw	r24, r2
    cc3c:	0e 94 e6 47 	call	0x8fcc	; 0x8fcc <mem_set>
					dir[DIR_Name] = '.';
    cc40:	ee e2       	ldi	r30, 0x2E	; 46
    cc42:	d8 01       	movw	r26, r16
    cc44:	d5 96       	adiw	r26, 0x35	; 53
    cc46:	ec 93       	st	X, r30
					dir[DIR_Attr] = AM_DIR;
    cc48:	f8 01       	movw	r30, r16
    cc4a:	e0 5c       	subi	r30, 0xC0	; 192
    cc4c:	ff 4f       	sbci	r31, 0xFF	; 255
    cc4e:	80 e1       	ldi	r24, 0x10	; 16
    cc50:	80 83       	st	Z, r24
					st_dword(dir + DIR_ModTime, tm);
    cc52:	b3 01       	movw	r22, r6
    cc54:	a2 01       	movw	r20, r4
    cc56:	c8 01       	movw	r24, r16
    cc58:	85 5b       	subi	r24, 0xB5	; 181
    cc5a:	9f 4f       	sbci	r25, 0xFF	; 255
    cc5c:	0e 94 e0 47 	call	0x8fc0	; 0x8fc0 <st_dword>
					st_clust(fs, dir, dcl);
    cc60:	a5 01       	movw	r20, r10
    cc62:	94 01       	movw	r18, r8
    cc64:	b1 01       	movw	r22, r2
    cc66:	8f a5       	ldd	r24, Y+47	; 0x2f
    cc68:	98 a9       	ldd	r25, Y+48	; 0x30
    cc6a:	0e 94 cf 48 	call	0x919e	; 0x919e <st_clust.isra.2>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
    cc6e:	98 01       	movw	r18, r16
    cc70:	2b 5a       	subi	r18, 0xAB	; 171
    cc72:	3f 4f       	sbci	r19, 0xFF	; 255
    cc74:	3c ab       	std	Y+52, r19	; 0x34
    cc76:	2b ab       	std	Y+51, r18	; 0x33
    cc78:	40 e2       	ldi	r20, 0x20	; 32
    cc7a:	50 e0       	ldi	r21, 0x00	; 0
    cc7c:	b1 01       	movw	r22, r2
    cc7e:	c9 01       	movw	r24, r18
    cc80:	0e 94 af 48 	call	0x915e	; 0x915e <mem_cpy.part.0>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
    cc84:	f8 01       	movw	r30, r16
    cc86:	ea 5a       	subi	r30, 0xAA	; 170
    cc88:	ff 4f       	sbci	r31, 0xFF	; 255
    cc8a:	3e e2       	ldi	r19, 0x2E	; 46
    cc8c:	30 83       	st	Z, r19
    cc8e:	2f 81       	ldd	r18, Y+7	; 0x07
    cc90:	38 85       	ldd	r19, Y+8	; 0x08
    cc92:	49 85       	ldd	r20, Y+9	; 0x09
    cc94:	5a 85       	ldd	r21, Y+10	; 0x0a
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
    cc96:	0f a5       	ldd	r16, Y+47	; 0x2f
    cc98:	18 a9       	ldd	r17, Y+48	; 0x30
    cc9a:	d8 01       	movw	r26, r16
    cc9c:	6c 91       	ld	r22, X
    cc9e:	63 30       	cpi	r22, 0x03	; 3
    cca0:	71 f4       	brne	.+28     	; 0xccbe <f_mkdir+0x1b6>
    cca2:	99 96       	adiw	r26, 0x29	; 41
    cca4:	8d 91       	ld	r24, X+
    cca6:	9d 91       	ld	r25, X+
    cca8:	0d 90       	ld	r0, X+
    ccaa:	bc 91       	ld	r27, X
    ccac:	a0 2d       	mov	r26, r0
    ccae:	28 17       	cp	r18, r24
    ccb0:	39 07       	cpc	r19, r25
    ccb2:	4a 07       	cpc	r20, r26
    ccb4:	5b 07       	cpc	r21, r27
    ccb6:	19 f4       	brne	.+6      	; 0xccbe <f_mkdir+0x1b6>
    ccb8:	20 e0       	ldi	r18, 0x00	; 0
    ccba:	30 e0       	ldi	r19, 0x00	; 0
    ccbc:	a9 01       	movw	r20, r18
					st_clust(fs, dir + SZDIRE, pcl);
    ccbe:	6b a9       	ldd	r22, Y+51	; 0x33
    ccc0:	7c a9       	ldd	r23, Y+52	; 0x34
    ccc2:	c8 01       	movw	r24, r16
    ccc4:	0e 94 cf 48 	call	0x919e	; 0x919e <st_clust.isra.2>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
    ccc8:	ef a5       	ldd	r30, Y+47	; 0x2f
    ccca:	f8 a9       	ldd	r31, Y+48	; 0x30
    cccc:	01 85       	ldd	r16, Z+9	; 0x09
    ccce:	12 85       	ldd	r17, Z+10	; 0x0a
    ccd0:	01 15       	cp	r16, r1
    ccd2:	11 05       	cpc	r17, r1
    ccd4:	99 f1       	breq	.+102    	; 0xcd3c <f_mkdir+0x234>
					fs->winsect = dsc++;
    ccd6:	8f a5       	ldd	r24, Y+47	; 0x2f
    ccd8:	98 a9       	ldd	r25, Y+48	; 0x30
    ccda:	a7 01       	movw	r20, r14
    ccdc:	96 01       	movw	r18, r12
    ccde:	2f 5f       	subi	r18, 0xFF	; 255
    cce0:	3f 4f       	sbci	r19, 0xFF	; 255
    cce2:	4f 4f       	sbci	r20, 0xFF	; 255
    cce4:	5f 4f       	sbci	r21, 0xFF	; 255
    cce6:	2b ab       	std	Y+51, r18	; 0x33
    cce8:	3c ab       	std	Y+52, r19	; 0x34
    ccea:	4d ab       	std	Y+53, r20	; 0x35
    ccec:	5e ab       	std	Y+54, r21	; 0x36
    ccee:	dc 01       	movw	r26, r24
    ccf0:	d1 96       	adiw	r26, 0x31	; 49
    ccf2:	cd 92       	st	X+, r12
    ccf4:	dd 92       	st	X+, r13
    ccf6:	ed 92       	st	X+, r14
    ccf8:	fc 92       	st	X, r15
    ccfa:	d4 97       	sbiw	r26, 0x34	; 52
					fs->wflag = 1;
    ccfc:	e1 e0       	ldi	r30, 0x01	; 1
    ccfe:	13 96       	adiw	r26, 0x03	; 3
    cd00:	ec 93       	st	X, r30
    cd02:	0e 94 dc 48 	call	0x91b8	; 0x91b8 <sync_window.part.3>
    cd06:	7c 01       	movw	r14, r24
					res = sync_window(fs);
					if (res != FR_OK) break;
    cd08:	89 2b       	or	r24, r25
    cd0a:	71 f4       	brne	.+28     	; 0xcd28 <f_mkdir+0x220>
					mem_set(dir, 0, SS(fs));
    cd0c:	40 e0       	ldi	r20, 0x00	; 0
    cd0e:	52 e0       	ldi	r21, 0x02	; 2
    cd10:	60 e0       	ldi	r22, 0x00	; 0
    cd12:	70 e0       	ldi	r23, 0x00	; 0
    cd14:	c1 01       	movw	r24, r2
    cd16:	0e 94 e6 47 	call	0x8fcc	; 0x8fcc <mem_set>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
					st_clust(fs, dir + SZDIRE, pcl);
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
    cd1a:	01 50       	subi	r16, 0x01	; 1
    cd1c:	11 09       	sbc	r17, r1
					fs->winsect = dsc++;
    cd1e:	cb a8       	ldd	r12, Y+51	; 0x33
    cd20:	dc a8       	ldd	r13, Y+52	; 0x34
    cd22:	ed a8       	ldd	r14, Y+53	; 0x35
    cd24:	fe a8       	ldd	r15, Y+54	; 0x36
    cd26:	d4 cf       	rjmp	.-88     	; 0xccd0 <f_mkdir+0x1c8>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
					fs->wflag = 1;
				}
				if (res == FR_OK) res = sync_fs(fs);
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
    cd28:	00 e0       	ldi	r16, 0x00	; 0
    cd2a:	10 e0       	ldi	r17, 0x00	; 0
    cd2c:	98 01       	movw	r18, r16
    cd2e:	b5 01       	movw	r22, r10
    cd30:	a4 01       	movw	r20, r8
    cd32:	ce 01       	movw	r24, r28
    cd34:	01 96       	adiw	r24, 0x01	; 1
    cd36:	0e 94 0c 50 	call	0xa018	; 0xa018 <remove_chain>
    cd3a:	19 cf       	rjmp	.-462    	; 0xcb6e <f_mkdir+0x66>
					res = sync_window(fs);
					if (res != FR_OK) break;
					mem_set(dir, 0, SS(fs));
				}
			}
			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
    cd3c:	ce 01       	movw	r24, r28
    cd3e:	01 96       	adiw	r24, 0x01	; 1
    cd40:	0e 94 04 55 	call	0xaa08	; 0xaa08 <dir_register>
    cd44:	7c 01       	movw	r14, r24
			if (res == FR_OK) {
    cd46:	89 2b       	or	r24, r25
    cd48:	79 f7       	brne	.-34     	; 0xcd28 <f_mkdir+0x220>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
    cd4a:	0b 8d       	ldd	r16, Y+27	; 0x1b
    cd4c:	1c 8d       	ldd	r17, Y+28	; 0x1c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
    cd4e:	b3 01       	movw	r22, r6
    cd50:	a2 01       	movw	r20, r4
    cd52:	c8 01       	movw	r24, r16
    cd54:	46 96       	adiw	r24, 0x16	; 22
    cd56:	0e 94 e0 47 	call	0x8fc0	; 0x8fc0 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
    cd5a:	a5 01       	movw	r20, r10
    cd5c:	94 01       	movw	r18, r8
    cd5e:	b8 01       	movw	r22, r16
    cd60:	8f a5       	ldd	r24, Y+47	; 0x2f
    cd62:	98 a9       	ldd	r25, Y+48	; 0x30
    cd64:	0e 94 cf 48 	call	0x919e	; 0x919e <st_clust.isra.2>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
    cd68:	80 e1       	ldi	r24, 0x10	; 16
    cd6a:	f8 01       	movw	r30, r16
    cd6c:	83 87       	std	Z+11, r24	; 0x0b
					fs->wflag = 1;
    cd6e:	8f a5       	ldd	r24, Y+47	; 0x2f
    cd70:	98 a9       	ldd	r25, Y+48	; 0x30
    cd72:	21 e0       	ldi	r18, 0x01	; 1
    cd74:	dc 01       	movw	r26, r24
    cd76:	13 96       	adiw	r26, 0x03	; 3
    cd78:	2c 93       	st	X, r18
				}
				if (res == FR_OK) res = sync_fs(fs);
    cd7a:	0e 94 36 49 	call	0x926c	; 0x926c <sync_fs>
    cd7e:	7c 01       	movw	r14, r24
    cd80:	f6 ce       	rjmp	.-532    	; 0xcb6e <f_mkdir+0x66>
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
			if (dcl == 1) res = FR_INT_ERR;
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
    cd82:	0e 94 2d 49 	call	0x925a	; 0x925a <sync_window>
    cd86:	7c 01       	movw	r14, r24
    cd88:	38 cf       	rjmp	.-400    	; 0xcbfa <f_mkdir+0xf2>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cd8a:	ec 96       	adiw	r28, 0x3c	; 60
    cd8c:	e2 e1       	ldi	r30, 0x12	; 18
    cd8e:	0c 94 2f e8 	jmp	0x1d05e	; 0x1d05e <__epilogue_restores__>

0000cd92 <f_rename>:
MEMSPACE
FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
    cd92:	aa e7       	ldi	r26, 0x7A	; 122
    cd94:	b0 e0       	ldi	r27, 0x00	; 0
    cd96:	ef ec       	ldi	r30, 0xCF	; 207
    cd98:	f6 e6       	ldi	r31, 0x66	; 102
    cd9a:	0c 94 1c e8 	jmp	0x1d038	; 0x1d038 <__prologue_saves__+0x12>
    cd9e:	e9 96       	adiw	r28, 0x39	; 57
    cda0:	9f af       	std	Y+63, r25	; 0x3f
    cda2:	8e af       	std	Y+62, r24	; 0x3e
    cda4:	e9 97       	sbiw	r28, 0x39	; 57
    cda6:	eb 96       	adiw	r28, 0x3b	; 59
    cda8:	7f af       	std	Y+63, r23	; 0x3f
    cdaa:	6e af       	std	Y+62, r22	; 0x3e
    cdac:	eb 97       	sbiw	r28, 0x3b	; 59
	BYTE buf[_FS_EXFAT ? SZDIRE * 2 : 24], *dir;
	DWORD dw;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Ignore drive number of new name */
    cdae:	ce 01       	movw	r24, r28
    cdb0:	87 58       	subi	r24, 0x87	; 135
    cdb2:	9f 4f       	sbci	r25, 0xFF	; 255
    cdb4:	0e 94 62 48 	call	0x90c4	; 0x90c4 <get_ldnumber>
	res = find_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
    cdb8:	42 e0       	ldi	r20, 0x02	; 2
    cdba:	be 01       	movw	r22, r28
    cdbc:	6b 58       	subi	r22, 0x8B	; 139
    cdbe:	7f 4f       	sbci	r23, 0xFF	; 255
    cdc0:	ce 01       	movw	r24, r28
    cdc2:	89 58       	subi	r24, 0x89	; 137
    cdc4:	9f 4f       	sbci	r25, 0xFF	; 255
    cdc6:	0e 94 22 4a 	call	0x9444	; 0x9444 <find_volume>
	if (res == FR_OK) {
    cdca:	00 97       	sbiw	r24, 0x00	; 0
    cdcc:	09 f0       	breq	.+2      	; 0xcdd0 <f_rename+0x3e>
    cdce:	eb c0       	rjmp	.+470    	; 0xcfa6 <f_rename+0x214>
		djo.obj.fs = fs;
    cdd0:	e7 96       	adiw	r28, 0x37	; 55
    cdd2:	8e ad       	ldd	r24, Y+62	; 0x3e
    cdd4:	9f ad       	ldd	r25, Y+63	; 0x3f
    cdd6:	e7 97       	sbiw	r28, 0x37	; 55
    cdd8:	98 ab       	std	Y+48, r25	; 0x30
    cdda:	8f a7       	std	Y+47, r24	; 0x2f
		INIT_NAMBUF(fs);
    cddc:	80 e0       	ldi	r24, 0x00	; 0
    cdde:	92 e0       	ldi	r25, 0x02	; 2
    cde0:	07 d2       	rcall	.+1038   	; 0xd1f0 <ff_memalloc>
    cde2:	6c 01       	movw	r12, r24
    cde4:	00 97       	sbiw	r24, 0x00	; 0
    cde6:	09 f4       	brne	.+2      	; 0xcdea <f_rename+0x58>
    cde8:	3f c0       	rjmp	.+126    	; 0xce68 <f_rename+0xd6>
    cdea:	e7 96       	adiw	r28, 0x37	; 55
    cdec:	ee ad       	ldd	r30, Y+62	; 0x3e
    cdee:	ff ad       	ldd	r31, Y+63	; 0x3f
    cdf0:	e7 97       	sbiw	r28, 0x37	; 55
    cdf2:	94 87       	std	Z+12, r25	; 0x0c
    cdf4:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&djo, path_old);		/* Check old object */
    cdf6:	e9 96       	adiw	r28, 0x39	; 57
    cdf8:	6e ad       	ldd	r22, Y+62	; 0x3e
    cdfa:	7f ad       	ldd	r23, Y+63	; 0x3f
    cdfc:	e9 97       	sbiw	r28, 0x39	; 57
    cdfe:	ce 01       	movw	r24, r28
    ce00:	8f 96       	adiw	r24, 0x2f	; 47
    ce02:	0e 94 a8 56 	call	0xad50	; 0xad50 <follow_path>
    ce06:	8c 01       	movw	r16, r24
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
    ce08:	89 2b       	or	r24, r25
    ce0a:	51 f5       	brne	.+84     	; 0xce60 <f_rename+0xce>
    ce0c:	67 96       	adiw	r28, 0x17	; 23
    ce0e:	8f ad       	ldd	r24, Y+63	; 0x3f
    ce10:	67 97       	sbiw	r28, 0x17	; 23
    ce12:	80 7a       	andi	r24, 0xA0	; 160
    ce14:	09 f0       	breq	.+2      	; 0xce18 <f_rename+0x86>
    ce16:	ae c0       	rjmp	.+348    	; 0xcf74 <f_rename+0x1e2>
    ce18:	2b 96       	adiw	r28, 0x0b	; 11
    ce1a:	6e ad       	ldd	r22, Y+62	; 0x3e
    ce1c:	7f ad       	ldd	r23, Y+63	; 0x3f
    ce1e:	2b 97       	sbiw	r28, 0x0b	; 11
    ce20:	65 5f       	subi	r22, 0xF5	; 245
    ce22:	7f 4f       	sbci	r23, 0xFF	; 255
    ce24:	45 e1       	ldi	r20, 0x15	; 21
    ce26:	50 e0       	ldi	r21, 0x00	; 0
    ce28:	ce 01       	movw	r24, r28
    ce2a:	83 5a       	subi	r24, 0xA3	; 163
    ce2c:	9f 4f       	sbci	r25, 0xFF	; 255
    ce2e:	0e 94 af 48 	call	0x915e	; 0x915e <mem_cpy.part.0>
    ce32:	4e e2       	ldi	r20, 0x2E	; 46
    ce34:	50 e0       	ldi	r21, 0x00	; 0
    ce36:	be 01       	movw	r22, r28
    ce38:	61 5d       	subi	r22, 0xD1	; 209
    ce3a:	7f 4f       	sbci	r23, 0xFF	; 255
    ce3c:	ce 01       	movw	r24, r28
    ce3e:	01 96       	adiw	r24, 0x01	; 1
    ce40:	0e 94 af 48 	call	0x915e	; 0x915e <mem_cpy.part.0>
			} else
#endif
			{	/* At FAT12/FAT16/FAT32 */
				mem_cpy(buf, djo.dir + DIR_Attr, 21);	/* Save information about the object except name */
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
    ce44:	eb 96       	adiw	r28, 0x3b	; 59
    ce46:	6e ad       	ldd	r22, Y+62	; 0x3e
    ce48:	7f ad       	ldd	r23, Y+63	; 0x3f
    ce4a:	eb 97       	sbiw	r28, 0x3b	; 59
    ce4c:	ce 01       	movw	r24, r28
    ce4e:	01 96       	adiw	r24, 0x01	; 1
    ce50:	0e 94 a8 56 	call	0xad50	; 0xad50 <follow_path>
    ce54:	8c 01       	movw	r16, r24
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
    ce56:	89 2b       	or	r24, r25
    ce58:	51 f0       	breq	.+20     	; 0xce6e <f_rename+0xdc>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
    ce5a:	04 30       	cpi	r16, 0x04	; 4
    ce5c:	11 05       	cpc	r17, r1
					res = sync_fs(fs);
				}
			}
/* End of critical section */
		}
		FREE_NAMBUF();
    ce5e:	29 f1       	breq	.+74     	; 0xceaa <f_rename+0x118>
    ce60:	c6 01       	movw	r24, r12
    ce62:	c9 d1       	rcall	.+914    	; 0xd1f6 <ff_memfree>
    ce64:	c8 01       	movw	r24, r16

	get_ldnumber(&path_new);						/* Ignore drive number of new name */
	res = find_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
	if (res == FR_OK) {
		djo.obj.fs = fs;
		INIT_NAMBUF(fs);
    ce66:	9f c0       	rjmp	.+318    	; 0xcfa6 <f_rename+0x214>
    ce68:	81 e1       	ldi	r24, 0x11	; 17
    ce6a:	90 e0       	ldi	r25, 0x00	; 0
			{	/* At FAT12/FAT16/FAT32 */
				mem_cpy(buf, djo.dir + DIR_Attr, 21);	/* Save information about the object except name */
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
    ce6c:	9c c0       	rjmp	.+312    	; 0xcfa6 <f_rename+0x214>
    ce6e:	4f 81       	ldd	r20, Y+7	; 0x07
    ce70:	58 85       	ldd	r21, Y+8	; 0x08
    ce72:	69 85       	ldd	r22, Y+9	; 0x09
    ce74:	7a 85       	ldd	r23, Y+10	; 0x0a
    ce76:	8d a9       	ldd	r24, Y+53	; 0x35
    ce78:	9e a9       	ldd	r25, Y+54	; 0x36
    ce7a:	af a9       	ldd	r26, Y+55	; 0x37
    ce7c:	b8 ad       	ldd	r27, Y+56	; 0x38
    ce7e:	48 17       	cp	r20, r24
    ce80:	59 07       	cpc	r21, r25
    ce82:	6a 07       	cpc	r22, r26
    ce84:	7b 07       	cpc	r23, r27
    ce86:	09 f0       	breq	.+2      	; 0xce8a <f_rename+0xf8>
    ce88:	88 c0       	rjmp	.+272    	; 0xcf9a <f_rename+0x208>
    ce8a:	4f 85       	ldd	r20, Y+15	; 0x0f
    ce8c:	58 89       	ldd	r21, Y+16	; 0x10
    ce8e:	69 89       	ldd	r22, Y+17	; 0x11
    ce90:	7a 89       	ldd	r23, Y+18	; 0x12
    ce92:	21 96       	adiw	r28, 0x01	; 1
    ce94:	8c ad       	ldd	r24, Y+60	; 0x3c
    ce96:	9d ad       	ldd	r25, Y+61	; 0x3d
    ce98:	ae ad       	ldd	r26, Y+62	; 0x3e
    ce9a:	bf ad       	ldd	r27, Y+63	; 0x3f
    ce9c:	21 97       	sbiw	r28, 0x01	; 1
    ce9e:	48 17       	cp	r20, r24
    cea0:	59 07       	cpc	r21, r25
    cea2:	6a 07       	cpc	r22, r26
    cea4:	7b 07       	cpc	r23, r27
    cea6:	09 f0       	breq	.+2      	; 0xceaa <f_rename+0x118>
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
					res = dir_register(&djn);			/* Register the new entry */
    cea8:	78 c0       	rjmp	.+240    	; 0xcf9a <f_rename+0x208>
    ceaa:	ce 01       	movw	r24, r28
    ceac:	01 96       	adiw	r24, 0x01	; 1
    ceae:	0e 94 04 55 	call	0xaa08	; 0xaa08 <dir_register>
					if (res == FR_OK) {
    ceb2:	8c 01       	movw	r16, r24
    ceb4:	89 2b       	or	r24, r25
						dir = djn.dir;					/* Copy information about object except name */
    ceb6:	a1 f6       	brne	.-88     	; 0xce60 <f_rename+0xce>
    ceb8:	eb 8c       	ldd	r14, Y+27	; 0x1b
    ceba:	fc 8c       	ldd	r15, Y+28	; 0x1c
    cebc:	6d e5       	ldi	r22, 0x5D	; 93
    cebe:	70 e0       	ldi	r23, 0x00	; 0
    cec0:	6c 0f       	add	r22, r28
    cec2:	7d 1f       	adc	r23, r29
    cec4:	6e 5f       	subi	r22, 0xFE	; 254
    cec6:	7f 4f       	sbci	r23, 0xFF	; 255
    cec8:	43 e1       	ldi	r20, 0x13	; 19
    ceca:	50 e0       	ldi	r21, 0x00	; 0
    cecc:	c7 01       	movw	r24, r14
    cece:	0d 96       	adiw	r24, 0x0d	; 13
    ced0:	0e 94 af 48 	call	0x915e	; 0x915e <mem_cpy.part.0>
						mem_cpy(dir + 13, buf + 2, 19);
						dir[DIR_Attr] = buf[0] | AM_ARC;
    ced4:	6e 96       	adiw	r28, 0x1e	; 30
    ced6:	8f ad       	ldd	r24, Y+63	; 0x3f
    ced8:	6e 97       	sbiw	r28, 0x1e	; 30
    ceda:	80 62       	ori	r24, 0x20	; 32
    cedc:	f7 01       	movw	r30, r14
						fs->wflag = 1;
    cede:	83 87       	std	Z+11, r24	; 0x0b
    cee0:	e7 96       	adiw	r28, 0x37	; 55
    cee2:	0e ad       	ldd	r16, Y+62	; 0x3e
    cee4:	1f ad       	ldd	r17, Y+63	; 0x3f
    cee6:	e7 97       	sbiw	r28, 0x37	; 55
    cee8:	bb 24       	eor	r11, r11
    ceea:	b3 94       	inc	r11
    ceec:	f8 01       	movw	r30, r16
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
    ceee:	b3 82       	std	Z+3, r11	; 0x03
    cef0:	f7 01       	movw	r30, r14
    cef2:	83 85       	ldd	r24, Z+11	; 0x0b
    cef4:	84 ff       	sbrs	r24, 4
    cef6:	41 c0       	rjmp	.+130    	; 0xcf7a <f_rename+0x1e8>
    cef8:	4d a9       	ldd	r20, Y+53	; 0x35
    cefa:	5e a9       	ldd	r21, Y+54	; 0x36
    cefc:	6f a9       	ldd	r22, Y+55	; 0x37
    cefe:	78 ad       	ldd	r23, Y+56	; 0x38
    cf00:	8f 81       	ldd	r24, Y+7	; 0x07
    cf02:	98 85       	ldd	r25, Y+8	; 0x08
    cf04:	a9 85       	ldd	r26, Y+9	; 0x09
    cf06:	ba 85       	ldd	r27, Y+10	; 0x0a
    cf08:	48 17       	cp	r20, r24
    cf0a:	59 07       	cpc	r21, r25
    cf0c:	6a 07       	cpc	r22, r26
    cf0e:	7b 07       	cpc	r23, r27
							dw = clust2sect(fs, ld_clust(fs, dir));
    cf10:	a1 f1       	breq	.+104    	; 0xcf7a <f_rename+0x1e8>
    cf12:	b7 01       	movw	r22, r14
    cf14:	f8 01       	movw	r30, r16
    cf16:	80 81       	ld	r24, Z
    cf18:	0e 94 ba 48 	call	0x9174	; 0x9174 <ld_clust.isra.1>
    cf1c:	ab 01       	movw	r20, r22
    cf1e:	bc 01       	movw	r22, r24
    cf20:	c8 01       	movw	r24, r16
    cf22:	0e 94 ef 47 	call	0x8fde	; 0x8fde <clust2sect>
    cf26:	ab 01       	movw	r20, r22
							if (!dw) {
    cf28:	bc 01       	movw	r22, r24
    cf2a:	41 15       	cp	r20, r1
    cf2c:	51 05       	cpc	r21, r1
    cf2e:	61 05       	cpc	r22, r1
    cf30:	71 05       	cpc	r23, r1
								res = FR_INT_ERR;
							} else {
/* Start of critical section where any interruption can cause a cross-link */
								res = move_window(fs, dw);
    cf32:	b1 f1       	breq	.+108    	; 0xcfa0 <f_rename+0x20e>
    cf34:	c8 01       	movw	r24, r16
    cf36:	0e 94 a2 49 	call	0x9344	; 0x9344 <move_window>
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
								if (res == FR_OK && dir[1] == '.') {
    cf3a:	8c 01       	movw	r16, r24
    cf3c:	89 2b       	or	r24, r25
    cf3e:	09 f0       	breq	.+2      	; 0xcf42 <f_rename+0x1b0>
							if (!dw) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where any interruption can cause a cross-link */
								res = move_window(fs, dw);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    cf40:	8f cf       	rjmp	.-226    	; 0xce60 <f_rename+0xce>
    cf42:	e7 96       	adiw	r28, 0x37	; 55
    cf44:	8e ad       	ldd	r24, Y+62	; 0x3e
    cf46:	9f ad       	ldd	r25, Y+63	; 0x3f
								if (res == FR_OK && dir[1] == '.') {
    cf48:	e7 97       	sbiw	r28, 0x37	; 55
    cf4a:	fc 01       	movw	r30, r24
    cf4c:	ea 5a       	subi	r30, 0xAA	; 170
    cf4e:	ff 4f       	sbci	r31, 0xFF	; 255
    cf50:	20 81       	ld	r18, Z
    cf52:	2e 32       	cpi	r18, 0x2E	; 46
									st_clust(fs, dir, djn.obj.sclust);
    cf54:	91 f4       	brne	.+36     	; 0xcf7a <f_rename+0x1e8>
    cf56:	2f 81       	ldd	r18, Y+7	; 0x07
    cf58:	38 85       	ldd	r19, Y+8	; 0x08
    cf5a:	49 85       	ldd	r20, Y+9	; 0x09
							if (!dw) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where any interruption can cause a cross-link */
								res = move_window(fs, dw);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    cf5c:	5a 85       	ldd	r21, Y+10	; 0x0a
    cf5e:	bc 01       	movw	r22, r24
    cf60:	6b 5a       	subi	r22, 0xAB	; 171
								if (res == FR_OK && dir[1] == '.') {
									st_clust(fs, dir, djn.obj.sclust);
    cf62:	7f 4f       	sbci	r23, 0xFF	; 255
    cf64:	0e 94 cf 48 	call	0x919e	; 0x919e <st_clust.isra.2>
									fs->wflag = 1;
    cf68:	e7 96       	adiw	r28, 0x37	; 55
    cf6a:	ee ad       	ldd	r30, Y+62	; 0x3e
    cf6c:	ff ad       	ldd	r31, Y+63	; 0x3f
    cf6e:	e7 97       	sbiw	r28, 0x37	; 55
    cf70:	b3 82       	std	Z+3, r11	; 0x03
	res = find_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
	if (res == FR_OK) {
		djo.obj.fs = fs;
		INIT_NAMBUF(fs);
		res = follow_path(&djo, path_old);		/* Check old object */
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
    cf72:	03 c0       	rjmp	.+6      	; 0xcf7a <f_rename+0x1e8>
    cf74:	06 e0       	ldi	r16, 0x06	; 6
    cf76:	10 e0       	ldi	r17, 0x00	; 0
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&djo);		/* Remove old entry */
    cf78:	73 cf       	rjmp	.-282    	; 0xce60 <f_rename+0xce>
    cf7a:	ce 01       	movw	r24, r28
    cf7c:	8f 96       	adiw	r24, 0x2f	; 47
    cf7e:	0e 94 a5 53 	call	0xa74a	; 0xa74a <dir_remove>
				if (res == FR_OK) {
    cf82:	8c 01       	movw	r16, r24
    cf84:	89 2b       	or	r24, r25
    cf86:	09 f0       	breq	.+2      	; 0xcf8a <f_rename+0x1f8>
					res = sync_fs(fs);
    cf88:	6b cf       	rjmp	.-298    	; 0xce60 <f_rename+0xce>
    cf8a:	e7 96       	adiw	r28, 0x37	; 55
    cf8c:	8e ad       	ldd	r24, Y+62	; 0x3e
    cf8e:	9f ad       	ldd	r25, Y+63	; 0x3f
    cf90:	e7 97       	sbiw	r28, 0x37	; 55
    cf92:	0e 94 36 49 	call	0x926c	; 0x926c <sync_fs>
    cf96:	8c 01       	movw	r16, r24
    cf98:	63 cf       	rjmp	.-314    	; 0xce60 <f_rename+0xce>
    cf9a:	08 e0       	ldi	r16, 0x08	; 8
    cf9c:	10 e0       	ldi	r17, 0x00	; 0
						dir[DIR_Attr] = buf[0] | AM_ARC;
						fs->wflag = 1;
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
							dw = clust2sect(fs, ld_clust(fs, dir));
							if (!dw) {
								res = FR_INT_ERR;
    cf9e:	60 cf       	rjmp	.-320    	; 0xce60 <f_rename+0xce>
    cfa0:	02 e0       	ldi	r16, 0x02	; 2
    cfa2:	10 e0       	ldi	r17, 0x00	; 0
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cfa4:	5d cf       	rjmp	.-326    	; 0xce60 <f_rename+0xce>
    cfa6:	c6 58       	subi	r28, 0x86	; 134
    cfa8:	df 4f       	sbci	r29, 0xFF	; 255
    cfaa:	e9 e0       	ldi	r30, 0x09	; 9
    cfac:	0c 94 38 e8 	jmp	0x1d070	; 0x1d070 <__epilogue_restores__+0x12>

0000cfb0 <f_chmod>:
FRESULT f_chmod (
	const TCHAR* path,	/* Pointer to the file path */
	BYTE attr,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
    cfb0:	a2 e3       	ldi	r26, 0x32	; 50
    cfb2:	b0 e0       	ldi	r27, 0x00	; 0
    cfb4:	ee ed       	ldi	r30, 0xDE	; 222
    cfb6:	f7 e6       	ldi	r31, 0x67	; 103
    cfb8:	0c 94 1d e8 	jmp	0x1d03a	; 0x1d03a <__prologue_saves__+0x14>
    cfbc:	9a ab       	std	Y+50, r25	; 0x32
    cfbe:	89 ab       	std	Y+49, r24	; 0x31
    cfc0:	e6 2e       	mov	r14, r22
    cfc2:	f4 2e       	mov	r15, r20
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = find_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    cfc4:	42 e0       	ldi	r20, 0x02	; 2
    cfc6:	be 01       	movw	r22, r28
    cfc8:	61 5d       	subi	r22, 0xD1	; 209
    cfca:	7f 4f       	sbci	r23, 0xFF	; 255
    cfcc:	ce 01       	movw	r24, r28
    cfce:	c1 96       	adiw	r24, 0x31	; 49
    cfd0:	0e 94 22 4a 	call	0x9444	; 0x9444 <find_volume>
	dj.obj.fs = fs;
    cfd4:	2f a5       	ldd	r18, Y+47	; 0x2f
    cfd6:	38 a9       	ldd	r19, Y+48	; 0x30
    cfd8:	3a 83       	std	Y+2, r19	; 0x02
    cfda:	29 83       	std	Y+1, r18	; 0x01
	if (res == FR_OK) {
    cfdc:	00 97       	sbiw	r24, 0x00	; 0
    cfde:	89 f5       	brne	.+98     	; 0xd042 <f_chmod+0x92>
		INIT_NAMBUF(fs);
    cfe0:	80 e0       	ldi	r24, 0x00	; 0
    cfe2:	92 e0       	ldi	r25, 0x02	; 2
    cfe4:	05 d1       	rcall	.+522    	; 0xd1f0 <ff_memalloc>
    cfe6:	6c 01       	movw	r12, r24
    cfe8:	00 97       	sbiw	r24, 0x00	; 0
    cfea:	b1 f0       	breq	.+44     	; 0xd018 <f_chmod+0x68>
    cfec:	ef a5       	ldd	r30, Y+47	; 0x2f
    cfee:	f8 a9       	ldd	r31, Y+48	; 0x30
    cff0:	94 87       	std	Z+12, r25	; 0x0c
    cff2:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);	/* Follow the file path */
    cff4:	69 a9       	ldd	r22, Y+49	; 0x31
    cff6:	7a a9       	ldd	r23, Y+50	; 0x32
    cff8:	ce 01       	movw	r24, r28
    cffa:	01 96       	adiw	r24, 0x01	; 1
    cffc:	0e 94 a8 56 	call	0xad50	; 0xad50 <follow_path>
    d000:	8c 01       	movw	r16, r24
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
    d002:	89 2b       	or	r24, r25
    d004:	29 f4       	brne	.+10     	; 0xd010 <f_chmod+0x60>
    d006:	88 a5       	ldd	r24, Y+40	; 0x28
    d008:	80 7a       	andi	r24, 0xA0	; 160
    d00a:	49 f0       	breq	.+18     	; 0xd01e <f_chmod+0x6e>
    d00c:	06 e0       	ldi	r16, 0x06	; 6
				dj.dir[DIR_Attr] = (attr & mask) | (dj.dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
				fs->wflag = 1;
			}
			if (res == FR_OK) res = sync_fs(fs);
		}
		FREE_NAMBUF();
    d00e:	10 e0       	ldi	r17, 0x00	; 0
    d010:	c6 01       	movw	r24, r12
    d012:	f1 d0       	rcall	.+482    	; 0xd1f6 <ff_memfree>
    d014:	c8 01       	movw	r24, r16


	res = find_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	dj.obj.fs = fs;
	if (res == FR_OK) {
		INIT_NAMBUF(fs);
    d016:	15 c0       	rjmp	.+42     	; 0xd042 <f_chmod+0x92>
    d018:	81 e1       	ldi	r24, 0x11	; 17
    d01a:	90 e0       	ldi	r25, 0x00	; 0
				fs->dirbuf[XDIR_Attr] = (attr & mask) | (fs->dirbuf[XDIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
				res = store_xdir(&dj);
			} else
#endif
			{
				dj.dir[DIR_Attr] = (attr & mask) | (dj.dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
    d01c:	12 c0       	rjmp	.+36     	; 0xd042 <f_chmod+0x92>
    d01e:	eb 8d       	ldd	r30, Y+27	; 0x1b
    d020:	fc 8d       	ldd	r31, Y+28	; 0x1c
    d022:	83 85       	ldd	r24, Z+11	; 0x0b
    d024:	6e 2d       	mov	r22, r14
    d026:	68 27       	eor	r22, r24
    d028:	6f 21       	and	r22, r15
    d02a:	67 72       	andi	r22, 0x27	; 39
    d02c:	68 27       	eor	r22, r24
				fs->wflag = 1;
    d02e:	63 87       	std	Z+11, r22	; 0x0b
    d030:	8f a5       	ldd	r24, Y+47	; 0x2f
    d032:	98 a9       	ldd	r25, Y+48	; 0x30
    d034:	21 e0       	ldi	r18, 0x01	; 1
    d036:	fc 01       	movw	r30, r24
			}
			if (res == FR_OK) res = sync_fs(fs);
    d038:	23 83       	std	Z+3, r18	; 0x03
    d03a:	0e 94 36 49 	call	0x926c	; 0x926c <sync_fs>
    d03e:	8c 01       	movw	r16, r24
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    d040:	e7 cf       	rjmp	.-50     	; 0xd010 <f_chmod+0x60>
    d042:	e2 96       	adiw	r28, 0x32	; 50
    d044:	e8 e0       	ldi	r30, 0x08	; 8
    d046:	0c 94 39 e8 	jmp	0x1d072	; 0x1d072 <__epilogue_restores__+0x14>

0000d04a <f_utime>:
MEMSPACE
FRESULT f_utime (
	const TCHAR* path,	/* Pointer to the file/directory name */
	const FILINFO* fno	/* Pointer to the time stamp to be set */
)
{
    d04a:	a2 e3       	ldi	r26, 0x32	; 50
    d04c:	b0 e0       	ldi	r27, 0x00	; 0
    d04e:	eb e2       	ldi	r30, 0x2B	; 43
    d050:	f8 e6       	ldi	r31, 0x68	; 104
    d052:	0c 94 1d e8 	jmp	0x1d03a	; 0x1d03a <__prologue_saves__+0x14>
    d056:	9a ab       	std	Y+50, r25	; 0x32
    d058:	89 ab       	std	Y+49, r24	; 0x31
    d05a:	6b 01       	movw	r12, r22
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = find_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    d05c:	42 e0       	ldi	r20, 0x02	; 2
    d05e:	be 01       	movw	r22, r28
    d060:	61 5d       	subi	r22, 0xD1	; 209
    d062:	7f 4f       	sbci	r23, 0xFF	; 255
    d064:	ce 01       	movw	r24, r28
    d066:	c1 96       	adiw	r24, 0x31	; 49
    d068:	0e 94 22 4a 	call	0x9444	; 0x9444 <find_volume>
	dj.obj.fs = fs;
    d06c:	2f a5       	ldd	r18, Y+47	; 0x2f
    d06e:	38 a9       	ldd	r19, Y+48	; 0x30
    d070:	3a 83       	std	Y+2, r19	; 0x02
    d072:	29 83       	std	Y+1, r18	; 0x01
	if (res == FR_OK) {
    d074:	00 97       	sbiw	r24, 0x00	; 0
    d076:	09 f0       	breq	.+2      	; 0xd07a <f_utime+0x30>
    d078:	3d c0       	rjmp	.+122    	; 0xd0f4 <f_utime+0xaa>
		INIT_NAMBUF(fs);
    d07a:	80 e0       	ldi	r24, 0x00	; 0
    d07c:	92 e0       	ldi	r25, 0x02	; 2
    d07e:	b8 d0       	rcall	.+368    	; 0xd1f0 <ff_memalloc>
    d080:	7c 01       	movw	r14, r24
    d082:	00 97       	sbiw	r24, 0x00	; 0
    d084:	b1 f0       	breq	.+44     	; 0xd0b2 <f_utime+0x68>
    d086:	ef a5       	ldd	r30, Y+47	; 0x2f
    d088:	f8 a9       	ldd	r31, Y+48	; 0x30
    d08a:	94 87       	std	Z+12, r25	; 0x0c
    d08c:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);	/* Follow the file path */
    d08e:	69 a9       	ldd	r22, Y+49	; 0x31
    d090:	7a a9       	ldd	r23, Y+50	; 0x32
    d092:	ce 01       	movw	r24, r28
    d094:	01 96       	adiw	r24, 0x01	; 1
    d096:	0e 94 a8 56 	call	0xad50	; 0xad50 <follow_path>
    d09a:	8c 01       	movw	r16, r24
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
    d09c:	89 2b       	or	r24, r25
    d09e:	29 f4       	brne	.+10     	; 0xd0aa <f_utime+0x60>
    d0a0:	88 a5       	ldd	r24, Y+40	; 0x28
    d0a2:	80 7a       	andi	r24, 0xA0	; 160
    d0a4:	49 f0       	breq	.+18     	; 0xd0b8 <f_utime+0x6e>
    d0a6:	06 e0       	ldi	r16, 0x06	; 6
				st_dword(dj.dir + DIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
				fs->wflag = 1;
			}
			if (res == FR_OK) res = sync_fs(fs);
		}
		FREE_NAMBUF();
    d0a8:	10 e0       	ldi	r17, 0x00	; 0
    d0aa:	c7 01       	movw	r24, r14
    d0ac:	a4 d0       	rcall	.+328    	; 0xd1f6 <ff_memfree>
    d0ae:	c8 01       	movw	r24, r16


	res = find_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	dj.obj.fs = fs;
	if (res == FR_OK) {
		INIT_NAMBUF(fs);
    d0b0:	21 c0       	rjmp	.+66     	; 0xd0f4 <f_utime+0xaa>
    d0b2:	81 e1       	ldi	r24, 0x11	; 17
    d0b4:	90 e0       	ldi	r25, 0x00	; 0
				st_dword(fs->dirbuf + XDIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
				res = store_xdir(&dj);
			} else
#endif
			{
				st_dword(dj.dir + DIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
    d0b6:	1e c0       	rjmp	.+60     	; 0xd0f4 <f_utime+0xaa>
    d0b8:	f6 01       	movw	r30, r12
    d0ba:	44 81       	ldd	r20, Z+4	; 0x04
    d0bc:	55 81       	ldd	r21, Z+5	; 0x05
    d0be:	60 e0       	ldi	r22, 0x00	; 0
    d0c0:	70 e0       	ldi	r23, 0x00	; 0
    d0c2:	ba 01       	movw	r22, r20
    d0c4:	55 27       	eor	r21, r21
    d0c6:	44 27       	eor	r20, r20
    d0c8:	86 81       	ldd	r24, Z+6	; 0x06
    d0ca:	97 81       	ldd	r25, Z+7	; 0x07
    d0cc:	a0 e0       	ldi	r26, 0x00	; 0
    d0ce:	b0 e0       	ldi	r27, 0x00	; 0
    d0d0:	48 2b       	or	r20, r24
    d0d2:	59 2b       	or	r21, r25
    d0d4:	6a 2b       	or	r22, r26
    d0d6:	7b 2b       	or	r23, r27
    d0d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    d0da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    d0dc:	46 96       	adiw	r24, 0x16	; 22
    d0de:	0e 94 e0 47 	call	0x8fc0	; 0x8fc0 <st_dword>
				fs->wflag = 1;
    d0e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    d0e4:	98 a9       	ldd	r25, Y+48	; 0x30
    d0e6:	21 e0       	ldi	r18, 0x01	; 1
    d0e8:	fc 01       	movw	r30, r24
			}
			if (res == FR_OK) res = sync_fs(fs);
    d0ea:	23 83       	std	Z+3, r18	; 0x03
    d0ec:	0e 94 36 49 	call	0x926c	; 0x926c <sync_fs>
    d0f0:	8c 01       	movw	r16, r24
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    d0f2:	db cf       	rjmp	.-74     	; 0xd0aa <f_utime+0x60>
    d0f4:	e2 96       	adiw	r28, 0x32	; 50
    d0f6:	e8 e0       	ldi	r30, 0x08	; 8
    d0f8:	0c 94 39 e8 	jmp	0x1d072	; 0x1d072 <__epilogue_restores__+0x14>

0000d0fc <f_getlabel>:
FRESULT f_getlabel (
	const TCHAR* path,	/* Path name of the logical drive number */
	TCHAR* label,		/* Pointer to a buffer to return the volume label */
	DWORD* vsn			/* Pointer to a variable to return the volume serial number */
)
{
    d0fc:	a2 e3       	ldi	r26, 0x32	; 50
    d0fe:	b0 e0       	ldi	r27, 0x00	; 0
    d100:	e4 e8       	ldi	r30, 0x84	; 132
    d102:	f8 e6       	ldi	r31, 0x68	; 104
    d104:	0c 94 1d e8 	jmp	0x1d03a	; 0x1d03a <__prologue_saves__+0x14>
    d108:	9a ab       	std	Y+50, r25	; 0x32
    d10a:	89 ab       	std	Y+49, r24	; 0x31
    d10c:	7b 01       	movw	r14, r22
    d10e:	6a 01       	movw	r12, r20
#if _LFN_UNICODE || _FS_EXFAT
	WCHAR w;
#endif

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
    d110:	40 e0       	ldi	r20, 0x00	; 0
    d112:	be 01       	movw	r22, r28
    d114:	61 5d       	subi	r22, 0xD1	; 209
    d116:	7f 4f       	sbci	r23, 0xFF	; 255
    d118:	ce 01       	movw	r24, r28
    d11a:	c1 96       	adiw	r24, 0x31	; 49
    d11c:	0e 94 22 4a 	call	0x9444	; 0x9444 <find_volume>
    d120:	8c 01       	movw	r16, r24

	/* Get volume label */
	if (res == FR_OK && label) {
    d122:	89 2b       	or	r24, r25
    d124:	09 f0       	breq	.+2      	; 0xd128 <f_getlabel+0x2c>
    d126:	5f c0       	rjmp	.+190    	; 0xd1e6 <f_getlabel+0xea>
    d128:	e1 14       	cp	r14, r1
    d12a:	f1 04       	cpc	r15, r1
    d12c:	91 f1       	breq	.+100    	; 0xd192 <f_getlabel+0x96>
		dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
    d12e:	8f a5       	ldd	r24, Y+47	; 0x2f
    d130:	98 a9       	ldd	r25, Y+48	; 0x30
    d132:	9a 83       	std	Y+2, r25	; 0x02
    d134:	89 83       	std	Y+1, r24	; 0x01
    d136:	1f 82       	std	Y+7, r1	; 0x07
    d138:	18 86       	std	Y+8, r1	; 0x08
    d13a:	19 86       	std	Y+9, r1	; 0x09
    d13c:	1a 86       	std	Y+10, r1	; 0x0a
		res = dir_sdi(&dj, 0);
    d13e:	40 e0       	ldi	r20, 0x00	; 0
    d140:	50 e0       	ldi	r21, 0x00	; 0
    d142:	ba 01       	movw	r22, r20
    d144:	ce 01       	movw	r24, r28
    d146:	01 96       	adiw	r24, 0x01	; 1
    d148:	0e 94 7b 4e 	call	0x9cf6	; 0x9cf6 <dir_sdi>
		if (res == FR_OK) {
    d14c:	00 97       	sbiw	r24, 0x00	; 0
    d14e:	e1 f4       	brne	.+56     	; 0xd188 <f_getlabel+0x8c>
		 	res = dir_read(&dj, 1);			/* Find a volume label entry */
    d150:	61 e0       	ldi	r22, 0x01	; 1
    d152:	70 e0       	ldi	r23, 0x00	; 0
    d154:	ce 01       	movw	r24, r28
    d156:	01 96       	adiw	r24, 0x01	; 1
    d158:	0e 94 d7 52 	call	0xa5ae	; 0xa5ae <dir_read>
		 	if (res == FR_OK) {
    d15c:	00 97       	sbiw	r24, 0x00	; 0
    d15e:	a1 f4       	brne	.+40     	; 0xd188 <f_getlabel+0x8c>
						if (IsDBCS1(w) && si < 11 && IsDBCS2(dj.dir[si])) {
							w = w << 8 | dj.dir[si++];
						}
						label[di++] = ff_convert(w, 1);	/* OEM -> Unicode */
#else
						label[di++] = dj.dir[si++];
    d160:	eb 8d       	ldd	r30, Y+27	; 0x1b
    d162:	fc 8d       	ldd	r31, Y+28	; 0x1c
    d164:	cf 01       	movw	r24, r30
    d166:	0b 96       	adiw	r24, 0x0b	; 11
    d168:	d7 01       	movw	r26, r14
    d16a:	21 91       	ld	r18, Z+
    d16c:	2d 93       	st	X+, r18
#endif
					} while (di < 11);
    d16e:	e8 17       	cp	r30, r24
    d170:	f9 07       	cpc	r31, r25
    d172:	d9 f7       	brne	.-10     	; 0xd16a <f_getlabel+0x6e>
    d174:	f7 01       	movw	r30, r14
    d176:	3b 96       	adiw	r30, 0x0b	; 11
					do {				/* Truncate trailing spaces */
						label[di] = 0;
    d178:	10 82       	st	Z, r1
						if (di == 0) break;
    d17a:	ee 16       	cp	r14, r30
    d17c:	ff 06       	cpc	r15, r31
    d17e:	49 f0       	breq	.+18     	; 0xd192 <f_getlabel+0x96>
					} while (label[--di] == ' ');
    d180:	82 91       	ld	r24, -Z
    d182:	80 32       	cpi	r24, 0x20	; 32
    d184:	c9 f3       	breq	.-14     	; 0xd178 <f_getlabel+0x7c>
    d186:	05 c0       	rjmp	.+10     	; 0xd192 <f_getlabel+0x96>
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    d188:	84 30       	cpi	r24, 0x04	; 4
    d18a:	91 05       	cpc	r25, r1
    d18c:	59 f5       	brne	.+86     	; 0xd1e4 <f_getlabel+0xe8>
			label[0] = 0;
    d18e:	f7 01       	movw	r30, r14
    d190:	10 82       	st	Z, r1
			res = FR_OK;
		}
	}

	/* Get volume serial number */
	if (res == FR_OK && vsn) {
    d192:	c1 14       	cp	r12, r1
    d194:	d1 04       	cpc	r13, r1
    d196:	39 f1       	breq	.+78     	; 0xd1e6 <f_getlabel+0xea>
		res = move_window(fs, fs->volbase);
    d198:	8f a5       	ldd	r24, Y+47	; 0x2f
    d19a:	98 a9       	ldd	r25, Y+48	; 0x30
    d19c:	fc 01       	movw	r30, r24
    d19e:	41 a1       	ldd	r20, Z+33	; 0x21
    d1a0:	52 a1       	ldd	r21, Z+34	; 0x22
    d1a2:	63 a1       	ldd	r22, Z+35	; 0x23
    d1a4:	74 a1       	ldd	r23, Z+36	; 0x24
    d1a6:	0e 94 a2 49 	call	0x9344	; 0x9344 <move_window>
    d1aa:	8c 01       	movw	r16, r24
		if (res == FR_OK) {
    d1ac:	89 2b       	or	r24, r25
    d1ae:	d9 f4       	brne	.+54     	; 0xd1e6 <f_getlabel+0xea>
			switch (fs->fs_type) {
    d1b0:	ef a5       	ldd	r30, Y+47	; 0x2f
    d1b2:	f8 a9       	ldd	r31, Y+48	; 0x30
    d1b4:	80 81       	ld	r24, Z
    d1b6:	83 30       	cpi	r24, 0x03	; 3
    d1b8:	29 f0       	breq	.+10     	; 0xd1c4 <f_getlabel+0xc8>
    d1ba:	84 30       	cpi	r24, 0x04	; 4
    d1bc:	31 f0       	breq	.+12     	; 0xd1ca <f_getlabel+0xce>
			case FS_EXFAT: di = BPB_VolIDEx; break;
			case FS_FAT32: di = BS_VolID32; break;
			default:       di = BS_VolID;
    d1be:	87 e2       	ldi	r24, 0x27	; 39
    d1c0:	90 e0       	ldi	r25, 0x00	; 0
    d1c2:	05 c0       	rjmp	.+10     	; 0xd1ce <f_getlabel+0xd2>
	if (res == FR_OK && vsn) {
		res = move_window(fs, fs->volbase);
		if (res == FR_OK) {
			switch (fs->fs_type) {
			case FS_EXFAT: di = BPB_VolIDEx; break;
			case FS_FAT32: di = BS_VolID32; break;
    d1c4:	83 e4       	ldi	r24, 0x43	; 67
    d1c6:	90 e0       	ldi	r25, 0x00	; 0
    d1c8:	02 c0       	rjmp	.+4      	; 0xd1ce <f_getlabel+0xd2>
	/* Get volume serial number */
	if (res == FR_OK && vsn) {
		res = move_window(fs, fs->volbase);
		if (res == FR_OK) {
			switch (fs->fs_type) {
			case FS_EXFAT: di = BPB_VolIDEx; break;
    d1ca:	84 e6       	ldi	r24, 0x64	; 100
    d1cc:	90 e0       	ldi	r25, 0x00	; 0
			case FS_FAT32: di = BS_VolID32; break;
			default:       di = BS_VolID;
			}
			*vsn = ld_dword(fs->win + di);
    d1ce:	f5 96       	adiw	r30, 0x35	; 53
    d1d0:	8e 0f       	add	r24, r30
    d1d2:	9f 1f       	adc	r25, r31
    d1d4:	0e 94 cb 47 	call	0x8f96	; 0x8f96 <ld_dword>
    d1d8:	f6 01       	movw	r30, r12
    d1da:	60 83       	st	Z, r22
    d1dc:	71 83       	std	Z+1, r23	; 0x01
    d1de:	82 83       	std	Z+2, r24	; 0x02
    d1e0:	93 83       	std	Z+3, r25	; 0x03
    d1e2:	01 c0       	rjmp	.+2      	; 0xd1e6 <f_getlabel+0xea>
						if (di == 0) break;
					} while (label[--di] == ' ');
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    d1e4:	8c 01       	movw	r16, r24
			*vsn = ld_dword(fs->win + di);
		}
	}

	LEAVE_FF(fs, res);
}
    d1e6:	c8 01       	movw	r24, r16
    d1e8:	e2 96       	adiw	r28, 0x32	; 50
    d1ea:	e8 e0       	ldi	r30, 0x08	; 8
    d1ec:	0c 94 39 e8 	jmp	0x1d072	; 0x1d072 <__epilogue_restores__+0x14>

0000d1f0 <ff_memalloc>:
MEMSPACE
void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
	return safemalloc(msize);	/* Allocate a new memory block with POSIX API */
    d1f0:	0c 94 2f 2a 	jmp	0x545e	; 0x545e <safemalloc>
}
    d1f4:	08 95       	ret

0000d1f6 <ff_memfree>:
MEMSPACE
void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
	safefree(mblock);	/* Discard the memory block with POSIX API */
    d1f6:	0c 94 50 2a 	jmp	0x54a0	; 0x54a0 <safefree>
    d1fa:	08 95       	ret

0000d1fc <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
    d1fc:	80 38       	cpi	r24, 0x80	; 128
    d1fe:	91 05       	cpc	r25, r1
    d200:	18 f1       	brcs	.+70     	; 0xd248 <ff_convert+0x4c>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
    d202:	67 2b       	or	r22, r23
    d204:	61 f0       	breq	.+24     	; 0xd21e <ff_convert+0x22>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
    d206:	8f 3f       	cpi	r24, 0xFF	; 255
    d208:	91 05       	cpc	r25, r1
    d20a:	09 f0       	breq	.+2      	; 0xd20e <ff_convert+0x12>
    d20c:	d8 f4       	brcc	.+54     	; 0xd244 <ff_convert+0x48>
    d20e:	88 0f       	add	r24, r24
    d210:	99 1f       	adc	r25, r25
    d212:	fc 01       	movw	r30, r24
    d214:	e4 50       	subi	r30, 0x04	; 4
    d216:	fb 4f       	sbci	r31, 0xFB	; 251
    d218:	80 81       	ld	r24, Z
    d21a:	91 81       	ldd	r25, Z+1	; 0x01
    d21c:	08 95       	ret
    d21e:	ec ef       	ldi	r30, 0xFC	; 252
    d220:	f5 e0       	ldi	r31, 0x05	; 5

	if (chr < 0x80) {	/* ASCII */
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
    d222:	20 e0       	ldi	r18, 0x00	; 0
    d224:	30 e0       	ldi	r19, 0x00	; 0
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
				if (chr == Tbl[c]) break;
    d226:	41 91       	ld	r20, Z+
    d228:	51 91       	ld	r21, Z+
    d22a:	84 17       	cp	r24, r20
    d22c:	95 07       	cpc	r25, r21
    d22e:	29 f0       	breq	.+10     	; 0xd23a <ff_convert+0x3e>
	} else {
		if (dir) {		/* OEM code to Unicode */
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
    d230:	2f 5f       	subi	r18, 0xFF	; 255
    d232:	3f 4f       	sbci	r19, 0xFF	; 255
    d234:	20 38       	cpi	r18, 0x80	; 128
    d236:	31 05       	cpc	r19, r1
    d238:	b1 f7       	brne	.-20     	; 0xd226 <ff_convert+0x2a>
				if (chr == Tbl[c]) break;
			}
			c = (c + 0x80) & 0xFF;
    d23a:	c9 01       	movw	r24, r18
    d23c:	80 58       	subi	r24, 0x80	; 128
    d23e:	9f 4f       	sbci	r25, 0xFF	; 255
    d240:	99 27       	eor	r25, r25
    d242:	08 95       	ret
	if (chr < 0x80) {	/* ASCII */
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
    d244:	80 e0       	ldi	r24, 0x00	; 0
    d246:	90 e0       	ldi	r25, 0x00	; 0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
    d248:	08 95       	ret

0000d24a <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
    d24a:	81 15       	cp	r24, r1
    d24c:	20 e1       	ldi	r18, 0x10	; 16
    d24e:	92 07       	cpc	r25, r18
    d250:	18 f0       	brcs	.+6      	; 0xd258 <ff_wtoupper+0xe>
    d252:	ae e4       	ldi	r26, 0x4E	; 78
    d254:	b3 e0       	ldi	r27, 0x03	; 3
    d256:	02 c0       	rjmp	.+4      	; 0xd25c <ff_wtoupper+0x12>
    d258:	aa e0       	ldi	r26, 0x0A	; 10
    d25a:	b4 e0       	ldi	r27, 0x04	; 4
	for (;;) {
		bc = *p++;								/* Get block base */
    d25c:	4d 91       	ld	r20, X+
    d25e:	5c 91       	ld	r21, X
    d260:	11 97       	sbiw	r26, 0x01	; 1
		if (!bc || chr < bc) break;
    d262:	41 15       	cp	r20, r1
    d264:	51 05       	cpc	r21, r1
    d266:	09 f4       	brne	.+2      	; 0xd26a <ff_wtoupper+0x20>
    d268:	43 c0       	rjmp	.+134    	; 0xd2f0 <ff_wtoupper+0xa6>
    d26a:	84 17       	cp	r24, r20
    d26c:	95 07       	cpc	r25, r21
    d26e:	08 f4       	brcc	.+2      	; 0xd272 <ff_wtoupper+0x28>
    d270:	3f c0       	rjmp	.+126    	; 0xd2f0 <ff_wtoupper+0xa6>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
    d272:	14 96       	adiw	r26, 0x04	; 4
    d274:	fd 01       	movw	r30, r26
    d276:	32 97       	sbiw	r30, 0x02	; 2
    d278:	20 81       	ld	r18, Z
    d27a:	31 81       	ldd	r19, Z+1	; 0x01
    d27c:	e3 2f       	mov	r30, r19
    d27e:	ff 27       	eor	r31, r31
    d280:	33 27       	eor	r19, r19
		if (chr < bc + nc) {	/* In the block? */
    d282:	ba 01       	movw	r22, r20
    d284:	62 0f       	add	r22, r18
    d286:	73 1f       	adc	r23, r19
    d288:	86 17       	cp	r24, r22
    d28a:	97 07       	cpc	r25, r23
    d28c:	48 f5       	brcc	.+82     	; 0xd2e0 <ff_wtoupper+0x96>
			switch (cmd) {
    d28e:	e9 30       	cpi	r30, 0x09	; 9
    d290:	f1 05       	cpc	r31, r1
    d292:	70 f5       	brcc	.+92     	; 0xd2f0 <ff_wtoupper+0xa6>
    d294:	ec 54       	subi	r30, 0x4C	; 76
    d296:	ff 4f       	sbci	r31, 0xFF	; 255
    d298:	0c 94 cf e7 	jmp	0x1cf9e	; 0x1cf9e <__tablejump2__>
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
    d29c:	fc 01       	movw	r30, r24
    d29e:	e4 1b       	sub	r30, r20
    d2a0:	f5 0b       	sbc	r31, r21
    d2a2:	ee 0f       	add	r30, r30
    d2a4:	ff 1f       	adc	r31, r31
    d2a6:	ea 0f       	add	r30, r26
    d2a8:	fb 1f       	adc	r31, r27
    d2aa:	80 81       	ld	r24, Z
    d2ac:	91 81       	ldd	r25, Z+1	; 0x01
    d2ae:	08 95       	ret
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
    d2b0:	9c 01       	movw	r18, r24
    d2b2:	24 1b       	sub	r18, r20
    d2b4:	35 0b       	sbc	r19, r21
    d2b6:	21 70       	andi	r18, 0x01	; 1
    d2b8:	33 27       	eor	r19, r19
    d2ba:	82 1b       	sub	r24, r18
    d2bc:	93 0b       	sbc	r25, r19
    d2be:	08 95       	ret
			case 2: chr -= 16; break;				/* Shift -16 */
    d2c0:	40 97       	sbiw	r24, 0x10	; 16
    d2c2:	08 95       	ret
			case 3:	chr -= 32; break;				/* Shift -32 */
    d2c4:	80 97       	sbiw	r24, 0x20	; 32
    d2c6:	08 95       	ret
			case 4:	chr -= 48; break;				/* Shift -48 */
    d2c8:	c0 97       	sbiw	r24, 0x30	; 48
    d2ca:	08 95       	ret
			case 5:	chr -= 26; break;				/* Shift -26 */
    d2cc:	4a 97       	sbiw	r24, 0x1a	; 26
    d2ce:	08 95       	ret
			case 6:	chr += 8; break;				/* Shift +8 */
    d2d0:	08 96       	adiw	r24, 0x08	; 8
    d2d2:	08 95       	ret
			case 7: chr -= 80; break;				/* Shift -80 */
    d2d4:	80 55       	subi	r24, 0x50	; 80
    d2d6:	91 09       	sbc	r25, r1
    d2d8:	08 95       	ret
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
    d2da:	80 56       	subi	r24, 0x60	; 96
    d2dc:	9c 41       	sbci	r25, 0x1C	; 28
    d2de:	08 95       	ret
			}
			break;
		}
		if (!cmd) p += nc;
    d2e0:	ef 2b       	or	r30, r31
    d2e2:	09 f0       	breq	.+2      	; 0xd2e6 <ff_wtoupper+0x9c>
    d2e4:	bb cf       	rjmp	.-138    	; 0xd25c <ff_wtoupper+0x12>
    d2e6:	22 0f       	add	r18, r18
    d2e8:	33 1f       	adc	r19, r19
    d2ea:	a2 0f       	add	r26, r18
    d2ec:	b3 1f       	adc	r27, r19
    d2ee:	b6 cf       	rjmp	.-148    	; 0xd25c <ff_wtoupper+0x12>
	}

	return chr;
}
    d2f0:	08 95       	ret

0000d2f2 <disk_status>:

DSTATUS disk_status (
    BYTE pdrv       /* Physical drive nmuber to identify the drive */
)
{
    switch (pdrv) {
    d2f2:	81 11       	cpse	r24, r1
    case DRV_CFC :
        return cf_disk_status();
#endif
#ifdef DRV_MMC
    case DRV_MMC :
        return mmc_disk_status();
    d2f4:	02 c0       	rjmp	.+4      	; 0xd2fa <disk_status+0x8>
    d2f6:	9b c1       	rjmp	.+822    	; 0xd62e <mmc_disk_status>
#endif
    }
    return STA_NOINIT;
    d2f8:	08 95       	ret
}
    d2fa:	81 e0       	ldi	r24, 0x01	; 1
    d2fc:	08 95       	ret

0000d2fe <disk_initialize>:

DSTATUS disk_initialize (
    BYTE pdrv               /* Physical drive nmuber to identify the drive */
)
{
    switch (pdrv) {
    d2fe:	81 11       	cpse	r24, r1
    case DRV_CFC :
        return cf_disk_initialize();
#endif
#ifdef DRV_MMC
    case DRV_MMC :
        return mmc_disk_initialize();
    d300:	02 c0       	rjmp	.+4      	; 0xd306 <disk_initialize+0x8>
    d302:	f8 c0       	rjmp	.+496    	; 0xd4f4 <mmc_disk_initialize>
#endif
    }
    return STA_NOINIT;
    d304:	08 95       	ret
}
    d306:	81 e0       	ldi	r24, 0x01	; 1
    d308:	08 95       	ret

0000d30a <disk_read>:
    BYTE pdrv,      /* Physical drive nmuber to identify the drive */
    BYTE *buff,     /* Data buffer to store read data */
    DWORD sector,   /* Sector address in LBA */
    UINT count      /* Number of sectors to read */
)
{
    d30a:	0f 93       	push	r16
    d30c:	1f 93       	push	r17
    d30e:	fb 01       	movw	r30, r22
    switch (pdrv) {
    d310:	81 11       	cpse	r24, r1
    d312:	06 c0       	rjmp	.+12     	; 0xd320 <disk_read+0x16>
    d314:	ba 01       	movw	r22, r20
    d316:	a9 01       	movw	r20, r18
    d318:	cf 01       	movw	r24, r30
    case DRV_CFC :
        return cf_disk_read(buff, sector, count);
#endif
#ifdef DRV_MMC
    case DRV_MMC :
        return mmc_disk_read(buff, sector, count);
    d31a:	98 01       	movw	r18, r16
    d31c:	8b d1       	rcall	.+790    	; 0xd634 <mmc_disk_read>
    d31e:	02 c0       	rjmp	.+4      	; 0xd324 <disk_read+0x1a>
#endif
    }
    return RES_PARERR;
    d320:	84 e0       	ldi	r24, 0x04	; 4
    d322:	90 e0       	ldi	r25, 0x00	; 0
}
    d324:	1f 91       	pop	r17
    d326:	0f 91       	pop	r16
    d328:	08 95       	ret

0000d32a <disk_write>:
    BYTE pdrv,          /* Physical drive nmuber to identify the drive */
    const BYTE *buff,   /* Data to be written */
    DWORD sector,       /* Sector address in LBA */
    UINT count          /* Number of sectors to write */
)
{
    d32a:	0f 93       	push	r16
    d32c:	1f 93       	push	r17
    d32e:	fb 01       	movw	r30, r22
    switch (pdrv) {
    d330:	81 11       	cpse	r24, r1
    d332:	06 c0       	rjmp	.+12     	; 0xd340 <disk_write+0x16>
    d334:	ba 01       	movw	r22, r20
    d336:	a9 01       	movw	r20, r18
    d338:	cf 01       	movw	r24, r30
    case DRV_CFC :
        return cf_disk_write(buff, sector, count);
#endif
#ifdef DRV_MMC
    case DRV_MMC :
        return mmc_disk_write(buff, sector, count);
    d33a:	98 01       	movw	r18, r16
    d33c:	c1 d1       	rcall	.+898    	; 0xd6c0 <mmc_disk_write>
    d33e:	02 c0       	rjmp	.+4      	; 0xd344 <disk_write+0x1a>
#endif
    }
    return RES_PARERR;
    d340:	84 e0       	ldi	r24, 0x04	; 4
    d342:	90 e0       	ldi	r25, 0x00	; 0
}
    d344:	1f 91       	pop	r17
    d346:	0f 91       	pop	r16
    d348:	08 95       	ret

0000d34a <disk_ioctl>:
DRESULT disk_ioctl (
    BYTE pdrv,      /* Physical drive nmuber (0..) */
    BYTE cmd,       /* Control code */
    void *buff      /* Buffer to send/receive control data */
)
{
    d34a:	96 2f       	mov	r25, r22
    switch (pdrv) {
    d34c:	81 11       	cpse	r24, r1
    d34e:	04 c0       	rjmp	.+8      	; 0xd358 <disk_ioctl+0xe>
    d350:	ba 01       	movw	r22, r20
    case DRV_CFC :
        return cf_disk_ioctl(cmd, buff);
#endif
#ifdef DRV_MMC
    case DRV_MMC :
        return mmc_disk_ioctl(cmd, buff);
    d352:	89 2f       	mov	r24, r25
    d354:	1a c2       	rjmp	.+1076   	; 0xd78a <mmc_disk_ioctl>
#endif
    }
    return RES_PARERR;
    d356:	08 95       	ret
    d358:	84 e0       	ldi	r24, 0x04	; 4
}
    d35a:	90 e0       	ldi	r25, 0x00	; 0
    d35c:	08 95       	ret

0000d35e <xchg_spi>:
///@return Data read
static
BYTE xchg_spi (     /* Returns received data */
    BYTE dat        /* Data to be sent */
)
{
    d35e:	17 c5       	rjmp	.+2606   	; 0xdd8e <mmc_spi_TXRX>
    d360:	08 95       	ret

0000d362 <deselect>:
    d362:	ec d4       	rcall	.+2520   	; 0xdd3c <mmc_spi_end>
    d364:	8f ef       	ldi	r24, 0xFF	; 255
    d366:	fb df       	rcall	.-10     	; 0xd35e <xchg_spi>
    d368:	8f ef       	ldi	r24, 0xFF	; 255
    d36a:	f9 cf       	rjmp	.-14     	; 0xd35e <xchg_spi>
    d36c:	08 95       	ret

0000d36e <rcvr_datablock>:
    d36e:	0f 93       	push	r16
    d370:	1f 93       	push	r17
    d372:	cf 93       	push	r28
    d374:	df 93       	push	r29
    d376:	ec 01       	movw	r28, r24
    d378:	8b 01       	movw	r16, r22
    d37a:	46 9a       	sbi	0x08, 6	; 8
    d37c:	3e 9a       	sbi	0x07, 6	; 7
    d37e:	88 ee       	ldi	r24, 0xE8	; 232
    d380:	93 e0       	ldi	r25, 0x03	; 3
    d382:	08 d5       	rcall	.+2576   	; 0xdd94 <mmc_set_ms_timeout>
    d384:	8f ef       	ldi	r24, 0xFF	; 255
    d386:	03 d5       	rcall	.+2566   	; 0xdd8e <mmc_spi_TXRX>
    d388:	8f 3f       	cpi	r24, 0xFF	; 255
    d38a:	31 f4       	brne	.+12     	; 0xd398 <rcvr_datablock+0x2a>
    d38c:	0a d5       	rcall	.+2580   	; 0xdda2 <mmc_test_timeout>
    d38e:	89 2b       	or	r24, r25
    d390:	c9 f3       	breq	.-14     	; 0xd384 <rcvr_datablock+0x16>
    d392:	80 e0       	ldi	r24, 0x00	; 0
    d394:	90 e0       	ldi	r25, 0x00	; 0
    d396:	0d c0       	rjmp	.+26     	; 0xd3b2 <rcvr_datablock+0x44>
    d398:	8e 3f       	cpi	r24, 0xFE	; 254
    d39a:	d9 f7       	brne	.-10     	; 0xd392 <rcvr_datablock+0x24>
    d39c:	b8 01       	movw	r22, r16
    d39e:	ce 01       	movw	r24, r28
    d3a0:	f3 d4       	rcall	.+2534   	; 0xdd88 <mmc_spi_RX_buffer>
    d3a2:	8f ef       	ldi	r24, 0xFF	; 255
    d3a4:	dc df       	rcall	.-72     	; 0xd35e <xchg_spi>
    d3a6:	8f ef       	ldi	r24, 0xFF	; 255
    d3a8:	da df       	rcall	.-76     	; 0xd35e <xchg_spi>
    d3aa:	46 98       	cbi	0x08, 6	; 8
    d3ac:	3e 9a       	sbi	0x07, 6	; 7
    d3ae:	81 e0       	ldi	r24, 0x01	; 1
    d3b0:	90 e0       	ldi	r25, 0x00	; 0
    d3b2:	df 91       	pop	r29
    d3b4:	cf 91       	pop	r28
    d3b6:	1f 91       	pop	r17
    d3b8:	0f 91       	pop	r16
    d3ba:	08 95       	ret

0000d3bc <wait_ready>:
    d3bc:	cf 93       	push	r28
    d3be:	ea d4       	rcall	.+2516   	; 0xdd94 <mmc_set_ms_timeout>
    d3c0:	8f ef       	ldi	r24, 0xFF	; 255
    d3c2:	e5 d4       	rcall	.+2506   	; 0xdd8e <mmc_spi_TXRX>
    d3c4:	c8 2f       	mov	r28, r24
    d3c6:	8f 3f       	cpi	r24, 0xFF	; 255
    d3c8:	19 f0       	breq	.+6      	; 0xd3d0 <wait_ready+0x14>
    d3ca:	eb d4       	rcall	.+2518   	; 0xdda2 <mmc_test_timeout>
    d3cc:	89 2b       	or	r24, r25
    d3ce:	c1 f3       	breq	.-16     	; 0xd3c0 <wait_ready+0x4>
    d3d0:	81 e0       	ldi	r24, 0x01	; 1
    d3d2:	90 e0       	ldi	r25, 0x00	; 0
    d3d4:	cf 3f       	cpi	r28, 0xFF	; 255
    d3d6:	11 f0       	breq	.+4      	; 0xd3dc <wait_ready+0x20>
    d3d8:	80 e0       	ldi	r24, 0x00	; 0
    d3da:	90 e0       	ldi	r25, 0x00	; 0
    d3dc:	cf 91       	pop	r28
    d3de:	08 95       	ret

0000d3e0 <select>:
    d3e0:	cf 93       	push	r28
    d3e2:	df 93       	push	r29
    d3e4:	9e d4       	rcall	.+2364   	; 0xdd22 <mmc_spi_begin>
    d3e6:	8f ef       	ldi	r24, 0xFF	; 255
    d3e8:	ba df       	rcall	.-140    	; 0xd35e <xchg_spi>
    d3ea:	88 ee       	ldi	r24, 0xE8	; 232
    d3ec:	93 e0       	ldi	r25, 0x03	; 3
    d3ee:	e6 df       	rcall	.-52     	; 0xd3bc <wait_ready>
    d3f0:	ec 01       	movw	r28, r24
    d3f2:	89 2b       	or	r24, r25
    d3f4:	61 f4       	brne	.+24     	; 0xd40e <select+0x2e>
    d3f6:	82 ec       	ldi	r24, 0xC2	; 194
    d3f8:	97 e0       	ldi	r25, 0x07	; 7
    d3fa:	1f 92       	push	r1
    d3fc:	9f 93       	push	r25
    d3fe:	8f 93       	push	r24
    d400:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    d404:	ae df       	rcall	.-164    	; 0xd362 <deselect>
    d406:	0f 90       	pop	r0
    d408:	0f 90       	pop	r0
    d40a:	0f 90       	pop	r0
    d40c:	02 c0       	rjmp	.+4      	; 0xd412 <select+0x32>
    d40e:	c1 e0       	ldi	r28, 0x01	; 1
    d410:	d0 e0       	ldi	r29, 0x00	; 0
    d412:	ce 01       	movw	r24, r28
    d414:	df 91       	pop	r29
    d416:	cf 91       	pop	r28
    d418:	08 95       	ret

0000d41a <send_cmd>:
    d41a:	ff 92       	push	r15
    d41c:	0f 93       	push	r16
    d41e:	1f 93       	push	r17
    d420:	cf 93       	push	r28
    d422:	df 93       	push	r29
    d424:	c8 2f       	mov	r28, r24
    d426:	d4 2f       	mov	r29, r20
    d428:	15 2f       	mov	r17, r21
    d42a:	06 2f       	mov	r16, r22
    d42c:	f7 2e       	mov	r15, r23
    d42e:	87 ff       	sbrs	r24, 7
    d430:	08 c0       	rjmp	.+16     	; 0xd442 <send_cmd+0x28>
    d432:	40 e0       	ldi	r20, 0x00	; 0
    d434:	50 e0       	ldi	r21, 0x00	; 0
    d436:	ba 01       	movw	r22, r20
    d438:	87 e3       	ldi	r24, 0x37	; 55
    d43a:	ef df       	rcall	.-34     	; 0xd41a <send_cmd>
    d43c:	82 30       	cpi	r24, 0x02	; 2
    d43e:	58 f5       	brcc	.+86     	; 0xd496 <send_cmd+0x7c>
    d440:	cf 77       	andi	r28, 0x7F	; 127
    d442:	cc 30       	cpi	r28, 0x0C	; 12
    d444:	71 f4       	brne	.+28     	; 0xd462 <send_cmd+0x48>
    d446:	8c 2f       	mov	r24, r28
    d448:	80 64       	ori	r24, 0x40	; 64
    d44a:	89 df       	rcall	.-238    	; 0xd35e <xchg_spi>
    d44c:	8f 2d       	mov	r24, r15
    d44e:	87 df       	rcall	.-242    	; 0xd35e <xchg_spi>
    d450:	80 2f       	mov	r24, r16
    d452:	85 df       	rcall	.-246    	; 0xd35e <xchg_spi>
    d454:	81 2f       	mov	r24, r17
    d456:	83 df       	rcall	.-250    	; 0xd35e <xchg_spi>
    d458:	8d 2f       	mov	r24, r29
    d45a:	81 df       	rcall	.-254    	; 0xd35e <xchg_spi>
    d45c:	cc 23       	and	r28, r28
    d45e:	c9 f0       	breq	.+50     	; 0xd492 <send_cmd+0x78>
    d460:	06 c0       	rjmp	.+12     	; 0xd46e <send_cmd+0x54>
    d462:	7f df       	rcall	.-258    	; 0xd362 <deselect>
    d464:	bd df       	rcall	.-134    	; 0xd3e0 <select>
    d466:	89 2b       	or	r24, r25
    d468:	71 f7       	brne	.-36     	; 0xd446 <send_cmd+0x2c>
    d46a:	8f ef       	ldi	r24, 0xFF	; 255
    d46c:	14 c0       	rjmp	.+40     	; 0xd496 <send_cmd+0x7c>
    d46e:	c8 30       	cpi	r28, 0x08	; 8
    d470:	11 f4       	brne	.+4      	; 0xd476 <send_cmd+0x5c>
    d472:	87 e8       	ldi	r24, 0x87	; 135
    d474:	01 c0       	rjmp	.+2      	; 0xd478 <send_cmd+0x5e>
    d476:	81 e0       	ldi	r24, 0x01	; 1
    d478:	72 df       	rcall	.-284    	; 0xd35e <xchg_spi>
    d47a:	cc 30       	cpi	r28, 0x0C	; 12
    d47c:	11 f4       	brne	.+4      	; 0xd482 <send_cmd+0x68>
    d47e:	8f ef       	ldi	r24, 0xFF	; 255
    d480:	6e df       	rcall	.-292    	; 0xd35e <xchg_spi>
    d482:	ca e0       	ldi	r28, 0x0A	; 10
    d484:	8f ef       	ldi	r24, 0xFF	; 255
    d486:	83 d4       	rcall	.+2310   	; 0xdd8e <mmc_spi_TXRX>
    d488:	87 ff       	sbrs	r24, 7
    d48a:	05 c0       	rjmp	.+10     	; 0xd496 <send_cmd+0x7c>
    d48c:	c1 50       	subi	r28, 0x01	; 1
    d48e:	d1 f7       	brne	.-12     	; 0xd484 <send_cmd+0x6a>
    d490:	02 c0       	rjmp	.+4      	; 0xd496 <send_cmd+0x7c>
    d492:	85 e9       	ldi	r24, 0x95	; 149
    d494:	f5 cf       	rjmp	.-22     	; 0xd480 <send_cmd+0x66>
    d496:	cd b7       	in	r28, 0x3d	; 61
    d498:	de b7       	in	r29, 0x3e	; 62
    d49a:	e5 e0       	ldi	r30, 0x05	; 5
    d49c:	0c 94 3c e8 	jmp	0x1d078	; 0x1d078 <__epilogue_restores__+0x1a>

0000d4a0 <xmit_datablock>:
    d4a0:	0f 93       	push	r16
    d4a2:	1f 93       	push	r17
    d4a4:	cf 93       	push	r28
    d4a6:	8c 01       	movw	r16, r24
    d4a8:	c6 2f       	mov	r28, r22
    d4aa:	47 9a       	sbi	0x08, 7	; 8
    d4ac:	3f 9a       	sbi	0x07, 7	; 7
    d4ae:	88 ee       	ldi	r24, 0xE8	; 232
    d4b0:	93 e0       	ldi	r25, 0x03	; 3
    d4b2:	84 df       	rcall	.-248    	; 0xd3bc <wait_ready>
    d4b4:	89 2b       	or	r24, r25
    d4b6:	19 f4       	brne	.+6      	; 0xd4be <xmit_datablock+0x1e>
    d4b8:	80 e0       	ldi	r24, 0x00	; 0
    d4ba:	90 e0       	ldi	r25, 0x00	; 0
    d4bc:	17 c0       	rjmp	.+46     	; 0xd4ec <xmit_datablock+0x4c>
    d4be:	8c 2f       	mov	r24, r28
    d4c0:	4e df       	rcall	.-356    	; 0xd35e <xchg_spi>
    d4c2:	cd 3f       	cpi	r28, 0xFD	; 253
    d4c4:	29 f4       	brne	.+10     	; 0xd4d0 <xmit_datablock+0x30>
    d4c6:	46 98       	cbi	0x08, 6	; 8
    d4c8:	3e 9a       	sbi	0x07, 6	; 7
    d4ca:	81 e0       	ldi	r24, 0x01	; 1
    d4cc:	90 e0       	ldi	r25, 0x00	; 0
    d4ce:	0e c0       	rjmp	.+28     	; 0xd4ec <xmit_datablock+0x4c>
    d4d0:	60 e0       	ldi	r22, 0x00	; 0
    d4d2:	72 e0       	ldi	r23, 0x02	; 2
    d4d4:	c8 01       	movw	r24, r16
    d4d6:	55 d4       	rcall	.+2218   	; 0xdd82 <mmc_spi_TX_buffer>
    d4d8:	8f ef       	ldi	r24, 0xFF	; 255
    d4da:	41 df       	rcall	.-382    	; 0xd35e <xchg_spi>
    d4dc:	8f ef       	ldi	r24, 0xFF	; 255
    d4de:	3f df       	rcall	.-386    	; 0xd35e <xchg_spi>
    d4e0:	8f ef       	ldi	r24, 0xFF	; 255
    d4e2:	55 d4       	rcall	.+2218   	; 0xdd8e <mmc_spi_TXRX>
    d4e4:	8f 71       	andi	r24, 0x1F	; 31
    d4e6:	85 30       	cpi	r24, 0x05	; 5
    d4e8:	39 f7       	brne	.-50     	; 0xd4b8 <xmit_datablock+0x18>
    d4ea:	ed cf       	rjmp	.-38     	; 0xd4c6 <xmit_datablock+0x26>
    d4ec:	cf 91       	pop	r28
    d4ee:	1f 91       	pop	r17
    d4f0:	0f 91       	pop	r16
    d4f2:	08 95       	ret

0000d4f4 <mmc_disk_initialize>:
    d4f4:	a4 e0       	ldi	r26, 0x04	; 4
    d4f6:	b0 e0       	ldi	r27, 0x00	; 0
    d4f8:	e0 e8       	ldi	r30, 0x80	; 128
    d4fa:	fa e6       	ldi	r31, 0x6A	; 106
    d4fc:	0c 94 1d e8 	jmp	0x1d03a	; 0x1d03a <__prologue_saves__+0x14>
    d500:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    d504:	81 fd       	sbrc	r24, 1
    d506:	8d c0       	rjmp	.+282    	; 0xd622 <mmc_disk_initialize+0x12e>
    d508:	1d d4       	rcall	.+2106   	; 0xdd44 <mmc_slow>
    d50a:	1a e0       	ldi	r17, 0x0A	; 10
    d50c:	8f ef       	ldi	r24, 0xFF	; 255
    d50e:	27 df       	rcall	.-434    	; 0xd35e <xchg_spi>
    d510:	11 50       	subi	r17, 0x01	; 1
    d512:	e1 f7       	brne	.-8      	; 0xd50c <mmc_disk_initialize+0x18>
    d514:	40 e0       	ldi	r20, 0x00	; 0
    d516:	50 e0       	ldi	r21, 0x00	; 0
    d518:	ba 01       	movw	r22, r20
    d51a:	80 e0       	ldi	r24, 0x00	; 0
    d51c:	7e df       	rcall	.-260    	; 0xd41a <send_cmd>
    d51e:	81 30       	cpi	r24, 0x01	; 1
    d520:	09 f0       	breq	.+2      	; 0xd524 <mmc_disk_initialize+0x30>
    d522:	6f c0       	rjmp	.+222    	; 0xd602 <mmc_disk_initialize+0x10e>
    d524:	80 ed       	ldi	r24, 0xD0	; 208
    d526:	97 e0       	ldi	r25, 0x07	; 7
    d528:	35 d4       	rcall	.+2154   	; 0xdd94 <mmc_set_ms_timeout>
    d52a:	4a ea       	ldi	r20, 0xAA	; 170
    d52c:	51 e0       	ldi	r21, 0x01	; 1
    d52e:	60 e0       	ldi	r22, 0x00	; 0
    d530:	70 e0       	ldi	r23, 0x00	; 0
    d532:	88 e0       	ldi	r24, 0x08	; 8
    d534:	72 df       	rcall	.-284    	; 0xd41a <send_cmd>
    d536:	81 30       	cpi	r24, 0x01	; 1
    d538:	09 f0       	breq	.+2      	; 0xd53c <mmc_disk_initialize+0x48>
    d53a:	3d c0       	rjmp	.+122    	; 0xd5b6 <mmc_disk_initialize+0xc2>
    d53c:	8e 01       	movw	r16, r28
    d53e:	0f 5f       	subi	r16, 0xFF	; 255
    d540:	1f 4f       	sbci	r17, 0xFF	; 255
    d542:	6e 01       	movw	r12, r28
    d544:	85 e0       	ldi	r24, 0x05	; 5
    d546:	c8 0e       	add	r12, r24
    d548:	d1 1c       	adc	r13, r1
    d54a:	78 01       	movw	r14, r16
    d54c:	8f ef       	ldi	r24, 0xFF	; 255
    d54e:	1f d4       	rcall	.+2110   	; 0xdd8e <mmc_spi_TXRX>
    d550:	f7 01       	movw	r30, r14
    d552:	81 93       	st	Z+, r24
    d554:	7f 01       	movw	r14, r30
    d556:	ce 16       	cp	r12, r30
    d558:	df 06       	cpc	r13, r31
    d55a:	c1 f7       	brne	.-16     	; 0xd54c <mmc_disk_initialize+0x58>
    d55c:	8b 81       	ldd	r24, Y+3	; 0x03
    d55e:	81 30       	cpi	r24, 0x01	; 1
    d560:	09 f0       	breq	.+2      	; 0xd564 <mmc_disk_initialize+0x70>
    d562:	4f c0       	rjmp	.+158    	; 0xd602 <mmc_disk_initialize+0x10e>
    d564:	8c 81       	ldd	r24, Y+4	; 0x04
    d566:	8a 3a       	cpi	r24, 0xAA	; 170
    d568:	09 f0       	breq	.+2      	; 0xd56c <mmc_disk_initialize+0x78>
    d56a:	4b c0       	rjmp	.+150    	; 0xd602 <mmc_disk_initialize+0x10e>
    d56c:	1a d4       	rcall	.+2100   	; 0xdda2 <mmc_test_timeout>
    d56e:	89 2b       	or	r24, r25
    d570:	29 f0       	breq	.+10     	; 0xd57c <mmc_disk_initialize+0x88>
    d572:	17 d4       	rcall	.+2094   	; 0xdda2 <mmc_test_timeout>
    d574:	89 2b       	or	r24, r25
    d576:	09 f0       	breq	.+2      	; 0xd57a <mmc_disk_initialize+0x86>
    d578:	44 c0       	rjmp	.+136    	; 0xd602 <mmc_disk_initialize+0x10e>
    d57a:	09 c0       	rjmp	.+18     	; 0xd58e <mmc_disk_initialize+0x9a>
    d57c:	40 e0       	ldi	r20, 0x00	; 0
    d57e:	50 e0       	ldi	r21, 0x00	; 0
    d580:	60 e0       	ldi	r22, 0x00	; 0
    d582:	70 e4       	ldi	r23, 0x40	; 64
    d584:	89 ea       	ldi	r24, 0xA9	; 169
    d586:	49 df       	rcall	.-366    	; 0xd41a <send_cmd>
    d588:	81 11       	cpse	r24, r1
    d58a:	f0 cf       	rjmp	.-32     	; 0xd56c <mmc_disk_initialize+0x78>
    d58c:	f2 cf       	rjmp	.-28     	; 0xd572 <mmc_disk_initialize+0x7e>
    d58e:	40 e0       	ldi	r20, 0x00	; 0
    d590:	50 e0       	ldi	r21, 0x00	; 0
    d592:	ba 01       	movw	r22, r20
    d594:	8a e3       	ldi	r24, 0x3A	; 58
    d596:	41 df       	rcall	.-382    	; 0xd41a <send_cmd>
    d598:	81 11       	cpse	r24, r1
    d59a:	33 c0       	rjmp	.+102    	; 0xd602 <mmc_disk_initialize+0x10e>
    d59c:	8f ef       	ldi	r24, 0xFF	; 255
    d59e:	f7 d3       	rcall	.+2030   	; 0xdd8e <mmc_spi_TXRX>
    d5a0:	f8 01       	movw	r30, r16
    d5a2:	81 93       	st	Z+, r24
    d5a4:	8f 01       	movw	r16, r30
    d5a6:	ce 16       	cp	r12, r30
    d5a8:	df 06       	cpc	r13, r31
    d5aa:	c1 f7       	brne	.-16     	; 0xd59c <mmc_disk_initialize+0xa8>
    d5ac:	89 81       	ldd	r24, Y+1	; 0x01
    d5ae:	86 fd       	sbrc	r24, 6
    d5b0:	2a c0       	rjmp	.+84     	; 0xd606 <mmc_disk_initialize+0x112>
    d5b2:	14 e0       	ldi	r17, 0x04	; 4
    d5b4:	29 c0       	rjmp	.+82     	; 0xd608 <mmc_disk_initialize+0x114>
    d5b6:	80 ed       	ldi	r24, 0xD0	; 208
    d5b8:	97 e0       	ldi	r25, 0x07	; 7
    d5ba:	ec d3       	rcall	.+2008   	; 0xdd94 <mmc_set_ms_timeout>
    d5bc:	40 e0       	ldi	r20, 0x00	; 0
    d5be:	50 e0       	ldi	r21, 0x00	; 0
    d5c0:	ba 01       	movw	r22, r20
    d5c2:	89 ea       	ldi	r24, 0xA9	; 169
    d5c4:	2a df       	rcall	.-428    	; 0xd41a <send_cmd>
    d5c6:	82 30       	cpi	r24, 0x02	; 2
    d5c8:	18 f0       	brcs	.+6      	; 0xd5d0 <mmc_disk_initialize+0xdc>
    d5ca:	11 e0       	ldi	r17, 0x01	; 1
    d5cc:	01 e0       	ldi	r16, 0x01	; 1
    d5ce:	02 c0       	rjmp	.+4      	; 0xd5d4 <mmc_disk_initialize+0xe0>
    d5d0:	12 e0       	ldi	r17, 0x02	; 2
    d5d2:	09 ea       	ldi	r16, 0xA9	; 169
    d5d4:	e6 d3       	rcall	.+1996   	; 0xdda2 <mmc_test_timeout>
    d5d6:	89 2b       	or	r24, r25
    d5d8:	21 f0       	breq	.+8      	; 0xd5e2 <mmc_disk_initialize+0xee>
    d5da:	e3 d3       	rcall	.+1990   	; 0xdda2 <mmc_test_timeout>
    d5dc:	89 2b       	or	r24, r25
    d5de:	89 f4       	brne	.+34     	; 0xd602 <mmc_disk_initialize+0x10e>
    d5e0:	08 c0       	rjmp	.+16     	; 0xd5f2 <mmc_disk_initialize+0xfe>
    d5e2:	40 e0       	ldi	r20, 0x00	; 0
    d5e4:	50 e0       	ldi	r21, 0x00	; 0
    d5e6:	ba 01       	movw	r22, r20
    d5e8:	80 2f       	mov	r24, r16
    d5ea:	17 df       	rcall	.-466    	; 0xd41a <send_cmd>
    d5ec:	81 11       	cpse	r24, r1
    d5ee:	f2 cf       	rjmp	.-28     	; 0xd5d4 <mmc_disk_initialize+0xe0>
    d5f0:	f4 cf       	rjmp	.-24     	; 0xd5da <mmc_disk_initialize+0xe6>
    d5f2:	40 e0       	ldi	r20, 0x00	; 0
    d5f4:	52 e0       	ldi	r21, 0x02	; 2
    d5f6:	60 e0       	ldi	r22, 0x00	; 0
    d5f8:	70 e0       	ldi	r23, 0x00	; 0
    d5fa:	80 e1       	ldi	r24, 0x10	; 16
    d5fc:	0e df       	rcall	.-484    	; 0xd41a <send_cmd>
    d5fe:	88 23       	and	r24, r24
    d600:	19 f0       	breq	.+6      	; 0xd608 <mmc_disk_initialize+0x114>
    d602:	10 e0       	ldi	r17, 0x00	; 0
    d604:	01 c0       	rjmp	.+2      	; 0xd608 <mmc_disk_initialize+0x114>
    d606:	1c e0       	ldi	r17, 0x0C	; 12
    d608:	10 93 38 18 	sts	0x1838, r17	; 0x801838 <CardType>
    d60c:	aa de       	rcall	.-684    	; 0xd362 <deselect>
    d60e:	11 23       	and	r17, r17
    d610:	39 f0       	breq	.+14     	; 0xd620 <mmc_disk_initialize+0x12c>
    d612:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    d616:	8e 7f       	andi	r24, 0xFE	; 254
    d618:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <Stat>
    d61c:	a5 d3       	rcall	.+1866   	; 0xdd68 <mmc_fast>
    d61e:	01 c0       	rjmp	.+2      	; 0xd622 <mmc_disk_initialize+0x12e>
    d620:	84 d4       	rcall	.+2312   	; 0xdf2a <mmc_power_off>
    d622:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    d626:	24 96       	adiw	r28, 0x04	; 4
    d628:	e8 e0       	ldi	r30, 0x08	; 8
    d62a:	0c 94 39 e8 	jmp	0x1d072	; 0x1d072 <__epilogue_restores__+0x14>

0000d62e <mmc_disk_status>:
    d62e:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    d632:	08 95       	ret

0000d634 <mmc_disk_read>:
    d634:	ef 92       	push	r14
    d636:	ff 92       	push	r15
    d638:	1f 93       	push	r17
    d63a:	cf 93       	push	r28
    d63c:	df 93       	push	r29
    d63e:	7c 01       	movw	r14, r24
    d640:	e9 01       	movw	r28, r18
    d642:	20 97       	sbiw	r28, 0x00	; 0
    d644:	19 f4       	brne	.+6      	; 0xd64c <mmc_disk_read+0x18>
    d646:	8d de       	rcall	.-742    	; 0xd362 <deselect>
    d648:	84 e0       	ldi	r24, 0x04	; 4
    d64a:	06 c0       	rjmp	.+12     	; 0xd658 <mmc_disk_read+0x24>
    d64c:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    d650:	80 ff       	sbrs	r24, 0
    d652:	04 c0       	rjmp	.+8      	; 0xd65c <mmc_disk_read+0x28>
    d654:	86 de       	rcall	.-756    	; 0xd362 <deselect>
    d656:	83 e0       	ldi	r24, 0x03	; 3
    d658:	90 e0       	ldi	r25, 0x00	; 0
    d65a:	2c c0       	rjmp	.+88     	; 0xd6b4 <mmc_disk_read+0x80>
    d65c:	80 91 38 18 	lds	r24, 0x1838	; 0x801838 <CardType>
    d660:	83 fd       	sbrc	r24, 3
    d662:	07 c0       	rjmp	.+14     	; 0xd672 <mmc_disk_read+0x3e>
    d664:	89 e0       	ldi	r24, 0x09	; 9
    d666:	44 0f       	add	r20, r20
    d668:	55 1f       	adc	r21, r21
    d66a:	66 1f       	adc	r22, r22
    d66c:	77 1f       	adc	r23, r23
    d66e:	8a 95       	dec	r24
    d670:	d1 f7       	brne	.-12     	; 0xd666 <mmc_disk_read+0x32>
    d672:	c2 30       	cpi	r28, 0x02	; 2
    d674:	d1 05       	cpc	r29, r1
    d676:	10 f4       	brcc	.+4      	; 0xd67c <mmc_disk_read+0x48>
    d678:	11 e1       	ldi	r17, 0x11	; 17
    d67a:	01 c0       	rjmp	.+2      	; 0xd67e <mmc_disk_read+0x4a>
    d67c:	12 e1       	ldi	r17, 0x12	; 18
    d67e:	81 2f       	mov	r24, r17
    d680:	cc de       	rcall	.-616    	; 0xd41a <send_cmd>
    d682:	81 11       	cpse	r24, r1
    d684:	11 c0       	rjmp	.+34     	; 0xd6a8 <mmc_disk_read+0x74>
    d686:	60 e0       	ldi	r22, 0x00	; 0
    d688:	72 e0       	ldi	r23, 0x02	; 2
    d68a:	c7 01       	movw	r24, r14
    d68c:	70 de       	rcall	.-800    	; 0xd36e <rcvr_datablock>
    d68e:	89 2b       	or	r24, r25
    d690:	21 f0       	breq	.+8      	; 0xd69a <mmc_disk_read+0x66>
    d692:	8e ef       	ldi	r24, 0xFE	; 254
    d694:	f8 1a       	sub	r15, r24
    d696:	21 97       	sbiw	r28, 0x01	; 1
    d698:	b1 f7       	brne	.-20     	; 0xd686 <mmc_disk_read+0x52>
    d69a:	12 31       	cpi	r17, 0x12	; 18
    d69c:	29 f4       	brne	.+10     	; 0xd6a8 <mmc_disk_read+0x74>
    d69e:	40 e0       	ldi	r20, 0x00	; 0
    d6a0:	50 e0       	ldi	r21, 0x00	; 0
    d6a2:	ba 01       	movw	r22, r20
    d6a4:	8c e0       	ldi	r24, 0x0C	; 12
    d6a6:	b9 de       	rcall	.-654    	; 0xd41a <send_cmd>
    d6a8:	5c de       	rcall	.-840    	; 0xd362 <deselect>
    d6aa:	81 e0       	ldi	r24, 0x01	; 1
    d6ac:	90 e0       	ldi	r25, 0x00	; 0
    d6ae:	cd 2b       	or	r28, r29
    d6b0:	09 f4       	brne	.+2      	; 0xd6b4 <mmc_disk_read+0x80>
    d6b2:	80 e0       	ldi	r24, 0x00	; 0
    d6b4:	df 91       	pop	r29
    d6b6:	cf 91       	pop	r28
    d6b8:	1f 91       	pop	r17
    d6ba:	ff 90       	pop	r15
    d6bc:	ef 90       	pop	r14
    d6be:	08 95       	ret

0000d6c0 <mmc_disk_write>:
    d6c0:	a0 e0       	ldi	r26, 0x00	; 0
    d6c2:	b0 e0       	ldi	r27, 0x00	; 0
    d6c4:	e6 e6       	ldi	r30, 0x66	; 102
    d6c6:	fb e6       	ldi	r31, 0x6B	; 107
    d6c8:	0c 94 1d e8 	jmp	0x1d03a	; 0x1d03a <__prologue_saves__+0x14>
    d6cc:	8c 01       	movw	r16, r24
    d6ce:	6a 01       	movw	r12, r20
    d6d0:	7b 01       	movw	r14, r22
    d6d2:	e9 01       	movw	r28, r18
    d6d4:	20 97       	sbiw	r28, 0x00	; 0
    d6d6:	19 f4       	brne	.+6      	; 0xd6de <mmc_disk_write+0x1e>
    d6d8:	44 de       	rcall	.-888    	; 0xd362 <deselect>
    d6da:	84 e0       	ldi	r24, 0x04	; 4
    d6dc:	06 c0       	rjmp	.+12     	; 0xd6ea <mmc_disk_write+0x2a>
    d6de:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    d6e2:	80 ff       	sbrs	r24, 0
    d6e4:	04 c0       	rjmp	.+8      	; 0xd6ee <mmc_disk_write+0x2e>
    d6e6:	3d de       	rcall	.-902    	; 0xd362 <deselect>
    d6e8:	83 e0       	ldi	r24, 0x03	; 3
    d6ea:	90 e0       	ldi	r25, 0x00	; 0
    d6ec:	49 c0       	rjmp	.+146    	; 0xd780 <mmc_disk_write+0xc0>
    d6ee:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    d6f2:	82 ff       	sbrs	r24, 2
    d6f4:	03 c0       	rjmp	.+6      	; 0xd6fc <mmc_disk_write+0x3c>
    d6f6:	35 de       	rcall	.-918    	; 0xd362 <deselect>
    d6f8:	82 e0       	ldi	r24, 0x02	; 2
    d6fa:	f7 cf       	rjmp	.-18     	; 0xd6ea <mmc_disk_write+0x2a>
    d6fc:	80 91 38 18 	lds	r24, 0x1838	; 0x801838 <CardType>
    d700:	83 fd       	sbrc	r24, 3
    d702:	07 c0       	rjmp	.+14     	; 0xd712 <mmc_disk_write+0x52>
    d704:	99 e0       	ldi	r25, 0x09	; 9
    d706:	cc 0c       	add	r12, r12
    d708:	dd 1c       	adc	r13, r13
    d70a:	ee 1c       	adc	r14, r14
    d70c:	ff 1c       	adc	r15, r15
    d70e:	9a 95       	dec	r25
    d710:	d1 f7       	brne	.-12     	; 0xd706 <mmc_disk_write+0x46>
    d712:	c1 30       	cpi	r28, 0x01	; 1
    d714:	d1 05       	cpc	r29, r1
    d716:	89 f4       	brne	.+34     	; 0xd73a <mmc_disk_write+0x7a>
    d718:	b7 01       	movw	r22, r14
    d71a:	a6 01       	movw	r20, r12
    d71c:	88 e1       	ldi	r24, 0x18	; 24
    d71e:	7d de       	rcall	.-774    	; 0xd41a <send_cmd>
    d720:	81 11       	cpse	r24, r1
    d722:	26 c0       	rjmp	.+76     	; 0xd770 <mmc_disk_write+0xb0>
    d724:	6e ef       	ldi	r22, 0xFE	; 254
    d726:	c8 01       	movw	r24, r16
    d728:	bb de       	rcall	.-650    	; 0xd4a0 <xmit_datablock>
    d72a:	31 e0       	ldi	r19, 0x01	; 1
    d72c:	20 e0       	ldi	r18, 0x00	; 0
    d72e:	89 2b       	or	r24, r25
    d730:	09 f0       	breq	.+2      	; 0xd734 <mmc_disk_write+0x74>
    d732:	30 e0       	ldi	r19, 0x00	; 0
    d734:	c3 2f       	mov	r28, r19
    d736:	d2 2f       	mov	r29, r18
    d738:	1d c0       	rjmp	.+58     	; 0xd774 <mmc_disk_write+0xb4>
    d73a:	86 70       	andi	r24, 0x06	; 6
    d73c:	29 f0       	breq	.+10     	; 0xd748 <mmc_disk_write+0x88>
    d73e:	ae 01       	movw	r20, r28
    d740:	60 e0       	ldi	r22, 0x00	; 0
    d742:	70 e0       	ldi	r23, 0x00	; 0
    d744:	87 e9       	ldi	r24, 0x97	; 151
    d746:	69 de       	rcall	.-814    	; 0xd41a <send_cmd>
    d748:	b7 01       	movw	r22, r14
    d74a:	a6 01       	movw	r20, r12
    d74c:	89 e1       	ldi	r24, 0x19	; 25
    d74e:	65 de       	rcall	.-822    	; 0xd41a <send_cmd>
    d750:	81 11       	cpse	r24, r1
    d752:	10 c0       	rjmp	.+32     	; 0xd774 <mmc_disk_write+0xb4>
    d754:	6c ef       	ldi	r22, 0xFC	; 252
    d756:	c8 01       	movw	r24, r16
    d758:	a3 de       	rcall	.-698    	; 0xd4a0 <xmit_datablock>
    d75a:	89 2b       	or	r24, r25
    d75c:	19 f0       	breq	.+6      	; 0xd764 <mmc_disk_write+0xa4>
    d75e:	1e 5f       	subi	r17, 0xFE	; 254
    d760:	21 97       	sbiw	r28, 0x01	; 1
    d762:	c1 f7       	brne	.-16     	; 0xd754 <mmc_disk_write+0x94>
    d764:	6d ef       	ldi	r22, 0xFD	; 253
    d766:	80 e0       	ldi	r24, 0x00	; 0
    d768:	90 e0       	ldi	r25, 0x00	; 0
    d76a:	9a de       	rcall	.-716    	; 0xd4a0 <xmit_datablock>
    d76c:	89 2b       	or	r24, r25
    d76e:	11 f4       	brne	.+4      	; 0xd774 <mmc_disk_write+0xb4>
    d770:	c1 e0       	ldi	r28, 0x01	; 1
    d772:	d0 e0       	ldi	r29, 0x00	; 0
    d774:	f6 dd       	rcall	.-1044   	; 0xd362 <deselect>
    d776:	81 e0       	ldi	r24, 0x01	; 1
    d778:	90 e0       	ldi	r25, 0x00	; 0
    d77a:	cd 2b       	or	r28, r29
    d77c:	09 f4       	brne	.+2      	; 0xd780 <mmc_disk_write+0xc0>
    d77e:	80 e0       	ldi	r24, 0x00	; 0
    d780:	cd b7       	in	r28, 0x3d	; 61
    d782:	de b7       	in	r29, 0x3e	; 62
    d784:	e8 e0       	ldi	r30, 0x08	; 8
    d786:	0c 94 39 e8 	jmp	0x1d072	; 0x1d072 <__epilogue_restores__+0x14>

0000d78a <mmc_disk_ioctl>:
    d78a:	a0 e1       	ldi	r26, 0x10	; 16
    d78c:	b0 e0       	ldi	r27, 0x00	; 0
    d78e:	eb ec       	ldi	r30, 0xCB	; 203
    d790:	fb e6       	ldi	r31, 0x6B	; 107
    d792:	0c 94 1d e8 	jmp	0x1d03a	; 0x1d03a <__prologue_saves__+0x14>
    d796:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <Stat>
    d79a:	90 fd       	sbrc	r25, 0
    d79c:	75 c2       	rjmp	.+1258   	; 0xdc88 <mmc_disk_ioctl+0x4fe>
    d79e:	8b 01       	movw	r16, r22
    d7a0:	83 33       	cpi	r24, 0x33	; 51
    d7a2:	09 f4       	brne	.+2      	; 0xd7a6 <mmc_disk_ioctl+0x1c>
    d7a4:	4b c1       	rjmp	.+662    	; 0xda3c <mmc_disk_ioctl+0x2b2>
    d7a6:	98 f4       	brcc	.+38     	; 0xd7ce <mmc_disk_ioctl+0x44>
    d7a8:	83 30       	cpi	r24, 0x03	; 3
    d7aa:	09 f4       	brne	.+2      	; 0xd7ae <mmc_disk_ioctl+0x24>
    d7ac:	84 c0       	rjmp	.+264    	; 0xd8b6 <mmc_disk_ioctl+0x12c>
    d7ae:	28 f4       	brcc	.+10     	; 0xd7ba <mmc_disk_ioctl+0x30>
    d7b0:	88 23       	and	r24, r24
    d7b2:	09 f1       	breq	.+66     	; 0xd7f6 <mmc_disk_ioctl+0x6c>
    d7b4:	81 30       	cpi	r24, 0x01	; 1
    d7b6:	09 f1       	breq	.+66     	; 0xd7fa <mmc_disk_ioctl+0x70>
    d7b8:	69 c2       	rjmp	.+1234   	; 0xdc8c <mmc_disk_ioctl+0x502>
    d7ba:	87 30       	cpi	r24, 0x07	; 7
    d7bc:	09 f4       	brne	.+2      	; 0xd7c0 <mmc_disk_ioctl+0x36>
    d7be:	74 c1       	rjmp	.+744    	; 0xdaa8 <mmc_disk_ioctl+0x31e>
    d7c0:	82 33       	cpi	r24, 0x32	; 50
    d7c2:	09 f4       	brne	.+2      	; 0xd7c6 <mmc_disk_ioctl+0x3c>
    d7c4:	36 c1       	rjmp	.+620    	; 0xda32 <mmc_disk_ioctl+0x2a8>
    d7c6:	84 30       	cpi	r24, 0x04	; 4
    d7c8:	09 f0       	breq	.+2      	; 0xd7cc <mmc_disk_ioctl+0x42>
    d7ca:	60 c2       	rjmp	.+1216   	; 0xdc8c <mmc_disk_ioctl+0x502>
    d7cc:	ec c0       	rjmp	.+472    	; 0xd9a6 <mmc_disk_ioctl+0x21c>
    d7ce:	86 33       	cpi	r24, 0x36	; 54
    d7d0:	09 f4       	brne	.+2      	; 0xd7d4 <mmc_disk_ioctl+0x4a>
    d7d2:	57 c1       	rjmp	.+686    	; 0xda82 <mmc_disk_ioctl+0x2f8>
    d7d4:	38 f4       	brcc	.+14     	; 0xd7e4 <mmc_disk_ioctl+0x5a>
    d7d6:	84 33       	cpi	r24, 0x34	; 52
    d7d8:	09 f4       	brne	.+2      	; 0xd7dc <mmc_disk_ioctl+0x52>
    d7da:	35 c1       	rjmp	.+618    	; 0xda46 <mmc_disk_ioctl+0x2bc>
    d7dc:	85 33       	cpi	r24, 0x35	; 53
    d7de:	09 f4       	brne	.+2      	; 0xd7e2 <mmc_disk_ioctl+0x58>
    d7e0:	3c c1       	rjmp	.+632    	; 0xda5a <mmc_disk_ioctl+0x2d0>
    d7e2:	54 c2       	rjmp	.+1192   	; 0xdc8c <mmc_disk_ioctl+0x502>
    d7e4:	88 33       	cpi	r24, 0x38	; 56
    d7e6:	09 f4       	brne	.+2      	; 0xd7ea <mmc_disk_ioctl+0x60>
    d7e8:	bf c1       	rjmp	.+894    	; 0xdb68 <mmc_disk_ioctl+0x3de>
    d7ea:	08 f4       	brcc	.+2      	; 0xd7ee <mmc_disk_ioctl+0x64>
    d7ec:	65 c1       	rjmp	.+714    	; 0xdab8 <mmc_disk_ioctl+0x32e>
    d7ee:	89 33       	cpi	r24, 0x39	; 57
    d7f0:	09 f4       	brne	.+2      	; 0xd7f4 <mmc_disk_ioctl+0x6a>
    d7f2:	07 c2       	rjmp	.+1038   	; 0xdc02 <mmc_disk_ioctl+0x478>
    d7f4:	4b c2       	rjmp	.+1174   	; 0xdc8c <mmc_disk_ioctl+0x502>
    d7f6:	f4 dd       	rcall	.-1048   	; 0xd3e0 <select>
    d7f8:	51 c1       	rjmp	.+674    	; 0xda9c <mmc_disk_ioctl+0x312>
    d7fa:	40 e0       	ldi	r20, 0x00	; 0
    d7fc:	50 e0       	ldi	r21, 0x00	; 0
    d7fe:	ba 01       	movw	r22, r20
    d800:	89 e0       	ldi	r24, 0x09	; 9
    d802:	0b de       	rcall	.-1002   	; 0xd41a <send_cmd>
    d804:	81 11       	cpse	r24, r1
    d806:	3c c2       	rjmp	.+1144   	; 0xdc80 <mmc_disk_ioctl+0x4f6>
    d808:	60 e1       	ldi	r22, 0x10	; 16
    d80a:	70 e0       	ldi	r23, 0x00	; 0
    d80c:	ce 01       	movw	r24, r28
    d80e:	01 96       	adiw	r24, 0x01	; 1
    d810:	ae dd       	rcall	.-1188   	; 0xd36e <rcvr_datablock>
    d812:	89 2b       	or	r24, r25
    d814:	09 f4       	brne	.+2      	; 0xd818 <mmc_disk_ioctl+0x8e>
    d816:	34 c2       	rjmp	.+1128   	; 0xdc80 <mmc_disk_ioctl+0x4f6>
    d818:	99 81       	ldd	r25, Y+1	; 0x01
    d81a:	92 95       	swap	r25
    d81c:	96 95       	lsr	r25
    d81e:	96 95       	lsr	r25
    d820:	93 70       	andi	r25, 0x03	; 3
    d822:	29 85       	ldd	r18, Y+9	; 0x09
    d824:	4a 85       	ldd	r20, Y+10	; 0x0a
    d826:	88 85       	ldd	r24, Y+8	; 0x08
    d828:	91 30       	cpi	r25, 0x01	; 1
    d82a:	d9 f4       	brne	.+54     	; 0xd862 <mmc_disk_ioctl+0xd8>
    d82c:	30 e0       	ldi	r19, 0x00	; 0
    d82e:	32 2f       	mov	r19, r18
    d830:	22 27       	eor	r18, r18
    d832:	24 0f       	add	r18, r20
    d834:	31 1d       	adc	r19, r1
    d836:	8f 73       	andi	r24, 0x3F	; 63
    d838:	90 e0       	ldi	r25, 0x00	; 0
    d83a:	a0 e0       	ldi	r26, 0x00	; 0
    d83c:	b0 e0       	ldi	r27, 0x00	; 0
    d83e:	dc 01       	movw	r26, r24
    d840:	99 27       	eor	r25, r25
    d842:	88 27       	eor	r24, r24
    d844:	01 96       	adiw	r24, 0x01	; 1
    d846:	a1 1d       	adc	r26, r1
    d848:	b1 1d       	adc	r27, r1
    d84a:	82 0f       	add	r24, r18
    d84c:	93 1f       	adc	r25, r19
    d84e:	a1 1d       	adc	r26, r1
    d850:	b1 1d       	adc	r27, r1
    d852:	5a e0       	ldi	r21, 0x0A	; 10
    d854:	88 0f       	add	r24, r24
    d856:	99 1f       	adc	r25, r25
    d858:	aa 1f       	adc	r26, r26
    d85a:	bb 1f       	adc	r27, r27
    d85c:	5a 95       	dec	r21
    d85e:	d1 f7       	brne	.-12     	; 0xd854 <mmc_disk_ioctl+0xca>
    d860:	9b c0       	rjmp	.+310    	; 0xd998 <mmc_disk_ioctl+0x20e>
    d862:	22 95       	swap	r18
    d864:	26 95       	lsr	r18
    d866:	26 95       	lsr	r18
    d868:	23 70       	andi	r18, 0x03	; 3
    d86a:	f4 e0       	ldi	r31, 0x04	; 4
    d86c:	8f 9f       	mul	r24, r31
    d86e:	c0 01       	movw	r24, r0
    d870:	11 24       	eor	r1, r1
    d872:	82 0f       	add	r24, r18
    d874:	91 1d       	adc	r25, r1
    d876:	01 96       	adiw	r24, 0x01	; 1
    d878:	2f 81       	ldd	r18, Y+7	; 0x07
    d87a:	23 70       	andi	r18, 0x03	; 3
    d87c:	30 e0       	ldi	r19, 0x00	; 0
    d87e:	32 2f       	mov	r19, r18
    d880:	22 27       	eor	r18, r18
    d882:	33 0f       	add	r19, r19
    d884:	33 0f       	add	r19, r19
    d886:	82 0f       	add	r24, r18
    d888:	93 1f       	adc	r25, r19
    d88a:	a0 e0       	ldi	r26, 0x00	; 0
    d88c:	b0 e0       	ldi	r27, 0x00	; 0
    d88e:	2e 81       	ldd	r18, Y+6	; 0x06
    d890:	32 2f       	mov	r19, r18
    d892:	3f 70       	andi	r19, 0x0F	; 15
    d894:	2b 85       	ldd	r18, Y+11	; 0x0b
    d896:	22 1f       	adc	r18, r18
    d898:	22 27       	eor	r18, r18
    d89a:	22 1f       	adc	r18, r18
    d89c:	23 0f       	add	r18, r19
    d89e:	43 70       	andi	r20, 0x03	; 3
    d8a0:	44 0f       	add	r20, r20
    d8a2:	42 0f       	add	r20, r18
    d8a4:	47 50       	subi	r20, 0x07	; 7
    d8a6:	04 c0       	rjmp	.+8      	; 0xd8b0 <mmc_disk_ioctl+0x126>
    d8a8:	88 0f       	add	r24, r24
    d8aa:	99 1f       	adc	r25, r25
    d8ac:	aa 1f       	adc	r26, r26
    d8ae:	bb 1f       	adc	r27, r27
    d8b0:	4a 95       	dec	r20
    d8b2:	d2 f7       	brpl	.-12     	; 0xd8a8 <mmc_disk_ioctl+0x11e>
    d8b4:	71 c0       	rjmp	.+226    	; 0xd998 <mmc_disk_ioctl+0x20e>
    d8b6:	80 91 38 18 	lds	r24, 0x1838	; 0x801838 <CardType>
    d8ba:	40 e0       	ldi	r20, 0x00	; 0
    d8bc:	50 e0       	ldi	r21, 0x00	; 0
    d8be:	ba 01       	movw	r22, r20
    d8c0:	82 ff       	sbrs	r24, 2
    d8c2:	24 c0       	rjmp	.+72     	; 0xd90c <mmc_disk_ioctl+0x182>
    d8c4:	8d e8       	ldi	r24, 0x8D	; 141
    d8c6:	a9 dd       	rcall	.-1198   	; 0xd41a <send_cmd>
    d8c8:	81 11       	cpse	r24, r1
    d8ca:	da c1       	rjmp	.+948    	; 0xdc80 <mmc_disk_ioctl+0x4f6>
    d8cc:	8f ef       	ldi	r24, 0xFF	; 255
    d8ce:	47 dd       	rcall	.-1394   	; 0xd35e <xchg_spi>
    d8d0:	60 e1       	ldi	r22, 0x10	; 16
    d8d2:	70 e0       	ldi	r23, 0x00	; 0
    d8d4:	ce 01       	movw	r24, r28
    d8d6:	01 96       	adiw	r24, 0x01	; 1
    d8d8:	4a dd       	rcall	.-1388   	; 0xd36e <rcvr_datablock>
    d8da:	89 2b       	or	r24, r25
    d8dc:	09 f4       	brne	.+2      	; 0xd8e0 <mmc_disk_ioctl+0x156>
    d8de:	d0 c1       	rjmp	.+928    	; 0xdc80 <mmc_disk_ioctl+0x4f6>
    d8e0:	a0 e3       	ldi	r26, 0x30	; 48
    d8e2:	fa 2e       	mov	r15, r26
    d8e4:	8f ef       	ldi	r24, 0xFF	; 255
    d8e6:	3b dd       	rcall	.-1418   	; 0xd35e <xchg_spi>
    d8e8:	fa 94       	dec	r15
    d8ea:	f1 10       	cpse	r15, r1
    d8ec:	fb cf       	rjmp	.-10     	; 0xd8e4 <mmc_disk_ioctl+0x15a>
    d8ee:	2b 85       	ldd	r18, Y+11	; 0x0b
    d8f0:	22 95       	swap	r18
    d8f2:	2f 70       	andi	r18, 0x0F	; 15
    d8f4:	80 e1       	ldi	r24, 0x10	; 16
    d8f6:	90 e0       	ldi	r25, 0x00	; 0
    d8f8:	a0 e0       	ldi	r26, 0x00	; 0
    d8fa:	b0 e0       	ldi	r27, 0x00	; 0
    d8fc:	04 c0       	rjmp	.+8      	; 0xd906 <mmc_disk_ioctl+0x17c>
    d8fe:	88 0f       	add	r24, r24
    d900:	99 1f       	adc	r25, r25
    d902:	aa 1f       	adc	r26, r26
    d904:	bb 1f       	adc	r27, r27
    d906:	2a 95       	dec	r18
    d908:	d2 f7       	brpl	.-12     	; 0xd8fe <mmc_disk_ioctl+0x174>
    d90a:	46 c0       	rjmp	.+140    	; 0xd998 <mmc_disk_ioctl+0x20e>
    d90c:	89 e0       	ldi	r24, 0x09	; 9
    d90e:	85 dd       	rcall	.-1270   	; 0xd41a <send_cmd>
    d910:	81 11       	cpse	r24, r1
    d912:	b6 c1       	rjmp	.+876    	; 0xdc80 <mmc_disk_ioctl+0x4f6>
    d914:	60 e1       	ldi	r22, 0x10	; 16
    d916:	70 e0       	ldi	r23, 0x00	; 0
    d918:	ce 01       	movw	r24, r28
    d91a:	01 96       	adiw	r24, 0x01	; 1
    d91c:	28 dd       	rcall	.-1456   	; 0xd36e <rcvr_datablock>
    d91e:	89 2b       	or	r24, r25
    d920:	09 f4       	brne	.+2      	; 0xd924 <mmc_disk_ioctl+0x19a>
    d922:	ae c1       	rjmp	.+860    	; 0xdc80 <mmc_disk_ioctl+0x4f6>
    d924:	90 91 38 18 	lds	r25, 0x1838	; 0x801838 <CardType>
    d928:	2b 85       	ldd	r18, Y+11	; 0x0b
    d92a:	8c 85       	ldd	r24, Y+12	; 0x0c
    d92c:	91 ff       	sbrs	r25, 1
    d92e:	16 c0       	rjmp	.+44     	; 0xd95c <mmc_disk_ioctl+0x1d2>
    d930:	2f 73       	andi	r18, 0x3F	; 63
    d932:	88 1f       	adc	r24, r24
    d934:	88 27       	eor	r24, r24
    d936:	88 1f       	adc	r24, r24
    d938:	90 e0       	ldi	r25, 0x00	; 0
    d93a:	01 96       	adiw	r24, 0x01	; 1
    d93c:	82 0f       	add	r24, r18
    d93e:	91 1d       	adc	r25, r1
    d940:	82 0f       	add	r24, r18
    d942:	91 1d       	adc	r25, r1
    d944:	2e 85       	ldd	r18, Y+14	; 0x0e
    d946:	22 95       	swap	r18
    d948:	26 95       	lsr	r18
    d94a:	26 95       	lsr	r18
    d94c:	23 70       	andi	r18, 0x03	; 3
    d94e:	21 50       	subi	r18, 0x01	; 1
    d950:	02 c0       	rjmp	.+4      	; 0xd956 <mmc_disk_ioctl+0x1cc>
    d952:	88 0f       	add	r24, r24
    d954:	99 1f       	adc	r25, r25
    d956:	2a 95       	dec	r18
    d958:	e2 f7       	brpl	.-8      	; 0xd952 <mmc_disk_ioctl+0x1c8>
    d95a:	1c c0       	rjmp	.+56     	; 0xd994 <mmc_disk_ioctl+0x20a>
    d95c:	38 2f       	mov	r19, r24
    d95e:	33 70       	andi	r19, 0x03	; 3
    d960:	82 95       	swap	r24
    d962:	86 95       	lsr	r24
    d964:	87 70       	andi	r24, 0x07	; 7
    d966:	90 e0       	ldi	r25, 0x00	; 0
    d968:	f8 e0       	ldi	r31, 0x08	; 8
    d96a:	3f 9f       	mul	r19, r31
    d96c:	80 0d       	add	r24, r0
    d96e:	91 1d       	adc	r25, r1
    d970:	11 24       	eor	r1, r1
    d972:	01 96       	adiw	r24, 0x01	; 1
    d974:	2c 77       	andi	r18, 0x7C	; 124
    d976:	30 e0       	ldi	r19, 0x00	; 0
    d978:	35 95       	asr	r19
    d97a:	27 95       	ror	r18
    d97c:	35 95       	asr	r19
    d97e:	27 95       	ror	r18
    d980:	2f 5f       	subi	r18, 0xFF	; 255
    d982:	3f 4f       	sbci	r19, 0xFF	; 255
    d984:	82 9f       	mul	r24, r18
    d986:	a0 01       	movw	r20, r0
    d988:	83 9f       	mul	r24, r19
    d98a:	50 0d       	add	r21, r0
    d98c:	92 9f       	mul	r25, r18
    d98e:	50 0d       	add	r21, r0
    d990:	11 24       	eor	r1, r1
    d992:	ca 01       	movw	r24, r20
    d994:	a0 e0       	ldi	r26, 0x00	; 0
    d996:	b0 e0       	ldi	r27, 0x00	; 0
    d998:	f8 01       	movw	r30, r16
    d99a:	80 83       	st	Z, r24
    d99c:	91 83       	std	Z+1, r25	; 0x01
    d99e:	a2 83       	std	Z+2, r26	; 0x02
    d9a0:	b3 83       	std	Z+3, r27	; 0x03
    d9a2:	00 e0       	ldi	r16, 0x00	; 0
    d9a4:	6e c1       	rjmp	.+732    	; 0xdc82 <mmc_disk_ioctl+0x4f8>
    d9a6:	80 91 38 18 	lds	r24, 0x1838	; 0x801838 <CardType>
    d9aa:	86 70       	andi	r24, 0x06	; 6
    d9ac:	11 f4       	brne	.+4      	; 0xd9b2 <mmc_disk_ioctl+0x228>
    d9ae:	01 e0       	ldi	r16, 0x01	; 1
    d9b0:	6e c1       	rjmp	.+732    	; 0xdc8e <mmc_disk_ioctl+0x504>
    d9b2:	be 01       	movw	r22, r28
    d9b4:	6f 5f       	subi	r22, 0xFF	; 255
    d9b6:	7f 4f       	sbci	r23, 0xFF	; 255
    d9b8:	83 e3       	ldi	r24, 0x33	; 51
    d9ba:	e7 de       	rcall	.-562    	; 0xd78a <mmc_disk_ioctl>
    d9bc:	89 2b       	or	r24, r25
    d9be:	b9 f7       	brne	.-18     	; 0xd9ae <mmc_disk_ioctl+0x224>
    d9c0:	89 81       	ldd	r24, Y+1	; 0x01
    d9c2:	82 95       	swap	r24
    d9c4:	86 95       	lsr	r24
    d9c6:	86 95       	lsr	r24
    d9c8:	83 70       	andi	r24, 0x03	; 3
    d9ca:	19 f4       	brne	.+6      	; 0xd9d2 <mmc_disk_ioctl+0x248>
    d9cc:	8b 85       	ldd	r24, Y+11	; 0x0b
    d9ce:	86 ff       	sbrs	r24, 6
    d9d0:	ee cf       	rjmp	.-36     	; 0xd9ae <mmc_disk_ioctl+0x224>
    d9d2:	f8 01       	movw	r30, r16
    d9d4:	40 81       	ld	r20, Z
    d9d6:	51 81       	ldd	r21, Z+1	; 0x01
    d9d8:	62 81       	ldd	r22, Z+2	; 0x02
    d9da:	73 81       	ldd	r23, Z+3	; 0x03
    d9dc:	c4 80       	ldd	r12, Z+4	; 0x04
    d9de:	d5 80       	ldd	r13, Z+5	; 0x05
    d9e0:	e6 80       	ldd	r14, Z+6	; 0x06
    d9e2:	f7 80       	ldd	r15, Z+7	; 0x07
    d9e4:	80 91 38 18 	lds	r24, 0x1838	; 0x801838 <CardType>
    d9e8:	83 fd       	sbrc	r24, 3
    d9ea:	0e c0       	rjmp	.+28     	; 0xda08 <mmc_disk_ioctl+0x27e>
    d9ec:	39 e0       	ldi	r19, 0x09	; 9
    d9ee:	44 0f       	add	r20, r20
    d9f0:	55 1f       	adc	r21, r21
    d9f2:	66 1f       	adc	r22, r22
    d9f4:	77 1f       	adc	r23, r23
    d9f6:	3a 95       	dec	r19
    d9f8:	d1 f7       	brne	.-12     	; 0xd9ee <mmc_disk_ioctl+0x264>
    d9fa:	e9 e0       	ldi	r30, 0x09	; 9
    d9fc:	cc 0c       	add	r12, r12
    d9fe:	dd 1c       	adc	r13, r13
    da00:	ee 1c       	adc	r14, r14
    da02:	ff 1c       	adc	r15, r15
    da04:	ea 95       	dec	r30
    da06:	d1 f7       	brne	.-12     	; 0xd9fc <mmc_disk_ioctl+0x272>
    da08:	80 e2       	ldi	r24, 0x20	; 32
    da0a:	07 dd       	rcall	.-1522   	; 0xd41a <send_cmd>
    da0c:	81 11       	cpse	r24, r1
    da0e:	38 c1       	rjmp	.+624    	; 0xdc80 <mmc_disk_ioctl+0x4f6>
    da10:	b7 01       	movw	r22, r14
    da12:	a6 01       	movw	r20, r12
    da14:	81 e2       	ldi	r24, 0x21	; 33
    da16:	01 dd       	rcall	.-1534   	; 0xd41a <send_cmd>
    da18:	81 11       	cpse	r24, r1
    da1a:	32 c1       	rjmp	.+612    	; 0xdc80 <mmc_disk_ioctl+0x4f6>
    da1c:	40 e0       	ldi	r20, 0x00	; 0
    da1e:	50 e0       	ldi	r21, 0x00	; 0
    da20:	ba 01       	movw	r22, r20
    da22:	86 e2       	ldi	r24, 0x26	; 38
    da24:	fa dc       	rcall	.-1548   	; 0xd41a <send_cmd>
    da26:	81 11       	cpse	r24, r1
    da28:	2b c1       	rjmp	.+598    	; 0xdc80 <mmc_disk_ioctl+0x4f6>
    da2a:	80 e3       	ldi	r24, 0x30	; 48
    da2c:	95 e7       	ldi	r25, 0x75	; 117
    da2e:	c6 dc       	rcall	.-1652   	; 0xd3bc <wait_ready>
    da30:	35 c0       	rjmp	.+106    	; 0xda9c <mmc_disk_ioctl+0x312>
    da32:	80 91 38 18 	lds	r24, 0x1838	; 0x801838 <CardType>
    da36:	fb 01       	movw	r30, r22
    da38:	80 83       	st	Z, r24
    da3a:	3c c0       	rjmp	.+120    	; 0xdab4 <mmc_disk_ioctl+0x32a>
    da3c:	40 e0       	ldi	r20, 0x00	; 0
    da3e:	50 e0       	ldi	r21, 0x00	; 0
    da40:	ba 01       	movw	r22, r20
    da42:	89 e0       	ldi	r24, 0x09	; 9
    da44:	04 c0       	rjmp	.+8      	; 0xda4e <mmc_disk_ioctl+0x2c4>
    da46:	40 e0       	ldi	r20, 0x00	; 0
    da48:	50 e0       	ldi	r21, 0x00	; 0
    da4a:	ba 01       	movw	r22, r20
    da4c:	8a e0       	ldi	r24, 0x0A	; 10
    da4e:	e5 dc       	rcall	.-1590   	; 0xd41a <send_cmd>
    da50:	81 11       	cpse	r24, r1
    da52:	16 c1       	rjmp	.+556    	; 0xdc80 <mmc_disk_ioctl+0x4f6>
    da54:	60 e1       	ldi	r22, 0x10	; 16
    da56:	70 e0       	ldi	r23, 0x00	; 0
    da58:	1f c0       	rjmp	.+62     	; 0xda98 <mmc_disk_ioctl+0x30e>
    da5a:	40 e0       	ldi	r20, 0x00	; 0
    da5c:	50 e0       	ldi	r21, 0x00	; 0
    da5e:	ba 01       	movw	r22, r20
    da60:	8a e3       	ldi	r24, 0x3A	; 58
    da62:	db dc       	rcall	.-1610   	; 0xd41a <send_cmd>
    da64:	81 11       	cpse	r24, r1
    da66:	0c c1       	rjmp	.+536    	; 0xdc80 <mmc_disk_ioctl+0x4f6>
    da68:	78 01       	movw	r14, r16
    da6a:	f4 e0       	ldi	r31, 0x04	; 4
    da6c:	ef 0e       	add	r14, r31
    da6e:	f1 1c       	adc	r15, r1
    da70:	8f ef       	ldi	r24, 0xFF	; 255
    da72:	8d d1       	rcall	.+794    	; 0xdd8e <mmc_spi_TXRX>
    da74:	f8 01       	movw	r30, r16
    da76:	81 93       	st	Z+, r24
    da78:	8f 01       	movw	r16, r30
    da7a:	ee 15       	cp	r30, r14
    da7c:	ff 05       	cpc	r31, r15
    da7e:	c1 f7       	brne	.-16     	; 0xda70 <mmc_disk_ioctl+0x2e6>
    da80:	90 cf       	rjmp	.-224    	; 0xd9a2 <mmc_disk_ioctl+0x218>
    da82:	40 e0       	ldi	r20, 0x00	; 0
    da84:	50 e0       	ldi	r21, 0x00	; 0
    da86:	ba 01       	movw	r22, r20
    da88:	8d e8       	ldi	r24, 0x8D	; 141
    da8a:	c7 dc       	rcall	.-1650   	; 0xd41a <send_cmd>
    da8c:	81 11       	cpse	r24, r1
    da8e:	f8 c0       	rjmp	.+496    	; 0xdc80 <mmc_disk_ioctl+0x4f6>
    da90:	8f ef       	ldi	r24, 0xFF	; 255
    da92:	65 dc       	rcall	.-1846   	; 0xd35e <xchg_spi>
    da94:	60 e4       	ldi	r22, 0x40	; 64
    da96:	70 e0       	ldi	r23, 0x00	; 0
    da98:	c8 01       	movw	r24, r16
    da9a:	69 dc       	rcall	.-1838   	; 0xd36e <rcvr_datablock>
    da9c:	01 e0       	ldi	r16, 0x01	; 1
    da9e:	10 e0       	ldi	r17, 0x00	; 0
    daa0:	89 2b       	or	r24, r25
    daa2:	09 f4       	brne	.+2      	; 0xdaa6 <mmc_disk_ioctl+0x31c>
    daa4:	ef c0       	rjmp	.+478    	; 0xdc84 <mmc_disk_ioctl+0x4fa>
    daa6:	ea c0       	rjmp	.+468    	; 0xdc7c <mmc_disk_ioctl+0x4f2>
    daa8:	40 d2       	rcall	.+1152   	; 0xdf2a <mmc_power_off>
    daaa:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    daae:	81 60       	ori	r24, 0x01	; 1
    dab0:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <Stat>
    dab4:	00 e0       	ldi	r16, 0x00	; 0
    dab6:	eb c0       	rjmp	.+470    	; 0xdc8e <mmc_disk_ioctl+0x504>
    dab8:	fb 01       	movw	r30, r22
    daba:	43 81       	ldd	r20, Z+3	; 0x03
    dabc:	54 81       	ldd	r21, Z+4	; 0x04
    dabe:	65 81       	ldd	r22, Z+5	; 0x05
    dac0:	76 81       	ldd	r23, Z+6	; 0x06
    dac2:	39 e0       	ldi	r19, 0x09	; 9
    dac4:	44 0f       	add	r20, r20
    dac6:	55 1f       	adc	r21, r21
    dac8:	66 1f       	adc	r22, r22
    daca:	77 1f       	adc	r23, r23
    dacc:	3a 95       	dec	r19
    dace:	d1 f7       	brne	.-12     	; 0xdac4 <mmc_disk_ioctl+0x33a>
    dad0:	70 68       	ori	r23, 0x80	; 128
    dad2:	80 81       	ld	r24, Z
    dad4:	90 e0       	ldi	r25, 0x00	; 0
    dad6:	a0 e0       	ldi	r26, 0x00	; 0
    dad8:	b0 e0       	ldi	r27, 0x00	; 0
    dada:	2c e1       	ldi	r18, 0x1C	; 28
    dadc:	88 0f       	add	r24, r24
    dade:	99 1f       	adc	r25, r25
    dae0:	aa 1f       	adc	r26, r26
    dae2:	bb 1f       	adc	r27, r27
    dae4:	2a 95       	dec	r18
    dae6:	d1 f7       	brne	.-12     	; 0xdadc <mmc_disk_ioctl+0x352>
    dae8:	48 2b       	or	r20, r24
    daea:	59 2b       	or	r21, r25
    daec:	6a 2b       	or	r22, r26
    daee:	7b 2b       	or	r23, r27
    daf0:	81 81       	ldd	r24, Z+1	; 0x01
    daf2:	92 81       	ldd	r25, Z+2	; 0x02
    daf4:	01 97       	sbiw	r24, 0x01	; 1
    daf6:	91 70       	andi	r25, 0x01	; 1
    daf8:	a0 e0       	ldi	r26, 0x00	; 0
    dafa:	b0 e0       	ldi	r27, 0x00	; 0
    dafc:	48 2b       	or	r20, r24
    dafe:	59 2b       	or	r21, r25
    db00:	6a 2b       	or	r22, r26
    db02:	7b 2b       	or	r23, r27
    db04:	80 e3       	ldi	r24, 0x30	; 48
    db06:	89 dc       	rcall	.-1774   	; 0xd41a <send_cmd>
    db08:	81 11       	cpse	r24, r1
    db0a:	ba c0       	rjmp	.+372    	; 0xdc80 <mmc_disk_ioctl+0x4f6>
    db0c:	88 ee       	ldi	r24, 0xE8	; 232
    db0e:	93 e0       	ldi	r25, 0x03	; 3
    db10:	41 d1       	rcall	.+642    	; 0xdd94 <mmc_set_ms_timeout>
    db12:	8f ef       	ldi	r24, 0xFF	; 255
    db14:	3c d1       	rcall	.+632    	; 0xdd8e <mmc_spi_TXRX>
    db16:	8f 3f       	cpi	r24, 0xFF	; 255
    db18:	21 f4       	brne	.+8      	; 0xdb22 <mmc_disk_ioctl+0x398>
    db1a:	43 d1       	rcall	.+646    	; 0xdda2 <mmc_test_timeout>
    db1c:	89 2b       	or	r24, r25
    db1e:	c9 f3       	breq	.-14     	; 0xdb12 <mmc_disk_ioctl+0x388>
    db20:	af c0       	rjmp	.+350    	; 0xdc80 <mmc_disk_ioctl+0x4f6>
    db22:	8e 3f       	cpi	r24, 0xFE	; 254
    db24:	09 f0       	breq	.+2      	; 0xdb28 <mmc_disk_ioctl+0x39e>
    db26:	ac c0       	rjmp	.+344    	; 0xdc80 <mmc_disk_ioctl+0x4f6>
    db28:	f8 01       	movw	r30, r16
    db2a:	e7 80       	ldd	r14, Z+7	; 0x07
    db2c:	f0 84       	ldd	r15, Z+8	; 0x08
    db2e:	c1 80       	ldd	r12, Z+1	; 0x01
    db30:	d2 80       	ldd	r13, Z+2	; 0x02
    db32:	ce 0c       	add	r12, r14
    db34:	df 1c       	adc	r13, r15
    db36:	ce 14       	cp	r12, r14
    db38:	df 04       	cpc	r13, r15
    db3a:	31 f0       	breq	.+12     	; 0xdb48 <mmc_disk_ioctl+0x3be>
    db3c:	8f ef       	ldi	r24, 0xFF	; 255
    db3e:	27 d1       	rcall	.+590    	; 0xdd8e <mmc_spi_TXRX>
    db40:	f7 01       	movw	r30, r14
    db42:	81 93       	st	Z+, r24
    db44:	7f 01       	movw	r14, r30
    db46:	f7 cf       	rjmp	.-18     	; 0xdb36 <mmc_disk_ioctl+0x3ac>
    db48:	f8 01       	movw	r30, r16
    db4a:	81 81       	ldd	r24, Z+1	; 0x01
    db4c:	92 81       	ldd	r25, Z+2	; 0x02
    db4e:	02 e0       	ldi	r16, 0x02	; 2
    db50:	12 e0       	ldi	r17, 0x02	; 2
    db52:	08 1b       	sub	r16, r24
    db54:	19 0b       	sbc	r17, r25
    db56:	01 15       	cp	r16, r1
    db58:	11 05       	cpc	r17, r1
    db5a:	09 f4       	brne	.+2      	; 0xdb5e <mmc_disk_ioctl+0x3d4>
    db5c:	22 cf       	rjmp	.-444    	; 0xd9a2 <mmc_disk_ioctl+0x218>
    db5e:	8f ef       	ldi	r24, 0xFF	; 255
    db60:	fe db       	rcall	.-2052   	; 0xd35e <xchg_spi>
    db62:	01 50       	subi	r16, 0x01	; 1
    db64:	11 09       	sbc	r17, r1
    db66:	f7 cf       	rjmp	.-18     	; 0xdb56 <mmc_disk_ioctl+0x3cc>
    db68:	fb 01       	movw	r30, r22
    db6a:	43 81       	ldd	r20, Z+3	; 0x03
    db6c:	54 81       	ldd	r21, Z+4	; 0x04
    db6e:	65 81       	ldd	r22, Z+5	; 0x05
    db70:	76 81       	ldd	r23, Z+6	; 0x06
    db72:	39 e0       	ldi	r19, 0x09	; 9
    db74:	44 0f       	add	r20, r20
    db76:	55 1f       	adc	r21, r21
    db78:	66 1f       	adc	r22, r22
    db7a:	77 1f       	adc	r23, r23
    db7c:	3a 95       	dec	r19
    db7e:	d1 f7       	brne	.-12     	; 0xdb74 <mmc_disk_ioctl+0x3ea>
    db80:	70 68       	ori	r23, 0x80	; 128
    db82:	80 81       	ld	r24, Z
    db84:	90 e0       	ldi	r25, 0x00	; 0
    db86:	a0 e0       	ldi	r26, 0x00	; 0
    db88:	b0 e0       	ldi	r27, 0x00	; 0
    db8a:	2c e1       	ldi	r18, 0x1C	; 28
    db8c:	88 0f       	add	r24, r24
    db8e:	99 1f       	adc	r25, r25
    db90:	aa 1f       	adc	r26, r26
    db92:	bb 1f       	adc	r27, r27
    db94:	2a 95       	dec	r18
    db96:	d1 f7       	brne	.-12     	; 0xdb8c <mmc_disk_ioctl+0x402>
    db98:	48 2b       	or	r20, r24
    db9a:	59 2b       	or	r21, r25
    db9c:	6a 2b       	or	r22, r26
    db9e:	7b 2b       	or	r23, r27
    dba0:	81 81       	ldd	r24, Z+1	; 0x01
    dba2:	92 81       	ldd	r25, Z+2	; 0x02
    dba4:	01 97       	sbiw	r24, 0x01	; 1
    dba6:	91 70       	andi	r25, 0x01	; 1
    dba8:	a0 e0       	ldi	r26, 0x00	; 0
    dbaa:	b0 e0       	ldi	r27, 0x00	; 0
    dbac:	48 2b       	or	r20, r24
    dbae:	59 2b       	or	r21, r25
    dbb0:	6a 2b       	or	r22, r26
    dbb2:	7b 2b       	or	r23, r27
    dbb4:	81 e3       	ldi	r24, 0x31	; 49
    dbb6:	31 dc       	rcall	.-1950   	; 0xd41a <send_cmd>
    dbb8:	81 11       	cpse	r24, r1
    dbba:	62 c0       	rjmp	.+196    	; 0xdc80 <mmc_disk_ioctl+0x4f6>
    dbbc:	8f ef       	ldi	r24, 0xFF	; 255
    dbbe:	cf db       	rcall	.-2146   	; 0xd35e <xchg_spi>
    dbc0:	8e ef       	ldi	r24, 0xFE	; 254
    dbc2:	cd db       	rcall	.-2150   	; 0xd35e <xchg_spi>
    dbc4:	f8 01       	movw	r30, r16
    dbc6:	e7 80       	ldd	r14, Z+7	; 0x07
    dbc8:	f0 84       	ldd	r15, Z+8	; 0x08
    dbca:	c1 80       	ldd	r12, Z+1	; 0x01
    dbcc:	d2 80       	ldd	r13, Z+2	; 0x02
    dbce:	ce 0c       	add	r12, r14
    dbd0:	df 1c       	adc	r13, r15
    dbd2:	ec 14       	cp	r14, r12
    dbd4:	fd 04       	cpc	r15, r13
    dbd6:	29 f0       	breq	.+10     	; 0xdbe2 <mmc_disk_ioctl+0x458>
    dbd8:	f7 01       	movw	r30, r14
    dbda:	81 91       	ld	r24, Z+
    dbdc:	7f 01       	movw	r14, r30
    dbde:	bf db       	rcall	.-2178   	; 0xd35e <xchg_spi>
    dbe0:	f8 cf       	rjmp	.-16     	; 0xdbd2 <mmc_disk_ioctl+0x448>
    dbe2:	f8 01       	movw	r30, r16
    dbe4:	81 81       	ldd	r24, Z+1	; 0x01
    dbe6:	92 81       	ldd	r25, Z+2	; 0x02
    dbe8:	02 e0       	ldi	r16, 0x02	; 2
    dbea:	12 e0       	ldi	r17, 0x02	; 2
    dbec:	08 1b       	sub	r16, r24
    dbee:	19 0b       	sbc	r17, r25
    dbf0:	8f ef       	ldi	r24, 0xFF	; 255
    dbf2:	01 15       	cp	r16, r1
    dbf4:	11 05       	cpc	r17, r1
    dbf6:	09 f4       	brne	.+2      	; 0xdbfa <mmc_disk_ioctl+0x470>
    dbf8:	3b c0       	rjmp	.+118    	; 0xdc70 <mmc_disk_ioctl+0x4e6>
    dbfa:	b1 db       	rcall	.-2206   	; 0xd35e <xchg_spi>
    dbfc:	01 50       	subi	r16, 0x01	; 1
    dbfe:	11 09       	sbc	r17, r1
    dc00:	f7 cf       	rjmp	.-18     	; 0xdbf0 <mmc_disk_ioctl+0x466>
    dc02:	fb 01       	movw	r30, r22
    dc04:	43 81       	ldd	r20, Z+3	; 0x03
    dc06:	54 81       	ldd	r21, Z+4	; 0x04
    dc08:	65 81       	ldd	r22, Z+5	; 0x05
    dc0a:	76 81       	ldd	r23, Z+6	; 0x06
    dc0c:	89 e0       	ldi	r24, 0x09	; 9
    dc0e:	44 0f       	add	r20, r20
    dc10:	55 1f       	adc	r21, r21
    dc12:	66 1f       	adc	r22, r22
    dc14:	77 1f       	adc	r23, r23
    dc16:	8a 95       	dec	r24
    dc18:	d1 f7       	brne	.-12     	; 0xdc0e <mmc_disk_ioctl+0x484>
    dc1a:	74 68       	ori	r23, 0x84	; 132
    dc1c:	80 81       	ld	r24, Z
    dc1e:	90 e0       	ldi	r25, 0x00	; 0
    dc20:	a0 e0       	ldi	r26, 0x00	; 0
    dc22:	b0 e0       	ldi	r27, 0x00	; 0
    dc24:	2c e1       	ldi	r18, 0x1C	; 28
    dc26:	88 0f       	add	r24, r24
    dc28:	99 1f       	adc	r25, r25
    dc2a:	aa 1f       	adc	r26, r26
    dc2c:	bb 1f       	adc	r27, r27
    dc2e:	2a 95       	dec	r18
    dc30:	d1 f7       	brne	.-12     	; 0xdc26 <mmc_disk_ioctl+0x49c>
    dc32:	48 2b       	or	r20, r24
    dc34:	59 2b       	or	r21, r25
    dc36:	6a 2b       	or	r22, r26
    dc38:	7b 2b       	or	r23, r27
    dc3a:	82 81       	ldd	r24, Z+2	; 0x02
    dc3c:	90 e0       	ldi	r25, 0x00	; 0
    dc3e:	a0 e0       	ldi	r26, 0x00	; 0
    dc40:	b0 e0       	ldi	r27, 0x00	; 0
    dc42:	48 2b       	or	r20, r24
    dc44:	59 2b       	or	r21, r25
    dc46:	6a 2b       	or	r22, r26
    dc48:	7b 2b       	or	r23, r27
    dc4a:	81 e3       	ldi	r24, 0x31	; 49
    dc4c:	e6 db       	rcall	.-2100   	; 0xd41a <send_cmd>
    dc4e:	81 11       	cpse	r24, r1
    dc50:	17 c0       	rjmp	.+46     	; 0xdc80 <mmc_disk_ioctl+0x4f6>
    dc52:	8f ef       	ldi	r24, 0xFF	; 255
    dc54:	84 db       	rcall	.-2296   	; 0xd35e <xchg_spi>
    dc56:	8e ef       	ldi	r24, 0xFE	; 254
    dc58:	82 db       	rcall	.-2300   	; 0xd35e <xchg_spi>
    dc5a:	f8 01       	movw	r30, r16
    dc5c:	81 81       	ldd	r24, Z+1	; 0x01
    dc5e:	7f db       	rcall	.-2306   	; 0xd35e <xchg_spi>
    dc60:	01 e0       	ldi	r16, 0x01	; 1
    dc62:	12 e0       	ldi	r17, 0x02	; 2
    dc64:	8f ef       	ldi	r24, 0xFF	; 255
    dc66:	7b db       	rcall	.-2314   	; 0xd35e <xchg_spi>
    dc68:	01 50       	subi	r16, 0x01	; 1
    dc6a:	11 09       	sbc	r17, r1
    dc6c:	d9 f7       	brne	.-10     	; 0xdc64 <mmc_disk_ioctl+0x4da>
    dc6e:	8f ef       	ldi	r24, 0xFF	; 255
    dc70:	8e d0       	rcall	.+284    	; 0xdd8e <mmc_spi_TXRX>
    dc72:	8f 71       	andi	r24, 0x1F	; 31
    dc74:	01 e0       	ldi	r16, 0x01	; 1
    dc76:	10 e0       	ldi	r17, 0x00	; 0
    dc78:	85 30       	cpi	r24, 0x05	; 5
    dc7a:	21 f4       	brne	.+8      	; 0xdc84 <mmc_disk_ioctl+0x4fa>
    dc7c:	00 e0       	ldi	r16, 0x00	; 0
    dc7e:	02 c0       	rjmp	.+4      	; 0xdc84 <mmc_disk_ioctl+0x4fa>
    dc80:	01 e0       	ldi	r16, 0x01	; 1
    dc82:	10 e0       	ldi	r17, 0x00	; 0
    dc84:	6e db       	rcall	.-2340   	; 0xd362 <deselect>
    dc86:	04 c0       	rjmp	.+8      	; 0xdc90 <mmc_disk_ioctl+0x506>
    dc88:	03 e0       	ldi	r16, 0x03	; 3
    dc8a:	01 c0       	rjmp	.+2      	; 0xdc8e <mmc_disk_ioctl+0x504>
    dc8c:	04 e0       	ldi	r16, 0x04	; 4
    dc8e:	10 e0       	ldi	r17, 0x00	; 0
    dc90:	c8 01       	movw	r24, r16
    dc92:	60 96       	adiw	r28, 0x10	; 16
    dc94:	e8 e0       	ldi	r30, 0x08	; 8
    dc96:	0c 94 39 e8 	jmp	0x1d072	; 0x1d072 <__epilogue_restores__+0x14>

0000dc9a <mmc_disk_timerproc>:
    dc9a:	80 91 3a 18 	lds	r24, 0x183A	; 0x80183a <Timer1>
    dc9e:	88 23       	and	r24, r24
    dca0:	19 f0       	breq	.+6      	; 0xdca8 <mmc_disk_timerproc+0xe>
    dca2:	81 50       	subi	r24, 0x01	; 1
    dca4:	80 93 3a 18 	sts	0x183A, r24	; 0x80183a <Timer1>
    dca8:	80 91 39 18 	lds	r24, 0x1839	; 0x801839 <Timer2>
    dcac:	88 23       	and	r24, r24
    dcae:	19 f0       	breq	.+6      	; 0xdcb6 <mmc_disk_timerproc+0x1c>
    dcb0:	81 50       	subi	r24, 0x01	; 1
    dcb2:	80 93 39 18 	sts	0x1839, r24	; 0x801839 <Timer2>
    dcb6:	08 95       	ret

0000dcb8 <mmc_task>:
void mmc_ms_wait(int ms)
{
    mmc_set_ms_timeout(ms);
    while(!mmc_test_timeout())
        ;
}
    dcb8:	80 91 41 18 	lds	r24, 0x1841	; 0x801841 <_mmc_timeout>
    dcbc:	90 91 42 18 	lds	r25, 0x1842	; 0x801842 <_mmc_timeout+0x1>
    dcc0:	00 97       	sbiw	r24, 0x00	; 0
    dcc2:	29 f0       	breq	.+10     	; 0xdcce <mmc_task+0x16>
    dcc4:	01 97       	sbiw	r24, 0x01	; 1
    dcc6:	90 93 42 18 	sts	0x1842, r25	; 0x801842 <_mmc_timeout+0x1>
    dcca:	80 93 41 18 	sts	0x1841, r24	; 0x801841 <_mmc_timeout>
    dcce:	80 91 3b 18 	lds	r24, 0x183B	; 0x80183b <_mmc_pre>
    dcd2:	90 91 3c 18 	lds	r25, 0x183C	; 0x80183c <_mmc_pre+0x1>
    dcd6:	8a 30       	cpi	r24, 0x0A	; 10
    dcd8:	91 05       	cpc	r25, r1
    dcda:	30 f4       	brcc	.+12     	; 0xdce8 <mmc_task+0x30>
    dcdc:	01 96       	adiw	r24, 0x01	; 1
    dcde:	90 93 3c 18 	sts	0x183C, r25	; 0x80183c <_mmc_pre+0x1>
    dce2:	80 93 3b 18 	sts	0x183B, r24	; 0x80183b <_mmc_pre>
    dce6:	08 95       	ret
    dce8:	10 92 3c 18 	sts	0x183C, r1	; 0x80183c <_mmc_pre+0x1>
    dcec:	10 92 3b 18 	sts	0x183B, r1	; 0x80183b <_mmc_pre>
    dcf0:	d4 cf       	rjmp	.-88     	; 0xdc9a <mmc_disk_timerproc>
    dcf2:	08 95       	ret

0000dcf4 <mmc_install_timer>:
    dcf4:	10 92 42 18 	sts	0x1842, r1	; 0x801842 <_mmc_timeout+0x1>
    dcf8:	10 92 41 18 	sts	0x1841, r1	; 0x801841 <_mmc_timeout>
    dcfc:	61 e0       	ldi	r22, 0x01	; 1
    dcfe:	70 e0       	ldi	r23, 0x00	; 0
    dd00:	8c e5       	ldi	r24, 0x5C	; 92
    dd02:	9e e6       	ldi	r25, 0x6E	; 110
    dd04:	0e 94 a0 35 	call	0x6b40	; 0x6b40 <set_timers>
    dd08:	01 96       	adiw	r24, 0x01	; 1
    dd0a:	51 f4       	brne	.+20     	; 0xdd20 <mmc_install_timer+0x2c>
    dd0c:	8d e4       	ldi	r24, 0x4D	; 77
    dd0e:	98 e0       	ldi	r25, 0x08	; 8
    dd10:	1f 92       	push	r1
    dd12:	9f 93       	push	r25
    dd14:	8f 93       	push	r24
    dd16:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    dd1a:	0f 90       	pop	r0
    dd1c:	0f 90       	pop	r0
    dd1e:	0f 90       	pop	r0
    dd20:	08 95       	ret

0000dd22 <mmc_spi_begin>:
    dd22:	60 91 3d 18 	lds	r22, 0x183D	; 0x80183d <_mmc_clock>
    dd26:	70 91 3e 18 	lds	r23, 0x183E	; 0x80183e <_mmc_clock+0x1>
    dd2a:	80 91 3f 18 	lds	r24, 0x183F	; 0x80183f <_mmc_clock+0x2>
    dd2e:	90 91 40 18 	lds	r25, 0x1840	; 0x801840 <_mmc_clock+0x3>
    dd32:	4b e0       	ldi	r20, 0x0B	; 11
    dd34:	50 e0       	ldi	r21, 0x00	; 0
    dd36:	0c 94 20 29 	jmp	0x5240	; 0x5240 <spi_begin>
    dd3a:	08 95       	ret

0000dd3c <mmc_spi_end>:
    dd3c:	8b e0       	ldi	r24, 0x0B	; 11
    dd3e:	0c 94 ca 28 	jmp	0x5194	; 0x5194 <spi_end>
    dd42:	08 95       	ret

0000dd44 <mmc_slow>:
    dd44:	80 e2       	ldi	r24, 0x20	; 32
    dd46:	91 ea       	ldi	r25, 0xA1	; 161
    dd48:	a7 e0       	ldi	r26, 0x07	; 7
    dd4a:	b0 e0       	ldi	r27, 0x00	; 0
    dd4c:	80 93 3d 18 	sts	0x183D, r24	; 0x80183d <_mmc_clock>
    dd50:	90 93 3e 18 	sts	0x183E, r25	; 0x80183e <_mmc_clock+0x1>
    dd54:	a0 93 3f 18 	sts	0x183F, r26	; 0x80183f <_mmc_clock+0x2>
    dd58:	b0 93 40 18 	sts	0x1840, r27	; 0x801840 <_mmc_clock+0x3>
    dd5c:	08 95       	ret

0000dd5e <mmc_spi_init>:
    dd5e:	8b e0       	ldi	r24, 0x0B	; 11
    dd60:	0e 94 c8 28 	call	0x5190	; 0x5190 <chip_select_init>
    dd64:	ef cf       	rjmp	.-34     	; 0xdd44 <mmc_slow>
    dd66:	08 95       	ret

0000dd68 <mmc_fast>:
    dd68:	80 ea       	ldi	r24, 0xA0	; 160
    dd6a:	95 e2       	ldi	r25, 0x25	; 37
    dd6c:	a6 e2       	ldi	r26, 0x26	; 38
    dd6e:	b0 e0       	ldi	r27, 0x00	; 0
    dd70:	80 93 3d 18 	sts	0x183D, r24	; 0x80183d <_mmc_clock>
    dd74:	90 93 3e 18 	sts	0x183E, r25	; 0x80183e <_mmc_clock+0x1>
    dd78:	a0 93 3f 18 	sts	0x183F, r26	; 0x80183f <_mmc_clock+0x2>
    dd7c:	b0 93 40 18 	sts	0x1840, r27	; 0x801840 <_mmc_clock+0x3>
    dd80:	08 95       	ret

0000dd82 <mmc_spi_TX_buffer>:
    dd82:	0c 94 ec 28 	jmp	0x51d8	; 0x51d8 <spi_TX_buffer>
    dd86:	08 95       	ret

0000dd88 <mmc_spi_RX_buffer>:
    dd88:	0c 94 ee 28 	jmp	0x51dc	; 0x51dc <spi_RX_buffer>
    dd8c:	08 95       	ret

0000dd8e <mmc_spi_TXRX>:
    dd8e:	0c 94 5c 29 	jmp	0x52b8	; 0x52b8 <spi_TXRX>
    dd92:	08 95       	ret

0000dd94 <mmc_set_ms_timeout>:
    dd94:	f8 94       	cli
    dd96:	90 93 42 18 	sts	0x1842, r25	; 0x801842 <_mmc_timeout+0x1>
    dd9a:	80 93 41 18 	sts	0x1841, r24	; 0x801841 <_mmc_timeout>
    dd9e:	78 94       	sei
    dda0:	08 95       	ret

0000dda2 <mmc_test_timeout>:
    dda2:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    dda6:	81 fd       	sbrc	r24, 1
    dda8:	15 c0       	rjmp	.+42     	; 0xddd4 <mmc_test_timeout+0x32>
    ddaa:	80 91 41 18 	lds	r24, 0x1841	; 0x801841 <_mmc_timeout>
    ddae:	90 91 42 18 	lds	r25, 0x1842	; 0x801842 <_mmc_timeout+0x1>
    ddb2:	89 2b       	or	r24, r25
    ddb4:	91 f4       	brne	.+36     	; 0xddda <mmc_test_timeout+0x38>
    ddb6:	80 e4       	ldi	r24, 0x40	; 64
    ddb8:	98 e0       	ldi	r25, 0x08	; 8
    ddba:	1f 92       	push	r1
    ddbc:	9f 93       	push	r25
    ddbe:	8f 93       	push	r24
    ddc0:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    ddc4:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    ddc8:	83 60       	ori	r24, 0x03	; 3
    ddca:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <Stat>
    ddce:	0f 90       	pop	r0
    ddd0:	0f 90       	pop	r0
    ddd2:	0f 90       	pop	r0
    ddd4:	81 e0       	ldi	r24, 0x01	; 1
    ddd6:	90 e0       	ldi	r25, 0x00	; 0
    ddd8:	08 95       	ret
    ddda:	80 e0       	ldi	r24, 0x00	; 0
    dddc:	90 e0       	ldi	r25, 0x00	; 0
    ddde:	08 95       	ret

0000dde0 <mmc_init>:
///
/// @param[in] verbose: display initialisation messages
/// @return
MEMSPACE
int mmc_init(int verbose)
{
    dde0:	a4 e0       	ldi	r26, 0x04	; 4
    dde2:	b0 e0       	ldi	r27, 0x00	; 0
    dde4:	e6 ef       	ldi	r30, 0xF6	; 246
    dde6:	fe e6       	ldi	r31, 0x6E	; 110
    dde8:	0c 94 1f e8 	jmp	0x1d03e	; 0x1d03e <__prologue_saves__+0x18>
    ddec:	7c 01       	movw	r14, r24
    int rc;

    Stat = 0;
    ddee:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <Stat>

    mmc_spi_init();

    if( verbose)
    ddf2:	b5 df       	rcall	.-150    	; 0xdd5e <mmc_spi_init>
    ddf4:	e1 14       	cp	r14, r1
    ddf6:	f1 04       	cpc	r15, r1
    {
        printf("START MMC INIT\n");
    ddf8:	51 f0       	breq	.+20     	; 0xde0e <mmc_init+0x2e>
    ddfa:	80 e3       	ldi	r24, 0x30	; 48
    ddfc:	98 e0       	ldi	r25, 0x08	; 8
    ddfe:	1f 92       	push	r1
    de00:	9f 93       	push	r25
    de02:	8f 93       	push	r24
    de04:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    de08:	0f 90       	pop	r0
    de0a:	0f 90       	pop	r0
    }
    // we only install timers once!
    if(!mmc_init_flag)
    de0c:	0f 90       	pop	r0
    de0e:	80 91 43 18 	lds	r24, 0x1843	; 0x801843 <mmc_init_flag>
    de12:	90 91 44 18 	lds	r25, 0x1844	; 0x801844 <mmc_init_flag+0x1>
        mmc_install_timer();
    de16:	89 2b       	or	r24, r25
    de18:	09 f4       	brne	.+2      	; 0xde1c <mmc_init+0x3c>

    if( verbose)
    de1a:	6c df       	rcall	.-296    	; 0xdcf4 <mmc_install_timer>
    de1c:	e1 14       	cp	r14, r1
    de1e:	f1 04       	cpc	r15, r1
    {
#if defined (_USE_LFN)
        printf("LFN Enabled");
    de20:	b9 f0       	breq	.+46     	; 0xde50 <mmc_init+0x70>
    de22:	84 e2       	ldi	r24, 0x24	; 36
    de24:	98 e0       	ldi	r25, 0x08	; 8
    de26:	1f 92       	push	r1
    de28:	9f 93       	push	r25
    de2a:	8f 93       	push	r24
    de2c:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
#else
        printf("LFN Disabled");
#endif
        printf(", Code page: %u\n", _CODE_PAGE);
    de30:	81 e0       	ldi	r24, 0x01	; 1
    de32:	8f 93       	push	r24
    de34:	85 eb       	ldi	r24, 0xB5	; 181
    de36:	8f 93       	push	r24
    de38:	83 e1       	ldi	r24, 0x13	; 19
    de3a:	98 e0       	ldi	r25, 0x08	; 8
    de3c:	1f 92       	push	r1
    de3e:	9f 93       	push	r25
    de40:	8f 93       	push	r24
    de42:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    de46:	0f b6       	in	r0, 0x3f	; 63
    de48:	f8 94       	cli
    de4a:	de bf       	out	0x3e, r29	; 62
    }

    rc = disk_initialize(0);    // aliased to mmc_disk_initialize()
    de4c:	0f be       	out	0x3f, r0	; 63
    de4e:	cd bf       	out	0x3d, r28	; 61
    de50:	80 e0       	ldi	r24, 0x00	; 0
    de52:	55 da       	rcall	.-2902   	; 0xd2fe <disk_initialize>
    de54:	08 2f       	mov	r16, r24

    if( rc != RES_OK  || verbose )
    de56:	10 e0       	ldi	r17, 0x00	; 0
    de58:	01 15       	cp	r16, r1
    de5a:	11 05       	cpc	r17, r1
    de5c:	71 f4       	brne	.+28     	; 0xde7a <mmc_init+0x9a>
    de5e:	e1 14       	cp	r14, r1
    de60:	f1 04       	cpc	r15, r1
        put_rc(rc);
    }

    if( rc == RES_OK)
    {
        rc = f_mount(&Fatfs[0],"/", 0);
    de62:	59 f4       	brne	.+22     	; 0xde7a <mmc_init+0x9a>
    de64:	40 e0       	ldi	r20, 0x00	; 0
    de66:	6c e1       	ldi	r22, 0x1C	; 28
    de68:	78 e0       	ldi	r23, 0x08	; 8
    de6a:	8f e8       	ldi	r24, 0x8F	; 143
    de6c:	9a e1       	ldi	r25, 0x1A	; 26
    de6e:	0e 94 c9 58 	call	0xb192	; 0xb192 <f_mount>
    }

    if( rc != RES_OK || verbose)
    de72:	8c 01       	movw	r16, r24
    de74:	89 2b       	or	r24, r25

    rc = disk_initialize(0);    // aliased to mmc_disk_initialize()

    if( rc != RES_OK  || verbose )
    {
        put_rc(rc);
    de76:	39 f0       	breq	.+14     	; 0xde86 <mmc_init+0xa6>
    de78:	0a c0       	rjmp	.+20     	; 0xde8e <mmc_init+0xae>
    de7a:	c8 01       	movw	r24, r16
    }

    if( rc == RES_OK)
    de7c:	dc d0       	rcall	.+440    	; 0xe036 <put_rc>
    de7e:	01 15       	cp	r16, r1
    de80:	11 05       	cpc	r17, r1
    de82:	29 f4       	brne	.+10     	; 0xde8e <mmc_init+0xae>
    {
        rc = f_mount(&Fatfs[0],"/", 0);
    }

    if( rc != RES_OK || verbose)
    de84:	ef cf       	rjmp	.-34     	; 0xde64 <mmc_init+0x84>
    de86:	e1 14       	cp	r14, r1
    de88:	f1 04       	cpc	r15, r1
    {
        put_rc( rc );
    de8a:	09 f4       	brne	.+2      	; 0xde8e <mmc_init+0xae>
    de8c:	43 c0       	rjmp	.+134    	; 0xdf14 <mmc_init+0x134>
    de8e:	c8 01       	movw	r24, r16
    }

    if (verbose )
    de90:	d2 d0       	rcall	.+420    	; 0xe036 <put_rc>
    de92:	e1 14       	cp	r14, r1
    de94:	f1 04       	cpc	r15, r1
    de96:	09 f4       	brne	.+2      	; 0xde9a <mmc_init+0xba>
    {
        DWORD blksize = 0;
    de98:	3d c0       	rjmp	.+122    	; 0xdf14 <mmc_init+0x134>
    de9a:	19 82       	std	Y+1, r1	; 0x01
    de9c:	1a 82       	std	Y+2, r1	; 0x02
    de9e:	1b 82       	std	Y+3, r1	; 0x03
        if(rc == RES_OK)
    dea0:	1c 82       	std	Y+4, r1	; 0x04
    dea2:	01 15       	cp	r16, r1
        {
            rc = disk_ioctl ( 0, GET_BLOCK_SIZE, (void *) &blksize);
    dea4:	11 05       	cpc	r17, r1
    dea6:	61 f5       	brne	.+88     	; 0xdf00 <mmc_init+0x120>
    dea8:	ae 01       	movw	r20, r28
    deaa:	4f 5f       	subi	r20, 0xFF	; 255
    deac:	5f 4f       	sbci	r21, 0xFF	; 255
    deae:	63 e0       	ldi	r22, 0x03	; 3
            if( rc != RES_OK)
    deb0:	80 e0       	ldi	r24, 0x00	; 0
    deb2:	4b da       	rcall	.-2922   	; 0xd34a <disk_ioctl>
            {
                put_rc( rc );
    deb4:	8c 01       	movw	r16, r24
    deb6:	00 97       	sbiw	r24, 0x00	; 0
                printf("MMC Block Size - read failed\n");
    deb8:	61 f0       	breq	.+24     	; 0xded2 <mmc_init+0xf2>
    deba:	bd d0       	rcall	.+378    	; 0xe036 <put_rc>
    debc:	85 ef       	ldi	r24, 0xF5	; 245
    debe:	97 e0       	ldi	r25, 0x07	; 7
    dec0:	1f 92       	push	r1
    dec2:	9f 93       	push	r25
    dec4:	8f 93       	push	r24
    dec6:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    deca:	0f 90       	pop	r0
    decc:	0f 90       	pop	r0
            }
            else
            {
                printf("MMC Block Size: %ld\n", blksize);
    dece:	0f 90       	pop	r0
    ded0:	17 c0       	rjmp	.+46     	; 0xdf00 <mmc_init+0x120>
    ded2:	8c 81       	ldd	r24, Y+4	; 0x04
    ded4:	8f 93       	push	r24
    ded6:	8b 81       	ldd	r24, Y+3	; 0x03
    ded8:	8f 93       	push	r24
    deda:	8a 81       	ldd	r24, Y+2	; 0x02
    dedc:	8f 93       	push	r24
    dede:	89 81       	ldd	r24, Y+1	; 0x01
    dee0:	8f 93       	push	r24
    dee2:	80 ee       	ldi	r24, 0xE0	; 224
    dee4:	97 e0       	ldi	r25, 0x07	; 7
    dee6:	1f 92       	push	r1
    dee8:	9f 93       	push	r25
            }
            if( rc == RES_OK)
            {
                fatfs_status("/");
    deea:	8f 93       	push	r24
    deec:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    def0:	8c e1       	ldi	r24, 0x1C	; 28
    def2:	98 e0       	ldi	r25, 0x08	; 8
    def4:	2e d1       	rcall	.+604    	; 0xe152 <fatfs_status>
    def6:	0f b6       	in	r0, 0x3f	; 63
    def8:	f8 94       	cli
    defa:	de bf       	out	0x3e, r29	; 62
            }
        }
        printf("END MMC INIT\n");
    defc:	0f be       	out	0x3f, r0	; 63
    defe:	cd bf       	out	0x3d, r28	; 61
    df00:	82 ed       	ldi	r24, 0xD2	; 210
    df02:	97 e0       	ldi	r25, 0x07	; 7
    df04:	1f 92       	push	r1
    df06:	9f 93       	push	r25
    df08:	8f 93       	push	r24
    df0a:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    df0e:	0f 90       	pop	r0
    }
    mmc_init_flag = 1;
    df10:	0f 90       	pop	r0
    df12:	0f 90       	pop	r0
    df14:	81 e0       	ldi	r24, 0x01	; 1
    df16:	90 e0       	ldi	r25, 0x00	; 0
    df18:	90 93 44 18 	sts	0x1844, r25	; 0x801844 <mmc_init_flag+0x1>

    return( rc ) ;
}
    df1c:	80 93 43 18 	sts	0x1843, r24	; 0x801843 <mmc_init_flag>
    df20:	c8 01       	movw	r24, r16
    df22:	24 96       	adiw	r28, 0x04	; 4
    df24:	e6 e0       	ldi	r30, 0x06	; 6
    df26:	0c 94 3b e8 	jmp	0x1d076	; 0x1d076 <__epilogue_restores__+0x18>

0000df2a <mmc_power_off>:
/// @brief  MMC Power OFF
///
/// @return void
MEMSPACE
void mmc_power_off()
{
    df2a:	08 95       	ret

0000df2c <mmc_ins_status>:

MEMSPACE
int mmc_ins_status()
{
    return (1);
}
    df2c:	81 e0       	ldi	r24, 0x01	; 1
    df2e:	90 e0       	ldi	r25, 0x00	; 0
    df30:	08 95       	ret

0000df32 <mmc_wp_status>:

MEMSPACE
int mmc_wp_status()
{
    return (0);
}
    df32:	80 e0       	ldi	r24, 0x00	; 0
    df34:	90 e0       	ldi	r25, 0x00	; 0
    df36:	08 95       	ret

0000df38 <tm_to_fat>:
/// @param[in] t: POSIX struct tm * to convert.
///
/// @return  FAT32 time.
MEMSPACE
uint32_t tm_to_fat(tm_t *t)
{
    df38:	0f 93       	push	r16
    df3a:	1f 93       	push	r17
    df3c:	fc 01       	movw	r30, r24
        | (((uint32_t)t->tm_mon+1) << 21)
        | (((uint32_t)t->tm_mday) << 16)
        | ((uint32_t)t->tm_hour << 11)
        | ((uint32_t)t->tm_min << 5)
        | ((uint32_t)t->tm_sec >> 1);
    return(fat);
    df3e:	46 81       	ldd	r20, Z+6	; 0x06
    df40:	57 81       	ldd	r21, Z+7	; 0x07
    df42:	05 2e       	mov	r0, r21
    df44:	00 0c       	add	r0, r0
    df46:	66 0b       	sbc	r22, r22
    df48:	77 0b       	sbc	r23, r23
    df4a:	ba 01       	movw	r22, r20
    df4c:	55 27       	eor	r21, r21
    df4e:	44 27       	eor	r20, r20
    df50:	84 81       	ldd	r24, Z+4	; 0x04
    df52:	95 81       	ldd	r25, Z+5	; 0x05
    df54:	09 2e       	mov	r0, r25
    df56:	00 0c       	add	r0, r0
    df58:	aa 0b       	sbc	r26, r26
    df5a:	bb 0b       	sbc	r27, r27
    df5c:	2b e0       	ldi	r18, 0x0B	; 11
    df5e:	88 0f       	add	r24, r24
    df60:	99 1f       	adc	r25, r25
    df62:	aa 1f       	adc	r26, r26
    df64:	bb 1f       	adc	r27, r27
    df66:	2a 95       	dec	r18
    df68:	d1 f7       	brne	.-12     	; 0xdf5e <tm_to_fat+0x26>
    df6a:	48 2b       	or	r20, r24
    df6c:	59 2b       	or	r21, r25
    df6e:	6a 2b       	or	r22, r26
    df70:	7b 2b       	or	r23, r27
    df72:	82 81       	ldd	r24, Z+2	; 0x02
    df74:	93 81       	ldd	r25, Z+3	; 0x03
    df76:	09 2e       	mov	r0, r25
    df78:	00 0c       	add	r0, r0
    df7a:	aa 0b       	sbc	r26, r26
    df7c:	bb 0b       	sbc	r27, r27
    df7e:	35 e0       	ldi	r19, 0x05	; 5
    df80:	88 0f       	add	r24, r24
    df82:	99 1f       	adc	r25, r25
    df84:	aa 1f       	adc	r26, r26
    df86:	bb 1f       	adc	r27, r27
    df88:	3a 95       	dec	r19
    df8a:	d1 f7       	brne	.-12     	; 0xdf80 <tm_to_fat+0x48>
    df8c:	48 2b       	or	r20, r24
    df8e:	59 2b       	or	r21, r25
    df90:	6a 2b       	or	r22, r26
    df92:	7b 2b       	or	r23, r27
    df94:	80 81       	ld	r24, Z
    df96:	91 81       	ldd	r25, Z+1	; 0x01
    df98:	09 2e       	mov	r0, r25
    df9a:	00 0c       	add	r0, r0
    df9c:	aa 0b       	sbc	r26, r26
    df9e:	bb 0b       	sbc	r27, r27
    dfa0:	b6 95       	lsr	r27
    dfa2:	a7 95       	ror	r26
    dfa4:	97 95       	ror	r25
    dfa6:	87 95       	ror	r24
    dfa8:	84 2b       	or	r24, r20
    dfaa:	95 2b       	or	r25, r21
    dfac:	a6 2b       	or	r26, r22
    dfae:	b7 2b       	or	r27, r23
    dfb0:	02 85       	ldd	r16, Z+10	; 0x0a
    dfb2:	13 85       	ldd	r17, Z+11	; 0x0b
    dfb4:	00 55       	subi	r16, 0x50	; 80
    dfb6:	11 09       	sbc	r17, r1
    dfb8:	01 2e       	mov	r0, r17
    dfba:	00 0c       	add	r0, r0
    dfbc:	22 0b       	sbc	r18, r18
    dfbe:	33 0b       	sbc	r19, r19
    dfc0:	49 e1       	ldi	r20, 0x19	; 25
    dfc2:	00 0f       	add	r16, r16
    dfc4:	11 1f       	adc	r17, r17
    dfc6:	22 1f       	adc	r18, r18
    dfc8:	33 1f       	adc	r19, r19
    dfca:	4a 95       	dec	r20
    dfcc:	d1 f7       	brne	.-12     	; 0xdfc2 <tm_to_fat+0x8a>
    dfce:	ac 01       	movw	r20, r24
    dfd0:	bd 01       	movw	r22, r26
    dfd2:	40 2b       	or	r20, r16
    dfd4:	51 2b       	or	r21, r17
    dfd6:	62 2b       	or	r22, r18
    dfd8:	73 2b       	or	r23, r19
    dfda:	80 85       	ldd	r24, Z+8	; 0x08
    dfdc:	91 85       	ldd	r25, Z+9	; 0x09
    dfde:	09 2e       	mov	r0, r25
    dfe0:	00 0c       	add	r0, r0
    dfe2:	aa 0b       	sbc	r26, r26
    dfe4:	bb 0b       	sbc	r27, r27
    dfe6:	01 96       	adiw	r24, 0x01	; 1
    dfe8:	a1 1d       	adc	r26, r1
    dfea:	b1 1d       	adc	r27, r1
    dfec:	e5 e1       	ldi	r30, 0x15	; 21
    dfee:	88 0f       	add	r24, r24
    dff0:	99 1f       	adc	r25, r25
    dff2:	aa 1f       	adc	r26, r26
    dff4:	bb 1f       	adc	r27, r27
    dff6:	ea 95       	dec	r30
    dff8:	d1 f7       	brne	.-12     	; 0xdfee <tm_to_fat+0xb6>
    dffa:	8a 01       	movw	r16, r20
    dffc:	9b 01       	movw	r18, r22
    dffe:	08 2b       	or	r16, r24
    e000:	19 2b       	or	r17, r25
    e002:	2a 2b       	or	r18, r26
    e004:	3b 2b       	or	r19, r27
    e006:	c9 01       	movw	r24, r18
    e008:	b8 01       	movw	r22, r16
}
    e00a:	1f 91       	pop	r17
    e00c:	0f 91       	pop	r16
    e00e:	08 95       	ret

0000e010 <get_fattime>:
///
/// @return FAT32 time.
/// @see tm_to_fat().
MEMSPACE
DWORD get_fattime (void)
{
    e010:	a4 e0       	ldi	r26, 0x04	; 4
    e012:	b0 e0       	ldi	r27, 0x00	; 0
    e014:	ee e0       	ldi	r30, 0x0E	; 14
    e016:	f0 e7       	ldi	r31, 0x70	; 112
    e018:	0c 94 23 e8 	jmp	0x1d046	; 0x1d046 <__prologue_saves__+0x20>
    time_t t;
/* Get GMT time */
    time(&t);
    e01c:	ce 01       	movw	r24, r28
    e01e:	01 96       	adiw	r24, 0x01	; 1
    e020:	0e 94 db 38 	call	0x71b6	; 0x71b6 <time>
    return( tm_to_fat(localtime(&t)));
    e024:	ce 01       	movw	r24, r28
    e026:	01 96       	adiw	r24, 0x01	; 1
    e028:	0e 94 74 39 	call	0x72e8	; 0x72e8 <localtime>
    e02c:	85 df       	rcall	.-246    	; 0xdf38 <tm_to_fat>
}
    e02e:	24 96       	adiw	r28, 0x04	; 4
    e030:	e2 e0       	ldi	r30, 0x02	; 2
    e032:	0c 94 3f e8 	jmp	0x1d07e	; 0x1d07e <__epilogue_restores__+0x20>

0000e036 <put_rc>:
        ptr = "INVALID ERROR MESSAGE";
    else
        ptr = (char *) err_msg[(int)rc];
    printf("rc=%u FR_%s\n", rc, ptr);
#else
    printf("rc=%u\n", rc);
    e036:	9f 93       	push	r25
    e038:	8f 93       	push	r24
    e03a:	8d e5       	ldi	r24, 0x5D	; 93
    e03c:	9a e0       	ldi	r25, 0x0A	; 10
    e03e:	1f 92       	push	r1
    e040:	9f 93       	push	r25
    e042:	8f 93       	push	r24
    e044:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
#endif
}
    e048:	0f 90       	pop	r0
    e04a:	0f 90       	pop	r0
    e04c:	0f 90       	pop	r0
    e04e:	0f 90       	pop	r0
    e050:	0f 90       	pop	r0
    e052:	08 95       	ret

0000e054 <fatfs_scan_files>:

MEMSPACE
int fatfs_scan_files (
char* path                                        /* Pointer to the working buffer with start path */
)
{
    e054:	a4 e4       	ldi	r26, 0x44	; 68
    e056:	b1 e0       	ldi	r27, 0x01	; 1
    e058:	e0 e3       	ldi	r30, 0x30	; 48
    e05a:	f0 e7       	ldi	r31, 0x70	; 112
    e05c:	0c 94 1e e8 	jmp	0x1d03c	; 0x1d03c <__prologue_saves__+0x16>
    e060:	8c 01       	movw	r16, r24
    DIR dirs;
    FRESULT fr;
    int i;
    FILINFO info;

    fr = f_opendir(&dirs, path);
    e062:	bc 01       	movw	r22, r24
    e064:	ce 01       	movw	r24, r28
    e066:	89 5e       	subi	r24, 0xE9	; 233
    e068:	9e 4f       	sbci	r25, 0xFE	; 254
    e06a:	0e 94 e8 62 	call	0xc5d0	; 0xc5d0 <f_opendir>
    if (fr == FR_OK) {
    e06e:	00 97       	sbiw	r24, 0x00	; 0
    e070:	09 f0       	breq	.+2      	; 0xe074 <fatfs_scan_files+0x20>
    e072:	5b c0       	rjmp	.+182    	; 0xe12a <fatfs_scan_files+0xd6>
        while (((fr = f_readdir(&dirs, &info)) == FR_OK) && info.fname[0]) {
            if (info.fattrib & AM_DIR) {
                AccDirs++;
                i = strlen(path);
                path[i] = '/'; strcpy(path+i+1, info.fname);
    e074:	8f e2       	ldi	r24, 0x2F	; 47
    e076:	d8 2e       	mov	r13, r24
    int i;
    FILINFO info;

    fr = f_opendir(&dirs, path);
    if (fr == FR_OK) {
        while (((fr = f_readdir(&dirs, &info)) == FR_OK) && info.fname[0]) {
    e078:	be 01       	movw	r22, r28
    e07a:	6f 5f       	subi	r22, 0xFF	; 255
    e07c:	7f 4f       	sbci	r23, 0xFF	; 255
    e07e:	ce 01       	movw	r24, r28
    e080:	89 5e       	subi	r24, 0xE9	; 233
    e082:	9e 4f       	sbci	r25, 0xFE	; 254
    e084:	0e 94 6e 63 	call	0xc6dc	; 0xc6dc <f_readdir>
    e088:	00 97       	sbiw	r24, 0x00	; 0
    e08a:	09 f0       	breq	.+2      	; 0xe08e <fatfs_scan_files+0x3a>
    e08c:	4e c0       	rjmp	.+156    	; 0xe12a <fatfs_scan_files+0xd6>
    e08e:	2f 89       	ldd	r18, Y+23	; 0x17
    e090:	22 23       	and	r18, r18
    e092:	09 f4       	brne	.+2      	; 0xe096 <fatfs_scan_files+0x42>
    e094:	4a c0       	rjmp	.+148    	; 0xe12a <fatfs_scan_files+0xd6>
            if (info.fattrib & AM_DIR) {
    e096:	89 85       	ldd	r24, Y+9	; 0x09
    e098:	84 ff       	sbrs	r24, 4
    e09a:	25 c0       	rjmp	.+74     	; 0xe0e6 <fatfs_scan_files+0x92>
                AccDirs++;
    e09c:	80 91 c8 1c 	lds	r24, 0x1CC8	; 0x801cc8 <AccDirs>
    e0a0:	90 91 c9 1c 	lds	r25, 0x1CC9	; 0x801cc9 <AccDirs+0x1>
    e0a4:	01 96       	adiw	r24, 0x01	; 1
    e0a6:	90 93 c9 1c 	sts	0x1CC9, r25	; 0x801cc9 <AccDirs+0x1>
    e0aa:	80 93 c8 1c 	sts	0x1CC8, r24	; 0x801cc8 <AccDirs>
                i = strlen(path);
    e0ae:	f8 01       	movw	r30, r16
    e0b0:	01 90       	ld	r0, Z+
    e0b2:	00 20       	and	r0, r0
    e0b4:	e9 f7       	brne	.-6      	; 0xe0b0 <fatfs_scan_files+0x5c>
    e0b6:	31 97       	sbiw	r30, 0x01	; 1
    e0b8:	e0 1b       	sub	r30, r16
    e0ba:	f1 0b       	sbc	r31, r17
                path[i] = '/'; strcpy(path+i+1, info.fname);
    e0bc:	78 01       	movw	r14, r16
    e0be:	ee 0e       	add	r14, r30
    e0c0:	ff 1e       	adc	r15, r31
    e0c2:	d7 01       	movw	r26, r14
    e0c4:	dc 92       	st	X, r13
    e0c6:	cf 01       	movw	r24, r30
    e0c8:	01 96       	adiw	r24, 0x01	; 1
    e0ca:	be 01       	movw	r22, r28
    e0cc:	69 5e       	subi	r22, 0xE9	; 233
    e0ce:	7f 4f       	sbci	r23, 0xFF	; 255
    e0d0:	80 0f       	add	r24, r16
    e0d2:	91 1f       	adc	r25, r17
    e0d4:	0e 94 17 32 	call	0x642e	; 0x642e <strcpy>
                fr = fatfs_scan_files(path);
    e0d8:	c8 01       	movw	r24, r16
    e0da:	bc df       	rcall	.-136    	; 0xe054 <fatfs_scan_files>
                path[i] = 0;
    e0dc:	f7 01       	movw	r30, r14
    e0de:	10 82       	st	Z, r1
                if (fr != FR_OK) break;
    e0e0:	00 97       	sbiw	r24, 0x00	; 0
    e0e2:	51 f2       	breq	.-108    	; 0xe078 <fatfs_scan_files+0x24>
    e0e4:	22 c0       	rjmp	.+68     	; 0xe12a <fatfs_scan_files+0xd6>
            } else {
//              xprintf(PSTR("%s/%s\n"), path, info.fname);
                AccFiles++;
    e0e6:	80 91 ca 1c 	lds	r24, 0x1CCA	; 0x801cca <AccFiles>
    e0ea:	90 91 cb 1c 	lds	r25, 0x1CCB	; 0x801ccb <AccFiles+0x1>
    e0ee:	01 96       	adiw	r24, 0x01	; 1
    e0f0:	90 93 cb 1c 	sts	0x1CCB, r25	; 0x801ccb <AccFiles+0x1>
    e0f4:	80 93 ca 1c 	sts	0x1CCA, r24	; 0x801cca <AccFiles>
                AccSize += info.fsize;
    e0f8:	40 91 c4 1c 	lds	r20, 0x1CC4	; 0x801cc4 <AccSize>
    e0fc:	50 91 c5 1c 	lds	r21, 0x1CC5	; 0x801cc5 <AccSize+0x1>
    e100:	60 91 c6 1c 	lds	r22, 0x1CC6	; 0x801cc6 <AccSize+0x2>
    e104:	70 91 c7 1c 	lds	r23, 0x1CC7	; 0x801cc7 <AccSize+0x3>
    e108:	89 81       	ldd	r24, Y+1	; 0x01
    e10a:	9a 81       	ldd	r25, Y+2	; 0x02
    e10c:	ab 81       	ldd	r26, Y+3	; 0x03
    e10e:	bc 81       	ldd	r27, Y+4	; 0x04
    e110:	84 0f       	add	r24, r20
    e112:	95 1f       	adc	r25, r21
    e114:	a6 1f       	adc	r26, r22
    e116:	b7 1f       	adc	r27, r23
    e118:	80 93 c4 1c 	sts	0x1CC4, r24	; 0x801cc4 <AccSize>
    e11c:	90 93 c5 1c 	sts	0x1CC5, r25	; 0x801cc5 <AccSize+0x1>
    e120:	a0 93 c6 1c 	sts	0x1CC6, r26	; 0x801cc6 <AccSize+0x2>
    e124:	b0 93 c7 1c 	sts	0x1CC7, r27	; 0x801cc7 <AccSize+0x3>
    e128:	a7 cf       	rjmp	.-178    	; 0xe078 <fatfs_scan_files+0x24>
#endif
        }
    }

    return fr;
}
    e12a:	cc 5b       	subi	r28, 0xBC	; 188
    e12c:	de 4f       	sbci	r29, 0xFE	; 254
    e12e:	e7 e0       	ldi	r30, 0x07	; 7
    e130:	0c 94 3a e8 	jmp	0x1d074	; 0x1d074 <__epilogue_restores__+0x16>

0000e134 <fatfs_fstype>:
/// @brief  return a string with the file system type
/// @param[in] type: file system type
/// @return string with file system type
MEMSPACE
char *fatfs_fstype(int type)
{
    e134:	01 97       	sbiw	r24, 0x01	; 1
    e136:	84 30       	cpi	r24, 0x04	; 4
    e138:	91 05       	cpc	r25, r1
    e13a:	40 f4       	brcc	.+16     	; 0xe14c <fatfs_fstype+0x18>
    e13c:	88 0f       	add	r24, r24
    e13e:	99 1f       	adc	r25, r25
    e140:	fc 01       	movw	r30, r24
    e142:	e4 50       	subi	r30, 0x04	; 4
    e144:	f9 4f       	sbci	r31, 0xF9	; 249
    e146:	80 81       	ld	r24, Z
    e148:	91 81       	ldd	r25, Z+1	; 0x01
    e14a:	08 95       	ret
    char *ptr;
    switch(type)
    e14c:	8e e1       	ldi	r24, 0x1E	; 30
    e14e:	98 e0       	ldi	r25, 0x08	; 8
        default:
             ptr = "UNKNOWN";
            break;
    }
    return(ptr);
}
    e150:	08 95       	ret

0000e152 <fatfs_status>:
/// @see AccFiles: Total number of Files
/// @see AccSize:  Total size of all files
/// @return  void
MEMSPACE
void fatfs_status(char *ptr)
{
    e152:	a4 e2       	ldi	r26, 0x24	; 36
    e154:	b0 e0       	ldi	r27, 0x00	; 0
    e156:	ef ea       	ldi	r30, 0xAF	; 175
    e158:	f0 e7       	ldi	r31, 0x70	; 112
    e15a:	0c 94 1d e8 	jmp	0x1d03a	; 0x1d03a <__prologue_saves__+0x14>
    e15e:	8c 01       	movw	r16, r24
    int res;
    FATFS *fs;
    char label[24+2];
    DWORD vsn; // volume serial number

    while(*ptr == ' ' || *ptr == '\t')
    e160:	fc 01       	movw	r30, r24
    e162:	21 91       	ld	r18, Z+
    e164:	cf 01       	movw	r24, r30
    e166:	20 32       	cpi	r18, 0x20	; 32
    e168:	d1 f3       	breq	.-12     	; 0xe15e <fatfs_status+0xc>
    e16a:	29 30       	cpi	r18, 0x09	; 9
    e16c:	c1 f3       	breq	.-16     	; 0xe15e <fatfs_status+0xc>
        ++ptr;
    printf("fatfs status:%s\n",ptr);
    e16e:	1f 93       	push	r17
    e170:	0f 93       	push	r16
    e172:	8c e4       	ldi	r24, 0x4C	; 76
    e174:	9a e0       	ldi	r25, 0x0A	; 10
    e176:	1f 92       	push	r1
    e178:	9f 93       	push	r25
    e17a:	8f 93       	push	r24
    e17c:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    res = f_getfree(ptr, (DWORD*)&p2, &fs);
    e180:	ae 01       	movw	r20, r28
    e182:	4d 5d       	subi	r20, 0xDD	; 221
    e184:	5f 4f       	sbci	r21, 0xFF	; 255
    e186:	be 01       	movw	r22, r28
    e188:	61 5e       	subi	r22, 0xE1	; 225
    e18a:	7f 4f       	sbci	r23, 0xFF	; 255
    e18c:	c8 01       	movw	r24, r16
    e18e:	0e 94 f0 63 	call	0xc7e0	; 0xc7e0 <f_getfree>
    if (res)
    e192:	0f 90       	pop	r0
    e194:	0f 90       	pop	r0
    e196:	0f 90       	pop	r0
    e198:	0f 90       	pop	r0
    e19a:	0f 90       	pop	r0
    e19c:	00 97       	sbiw	r24, 0x00	; 0
    e19e:	09 f0       	breq	.+2      	; 0xe1a2 <fatfs_status+0x50>
    e1a0:	e8 c0       	rjmp	.+464    	; 0xe372 <fatfs_status+0x220>
    {
        put_rc(res);
        return;
    }
    printf("FAT type                = %s\n",  fatfs_fstype(fs->fs_type));
    e1a2:	eb a1       	ldd	r30, Y+35	; 0x23
    e1a4:	fc a1       	ldd	r31, Y+36	; 0x24
    e1a6:	80 81       	ld	r24, Z
    e1a8:	90 e0       	ldi	r25, 0x00	; 0
    e1aa:	c4 df       	rcall	.-120    	; 0xe134 <fatfs_fstype>
    e1ac:	9f 93       	push	r25
    e1ae:	8f 93       	push	r24
    e1b0:	8e e2       	ldi	r24, 0x2E	; 46
    e1b2:	9a e0       	ldi	r25, 0x0A	; 10
    e1b4:	1f 92       	push	r1
    e1b6:	9f 93       	push	r25
    e1b8:	8f 93       	push	r24
    e1ba:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    printf("Bytes/Cluster           = %lu\n", (DWORD)fs->csize * 512);
    e1be:	eb a1       	ldd	r30, Y+35	; 0x23
    e1c0:	fc a1       	ldd	r31, Y+36	; 0x24
    e1c2:	81 85       	ldd	r24, Z+9	; 0x09
    e1c4:	92 85       	ldd	r25, Z+10	; 0x0a
    e1c6:	a0 e0       	ldi	r26, 0x00	; 0
    e1c8:	b0 e0       	ldi	r27, 0x00	; 0
    e1ca:	49 e0       	ldi	r20, 0x09	; 9
    e1cc:	88 0f       	add	r24, r24
    e1ce:	99 1f       	adc	r25, r25
    e1d0:	aa 1f       	adc	r26, r26
    e1d2:	bb 1f       	adc	r27, r27
    e1d4:	4a 95       	dec	r20
    e1d6:	d1 f7       	brne	.-12     	; 0xe1cc <fatfs_status+0x7a>
    e1d8:	bf 93       	push	r27
    e1da:	af 93       	push	r26
    e1dc:	9f 93       	push	r25
    e1de:	8f 93       	push	r24
    e1e0:	8f e0       	ldi	r24, 0x0F	; 15
    e1e2:	9a e0       	ldi	r25, 0x0A	; 10
    e1e4:	1f 92       	push	r1
    e1e6:	9f 93       	push	r25
    e1e8:	8f 93       	push	r24
    e1ea:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    printf("Number of FATs          = %u\n",  fs->n_fats);
    e1ee:	eb a1       	ldd	r30, Y+35	; 0x23
    e1f0:	fc a1       	ldd	r31, Y+36	; 0x24
    e1f2:	82 81       	ldd	r24, Z+2	; 0x02
    e1f4:	1f 92       	push	r1
    e1f6:	8f 93       	push	r24
    e1f8:	81 ef       	ldi	r24, 0xF1	; 241
    e1fa:	99 e0       	ldi	r25, 0x09	; 9
    e1fc:	1f 92       	push	r1
    e1fe:	9f 93       	push	r25
    e200:	8f 93       	push	r24
    e202:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    printf("Root DIR entries        = %u\n",  fs->n_rootdir);
    e206:	eb a1       	ldd	r30, Y+35	; 0x23
    e208:	fc a1       	ldd	r31, Y+36	; 0x24
    e20a:	80 85       	ldd	r24, Z+8	; 0x08
    e20c:	8f 93       	push	r24
    e20e:	87 81       	ldd	r24, Z+7	; 0x07
    e210:	8f 93       	push	r24
    e212:	83 ed       	ldi	r24, 0xD3	; 211
    e214:	99 e0       	ldi	r25, 0x09	; 9
    e216:	1f 92       	push	r1
    e218:	9f 93       	push	r25
    e21a:	8f 93       	push	r24
    e21c:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    printf("Sectors/FAT             = %lu\n", fs->fsize);
    e220:	eb a1       	ldd	r30, Y+35	; 0x23
    e222:	fc a1       	ldd	r31, Y+36	; 0x24
    e224:	80 a1       	ldd	r24, Z+32	; 0x20
    e226:	8f 93       	push	r24
    e228:	87 8d       	ldd	r24, Z+31	; 0x1f
    e22a:	8f 93       	push	r24
    e22c:	86 8d       	ldd	r24, Z+30	; 0x1e
    e22e:	8f 93       	push	r24
    e230:	85 8d       	ldd	r24, Z+29	; 0x1d
    e232:	8f 93       	push	r24
    e234:	84 eb       	ldi	r24, 0xB4	; 180
    e236:	99 e0       	ldi	r25, 0x09	; 9
    e238:	1f 92       	push	r1
    e23a:	9f 93       	push	r25
    e23c:	8f 93       	push	r24
    e23e:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    printf("Number of clusters      = %lu\n", fs->n_fatent - 2);
    e242:	eb a1       	ldd	r30, Y+35	; 0x23
    e244:	fc a1       	ldd	r31, Y+36	; 0x24
    e246:	81 8d       	ldd	r24, Z+25	; 0x19
    e248:	92 8d       	ldd	r25, Z+26	; 0x1a
    e24a:	a3 8d       	ldd	r26, Z+27	; 0x1b
    e24c:	b4 8d       	ldd	r27, Z+28	; 0x1c
    e24e:	02 97       	sbiw	r24, 0x02	; 2
    e250:	a1 09       	sbc	r26, r1
    e252:	b1 09       	sbc	r27, r1
    e254:	bf 93       	push	r27
    e256:	af 93       	push	r26
    e258:	9f 93       	push	r25
    e25a:	8f 93       	push	r24
    e25c:	85 e9       	ldi	r24, 0x95	; 149
    e25e:	99 e0       	ldi	r25, 0x09	; 9
    e260:	1f 92       	push	r1
    e262:	9f 93       	push	r25
    e264:	8f 93       	push	r24
    e266:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    printf("FAT start (lba)         = %lu\n", fs->fatbase);
    e26a:	0f b6       	in	r0, 0x3f	; 63
    e26c:	f8 94       	cli
    e26e:	de bf       	out	0x3e, r29	; 62
    e270:	0f be       	out	0x3f, r0	; 63
    e272:	cd bf       	out	0x3d, r28	; 61
    e274:	eb a1       	ldd	r30, Y+35	; 0x23
    e276:	fc a1       	ldd	r31, Y+36	; 0x24
    e278:	80 a5       	ldd	r24, Z+40	; 0x28
    e27a:	8f 93       	push	r24
    e27c:	87 a1       	ldd	r24, Z+39	; 0x27
    e27e:	8f 93       	push	r24
    e280:	86 a1       	ldd	r24, Z+38	; 0x26
    e282:	8f 93       	push	r24
    e284:	85 a1       	ldd	r24, Z+37	; 0x25
    e286:	8f 93       	push	r24
    e288:	86 e7       	ldi	r24, 0x76	; 118
    e28a:	99 e0       	ldi	r25, 0x09	; 9
    e28c:	1f 92       	push	r1
    e28e:	9f 93       	push	r25
    e290:	8f 93       	push	r24
    e292:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    printf("DIR start (lba,clustor) = %lu\n", fs->dirbase);
    e296:	eb a1       	ldd	r30, Y+35	; 0x23
    e298:	fc a1       	ldd	r31, Y+36	; 0x24
    e29a:	84 a5       	ldd	r24, Z+44	; 0x2c
    e29c:	8f 93       	push	r24
    e29e:	83 a5       	ldd	r24, Z+43	; 0x2b
    e2a0:	8f 93       	push	r24
    e2a2:	82 a5       	ldd	r24, Z+42	; 0x2a
    e2a4:	8f 93       	push	r24
    e2a6:	81 a5       	ldd	r24, Z+41	; 0x29
    e2a8:	8f 93       	push	r24
    e2aa:	87 e5       	ldi	r24, 0x57	; 87
    e2ac:	99 e0       	ldi	r25, 0x09	; 9
    e2ae:	1f 92       	push	r1
    e2b0:	9f 93       	push	r25
    e2b2:	8f 93       	push	r24
    e2b4:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    printf("Data start (lba)        = %lu\n", fs->database);
    e2b8:	eb a1       	ldd	r30, Y+35	; 0x23
    e2ba:	fc a1       	ldd	r31, Y+36	; 0x24
    e2bc:	80 a9       	ldd	r24, Z+48	; 0x30
    e2be:	8f 93       	push	r24
    e2c0:	87 a5       	ldd	r24, Z+47	; 0x2f
    e2c2:	8f 93       	push	r24
    e2c4:	86 a5       	ldd	r24, Z+46	; 0x2e
    e2c6:	8f 93       	push	r24
    e2c8:	85 a5       	ldd	r24, Z+45	; 0x2d
    e2ca:	8f 93       	push	r24
    e2cc:	88 e3       	ldi	r24, 0x38	; 56
    e2ce:	99 e0       	ldi	r25, 0x09	; 9
    e2d0:	1f 92       	push	r1
    e2d2:	9f 93       	push	r25
    e2d4:	8f 93       	push	r24
    e2d6:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>

#if _USE_LABEL
    res = f_getlabel(ptr, label, (DWORD*)&vsn);
    e2da:	ae 01       	movw	r20, r28
    e2dc:	45 5e       	subi	r20, 0xE5	; 229
    e2de:	5f 4f       	sbci	r21, 0xFF	; 255
    e2e0:	be 01       	movw	r22, r28
    e2e2:	6f 5f       	subi	r22, 0xFF	; 255
    e2e4:	7f 4f       	sbci	r23, 0xFF	; 255
    e2e6:	c8 01       	movw	r24, r16
    e2e8:	0e 94 7e 68 	call	0xd0fc	; 0xd0fc <f_getlabel>
    if (res)
    e2ec:	0f b6       	in	r0, 0x3f	; 63
    e2ee:	f8 94       	cli
    e2f0:	de bf       	out	0x3e, r29	; 62
    e2f2:	0f be       	out	0x3f, r0	; 63
    e2f4:	cd bf       	out	0x3d, r28	; 61
    e2f6:	00 97       	sbiw	r24, 0x00	; 0
    e2f8:	e1 f5       	brne	.+120    	; 0xe372 <fatfs_status+0x220>
    {
        put_rc(res);
        return;
    }
    printf("Volume name             = %s\n", label[0] ? label : "<blank>");
    e2fa:	89 81       	ldd	r24, Y+1	; 0x01
    e2fc:	81 11       	cpse	r24, r1
    e2fe:	03 c0       	rjmp	.+6      	; 0xe306 <fatfs_status+0x1b4>
    e300:	86 e2       	ldi	r24, 0x26	; 38
    e302:	98 e0       	ldi	r25, 0x08	; 8
    e304:	02 c0       	rjmp	.+4      	; 0xe30a <fatfs_status+0x1b8>
    e306:	ce 01       	movw	r24, r28
    e308:	01 96       	adiw	r24, 0x01	; 1
    e30a:	9f 93       	push	r25
    e30c:	8f 93       	push	r24
    e30e:	8a e1       	ldi	r24, 0x1A	; 26
    e310:	99 e0       	ldi	r25, 0x09	; 9
    e312:	1f 92       	push	r1
    e314:	9f 93       	push	r25
    e316:	8f 93       	push	r24
    e318:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    printf("Volume S/N              = %04X-%04X\n", (WORD)((DWORD)vsn >> 16), (WORD)(vsn & 0xFFFF));
    e31c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    e31e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    e320:	ad 8d       	ldd	r26, Y+29	; 0x1d
    e322:	be 8d       	ldd	r27, Y+30	; 0x1e
    e324:	9f 93       	push	r25
    e326:	8f 93       	push	r24
    e328:	cd 01       	movw	r24, r26
    e32a:	aa 27       	eor	r26, r26
    e32c:	bb 27       	eor	r27, r27
    e32e:	9f 93       	push	r25
    e330:	8f 93       	push	r24
    e332:	85 ef       	ldi	r24, 0xF5	; 245
    e334:	98 e0       	ldi	r25, 0x08	; 8
    e336:	1f 92       	push	r1
    e338:	9f 93       	push	r25
    e33a:	8f 93       	push	r24
    e33c:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
#endif

    AccSize = AccFiles = AccDirs = 0;
    e340:	10 92 c9 1c 	sts	0x1CC9, r1	; 0x801cc9 <AccDirs+0x1>
    e344:	10 92 c8 1c 	sts	0x1CC8, r1	; 0x801cc8 <AccDirs>
    e348:	10 92 cb 1c 	sts	0x1CCB, r1	; 0x801ccb <AccFiles+0x1>
    e34c:	10 92 ca 1c 	sts	0x1CCA, r1	; 0x801cca <AccFiles>
    e350:	10 92 c4 1c 	sts	0x1CC4, r1	; 0x801cc4 <AccSize>
    e354:	10 92 c5 1c 	sts	0x1CC5, r1	; 0x801cc5 <AccSize+0x1>
    e358:	10 92 c6 1c 	sts	0x1CC6, r1	; 0x801cc6 <AccSize+0x2>
    e35c:	10 92 c7 1c 	sts	0x1CC7, r1	; 0x801cc7 <AccSize+0x3>
    res = fatfs_scan_files(ptr);
    e360:	c8 01       	movw	r24, r16
    if (res)
    e362:	78 de       	rcall	.-784    	; 0xe054 <fatfs_scan_files>
    e364:	0f b6       	in	r0, 0x3f	; 63
    e366:	f8 94       	cli
    e368:	de bf       	out	0x3e, r29	; 62
    e36a:	0f be       	out	0x3f, r0	; 63
    e36c:	cd bf       	out	0x3d, r28	; 61
    {
        put_rc(res);
    e36e:	00 97       	sbiw	r24, 0x00	; 0
    e370:	11 f0       	breq	.+4      	; 0xe376 <fatfs_status+0x224>
        return;
    e372:	61 de       	rcall	.-830    	; 0xe036 <put_rc>
    }
    printf("%u files, %lu bytes.\n%u folders.\n"
    e374:	56 c0       	rjmp	.+172    	; 0xe422 <fatfs_status+0x2d0>
    e376:	0b a1       	ldd	r16, Y+35	; 0x23
    e378:	1c a1       	ldd	r17, Y+36	; 0x24
    e37a:	f8 01       	movw	r30, r16
    e37c:	c1 84       	ldd	r12, Z+9	; 0x09
    e37e:	d2 84       	ldd	r13, Z+10	; 0x0a
    e380:	e1 2c       	mov	r14, r1
    e382:	f1 2c       	mov	r15, r1
    e384:	6f 8d       	ldd	r22, Y+31	; 0x1f
    e386:	78 a1       	ldd	r23, Y+32	; 0x20
    e388:	89 a1       	ldd	r24, Y+33	; 0x21
    e38a:	9a a1       	ldd	r25, Y+34	; 0x22
    e38c:	a7 01       	movw	r20, r14
    e38e:	96 01       	movw	r18, r12
    e390:	0e 94 4f e7 	call	0x1ce9e	; 0x1ce9e <__mulsi3>
    e394:	22 e0       	ldi	r18, 0x02	; 2
    e396:	30 e0       	ldi	r19, 0x00	; 0
    e398:	40 e0       	ldi	r20, 0x00	; 0
    e39a:	50 e0       	ldi	r21, 0x00	; 0
    e39c:	0e 94 b3 e7 	call	0x1cf66	; 0x1cf66 <__divmodsi4>
    e3a0:	5f 93       	push	r21
    e3a2:	4f 93       	push	r20
    e3a4:	3f 93       	push	r19
    e3a6:	2f 93       	push	r18
    e3a8:	f8 01       	movw	r30, r16
    e3aa:	81 8d       	ldd	r24, Z+25	; 0x19
    e3ac:	92 8d       	ldd	r25, Z+26	; 0x1a
    e3ae:	a3 8d       	ldd	r26, Z+27	; 0x1b
    e3b0:	b4 8d       	ldd	r27, Z+28	; 0x1c
    e3b2:	9c 01       	movw	r18, r24
    e3b4:	ad 01       	movw	r20, r26
    e3b6:	22 50       	subi	r18, 0x02	; 2
    e3b8:	31 09       	sbc	r19, r1
    e3ba:	41 09       	sbc	r20, r1
    e3bc:	51 09       	sbc	r21, r1
    e3be:	c7 01       	movw	r24, r14
    e3c0:	b6 01       	movw	r22, r12
    e3c2:	0e 94 4f e7 	call	0x1ce9e	; 0x1ce9e <__mulsi3>
    e3c6:	dc 01       	movw	r26, r24
    e3c8:	cb 01       	movw	r24, r22
    e3ca:	b6 95       	lsr	r27
    e3cc:	a7 95       	ror	r26
    e3ce:	97 95       	ror	r25
    e3d0:	87 95       	ror	r24
    e3d2:	bf 93       	push	r27
    e3d4:	af 93       	push	r26
    e3d6:	9f 93       	push	r25
    e3d8:	8f 93       	push	r24
    e3da:	80 91 c9 1c 	lds	r24, 0x1CC9	; 0x801cc9 <AccDirs+0x1>
    e3de:	8f 93       	push	r24
    e3e0:	80 91 c8 1c 	lds	r24, 0x1CC8	; 0x801cc8 <AccDirs>
    e3e4:	8f 93       	push	r24
    e3e6:	80 91 c7 1c 	lds	r24, 0x1CC7	; 0x801cc7 <AccSize+0x3>
    e3ea:	8f 93       	push	r24
    e3ec:	80 91 c6 1c 	lds	r24, 0x1CC6	; 0x801cc6 <AccSize+0x2>
    e3f0:	8f 93       	push	r24
    e3f2:	80 91 c5 1c 	lds	r24, 0x1CC5	; 0x801cc5 <AccSize+0x1>
    e3f6:	8f 93       	push	r24
    e3f8:	80 91 c4 1c 	lds	r24, 0x1CC4	; 0x801cc4 <AccSize>
    e3fc:	8f 93       	push	r24
    e3fe:	80 91 cb 1c 	lds	r24, 0x1CCB	; 0x801ccb <AccFiles+0x1>
    e402:	8f 93       	push	r24
    e404:	80 91 ca 1c 	lds	r24, 0x1CCA	; 0x801cca <AccFiles>
    e408:	8f 93       	push	r24
    e40a:	88 ea       	ldi	r24, 0xA8	; 168
    e40c:	98 e0       	ldi	r25, 0x08	; 8
    e40e:	1f 92       	push	r1
    e410:	9f 93       	push	r25
    e412:	8f 93       	push	r24
    e414:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    e418:	0f b6       	in	r0, 0x3f	; 63
    e41a:	f8 94       	cli
    e41c:	de bf       	out	0x3e, r29	; 62
    e41e:	0f be       	out	0x3f, r0	; 63
                 "%lu KB total disk space.\n%lu KB available.\n",
            AccFiles, AccSize, AccDirs,
            (fs->n_fatent - 2) * fs->csize / 2, p2 * fs->csize / 2
    );

}
    e420:	cd bf       	out	0x3d, r28	; 61
    e422:	a4 96       	adiw	r28, 0x24	; 36
    e424:	e8 e0       	ldi	r30, 0x08	; 8
    e426:	0c 94 39 e8 	jmp	0x1d072	; 0x1d072 <__epilogue_restores__+0x14>

0000e42a <fatfs_filinfo_list>:
/// @param[in] : FILINFO pointer
/// @return  void

MEMSPACE
void fatfs_filinfo_list(FILINFO *info)
{
    e42a:	a6 e0       	ldi	r26, 0x06	; 6
    e42c:	b0 e0       	ldi	r27, 0x00	; 0
    e42e:	eb e1       	ldi	r30, 0x1B	; 27
    e430:	f2 e7       	ldi	r31, 0x72	; 114
    e432:	0c 94 23 e8 	jmp	0x1d046	; 0x1d046 <__prologue_saves__+0x20>
    e436:	fc 01       	movw	r30, r24
    char attrs[6];
    if(info->fname[0] == 0)
    e438:	86 89       	ldd	r24, Z+22	; 0x16
    e43a:	81 11       	cpse	r24, r1
    e43c:	0b c0       	rjmp	.+22     	; 0xe454 <fatfs_filinfo_list+0x2a>
    {
        printf("fatfs_filinfo_list: empty\n");
    e43e:	8d e8       	ldi	r24, 0x8D	; 141
    e440:	98 e0       	ldi	r25, 0x08	; 8
    e442:	1f 92       	push	r1
    e444:	9f 93       	push	r25
    e446:	8f 93       	push	r24
    e448:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
        return;
    e44c:	0f 90       	pop	r0
    e44e:	0f 90       	pop	r0
    e450:	0f 90       	pop	r0
    e452:	6e c0       	rjmp	.+220    	; 0xe530 <fatfs_filinfo_list+0x106>
    }
    attrs[0] = (info->fattrib & AM_DIR) ? 'D' : '-';
    e454:	80 85       	ldd	r24, Z+8	; 0x08
    e456:	84 fd       	sbrc	r24, 4
    e458:	02 c0       	rjmp	.+4      	; 0xe45e <fatfs_filinfo_list+0x34>
    e45a:	9d e2       	ldi	r25, 0x2D	; 45
    e45c:	01 c0       	rjmp	.+2      	; 0xe460 <fatfs_filinfo_list+0x36>
    e45e:	94 e4       	ldi	r25, 0x44	; 68
    e460:	99 83       	std	Y+1, r25	; 0x01
    attrs[1] = (info->fattrib & AM_RDO) ? 'R' : '-';
    e462:	80 fd       	sbrc	r24, 0
    e464:	02 c0       	rjmp	.+4      	; 0xe46a <fatfs_filinfo_list+0x40>
    e466:	9d e2       	ldi	r25, 0x2D	; 45
    e468:	01 c0       	rjmp	.+2      	; 0xe46c <fatfs_filinfo_list+0x42>
    e46a:	92 e5       	ldi	r25, 0x52	; 82
    e46c:	9a 83       	std	Y+2, r25	; 0x02
    attrs[2] = (info->fattrib & AM_HID) ? 'H' : '-';
    e46e:	81 fd       	sbrc	r24, 1
    e470:	02 c0       	rjmp	.+4      	; 0xe476 <fatfs_filinfo_list+0x4c>
    e472:	9d e2       	ldi	r25, 0x2D	; 45
    e474:	01 c0       	rjmp	.+2      	; 0xe478 <fatfs_filinfo_list+0x4e>
    e476:	98 e4       	ldi	r25, 0x48	; 72
    e478:	9b 83       	std	Y+3, r25	; 0x03
    attrs[3] = (info->fattrib & AM_SYS) ? 'S' : '-';
    e47a:	82 fd       	sbrc	r24, 2
    e47c:	02 c0       	rjmp	.+4      	; 0xe482 <fatfs_filinfo_list+0x58>
    e47e:	9d e2       	ldi	r25, 0x2D	; 45
    e480:	01 c0       	rjmp	.+2      	; 0xe484 <fatfs_filinfo_list+0x5a>
    e482:	93 e5       	ldi	r25, 0x53	; 83
    e484:	9c 83       	std	Y+4, r25	; 0x04
    attrs[4] = (info->fattrib & AM_ARC) ? 'A' : '-';
    e486:	85 fd       	sbrc	r24, 5
    e488:	02 c0       	rjmp	.+4      	; 0xe48e <fatfs_filinfo_list+0x64>
    e48a:	8d e2       	ldi	r24, 0x2D	; 45
    e48c:	01 c0       	rjmp	.+2      	; 0xe490 <fatfs_filinfo_list+0x66>
    e48e:	81 e4       	ldi	r24, 0x41	; 65
    e490:	8d 83       	std	Y+5, r24	; 0x05
    attrs[5] = 0;
    e492:	1e 82       	std	Y+6, r1	; 0x06
    printf("%s %u/%02u/%02u %02u:%02u %9lu %s",
    e494:	46 81       	ldd	r20, Z+6	; 0x06
    e496:	57 81       	ldd	r21, Z+7	; 0x07
    e498:	84 81       	ldd	r24, Z+4	; 0x04
    e49a:	95 81       	ldd	r25, Z+5	; 0x05
    e49c:	9f 01       	movw	r18, r30
    e49e:	2a 5e       	subi	r18, 0xEA	; 234
    e4a0:	3f 4f       	sbci	r19, 0xFF	; 255
    e4a2:	3f 93       	push	r19
    e4a4:	2f 93       	push	r18
    e4a6:	23 81       	ldd	r18, Z+3	; 0x03
    e4a8:	2f 93       	push	r18
    e4aa:	22 81       	ldd	r18, Z+2	; 0x02
    e4ac:	2f 93       	push	r18
    e4ae:	21 81       	ldd	r18, Z+1	; 0x01
    e4b0:	2f 93       	push	r18
    e4b2:	20 81       	ld	r18, Z
    e4b4:	2f 93       	push	r18
    e4b6:	9a 01       	movw	r18, r20
    e4b8:	45 e0       	ldi	r20, 0x05	; 5
    e4ba:	36 95       	lsr	r19
    e4bc:	27 95       	ror	r18
    e4be:	4a 95       	dec	r20
    e4c0:	e1 f7       	brne	.-8      	; 0xe4ba <fatfs_filinfo_list+0x90>
    e4c2:	2f 73       	andi	r18, 0x3F	; 63
    e4c4:	33 27       	eor	r19, r19
    e4c6:	3f 93       	push	r19
    e4c8:	2f 93       	push	r18
    e4ca:	25 2f       	mov	r18, r21
    e4cc:	26 95       	lsr	r18
    e4ce:	26 95       	lsr	r18
    e4d0:	26 95       	lsr	r18
    e4d2:	1f 92       	push	r1
    e4d4:	2f 93       	push	r18
    e4d6:	9c 01       	movw	r18, r24
    e4d8:	2f 71       	andi	r18, 0x1F	; 31
    e4da:	33 27       	eor	r19, r19
    e4dc:	3f 93       	push	r19
    e4de:	2f 93       	push	r18
    e4e0:	9c 01       	movw	r18, r24
    e4e2:	55 e0       	ldi	r21, 0x05	; 5
    e4e4:	36 95       	lsr	r19
    e4e6:	27 95       	ror	r18
    e4e8:	5a 95       	dec	r21
    e4ea:	e1 f7       	brne	.-8      	; 0xe4e4 <fatfs_filinfo_list+0xba>
    e4ec:	2f 70       	andi	r18, 0x0F	; 15
    e4ee:	33 27       	eor	r19, r19
    e4f0:	3f 93       	push	r19
    e4f2:	2f 93       	push	r18
    e4f4:	89 2f       	mov	r24, r25
    e4f6:	99 27       	eor	r25, r25
    e4f8:	86 95       	lsr	r24
    e4fa:	84 54       	subi	r24, 0x44	; 68
    e4fc:	98 4f       	sbci	r25, 0xF8	; 248
    e4fe:	9f 93       	push	r25
    e500:	8f 93       	push	r24
    e502:	ce 01       	movw	r24, r28
    e504:	01 96       	adiw	r24, 0x01	; 1
    e506:	9f 93       	push	r25
    e508:	8f 93       	push	r24
    e50a:	8b e6       	ldi	r24, 0x6B	; 107
    e50c:	98 e0       	ldi	r25, 0x08	; 8
    e50e:	1f 92       	push	r1
    e510:	9f 93       	push	r25
    e512:	8f 93       	push	r24
    e514:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
        attrs,
        (info->fdate >> 9) + 1980, (info->fdate >> 5) & 15, info->fdate & 31,
        (info->ftime >> 11), (info->ftime >> 5) & 63,
        info->fsize, info->fname);
    printf("\n");
    e518:	89 e6       	ldi	r24, 0x69	; 105
    e51a:	98 e0       	ldi	r25, 0x08	; 8
    e51c:	1f 92       	push	r1
    e51e:	9f 93       	push	r25
    e520:	8f 93       	push	r24
    e522:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    e526:	0f b6       	in	r0, 0x3f	; 63
    e528:	f8 94       	cli
    e52a:	de bf       	out	0x3e, r29	; 62
    e52c:	0f be       	out	0x3f, r0	; 63
    e52e:	cd bf       	out	0x3d, r28	; 61
}
    e530:	26 96       	adiw	r28, 0x06	; 6
    e532:	e2 e0       	ldi	r30, 0x02	; 2
    e534:	0c 94 3f e8 	jmp	0x1d07e	; 0x1d07e <__epilogue_restores__+0x20>

0000e538 <fatfs_help>:

/// @brief Display FatFs test diagnostics help menu.
/// @return  void
MEMSPACE
void fatfs_help( int full)
{
    e538:	cf 93       	push	r28
    e53a:	df 93       	push	r29
    e53c:	ec 01       	movw	r28, r24
    printf("fatfs help\n");
    e53e:	8e ea       	ldi	r24, 0xAE	; 174
    e540:	9b e0       	ldi	r25, 0x0B	; 11
    e542:	1f 92       	push	r1
    e544:	9f 93       	push	r25
    e546:	8f 93       	push	r24
    e548:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    
    if(full)
    e54c:	0f 90       	pop	r0
    e54e:	0f 90       	pop	r0
    e550:	0f 90       	pop	r0
    e552:	cd 2b       	or	r28, r29
    e554:	51 f0       	breq	.+20     	; 0xe56a <fatfs_help+0x32>
    {
        printf(
    e556:	82 e3       	ldi	r24, 0x32	; 50
    e558:	9b e0       	ldi	r25, 0x0B	; 11
    e55a:	1f 92       	push	r1
    e55c:	9f 93       	push	r25
    e55e:	8f 93       	push	r24
    e560:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    e564:	0f 90       	pop	r0
    e566:	0f 90       	pop	r0
    e568:	0f 90       	pop	r0
#endif
        "\n"
        );
    }
        
}
    e56a:	df 91       	pop	r29
    e56c:	cf 91       	pop	r28
    e56e:	08 95       	ret

0000e570 <fatfs_ls>:
///
/// @see fatfs_filinfo_list().
/// @return  void.
MEMSPACE
void fatfs_ls(char *name)
{
    e570:	aa e4       	ldi	r26, 0x4A	; 74
    e572:	b2 e0       	ldi	r27, 0x02	; 2
    e574:	ee eb       	ldi	r30, 0xBE	; 190
    e576:	f2 e7       	ldi	r31, 0x72	; 114
    e578:	0c 94 1d e8 	jmp	0x1d03a	; 0x1d03a <__prologue_saves__+0x14>
    e57c:	8e 01       	movw	r16, r28
    e57e:	09 5e       	subi	r16, 0xE9	; 233
    e580:	1e 4f       	sbci	r17, 0xFE	; 254
    FILINFO fno;
    DIR dirs;                                     /* Directory object */
    FATFS *fs;
    char buff[256]; 

    if(!name || !*name)
    e582:	00 97       	sbiw	r24, 0x00	; 0
    e584:	21 f0       	breq	.+8      	; 0xe58e <fatfs_ls+0x1e>
    e586:	fc 01       	movw	r30, r24
    e588:	20 81       	ld	r18, Z
    e58a:	21 11       	cpse	r18, r1
    e58c:	03 c0       	rjmp	.+6      	; 0xe594 <fatfs_ls+0x24>
    {
        strcpy(buff,".");
    e58e:	69 e7       	ldi	r22, 0x79	; 121
    e590:	72 e1       	ldi	r23, 0x12	; 18
    e592:	01 c0       	rjmp	.+2      	; 0xe596 <fatfs_ls+0x26>
    }
    else
    {
        strcpy(buff,name);
    e594:	bc 01       	movw	r22, r24
    e596:	c8 01       	movw	r24, r16
    e598:	0e 94 17 32 	call	0x642e	; 0x642e <strcpy>
    }
    printf("Listing:[%s]\n",buff);
    e59c:	1f 93       	push	r17
    e59e:	0f 93       	push	r16
    e5a0:	82 ea       	ldi	r24, 0xA2	; 162
    e5a2:	9a e0       	ldi	r25, 0x0A	; 10
    e5a4:	1f 92       	push	r1
    e5a6:	9f 93       	push	r25
    e5a8:	8f 93       	push	r24
    e5aa:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>

    res = f_opendir(&dirs, buff);
    e5ae:	b8 01       	movw	r22, r16
    e5b0:	ce 01       	movw	r24, r28
    e5b2:	89 5e       	subi	r24, 0xE9	; 233
    e5b4:	9d 4f       	sbci	r25, 0xFD	; 253
    e5b6:	0e 94 e8 62 	call	0xc5d0	; 0xc5d0 <f_opendir>
    if (res) { put_rc(res); return; }
    e5ba:	0f 90       	pop	r0
    e5bc:	0f 90       	pop	r0
    e5be:	0f 90       	pop	r0
    e5c0:	0f 90       	pop	r0
    e5c2:	0f 90       	pop	r0
    e5c4:	00 97       	sbiw	r24, 0x00	; 0
    e5c6:	11 f0       	breq	.+4      	; 0xe5cc <fatfs_ls+0x5c>
    e5c8:	36 dd       	rcall	.-1428   	; 0xe036 <put_rc>
    p1 = s1 = s2 = 0;
    e5ca:	9a c0       	rjmp	.+308    	; 0xe700 <fatfs_ls+0x190>
    e5cc:	cb 5b       	subi	r28, 0xBB	; 187
    e5ce:	dd 4f       	sbci	r29, 0xFD	; 253
    e5d0:	18 82       	st	Y, r1
    e5d2:	19 82       	std	Y+1, r1	; 0x01
    e5d4:	1a 82       	std	Y+2, r1	; 0x02
    e5d6:	1b 82       	std	Y+3, r1	; 0x03
    e5d8:	c5 54       	subi	r28, 0x45	; 69
    e5da:	d2 40       	sbci	r29, 0x02	; 2
    e5dc:	c1 2c       	mov	r12, r1
    e5de:	d1 2c       	mov	r13, r1
    e5e0:	e1 2c       	mov	r14, r1
    while(1)
    {
        res = f_readdir(&dirs, &fno);
    e5e2:	f1 2c       	mov	r15, r1
    e5e4:	be 01       	movw	r22, r28
    e5e6:	6f 5f       	subi	r22, 0xFF	; 255
    e5e8:	7f 4f       	sbci	r23, 0xFF	; 255
    e5ea:	ce 01       	movw	r24, r28
    e5ec:	89 5e       	subi	r24, 0xE9	; 233
    e5ee:	9d 4f       	sbci	r25, 0xFD	; 253
    e5f0:	0e 94 6e 63 	call	0xc6dc	; 0xc6dc <f_readdir>
        if ((res != FR_OK) || !fno.fname[0]) break;
    e5f4:	89 2b       	or	r24, r25
    e5f6:	49 f5       	brne	.+82     	; 0xe64a <fatfs_ls+0xda>
    e5f8:	8f 89       	ldd	r24, Y+23	; 0x17
    e5fa:	88 23       	and	r24, r24
        if (fno.fattrib & AM_DIR)
    e5fc:	31 f1       	breq	.+76     	; 0xe64a <fatfs_ls+0xda>
    e5fe:	89 85       	ldd	r24, Y+9	; 0x09
    e600:	84 ff       	sbrs	r24, 4
        {
            s2++;
    e602:	04 c0       	rjmp	.+8      	; 0xe60c <fatfs_ls+0x9c>
    e604:	ff ef       	ldi	r31, 0xFF	; 255
    e606:	cf 1a       	sub	r12, r31
    e608:	df 0a       	sbc	r13, r31
        }
        else
        {
            s1++; p1 += fno.fsize;
    e60a:	1b c0       	rjmp	.+54     	; 0xe642 <fatfs_ls+0xd2>
    e60c:	2f ef       	ldi	r18, 0xFF	; 255
    e60e:	e2 1a       	sub	r14, r18
    e610:	f2 0a       	sbc	r15, r18
    e612:	49 81       	ldd	r20, Y+1	; 0x01
    e614:	5a 81       	ldd	r21, Y+2	; 0x02
    e616:	6b 81       	ldd	r22, Y+3	; 0x03
    e618:	7c 81       	ldd	r23, Y+4	; 0x04
    e61a:	cb 5b       	subi	r28, 0xBB	; 187
    e61c:	dd 4f       	sbci	r29, 0xFD	; 253
    e61e:	88 81       	ld	r24, Y
    e620:	99 81       	ldd	r25, Y+1	; 0x01
    e622:	aa 81       	ldd	r26, Y+2	; 0x02
    e624:	bb 81       	ldd	r27, Y+3	; 0x03
    e626:	c5 54       	subi	r28, 0x45	; 69
    e628:	d2 40       	sbci	r29, 0x02	; 2
    e62a:	84 0f       	add	r24, r20
    e62c:	95 1f       	adc	r25, r21
    e62e:	a6 1f       	adc	r26, r22
    e630:	b7 1f       	adc	r27, r23
    e632:	cb 5b       	subi	r28, 0xBB	; 187
    e634:	dd 4f       	sbci	r29, 0xFD	; 253
    e636:	88 83       	st	Y, r24
    e638:	99 83       	std	Y+1, r25	; 0x01
    e63a:	aa 83       	std	Y+2, r26	; 0x02
    e63c:	bb 83       	std	Y+3, r27	; 0x03
    e63e:	c5 54       	subi	r28, 0x45	; 69
        }
        fatfs_filinfo_list(&fno);
    e640:	d2 40       	sbci	r29, 0x02	; 2
    e642:	ce 01       	movw	r24, r28
    e644:	01 96       	adiw	r24, 0x01	; 1
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    e646:	f1 de       	rcall	.-542    	; 0xe42a <fatfs_filinfo_list>
    printf("%4u File(s),%10lu bytes total\n%4u Dir(s)", s1, p1, s2);
    e648:	cd cf       	rjmp	.-102    	; 0xe5e4 <fatfs_ls+0x74>
    e64a:	df 92       	push	r13
    e64c:	cf 92       	push	r12
    e64e:	c8 5b       	subi	r28, 0xB8	; 184
    e650:	dd 4f       	sbci	r29, 0xFD	; 253
    e652:	88 81       	ld	r24, Y
    e654:	c8 54       	subi	r28, 0x48	; 72
    e656:	d2 40       	sbci	r29, 0x02	; 2
    e658:	8f 93       	push	r24
    e65a:	c9 5b       	subi	r28, 0xB9	; 185
    e65c:	dd 4f       	sbci	r29, 0xFD	; 253
    e65e:	88 81       	ld	r24, Y
    e660:	c7 54       	subi	r28, 0x47	; 71
    e662:	d2 40       	sbci	r29, 0x02	; 2
    e664:	8f 93       	push	r24
    e666:	ca 5b       	subi	r28, 0xBA	; 186
    e668:	dd 4f       	sbci	r29, 0xFD	; 253
    e66a:	88 81       	ld	r24, Y
    e66c:	c6 54       	subi	r28, 0x46	; 70
    e66e:	d2 40       	sbci	r29, 0x02	; 2
    e670:	8f 93       	push	r24
    e672:	cb 5b       	subi	r28, 0xBB	; 187
    e674:	dd 4f       	sbci	r29, 0xFD	; 253
    e676:	88 81       	ld	r24, Y
    e678:	c5 54       	subi	r28, 0x45	; 69
    e67a:	d2 40       	sbci	r29, 0x02	; 2
    e67c:	8f 93       	push	r24
    e67e:	ff 92       	push	r15
    e680:	ef 92       	push	r14
    e682:	89 e7       	ldi	r24, 0x79	; 121
    e684:	9a e0       	ldi	r25, 0x0A	; 10
    e686:	1f 92       	push	r1
    e688:	9f 93       	push	r25
    e68a:	8f 93       	push	r24
    e68c:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    if (f_getfree(buff, (DWORD*)&p1, &fs) == FR_OK)
    e690:	ae 01       	movw	r20, r28
    e692:	47 5b       	subi	r20, 0xB7	; 183
    e694:	5d 4f       	sbci	r21, 0xFD	; 253
    e696:	be 01       	movw	r22, r28
    e698:	6b 5b       	subi	r22, 0xBB	; 187
    e69a:	7d 4f       	sbci	r23, 0xFD	; 253
    e69c:	c8 01       	movw	r24, r16
    e69e:	0e 94 f0 63 	call	0xc7e0	; 0xc7e0 <f_getfree>
    e6a2:	0f b6       	in	r0, 0x3f	; 63
    e6a4:	f8 94       	cli
    e6a6:	de bf       	out	0x3e, r29	; 62
    e6a8:	0f be       	out	0x3f, r0	; 63
    e6aa:	cd bf       	out	0x3d, r28	; 61
    e6ac:	89 2b       	or	r24, r25
        printf(", %10luK bytes free\n", p1 * fs->csize / 2);
    e6ae:	41 f5       	brne	.+80     	; 0xe700 <fatfs_ls+0x190>
    e6b0:	c7 5b       	subi	r28, 0xB7	; 183
    e6b2:	dd 4f       	sbci	r29, 0xFD	; 253
    e6b4:	e8 81       	ld	r30, Y
    e6b6:	f9 81       	ldd	r31, Y+1	; 0x01
    e6b8:	c9 54       	subi	r28, 0x49	; 73
    e6ba:	d2 40       	sbci	r29, 0x02	; 2
    e6bc:	a1 85       	ldd	r26, Z+9	; 0x09
    e6be:	b2 85       	ldd	r27, Z+10	; 0x0a
    e6c0:	cb 5b       	subi	r28, 0xBB	; 187
    e6c2:	dd 4f       	sbci	r29, 0xFD	; 253
    e6c4:	28 81       	ld	r18, Y
    e6c6:	39 81       	ldd	r19, Y+1	; 0x01
    e6c8:	4a 81       	ldd	r20, Y+2	; 0x02
    e6ca:	5b 81       	ldd	r21, Y+3	; 0x03
    e6cc:	c5 54       	subi	r28, 0x45	; 69
    e6ce:	d2 40       	sbci	r29, 0x02	; 2
    e6d0:	0e 94 f3 e7 	call	0x1cfe6	; 0x1cfe6 <__muluhisi3>
    e6d4:	22 e0       	ldi	r18, 0x02	; 2
    e6d6:	30 e0       	ldi	r19, 0x00	; 0
    e6d8:	40 e0       	ldi	r20, 0x00	; 0
    e6da:	50 e0       	ldi	r21, 0x00	; 0
    e6dc:	0e 94 b3 e7 	call	0x1cf66	; 0x1cf66 <__divmodsi4>
    e6e0:	5f 93       	push	r21
    e6e2:	4f 93       	push	r20
    e6e4:	3f 93       	push	r19
    e6e6:	2f 93       	push	r18
    e6e8:	84 e6       	ldi	r24, 0x64	; 100
    e6ea:	9a e0       	ldi	r25, 0x0A	; 10
    e6ec:	1f 92       	push	r1
    e6ee:	9f 93       	push	r25
    e6f0:	8f 93       	push	r24
    e6f2:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    e6f6:	0f b6       	in	r0, 0x3f	; 63
    e6f8:	f8 94       	cli
    e6fa:	de bf       	out	0x3e, r29	; 62
    e6fc:	0f be       	out	0x3f, r0	; 63
}
    e6fe:	cd bf       	out	0x3d, r28	; 61
    e700:	c6 5b       	subi	r28, 0xB6	; 182
    e702:	dd 4f       	sbci	r29, 0xFD	; 253
    e704:	e8 e0       	ldi	r30, 0x08	; 8
    e706:	0c 94 39 e8 	jmp	0x1d072	; 0x1d072 <__epilogue_restores__+0x14>

0000e70a <mmc_test>:
///
/// @return void
MEMSPACE
void mmc_test(void)
{
    printf("==============================\n");
    e70a:	82 e0       	ldi	r24, 0x02	; 2
    e70c:	9b e0       	ldi	r25, 0x0B	; 11
    e70e:	1f 92       	push	r1
    e710:	9f 93       	push	r25
    e712:	8f 93       	push	r24
    e714:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    printf("START MMC TEST\n");
    e718:	82 ef       	ldi	r24, 0xF2	; 242
    e71a:	9a e0       	ldi	r25, 0x0A	; 10
    e71c:	1f 92       	push	r1
    e71e:	9f 93       	push	r25
    e720:	8f 93       	push	r24
    e722:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    fatfs_status("/");
    e726:	8c e1       	ldi	r24, 0x1C	; 28
    e728:	98 e0       	ldi	r25, 0x08	; 8
    e72a:	13 dd       	rcall	.-1498   	; 0xe152 <fatfs_status>
    printf("MMC Directory List\n");
    e72c:	8e ed       	ldi	r24, 0xDE	; 222
    e72e:	9a e0       	ldi	r25, 0x0A	; 10
    e730:	1f 92       	push	r1
    e732:	9f 93       	push	r25
    e734:	8f 93       	push	r24
    e736:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    fatfs_ls("/");
    e73a:	8c e1       	ldi	r24, 0x1C	; 28
    e73c:	98 e0       	ldi	r25, 0x08	; 8
    e73e:	18 df       	rcall	.-464    	; 0xe570 <fatfs_ls>
    fatfs_cat("test3.txt");
    fatfs_ls("");
#endif
#endif

    printf("END MMC TEST\n");
    e740:	80 ed       	ldi	r24, 0xD0	; 208
    e742:	9a e0       	ldi	r25, 0x0A	; 10
    e744:	1f 92       	push	r1
    e746:	9f 93       	push	r25
    e748:	8f 93       	push	r24
    e74a:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    printf("==============================\n");
    e74e:	80 eb       	ldi	r24, 0xB0	; 176
    e750:	9a e0       	ldi	r25, 0x0A	; 10
    e752:	1f 92       	push	r1
    e754:	9f 93       	push	r25
    e756:	8f 93       	push	r24
    e758:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
}
    e75c:	8d b7       	in	r24, 0x3d	; 61
    e75e:	9e b7       	in	r25, 0x3e	; 62
    e760:	0f 96       	adiw	r24, 0x0f	; 15
    e762:	0f b6       	in	r0, 0x3f	; 63
    e764:	f8 94       	cli
    e766:	9e bf       	out	0x3e, r25	; 62
    e768:	0f be       	out	0x3f, r0	; 63
    e76a:	8d bf       	out	0x3d, r24	; 61
    e76c:	08 95       	ret

0000e76e <fatfs_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int fatfs_tests(int argc,char *argv[])
{
    e76e:	ef 92       	push	r14
    e770:	ff 92       	push	r15
    e772:	0f 93       	push	r16
    e774:	1f 93       	push	r17
    e776:	cf 93       	push	r28
    e778:	df 93       	push	r29
    char *ptr;
    int ind;


    ind = 0;
    ptr = argv[ind++];
    e77a:	fb 01       	movw	r30, r22
    e77c:	20 81       	ld	r18, Z
    e77e:	31 81       	ldd	r19, Z+1	; 0x01

    if(!ptr)
    e780:	21 15       	cp	r18, r1
    e782:	31 05       	cpc	r19, r1
    e784:	19 f4       	brne	.+6      	; 0xe78c <fatfs_tests+0x1e>
        return(0);
    e786:	80 e0       	ldi	r24, 0x00	; 0
    e788:	90 e0       	ldi	r25, 0x00	; 0
    e78a:	77 c0       	rjmp	.+238    	; 0xe87a <fatfs_tests+0x10c>
    e78c:	eb 01       	movw	r28, r22
    e78e:	8c 01       	movw	r16, r24

// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCH(ptr,"fatfs") )
    e790:	66 e4       	ldi	r22, 0x46	; 70
    e792:	78 e0       	ldi	r23, 0x08	; 8
    e794:	c9 01       	movw	r24, r18
    e796:	0e 94 f4 32 	call	0x65e8	; 0x65e8 <MATCH>
    e79a:	89 2b       	or	r24, r25
    e79c:	a1 f3       	breq	.-24     	; 0xe786 <fatfs_tests+0x18>
    {
        ptr = argv[ind++];
    e79e:	ea 80       	ldd	r14, Y+2	; 0x02
    e7a0:	fb 80       	ldd	r15, Y+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
    e7a2:	e1 14       	cp	r14, r1
    e7a4:	f1 04       	cpc	r15, r1
    e7a6:	21 f4       	brne	.+8      	; 0xe7b0 <fatfs_tests+0x42>
        {
            fatfs_help(1);
    e7a8:	81 e0       	ldi	r24, 0x01	; 1
    e7aa:	90 e0       	ldi	r25, 0x00	; 0
    e7ac:	c5 de       	rcall	.-630    	; 0xe538 <fatfs_help>
    e7ae:	63 c0       	rjmp	.+198    	; 0xe876 <fatfs_tests+0x108>
// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCH(ptr,"fatfs") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
    e7b0:	6a e2       	ldi	r22, 0x2A	; 42
    e7b2:	76 e1       	ldi	r23, 0x16	; 22
    e7b4:	c7 01       	movw	r24, r14
    e7b6:	0e 94 f4 32 	call	0x65e8	; 0x65e8 <MATCH>
    e7ba:	89 2b       	or	r24, r25
    e7bc:	a9 f7       	brne	.-22     	; 0xe7a8 <fatfs_tests+0x3a>
    {
        return(0);
    }
#endif

    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
    e7be:	98 01       	movw	r18, r16
    e7c0:	42 e0       	ldi	r20, 0x02	; 2
    e7c2:	50 e0       	ldi	r21, 0x00	; 0
    e7c4:	6c e4       	ldi	r22, 0x4C	; 76
    e7c6:	78 e0       	ldi	r23, 0x08	; 8
    e7c8:	c7 01       	movw	r24, r14
    e7ca:	0e 94 08 33 	call	0x6610	; 0x6610 <MATCHARGS>
    e7ce:	89 2b       	or	r24, r25
    e7d0:	51 f1       	breq	.+84     	; 0xe826 <fatfs_tests+0xb8>
    {
        int i;
        int args = 0;
        printf("ind:%d,argc:%d\n", ind, argc);
    e7d2:	1f 93       	push	r17
    e7d4:	0f 93       	push	r16
    e7d6:	1f 92       	push	r1
    e7d8:	82 e0       	ldi	r24, 0x02	; 2
    e7da:	8f 93       	push	r24
    e7dc:	82 e2       	ldi	r24, 0x22	; 34
    e7de:	9b e0       	ldi	r25, 0x0B	; 11
    e7e0:	1f 92       	push	r1
    e7e2:	9f 93       	push	r25
    e7e4:	8f 93       	push	r24
    e7e6:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    e7ea:	7e 01       	movw	r14, r28
    e7ec:	f4 e0       	ldi	r31, 0x04	; 4
    e7ee:	ef 0e       	add	r14, r31
    e7f0:	f1 1c       	adc	r15, r1
        for(i=ind;i<argc;++i)
    e7f2:	8d b7       	in	r24, 0x3d	; 61
    e7f4:	9e b7       	in	r25, 0x3e	; 62
    e7f6:	07 96       	adiw	r24, 0x07	; 7
    e7f8:	0f b6       	in	r0, 0x3f	; 63
    e7fa:	f8 94       	cli
    e7fc:	9e bf       	out	0x3e, r25	; 62
    e7fe:	0f be       	out	0x3f, r0	; 63
    e800:	8d bf       	out	0x3d, r24	; 61
    e802:	c2 e0       	ldi	r28, 0x02	; 2
    e804:	d0 e0       	ldi	r29, 0x00	; 0
    e806:	c0 17       	cp	r28, r16
    e808:	d1 07       	cpc	r29, r17
    e80a:	3c f4       	brge	.+14     	; 0xe81a <fatfs_tests+0xac>
        {
            //printf("%d:%s\n", i, argv[i]);
            fatfs_ls(argv[i]);
    e80c:	f7 01       	movw	r30, r14
    e80e:	81 91       	ld	r24, Z+
    e810:	91 91       	ld	r25, Z+
    e812:	7f 01       	movw	r14, r30
    e814:	ad de       	rcall	.-678    	; 0xe570 <fatfs_ls>
    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
    {
        int i;
        int args = 0;
        printf("ind:%d,argc:%d\n", ind, argc);
        for(i=ind;i<argc;++i)
    e816:	21 96       	adiw	r28, 0x01	; 1
    e818:	f6 cf       	rjmp	.-20     	; 0xe806 <fatfs_tests+0x98>
        {
            //printf("%d:%s\n", i, argv[i]);
            fatfs_ls(argv[i]);
            ++args;
        }
        if(!args)
    e81a:	22 97       	sbiw	r28, 0x02	; 2
        {
            fatfs_ls("");
    e81c:	61 f5       	brne	.+88     	; 0xe876 <fatfs_tests+0x108>
    e81e:	8c e3       	ldi	r24, 0x3C	; 60
    e820:	97 e1       	ldi	r25, 0x17	; 23
    e822:	a6 de       	rcall	.-692    	; 0xe570 <fatfs_ls>
        }
        return(1);
    }

    if (MATCHARGS(ptr,"mmc_test",(ind+0),argc ))
    e824:	28 c0       	rjmp	.+80     	; 0xe876 <fatfs_tests+0x108>
    e826:	98 01       	movw	r18, r16
    e828:	42 e0       	ldi	r20, 0x02	; 2
    e82a:	50 e0       	ldi	r21, 0x00	; 0
    e82c:	6f e4       	ldi	r22, 0x4F	; 79
    e82e:	78 e0       	ldi	r23, 0x08	; 8
    e830:	c7 01       	movw	r24, r14
    e832:	0e 94 08 33 	call	0x6610	; 0x6610 <MATCHARGS>
    {
        mmc_test();
    e836:	89 2b       	or	r24, r25
    e838:	11 f0       	breq	.+4      	; 0xe83e <fatfs_tests+0xd0>
    e83a:	67 df       	rcall	.-306    	; 0xe70a <mmc_test>
        return(1);
    }

    if (MATCHARGS(ptr,"mmc_init",(ind+0),argc))
    e83c:	1c c0       	rjmp	.+56     	; 0xe876 <fatfs_tests+0x108>
    e83e:	98 01       	movw	r18, r16
    e840:	42 e0       	ldi	r20, 0x02	; 2
    e842:	50 e0       	ldi	r21, 0x00	; 0
    e844:	68 e5       	ldi	r22, 0x58	; 88
    e846:	78 e0       	ldi	r23, 0x08	; 8
    e848:	c7 01       	movw	r24, r14
    e84a:	0e 94 08 33 	call	0x6610	; 0x6610 <MATCHARGS>
    {
        mmc_init(1);
    e84e:	89 2b       	or	r24, r25
    e850:	21 f0       	breq	.+8      	; 0xe85a <fatfs_tests+0xec>
    e852:	81 e0       	ldi	r24, 0x01	; 1
    e854:	90 e0       	ldi	r25, 0x00	; 0
    e856:	c4 da       	rcall	.-2680   	; 0xdde0 <mmc_init>
        return(1);
    }

    if (MATCHARGS(ptr,"status", (ind + 1), argc))
    e858:	0e c0       	rjmp	.+28     	; 0xe876 <fatfs_tests+0x108>
    e85a:	98 01       	movw	r18, r16
    e85c:	43 e0       	ldi	r20, 0x03	; 3
    e85e:	50 e0       	ldi	r21, 0x00	; 0
    e860:	61 e6       	ldi	r22, 0x61	; 97
    e862:	78 e0       	ldi	r23, 0x08	; 8
    e864:	c7 01       	movw	r24, r14
    e866:	0e 94 08 33 	call	0x6610	; 0x6610 <MATCHARGS>
    e86a:	89 2b       	or	r24, r25
    {
        fatfs_status(argv[ind]);
    e86c:	09 f4       	brne	.+2      	; 0xe870 <fatfs_tests+0x102>
    e86e:	8b cf       	rjmp	.-234    	; 0xe786 <fatfs_tests+0x18>
    e870:	8c 81       	ldd	r24, Y+4	; 0x04
    e872:	9d 81       	ldd	r25, Y+5	; 0x05
        }
        if(!args)
        {
            fatfs_ls("");
        }
        return(1);
    e874:	6e dc       	rcall	.-1828   	; 0xe152 <fatfs_status>
    e876:	81 e0       	ldi	r24, 0x01	; 1
        return(1);
    }
#endif

    return(0);
}
    e878:	90 e0       	ldi	r25, 0x00	; 0
    e87a:	cd b7       	in	r28, 0x3d	; 61
    e87c:	de b7       	in	r29, 0x3e	; 62
    e87e:	e6 e0       	ldi	r30, 0x06	; 6
    e880:	0c 94 3b e8 	jmp	0x1d076	; 0x1d076 <__epilogue_restores__+0x18>

0000e884 <fatfs_getc>:
    {
        errno = fatfs_to_errno(rc);
        return(-1);
    }
    return(0);
}
    e884:	8f 92       	push	r8
    e886:	9f 92       	push	r9
    e888:	af 92       	push	r10
    e88a:	bf 92       	push	r11
    e88c:	ef 92       	push	r14
    e88e:	ff 92       	push	r15
    e890:	0f 93       	push	r16
    e892:	1f 93       	push	r17
    e894:	cf 93       	push	r28
    e896:	df 93       	push	r29
    e898:	00 d0       	rcall	.+0      	; 0xe89a <fatfs_getc+0x16>
    e89a:	1f 92       	push	r1
    e89c:	cd b7       	in	r28, 0x3d	; 61
    e89e:	de b7       	in	r29, 0x3e	; 62
    e8a0:	10 92 cd 1c 	sts	0x1CCD, r1	; 0x801ccd <errno+0x1>
    e8a4:	10 92 cc 1c 	sts	0x1CCC, r1	; 0x801ccc <errno>
    e8a8:	00 97       	sbiw	r24, 0x00	; 0
    e8aa:	39 f4       	brne	.+14     	; 0xe8ba <fatfs_getc+0x36>
    e8ac:	89 e0       	ldi	r24, 0x09	; 9
    e8ae:	90 e0       	ldi	r25, 0x00	; 0
    e8b0:	90 93 cd 1c 	sts	0x1CCD, r25	; 0x801ccd <errno+0x1>
    e8b4:	80 93 cc 1c 	sts	0x1CCC, r24	; 0x801ccc <errno>
    e8b8:	2f c0       	rjmp	.+94     	; 0xe918 <fatfs_getc+0x94>
    e8ba:	fc 01       	movw	r30, r24
    e8bc:	e4 84       	ldd	r14, Z+12	; 0x0c
    e8be:	f5 84       	ldd	r15, Z+13	; 0x0d
    e8c0:	e1 14       	cp	r14, r1
    e8c2:	f1 04       	cpc	r15, r1
    e8c4:	99 f3       	breq	.-26     	; 0xe8ac <fatfs_getc+0x28>
    e8c6:	8c 01       	movw	r16, r24
    e8c8:	9e 01       	movw	r18, r28
    e8ca:	2f 5f       	subi	r18, 0xFF	; 255
    e8cc:	3f 4f       	sbci	r19, 0xFF	; 255
    e8ce:	41 e0       	ldi	r20, 0x01	; 1
    e8d0:	50 e0       	ldi	r21, 0x00	; 0
    e8d2:	be 01       	movw	r22, r28
    e8d4:	6d 5f       	subi	r22, 0xFD	; 253
    e8d6:	7f 4f       	sbci	r23, 0xFF	; 255
    e8d8:	c7 01       	movw	r24, r14
    e8da:	0e 94 03 5b 	call	0xb606	; 0xb606 <f_read>
    e8de:	00 97       	sbiw	r24, 0x00	; 0
    e8e0:	31 f4       	brne	.+12     	; 0xe8ee <fatfs_getc+0x6a>
    e8e2:	29 81       	ldd	r18, Y+1	; 0x01
    e8e4:	3a 81       	ldd	r19, Y+2	; 0x02
    e8e6:	21 30       	cpi	r18, 0x01	; 1
    e8e8:	31 05       	cpc	r19, r1
    e8ea:	c9 f0       	breq	.+50     	; 0xe91e <fatfs_getc+0x9a>
    e8ec:	03 c0       	rjmp	.+6      	; 0xe8f4 <fatfs_getc+0x70>
    e8ee:	84 31       	cpi	r24, 0x14	; 20
    e8f0:	91 05       	cpc	r25, r1
    e8f2:	40 f4       	brcc	.+16     	; 0xe904 <fatfs_getc+0x80>
    e8f4:	fc 01       	movw	r30, r24
    e8f6:	ec 5f       	subi	r30, 0xFC	; 252
    e8f8:	f8 4f       	sbci	r31, 0xF8	; 248
    e8fa:	80 81       	ld	r24, Z
    e8fc:	08 2e       	mov	r0, r24
    e8fe:	00 0c       	add	r0, r0
    e900:	99 0b       	sbc	r25, r25
    e902:	02 c0       	rjmp	.+4      	; 0xe908 <fatfs_getc+0x84>
    e904:	83 e2       	ldi	r24, 0x23	; 35
    e906:	90 e0       	ldi	r25, 0x00	; 0
    e908:	90 93 cd 1c 	sts	0x1CCD, r25	; 0x801ccd <errno+0x1>
    e90c:	80 93 cc 1c 	sts	0x1CCC, r24	; 0x801ccc <errno>
    e910:	f8 01       	movw	r30, r16
    e912:	83 81       	ldd	r24, Z+3	; 0x03
    e914:	80 62       	ori	r24, 0x20	; 32
    e916:	83 83       	std	Z+3, r24	; 0x03
    e918:	8f ef       	ldi	r24, 0xFF	; 255
    e91a:	9f ef       	ldi	r25, 0xFF	; 255
    e91c:	28 c0       	rjmp	.+80     	; 0xe96e <fatfs_getc+0xea>
    e91e:	8b 81       	ldd	r24, Y+3	; 0x03
    e920:	8d 30       	cpi	r24, 0x0D	; 13
    e922:	01 f5       	brne	.+64     	; 0xe964 <fatfs_getc+0xe0>
    e924:	f7 01       	movw	r30, r14
    e926:	80 88       	ldd	r8, Z+16	; 0x10
    e928:	91 88       	ldd	r9, Z+17	; 0x11
    e92a:	a2 88       	ldd	r10, Z+18	; 0x12
    e92c:	b3 88       	ldd	r11, Z+19	; 0x13
    e92e:	9e 01       	movw	r18, r28
    e930:	2f 5f       	subi	r18, 0xFF	; 255
    e932:	3f 4f       	sbci	r19, 0xFF	; 255
    e934:	41 e0       	ldi	r20, 0x01	; 1
    e936:	50 e0       	ldi	r21, 0x00	; 0
    e938:	be 01       	movw	r22, r28
    e93a:	6d 5f       	subi	r22, 0xFD	; 253
    e93c:	7f 4f       	sbci	r23, 0xFF	; 255
    e93e:	c7 01       	movw	r24, r14
    e940:	0e 94 03 5b 	call	0xb606	; 0xb606 <f_read>
    e944:	89 2b       	or	r24, r25
    e946:	89 f4       	brne	.+34     	; 0xe96a <fatfs_getc+0xe6>
    e948:	89 81       	ldd	r24, Y+1	; 0x01
    e94a:	9a 81       	ldd	r25, Y+2	; 0x02
    e94c:	01 97       	sbiw	r24, 0x01	; 1
    e94e:	69 f4       	brne	.+26     	; 0xe96a <fatfs_getc+0xe6>
    e950:	8b 81       	ldd	r24, Y+3	; 0x03
    e952:	8a 30       	cpi	r24, 0x0A	; 10
    e954:	31 f0       	breq	.+12     	; 0xe962 <fatfs_getc+0xde>
    e956:	b5 01       	movw	r22, r10
    e958:	a4 01       	movw	r20, r8
    e95a:	c7 01       	movw	r24, r14
    e95c:	0e 94 0d 60 	call	0xc01a	; 0xc01a <f_lseek>
    e960:	04 c0       	rjmp	.+8      	; 0xe96a <fatfs_getc+0xe6>
    e962:	8b 83       	std	Y+3, r24	; 0x03
    e964:	8b 81       	ldd	r24, Y+3	; 0x03
    e966:	90 e0       	ldi	r25, 0x00	; 0
    e968:	02 c0       	rjmp	.+4      	; 0xe96e <fatfs_getc+0xea>
    e96a:	8a e0       	ldi	r24, 0x0A	; 10
    e96c:	90 e0       	ldi	r25, 0x00	; 0
    e96e:	0f 90       	pop	r0
    e970:	0f 90       	pop	r0
    e972:	0f 90       	pop	r0
    e974:	df 91       	pop	r29
    e976:	cf 91       	pop	r28
    e978:	1f 91       	pop	r17
    e97a:	0f 91       	pop	r16
    e97c:	ff 90       	pop	r15
    e97e:	ef 90       	pop	r14
    e980:	bf 90       	pop	r11
    e982:	af 90       	pop	r10
    e984:	9f 90       	pop	r9
    e986:	8f 90       	pop	r8
    e988:	08 95       	ret

0000e98a <fatfs_putc>:
    e98a:	a3 e0       	ldi	r26, 0x03	; 3
    e98c:	b0 e0       	ldi	r27, 0x00	; 0
    e98e:	eb ec       	ldi	r30, 0xCB	; 203
    e990:	f4 e7       	ldi	r31, 0x74	; 116
    e992:	0c 94 21 e8 	jmp	0x1d042	; 0x1d042 <__prologue_saves__+0x1c>
    e996:	8b 83       	std	Y+3, r24	; 0x03
    e998:	10 92 cd 1c 	sts	0x1CCD, r1	; 0x801ccd <errno+0x1>
    e99c:	10 92 cc 1c 	sts	0x1CCC, r1	; 0x801ccc <errno>
    e9a0:	61 15       	cp	r22, r1
    e9a2:	71 05       	cpc	r23, r1
    e9a4:	39 f4       	brne	.+14     	; 0xe9b4 <fatfs_putc+0x2a>
    e9a6:	89 e0       	ldi	r24, 0x09	; 9
    e9a8:	90 e0       	ldi	r25, 0x00	; 0
    e9aa:	90 93 cd 1c 	sts	0x1CCD, r25	; 0x801ccd <errno+0x1>
    e9ae:	80 93 cc 1c 	sts	0x1CCC, r24	; 0x801ccc <errno>
    e9b2:	2d c0       	rjmp	.+90     	; 0xea0e <fatfs_putc+0x84>
    e9b4:	fb 01       	movw	r30, r22
    e9b6:	84 85       	ldd	r24, Z+12	; 0x0c
    e9b8:	95 85       	ldd	r25, Z+13	; 0x0d
    e9ba:	00 97       	sbiw	r24, 0x00	; 0
    e9bc:	a1 f3       	breq	.-24     	; 0xe9a6 <fatfs_putc+0x1c>
    e9be:	8b 01       	movw	r16, r22
    e9c0:	9e 01       	movw	r18, r28
    e9c2:	2f 5f       	subi	r18, 0xFF	; 255
    e9c4:	3f 4f       	sbci	r19, 0xFF	; 255
    e9c6:	41 e0       	ldi	r20, 0x01	; 1
    e9c8:	50 e0       	ldi	r21, 0x00	; 0
    e9ca:	be 01       	movw	r22, r28
    e9cc:	6d 5f       	subi	r22, 0xFD	; 253
    e9ce:	7f 4f       	sbci	r23, 0xFF	; 255
    e9d0:	0e 94 4e 5c 	call	0xb89c	; 0xb89c <f_write>
    e9d4:	00 97       	sbiw	r24, 0x00	; 0
    e9d6:	31 f4       	brne	.+12     	; 0xe9e4 <fatfs_putc+0x5a>
    e9d8:	29 81       	ldd	r18, Y+1	; 0x01
    e9da:	3a 81       	ldd	r19, Y+2	; 0x02
    e9dc:	21 30       	cpi	r18, 0x01	; 1
    e9de:	31 05       	cpc	r19, r1
    e9e0:	c9 f0       	breq	.+50     	; 0xea14 <fatfs_putc+0x8a>
    e9e2:	03 c0       	rjmp	.+6      	; 0xe9ea <fatfs_putc+0x60>
    e9e4:	84 31       	cpi	r24, 0x14	; 20
    e9e6:	91 05       	cpc	r25, r1
    e9e8:	40 f4       	brcc	.+16     	; 0xe9fa <fatfs_putc+0x70>
    e9ea:	fc 01       	movw	r30, r24
    e9ec:	ec 5f       	subi	r30, 0xFC	; 252
    e9ee:	f8 4f       	sbci	r31, 0xF8	; 248
    e9f0:	80 81       	ld	r24, Z
    e9f2:	08 2e       	mov	r0, r24
    e9f4:	00 0c       	add	r0, r0
    e9f6:	99 0b       	sbc	r25, r25
    e9f8:	02 c0       	rjmp	.+4      	; 0xe9fe <fatfs_putc+0x74>
    e9fa:	83 e2       	ldi	r24, 0x23	; 35
    e9fc:	90 e0       	ldi	r25, 0x00	; 0
    e9fe:	90 93 cd 1c 	sts	0x1CCD, r25	; 0x801ccd <errno+0x1>
    ea02:	80 93 cc 1c 	sts	0x1CCC, r24	; 0x801ccc <errno>
    ea06:	f8 01       	movw	r30, r16
    ea08:	83 81       	ldd	r24, Z+3	; 0x03
    ea0a:	80 62       	ori	r24, 0x20	; 32
    ea0c:	83 83       	std	Z+3, r24	; 0x03
    ea0e:	8f ef       	ldi	r24, 0xFF	; 255
    ea10:	9f ef       	ldi	r25, 0xFF	; 255
    ea12:	02 c0       	rjmp	.+4      	; 0xea18 <fatfs_putc+0x8e>
    ea14:	8b 81       	ldd	r24, Y+3	; 0x03
    ea16:	90 e0       	ldi	r25, 0x00	; 0
    ea18:	23 96       	adiw	r28, 0x03	; 3
    ea1a:	e4 e0       	ldi	r30, 0x04	; 4
    ea1c:	0c 94 3d e8 	jmp	0x1d07a	; 0x1d07a <__epilogue_restores__+0x1c>

0000ea20 <fgetc>:
    ea20:	cf 93       	push	r28
    ea22:	df 93       	push	r29
    ea24:	ec 01       	movw	r28, r24
    ea26:	00 97       	sbiw	r24, 0x00	; 0
    ea28:	39 f4       	brne	.+14     	; 0xea38 <fgetc+0x18>
    ea2a:	89 e0       	ldi	r24, 0x09	; 9
    ea2c:	90 e0       	ldi	r25, 0x00	; 0
    ea2e:	90 93 cd 1c 	sts	0x1CCD, r25	; 0x801ccd <errno+0x1>
    ea32:	80 93 cc 1c 	sts	0x1CCC, r24	; 0x801ccc <errno>
    ea36:	40 c0       	rjmp	.+128    	; 0xeab8 <fgetc+0x98>
    ea38:	2b 81       	ldd	r18, Y+3	; 0x03
    ea3a:	20 ff       	sbrs	r18, 0
    ea3c:	3d c0       	rjmp	.+122    	; 0xeab8 <fgetc+0x98>
    ea3e:	26 ff       	sbrs	r18, 6
    ea40:	0a c0       	rjmp	.+20     	; 0xea56 <fgetc+0x36>
    ea42:	2f 7b       	andi	r18, 0xBF	; 191
    ea44:	2b 83       	std	Y+3, r18	; 0x03
    ea46:	8e 81       	ldd	r24, Y+6	; 0x06
    ea48:	9f 81       	ldd	r25, Y+7	; 0x07
    ea4a:	01 96       	adiw	r24, 0x01	; 1
    ea4c:	9f 83       	std	Y+7, r25	; 0x07
    ea4e:	8e 83       	std	Y+6, r24	; 0x06
    ea50:	8a 81       	ldd	r24, Y+2	; 0x02
    ea52:	90 e0       	ldi	r25, 0x00	; 0
    ea54:	33 c0       	rjmp	.+102    	; 0xeabc <fgetc+0x9c>
    ea56:	22 ff       	sbrs	r18, 2
    ea58:	0d c0       	rjmp	.+26     	; 0xea74 <fgetc+0x54>
    ea5a:	e8 81       	ld	r30, Y
    ea5c:	f9 81       	ldd	r31, Y+1	; 0x01
    ea5e:	80 81       	ld	r24, Z
    ea60:	90 e0       	ldi	r25, 0x00	; 0
    ea62:	00 97       	sbiw	r24, 0x00	; 0
    ea64:	19 f4       	brne	.+6      	; 0xea6c <fgetc+0x4c>
    ea66:	20 62       	ori	r18, 0x20	; 32
    ea68:	2b 83       	std	Y+3, r18	; 0x03
    ea6a:	26 c0       	rjmp	.+76     	; 0xeab8 <fgetc+0x98>
    ea6c:	31 96       	adiw	r30, 0x01	; 1
    ea6e:	f9 83       	std	Y+1, r31	; 0x01
    ea70:	e8 83       	st	Y, r30
    ea72:	1b c0       	rjmp	.+54     	; 0xeaaa <fgetc+0x8a>
    ea74:	ea 85       	ldd	r30, Y+10	; 0x0a
    ea76:	fb 85       	ldd	r31, Y+11	; 0x0b
    ea78:	30 97       	sbiw	r30, 0x00	; 0
    ea7a:	59 f4       	brne	.+22     	; 0xea92 <fgetc+0x72>
    ea7c:	8e e7       	ldi	r24, 0x7E	; 126
    ea7e:	9c e0       	ldi	r25, 0x0C	; 12
    ea80:	1f 92       	push	r1
    ea82:	9f 93       	push	r25
    ea84:	8f 93       	push	r24
    ea86:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    ea8a:	0f 90       	pop	r0
    ea8c:	0f 90       	pop	r0
    ea8e:	0f 90       	pop	r0
    ea90:	13 c0       	rjmp	.+38     	; 0xeab8 <fgetc+0x98>
    ea92:	09 95       	icall
    ea94:	97 ff       	sbrs	r25, 7
    ea96:	09 c0       	rjmp	.+18     	; 0xeaaa <fgetc+0x8a>
    ea98:	2b 81       	ldd	r18, Y+3	; 0x03
    ea9a:	02 96       	adiw	r24, 0x02	; 2
    ea9c:	11 f0       	breq	.+4      	; 0xeaa2 <fgetc+0x82>
    ea9e:	80 e2       	ldi	r24, 0x20	; 32
    eaa0:	01 c0       	rjmp	.+2      	; 0xeaa4 <fgetc+0x84>
    eaa2:	80 e1       	ldi	r24, 0x10	; 16
    eaa4:	82 2b       	or	r24, r18
    eaa6:	8b 83       	std	Y+3, r24	; 0x03
    eaa8:	07 c0       	rjmp	.+14     	; 0xeab8 <fgetc+0x98>
    eaaa:	2e 81       	ldd	r18, Y+6	; 0x06
    eaac:	3f 81       	ldd	r19, Y+7	; 0x07
    eaae:	2f 5f       	subi	r18, 0xFF	; 255
    eab0:	3f 4f       	sbci	r19, 0xFF	; 255
    eab2:	3f 83       	std	Y+7, r19	; 0x07
    eab4:	2e 83       	std	Y+6, r18	; 0x06
    eab6:	02 c0       	rjmp	.+4      	; 0xeabc <fgetc+0x9c>
    eab8:	8f ef       	ldi	r24, 0xFF	; 255
    eaba:	9f ef       	ldi	r25, 0xFF	; 255
    eabc:	df 91       	pop	r29
    eabe:	cf 91       	pop	r28
    eac0:	08 95       	ret

0000eac2 <fputc>:
    eac2:	cf 93       	push	r28
    eac4:	df 93       	push	r29
    eac6:	eb 01       	movw	r28, r22
    eac8:	10 92 cd 1c 	sts	0x1CCD, r1	; 0x801ccd <errno+0x1>
    eacc:	10 92 cc 1c 	sts	0x1CCC, r1	; 0x801ccc <errno>
    ead0:	20 91 d0 1c 	lds	r18, 0x1CD0	; 0x801cd0 <__iob+0x2>
    ead4:	30 91 d1 1c 	lds	r19, 0x1CD1	; 0x801cd1 <__iob+0x3>
    ead8:	62 17       	cp	r22, r18
    eada:	73 07       	cpc	r23, r19
    eadc:	49 f0       	breq	.+18     	; 0xeaf0 <fputc+0x2e>
    eade:	20 91 d2 1c 	lds	r18, 0x1CD2	; 0x801cd2 <__iob+0x4>
    eae2:	30 91 d3 1c 	lds	r19, 0x1CD3	; 0x801cd3 <__iob+0x5>
    eae6:	62 17       	cp	r22, r18
    eae8:	73 07       	cpc	r23, r19
    eaea:	11 f0       	breq	.+4      	; 0xeaf0 <fputc+0x2e>
    eaec:	4e df       	rcall	.-356    	; 0xe98a <fatfs_putc>
    eaee:	33 c0       	rjmp	.+102    	; 0xeb56 <fputc+0x94>
    eaf0:	2b 81       	ldd	r18, Y+3	; 0x03
    eaf2:	21 ff       	sbrs	r18, 1
    eaf4:	2e c0       	rjmp	.+92     	; 0xeb52 <fputc+0x90>
    eaf6:	22 ff       	sbrs	r18, 2
    eaf8:	10 c0       	rjmp	.+32     	; 0xeb1a <fputc+0x58>
    eafa:	4e 81       	ldd	r20, Y+6	; 0x06
    eafc:	5f 81       	ldd	r21, Y+7	; 0x07
    eafe:	2c 81       	ldd	r18, Y+4	; 0x04
    eb00:	3d 81       	ldd	r19, Y+5	; 0x05
    eb02:	42 17       	cp	r20, r18
    eb04:	53 07       	cpc	r21, r19
    eb06:	f4 f4       	brge	.+60     	; 0xeb44 <fputc+0x82>
    eb08:	e8 81       	ld	r30, Y
    eb0a:	f9 81       	ldd	r31, Y+1	; 0x01
    eb0c:	9f 01       	movw	r18, r30
    eb0e:	2f 5f       	subi	r18, 0xFF	; 255
    eb10:	3f 4f       	sbci	r19, 0xFF	; 255
    eb12:	39 83       	std	Y+1, r19	; 0x01
    eb14:	28 83       	st	Y, r18
    eb16:	80 83       	st	Z, r24
    eb18:	15 c0       	rjmp	.+42     	; 0xeb44 <fputc+0x82>
    eb1a:	e8 85       	ldd	r30, Y+8	; 0x08
    eb1c:	f9 85       	ldd	r31, Y+9	; 0x09
    eb1e:	30 97       	sbiw	r30, 0x00	; 0
    eb20:	59 f4       	brne	.+22     	; 0xeb38 <fputc+0x76>
    eb22:	86 e6       	ldi	r24, 0x66	; 102
    eb24:	9c e0       	ldi	r25, 0x0C	; 12
    eb26:	1f 92       	push	r1
    eb28:	9f 93       	push	r25
    eb2a:	8f 93       	push	r24
    eb2c:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    eb30:	0f 90       	pop	r0
    eb32:	0f 90       	pop	r0
    eb34:	0f 90       	pop	r0
    eb36:	0d c0       	rjmp	.+26     	; 0xeb52 <fputc+0x90>
    eb38:	be 01       	movw	r22, r28
    eb3a:	09 95       	icall
    eb3c:	8f 3f       	cpi	r24, 0xFF	; 255
    eb3e:	2f ef       	ldi	r18, 0xFF	; 255
    eb40:	92 07       	cpc	r25, r18
    eb42:	39 f0       	breq	.+14     	; 0xeb52 <fputc+0x90>
    eb44:	2e 81       	ldd	r18, Y+6	; 0x06
    eb46:	3f 81       	ldd	r19, Y+7	; 0x07
    eb48:	2f 5f       	subi	r18, 0xFF	; 255
    eb4a:	3f 4f       	sbci	r19, 0xFF	; 255
    eb4c:	3f 83       	std	Y+7, r19	; 0x07
    eb4e:	2e 83       	std	Y+6, r18	; 0x06
    eb50:	02 c0       	rjmp	.+4      	; 0xeb56 <fputc+0x94>
    eb52:	8f ef       	ldi	r24, 0xFF	; 255
    eb54:	9f ef       	ldi	r25, 0xFF	; 255
    eb56:	df 91       	pop	r29
    eb58:	cf 91       	pop	r28
    eb5a:	08 95       	ret

0000eb5c <_fprintf_putc>:
    eb5c:	fc 01       	movw	r30, r24
    eb5e:	86 2f       	mov	r24, r22
    eb60:	26 81       	ldd	r18, Z+6	; 0x06
    eb62:	37 81       	ldd	r19, Z+7	; 0x07
    eb64:	2f 5f       	subi	r18, 0xFF	; 255
    eb66:	3f 4f       	sbci	r19, 0xFF	; 255
    eb68:	37 83       	std	Z+7, r19	; 0x07
    eb6a:	26 83       	std	Z+6, r18	; 0x06
    eb6c:	62 81       	ldd	r22, Z+2	; 0x02
    eb6e:	73 81       	ldd	r23, Z+3	; 0x03
    eb70:	90 e0       	ldi	r25, 0x00	; 0
    eb72:	a7 cf       	rjmp	.-178    	; 0xeac2 <fputc>
    eb74:	08 95       	ret

0000eb76 <getchar>:
    eb76:	80 91 ce 1c 	lds	r24, 0x1CCE	; 0x801cce <__iob>
    eb7a:	90 91 cf 1c 	lds	r25, 0x1CCF	; 0x801ccf <__iob+0x1>
    eb7e:	50 cf       	rjmp	.-352    	; 0xea20 <fgetc>
    eb80:	08 95       	ret

0000eb82 <putchar>:
    eb82:	60 91 d0 1c 	lds	r22, 0x1CD0	; 0x801cd0 <__iob+0x2>
    eb86:	70 91 d1 1c 	lds	r23, 0x1CD1	; 0x801cd1 <__iob+0x3>
    eb8a:	9b cf       	rjmp	.-202    	; 0xeac2 <fputc>
    eb8c:	08 95       	ret

0000eb8e <fgets>:
    eb8e:	a0 e0       	ldi	r26, 0x00	; 0
    eb90:	b0 e0       	ldi	r27, 0x00	; 0
    eb92:	ed ec       	ldi	r30, 0xCD	; 205
    eb94:	f5 e7       	ldi	r31, 0x75	; 117
    eb96:	0c 94 1d e8 	jmp	0x1d03a	; 0x1d03a <__prologue_saves__+0x14>
    eb9a:	7c 01       	movw	r14, r24
    eb9c:	6a 01       	movw	r12, r20
    eb9e:	8b 01       	movw	r16, r22
    eba0:	c0 e0       	ldi	r28, 0x00	; 0
    eba2:	d0 e0       	ldi	r29, 0x00	; 0
    eba4:	01 15       	cp	r16, r1
    eba6:	11 05       	cpc	r17, r1
    eba8:	41 f0       	breq	.+16     	; 0xebba <fgets+0x2c>
    ebaa:	c6 01       	movw	r24, r12
    ebac:	39 df       	rcall	.-398    	; 0xea20 <fgetc>
    ebae:	8f 3f       	cpi	r24, 0xFF	; 255
    ebb0:	2f ef       	ldi	r18, 0xFF	; 255
    ebb2:	92 07       	cpc	r25, r18
    ebb4:	39 f4       	brne	.+14     	; 0xebc4 <fgets+0x36>
    ebb6:	20 97       	sbiw	r28, 0x00	; 0
    ebb8:	b9 f0       	breq	.+46     	; 0xebe8 <fgets+0x5a>
    ebba:	ce 0d       	add	r28, r14
    ebbc:	df 1d       	adc	r29, r15
    ebbe:	18 82       	st	Y, r1
    ebc0:	c7 01       	movw	r24, r14
    ebc2:	14 c0       	rjmp	.+40     	; 0xebec <fgets+0x5e>
    ebc4:	8a 30       	cpi	r24, 0x0A	; 10
    ebc6:	91 05       	cpc	r25, r1
    ebc8:	c1 f3       	breq	.-16     	; 0xebba <fgets+0x2c>
    ebca:	88 30       	cpi	r24, 0x08	; 8
    ebcc:	91 05       	cpc	r25, r1
    ebce:	21 f4       	brne	.+8      	; 0xebd8 <fgets+0x4a>
    ebd0:	20 97       	sbiw	r28, 0x00	; 0
    ebd2:	39 f0       	breq	.+14     	; 0xebe2 <fgets+0x54>
    ebd4:	21 97       	sbiw	r28, 0x01	; 1
    ebd6:	05 c0       	rjmp	.+10     	; 0xebe2 <fgets+0x54>
    ebd8:	f7 01       	movw	r30, r14
    ebda:	ec 0f       	add	r30, r28
    ebdc:	fd 1f       	adc	r31, r29
    ebde:	80 83       	st	Z, r24
    ebe0:	21 96       	adiw	r28, 0x01	; 1
    ebe2:	01 50       	subi	r16, 0x01	; 1
    ebe4:	11 09       	sbc	r17, r1
    ebe6:	de cf       	rjmp	.-68     	; 0xeba4 <fgets+0x16>
    ebe8:	80 e0       	ldi	r24, 0x00	; 0
    ebea:	90 e0       	ldi	r25, 0x00	; 0
    ebec:	cd b7       	in	r28, 0x3d	; 61
    ebee:	de b7       	in	r29, 0x3e	; 62
    ebf0:	e8 e0       	ldi	r30, 0x08	; 8
    ebf2:	0c 94 39 e8 	jmp	0x1d072	; 0x1d072 <__epilogue_restores__+0x14>

0000ebf6 <fputs>:
    ebf6:	0f 93       	push	r16
    ebf8:	1f 93       	push	r17
    ebfa:	cf 93       	push	r28
    ebfc:	df 93       	push	r29
    ebfe:	8b 01       	movw	r16, r22
    ec00:	ec 01       	movw	r28, r24
    ec02:	89 91       	ld	r24, Y+
    ec04:	88 23       	and	r24, r24
    ec06:	41 f0       	breq	.+16     	; 0xec18 <fputs+0x22>
    ec08:	b8 01       	movw	r22, r16
    ec0a:	90 e0       	ldi	r25, 0x00	; 0
    ec0c:	5a df       	rcall	.-332    	; 0xeac2 <fputc>
    ec0e:	8f 3f       	cpi	r24, 0xFF	; 255
    ec10:	2f ef       	ldi	r18, 0xFF	; 255
    ec12:	92 07       	cpc	r25, r18
    ec14:	b1 f7       	brne	.-20     	; 0xec02 <fputs+0xc>
    ec16:	02 c0       	rjmp	.+4      	; 0xec1c <fputs+0x26>
    ec18:	80 e0       	ldi	r24, 0x00	; 0
    ec1a:	90 e0       	ldi	r25, 0x00	; 0
    ec1c:	df 91       	pop	r29
    ec1e:	cf 91       	pop	r28
    ec20:	1f 91       	pop	r17
    ec22:	0f 91       	pop	r16
    ec24:	08 95       	ret

0000ec26 <puts>:
    ec26:	cf 93       	push	r28
    ec28:	df 93       	push	r29
    ec2a:	ec 01       	movw	r28, r24
    ec2c:	89 91       	ld	r24, Y+
    ec2e:	60 91 d0 1c 	lds	r22, 0x1CD0	; 0x801cd0 <__iob+0x2>
    ec32:	70 91 d1 1c 	lds	r23, 0x1CD1	; 0x801cd1 <__iob+0x3>
    ec36:	88 23       	and	r24, r24
    ec38:	39 f0       	breq	.+14     	; 0xec48 <puts+0x22>
    ec3a:	90 e0       	ldi	r25, 0x00	; 0
    ec3c:	42 df       	rcall	.-380    	; 0xeac2 <fputc>
    ec3e:	8f 3f       	cpi	r24, 0xFF	; 255
    ec40:	2f ef       	ldi	r18, 0xFF	; 255
    ec42:	92 07       	cpc	r25, r18
    ec44:	99 f7       	brne	.-26     	; 0xec2c <puts+0x6>
    ec46:	03 c0       	rjmp	.+6      	; 0xec4e <puts+0x28>
    ec48:	8a e0       	ldi	r24, 0x0A	; 10
    ec4a:	90 e0       	ldi	r25, 0x00	; 0
    ec4c:	3a df       	rcall	.-396    	; 0xeac2 <fputc>
    ec4e:	df 91       	pop	r29
    ec50:	cf 91       	pop	r28
    ec52:	08 95       	ret

0000ec54 <fileno>:
    ec54:	00 97       	sbiw	r24, 0x00	; 0
    ec56:	39 f4       	brne	.+14     	; 0xec66 <fileno+0x12>
    ec58:	89 e0       	ldi	r24, 0x09	; 9
    ec5a:	90 e0       	ldi	r25, 0x00	; 0
    ec5c:	90 93 cd 1c 	sts	0x1CCD, r25	; 0x801ccd <errno+0x1>
    ec60:	80 93 cc 1c 	sts	0x1CCC, r24	; 0x801ccc <errno>
    ec64:	0e c0       	rjmp	.+28     	; 0xec82 <fileno+0x2e>
    ec66:	ee ec       	ldi	r30, 0xCE	; 206
    ec68:	fc e1       	ldi	r31, 0x1C	; 28
    ec6a:	20 e0       	ldi	r18, 0x00	; 0
    ec6c:	30 e0       	ldi	r19, 0x00	; 0
    ec6e:	41 91       	ld	r20, Z+
    ec70:	51 91       	ld	r21, Z+
    ec72:	84 17       	cp	r24, r20
    ec74:	95 07       	cpc	r25, r21
    ec76:	41 f0       	breq	.+16     	; 0xec88 <fileno+0x34>
    ec78:	2f 5f       	subi	r18, 0xFF	; 255
    ec7a:	3f 4f       	sbci	r19, 0xFF	; 255
    ec7c:	20 31       	cpi	r18, 0x10	; 16
    ec7e:	31 05       	cpc	r19, r1
    ec80:	b1 f7       	brne	.-20     	; 0xec6e <fileno+0x1a>
    ec82:	8f ef       	ldi	r24, 0xFF	; 255
    ec84:	9f ef       	ldi	r25, 0xFF	; 255
    ec86:	08 95       	ret
    ec88:	c9 01       	movw	r24, r18
    ec8a:	08 95       	ret

0000ec8c <fileno_to_stream>:
    ec8c:	80 31       	cpi	r24, 0x10	; 16
    ec8e:	91 05       	cpc	r25, r1
    ec90:	48 f4       	brcc	.+18     	; 0xeca4 <fileno_to_stream+0x18>
    ec92:	88 0f       	add	r24, r24
    ec94:	99 1f       	adc	r25, r25
    ec96:	fc 01       	movw	r30, r24
    ec98:	e2 53       	subi	r30, 0x32	; 50
    ec9a:	f3 4e       	sbci	r31, 0xE3	; 227
    ec9c:	80 81       	ld	r24, Z
    ec9e:	91 81       	ldd	r25, Z+1	; 0x01
    eca0:	00 97       	sbiw	r24, 0x00	; 0
    eca2:	41 f4       	brne	.+16     	; 0xecb4 <fileno_to_stream+0x28>
    eca4:	89 e0       	ldi	r24, 0x09	; 9
    eca6:	90 e0       	ldi	r25, 0x00	; 0
    eca8:	90 93 cd 1c 	sts	0x1CCD, r25	; 0x801ccd <errno+0x1>
    ecac:	80 93 cc 1c 	sts	0x1CCC, r24	; 0x801ccc <errno>
    ecb0:	80 e0       	ldi	r24, 0x00	; 0
    ecb2:	90 e0       	ldi	r25, 0x00	; 0
    ecb4:	08 95       	ret

0000ecb6 <mctime>:
    ecb6:	a4 e0       	ldi	r26, 0x04	; 4
    ecb8:	b0 e0       	ldi	r27, 0x00	; 0
    ecba:	e1 e6       	ldi	r30, 0x61	; 97
    ecbc:	f6 e7       	ldi	r31, 0x76	; 118
    ecbe:	0c 94 23 e8 	jmp	0x1d046	; 0x1d046 <__prologue_saves__+0x20>
    ecc2:	69 83       	std	Y+1, r22	; 0x01
    ecc4:	7a 83       	std	Y+2, r23	; 0x02
    ecc6:	8b 83       	std	Y+3, r24	; 0x03
    ecc8:	9c 83       	std	Y+4, r25	; 0x04
    ecca:	10 92 cd 1c 	sts	0x1CCD, r1	; 0x801ccd <errno+0x1>
    ecce:	10 92 cc 1c 	sts	0x1CCC, r1	; 0x801ccc <errno>
    ecd2:	ce 01       	movw	r24, r28
    ecd4:	01 96       	adiw	r24, 0x01	; 1
    ecd6:	0e 94 ec 3d 	call	0x7bd8	; 0x7bd8 <ctime_gm>
    ecda:	fc 01       	movw	r30, r24
    ecdc:	01 90       	ld	r0, Z+
    ecde:	00 20       	and	r0, r0
    ece0:	e9 f7       	brne	.-6      	; 0xecdc <mctime+0x26>
    ece2:	31 97       	sbiw	r30, 0x01	; 1
    ece4:	e8 1b       	sub	r30, r24
    ece6:	f9 0b       	sbc	r31, r25
    ece8:	39 f0       	breq	.+14     	; 0xecf8 <mctime+0x42>
    ecea:	31 97       	sbiw	r30, 0x01	; 1
    ecec:	e8 0f       	add	r30, r24
    ecee:	f9 1f       	adc	r31, r25
    ecf0:	20 81       	ld	r18, Z
    ecf2:	2a 30       	cpi	r18, 0x0A	; 10
    ecf4:	09 f4       	brne	.+2      	; 0xecf8 <mctime+0x42>
    ecf6:	10 82       	st	Z, r1
    ecf8:	24 96       	adiw	r28, 0x04	; 4
    ecfa:	e2 e0       	ldi	r30, 0x02	; 2
    ecfc:	0c 94 3f e8 	jmp	0x1d07e	; 0x1d07e <__epilogue_restores__+0x20>

0000ed00 <basename>:
    ed00:	00 97       	sbiw	r24, 0x00	; 0
    ed02:	49 f0       	breq	.+18     	; 0xed16 <basename+0x16>
    ed04:	fc 01       	movw	r30, r24
    ed06:	21 91       	ld	r18, Z+
    ed08:	22 23       	and	r18, r18
    ed0a:	21 f0       	breq	.+8      	; 0xed14 <basename+0x14>
    ed0c:	2f 32       	cpi	r18, 0x2F	; 47
    ed0e:	d9 f7       	brne	.-10     	; 0xed06 <basename+0x6>
    ed10:	cf 01       	movw	r24, r30
    ed12:	f9 cf       	rjmp	.-14     	; 0xed06 <basename+0x6>
    ed14:	08 95       	ret
    ed16:	8c e3       	ldi	r24, 0x3C	; 60
    ed18:	97 e1       	ldi	r25, 0x17	; 23
    ed1a:	08 95       	ret

0000ed1c <chdir>:
    ed1c:	10 92 cd 1c 	sts	0x1CCD, r1	; 0x801ccd <errno+0x1>
    ed20:	10 92 cc 1c 	sts	0x1CCC, r1	; 0x801ccc <errno>
    ed24:	0e 94 7e 5e 	call	0xbcfc	; 0xbcfc <f_chdir>
    ed28:	00 97       	sbiw	r24, 0x00	; 0
    ed2a:	a1 f0       	breq	.+40     	; 0xed54 <chdir+0x38>
    ed2c:	84 31       	cpi	r24, 0x14	; 20
    ed2e:	91 05       	cpc	r25, r1
    ed30:	40 f4       	brcc	.+16     	; 0xed42 <chdir+0x26>
    ed32:	fc 01       	movw	r30, r24
    ed34:	ec 5f       	subi	r30, 0xFC	; 252
    ed36:	f8 4f       	sbci	r31, 0xF8	; 248
    ed38:	80 81       	ld	r24, Z
    ed3a:	08 2e       	mov	r0, r24
    ed3c:	00 0c       	add	r0, r0
    ed3e:	99 0b       	sbc	r25, r25
    ed40:	02 c0       	rjmp	.+4      	; 0xed46 <chdir+0x2a>
    ed42:	83 e2       	ldi	r24, 0x23	; 35
    ed44:	90 e0       	ldi	r25, 0x00	; 0
    ed46:	90 93 cd 1c 	sts	0x1CCD, r25	; 0x801ccd <errno+0x1>
    ed4a:	80 93 cc 1c 	sts	0x1CCC, r24	; 0x801ccc <errno>
    ed4e:	8f ef       	ldi	r24, 0xFF	; 255
    ed50:	9f ef       	ldi	r25, 0xFF	; 255
    ed52:	08 95       	ret
    ed54:	80 e0       	ldi	r24, 0x00	; 0
    ed56:	90 e0       	ldi	r25, 0x00	; 0
    ed58:	08 95       	ret

0000ed5a <chmod>:
    ed5a:	10 92 cd 1c 	sts	0x1CCD, r1	; 0x801ccd <errno+0x1>
    ed5e:	10 92 cc 1c 	sts	0x1CCC, r1	; 0x801ccc <errno>
    ed62:	42 79       	andi	r20, 0x92	; 146
    ed64:	55 27       	eor	r21, r21
    ed66:	66 27       	eor	r22, r22
    ed68:	77 27       	eor	r23, r23
    ed6a:	45 2b       	or	r20, r21
    ed6c:	46 2b       	or	r20, r22
    ed6e:	47 2b       	or	r20, r23
    ed70:	19 f0       	breq	.+6      	; 0xed78 <chmod+0x1e>
    ed72:	80 e0       	ldi	r24, 0x00	; 0
    ed74:	90 e0       	ldi	r25, 0x00	; 0
    ed76:	08 95       	ret
    ed78:	41 e0       	ldi	r20, 0x01	; 1
    ed7a:	61 e0       	ldi	r22, 0x01	; 1
    ed7c:	0e 94 d8 67 	call	0xcfb0	; 0xcfb0 <f_chmod>
    ed80:	00 97       	sbiw	r24, 0x00	; 0
    ed82:	b9 f3       	breq	.-18     	; 0xed72 <chmod+0x18>
    ed84:	84 31       	cpi	r24, 0x14	; 20
    ed86:	91 05       	cpc	r25, r1
    ed88:	40 f4       	brcc	.+16     	; 0xed9a <chmod+0x40>
    ed8a:	fc 01       	movw	r30, r24
    ed8c:	ec 5f       	subi	r30, 0xFC	; 252
    ed8e:	f8 4f       	sbci	r31, 0xF8	; 248
    ed90:	80 81       	ld	r24, Z
    ed92:	08 2e       	mov	r0, r24
    ed94:	00 0c       	add	r0, r0
    ed96:	99 0b       	sbc	r25, r25
    ed98:	02 c0       	rjmp	.+4      	; 0xed9e <chmod+0x44>
    ed9a:	83 e2       	ldi	r24, 0x23	; 35
    ed9c:	90 e0       	ldi	r25, 0x00	; 0
    ed9e:	90 93 cd 1c 	sts	0x1CCD, r25	; 0x801ccd <errno+0x1>
    eda2:	80 93 cc 1c 	sts	0x1CCC, r24	; 0x801ccc <errno>
    eda6:	8f ef       	ldi	r24, 0xFF	; 255
    eda8:	9f ef       	ldi	r25, 0xFF	; 255
    edaa:	08 95       	ret

0000edac <getcwd>:
    edac:	cf 93       	push	r28
    edae:	df 93       	push	r29
    edb0:	d8 2f       	mov	r29, r24
    edb2:	c9 2f       	mov	r28, r25
    edb4:	10 92 cd 1c 	sts	0x1CCD, r1	; 0x801ccd <errno+0x1>
    edb8:	10 92 cc 1c 	sts	0x1CCC, r1	; 0x801ccc <errno>
    edbc:	0e 94 d9 5e 	call	0xbdb2	; 0xbdb2 <f_getcwd>
    edc0:	00 97       	sbiw	r24, 0x00	; 0
    edc2:	a1 f0       	breq	.+40     	; 0xedec <getcwd+0x40>
    edc4:	84 31       	cpi	r24, 0x14	; 20
    edc6:	91 05       	cpc	r25, r1
    edc8:	40 f4       	brcc	.+16     	; 0xedda <getcwd+0x2e>
    edca:	fc 01       	movw	r30, r24
    edcc:	ec 5f       	subi	r30, 0xFC	; 252
    edce:	f8 4f       	sbci	r31, 0xF8	; 248
    edd0:	80 81       	ld	r24, Z
    edd2:	08 2e       	mov	r0, r24
    edd4:	00 0c       	add	r0, r0
    edd6:	99 0b       	sbc	r25, r25
    edd8:	02 c0       	rjmp	.+4      	; 0xedde <getcwd+0x32>
    edda:	83 e2       	ldi	r24, 0x23	; 35
    eddc:	90 e0       	ldi	r25, 0x00	; 0
    edde:	90 93 cd 1c 	sts	0x1CCD, r25	; 0x801ccd <errno+0x1>
    ede2:	80 93 cc 1c 	sts	0x1CCC, r24	; 0x801ccc <errno>
    ede6:	80 e0       	ldi	r24, 0x00	; 0
    ede8:	90 e0       	ldi	r25, 0x00	; 0
    edea:	02 c0       	rjmp	.+4      	; 0xedf0 <getcwd+0x44>
    edec:	8d 2f       	mov	r24, r29
    edee:	9c 2f       	mov	r25, r28
    edf0:	df 91       	pop	r29
    edf2:	cf 91       	pop	r28
    edf4:	08 95       	ret

0000edf6 <mkdir>:
    edf6:	cf 93       	push	r28
    edf8:	df 93       	push	r29
    edfa:	ec 01       	movw	r28, r24
    edfc:	10 92 cd 1c 	sts	0x1CCD, r1	; 0x801ccd <errno+0x1>
    ee00:	10 92 cc 1c 	sts	0x1CCC, r1	; 0x801ccc <errno>
    ee04:	41 15       	cp	r20, r1
    ee06:	51 05       	cpc	r21, r1
    ee08:	61 05       	cpc	r22, r1
    ee0a:	71 05       	cpc	r23, r1
    ee0c:	41 f4       	brne	.+16     	; 0xee1e <mkdir+0x28>
    ee0e:	ce 01       	movw	r24, r28
    ee10:	0e 94 84 65 	call	0xcb08	; 0xcb08 <f_mkdir>
    ee14:	00 97       	sbiw	r24, 0x00	; 0
    ee16:	39 f4       	brne	.+14     	; 0xee26 <mkdir+0x30>
    ee18:	80 e0       	ldi	r24, 0x00	; 0
    ee1a:	90 e0       	ldi	r25, 0x00	; 0
    ee1c:	17 c0       	rjmp	.+46     	; 0xee4c <mkdir+0x56>
    ee1e:	9d df       	rcall	.-198    	; 0xed5a <chmod>
    ee20:	89 2b       	or	r24, r25
    ee22:	a9 f3       	breq	.-22     	; 0xee0e <mkdir+0x18>
    ee24:	11 c0       	rjmp	.+34     	; 0xee48 <mkdir+0x52>
    ee26:	84 31       	cpi	r24, 0x14	; 20
    ee28:	91 05       	cpc	r25, r1
    ee2a:	40 f4       	brcc	.+16     	; 0xee3c <mkdir+0x46>
    ee2c:	fc 01       	movw	r30, r24
    ee2e:	ec 5f       	subi	r30, 0xFC	; 252
    ee30:	f8 4f       	sbci	r31, 0xF8	; 248
    ee32:	80 81       	ld	r24, Z
    ee34:	08 2e       	mov	r0, r24
    ee36:	00 0c       	add	r0, r0
    ee38:	99 0b       	sbc	r25, r25
    ee3a:	02 c0       	rjmp	.+4      	; 0xee40 <mkdir+0x4a>
    ee3c:	83 e2       	ldi	r24, 0x23	; 35
    ee3e:	90 e0       	ldi	r25, 0x00	; 0
    ee40:	90 93 cd 1c 	sts	0x1CCD, r25	; 0x801ccd <errno+0x1>
    ee44:	80 93 cc 1c 	sts	0x1CCC, r24	; 0x801ccc <errno>
    ee48:	8f ef       	ldi	r24, 0xFF	; 255
    ee4a:	9f ef       	ldi	r25, 0xFF	; 255
    ee4c:	df 91       	pop	r29
    ee4e:	cf 91       	pop	r28
    ee50:	08 95       	ret

0000ee52 <rename>:
    ee52:	10 92 cd 1c 	sts	0x1CCD, r1	; 0x801ccd <errno+0x1>
    ee56:	10 92 cc 1c 	sts	0x1CCC, r1	; 0x801ccc <errno>
    ee5a:	0e 94 c9 66 	call	0xcd92	; 0xcd92 <f_rename>
    ee5e:	00 97       	sbiw	r24, 0x00	; 0
    ee60:	a1 f0       	breq	.+40     	; 0xee8a <rename+0x38>
    ee62:	84 31       	cpi	r24, 0x14	; 20
    ee64:	91 05       	cpc	r25, r1
    ee66:	40 f4       	brcc	.+16     	; 0xee78 <rename+0x26>
    ee68:	fc 01       	movw	r30, r24
    ee6a:	ec 5f       	subi	r30, 0xFC	; 252
    ee6c:	f8 4f       	sbci	r31, 0xF8	; 248
    ee6e:	80 81       	ld	r24, Z
    ee70:	08 2e       	mov	r0, r24
    ee72:	00 0c       	add	r0, r0
    ee74:	99 0b       	sbc	r25, r25
    ee76:	02 c0       	rjmp	.+4      	; 0xee7c <rename+0x2a>
    ee78:	83 e2       	ldi	r24, 0x23	; 35
    ee7a:	90 e0       	ldi	r25, 0x00	; 0
    ee7c:	90 93 cd 1c 	sts	0x1CCD, r25	; 0x801ccd <errno+0x1>
    ee80:	80 93 cc 1c 	sts	0x1CCC, r24	; 0x801ccc <errno>
    ee84:	8f ef       	ldi	r24, 0xFF	; 255
    ee86:	9f ef       	ldi	r25, 0xFF	; 255
    ee88:	08 95       	ret
    ee8a:	80 e0       	ldi	r24, 0x00	; 0
    ee8c:	90 e0       	ldi	r25, 0x00	; 0
    ee8e:	08 95       	ret

0000ee90 <unlink>:
    ee90:	10 92 cd 1c 	sts	0x1CCD, r1	; 0x801ccd <errno+0x1>
    ee94:	10 92 cc 1c 	sts	0x1CCC, r1	; 0x801ccc <errno>
    ee98:	0e 94 dd 64 	call	0xc9ba	; 0xc9ba <f_unlink>
    ee9c:	00 97       	sbiw	r24, 0x00	; 0
    ee9e:	a1 f0       	breq	.+40     	; 0xeec8 <unlink+0x38>
    eea0:	84 31       	cpi	r24, 0x14	; 20
    eea2:	91 05       	cpc	r25, r1
    eea4:	40 f4       	brcc	.+16     	; 0xeeb6 <unlink+0x26>
    eea6:	fc 01       	movw	r30, r24
    eea8:	ec 5f       	subi	r30, 0xFC	; 252
    eeaa:	f8 4f       	sbci	r31, 0xF8	; 248
    eeac:	80 81       	ld	r24, Z
    eeae:	08 2e       	mov	r0, r24
    eeb0:	00 0c       	add	r0, r0
    eeb2:	99 0b       	sbc	r25, r25
    eeb4:	02 c0       	rjmp	.+4      	; 0xeeba <unlink+0x2a>
    eeb6:	83 e2       	ldi	r24, 0x23	; 35
    eeb8:	90 e0       	ldi	r25, 0x00	; 0
    eeba:	90 93 cd 1c 	sts	0x1CCD, r25	; 0x801ccd <errno+0x1>
    eebe:	80 93 cc 1c 	sts	0x1CCC, r24	; 0x801ccc <errno>
    eec2:	8f ef       	ldi	r24, 0xFF	; 255
    eec4:	9f ef       	ldi	r25, 0xFF	; 255
    eec6:	08 95       	ret
    eec8:	80 e0       	ldi	r24, 0x00	; 0
    eeca:	90 e0       	ldi	r25, 0x00	; 0
    eecc:	08 95       	ret

0000eece <rmdir>:
    eece:	e0 cf       	rjmp	.-64     	; 0xee90 <unlink>
    eed0:	08 95       	ret

0000eed2 <closedir>:
    eed2:	0e 94 59 63 	call	0xc6b2	; 0xc6b2 <f_closedir>
    eed6:	00 97       	sbiw	r24, 0x00	; 0
    eed8:	a1 f0       	breq	.+40     	; 0xef02 <closedir+0x30>
    eeda:	84 31       	cpi	r24, 0x14	; 20
    eedc:	91 05       	cpc	r25, r1
    eede:	40 f4       	brcc	.+16     	; 0xeef0 <closedir+0x1e>
    eee0:	fc 01       	movw	r30, r24
    eee2:	ec 5f       	subi	r30, 0xFC	; 252
    eee4:	f8 4f       	sbci	r31, 0xF8	; 248
    eee6:	80 81       	ld	r24, Z
    eee8:	08 2e       	mov	r0, r24
    eeea:	00 0c       	add	r0, r0
    eeec:	99 0b       	sbc	r25, r25
    eeee:	02 c0       	rjmp	.+4      	; 0xeef4 <closedir+0x22>
    eef0:	83 e2       	ldi	r24, 0x23	; 35
    eef2:	90 e0       	ldi	r25, 0x00	; 0
    eef4:	90 93 cd 1c 	sts	0x1CCD, r25	; 0x801ccd <errno+0x1>
    eef8:	80 93 cc 1c 	sts	0x1CCC, r24	; 0x801ccc <errno>
    eefc:	8f ef       	ldi	r24, 0xFF	; 255
    eefe:	9f ef       	ldi	r25, 0xFF	; 255
    ef00:	08 95       	ret
    ef02:	80 e0       	ldi	r24, 0x00	; 0
    ef04:	90 e0       	ldi	r25, 0x00	; 0
    ef06:	08 95       	ret

0000ef08 <opendir>:
    ef08:	bc 01       	movw	r22, r24
    ef0a:	84 e4       	ldi	r24, 0x44	; 68
    ef0c:	99 e1       	ldi	r25, 0x19	; 25
    ef0e:	0e 94 e8 62 	call	0xc5d0	; 0xc5d0 <f_opendir>
    ef12:	00 97       	sbiw	r24, 0x00	; 0
    ef14:	a1 f0       	breq	.+40     	; 0xef3e <opendir+0x36>
    ef16:	84 31       	cpi	r24, 0x14	; 20
    ef18:	91 05       	cpc	r25, r1
    ef1a:	40 f4       	brcc	.+16     	; 0xef2c <opendir+0x24>
    ef1c:	fc 01       	movw	r30, r24
    ef1e:	ec 5f       	subi	r30, 0xFC	; 252
    ef20:	f8 4f       	sbci	r31, 0xF8	; 248
    ef22:	80 81       	ld	r24, Z
    ef24:	08 2e       	mov	r0, r24
    ef26:	00 0c       	add	r0, r0
    ef28:	99 0b       	sbc	r25, r25
    ef2a:	02 c0       	rjmp	.+4      	; 0xef30 <opendir+0x28>
    ef2c:	83 e2       	ldi	r24, 0x23	; 35
    ef2e:	90 e0       	ldi	r25, 0x00	; 0
    ef30:	90 93 cd 1c 	sts	0x1CCD, r25	; 0x801ccd <errno+0x1>
    ef34:	80 93 cc 1c 	sts	0x1CCC, r24	; 0x801ccc <errno>
    ef38:	80 e0       	ldi	r24, 0x00	; 0
    ef3a:	90 e0       	ldi	r25, 0x00	; 0
    ef3c:	08 95       	ret
    ef3e:	84 e4       	ldi	r24, 0x44	; 68
    ef40:	99 e1       	ldi	r25, 0x19	; 25
    ef42:	08 95       	ret

0000ef44 <readdir>:
    ef44:	a6 e1       	ldi	r26, 0x16	; 22
    ef46:	b1 e0       	ldi	r27, 0x01	; 1
    ef48:	e8 ea       	ldi	r30, 0xA8	; 168
    ef4a:	f7 e7       	ldi	r31, 0x77	; 119
    ef4c:	0c 94 21 e8 	jmp	0x1d042	; 0x1d042 <__prologue_saves__+0x1c>
    ef50:	10 92 45 18 	sts	0x1845, r1	; 0x801845 <_de>
    ef54:	be 01       	movw	r22, r28
    ef56:	6f 5f       	subi	r22, 0xFF	; 255
    ef58:	7f 4f       	sbci	r23, 0xFF	; 255
    ef5a:	0e 94 6e 63 	call	0xc6dc	; 0xc6dc <f_readdir>
    ef5e:	00 97       	sbiw	r24, 0x00	; 0
    ef60:	a1 f0       	breq	.+40     	; 0xef8a <readdir+0x46>
    ef62:	84 31       	cpi	r24, 0x14	; 20
    ef64:	91 05       	cpc	r25, r1
    ef66:	40 f4       	brcc	.+16     	; 0xef78 <readdir+0x34>
    ef68:	fc 01       	movw	r30, r24
    ef6a:	ec 5f       	subi	r30, 0xFC	; 252
    ef6c:	f8 4f       	sbci	r31, 0xF8	; 248
    ef6e:	80 81       	ld	r24, Z
    ef70:	08 2e       	mov	r0, r24
    ef72:	00 0c       	add	r0, r0
    ef74:	99 0b       	sbc	r25, r25
    ef76:	02 c0       	rjmp	.+4      	; 0xef7c <readdir+0x38>
    ef78:	83 e2       	ldi	r24, 0x23	; 35
    ef7a:	90 e0       	ldi	r25, 0x00	; 0
    ef7c:	90 93 cd 1c 	sts	0x1CCD, r25	; 0x801ccd <errno+0x1>
    ef80:	80 93 cc 1c 	sts	0x1CCC, r24	; 0x801ccc <errno>
    ef84:	80 e0       	ldi	r24, 0x00	; 0
    ef86:	90 e0       	ldi	r25, 0x00	; 0
    ef88:	16 c0       	rjmp	.+44     	; 0xefb6 <readdir+0x72>
    ef8a:	be 01       	movw	r22, r28
    ef8c:	69 5e       	subi	r22, 0xE9	; 233
    ef8e:	7f 4f       	sbci	r23, 0xFF	; 255
    ef90:	fb 01       	movw	r30, r22
    ef92:	01 90       	ld	r0, Z+
    ef94:	00 20       	and	r0, r0
    ef96:	e9 f7       	brne	.-6      	; 0xef92 <readdir+0x4e>
    ef98:	31 97       	sbiw	r30, 0x01	; 1
    ef9a:	8f 01       	movw	r16, r30
    ef9c:	06 1b       	sub	r16, r22
    ef9e:	17 0b       	sbc	r17, r23
    efa0:	a8 01       	movw	r20, r16
    efa2:	85 e4       	ldi	r24, 0x45	; 69
    efa4:	98 e1       	ldi	r25, 0x18	; 24
    efa6:	0e 94 22 32 	call	0x6444	; 0x6444 <strncpy>
    efaa:	f8 01       	movw	r30, r16
    efac:	eb 5b       	subi	r30, 0xBB	; 187
    efae:	f7 4e       	sbci	r31, 0xE7	; 231
    efb0:	10 82       	st	Z, r1
    efb2:	85 e4       	ldi	r24, 0x45	; 69
    efb4:	98 e1       	ldi	r25, 0x18	; 24
    efb6:	ca 5e       	subi	r28, 0xEA	; 234
    efb8:	de 4f       	sbci	r29, 0xFE	; 254
    efba:	e4 e0       	ldi	r30, 0x04	; 4
    efbc:	0c 94 3d e8 	jmp	0x1d07a	; 0x1d07a <__epilogue_restores__+0x1c>

0000efc0 <perror>:
    efc0:	e0 91 cc 1c 	lds	r30, 0x1CCC	; 0x801ccc <errno>
    efc4:	f0 91 cd 1c 	lds	r31, 0x1CCD	; 0x801ccd <errno+0x1>
    efc8:	e3 32       	cpi	r30, 0x23	; 35
    efca:	f1 05       	cpc	r31, r1
    efcc:	38 f4       	brcc	.+14     	; 0xefdc <perror+0x1c>
    efce:	ee 0f       	add	r30, r30
    efd0:	ff 1f       	adc	r31, r31
    efd2:	e3 5c       	subi	r30, 0xC3	; 195
    efd4:	fe 4f       	sbci	r31, 0xFE	; 254
    efd6:	20 81       	ld	r18, Z
    efd8:	31 81       	ldd	r19, Z+1	; 0x01
    efda:	04 c0       	rjmp	.+8      	; 0xefe4 <perror+0x24>
    efdc:	20 91 83 01 	lds	r18, 0x0183	; 0x800183 <sys_errlist+0x46>
    efe0:	30 91 84 01 	lds	r19, 0x0184	; 0x800184 <sys_errlist+0x47>
    efe4:	00 97       	sbiw	r24, 0x00	; 0
    efe6:	c1 f0       	breq	.+48     	; 0xf018 <perror+0x58>
    efe8:	fc 01       	movw	r30, r24
    efea:	40 81       	ld	r20, Z
    efec:	44 23       	and	r20, r20
    efee:	a1 f0       	breq	.+40     	; 0xf018 <perror+0x58>
    eff0:	3f 93       	push	r19
    eff2:	2f 93       	push	r18
    eff4:	9f 93       	push	r25
    eff6:	8f 93       	push	r24
    eff8:	8d ed       	ldi	r24, 0xDD	; 221
    effa:	9b e0       	ldi	r25, 0x0B	; 11
    effc:	1f 92       	push	r1
    effe:	9f 93       	push	r25
    f000:	8f 93       	push	r24
    f002:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    f006:	8d b7       	in	r24, 0x3d	; 61
    f008:	9e b7       	in	r25, 0x3e	; 62
    f00a:	07 96       	adiw	r24, 0x07	; 7
    f00c:	0f b6       	in	r0, 0x3f	; 63
    f00e:	f8 94       	cli
    f010:	9e bf       	out	0x3e, r25	; 62
    f012:	0f be       	out	0x3f, r0	; 63
    f014:	8d bf       	out	0x3d, r24	; 61
    f016:	08 95       	ret
    f018:	3f 93       	push	r19
    f01a:	2f 93       	push	r18
    f01c:	89 ed       	ldi	r24, 0xD9	; 217
    f01e:	9b e0       	ldi	r25, 0x0B	; 11
    f020:	1f 92       	push	r1
    f022:	9f 93       	push	r25
    f024:	8f 93       	push	r24
    f026:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    f02a:	0f 90       	pop	r0
    f02c:	0f 90       	pop	r0
    f02e:	0f 90       	pop	r0
    f030:	0f 90       	pop	r0
    f032:	0f 90       	pop	r0
    f034:	08 95       	ret

0000f036 <fdevopen>:
    f036:	0f 93       	push	r16
    f038:	1f 93       	push	r17
    f03a:	cf 93       	push	r28
    f03c:	df 93       	push	r29
    f03e:	00 97       	sbiw	r24, 0x00	; 0
    f040:	31 f4       	brne	.+12     	; 0xf04e <fdevopen+0x18>
    f042:	61 15       	cp	r22, r1
    f044:	71 05       	cpc	r23, r1
    f046:	19 f4       	brne	.+6      	; 0xf04e <fdevopen+0x18>
    f048:	80 e0       	ldi	r24, 0x00	; 0
    f04a:	90 e0       	ldi	r25, 0x00	; 0
    f04c:	3a c0       	rjmp	.+116    	; 0xf0c2 <fdevopen+0x8c>
    f04e:	8b 01       	movw	r16, r22
    f050:	ec 01       	movw	r28, r24
    f052:	6e e0       	ldi	r22, 0x0E	; 14
    f054:	70 e0       	ldi	r23, 0x00	; 0
    f056:	81 e0       	ldi	r24, 0x01	; 1
    f058:	90 e0       	ldi	r25, 0x00	; 0
    f05a:	0e 94 07 2a 	call	0x540e	; 0x540e <safecalloc>
    f05e:	fc 01       	movw	r30, r24
    f060:	89 2b       	or	r24, r25
    f062:	91 f3       	breq	.-28     	; 0xf048 <fdevopen+0x12>
    f064:	80 e8       	ldi	r24, 0x80	; 128
    f066:	83 83       	std	Z+3, r24	; 0x03
    f068:	01 15       	cp	r16, r1
    f06a:	11 05       	cpc	r17, r1
    f06c:	71 f0       	breq	.+28     	; 0xf08a <fdevopen+0x54>
    f06e:	13 87       	std	Z+11, r17	; 0x0b
    f070:	02 87       	std	Z+10, r16	; 0x0a
    f072:	81 e8       	ldi	r24, 0x81	; 129
    f074:	83 83       	std	Z+3, r24	; 0x03
    f076:	80 91 ce 1c 	lds	r24, 0x1CCE	; 0x801cce <__iob>
    f07a:	90 91 cf 1c 	lds	r25, 0x1CCF	; 0x801ccf <__iob+0x1>
    f07e:	89 2b       	or	r24, r25
    f080:	21 f4       	brne	.+8      	; 0xf08a <fdevopen+0x54>
    f082:	f0 93 cf 1c 	sts	0x1CCF, r31	; 0x801ccf <__iob+0x1>
    f086:	e0 93 ce 1c 	sts	0x1CCE, r30	; 0x801cce <__iob>
    f08a:	20 97       	sbiw	r28, 0x00	; 0
    f08c:	c9 f0       	breq	.+50     	; 0xf0c0 <fdevopen+0x8a>
    f08e:	d1 87       	std	Z+9, r29	; 0x09
    f090:	c0 87       	std	Z+8, r28	; 0x08
    f092:	83 81       	ldd	r24, Z+3	; 0x03
    f094:	82 60       	ori	r24, 0x02	; 2
    f096:	83 83       	std	Z+3, r24	; 0x03
    f098:	80 91 d0 1c 	lds	r24, 0x1CD0	; 0x801cd0 <__iob+0x2>
    f09c:	90 91 d1 1c 	lds	r25, 0x1CD1	; 0x801cd1 <__iob+0x3>
    f0a0:	89 2b       	or	r24, r25
    f0a2:	21 f4       	brne	.+8      	; 0xf0ac <fdevopen+0x76>
    f0a4:	f0 93 d1 1c 	sts	0x1CD1, r31	; 0x801cd1 <__iob+0x3>
    f0a8:	e0 93 d0 1c 	sts	0x1CD0, r30	; 0x801cd0 <__iob+0x2>
    f0ac:	80 91 d2 1c 	lds	r24, 0x1CD2	; 0x801cd2 <__iob+0x4>
    f0b0:	90 91 d3 1c 	lds	r25, 0x1CD3	; 0x801cd3 <__iob+0x5>
    f0b4:	89 2b       	or	r24, r25
    f0b6:	21 f4       	brne	.+8      	; 0xf0c0 <fdevopen+0x8a>
    f0b8:	f0 93 d3 1c 	sts	0x1CD3, r31	; 0x801cd3 <__iob+0x5>
    f0bc:	e0 93 d2 1c 	sts	0x1CD2, r30	; 0x801cd2 <__iob+0x4>
    f0c0:	cf 01       	movw	r24, r30
    f0c2:	df 91       	pop	r29
    f0c4:	cf 91       	pop	r28
    f0c6:	1f 91       	pop	r17
    f0c8:	0f 91       	pop	r16
    f0ca:	08 95       	ret

0000f0cc <fat_time_to_unix>:
    f0cc:	a6 e1       	ldi	r26, 0x16	; 22
    f0ce:	b0 e0       	ldi	r27, 0x00	; 0
    f0d0:	ec e6       	ldi	r30, 0x6C	; 108
    f0d2:	f8 e7       	ldi	r31, 0x78	; 120
    f0d4:	0c 94 23 e8 	jmp	0x1d046	; 0x1d046 <__prologue_saves__+0x20>
    f0d8:	fe 01       	movw	r30, r28
    f0da:	31 96       	adiw	r30, 0x01	; 1
    f0dc:	26 e1       	ldi	r18, 0x16	; 22
    f0de:	df 01       	movw	r26, r30
    f0e0:	1d 92       	st	X+, r1
    f0e2:	2a 95       	dec	r18
    f0e4:	e9 f7       	brne	.-6      	; 0xf0e0 <fat_time_to_unix+0x14>
    f0e6:	9b 01       	movw	r18, r22
    f0e8:	22 0f       	add	r18, r18
    f0ea:	33 1f       	adc	r19, r19
    f0ec:	2e 73       	andi	r18, 0x3E	; 62
    f0ee:	33 27       	eor	r19, r19
    f0f0:	3a 83       	std	Y+2, r19	; 0x02
    f0f2:	29 83       	std	Y+1, r18	; 0x01
    f0f4:	9b 01       	movw	r18, r22
    f0f6:	55 e0       	ldi	r21, 0x05	; 5
    f0f8:	36 95       	lsr	r19
    f0fa:	27 95       	ror	r18
    f0fc:	5a 95       	dec	r21
    f0fe:	e1 f7       	brne	.-8      	; 0xf0f8 <fat_time_to_unix+0x2c>
    f100:	2f 73       	andi	r18, 0x3F	; 63
    f102:	33 27       	eor	r19, r19
    f104:	3c 83       	std	Y+4, r19	; 0x04
    f106:	2b 83       	std	Y+3, r18	; 0x03
    f108:	27 2f       	mov	r18, r23
    f10a:	26 95       	lsr	r18
    f10c:	26 95       	lsr	r18
    f10e:	26 95       	lsr	r18
    f110:	2d 83       	std	Y+5, r18	; 0x05
    f112:	1e 82       	std	Y+6, r1	; 0x06
    f114:	9c 01       	movw	r18, r24
    f116:	2f 71       	andi	r18, 0x1F	; 31
    f118:	33 27       	eor	r19, r19
    f11a:	38 87       	std	Y+8, r19	; 0x08
    f11c:	2f 83       	std	Y+7, r18	; 0x07
    f11e:	9c 01       	movw	r18, r24
    f120:	65 e0       	ldi	r22, 0x05	; 5
    f122:	36 95       	lsr	r19
    f124:	27 95       	ror	r18
    f126:	6a 95       	dec	r22
    f128:	e1 f7       	brne	.-8      	; 0xf122 <fat_time_to_unix+0x56>
    f12a:	2f 70       	andi	r18, 0x0F	; 15
    f12c:	33 27       	eor	r19, r19
    f12e:	21 50       	subi	r18, 0x01	; 1
    f130:	31 09       	sbc	r19, r1
    f132:	3a 87       	std	Y+10, r19	; 0x0a
    f134:	29 87       	std	Y+9, r18	; 0x09
    f136:	9c 01       	movw	r18, r24
    f138:	23 2f       	mov	r18, r19
    f13a:	33 27       	eor	r19, r19
    f13c:	26 95       	lsr	r18
    f13e:	20 5b       	subi	r18, 0xB0	; 176
    f140:	3f 4f       	sbci	r19, 0xFF	; 255
    f142:	3c 87       	std	Y+12, r19	; 0x0c
    f144:	2b 87       	std	Y+11, r18	; 0x0b
    f146:	cf 01       	movw	r24, r30
    f148:	0e 94 40 3b 	call	0x7680	; 0x7680 <timegm>
    f14c:	66 96       	adiw	r28, 0x16	; 22
    f14e:	e2 e0       	ldi	r30, 0x02	; 2
    f150:	0c 94 3f e8 	jmp	0x1d07e	; 0x1d07e <__epilogue_restores__+0x20>

0000f154 <stat>:
    f154:	a6 e1       	ldi	r26, 0x16	; 22
    f156:	b1 e0       	ldi	r27, 0x01	; 1
    f158:	e0 eb       	ldi	r30, 0xB0	; 176
    f15a:	f8 e7       	ldi	r31, 0x78	; 120
    f15c:	0c 94 1f e8 	jmp	0x1d03e	; 0x1d03e <__prologue_saves__+0x18>
    f160:	7c 01       	movw	r14, r24
    f162:	8b 01       	movw	r16, r22
    f164:	10 92 cd 1c 	sts	0x1CCD, r1	; 0x801ccd <errno+0x1>
    f168:	10 92 cc 1c 	sts	0x1CCC, r1	; 0x801ccc <errno>
    f16c:	6c e1       	ldi	r22, 0x1C	; 28
    f16e:	78 e0       	ldi	r23, 0x08	; 8
    f170:	0e 94 8b 32 	call	0x6516	; 0x6516 <strcmp>
    f174:	89 2b       	or	r24, r25
    f176:	39 f0       	breq	.+14     	; 0xf186 <stat+0x32>
    f178:	69 e7       	ldi	r22, 0x79	; 121
    f17a:	72 e1       	ldi	r23, 0x12	; 18
    f17c:	c7 01       	movw	r24, r14
    f17e:	0e 94 8b 32 	call	0x6516	; 0x6516 <strcmp>
    f182:	89 2b       	or	r24, r25
    f184:	d1 f4       	brne	.+52     	; 0xf1ba <stat+0x66>
    f186:	f8 01       	movw	r30, r16
    f188:	14 a2       	std	Z+36, r1	; 0x24
    f18a:	15 a2       	std	Z+37, r1	; 0x25
    f18c:	16 a2       	std	Z+38, r1	; 0x26
    f18e:	17 a2       	std	Z+39, r1	; 0x27
    f190:	10 a6       	std	Z+40, r1	; 0x28
    f192:	11 a6       	std	Z+41, r1	; 0x29
    f194:	12 a6       	std	Z+42, r1	; 0x2a
    f196:	13 a6       	std	Z+43, r1	; 0x2b
    f198:	14 a6       	std	Z+44, r1	; 0x2c
    f19a:	15 a6       	std	Z+45, r1	; 0x2d
    f19c:	16 a6       	std	Z+46, r1	; 0x2e
    f19e:	17 a6       	std	Z+47, r1	; 0x2f
    f1a0:	11 8a       	std	Z+17, r1	; 0x11
    f1a2:	10 8a       	std	Z+16, r1	; 0x10
    f1a4:	13 8a       	std	Z+19, r1	; 0x13
    f1a6:	12 8a       	std	Z+18, r1	; 0x12
    f1a8:	10 8e       	std	Z+24, r1	; 0x18
    f1aa:	11 8e       	std	Z+25, r1	; 0x19
    f1ac:	12 8e       	std	Z+26, r1	; 0x1a
    f1ae:	13 8e       	std	Z+27, r1	; 0x1b
    f1b0:	80 e0       	ldi	r24, 0x00	; 0
    f1b2:	90 e4       	ldi	r25, 0x40	; 64
    f1b4:	a0 e0       	ldi	r26, 0x00	; 0
    f1b6:	b0 e0       	ldi	r27, 0x00	; 0
    f1b8:	4e c0       	rjmp	.+156    	; 0xf256 <stat+0x102>
    f1ba:	be 01       	movw	r22, r28
    f1bc:	6f 5f       	subi	r22, 0xFF	; 255
    f1be:	7f 4f       	sbci	r23, 0xFF	; 255
    f1c0:	c7 01       	movw	r24, r14
    f1c2:	0e 94 b2 63 	call	0xc764	; 0xc764 <f_stat>
    f1c6:	00 97       	sbiw	r24, 0x00	; 0
    f1c8:	a1 f0       	breq	.+40     	; 0xf1f2 <stat+0x9e>
    f1ca:	84 31       	cpi	r24, 0x14	; 20
    f1cc:	91 05       	cpc	r25, r1
    f1ce:	40 f4       	brcc	.+16     	; 0xf1e0 <stat+0x8c>
    f1d0:	fc 01       	movw	r30, r24
    f1d2:	ec 5f       	subi	r30, 0xFC	; 252
    f1d4:	f8 4f       	sbci	r31, 0xF8	; 248
    f1d6:	80 81       	ld	r24, Z
    f1d8:	08 2e       	mov	r0, r24
    f1da:	00 0c       	add	r0, r0
    f1dc:	99 0b       	sbc	r25, r25
    f1de:	02 c0       	rjmp	.+4      	; 0xf1e4 <stat+0x90>
    f1e0:	83 e2       	ldi	r24, 0x23	; 35
    f1e2:	90 e0       	ldi	r25, 0x00	; 0
    f1e4:	90 93 cd 1c 	sts	0x1CCD, r25	; 0x801ccd <errno+0x1>
    f1e8:	80 93 cc 1c 	sts	0x1CCC, r24	; 0x801ccc <errno>
    f1ec:	8f ef       	ldi	r24, 0xFF	; 255
    f1ee:	9f ef       	ldi	r25, 0xFF	; 255
    f1f0:	38 c0       	rjmp	.+112    	; 0xf262 <stat+0x10e>
    f1f2:	89 81       	ldd	r24, Y+1	; 0x01
    f1f4:	9a 81       	ldd	r25, Y+2	; 0x02
    f1f6:	ab 81       	ldd	r26, Y+3	; 0x03
    f1f8:	bc 81       	ldd	r27, Y+4	; 0x04
    f1fa:	f8 01       	movw	r30, r16
    f1fc:	80 8f       	std	Z+24, r24	; 0x18
    f1fe:	91 8f       	std	Z+25, r25	; 0x19
    f200:	a2 8f       	std	Z+26, r26	; 0x1a
    f202:	b3 8f       	std	Z+27, r27	; 0x1b
    f204:	6f 81       	ldd	r22, Y+7	; 0x07
    f206:	78 85       	ldd	r23, Y+8	; 0x08
    f208:	8d 81       	ldd	r24, Y+5	; 0x05
    f20a:	9e 81       	ldd	r25, Y+6	; 0x06
    f20c:	5f df       	rcall	.-322    	; 0xf0cc <fat_time_to_unix>
    f20e:	f8 01       	movw	r30, r16
    f210:	64 a3       	std	Z+36, r22	; 0x24
    f212:	75 a3       	std	Z+37, r23	; 0x25
    f214:	86 a3       	std	Z+38, r24	; 0x26
    f216:	97 a3       	std	Z+39, r25	; 0x27
    f218:	60 a7       	std	Z+40, r22	; 0x28
    f21a:	71 a7       	std	Z+41, r23	; 0x29
    f21c:	82 a7       	std	Z+42, r24	; 0x2a
    f21e:	93 a7       	std	Z+43, r25	; 0x2b
    f220:	64 a7       	std	Z+44, r22	; 0x2c
    f222:	75 a7       	std	Z+45, r23	; 0x2d
    f224:	86 a7       	std	Z+46, r24	; 0x2e
    f226:	97 a7       	std	Z+47, r25	; 0x2f
    f228:	29 85       	ldd	r18, Y+9	; 0x09
    f22a:	20 fd       	sbrc	r18, 0
    f22c:	03 c0       	rjmp	.+6      	; 0xf234 <stat+0xe0>
    f22e:	8f ef       	ldi	r24, 0xFF	; 255
    f230:	91 e0       	ldi	r25, 0x01	; 1
    f232:	02 c0       	rjmp	.+4      	; 0xf238 <stat+0xe4>
    f234:	8d e6       	ldi	r24, 0x6D	; 109
    f236:	91 e0       	ldi	r25, 0x01	; 1
    f238:	48 ee       	ldi	r20, 0xE8	; 232
    f23a:	53 e0       	ldi	r21, 0x03	; 3
    f23c:	f8 01       	movw	r30, r16
    f23e:	51 8b       	std	Z+17, r21	; 0x11
    f240:	40 8b       	std	Z+16, r20	; 0x10
    f242:	53 8b       	std	Z+19, r21	; 0x13
    f244:	42 8b       	std	Z+18, r20	; 0x12
    f246:	24 ff       	sbrs	r18, 4
    f248:	02 c0       	rjmp	.+4      	; 0xf24e <stat+0xfa>
    f24a:	90 64       	ori	r25, 0x40	; 64
    f24c:	01 c0       	rjmp	.+2      	; 0xf250 <stat+0xfc>
    f24e:	90 68       	ori	r25, 0x80	; 128
    f250:	a0 e0       	ldi	r26, 0x00	; 0
    f252:	b0 e0       	ldi	r27, 0x00	; 0
    f254:	f8 01       	movw	r30, r16
    f256:	80 87       	std	Z+8, r24	; 0x08
    f258:	91 87       	std	Z+9, r25	; 0x09
    f25a:	a2 87       	std	Z+10, r26	; 0x0a
    f25c:	b3 87       	std	Z+11, r27	; 0x0b
    f25e:	80 e0       	ldi	r24, 0x00	; 0
    f260:	90 e0       	ldi	r25, 0x00	; 0
    f262:	ca 5e       	subi	r28, 0xEA	; 234
    f264:	de 4f       	sbci	r29, 0xFE	; 254
    f266:	e6 e0       	ldi	r30, 0x06	; 6
    f268:	0c 94 3b e8 	jmp	0x1d076	; 0x1d076 <__epilogue_restores__+0x18>

0000f26c <unix_time_to_fat>:
    f26c:	a4 e0       	ldi	r26, 0x04	; 4
    f26e:	b0 e0       	ldi	r27, 0x00	; 0
    f270:	ec e3       	ldi	r30, 0x3C	; 60
    f272:	f9 e7       	ldi	r31, 0x79	; 121
    f274:	0c 94 1f e8 	jmp	0x1d03e	; 0x1d03e <__prologue_saves__+0x18>
    f278:	69 83       	std	Y+1, r22	; 0x01
    f27a:	7a 83       	std	Y+2, r23	; 0x02
    f27c:	8b 83       	std	Y+3, r24	; 0x03
    f27e:	9c 83       	std	Y+4, r25	; 0x04
    f280:	7a 01       	movw	r14, r20
    f282:	89 01       	movw	r16, r18
    f284:	ce 01       	movw	r24, r28
    f286:	01 96       	adiw	r24, 0x01	; 1
    f288:	0e 94 80 38 	call	0x7100	; 0x7100 <gmtime>
    f28c:	fc 01       	movw	r30, r24
    f28e:	22 85       	ldd	r18, Z+10	; 0x0a
    f290:	33 85       	ldd	r19, Z+11	; 0x0b
    f292:	20 55       	subi	r18, 0x50	; 80
    f294:	31 09       	sbc	r19, r1
    f296:	c9 01       	movw	r24, r18
    f298:	98 2f       	mov	r25, r24
    f29a:	88 27       	eor	r24, r24
    f29c:	99 0f       	add	r25, r25
    f29e:	20 85       	ldd	r18, Z+8	; 0x08
    f2a0:	31 85       	ldd	r19, Z+9	; 0x09
    f2a2:	2f 5f       	subi	r18, 0xFF	; 255
    f2a4:	3f 4f       	sbci	r19, 0xFF	; 255
    f2a6:	45 e0       	ldi	r20, 0x05	; 5
    f2a8:	22 0f       	add	r18, r18
    f2aa:	33 1f       	adc	r19, r19
    f2ac:	4a 95       	dec	r20
    f2ae:	e1 f7       	brne	.-8      	; 0xf2a8 <unix_time_to_fat+0x3c>
    f2b0:	28 2b       	or	r18, r24
    f2b2:	39 2b       	or	r19, r25
    f2b4:	86 81       	ldd	r24, Z+6	; 0x06
    f2b6:	97 81       	ldd	r25, Z+7	; 0x07
    f2b8:	28 2b       	or	r18, r24
    f2ba:	39 2b       	or	r19, r25
    f2bc:	d7 01       	movw	r26, r14
    f2be:	2d 93       	st	X+, r18
    f2c0:	3c 93       	st	X, r19
    f2c2:	84 81       	ldd	r24, Z+4	; 0x04
    f2c4:	20 e0       	ldi	r18, 0x00	; 0
    f2c6:	30 e0       	ldi	r19, 0x00	; 0
    f2c8:	38 2f       	mov	r19, r24
    f2ca:	33 0f       	add	r19, r19
    f2cc:	33 0f       	add	r19, r19
    f2ce:	33 0f       	add	r19, r19
    f2d0:	82 81       	ldd	r24, Z+2	; 0x02
    f2d2:	93 81       	ldd	r25, Z+3	; 0x03
    f2d4:	55 e0       	ldi	r21, 0x05	; 5
    f2d6:	88 0f       	add	r24, r24
    f2d8:	99 1f       	adc	r25, r25
    f2da:	5a 95       	dec	r21
    f2dc:	e1 f7       	brne	.-8      	; 0xf2d6 <unix_time_to_fat+0x6a>
    f2de:	82 2b       	or	r24, r18
    f2e0:	93 2b       	or	r25, r19
    f2e2:	20 81       	ld	r18, Z
    f2e4:	31 81       	ldd	r19, Z+1	; 0x01
    f2e6:	36 95       	lsr	r19
    f2e8:	27 95       	ror	r18
    f2ea:	82 2b       	or	r24, r18
    f2ec:	93 2b       	or	r25, r19
    f2ee:	f8 01       	movw	r30, r16
    f2f0:	91 83       	std	Z+1, r25	; 0x01
    f2f2:	80 83       	st	Z, r24
    f2f4:	24 96       	adiw	r28, 0x04	; 4
    f2f6:	e6 e0       	ldi	r30, 0x06	; 6
    f2f8:	0c 94 3b e8 	jmp	0x1d076	; 0x1d076 <__epilogue_restores__+0x18>

0000f2fc <utime>:
    f2fc:	aa e1       	ldi	r26, 0x1A	; 26
    f2fe:	b1 e0       	ldi	r27, 0x01	; 1
    f300:	e4 e8       	ldi	r30, 0x84	; 132
    f302:	f9 e7       	ldi	r31, 0x79	; 121
    f304:	0c 94 21 e8 	jmp	0x1d042	; 0x1d042 <__prologue_saves__+0x1c>
    f308:	8c 01       	movw	r16, r24
    f30a:	61 15       	cp	r22, r1
    f30c:	71 05       	cpc	r23, r1
    f30e:	31 f0       	breq	.+12     	; 0xf31c <utime+0x20>
    f310:	fb 01       	movw	r30, r22
    f312:	64 81       	ldd	r22, Z+4	; 0x04
    f314:	75 81       	ldd	r23, Z+5	; 0x05
    f316:	86 81       	ldd	r24, Z+6	; 0x06
    f318:	97 81       	ldd	r25, Z+7	; 0x07
    f31a:	04 c0       	rjmp	.+8      	; 0xf324 <utime+0x28>
    f31c:	80 e0       	ldi	r24, 0x00	; 0
    f31e:	90 e0       	ldi	r25, 0x00	; 0
    f320:	0e 94 db 38 	call	0x71b6	; 0x71b6 <time>
    f324:	9e 01       	movw	r18, r28
    f326:	29 5e       	subi	r18, 0xE9	; 233
    f328:	3e 4f       	sbci	r19, 0xFE	; 254
    f32a:	ae 01       	movw	r20, r28
    f32c:	47 5e       	subi	r20, 0xE7	; 231
    f32e:	5e 4f       	sbci	r21, 0xFE	; 254
    f330:	9d df       	rcall	.-198    	; 0xf26c <unix_time_to_fat>
    f332:	c7 5e       	subi	r28, 0xE7	; 231
    f334:	de 4f       	sbci	r29, 0xFE	; 254
    f336:	88 81       	ld	r24, Y
    f338:	99 81       	ldd	r25, Y+1	; 0x01
    f33a:	c9 51       	subi	r28, 0x19	; 25
    f33c:	d1 40       	sbci	r29, 0x01	; 1
    f33e:	9e 83       	std	Y+6, r25	; 0x06
    f340:	8d 83       	std	Y+5, r24	; 0x05
    f342:	c9 5e       	subi	r28, 0xE9	; 233
    f344:	de 4f       	sbci	r29, 0xFE	; 254
    f346:	88 81       	ld	r24, Y
    f348:	99 81       	ldd	r25, Y+1	; 0x01
    f34a:	c7 51       	subi	r28, 0x17	; 23
    f34c:	d1 40       	sbci	r29, 0x01	; 1
    f34e:	98 87       	std	Y+8, r25	; 0x08
    f350:	8f 83       	std	Y+7, r24	; 0x07
    f352:	be 01       	movw	r22, r28
    f354:	6f 5f       	subi	r22, 0xFF	; 255
    f356:	7f 4f       	sbci	r23, 0xFF	; 255
    f358:	c8 01       	movw	r24, r16
    f35a:	0e 94 25 68 	call	0xd04a	; 0xd04a <f_utime>
    f35e:	84 31       	cpi	r24, 0x14	; 20
    f360:	91 05       	cpc	r25, r1
    f362:	40 f4       	brcc	.+16     	; 0xf374 <utime+0x78>
    f364:	fc 01       	movw	r30, r24
    f366:	ec 5f       	subi	r30, 0xFC	; 252
    f368:	f8 4f       	sbci	r31, 0xF8	; 248
    f36a:	80 81       	ld	r24, Z
    f36c:	08 2e       	mov	r0, r24
    f36e:	00 0c       	add	r0, r0
    f370:	99 0b       	sbc	r25, r25
    f372:	02 c0       	rjmp	.+4      	; 0xf378 <utime+0x7c>
    f374:	83 e2       	ldi	r24, 0x23	; 35
    f376:	90 e0       	ldi	r25, 0x00	; 0
    f378:	c6 5e       	subi	r28, 0xE6	; 230
    f37a:	de 4f       	sbci	r29, 0xFE	; 254
    f37c:	e4 e0       	ldi	r30, 0x04	; 4
    f37e:	0c 94 3d e8 	jmp	0x1d07a	; 0x1d07a <__epilogue_restores__+0x1c>

0000f382 <fileno_to_fatfs>:
    f382:	83 30       	cpi	r24, 0x03	; 3
    f384:	91 05       	cpc	r25, r1
    f386:	48 f4       	brcc	.+18     	; 0xf39a <fileno_to_fatfs+0x18>
    f388:	89 e0       	ldi	r24, 0x09	; 9
    f38a:	90 e0       	ldi	r25, 0x00	; 0
    f38c:	90 93 cd 1c 	sts	0x1CCD, r25	; 0x801ccd <errno+0x1>
    f390:	80 93 cc 1c 	sts	0x1CCC, r24	; 0x801ccc <errno>
    f394:	80 e0       	ldi	r24, 0x00	; 0
    f396:	90 e0       	ldi	r25, 0x00	; 0
    f398:	08 95       	ret
    f39a:	78 dc       	rcall	.-1808   	; 0xec8c <fileno_to_stream>
    f39c:	00 97       	sbiw	r24, 0x00	; 0
    f39e:	d1 f3       	breq	.-12     	; 0xf394 <fileno_to_fatfs+0x12>
    f3a0:	fc 01       	movw	r30, r24
    f3a2:	84 85       	ldd	r24, Z+12	; 0x0c
    f3a4:	95 85       	ldd	r25, Z+13	; 0x0d
    f3a6:	00 97       	sbiw	r24, 0x00	; 0
    f3a8:	79 f3       	breq	.-34     	; 0xf388 <fileno_to_fatfs+0x6>
    f3aa:	08 95       	ret

0000f3ac <ftell>:
    f3ac:	10 92 cd 1c 	sts	0x1CCD, r1	; 0x801ccd <errno+0x1>
    f3b0:	10 92 cc 1c 	sts	0x1CCC, r1	; 0x801ccc <errno>
    f3b4:	4f dc       	rcall	.-1890   	; 0xec54 <fileno>
    f3b6:	83 30       	cpi	r24, 0x03	; 3
    f3b8:	91 05       	cpc	r25, r1
    f3ba:	48 f0       	brcs	.+18     	; 0xf3ce <ftell+0x22>
    f3bc:	e2 df       	rcall	.-60     	; 0xf382 <fileno_to_fatfs>
    f3be:	00 97       	sbiw	r24, 0x00	; 0
    f3c0:	51 f4       	brne	.+20     	; 0xf3d6 <ftell+0x2a>
    f3c2:	89 e0       	ldi	r24, 0x09	; 9
    f3c4:	90 e0       	ldi	r25, 0x00	; 0
    f3c6:	90 93 cd 1c 	sts	0x1CCD, r25	; 0x801ccd <errno+0x1>
    f3ca:	80 93 cc 1c 	sts	0x1CCC, r24	; 0x801ccc <errno>
    f3ce:	6f ef       	ldi	r22, 0xFF	; 255
    f3d0:	7f ef       	ldi	r23, 0xFF	; 255
    f3d2:	cb 01       	movw	r24, r22
    f3d4:	08 95       	ret
    f3d6:	fc 01       	movw	r30, r24
    f3d8:	60 89       	ldd	r22, Z+16	; 0x10
    f3da:	71 89       	ldd	r23, Z+17	; 0x11
    f3dc:	82 89       	ldd	r24, Z+18	; 0x12
    f3de:	93 89       	ldd	r25, Z+19	; 0x13
    f3e0:	08 95       	ret

0000f3e2 <lseek>:
    f3e2:	a0 e0       	ldi	r26, 0x00	; 0
    f3e4:	b0 e0       	ldi	r27, 0x00	; 0
    f3e6:	e7 ef       	ldi	r30, 0xF7	; 247
    f3e8:	f9 e7       	ldi	r31, 0x79	; 121
    f3ea:	0c 94 1b e8 	jmp	0x1d036	; 0x1d036 <__prologue_saves__+0x10>
    f3ee:	5c 01       	movw	r10, r24
    f3f0:	6a 01       	movw	r12, r20
    f3f2:	7b 01       	movw	r14, r22
    f3f4:	89 01       	movw	r16, r18
    f3f6:	10 92 cd 1c 	sts	0x1CCD, r1	; 0x801ccd <errno+0x1>
    f3fa:	10 92 cc 1c 	sts	0x1CCC, r1	; 0x801ccc <errno>
    f3fe:	c1 df       	rcall	.-126    	; 0xf382 <fileno_to_fatfs>
    f400:	ec 01       	movw	r28, r24
    f402:	89 2b       	or	r24, r25
    f404:	19 f4       	brne	.+6      	; 0xf40c <lseek+0x2a>
    f406:	88 e1       	ldi	r24, 0x18	; 24
    f408:	90 e0       	ldi	r25, 0x00	; 0
    f40a:	26 c0       	rjmp	.+76     	; 0xf458 <lseek+0x76>
    f40c:	83 e0       	ldi	r24, 0x03	; 3
    f40e:	a8 16       	cp	r10, r24
    f410:	b1 04       	cpc	r11, r1
    f412:	d0 f1       	brcs	.+116    	; 0xf488 <lseek+0xa6>
    f414:	c5 01       	movw	r24, r10
    f416:	3a dc       	rcall	.-1932   	; 0xec8c <fileno_to_stream>
    f418:	fc 01       	movw	r30, r24
    f41a:	93 81       	ldd	r25, Z+3	; 0x03
    f41c:	90 64       	ori	r25, 0x40	; 64
    f41e:	93 83       	std	Z+3, r25	; 0x03
    f420:	02 30       	cpi	r16, 0x02	; 2
    f422:	11 05       	cpc	r17, r1
    f424:	a9 f5       	brne	.+106    	; 0xf490 <lseek+0xae>
    f426:	8a 85       	ldd	r24, Y+10	; 0x0a
    f428:	9b 85       	ldd	r25, Y+11	; 0x0b
    f42a:	ac 85       	ldd	r26, Y+12	; 0x0c
    f42c:	bd 85       	ldd	r27, Y+13	; 0x0d
    f42e:	c8 0e       	add	r12, r24
    f430:	d9 1e       	adc	r13, r25
    f432:	ea 1e       	adc	r14, r26
    f434:	fb 1e       	adc	r15, r27
    f436:	b7 01       	movw	r22, r14
    f438:	a6 01       	movw	r20, r12
    f43a:	ce 01       	movw	r24, r28
    f43c:	0e 94 0d 60 	call	0xc01a	; 0xc01a <f_lseek>
    f440:	00 97       	sbiw	r24, 0x00	; 0
    f442:	79 f0       	breq	.+30     	; 0xf462 <lseek+0x80>
    f444:	84 31       	cpi	r24, 0x14	; 20
    f446:	91 05       	cpc	r25, r1
    f448:	58 f5       	brcc	.+86     	; 0xf4a0 <lseek+0xbe>
    f44a:	fc 01       	movw	r30, r24
    f44c:	ec 5f       	subi	r30, 0xFC	; 252
    f44e:	f8 4f       	sbci	r31, 0xF8	; 248
    f450:	80 81       	ld	r24, Z
    f452:	08 2e       	mov	r0, r24
    f454:	00 0c       	add	r0, r0
    f456:	99 0b       	sbc	r25, r25
    f458:	90 93 cd 1c 	sts	0x1CCD, r25	; 0x801ccd <errno+0x1>
    f45c:	80 93 cc 1c 	sts	0x1CCC, r24	; 0x801ccc <errno>
    f460:	13 c0       	rjmp	.+38     	; 0xf488 <lseek+0xa6>
    f462:	68 89       	ldd	r22, Y+16	; 0x10
    f464:	79 89       	ldd	r23, Y+17	; 0x11
    f466:	8a 89       	ldd	r24, Y+18	; 0x12
    f468:	9b 89       	ldd	r25, Y+19	; 0x13
    f46a:	c6 16       	cp	r12, r22
    f46c:	d7 06       	cpc	r13, r23
    f46e:	e8 06       	cpc	r14, r24
    f470:	f9 06       	cpc	r15, r25
    f472:	c9 f0       	breq	.+50     	; 0xf4a6 <lseek+0xc4>
    f474:	8a e5       	ldi	r24, 0x5A	; 90
    f476:	9c e0       	ldi	r25, 0x0C	; 12
    f478:	1f 92       	push	r1
    f47a:	9f 93       	push	r25
    f47c:	8f 93       	push	r24
    f47e:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    f482:	0f 90       	pop	r0
    f484:	0f 90       	pop	r0
    f486:	0f 90       	pop	r0
    f488:	6f ef       	ldi	r22, 0xFF	; 255
    f48a:	7f ef       	ldi	r23, 0xFF	; 255
    f48c:	cb 01       	movw	r24, r22
    f48e:	0b c0       	rjmp	.+22     	; 0xf4a6 <lseek+0xc4>
    f490:	01 30       	cpi	r16, 0x01	; 1
    f492:	11 05       	cpc	r17, r1
    f494:	81 f6       	brne	.-96     	; 0xf436 <lseek+0x54>
    f496:	88 89       	ldd	r24, Y+16	; 0x10
    f498:	99 89       	ldd	r25, Y+17	; 0x11
    f49a:	aa 89       	ldd	r26, Y+18	; 0x12
    f49c:	bb 89       	ldd	r27, Y+19	; 0x13
    f49e:	c7 cf       	rjmp	.-114    	; 0xf42e <lseek+0x4c>
    f4a0:	83 e2       	ldi	r24, 0x23	; 35
    f4a2:	90 e0       	ldi	r25, 0x00	; 0
    f4a4:	d9 cf       	rjmp	.-78     	; 0xf458 <lseek+0x76>
    f4a6:	cd b7       	in	r28, 0x3d	; 61
    f4a8:	de b7       	in	r29, 0x3e	; 62
    f4aa:	ea e0       	ldi	r30, 0x0A	; 10
    f4ac:	0c 94 37 e8 	jmp	0x1d06e	; 0x1d06e <__epilogue_restores__+0x10>

0000f4b0 <fseek>:
    f4b0:	cf 92       	push	r12
    f4b2:	df 92       	push	r13
    f4b4:	ef 92       	push	r14
    f4b6:	ff 92       	push	r15
    f4b8:	cf 93       	push	r28
    f4ba:	df 93       	push	r29
    f4bc:	6a 01       	movw	r12, r20
    f4be:	7b 01       	movw	r14, r22
    f4c0:	e9 01       	movw	r28, r18
    f4c2:	c8 db       	rcall	.-2160   	; 0xec54 <fileno>
    f4c4:	97 fd       	sbrc	r25, 7
    f4c6:	12 c0       	rjmp	.+36     	; 0xf4ec <fseek+0x3c>
    f4c8:	9e 01       	movw	r18, r28
    f4ca:	b7 01       	movw	r22, r14
    f4cc:	a6 01       	movw	r20, r12
    f4ce:	89 df       	rcall	.-238    	; 0xf3e2 <lseek>
    f4d0:	21 e0       	ldi	r18, 0x01	; 1
    f4d2:	30 e0       	ldi	r19, 0x00	; 0
    f4d4:	6f 3f       	cpi	r22, 0xFF	; 255
    f4d6:	7f 4f       	sbci	r23, 0xFF	; 255
    f4d8:	8f 4f       	sbci	r24, 0xFF	; 255
    f4da:	9f 4f       	sbci	r25, 0xFF	; 255
    f4dc:	11 f0       	breq	.+4      	; 0xf4e2 <fseek+0x32>
    f4de:	20 e0       	ldi	r18, 0x00	; 0
    f4e0:	30 e0       	ldi	r19, 0x00	; 0
    f4e2:	88 27       	eor	r24, r24
    f4e4:	99 27       	eor	r25, r25
    f4e6:	82 1b       	sub	r24, r18
    f4e8:	93 0b       	sbc	r25, r19
    f4ea:	02 c0       	rjmp	.+4      	; 0xf4f0 <fseek+0x40>
    f4ec:	8f ef       	ldi	r24, 0xFF	; 255
    f4ee:	9f ef       	ldi	r25, 0xFF	; 255
    f4f0:	df 91       	pop	r29
    f4f2:	cf 91       	pop	r28
    f4f4:	ff 90       	pop	r15
    f4f6:	ef 90       	pop	r14
    f4f8:	df 90       	pop	r13
    f4fa:	cf 90       	pop	r12
    f4fc:	08 95       	ret

0000f4fe <read>:
///
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t read(int fd, const void *buf, size_t count)
{
    f4fe:	a2 e0       	ldi	r26, 0x02	; 2
    f500:	b0 e0       	ldi	r27, 0x00	; 0
    f502:	e5 e8       	ldi	r30, 0x85	; 133
    f504:	fa e7       	ldi	r31, 0x7A	; 122
    f506:	0c 94 1b e8 	jmp	0x1d036	; 0x1d036 <__prologue_saves__+0x10>
    f50a:	5c 01       	movw	r10, r24
    f50c:	8b 01       	movw	r16, r22
    f50e:	6a 01       	movw	r12, r20
    int ret;
    FIL *fh;
    FILE *stream;

    //FIXME
    *(char *) buf = 0;
    f510:	fb 01       	movw	r30, r22
    f512:	10 82       	st	Z, r1

    errno = 0;
    f514:	10 92 cd 1c 	sts	0x1CCD, r1	; 0x801ccd <errno+0x1>
    f518:	10 92 cc 1c 	sts	0x1CCC, r1	; 0x801ccc <errno>

    // TTY read function
    // FIXME should we really be blocking ???
    stream = fileno_to_stream(fd);
    f51c:	b7 db       	rcall	.-2194   	; 0xec8c <fileno_to_stream>
    if(stream == stdin)
    f51e:	7c 01       	movw	r14, r24
    f520:	80 91 ce 1c 	lds	r24, 0x1CCE	; 0x801cce <__iob>
    f524:	90 91 cf 1c 	lds	r25, 0x1CCF	; 0x801ccf <__iob+0x1>
    f528:	e8 16       	cp	r14, r24
    f52a:	f9 06       	cpc	r15, r25
    {
        char *ptr = (char *) buf;
        // ungetc is undefined for read
        stream->flags |= __SUNGET;
    f52c:	c9 f4       	brne	.+50     	; 0xf560 <read+0x62>
    f52e:	f7 01       	movw	r30, r14
    f530:	83 81       	ldd	r24, Z+3	; 0x03
    f532:	80 64       	ori	r24, 0x40	; 64
        size = 0;
    f534:	83 83       	std	Z+3, r24	; 0x03
    f536:	1a 82       	std	Y+2, r1	; 0x02
    f538:	19 82       	std	Y+1, r1	; 0x01
    f53a:	c0 0e       	add	r12, r16
        while(count--)
    f53c:	d1 1e       	adc	r13, r17
    f53e:	0c 15       	cp	r16, r12
    f540:	1d 05       	cpc	r17, r13
        {
            ret = fgetc(stream);
    f542:	09 f4       	brne	.+2      	; 0xf546 <read+0x48>
    f544:	3d c0       	rjmp	.+122    	; 0xf5c0 <read+0xc2>
            if(ret < 0)
    f546:	c7 01       	movw	r24, r14
    f548:	6b da       	rcall	.-2858   	; 0xea20 <fgetc>
                break;
            
            *ptr++ = ret;
    f54a:	97 fd       	sbrc	r25, 7
    f54c:	39 c0       	rjmp	.+114    	; 0xf5c0 <read+0xc2>
    f54e:	f8 01       	movw	r30, r16
            ++size;
    f550:	81 93       	st	Z+, r24
    f552:	8f 01       	movw	r16, r30
    f554:	89 81       	ldd	r24, Y+1	; 0x01
    f556:	9a 81       	ldd	r25, Y+2	; 0x02
    f558:	01 96       	adiw	r24, 0x01	; 1
    f55a:	9a 83       	std	Y+2, r25	; 0x02
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    f55c:	89 83       	std	Y+1, r24	; 0x01
    f55e:	ef cf       	rjmp	.-34     	; 0xf53e <read+0x40>
    f560:	80 91 d0 1c 	lds	r24, 0x1CD0	; 0x801cd0 <__iob+0x2>
    f564:	90 91 d1 1c 	lds	r25, 0x1CD1	; 0x801cd1 <__iob+0x3>
    f568:	e8 16       	cp	r14, r24
    f56a:	f9 06       	cpc	r15, r25
    f56c:	71 f1       	breq	.+92     	; 0xf5ca <read+0xcc>
    f56e:	80 91 d2 1c 	lds	r24, 0x1CD2	; 0x801cd2 <__iob+0x4>
    f572:	90 91 d3 1c 	lds	r25, 0x1CD3	; 0x801cd3 <__iob+0x5>
    {
        return(-1);
    }

    // fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f576:	e8 16       	cp	r14, r24
    f578:	f9 06       	cpc	r15, r25
    f57a:	39 f1       	breq	.+78     	; 0xf5ca <read+0xcc>
    if ( fh == NULL )
    f57c:	c5 01       	movw	r24, r10
    f57e:	01 df       	rcall	.-510    	; 0xf382 <fileno_to_fatfs>
    {
        errno = EBADF;
    f580:	00 97       	sbiw	r24, 0x00	; 0
    f582:	19 f4       	brne	.+6      	; 0xf58a <read+0x8c>
    f584:	89 e0       	ldi	r24, 0x09	; 9
        return(-1);
    }

    res = f_read(fh, (void *) buf, bytes, &size);
    f586:	90 e0       	ldi	r25, 0x00	; 0
    f588:	16 c0       	rjmp	.+44     	; 0xf5b6 <read+0xb8>
    f58a:	9e 01       	movw	r18, r28
    f58c:	2f 5f       	subi	r18, 0xFF	; 255
    f58e:	3f 4f       	sbci	r19, 0xFF	; 255
    f590:	a6 01       	movw	r20, r12
    f592:	b8 01       	movw	r22, r16
    if(res != FR_OK)
    f594:	0e 94 03 5b 	call	0xb606	; 0xb606 <f_read>
    f598:	00 97       	sbiw	r24, 0x00	; 0
    f59a:	91 f0       	breq	.+36     	; 0xf5c0 <read+0xc2>
    f59c:	84 31       	cpi	r24, 0x14	; 20
    f59e:	91 05       	cpc	r25, r1
    f5a0:	40 f4       	brcc	.+16     	; 0xf5b2 <read+0xb4>
    f5a2:	fc 01       	movw	r30, r24
    f5a4:	ec 5f       	subi	r30, 0xFC	; 252
    f5a6:	f8 4f       	sbci	r31, 0xF8	; 248
    f5a8:	80 81       	ld	r24, Z
    f5aa:	08 2e       	mov	r0, r24
    f5ac:	00 0c       	add	r0, r0
    f5ae:	99 0b       	sbc	r25, r25
    f5b0:	02 c0       	rjmp	.+4      	; 0xf5b6 <read+0xb8>
    {
        errno = fatfs_to_errno(res);
    f5b2:	83 e2       	ldi	r24, 0x23	; 35
    f5b4:	90 e0       	ldi	r25, 0x00	; 0
    f5b6:	90 93 cd 1c 	sts	0x1CCD, r25	; 0x801ccd <errno+0x1>
    f5ba:	80 93 cc 1c 	sts	0x1CCC, r24	; 0x801ccc <errno>
        return(-1);
    }
    return ((ssize_t) size);
    f5be:	05 c0       	rjmp	.+10     	; 0xf5ca <read+0xcc>
    f5c0:	69 81       	ldd	r22, Y+1	; 0x01
    f5c2:	7a 81       	ldd	r23, Y+2	; 0x02
    f5c4:	80 e0       	ldi	r24, 0x00	; 0
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    {
        return(-1);
    f5c6:	90 e0       	ldi	r25, 0x00	; 0
    f5c8:	03 c0       	rjmp	.+6      	; 0xf5d0 <read+0xd2>
    f5ca:	6f ef       	ldi	r22, 0xFF	; 255
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    f5cc:	7f ef       	ldi	r23, 0xFF	; 255
    f5ce:	cb 01       	movw	r24, r22
    f5d0:	22 96       	adiw	r28, 0x02	; 2
    f5d2:	ea e0       	ldi	r30, 0x0A	; 10
    f5d4:	0c 94 37 e8 	jmp	0x1d06e	; 0x1d06e <__epilogue_restores__+0x10>

0000f5d8 <fread>:
///
/// @return count on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    f5d8:	0f 93       	push	r16
    f5da:	1f 93       	push	r17
    f5dc:	cf 93       	push	r28
    f5de:	df 93       	push	r29
    f5e0:	ec 01       	movw	r28, r24
    f5e2:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    f5e4:	64 9f       	mul	r22, r20
    f5e6:	80 01       	movw	r16, r0
    f5e8:	65 9f       	mul	r22, r21
    f5ea:	10 0d       	add	r17, r0
    f5ec:	74 9f       	mul	r23, r20
    f5ee:	10 0d       	add	r17, r0
    int fn = fileno(stream);
    f5f0:	11 24       	eor	r1, r1
    ssize_t ret;

    // read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    f5f2:	30 db       	rcall	.-2464   	; 0xec54 <fileno>
    f5f4:	a8 01       	movw	r20, r16
    f5f6:	be 01       	movw	r22, r28
    if(ret < 0)
    f5f8:	82 df       	rcall	.-252    	; 0xf4fe <read>
    f5fa:	97 fd       	sbrc	r25, 7
        return(0);

    return((size_t) ret);
    f5fc:	02 c0       	rjmp	.+4      	; 0xf602 <fread+0x2a>
    f5fe:	cb 01       	movw	r24, r22
    ssize_t ret;

    // read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    if(ret < 0)
        return(0);
    f600:	02 c0       	rjmp	.+4      	; 0xf606 <fread+0x2e>
    f602:	80 e0       	ldi	r24, 0x00	; 0

    return((size_t) ret);
}
    f604:	90 e0       	ldi	r25, 0x00	; 0
    f606:	df 91       	pop	r29
    f608:	cf 91       	pop	r28
    f60a:	1f 91       	pop	r17
    f60c:	0f 91       	pop	r16
    f60e:	08 95       	ret

0000f610 <syncfs>:
/// @param[in] fd: POSIX fileno to sync.
/// @return 0.
/// @return -1 on error witrh errno set.
MEMSPACE
int syncfs(int fd)
{
    f610:	cf 93       	push	r28
    f612:	df 93       	push	r29
    FIL *fh;
    FRESULT res;
    FILE *stream;

    errno = 0;
    f614:	10 92 cd 1c 	sts	0x1CCD, r1	; 0x801ccd <errno+0x1>
    f618:	10 92 cc 1c 	sts	0x1CCC, r1	; 0x801ccc <errno>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f61c:	83 30       	cpi	r24, 0x03	; 3
    f61e:	91 05       	cpc	r25, r1
    f620:	18 f4       	brcc	.+6      	; 0xf628 <syncfs+0x18>

    // fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    if(fh == NULL)
    {
        errno = EBADF;
    f622:	89 e0       	ldi	r24, 0x09	; 9
    f624:	90 e0       	ldi	r25, 0x00	; 0
    f626:	18 c0       	rjmp	.+48     	; 0xf658 <syncfs+0x48>
    if(isatty(fd))
    {
        errno = EBADF;
        return(-1);
    }
    stream = fileno_to_stream(fd);
    f628:	ec 01       	movw	r28, r24
    f62a:	30 db       	rcall	.-2464   	; 0xec8c <fileno_to_stream>
    // reset unget on sync
    stream->flags |= __SUNGET;
    f62c:	fc 01       	movw	r30, r24
    f62e:	93 81       	ldd	r25, Z+3	; 0x03

    // fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f630:	90 64       	ori	r25, 0x40	; 64
    f632:	93 83       	std	Z+3, r25	; 0x03
    if(fh == NULL)
    f634:	ce 01       	movw	r24, r28
    f636:	a5 de       	rcall	.-694    	; 0xf382 <fileno_to_fatfs>
    {
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    f638:	00 97       	sbiw	r24, 0x00	; 0
    f63a:	99 f3       	breq	.-26     	; 0xf622 <syncfs+0x12>
    if (res != FR_OK)
    f63c:	0e 94 e5 5d 	call	0xbbca	; 0xbbca <f_sync>
    f640:	00 97       	sbiw	r24, 0x00	; 0
    f642:	a1 f0       	breq	.+40     	; 0xf66c <syncfs+0x5c>
    f644:	84 31       	cpi	r24, 0x14	; 20
    f646:	91 05       	cpc	r25, r1
    f648:	70 f4       	brcc	.+28     	; 0xf666 <syncfs+0x56>
    f64a:	fc 01       	movw	r30, r24
    f64c:	ec 5f       	subi	r30, 0xFC	; 252
    f64e:	f8 4f       	sbci	r31, 0xF8	; 248
    f650:	80 81       	ld	r24, Z
    f652:	08 2e       	mov	r0, r24
    {
        errno = fatfs_to_errno(res);
    f654:	00 0c       	add	r0, r0
    f656:	99 0b       	sbc	r25, r25
    f658:	90 93 cd 1c 	sts	0x1CCD, r25	; 0x801ccd <errno+0x1>
        return(-1);
    f65c:	80 93 cc 1c 	sts	0x1CCC, r24	; 0x801ccc <errno>
    f660:	8f ef       	ldi	r24, 0xFF	; 255
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    if (res != FR_OK)
    f662:	9f ef       	ldi	r25, 0xFF	; 255
    f664:	05 c0       	rjmp	.+10     	; 0xf670 <syncfs+0x60>
    f666:	83 e2       	ldi	r24, 0x23	; 35
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return(0);
    f668:	90 e0       	ldi	r25, 0x00	; 0
    f66a:	f6 cf       	rjmp	.-20     	; 0xf658 <syncfs+0x48>
}
    f66c:	80 e0       	ldi	r24, 0x00	; 0
    f66e:	90 e0       	ldi	r25, 0x00	; 0
    f670:	df 91       	pop	r29
    f672:	cf 91       	pop	r28
    f674:	08 95       	ret

0000f676 <sync>:
/// - man page sync (2).
///
/// @return  void.
MEMSPACE
void sync(void)
{
    f676:	cf 93       	push	r28
    f678:	df 93       	push	r29
    FIL *fh;
    int i;

    for(i=0;i<MAX_FILES;++i)
    f67a:	c0 e0       	ldi	r28, 0x00	; 0
    f67c:	d0 e0       	ldi	r29, 0x00	; 0
    f67e:	21 96       	adiw	r28, 0x01	; 1
    f680:	c0 31       	cpi	r28, 0x10	; 16
    f682:	d1 05       	cpc	r29, r1
    f684:	51 f0       	breq	.+20     	; 0xf69a <sync+0x24>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f686:	c3 30       	cpi	r28, 0x03	; 3
    f688:	d1 05       	cpc	r29, r1
    f68a:	cc f3       	brlt	.-14     	; 0xf67e <sync+0x8>
    {
        if(isatty(i))
            continue;

        // fileno_to_fatfs checks for i out of bounds
        fh = fileno_to_fatfs(i);
    f68c:	ce 01       	movw	r24, r28
    f68e:	79 de       	rcall	.-782    	; 0xf382 <fileno_to_fatfs>
        if(fh == NULL)
    f690:	89 2b       	or	r24, r25
            continue;

        (void ) syncfs(i);
    f692:	a9 f3       	breq	.-22     	; 0xf67e <sync+0x8>
    f694:	ce 01       	movw	r24, r28
    f696:	bc df       	rcall	.-136    	; 0xf610 <syncfs>
    }
}
    f698:	f2 cf       	rjmp	.-28     	; 0xf67e <sync+0x8>
    f69a:	df 91       	pop	r29
    f69c:	cf 91       	pop	r28
    f69e:	08 95       	ret

0000f6a0 <write>:
/// @param[in] count: number of bytes to write.
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t write(int fd, const void *buf, size_t count)
{
    f6a0:	a2 e0       	ldi	r26, 0x02	; 2
    f6a2:	b0 e0       	ldi	r27, 0x00	; 0
    f6a4:	e6 e5       	ldi	r30, 0x56	; 86
    f6a6:	fb e7       	ldi	r31, 0x7B	; 123
    f6a8:	0c 94 19 e8 	jmp	0x1d032	; 0x1d032 <__prologue_saves__+0xc>
    f6ac:	8c 01       	movw	r16, r24
    f6ae:	b6 2e       	mov	r11, r22
    f6b0:	f7 2e       	mov	r15, r23
    f6b2:	4a 01       	movw	r8, r20
    UINT size;
    UINT bytes = count;
    FRESULT res;
    FIL *fh;
    FILE *stream;
    errno = 0;
    f6b4:	10 92 cd 1c 	sts	0x1CCD, r1	; 0x801ccd <errno+0x1>
    f6b8:	10 92 cc 1c 	sts	0x1CCC, r1	; 0x801ccc <errno>

    // TTY read function
    stream = fileno_to_stream(fd);
    f6bc:	e7 da       	rcall	.-2610   	; 0xec8c <fileno_to_stream>
    if(stream == stdout || stream == stderr)
    f6be:	6c 01       	movw	r12, r24
    f6c0:	80 91 d0 1c 	lds	r24, 0x1CD0	; 0x801cd0 <__iob+0x2>
    f6c4:	90 91 d1 1c 	lds	r25, 0x1CD1	; 0x801cd1 <__iob+0x3>
    f6c8:	c8 16       	cp	r12, r24
    f6ca:	d9 06       	cpc	r13, r25
    f6cc:	39 f0       	breq	.+14     	; 0xf6dc <write+0x3c>
    f6ce:	80 91 d2 1c 	lds	r24, 0x1CD2	; 0x801cd2 <__iob+0x4>
    f6d2:	90 91 d3 1c 	lds	r25, 0x1CD3	; 0x801cd3 <__iob+0x5>
    f6d6:	c8 16       	cp	r12, r24
    f6d8:	d9 06       	cpc	r13, r25
    {
        char *ptr = (char *) buf;   
        size = 0;
    f6da:	d1 f4       	brne	.+52     	; 0xf710 <write+0x70>
    f6dc:	1a 82       	std	Y+2, r1	; 0x02
    f6de:	19 82       	std	Y+1, r1	; 0x01
    f6e0:	0b 2d       	mov	r16, r11
    f6e2:	1f 2d       	mov	r17, r15
    f6e4:	78 01       	movw	r14, r16
    f6e6:	e8 0c       	add	r14, r8
        while(count--)
    f6e8:	f9 1c       	adc	r15, r9
    f6ea:	0e 15       	cp	r16, r14
    f6ec:	1f 05       	cpc	r17, r15
        {
            int c,ret;
            c = *ptr++;
    f6ee:	d1 f1       	breq	.+116    	; 0xf764 <write+0xc4>
    f6f0:	f8 01       	movw	r30, r16
    f6f2:	a1 90       	ld	r10, Z+
    f6f4:	8f 01       	movw	r16, r30
            ret = fputc(c, stream);
    f6f6:	b1 2c       	mov	r11, r1
    f6f8:	b6 01       	movw	r22, r12
    f6fa:	c5 01       	movw	r24, r10
            if(c != ret)
    f6fc:	e2 d9       	rcall	.-3132   	; 0xeac2 <fputc>
    f6fe:	a8 16       	cp	r10, r24
    f700:	b9 06       	cpc	r11, r25
                break;

            ++size;
    f702:	81 f5       	brne	.+96     	; 0xf764 <write+0xc4>
    f704:	89 81       	ldd	r24, Y+1	; 0x01
    f706:	9a 81       	ldd	r25, Y+2	; 0x02
    f708:	01 96       	adiw	r24, 0x01	; 1
    f70a:	9a 83       	std	Y+2, r25	; 0x02
    f70c:	89 83       	std	Y+1, r24	; 0x01
        }
        return(size);
    }
    if(stream == stdin)
    f70e:	ed cf       	rjmp	.-38     	; 0xf6ea <write+0x4a>
    f710:	80 91 ce 1c 	lds	r24, 0x1CCE	; 0x801cce <__iob>
    f714:	90 91 cf 1c 	lds	r25, 0x1CCF	; 0x801ccf <__iob+0x1>
    f718:	c8 16       	cp	r12, r24
    {
        return(-1);
    }

    // fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f71a:	d9 06       	cpc	r13, r25
    f71c:	41 f1       	breq	.+80     	; 0xf76e <write+0xce>
    f71e:	c8 01       	movw	r24, r16
    if ( fh == NULL )
    f720:	30 de       	rcall	.-928    	; 0xf382 <fileno_to_fatfs>
    f722:	00 97       	sbiw	r24, 0x00	; 0
    {
        errno = EBADF;
    f724:	19 f4       	brne	.+6      	; 0xf72c <write+0x8c>
    f726:	89 e0       	ldi	r24, 0x09	; 9
    f728:	90 e0       	ldi	r25, 0x00	; 0
        return(-1);
    }

    res = f_write(fh, buf, bytes, &size);
    f72a:	17 c0       	rjmp	.+46     	; 0xf75a <write+0xba>
    f72c:	9e 01       	movw	r18, r28
    f72e:	2f 5f       	subi	r18, 0xFF	; 255
    f730:	3f 4f       	sbci	r19, 0xFF	; 255
    f732:	a4 01       	movw	r20, r8
    f734:	6b 2d       	mov	r22, r11
    f736:	7f 2d       	mov	r23, r15
    f738:	0e 94 4e 5c 	call	0xb89c	; 0xb89c <f_write>
    if(res != FR_OK)
    f73c:	00 97       	sbiw	r24, 0x00	; 0
    f73e:	91 f0       	breq	.+36     	; 0xf764 <write+0xc4>
    f740:	84 31       	cpi	r24, 0x14	; 20
    f742:	91 05       	cpc	r25, r1
    f744:	40 f4       	brcc	.+16     	; 0xf756 <write+0xb6>
    f746:	fc 01       	movw	r30, r24
    f748:	ec 5f       	subi	r30, 0xFC	; 252
    f74a:	f8 4f       	sbci	r31, 0xF8	; 248
    f74c:	80 81       	ld	r24, Z
    f74e:	08 2e       	mov	r0, r24
    f750:	00 0c       	add	r0, r0
    f752:	99 0b       	sbc	r25, r25
    f754:	02 c0       	rjmp	.+4      	; 0xf75a <write+0xba>
    f756:	83 e2       	ldi	r24, 0x23	; 35
    {
        errno = fatfs_to_errno(res);
    f758:	90 e0       	ldi	r25, 0x00	; 0
    f75a:	90 93 cd 1c 	sts	0x1CCD, r25	; 0x801ccd <errno+0x1>
    f75e:	80 93 cc 1c 	sts	0x1CCC, r24	; 0x801ccc <errno>
        return(-1);
    }
    return ((ssize_t) size);
    f762:	05 c0       	rjmp	.+10     	; 0xf76e <write+0xce>
    f764:	69 81       	ldd	r22, Y+1	; 0x01
    f766:	7a 81       	ldd	r23, Y+2	; 0x02
    f768:	80 e0       	ldi	r24, 0x00	; 0
    f76a:	90 e0       	ldi	r25, 0x00	; 0
        }
        return(size);
    }
    if(stream == stdin)
    {
        return(-1);
    f76c:	03 c0       	rjmp	.+6      	; 0xf774 <write+0xd4>
    f76e:	6f ef       	ldi	r22, 0xFF	; 255
    f770:	7f ef       	ldi	r23, 0xFF	; 255
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    f772:	cb 01       	movw	r24, r22
    f774:	22 96       	adiw	r28, 0x02	; 2
    f776:	ec e0       	ldi	r30, 0x0C	; 12
    f778:	0c 94 35 e8 	jmp	0x1d06a	; 0x1d06a <__epilogue_restores__+0xc>

0000f77c <fwrite>:
///
/// @return count written on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    f77c:	0f 93       	push	r16
    f77e:	1f 93       	push	r17
    f780:	cf 93       	push	r28
    f782:	df 93       	push	r29
    f784:	ec 01       	movw	r28, r24
    f786:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    f788:	64 9f       	mul	r22, r20
    f78a:	80 01       	movw	r16, r0
    f78c:	65 9f       	mul	r22, r21
    f78e:	10 0d       	add	r17, r0
    f790:	74 9f       	mul	r23, r20
    f792:	10 0d       	add	r17, r0
    int fn = fileno(stream);
    f794:	11 24       	eor	r1, r1
    ssize_t ret;
    
    // write () checks for fn out of bounds
    ret =  write(fn, ptr, count);
    f796:	5e da       	rcall	.-2884   	; 0xec54 <fileno>
    f798:	a8 01       	movw	r20, r16
    f79a:	be 01       	movw	r22, r28

    if(ret < 0)
    f79c:	81 df       	rcall	.-254    	; 0xf6a0 <write>
    f79e:	97 fd       	sbrc	r25, 7
        return(0);

    return((size_t) ret);
    f7a0:	02 c0       	rjmp	.+4      	; 0xf7a6 <fwrite+0x2a>
    f7a2:	cb 01       	movw	r24, r22
    
    // write () checks for fn out of bounds
    ret =  write(fn, ptr, count);

    if(ret < 0)
        return(0);
    f7a4:	02 c0       	rjmp	.+4      	; 0xf7aa <fwrite+0x2e>
    f7a6:	80 e0       	ldi	r24, 0x00	; 0

    return((size_t) ret);
}
    f7a8:	90 e0       	ldi	r25, 0x00	; 0
    f7aa:	df 91       	pop	r29
    f7ac:	cf 91       	pop	r28
    f7ae:	1f 91       	pop	r17
    f7b0:	0f 91       	pop	r16
    f7b2:	08 95       	ret

0000f7b4 <free_file_descriptor>:
///
/// @return fileno on success.
/// @return -1 on failure.
MEMSPACE
int free_file_descriptor(int fileno)
{
    f7b4:	0f 93       	push	r16
    f7b6:	1f 93       	push	r17
    f7b8:	cf 93       	push	r28
    f7ba:	df 93       	push	r29
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f7bc:	83 30       	cpi	r24, 0x03	; 3
    f7be:	91 05       	cpc	r25, r1
    f7c0:	48 f4       	brcc	.+18     	; 0xf7d4 <free_file_descriptor+0x20>
    FILE *stream;
    FIL *fh;

    if(isatty( fileno ))
    {
        errno = EBADF;
    f7c2:	89 e0       	ldi	r24, 0x09	; 9
    f7c4:	90 e0       	ldi	r25, 0x00	; 0
    f7c6:	90 93 cd 1c 	sts	0x1CCD, r25	; 0x801ccd <errno+0x1>
    f7ca:	80 93 cc 1c 	sts	0x1CCC, r24	; 0x801ccc <errno>
        return(-1);
    f7ce:	8f ef       	ldi	r24, 0xFF	; 255
    f7d0:	9f ef       	ldi	r25, 0xFF	; 255
    f7d2:	20 c0       	rjmp	.+64     	; 0xf814 <free_file_descriptor+0x60>
    }

    // checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    f7d4:	ec 01       	movw	r28, r24
    f7d6:	5a da       	rcall	.-2892   	; 0xec8c <fileno_to_stream>
    if(stream == NULL)
    f7d8:	8c 01       	movw	r16, r24
    f7da:	89 2b       	or	r24, r25
    {
        return(-1);
    }

    fh = fdev_get_udata(stream);
    f7dc:	c1 f3       	breq	.-16     	; 0xf7ce <free_file_descriptor+0x1a>
    f7de:	f8 01       	movw	r30, r16
    f7e0:	84 85       	ldd	r24, Z+12	; 0x0c

    if(fh != NULL)
    f7e2:	95 85       	ldd	r25, Z+13	; 0x0d
    f7e4:	00 97       	sbiw	r24, 0x00	; 0
    {
        safefree(fh);
    f7e6:	11 f0       	breq	.+4      	; 0xf7ec <free_file_descriptor+0x38>
    f7e8:	0e 94 50 2a 	call	0x54a0	; 0x54a0 <safefree>
    }

    if(stream->buf != NULL && stream->flags & __SMALLOC)
    f7ec:	f8 01       	movw	r30, r16
    f7ee:	80 81       	ld	r24, Z
    f7f0:	91 81       	ldd	r25, Z+1	; 0x01
    f7f2:	00 97       	sbiw	r24, 0x00	; 0
    f7f4:	21 f0       	breq	.+8      	; 0xf7fe <free_file_descriptor+0x4a>
    f7f6:	23 81       	ldd	r18, Z+3	; 0x03
    {
        safefree(stream->buf);
    f7f8:	27 fd       	sbrc	r18, 7
    f7fa:	0e 94 50 2a 	call	0x54a0	; 0x54a0 <safefree>
    }

    __iob[fileno]  = NULL;
    f7fe:	fe 01       	movw	r30, r28
    f800:	ee 0f       	add	r30, r30
    f802:	ff 1f       	adc	r31, r31
    f804:	e2 53       	subi	r30, 0x32	; 50
    f806:	f3 4e       	sbci	r31, 0xE3	; 227
    f808:	11 82       	std	Z+1, r1	; 0x01
    safefree(stream);
    f80a:	10 82       	st	Z, r1
    f80c:	c8 01       	movw	r24, r16
    f80e:	0e 94 50 2a 	call	0x54a0	; 0x54a0 <safefree>
    return(fileno);
}
    f812:	ce 01       	movw	r24, r28
    f814:	df 91       	pop	r29
    f816:	cf 91       	pop	r28
    f818:	1f 91       	pop	r17
    f81a:	0f 91       	pop	r16
    f81c:	08 95       	ret

0000f81e <close>:
///
/// @return 0 on sucess.
/// @return -1 on error with errno set.
MEMSPACE
int close(int fileno)
{
    f81e:	0f 93       	push	r16
    f820:	1f 93       	push	r17
    f822:	cf 93       	push	r28
    f824:	df 93       	push	r29
    f826:	8c 01       	movw	r16, r24
    FILE *stream;
    FIL *fh;
    int res;

    errno = 0;
    f828:	10 92 cd 1c 	sts	0x1CCD, r1	; 0x801ccd <errno+0x1>
    f82c:	10 92 cc 1c 	sts	0x1CCC, r1	; 0x801ccc <errno>

    // checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    if(stream == NULL)
    f830:	2d da       	rcall	.-2982   	; 0xec8c <fileno_to_stream>
    {
        return(-1);
    }

    // fileno_to_fatfs checks for fileno out of bounds
    fh = fileno_to_fatfs(fileno);
    f832:	89 2b       	or	r24, r25
    f834:	d9 f0       	breq	.+54     	; 0xf86c <close+0x4e>
    if(fh == NULL)
    f836:	c8 01       	movw	r24, r16
    f838:	a4 dd       	rcall	.-1208   	; 0xf382 <fileno_to_fatfs>
    {
        return(-1);
    }
    res = f_close(fh);
    f83a:	00 97       	sbiw	r24, 0x00	; 0
    f83c:	b9 f0       	breq	.+46     	; 0xf86c <close+0x4e>
    free_file_descriptor(fileno);
    f83e:	0e 94 65 5e 	call	0xbcca	; 0xbcca <f_close>
    f842:	ec 01       	movw	r28, r24
    if (res != FR_OK)
    f844:	c8 01       	movw	r24, r16
    f846:	b6 df       	rcall	.-148    	; 0xf7b4 <free_file_descriptor>
    f848:	20 97       	sbiw	r28, 0x00	; 0
    f84a:	99 f0       	breq	.+38     	; 0xf872 <close+0x54>
    f84c:	c4 31       	cpi	r28, 0x14	; 20
    f84e:	d1 05       	cpc	r29, r1
    f850:	38 f4       	brcc	.+14     	; 0xf860 <close+0x42>
    f852:	cc 5f       	subi	r28, 0xFC	; 252
    f854:	d8 4f       	sbci	r29, 0xF8	; 248
    f856:	88 81       	ld	r24, Y
    f858:	08 2e       	mov	r0, r24
    f85a:	00 0c       	add	r0, r0
    f85c:	99 0b       	sbc	r25, r25
    f85e:	02 c0       	rjmp	.+4      	; 0xf864 <close+0x46>
    {
        errno = fatfs_to_errno(res);
    f860:	83 e2       	ldi	r24, 0x23	; 35
    f862:	90 e0       	ldi	r25, 0x00	; 0
    f864:	90 93 cd 1c 	sts	0x1CCD, r25	; 0x801ccd <errno+0x1>
        return(-1);
    f868:	80 93 cc 1c 	sts	0x1CCC, r24	; 0x801ccc <errno>
    f86c:	8f ef       	ldi	r24, 0xFF	; 255
    }
    return(0);
    f86e:	9f ef       	ldi	r25, 0xFF	; 255
    f870:	02 c0       	rjmp	.+4      	; 0xf876 <close+0x58>
}
    f872:	80 e0       	ldi	r24, 0x00	; 0
    f874:	90 e0       	ldi	r25, 0x00	; 0
    f876:	df 91       	pop	r29
    f878:	cf 91       	pop	r28
    f87a:	1f 91       	pop	r17
    f87c:	0f 91       	pop	r16
    f87e:	08 95       	ret

0000f880 <fclose>:
    f880:	e9 d9       	rcall	.-3118   	; 0xec54 <fileno>
    f882:	97 fd       	sbrc	r25, 7
    f884:	02 c0       	rjmp	.+4      	; 0xf88a <fclose+0xa>
    f886:	cb cf       	rjmp	.-106    	; 0xf81e <close>
    f888:	08 95       	ret
    f88a:	8f ef       	ldi	r24, 0xFF	; 255
    f88c:	9f ef       	ldi	r25, 0xFF	; 255
    f88e:	08 95       	ret

0000f890 <new_file_descriptor>:
    f890:	0f 93       	push	r16
    f892:	1f 93       	push	r17
    f894:	cf 93       	push	r28
    f896:	df 93       	push	r29
    f898:	ee ec       	ldi	r30, 0xCE	; 206
    f89a:	fc e1       	ldi	r31, 0x1C	; 28
    f89c:	c0 e0       	ldi	r28, 0x00	; 0
    f89e:	d0 e0       	ldi	r29, 0x00	; 0
    f8a0:	21 96       	adiw	r28, 0x01	; 1
    f8a2:	c0 31       	cpi	r28, 0x10	; 16
    f8a4:	d1 05       	cpc	r29, r1
    f8a6:	49 f0       	breq	.+18     	; 0xf8ba <new_file_descriptor+0x2a>
    f8a8:	c3 30       	cpi	r28, 0x03	; 3
    f8aa:	d1 05       	cpc	r29, r1
    f8ac:	24 f0       	brlt	.+8      	; 0xf8b6 <new_file_descriptor+0x26>
    f8ae:	82 81       	ldd	r24, Z+2	; 0x02
    f8b0:	93 81       	ldd	r25, Z+3	; 0x03
    f8b2:	89 2b       	or	r24, r25
    f8b4:	59 f0       	breq	.+22     	; 0xf8cc <new_file_descriptor+0x3c>
    f8b6:	32 96       	adiw	r30, 0x02	; 2
    f8b8:	f3 cf       	rjmp	.-26     	; 0xf8a0 <new_file_descriptor+0x10>
    f8ba:	87 e1       	ldi	r24, 0x17	; 23
    f8bc:	90 e0       	ldi	r25, 0x00	; 0
    f8be:	90 93 cd 1c 	sts	0x1CCD, r25	; 0x801ccd <errno+0x1>
    f8c2:	80 93 cc 1c 	sts	0x1CCC, r24	; 0x801ccc <errno>
    f8c6:	8f ef       	ldi	r24, 0xFF	; 255
    f8c8:	9f ef       	ldi	r25, 0xFF	; 255
    f8ca:	22 c0       	rjmp	.+68     	; 0xf910 <new_file_descriptor+0x80>
    f8cc:	61 e0       	ldi	r22, 0x01	; 1
    f8ce:	70 e0       	ldi	r23, 0x00	; 0
    f8d0:	8e e0       	ldi	r24, 0x0E	; 14
    f8d2:	90 e0       	ldi	r25, 0x00	; 0
    f8d4:	0e 94 07 2a 	call	0x540e	; 0x540e <safecalloc>
    f8d8:	8c 01       	movw	r16, r24
    f8da:	89 2b       	or	r24, r25
    f8dc:	59 f0       	breq	.+22     	; 0xf8f4 <new_file_descriptor+0x64>
    f8de:	61 e0       	ldi	r22, 0x01	; 1
    f8e0:	70 e0       	ldi	r23, 0x00	; 0
    f8e2:	84 e2       	ldi	r24, 0x24	; 36
    f8e4:	92 e0       	ldi	r25, 0x02	; 2
    f8e6:	0e 94 07 2a 	call	0x540e	; 0x540e <safecalloc>
    f8ea:	00 97       	sbiw	r24, 0x00	; 0
    f8ec:	31 f4       	brne	.+12     	; 0xf8fa <new_file_descriptor+0x6a>
    f8ee:	c8 01       	movw	r24, r16
    f8f0:	0e 94 50 2a 	call	0x54a0	; 0x54a0 <safefree>
    f8f4:	8c e0       	ldi	r24, 0x0C	; 12
    f8f6:	90 e0       	ldi	r25, 0x00	; 0
    f8f8:	e2 cf       	rjmp	.-60     	; 0xf8be <new_file_descriptor+0x2e>
    f8fa:	fe 01       	movw	r30, r28
    f8fc:	ee 0f       	add	r30, r30
    f8fe:	ff 1f       	adc	r31, r31
    f900:	e2 53       	subi	r30, 0x32	; 50
    f902:	f3 4e       	sbci	r31, 0xE3	; 227
    f904:	11 83       	std	Z+1, r17	; 0x01
    f906:	00 83       	st	Z, r16
    f908:	f8 01       	movw	r30, r16
    f90a:	95 87       	std	Z+13, r25	; 0x0d
    f90c:	84 87       	std	Z+12, r24	; 0x0c
    f90e:	ce 01       	movw	r24, r28
    f910:	df 91       	pop	r29
    f912:	cf 91       	pop	r28
    f914:	1f 91       	pop	r17
    f916:	0f 91       	pop	r16
    f918:	08 95       	ret

0000f91a <open>:
    f91a:	a0 e0       	ldi	r26, 0x00	; 0
    f91c:	b0 e0       	ldi	r27, 0x00	; 0
    f91e:	e3 e9       	ldi	r30, 0x93	; 147
    f920:	fc e7       	ldi	r31, 0x7C	; 124
    f922:	0c 94 17 e8 	jmp	0x1d02e	; 0x1d02e <__prologue_saves__+0x8>
    f926:	5c 01       	movw	r10, r24
    f928:	6b 01       	movw	r12, r22
    f92a:	10 92 cd 1c 	sts	0x1CCD, r1	; 0x801ccd <errno+0x1>
    f92e:	10 92 cc 1c 	sts	0x1CCC, r1	; 0x801ccc <errno>
    f932:	7b 01       	movw	r14, r22
    f934:	83 e0       	ldi	r24, 0x03	; 3
    f936:	e8 22       	and	r14, r24
    f938:	ff 24       	eor	r15, r15
    f93a:	e2 e0       	ldi	r30, 0x02	; 2
    f93c:	ee 16       	cp	r14, r30
    f93e:	f1 04       	cpc	r15, r1
    f940:	31 f0       	breq	.+12     	; 0xf94e <open+0x34>
    f942:	e1 14       	cp	r14, r1
    f944:	f1 04       	cpc	r15, r1
    f946:	31 f0       	breq	.+12     	; 0xf954 <open+0x3a>
    f948:	02 e0       	ldi	r16, 0x02	; 2
    f94a:	10 e0       	ldi	r17, 0x00	; 0
    f94c:	05 c0       	rjmp	.+10     	; 0xf958 <open+0x3e>
    f94e:	03 e0       	ldi	r16, 0x03	; 3
    f950:	10 e0       	ldi	r17, 0x00	; 0
    f952:	02 c0       	rjmp	.+4      	; 0xf958 <open+0x3e>
    f954:	01 e0       	ldi	r16, 0x01	; 1
    f956:	10 e0       	ldi	r17, 0x00	; 0
    f958:	c6 fe       	sbrs	r12, 6
    f95a:	05 c0       	rjmp	.+10     	; 0xf966 <open+0x4c>
    f95c:	d1 fe       	sbrs	r13, 1
    f95e:	02 c0       	rjmp	.+4      	; 0xf964 <open+0x4a>
    f960:	08 60       	ori	r16, 0x08	; 8
    f962:	01 c0       	rjmp	.+2      	; 0xf966 <open+0x4c>
    f964:	00 61       	ori	r16, 0x10	; 16
    f966:	94 df       	rcall	.-216    	; 0xf890 <new_file_descriptor>
    f968:	3c 01       	movw	r6, r24
    f96a:	90 d9       	rcall	.-3296   	; 0xec8c <fileno_to_stream>
    f96c:	ec 01       	movw	r28, r24
    f96e:	c3 01       	movw	r24, r6
    f970:	20 97       	sbiw	r28, 0x00	; 0
    f972:	09 f4       	brne	.+2      	; 0xf976 <open+0x5c>
    f974:	48 c0       	rjmp	.+144    	; 0xfa06 <open+0xec>
    f976:	05 dd       	rcall	.-1526   	; 0xf382 <fileno_to_fatfs>
    f978:	4c 01       	movw	r8, r24
    f97a:	00 97       	sbiw	r24, 0x00	; 0
    f97c:	59 f4       	brne	.+22     	; 0xf994 <open+0x7a>
    f97e:	c3 01       	movw	r24, r6
    f980:	19 df       	rcall	.-462    	; 0xf7b4 <free_file_descriptor>
    f982:	89 e0       	ldi	r24, 0x09	; 9
    f984:	90 e0       	ldi	r25, 0x00	; 0
    f986:	90 93 cd 1c 	sts	0x1CCD, r25	; 0x801ccd <errno+0x1>
    f98a:	80 93 cc 1c 	sts	0x1CCC, r24	; 0x801ccc <errno>
    f98e:	8f ef       	ldi	r24, 0xFF	; 255
    f990:	9f ef       	ldi	r25, 0xFF	; 255
    f992:	5d c0       	rjmp	.+186    	; 0xfa4e <open+0x134>
    f994:	40 2f       	mov	r20, r16
    f996:	b5 01       	movw	r22, r10
    f998:	0e 94 07 59 	call	0xb20e	; 0xb20e <f_open>
    f99c:	00 97       	sbiw	r24, 0x00	; 0
    f99e:	91 f0       	breq	.+36     	; 0xf9c4 <open+0xaa>
    f9a0:	84 31       	cpi	r24, 0x14	; 20
    f9a2:	91 05       	cpc	r25, r1
    f9a4:	40 f4       	brcc	.+16     	; 0xf9b6 <open+0x9c>
    f9a6:	fc 01       	movw	r30, r24
    f9a8:	ec 5f       	subi	r30, 0xFC	; 252
    f9aa:	f8 4f       	sbci	r31, 0xF8	; 248
    f9ac:	80 81       	ld	r24, Z
    f9ae:	08 2e       	mov	r0, r24
    f9b0:	00 0c       	add	r0, r0
    f9b2:	99 0b       	sbc	r25, r25
    f9b4:	02 c0       	rjmp	.+4      	; 0xf9ba <open+0xa0>
    f9b6:	83 e2       	ldi	r24, 0x23	; 35
    f9b8:	90 e0       	ldi	r25, 0x00	; 0
    f9ba:	90 93 cd 1c 	sts	0x1CCD, r25	; 0x801ccd <errno+0x1>
    f9be:	80 93 cc 1c 	sts	0x1CCC, r24	; 0x801ccc <errno>
    f9c2:	20 c0       	rjmp	.+64     	; 0xfa04 <open+0xea>
    f9c4:	d2 fe       	sbrs	r13, 2
    f9c6:	21 c0       	rjmp	.+66     	; 0xfa0a <open+0xf0>
    f9c8:	f4 01       	movw	r30, r8
    f9ca:	42 85       	ldd	r20, Z+10	; 0x0a
    f9cc:	53 85       	ldd	r21, Z+11	; 0x0b
    f9ce:	64 85       	ldd	r22, Z+12	; 0x0c
    f9d0:	75 85       	ldd	r23, Z+13	; 0x0d
    f9d2:	c4 01       	movw	r24, r8
    f9d4:	0e 94 0d 60 	call	0xc01a	; 0xc01a <f_lseek>
    f9d8:	00 97       	sbiw	r24, 0x00	; 0
    f9da:	b9 f0       	breq	.+46     	; 0xfa0a <open+0xf0>
    f9dc:	84 31       	cpi	r24, 0x14	; 20
    f9de:	91 05       	cpc	r25, r1
    f9e0:	40 f4       	brcc	.+16     	; 0xf9f2 <open+0xd8>
    f9e2:	fc 01       	movw	r30, r24
    f9e4:	ec 5f       	subi	r30, 0xFC	; 252
    f9e6:	f8 4f       	sbci	r31, 0xF8	; 248
    f9e8:	80 81       	ld	r24, Z
    f9ea:	08 2e       	mov	r0, r24
    f9ec:	00 0c       	add	r0, r0
    f9ee:	99 0b       	sbc	r25, r25
    f9f0:	02 c0       	rjmp	.+4      	; 0xf9f6 <open+0xdc>
    f9f2:	83 e2       	ldi	r24, 0x23	; 35
    f9f4:	90 e0       	ldi	r25, 0x00	; 0
    f9f6:	90 93 cd 1c 	sts	0x1CCD, r25	; 0x801ccd <errno+0x1>
    f9fa:	80 93 cc 1c 	sts	0x1CCC, r24	; 0x801ccc <errno>
    f9fe:	c4 01       	movw	r24, r8
    fa00:	0e 94 65 5e 	call	0xbcca	; 0xbcca <f_close>
    fa04:	c3 01       	movw	r24, r6
    fa06:	d6 de       	rcall	.-596    	; 0xf7b4 <free_file_descriptor>
    fa08:	c2 cf       	rjmp	.-124    	; 0xf98e <open+0x74>
    fa0a:	f2 e0       	ldi	r31, 0x02	; 2
    fa0c:	ef 16       	cp	r14, r31
    fa0e:	f1 04       	cpc	r15, r1
    fa10:	51 f4       	brne	.+20     	; 0xfa26 <open+0x10c>
    fa12:	85 ec       	ldi	r24, 0xC5	; 197
    fa14:	94 e7       	ldi	r25, 0x74	; 116
    fa16:	99 87       	std	Y+9, r25	; 0x09
    fa18:	88 87       	std	Y+8, r24	; 0x08
    fa1a:	82 e4       	ldi	r24, 0x42	; 66
    fa1c:	94 e7       	ldi	r25, 0x74	; 116
    fa1e:	9b 87       	std	Y+11, r25	; 0x0b
    fa20:	8a 87       	std	Y+10, r24	; 0x0a
    fa22:	83 e0       	ldi	r24, 0x03	; 3
    fa24:	12 c0       	rjmp	.+36     	; 0xfa4a <open+0x130>
    fa26:	e1 14       	cp	r14, r1
    fa28:	f1 04       	cpc	r15, r1
    fa2a:	41 f4       	brne	.+16     	; 0xfa3c <open+0x122>
    fa2c:	19 86       	std	Y+9, r1	; 0x09
    fa2e:	18 86       	std	Y+8, r1	; 0x08
    fa30:	82 e4       	ldi	r24, 0x42	; 66
    fa32:	94 e7       	ldi	r25, 0x74	; 116
    fa34:	9b 87       	std	Y+11, r25	; 0x0b
    fa36:	8a 87       	std	Y+10, r24	; 0x0a
    fa38:	81 e0       	ldi	r24, 0x01	; 1
    fa3a:	07 c0       	rjmp	.+14     	; 0xfa4a <open+0x130>
    fa3c:	85 ec       	ldi	r24, 0xC5	; 197
    fa3e:	94 e7       	ldi	r25, 0x74	; 116
    fa40:	99 87       	std	Y+9, r25	; 0x09
    fa42:	88 87       	std	Y+8, r24	; 0x08
    fa44:	1b 86       	std	Y+11, r1	; 0x0b
    fa46:	1a 86       	std	Y+10, r1	; 0x0a
    fa48:	82 e0       	ldi	r24, 0x02	; 2
    fa4a:	8b 83       	std	Y+3, r24	; 0x03
    fa4c:	c3 01       	movw	r24, r6
    fa4e:	cd b7       	in	r28, 0x3d	; 61
    fa50:	de b7       	in	r29, 0x3e	; 62
    fa52:	ee e0       	ldi	r30, 0x0E	; 14
    fa54:	0c 94 33 e8 	jmp	0x1d066	; 0x1d066 <__epilogue_restores__+0x8>

0000fa58 <posix_fopen_modes_to_open>:
    fa58:	cf 93       	push	r28
    fa5a:	df 93       	push	r29
    fa5c:	ec 01       	movw	r28, r24
    fa5e:	6b e2       	ldi	r22, 0x2B	; 43
    fa60:	77 e0       	ldi	r23, 0x07	; 7
    fa62:	0e 94 8b 32 	call	0x6516	; 0x6516 <strcmp>
    fa66:	00 97       	sbiw	r24, 0x00	; 0
    fa68:	09 f4       	brne	.+2      	; 0xfa6c <posix_fopen_modes_to_open+0x14>
    fa6a:	5d c0       	rjmp	.+186    	; 0xfb26 <posix_fopen_modes_to_open+0xce>
    fa6c:	60 e7       	ldi	r22, 0x70	; 112
    fa6e:	78 e0       	ldi	r23, 0x08	; 8
    fa70:	ce 01       	movw	r24, r28
    fa72:	0e 94 8b 32 	call	0x6516	; 0x6516 <strcmp>
    fa76:	00 97       	sbiw	r24, 0x00	; 0
    fa78:	09 f4       	brne	.+2      	; 0xfa7c <posix_fopen_modes_to_open+0x24>
    fa7a:	55 c0       	rjmp	.+170    	; 0xfb26 <posix_fopen_modes_to_open+0xce>
    fa7c:	63 e7       	ldi	r22, 0x73	; 115
    fa7e:	78 e0       	ldi	r23, 0x08	; 8
    fa80:	ce 01       	movw	r24, r28
    fa82:	0e 94 8b 32 	call	0x6516	; 0x6516 <strcmp>
    fa86:	89 2b       	or	r24, r25
    fa88:	09 f4       	brne	.+2      	; 0xfa8c <posix_fopen_modes_to_open+0x34>
    fa8a:	42 c0       	rjmp	.+132    	; 0xfb10 <posix_fopen_modes_to_open+0xb8>
    fa8c:	66 e7       	ldi	r22, 0x76	; 118
    fa8e:	78 e0       	ldi	r23, 0x08	; 8
    fa90:	ce 01       	movw	r24, r28
    fa92:	0e 94 8b 32 	call	0x6516	; 0x6516 <strcmp>
    fa96:	89 2b       	or	r24, r25
    fa98:	d9 f1       	breq	.+118    	; 0xfb10 <posix_fopen_modes_to_open+0xb8>
    fa9a:	6a e7       	ldi	r22, 0x7A	; 122
    fa9c:	78 e0       	ldi	r23, 0x08	; 8
    fa9e:	ce 01       	movw	r24, r28
    faa0:	0e 94 8b 32 	call	0x6516	; 0x6516 <strcmp>
    faa4:	89 2b       	or	r24, r25
    faa6:	a1 f1       	breq	.+104    	; 0xfb10 <posix_fopen_modes_to_open+0xb8>
    faa8:	6f e2       	ldi	r22, 0x2F	; 47
    faaa:	7a e0       	ldi	r23, 0x0A	; 10
    faac:	ce 01       	movw	r24, r28
    faae:	0e 94 8b 32 	call	0x6516	; 0x6516 <strcmp>
    fab2:	89 2b       	or	r24, r25
    fab4:	81 f1       	breq	.+96     	; 0xfb16 <posix_fopen_modes_to_open+0xbe>
    fab6:	6e e7       	ldi	r22, 0x7E	; 126
    fab8:	78 e0       	ldi	r23, 0x08	; 8
    faba:	ce 01       	movw	r24, r28
    fabc:	0e 94 8b 32 	call	0x6516	; 0x6516 <strcmp>
    fac0:	89 2b       	or	r24, r25
    fac2:	49 f1       	breq	.+82     	; 0xfb16 <posix_fopen_modes_to_open+0xbe>
    fac4:	61 e8       	ldi	r22, 0x81	; 129
    fac6:	78 e0       	ldi	r23, 0x08	; 8
    fac8:	ce 01       	movw	r24, r28
    faca:	0e 94 8b 32 	call	0x6516	; 0x6516 <strcmp>
    face:	89 2b       	or	r24, r25
    fad0:	29 f1       	breq	.+74     	; 0xfb1c <posix_fopen_modes_to_open+0xc4>
    fad2:	64 e8       	ldi	r22, 0x84	; 132
    fad4:	78 e0       	ldi	r23, 0x08	; 8
    fad6:	ce 01       	movw	r24, r28
    fad8:	0e 94 8b 32 	call	0x6516	; 0x6516 <strcmp>
    fadc:	89 2b       	or	r24, r25
    fade:	f1 f0       	breq	.+60     	; 0xfb1c <posix_fopen_modes_to_open+0xc4>
    fae0:	68 e8       	ldi	r22, 0x88	; 136
    fae2:	78 e0       	ldi	r23, 0x08	; 8
    fae4:	ce 01       	movw	r24, r28
    fae6:	0e 94 8b 32 	call	0x6516	; 0x6516 <strcmp>
    faea:	89 2b       	or	r24, r25
    faec:	b9 f0       	breq	.+46     	; 0xfb1c <posix_fopen_modes_to_open+0xc4>
    faee:	6a ea       	ldi	r22, 0xAA	; 170
    faf0:	72 e1       	ldi	r23, 0x12	; 18
    faf2:	ce 01       	movw	r24, r28
    faf4:	0e 94 8b 32 	call	0x6516	; 0x6516 <strcmp>
    faf8:	89 2b       	or	r24, r25
    fafa:	99 f0       	breq	.+38     	; 0xfb22 <posix_fopen_modes_to_open+0xca>
    fafc:	6c e8       	ldi	r22, 0x8C	; 140
    fafe:	78 e0       	ldi	r23, 0x08	; 8
    fb00:	ce 01       	movw	r24, r28
    fb02:	0e 94 8b 32 	call	0x6516	; 0x6516 <strcmp>
    fb06:	89 2b       	or	r24, r25
    fb08:	61 f0       	breq	.+24     	; 0xfb22 <posix_fopen_modes_to_open+0xca>
    fb0a:	8f ef       	ldi	r24, 0xFF	; 255
    fb0c:	9f ef       	ldi	r25, 0xFF	; 255
    fb0e:	0b c0       	rjmp	.+22     	; 0xfb26 <posix_fopen_modes_to_open+0xce>
    fb10:	82 e0       	ldi	r24, 0x02	; 2
    fb12:	92 e0       	ldi	r25, 0x02	; 2
    fb14:	08 c0       	rjmp	.+16     	; 0xfb26 <posix_fopen_modes_to_open+0xce>
    fb16:	81 e4       	ldi	r24, 0x41	; 65
    fb18:	92 e0       	ldi	r25, 0x02	; 2
    fb1a:	05 c0       	rjmp	.+10     	; 0xfb26 <posix_fopen_modes_to_open+0xce>
    fb1c:	82 e4       	ldi	r24, 0x42	; 66
    fb1e:	92 e0       	ldi	r25, 0x02	; 2
    fb20:	02 c0       	rjmp	.+4      	; 0xfb26 <posix_fopen_modes_to_open+0xce>
    fb22:	81 e4       	ldi	r24, 0x41	; 65
    fb24:	94 e0       	ldi	r25, 0x04	; 4
    fb26:	df 91       	pop	r29
    fb28:	cf 91       	pop	r28
    fb2a:	08 95       	ret

0000fb2c <fopen>:
    fb2c:	cf 93       	push	r28
    fb2e:	df 93       	push	r29
    fb30:	ec 01       	movw	r28, r24
    fb32:	cb 01       	movw	r24, r22
    fb34:	91 df       	rcall	.-222    	; 0xfa58 <posix_fopen_modes_to_open>
    fb36:	bc 01       	movw	r22, r24
    fb38:	ce 01       	movw	r24, r28
    fb3a:	ef de       	rcall	.-546    	; 0xf91a <open>
    fb3c:	a7 d8       	rcall	.-3762   	; 0xec8c <fileno_to_stream>
    fb3e:	df 91       	pop	r29
    fb40:	cf 91       	pop	r28
    fb42:	08 95       	ret

0000fb44 <fprintf>:
    fb44:	a8 e0       	ldi	r26, 0x08	; 8
    fb46:	b0 e0       	ldi	r27, 0x00	; 0
    fb48:	e8 ea       	ldi	r30, 0xA8	; 168
    fb4a:	fd e7       	ldi	r31, 0x7D	; 125
    fb4c:	0c 94 23 e8 	jmp	0x1d046	; 0x1d046 <__prologue_saves__+0x20>
    fb50:	8e ea       	ldi	r24, 0xAE	; 174
    fb52:	95 e7       	ldi	r25, 0x75	; 117
    fb54:	9a 83       	std	Y+2, r25	; 0x02
    fb56:	89 83       	std	Y+1, r24	; 0x01
    fb58:	18 86       	std	Y+8, r1	; 0x08
    fb5a:	1f 82       	std	Y+7, r1	; 0x07
    fb5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    fb5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    fb60:	9c 83       	std	Y+4, r25	; 0x04
    fb62:	8b 83       	std	Y+3, r24	; 0x03
    fb64:	4f 85       	ldd	r20, Y+15	; 0x0f
    fb66:	58 89       	ldd	r21, Y+16	; 0x10
    fb68:	60 e8       	ldi	r22, 0x80	; 128
    fb6a:	9e 01       	movw	r18, r28
    fb6c:	2f 5e       	subi	r18, 0xEF	; 239
    fb6e:	3f 4f       	sbci	r19, 0xFF	; 255
    fb70:	ce 01       	movw	r24, r28
    fb72:	01 96       	adiw	r24, 0x01	; 1
    fb74:	0e 94 b7 42 	call	0x856e	; 0x856e <_printf_fn>
    fb78:	8f 81       	ldd	r24, Y+7	; 0x07
    fb7a:	98 85       	ldd	r25, Y+8	; 0x08
    fb7c:	28 96       	adiw	r28, 0x08	; 8
    fb7e:	e2 e0       	ldi	r30, 0x02	; 2
    fb80:	0c 94 3f e8 	jmp	0x1d07e	; 0x1d07e <__epilogue_restores__+0x20>

0000fb84 <posix_help>:
MEMSPACE
int setpage(int count)
{
    _pagesize = count;
    return(_pagesize);
}
    fb84:	cf 93       	push	r28
    fb86:	df 93       	push	r29
    fb88:	ec 01       	movw	r28, r24
    fb8a:	88 ea       	ldi	r24, 0xA8	; 168
    fb8c:	9e e0       	ldi	r25, 0x0E	; 14
    fb8e:	1f 92       	push	r1
    fb90:	9f 93       	push	r25
    fb92:	8f 93       	push	r24
    fb94:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    fb98:	0f 90       	pop	r0
    fb9a:	0f 90       	pop	r0
    fb9c:	0f 90       	pop	r0
    fb9e:	cd 2b       	or	r28, r29
    fba0:	51 f0       	breq	.+20     	; 0xfbb6 <posix_help+0x32>
    fba2:	88 ee       	ldi	r24, 0xE8	; 232
    fba4:	9d e0       	ldi	r25, 0x0D	; 13
    fba6:	1f 92       	push	r1
    fba8:	9f 93       	push	r25
    fbaa:	8f 93       	push	r24
    fbac:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    fbb0:	0f 90       	pop	r0
    fbb2:	0f 90       	pop	r0
    fbb4:	0f 90       	pop	r0
    fbb6:	df 91       	pop	r29
    fbb8:	cf 91       	pop	r28
    fbba:	08 95       	ret

0000fbbc <copy>:
    fbbc:	4f 92       	push	r4
    fbbe:	5f 92       	push	r5
    fbc0:	6f 92       	push	r6
    fbc2:	8f 92       	push	r8
    fbc4:	9f 92       	push	r9
    fbc6:	af 92       	push	r10
    fbc8:	bf 92       	push	r11
    fbca:	cf 92       	push	r12
    fbcc:	df 92       	push	r13
    fbce:	ef 92       	push	r14
    fbd0:	ff 92       	push	r15
    fbd2:	0f 93       	push	r16
    fbd4:	1f 93       	push	r17
    fbd6:	cf 93       	push	r28
    fbd8:	df 93       	push	r29
    fbda:	18 2f       	mov	r17, r24
    fbdc:	09 2f       	mov	r16, r25
    fbde:	eb 01       	movw	r28, r22
    fbe0:	9f 93       	push	r25
    fbe2:	8f 93       	push	r24
    fbe4:	8b eb       	ldi	r24, 0xBB	; 187
    fbe6:	9d e0       	ldi	r25, 0x0D	; 13
    fbe8:	1f 92       	push	r1
    fbea:	9f 93       	push	r25
    fbec:	8f 93       	push	r24
    fbee:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    fbf2:	60 e7       	ldi	r22, 0x70	; 112
    fbf4:	78 e0       	ldi	r23, 0x08	; 8
    fbf6:	81 2f       	mov	r24, r17
    fbf8:	90 2f       	mov	r25, r16
    fbfa:	98 df       	rcall	.-208    	; 0xfb2c <fopen>
    fbfc:	7c 01       	movw	r14, r24
    fbfe:	0f 90       	pop	r0
    fc00:	0f 90       	pop	r0
    fc02:	0f 90       	pop	r0
    fc04:	0f 90       	pop	r0
    fc06:	0f 90       	pop	r0
    fc08:	89 2b       	or	r24, r25
    fc0a:	51 f4       	brne	.+20     	; 0xfc20 <copy+0x64>
    fc0c:	0f 93       	push	r16
    fc0e:	1f 93       	push	r17
    fc10:	8b ea       	ldi	r24, 0xAB	; 171
    fc12:	9d e0       	ldi	r25, 0x0D	; 13
    fc14:	1f 92       	push	r1
    fc16:	9f 93       	push	r25
    fc18:	8f 93       	push	r24
    fc1a:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    fc1e:	21 c0       	rjmp	.+66     	; 0xfc62 <copy+0xa6>
    fc20:	df 93       	push	r29
    fc22:	cf 93       	push	r28
    fc24:	8e e9       	ldi	r24, 0x9E	; 158
    fc26:	9d e0       	ldi	r25, 0x0D	; 13
    fc28:	1f 92       	push	r1
    fc2a:	9f 93       	push	r25
    fc2c:	8f 93       	push	r24
    fc2e:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    fc32:	6e e7       	ldi	r22, 0x7E	; 126
    fc34:	78 e0       	ldi	r23, 0x08	; 8
    fc36:	ce 01       	movw	r24, r28
    fc38:	79 df       	rcall	.-270    	; 0xfb2c <fopen>
    fc3a:	8c 01       	movw	r16, r24
    fc3c:	0f 90       	pop	r0
    fc3e:	0f 90       	pop	r0
    fc40:	0f 90       	pop	r0
    fc42:	0f 90       	pop	r0
    fc44:	0f 90       	pop	r0
    fc46:	89 2b       	or	r24, r25
    fc48:	b1 f4       	brne	.+44     	; 0xfc76 <copy+0xba>
    fc4a:	df 93       	push	r29
    fc4c:	cf 93       	push	r28
    fc4e:	8e e8       	ldi	r24, 0x8E	; 142
    fc50:	9d e0       	ldi	r25, 0x0D	; 13
    fc52:	1f 92       	push	r1
    fc54:	9f 93       	push	r25
    fc56:	8f 93       	push	r24
    fc58:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    fc5c:	80 e0       	ldi	r24, 0x00	; 0
    fc5e:	90 e0       	ldi	r25, 0x00	; 0
    fc60:	0f de       	rcall	.-994    	; 0xf880 <fclose>
    fc62:	0f 90       	pop	r0
    fc64:	0f 90       	pop	r0
    fc66:	0f 90       	pop	r0
    fc68:	0f 90       	pop	r0
    fc6a:	0f 90       	pop	r0
    fc6c:	60 e0       	ldi	r22, 0x00	; 0
    fc6e:	70 e0       	ldi	r23, 0x00	; 0
    fc70:	80 e0       	ldi	r24, 0x00	; 0
    fc72:	90 e0       	ldi	r25, 0x00	; 0
    fc74:	73 c0       	rjmp	.+230    	; 0xfd5c <copy+0x1a0>
    fc76:	61 e0       	ldi	r22, 0x01	; 1
    fc78:	70 e0       	ldi	r23, 0x00	; 0
    fc7a:	80 e0       	ldi	r24, 0x00	; 0
    fc7c:	92 e0       	ldi	r25, 0x02	; 2
    fc7e:	0e 94 07 2a 	call	0x540e	; 0x540e <safecalloc>
    fc82:	6c 01       	movw	r12, r24
    fc84:	89 2b       	or	r24, r25
    fc86:	29 f4       	brne	.+10     	; 0xfc92 <copy+0xd6>
    fc88:	c7 01       	movw	r24, r14
    fc8a:	fa dd       	rcall	.-1036   	; 0xf880 <fclose>
    fc8c:	c8 01       	movw	r24, r16
    fc8e:	f8 dd       	rcall	.-1040   	; 0xf880 <fclose>
    fc90:	ed cf       	rjmp	.-38     	; 0xfc6c <copy+0xb0>
    fc92:	81 e8       	ldi	r24, 0x81	; 129
    fc94:	9d e0       	ldi	r25, 0x0D	; 13
    fc96:	1f 92       	push	r1
    fc98:	9f 93       	push	r25
    fc9a:	8f 93       	push	r24
    fc9c:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    fca0:	0f 90       	pop	r0
    fca2:	0f 90       	pop	r0
    fca4:	0f 90       	pop	r0
    fca6:	81 2c       	mov	r8, r1
    fca8:	91 2c       	mov	r9, r1
    fcaa:	54 01       	movw	r10, r8
    fcac:	85 e6       	ldi	r24, 0x65	; 101
    fcae:	9d e0       	ldi	r25, 0x0D	; 13
    fcb0:	2c 01       	movw	r4, r24
    fcb2:	97 01       	movw	r18, r14
    fcb4:	40 e0       	ldi	r20, 0x00	; 0
    fcb6:	52 e0       	ldi	r21, 0x02	; 2
    fcb8:	61 e0       	ldi	r22, 0x01	; 1
    fcba:	70 e0       	ldi	r23, 0x00	; 0
    fcbc:	c6 01       	movw	r24, r12
    fcbe:	8c dc       	rcall	.-1768   	; 0xf5d8 <fread>
    fcc0:	ec 01       	movw	r28, r24
    fcc2:	18 16       	cp	r1, r24
    fcc4:	19 06       	cpc	r1, r25
    fcc6:	74 f5       	brge	.+92     	; 0xfd24 <copy+0x168>
    fcc8:	98 01       	movw	r18, r16
    fcca:	ae 01       	movw	r20, r28
    fccc:	61 e0       	ldi	r22, 0x01	; 1
    fcce:	70 e0       	ldi	r23, 0x00	; 0
    fcd0:	c6 01       	movw	r24, r12
    fcd2:	54 dd       	rcall	.-1368   	; 0xf77c <fwrite>
    fcd4:	8c 17       	cp	r24, r28
    fcd6:	9d 07       	cpc	r25, r29
    fcd8:	5c f4       	brge	.+22     	; 0xfcf0 <copy+0x134>
    fcda:	84 e7       	ldi	r24, 0x74	; 116
    fcdc:	9d e0       	ldi	r25, 0x0D	; 13
    fcde:	1f 92       	push	r1
    fce0:	9f 93       	push	r25
    fce2:	8f 93       	push	r24
    fce4:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    fce8:	0f 90       	pop	r0
    fcea:	0f 90       	pop	r0
    fcec:	0f 90       	pop	r0
    fcee:	1a c0       	rjmp	.+52     	; 0xfd24 <copy+0x168>
    fcf0:	ce 01       	movw	r24, r28
    fcf2:	dd 0f       	add	r29, r29
    fcf4:	aa 0b       	sbc	r26, r26
    fcf6:	bb 0b       	sbc	r27, r27
    fcf8:	88 0e       	add	r8, r24
    fcfa:	99 1e       	adc	r9, r25
    fcfc:	aa 1e       	adc	r10, r26
    fcfe:	bb 1e       	adc	r11, r27
    fd00:	bf 92       	push	r11
    fd02:	af 92       	push	r10
    fd04:	9f 92       	push	r9
    fd06:	8f 92       	push	r8
    fd08:	1f 92       	push	r1
    fd0a:	5f 92       	push	r5
    fd0c:	4f 92       	push	r4
    fd0e:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    fd12:	8d b7       	in	r24, 0x3d	; 61
    fd14:	9e b7       	in	r25, 0x3e	; 62
    fd16:	07 96       	adiw	r24, 0x07	; 7
    fd18:	0f b6       	in	r0, 0x3f	; 63
    fd1a:	f8 94       	cli
    fd1c:	9e bf       	out	0x3e, r25	; 62
    fd1e:	0f be       	out	0x3f, r0	; 63
    fd20:	8d bf       	out	0x3d, r24	; 61
    fd22:	c7 cf       	rjmp	.-114    	; 0xfcb2 <copy+0xf6>
    fd24:	bf 92       	push	r11
    fd26:	af 92       	push	r10
    fd28:	9f 92       	push	r9
    fd2a:	8f 92       	push	r8
    fd2c:	82 e5       	ldi	r24, 0x52	; 82
    fd2e:	9d e0       	ldi	r25, 0x0D	; 13
    fd30:	1f 92       	push	r1
    fd32:	9f 93       	push	r25
    fd34:	8f 93       	push	r24
    fd36:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    fd3a:	c6 01       	movw	r24, r12
    fd3c:	0e 94 50 2a 	call	0x54a0	; 0x54a0 <safefree>
    fd40:	c7 01       	movw	r24, r14
    fd42:	9e dd       	rcall	.-1220   	; 0xf880 <fclose>
    fd44:	c8 01       	movw	r24, r16
    fd46:	9c dd       	rcall	.-1224   	; 0xf880 <fclose>
    fd48:	8d b7       	in	r24, 0x3d	; 61
    fd4a:	9e b7       	in	r25, 0x3e	; 62
    fd4c:	07 96       	adiw	r24, 0x07	; 7
    fd4e:	0f b6       	in	r0, 0x3f	; 63
    fd50:	f8 94       	cli
    fd52:	9e bf       	out	0x3e, r25	; 62
    fd54:	0f be       	out	0x3f, r0	; 63
    fd56:	8d bf       	out	0x3d, r24	; 61
    fd58:	b4 01       	movw	r22, r8
    fd5a:	c5 01       	movw	r24, r10
    fd5c:	df 91       	pop	r29
    fd5e:	cf 91       	pop	r28
    fd60:	1f 91       	pop	r17
    fd62:	0f 91       	pop	r16
    fd64:	ff 90       	pop	r15
    fd66:	ef 90       	pop	r14
    fd68:	df 90       	pop	r13
    fd6a:	cf 90       	pop	r12
    fd6c:	bf 90       	pop	r11
    fd6e:	af 90       	pop	r10
    fd70:	9f 90       	pop	r9
    fd72:	8f 90       	pop	r8
    fd74:	6f 90       	pop	r6
    fd76:	5f 90       	pop	r5
    fd78:	4f 90       	pop	r4
    fd7a:	08 95       	ret

0000fd7c <testpage>:
/// @brief Used to page output of functions like cat, hexdump, etc
/// @param[in] *name: file to hexdump
/// @retrun -1 = quit, return count or 0 at new page
MEMSPACE
int testpage(int count)
{
    fd7c:	cf 93       	push	r28
    fd7e:	df 93       	push	r29
    int c;
    if(count >= _pagesize)
    fd80:	20 91 87 01 	lds	r18, 0x0187	; 0x800187 <_pagesize>
    fd84:	30 91 88 01 	lds	r19, 0x0188	; 0x800188 <_pagesize+0x1>
    fd88:	82 17       	cp	r24, r18
    fd8a:	93 07       	cpc	r25, r19
    fd8c:	3c f1       	brlt	.+78     	; 0xfddc <testpage+0x60>
    {
        printf("More..");
    fd8e:	8b e4       	ldi	r24, 0x4B	; 75
    fd90:	9d e0       	ldi	r25, 0x0D	; 13
    fd92:	1f 92       	push	r1
    fd94:	9f 93       	push	r25
    fd96:	8f 93       	push	r24
    fd98:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
        {
            optimistic_yield(1000);
            wdt_reset();
        }
#endif
        c = getchar();
    fd9c:	0e 94 bb 75 	call	0xeb76	; 0xeb76 <getchar>
    fda0:	ec 01       	movw	r28, r24
        printf("\r");
    fda2:	89 e4       	ldi	r24, 0x49	; 73
    fda4:	9d e0       	ldi	r25, 0x0D	; 13
    fda6:	1f 92       	push	r1
    fda8:	9f 93       	push	r25
    fdaa:	8f 93       	push	r24
    fdac:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
        if(c == 'q')
    fdb0:	0f 90       	pop	r0
    fdb2:	0f 90       	pop	r0
    fdb4:	0f 90       	pop	r0
    fdb6:	0f 90       	pop	r0
    fdb8:	0f 90       	pop	r0
    fdba:	0f 90       	pop	r0
    fdbc:	c1 37       	cpi	r28, 0x71	; 113
    fdbe:	d1 05       	cpc	r29, r1
    fdc0:	41 f0       	breq	.+16     	; 0xfdd2 <testpage+0x56>
            return(-1);         // quit
        if(c == '\n')
    fdc2:	2a 97       	sbiw	r28, 0x0a	; 10
    fdc4:	49 f4       	brne	.+18     	; 0xfdd8 <testpage+0x5c>
            return(_pagesize-1); // single line
    fdc6:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <_pagesize>
    fdca:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <_pagesize+0x1>
    fdce:	01 97       	sbiw	r24, 0x01	; 1
    fdd0:	05 c0       	rjmp	.+10     	; 0xfddc <testpage+0x60>
        }
#endif
        c = getchar();
        printf("\r");
        if(c == 'q')
            return(-1);         // quit
    fdd2:	8f ef       	ldi	r24, 0xFF	; 255
    fdd4:	9f ef       	ldi	r25, 0xFF	; 255
    fdd6:	02 c0       	rjmp	.+4      	; 0xfddc <testpage+0x60>
        if(c == '\n')
            return(_pagesize-1); // single line
        return(0);              // new page
    fdd8:	80 e0       	ldi	r24, 0x00	; 0
    fdda:	90 e0       	ldi	r25, 0x00	; 0
    }
    return (count);
}
    fddc:	df 91       	pop	r29
    fdde:	cf 91       	pop	r28
    fde0:	08 95       	ret

0000fde2 <cat>:
/// @param[in] name: file name.
/// @param[in] option: --p page display
/// @return  void.
MEMSPACE
long cat(char *name, int dopage)
{
    fde2:	a0 e0       	ldi	r26, 0x00	; 0
    fde4:	b1 e0       	ldi	r27, 0x01	; 1
    fde6:	e7 ef       	ldi	r30, 0xF7	; 247
    fde8:	fe e7       	ldi	r31, 0x7E	; 126
    fdea:	0c 94 19 e8 	jmp	0x1d032	; 0x1d032 <__prologue_saves__+0xc>
    fdee:	18 2f       	mov	r17, r24
    fdf0:	09 2f       	mov	r16, r25
    fdf2:	4b 01       	movw	r8, r22
    FILE *fp;
    int count = 0;
    int size = 0;
    char line[256];

    fp = fopen(name,"rb");
    fdf4:	60 e7       	ldi	r22, 0x70	; 112
    fdf6:	78 e0       	ldi	r23, 0x08	; 8
    fdf8:	99 de       	rcall	.-718    	; 0xfb2c <fopen>
    fdfa:	7c 01       	movw	r14, r24
    if (!fp)
    fdfc:	89 2b       	or	r24, r25
    fdfe:	41 f0       	breq	.+16     	; 0xfe10 <cat+0x2e>
    fe00:	c1 2c       	mov	r12, r1
    fe02:	d1 2c       	mov	r13, r1
    fe04:	a1 2c       	mov	r10, r1
    fe06:	b1 2c       	mov	r11, r1
    {
        printf("Can't open: %s\n", name);
        return(0);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    fe08:	8e 01       	movw	r16, r28
    fe0a:	0f 5f       	subi	r16, 0xFF	; 255
    fe0c:	1f 4f       	sbci	r17, 0xFF	; 255
    fe0e:	24 c0       	rjmp	.+72     	; 0xfe58 <cat+0x76>
    char line[256];

    fp = fopen(name,"rb");
    if (!fp)
    {
        printf("Can't open: %s\n", name);
    fe10:	0f 93       	push	r16
    fe12:	1f 93       	push	r17
    fe14:	84 ed       	ldi	r24, 0xD4	; 212
    fe16:	9d e0       	ldi	r25, 0x0D	; 13
    fe18:	1f 92       	push	r1
    fe1a:	9f 93       	push	r25
    fe1c:	8f 93       	push	r24
    fe1e:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
        return(0);
    fe22:	0f 90       	pop	r0
    fe24:	0f 90       	pop	r0
    fe26:	0f 90       	pop	r0
    fe28:	0f 90       	pop	r0
    fe2a:	0f 90       	pop	r0
    fe2c:	c1 2c       	mov	r12, r1
    fe2e:	d1 2c       	mov	r13, r1
    fe30:	76 01       	movw	r14, r12
    fe32:	3e c0       	rjmp	.+124    	; 0xfeb0 <cat+0xce>
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    {
        trim_tail(line);
    fe34:	c8 01       	movw	r24, r16
    fe36:	0e 94 71 32 	call	0x64e2	; 0x64e2 <trim_tail>
        size += strlen(line);
    fe3a:	f8 01       	movw	r30, r16
    fe3c:	01 90       	ld	r0, Z+
    fe3e:	00 20       	and	r0, r0
    fe40:	e9 f7       	brne	.-6      	; 0xfe3c <cat+0x5a>
    fe42:	31 97       	sbiw	r30, 0x01	; 1
    fe44:	e0 1b       	sub	r30, r16
    fe46:	f1 0b       	sbc	r31, r17
    fe48:	ce 0e       	add	r12, r30
    fe4a:	df 1e       	adc	r13, r31
        puts(line);
    fe4c:	c8 01       	movw	r24, r16
    fe4e:	0e 94 13 76 	call	0xec26	; 0xec26 <puts>
        if(dopage)
    fe52:	81 14       	cp	r8, r1
    fe54:	91 04       	cpc	r9, r1
    fe56:	49 f4       	brne	.+18     	; 0xfe6a <cat+0x88>
    if (!fp)
    {
        printf("Can't open: %s\n", name);
        return(0);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    fe58:	a7 01       	movw	r20, r14
    fe5a:	6e ef       	ldi	r22, 0xFE	; 254
    fe5c:	70 e0       	ldi	r23, 0x00	; 0
    fe5e:	c8 01       	movw	r24, r16
    fe60:	0e 94 c7 75 	call	0xeb8e	; 0xeb8e <fgets>
    fe64:	89 2b       	or	r24, r25
    fe66:	31 f7       	brne	.-52     	; 0xfe34 <cat+0x52>
    fe68:	06 c0       	rjmp	.+12     	; 0xfe76 <cat+0x94>
        trim_tail(line);
        size += strlen(line);
        puts(line);
        if(dopage)
        {
            count = testpage(++count);
    fe6a:	c5 01       	movw	r24, r10
    fe6c:	01 96       	adiw	r24, 0x01	; 1
    fe6e:	86 df       	rcall	.-244    	; 0xfd7c <testpage>
    fe70:	5c 01       	movw	r10, r24
            if(count < 0)
    fe72:	97 ff       	sbrs	r25, 7
    fe74:	f1 cf       	rjmp	.-30     	; 0xfe58 <cat+0x76>
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    printf("\n");
    fe76:	82 ed       	ldi	r24, 0xD2	; 210
    fe78:	9d e0       	ldi	r25, 0x0D	; 13
    fe7a:	1f 92       	push	r1
    fe7c:	9f 93       	push	r25
    fe7e:	8f 93       	push	r24
    fe80:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    fclose(fp);
    fe84:	c7 01       	movw	r24, r14
    fe86:	fc dc       	rcall	.-1544   	; 0xf880 <fclose>
    printf("%ld bytes\n", (long)size);
    fe88:	0d 2c       	mov	r0, r13
    fe8a:	00 0c       	add	r0, r0
    fe8c:	ee 08       	sbc	r14, r14
    fe8e:	ff 08       	sbc	r15, r15
    fe90:	ff 92       	push	r15
    fe92:	ef 92       	push	r14
    fe94:	df 92       	push	r13
    fe96:	cf 92       	push	r12
    fe98:	87 ec       	ldi	r24, 0xC7	; 199
    fe9a:	9d e0       	ldi	r25, 0x0D	; 13
    fe9c:	1f 92       	push	r1
    fe9e:	9f 93       	push	r25
    fea0:	8f 93       	push	r24
    fea2:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    return(size);
    fea6:	0f b6       	in	r0, 0x3f	; 63
    fea8:	f8 94       	cli
    feaa:	de bf       	out	0x3e, r29	; 62
    feac:	0f be       	out	0x3f, r0	; 63
    feae:	cd bf       	out	0x3d, r28	; 61
}
    feb0:	c7 01       	movw	r24, r14
    feb2:	b6 01       	movw	r22, r12
    feb4:	d3 95       	inc	r29
    feb6:	ec e0       	ldi	r30, 0x0C	; 12
    feb8:	0c 94 35 e8 	jmp	0x1d06a	; 0x1d06a <__epilogue_restores__+0xc>

0000febc <ls_info>:
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
    febc:	4f 92       	push	r4
    febe:	5f 92       	push	r5
    fec0:	6f 92       	push	r6
    fec2:	7f 92       	push	r7
    fec4:	af 92       	push	r10
    fec6:	bf 92       	push	r11
    fec8:	cf 92       	push	r12
    feca:	df 92       	push	r13
    fecc:	ef 92       	push	r14
    fece:	ff 92       	push	r15
    fed0:	0f 93       	push	r16
    fed2:	1f 93       	push	r17
    fed4:	cf 93       	push	r28
    fed6:	df 93       	push	r29
    fed8:	cd b7       	in	r28, 0x3d	; 61
    feda:	de b7       	in	r29, 0x3e	; 62
    fedc:	ec 97       	sbiw	r28, 0x3c	; 60
    fede:	0f b6       	in	r0, 0x3f	; 63
    fee0:	f8 94       	cli
    fee2:	de bf       	out	0x3e, r29	; 62
    fee4:	0f be       	out	0x3f, r0	; 63
    fee6:	cd bf       	out	0x3d, r28	; 61
    fee8:	8c 01       	movw	r16, r24
    feea:	7b 01       	movw	r14, r22
    uint16_t mask;
    char *cm = "rwx";
    char attr[12], *p;


    if(stat(name, &sp) == -1) 
    feec:	be 01       	movw	r22, r28
    feee:	6f 5f       	subi	r22, 0xFF	; 255
    fef0:	7f 4f       	sbci	r23, 0xFF	; 255
    fef2:	30 d9       	rcall	.-3488   	; 0xf154 <stat>
    fef4:	01 96       	adiw	r24, 0x01	; 1
    fef6:	89 f4       	brne	.+34     	; 0xff1a <__DATA_REGION_LENGTH__+0x1a>
    {
        printf("can not stat: %s\n", name);
    fef8:	1f 93       	push	r17
    fefa:	0f 93       	push	r16
    fefc:	87 e3       	ldi	r24, 0x37	; 55
    fefe:	9d e0       	ldi	r25, 0x0D	; 13
    ff00:	1f 92       	push	r1
    ff02:	9f 93       	push	r25
    ff04:	8f 93       	push	r24
    ff06:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
        return(0);
    ff0a:	0f 90       	pop	r0
    ff0c:	0f 90       	pop	r0
    ff0e:	0f 90       	pop	r0
    ff10:	0f 90       	pop	r0
    ff12:	0f 90       	pop	r0
    ff14:	80 e0       	ldi	r24, 0x00	; 0
    ff16:	90 e0       	ldi	r25, 0x00	; 0
    ff18:	79 c0       	rjmp	.+242    	; 0x1000c <__EEPROM_REGION_LENGTH__+0xc>
    }

    if(!verbose)
    ff1a:	ef 28       	or	r14, r15
    ff1c:	91 f4       	brne	.+36     	; 0xff42 <__DATA_REGION_LENGTH__+0x42>
    {
        printf("%s\n",basename(name));
    ff1e:	c8 01       	movw	r24, r16
    ff20:	0e 94 80 76 	call	0xed00	; 0xed00 <basename>
    ff24:	9f 93       	push	r25
    ff26:	8f 93       	push	r24
    ff28:	83 e3       	ldi	r24, 0x33	; 51
    ff2a:	9d e0       	ldi	r25, 0x0D	; 13
    ff2c:	1f 92       	push	r1
    ff2e:	9f 93       	push	r25
    ff30:	8f 93       	push	r24
    ff32:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
        return(1);
    ff36:	0f 90       	pop	r0
    ff38:	0f 90       	pop	r0
    ff3a:	0f 90       	pop	r0
    ff3c:	0f 90       	pop	r0
    ff3e:	0f 90       	pop	r0
    ff40:	63 c0       	rjmp	.+198    	; 0x10008 <__EEPROM_REGION_LENGTH__+0x8>
    }

    p = attr;
    if(S_ISDIR(sp.st_mode))
    ff42:	49 84       	ldd	r4, Y+9	; 0x09
    ff44:	5a 84       	ldd	r5, Y+10	; 0x0a
    ff46:	6b 84       	ldd	r6, Y+11	; 0x0b
    ff48:	7c 84       	ldd	r7, Y+12	; 0x0c
    ff4a:	d3 01       	movw	r26, r6
    ff4c:	c2 01       	movw	r24, r4
    ff4e:	88 27       	eor	r24, r24
    ff50:	90 7f       	andi	r25, 0xF0	; 240
    ff52:	aa 27       	eor	r26, r26
    ff54:	bb 27       	eor	r27, r27
    ff56:	81 15       	cp	r24, r1
    ff58:	90 44       	sbci	r25, 0x40	; 64
    ff5a:	a1 05       	cpc	r26, r1
    ff5c:	b1 05       	cpc	r27, r1
    ff5e:	11 f4       	brne	.+4      	; 0xff64 <__DATA_REGION_LENGTH__+0x64>
        *p++ = 'd';
    ff60:	84 e6       	ldi	r24, 0x64	; 100
    ff62:	01 c0       	rjmp	.+2      	; 0xff66 <__DATA_REGION_LENGTH__+0x66>
    else
        *p++ = '-';
    ff64:	8d e2       	ldi	r24, 0x2D	; 45
    ff66:	89 ab       	std	Y+49, r24	; 0x31
    ff68:	fe 01       	movw	r30, r28
    ff6a:	f1 96       	adiw	r30, 0x31	; 49
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
    ff6c:	e1 2c       	mov	r14, r1
    ff6e:	ff 24       	eor	r15, r15
    ff70:	f3 94       	inc	r15
    ff72:	20 e0       	ldi	r18, 0x00	; 0
    ff74:	30 e0       	ldi	r19, 0x00	; 0
    ff76:	5f 01       	movw	r10, r30
    {
        // User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
    ff78:	4d e2       	ldi	r20, 0x2D	; 45
    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
        // User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
    ff7a:	53 e0       	ldi	r21, 0x03	; 3
    ff7c:	c5 2e       	mov	r12, r21
    ff7e:	d1 2c       	mov	r13, r1

    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
        // User
        if( sp.st_mode & mask)
    ff80:	c7 01       	movw	r24, r14
    ff82:	a0 e0       	ldi	r26, 0x00	; 0
    ff84:	b0 e0       	ldi	r27, 0x00	; 0
    ff86:	84 21       	and	r24, r4
    ff88:	95 21       	and	r25, r5
    ff8a:	a6 21       	and	r26, r6
    ff8c:	b7 21       	and	r27, r7
    ff8e:	89 2b       	or	r24, r25
    ff90:	8a 2b       	or	r24, r26
    ff92:	8b 2b       	or	r24, r27
    ff94:	51 f0       	breq	.+20     	; 0xffaa <__DATA_REGION_LENGTH__+0xaa>
            *p++ = cm[ i % 3];
    ff96:	c9 01       	movw	r24, r18
    ff98:	b6 01       	movw	r22, r12
    ff9a:	0e 94 7e e7 	call	0x1cefc	; 0x1cefc <__divmodhi4>
    ff9e:	dc 01       	movw	r26, r24
    ffa0:	a8 5e       	subi	r26, 0xE8	; 232
    ffa2:	b4 4f       	sbci	r27, 0xF4	; 244
    ffa4:	8c 91       	ld	r24, X
    ffa6:	81 83       	std	Z+1, r24	; 0x01
    ffa8:	01 c0       	rjmp	.+2      	; 0xffac <__DATA_REGION_LENGTH__+0xac>
        else
            *p++ = '-';
    ffaa:	41 83       	std	Z+1, r20	; 0x01
        mask >>= 1;
    ffac:	f6 94       	lsr	r15
    ffae:	e7 94       	ror	r14
        *p++ = 'd';
    else
        *p++ = '-';

    mask = 4 << 6;
    for(i=0;i<9;++i)
    ffb0:	2f 5f       	subi	r18, 0xFF	; 255
    ffb2:	3f 4f       	sbci	r19, 0xFF	; 255
    ffb4:	31 96       	adiw	r30, 0x01	; 1
    ffb6:	29 30       	cpi	r18, 0x09	; 9
    ffb8:	31 05       	cpc	r19, r1
    ffba:	11 f7       	brne	.-60     	; 0xff80 <__DATA_REGION_LENGTH__+0x80>
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
        mask >>= 1;
    }
    *p = 0;
    ffbc:	1b ae       	std	Y+59, r1	; 0x3b

    printf("%s none none %12ld %s %s\n",
    ffbe:	c8 01       	movw	r24, r16
    ffc0:	0e 94 80 76 	call	0xed00	; 0xed00 <basename>
    ffc4:	18 2f       	mov	r17, r24
    ffc6:	09 2f       	mov	r16, r25
    ffc8:	69 a5       	ldd	r22, Y+41	; 0x29
    ffca:	7a a5       	ldd	r23, Y+42	; 0x2a
    ffcc:	8b a5       	ldd	r24, Y+43	; 0x2b
    ffce:	9c a5       	ldd	r25, Y+44	; 0x2c
    ffd0:	0e 94 5b 76 	call	0xecb6	; 0xecb6 <mctime>
    ffd4:	0f 93       	push	r16
    ffd6:	1f 93       	push	r17
    ffd8:	9f 93       	push	r25
    ffda:	8f 93       	push	r24
    ffdc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    ffde:	8f 93       	push	r24
    ffe0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    ffe2:	8f 93       	push	r24
    ffe4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    ffe6:	8f 93       	push	r24
    ffe8:	89 8d       	ldd	r24, Y+25	; 0x19
    ffea:	8f 93       	push	r24
    ffec:	bf 92       	push	r11
    ffee:	af 92       	push	r10
    fff0:	89 e1       	ldi	r24, 0x19	; 25
    fff2:	9d e0       	ldi	r25, 0x0D	; 13
    fff4:	1f 92       	push	r1
    fff6:	9f 93       	push	r25
    fff8:	8f 93       	push	r24
    fffa:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
        attr, 
        (long) sp.st_size, 
        mctime((time_t)sp.st_mtime),
        basename(name));
    return(1);
    fffe:	0f b6       	in	r0, 0x3f	; 63
   10000:	f8 94       	cli
   10002:	de bf       	out	0x3e, r29	; 62
   10004:	0f be       	out	0x3f, r0	; 63
   10006:	cd bf       	out	0x3d, r28	; 61
   10008:	81 e0       	ldi	r24, 0x01	; 1
   1000a:	90 e0       	ldi	r25, 0x00	; 0
}
   1000c:	ec 96       	adiw	r28, 0x3c	; 60
   1000e:	0f b6       	in	r0, 0x3f	; 63
   10010:	f8 94       	cli
   10012:	de bf       	out	0x3e, r29	; 62
   10014:	0f be       	out	0x3f, r0	; 63
   10016:	cd bf       	out	0x3d, r28	; 61
   10018:	df 91       	pop	r29
   1001a:	cf 91       	pop	r28
   1001c:	1f 91       	pop	r17
   1001e:	0f 91       	pop	r16
   10020:	ff 90       	pop	r15
   10022:	ef 90       	pop	r14
   10024:	df 90       	pop	r13
   10026:	cf 90       	pop	r12
   10028:	bf 90       	pop	r11
   1002a:	af 90       	pop	r10
   1002c:	7f 90       	pop	r7
   1002e:	6f 90       	pop	r6
   10030:	5f 90       	pop	r5
   10032:	4f 90       	pop	r4
   10034:	08 95       	ret

00010036 <ls>:
/// @param[in] path: file name or directory
/// @param[in] option: -l for detail
/// @return  number of files
MEMSPACE
int ls(char *name, int verbose)
{
   10036:	2f 92       	push	r2
   10038:	3f 92       	push	r3
   1003a:	4f 92       	push	r4
   1003c:	5f 92       	push	r5
   1003e:	6f 92       	push	r6
   10040:	8f 92       	push	r8
   10042:	9f 92       	push	r9
   10044:	af 92       	push	r10
   10046:	bf 92       	push	r11
   10048:	cf 92       	push	r12
   1004a:	df 92       	push	r13
   1004c:	ef 92       	push	r14
   1004e:	ff 92       	push	r15
   10050:	0f 93       	push	r16
   10052:	1f 93       	push	r17
   10054:	cf 93       	push	r28
   10056:	df 93       	push	r29
   10058:	cd b7       	in	r28, 0x3d	; 61
   1005a:	de b7       	in	r29, 0x3e	; 62
   1005c:	c2 53       	subi	r28, 0x32	; 50
   1005e:	d1 40       	sbci	r29, 0x01	; 1
   10060:	0f b6       	in	r0, 0x3f	; 63
   10062:	f8 94       	cli
   10064:	de bf       	out	0x3e, r29	; 62
   10066:	0f be       	out	0x3f, r0	; 63
   10068:	cd bf       	out	0x3d, r28	; 61
   1006a:	7c 01       	movw	r14, r24
   1006c:	4b 01       	movw	r8, r22
    int files = 0;
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
   1006e:	19 82       	std	Y+1, r1	; 0x01
   10070:	8e 01       	movw	r16, r28
   10072:	0f 5f       	subi	r16, 0xFF	; 255
   10074:	1f 4f       	sbci	r17, 0xFF	; 255
    if(!name || !*name || MATCH(name,".") )
   10076:	00 97       	sbiw	r24, 0x00	; 0
   10078:	91 f4       	brne	.+36     	; 0x1009e <ls+0x68>
    {
        if( !getcwd(fullpath, sizeof(fullpath)-2) )
   1007a:	6e ef       	ldi	r22, 0xFE	; 254
   1007c:	70 e0       	ldi	r23, 0x00	; 0
   1007e:	c8 01       	movw	r24, r16
   10080:	0e 94 d6 76 	call	0xedac	; 0xedac <getcwd>
   10084:	89 2b       	or	r24, r25
   10086:	d1 f4       	brne	.+52     	; 0x100bc <ls+0x86>
        {
            printf("ls: Can't get current directory\n"); 
   10088:	88 ef       	ldi	r24, 0xF8	; 248
   1008a:	9c e0       	ldi	r25, 0x0C	; 12
   1008c:	1f 92       	push	r1
   1008e:	9f 93       	push	r25
   10090:	8f 93       	push	r24
   10092:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
            return(0); 
   10096:	0f 90       	pop	r0
   10098:	0f 90       	pop	r0
   1009a:	0f 90       	pop	r0
   1009c:	3b c0       	rjmp	.+118    	; 0x10114 <ls+0xde>
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
    if(!name || !*name || MATCH(name,".") )
   1009e:	fc 01       	movw	r30, r24
   100a0:	80 81       	ld	r24, Z
   100a2:	88 23       	and	r24, r24
   100a4:	51 f3       	breq	.-44     	; 0x1007a <ls+0x44>
   100a6:	69 e7       	ldi	r22, 0x79	; 121
   100a8:	72 e1       	ldi	r23, 0x12	; 18
   100aa:	c7 01       	movw	r24, r14
   100ac:	0e 94 f4 32 	call	0x65e8	; 0x65e8 <MATCH>
   100b0:	89 2b       	or	r24, r25
   100b2:	19 f7       	brne	.-58     	; 0x1007a <ls+0x44>

        }
    }
    else
    {
        strcpy(fullpath,name);
   100b4:	b7 01       	movw	r22, r14
   100b6:	c8 01       	movw	r24, r16
   100b8:	0e 94 17 32 	call	0x642e	; 0x642e <strcpy>
    }
    len = strlen(fullpath);
   100bc:	f8 01       	movw	r30, r16
   100be:	01 90       	ld	r0, Z+
   100c0:	00 20       	and	r0, r0
   100c2:	e9 f7       	brne	.-6      	; 0x100be <ls+0x88>
   100c4:	31 97       	sbiw	r30, 0x01	; 1
   100c6:	1f 01       	movw	r2, r30
   100c8:	20 1a       	sub	r2, r16
   100ca:	31 0a       	sbc	r3, r17


    printf("Listing:[%s]\n",fullpath);
   100cc:	1f 93       	push	r17
   100ce:	0f 93       	push	r16
   100d0:	8a ee       	ldi	r24, 0xEA	; 234
   100d2:	9c e0       	ldi	r25, 0x0C	; 12
   100d4:	1f 92       	push	r1
   100d6:	9f 93       	push	r25
   100d8:	8f 93       	push	r24
   100da:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>

    if (stat(fullpath, &st)) 
   100de:	be 01       	movw	r22, r28
   100e0:	6f 5f       	subi	r22, 0xFF	; 255
   100e2:	7e 4f       	sbci	r23, 0xFE	; 254
   100e4:	c8 01       	movw	r24, r16
   100e6:	36 d8       	rcall	.-3988   	; 0xf154 <stat>
   100e8:	7c 01       	movw	r14, r24
   100ea:	0f 90       	pop	r0
   100ec:	0f 90       	pop	r0
   100ee:	0f 90       	pop	r0
   100f0:	0f 90       	pop	r0
   100f2:	0f 90       	pop	r0
   100f4:	89 2b       	or	r24, r25
   100f6:	89 f0       	breq	.+34     	; 0x1011a <ls+0xe4>
    { 
        printf("ls: cannot stat [%s]\n", fullpath); 
   100f8:	1f 93       	push	r17
   100fa:	0f 93       	push	r16
   100fc:	84 ed       	ldi	r24, 0xD4	; 212
   100fe:	9c e0       	ldi	r25, 0x0C	; 12
   10100:	1f 92       	push	r1
   10102:	9f 93       	push	r25
   10104:	8f 93       	push	r24
   10106:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
        return(0); 
   1010a:	0f 90       	pop	r0
   1010c:	0f 90       	pop	r0
   1010e:	0f 90       	pop	r0
   10110:	0f 90       	pop	r0
   10112:	0f 90       	pop	r0
   10114:	e1 2c       	mov	r14, r1
   10116:	f1 2c       	mov	r15, r1
   10118:	8f c0       	rjmp	.+286    	; 0x10238 <ls+0x202>
    }

    switch (st.st_mode & S_IFMT) 
   1011a:	c7 5f       	subi	r28, 0xF7	; 247
   1011c:	de 4f       	sbci	r29, 0xFE	; 254
   1011e:	88 81       	ld	r24, Y
   10120:	99 81       	ldd	r25, Y+1	; 0x01
   10122:	aa 81       	ldd	r26, Y+2	; 0x02
   10124:	bb 81       	ldd	r27, Y+3	; 0x03
   10126:	c9 50       	subi	r28, 0x09	; 9
   10128:	d1 40       	sbci	r29, 0x01	; 1
   1012a:	88 27       	eor	r24, r24
   1012c:	90 7f       	andi	r25, 0xF0	; 240
   1012e:	aa 27       	eor	r26, r26
   10130:	bb 27       	eor	r27, r27
   10132:	81 15       	cp	r24, r1
   10134:	f0 e4       	ldi	r31, 0x40	; 64
   10136:	9f 07       	cpc	r25, r31
   10138:	a1 05       	cpc	r26, r1
   1013a:	b1 05       	cpc	r27, r1
   1013c:	51 f0       	breq	.+20     	; 0x10152 <ls+0x11c>
   1013e:	81 15       	cp	r24, r1
   10140:	90 48       	sbci	r25, 0x80	; 128
   10142:	a1 05       	cpc	r26, r1
   10144:	b1 05       	cpc	r27, r1
   10146:	09 f0       	breq	.+2      	; 0x1014a <ls+0x114>
   10148:	67 c0       	rjmp	.+206    	; 0x10218 <ls+0x1e2>
    {
    case S_IFREG:
        ls_info(fullpath,verbose);
   1014a:	b4 01       	movw	r22, r8
   1014c:	c8 01       	movw	r24, r16
   1014e:	b6 de       	rcall	.-660    	; 0xfebc <ls_info>
   10150:	63 c0       	rjmp	.+198    	; 0x10218 <ls+0x1e2>
        break;
    case S_IFDIR:
        dirp = opendir(fullpath);
   10152:	c8 01       	movw	r24, r16
   10154:	0e 94 84 77 	call	0xef08	; 0xef08 <opendir>
   10158:	5c 01       	movw	r10, r24
        if(!dirp)
   1015a:	89 2b       	or	r24, r25
   1015c:	79 f0       	breq	.+30     	; 0x1017c <ls+0x146>
    }
    else
    {
        strcpy(fullpath,name);
    }
    len = strlen(fullpath);
   1015e:	e1 2c       	mov	r14, r1
   10160:	f1 2c       	mov	r15, r1
                strcat(fullpath,"/");
            }
            strcat(fullpath,de->d_name);
            files +=ls_info(fullpath,verbose);
            // restore path
            fullpath[len] = 0;
   10162:	c8 01       	movw	r24, r16
   10164:	82 0d       	add	r24, r2
   10166:	93 1d       	adc	r25, r3
   10168:	cf 5c       	subi	r28, 0xCF	; 207
   1016a:	de 4f       	sbci	r29, 0xFE	; 254
   1016c:	99 83       	std	Y+1, r25	; 0x01
   1016e:	88 83       	st	Y, r24
   10170:	c1 53       	subi	r28, 0x31	; 49
   10172:	d1 40       	sbci	r29, 0x01	; 1
                break;
            // FIXME neeed beetter string length tests here
            len2 = strlen(de->d_name);
            if(len + len2 >= MAX_NAME_LEN)
            {
                printf("name:[%s] too long with full path\n",de->d_name);
   10174:	81 ea       	ldi	r24, 0xA1	; 161
   10176:	9c e0       	ldi	r25, 0x0C	; 12
   10178:	2c 01       	movw	r4, r24
   1017a:	27 c0       	rjmp	.+78     	; 0x101ca <ls+0x194>
        break;
    case S_IFDIR:
        dirp = opendir(fullpath);
        if(!dirp)
        {
            printf("opendir failed\n");
   1017c:	84 ec       	ldi	r24, 0xC4	; 196
   1017e:	9c e0       	ldi	r25, 0x0C	; 12
   10180:	1f 92       	push	r1
   10182:	9f 93       	push	r25
   10184:	8f 93       	push	r24
   10186:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
            return(0);
   1018a:	0f 90       	pop	r0
   1018c:	0f 90       	pop	r0
   1018e:	0f 90       	pop	r0
   10190:	53 c0       	rjmp	.+166    	; 0x10238 <ls+0x202>
        }
        while ( (de = readdir(dirp)) ) 
        {
            if(de->d_name[0] == 0)
   10192:	f6 01       	movw	r30, r12
   10194:	80 81       	ld	r24, Z
   10196:	88 23       	and	r24, r24
   10198:	f1 f0       	breq	.+60     	; 0x101d6 <ls+0x1a0>
                break;
            // FIXME neeed beetter string length tests here
            len2 = strlen(de->d_name);
   1019a:	f6 01       	movw	r30, r12
   1019c:	01 90       	ld	r0, Z+
   1019e:	00 20       	and	r0, r0
   101a0:	e9 f7       	brne	.-6      	; 0x1019c <ls+0x166>
   101a2:	31 97       	sbiw	r30, 0x01	; 1
   101a4:	ec 19       	sub	r30, r12
   101a6:	fd 09       	sbc	r31, r13
            if(len + len2 >= MAX_NAME_LEN)
   101a8:	e2 0d       	add	r30, r2
   101aa:	f3 1d       	adc	r31, r3
   101ac:	ef 3f       	cpi	r30, 0xFF	; 255
   101ae:	f1 05       	cpc	r31, r1
   101b0:	b4 f0       	brlt	.+44     	; 0x101de <ls+0x1a8>
            {
                printf("name:[%s] too long with full path\n",de->d_name);
   101b2:	df 92       	push	r13
   101b4:	cf 92       	push	r12
   101b6:	1f 92       	push	r1
   101b8:	5f 92       	push	r5
   101ba:	4f 92       	push	r4
   101bc:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
                continue;
   101c0:	0f 90       	pop	r0
   101c2:	0f 90       	pop	r0
   101c4:	0f 90       	pop	r0
   101c6:	0f 90       	pop	r0
   101c8:	0f 90       	pop	r0
        if(!dirp)
        {
            printf("opendir failed\n");
            return(0);
        }
        while ( (de = readdir(dirp)) ) 
   101ca:	c5 01       	movw	r24, r10
   101cc:	0e 94 a2 77 	call	0xef44	; 0xef44 <readdir>
   101d0:	6c 01       	movw	r12, r24
   101d2:	89 2b       	or	r24, r25
   101d4:	f1 f6       	brne	.-68     	; 0x10192 <ls+0x15c>
#ifdef ESP8266
            optimistic_yield(1000);
            wdt_reset();
#endif
        }
        closedir(dirp);
   101d6:	c5 01       	movw	r24, r10
   101d8:	0e 94 69 77 	call	0xeed2	; 0xeed2 <closedir>
        break;
   101dc:	1f c0       	rjmp	.+62     	; 0x1021c <ls+0x1e6>
            if(len + len2 >= MAX_NAME_LEN)
            {
                printf("name:[%s] too long with full path\n",de->d_name);
                continue;
            }
            if(!MATCH(fullpath,"/") )
   101de:	6c e1       	ldi	r22, 0x1C	; 28
   101e0:	78 e0       	ldi	r23, 0x08	; 8
   101e2:	c8 01       	movw	r24, r16
   101e4:	0e 94 f4 32 	call	0x65e8	; 0x65e8 <MATCH>
   101e8:	89 2b       	or	r24, r25
   101ea:	29 f4       	brne	.+10     	; 0x101f6 <ls+0x1c0>
            {
                strcat(fullpath,"/");
   101ec:	6c e1       	ldi	r22, 0x1C	; 28
   101ee:	78 e0       	ldi	r23, 0x08	; 8
   101f0:	c8 01       	movw	r24, r16
   101f2:	0e 94 38 32 	call	0x6470	; 0x6470 <strcat>
            }
            strcat(fullpath,de->d_name);
   101f6:	b6 01       	movw	r22, r12
   101f8:	c8 01       	movw	r24, r16
   101fa:	0e 94 38 32 	call	0x6470	; 0x6470 <strcat>
            files +=ls_info(fullpath,verbose);
   101fe:	b4 01       	movw	r22, r8
   10200:	c8 01       	movw	r24, r16
   10202:	5c de       	rcall	.-840    	; 0xfebc <ls_info>
   10204:	e8 0e       	add	r14, r24
   10206:	f9 1e       	adc	r15, r25
            // restore path
            fullpath[len] = 0;
   10208:	cf 5c       	subi	r28, 0xCF	; 207
   1020a:	de 4f       	sbci	r29, 0xFE	; 254
   1020c:	e8 81       	ld	r30, Y
   1020e:	f9 81       	ldd	r31, Y+1	; 0x01
   10210:	c1 53       	subi	r28, 0x31	; 49
   10212:	d1 40       	sbci	r29, 0x01	; 1
   10214:	10 82       	st	Z, r1
   10216:	d9 cf       	rjmp	.-78     	; 0x101ca <ls+0x194>
MEMSPACE
int ls(char *name, int verbose)
{
    struct stat st;
    DIR *dirp;
    int files = 0;
   10218:	e1 2c       	mov	r14, r1
   1021a:	f1 2c       	mov	r15, r1
#endif
        }
        closedir(dirp);
        break;
    }
    printf("Files: %d\n", (int)files);
   1021c:	ff 92       	push	r15
   1021e:	ef 92       	push	r14
   10220:	86 e9       	ldi	r24, 0x96	; 150
   10222:	9c e0       	ldi	r25, 0x0C	; 12
   10224:	1f 92       	push	r1
   10226:	9f 93       	push	r25
   10228:	8f 93       	push	r24
   1022a:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    return(files);
   1022e:	0f 90       	pop	r0
   10230:	0f 90       	pop	r0
   10232:	0f 90       	pop	r0
   10234:	0f 90       	pop	r0
   10236:	0f 90       	pop	r0
}
   10238:	c7 01       	movw	r24, r14
   1023a:	ce 5c       	subi	r28, 0xCE	; 206
   1023c:	de 4f       	sbci	r29, 0xFE	; 254
   1023e:	0f b6       	in	r0, 0x3f	; 63
   10240:	f8 94       	cli
   10242:	de bf       	out	0x3e, r29	; 62
   10244:	0f be       	out	0x3f, r0	; 63
   10246:	cd bf       	out	0x3d, r28	; 61
   10248:	df 91       	pop	r29
   1024a:	cf 91       	pop	r28
   1024c:	1f 91       	pop	r17
   1024e:	0f 91       	pop	r16
   10250:	ff 90       	pop	r15
   10252:	ef 90       	pop	r14
   10254:	df 90       	pop	r13
   10256:	cf 90       	pop	r12
   10258:	bf 90       	pop	r11
   1025a:	af 90       	pop	r10
   1025c:	9f 90       	pop	r9
   1025e:	8f 90       	pop	r8
   10260:	6f 90       	pop	r6
   10262:	5f 90       	pop	r5
   10264:	4f 90       	pop	r4
   10266:	3f 90       	pop	r3
   10268:	2f 90       	pop	r2
   1026a:	08 95       	ret

0001026c <posix_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int posix_tests(int argc,char *argv[])
{
   1026c:	a0 e0       	ldi	r26, 0x00	; 0
   1026e:	b1 e0       	ldi	r27, 0x01	; 1
   10270:	ec e3       	ldi	r30, 0x3C	; 60
   10272:	f1 e8       	ldi	r31, 0x81	; 129
   10274:	0c 94 15 e8 	jmp	0x1d02a	; 0x1d02a <__prologue_saves__+0x4>
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   10278:	fb 01       	movw	r30, r22
   1027a:	c0 80       	ld	r12, Z
   1027c:	d1 80       	ldd	r13, Z+1	; 0x01

    if(!ptr)
   1027e:	c1 14       	cp	r12, r1
   10280:	d1 04       	cpc	r13, r1
   10282:	19 f4       	brne	.+6      	; 0x1028a <posix_tests+0x1e>
        return(0);
   10284:	80 e0       	ldi	r24, 0x00	; 0
   10286:	90 e0       	ldi	r25, 0x00	; 0
   10288:	67 c1       	rjmp	.+718    	; 0x10558 <posix_tests+0x2ec>
   1028a:	4b 01       	movw	r8, r22
   1028c:	8c 01       	movw	r16, r24

    if( MATCH(ptr,"posix") )
   1028e:	6c e1       	ldi	r22, 0x1C	; 28
   10290:	7b e0       	ldi	r23, 0x0B	; 11
   10292:	c6 01       	movw	r24, r12
   10294:	0e 94 f4 32 	call	0x65e8	; 0x65e8 <MATCH>
   10298:	89 2b       	or	r24, r25
   1029a:	a9 f0       	breq	.+42     	; 0x102c6 <posix_tests+0x5a>
    {
        ptr = argv[ind++];
   1029c:	f4 01       	movw	r30, r8
   1029e:	c2 80       	ldd	r12, Z+2	; 0x02
   102a0:	d3 80       	ldd	r13, Z+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
   102a2:	c1 14       	cp	r12, r1
   102a4:	d1 04       	cpc	r13, r1
   102a6:	21 f4       	brne	.+8      	; 0x102b0 <posix_tests+0x44>
        {
            posix_help(1);
   102a8:	81 e0       	ldi	r24, 0x01	; 1
   102aa:	90 e0       	ldi	r25, 0x00	; 0
   102ac:	6b dc       	rcall	.-1834   	; 0xfb84 <posix_help>
   102ae:	52 c1       	rjmp	.+676    	; 0x10554 <posix_tests+0x2e8>
        return(0);

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
   102b0:	6a e2       	ldi	r22, 0x2A	; 42
   102b2:	76 e1       	ldi	r23, 0x16	; 22
   102b4:	c6 01       	movw	r24, r12
   102b6:	0e 94 f4 32 	call	0x65e8	; 0x65e8 <MATCH>
   102ba:	89 2b       	or	r24, r25
   102bc:	a9 f7       	brne	.-22     	; 0x102a8 <posix_tests+0x3c>
    if(!ptr)
        return(0);

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
   102be:	42 e0       	ldi	r20, 0x02	; 2
   102c0:	64 2e       	mov	r6, r20
   102c2:	71 2c       	mov	r7, r1
   102c4:	03 c0       	rjmp	.+6      	; 0x102cc <posix_tests+0x60>
{
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   102c6:	66 24       	eor	r6, r6
   102c8:	63 94       	inc	r6
   102ca:	71 2c       	mov	r7, r1
            posix_help(1);
            return(1);
        }
    }

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
   102cc:	73 01       	movw	r14, r6
   102ce:	ff ef       	ldi	r31, 0xFF	; 255
   102d0:	ef 1a       	sub	r14, r31
   102d2:	ff 0a       	sbc	r15, r31
   102d4:	98 01       	movw	r18, r16
   102d6:	a7 01       	movw	r20, r14
   102d8:	62 e2       	ldi	r22, 0x22	; 34
   102da:	7b e0       	ldi	r23, 0x0B	; 11
   102dc:	c6 01       	movw	r24, r12
   102de:	0e 94 08 33 	call	0x6610	; 0x6610 <MATCHARGS>
   102e2:	89 2b       	or	r24, r25
   102e4:	a1 f1       	breq	.+104    	; 0x1034e <posix_tests+0xe2>
   102e6:	73 01       	movw	r14, r6
   102e8:	ee 0c       	add	r14, r14
   102ea:	ff 1c       	adc	r15, r15
   102ec:	e8 0c       	add	r14, r8
   102ee:	f9 1c       	adc	r15, r9
   102f0:	57 01       	movw	r10, r14
   102f2:	47 01       	movw	r8, r14
   102f4:	63 01       	movw	r12, r6
   102f6:	41 2c       	mov	r4, r1
   102f8:	51 2c       	mov	r5, r1
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   102fa:	c0 16       	cp	r12, r16
   102fc:	d1 06       	cpc	r13, r17
   102fe:	1c f5       	brge	.+70     	; 0x10346 <posix_tests+0xda>
        {
            if(MATCH(argv[i],"-p"))
   10300:	66 e2       	ldi	r22, 0x26	; 38
   10302:	7b e0       	ldi	r23, 0x0B	; 11
   10304:	f4 01       	movw	r30, r8
   10306:	81 91       	ld	r24, Z+
   10308:	91 91       	ld	r25, Z+
   1030a:	4f 01       	movw	r8, r30
   1030c:	0e 94 f4 32 	call	0x65e8	; 0x65e8 <MATCH>
   10310:	89 2b       	or	r24, r25
   10312:	19 f0       	breq	.+6      	; 0x1031a <posix_tests+0xae>
                page = 1;
   10314:	44 24       	eor	r4, r4
   10316:	43 94       	inc	r4
   10318:	51 2c       	mov	r5, r1

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   1031a:	ff ef       	ldi	r31, 0xFF	; 255
   1031c:	cf 1a       	sub	r12, r31
   1031e:	df 0a       	sbc	r13, r31
   10320:	ec cf       	rjmp	.-40     	; 0x102fa <posix_tests+0x8e>
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
        {
            if(!MATCH(argv[i],"-p"))
   10322:	66 e2       	ldi	r22, 0x26	; 38
   10324:	7b e0       	ldi	r23, 0x0B	; 11
   10326:	f5 01       	movw	r30, r10
   10328:	81 91       	ld	r24, Z+
   1032a:	91 91       	ld	r25, Z+
   1032c:	5f 01       	movw	r10, r30
   1032e:	0e 94 f4 32 	call	0x65e8	; 0x65e8 <MATCH>
   10332:	89 2b       	or	r24, r25
   10334:	29 f4       	brne	.+10     	; 0x10340 <posix_tests+0xd4>
                cat(argv[ind], page);
   10336:	b2 01       	movw	r22, r4
   10338:	f7 01       	movw	r30, r14
   1033a:	80 81       	ld	r24, Z
   1033c:	91 81       	ldd	r25, Z+1	; 0x01
   1033e:	51 dd       	rcall	.-1374   	; 0xfde2 <cat>
        for(i=ind;i<argc;++i)
        {
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
   10340:	ff ef       	ldi	r31, 0xFF	; 255
   10342:	6f 1a       	sub	r6, r31
   10344:	7f 0a       	sbc	r7, r31
   10346:	60 16       	cp	r6, r16
   10348:	71 06       	cpc	r7, r17
   1034a:	5c f3       	brlt	.-42     	; 0x10322 <posix_tests+0xb6>
   1034c:	03 c1       	rjmp	.+518    	; 0x10554 <posix_tests+0x2e8>
        chmod( argv[ind],strtol(argv[ind+1],NULL,8));
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"copy", (ind + 2), argc))
   1034e:	53 01       	movw	r10, r6
   10350:	82 e0       	ldi	r24, 0x02	; 2
   10352:	a8 0e       	add	r10, r24
   10354:	b1 1c       	adc	r11, r1
   10356:	98 01       	movw	r18, r16
   10358:	a5 01       	movw	r20, r10
   1035a:	69 e2       	ldi	r22, 0x29	; 41
   1035c:	7b e0       	ldi	r23, 0x0B	; 11
   1035e:	c6 01       	movw	r24, r12
   10360:	0e 94 08 33 	call	0x6610	; 0x6610 <MATCHARGS>
   10364:	89 2b       	or	r24, r25
   10366:	61 f0       	breq	.+24     	; 0x10380 <posix_tests+0x114>
    {
        copy(argv[ind],argv[ind+1]);
   10368:	ee 0c       	add	r14, r14
   1036a:	ff 1c       	adc	r15, r15
   1036c:	f4 01       	movw	r30, r8
   1036e:	ee 0d       	add	r30, r14
   10370:	ff 1d       	adc	r31, r15
   10372:	60 81       	ld	r22, Z
   10374:	71 81       	ldd	r23, Z+1	; 0x01
   10376:	32 97       	sbiw	r30, 0x02	; 2
   10378:	80 81       	ld	r24, Z
   1037a:	91 81       	ldd	r25, Z+1	; 0x01
   1037c:	1f dc       	rcall	.-1986   	; 0xfbbc <copy>
   1037e:	ea c0       	rjmp	.+468    	; 0x10554 <posix_tests+0x2e8>
        return(1);
    }

    if (MATCHARGS(ptr,"cd", (ind + 1), argc))
   10380:	98 01       	movw	r18, r16
   10382:	a7 01       	movw	r20, r14
   10384:	6e e2       	ldi	r22, 0x2E	; 46
   10386:	7b e0       	ldi	r23, 0x0B	; 11
   10388:	c6 01       	movw	r24, r12
   1038a:	0e 94 08 33 	call	0x6610	; 0x6610 <MATCHARGS>
   1038e:	89 2b       	or	r24, r25
   10390:	59 f0       	breq	.+22     	; 0x103a8 <posix_tests+0x13c>
    {
        chdir(argv[ind]);
   10392:	73 01       	movw	r14, r6
   10394:	ee 0c       	add	r14, r14
   10396:	ff 1c       	adc	r15, r15
   10398:	f4 01       	movw	r30, r8
   1039a:	ee 0d       	add	r30, r14
   1039c:	ff 1d       	adc	r31, r15
   1039e:	80 81       	ld	r24, Z
   103a0:	91 81       	ldd	r25, Z+1	; 0x01
   103a2:	0e 94 8e 76 	call	0xed1c	; 0xed1c <chdir>
   103a6:	d6 c0       	rjmp	.+428    	; 0x10554 <posix_tests+0x2e8>
        logfile(argv[ind],argv[ind+1]);
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
   103a8:	98 01       	movw	r18, r16
   103aa:	a3 01       	movw	r20, r6
   103ac:	6c e4       	ldi	r22, 0x4C	; 76
   103ae:	78 e0       	ldi	r23, 0x08	; 8
   103b0:	c6 01       	movw	r24, r12
   103b2:	0e 94 08 33 	call	0x6610	; 0x6610 <MATCHARGS>
   103b6:	89 2b       	or	r24, r25
   103b8:	69 f1       	breq	.+90     	; 0x10414 <posix_tests+0x1a8>
   103ba:	73 01       	movw	r14, r6
   103bc:	ee 0c       	add	r14, r14
   103be:	ff 1c       	adc	r15, r15
   103c0:	e8 0c       	add	r14, r8
   103c2:	f9 1c       	adc	r15, r9
   103c4:	c1 2c       	mov	r12, r1
   103c6:	d1 2c       	mov	r13, r1
    {
        int i;
        int args = 0;
        for(i=ind;i<argc;++i)
   103c8:	c6 01       	movw	r24, r12
   103ca:	86 0d       	add	r24, r6
   103cc:	97 1d       	adc	r25, r7
   103ce:	80 17       	cp	r24, r16
   103d0:	91 07       	cpc	r25, r17
   103d2:	b4 f4       	brge	.+44     	; 0x10400 <posix_tests+0x194>
        {
            if(!MATCH(argv[i],"-l"))
   103d4:	61 e3       	ldi	r22, 0x31	; 49
   103d6:	7b e0       	ldi	r23, 0x0B	; 11
   103d8:	f7 01       	movw	r30, r14
   103da:	80 81       	ld	r24, Z
   103dc:	91 81       	ldd	r25, Z+1	; 0x01
   103de:	0e 94 f4 32 	call	0x65e8	; 0x65e8 <MATCH>
   103e2:	89 2b       	or	r24, r25
   103e4:	31 f4       	brne	.+12     	; 0x103f2 <posix_tests+0x186>
                ls(argv[i],1);
   103e6:	61 e0       	ldi	r22, 0x01	; 1
   103e8:	70 e0       	ldi	r23, 0x00	; 0
   103ea:	f7 01       	movw	r30, r14
   103ec:	80 81       	ld	r24, Z
   103ee:	91 81       	ldd	r25, Z+1	; 0x01
   103f0:	22 de       	rcall	.-956    	; 0x10036 <ls>
            ++args;
   103f2:	ff ef       	ldi	r31, 0xFF	; 255
   103f4:	cf 1a       	sub	r12, r31
   103f6:	df 0a       	sbc	r13, r31
   103f8:	82 e0       	ldi	r24, 0x02	; 2
   103fa:	e8 0e       	add	r14, r24
   103fc:	f1 1c       	adc	r15, r1
   103fe:	e4 cf       	rjmp	.-56     	; 0x103c8 <posix_tests+0x15c>
        }
        if(!args)
   10400:	c1 14       	cp	r12, r1
   10402:	d1 04       	cpc	r13, r1
   10404:	09 f0       	breq	.+2      	; 0x10408 <posix_tests+0x19c>
        {
            ls("",1);
   10406:	a6 c0       	rjmp	.+332    	; 0x10554 <posix_tests+0x2e8>
   10408:	61 e0       	ldi	r22, 0x01	; 1
   1040a:	70 e0       	ldi	r23, 0x00	; 0
   1040c:	8c e3       	ldi	r24, 0x3C	; 60
   1040e:	97 e1       	ldi	r25, 0x17	; 23
   10410:	12 de       	rcall	.-988    	; 0x10036 <ls>
        mkfs(argv[ind++]);
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
   10412:	a0 c0       	rjmp	.+320    	; 0x10554 <posix_tests+0x2e8>
   10414:	98 01       	movw	r18, r16
   10416:	a7 01       	movw	r20, r14
   10418:	64 e3       	ldi	r22, 0x34	; 52
   1041a:	7b e0       	ldi	r23, 0x0B	; 11
   1041c:	c6 01       	movw	r24, r12
   1041e:	0e 94 08 33 	call	0x6610	; 0x6610 <MATCHARGS>
   10422:	89 2b       	or	r24, r25
    {
        int mode = 0777;
        if((ind+2) <= argc)
   10424:	19 f1       	breq	.+70     	; 0x1046c <posix_tests+0x200>
   10426:	e0 16       	cp	r14, r16
   10428:	f1 06       	cpc	r15, r17
        {
            mode = strtol(argv[ind+1],NULL,8);
   1042a:	7c f4       	brge	.+30     	; 0x1044a <posix_tests+0x1de>
   1042c:	ee 0c       	add	r14, r14
   1042e:	ff 1c       	adc	r15, r15
   10430:	f4 01       	movw	r30, r8
   10432:	ee 0d       	add	r30, r14
   10434:	ff 1d       	adc	r31, r15
   10436:	48 e0       	ldi	r20, 0x08	; 8
   10438:	50 e0       	ldi	r21, 0x00	; 0
   1043a:	60 e0       	ldi	r22, 0x00	; 0
   1043c:	70 e0       	ldi	r23, 0x00	; 0
   1043e:	80 81       	ld	r24, Z
   10440:	91 81       	ldd	r25, Z+1	; 0x01
   10442:	0e 94 5a 47 	call	0x8eb4	; 0x8eb4 <strtol>
   10446:	ab 01       	movw	r20, r22
    }
#endif

    if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
    {
        int mode = 0777;
   10448:	02 c0       	rjmp	.+4      	; 0x1044e <posix_tests+0x1e2>
   1044a:	4f ef       	ldi	r20, 0xFF	; 255
        if((ind+2) <= argc)
        {
            mode = strtol(argv[ind+1],NULL,8);
        }
        mkdir(argv[ind],mode);
   1044c:	51 e0       	ldi	r21, 0x01	; 1
   1044e:	05 2e       	mov	r0, r21
   10450:	00 0c       	add	r0, r0
   10452:	66 0b       	sbc	r22, r22
   10454:	77 0b       	sbc	r23, r23
   10456:	73 01       	movw	r14, r6
   10458:	ee 0c       	add	r14, r14
   1045a:	ff 1c       	adc	r15, r15
   1045c:	f4 01       	movw	r30, r8
   1045e:	ee 0d       	add	r30, r14
   10460:	ff 1d       	adc	r31, r15
   10462:	80 81       	ld	r24, Z
   10464:	91 81       	ldd	r25, Z+1	; 0x01
   10466:	0e 94 fb 76 	call	0xedf6	; 0xedf6 <mkdir>
        return(1);
    }

    if (MATCHARGS(ptr,"page", (ind + 1), argc))
   1046a:	74 c0       	rjmp	.+232    	; 0x10554 <posix_tests+0x2e8>
   1046c:	98 01       	movw	r18, r16
   1046e:	a7 01       	movw	r20, r14
   10470:	6a e3       	ldi	r22, 0x3A	; 58
   10472:	7b e0       	ldi	r23, 0x0B	; 11
   10474:	c6 01       	movw	r24, r12
   10476:	0e 94 08 33 	call	0x6610	; 0x6610 <MATCHARGS>
   1047a:	89 2b       	or	r24, r25
    {
        setpage(atoi(argv[ind]));
   1047c:	79 f0       	breq	.+30     	; 0x1049c <posix_tests+0x230>
   1047e:	73 01       	movw	r14, r6
   10480:	ee 0c       	add	r14, r14
   10482:	ff 1c       	adc	r15, r15
   10484:	f4 01       	movw	r30, r8
   10486:	ee 0d       	add	r30, r14
   10488:	ff 1d       	adc	r31, r15
   1048a:	80 81       	ld	r24, Z
   1048c:	91 81       	ldd	r25, Z+1	; 0x01
   1048e:	0e 94 be 47 	call	0x8f7c	; 0x8f7c <atoi>
/// @retrun void
static int _pagesize = 25;
MEMSPACE
int setpage(int count)
{
    _pagesize = count;
   10492:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <_pagesize+0x1>
   10496:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <_pagesize>
    {
        setpage(atoi(argv[ind]));
        return(1);
    }

    if (MATCHARGS(ptr,"pwd", (ind + 0), argc))
   1049a:	5c c0       	rjmp	.+184    	; 0x10554 <posix_tests+0x2e8>
   1049c:	98 01       	movw	r18, r16
   1049e:	a3 01       	movw	r20, r6
   104a0:	6f e3       	ldi	r22, 0x3F	; 63
   104a2:	7b e0       	ldi	r23, 0x0B	; 11
   104a4:	c6 01       	movw	r24, r12
   104a6:	0e 94 08 33 	call	0x6610	; 0x6610 <MATCHARGS>
   104aa:	89 2b       	or	r24, r25
    {
        char path[256];
        printf("%s\n", getcwd(path, sizeof(path)-2));
   104ac:	a9 f0       	breq	.+42     	; 0x104d8 <posix_tests+0x26c>
   104ae:	6e ef       	ldi	r22, 0xFE	; 254
   104b0:	70 e0       	ldi	r23, 0x00	; 0
   104b2:	ce 01       	movw	r24, r28
   104b4:	01 96       	adiw	r24, 0x01	; 1
   104b6:	0e 94 d6 76 	call	0xedac	; 0xedac <getcwd>
   104ba:	9f 93       	push	r25
   104bc:	8f 93       	push	r24
   104be:	84 ee       	ldi	r24, 0xE4	; 228
   104c0:	9d e0       	ldi	r25, 0x0D	; 13
   104c2:	1f 92       	push	r1
   104c4:	9f 93       	push	r25
   104c6:	8f 93       	push	r24
   104c8:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   104cc:	0f 90       	pop	r0
   104ce:	0f 90       	pop	r0
   104d0:	0f 90       	pop	r0
   104d2:	0f 90       	pop	r0
   104d4:	0f 90       	pop	r0
        return(1);
    }

    if (MATCHARGS(ptr,"rename", (ind + 2), argc))
   104d6:	3e c0       	rjmp	.+124    	; 0x10554 <posix_tests+0x2e8>
   104d8:	98 01       	movw	r18, r16
   104da:	a5 01       	movw	r20, r10
   104dc:	63 e4       	ldi	r22, 0x43	; 67
   104de:	7b e0       	ldi	r23, 0x0B	; 11
   104e0:	c6 01       	movw	r24, r12
   104e2:	0e 94 08 33 	call	0x6610	; 0x6610 <MATCHARGS>
   104e6:	89 2b       	or	r24, r25
    {
        rename(argv[ind],argv[ind+1]);
   104e8:	69 f0       	breq	.+26     	; 0x10504 <posix_tests+0x298>
   104ea:	ee 0c       	add	r14, r14
   104ec:	ff 1c       	adc	r15, r15
   104ee:	f4 01       	movw	r30, r8
   104f0:	ee 0d       	add	r30, r14
   104f2:	ff 1d       	adc	r31, r15
   104f4:	60 81       	ld	r22, Z
   104f6:	71 81       	ldd	r23, Z+1	; 0x01
   104f8:	32 97       	sbiw	r30, 0x02	; 2
   104fa:	80 81       	ld	r24, Z
   104fc:	91 81       	ldd	r25, Z+1	; 0x01
   104fe:	0e 94 29 77 	call	0xee52	; 0xee52 <rename>
        return(1);
    }

    if (MATCHARGS(ptr,"rm", (ind + 1), argc))
   10502:	28 c0       	rjmp	.+80     	; 0x10554 <posix_tests+0x2e8>
   10504:	98 01       	movw	r18, r16
   10506:	a7 01       	movw	r20, r14
   10508:	6a e4       	ldi	r22, 0x4A	; 74
   1050a:	7b e0       	ldi	r23, 0x0B	; 11
   1050c:	c6 01       	movw	r24, r12
   1050e:	0e 94 08 33 	call	0x6610	; 0x6610 <MATCHARGS>
   10512:	89 2b       	or	r24, r25
    {
        unlink(argv[ind]);
   10514:	59 f0       	breq	.+22     	; 0x1052c <posix_tests+0x2c0>
   10516:	73 01       	movw	r14, r6
   10518:	ee 0c       	add	r14, r14
   1051a:	ff 1c       	adc	r15, r15
   1051c:	f4 01       	movw	r30, r8
   1051e:	ee 0d       	add	r30, r14
   10520:	ff 1d       	adc	r31, r15
   10522:	80 81       	ld	r24, Z
   10524:	91 81       	ldd	r25, Z+1	; 0x01
   10526:	0e 94 48 77 	call	0xee90	; 0xee90 <unlink>
        dump_stat(&p);
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"rmdir", (ind + 1), argc))
   1052a:	14 c0       	rjmp	.+40     	; 0x10554 <posix_tests+0x2e8>
   1052c:	98 01       	movw	r18, r16
   1052e:	a7 01       	movw	r20, r14
   10530:	6d e4       	ldi	r22, 0x4D	; 77
   10532:	7b e0       	ldi	r23, 0x0B	; 11
   10534:	c6 01       	movw	r24, r12
   10536:	0e 94 08 33 	call	0x6610	; 0x6610 <MATCHARGS>
   1053a:	89 2b       	or	r24, r25
   1053c:	09 f4       	brne	.+2      	; 0x10540 <posix_tests+0x2d4>
    {
        rmdir(argv[ind]);
   1053e:	a2 ce       	rjmp	.-700    	; 0x10284 <posix_tests+0x18>
   10540:	73 01       	movw	r14, r6
   10542:	ee 0c       	add	r14, r14
   10544:	ff 1c       	adc	r15, r15
   10546:	f4 01       	movw	r30, r8
   10548:	ee 0d       	add	r30, r14
   1054a:	ff 1d       	adc	r31, r15
   1054c:	80 81       	ld	r24, Z
   1054e:	91 81       	ldd	r25, Z+1	; 0x01
   10550:	0e 94 67 77 	call	0xeece	; 0xeece <rmdir>
        return(1);
   10554:	81 e0       	ldi	r24, 0x01	; 1
        return(1);
    }
#endif

    return(0);
}
   10556:	90 e0       	ldi	r25, 0x00	; 0
   10558:	d3 95       	inc	r29
   1055a:	e0 e1       	ldi	r30, 0x10	; 16
   1055c:	0c 94 31 e8 	jmp	0x1d062	; 0x1d062 <__epilogue_restores__+0x4>

00010560 <gpib_timer_init>:
/// - Has some platform dependent code.
/// @return  void

void gpib_timer_init()
{
    if(set_timers(gpib_timer_task,1) == -1)       // Install Clock Task
   10560:	61 e0       	ldi	r22, 0x01	; 1
   10562:	70 e0       	ldi	r23, 0x00	; 0
   10564:	8d e4       	ldi	r24, 0x4D	; 77
   10566:	94 e8       	ldi	r25, 0x84	; 132
   10568:	0e 94 a0 35 	call	0x6b40	; 0x6b40 <set_timers>
   1056c:	01 96       	adiw	r24, 0x01	; 1
   1056e:	51 f4       	brne	.+20     	; 0x10584 <gpib_timer_init+0x24>
        printf("GPIB Clock task init failed\n");
   10570:	8e e0       	ldi	r24, 0x0E	; 14
   10572:	9f e0       	ldi	r25, 0x0F	; 15
   10574:	1f 92       	push	r1
   10576:	9f 93       	push	r25
   10578:	8f 93       	push	r24
   1057a:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1057e:	0f 90       	pop	r0
   10580:	0f 90       	pop	r0

    gpib_timer_reset();
   10582:	0f 90       	pop	r0
   10584:	78 c1       	rjmp	.+752    	; 0x10876 <gpib_timer_reset>
   10586:	08 95       	ret

00010588 <reverse_8bits>:
/// - GPIB D1 controls last device.
///
/// @param [in] mask: bit mask to reverse.
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
   10588:	28 2f       	mov	r18, r24
   1058a:	98 e0       	ldi	r25, 0x08	; 8
    int8_t i;
    uint8_t rmask = 0;
   1058c:	80 e0       	ldi	r24, 0x00	; 0
    for(i=0;i<8;++i)
    {
        rmask <<= 1;
   1058e:	88 0f       	add	r24, r24
        if(mask & 1)
   10590:	20 fd       	sbrc	r18, 0
            rmask |= 1;
   10592:	81 60       	ori	r24, 0x01	; 1
        mask >>= 1;
   10594:	26 95       	lsr	r18
   10596:	91 50       	subi	r25, 0x01	; 1
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
    int8_t i;
    uint8_t rmask = 0;
    for(i=0;i<8;++i)
   10598:	d1 f7       	brne	.-12     	; 0x1058e <reverse_8bits+0x6>
        if(mask & 1)
            rmask |= 1;
        mask >>= 1;
    }
    return(rmask & 0xff);
}
   1059a:	08 95       	ret

0001059c <ppr_set>:
   1059c:	f5 df       	rcall	.-22     	; 0x10588 <reverse_8bits>
   1059e:	80 93 72 19 	sts	0x1972, r24	; 0x801972 <_ppr_reg>
   105a2:	0e 94 3c 2d 	call	0x5a78	; 0x5a78 <SPI0_TXRX_Byte>
   105a6:	2a 9a       	sbi	0x05, 2	; 5
   105a8:	22 9a       	sbi	0x04, 2	; 4
   105aa:	2a 98       	cbi	0x05, 2	; 5
   105ac:	22 9a       	sbi	0x04, 2	; 4
   105ae:	08 95       	ret

000105b0 <ppr_reg>:
   105b0:	80 91 72 19 	lds	r24, 0x1972	; 0x801972 <_ppr_reg>
   105b4:	e9 cf       	rjmp	.-46     	; 0x10588 <reverse_8bits>
   105b6:	08 95       	ret

000105b8 <ppr_init>:
   105b8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   105bc:	81 ff       	sbrs	r24, 1
   105be:	0a c0       	rjmp	.+20     	; 0x105d4 <ppr_init+0x1c>
   105c0:	8b ef       	ldi	r24, 0xFB	; 251
   105c2:	9e e0       	ldi	r25, 0x0E	; 14
   105c4:	1f 92       	push	r1
   105c6:	9f 93       	push	r25
   105c8:	8f 93       	push	r24
   105ca:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   105ce:	0f 90       	pop	r0
   105d0:	0f 90       	pop	r0
   105d2:	0f 90       	pop	r0
   105d4:	80 e0       	ldi	r24, 0x00	; 0
   105d6:	e2 cf       	rjmp	.-60     	; 0x1059c <ppr_set>
   105d8:	08 95       	ret

000105da <ppr_bit_set>:
   105da:	21 e0       	ldi	r18, 0x01	; 1
   105dc:	30 e0       	ldi	r19, 0x00	; 0
   105de:	01 c0       	rjmp	.+2      	; 0x105e2 <ppr_bit_set+0x8>
   105e0:	22 0f       	add	r18, r18
   105e2:	8a 95       	dec	r24
   105e4:	ea f7       	brpl	.-6      	; 0x105e0 <ppr_bit_set+0x6>
   105e6:	80 91 72 19 	lds	r24, 0x1972	; 0x801972 <_ppr_reg>
   105ea:	82 2b       	or	r24, r18
   105ec:	80 93 72 19 	sts	0x1972, r24	; 0x801972 <_ppr_reg>
   105f0:	d5 cf       	rjmp	.-86     	; 0x1059c <ppr_set>
   105f2:	08 95       	ret

000105f4 <ppr_bit_clr>:
   105f4:	21 e0       	ldi	r18, 0x01	; 1
   105f6:	30 e0       	ldi	r19, 0x00	; 0
   105f8:	01 c0       	rjmp	.+2      	; 0x105fc <ppr_bit_clr+0x8>
   105fa:	22 0f       	add	r18, r18
   105fc:	8a 95       	dec	r24
   105fe:	ea f7       	brpl	.-6      	; 0x105fa <ppr_bit_clr+0x6>
   10600:	20 95       	com	r18
   10602:	80 91 72 19 	lds	r24, 0x1972	; 0x801972 <_ppr_reg>
   10606:	82 23       	and	r24, r18
   10608:	80 93 72 19 	sts	0x1972, r24	; 0x801972 <_ppr_reg>
   1060c:	c7 cf       	rjmp	.-114    	; 0x1059c <ppr_set>
   1060e:	08 95       	ret

00010610 <dbf_open>:
   10610:	0f 93       	push	r16
   10612:	1f 93       	push	r17
   10614:	cf 93       	push	r28
   10616:	df 93       	push	r29
   10618:	16 2f       	mov	r17, r22
   1061a:	07 2f       	mov	r16, r23
   1061c:	0e 94 07 59 	call	0xb20e	; 0xb20e <f_open>
   10620:	ec 01       	movw	r28, r24
   10622:	89 2b       	or	r24, r25
   10624:	89 f0       	breq	.+34     	; 0x10648 <dbf_open+0x38>
   10626:	0f 93       	push	r16
   10628:	1f 93       	push	r17
   1062a:	8a ee       	ldi	r24, 0xEA	; 234
   1062c:	9e e0       	ldi	r25, 0x0E	; 14
   1062e:	1f 92       	push	r1
   10630:	9f 93       	push	r25
   10632:	8f 93       	push	r24
   10634:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   10638:	ce 01       	movw	r24, r28
   1063a:	0e 94 1b 70 	call	0xe036	; 0xe036 <put_rc>
   1063e:	0f 90       	pop	r0
   10640:	0f 90       	pop	r0
   10642:	0f 90       	pop	r0
   10644:	0f 90       	pop	r0
   10646:	0f 90       	pop	r0
   10648:	ce 01       	movw	r24, r28
   1064a:	df 91       	pop	r29
   1064c:	cf 91       	pop	r28
   1064e:	1f 91       	pop	r17
   10650:	0f 91       	pop	r16
   10652:	08 95       	ret

00010654 <dbf_read>:
   10654:	cf 93       	push	r28
   10656:	df 93       	push	r29
   10658:	0e 94 03 5b 	call	0xb606	; 0xb606 <f_read>
   1065c:	ec 01       	movw	r28, r24
   1065e:	89 2b       	or	r24, r25
   10660:	69 f0       	breq	.+26     	; 0x1067c <dbf_read+0x28>
   10662:	8d ed       	ldi	r24, 0xDD	; 221
   10664:	9e e0       	ldi	r25, 0x0E	; 14
   10666:	1f 92       	push	r1
   10668:	9f 93       	push	r25
   1066a:	8f 93       	push	r24
   1066c:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   10670:	ce 01       	movw	r24, r28
   10672:	0e 94 1b 70 	call	0xe036	; 0xe036 <put_rc>
   10676:	0f 90       	pop	r0
   10678:	0f 90       	pop	r0
   1067a:	0f 90       	pop	r0
   1067c:	ce 01       	movw	r24, r28
   1067e:	df 91       	pop	r29
   10680:	cf 91       	pop	r28
   10682:	08 95       	ret

00010684 <dbf_write>:
   10684:	cf 93       	push	r28
   10686:	df 93       	push	r29
   10688:	0e 94 4e 5c 	call	0xb89c	; 0xb89c <f_write>
   1068c:	ec 01       	movw	r28, r24
   1068e:	89 2b       	or	r24, r25
   10690:	69 f0       	breq	.+26     	; 0x106ac <dbf_write+0x28>
   10692:	8f ec       	ldi	r24, 0xCF	; 207
   10694:	9e e0       	ldi	r25, 0x0E	; 14
   10696:	1f 92       	push	r1
   10698:	9f 93       	push	r25
   1069a:	8f 93       	push	r24
   1069c:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   106a0:	ce 01       	movw	r24, r28
   106a2:	0e 94 1b 70 	call	0xe036	; 0xe036 <put_rc>
   106a6:	0f 90       	pop	r0
   106a8:	0f 90       	pop	r0
   106aa:	0f 90       	pop	r0
   106ac:	ce 01       	movw	r24, r28
   106ae:	df 91       	pop	r29
   106b0:	cf 91       	pop	r28
   106b2:	08 95       	ret

000106b4 <dbf_lseek>:
   106b4:	cf 93       	push	r28
   106b6:	df 93       	push	r29
   106b8:	0e 94 0d 60 	call	0xc01a	; 0xc01a <f_lseek>
   106bc:	ec 01       	movw	r28, r24
   106be:	89 2b       	or	r24, r25
   106c0:	69 f0       	breq	.+26     	; 0x106dc <dbf_lseek+0x28>
   106c2:	82 ec       	ldi	r24, 0xC2	; 194
   106c4:	9e e0       	ldi	r25, 0x0E	; 14
   106c6:	1f 92       	push	r1
   106c8:	9f 93       	push	r25
   106ca:	8f 93       	push	r24
   106cc:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   106d0:	ce 01       	movw	r24, r28
   106d2:	0e 94 1b 70 	call	0xe036	; 0xe036 <put_rc>
   106d6:	0f 90       	pop	r0
   106d8:	0f 90       	pop	r0
   106da:	0f 90       	pop	r0
   106dc:	ce 01       	movw	r24, r28
   106de:	df 91       	pop	r29
   106e0:	cf 91       	pop	r28
   106e2:	08 95       	ret

000106e4 <dbf_close>:
   106e4:	cf 93       	push	r28
   106e6:	df 93       	push	r29
   106e8:	0e 94 65 5e 	call	0xbcca	; 0xbcca <f_close>
   106ec:	ec 01       	movw	r28, r24
   106ee:	89 2b       	or	r24, r25
   106f0:	69 f0       	breq	.+26     	; 0x1070c <dbf_close+0x28>
   106f2:	84 eb       	ldi	r24, 0xB4	; 180
   106f4:	9e e0       	ldi	r25, 0x0E	; 14
   106f6:	1f 92       	push	r1
   106f8:	9f 93       	push	r25
   106fa:	8f 93       	push	r24
   106fc:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   10700:	ce 01       	movw	r24, r28
   10702:	0e 94 1b 70 	call	0xe036	; 0xe036 <put_rc>
   10706:	0f 90       	pop	r0
   10708:	0f 90       	pop	r0
   1070a:	0f 90       	pop	r0
   1070c:	ce 01       	movw	r24, r28
   1070e:	df 91       	pop	r29
   10710:	cf 91       	pop	r28
   10712:	08 95       	ret

00010714 <dbf_open_read>:
   10714:	a6 e2       	ldi	r26, 0x26	; 38
   10716:	b2 e0       	ldi	r27, 0x02	; 2
   10718:	e0 e9       	ldi	r30, 0x90	; 144
   1071a:	f3 e8       	ldi	r31, 0x83	; 131
   1071c:	0c 94 19 e8 	jmp	0x1d032	; 0x1d032 <__prologue_saves__+0xc>
   10720:	4a 01       	movw	r8, r20
   10722:	5b 01       	movw	r10, r22
   10724:	69 01       	movw	r12, r18
   10726:	cb 5d       	subi	r28, 0xDB	; 219
   10728:	dd 4f       	sbci	r29, 0xFD	; 253
   1072a:	19 82       	std	Y+1, r1	; 0x01
   1072c:	18 82       	st	Y, r1
   1072e:	c5 52       	subi	r28, 0x25	; 37
   10730:	d2 40       	sbci	r29, 0x02	; 2
   10732:	43 e0       	ldi	r20, 0x03	; 3
   10734:	bc 01       	movw	r22, r24
   10736:	ce 01       	movw	r24, r28
   10738:	01 96       	adiw	r24, 0x01	; 1
   1073a:	6a df       	rcall	.-300    	; 0x10610 <dbf_open>
   1073c:	89 2b       	or	r24, r25
   1073e:	19 f0       	breq	.+6      	; 0x10746 <dbf_open_read+0x32>
   10740:	81 e1       	ldi	r24, 0x11	; 17
   10742:	90 e0       	ldi	r25, 0x00	; 0
   10744:	2f c0       	rjmp	.+94     	; 0x107a4 <dbf_open_read+0x90>
   10746:	b5 01       	movw	r22, r10
   10748:	a4 01       	movw	r20, r8
   1074a:	ce 01       	movw	r24, r28
   1074c:	01 96       	adiw	r24, 0x01	; 1
   1074e:	b2 df       	rcall	.-156    	; 0x106b4 <dbf_lseek>
   10750:	89 2b       	or	r24, r25
   10752:	59 f0       	breq	.+22     	; 0x1076a <dbf_open_read+0x56>
   10754:	85 e0       	ldi	r24, 0x05	; 5
   10756:	90 e0       	ldi	r25, 0x00	; 0
   10758:	f7 01       	movw	r30, r14
   1075a:	91 83       	std	Z+1, r25	; 0x01
   1075c:	80 83       	st	Z, r24
   1075e:	ce 01       	movw	r24, r28
   10760:	01 96       	adiw	r24, 0x01	; 1
   10762:	c0 df       	rcall	.-128    	; 0x106e4 <dbf_close>
   10764:	8f ef       	ldi	r24, 0xFF	; 255
   10766:	9f ef       	ldi	r25, 0xFF	; 255
   10768:	27 c0       	rjmp	.+78     	; 0x107b8 <dbf_open_read+0xa4>
   1076a:	9e 01       	movw	r18, r28
   1076c:	2b 5d       	subi	r18, 0xDB	; 219
   1076e:	3d 4f       	sbci	r19, 0xFD	; 253
   10770:	a8 01       	movw	r20, r16
   10772:	b6 01       	movw	r22, r12
   10774:	ce 01       	movw	r24, r28
   10776:	01 96       	adiw	r24, 0x01	; 1
   10778:	6d df       	rcall	.-294    	; 0x10654 <dbf_read>
   1077a:	89 2b       	or	r24, r25
   1077c:	49 f4       	brne	.+18     	; 0x10790 <dbf_open_read+0x7c>
   1077e:	cb 5d       	subi	r28, 0xDB	; 219
   10780:	dd 4f       	sbci	r29, 0xFD	; 253
   10782:	88 81       	ld	r24, Y
   10784:	99 81       	ldd	r25, Y+1	; 0x01
   10786:	c5 52       	subi	r28, 0x25	; 37
   10788:	d2 40       	sbci	r29, 0x02	; 2
   1078a:	08 17       	cp	r16, r24
   1078c:	19 07       	cpc	r17, r25
   1078e:	19 f0       	breq	.+6      	; 0x10796 <dbf_open_read+0x82>
   10790:	81 e0       	ldi	r24, 0x01	; 1
   10792:	90 e0       	ldi	r25, 0x00	; 0
   10794:	e1 cf       	rjmp	.-62     	; 0x10758 <dbf_open_read+0x44>
   10796:	ce 01       	movw	r24, r28
   10798:	01 96       	adiw	r24, 0x01	; 1
   1079a:	a4 df       	rcall	.-184    	; 0x106e4 <dbf_close>
   1079c:	89 2b       	or	r24, r25
   1079e:	31 f0       	breq	.+12     	; 0x107ac <dbf_open_read+0x98>
   107a0:	80 e1       	ldi	r24, 0x10	; 16
   107a2:	90 e0       	ldi	r25, 0x00	; 0
   107a4:	f7 01       	movw	r30, r14
   107a6:	91 83       	std	Z+1, r25	; 0x01
   107a8:	80 83       	st	Z, r24
   107aa:	dc cf       	rjmp	.-72     	; 0x10764 <dbf_open_read+0x50>
   107ac:	cb 5d       	subi	r28, 0xDB	; 219
   107ae:	dd 4f       	sbci	r29, 0xFD	; 253
   107b0:	88 81       	ld	r24, Y
   107b2:	99 81       	ldd	r25, Y+1	; 0x01
   107b4:	c5 52       	subi	r28, 0x25	; 37
   107b6:	d2 40       	sbci	r29, 0x02	; 2
   107b8:	ca 5d       	subi	r28, 0xDA	; 218
   107ba:	dd 4f       	sbci	r29, 0xFD	; 253
   107bc:	ec e0       	ldi	r30, 0x0C	; 12
   107be:	0c 94 35 e8 	jmp	0x1d06a	; 0x1d06a <__epilogue_restores__+0xc>

000107c2 <dbf_open_write>:
   107c2:	a6 e2       	ldi	r26, 0x26	; 38
   107c4:	b2 e0       	ldi	r27, 0x02	; 2
   107c6:	e7 ee       	ldi	r30, 0xE7	; 231
   107c8:	f3 e8       	ldi	r31, 0x83	; 131
   107ca:	0c 94 19 e8 	jmp	0x1d032	; 0x1d032 <__prologue_saves__+0xc>
   107ce:	4a 01       	movw	r8, r20
   107d0:	5b 01       	movw	r10, r22
   107d2:	69 01       	movw	r12, r18
   107d4:	cb 5d       	subi	r28, 0xDB	; 219
   107d6:	dd 4f       	sbci	r29, 0xFD	; 253
   107d8:	19 82       	std	Y+1, r1	; 0x01
   107da:	18 82       	st	Y, r1
   107dc:	c5 52       	subi	r28, 0x25	; 37
   107de:	d2 40       	sbci	r29, 0x02	; 2
   107e0:	43 e0       	ldi	r20, 0x03	; 3
   107e2:	bc 01       	movw	r22, r24
   107e4:	ce 01       	movw	r24, r28
   107e6:	01 96       	adiw	r24, 0x01	; 1
   107e8:	13 df       	rcall	.-474    	; 0x10610 <dbf_open>
   107ea:	89 2b       	or	r24, r25
   107ec:	19 f0       	breq	.+6      	; 0x107f4 <dbf_open_write+0x32>
   107ee:	81 e1       	ldi	r24, 0x11	; 17
   107f0:	90 e0       	ldi	r25, 0x00	; 0
   107f2:	2f c0       	rjmp	.+94     	; 0x10852 <dbf_open_write+0x90>
   107f4:	b5 01       	movw	r22, r10
   107f6:	a4 01       	movw	r20, r8
   107f8:	ce 01       	movw	r24, r28
   107fa:	01 96       	adiw	r24, 0x01	; 1
   107fc:	5b df       	rcall	.-330    	; 0x106b4 <dbf_lseek>
   107fe:	89 2b       	or	r24, r25
   10800:	59 f0       	breq	.+22     	; 0x10818 <dbf_open_write+0x56>
   10802:	85 e0       	ldi	r24, 0x05	; 5
   10804:	90 e0       	ldi	r25, 0x00	; 0
   10806:	f7 01       	movw	r30, r14
   10808:	91 83       	std	Z+1, r25	; 0x01
   1080a:	80 83       	st	Z, r24
   1080c:	ce 01       	movw	r24, r28
   1080e:	01 96       	adiw	r24, 0x01	; 1
   10810:	69 df       	rcall	.-302    	; 0x106e4 <dbf_close>
   10812:	8f ef       	ldi	r24, 0xFF	; 255
   10814:	9f ef       	ldi	r25, 0xFF	; 255
   10816:	27 c0       	rjmp	.+78     	; 0x10866 <dbf_open_write+0xa4>
   10818:	9e 01       	movw	r18, r28
   1081a:	2b 5d       	subi	r18, 0xDB	; 219
   1081c:	3d 4f       	sbci	r19, 0xFD	; 253
   1081e:	a8 01       	movw	r20, r16
   10820:	b6 01       	movw	r22, r12
   10822:	ce 01       	movw	r24, r28
   10824:	01 96       	adiw	r24, 0x01	; 1
   10826:	2e df       	rcall	.-420    	; 0x10684 <dbf_write>
   10828:	89 2b       	or	r24, r25
   1082a:	49 f4       	brne	.+18     	; 0x1083e <dbf_open_write+0x7c>
   1082c:	cb 5d       	subi	r28, 0xDB	; 219
   1082e:	dd 4f       	sbci	r29, 0xFD	; 253
   10830:	88 81       	ld	r24, Y
   10832:	99 81       	ldd	r25, Y+1	; 0x01
   10834:	c5 52       	subi	r28, 0x25	; 37
   10836:	d2 40       	sbci	r29, 0x02	; 2
   10838:	08 17       	cp	r16, r24
   1083a:	19 07       	cpc	r17, r25
   1083c:	19 f0       	breq	.+6      	; 0x10844 <dbf_open_write+0x82>
   1083e:	81 e0       	ldi	r24, 0x01	; 1
   10840:	90 e0       	ldi	r25, 0x00	; 0
   10842:	e1 cf       	rjmp	.-62     	; 0x10806 <dbf_open_write+0x44>
   10844:	ce 01       	movw	r24, r28
   10846:	01 96       	adiw	r24, 0x01	; 1
   10848:	4d df       	rcall	.-358    	; 0x106e4 <dbf_close>
   1084a:	89 2b       	or	r24, r25
   1084c:	31 f0       	breq	.+12     	; 0x1085a <dbf_open_write+0x98>
   1084e:	80 e1       	ldi	r24, 0x10	; 16
   10850:	90 e0       	ldi	r25, 0x00	; 0
   10852:	f7 01       	movw	r30, r14
   10854:	91 83       	std	Z+1, r25	; 0x01
   10856:	80 83       	st	Z, r24
   10858:	dc cf       	rjmp	.-72     	; 0x10812 <dbf_open_write+0x50>
   1085a:	cb 5d       	subi	r28, 0xDB	; 219
   1085c:	dd 4f       	sbci	r29, 0xFD	; 253
   1085e:	88 81       	ld	r24, Y
   10860:	99 81       	ldd	r25, Y+1	; 0x01
   10862:	c5 52       	subi	r28, 0x25	; 37
   10864:	d2 40       	sbci	r29, 0x02	; 2
   10866:	ca 5d       	subi	r28, 0xDA	; 218
   10868:	dd 4f       	sbci	r29, 0xFD	; 253
   1086a:	ec e0       	ldi	r30, 0x0C	; 12
   1086c:	0c 94 35 e8 	jmp	0x1d06a	; 0x1d06a <__epilogue_restores__+0xc>

00010870 <gpib_timer_elapsed_begin>:
   10870:	0c 94 4c 36 	jmp	0x6c98	; 0x6c98 <clock_elapsed_begin>
   10874:	08 95       	ret

00010876 <gpib_timer_reset>:
   10876:	f8 94       	cli
   10878:	ee ee       	ldi	r30, 0xEE	; 238
   1087a:	fc e1       	ldi	r31, 0x1C	; 28
   1087c:	10 82       	st	Z, r1
   1087e:	11 82       	std	Z+1, r1	; 0x01
   10880:	12 82       	std	Z+2, r1	; 0x02
   10882:	13 82       	std	Z+3, r1	; 0x03
   10884:	14 82       	std	Z+4, r1	; 0x04
   10886:	15 82       	std	Z+5, r1	; 0x05
   10888:	16 82       	std	Z+6, r1	; 0x06
   1088a:	17 82       	std	Z+7, r1	; 0x07
   1088c:	81 e0       	ldi	r24, 0x01	; 1
   1088e:	80 87       	std	Z+8, r24	; 0x08
   10890:	78 94       	sei
   10892:	08 95       	ret

00010894 <gpib_timer_elapsed_end>:
   10894:	0c 94 52 36 	jmp	0x6ca4	; 0x6ca4 <clock_elapsed_end>
   10898:	08 95       	ret

0001089a <gpib_timer_task>:
   1089a:	f8 94       	cli
   1089c:	80 91 f2 1c 	lds	r24, 0x1CF2	; 0x801cf2 <gpib_timer+0x4>
   108a0:	90 91 f3 1c 	lds	r25, 0x1CF3	; 0x801cf3 <gpib_timer+0x5>
   108a4:	a0 91 f4 1c 	lds	r26, 0x1CF4	; 0x801cf4 <gpib_timer+0x6>
   108a8:	b0 91 f5 1c 	lds	r27, 0x1CF5	; 0x801cf5 <gpib_timer+0x7>
   108ac:	89 2b       	or	r24, r25
   108ae:	8a 2b       	or	r24, r26
   108b0:	8b 2b       	or	r24, r27
   108b2:	a1 f0       	breq	.+40     	; 0x108dc <gpib_timer_task+0x42>
   108b4:	80 91 f2 1c 	lds	r24, 0x1CF2	; 0x801cf2 <gpib_timer+0x4>
   108b8:	90 91 f3 1c 	lds	r25, 0x1CF3	; 0x801cf3 <gpib_timer+0x5>
   108bc:	a0 91 f4 1c 	lds	r26, 0x1CF4	; 0x801cf4 <gpib_timer+0x6>
   108c0:	b0 91 f5 1c 	lds	r27, 0x1CF5	; 0x801cf5 <gpib_timer+0x7>
   108c4:	01 97       	sbiw	r24, 0x01	; 1
   108c6:	a1 09       	sbc	r26, r1
   108c8:	b1 09       	sbc	r27, r1
   108ca:	80 93 f2 1c 	sts	0x1CF2, r24	; 0x801cf2 <gpib_timer+0x4>
   108ce:	90 93 f3 1c 	sts	0x1CF3, r25	; 0x801cf3 <gpib_timer+0x5>
   108d2:	a0 93 f4 1c 	sts	0x1CF4, r26	; 0x801cf4 <gpib_timer+0x6>
   108d6:	b0 93 f5 1c 	sts	0x1CF5, r27	; 0x801cf5 <gpib_timer+0x7>
   108da:	03 c0       	rjmp	.+6      	; 0x108e2 <gpib_timer_task+0x48>
   108dc:	81 e0       	ldi	r24, 0x01	; 1
   108de:	80 93 f6 1c 	sts	0x1CF6, r24	; 0x801cf6 <gpib_timer+0x8>
   108e2:	78 94       	sei
   108e4:	08 95       	ret

000108e6 <gpib_timeout_set>:
   108e6:	f8 94       	cli
   108e8:	ee ee       	ldi	r30, 0xEE	; 238
   108ea:	fc e1       	ldi	r31, 0x1C	; 28
   108ec:	64 83       	std	Z+4, r22	; 0x04
   108ee:	75 83       	std	Z+5, r23	; 0x05
   108f0:	86 83       	std	Z+6, r24	; 0x06
   108f2:	97 83       	std	Z+7, r25	; 0x07
   108f4:	10 86       	std	Z+8, r1	; 0x08
   108f6:	78 94       	sei
   108f8:	08 95       	ret

000108fa <gpib_bus_read_init>:
   108fa:	54 98       	cbi	0x0a, 4	; 10
   108fc:	57 98       	cbi	0x0a, 7	; 10
   108fe:	45 98       	cbi	0x08, 5	; 8
   10900:	3d 9a       	sbi	0x07, 5	; 7
   10902:	11 b8       	out	0x01, r1	; 1
   10904:	2f ef       	ldi	r18, 0xFF	; 255
   10906:	22 b9       	out	0x02, r18	; 2
   10908:	43 98       	cbi	0x08, 3	; 8
   1090a:	3b 9a       	sbi	0x07, 3	; 7
   1090c:	21 98       	cbi	0x04, 1	; 4
   1090e:	56 98       	cbi	0x0a, 6	; 10
   10910:	20 98       	cbi	0x04, 0	; 4
   10912:	55 98       	cbi	0x0a, 5	; 10
   10914:	89 2b       	or	r24, r25
   10916:	39 f4       	brne	.+14     	; 0x10926 <gpib_bus_read_init+0x2c>
   10918:	52 98       	cbi	0x0a, 2	; 10
   1091a:	53 98       	cbi	0x0a, 3	; 10
   1091c:	8d e0       	ldi	r24, 0x0D	; 13
   1091e:	8a 95       	dec	r24
   10920:	f1 f7       	brne	.-4      	; 0x1091e <gpib_bus_read_init+0x24>
   10922:	00 00       	nop
   10924:	04 c0       	rjmp	.+8      	; 0x1092e <gpib_bus_read_init+0x34>
   10926:	5b 98       	cbi	0x0b, 3	; 11
   10928:	53 9a       	sbi	0x0a, 3	; 10
   1092a:	5a 98       	cbi	0x0b, 2	; 11
   1092c:	52 9a       	sbi	0x0a, 2	; 10
   1092e:	42 98       	cbi	0x08, 2	; 8
   10930:	3a 9a       	sbi	0x07, 2	; 7
   10932:	44 9a       	sbi	0x08, 4	; 8
   10934:	3c 9a       	sbi	0x07, 4	; 7
   10936:	8d e0       	ldi	r24, 0x0D	; 13
   10938:	8a 95       	dec	r24
   1093a:	f1 f7       	brne	.-4      	; 0x10938 <gpib_bus_read_init+0x3e>
   1093c:	00 00       	nop
   1093e:	08 95       	ret

00010940 <gpib_bus_init>:
   10940:	10 92 73 19 	sts	0x1973, r1	; 0x801973 <gpib_unread_f>
   10944:	11 b8       	out	0x01, r1	; 1
   10946:	8f ef       	ldi	r24, 0xFF	; 255
   10948:	82 b9       	out	0x02, r24	; 2
   1094a:	21 98       	cbi	0x04, 1	; 4
   1094c:	52 98       	cbi	0x0a, 2	; 10
   1094e:	53 98       	cbi	0x0a, 3	; 10
   10950:	54 98       	cbi	0x0a, 4	; 10
   10952:	57 98       	cbi	0x0a, 7	; 10
   10954:	56 98       	cbi	0x0a, 6	; 10
   10956:	20 98       	cbi	0x04, 0	; 4
   10958:	55 98       	cbi	0x0a, 5	; 10
   1095a:	45 98       	cbi	0x08, 5	; 8
   1095c:	3d 9a       	sbi	0x07, 5	; 7
   1095e:	43 98       	cbi	0x08, 3	; 8
   10960:	3b 9a       	sbi	0x07, 3	; 7
   10962:	42 98       	cbi	0x08, 2	; 8
   10964:	3a 9a       	sbi	0x07, 2	; 7
   10966:	44 9a       	sbi	0x08, 4	; 8
   10968:	3c 9a       	sbi	0x07, 4	; 7
   1096a:	8d e0       	ldi	r24, 0x0D	; 13
   1096c:	8a 95       	dec	r24
   1096e:	f1 f7       	brne	.-4      	; 0x1096c <gpib_bus_init+0x2c>
   10970:	00 00       	nop
   10972:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   10976:	82 ff       	sbrs	r24, 2
   10978:	0a c0       	rjmp	.+20     	; 0x1098e <gpib_bus_init+0x4e>
   1097a:	87 eb       	ldi	r24, 0xB7	; 183
   1097c:	91 e1       	ldi	r25, 0x11	; 17
   1097e:	1f 92       	push	r1
   10980:	9f 93       	push	r25
   10982:	8f 93       	push	r24
   10984:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   10988:	0f 90       	pop	r0
   1098a:	0f 90       	pop	r0
   1098c:	0f 90       	pop	r0
   1098e:	08 95       	ret

00010990 <gpib_state_init>:
   10990:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   10994:	82 ff       	sbrs	r24, 2
   10996:	0a c0       	rjmp	.+20     	; 0x109ac <gpib_state_init+0x1c>
   10998:	84 ea       	ldi	r24, 0xA4	; 164
   1099a:	91 e1       	ldi	r25, 0x11	; 17
   1099c:	1f 92       	push	r1
   1099e:	9f 93       	push	r25
   109a0:	8f 93       	push	r24
   109a2:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   109a6:	0f 90       	pop	r0
   109a8:	0f 90       	pop	r0
   109aa:	0f 90       	pop	r0
   109ac:	05 de       	rcall	.-1014   	; 0x105b8 <ppr_init>
   109ae:	0e 94 0a 8f 	call	0x11e14	; 0x11e14 <listen_cleanup>
   109b2:	0e 94 1a 90 	call	0x12034	; 0x12034 <talk_cleanup>
   109b6:	10 92 fa 1e 	sts	0x1EFA, r1	; 0x801efa <spoll>
   109ba:	10 92 fd 1e 	sts	0x1EFD, r1	; 0x801efd <talking>
   109be:	10 92 00 1f 	sts	0x1F00, r1	; 0x801f00 <talking_last>
   109c2:	10 92 ff 1e 	sts	0x1EFF, r1	; 0x801eff <listening>
   109c6:	10 92 f9 1e 	sts	0x1EF9, r1	; 0x801ef9 <listening_last>
   109ca:	10 92 f8 1c 	sts	0x1CF8, r1	; 0x801cf8 <lastcmd+0x1>
   109ce:	10 92 f7 1c 	sts	0x1CF7, r1	; 0x801cf7 <lastcmd>
   109d2:	10 92 fc 1e 	sts	0x1EFC, r1	; 0x801efc <current+0x1>
   109d6:	10 92 fb 1e 	sts	0x1EFB, r1	; 0x801efb <current>
   109da:	10 92 fe 1e 	sts	0x1EFE, r1	; 0x801efe <secondary>
   109de:	08 95       	ret

000109e0 <gpib_enable_PPR>:
   109e0:	cf 93       	push	r28
   109e2:	df 93       	push	r29
   109e4:	ec 01       	movw	r28, r24
   109e6:	88 30       	cpi	r24, 0x08	; 8
   109e8:	91 05       	cpc	r25, r1
   109ea:	78 f0       	brcs	.+30     	; 0x10a0a <gpib_enable_PPR+0x2a>
   109ec:	df 93       	push	r29
   109ee:	cf 93       	push	r28
   109f0:	8e e7       	ldi	r24, 0x7E	; 126
   109f2:	91 e1       	ldi	r25, 0x11	; 17
   109f4:	1f 92       	push	r1
   109f6:	9f 93       	push	r25
   109f8:	8f 93       	push	r24
   109fa:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   109fe:	0f 90       	pop	r0
   10a00:	0f 90       	pop	r0
   10a02:	0f 90       	pop	r0
   10a04:	0f 90       	pop	r0
   10a06:	0f 90       	pop	r0
   10a08:	19 c0       	rjmp	.+50     	; 0x10a3c <gpib_enable_PPR+0x5c>
   10a0a:	e7 dd       	rcall	.-1074   	; 0x105da <ppr_bit_set>
   10a0c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   10a10:	81 ff       	sbrs	r24, 1
   10a12:	14 c0       	rjmp	.+40     	; 0x10a3c <gpib_enable_PPR+0x5c>
   10a14:	cd dd       	rcall	.-1126   	; 0x105b0 <ppr_reg>
   10a16:	1f 92       	push	r1
   10a18:	8f 93       	push	r24
   10a1a:	df 93       	push	r29
   10a1c:	cf 93       	push	r28
   10a1e:	83 e6       	ldi	r24, 0x63	; 99
   10a20:	91 e1       	ldi	r25, 0x11	; 17
   10a22:	1f 92       	push	r1
   10a24:	9f 93       	push	r25
   10a26:	8f 93       	push	r24
   10a28:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   10a2c:	8d b7       	in	r24, 0x3d	; 61
   10a2e:	9e b7       	in	r25, 0x3e	; 62
   10a30:	07 96       	adiw	r24, 0x07	; 7
   10a32:	0f b6       	in	r0, 0x3f	; 63
   10a34:	f8 94       	cli
   10a36:	9e bf       	out	0x3e, r25	; 62
   10a38:	0f be       	out	0x3f, r0	; 63
   10a3a:	8d bf       	out	0x3d, r24	; 61
   10a3c:	df 91       	pop	r29
   10a3e:	cf 91       	pop	r28
   10a40:	08 95       	ret

00010a42 <gpib_disable_PPR>:
   10a42:	cf 93       	push	r28
   10a44:	df 93       	push	r29
   10a46:	ec 01       	movw	r28, r24
   10a48:	88 30       	cpi	r24, 0x08	; 8
   10a4a:	91 05       	cpc	r25, r1
   10a4c:	78 f0       	brcs	.+30     	; 0x10a6c <gpib_disable_PPR+0x2a>
   10a4e:	df 93       	push	r29
   10a50:	cf 93       	push	r28
   10a52:	8c e3       	ldi	r24, 0x3C	; 60
   10a54:	91 e1       	ldi	r25, 0x11	; 17
   10a56:	1f 92       	push	r1
   10a58:	9f 93       	push	r25
   10a5a:	8f 93       	push	r24
   10a5c:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   10a60:	0f 90       	pop	r0
   10a62:	0f 90       	pop	r0
   10a64:	0f 90       	pop	r0
   10a66:	0f 90       	pop	r0
   10a68:	0f 90       	pop	r0
   10a6a:	19 c0       	rjmp	.+50     	; 0x10a9e <gpib_disable_PPR+0x5c>
   10a6c:	c3 dd       	rcall	.-1146   	; 0x105f4 <ppr_bit_clr>
   10a6e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   10a72:	81 ff       	sbrs	r24, 1
   10a74:	14 c0       	rjmp	.+40     	; 0x10a9e <gpib_disable_PPR+0x5c>
   10a76:	9c dd       	rcall	.-1224   	; 0x105b0 <ppr_reg>
   10a78:	1f 92       	push	r1
   10a7a:	8f 93       	push	r24
   10a7c:	df 93       	push	r29
   10a7e:	cf 93       	push	r28
   10a80:	81 e2       	ldi	r24, 0x21	; 33
   10a82:	91 e1       	ldi	r25, 0x11	; 17
   10a84:	1f 92       	push	r1
   10a86:	9f 93       	push	r25
   10a88:	8f 93       	push	r24
   10a8a:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   10a8e:	8d b7       	in	r24, 0x3d	; 61
   10a90:	9e b7       	in	r25, 0x3e	; 62
   10a92:	07 96       	adiw	r24, 0x07	; 7
   10a94:	0f b6       	in	r0, 0x3f	; 63
   10a96:	f8 94       	cli
   10a98:	9e bf       	out	0x3e, r25	; 62
   10a9a:	0f be       	out	0x3f, r0	; 63
   10a9c:	8d bf       	out	0x3d, r24	; 61
   10a9e:	df 91       	pop	r29
   10aa0:	cf 91       	pop	r28
   10aa2:	08 95       	ret

00010aa4 <gpib_assert_ifc>:
   10aa4:	5c 98       	cbi	0x0b, 4	; 11
   10aa6:	54 9a       	sbi	0x0a, 4	; 10
   10aa8:	6a ef       	ldi	r22, 0xFA	; 250
   10aaa:	70 e0       	ldi	r23, 0x00	; 0
   10aac:	80 e0       	ldi	r24, 0x00	; 0
   10aae:	90 e0       	ldi	r25, 0x00	; 0
   10ab0:	0e 94 7a 2a 	call	0x54f4	; 0x54f4 <delayus>
   10ab4:	54 98       	cbi	0x0a, 4	; 10
   10ab6:	6a ef       	ldi	r22, 0xFA	; 250
   10ab8:	70 e0       	ldi	r23, 0x00	; 0
   10aba:	80 e0       	ldi	r24, 0x00	; 0
   10abc:	90 e0       	ldi	r25, 0x00	; 0
   10abe:	0e 94 7a 2a 	call	0x54f4	; 0x54f4 <delayus>
   10ac2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   10ac6:	82 ff       	sbrs	r24, 2
   10ac8:	0a c0       	rjmp	.+20     	; 0x10ade <gpib_assert_ifc+0x3a>
   10aca:	82 ef       	ldi	r24, 0xF2	; 242
   10acc:	90 e1       	ldi	r25, 0x10	; 16
   10ace:	1f 92       	push	r1
   10ad0:	9f 93       	push	r25
   10ad2:	8f 93       	push	r24
   10ad4:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   10ad8:	0f 90       	pop	r0
   10ada:	0f 90       	pop	r0
   10adc:	0f 90       	pop	r0
   10ade:	08 95       	ret

00010ae0 <gpib_unread>:
   10ae0:	cf 93       	push	r28
   10ae2:	df 93       	push	r29
   10ae4:	ec 01       	movw	r28, r24
   10ae6:	80 91 73 19 	lds	r24, 0x1973	; 0x801973 <gpib_unread_f>
   10aea:	81 11       	cpse	r24, r1
   10aec:	08 c0       	rjmp	.+16     	; 0x10afe <gpib_unread+0x1e>
   10aee:	d0 93 02 1f 	sts	0x1F02, r29	; 0x801f02 <gpib_unread_data+0x1>
   10af2:	c0 93 01 1f 	sts	0x1F01, r28	; 0x801f01 <gpib_unread_data>
   10af6:	81 e0       	ldi	r24, 0x01	; 1
   10af8:	80 93 73 19 	sts	0x1973, r24	; 0x801973 <gpib_unread_f>
   10afc:	12 c0       	rjmp	.+36     	; 0x10b22 <gpib_unread+0x42>
   10afe:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   10b02:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   10b06:	85 70       	andi	r24, 0x05	; 5
   10b08:	99 27       	eor	r25, r25
   10b0a:	89 2b       	or	r24, r25
   10b0c:	51 f0       	breq	.+20     	; 0x10b22 <gpib_unread+0x42>
   10b0e:	8f ea       	ldi	r24, 0xAF	; 175
   10b10:	90 e1       	ldi	r25, 0x10	; 16
   10b12:	1f 92       	push	r1
   10b14:	9f 93       	push	r25
   10b16:	8f 93       	push	r24
   10b18:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   10b1c:	0f 90       	pop	r0
   10b1e:	0f 90       	pop	r0
   10b20:	0f 90       	pop	r0
   10b22:	ce 01       	movw	r24, r28
   10b24:	df 91       	pop	r29
   10b26:	cf 91       	pop	r28
   10b28:	08 95       	ret

00010b2a <gpib_bus_read>:

/// @brief Read GPIB data BUS only
/// @return  bus (lower 8 bits)
uint8_t gpib_bus_read()
{
    uint8_t bus = ~(GPIB_BUS_RD());
   10b2a:	11 b8       	out	0x01, r1	; 1
   10b2c:	80 b1       	in	r24, 0x00	; 0
   10b2e:	80 95       	com	r24

    ///@brief if a command byte (ATN low) then strip partity
    if(!GPIB_PIN_TST(ATN))
   10b30:	4e 9b       	sbis	0x09, 6	; 9
        bus &= 0x7f;
   10b32:	8f 77       	andi	r24, 0x7F	; 127
    else
        bus &= 0xff;
    return(bus);
}
   10b34:	08 95       	ret

00010b36 <gpib_control_pin_read>:
/// @return  control lines (upper 8 bits)
/// @see gpib_bus_read_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
    if(GPIB_PIN_TST(ATN) == 0 )
   10b36:	4e 99       	sbic	0x09, 6	; 9
   10b38:	03 c0       	rjmp	.+6      	; 0x10b40 <gpib_control_pin_read+0xa>
        control |= ATN_FLAG;
   10b3a:	80 e0       	ldi	r24, 0x00	; 0
   10b3c:	94 e0       	ldi	r25, 0x04	; 4
   10b3e:	02 c0       	rjmp	.+4      	; 0x10b44 <gpib_control_pin_read+0xe>
///   FIXME We could add a test for read/write state ??
/// @return  control lines (upper 8 bits)
/// @see gpib_bus_read_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
   10b40:	80 e0       	ldi	r24, 0x00	; 0
   10b42:	90 e0       	ldi	r25, 0x00	; 0
    if(GPIB_PIN_TST(ATN) == 0 )
        control |= ATN_FLAG;
    if(GPIB_PIN_TST(EOI) == 0 )
   10b44:	18 9b       	sbis	0x03, 0	; 3
        control |= EOI_FLAG;
   10b46:	91 60       	ori	r25, 0x01	; 1
    if(GPIB_PIN_TST(SRQ) == 0 )
   10b48:	4d 9b       	sbis	0x09, 5	; 9
        control |= SRQ_FLAG;
   10b4a:	92 60       	ori	r25, 0x02	; 2
    if(GPIB_PIN_TST(REN) == 0 )
   10b4c:	4f 9b       	sbis	0x09, 7	; 9
        control |= REN_FLAG;
   10b4e:	98 60       	ori	r25, 0x08	; 8
    if(GPIB_PIN_TST(IFC) == 0 )
   10b50:	4c 9b       	sbis	0x09, 4	; 9
        control |= IFC_FLAG;
   10b52:	90 61       	ori	r25, 0x10	; 16
    return(control);
}
   10b54:	08 95       	ret

00010b56 <gpib_handshake_pin_read>:
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
    ///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
    /// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
   10b56:	19 99       	sbic	0x03, 1	; 3
   10b58:	03 c0       	rjmp	.+6      	; 0x10b60 <gpib_handshake_pin_read+0xa>
        control |= DAV_FLAG;
   10b5a:	80 e0       	ldi	r24, 0x00	; 0
   10b5c:	90 e2       	ldi	r25, 0x20	; 32
   10b5e:	02 c0       	rjmp	.+4      	; 0x10b64 <gpib_handshake_pin_read+0xe>
/// FIXME: V2 boards can only read pins enabled for read by the SN75162
///   FIXME We could add a test for read/write state ??
/// @return  handshake lines (upper 8 bits)
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
   10b60:	80 e0       	ldi	r24, 0x00	; 0
   10b62:	90 e0       	ldi	r25, 0x00	; 0
    ///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
    /// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
        control |= DAV_FLAG;
    if(GPIB_PIN_TST(NRFD) == 0 )
   10b64:	4a 9b       	sbis	0x09, 2	; 9
        control |= NRFD_FLAG;
   10b66:	90 64       	ori	r25, 0x40	; 64
    if(GPIB_PIN_TST(NDAC) == 0 )
   10b68:	4b 9b       	sbis	0x09, 3	; 9
        control |= NDAC_FLAG;
   10b6a:	90 68       	ori	r25, 0x80	; 128
    return(control);
}
   10b6c:	08 95       	ret

00010b6e <gpib_write_byte>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
uint16_t gpib_write_byte(uint16_t ch)
{
   10b6e:	2f 92       	push	r2
   10b70:	3f 92       	push	r3
   10b72:	4f 92       	push	r4
   10b74:	6f 92       	push	r6
   10b76:	7f 92       	push	r7
   10b78:	8f 92       	push	r8
   10b7a:	cf 92       	push	r12
   10b7c:	df 92       	push	r13
   10b7e:	ef 92       	push	r14
   10b80:	1f 93       	push	r17
   10b82:	cf 93       	push	r28
   10b84:	df 93       	push	r29
   10b86:	cd b7       	in	r28, 0x3d	; 61
   10b88:	de b7       	in	r29, 0x3e	; 62
   10b8a:	28 97       	sbiw	r28, 0x08	; 8
   10b8c:	0f b6       	in	r0, 0x3f	; 63
   10b8e:	f8 94       	cli
   10b90:	de bf       	out	0x3e, r29	; 62
   10b92:	0f be       	out	0x3f, r0	; 63
   10b94:	cd bf       	out	0x3d, r28	; 61
   10b96:	98 87       	std	Y+8, r25	; 0x08
   10b98:	8f 83       	std	Y+7, r24	; 0x07
    uint8_t tx_state;

	// Wait for DAV to be released before starting
	// Read state for DAV
	gpib_bus_read_init(0);
   10b9a:	80 e0       	ldi	r24, 0x00	; 0
   10b9c:	90 e0       	ldi	r25, 0x00	; 0
   10b9e:	ad de       	rcall	.-678    	; 0x108fa <gpib_bus_read_init>
	// Bus read init sets the following states
	// GPIB_BUS_LATCH_WR(0xff); // float OC BUS on write
	// GPIB_IO_LOW(PE);			// BUS OC PULLUP

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);
   10ba0:	64 ef       	ldi	r22, 0xF4	; 244
   10ba2:	71 e0       	ldi	r23, 0x01	; 1
   10ba4:	80 e0       	ldi	r24, 0x00	; 0
   10ba6:	90 e0       	ldi	r25, 0x00	; 0
   10ba8:	9e de       	rcall	.-708    	; 0x108e6 <gpib_timeout_set>

	// Bus read init sets the following states
	// GPIB_BUS_LATCH_WR(0xff); // float OC BUS on write
	// GPIB_IO_LOW(PE);			// BUS OC PULLUP

    tx_state = GPIB_TX_START;
   10baa:	10 e0       	ldi	r17, 0x00	; 0
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for DAV==1>\n");
   10bac:	8d e1       	ldi	r24, 0x1D	; 29
   10bae:	90 e1       	ldi	r25, 0x10	; 16
   10bb0:	6c 01       	movw	r12, r24
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for NDAC==1>\n");
   10bb2:	87 e3       	ldi	r24, 0x37	; 55
   10bb4:	90 e1       	ldi	r25, 0x10	; 16
   10bb6:	3c 01       	movw	r6, r24
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for NRFD==0>\n");
   10bb8:	82 e5       	ldi	r24, 0x52	; 82
   10bba:	90 e1       	ldi	r25, 0x10	; 16
   10bbc:	1c 01       	movw	r2, r24
                }
                if (gpib_timeout_test())
                {
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for NRFD==1 && NDAC == 0>\n");
   10bbe:	8d e6       	ldi	r24, 0x6D	; 109
   10bc0:	90 e1       	ldi	r25, 0x10	; 16
   10bc2:	9c 01       	movw	r18, r24
   10bc4:	40 e0       	ldi	r20, 0x00	; 0
   10bc6:	29 83       	std	Y+1, r18	; 0x01
   10bc8:	3a 83       	std	Y+2, r19	; 0x02
   10bca:	4b 83       	std	Y+3, r20	; 0x03
                }
                if (gpib_timeout_test())
                {
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for DAV==1>\n");
   10bcc:	85 e9       	ldi	r24, 0x95	; 149
   10bce:	90 e1       	ldi	r25, 0x10	; 16
   10bd0:	9c 01       	movw	r18, r24
   10bd2:	40 e0       	ldi	r20, 0x00	; 0
   10bd4:	2c 83       	std	Y+4, r18	; 0x04
   10bd6:	3d 83       	std	Y+5, r19	; 0x05
   10bd8:	4e 83       	std	Y+6, r20	; 0x06
    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);

    while(tx_state != GPIB_TX_DONE )
    {
        if(uart_keyhit(0))
   10bda:	80 e0       	ldi	r24, 0x00	; 0
   10bdc:	0e 94 9d 2c 	call	0x593a	; 0x593a <uart_keyhit>
   10be0:	89 2b       	or	r24, r25
   10be2:	09 f0       	breq	.+2      	; 0x10be6 <gpib_write_byte+0x78>
   10be4:	17 c1       	rjmp	.+558    	; 0x10e14 <gpib_write_byte+0x2a6>
        if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

		// IFC is always in for a device
        if(GPIB_PIN_TST(IFC) == 0)
   10be6:	4c 99       	sbic	0x09, 4	; 9
   10be8:	07 c0       	rjmp	.+14     	; 0x10bf8 <gpib_write_byte+0x8a>
        {
            ch |= IFC_FLAG;
   10bea:	8f 81       	ldd	r24, Y+7	; 0x07
   10bec:	98 85       	ldd	r25, Y+8	; 0x08
   10bee:	90 61       	ori	r25, 0x10	; 16
   10bf0:	98 87       	std	Y+8, r25	; 0x08
			gpib_bus_init();
   10bf2:	8f 83       	std	Y+7, r24	; 0x07
   10bf4:	a5 de       	rcall	.-694    	; 0x10940 <gpib_bus_init>
            break;
   10bf6:	0e c1       	rjmp	.+540    	; 0x10e14 <gpib_write_byte+0x2a6>
        }

        switch(tx_state)
   10bf8:	81 2f       	mov	r24, r17
   10bfa:	90 e0       	ldi	r25, 0x00	; 0
   10bfc:	8a 30       	cpi	r24, 0x0A	; 10
   10bfe:	91 05       	cpc	r25, r1
   10c00:	08 f0       	brcs	.+2      	; 0x10c04 <gpib_write_byte+0x96>
   10c02:	fe c0       	rjmp	.+508    	; 0x10e00 <gpib_write_byte+0x292>
   10c04:	fc 01       	movw	r30, r24
   10c06:	e3 54       	subi	r30, 0x43	; 67
   10c08:	ff 4f       	sbci	r31, 0xFF	; 255
   10c0a:	0c 94 cf e7 	jmp	0x1cf9e	; 0x1cf9e <__tablejump2__>
        {
            case GPIB_TX_START:
                // Wait for release of DAV and EOI before starting
				// IF DAV = 0 the bus is busy
                if(GPIB_PIN_TST(DAV) == 1)
   10c0e:	19 9b       	sbis	0x03, 1	; 3
   10c10:	12 c0       	rjmp	.+36     	; 0x10c36 <gpib_write_byte+0xc8>
					// We arive here in Read Mode - see gpib_bus_read_init(0);

					// Switch GBIB driver direction to Write
					// CPU has BUS already set IN with pullups = 0xff - see gpib_bus_read_init(0);
					// When we switch the GPIB drivers will be in OC mode and off the bus (0xff)
					GPIB_IO_HI(TE); // BUS OUT, DAV OUT, NRFD and NDAC IN
   10c12:	42 9a       	sbi	0x08, 2	; 8
   10c14:	3a 9a       	sbi	0x07, 2	; 7
					GPIB_IO_LOW(DC);// ATN OUT, EOI OUT, SRQ IN
   10c16:	44 98       	cbi	0x08, 4	; 8
   10c18:	3c 9a       	sbi	0x07, 4	; 7
#endif
                    // My testing with various GPIB devices shows that we MUST assert ATN EARLY!
                    if(ch & ATN_FLAG)
   10c1a:	2f 81       	ldd	r18, Y+7	; 0x07
   10c1c:	38 85       	ldd	r19, Y+8	; 0x08
   10c1e:	32 ff       	sbrs	r19, 2
   10c20:	03 c0       	rjmp	.+6      	; 0x10c28 <gpib_write_byte+0xba>
                        GPIB_IO_LOW(ATN);   // FYI: SS80 never sends ATN from a device
   10c22:	5e 98       	cbi	0x0b, 6	; 11
   10c24:	56 9a       	sbi	0x0a, 6	; 10
   10c26:	01 c0       	rjmp	.+2      	; 0x10c2a <gpib_write_byte+0xbc>
                    else
                        GPIB_PIN_FLOAT_UP(ATN);
   10c28:	56 98       	cbi	0x0a, 6	; 10

                    gpib_timeout_set(HTIMEOUT);
   10c2a:	64 ef       	ldi	r22, 0xF4	; 244
   10c2c:	71 e0       	ldi	r23, 0x01	; 1
   10c2e:	80 e0       	ldi	r24, 0x00	; 0
   10c30:	90 e0       	ldi	r25, 0x00	; 0
   10c32:	59 de       	rcall	.-846    	; 0x108e6 <gpib_timeout_set>
                    tx_state = GPIB_TX_WAIT_READY;
   10c34:	11 e0       	ldi	r17, 0x01	; 1
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10c36:	80 91 f6 1c 	lds	r24, 0x1CF6	; 0x801cf6 <gpib_timer+0x8>
                        GPIB_PIN_FLOAT_UP(ATN);

                    gpib_timeout_set(HTIMEOUT);
                    tx_state = GPIB_TX_WAIT_READY;
                }
                if (gpib_timeout_test())
   10c3a:	88 23       	and	r24, r24
   10c3c:	71 f2       	breq	.-100    	; 0x10bda <gpib_write_byte+0x6c>
                {
#if SDEBUG
                    if(debuglevel & (1+4))
   10c3e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   10c42:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   10c46:	85 70       	andi	r24, 0x05	; 5
   10c48:	99 27       	eor	r25, r25
   10c4a:	89 2b       	or	r24, r25
   10c4c:	39 f1       	breq	.+78     	; 0x10c9c <gpib_write_byte+0x12e>
                        printf("<BUS waiting for DAV==1>\n");
   10c4e:	1f 92       	push	r1
   10c50:	3d 81       	ldd	r19, Y+5	; 0x05
   10c52:	3f 93       	push	r19
   10c54:	4c 81       	ldd	r20, Y+4	; 0x04
   10c56:	4f 93       	push	r20
   10c58:	1c c0       	rjmp	.+56     	; 0x10c92 <gpib_write_byte+0x124>
                }
                break;

            case GPIB_TX_WAIT_READY:
                // Wait for ready condition
                if(GPIB_PIN_TST(NRFD) == 1 && GPIB_PIN_TST(NDAC) == 0)
   10c5a:	4a 9b       	sbis	0x09, 2	; 9
   10c5c:	08 c0       	rjmp	.+16     	; 0x10c6e <gpib_write_byte+0x100>
   10c5e:	4b 99       	sbic	0x09, 3	; 9
                {
                    gpib_timeout_set(HTIMEOUT);
   10c60:	06 c0       	rjmp	.+12     	; 0x10c6e <gpib_write_byte+0x100>
   10c62:	64 ef       	ldi	r22, 0xF4	; 244
   10c64:	71 e0       	ldi	r23, 0x01	; 1
   10c66:	80 e0       	ldi	r24, 0x00	; 0
   10c68:	90 e0       	ldi	r25, 0x00	; 0
                    tx_state = GPIB_TX_PUT_DATA;
   10c6a:	3d de       	rcall	.-902    	; 0x108e6 <gpib_timeout_set>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10c6c:	12 e0       	ldi	r17, 0x02	; 2
   10c6e:	80 91 f6 1c 	lds	r24, 0x1CF6	; 0x801cf6 <gpib_timer+0x8>
                if(GPIB_PIN_TST(NRFD) == 1 && GPIB_PIN_TST(NDAC) == 0)
                {
                    gpib_timeout_set(HTIMEOUT);
                    tx_state = GPIB_TX_PUT_DATA;
                }
                if (gpib_timeout_test())
   10c72:	88 23       	and	r24, r24
   10c74:	09 f4       	brne	.+2      	; 0x10c78 <gpib_write_byte+0x10a>
                {
#if SDEBUG
                    if(debuglevel & (1+4))
   10c76:	b1 cf       	rjmp	.-158    	; 0x10bda <gpib_write_byte+0x6c>
   10c78:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   10c7c:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   10c80:	85 70       	andi	r24, 0x05	; 5
   10c82:	99 27       	eor	r25, r25
   10c84:	89 2b       	or	r24, r25
                        printf("<BUS waiting for NRFD==1 && NDAC == 0>\n");
   10c86:	51 f0       	breq	.+20     	; 0x10c9c <gpib_write_byte+0x12e>
   10c88:	1f 92       	push	r1
   10c8a:	9a 81       	ldd	r25, Y+2	; 0x02
   10c8c:	9f 93       	push	r25
   10c8e:	29 81       	ldd	r18, Y+1	; 0x01
   10c90:	2f 93       	push	r18
   10c92:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   10c96:	0f 90       	pop	r0
   10c98:	0f 90       	pop	r0
#endif
                    ch |= TIMEOUT_FLAG;
   10c9a:	0f 90       	pop	r0
   10c9c:	8f 81       	ldd	r24, Y+7	; 0x07
   10c9e:	98 85       	ldd	r25, Y+8	; 0x08
   10ca0:	90 64       	ori	r25, 0x40	; 64
   10ca2:	98 87       	std	Y+8, r25	; 0x08
   10ca4:	8f 83       	std	Y+7, r24	; 0x07
                }
                break;

            case GPIB_TX_PUT_DATA:

                if(ch & EOI_FLAG)
   10ca6:	b4 c0       	rjmp	.+360    	; 0x10e10 <gpib_write_byte+0x2a2>
   10ca8:	2f 81       	ldd	r18, Y+7	; 0x07
   10caa:	38 85       	ldd	r19, Y+8	; 0x08
   10cac:	30 ff       	sbrs	r19, 0
                    GPIB_IO_LOW(EOI);
   10cae:	03 c0       	rjmp	.+6      	; 0x10cb6 <gpib_write_byte+0x148>
   10cb0:	28 98       	cbi	0x05, 0	; 5
   10cb2:	20 9a       	sbi	0x04, 0	; 4
                else
                    GPIB_PIN_FLOAT_UP(EOI);
   10cb4:	01 c0       	rjmp	.+2      	; 0x10cb8 <gpib_write_byte+0x14a>

                GPIB_BUS_WR((ch & 0xff) ^ 0xff);  // Write Data inverted
   10cb6:	20 98       	cbi	0x04, 0	; 4
   10cb8:	8f ef       	ldi	r24, 0xFF	; 255
   10cba:	81 b9       	out	0x01, r24	; 1
   10cbc:	8f 81       	ldd	r24, Y+7	; 0x07
   10cbe:	80 95       	com	r24
#if BOARD == 2
				// Switch to Tristate mode to soeed up Write
                GPIB_IO_HI(PE); 
   10cc0:	82 b9       	out	0x02, r24	; 2
   10cc2:	43 9a       	sbi	0x08, 3	; 8
   10cc4:	3b 9a       	sbi	0x07, 3	; 7
   10cc6:	3d e0       	ldi	r19, 0x0D	; 13
   10cc8:	3a 95       	dec	r19
#endif
                GPIB_BUS_SETTLE();                // Let Data BUS settle

                gpib_timeout_set(HTIMEOUT);
   10cca:	f1 f7       	brne	.-4      	; 0x10cc8 <gpib_write_byte+0x15a>
   10ccc:	00 00       	nop
   10cce:	64 ef       	ldi	r22, 0xF4	; 244
   10cd0:	71 e0       	ldi	r23, 0x01	; 1
   10cd2:	80 e0       	ldi	r24, 0x00	; 0
   10cd4:	90 e0       	ldi	r25, 0x00	; 0
                tx_state = GPIB_TX_SET_DAV_LOW;
   10cd6:	07 de       	rcall	.-1010   	; 0x108e6 <gpib_timeout_set>
                break;


            case GPIB_TX_SET_DAV_LOW:
                GPIB_IO_LOW(DAV);
   10cd8:	13 e0       	ldi	r17, 0x03	; 3
                gpib_timeout_set(HTIMEOUT);
   10cda:	7f cf       	rjmp	.-258    	; 0x10bda <gpib_write_byte+0x6c>
   10cdc:	29 98       	cbi	0x05, 1	; 5
   10cde:	21 9a       	sbi	0x04, 1	; 4
   10ce0:	64 ef       	ldi	r22, 0xF4	; 244
   10ce2:	71 e0       	ldi	r23, 0x01	; 1
   10ce4:	80 e0       	ldi	r24, 0x00	; 0
                tx_state = GPIB_TX_WAIT_FOR_NRFD_LOW;
                break;

            ///@brief first device is ready
            case GPIB_TX_WAIT_FOR_NRFD_LOW:
                if (GPIB_PIN_TST(NRFD) == 0)
   10ce6:	90 e0       	ldi	r25, 0x00	; 0
   10ce8:	fe dd       	rcall	.-1028   	; 0x108e6 <gpib_timeout_set>
                {
                    gpib_timeout_set(HTIMEOUT);
   10cea:	14 e0       	ldi	r17, 0x04	; 4
   10cec:	76 cf       	rjmp	.-276    	; 0x10bda <gpib_write_byte+0x6c>
   10cee:	4a 99       	sbic	0x09, 2	; 9
   10cf0:	07 c0       	rjmp	.+14     	; 0x10d00 <gpib_write_byte+0x192>
   10cf2:	64 ef       	ldi	r22, 0xF4	; 244
   10cf4:	71 e0       	ldi	r23, 0x01	; 1
                    tx_state = GPIB_TX_WAIT_FOR_NDAC_HI;
   10cf6:	80 e0       	ldi	r24, 0x00	; 0
                    break;
   10cf8:	90 e0       	ldi	r25, 0x00	; 0
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10cfa:	f5 dd       	rcall	.-1046   	; 0x108e6 <gpib_timeout_set>
   10cfc:	15 e0       	ldi	r17, 0x05	; 5
                {
                    gpib_timeout_set(HTIMEOUT);
                    tx_state = GPIB_TX_WAIT_FOR_NDAC_HI;
                    break;
                }
                if (gpib_timeout_test())
   10cfe:	6d cf       	rjmp	.-294    	; 0x10bda <gpib_write_byte+0x6c>
   10d00:	80 91 f6 1c 	lds	r24, 0x1CF6	; 0x801cf6 <gpib_timer+0x8>
                {
                    ch |= TIMEOUT_FLAG;
   10d04:	88 23       	and	r24, r24
   10d06:	09 f4       	brne	.+2      	; 0x10d0a <gpib_write_byte+0x19c>
   10d08:	68 cf       	rjmp	.-304    	; 0x10bda <gpib_write_byte+0x6c>
   10d0a:	8f 81       	ldd	r24, Y+7	; 0x07
   10d0c:	98 85       	ldd	r25, Y+8	; 0x08
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
   10d0e:	90 64       	ori	r25, 0x40	; 64
   10d10:	98 87       	std	Y+8, r25	; 0x08
   10d12:	8f 83       	std	Y+7, r24	; 0x07
   10d14:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   10d18:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   10d1c:	85 70       	andi	r24, 0x05	; 5
   10d1e:	99 27       	eor	r25, r25
                        printf("<BUS waiting for NRFD==0>\n");
   10d20:	89 2b       	or	r24, r25
   10d22:	09 f4       	brne	.+2      	; 0x10d26 <gpib_write_byte+0x1b8>
   10d24:	75 c0       	rjmp	.+234    	; 0x10e10 <gpib_write_byte+0x2a2>
   10d26:	1f 92       	push	r1
                }
                break;

            ///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)         // Byte byte accepted
   10d28:	3f 92       	push	r3
   10d2a:	2f 92       	push	r2
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10d2c:	3f c0       	rjmp	.+126    	; 0x10dac <gpib_write_byte+0x23e>
   10d2e:	4b 99       	sbic	0x09, 3	; 9
                if(GPIB_PIN_TST(NDAC) == 1)         // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
                    break;
                }
                if (gpib_timeout_test())
   10d30:	6b c0       	rjmp	.+214    	; 0x10e08 <gpib_write_byte+0x29a>
   10d32:	80 91 f6 1c 	lds	r24, 0x1CF6	; 0x801cf6 <gpib_timer+0x8>
                {
                    ch |= TIMEOUT_FLAG;
   10d36:	88 23       	and	r24, r24
   10d38:	09 f4       	brne	.+2      	; 0x10d3c <gpib_write_byte+0x1ce>
   10d3a:	4f cf       	rjmp	.-354    	; 0x10bda <gpib_write_byte+0x6c>
   10d3c:	2f 81       	ldd	r18, Y+7	; 0x07
   10d3e:	38 85       	ldd	r19, Y+8	; 0x08
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
   10d40:	30 64       	ori	r19, 0x40	; 64
   10d42:	38 87       	std	Y+8, r19	; 0x08
   10d44:	2f 83       	std	Y+7, r18	; 0x07
   10d46:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   10d4a:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   10d4e:	85 70       	andi	r24, 0x05	; 5
   10d50:	99 27       	eor	r25, r25
                        printf("<BUS waiting for NDAC==1>\n");
   10d52:	89 2b       	or	r24, r25
   10d54:	09 f4       	brne	.+2      	; 0x10d58 <gpib_write_byte+0x1ea>
   10d56:	5c c0       	rjmp	.+184    	; 0x10e10 <gpib_write_byte+0x2a2>
                }
                break;

            ///@release BUS
            case GPIB_TX_SET_DAV_HI:
                GPIB_PIN_FLOAT_UP(DAV);
   10d58:	1f 92       	push	r1
   10d5a:	7f 92       	push	r7
   10d5c:	6f 92       	push	r6
   10d5e:	26 c0       	rjmp	.+76     	; 0x10dac <gpib_write_byte+0x23e>
				GPIB_BUS_SETTLE();			// give some time

				gpib_bus_read_init(0);		// Free BUS, NOT busy
   10d60:	21 98       	cbi	0x04, 1	; 4
   10d62:	3d e0       	ldi	r19, 0x0D	; 13
   10d64:	3a 95       	dec	r19
   10d66:	f1 f7       	brne	.-4      	; 0x10d64 <gpib_write_byte+0x1f6>

                gpib_timeout_set(HTIMEOUT);
   10d68:	00 00       	nop
   10d6a:	80 e0       	ldi	r24, 0x00	; 0
   10d6c:	90 e0       	ldi	r25, 0x00	; 0
   10d6e:	c5 dd       	rcall	.-1142   	; 0x108fa <gpib_bus_read_init>
   10d70:	64 ef       	ldi	r22, 0xF4	; 244
   10d72:	71 e0       	ldi	r23, 0x01	; 1
                tx_state = GPIB_TX_WAIT_FOR_DAV_HI;
   10d74:	80 e0       	ldi	r24, 0x00	; 0
                break;
   10d76:	90 e0       	ldi	r25, 0x00	; 0

			/// We are in read mode now
            ///@wait for DAV to finish float HI - finishing floating HI
            case GPIB_TX_WAIT_FOR_DAV_HI:
                if(GPIO_PIN_TST(DAV) == 1)
   10d78:	b6 dd       	rcall	.-1172   	; 0x108e6 <gpib_timeout_set>
   10d7a:	17 e0       	ldi	r17, 0x07	; 7
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10d7c:	2e cf       	rjmp	.-420    	; 0x10bda <gpib_write_byte+0x6c>
   10d7e:	19 99       	sbic	0x03, 1	; 3
                if(GPIO_PIN_TST(DAV) == 1)
                {
                    tx_state = GPIB_TX_FINISH;
                    break;
                }
                if (gpib_timeout_test())
   10d80:	45 c0       	rjmp	.+138    	; 0x10e0c <gpib_write_byte+0x29e>
   10d82:	80 91 f6 1c 	lds	r24, 0x1CF6	; 0x801cf6 <gpib_timer+0x8>
                {
                    ch |= TIMEOUT_FLAG;
   10d86:	88 23       	and	r24, r24
   10d88:	09 f4       	brne	.+2      	; 0x10d8c <gpib_write_byte+0x21e>
   10d8a:	27 cf       	rjmp	.-434    	; 0x10bda <gpib_write_byte+0x6c>
   10d8c:	8f 81       	ldd	r24, Y+7	; 0x07
   10d8e:	98 85       	ldd	r25, Y+8	; 0x08
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
   10d90:	90 64       	ori	r25, 0x40	; 64
   10d92:	98 87       	std	Y+8, r25	; 0x08
   10d94:	8f 83       	std	Y+7, r24	; 0x07
   10d96:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   10d9a:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   10d9e:	85 70       	andi	r24, 0x05	; 5
                        printf("<BUS waiting for DAV==1>\n");
   10da0:	99 27       	eor	r25, r25
   10da2:	89 2b       	or	r24, r25
   10da4:	a9 f1       	breq	.+106    	; 0x10e10 <gpib_write_byte+0x2a2>
   10da6:	1f 92       	push	r1
   10da8:	df 92       	push	r13
   10daa:	cf 92       	push	r12
   10dac:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   10db0:	0f 90       	pop	r0
                tx_state = GPIB_TX_DONE;
                break;

            case GPIB_TX_ERROR:
#if SDEBUG
                if(debuglevel & (1+4))
   10db2:	0f 90       	pop	r0
   10db4:	0f 90       	pop	r0
   10db6:	2c c0       	rjmp	.+88     	; 0x10e10 <gpib_write_byte+0x2a2>
   10db8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   10dbc:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   10dc0:	85 70       	andi	r24, 0x05	; 5
                    printf("<NRFD=%d,NDAV=%d>\n", GPIB_PIN_TST(NRFD),GPIB_PIN_TST(NDAC));
   10dc2:	99 27       	eor	r25, r25
   10dc4:	89 2b       	or	r24, r25
   10dc6:	c1 f0       	breq	.+48     	; 0x10df8 <gpib_write_byte+0x28a>
   10dc8:	99 b1       	in	r25, 0x09	; 9
   10dca:	89 b1       	in	r24, 0x09	; 9
   10dcc:	93 fb       	bst	r25, 3
   10dce:	99 27       	eor	r25, r25
   10dd0:	90 f9       	bld	r25, 0
   10dd2:	1f 92       	push	r1
   10dd4:	9f 93       	push	r25
   10dd6:	82 fb       	bst	r24, 2
   10dd8:	88 27       	eor	r24, r24
   10dda:	80 f9       	bld	r24, 0
   10ddc:	1f 92       	push	r1
   10dde:	8f 93       	push	r24
   10de0:	8a e0       	ldi	r24, 0x0A	; 10
   10de2:	90 e1       	ldi	r25, 0x10	; 16
   10de4:	1f 92       	push	r1
   10de6:	9f 93       	push	r25
   10de8:	8f 93       	push	r24
   10dea:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   10dee:	0f b6       	in	r0, 0x3f	; 63
#endif
// Free BUS, BUSY on error
				gpib_bus_read_init(1);		
   10df0:	f8 94       	cli
   10df2:	de bf       	out	0x3e, r29	; 62
   10df4:	0f be       	out	0x3f, r0	; 63
   10df6:	cd bf       	out	0x3d, r28	; 61
                tx_state = GPIB_TX_DONE;
                break;
   10df8:	81 e0       	ldi	r24, 0x01	; 1
	// GPIB_IO_LOW(PE);			// BUS OC PULLUP

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);

    while(tx_state != GPIB_TX_DONE )
   10dfa:	90 e0       	ldi	r25, 0x00	; 0
   10dfc:	7e dd       	rcall	.-1284   	; 0x108fa <gpib_bus_read_init>
   10dfe:	0a c0       	rjmp	.+20     	; 0x10e14 <gpib_write_byte+0x2a6>
   10e00:	1a 30       	cpi	r17, 0x0A	; 10

            ///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)         // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
   10e02:	09 f0       	breq	.+2      	; 0x10e06 <gpib_write_byte+0x298>
   10e04:	ea ce       	rjmp	.-556    	; 0x10bda <gpib_write_byte+0x6c>
			/// We are in read mode now
            ///@wait for DAV to finish float HI - finishing floating HI
            case GPIB_TX_WAIT_FOR_DAV_HI:
                if(GPIO_PIN_TST(DAV) == 1)
                {
                    tx_state = GPIB_TX_FINISH;
   10e06:	06 c0       	rjmp	.+12     	; 0x10e14 <gpib_write_byte+0x2a6>
   10e08:	16 e0       	ldi	r17, 0x06	; 6
                    break;
                }
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
   10e0a:	e7 ce       	rjmp	.-562    	; 0x10bda <gpib_write_byte+0x6c>
   10e0c:	18 e0       	ldi	r17, 0x08	; 8
            case GPIB_TX_DONE:
                break;
        }
    }
    return(ch);
}
   10e0e:	e5 ce       	rjmp	.-566    	; 0x10bda <gpib_write_byte+0x6c>
   10e10:	19 e0       	ldi	r17, 0x09	; 9
   10e12:	e3 ce       	rjmp	.-570    	; 0x10bda <gpib_write_byte+0x6c>
   10e14:	8f 81       	ldd	r24, Y+7	; 0x07
   10e16:	98 85       	ldd	r25, Y+8	; 0x08
   10e18:	28 96       	adiw	r28, 0x08	; 8
   10e1a:	0f b6       	in	r0, 0x3f	; 63
   10e1c:	f8 94       	cli
   10e1e:	de bf       	out	0x3e, r29	; 62
   10e20:	0f be       	out	0x3f, r0	; 63
   10e22:	cd bf       	out	0x3d, r28	; 61
   10e24:	df 91       	pop	r29
   10e26:	cf 91       	pop	r28
   10e28:	1f 91       	pop	r17
   10e2a:	ef 90       	pop	r14
   10e2c:	df 90       	pop	r13
   10e2e:	cf 90       	pop	r12
   10e30:	8f 90       	pop	r8
   10e32:	7f 90       	pop	r7
   10e34:	6f 90       	pop	r6
   10e36:	4f 90       	pop	r4
   10e38:	3f 90       	pop	r3
   10e3a:	2f 90       	pop	r2
   10e3c:	08 95       	ret

00010e3e <gpib_decode_header>:
/// @see: gpib.h _FLAGS defines for a full list is control lines we track
/// @see: gpib_trace()
/// @return void
///@param[in] fo: FILE pointer or "stdout"
void gpib_decode_header( FILE *fo)
{
   10e3e:	cf 93       	push	r28
   10e40:	df 93       	push	r29
   10e42:	ec 01       	movw	r28, r24
    if(fo == NULL)
   10e44:	89 2b       	or	r24, r25
   10e46:	21 f4       	brne	.+8      	; 0x10e50 <gpib_decode_header+0x12>
        fo = stdout;
   10e48:	c0 91 d0 1c 	lds	r28, 0x1CD0	; 0x801cd0 <__iob+0x2>
   10e4c:	d0 91 d1 1c 	lds	r29, 0x1CD1	; 0x801cd1 <__iob+0x3>
        
    fprintf(fo,"===========================================\n");
   10e50:	be 01       	movw	r22, r28
   10e52:	8f e5       	ldi	r24, 0x5F	; 95
   10e54:	9b e0       	ldi	r25, 0x0B	; 11
   10e56:	0e 94 fb 75 	call	0xebf6	; 0xebf6 <fputs>
    fprintf(fo,"GPIB bus state\n");
   10e5a:	be 01       	movw	r22, r28
   10e5c:	8c e8       	ldi	r24, 0x8C	; 140
   10e5e:	9b e0       	ldi	r25, 0x0B	; 11
   10e60:	0e 94 fb 75 	call	0xebf6	; 0xebf6 <fputs>
    fprintf(fo,"HH . AESRPITB gpib\n");
   10e64:	be 01       	movw	r22, r28
   10e66:	8c e9       	ldi	r24, 0x9C	; 156
   10e68:	9b e0       	ldi	r25, 0x0B	; 11
   10e6a:	0e 94 fb 75 	call	0xebf6	; 0xebf6 <fputs>
    fprintf(fo,"HH = Hex value of Command or Data\n");
   10e6e:	be 01       	movw	r22, r28
   10e70:	80 eb       	ldi	r24, 0xB0	; 176
   10e72:	9b e0       	ldi	r25, 0x0B	; 11
   10e74:	0e 94 fb 75 	call	0xebf6	; 0xebf6 <fputs>
    fprintf(fo,"   . = ASCII of XX only for 0x20 .. 0x7e\n");
   10e78:	be 01       	movw	r22, r28
   10e7a:	83 ed       	ldi	r24, 0xD3	; 211
   10e7c:	9b e0       	ldi	r25, 0x0B	; 11
   10e7e:	0e 94 fb 75 	call	0xebf6	; 0xebf6 <fputs>
    fprintf(fo,"     A = ATN\n");
   10e82:	be 01       	movw	r22, r28
   10e84:	8d ef       	ldi	r24, 0xFD	; 253
   10e86:	9b e0       	ldi	r25, 0x0B	; 11
   10e88:	0e 94 fb 75 	call	0xebf6	; 0xebf6 <fputs>
    fprintf(fo,"      E = EOI\n");
   10e8c:	be 01       	movw	r22, r28
   10e8e:	8b e0       	ldi	r24, 0x0B	; 11
   10e90:	9c e0       	ldi	r25, 0x0C	; 12
   10e92:	0e 94 fb 75 	call	0xebf6	; 0xebf6 <fputs>
    fprintf(fo,"       S = SRQ\n");
   10e96:	be 01       	movw	r22, r28
   10e98:	8a e1       	ldi	r24, 0x1A	; 26
   10e9a:	9c e0       	ldi	r25, 0x0C	; 12
   10e9c:	0e 94 fb 75 	call	0xebf6	; 0xebf6 <fputs>
    fprintf(fo,"        R = REN\n");
   10ea0:	be 01       	movw	r22, r28
   10ea2:	8a e2       	ldi	r24, 0x2A	; 42
   10ea4:	9c e0       	ldi	r25, 0x0C	; 12
   10ea6:	0e 94 fb 75 	call	0xebf6	; 0xebf6 <fputs>
    fprintf(fo,"         I = IFC\n");
   10eaa:	be 01       	movw	r22, r28
   10eac:	8b e3       	ldi	r24, 0x3B	; 59
   10eae:	9c e0       	ldi	r25, 0x0C	; 12
   10eb0:	0e 94 fb 75 	call	0xebf6	; 0xebf6 <fputs>
    fprintf(fo,"          P = Parallel Poll seen\n");
   10eb4:	be 01       	movw	r22, r28
   10eb6:	8d e4       	ldi	r24, 0x4D	; 77
   10eb8:	9c e0       	ldi	r25, 0x0C	; 12
   10eba:	0e 94 fb 75 	call	0xebf6	; 0xebf6 <fputs>
    fprintf(fo,"           T = TIMEOUT\n");
   10ebe:	be 01       	movw	r22, r28
   10ec0:	8f e6       	ldi	r24, 0x6F	; 111
   10ec2:	9c e0       	ldi	r25, 0x0C	; 12
   10ec4:	0e 94 fb 75 	call	0xebf6	; 0xebf6 <fputs>
    fprintf(fo,"            B = BUS_ERROR\n");
   10ec8:	be 01       	movw	r22, r28
   10eca:	87 e8       	ldi	r24, 0x87	; 135
   10ecc:	9c e0       	ldi	r25, 0x0C	; 12
   10ece:	0e 94 fb 75 	call	0xebf6	; 0xebf6 <fputs>
    fprintf(fo,"              GPIB commands\n");
   10ed2:	be 01       	movw	r22, r28
   10ed4:	82 ea       	ldi	r24, 0xA2	; 162
   10ed6:	9c e0       	ldi	r25, 0x0C	; 12
   10ed8:	0e 94 fb 75 	call	0xebf6	; 0xebf6 <fputs>
}
   10edc:	df 91       	pop	r29
   10ede:	cf 91       	pop	r28
   10ee0:	08 95       	ret

00010ee2 <gpib_trace_display>:
/// @return  void
/// Note the bits we can read depends on what hardware verions we have
/// V2 hardware can only read status bits based on GPIB control buffer direction
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
   10ee2:	a0 e8       	ldi	r26, 0x80	; 128
   10ee4:	b0 e0       	ldi	r27, 0x00	; 0
   10ee6:	e7 e7       	ldi	r30, 0x77	; 119
   10ee8:	f7 e8       	ldi	r31, 0x87	; 135
   10eea:	0c 94 19 e8 	jmp	0x1d032	; 0x1d032 <__prologue_saves__+0xc>
   10eee:	8c 01       	movw	r16, r24
   10ef0:	5b 01       	movw	r10, r22
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
    extern FILE *gpib_log_fp;

    str[0] = 0;
   10ef2:	19 82       	std	Y+1, r1	; 0x01
   10ef4:	4c 01       	movw	r8, r24
   10ef6:	88 24       	eor	r8, r8
   10ef8:	44 e0       	ldi	r20, 0x04	; 4
   10efa:	94 22       	and	r9, r20
   10efc:	ce 01       	movw	r24, r28
   10efe:	01 96       	adiw	r24, 0x01	; 1
   10f00:	6c 01       	movw	r12, r24

    // Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
   10f02:	62 30       	cpi	r22, 0x02	; 2
   10f04:	71 05       	cpc	r23, r1
   10f06:	f0 f4       	brcc	.+60     	; 0x10f44 <gpib_trace_display+0x62>
    {
        uint8_t printable = ' ';                          // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   10f08:	81 14       	cp	r8, r1
   10f0a:	91 04       	cpc	r9, r1
   10f0c:	29 f4       	brne	.+10     	; 0x10f18 <gpib_trace_display+0x36>
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
   10f0e:	80 2f       	mov	r24, r16

    // Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                          // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   10f10:	90 ee       	ldi	r25, 0xE0	; 224
   10f12:	90 0f       	add	r25, r16
   10f14:	9f 35       	cpi	r25, 0x5F	; 95
   10f16:	08 f0       	brcs	.+2      	; 0x10f1a <gpib_trace_display+0x38>
    str[0] = 0;

    // Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                          // Data
   10f18:	80 e2       	ldi	r24, 0x20	; 32
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
            printable = bus;
        sprintf(str, "%02X %c ", (int)bus & 0xff, (int)printable);
   10f1a:	1f 92       	push	r1
   10f1c:	8f 93       	push	r24
   10f1e:	c8 01       	movw	r24, r16
   10f20:	99 27       	eor	r25, r25
   10f22:	9f 93       	push	r25
   10f24:	8f 93       	push	r24
   10f26:	81 e0       	ldi	r24, 0x01	; 1
   10f28:	90 e1       	ldi	r25, 0x10	; 16
   10f2a:	1f 92       	push	r1
   10f2c:	9f 93       	push	r25
   10f2e:	8f 93       	push	r24
   10f30:	df 92       	push	r13
   10f32:	cf 92       	push	r12
   10f34:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <sprintf_P>
   10f38:	0f b6       	in	r0, 0x3f	; 63
   10f3a:	f8 94       	cli
   10f3c:	de bf       	out	0x3e, r29	; 62
   10f3e:	0f be       	out	0x3f, r0	; 63
   10f40:	cd bf       	out	0x3d, r28	; 61
   10f42:	0e c0       	rjmp	.+28     	; 0x10f60 <gpib_trace_display+0x7e>
    }
    else
    {
        sprintf(str, "     ");
   10f44:	8b ef       	ldi	r24, 0xFB	; 251
   10f46:	9f e0       	ldi	r25, 0x0F	; 15
   10f48:	1f 92       	push	r1
   10f4a:	9f 93       	push	r25
   10f4c:	8f 93       	push	r24
   10f4e:	df 92       	push	r13
   10f50:	cf 92       	push	r12
   10f52:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <sprintf_P>
   10f56:	0f 90       	pop	r0
   10f58:	0f 90       	pop	r0
   10f5a:	0f 90       	pop	r0
   10f5c:	0f 90       	pop	r0
   10f5e:	0f 90       	pop	r0
    }

    tmp = str + strlen(str);
   10f60:	f6 01       	movw	r30, r12
   10f62:	01 90       	ld	r0, Z+
   10f64:	00 20       	and	r0, r0
   10f66:	e9 f7       	brne	.-6      	; 0x10f62 <gpib_trace_display+0x80>
   10f68:	31 97       	sbiw	r30, 0x01	; 1
   10f6a:	cf 01       	movw	r24, r30
   10f6c:	01 96       	adiw	r24, 0x01	; 1

    if(status & ATN_FLAG)
   10f6e:	81 14       	cp	r8, r1
   10f70:	91 04       	cpc	r9, r1
   10f72:	11 f0       	breq	.+4      	; 0x10f78 <gpib_trace_display+0x96>
        *tmp++ = 'A';
   10f74:	21 e4       	ldi	r18, 0x41	; 65
   10f76:	01 c0       	rjmp	.+2      	; 0x10f7a <gpib_trace_display+0x98>
    else
        *tmp++ = '-';
   10f78:	2d e2       	ldi	r18, 0x2D	; 45
   10f7a:	20 83       	st	Z, r18
   10f7c:	dc 01       	movw	r26, r24
   10f7e:	11 96       	adiw	r26, 0x01	; 1

    if(status & EOI_FLAG)
   10f80:	10 ff       	sbrs	r17, 0
   10f82:	02 c0       	rjmp	.+4      	; 0x10f88 <gpib_trace_display+0xa6>
        *tmp++ = 'E';
   10f84:	25 e4       	ldi	r18, 0x45	; 69
   10f86:	01 c0       	rjmp	.+2      	; 0x10f8a <gpib_trace_display+0xa8>
    else
        *tmp++ = '-';
   10f88:	2d e2       	ldi	r18, 0x2D	; 45
   10f8a:	fc 01       	movw	r30, r24
   10f8c:	20 83       	st	Z, r18
   10f8e:	fd 01       	movw	r30, r26
   10f90:	31 96       	adiw	r30, 0x01	; 1

    if(status & SRQ_FLAG)
   10f92:	11 ff       	sbrs	r17, 1
   10f94:	02 c0       	rjmp	.+4      	; 0x10f9a <gpib_trace_display+0xb8>
        *tmp++ = 'S';
   10f96:	83 e5       	ldi	r24, 0x53	; 83
   10f98:	01 c0       	rjmp	.+2      	; 0x10f9c <gpib_trace_display+0xba>
    else
        *tmp++ = '-';
   10f9a:	8d e2       	ldi	r24, 0x2D	; 45
   10f9c:	8c 93       	st	X, r24
   10f9e:	df 01       	movw	r26, r30
   10fa0:	11 96       	adiw	r26, 0x01	; 1

    if(status & REN_FLAG)
   10fa2:	13 ff       	sbrs	r17, 3
   10fa4:	02 c0       	rjmp	.+4      	; 0x10faa <gpib_trace_display+0xc8>
        *tmp++ = 'R';
   10fa6:	82 e5       	ldi	r24, 0x52	; 82
   10fa8:	01 c0       	rjmp	.+2      	; 0x10fac <gpib_trace_display+0xca>
    else
        *tmp++ = '-';
   10faa:	8d e2       	ldi	r24, 0x2D	; 45
   10fac:	80 83       	st	Z, r24
   10fae:	fd 01       	movw	r30, r26
   10fb0:	31 96       	adiw	r30, 0x01	; 1

    if(status & IFC_FLAG)
   10fb2:	14 ff       	sbrs	r17, 4
   10fb4:	02 c0       	rjmp	.+4      	; 0x10fba <gpib_trace_display+0xd8>
        *tmp++ = 'I';
   10fb6:	89 e4       	ldi	r24, 0x49	; 73
   10fb8:	01 c0       	rjmp	.+2      	; 0x10fbc <gpib_trace_display+0xda>
    else
        *tmp++ = '-';
   10fba:	8d e2       	ldi	r24, 0x2D	; 45
   10fbc:	8c 93       	st	X, r24

    if(trace_state == TRACE_DISABLE)
   10fbe:	a1 14       	cp	r10, r1
   10fc0:	b1 04       	cpc	r11, r1
   10fc2:	d1 f4       	brne	.+52     	; 0x10ff8 <gpib_trace_display+0x116>
   10fc4:	df 01       	movw	r26, r30
   10fc6:	11 96       	adiw	r26, 0x01	; 1
    {
        if(status & PP_FLAG)
   10fc8:	15 ff       	sbrs	r17, 5
   10fca:	02 c0       	rjmp	.+4      	; 0x10fd0 <gpib_trace_display+0xee>
            *tmp++ = 'P';
   10fcc:	80 e5       	ldi	r24, 0x50	; 80
   10fce:	01 c0       	rjmp	.+2      	; 0x10fd2 <gpib_trace_display+0xf0>
        else
            *tmp++ = '-';
   10fd0:	8d e2       	ldi	r24, 0x2D	; 45
   10fd2:	80 83       	st	Z, r24
   10fd4:	fd 01       	movw	r30, r26
   10fd6:	31 96       	adiw	r30, 0x01	; 1
        if(status & TIMEOUT_FLAG)
   10fd8:	16 ff       	sbrs	r17, 6
   10fda:	02 c0       	rjmp	.+4      	; 0x10fe0 <gpib_trace_display+0xfe>
            *tmp++ = 'T';
   10fdc:	84 e5       	ldi	r24, 0x54	; 84
   10fde:	01 c0       	rjmp	.+2      	; 0x10fe2 <gpib_trace_display+0x100>
        else
            *tmp++ = '-';
   10fe0:	8d e2       	ldi	r24, 0x2D	; 45
   10fe2:	8c 93       	st	X, r24
   10fe4:	cf 01       	movw	r24, r30
   10fe6:	01 96       	adiw	r24, 0x01	; 1
        if(status & BUS_ERROR_FLAG)
            *tmp++ = 'B';
   10fe8:	7c 01       	movw	r14, r24
            *tmp++ = '-';
        if(status & TIMEOUT_FLAG)
            *tmp++ = 'T';
        else
            *tmp++ = '-';
        if(status & BUS_ERROR_FLAG)
   10fea:	17 ff       	sbrs	r17, 7
   10fec:	02 c0       	rjmp	.+4      	; 0x10ff2 <gpib_trace_display+0x110>
            *tmp++ = 'B';
   10fee:	82 e4       	ldi	r24, 0x42	; 66
   10ff0:	01 c0       	rjmp	.+2      	; 0x10ff4 <gpib_trace_display+0x112>
        else
            *tmp++ = '-';
   10ff2:	8d e2       	ldi	r24, 0x2D	; 45
   10ff4:	80 83       	st	Z, r24
   10ff6:	08 c0       	rjmp	.+16     	; 0x11008 <gpib_trace_display+0x126>
    }
    else
    {
        // not used when tracing
        *tmp++ = '-';
   10ff8:	8d e2       	ldi	r24, 0x2D	; 45
   10ffa:	80 83       	st	Z, r24
        *tmp++ = '-';
   10ffc:	81 83       	std	Z+1, r24	; 0x01
        *tmp++ = '-';
   10ffe:	7f 01       	movw	r14, r30
   11000:	43 e0       	ldi	r20, 0x03	; 3
   11002:	e4 0e       	add	r14, r20
   11004:	f1 1c       	adc	r15, r1
   11006:	82 83       	std	Z+2, r24	; 0x02
    }
    *tmp = 0;
   11008:	f7 01       	movw	r30, r14
   1100a:	10 82       	st	Z, r1

    if(trace_state == TRACE_READ || trace_state == TRACE_BUS)
   1100c:	f1 e0       	ldi	r31, 0x01	; 1
   1100e:	af 1a       	sub	r10, r31
   11010:	b1 08       	sbc	r11, r1
   11012:	42 e0       	ldi	r20, 0x02	; 2
   11014:	a4 16       	cp	r10, r20
   11016:	b1 04       	cpc	r11, r1
   11018:	f0 f4       	brcc	.+60     	; 0x11056 <gpib_trace_display+0x174>
    {
        if(status & DAV_FLAG)
   1101a:	15 ff       	sbrs	r17, 5
   1101c:	03 c0       	rjmp	.+6      	; 0x11024 <gpib_trace_display+0x142>
            strcat(str,"  DAV");
   1101e:	6f eb       	ldi	r22, 0xBF	; 191
   11020:	7c e0       	ldi	r23, 0x0C	; 12
   11022:	02 c0       	rjmp	.+4      	; 0x11028 <gpib_trace_display+0x146>
        else
            strcat(str,"     ");
   11024:	66 e1       	ldi	r22, 0x16	; 22
   11026:	78 e0       	ldi	r23, 0x08	; 8
   11028:	c6 01       	movw	r24, r12
   1102a:	0e 94 38 32 	call	0x6470	; 0x6470 <strcat>
        if(status & NRFD_FLAG)
   1102e:	16 ff       	sbrs	r17, 6
   11030:	03 c0       	rjmp	.+6      	; 0x11038 <gpib_trace_display+0x156>
            strcat(str," NRFD");
   11032:	65 ec       	ldi	r22, 0xC5	; 197
   11034:	7c e0       	ldi	r23, 0x0C	; 12
   11036:	02 c0       	rjmp	.+4      	; 0x1103c <gpib_trace_display+0x15a>
        else
            strcat(str,"     ");
   11038:	66 e1       	ldi	r22, 0x16	; 22
   1103a:	78 e0       	ldi	r23, 0x08	; 8
   1103c:	c6 01       	movw	r24, r12
   1103e:	0e 94 38 32 	call	0x6470	; 0x6470 <strcat>
        if(status & NDAC_FLAG)
   11042:	17 ff       	sbrs	r17, 7
   11044:	03 c0       	rjmp	.+6      	; 0x1104c <gpib_trace_display+0x16a>
            strcat(str," NDAC");
   11046:	6b ec       	ldi	r22, 0xCB	; 203
   11048:	7c e0       	ldi	r23, 0x0C	; 12
   1104a:	02 c0       	rjmp	.+4      	; 0x11050 <gpib_trace_display+0x16e>
        else
            strcat(str,"     ");
   1104c:	66 e1       	ldi	r22, 0x16	; 22
   1104e:	78 e0       	ldi	r23, 0x08	; 8
   11050:	c6 01       	movw	r24, r12
   11052:	0e 94 38 32 	call	0x6470	; 0x6470 <strcat>
    }

    if( (status & ATN_FLAG) )
   11056:	81 14       	cp	r8, r1
   11058:	91 04       	cpc	r9, r1
   1105a:	09 f4       	brne	.+2      	; 0x1105e <gpib_trace_display+0x17c>
   1105c:	58 c0       	rjmp	.+176    	; 0x1110e <gpib_trace_display+0x22c>
    {
        int i;
        int cmd = status & CMD_MASK;
   1105e:	c8 01       	movw	r24, r16
   11060:	8f 77       	andi	r24, 0x7F	; 127
   11062:	99 27       	eor	r25, r25
        if(cmd >= 0x020 && cmd <= 0x3e)
   11064:	9c 01       	movw	r18, r24
   11066:	20 52       	subi	r18, 0x20	; 32
   11068:	31 09       	sbc	r19, r1
   1106a:	2f 31       	cpi	r18, 0x1F	; 31
   1106c:	31 05       	cpc	r19, r1
   1106e:	38 f4       	brcc	.+14     	; 0x1107e <gpib_trace_display+0x19c>
            sprintf(tmp," MLA %02Xh", cmd & 0x1f);
   11070:	0f 71       	andi	r16, 0x1F	; 31
   11072:	11 27       	eor	r17, r17
   11074:	1f 93       	push	r17
   11076:	0f 93       	push	r16
   11078:	80 ef       	ldi	r24, 0xF0	; 240
   1107a:	9f e0       	ldi	r25, 0x0F	; 15
   1107c:	0c c0       	rjmp	.+24     	; 0x11096 <gpib_trace_display+0x1b4>
        else if(cmd >= 0x040 && cmd <= 0x4e)
   1107e:	9c 01       	movw	r18, r24
   11080:	20 54       	subi	r18, 0x40	; 64
   11082:	31 09       	sbc	r19, r1
   11084:	2f 30       	cpi	r18, 0x0F	; 15
   11086:	31 05       	cpc	r19, r1
   11088:	98 f4       	brcc	.+38     	; 0x110b0 <gpib_trace_display+0x1ce>
            sprintf(tmp," MTA %02Xh", cmd & 0x1f);
   1108a:	0f 71       	andi	r16, 0x1F	; 31
   1108c:	11 27       	eor	r17, r17
   1108e:	1f 93       	push	r17
   11090:	0f 93       	push	r16
   11092:	85 ee       	ldi	r24, 0xE5	; 229
   11094:	9f e0       	ldi	r25, 0x0F	; 15
   11096:	1f 92       	push	r1
   11098:	9f 93       	push	r25
   1109a:	8f 93       	push	r24
   1109c:	ff 92       	push	r15
   1109e:	ef 92       	push	r14
   110a0:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <sprintf_P>
   110a4:	0f b6       	in	r0, 0x3f	; 63
   110a6:	f8 94       	cli
   110a8:	de bf       	out	0x3e, r29	; 62
   110aa:	0f be       	out	0x3f, r0	; 63
   110ac:	cd bf       	out	0x3d, r28	; 61
   110ae:	2f c0       	rjmp	.+94     	; 0x1110e <gpib_trace_display+0x22c>
        else if(cmd >= 0x060 && cmd <= 0x6f)
   110b0:	9c 01       	movw	r18, r24
   110b2:	20 56       	subi	r18, 0x60	; 96
   110b4:	31 09       	sbc	r19, r1
   110b6:	20 31       	cpi	r18, 0x10	; 16
   110b8:	31 05       	cpc	r19, r1
   110ba:	28 f0       	brcs	.+10     	; 0x110c6 <gpib_trace_display+0x1e4>
   110bc:	e9 e8       	ldi	r30, 0x89	; 137
   110be:	f1 e0       	ldi	r31, 0x01	; 1
   110c0:	00 e0       	ldi	r16, 0x00	; 0
   110c2:	10 e0       	ldi	r17, 0x00	; 0
   110c4:	09 c0       	rjmp	.+18     	; 0x110d8 <gpib_trace_display+0x1f6>
            sprintf(tmp," MSA %02Xh", cmd & 0x1f);
   110c6:	0f 71       	andi	r16, 0x1F	; 31
   110c8:	11 27       	eor	r17, r17
   110ca:	1f 93       	push	r17
   110cc:	0f 93       	push	r16
   110ce:	8a ed       	ldi	r24, 0xDA	; 218
   110d0:	9f e0       	ldi	r25, 0x0F	; 15
   110d2:	e1 cf       	rjmp	.-62     	; 0x11096 <gpib_trace_display+0x1b4>
        else
        {
            for(i=0;gpib_tokens[i].cmd != -1;++i)
   110d4:	0f 5f       	subi	r16, 0xFF	; 255
   110d6:	1f 4f       	sbci	r17, 0xFF	; 255
   110d8:	20 81       	ld	r18, Z
   110da:	31 81       	ldd	r19, Z+1	; 0x01
   110dc:	2f 3f       	cpi	r18, 0xFF	; 255
   110de:	4f ef       	ldi	r20, 0xFF	; 255
   110e0:	34 07       	cpc	r19, r20
   110e2:	a9 f0       	breq	.+42     	; 0x1110e <gpib_trace_display+0x22c>
   110e4:	34 96       	adiw	r30, 0x04	; 4
            {
                if(cmd == gpib_tokens[i].cmd)
   110e6:	82 17       	cp	r24, r18
   110e8:	93 07       	cpc	r25, r19
   110ea:	a1 f7       	brne	.-24     	; 0x110d4 <gpib_trace_display+0x1f2>
                {
                    strcat(tmp," ");
   110ec:	6a e1       	ldi	r22, 0x1A	; 26
   110ee:	78 e0       	ldi	r23, 0x08	; 8
   110f0:	c7 01       	movw	r24, r14
   110f2:	0e 94 38 32 	call	0x6470	; 0x6470 <strcat>
                    strcat(tmp,gpib_tokens[i].name);
   110f6:	00 0f       	add	r16, r16
   110f8:	11 1f       	adc	r17, r17
   110fa:	00 0f       	add	r16, r16
   110fc:	11 1f       	adc	r17, r17
   110fe:	f8 01       	movw	r30, r16
   11100:	e7 57       	subi	r30, 0x77	; 119
   11102:	fe 4f       	sbci	r31, 0xFE	; 254
   11104:	62 81       	ldd	r22, Z+2	; 0x02
   11106:	73 81       	ldd	r23, Z+3	; 0x03
   11108:	c7 01       	movw	r24, r14
   1110a:	0e 94 38 32 	call	0x6470	; 0x6470 <strcat>
                }
            }
        }
    }

    if(gpib_log_fp == NULL)
   1110e:	20 91 74 19 	lds	r18, 0x1974	; 0x801974 <gpib_log_fp>
   11112:	30 91 75 19 	lds	r19, 0x1975	; 0x801975 <gpib_log_fp+0x1>
   11116:	80 91 d0 1c 	lds	r24, 0x1CD0	; 0x801cd0 <__iob+0x2>
   1111a:	90 91 d1 1c 	lds	r25, 0x1CD1	; 0x801cd1 <__iob+0x3>
   1111e:	23 2b       	or	r18, r19
   11120:	21 f4       	brne	.+8      	; 0x1112a <gpib_trace_display+0x248>
        gpib_log_fp = stdout;
   11122:	90 93 75 19 	sts	0x1975, r25	; 0x801975 <gpib_log_fp+0x1>
   11126:	80 93 74 19 	sts	0x1974, r24	; 0x801974 <gpib_log_fp>

    // Echo to console unless file is the console
    if(gpib_log_fp != stdout)
   1112a:	20 91 74 19 	lds	r18, 0x1974	; 0x801974 <gpib_log_fp>
   1112e:	30 91 75 19 	lds	r19, 0x1975	; 0x801975 <gpib_log_fp+0x1>
   11132:	82 17       	cp	r24, r18
   11134:	93 07       	cpc	r25, r19
   11136:	19 f0       	breq	.+6      	; 0x1113e <gpib_trace_display+0x25c>
        puts(str);
   11138:	c6 01       	movw	r24, r12
   1113a:	0e 94 13 76 	call	0xec26	; 0xec26 <puts>

    // Save to file
    fprintf(gpib_log_fp,"%s\n",str);
   1113e:	df 92       	push	r13
   11140:	cf 92       	push	r12
   11142:	81 ed       	ldi	r24, 0xD1	; 209
   11144:	9c e0       	ldi	r25, 0x0C	; 12
   11146:	9f 93       	push	r25
   11148:	8f 93       	push	r24
   1114a:	80 91 75 19 	lds	r24, 0x1975	; 0x801975 <gpib_log_fp+0x1>
   1114e:	8f 93       	push	r24
   11150:	80 91 74 19 	lds	r24, 0x1974	; 0x801974 <gpib_log_fp>
   11154:	8f 93       	push	r24
   11156:	0e 94 a2 7d 	call	0xfb44	; 0xfb44 <fprintf>
}
   1115a:	0f 90       	pop	r0
   1115c:	0f 90       	pop	r0
   1115e:	0f 90       	pop	r0
   11160:	0f 90       	pop	r0
   11162:	0f 90       	pop	r0
   11164:	0f 90       	pop	r0
   11166:	c0 58       	subi	r28, 0x80	; 128
   11168:	df 4f       	sbci	r29, 0xFF	; 255
   1116a:	ec e0       	ldi	r30, 0x0C	; 12
   1116c:	0c 94 35 e8 	jmp	0x1d06a	; 0x1d06a <__epilogue_restores__+0xc>

00011170 <gpib_read_byte>:
///     - Error Flags:
///       - IFC_FLAG
///
/// @return (data bus, control and error status)
uint16_t gpib_read_byte(int trace)
{
   11170:	af 92       	push	r10
   11172:	bf 92       	push	r11
   11174:	cf 92       	push	r12
   11176:	df 92       	push	r13
   11178:	ff 92       	push	r15
   1117a:	0f 93       	push	r16
   1117c:	1f 93       	push	r17
   1117e:	cf 93       	push	r28
   11180:	df 93       	push	r29

    ch = 0;
    control_last = 0;

    // If we have an unread state it has already been traced!
    if(gpib_unread_f)
   11182:	20 91 73 19 	lds	r18, 0x1973	; 0x801973 <gpib_unread_f>
   11186:	22 23       	and	r18, r18
   11188:	39 f0       	breq	.+14     	; 0x11198 <gpib_read_byte+0x28>
    {
        gpib_unread_f = 0;
   1118a:	10 92 73 19 	sts	0x1973, r1	; 0x801973 <gpib_unread_f>
        return(gpib_unread_data);
   1118e:	80 91 01 1f 	lds	r24, 0x1F01	; 0x801f01 <gpib_unread_data>
   11192:	90 91 02 1f 	lds	r25, 0x1F02	; 0x801f02 <gpib_unread_data+0x1>
   11196:	b8 c0       	rjmp	.+368    	; 0x11308 <gpib_read_byte+0x198>
   11198:	6c 01       	movw	r12, r24
    }

	gpib_bus_read_init(1); // Busy until we are ready
   1119a:	81 e0       	ldi	r24, 0x01	; 1
   1119c:	90 e0       	ldi	r25, 0x00	; 0
   1119e:	ad db       	rcall	.-2214   	; 0x108fa <gpib_bus_read_init>


///@brief V2 boards can NOT read all bits on the control bus at once
/// FIXME We could add a test for read/write state ??
///@brief NRFD,NDAC SRQ are outputs
    if(trace)
   111a0:	c1 14       	cp	r12, r1
   111a2:	d1 04       	cpc	r13, r1
    {
        control_last = gpib_control_pin_read();
   111a4:	51 f0       	breq	.+20     	; 0x111ba <gpib_read_byte+0x4a>
   111a6:	c7 dc       	rcall	.-1650   	; 0x10b36 <gpib_control_pin_read>
        control_last |= gpib_handshake_pin_read();
   111a8:	8c 01       	movw	r16, r24
   111aa:	d5 dc       	rcall	.-1622   	; 0x10b56 <gpib_handshake_pin_read>
   111ac:	08 2b       	or	r16, r24
        gpib_trace_display(control_last, TRACE_BUS);
   111ae:	19 2b       	or	r17, r25
   111b0:	62 e0       	ldi	r22, 0x02	; 2
   111b2:	70 e0       	ldi	r23, 0x00	; 0
   111b4:	c8 01       	movw	r24, r16
   111b6:	95 de       	rcall	.-726    	; 0x10ee2 <gpib_trace_display>
    uint16_t bus, control, control_last;
    extern uint8_t gpib_unread_f;
    extern uint16_t gpib_unread_data;

    ch = 0;
    control_last = 0;
   111b8:	02 c0       	rjmp	.+4      	; 0x111be <gpib_read_byte+0x4e>
   111ba:	00 e0       	ldi	r16, 0x00	; 0
        control_last |= gpib_handshake_pin_read();
        gpib_trace_display(control_last, TRACE_BUS);
    }

    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
   111bc:	10 e0       	ldi	r17, 0x00	; 0
   111be:	f1 2c       	mov	r15, r1
   111c0:	c0 e0       	ldi	r28, 0x00	; 0
    {
        if(uart_keyhit(0))
   111c2:	d0 e0       	ldi	r29, 0x00	; 0
   111c4:	80 e0       	ldi	r24, 0x00	; 0
   111c6:	0e 94 9d 2c 	call	0x593a	; 0x593a <uart_keyhit>
   111ca:	89 2b       	or	r24, r25
		if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

		// IFC is always in for a device
        if(GPIB_PIN_TST(IFC) == 0)
   111cc:	09 f0       	breq	.+2      	; 0x111d0 <gpib_read_byte+0x60>
   111ce:	78 c0       	rjmp	.+240    	; 0x112c0 <gpib_read_byte+0x150>
        {
            ch |= IFC_FLAG;
   111d0:	4c 99       	sbic	0x09, 4	; 9
			gpib_bus_init();
   111d2:	03 c0       	rjmp	.+6      	; 0x111da <gpib_read_byte+0x6a>
   111d4:	d0 61       	ori	r29, 0x10	; 16
   111d6:	b4 db       	rcall	.-2200   	; 0x10940 <gpib_bus_init>
            break;
        }


        switch(rx_state)
   111d8:	73 c0       	rjmp	.+230    	; 0x112c0 <gpib_read_byte+0x150>
   111da:	8f 2d       	mov	r24, r15
   111dc:	90 e0       	ldi	r25, 0x00	; 0
   111de:	89 30       	cpi	r24, 0x09	; 9
   111e0:	91 05       	cpc	r25, r1
   111e2:	08 f0       	brcs	.+2      	; 0x111e6 <gpib_read_byte+0x76>
   111e4:	51 c0       	rjmp	.+162    	; 0x11288 <gpib_read_byte+0x118>
   111e6:	fc 01       	movw	r30, r24
   111e8:	e9 53       	subi	r30, 0x39	; 57
   111ea:	ff 4f       	sbci	r31, 0xFF	; 255
   111ec:	0c 94 cf e7 	jmp	0x1cf9e	; 0x1cf9e <__tablejump2__>
   111f0:	52 98       	cbi	0x0a, 2	; 10
   111f2:	8d e0       	ldi	r24, 0x0D	; 13
   111f4:	8a 95       	dec	r24
   111f6:	f1 f7       	brne	.-4      	; 0x111f4 <gpib_read_byte+0x84>
        {
            case GPIB_RX_START:
                ///@brief Signal that we are ready to ready
                GPIB_PIN_FLOAT_UP(NRFD);
                GPIB_BUS_SETTLE();                // Let Data BUS settle
                rx_state = GPIB_RX_WAIT_FOR_DAV_LOW;
   111f8:	00 00       	nop
   111fa:	ff 24       	eor	r15, r15
   111fc:	f3 94       	inc	r15
                break;

            case GPIB_RX_WAIT_FOR_DAV_LOW:
                ///@brief Wait for Ready acknowledge
                if ( GPIB_PIN_TST(DAV) == 0 )
   111fe:	7f c0       	rjmp	.+254    	; 0x112fe <gpib_read_byte+0x18e>
                    rx_state = GPIB_RX_DAV_IS_LOW;
   11200:	19 99       	sbic	0x03, 1	; 3
                break;

// Accept Data
            case GPIB_RX_DAV_IS_LOW:
                GPIB_IO_LOW(NRFD);                // BUSY
   11202:	7d c0       	rjmp	.+250    	; 0x112fe <gpib_read_byte+0x18e>

                ///@brief gpib_bus_read strips command parity if ATN is low at read time
                bus = gpib_bus_read();
   11204:	62 e0       	ldi	r22, 0x02	; 2
   11206:	f6 2e       	mov	r15, r22
   11208:	7a c0       	rjmp	.+244    	; 0x112fe <gpib_read_byte+0x18e>
   1120a:	5a 98       	cbi	0x0b, 2	; 11
                ch |= bus;
///@brief V2 boards can NOT read all bits on the control bus at once
/// FIXME could add a test for read/write state ??
///@brief NRFD,NDAC SRQ are outputs
                control_last = gpib_control_pin_read();
   1120c:	52 9a       	sbi	0x0a, 2	; 10
   1120e:	8d dc       	rcall	.-1766   	; 0x10b2a <gpib_bus_read>
   11210:	a8 2e       	mov	r10, r24
   11212:	b1 2c       	mov	r11, r1
                ch |= control_last;
   11214:	90 dc       	rcall	.-1760   	; 0x10b36 <gpib_control_pin_read>
   11216:	8c 01       	movw	r16, r24

                if(trace)
   11218:	c8 2b       	or	r28, r24
   1121a:	d9 2b       	or	r29, r25
   1121c:	ca 29       	or	r28, r10
                {
///@brief V2 boards can NOT read all bits on the control bus at once
/// FIXME We could add a test for read/write state ??
///@brief NRFD,NDAC SRQ are outputs
                    control_last |= gpib_handshake_pin_read();
   1121e:	db 29       	or	r29, r11
   11220:	c1 14       	cp	r12, r1
   11222:	d1 04       	cpc	r13, r1
                    gpib_trace_display(bus | control_last, TRACE_READ);
   11224:	49 f0       	breq	.+18     	; 0x11238 <gpib_read_byte+0xc8>
   11226:	97 dc       	rcall	.-1746   	; 0x10b56 <gpib_handshake_pin_read>
   11228:	08 2b       	or	r16, r24
   1122a:	19 2b       	or	r17, r25
   1122c:	61 e0       	ldi	r22, 0x01	; 1
   1122e:	70 e0       	ldi	r23, 0x00	; 0
   11230:	c5 01       	movw	r24, r10
   11232:	80 2b       	or	r24, r16
   11234:	91 2b       	or	r25, r17
   11236:	55 de       	rcall	.-854    	; 0x10ee2 <gpib_trace_display>
                }

                GPIB_PIN_FLOAT_UP(NDAC);
                GPIB_BUS_SETTLE();                // Let Data BUS settle
                gpib_timeout_set(HTIMEOUT);
   11238:	53 98       	cbi	0x0a, 3	; 10
   1123a:	8d e0       	ldi	r24, 0x0D	; 13
   1123c:	8a 95       	dec	r24
   1123e:	f1 f7       	brne	.-4      	; 0x1123c <gpib_read_byte+0xcc>
   11240:	00 00       	nop
#if BOARD == 2
				/// FIXME do we want to keep the next state ?
                rx_state = GPIB_RX_WAIT_FOR_DAV_HI;
   11242:	64 ef       	ldi	r22, 0xF4	; 244
   11244:	71 e0       	ldi	r23, 0x01	; 1
   11246:	80 e0       	ldi	r24, 0x00	; 0
/// FIXME We clould add a test for read/write state ??
///@brief V2 boards we can't - not a big deal as the DAV test works anyway
            ///@brief Wait for NDAC float HI

            case GPIB_RX_WAIT_FOR_NDAC_HI:
                if (GPIB_PIN_TST(NDAC) == 1)
   11248:	90 e0       	ldi	r25, 0x00	; 0
   1124a:	4d db       	rcall	.-2406   	; 0x108e6 <gpib_timeout_set>
                {
                    gpib_timeout_set(HTIMEOUT);
   1124c:	54 e0       	ldi	r21, 0x04	; 4
   1124e:	f5 2e       	mov	r15, r21
   11250:	56 c0       	rjmp	.+172    	; 0x112fe <gpib_read_byte+0x18e>
   11252:	4b 9b       	sbis	0x09, 3	; 9
   11254:	0c c0       	rjmp	.+24     	; 0x1126e <gpib_read_byte+0xfe>
   11256:	64 ef       	ldi	r22, 0xF4	; 244
                    rx_state = GPIB_RX_WAIT_FOR_DAV_HI;
   11258:	71 e0       	ldi	r23, 0x01	; 1
   1125a:	80 e0       	ldi	r24, 0x00	; 0
   1125c:	90 e0       	ldi	r25, 0x00	; 0
                }
                break;

            ///@brief Wait for DAV HI
            case GPIB_RX_WAIT_FOR_DAV_HI:
                if (GPIB_PIN_TST(DAV) == 1)
   1125e:	43 db       	rcall	.-2426   	; 0x108e6 <gpib_timeout_set>
   11260:	44 e0       	ldi	r20, 0x04	; 4
				{
                    rx_state = GPIB_RX_DAV_IS_HI;
   11262:	f4 2e       	mov	r15, r20
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11264:	04 c0       	rjmp	.+8      	; 0x1126e <gpib_read_byte+0xfe>
            case GPIB_RX_WAIT_FOR_DAV_HI:
                if (GPIB_PIN_TST(DAV) == 1)
				{
                    rx_state = GPIB_RX_DAV_IS_HI;
				}
                if (gpib_timeout_test())
   11266:	19 9b       	sbis	0x03, 1	; 3
   11268:	02 c0       	rjmp	.+4      	; 0x1126e <gpib_read_byte+0xfe>
   1126a:	35 e0       	ldi	r19, 0x05	; 5
                {
                    ch |= TIMEOUT_FLAG;
   1126c:	f3 2e       	mov	r15, r19
                    rx_state = GPIB_RX_ERROR;
   1126e:	80 91 f6 1c 	lds	r24, 0x1CF6	; 0x801cf6 <gpib_timer+0x8>
   11272:	88 23       	and	r24, r24
            case GPIB_RX_ERROR:
                rx_state = GPIB_RX_DONE;
                break;

            case GPIB_RX_DONE:
				gpib_bus_read_init(1); // Busy
   11274:	09 f4       	brne	.+2      	; 0x11278 <gpib_read_byte+0x108>
   11276:	43 c0       	rjmp	.+134    	; 0x112fe <gpib_read_byte+0x18e>
   11278:	d0 64       	ori	r29, 0x40	; 64
                break;
        }

        if(trace)
   1127a:	27 e0       	ldi	r18, 0x07	; 7
   1127c:	f2 2e       	mov	r15, r18
   1127e:	3f c0       	rjmp	.+126    	; 0x112fe <gpib_read_byte+0x18e>
   11280:	81 e0       	ldi	r24, 0x01	; 1
   11282:	90 e0       	ldi	r25, 0x00	; 0
   11284:	3a db       	rcall	.-2444   	; 0x108fa <gpib_bus_read_init>
   11286:	04 c0       	rjmp	.+8      	; 0x11290 <gpib_read_byte+0x120>
   11288:	c1 14       	cp	r12, r1
        {
			/// V2 boards can not read all control and handshake bits at once
			/// FIXME We could add a test for read/write state ??
			/// NRFD,NDAC SRQ are outputs durring write phase, but not at very start
            control = gpib_control_pin_read();
   1128a:	d1 04       	cpc	r13, r1
   1128c:	99 f0       	breq	.+38     	; 0x112b4 <gpib_read_byte+0x144>
   1128e:	05 c0       	rjmp	.+10     	; 0x1129a <gpib_read_byte+0x12a>
            control |= gpib_handshake_pin_read();
   11290:	c1 14       	cp	r12, r1
   11292:	d1 04       	cpc	r13, r1
   11294:	a9 f0       	breq	.+42     	; 0x112c0 <gpib_read_byte+0x150>
   11296:	98 e0       	ldi	r25, 0x08	; 8
            if(control_last != control)
   11298:	f9 2e       	mov	r15, r25
   1129a:	4d dc       	rcall	.-1894   	; 0x10b36 <gpib_control_pin_read>
   1129c:	5c 01       	movw	r10, r24
            {
                gpib_trace_display(control, TRACE_BUS);
   1129e:	5b dc       	rcall	.-1866   	; 0x10b56 <gpib_handshake_pin_read>
   112a0:	a8 2a       	or	r10, r24
   112a2:	b9 2a       	or	r11, r25
   112a4:	a0 16       	cp	r10, r16
   112a6:	b1 06       	cpc	r11, r17
   112a8:	31 f0       	breq	.+12     	; 0x112b6 <gpib_read_byte+0x146>
            case GPIB_RX_DONE:
				gpib_bus_read_init(1); // Busy
                break;
        }

        if(trace)
   112aa:	62 e0       	ldi	r22, 0x02	; 2
        control_last |= gpib_handshake_pin_read();
        gpib_trace_display(control_last, TRACE_BUS);
    }

    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
   112ac:	70 e0       	ldi	r23, 0x00	; 0
   112ae:	c5 01       	movw	r24, r10
   112b0:	18 de       	rcall	.-976    	; 0x10ee2 <gpib_trace_display>
   112b2:	01 c0       	rjmp	.+2      	; 0x112b6 <gpib_read_byte+0x146>
   112b4:	58 01       	movw	r10, r16
///  - Remember that NDAC and NRFD are now both LOW!
///  - The spec says to KEEP BOTH LOW when NOT ready to read otherwise
///    we may miss a transfer and cause a controller timeout!
///  - GPIB TX state expects NRFD LOW on entry or it is an ERROR!

    lastcmd = current;
   112b6:	88 e0       	ldi	r24, 0x08	; 8
   112b8:	f8 16       	cp	r15, r24
   112ba:	11 f0       	breq	.+4      	; 0x112c0 <gpib_read_byte+0x150>
   112bc:	85 01       	movw	r16, r10
   112be:	82 cf       	rjmp	.-252    	; 0x111c4 <gpib_read_byte+0x54>
   112c0:	80 91 fb 1e 	lds	r24, 0x1EFB	; 0x801efb <current>
   112c4:	90 91 fc 1e 	lds	r25, 0x1EFC	; 0x801efc <current+0x1>

    if(ch & ERROR_MASK || (ch & ATN_FLAG) == 0)
   112c8:	90 93 f8 1c 	sts	0x1CF8, r25	; 0x801cf8 <lastcmd+0x1>
   112cc:	80 93 f7 1c 	sts	0x1CF7, r24	; 0x801cf7 <lastcmd>
   112d0:	ce 01       	movw	r24, r28
   112d2:	88 27       	eor	r24, r24
        current = 0;
   112d4:	90 7d       	andi	r25, 0xD0	; 208
   112d6:	89 2b       	or	r24, r25
   112d8:	11 f4       	brne	.+4      	; 0x112de <gpib_read_byte+0x16e>
   112da:	d2 fd       	sbrc	r29, 2
   112dc:	05 c0       	rjmp	.+10     	; 0x112e8 <gpib_read_byte+0x178>
    else
        current = ch & CMD_MASK;
   112de:	10 92 fc 1e 	sts	0x1EFC, r1	; 0x801efc <current+0x1>
   112e2:	10 92 fb 1e 	sts	0x1EFB, r1	; 0x801efb <current>
   112e6:	07 c0       	rjmp	.+14     	; 0x112f6 <gpib_read_byte+0x186>
   112e8:	ce 01       	movw	r24, r28
   112ea:	8f 77       	andi	r24, 0x7F	; 127
   112ec:	99 27       	eor	r25, r25
   112ee:	90 93 fc 1e 	sts	0x1EFC, r25	; 0x801efc <current+0x1>
                }
                break;

            ///@brief Ready for next byte
            case GPIB_RX_DAV_IS_HI:
                rx_state = GPIB_RX_FINISH;        // DONE
   112f2:	80 93 fb 1e 	sts	0x1EFB, r24	; 0x801efb <current>
            case GPIB_RX_DONE:
				gpib_bus_read_init(1); // Busy
                break;
        }

        if(trace)
   112f6:	ce 01       	movw	r24, r28
   112f8:	07 c0       	rjmp	.+14     	; 0x11308 <gpib_read_byte+0x198>
   112fa:	86 e0       	ldi	r24, 0x06	; 6
   112fc:	f8 2e       	mov	r15, r24
        current = 0;
    else
        current = ch & CMD_MASK;

    return (ch);
}
   112fe:	c1 14       	cp	r12, r1
   11300:	d1 04       	cpc	r13, r1
   11302:	09 f4       	brne	.+2      	; 0x11306 <gpib_read_byte+0x196>
   11304:	5f cf       	rjmp	.-322    	; 0x111c4 <gpib_read_byte+0x54>
   11306:	c9 cf       	rjmp	.-110    	; 0x1129a <gpib_read_byte+0x12a>
   11308:	df 91       	pop	r29
   1130a:	cf 91       	pop	r28
   1130c:	1f 91       	pop	r17
   1130e:	0f 91       	pop	r16
   11310:	ff 90       	pop	r15
   11312:	df 90       	pop	r13
   11314:	cf 90       	pop	r12
   11316:	bf 90       	pop	r11
   11318:	af 90       	pop	r10
   1131a:	08 95       	ret

0001131c <gpib_decode>:
/// @see gpib_decode_str()
/// @return  void

void gpib_decode(uint16_t ch)
{
    gpib_trace_display(ch,0);
   1131c:	60 e0       	ldi	r22, 0x00	; 0
   1131e:	70 e0       	ldi	r23, 0x00	; 0
   11320:	e0 cd       	rjmp	.-1088   	; 0x10ee2 <gpib_trace_display>
   11322:	08 95       	ret

00011324 <gpib_read_str>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
int gpib_read_str(uint8_t *buf, int size, uint16_t *status)
{
   11324:	a0 e0       	ldi	r26, 0x00	; 0
   11326:	b0 e0       	ldi	r27, 0x00	; 0
   11328:	e8 e9       	ldi	r30, 0x98	; 152
   1132a:	f9 e8       	ldi	r31, 0x89	; 137
   1132c:	0c 94 1b e8 	jmp	0x1d036	; 0x1d036 <__prologue_saves__+0x10>
   11330:	5b 01       	movw	r10, r22
   11332:	6a 01       	movw	r12, r20
    uint16_t val;
    int ind = 0;

    *status &= STATUS_MASK;
   11334:	fa 01       	movw	r30, r20
   11336:	20 81       	ld	r18, Z
   11338:	31 81       	ldd	r19, Z+1	; 0x01
   1133a:	22 27       	eor	r18, r18
   1133c:	31 83       	std	Z+1, r19	; 0x01
   1133e:	20 83       	st	Z, r18

    if(!size)
   11340:	67 2b       	or	r22, r23
   11342:	21 f0       	breq	.+8      	; 0x1134c <gpib_read_str+0x28>
   11344:	7c 01       	movw	r14, r24
   11346:	c0 e0       	ldi	r28, 0x00	; 0
   11348:	d0 e0       	ldi	r29, 0x00	; 0
   1134a:	28 c0       	rjmp	.+80     	; 0x1139c <gpib_read_str+0x78>
    {
        if(debuglevel & (1+4))
   1134c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11350:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11354:	85 70       	andi	r24, 0x05	; 5
   11356:	99 27       	eor	r25, r25
   11358:	89 2b       	or	r24, r25
   1135a:	09 f4       	brne	.+2      	; 0x1135e <gpib_read_str+0x3a>
   1135c:	89 c0       	rjmp	.+274    	; 0x11470 <gpib_read_str+0x14c>
            printf("gpib_read_str: size = 0\n");
   1135e:	81 ec       	ldi	r24, 0xC1	; 193
   11360:	9f e0       	ldi	r25, 0x0F	; 15
   11362:	1f 92       	push	r1
   11364:	9f 93       	push	r25
   11366:	8f 93       	push	r24
   11368:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1136c:	0f 90       	pop	r0
   1136e:	0f 90       	pop	r0
   11370:	0f 90       	pop	r0
   11372:	7e c0       	rjmp	.+252    	; 0x11470 <gpib_read_str+0x14c>
        {
            *status |= (val & ERROR_MASK);
            break;
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
   11374:	80 27       	eor	r24, r16
   11376:	91 27       	eor	r25, r17
   11378:	92 fd       	sbrc	r25, 2
   1137a:	2e c0       	rjmp	.+92     	; 0x113d8 <gpib_read_str+0xb4>
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
            gpib_unread(val);
            break;
        }

        if(val & ATN_FLAG)
   1137c:	c8 01       	movw	r24, r16
   1137e:	88 27       	eor	r24, r24
   11380:	94 70       	andi	r25, 0x04	; 4
   11382:	12 ff       	sbrs	r17, 2
   11384:	49 c0       	rjmp	.+146    	; 0x11418 <gpib_read_str+0xf4>
            buf[ind] = (val & CMD_MASK);
   11386:	20 2f       	mov	r18, r16
   11388:	2f 77       	andi	r18, 0x7F	; 127
   1138a:	f7 01       	movw	r30, r14
   1138c:	20 83       	st	Z, r18
        else
            buf[ind] = (val & DATA_MASK);
        ++ind;
   1138e:	21 96       	adiw	r28, 0x01	; 1

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   11390:	89 2b       	or	r24, r25
   11392:	09 f4       	brne	.+2      	; 0x11396 <gpib_read_str+0x72>
   11394:	44 c0       	rjmp	.+136    	; 0x1141e <gpib_read_str+0xfa>
   11396:	ff ef       	ldi	r31, 0xFF	; 255
   11398:	ef 1a       	sub	r14, r31
   1139a:	ff 0a       	sbc	r15, r31
    {
        if(debuglevel & (1+4))
            printf("gpib_read_str: size = 0\n");
    }

    while(ind < size)
   1139c:	ca 15       	cp	r28, r10
   1139e:	db 05       	cpc	r29, r11
   113a0:	0c f0       	brlt	.+2      	; 0x113a4 <gpib_read_str+0x80>
   113a2:	47 c0       	rjmp	.+142    	; 0x11432 <gpib_read_str+0x10e>
    {
        val = gpib_read_byte(NO_TRACE);
   113a4:	80 e0       	ldi	r24, 0x00	; 0
   113a6:	90 e0       	ldi	r25, 0x00	; 0
   113a8:	e3 de       	rcall	.-570    	; 0x11170 <gpib_read_byte>
   113aa:	8c 01       	movw	r16, r24
#if SDEBUG
        if(debuglevel & 256)
   113ac:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   113b0:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   113b4:	90 ff       	sbrs	r25, 0
            gpib_decode(val);
   113b6:	02 c0       	rjmp	.+4      	; 0x113bc <gpib_read_str+0x98>
   113b8:	c8 01       	movw	r24, r16
#endif
        if(val & ERROR_MASK)
   113ba:	b0 df       	rcall	.-160    	; 0x1131c <gpib_decode>
   113bc:	98 01       	movw	r18, r16
   113be:	22 27       	eor	r18, r18
   113c0:	30 7d       	andi	r19, 0xD0	; 208
   113c2:	f6 01       	movw	r30, r12
   113c4:	80 81       	ld	r24, Z
   113c6:	91 81       	ldd	r25, Z+1	; 0x01
   113c8:	21 15       	cp	r18, r1
   113ca:	31 05       	cpc	r19, r1
        {
            *status |= (val & ERROR_MASK);
   113cc:	99 f2       	breq	.-90     	; 0x11374 <gpib_read_str+0x50>
   113ce:	82 2b       	or	r24, r18
   113d0:	93 2b       	or	r25, r19
   113d2:	91 83       	std	Z+1, r25	; 0x01
            break;
   113d4:	80 83       	st	Z, r24
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
        {
            if(debuglevel & (1+4))
   113d6:	30 c0       	rjmp	.+96     	; 0x11438 <gpib_read_str+0x114>
   113d8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   113dc:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   113e0:	85 70       	andi	r24, 0x05	; 5
   113e2:	99 27       	eor	r25, r25
   113e4:	89 2b       	or	r24, r25
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
   113e6:	a9 f0       	breq	.+42     	; 0x11412 <gpib_read_str+0xee>
   113e8:	c8 01       	movw	r24, r16
   113ea:	99 27       	eor	r25, r25
   113ec:	9f 93       	push	r25
   113ee:	8f 93       	push	r24
   113f0:	df 93       	push	r29
   113f2:	cf 93       	push	r28
   113f4:	84 e9       	ldi	r24, 0x94	; 148
   113f6:	9f e0       	ldi	r25, 0x0F	; 15
   113f8:	1f 92       	push	r1
   113fa:	9f 93       	push	r25
   113fc:	8f 93       	push	r24
   113fe:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   11402:	ed b7       	in	r30, 0x3d	; 61
   11404:	fe b7       	in	r31, 0x3e	; 62
   11406:	37 96       	adiw	r30, 0x07	; 7
   11408:	0f b6       	in	r0, 0x3f	; 63
   1140a:	f8 94       	cli
   1140c:	fe bf       	out	0x3e, r31	; 62
            gpib_unread(val);
   1140e:	0f be       	out	0x3f, r0	; 63
   11410:	ed bf       	out	0x3d, r30	; 61
   11412:	c8 01       	movw	r24, r16
            break;
   11414:	65 db       	rcall	.-2358   	; 0x10ae0 <gpib_unread>
        }

        if(val & ATN_FLAG)
            buf[ind] = (val & CMD_MASK);
        else
            buf[ind] = (val & DATA_MASK);
   11416:	10 c0       	rjmp	.+32     	; 0x11438 <gpib_read_str+0x114>
   11418:	f7 01       	movw	r30, r14
   1141a:	00 83       	st	Z, r16
        ++ind;

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   1141c:	b8 cf       	rjmp	.-144    	; 0x1138e <gpib_read_str+0x6a>
   1141e:	10 ff       	sbrs	r17, 0
        {

            if(*status & EOI_FLAG)
   11420:	ba cf       	rjmp	.-140    	; 0x11396 <gpib_read_str+0x72>
   11422:	f6 01       	movw	r30, r12
   11424:	80 81       	ld	r24, Z
   11426:	91 81       	ldd	r25, Z+1	; 0x01
   11428:	90 fd       	sbrc	r25, 0
                return(ind);
/// @todo TODO
///  decode this state - for now I just set the EOI_FLAG
            *status |= EOI_FLAG;
   1142a:	24 c0       	rjmp	.+72     	; 0x11474 <gpib_read_str+0x150>
   1142c:	91 60       	ori	r25, 0x01	; 1
   1142e:	91 83       	std	Z+1, r25	; 0x01
            break;
        }
    }
    if ( ind != size )
   11430:	80 83       	st	Z, r24
   11432:	ca 15       	cp	r28, r10
   11434:	db 05       	cpc	r29, r11
    {
        if(debuglevel & (1+4))
   11436:	f1 f0       	breq	.+60     	; 0x11474 <gpib_read_str+0x150>
   11438:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1143c:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11440:	85 70       	andi	r24, 0x05	; 5
   11442:	99 27       	eor	r25, r25
   11444:	89 2b       	or	r24, r25
            printf("[gpib_read_str read(%d) expected(%d)]\n", ind , size);
   11446:	b1 f0       	breq	.+44     	; 0x11474 <gpib_read_str+0x150>
   11448:	bf 92       	push	r11
   1144a:	af 92       	push	r10
   1144c:	df 93       	push	r29
   1144e:	cf 93       	push	r28
   11450:	8d e6       	ldi	r24, 0x6D	; 109
   11452:	9f e0       	ldi	r25, 0x0F	; 15
   11454:	1f 92       	push	r1
   11456:	9f 93       	push	r25
   11458:	8f 93       	push	r24
   1145a:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1145e:	ed b7       	in	r30, 0x3d	; 61
   11460:	fe b7       	in	r31, 0x3e	; 62
   11462:	37 96       	adiw	r30, 0x07	; 7
   11464:	0f b6       	in	r0, 0x3f	; 63
   11466:	f8 94       	cli
   11468:	fe bf       	out	0x3e, r31	; 62
   1146a:	0f be       	out	0x3f, r0	; 63
   1146c:	ed bf       	out	0x3d, r30	; 61
   1146e:	02 c0       	rjmp	.+4      	; 0x11474 <gpib_read_str+0x150>
   11470:	c0 e0       	ldi	r28, 0x00	; 0
    }
    return(ind);
}
   11472:	d0 e0       	ldi	r29, 0x00	; 0
   11474:	ce 01       	movw	r24, r28
   11476:	cd b7       	in	r28, 0x3d	; 61
   11478:	de b7       	in	r29, 0x3e	; 62
   1147a:	ea e0       	ldi	r30, 0x0A	; 10
   1147c:	0c 94 37 e8 	jmp	0x1d06e	; 0x1d06e <__epilogue_restores__+0x10>

00011480 <gpib_write_str>:
///     - Error Flags:
///       - IFC_FLAG
/// @see: gpib_write_byte()
/// @see: gpib.h _FLAGS defines for a full list)
int gpib_write_str(uint8_t *buf, int size, uint16_t *status)
{
   11480:	a0 e0       	ldi	r26, 0x00	; 0
   11482:	b0 e0       	ldi	r27, 0x00	; 0
   11484:	e6 e4       	ldi	r30, 0x46	; 70
   11486:	fa e8       	ldi	r31, 0x8A	; 138
   11488:	0c 94 1b e8 	jmp	0x1d036	; 0x1d036 <__prologue_saves__+0x10>
   1148c:	8b 01       	movw	r16, r22
   1148e:	7a 01       	movw	r14, r20
    uint16_t val, ch;
    int ind = 0;

    *status &= STATUS_MASK;
   11490:	fa 01       	movw	r30, r20
   11492:	20 81       	ld	r18, Z
   11494:	31 81       	ldd	r19, Z+1	; 0x01
   11496:	22 27       	eor	r18, r18
   11498:	31 83       	std	Z+1, r19	; 0x01
   1149a:	20 83       	st	Z, r18

    if(!size)
   1149c:	67 2b       	or	r22, r23
   1149e:	21 f0       	breq	.+8      	; 0x114a8 <gpib_write_str+0x28>
   114a0:	6c 01       	movw	r12, r24
   114a2:	c0 e0       	ldi	r28, 0x00	; 0
   114a4:	d0 e0       	ldi	r29, 0x00	; 0
   114a6:	35 c0       	rjmp	.+106    	; 0x11512 <gpib_write_str+0x92>
    {
        if(debuglevel & (1+4))
   114a8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   114ac:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   114b0:	85 70       	andi	r24, 0x05	; 5
   114b2:	99 27       	eor	r25, r25
   114b4:	89 2b       	or	r24, r25
   114b6:	09 f4       	brne	.+2      	; 0x114ba <gpib_write_str+0x3a>
   114b8:	54 c0       	rjmp	.+168    	; 0x11562 <gpib_write_str+0xe2>
            printf("gpib_write_str: size = 0\n");
   114ba:	83 e5       	ldi	r24, 0x53	; 83
   114bc:	9f e0       	ldi	r25, 0x0F	; 15
   114be:	1f 92       	push	r1
   114c0:	9f 93       	push	r25
   114c2:	8f 93       	push	r24
   114c4:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   114c8:	0f 90       	pop	r0
   114ca:	0f 90       	pop	r0
   114cc:	0f 90       	pop	r0
   114ce:	49 c0       	rjmp	.+146    	; 0x11562 <gpib_write_str+0xe2>
    }

    while(ind < size)
    {
        ch = buf[ind++] & 0xff;                   // unsigned
   114d0:	21 96       	adiw	r28, 0x01	; 1
   114d2:	f6 01       	movw	r30, r12
   114d4:	81 91       	ld	r24, Z+
   114d6:	6f 01       	movw	r12, r30
   114d8:	90 e0       	ldi	r25, 0x00	; 0

        if(*status & ATN_FLAG)
   114da:	f7 01       	movw	r30, r14
   114dc:	20 81       	ld	r18, Z
   114de:	31 81       	ldd	r19, Z+1	; 0x01
   114e0:	32 fd       	sbrc	r19, 2
        {
            ch |= ATN_FLAG;
   114e2:	94 60       	ori	r25, 0x04	; 4
        }

        if( (*status & EOI_FLAG) && (ind == size ) )
   114e4:	30 fd       	sbrc	r19, 0
            ch |= EOI_FLAG;

/// @return Returns

        val = gpib_write_byte(ch);
   114e6:	19 c0       	rjmp	.+50     	; 0x1151a <gpib_write_str+0x9a>
        *status |= (val & ERROR_MASK);
   114e8:	42 db       	rcall	.-2428   	; 0x10b6e <gpib_write_byte>
   114ea:	5c 01       	movw	r10, r24
   114ec:	aa 24       	eor	r10, r10
   114ee:	f0 ed       	ldi	r31, 0xD0	; 208
   114f0:	bf 22       	and	r11, r31
   114f2:	f7 01       	movw	r30, r14
   114f4:	20 81       	ld	r18, Z
   114f6:	31 81       	ldd	r19, Z+1	; 0x01
   114f8:	2a 29       	or	r18, r10
   114fa:	3b 29       	or	r19, r11
   114fc:	31 83       	std	Z+1, r19	; 0x01

#if SDEBUG
        if(debuglevel & 256)
   114fe:	20 83       	st	Z, r18
   11500:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   11504:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
            gpib_decode(val);
   11508:	30 fd       	sbrc	r19, 0
#endif
        if(val & ERROR_MASK)
   1150a:	08 df       	rcall	.-496    	; 0x1131c <gpib_decode>
   1150c:	a1 14       	cp	r10, r1
   1150e:	b1 04       	cpc	r11, r1
    {
        if(debuglevel & (1+4))
            printf("gpib_write_str: size = 0\n");
    }

    while(ind < size)
   11510:	49 f4       	brne	.+18     	; 0x11524 <gpib_write_str+0xa4>
   11512:	c0 17       	cp	r28, r16
   11514:	d1 07       	cpc	r29, r17
   11516:	e4 f2       	brlt	.-72     	; 0x114d0 <gpib_write_str+0x50>
        if(*status & ATN_FLAG)
        {
            ch |= ATN_FLAG;
        }

        if( (*status & EOI_FLAG) && (ind == size ) )
   11518:	05 c0       	rjmp	.+10     	; 0x11524 <gpib_write_str+0xa4>
   1151a:	0c 17       	cp	r16, r28
   1151c:	1d 07       	cpc	r17, r29
            ch |= EOI_FLAG;
   1151e:	21 f7       	brne	.-56     	; 0x114e8 <gpib_write_str+0x68>
   11520:	91 60       	ori	r25, 0x01	; 1
        {
            break;
        }

    }                                             // while(ind < size)
    if ( ind != size )
   11522:	e2 cf       	rjmp	.-60     	; 0x114e8 <gpib_write_str+0x68>
   11524:	c0 17       	cp	r28, r16
   11526:	d1 07       	cpc	r29, r17
    {
        if(debuglevel & (1+4))
   11528:	f1 f0       	breq	.+60     	; 0x11566 <gpib_write_str+0xe6>
   1152a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1152e:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11532:	85 70       	andi	r24, 0x05	; 5
   11534:	99 27       	eor	r25, r25
   11536:	89 2b       	or	r24, r25
            printf("[gpib_write_str sent(%d) expected(%d)]\n", ind,size);
   11538:	b1 f0       	breq	.+44     	; 0x11566 <gpib_write_str+0xe6>
   1153a:	1f 93       	push	r17
   1153c:	0f 93       	push	r16
   1153e:	df 93       	push	r29
   11540:	cf 93       	push	r28
   11542:	8b e2       	ldi	r24, 0x2B	; 43
   11544:	9f e0       	ldi	r25, 0x0F	; 15
   11546:	1f 92       	push	r1
   11548:	9f 93       	push	r25
   1154a:	8f 93       	push	r24
   1154c:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   11550:	8d b7       	in	r24, 0x3d	; 61
   11552:	9e b7       	in	r25, 0x3e	; 62
   11554:	07 96       	adiw	r24, 0x07	; 7
   11556:	0f b6       	in	r0, 0x3f	; 63
   11558:	f8 94       	cli
   1155a:	9e bf       	out	0x3e, r25	; 62
   1155c:	0f be       	out	0x3f, r0	; 63
   1155e:	8d bf       	out	0x3d, r24	; 61
    uint16_t val, ch;
    int ind = 0;

    *status &= STATUS_MASK;

    if(!size)
   11560:	02 c0       	rjmp	.+4      	; 0x11566 <gpib_write_str+0xe6>
   11562:	c0 e0       	ldi	r28, 0x00	; 0
    {
        if(debuglevel & (1+4))
            printf("[gpib_write_str sent(%d) expected(%d)]\n", ind,size);
    }
    return(ind);
}
   11564:	d0 e0       	ldi	r29, 0x00	; 0
   11566:	ce 01       	movw	r24, r28
   11568:	cd b7       	in	r28, 0x3d	; 61
   1156a:	de b7       	in	r29, 0x3e	; 62
   1156c:	ea e0       	ldi	r30, 0x0A	; 10
   1156e:	0c 94 37 e8 	jmp	0x1d06e	; 0x1d06e <__epilogue_restores__+0x10>

00011572 <gpib_file_init>:
   11572:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <debuglevel+0x1>
   11576:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <debuglevel>
   1157a:	8f eb       	ldi	r24, 0xBF	; 191
   1157c:	91 e0       	ldi	r25, 0x01	; 1
   1157e:	0e 94 66 9b 	call	0x136cc	; 0x136cc <Read_Config>
   11582:	18 16       	cp	r1, r24
   11584:	19 06       	cpc	r1, r25
   11586:	b4 f4       	brge	.+44     	; 0x115b4 <gpib_file_init+0x42>
   11588:	9f 93       	push	r25
   1158a:	8f 93       	push	r24
   1158c:	8f eb       	ldi	r24, 0xBF	; 191
   1158e:	91 e0       	ldi	r25, 0x01	; 1
   11590:	9f 93       	push	r25
   11592:	8f 93       	push	r24
   11594:	8a e7       	ldi	r24, 0x7A	; 122
   11596:	94 e1       	ldi	r25, 0x14	; 20
   11598:	1f 92       	push	r1
   1159a:	9f 93       	push	r25
   1159c:	8f 93       	push	r24
   1159e:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   115a2:	8d b7       	in	r24, 0x3d	; 61
   115a4:	9e b7       	in	r25, 0x3e	; 62
   115a6:	07 96       	adiw	r24, 0x07	; 7
   115a8:	0f b6       	in	r0, 0x3f	; 63
   115aa:	f8 94       	cli
   115ac:	9e bf       	out	0x3e, r25	; 62
   115ae:	0f be       	out	0x3f, r0	; 63
   115b0:	8d bf       	out	0x3d, r24	; 61
   115b2:	12 c0       	rjmp	.+36     	; 0x115d8 <gpib_file_init+0x66>
   115b4:	89 2b       	or	r24, r25
   115b6:	81 f0       	breq	.+32     	; 0x115d8 <gpib_file_init+0x66>
   115b8:	8f eb       	ldi	r24, 0xBF	; 191
   115ba:	91 e0       	ldi	r25, 0x01	; 1
   115bc:	9f 93       	push	r25
   115be:	8f 93       	push	r24
   115c0:	89 e6       	ldi	r24, 0x69	; 105
   115c2:	94 e1       	ldi	r25, 0x14	; 20
   115c4:	1f 92       	push	r1
   115c6:	9f 93       	push	r25
   115c8:	8f 93       	push	r24
   115ca:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   115ce:	0f 90       	pop	r0
   115d0:	0f 90       	pop	r0
   115d2:	0f 90       	pop	r0
   115d4:	0f 90       	pop	r0
   115d6:	0f 90       	pop	r0
   115d8:	0e 94 43 97 	call	0x12e86	; 0x12e86 <set_Config_Defaults>
   115dc:	0e 94 99 6f 	call	0xdf32	; 0xdf32 <mmc_wp_status>
   115e0:	89 2b       	or	r24, r25
   115e2:	51 f0       	breq	.+20     	; 0x115f8 <gpib_file_init+0x86>
   115e4:	80 e5       	ldi	r24, 0x50	; 80
   115e6:	94 e1       	ldi	r25, 0x14	; 20
   115e8:	1f 92       	push	r1
   115ea:	9f 93       	push	r25
   115ec:	8f 93       	push	r24
   115ee:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   115f2:	0f 90       	pop	r0
   115f4:	0f 90       	pop	r0
   115f6:	0f 90       	pop	r0
   115f8:	08 95       	ret

000115fa <SS80_is_MLA>:
   115fa:	40 e2       	ldi	r20, 0x20	; 32
   115fc:	50 e0       	ldi	r21, 0x00	; 0
   115fe:	bc 01       	movw	r22, r24
   11600:	83 e0       	ldi	r24, 0x03	; 3
   11602:	90 e0       	ldi	r25, 0x00	; 0
   11604:	0e 94 d8 93 	call	0x127b0	; 0x127b0 <find_device>
   11608:	8f 3f       	cpi	r24, 0xFF	; 255
   1160a:	2f ef       	ldi	r18, 0xFF	; 255
   1160c:	92 07       	cpc	r25, r18
   1160e:	19 f0       	breq	.+6      	; 0x11616 <SS80_is_MLA+0x1c>
   11610:	0c 94 02 94 	jmp	0x12804	; 0x12804 <set_active_device>
   11614:	08 95       	ret
   11616:	80 e0       	ldi	r24, 0x00	; 0
   11618:	90 e0       	ldi	r25, 0x00	; 0
   1161a:	08 95       	ret

0001161c <SS80_is_MTA>:
   1161c:	40 e4       	ldi	r20, 0x40	; 64
   1161e:	50 e0       	ldi	r21, 0x00	; 0
   11620:	bc 01       	movw	r22, r24
   11622:	83 e0       	ldi	r24, 0x03	; 3
   11624:	90 e0       	ldi	r25, 0x00	; 0
   11626:	0e 94 d8 93 	call	0x127b0	; 0x127b0 <find_device>
   1162a:	8f 3f       	cpi	r24, 0xFF	; 255
   1162c:	2f ef       	ldi	r18, 0xFF	; 255
   1162e:	92 07       	cpc	r25, r18
   11630:	19 f0       	breq	.+6      	; 0x11638 <SS80_is_MTA+0x1c>
   11632:	0c 94 02 94 	jmp	0x12804	; 0x12804 <set_active_device>
   11636:	08 95       	ret
   11638:	80 e0       	ldi	r24, 0x00	; 0
   1163a:	90 e0       	ldi	r25, 0x00	; 0
   1163c:	08 95       	ret

0001163e <SS80_is_MSA>:
   1163e:	40 e6       	ldi	r20, 0x60	; 96
   11640:	50 e0       	ldi	r21, 0x00	; 0
   11642:	bc 01       	movw	r22, r24
   11644:	83 e0       	ldi	r24, 0x03	; 3
   11646:	90 e0       	ldi	r25, 0x00	; 0
   11648:	0e 94 d8 93 	call	0x127b0	; 0x127b0 <find_device>
   1164c:	8f 3f       	cpi	r24, 0xFF	; 255
   1164e:	2f ef       	ldi	r18, 0xFF	; 255
   11650:	92 07       	cpc	r25, r18
   11652:	19 f0       	breq	.+6      	; 0x1165a <SS80_is_MSA+0x1c>
   11654:	0c 94 02 94 	jmp	0x12804	; 0x12804 <set_active_device>
   11658:	08 95       	ret
   1165a:	80 e0       	ldi	r24, 0x00	; 0
   1165c:	90 e0       	ldi	r25, 0x00	; 0
   1165e:	08 95       	ret

00011660 <AMIGO_is_MLA>:
   11660:	40 e2       	ldi	r20, 0x20	; 32
   11662:	50 e0       	ldi	r21, 0x00	; 0
   11664:	bc 01       	movw	r22, r24
   11666:	81 e0       	ldi	r24, 0x01	; 1
   11668:	90 e0       	ldi	r25, 0x00	; 0
   1166a:	0e 94 d8 93 	call	0x127b0	; 0x127b0 <find_device>
   1166e:	8f 3f       	cpi	r24, 0xFF	; 255
   11670:	2f ef       	ldi	r18, 0xFF	; 255
   11672:	92 07       	cpc	r25, r18
   11674:	19 f0       	breq	.+6      	; 0x1167c <AMIGO_is_MLA+0x1c>
   11676:	0c 94 02 94 	jmp	0x12804	; 0x12804 <set_active_device>
   1167a:	08 95       	ret
   1167c:	80 e0       	ldi	r24, 0x00	; 0
   1167e:	90 e0       	ldi	r25, 0x00	; 0
   11680:	08 95       	ret

00011682 <AMIGO_is_MTA>:
   11682:	40 e4       	ldi	r20, 0x40	; 64
   11684:	50 e0       	ldi	r21, 0x00	; 0
   11686:	bc 01       	movw	r22, r24
   11688:	81 e0       	ldi	r24, 0x01	; 1
   1168a:	90 e0       	ldi	r25, 0x00	; 0
   1168c:	0e 94 d8 93 	call	0x127b0	; 0x127b0 <find_device>
   11690:	8f 3f       	cpi	r24, 0xFF	; 255
   11692:	2f ef       	ldi	r18, 0xFF	; 255
   11694:	92 07       	cpc	r25, r18
   11696:	19 f0       	breq	.+6      	; 0x1169e <AMIGO_is_MTA+0x1c>
   11698:	0c 94 02 94 	jmp	0x12804	; 0x12804 <set_active_device>
   1169c:	08 95       	ret
   1169e:	80 e0       	ldi	r24, 0x00	; 0
   116a0:	90 e0       	ldi	r25, 0x00	; 0
   116a2:	08 95       	ret

000116a4 <AMIGO_is_MSA>:
   116a4:	40 e6       	ldi	r20, 0x60	; 96
   116a6:	50 e0       	ldi	r21, 0x00	; 0
   116a8:	bc 01       	movw	r22, r24
   116aa:	81 e0       	ldi	r24, 0x01	; 1
   116ac:	90 e0       	ldi	r25, 0x00	; 0
   116ae:	0e 94 d8 93 	call	0x127b0	; 0x127b0 <find_device>
   116b2:	8f 3f       	cpi	r24, 0xFF	; 255
   116b4:	2f ef       	ldi	r18, 0xFF	; 255
   116b6:	92 07       	cpc	r25, r18
   116b8:	19 f0       	breq	.+6      	; 0x116c0 <AMIGO_is_MSA+0x1c>
   116ba:	0c 94 02 94 	jmp	0x12804	; 0x12804 <set_active_device>
   116be:	08 95       	ret
   116c0:	80 e0       	ldi	r24, 0x00	; 0
   116c2:	90 e0       	ldi	r25, 0x00	; 0
   116c4:	08 95       	ret

000116c6 <PRINTER_is_MLA>:
   116c6:	40 e2       	ldi	r20, 0x20	; 32
   116c8:	50 e0       	ldi	r21, 0x00	; 0
   116ca:	bc 01       	movw	r22, r24
   116cc:	84 e0       	ldi	r24, 0x04	; 4
   116ce:	90 e0       	ldi	r25, 0x00	; 0
   116d0:	0e 94 d8 93 	call	0x127b0	; 0x127b0 <find_device>
   116d4:	8f 3f       	cpi	r24, 0xFF	; 255
   116d6:	2f ef       	ldi	r18, 0xFF	; 255
   116d8:	92 07       	cpc	r25, r18
   116da:	19 f0       	breq	.+6      	; 0x116e2 <PRINTER_is_MLA+0x1c>
   116dc:	0c 94 02 94 	jmp	0x12804	; 0x12804 <set_active_device>
   116e0:	08 95       	ret
   116e2:	80 e0       	ldi	r24, 0x00	; 0
   116e4:	90 e0       	ldi	r25, 0x00	; 0
   116e6:	08 95       	ret

000116e8 <PRINTER_is_MTA>:
   116e8:	40 e4       	ldi	r20, 0x40	; 64
   116ea:	50 e0       	ldi	r21, 0x00	; 0
   116ec:	bc 01       	movw	r22, r24
   116ee:	84 e0       	ldi	r24, 0x04	; 4
   116f0:	90 e0       	ldi	r25, 0x00	; 0
   116f2:	0e 94 d8 93 	call	0x127b0	; 0x127b0 <find_device>
   116f6:	8f 3f       	cpi	r24, 0xFF	; 255
   116f8:	2f ef       	ldi	r18, 0xFF	; 255
   116fa:	92 07       	cpc	r25, r18
   116fc:	19 f0       	breq	.+6      	; 0x11704 <PRINTER_is_MTA+0x1c>
   116fe:	0c 94 02 94 	jmp	0x12804	; 0x12804 <set_active_device>
   11702:	08 95       	ret
   11704:	80 e0       	ldi	r24, 0x00	; 0
   11706:	90 e0       	ldi	r25, 0x00	; 0
   11708:	08 95       	ret

0001170a <gpib_init_devices>:
   1170a:	1a d9       	rcall	.-3532   	; 0x10940 <gpib_bus_init>
   1170c:	0e 94 9f b1 	call	0x1633e	; 0x1633e <SS80_init>
   11710:	0e 94 24 b7 	call	0x16e48	; 0x16e48 <amigo_init>
   11714:	0c 94 0b c2 	jmp	0x18416	; 0x18416 <printer_close>
   11718:	08 95       	ret

0001171a <gpib_trace_task>:
   1171a:	0f 93       	push	r16
   1171c:	1f 93       	push	r17
   1171e:	cf 93       	push	r28
   11720:	df 93       	push	r29
   11722:	eb 01       	movw	r28, r22
   11724:	00 97       	sbiw	r24, 0x00	; 0
   11726:	09 f4       	brne	.+2      	; 0x1172a <gpib_trace_task+0x10>
   11728:	42 c0       	rjmp	.+132    	; 0x117ae <gpib_trace_task+0x94>
   1172a:	fc 01       	movw	r30, r24
   1172c:	20 81       	ld	r18, Z
   1172e:	22 23       	and	r18, r18
   11730:	f1 f1       	breq	.+124    	; 0x117ae <gpib_trace_task+0x94>
   11732:	0e 94 81 32 	call	0x6502	; 0x6502 <skipspaces>
   11736:	8c 01       	movw	r16, r24
   11738:	1f 93       	push	r17
   1173a:	8f 93       	push	r24
   1173c:	86 e3       	ldi	r24, 0x36	; 54
   1173e:	94 e1       	ldi	r25, 0x14	; 20
   11740:	1f 92       	push	r1
   11742:	9f 93       	push	r25
   11744:	8f 93       	push	r24
   11746:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1174a:	0f 90       	pop	r0
   1174c:	0f 90       	pop	r0
   1174e:	0f 90       	pop	r0
   11750:	0f 90       	pop	r0
   11752:	0f 90       	pop	r0
   11754:	20 97       	sbiw	r28, 0x00	; 0
   11756:	51 f0       	breq	.+20     	; 0x1176c <gpib_trace_task+0x52>
   11758:	8b e0       	ldi	r24, 0x0B	; 11
   1175a:	94 e1       	ldi	r25, 0x14	; 20
   1175c:	1f 92       	push	r1
   1175e:	9f 93       	push	r25
   11760:	8f 93       	push	r24
   11762:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   11766:	0f 90       	pop	r0
   11768:	0f 90       	pop	r0
   1176a:	0f 90       	pop	r0
   1176c:	84 ef       	ldi	r24, 0xF4	; 244
   1176e:	93 e1       	ldi	r25, 0x13	; 19
   11770:	1f 92       	push	r1
   11772:	9f 93       	push	r25
   11774:	8f 93       	push	r24
   11776:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1177a:	6e e7       	ldi	r22, 0x7E	; 126
   1177c:	78 e0       	ldi	r23, 0x08	; 8
   1177e:	c8 01       	movw	r24, r16
   11780:	0e 94 96 7d 	call	0xfb2c	; 0xfb2c <fopen>
   11784:	90 93 75 19 	sts	0x1975, r25	; 0x801975 <gpib_log_fp+0x1>
   11788:	80 93 74 19 	sts	0x1974, r24	; 0x801974 <gpib_log_fp>
   1178c:	0f 90       	pop	r0
   1178e:	0f 90       	pop	r0
   11790:	0f 90       	pop	r0
   11792:	89 2b       	or	r24, r25
   11794:	a1 f4       	brne	.+40     	; 0x117be <gpib_trace_task+0xa4>
   11796:	85 e0       	ldi	r24, 0x05	; 5
   11798:	9d e0       	ldi	r25, 0x0D	; 13
   1179a:	0e 94 e0 77 	call	0xefc0	; 0xefc0 <perror>
   1179e:	88 ee       	ldi	r24, 0xE8	; 232
   117a0:	93 e1       	ldi	r25, 0x13	; 19
   117a2:	1f 92       	push	r1
   117a4:	9f 93       	push	r25
   117a6:	8f 93       	push	r24
   117a8:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   117ac:	3b c0       	rjmp	.+118    	; 0x11824 <gpib_trace_task+0x10a>
   117ae:	80 91 d0 1c 	lds	r24, 0x1CD0	; 0x801cd0 <__iob+0x2>
   117b2:	90 91 d1 1c 	lds	r25, 0x1CD1	; 0x801cd1 <__iob+0x3>
   117b6:	90 93 75 19 	sts	0x1975, r25	; 0x801975 <gpib_log_fp+0x1>
   117ba:	80 93 74 19 	sts	0x1974, r24	; 0x801974 <gpib_log_fp>
   117be:	e8 d8       	rcall	.-3632   	; 0x10990 <gpib_state_init>
   117c0:	a4 df       	rcall	.-184    	; 0x1170a <gpib_init_devices>
   117c2:	80 91 74 19 	lds	r24, 0x1974	; 0x801974 <gpib_log_fp>
   117c6:	90 91 75 19 	lds	r25, 0x1975	; 0x801975 <gpib_log_fp+0x1>
   117ca:	39 db       	rcall	.-2446   	; 0x10e3e <gpib_decode_header>
   117cc:	80 e0       	ldi	r24, 0x00	; 0
   117ce:	0e 94 9d 2c 	call	0x593a	; 0x593a <uart_keyhit>
   117d2:	89 2b       	or	r24, r25
   117d4:	31 f4       	brne	.+12     	; 0x117e2 <gpib_trace_task+0xc8>
   117d6:	ce 01       	movw	r24, r28
   117d8:	cb dc       	rcall	.-1642   	; 0x11170 <gpib_read_byte>
   117da:	20 97       	sbiw	r28, 0x00	; 0
   117dc:	b9 f7       	brne	.-18     	; 0x117cc <gpib_trace_task+0xb2>
   117de:	9e dd       	rcall	.-1220   	; 0x1131c <gpib_decode>
   117e0:	f5 cf       	rjmp	.-22     	; 0x117cc <gpib_trace_task+0xb2>
   117e2:	82 ee       	ldi	r24, 0xE2	; 226
   117e4:	93 e1       	ldi	r25, 0x13	; 19
   117e6:	1f 92       	push	r1
   117e8:	9f 93       	push	r25
   117ea:	8f 93       	push	r24
   117ec:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   117f0:	80 91 74 19 	lds	r24, 0x1974	; 0x801974 <gpib_log_fp>
   117f4:	90 91 75 19 	lds	r25, 0x1975	; 0x801975 <gpib_log_fp+0x1>
   117f8:	0f 90       	pop	r0
   117fa:	0f 90       	pop	r0
   117fc:	0f 90       	pop	r0
   117fe:	00 97       	sbiw	r24, 0x00	; 0
   11800:	a1 f0       	breq	.+40     	; 0x1182a <gpib_trace_task+0x110>
   11802:	0e 94 40 7c 	call	0xf880	; 0xf880 <fclose>
   11806:	80 ed       	ldi	r24, 0xD0	; 208
   11808:	93 e1       	ldi	r25, 0x13	; 19
   1180a:	1f 92       	push	r1
   1180c:	9f 93       	push	r25
   1180e:	8f 93       	push	r24
   11810:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   11814:	80 91 d0 1c 	lds	r24, 0x1CD0	; 0x801cd0 <__iob+0x2>
   11818:	90 91 d1 1c 	lds	r25, 0x1CD1	; 0x801cd1 <__iob+0x3>
   1181c:	90 93 75 19 	sts	0x1975, r25	; 0x801975 <gpib_log_fp+0x1>
   11820:	80 93 74 19 	sts	0x1974, r24	; 0x801974 <gpib_log_fp>
   11824:	0f 90       	pop	r0
   11826:	0f 90       	pop	r0
   11828:	0f 90       	pop	r0
   1182a:	df 91       	pop	r29
   1182c:	cf 91       	pop	r28
   1182e:	1f 91       	pop	r17
   11830:	0f 91       	pop	r16
   11832:	08 95       	ret

00011834 <gpib_error_test>:
   11834:	ef 92       	push	r14
   11836:	ff 92       	push	r15
   11838:	0f 93       	push	r16
   1183a:	1f 93       	push	r17
   1183c:	cf 93       	push	r28
   1183e:	df 93       	push	r29
   11840:	7c 01       	movw	r14, r24
   11842:	ec 01       	movw	r28, r24
   11844:	cc 27       	eor	r28, r28
   11846:	d0 7d       	andi	r29, 0xD0	; 208
   11848:	20 97       	sbiw	r28, 0x00	; 0
   1184a:	61 f0       	breq	.+24     	; 0x11864 <gpib_error_test+0x30>
   1184c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11850:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11854:	8e 72       	andi	r24, 0x2E	; 46
   11856:	99 27       	eor	r25, r25
   11858:	87 01       	movw	r16, r14
   1185a:	00 27       	eor	r16, r16
   1185c:	10 71       	andi	r17, 0x10	; 16
   1185e:	89 2b       	or	r24, r25
   11860:	59 f4       	brne	.+22     	; 0x11878 <gpib_error_test+0x44>
   11862:	17 c0       	rjmp	.+46     	; 0x11892 <gpib_error_test+0x5e>
   11864:	80 e0       	ldi	r24, 0x00	; 0
   11866:	0e 94 9d 2c 	call	0x593a	; 0x593a <uart_keyhit>
   1186a:	89 2b       	or	r24, r25
   1186c:	79 f7       	brne	.-34     	; 0x1184c <gpib_error_test+0x18>
   1186e:	0e 94 96 6f 	call	0xdf2c	; 0xdf2c <mmc_ins_status>
   11872:	01 97       	sbiw	r24, 0x01	; 1
   11874:	59 f7       	brne	.-42     	; 0x1184c <gpib_error_test+0x18>
   11876:	62 c0       	rjmp	.+196    	; 0x1193c <gpib_error_test+0x108>
   11878:	01 15       	cp	r16, r1
   1187a:	11 05       	cpc	r17, r1
   1187c:	51 f0       	breq	.+20     	; 0x11892 <gpib_error_test+0x5e>
   1187e:	89 ec       	ldi	r24, 0xC9	; 201
   11880:	93 e1       	ldi	r25, 0x13	; 19
   11882:	1f 92       	push	r1
   11884:	9f 93       	push	r25
   11886:	8f 93       	push	r24
   11888:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1188c:	0f 90       	pop	r0
   1188e:	0f 90       	pop	r0
   11890:	0f 90       	pop	r0
   11892:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11896:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1189a:	85 70       	andi	r24, 0x05	; 5
   1189c:	99 27       	eor	r25, r25
   1189e:	89 2b       	or	r24, r25
   118a0:	c1 f0       	breq	.+48     	; 0x118d2 <gpib_error_test+0x9e>
   118a2:	f6 fe       	sbrs	r15, 6
   118a4:	0a c0       	rjmp	.+20     	; 0x118ba <gpib_error_test+0x86>
   118a6:	8e eb       	ldi	r24, 0xBE	; 190
   118a8:	93 e1       	ldi	r25, 0x13	; 19
   118aa:	1f 92       	push	r1
   118ac:	9f 93       	push	r25
   118ae:	8f 93       	push	r24
   118b0:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   118b4:	0f 90       	pop	r0
   118b6:	0f 90       	pop	r0
   118b8:	0f 90       	pop	r0
   118ba:	d7 ff       	sbrs	r29, 7
   118bc:	0a c0       	rjmp	.+20     	; 0x118d2 <gpib_error_test+0x9e>
   118be:	87 eb       	ldi	r24, 0xB7	; 183
   118c0:	93 e1       	ldi	r25, 0x13	; 19
   118c2:	1f 92       	push	r1
   118c4:	9f 93       	push	r25
   118c6:	8f 93       	push	r24
   118c8:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   118cc:	0f 90       	pop	r0
   118ce:	0f 90       	pop	r0
   118d0:	0f 90       	pop	r0
   118d2:	80 e0       	ldi	r24, 0x00	; 0
   118d4:	0e 94 9d 2c 	call	0x593a	; 0x593a <uart_keyhit>
   118d8:	89 2b       	or	r24, r25
   118da:	51 f0       	breq	.+20     	; 0x118f0 <gpib_error_test+0xbc>
   118dc:	8a ea       	ldi	r24, 0xAA	; 170
   118de:	93 e1       	ldi	r25, 0x13	; 19
   118e0:	1f 92       	push	r1
   118e2:	9f 93       	push	r25
   118e4:	8f 93       	push	r24
   118e6:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   118ea:	0f 90       	pop	r0
   118ec:	0f 90       	pop	r0
   118ee:	0f 90       	pop	r0
   118f0:	0e 94 96 6f 	call	0xdf2c	; 0xdf2c <mmc_ins_status>
   118f4:	01 97       	sbiw	r24, 0x01	; 1
   118f6:	51 f0       	breq	.+20     	; 0x1190c <gpib_error_test+0xd8>
   118f8:	89 e9       	ldi	r24, 0x99	; 153
   118fa:	93 e1       	ldi	r25, 0x13	; 19
   118fc:	1f 92       	push	r1
   118fe:	9f 93       	push	r25
   11900:	8f 93       	push	r24
   11902:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   11906:	0f 90       	pop	r0
   11908:	0f 90       	pop	r0
   1190a:	0f 90       	pop	r0
   1190c:	01 15       	cp	r16, r1
   1190e:	11 05       	cpc	r17, r1
   11910:	09 f0       	breq	.+2      	; 0x11914 <gpib_error_test+0xe0>
   11912:	fb de       	rcall	.-522    	; 0x1170a <gpib_init_devices>
   11914:	80 e0       	ldi	r24, 0x00	; 0
   11916:	0e 94 9d 2c 	call	0x593a	; 0x593a <uart_keyhit>
   1191a:	89 2b       	or	r24, r25
   1191c:	11 f0       	breq	.+4      	; 0x11922 <gpib_error_test+0xee>
   1191e:	f5 de       	rcall	.-534    	; 0x1170a <gpib_init_devices>
   11920:	0b c0       	rjmp	.+22     	; 0x11938 <gpib_error_test+0x104>
   11922:	0e 94 96 6f 	call	0xdf2c	; 0xdf2c <mmc_ins_status>
   11926:	01 97       	sbiw	r24, 0x01	; 1
   11928:	39 f4       	brne	.+14     	; 0x11938 <gpib_error_test+0x104>
   1192a:	01 15       	cp	r16, r1
   1192c:	11 05       	cpc	r17, r1
   1192e:	31 f0       	breq	.+12     	; 0x1193c <gpib_error_test+0x108>
   11930:	54 98       	cbi	0x0a, 4	; 10
   11932:	4c 9b       	sbis	0x09, 4	; 9
   11934:	fd cf       	rjmp	.-6      	; 0x11930 <gpib_error_test+0xfc>
   11936:	02 c0       	rjmp	.+4      	; 0x1193c <gpib_error_test+0x108>
   11938:	c1 e0       	ldi	r28, 0x01	; 1
   1193a:	d0 e0       	ldi	r29, 0x00	; 0
   1193c:	ce 01       	movw	r24, r28
   1193e:	cd b7       	in	r28, 0x3d	; 61
   11940:	de b7       	in	r29, 0x3e	; 62
   11942:	e6 e0       	ldi	r30, 0x06	; 6
   11944:	0c 94 3b e8 	jmp	0x1d076	; 0x1d076 <__epilogue_restores__+0x18>

00011948 <GPIB_COMMANDS>:
   11948:	1f 93       	push	r17
   1194a:	cf 93       	push	r28
   1194c:	df 93       	push	r29
   1194e:	ec 01       	movw	r28, r24
   11950:	16 2f       	mov	r17, r22
   11952:	80 91 fd 1e 	lds	r24, 0x1EFD	; 0x801efd <talking>
   11956:	8f 35       	cpi	r24, 0x5F	; 95
   11958:	91 f0       	breq	.+36     	; 0x1197e <GPIB_COMMANDS+0x36>
   1195a:	80 91 ff 1e 	lds	r24, 0x1EFF	; 0x801eff <listening>
   1195e:	90 e0       	ldi	r25, 0x00	; 0
   11960:	7f de       	rcall	.-770    	; 0x11660 <AMIGO_is_MLA>
   11962:	89 2b       	or	r24, r25
   11964:	c9 f4       	brne	.+50     	; 0x11998 <GPIB_COMMANDS+0x50>
   11966:	80 91 ff 1e 	lds	r24, 0x1EFF	; 0x801eff <listening>
   1196a:	90 e0       	ldi	r25, 0x00	; 0
   1196c:	46 de       	rcall	.-884    	; 0x115fa <SS80_is_MLA>
   1196e:	89 2b       	or	r24, r25
   11970:	11 f5       	brne	.+68     	; 0x119b6 <GPIB_COMMANDS+0x6e>
   11972:	80 91 ff 1e 	lds	r24, 0x1EFF	; 0x801eff <listening>
   11976:	90 e0       	ldi	r25, 0x00	; 0
   11978:	a6 de       	rcall	.-692    	; 0x116c6 <PRINTER_is_MLA>
   1197a:	89 2b       	or	r24, r25
   1197c:	59 f5       	brne	.+86     	; 0x119d4 <GPIB_COMMANDS+0x8c>
   1197e:	80 91 ff 1e 	lds	r24, 0x1EFF	; 0x801eff <listening>
   11982:	8f 33       	cpi	r24, 0x3F	; 63
   11984:	19 f4       	brne	.+6      	; 0x1198c <GPIB_COMMANDS+0x44>
   11986:	80 e0       	ldi	r24, 0x00	; 0
   11988:	90 e0       	ldi	r25, 0x00	; 0
   1198a:	2e c0       	rjmp	.+92     	; 0x119e8 <GPIB_COMMANDS+0xa0>
   1198c:	80 91 fd 1e 	lds	r24, 0x1EFD	; 0x801efd <talking>
   11990:	90 e0       	ldi	r25, 0x00	; 0
   11992:	77 de       	rcall	.-786    	; 0x11682 <AMIGO_is_MTA>
   11994:	89 2b       	or	r24, r25
   11996:	49 f0       	breq	.+18     	; 0x119aa <GPIB_COMMANDS+0x62>
   11998:	11 23       	and	r17, r17
   1199a:	11 f0       	breq	.+4      	; 0x119a0 <GPIB_COMMANDS+0x58>
   1199c:	ce 01       	movw	r24, r28
   1199e:	a0 d8       	rcall	.-3776   	; 0x10ae0 <gpib_unread>
   119a0:	80 91 fe 1e 	lds	r24, 0x1EFE	; 0x801efe <secondary>
   119a4:	0e 94 0c c1 	call	0x18218	; 0x18218 <AMIGO_COMMANDS>
   119a8:	1d c0       	rjmp	.+58     	; 0x119e4 <GPIB_COMMANDS+0x9c>
   119aa:	80 91 fd 1e 	lds	r24, 0x1EFD	; 0x801efd <talking>
   119ae:	90 e0       	ldi	r25, 0x00	; 0
   119b0:	35 de       	rcall	.-918    	; 0x1161c <SS80_is_MTA>
   119b2:	89 2b       	or	r24, r25
   119b4:	49 f0       	breq	.+18     	; 0x119c8 <GPIB_COMMANDS+0x80>
   119b6:	11 23       	and	r17, r17
   119b8:	11 f0       	breq	.+4      	; 0x119be <GPIB_COMMANDS+0x76>
   119ba:	ce 01       	movw	r24, r28
   119bc:	91 d8       	rcall	.-3806   	; 0x10ae0 <gpib_unread>
   119be:	80 91 fe 1e 	lds	r24, 0x1EFE	; 0x801efe <secondary>
   119c2:	0e 94 7e b5 	call	0x16afc	; 0x16afc <SS80_COMMANDS>
   119c6:	0e c0       	rjmp	.+28     	; 0x119e4 <GPIB_COMMANDS+0x9c>
   119c8:	80 91 fd 1e 	lds	r24, 0x1EFD	; 0x801efd <talking>
   119cc:	90 e0       	ldi	r25, 0x00	; 0
   119ce:	8c de       	rcall	.-744    	; 0x116e8 <PRINTER_is_MTA>
   119d0:	89 2b       	or	r24, r25
   119d2:	c9 f2       	breq	.-78     	; 0x11986 <GPIB_COMMANDS+0x3e>
   119d4:	11 23       	and	r17, r17
   119d6:	11 f0       	breq	.+4      	; 0x119dc <GPIB_COMMANDS+0x94>
   119d8:	ce 01       	movw	r24, r28
   119da:	82 d8       	rcall	.-3836   	; 0x10ae0 <gpib_unread>
   119dc:	80 91 fe 1e 	lds	r24, 0x1EFE	; 0x801efe <secondary>
   119e0:	0e 94 6c c3 	call	0x186d8	; 0x186d8 <PRINTER_COMMANDS>
   119e4:	10 92 fe 1e 	sts	0x1EFE, r1	; 0x801efe <secondary>
   119e8:	df 91       	pop	r29
   119ea:	cf 91       	pop	r28
   119ec:	1f 91       	pop	r17
   119ee:	08 95       	ret

000119f0 <Send_Identify>:
   119f0:	a4 e0       	ldi	r26, 0x04	; 4
   119f2:	b0 e0       	ldi	r27, 0x00	; 0
   119f4:	ee ef       	ldi	r30, 0xFE	; 254
   119f6:	fc e8       	ldi	r31, 0x8C	; 140
   119f8:	0c 94 1e e8 	jmp	0x1d03c	; 0x1d03c <__prologue_saves__+0x16>
   119fc:	d8 2e       	mov	r13, r24
   119fe:	7b 01       	movw	r14, r22
   11a00:	80 e0       	ldi	r24, 0x00	; 0
   11a02:	91 e0       	ldi	r25, 0x01	; 1
   11a04:	9c 83       	std	Y+4, r25	; 0x04
   11a06:	8b 83       	std	Y+3, r24	; 0x03
   11a08:	8b 01       	movw	r16, r22
   11a0a:	20 e0       	ldi	r18, 0x00	; 0
   11a0c:	30 e0       	ldi	r19, 0x00	; 0
   11a0e:	42 e0       	ldi	r20, 0x02	; 2
   11a10:	50 e0       	ldi	r21, 0x00	; 0
   11a12:	60 e0       	ldi	r22, 0x00	; 0
   11a14:	70 e0       	ldi	r23, 0x00	; 0
   11a16:	ce 01       	movw	r24, r28
   11a18:	01 96       	adiw	r24, 0x01	; 1
   11a1a:	22 d6       	rcall	.+3140   	; 0x12660 <V2B_MSB>
   11a1c:	ae 01       	movw	r20, r28
   11a1e:	4d 5f       	subi	r20, 0xFD	; 253
   11a20:	5f 4f       	sbci	r21, 0xFF	; 255
   11a22:	62 e0       	ldi	r22, 0x02	; 2
   11a24:	70 e0       	ldi	r23, 0x00	; 0
   11a26:	ce 01       	movw	r24, r28
   11a28:	01 96       	adiw	r24, 0x01	; 1
   11a2a:	2a dd       	rcall	.-1452   	; 0x11480 <gpib_write_str>
   11a2c:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   11a30:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
   11a34:	02 97       	sbiw	r24, 0x02	; 2
   11a36:	59 f0       	breq	.+22     	; 0x11a4e <Send_Identify+0x5e>
   11a38:	25 70       	andi	r18, 0x05	; 5
   11a3a:	33 27       	eor	r19, r19
   11a3c:	23 2b       	or	r18, r19
   11a3e:	c9 f0       	breq	.+50     	; 0x11a72 <Send_Identify+0x82>
   11a40:	ff 92       	push	r15
   11a42:	ef 92       	push	r14
   11a44:	1f 92       	push	r1
   11a46:	df 92       	push	r13
   11a48:	88 e7       	ldi	r24, 0x78	; 120
   11a4a:	93 e1       	ldi	r25, 0x13	; 19
   11a4c:	08 c0       	rjmp	.+16     	; 0x11a5e <Send_Identify+0x6e>
   11a4e:	22 ff       	sbrs	r18, 2
   11a50:	10 c0       	rjmp	.+32     	; 0x11a72 <Send_Identify+0x82>
   11a52:	ff 92       	push	r15
   11a54:	ef 92       	push	r14
   11a56:	1f 92       	push	r1
   11a58:	df 92       	push	r13
   11a5a:	8e e5       	ldi	r24, 0x5E	; 94
   11a5c:	93 e1       	ldi	r25, 0x13	; 19
   11a5e:	1f 92       	push	r1
   11a60:	9f 93       	push	r25
   11a62:	8f 93       	push	r24
   11a64:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   11a68:	0f b6       	in	r0, 0x3f	; 63
   11a6a:	f8 94       	cli
   11a6c:	de bf       	out	0x3e, r29	; 62
   11a6e:	0f be       	out	0x3f, r0	; 63
   11a70:	cd bf       	out	0x3d, r28	; 61
   11a72:	8b 81       	ldd	r24, Y+3	; 0x03
   11a74:	9c 81       	ldd	r25, Y+4	; 0x04
   11a76:	88 27       	eor	r24, r24
   11a78:	90 7d       	andi	r25, 0xD0	; 208
   11a7a:	24 96       	adiw	r28, 0x04	; 4
   11a7c:	e7 e0       	ldi	r30, 0x07	; 7
   11a7e:	0c 94 3a e8 	jmp	0x1d074	; 0x1d074 <__epilogue_restores__+0x16>

00011a82 <GPIB>:
   11a82:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   11a86:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
   11a8a:	85 30       	cpi	r24, 0x05	; 5
   11a8c:	89 f4       	brne	.+34     	; 0x11ab0 <GPIB+0x2e>
   11a8e:	24 71       	andi	r18, 0x14	; 20
   11a90:	33 27       	eor	r19, r19
   11a92:	23 2b       	or	r18, r19
   11a94:	51 f0       	breq	.+20     	; 0x11aaa <GPIB+0x28>
   11a96:	8b e4       	ldi	r24, 0x4B	; 75
   11a98:	93 e1       	ldi	r25, 0x13	; 19
   11a9a:	1f 92       	push	r1
   11a9c:	9f 93       	push	r25
   11a9e:	8f 93       	push	r24
   11aa0:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   11aa4:	0f 90       	pop	r0
   11aa6:	0f 90       	pop	r0
   11aa8:	0f 90       	pop	r0
   11aaa:	10 92 fa 1e 	sts	0x1EFA, r1	; 0x801efa <spoll>
   11aae:	9d c0       	rjmp	.+314    	; 0x11bea <GPIB+0x168>
   11ab0:	85 31       	cpi	r24, 0x15	; 21
   11ab2:	39 f4       	brne	.+14     	; 0x11ac2 <GPIB+0x40>
   11ab4:	24 71       	andi	r18, 0x14	; 20
   11ab6:	33 27       	eor	r19, r19
   11ab8:	23 2b       	or	r18, r19
   11aba:	b9 f3       	breq	.-18     	; 0x11aaa <GPIB+0x28>
   11abc:	88 e3       	ldi	r24, 0x38	; 56
   11abe:	93 e1       	ldi	r25, 0x13	; 19
   11ac0:	ec cf       	rjmp	.-40     	; 0x11a9a <GPIB+0x18>
   11ac2:	88 31       	cpi	r24, 0x18	; 24
   11ac4:	c9 f4       	brne	.+50     	; 0x11af8 <GPIB+0x76>
   11ac6:	22 ff       	sbrs	r18, 2
   11ac8:	0a c0       	rjmp	.+20     	; 0x11ade <GPIB+0x5c>
   11aca:	81 e3       	ldi	r24, 0x31	; 49
   11acc:	93 e1       	ldi	r25, 0x13	; 19
   11ace:	1f 92       	push	r1
   11ad0:	9f 93       	push	r25
   11ad2:	8f 93       	push	r24
   11ad4:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   11ad8:	0f 90       	pop	r0
   11ada:	0f 90       	pop	r0
   11adc:	0f 90       	pop	r0
   11ade:	81 e0       	ldi	r24, 0x01	; 1
   11ae0:	80 93 fa 1e 	sts	0x1EFA, r24	; 0x801efa <spoll>
   11ae4:	80 91 fd 1e 	lds	r24, 0x1EFD	; 0x801efd <talking>
   11ae8:	90 e0       	ldi	r25, 0x00	; 0
   11aea:	98 dd       	rcall	.-1232   	; 0x1161c <SS80_is_MTA>
   11aec:	89 2b       	or	r24, r25
   11aee:	09 f4       	brne	.+2      	; 0x11af2 <GPIB+0x70>
   11af0:	7c c0       	rjmp	.+248    	; 0x11bea <GPIB+0x168>
   11af2:	0c 94 32 b1 	jmp	0x16264	; 0x16264 <SS80_Report>
   11af6:	08 95       	ret
   11af8:	89 31       	cpi	r24, 0x19	; 25
   11afa:	29 f4       	brne	.+10     	; 0x11b06 <GPIB+0x84>
   11afc:	22 ff       	sbrs	r18, 2
   11afe:	d5 cf       	rjmp	.-86     	; 0x11aaa <GPIB+0x28>
   11b00:	8a e2       	ldi	r24, 0x2A	; 42
   11b02:	93 e1       	ldi	r25, 0x13	; 19
   11b04:	ca cf       	rjmp	.-108    	; 0x11a9a <GPIB+0x18>
   11b06:	84 30       	cpi	r24, 0x04	; 4
   11b08:	09 f0       	breq	.+2      	; 0x11b0c <GPIB+0x8a>
   11b0a:	48 c0       	rjmp	.+144    	; 0x11b9c <GPIB+0x11a>
   11b0c:	22 ff       	sbrs	r18, 2
   11b0e:	0a c0       	rjmp	.+20     	; 0x11b24 <GPIB+0xa2>
   11b10:	83 e2       	ldi	r24, 0x23	; 35
   11b12:	93 e1       	ldi	r25, 0x13	; 19
   11b14:	1f 92       	push	r1
   11b16:	9f 93       	push	r25
   11b18:	8f 93       	push	r24
   11b1a:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   11b1e:	0f 90       	pop	r0
   11b20:	0f 90       	pop	r0
   11b22:	0f 90       	pop	r0
   11b24:	80 91 ff 1e 	lds	r24, 0x1EFF	; 0x801eff <listening>
   11b28:	90 e0       	ldi	r25, 0x00	; 0
   11b2a:	67 dd       	rcall	.-1330   	; 0x115fa <SS80_is_MLA>
   11b2c:	89 2b       	or	r24, r25
   11b2e:	d9 f0       	breq	.+54     	; 0x11b66 <GPIB+0xe4>
   11b30:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11b34:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11b38:	84 72       	andi	r24, 0x24	; 36
   11b3a:	99 27       	eor	r25, r25
   11b3c:	89 2b       	or	r24, r25
   11b3e:	51 f0       	breq	.+20     	; 0x11b54 <GPIB+0xd2>
   11b40:	87 e1       	ldi	r24, 0x17	; 23
   11b42:	93 e1       	ldi	r25, 0x13	; 19
   11b44:	1f 92       	push	r1
   11b46:	9f 93       	push	r25
   11b48:	8f 93       	push	r24
   11b4a:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   11b4e:	0f 90       	pop	r0
   11b50:	0f 90       	pop	r0
   11b52:	0f 90       	pop	r0
   11b54:	e0 91 7c 19 	lds	r30, 0x197C	; 0x80197c <SS80s>
   11b58:	f0 91 7d 19 	lds	r31, 0x197D	; 0x80197d <SS80s+0x1>
   11b5c:	85 81       	ldd	r24, Z+5	; 0x05
   11b5e:	90 e0       	ldi	r25, 0x00	; 0
   11b60:	0c 94 00 b2 	jmp	0x16400	; 0x16400 <SS80_Selected_Device_Clear>
   11b64:	08 95       	ret
   11b66:	80 91 ff 1e 	lds	r24, 0x1EFF	; 0x801eff <listening>
   11b6a:	90 e0       	ldi	r25, 0x00	; 0
   11b6c:	79 dd       	rcall	.-1294   	; 0x11660 <AMIGO_is_MLA>
   11b6e:	89 2b       	or	r24, r25
   11b70:	e1 f1       	breq	.+120    	; 0x11bea <GPIB+0x168>
   11b72:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11b76:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11b7a:	84 72       	andi	r24, 0x24	; 36
   11b7c:	99 27       	eor	r25, r25
   11b7e:	89 2b       	or	r24, r25
   11b80:	51 f0       	breq	.+20     	; 0x11b96 <GPIB+0x114>
   11b82:	8a e0       	ldi	r24, 0x0A	; 10
   11b84:	93 e1       	ldi	r25, 0x13	; 19
   11b86:	1f 92       	push	r1
   11b88:	9f 93       	push	r25
   11b8a:	8f 93       	push	r24
   11b8c:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   11b90:	0f 90       	pop	r0
   11b92:	0f 90       	pop	r0
   11b94:	0f 90       	pop	r0
   11b96:	0c 94 df bb 	jmp	0x177be	; 0x177be <amigo_cmd_clear>
   11b9a:	08 95       	ret
   11b9c:	84 31       	cpi	r24, 0x14	; 20
   11b9e:	99 f4       	brne	.+38     	; 0x11bc6 <GPIB+0x144>
   11ba0:	22 ff       	sbrs	r18, 2
   11ba2:	0a c0       	rjmp	.+20     	; 0x11bb8 <GPIB+0x136>
   11ba4:	83 e0       	ldi	r24, 0x03	; 3
   11ba6:	93 e1       	ldi	r25, 0x13	; 19
   11ba8:	1f 92       	push	r1
   11baa:	9f 93       	push	r25
   11bac:	8f 93       	push	r24
   11bae:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   11bb2:	0f 90       	pop	r0
   11bb4:	0f 90       	pop	r0
   11bb6:	0f 90       	pop	r0
   11bb8:	0e 94 f2 b1 	call	0x163e4	; 0x163e4 <SS80_Universal_Device_Clear>
   11bbc:	0e 94 df bb 	call	0x177be	; 0x177be <amigo_cmd_clear>
   11bc0:	0e 94 0b c2 	call	0x18416	; 0x18416 <printer_close>
   11bc4:	12 c0       	rjmp	.+36     	; 0x11bea <GPIB+0x168>
   11bc6:	25 71       	andi	r18, 0x15	; 21
   11bc8:	33 27       	eor	r19, r19
   11bca:	23 2b       	or	r18, r19
   11bcc:	71 f0       	breq	.+28     	; 0x11bea <GPIB+0x168>
   11bce:	1f 92       	push	r1
   11bd0:	8f 93       	push	r24
   11bd2:	87 ee       	ldi	r24, 0xE7	; 231
   11bd4:	92 e1       	ldi	r25, 0x12	; 18
   11bd6:	1f 92       	push	r1
   11bd8:	9f 93       	push	r25
   11bda:	8f 93       	push	r24
   11bdc:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   11be0:	0f 90       	pop	r0
   11be2:	0f 90       	pop	r0
   11be4:	0f 90       	pop	r0
   11be6:	0f 90       	pop	r0
   11be8:	0f 90       	pop	r0
   11bea:	80 e0       	ldi	r24, 0x00	; 0
   11bec:	90 e0       	ldi	r25, 0x00	; 0
   11bee:	08 95       	ret

00011bf0 <GPIB_TALK>:
   11bf0:	0f 93       	push	r16
   11bf2:	1f 93       	push	r17
   11bf4:	cf 93       	push	r28
   11bf6:	c8 2f       	mov	r28, r24
   11bf8:	80 91 fd 1e 	lds	r24, 0x1EFD	; 0x801efd <talking>
   11bfc:	80 93 00 1f 	sts	0x1F00, r24	; 0x801f00 <talking_last>
   11c00:	c0 93 fd 1e 	sts	0x1EFD, r28	; 0x801efd <talking>
   11c04:	cf 35       	cpi	r28, 0x5F	; 95
   11c06:	79 f4       	brne	.+30     	; 0x11c26 <GPIB_TALK+0x36>
   11c08:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11c0c:	82 ff       	sbrs	r24, 2
   11c0e:	7f c0       	rjmp	.+254    	; 0x11d0e <GPIB_TALK+0x11e>
   11c10:	84 e9       	ldi	r24, 0x94	; 148
   11c12:	92 e1       	ldi	r25, 0x12	; 18
   11c14:	1f 92       	push	r1
   11c16:	9f 93       	push	r25
   11c18:	8f 93       	push	r24
   11c1a:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   11c1e:	0f 90       	pop	r0
   11c20:	0f 90       	pop	r0
   11c22:	0f 90       	pop	r0
   11c24:	74 c0       	rjmp	.+232    	; 0x11d0e <GPIB_TALK+0x11e>
   11c26:	0c 2f       	mov	r16, r28
   11c28:	10 e0       	ldi	r17, 0x00	; 0
   11c2a:	c8 01       	movw	r24, r16
   11c2c:	f7 dc       	rcall	.-1554   	; 0x1161c <SS80_is_MTA>
   11c2e:	89 2b       	or	r24, r25
   11c30:	f1 f0       	breq	.+60     	; 0x11c6e <GPIB_TALK+0x7e>
   11c32:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11c36:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11c3a:	84 72       	andi	r24, 0x24	; 36
   11c3c:	99 27       	eor	r25, r25
   11c3e:	89 2b       	or	r24, r25
   11c40:	71 f0       	breq	.+28     	; 0x11c5e <GPIB_TALK+0x6e>
   11c42:	1f 92       	push	r1
   11c44:	cf 93       	push	r28
   11c46:	83 e8       	ldi	r24, 0x83	; 131
   11c48:	92 e1       	ldi	r25, 0x12	; 18
   11c4a:	1f 92       	push	r1
   11c4c:	9f 93       	push	r25
   11c4e:	8f 93       	push	r24
   11c50:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   11c54:	0f 90       	pop	r0
   11c56:	0f 90       	pop	r0
   11c58:	0f 90       	pop	r0
   11c5a:	0f 90       	pop	r0
   11c5c:	0f 90       	pop	r0
   11c5e:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <spoll>
   11c62:	88 23       	and	r24, r24
   11c64:	09 f4       	brne	.+2      	; 0x11c68 <GPIB_TALK+0x78>
   11c66:	53 c0       	rjmp	.+166    	; 0x11d0e <GPIB_TALK+0x11e>
   11c68:	0e 94 32 b1 	call	0x16264	; 0x16264 <SS80_Report>
   11c6c:	50 c0       	rjmp	.+160    	; 0x11d0e <GPIB_TALK+0x11e>
   11c6e:	c8 01       	movw	r24, r16
   11c70:	08 dd       	rcall	.-1520   	; 0x11682 <AMIGO_is_MTA>
   11c72:	89 2b       	or	r24, r25
   11c74:	71 f0       	breq	.+28     	; 0x11c92 <GPIB_TALK+0xa2>
   11c76:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11c7a:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11c7e:	84 72       	andi	r24, 0x24	; 36
   11c80:	99 27       	eor	r25, r25
   11c82:	89 2b       	or	r24, r25
   11c84:	09 f4       	brne	.+2      	; 0x11c88 <GPIB_TALK+0x98>
   11c86:	43 c0       	rjmp	.+134    	; 0x11d0e <GPIB_TALK+0x11e>
   11c88:	1f 92       	push	r1
   11c8a:	cf 93       	push	r28
   11c8c:	81 e7       	ldi	r24, 0x71	; 113
   11c8e:	92 e1       	ldi	r25, 0x12	; 18
   11c90:	34 c0       	rjmp	.+104    	; 0x11cfa <GPIB_TALK+0x10a>
   11c92:	c8 01       	movw	r24, r16
   11c94:	29 dd       	rcall	.-1454   	; 0x116e8 <PRINTER_is_MTA>
   11c96:	89 2b       	or	r24, r25
   11c98:	69 f0       	breq	.+26     	; 0x11cb4 <GPIB_TALK+0xc4>
   11c9a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11c9e:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11ca2:	84 72       	andi	r24, 0x24	; 36
   11ca4:	99 27       	eor	r25, r25
   11ca6:	89 2b       	or	r24, r25
   11ca8:	91 f1       	breq	.+100    	; 0x11d0e <GPIB_TALK+0x11e>
   11caa:	1f 92       	push	r1
   11cac:	cf 93       	push	r28
   11cae:	8d e5       	ldi	r24, 0x5D	; 93
   11cb0:	92 e1       	ldi	r25, 0x12	; 18
   11cb2:	23 c0       	rjmp	.+70     	; 0x11cfa <GPIB_TALK+0x10a>
   11cb4:	80 91 ff 1e 	lds	r24, 0x1EFF	; 0x801eff <listening>
   11cb8:	90 e0       	ldi	r25, 0x00	; 0
   11cba:	05 dd       	rcall	.-1526   	; 0x116c6 <PRINTER_is_MLA>
   11cbc:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   11cc0:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
   11cc4:	89 2b       	or	r24, r25
   11cc6:	99 f0       	breq	.+38     	; 0x11cee <GPIB_TALK+0xfe>
   11cc8:	24 72       	andi	r18, 0x24	; 36
   11cca:	33 27       	eor	r19, r19
   11ccc:	23 2b       	or	r18, r19
   11cce:	51 f0       	breq	.+20     	; 0x11ce4 <GPIB_TALK+0xf4>
   11cd0:	8d e4       	ldi	r24, 0x4D	; 77
   11cd2:	92 e1       	ldi	r25, 0x12	; 18
   11cd4:	1f 92       	push	r1
   11cd6:	9f 93       	push	r25
   11cd8:	8f 93       	push	r24
   11cda:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   11cde:	0f 90       	pop	r0
   11ce0:	0f 90       	pop	r0
   11ce2:	0f 90       	pop	r0
   11ce4:	80 e0       	ldi	r24, 0x00	; 0
   11ce6:	90 e0       	ldi	r25, 0x00	; 0
   11ce8:	0e 94 58 c2 	call	0x184b0	; 0x184b0 <printer_open>
   11cec:	10 c0       	rjmp	.+32     	; 0x11d0e <GPIB_TALK+0x11e>
   11cee:	22 ff       	sbrs	r18, 2
   11cf0:	0e c0       	rjmp	.+28     	; 0x11d0e <GPIB_TALK+0x11e>
   11cf2:	1f 92       	push	r1
   11cf4:	cf 93       	push	r28
   11cf6:	81 e4       	ldi	r24, 0x41	; 65
   11cf8:	92 e1       	ldi	r25, 0x12	; 18
   11cfa:	1f 92       	push	r1
   11cfc:	9f 93       	push	r25
   11cfe:	8f 93       	push	r24
   11d00:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   11d04:	0f 90       	pop	r0
   11d06:	0f 90       	pop	r0
   11d08:	0f 90       	pop	r0
   11d0a:	0f 90       	pop	r0
   11d0c:	0f 90       	pop	r0
   11d0e:	80 e0       	ldi	r24, 0x00	; 0
   11d10:	90 e0       	ldi	r25, 0x00	; 0
   11d12:	cf 91       	pop	r28
   11d14:	1f 91       	pop	r17
   11d16:	0f 91       	pop	r16
   11d18:	08 95       	ret

00011d1a <GPIB_SECONDARY_ADDRESS>:
   11d1a:	0f 93       	push	r16
   11d1c:	1f 93       	push	r17
   11d1e:	cf 93       	push	r28
   11d20:	c8 2f       	mov	r28, r24
   11d22:	08 2f       	mov	r16, r24
   11d24:	10 e0       	ldi	r17, 0x00	; 0
   11d26:	c8 01       	movw	r24, r16
   11d28:	8a dc       	rcall	.-1772   	; 0x1163e <SS80_is_MSA>
   11d2a:	89 2b       	or	r24, r25
   11d2c:	19 f1       	breq	.+70     	; 0x11d74 <GPIB_SECONDARY_ADDRESS+0x5a>
   11d2e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11d32:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11d36:	84 72       	andi	r24, 0x24	; 36
   11d38:	99 27       	eor	r25, r25
   11d3a:	89 2b       	or	r24, r25
   11d3c:	71 f0       	breq	.+28     	; 0x11d5a <GPIB_SECONDARY_ADDRESS+0x40>
   11d3e:	1f 92       	push	r1
   11d40:	cf 93       	push	r28
   11d42:	80 e3       	ldi	r24, 0x30	; 48
   11d44:	92 e1       	ldi	r25, 0x12	; 18
   11d46:	1f 92       	push	r1
   11d48:	9f 93       	push	r25
   11d4a:	8f 93       	push	r24
   11d4c:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   11d50:	0f 90       	pop	r0
   11d52:	0f 90       	pop	r0
   11d54:	0f 90       	pop	r0
   11d56:	0f 90       	pop	r0
   11d58:	0f 90       	pop	r0
   11d5a:	e0 91 7e 19 	lds	r30, 0x197E	; 0x80197e <SS80p>
   11d5e:	f0 91 7f 19 	lds	r31, 0x197F	; 0x80197f <SS80p+0x1>
   11d62:	81 81       	ldd	r24, Z+1	; 0x01
   11d64:	90 e0       	ldi	r25, 0x00	; 0
   11d66:	0e 94 21 85 	call	0x10a42	; 0x10a42 <gpib_disable_PPR>
   11d6a:	e0 91 7e 19 	lds	r30, 0x197E	; 0x80197e <SS80p>
   11d6e:	f0 91 7f 19 	lds	r31, 0x197F	; 0x80197f <SS80p+0x1>
   11d72:	27 c0       	rjmp	.+78     	; 0x11dc2 <GPIB_SECONDARY_ADDRESS+0xa8>
   11d74:	c8 01       	movw	r24, r16
   11d76:	96 dc       	rcall	.-1748   	; 0x116a4 <AMIGO_is_MSA>
   11d78:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   11d7c:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
   11d80:	89 2b       	or	r24, r25
   11d82:	21 f1       	breq	.+72     	; 0x11dcc <GPIB_SECONDARY_ADDRESS+0xb2>
   11d84:	c9 01       	movw	r24, r18
   11d86:	84 72       	andi	r24, 0x24	; 36
   11d88:	99 27       	eor	r25, r25
   11d8a:	89 2b       	or	r24, r25
   11d8c:	71 f0       	breq	.+28     	; 0x11daa <GPIB_SECONDARY_ADDRESS+0x90>
   11d8e:	1f 92       	push	r1
   11d90:	cf 93       	push	r28
   11d92:	8e e1       	ldi	r24, 0x1E	; 30
   11d94:	92 e1       	ldi	r25, 0x12	; 18
   11d96:	1f 92       	push	r1
   11d98:	9f 93       	push	r25
   11d9a:	8f 93       	push	r24
   11d9c:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   11da0:	0f 90       	pop	r0
   11da2:	0f 90       	pop	r0
   11da4:	0f 90       	pop	r0
   11da6:	0f 90       	pop	r0
   11da8:	0f 90       	pop	r0
   11daa:	e0 91 7a 19 	lds	r30, 0x197A	; 0x80197a <AMIGOp>
   11dae:	f0 91 7b 19 	lds	r31, 0x197B	; 0x80197b <AMIGOp+0x1>
   11db2:	81 81       	ldd	r24, Z+1	; 0x01
   11db4:	90 e0       	ldi	r25, 0x00	; 0
   11db6:	0e 94 21 85 	call	0x10a42	; 0x10a42 <gpib_disable_PPR>
   11dba:	e0 91 7a 19 	lds	r30, 0x197A	; 0x80197a <AMIGOp>
   11dbe:	f0 91 7b 19 	lds	r31, 0x197B	; 0x80197b <AMIGOp+0x1>
   11dc2:	63 a1       	ldd	r22, Z+35	; 0x23
   11dc4:	74 a1       	ldd	r23, Z+36	; 0x24
   11dc6:	8c 2f       	mov	r24, r28
   11dc8:	13 de       	rcall	.-986    	; 0x119f0 <Send_Identify>
   11dca:	20 c0       	rjmp	.+64     	; 0x11e0c <GPIB_SECONDARY_ADDRESS+0xf2>
   11dcc:	c9 01       	movw	r24, r18
   11dce:	84 72       	andi	r24, 0x24	; 36
   11dd0:	99 27       	eor	r25, r25
   11dd2:	00 97       	sbiw	r24, 0x00	; 0
   11dd4:	d9 f0       	breq	.+54     	; 0x11e0c <GPIB_SECONDARY_ADDRESS+0xf2>
   11dd6:	80 91 fd 1e 	lds	r24, 0x1EFD	; 0x801efd <talking>
   11dda:	1f 92       	push	r1
   11ddc:	8f 93       	push	r24
   11dde:	80 91 ff 1e 	lds	r24, 0x1EFF	; 0x801eff <listening>
   11de2:	1f 92       	push	r1
   11de4:	8f 93       	push	r24
   11de6:	1f 92       	push	r1
   11de8:	cf 93       	push	r28
   11dea:	88 ef       	ldi	r24, 0xF8	; 248
   11dec:	91 e1       	ldi	r25, 0x11	; 17
   11dee:	1f 92       	push	r1
   11df0:	9f 93       	push	r25
   11df2:	8f 93       	push	r24
   11df4:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   11df8:	8d b7       	in	r24, 0x3d	; 61
   11dfa:	9e b7       	in	r25, 0x3e	; 62
   11dfc:	09 96       	adiw	r24, 0x09	; 9
   11dfe:	0f b6       	in	r0, 0x3f	; 63
   11e00:	f8 94       	cli
   11e02:	9e bf       	out	0x3e, r25	; 62
   11e04:	0f be       	out	0x3f, r0	; 63
   11e06:	8d bf       	out	0x3d, r24	; 61
   11e08:	80 e0       	ldi	r24, 0x00	; 0
   11e0a:	90 e0       	ldi	r25, 0x00	; 0
   11e0c:	cf 91       	pop	r28
   11e0e:	1f 91       	pop	r17
   11e10:	0f 91       	pop	r16
   11e12:	08 95       	ret

00011e14 <listen_cleanup>:
   11e14:	60 91 f9 1e 	lds	r22, 0x1EF9	; 0x801ef9 <listening_last>
   11e18:	66 23       	and	r22, r22
   11e1a:	e1 f0       	breq	.+56     	; 0x11e54 <listen_cleanup+0x40>
   11e1c:	70 e0       	ldi	r23, 0x00	; 0
   11e1e:	40 e2       	ldi	r20, 0x20	; 32
   11e20:	50 e0       	ldi	r21, 0x00	; 0
   11e22:	84 e0       	ldi	r24, 0x04	; 4
   11e24:	90 e0       	ldi	r25, 0x00	; 0
   11e26:	c4 d4       	rcall	.+2440   	; 0x127b0 <find_device>
   11e28:	01 96       	adiw	r24, 0x01	; 1
   11e2a:	a1 f0       	breq	.+40     	; 0x11e54 <listen_cleanup+0x40>
   11e2c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11e30:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11e34:	84 72       	andi	r24, 0x24	; 36
   11e36:	99 27       	eor	r25, r25
   11e38:	89 2b       	or	r24, r25
   11e3a:	51 f0       	breq	.+20     	; 0x11e50 <listen_cleanup+0x3c>
   11e3c:	87 ee       	ldi	r24, 0xE7	; 231
   11e3e:	91 e1       	ldi	r25, 0x11	; 17
   11e40:	1f 92       	push	r1
   11e42:	9f 93       	push	r25
   11e44:	8f 93       	push	r24
   11e46:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   11e4a:	0f 90       	pop	r0
   11e4c:	0f 90       	pop	r0
   11e4e:	0f 90       	pop	r0
   11e50:	0c 94 0b c2 	jmp	0x18416	; 0x18416 <printer_close>
   11e54:	08 95       	ret

00011e56 <GPIB_LISTEN>:
   11e56:	0f 93       	push	r16
   11e58:	1f 93       	push	r17
   11e5a:	cf 93       	push	r28
   11e5c:	c8 2f       	mov	r28, r24
   11e5e:	80 91 ff 1e 	lds	r24, 0x1EFF	; 0x801eff <listening>
   11e62:	80 93 f9 1e 	sts	0x1EF9, r24	; 0x801ef9 <listening_last>
   11e66:	c0 93 ff 1e 	sts	0x1EFF, r28	; 0x801eff <listening>
   11e6a:	d4 df       	rcall	.-88     	; 0x11e14 <listen_cleanup>
   11e6c:	cf 33       	cpi	r28, 0x3F	; 63
   11e6e:	19 f5       	brne	.+70     	; 0x11eb6 <GPIB_LISTEN+0x60>
   11e70:	10 92 ff 1e 	sts	0x1EFF, r1	; 0x801eff <listening>
   11e74:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11e78:	82 ff       	sbrs	r24, 2
   11e7a:	75 c0       	rjmp	.+234    	; 0x11f66 <GPIB_LISTEN+0x110>
   11e7c:	80 ee       	ldi	r24, 0xE0	; 224
   11e7e:	92 e1       	ldi	r25, 0x12	; 18
   11e80:	1f 92       	push	r1
   11e82:	9f 93       	push	r25
   11e84:	8f 93       	push	r24
   11e86:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   11e8a:	0f 90       	pop	r0
   11e8c:	0f 90       	pop	r0
   11e8e:	0f 90       	pop	r0
   11e90:	80 91 f7 1c 	lds	r24, 0x1CF7	; 0x801cf7 <lastcmd>
   11e94:	90 91 f8 1c 	lds	r25, 0x1CF8	; 0x801cf8 <lastcmd+0x1>
   11e98:	8f 35       	cpi	r24, 0x5F	; 95
   11e9a:	91 05       	cpc	r25, r1
   11e9c:	09 f0       	breq	.+2      	; 0x11ea0 <GPIB_LISTEN+0x4a>
   11e9e:	63 c0       	rjmp	.+198    	; 0x11f66 <GPIB_LISTEN+0x110>
   11ea0:	8e ed       	ldi	r24, 0xDE	; 222
   11ea2:	92 e1       	ldi	r25, 0x12	; 18
   11ea4:	1f 92       	push	r1
   11ea6:	9f 93       	push	r25
   11ea8:	8f 93       	push	r24
   11eaa:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   11eae:	0f 90       	pop	r0
   11eb0:	0f 90       	pop	r0
   11eb2:	0f 90       	pop	r0
   11eb4:	58 c0       	rjmp	.+176    	; 0x11f66 <GPIB_LISTEN+0x110>
   11eb6:	0c 2f       	mov	r16, r28
   11eb8:	10 e0       	ldi	r17, 0x00	; 0
   11eba:	c8 01       	movw	r24, r16
   11ebc:	d1 db       	rcall	.-2142   	; 0x11660 <AMIGO_is_MLA>
   11ebe:	89 2b       	or	r24, r25
   11ec0:	71 f0       	breq	.+28     	; 0x11ede <GPIB_LISTEN+0x88>
   11ec2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11ec6:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11eca:	84 72       	andi	r24, 0x24	; 36
   11ecc:	99 27       	eor	r25, r25
   11ece:	89 2b       	or	r24, r25
   11ed0:	09 f4       	brne	.+2      	; 0x11ed4 <GPIB_LISTEN+0x7e>
   11ed2:	49 c0       	rjmp	.+146    	; 0x11f66 <GPIB_LISTEN+0x110>
   11ed4:	1f 92       	push	r1
   11ed6:	cf 93       	push	r28
   11ed8:	8c ec       	ldi	r24, 0xCC	; 204
   11eda:	92 e1       	ldi	r25, 0x12	; 18
   11edc:	3a c0       	rjmp	.+116    	; 0x11f52 <GPIB_LISTEN+0xfc>
   11ede:	c8 01       	movw	r24, r16
   11ee0:	8c db       	rcall	.-2280   	; 0x115fa <SS80_is_MLA>
   11ee2:	89 2b       	or	r24, r25
   11ee4:	69 f0       	breq	.+26     	; 0x11f00 <GPIB_LISTEN+0xaa>
   11ee6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11eea:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11eee:	84 72       	andi	r24, 0x24	; 36
   11ef0:	99 27       	eor	r25, r25
   11ef2:	89 2b       	or	r24, r25
   11ef4:	c1 f1       	breq	.+112    	; 0x11f66 <GPIB_LISTEN+0x110>
   11ef6:	1f 92       	push	r1
   11ef8:	cf 93       	push	r28
   11efa:	8b eb       	ldi	r24, 0xBB	; 187
   11efc:	92 e1       	ldi	r25, 0x12	; 18
   11efe:	29 c0       	rjmp	.+82     	; 0x11f52 <GPIB_LISTEN+0xfc>
   11f00:	c8 01       	movw	r24, r16
   11f02:	e1 db       	rcall	.-2110   	; 0x116c6 <PRINTER_is_MLA>
   11f04:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   11f08:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
   11f0c:	89 2b       	or	r24, r25
   11f0e:	d9 f0       	breq	.+54     	; 0x11f46 <GPIB_LISTEN+0xf0>
   11f10:	24 72       	andi	r18, 0x24	; 36
   11f12:	33 27       	eor	r19, r19
   11f14:	23 2b       	or	r18, r19
   11f16:	71 f0       	breq	.+28     	; 0x11f34 <GPIB_LISTEN+0xde>
   11f18:	1f 92       	push	r1
   11f1a:	cf 93       	push	r28
   11f1c:	87 ea       	ldi	r24, 0xA7	; 167
   11f1e:	92 e1       	ldi	r25, 0x12	; 18
   11f20:	1f 92       	push	r1
   11f22:	9f 93       	push	r25
   11f24:	8f 93       	push	r24
   11f26:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   11f2a:	0f 90       	pop	r0
   11f2c:	0f 90       	pop	r0
   11f2e:	0f 90       	pop	r0
   11f30:	0f 90       	pop	r0
   11f32:	0f 90       	pop	r0
   11f34:	80 91 fd 1e 	lds	r24, 0x1EFD	; 0x801efd <talking>
   11f38:	8f 35       	cpi	r24, 0x5F	; 95
   11f3a:	a9 f0       	breq	.+42     	; 0x11f66 <GPIB_LISTEN+0x110>
   11f3c:	80 e0       	ldi	r24, 0x00	; 0
   11f3e:	90 e0       	ldi	r25, 0x00	; 0
   11f40:	0e 94 58 c2 	call	0x184b0	; 0x184b0 <printer_open>
   11f44:	10 c0       	rjmp	.+32     	; 0x11f66 <GPIB_LISTEN+0x110>
   11f46:	22 ff       	sbrs	r18, 2
   11f48:	0e c0       	rjmp	.+28     	; 0x11f66 <GPIB_LISTEN+0x110>
   11f4a:	1f 92       	push	r1
   11f4c:	cf 93       	push	r28
   11f4e:	8b e9       	ldi	r24, 0x9B	; 155
   11f50:	92 e1       	ldi	r25, 0x12	; 18
   11f52:	1f 92       	push	r1
   11f54:	9f 93       	push	r25
   11f56:	8f 93       	push	r24
   11f58:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   11f5c:	0f 90       	pop	r0
   11f5e:	0f 90       	pop	r0
   11f60:	0f 90       	pop	r0
   11f62:	0f 90       	pop	r0
   11f64:	0f 90       	pop	r0
   11f66:	80 e0       	ldi	r24, 0x00	; 0
   11f68:	90 e0       	ldi	r25, 0x00	; 0
   11f6a:	cf 91       	pop	r28
   11f6c:	1f 91       	pop	r17
   11f6e:	0f 91       	pop	r16
   11f70:	08 95       	ret

00011f72 <gpib_task>:
   11f72:	cf 93       	push	r28
   11f74:	df 93       	push	r29
   11f76:	0e 94 c8 84 	call	0x10990	; 0x10990 <gpib_state_init>
   11f7a:	c7 db       	rcall	.-2162   	; 0x1170a <gpib_init_devices>
   11f7c:	10 92 75 19 	sts	0x1975, r1	; 0x801975 <gpib_log_fp+0x1>
   11f80:	10 92 74 19 	sts	0x1974, r1	; 0x801974 <gpib_log_fp>
   11f84:	80 e0       	ldi	r24, 0x00	; 0
   11f86:	90 e0       	ldi	r25, 0x00	; 0
   11f88:	f3 d8       	rcall	.-3610   	; 0x11170 <gpib_read_byte>
   11f8a:	ec 01       	movw	r28, r24
   11f8c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11f90:	83 ff       	sbrs	r24, 3
   11f92:	02 c0       	rjmp	.+4      	; 0x11f98 <gpib_task+0x26>
   11f94:	ce 01       	movw	r24, r28
   11f96:	c2 d9       	rcall	.-3196   	; 0x1131c <gpib_decode>
   11f98:	ce 01       	movw	r24, r28
   11f9a:	4c dc       	rcall	.-1896   	; 0x11834 <gpib_error_test>
   11f9c:	9c 01       	movw	r18, r24
   11f9e:	23 70       	andi	r18, 0x03	; 3
   11fa0:	33 27       	eor	r19, r19
   11fa2:	23 2b       	or	r18, r19
   11fa4:	09 f0       	breq	.+2      	; 0x11fa8 <gpib_task+0x36>
   11fa6:	43 c0       	rjmp	.+134    	; 0x1202e <gpib_task+0xbc>
   11fa8:	89 2b       	or	r24, r25
   11faa:	61 f7       	brne	.-40     	; 0x11f84 <gpib_task+0x12>
   11fac:	d2 ff       	sbrs	r29, 2
   11fae:	26 c0       	rjmp	.+76     	; 0x11ffc <gpib_task+0x8a>
   11fb0:	8c 2f       	mov	r24, r28
   11fb2:	8f 77       	andi	r24, 0x7F	; 127
   11fb4:	80 32       	cpi	r24, 0x20	; 32
   11fb6:	10 f4       	brcc	.+4      	; 0x11fbc <gpib_task+0x4a>
   11fb8:	64 dd       	rcall	.-1336   	; 0x11a82 <GPIB>
   11fba:	e4 cf       	rjmp	.-56     	; 0x11f84 <gpib_task+0x12>
   11fbc:	90 ee       	ldi	r25, 0xE0	; 224
   11fbe:	98 0f       	add	r25, r24
   11fc0:	90 32       	cpi	r25, 0x20	; 32
   11fc2:	10 f4       	brcc	.+4      	; 0x11fc8 <gpib_task+0x56>
   11fc4:	48 df       	rcall	.-368    	; 0x11e56 <GPIB_LISTEN>
   11fc6:	de cf       	rjmp	.-68     	; 0x11f84 <gpib_task+0x12>
   11fc8:	90 ec       	ldi	r25, 0xC0	; 192
   11fca:	98 0f       	add	r25, r24
   11fcc:	90 32       	cpi	r25, 0x20	; 32
   11fce:	10 f4       	brcc	.+4      	; 0x11fd4 <gpib_task+0x62>
   11fd0:	0f de       	rcall	.-994    	; 0x11bf0 <GPIB_TALK>
   11fd2:	d8 cf       	rjmp	.-80     	; 0x11f84 <gpib_task+0x12>
   11fd4:	90 91 ff 1e 	lds	r25, 0x1EFF	; 0x801eff <listening>
   11fd8:	99 23       	and	r25, r25
   11fda:	59 f0       	breq	.+22     	; 0x11ff2 <gpib_task+0x80>
   11fdc:	20 91 f7 1c 	lds	r18, 0x1CF7	; 0x801cf7 <lastcmd>
   11fe0:	30 91 f8 1c 	lds	r19, 0x1CF8	; 0x801cf8 <lastcmd+0x1>
   11fe4:	2f 35       	cpi	r18, 0x5F	; 95
   11fe6:	31 05       	cpc	r19, r1
   11fe8:	21 f4       	brne	.+8      	; 0x11ff2 <gpib_task+0x80>
   11fea:	10 92 fe 1e 	sts	0x1EFE, r1	; 0x801efe <secondary>
   11fee:	95 de       	rcall	.-726    	; 0x11d1a <GPIB_SECONDARY_ADDRESS>
   11ff0:	c9 cf       	rjmp	.-110    	; 0x11f84 <gpib_task+0x12>
   11ff2:	80 93 fe 1e 	sts	0x1EFE, r24	; 0x801efe <secondary>
   11ff6:	60 e0       	ldi	r22, 0x00	; 0
   11ff8:	90 e0       	ldi	r25, 0x00	; 0
   11ffa:	12 c0       	rjmp	.+36     	; 0x12020 <gpib_task+0xae>
   11ffc:	80 91 ff 1e 	lds	r24, 0x1EFF	; 0x801eff <listening>
   12000:	90 e0       	ldi	r25, 0x00	; 0
   12002:	61 db       	rcall	.-2366   	; 0x116c6 <PRINTER_is_MLA>
   12004:	89 2b       	or	r24, r25
   12006:	29 f0       	breq	.+10     	; 0x12012 <gpib_task+0xa0>
   12008:	ce 01       	movw	r24, r28
   1200a:	99 27       	eor	r25, r25
   1200c:	0e 94 f9 c2 	call	0x185f2	; 0x185f2 <printer_buffer>
   12010:	b9 cf       	rjmp	.-142    	; 0x11f84 <gpib_task+0x12>
   12012:	80 91 fe 1e 	lds	r24, 0x1EFE	; 0x801efe <secondary>
   12016:	88 23       	and	r24, r24
   12018:	09 f4       	brne	.+2      	; 0x1201c <gpib_task+0xaa>
   1201a:	b4 cf       	rjmp	.-152    	; 0x11f84 <gpib_task+0x12>
   1201c:	61 e0       	ldi	r22, 0x01	; 1
   1201e:	ce 01       	movw	r24, r28
   12020:	93 dc       	rcall	.-1754   	; 0x11948 <GPIB_COMMANDS>
   12022:	08 dc       	rcall	.-2032   	; 0x11834 <gpib_error_test>
   12024:	83 70       	andi	r24, 0x03	; 3
   12026:	99 27       	eor	r25, r25
   12028:	89 2b       	or	r24, r25
   1202a:	09 f4       	brne	.+2      	; 0x1202e <gpib_task+0xbc>
   1202c:	ab cf       	rjmp	.-170    	; 0x11f84 <gpib_task+0x12>
   1202e:	df 91       	pop	r29
   12030:	cf 91       	pop	r28
   12032:	08 95       	ret

00012034 <talk_cleanup>:
   12034:	08 95       	ret

00012036 <gpib_help>:
///  Help Menu for User invoked GPIB functions and tasks
///  See: int gpib_tests(char *str)
/// @return  void

void gpib_help(int full)
{
   12036:	cf 93       	push	r28
   12038:	df 93       	push	r29
   1203a:	ec 01       	movw	r28, r24
    printf("gpib help\n");
   1203c:	8a e3       	ldi	r24, 0x3A	; 58
   1203e:	97 e1       	ldi	r25, 0x17	; 23
   12040:	1f 92       	push	r1
   12042:	9f 93       	push	r25
   12044:	8f 93       	push	r24
   12046:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    if(full)
   1204a:	0f 90       	pop	r0
   1204c:	0f 90       	pop	r0
   1204e:	0f 90       	pop	r0
   12050:	cd 2b       	or	r28, r29
   12052:	51 f0       	breq	.+20     	; 0x12068 <gpib_help+0x32>
    {
        printf("gpib prefix is optional\n"
   12054:	89 eb       	ldi	r24, 0xB9	; 185
   12056:	95 e1       	ldi	r25, 0x15	; 21
   12058:	1f 92       	push	r1
   1205a:	9f 93       	push	r25
   1205c:	8f 93       	push	r24
   1205e:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   12062:	0f 90       	pop	r0
   12064:	0f 90       	pop	r0
   12066:	0f 90       	pop	r0
			"gpib port write latch [A-D] val\n"
			"gpib port write pins  [A-D] val\n"
            "\n"
            );
    }
}
   12068:	df 91       	pop	r29
   1206a:	cf 91       	pop	r28
   1206c:	08 95       	ret

0001206e <gpib_tests>:

/// @brief GPIB user tests
///  User invoked GPIB functions and tasks
/// @return  1 matched token, 0 if not
int gpib_tests(int argc, char * argv[])
{
   1206e:	ef 92       	push	r14
   12070:	ff 92       	push	r15
   12072:	0f 93       	push	r16
   12074:	1f 93       	push	r17
   12076:	cf 93       	push	r28
   12078:	df 93       	push	r29
   1207a:	7c 01       	movw	r14, r24

    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   1207c:	fb 01       	movw	r30, r22
   1207e:	80 81       	ld	r24, Z
   12080:	91 81       	ldd	r25, Z+1	; 0x01

    // skip optional gpib key word
    if( !ptr || !MATCH(ptr,"gpib") )
   12082:	00 97       	sbiw	r24, 0x00	; 0
   12084:	19 f4       	brne	.+6      	; 0x1208c <gpib_tests+0x1e>
        return(0);
   12086:	80 e0       	ldi	r24, 0x00	; 0
   12088:	90 e0       	ldi	r25, 0x00	; 0
   1208a:	e5 c2       	rjmp	.+1482   	; 0x12656 <gpib_tests+0x5e8>
   1208c:	eb 01       	movw	r28, r22

    ind = 0;
    ptr = argv[ind++];

    // skip optional gpib key word
    if( !ptr || !MATCH(ptr,"gpib") )
   1208e:	61 e1       	ldi	r22, 0x11	; 17
   12090:	7d e0       	ldi	r23, 0x0D	; 13
   12092:	0e 94 f4 32 	call	0x65e8	; 0x65e8 <MATCH>
   12096:	89 2b       	or	r24, r25
   12098:	b1 f3       	breq	.-20     	; 0x12086 <gpib_tests+0x18>
        return(0);

    ptr = argv[ind++];
   1209a:	0a 81       	ldd	r16, Y+2	; 0x02
   1209c:	1b 81       	ldd	r17, Y+3	; 0x03
    if ( !ptr || MATCH(ptr,"help") )
   1209e:	01 15       	cp	r16, r1
   120a0:	11 05       	cpc	r17, r1
   120a2:	21 f4       	brne	.+8      	; 0x120ac <gpib_tests+0x3e>
    {
        gpib_help(1);
   120a4:	81 e0       	ldi	r24, 0x01	; 1
   120a6:	90 e0       	ldi	r25, 0x00	; 0
   120a8:	c6 df       	rcall	.-116    	; 0x12036 <gpib_help>
   120aa:	d3 c2       	rjmp	.+1446   	; 0x12652 <gpib_tests+0x5e4>
    // skip optional gpib key word
    if( !ptr || !MATCH(ptr,"gpib") )
        return(0);

    ptr = argv[ind++];
    if ( !ptr || MATCH(ptr,"help") )
   120ac:	6a e2       	ldi	r22, 0x2A	; 42
   120ae:	76 e1       	ldi	r23, 0x16	; 22
   120b0:	c8 01       	movw	r24, r16
   120b2:	0e 94 f4 32 	call	0x65e8	; 0x65e8 <MATCH>
   120b6:	89 2b       	or	r24, r25
   120b8:	a9 f7       	brne	.-22     	; 0x120a4 <gpib_tests+0x36>
    {
        gpib_help(1);
        return(1);
    }

    if (MATCHARGS(ptr,"addresses",(ind+0),argc))
   120ba:	97 01       	movw	r18, r14
   120bc:	42 e0       	ldi	r20, 0x02	; 2
   120be:	50 e0       	ldi	r21, 0x00	; 0
   120c0:	66 e1       	ldi	r22, 0x16	; 22
   120c2:	7d e0       	ldi	r23, 0x0D	; 13
   120c4:	c8 01       	movw	r24, r16
   120c6:	0e 94 08 33 	call	0x6610	; 0x6610 <MATCHARGS>
   120ca:	89 2b       	or	r24, r25
   120cc:	19 f0       	breq	.+6      	; 0x120d4 <gpib_tests+0x66>
    {
        display_Addresses();
   120ce:	0e 94 78 a4 	call	0x148f0	; 0x148f0 <display_Addresses>
   120d2:	bf c2       	rjmp	.+1406   	; 0x12652 <gpib_tests+0x5e4>
        return(1);
    }

    if (MATCHARGS(ptr,"config",(ind+0),argc))
   120d4:	97 01       	movw	r18, r14
   120d6:	42 e0       	ldi	r20, 0x02	; 2
   120d8:	50 e0       	ldi	r21, 0x00	; 0
   120da:	60 e2       	ldi	r22, 0x20	; 32
   120dc:	7d e0       	ldi	r23, 0x0D	; 13
   120de:	c8 01       	movw	r24, r16
   120e0:	0e 94 08 33 	call	0x6610	; 0x6610 <MATCHARGS>
   120e4:	89 2b       	or	r24, r25
   120e6:	19 f0       	breq	.+6      	; 0x120ee <gpib_tests+0x80>
    {
        display_Config();
   120e8:	0e 94 73 a5 	call	0x14ae6	; 0x14ae6 <display_Config>
   120ec:	b2 c2       	rjmp	.+1380   	; 0x12652 <gpib_tests+0x5e4>
        return(1);
    }

    if (MATCHARGS(ptr,"debug", (ind+1) ,argc))
   120ee:	97 01       	movw	r18, r14
   120f0:	43 e0       	ldi	r20, 0x03	; 3
   120f2:	50 e0       	ldi	r21, 0x00	; 0
   120f4:	67 e2       	ldi	r22, 0x27	; 39
   120f6:	7d e0       	ldi	r23, 0x0D	; 13
   120f8:	c8 01       	movw	r24, r16
   120fa:	0e 94 08 33 	call	0x6610	; 0x6610 <MATCHARGS>
   120fe:	89 2b       	or	r24, r25
   12100:	69 f0       	breq	.+26     	; 0x1211c <gpib_tests+0xae>
    {
        debuglevel = get_value(argv[ind]);
   12102:	8c 81       	ldd	r24, Y+4	; 0x04
   12104:	9d 81       	ldd	r25, Y+5	; 0x05
   12106:	0e 94 36 34 	call	0x686c	; 0x686c <get_value>
   1210a:	60 93 bd 01 	sts	0x01BD, r22	; 0x8001bd <debuglevel>
   1210e:	70 93 be 01 	sts	0x01BE, r23	; 0x8001be <debuglevel+0x1>
        printf("debug=%04XH\n", debuglevel);
   12112:	7f 93       	push	r23
   12114:	6f 93       	push	r22
   12116:	8c ea       	ldi	r24, 0xAC	; 172
   12118:	95 e1       	ldi	r25, 0x15	; 21
   1211a:	b9 c1       	rjmp	.+882    	; 0x1248e <gpib_tests+0x420>
        return(1);
    }

    if (MATCHARGS(ptr,"elapsed_reset",(ind+0),argc))
   1211c:	97 01       	movw	r18, r14
   1211e:	42 e0       	ldi	r20, 0x02	; 2
   12120:	50 e0       	ldi	r21, 0x00	; 0
   12122:	6d e2       	ldi	r22, 0x2D	; 45
   12124:	7d e0       	ldi	r23, 0x0D	; 13
   12126:	c8 01       	movw	r24, r16
   12128:	0e 94 08 33 	call	0x6610	; 0x6610 <MATCHARGS>
   1212c:	89 2b       	or	r24, r25
   1212e:	19 f0       	breq	.+6      	; 0x12136 <gpib_tests+0xc8>
    {
        gpib_timer_elapsed_begin();
   12130:	0e 94 38 84 	call	0x10870	; 0x10870 <gpib_timer_elapsed_begin>
   12134:	8e c2       	rjmp	.+1308   	; 0x12652 <gpib_tests+0x5e4>
        return(1);
    }

    if (MATCHARGS(ptr,"elapsed",(ind+0),argc))
   12136:	97 01       	movw	r18, r14
   12138:	42 e0       	ldi	r20, 0x02	; 2
   1213a:	50 e0       	ldi	r21, 0x00	; 0
   1213c:	6b e3       	ldi	r22, 0x3B	; 59
   1213e:	7d e0       	ldi	r23, 0x0D	; 13
   12140:	c8 01       	movw	r24, r16
   12142:	0e 94 08 33 	call	0x6610	; 0x6610 <MATCHARGS>
   12146:	89 2b       	or	r24, r25
   12148:	29 f0       	breq	.+10     	; 0x12154 <gpib_tests+0xe6>
    {
        gpib_timer_elapsed_end("gpib elapsed:");
   1214a:	83 e4       	ldi	r24, 0x43	; 67
   1214c:	9d e0       	ldi	r25, 0x0D	; 13
   1214e:	0e 94 4a 84 	call	0x10894	; 0x10894 <gpib_timer_elapsed_end>
   12152:	7f c2       	rjmp	.+1278   	; 0x12652 <gpib_tests+0x5e4>
        return(1);
    }

    if (MATCHARGS(ptr,"task",(ind+0),argc))
   12154:	97 01       	movw	r18, r14
   12156:	42 e0       	ldi	r20, 0x02	; 2
   12158:	50 e0       	ldi	r21, 0x00	; 0
   1215a:	61 e5       	ldi	r22, 0x51	; 81
   1215c:	7d e0       	ldi	r23, 0x0D	; 13
   1215e:	c8 01       	movw	r24, r16
   12160:	0e 94 08 33 	call	0x6610	; 0x6610 <MATCHARGS>
   12164:	89 2b       	or	r24, r25
    {
        gpib_task();
   12166:	11 f0       	breq	.+4      	; 0x1216c <gpib_tests+0xfe>
   12168:	04 df       	rcall	.-504    	; 0x11f72 <gpib_task>
   1216a:	73 c2       	rjmp	.+1254   	; 0x12652 <gpib_tests+0x5e4>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
   1216c:	97 01       	movw	r18, r14
   1216e:	43 e0       	ldi	r20, 0x03	; 3
   12170:	50 e0       	ldi	r21, 0x00	; 0
   12172:	66 e5       	ldi	r22, 0x56	; 86
   12174:	7d e0       	ldi	r23, 0x0D	; 13
   12176:	c8 01       	movw	r24, r16
   12178:	0e 94 08 33 	call	0x6610	; 0x6610 <MATCHARGS>
   1217c:	89 2b       	or	r24, r25
   1217e:	a1 f0       	breq	.+40     	; 0x121a8 <gpib_tests+0x13a>
    {
        int detail = 0;
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
   12180:	8e 81       	ldd	r24, Y+6	; 0x06
   12182:	9f 81       	ldd	r25, Y+7	; 0x07
   12184:	00 97       	sbiw	r24, 0x00	; 0
   12186:	51 f0       	breq	.+20     	; 0x1219c <gpib_tests+0x12e>
   12188:	6c e5       	ldi	r22, 0x5C	; 92
   1218a:	7d e0       	ldi	r23, 0x0D	; 13
   1218c:	0e 94 f4 32 	call	0x65e8	; 0x65e8 <MATCH>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
    {
        int detail = 0;
   12190:	61 e0       	ldi	r22, 0x01	; 1
   12192:	70 e0       	ldi	r23, 0x00	; 0
   12194:	89 2b       	or	r24, r25
   12196:	21 f4       	brne	.+8      	; 0x121a0 <gpib_tests+0x132>
   12198:	60 e0       	ldi	r22, 0x00	; 0
   1219a:	02 c0       	rjmp	.+4      	; 0x121a0 <gpib_tests+0x132>
   1219c:	60 e0       	ldi	r22, 0x00	; 0
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
            detail = 1;
        gpib_trace_task(argv[ind], detail);
   1219e:	70 e0       	ldi	r23, 0x00	; 0
   121a0:	8c 81       	ldd	r24, Y+4	; 0x04
   121a2:	9d 81       	ldd	r25, Y+5	; 0x05
   121a4:	ba da       	rcall	.-2700   	; 0x1171a <gpib_trace_task>
        return(1);
    }

    if ( MATCHARGS(ptr, "ifc",(ind+0),argc))
   121a6:	55 c2       	rjmp	.+1194   	; 0x12652 <gpib_tests+0x5e4>
   121a8:	97 01       	movw	r18, r14
   121aa:	42 e0       	ldi	r20, 0x02	; 2
   121ac:	50 e0       	ldi	r21, 0x00	; 0
   121ae:	60 e6       	ldi	r22, 0x60	; 96
   121b0:	7d e0       	ldi	r23, 0x0D	; 13
   121b2:	c8 01       	movw	r24, r16
   121b4:	0e 94 08 33 	call	0x6610	; 0x6610 <MATCHARGS>
   121b8:	89 2b       	or	r24, r25
    {
        gpib_assert_ifc();
   121ba:	19 f0       	breq	.+6      	; 0x121c2 <gpib_tests+0x154>
   121bc:	0e 94 52 85 	call	0x10aa4	; 0x10aa4 <gpib_assert_ifc>
        return(1);

    }

    if (MATCHARGS(ptr,"plot_echo", (ind+1) ,argc))
   121c0:	48 c2       	rjmp	.+1168   	; 0x12652 <gpib_tests+0x5e4>
   121c2:	97 01       	movw	r18, r14
   121c4:	43 e0       	ldi	r20, 0x03	; 3
   121c6:	50 e0       	ldi	r21, 0x00	; 0
   121c8:	64 e6       	ldi	r22, 0x64	; 100
   121ca:	7d e0       	ldi	r23, 0x0D	; 13
   121cc:	c8 01       	movw	r24, r16
   121ce:	0e 94 08 33 	call	0x6610	; 0x6610 <MATCHARGS>
   121d2:	89 2b       	or	r24, r25
    {
        plot_echo(atoi(argv[ind]) );
   121d4:	39 f0       	breq	.+14     	; 0x121e4 <gpib_tests+0x176>
   121d6:	8c 81       	ldd	r24, Y+4	; 0x04
   121d8:	9d 81       	ldd	r25, Y+5	; 0x05
   121da:	0e 94 be 47 	call	0x8f7c	; 0x8f7c <atoi>
   121de:	0e 94 9b c3 	call	0x18736	; 0x18736 <plot_echo>
        return(1);
    }

    if (MATCHARGS(ptr,"ppr_bit_clr", (ind+1) ,argc))
   121e2:	37 c2       	rjmp	.+1134   	; 0x12652 <gpib_tests+0x5e4>
   121e4:	97 01       	movw	r18, r14
   121e6:	43 e0       	ldi	r20, 0x03	; 3
   121e8:	50 e0       	ldi	r21, 0x00	; 0
   121ea:	6e e6       	ldi	r22, 0x6E	; 110
   121ec:	7d e0       	ldi	r23, 0x0D	; 13
   121ee:	c8 01       	movw	r24, r16
   121f0:	0e 94 08 33 	call	0x6610	; 0x6610 <MATCHARGS>
   121f4:	89 2b       	or	r24, r25
    {
        ppr_bit_clr(atoh(argv[ind] ));
   121f6:	41 f0       	breq	.+16     	; 0x12208 <gpib_tests+0x19a>
   121f8:	8c 81       	ldd	r24, Y+4	; 0x04
   121fa:	9d 81       	ldd	r25, Y+5	; 0x05
   121fc:	0e 94 b8 47 	call	0x8f70	; 0x8f70 <atoh>
   12200:	86 2f       	mov	r24, r22
   12202:	0e 94 fa 82 	call	0x105f4	; 0x105f4 <ppr_bit_clr>
        return(1);
    }

    if (MATCHARGS(ptr,"ppr_bit_set", (ind+1) ,argc))
   12206:	25 c2       	rjmp	.+1098   	; 0x12652 <gpib_tests+0x5e4>
   12208:	97 01       	movw	r18, r14
   1220a:	43 e0       	ldi	r20, 0x03	; 3
   1220c:	50 e0       	ldi	r21, 0x00	; 0
   1220e:	6a e7       	ldi	r22, 0x7A	; 122
   12210:	7d e0       	ldi	r23, 0x0D	; 13
   12212:	c8 01       	movw	r24, r16
   12214:	0e 94 08 33 	call	0x6610	; 0x6610 <MATCHARGS>
   12218:	89 2b       	or	r24, r25
    {
        ppr_bit_set(atoh(argv[ind]) );
   1221a:	41 f0       	breq	.+16     	; 0x1222c <gpib_tests+0x1be>
   1221c:	8c 81       	ldd	r24, Y+4	; 0x04
   1221e:	9d 81       	ldd	r25, Y+5	; 0x05
   12220:	0e 94 b8 47 	call	0x8f70	; 0x8f70 <atoh>
   12224:	86 2f       	mov	r24, r22
   12226:	0e 94 ed 82 	call	0x105da	; 0x105da <ppr_bit_set>
        return(1);
    }

    if (MATCHARGS(ptr,"ppr_set", (ind+1) ,argc))
   1222a:	13 c2       	rjmp	.+1062   	; 0x12652 <gpib_tests+0x5e4>
   1222c:	97 01       	movw	r18, r14
   1222e:	43 e0       	ldi	r20, 0x03	; 3
   12230:	50 e0       	ldi	r21, 0x00	; 0
   12232:	66 e8       	ldi	r22, 0x86	; 134
   12234:	7d e0       	ldi	r23, 0x0D	; 13
   12236:	c8 01       	movw	r24, r16
   12238:	0e 94 08 33 	call	0x6610	; 0x6610 <MATCHARGS>
   1223c:	89 2b       	or	r24, r25
    {
        ppr_set(atoh(argv[ind]) );
   1223e:	41 f0       	breq	.+16     	; 0x12250 <gpib_tests+0x1e2>
   12240:	8c 81       	ldd	r24, Y+4	; 0x04
   12242:	9d 81       	ldd	r25, Y+5	; 0x05
   12244:	0e 94 b8 47 	call	0x8f70	; 0x8f70 <atoh>
   12248:	86 2f       	mov	r24, r22
   1224a:	0e 94 ce 82 	call	0x1059c	; 0x1059c <ppr_set>
        return(1);
    }

    if (MATCHARGS(ptr,"ppr_init",(ind+0),argc))
   1224e:	01 c2       	rjmp	.+1026   	; 0x12652 <gpib_tests+0x5e4>
   12250:	97 01       	movw	r18, r14
   12252:	42 e0       	ldi	r20, 0x02	; 2
   12254:	50 e0       	ldi	r21, 0x00	; 0
   12256:	6e e8       	ldi	r22, 0x8E	; 142
   12258:	7d e0       	ldi	r23, 0x0D	; 13
   1225a:	c8 01       	movw	r24, r16
   1225c:	0e 94 08 33 	call	0x6610	; 0x6610 <MATCHARGS>
   12260:	89 2b       	or	r24, r25
    {
        ppr_init();
   12262:	19 f0       	breq	.+6      	; 0x1226a <gpib_tests+0x1fc>
   12264:	0e 94 dc 82 	call	0x105b8	; 0x105b8 <ppr_init>
        return(1);
    }


	// port read
    if (MATCHARGS(ptr,"port",(ind+3),argc))
   12268:	f4 c1       	rjmp	.+1000   	; 0x12652 <gpib_tests+0x5e4>
   1226a:	97 01       	movw	r18, r14
   1226c:	45 e0       	ldi	r20, 0x05	; 5
   1226e:	50 e0       	ldi	r21, 0x00	; 0
   12270:	67 e9       	ldi	r22, 0x97	; 151
   12272:	7d e0       	ldi	r23, 0x0D	; 13
   12274:	c8 01       	movw	r24, r16
   12276:	0e 94 08 33 	call	0x6610	; 0x6610 <MATCHARGS>
   1227a:	89 2b       	or	r24, r25
   1227c:	09 f4       	brne	.+2      	; 0x12280 <gpib_tests+0x212>
    {
        if( MATCHI(argv[ind],"read") )
   1227e:	12 c1       	rjmp	.+548    	; 0x124a4 <gpib_tests+0x436>
   12280:	6c e9       	ldi	r22, 0x9C	; 156
   12282:	7d e0       	ldi	r23, 0x0D	; 13
   12284:	8c 81       	ldd	r24, Y+4	; 0x04
   12286:	9d 81       	ldd	r25, Y+5	; 0x05
   12288:	0e 94 37 33 	call	0x666e	; 0x666e <MATCHI>
   1228c:	89 2b       	or	r24, r25
   1228e:	09 f4       	brne	.+2      	; 0x12292 <gpib_tests+0x224>
		{
			if( MATCHI(argv[ind+1],"pins") )
   12290:	09 c1       	rjmp	.+530    	; 0x124a4 <gpib_tests+0x436>
   12292:	61 ea       	ldi	r22, 0xA1	; 161
   12294:	7d e0       	ldi	r23, 0x0D	; 13
   12296:	8e 81       	ldd	r24, Y+6	; 0x06
   12298:	9f 81       	ldd	r25, Y+7	; 0x07
   1229a:	0e 94 37 33 	call	0x666e	; 0x666e <MATCHI>
   1229e:	89 2b       	or	r24, r25
   122a0:	09 f4       	brne	.+2      	; 0x122a4 <gpib_tests+0x236>
			{   
				if( MATCHI(argv[ind+2],"A")) 
   122a2:	4c c0       	rjmp	.+152    	; 0x1233c <gpib_tests+0x2ce>
   122a4:	6b ee       	ldi	r22, 0xEB	; 235
   122a6:	7d e0       	ldi	r23, 0x0D	; 13
   122a8:	88 85       	ldd	r24, Y+8	; 0x08
   122aa:	99 85       	ldd	r25, Y+9	; 0x09
   122ac:	0e 94 37 33 	call	0x666e	; 0x666e <MATCHI>
   122b0:	89 2b       	or	r24, r25
				{
					printf("Port pins A RD:[%02XH]\n",  0xff & GPIO_PORT_PINS_RD(PORTA) );
   122b2:	59 f0       	breq	.+22     	; 0x122ca <gpib_tests+0x25c>
   122b4:	e2 b1       	in	r30, 0x02	; 2
   122b6:	83 e0       	ldi	r24, 0x03	; 3
   122b8:	e8 9f       	mul	r30, r24
   122ba:	f0 01       	movw	r30, r0
   122bc:	11 24       	eor	r1, r1
   122be:	80 a1       	ldd	r24, Z+32	; 0x20
   122c0:	1f 92       	push	r1
   122c2:	8f 93       	push	r24
   122c4:	84 e9       	ldi	r24, 0x94	; 148
   122c6:	95 e1       	ldi	r25, 0x15	; 21
					return (1);
				}
				if( MATCHI(argv[ind+2],"B"))
   122c8:	e2 c0       	rjmp	.+452    	; 0x1248e <gpib_tests+0x420>
   122ca:	66 ea       	ldi	r22, 0xA6	; 166
   122cc:	7d e0       	ldi	r23, 0x0D	; 13
   122ce:	88 85       	ldd	r24, Y+8	; 0x08
   122d0:	99 85       	ldd	r25, Y+9	; 0x09
   122d2:	0e 94 37 33 	call	0x666e	; 0x666e <MATCHI>
   122d6:	89 2b       	or	r24, r25
				{
					printf("Port pins B RD:[%02XH]\n",  0xff & GPIO_PORT_PINS_RD(PORTB) );
   122d8:	59 f0       	breq	.+22     	; 0x122f0 <gpib_tests+0x282>
   122da:	e5 b1       	in	r30, 0x05	; 5
   122dc:	83 e0       	ldi	r24, 0x03	; 3
   122de:	e8 9f       	mul	r30, r24
   122e0:	f0 01       	movw	r30, r0
   122e2:	11 24       	eor	r1, r1
   122e4:	80 a1       	ldd	r24, Z+32	; 0x20
   122e6:	1f 92       	push	r1
   122e8:	8f 93       	push	r24
   122ea:	8c e7       	ldi	r24, 0x7C	; 124
   122ec:	95 e1       	ldi	r25, 0x15	; 21
					return (1);
				}
				if( MATCHI(argv[ind+2],"C"))
   122ee:	cf c0       	rjmp	.+414    	; 0x1248e <gpib_tests+0x420>
   122f0:	6f ec       	ldi	r22, 0xCF	; 207
   122f2:	7c e0       	ldi	r23, 0x0C	; 12
   122f4:	88 85       	ldd	r24, Y+8	; 0x08
   122f6:	99 85       	ldd	r25, Y+9	; 0x09
   122f8:	0e 94 37 33 	call	0x666e	; 0x666e <MATCHI>
   122fc:	89 2b       	or	r24, r25
				{
					printf("Port pins C RD:[%02XH]\n",  0xff & GPIO_PORT_PINS_RD(PORTC) );
   122fe:	59 f0       	breq	.+22     	; 0x12316 <gpib_tests+0x2a8>
   12300:	e8 b1       	in	r30, 0x08	; 8
   12302:	83 e0       	ldi	r24, 0x03	; 3
   12304:	e8 9f       	mul	r30, r24
   12306:	f0 01       	movw	r30, r0
   12308:	11 24       	eor	r1, r1
   1230a:	80 a1       	ldd	r24, Z+32	; 0x20
   1230c:	1f 92       	push	r1
   1230e:	8f 93       	push	r24
   12310:	84 e6       	ldi	r24, 0x64	; 100
   12312:	95 e1       	ldi	r25, 0x15	; 21
					return (1);
				}
				if( MATCHI(argv[ind+2],"D"))
   12314:	bc c0       	rjmp	.+376    	; 0x1248e <gpib_tests+0x420>
   12316:	63 e5       	ldi	r22, 0x53	; 83
   12318:	77 e0       	ldi	r23, 0x07	; 7
   1231a:	88 85       	ldd	r24, Y+8	; 0x08
   1231c:	99 85       	ldd	r25, Y+9	; 0x09
   1231e:	0e 94 37 33 	call	0x666e	; 0x666e <MATCHI>
   12322:	89 2b       	or	r24, r25
				{
					printf("Port pins D RD:[%02XH]\n",  0xff & GPIO_PORT_PINS_RD(PORTD) );
   12324:	59 f0       	breq	.+22     	; 0x1233c <gpib_tests+0x2ce>
   12326:	eb b1       	in	r30, 0x0b	; 11
   12328:	83 e0       	ldi	r24, 0x03	; 3
   1232a:	e8 9f       	mul	r30, r24
   1232c:	f0 01       	movw	r30, r0
   1232e:	11 24       	eor	r1, r1
   12330:	80 a1       	ldd	r24, Z+32	; 0x20
   12332:	1f 92       	push	r1
   12334:	8f 93       	push	r24
   12336:	8c e4       	ldi	r24, 0x4C	; 76
   12338:	95 e1       	ldi	r25, 0x15	; 21
					return (1);
				}
			}
			if( MATCHI(argv[ind+1],"latch") )
   1233a:	a9 c0       	rjmp	.+338    	; 0x1248e <gpib_tests+0x420>
   1233c:	68 ea       	ldi	r22, 0xA8	; 168
   1233e:	7d e0       	ldi	r23, 0x0D	; 13
   12340:	8e 81       	ldd	r24, Y+6	; 0x06
   12342:	9f 81       	ldd	r25, Y+7	; 0x07
   12344:	0e 94 37 33 	call	0x666e	; 0x666e <MATCHI>
   12348:	89 2b       	or	r24, r25
   1234a:	09 f4       	brne	.+2      	; 0x1234e <gpib_tests+0x2e0>
			{   
				if( MATCHI(argv[ind+2],"A"))
   1234c:	4c c0       	rjmp	.+152    	; 0x123e6 <gpib_tests+0x378>
   1234e:	6b ee       	ldi	r22, 0xEB	; 235
   12350:	7d e0       	ldi	r23, 0x0D	; 13
   12352:	88 85       	ldd	r24, Y+8	; 0x08
   12354:	99 85       	ldd	r25, Y+9	; 0x09
   12356:	0e 94 37 33 	call	0x666e	; 0x666e <MATCHI>
   1235a:	89 2b       	or	r24, r25
				{
					printf("Port latch A RD:[%02XH]\n",  0xff & GPIO_PORT_LATCH_RD(PORTA) );
   1235c:	59 f0       	breq	.+22     	; 0x12374 <gpib_tests+0x306>
   1235e:	e2 b1       	in	r30, 0x02	; 2
   12360:	83 e0       	ldi	r24, 0x03	; 3
   12362:	e8 9f       	mul	r30, r24
   12364:	f0 01       	movw	r30, r0
   12366:	11 24       	eor	r1, r1
   12368:	82 a1       	ldd	r24, Z+34	; 0x22
   1236a:	1f 92       	push	r1
   1236c:	8f 93       	push	r24
   1236e:	83 e3       	ldi	r24, 0x33	; 51
   12370:	95 e1       	ldi	r25, 0x15	; 21
					return (1);
				}
				if( MATCHI(argv[ind+2],"B"))
   12372:	8d c0       	rjmp	.+282    	; 0x1248e <gpib_tests+0x420>
   12374:	66 ea       	ldi	r22, 0xA6	; 166
   12376:	7d e0       	ldi	r23, 0x0D	; 13
   12378:	88 85       	ldd	r24, Y+8	; 0x08
   1237a:	99 85       	ldd	r25, Y+9	; 0x09
   1237c:	0e 94 37 33 	call	0x666e	; 0x666e <MATCHI>
   12380:	89 2b       	or	r24, r25
				{
					printf("Port latch B RD:[%02XH]\n",  0xff & GPIO_PORT_LATCH_RD(PORTB) );
   12382:	59 f0       	breq	.+22     	; 0x1239a <gpib_tests+0x32c>
   12384:	e5 b1       	in	r30, 0x05	; 5
   12386:	83 e0       	ldi	r24, 0x03	; 3
   12388:	e8 9f       	mul	r30, r24
   1238a:	f0 01       	movw	r30, r0
   1238c:	11 24       	eor	r1, r1
   1238e:	82 a1       	ldd	r24, Z+34	; 0x22
   12390:	1f 92       	push	r1
   12392:	8f 93       	push	r24
   12394:	8a e1       	ldi	r24, 0x1A	; 26
   12396:	95 e1       	ldi	r25, 0x15	; 21
					return (1);
				}
				if( MATCHI(argv[ind+2],"C"))
   12398:	7a c0       	rjmp	.+244    	; 0x1248e <gpib_tests+0x420>
   1239a:	6f ec       	ldi	r22, 0xCF	; 207
   1239c:	7c e0       	ldi	r23, 0x0C	; 12
   1239e:	88 85       	ldd	r24, Y+8	; 0x08
   123a0:	99 85       	ldd	r25, Y+9	; 0x09
   123a2:	0e 94 37 33 	call	0x666e	; 0x666e <MATCHI>
   123a6:	89 2b       	or	r24, r25
				{
					printf("Port latch C RD:[%02XH]\n",  0xff & GPIO_PORT_LATCH_RD(PORTC) );
   123a8:	59 f0       	breq	.+22     	; 0x123c0 <gpib_tests+0x352>
   123aa:	e8 b1       	in	r30, 0x08	; 8
   123ac:	83 e0       	ldi	r24, 0x03	; 3
   123ae:	e8 9f       	mul	r30, r24
   123b0:	f0 01       	movw	r30, r0
   123b2:	11 24       	eor	r1, r1
   123b4:	82 a1       	ldd	r24, Z+34	; 0x22
   123b6:	1f 92       	push	r1
   123b8:	8f 93       	push	r24
   123ba:	81 e0       	ldi	r24, 0x01	; 1
   123bc:	95 e1       	ldi	r25, 0x15	; 21
					return (1);
				}
				if( MATCHI(argv[ind+2],"D"))
   123be:	67 c0       	rjmp	.+206    	; 0x1248e <gpib_tests+0x420>
   123c0:	63 e5       	ldi	r22, 0x53	; 83
   123c2:	77 e0       	ldi	r23, 0x07	; 7
   123c4:	88 85       	ldd	r24, Y+8	; 0x08
   123c6:	99 85       	ldd	r25, Y+9	; 0x09
   123c8:	0e 94 37 33 	call	0x666e	; 0x666e <MATCHI>
   123cc:	89 2b       	or	r24, r25
				{
					printf("Port latch D RD:[%02XH]\n",  0xff & GPIO_PORT_LATCH_RD(PORTD) );
   123ce:	59 f0       	breq	.+22     	; 0x123e6 <gpib_tests+0x378>
   123d0:	eb b1       	in	r30, 0x0b	; 11
   123d2:	83 e0       	ldi	r24, 0x03	; 3
   123d4:	e8 9f       	mul	r30, r24
   123d6:	f0 01       	movw	r30, r0
   123d8:	11 24       	eor	r1, r1
   123da:	82 a1       	ldd	r24, Z+34	; 0x22
   123dc:	1f 92       	push	r1
   123de:	8f 93       	push	r24
   123e0:	88 ee       	ldi	r24, 0xE8	; 232
   123e2:	94 e1       	ldi	r25, 0x14	; 20
					return (1);
				}
			}
			if( MATCHI(argv[ind+1],"ddr") )
   123e4:	54 c0       	rjmp	.+168    	; 0x1248e <gpib_tests+0x420>
   123e6:	6e ea       	ldi	r22, 0xAE	; 174
   123e8:	7d e0       	ldi	r23, 0x0D	; 13
   123ea:	8e 81       	ldd	r24, Y+6	; 0x06
   123ec:	9f 81       	ldd	r25, Y+7	; 0x07
   123ee:	0e 94 37 33 	call	0x666e	; 0x666e <MATCHI>
   123f2:	89 2b       	or	r24, r25
   123f4:	09 f4       	brne	.+2      	; 0x123f8 <gpib_tests+0x38a>
			{   
				if( MATCHI(argv[ind+2],"A"))
   123f6:	56 c0       	rjmp	.+172    	; 0x124a4 <gpib_tests+0x436>
   123f8:	6b ee       	ldi	r22, 0xEB	; 235
   123fa:	7d e0       	ldi	r23, 0x0D	; 13
   123fc:	88 85       	ldd	r24, Y+8	; 0x08
   123fe:	99 85       	ldd	r25, Y+9	; 0x09
   12400:	0e 94 37 33 	call	0x666e	; 0x666e <MATCHI>
   12404:	89 2b       	or	r24, r25
				{
					printf("Port ddr A RD:[%02XH]\n",  0xff & GPIO_PORT_DDR_RD(PORTA) );
   12406:	59 f0       	breq	.+22     	; 0x1241e <gpib_tests+0x3b0>
   12408:	e2 b1       	in	r30, 0x02	; 2
   1240a:	83 e0       	ldi	r24, 0x03	; 3
   1240c:	e8 9f       	mul	r30, r24
   1240e:	f0 01       	movw	r30, r0
   12410:	11 24       	eor	r1, r1
   12412:	81 a1       	ldd	r24, Z+33	; 0x21
   12414:	1f 92       	push	r1
   12416:	8f 93       	push	r24
   12418:	81 ed       	ldi	r24, 0xD1	; 209
   1241a:	94 e1       	ldi	r25, 0x14	; 20
					return (1);
				}
				if( MATCHI(argv[ind+2],"B"))
   1241c:	38 c0       	rjmp	.+112    	; 0x1248e <gpib_tests+0x420>
   1241e:	66 ea       	ldi	r22, 0xA6	; 166
   12420:	7d e0       	ldi	r23, 0x0D	; 13
   12422:	88 85       	ldd	r24, Y+8	; 0x08
   12424:	99 85       	ldd	r25, Y+9	; 0x09
   12426:	0e 94 37 33 	call	0x666e	; 0x666e <MATCHI>
   1242a:	89 2b       	or	r24, r25
				{
					printf("Port ddr B RD:[%02XH]\n",  0xff & GPIO_PORT_DDR_RD(PORTB) );
   1242c:	59 f0       	breq	.+22     	; 0x12444 <gpib_tests+0x3d6>
   1242e:	e5 b1       	in	r30, 0x05	; 5
   12430:	83 e0       	ldi	r24, 0x03	; 3
   12432:	e8 9f       	mul	r30, r24
   12434:	f0 01       	movw	r30, r0
   12436:	11 24       	eor	r1, r1
   12438:	81 a1       	ldd	r24, Z+33	; 0x21
   1243a:	1f 92       	push	r1
   1243c:	8f 93       	push	r24
   1243e:	8a eb       	ldi	r24, 0xBA	; 186
   12440:	94 e1       	ldi	r25, 0x14	; 20
					return (1);
				}
				if( MATCHI(argv[ind+2],"C"))
   12442:	25 c0       	rjmp	.+74     	; 0x1248e <gpib_tests+0x420>
   12444:	6f ec       	ldi	r22, 0xCF	; 207
   12446:	7c e0       	ldi	r23, 0x0C	; 12
   12448:	88 85       	ldd	r24, Y+8	; 0x08
   1244a:	99 85       	ldd	r25, Y+9	; 0x09
   1244c:	0e 94 37 33 	call	0x666e	; 0x666e <MATCHI>
   12450:	89 2b       	or	r24, r25
				{
					printf("Port ddr C RD:[%02XH]\n",  0xff & GPIO_PORT_DDR_RD(PORTC) );
   12452:	59 f0       	breq	.+22     	; 0x1246a <gpib_tests+0x3fc>
   12454:	e8 b1       	in	r30, 0x08	; 8
   12456:	83 e0       	ldi	r24, 0x03	; 3
   12458:	e8 9f       	mul	r30, r24
   1245a:	f0 01       	movw	r30, r0
   1245c:	11 24       	eor	r1, r1
   1245e:	81 a1       	ldd	r24, Z+33	; 0x21
   12460:	1f 92       	push	r1
   12462:	8f 93       	push	r24
   12464:	83 ea       	ldi	r24, 0xA3	; 163
   12466:	94 e1       	ldi	r25, 0x14	; 20
					return (1);
				}
				if( MATCHI(argv[ind+2],"D"))
   12468:	12 c0       	rjmp	.+36     	; 0x1248e <gpib_tests+0x420>
   1246a:	63 e5       	ldi	r22, 0x53	; 83
   1246c:	77 e0       	ldi	r23, 0x07	; 7
   1246e:	88 85       	ldd	r24, Y+8	; 0x08
   12470:	99 85       	ldd	r25, Y+9	; 0x09
   12472:	0e 94 37 33 	call	0x666e	; 0x666e <MATCHI>
   12476:	89 2b       	or	r24, r25
				{
					printf("Port ddr D RD:[%02XH]\n",  0xff & GPIO_PORT_DDR_RD(PORTD) );
   12478:	a9 f0       	breq	.+42     	; 0x124a4 <gpib_tests+0x436>
   1247a:	eb b1       	in	r30, 0x0b	; 11
   1247c:	83 e0       	ldi	r24, 0x03	; 3
   1247e:	e8 9f       	mul	r30, r24
   12480:	f0 01       	movw	r30, r0
   12482:	11 24       	eor	r1, r1
   12484:	81 a1       	ldd	r24, Z+33	; 0x21
   12486:	1f 92       	push	r1
   12488:	8f 93       	push	r24
   1248a:	8c e8       	ldi	r24, 0x8C	; 140
   1248c:	94 e1       	ldi	r25, 0x14	; 20
   1248e:	1f 92       	push	r1
   12490:	9f 93       	push	r25
   12492:	8f 93       	push	r24
   12494:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
					return (1);
   12498:	0f 90       	pop	r0
   1249a:	0f 90       	pop	r0
   1249c:	0f 90       	pop	r0
   1249e:	0f 90       	pop	r0
   124a0:	0f 90       	pop	r0
			}
		}
	} // port read 

	// port write
    if (MATCHARGS(ptr,"port",(ind+4),argc))
   124a2:	d7 c0       	rjmp	.+430    	; 0x12652 <gpib_tests+0x5e4>
   124a4:	97 01       	movw	r18, r14
   124a6:	46 e0       	ldi	r20, 0x06	; 6
   124a8:	50 e0       	ldi	r21, 0x00	; 0
   124aa:	67 e9       	ldi	r22, 0x97	; 151
   124ac:	7d e0       	ldi	r23, 0x0D	; 13
   124ae:	c8 01       	movw	r24, r16
   124b0:	0e 94 08 33 	call	0x6610	; 0x6610 <MATCHARGS>
   124b4:	89 2b       	or	r24, r25
   124b6:	09 f4       	brne	.+2      	; 0x124ba <gpib_tests+0x44c>
    {
		if( MATCHI(argv[ind],"write") )
   124b8:	e6 cd       	rjmp	.-1076   	; 0x12086 <gpib_tests+0x18>
   124ba:	69 e4       	ldi	r22, 0x49	; 73
   124bc:	75 e1       	ldi	r23, 0x15	; 21
   124be:	8c 81       	ldd	r24, Y+4	; 0x04
   124c0:	9d 81       	ldd	r25, Y+5	; 0x05
   124c2:	0e 94 37 33 	call	0x666e	; 0x666e <MATCHI>
   124c6:	89 2b       	or	r24, r25
   124c8:	09 f4       	brne	.+2      	; 0x124cc <gpib_tests+0x45e>
		{
			uint8_t val;
			if( MATCHI(argv[ind+1],"pins") )
   124ca:	dd cd       	rjmp	.-1094   	; 0x12086 <gpib_tests+0x18>
   124cc:	61 ea       	ldi	r22, 0xA1	; 161
   124ce:	7d e0       	ldi	r23, 0x0D	; 13
   124d0:	8e 81       	ldd	r24, Y+6	; 0x06
   124d2:	9f 81       	ldd	r25, Y+7	; 0x07
   124d4:	0e 94 37 33 	call	0x666e	; 0x666e <MATCHI>
   124d8:	89 2b       	or	r24, r25
   124da:	09 f4       	brne	.+2      	; 0x124de <gpib_tests+0x470>
			{   
				val = get_value(argv[ind+3]);
   124dc:	45 c0       	rjmp	.+138    	; 0x12568 <gpib_tests+0x4fa>
   124de:	8a 85       	ldd	r24, Y+10	; 0x0a
   124e0:	9b 85       	ldd	r25, Y+11	; 0x0b
   124e2:	0e 94 36 34 	call	0x686c	; 0x686c <get_value>

				if( MATCHI(argv[ind+2],"A"))
   124e6:	16 2f       	mov	r17, r22
   124e8:	6b ee       	ldi	r22, 0xEB	; 235
   124ea:	7d e0       	ldi	r23, 0x0D	; 13
   124ec:	88 85       	ldd	r24, Y+8	; 0x08
   124ee:	99 85       	ldd	r25, Y+9	; 0x09
   124f0:	0e 94 37 33 	call	0x666e	; 0x666e <MATCHI>
   124f4:	89 2b       	or	r24, r25
				{
					GPIO_PORT_WR(PORTA,val);
   124f6:	41 f0       	breq	.+16     	; 0x12508 <gpib_tests+0x49a>
   124f8:	e2 b1       	in	r30, 0x02	; 2
   124fa:	83 e0       	ldi	r24, 0x03	; 3
   124fc:	e8 9f       	mul	r30, r24
   124fe:	f0 01       	movw	r30, r0
   12500:	11 24       	eor	r1, r1
   12502:	8f ef       	ldi	r24, 0xFF	; 255
   12504:	81 a3       	std	Z+33, r24	; 0x21
					return (1);
				}
				if( MATCHI(argv[ind+2],"B"))
   12506:	45 c0       	rjmp	.+138    	; 0x12592 <gpib_tests+0x524>
   12508:	66 ea       	ldi	r22, 0xA6	; 166
   1250a:	7d e0       	ldi	r23, 0x0D	; 13
   1250c:	88 85       	ldd	r24, Y+8	; 0x08
   1250e:	99 85       	ldd	r25, Y+9	; 0x09
   12510:	0e 94 37 33 	call	0x666e	; 0x666e <MATCHI>
   12514:	89 2b       	or	r24, r25
				{
					GPIO_PORT_WR(PORTB,val);
   12516:	41 f0       	breq	.+16     	; 0x12528 <gpib_tests+0x4ba>
   12518:	e5 b1       	in	r30, 0x05	; 5
   1251a:	83 e0       	ldi	r24, 0x03	; 3
   1251c:	e8 9f       	mul	r30, r24
   1251e:	f0 01       	movw	r30, r0
   12520:	11 24       	eor	r1, r1
   12522:	8f ef       	ldi	r24, 0xFF	; 255
   12524:	81 a3       	std	Z+33, r24	; 0x21
					return (1);
				}
				if( MATCHI(argv[ind+2],"C"))
   12526:	3f c0       	rjmp	.+126    	; 0x125a6 <gpib_tests+0x538>
   12528:	6f ec       	ldi	r22, 0xCF	; 207
   1252a:	7c e0       	ldi	r23, 0x0C	; 12
   1252c:	88 85       	ldd	r24, Y+8	; 0x08
   1252e:	99 85       	ldd	r25, Y+9	; 0x09
   12530:	0e 94 37 33 	call	0x666e	; 0x666e <MATCHI>
   12534:	89 2b       	or	r24, r25
				{
					GPIO_PORT_WR(PORTC,val);
   12536:	41 f0       	breq	.+16     	; 0x12548 <gpib_tests+0x4da>
   12538:	e8 b1       	in	r30, 0x08	; 8
   1253a:	83 e0       	ldi	r24, 0x03	; 3
   1253c:	e8 9f       	mul	r30, r24
   1253e:	f0 01       	movw	r30, r0
   12540:	11 24       	eor	r1, r1
   12542:	8f ef       	ldi	r24, 0xFF	; 255
   12544:	81 a3       	std	Z+33, r24	; 0x21
					return (1);
				}
				if( MATCHI(argv[ind+2],"D"))
   12546:	39 c0       	rjmp	.+114    	; 0x125ba <gpib_tests+0x54c>
   12548:	63 e5       	ldi	r22, 0x53	; 83
   1254a:	77 e0       	ldi	r23, 0x07	; 7
   1254c:	88 85       	ldd	r24, Y+8	; 0x08
   1254e:	99 85       	ldd	r25, Y+9	; 0x09
   12550:	0e 94 37 33 	call	0x666e	; 0x666e <MATCHI>
   12554:	89 2b       	or	r24, r25
				{
					GPIO_PORT_WR(PORTD,val);
   12556:	41 f0       	breq	.+16     	; 0x12568 <gpib_tests+0x4fa>
   12558:	eb b1       	in	r30, 0x0b	; 11
   1255a:	83 e0       	ldi	r24, 0x03	; 3
   1255c:	e8 9f       	mul	r30, r24
   1255e:	f0 01       	movw	r30, r0
   12560:	11 24       	eor	r1, r1
   12562:	8f ef       	ldi	r24, 0xFF	; 255
   12564:	81 a3       	std	Z+33, r24	; 0x21
					return (1);
				}
			}
			if( MATCHI(argv[ind+1],"latch") )
   12566:	33 c0       	rjmp	.+102    	; 0x125ce <gpib_tests+0x560>
   12568:	68 ea       	ldi	r22, 0xA8	; 168
   1256a:	7d e0       	ldi	r23, 0x0D	; 13
   1256c:	8e 81       	ldd	r24, Y+6	; 0x06
   1256e:	9f 81       	ldd	r25, Y+7	; 0x07
   12570:	0e 94 37 33 	call	0x666e	; 0x666e <MATCHI>
   12574:	89 2b       	or	r24, r25
			{   

				val = get_value(argv[ind+3]);
   12576:	91 f1       	breq	.+100    	; 0x125dc <gpib_tests+0x56e>
   12578:	8a 85       	ldd	r24, Y+10	; 0x0a
   1257a:	9b 85       	ldd	r25, Y+11	; 0x0b
   1257c:	0e 94 36 34 	call	0x686c	; 0x686c <get_value>

				if( MATCHI(argv[ind+2],"A"))
   12580:	16 2f       	mov	r17, r22
   12582:	6b ee       	ldi	r22, 0xEB	; 235
   12584:	7d e0       	ldi	r23, 0x0D	; 13
   12586:	88 85       	ldd	r24, Y+8	; 0x08
   12588:	99 85       	ldd	r25, Y+9	; 0x09
   1258a:	0e 94 37 33 	call	0x666e	; 0x666e <MATCHI>
   1258e:	89 2b       	or	r24, r25
				{
					GPIO_PORT_LATCH_WR(PORTA,val);
   12590:	11 f0       	breq	.+4      	; 0x12596 <gpib_tests+0x528>
   12592:	e2 b1       	in	r30, 0x02	; 2
					return (1);
				}
				if( MATCHI(argv[ind+2],"B"))
   12594:	1d c0       	rjmp	.+58     	; 0x125d0 <gpib_tests+0x562>
   12596:	66 ea       	ldi	r22, 0xA6	; 166
   12598:	7d e0       	ldi	r23, 0x0D	; 13
   1259a:	88 85       	ldd	r24, Y+8	; 0x08
   1259c:	99 85       	ldd	r25, Y+9	; 0x09
   1259e:	0e 94 37 33 	call	0x666e	; 0x666e <MATCHI>
   125a2:	89 2b       	or	r24, r25
				{
					GPIO_PORT_LATCH_WR(PORTB,val);
   125a4:	11 f0       	breq	.+4      	; 0x125aa <gpib_tests+0x53c>
   125a6:	e5 b1       	in	r30, 0x05	; 5
					return (1);
				}
				if( MATCHI(argv[ind+2],"C"))
   125a8:	13 c0       	rjmp	.+38     	; 0x125d0 <gpib_tests+0x562>
   125aa:	6f ec       	ldi	r22, 0xCF	; 207
   125ac:	7c e0       	ldi	r23, 0x0C	; 12
   125ae:	88 85       	ldd	r24, Y+8	; 0x08
   125b0:	99 85       	ldd	r25, Y+9	; 0x09
   125b2:	0e 94 37 33 	call	0x666e	; 0x666e <MATCHI>
   125b6:	89 2b       	or	r24, r25
				{
					GPIO_PORT_LATCH_WR(PORTC,val);
   125b8:	11 f0       	breq	.+4      	; 0x125be <gpib_tests+0x550>
   125ba:	e8 b1       	in	r30, 0x08	; 8
					return (1);
				}
				if( MATCHI(argv[ind+2],"D"))
   125bc:	09 c0       	rjmp	.+18     	; 0x125d0 <gpib_tests+0x562>
   125be:	63 e5       	ldi	r22, 0x53	; 83
   125c0:	77 e0       	ldi	r23, 0x07	; 7
   125c2:	88 85       	ldd	r24, Y+8	; 0x08
   125c4:	99 85       	ldd	r25, Y+9	; 0x09
   125c6:	0e 94 37 33 	call	0x666e	; 0x666e <MATCHI>
   125ca:	89 2b       	or	r24, r25
				{
					GPIO_PORT_LATCH_WR(PORTD,val);
   125cc:	39 f0       	breq	.+14     	; 0x125dc <gpib_tests+0x56e>
   125ce:	eb b1       	in	r30, 0x0b	; 11
   125d0:	83 e0       	ldi	r24, 0x03	; 3
   125d2:	e8 9f       	mul	r30, r24
   125d4:	f0 01       	movw	r30, r0
   125d6:	11 24       	eor	r1, r1
   125d8:	12 a3       	std	Z+34, r17	; 0x22
					return (1);
				}
			}
			if( MATCHI(argv[ind+1],"ddr") )
   125da:	3b c0       	rjmp	.+118    	; 0x12652 <gpib_tests+0x5e4>
   125dc:	6e ea       	ldi	r22, 0xAE	; 174
   125de:	7d e0       	ldi	r23, 0x0D	; 13
   125e0:	8e 81       	ldd	r24, Y+6	; 0x06
   125e2:	9f 81       	ldd	r25, Y+7	; 0x07
   125e4:	0e 94 37 33 	call	0x666e	; 0x666e <MATCHI>
   125e8:	89 2b       	or	r24, r25
   125ea:	09 f4       	brne	.+2      	; 0x125ee <gpib_tests+0x580>
			{   

				val = get_value(argv[ind+3]);
   125ec:	4c cd       	rjmp	.-1384   	; 0x12086 <gpib_tests+0x18>
   125ee:	8a 85       	ldd	r24, Y+10	; 0x0a
   125f0:	9b 85       	ldd	r25, Y+11	; 0x0b
   125f2:	0e 94 36 34 	call	0x686c	; 0x686c <get_value>

				if( MATCHI(argv[ind+2],"A"))
   125f6:	16 2f       	mov	r17, r22
   125f8:	6b ee       	ldi	r22, 0xEB	; 235
   125fa:	7d e0       	ldi	r23, 0x0D	; 13
   125fc:	88 85       	ldd	r24, Y+8	; 0x08
   125fe:	99 85       	ldd	r25, Y+9	; 0x09
   12600:	0e 94 37 33 	call	0x666e	; 0x666e <MATCHI>
   12604:	89 2b       	or	r24, r25
				{
					GPIO_PORT_DDR_WR(PORTA,val);
   12606:	11 f0       	breq	.+4      	; 0x1260c <gpib_tests+0x59e>
   12608:	e2 b1       	in	r30, 0x02	; 2
					return (1);
				}
				if( MATCHI(argv[ind+2],"B"))
   1260a:	1e c0       	rjmp	.+60     	; 0x12648 <gpib_tests+0x5da>
   1260c:	66 ea       	ldi	r22, 0xA6	; 166
   1260e:	7d e0       	ldi	r23, 0x0D	; 13
   12610:	88 85       	ldd	r24, Y+8	; 0x08
   12612:	99 85       	ldd	r25, Y+9	; 0x09
   12614:	0e 94 37 33 	call	0x666e	; 0x666e <MATCHI>
   12618:	89 2b       	or	r24, r25
				{
					GPIO_PORT_DDR_WR(PORTB,val);
   1261a:	11 f0       	breq	.+4      	; 0x12620 <gpib_tests+0x5b2>
   1261c:	e5 b1       	in	r30, 0x05	; 5
					return (1);
				}
				if( MATCHI(argv[ind+2],"C"))
   1261e:	14 c0       	rjmp	.+40     	; 0x12648 <gpib_tests+0x5da>
   12620:	6f ec       	ldi	r22, 0xCF	; 207
   12622:	7c e0       	ldi	r23, 0x0C	; 12
   12624:	88 85       	ldd	r24, Y+8	; 0x08
   12626:	99 85       	ldd	r25, Y+9	; 0x09
   12628:	0e 94 37 33 	call	0x666e	; 0x666e <MATCHI>
   1262c:	89 2b       	or	r24, r25
				{
					GPIO_PORT_DDR_WR(PORTC,val);
   1262e:	11 f0       	breq	.+4      	; 0x12634 <gpib_tests+0x5c6>
   12630:	e8 b1       	in	r30, 0x08	; 8
					return (1);
				}
				if( MATCHI(argv[ind+2],"D"))
   12632:	0a c0       	rjmp	.+20     	; 0x12648 <gpib_tests+0x5da>
   12634:	63 e5       	ldi	r22, 0x53	; 83
   12636:	77 e0       	ldi	r23, 0x07	; 7
   12638:	88 85       	ldd	r24, Y+8	; 0x08
   1263a:	99 85       	ldd	r25, Y+9	; 0x09
   1263c:	0e 94 37 33 	call	0x666e	; 0x666e <MATCHI>
   12640:	89 2b       	or	r24, r25
   12642:	09 f4       	brne	.+2      	; 0x12646 <gpib_tests+0x5d8>
				{
					GPIO_PORT_DDR_WR(PORTD,val);
   12644:	20 cd       	rjmp	.-1472   	; 0x12086 <gpib_tests+0x18>
   12646:	eb b1       	in	r30, 0x0b	; 11
   12648:	83 e0       	ldi	r24, 0x03	; 3
   1264a:	e8 9f       	mul	r30, r24
   1264c:	f0 01       	movw	r30, r0
   1264e:	11 24       	eor	r1, r1
					return (1);
   12650:	11 a3       	std	Z+33, r17	; 0x21
   12652:	81 e0       	ldi	r24, 0x01	; 1
		}

	} // port write 

    return(0);
}
   12654:	90 e0       	ldi	r25, 0x00	; 0
   12656:	cd b7       	in	r28, 0x3d	; 61
   12658:	de b7       	in	r29, 0x3e	; 62
   1265a:	e6 e0       	ldi	r30, 0x06	; 6
   1265c:	0c 94 3b e8 	jmp	0x1d076	; 0x1d076 <__epilogue_restores__+0x18>

00012660 <V2B_MSB>:
   12660:	0f 93       	push	r16
   12662:	1f 93       	push	r17
   12664:	da 01       	movw	r26, r20
   12666:	11 97       	sbiw	r26, 0x01	; 1
   12668:	b7 fd       	sbrc	r27, 7
   1266a:	0b c0       	rjmp	.+22     	; 0x12682 <V2B_MSB+0x22>
   1266c:	fd 01       	movw	r30, r26
   1266e:	e6 0f       	add	r30, r22
   12670:	f7 1f       	adc	r31, r23
   12672:	e8 0f       	add	r30, r24
   12674:	f9 1f       	adc	r31, r25
   12676:	00 83       	st	Z, r16
   12678:	01 2f       	mov	r16, r17
   1267a:	12 2f       	mov	r17, r18
   1267c:	23 2f       	mov	r18, r19
   1267e:	33 27       	eor	r19, r19
   12680:	f2 cf       	rjmp	.-28     	; 0x12666 <V2B_MSB+0x6>
   12682:	1f 91       	pop	r17
   12684:	0f 91       	pop	r16
   12686:	08 95       	ret

00012688 <V2B_LSB>:
   12688:	0f 93       	push	r16
   1268a:	1f 93       	push	r17
   1268c:	fc 01       	movw	r30, r24
   1268e:	e6 0f       	add	r30, r22
   12690:	f7 1f       	adc	r31, r23
   12692:	bf 01       	movw	r22, r30
   12694:	cf 01       	movw	r24, r30
   12696:	86 1b       	sub	r24, r22
   12698:	97 0b       	sbc	r25, r23
   1269a:	84 17       	cp	r24, r20
   1269c:	95 07       	cpc	r25, r21
   1269e:	34 f4       	brge	.+12     	; 0x126ac <V2B_LSB+0x24>
   126a0:	01 93       	st	Z+, r16
   126a2:	01 2f       	mov	r16, r17
   126a4:	12 2f       	mov	r17, r18
   126a6:	23 2f       	mov	r18, r19
   126a8:	33 27       	eor	r19, r19
   126aa:	f4 cf       	rjmp	.-24     	; 0x12694 <V2B_LSB+0xc>
   126ac:	1f 91       	pop	r17
   126ae:	0f 91       	pop	r16
   126b0:	08 95       	ret

000126b2 <B2V_MSB>:
   126b2:	cf 92       	push	r12
   126b4:	df 92       	push	r13
   126b6:	ef 92       	push	r14
   126b8:	ff 92       	push	r15
   126ba:	fc 01       	movw	r30, r24
   126bc:	e6 0f       	add	r30, r22
   126be:	f7 1f       	adc	r31, r23
   126c0:	60 e0       	ldi	r22, 0x00	; 0
   126c2:	70 e0       	ldi	r23, 0x00	; 0
   126c4:	cb 01       	movw	r24, r22
   126c6:	df 01       	movw	r26, r30
   126c8:	9f 01       	movw	r18, r30
   126ca:	2a 1b       	sub	r18, r26
   126cc:	3b 0b       	sbc	r19, r27
   126ce:	24 17       	cp	r18, r20
   126d0:	35 07       	cpc	r19, r21
   126d2:	4c f4       	brge	.+18     	; 0x126e6 <B2V_MSB+0x34>
   126d4:	cc 24       	eor	r12, r12
   126d6:	d6 2e       	mov	r13, r22
   126d8:	e7 2e       	mov	r14, r23
   126da:	f8 2e       	mov	r15, r24
   126dc:	21 91       	ld	r18, Z+
   126de:	c7 01       	movw	r24, r14
   126e0:	b6 01       	movw	r22, r12
   126e2:	62 2b       	or	r22, r18
   126e4:	f1 cf       	rjmp	.-30     	; 0x126c8 <B2V_MSB+0x16>
   126e6:	ff 90       	pop	r15
   126e8:	ef 90       	pop	r14
   126ea:	df 90       	pop	r13
   126ec:	cf 90       	pop	r12
   126ee:	08 95       	ret

000126f0 <B2V_LSB>:
   126f0:	cf 92       	push	r12
   126f2:	df 92       	push	r13
   126f4:	ef 92       	push	r14
   126f6:	ff 92       	push	r15
   126f8:	9c 01       	movw	r18, r24
   126fa:	db 01       	movw	r26, r22
   126fc:	60 e0       	ldi	r22, 0x00	; 0
   126fe:	70 e0       	ldi	r23, 0x00	; 0
   12700:	cb 01       	movw	r24, r22
   12702:	41 50       	subi	r20, 0x01	; 1
   12704:	51 09       	sbc	r21, r1
   12706:	57 fd       	sbrc	r21, 7
   12708:	0e c0       	rjmp	.+28     	; 0x12726 <B2V_LSB+0x36>
   1270a:	cc 24       	eor	r12, r12
   1270c:	d6 2e       	mov	r13, r22
   1270e:	e7 2e       	mov	r14, r23
   12710:	f8 2e       	mov	r15, r24
   12712:	fa 01       	movw	r30, r20
   12714:	ea 0f       	add	r30, r26
   12716:	fb 1f       	adc	r31, r27
   12718:	e2 0f       	add	r30, r18
   1271a:	f3 1f       	adc	r31, r19
   1271c:	e0 81       	ld	r30, Z
   1271e:	c7 01       	movw	r24, r14
   12720:	b6 01       	movw	r22, r12
   12722:	6e 2b       	or	r22, r30
   12724:	ee cf       	rjmp	.-36     	; 0x12702 <B2V_LSB+0x12>
   12726:	ff 90       	pop	r15
   12728:	ef 90       	pop	r14
   1272a:	df 90       	pop	r13
   1272c:	cf 90       	pop	r12
   1272e:	08 95       	ret

00012730 <find_type>:
   12730:	e3 e0       	ldi	r30, 0x03	; 3
   12732:	ff e1       	ldi	r31, 0x1F	; 31
   12734:	20 e0       	ldi	r18, 0x00	; 0
   12736:	30 e0       	ldi	r19, 0x00	; 0
   12738:	40 81       	ld	r20, Z
   1273a:	50 e0       	ldi	r21, 0x00	; 0
   1273c:	48 17       	cp	r20, r24
   1273e:	59 07       	cpc	r21, r25
   12740:	49 f0       	breq	.+18     	; 0x12754 <find_type+0x24>
   12742:	2f 5f       	subi	r18, 0xFF	; 255
   12744:	3f 4f       	sbci	r19, 0xFF	; 255
   12746:	bb 96       	adiw	r30, 0x2b	; 43
   12748:	2c 30       	cpi	r18, 0x0C	; 12
   1274a:	31 05       	cpc	r19, r1
   1274c:	a9 f7       	brne	.-22     	; 0x12738 <find_type+0x8>
   1274e:	8f ef       	ldi	r24, 0xFF	; 255
   12750:	9f ef       	ldi	r25, 0xFF	; 255
   12752:	08 95       	ret
   12754:	c9 01       	movw	r24, r18
   12756:	08 95       	ret

00012758 <count_drive_types>:
   12758:	28 2f       	mov	r18, r24
   1275a:	e3 e0       	ldi	r30, 0x03	; 3
   1275c:	ff e1       	ldi	r31, 0x1F	; 31
   1275e:	80 e0       	ldi	r24, 0x00	; 0
   12760:	90 e0       	ldi	r25, 0x00	; 0
   12762:	30 81       	ld	r19, Z
   12764:	32 13       	cpse	r19, r18
   12766:	01 c0       	rjmp	.+2      	; 0x1276a <count_drive_types+0x12>
   12768:	01 96       	adiw	r24, 0x01	; 1
   1276a:	bb 96       	adiw	r30, 0x2b	; 43
   1276c:	31 e2       	ldi	r19, 0x21	; 33
   1276e:	e7 30       	cpi	r30, 0x07	; 7
   12770:	f3 07       	cpc	r31, r19
   12772:	b9 f7       	brne	.-18     	; 0x12762 <count_drive_types+0xa>
   12774:	08 95       	ret

00012776 <type_to_str>:
   12776:	00 97       	sbiw	r24, 0x00	; 0
   12778:	59 f0       	breq	.+22     	; 0x12790 <type_to_str+0x1a>
   1277a:	81 30       	cpi	r24, 0x01	; 1
   1277c:	91 05       	cpc	r25, r1
   1277e:	59 f0       	breq	.+22     	; 0x12796 <type_to_str+0x20>
   12780:	83 30       	cpi	r24, 0x03	; 3
   12782:	91 05       	cpc	r25, r1
   12784:	59 f0       	breq	.+22     	; 0x1279c <type_to_str+0x26>
   12786:	04 97       	sbiw	r24, 0x04	; 4
   12788:	61 f0       	breq	.+24     	; 0x127a2 <type_to_str+0x2c>
   1278a:	8c ed       	ldi	r24, 0xDC	; 220
   1278c:	9d e0       	ldi	r25, 0x0D	; 13
   1278e:	08 95       	ret
   12790:	82 eb       	ldi	r24, 0xB2	; 178
   12792:	9d e0       	ldi	r25, 0x0D	; 13
   12794:	08 95       	ret
   12796:	8a eb       	ldi	r24, 0xBA	; 186
   12798:	9d e0       	ldi	r25, 0x0D	; 13
   1279a:	08 95       	ret
   1279c:	82 ed       	ldi	r24, 0xD2	; 210
   1279e:	9d e0       	ldi	r25, 0x0D	; 13
   127a0:	08 95       	ret
   127a2:	85 ec       	ldi	r24, 0xC5	; 197
   127a4:	9d e0       	ldi	r25, 0x0D	; 13
   127a6:	08 95       	ret

000127a8 <find_free>:
   127a8:	80 e0       	ldi	r24, 0x00	; 0
   127aa:	90 e0       	ldi	r25, 0x00	; 0
   127ac:	c1 cf       	rjmp	.-126    	; 0x12730 <find_type>
   127ae:	08 95       	ret

000127b0 <find_device>:
int find_device(int type, int address, int base)
{
    int i;

    ///@skip Only interested in device addresses
    if(address < BASE_MLA || address >(BASE_MSA+30))
   127b0:	9b 01       	movw	r18, r22
   127b2:	20 52       	subi	r18, 0x20	; 32
   127b4:	31 09       	sbc	r19, r1
   127b6:	2f 35       	cpi	r18, 0x5F	; 95
   127b8:	31 05       	cpc	r19, r1
   127ba:	f8 f4       	brcc	.+62     	; 0x127fa <find_device+0x4a>
        return(-1);

    ///@brief Make sure address is in expected range
    if(address < base || address > (base+30))
   127bc:	64 17       	cp	r22, r20
   127be:	75 07       	cpc	r23, r21
   127c0:	e4 f0       	brlt	.+56     	; 0x127fa <find_device+0x4a>
   127c2:	9a 01       	movw	r18, r20
   127c4:	22 5e       	subi	r18, 0xE2	; 226
   127c6:	3f 4f       	sbci	r19, 0xFF	; 255
   127c8:	26 17       	cp	r18, r22
   127ca:	37 07       	cpc	r19, r23
   127cc:	b4 f0       	brlt	.+44     	; 0x127fa <find_device+0x4a>
        return(-1);

    ///@brief convert to device address
    address -= base;
   127ce:	64 1b       	sub	r22, r20
   127d0:	75 0b       	sbc	r23, r21
   127d2:	e3 e0       	ldi	r30, 0x03	; 3
   127d4:	ff e1       	ldi	r31, 0x1F	; 31

    ///@brief search for device address
    for(i=0;i<MAX_DEVICES;++i)
   127d6:	20 e0       	ldi	r18, 0x00	; 0
   127d8:	30 e0       	ldi	r19, 0x00	; 0
    {
        if(Devices[i].TYPE == type && Devices[i].ADDRESS == address)
   127da:	40 81       	ld	r20, Z
   127dc:	50 e0       	ldi	r21, 0x00	; 0
   127de:	48 17       	cp	r20, r24
   127e0:	59 07       	cpc	r21, r25
   127e2:	29 f4       	brne	.+10     	; 0x127ee <find_device+0x3e>
   127e4:	41 81       	ldd	r20, Z+1	; 0x01
   127e6:	50 e0       	ldi	r21, 0x00	; 0
   127e8:	64 17       	cp	r22, r20
   127ea:	75 07       	cpc	r23, r21
   127ec:	49 f0       	breq	.+18     	; 0x12800 <find_device+0x50>

    ///@brief convert to device address
    address -= base;

    ///@brief search for device address
    for(i=0;i<MAX_DEVICES;++i)
   127ee:	2f 5f       	subi	r18, 0xFF	; 255
   127f0:	3f 4f       	sbci	r19, 0xFF	; 255
   127f2:	bb 96       	adiw	r30, 0x2b	; 43
   127f4:	2c 30       	cpi	r18, 0x0C	; 12
   127f6:	31 05       	cpc	r19, r1
   127f8:	81 f7       	brne	.-32     	; 0x127da <find_device+0x2a>
{
    int i;

    ///@skip Only interested in device addresses
    if(address < BASE_MLA || address >(BASE_MSA+30))
        return(-1);
   127fa:	8f ef       	ldi	r24, 0xFF	; 255
   127fc:	9f ef       	ldi	r25, 0xFF	; 255
   127fe:	08 95       	ret
   12800:	c9 01       	movw	r24, r18
    {
        if(Devices[i].TYPE == type && Devices[i].ADDRESS == address)
            return(i);
    }
    return(-1);
}
   12802:	08 95       	ret

00012804 <set_active_device>:
/// Since we can be called multiple times per single GPIB state we do not
/// display state changes here. Other code displays the active state.
///@param index: Devices[] index
///@return 1 on success or 0 on fail
int set_active_device(int index)
{
   12804:	1f 93       	push	r17
   12806:	cf 93       	push	r28
   12808:	df 93       	push	r29
    int type,address;

    ///@brief We also check for -1 
    /// So the result of find_device() can be used without additional tests
    if(index == -1)
   1280a:	8f 3f       	cpi	r24, 0xFF	; 255
   1280c:	2f ef       	ldi	r18, 0xFF	; 255
   1280e:	92 07       	cpc	r25, r18
   12810:	09 f4       	brne	.+2      	; 0x12814 <set_active_device+0x10>
   12812:	fa c0       	rjmp	.+500    	; 0x12a08 <set_active_device+0x204>
   12814:	ec 01       	movw	r28, r24
    {
        return(0);
    }

    if(index < 0 || index >= MAX_DEVICES)
   12816:	0c 97       	sbiw	r24, 0x0c	; 12
   12818:	c0 f0       	brcs	.+48     	; 0x1284a <set_active_device+0x46>
    {
        if(debuglevel & 1)
   1281a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1281e:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   12822:	9c 01       	movw	r18, r24
   12824:	21 70       	andi	r18, 0x01	; 1
   12826:	33 27       	eor	r19, r19
   12828:	80 ff       	sbrs	r24, 0
   1282a:	f0 c0       	rjmp	.+480    	; 0x12a0c <set_active_device+0x208>
            printf("set_active_device:(%d) out of range\n", index);
   1282c:	df 93       	push	r29
   1282e:	cf 93       	push	r28
   12830:	8f ea       	ldi	r24, 0xAF	; 175
   12832:	90 e2       	ldi	r25, 0x20	; 32
   12834:	1f 92       	push	r1
   12836:	9f 93       	push	r25
   12838:	8f 93       	push	r24
   1283a:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1283e:	0f 90       	pop	r0
   12840:	0f 90       	pop	r0
   12842:	0f 90       	pop	r0
   12844:	0f 90       	pop	r0
   12846:	0f 90       	pop	r0
   12848:	df c0       	rjmp	.+446    	; 0x12a08 <set_active_device+0x204>
        return(0);
    }

    type = Devices[index].TYPE;
    address = Devices[index].ADDRESS;
   1284a:	8b e2       	ldi	r24, 0x2B	; 43
   1284c:	8c 9f       	mul	r24, r28
   1284e:	f0 01       	movw	r30, r0
   12850:	8d 9f       	mul	r24, r29
   12852:	f0 0d       	add	r31, r0
   12854:	11 24       	eor	r1, r1
   12856:	ed 5f       	subi	r30, 0xFD	; 253
   12858:	f0 4e       	sbci	r31, 0xE0	; 224
   1285a:	81 81       	ldd	r24, Z+1	; 0x01
    if(address < 0 || address > 30)
   1285c:	8f 31       	cpi	r24, 0x1F	; 31
   1285e:	e8 f0       	brcs	.+58     	; 0x1289a <set_active_device+0x96>
    {
        if(debuglevel & 1)
   12860:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <debuglevel>
   12864:	50 91 be 01 	lds	r21, 0x01BE	; 0x8001be <debuglevel+0x1>
   12868:	9a 01       	movw	r18, r20
   1286a:	21 70       	andi	r18, 0x01	; 1
   1286c:	33 27       	eor	r19, r19
   1286e:	40 ff       	sbrs	r20, 0
   12870:	cd c0       	rjmp	.+410    	; 0x12a0c <set_active_device+0x208>
            printf("set_active_device: index:%d address: %02XH out of range\n", index,address);
   12872:	1f 92       	push	r1
   12874:	8f 93       	push	r24
   12876:	df 93       	push	r29
   12878:	cf 93       	push	r28
   1287a:	86 e7       	ldi	r24, 0x76	; 118
   1287c:	90 e2       	ldi	r25, 0x20	; 32
   1287e:	1f 92       	push	r1
   12880:	9f 93       	push	r25
   12882:	8f 93       	push	r24
   12884:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   12888:	8d b7       	in	r24, 0x3d	; 61
   1288a:	9e b7       	in	r25, 0x3e	; 62
   1288c:	07 96       	adiw	r24, 0x07	; 7
   1288e:	0f b6       	in	r0, 0x3f	; 63
   12890:	f8 94       	cli
   12892:	9e bf       	out	0x3e, r25	; 62
   12894:	0f be       	out	0x3f, r0	; 63
   12896:	8d bf       	out	0x3d, r24	; 61
   12898:	b7 c0       	rjmp	.+366    	; 0x12a08 <set_active_device+0x204>
        if(debuglevel & 1)
            printf("set_active_device:(%d) out of range\n", index);
        return(0);
    }

    type = Devices[index].TYPE;
   1289a:	10 81       	ld	r17, Z
   1289c:	81 2f       	mov	r24, r17
   1289e:	90 e0       	ldi	r25, 0x00	; 0
        if(debuglevel & 1)
            printf("set_active_device: index:%d address: %02XH out of range\n", index,address);
        return(0);
    }

    if(Devices[index].dev == NULL)
   128a0:	27 a1       	ldd	r18, Z+39	; 0x27
   128a2:	30 a5       	ldd	r19, Z+40	; 0x28
   128a4:	21 15       	cp	r18, r1
   128a6:	31 05       	cpc	r19, r1
   128a8:	01 f5       	brne	.+64     	; 0x128ea <set_active_device+0xe6>
    {
        if(debuglevel & 1)
   128aa:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <debuglevel>
   128ae:	50 91 be 01 	lds	r21, 0x01BE	; 0x8001be <debuglevel+0x1>
   128b2:	9a 01       	movw	r18, r20
   128b4:	21 70       	andi	r18, 0x01	; 1
   128b6:	33 27       	eor	r19, r19
   128b8:	40 ff       	sbrs	r20, 0
            printf("set_active_device: index:%d type:%d:%s, dev == NULL\n", 
   128ba:	a8 c0       	rjmp	.+336    	; 0x12a0c <set_active_device+0x208>
   128bc:	5c df       	rcall	.-328    	; 0x12776 <type_to_str>
   128be:	9f 93       	push	r25
   128c0:	8f 93       	push	r24
   128c2:	1f 92       	push	r1
   128c4:	1f 93       	push	r17
   128c6:	df 93       	push	r29
   128c8:	cf 93       	push	r28
   128ca:	81 e4       	ldi	r24, 0x41	; 65
   128cc:	90 e2       	ldi	r25, 0x20	; 32
   128ce:	1f 92       	push	r1
   128d0:	9f 93       	push	r25
   128d2:	8f 93       	push	r24
   128d4:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   128d8:	8d b7       	in	r24, 0x3d	; 61
   128da:	9e b7       	in	r25, 0x3e	; 62
   128dc:	09 96       	adiw	r24, 0x09	; 9
   128de:	0f b6       	in	r0, 0x3f	; 63
   128e0:	f8 94       	cli
   128e2:	9e bf       	out	0x3e, r25	; 62
   128e4:	0f be       	out	0x3f, r0	; 63
   128e6:	8d bf       	out	0x3d, r24	; 61
                index,type,type_to_str(type));
        return(0);
    }

    if(type == NO_TYPE)
   128e8:	8f c0       	rjmp	.+286    	; 0x12a08 <set_active_device+0x204>
   128ea:	00 97       	sbiw	r24, 0x00	; 0
    {
        if(debuglevel & 1)
   128ec:	11 f5       	brne	.+68     	; 0x12932 <set_active_device+0x12e>
   128ee:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   128f2:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   128f6:	9c 01       	movw	r18, r24
   128f8:	21 70       	andi	r18, 0x01	; 1
   128fa:	33 27       	eor	r19, r19
   128fc:	80 ff       	sbrs	r24, 0
            printf("set_active_device: index %d uninitalized type:%d:%s\n", 
   128fe:	86 c0       	rjmp	.+268    	; 0x12a0c <set_active_device+0x208>
   12900:	80 e0       	ldi	r24, 0x00	; 0
   12902:	90 e0       	ldi	r25, 0x00	; 0
   12904:	38 df       	rcall	.-400    	; 0x12776 <type_to_str>
   12906:	9f 93       	push	r25
   12908:	8f 93       	push	r24
   1290a:	1f 92       	push	r1
   1290c:	1f 92       	push	r1
   1290e:	df 93       	push	r29
   12910:	cf 93       	push	r28
   12912:	8c e0       	ldi	r24, 0x0C	; 12
   12914:	90 e2       	ldi	r25, 0x20	; 32
   12916:	1f 92       	push	r1
   12918:	9f 93       	push	r25
   1291a:	8f 93       	push	r24
   1291c:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   12920:	8d b7       	in	r24, 0x3d	; 61
   12922:	9e b7       	in	r25, 0x3e	; 62
   12924:	09 96       	adiw	r24, 0x09	; 9
   12926:	0f b6       	in	r0, 0x3f	; 63
   12928:	f8 94       	cli
   1292a:	9e bf       	out	0x3e, r25	; 62
   1292c:	0f be       	out	0x3f, r0	; 63
   1292e:	8d bf       	out	0x3d, r24	; 61
                index,type,type_to_str(type));
        return(0);
    }

    if(type == PRINTER_TYPE)
   12930:	6b c0       	rjmp	.+214    	; 0x12a08 <set_active_device+0x204>
   12932:	84 30       	cpi	r24, 0x04	; 4
   12934:	91 05       	cpc	r25, r1
    {
        PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
   12936:	29 f4       	brne	.+10     	; 0x12942 <set_active_device+0x13e>
   12938:	30 93 81 19 	sts	0x1981, r19	; 0x801981 <PRINTERp+0x1>
   1293c:	20 93 80 19 	sts	0x1980, r18	; 0x801980 <PRINTERp>
        return(1);
    }

    if(type == AMIGO_TYPE || type == SS80_TYPE) 
   12940:	41 c0       	rjmp	.+130    	; 0x129c4 <set_active_device+0x1c0>
   12942:	41 2f       	mov	r20, r17
   12944:	4d 7f       	andi	r20, 0xFD	; 253
   12946:	41 30       	cpi	r20, 0x01	; 1
   12948:	09 f0       	breq	.+2      	; 0x1294c <set_active_device+0x148>
    {
        if(Devices[index].state == NULL)
   1294a:	3f c0       	rjmp	.+126    	; 0x129ca <set_active_device+0x1c6>
   1294c:	41 a5       	ldd	r20, Z+41	; 0x29
   1294e:	52 a5       	ldd	r21, Z+42	; 0x2a
   12950:	41 15       	cp	r20, r1
   12952:	51 05       	cpc	r21, r1
        {
            if(debuglevel & 1)
   12954:	01 f5       	brne	.+64     	; 0x12996 <set_active_device+0x192>
   12956:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <debuglevel>
   1295a:	50 91 be 01 	lds	r21, 0x01BE	; 0x8001be <debuglevel+0x1>
   1295e:	9a 01       	movw	r18, r20
   12960:	21 70       	andi	r18, 0x01	; 1
   12962:	33 27       	eor	r19, r19
                printf("set_active_device: index: %d type:%d:%s, state == NULL\n",
   12964:	40 ff       	sbrs	r20, 0
   12966:	52 c0       	rjmp	.+164    	; 0x12a0c <set_active_device+0x208>
   12968:	06 df       	rcall	.-500    	; 0x12776 <type_to_str>
   1296a:	9f 93       	push	r25
   1296c:	8f 93       	push	r24
   1296e:	1f 92       	push	r1
   12970:	1f 93       	push	r17
   12972:	df 93       	push	r29
   12974:	cf 93       	push	r28
   12976:	84 ed       	ldi	r24, 0xD4	; 212
   12978:	9f e1       	ldi	r25, 0x1F	; 31
   1297a:	1f 92       	push	r1
   1297c:	9f 93       	push	r25
   1297e:	8f 93       	push	r24
   12980:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   12984:	8d b7       	in	r24, 0x3d	; 61
   12986:	9e b7       	in	r25, 0x3e	; 62
   12988:	09 96       	adiw	r24, 0x09	; 9
   1298a:	0f b6       	in	r0, 0x3f	; 63
   1298c:	f8 94       	cli
   1298e:	9e bf       	out	0x3e, r25	; 62
   12990:	0f be       	out	0x3f, r0	; 63
   12992:	8d bf       	out	0x3d, r24	; 61
                     index,type,type_to_str(type));
            return(0);
        }
#ifdef AMIGO
        if(type == AMIGO_TYPE)
   12994:	39 c0       	rjmp	.+114    	; 0x12a08 <set_active_device+0x204>
   12996:	81 30       	cpi	r24, 0x01	; 1
   12998:	91 05       	cpc	r25, r1
        {
            AMIGOp = (AMIGODiskType *) Devices[index].dev;
   1299a:	49 f4       	brne	.+18     	; 0x129ae <set_active_device+0x1aa>
   1299c:	30 93 7b 19 	sts	0x197B, r19	; 0x80197b <AMIGOp+0x1>
   129a0:	20 93 7a 19 	sts	0x197A, r18	; 0x80197a <AMIGOp>
            AMIGOs = (AMIGOStateType *) Devices[index].state;
   129a4:	50 93 79 19 	sts	0x1979, r21	; 0x801979 <AMIGOs+0x1>
   129a8:	40 93 78 19 	sts	0x1978, r20	; 0x801978 <AMIGOs>
            return(1);
        }
#endif
        if(type == SS80_TYPE)
   129ac:	0b c0       	rjmp	.+22     	; 0x129c4 <set_active_device+0x1c0>
   129ae:	83 30       	cpi	r24, 0x03	; 3
   129b0:	91 05       	cpc	r25, r1
        {
            SS80p = (SS80DiskType *) Devices[index].dev;
   129b2:	59 f4       	brne	.+22     	; 0x129ca <set_active_device+0x1c6>
   129b4:	30 93 7f 19 	sts	0x197F, r19	; 0x80197f <SS80p+0x1>
   129b8:	20 93 7e 19 	sts	0x197E, r18	; 0x80197e <SS80p>
            SS80s = (SS80StateType *) Devices[index].state;
   129bc:	50 93 7d 19 	sts	0x197D, r21	; 0x80197d <SS80s+0x1>
   129c0:	40 93 7c 19 	sts	0x197C, r20	; 0x80197c <SS80s>
            return(1);
   129c4:	21 e0       	ldi	r18, 0x01	; 1
   129c6:	30 e0       	ldi	r19, 0x00	; 0
        }
    }
    if(debuglevel & 1)
   129c8:	21 c0       	rjmp	.+66     	; 0x12a0c <set_active_device+0x208>
   129ca:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <debuglevel>
   129ce:	50 91 be 01 	lds	r21, 0x01BE	; 0x8001be <debuglevel+0x1>
   129d2:	9a 01       	movw	r18, r20
   129d4:	21 70       	andi	r18, 0x01	; 1
   129d6:	33 27       	eor	r19, r19
        printf("set_active_device:(%d) invalid type:%d:%s\n", 
   129d8:	40 ff       	sbrs	r20, 0
   129da:	18 c0       	rjmp	.+48     	; 0x12a0c <set_active_device+0x208>
   129dc:	cc de       	rcall	.-616    	; 0x12776 <type_to_str>
   129de:	9f 93       	push	r25
   129e0:	8f 93       	push	r24
   129e2:	1f 92       	push	r1
   129e4:	1f 93       	push	r17
   129e6:	df 93       	push	r29
   129e8:	cf 93       	push	r28
   129ea:	89 ea       	ldi	r24, 0xA9	; 169
   129ec:	9f e1       	ldi	r25, 0x1F	; 31
   129ee:	1f 92       	push	r1
   129f0:	9f 93       	push	r25
   129f2:	8f 93       	push	r24
   129f4:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   129f8:	8d b7       	in	r24, 0x3d	; 61
   129fa:	9e b7       	in	r25, 0x3e	; 62
   129fc:	09 96       	adiw	r24, 0x09	; 9
   129fe:	0f b6       	in	r0, 0x3f	; 63
   12a00:	f8 94       	cli
   12a02:	9e bf       	out	0x3e, r25	; 62
   12a04:	0f be       	out	0x3f, r0	; 63

    ///@brief We also check for -1 
    /// So the result of find_device() can be used without additional tests
    if(index == -1)
    {
        return(0);
   12a06:	8d bf       	out	0x3d, r24	; 61
   12a08:	20 e0       	ldi	r18, 0x00	; 0
    }
    if(debuglevel & 1)
        printf("set_active_device:(%d) invalid type:%d:%s\n", 
            index,type,type_to_str(type));
    return(0);
}
   12a0a:	30 e0       	ldi	r19, 0x00	; 0
   12a0c:	c9 01       	movw	r24, r18
   12a0e:	df 91       	pop	r29
   12a10:	cf 91       	pop	r28
   12a12:	1f 91       	pop	r17
   12a14:	08 95       	ret

00012a16 <SS80_Set_Defaults>:
///@brief Set Default Values for a new SS80 Device IF defaults have been defined
/// Most values in the CONTROLER and UNIT are defaults that should not need to be specified
/// Note all of the values are zeroed on allocation including strings
///@return void
void SS80_Set_Defaults(int index)
{
   12a16:	0f 93       	push	r16
   12a18:	1f 93       	push	r17
   12a1a:	cf 93       	push	r28
   12a1c:	df 93       	push	r29
   12a1e:	ec 01       	movw	r28, r24
	int defindex = find_type(SS80_DEFAULT_TYPE);
   12a20:	82 e0       	ldi	r24, 0x02	; 2
   12a22:	90 e0       	ldi	r25, 0x00	; 0
   12a24:	85 de       	rcall	.-758    	; 0x12730 <find_type>
	SS80DiskType *SS80p = (SS80DiskType *) Devices[index].dev;
	SS80DiskType *SS80DEFAULTp;

	if(defindex < 0 )
   12a26:	97 fd       	sbrc	r25, 7
   12a28:	88 c0       	rjmp	.+272    	; 0x12b3a <SS80_Set_Defaults+0x124>
/// Note all of the values are zeroed on allocation including strings
///@return void
void SS80_Set_Defaults(int index)
{
	int defindex = find_type(SS80_DEFAULT_TYPE);
	SS80DiskType *SS80p = (SS80DiskType *) Devices[index].dev;
   12a2a:	2b e2       	ldi	r18, 0x2B	; 43
   12a2c:	2c 9f       	mul	r18, r28
   12a2e:	f0 01       	movw	r30, r0
   12a30:	2d 9f       	mul	r18, r29
   12a32:	f0 0d       	add	r31, r0
   12a34:	11 24       	eor	r1, r1
   12a36:	ed 5f       	subi	r30, 0xFD	; 253
   12a38:	f0 4e       	sbci	r31, 0xE0	; 224
   12a3a:	c7 a1       	ldd	r28, Z+39	; 0x27
   12a3c:	d0 a5       	ldd	r29, Z+40	; 0x28
	SS80DiskType *SS80DEFAULTp;

	if(defindex < 0 )
		return;

	SS80DEFAULTp = (SS80DiskType *) Devices[defindex].dev;
   12a3e:	28 9f       	mul	r18, r24
   12a40:	f0 01       	movw	r30, r0
   12a42:	29 9f       	mul	r18, r25
   12a44:	f0 0d       	add	r31, r0
   12a46:	11 24       	eor	r1, r1
   12a48:	ed 5f       	subi	r30, 0xFD	; 253
   12a4a:	f0 4e       	sbci	r31, 0xE0	; 224
   12a4c:	07 a1       	ldd	r16, Z+39	; 0x27
   12a4e:	10 a5       	ldd	r17, Z+40	; 0x28

	SS80p->HEADER.ADDRESS				= SS80DEFAULTp->HEADER.ADDRESS;
   12a50:	f8 01       	movw	r30, r16
   12a52:	80 81       	ld	r24, Z
   12a54:	88 83       	st	Y, r24
	SS80p->HEADER.PPR					= SS80DEFAULTp->HEADER.PPR;
   12a56:	81 81       	ldd	r24, Z+1	; 0x01
   12a58:	89 83       	std	Y+1, r24	; 0x01
	strncpy(SS80p->HEADER.NAME,SS80DEFAULTp->HEADER.NAME,sizeof(SS80p->HEADER.NAME)-1);
   12a5a:	b8 01       	movw	r22, r16
   12a5c:	6e 5f       	subi	r22, 0xFE	; 254
   12a5e:	7f 4f       	sbci	r23, 0xFF	; 255
   12a60:	40 e2       	ldi	r20, 0x20	; 32
   12a62:	50 e0       	ldi	r21, 0x00	; 0
   12a64:	ce 01       	movw	r24, r28
   12a66:	02 96       	adiw	r24, 0x02	; 2
   12a68:	0e 94 22 32 	call	0x6444	; 0x6444 <strncpy>

	SS80p->CONFIG.ID					= SS80DEFAULTp->CONFIG.ID;
   12a6c:	f8 01       	movw	r30, r16
   12a6e:	83 a1       	ldd	r24, Z+35	; 0x23
   12a70:	94 a1       	ldd	r25, Z+36	; 0x24
   12a72:	9c a3       	std	Y+36, r25	; 0x24
   12a74:	8b a3       	std	Y+35, r24	; 0x23
	SS80p->CONTROLLER.UNITS_INSTALLED	= SS80DEFAULTp->CONTROLLER.UNITS_INSTALLED;
   12a76:	85 a1       	ldd	r24, Z+37	; 0x25
   12a78:	96 a1       	ldd	r25, Z+38	; 0x26
   12a7a:	9e a3       	std	Y+38, r25	; 0x26
   12a7c:	8d a3       	std	Y+37, r24	; 0x25
	SS80p->CONTROLLER.TRANSFER_RATE		= SS80DEFAULTp->CONTROLLER.TRANSFER_RATE;
   12a7e:	87 a1       	ldd	r24, Z+39	; 0x27
   12a80:	90 a5       	ldd	r25, Z+40	; 0x28
   12a82:	98 a7       	std	Y+40, r25	; 0x28
   12a84:	8f a3       	std	Y+39, r24	; 0x27
	SS80p->CONTROLLER.TYPE				= SS80DEFAULTp->CONTROLLER.TYPE;
   12a86:	81 a5       	ldd	r24, Z+41	; 0x29
   12a88:	89 a7       	std	Y+41, r24	; 0x29

	SS80p->UNIT.UNIT_TYPE				= SS80DEFAULTp->UNIT.UNIT_TYPE;
   12a8a:	82 a5       	ldd	r24, Z+42	; 0x2a
   12a8c:	8a a7       	std	Y+42, r24	; 0x2a
	SS80p->UNIT.DEVICE_NUMBER			= SS80DEFAULTp->UNIT.DEVICE_NUMBER;
   12a8e:	83 a5       	ldd	r24, Z+43	; 0x2b
   12a90:	94 a5       	ldd	r25, Z+44	; 0x2c
   12a92:	a5 a5       	ldd	r26, Z+45	; 0x2d
   12a94:	b6 a5       	ldd	r27, Z+46	; 0x2e
   12a96:	8b a7       	std	Y+43, r24	; 0x2b
   12a98:	9c a7       	std	Y+44, r25	; 0x2c
   12a9a:	ad a7       	std	Y+45, r26	; 0x2d
   12a9c:	be a7       	std	Y+46, r27	; 0x2e
	SS80p->UNIT.BYTES_PER_BLOCK			= SS80DEFAULTp->UNIT.BYTES_PER_BLOCK;
   12a9e:	87 a5       	ldd	r24, Z+47	; 0x2f
   12aa0:	90 a9       	ldd	r25, Z+48	; 0x30
   12aa2:	98 ab       	std	Y+48, r25	; 0x30
   12aa4:	8f a7       	std	Y+47, r24	; 0x2f
	SS80p->UNIT.BUFFERED_BLOCKS			= SS80DEFAULTp->UNIT.BUFFERED_BLOCKS;
   12aa6:	81 a9       	ldd	r24, Z+49	; 0x31
   12aa8:	89 ab       	std	Y+49, r24	; 0x31
	SS80p->UNIT.BURST_SIZE				= SS80DEFAULTp->UNIT.BURST_SIZE;
   12aaa:	82 a9       	ldd	r24, Z+50	; 0x32
   12aac:	8a ab       	std	Y+50, r24	; 0x32
	SS80p->UNIT.BLOCK_TIME				= SS80DEFAULTp->UNIT.BLOCK_TIME;
   12aae:	83 a9       	ldd	r24, Z+51	; 0x33
   12ab0:	94 a9       	ldd	r25, Z+52	; 0x34
   12ab2:	9c ab       	std	Y+52, r25	; 0x34
   12ab4:	8b ab       	std	Y+51, r24	; 0x33
	SS80p->UNIT.CONTINOUS_TRANSFER_RATE	= SS80DEFAULTp->UNIT.CONTINOUS_TRANSFER_RATE;
   12ab6:	85 a9       	ldd	r24, Z+53	; 0x35
   12ab8:	96 a9       	ldd	r25, Z+54	; 0x36
   12aba:	9e ab       	std	Y+54, r25	; 0x36
   12abc:	8d ab       	std	Y+53, r24	; 0x35
	SS80p->UNIT.OPTIMAL_RETRY_TIME		= SS80DEFAULTp->UNIT.OPTIMAL_RETRY_TIME;
   12abe:	87 a9       	ldd	r24, Z+55	; 0x37
   12ac0:	90 ad       	ldd	r25, Z+56	; 0x38
   12ac2:	98 af       	std	Y+56, r25	; 0x38
   12ac4:	8f ab       	std	Y+55, r24	; 0x37
	SS80p->UNIT.ACCESS_TIME				= SS80DEFAULTp->UNIT.ACCESS_TIME;
   12ac6:	81 ad       	ldd	r24, Z+57	; 0x39
   12ac8:	92 ad       	ldd	r25, Z+58	; 0x3a
   12aca:	9a af       	std	Y+58, r25	; 0x3a
   12acc:	89 af       	std	Y+57, r24	; 0x39
	SS80p->UNIT.MAXIMUM_INTERLEAVE		= SS80DEFAULTp->UNIT.MAXIMUM_INTERLEAVE;
   12ace:	83 ad       	ldd	r24, Z+59	; 0x3b
   12ad0:	8b af       	std	Y+59, r24	; 0x3b
	SS80p->UNIT.FIXED_VOLUMES			= SS80DEFAULTp->UNIT.FIXED_VOLUMES;
   12ad2:	84 ad       	ldd	r24, Z+60	; 0x3c
   12ad4:	8c af       	std	Y+60, r24	; 0x3c

	SS80p->VOLUME.MAX_CYLINDER			= SS80DEFAULTp->VOLUME.MAX_CYLINDER;
   12ad6:	fe 96       	adiw	r30, 0x3e	; 62
   12ad8:	80 81       	ld	r24, Z
   12ada:	91 81       	ldd	r25, Z+1	; 0x01
   12adc:	a2 81       	ldd	r26, Z+2	; 0x02
   12ade:	b3 81       	ldd	r27, Z+3	; 0x03
   12ae0:	fe 01       	movw	r30, r28
   12ae2:	fe 96       	adiw	r30, 0x3e	; 62
   12ae4:	80 83       	st	Z, r24
   12ae6:	91 83       	std	Z+1, r25	; 0x01
   12ae8:	a2 83       	std	Z+2, r26	; 0x02
   12aea:	b3 83       	std	Z+3, r27	; 0x03
	SS80p->VOLUME.MAX_HEAD				= SS80DEFAULTp->VOLUME.MAX_HEAD;
   12aec:	f8 01       	movw	r30, r16
   12aee:	ee 5b       	subi	r30, 0xBE	; 190
   12af0:	ff 4f       	sbci	r31, 0xFF	; 255
   12af2:	80 81       	ld	r24, Z
   12af4:	fe 01       	movw	r30, r28
   12af6:	ee 5b       	subi	r30, 0xBE	; 190
   12af8:	ff 4f       	sbci	r31, 0xFF	; 255
   12afa:	80 83       	st	Z, r24
	SS80p->VOLUME.MAX_SECTOR			= SS80DEFAULTp->VOLUME.MAX_SECTOR;
   12afc:	f8 01       	movw	r30, r16
   12afe:	ed 5b       	subi	r30, 0xBD	; 189
   12b00:	ff 4f       	sbci	r31, 0xFF	; 255
   12b02:	80 81       	ld	r24, Z
   12b04:	91 81       	ldd	r25, Z+1	; 0x01
   12b06:	fe 01       	movw	r30, r28
   12b08:	ed 5b       	subi	r30, 0xBD	; 189
   12b0a:	ff 4f       	sbci	r31, 0xFF	; 255
   12b0c:	91 83       	std	Z+1, r25	; 0x01
   12b0e:	80 83       	st	Z, r24
	SS80p->VOLUME.MAX_BLOCK_NUMBER		= SS80DEFAULTp->VOLUME.MAX_BLOCK_NUMBER;
   12b10:	f8 01       	movw	r30, r16
   12b12:	eb 5b       	subi	r30, 0xBB	; 187
   12b14:	ff 4f       	sbci	r31, 0xFF	; 255
   12b16:	80 81       	ld	r24, Z
   12b18:	91 81       	ldd	r25, Z+1	; 0x01
   12b1a:	a2 81       	ldd	r26, Z+2	; 0x02
   12b1c:	b3 81       	ldd	r27, Z+3	; 0x03
   12b1e:	fe 01       	movw	r30, r28
   12b20:	eb 5b       	subi	r30, 0xBB	; 187
   12b22:	ff 4f       	sbci	r31, 0xFF	; 255
   12b24:	80 83       	st	Z, r24
   12b26:	91 83       	std	Z+1, r25	; 0x01
   12b28:	a2 83       	std	Z+2, r26	; 0x02
   12b2a:	b3 83       	std	Z+3, r27	; 0x03
	SS80p->VOLUME.INTERLEAVE			= SS80DEFAULTp->VOLUME.INTERLEAVE;
   12b2c:	f8 01       	movw	r30, r16
   12b2e:	e7 5b       	subi	r30, 0xB7	; 183
   12b30:	ff 4f       	sbci	r31, 0xFF	; 255
   12b32:	80 81       	ld	r24, Z
   12b34:	c7 5b       	subi	r28, 0xB7	; 183
   12b36:	df 4f       	sbci	r29, 0xFF	; 255
   12b38:	88 83       	st	Y, r24
};
   12b3a:	df 91       	pop	r29
   12b3c:	cf 91       	pop	r28
   12b3e:	1f 91       	pop	r17
   12b40:	0f 91       	pop	r16
   12b42:	08 95       	ret

00012b44 <alloc_device>:

///@brief Allocate a Device structure for a disk or printer
///@param type: disk type
///@return Devices[] index on sucess or -1
int alloc_device(int type)
{
   12b44:	0f 93       	push	r16
   12b46:	1f 93       	push	r17
   12b48:	cf 93       	push	r28
   12b4a:	df 93       	push	r29
    int ind;
    int index = -1;

    // Find a free slot
    ind = find_free();
   12b4c:	ec 01       	movw	r28, r24
   12b4e:	2c de       	rcall	.-936    	; 0x127a8 <find_free>
    if(ind == -1)
   12b50:	8c 01       	movw	r16, r24
   12b52:	0f 3f       	cpi	r16, 0xFF	; 255
   12b54:	8f ef       	ldi	r24, 0xFF	; 255
   12b56:	18 07       	cpc	r17, r24
    {
        if(debuglevel & 1)
   12b58:	99 f4       	brne	.+38     	; 0x12b80 <alloc_device+0x3c>
   12b5a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   12b5e:	80 ff       	sbrs	r24, 0
            printf("alloc_device: Device table is full\n", type);
   12b60:	9e c0       	rjmp	.+316    	; 0x12c9e <alloc_device+0x15a>
   12b62:	df 93       	push	r29
   12b64:	cf 93       	push	r28
   12b66:	85 e8       	ldi	r24, 0x85	; 133
   12b68:	9f e1       	ldi	r25, 0x1F	; 31
   12b6a:	1f 92       	push	r1
   12b6c:	9f 93       	push	r25
   12b6e:	8f 93       	push	r24
   12b70:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   12b74:	0f 90       	pop	r0
   12b76:	0f 90       	pop	r0
   12b78:	0f 90       	pop	r0
   12b7a:	0f 90       	pop	r0
   12b7c:	0f 90       	pop	r0
        return(ind);
    }

    switch(type)
   12b7e:	8f c0       	rjmp	.+286    	; 0x12c9e <alloc_device+0x15a>
   12b80:	c2 30       	cpi	r28, 0x02	; 2
   12b82:	d1 05       	cpc	r29, r1
   12b84:	c1 f1       	breq	.+112    	; 0x12bf6 <alloc_device+0xb2>
   12b86:	dc f4       	brge	.+54     	; 0x12bbe <alloc_device+0x7a>
   12b88:	c1 30       	cpi	r28, 0x01	; 1
   12b8a:	d1 05       	cpc	r29, r1
   12b8c:	09 f0       	breq	.+2      	; 0x12b90 <alloc_device+0x4c>
            index = ind;
			SS80_Set_Defaults(index);	// Set any defaults we may have
            break;
#ifdef AMIGO
        case AMIGO_TYPE:
            Devices[ind].TYPE = type;
   12b8e:	6c c0       	rjmp	.+216    	; 0x12c68 <alloc_device+0x124>
   12b90:	8b e2       	ldi	r24, 0x2B	; 43
   12b92:	80 9f       	mul	r24, r16
   12b94:	e0 01       	movw	r28, r0
   12b96:	81 9f       	mul	r24, r17
   12b98:	d0 0d       	add	r29, r0
   12b9a:	11 24       	eor	r1, r1
   12b9c:	cd 5f       	subi	r28, 0xFD	; 253
   12b9e:	d0 4e       	sbci	r29, 0xE0	; 224
   12ba0:	81 e0       	ldi	r24, 0x01	; 1
            Devices[ind].dev = safecalloc(sizeof(AMIGODiskType)+7,1);
   12ba2:	88 83       	st	Y, r24
   12ba4:	61 e0       	ldi	r22, 0x01	; 1
   12ba6:	70 e0       	ldi	r23, 0x00	; 0
   12ba8:	84 e3       	ldi	r24, 0x34	; 52
   12baa:	90 e0       	ldi	r25, 0x00	; 0
   12bac:	0e 94 07 2a 	call	0x540e	; 0x540e <safecalloc>
   12bb0:	98 a7       	std	Y+40, r25	; 0x28
            Devices[ind].state = safecalloc(sizeof(AMIGOStateType)+7,1);
   12bb2:	8f a3       	std	Y+39, r24	; 0x27
   12bb4:	61 e0       	ldi	r22, 0x01	; 1
   12bb6:	70 e0       	ldi	r23, 0x00	; 0
   12bb8:	88 e1       	ldi	r24, 0x18	; 24
   12bba:	90 e0       	ldi	r25, 0x00	; 0
        if(debuglevel & 1)
            printf("alloc_device: Device table is full\n", type);
        return(ind);
    }

    switch(type)
   12bbc:	50 c0       	rjmp	.+160    	; 0x12c5e <alloc_device+0x11a>
   12bbe:	c3 30       	cpi	r28, 0x03	; 3
   12bc0:	d1 05       	cpc	r29, r1
   12bc2:	81 f1       	breq	.+96     	; 0x12c24 <alloc_device+0xe0>
   12bc4:	c4 30       	cpi	r28, 0x04	; 4
   12bc6:	d1 05       	cpc	r29, r1
   12bc8:	09 f0       	breq	.+2      	; 0x12bcc <alloc_device+0x88>
            Devices[ind].state = safecalloc(sizeof(AMIGOStateType)+7,1);
            index = ind;
            break;
#endif
        case PRINTER_TYPE:
            Devices[ind].TYPE = type;
   12bca:	4e c0       	rjmp	.+156    	; 0x12c68 <alloc_device+0x124>
   12bcc:	8b e2       	ldi	r24, 0x2B	; 43
   12bce:	80 9f       	mul	r24, r16
   12bd0:	e0 01       	movw	r28, r0
   12bd2:	81 9f       	mul	r24, r17
   12bd4:	d0 0d       	add	r29, r0
   12bd6:	11 24       	eor	r1, r1
   12bd8:	cd 5f       	subi	r28, 0xFD	; 253
   12bda:	d0 4e       	sbci	r29, 0xE0	; 224
   12bdc:	84 e0       	ldi	r24, 0x04	; 4
            Devices[ind].dev = safecalloc(sizeof(PRINTERDeviceType)+7,1);
   12bde:	88 83       	st	Y, r24
   12be0:	61 e0       	ldi	r22, 0x01	; 1
   12be2:	70 e0       	ldi	r23, 0x00	; 0
   12be4:	8a e2       	ldi	r24, 0x2A	; 42
   12be6:	90 e0       	ldi	r25, 0x00	; 0
   12be8:	0e 94 07 2a 	call	0x540e	; 0x540e <safecalloc>
   12bec:	98 a7       	std	Y+40, r25	; 0x28
            Devices[ind].state = NULL;
   12bee:	8f a3       	std	Y+39, r24	; 0x27
   12bf0:	1a a6       	std	Y+42, r1	; 0x2a
            index = ind;
            break;
   12bf2:	19 a6       	std	Y+41, r1	; 0x29

    switch(type)
    {
		// Same as SS80 type but sets initial defaults for any remaining SS80 drives
        case SS80_DEFAULT_TYPE:
            Devices[ind].TYPE = type;
   12bf4:	54 c0       	rjmp	.+168    	; 0x12c9e <alloc_device+0x15a>
   12bf6:	8b e2       	ldi	r24, 0x2B	; 43
   12bf8:	80 9f       	mul	r24, r16
   12bfa:	e0 01       	movw	r28, r0
   12bfc:	81 9f       	mul	r24, r17
   12bfe:	d0 0d       	add	r29, r0
   12c00:	11 24       	eor	r1, r1
   12c02:	cd 5f       	subi	r28, 0xFD	; 253
   12c04:	d0 4e       	sbci	r29, 0xE0	; 224
   12c06:	82 e0       	ldi	r24, 0x02	; 2
            Devices[ind].dev = safecalloc(sizeof(SS80DiskType)+7,1);
   12c08:	88 83       	st	Y, r24
   12c0a:	61 e0       	ldi	r22, 0x01	; 1
   12c0c:	70 e0       	ldi	r23, 0x00	; 0
   12c0e:	81 e5       	ldi	r24, 0x51	; 81
   12c10:	90 e0       	ldi	r25, 0x00	; 0
   12c12:	0e 94 07 2a 	call	0x540e	; 0x540e <safecalloc>
   12c16:	98 a7       	std	Y+40, r25	; 0x28
            Devices[ind].state = safecalloc(sizeof(SS80StateType)+7,1);
   12c18:	8f a3       	std	Y+39, r24	; 0x27
   12c1a:	61 e0       	ldi	r22, 0x01	; 1
   12c1c:	70 e0       	ldi	r23, 0x00	; 0
   12c1e:	86 e1       	ldi	r24, 0x16	; 22
   12c20:	90 e0       	ldi	r25, 0x00	; 0
            index = ind;
            break;
        case SS80_TYPE:
            Devices[ind].TYPE = type;
   12c22:	1d c0       	rjmp	.+58     	; 0x12c5e <alloc_device+0x11a>
   12c24:	8b e2       	ldi	r24, 0x2B	; 43
   12c26:	80 9f       	mul	r24, r16
   12c28:	e0 01       	movw	r28, r0
   12c2a:	81 9f       	mul	r24, r17
   12c2c:	d0 0d       	add	r29, r0
   12c2e:	11 24       	eor	r1, r1
   12c30:	cd 5f       	subi	r28, 0xFD	; 253
   12c32:	d0 4e       	sbci	r29, 0xE0	; 224
   12c34:	83 e0       	ldi	r24, 0x03	; 3
            Devices[ind].dev = safecalloc(sizeof(SS80DiskType)+7,1);
   12c36:	88 83       	st	Y, r24
   12c38:	61 e0       	ldi	r22, 0x01	; 1
   12c3a:	70 e0       	ldi	r23, 0x00	; 0
   12c3c:	81 e5       	ldi	r24, 0x51	; 81
   12c3e:	90 e0       	ldi	r25, 0x00	; 0
   12c40:	0e 94 07 2a 	call	0x540e	; 0x540e <safecalloc>
   12c44:	98 a7       	std	Y+40, r25	; 0x28
            Devices[ind].state = safecalloc(sizeof(SS80StateType)+7,1);
   12c46:	8f a3       	std	Y+39, r24	; 0x27
   12c48:	61 e0       	ldi	r22, 0x01	; 1
   12c4a:	70 e0       	ldi	r23, 0x00	; 0
   12c4c:	86 e1       	ldi	r24, 0x16	; 22
   12c4e:	90 e0       	ldi	r25, 0x00	; 0
   12c50:	0e 94 07 2a 	call	0x540e	; 0x540e <safecalloc>
            index = ind;
			SS80_Set_Defaults(index);	// Set any defaults we may have
   12c54:	9a a7       	std	Y+42, r25	; 0x2a
   12c56:	89 a7       	std	Y+41, r24	; 0x29
            break;
   12c58:	c8 01       	movw	r24, r16
#ifdef AMIGO
        case AMIGO_TYPE:
            Devices[ind].TYPE = type;
            Devices[ind].dev = safecalloc(sizeof(AMIGODiskType)+7,1);
            Devices[ind].state = safecalloc(sizeof(AMIGOStateType)+7,1);
   12c5a:	dd de       	rcall	.-582    	; 0x12a16 <SS80_Set_Defaults>
   12c5c:	20 c0       	rjmp	.+64     	; 0x12c9e <alloc_device+0x15a>
   12c5e:	0e 94 07 2a 	call	0x540e	; 0x540e <safecalloc>
            index = ind;
            break;
   12c62:	9a a7       	std	Y+42, r25	; 0x2a
            Devices[ind].dev = safecalloc(sizeof(PRINTERDeviceType)+7,1);
            Devices[ind].state = NULL;
            index = ind;
            break;
        default:
            if(debuglevel & 1)
   12c64:	89 a7       	std	Y+41, r24	; 0x29
   12c66:	1b c0       	rjmp	.+54     	; 0x12c9e <alloc_device+0x15a>
   12c68:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("alloc_device: invalid type:%d:%s\n", type,type_to_str(type));
   12c6c:	80 ff       	sbrs	r24, 0
   12c6e:	15 c0       	rjmp	.+42     	; 0x12c9a <alloc_device+0x156>
   12c70:	ce 01       	movw	r24, r28
   12c72:	81 dd       	rcall	.-1278   	; 0x12776 <type_to_str>
   12c74:	9f 93       	push	r25
   12c76:	8f 93       	push	r24
   12c78:	df 93       	push	r29
   12c7a:	cf 93       	push	r28
   12c7c:	83 e6       	ldi	r24, 0x63	; 99
   12c7e:	9f e1       	ldi	r25, 0x1F	; 31
   12c80:	1f 92       	push	r1
   12c82:	9f 93       	push	r25
   12c84:	8f 93       	push	r24
   12c86:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   12c8a:	8d b7       	in	r24, 0x3d	; 61
   12c8c:	9e b7       	in	r25, 0x3e	; 62
   12c8e:	07 96       	adiw	r24, 0x07	; 7
   12c90:	0f b6       	in	r0, 0x3f	; 63
   12c92:	f8 94       	cli
   12c94:	9e bf       	out	0x3e, r25	; 62
   12c96:	0f be       	out	0x3f, r0	; 63
   12c98:	8d bf       	out	0x3d, r24	; 61
            break;
    }
    return(index);
}
   12c9a:	0f ef       	ldi	r16, 0xFF	; 255
   12c9c:	1f ef       	ldi	r17, 0xFF	; 255
   12c9e:	c8 01       	movw	r24, r16
   12ca0:	df 91       	pop	r29
   12ca2:	cf 91       	pop	r28
   12ca4:	1f 91       	pop	r17
   12ca6:	0f 91       	pop	r16
   12ca8:	08 95       	ret

00012caa <init_Devices>:

// =============================================
/// @brief Init Config Parser Stack
/// Called only durring power up so we do not have to free memory
void init_Devices()
{
   12caa:	cf 93       	push	r28
   12cac:	df 93       	push	r29
    int i;
    stack_ind = 0;
   12cae:	10 92 8d 19 	sts	0x198D, r1	; 0x80198d <stack_ind+0x1>
   12cb2:	10 92 8c 19 	sts	0x198C, r1	; 0x80198c <stack_ind>
   12cb6:	e3 e0       	ldi	r30, 0x03	; 3
   12cb8:	ff e1       	ldi	r31, 0x1F	; 31
    for(i=0;i<MAX_DEVICES;++i)
    {
        Devices[i].TYPE = NO_TYPE;
        Devices[i].ADDRESS = 0;
        Devices[i].PPR = 0xff;
   12cba:	9f ef       	ldi	r25, 0xFF	; 255
        Devices[i].BLOCKS = 0;
        memset(Devices[i].model, 0, sizeof(Devices[i].model) );
   12cbc:	80 e2       	ldi	r24, 0x20	; 32
{
    int i;
    stack_ind = 0;
    for(i=0;i<MAX_DEVICES;++i)
    {
        Devices[i].TYPE = NO_TYPE;
   12cbe:	10 82       	st	Z, r1
        Devices[i].ADDRESS = 0;
   12cc0:	11 82       	std	Z+1, r1	; 0x01
        Devices[i].PPR = 0xff;
   12cc2:	92 83       	std	Z+2, r25	; 0x02
        Devices[i].BLOCKS = 0;
   12cc4:	13 82       	std	Z+3, r1	; 0x03
   12cc6:	14 82       	std	Z+4, r1	; 0x04
   12cc8:	15 82       	std	Z+5, r1	; 0x05
   12cca:	16 82       	std	Z+6, r1	; 0x06
        memset(Devices[i].model, 0, sizeof(Devices[i].model) );
   12ccc:	df 01       	movw	r26, r30
   12cce:	17 96       	adiw	r26, 0x07	; 7
   12cd0:	ed 01       	movw	r28, r26
   12cd2:	28 2f       	mov	r18, r24
   12cd4:	19 92       	st	Y+, r1
   12cd6:	2a 95       	dec	r18
   12cd8:	e9 f7       	brne	.-6      	; 0x12cd4 <init_Devices+0x2a>
        Devices[i].dev = NULL;
   12cda:	10 a6       	std	Z+40, r1	; 0x28
   12cdc:	17 a2       	std	Z+39, r1	; 0x27
        Devices[i].state = NULL;
   12cde:	12 a6       	std	Z+42, r1	; 0x2a
   12ce0:	11 a6       	std	Z+41, r1	; 0x29
   12ce2:	bb 96       	adiw	r30, 0x2b	; 43
/// Called only durring power up so we do not have to free memory
void init_Devices()
{
    int i;
    stack_ind = 0;
    for(i=0;i<MAX_DEVICES;++i)
   12ce4:	c1 e2       	ldi	r28, 0x21	; 33
   12ce6:	e7 30       	cpi	r30, 0x07	; 7
   12ce8:	fc 07       	cpc	r31, r28
   12cea:	49 f7       	brne	.-46     	; 0x12cbe <init_Devices+0x14>
        Devices[i].BLOCKS = 0;
        memset(Devices[i].model, 0, sizeof(Devices[i].model) );
        Devices[i].dev = NULL;
        Devices[i].state = NULL;
    }
}
   12cec:	df 91       	pop	r29
   12cee:	cf 91       	pop	r28
   12cf0:	08 95       	ret

00012cf2 <push_state>:
/// @brief Push Parser State
/// @param state: parser state
/// @return state
int push_state(int state)
{
    if(stack_ind < MAX_STACK)
   12cf2:	20 91 8c 19 	lds	r18, 0x198C	; 0x80198c <stack_ind>
   12cf6:	30 91 8d 19 	lds	r19, 0x198D	; 0x80198d <stack_ind+0x1>
   12cfa:	25 30       	cpi	r18, 0x05	; 5
   12cfc:	31 05       	cpc	r19, r1
   12cfe:	7c f4       	brge	.+30     	; 0x12d1e <push_state+0x2c>
        stack_p[stack_ind++] = state;
   12d00:	a9 01       	movw	r20, r18
   12d02:	4f 5f       	subi	r20, 0xFF	; 255
   12d04:	5f 4f       	sbci	r21, 0xFF	; 255
   12d06:	50 93 8d 19 	sts	0x198D, r21	; 0x80198d <stack_ind+0x1>
   12d0a:	40 93 8c 19 	sts	0x198C, r20	; 0x80198c <stack_ind>
   12d0e:	22 0f       	add	r18, r18
   12d10:	33 1f       	adc	r19, r19
   12d12:	f9 01       	movw	r30, r18
   12d14:	ee 57       	subi	r30, 0x7E	; 126
   12d16:	f6 4e       	sbci	r31, 0xE6	; 230
   12d18:	80 83       	st	Z, r24
   12d1a:	91 83       	std	Z+1, r25	; 0x01
    else
        return(START_STATE);
    return(state);
   12d1c:	08 95       	ret
int push_state(int state)
{
    if(stack_ind < MAX_STACK)
        stack_p[stack_ind++] = state;
    else
        return(START_STATE);
   12d1e:	80 e0       	ldi	r24, 0x00	; 0
   12d20:	90 e0       	ldi	r25, 0x00	; 0
    return(state);
}
   12d22:	08 95       	ret

00012d24 <pop_state>:

/// @brief Pop Parser State
/// @return state
int pop_state()
{
    if(stack_ind > 0)
   12d24:	80 91 8c 19 	lds	r24, 0x198C	; 0x80198c <stack_ind>
   12d28:	90 91 8d 19 	lds	r25, 0x198D	; 0x80198d <stack_ind+0x1>
   12d2c:	18 16       	cp	r1, r24
   12d2e:	19 06       	cpc	r1, r25
   12d30:	6c f4       	brge	.+26     	; 0x12d4c <pop_state+0x28>
        return(stack_p[--stack_ind]);
   12d32:	01 97       	sbiw	r24, 0x01	; 1
   12d34:	90 93 8d 19 	sts	0x198D, r25	; 0x80198d <stack_ind+0x1>
   12d38:	80 93 8c 19 	sts	0x198C, r24	; 0x80198c <stack_ind>
   12d3c:	88 0f       	add	r24, r24
   12d3e:	99 1f       	adc	r25, r25
   12d40:	fc 01       	movw	r30, r24
   12d42:	ee 57       	subi	r30, 0x7E	; 126
   12d44:	f6 4e       	sbci	r31, 0xE6	; 230
   12d46:	80 81       	ld	r24, Z
   12d48:	91 81       	ldd	r25, Z+1	; 0x01
   12d4a:	08 95       	ret
    else
        return(START_STATE);
   12d4c:	80 e0       	ldi	r24, 0x00	; 0
   12d4e:	90 e0       	ldi	r25, 0x00	; 0
}
   12d50:	08 95       	ret

00012d52 <assign_value>:
/// @param[in] maxval: maximum value
/// @param[in] *val: value to set
///
/// @return  1 is matched and value in range, 0 not matched or out of range
bool assign_value(char *str, uint32_t minval, uint32_t maxval, uint32_t *val)
{
   12d52:	a0 e0       	ldi	r26, 0x00	; 0
   12d54:	b0 e0       	ldi	r27, 0x00	; 0
   12d56:	ef ea       	ldi	r30, 0xAF	; 175
   12d58:	f6 e9       	ldi	r31, 0x96	; 150
   12d5a:	0c 94 15 e8 	jmp	0x1d02a	; 0x1d02a <__prologue_saves__+0x4>
   12d5e:	2a 01       	movw	r4, r20
   12d60:	3b 01       	movw	r6, r22
   12d62:	48 01       	movw	r8, r16
   12d64:	59 01       	movw	r10, r18
   12d66:	87 01       	movw	r16, r14
    uint32_t tmp;
    int bad = 0;
    char *ptr;

    // Skip spaces before assignment
    ptr = skipspaces(str);
   12d68:	0e 94 81 32 	call	0x6502	; 0x6502 <skipspaces>
   12d6c:	ec 01       	movw	r28, r24
    // Skip optional '='
    if(*ptr == '=')
   12d6e:	88 81       	ld	r24, Y
   12d70:	8d 33       	cpi	r24, 0x3D	; 61
   12d72:	29 f4       	brne	.+10     	; 0x12d7e <assign_value+0x2c>
    {
        ++ptr;
        // skip spaces after assignment
        ptr = skipspaces(ptr);
   12d74:	ce 01       	movw	r24, r28
   12d76:	01 96       	adiw	r24, 0x01	; 1
   12d78:	0e 94 81 32 	call	0x6502	; 0x6502 <skipspaces>
   12d7c:	ec 01       	movw	r28, r24
    }
    if(!*ptr)
   12d7e:	88 81       	ld	r24, Y
   12d80:	81 11       	cpse	r24, r1
   12d82:	17 c0       	rjmp	.+46     	; 0x12db2 <assign_value+0x60>
    {
        if(debuglevel & 1)
   12d84:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   12d88:	80 ff       	sbrs	r24, 0
   12d8a:	76 c0       	rjmp	.+236    	; 0x12e78 <assign_value+0x126>
            printf("line:%d, missing value\n", lines);
   12d8c:	80 91 77 19 	lds	r24, 0x1977	; 0x801977 <lines+0x1>
   12d90:	8f 93       	push	r24
   12d92:	80 91 76 19 	lds	r24, 0x1976	; 0x801976 <lines>
   12d96:	8f 93       	push	r24
   12d98:	8b e4       	ldi	r24, 0x4B	; 75
   12d9a:	9f e1       	ldi	r25, 0x1F	; 31
   12d9c:	1f 92       	push	r1
   12d9e:	9f 93       	push	r25
   12da0:	8f 93       	push	r24
   12da2:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   12da6:	0f 90       	pop	r0
   12da8:	0f 90       	pop	r0
   12daa:	0f 90       	pop	r0
   12dac:	0f 90       	pop	r0
   12dae:	0f 90       	pop	r0
   12db0:	63 c0       	rjmp	.+198    	; 0x12e78 <assign_value+0x126>
        bad = 1;
    }
    if(!bad)
    {
        // FIXME detect bad numbers
        tmp = get_value(ptr);
   12db2:	ce 01       	movw	r24, r28
   12db4:	0e 94 36 34 	call	0x686c	; 0x686c <get_value>
   12db8:	6b 01       	movw	r12, r22
   12dba:	7c 01       	movw	r14, r24
        *val = tmp;
   12dbc:	f8 01       	movw	r30, r16
   12dbe:	60 83       	st	Z, r22
   12dc0:	71 83       	std	Z+1, r23	; 0x01
   12dc2:	82 83       	std	Z+2, r24	; 0x02
   12dc4:	93 83       	std	Z+3, r25	; 0x03
        if((minval && (tmp < minval)))
   12dc6:	41 14       	cp	r4, r1
   12dc8:	51 04       	cpc	r5, r1
   12dca:	61 04       	cpc	r6, r1
   12dcc:	71 04       	cpc	r7, r1
   12dce:	39 f1       	breq	.+78     	; 0x12e1e <assign_value+0xcc>
   12dd0:	c4 14       	cp	r12, r4
   12dd2:	d5 04       	cpc	r13, r5
   12dd4:	e6 04       	cpc	r14, r6
   12dd6:	f7 04       	cpc	r15, r7
   12dd8:	10 f5       	brcc	.+68     	; 0x12e1e <assign_value+0xcc>
        {
            printf("line:%d, %s is below range %d\n", lines, ptr,(int)minval);
   12dda:	5f 92       	push	r5
   12ddc:	4f 92       	push	r4
   12dde:	df 93       	push	r29
   12de0:	cf 93       	push	r28
   12de2:	80 91 77 19 	lds	r24, 0x1977	; 0x801977 <lines+0x1>
   12de6:	8f 93       	push	r24
   12de8:	80 91 76 19 	lds	r24, 0x1976	; 0x801976 <lines>
   12dec:	8f 93       	push	r24
   12dee:	8c e2       	ldi	r24, 0x2C	; 44
   12df0:	9f e1       	ldi	r25, 0x1F	; 31
   12df2:	1f 92       	push	r1
   12df4:	9f 93       	push	r25
   12df6:	8f 93       	push	r24
   12df8:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
            bad = 1;
        }
        if((maxval != 0xffffffffUL) && (tmp > maxval))
   12dfc:	ed b7       	in	r30, 0x3d	; 61
   12dfe:	fe b7       	in	r31, 0x3e	; 62
   12e00:	39 96       	adiw	r30, 0x09	; 9
   12e02:	0f b6       	in	r0, 0x3f	; 63
   12e04:	f8 94       	cli
   12e06:	fe bf       	out	0x3e, r31	; 62
   12e08:	0f be       	out	0x3f, r0	; 63
   12e0a:	ed bf       	out	0x3d, r30	; 61
   12e0c:	ff ef       	ldi	r31, 0xFF	; 255
   12e0e:	8f 16       	cp	r8, r31
   12e10:	9f 06       	cpc	r9, r31
   12e12:	af 06       	cpc	r10, r31
   12e14:	bf 06       	cpc	r11, r31
   12e16:	81 f1       	breq	.+96     	; 0x12e78 <assign_value+0x126>
        tmp = get_value(ptr);
        *val = tmp;
        if((minval && (tmp < minval)))
        {
            printf("line:%d, %s is below range %d\n", lines, ptr,(int)minval);
            bad = 1;
   12e18:	81 e0       	ldi	r24, 0x01	; 1
   12e1a:	90 e0       	ldi	r25, 0x00	; 0
   12e1c:	08 c0       	rjmp	.+16     	; 0x12e2e <assign_value+0xdc>
        }
        if((maxval != 0xffffffffUL) && (tmp > maxval))
   12e1e:	ff ef       	ldi	r31, 0xFF	; 255
   12e20:	8f 16       	cp	r8, r31
   12e22:	9f 06       	cpc	r9, r31
   12e24:	af 06       	cpc	r10, r31
   12e26:	bf 06       	cpc	r11, r31
   12e28:	21 f1       	breq	.+72     	; 0x12e72 <assign_value+0x120>
   12e2a:	80 e0       	ldi	r24, 0x00	; 0
   12e2c:	90 e0       	ldi	r25, 0x00	; 0
   12e2e:	8c 14       	cp	r8, r12
   12e30:	9d 04       	cpc	r9, r13
   12e32:	ae 04       	cpc	r10, r14
   12e34:	bf 04       	cpc	r11, r15
   12e36:	d0 f4       	brcc	.+52     	; 0x12e6c <assign_value+0x11a>
        {
            printf("line:%d, %s is above range %d\n", lines, ptr,(int)maxval);
   12e38:	9f 92       	push	r9
   12e3a:	8f 92       	push	r8
   12e3c:	df 93       	push	r29
   12e3e:	cf 93       	push	r28
   12e40:	80 91 77 19 	lds	r24, 0x1977	; 0x801977 <lines+0x1>
   12e44:	8f 93       	push	r24
   12e46:	80 91 76 19 	lds	r24, 0x1976	; 0x801976 <lines>
   12e4a:	8f 93       	push	r24
   12e4c:	8d e0       	ldi	r24, 0x0D	; 13
   12e4e:	9f e1       	ldi	r25, 0x1F	; 31
   12e50:	1f 92       	push	r1
   12e52:	9f 93       	push	r25
   12e54:	8f 93       	push	r24
   12e56:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   12e5a:	ed b7       	in	r30, 0x3d	; 61
   12e5c:	fe b7       	in	r31, 0x3e	; 62
   12e5e:	39 96       	adiw	r30, 0x09	; 9
   12e60:	0f b6       	in	r0, 0x3f	; 63
   12e62:	f8 94       	cli
   12e64:	fe bf       	out	0x3e, r31	; 62
   12e66:	0f be       	out	0x3f, r0	; 63
   12e68:	ed bf       	out	0x3d, r30	; 61
   12e6a:	06 c0       	rjmp	.+12     	; 0x12e78 <assign_value+0x126>
            bad = 1;
        }
    }
    if(bad)
        return(0);
   12e6c:	f1 e0       	ldi	r31, 0x01	; 1
   12e6e:	8f 27       	eor	r24, r31
   12e70:	05 c0       	rjmp	.+10     	; 0x12e7c <assign_value+0x12a>
    return(1);
   12e72:	81 e0       	ldi	r24, 0x01	; 1
   12e74:	90 e0       	ldi	r25, 0x00	; 0
   12e76:	02 c0       	rjmp	.+4      	; 0x12e7c <assign_value+0x12a>
            printf("line:%d, %s is above range %d\n", lines, ptr,(int)maxval);
            bad = 1;
        }
    }
    if(bad)
        return(0);
   12e78:	80 e0       	ldi	r24, 0x00	; 0
   12e7a:	90 e0       	ldi	r25, 0x00	; 0
    return(1);
}
   12e7c:	cd b7       	in	r28, 0x3d	; 61
   12e7e:	de b7       	in	r29, 0x3e	; 62
   12e80:	e0 e1       	ldi	r30, 0x10	; 16
   12e82:	0c 94 31 e8 	jmp	0x1d062	; 0x1d062 <__epilogue_restores__+0x4>

00012e86 <set_Config_Defaults>:

///@brief Set Defaults for any missing disk or printer devices
/// These are only used if the Config file omits them or is empty
/// @return  void
void set_Config_Defaults()
{
   12e86:	08 95       	ret

00012e88 <hpdir_init>:
/// disk parameters from a single hpdir disk entry
///
///@return void
void hpdir_init()
{
    memset(hpdir.model,0,sizeof(hpdir.model) -1);		// 1
   12e88:	8f e1       	ldi	r24, 0x1F	; 31
   12e8a:	e7 e0       	ldi	r30, 0x07	; 7
   12e8c:	f1 e2       	ldi	r31, 0x21	; 33
   12e8e:	df 01       	movw	r26, r30
   12e90:	98 2f       	mov	r25, r24
   12e92:	1d 92       	st	X+, r1
   12e94:	9a 95       	dec	r25
   12e96:	e9 f7       	brne	.-6      	; 0x12e92 <hpdir_init+0xa>
    memset(hpdir.comment,0,sizeof(hpdir.comment) -1);	// 2
   12e98:	9f e3       	ldi	r25, 0x3F	; 63
   12e9a:	e7 e2       	ldi	r30, 0x27	; 39
   12e9c:	f1 e2       	ldi	r31, 0x21	; 33
   12e9e:	df 01       	movw	r26, r30
   12ea0:	1d 92       	st	X+, r1
   12ea2:	9a 95       	dec	r25
   12ea4:	e9 f7       	brne	.-6      	; 0x12ea0 <hpdir_init+0x18>
    memset(hpdir.TYPE,0,sizeof(hpdir.TYPE) -1);		// 3
   12ea6:	e7 e6       	ldi	r30, 0x67	; 103
   12ea8:	f1 e2       	ldi	r31, 0x21	; 33
   12eaa:	df 01       	movw	r26, r30
   12eac:	1d 92       	st	X+, r1
   12eae:	8a 95       	dec	r24
   12eb0:	e9 f7       	brne	.-6      	; 0x12eac <hpdir_init+0x24>
    hpdir.ID = 0;						// 4
   12eb2:	10 92 87 21 	sts	0x2187, r1	; 0x802187 <hpdir+0x80>
   12eb6:	10 92 88 21 	sts	0x2188, r1	; 0x802188 <hpdir+0x81>
   12eba:	10 92 89 21 	sts	0x2189, r1	; 0x802189 <hpdir+0x82>
   12ebe:	10 92 8a 21 	sts	0x218A, r1	; 0x80218a <hpdir+0x83>
	hpdir.mask_stat2 = 0;				// 5
   12ec2:	10 92 8b 21 	sts	0x218B, r1	; 0x80218b <hpdir+0x84>
   12ec6:	10 92 8c 21 	sts	0x218C, r1	; 0x80218c <hpdir+0x85>
   12eca:	10 92 8d 21 	sts	0x218D, r1	; 0x80218d <hpdir+0x86>
   12ece:	10 92 8e 21 	sts	0x218E, r1	; 0x80218e <hpdir+0x87>
	hpdir.id_stat2 = 0;					// 6
   12ed2:	10 92 8f 21 	sts	0x218F, r1	; 0x80218f <hpdir+0x88>
   12ed6:	10 92 90 21 	sts	0x2190, r1	; 0x802190 <hpdir+0x89>
   12eda:	10 92 91 21 	sts	0x2191, r1	; 0x802191 <hpdir+0x8a>
   12ede:	10 92 92 21 	sts	0x2192, r1	; 0x802192 <hpdir+0x8b>
	hpdir.DEVICE_NUMBER = 0;			// 7
   12ee2:	10 92 93 21 	sts	0x2193, r1	; 0x802193 <hpdir+0x8c>
   12ee6:	10 92 94 21 	sts	0x2194, r1	; 0x802194 <hpdir+0x8d>
   12eea:	10 92 95 21 	sts	0x2195, r1	; 0x802195 <hpdir+0x8e>
   12eee:	10 92 96 21 	sts	0x2196, r1	; 0x802196 <hpdir+0x8f>
	hpdir.UNITS_INSTALLED = 0x8001;		// 8
   12ef2:	81 e0       	ldi	r24, 0x01	; 1
   12ef4:	90 e8       	ldi	r25, 0x80	; 128
   12ef6:	a0 e0       	ldi	r26, 0x00	; 0
   12ef8:	b0 e0       	ldi	r27, 0x00	; 0
   12efa:	80 93 97 21 	sts	0x2197, r24	; 0x802197 <hpdir+0x90>
   12efe:	90 93 98 21 	sts	0x2198, r25	; 0x802198 <hpdir+0x91>
   12f02:	a0 93 99 21 	sts	0x2199, r26	; 0x802199 <hpdir+0x92>
   12f06:	b0 93 9a 21 	sts	0x219A, r27	; 0x80219a <hpdir+0x93>
	hpdir.CYLINDERS = 0;  				// 9
   12f0a:	10 92 9b 21 	sts	0x219B, r1	; 0x80219b <hpdir+0x94>
   12f0e:	10 92 9c 21 	sts	0x219C, r1	; 0x80219c <hpdir+0x95>
   12f12:	10 92 9d 21 	sts	0x219D, r1	; 0x80219d <hpdir+0x96>
   12f16:	10 92 9e 21 	sts	0x219E, r1	; 0x80219e <hpdir+0x97>
	hpdir.HEADS= 0;	     				// 10
   12f1a:	10 92 9f 21 	sts	0x219F, r1	; 0x80219f <hpdir+0x98>
   12f1e:	10 92 a0 21 	sts	0x21A0, r1	; 0x8021a0 <hpdir+0x99>
   12f22:	10 92 a1 21 	sts	0x21A1, r1	; 0x8021a1 <hpdir+0x9a>
   12f26:	10 92 a2 21 	sts	0x21A2, r1	; 0x8021a2 <hpdir+0x9b>
	hpdir.SECTORS= 0;    				// 11
   12f2a:	10 92 a3 21 	sts	0x21A3, r1	; 0x8021a3 <hpdir+0x9c>
   12f2e:	10 92 a4 21 	sts	0x21A4, r1	; 0x8021a4 <hpdir+0x9d>
   12f32:	10 92 a5 21 	sts	0x21A5, r1	; 0x8021a5 <hpdir+0x9e>
   12f36:	10 92 a6 21 	sts	0x21A6, r1	; 0x8021a6 <hpdir+0x9f>
	hpdir.BYTES_PER_BLOCK = 0;			// 12
   12f3a:	10 92 a7 21 	sts	0x21A7, r1	; 0x8021a7 <hpdir+0xa0>
   12f3e:	10 92 a8 21 	sts	0x21A8, r1	; 0x8021a8 <hpdir+0xa1>
   12f42:	10 92 a9 21 	sts	0x21A9, r1	; 0x8021a9 <hpdir+0xa2>
   12f46:	10 92 aa 21 	sts	0x21AA, r1	; 0x8021aa <hpdir+0xa3>
	hpdir.INTERLEAVE = 0;				// 13
   12f4a:	10 92 ab 21 	sts	0x21AB, r1	; 0x8021ab <hpdir+0xa4>
   12f4e:	10 92 ac 21 	sts	0x21AC, r1	; 0x8021ac <hpdir+0xa5>
   12f52:	10 92 ad 21 	sts	0x21AD, r1	; 0x8021ad <hpdir+0xa6>
   12f56:	10 92 ae 21 	sts	0x21AE, r1	; 0x8021ae <hpdir+0xa7>
    hpdir.FIXED = 1;					// 14 ALWAYS 1
   12f5a:	81 e0       	ldi	r24, 0x01	; 1
   12f5c:	90 e0       	ldi	r25, 0x00	; 0
   12f5e:	a0 e0       	ldi	r26, 0x00	; 0
   12f60:	b0 e0       	ldi	r27, 0x00	; 0
   12f62:	80 93 af 21 	sts	0x21AF, r24	; 0x8021af <hpdir+0xa8>
   12f66:	90 93 b0 21 	sts	0x21B0, r25	; 0x8021b0 <hpdir+0xa9>
   12f6a:	a0 93 b1 21 	sts	0x21B1, r26	; 0x8021b1 <hpdir+0xaa>
   12f6e:	b0 93 b2 21 	sts	0x21B2, r27	; 0x8021b2 <hpdir+0xab>

	// Computed values
    hpdir.BLOCKS = 0;
   12f72:	10 92 b3 21 	sts	0x21B3, r1	; 0x8021b3 <hpdir+0xac>
   12f76:	10 92 b4 21 	sts	0x21B4, r1	; 0x8021b4 <hpdir+0xad>
   12f7a:	10 92 b5 21 	sts	0x21B5, r1	; 0x8021b5 <hpdir+0xae>
   12f7e:	10 92 b6 21 	sts	0x21B6, r1	; 0x8021b6 <hpdir+0xaf>
	hpdir.LIF_DIR_BLOCKS= 0;
   12f82:	10 92 b7 21 	sts	0x21B7, r1	; 0x8021b7 <hpdir+0xb0>
   12f86:	10 92 b8 21 	sts	0x21B8, r1	; 0x8021b8 <hpdir+0xb1>
   12f8a:	10 92 b9 21 	sts	0x21B9, r1	; 0x8021b9 <hpdir+0xb2>
   12f8e:	10 92 ba 21 	sts	0x21BA, r1	; 0x8021ba <hpdir+0xb3>
   12f92:	08 95       	ret

00012f94 <lif_dir_count>:
///@param[in] blocks: size of LIF image in total
///
///@return Size of LIF directory in blocks
long lif_dir_count(long blocks)
{
	int scale = 0;
   12f94:	20 e0       	ldi	r18, 0x00	; 0
   12f96:	30 e0       	ldi	r19, 0x00	; 0
	long num = 1;
	while(blocks)
   12f98:	61 15       	cp	r22, r1
   12f9a:	71 05       	cpc	r23, r1
   12f9c:	81 05       	cpc	r24, r1
   12f9e:	91 05       	cpc	r25, r1
   12fa0:	39 f0       	breq	.+14     	; 0x12fb0 <lif_dir_count+0x1c>
	{
		scale++;
   12fa2:	2f 5f       	subi	r18, 0xFF	; 255
   12fa4:	3f 4f       	sbci	r19, 0xFF	; 255
 		blocks >>= 1;
   12fa6:	95 95       	asr	r25
   12fa8:	87 95       	ror	r24
   12faa:	77 95       	ror	r23
   12fac:	67 95       	ror	r22
   12fae:	f4 cf       	rjmp	.-24     	; 0x12f98 <lif_dir_count+0x4>
	}
	scale>>=1;
   12fb0:	35 95       	asr	r19
   12fb2:	27 95       	ror	r18
///
///@return Size of LIF directory in blocks
long lif_dir_count(long blocks)
{
	int scale = 0;
	long num = 1;
   12fb4:	61 e0       	ldi	r22, 0x01	; 1
   12fb6:	70 e0       	ldi	r23, 0x00	; 0
   12fb8:	80 e0       	ldi	r24, 0x00	; 0
   12fba:	90 e0       	ldi	r25, 0x00	; 0
	{
		scale++;
 		blocks >>= 1;
	}
	scale>>=1;
	while(scale--)
   12fbc:	21 50       	subi	r18, 0x01	; 1
   12fbe:	31 09       	sbc	r19, r1
   12fc0:	28 f0       	brcs	.+10     	; 0x12fcc <lif_dir_count+0x38>
		num <<=1;
   12fc2:	66 0f       	add	r22, r22
   12fc4:	77 1f       	adc	r23, r23
   12fc6:	88 1f       	adc	r24, r24
   12fc8:	99 1f       	adc	r25, r25
   12fca:	f8 cf       	rjmp	.-16     	; 0x12fbc <lif_dir_count+0x28>
	return(num);
}
   12fcc:	08 95       	ret

00012fce <hpdir_parameters>:
///@param[in] model: model string
///@param[in] list: list flag
///
///@return 1 on sucess or 0 on fail
void hpdir_parameters(int index, char *model)
{
   12fce:	ae e8       	ldi	r26, 0x8E	; 142
   12fd0:	b1 e0       	ldi	r27, 0x01	; 1
   12fd2:	ed ee       	ldi	r30, 0xED	; 237
   12fd4:	f7 e9       	ldi	r31, 0x97	; 151
   12fd6:	0c 94 13 e8 	jmp	0x1d026	; 0x1d026 <__prologue_saves__>
   12fda:	4c 01       	movw	r8, r24
   12fdc:	76 2e       	mov	r7, r22
   12fde:	67 2e       	mov	r6, r23
    SS80DiskType *SS80p = NULL;
    AMIGODiskType *AMIGOp = NULL;
    char str[256];
    char token[128];

	if(Devices[index].TYPE == SS80_TYPE)
   12fe0:	8b e2       	ldi	r24, 0x2B	; 43
   12fe2:	88 9d       	mul	r24, r8
   12fe4:	f0 01       	movw	r30, r0
   12fe6:	89 9d       	mul	r24, r9
   12fe8:	f0 0d       	add	r31, r0
   12fea:	11 24       	eor	r1, r1
   12fec:	ed 5f       	subi	r30, 0xFD	; 253
   12fee:	f0 4e       	sbci	r31, 0xE0	; 224
   12ff0:	80 81       	ld	r24, Z
   12ff2:	83 30       	cpi	r24, 0x03	; 3
   12ff4:	29 f4       	brne	.+10     	; 0x13000 <hpdir_parameters+0x32>
	{
		SS80p = (SS80DiskType *) Devices[index].dev;
   12ff6:	a7 a0       	ldd	r10, Z+39	; 0x27
   12ff8:	b0 a4       	ldd	r11, Z+40	; 0x28
    uint32_t val;
    int errors = 0;
    int driveinfo=0;
	FILE *cfg;
    SS80DiskType *SS80p = NULL;
    AMIGODiskType *AMIGOp = NULL;
   12ffa:	21 2c       	mov	r2, r1
   12ffc:	31 2c       	mov	r3, r1
   12ffe:	0a c0       	rjmp	.+20     	; 0x13014 <hpdir_parameters+0x46>

	if(Devices[index].TYPE == SS80_TYPE)
	{
		SS80p = (SS80DiskType *) Devices[index].dev;
	}
	else if(Devices[index].TYPE == AMIGO_TYPE)
   13000:	81 30       	cpi	r24, 0x01	; 1
   13002:	29 f4       	brne	.+10     	; 0x1300e <hpdir_parameters+0x40>
	{
		AMIGOp = (AMIGODiskType *) Devices[index].dev;
   13004:	27 a0       	ldd	r2, Z+39	; 0x27
   13006:	30 a4       	ldd	r3, Z+40	; 0x28
	char *ptr;
    uint32_t val;
    int errors = 0;
    int driveinfo=0;
	FILE *cfg;
    SS80DiskType *SS80p = NULL;
   13008:	a1 2c       	mov	r10, r1
   1300a:	b1 2c       	mov	r11, r1
   1300c:	03 c0       	rjmp	.+6      	; 0x13014 <hpdir_parameters+0x46>
	{
		AMIGOp = (AMIGODiskType *) Devices[index].dev;
	}
	else
	{
		printf("hpdir_parameters invalid TYPE\n");
   1300e:	8e ee       	ldi	r24, 0xEE	; 238
   13010:	9e e1       	ldi	r25, 0x1E	; 30
		return;
	}

	hpdir_init();
   13012:	14 c0       	rjmp	.+40     	; 0x1303c <hpdir_parameters+0x6e>

	cfg = fopen("/hpdir.ini","rb");
   13014:	39 df       	rcall	.-398    	; 0x12e88 <hpdir_init>
   13016:	60 e7       	ldi	r22, 0x70	; 112
   13018:	78 e0       	ldi	r23, 0x08	; 8
   1301a:	84 e0       	ldi	r24, 0x04	; 4
   1301c:	9e e0       	ldi	r25, 0x0E	; 14
   1301e:	0e 94 96 7d 	call	0xfb2c	; 0xfb2c <fopen>
   13022:	cb 57       	subi	r28, 0x7B	; 123
   13024:	de 4f       	sbci	r29, 0xFE	; 254
   13026:	99 83       	std	Y+1, r25	; 0x01
   13028:	88 83       	st	Y, r24
   1302a:	c5 58       	subi	r28, 0x85	; 133
	if(cfg == NULL)
   1302c:	d1 40       	sbci	r29, 0x01	; 1
   1302e:	89 2b       	or	r24, r25
   13030:	19 f0       	breq	.+6      	; 0x13038 <hpdir_parameters+0x6a>
   13032:	00 e0       	ldi	r16, 0x00	; 0
   13034:	10 e0       	ldi	r17, 0x00	; 0
	{
		printf("Error: /hpdir.ini not found!\n");
   13036:	1b c0       	rjmp	.+54     	; 0x1306e <hpdir_parameters+0xa0>
   13038:	80 ed       	ldi	r24, 0xD0	; 208
   1303a:	9e e1       	ldi	r25, 0x1E	; 30
   1303c:	1f 92       	push	r1
   1303e:	9f 93       	push	r25
   13040:	8f 93       	push	r24
   13042:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
		return;
   13046:	0f 90       	pop	r0
   13048:	0f 90       	pop	r0
   1304a:	0f 90       	pop	r0
    {
		errors = 0;

        ptr = str;

        trim_tail(ptr);
   1304c:	3a c3       	rjmp	.+1652   	; 0x136c2 <hpdir_parameters+0x6f4>
   1304e:	ce 01       	movw	r24, r28
   13050:	01 96       	adiw	r24, 0x01	; 1
   13052:	0e 94 71 32 	call	0x64e2	; 0x64e2 <trim_tail>
        ptr = skipspaces(ptr);
   13056:	ce 01       	movw	r24, r28
   13058:	01 96       	adiw	r24, 0x01	; 1
   1305a:	0e 94 81 32 	call	0x6502	; 0x6502 <skipspaces>

        len = strlen(ptr);
   1305e:	fc 01       	movw	r30, r24
   13060:	01 90       	ld	r0, Z+
   13062:	00 20       	and	r0, r0
   13064:	e9 f7       	brne	.-6      	; 0x13060 <hpdir_parameters+0x92>
        if(!len)
   13066:	31 97       	sbiw	r30, 0x01	; 1
   13068:	8e 17       	cp	r24, r30
   1306a:	9f 07       	cpc	r25, r31
		printf("Error: /hpdir.ini not found!\n");
		return;
	}
	//printf("Searching /hpdir.ini for model:%s\n", model);

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   1306c:	79 f4       	brne	.+30     	; 0x1308c <hpdir_parameters+0xbe>
   1306e:	cb 57       	subi	r28, 0x7B	; 123
   13070:	de 4f       	sbci	r29, 0xFE	; 254
   13072:	48 81       	ld	r20, Y
   13074:	59 81       	ldd	r21, Y+1	; 0x01
   13076:	c5 58       	subi	r28, 0x85	; 133
   13078:	d1 40       	sbci	r29, 0x01	; 1
   1307a:	6e ef       	ldi	r22, 0xFE	; 254
   1307c:	70 e0       	ldi	r23, 0x00	; 0
   1307e:	ce 01       	movw	r24, r28
   13080:	01 96       	adiw	r24, 0x01	; 1
   13082:	0e 94 c7 75 	call	0xeb8e	; 0xeb8e <fgets>
   13086:	89 2b       	or	r24, r25
   13088:	11 f7       	brne	.-60     	; 0x1304e <hpdir_parameters+0x80>
        len = strlen(ptr);
        if(!len)
            continue;

        // Skip comments
        if(*ptr == ';' || *ptr == '#' )
   1308a:	13 c3       	rjmp	.+1574   	; 0x136b2 <hpdir_parameters+0x6e4>
   1308c:	dc 01       	movw	r26, r24
   1308e:	2c 91       	ld	r18, X
   13090:	2b 33       	cpi	r18, 0x3B	; 59
   13092:	69 f3       	breq	.-38     	; 0x1306e <hpdir_parameters+0xa0>
   13094:	23 32       	cpi	r18, 0x23	; 35
            continue;

		if(*ptr == '[' && driveinfo == 1 )
   13096:	59 f3       	breq	.-42     	; 0x1306e <hpdir_parameters+0xa0>
   13098:	2b 35       	cpi	r18, 0x5B	; 91
   1309a:	21 f4       	brne	.+8      	; 0x130a4 <hpdir_parameters+0xd6>
   1309c:	01 30       	cpi	r16, 0x01	; 1
   1309e:	11 05       	cpc	r17, r1
   130a0:	09 f4       	brne	.+2      	; 0x130a4 <hpdir_parameters+0xd6>
                break;

		// MODEL something else
		ptr = get_token(ptr, token, 	sizeof(token)-2);
   130a2:	07 c3       	rjmp	.+1550   	; 0x136b2 <hpdir_parameters+0x6e4>
   130a4:	4e e7       	ldi	r20, 0x7E	; 126
   130a6:	50 e0       	ldi	r21, 0x00	; 0
   130a8:	be 01       	movw	r22, r28
   130aa:	6f 5f       	subi	r22, 0xFF	; 255
   130ac:	7e 4f       	sbci	r23, 0xFE	; 254
   130ae:	0e 94 c1 33 	call	0x6782	; 0x6782 <get_token>

        if(MATCHI(token,"[driveinfo]"))
   130b2:	6c 01       	movw	r12, r24
   130b4:	6f e0       	ldi	r22, 0x0F	; 15
   130b6:	7e e0       	ldi	r23, 0x0E	; 14
   130b8:	ce 01       	movw	r24, r28
   130ba:	8f 5f       	subi	r24, 0xFF	; 255
   130bc:	9e 4f       	sbci	r25, 0xFE	; 254
   130be:	0e 94 37 33 	call	0x666e	; 0x666e <MATCHI>
   130c2:	89 2b       	or	r24, r25
        {
			driveinfo = 1;
   130c4:	19 f0       	breq	.+6      	; 0x130cc <hpdir_parameters+0xfe>
   130c6:	01 e0       	ldi	r16, 0x01	; 1
   130c8:	10 e0       	ldi	r17, 0x00	; 0
            continue;
        }

		if( driveinfo != 1)
   130ca:	d1 cf       	rjmp	.-94     	; 0x1306e <hpdir_parameters+0xa0>
   130cc:	01 30       	cpi	r16, 0x01	; 1
   130ce:	11 05       	cpc	r17, r1
			continue;

		if ( ! MATCHI(model,token) )
   130d0:	71 f6       	brne	.-100    	; 0x1306e <hpdir_parameters+0xa0>
   130d2:	be 01       	movw	r22, r28
   130d4:	6f 5f       	subi	r22, 0xFF	; 255
   130d6:	7e 4f       	sbci	r23, 0xFE	; 254
   130d8:	87 2d       	mov	r24, r7
   130da:	96 2d       	mov	r25, r6
   130dc:	0e 94 37 33 	call	0x666e	; 0x666e <MATCHI>
			continue;

		hpdir_init();
   130e0:	89 2b       	or	r24, r25
   130e2:	89 f3       	breq	.-30     	; 0x130c6 <hpdir_parameters+0xf8>
		printf("Found Model: %s\n", model);
   130e4:	d1 de       	rcall	.-606    	; 0x12e88 <hpdir_init>
   130e6:	6f 92       	push	r6
   130e8:	7f 92       	push	r7
   130ea:	8f eb       	ldi	r24, 0xBF	; 191
   130ec:	9e e1       	ldi	r25, 0x1E	; 30
   130ee:	1f 92       	push	r1
   130f0:	9f 93       	push	r25
   130f2:	8f 93       	push	r24
   130f4:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>

		strncpy(hpdir.model,token,sizeof(hpdir.model)-2);
   130f8:	4e e1       	ldi	r20, 0x1E	; 30
   130fa:	50 e0       	ldi	r21, 0x00	; 0
   130fc:	be 01       	movw	r22, r28
   130fe:	6f 5f       	subi	r22, 0xFF	; 255
   13100:	7e 4f       	sbci	r23, 0xFE	; 254
   13102:	87 e0       	ldi	r24, 0x07	; 7
   13104:	91 e2       	ldi	r25, 0x21	; 33
   13106:	0e 94 22 32 	call	0x6444	; 0x6444 <strncpy>

		// =
		ptr = get_token(ptr, token, 	sizeof(token)-2);
   1310a:	4e e7       	ldi	r20, 0x7E	; 126
   1310c:	50 e0       	ldi	r21, 0x00	; 0
   1310e:	be 01       	movw	r22, r28
   13110:	6f 5f       	subi	r22, 0xFF	; 255
   13112:	7e 4f       	sbci	r23, 0xFE	; 254
   13114:	c6 01       	movw	r24, r12
   13116:	0e 94 c1 33 	call	0x6782	; 0x6782 <get_token>

		// COMMENT
		ptr = get_token(ptr, hpdir.comment, sizeof(hpdir.comment)-2);
   1311a:	4e e3       	ldi	r20, 0x3E	; 62
   1311c:	50 e0       	ldi	r21, 0x00	; 0
   1311e:	67 e2       	ldi	r22, 0x27	; 39
   13120:	71 e2       	ldi	r23, 0x21	; 33
   13122:	0e 94 c1 33 	call	0x6782	; 0x6782 <get_token>

		// TYPE SS80/CS80/AMIGO
		ptr = get_token(ptr, hpdir.TYPE,  sizeof(hpdir.TYPE)-2);
   13126:	4e e1       	ldi	r20, 0x1E	; 30
   13128:	50 e0       	ldi	r21, 0x00	; 0
   1312a:	67 e6       	ldi	r22, 0x67	; 103
   1312c:	71 e2       	ldi	r23, 0x21	; 33
   1312e:	0e 94 c1 33 	call	0x6782	; 0x6782 <get_token>
		// Identify ID


		ptr = get_token(ptr, token, 		sizeof(token)-2);
   13132:	4e e7       	ldi	r20, 0x7E	; 126
   13134:	50 e0       	ldi	r21, 0x00	; 0
   13136:	be 01       	movw	r22, r28
   13138:	6f 5f       	subi	r22, 0xFF	; 255
   1313a:	7e 4f       	sbci	r23, 0xFE	; 254
   1313c:	0e 94 c1 33 	call	0x6782	; 0x6782 <get_token>
		if (!assign_value(token, 0, 0xFFFFUL, &val) )
   13140:	3c 01       	movw	r6, r24
   13142:	fe 01       	movw	r30, r28
   13144:	ef 57       	subi	r30, 0x7F	; 127
   13146:	fe 4f       	sbci	r31, 0xFE	; 254
   13148:	7f 01       	movw	r14, r30
   1314a:	0f ef       	ldi	r16, 0xFF	; 255
   1314c:	1f ef       	ldi	r17, 0xFF	; 255
   1314e:	20 e0       	ldi	r18, 0x00	; 0
   13150:	30 e0       	ldi	r19, 0x00	; 0
   13152:	40 e0       	ldi	r20, 0x00	; 0
   13154:	50 e0       	ldi	r21, 0x00	; 0
   13156:	ba 01       	movw	r22, r20
   13158:	ce 01       	movw	r24, r28
   1315a:	8f 5f       	subi	r24, 0xFF	; 255
   1315c:	9e 4f       	sbci	r25, 0xFE	; 254
	}
	//printf("Searching /hpdir.ini for model:%s\n", model);

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
		errors = 0;
   1315e:	f9 dd       	rcall	.-1038   	; 0x12d52 <assign_value>
   13160:	31 e0       	ldi	r19, 0x01	; 1
   13162:	20 e0       	ldi	r18, 0x00	; 0
   13164:	0f 90       	pop	r0
   13166:	0f 90       	pop	r0
   13168:	0f 90       	pop	r0
   1316a:	0f 90       	pop	r0
   1316c:	0f 90       	pop	r0
   1316e:	89 2b       	or	r24, r25
   13170:	09 f0       	breq	.+2      	; 0x13174 <hpdir_parameters+0x1a6>
   13172:	30 e0       	ldi	r19, 0x00	; 0
   13174:	c3 2e       	mov	r12, r19


		ptr = get_token(ptr, token, 		sizeof(token)-2);
		if (!assign_value(token, 0, 0xFFFFUL, &val) )
			++errors;
		hpdir.ID = val;						// 4
   13176:	d2 2e       	mov	r13, r18
   13178:	cf 57       	subi	r28, 0x7F	; 127
   1317a:	de 4f       	sbci	r29, 0xFE	; 254
   1317c:	88 81       	ld	r24, Y
   1317e:	99 81       	ldd	r25, Y+1	; 0x01
   13180:	aa 81       	ldd	r26, Y+2	; 0x02
   13182:	bb 81       	ldd	r27, Y+3	; 0x03
   13184:	c1 58       	subi	r28, 0x81	; 129
   13186:	d1 40       	sbci	r29, 0x01	; 1
   13188:	80 93 87 21 	sts	0x2187, r24	; 0x802187 <hpdir+0x80>
   1318c:	90 93 88 21 	sts	0x2188, r25	; 0x802188 <hpdir+0x81>
   13190:	a0 93 89 21 	sts	0x2189, r26	; 0x802189 <hpdir+0x82>
   13194:	b0 93 8a 21 	sts	0x218A, r27	; 0x80218a <hpdir+0x83>

		// MASK STAT2
		ptr = get_token(ptr, token, 		sizeof(token)-2);
   13198:	4e e7       	ldi	r20, 0x7E	; 126
   1319a:	50 e0       	ldi	r21, 0x00	; 0
   1319c:	be 01       	movw	r22, r28
   1319e:	6f 5f       	subi	r22, 0xFF	; 255
   131a0:	7e 4f       	sbci	r23, 0xFE	; 254
   131a2:	c3 01       	movw	r24, r6
   131a4:	0e 94 c1 33 	call	0x6782	; 0x6782 <get_token>
		if (!assign_value(token, 0, 0xFFUL, &val) )
   131a8:	3c 01       	movw	r6, r24
   131aa:	9e 01       	movw	r18, r28
   131ac:	2f 57       	subi	r18, 0x7F	; 127
   131ae:	3e 4f       	sbci	r19, 0xFE	; 254
   131b0:	79 01       	movw	r14, r18
   131b2:	0f ef       	ldi	r16, 0xFF	; 255
   131b4:	10 e0       	ldi	r17, 0x00	; 0
   131b6:	20 e0       	ldi	r18, 0x00	; 0
   131b8:	30 e0       	ldi	r19, 0x00	; 0
   131ba:	40 e0       	ldi	r20, 0x00	; 0
   131bc:	50 e0       	ldi	r21, 0x00	; 0
   131be:	ba 01       	movw	r22, r20
   131c0:	ce 01       	movw	r24, r28
   131c2:	8f 5f       	subi	r24, 0xFF	; 255
   131c4:	9e 4f       	sbci	r25, 0xFE	; 254
   131c6:	c5 dd       	rcall	.-1142   	; 0x12d52 <assign_value>
   131c8:	89 2b       	or	r24, r25
			++errors;
   131ca:	19 f4       	brne	.+6      	; 0x131d2 <hpdir_parameters+0x204>
   131cc:	3f ef       	ldi	r19, 0xFF	; 255
   131ce:	c3 1a       	sub	r12, r19
		hpdir.mask_stat2 = val;				// 5
   131d0:	d3 0a       	sbc	r13, r19
   131d2:	cf 57       	subi	r28, 0x7F	; 127
   131d4:	de 4f       	sbci	r29, 0xFE	; 254
   131d6:	88 81       	ld	r24, Y
   131d8:	99 81       	ldd	r25, Y+1	; 0x01
   131da:	aa 81       	ldd	r26, Y+2	; 0x02
   131dc:	bb 81       	ldd	r27, Y+3	; 0x03
   131de:	c1 58       	subi	r28, 0x81	; 129
   131e0:	d1 40       	sbci	r29, 0x01	; 1
   131e2:	80 93 8b 21 	sts	0x218B, r24	; 0x80218b <hpdir+0x84>
   131e6:	90 93 8c 21 	sts	0x218C, r25	; 0x80218c <hpdir+0x85>
   131ea:	a0 93 8d 21 	sts	0x218D, r26	; 0x80218d <hpdir+0x86>
   131ee:	b0 93 8e 21 	sts	0x218E, r27	; 0x80218e <hpdir+0x87>

		// STAT2
		ptr = get_token(ptr, token, 		sizeof(token)-2);
   131f2:	4e e7       	ldi	r20, 0x7E	; 126
   131f4:	50 e0       	ldi	r21, 0x00	; 0
   131f6:	be 01       	movw	r22, r28
   131f8:	6f 5f       	subi	r22, 0xFF	; 255
   131fa:	7e 4f       	sbci	r23, 0xFE	; 254
   131fc:	c3 01       	movw	r24, r6
   131fe:	0e 94 c1 33 	call	0x6782	; 0x6782 <get_token>
		if (!assign_value(token, 0, 0xFFUL, &val) )
   13202:	3c 01       	movw	r6, r24
   13204:	ae 01       	movw	r20, r28
   13206:	4f 57       	subi	r20, 0x7F	; 127
   13208:	5e 4f       	sbci	r21, 0xFE	; 254
   1320a:	7a 01       	movw	r14, r20
   1320c:	0f ef       	ldi	r16, 0xFF	; 255
   1320e:	10 e0       	ldi	r17, 0x00	; 0
   13210:	20 e0       	ldi	r18, 0x00	; 0
   13212:	30 e0       	ldi	r19, 0x00	; 0
   13214:	40 e0       	ldi	r20, 0x00	; 0
   13216:	50 e0       	ldi	r21, 0x00	; 0
   13218:	ba 01       	movw	r22, r20
   1321a:	ce 01       	movw	r24, r28
   1321c:	8f 5f       	subi	r24, 0xFF	; 255
   1321e:	9e 4f       	sbci	r25, 0xFE	; 254
   13220:	98 dd       	rcall	.-1232   	; 0x12d52 <assign_value>
   13222:	89 2b       	or	r24, r25
			++errors;
   13224:	19 f4       	brne	.+6      	; 0x1322c <hpdir_parameters+0x25e>
   13226:	5f ef       	ldi	r21, 0xFF	; 255
   13228:	c5 1a       	sub	r12, r21
		hpdir.id_stat2 = val;				// 6
   1322a:	d5 0a       	sbc	r13, r21
   1322c:	cf 57       	subi	r28, 0x7F	; 127
   1322e:	de 4f       	sbci	r29, 0xFE	; 254
   13230:	88 81       	ld	r24, Y
   13232:	99 81       	ldd	r25, Y+1	; 0x01
   13234:	aa 81       	ldd	r26, Y+2	; 0x02
   13236:	bb 81       	ldd	r27, Y+3	; 0x03
   13238:	c1 58       	subi	r28, 0x81	; 129
   1323a:	d1 40       	sbci	r29, 0x01	; 1
   1323c:	80 93 8f 21 	sts	0x218F, r24	; 0x80218f <hpdir+0x88>
   13240:	90 93 90 21 	sts	0x2190, r25	; 0x802190 <hpdir+0x89>
   13244:	a0 93 91 21 	sts	0x2191, r26	; 0x802191 <hpdir+0x8a>
   13248:	b0 93 92 21 	sts	0x2192, r27	; 0x802192 <hpdir+0x8b>

		// BCD encoded device number
		ptr = get_token(ptr, token, 		sizeof(token)-2);
   1324c:	4e e7       	ldi	r20, 0x7E	; 126
   1324e:	50 e0       	ldi	r21, 0x00	; 0
   13250:	be 01       	movw	r22, r28
   13252:	6f 5f       	subi	r22, 0xFF	; 255
   13254:	7e 4f       	sbci	r23, 0xFE	; 254
   13256:	c3 01       	movw	r24, r6
   13258:	0e 94 c1 33 	call	0x6782	; 0x6782 <get_token>
		if (!assign_value(token, 0, 0xffffffffUL, &val) )
   1325c:	3c 01       	movw	r6, r24
   1325e:	ce 01       	movw	r24, r28
   13260:	8f 57       	subi	r24, 0x7F	; 127
   13262:	9e 4f       	sbci	r25, 0xFE	; 254
   13264:	7c 01       	movw	r14, r24
   13266:	0f ef       	ldi	r16, 0xFF	; 255
   13268:	1f ef       	ldi	r17, 0xFF	; 255
   1326a:	98 01       	movw	r18, r16
   1326c:	40 e0       	ldi	r20, 0x00	; 0
   1326e:	50 e0       	ldi	r21, 0x00	; 0
   13270:	ba 01       	movw	r22, r20
   13272:	80 58       	subi	r24, 0x80	; 128
   13274:	91 09       	sbc	r25, r1
   13276:	6d dd       	rcall	.-1318   	; 0x12d52 <assign_value>
   13278:	89 2b       	or	r24, r25
			++errors;
   1327a:	19 f4       	brne	.+6      	; 0x13282 <hpdir_parameters+0x2b4>
   1327c:	9f ef       	ldi	r25, 0xFF	; 255
   1327e:	c9 1a       	sub	r12, r25
		hpdir.DEVICE_NUMBER = val;			// 7
   13280:	d9 0a       	sbc	r13, r25
   13282:	cf 57       	subi	r28, 0x7F	; 127
   13284:	de 4f       	sbci	r29, 0xFE	; 254
   13286:	88 81       	ld	r24, Y
   13288:	99 81       	ldd	r25, Y+1	; 0x01
   1328a:	aa 81       	ldd	r26, Y+2	; 0x02
   1328c:	bb 81       	ldd	r27, Y+3	; 0x03
   1328e:	c1 58       	subi	r28, 0x81	; 129
   13290:	d1 40       	sbci	r29, 0x01	; 1
   13292:	80 93 93 21 	sts	0x2193, r24	; 0x802193 <hpdir+0x8c>
   13296:	90 93 94 21 	sts	0x2194, r25	; 0x802194 <hpdir+0x8d>
   1329a:	a0 93 95 21 	sts	0x2195, r26	; 0x802195 <hpdir+0x8e>
   1329e:	b0 93 96 21 	sts	0x2196, r27	; 0x802196 <hpdir+0x8f>

		// UNITS Installed
		ptr = get_token(ptr, token, 		sizeof(token)-2);
   132a2:	4e e7       	ldi	r20, 0x7E	; 126
   132a4:	50 e0       	ldi	r21, 0x00	; 0
   132a6:	be 01       	movw	r22, r28
   132a8:	6f 5f       	subi	r22, 0xFF	; 255
   132aa:	7e 4f       	sbci	r23, 0xFE	; 254
   132ac:	c3 01       	movw	r24, r6
   132ae:	0e 94 c1 33 	call	0x6782	; 0x6782 <get_token>
		if (!assign_value(token, 0, 8, &val) )
   132b2:	3c 01       	movw	r6, r24
   132b4:	de 01       	movw	r26, r28
   132b6:	af 57       	subi	r26, 0x7F	; 127
   132b8:	be 4f       	sbci	r27, 0xFE	; 254
   132ba:	7d 01       	movw	r14, r26
   132bc:	08 e0       	ldi	r16, 0x08	; 8
   132be:	10 e0       	ldi	r17, 0x00	; 0
   132c0:	20 e0       	ldi	r18, 0x00	; 0
   132c2:	30 e0       	ldi	r19, 0x00	; 0
   132c4:	40 e0       	ldi	r20, 0x00	; 0
   132c6:	50 e0       	ldi	r21, 0x00	; 0
   132c8:	ba 01       	movw	r22, r20
   132ca:	ce 01       	movw	r24, r28
   132cc:	8f 5f       	subi	r24, 0xFF	; 255
   132ce:	9e 4f       	sbci	r25, 0xFE	; 254
   132d0:	40 dd       	rcall	.-1408   	; 0x12d52 <assign_value>
   132d2:	89 2b       	or	r24, r25
			++errors;
   132d4:	19 f4       	brne	.+6      	; 0x132dc <hpdir_parameters+0x30e>
   132d6:	bf ef       	ldi	r27, 0xFF	; 255
   132d8:	cb 1a       	sub	r12, r27
		hpdir.UNITS_INSTALLED = val;		// 8
   132da:	db 0a       	sbc	r13, r27
   132dc:	cf 57       	subi	r28, 0x7F	; 127
   132de:	de 4f       	sbci	r29, 0xFE	; 254
   132e0:	88 81       	ld	r24, Y
   132e2:	99 81       	ldd	r25, Y+1	; 0x01
   132e4:	aa 81       	ldd	r26, Y+2	; 0x02
   132e6:	bb 81       	ldd	r27, Y+3	; 0x03
   132e8:	c1 58       	subi	r28, 0x81	; 129
   132ea:	d1 40       	sbci	r29, 0x01	; 1
   132ec:	80 93 97 21 	sts	0x2197, r24	; 0x802197 <hpdir+0x90>
   132f0:	90 93 98 21 	sts	0x2198, r25	; 0x802198 <hpdir+0x91>
   132f4:	a0 93 99 21 	sts	0x2199, r26	; 0x802199 <hpdir+0x92>
   132f8:	b0 93 9a 21 	sts	0x219A, r27	; 0x80219a <hpdir+0x93>


		// Cylinders
		ptr = get_token(ptr, token, 		sizeof(token)-2);
   132fc:	4e e7       	ldi	r20, 0x7E	; 126
   132fe:	50 e0       	ldi	r21, 0x00	; 0
   13300:	be 01       	movw	r22, r28
   13302:	6f 5f       	subi	r22, 0xFF	; 255
   13304:	7e 4f       	sbci	r23, 0xFE	; 254
   13306:	c3 01       	movw	r24, r6
   13308:	0e 94 c1 33 	call	0x6782	; 0x6782 <get_token>
		if (!assign_value(token, 0, 0x00ffffffUL, &val) )
   1330c:	3c 01       	movw	r6, r24
   1330e:	fe 01       	movw	r30, r28
   13310:	ef 57       	subi	r30, 0x7F	; 127
   13312:	fe 4f       	sbci	r31, 0xFE	; 254
   13314:	7f 01       	movw	r14, r30
   13316:	0f ef       	ldi	r16, 0xFF	; 255
   13318:	1f ef       	ldi	r17, 0xFF	; 255
   1331a:	2f ef       	ldi	r18, 0xFF	; 255
   1331c:	30 e0       	ldi	r19, 0x00	; 0
   1331e:	40 e0       	ldi	r20, 0x00	; 0
   13320:	50 e0       	ldi	r21, 0x00	; 0
   13322:	ba 01       	movw	r22, r20
   13324:	ce 01       	movw	r24, r28
   13326:	8f 5f       	subi	r24, 0xFF	; 255
   13328:	9e 4f       	sbci	r25, 0xFE	; 254
   1332a:	13 dd       	rcall	.-1498   	; 0x12d52 <assign_value>
   1332c:	89 2b       	or	r24, r25
			++errors;
   1332e:	19 f4       	brne	.+6      	; 0x13336 <hpdir_parameters+0x368>
   13330:	ff ef       	ldi	r31, 0xFF	; 255
   13332:	cf 1a       	sub	r12, r31
		// Token is CYLINDERS, MAX_CYLINDER = CYLINDERS -1
		hpdir.CYLINDERS = val;				// 9
   13334:	df 0a       	sbc	r13, r31
   13336:	cf 57       	subi	r28, 0x7F	; 127
   13338:	de 4f       	sbci	r29, 0xFE	; 254
   1333a:	88 81       	ld	r24, Y
   1333c:	99 81       	ldd	r25, Y+1	; 0x01
   1333e:	aa 81       	ldd	r26, Y+2	; 0x02
   13340:	bb 81       	ldd	r27, Y+3	; 0x03
   13342:	c1 58       	subi	r28, 0x81	; 129
   13344:	d1 40       	sbci	r29, 0x01	; 1
   13346:	80 93 9b 21 	sts	0x219B, r24	; 0x80219b <hpdir+0x94>
   1334a:	90 93 9c 21 	sts	0x219C, r25	; 0x80219c <hpdir+0x95>
   1334e:	a0 93 9d 21 	sts	0x219D, r26	; 0x80219d <hpdir+0x96>
   13352:	b0 93 9e 21 	sts	0x219E, r27	; 0x80219e <hpdir+0x97>

		// Heads
		ptr = get_token(ptr, token, 		sizeof(token)-2);
   13356:	4e e7       	ldi	r20, 0x7E	; 126
   13358:	50 e0       	ldi	r21, 0x00	; 0
   1335a:	be 01       	movw	r22, r28
   1335c:	6f 5f       	subi	r22, 0xFF	; 255
   1335e:	7e 4f       	sbci	r23, 0xFE	; 254
   13360:	c3 01       	movw	r24, r6
   13362:	0e 94 c1 33 	call	0x6782	; 0x6782 <get_token>
		if (!assign_value(token, 0, 0xffffUL, &val) )
   13366:	3c 01       	movw	r6, r24
   13368:	9e 01       	movw	r18, r28
   1336a:	2f 57       	subi	r18, 0x7F	; 127
   1336c:	3e 4f       	sbci	r19, 0xFE	; 254
   1336e:	79 01       	movw	r14, r18
   13370:	0f ef       	ldi	r16, 0xFF	; 255
   13372:	1f ef       	ldi	r17, 0xFF	; 255
   13374:	20 e0       	ldi	r18, 0x00	; 0
   13376:	30 e0       	ldi	r19, 0x00	; 0
   13378:	40 e0       	ldi	r20, 0x00	; 0
   1337a:	50 e0       	ldi	r21, 0x00	; 0
   1337c:	ba 01       	movw	r22, r20
   1337e:	ce 01       	movw	r24, r28
   13380:	8f 5f       	subi	r24, 0xFF	; 255
   13382:	9e 4f       	sbci	r25, 0xFE	; 254
   13384:	e6 dc       	rcall	.-1588   	; 0x12d52 <assign_value>
   13386:	89 2b       	or	r24, r25
			++errors;
   13388:	19 f4       	brne	.+6      	; 0x13390 <hpdir_parameters+0x3c2>
   1338a:	3f ef       	ldi	r19, 0xFF	; 255
   1338c:	c3 1a       	sub	r12, r19
		// Token is HEADS, MAX_HEAD = HEADS -1
		hpdir.HEADS = val;					// 10
   1338e:	d3 0a       	sbc	r13, r19
   13390:	cf 57       	subi	r28, 0x7F	; 127
   13392:	de 4f       	sbci	r29, 0xFE	; 254
   13394:	88 81       	ld	r24, Y
   13396:	99 81       	ldd	r25, Y+1	; 0x01
   13398:	aa 81       	ldd	r26, Y+2	; 0x02
   1339a:	bb 81       	ldd	r27, Y+3	; 0x03
   1339c:	c1 58       	subi	r28, 0x81	; 129
   1339e:	d1 40       	sbci	r29, 0x01	; 1
   133a0:	80 93 9f 21 	sts	0x219F, r24	; 0x80219f <hpdir+0x98>
   133a4:	90 93 a0 21 	sts	0x21A0, r25	; 0x8021a0 <hpdir+0x99>
   133a8:	a0 93 a1 21 	sts	0x21A1, r26	; 0x8021a1 <hpdir+0x9a>
   133ac:	b0 93 a2 21 	sts	0x21A2, r27	; 0x8021a2 <hpdir+0x9b>

		// Sectors
		ptr = get_token(ptr, token, 		sizeof(token)-2);
   133b0:	4e e7       	ldi	r20, 0x7E	; 126
   133b2:	50 e0       	ldi	r21, 0x00	; 0
   133b4:	be 01       	movw	r22, r28
   133b6:	6f 5f       	subi	r22, 0xFF	; 255
   133b8:	7e 4f       	sbci	r23, 0xFE	; 254
   133ba:	c3 01       	movw	r24, r6
   133bc:	0e 94 c1 33 	call	0x6782	; 0x6782 <get_token>
		if (!assign_value(token, 0, 0xffffUL, &val) )
   133c0:	3c 01       	movw	r6, r24
   133c2:	ae 01       	movw	r20, r28
   133c4:	4f 57       	subi	r20, 0x7F	; 127
   133c6:	5e 4f       	sbci	r21, 0xFE	; 254
   133c8:	7a 01       	movw	r14, r20
   133ca:	0f ef       	ldi	r16, 0xFF	; 255
   133cc:	1f ef       	ldi	r17, 0xFF	; 255
   133ce:	20 e0       	ldi	r18, 0x00	; 0
   133d0:	30 e0       	ldi	r19, 0x00	; 0
   133d2:	40 e0       	ldi	r20, 0x00	; 0
   133d4:	50 e0       	ldi	r21, 0x00	; 0
   133d6:	ba 01       	movw	r22, r20
   133d8:	ce 01       	movw	r24, r28
   133da:	8f 5f       	subi	r24, 0xFF	; 255
   133dc:	9e 4f       	sbci	r25, 0xFE	; 254
   133de:	b9 dc       	rcall	.-1678   	; 0x12d52 <assign_value>
   133e0:	89 2b       	or	r24, r25
			++errors;
   133e2:	19 f4       	brne	.+6      	; 0x133ea <hpdir_parameters+0x41c>
   133e4:	5f ef       	ldi	r21, 0xFF	; 255
   133e6:	c5 1a       	sub	r12, r21
		// Token is SECTORS, MAX_SECTOR = SECTORS -1
		hpdir.SECTORS = val;				// 11
   133e8:	d5 0a       	sbc	r13, r21
   133ea:	cf 57       	subi	r28, 0x7F	; 127
   133ec:	de 4f       	sbci	r29, 0xFE	; 254
   133ee:	88 81       	ld	r24, Y
   133f0:	99 81       	ldd	r25, Y+1	; 0x01
   133f2:	aa 81       	ldd	r26, Y+2	; 0x02
   133f4:	bb 81       	ldd	r27, Y+3	; 0x03
   133f6:	c1 58       	subi	r28, 0x81	; 129
   133f8:	d1 40       	sbci	r29, 0x01	; 1
   133fa:	80 93 a3 21 	sts	0x21A3, r24	; 0x8021a3 <hpdir+0x9c>
   133fe:	90 93 a4 21 	sts	0x21A4, r25	; 0x8021a4 <hpdir+0x9d>
   13402:	a0 93 a5 21 	sts	0x21A5, r26	; 0x8021a5 <hpdir+0x9e>
   13406:	b0 93 a6 21 	sts	0x21A6, r27	; 0x8021a6 <hpdir+0x9f>

		// Bytes per sector
		ptr = get_token(ptr, token, 		sizeof(token)-2);
   1340a:	4e e7       	ldi	r20, 0x7E	; 126
   1340c:	50 e0       	ldi	r21, 0x00	; 0
   1340e:	be 01       	movw	r22, r28
   13410:	6f 5f       	subi	r22, 0xFF	; 255
   13412:	7e 4f       	sbci	r23, 0xFE	; 254
   13414:	c3 01       	movw	r24, r6
   13416:	0e 94 c1 33 	call	0x6782	; 0x6782 <get_token>
		if (!assign_value(token, 0, 0xffffUL, &val) )
   1341a:	3c 01       	movw	r6, r24
   1341c:	ce 01       	movw	r24, r28
   1341e:	8f 57       	subi	r24, 0x7F	; 127
   13420:	9e 4f       	sbci	r25, 0xFE	; 254
   13422:	7c 01       	movw	r14, r24
   13424:	0f ef       	ldi	r16, 0xFF	; 255
   13426:	1f ef       	ldi	r17, 0xFF	; 255
   13428:	20 e0       	ldi	r18, 0x00	; 0
   1342a:	30 e0       	ldi	r19, 0x00	; 0
   1342c:	40 e0       	ldi	r20, 0x00	; 0
   1342e:	50 e0       	ldi	r21, 0x00	; 0
   13430:	ba 01       	movw	r22, r20
   13432:	80 58       	subi	r24, 0x80	; 128
   13434:	91 09       	sbc	r25, r1
   13436:	8d dc       	rcall	.-1766   	; 0x12d52 <assign_value>
   13438:	89 2b       	or	r24, r25
			++errors;
   1343a:	19 f4       	brne	.+6      	; 0x13442 <hpdir_parameters+0x474>
   1343c:	9f ef       	ldi	r25, 0xFF	; 255
   1343e:	c9 1a       	sub	r12, r25
		hpdir.BYTES_PER_BLOCK = val;			// 12
   13440:	d9 0a       	sbc	r13, r25
   13442:	cf 57       	subi	r28, 0x7F	; 127
   13444:	de 4f       	sbci	r29, 0xFE	; 254
   13446:	88 81       	ld	r24, Y
   13448:	99 81       	ldd	r25, Y+1	; 0x01
   1344a:	aa 81       	ldd	r26, Y+2	; 0x02
   1344c:	bb 81       	ldd	r27, Y+3	; 0x03
   1344e:	c1 58       	subi	r28, 0x81	; 129
   13450:	d1 40       	sbci	r29, 0x01	; 1
   13452:	80 93 a7 21 	sts	0x21A7, r24	; 0x8021a7 <hpdir+0xa0>
   13456:	90 93 a8 21 	sts	0x21A8, r25	; 0x8021a8 <hpdir+0xa1>
   1345a:	a0 93 a9 21 	sts	0x21A9, r26	; 0x8021a9 <hpdir+0xa2>
   1345e:	b0 93 aa 21 	sts	0x21AA, r27	; 0x8021aa <hpdir+0xa3>

		// Interleave
		ptr = get_token(ptr, token, 		sizeof(token)-2);
   13462:	4e e7       	ldi	r20, 0x7E	; 126
   13464:	50 e0       	ldi	r21, 0x00	; 0
   13466:	be 01       	movw	r22, r28
   13468:	6f 5f       	subi	r22, 0xFF	; 255
   1346a:	7e 4f       	sbci	r23, 0xFE	; 254
   1346c:	c3 01       	movw	r24, r6
   1346e:	0e 94 c1 33 	call	0x6782	; 0x6782 <get_token>
		if (!assign_value(token, 0, 0xffffUL, &val) )
   13472:	de 01       	movw	r26, r28
   13474:	af 57       	subi	r26, 0x7F	; 127
   13476:	be 4f       	sbci	r27, 0xFE	; 254
   13478:	7d 01       	movw	r14, r26
   1347a:	0f ef       	ldi	r16, 0xFF	; 255
   1347c:	1f ef       	ldi	r17, 0xFF	; 255
   1347e:	20 e0       	ldi	r18, 0x00	; 0
   13480:	30 e0       	ldi	r19, 0x00	; 0
   13482:	40 e0       	ldi	r20, 0x00	; 0
   13484:	50 e0       	ldi	r21, 0x00	; 0
   13486:	ba 01       	movw	r22, r20
   13488:	ce 01       	movw	r24, r28
   1348a:	8f 5f       	subi	r24, 0xFF	; 255
   1348c:	9e 4f       	sbci	r25, 0xFE	; 254
   1348e:	61 dc       	rcall	.-1854   	; 0x12d52 <assign_value>
   13490:	89 2b       	or	r24, r25
			++errors;
   13492:	19 f4       	brne	.+6      	; 0x1349a <hpdir_parameters+0x4cc>
   13494:	bf ef       	ldi	r27, 0xFF	; 255
   13496:	cb 1a       	sub	r12, r27
		hpdir.INTERLEAVE = val;				// 13
   13498:	db 0a       	sbc	r13, r27
   1349a:	cf 57       	subi	r28, 0x7F	; 127
   1349c:	de 4f       	sbci	r29, 0xFE	; 254
   1349e:	88 81       	ld	r24, Y
   134a0:	99 81       	ldd	r25, Y+1	; 0x01
   134a2:	aa 81       	ldd	r26, Y+2	; 0x02
   134a4:	bb 81       	ldd	r27, Y+3	; 0x03
   134a6:	c1 58       	subi	r28, 0x81	; 129
   134a8:	d1 40       	sbci	r29, 0x01	; 1
   134aa:	80 93 ab 21 	sts	0x21AB, r24	; 0x8021ab <hpdir+0xa4>
   134ae:	90 93 ac 21 	sts	0x21AC, r25	; 0x8021ac <hpdir+0xa5>
   134b2:	a0 93 ad 21 	sts	0x21AD, r26	; 0x8021ad <hpdir+0xa6>
   134b6:	b0 93 ae 21 	sts	0x21AE, r27	; 0x8021ae <hpdir+0xa7>


		// Computed values
		hpdir.BLOCKS = ( hpdir.CYLINDERS * hpdir.HEADS * hpdir.SECTORS );
   134ba:	20 91 9b 21 	lds	r18, 0x219B	; 0x80219b <hpdir+0x94>
   134be:	30 91 9c 21 	lds	r19, 0x219C	; 0x80219c <hpdir+0x95>
   134c2:	40 91 9d 21 	lds	r20, 0x219D	; 0x80219d <hpdir+0x96>
   134c6:	50 91 9e 21 	lds	r21, 0x219E	; 0x80219e <hpdir+0x97>
   134ca:	c9 57       	subi	r28, 0x79	; 121
   134cc:	de 4f       	sbci	r29, 0xFE	; 254
   134ce:	28 83       	st	Y, r18
   134d0:	39 83       	std	Y+1, r19	; 0x01
   134d2:	4a 83       	std	Y+2, r20	; 0x02
   134d4:	5b 83       	std	Y+3, r21	; 0x03
   134d6:	c7 58       	subi	r28, 0x87	; 135
   134d8:	d1 40       	sbci	r29, 0x01	; 1
   134da:	10 91 9f 21 	lds	r17, 0x219F	; 0x80219f <hpdir+0x98>
   134de:	00 91 a0 21 	lds	r16, 0x21A0	; 0x8021a0 <hpdir+0x99>
   134e2:	80 91 a1 21 	lds	r24, 0x21A1	; 0x8021a1 <hpdir+0x9a>
   134e6:	90 91 a2 21 	lds	r25, 0x21A2	; 0x8021a2 <hpdir+0x9b>
   134ea:	20 91 a3 21 	lds	r18, 0x21A3	; 0x8021a3 <hpdir+0x9c>
   134ee:	30 91 a4 21 	lds	r19, 0x21A4	; 0x8021a4 <hpdir+0x9d>
   134f2:	40 91 a5 21 	lds	r20, 0x21A5	; 0x8021a5 <hpdir+0x9e>
   134f6:	50 91 a6 21 	lds	r21, 0x21A6	; 0x8021a6 <hpdir+0x9f>
   134fa:	c5 57       	subi	r28, 0x75	; 117
   134fc:	de 4f       	sbci	r29, 0xFE	; 254
   134fe:	28 83       	st	Y, r18
   13500:	39 83       	std	Y+1, r19	; 0x01
   13502:	4a 83       	std	Y+2, r20	; 0x02
   13504:	5b 83       	std	Y+3, r21	; 0x03
   13506:	cb 58       	subi	r28, 0x8B	; 139
   13508:	d1 40       	sbci	r29, 0x01	; 1
   1350a:	c9 57       	subi	r28, 0x79	; 121
   1350c:	de 4f       	sbci	r29, 0xFE	; 254
   1350e:	28 81       	ld	r18, Y
   13510:	39 81       	ldd	r19, Y+1	; 0x01
   13512:	4a 81       	ldd	r20, Y+2	; 0x02
   13514:	5b 81       	ldd	r21, Y+3	; 0x03
   13516:	c7 58       	subi	r28, 0x87	; 135
   13518:	d1 40       	sbci	r29, 0x01	; 1
   1351a:	61 2f       	mov	r22, r17
   1351c:	70 2f       	mov	r23, r16
   1351e:	0e 94 4f e7 	call	0x1ce9e	; 0x1ce9e <__mulsi3>
   13522:	9b 01       	movw	r18, r22
   13524:	ac 01       	movw	r20, r24
   13526:	c5 57       	subi	r28, 0x75	; 117
   13528:	de 4f       	sbci	r29, 0xFE	; 254
   1352a:	68 81       	ld	r22, Y
   1352c:	79 81       	ldd	r23, Y+1	; 0x01
   1352e:	8a 81       	ldd	r24, Y+2	; 0x02
   13530:	9b 81       	ldd	r25, Y+3	; 0x03
   13532:	cb 58       	subi	r28, 0x8B	; 139
   13534:	d1 40       	sbci	r29, 0x01	; 1
   13536:	0e 94 4f e7 	call	0x1ce9e	; 0x1ce9e <__mulsi3>
   1353a:	2b 01       	movw	r4, r22
   1353c:	3c 01       	movw	r6, r24
   1353e:	60 93 b3 21 	sts	0x21B3, r22	; 0x8021b3 <hpdir+0xac>
   13542:	70 93 b4 21 	sts	0x21B4, r23	; 0x8021b4 <hpdir+0xad>
   13546:	80 93 b5 21 	sts	0x21B5, r24	; 0x8021b5 <hpdir+0xae>


		hpdir.LIF_DIR_BLOCKS = lif_dir_count(hpdir.BLOCKS);
   1354a:	90 93 b6 21 	sts	0x21B6, r25	; 0x8021b6 <hpdir+0xaf>
   1354e:	22 dd       	rcall	.-1468   	; 0x12f94 <lif_dir_count>
   13550:	60 93 b7 21 	sts	0x21B7, r22	; 0x8021b7 <hpdir+0xb0>
   13554:	70 93 b8 21 	sts	0x21B8, r23	; 0x8021b8 <hpdir+0xb1>
   13558:	80 93 b9 21 	sts	0x21B9, r24	; 0x8021b9 <hpdir+0xb2>
   1355c:	90 93 ba 21 	sts	0x21BA, r25	; 0x8021ba <hpdir+0xb3>

		if(errors)
   13560:	c1 14       	cp	r12, r1
   13562:	d1 04       	cpc	r13, r1
		{
			printf("Error /hpdir.ini parsing\n");
   13564:	59 f0       	breq	.+22     	; 0x1357c <hpdir_parameters+0x5ae>
   13566:	85 ea       	ldi	r24, 0xA5	; 165
   13568:	9e e1       	ldi	r25, 0x1E	; 30
   1356a:	1f 92       	push	r1
   1356c:	9f 93       	push	r25
   1356e:	8f 93       	push	r24
   13570:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
			break;
   13574:	0f 90       	pop	r0
   13576:	0f 90       	pop	r0
   13578:	0f 90       	pop	r0
		}


		if(Devices[index].TYPE == SS80_TYPE)
   1357a:	9b c0       	rjmp	.+310    	; 0x136b2 <hpdir_parameters+0x6e4>
   1357c:	8b e2       	ldi	r24, 0x2B	; 43
   1357e:	88 9d       	mul	r24, r8
   13580:	f0 01       	movw	r30, r0
   13582:	89 9d       	mul	r24, r9
   13584:	f0 0d       	add	r31, r0
   13586:	11 24       	eor	r1, r1
   13588:	ed 5f       	subi	r30, 0xFD	; 253
   1358a:	f0 4e       	sbci	r31, 0xE0	; 224
   1358c:	80 81       	ld	r24, Z
   1358e:	83 30       	cpi	r24, 0x03	; 3
   13590:	09 f0       	breq	.+2      	; 0x13594 <hpdir_parameters+0x5c6>
		{
			SS80p->CONFIG.ID = hpdir.ID;
   13592:	44 c0       	rjmp	.+136    	; 0x1361c <hpdir_parameters+0x64e>
   13594:	80 91 87 21 	lds	r24, 0x2187	; 0x802187 <hpdir+0x80>
   13598:	90 91 88 21 	lds	r25, 0x2188	; 0x802188 <hpdir+0x81>
   1359c:	d5 01       	movw	r26, r10
   1359e:	94 96       	adiw	r26, 0x24	; 36
   135a0:	9c 93       	st	X, r25
   135a2:	8e 93       	st	-X, r24
			SS80p->UNIT.DEVICE_NUMBER = hpdir.DEVICE_NUMBER;
   135a4:	93 97       	sbiw	r26, 0x23	; 35
   135a6:	80 91 93 21 	lds	r24, 0x2193	; 0x802193 <hpdir+0x8c>
   135aa:	90 91 94 21 	lds	r25, 0x2194	; 0x802194 <hpdir+0x8d>
   135ae:	a0 91 95 21 	lds	r26, 0x2195	; 0x802195 <hpdir+0x8e>
   135b2:	b0 91 96 21 	lds	r27, 0x2196	; 0x802196 <hpdir+0x8f>
   135b6:	f5 01       	movw	r30, r10
   135b8:	83 a7       	std	Z+43, r24	; 0x2b
   135ba:	94 a7       	std	Z+44, r25	; 0x2c
   135bc:	a5 a7       	std	Z+45, r26	; 0x2d
			SS80p->UNIT.BYTES_PER_BLOCK = hpdir.BYTES_PER_BLOCK;
   135be:	b6 a7       	std	Z+46, r27	; 0x2e
   135c0:	80 91 a7 21 	lds	r24, 0x21A7	; 0x8021a7 <hpdir+0xa0>
   135c4:	90 91 a8 21 	lds	r25, 0x21A8	; 0x8021a8 <hpdir+0xa1>
   135c8:	90 ab       	std	Z+48, r25	; 0x30
			SS80p->VOLUME.MAX_CYLINDER = hpdir.CYLINDERS-1;
   135ca:	87 a7       	std	Z+47, r24	; 0x2f
   135cc:	fe 96       	adiw	r30, 0x3e	; 62
   135ce:	c9 57       	subi	r28, 0x79	; 121
   135d0:	de 4f       	sbci	r29, 0xFE	; 254
   135d2:	88 81       	ld	r24, Y
   135d4:	99 81       	ldd	r25, Y+1	; 0x01
   135d6:	aa 81       	ldd	r26, Y+2	; 0x02
   135d8:	bb 81       	ldd	r27, Y+3	; 0x03
   135da:	c7 58       	subi	r28, 0x87	; 135
   135dc:	d1 40       	sbci	r29, 0x01	; 1
   135de:	01 97       	sbiw	r24, 0x01	; 1
   135e0:	a1 09       	sbc	r26, r1
   135e2:	b1 09       	sbc	r27, r1
   135e4:	80 83       	st	Z, r24
   135e6:	91 83       	std	Z+1, r25	; 0x01
   135e8:	a2 83       	std	Z+2, r26	; 0x02
			SS80p->VOLUME.MAX_HEAD = hpdir.HEADS-1;
   135ea:	b3 83       	std	Z+3, r27	; 0x03
   135ec:	34 96       	adiw	r30, 0x04	; 4
   135ee:	8f ef       	ldi	r24, 0xFF	; 255
   135f0:	81 0f       	add	r24, r17
			SS80p->VOLUME.MAX_SECTOR = hpdir.SECTORS-1;
   135f2:	80 83       	st	Z, r24
   135f4:	31 96       	adiw	r30, 0x01	; 1
   135f6:	c5 57       	subi	r28, 0x75	; 117
   135f8:	de 4f       	sbci	r29, 0xFE	; 254
   135fa:	88 81       	ld	r24, Y
   135fc:	99 81       	ldd	r25, Y+1	; 0x01
   135fe:	cb 58       	subi	r28, 0x8B	; 139
   13600:	d1 40       	sbci	r29, 0x01	; 1
   13602:	01 97       	sbiw	r24, 0x01	; 1
   13604:	91 83       	std	Z+1, r25	; 0x01
			SS80p->VOLUME.MAX_BLOCK_NUMBER = hpdir.BLOCKS-1;
   13606:	80 83       	st	Z, r24
   13608:	32 96       	adiw	r30, 0x02	; 2
   1360a:	d3 01       	movw	r26, r6
   1360c:	c2 01       	movw	r24, r4
   1360e:	01 97       	sbiw	r24, 0x01	; 1
   13610:	a1 09       	sbc	r26, r1
   13612:	b1 09       	sbc	r27, r1
   13614:	80 83       	st	Z, r24
   13616:	91 83       	std	Z+1, r25	; 0x01
   13618:	a2 83       	std	Z+2, r26	; 0x02
		}

		if(Devices[index].TYPE == AMIGO_TYPE)
   1361a:	b3 83       	std	Z+3, r27	; 0x03
   1361c:	8b e2       	ldi	r24, 0x2B	; 43
   1361e:	88 9d       	mul	r24, r8
   13620:	f0 01       	movw	r30, r0
   13622:	89 9d       	mul	r24, r9
   13624:	f0 0d       	add	r31, r0
   13626:	11 24       	eor	r1, r1
   13628:	ed 5f       	subi	r30, 0xFD	; 253
   1362a:	f0 4e       	sbci	r31, 0xE0	; 224
   1362c:	80 81       	ld	r24, Z
   1362e:	81 30       	cpi	r24, 0x01	; 1
		{
			AMIGOp->CONFIG.ID = hpdir.ID;
   13630:	59 f5       	brne	.+86     	; 0x13688 <hpdir_parameters+0x6ba>
   13632:	80 91 87 21 	lds	r24, 0x2187	; 0x802187 <hpdir+0x80>
   13636:	90 91 88 21 	lds	r25, 0x2188	; 0x802188 <hpdir+0x81>
   1363a:	d1 01       	movw	r26, r2
   1363c:	94 96       	adiw	r26, 0x24	; 36
   1363e:	9c 93       	st	X, r25
   13640:	8e 93       	st	-X, r24
			AMIGOp->GEOMETRY.BYTES_PER_SECTOR = hpdir.BYTES_PER_BLOCK;
   13642:	93 97       	sbiw	r26, 0x23	; 35
   13644:	80 91 a7 21 	lds	r24, 0x21A7	; 0x8021a7 <hpdir+0xa0>
   13648:	90 91 a8 21 	lds	r25, 0x21A8	; 0x8021a8 <hpdir+0xa1>
   1364c:	96 96       	adiw	r26, 0x26	; 38
   1364e:	9c 93       	st	X, r25
   13650:	8e 93       	st	-X, r24
			AMIGOp->GEOMETRY.SECTORS_PER_TRACK = hpdir.SECTORS;
   13652:	95 97       	sbiw	r26, 0x25	; 37
   13654:	c5 57       	subi	r28, 0x75	; 117
   13656:	de 4f       	sbci	r29, 0xFE	; 254
   13658:	e8 81       	ld	r30, Y
   1365a:	f9 81       	ldd	r31, Y+1	; 0x01
   1365c:	cb 58       	subi	r28, 0x8B	; 139
   1365e:	d1 40       	sbci	r29, 0x01	; 1
   13660:	98 96       	adiw	r26, 0x28	; 40
   13662:	fc 93       	st	X, r31
   13664:	ee 93       	st	-X, r30
			AMIGOp->GEOMETRY.HEADS = hpdir.HEADS;
   13666:	97 97       	sbiw	r26, 0x27	; 39
   13668:	81 2f       	mov	r24, r17
   1366a:	90 2f       	mov	r25, r16
   1366c:	9a 96       	adiw	r26, 0x2a	; 42
   1366e:	9c 93       	st	X, r25
   13670:	8e 93       	st	-X, r24
			AMIGOp->GEOMETRY.CYLINDERS = hpdir.CYLINDERS;
   13672:	99 97       	sbiw	r26, 0x29	; 41
   13674:	c9 57       	subi	r28, 0x79	; 121
   13676:	de 4f       	sbci	r29, 0xFE	; 254
   13678:	28 81       	ld	r18, Y
   1367a:	39 81       	ldd	r19, Y+1	; 0x01
   1367c:	c7 58       	subi	r28, 0x87	; 135
   1367e:	d1 40       	sbci	r29, 0x01	; 1
   13680:	9c 96       	adiw	r26, 0x2c	; 44
   13682:	3c 93       	st	X, r19
   13684:	2e 93       	st	-X, r18
		}
		Devices[index].BLOCKS = hpdir.BLOCKS;
   13686:	9b 97       	sbiw	r26, 0x2b	; 43
   13688:	2b e2       	ldi	r18, 0x2B	; 43
   1368a:	28 9d       	mul	r18, r8
   1368c:	c0 01       	movw	r24, r0
   1368e:	29 9d       	mul	r18, r9
   13690:	90 0d       	add	r25, r0
   13692:	11 24       	eor	r1, r1
   13694:	fc 01       	movw	r30, r24
   13696:	ed 5f       	subi	r30, 0xFD	; 253
   13698:	f0 4e       	sbci	r31, 0xE0	; 224
   1369a:	43 82       	std	Z+3, r4	; 0x03
   1369c:	54 82       	std	Z+4, r5	; 0x04
   1369e:	65 82       	std	Z+5, r6	; 0x05
		strncpy(Devices[index].model, hpdir.model, sizeof(Devices[index].model) -1);
   136a0:	76 82       	std	Z+6, r7	; 0x06
   136a2:	4f e1       	ldi	r20, 0x1F	; 31
   136a4:	50 e0       	ldi	r21, 0x00	; 0
   136a6:	67 e0       	ldi	r22, 0x07	; 7
   136a8:	71 e2       	ldi	r23, 0x21	; 33
   136aa:	86 5f       	subi	r24, 0xF6	; 246
   136ac:	90 4e       	sbci	r25, 0xE0	; 224
   136ae:	0e 94 22 32 	call	0x6444	; 0x6444 <strncpy>

		break;

	}	// while
	fclose(cfg);
   136b2:	cb 57       	subi	r28, 0x7B	; 123
   136b4:	de 4f       	sbci	r29, 0xFE	; 254
   136b6:	88 81       	ld	r24, Y
   136b8:	99 81       	ldd	r25, Y+1	; 0x01
   136ba:	c5 58       	subi	r28, 0x85	; 133
   136bc:	d1 40       	sbci	r29, 0x01	; 1
   136be:	0e 94 40 7c 	call	0xf880	; 0xf880 <fclose>
	// printf("Done /hpdir.ini\n\n");
}
   136c2:	c2 57       	subi	r28, 0x72	; 114
   136c4:	de 4f       	sbci	r29, 0xFE	; 254
   136c6:	e2 e1       	ldi	r30, 0x12	; 18
   136c8:	0c 94 2f e8 	jmp	0x1d05e	; 0x1d05e <__epilogue_restores__>

000136cc <Read_Config>:
/// Set all drive parameters and debuglevel 
///
/// @param name: config file name to process
/// @return  number of parse errors
int Read_Config(char *name)
{
   136cc:	aa e9       	ldi	r26, 0x9A	; 154
   136ce:	b0 e0       	ldi	r27, 0x00	; 0
   136d0:	ec e6       	ldi	r30, 0x6C	; 108
   136d2:	fb e9       	ldi	r31, 0x9B	; 155
   136d4:	0c 94 13 e8 	jmp	0x1d026	; 0x1d026 <__prologue_saves__>
   136d8:	18 2f       	mov	r17, r24
#endif

    char *ptr;
    char str[128];

    init_Devices();
   136da:	09 2f       	mov	r16, r25

    lines = 0;
   136dc:	e6 da       	rcall	.-2612   	; 0x12caa <init_Devices>
   136de:	10 92 77 19 	sts	0x1977, r1	; 0x801977 <lines+0x1>
   136e2:	10 92 76 19 	sts	0x1976, r1	; 0x801976 <lines>

    printf("Reading: %s\n", name);
   136e6:	0f 93       	push	r16
   136e8:	1f 93       	push	r17
   136ea:	88 e9       	ldi	r24, 0x98	; 152
   136ec:	9e e1       	ldi	r25, 0x1E	; 30
   136ee:	1f 92       	push	r1
   136f0:	9f 93       	push	r25
   136f2:	8f 93       	push	r24
   136f4:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    cfg = fopen(name, "rb");
   136f8:	60 e7       	ldi	r22, 0x70	; 112
   136fa:	78 e0       	ldi	r23, 0x08	; 8
   136fc:	81 2f       	mov	r24, r17
   136fe:	90 2f       	mov	r25, r16
   13700:	0e 94 96 7d 	call	0xfb2c	; 0xfb2c <fopen>
   13704:	c9 57       	subi	r28, 0x79	; 121
   13706:	df 4f       	sbci	r29, 0xFF	; 255
   13708:	99 83       	std	Y+1, r25	; 0x01
   1370a:	88 83       	st	Y, r24
   1370c:	c7 58       	subi	r28, 0x87	; 135
    if(cfg == NULL)
   1370e:	d0 40       	sbci	r29, 0x00	; 0
   13710:	0f 90       	pop	r0
   13712:	0f 90       	pop	r0
   13714:	0f 90       	pop	r0
   13716:	0f 90       	pop	r0
   13718:	0f 90       	pop	r0
   1371a:	89 2b       	or	r24, r25
   1371c:	09 f4       	brne	.+2      	; 0x13720 <Read_Config+0x54>
   1371e:	53 c0       	rjmp	.+166    	; 0x137c6 <Read_Config+0xfa>
   13720:	21 2c       	mov	r2, r1
   13722:	31 2c       	mov	r3, r1
   13724:	41 2c       	mov	r4, r1
   13726:	51 2c       	mov	r5, r1
   13728:	cb 57       	subi	r28, 0x7B	; 123
   1372a:	df 4f       	sbci	r29, 0xFF	; 255
   1372c:	19 82       	std	Y+1, r1	; 0x01
   1372e:	18 82       	st	Y, r1
   13730:	c5 58       	subi	r28, 0x85	; 133
   13732:	d0 40       	sbci	r29, 0x00	; 0
   13734:	81 2c       	mov	r8, r1
   13736:	91 2c       	mov	r9, r1
   13738:	a1 2c       	mov	r10, r1
   1373a:	b1 2c       	mov	r11, r1
   1373c:	61 2c       	mov	r6, r1
            }
            break;
#endif // #ifdef AMIGO

        default:
            printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   1373e:	71 2c       	mov	r7, r1
   13740:	81 ed       	ldi	r24, 0xD1	; 209
   13742:	9b e1       	ldi	r25, 0x1B	; 27
   13744:	9c 01       	movw	r18, r24
   13746:	40 e0       	ldi	r20, 0x00	; 0
   13748:	c7 57       	subi	r28, 0x77	; 119
   1374a:	df 4f       	sbci	r29, 0xFF	; 255
   1374c:	28 83       	st	Y, r18
   1374e:	39 83       	std	Y+1, r19	; 0x01
   13750:	4a 83       	std	Y+2, r20	; 0x02
   13752:	c9 58       	subi	r28, 0x89	; 137
                    ++errors;
                AMIGOp->GEOMETRY.CYLINDERS = val;
            }
            else
            {
                printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   13754:	d0 40       	sbci	r29, 0x00	; 0
   13756:	83 ef       	ldi	r24, 0xF3	; 243
   13758:	9b e1       	ldi	r25, 0x1B	; 27
   1375a:	9c 01       	movw	r18, r24
   1375c:	40 e0       	ldi	r20, 0x00	; 0
   1375e:	c4 57       	subi	r28, 0x74	; 116
   13760:	df 4f       	sbci	r29, 0xFF	; 255
   13762:	28 83       	st	Y, r18
   13764:	39 83       	std	Y+1, r19	; 0x01
   13766:	4a 83       	std	Y+2, r20	; 0x02
   13768:	cc 58       	subi	r28, 0x8C	; 140
                    ++errors;
                AMIGOp->CONFIG.ID = val;
            }
            else
            {
                printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   1376a:	d0 40       	sbci	r29, 0x00	; 0
   1376c:	83 e2       	ldi	r24, 0x23	; 35
   1376e:	9c e1       	ldi	r25, 0x1C	; 28
   13770:	9c 01       	movw	r18, r24
   13772:	40 e0       	ldi	r20, 0x00	; 0
   13774:	c1 57       	subi	r28, 0x71	; 113
   13776:	df 4f       	sbci	r29, 0xFF	; 255
   13778:	28 83       	st	Y, r18
   1377a:	39 83       	std	Y+1, r19	; 0x01
   1377c:	4a 83       	std	Y+2, r20	; 0x02
   1377e:	cf 58       	subi	r28, 0x8F	; 143
                strncpy(AMIGOp->HEADER.NAME, ptr, sizeof(AMIGOp->HEADER.NAME)-1);
                AMIGOp->HEADER.NAME[sizeof(AMIGOp->HEADER.NAME)-1] = 0;
            }
            else
            {
                printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   13780:	d0 40       	sbci	r29, 0x00	; 0
   13782:	82 e5       	ldi	r24, 0x52	; 82
   13784:	9c e1       	ldi	r25, 0x1C	; 28
   13786:	9c 01       	movw	r18, r24
   13788:	40 e0       	ldi	r20, 0x00	; 0
   1378a:	ce 56       	subi	r28, 0x6E	; 110
   1378c:	df 4f       	sbci	r29, 0xFF	; 255
   1378e:	28 83       	st	Y, r18
   13790:	39 83       	std	Y+1, r19	; 0x01
   13792:	4a 83       	std	Y+2, r20	; 0x02
   13794:	c2 59       	subi	r28, 0x92	; 146

        case AMIGO_HEADER:
            if( (ind = token(ptr,"DRIVE")) )
            {
                ptr += ind;
                printf("Skipping %s, at line:%d\n", ptr,lines);
   13796:	d0 40       	sbci	r29, 0x00	; 0
   13798:	82 e8       	ldi	r24, 0x82	; 130
   1379a:	9c e1       	ldi	r25, 0x1C	; 28
   1379c:	9c 01       	movw	r18, r24
   1379e:	40 e0       	ldi	r20, 0x00	; 0
   137a0:	cb 56       	subi	r28, 0x6B	; 107
   137a2:	df 4f       	sbci	r29, 0xFF	; 255
   137a4:	28 83       	st	Y, r18
   137a6:	39 83       	std	Y+1, r19	; 0x01
   137a8:	4a 83       	std	Y+2, r20	; 0x02
   137aa:	c5 59       	subi	r28, 0x95	; 149
                push_state(state);
                state = AMIGO_GEOMETRY;
            }
            else
            {
                printf("Unexpected AMIGO START token: %s, at line:%d\n", ptr,lines);
   137ac:	d0 40       	sbci	r29, 0x00	; 0
   137ae:	8b e9       	ldi	r24, 0x9B	; 155
   137b0:	9c e1       	ldi	r25, 0x1C	; 28
   137b2:	9c 01       	movw	r18, r24
   137b4:	40 e0       	ldi	r20, 0x00	; 0
   137b6:	c8 56       	subi	r28, 0x68	; 104
   137b8:	df 4f       	sbci	r29, 0xFF	; 255
   137ba:	28 83       	st	Y, r18
   137bc:	39 83       	std	Y+1, r19	; 0x01
   137be:	4a 83       	std	Y+2, r20	; 0x02
   137c0:	c8 59       	subi	r28, 0x98	; 152
   137c2:	d0 40       	sbci	r29, 0x00	; 0
    cfg = fopen(name, "rb");
    if(cfg == NULL)
    {
        ++errors;
        //FIXME
        perror("Read_Config - open");
   137c4:	2f c0       	rjmp	.+94     	; 0x13824 <Read_Config+0x158>
   137c6:	8b e1       	ldi	r24, 0x1B	; 27
   137c8:	9e e0       	ldi	r25, 0x0E	; 14
   137ca:	0e 94 e0 77 	call	0xefc0	; 0xefc0 <perror>
        printf("Read_Config: open(%s) failed\n", name);
   137ce:	0f 93       	push	r16
   137d0:	1f 93       	push	r17
   137d2:	8a e7       	ldi	r24, 0x7A	; 122
   137d4:	9e e1       	ldi	r25, 0x1E	; 30
   137d6:	1f 92       	push	r1
   137d8:	9f 93       	push	r25
   137da:	8f 93       	push	r24
   137dc:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
        set_Config_Defaults();
        return(errors);
   137e0:	0f 90       	pop	r0
   137e2:	0f 90       	pop	r0
   137e4:	0f 90       	pop	r0
   137e6:	0f 90       	pop	r0
   137e8:	0f 90       	pop	r0
   137ea:	81 e0       	ldi	r24, 0x01	; 1
   137ec:	90 e0       	ldi	r25, 0x00	; 0
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
        ++lines;
   137ee:	e3 c7       	rjmp	.+4038   	; 0x147b6 <Read_Config+0x10ea>
   137f0:	80 91 76 19 	lds	r24, 0x1976	; 0x801976 <lines>
   137f4:	90 91 77 19 	lds	r25, 0x1977	; 0x801977 <lines+0x1>
   137f8:	01 96       	adiw	r24, 0x01	; 1
   137fa:	90 93 77 19 	sts	0x1977, r25	; 0x801977 <lines+0x1>
   137fe:	80 93 76 19 	sts	0x1976, r24	; 0x801976 <lines>

        ptr = str;

        trim_tail(ptr);
   13802:	ce 01       	movw	r24, r28
   13804:	01 96       	adiw	r24, 0x01	; 1
   13806:	0e 94 71 32 	call	0x64e2	; 0x64e2 <trim_tail>
        ptr = skipspaces(ptr);
   1380a:	ce 01       	movw	r24, r28
   1380c:	01 96       	adiw	r24, 0x01	; 1
   1380e:	0e 94 81 32 	call	0x6502	; 0x6502 <skipspaces>
        len = strlen(ptr);
   13812:	6c 01       	movw	r12, r24
   13814:	fc 01       	movw	r30, r24
   13816:	01 90       	ld	r0, Z+
   13818:	00 20       	and	r0, r0
   1381a:	e9 f7       	brne	.-6      	; 0x13816 <Read_Config+0x14a>
        if(!len)
   1381c:	31 97       	sbiw	r30, 0x01	; 1
   1381e:	8e 17       	cp	r24, r30
   13820:	9f 07       	cpc	r25, r31
        printf("Read_Config: open(%s) failed\n", name);
        set_Config_Defaults();
        return(errors);
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   13822:	79 f4       	brne	.+30     	; 0x13842 <Read_Config+0x176>
   13824:	c9 57       	subi	r28, 0x79	; 121
   13826:	df 4f       	sbci	r29, 0xFF	; 255
   13828:	48 81       	ld	r20, Y
   1382a:	59 81       	ldd	r21, Y+1	; 0x01
   1382c:	c7 58       	subi	r28, 0x87	; 135
   1382e:	d0 40       	sbci	r29, 0x00	; 0
   13830:	6e e7       	ldi	r22, 0x7E	; 126
   13832:	70 e0       	ldi	r23, 0x00	; 0
   13834:	ce 01       	movw	r24, r28
   13836:	01 96       	adiw	r24, 0x01	; 1
   13838:	0e 94 c7 75 	call	0xeb8e	; 0xeb8e <fgets>
   1383c:	89 2b       	or	r24, r25
   1383e:	c1 f6       	brne	.-80     	; 0x137f0 <Read_Config+0x124>
        ptr = skipspaces(ptr);
        len = strlen(ptr);
        if(!len)
            continue;
        // Skip comments
        if(*ptr == '#')
   13840:	6d c7       	rjmp	.+3802   	; 0x1471c <Read_Config+0x1050>
   13842:	dc 01       	movw	r26, r24
   13844:	8c 91       	ld	r24, X
   13846:	83 32       	cpi	r24, 0x23	; 35
            continue;

        //FIXME check for state and last state
        if(token(ptr,"END"))
   13848:	69 f3       	breq	.-38     	; 0x13824 <Read_Config+0x158>
   1384a:	6e e2       	ldi	r22, 0x2E	; 46
   1384c:	7e e0       	ldi	r23, 0x0E	; 14
   1384e:	c6 01       	movw	r24, r12
   13850:	0e 94 04 34 	call	0x6808	; 0x6808 <token>
        {
            state = pop_state();
   13854:	89 2b       	or	r24, r25
   13856:	19 f0       	breq	.+6      	; 0x1385e <Read_Config+0x192>
   13858:	65 da       	rcall	.-2870   	; 0x12d24 <pop_state>
            continue;
   1385a:	3c 01       	movw	r6, r24
        }

        switch(state)
   1385c:	e3 cf       	rjmp	.-58     	; 0x13824 <Read_Config+0x158>
   1385e:	b0 e1       	ldi	r27, 0x10	; 16
   13860:	6b 16       	cp	r6, r27
   13862:	71 04       	cpc	r7, r1
   13864:	08 f0       	brcs	.+2      	; 0x13868 <Read_Config+0x19c>
   13866:	3a c7       	rjmp	.+3700   	; 0x146dc <Read_Config+0x1010>
   13868:	f3 01       	movw	r30, r6
   1386a:	e0 53       	subi	r30, 0x30	; 48
   1386c:	ff 4f       	sbci	r31, 0xFF	; 255
   1386e:	0c 94 cf e7 	jmp	0x1cf9e	; 0x1cf9e <__tablejump2__>
        {
        case START_STATE:

            if( (ind = token(ptr,"SS80_DEFAULT") ))
   13872:	62 e3       	ldi	r22, 0x32	; 50
   13874:	7e e0       	ldi	r23, 0x0E	; 14
   13876:	c6 01       	movw	r24, r12
   13878:	0e 94 04 34 	call	0x6808	; 0x6808 <token>
            {
                push_state(state);
   1387c:	89 2b       	or	r24, r25
   1387e:	a1 f0       	breq	.+40     	; 0x138a8 <Read_Config+0x1dc>
				state = SS80_STATE;
				index = alloc_device(SS80_DEFAULT_TYPE);
   13880:	80 e0       	ldi	r24, 0x00	; 0
   13882:	90 e0       	ldi	r25, 0x00	; 0
   13884:	36 da       	rcall	.-2964   	; 0x12cf2 <push_state>
   13886:	82 e0       	ldi	r24, 0x02	; 2
   13888:	90 e0       	ldi	r25, 0x00	; 0
				if(index == -1)
   1388a:	5c d9       	rcall	.-3400   	; 0x12b44 <alloc_device>
   1388c:	4c 01       	movw	r8, r24
					state = START_STATE;
				else
					SS80p = (SS80DiskType *) Devices[index].dev;
   1388e:	01 96       	adiw	r24, 0x01	; 1
   13890:	49 f2       	breq	.-110    	; 0x13824 <Read_Config+0x158>
   13892:	8b e2       	ldi	r24, 0x2B	; 43
   13894:	88 9d       	mul	r24, r8
   13896:	f0 01       	movw	r30, r0
   13898:	89 9d       	mul	r24, r9
   1389a:	f0 0d       	add	r31, r0
   1389c:	11 24       	eor	r1, r1
   1389e:	ed 5f       	subi	r30, 0xFD	; 253
   138a0:	f0 4e       	sbci	r31, 0xE0	; 224
   138a2:	47 a0       	ldd	r4, Z+39	; 0x27
            }

            else if( (ind = token(ptr,"SS80") ))
   138a4:	50 a4       	ldd	r5, Z+40	; 0x28
   138a6:	24 c0       	rjmp	.+72     	; 0x138f0 <Read_Config+0x224>
   138a8:	6f e3       	ldi	r22, 0x3F	; 63
   138aa:	7e e0       	ldi	r23, 0x0E	; 14
   138ac:	c6 01       	movw	r24, r12
   138ae:	0e 94 04 34 	call	0x6808	; 0x6808 <token>
            {
                push_state(state);
   138b2:	8c 01       	movw	r16, r24
   138b4:	89 2b       	or	r24, r25
   138b6:	01 f1       	breq	.+64     	; 0x138f8 <Read_Config+0x22c>
				state = SS80_STATE;
				index = alloc_device(SS80_TYPE);
   138b8:	80 e0       	ldi	r24, 0x00	; 0
   138ba:	90 e0       	ldi	r25, 0x00	; 0
   138bc:	1a da       	rcall	.-3020   	; 0x12cf2 <push_state>
   138be:	83 e0       	ldi	r24, 0x03	; 3
   138c0:	90 e0       	ldi	r25, 0x00	; 0
				if(index == -1)
   138c2:	40 d9       	rcall	.-3456   	; 0x12b44 <alloc_device>
   138c4:	4c 01       	movw	r8, r24
   138c6:	01 96       	adiw	r24, 0x01	; 1
				{
					state = START_STATE;
				}
				else
				{
					SS80p = (SS80DiskType *) Devices[index].dev;
   138c8:	09 f4       	brne	.+2      	; 0x138cc <Read_Config+0x200>
   138ca:	ac cf       	rjmp	.-168    	; 0x13824 <Read_Config+0x158>
   138cc:	8b e2       	ldi	r24, 0x2B	; 43
   138ce:	88 9d       	mul	r24, r8
   138d0:	f0 01       	movw	r30, r0
   138d2:	89 9d       	mul	r24, r9
   138d4:	f0 0d       	add	r31, r0
   138d6:	11 24       	eor	r1, r1
   138d8:	ed 5f       	subi	r30, 0xFD	; 253
   138da:	f0 4e       	sbci	r31, 0xE0	; 224
					ptr += ind;
					ptr = skipspaces(ptr);
   138dc:	47 a0       	ldd	r4, Z+39	; 0x27
   138de:	50 a4       	ldd	r5, Z+40	; 0x28
   138e0:	c6 01       	movw	r24, r12
   138e2:	80 0f       	add	r24, r16
					hpdir_parameters(index,ptr);
   138e4:	91 1f       	adc	r25, r17
   138e6:	0e 94 81 32 	call	0x6502	; 0x6502 <skipspaces>
            }

            else if( (ind = token(ptr,"SS80") ))
            {
                push_state(state);
				state = SS80_STATE;
   138ea:	bc 01       	movw	r22, r24
   138ec:	c4 01       	movw	r24, r8
   138ee:	6f db       	rcall	.-2338   	; 0x12fce <hpdir_parameters>
   138f0:	66 24       	eor	r6, r6
					hpdir_parameters(index,ptr);
				}
			}

#ifdef AMIGO
            else if( (ind = token(ptr,"AMIGO")) )
   138f2:	63 94       	inc	r6
   138f4:	71 2c       	mov	r7, r1
   138f6:	96 cf       	rjmp	.-212    	; 0x13824 <Read_Config+0x158>
   138f8:	64 e4       	ldi	r22, 0x44	; 68
   138fa:	7e e0       	ldi	r23, 0x0E	; 14
   138fc:	c6 01       	movw	r24, r12
            {
                push_state(state);
   138fe:	0e 94 04 34 	call	0x6808	; 0x6808 <token>
   13902:	8c 01       	movw	r16, r24
   13904:	89 2b       	or	r24, r25
                state = AMIGO_STATE;
                index = alloc_device(AMIGO_TYPE);
   13906:	01 f1       	breq	.+64     	; 0x13948 <Read_Config+0x27c>
   13908:	80 e0       	ldi	r24, 0x00	; 0
   1390a:	90 e0       	ldi	r25, 0x00	; 0
   1390c:	f2 d9       	rcall	.-3100   	; 0x12cf2 <push_state>
   1390e:	81 e0       	ldi	r24, 0x01	; 1
                if(index == -1)
   13910:	90 e0       	ldi	r25, 0x00	; 0
   13912:	18 d9       	rcall	.-3536   	; 0x12b44 <alloc_device>
   13914:	4c 01       	movw	r8, r24
				{
                    state = START_STATE;
				}
                else
				{
                    AMIGOp = (AMIGODiskType *) Devices[index].dev;
   13916:	01 96       	adiw	r24, 0x01	; 1
   13918:	09 f4       	brne	.+2      	; 0x1391c <Read_Config+0x250>
   1391a:	84 cf       	rjmp	.-248    	; 0x13824 <Read_Config+0x158>
   1391c:	8b e2       	ldi	r24, 0x2B	; 43
   1391e:	88 9d       	mul	r24, r8
   13920:	f0 01       	movw	r30, r0
   13922:	89 9d       	mul	r24, r9
   13924:	f0 0d       	add	r31, r0
   13926:	11 24       	eor	r1, r1
   13928:	ed 5f       	subi	r30, 0xFD	; 253
					ptr += ind;
					ptr = skipspaces(ptr);
   1392a:	f0 4e       	sbci	r31, 0xE0	; 224
   1392c:	27 a0       	ldd	r2, Z+39	; 0x27
   1392e:	30 a4       	ldd	r3, Z+40	; 0x28
   13930:	c6 01       	movw	r24, r12
					hpdir_parameters(index,ptr);
   13932:	80 0f       	add	r24, r16
   13934:	91 1f       	adc	r25, r17
   13936:	0e 94 81 32 	call	0x6502	; 0x6502 <skipspaces>

#ifdef AMIGO
            else if( (ind = token(ptr,"AMIGO")) )
            {
                push_state(state);
                state = AMIGO_STATE;
   1393a:	bc 01       	movw	r22, r24
   1393c:	c4 01       	movw	r24, r8
   1393e:	47 db       	rcall	.-2418   	; 0x12fce <hpdir_parameters>
					ptr = skipspaces(ptr);
					hpdir_parameters(index,ptr);
				}
			}
#endif
            else if(token(ptr,"PRINTER"))
   13940:	aa e0       	ldi	r26, 0x0A	; 10
   13942:	6a 2e       	mov	r6, r26
   13944:	71 2c       	mov	r7, r1
   13946:	6e cf       	rjmp	.-292    	; 0x13824 <Read_Config+0x158>
   13948:	6a e4       	ldi	r22, 0x4A	; 74
   1394a:	7e e0       	ldi	r23, 0x0E	; 14
            {
                push_state(state);
   1394c:	c6 01       	movw	r24, r12
   1394e:	0e 94 04 34 	call	0x6808	; 0x6808 <token>
   13952:	89 2b       	or	r24, r25
                state = PRINTER_STATE;
                index = alloc_device(PRINTER_TYPE);
   13954:	f1 f0       	breq	.+60     	; 0x13992 <Read_Config+0x2c6>
   13956:	80 e0       	ldi	r24, 0x00	; 0
   13958:	90 e0       	ldi	r25, 0x00	; 0
   1395a:	cb d9       	rcall	.-3178   	; 0x12cf2 <push_state>
   1395c:	84 e0       	ldi	r24, 0x04	; 4
                if(index == -1)
   1395e:	90 e0       	ldi	r25, 0x00	; 0
   13960:	f1 d8       	rcall	.-3614   	; 0x12b44 <alloc_device>
   13962:	4c 01       	movw	r8, r24
                    state = START_STATE;
                else
                    PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
   13964:	01 96       	adiw	r24, 0x01	; 1
   13966:	09 f4       	brne	.+2      	; 0x1396a <Read_Config+0x29e>
   13968:	5d cf       	rjmp	.-326    	; 0x13824 <Read_Config+0x158>
   1396a:	8b e2       	ldi	r24, 0x2B	; 43
   1396c:	88 9d       	mul	r24, r8
   1396e:	f0 01       	movw	r30, r0
   13970:	89 9d       	mul	r24, r9
   13972:	f0 0d       	add	r31, r0
   13974:	11 24       	eor	r1, r1
   13976:	ed 5f       	subi	r30, 0xFD	; 253
   13978:	f0 4e       	sbci	r31, 0xE0	; 224
   1397a:	87 a1       	ldd	r24, Z+39	; 0x27
   1397c:	90 a5       	ldd	r25, Z+40	; 0x28
   1397e:	cb 57       	subi	r28, 0x7B	; 123
   13980:	df 4f       	sbci	r29, 0xFF	; 255
   13982:	99 83       	std	Y+1, r25	; 0x01
			}
#endif
            else if(token(ptr,"PRINTER"))
            {
                push_state(state);
                state = PRINTER_STATE;
   13984:	88 83       	st	Y, r24
   13986:	c5 58       	subi	r28, 0x85	; 133
   13988:	d0 40       	sbci	r29, 0x00	; 0
   1398a:	fe e0       	ldi	r31, 0x0E	; 14
                if(index == -1)
                    state = START_STATE;
                else
                    PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
            }
            else if( (ind = token(ptr,"DEBUG")) )
   1398c:	6f 2e       	mov	r6, r31
   1398e:	71 2c       	mov	r7, r1
   13990:	49 cf       	rjmp	.-366    	; 0x13824 <Read_Config+0x158>
   13992:	62 e5       	ldi	r22, 0x52	; 82
   13994:	7e e0       	ldi	r23, 0x0E	; 14
   13996:	c6 01       	movw	r24, r12
   13998:	0e 94 04 34 	call	0x6808	; 0x6808 <token>
            {
                ptr += ind;
                if ( assign_value(ptr, 0, 65535, &val) )
   1399c:	00 97       	sbiw	r24, 0x00	; 0
   1399e:	e1 f0       	breq	.+56     	; 0x139d8 <Read_Config+0x30c>
   139a0:	de 01       	movw	r26, r28
   139a2:	af 57       	subi	r26, 0x7F	; 127
   139a4:	bf 4f       	sbci	r27, 0xFF	; 255
   139a6:	7d 01       	movw	r14, r26
   139a8:	0f ef       	ldi	r16, 0xFF	; 255
   139aa:	1f ef       	ldi	r17, 0xFF	; 255
   139ac:	20 e0       	ldi	r18, 0x00	; 0
   139ae:	30 e0       	ldi	r19, 0x00	; 0
   139b0:	40 e0       	ldi	r20, 0x00	; 0
   139b2:	50 e0       	ldi	r21, 0x00	; 0
   139b4:	ba 01       	movw	r22, r20
   139b6:	8c 0d       	add	r24, r12
   139b8:	9d 1d       	adc	r25, r13
   139ba:	cb d9       	rcall	.-3178   	; 0x12d52 <assign_value>
                    debuglevel = val;
   139bc:	89 2b       	or	r24, r25
   139be:	09 f4       	brne	.+2      	; 0x139c2 <Read_Config+0x2f6>
   139c0:	31 cf       	rjmp	.-414    	; 0x13824 <Read_Config+0x158>
   139c2:	cf 57       	subi	r28, 0x7F	; 127
   139c4:	df 4f       	sbci	r29, 0xFF	; 255
   139c6:	88 81       	ld	r24, Y
   139c8:	99 81       	ldd	r25, Y+1	; 0x01
   139ca:	c1 58       	subi	r28, 0x81	; 129
   139cc:	d0 40       	sbci	r29, 0x00	; 0
   139ce:	90 93 be 01 	sts	0x01BE, r25	; 0x8001be <debuglevel+0x1>
            }
            else if( (ind = token(ptr,"PRINTER_DEFAULT_ADDRESS")) )
   139d2:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <debuglevel>
   139d6:	26 cf       	rjmp	.-436    	; 0x13824 <Read_Config+0x158>
   139d8:	68 e5       	ldi	r22, 0x58	; 88
   139da:	7e e0       	ldi	r23, 0x0E	; 14
   139dc:	c6 01       	movw	r24, r12
   139de:	0e 94 04 34 	call	0x6808	; 0x6808 <token>
   139e2:	30 91 77 19 	lds	r19, 0x1977	; 0x801977 <lines+0x1>
   139e6:	20 91 76 19 	lds	r18, 0x1976	; 0x801976 <lines>
            {
                ptr += ind;
                //FIXME REMOVE from config
                printf("Skipping %s, at line:%d\n", ptr,lines);
   139ea:	00 97       	sbiw	r24, 0x00	; 0
   139ec:	61 f0       	breq	.+24     	; 0x13a06 <Read_Config+0x33a>
   139ee:	3f 93       	push	r19
   139f0:	2f 93       	push	r18
   139f2:	c8 0e       	add	r12, r24
   139f4:	d9 1e       	adc	r13, r25
   139f6:	df 92       	push	r13
   139f8:	cf 92       	push	r12
   139fa:	81 e6       	ldi	r24, 0x61	; 97
   139fc:	9e e1       	ldi	r25, 0x1E	; 30
   139fe:	1f 92       	push	r1
            }
            else
            {
                printf("Unexpected START token: %s, at line:%d\n", ptr,lines);
   13a00:	9f 93       	push	r25
   13a02:	8f 93       	push	r24
   13a04:	e6 c4       	rjmp	.+2508   	; 0x143d2 <Read_Config+0xd06>
   13a06:	3f 93       	push	r19
   13a08:	2f 93       	push	r18
   13a0a:	df 92       	push	r13
                ++errors;
            }
            break;

        case PRINTER_STATE:
            if(token(ptr,"CONFIG"))
   13a0c:	cf 92       	push	r12
   13a0e:	89 e3       	ldi	r24, 0x39	; 57
   13a10:	9e e1       	ldi	r25, 0x1E	; 30
   13a12:	b3 c0       	rjmp	.+358    	; 0x13b7a <Read_Config+0x4ae>
   13a14:	60 e7       	ldi	r22, 0x70	; 112
   13a16:	7e e0       	ldi	r23, 0x0E	; 14
   13a18:	c6 01       	movw	r24, r12
            {
                push_state(state);
   13a1a:	0e 94 04 34 	call	0x6808	; 0x6808 <token>
   13a1e:	89 2b       	or	r24, r25
   13a20:	39 f0       	breq	.+14     	; 0x13a30 <Read_Config+0x364>
                state = PRINTER_CONFIG;
   13a22:	8e e0       	ldi	r24, 0x0E	; 14
   13a24:	90 e0       	ldi	r25, 0x00	; 0
   13a26:	65 d9       	rcall	.-3382   	; 0x12cf2 <push_state>
   13a28:	ef e0       	ldi	r30, 0x0F	; 15
            }
            else
            {
                printf("Unexpected PRINTER token: %s, at line:%d\n", ptr,lines);
   13a2a:	6e 2e       	mov	r6, r30
   13a2c:	71 2c       	mov	r7, r1
   13a2e:	fa ce       	rjmp	.-524    	; 0x13824 <Read_Config+0x158>
   13a30:	80 91 77 19 	lds	r24, 0x1977	; 0x801977 <lines+0x1>
   13a34:	8f 93       	push	r24
   13a36:	80 91 76 19 	lds	r24, 0x1976	; 0x801976 <lines>
   13a3a:	8f 93       	push	r24
   13a3c:	df 92       	push	r13
   13a3e:	cf 92       	push	r12
   13a40:	8f e0       	ldi	r24, 0x0F	; 15
   13a42:	9e e1       	ldi	r25, 0x1E	; 30
   13a44:	1f 92       	push	r1
                ++errors;
            }
            break;

        case PRINTER_CONFIG:
            if( (ind = token(ptr,"ADDRESS")) )
   13a46:	9f 93       	push	r25
   13a48:	8f 93       	push	r24
   13a4a:	8d c5       	rjmp	.+2842   	; 0x14566 <Read_Config+0xe9a>
   13a4c:	68 e6       	ldi	r22, 0x68	; 104
   13a4e:	7e e0       	ldi	r23, 0x0E	; 14
   13a50:	c6 01       	movw	r24, r12
            {
                ptr += ind;
                
                tmp = 0xff;
                if (!assign_value(ptr, 0, 14, &val) )
   13a52:	0e 94 04 34 	call	0x6808	; 0x6808 <token>
   13a56:	00 97       	sbiw	r24, 0x00	; 0
   13a58:	69 f1       	breq	.+90     	; 0x13ab4 <Read_Config+0x3e8>
   13a5a:	de 01       	movw	r26, r28
   13a5c:	af 57       	subi	r26, 0x7F	; 127
   13a5e:	bf 4f       	sbci	r27, 0xFF	; 255
   13a60:	7d 01       	movw	r14, r26
   13a62:	0e e0       	ldi	r16, 0x0E	; 14
   13a64:	10 e0       	ldi	r17, 0x00	; 0
   13a66:	20 e0       	ldi	r18, 0x00	; 0
   13a68:	30 e0       	ldi	r19, 0x00	; 0
   13a6a:	40 e0       	ldi	r20, 0x00	; 0
   13a6c:	50 e0       	ldi	r21, 0x00	; 0
   13a6e:	ba 01       	movw	r22, r20
   13a70:	8c 0d       	add	r24, r12
   13a72:	9d 1d       	adc	r25, r13
                    ++errors;
   13a74:	6e d9       	rcall	.-3364   	; 0x12d52 <assign_value>
   13a76:	89 2b       	or	r24, r25
   13a78:	29 f4       	brne	.+10     	; 0x13a84 <Read_Config+0x3b8>
        case PRINTER_CONFIG:
            if( (ind = token(ptr,"ADDRESS")) )
            {
                ptr += ind;
                
                tmp = 0xff;
   13a7a:	bf ef       	ldi	r27, 0xFF	; 255
   13a7c:	ab 1a       	sub	r10, r27
                if (!assign_value(ptr, 0, 14, &val) )
                    ++errors;
                else
                    tmp = val;
   13a7e:	bb 0a       	sbc	r11, r27
   13a80:	8f ef       	ldi	r24, 0xFF	; 255
   13a82:	05 c0       	rjmp	.+10     	; 0x13a8e <Read_Config+0x3c2>
   13a84:	cf 57       	subi	r28, 0x7F	; 127
   13a86:	df 4f       	sbci	r29, 0xFF	; 255
                Devices[index].ADDRESS = tmp;
   13a88:	88 81       	ld	r24, Y
   13a8a:	c1 58       	subi	r28, 0x81	; 129
   13a8c:	d0 40       	sbci	r29, 0x00	; 0
   13a8e:	9b e2       	ldi	r25, 0x2B	; 43
   13a90:	98 9d       	mul	r25, r8
   13a92:	f0 01       	movw	r30, r0
   13a94:	99 9d       	mul	r25, r9
   13a96:	f0 0d       	add	r31, r0
   13a98:	11 24       	eor	r1, r1
                PRINTERp->HEADER.ADDRESS  = tmp;
   13a9a:	ed 5f       	subi	r30, 0xFD	; 253
   13a9c:	f0 4e       	sbci	r31, 0xE0	; 224
   13a9e:	81 83       	std	Z+1, r24	; 0x01
   13aa0:	cb 57       	subi	r28, 0x7B	; 123
   13aa2:	df 4f       	sbci	r29, 0xFF	; 255
   13aa4:	a8 81       	ld	r26, Y
   13aa6:	b9 81       	ldd	r27, Y+1	; 0x01
                // NO PPR
                Devices[index].PPR = 0xff;
   13aa8:	c5 58       	subi	r28, 0x85	; 133
   13aaa:	d0 40       	sbci	r29, 0x00	; 0
   13aac:	8c 93       	st	X, r24
                PRINTERp->HEADER.PPR = 0xff;
            }
            else
            {
                printf("Unexpected PRINTER CONFIG token: %s, at line:%d\n", ptr,lines);
   13aae:	8f ef       	ldi	r24, 0xFF	; 255
   13ab0:	82 83       	std	Z+2, r24	; 0x02
   13ab2:	be c0       	rjmp	.+380    	; 0x13c30 <Read_Config+0x564>
   13ab4:	80 91 77 19 	lds	r24, 0x1977	; 0x801977 <lines+0x1>
   13ab8:	8f 93       	push	r24
   13aba:	80 91 76 19 	lds	r24, 0x1976	; 0x801976 <lines>
   13abe:	8f 93       	push	r24
   13ac0:	df 92       	push	r13
   13ac2:	cf 92       	push	r12
   13ac4:	8e ed       	ldi	r24, 0xDE	; 222
   13ac6:	9d e1       	ldi	r25, 0x1D	; 29
   13ac8:	1f 92       	push	r1
                ++errors;
   13aca:	9f 93       	push	r25
   13acc:	8f 93       	push	r24
   13ace:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
            }
            break;

        case SS80_STATE:
            if(token(ptr,"HEADER"))
   13ad2:	bf ef       	ldi	r27, 0xFF	; 255
   13ad4:	ab 1a       	sub	r10, r27
   13ad6:	bb 0a       	sbc	r11, r27
   13ad8:	1b c6       	rjmp	.+3126   	; 0x14710 <Read_Config+0x1044>
   13ada:	67 e7       	ldi	r22, 0x77	; 119
   13adc:	7e e0       	ldi	r23, 0x0E	; 14
   13ade:	c6 01       	movw	r24, r12
            {
                push_state(state);
   13ae0:	0e 94 04 34 	call	0x6808	; 0x6808 <token>
   13ae4:	89 2b       	or	r24, r25
                state = SS80_HEADER;
   13ae6:	39 f0       	breq	.+14     	; 0x13af6 <Read_Config+0x42a>
   13ae8:	81 e0       	ldi	r24, 0x01	; 1
   13aea:	90 e0       	ldi	r25, 0x00	; 0
   13aec:	02 d9       	rcall	.-3580   	; 0x12cf2 <push_state>
            }
            else if(token(ptr,"CONFIG"))
   13aee:	72 e0       	ldi	r23, 0x02	; 2
   13af0:	67 2e       	mov	r6, r23
   13af2:	71 2c       	mov	r7, r1
   13af4:	97 ce       	rjmp	.-722    	; 0x13824 <Read_Config+0x158>
   13af6:	60 e7       	ldi	r22, 0x70	; 112
   13af8:	7e e0       	ldi	r23, 0x0E	; 14
            {
                push_state(state);
   13afa:	c6 01       	movw	r24, r12
   13afc:	0e 94 04 34 	call	0x6808	; 0x6808 <token>
                state = SS80_CONFIG;
   13b00:	89 2b       	or	r24, r25
   13b02:	39 f0       	breq	.+14     	; 0x13b12 <Read_Config+0x446>
   13b04:	81 e0       	ldi	r24, 0x01	; 1
   13b06:	90 e0       	ldi	r25, 0x00	; 0
            }
            else if(token(ptr,"CONTROLLER"))
   13b08:	f4 d8       	rcall	.-3608   	; 0x12cf2 <push_state>
   13b0a:	63 e0       	ldi	r22, 0x03	; 3
   13b0c:	66 2e       	mov	r6, r22
   13b0e:	71 2c       	mov	r7, r1
   13b10:	89 ce       	rjmp	.-750    	; 0x13824 <Read_Config+0x158>
   13b12:	6e e7       	ldi	r22, 0x7E	; 126
            {
                push_state(state);
   13b14:	7e e0       	ldi	r23, 0x0E	; 14
   13b16:	c6 01       	movw	r24, r12
   13b18:	0e 94 04 34 	call	0x6808	; 0x6808 <token>
                state = SS80_CONTROLLER;
   13b1c:	89 2b       	or	r24, r25
   13b1e:	39 f0       	breq	.+14     	; 0x13b2e <Read_Config+0x462>
   13b20:	81 e0       	ldi	r24, 0x01	; 1
   13b22:	90 e0       	ldi	r25, 0x00	; 0
            }
            else if(token(ptr,"UNIT"))
   13b24:	e6 d8       	rcall	.-3636   	; 0x12cf2 <push_state>
   13b26:	54 e0       	ldi	r21, 0x04	; 4
   13b28:	65 2e       	mov	r6, r21
   13b2a:	71 2c       	mov	r7, r1
   13b2c:	7b ce       	rjmp	.-778    	; 0x13824 <Read_Config+0x158>
   13b2e:	69 e8       	ldi	r22, 0x89	; 137
            {
                push_state(state);
   13b30:	7e e0       	ldi	r23, 0x0E	; 14
   13b32:	c6 01       	movw	r24, r12
   13b34:	0e 94 04 34 	call	0x6808	; 0x6808 <token>
                state = SS80_UNIT;
   13b38:	89 2b       	or	r24, r25
   13b3a:	39 f0       	breq	.+14     	; 0x13b4a <Read_Config+0x47e>
   13b3c:	81 e0       	ldi	r24, 0x01	; 1
   13b3e:	90 e0       	ldi	r25, 0x00	; 0
            }
            else if(token(ptr,"VOLUME"))
   13b40:	d8 d8       	rcall	.-3664   	; 0x12cf2 <push_state>
   13b42:	45 e0       	ldi	r20, 0x05	; 5
   13b44:	64 2e       	mov	r6, r20
   13b46:	71 2c       	mov	r7, r1
   13b48:	6d ce       	rjmp	.-806    	; 0x13824 <Read_Config+0x158>
   13b4a:	6e e8       	ldi	r22, 0x8E	; 142
   13b4c:	7e e0       	ldi	r23, 0x0E	; 14
            {
                push_state(state);
   13b4e:	c6 01       	movw	r24, r12
   13b50:	0e 94 04 34 	call	0x6808	; 0x6808 <token>
   13b54:	89 2b       	or	r24, r25
                state = SS80_VOLUME;
   13b56:	39 f0       	breq	.+14     	; 0x13b66 <Read_Config+0x49a>
   13b58:	81 e0       	ldi	r24, 0x01	; 1
   13b5a:	90 e0       	ldi	r25, 0x00	; 0
   13b5c:	ca d8       	rcall	.-3692   	; 0x12cf2 <push_state>
            }
            else
            {
                printf("Unexpected SS80 START token: %s, at line:%d\n", ptr,lines);
   13b5e:	36 e0       	ldi	r19, 0x06	; 6
   13b60:	63 2e       	mov	r6, r19
   13b62:	71 2c       	mov	r7, r1
   13b64:	5f ce       	rjmp	.-834    	; 0x13824 <Read_Config+0x158>
   13b66:	80 91 77 19 	lds	r24, 0x1977	; 0x801977 <lines+0x1>
   13b6a:	8f 93       	push	r24
   13b6c:	80 91 76 19 	lds	r24, 0x1976	; 0x801976 <lines>
   13b70:	8f 93       	push	r24
   13b72:	df 92       	push	r13
   13b74:	cf 92       	push	r12
   13b76:	81 eb       	ldi	r24, 0xB1	; 177
            }
            break;


        case SS80_HEADER:
            if( (ind = token(ptr,"ADDRESS")) )
   13b78:	9d e1       	ldi	r25, 0x1D	; 29
   13b7a:	1f 92       	push	r1
   13b7c:	9f 93       	push	r25
   13b7e:	8f 93       	push	r24
   13b80:	a7 c5       	rjmp	.+2894   	; 0x146d0 <Read_Config+0x1004>
   13b82:	68 e6       	ldi	r22, 0x68	; 104
            {
                ptr += ind;
                tmp = 0xff;
                if (!assign_value(ptr, 0, 30, &val) )
   13b84:	7e e0       	ldi	r23, 0x0E	; 14
   13b86:	c6 01       	movw	r24, r12
   13b88:	0e 94 04 34 	call	0x6808	; 0x6808 <token>
   13b8c:	00 97       	sbiw	r24, 0x00	; 0
   13b8e:	29 f1       	breq	.+74     	; 0x13bda <Read_Config+0x50e>
   13b90:	de 01       	movw	r26, r28
   13b92:	af 57       	subi	r26, 0x7F	; 127
   13b94:	bf 4f       	sbci	r27, 0xFF	; 255
   13b96:	7d 01       	movw	r14, r26
   13b98:	0e e1       	ldi	r16, 0x1E	; 30
   13b9a:	10 e0       	ldi	r17, 0x00	; 0
   13b9c:	20 e0       	ldi	r18, 0x00	; 0
   13b9e:	30 e0       	ldi	r19, 0x00	; 0
   13ba0:	40 e0       	ldi	r20, 0x00	; 0
   13ba2:	50 e0       	ldi	r21, 0x00	; 0
   13ba4:	ba 01       	movw	r22, r20
                    ++errors;
   13ba6:	8c 0d       	add	r24, r12
   13ba8:	9d 1d       	adc	r25, r13
   13baa:	d3 d8       	rcall	.-3674   	; 0x12d52 <assign_value>

        case SS80_HEADER:
            if( (ind = token(ptr,"ADDRESS")) )
            {
                ptr += ind;
                tmp = 0xff;
   13bac:	89 2b       	or	r24, r25
   13bae:	29 f4       	brne	.+10     	; 0x13bba <Read_Config+0x4ee>
                if (!assign_value(ptr, 0, 30, &val) )
                    ++errors;
                else
                    tmp = val;
   13bb0:	bf ef       	ldi	r27, 0xFF	; 255
   13bb2:	ab 1a       	sub	r10, r27
   13bb4:	bb 0a       	sbc	r11, r27
   13bb6:	8f ef       	ldi	r24, 0xFF	; 255
   13bb8:	05 c0       	rjmp	.+10     	; 0x13bc4 <Read_Config+0x4f8>
                Devices[index].ADDRESS = tmp;
   13bba:	cf 57       	subi	r28, 0x7F	; 127
   13bbc:	df 4f       	sbci	r29, 0xFF	; 255
   13bbe:	88 81       	ld	r24, Y
   13bc0:	c1 58       	subi	r28, 0x81	; 129
   13bc2:	d0 40       	sbci	r29, 0x00	; 0
   13bc4:	9b e2       	ldi	r25, 0x2B	; 43
   13bc6:	98 9d       	mul	r25, r8
   13bc8:	f0 01       	movw	r30, r0
   13bca:	99 9d       	mul	r25, r9
                SS80p->HEADER.ADDRESS  = tmp;
   13bcc:	f0 0d       	add	r31, r0
            }
            else if( (ind = token(ptr,"PPR")) )
   13bce:	11 24       	eor	r1, r1
   13bd0:	ed 5f       	subi	r30, 0xFD	; 253
   13bd2:	f0 4e       	sbci	r31, 0xE0	; 224
   13bd4:	81 83       	std	Z+1, r24	; 0x01
   13bd6:	f2 01       	movw	r30, r4
   13bd8:	2b c4       	rjmp	.+2134   	; 0x14430 <Read_Config+0xd64>
   13bda:	65 e9       	ldi	r22, 0x95	; 149
            {
                ptr += ind;
                tmp = 0xff;
                if (!assign_value(ptr, 0, 7, &val) )
   13bdc:	7e e0       	ldi	r23, 0x0E	; 14
   13bde:	c6 01       	movw	r24, r12
   13be0:	0e 94 04 34 	call	0x6808	; 0x6808 <token>
   13be4:	00 97       	sbiw	r24, 0x00	; 0
   13be6:	39 f1       	breq	.+78     	; 0x13c36 <Read_Config+0x56a>
   13be8:	9e 01       	movw	r18, r28
   13bea:	2f 57       	subi	r18, 0x7F	; 127
   13bec:	3f 4f       	sbci	r19, 0xFF	; 255
   13bee:	79 01       	movw	r14, r18
   13bf0:	07 e0       	ldi	r16, 0x07	; 7
   13bf2:	10 e0       	ldi	r17, 0x00	; 0
   13bf4:	20 e0       	ldi	r18, 0x00	; 0
   13bf6:	30 e0       	ldi	r19, 0x00	; 0
   13bf8:	40 e0       	ldi	r20, 0x00	; 0
   13bfa:	50 e0       	ldi	r21, 0x00	; 0
   13bfc:	ba 01       	movw	r22, r20
                    ++errors;
   13bfe:	8c 0d       	add	r24, r12
   13c00:	9d 1d       	adc	r25, r13
   13c02:	a7 d8       	rcall	.-3762   	; 0x12d52 <assign_value>
                SS80p->HEADER.ADDRESS  = tmp;
            }
            else if( (ind = token(ptr,"PPR")) )
            {
                ptr += ind;
                tmp = 0xff;
   13c04:	89 2b       	or	r24, r25
   13c06:	29 f4       	brne	.+10     	; 0x13c12 <Read_Config+0x546>
                if (!assign_value(ptr, 0, 7, &val) )
                    ++errors;
                else
                    tmp = val;
   13c08:	3f ef       	ldi	r19, 0xFF	; 255
   13c0a:	a3 1a       	sub	r10, r19
   13c0c:	b3 0a       	sbc	r11, r19
   13c0e:	8f ef       	ldi	r24, 0xFF	; 255
   13c10:	05 c0       	rjmp	.+10     	; 0x13c1c <Read_Config+0x550>
                Devices[index].PPR = tmp;
   13c12:	cf 57       	subi	r28, 0x7F	; 127
   13c14:	df 4f       	sbci	r29, 0xFF	; 255
   13c16:	88 81       	ld	r24, Y
   13c18:	c1 58       	subi	r28, 0x81	; 129
   13c1a:	d0 40       	sbci	r29, 0x00	; 0
   13c1c:	9b e2       	ldi	r25, 0x2B	; 43
   13c1e:	98 9d       	mul	r25, r8
   13c20:	f0 01       	movw	r30, r0
   13c22:	99 9d       	mul	r25, r9
                SS80p->HEADER.PPR = tmp;
   13c24:	f0 0d       	add	r31, r0
   13c26:	11 24       	eor	r1, r1
   13c28:	ed 5f       	subi	r30, 0xFD	; 253
   13c2a:	f0 4e       	sbci	r31, 0xE0	; 224
            }
            else if( (ind = token(ptr,"FILE")) )
   13c2c:	82 83       	std	Z+2, r24	; 0x02
   13c2e:	d2 01       	movw	r26, r4
   13c30:	11 96       	adiw	r26, 0x01	; 1
   13c32:	8c 93       	st	X, r24
   13c34:	f7 cd       	rjmp	.-1042   	; 0x13824 <Read_Config+0x158>
   13c36:	69 e9       	ldi	r22, 0x99	; 153
   13c38:	7e e0       	ldi	r23, 0x0E	; 14
            {
                ptr += ind;
                ptr = skipspaces(ptr);
   13c3a:	c6 01       	movw	r24, r12
   13c3c:	0e 94 04 34 	call	0x6808	; 0x6808 <token>
   13c40:	00 97       	sbiw	r24, 0x00	; 0
                if(*ptr == '=')
   13c42:	a1 f0       	breq	.+40     	; 0x13c6c <Read_Config+0x5a0>
   13c44:	8c 0d       	add	r24, r12
   13c46:	9d 1d       	adc	r25, r13
   13c48:	0e 94 81 32 	call	0x6502	; 0x6502 <skipspaces>
                {
                    ++ptr;
                    ptr = skipspaces(ptr);
   13c4c:	fc 01       	movw	r30, r24
   13c4e:	20 81       	ld	r18, Z
                }
                strncpy(SS80p->HEADER.NAME,ptr, sizeof(SS80p->HEADER.NAME)-1);
   13c50:	2d 33       	cpi	r18, 0x3D	; 61
   13c52:	19 f4       	brne	.+6      	; 0x13c5a <Read_Config+0x58e>
   13c54:	01 96       	adiw	r24, 0x01	; 1
   13c56:	0e 94 81 32 	call	0x6502	; 0x6502 <skipspaces>
   13c5a:	40 e2       	ldi	r20, 0x20	; 32
   13c5c:	50 e0       	ldi	r21, 0x00	; 0
                SS80p->HEADER.NAME[sizeof(SS80p->HEADER.NAME)-1] = 0;
   13c5e:	bc 01       	movw	r22, r24
   13c60:	c2 01       	movw	r24, r4
            }
            else
            {
                printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   13c62:	02 96       	adiw	r24, 0x02	; 2
   13c64:	0e 94 22 32 	call	0x6444	; 0x6444 <strncpy>
   13c68:	d2 01       	movw	r26, r4
   13c6a:	2b c4       	rjmp	.+2134   	; 0x144c2 <Read_Config+0xdf6>
   13c6c:	80 91 77 19 	lds	r24, 0x1977	; 0x801977 <lines+0x1>
   13c70:	8f 93       	push	r24
   13c72:	80 91 76 19 	lds	r24, 0x1976	; 0x801976 <lines>
                ++errors;
            }
            break;

        case SS80_CONFIG:
            if( (ind = token(ptr,"ID")) )
   13c76:	8f 93       	push	r24
   13c78:	df 92       	push	r13
   13c7a:	cf 92       	push	r12
   13c7c:	83 e8       	ldi	r24, 0x83	; 131
   13c7e:	9d e1       	ldi	r25, 0x1D	; 29
   13c80:	23 cf       	rjmp	.-442    	; 0x13ac8 <Read_Config+0x3fc>
   13c82:	6e e9       	ldi	r22, 0x9E	; 158
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val))
   13c84:	7e e0       	ldi	r23, 0x0E	; 14
   13c86:	c6 01       	movw	r24, r12
   13c88:	0e 94 04 34 	call	0x6808	; 0x6808 <token>
   13c8c:	00 97       	sbiw	r24, 0x00	; 0
   13c8e:	f9 f0       	breq	.+62     	; 0x13cce <Read_Config+0x602>
   13c90:	9e 01       	movw	r18, r28
   13c92:	2f 57       	subi	r18, 0x7F	; 127
   13c94:	3f 4f       	sbci	r19, 0xFF	; 255
   13c96:	79 01       	movw	r14, r18
   13c98:	0f ef       	ldi	r16, 0xFF	; 255
   13c9a:	1f ef       	ldi	r17, 0xFF	; 255
   13c9c:	20 e0       	ldi	r18, 0x00	; 0
   13c9e:	30 e0       	ldi	r19, 0x00	; 0
   13ca0:	40 e0       	ldi	r20, 0x00	; 0
   13ca2:	50 e0       	ldi	r21, 0x00	; 0
   13ca4:	ba 01       	movw	r22, r20
                    ++errors;
   13ca6:	8c 0d       	add	r24, r12
   13ca8:	9d 1d       	adc	r25, r13
   13caa:	53 d8       	rcall	.-3930   	; 0x12d52 <assign_value>
                SS80p->CONFIG.ID = val;
   13cac:	89 2b       	or	r24, r25
   13cae:	19 f4       	brne	.+6      	; 0x13cb6 <Read_Config+0x5ea>
   13cb0:	3f ef       	ldi	r19, 0xFF	; 255
   13cb2:	a3 1a       	sub	r10, r19
   13cb4:	b3 0a       	sbc	r11, r19
   13cb6:	cf 57       	subi	r28, 0x7F	; 127
   13cb8:	df 4f       	sbci	r29, 0xFF	; 255
   13cba:	88 81       	ld	r24, Y
   13cbc:	99 81       	ldd	r25, Y+1	; 0x01
   13cbe:	c1 58       	subi	r28, 0x81	; 129
   13cc0:	d0 40       	sbci	r29, 0x00	; 0
   13cc2:	d2 01       	movw	r26, r4
            }
            else
            {
                printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   13cc4:	94 96       	adiw	r26, 0x24	; 36
   13cc6:	9c 93       	st	X, r25
   13cc8:	8e 93       	st	-X, r24
   13cca:	93 97       	sbiw	r26, 0x23	; 35
   13ccc:	ab cd       	rjmp	.-1194   	; 0x13824 <Read_Config+0x158>
   13cce:	80 91 77 19 	lds	r24, 0x1977	; 0x801977 <lines+0x1>
   13cd2:	8f 93       	push	r24
   13cd4:	80 91 76 19 	lds	r24, 0x1976	; 0x801976 <lines>
                ++errors;
            }
            break;

        case SS80_CONTROLLER:
            if( (ind = token(ptr,"UNITS_INSTALLED")) )
   13cd8:	8f 93       	push	r24
   13cda:	df 92       	push	r13
   13cdc:	cf 92       	push	r12
   13cde:	85 e5       	ldi	r24, 0x55	; 85
   13ce0:	9d e1       	ldi	r25, 0x1D	; 29
   13ce2:	f2 ce       	rjmp	.-540    	; 0x13ac8 <Read_Config+0x3fc>
   13ce4:	61 ea       	ldi	r22, 0xA1	; 161
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val))
   13ce6:	7e e0       	ldi	r23, 0x0E	; 14
   13ce8:	c6 01       	movw	r24, r12
   13cea:	0e 94 04 34 	call	0x6808	; 0x6808 <token>
   13cee:	00 97       	sbiw	r24, 0x00	; 0
   13cf0:	f9 f0       	breq	.+62     	; 0x13d30 <Read_Config+0x664>
   13cf2:	9e 01       	movw	r18, r28
   13cf4:	2f 57       	subi	r18, 0x7F	; 127
   13cf6:	3f 4f       	sbci	r19, 0xFF	; 255
   13cf8:	79 01       	movw	r14, r18
   13cfa:	0f ef       	ldi	r16, 0xFF	; 255
   13cfc:	1f ef       	ldi	r17, 0xFF	; 255
   13cfe:	20 e0       	ldi	r18, 0x00	; 0
   13d00:	30 e0       	ldi	r19, 0x00	; 0
   13d02:	40 e0       	ldi	r20, 0x00	; 0
   13d04:	50 e0       	ldi	r21, 0x00	; 0
   13d06:	ba 01       	movw	r22, r20
                    ++errors;
   13d08:	8c 0d       	add	r24, r12
   13d0a:	9d 1d       	adc	r25, r13
   13d0c:	22 d8       	rcall	.-4028   	; 0x12d52 <assign_value>
                SS80p->CONTROLLER.UNITS_INSTALLED = val;
   13d0e:	89 2b       	or	r24, r25
   13d10:	19 f4       	brne	.+6      	; 0x13d18 <Read_Config+0x64c>
   13d12:	3f ef       	ldi	r19, 0xFF	; 255
   13d14:	a3 1a       	sub	r10, r19
   13d16:	b3 0a       	sbc	r11, r19
   13d18:	cf 57       	subi	r28, 0x7F	; 127
   13d1a:	df 4f       	sbci	r29, 0xFF	; 255
   13d1c:	88 81       	ld	r24, Y
   13d1e:	99 81       	ldd	r25, Y+1	; 0x01
   13d20:	c1 58       	subi	r28, 0x81	; 129
   13d22:	d0 40       	sbci	r29, 0x00	; 0
   13d24:	d2 01       	movw	r26, r4
            }
            else if( (ind = token(ptr,"TRANSFER_RATE")) )
   13d26:	96 96       	adiw	r26, 0x26	; 38
   13d28:	9c 93       	st	X, r25
   13d2a:	8e 93       	st	-X, r24
   13d2c:	95 97       	sbiw	r26, 0x25	; 37
   13d2e:	7a cd       	rjmp	.-1292   	; 0x13824 <Read_Config+0x158>
   13d30:	69 e0       	ldi	r22, 0x09	; 9
   13d32:	7f e0       	ldi	r23, 0x0F	; 15
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val))
   13d34:	c6 01       	movw	r24, r12
   13d36:	0e 94 04 34 	call	0x6808	; 0x6808 <token>
   13d3a:	00 97       	sbiw	r24, 0x00	; 0
   13d3c:	e1 f0       	breq	.+56     	; 0x13d76 <Read_Config+0x6aa>
   13d3e:	fe 01       	movw	r30, r28
   13d40:	ef 57       	subi	r30, 0x7F	; 127
   13d42:	ff 4f       	sbci	r31, 0xFF	; 255
   13d44:	7f 01       	movw	r14, r30
   13d46:	0f ef       	ldi	r16, 0xFF	; 255
   13d48:	1f ef       	ldi	r17, 0xFF	; 255
   13d4a:	20 e0       	ldi	r18, 0x00	; 0
   13d4c:	30 e0       	ldi	r19, 0x00	; 0
   13d4e:	40 e0       	ldi	r20, 0x00	; 0
   13d50:	50 e0       	ldi	r21, 0x00	; 0
   13d52:	ba 01       	movw	r22, r20
   13d54:	8c 0d       	add	r24, r12
                    ++errors;
   13d56:	9d 1d       	adc	r25, r13
   13d58:	0e 94 a9 96 	call	0x12d52	; 0x12d52 <assign_value>
                SS80p->CONTROLLER.TRANSFER_RATE = val;
   13d5c:	89 2b       	or	r24, r25
   13d5e:	19 f4       	brne	.+6      	; 0x13d66 <Read_Config+0x69a>
   13d60:	ff ef       	ldi	r31, 0xFF	; 255
   13d62:	af 1a       	sub	r10, r31
   13d64:	bf 0a       	sbc	r11, r31
   13d66:	cf 57       	subi	r28, 0x7F	; 127
   13d68:	df 4f       	sbci	r29, 0xFF	; 255
   13d6a:	88 81       	ld	r24, Y
            }
            else if( (ind = token(ptr,"TYPE")) )
   13d6c:	99 81       	ldd	r25, Y+1	; 0x01
   13d6e:	c1 58       	subi	r28, 0x81	; 129
   13d70:	d0 40       	sbci	r29, 0x00	; 0
   13d72:	d2 01       	movw	r26, r4
   13d74:	45 c4       	rjmp	.+2186   	; 0x14600 <Read_Config+0xf34>
   13d76:	64 ee       	ldi	r22, 0xE4	; 228
   13d78:	7d e0       	ldi	r23, 0x0D	; 13
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val))
   13d7a:	c6 01       	movw	r24, r12
   13d7c:	0e 94 04 34 	call	0x6808	; 0x6808 <token>
   13d80:	00 97       	sbiw	r24, 0x00	; 0
   13d82:	e9 f0       	breq	.+58     	; 0x13dbe <Read_Config+0x6f2>
   13d84:	fe 01       	movw	r30, r28
   13d86:	ef 57       	subi	r30, 0x7F	; 127
   13d88:	ff 4f       	sbci	r31, 0xFF	; 255
   13d8a:	7f 01       	movw	r14, r30
   13d8c:	0f ef       	ldi	r16, 0xFF	; 255
   13d8e:	1f ef       	ldi	r17, 0xFF	; 255
   13d90:	20 e0       	ldi	r18, 0x00	; 0
   13d92:	30 e0       	ldi	r19, 0x00	; 0
   13d94:	40 e0       	ldi	r20, 0x00	; 0
   13d96:	50 e0       	ldi	r21, 0x00	; 0
   13d98:	ba 01       	movw	r22, r20
   13d9a:	8c 0d       	add	r24, r12
                    ++errors;
   13d9c:	9d 1d       	adc	r25, r13
   13d9e:	0e 94 a9 96 	call	0x12d52	; 0x12d52 <assign_value>
                SS80p->CONTROLLER.TYPE = val;
   13da2:	89 2b       	or	r24, r25
   13da4:	19 f4       	brne	.+6      	; 0x13dac <Read_Config+0x6e0>
   13da6:	ff ef       	ldi	r31, 0xFF	; 255
   13da8:	af 1a       	sub	r10, r31
   13daa:	bf 0a       	sbc	r11, r31
   13dac:	cf 57       	subi	r28, 0x7F	; 127
   13dae:	df 4f       	sbci	r29, 0xFF	; 255
   13db0:	88 81       	ld	r24, Y
   13db2:	c1 58       	subi	r28, 0x81	; 129
            }
            else
            {
                printf("Unexpected SS80 CONTROLLER token: %s, at line:%d\n", ptr,lines);
   13db4:	d0 40       	sbci	r29, 0x00	; 0
   13db6:	d2 01       	movw	r26, r4
   13db8:	99 96       	adiw	r26, 0x29	; 41
   13dba:	8c 93       	st	X, r24
   13dbc:	33 cd       	rjmp	.-1434   	; 0x13824 <Read_Config+0x158>
   13dbe:	80 91 77 19 	lds	r24, 0x1977	; 0x801977 <lines+0x1>
   13dc2:	8f 93       	push	r24
   13dc4:	80 91 76 19 	lds	r24, 0x1976	; 0x801976 <lines>
   13dc8:	8f 93       	push	r24
            }
            break;


        case SS80_UNIT:
            if( (ind = token(ptr,"UNIT_TYPE")) )
   13dca:	df 92       	push	r13
   13dcc:	cf 92       	push	r12
   13dce:	83 e2       	ldi	r24, 0x23	; 35
   13dd0:	9d e1       	ldi	r25, 0x1D	; 29
   13dd2:	7a ce       	rjmp	.-780    	; 0x13ac8 <Read_Config+0x3fc>
   13dd4:	61 eb       	ldi	r22, 0xB1	; 177
   13dd6:	7e e0       	ldi	r23, 0x0E	; 14
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val))
   13dd8:	c6 01       	movw	r24, r12
   13dda:	0e 94 04 34 	call	0x6808	; 0x6808 <token>
   13dde:	00 97       	sbiw	r24, 0x00	; 0
   13de0:	e9 f0       	breq	.+58     	; 0x13e1c <Read_Config+0x750>
   13de2:	9e 01       	movw	r18, r28
   13de4:	2f 57       	subi	r18, 0x7F	; 127
   13de6:	3f 4f       	sbci	r19, 0xFF	; 255
   13de8:	79 01       	movw	r14, r18
   13dea:	0f ef       	ldi	r16, 0xFF	; 255
   13dec:	1f ef       	ldi	r17, 0xFF	; 255
   13dee:	20 e0       	ldi	r18, 0x00	; 0
   13df0:	30 e0       	ldi	r19, 0x00	; 0
   13df2:	40 e0       	ldi	r20, 0x00	; 0
   13df4:	50 e0       	ldi	r21, 0x00	; 0
   13df6:	ba 01       	movw	r22, r20
   13df8:	8c 0d       	add	r24, r12
                    ++errors;
   13dfa:	9d 1d       	adc	r25, r13
   13dfc:	0e 94 a9 96 	call	0x12d52	; 0x12d52 <assign_value>
                SS80p->UNIT.UNIT_TYPE = val;
   13e00:	89 2b       	or	r24, r25
   13e02:	19 f4       	brne	.+6      	; 0x13e0a <Read_Config+0x73e>
   13e04:	3f ef       	ldi	r19, 0xFF	; 255
   13e06:	a3 1a       	sub	r10, r19
   13e08:	b3 0a       	sbc	r11, r19
   13e0a:	cf 57       	subi	r28, 0x7F	; 127
   13e0c:	df 4f       	sbci	r29, 0xFF	; 255
   13e0e:	88 81       	ld	r24, Y
   13e10:	c1 58       	subi	r28, 0x81	; 129
            }
            else if( (ind = token(ptr,"DEVICE_NUMBER")) )
   13e12:	d0 40       	sbci	r29, 0x00	; 0
   13e14:	d2 01       	movw	r26, r4
   13e16:	9a 96       	adiw	r26, 0x2a	; 42
   13e18:	8c 93       	st	X, r24
   13e1a:	04 cd       	rjmp	.-1528   	; 0x13824 <Read_Config+0x158>
   13e1c:	6b eb       	ldi	r22, 0xBB	; 187
   13e1e:	7e e0       	ldi	r23, 0x0E	; 14
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFFFFFUL, &val))
   13e20:	c6 01       	movw	r24, r12
   13e22:	0e 94 04 34 	call	0x6808	; 0x6808 <token>
   13e26:	00 97       	sbiw	r24, 0x00	; 0
   13e28:	09 f1       	breq	.+66     	; 0x13e6c <Read_Config+0x7a0>
   13e2a:	fe 01       	movw	r30, r28
   13e2c:	ef 57       	subi	r30, 0x7F	; 127
   13e2e:	ff 4f       	sbci	r31, 0xFF	; 255
   13e30:	7f 01       	movw	r14, r30
   13e32:	0f ef       	ldi	r16, 0xFF	; 255
   13e34:	1f ef       	ldi	r17, 0xFF	; 255
   13e36:	98 01       	movw	r18, r16
   13e38:	40 e0       	ldi	r20, 0x00	; 0
   13e3a:	50 e0       	ldi	r21, 0x00	; 0
   13e3c:	ba 01       	movw	r22, r20
   13e3e:	8c 0d       	add	r24, r12
                    ++errors;
   13e40:	9d 1d       	adc	r25, r13
   13e42:	0e 94 a9 96 	call	0x12d52	; 0x12d52 <assign_value>
                SS80p->UNIT.DEVICE_NUMBER = val;
   13e46:	89 2b       	or	r24, r25
   13e48:	19 f4       	brne	.+6      	; 0x13e50 <Read_Config+0x784>
   13e4a:	ff ef       	ldi	r31, 0xFF	; 255
   13e4c:	af 1a       	sub	r10, r31
   13e4e:	bf 0a       	sbc	r11, r31
   13e50:	cf 57       	subi	r28, 0x7F	; 127
   13e52:	df 4f       	sbci	r29, 0xFF	; 255
   13e54:	88 81       	ld	r24, Y
   13e56:	99 81       	ldd	r25, Y+1	; 0x01
   13e58:	aa 81       	ldd	r26, Y+2	; 0x02
   13e5a:	bb 81       	ldd	r27, Y+3	; 0x03
   13e5c:	c1 58       	subi	r28, 0x81	; 129
   13e5e:	d0 40       	sbci	r29, 0x00	; 0
   13e60:	f2 01       	movw	r30, r4
            }
            else if( (ind = token(ptr,"BYTES_PER_BLOCK")) )
   13e62:	83 a7       	std	Z+43, r24	; 0x2b
   13e64:	94 a7       	std	Z+44, r25	; 0x2c
   13e66:	a5 a7       	std	Z+45, r26	; 0x2d
   13e68:	b6 a7       	std	Z+46, r27	; 0x2e
   13e6a:	dc cc       	rjmp	.-1608   	; 0x13824 <Read_Config+0x158>
   13e6c:	69 ec       	ldi	r22, 0xC9	; 201
   13e6e:	7e e0       	ldi	r23, 0x0E	; 14
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0x1000UL, &val) )
   13e70:	c6 01       	movw	r24, r12
   13e72:	0e 94 04 34 	call	0x6808	; 0x6808 <token>
   13e76:	00 97       	sbiw	r24, 0x00	; 0
   13e78:	01 f1       	breq	.+64     	; 0x13eba <Read_Config+0x7ee>
   13e7a:	9e 01       	movw	r18, r28
   13e7c:	2f 57       	subi	r18, 0x7F	; 127
   13e7e:	3f 4f       	sbci	r19, 0xFF	; 255
   13e80:	79 01       	movw	r14, r18
   13e82:	00 e0       	ldi	r16, 0x00	; 0
   13e84:	10 e1       	ldi	r17, 0x10	; 16
   13e86:	20 e0       	ldi	r18, 0x00	; 0
   13e88:	30 e0       	ldi	r19, 0x00	; 0
   13e8a:	40 e0       	ldi	r20, 0x00	; 0
   13e8c:	50 e0       	ldi	r21, 0x00	; 0
   13e8e:	ba 01       	movw	r22, r20
   13e90:	8c 0d       	add	r24, r12
                    ++errors;
   13e92:	9d 1d       	adc	r25, r13
   13e94:	0e 94 a9 96 	call	0x12d52	; 0x12d52 <assign_value>
                SS80p->UNIT.BYTES_PER_BLOCK = val;
   13e98:	89 2b       	or	r24, r25
   13e9a:	19 f4       	brne	.+6      	; 0x13ea2 <Read_Config+0x7d6>
   13e9c:	3f ef       	ldi	r19, 0xFF	; 255
   13e9e:	a3 1a       	sub	r10, r19
   13ea0:	b3 0a       	sbc	r11, r19
   13ea2:	cf 57       	subi	r28, 0x7F	; 127
   13ea4:	df 4f       	sbci	r29, 0xFF	; 255
   13ea6:	88 81       	ld	r24, Y
   13ea8:	99 81       	ldd	r25, Y+1	; 0x01
   13eaa:	c1 58       	subi	r28, 0x81	; 129
   13eac:	d0 40       	sbci	r29, 0x00	; 0
   13eae:	d2 01       	movw	r26, r4
            }
            else if( (ind = token(ptr,"BUFFERED_BLOCKS")) )
   13eb0:	d0 96       	adiw	r26, 0x30	; 48
   13eb2:	9c 93       	st	X, r25
   13eb4:	8e 93       	st	-X, r24
   13eb6:	9f 97       	sbiw	r26, 0x2f	; 47
   13eb8:	b5 cc       	rjmp	.-1686   	; 0x13824 <Read_Config+0x158>
   13eba:	69 ed       	ldi	r22, 0xD9	; 217
   13ebc:	7e e0       	ldi	r23, 0x0E	; 14
            {
                ptr += ind;
                if (!assign_value(ptr, 1UL, 1UL, &val) )
   13ebe:	c6 01       	movw	r24, r12
   13ec0:	0e 94 04 34 	call	0x6808	; 0x6808 <token>
   13ec4:	00 97       	sbiw	r24, 0x00	; 0
   13ec6:	f1 f0       	breq	.+60     	; 0x13f04 <Read_Config+0x838>
   13ec8:	fe 01       	movw	r30, r28
   13eca:	ef 57       	subi	r30, 0x7F	; 127
   13ecc:	ff 4f       	sbci	r31, 0xFF	; 255
   13ece:	7f 01       	movw	r14, r30
   13ed0:	01 e0       	ldi	r16, 0x01	; 1
   13ed2:	10 e0       	ldi	r17, 0x00	; 0
   13ed4:	20 e0       	ldi	r18, 0x00	; 0
   13ed6:	30 e0       	ldi	r19, 0x00	; 0
   13ed8:	41 e0       	ldi	r20, 0x01	; 1
   13eda:	50 e0       	ldi	r21, 0x00	; 0
   13edc:	60 e0       	ldi	r22, 0x00	; 0
   13ede:	70 e0       	ldi	r23, 0x00	; 0
   13ee0:	8c 0d       	add	r24, r12
                    ++errors;
   13ee2:	9d 1d       	adc	r25, r13
   13ee4:	0e 94 a9 96 	call	0x12d52	; 0x12d52 <assign_value>
                SS80p->UNIT.BUFFERED_BLOCKS = val;
   13ee8:	89 2b       	or	r24, r25
   13eea:	19 f4       	brne	.+6      	; 0x13ef2 <Read_Config+0x826>
   13eec:	ff ef       	ldi	r31, 0xFF	; 255
   13eee:	af 1a       	sub	r10, r31
   13ef0:	bf 0a       	sbc	r11, r31
   13ef2:	cf 57       	subi	r28, 0x7F	; 127
   13ef4:	df 4f       	sbci	r29, 0xFF	; 255
   13ef6:	88 81       	ld	r24, Y
   13ef8:	c1 58       	subi	r28, 0x81	; 129
            }
            else if( (ind = token(ptr,"BURST_SIZE")) )
   13efa:	d0 40       	sbci	r29, 0x00	; 0
   13efc:	d2 01       	movw	r26, r4
   13efe:	d1 96       	adiw	r26, 0x31	; 49
   13f00:	8c 93       	st	X, r24
   13f02:	90 cc       	rjmp	.-1760   	; 0x13824 <Read_Config+0x158>
   13f04:	69 ee       	ldi	r22, 0xE9	; 233
   13f06:	7e e0       	ldi	r23, 0x0E	; 14
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0, &val) )
   13f08:	c6 01       	movw	r24, r12
   13f0a:	0e 94 04 34 	call	0x6808	; 0x6808 <token>
   13f0e:	00 97       	sbiw	r24, 0x00	; 0
   13f10:	e1 f0       	breq	.+56     	; 0x13f4a <Read_Config+0x87e>
   13f12:	fe 01       	movw	r30, r28
   13f14:	ef 57       	subi	r30, 0x7F	; 127
   13f16:	ff 4f       	sbci	r31, 0xFF	; 255
   13f18:	7f 01       	movw	r14, r30
   13f1a:	00 e0       	ldi	r16, 0x00	; 0
   13f1c:	10 e0       	ldi	r17, 0x00	; 0
   13f1e:	98 01       	movw	r18, r16
   13f20:	40 e0       	ldi	r20, 0x00	; 0
   13f22:	50 e0       	ldi	r21, 0x00	; 0
   13f24:	ba 01       	movw	r22, r20
   13f26:	8c 0d       	add	r24, r12
                    ++errors;
   13f28:	9d 1d       	adc	r25, r13
   13f2a:	0e 94 a9 96 	call	0x12d52	; 0x12d52 <assign_value>
                SS80p->UNIT.BURST_SIZE = val;
   13f2e:	89 2b       	or	r24, r25
   13f30:	19 f4       	brne	.+6      	; 0x13f38 <Read_Config+0x86c>
   13f32:	ff ef       	ldi	r31, 0xFF	; 255
   13f34:	af 1a       	sub	r10, r31
   13f36:	bf 0a       	sbc	r11, r31
   13f38:	cf 57       	subi	r28, 0x7F	; 127
   13f3a:	df 4f       	sbci	r29, 0xFF	; 255
   13f3c:	88 81       	ld	r24, Y
   13f3e:	c1 58       	subi	r28, 0x81	; 129
            }
            else if( (ind = token(ptr,"BLOCK_TIME")) )
   13f40:	d0 40       	sbci	r29, 0x00	; 0
   13f42:	d2 01       	movw	r26, r4
   13f44:	d2 96       	adiw	r26, 0x32	; 50
   13f46:	8c 93       	st	X, r24
   13f48:	6d cc       	rjmp	.-1830   	; 0x13824 <Read_Config+0x158>
   13f4a:	64 ef       	ldi	r22, 0xF4	; 244
   13f4c:	7e e0       	ldi	r23, 0x0E	; 14
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val) )
   13f4e:	c6 01       	movw	r24, r12
   13f50:	0e 94 04 34 	call	0x6808	; 0x6808 <token>
   13f54:	00 97       	sbiw	r24, 0x00	; 0
   13f56:	01 f1       	breq	.+64     	; 0x13f98 <Read_Config+0x8cc>
   13f58:	fe 01       	movw	r30, r28
   13f5a:	ef 57       	subi	r30, 0x7F	; 127
   13f5c:	ff 4f       	sbci	r31, 0xFF	; 255
   13f5e:	7f 01       	movw	r14, r30
   13f60:	0f ef       	ldi	r16, 0xFF	; 255
   13f62:	1f ef       	ldi	r17, 0xFF	; 255
   13f64:	20 e0       	ldi	r18, 0x00	; 0
   13f66:	30 e0       	ldi	r19, 0x00	; 0
   13f68:	40 e0       	ldi	r20, 0x00	; 0
   13f6a:	50 e0       	ldi	r21, 0x00	; 0
   13f6c:	ba 01       	movw	r22, r20
   13f6e:	8c 0d       	add	r24, r12
                    ++errors;
   13f70:	9d 1d       	adc	r25, r13
   13f72:	0e 94 a9 96 	call	0x12d52	; 0x12d52 <assign_value>
                SS80p->UNIT.BLOCK_TIME = val;
   13f76:	89 2b       	or	r24, r25
   13f78:	19 f4       	brne	.+6      	; 0x13f80 <Read_Config+0x8b4>
   13f7a:	ff ef       	ldi	r31, 0xFF	; 255
   13f7c:	af 1a       	sub	r10, r31
   13f7e:	bf 0a       	sbc	r11, r31
   13f80:	cf 57       	subi	r28, 0x7F	; 127
   13f82:	df 4f       	sbci	r29, 0xFF	; 255
   13f84:	88 81       	ld	r24, Y
   13f86:	99 81       	ldd	r25, Y+1	; 0x01
   13f88:	c1 58       	subi	r28, 0x81	; 129
   13f8a:	d0 40       	sbci	r29, 0x00	; 0
   13f8c:	d2 01       	movw	r26, r4
            }
            else if( (ind = token(ptr,"CONTINOUS_TRANSFER_RATE")) )
   13f8e:	d4 96       	adiw	r26, 0x34	; 52
   13f90:	9c 93       	st	X, r25
   13f92:	8e 93       	st	-X, r24
   13f94:	d3 97       	sbiw	r26, 0x33	; 51
   13f96:	46 cc       	rjmp	.-1908   	; 0x13824 <Read_Config+0x158>
   13f98:	6f ef       	ldi	r22, 0xFF	; 255
   13f9a:	7e e0       	ldi	r23, 0x0E	; 14
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val) )
   13f9c:	c6 01       	movw	r24, r12
   13f9e:	0e 94 04 34 	call	0x6808	; 0x6808 <token>
   13fa2:	00 97       	sbiw	r24, 0x00	; 0
   13fa4:	01 f1       	breq	.+64     	; 0x13fe6 <Read_Config+0x91a>
   13fa6:	fe 01       	movw	r30, r28
   13fa8:	ef 57       	subi	r30, 0x7F	; 127
   13faa:	ff 4f       	sbci	r31, 0xFF	; 255
   13fac:	7f 01       	movw	r14, r30
   13fae:	0f ef       	ldi	r16, 0xFF	; 255
   13fb0:	1f ef       	ldi	r17, 0xFF	; 255
   13fb2:	20 e0       	ldi	r18, 0x00	; 0
   13fb4:	30 e0       	ldi	r19, 0x00	; 0
   13fb6:	40 e0       	ldi	r20, 0x00	; 0
   13fb8:	50 e0       	ldi	r21, 0x00	; 0
   13fba:	ba 01       	movw	r22, r20
   13fbc:	8c 0d       	add	r24, r12
                    ++errors;
   13fbe:	9d 1d       	adc	r25, r13
   13fc0:	0e 94 a9 96 	call	0x12d52	; 0x12d52 <assign_value>
                SS80p->UNIT.CONTINOUS_TRANSFER_RATE = val;
   13fc4:	89 2b       	or	r24, r25
   13fc6:	19 f4       	brne	.+6      	; 0x13fce <Read_Config+0x902>
   13fc8:	ff ef       	ldi	r31, 0xFF	; 255
   13fca:	af 1a       	sub	r10, r31
   13fcc:	bf 0a       	sbc	r11, r31
   13fce:	cf 57       	subi	r28, 0x7F	; 127
   13fd0:	df 4f       	sbci	r29, 0xFF	; 255
   13fd2:	88 81       	ld	r24, Y
   13fd4:	99 81       	ldd	r25, Y+1	; 0x01
   13fd6:	c1 58       	subi	r28, 0x81	; 129
   13fd8:	d0 40       	sbci	r29, 0x00	; 0
   13fda:	d2 01       	movw	r26, r4
            }
            else if( (ind = token(ptr,"OPTIMAL_RETRY_TIME")) )
   13fdc:	d6 96       	adiw	r26, 0x36	; 54
   13fde:	9c 93       	st	X, r25
   13fe0:	8e 93       	st	-X, r24
   13fe2:	d5 97       	sbiw	r26, 0x35	; 53
   13fe4:	1f cc       	rjmp	.-1986   	; 0x13824 <Read_Config+0x158>
   13fe6:	67 e1       	ldi	r22, 0x17	; 23
   13fe8:	7f e0       	ldi	r23, 0x0F	; 15
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val) )
   13fea:	c6 01       	movw	r24, r12
   13fec:	0e 94 04 34 	call	0x6808	; 0x6808 <token>
   13ff0:	00 97       	sbiw	r24, 0x00	; 0
   13ff2:	01 f1       	breq	.+64     	; 0x14034 <Read_Config+0x968>
   13ff4:	fe 01       	movw	r30, r28
   13ff6:	ef 57       	subi	r30, 0x7F	; 127
   13ff8:	ff 4f       	sbci	r31, 0xFF	; 255
   13ffa:	7f 01       	movw	r14, r30
   13ffc:	0f ef       	ldi	r16, 0xFF	; 255
   13ffe:	1f ef       	ldi	r17, 0xFF	; 255
   14000:	20 e0       	ldi	r18, 0x00	; 0
   14002:	30 e0       	ldi	r19, 0x00	; 0
   14004:	40 e0       	ldi	r20, 0x00	; 0
   14006:	50 e0       	ldi	r21, 0x00	; 0
   14008:	ba 01       	movw	r22, r20
   1400a:	8c 0d       	add	r24, r12
                    ++errors;
   1400c:	9d 1d       	adc	r25, r13
   1400e:	0e 94 a9 96 	call	0x12d52	; 0x12d52 <assign_value>
                SS80p->UNIT.OPTIMAL_RETRY_TIME = val;
   14012:	89 2b       	or	r24, r25
   14014:	19 f4       	brne	.+6      	; 0x1401c <Read_Config+0x950>
   14016:	ff ef       	ldi	r31, 0xFF	; 255
   14018:	af 1a       	sub	r10, r31
   1401a:	bf 0a       	sbc	r11, r31
   1401c:	cf 57       	subi	r28, 0x7F	; 127
   1401e:	df 4f       	sbci	r29, 0xFF	; 255
   14020:	88 81       	ld	r24, Y
   14022:	99 81       	ldd	r25, Y+1	; 0x01
   14024:	c1 58       	subi	r28, 0x81	; 129
   14026:	d0 40       	sbci	r29, 0x00	; 0
   14028:	d2 01       	movw	r26, r4
            }
            else if( (ind = token(ptr,"ACCESS_TIME")) )
   1402a:	d8 96       	adiw	r26, 0x38	; 56
   1402c:	9c 93       	st	X, r25
   1402e:	8e 93       	st	-X, r24
   14030:	d7 97       	sbiw	r26, 0x37	; 55
   14032:	f8 cb       	rjmp	.-2064   	; 0x13824 <Read_Config+0x158>
   14034:	6a e2       	ldi	r22, 0x2A	; 42
   14036:	7f e0       	ldi	r23, 0x0F	; 15
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val) )
   14038:	c6 01       	movw	r24, r12
   1403a:	0e 94 04 34 	call	0x6808	; 0x6808 <token>
   1403e:	00 97       	sbiw	r24, 0x00	; 0
   14040:	01 f1       	breq	.+64     	; 0x14082 <Read_Config+0x9b6>
   14042:	fe 01       	movw	r30, r28
   14044:	ef 57       	subi	r30, 0x7F	; 127
   14046:	ff 4f       	sbci	r31, 0xFF	; 255
   14048:	7f 01       	movw	r14, r30
   1404a:	0f ef       	ldi	r16, 0xFF	; 255
   1404c:	1f ef       	ldi	r17, 0xFF	; 255
   1404e:	20 e0       	ldi	r18, 0x00	; 0
   14050:	30 e0       	ldi	r19, 0x00	; 0
   14052:	40 e0       	ldi	r20, 0x00	; 0
   14054:	50 e0       	ldi	r21, 0x00	; 0
   14056:	ba 01       	movw	r22, r20
   14058:	8c 0d       	add	r24, r12
                    ++errors;
   1405a:	9d 1d       	adc	r25, r13
   1405c:	0e 94 a9 96 	call	0x12d52	; 0x12d52 <assign_value>
                SS80p->UNIT.ACCESS_TIME = val;
   14060:	89 2b       	or	r24, r25
   14062:	19 f4       	brne	.+6      	; 0x1406a <Read_Config+0x99e>
   14064:	ff ef       	ldi	r31, 0xFF	; 255
   14066:	af 1a       	sub	r10, r31
   14068:	bf 0a       	sbc	r11, r31
   1406a:	cf 57       	subi	r28, 0x7F	; 127
   1406c:	df 4f       	sbci	r29, 0xFF	; 255
   1406e:	88 81       	ld	r24, Y
   14070:	99 81       	ldd	r25, Y+1	; 0x01
   14072:	c1 58       	subi	r28, 0x81	; 129
   14074:	d0 40       	sbci	r29, 0x00	; 0
   14076:	d2 01       	movw	r26, r4
            }
            else if( (ind = token(ptr,"MAXIMUM_INTERLEAVE")) )
   14078:	da 96       	adiw	r26, 0x3a	; 58
   1407a:	9c 93       	st	X, r25
   1407c:	8e 93       	st	-X, r24
   1407e:	d9 97       	sbiw	r26, 0x39	; 57
   14080:	d1 cb       	rjmp	.-2142   	; 0x13824 <Read_Config+0x158>
   14082:	66 e3       	ldi	r22, 0x36	; 54
   14084:	7f e0       	ldi	r23, 0x0F	; 15
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   14086:	c6 01       	movw	r24, r12
   14088:	0e 94 04 34 	call	0x6808	; 0x6808 <token>
   1408c:	00 97       	sbiw	r24, 0x00	; 0
   1408e:	e9 f0       	breq	.+58     	; 0x140ca <Read_Config+0x9fe>
   14090:	fe 01       	movw	r30, r28
   14092:	ef 57       	subi	r30, 0x7F	; 127
   14094:	ff 4f       	sbci	r31, 0xFF	; 255
   14096:	7f 01       	movw	r14, r30
   14098:	0f ef       	ldi	r16, 0xFF	; 255
   1409a:	10 e0       	ldi	r17, 0x00	; 0
   1409c:	20 e0       	ldi	r18, 0x00	; 0
   1409e:	30 e0       	ldi	r19, 0x00	; 0
   140a0:	40 e0       	ldi	r20, 0x00	; 0
   140a2:	50 e0       	ldi	r21, 0x00	; 0
   140a4:	ba 01       	movw	r22, r20
   140a6:	8c 0d       	add	r24, r12
                    ++errors;
   140a8:	9d 1d       	adc	r25, r13
   140aa:	0e 94 a9 96 	call	0x12d52	; 0x12d52 <assign_value>
                SS80p->UNIT.MAXIMUM_INTERLEAVE = val;
   140ae:	89 2b       	or	r24, r25
   140b0:	19 f4       	brne	.+6      	; 0x140b8 <Read_Config+0x9ec>
   140b2:	ff ef       	ldi	r31, 0xFF	; 255
   140b4:	af 1a       	sub	r10, r31
   140b6:	bf 0a       	sbc	r11, r31
   140b8:	cf 57       	subi	r28, 0x7F	; 127
   140ba:	df 4f       	sbci	r29, 0xFF	; 255
   140bc:	88 81       	ld	r24, Y
   140be:	c1 58       	subi	r28, 0x81	; 129
            }
            else if( (ind = token(ptr,"FIXED_VOLUMES")) )
   140c0:	d0 40       	sbci	r29, 0x00	; 0
   140c2:	d2 01       	movw	r26, r4
   140c4:	db 96       	adiw	r26, 0x3b	; 59
   140c6:	8c 93       	st	X, r24
   140c8:	ad cb       	rjmp	.-2214   	; 0x13824 <Read_Config+0x158>
   140ca:	69 e4       	ldi	r22, 0x49	; 73
   140cc:	7f e0       	ldi	r23, 0x0F	; 15
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   140ce:	c6 01       	movw	r24, r12
   140d0:	0e 94 04 34 	call	0x6808	; 0x6808 <token>
   140d4:	00 97       	sbiw	r24, 0x00	; 0
   140d6:	e9 f0       	breq	.+58     	; 0x14112 <Read_Config+0xa46>
   140d8:	fe 01       	movw	r30, r28
   140da:	ef 57       	subi	r30, 0x7F	; 127
   140dc:	ff 4f       	sbci	r31, 0xFF	; 255
   140de:	7f 01       	movw	r14, r30
   140e0:	0f ef       	ldi	r16, 0xFF	; 255
   140e2:	10 e0       	ldi	r17, 0x00	; 0
   140e4:	20 e0       	ldi	r18, 0x00	; 0
   140e6:	30 e0       	ldi	r19, 0x00	; 0
   140e8:	40 e0       	ldi	r20, 0x00	; 0
   140ea:	50 e0       	ldi	r21, 0x00	; 0
   140ec:	ba 01       	movw	r22, r20
   140ee:	8c 0d       	add	r24, r12
                    ++errors;
   140f0:	9d 1d       	adc	r25, r13
   140f2:	0e 94 a9 96 	call	0x12d52	; 0x12d52 <assign_value>
                SS80p->UNIT.FIXED_VOLUMES = val;
   140f6:	89 2b       	or	r24, r25
   140f8:	19 f4       	brne	.+6      	; 0x14100 <Read_Config+0xa34>
   140fa:	ff ef       	ldi	r31, 0xFF	; 255
   140fc:	af 1a       	sub	r10, r31
   140fe:	bf 0a       	sbc	r11, r31
   14100:	cf 57       	subi	r28, 0x7F	; 127
   14102:	df 4f       	sbci	r29, 0xFF	; 255
   14104:	88 81       	ld	r24, Y
   14106:	c1 58       	subi	r28, 0x81	; 129
            }
            else if( (ind = token(ptr,"REMOVABLE_VOLUMES")) )
   14108:	d0 40       	sbci	r29, 0x00	; 0
   1410a:	d2 01       	movw	r26, r4
   1410c:	dc 96       	adiw	r26, 0x3c	; 60
   1410e:	8c 93       	st	X, r24
   14110:	89 cb       	rjmp	.-2286   	; 0x13824 <Read_Config+0x158>
   14112:	67 e5       	ldi	r22, 0x57	; 87
   14114:	7f e0       	ldi	r23, 0x0F	; 15
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   14116:	c6 01       	movw	r24, r12
   14118:	0e 94 04 34 	call	0x6808	; 0x6808 <token>
   1411c:	00 97       	sbiw	r24, 0x00	; 0
   1411e:	e9 f0       	breq	.+58     	; 0x1415a <Read_Config+0xa8e>
   14120:	fe 01       	movw	r30, r28
   14122:	ef 57       	subi	r30, 0x7F	; 127
   14124:	ff 4f       	sbci	r31, 0xFF	; 255
   14126:	7f 01       	movw	r14, r30
   14128:	0f ef       	ldi	r16, 0xFF	; 255
   1412a:	10 e0       	ldi	r17, 0x00	; 0
   1412c:	20 e0       	ldi	r18, 0x00	; 0
   1412e:	30 e0       	ldi	r19, 0x00	; 0
   14130:	40 e0       	ldi	r20, 0x00	; 0
   14132:	50 e0       	ldi	r21, 0x00	; 0
   14134:	ba 01       	movw	r22, r20
   14136:	8c 0d       	add	r24, r12
                    ++errors;
   14138:	9d 1d       	adc	r25, r13
   1413a:	0e 94 a9 96 	call	0x12d52	; 0x12d52 <assign_value>
                SS80p->UNIT.REMOVABLE_VOLUMES = val;
   1413e:	89 2b       	or	r24, r25
   14140:	19 f4       	brne	.+6      	; 0x14148 <Read_Config+0xa7c>
   14142:	ff ef       	ldi	r31, 0xFF	; 255
   14144:	af 1a       	sub	r10, r31
   14146:	bf 0a       	sbc	r11, r31
   14148:	cf 57       	subi	r28, 0x7F	; 127
   1414a:	df 4f       	sbci	r29, 0xFF	; 255
   1414c:	88 81       	ld	r24, Y
   1414e:	c1 58       	subi	r28, 0x81	; 129
            }
            else
            {
                printf("Unexpected SS80 UNIT token: %s, at line:%d\n", ptr,lines);
   14150:	d0 40       	sbci	r29, 0x00	; 0
   14152:	d2 01       	movw	r26, r4
   14154:	dd 96       	adiw	r26, 0x3d	; 61
   14156:	8c 93       	st	X, r24
   14158:	65 cb       	rjmp	.-2358   	; 0x13824 <Read_Config+0x158>
   1415a:	80 91 77 19 	lds	r24, 0x1977	; 0x801977 <lines+0x1>
   1415e:	8f 93       	push	r24
   14160:	80 91 76 19 	lds	r24, 0x1976	; 0x801976 <lines>
   14164:	8f 93       	push	r24
                ++errors;
            }
            break;

        case SS80_VOLUME:
            if( (ind = token(ptr,"MAX_CYLINDER")) )
   14166:	df 92       	push	r13
   14168:	cf 92       	push	r12
   1416a:	87 ef       	ldi	r24, 0xF7	; 247
   1416c:	9c e1       	ldi	r25, 0x1C	; 28
   1416e:	ac cc       	rjmp	.-1704   	; 0x13ac8 <Read_Config+0x3fc>
   14170:	69 e6       	ldi	r22, 0x69	; 105
   14172:	7f e0       	ldi	r23, 0x0F	; 15
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFFFFFUL, &val) )
   14174:	c6 01       	movw	r24, r12
   14176:	0e 94 04 34 	call	0x6808	; 0x6808 <token>
   1417a:	00 97       	sbiw	r24, 0x00	; 0
   1417c:	f1 f0       	breq	.+60     	; 0x141ba <Read_Config+0xaee>
   1417e:	9e 01       	movw	r18, r28
   14180:	2f 57       	subi	r18, 0x7F	; 127
   14182:	3f 4f       	sbci	r19, 0xFF	; 255
   14184:	79 01       	movw	r14, r18
   14186:	0f ef       	ldi	r16, 0xFF	; 255
   14188:	1f ef       	ldi	r17, 0xFF	; 255
   1418a:	98 01       	movw	r18, r16
   1418c:	40 e0       	ldi	r20, 0x00	; 0
   1418e:	50 e0       	ldi	r21, 0x00	; 0
   14190:	ba 01       	movw	r22, r20
   14192:	8c 0d       	add	r24, r12
                    ++errors;
   14194:	9d 1d       	adc	r25, r13
   14196:	0e 94 a9 96 	call	0x12d52	; 0x12d52 <assign_value>
                SS80p->VOLUME.MAX_CYLINDER = val;
   1419a:	89 2b       	or	r24, r25
   1419c:	19 f4       	brne	.+6      	; 0x141a4 <Read_Config+0xad8>
   1419e:	3f ef       	ldi	r19, 0xFF	; 255
   141a0:	a3 1a       	sub	r10, r19
   141a2:	b3 0a       	sbc	r11, r19
   141a4:	cf 57       	subi	r28, 0x7F	; 127
   141a6:	df 4f       	sbci	r29, 0xFF	; 255
   141a8:	88 81       	ld	r24, Y
   141aa:	99 81       	ldd	r25, Y+1	; 0x01
   141ac:	aa 81       	ldd	r26, Y+2	; 0x02
   141ae:	bb 81       	ldd	r27, Y+3	; 0x03
            }
            else if( (ind = token(ptr,"MAX_HEAD")) )
   141b0:	c1 58       	subi	r28, 0x81	; 129
   141b2:	d0 40       	sbci	r29, 0x00	; 0
   141b4:	f2 01       	movw	r30, r4
   141b6:	fe 96       	adiw	r30, 0x3e	; 62
   141b8:	70 c0       	rjmp	.+224    	; 0x1429a <Read_Config+0xbce>
   141ba:	66 e7       	ldi	r22, 0x76	; 118
   141bc:	7f e0       	ldi	r23, 0x0F	; 15
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   141be:	c6 01       	movw	r24, r12
   141c0:	0e 94 04 34 	call	0x6808	; 0x6808 <token>
   141c4:	00 97       	sbiw	r24, 0x00	; 0
   141c6:	e9 f0       	breq	.+58     	; 0x14202 <Read_Config+0xb36>
   141c8:	de 01       	movw	r26, r28
   141ca:	af 57       	subi	r26, 0x7F	; 127
   141cc:	bf 4f       	sbci	r27, 0xFF	; 255
   141ce:	7d 01       	movw	r14, r26
   141d0:	0f ef       	ldi	r16, 0xFF	; 255
   141d2:	10 e0       	ldi	r17, 0x00	; 0
   141d4:	20 e0       	ldi	r18, 0x00	; 0
   141d6:	30 e0       	ldi	r19, 0x00	; 0
   141d8:	40 e0       	ldi	r20, 0x00	; 0
   141da:	50 e0       	ldi	r21, 0x00	; 0
   141dc:	ba 01       	movw	r22, r20
   141de:	8c 0d       	add	r24, r12
                    ++errors;
   141e0:	9d 1d       	adc	r25, r13
   141e2:	0e 94 a9 96 	call	0x12d52	; 0x12d52 <assign_value>
                SS80p->VOLUME.MAX_HEAD = val;
   141e6:	89 2b       	or	r24, r25
   141e8:	19 f4       	brne	.+6      	; 0x141f0 <Read_Config+0xb24>
   141ea:	bf ef       	ldi	r27, 0xFF	; 255
   141ec:	ab 1a       	sub	r10, r27
   141ee:	bb 0a       	sbc	r11, r27
   141f0:	cf 57       	subi	r28, 0x7F	; 127
   141f2:	df 4f       	sbci	r29, 0xFF	; 255
   141f4:	88 81       	ld	r24, Y
   141f6:	c1 58       	subi	r28, 0x81	; 129
            }
            else if( (ind = token(ptr,"MAX_SECTOR")) )
   141f8:	d0 40       	sbci	r29, 0x00	; 0
   141fa:	f2 01       	movw	r30, r4
   141fc:	ee 5b       	subi	r30, 0xBE	; 190
   141fe:	ff 4f       	sbci	r31, 0xFF	; 255
   14200:	17 c1       	rjmp	.+558    	; 0x14430 <Read_Config+0xd64>
   14202:	6f e7       	ldi	r22, 0x7F	; 127
   14204:	7f e0       	ldi	r23, 0x0F	; 15
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val) )
   14206:	c6 01       	movw	r24, r12
   14208:	0e 94 04 34 	call	0x6808	; 0x6808 <token>
   1420c:	00 97       	sbiw	r24, 0x00	; 0
   1420e:	01 f1       	breq	.+64     	; 0x14250 <Read_Config+0xb84>
   14210:	fe 01       	movw	r30, r28
   14212:	ef 57       	subi	r30, 0x7F	; 127
   14214:	ff 4f       	sbci	r31, 0xFF	; 255
   14216:	7f 01       	movw	r14, r30
   14218:	0f ef       	ldi	r16, 0xFF	; 255
   1421a:	1f ef       	ldi	r17, 0xFF	; 255
   1421c:	20 e0       	ldi	r18, 0x00	; 0
   1421e:	30 e0       	ldi	r19, 0x00	; 0
   14220:	40 e0       	ldi	r20, 0x00	; 0
   14222:	50 e0       	ldi	r21, 0x00	; 0
   14224:	ba 01       	movw	r22, r20
   14226:	8c 0d       	add	r24, r12
                    ++errors;
   14228:	9d 1d       	adc	r25, r13
   1422a:	0e 94 a9 96 	call	0x12d52	; 0x12d52 <assign_value>
                SS80p->VOLUME.MAX_SECTOR = val;
   1422e:	89 2b       	or	r24, r25
   14230:	19 f4       	brne	.+6      	; 0x14238 <Read_Config+0xb6c>
   14232:	ff ef       	ldi	r31, 0xFF	; 255
   14234:	af 1a       	sub	r10, r31
   14236:	bf 0a       	sbc	r11, r31
   14238:	cf 57       	subi	r28, 0x7F	; 127
   1423a:	df 4f       	sbci	r29, 0xFF	; 255
   1423c:	88 81       	ld	r24, Y
   1423e:	99 81       	ldd	r25, Y+1	; 0x01
   14240:	c1 58       	subi	r28, 0x81	; 129
   14242:	d0 40       	sbci	r29, 0x00	; 0
   14244:	f2 01       	movw	r30, r4
            }
            else if( (ind = token(ptr,"MAX_BLOCK_NUMBER")) )
   14246:	ed 5b       	subi	r30, 0xBD	; 189
   14248:	ff 4f       	sbci	r31, 0xFF	; 255
   1424a:	91 83       	std	Z+1, r25	; 0x01
   1424c:	80 83       	st	Z, r24
   1424e:	ea ca       	rjmp	.-2604   	; 0x13824 <Read_Config+0x158>
   14250:	6a e8       	ldi	r22, 0x8A	; 138
   14252:	7f e0       	ldi	r23, 0x0F	; 15
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFFFFFUL, &val) )
   14254:	c6 01       	movw	r24, r12
   14256:	0e 94 04 34 	call	0x6808	; 0x6808 <token>
   1425a:	00 97       	sbiw	r24, 0x00	; 0
   1425c:	19 f1       	breq	.+70     	; 0x142a4 <Read_Config+0xbd8>
   1425e:	9e 01       	movw	r18, r28
   14260:	2f 57       	subi	r18, 0x7F	; 127
   14262:	3f 4f       	sbci	r19, 0xFF	; 255
   14264:	79 01       	movw	r14, r18
   14266:	0f ef       	ldi	r16, 0xFF	; 255
   14268:	1f ef       	ldi	r17, 0xFF	; 255
   1426a:	98 01       	movw	r18, r16
   1426c:	40 e0       	ldi	r20, 0x00	; 0
   1426e:	50 e0       	ldi	r21, 0x00	; 0
   14270:	ba 01       	movw	r22, r20
   14272:	8c 0d       	add	r24, r12
                    ++errors;
   14274:	9d 1d       	adc	r25, r13
   14276:	0e 94 a9 96 	call	0x12d52	; 0x12d52 <assign_value>
                SS80p->VOLUME.MAX_BLOCK_NUMBER = val;
   1427a:	89 2b       	or	r24, r25
   1427c:	19 f4       	brne	.+6      	; 0x14284 <Read_Config+0xbb8>
   1427e:	3f ef       	ldi	r19, 0xFF	; 255
   14280:	a3 1a       	sub	r10, r19
   14282:	b3 0a       	sbc	r11, r19
   14284:	cf 57       	subi	r28, 0x7F	; 127
   14286:	df 4f       	sbci	r29, 0xFF	; 255
   14288:	88 81       	ld	r24, Y
   1428a:	99 81       	ldd	r25, Y+1	; 0x01
   1428c:	aa 81       	ldd	r26, Y+2	; 0x02
   1428e:	bb 81       	ldd	r27, Y+3	; 0x03
   14290:	c1 58       	subi	r28, 0x81	; 129
   14292:	d0 40       	sbci	r29, 0x00	; 0
   14294:	f2 01       	movw	r30, r4
   14296:	eb 5b       	subi	r30, 0xBB	; 187
   14298:	ff 4f       	sbci	r31, 0xFF	; 255
            }
            else if( (ind = token(ptr,"INTERLEAVE")) )
   1429a:	80 83       	st	Z, r24
   1429c:	91 83       	std	Z+1, r25	; 0x01
   1429e:	a2 83       	std	Z+2, r26	; 0x02
   142a0:	b3 83       	std	Z+3, r27	; 0x03
   142a2:	c0 ca       	rjmp	.-2688   	; 0x13824 <Read_Config+0x158>
   142a4:	6e e3       	ldi	r22, 0x3E	; 62
   142a6:	7f e0       	ldi	r23, 0x0F	; 15
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   142a8:	c6 01       	movw	r24, r12
   142aa:	0e 94 04 34 	call	0x6808	; 0x6808 <token>
   142ae:	00 97       	sbiw	r24, 0x00	; 0
   142b0:	e9 f0       	breq	.+58     	; 0x142ec <Read_Config+0xc20>
   142b2:	de 01       	movw	r26, r28
   142b4:	af 57       	subi	r26, 0x7F	; 127
   142b6:	bf 4f       	sbci	r27, 0xFF	; 255
   142b8:	7d 01       	movw	r14, r26
   142ba:	0f ef       	ldi	r16, 0xFF	; 255
   142bc:	10 e0       	ldi	r17, 0x00	; 0
   142be:	20 e0       	ldi	r18, 0x00	; 0
   142c0:	30 e0       	ldi	r19, 0x00	; 0
   142c2:	40 e0       	ldi	r20, 0x00	; 0
   142c4:	50 e0       	ldi	r21, 0x00	; 0
   142c6:	ba 01       	movw	r22, r20
   142c8:	8c 0d       	add	r24, r12
                    ++errors;
   142ca:	9d 1d       	adc	r25, r13
   142cc:	0e 94 a9 96 	call	0x12d52	; 0x12d52 <assign_value>
                SS80p->VOLUME.INTERLEAVE = val;
   142d0:	89 2b       	or	r24, r25
   142d2:	19 f4       	brne	.+6      	; 0x142da <Read_Config+0xc0e>
   142d4:	bf ef       	ldi	r27, 0xFF	; 255
   142d6:	ab 1a       	sub	r10, r27
   142d8:	bb 0a       	sbc	r11, r27
   142da:	cf 57       	subi	r28, 0x7F	; 127
   142dc:	df 4f       	sbci	r29, 0xFF	; 255
   142de:	88 81       	ld	r24, Y
   142e0:	c1 58       	subi	r28, 0x81	; 129

            }
            else
            {
                printf("Unexpected SS80 VOLUME token: %s, at line:%d\n", ptr,lines);
   142e2:	d0 40       	sbci	r29, 0x00	; 0
   142e4:	f2 01       	movw	r30, r4
   142e6:	e7 5b       	subi	r30, 0xB7	; 183
   142e8:	ff 4f       	sbci	r31, 0xFF	; 255
   142ea:	a2 c0       	rjmp	.+324    	; 0x14430 <Read_Config+0xd64>
   142ec:	80 91 77 19 	lds	r24, 0x1977	; 0x801977 <lines+0x1>
   142f0:	8f 93       	push	r24
   142f2:	80 91 76 19 	lds	r24, 0x1976	; 0x801976 <lines>
   142f6:	8f 93       	push	r24
   142f8:	df 92       	push	r13
   142fa:	cf 92       	push	r12
   142fc:	89 ec       	ldi	r24, 0xC9	; 201
   142fe:	9c e1       	ldi	r25, 0x1C	; 28
                ++errors;
   14300:	1f 92       	push	r1
   14302:	9f 93       	push	r25
   14304:	8f 93       	push	r24
   14306:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
            }
            break;

#ifdef AMIGO
        case AMIGO_STATE:
            if(token(ptr,"HEADER"))
   1430a:	ef ef       	ldi	r30, 0xFF	; 255
   1430c:	ae 1a       	sub	r10, r30
   1430e:	be 0a       	sbc	r11, r30
   14310:	ff c1       	rjmp	.+1022   	; 0x14710 <Read_Config+0x1044>
   14312:	67 e7       	ldi	r22, 0x77	; 119
   14314:	7e e0       	ldi	r23, 0x0E	; 14
            {
                push_state(state);
   14316:	c6 01       	movw	r24, r12
   14318:	0e 94 04 34 	call	0x6808	; 0x6808 <token>
   1431c:	89 2b       	or	r24, r25
                state = AMIGO_HEADER;
   1431e:	41 f0       	breq	.+16     	; 0x14330 <Read_Config+0xc64>
   14320:	8a e0       	ldi	r24, 0x0A	; 10
   14322:	90 e0       	ldi	r25, 0x00	; 0
   14324:	0e 94 79 96 	call	0x12cf2	; 0x12cf2 <push_state>
            }
            else if(token(ptr,"CONFIG"))
   14328:	2b e0       	ldi	r18, 0x0B	; 11
   1432a:	62 2e       	mov	r6, r18
   1432c:	71 2c       	mov	r7, r1
   1432e:	7a ca       	rjmp	.-2828   	; 0x13824 <Read_Config+0x158>
   14330:	60 e7       	ldi	r22, 0x70	; 112
   14332:	7e e0       	ldi	r23, 0x0E	; 14
            {
                push_state(state);
   14334:	c6 01       	movw	r24, r12
   14336:	0e 94 04 34 	call	0x6808	; 0x6808 <token>
   1433a:	89 2b       	or	r24, r25
                state = AMIGO_CONFIG;
   1433c:	41 f0       	breq	.+16     	; 0x1434e <Read_Config+0xc82>
   1433e:	8a e0       	ldi	r24, 0x0A	; 10
   14340:	90 e0       	ldi	r25, 0x00	; 0
   14342:	0e 94 79 96 	call	0x12cf2	; 0x12cf2 <push_state>
            }
            else if(token(ptr,"GEOMETRY"))
   14346:	9c e0       	ldi	r25, 0x0C	; 12
   14348:	69 2e       	mov	r6, r25
   1434a:	71 2c       	mov	r7, r1
   1434c:	6b ca       	rjmp	.-2858   	; 0x13824 <Read_Config+0x158>
   1434e:	6b e9       	ldi	r22, 0x9B	; 155
   14350:	7f e0       	ldi	r23, 0x0F	; 15
            {
                push_state(state);
   14352:	c6 01       	movw	r24, r12
   14354:	0e 94 04 34 	call	0x6808	; 0x6808 <token>
   14358:	89 2b       	or	r24, r25
                state = AMIGO_GEOMETRY;
   1435a:	41 f0       	breq	.+16     	; 0x1436c <Read_Config+0xca0>
   1435c:	8a e0       	ldi	r24, 0x0A	; 10
   1435e:	90 e0       	ldi	r25, 0x00	; 0
   14360:	0e 94 79 96 	call	0x12cf2	; 0x12cf2 <push_state>
            }
            else
            {
                printf("Unexpected AMIGO START token: %s, at line:%d\n", ptr,lines);
   14364:	8d e0       	ldi	r24, 0x0D	; 13
   14366:	68 2e       	mov	r6, r24
   14368:	71 2c       	mov	r7, r1
   1436a:	5c ca       	rjmp	.-2888   	; 0x13824 <Read_Config+0x158>
   1436c:	80 91 77 19 	lds	r24, 0x1977	; 0x801977 <lines+0x1>
   14370:	8f 93       	push	r24
   14372:	80 91 76 19 	lds	r24, 0x1976	; 0x801976 <lines>
   14376:	8f 93       	push	r24
   14378:	df 92       	push	r13
   1437a:	cf 92       	push	r12
   1437c:	1f 92       	push	r1
   1437e:	c7 56       	subi	r28, 0x67	; 103
   14380:	df 4f       	sbci	r29, 0xFF	; 255
   14382:	38 81       	ld	r19, Y
   14384:	c9 59       	subi	r28, 0x99	; 153
   14386:	d0 40       	sbci	r29, 0x00	; 0
   14388:	3f 93       	push	r19
   1438a:	c8 56       	subi	r28, 0x68	; 104
                ++errors;
            }
            break;

        case AMIGO_HEADER:
            if( (ind = token(ptr,"DRIVE")) )
   1438c:	df 4f       	sbci	r29, 0xFF	; 255
   1438e:	48 81       	ld	r20, Y
   14390:	c8 59       	subi	r28, 0x98	; 152
   14392:	d0 40       	sbci	r29, 0x00	; 0
   14394:	b7 c1       	rjmp	.+878    	; 0x14704 <Read_Config+0x1038>
   14396:	64 ea       	ldi	r22, 0xA4	; 164
   14398:	7f e0       	ldi	r23, 0x0F	; 15
            {
                ptr += ind;
                printf("Skipping %s, at line:%d\n", ptr,lines);
   1439a:	c6 01       	movw	r24, r12
   1439c:	0e 94 04 34 	call	0x6808	; 0x6808 <token>
   143a0:	00 97       	sbiw	r24, 0x00	; 0
   143a2:	d1 f0       	breq	.+52     	; 0x143d8 <Read_Config+0xd0c>
   143a4:	20 91 77 19 	lds	r18, 0x1977	; 0x801977 <lines+0x1>
   143a8:	2f 93       	push	r18
   143aa:	20 91 76 19 	lds	r18, 0x1976	; 0x801976 <lines>
   143ae:	2f 93       	push	r18
   143b0:	c8 0e       	add	r12, r24
   143b2:	d9 1e       	adc	r13, r25
   143b4:	df 92       	push	r13
   143b6:	cf 92       	push	r12
   143b8:	1f 92       	push	r1
   143ba:	ca 56       	subi	r28, 0x6A	; 106
   143bc:	df 4f       	sbci	r29, 0xFF	; 255
   143be:	b8 81       	ld	r27, Y
   143c0:	c6 59       	subi	r28, 0x96	; 150
   143c2:	d0 40       	sbci	r29, 0x00	; 0
   143c4:	bf 93       	push	r27
   143c6:	cb 56       	subi	r28, 0x6B	; 107
   143c8:	df 4f       	sbci	r29, 0xFF	; 255
   143ca:	e8 81       	ld	r30, Y
   143cc:	c5 59       	subi	r28, 0x95	; 149
                //skip this
            }
            else if( (ind = token(ptr,"ADDRESS")) )
   143ce:	d0 40       	sbci	r29, 0x00	; 0
   143d0:	ef 93       	push	r30
   143d2:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   143d6:	9c c1       	rjmp	.+824    	; 0x14710 <Read_Config+0x1044>
   143d8:	68 e6       	ldi	r22, 0x68	; 104
   143da:	7e e0       	ldi	r23, 0x0E	; 14
            {
                ptr += ind;
                tmp = 0xff;
                if (!assign_value(ptr, 0, 14UL, &val) )
   143dc:	c6 01       	movw	r24, r12
   143de:	0e 94 04 34 	call	0x6808	; 0x6808 <token>
   143e2:	00 97       	sbiw	r24, 0x00	; 0
   143e4:	39 f1       	breq	.+78     	; 0x14434 <Read_Config+0xd68>
   143e6:	de 01       	movw	r26, r28
   143e8:	af 57       	subi	r26, 0x7F	; 127
   143ea:	bf 4f       	sbci	r27, 0xFF	; 255
   143ec:	7d 01       	movw	r14, r26
   143ee:	0e e0       	ldi	r16, 0x0E	; 14
   143f0:	10 e0       	ldi	r17, 0x00	; 0
   143f2:	20 e0       	ldi	r18, 0x00	; 0
   143f4:	30 e0       	ldi	r19, 0x00	; 0
   143f6:	40 e0       	ldi	r20, 0x00	; 0
   143f8:	50 e0       	ldi	r21, 0x00	; 0
   143fa:	ba 01       	movw	r22, r20
   143fc:	8c 0d       	add	r24, r12
                    ++errors;
   143fe:	9d 1d       	adc	r25, r13
   14400:	0e 94 a9 96 	call	0x12d52	; 0x12d52 <assign_value>
                //skip this
            }
            else if( (ind = token(ptr,"ADDRESS")) )
            {
                ptr += ind;
                tmp = 0xff;
   14404:	89 2b       	or	r24, r25
   14406:	29 f4       	brne	.+10     	; 0x14412 <Read_Config+0xd46>
                if (!assign_value(ptr, 0, 14UL, &val) )
                    ++errors;
                else
                    tmp = val;
   14408:	bf ef       	ldi	r27, 0xFF	; 255
   1440a:	ab 1a       	sub	r10, r27
   1440c:	bb 0a       	sbc	r11, r27
   1440e:	8f ef       	ldi	r24, 0xFF	; 255
   14410:	05 c0       	rjmp	.+10     	; 0x1441c <Read_Config+0xd50>
                Devices[index].ADDRESS = tmp;
   14412:	cf 57       	subi	r28, 0x7F	; 127
   14414:	df 4f       	sbci	r29, 0xFF	; 255
   14416:	88 81       	ld	r24, Y
   14418:	c1 58       	subi	r28, 0x81	; 129
   1441a:	d0 40       	sbci	r29, 0x00	; 0
   1441c:	9b e2       	ldi	r25, 0x2B	; 43
   1441e:	98 9d       	mul	r25, r8
   14420:	f0 01       	movw	r30, r0
   14422:	99 9d       	mul	r25, r9
                AMIGOp->HEADER.ADDRESS = tmp;
   14424:	f0 0d       	add	r31, r0
   14426:	11 24       	eor	r1, r1
   14428:	ed 5f       	subi	r30, 0xFD	; 253
            }
            else if( (ind = token(ptr,"PPR")) )
   1442a:	f0 4e       	sbci	r31, 0xE0	; 224
   1442c:	81 83       	std	Z+1, r24	; 0x01
   1442e:	f1 01       	movw	r30, r2
   14430:	80 83       	st	Z, r24
   14432:	f8 c9       	rjmp	.-3088   	; 0x13824 <Read_Config+0x158>
   14434:	65 e9       	ldi	r22, 0x95	; 149
   14436:	7e e0       	ldi	r23, 0x0E	; 14
            {
                ptr += ind;
                tmp = 0xff;
                if (!assign_value(ptr, 0, 7UL, &val) )
   14438:	c6 01       	movw	r24, r12
   1443a:	0e 94 04 34 	call	0x6808	; 0x6808 <token>
   1443e:	00 97       	sbiw	r24, 0x00	; 0
   14440:	31 f1       	breq	.+76     	; 0x1448e <Read_Config+0xdc2>
   14442:	9e 01       	movw	r18, r28
   14444:	2f 57       	subi	r18, 0x7F	; 127
   14446:	3f 4f       	sbci	r19, 0xFF	; 255
   14448:	79 01       	movw	r14, r18
   1444a:	07 e0       	ldi	r16, 0x07	; 7
   1444c:	10 e0       	ldi	r17, 0x00	; 0
   1444e:	20 e0       	ldi	r18, 0x00	; 0
   14450:	30 e0       	ldi	r19, 0x00	; 0
   14452:	40 e0       	ldi	r20, 0x00	; 0
   14454:	50 e0       	ldi	r21, 0x00	; 0
   14456:	ba 01       	movw	r22, r20
   14458:	8c 0d       	add	r24, r12
                    ++errors;
   1445a:	9d 1d       	adc	r25, r13
   1445c:	0e 94 a9 96 	call	0x12d52	; 0x12d52 <assign_value>
                AMIGOp->HEADER.ADDRESS = tmp;
            }
            else if( (ind = token(ptr,"PPR")) )
            {
                ptr += ind;
                tmp = 0xff;
   14460:	89 2b       	or	r24, r25
   14462:	29 f4       	brne	.+10     	; 0x1446e <Read_Config+0xda2>
                if (!assign_value(ptr, 0, 7UL, &val) )
                    ++errors;
                else
                    tmp = val;
   14464:	3f ef       	ldi	r19, 0xFF	; 255
   14466:	a3 1a       	sub	r10, r19
   14468:	b3 0a       	sbc	r11, r19
   1446a:	8f ef       	ldi	r24, 0xFF	; 255
   1446c:	05 c0       	rjmp	.+10     	; 0x14478 <Read_Config+0xdac>
                Devices[index].PPR = tmp;
   1446e:	cf 57       	subi	r28, 0x7F	; 127
   14470:	df 4f       	sbci	r29, 0xFF	; 255
   14472:	88 81       	ld	r24, Y
   14474:	c1 58       	subi	r28, 0x81	; 129
   14476:	d0 40       	sbci	r29, 0x00	; 0
   14478:	9b e2       	ldi	r25, 0x2B	; 43
   1447a:	98 9d       	mul	r25, r8
   1447c:	f0 01       	movw	r30, r0
   1447e:	99 9d       	mul	r25, r9
                AMIGOp->HEADER.PPR = tmp;
   14480:	f0 0d       	add	r31, r0
   14482:	11 24       	eor	r1, r1
            }
            else if( (ind = token(ptr,"FILE")) )
   14484:	ed 5f       	subi	r30, 0xFD	; 253
   14486:	f0 4e       	sbci	r31, 0xE0	; 224
   14488:	82 83       	std	Z+2, r24	; 0x02
   1448a:	d1 01       	movw	r26, r2
   1448c:	d1 cb       	rjmp	.-2142   	; 0x13c30 <Read_Config+0x564>
   1448e:	69 e9       	ldi	r22, 0x99	; 153
   14490:	7e e0       	ldi	r23, 0x0E	; 14
            {
                ptr += ind;
                ptr = skipspaces(ptr);
   14492:	c6 01       	movw	r24, r12
   14494:	0e 94 04 34 	call	0x6808	; 0x6808 <token>
   14498:	00 97       	sbiw	r24, 0x00	; 0
                if(*ptr == '=')
   1449a:	b1 f0       	breq	.+44     	; 0x144c8 <Read_Config+0xdfc>
   1449c:	8c 0d       	add	r24, r12
   1449e:	9d 1d       	adc	r25, r13
   144a0:	0e 94 81 32 	call	0x6502	; 0x6502 <skipspaces>
                {
                    ++ptr;
                    ptr = skipspaces(ptr);
   144a4:	fc 01       	movw	r30, r24
   144a6:	20 81       	ld	r18, Z
                }
                strncpy(AMIGOp->HEADER.NAME, ptr, sizeof(AMIGOp->HEADER.NAME)-1);
   144a8:	2d 33       	cpi	r18, 0x3D	; 61
   144aa:	19 f4       	brne	.+6      	; 0x144b2 <Read_Config+0xde6>
   144ac:	01 96       	adiw	r24, 0x01	; 1
   144ae:	0e 94 81 32 	call	0x6502	; 0x6502 <skipspaces>
   144b2:	40 e2       	ldi	r20, 0x20	; 32
   144b4:	50 e0       	ldi	r21, 0x00	; 0
                AMIGOp->HEADER.NAME[sizeof(AMIGOp->HEADER.NAME)-1] = 0;
   144b6:	bc 01       	movw	r22, r24
   144b8:	c1 01       	movw	r24, r2
   144ba:	02 96       	adiw	r24, 0x02	; 2
   144bc:	0e 94 22 32 	call	0x6444	; 0x6444 <strncpy>
            }
            else
            {
                printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   144c0:	d1 01       	movw	r26, r2
   144c2:	92 96       	adiw	r26, 0x22	; 34
   144c4:	1c 92       	st	X, r1
   144c6:	ae c9       	rjmp	.-3236   	; 0x13824 <Read_Config+0x158>
   144c8:	80 91 77 19 	lds	r24, 0x1977	; 0x801977 <lines+0x1>
   144cc:	8f 93       	push	r24
   144ce:	80 91 76 19 	lds	r24, 0x1976	; 0x801976 <lines>
   144d2:	8f 93       	push	r24
   144d4:	df 92       	push	r13
   144d6:	cf 92       	push	r12
   144d8:	1f 92       	push	r1
   144da:	cd 56       	subi	r28, 0x6D	; 109
   144dc:	df 4f       	sbci	r29, 0xFF	; 255
   144de:	b8 81       	ld	r27, Y
   144e0:	c3 59       	subi	r28, 0x93	; 147
   144e2:	d0 40       	sbci	r29, 0x00	; 0
   144e4:	bf 93       	push	r27
   144e6:	ce 56       	subi	r28, 0x6E	; 110
                ++errors;
            }
            break;

        case AMIGO_CONFIG:
            if( (ind = token(ptr,"ID")) )
   144e8:	df 4f       	sbci	r29, 0xFF	; 255
   144ea:	e8 81       	ld	r30, Y
   144ec:	c2 59       	subi	r28, 0x92	; 146
   144ee:	d0 40       	sbci	r29, 0x00	; 0
   144f0:	ee c0       	rjmp	.+476    	; 0x146ce <Read_Config+0x1002>
   144f2:	6e e9       	ldi	r22, 0x9E	; 158
   144f4:	7e e0       	ldi	r23, 0x0E	; 14
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val) )
   144f6:	c6 01       	movw	r24, r12
   144f8:	0e 94 04 34 	call	0x6808	; 0x6808 <token>
   144fc:	00 97       	sbiw	r24, 0x00	; 0
   144fe:	f1 f0       	breq	.+60     	; 0x1453c <Read_Config+0xe70>
   14500:	de 01       	movw	r26, r28
   14502:	af 57       	subi	r26, 0x7F	; 127
   14504:	bf 4f       	sbci	r27, 0xFF	; 255
   14506:	7d 01       	movw	r14, r26
   14508:	0f ef       	ldi	r16, 0xFF	; 255
   1450a:	1f ef       	ldi	r17, 0xFF	; 255
   1450c:	20 e0       	ldi	r18, 0x00	; 0
   1450e:	30 e0       	ldi	r19, 0x00	; 0
   14510:	40 e0       	ldi	r20, 0x00	; 0
   14512:	50 e0       	ldi	r21, 0x00	; 0
   14514:	ba 01       	movw	r22, r20
   14516:	8c 0d       	add	r24, r12
                    ++errors;
   14518:	9d 1d       	adc	r25, r13
   1451a:	0e 94 a9 96 	call	0x12d52	; 0x12d52 <assign_value>
                AMIGOp->CONFIG.ID = val;
   1451e:	89 2b       	or	r24, r25
   14520:	19 f4       	brne	.+6      	; 0x14528 <Read_Config+0xe5c>
   14522:	bf ef       	ldi	r27, 0xFF	; 255
   14524:	ab 1a       	sub	r10, r27
   14526:	bb 0a       	sbc	r11, r27
   14528:	cf 57       	subi	r28, 0x7F	; 127
   1452a:	df 4f       	sbci	r29, 0xFF	; 255
   1452c:	88 81       	ld	r24, Y
   1452e:	99 81       	ldd	r25, Y+1	; 0x01
   14530:	c1 58       	subi	r28, 0x81	; 129
            }
            else
            {
                printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   14532:	d0 40       	sbci	r29, 0x00	; 0
   14534:	f1 01       	movw	r30, r2
   14536:	94 a3       	std	Z+36, r25	; 0x24
   14538:	83 a3       	std	Z+35, r24	; 0x23
   1453a:	74 c9       	rjmp	.-3352   	; 0x13824 <Read_Config+0x158>
   1453c:	80 91 77 19 	lds	r24, 0x1977	; 0x801977 <lines+0x1>
   14540:	8f 93       	push	r24
   14542:	80 91 76 19 	lds	r24, 0x1976	; 0x801976 <lines>
   14546:	8f 93       	push	r24
   14548:	df 92       	push	r13
   1454a:	cf 92       	push	r12
   1454c:	1f 92       	push	r1
   1454e:	c0 57       	subi	r28, 0x70	; 112
   14550:	df 4f       	sbci	r29, 0xFF	; 255
   14552:	f8 81       	ld	r31, Y
   14554:	c0 59       	subi	r28, 0x90	; 144
   14556:	d0 40       	sbci	r29, 0x00	; 0
   14558:	ff 93       	push	r31
   1455a:	c1 57       	subi	r28, 0x71	; 113
   1455c:	df 4f       	sbci	r29, 0xFF	; 255
   1455e:	28 81       	ld	r18, Y
                ++errors;
   14560:	cf 58       	subi	r28, 0x8F	; 143
   14562:	d0 40       	sbci	r29, 0x00	; 0
   14564:	2f 93       	push	r18
   14566:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
            }
            break;

        case AMIGO_GEOMETRY:
            if( (ind = token(ptr,"BYTES_PER_SECTOR")) )
   1456a:	3f ef       	ldi	r19, 0xFF	; 255
   1456c:	a3 1a       	sub	r10, r19
   1456e:	b3 0a       	sbc	r11, r19
   14570:	cf c0       	rjmp	.+414    	; 0x14710 <Read_Config+0x1044>
   14572:	6a ea       	ldi	r22, 0xAA	; 170
   14574:	7f e0       	ldi	r23, 0x0F	; 15
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0x1000UL, &val) )
   14576:	c6 01       	movw	r24, r12
   14578:	0e 94 04 34 	call	0x6808	; 0x6808 <token>
   1457c:	00 97       	sbiw	r24, 0x00	; 0
   1457e:	f1 f0       	breq	.+60     	; 0x145bc <Read_Config+0xef0>
   14580:	de 01       	movw	r26, r28
   14582:	af 57       	subi	r26, 0x7F	; 127
   14584:	bf 4f       	sbci	r27, 0xFF	; 255
   14586:	7d 01       	movw	r14, r26
   14588:	00 e0       	ldi	r16, 0x00	; 0
   1458a:	10 e1       	ldi	r17, 0x10	; 16
   1458c:	20 e0       	ldi	r18, 0x00	; 0
   1458e:	30 e0       	ldi	r19, 0x00	; 0
   14590:	40 e0       	ldi	r20, 0x00	; 0
   14592:	50 e0       	ldi	r21, 0x00	; 0
   14594:	ba 01       	movw	r22, r20
   14596:	8c 0d       	add	r24, r12
                    ++errors;
   14598:	9d 1d       	adc	r25, r13
   1459a:	0e 94 a9 96 	call	0x12d52	; 0x12d52 <assign_value>
                AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val;
   1459e:	89 2b       	or	r24, r25
   145a0:	19 f4       	brne	.+6      	; 0x145a8 <Read_Config+0xedc>
   145a2:	bf ef       	ldi	r27, 0xFF	; 255
   145a4:	ab 1a       	sub	r10, r27
   145a6:	bb 0a       	sbc	r11, r27
   145a8:	cf 57       	subi	r28, 0x7F	; 127
   145aa:	df 4f       	sbci	r29, 0xFF	; 255
   145ac:	88 81       	ld	r24, Y
   145ae:	99 81       	ldd	r25, Y+1	; 0x01
   145b0:	c1 58       	subi	r28, 0x81	; 129
            }
            else if( (ind = token(ptr,"SECTORS_PER_TRACK")) )
   145b2:	d0 40       	sbci	r29, 0x00	; 0
   145b4:	f1 01       	movw	r30, r2
   145b6:	96 a3       	std	Z+38, r25	; 0x26
   145b8:	85 a3       	std	Z+37, r24	; 0x25
   145ba:	34 c9       	rjmp	.-3480   	; 0x13824 <Read_Config+0x158>
   145bc:	6b eb       	ldi	r22, 0xBB	; 187
   145be:	7f e0       	ldi	r23, 0x0F	; 15
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   145c0:	c6 01       	movw	r24, r12
   145c2:	0e 94 04 34 	call	0x6808	; 0x6808 <token>
   145c6:	00 97       	sbiw	r24, 0x00	; 0
   145c8:	01 f1       	breq	.+64     	; 0x1460a <Read_Config+0xf3e>
   145ca:	9e 01       	movw	r18, r28
   145cc:	2f 57       	subi	r18, 0x7F	; 127
   145ce:	3f 4f       	sbci	r19, 0xFF	; 255
   145d0:	79 01       	movw	r14, r18
   145d2:	0f ef       	ldi	r16, 0xFF	; 255
   145d4:	10 e0       	ldi	r17, 0x00	; 0
   145d6:	20 e0       	ldi	r18, 0x00	; 0
   145d8:	30 e0       	ldi	r19, 0x00	; 0
   145da:	40 e0       	ldi	r20, 0x00	; 0
   145dc:	50 e0       	ldi	r21, 0x00	; 0
   145de:	ba 01       	movw	r22, r20
   145e0:	8c 0d       	add	r24, r12
                    ++errors;
   145e2:	9d 1d       	adc	r25, r13
   145e4:	0e 94 a9 96 	call	0x12d52	; 0x12d52 <assign_value>
                AMIGOp->GEOMETRY.SECTORS_PER_TRACK = val;
   145e8:	89 2b       	or	r24, r25
   145ea:	19 f4       	brne	.+6      	; 0x145f2 <Read_Config+0xf26>
   145ec:	3f ef       	ldi	r19, 0xFF	; 255
   145ee:	a3 1a       	sub	r10, r19
   145f0:	b3 0a       	sbc	r11, r19
   145f2:	cf 57       	subi	r28, 0x7F	; 127
   145f4:	df 4f       	sbci	r29, 0xFF	; 255
   145f6:	88 81       	ld	r24, Y
   145f8:	99 81       	ldd	r25, Y+1	; 0x01
   145fa:	c1 58       	subi	r28, 0x81	; 129
   145fc:	d0 40       	sbci	r29, 0x00	; 0
   145fe:	d1 01       	movw	r26, r2
            }
            else if( (ind = token(ptr,"HEADS")) )
   14600:	98 96       	adiw	r26, 0x28	; 40
   14602:	9c 93       	st	X, r25
   14604:	8e 93       	st	-X, r24
   14606:	97 97       	sbiw	r26, 0x27	; 39
   14608:	0d c9       	rjmp	.-3558   	; 0x13824 <Read_Config+0x158>
   1460a:	6d ec       	ldi	r22, 0xCD	; 205
   1460c:	7f e0       	ldi	r23, 0x0F	; 15
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   1460e:	c6 01       	movw	r24, r12
   14610:	0e 94 04 34 	call	0x6808	; 0x6808 <token>
   14614:	00 97       	sbiw	r24, 0x00	; 0
   14616:	01 f1       	breq	.+64     	; 0x14658 <Read_Config+0xf8c>
   14618:	fe 01       	movw	r30, r28
   1461a:	ef 57       	subi	r30, 0x7F	; 127
   1461c:	ff 4f       	sbci	r31, 0xFF	; 255
   1461e:	7f 01       	movw	r14, r30
   14620:	0f ef       	ldi	r16, 0xFF	; 255
   14622:	10 e0       	ldi	r17, 0x00	; 0
   14624:	20 e0       	ldi	r18, 0x00	; 0
   14626:	30 e0       	ldi	r19, 0x00	; 0
   14628:	40 e0       	ldi	r20, 0x00	; 0
   1462a:	50 e0       	ldi	r21, 0x00	; 0
   1462c:	ba 01       	movw	r22, r20
   1462e:	8c 0d       	add	r24, r12
                    ++errors;
   14630:	9d 1d       	adc	r25, r13
   14632:	0e 94 a9 96 	call	0x12d52	; 0x12d52 <assign_value>
                AMIGOp->GEOMETRY.HEADS = val;
   14636:	89 2b       	or	r24, r25
   14638:	19 f4       	brne	.+6      	; 0x14640 <Read_Config+0xf74>
   1463a:	ff ef       	ldi	r31, 0xFF	; 255
   1463c:	af 1a       	sub	r10, r31
   1463e:	bf 0a       	sbc	r11, r31
   14640:	cf 57       	subi	r28, 0x7F	; 127
   14642:	df 4f       	sbci	r29, 0xFF	; 255
   14644:	88 81       	ld	r24, Y
   14646:	99 81       	ldd	r25, Y+1	; 0x01
   14648:	c1 58       	subi	r28, 0x81	; 129
   1464a:	d0 40       	sbci	r29, 0x00	; 0
   1464c:	d1 01       	movw	r26, r2
            }
            else if( (ind = token(ptr,"CYLINDERS")) )
   1464e:	9a 96       	adiw	r26, 0x2a	; 42
   14650:	9c 93       	st	X, r25
   14652:	8e 93       	st	-X, r24
   14654:	99 97       	sbiw	r26, 0x29	; 41
   14656:	e6 c8       	rjmp	.-3636   	; 0x13824 <Read_Config+0x158>
   14658:	63 ed       	ldi	r22, 0xD3	; 211
   1465a:	7f e0       	ldi	r23, 0x0F	; 15
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   1465c:	c6 01       	movw	r24, r12
   1465e:	0e 94 04 34 	call	0x6808	; 0x6808 <token>
   14662:	00 97       	sbiw	r24, 0x00	; 0
   14664:	01 f1       	breq	.+64     	; 0x146a6 <Read_Config+0xfda>
   14666:	fe 01       	movw	r30, r28
   14668:	ef 57       	subi	r30, 0x7F	; 127
   1466a:	ff 4f       	sbci	r31, 0xFF	; 255
   1466c:	7f 01       	movw	r14, r30
   1466e:	0f ef       	ldi	r16, 0xFF	; 255
   14670:	10 e0       	ldi	r17, 0x00	; 0
   14672:	20 e0       	ldi	r18, 0x00	; 0
   14674:	30 e0       	ldi	r19, 0x00	; 0
   14676:	40 e0       	ldi	r20, 0x00	; 0
   14678:	50 e0       	ldi	r21, 0x00	; 0
   1467a:	ba 01       	movw	r22, r20
   1467c:	8c 0d       	add	r24, r12
                    ++errors;
   1467e:	9d 1d       	adc	r25, r13
   14680:	0e 94 a9 96 	call	0x12d52	; 0x12d52 <assign_value>
                AMIGOp->GEOMETRY.CYLINDERS = val;
   14684:	89 2b       	or	r24, r25
   14686:	19 f4       	brne	.+6      	; 0x1468e <Read_Config+0xfc2>
   14688:	ff ef       	ldi	r31, 0xFF	; 255
   1468a:	af 1a       	sub	r10, r31
   1468c:	bf 0a       	sbc	r11, r31
   1468e:	cf 57       	subi	r28, 0x7F	; 127
   14690:	df 4f       	sbci	r29, 0xFF	; 255
   14692:	88 81       	ld	r24, Y
   14694:	99 81       	ldd	r25, Y+1	; 0x01
   14696:	c1 58       	subi	r28, 0x81	; 129
   14698:	d0 40       	sbci	r29, 0x00	; 0
   1469a:	d1 01       	movw	r26, r2
            }
            else
            {
                printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   1469c:	9c 96       	adiw	r26, 0x2c	; 44
   1469e:	9c 93       	st	X, r25
   146a0:	8e 93       	st	-X, r24
   146a2:	9b 97       	sbiw	r26, 0x2b	; 43
   146a4:	bf c8       	rjmp	.-3714   	; 0x13824 <Read_Config+0x158>
   146a6:	80 91 77 19 	lds	r24, 0x1977	; 0x801977 <lines+0x1>
   146aa:	8f 93       	push	r24
   146ac:	80 91 76 19 	lds	r24, 0x1976	; 0x801976 <lines>
   146b0:	8f 93       	push	r24
   146b2:	df 92       	push	r13
   146b4:	cf 92       	push	r12
   146b6:	1f 92       	push	r1
   146b8:	c3 57       	subi	r28, 0x73	; 115
   146ba:	df 4f       	sbci	r29, 0xFF	; 255
   146bc:	b8 81       	ld	r27, Y
   146be:	cd 58       	subi	r28, 0x8D	; 141
   146c0:	d0 40       	sbci	r29, 0x00	; 0
   146c2:	bf 93       	push	r27
   146c4:	c4 57       	subi	r28, 0x74	; 116
   146c6:	df 4f       	sbci	r29, 0xFF	; 255
   146c8:	e8 81       	ld	r30, Y
                ++errors;
   146ca:	cc 58       	subi	r28, 0x8C	; 140
   146cc:	d0 40       	sbci	r29, 0x00	; 0
   146ce:	ef 93       	push	r30
   146d0:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
            }
            break;
#endif // #ifdef AMIGO

        default:
            printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   146d4:	ff ef       	ldi	r31, 0xFF	; 255
   146d6:	af 1a       	sub	r10, r31
   146d8:	bf 0a       	sbc	r11, r31
   146da:	1a c0       	rjmp	.+52     	; 0x14710 <Read_Config+0x1044>
   146dc:	80 91 77 19 	lds	r24, 0x1977	; 0x801977 <lines+0x1>
   146e0:	8f 93       	push	r24
   146e2:	80 91 76 19 	lds	r24, 0x1976	; 0x801976 <lines>
   146e6:	8f 93       	push	r24
   146e8:	df 92       	push	r13
   146ea:	cf 92       	push	r12
   146ec:	1f 92       	push	r1
   146ee:	c6 57       	subi	r28, 0x76	; 118
   146f0:	df 4f       	sbci	r29, 0xFF	; 255
   146f2:	38 81       	ld	r19, Y
   146f4:	ca 58       	subi	r28, 0x8A	; 138
   146f6:	d0 40       	sbci	r29, 0x00	; 0
   146f8:	3f 93       	push	r19
   146fa:	c7 57       	subi	r28, 0x77	; 119
   146fc:	df 4f       	sbci	r29, 0xFF	; 255
   146fe:	48 81       	ld	r20, Y
            ++errors;
   14700:	c9 58       	subi	r28, 0x89	; 137
   14702:	d0 40       	sbci	r29, 0x00	; 0
   14704:	4f 93       	push	r20
            break;
   14706:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1470a:	8f ef       	ldi	r24, 0xFF	; 255
   1470c:	a8 1a       	sub	r10, r24
   1470e:	b8 0a       	sbc	r11, r24
   14710:	0f b6       	in	r0, 0x3f	; 63

        } // switch
    } //while
    if(state != START_STATE)
   14712:	f8 94       	cli
   14714:	de bf       	out	0x3e, r29	; 62
   14716:	0f be       	out	0x3f, r0	; 63
    {
        printf("Missing END statement at line:%d\n", lines);
   14718:	cd bf       	out	0x3d, r28	; 61
   1471a:	84 c8       	rjmp	.-3832   	; 0x13824 <Read_Config+0x158>
   1471c:	61 14       	cp	r6, r1
   1471e:	71 04       	cpc	r7, r1
   14720:	a9 f0       	breq	.+42     	; 0x1474c <Read_Config+0x1080>
   14722:	80 91 77 19 	lds	r24, 0x1977	; 0x801977 <lines+0x1>
   14726:	8f 93       	push	r24
   14728:	80 91 76 19 	lds	r24, 0x1976	; 0x801976 <lines>
   1472c:	8f 93       	push	r24
   1472e:	8f ea       	ldi	r24, 0xAF	; 175
   14730:	9b e1       	ldi	r25, 0x1B	; 27
        ++errors;
   14732:	1f 92       	push	r1
   14734:	9f 93       	push	r25
   14736:	8f 93       	push	r24
   14738:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1473c:	bf ef       	ldi	r27, 0xFF	; 255
   1473e:	ab 1a       	sub	r10, r27
   14740:	bb 0a       	sbc	r11, r27
    }
    printf("Read_Config: read(%d) lines\n", lines);
   14742:	0f 90       	pop	r0
   14744:	0f 90       	pop	r0
   14746:	0f 90       	pop	r0
   14748:	0f 90       	pop	r0
   1474a:	0f 90       	pop	r0
   1474c:	80 91 77 19 	lds	r24, 0x1977	; 0x801977 <lines+0x1>
   14750:	8f 93       	push	r24
   14752:	80 91 76 19 	lds	r24, 0x1976	; 0x801976 <lines>
   14756:	8f 93       	push	r24
   14758:	82 e9       	ldi	r24, 0x92	; 146
   1475a:	9b e1       	ldi	r25, 0x1B	; 27
    if(errors)
   1475c:	1f 92       	push	r1
   1475e:	9f 93       	push	r25
   14760:	8f 93       	push	r24
   14762:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   14766:	0f 90       	pop	r0
   14768:	0f 90       	pop	r0
   1476a:	0f 90       	pop	r0
        printf("Read_Config: ****** errors(%d) ******\n", errors);
   1476c:	0f 90       	pop	r0
   1476e:	0f 90       	pop	r0
   14770:	a1 14       	cp	r10, r1
   14772:	b1 04       	cpc	r11, r1
   14774:	71 f0       	breq	.+28     	; 0x14792 <Read_Config+0x10c6>
   14776:	bf 92       	push	r11
   14778:	af 92       	push	r10
   1477a:	8b e6       	ldi	r24, 0x6B	; 107
   1477c:	9b e1       	ldi	r25, 0x1B	; 27
   1477e:	1f 92       	push	r1
   14780:	9f 93       	push	r25
   14782:	8f 93       	push	r24
   14784:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>

    ret = fclose(cfg);
   14788:	0f 90       	pop	r0
   1478a:	0f 90       	pop	r0
   1478c:	0f 90       	pop	r0
   1478e:	0f 90       	pop	r0
   14790:	0f 90       	pop	r0
   14792:	c9 57       	subi	r28, 0x79	; 121
   14794:	df 4f       	sbci	r29, 0xFF	; 255
   14796:	88 81       	ld	r24, Y
    if(ret == EOF)
   14798:	99 81       	ldd	r25, Y+1	; 0x01
   1479a:	c7 58       	subi	r28, 0x87	; 135
    {
        perror("Read_Config - close error");
   1479c:	d0 40       	sbci	r29, 0x00	; 0
   1479e:	0e 94 40 7c 	call	0xf880	; 0xf880 <fclose>
   147a2:	01 96       	adiw	r24, 0x01	; 1
        ++errors;
   147a4:	39 f4       	brne	.+14     	; 0x147b4 <Read_Config+0x10e8>
   147a6:	8d ed       	ldi	r24, 0xDD	; 221
   147a8:	9f e0       	ldi	r25, 0x0F	; 15
   147aa:	0e 94 e0 77 	call	0xefc0	; 0xefc0 <perror>
    }

    return(errors);
}
   147ae:	c5 01       	movw	r24, r10
   147b0:	01 96       	adiw	r24, 0x01	; 1
   147b2:	01 c0       	rjmp	.+2      	; 0x147b6 <Read_Config+0x10ea>
   147b4:	c5 01       	movw	r24, r10
   147b6:	c6 56       	subi	r28, 0x66	; 102
   147b8:	df 4f       	sbci	r29, 0xFF	; 255
   147ba:	e2 e1       	ldi	r30, 0x12	; 18
   147bc:	0c 94 2f e8 	jmp	0x1d05e	; 0x1d05e <__epilogue_restores__>

000147c0 <print_var_P>:
/// @brief Display Configuration File variable
/// @param str: title
/// @param val: variable value
/// @return  void
void print_var_P(__memx const char *str, uint32_t val)
{
   147c0:	cf 92       	push	r12
   147c2:	df 92       	push	r13
   147c4:	ef 92       	push	r14
   147c6:	0f 93       	push	r16
   147c8:	1f 93       	push	r17
   147ca:	cf 93       	push	r28
   147cc:	df 93       	push	r29
   147ce:	cd b7       	in	r28, 0x3d	; 61
   147d0:	de b7       	in	r29, 0x3e	; 62
   147d2:	c0 54       	subi	r28, 0x40	; 64
   147d4:	d1 09       	sbc	r29, r1
   147d6:	0f b6       	in	r0, 0x3f	; 63
   147d8:	f8 94       	cli
   147da:	de bf       	out	0x3e, r29	; 62
   147dc:	0f be       	out	0x3f, r0	; 63
   147de:	cd bf       	out	0x3d, r28	; 61
   147e0:	6b 01       	movw	r12, r22
   147e2:	e8 2e       	mov	r14, r24
   147e4:	75 2f       	mov	r23, r21
   147e6:	de 01       	movw	r26, r28
   147e8:	11 96       	adiw	r26, 0x01	; 1
    char tmp[64];
    int i=0;
   147ea:	80 e0       	ldi	r24, 0x00	; 0
   147ec:	90 e0       	ldi	r25, 0x00	; 0
   147ee:	8d 01       	movw	r16, r26
    while( *str && i < 62)
   147f0:	f6 01       	movw	r30, r12
   147f2:	5e 2d       	mov	r21, r14
   147f4:	0e 94 4a e8 	call	0x1d094	; 0x1d094 <__xload_1>
   147f8:	66 23       	and	r22, r22
   147fa:	51 f0       	breq	.+20     	; 0x14810 <print_var_P+0x50>
   147fc:	8e 33       	cpi	r24, 0x3E	; 62
   147fe:	91 05       	cpc	r25, r1
   14800:	39 f0       	breq	.+14     	; 0x14810 <print_var_P+0x50>
        tmp[i++] = *str++;
   14802:	01 96       	adiw	r24, 0x01	; 1
   14804:	5f ef       	ldi	r21, 0xFF	; 255
   14806:	c5 1a       	sub	r12, r21
   14808:	d5 0a       	sbc	r13, r21
   1480a:	e5 0a       	sbc	r14, r21
   1480c:	6d 93       	st	X+, r22
   1480e:	f0 cf       	rjmp	.-32     	; 0x147f0 <print_var_P+0x30>
    tmp[i++] = 0;
   14810:	f8 01       	movw	r30, r16
   14812:	e8 0f       	add	r30, r24
   14814:	f9 1f       	adc	r31, r25
   14816:	10 82       	st	Z, r1

    printf("    %-25s = %8lxH (%ld)\n", tmp, val, val); 
   14818:	7f 93       	push	r23
   1481a:	4f 93       	push	r20
   1481c:	3f 93       	push	r19
   1481e:	2f 93       	push	r18
   14820:	7f 93       	push	r23
   14822:	4f 93       	push	r20
   14824:	3f 93       	push	r19
   14826:	2f 93       	push	r18
   14828:	1f 93       	push	r17
   1482a:	0f 93       	push	r16
   1482c:	82 e5       	ldi	r24, 0x52	; 82
   1482e:	9b e1       	ldi	r25, 0x1B	; 27
   14830:	1f 92       	push	r1
   14832:	9f 93       	push	r25
   14834:	8f 93       	push	r24
   14836:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
}
   1483a:	0f b6       	in	r0, 0x3f	; 63
   1483c:	f8 94       	cli
   1483e:	de bf       	out	0x3e, r29	; 62
   14840:	0f be       	out	0x3f, r0	; 63
   14842:	cd bf       	out	0x3d, r28	; 61
   14844:	c0 5c       	subi	r28, 0xC0	; 192
   14846:	df 4f       	sbci	r29, 0xFF	; 255
   14848:	0f b6       	in	r0, 0x3f	; 63
   1484a:	f8 94       	cli
   1484c:	de bf       	out	0x3e, r29	; 62
   1484e:	0f be       	out	0x3f, r0	; 63
   14850:	cd bf       	out	0x3d, r28	; 61
   14852:	df 91       	pop	r29
   14854:	cf 91       	pop	r28
   14856:	1f 91       	pop	r17
   14858:	0f 91       	pop	r16
   1485a:	ef 90       	pop	r14
   1485c:	df 90       	pop	r13
   1485e:	cf 90       	pop	r12
   14860:	08 95       	ret

00014862 <print_str_P>:
/// @brief Display Configuration File string
/// @param *str: title
/// @param *arg: string
/// @return  void
void print_str_P(__memx const char *str, char *arg)
{
   14862:	cf 92       	push	r12
   14864:	df 92       	push	r13
   14866:	ef 92       	push	r14
   14868:	cf 93       	push	r28
   1486a:	df 93       	push	r29
   1486c:	cd b7       	in	r28, 0x3d	; 61
   1486e:	de b7       	in	r29, 0x3e	; 62
   14870:	c0 54       	subi	r28, 0x40	; 64
   14872:	d1 09       	sbc	r29, r1
   14874:	0f b6       	in	r0, 0x3f	; 63
   14876:	f8 94       	cli
   14878:	de bf       	out	0x3e, r29	; 62
   1487a:	0f be       	out	0x3f, r0	; 63
   1487c:	cd bf       	out	0x3d, r28	; 61
   1487e:	6b 01       	movw	r12, r22
   14880:	e8 2e       	mov	r14, r24
   14882:	75 2f       	mov	r23, r21
   14884:	de 01       	movw	r26, r28
   14886:	11 96       	adiw	r26, 0x01	; 1
    char tmp[64];
    int i=0;
   14888:	80 e0       	ldi	r24, 0x00	; 0
   1488a:	90 e0       	ldi	r25, 0x00	; 0
   1488c:	9d 01       	movw	r18, r26
    while( *str && i < 62)
   1488e:	f6 01       	movw	r30, r12
   14890:	5e 2d       	mov	r21, r14
   14892:	0e 94 4a e8 	call	0x1d094	; 0x1d094 <__xload_1>
   14896:	66 23       	and	r22, r22
   14898:	51 f0       	breq	.+20     	; 0x148ae <print_str_P+0x4c>
   1489a:	8e 33       	cpi	r24, 0x3E	; 62
   1489c:	91 05       	cpc	r25, r1
   1489e:	39 f0       	breq	.+14     	; 0x148ae <print_str_P+0x4c>
        tmp[i++] = *str++;
   148a0:	01 96       	adiw	r24, 0x01	; 1
   148a2:	5f ef       	ldi	r21, 0xFF	; 255
   148a4:	c5 1a       	sub	r12, r21
   148a6:	d5 0a       	sbc	r13, r21
   148a8:	e5 0a       	sbc	r14, r21
   148aa:	6d 93       	st	X+, r22
   148ac:	f0 cf       	rjmp	.-32     	; 0x1488e <print_str_P+0x2c>
    tmp[i++] = 0;
   148ae:	f9 01       	movw	r30, r18
   148b0:	e8 0f       	add	r30, r24
   148b2:	f9 1f       	adc	r31, r25
   148b4:	10 82       	st	Z, r1
    printf("    %-25s = \"%s\"\n", tmp, arg);   
   148b6:	7f 93       	push	r23
   148b8:	4f 93       	push	r20
   148ba:	3f 93       	push	r19
   148bc:	2f 93       	push	r18
   148be:	80 e4       	ldi	r24, 0x40	; 64
   148c0:	9b e1       	ldi	r25, 0x1B	; 27
   148c2:	1f 92       	push	r1
   148c4:	9f 93       	push	r25
   148c6:	8f 93       	push	r24
   148c8:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
}
   148cc:	0f b6       	in	r0, 0x3f	; 63
   148ce:	f8 94       	cli
   148d0:	de bf       	out	0x3e, r29	; 62
   148d2:	0f be       	out	0x3f, r0	; 63
   148d4:	cd bf       	out	0x3d, r28	; 61
   148d6:	c0 5c       	subi	r28, 0xC0	; 192
   148d8:	df 4f       	sbci	r29, 0xFF	; 255
   148da:	0f b6       	in	r0, 0x3f	; 63
   148dc:	f8 94       	cli
   148de:	de bf       	out	0x3e, r29	; 62
   148e0:	0f be       	out	0x3f, r0	; 63
   148e2:	cd bf       	out	0x3d, r28	; 61
   148e4:	df 91       	pop	r29
   148e6:	cf 91       	pop	r28
   148e8:	ef 90       	pop	r14
   148ea:	df 90       	pop	r13
   148ec:	cf 90       	pop	r12
   148ee:	08 95       	ret

000148f0 <display_Addresses>:

/// @brief Display Configuration device address saummary
/// @return  void
void display_Addresses()
{
   148f0:	2f 92       	push	r2
   148f2:	3f 92       	push	r3
   148f4:	4f 92       	push	r4
   148f6:	6f 92       	push	r6
   148f8:	7f 92       	push	r7
   148fa:	8f 92       	push	r8
   148fc:	af 92       	push	r10
   148fe:	bf 92       	push	r11
   14900:	cf 92       	push	r12
   14902:	df 92       	push	r13
   14904:	ef 92       	push	r14
   14906:	0f 93       	push	r16
   14908:	1f 93       	push	r17
   1490a:	cf 93       	push	r28
   1490c:	df 93       	push	r29
   1490e:	cd b7       	in	r28, 0x3d	; 61
   14910:	de b7       	in	r29, 0x3e	; 62
   14912:	2b 97       	sbiw	r28, 0x0b	; 11
   14914:	0f b6       	in	r0, 0x3f	; 63
   14916:	f8 94       	cli
   14918:	de bf       	out	0x3e, r29	; 62
   1491a:	0f be       	out	0x3f, r0	; 63
   1491c:	cd bf       	out	0x3d, r28	; 61
    int i;
    int address;
    printf("Listen and Talk Address Settings\n");
   1491e:	8e e1       	ldi	r24, 0x1E	; 30
   14920:	9b e1       	ldi	r25, 0x1B	; 27
   14922:	1f 92       	push	r1
   14924:	9f 93       	push	r25
   14926:	8f 93       	push	r24
   14928:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1492c:	03 e0       	ldi	r16, 0x03	; 3
   1492e:	1f e1       	ldi	r17, 0x1F	; 31
   14930:	0f 90       	pop	r0
   14932:	0f 90       	pop	r0
   14934:	0f 90       	pop	r0
            printf("  AMIGO_MSA   = %02XH\n",BASE_MSA + address );
        }
#endif
        if(Devices[i].TYPE == PRINTER_TYPE )
        {
            printf("  PRINTER_MLA = %02XH\n",BASE_MLA + address );
   14936:	8d e7       	ldi	r24, 0x7D	; 125
   14938:	9a e1       	ldi	r25, 0x1A	; 26
   1493a:	9c 01       	movw	r18, r24
   1493c:	40 e0       	ldi	r20, 0x00	; 0
   1493e:	29 83       	std	Y+1, r18	; 0x01
   14940:	3a 83       	std	Y+2, r19	; 0x02
   14942:	4b 83       	std	Y+3, r20	; 0x03
            printf("  PRINTER_MTA = %02XH\n",BASE_MTA + address );
   14944:	86 e6       	ldi	r24, 0x66	; 102
   14946:	9a e1       	ldi	r25, 0x1A	; 26
   14948:	9c 01       	movw	r18, r24
   1494a:	40 e0       	ldi	r20, 0x00	; 0
   1494c:	2c 83       	std	Y+4, r18	; 0x04
   1494e:	3d 83       	std	Y+5, r19	; 0x05
   14950:	4e 83       	std	Y+6, r20	; 0x06
            printf("  PRINTER_MSA = %02XH\n",BASE_MSA + address );
   14952:	8f e4       	ldi	r24, 0x4F	; 79
   14954:	9a e1       	ldi	r25, 0x1A	; 26
   14956:	9c 01       	movw	r18, r24
   14958:	40 e0       	ldi	r20, 0x00	; 0
   1495a:	2f 83       	std	Y+7, r18	; 0x07
   1495c:	38 87       	std	Y+8, r19	; 0x08
   1495e:	49 87       	std	Y+9, r20	; 0x09
            printf("  SS80_MSA    = %02XH\n",BASE_MSA + address );
        }
#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
        {
            printf("  AMIGO_MLA   = %02XH\n",BASE_MLA + address );
   14960:	82 ec       	ldi	r24, 0xC2	; 194
   14962:	9a e1       	ldi	r25, 0x1A	; 26
   14964:	6c 01       	movw	r12, r24
            printf("  AMIGO_MTA   = %02XH\n",BASE_MTA + address );
   14966:	8b ea       	ldi	r24, 0xAB	; 171
   14968:	9a e1       	ldi	r25, 0x1A	; 26
   1496a:	3c 01       	movw	r6, r24
            printf("  AMIGO_MSA   = %02XH\n",BASE_MSA + address );
   1496c:	84 e9       	ldi	r24, 0x94	; 148
   1496e:	9a e1       	ldi	r25, 0x1A	; 26
   14970:	1c 01       	movw	r2, r24
            continue;
        address = Devices[i].ADDRESS;

        if(Devices[i].TYPE == SS80_TYPE)
        {
            printf("  SS80_MLA    = %02XH\n",BASE_MLA + address );
   14972:	87 e0       	ldi	r24, 0x07	; 7
   14974:	a8 2e       	mov	r10, r24
   14976:	8b e1       	ldi	r24, 0x1B	; 27
   14978:	b8 2e       	mov	r11, r24
    int i;
    int address;
    printf("Listen and Talk Address Settings\n");
    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   1497a:	f8 01       	movw	r30, r16
   1497c:	80 81       	ld	r24, Z
   1497e:	88 23       	and	r24, r24
   14980:	09 f4       	brne	.+2      	; 0x14984 <display_Addresses+0x94>
   14982:	8a c0       	rjmp	.+276    	; 0x14a98 <display_Addresses+0x1a8>
            continue;
        address = Devices[i].ADDRESS;
   14984:	f1 81       	ldd	r31, Z+1	; 0x01
   14986:	2f 2f       	mov	r18, r31
   14988:	30 e0       	ldi	r19, 0x00	; 0
   1498a:	3b 87       	std	Y+11, r19	; 0x0b
   1498c:	2a 87       	std	Y+10, r18	; 0x0a

        if(Devices[i].TYPE == SS80_TYPE)
   1498e:	83 30       	cpi	r24, 0x03	; 3
   14990:	49 f5       	brne	.+82     	; 0x149e4 <display_Addresses+0xf4>
        {
            printf("  SS80_MLA    = %02XH\n",BASE_MLA + address );
   14992:	c9 01       	movw	r24, r18
   14994:	80 96       	adiw	r24, 0x20	; 32
   14996:	9f 93       	push	r25
   14998:	8f 93       	push	r24
   1499a:	c5 01       	movw	r24, r10
   1499c:	1f 92       	push	r1
   1499e:	9f 93       	push	r25
   149a0:	af 92       	push	r10
   149a2:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
            printf("  SS80_MTA    = %02XH\n",BASE_MTA + address );
   149a6:	8a 85       	ldd	r24, Y+10	; 0x0a
   149a8:	9b 85       	ldd	r25, Y+11	; 0x0b
   149aa:	80 5c       	subi	r24, 0xC0	; 192
   149ac:	9f 4f       	sbci	r25, 0xFF	; 255
   149ae:	9f 93       	push	r25
   149b0:	8f 93       	push	r24
   149b2:	80 ef       	ldi	r24, 0xF0	; 240
   149b4:	9a e1       	ldi	r25, 0x1A	; 26
   149b6:	1f 92       	push	r1
   149b8:	9f 93       	push	r25
   149ba:	8f 93       	push	r24
   149bc:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
            printf("  SS80_MSA    = %02XH\n",BASE_MSA + address );
   149c0:	8a 85       	ldd	r24, Y+10	; 0x0a
   149c2:	9b 85       	ldd	r25, Y+11	; 0x0b
   149c4:	80 5a       	subi	r24, 0xA0	; 160
   149c6:	9f 4f       	sbci	r25, 0xFF	; 255
   149c8:	9f 93       	push	r25
   149ca:	8f 93       	push	r24
   149cc:	89 ed       	ldi	r24, 0xD9	; 217
   149ce:	9a e1       	ldi	r25, 0x1A	; 26
   149d0:	1f 92       	push	r1
   149d2:	9f 93       	push	r25
   149d4:	8f 93       	push	r24
   149d6:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   149da:	0f b6       	in	r0, 0x3f	; 63
   149dc:	f8 94       	cli
   149de:	de bf       	out	0x3e, r29	; 62
   149e0:	0f be       	out	0x3f, r0	; 63
   149e2:	cd bf       	out	0x3d, r28	; 61
        }
#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   149e4:	f8 01       	movw	r30, r16
   149e6:	80 81       	ld	r24, Z
   149e8:	81 30       	cpi	r24, 0x01	; 1
   149ea:	29 f5       	brne	.+74     	; 0x14a36 <display_Addresses+0x146>
        {
            printf("  AMIGO_MLA   = %02XH\n",BASE_MLA + address );
   149ec:	8a 85       	ldd	r24, Y+10	; 0x0a
   149ee:	9b 85       	ldd	r25, Y+11	; 0x0b
   149f0:	80 96       	adiw	r24, 0x20	; 32
   149f2:	9f 93       	push	r25
   149f4:	8f 93       	push	r24
   149f6:	1f 92       	push	r1
   149f8:	df 92       	push	r13
   149fa:	cf 92       	push	r12
   149fc:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
            printf("  AMIGO_MTA   = %02XH\n",BASE_MTA + address );
   14a00:	8a 85       	ldd	r24, Y+10	; 0x0a
   14a02:	9b 85       	ldd	r25, Y+11	; 0x0b
   14a04:	80 5c       	subi	r24, 0xC0	; 192
   14a06:	9f 4f       	sbci	r25, 0xFF	; 255
   14a08:	9f 93       	push	r25
   14a0a:	8f 93       	push	r24
   14a0c:	1f 92       	push	r1
   14a0e:	7f 92       	push	r7
   14a10:	6f 92       	push	r6
   14a12:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
            printf("  AMIGO_MSA   = %02XH\n",BASE_MSA + address );
   14a16:	8a 85       	ldd	r24, Y+10	; 0x0a
   14a18:	9b 85       	ldd	r25, Y+11	; 0x0b
   14a1a:	80 5a       	subi	r24, 0xA0	; 160
   14a1c:	9f 4f       	sbci	r25, 0xFF	; 255
   14a1e:	9f 93       	push	r25
   14a20:	8f 93       	push	r24
   14a22:	1f 92       	push	r1
   14a24:	3f 92       	push	r3
   14a26:	2f 92       	push	r2
   14a28:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   14a2c:	0f b6       	in	r0, 0x3f	; 63
   14a2e:	f8 94       	cli
   14a30:	de bf       	out	0x3e, r29	; 62
   14a32:	0f be       	out	0x3f, r0	; 63
   14a34:	cd bf       	out	0x3d, r28	; 61
        }
#endif
        if(Devices[i].TYPE == PRINTER_TYPE )
   14a36:	f8 01       	movw	r30, r16
   14a38:	80 81       	ld	r24, Z
   14a3a:	84 30       	cpi	r24, 0x04	; 4
   14a3c:	69 f5       	brne	.+90     	; 0x14a98 <display_Addresses+0x1a8>
        {
            printf("  PRINTER_MLA = %02XH\n",BASE_MLA + address );
   14a3e:	8a 85       	ldd	r24, Y+10	; 0x0a
   14a40:	9b 85       	ldd	r25, Y+11	; 0x0b
   14a42:	80 96       	adiw	r24, 0x20	; 32
   14a44:	9f 93       	push	r25
   14a46:	8f 93       	push	r24
   14a48:	1f 92       	push	r1
   14a4a:	fa 81       	ldd	r31, Y+2	; 0x02
   14a4c:	ff 93       	push	r31
   14a4e:	29 81       	ldd	r18, Y+1	; 0x01
   14a50:	2f 93       	push	r18
   14a52:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
            printf("  PRINTER_MTA = %02XH\n",BASE_MTA + address );
   14a56:	8a 85       	ldd	r24, Y+10	; 0x0a
   14a58:	9b 85       	ldd	r25, Y+11	; 0x0b
   14a5a:	80 5c       	subi	r24, 0xC0	; 192
   14a5c:	9f 4f       	sbci	r25, 0xFF	; 255
   14a5e:	9f 93       	push	r25
   14a60:	8f 93       	push	r24
   14a62:	1f 92       	push	r1
   14a64:	3d 81       	ldd	r19, Y+5	; 0x05
   14a66:	3f 93       	push	r19
   14a68:	4c 81       	ldd	r20, Y+4	; 0x04
   14a6a:	4f 93       	push	r20
   14a6c:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
            printf("  PRINTER_MSA = %02XH\n",BASE_MSA + address );
   14a70:	8a 85       	ldd	r24, Y+10	; 0x0a
   14a72:	9b 85       	ldd	r25, Y+11	; 0x0b
   14a74:	80 5a       	subi	r24, 0xA0	; 160
   14a76:	9f 4f       	sbci	r25, 0xFF	; 255
   14a78:	9b 87       	std	Y+11, r25	; 0x0b
   14a7a:	8a 87       	std	Y+10, r24	; 0x0a
   14a7c:	9f 93       	push	r25
   14a7e:	8f 93       	push	r24
   14a80:	1f 92       	push	r1
   14a82:	98 85       	ldd	r25, Y+8	; 0x08
   14a84:	9f 93       	push	r25
   14a86:	ef 81       	ldd	r30, Y+7	; 0x07
   14a88:	ef 93       	push	r30
   14a8a:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   14a8e:	0f b6       	in	r0, 0x3f	; 63
   14a90:	f8 94       	cli
   14a92:	de bf       	out	0x3e, r29	; 62
   14a94:	0f be       	out	0x3f, r0	; 63
   14a96:	cd bf       	out	0x3d, r28	; 61
   14a98:	05 5d       	subi	r16, 0xD5	; 213
   14a9a:	1f 4f       	sbci	r17, 0xFF	; 255
void display_Addresses()
{
    int i;
    int address;
    printf("Listen and Talk Address Settings\n");
    for(i=0;i<MAX_DEVICES;++i)
   14a9c:	31 e2       	ldi	r19, 0x21	; 33
   14a9e:	07 30       	cpi	r16, 0x07	; 7
   14aa0:	13 07       	cpc	r17, r19
   14aa2:	09 f0       	breq	.+2      	; 0x14aa6 <display_Addresses+0x1b6>
   14aa4:	6a cf       	rjmp	.-300    	; 0x1497a <display_Addresses+0x8a>
            printf("  PRINTER_MLA = %02XH\n",BASE_MLA + address );
            printf("  PRINTER_MTA = %02XH\n",BASE_MTA + address );
            printf("  PRINTER_MSA = %02XH\n",BASE_MSA + address );
        }
    }
    printf("\n");
   14aa6:	8d e4       	ldi	r24, 0x4D	; 77
   14aa8:	9a e1       	ldi	r25, 0x1A	; 26
   14aaa:	1f 92       	push	r1
   14aac:	9f 93       	push	r25
   14aae:	8f 93       	push	r24
   14ab0:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
}
   14ab4:	0f 90       	pop	r0
   14ab6:	0f 90       	pop	r0
   14ab8:	0f 90       	pop	r0
   14aba:	2b 96       	adiw	r28, 0x0b	; 11
   14abc:	0f b6       	in	r0, 0x3f	; 63
   14abe:	f8 94       	cli
   14ac0:	de bf       	out	0x3e, r29	; 62
   14ac2:	0f be       	out	0x3f, r0	; 63
   14ac4:	cd bf       	out	0x3d, r28	; 61
   14ac6:	df 91       	pop	r29
   14ac8:	cf 91       	pop	r28
   14aca:	1f 91       	pop	r17
   14acc:	0f 91       	pop	r16
   14ace:	ef 90       	pop	r14
   14ad0:	df 90       	pop	r13
   14ad2:	cf 90       	pop	r12
   14ad4:	bf 90       	pop	r11
   14ad6:	af 90       	pop	r10
   14ad8:	8f 90       	pop	r8
   14ada:	7f 90       	pop	r7
   14adc:	6f 90       	pop	r6
   14ade:	4f 90       	pop	r4
   14ae0:	3f 90       	pop	r3
   14ae2:	2f 90       	pop	r2
   14ae4:	08 95       	ret

00014ae6 <display_Config>:

/// @brief Display current Configuration File values
/// @return  void
void display_Config()
{
   14ae6:	2f 92       	push	r2
   14ae8:	3f 92       	push	r3
   14aea:	4f 92       	push	r4
   14aec:	6f 92       	push	r6
   14aee:	7f 92       	push	r7
   14af0:	8f 92       	push	r8
   14af2:	af 92       	push	r10
   14af4:	bf 92       	push	r11
   14af6:	cf 92       	push	r12
   14af8:	df 92       	push	r13
   14afa:	ef 92       	push	r14
   14afc:	0f 93       	push	r16
   14afe:	1f 93       	push	r17
   14b00:	cf 93       	push	r28
   14b02:	df 93       	push	r29
   14b04:	cd b7       	in	r28, 0x3d	; 61
   14b06:	de b7       	in	r29, 0x3e	; 62
   14b08:	2b 97       	sbiw	r28, 0x0b	; 11
   14b0a:	0f b6       	in	r0, 0x3f	; 63
   14b0c:	f8 94       	cli
   14b0e:	de bf       	out	0x3e, r29	; 62
   14b10:	0f be       	out	0x3f, r0	; 63
   14b12:	cd bf       	out	0x3d, r28	; 61
#ifdef AMIGO
    ///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    printf("Current Configuration Settings\n");
   14b14:	8d e2       	ldi	r24, 0x2D	; 45
   14b16:	9a e1       	ldi	r25, 0x1A	; 26
   14b18:	1f 92       	push	r1
   14b1a:	9f 93       	push	r25
   14b1c:	8f 93       	push	r24
   14b1e:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   14b22:	03 e0       	ldi	r16, 0x03	; 3
   14b24:	1f e1       	ldi	r17, 0x1F	; 31
   14b26:	0f 90       	pop	r0
   14b28:	0f 90       	pop	r0
   14b2a:	0f 90       	pop	r0
            printf("PRINTER\n");
            printf("  CONFIG\n");
                print_var("ADDRESS", (uint32_t) PRINTERp->HEADER.ADDRESS);
			printf("  END\n");
        }
		printf("END\n");
   14b2c:	84 ea       	ldi	r24, 0xA4	; 164
   14b2e:	97 e1       	ldi	r25, 0x17	; 23
   14b30:	9c 01       	movw	r18, r24
   14b32:	40 e0       	ldi	r20, 0x00	; 0
   14b34:	29 83       	std	Y+1, r18	; 0x01
   14b36:	3a 83       	std	Y+2, r19	; 0x02
   14b38:	4b 83       	std	Y+3, r20	; 0x03
		printf("\n");
   14b3a:	82 ea       	ldi	r24, 0xA2	; 162
   14b3c:	97 e1       	ldi	r25, 0x17	; 23
   14b3e:	9c 01       	movw	r18, r24
   14b40:	40 e0       	ldi	r20, 0x00	; 0
   14b42:	2c 83       	std	Y+4, r18	; 0x04
   14b44:	3d 83       	std	Y+5, r19	; 0x05
   14b46:	4e 83       	std	Y+6, r20	; 0x06

        if(Devices[i].TYPE == PRINTER_TYPE )
        {
            PRINTERp= (PRINTERDeviceType *)Devices[i].dev;

            printf("PRINTER\n");
   14b48:	82 ec       	ldi	r24, 0xC2	; 194
   14b4a:	97 e1       	ldi	r25, 0x17	; 23
   14b4c:	9c 01       	movw	r18, r24
   14b4e:	40 e0       	ldi	r20, 0x00	; 0
   14b50:	2f 83       	std	Y+7, r18	; 0x07
   14b52:	38 87       	std	Y+8, r19	; 0x08
   14b54:	49 87       	std	Y+9, r20	; 0x09
            printf("  CONFIG\n");
   14b56:	88 eb       	ldi	r24, 0xB8	; 184
   14b58:	97 e1       	ldi	r25, 0x17	; 23
   14b5a:	1c 01       	movw	r2, r24
                print_var("ADDRESS", (uint32_t) PRINTERp->HEADER.ADDRESS);
   14b5c:	80 eb       	ldi	r24, 0xB0	; 176
   14b5e:	97 e1       	ldi	r25, 0x17	; 23
   14b60:	3c 01       	movw	r6, r24
   14b62:	81 2c       	mov	r8, r1
			printf("  END\n");
   14b64:	89 ea       	ldi	r24, 0xA9	; 169
   14b66:	97 e1       	ldi	r25, 0x17	; 23
   14b68:	6c 01       	movw	r12, r24
#endif

    printf("Current Configuration Settings\n");
    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   14b6a:	f8 01       	movw	r30, r16
   14b6c:	80 81       	ld	r24, Z
   14b6e:	88 23       	and	r24, r24
   14b70:	09 f4       	brne	.+2      	; 0x14b74 <display_Config+0x8e>
   14b72:	6d c2       	rjmp	.+1242   	; 0x1504e <display_Config+0x568>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   14b74:	83 30       	cpi	r24, 0x03	; 3
   14b76:	09 f0       	breq	.+2      	; 0x14b7a <display_Config+0x94>
   14b78:	75 c1       	rjmp	.+746    	; 0x14e64 <display_Config+0x37e>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   14b7a:	27 a1       	ldd	r18, Z+39	; 0x27
   14b7c:	30 a5       	ldd	r19, Z+40	; 0x28
   14b7e:	3b 87       	std	Y+11, r19	; 0x0b
   14b80:	2a 87       	std	Y+10, r18	; 0x0a

            printf("SS80 %s\n", Devices[i].model);
   14b82:	c8 01       	movw	r24, r16
   14b84:	07 96       	adiw	r24, 0x07	; 7
   14b86:	9f 93       	push	r25
   14b88:	8f 93       	push	r24
   14b8a:	84 e2       	ldi	r24, 0x24	; 36
   14b8c:	9a e1       	ldi	r25, 0x1A	; 26
   14b8e:	1f 92       	push	r1
   14b90:	9f 93       	push	r25
   14b92:	8f 93       	push	r24
   14b94:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
			printf("  # HP85 BASIC ADDRESS :D7%d0\n", (int) SS80p->HEADER.ADDRESS);
   14b98:	ea 85       	ldd	r30, Y+10	; 0x0a
   14b9a:	fb 85       	ldd	r31, Y+11	; 0x0b
   14b9c:	80 81       	ld	r24, Z
   14b9e:	1f 92       	push	r1
   14ba0:	8f 93       	push	r24
   14ba2:	85 e0       	ldi	r24, 0x05	; 5
   14ba4:	9a e1       	ldi	r25, 0x1A	; 26
   14ba6:	1f 92       	push	r1
   14ba8:	9f 93       	push	r25
   14baa:	8f 93       	push	r24
   14bac:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
            printf("  CONFIG\n");
   14bb0:	8b ef       	ldi	r24, 0xFB	; 251
   14bb2:	99 e1       	ldi	r25, 0x19	; 25
   14bb4:	1f 92       	push	r1
   14bb6:	9f 93       	push	r25
   14bb8:	8f 93       	push	r24
   14bba:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
                print_var("ADDRESS", (uint32_t) SS80p->HEADER.ADDRESS);
   14bbe:	ea 85       	ldd	r30, Y+10	; 0x0a
   14bc0:	fb 85       	ldd	r31, Y+11	; 0x0b
   14bc2:	20 81       	ld	r18, Z
   14bc4:	30 e0       	ldi	r19, 0x00	; 0
   14bc6:	40 e0       	ldi	r20, 0x00	; 0
   14bc8:	50 e0       	ldi	r21, 0x00	; 0
   14bca:	63 ef       	ldi	r22, 0xF3	; 243
   14bcc:	79 e1       	ldi	r23, 0x19	; 25
   14bce:	80 e0       	ldi	r24, 0x00	; 0
   14bd0:	f7 dd       	rcall	.-1042   	; 0x147c0 <print_var_P>
                print_var("PPR", (uint32_t) SS80p->HEADER.PPR);
   14bd2:	ea 85       	ldd	r30, Y+10	; 0x0a
   14bd4:	fb 85       	ldd	r31, Y+11	; 0x0b
   14bd6:	21 81       	ldd	r18, Z+1	; 0x01
   14bd8:	30 e0       	ldi	r19, 0x00	; 0
   14bda:	40 e0       	ldi	r20, 0x00	; 0
   14bdc:	50 e0       	ldi	r21, 0x00	; 0
   14bde:	6f ee       	ldi	r22, 0xEF	; 239
   14be0:	79 e1       	ldi	r23, 0x19	; 25
   14be2:	80 e0       	ldi	r24, 0x00	; 0
   14be4:	ed dd       	rcall	.-1062   	; 0x147c0 <print_var_P>
                print_str("FILE", SS80p->HEADER.NAME);
   14be6:	4a 85       	ldd	r20, Y+10	; 0x0a
   14be8:	5b 85       	ldd	r21, Y+11	; 0x0b
   14bea:	4e 5f       	subi	r20, 0xFE	; 254
   14bec:	5f 4f       	sbci	r21, 0xFF	; 255
   14bee:	6a ee       	ldi	r22, 0xEA	; 234
   14bf0:	79 e1       	ldi	r23, 0x19	; 25
   14bf2:	80 e0       	ldi	r24, 0x00	; 0
   14bf4:	36 de       	rcall	.-916    	; 0x14862 <print_str_P>
			printf("  END\n");
   14bf6:	83 ee       	ldi	r24, 0xE3	; 227
   14bf8:	99 e1       	ldi	r25, 0x19	; 25
   14bfa:	1f 92       	push	r1
   14bfc:	9f 93       	push	r25
   14bfe:	8f 93       	push	r24
   14c00:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
            printf("  HEADER\n");
   14c04:	89 ed       	ldi	r24, 0xD9	; 217
   14c06:	99 e1       	ldi	r25, 0x19	; 25
   14c08:	1f 92       	push	r1
   14c0a:	9f 93       	push	r25
   14c0c:	8f 93       	push	r24
   14c0e:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
                print_var("ID", (uint32_t) SS80p->CONFIG.ID);
   14c12:	ea 85       	ldd	r30, Y+10	; 0x0a
   14c14:	fb 85       	ldd	r31, Y+11	; 0x0b
   14c16:	23 a1       	ldd	r18, Z+35	; 0x23
   14c18:	34 a1       	ldd	r19, Z+36	; 0x24
   14c1a:	40 e0       	ldi	r20, 0x00	; 0
   14c1c:	50 e0       	ldi	r21, 0x00	; 0
   14c1e:	66 ed       	ldi	r22, 0xD6	; 214
   14c20:	79 e1       	ldi	r23, 0x19	; 25
   14c22:	80 e0       	ldi	r24, 0x00	; 0
   14c24:	cd dd       	rcall	.-1126   	; 0x147c0 <print_var_P>
			printf("  END\n");
   14c26:	8f ec       	ldi	r24, 0xCF	; 207
   14c28:	99 e1       	ldi	r25, 0x19	; 25
   14c2a:	1f 92       	push	r1
   14c2c:	9f 93       	push	r25
   14c2e:	8f 93       	push	r24
   14c30:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
            printf("  CONTROLLER\n");
   14c34:	81 ec       	ldi	r24, 0xC1	; 193
   14c36:	99 e1       	ldi	r25, 0x19	; 25
   14c38:	1f 92       	push	r1
   14c3a:	9f 93       	push	r25
   14c3c:	8f 93       	push	r24
   14c3e:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
                print_var("UNITS_INSTALLED", (uint32_t) SS80p->CONTROLLER.UNITS_INSTALLED);
   14c42:	ea 85       	ldd	r30, Y+10	; 0x0a
   14c44:	fb 85       	ldd	r31, Y+11	; 0x0b
   14c46:	25 a1       	ldd	r18, Z+37	; 0x25
   14c48:	36 a1       	ldd	r19, Z+38	; 0x26
   14c4a:	40 e0       	ldi	r20, 0x00	; 0
   14c4c:	50 e0       	ldi	r21, 0x00	; 0
   14c4e:	61 eb       	ldi	r22, 0xB1	; 177
   14c50:	79 e1       	ldi	r23, 0x19	; 25
   14c52:	80 e0       	ldi	r24, 0x00	; 0
   14c54:	b5 dd       	rcall	.-1174   	; 0x147c0 <print_var_P>
                print_var("TRANSFER_RATE", (uint32_t)  SS80p->CONTROLLER.TRANSFER_RATE);
   14c56:	ea 85       	ldd	r30, Y+10	; 0x0a
   14c58:	fb 85       	ldd	r31, Y+11	; 0x0b
   14c5a:	27 a1       	ldd	r18, Z+39	; 0x27
   14c5c:	30 a5       	ldd	r19, Z+40	; 0x28
   14c5e:	40 e0       	ldi	r20, 0x00	; 0
   14c60:	50 e0       	ldi	r21, 0x00	; 0
   14c62:	63 ea       	ldi	r22, 0xA3	; 163
   14c64:	79 e1       	ldi	r23, 0x19	; 25
   14c66:	80 e0       	ldi	r24, 0x00	; 0
   14c68:	ab dd       	rcall	.-1194   	; 0x147c0 <print_var_P>
                print_var("TYPE", (uint32_t)  SS80p->CONTROLLER.TYPE);
   14c6a:	ea 85       	ldd	r30, Y+10	; 0x0a
   14c6c:	fb 85       	ldd	r31, Y+11	; 0x0b
   14c6e:	21 a5       	ldd	r18, Z+41	; 0x29
   14c70:	30 e0       	ldi	r19, 0x00	; 0
   14c72:	40 e0       	ldi	r20, 0x00	; 0
   14c74:	50 e0       	ldi	r21, 0x00	; 0
   14c76:	6e e9       	ldi	r22, 0x9E	; 158
   14c78:	79 e1       	ldi	r23, 0x19	; 25
   14c7a:	80 e0       	ldi	r24, 0x00	; 0
   14c7c:	a1 dd       	rcall	.-1214   	; 0x147c0 <print_var_P>
			printf("  END\n");
   14c7e:	87 e9       	ldi	r24, 0x97	; 151
   14c80:	99 e1       	ldi	r25, 0x19	; 25
   14c82:	1f 92       	push	r1
   14c84:	9f 93       	push	r25
   14c86:	8f 93       	push	r24
   14c88:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
            printf("  UNIT\n");
   14c8c:	8f e8       	ldi	r24, 0x8F	; 143
   14c8e:	99 e1       	ldi	r25, 0x19	; 25
   14c90:	1f 92       	push	r1
   14c92:	9f 93       	push	r25
   14c94:	8f 93       	push	r24
   14c96:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
                print_var("UNIT_TYPE", (uint32_t)SS80p->UNIT.UNIT_TYPE);
   14c9a:	ea 85       	ldd	r30, Y+10	; 0x0a
   14c9c:	fb 85       	ldd	r31, Y+11	; 0x0b
   14c9e:	22 a5       	ldd	r18, Z+42	; 0x2a
   14ca0:	30 e0       	ldi	r19, 0x00	; 0
   14ca2:	40 e0       	ldi	r20, 0x00	; 0
   14ca4:	50 e0       	ldi	r21, 0x00	; 0
   14ca6:	65 e8       	ldi	r22, 0x85	; 133
   14ca8:	79 e1       	ldi	r23, 0x19	; 25
   14caa:	80 e0       	ldi	r24, 0x00	; 0
   14cac:	89 dd       	rcall	.-1262   	; 0x147c0 <print_var_P>
                print_var("DEVICE_NUMBER", (uint32_t)SS80p->UNIT.DEVICE_NUMBER);
   14cae:	ea 85       	ldd	r30, Y+10	; 0x0a
   14cb0:	fb 85       	ldd	r31, Y+11	; 0x0b
   14cb2:	23 a5       	ldd	r18, Z+43	; 0x2b
   14cb4:	34 a5       	ldd	r19, Z+44	; 0x2c
   14cb6:	45 a5       	ldd	r20, Z+45	; 0x2d
   14cb8:	56 a5       	ldd	r21, Z+46	; 0x2e
   14cba:	67 e7       	ldi	r22, 0x77	; 119
   14cbc:	79 e1       	ldi	r23, 0x19	; 25
   14cbe:	80 e0       	ldi	r24, 0x00	; 0
                print_var("BYTES_PER_BLOCK", (uint32_t)SS80p->UNIT.BYTES_PER_BLOCK);
   14cc0:	7f dd       	rcall	.-1282   	; 0x147c0 <print_var_P>
   14cc2:	ea 85       	ldd	r30, Y+10	; 0x0a
   14cc4:	fb 85       	ldd	r31, Y+11	; 0x0b
   14cc6:	27 a5       	ldd	r18, Z+47	; 0x2f
   14cc8:	30 a9       	ldd	r19, Z+48	; 0x30
   14cca:	40 e0       	ldi	r20, 0x00	; 0
   14ccc:	50 e0       	ldi	r21, 0x00	; 0
   14cce:	67 e6       	ldi	r22, 0x67	; 103
   14cd0:	79 e1       	ldi	r23, 0x19	; 25
                print_var("BUFFERED_BLOCKS", (uint32_t)SS80p->UNIT.BUFFERED_BLOCKS);
   14cd2:	80 e0       	ldi	r24, 0x00	; 0
   14cd4:	75 dd       	rcall	.-1302   	; 0x147c0 <print_var_P>
   14cd6:	ea 85       	ldd	r30, Y+10	; 0x0a
   14cd8:	fb 85       	ldd	r31, Y+11	; 0x0b
   14cda:	21 a9       	ldd	r18, Z+49	; 0x31
   14cdc:	30 e0       	ldi	r19, 0x00	; 0
   14cde:	40 e0       	ldi	r20, 0x00	; 0
   14ce0:	50 e0       	ldi	r21, 0x00	; 0
   14ce2:	67 e5       	ldi	r22, 0x57	; 87
   14ce4:	79 e1       	ldi	r23, 0x19	; 25
                print_var("BURST_SIZE", (uint32_t)SS80p->UNIT.BURST_SIZE);
   14ce6:	80 e0       	ldi	r24, 0x00	; 0
   14ce8:	6b dd       	rcall	.-1322   	; 0x147c0 <print_var_P>
   14cea:	ea 85       	ldd	r30, Y+10	; 0x0a
   14cec:	fb 85       	ldd	r31, Y+11	; 0x0b
   14cee:	22 a9       	ldd	r18, Z+50	; 0x32
   14cf0:	30 e0       	ldi	r19, 0x00	; 0
   14cf2:	40 e0       	ldi	r20, 0x00	; 0
   14cf4:	50 e0       	ldi	r21, 0x00	; 0
   14cf6:	6c e4       	ldi	r22, 0x4C	; 76
   14cf8:	79 e1       	ldi	r23, 0x19	; 25
                print_var("BLOCK_TIME", (uint32_t)SS80p->UNIT.BLOCK_TIME);
   14cfa:	80 e0       	ldi	r24, 0x00	; 0
   14cfc:	61 dd       	rcall	.-1342   	; 0x147c0 <print_var_P>
   14cfe:	ea 85       	ldd	r30, Y+10	; 0x0a
   14d00:	fb 85       	ldd	r31, Y+11	; 0x0b
   14d02:	23 a9       	ldd	r18, Z+51	; 0x33
   14d04:	34 a9       	ldd	r19, Z+52	; 0x34
   14d06:	40 e0       	ldi	r20, 0x00	; 0
   14d08:	50 e0       	ldi	r21, 0x00	; 0
   14d0a:	61 e4       	ldi	r22, 0x41	; 65
   14d0c:	79 e1       	ldi	r23, 0x19	; 25
                print_var("CONTINOUS_TRANSFER_RATE", (uint32_t)SS80p->UNIT.CONTINOUS_TRANSFER_RATE);
   14d0e:	80 e0       	ldi	r24, 0x00	; 0
   14d10:	57 dd       	rcall	.-1362   	; 0x147c0 <print_var_P>
   14d12:	ea 85       	ldd	r30, Y+10	; 0x0a
   14d14:	fb 85       	ldd	r31, Y+11	; 0x0b
   14d16:	25 a9       	ldd	r18, Z+53	; 0x35
   14d18:	36 a9       	ldd	r19, Z+54	; 0x36
   14d1a:	40 e0       	ldi	r20, 0x00	; 0
   14d1c:	50 e0       	ldi	r21, 0x00	; 0
   14d1e:	69 e2       	ldi	r22, 0x29	; 41
   14d20:	79 e1       	ldi	r23, 0x19	; 25
                print_var("OPTIMAL_RETRY_TIME", (uint32_t)SS80p->UNIT.OPTIMAL_RETRY_TIME);
   14d22:	80 e0       	ldi	r24, 0x00	; 0
   14d24:	4d dd       	rcall	.-1382   	; 0x147c0 <print_var_P>
   14d26:	ea 85       	ldd	r30, Y+10	; 0x0a
   14d28:	fb 85       	ldd	r31, Y+11	; 0x0b
   14d2a:	27 a9       	ldd	r18, Z+55	; 0x37
   14d2c:	30 ad       	ldd	r19, Z+56	; 0x38
   14d2e:	40 e0       	ldi	r20, 0x00	; 0
   14d30:	50 e0       	ldi	r21, 0x00	; 0
   14d32:	66 e1       	ldi	r22, 0x16	; 22
   14d34:	79 e1       	ldi	r23, 0x19	; 25
                print_var("ACCESS_TIME", (uint32_t)SS80p->UNIT.ACCESS_TIME);
   14d36:	80 e0       	ldi	r24, 0x00	; 0
   14d38:	43 dd       	rcall	.-1402   	; 0x147c0 <print_var_P>
   14d3a:	ea 85       	ldd	r30, Y+10	; 0x0a
   14d3c:	fb 85       	ldd	r31, Y+11	; 0x0b
   14d3e:	21 ad       	ldd	r18, Z+57	; 0x39
   14d40:	32 ad       	ldd	r19, Z+58	; 0x3a
   14d42:	40 e0       	ldi	r20, 0x00	; 0
   14d44:	50 e0       	ldi	r21, 0x00	; 0
   14d46:	6a e0       	ldi	r22, 0x0A	; 10
   14d48:	79 e1       	ldi	r23, 0x19	; 25
                print_var("MAXIMUM_INTERLEAVE", (uint32_t)SS80p->UNIT.MAXIMUM_INTERLEAVE);
   14d4a:	80 e0       	ldi	r24, 0x00	; 0
   14d4c:	39 dd       	rcall	.-1422   	; 0x147c0 <print_var_P>
   14d4e:	ea 85       	ldd	r30, Y+10	; 0x0a
   14d50:	fb 85       	ldd	r31, Y+11	; 0x0b
   14d52:	23 ad       	ldd	r18, Z+59	; 0x3b
   14d54:	30 e0       	ldi	r19, 0x00	; 0
   14d56:	40 e0       	ldi	r20, 0x00	; 0
   14d58:	50 e0       	ldi	r21, 0x00	; 0
   14d5a:	67 ef       	ldi	r22, 0xF7	; 247
   14d5c:	78 e1       	ldi	r23, 0x18	; 24
                print_var("FIXED_VOLUMES", (uint32_t)SS80p->UNIT.FIXED_VOLUMES);
   14d5e:	80 e0       	ldi	r24, 0x00	; 0
   14d60:	2f dd       	rcall	.-1442   	; 0x147c0 <print_var_P>
   14d62:	ea 85       	ldd	r30, Y+10	; 0x0a
   14d64:	fb 85       	ldd	r31, Y+11	; 0x0b
   14d66:	24 ad       	ldd	r18, Z+60	; 0x3c
   14d68:	30 e0       	ldi	r19, 0x00	; 0
   14d6a:	40 e0       	ldi	r20, 0x00	; 0
   14d6c:	50 e0       	ldi	r21, 0x00	; 0
   14d6e:	69 ee       	ldi	r22, 0xE9	; 233
   14d70:	78 e1       	ldi	r23, 0x18	; 24
                print_var("REMOVABLE_VOLUMES", (uint32_t)SS80p->UNIT.REMOVABLE_VOLUMES);
   14d72:	80 e0       	ldi	r24, 0x00	; 0
   14d74:	25 dd       	rcall	.-1462   	; 0x147c0 <print_var_P>
   14d76:	ea 85       	ldd	r30, Y+10	; 0x0a
   14d78:	fb 85       	ldd	r31, Y+11	; 0x0b
   14d7a:	25 ad       	ldd	r18, Z+61	; 0x3d
   14d7c:	30 e0       	ldi	r19, 0x00	; 0
   14d7e:	40 e0       	ldi	r20, 0x00	; 0
   14d80:	50 e0       	ldi	r21, 0x00	; 0
   14d82:	67 ed       	ldi	r22, 0xD7	; 215
   14d84:	78 e1       	ldi	r23, 0x18	; 24
   14d86:	80 e0       	ldi	r24, 0x00	; 0
			printf("  END\n");
   14d88:	1b dd       	rcall	.-1482   	; 0x147c0 <print_var_P>
   14d8a:	80 ed       	ldi	r24, 0xD0	; 208
   14d8c:	98 e1       	ldi	r25, 0x18	; 24
   14d8e:	1f 92       	push	r1
   14d90:	9f 93       	push	r25
   14d92:	8f 93       	push	r24
   14d94:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
            printf("  VOLUME\n");
   14d98:	0f b6       	in	r0, 0x3f	; 63
   14d9a:	f8 94       	cli
   14d9c:	de bf       	out	0x3e, r29	; 62
   14d9e:	0f be       	out	0x3f, r0	; 63
   14da0:	cd bf       	out	0x3d, r28	; 61
   14da2:	86 ec       	ldi	r24, 0xC6	; 198
   14da4:	98 e1       	ldi	r25, 0x18	; 24
   14da6:	1f 92       	push	r1
   14da8:	9f 93       	push	r25
   14daa:	8f 93       	push	r24
                print_var("MAX_CYLINDER", (uint32_t)SS80p->VOLUME.MAX_CYLINDER);
   14dac:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   14db0:	ea 85       	ldd	r30, Y+10	; 0x0a
   14db2:	fb 85       	ldd	r31, Y+11	; 0x0b
   14db4:	fe 96       	adiw	r30, 0x3e	; 62
   14db6:	20 81       	ld	r18, Z
   14db8:	31 81       	ldd	r19, Z+1	; 0x01
   14dba:	42 81       	ldd	r20, Z+2	; 0x02
   14dbc:	53 81       	ldd	r21, Z+3	; 0x03
   14dbe:	69 eb       	ldi	r22, 0xB9	; 185
   14dc0:	78 e1       	ldi	r23, 0x18	; 24
                print_var("MAX_HEAD", (uint32_t)SS80p->VOLUME.MAX_HEAD);
   14dc2:	80 e0       	ldi	r24, 0x00	; 0
   14dc4:	fd dc       	rcall	.-1542   	; 0x147c0 <print_var_P>
   14dc6:	ea 85       	ldd	r30, Y+10	; 0x0a
   14dc8:	fb 85       	ldd	r31, Y+11	; 0x0b
   14dca:	ee 5b       	subi	r30, 0xBE	; 190
   14dcc:	ff 4f       	sbci	r31, 0xFF	; 255
   14dce:	20 81       	ld	r18, Z
   14dd0:	30 e0       	ldi	r19, 0x00	; 0
   14dd2:	40 e0       	ldi	r20, 0x00	; 0
   14dd4:	50 e0       	ldi	r21, 0x00	; 0
   14dd6:	60 eb       	ldi	r22, 0xB0	; 176
   14dd8:	78 e1       	ldi	r23, 0x18	; 24
                print_var("MAX_SECTOR", (uint32_t)SS80p->VOLUME.MAX_SECTOR);
   14dda:	80 e0       	ldi	r24, 0x00	; 0
   14ddc:	f1 dc       	rcall	.-1566   	; 0x147c0 <print_var_P>
   14dde:	ea 85       	ldd	r30, Y+10	; 0x0a
   14de0:	fb 85       	ldd	r31, Y+11	; 0x0b
   14de2:	ed 5b       	subi	r30, 0xBD	; 189
   14de4:	ff 4f       	sbci	r31, 0xFF	; 255
   14de6:	20 81       	ld	r18, Z
   14de8:	31 81       	ldd	r19, Z+1	; 0x01
   14dea:	40 e0       	ldi	r20, 0x00	; 0
   14dec:	50 e0       	ldi	r21, 0x00	; 0
   14dee:	65 ea       	ldi	r22, 0xA5	; 165
   14df0:	78 e1       	ldi	r23, 0x18	; 24
                print_var("MAX_BLOCK_NUMBER", (uint32_t)SS80p->VOLUME.MAX_BLOCK_NUMBER);
   14df2:	80 e0       	ldi	r24, 0x00	; 0
   14df4:	e5 dc       	rcall	.-1590   	; 0x147c0 <print_var_P>
   14df6:	aa 84       	ldd	r10, Y+10	; 0x0a
   14df8:	bb 84       	ldd	r11, Y+11	; 0x0b
   14dfa:	35 e4       	ldi	r19, 0x45	; 69
   14dfc:	a3 0e       	add	r10, r19
   14dfe:	b1 1c       	adc	r11, r1
   14e00:	f5 01       	movw	r30, r10
   14e02:	20 81       	ld	r18, Z
   14e04:	31 81       	ldd	r19, Z+1	; 0x01
   14e06:	42 81       	ldd	r20, Z+2	; 0x02
   14e08:	53 81       	ldd	r21, Z+3	; 0x03
   14e0a:	64 e9       	ldi	r22, 0x94	; 148
   14e0c:	78 e1       	ldi	r23, 0x18	; 24
                print_var("INTERLEAVE", (uint32_t)SS80p->VOLUME.INTERLEAVE);
   14e0e:	80 e0       	ldi	r24, 0x00	; 0
   14e10:	d7 dc       	rcall	.-1618   	; 0x147c0 <print_var_P>
   14e12:	2a 85       	ldd	r18, Y+10	; 0x0a
   14e14:	3b 85       	ldd	r19, Y+11	; 0x0b
   14e16:	27 5b       	subi	r18, 0xB7	; 183
   14e18:	3f 4f       	sbci	r19, 0xFF	; 255
   14e1a:	f9 01       	movw	r30, r18
   14e1c:	20 81       	ld	r18, Z
   14e1e:	30 e0       	ldi	r19, 0x00	; 0
   14e20:	40 e0       	ldi	r20, 0x00	; 0
   14e22:	50 e0       	ldi	r21, 0x00	; 0
   14e24:	69 e8       	ldi	r22, 0x89	; 137
   14e26:	78 e1       	ldi	r23, 0x18	; 24
                print_var("# BLOCKS", (uint32_t)SS80p->VOLUME.MAX_BLOCK_NUMBER+1);
   14e28:	80 e0       	ldi	r24, 0x00	; 0
   14e2a:	ca dc       	rcall	.-1644   	; 0x147c0 <print_var_P>
   14e2c:	f5 01       	movw	r30, r10
   14e2e:	80 81       	ld	r24, Z
   14e30:	91 81       	ldd	r25, Z+1	; 0x01
   14e32:	a2 81       	ldd	r26, Z+2	; 0x02
   14e34:	b3 81       	ldd	r27, Z+3	; 0x03
   14e36:	9c 01       	movw	r18, r24
   14e38:	ad 01       	movw	r20, r26
   14e3a:	2f 5f       	subi	r18, 0xFF	; 255
   14e3c:	3f 4f       	sbci	r19, 0xFF	; 255
   14e3e:	4f 4f       	sbci	r20, 0xFF	; 255
   14e40:	5f 4f       	sbci	r21, 0xFF	; 255
   14e42:	60 e8       	ldi	r22, 0x80	; 128
   14e44:	78 e1       	ldi	r23, 0x18	; 24
   14e46:	80 e0       	ldi	r24, 0x00	; 0
			printf("  END\n");
   14e48:	bb dc       	rcall	.-1674   	; 0x147c0 <print_var_P>
   14e4a:	89 e7       	ldi	r24, 0x79	; 121
   14e4c:	98 e1       	ldi	r25, 0x18	; 24
   14e4e:	1f 92       	push	r1
   14e50:	9f 93       	push	r25
   14e52:	8f 93       	push	r24
   14e54:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   14e58:	0f 90       	pop	r0
   14e5a:	0f 90       	pop	r0
   14e5c:	0f 90       	pop	r0
   14e5e:	0f 90       	pop	r0
   14e60:	0f 90       	pop	r0
        } // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   14e62:	0f 90       	pop	r0
   14e64:	f8 01       	movw	r30, r16
   14e66:	80 81       	ld	r24, Z
   14e68:	81 30       	cpi	r24, 0x01	; 1
   14e6a:	09 f0       	breq	.+2      	; 0x14e6e <display_Config+0x388>
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
   14e6c:	b5 c0       	rjmp	.+362    	; 0x14fd8 <display_Config+0x4f2>
   14e6e:	27 a1       	ldd	r18, Z+39	; 0x27
   14e70:	30 a5       	ldd	r19, Z+40	; 0x28
   14e72:	3b 87       	std	Y+11, r19	; 0x0b

            printf("AMIGO %s\n", Devices[i].model);
   14e74:	2a 87       	std	Y+10, r18	; 0x0a
   14e76:	c8 01       	movw	r24, r16
   14e78:	07 96       	adiw	r24, 0x07	; 7
   14e7a:	9f 93       	push	r25
   14e7c:	8f 93       	push	r24
   14e7e:	ef e6       	ldi	r30, 0x6F	; 111
   14e80:	f8 e1       	ldi	r31, 0x18	; 24
   14e82:	cf 01       	movw	r24, r30
   14e84:	1f 92       	push	r1
   14e86:	9f 93       	push	r25
   14e88:	ef 93       	push	r30
   14e8a:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
			printf("  # HP85 BASIC ADDRESS :D7%d0\n", (int) AMIGOp->HEADER.ADDRESS);
   14e8e:	ea 85       	ldd	r30, Y+10	; 0x0a
   14e90:	fb 85       	ldd	r31, Y+11	; 0x0b
   14e92:	80 81       	ld	r24, Z
   14e94:	1f 92       	push	r1
   14e96:	8f 93       	push	r24
   14e98:	80 e5       	ldi	r24, 0x50	; 80
   14e9a:	98 e1       	ldi	r25, 0x18	; 24
   14e9c:	1f 92       	push	r1
   14e9e:	9f 93       	push	r25
   14ea0:	8f 93       	push	r24
            printf("  HEADER\n");
   14ea2:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   14ea6:	86 e4       	ldi	r24, 0x46	; 70
   14ea8:	98 e1       	ldi	r25, 0x18	; 24
   14eaa:	1f 92       	push	r1
   14eac:	9f 93       	push	r25
                print_var("ADDRESS", (uint32_t) AMIGOp->HEADER.ADDRESS);
   14eae:	8f 93       	push	r24
   14eb0:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   14eb4:	ea 85       	ldd	r30, Y+10	; 0x0a
   14eb6:	fb 85       	ldd	r31, Y+11	; 0x0b
   14eb8:	20 81       	ld	r18, Z
   14eba:	30 e0       	ldi	r19, 0x00	; 0
   14ebc:	40 e0       	ldi	r20, 0x00	; 0
   14ebe:	50 e0       	ldi	r21, 0x00	; 0
   14ec0:	6e e3       	ldi	r22, 0x3E	; 62
                print_var("PPR", (uint32_t) AMIGOp->HEADER.PPR);
   14ec2:	78 e1       	ldi	r23, 0x18	; 24
   14ec4:	80 e0       	ldi	r24, 0x00	; 0
   14ec6:	7c dc       	rcall	.-1800   	; 0x147c0 <print_var_P>
   14ec8:	ea 85       	ldd	r30, Y+10	; 0x0a
   14eca:	fb 85       	ldd	r31, Y+11	; 0x0b
   14ecc:	21 81       	ldd	r18, Z+1	; 0x01
   14ece:	30 e0       	ldi	r19, 0x00	; 0
   14ed0:	40 e0       	ldi	r20, 0x00	; 0
   14ed2:	50 e0       	ldi	r21, 0x00	; 0
   14ed4:	6a e3       	ldi	r22, 0x3A	; 58
   14ed6:	78 e1       	ldi	r23, 0x18	; 24
                print_str("FILE", AMIGOp->HEADER.NAME);
   14ed8:	80 e0       	ldi	r24, 0x00	; 0
   14eda:	72 dc       	rcall	.-1820   	; 0x147c0 <print_var_P>
   14edc:	4a 85       	ldd	r20, Y+10	; 0x0a
   14ede:	5b 85       	ldd	r21, Y+11	; 0x0b
   14ee0:	4e 5f       	subi	r20, 0xFE	; 254
   14ee2:	5f 4f       	sbci	r21, 0xFF	; 255
   14ee4:	65 e3       	ldi	r22, 0x35	; 53
   14ee6:	78 e1       	ldi	r23, 0x18	; 24
			printf("  END\n");
   14ee8:	80 e0       	ldi	r24, 0x00	; 0
   14eea:	bb dc       	rcall	.-1674   	; 0x14862 <print_str_P>
   14eec:	8e e2       	ldi	r24, 0x2E	; 46
   14eee:	98 e1       	ldi	r25, 0x18	; 24
   14ef0:	1f 92       	push	r1
   14ef2:	9f 93       	push	r25
   14ef4:	8f 93       	push	r24
            printf("  CONFIG\n");
   14ef6:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   14efa:	84 e2       	ldi	r24, 0x24	; 36
   14efc:	98 e1       	ldi	r25, 0x18	; 24
   14efe:	1f 92       	push	r1
   14f00:	9f 93       	push	r25
   14f02:	8f 93       	push	r24
                print_var("ID", (uint32_t) AMIGOp->CONFIG.ID);
   14f04:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   14f08:	ea 85       	ldd	r30, Y+10	; 0x0a
   14f0a:	fb 85       	ldd	r31, Y+11	; 0x0b
   14f0c:	23 a1       	ldd	r18, Z+35	; 0x23
   14f0e:	34 a1       	ldd	r19, Z+36	; 0x24
   14f10:	40 e0       	ldi	r20, 0x00	; 0
   14f12:	50 e0       	ldi	r21, 0x00	; 0
   14f14:	61 e2       	ldi	r22, 0x21	; 33
   14f16:	78 e1       	ldi	r23, 0x18	; 24
			printf("  END\n");
   14f18:	80 e0       	ldi	r24, 0x00	; 0
   14f1a:	52 dc       	rcall	.-1884   	; 0x147c0 <print_var_P>
   14f1c:	8a e1       	ldi	r24, 0x1A	; 26
   14f1e:	98 e1       	ldi	r25, 0x18	; 24
   14f20:	1f 92       	push	r1
   14f22:	9f 93       	push	r25
   14f24:	8f 93       	push	r24
            printf("  GEOMETRY\n");
   14f26:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   14f2a:	8e e0       	ldi	r24, 0x0E	; 14
   14f2c:	98 e1       	ldi	r25, 0x18	; 24
   14f2e:	1f 92       	push	r1
   14f30:	9f 93       	push	r25
                print_var("BYTES_PER_SECTOR", (uint32_t) AMIGOp->GEOMETRY.BYTES_PER_SECTOR);
   14f32:	8f 93       	push	r24
   14f34:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   14f38:	ea 85       	ldd	r30, Y+10	; 0x0a
   14f3a:	fb 85       	ldd	r31, Y+11	; 0x0b
   14f3c:	25 a1       	ldd	r18, Z+37	; 0x25
   14f3e:	36 a1       	ldd	r19, Z+38	; 0x26
   14f40:	03 2e       	mov	r0, r19
   14f42:	00 0c       	add	r0, r0
   14f44:	44 0b       	sbc	r20, r20
   14f46:	55 0b       	sbc	r21, r21
   14f48:	6d ef       	ldi	r22, 0xFD	; 253
                print_var("SECTORS_PER_TRACK", (uint32_t) AMIGOp->GEOMETRY.SECTORS_PER_TRACK);
   14f4a:	77 e1       	ldi	r23, 0x17	; 23
   14f4c:	80 e0       	ldi	r24, 0x00	; 0
   14f4e:	38 dc       	rcall	.-1936   	; 0x147c0 <print_var_P>
   14f50:	ea 85       	ldd	r30, Y+10	; 0x0a
   14f52:	fb 85       	ldd	r31, Y+11	; 0x0b
   14f54:	27 a1       	ldd	r18, Z+39	; 0x27
   14f56:	30 a5       	ldd	r19, Z+40	; 0x28
   14f58:	03 2e       	mov	r0, r19
   14f5a:	00 0c       	add	r0, r0
   14f5c:	44 0b       	sbc	r20, r20
   14f5e:	55 0b       	sbc	r21, r21
   14f60:	6b ee       	ldi	r22, 0xEB	; 235
                print_var("HEADS", (uint32_t) AMIGOp->GEOMETRY.HEADS);
   14f62:	77 e1       	ldi	r23, 0x17	; 23
   14f64:	80 e0       	ldi	r24, 0x00	; 0
   14f66:	2c dc       	rcall	.-1960   	; 0x147c0 <print_var_P>
   14f68:	ea 85       	ldd	r30, Y+10	; 0x0a
   14f6a:	fb 85       	ldd	r31, Y+11	; 0x0b
   14f6c:	21 a5       	ldd	r18, Z+41	; 0x29
   14f6e:	32 a5       	ldd	r19, Z+42	; 0x2a
   14f70:	03 2e       	mov	r0, r19
   14f72:	00 0c       	add	r0, r0
   14f74:	44 0b       	sbc	r20, r20
   14f76:	55 0b       	sbc	r21, r21
   14f78:	65 ee       	ldi	r22, 0xE5	; 229
                print_var("CYLINDERS", (uint32_t) AMIGOp->GEOMETRY.CYLINDERS);
   14f7a:	77 e1       	ldi	r23, 0x17	; 23
   14f7c:	80 e0       	ldi	r24, 0x00	; 0
   14f7e:	20 dc       	rcall	.-1984   	; 0x147c0 <print_var_P>
   14f80:	ea 85       	ldd	r30, Y+10	; 0x0a
   14f82:	fb 85       	ldd	r31, Y+11	; 0x0b
   14f84:	23 a5       	ldd	r18, Z+43	; 0x2b
   14f86:	34 a5       	ldd	r19, Z+44	; 0x2c
   14f88:	03 2e       	mov	r0, r19
   14f8a:	00 0c       	add	r0, r0
   14f8c:	44 0b       	sbc	r20, r20
   14f8e:	55 0b       	sbc	r21, r21
   14f90:	6b ed       	ldi	r22, 0xDB	; 219
   14f92:	77 e1       	ldi	r23, 0x17	; 23
                print_var("# BLOCKS", (uint32_t)AMIGOp->GEOMETRY.CYLINDERS * AMIGOp->GEOMETRY.SECTORS_PER_TRACK * AMIGOp->GEOMETRY.HEADS );
   14f94:	80 e0       	ldi	r24, 0x00	; 0
   14f96:	14 dc       	rcall	.-2008   	; 0x147c0 <print_var_P>
   14f98:	ea 85       	ldd	r30, Y+10	; 0x0a
   14f9a:	fb 85       	ldd	r31, Y+11	; 0x0b
   14f9c:	23 a5       	ldd	r18, Z+43	; 0x2b
   14f9e:	34 a5       	ldd	r19, Z+44	; 0x2c
   14fa0:	a7 a1       	ldd	r26, Z+39	; 0x27
   14fa2:	b0 a5       	ldd	r27, Z+40	; 0x28
   14fa4:	0e 94 d8 e7 	call	0x1cfb0	; 0x1cfb0 <__mulhisi3>
   14fa8:	9b 01       	movw	r18, r22
   14faa:	ac 01       	movw	r20, r24
   14fac:	a1 a5       	ldd	r26, Z+41	; 0x29
   14fae:	b2 a5       	ldd	r27, Z+42	; 0x2a
   14fb0:	0e 94 fd e7 	call	0x1cffa	; 0x1cffa <__mulshisi3>
   14fb4:	9b 01       	movw	r18, r22
   14fb6:	ac 01       	movw	r20, r24
   14fb8:	62 ed       	ldi	r22, 0xD2	; 210
   14fba:	77 e1       	ldi	r23, 0x17	; 23
   14fbc:	80 e0       	ldi	r24, 0x00	; 0
			printf("  END\n");
   14fbe:	00 dc       	rcall	.-2048   	; 0x147c0 <print_var_P>
   14fc0:	8b ec       	ldi	r24, 0xCB	; 203
   14fc2:	97 e1       	ldi	r25, 0x17	; 23
   14fc4:	1f 92       	push	r1
   14fc6:	9f 93       	push	r25
   14fc8:	8f 93       	push	r24
   14fca:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   14fce:	0f b6       	in	r0, 0x3f	; 63
   14fd0:	f8 94       	cli
   14fd2:	de bf       	out	0x3e, r29	; 62
        } 
#endif // #ifdef AMIGO

        if(Devices[i].TYPE == PRINTER_TYPE )
   14fd4:	0f be       	out	0x3f, r0	; 63
   14fd6:	cd bf       	out	0x3d, r28	; 61
   14fd8:	f8 01       	movw	r30, r16
   14fda:	80 81       	ld	r24, Z
        {
            PRINTERp= (PRINTERDeviceType *)Devices[i].dev;
   14fdc:	84 30       	cpi	r24, 0x04	; 4
   14fde:	19 f5       	brne	.+70     	; 0x15026 <display_Config+0x540>
   14fe0:	27 a1       	ldd	r18, Z+39	; 0x27
   14fe2:	30 a5       	ldd	r19, Z+40	; 0x28

            printf("PRINTER\n");
   14fe4:	3b 87       	std	Y+11, r19	; 0x0b
   14fe6:	2a 87       	std	Y+10, r18	; 0x0a
   14fe8:	1f 92       	push	r1
   14fea:	38 85       	ldd	r19, Y+8	; 0x08
   14fec:	3f 93       	push	r19
   14fee:	4f 81       	ldd	r20, Y+7	; 0x07
   14ff0:	4f 93       	push	r20
            printf("  CONFIG\n");
   14ff2:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   14ff6:	1f 92       	push	r1
   14ff8:	3f 92       	push	r3
   14ffa:	2f 92       	push	r2
                print_var("ADDRESS", (uint32_t) PRINTERp->HEADER.ADDRESS);
   14ffc:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   15000:	ea 85       	ldd	r30, Y+10	; 0x0a
   15002:	fb 85       	ldd	r31, Y+11	; 0x0b
   15004:	20 81       	ld	r18, Z
   15006:	30 e0       	ldi	r19, 0x00	; 0
   15008:	40 e0       	ldi	r20, 0x00	; 0
   1500a:	50 e0       	ldi	r21, 0x00	; 0
   1500c:	88 2d       	mov	r24, r8
   1500e:	b3 01       	movw	r22, r6
			printf("  END\n");
   15010:	d7 db       	rcall	.-2130   	; 0x147c0 <print_var_P>
   15012:	1f 92       	push	r1
   15014:	df 92       	push	r13
   15016:	cf 92       	push	r12
   15018:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1501c:	0f b6       	in	r0, 0x3f	; 63
   1501e:	f8 94       	cli
   15020:	de bf       	out	0x3e, r29	; 62
   15022:	0f be       	out	0x3f, r0	; 63
        }
		printf("END\n");
   15024:	cd bf       	out	0x3d, r28	; 61
   15026:	1f 92       	push	r1
   15028:	3a 81       	ldd	r19, Y+2	; 0x02
   1502a:	3f 93       	push	r19
   1502c:	49 81       	ldd	r20, Y+1	; 0x01
   1502e:	4f 93       	push	r20
   15030:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
		printf("\n");
   15034:	1f 92       	push	r1
   15036:	8d 81       	ldd	r24, Y+5	; 0x05
   15038:	8f 93       	push	r24
   1503a:	9c 81       	ldd	r25, Y+4	; 0x04
   1503c:	9f 93       	push	r25
   1503e:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   15042:	0f 90       	pop	r0
   15044:	0f 90       	pop	r0
   15046:	0f 90       	pop	r0
   15048:	0f 90       	pop	r0
   1504a:	0f 90       	pop	r0
   1504c:	0f 90       	pop	r0
   1504e:	05 5d       	subi	r16, 0xD5	; 213
    ///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    printf("Current Configuration Settings\n");
    for(i=0;i<MAX_DEVICES;++i)
   15050:	1f 4f       	sbci	r17, 0xFF	; 255
   15052:	e1 e2       	ldi	r30, 0x21	; 33
   15054:	07 30       	cpi	r16, 0x07	; 7
   15056:	1e 07       	cpc	r17, r30
   15058:	09 f0       	breq	.+2      	; 0x1505c <display_Config+0x576>
			printf("  END\n");
        }
		printf("END\n");
		printf("\n");
    }
    printf("END\n");
   1505a:	87 cd       	rjmp	.-1266   	; 0x14b6a <display_Config+0x84>
   1505c:	8d e9       	ldi	r24, 0x9D	; 157
   1505e:	97 e1       	ldi	r25, 0x17	; 23
   15060:	1f 92       	push	r1
   15062:	9f 93       	push	r25
   15064:	8f 93       	push	r24
   15066:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    printf("\n");
   1506a:	8b e9       	ldi	r24, 0x9B	; 155
   1506c:	97 e1       	ldi	r25, 0x17	; 23
   1506e:	1f 92       	push	r1
   15070:	9f 93       	push	r25
   15072:	8f 93       	push	r24
   15074:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
}
   15078:	0f 90       	pop	r0
   1507a:	0f 90       	pop	r0
   1507c:	0f 90       	pop	r0
   1507e:	0f 90       	pop	r0
   15080:	0f 90       	pop	r0
   15082:	0f 90       	pop	r0
   15084:	2b 96       	adiw	r28, 0x0b	; 11
   15086:	0f b6       	in	r0, 0x3f	; 63
   15088:	f8 94       	cli
   1508a:	de bf       	out	0x3e, r29	; 62
   1508c:	0f be       	out	0x3f, r0	; 63
   1508e:	cd bf       	out	0x3d, r28	; 61
   15090:	df 91       	pop	r29
   15092:	cf 91       	pop	r28
   15094:	1f 91       	pop	r17
   15096:	0f 91       	pop	r16
   15098:	ef 90       	pop	r14
   1509a:	df 90       	pop	r13
   1509c:	cf 90       	pop	r12
   1509e:	bf 90       	pop	r11
   150a0:	af 90       	pop	r10
   150a2:	8f 90       	pop	r8
   150a4:	7f 90       	pop	r7
   150a6:	6f 90       	pop	r6
   150a8:	4f 90       	pop	r4
   150aa:	3f 90       	pop	r3
   150ac:	2f 90       	pop	r2
   150ae:	08 95       	ret

000150b0 <format_drives>:

/// @brief Format devices that have no image file
/// @return  void
void format_drives()
{
   150b0:	2f 92       	push	r2
   150b2:	3f 92       	push	r3
   150b4:	4f 92       	push	r4
   150b6:	5f 92       	push	r5
   150b8:	6f 92       	push	r6
   150ba:	7f 92       	push	r7
   150bc:	8f 92       	push	r8
   150be:	af 92       	push	r10
   150c0:	bf 92       	push	r11
   150c2:	cf 92       	push	r12
   150c4:	df 92       	push	r13
   150c6:	ef 92       	push	r14
   150c8:	ff 92       	push	r15
   150ca:	0f 93       	push	r16
   150cc:	1f 93       	push	r17
   150ce:	cf 93       	push	r28
   150d0:	df 93       	push	r29
   150d2:	cd b7       	in	r28, 0x3d	; 61
   150d4:	de b7       	in	r29, 0x3e	; 62
   150d6:	cd 55       	subi	r28, 0x5D	; 93
   150d8:	d1 09       	sbc	r29, r1
   150da:	0f b6       	in	r0, 0x3f	; 63
   150dc:	f8 94       	cli
   150de:	de bf       	out	0x3e, r29	; 62
   150e0:	0f be       	out	0x3f, r0	; 63
   150e2:	cd bf       	out	0x3d, r28	; 61
   150e4:	83 e0       	ldi	r24, 0x03	; 3
   150e6:	a8 2e       	mov	r10, r24
   150e8:	8f e1       	ldi	r24, 0x1F	; 31
   150ea:	b8 2e       	mov	r11, r24
    int i;
    struct stat st;
    long sectors;
    char label[32];
    int ss80 = 1;
    int amigo = 1;
   150ec:	21 e0       	ldi	r18, 0x01	; 1
   150ee:	30 e0       	ldi	r19, 0x00	; 0
   150f0:	65 96       	adiw	r28, 0x15	; 21
   150f2:	3f af       	std	Y+63, r19	; 0x3f
   150f4:	2e af       	std	Y+62, r18	; 0x3e
   150f6:	65 97       	sbiw	r28, 0x15	; 21
{
    int i;
    struct stat st;
    long sectors;
    char label[32];
    int ss80 = 1;
   150f8:	81 e0       	ldi	r24, 0x01	; 1
   150fa:	90 e0       	ldi	r25, 0x00	; 0
   150fc:	63 96       	adiw	r28, 0x13	; 19
   150fe:	9f af       	std	Y+63, r25	; 0x3f
   15100:	8e af       	std	Y+62, r24	; 0x3e
   15102:	63 97       	sbiw	r28, 0x13	; 19
                }
                sectors = AMIGOp->GEOMETRY.SECTORS_PER_TRACK
                 * AMIGOp->GEOMETRY.HEADS
                 * AMIGOp->GEOMETRY.CYLINDERS;

                sprintf(label,"AMIGO%d", amigo);
   15104:	87 e4       	ldi	r24, 0x47	; 71
   15106:	97 e1       	ldi	r25, 0x17	; 23
   15108:	9c 01       	movw	r18, r24
   1510a:	40 e0       	ldi	r20, 0x00	; 0
   1510c:	68 96       	adiw	r28, 0x18	; 24
   1510e:	2d af       	std	Y+61, r18	; 0x3d
   15110:	3e af       	std	Y+62, r19	; 0x3e
   15112:	4f af       	std	Y+63, r20	; 0x3f
   15114:	68 97       	sbiw	r28, 0x18	; 24
   15116:	2e 01       	movw	r4, r28
   15118:	31 e3       	ldi	r19, 0x31	; 49
   1511a:	43 0e       	add	r4, r19
   1511c:	51 1c       	adc	r5, r1
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
            if(stat(AMIGOp->HEADER.NAME, &st) == -1) 
            {
                if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
                {
                    printf("Can not use non 256 byte sectors\n");
   1511e:	8f e4       	ldi	r24, 0x4F	; 79
   15120:	97 e1       	ldi	r25, 0x17	; 23
   15122:	9c 01       	movw	r18, r24
   15124:	40 e0       	ldi	r20, 0x00	; 0
   15126:	6b 96       	adiw	r28, 0x1b	; 27
   15128:	2d af       	std	Y+61, r18	; 0x3d
   1512a:	3e af       	std	Y+62, r19	; 0x3e
   1512c:	4f af       	std	Y+63, r20	; 0x3f
   1512e:	6b 97       	sbiw	r28, 0x1b	; 27
                }
                //SS80p->VOLUME.MAX_CYLINDER;
                //SS80p->VOLUME.MAX_HEAD;
                //SS80p->VOLUME.MAX_SECTOR;
                sectors = SS80p->VOLUME.MAX_BLOCK_NUMBER;
                sprintf(label,"SS80-%d", ss80);
   15130:	81 e7       	ldi	r24, 0x71	; 113
   15132:	97 e1       	ldi	r25, 0x17	; 23
   15134:	3c 01       	movw	r6, r24

            if(stat(SS80p->HEADER.NAME, &st) == -1) 
            {
                if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
                {
                    printf("Can not use non 256 byte sectors\n");
   15136:	89 e7       	ldi	r24, 0x79	; 121
   15138:	97 e1       	ldi	r25, 0x17	; 23
   1513a:	9c 01       	movw	r18, r24
   1513c:	40 e0       	ldi	r20, 0x00	; 0
   1513e:	6e 96       	adiw	r28, 0x1e	; 30
   15140:	2d af       	std	Y+61, r18	; 0x3d
   15142:	3e af       	std	Y+62, r19	; 0x3e
   15144:	4f af       	std	Y+63, r20	; 0x3f
   15146:	6e 97       	sbiw	r28, 0x1e	; 30
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   15148:	f5 01       	movw	r30, r10
   1514a:	80 81       	ld	r24, Z
   1514c:	88 23       	and	r24, r24
   1514e:	09 f4       	brne	.+2      	; 0x15152 <format_drives+0xa2>
   15150:	bc c0       	rjmp	.+376    	; 0x152ca <format_drives+0x21a>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   15152:	83 30       	cpi	r24, 0x03	; 3
   15154:	09 f0       	breq	.+2      	; 0x15158 <format_drives+0xa8>
   15156:	4c c0       	rjmp	.+152    	; 0x151f0 <format_drives+0x140>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   15158:	07 a1       	ldd	r16, Z+39	; 0x27
   1515a:	10 a5       	ldd	r17, Z+40	; 0x28

            if(stat(SS80p->HEADER.NAME, &st) == -1) 
   1515c:	18 01       	movw	r2, r16
   1515e:	f2 e0       	ldi	r31, 0x02	; 2
   15160:	2f 0e       	add	r2, r31
   15162:	31 1c       	adc	r3, r1
   15164:	be 01       	movw	r22, r28
   15166:	6f 5f       	subi	r22, 0xFF	; 255
   15168:	7f 4f       	sbci	r23, 0xFF	; 255
   1516a:	c1 01       	movw	r24, r2
   1516c:	0e 94 aa 78 	call	0xf154	; 0xf154 <stat>
   15170:	01 96       	adiw	r24, 0x01	; 1
   15172:	a1 f5       	brne	.+104    	; 0x151dc <format_drives+0x12c>
            {
                if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
   15174:	f8 01       	movw	r30, r16
   15176:	87 a5       	ldd	r24, Z+47	; 0x2f
   15178:	90 a9       	ldd	r25, Z+48	; 0x30
   1517a:	81 15       	cp	r24, r1
   1517c:	91 40       	sbci	r25, 0x01	; 1
   1517e:	49 f0       	breq	.+18     	; 0x15192 <format_drives+0xe2>
                {
                    printf("Can not use non 256 byte sectors\n");
   15180:	1f 92       	push	r1
   15182:	6d 96       	adiw	r28, 0x1d	; 29
   15184:	2f ad       	ldd	r18, Y+63	; 0x3f
   15186:	6d 97       	sbiw	r28, 0x1d	; 29
   15188:	2f 93       	push	r18
   1518a:	6c 96       	adiw	r28, 0x1c	; 28
   1518c:	3f ad       	ldd	r19, Y+63	; 0x3f
   1518e:	6c 97       	sbiw	r28, 0x1c	; 28
   15190:	51 c0       	rjmp	.+162    	; 0x15234 <format_drives+0x184>
                    continue;
                }
                //SS80p->VOLUME.MAX_CYLINDER;
                //SS80p->VOLUME.MAX_HEAD;
                //SS80p->VOLUME.MAX_SECTOR;
                sectors = SS80p->VOLUME.MAX_BLOCK_NUMBER;
   15192:	f8 01       	movw	r30, r16
   15194:	eb 5b       	subi	r30, 0xBB	; 187
   15196:	ff 4f       	sbci	r31, 0xFF	; 255
   15198:	c0 80       	ld	r12, Z
   1519a:	d1 80       	ldd	r13, Z+1	; 0x01
   1519c:	e2 80       	ldd	r14, Z+2	; 0x02
   1519e:	f3 80       	ldd	r15, Z+3	; 0x03
                sprintf(label,"SS80-%d", ss80);
   151a0:	63 96       	adiw	r28, 0x13	; 19
   151a2:	4f ad       	ldd	r20, Y+63	; 0x3f
   151a4:	63 97       	sbiw	r28, 0x13	; 19
   151a6:	4f 93       	push	r20
   151a8:	62 96       	adiw	r28, 0x12	; 18
   151aa:	8f ad       	ldd	r24, Y+63	; 0x3f
   151ac:	62 97       	sbiw	r28, 0x12	; 18
   151ae:	8f 93       	push	r24
   151b0:	1f 92       	push	r1
   151b2:	7f 92       	push	r7
   151b4:	6f 92       	push	r6
   151b6:	5f 92       	push	r5
   151b8:	4f 92       	push	r4
   151ba:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <sprintf_P>
#ifdef LIF_SUPPORT
                lif_create_image(SS80p->HEADER.NAME,
   151be:	87 01       	movw	r16, r14
   151c0:	76 01       	movw	r14, r12
   151c2:	20 e8       	ldi	r18, 0x80	; 128
   151c4:	30 e0       	ldi	r19, 0x00	; 0
   151c6:	40 e0       	ldi	r20, 0x00	; 0
   151c8:	50 e0       	ldi	r21, 0x00	; 0
   151ca:	b2 01       	movw	r22, r4
   151cc:	c1 01       	movw	r24, r2
   151ce:	0e 94 96 e2 	call	0x1c52c	; 0x1c52c <lif_create_image>
   151d2:	0f b6       	in	r0, 0x3f	; 63
   151d4:	f8 94       	cli
   151d6:	de bf       	out	0x3e, r29	; 62
   151d8:	0f be       	out	0x3f, r0	; 63
{
#ifdef ESP8266
    hspi_RX((uint8_t *) data,count);
#endif
#ifdef AVR
    SPI0_RX((uint8_t *)data,count);
   151da:	cd bf       	out	0x3d, r28	; 61
   151dc:	63 96       	adiw	r28, 0x13	; 19
#else
                printf("please create a SS80 LIF image with %ld sectors and 128 directory sectors\n", sectors);
#endif

            }
            ss80++;
   151de:	2e ad       	ldd	r18, Y+62	; 0x3e
   151e0:	3f ad       	ldd	r19, Y+63	; 0x3f
   151e2:	63 97       	sbiw	r28, 0x13	; 19
   151e4:	2f 5f       	subi	r18, 0xFF	; 255
   151e6:	3f 4f       	sbci	r19, 0xFF	; 255
   151e8:	63 96       	adiw	r28, 0x13	; 19
   151ea:	3f af       	std	Y+63, r19	; 0x3f
   151ec:	2e af       	std	Y+62, r18	; 0x3e
   151ee:	63 97       	sbiw	r28, 0x13	; 19
        } // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   151f0:	f5 01       	movw	r30, r10
   151f2:	80 81       	ld	r24, Z
   151f4:	81 30       	cpi	r24, 0x01	; 1
   151f6:	09 f0       	breq	.+2      	; 0x151fa <format_drives+0x14a>
   151f8:	68 c0       	rjmp	.+208    	; 0x152ca <format_drives+0x21a>
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
   151fa:	07 a1       	ldd	r16, Z+39	; 0x27
   151fc:	10 a5       	ldd	r17, Z+40	; 0x28
            if(stat(AMIGOp->HEADER.NAME, &st) == -1) 
   151fe:	68 01       	movw	r12, r16
   15200:	f2 e0       	ldi	r31, 0x02	; 2
   15202:	cf 0e       	add	r12, r31
   15204:	d1 1c       	adc	r13, r1
   15206:	be 01       	movw	r22, r28
   15208:	6f 5f       	subi	r22, 0xFF	; 255
   1520a:	7f 4f       	sbci	r23, 0xFF	; 255
   1520c:	c6 01       	movw	r24, r12
   1520e:	0e 94 aa 78 	call	0xf154	; 0xf154 <stat>
   15212:	01 96       	adiw	r24, 0x01	; 1
   15214:	09 f0       	breq	.+2      	; 0x15218 <format_drives+0x168>
   15216:	50 c0       	rjmp	.+160    	; 0x152b8 <format_drives+0x208>
            {
                if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
   15218:	f8 01       	movw	r30, r16
   1521a:	85 a1       	ldd	r24, Z+37	; 0x25
   1521c:	96 a1       	ldd	r25, Z+38	; 0x26
   1521e:	81 15       	cp	r24, r1
   15220:	91 40       	sbci	r25, 0x01	; 1
   15222:	79 f0       	breq	.+30     	; 0x15242 <format_drives+0x192>
                {
                    printf("Can not use non 256 byte sectors\n");
   15224:	1f 92       	push	r1
   15226:	6a 96       	adiw	r28, 0x1a	; 26
   15228:	2f ad       	ldd	r18, Y+63	; 0x3f
   1522a:	6a 97       	sbiw	r28, 0x1a	; 26
   1522c:	2f 93       	push	r18
   1522e:	69 96       	adiw	r28, 0x19	; 25
   15230:	3f ad       	ldd	r19, Y+63	; 0x3f
   15232:	69 97       	sbiw	r28, 0x19	; 25
   15234:	3f 93       	push	r19
   15236:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
                    continue;
   1523a:	0f 90       	pop	r0
   1523c:	0f 90       	pop	r0
   1523e:	0f 90       	pop	r0
   15240:	44 c0       	rjmp	.+136    	; 0x152ca <format_drives+0x21a>
                }
                sectors = AMIGOp->GEOMETRY.SECTORS_PER_TRACK
                 * AMIGOp->GEOMETRY.HEADS
                 * AMIGOp->GEOMETRY.CYLINDERS;
   15242:	f8 01       	movw	r30, r16
   15244:	47 a1       	ldd	r20, Z+39	; 0x27
   15246:	50 a5       	ldd	r21, Z+40	; 0x28
   15248:	81 a5       	ldd	r24, Z+41	; 0x29
   1524a:	92 a5       	ldd	r25, Z+42	; 0x2a
   1524c:	48 9f       	mul	r20, r24
   1524e:	90 01       	movw	r18, r0
   15250:	49 9f       	mul	r20, r25
   15252:	30 0d       	add	r19, r0
   15254:	58 9f       	mul	r21, r24
   15256:	30 0d       	add	r19, r0
   15258:	11 24       	eor	r1, r1
   1525a:	83 a5       	ldd	r24, Z+43	; 0x2b
   1525c:	94 a5       	ldd	r25, Z+44	; 0x2c
   1525e:	28 9f       	mul	r18, r24
   15260:	70 01       	movw	r14, r0
   15262:	29 9f       	mul	r18, r25
   15264:	f0 0c       	add	r15, r0
   15266:	38 9f       	mul	r19, r24
   15268:	f0 0c       	add	r15, r0
   1526a:	11 24       	eor	r1, r1

                sprintf(label,"AMIGO%d", amigo);
   1526c:	65 96       	adiw	r28, 0x15	; 21
   1526e:	ff ad       	ldd	r31, Y+63	; 0x3f
   15270:	65 97       	sbiw	r28, 0x15	; 21
   15272:	ff 93       	push	r31
   15274:	64 96       	adiw	r28, 0x14	; 20
   15276:	2f ad       	ldd	r18, Y+63	; 0x3f
   15278:	64 97       	sbiw	r28, 0x14	; 20
   1527a:	2f 93       	push	r18
   1527c:	1f 92       	push	r1
   1527e:	67 96       	adiw	r28, 0x17	; 23
   15280:	3f ad       	ldd	r19, Y+63	; 0x3f
   15282:	67 97       	sbiw	r28, 0x17	; 23
   15284:	3f 93       	push	r19
   15286:	66 96       	adiw	r28, 0x16	; 22
   15288:	4f ad       	ldd	r20, Y+63	; 0x3f
   1528a:	66 97       	sbiw	r28, 0x16	; 22
   1528c:	4f 93       	push	r20
   1528e:	5f 92       	push	r5
   15290:	4f 92       	push	r4
   15292:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <sprintf_P>
#ifdef LIF_SUPPORT
                lif_create_image(AMIGOp->HEADER.NAME,
   15296:	0f 2c       	mov	r0, r15
   15298:	00 0c       	add	r0, r0
   1529a:	00 0b       	sbc	r16, r16
   1529c:	11 0b       	sbc	r17, r17
   1529e:	2f e0       	ldi	r18, 0x0F	; 15
   152a0:	30 e0       	ldi	r19, 0x00	; 0
   152a2:	40 e0       	ldi	r20, 0x00	; 0
   152a4:	50 e0       	ldi	r21, 0x00	; 0
   152a6:	b2 01       	movw	r22, r4
   152a8:	c6 01       	movw	r24, r12
   152aa:	0e 94 96 e2 	call	0x1c52c	; 0x1c52c <lif_create_image>
   152ae:	0f b6       	in	r0, 0x3f	; 63
   152b0:	f8 94       	cli
   152b2:	de bf       	out	0x3e, r29	; 62
   152b4:	0f be       	out	0x3f, r0	; 63
   152b6:	cd bf       	out	0x3d, r28	; 61
                    sectors);
#else
                printf("please create a AMIGO LIF image with %ld sectors and 15 directory sectors\n", sectors);
#endif
            }
            amigo++;
   152b8:	65 96       	adiw	r28, 0x15	; 21
   152ba:	ee ad       	ldd	r30, Y+62	; 0x3e
   152bc:	ff ad       	ldd	r31, Y+63	; 0x3f
   152be:	65 97       	sbiw	r28, 0x15	; 21
   152c0:	31 96       	adiw	r30, 0x01	; 1
   152c2:	65 96       	adiw	r28, 0x15	; 21
   152c4:	ff af       	std	Y+63, r31	; 0x3f
   152c6:	ee af       	std	Y+62, r30	; 0x3e
   152c8:	65 97       	sbiw	r28, 0x15	; 21
   152ca:	fb e2       	ldi	r31, 0x2B	; 43
   152cc:	af 0e       	add	r10, r31
   152ce:	b1 1c       	adc	r11, r1
#ifdef AMIGO
    ///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
   152d0:	27 e0       	ldi	r18, 0x07	; 7
   152d2:	31 e2       	ldi	r19, 0x21	; 33
   152d4:	2a 15       	cp	r18, r10
   152d6:	3b 05       	cpc	r19, r11
   152d8:	09 f0       	breq	.+2      	; 0x152dc <format_drives+0x22c>
   152da:	36 cf       	rjmp	.-404    	; 0x15148 <format_drives+0x98>
            }
            amigo++;
        } 
#endif // #ifdef AMIGO
    }
    printf("\n");
   152dc:	85 e4       	ldi	r24, 0x45	; 69
   152de:	97 e1       	ldi	r25, 0x17	; 23
   152e0:	1f 92       	push	r1
   152e2:	9f 93       	push	r25
   152e4:	8f 93       	push	r24
   152e6:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
}
   152ea:	0f 90       	pop	r0
   152ec:	0f 90       	pop	r0
   152ee:	0f 90       	pop	r0
   152f0:	c3 5a       	subi	r28, 0xA3	; 163
   152f2:	df 4f       	sbci	r29, 0xFF	; 255
   152f4:	0f b6       	in	r0, 0x3f	; 63
   152f6:	f8 94       	cli
   152f8:	de bf       	out	0x3e, r29	; 62
   152fa:	0f be       	out	0x3f, r0	; 63
   152fc:	cd bf       	out	0x3d, r28	; 61
   152fe:	df 91       	pop	r29
   15300:	cf 91       	pop	r28
   15302:	1f 91       	pop	r17
   15304:	0f 91       	pop	r16
   15306:	ff 90       	pop	r15
   15308:	ef 90       	pop	r14
   1530a:	df 90       	pop	r13
   1530c:	cf 90       	pop	r12
   1530e:	bf 90       	pop	r11
   15310:	af 90       	pop	r10
   15312:	8f 90       	pop	r8
   15314:	7f 90       	pop	r7
   15316:	6f 90       	pop	r6
   15318:	5f 90       	pop	r5
   1531a:	4f 90       	pop	r4
   1531c:	3f 90       	pop	r3
   1531e:	2f 90       	pop	r2
   15320:	08 95       	ret

00015322 <SS80ControllerPack>:
   15322:	0f 93       	push	r16
   15324:	1f 93       	push	r17
   15326:	25 e0       	ldi	r18, 0x05	; 5
   15328:	30 e0       	ldi	r19, 0x00	; 0
   1532a:	fc 01       	movw	r30, r24
   1532c:	31 83       	std	Z+1, r19	; 0x01
   1532e:	20 83       	st	Z, r18
   15330:	e0 91 7e 19 	lds	r30, 0x197E	; 0x80197e <SS80p>
   15334:	f0 91 7f 19 	lds	r31, 0x197F	; 0x80197f <SS80p+0x1>
   15338:	05 a1       	ldd	r16, Z+37	; 0x25
   1533a:	16 a1       	ldd	r17, Z+38	; 0x26
   1533c:	20 e0       	ldi	r18, 0x00	; 0
   1533e:	30 e0       	ldi	r19, 0x00	; 0
   15340:	42 e0       	ldi	r20, 0x02	; 2
   15342:	50 e0       	ldi	r21, 0x00	; 0
   15344:	60 e0       	ldi	r22, 0x00	; 0
   15346:	70 e0       	ldi	r23, 0x00	; 0
   15348:	8e ea       	ldi	r24, 0xAE	; 174
   1534a:	99 e1       	ldi	r25, 0x19	; 25
   1534c:	0e 94 30 93 	call	0x12660	; 0x12660 <V2B_MSB>
   15350:	e0 91 7e 19 	lds	r30, 0x197E	; 0x80197e <SS80p>
   15354:	f0 91 7f 19 	lds	r31, 0x197F	; 0x80197f <SS80p+0x1>
   15358:	07 a1       	ldd	r16, Z+39	; 0x27
   1535a:	10 a5       	ldd	r17, Z+40	; 0x28
   1535c:	20 e0       	ldi	r18, 0x00	; 0
   1535e:	30 e0       	ldi	r19, 0x00	; 0
   15360:	42 e0       	ldi	r20, 0x02	; 2
   15362:	50 e0       	ldi	r21, 0x00	; 0
   15364:	61 e0       	ldi	r22, 0x01	; 1
   15366:	70 e0       	ldi	r23, 0x00	; 0
   15368:	8e ea       	ldi	r24, 0xAE	; 174
   1536a:	99 e1       	ldi	r25, 0x19	; 25
   1536c:	0e 94 30 93 	call	0x12660	; 0x12660 <V2B_MSB>
   15370:	e0 91 7e 19 	lds	r30, 0x197E	; 0x80197e <SS80p>
   15374:	f0 91 7f 19 	lds	r31, 0x197F	; 0x80197f <SS80p+0x1>
   15378:	01 a5       	ldd	r16, Z+41	; 0x29
   1537a:	10 e0       	ldi	r17, 0x00	; 0
   1537c:	20 e0       	ldi	r18, 0x00	; 0
   1537e:	30 e0       	ldi	r19, 0x00	; 0
   15380:	41 e0       	ldi	r20, 0x01	; 1
   15382:	50 e0       	ldi	r21, 0x00	; 0
   15384:	64 e0       	ldi	r22, 0x04	; 4
   15386:	70 e0       	ldi	r23, 0x00	; 0
   15388:	8e ea       	ldi	r24, 0xAE	; 174
   1538a:	99 e1       	ldi	r25, 0x19	; 25
   1538c:	0e 94 30 93 	call	0x12660	; 0x12660 <V2B_MSB>
   15390:	8e ea       	ldi	r24, 0xAE	; 174
   15392:	99 e1       	ldi	r25, 0x19	; 25
   15394:	1f 91       	pop	r17
   15396:	0f 91       	pop	r16
   15398:	08 95       	ret

0001539a <SS80UnitPack>:
   1539a:	0f 93       	push	r16
   1539c:	1f 93       	push	r17
   1539e:	23 e1       	ldi	r18, 0x13	; 19
   153a0:	30 e0       	ldi	r19, 0x00	; 0
   153a2:	fc 01       	movw	r30, r24
   153a4:	31 83       	std	Z+1, r19	; 0x01
   153a6:	20 83       	st	Z, r18
   153a8:	e0 91 7e 19 	lds	r30, 0x197E	; 0x80197e <SS80p>
   153ac:	f0 91 7f 19 	lds	r31, 0x197F	; 0x80197f <SS80p+0x1>
   153b0:	02 a5       	ldd	r16, Z+42	; 0x2a
   153b2:	10 e0       	ldi	r17, 0x00	; 0
   153b4:	20 e0       	ldi	r18, 0x00	; 0
   153b6:	30 e0       	ldi	r19, 0x00	; 0
   153b8:	41 e0       	ldi	r20, 0x01	; 1
   153ba:	50 e0       	ldi	r21, 0x00	; 0
   153bc:	60 e0       	ldi	r22, 0x00	; 0
   153be:	70 e0       	ldi	r23, 0x00	; 0
   153c0:	8b e9       	ldi	r24, 0x9B	; 155
   153c2:	99 e1       	ldi	r25, 0x19	; 25
   153c4:	0e 94 30 93 	call	0x12660	; 0x12660 <V2B_MSB>
   153c8:	e0 91 7e 19 	lds	r30, 0x197E	; 0x80197e <SS80p>
   153cc:	f0 91 7f 19 	lds	r31, 0x197F	; 0x80197f <SS80p+0x1>
   153d0:	03 a5       	ldd	r16, Z+43	; 0x2b
   153d2:	14 a5       	ldd	r17, Z+44	; 0x2c
   153d4:	25 a5       	ldd	r18, Z+45	; 0x2d
   153d6:	36 a5       	ldd	r19, Z+46	; 0x2e
   153d8:	43 e0       	ldi	r20, 0x03	; 3
   153da:	50 e0       	ldi	r21, 0x00	; 0
   153dc:	61 e0       	ldi	r22, 0x01	; 1
   153de:	70 e0       	ldi	r23, 0x00	; 0
   153e0:	8b e9       	ldi	r24, 0x9B	; 155
   153e2:	99 e1       	ldi	r25, 0x19	; 25
   153e4:	0e 94 30 93 	call	0x12660	; 0x12660 <V2B_MSB>
   153e8:	e0 91 7e 19 	lds	r30, 0x197E	; 0x80197e <SS80p>
   153ec:	f0 91 7f 19 	lds	r31, 0x197F	; 0x80197f <SS80p+0x1>
   153f0:	07 a5       	ldd	r16, Z+47	; 0x2f
   153f2:	10 a9       	ldd	r17, Z+48	; 0x30
   153f4:	20 e0       	ldi	r18, 0x00	; 0
   153f6:	30 e0       	ldi	r19, 0x00	; 0
   153f8:	42 e0       	ldi	r20, 0x02	; 2
   153fa:	50 e0       	ldi	r21, 0x00	; 0
   153fc:	64 e0       	ldi	r22, 0x04	; 4
   153fe:	70 e0       	ldi	r23, 0x00	; 0
   15400:	8b e9       	ldi	r24, 0x9B	; 155
   15402:	99 e1       	ldi	r25, 0x19	; 25
   15404:	0e 94 30 93 	call	0x12660	; 0x12660 <V2B_MSB>
   15408:	e0 91 7e 19 	lds	r30, 0x197E	; 0x80197e <SS80p>
   1540c:	f0 91 7f 19 	lds	r31, 0x197F	; 0x80197f <SS80p+0x1>
   15410:	01 a9       	ldd	r16, Z+49	; 0x31
   15412:	10 e0       	ldi	r17, 0x00	; 0
   15414:	20 e0       	ldi	r18, 0x00	; 0
   15416:	30 e0       	ldi	r19, 0x00	; 0
   15418:	41 e0       	ldi	r20, 0x01	; 1
   1541a:	50 e0       	ldi	r21, 0x00	; 0
   1541c:	66 e0       	ldi	r22, 0x06	; 6
   1541e:	70 e0       	ldi	r23, 0x00	; 0
   15420:	8b e9       	ldi	r24, 0x9B	; 155
   15422:	99 e1       	ldi	r25, 0x19	; 25
   15424:	0e 94 30 93 	call	0x12660	; 0x12660 <V2B_MSB>
   15428:	e0 91 7e 19 	lds	r30, 0x197E	; 0x80197e <SS80p>
   1542c:	f0 91 7f 19 	lds	r31, 0x197F	; 0x80197f <SS80p+0x1>
   15430:	02 a9       	ldd	r16, Z+50	; 0x32
   15432:	10 e0       	ldi	r17, 0x00	; 0
   15434:	20 e0       	ldi	r18, 0x00	; 0
   15436:	30 e0       	ldi	r19, 0x00	; 0
   15438:	41 e0       	ldi	r20, 0x01	; 1
   1543a:	50 e0       	ldi	r21, 0x00	; 0
   1543c:	67 e0       	ldi	r22, 0x07	; 7
   1543e:	70 e0       	ldi	r23, 0x00	; 0
   15440:	8b e9       	ldi	r24, 0x9B	; 155
   15442:	99 e1       	ldi	r25, 0x19	; 25
   15444:	0e 94 30 93 	call	0x12660	; 0x12660 <V2B_MSB>
   15448:	e0 91 7e 19 	lds	r30, 0x197E	; 0x80197e <SS80p>
   1544c:	f0 91 7f 19 	lds	r31, 0x197F	; 0x80197f <SS80p+0x1>
   15450:	03 a9       	ldd	r16, Z+51	; 0x33
   15452:	14 a9       	ldd	r17, Z+52	; 0x34
   15454:	20 e0       	ldi	r18, 0x00	; 0
   15456:	30 e0       	ldi	r19, 0x00	; 0
   15458:	42 e0       	ldi	r20, 0x02	; 2
   1545a:	50 e0       	ldi	r21, 0x00	; 0
   1545c:	68 e0       	ldi	r22, 0x08	; 8
   1545e:	70 e0       	ldi	r23, 0x00	; 0
   15460:	8b e9       	ldi	r24, 0x9B	; 155
   15462:	99 e1       	ldi	r25, 0x19	; 25
   15464:	0e 94 30 93 	call	0x12660	; 0x12660 <V2B_MSB>
   15468:	e0 91 7e 19 	lds	r30, 0x197E	; 0x80197e <SS80p>
   1546c:	f0 91 7f 19 	lds	r31, 0x197F	; 0x80197f <SS80p+0x1>
   15470:	05 a9       	ldd	r16, Z+53	; 0x35
   15472:	16 a9       	ldd	r17, Z+54	; 0x36
   15474:	20 e0       	ldi	r18, 0x00	; 0
   15476:	30 e0       	ldi	r19, 0x00	; 0
   15478:	42 e0       	ldi	r20, 0x02	; 2
   1547a:	50 e0       	ldi	r21, 0x00	; 0
   1547c:	6a e0       	ldi	r22, 0x0A	; 10
   1547e:	70 e0       	ldi	r23, 0x00	; 0
   15480:	8b e9       	ldi	r24, 0x9B	; 155
   15482:	99 e1       	ldi	r25, 0x19	; 25
   15484:	0e 94 30 93 	call	0x12660	; 0x12660 <V2B_MSB>
   15488:	e0 91 7e 19 	lds	r30, 0x197E	; 0x80197e <SS80p>
   1548c:	f0 91 7f 19 	lds	r31, 0x197F	; 0x80197f <SS80p+0x1>
   15490:	07 a9       	ldd	r16, Z+55	; 0x37
   15492:	10 ad       	ldd	r17, Z+56	; 0x38
   15494:	20 e0       	ldi	r18, 0x00	; 0
   15496:	30 e0       	ldi	r19, 0x00	; 0
   15498:	42 e0       	ldi	r20, 0x02	; 2
   1549a:	50 e0       	ldi	r21, 0x00	; 0
   1549c:	6c e0       	ldi	r22, 0x0C	; 12
   1549e:	70 e0       	ldi	r23, 0x00	; 0
   154a0:	8b e9       	ldi	r24, 0x9B	; 155
   154a2:	99 e1       	ldi	r25, 0x19	; 25
   154a4:	0e 94 30 93 	call	0x12660	; 0x12660 <V2B_MSB>
   154a8:	e0 91 7e 19 	lds	r30, 0x197E	; 0x80197e <SS80p>
   154ac:	f0 91 7f 19 	lds	r31, 0x197F	; 0x80197f <SS80p+0x1>
   154b0:	01 ad       	ldd	r16, Z+57	; 0x39
   154b2:	12 ad       	ldd	r17, Z+58	; 0x3a
   154b4:	20 e0       	ldi	r18, 0x00	; 0
   154b6:	30 e0       	ldi	r19, 0x00	; 0
   154b8:	42 e0       	ldi	r20, 0x02	; 2
   154ba:	50 e0       	ldi	r21, 0x00	; 0
   154bc:	6e e0       	ldi	r22, 0x0E	; 14
   154be:	70 e0       	ldi	r23, 0x00	; 0
   154c0:	8b e9       	ldi	r24, 0x9B	; 155
   154c2:	99 e1       	ldi	r25, 0x19	; 25
   154c4:	0e 94 30 93 	call	0x12660	; 0x12660 <V2B_MSB>
   154c8:	e0 91 7e 19 	lds	r30, 0x197E	; 0x80197e <SS80p>
   154cc:	f0 91 7f 19 	lds	r31, 0x197F	; 0x80197f <SS80p+0x1>
   154d0:	03 ad       	ldd	r16, Z+59	; 0x3b
   154d2:	10 e0       	ldi	r17, 0x00	; 0
   154d4:	20 e0       	ldi	r18, 0x00	; 0
   154d6:	30 e0       	ldi	r19, 0x00	; 0
   154d8:	41 e0       	ldi	r20, 0x01	; 1
   154da:	50 e0       	ldi	r21, 0x00	; 0
   154dc:	60 e1       	ldi	r22, 0x10	; 16
   154de:	70 e0       	ldi	r23, 0x00	; 0
   154e0:	8b e9       	ldi	r24, 0x9B	; 155
   154e2:	99 e1       	ldi	r25, 0x19	; 25
   154e4:	0e 94 30 93 	call	0x12660	; 0x12660 <V2B_MSB>
   154e8:	e0 91 7e 19 	lds	r30, 0x197E	; 0x80197e <SS80p>
   154ec:	f0 91 7f 19 	lds	r31, 0x197F	; 0x80197f <SS80p+0x1>
   154f0:	04 ad       	ldd	r16, Z+60	; 0x3c
   154f2:	10 e0       	ldi	r17, 0x00	; 0
   154f4:	20 e0       	ldi	r18, 0x00	; 0
   154f6:	30 e0       	ldi	r19, 0x00	; 0
   154f8:	41 e0       	ldi	r20, 0x01	; 1
   154fa:	50 e0       	ldi	r21, 0x00	; 0
   154fc:	61 e1       	ldi	r22, 0x11	; 17
   154fe:	70 e0       	ldi	r23, 0x00	; 0
   15500:	8b e9       	ldi	r24, 0x9B	; 155
   15502:	99 e1       	ldi	r25, 0x19	; 25
   15504:	0e 94 30 93 	call	0x12660	; 0x12660 <V2B_MSB>
   15508:	e0 91 7e 19 	lds	r30, 0x197E	; 0x80197e <SS80p>
   1550c:	f0 91 7f 19 	lds	r31, 0x197F	; 0x80197f <SS80p+0x1>
   15510:	05 ad       	ldd	r16, Z+61	; 0x3d
   15512:	10 e0       	ldi	r17, 0x00	; 0
   15514:	20 e0       	ldi	r18, 0x00	; 0
   15516:	30 e0       	ldi	r19, 0x00	; 0
   15518:	41 e0       	ldi	r20, 0x01	; 1
   1551a:	50 e0       	ldi	r21, 0x00	; 0
   1551c:	62 e1       	ldi	r22, 0x12	; 18
   1551e:	70 e0       	ldi	r23, 0x00	; 0
   15520:	8b e9       	ldi	r24, 0x9B	; 155
   15522:	99 e1       	ldi	r25, 0x19	; 25
   15524:	0e 94 30 93 	call	0x12660	; 0x12660 <V2B_MSB>
   15528:	8b e9       	ldi	r24, 0x9B	; 155
   1552a:	99 e1       	ldi	r25, 0x19	; 25
   1552c:	1f 91       	pop	r17
   1552e:	0f 91       	pop	r16
   15530:	08 95       	ret

00015532 <SS80VolumePack>:
   15532:	0f 93       	push	r16
   15534:	1f 93       	push	r17
   15536:	2d e0       	ldi	r18, 0x0D	; 13
   15538:	30 e0       	ldi	r19, 0x00	; 0
   1553a:	fc 01       	movw	r30, r24
   1553c:	31 83       	std	Z+1, r19	; 0x01
   1553e:	20 83       	st	Z, r18
   15540:	e0 91 7e 19 	lds	r30, 0x197E	; 0x80197e <SS80p>
   15544:	f0 91 7f 19 	lds	r31, 0x197F	; 0x80197f <SS80p+0x1>
   15548:	fe 96       	adiw	r30, 0x3e	; 62
   1554a:	00 81       	ld	r16, Z
   1554c:	11 81       	ldd	r17, Z+1	; 0x01
   1554e:	22 81       	ldd	r18, Z+2	; 0x02
   15550:	33 81       	ldd	r19, Z+3	; 0x03
   15552:	43 e0       	ldi	r20, 0x03	; 3
   15554:	50 e0       	ldi	r21, 0x00	; 0
   15556:	60 e0       	ldi	r22, 0x00	; 0
   15558:	70 e0       	ldi	r23, 0x00	; 0
   1555a:	8e e8       	ldi	r24, 0x8E	; 142
   1555c:	99 e1       	ldi	r25, 0x19	; 25
   1555e:	0e 94 30 93 	call	0x12660	; 0x12660 <V2B_MSB>
   15562:	e0 91 7e 19 	lds	r30, 0x197E	; 0x80197e <SS80p>
   15566:	f0 91 7f 19 	lds	r31, 0x197F	; 0x80197f <SS80p+0x1>
   1556a:	ee 5b       	subi	r30, 0xBE	; 190
   1556c:	ff 4f       	sbci	r31, 0xFF	; 255
   1556e:	00 81       	ld	r16, Z
   15570:	10 e0       	ldi	r17, 0x00	; 0
   15572:	20 e0       	ldi	r18, 0x00	; 0
   15574:	30 e0       	ldi	r19, 0x00	; 0
   15576:	41 e0       	ldi	r20, 0x01	; 1
   15578:	50 e0       	ldi	r21, 0x00	; 0
   1557a:	63 e0       	ldi	r22, 0x03	; 3
   1557c:	70 e0       	ldi	r23, 0x00	; 0
   1557e:	8e e8       	ldi	r24, 0x8E	; 142
   15580:	99 e1       	ldi	r25, 0x19	; 25
   15582:	0e 94 30 93 	call	0x12660	; 0x12660 <V2B_MSB>
   15586:	e0 91 7e 19 	lds	r30, 0x197E	; 0x80197e <SS80p>
   1558a:	f0 91 7f 19 	lds	r31, 0x197F	; 0x80197f <SS80p+0x1>
   1558e:	ed 5b       	subi	r30, 0xBD	; 189
   15590:	ff 4f       	sbci	r31, 0xFF	; 255
   15592:	00 81       	ld	r16, Z
   15594:	11 81       	ldd	r17, Z+1	; 0x01
   15596:	20 e0       	ldi	r18, 0x00	; 0
   15598:	30 e0       	ldi	r19, 0x00	; 0
   1559a:	42 e0       	ldi	r20, 0x02	; 2
   1559c:	50 e0       	ldi	r21, 0x00	; 0
   1559e:	64 e0       	ldi	r22, 0x04	; 4
   155a0:	70 e0       	ldi	r23, 0x00	; 0
   155a2:	8e e8       	ldi	r24, 0x8E	; 142
   155a4:	99 e1       	ldi	r25, 0x19	; 25
   155a6:	0e 94 30 93 	call	0x12660	; 0x12660 <V2B_MSB>
   155aa:	e0 91 7e 19 	lds	r30, 0x197E	; 0x80197e <SS80p>
   155ae:	f0 91 7f 19 	lds	r31, 0x197F	; 0x80197f <SS80p+0x1>
   155b2:	eb 5b       	subi	r30, 0xBB	; 187
   155b4:	ff 4f       	sbci	r31, 0xFF	; 255
   155b6:	00 81       	ld	r16, Z
   155b8:	11 81       	ldd	r17, Z+1	; 0x01
   155ba:	22 81       	ldd	r18, Z+2	; 0x02
   155bc:	33 81       	ldd	r19, Z+3	; 0x03
   155be:	46 e0       	ldi	r20, 0x06	; 6
   155c0:	50 e0       	ldi	r21, 0x00	; 0
   155c2:	66 e0       	ldi	r22, 0x06	; 6
   155c4:	70 e0       	ldi	r23, 0x00	; 0
   155c6:	8e e8       	ldi	r24, 0x8E	; 142
   155c8:	99 e1       	ldi	r25, 0x19	; 25
   155ca:	0e 94 30 93 	call	0x12660	; 0x12660 <V2B_MSB>
   155ce:	e0 91 7e 19 	lds	r30, 0x197E	; 0x80197e <SS80p>
   155d2:	f0 91 7f 19 	lds	r31, 0x197F	; 0x80197f <SS80p+0x1>
   155d6:	e7 5b       	subi	r30, 0xB7	; 183
   155d8:	ff 4f       	sbci	r31, 0xFF	; 255
   155da:	00 81       	ld	r16, Z
   155dc:	10 e0       	ldi	r17, 0x00	; 0
   155de:	20 e0       	ldi	r18, 0x00	; 0
   155e0:	30 e0       	ldi	r19, 0x00	; 0
   155e2:	41 e0       	ldi	r20, 0x01	; 1
   155e4:	50 e0       	ldi	r21, 0x00	; 0
   155e6:	6c e0       	ldi	r22, 0x0C	; 12
   155e8:	70 e0       	ldi	r23, 0x00	; 0
   155ea:	8e e8       	ldi	r24, 0x8E	; 142
   155ec:	99 e1       	ldi	r25, 0x19	; 25
   155ee:	0e 94 30 93 	call	0x12660	; 0x12660 <V2B_MSB>
   155f2:	8e e8       	ldi	r24, 0x8E	; 142
   155f4:	99 e1       	ldi	r25, 0x19	; 25
   155f6:	1f 91       	pop	r17
   155f8:	0f 91       	pop	r16
   155fa:	08 95       	ret

000155fc <SS80_test_extended_status>:
   155fc:	9b 01       	movw	r18, r22
   155fe:	43 e0       	ldi	r20, 0x03	; 3
   15600:	35 95       	asr	r19
   15602:	27 95       	ror	r18
   15604:	4a 95       	dec	r20
   15606:	e1 f7       	brne	.-8      	; 0x15600 <SS80_test_extended_status+0x4>
   15608:	82 0f       	add	r24, r18
   1560a:	93 1f       	adc	r25, r19
   1560c:	67 70       	andi	r22, 0x07	; 7
   1560e:	77 27       	eor	r23, r23
   15610:	20 e8       	ldi	r18, 0x80	; 128
   15612:	30 e0       	ldi	r19, 0x00	; 0
   15614:	02 c0       	rjmp	.+4      	; 0x1561a <SS80_test_extended_status+0x1e>
   15616:	35 95       	asr	r19
   15618:	27 95       	ror	r18
   1561a:	6a 95       	dec	r22
   1561c:	e2 f7       	brpl	.-8      	; 0x15616 <SS80_test_extended_status+0x1a>
   1561e:	fc 01       	movw	r30, r24
   15620:	80 81       	ld	r24, Z
   15622:	28 23       	and	r18, r24
   15624:	81 e0       	ldi	r24, 0x01	; 1
   15626:	90 e0       	ldi	r25, 0x00	; 0
   15628:	11 f4       	brne	.+4      	; 0x1562e <SS80_test_extended_status+0x32>
   1562a:	80 e0       	ldi	r24, 0x00	; 0
   1562c:	90 e0       	ldi	r25, 0x00	; 0
   1562e:	08 95       	ret

00015630 <SS80_display_extended_status>:
   15630:	6f 92       	push	r6
   15632:	7f 92       	push	r7
   15634:	8f 92       	push	r8
   15636:	ef 92       	push	r14
   15638:	ff 92       	push	r15
   1563a:	0f 93       	push	r16
   1563c:	1f 93       	push	r17
   1563e:	cf 93       	push	r28
   15640:	df 93       	push	r29
   15642:	fc 01       	movw	r30, r24
   15644:	ac 01       	movw	r20, r24
   15646:	48 5f       	subi	r20, 0xF8	; 248
   15648:	5f 4f       	sbci	r21, 0xFF	; 255
   1564a:	20 e0       	ldi	r18, 0x00	; 0
   1564c:	30 e0       	ldi	r19, 0x00	; 0
   1564e:	a1 91       	ld	r26, Z+
   15650:	aa 23       	and	r26, r26
   15652:	11 f0       	breq	.+4      	; 0x15658 <SS80_display_extended_status+0x28>
   15654:	21 e0       	ldi	r18, 0x01	; 1
   15656:	30 e0       	ldi	r19, 0x00	; 0
   15658:	e4 17       	cp	r30, r20
   1565a:	f5 07       	cpc	r31, r21
   1565c:	c1 f7       	brne	.-16     	; 0x1564e <SS80_display_extended_status+0x1e>
   1565e:	23 2b       	or	r18, r19
   15660:	a1 f1       	breq	.+104    	; 0x156ca <SS80_display_extended_status+0x9a>
   15662:	8c 01       	movw	r16, r24
   15664:	7f 93       	push	r23
   15666:	6f 93       	push	r22
   15668:	8a e2       	ldi	r24, 0x2A	; 42
   1566a:	97 e2       	ldi	r25, 0x27	; 39
   1566c:	1f 92       	push	r1
   1566e:	9f 93       	push	r25
   15670:	8f 93       	push	r24
   15672:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   15676:	cb ec       	ldi	r28, 0xCB	; 203
   15678:	d1 e0       	ldi	r29, 0x01	; 1
   1567a:	0f 90       	pop	r0
   1567c:	0f 90       	pop	r0
   1567e:	0f 90       	pop	r0
   15680:	0f 90       	pop	r0
   15682:	0f 90       	pop	r0
   15684:	8f e1       	ldi	r24, 0x1F	; 31
   15686:	97 e2       	ldi	r25, 0x27	; 39
   15688:	3c 01       	movw	r6, r24
   1568a:	e8 80       	ld	r14, Y
   1568c:	f9 80       	ldd	r15, Y+1	; 0x01
   1568e:	9f ef       	ldi	r25, 0xFF	; 255
   15690:	e9 16       	cp	r14, r25
   15692:	f9 06       	cpc	r15, r25
   15694:	d1 f0       	breq	.+52     	; 0x156ca <SS80_display_extended_status+0x9a>
   15696:	b7 01       	movw	r22, r14
   15698:	c8 01       	movw	r24, r16
   1569a:	b0 df       	rcall	.-160    	; 0x155fc <SS80_test_extended_status>
   1569c:	89 2b       	or	r24, r25
   1569e:	99 f0       	breq	.+38     	; 0x156c6 <SS80_display_extended_status+0x96>
   156a0:	8b 81       	ldd	r24, Y+3	; 0x03
   156a2:	8f 93       	push	r24
   156a4:	8a 81       	ldd	r24, Y+2	; 0x02
   156a6:	8f 93       	push	r24
   156a8:	ff 92       	push	r15
   156aa:	ef 92       	push	r14
   156ac:	1f 92       	push	r1
   156ae:	7f 92       	push	r7
   156b0:	6f 92       	push	r6
   156b2:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   156b6:	8d b7       	in	r24, 0x3d	; 61
   156b8:	9e b7       	in	r25, 0x3e	; 62
   156ba:	07 96       	adiw	r24, 0x07	; 7
   156bc:	0f b6       	in	r0, 0x3f	; 63
   156be:	f8 94       	cli
   156c0:	9e bf       	out	0x3e, r25	; 62
   156c2:	0f be       	out	0x3f, r0	; 63
   156c4:	8d bf       	out	0x3d, r24	; 61
   156c6:	24 96       	adiw	r28, 0x04	; 4
   156c8:	e0 cf       	rjmp	.-64     	; 0x1568a <SS80_display_extended_status+0x5a>
   156ca:	df 91       	pop	r29
   156cc:	cf 91       	pop	r28
   156ce:	1f 91       	pop	r17
   156d0:	0f 91       	pop	r16
   156d2:	ff 90       	pop	r15
   156d4:	ef 90       	pop	r14
   156d6:	8f 90       	pop	r8
   156d8:	7f 90       	pop	r7
   156da:	6f 90       	pop	r6
   156dc:	08 95       	ret

000156de <SS80_send_status>:
   156de:	a6 e1       	ldi	r26, 0x16	; 22
   156e0:	b0 e0       	ldi	r27, 0x00	; 0
   156e2:	e5 e7       	ldi	r30, 0x75	; 117
   156e4:	fb ea       	ldi	r31, 0xAB	; 171
   156e6:	0c 94 1f e8 	jmp	0x1d03e	; 0x1d03e <__prologue_saves__+0x18>
   156ea:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   156ee:	85 ff       	sbrs	r24, 5
   156f0:	0a c0       	rjmp	.+20     	; 0x15706 <SS80_send_status+0x28>
   156f2:	8b e0       	ldi	r24, 0x0B	; 11
   156f4:	97 e2       	ldi	r25, 0x27	; 39
   156f6:	1f 92       	push	r1
   156f8:	9f 93       	push	r25
   156fa:	8f 93       	push	r24
   156fc:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   15700:	0f 90       	pop	r0
   15702:	0f 90       	pop	r0
   15704:	0f 90       	pop	r0
   15706:	ce 01       	movw	r24, r28
   15708:	01 96       	adiw	r24, 0x01	; 1
   1570a:	7c 01       	movw	r14, r24
   1570c:	84 e1       	ldi	r24, 0x14	; 20
   1570e:	f7 01       	movw	r30, r14
   15710:	11 92       	st	Z+, r1
   15712:	8a 95       	dec	r24
   15714:	e9 f7       	brne	.-6      	; 0x15710 <SS80_send_status+0x32>
   15716:	e0 91 7c 19 	lds	r30, 0x197C	; 0x80197c <SS80s>
   1571a:	f0 91 7d 19 	lds	r31, 0x197D	; 0x80197d <SS80s+0x1>
   1571e:	86 81       	ldd	r24, Z+6	; 0x06
   15720:	20 e1       	ldi	r18, 0x10	; 16
   15722:	82 9f       	mul	r24, r18
   15724:	c0 01       	movw	r24, r0
   15726:	11 24       	eor	r1, r1
   15728:	95 81       	ldd	r25, Z+5	; 0x05
   1572a:	9f 70       	andi	r25, 0x0F	; 15
   1572c:	89 2b       	or	r24, r25
   1572e:	89 83       	std	Y+1, r24	; 0x01
   15730:	8f ef       	ldi	r24, 0xFF	; 255
   15732:	8a 83       	std	Y+2, r24	; 0x02
   15734:	83 81       	ldd	r24, Z+3	; 0x03
   15736:	86 ff       	sbrs	r24, 6
   15738:	02 c0       	rjmp	.+4      	; 0x1573e <SS80_send_status+0x60>
   1573a:	92 e0       	ldi	r25, 0x02	; 2
   1573c:	9b 83       	std	Y+3, r25	; 0x03
   1573e:	82 ff       	sbrs	r24, 2
   15740:	03 c0       	rjmp	.+6      	; 0x15748 <SS80_send_status+0x6a>
   15742:	9b 81       	ldd	r25, Y+3	; 0x03
   15744:	91 60       	ori	r25, 0x01	; 1
   15746:	9b 83       	std	Y+3, r25	; 0x03
   15748:	80 ff       	sbrs	r24, 0
   1574a:	02 c0       	rjmp	.+4      	; 0x15750 <SS80_send_status+0x72>
   1574c:	82 e0       	ldi	r24, 0x02	; 2
   1574e:	8d 83       	std	Y+5, r24	; 0x05
   15750:	83 81       	ldd	r24, Z+3	; 0x03
   15752:	81 ff       	sbrs	r24, 1
   15754:	03 c0       	rjmp	.+6      	; 0x1575c <SS80_send_status+0x7e>
   15756:	8d 81       	ldd	r24, Y+5	; 0x05
   15758:	82 60       	ori	r24, 0x02	; 2
   1575a:	8d 83       	std	Y+5, r24	; 0x05
   1575c:	83 81       	ldd	r24, Z+3	; 0x03
   1575e:	83 ff       	sbrs	r24, 3
   15760:	02 c0       	rjmp	.+4      	; 0x15766 <SS80_send_status+0x88>
   15762:	88 e0       	ldi	r24, 0x08	; 8
   15764:	8f 83       	std	Y+7, r24	; 0x07
   15766:	83 81       	ldd	r24, Z+3	; 0x03
   15768:	94 81       	ldd	r25, Z+4	; 0x04
   1576a:	89 2b       	or	r24, r25
   1576c:	59 f4       	brne	.+22     	; 0x15784 <SS80_send_status+0xa6>
   1576e:	07 81       	ldd	r16, Z+7	; 0x07
   15770:	10 85       	ldd	r17, Z+8	; 0x08
   15772:	21 85       	ldd	r18, Z+9	; 0x09
   15774:	32 85       	ldd	r19, Z+10	; 0x0a
   15776:	46 e0       	ldi	r20, 0x06	; 6
   15778:	50 e0       	ldi	r21, 0x00	; 0
   1577a:	6a e0       	ldi	r22, 0x0A	; 10
   1577c:	70 e0       	ldi	r23, 0x00	; 0
   1577e:	c7 01       	movw	r24, r14
   15780:	0e 94 30 93 	call	0x12660	; 0x12660 <V2B_MSB>
   15784:	e0 91 7c 19 	lds	r30, 0x197C	; 0x80197c <SS80s>
   15788:	f0 91 7d 19 	lds	r31, 0x197D	; 0x80197d <SS80s+0x1>
   1578c:	83 81       	ldd	r24, Z+3	; 0x03
   1578e:	94 81       	ldd	r25, Z+4	; 0x04
   15790:	89 2b       	or	r24, r25
   15792:	11 f0       	breq	.+4      	; 0x15798 <SS80_send_status+0xba>
   15794:	81 e0       	ldi	r24, 0x01	; 1
   15796:	82 83       	std	Z+2, r24	; 0x02
   15798:	80 e0       	ldi	r24, 0x00	; 0
   1579a:	91 e0       	ldi	r25, 0x01	; 1
   1579c:	9e 8b       	std	Y+22, r25	; 0x16
   1579e:	8d 8b       	std	Y+21, r24	; 0x15
   157a0:	ae 01       	movw	r20, r28
   157a2:	4b 5e       	subi	r20, 0xEB	; 235
   157a4:	5f 4f       	sbci	r21, 0xFF	; 255
   157a6:	64 e1       	ldi	r22, 0x14	; 20
   157a8:	70 e0       	ldi	r23, 0x00	; 0
   157aa:	c7 01       	movw	r24, r14
   157ac:	0e 94 40 8a 	call	0x11480	; 0x11480 <gpib_write_str>
   157b0:	44 97       	sbiw	r24, 0x14	; 20
   157b2:	71 f0       	breq	.+28     	; 0x157d0 <SS80_send_status+0xf2>
   157b4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   157b8:	80 ff       	sbrs	r24, 0
   157ba:	0a c0       	rjmp	.+20     	; 0x157d0 <SS80_send_status+0xf2>
   157bc:	80 ef       	ldi	r24, 0xF0	; 240
   157be:	96 e2       	ldi	r25, 0x26	; 38
   157c0:	1f 92       	push	r1
   157c2:	9f 93       	push	r25
   157c4:	8f 93       	push	r24
   157c6:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   157ca:	0f 90       	pop	r0
   157cc:	0f 90       	pop	r0
   157ce:	0f 90       	pop	r0
   157d0:	8d 89       	ldd	r24, Y+21	; 0x15
   157d2:	9e 89       	ldd	r25, Y+22	; 0x16
   157d4:	88 27       	eor	r24, r24
   157d6:	90 7d       	andi	r25, 0xD0	; 208
   157d8:	66 96       	adiw	r28, 0x16	; 22
   157da:	e6 e0       	ldi	r30, 0x06	; 6
   157dc:	0c 94 3b e8 	jmp	0x1d076	; 0x1d076 <__epilogue_restores__+0x18>

000157e0 <SS80_describe>:
   157e0:	a4 e0       	ldi	r26, 0x04	; 4
   157e2:	b0 e0       	ldi	r27, 0x00	; 0
   157e4:	e6 ef       	ldi	r30, 0xF6	; 246
   157e6:	fb ea       	ldi	r31, 0xAB	; 171
   157e8:	0c 94 23 e8 	jmp	0x1d046	; 0x1d046 <__prologue_saves__+0x20>
   157ec:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   157f0:	85 ff       	sbrs	r24, 5
   157f2:	0a c0       	rjmp	.+20     	; 0x15808 <SS80_describe+0x28>
   157f4:	8f ed       	ldi	r24, 0xDF	; 223
   157f6:	96 e2       	ldi	r25, 0x26	; 38
   157f8:	1f 92       	push	r1
   157fa:	9f 93       	push	r25
   157fc:	8f 93       	push	r24
   157fe:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   15802:	0f 90       	pop	r0
   15804:	0f 90       	pop	r0
   15806:	0f 90       	pop	r0
   15808:	1c 82       	std	Y+4, r1	; 0x04
   1580a:	1b 82       	std	Y+3, r1	; 0x03
   1580c:	ce 01       	movw	r24, r28
   1580e:	01 96       	adiw	r24, 0x01	; 1
   15810:	88 dd       	rcall	.-1264   	; 0x15322 <SS80ControllerPack>
   15812:	69 81       	ldd	r22, Y+1	; 0x01
   15814:	7a 81       	ldd	r23, Y+2	; 0x02
   15816:	ae 01       	movw	r20, r28
   15818:	4d 5f       	subi	r20, 0xFD	; 253
   1581a:	5f 4f       	sbci	r21, 0xFF	; 255
   1581c:	0e 94 40 8a 	call	0x11480	; 0x11480 <gpib_write_str>
   15820:	29 81       	ldd	r18, Y+1	; 0x01
   15822:	3a 81       	ldd	r19, Y+2	; 0x02
   15824:	82 17       	cp	r24, r18
   15826:	93 07       	cpc	r25, r19
   15828:	39 f0       	breq	.+14     	; 0x15838 <SS80_describe+0x58>
   1582a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1582e:	80 ff       	sbrs	r24, 0
   15830:	3c c0       	rjmp	.+120    	; 0x158aa <SS80_describe+0xca>
   15832:	8c eb       	ldi	r24, 0xBC	; 188
   15834:	96 e2       	ldi	r25, 0x26	; 38
   15836:	31 c0       	rjmp	.+98     	; 0x1589a <SS80_describe+0xba>
   15838:	1c 82       	std	Y+4, r1	; 0x04
   1583a:	1b 82       	std	Y+3, r1	; 0x03
   1583c:	ce 01       	movw	r24, r28
   1583e:	01 96       	adiw	r24, 0x01	; 1
   15840:	ac dd       	rcall	.-1192   	; 0x1539a <SS80UnitPack>
   15842:	69 81       	ldd	r22, Y+1	; 0x01
   15844:	7a 81       	ldd	r23, Y+2	; 0x02
   15846:	ae 01       	movw	r20, r28
   15848:	4d 5f       	subi	r20, 0xFD	; 253
   1584a:	5f 4f       	sbci	r21, 0xFF	; 255
   1584c:	0e 94 40 8a 	call	0x11480	; 0x11480 <gpib_write_str>
   15850:	29 81       	ldd	r18, Y+1	; 0x01
   15852:	3a 81       	ldd	r19, Y+2	; 0x02
   15854:	82 17       	cp	r24, r18
   15856:	93 07       	cpc	r25, r19
   15858:	39 f0       	breq	.+14     	; 0x15868 <SS80_describe+0x88>
   1585a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1585e:	80 ff       	sbrs	r24, 0
   15860:	24 c0       	rjmp	.+72     	; 0x158aa <SS80_describe+0xca>
   15862:	8f e9       	ldi	r24, 0x9F	; 159
   15864:	96 e2       	ldi	r25, 0x26	; 38
   15866:	19 c0       	rjmp	.+50     	; 0x1589a <SS80_describe+0xba>
   15868:	80 e0       	ldi	r24, 0x00	; 0
   1586a:	91 e0       	ldi	r25, 0x01	; 1
   1586c:	9c 83       	std	Y+4, r25	; 0x04
   1586e:	8b 83       	std	Y+3, r24	; 0x03
   15870:	ce 01       	movw	r24, r28
   15872:	01 96       	adiw	r24, 0x01	; 1
   15874:	5e de       	rcall	.-836    	; 0x15532 <SS80VolumePack>
   15876:	69 81       	ldd	r22, Y+1	; 0x01
   15878:	7a 81       	ldd	r23, Y+2	; 0x02
   1587a:	ae 01       	movw	r20, r28
   1587c:	4d 5f       	subi	r20, 0xFD	; 253
   1587e:	5f 4f       	sbci	r21, 0xFF	; 255
   15880:	0e 94 40 8a 	call	0x11480	; 0x11480 <gpib_write_str>
   15884:	29 81       	ldd	r18, Y+1	; 0x01
   15886:	3a 81       	ldd	r19, Y+2	; 0x02
   15888:	82 17       	cp	r24, r18
   1588a:	93 07       	cpc	r25, r19
   1588c:	99 f0       	breq	.+38     	; 0x158b4 <SS80_describe+0xd4>
   1588e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15892:	80 ff       	sbrs	r24, 0
   15894:	0a c0       	rjmp	.+20     	; 0x158aa <SS80_describe+0xca>
   15896:	80 e8       	ldi	r24, 0x80	; 128
   15898:	96 e2       	ldi	r25, 0x26	; 38
   1589a:	1f 92       	push	r1
///
/// @param[in] uart: uart number.
///
/// @return  Character count in receive buffer.
int uart_keyhit(uint8_t uart)
{
   1589c:	9f 93       	push	r25
   1589e:	8f 93       	push	r24
   158a0:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   158a4:	0f 90       	pop	r0
   158a6:	0f 90       	pop	r0
   158a8:	0f 90       	pop	r0
   158aa:	8b 81       	ldd	r24, Y+3	; 0x03
   158ac:	9c 81       	ldd	r25, Y+4	; 0x04
   158ae:	88 27       	eor	r24, r24
   158b0:	90 7d       	andi	r25, 0xD0	; 208
   158b2:	02 c0       	rjmp	.+4      	; 0x158b8 <SS80_describe+0xd8>
   158b4:	80 e0       	ldi	r24, 0x00	; 0
   158b6:	90 e0       	ldi	r25, 0x00	; 0
   158b8:	24 96       	adiw	r28, 0x04	; 4
   158ba:	e2 e0       	ldi	r30, 0x02	; 2
   158bc:	0c 94 3f e8 	jmp	0x1d07e	; 0x1d07e <__epilogue_restores__+0x20>

000158c0 <SS80_Check_Unit>:
   158c0:	e0 91 7c 19 	lds	r30, 0x197C	; 0x80197c <SS80s>
   158c4:	f0 91 7d 19 	lds	r31, 0x197D	; 0x80197d <SS80s+0x1>
   158c8:	88 23       	and	r24, r24
   158ca:	d1 f0       	breq	.+52     	; 0x15900 <SS80_Check_Unit+0x40>
   158cc:	8f 30       	cpi	r24, 0x0F	; 15
   158ce:	c1 f0       	breq	.+48     	; 0x15900 <SS80_Check_Unit+0x40>
   158d0:	23 81       	ldd	r18, Z+3	; 0x03
   158d2:	34 81       	ldd	r19, Z+4	; 0x04
   158d4:	20 64       	ori	r18, 0x40	; 64
   158d6:	34 83       	std	Z+4, r19	; 0x04
   158d8:	23 83       	std	Z+3, r18	; 0x03
   158da:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <debuglevel>
   158de:	90 ff       	sbrs	r25, 0
   158e0:	10 c0       	rjmp	.+32     	; 0x15902 <SS80_Check_Unit+0x42>
   158e2:	1f 92       	push	r1
   158e4:	8f 93       	push	r24
   158e6:	88 e6       	ldi	r24, 0x68	; 104
   158e8:	96 e2       	ldi	r25, 0x26	; 38
   158ea:	1f 92       	push	r1
   158ec:	9f 93       	push	r25
   158ee:	8f 93       	push	r24
   158f0:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   158f4:	0f 90       	pop	r0
   158f6:	0f 90       	pop	r0
   158f8:	0f 90       	pop	r0
   158fa:	0f 90       	pop	r0
   158fc:	0f 90       	pop	r0
   158fe:	08 95       	ret
   15900:	85 83       	std	Z+5, r24	; 0x05
   15902:	08 95       	ret

00015904 <SS80_Check_Volume>:
   15904:	e0 91 7c 19 	lds	r30, 0x197C	; 0x80197c <SS80s>
   15908:	f0 91 7d 19 	lds	r31, 0x197D	; 0x80197d <SS80s+0x1>
   1590c:	88 23       	and	r24, r24
   1590e:	c1 f0       	breq	.+48     	; 0x15940 <SS80_Check_Volume+0x3c>
   15910:	23 81       	ldd	r18, Z+3	; 0x03
   15912:	34 81       	ldd	r19, Z+4	; 0x04
   15914:	20 64       	ori	r18, 0x40	; 64
   15916:	34 83       	std	Z+4, r19	; 0x04
   15918:	23 83       	std	Z+3, r18	; 0x03
   1591a:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <debuglevel>
   1591e:	90 ff       	sbrs	r25, 0
   15920:	10 c0       	rjmp	.+32     	; 0x15942 <SS80_Check_Volume+0x3e>
   15922:	1f 92       	push	r1
   15924:	8f 93       	push	r24
   15926:	8e e4       	ldi	r24, 0x4E	; 78
   15928:	96 e2       	ldi	r25, 0x26	; 38
   1592a:	1f 92       	push	r1
   1592c:	9f 93       	push	r25
   1592e:	8f 93       	push	r24
   15930:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   15934:	0f 90       	pop	r0
   15936:	0f 90       	pop	r0
    return ( uart_rx_count( uart ) );
   15938:	0f 90       	pop	r0
}
   1593a:	0f 90       	pop	r0
   1593c:	0f 90       	pop	r0
   1593e:	08 95       	ret
   15940:	16 82       	std	Z+6, r1	; 0x06
   15942:	08 95       	ret

00015944 <SS80_Command_State>:
   15944:	2f 92       	push	r2
   15946:	3f 92       	push	r3
   15948:	4f 92       	push	r4
   1594a:	6f 92       	push	r6
   1594c:	7f 92       	push	r7
   1594e:	8f 92       	push	r8
   15950:	af 92       	push	r10
   15952:	bf 92       	push	r11
   15954:	cf 92       	push	r12
   15956:	df 92       	push	r13
   15958:	ef 92       	push	r14
   1595a:	ff 92       	push	r15
   1595c:	0f 93       	push	r16
   1595e:	1f 93       	push	r17
   15960:	cf 93       	push	r28
   15962:	df 93       	push	r29
   15964:	cd b7       	in	r28, 0x3d	; 61
   15966:	de b7       	in	r29, 0x3e	; 62
   15968:	60 97       	sbiw	r28, 0x10	; 16
   1596a:	0f b6       	in	r0, 0x3f	; 63
   1596c:	f8 94       	cli
   1596e:	de bf       	out	0x3e, r29	; 62
   15970:	0f be       	out	0x3f, r0	; 63
   15972:	cd bf       	out	0x3d, r28	; 61
   15974:	e0 91 7e 19 	lds	r30, 0x197E	; 0x80197e <SS80p>
   15978:	f0 91 7f 19 	lds	r31, 0x197F	; 0x80197f <SS80p+0x1>
   1597c:	81 81       	ldd	r24, Z+1	; 0x01
   1597e:	90 e0       	ldi	r25, 0x00	; 0
   15980:	0e 94 21 85 	call	0x10a42	; 0x10a42 <gpib_disable_PPR>
   15984:	80 e0       	ldi	r24, 0x00	; 0
   15986:	91 e0       	ldi	r25, 0x01	; 1
   15988:	9a 83       	std	Y+2, r25	; 0x02
   1598a:	89 83       	std	Y+1, r24	; 0x01
   1598c:	ae 01       	movw	r20, r28
   1598e:	4f 5f       	subi	r20, 0xFF	; 255
   15990:	5f 4f       	sbci	r21, 0xFF	; 255
   15992:	60 e0       	ldi	r22, 0x00	; 0
   15994:	72 e0       	ldi	r23, 0x02	; 2
   15996:	89 ef       	ldi	r24, 0xF9	; 249
   15998:	9c e1       	ldi	r25, 0x1C	; 28
   1599a:	0e 94 92 89 	call	0x11324	; 0x11324 <gpib_read_str>
   1599e:	6c 01       	movw	r12, r24
   159a0:	89 81       	ldd	r24, Y+1	; 0x01
   159a2:	9a 81       	ldd	r25, Y+2	; 0x02
   159a4:	9c 01       	movw	r18, r24
   159a6:	22 27       	eor	r18, r18
   159a8:	30 7d       	andi	r19, 0xD0	; 208
   159aa:	23 2b       	or	r18, r19
   159ac:	79 f0       	breq	.+30     	; 0x159cc <SS80_Command_State+0x88>
   159ae:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   159b2:	80 ff       	sbrs	r24, 0
   159b4:	21 c2       	rjmp	.+1090   	; 0x15df8 <SS80_Command_State+0x4b4>
   159b6:	88 e2       	ldi	r24, 0x28	; 40
   159b8:	96 e2       	ldi	r25, 0x26	; 38
   159ba:	1f 92       	push	r1
   159bc:	9f 93       	push	r25
   159be:	8f 93       	push	r24
   159c0:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   159c4:	0f 90       	pop	r0
   159c6:	0f 90       	pop	r0
   159c8:	0f 90       	pop	r0
   159ca:	16 c2       	rjmp	.+1068   	; 0x15df8 <SS80_Command_State+0x4b4>
   159cc:	c1 14       	cp	r12, r1
   159ce:	d1 04       	cpc	r13, r1
   159d0:	09 f4       	brne	.+2      	; 0x159d4 <SS80_Command_State+0x90>
   159d2:	17 c2       	rjmp	.+1070   	; 0x15e02 <SS80_Command_State+0x4be>
   159d4:	90 fd       	sbrc	r25, 0
   159d6:	0e c0       	rjmp	.+28     	; 0x159f4 <SS80_Command_State+0xb0>
   159d8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   159dc:	80 ff       	sbrs	r24, 0
   159de:	0a c0       	rjmp	.+20     	; 0x159f4 <SS80_Command_State+0xb0>
   159e0:	8f e0       	ldi	r24, 0x0F	; 15
   159e2:	96 e2       	ldi	r25, 0x26	; 38
   159e4:	1f 92       	push	r1
   159e6:	9f 93       	push	r25
   159e8:	8f 93       	push	r24
   159ea:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   159ee:	0f 90       	pop	r0
   159f0:	0f 90       	pop	r0
   159f2:	0f 90       	pop	r0
   159f4:	e1 2c       	mov	r14, r1
   159f6:	f1 2c       	mov	r15, r1
   159f8:	83 e1       	ldi	r24, 0x13	; 19
   159fa:	95 e2       	ldi	r25, 0x25	; 37
   159fc:	9c 01       	movw	r18, r24
   159fe:	40 e0       	ldi	r20, 0x00	; 0
   15a00:	2d 83       	std	Y+5, r18	; 0x05
   15a02:	3e 83       	std	Y+6, r19	; 0x06
   15a04:	4f 83       	std	Y+7, r20	; 0x07
   15a06:	88 e3       	ldi	r24, 0x38	; 56
   15a08:	95 e2       	ldi	r25, 0x25	; 37
   15a0a:	9c 01       	movw	r18, r24
   15a0c:	40 e0       	ldi	r20, 0x00	; 0
   15a0e:	28 87       	std	Y+8, r18	; 0x08
   15a10:	39 87       	std	Y+9, r19	; 0x09
   15a12:	4a 87       	std	Y+10, r20	; 0x0a
   15a14:	82 e5       	ldi	r24, 0x52	; 82
   15a16:	95 e2       	ldi	r25, 0x25	; 37
   15a18:	9c 01       	movw	r18, r24
   15a1a:	40 e0       	ldi	r20, 0x00	; 0
   15a1c:	2b 87       	std	Y+11, r18	; 0x0b
   15a1e:	3c 87       	std	Y+12, r19	; 0x0c
   15a20:	4d 87       	std	Y+13, r20	; 0x0d
   15a22:	88 e6       	ldi	r24, 0x68	; 104
   15a24:	95 e2       	ldi	r25, 0x25	; 37
   15a26:	3c 01       	movw	r6, r24
   15a28:	86 e7       	ldi	r24, 0x76	; 118
   15a2a:	95 e2       	ldi	r25, 0x25	; 37
   15a2c:	9c 01       	movw	r18, r24
   15a2e:	40 e0       	ldi	r20, 0x00	; 0
   15a30:	2e 87       	std	Y+14, r18	; 0x0e
   15a32:	3f 87       	std	Y+15, r19	; 0x0f
   15a34:	48 8b       	std	Y+16, r20	; 0x10
   15a36:	82 e9       	ldi	r24, 0x92	; 146
   15a38:	95 e2       	ldi	r25, 0x25	; 37
   15a3a:	1c 01       	movw	r2, r24
   15a3c:	80 ee       	ldi	r24, 0xE0	; 224
   15a3e:	a8 2e       	mov	r10, r24
   15a40:	85 e2       	ldi	r24, 0x25	; 37
   15a42:	b8 2e       	mov	r11, r24
   15a44:	87 01       	movw	r16, r14
   15a46:	ec 14       	cp	r14, r12
   15a48:	fd 04       	cpc	r15, r13
   15a4a:	0c f0       	brlt	.+2      	; 0x15a4e <SS80_Command_State+0x10a>
   15a4c:	b6 c1       	rjmp	.+876    	; 0x15dba <SS80_Command_State+0x476>
   15a4e:	0f 5f       	subi	r16, 0xFF	; 255
   15a50:	1f 4f       	sbci	r17, 0xFF	; 255
   15a52:	f7 01       	movw	r30, r14
   15a54:	e7 50       	subi	r30, 0x07	; 7
   15a56:	f3 4e       	sbci	r31, 0xE3	; 227
   15a58:	80 81       	ld	r24, Z
   15a5a:	28 2f       	mov	r18, r24
   15a5c:	30 e0       	ldi	r19, 0x00	; 0
   15a5e:	a9 01       	movw	r20, r18
   15a60:	40 52       	subi	r20, 0x20	; 32
   15a62:	51 09       	sbc	r21, r1
   15a64:	40 31       	cpi	r20, 0x10	; 16
   15a66:	51 05       	cpc	r21, r1
   15a68:	80 f4       	brcc	.+32     	; 0x15a8a <SS80_Command_State+0x146>
   15a6a:	80 52       	subi	r24, 0x20	; 32
   15a6c:	29 df       	rcall	.-430    	; 0x158c0 <SS80_Check_Unit>
   15a6e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15a72:	85 ff       	sbrs	r24, 5
   15a74:	a0 c1       	rjmp	.+832    	; 0x15db6 <SS80_Command_State+0x472>
   15a76:	e0 91 7c 19 	lds	r30, 0x197C	; 0x80197c <SS80s>
   15a7a:	f0 91 7d 19 	lds	r31, 0x197D	; 0x80197d <SS80s+0x1>
   15a7e:	85 81       	ldd	r24, Z+5	; 0x05
   15a80:	1f 92       	push	r1
   15a82:	8f 93       	push	r24
   15a84:	89 ef       	ldi	r24, 0xF9	; 249
   15a86:	95 e2       	ldi	r25, 0x25	; 37
   15a88:	14 c0       	rjmp	.+40     	; 0x15ab2 <SS80_Command_State+0x16e>
   15a8a:	a9 01       	movw	r20, r18
   15a8c:	40 54       	subi	r20, 0x40	; 64
   15a8e:	51 09       	sbc	r21, r1
   15a90:	40 31       	cpi	r20, 0x10	; 16
   15a92:	51 05       	cpc	r21, r1
   15a94:	c8 f4       	brcc	.+50     	; 0x15ac8 <SS80_Command_State+0x184>
   15a96:	80 54       	subi	r24, 0x40	; 64
   15a98:	35 df       	rcall	.-406    	; 0x15904 <SS80_Check_Volume>
   15a9a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15a9e:	85 ff       	sbrs	r24, 5
   15aa0:	8a c1       	rjmp	.+788    	; 0x15db6 <SS80_Command_State+0x472>
   15aa2:	e0 91 7c 19 	lds	r30, 0x197C	; 0x80197c <SS80s>
   15aa6:	f0 91 7d 19 	lds	r31, 0x197D	; 0x80197d <SS80s+0x1>
   15aaa:	86 81       	ldd	r24, Z+6	; 0x06
   15aac:	1f 92       	push	r1
   15aae:	8f 93       	push	r24
   15ab0:	c5 01       	movw	r24, r10
   15ab2:	1f 92       	push	r1
   15ab4:	9f 93       	push	r25
   15ab6:	8f 93       	push	r24
   15ab8:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   15abc:	0f 90       	pop	r0
   15abe:	0f 90       	pop	r0
   15ac0:	0f 90       	pop	r0
   15ac2:	0f 90       	pop	r0
   15ac4:	0f 90       	pop	r0
   15ac6:	77 c1       	rjmp	.+750    	; 0x15db6 <SS80_Command_State+0x472>
   15ac8:	21 15       	cp	r18, r1
   15aca:	31 05       	cpc	r19, r1
   15acc:	79 f4       	brne	.+30     	; 0x15aec <SS80_Command_State+0x1a8>
   15ace:	e0 91 7c 19 	lds	r30, 0x197C	; 0x80197c <SS80s>
   15ad2:	f0 91 7d 19 	lds	r31, 0x197D	; 0x80197d <SS80s+0x1>
   15ad6:	81 e0       	ldi	r24, 0x01	; 1
   15ad8:	90 e0       	ldi	r25, 0x00	; 0
   15ada:	91 83       	std	Z+1, r25	; 0x01
   15adc:	80 83       	st	Z, r24
   15ade:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15ae2:	85 ff       	sbrs	r24, 5
   15ae4:	6a c1       	rjmp	.+724    	; 0x15dba <SS80_Command_State+0x476>
   15ae6:	88 ec       	ldi	r24, 0xC8	; 200
   15ae8:	95 e2       	ldi	r25, 0x25	; 37
   15aea:	0f c0       	rjmp	.+30     	; 0x15b0a <SS80_Command_State+0x1c6>
   15aec:	22 30       	cpi	r18, 0x02	; 2
   15aee:	31 05       	cpc	r19, r1
   15af0:	a9 f4       	brne	.+42     	; 0x15b1c <SS80_Command_State+0x1d8>
   15af2:	e0 91 7c 19 	lds	r30, 0x197C	; 0x80197c <SS80s>
   15af6:	f0 91 7d 19 	lds	r31, 0x197D	; 0x80197d <SS80s+0x1>
   15afa:	31 83       	std	Z+1, r19	; 0x01
   15afc:	20 83       	st	Z, r18
   15afe:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15b02:	85 ff       	sbrs	r24, 5
   15b04:	5a c1       	rjmp	.+692    	; 0x15dba <SS80_Command_State+0x476>
   15b06:	8f ea       	ldi	r24, 0xAF	; 175
   15b08:	95 e2       	ldi	r25, 0x25	; 37
   15b0a:	1f 92       	push	r1
   15b0c:	9f 93       	push	r25
   15b0e:	8f 93       	push	r24
   15b10:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   15b14:	0f 90       	pop	r0
   15b16:	0f 90       	pop	r0
   15b18:	0f 90       	pop	r0
   15b1a:	4f c1       	rjmp	.+670    	; 0x15dba <SS80_Command_State+0x476>
   15b1c:	20 31       	cpi	r18, 0x10	; 16
   15b1e:	31 05       	cpc	r19, r1
   15b20:	a1 f5       	brne	.+104    	; 0x15b8a <SS80_Command_State+0x246>
   15b22:	80 91 7c 19 	lds	r24, 0x197C	; 0x80197c <SS80s>
   15b26:	90 91 7d 19 	lds	r25, 0x197D	; 0x80197d <SS80s+0x1>
   15b2a:	9c 83       	std	Y+4, r25	; 0x04
   15b2c:	8b 83       	std	Y+3, r24	; 0x03
   15b2e:	46 e0       	ldi	r20, 0x06	; 6
   15b30:	50 e0       	ldi	r21, 0x00	; 0
   15b32:	b8 01       	movw	r22, r16
   15b34:	89 ef       	ldi	r24, 0xF9	; 249
   15b36:	9c e1       	ldi	r25, 0x1C	; 28
   15b38:	0e 94 59 93 	call	0x126b2	; 0x126b2 <B2V_MSB>
   15b3c:	eb 81       	ldd	r30, Y+3	; 0x03
   15b3e:	fc 81       	ldd	r31, Y+4	; 0x04
   15b40:	67 83       	std	Z+7, r22	; 0x07
   15b42:	70 87       	std	Z+8, r23	; 0x08
   15b44:	81 87       	std	Z+9, r24	; 0x09
   15b46:	92 87       	std	Z+10, r25	; 0x0a
   15b48:	87 01       	movw	r16, r14
   15b4a:	09 5f       	subi	r16, 0xF9	; 249
   15b4c:	1f 4f       	sbci	r17, 0xFF	; 255
   15b4e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15b52:	85 ff       	sbrs	r24, 5
   15b54:	30 c1       	rjmp	.+608    	; 0x15db6 <SS80_Command_State+0x472>
   15b56:	e0 91 7c 19 	lds	r30, 0x197C	; 0x80197c <SS80s>
   15b5a:	f0 91 7d 19 	lds	r31, 0x197D	; 0x80197d <SS80s+0x1>
   15b5e:	a0 91 7e 19 	lds	r26, 0x197E	; 0x80197e <SS80p>
   15b62:	b0 91 7f 19 	lds	r27, 0x197F	; 0x80197f <SS80p+0x1>
   15b66:	9f 96       	adiw	r26, 0x2f	; 47
   15b68:	0d 90       	ld	r0, X+
   15b6a:	bc 91       	ld	r27, X
   15b6c:	a0 2d       	mov	r26, r0
   15b6e:	27 81       	ldd	r18, Z+7	; 0x07
   15b70:	30 85       	ldd	r19, Z+8	; 0x08
   15b72:	41 85       	ldd	r20, Z+9	; 0x09
   15b74:	52 85       	ldd	r21, Z+10	; 0x0a
   15b76:	0e 94 f3 e7 	call	0x1cfe6	; 0x1cfe6 <__muluhisi3>
   15b7a:	9f 93       	push	r25
   15b7c:	8f 93       	push	r24
   15b7e:	7f 93       	push	r23
   15b80:	6f 93       	push	r22
   15b82:	1f 92       	push	r1
   15b84:	3f 92       	push	r3
   15b86:	2f 92       	push	r2
   15b88:	2e c0       	rjmp	.+92     	; 0x15be6 <SS80_Command_State+0x2a2>
   15b8a:	28 31       	cpi	r18, 0x18	; 24
   15b8c:	31 05       	cpc	r19, r1
   15b8e:	99 f5       	brne	.+102    	; 0x15bf6 <SS80_Command_State+0x2b2>
   15b90:	80 91 7c 19 	lds	r24, 0x197C	; 0x80197c <SS80s>
   15b94:	90 91 7d 19 	lds	r25, 0x197D	; 0x80197d <SS80s+0x1>
   15b98:	9c 83       	std	Y+4, r25	; 0x04
   15b9a:	8b 83       	std	Y+3, r24	; 0x03
   15b9c:	44 e0       	ldi	r20, 0x04	; 4
   15b9e:	50 e0       	ldi	r21, 0x00	; 0
   15ba0:	b8 01       	movw	r22, r16
   15ba2:	89 ef       	ldi	r24, 0xF9	; 249
   15ba4:	9c e1       	ldi	r25, 0x1C	; 28
   15ba6:	0e 94 59 93 	call	0x126b2	; 0x126b2 <B2V_MSB>
   15baa:	eb 81       	ldd	r30, Y+3	; 0x03
   15bac:	fc 81       	ldd	r31, Y+4	; 0x04
   15bae:	63 87       	std	Z+11, r22	; 0x0b
   15bb0:	74 87       	std	Z+12, r23	; 0x0c
   15bb2:	85 87       	std	Z+13, r24	; 0x0d
   15bb4:	96 87       	std	Z+14, r25	; 0x0e
   15bb6:	87 01       	movw	r16, r14
   15bb8:	0b 5f       	subi	r16, 0xFB	; 251
   15bba:	1f 4f       	sbci	r17, 0xFF	; 255
   15bbc:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15bc0:	85 ff       	sbrs	r24, 5
   15bc2:	f9 c0       	rjmp	.+498    	; 0x15db6 <SS80_Command_State+0x472>
   15bc4:	e0 91 7c 19 	lds	r30, 0x197C	; 0x80197c <SS80s>
   15bc8:	f0 91 7d 19 	lds	r31, 0x197D	; 0x80197d <SS80s+0x1>
   15bcc:	86 85       	ldd	r24, Z+14	; 0x0e
   15bce:	8f 93       	push	r24
   15bd0:	85 85       	ldd	r24, Z+13	; 0x0d
   15bd2:	8f 93       	push	r24
   15bd4:	84 85       	ldd	r24, Z+12	; 0x0c
   15bd6:	8f 93       	push	r24
   15bd8:	83 85       	ldd	r24, Z+11	; 0x0b
   15bda:	8f 93       	push	r24
   15bdc:	1f 92       	push	r1
   15bde:	ff 85       	ldd	r31, Y+15	; 0x0f
   15be0:	ff 93       	push	r31
   15be2:	2e 85       	ldd	r18, Y+14	; 0x0e
   15be4:	2f 93       	push	r18
   15be6:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   15bea:	0f b6       	in	r0, 0x3f	; 63
   15bec:	f8 94       	cli
   15bee:	de bf       	out	0x3e, r29	; 62
   15bf0:	0f be       	out	0x3f, r0	; 63
   15bf2:	cd bf       	out	0x3d, r28	; 61
   15bf4:	e0 c0       	rjmp	.+448    	; 0x15db6 <SS80_Command_State+0x472>
   15bf6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15bfa:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   15bfe:	24 33       	cpi	r18, 0x34	; 52
   15c00:	31 05       	cpc	r19, r1
   15c02:	31 f4       	brne	.+12     	; 0x15c10 <SS80_Command_State+0x2cc>
   15c04:	85 ff       	sbrs	r24, 5
   15c06:	d7 c0       	rjmp	.+430    	; 0x15db6 <SS80_Command_State+0x472>
   15c08:	1f 92       	push	r1
   15c0a:	7f 92       	push	r7
   15c0c:	6f 92       	push	r6
   15c0e:	2c c0       	rjmp	.+88     	; 0x15c68 <SS80_Command_State+0x324>
   15c10:	29 33       	cpi	r18, 0x39	; 57
   15c12:	31 05       	cpc	r19, r1
   15c14:	59 f4       	brne	.+22     	; 0x15c2c <SS80_Command_State+0x2e8>
   15c16:	87 01       	movw	r16, r14
   15c18:	0d 5f       	subi	r16, 0xFD	; 253
   15c1a:	1f 4f       	sbci	r17, 0xFF	; 255
   15c1c:	85 ff       	sbrs	r24, 5
   15c1e:	cb c0       	rjmp	.+406    	; 0x15db6 <SS80_Command_State+0x472>
   15c20:	1f 92       	push	r1
   15c22:	9c 85       	ldd	r25, Y+12	; 0x0c
   15c24:	9f 93       	push	r25
   15c26:	eb 85       	ldd	r30, Y+11	; 0x0b
   15c28:	ef 93       	push	r30
   15c2a:	1e c0       	rjmp	.+60     	; 0x15c68 <SS80_Command_State+0x324>
   15c2c:	2b 33       	cpi	r18, 0x3B	; 59
   15c2e:	31 05       	cpc	r19, r1
   15c30:	59 f4       	brne	.+22     	; 0x15c48 <SS80_Command_State+0x304>
   15c32:	87 01       	movw	r16, r14
   15c34:	0e 5f       	subi	r16, 0xFE	; 254
   15c36:	1f 4f       	sbci	r17, 0xFF	; 255
   15c38:	85 ff       	sbrs	r24, 5
   15c3a:	bd c0       	rjmp	.+378    	; 0x15db6 <SS80_Command_State+0x472>
   15c3c:	1f 92       	push	r1
   15c3e:	f9 85       	ldd	r31, Y+9	; 0x09
   15c40:	ff 93       	push	r31
   15c42:	28 85       	ldd	r18, Y+8	; 0x08
   15c44:	2f 93       	push	r18
   15c46:	10 c0       	rjmp	.+32     	; 0x15c68 <SS80_Command_State+0x324>
   15c48:	28 34       	cpi	r18, 0x48	; 72
   15c4a:	31 05       	cpc	r19, r1
   15c4c:	99 f4       	brne	.+38     	; 0x15c74 <SS80_Command_State+0x330>
   15c4e:	87 01       	movw	r16, r14
   15c50:	0e 5f       	subi	r16, 0xFE	; 254
   15c52:	1f 4f       	sbci	r17, 0xFF	; 255
   15c54:	80 73       	andi	r24, 0x30	; 48
   15c56:	99 27       	eor	r25, r25
   15c58:	89 2b       	or	r24, r25
   15c5a:	09 f4       	brne	.+2      	; 0x15c5e <SS80_Command_State+0x31a>
   15c5c:	ac c0       	rjmp	.+344    	; 0x15db6 <SS80_Command_State+0x472>
   15c5e:	1f 92       	push	r1
   15c60:	3e 81       	ldd	r19, Y+6	; 0x06
   15c62:	3f 93       	push	r19
   15c64:	4d 81       	ldd	r20, Y+5	; 0x05
   15c66:	4f 93       	push	r20
   15c68:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   15c6c:	0f 90       	pop	r0
   15c6e:	0f 90       	pop	r0
   15c70:	0f 90       	pop	r0
   15c72:	a1 c0       	rjmp	.+322    	; 0x15db6 <SS80_Command_State+0x472>
   15c74:	24 30       	cpi	r18, 0x04	; 4
   15c76:	31 05       	cpc	r19, r1
   15c78:	41 f4       	brne	.+16     	; 0x15c8a <SS80_Command_State+0x346>
   15c7a:	80 73       	andi	r24, 0x30	; 48
   15c7c:	99 27       	eor	r25, r25
   15c7e:	89 2b       	or	r24, r25
   15c80:	09 f4       	brne	.+2      	; 0x15c84 <SS80_Command_State+0x340>
   15c82:	9b c0       	rjmp	.+310    	; 0x15dba <SS80_Command_State+0x476>
   15c84:	82 ef       	ldi	r24, 0xF2	; 242
   15c86:	94 e2       	ldi	r25, 0x24	; 36
   15c88:	40 cf       	rjmp	.-384    	; 0x15b0a <SS80_Command_State+0x1c6>
   15c8a:	2e 30       	cpi	r18, 0x0E	; 14
   15c8c:	31 05       	cpc	r19, r1
   15c8e:	29 f4       	brne	.+10     	; 0x15c9a <SS80_Command_State+0x356>
   15c90:	85 ff       	sbrs	r24, 5
   15c92:	93 c0       	rjmp	.+294    	; 0x15dba <SS80_Command_State+0x476>
   15c94:	8c ed       	ldi	r24, 0xDC	; 220
   15c96:	94 e2       	ldi	r25, 0x24	; 36
   15c98:	38 cf       	rjmp	.-400    	; 0x15b0a <SS80_Command_State+0x1c6>
   15c9a:	2f 30       	cpi	r18, 0x0F	; 15
   15c9c:	31 05       	cpc	r19, r1
   15c9e:	29 f4       	brne	.+10     	; 0x15caa <SS80_Command_State+0x366>
   15ca0:	85 ff       	sbrs	r24, 5
   15ca2:	8b c0       	rjmp	.+278    	; 0x15dba <SS80_Command_State+0x476>
   15ca4:	8f eb       	ldi	r24, 0xBF	; 191
   15ca6:	94 e2       	ldi	r25, 0x24	; 36
   15ca8:	30 cf       	rjmp	.-416    	; 0x15b0a <SS80_Command_State+0x1c6>
   15caa:	21 33       	cpi	r18, 0x31	; 49
   15cac:	31 05       	cpc	r19, r1
   15cae:	41 f4       	brne	.+16     	; 0x15cc0 <SS80_Command_State+0x37c>
   15cb0:	87 01       	movw	r16, r14
   15cb2:	0d 5f       	subi	r16, 0xFD	; 253
   15cb4:	1f 4f       	sbci	r17, 0xFF	; 255
   15cb6:	85 ff       	sbrs	r24, 5
   15cb8:	80 c0       	rjmp	.+256    	; 0x15dba <SS80_Command_State+0x476>
   15cba:	83 ea       	ldi	r24, 0xA3	; 163
   15cbc:	94 e2       	ldi	r25, 0x24	; 36
   15cbe:	25 cf       	rjmp	.-438    	; 0x15b0a <SS80_Command_State+0x1c6>
   15cc0:	25 33       	cpi	r18, 0x35	; 53
   15cc2:	31 05       	cpc	r19, r1
   15cc4:	69 f4       	brne	.+26     	; 0x15ce0 <SS80_Command_State+0x39c>
   15cc6:	e0 91 7c 19 	lds	r30, 0x197C	; 0x80197c <SS80s>
   15cca:	f0 91 7d 19 	lds	r31, 0x197D	; 0x80197d <SS80s+0x1>
   15cce:	24 e0       	ldi	r18, 0x04	; 4
   15cd0:	30 e0       	ldi	r19, 0x00	; 0
   15cd2:	31 83       	std	Z+1, r19	; 0x01
   15cd4:	20 83       	st	Z, r18
   15cd6:	85 ff       	sbrs	r24, 5
   15cd8:	70 c0       	rjmp	.+224    	; 0x15dba <SS80_Command_State+0x476>
   15cda:	82 e9       	ldi	r24, 0x92	; 146
   15cdc:	94 e2       	ldi	r25, 0x24	; 36
   15cde:	15 cf       	rjmp	.-470    	; 0x15b0a <SS80_Command_State+0x1c6>
   15ce0:	27 33       	cpi	r18, 0x37	; 55
   15ce2:	31 05       	cpc	r19, r1
   15ce4:	59 f4       	brne	.+22     	; 0x15cfc <SS80_Command_State+0x3b8>
   15ce6:	87 01       	movw	r16, r14
   15ce8:	0d 5f       	subi	r16, 0xFD	; 253
   15cea:	1f 4f       	sbci	r17, 0xFF	; 255
   15cec:	80 73       	andi	r24, 0x30	; 48
   15cee:	99 27       	eor	r25, r25
   15cf0:	89 2b       	or	r24, r25
   15cf2:	09 f4       	brne	.+2      	; 0x15cf6 <SS80_Command_State+0x3b2>
   15cf4:	62 c0       	rjmp	.+196    	; 0x15dba <SS80_Command_State+0x476>
   15cf6:	84 e7       	ldi	r24, 0x74	; 116
   15cf8:	94 e2       	ldi	r25, 0x24	; 36
   15cfa:	07 cf       	rjmp	.-498    	; 0x15b0a <SS80_Command_State+0x1c6>
   15cfc:	2e 33       	cpi	r18, 0x3E	; 62
   15cfe:	31 05       	cpc	r19, r1
   15d00:	c1 f4       	brne	.+48     	; 0x15d32 <SS80_Command_State+0x3ee>
   15d02:	80 73       	andi	r24, 0x30	; 48
   15d04:	99 27       	eor	r25, r25
   15d06:	89 2b       	or	r24, r25
   15d08:	81 f0       	breq	.+32     	; 0x15d2a <SS80_Command_State+0x3e6>
   15d0a:	85 e5       	ldi	r24, 0x55	; 85
   15d0c:	94 e2       	ldi	r25, 0x24	; 36
   15d0e:	1f 92       	push	r1
   15d10:	9f 93       	push	r25
   15d12:	8f 93       	push	r24
   15d14:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   15d18:	67 ef       	ldi	r22, 0xF7	; 247
   15d1a:	7f e0       	ldi	r23, 0x0F	; 15
   15d1c:	c8 01       	movw	r24, r16
   15d1e:	87 50       	subi	r24, 0x07	; 7
   15d20:	93 4e       	sbci	r25, 0xE3	; 227
   15d22:	86 dc       	rcall	.-1780   	; 0x15630 <SS80_display_extended_status>
   15d24:	0f 90       	pop	r0
   15d26:	0f 90       	pop	r0
   15d28:	0f 90       	pop	r0
   15d2a:	87 01       	movw	r16, r14
   15d2c:	07 5f       	subi	r16, 0xF7	; 247
   15d2e:	1f 4f       	sbci	r17, 0xFF	; 255
   15d30:	44 c0       	rjmp	.+136    	; 0x15dba <SS80_Command_State+0x476>
   15d32:	2c 34       	cpi	r18, 0x4C	; 76
   15d34:	31 05       	cpc	r19, r1
   15d36:	39 f4       	brne	.+14     	; 0x15d46 <SS80_Command_State+0x402>
   15d38:	80 73       	andi	r24, 0x30	; 48
   15d3a:	99 27       	eor	r25, r25
   15d3c:	89 2b       	or	r24, r25
   15d3e:	e9 f1       	breq	.+122    	; 0x15dba <SS80_Command_State+0x476>
   15d40:	8a e3       	ldi	r24, 0x3A	; 58
   15d42:	94 e2       	ldi	r25, 0x24	; 36
   15d44:	e2 ce       	rjmp	.-572    	; 0x15b0a <SS80_Command_State+0x1c6>
   15d46:	2d 34       	cpi	r18, 0x4D	; 77
   15d48:	31 05       	cpc	r19, r1
   15d4a:	39 f4       	brne	.+14     	; 0x15d5a <SS80_Command_State+0x416>
   15d4c:	80 73       	andi	r24, 0x30	; 48
   15d4e:	99 27       	eor	r25, r25
   15d50:	89 2b       	or	r24, r25
   15d52:	99 f1       	breq	.+102    	; 0x15dba <SS80_Command_State+0x476>
   15d54:	81 e2       	ldi	r24, 0x21	; 33
   15d56:	94 e2       	ldi	r25, 0x24	; 36
   15d58:	d8 ce       	rjmp	.-592    	; 0x15b0a <SS80_Command_State+0x1c6>
   15d5a:	2d 30       	cpi	r18, 0x0D	; 13
   15d5c:	31 05       	cpc	r19, r1
   15d5e:	69 f4       	brne	.+26     	; 0x15d7a <SS80_Command_State+0x436>
   15d60:	e0 91 7c 19 	lds	r30, 0x197C	; 0x80197c <SS80s>
   15d64:	f0 91 7d 19 	lds	r31, 0x197D	; 0x80197d <SS80s+0x1>
   15d68:	23 e0       	ldi	r18, 0x03	; 3
   15d6a:	30 e0       	ldi	r19, 0x00	; 0
   15d6c:	31 83       	std	Z+1, r19	; 0x01
   15d6e:	20 83       	st	Z, r18
   15d70:	85 ff       	sbrs	r24, 5
   15d72:	23 c0       	rjmp	.+70     	; 0x15dba <SS80_Command_State+0x476>
   15d74:	8a e0       	ldi	r24, 0x0A	; 10
   15d76:	94 e2       	ldi	r25, 0x24	; 36
   15d78:	c8 ce       	rjmp	.-624    	; 0x15b0a <SS80_Command_State+0x1c6>
   15d7a:	23 33       	cpi	r18, 0x33	; 51
   15d7c:	31 05       	cpc	r19, r1
   15d7e:	51 f4       	brne	.+20     	; 0x15d94 <SS80_Command_State+0x450>
   15d80:	87 01       	movw	r16, r14
   15d82:	0c 5f       	subi	r16, 0xFC	; 252
   15d84:	1f 4f       	sbci	r17, 0xFF	; 255
   15d86:	80 73       	andi	r24, 0x30	; 48
   15d88:	99 27       	eor	r25, r25
   15d8a:	89 2b       	or	r24, r25
   15d8c:	b1 f0       	breq	.+44     	; 0x15dba <SS80_Command_State+0x476>
   15d8e:	89 ee       	ldi	r24, 0xE9	; 233
   15d90:	93 e2       	ldi	r25, 0x23	; 35
   15d92:	bb ce       	rjmp	.-650    	; 0x15b0a <SS80_Command_State+0x1c6>
   15d94:	80 ff       	sbrs	r24, 0
   15d96:	28 c0       	rjmp	.+80     	; 0x15de8 <SS80_Command_State+0x4a4>
   15d98:	3f 93       	push	r19
   15d9a:	2f 93       	push	r18
   15d9c:	89 ec       	ldi	r24, 0xC9	; 201
   15d9e:	93 e2       	ldi	r25, 0x23	; 35
   15da0:	1f 92       	push	r1
   15da2:	9f 93       	push	r25
   15da4:	8f 93       	push	r24
   15da6:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   15daa:	0f 90       	pop	r0
   15dac:	0f 90       	pop	r0
   15dae:	0f 90       	pop	r0
   15db0:	0f 90       	pop	r0
   15db2:	0f 90       	pop	r0
   15db4:	02 c0       	rjmp	.+4      	; 0x15dba <SS80_Command_State+0x476>
   15db6:	78 01       	movw	r14, r16
   15db8:	45 ce       	rjmp	.-886    	; 0x15a44 <SS80_Command_State+0x100>
   15dba:	0c 15       	cp	r16, r12
   15dbc:	1d 05       	cpc	r17, r13
   15dbe:	a1 f0       	breq	.+40     	; 0x15de8 <SS80_Command_State+0x4a4>
   15dc0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15dc4:	80 ff       	sbrs	r24, 0
   15dc6:	10 c0       	rjmp	.+32     	; 0x15de8 <SS80_Command_State+0x4a4>
   15dc8:	df 92       	push	r13
   15dca:	cf 92       	push	r12
   15dcc:	1f 93       	push	r17
   15dce:	0f 93       	push	r16
   15dd0:	81 e9       	ldi	r24, 0x91	; 145
   15dd2:	93 e2       	ldi	r25, 0x23	; 35
   15dd4:	1f 92       	push	r1
   15dd6:	9f 93       	push	r25
   15dd8:	8f 93       	push	r24
   15dda:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   15dde:	0f b6       	in	r0, 0x3f	; 63
   15de0:	f8 94       	cli
   15de2:	de bf       	out	0x3e, r29	; 62
   15de4:	0f be       	out	0x3f, r0	; 63
   15de6:	cd bf       	out	0x3d, r28	; 61
   15de8:	e0 91 7e 19 	lds	r30, 0x197E	; 0x80197e <SS80p>
   15dec:	f0 91 7f 19 	lds	r31, 0x197F	; 0x80197f <SS80p+0x1>
   15df0:	81 81       	ldd	r24, Z+1	; 0x01
   15df2:	90 e0       	ldi	r25, 0x00	; 0
   15df4:	0e 94 f0 84 	call	0x109e0	; 0x109e0 <gpib_enable_PPR>
   15df8:	89 81       	ldd	r24, Y+1	; 0x01
   15dfa:	9a 81       	ldd	r25, Y+2	; 0x02
   15dfc:	88 27       	eor	r24, r24
   15dfe:	90 7d       	andi	r25, 0xD0	; 208
   15e00:	02 c0       	rjmp	.+4      	; 0x15e06 <SS80_Command_State+0x4c2>
   15e02:	80 e0       	ldi	r24, 0x00	; 0
   15e04:	90 e0       	ldi	r25, 0x00	; 0
   15e06:	60 96       	adiw	r28, 0x10	; 16
   15e08:	0f b6       	in	r0, 0x3f	; 63
   15e0a:	f8 94       	cli
   15e0c:	de bf       	out	0x3e, r29	; 62
   15e0e:	0f be       	out	0x3f, r0	; 63
   15e10:	cd bf       	out	0x3d, r28	; 61
   15e12:	df 91       	pop	r29
   15e14:	cf 91       	pop	r28
   15e16:	1f 91       	pop	r17
   15e18:	0f 91       	pop	r16
   15e1a:	ff 90       	pop	r15
   15e1c:	ef 90       	pop	r14
   15e1e:	df 90       	pop	r13
   15e20:	cf 90       	pop	r12
   15e22:	bf 90       	pop	r11
   15e24:	af 90       	pop	r10
   15e26:	8f 90       	pop	r8
   15e28:	7f 90       	pop	r7
   15e2a:	6f 90       	pop	r6
   15e2c:	4f 90       	pop	r4
   15e2e:	3f 90       	pop	r3
   15e30:	2f 90       	pop	r2
   15e32:	08 95       	ret

00015e34 <SS80_cmd_seek>:
   15e34:	a0 e0       	ldi	r26, 0x00	; 0
   15e36:	b0 e0       	ldi	r27, 0x00	; 0
   15e38:	e0 e2       	ldi	r30, 0x20	; 32
   15e3a:	ff ea       	ldi	r31, 0xAF	; 175
   15e3c:	0c 94 15 e8 	jmp	0x1d02a	; 0x1d02a <__prologue_saves__+0x4>
   15e40:	c0 91 7c 19 	lds	r28, 0x197C	; 0x80197c <SS80s>
   15e44:	d0 91 7d 19 	lds	r29, 0x197D	; 0x80197d <SS80s+0x1>
   15e48:	8f 80       	ldd	r8, Y+7	; 0x07
   15e4a:	98 84       	ldd	r9, Y+8	; 0x08
   15e4c:	a9 84       	ldd	r10, Y+9	; 0x09
   15e4e:	ba 84       	ldd	r11, Y+10	; 0x0a
   15e50:	00 91 7e 19 	lds	r16, 0x197E	; 0x80197e <SS80p>
   15e54:	10 91 7f 19 	lds	r17, 0x197F	; 0x80197f <SS80p+0x1>
   15e58:	f8 01       	movw	r30, r16
   15e5a:	c7 a4       	ldd	r12, Z+47	; 0x2f
   15e5c:	d0 a8       	ldd	r13, Z+48	; 0x30
   15e5e:	e1 2c       	mov	r14, r1
   15e60:	f1 2c       	mov	r15, r1
   15e62:	6b 85       	ldd	r22, Y+11	; 0x0b
   15e64:	7c 85       	ldd	r23, Y+12	; 0x0c
   15e66:	8d 85       	ldd	r24, Y+13	; 0x0d
   15e68:	9e 85       	ldd	r25, Y+14	; 0x0e
   15e6a:	a7 01       	movw	r20, r14
   15e6c:	96 01       	movw	r18, r12
   15e6e:	0e 94 91 e7 	call	0x1cf22	; 0x1cf22 <__udivmodsi4>
   15e72:	da 01       	movw	r26, r20
   15e74:	c9 01       	movw	r24, r18
   15e76:	88 0d       	add	r24, r8
   15e78:	99 1d       	adc	r25, r9
   15e7a:	aa 1d       	adc	r26, r10
   15e7c:	bb 1d       	adc	r27, r11
   15e7e:	f8 01       	movw	r30, r16
   15e80:	eb 5b       	subi	r30, 0xBB	; 187
   15e82:	ff 4f       	sbci	r31, 0xFF	; 255
   15e84:	40 80       	ld	r4, Z
   15e86:	51 80       	ldd	r5, Z+1	; 0x01
   15e88:	62 80       	ldd	r6, Z+2	; 0x02
   15e8a:	73 80       	ldd	r7, Z+3	; 0x03
   15e8c:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <debuglevel>
   15e90:	50 91 be 01 	lds	r21, 0x01BE	; 0x8001be <debuglevel+0x1>
   15e94:	48 16       	cp	r4, r24
   15e96:	59 06       	cpc	r5, r25
   15e98:	6a 06       	cpc	r6, r26
   15e9a:	7b 06       	cpc	r7, r27
   15e9c:	20 f5       	brcc	.+72     	; 0x15ee6 <SS80_cmd_seek+0xb2>
   15e9e:	81 e0       	ldi	r24, 0x01	; 1
   15ea0:	8a 83       	std	Y+2, r24	; 0x02
   15ea2:	8b 81       	ldd	r24, Y+3	; 0x03
   15ea4:	9c 81       	ldd	r25, Y+4	; 0x04
   15ea6:	84 60       	ori	r24, 0x04	; 4
   15ea8:	9c 83       	std	Y+4, r25	; 0x04
   15eaa:	8b 83       	std	Y+3, r24	; 0x03
   15eac:	40 ff       	sbrs	r20, 0
   15eae:	3c c0       	rjmp	.+120    	; 0x15f28 <SS80_cmd_seek+0xf4>
   15eb0:	f8 01       	movw	r30, r16
   15eb2:	a7 a5       	ldd	r26, Z+47	; 0x2f
   15eb4:	b0 a9       	ldd	r27, Z+48	; 0x30
   15eb6:	a5 01       	movw	r20, r10
   15eb8:	94 01       	movw	r18, r8
   15eba:	0e 94 f3 e7 	call	0x1cfe6	; 0x1cfe6 <__muluhisi3>
   15ebe:	9f 93       	push	r25
   15ec0:	8f 93       	push	r24
   15ec2:	7f 93       	push	r23
   15ec4:	6f 93       	push	r22
   15ec6:	8e e4       	ldi	r24, 0x4E	; 78
   15ec8:	92 e2       	ldi	r25, 0x22	; 34
   15eca:	1f 92       	push	r1
   15ecc:	9f 93       	push	r25
   15ece:	8f 93       	push	r24
   15ed0:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   15ed4:	8d b7       	in	r24, 0x3d	; 61
   15ed6:	9e b7       	in	r25, 0x3e	; 62
   15ed8:	07 96       	adiw	r24, 0x07	; 7
   15eda:	0f b6       	in	r0, 0x3f	; 63
   15edc:	f8 94       	cli
   15ede:	9e bf       	out	0x3e, r25	; 62
   15ee0:	0f be       	out	0x3f, r0	; 63
   15ee2:	8d bf       	out	0x3d, r24	; 61
   15ee4:	21 c0       	rjmp	.+66     	; 0x15f28 <SS80_cmd_seek+0xf4>
   15ee6:	ca 01       	movw	r24, r20
   15ee8:	80 72       	andi	r24, 0x20	; 32
   15eea:	99 27       	eor	r25, r25
   15eec:	45 ff       	sbrs	r20, 5
   15eee:	1e c0       	rjmp	.+60     	; 0x15f2c <SS80_cmd_seek+0xf8>
   15ef0:	a5 01       	movw	r20, r10
   15ef2:	94 01       	movw	r18, r8
   15ef4:	c7 01       	movw	r24, r14
   15ef6:	b6 01       	movw	r22, r12
   15ef8:	0e 94 4f e7 	call	0x1ce9e	; 0x1ce9e <__mulsi3>
   15efc:	9f 93       	push	r25
   15efe:	8f 93       	push	r24
   15f00:	7f 93       	push	r23
   15f02:	6f 93       	push	r22
   15f04:	8a e3       	ldi	r24, 0x3A	; 58
   15f06:	92 e2       	ldi	r25, 0x22	; 34
   15f08:	1f 92       	push	r1
   15f0a:	9f 93       	push	r25
   15f0c:	8f 93       	push	r24
   15f0e:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   15f12:	ed b7       	in	r30, 0x3d	; 61
   15f14:	fe b7       	in	r31, 0x3e	; 62
   15f16:	37 96       	adiw	r30, 0x07	; 7
   15f18:	0f b6       	in	r0, 0x3f	; 63
   15f1a:	f8 94       	cli
   15f1c:	fe bf       	out	0x3e, r31	; 62
   15f1e:	0f be       	out	0x3f, r0	; 63
   15f20:	ed bf       	out	0x3d, r30	; 61
   15f22:	80 e0       	ldi	r24, 0x00	; 0
   15f24:	90 e0       	ldi	r25, 0x00	; 0
   15f26:	02 c0       	rjmp	.+4      	; 0x15f2c <SS80_cmd_seek+0xf8>
   15f28:	81 e0       	ldi	r24, 0x01	; 1
   15f2a:	90 e0       	ldi	r25, 0x00	; 0
   15f2c:	cd b7       	in	r28, 0x3d	; 61
   15f2e:	de b7       	in	r29, 0x3e	; 62
   15f30:	e0 e1       	ldi	r30, 0x10	; 16
   15f32:	0c 94 31 e8 	jmp	0x1d062	; 0x1d062 <__epilogue_restores__+0x4>

00015f36 <SS80_locate_and_write>:
   15f36:	a8 e0       	ldi	r26, 0x08	; 8
   15f38:	b0 e0       	ldi	r27, 0x00	; 0
   15f3a:	e1 ea       	ldi	r30, 0xA1	; 161
   15f3c:	ff ea       	ldi	r31, 0xAF	; 175
   15f3e:	0c 94 13 e8 	jmp	0x1d026	; 0x1d026 <__prologue_saves__>
   15f42:	e0 91 7c 19 	lds	r30, 0x197C	; 0x80197c <SS80s>
   15f46:	f0 91 7d 19 	lds	r31, 0x197D	; 0x80197d <SS80s+0x1>
   15f4a:	a0 91 7e 19 	lds	r26, 0x197E	; 0x80197e <SS80p>
   15f4e:	b0 91 7f 19 	lds	r27, 0x197F	; 0x80197f <SS80p+0x1>
   15f52:	9f 96       	adiw	r26, 0x2f	; 47
   15f54:	0d 90       	ld	r0, X+
   15f56:	bc 91       	ld	r27, X
   15f58:	a0 2d       	mov	r26, r0
   15f5a:	27 81       	ldd	r18, Z+7	; 0x07
   15f5c:	30 85       	ldd	r19, Z+8	; 0x08
   15f5e:	41 85       	ldd	r20, Z+9	; 0x09
   15f60:	52 85       	ldd	r21, Z+10	; 0x0a
   15f62:	0e 94 f3 e7 	call	0x1cfe6	; 0x1cfe6 <__muluhisi3>
   15f66:	4b 01       	movw	r8, r22
   15f68:	5c 01       	movw	r10, r24
   15f6a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15f6e:	85 ff       	sbrs	r24, 5
   15f70:	18 c0       	rjmp	.+48     	; 0x15fa2 <SS80_locate_and_write+0x6c>
   15f72:	86 85       	ldd	r24, Z+14	; 0x0e
   15f74:	8f 93       	push	r24
   15f76:	85 85       	ldd	r24, Z+13	; 0x0d
   15f78:	8f 93       	push	r24
   15f7a:	84 85       	ldd	r24, Z+12	; 0x0c
   15f7c:	8f 93       	push	r24
   15f7e:	83 85       	ldd	r24, Z+11	; 0x0b
   15f80:	8f 93       	push	r24
   15f82:	bf 92       	push	r11
   15f84:	af 92       	push	r10
   15f86:	9f 92       	push	r9
   15f88:	8f 92       	push	r8
   15f8a:	8f ec       	ldi	r24, 0xCF	; 207
   15f8c:	97 e2       	ldi	r25, 0x27	; 39
   15f8e:	1f 92       	push	r1
   15f90:	9f 93       	push	r25
   15f92:	8f 93       	push	r24
   15f94:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   15f98:	0f b6       	in	r0, 0x3f	; 63
   15f9a:	f8 94       	cli
   15f9c:	de bf       	out	0x3e, r29	; 62
   15f9e:	0f be       	out	0x3f, r0	; 63
   15fa0:	cd bf       	out	0x3d, r28	; 61
   15fa2:	e0 91 7c 19 	lds	r30, 0x197C	; 0x80197c <SS80s>
   15fa6:	f0 91 7d 19 	lds	r31, 0x197D	; 0x80197d <SS80s+0x1>
   15faa:	12 82       	std	Z+2, r1	; 0x02
   15fac:	54 98       	cbi	0x0a, 4	; 10
   15fae:	4c 99       	sbic	0x09, 4	; 9
   15fb0:	03 c0       	rjmp	.+6      	; 0x15fb8 <SS80_locate_and_write+0x82>
   15fb2:	80 e0       	ldi	r24, 0x00	; 0
   15fb4:	90 e1       	ldi	r25, 0x10	; 16
   15fb6:	52 c1       	rjmp	.+676    	; 0x1625c <SS80_locate_and_write+0x326>
   15fb8:	3d df       	rcall	.-390    	; 0x15e34 <SS80_cmd_seek>
   15fba:	e0 91 7c 19 	lds	r30, 0x197C	; 0x80197c <SS80s>
   15fbe:	f0 91 7d 19 	lds	r31, 0x197D	; 0x80197d <SS80s+0x1>
   15fc2:	89 2b       	or	r24, r25
   15fc4:	41 f0       	breq	.+16     	; 0x15fd6 <SS80_locate_and_write+0xa0>
   15fc6:	83 81       	ldd	r24, Z+3	; 0x03
   15fc8:	94 81       	ldd	r25, Z+4	; 0x04
   15fca:	82 60       	ori	r24, 0x02	; 2
   15fcc:	94 83       	std	Z+4, r25	; 0x04
   15fce:	83 83       	std	Z+3, r24	; 0x03
   15fd0:	01 e0       	ldi	r16, 0x01	; 1
   15fd2:	10 e0       	ldi	r17, 0x00	; 0
   15fd4:	02 c0       	rjmp	.+4      	; 0x15fda <SS80_locate_and_write+0xa4>
   15fd6:	00 e0       	ldi	r16, 0x00	; 0
   15fd8:	10 e0       	ldi	r17, 0x00	; 0
   15fda:	23 84       	ldd	r2, Z+11	; 0x0b
   15fdc:	34 84       	ldd	r3, Z+12	; 0x0c
   15fde:	1a 82       	std	Y+2, r1	; 0x02
   15fe0:	19 82       	std	Y+1, r1	; 0x01
   15fe2:	41 2c       	mov	r4, r1
   15fe4:	51 2c       	mov	r5, r1
   15fe6:	32 01       	movw	r6, r4
   15fe8:	82 e8       	ldi	r24, 0x82	; 130
   15fea:	97 e2       	ldi	r25, 0x27	; 39
   15fec:	9c 01       	movw	r18, r24
   15fee:	40 e0       	ldi	r20, 0x00	; 0
   15ff0:	2b 83       	std	Y+3, r18	; 0x03
   15ff2:	3c 83       	std	Y+4, r19	; 0x04
   15ff4:	4d 83       	std	Y+5, r20	; 0x05
   15ff6:	88 ea       	ldi	r24, 0xA8	; 168
   15ff8:	97 e2       	ldi	r25, 0x27	; 39
   15ffa:	9c 01       	movw	r18, r24
   15ffc:	40 e0       	ldi	r20, 0x00	; 0
   15ffe:	2e 83       	std	Y+6, r18	; 0x06
   16000:	3f 83       	std	Y+7, r19	; 0x07
   16002:	48 87       	std	Y+8, r20	; 0x08
   16004:	12 14       	cp	r1, r2
   16006:	13 04       	cpc	r1, r3
   16008:	0c f0       	brlt	.+2      	; 0x1600c <SS80_locate_and_write+0xd6>
   1600a:	f6 c0       	rjmp	.+492    	; 0x161f8 <SS80_locate_and_write+0x2c2>
   1600c:	54 98       	cbi	0x0a, 4	; 10
   1600e:	4c 9b       	sbis	0x09, 4	; 9
   16010:	d0 cf       	rjmp	.-96     	; 0x15fb2 <SS80_locate_and_write+0x7c>
   16012:	71 01       	movw	r14, r2
   16014:	31 e0       	ldi	r19, 0x01	; 1
   16016:	23 16       	cp	r2, r19
   16018:	33 06       	cpc	r3, r19
   1601a:	1c f0       	brlt	.+6      	; 0x16022 <SS80_locate_and_write+0xec>
   1601c:	e1 2c       	mov	r14, r1
   1601e:	ff 24       	eor	r15, r15
   16020:	f3 94       	inc	r15
   16022:	e9 ef       	ldi	r30, 0xF9	; 249
   16024:	fc e1       	ldi	r31, 0x1C	; 28
   16026:	20 e0       	ldi	r18, 0x00	; 0
   16028:	32 e0       	ldi	r19, 0x02	; 2
   1602a:	11 92       	st	Z+, r1
   1602c:	21 50       	subi	r18, 0x01	; 1
   1602e:	30 40       	sbci	r19, 0x00	; 0
   16030:	e1 f7       	brne	.-8      	; 0x1602a <SS80_locate_and_write+0xf4>
   16032:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16036:	87 fd       	sbrc	r24, 7
   16038:	0e 94 38 84 	call	0x10870	; 0x10870 <gpib_timer_elapsed_begin>
   1603c:	ae 01       	movw	r20, r28
   1603e:	4f 5f       	subi	r20, 0xFF	; 255
   16040:	5f 4f       	sbci	r21, 0xFF	; 255
   16042:	b7 01       	movw	r22, r14
   16044:	89 ef       	ldi	r24, 0xF9	; 249
   16046:	9c e1       	ldi	r25, 0x1C	; 28
   16048:	0e 94 92 89 	call	0x11324	; 0x11324 <gpib_read_str>
   1604c:	6c 01       	movw	r12, r24
   1604e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16052:	87 ff       	sbrs	r24, 7
   16054:	04 c0       	rjmp	.+8      	; 0x1605e <SS80_locate_and_write+0x128>
   16056:	83 e1       	ldi	r24, 0x13	; 19
   16058:	90 e1       	ldi	r25, 0x10	; 16
   1605a:	0e 94 4a 84 	call	0x10894	; 0x10894 <gpib_timer_elapsed_end>
   1605e:	ce 14       	cp	r12, r14
   16060:	df 04       	cpc	r13, r15
   16062:	39 f1       	breq	.+78     	; 0x160b2 <SS80_locate_and_write+0x17c>
   16064:	89 81       	ldd	r24, Y+1	; 0x01
   16066:	9a 81       	ldd	r25, Y+2	; 0x02
   16068:	9c 01       	movw	r18, r24
   1606a:	22 27       	eor	r18, r18
   1606c:	30 7d       	andi	r19, 0xD0	; 208
   1606e:	23 2b       	or	r18, r19
   16070:	d1 f0       	breq	.+52     	; 0x160a6 <SS80_locate_and_write+0x170>
   16072:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16076:	80 ff       	sbrs	r24, 0
   16078:	0a c0       	rjmp	.+20     	; 0x1608e <SS80_locate_and_write+0x158>
   1607a:	8c eb       	ldi	r24, 0xBC	; 188
   1607c:	97 e2       	ldi	r25, 0x27	; 39
   1607e:	1f 92       	push	r1
   16080:	9f 93       	push	r25
   16082:	8f 93       	push	r24
   16084:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   16088:	0f 90       	pop	r0
   1608a:	0f 90       	pop	r0
   1608c:	0f 90       	pop	r0
   1608e:	e0 91 7c 19 	lds	r30, 0x197C	; 0x80197c <SS80s>
   16092:	f0 91 7d 19 	lds	r31, 0x197D	; 0x80197d <SS80s+0x1>
   16096:	83 81       	ldd	r24, Z+3	; 0x03
   16098:	94 81       	ldd	r25, Z+4	; 0x04
   1609a:	82 60       	ori	r24, 0x02	; 2
   1609c:	94 83       	std	Z+4, r25	; 0x04
   1609e:	83 83       	std	Z+3, r24	; 0x03
   160a0:	81 e0       	ldi	r24, 0x01	; 1
   160a2:	82 83       	std	Z+2, r24	; 0x02
   160a4:	9a c0       	rjmp	.+308    	; 0x161da <SS80_locate_and_write+0x2a4>
   160a6:	c1 14       	cp	r12, r1
   160a8:	d1 04       	cpc	r13, r1
   160aa:	09 f0       	breq	.+2      	; 0x160ae <SS80_locate_and_write+0x178>
   160ac:	d3 c0       	rjmp	.+422    	; 0x16254 <SS80_locate_and_write+0x31e>
   160ae:	90 fd       	sbrc	r25, 0
   160b0:	94 c0       	rjmp	.+296    	; 0x161da <SS80_locate_and_write+0x2a4>
   160b2:	01 15       	cp	r16, r1
   160b4:	11 05       	cpc	r17, r1
   160b6:	09 f0       	breq	.+2      	; 0x160ba <SS80_locate_and_write+0x184>
   160b8:	85 c0       	rjmp	.+266    	; 0x161c4 <SS80_locate_and_write+0x28e>
   160ba:	c1 14       	cp	r12, r1
   160bc:	d1 04       	cpc	r13, r1
   160be:	09 f4       	brne	.+2      	; 0x160c2 <SS80_locate_and_write+0x18c>
   160c0:	83 c0       	rjmp	.+262    	; 0x161c8 <SS80_locate_and_write+0x292>
   160c2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   160c6:	86 fd       	sbrc	r24, 6
   160c8:	0e 94 38 84 	call	0x10870	; 0x10870 <gpib_timer_elapsed_begin>
   160cc:	e0 90 7c 19 	lds	r14, 0x197C	; 0x80197c <SS80s>
   160d0:	f0 90 7d 19 	lds	r15, 0x197D	; 0x80197d <SS80s+0x1>
   160d4:	33 e0       	ldi	r19, 0x03	; 3
   160d6:	e3 0e       	add	r14, r19
   160d8:	f1 1c       	adc	r15, r1
   160da:	80 91 7e 19 	lds	r24, 0x197E	; 0x80197e <SS80p>
   160de:	90 91 7f 19 	lds	r25, 0x197F	; 0x80197f <SS80p+0x1>
   160e2:	86 01       	movw	r16, r12
   160e4:	29 ef       	ldi	r18, 0xF9	; 249
   160e6:	3c e1       	ldi	r19, 0x1C	; 28
   160e8:	b5 01       	movw	r22, r10
   160ea:	a4 01       	movw	r20, r8
   160ec:	02 96       	adiw	r24, 0x02	; 2
   160ee:	0e 94 e1 83 	call	0x107c2	; 0x107c2 <dbf_open_write>
   160f2:	7c 01       	movw	r14, r24
   160f4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   160f8:	86 ff       	sbrs	r24, 6
   160fa:	04 c0       	rjmp	.+8      	; 0x16104 <SS80_locate_and_write+0x1ce>
   160fc:	8d e1       	ldi	r24, 0x1D	; 29
   160fe:	90 e1       	ldi	r25, 0x10	; 16
   16100:	0e 94 4a 84 	call	0x10894	; 0x10894 <gpib_timer_elapsed_end>
   16104:	ce 14       	cp	r12, r14
   16106:	df 04       	cpc	r13, r15
   16108:	39 f1       	breq	.+78     	; 0x16158 <SS80_locate_and_write+0x222>
   1610a:	e0 91 7c 19 	lds	r30, 0x197C	; 0x80197c <SS80s>
   1610e:	f0 91 7d 19 	lds	r31, 0x197D	; 0x80197d <SS80s+0x1>
   16112:	83 81       	ldd	r24, Z+3	; 0x03
   16114:	94 81       	ldd	r25, Z+4	; 0x04
   16116:	82 60       	ori	r24, 0x02	; 2
   16118:	94 83       	std	Z+4, r25	; 0x04
   1611a:	83 83       	std	Z+3, r24	; 0x03
   1611c:	0e 94 99 6f 	call	0xdf32	; 0xdf32 <mmc_wp_status>
   16120:	e0 91 7c 19 	lds	r30, 0x197C	; 0x80197c <SS80s>
   16124:	f0 91 7d 19 	lds	r31, 0x197D	; 0x80197d <SS80s+0x1>
   16128:	89 2b       	or	r24, r25
   1612a:	29 f0       	breq	.+10     	; 0x16136 <SS80_locate_and_write+0x200>
   1612c:	83 81       	ldd	r24, Z+3	; 0x03
   1612e:	94 81       	ldd	r25, Z+4	; 0x04
   16130:	88 60       	ori	r24, 0x08	; 8
   16132:	94 83       	std	Z+4, r25	; 0x04
   16134:	83 83       	std	Z+3, r24	; 0x03
   16136:	41 e0       	ldi	r20, 0x01	; 1
   16138:	42 83       	std	Z+2, r20	; 0x02
   1613a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1613e:	80 ff       	sbrs	r24, 0
   16140:	29 c0       	rjmp	.+82     	; 0x16194 <SS80_locate_and_write+0x25e>
   16142:	1f 92       	push	r1
   16144:	8f 81       	ldd	r24, Y+7	; 0x07
   16146:	8f 93       	push	r24
   16148:	9e 81       	ldd	r25, Y+6	; 0x06
   1614a:	9f 93       	push	r25
   1614c:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   16150:	0f 90       	pop	r0
   16152:	0f 90       	pop	r0
   16154:	0f 90       	pop	r0
   16156:	1e c0       	rjmp	.+60     	; 0x16194 <SS80_locate_and_write+0x25e>
   16158:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1615c:	85 ff       	sbrs	r24, 5
   1615e:	0e c0       	rjmp	.+28     	; 0x1617c <SS80_locate_and_write+0x246>
   16160:	df 92       	push	r13
   16162:	cf 92       	push	r12
   16164:	1f 92       	push	r1
   16166:	ec 81       	ldd	r30, Y+4	; 0x04
   16168:	ef 93       	push	r30
   1616a:	fb 81       	ldd	r31, Y+3	; 0x03
   1616c:	ff 93       	push	r31
   1616e:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   16172:	0f 90       	pop	r0
   16174:	0f 90       	pop	r0
   16176:	0f 90       	pop	r0
   16178:	0f 90       	pop	r0
   1617a:	0f 90       	pop	r0
   1617c:	c6 01       	movw	r24, r12
   1617e:	0d 2c       	mov	r0, r13
   16180:	00 0c       	add	r0, r0
   16182:	aa 0b       	sbc	r26, r26
   16184:	bb 0b       	sbc	r27, r27
   16186:	88 0e       	add	r8, r24
   16188:	99 1e       	adc	r9, r25
   1618a:	aa 1e       	adc	r10, r26
   1618c:	bb 1e       	adc	r11, r27
   1618e:	00 e0       	ldi	r16, 0x00	; 0
   16190:	10 e0       	ldi	r17, 0x00	; 0
   16192:	05 c0       	rjmp	.+10     	; 0x1619e <SS80_locate_and_write+0x268>
   16194:	ec 14       	cp	r14, r12
   16196:	fd 04       	cpc	r15, r13
   16198:	64 f0       	brlt	.+24     	; 0x161b2 <SS80_locate_and_write+0x27c>
   1619a:	01 e0       	ldi	r16, 0x01	; 1
   1619c:	10 e0       	ldi	r17, 0x00	; 0
   1619e:	c7 01       	movw	r24, r14
   161a0:	0f 2c       	mov	r0, r15
   161a2:	00 0c       	add	r0, r0
   161a4:	aa 0b       	sbc	r26, r26
   161a6:	bb 0b       	sbc	r27, r27
   161a8:	48 0e       	add	r4, r24
   161aa:	59 1e       	adc	r5, r25
   161ac:	6a 1e       	adc	r6, r26
   161ae:	7b 1e       	adc	r7, r27
   161b0:	0b c0       	rjmp	.+22     	; 0x161c8 <SS80_locate_and_write+0x292>
   161b2:	c6 01       	movw	r24, r12
   161b4:	0d 2c       	mov	r0, r13
   161b6:	00 0c       	add	r0, r0
   161b8:	aa 0b       	sbc	r26, r26
   161ba:	bb 0b       	sbc	r27, r27
   161bc:	48 0e       	add	r4, r24
   161be:	59 1e       	adc	r5, r25
   161c0:	6a 1e       	adc	r6, r26
   161c2:	7b 1e       	adc	r7, r27
   161c4:	01 e0       	ldi	r16, 0x01	; 1
   161c6:	10 e0       	ldi	r17, 0x00	; 0
   161c8:	2c 18       	sub	r2, r12
   161ca:	3d 08       	sbc	r3, r13
   161cc:	89 81       	ldd	r24, Y+1	; 0x01
   161ce:	9a 81       	ldd	r25, Y+2	; 0x02
   161d0:	90 ff       	sbrs	r25, 0
   161d2:	18 cf       	rjmp	.-464    	; 0x16004 <SS80_locate_and_write+0xce>
   161d4:	12 14       	cp	r1, r2
   161d6:	13 04       	cpc	r1, r3
   161d8:	7c f4       	brge	.+30     	; 0x161f8 <SS80_locate_and_write+0x2c2>
   161da:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   161de:	80 ff       	sbrs	r24, 0
   161e0:	1f c0       	rjmp	.+62     	; 0x16220 <SS80_locate_and_write+0x2ea>
   161e2:	8a e5       	ldi	r24, 0x5A	; 90
   161e4:	97 e2       	ldi	r25, 0x27	; 39
   161e6:	1f 92       	push	r1
   161e8:	9f 93       	push	r25
   161ea:	8f 93       	push	r24
   161ec:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   161f0:	0f 90       	pop	r0
   161f2:	0f 90       	pop	r0
   161f4:	0f 90       	pop	r0
   161f6:	14 c0       	rjmp	.+40     	; 0x16220 <SS80_locate_and_write+0x2ea>
   161f8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   161fc:	85 ff       	sbrs	r24, 5
   161fe:	10 c0       	rjmp	.+32     	; 0x16220 <SS80_locate_and_write+0x2ea>
   16200:	7f 92       	push	r7
   16202:	6f 92       	push	r6
   16204:	5f 92       	push	r5
   16206:	4f 92       	push	r4
   16208:	8f e2       	ldi	r24, 0x2F	; 47
   1620a:	97 e2       	ldi	r25, 0x27	; 39
   1620c:	1f 92       	push	r1
   1620e:	9f 93       	push	r25
   16210:	8f 93       	push	r24
   16212:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   16216:	0f b6       	in	r0, 0x3f	; 63
   16218:	f8 94       	cli
   1621a:	de bf       	out	0x3e, r29	; 62
   1621c:	0f be       	out	0x3f, r0	; 63
   1621e:	cd bf       	out	0x3d, r28	; 61
   16220:	00 91 7c 19 	lds	r16, 0x197C	; 0x80197c <SS80s>
   16224:	10 91 7d 19 	lds	r17, 0x197D	; 0x80197d <SS80s+0x1>
   16228:	e0 91 7e 19 	lds	r30, 0x197E	; 0x80197e <SS80p>
   1622c:	f0 91 7f 19 	lds	r31, 0x197F	; 0x80197f <SS80p+0x1>
   16230:	27 a5       	ldd	r18, Z+47	; 0x2f
   16232:	30 a9       	ldd	r19, Z+48	; 0x30
   16234:	40 e0       	ldi	r20, 0x00	; 0
   16236:	50 e0       	ldi	r21, 0x00	; 0
   16238:	c5 01       	movw	r24, r10
   1623a:	b4 01       	movw	r22, r8
   1623c:	0e 94 91 e7 	call	0x1cf22	; 0x1cf22 <__udivmodsi4>
   16240:	f8 01       	movw	r30, r16
   16242:	27 83       	std	Z+7, r18	; 0x07
   16244:	30 87       	std	Z+8, r19	; 0x08
   16246:	41 87       	std	Z+9, r20	; 0x09
   16248:	52 87       	std	Z+10, r21	; 0x0a
   1624a:	89 81       	ldd	r24, Y+1	; 0x01
   1624c:	9a 81       	ldd	r25, Y+2	; 0x02
   1624e:	88 27       	eor	r24, r24
   16250:	90 7d       	andi	r25, 0xD0	; 208
   16252:	04 c0       	rjmp	.+8      	; 0x1625c <SS80_locate_and_write+0x326>
   16254:	01 2b       	or	r16, r17
   16256:	09 f4       	brne	.+2      	; 0x1625a <SS80_locate_and_write+0x324>
   16258:	34 cf       	rjmp	.-408    	; 0x160c2 <SS80_locate_and_write+0x18c>
   1625a:	b4 cf       	rjmp	.-152    	; 0x161c4 <SS80_locate_and_write+0x28e>
   1625c:	28 96       	adiw	r28, 0x08	; 8
   1625e:	e2 e1       	ldi	r30, 0x12	; 18
   16260:	0c 94 2f e8 	jmp	0x1d05e	; 0x1d05e <__epilogue_restores__>

00016264 <SS80_Report>:
   16264:	a3 e0       	ldi	r26, 0x03	; 3
   16266:	b0 e0       	ldi	r27, 0x00	; 0
   16268:	e8 e3       	ldi	r30, 0x38	; 56
   1626a:	f1 eb       	ldi	r31, 0xB1	; 177
   1626c:	0c 94 23 e8 	jmp	0x1d046	; 0x1d046 <__prologue_saves__+0x20>
   16270:	e0 91 7c 19 	lds	r30, 0x197C	; 0x80197c <SS80s>
   16274:	f0 91 7d 19 	lds	r31, 0x197D	; 0x80197d <SS80s+0x1>
   16278:	82 81       	ldd	r24, Z+2	; 0x02
   1627a:	8b 83       	std	Y+3, r24	; 0x03
   1627c:	80 e0       	ldi	r24, 0x00	; 0
   1627e:	91 e0       	ldi	r25, 0x01	; 1
   16280:	9a 83       	std	Y+2, r25	; 0x02
   16282:	89 83       	std	Y+1, r24	; 0x01
   16284:	ae 01       	movw	r20, r28
   16286:	4f 5f       	subi	r20, 0xFF	; 255
   16288:	5f 4f       	sbci	r21, 0xFF	; 255
   1628a:	61 e0       	ldi	r22, 0x01	; 1
   1628c:	70 e0       	ldi	r23, 0x00	; 0
   1628e:	ce 01       	movw	r24, r28
   16290:	03 96       	adiw	r24, 0x03	; 3
   16292:	0e 94 40 8a 	call	0x11480	; 0x11480 <gpib_write_str>
   16296:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1629a:	01 97       	sbiw	r24, 0x01	; 1
   1629c:	89 f0       	breq	.+34     	; 0x162c0 <SS80_Report+0x5c>
   1629e:	20 ff       	sbrs	r18, 0
   162a0:	0a c0       	rjmp	.+20     	; 0x162b6 <SS80_Report+0x52>
   162a2:	80 e2       	ldi	r24, 0x20	; 32
   162a4:	92 e2       	ldi	r25, 0x22	; 34
   162a6:	1f 92       	push	r1
   162a8:	9f 93       	push	r25
   162aa:	8f 93       	push	r24
   162ac:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   162b0:	0f 90       	pop	r0
   162b2:	0f 90       	pop	r0
   162b4:	0f 90       	pop	r0
   162b6:	89 81       	ldd	r24, Y+1	; 0x01
   162b8:	9a 81       	ldd	r25, Y+2	; 0x02
   162ba:	88 27       	eor	r24, r24
   162bc:	90 7d       	andi	r25, 0xD0	; 208
   162be:	1c c0       	rjmp	.+56     	; 0x162f8 <SS80_Report+0x94>
   162c0:	25 ff       	sbrs	r18, 5
   162c2:	13 c0       	rjmp	.+38     	; 0x162ea <SS80_Report+0x86>
   162c4:	e0 91 7c 19 	lds	r30, 0x197C	; 0x80197c <SS80s>
   162c8:	f0 91 7d 19 	lds	r31, 0x197D	; 0x80197d <SS80s+0x1>
   162cc:	82 81       	ldd	r24, Z+2	; 0x02
   162ce:	1f 92       	push	r1
   162d0:	8f 93       	push	r24
   162d2:	8d e0       	ldi	r24, 0x0D	; 13
   162d4:	92 e2       	ldi	r25, 0x22	; 34
   162d6:	1f 92       	push	r1
   162d8:	9f 93       	push	r25
   162da:	8f 93       	push	r24
   162dc:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   162e0:	0f 90       	pop	r0
   162e2:	0f 90       	pop	r0
   162e4:	0f 90       	pop	r0
   162e6:	0f 90       	pop	r0
   162e8:	0f 90       	pop	r0
   162ea:	e0 91 7c 19 	lds	r30, 0x197C	; 0x80197c <SS80s>
   162ee:	f0 91 7d 19 	lds	r31, 0x197D	; 0x80197d <SS80s+0x1>
   162f2:	12 82       	std	Z+2, r1	; 0x02
   162f4:	80 e0       	ldi	r24, 0x00	; 0
   162f6:	90 e0       	ldi	r25, 0x00	; 0
   162f8:	23 96       	adiw	r28, 0x03	; 3
   162fa:	e2 e0       	ldi	r30, 0x02	; 2
   162fc:	0c 94 3f e8 	jmp	0x1d07e	; 0x1d07e <__epilogue_restores__+0x20>

00016300 <Clear_Common>:
   16300:	e0 91 7c 19 	lds	r30, 0x197C	; 0x80197c <SS80s>
   16304:	f0 91 7d 19 	lds	r31, 0x197D	; 0x80197d <SS80s+0x1>
   16308:	25 81       	ldd	r18, Z+5	; 0x05
   1630a:	30 e0       	ldi	r19, 0x00	; 0
   1630c:	28 17       	cp	r18, r24
   1630e:	39 07       	cpc	r19, r25
   16310:	19 f0       	breq	.+6      	; 0x16318 <Clear_Common+0x18>
   16312:	0f 97       	sbiw	r24, 0x0f	; 15
   16314:	99 f4       	brne	.+38     	; 0x1633c <Clear_Common+0x3c>
   16316:	03 c0       	rjmp	.+6      	; 0x1631e <Clear_Common+0x1e>
   16318:	2f 30       	cpi	r18, 0x0F	; 15
   1631a:	31 05       	cpc	r19, r1
   1631c:	09 f4       	brne	.+2      	; 0x16320 <Clear_Common+0x20>
   1631e:	15 82       	std	Z+5, r1	; 0x05
   16320:	16 82       	std	Z+6, r1	; 0x06
   16322:	17 82       	std	Z+7, r1	; 0x07
   16324:	10 86       	std	Z+8, r1	; 0x08
   16326:	11 86       	std	Z+9, r1	; 0x09
   16328:	12 86       	std	Z+10, r1	; 0x0a
   1632a:	13 86       	std	Z+11, r1	; 0x0b
   1632c:	14 86       	std	Z+12, r1	; 0x0c
   1632e:	15 86       	std	Z+13, r1	; 0x0d
   16330:	16 86       	std	Z+14, r1	; 0x0e
   16332:	11 82       	std	Z+1, r1	; 0x01
   16334:	10 82       	st	Z, r1
   16336:	14 82       	std	Z+4, r1	; 0x04
   16338:	13 82       	std	Z+3, r1	; 0x03
   1633a:	12 82       	std	Z+2, r1	; 0x02
   1633c:	08 95       	ret

0001633e <SS80_init>:
   1633e:	a0 e0       	ldi	r26, 0x00	; 0
   16340:	b0 e0       	ldi	r27, 0x00	; 0
   16342:	e5 ea       	ldi	r30, 0xA5	; 165
   16344:	f1 eb       	ldi	r31, 0xB1	; 177
   16346:	0c 94 1d e8 	jmp	0x1d03a	; 0x1d03a <__prologue_saves__+0x14>
   1634a:	0c ed       	ldi	r16, 0xDC	; 220
   1634c:	10 e2       	ldi	r17, 0x20	; 32
   1634e:	cb e0       	ldi	r28, 0x0B	; 11
   16350:	d0 e0       	ldi	r29, 0x00	; 0
   16352:	82 e0       	ldi	r24, 0x02	; 2
   16354:	f8 2e       	mov	r15, r24
   16356:	88 ed       	ldi	r24, 0xD8	; 216
   16358:	98 e2       	ldi	r25, 0x28	; 40
   1635a:	6c 01       	movw	r12, r24
   1635c:	e1 2c       	mov	r14, r1
   1635e:	f8 01       	movw	r30, r16
   16360:	80 81       	ld	r24, Z
   16362:	83 30       	cpi	r24, 0x03	; 3
   16364:	39 f5       	brne	.+78     	; 0x163b4 <SS80_init+0x76>
   16366:	ce 01       	movw	r24, r28
   16368:	0e 94 02 94 	call	0x12804	; 0x12804 <set_active_device>
   1636c:	89 2b       	or	r24, r25
   1636e:	11 f1       	breq	.+68     	; 0x163b4 <SS80_init+0x76>
   16370:	8f e0       	ldi	r24, 0x0F	; 15
   16372:	90 e0       	ldi	r25, 0x00	; 0
   16374:	c5 df       	rcall	.-118    	; 0x16300 <Clear_Common>
   16376:	e0 91 7c 19 	lds	r30, 0x197C	; 0x80197c <SS80s>
   1637a:	f0 91 7d 19 	lds	r31, 0x197D	; 0x80197d <SS80s+0x1>
   1637e:	f2 82       	std	Z+2, r15	; 0x02
   16380:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16384:	85 ff       	sbrs	r24, 5
   16386:	0e c0       	rjmp	.+28     	; 0x163a4 <SS80_init+0x66>
   16388:	f8 01       	movw	r30, r16
   1638a:	81 81       	ldd	r24, Z+1	; 0x01
   1638c:	1f 92       	push	r1
   1638e:	8f 93       	push	r24
   16390:	1f 92       	push	r1
   16392:	df 92       	push	r13
   16394:	cf 92       	push	r12
   16396:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1639a:	0f 90       	pop	r0
   1639c:	0f 90       	pop	r0
   1639e:	0f 90       	pop	r0
   163a0:	0f 90       	pop	r0
   163a2:	0f 90       	pop	r0
   163a4:	e0 91 7e 19 	lds	r30, 0x197E	; 0x80197e <SS80p>
   163a8:	f0 91 7f 19 	lds	r31, 0x197F	; 0x80197f <SS80p+0x1>
   163ac:	81 81       	ldd	r24, Z+1	; 0x01
   163ae:	90 e0       	ldi	r25, 0x00	; 0
   163b0:	0e 94 21 85 	call	0x10a42	; 0x10a42 <gpib_disable_PPR>
   163b4:	21 97       	sbiw	r28, 0x01	; 1
   163b6:	0b 52       	subi	r16, 0x2B	; 43
   163b8:	11 09       	sbc	r17, r1
   163ba:	cf 3f       	cpi	r28, 0xFF	; 255
   163bc:	ff ef       	ldi	r31, 0xFF	; 255
   163be:	df 07       	cpc	r29, r31
   163c0:	71 f6       	brne	.-100    	; 0x1635e <SS80_init+0x20>
   163c2:	cd b7       	in	r28, 0x3d	; 61
   163c4:	de b7       	in	r29, 0x3e	; 62
   163c6:	e8 e0       	ldi	r30, 0x08	; 8
   163c8:	0c 94 39 e8 	jmp	0x1d072	; 0x1d072 <__epilogue_restores__+0x14>

000163cc <SS80_Channel_Independent_Clear>:
   163cc:	99 df       	rcall	.-206    	; 0x16300 <Clear_Common>
   163ce:	e0 91 7e 19 	lds	r30, 0x197E	; 0x80197e <SS80p>
   163d2:	f0 91 7f 19 	lds	r31, 0x197F	; 0x80197f <SS80p+0x1>
   163d6:	81 81       	ldd	r24, Z+1	; 0x01
   163d8:	90 e0       	ldi	r25, 0x00	; 0
   163da:	0e 94 f0 84 	call	0x109e0	; 0x109e0 <gpib_enable_PPR>
   163de:	80 e0       	ldi	r24, 0x00	; 0
   163e0:	90 e0       	ldi	r25, 0x00	; 0
   163e2:	08 95       	ret

000163e4 <SS80_Universal_Device_Clear>:
   163e4:	8f e0       	ldi	r24, 0x0F	; 15
   163e6:	90 e0       	ldi	r25, 0x00	; 0
   163e8:	8b df       	rcall	.-234    	; 0x16300 <Clear_Common>
   163ea:	e0 91 7e 19 	lds	r30, 0x197E	; 0x80197e <SS80p>
   163ee:	f0 91 7f 19 	lds	r31, 0x197F	; 0x80197f <SS80p+0x1>
   163f2:	81 81       	ldd	r24, Z+1	; 0x01
   163f4:	90 e0       	ldi	r25, 0x00	; 0
   163f6:	0e 94 f0 84 	call	0x109e0	; 0x109e0 <gpib_enable_PPR>
   163fa:	80 e0       	ldi	r24, 0x00	; 0
   163fc:	90 e0       	ldi	r25, 0x00	; 0
   163fe:	08 95       	ret

00016400 <SS80_Selected_Device_Clear>:
   16400:	cf 93       	push	r28
   16402:	df 93       	push	r29
   16404:	ec 01       	movw	r28, r24
   16406:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1640a:	85 ff       	sbrs	r24, 5
   1640c:	0a c0       	rjmp	.+20     	; 0x16422 <SS80_Selected_Device_Clear+0x22>
   1640e:	81 e0       	ldi	r24, 0x01	; 1
   16410:	92 e2       	ldi	r25, 0x22	; 34
   16412:	1f 92       	push	r1
   16414:	9f 93       	push	r25
   16416:	8f 93       	push	r24
   16418:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1641c:	0f 90       	pop	r0
   1641e:	0f 90       	pop	r0
   16420:	0f 90       	pop	r0
   16422:	ce 01       	movw	r24, r28
   16424:	6d df       	rcall	.-294    	; 0x16300 <Clear_Common>
   16426:	e0 91 7e 19 	lds	r30, 0x197E	; 0x80197e <SS80p>
   1642a:	f0 91 7f 19 	lds	r31, 0x197F	; 0x80197f <SS80p+0x1>
   1642e:	81 81       	ldd	r24, Z+1	; 0x01
   16430:	90 e0       	ldi	r25, 0x00	; 0
   16432:	0e 94 f0 84 	call	0x109e0	; 0x109e0 <gpib_enable_PPR>
   16436:	80 e0       	ldi	r24, 0x00	; 0
   16438:	90 e0       	ldi	r25, 0x00	; 0
   1643a:	df 91       	pop	r29
   1643c:	cf 91       	pop	r28
   1643e:	08 95       	ret

00016440 <SS80_Amigo_Clear>:
   16440:	a3 e0       	ldi	r26, 0x03	; 3
   16442:	b0 e0       	ldi	r27, 0x00	; 0
   16444:	e6 e2       	ldi	r30, 0x26	; 38
   16446:	f2 eb       	ldi	r31, 0xB2	; 178
   16448:	0c 94 23 e8 	jmp	0x1d046	; 0x1d046 <__prologue_saves__+0x20>
   1644c:	1a 82       	std	Y+2, r1	; 0x02
   1644e:	19 82       	std	Y+1, r1	; 0x01
   16450:	ae 01       	movw	r20, r28
   16452:	4f 5f       	subi	r20, 0xFF	; 255
   16454:	5f 4f       	sbci	r21, 0xFF	; 255
   16456:	61 e0       	ldi	r22, 0x01	; 1
   16458:	70 e0       	ldi	r23, 0x00	; 0
   1645a:	ce 01       	movw	r24, r28
   1645c:	03 96       	adiw	r24, 0x03	; 3
   1645e:	0e 94 92 89 	call	0x11324	; 0x11324 <gpib_read_str>
   16462:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   16466:	01 97       	sbiw	r24, 0x01	; 1
   16468:	89 f0       	breq	.+34     	; 0x1648c <SS80_Amigo_Clear+0x4c>
   1646a:	20 ff       	sbrs	r18, 0
   1646c:	0a c0       	rjmp	.+20     	; 0x16482 <SS80_Amigo_Clear+0x42>
   1646e:	8e ee       	ldi	r24, 0xEE	; 238
   16470:	91 e2       	ldi	r25, 0x21	; 33
   16472:	1f 92       	push	r1
   16474:	9f 93       	push	r25
   16476:	8f 93       	push	r24
   16478:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1647c:	0f 90       	pop	r0
   1647e:	0f 90       	pop	r0
   16480:	0f 90       	pop	r0
   16482:	89 81       	ldd	r24, Y+1	; 0x01
   16484:	9a 81       	ldd	r25, Y+2	; 0x02
   16486:	88 27       	eor	r24, r24
   16488:	90 7d       	andi	r25, 0xD0	; 208
   1648a:	19 c0       	rjmp	.+50     	; 0x164be <SS80_Amigo_Clear+0x7e>
   1648c:	25 ff       	sbrs	r18, 5
   1648e:	0a c0       	rjmp	.+20     	; 0x164a4 <SS80_Amigo_Clear+0x64>
   16490:	8f ed       	ldi	r24, 0xDF	; 223
   16492:	91 e2       	ldi	r25, 0x21	; 33
   16494:	1f 92       	push	r1
   16496:	9f 93       	push	r25
   16498:	8f 93       	push	r24
   1649a:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1649e:	0f 90       	pop	r0
   164a0:	0f 90       	pop	r0
   164a2:	0f 90       	pop	r0
   164a4:	8f e0       	ldi	r24, 0x0F	; 15
   164a6:	90 e0       	ldi	r25, 0x00	; 0
   164a8:	2b df       	rcall	.-426    	; 0x16300 <Clear_Common>
   164aa:	e0 91 7e 19 	lds	r30, 0x197E	; 0x80197e <SS80p>
   164ae:	f0 91 7f 19 	lds	r31, 0x197F	; 0x80197f <SS80p+0x1>
   164b2:	81 81       	ldd	r24, Z+1	; 0x01
   164b4:	90 e0       	ldi	r25, 0x00	; 0
   164b6:	0e 94 f0 84 	call	0x109e0	; 0x109e0 <gpib_enable_PPR>
   164ba:	80 e0       	ldi	r24, 0x00	; 0
   164bc:	90 e0       	ldi	r25, 0x00	; 0
   164be:	23 96       	adiw	r28, 0x03	; 3
   164c0:	e2 e0       	ldi	r30, 0x02	; 2
   164c2:	0c 94 3f e8 	jmp	0x1d07e	; 0x1d07e <__epilogue_restores__+0x20>

000164c6 <SS80_Cancel>:
   164c6:	e0 91 7c 19 	lds	r30, 0x197C	; 0x80197c <SS80s>
   164ca:	f0 91 7d 19 	lds	r31, 0x197D	; 0x80197d <SS80s+0x1>
   164ce:	11 82       	std	Z+1, r1	; 0x01
   164d0:	10 82       	st	Z, r1
   164d2:	e0 91 7e 19 	lds	r30, 0x197E	; 0x80197e <SS80p>
   164d6:	f0 91 7f 19 	lds	r31, 0x197F	; 0x80197f <SS80p+0x1>
   164da:	81 81       	ldd	r24, Z+1	; 0x01
   164dc:	90 e0       	ldi	r25, 0x00	; 0
   164de:	0e 94 f0 84 	call	0x109e0	; 0x109e0 <gpib_enable_PPR>
   164e2:	80 e0       	ldi	r24, 0x00	; 0
   164e4:	90 e0       	ldi	r25, 0x00	; 0
   164e6:	08 95       	ret

000164e8 <SS80_Transparent_State>:
   164e8:	a2 e0       	ldi	r26, 0x02	; 2
   164ea:	b0 e0       	ldi	r27, 0x00	; 0
   164ec:	ea e7       	ldi	r30, 0x7A	; 122
   164ee:	f2 eb       	ldi	r31, 0xB2	; 178
   164f0:	0c 94 1b e8 	jmp	0x1d036	; 0x1d036 <__prologue_saves__+0x10>
   164f4:	e0 91 7e 19 	lds	r30, 0x197E	; 0x80197e <SS80p>
   164f8:	f0 91 7f 19 	lds	r31, 0x197F	; 0x80197f <SS80p+0x1>
   164fc:	81 81       	ldd	r24, Z+1	; 0x01
   164fe:	90 e0       	ldi	r25, 0x00	; 0
   16500:	0e 94 21 85 	call	0x10a42	; 0x10a42 <gpib_disable_PPR>
   16504:	80 e0       	ldi	r24, 0x00	; 0
   16506:	91 e0       	ldi	r25, 0x01	; 1
   16508:	9a 83       	std	Y+2, r25	; 0x02
   1650a:	89 83       	std	Y+1, r24	; 0x01
   1650c:	ae 01       	movw	r20, r28
   1650e:	4f 5f       	subi	r20, 0xFF	; 255
   16510:	5f 4f       	sbci	r21, 0xFF	; 255
   16512:	60 e0       	ldi	r22, 0x00	; 0
   16514:	72 e0       	ldi	r23, 0x02	; 2
   16516:	89 ef       	ldi	r24, 0xF9	; 249
   16518:	9c e1       	ldi	r25, 0x1C	; 28
   1651a:	0e 94 92 89 	call	0x11324	; 0x11324 <gpib_read_str>
   1651e:	7c 01       	movw	r14, r24
   16520:	89 81       	ldd	r24, Y+1	; 0x01
   16522:	9a 81       	ldd	r25, Y+2	; 0x02
   16524:	9c 01       	movw	r18, r24
   16526:	22 27       	eor	r18, r18
   16528:	30 7d       	andi	r19, 0xD0	; 208
   1652a:	23 2b       	or	r18, r19
   1652c:	79 f0       	breq	.+30     	; 0x1654c <SS80_Transparent_State+0x64>
   1652e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16532:	80 ff       	sbrs	r24, 0
   16534:	e0 c0       	rjmp	.+448    	; 0x166f6 <SS80_Transparent_State+0x20e>
   16536:	8e e7       	ldi	r24, 0x7E	; 126
   16538:	93 e2       	ldi	r25, 0x23	; 35
   1653a:	1f 92       	push	r1
   1653c:	9f 93       	push	r25
   1653e:	8f 93       	push	r24
   16540:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   16544:	0f 90       	pop	r0
   16546:	0f 90       	pop	r0
   16548:	0f 90       	pop	r0
   1654a:	d5 c0       	rjmp	.+426    	; 0x166f6 <SS80_Transparent_State+0x20e>
   1654c:	e1 14       	cp	r14, r1
   1654e:	f1 04       	cpc	r15, r1
   16550:	09 f4       	brne	.+2      	; 0x16554 <SS80_Transparent_State+0x6c>
   16552:	d6 c0       	rjmp	.+428    	; 0x16700 <SS80_Transparent_State+0x218>
   16554:	90 fd       	sbrc	r25, 0
   16556:	0e c0       	rjmp	.+28     	; 0x16574 <SS80_Transparent_State+0x8c>
   16558:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1655c:	80 ff       	sbrs	r24, 0
   1655e:	0a c0       	rjmp	.+20     	; 0x16574 <SS80_Transparent_State+0x8c>
   16560:	85 e6       	ldi	r24, 0x65	; 101
   16562:	93 e2       	ldi	r25, 0x23	; 35
   16564:	1f 92       	push	r1
   16566:	9f 93       	push	r25
   16568:	8f 93       	push	r24
   1656a:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1656e:	0f 90       	pop	r0
   16570:	0f 90       	pop	r0
   16572:	0f 90       	pop	r0
   16574:	89 ef       	ldi	r24, 0xF9	; 249
   16576:	a8 2e       	mov	r10, r24
   16578:	8c e1       	ldi	r24, 0x1C	; 28
   1657a:	b8 2e       	mov	r11, r24
   1657c:	00 e0       	ldi	r16, 0x00	; 0
   1657e:	10 e0       	ldi	r17, 0x00	; 0
   16580:	0e 15       	cp	r16, r14
   16582:	1f 05       	cpc	r17, r15
   16584:	0c f0       	brlt	.+2      	; 0x16588 <SS80_Transparent_State+0xa0>
   16586:	a0 c0       	rjmp	.+320    	; 0x166c8 <SS80_Transparent_State+0x1e0>
   16588:	68 01       	movw	r12, r16
   1658a:	8f ef       	ldi	r24, 0xFF	; 255
   1658c:	c8 1a       	sub	r12, r24
   1658e:	d8 0a       	sbc	r13, r24
   16590:	f5 01       	movw	r30, r10
   16592:	81 91       	ld	r24, Z+
   16594:	5f 01       	movw	r10, r30
   16596:	28 2f       	mov	r18, r24
   16598:	30 e0       	ldi	r19, 0x00	; 0
   1659a:	a9 01       	movw	r20, r18
   1659c:	40 52       	subi	r20, 0x20	; 32
   1659e:	51 09       	sbc	r21, r1
   165a0:	40 31       	cpi	r20, 0x10	; 16
   165a2:	51 05       	cpc	r21, r1
   165a4:	20 f4       	brcc	.+8      	; 0x165ae <SS80_Transparent_State+0xc6>
   165a6:	80 52       	subi	r24, 0x20	; 32
   165a8:	8b d9       	rcall	.-3306   	; 0x158c0 <SS80_Check_Unit>
   165aa:	86 01       	movw	r16, r12
   165ac:	e9 cf       	rjmp	.-46     	; 0x16580 <SS80_Transparent_State+0x98>
   165ae:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   165b2:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   165b6:	21 30       	cpi	r18, 0x01	; 1
   165b8:	31 05       	cpc	r19, r1
   165ba:	c9 f4       	brne	.+50     	; 0x165ee <SS80_Transparent_State+0x106>
   165bc:	0e 5f       	subi	r16, 0xFE	; 254
   165be:	1f 4f       	sbci	r17, 0xFF	; 255
   165c0:	80 73       	andi	r24, 0x30	; 48
   165c2:	99 27       	eor	r25, r25
   165c4:	89 2b       	or	r24, r25
   165c6:	51 f0       	breq	.+20     	; 0x165dc <SS80_Transparent_State+0xf4>
   165c8:	80 e4       	ldi	r24, 0x40	; 64
   165ca:	93 e2       	ldi	r25, 0x23	; 35
   165cc:	1f 92       	push	r1
   165ce:	9f 93       	push	r25
   165d0:	8f 93       	push	r24
   165d2:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   165d6:	0f 90       	pop	r0
   165d8:	0f 90       	pop	r0
   165da:	0f 90       	pop	r0
   165dc:	e0 91 7e 19 	lds	r30, 0x197E	; 0x80197e <SS80p>
   165e0:	f0 91 7f 19 	lds	r31, 0x197F	; 0x80197f <SS80p+0x1>
   165e4:	81 81       	ldd	r24, Z+1	; 0x01
   165e6:	90 e0       	ldi	r25, 0x00	; 0
   165e8:	0e 94 f0 84 	call	0x109e0	; 0x109e0 <gpib_enable_PPR>
   165ec:	6d c0       	rjmp	.+218    	; 0x166c8 <SS80_Transparent_State+0x1e0>
   165ee:	22 30       	cpi	r18, 0x02	; 2
   165f0:	31 05       	cpc	r19, r1
   165f2:	51 f4       	brne	.+20     	; 0x16608 <SS80_Transparent_State+0x120>
   165f4:	0b 5f       	subi	r16, 0xFB	; 251
   165f6:	1f 4f       	sbci	r17, 0xFF	; 255
   165f8:	80 73       	andi	r24, 0x30	; 48
   165fa:	99 27       	eor	r25, r25
   165fc:	89 2b       	or	r24, r25
   165fe:	09 f4       	brne	.+2      	; 0x16602 <SS80_Transparent_State+0x11a>
   16600:	63 c0       	rjmp	.+198    	; 0x166c8 <SS80_Transparent_State+0x1e0>
   16602:	83 e2       	ldi	r24, 0x23	; 35
   16604:	93 e2       	ldi	r25, 0x23	; 35
   16606:	0c c0       	rjmp	.+24     	; 0x16620 <SS80_Transparent_State+0x138>
   16608:	23 30       	cpi	r18, 0x03	; 3
   1660a:	31 05       	cpc	r19, r1
   1660c:	91 f4       	brne	.+36     	; 0x16632 <SS80_Transparent_State+0x14a>
   1660e:	0b 5f       	subi	r16, 0xFB	; 251
   16610:	1f 4f       	sbci	r17, 0xFF	; 255
   16612:	80 73       	andi	r24, 0x30	; 48
   16614:	99 27       	eor	r25, r25
   16616:	89 2b       	or	r24, r25
   16618:	09 f4       	brne	.+2      	; 0x1661c <SS80_Transparent_State+0x134>
   1661a:	56 c0       	rjmp	.+172    	; 0x166c8 <SS80_Transparent_State+0x1e0>
   1661c:	85 e0       	ldi	r24, 0x05	; 5
   1661e:	93 e2       	ldi	r25, 0x23	; 35
   16620:	1f 92       	push	r1
   16622:	9f 93       	push	r25
   16624:	8f 93       	push	r24
   16626:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1662a:	0f 90       	pop	r0
   1662c:	0f 90       	pop	r0
   1662e:	0f 90       	pop	r0
   16630:	4b c0       	rjmp	.+150    	; 0x166c8 <SS80_Transparent_State+0x1e0>
   16632:	28 30       	cpi	r18, 0x08	; 8
   16634:	31 05       	cpc	r19, r1
   16636:	e9 f4       	brne	.+58     	; 0x16672 <SS80_Transparent_State+0x18a>
   16638:	85 ff       	sbrs	r24, 5
   1663a:	13 c0       	rjmp	.+38     	; 0x16662 <SS80_Transparent_State+0x17a>
   1663c:	e0 91 7c 19 	lds	r30, 0x197C	; 0x80197c <SS80s>
   16640:	f0 91 7d 19 	lds	r31, 0x197D	; 0x80197d <SS80s+0x1>
   16644:	85 81       	ldd	r24, Z+5	; 0x05
   16646:	1f 92       	push	r1
   16648:	8f 93       	push	r24
   1664a:	8e ed       	ldi	r24, 0xDE	; 222
   1664c:	92 e2       	ldi	r25, 0x22	; 34
   1664e:	1f 92       	push	r1
   16650:	9f 93       	push	r25
   16652:	8f 93       	push	r24
   16654:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   16658:	0f 90       	pop	r0
   1665a:	0f 90       	pop	r0
   1665c:	0f 90       	pop	r0
   1665e:	0f 90       	pop	r0
   16660:	0f 90       	pop	r0
   16662:	e0 91 7c 19 	lds	r30, 0x197C	; 0x80197c <SS80s>
   16666:	f0 91 7d 19 	lds	r31, 0x197D	; 0x80197d <SS80s+0x1>
   1666a:	85 81       	ldd	r24, Z+5	; 0x05
   1666c:	90 e0       	ldi	r25, 0x00	; 0
   1666e:	ae de       	rcall	.-676    	; 0x163cc <SS80_Channel_Independent_Clear>
   16670:	49 c0       	rjmp	.+146    	; 0x16704 <SS80_Transparent_State+0x21c>
   16672:	29 30       	cpi	r18, 0x09	; 9
   16674:	31 05       	cpc	r19, r1
   16676:	b9 f4       	brne	.+46     	; 0x166a6 <SS80_Transparent_State+0x1be>
   16678:	85 ff       	sbrs	r24, 5
   1667a:	13 c0       	rjmp	.+38     	; 0x166a2 <SS80_Transparent_State+0x1ba>
   1667c:	e0 91 7c 19 	lds	r30, 0x197C	; 0x80197c <SS80s>
   16680:	f0 91 7d 19 	lds	r31, 0x197D	; 0x80197d <SS80s+0x1>
   16684:	85 81       	ldd	r24, Z+5	; 0x05
   16686:	1f 92       	push	r1
   16688:	8f 93       	push	r24
   1668a:	8a ec       	ldi	r24, 0xCA	; 202
   1668c:	92 e2       	ldi	r25, 0x22	; 34
   1668e:	1f 92       	push	r1
   16690:	9f 93       	push	r25
   16692:	8f 93       	push	r24
   16694:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   16698:	0f 90       	pop	r0
   1669a:	0f 90       	pop	r0
   1669c:	0f 90       	pop	r0
   1669e:	0f 90       	pop	r0
   166a0:	0f 90       	pop	r0
   166a2:	11 df       	rcall	.-478    	; 0x164c6 <SS80_Cancel>
   166a4:	2f c0       	rjmp	.+94     	; 0x16704 <SS80_Transparent_State+0x21c>
   166a6:	80 ff       	sbrs	r24, 0
   166a8:	26 c0       	rjmp	.+76     	; 0x166f6 <SS80_Transparent_State+0x20e>
   166aa:	3f 93       	push	r19
   166ac:	2f 93       	push	r18
   166ae:	8a ea       	ldi	r24, 0xAA	; 170
   166b0:	92 e2       	ldi	r25, 0x22	; 34
   166b2:	1f 92       	push	r1
   166b4:	9f 93       	push	r25
   166b6:	8f 93       	push	r24
   166b8:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   166bc:	0f 90       	pop	r0
   166be:	0f 90       	pop	r0
   166c0:	0f 90       	pop	r0
   166c2:	0f 90       	pop	r0
   166c4:	0f 90       	pop	r0
   166c6:	86 01       	movw	r16, r12
   166c8:	0e 15       	cp	r16, r14
   166ca:	1f 05       	cpc	r17, r15
   166cc:	a1 f0       	breq	.+40     	; 0x166f6 <SS80_Transparent_State+0x20e>
   166ce:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   166d2:	80 ff       	sbrs	r24, 0
   166d4:	10 c0       	rjmp	.+32     	; 0x166f6 <SS80_Transparent_State+0x20e>
   166d6:	ff 92       	push	r15
   166d8:	ef 92       	push	r14
   166da:	1f 93       	push	r17
   166dc:	0f 93       	push	r16
   166de:	8e e6       	ldi	r24, 0x6E	; 110
   166e0:	92 e2       	ldi	r25, 0x22	; 34
   166e2:	1f 92       	push	r1
   166e4:	9f 93       	push	r25
   166e6:	8f 93       	push	r24
   166e8:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   166ec:	0f b6       	in	r0, 0x3f	; 63
   166ee:	f8 94       	cli
   166f0:	de bf       	out	0x3e, r29	; 62
   166f2:	0f be       	out	0x3f, r0	; 63
   166f4:	cd bf       	out	0x3d, r28	; 61
   166f6:	89 81       	ldd	r24, Y+1	; 0x01
   166f8:	9a 81       	ldd	r25, Y+2	; 0x02
   166fa:	88 27       	eor	r24, r24
   166fc:	90 7d       	andi	r25, 0xD0	; 208
   166fe:	02 c0       	rjmp	.+4      	; 0x16704 <SS80_Transparent_State+0x21c>
   16700:	80 e0       	ldi	r24, 0x00	; 0
   16702:	90 e0       	ldi	r25, 0x00	; 0
   16704:	22 96       	adiw	r28, 0x02	; 2
   16706:	ea e0       	ldi	r30, 0x0A	; 10
   16708:	0c 94 37 e8 	jmp	0x1d06e	; 0x1d06e <__epilogue_restores__+0x10>

0001670c <SS80_error_return>:
   1670c:	a3 e0       	ldi	r26, 0x03	; 3
   1670e:	b0 e0       	ldi	r27, 0x00	; 0
   16710:	ec e8       	ldi	r30, 0x8C	; 140
   16712:	f3 eb       	ldi	r31, 0xB3	; 179
   16714:	0c 94 23 e8 	jmp	0x1d046	; 0x1d046 <__prologue_saves__+0x20>
   16718:	80 e0       	ldi	r24, 0x00	; 0
   1671a:	91 e0       	ldi	r25, 0x01	; 1
   1671c:	9a 83       	std	Y+2, r25	; 0x02
   1671e:	89 83       	std	Y+1, r24	; 0x01
   16720:	e0 91 7c 19 	lds	r30, 0x197C	; 0x80197c <SS80s>
   16724:	f0 91 7d 19 	lds	r31, 0x197D	; 0x80197d <SS80s+0x1>
   16728:	81 e0       	ldi	r24, 0x01	; 1
   1672a:	82 83       	std	Z+2, r24	; 0x02
   1672c:	8b 83       	std	Y+3, r24	; 0x03
   1672e:	ae 01       	movw	r20, r28
   16730:	4f 5f       	subi	r20, 0xFF	; 255
   16732:	5f 4f       	sbci	r21, 0xFF	; 255
   16734:	61 e0       	ldi	r22, 0x01	; 1
   16736:	70 e0       	ldi	r23, 0x00	; 0
   16738:	ce 01       	movw	r24, r28
   1673a:	03 96       	adiw	r24, 0x03	; 3
   1673c:	0e 94 40 8a 	call	0x11480	; 0x11480 <gpib_write_str>
   16740:	01 97       	sbiw	r24, 0x01	; 1
   16742:	99 f0       	breq	.+38     	; 0x1676a <SS80_error_return+0x5e>
   16744:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16748:	80 ff       	sbrs	r24, 0
   1674a:	0a c0       	rjmp	.+20     	; 0x16760 <SS80_error_return+0x54>
   1674c:	80 ea       	ldi	r24, 0xA0	; 160
   1674e:	91 e2       	ldi	r25, 0x21	; 33
   16750:	1f 92       	push	r1
   16752:	9f 93       	push	r25
   16754:	8f 93       	push	r24
   16756:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1675a:	0f 90       	pop	r0
   1675c:	0f 90       	pop	r0
   1675e:	0f 90       	pop	r0
   16760:	89 81       	ldd	r24, Y+1	; 0x01
   16762:	9a 81       	ldd	r25, Y+2	; 0x02
   16764:	88 27       	eor	r24, r24
   16766:	90 7d       	andi	r25, 0xD0	; 208
   16768:	07 c0       	rjmp	.+14     	; 0x16778 <SS80_error_return+0x6c>
   1676a:	e0 91 7c 19 	lds	r30, 0x197C	; 0x80197c <SS80s>
   1676e:	f0 91 7d 19 	lds	r31, 0x197D	; 0x80197d <SS80s+0x1>
   16772:	12 82       	std	Z+2, r1	; 0x02
   16774:	80 e0       	ldi	r24, 0x00	; 0
   16776:	90 e0       	ldi	r25, 0x00	; 0
   16778:	23 96       	adiw	r28, 0x03	; 3
   1677a:	e2 e0       	ldi	r30, 0x02	; 2
   1677c:	0c 94 3f e8 	jmp	0x1d07e	; 0x1d07e <__epilogue_restores__+0x20>

00016780 <SS80_locate_and_read>:
/// - Phases: Command, Report
/// @param[in] u: Unit
/// @return  0

int SS80_Channel_Independent_Clear( int u )
{
   16780:	ac e0       	ldi	r26, 0x0C	; 12
   16782:	b0 e0       	ldi	r27, 0x00	; 0
   16784:	e6 ec       	ldi	r30, 0xC6	; 198
   16786:	f3 eb       	ldi	r31, 0xB3	; 179
   16788:	0c 94 14 e8 	jmp	0x1d028	; 0x1d028 <__prologue_saves__+0x2>
   1678c:	e0 91 7c 19 	lds	r30, 0x197C	; 0x80197c <SS80s>
   16790:	f0 91 7d 19 	lds	r31, 0x197D	; 0x80197d <SS80s+0x1>
   16794:	27 81       	ldd	r18, Z+7	; 0x07
   16796:	30 85       	ldd	r19, Z+8	; 0x08
   16798:	41 85       	ldd	r20, Z+9	; 0x09
   1679a:	52 85       	ldd	r21, Z+10	; 0x0a
   1679c:	a0 91 7e 19 	lds	r26, 0x197E	; 0x80197e <SS80p>
   167a0:	b0 91 7f 19 	lds	r27, 0x197F	; 0x80197f <SS80p+0x1>
   167a4:	9f 96       	adiw	r26, 0x2f	; 47
   167a6:	0d 90       	ld	r0, X+
   167a8:	bc 91       	ld	r27, X
   167aa:	a0 2d       	mov	r26, r0
   167ac:	12 82       	std	Z+2, r1	; 0x02
   167ae:	1a 82       	std	Y+2, r1	; 0x02
   167b0:	19 82       	std	Y+1, r1	; 0x01
   167b2:	54 98       	cbi	0x0a, 4	; 10
   167b4:	4c 99       	sbic	0x09, 4	; 9
   167b6:	03 c0       	rjmp	.+6      	; 0x167be <SS80_locate_and_read+0x3e>
   167b8:	80 e0       	ldi	r24, 0x00	; 0
   167ba:	90 e1       	ldi	r25, 0x10	; 16
   167bc:	45 c1       	rjmp	.+650    	; 0x16a48 <SS80_locate_and_read+0x2c8>
   167be:	0e 94 f3 e7 	call	0x1cfe6	; 0x1cfe6 <__muluhisi3>
   167c2:	4b 01       	movw	r8, r22
   167c4:	5c 01       	movw	r10, r24
   167c6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   167ca:	85 ff       	sbrs	r24, 5
   167cc:	1c c0       	rjmp	.+56     	; 0x16806 <SS80_locate_and_read+0x86>
   167ce:	e0 91 7c 19 	lds	r30, 0x197C	; 0x80197c <SS80s>
   167d2:	f0 91 7d 19 	lds	r31, 0x197D	; 0x80197d <SS80s+0x1>
   167d6:	86 85       	ldd	r24, Z+14	; 0x0e
   167d8:	8f 93       	push	r24
   167da:	85 85       	ldd	r24, Z+13	; 0x0d
   167dc:	8f 93       	push	r24
   167de:	84 85       	ldd	r24, Z+12	; 0x0c
   167e0:	8f 93       	push	r24
   167e2:	83 85       	ldd	r24, Z+11	; 0x0b
   167e4:	8f 93       	push	r24
   167e6:	bf 92       	push	r11
   167e8:	af 92       	push	r10
   167ea:	9f 92       	push	r9
   167ec:	8f 92       	push	r8
   167ee:	84 e9       	ldi	r24, 0x94	; 148
   167f0:	98 e2       	ldi	r25, 0x28	; 40
   167f2:	1f 92       	push	r1
   167f4:	9f 93       	push	r25
   167f6:	8f 93       	push	r24
   167f8:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   167fc:	0f b6       	in	r0, 0x3f	; 63
   167fe:	f8 94       	cli
   16800:	de bf       	out	0x3e, r29	; 62
   16802:	0f be       	out	0x3f, r0	; 63
   16804:	cd bf       	out	0x3d, r28	; 61
   16806:	16 db       	rcall	.-2516   	; 0x15e34 <SS80_cmd_seek>
   16808:	89 2b       	or	r24, r25
   1680a:	09 f0       	breq	.+2      	; 0x1680e <SS80_locate_and_read+0x8e>
   1680c:	af c0       	rjmp	.+350    	; 0x1696c <SS80_locate_and_read+0x1ec>
   1680e:	e0 91 7c 19 	lds	r30, 0x197C	; 0x80197c <SS80s>
   16812:	f0 91 7d 19 	lds	r31, 0x197D	; 0x80197d <SS80s+0x1>
   16816:	43 84       	ldd	r4, Z+11	; 0x0b
   16818:	54 84       	ldd	r5, Z+12	; 0x0c
   1681a:	65 84       	ldd	r6, Z+13	; 0x0d
   1681c:	76 84       	ldd	r7, Z+14	; 0x0e
   1681e:	1b 82       	std	Y+3, r1	; 0x03
   16820:	1c 82       	std	Y+4, r1	; 0x04
   16822:	1d 82       	std	Y+5, r1	; 0x05
   16824:	1e 82       	std	Y+6, r1	; 0x06
   16826:	86 e7       	ldi	r24, 0x76	; 118
   16828:	98 e2       	ldi	r25, 0x28	; 40
   1682a:	9c 01       	movw	r18, r24
   1682c:	40 e0       	ldi	r20, 0x00	; 0
   1682e:	2f 83       	std	Y+7, r18	; 0x07
   16830:	38 87       	std	Y+8, r19	; 0x08
   16832:	49 87       	std	Y+9, r20	; 0x09
   16834:	33 24       	eor	r3, r3
   16836:	33 94       	inc	r3
   16838:	85 e4       	ldi	r24, 0x45	; 69
   1683a:	98 e2       	ldi	r25, 0x28	; 40
   1683c:	9c 01       	movw	r18, r24
   1683e:	40 e0       	ldi	r20, 0x00	; 0
   16840:	2a 87       	std	Y+10, r18	; 0x0a
   16842:	3b 87       	std	Y+11, r19	; 0x0b
   16844:	4c 87       	std	Y+12, r20	; 0x0c
   16846:	34 c0       	rjmp	.+104    	; 0x168b0 <SS80_locate_and_read+0x130>
   16848:	86 fd       	sbrc	r24, 6
   1684a:	0e 94 38 84 	call	0x10870	; 0x10870 <gpib_timer_elapsed_begin>
   1684e:	ae 01       	movw	r20, r28
   16850:	4f 5f       	subi	r20, 0xFF	; 255
   16852:	5f 4f       	sbci	r21, 0xFF	; 255
   16854:	b6 01       	movw	r22, r12
   16856:	89 ef       	ldi	r24, 0xF9	; 249
   16858:	9c e1       	ldi	r25, 0x1C	; 28
   1685a:	0e 94 40 8a 	call	0x11480	; 0x11480 <gpib_write_str>
   1685e:	8c 01       	movw	r16, r24
   16860:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16864:	86 ff       	sbrs	r24, 6
   16866:	04 c0       	rjmp	.+8      	; 0x16870 <SS80_locate_and_read+0xf0>
   16868:	82 e3       	ldi	r24, 0x32	; 50
   1686a:	90 e1       	ldi	r25, 0x10	; 16
   1686c:	0e 94 4a 84 	call	0x10894	; 0x10894 <gpib_timer_elapsed_end>
   16870:	c0 16       	cp	r12, r16
   16872:	d1 06       	cpc	r13, r17
   16874:	09 f0       	breq	.+2      	; 0x16878 <SS80_locate_and_read+0xf8>
   16876:	83 c0       	rjmp	.+262    	; 0x1697e <SS80_locate_and_read+0x1fe>
   16878:	0d 2c       	mov	r0, r13
   1687a:	00 0c       	add	r0, r0
   1687c:	ee 08       	sbc	r14, r14
   1687e:	ff 08       	sbc	r15, r15
   16880:	8c 0c       	add	r8, r12
   16882:	9d 1c       	adc	r9, r13
   16884:	ae 1c       	adc	r10, r14
   16886:	bf 1c       	adc	r11, r15
   16888:	01 2e       	mov	r0, r17
   1688a:	00 0c       	add	r0, r0
   1688c:	22 0b       	sbc	r18, r18
   1688e:	33 0b       	sbc	r19, r19
   16890:	8b 81       	ldd	r24, Y+3	; 0x03
   16892:	9c 81       	ldd	r25, Y+4	; 0x04
   16894:	ad 81       	ldd	r26, Y+5	; 0x05
   16896:	be 81       	ldd	r27, Y+6	; 0x06
   16898:	80 0f       	add	r24, r16
   1689a:	91 1f       	adc	r25, r17
   1689c:	a2 1f       	adc	r26, r18
   1689e:	b3 1f       	adc	r27, r19
   168a0:	8b 83       	std	Y+3, r24	; 0x03
   168a2:	9c 83       	std	Y+4, r25	; 0x04
   168a4:	ad 83       	std	Y+5, r26	; 0x05
   168a6:	be 83       	std	Y+6, r27	; 0x06
   168a8:	40 1a       	sub	r4, r16
   168aa:	51 0a       	sbc	r5, r17
   168ac:	62 0a       	sbc	r6, r18
   168ae:	73 0a       	sbc	r7, r19
   168b0:	41 14       	cp	r4, r1
   168b2:	51 04       	cpc	r5, r1
   168b4:	61 04       	cpc	r6, r1
   168b6:	71 04       	cpc	r7, r1
   168b8:	09 f4       	brne	.+2      	; 0x168bc <SS80_locate_and_read+0x13c>
   168ba:	93 c0       	rjmp	.+294    	; 0x169e2 <SS80_locate_and_read+0x262>
   168bc:	54 98       	cbi	0x0a, 4	; 10
   168be:	4c 9b       	sbis	0x09, 4	; 9
   168c0:	7b cf       	rjmp	.-266    	; 0x167b8 <SS80_locate_and_read+0x38>
   168c2:	31 e0       	ldi	r19, 0x01	; 1
   168c4:	43 16       	cp	r4, r19
   168c6:	53 06       	cpc	r5, r19
   168c8:	61 04       	cpc	r6, r1
   168ca:	71 04       	cpc	r7, r1
   168cc:	08 f4       	brcc	.+2      	; 0x168d0 <SS80_locate_and_read+0x150>
   168ce:	50 c0       	rjmp	.+160    	; 0x16970 <SS80_locate_and_read+0x1f0>
   168d0:	1a 82       	std	Y+2, r1	; 0x02
   168d2:	19 82       	std	Y+1, r1	; 0x01
   168d4:	c1 2c       	mov	r12, r1
   168d6:	dd 24       	eor	r13, r13
   168d8:	d3 94       	inc	r13
   168da:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   168de:	86 fd       	sbrc	r24, 6
   168e0:	0e 94 38 84 	call	0x10870	; 0x10870 <gpib_timer_elapsed_begin>
   168e4:	e0 90 7c 19 	lds	r14, 0x197C	; 0x80197c <SS80s>
   168e8:	f0 90 7d 19 	lds	r15, 0x197D	; 0x80197d <SS80s+0x1>
   168ec:	43 e0       	ldi	r20, 0x03	; 3
   168ee:	e4 0e       	add	r14, r20
   168f0:	f1 1c       	adc	r15, r1
   168f2:	80 91 7e 19 	lds	r24, 0x197E	; 0x80197e <SS80p>
   168f6:	90 91 7f 19 	lds	r25, 0x197F	; 0x80197f <SS80p+0x1>
   168fa:	86 01       	movw	r16, r12
   168fc:	29 ef       	ldi	r18, 0xF9	; 249
   168fe:	3c e1       	ldi	r19, 0x1C	; 28
   16900:	b5 01       	movw	r22, r10
   16902:	a4 01       	movw	r20, r8
   16904:	02 96       	adiw	r24, 0x02	; 2
   16906:	0e 94 8a 83 	call	0x10714	; 0x10714 <dbf_open_read>
   1690a:	8c 01       	movw	r16, r24
   1690c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16910:	86 ff       	sbrs	r24, 6
   16912:	04 c0       	rjmp	.+8      	; 0x1691c <SS80_locate_and_read+0x19c>
   16914:	88 e2       	ldi	r24, 0x28	; 40
   16916:	90 e1       	ldi	r25, 0x10	; 16
   16918:	0e 94 4a 84 	call	0x10894	; 0x10894 <gpib_timer_elapsed_end>
   1691c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16920:	85 ff       	sbrs	r24, 5
   16922:	0e c0       	rjmp	.+28     	; 0x16940 <SS80_locate_and_read+0x1c0>
   16924:	1f 93       	push	r17
   16926:	0f 93       	push	r16
   16928:	1f 92       	push	r1
   1692a:	88 85       	ldd	r24, Y+8	; 0x08
   1692c:	8f 93       	push	r24
   1692e:	9f 81       	ldd	r25, Y+7	; 0x07
   16930:	9f 93       	push	r25
   16932:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   16936:	0f 90       	pop	r0
   16938:	0f 90       	pop	r0
   1693a:	0f 90       	pop	r0
   1693c:	0f 90       	pop	r0
   1693e:	0f 90       	pop	r0
   16940:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16944:	17 ff       	sbrs	r17, 7
   16946:	80 cf       	rjmp	.-256    	; 0x16848 <SS80_locate_and_read+0xc8>
   16948:	e0 91 7c 19 	lds	r30, 0x197C	; 0x80197c <SS80s>
   1694c:	f0 91 7d 19 	lds	r31, 0x197D	; 0x80197d <SS80s+0x1>
   16950:	91 e0       	ldi	r25, 0x01	; 1
   16952:	92 83       	std	Z+2, r25	; 0x02
   16954:	80 ff       	sbrs	r24, 0
   16956:	0a c0       	rjmp	.+20     	; 0x1696c <SS80_locate_and_read+0x1ec>
   16958:	8e e5       	ldi	r24, 0x5E	; 94
   1695a:	98 e2       	ldi	r25, 0x28	; 40
   1695c:	1f 92       	push	r1
   1695e:	9f 93       	push	r25
   16960:	8f 93       	push	r24
   16962:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   16966:	0f 90       	pop	r0
   16968:	0f 90       	pop	r0
   1696a:	0f 90       	pop	r0
   1696c:	cf de       	rcall	.-610    	; 0x1670c <SS80_error_return>
   1696e:	6c c0       	rjmp	.+216    	; 0x16a48 <SS80_locate_and_read+0x2c8>
   16970:	62 01       	movw	r12, r4
   16972:	89 81       	ldd	r24, Y+1	; 0x01
   16974:	9a 81       	ldd	r25, Y+2	; 0x02
   16976:	91 60       	ori	r25, 0x01	; 1
   16978:	9a 83       	std	Y+2, r25	; 0x02
   1697a:	89 83       	std	Y+1, r24	; 0x01
   1697c:	ae cf       	rjmp	.-164    	; 0x168da <SS80_locate_and_read+0x15a>
   1697e:	e0 91 7c 19 	lds	r30, 0x197C	; 0x80197c <SS80s>
   16982:	f0 91 7d 19 	lds	r31, 0x197D	; 0x80197d <SS80s+0x1>
   16986:	32 82       	std	Z+2, r3	; 0x02
   16988:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1698c:	80 ff       	sbrs	r24, 0
   1698e:	0a c0       	rjmp	.+20     	; 0x169a4 <SS80_locate_and_read+0x224>
   16990:	1f 92       	push	r1
   16992:	ab 85       	ldd	r26, Y+11	; 0x0b
   16994:	af 93       	push	r26
   16996:	ba 85       	ldd	r27, Y+10	; 0x0a
   16998:	bf 93       	push	r27
   1699a:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1699e:	0f 90       	pop	r0
   169a0:	0f 90       	pop	r0
   169a2:	0f 90       	pop	r0
   169a4:	89 81       	ldd	r24, Y+1	; 0x01
   169a6:	9a 81       	ldd	r25, Y+2	; 0x02
   169a8:	88 27       	eor	r24, r24
   169aa:	90 7d       	andi	r25, 0xD0	; 208
   169ac:	89 2b       	or	r24, r25
   169ae:	09 f4       	brne	.+2      	; 0x169b2 <SS80_locate_and_read+0x232>
   169b0:	63 cf       	rjmp	.-314    	; 0x16878 <SS80_locate_and_read+0xf8>
   169b2:	e0 91 7c 19 	lds	r30, 0x197C	; 0x80197c <SS80s>
   169b6:	f0 91 7d 19 	lds	r31, 0x197D	; 0x80197d <SS80s+0x1>
   169ba:	83 81       	ldd	r24, Z+3	; 0x03
   169bc:	94 81       	ldd	r25, Z+4	; 0x04
   169be:	80 62       	ori	r24, 0x20	; 32
   169c0:	94 83       	std	Z+4, r25	; 0x04
   169c2:	83 83       	std	Z+3, r24	; 0x03
   169c4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   169c8:	80 ff       	sbrs	r24, 0
   169ca:	23 c0       	rjmp	.+70     	; 0x16a12 <SS80_locate_and_read+0x292>
   169cc:	80 e2       	ldi	r24, 0x20	; 32
   169ce:	98 e2       	ldi	r25, 0x28	; 40
   169d0:	1f 92       	push	r1
   169d2:	9f 93       	push	r25
   169d4:	8f 93       	push	r24
   169d6:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   169da:	0f 90       	pop	r0
   169dc:	0f 90       	pop	r0
   169de:	0f 90       	pop	r0
   169e0:	18 c0       	rjmp	.+48     	; 0x16a12 <SS80_locate_and_read+0x292>
   169e2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   169e6:	85 ff       	sbrs	r24, 5
   169e8:	14 c0       	rjmp	.+40     	; 0x16a12 <SS80_locate_and_read+0x292>
   169ea:	9e 81       	ldd	r25, Y+6	; 0x06
   169ec:	9f 93       	push	r25
   169ee:	ad 81       	ldd	r26, Y+5	; 0x05
   169f0:	af 93       	push	r26
   169f2:	bc 81       	ldd	r27, Y+4	; 0x04
   169f4:	bf 93       	push	r27
   169f6:	eb 81       	ldd	r30, Y+3	; 0x03
   169f8:	ef 93       	push	r30
   169fa:	88 ef       	ldi	r24, 0xF8	; 248
   169fc:	97 e2       	ldi	r25, 0x27	; 39
   169fe:	1f 92       	push	r1
   16a00:	9f 93       	push	r25
   16a02:	8f 93       	push	r24
   16a04:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   16a08:	0f b6       	in	r0, 0x3f	; 63
   16a0a:	f8 94       	cli
   16a0c:	de bf       	out	0x3e, r29	; 62
   16a0e:	0f be       	out	0x3f, r0	; 63
   16a10:	cd bf       	out	0x3d, r28	; 61
   16a12:	00 91 7c 19 	lds	r16, 0x197C	; 0x80197c <SS80s>
   16a16:	10 91 7d 19 	lds	r17, 0x197D	; 0x80197d <SS80s+0x1>
   16a1a:	e0 91 7e 19 	lds	r30, 0x197E	; 0x80197e <SS80p>
   16a1e:	f0 91 7f 19 	lds	r31, 0x197F	; 0x80197f <SS80p+0x1>
   16a22:	27 a5       	ldd	r18, Z+47	; 0x2f
   16a24:	30 a9       	ldd	r19, Z+48	; 0x30
   16a26:	40 e0       	ldi	r20, 0x00	; 0
   16a28:	50 e0       	ldi	r21, 0x00	; 0
   16a2a:	c5 01       	movw	r24, r10
   16a2c:	b4 01       	movw	r22, r8
   16a2e:	0e 94 91 e7 	call	0x1cf22	; 0x1cf22 <__udivmodsi4>
   16a32:	d8 01       	movw	r26, r16
   16a34:	17 96       	adiw	r26, 0x07	; 7
   16a36:	2d 93       	st	X+, r18
   16a38:	3d 93       	st	X+, r19
   16a3a:	4d 93       	st	X+, r20
   16a3c:	5c 93       	st	X, r21
   16a3e:	1a 97       	sbiw	r26, 0x0a	; 10
   16a40:	89 81       	ldd	r24, Y+1	; 0x01
   16a42:	9a 81       	ldd	r25, Y+2	; 0x02
   16a44:	88 27       	eor	r24, r24
   16a46:	90 7d       	andi	r25, 0xD0	; 208
   16a48:	2c 96       	adiw	r28, 0x0c	; 12
   16a4a:	e1 e1       	ldi	r30, 0x11	; 17
   16a4c:	0c 94 30 e8 	jmp	0x1d060	; 0x1d060 <__epilogue_restores__+0x2>

00016a50 <SS80_Execute_State>:
   16a50:	cf 93       	push	r28
   16a52:	df 93       	push	r29
   16a54:	e0 91 7e 19 	lds	r30, 0x197E	; 0x80197e <SS80p>
   16a58:	f0 91 7f 19 	lds	r31, 0x197F	; 0x80197f <SS80p+0x1>
   16a5c:	81 81       	ldd	r24, Z+1	; 0x01
   16a5e:	90 e0       	ldi	r25, 0x00	; 0
   16a60:	0e 94 21 85 	call	0x10a42	; 0x10a42 <gpib_disable_PPR>
   16a64:	e0 91 7c 19 	lds	r30, 0x197C	; 0x80197c <SS80s>
   16a68:	f0 91 7d 19 	lds	r31, 0x197D	; 0x80197d <SS80s+0x1>
   16a6c:	80 81       	ld	r24, Z
   16a6e:	91 81       	ldd	r25, Z+1	; 0x01
   16a70:	82 30       	cpi	r24, 0x02	; 2
   16a72:	91 05       	cpc	r25, r1
   16a74:	89 f0       	breq	.+34     	; 0x16a98 <SS80_Execute_State+0x48>
   16a76:	3c f4       	brge	.+14     	; 0x16a86 <SS80_Execute_State+0x36>
   16a78:	00 97       	sbiw	r24, 0x00	; 0
   16a7a:	91 f1       	breq	.+100    	; 0x16ae0 <SS80_Execute_State+0x90>
   16a7c:	81 30       	cpi	r24, 0x01	; 1
   16a7e:	91 05       	cpc	r25, r1
   16a80:	b9 f4       	brne	.+46     	; 0x16ab0 <SS80_Execute_State+0x60>
   16a82:	7e de       	rcall	.-772    	; 0x16780 <SS80_locate_and_read>
   16a84:	0d c0       	rjmp	.+26     	; 0x16aa0 <SS80_Execute_State+0x50>
   16a86:	83 30       	cpi	r24, 0x03	; 3
   16a88:	91 05       	cpc	r25, r1
   16a8a:	41 f0       	breq	.+16     	; 0x16a9c <SS80_Execute_State+0x4c>
   16a8c:	84 30       	cpi	r24, 0x04	; 4
   16a8e:	91 05       	cpc	r25, r1
   16a90:	79 f4       	brne	.+30     	; 0x16ab0 <SS80_Execute_State+0x60>
   16a92:	0e 94 f0 ab 	call	0x157e0	; 0x157e0 <SS80_describe>
   16a96:	04 c0       	rjmp	.+8      	; 0x16aa0 <SS80_Execute_State+0x50>
   16a98:	4e da       	rcall	.-2916   	; 0x15f36 <SS80_locate_and_write>
   16a9a:	02 c0       	rjmp	.+4      	; 0x16aa0 <SS80_Execute_State+0x50>
   16a9c:	0e 94 6f ab 	call	0x156de	; 0x156de <SS80_send_status>
   16aa0:	ec 01       	movw	r28, r24
   16aa2:	e0 91 7c 19 	lds	r30, 0x197C	; 0x80197c <SS80s>
   16aa6:	f0 91 7d 19 	lds	r31, 0x197D	; 0x80197d <SS80s+0x1>
   16aaa:	11 82       	std	Z+1, r1	; 0x01
   16aac:	10 82       	st	Z, r1
   16aae:	1a c0       	rjmp	.+52     	; 0x16ae4 <SS80_Execute_State+0x94>
   16ab0:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   16ab4:	20 ff       	sbrs	r18, 0
   16ab6:	0e c0       	rjmp	.+28     	; 0x16ad4 <SS80_Execute_State+0x84>
   16ab8:	9f 93       	push	r25
   16aba:	8f 93       	push	r24
   16abc:	8c eb       	ldi	r24, 0xBC	; 188
   16abe:	98 e2       	ldi	r25, 0x28	; 40
   16ac0:	1f 92       	push	r1
   16ac2:	9f 93       	push	r25
   16ac4:	8f 93       	push	r24
   16ac6:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   16aca:	0f 90       	pop	r0
   16acc:	0f 90       	pop	r0
   16ace:	0f 90       	pop	r0
   16ad0:	0f 90       	pop	r0
   16ad2:	0f 90       	pop	r0
   16ad4:	e0 91 7c 19 	lds	r30, 0x197C	; 0x80197c <SS80s>
   16ad8:	f0 91 7d 19 	lds	r31, 0x197D	; 0x80197d <SS80s+0x1>
   16adc:	11 82       	std	Z+1, r1	; 0x01
   16ade:	10 82       	st	Z, r1
   16ae0:	c0 e0       	ldi	r28, 0x00	; 0
   16ae2:	d0 e0       	ldi	r29, 0x00	; 0
   16ae4:	e0 91 7e 19 	lds	r30, 0x197E	; 0x80197e <SS80p>
   16ae8:	f0 91 7f 19 	lds	r31, 0x197F	; 0x80197f <SS80p+0x1>
   16aec:	81 81       	ldd	r24, Z+1	; 0x01
   16aee:	90 e0       	ldi	r25, 0x00	; 0
   16af0:	0e 94 f0 84 	call	0x109e0	; 0x109e0 <gpib_enable_PPR>
   16af4:	ce 01       	movw	r24, r28
   16af6:	df 91       	pop	r29
   16af8:	cf 91       	pop	r28
   16afa:	08 95       	ret

00016afc <SS80_COMMANDS>:
   16afc:	1f 93       	push	r17
   16afe:	cf 93       	push	r28
   16b00:	df 93       	push	r29
   16b02:	18 2f       	mov	r17, r24
   16b04:	80 91 fd 1e 	lds	r24, 0x1EFD	; 0x801efd <talking>
   16b08:	90 e0       	ldi	r25, 0x00	; 0
   16b0a:	0e 94 0e 8b 	call	0x1161c	; 0x1161c <SS80_is_MTA>
   16b0e:	89 2b       	or	r24, r25
   16b10:	19 f0       	breq	.+6      	; 0x16b18 <SS80_COMMANDS+0x1c>
   16b12:	15 36       	cpi	r17, 0x65	; 101
   16b14:	19 f5       	brne	.+70     	; 0x16b5c <SS80_COMMANDS+0x60>
   16b16:	09 c0       	rjmp	.+18     	; 0x16b2a <SS80_COMMANDS+0x2e>
   16b18:	80 91 ff 1e 	lds	r24, 0x1EFF	; 0x801eff <listening>
   16b1c:	90 e0       	ldi	r25, 0x00	; 0
   16b1e:	0e 94 fd 8a 	call	0x115fa	; 0x115fa <SS80_is_MLA>
   16b22:	ec 01       	movw	r28, r24
   16b24:	89 2b       	or	r24, r25
   16b26:	a9 f7       	brne	.-22     	; 0x16b12 <SS80_COMMANDS+0x16>
   16b28:	ae c0       	rjmp	.+348    	; 0x16c86 <SS80_COMMANDS+0x18a>
   16b2a:	80 91 ff 1e 	lds	r24, 0x1EFF	; 0x801eff <listening>
   16b2e:	90 e0       	ldi	r25, 0x00	; 0
   16b30:	0e 94 fd 8a 	call	0x115fa	; 0x115fa <SS80_is_MLA>
   16b34:	89 2b       	or	r24, r25
   16b36:	09 f4       	brne	.+2      	; 0x16b3a <SS80_COMMANDS+0x3e>
   16b38:	a3 c0       	rjmp	.+326    	; 0x16c80 <SS80_COMMANDS+0x184>
   16b3a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16b3e:	85 ff       	sbrs	r24, 5
   16b40:	0a c0       	rjmp	.+20     	; 0x16b56 <SS80_COMMANDS+0x5a>
   16b42:	8a e8       	ldi	r24, 0x8A	; 138
   16b44:	91 e2       	ldi	r25, 0x21	; 33
   16b46:	1f 92       	push	r1
   16b48:	9f 93       	push	r25
   16b4a:	8f 93       	push	r24
   16b4c:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   16b50:	0f 90       	pop	r0
   16b52:	0f 90       	pop	r0
   16b54:	0f 90       	pop	r0
   16b56:	0e 94 a2 ac 	call	0x15944	; 0x15944 <SS80_Command_State>
   16b5a:	73 c0       	rjmp	.+230    	; 0x16c42 <SS80_COMMANDS+0x146>
   16b5c:	1e 36       	cpi	r17, 0x6E	; 110
   16b5e:	01 f5       	brne	.+64     	; 0x16ba0 <SS80_COMMANDS+0xa4>
   16b60:	80 91 ff 1e 	lds	r24, 0x1EFF	; 0x801eff <listening>
   16b64:	90 e0       	ldi	r25, 0x00	; 0
   16b66:	0e 94 fd 8a 	call	0x115fa	; 0x115fa <SS80_is_MLA>
   16b6a:	89 2b       	or	r24, r25
   16b6c:	79 f0       	breq	.+30     	; 0x16b8c <SS80_COMMANDS+0x90>
   16b6e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16b72:	85 ff       	sbrs	r24, 5
   16b74:	13 c0       	rjmp	.+38     	; 0x16b9c <SS80_COMMANDS+0xa0>
   16b76:	84 e7       	ldi	r24, 0x74	; 116
   16b78:	91 e2       	ldi	r25, 0x21	; 33
   16b7a:	1f 92       	push	r1
   16b7c:	9f 93       	push	r25
   16b7e:	8f 93       	push	r24
   16b80:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   16b84:	0f 90       	pop	r0
   16b86:	0f 90       	pop	r0
   16b88:	0f 90       	pop	r0
   16b8a:	08 c0       	rjmp	.+16     	; 0x16b9c <SS80_COMMANDS+0xa0>
   16b8c:	80 91 fd 1e 	lds	r24, 0x1EFD	; 0x801efd <talking>
   16b90:	90 e0       	ldi	r25, 0x00	; 0
   16b92:	0e 94 0e 8b 	call	0x1161c	; 0x1161c <SS80_is_MTA>
   16b96:	89 2b       	or	r24, r25
   16b98:	51 f7       	brne	.-44     	; 0x16b6e <SS80_COMMANDS+0x72>
   16b9a:	72 c0       	rjmp	.+228    	; 0x16c80 <SS80_COMMANDS+0x184>
   16b9c:	59 df       	rcall	.-334    	; 0x16a50 <SS80_Execute_State>
   16b9e:	51 c0       	rjmp	.+162    	; 0x16c42 <SS80_COMMANDS+0x146>
   16ba0:	10 37       	cpi	r17, 0x70	; 112
   16ba2:	b9 f5       	brne	.+110    	; 0x16c12 <SS80_COMMANDS+0x116>
   16ba4:	80 91 fd 1e 	lds	r24, 0x1EFD	; 0x801efd <talking>
   16ba8:	90 e0       	ldi	r25, 0x00	; 0
   16baa:	0e 94 0e 8b 	call	0x1161c	; 0x1161c <SS80_is_MTA>
   16bae:	89 2b       	or	r24, r25
   16bb0:	81 f0       	breq	.+32     	; 0x16bd2 <SS80_COMMANDS+0xd6>
   16bb2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16bb6:	85 ff       	sbrs	r24, 5
   16bb8:	0a c0       	rjmp	.+20     	; 0x16bce <SS80_COMMANDS+0xd2>
   16bba:	8f e5       	ldi	r24, 0x5F	; 95
   16bbc:	91 e2       	ldi	r25, 0x21	; 33
   16bbe:	1f 92       	push	r1
   16bc0:	9f 93       	push	r25
   16bc2:	8f 93       	push	r24
   16bc4:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   16bc8:	0f 90       	pop	r0
   16bca:	0f 90       	pop	r0
   16bcc:	0f 90       	pop	r0
   16bce:	4a db       	rcall	.-2412   	; 0x16264 <SS80_Report>
   16bd0:	38 c0       	rjmp	.+112    	; 0x16c42 <SS80_COMMANDS+0x146>
   16bd2:	80 91 ff 1e 	lds	r24, 0x1EFF	; 0x801eff <listening>
   16bd6:	90 e0       	ldi	r25, 0x00	; 0
   16bd8:	0e 94 fd 8a 	call	0x115fa	; 0x115fa <SS80_is_MLA>
   16bdc:	89 2b       	or	r24, r25
   16bde:	09 f4       	brne	.+2      	; 0x16be2 <SS80_COMMANDS+0xe6>
   16be0:	4f c0       	rjmp	.+158    	; 0x16c80 <SS80_COMMANDS+0x184>
   16be2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16be6:	85 ff       	sbrs	r24, 5
   16be8:	0a c0       	rjmp	.+20     	; 0x16bfe <SS80_COMMANDS+0x102>
   16bea:	80 e5       	ldi	r24, 0x50	; 80
   16bec:	91 e2       	ldi	r25, 0x21	; 33
   16bee:	1f 92       	push	r1
   16bf0:	9f 93       	push	r25
   16bf2:	8f 93       	push	r24
   16bf4:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   16bf8:	0f 90       	pop	r0
   16bfa:	0f 90       	pop	r0
   16bfc:	0f 90       	pop	r0
   16bfe:	e0 91 7e 19 	lds	r30, 0x197E	; 0x80197e <SS80p>
   16c02:	f0 91 7f 19 	lds	r31, 0x197F	; 0x80197f <SS80p+0x1>
   16c06:	81 81       	ldd	r24, Z+1	; 0x01
   16c08:	90 e0       	ldi	r25, 0x00	; 0
   16c0a:	0e 94 21 85 	call	0x10a42	; 0x10a42 <gpib_disable_PPR>
   16c0e:	18 dc       	rcall	.-2000   	; 0x16440 <SS80_Amigo_Clear>
   16c10:	18 c0       	rjmp	.+48     	; 0x16c42 <SS80_COMMANDS+0x146>
   16c12:	12 37       	cpi	r17, 0x72	; 114
   16c14:	c1 f4       	brne	.+48     	; 0x16c46 <SS80_COMMANDS+0x14a>
   16c16:	80 91 ff 1e 	lds	r24, 0x1EFF	; 0x801eff <listening>
   16c1a:	90 e0       	ldi	r25, 0x00	; 0
   16c1c:	0e 94 fd 8a 	call	0x115fa	; 0x115fa <SS80_is_MLA>
   16c20:	89 2b       	or	r24, r25
   16c22:	89 f0       	breq	.+34     	; 0x16c46 <SS80_COMMANDS+0x14a>
   16c24:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16c28:	85 ff       	sbrs	r24, 5
   16c2a:	0a c0       	rjmp	.+20     	; 0x16c40 <SS80_COMMANDS+0x144>
   16c2c:	8c e3       	ldi	r24, 0x3C	; 60
   16c2e:	91 e2       	ldi	r25, 0x21	; 33
   16c30:	1f 92       	push	r1
   16c32:	9f 93       	push	r25
   16c34:	8f 93       	push	r24
   16c36:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   16c3a:	0f 90       	pop	r0
   16c3c:	0f 90       	pop	r0
   16c3e:	0f 90       	pop	r0
   16c40:	53 dc       	rcall	.-1882   	; 0x164e8 <SS80_Transparent_State>
   16c42:	ec 01       	movw	r28, r24
   16c44:	3d c0       	rjmp	.+122    	; 0x16cc0 <SS80_COMMANDS+0x1c4>
   16c46:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16c4a:	80 ff       	sbrs	r24, 0
   16c4c:	19 c0       	rjmp	.+50     	; 0x16c80 <SS80_COMMANDS+0x184>
   16c4e:	80 91 fd 1e 	lds	r24, 0x1EFD	; 0x801efd <talking>
   16c52:	1f 92       	push	r1
   16c54:	8f 93       	push	r24
   16c56:	80 91 ff 1e 	lds	r24, 0x1EFF	; 0x801eff <listening>
   16c5a:	1f 92       	push	r1
   16c5c:	8f 93       	push	r24
   16c5e:	1f 92       	push	r1
   16c60:	1f 93       	push	r17
   16c62:	88 e0       	ldi	r24, 0x08	; 8
   16c64:	91 e2       	ldi	r25, 0x21	; 33
   16c66:	1f 92       	push	r1
   16c68:	9f 93       	push	r25
   16c6a:	8f 93       	push	r24
   16c6c:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   16c70:	8d b7       	in	r24, 0x3d	; 61
   16c72:	9e b7       	in	r25, 0x3e	; 62
   16c74:	09 96       	adiw	r24, 0x09	; 9
   16c76:	0f b6       	in	r0, 0x3f	; 63
   16c78:	f8 94       	cli
   16c7a:	9e bf       	out	0x3e, r25	; 62
   16c7c:	0f be       	out	0x3f, r0	; 63
   16c7e:	8d bf       	out	0x3d, r24	; 61
   16c80:	c0 e0       	ldi	r28, 0x00	; 0
   16c82:	d0 e0       	ldi	r29, 0x00	; 0
   16c84:	1d c0       	rjmp	.+58     	; 0x16cc0 <SS80_COMMANDS+0x1c4>
   16c86:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16c8a:	80 ff       	sbrs	r24, 0
   16c8c:	f9 cf       	rjmp	.-14     	; 0x16c80 <SS80_COMMANDS+0x184>
   16c8e:	80 91 fd 1e 	lds	r24, 0x1EFD	; 0x801efd <talking>
   16c92:	1f 92       	push	r1
   16c94:	8f 93       	push	r24
   16c96:	80 91 ff 1e 	lds	r24, 0x1EFF	; 0x801eff <listening>
   16c9a:	1f 92       	push	r1
   16c9c:	8f 93       	push	r24
   16c9e:	1f 92       	push	r1
   16ca0:	1f 93       	push	r17
   16ca2:	84 ed       	ldi	r24, 0xD4	; 212
   16ca4:	90 e2       	ldi	r25, 0x20	; 32
   16ca6:	1f 92       	push	r1
   16ca8:	9f 93       	push	r25
   16caa:	8f 93       	push	r24
   16cac:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   16cb0:	8d b7       	in	r24, 0x3d	; 61
   16cb2:	9e b7       	in	r25, 0x3e	; 62
   16cb4:	09 96       	adiw	r24, 0x09	; 9
   16cb6:	0f b6       	in	r0, 0x3f	; 63
   16cb8:	f8 94       	cli
   16cba:	9e bf       	out	0x3e, r25	; 62
   16cbc:	0f be       	out	0x3f, r0	; 63
   16cbe:	8d bf       	out	0x3d, r24	; 61
   16cc0:	ce 01       	movw	r24, r28
   16cc2:	df 91       	pop	r29
   16cc4:	cf 91       	pop	r28
   16cc6:	1f 91       	pop	r17
   16cc8:	08 95       	ret

00016cca <amigo_overflow_check>:
   16cca:	cf 92       	push	r12
   16ccc:	df 92       	push	r13
   16cce:	ef 92       	push	r14
   16cd0:	0f 93       	push	r16
   16cd2:	1f 93       	push	r17
   16cd4:	cf 93       	push	r28
   16cd6:	df 93       	push	r29
   16cd8:	ec 01       	movw	r28, r24
   16cda:	8b 01       	movw	r16, r22
   16cdc:	80 e0       	ldi	r24, 0x00	; 0
   16cde:	90 e0       	ldi	r25, 0x00	; 0
   16ce0:	2b ea       	ldi	r18, 0xAB	; 171
   16ce2:	30 e3       	ldi	r19, 0x30	; 48
   16ce4:	69 01       	movw	r12, r18
   16ce6:	2d 81       	ldd	r18, Y+5	; 0x05
   16ce8:	30 e0       	ldi	r19, 0x00	; 0
   16cea:	e0 91 7a 19 	lds	r30, 0x197A	; 0x80197a <AMIGOp>
   16cee:	f0 91 7b 19 	lds	r31, 0x197B	; 0x80197b <AMIGOp+0x1>
   16cf2:	47 a1       	ldd	r20, Z+39	; 0x27
   16cf4:	50 a5       	ldd	r21, Z+40	; 0x28
   16cf6:	24 17       	cp	r18, r20
   16cf8:	35 07       	cpc	r19, r21
   16cfa:	7c f1       	brlt	.+94     	; 0x16d5a <amigo_overflow_check+0x90>
   16cfc:	1d 82       	std	Y+5, r1	; 0x05
   16cfe:	2c 81       	ldd	r18, Y+4	; 0x04
   16d00:	2f 5f       	subi	r18, 0xFF	; 255
   16d02:	2c 83       	std	Y+4, r18	; 0x04
   16d04:	e0 91 7a 19 	lds	r30, 0x197A	; 0x80197a <AMIGOp>
   16d08:	f0 91 7b 19 	lds	r31, 0x197B	; 0x80197b <AMIGOp+0x1>
   16d0c:	2c 81       	ldd	r18, Y+4	; 0x04
   16d0e:	30 e0       	ldi	r19, 0x00	; 0
   16d10:	41 a5       	ldd	r20, Z+41	; 0x29
   16d12:	52 a5       	ldd	r21, Z+42	; 0x2a
   16d14:	24 17       	cp	r18, r20
   16d16:	35 07       	cpc	r19, r21
   16d18:	34 f3       	brlt	.-52     	; 0x16ce6 <amigo_overflow_check+0x1c>
   16d1a:	1c 82       	std	Y+4, r1	; 0x04
   16d1c:	2b 81       	ldd	r18, Y+3	; 0x03
   16d1e:	2f 5f       	subi	r18, 0xFF	; 255
   16d20:	2b 83       	std	Y+3, r18	; 0x03
   16d22:	30 e0       	ldi	r19, 0x00	; 0
   16d24:	43 a5       	ldd	r20, Z+43	; 0x2b
   16d26:	54 a5       	ldd	r21, Z+44	; 0x2c
   16d28:	24 17       	cp	r18, r20
   16d2a:	35 07       	cpc	r19, r21
   16d2c:	5c f3       	brlt	.-42     	; 0x16d04 <amigo_overflow_check+0x3a>
   16d2e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16d32:	80 ff       	sbrs	r24, 0
   16d34:	0f c0       	rjmp	.+30     	; 0x16d54 <amigo_overflow_check+0x8a>
   16d36:	01 15       	cp	r16, r1
   16d38:	11 05       	cpc	r17, r1
   16d3a:	61 f0       	breq	.+24     	; 0x16d54 <amigo_overflow_check+0x8a>
   16d3c:	1f 93       	push	r17
   16d3e:	0f 93       	push	r16
   16d40:	1f 92       	push	r1
   16d42:	df 92       	push	r13
   16d44:	cf 92       	push	r12
   16d46:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   16d4a:	0f 90       	pop	r0
   16d4c:	0f 90       	pop	r0
   16d4e:	0f 90       	pop	r0
   16d50:	0f 90       	pop	r0
   16d52:	0f 90       	pop	r0
   16d54:	81 e0       	ldi	r24, 0x01	; 1
   16d56:	90 e0       	ldi	r25, 0x00	; 0
   16d58:	d5 cf       	rjmp	.-86     	; 0x16d04 <amigo_overflow_check+0x3a>
   16d5a:	df 91       	pop	r29
   16d5c:	cf 91       	pop	r28
   16d5e:	1f 91       	pop	r17
   16d60:	0f 91       	pop	r16
   16d62:	ef 90       	pop	r14
   16d64:	df 90       	pop	r13
   16d66:	cf 90       	pop	r12
   16d68:	08 95       	ret

00016d6a <amigo_chs_to_logical>:
   16d6a:	a0 e0       	ldi	r26, 0x00	; 0
   16d6c:	b0 e0       	ldi	r27, 0x00	; 0
   16d6e:	eb eb       	ldi	r30, 0xBB	; 187
   16d70:	f6 eb       	ldi	r31, 0xB6	; 182
   16d72:	0c 94 1c e8 	jmp	0x1d038	; 0x1d038 <__prologue_saves__+0x12>
   16d76:	dc 01       	movw	r26, r24
   16d78:	d6 2f       	mov	r29, r22
   16d7a:	17 2f       	mov	r17, r23
   16d7c:	e0 91 7a 19 	lds	r30, 0x197A	; 0x80197a <AMIGOp>
   16d80:	f0 91 7b 19 	lds	r31, 0x197B	; 0x80197b <AMIGOp+0x1>
   16d84:	87 a1       	ldd	r24, Z+39	; 0x27
   16d86:	90 a5       	ldd	r25, Z+40	; 0x28
   16d88:	14 96       	adiw	r26, 0x04	; 4
   16d8a:	cc 91       	ld	r28, X
   16d8c:	14 97       	sbiw	r26, 0x04	; 4
   16d8e:	c8 9f       	mul	r28, r24
   16d90:	90 01       	movw	r18, r0
   16d92:	c9 9f       	mul	r28, r25
   16d94:	30 0d       	add	r19, r0
   16d96:	11 24       	eor	r1, r1
   16d98:	a9 01       	movw	r20, r18
   16d9a:	33 0f       	add	r19, r19
   16d9c:	66 0b       	sbc	r22, r22
   16d9e:	77 0b       	sbc	r23, r23
   16da0:	13 96       	adiw	r26, 0x03	; 3
   16da2:	0c 91       	ld	r16, X
   16da4:	13 97       	sbiw	r26, 0x03	; 3
   16da6:	21 a5       	ldd	r18, Z+41	; 0x29
   16da8:	32 a5       	ldd	r19, Z+42	; 0x2a
   16daa:	82 9f       	mul	r24, r18
   16dac:	70 01       	movw	r14, r0
   16dae:	83 9f       	mul	r24, r19
   16db0:	f0 0c       	add	r15, r0
   16db2:	92 9f       	mul	r25, r18
   16db4:	f0 0c       	add	r15, r0
   16db6:	11 24       	eor	r1, r1
   16db8:	0e 9d       	mul	r16, r14
   16dba:	90 01       	movw	r18, r0
   16dbc:	0f 9d       	mul	r16, r15
   16dbe:	30 0d       	add	r19, r0
   16dc0:	11 24       	eor	r1, r1
   16dc2:	69 01       	movw	r12, r18
   16dc4:	33 0f       	add	r19, r19
   16dc6:	ee 08       	sbc	r14, r14
   16dc8:	ff 08       	sbc	r15, r15
   16dca:	4c 0d       	add	r20, r12
   16dcc:	5d 1d       	adc	r21, r13
   16dce:	6e 1d       	adc	r22, r14
   16dd0:	7f 1d       	adc	r23, r15
   16dd2:	15 96       	adiw	r26, 0x05	; 5
   16dd4:	bc 90       	ld	r11, X
   16dd6:	9a 01       	movw	r18, r20
   16dd8:	ab 01       	movw	r20, r22
   16dda:	2b 0d       	add	r18, r11
   16ddc:	31 1d       	adc	r19, r1
   16dde:	41 1d       	adc	r20, r1
   16de0:	51 1d       	adc	r21, r1
   16de2:	a5 a1       	ldd	r26, Z+37	; 0x25
   16de4:	b6 a1       	ldd	r27, Z+38	; 0x26
   16de6:	0e 94 fd e7 	call	0x1cffa	; 0x1cffa <__mulshisi3>
   16dea:	6b 01       	movw	r12, r22
   16dec:	7c 01       	movw	r14, r24
   16dee:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16df2:	85 ff       	sbrs	r24, 5
   16df4:	22 c0       	rjmp	.+68     	; 0x16e3a <amigo_chs_to_logical+0xd0>
   16df6:	1f 92       	push	r1
   16df8:	bf 92       	push	r11
   16dfa:	1f 92       	push	r1
   16dfc:	cf 93       	push	r28
   16dfe:	1f 92       	push	r1
   16e00:	0f 93       	push	r16
   16e02:	e0 91 78 19 	lds	r30, 0x1978	; 0x801978 <AMIGOs>
   16e06:	f0 91 79 19 	lds	r31, 0x1979	; 0x801979 <AMIGOs+0x1>
   16e0a:	81 81       	ldd	r24, Z+1	; 0x01
   16e0c:	1f 92       	push	r1
   16e0e:	8f 93       	push	r24
   16e10:	ff 92       	push	r15
   16e12:	ef 92       	push	r14
   16e14:	df 92       	push	r13
   16e16:	cf 92       	push	r12
   16e18:	1f 93       	push	r17
   16e1a:	df 93       	push	r29
   16e1c:	88 e5       	ldi	r24, 0x58	; 88
   16e1e:	90 e3       	ldi	r25, 0x30	; 48
   16e20:	1f 92       	push	r1
   16e22:	9f 93       	push	r25
   16e24:	8f 93       	push	r24
   16e26:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   16e2a:	8d b7       	in	r24, 0x3d	; 61
   16e2c:	9e b7       	in	r25, 0x3e	; 62
   16e2e:	41 96       	adiw	r24, 0x11	; 17
   16e30:	0f b6       	in	r0, 0x3f	; 63
   16e32:	f8 94       	cli
   16e34:	9e bf       	out	0x3e, r25	; 62
   16e36:	0f be       	out	0x3f, r0	; 63
   16e38:	8d bf       	out	0x3d, r24	; 61
   16e3a:	b6 01       	movw	r22, r12
   16e3c:	c7 01       	movw	r24, r14
   16e3e:	cd b7       	in	r28, 0x3d	; 61
   16e40:	de b7       	in	r29, 0x3e	; 62
   16e42:	e9 e0       	ldi	r30, 0x09	; 9
   16e44:	0c 94 38 e8 	jmp	0x1d070	; 0x1d070 <__epilogue_restores__+0x12>

00016e48 <amigo_init>:
   16e48:	ef 92       	push	r14
   16e4a:	ff 92       	push	r15
   16e4c:	0f 93       	push	r16
   16e4e:	1f 93       	push	r17
   16e50:	cf 93       	push	r28
   16e52:	df 93       	push	r29
   16e54:	0c ed       	ldi	r16, 0xDC	; 220
   16e56:	10 e2       	ldi	r17, 0x20	; 32
   16e58:	cb e0       	ldi	r28, 0x0B	; 11
   16e5a:	d0 e0       	ldi	r29, 0x00	; 0
   16e5c:	84 e0       	ldi	r24, 0x04	; 4
   16e5e:	f8 2e       	mov	r15, r24
   16e60:	92 e0       	ldi	r25, 0x02	; 2
   16e62:	e9 2e       	mov	r14, r25
   16e64:	d8 01       	movw	r26, r16
   16e66:	8c 91       	ld	r24, X
   16e68:	81 30       	cpi	r24, 0x01	; 1
   16e6a:	31 f5       	brne	.+76     	; 0x16eb8 <amigo_init+0x70>
   16e6c:	ce 01       	movw	r24, r28
   16e6e:	0e 94 02 94 	call	0x12804	; 0x12804 <set_active_device>
   16e72:	e0 91 78 19 	lds	r30, 0x1978	; 0x801978 <AMIGOs>
   16e76:	f0 91 79 19 	lds	r31, 0x1979	; 0x801979 <AMIGOs+0x1>
   16e7a:	10 82       	st	Z, r1
   16e7c:	9f 01       	movw	r18, r30
   16e7e:	27 5f       	subi	r18, 0xF7	; 247
   16e80:	3f 4f       	sbci	r19, 0xFF	; 255
   16e82:	d9 01       	movw	r26, r18
   16e84:	8f 2d       	mov	r24, r15
   16e86:	1d 92       	st	X+, r1
   16e88:	8a 95       	dec	r24
   16e8a:	e9 f7       	brne	.-6      	; 0x16e86 <amigo_init+0x3e>
   16e8c:	2c 5f       	subi	r18, 0xFC	; 252
   16e8e:	3f 4f       	sbci	r19, 0xFF	; 255
   16e90:	d9 01       	movw	r26, r18
   16e92:	8f 2d       	mov	r24, r15
   16e94:	1d 92       	st	X+, r1
   16e96:	8a 95       	dec	r24
   16e98:	e9 f7       	brne	.-6      	; 0x16e94 <amigo_init+0x4c>
   16e9a:	11 82       	std	Z+1, r1	; 0x01
   16e9c:	15 82       	std	Z+5, r1	; 0x05
   16e9e:	14 82       	std	Z+4, r1	; 0x04
   16ea0:	13 82       	std	Z+3, r1	; 0x03
   16ea2:	e6 82       	std	Z+6, r14	; 0x06
   16ea4:	10 86       	std	Z+8, r1	; 0x08
   16ea6:	17 82       	std	Z+7, r1	; 0x07
   16ea8:	e0 91 7a 19 	lds	r30, 0x197A	; 0x80197a <AMIGOp>
   16eac:	f0 91 7b 19 	lds	r31, 0x197B	; 0x80197b <AMIGOp+0x1>
   16eb0:	81 81       	ldd	r24, Z+1	; 0x01
   16eb2:	90 e0       	ldi	r25, 0x00	; 0
   16eb4:	0e 94 21 85 	call	0x10a42	; 0x10a42 <gpib_disable_PPR>
   16eb8:	21 97       	sbiw	r28, 0x01	; 1
   16eba:	0b 52       	subi	r16, 0x2B	; 43
   16ebc:	11 09       	sbc	r17, r1
   16ebe:	cf 3f       	cpi	r28, 0xFF	; 255
   16ec0:	af ef       	ldi	r26, 0xFF	; 255
   16ec2:	da 07       	cpc	r29, r26
   16ec4:	79 f6       	brne	.-98     	; 0x16e64 <amigo_init+0x1c>
   16ec6:	cd b7       	in	r28, 0x3d	; 61
   16ec8:	de b7       	in	r29, 0x3e	; 62
   16eca:	e6 e0       	ldi	r30, 0x06	; 6
   16ecc:	0c 94 3b e8 	jmp	0x1d076	; 0x1d076 <__epilogue_restores__+0x18>

00016ed0 <amigo_request_logical_address>:
   16ed0:	e0 91 78 19 	lds	r30, 0x1978	; 0x801978 <AMIGOs>
   16ed4:	f0 91 79 19 	lds	r31, 0x1979	; 0x801979 <AMIGOs+0x1>
   16ed8:	15 86       	std	Z+13, r1	; 0x0d
   16eda:	83 81       	ldd	r24, Z+3	; 0x03
   16edc:	86 87       	std	Z+14, r24	; 0x0e
   16ede:	84 81       	ldd	r24, Z+4	; 0x04
   16ee0:	87 87       	std	Z+15, r24	; 0x0f
   16ee2:	85 81       	ldd	r24, Z+5	; 0x05
   16ee4:	80 8b       	std	Z+16, r24	; 0x10
   16ee6:	80 e0       	ldi	r24, 0x00	; 0
   16ee8:	90 e0       	ldi	r25, 0x00	; 0
   16eea:	08 95       	ret

00016eec <amigo_request_status>:
   16eec:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16ef0:	85 ff       	sbrs	r24, 5
   16ef2:	0a c0       	rjmp	.+20     	; 0x16f08 <amigo_request_status+0x1c>
   16ef4:	8b e2       	ldi	r24, 0x2B	; 43
   16ef6:	91 e3       	ldi	r25, 0x31	; 49
   16ef8:	1f 92       	push	r1
   16efa:	9f 93       	push	r25
   16efc:	8f 93       	push	r24
   16efe:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   16f02:	0f 90       	pop	r0
   16f04:	0f 90       	pop	r0
   16f06:	0f 90       	pop	r0
   16f08:	e0 91 78 19 	lds	r30, 0x1978	; 0x801978 <AMIGOs>
   16f0c:	f0 91 79 19 	lds	r31, 0x1979	; 0x801979 <AMIGOs+0x1>
   16f10:	11 86       	std	Z+9, r1	; 0x09
   16f12:	81 81       	ldd	r24, Z+1	; 0x01
   16f14:	82 87       	std	Z+10, r24	; 0x0a
   16f16:	8d e0       	ldi	r24, 0x0D	; 13
   16f18:	83 87       	std	Z+11, r24	; 0x0b
   16f1a:	14 86       	std	Z+12, r1	; 0x0c
   16f1c:	0e 94 99 6f 	call	0xdf32	; 0xdf32 <mmc_wp_status>
   16f20:	e0 91 78 19 	lds	r30, 0x1978	; 0x801978 <AMIGOs>
   16f24:	f0 91 79 19 	lds	r31, 0x1979	; 0x801979 <AMIGOs+0x1>
   16f28:	89 2b       	or	r24, r25
   16f2a:	19 f0       	breq	.+6      	; 0x16f32 <amigo_request_status+0x46>
   16f2c:	84 85       	ldd	r24, Z+12	; 0x0c
   16f2e:	80 66       	ori	r24, 0x60	; 96
   16f30:	84 87       	std	Z+12, r24	; 0x0c
   16f32:	86 81       	ldd	r24, Z+6	; 0x06
   16f34:	82 30       	cpi	r24, 0x02	; 2
   16f36:	31 f4       	brne	.+12     	; 0x16f44 <amigo_request_status+0x58>
   16f38:	83 e1       	ldi	r24, 0x13	; 19
   16f3a:	81 87       	std	Z+9, r24	; 0x09
   16f3c:	84 85       	ldd	r24, Z+12	; 0x0c
   16f3e:	88 60       	ori	r24, 0x08	; 8
   16f40:	84 87       	std	Z+12, r24	; 0x0c
   16f42:	21 c0       	rjmp	.+66     	; 0x16f86 <amigo_request_status+0x9a>
   16f44:	27 81       	ldd	r18, Z+7	; 0x07
   16f46:	30 85       	ldd	r19, Z+8	; 0x08
   16f48:	21 15       	cp	r18, r1
   16f4a:	31 05       	cpc	r19, r1
   16f4c:	11 f4       	brne	.+4      	; 0x16f52 <amigo_request_status+0x66>
   16f4e:	81 30       	cpi	r24, 0x01	; 1
   16f50:	d1 f4       	brne	.+52     	; 0x16f86 <amigo_request_status+0x9a>
   16f52:	26 fd       	sbrc	r18, 6
   16f54:	0c c0       	rjmp	.+24     	; 0x16f6e <amigo_request_status+0x82>
   16f56:	25 ff       	sbrs	r18, 5
   16f58:	03 c0       	rjmp	.+6      	; 0x16f60 <amigo_request_status+0x74>
   16f5a:	8a e0       	ldi	r24, 0x0A	; 10
   16f5c:	81 87       	std	Z+9, r24	; 0x09
   16f5e:	0d c0       	rjmp	.+26     	; 0x16f7a <amigo_request_status+0x8e>
   16f60:	84 85       	ldd	r24, Z+12	; 0x0c
   16f62:	24 ff       	sbrs	r18, 4
   16f64:	02 c0       	rjmp	.+4      	; 0x16f6a <amigo_request_status+0x7e>
   16f66:	83 60       	ori	r24, 0x03	; 3
   16f68:	07 c0       	rjmp	.+14     	; 0x16f78 <amigo_request_status+0x8c>
   16f6a:	21 ff       	sbrs	r18, 1
   16f6c:	02 c0       	rjmp	.+4      	; 0x16f72 <amigo_request_status+0x86>
   16f6e:	83 e1       	ldi	r24, 0x13	; 19
   16f70:	f5 cf       	rjmp	.-22     	; 0x16f5c <amigo_request_status+0x70>
   16f72:	22 ff       	sbrs	r18, 2
   16f74:	02 c0       	rjmp	.+4      	; 0x16f7a <amigo_request_status+0x8e>
   16f76:	84 60       	ori	r24, 0x04	; 4
   16f78:	84 87       	std	Z+12, r24	; 0x0c
   16f7a:	84 85       	ldd	r24, Z+12	; 0x0c
   16f7c:	80 61       	ori	r24, 0x10	; 16
   16f7e:	84 87       	std	Z+12, r24	; 0x0c
   16f80:	83 85       	ldd	r24, Z+11	; 0x0b
   16f82:	80 68       	ori	r24, 0x80	; 128
   16f84:	83 87       	std	Z+11, r24	; 0x0b
   16f86:	e0 91 7a 19 	lds	r30, 0x197A	; 0x80197a <AMIGOp>
   16f8a:	f0 91 7b 19 	lds	r31, 0x197B	; 0x80197b <AMIGOp+0x1>
   16f8e:	81 81       	ldd	r24, Z+1	; 0x01
   16f90:	90 e0       	ldi	r25, 0x00	; 0
   16f92:	0e 94 f0 84 	call	0x109e0	; 0x109e0 <gpib_enable_PPR>
   16f96:	80 e0       	ldi	r24, 0x00	; 0
   16f98:	90 e0       	ldi	r25, 0x00	; 0
   16f9a:	08 95       	ret

00016f9c <amigo_send_logical_address>:
   16f9c:	a2 e0       	ldi	r26, 0x02	; 2
   16f9e:	b0 e0       	ldi	r27, 0x00	; 0
   16fa0:	e4 ed       	ldi	r30, 0xD4	; 212
   16fa2:	f7 eb       	ldi	r31, 0xB7	; 183
   16fa4:	0c 94 23 e8 	jmp	0x1d046	; 0x1d046 <__prologue_saves__+0x20>
   16fa8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16fac:	85 ff       	sbrs	r24, 5
   16fae:	0a c0       	rjmp	.+20     	; 0x16fc4 <amigo_send_logical_address+0x28>
   16fb0:	8d e0       	ldi	r24, 0x0D	; 13
   16fb2:	91 e3       	ldi	r25, 0x31	; 49
   16fb4:	1f 92       	push	r1
   16fb6:	9f 93       	push	r25
   16fb8:	8f 93       	push	r24
   16fba:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   16fbe:	0f 90       	pop	r0
   16fc0:	0f 90       	pop	r0
   16fc2:	0f 90       	pop	r0
   16fc4:	80 e0       	ldi	r24, 0x00	; 0
   16fc6:	91 e0       	ldi	r25, 0x01	; 1
   16fc8:	9a 83       	std	Y+2, r25	; 0x02
   16fca:	89 83       	std	Y+1, r24	; 0x01
   16fcc:	80 91 78 19 	lds	r24, 0x1978	; 0x801978 <AMIGOs>
   16fd0:	90 91 79 19 	lds	r25, 0x1979	; 0x801979 <AMIGOs+0x1>
   16fd4:	ae 01       	movw	r20, r28
   16fd6:	4f 5f       	subi	r20, 0xFF	; 255
   16fd8:	5f 4f       	sbci	r21, 0xFF	; 255
   16fda:	64 e0       	ldi	r22, 0x04	; 4
   16fdc:	70 e0       	ldi	r23, 0x00	; 0
   16fde:	0d 96       	adiw	r24, 0x0d	; 13
   16fe0:	0e 94 40 8a 	call	0x11480	; 0x11480 <gpib_write_str>
   16fe4:	29 81       	ldd	r18, Y+1	; 0x01
   16fe6:	3a 81       	ldd	r19, Y+2	; 0x02
   16fe8:	22 27       	eor	r18, r18
   16fea:	30 7d       	andi	r19, 0xD0	; 208
   16fec:	23 2b       	or	r18, r19
   16fee:	49 f0       	breq	.+18     	; 0x17002 <amigo_send_logical_address+0x66>
   16ff0:	e0 91 78 19 	lds	r30, 0x1978	; 0x801978 <AMIGOs>
   16ff4:	f0 91 79 19 	lds	r31, 0x1979	; 0x801979 <AMIGOs+0x1>
   16ff8:	27 81       	ldd	r18, Z+7	; 0x07
   16ffa:	30 85       	ldd	r19, Z+8	; 0x08
   16ffc:	20 62       	ori	r18, 0x20	; 32
   16ffe:	30 87       	std	Z+8, r19	; 0x08
   17000:	27 83       	std	Z+7, r18	; 0x07
   17002:	04 97       	sbiw	r24, 0x04	; 4
   17004:	c9 f0       	breq	.+50     	; 0x17038 <amigo_send_logical_address+0x9c>
   17006:	e0 91 78 19 	lds	r30, 0x1978	; 0x801978 <AMIGOs>
   1700a:	f0 91 79 19 	lds	r31, 0x1979	; 0x801979 <AMIGOs+0x1>
   1700e:	87 81       	ldd	r24, Z+7	; 0x07
   17010:	90 85       	ldd	r25, Z+8	; 0x08
   17012:	80 62       	ori	r24, 0x20	; 32
   17014:	90 87       	std	Z+8, r25	; 0x08
   17016:	87 83       	std	Z+7, r24	; 0x07
   17018:	81 e0       	ldi	r24, 0x01	; 1
   1701a:	86 83       	std	Z+6, r24	; 0x06
   1701c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17020:	80 ff       	sbrs	r24, 0
   17022:	0a c0       	rjmp	.+20     	; 0x17038 <amigo_send_logical_address+0x9c>
   17024:	83 ef       	ldi	r24, 0xF3	; 243
   17026:	90 e3       	ldi	r25, 0x30	; 48
   17028:	1f 92       	push	r1
   1702a:	9f 93       	push	r25
   1702c:	8f 93       	push	r24
   1702e:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   17032:	0f 90       	pop	r0
   17034:	0f 90       	pop	r0
   17036:	0f 90       	pop	r0
   17038:	e0 91 7a 19 	lds	r30, 0x197A	; 0x80197a <AMIGOp>
   1703c:	f0 91 7b 19 	lds	r31, 0x197B	; 0x80197b <AMIGOp+0x1>
   17040:	81 81       	ldd	r24, Z+1	; 0x01
   17042:	90 e0       	ldi	r25, 0x00	; 0
   17044:	0e 94 f0 84 	call	0x109e0	; 0x109e0 <gpib_enable_PPR>
   17048:	89 81       	ldd	r24, Y+1	; 0x01
   1704a:	9a 81       	ldd	r25, Y+2	; 0x02
   1704c:	88 27       	eor	r24, r24
   1704e:	90 7d       	andi	r25, 0xD0	; 208
   17050:	22 96       	adiw	r28, 0x02	; 2
   17052:	e2 e0       	ldi	r30, 0x02	; 2
   17054:	0c 94 3f e8 	jmp	0x1d07e	; 0x1d07e <__epilogue_restores__+0x20>

00017058 <amigo_send_status>:
   17058:	a2 e0       	ldi	r26, 0x02	; 2
   1705a:	b0 e0       	ldi	r27, 0x00	; 0
   1705c:	e2 e3       	ldi	r30, 0x32	; 50
   1705e:	f8 eb       	ldi	r31, 0xB8	; 184
   17060:	0c 94 23 e8 	jmp	0x1d046	; 0x1d046 <__prologue_saves__+0x20>
   17064:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17068:	85 ff       	sbrs	r24, 5
   1706a:	0a c0       	rjmp	.+20     	; 0x17080 <amigo_send_status+0x28>
   1706c:	8e ed       	ldi	r24, 0xDE	; 222
   1706e:	90 e3       	ldi	r25, 0x30	; 48
   17070:	1f 92       	push	r1
   17072:	9f 93       	push	r25
   17074:	8f 93       	push	r24
   17076:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1707a:	0f 90       	pop	r0
   1707c:	0f 90       	pop	r0
   1707e:	0f 90       	pop	r0
   17080:	80 e0       	ldi	r24, 0x00	; 0
   17082:	91 e0       	ldi	r25, 0x01	; 1
   17084:	9a 83       	std	Y+2, r25	; 0x02
   17086:	89 83       	std	Y+1, r24	; 0x01
   17088:	80 91 78 19 	lds	r24, 0x1978	; 0x801978 <AMIGOs>
   1708c:	90 91 79 19 	lds	r25, 0x1979	; 0x801979 <AMIGOs+0x1>
   17090:	ae 01       	movw	r20, r28
   17092:	4f 5f       	subi	r20, 0xFF	; 255
   17094:	5f 4f       	sbci	r21, 0xFF	; 255
   17096:	64 e0       	ldi	r22, 0x04	; 4
   17098:	70 e0       	ldi	r23, 0x00	; 0
   1709a:	09 96       	adiw	r24, 0x09	; 9
   1709c:	0e 94 40 8a 	call	0x11480	; 0x11480 <gpib_write_str>
   170a0:	29 81       	ldd	r18, Y+1	; 0x01
   170a2:	3a 81       	ldd	r19, Y+2	; 0x02
   170a4:	22 27       	eor	r18, r18
   170a6:	30 7d       	andi	r19, 0xD0	; 208
   170a8:	e0 91 78 19 	lds	r30, 0x1978	; 0x801978 <AMIGOs>
   170ac:	f0 91 79 19 	lds	r31, 0x1979	; 0x801979 <AMIGOs+0x1>
   170b0:	23 2b       	or	r18, r19
   170b2:	29 f0       	breq	.+10     	; 0x170be <amigo_send_status+0x66>
   170b4:	27 81       	ldd	r18, Z+7	; 0x07
   170b6:	30 85       	ldd	r19, Z+8	; 0x08
   170b8:	20 62       	ori	r18, 0x20	; 32
   170ba:	30 87       	std	Z+8, r19	; 0x08
   170bc:	27 83       	std	Z+7, r18	; 0x07
   170be:	04 97       	sbiw	r24, 0x04	; 4
   170c0:	b1 f0       	breq	.+44     	; 0x170ee <amigo_send_status+0x96>
   170c2:	87 81       	ldd	r24, Z+7	; 0x07
   170c4:	90 85       	ldd	r25, Z+8	; 0x08
   170c6:	80 62       	ori	r24, 0x20	; 32
   170c8:	90 87       	std	Z+8, r25	; 0x08
   170ca:	87 83       	std	Z+7, r24	; 0x07
   170cc:	81 e0       	ldi	r24, 0x01	; 1
   170ce:	86 83       	std	Z+6, r24	; 0x06
   170d0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   170d4:	80 ff       	sbrs	r24, 0
   170d6:	0e c0       	rjmp	.+28     	; 0x170f4 <amigo_send_status+0x9c>
   170d8:	84 ec       	ldi	r24, 0xC4	; 196
   170da:	90 e3       	ldi	r25, 0x30	; 48
   170dc:	1f 92       	push	r1
   170de:	9f 93       	push	r25
   170e0:	8f 93       	push	r24
   170e2:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   170e6:	0f 90       	pop	r0
   170e8:	0f 90       	pop	r0
   170ea:	0f 90       	pop	r0
   170ec:	03 c0       	rjmp	.+6      	; 0x170f4 <amigo_send_status+0x9c>
   170ee:	10 86       	std	Z+8, r1	; 0x08
   170f0:	17 82       	std	Z+7, r1	; 0x07
   170f2:	16 82       	std	Z+6, r1	; 0x06
   170f4:	e0 91 7a 19 	lds	r30, 0x197A	; 0x80197a <AMIGOp>
   170f8:	f0 91 7b 19 	lds	r31, 0x197B	; 0x80197b <AMIGOp+0x1>
   170fc:	81 81       	ldd	r24, Z+1	; 0x01
   170fe:	90 e0       	ldi	r25, 0x00	; 0
   17100:	0e 94 f0 84 	call	0x109e0	; 0x109e0 <gpib_enable_PPR>
   17104:	89 81       	ldd	r24, Y+1	; 0x01
   17106:	9a 81       	ldd	r25, Y+2	; 0x02
   17108:	88 27       	eor	r24, r24
   1710a:	90 7d       	andi	r25, 0xD0	; 208
   1710c:	22 96       	adiw	r28, 0x02	; 2
   1710e:	e2 e0       	ldi	r30, 0x02	; 2
   17110:	0c 94 3f e8 	jmp	0x1d07e	; 0x1d07e <__epilogue_restores__+0x20>

00017114 <amigo_increment>:
   17114:	a1 e1       	ldi	r26, 0x11	; 17
   17116:	b0 e0       	ldi	r27, 0x00	; 0
   17118:	e0 e9       	ldi	r30, 0x90	; 144
   1711a:	f8 eb       	ldi	r31, 0xB8	; 184
   1711c:	0c 94 23 e8 	jmp	0x1d046	; 0x1d046 <__prologue_saves__+0x20>
   17120:	bc 01       	movw	r22, r24
   17122:	e0 91 78 19 	lds	r30, 0x1978	; 0x801978 <AMIGOs>
   17126:	f0 91 79 19 	lds	r31, 0x1979	; 0x801979 <AMIGOs+0x1>
   1712a:	91 e1       	ldi	r25, 0x11	; 17
   1712c:	de 01       	movw	r26, r28
   1712e:	11 96       	adiw	r26, 0x01	; 1
   17130:	01 90       	ld	r0, Z+
   17132:	0d 92       	st	X+, r0
   17134:	9a 95       	dec	r25
   17136:	e1 f7       	brne	.-8      	; 0x17130 <amigo_increment+0x1c>
   17138:	9e 81       	ldd	r25, Y+6	; 0x06
   1713a:	9f 5f       	subi	r25, 0xFF	; 255
   1713c:	9e 83       	std	Y+6, r25	; 0x06
   1713e:	ce 01       	movw	r24, r28
   17140:	01 96       	adiw	r24, 0x01	; 1
   17142:	c3 dd       	rcall	.-1146   	; 0x16cca <amigo_overflow_check>
   17144:	00 97       	sbiw	r24, 0x00	; 0
   17146:	59 f4       	brne	.+22     	; 0x1715e <amigo_increment+0x4a>
   17148:	a0 91 78 19 	lds	r26, 0x1978	; 0x801978 <AMIGOs>
   1714c:	b0 91 79 19 	lds	r27, 0x1979	; 0x801979 <AMIGOs+0x1>
   17150:	21 e1       	ldi	r18, 0x11	; 17
   17152:	fe 01       	movw	r30, r28
   17154:	31 96       	adiw	r30, 0x01	; 1
   17156:	01 90       	ld	r0, Z+
   17158:	0d 92       	st	X+, r0
   1715a:	2a 95       	dec	r18
   1715c:	e1 f7       	brne	.-8      	; 0x17156 <amigo_increment+0x42>
   1715e:	61 96       	adiw	r28, 0x11	; 17
   17160:	e2 e0       	ldi	r30, 0x02	; 2
   17162:	0c 94 3f e8 	jmp	0x1d07e	; 0x1d07e <__epilogue_restores__+0x20>

00017166 <amigo_seek>:
   17166:	0f 93       	push	r16
   17168:	1f 93       	push	r17
   1716a:	cf 93       	push	r28
   1716c:	df 93       	push	r29
   1716e:	ec 01       	movw	r28, r24
   17170:	6e e0       	ldi	r22, 0x0E	; 14
   17172:	75 e1       	ldi	r23, 0x15	; 21
   17174:	aa dd       	rcall	.-1196   	; 0x16cca <amigo_overflow_check>
   17176:	8c 01       	movw	r16, r24
   17178:	e0 91 78 19 	lds	r30, 0x1978	; 0x801978 <AMIGOs>
   1717c:	f0 91 79 19 	lds	r31, 0x1979	; 0x801979 <AMIGOs+0x1>
   17180:	89 2b       	or	r24, r25
   17182:	41 f0       	breq	.+16     	; 0x17194 <amigo_seek+0x2e>
   17184:	81 e0       	ldi	r24, 0x01	; 1
   17186:	86 83       	std	Z+6, r24	; 0x06
   17188:	87 81       	ldd	r24, Z+7	; 0x07
   1718a:	90 85       	ldd	r25, Z+8	; 0x08
   1718c:	84 60       	ori	r24, 0x04	; 4
   1718e:	90 87       	std	Z+8, r25	; 0x08
   17190:	87 83       	std	Z+7, r24	; 0x07
   17192:	06 c0       	rjmp	.+12     	; 0x171a0 <amigo_seek+0x3a>
   17194:	8d 81       	ldd	r24, Y+5	; 0x05
   17196:	85 83       	std	Z+5, r24	; 0x05
   17198:	8c 81       	ldd	r24, Y+4	; 0x04
   1719a:	84 83       	std	Z+4, r24	; 0x04
   1719c:	8b 81       	ldd	r24, Y+3	; 0x03
   1719e:	83 83       	std	Z+3, r24	; 0x03
   171a0:	e0 91 7a 19 	lds	r30, 0x197A	; 0x80197a <AMIGOp>
   171a4:	f0 91 7b 19 	lds	r31, 0x197B	; 0x80197b <AMIGOp+0x1>
   171a8:	81 81       	ldd	r24, Z+1	; 0x01
   171aa:	90 e0       	ldi	r25, 0x00	; 0
   171ac:	0e 94 f0 84 	call	0x109e0	; 0x109e0 <gpib_enable_PPR>
   171b0:	c8 01       	movw	r24, r16
   171b2:	df 91       	pop	r29
   171b4:	cf 91       	pop	r28
   171b6:	1f 91       	pop	r17
   171b8:	0f 91       	pop	r16
   171ba:	08 95       	ret

000171bc <amigo_verify>:
   171bc:	8f 92       	push	r8
   171be:	9f 92       	push	r9
   171c0:	af 92       	push	r10
   171c2:	bf 92       	push	r11
   171c4:	ef 92       	push	r14
   171c6:	ff 92       	push	r15
   171c8:	0f 93       	push	r16
   171ca:	1f 93       	push	r17
   171cc:	cf 93       	push	r28
   171ce:	df 93       	push	r29
   171d0:	7c 01       	movw	r14, r24
   171d2:	63 e1       	ldi	r22, 0x13	; 19
   171d4:	75 e1       	ldi	r23, 0x15	; 21
   171d6:	80 91 78 19 	lds	r24, 0x1978	; 0x801978 <AMIGOs>
   171da:	90 91 79 19 	lds	r25, 0x1979	; 0x801979 <AMIGOs+0x1>
   171de:	c5 dd       	rcall	.-1142   	; 0x16d6a <amigo_chs_to_logical>
   171e0:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   171e4:	25 ff       	sbrs	r18, 5
   171e6:	15 c0       	rjmp	.+42     	; 0x17212 <amigo_verify+0x56>
   171e8:	ff 92       	push	r15
   171ea:	ef 92       	push	r14
   171ec:	9f 93       	push	r25
   171ee:	8f 93       	push	r24
   171f0:	7f 93       	push	r23
   171f2:	6f 93       	push	r22
   171f4:	83 e8       	ldi	r24, 0x83	; 131
   171f6:	90 e3       	ldi	r25, 0x30	; 48
   171f8:	1f 92       	push	r1
   171fa:	9f 93       	push	r25
   171fc:	8f 93       	push	r24
   171fe:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   17202:	8d b7       	in	r24, 0x3d	; 61
   17204:	9e b7       	in	r25, 0x3e	; 62
   17206:	09 96       	adiw	r24, 0x09	; 9
   17208:	0f b6       	in	r0, 0x3f	; 63
   1720a:	f8 94       	cli
   1720c:	9e bf       	out	0x3e, r25	; 62
   1720e:	0f be       	out	0x3f, r0	; 63
   17210:	8d bf       	out	0x3d, r24	; 61
   17212:	e7 01       	movw	r28, r14
   17214:	20 97       	sbiw	r28, 0x00	; 0
   17216:	09 f4       	brne	.+2      	; 0x1721a <amigo_verify+0x5e>
   17218:	49 c0       	rjmp	.+146    	; 0x172ac <amigo_verify+0xf0>
   1721a:	60 e2       	ldi	r22, 0x20	; 32
   1721c:	75 e1       	ldi	r23, 0x15	; 21
   1721e:	80 91 78 19 	lds	r24, 0x1978	; 0x801978 <AMIGOs>
   17222:	90 91 79 19 	lds	r25, 0x1979	; 0x801979 <AMIGOs+0x1>
   17226:	a1 dd       	rcall	.-1214   	; 0x16d6a <amigo_chs_to_logical>
   17228:	4b 01       	movw	r8, r22
   1722a:	5c 01       	movw	r10, r24
   1722c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17230:	86 fd       	sbrc	r24, 6
   17232:	0e 94 38 84 	call	0x10870	; 0x10870 <gpib_timer_elapsed_begin>
   17236:	80 91 7a 19 	lds	r24, 0x197A	; 0x80197a <AMIGOp>
   1723a:	90 91 7b 19 	lds	r25, 0x197B	; 0x80197b <AMIGOp+0x1>
   1723e:	e0 90 78 19 	lds	r14, 0x1978	; 0x801978 <AMIGOs>
   17242:	f0 90 79 19 	lds	r15, 0x1979	; 0x801979 <AMIGOs+0x1>
   17246:	e7 e0       	ldi	r30, 0x07	; 7
   17248:	ee 0e       	add	r14, r30
   1724a:	f1 1c       	adc	r15, r1
   1724c:	fc 01       	movw	r30, r24
   1724e:	05 a1       	ldd	r16, Z+37	; 0x25
   17250:	16 a1       	ldd	r17, Z+38	; 0x26
   17252:	29 ef       	ldi	r18, 0xF9	; 249
   17254:	3c e1       	ldi	r19, 0x1C	; 28
   17256:	b5 01       	movw	r22, r10
   17258:	a4 01       	movw	r20, r8
   1725a:	02 96       	adiw	r24, 0x02	; 2
   1725c:	0e 94 8a 83 	call	0x10714	; 0x10714 <dbf_open_read>
   17260:	7c 01       	movw	r14, r24
   17262:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17266:	86 ff       	sbrs	r24, 6
   17268:	04 c0       	rjmp	.+8      	; 0x17272 <amigo_verify+0xb6>
   1726a:	88 e2       	ldi	r24, 0x28	; 40
   1726c:	90 e1       	ldi	r25, 0x10	; 16
   1726e:	0e 94 4a 84 	call	0x10894	; 0x10894 <gpib_timer_elapsed_end>
   17272:	e0 91 7a 19 	lds	r30, 0x197A	; 0x80197a <AMIGOp>
   17276:	f0 91 7b 19 	lds	r31, 0x197B	; 0x80197b <AMIGOp+0x1>
   1727a:	85 a1       	ldd	r24, Z+37	; 0x25
   1727c:	96 a1       	ldd	r25, Z+38	; 0x26
   1727e:	e8 16       	cp	r14, r24
   17280:	f9 06       	cpc	r15, r25
   17282:	61 f0       	breq	.+24     	; 0x1729c <amigo_verify+0xe0>
   17284:	e0 91 78 19 	lds	r30, 0x1978	; 0x801978 <AMIGOs>
   17288:	f0 91 79 19 	lds	r31, 0x1979	; 0x801979 <AMIGOs+0x1>
   1728c:	81 e0       	ldi	r24, 0x01	; 1
   1728e:	86 83       	std	Z+6, r24	; 0x06
   17290:	87 81       	ldd	r24, Z+7	; 0x07
   17292:	90 85       	ldd	r25, Z+8	; 0x08
   17294:	81 60       	ori	r24, 0x01	; 1
   17296:	90 87       	std	Z+8, r25	; 0x08
   17298:	87 83       	std	Z+7, r24	; 0x07
   1729a:	0b c0       	rjmp	.+22     	; 0x172b2 <amigo_verify+0xf6>
   1729c:	88 e2       	ldi	r24, 0x28	; 40
   1729e:	95 e1       	ldi	r25, 0x15	; 21
   172a0:	39 df       	rcall	.-398    	; 0x17114 <amigo_increment>
   172a2:	21 97       	sbiw	r28, 0x01	; 1
   172a4:	89 2b       	or	r24, r25
   172a6:	09 f4       	brne	.+2      	; 0x172aa <amigo_verify+0xee>
   172a8:	b5 cf       	rjmp	.-150    	; 0x17214 <amigo_verify+0x58>
   172aa:	03 c0       	rjmp	.+6      	; 0x172b2 <amigo_verify+0xf6>
   172ac:	c0 e0       	ldi	r28, 0x00	; 0
   172ae:	d0 e0       	ldi	r29, 0x00	; 0
   172b0:	02 c0       	rjmp	.+4      	; 0x172b6 <amigo_verify+0xfa>
   172b2:	c1 e0       	ldi	r28, 0x01	; 1
   172b4:	d0 e0       	ldi	r29, 0x00	; 0
   172b6:	e0 91 7a 19 	lds	r30, 0x197A	; 0x80197a <AMIGOp>
   172ba:	f0 91 7b 19 	lds	r31, 0x197B	; 0x80197b <AMIGOp+0x1>
   172be:	81 81       	ldd	r24, Z+1	; 0x01
   172c0:	90 e0       	ldi	r25, 0x00	; 0
   172c2:	0e 94 f0 84 	call	0x109e0	; 0x109e0 <gpib_enable_PPR>
   172c6:	ce 01       	movw	r24, r28
   172c8:	df 91       	pop	r29
   172ca:	cf 91       	pop	r28
   172cc:	1f 91       	pop	r17
   172ce:	0f 91       	pop	r16
   172d0:	ff 90       	pop	r15
   172d2:	ef 90       	pop	r14
   172d4:	bf 90       	pop	r11
   172d6:	af 90       	pop	r10
   172d8:	9f 90       	pop	r9
   172da:	8f 90       	pop	r8
   172dc:	08 95       	ret

000172de <amigo_format>:
   172de:	ef 92       	push	r14
   172e0:	ff 92       	push	r15
   172e2:	0f 93       	push	r16
   172e4:	1f 93       	push	r17
   172e6:	cf 93       	push	r28
   172e8:	df 93       	push	r29
   172ea:	e0 91 78 19 	lds	r30, 0x1978	; 0x801978 <AMIGOs>
   172ee:	f0 91 79 19 	lds	r31, 0x1979	; 0x801979 <AMIGOs+0x1>
   172f2:	15 82       	std	Z+5, r1	; 0x05
   172f4:	14 82       	std	Z+4, r1	; 0x04
   172f6:	13 82       	std	Z+3, r1	; 0x03
   172f8:	e0 91 7a 19 	lds	r30, 0x197A	; 0x80197a <AMIGOp>
   172fc:	f0 91 7b 19 	lds	r31, 0x197B	; 0x80197b <AMIGOp+0x1>
   17300:	45 a1       	ldd	r20, Z+37	; 0x25
   17302:	56 a1       	ldd	r21, Z+38	; 0x26
   17304:	68 2f       	mov	r22, r24
   17306:	70 e0       	ldi	r23, 0x00	; 0
   17308:	89 ef       	ldi	r24, 0xF9	; 249
   1730a:	9c e1       	ldi	r25, 0x1C	; 28
   1730c:	0e 94 df ec 	call	0x1d9be	; 0x1d9be <memset>
   17310:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17314:	85 ff       	sbrs	r24, 5
   17316:	0a c0       	rjmp	.+20     	; 0x1732c <amigo_format+0x4e>
   17318:	88 e4       	ldi	r24, 0x48	; 72
   1731a:	90 e3       	ldi	r25, 0x30	; 48
   1731c:	1f 92       	push	r1
   1731e:	9f 93       	push	r25
   17320:	8f 93       	push	r24
   17322:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   17326:	0f 90       	pop	r0
   17328:	0f 90       	pop	r0
   1732a:	0f 90       	pop	r0
   1732c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17330:	86 fd       	sbrc	r24, 6
   17332:	0e 94 38 84 	call	0x10870	; 0x10870 <gpib_timer_elapsed_begin>
   17336:	6f e2       	ldi	r22, 0x2F	; 47
   17338:	75 e1       	ldi	r23, 0x15	; 21
   1733a:	80 91 78 19 	lds	r24, 0x1978	; 0x801978 <AMIGOs>
   1733e:	90 91 79 19 	lds	r25, 0x1979	; 0x801979 <AMIGOs+0x1>
   17342:	13 dd       	rcall	.-1498   	; 0x16d6a <amigo_chs_to_logical>
   17344:	ab 01       	movw	r20, r22
   17346:	bc 01       	movw	r22, r24
   17348:	80 91 7a 19 	lds	r24, 0x197A	; 0x80197a <AMIGOp>
   1734c:	90 91 7b 19 	lds	r25, 0x197B	; 0x80197b <AMIGOp+0x1>
   17350:	e0 90 78 19 	lds	r14, 0x1978	; 0x801978 <AMIGOs>
   17354:	f0 90 79 19 	lds	r15, 0x1979	; 0x801979 <AMIGOs+0x1>
   17358:	27 e0       	ldi	r18, 0x07	; 7
   1735a:	e2 0e       	add	r14, r18
   1735c:	f1 1c       	adc	r15, r1
   1735e:	fc 01       	movw	r30, r24
   17360:	05 a1       	ldd	r16, Z+37	; 0x25
   17362:	16 a1       	ldd	r17, Z+38	; 0x26
   17364:	29 ef       	ldi	r18, 0xF9	; 249
   17366:	3c e1       	ldi	r19, 0x1C	; 28
   17368:	02 96       	adiw	r24, 0x02	; 2
   1736a:	0e 94 e1 83 	call	0x107c2	; 0x107c2 <dbf_open_write>
   1736e:	e0 91 7a 19 	lds	r30, 0x197A	; 0x80197a <AMIGOp>
   17372:	f0 91 7b 19 	lds	r31, 0x197B	; 0x80197b <AMIGOp+0x1>
   17376:	25 a1       	ldd	r18, Z+37	; 0x25
   17378:	36 a1       	ldd	r19, Z+38	; 0x26
   1737a:	82 17       	cp	r24, r18
   1737c:	93 07       	cpc	r25, r19
   1737e:	71 f0       	breq	.+28     	; 0x1739c <amigo_format+0xbe>
   17380:	e0 91 78 19 	lds	r30, 0x1978	; 0x801978 <AMIGOs>
   17384:	f0 91 79 19 	lds	r31, 0x1979	; 0x801979 <AMIGOs+0x1>
   17388:	87 81       	ldd	r24, Z+7	; 0x07
   1738a:	90 85       	ldd	r25, Z+8	; 0x08
   1738c:	82 60       	ori	r24, 0x02	; 2
   1738e:	90 87       	std	Z+8, r25	; 0x08
   17390:	87 83       	std	Z+7, r24	; 0x07
   17392:	81 e0       	ldi	r24, 0x01	; 1
   17394:	86 83       	std	Z+6, r24	; 0x06
   17396:	c1 e0       	ldi	r28, 0x01	; 1
   17398:	d0 e0       	ldi	r29, 0x00	; 0
   1739a:	0f c0       	rjmp	.+30     	; 0x173ba <amigo_format+0xdc>
   1739c:	80 e0       	ldi	r24, 0x00	; 0
   1739e:	90 e0       	ldi	r25, 0x00	; 0
   173a0:	b9 de       	rcall	.-654    	; 0x17114 <amigo_increment>
   173a2:	89 2b       	or	r24, r25
   173a4:	41 f2       	breq	.-112    	; 0x17336 <amigo_format+0x58>
   173a6:	e0 91 78 19 	lds	r30, 0x1978	; 0x801978 <AMIGOs>
   173aa:	f0 91 79 19 	lds	r31, 0x1979	; 0x801979 <AMIGOs+0x1>
   173ae:	15 82       	std	Z+5, r1	; 0x05
   173b0:	14 82       	std	Z+4, r1	; 0x04
   173b2:	13 82       	std	Z+3, r1	; 0x03
   173b4:	16 82       	std	Z+6, r1	; 0x06
   173b6:	c0 e0       	ldi	r28, 0x00	; 0
   173b8:	d0 e0       	ldi	r29, 0x00	; 0
   173ba:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   173be:	86 ff       	sbrs	r24, 6
   173c0:	04 c0       	rjmp	.+8      	; 0x173ca <amigo_format+0xec>
   173c2:	8f e2       	ldi	r24, 0x2F	; 47
   173c4:	95 e1       	ldi	r25, 0x15	; 21
   173c6:	0e 94 4a 84 	call	0x10894	; 0x10894 <gpib_timer_elapsed_end>
   173ca:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   173ce:	85 ff       	sbrs	r24, 5
   173d0:	0a c0       	rjmp	.+20     	; 0x173e6 <amigo_format+0x108>
   173d2:	83 e3       	ldi	r24, 0x33	; 51
   173d4:	90 e3       	ldi	r25, 0x30	; 48
   173d6:	1f 92       	push	r1
   173d8:	9f 93       	push	r25
   173da:	8f 93       	push	r24
   173dc:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   173e0:	0f 90       	pop	r0
   173e2:	0f 90       	pop	r0
   173e4:	0f 90       	pop	r0
   173e6:	e0 91 7a 19 	lds	r30, 0x197A	; 0x80197a <AMIGOp>
   173ea:	f0 91 7b 19 	lds	r31, 0x197B	; 0x80197b <AMIGOp+0x1>
   173ee:	81 81       	ldd	r24, Z+1	; 0x01
   173f0:	90 e0       	ldi	r25, 0x00	; 0
   173f2:	0e 94 f0 84 	call	0x109e0	; 0x109e0 <gpib_enable_PPR>
   173f6:	ce 01       	movw	r24, r28
   173f8:	cd b7       	in	r28, 0x3d	; 61
   173fa:	de b7       	in	r29, 0x3e	; 62
   173fc:	e6 e0       	ldi	r30, 0x06	; 6
   173fe:	0c 94 3b e8 	jmp	0x1d076	; 0x1d076 <__epilogue_restores__+0x18>

00017402 <amigo_buffered_read>:
   17402:	8f 92       	push	r8
   17404:	9f 92       	push	r9
   17406:	af 92       	push	r10
   17408:	bf 92       	push	r11
   1740a:	ef 92       	push	r14
   1740c:	ff 92       	push	r15
   1740e:	0f 93       	push	r16
   17410:	1f 93       	push	r17
   17412:	cf 93       	push	r28
   17414:	df 93       	push	r29
   17416:	00 d0       	rcall	.+0      	; 0x17418 <amigo_buffered_read+0x16>
   17418:	cd b7       	in	r28, 0x3d	; 61
   1741a:	de b7       	in	r29, 0x3e	; 62
   1741c:	66 e3       	ldi	r22, 0x36	; 54
   1741e:	75 e1       	ldi	r23, 0x15	; 21
   17420:	80 91 78 19 	lds	r24, 0x1978	; 0x801978 <AMIGOs>
   17424:	90 91 79 19 	lds	r25, 0x1979	; 0x801979 <AMIGOs+0x1>
   17428:	a0 dc       	rcall	.-1728   	; 0x16d6a <amigo_chs_to_logical>
   1742a:	4b 01       	movw	r8, r22
   1742c:	5c 01       	movw	r10, r24
   1742e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17432:	86 fd       	sbrc	r24, 6
   17434:	0e 94 38 84 	call	0x10870	; 0x10870 <gpib_timer_elapsed_begin>
   17438:	80 91 7a 19 	lds	r24, 0x197A	; 0x80197a <AMIGOp>
   1743c:	90 91 7b 19 	lds	r25, 0x197B	; 0x80197b <AMIGOp+0x1>
   17440:	e0 90 78 19 	lds	r14, 0x1978	; 0x801978 <AMIGOs>
   17444:	f0 90 79 19 	lds	r15, 0x1979	; 0x801979 <AMIGOs+0x1>
   17448:	27 e0       	ldi	r18, 0x07	; 7
   1744a:	e2 0e       	add	r14, r18
   1744c:	f1 1c       	adc	r15, r1
   1744e:	fc 01       	movw	r30, r24
   17450:	05 a1       	ldd	r16, Z+37	; 0x25
   17452:	16 a1       	ldd	r17, Z+38	; 0x26
   17454:	29 ef       	ldi	r18, 0xF9	; 249
   17456:	3c e1       	ldi	r19, 0x1C	; 28
   17458:	b5 01       	movw	r22, r10
   1745a:	a4 01       	movw	r20, r8
   1745c:	02 96       	adiw	r24, 0x02	; 2
   1745e:	0e 94 8a 83 	call	0x10714	; 0x10714 <dbf_open_read>
   17462:	7c 01       	movw	r14, r24
   17464:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17468:	86 ff       	sbrs	r24, 6
   1746a:	04 c0       	rjmp	.+8      	; 0x17474 <amigo_buffered_read+0x72>
   1746c:	88 e2       	ldi	r24, 0x28	; 40
   1746e:	90 e1       	ldi	r25, 0x10	; 16
   17470:	0e 94 4a 84 	call	0x10894	; 0x10894 <gpib_timer_elapsed_end>
   17474:	e0 91 7a 19 	lds	r30, 0x197A	; 0x80197a <AMIGOp>
   17478:	f0 91 7b 19 	lds	r31, 0x197B	; 0x80197b <AMIGOp+0x1>
   1747c:	85 a1       	ldd	r24, Z+37	; 0x25
   1747e:	96 a1       	ldd	r25, Z+38	; 0x26
   17480:	e8 16       	cp	r14, r24
   17482:	f9 06       	cpc	r15, r25
   17484:	39 f0       	breq	.+14     	; 0x17494 <amigo_buffered_read+0x92>
   17486:	e0 91 78 19 	lds	r30, 0x1978	; 0x801978 <AMIGOs>
   1748a:	f0 91 79 19 	lds	r31, 0x1979	; 0x801979 <AMIGOs+0x1>
   1748e:	81 e0       	ldi	r24, 0x01	; 1
   17490:	86 83       	std	Z+6, r24	; 0x06
   17492:	6c c0       	rjmp	.+216    	; 0x1756c <amigo_buffered_read+0x16a>
   17494:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17498:	87 fd       	sbrc	r24, 7
   1749a:	0e 94 38 84 	call	0x10870	; 0x10870 <gpib_timer_elapsed_begin>
   1749e:	80 e0       	ldi	r24, 0x00	; 0
   174a0:	91 e0       	ldi	r25, 0x01	; 1
   174a2:	9a 83       	std	Y+2, r25	; 0x02
   174a4:	89 83       	std	Y+1, r24	; 0x01
   174a6:	e0 91 7a 19 	lds	r30, 0x197A	; 0x80197a <AMIGOp>
   174aa:	f0 91 7b 19 	lds	r31, 0x197B	; 0x80197b <AMIGOp+0x1>
   174ae:	65 a1       	ldd	r22, Z+37	; 0x25
   174b0:	76 a1       	ldd	r23, Z+38	; 0x26
   174b2:	ae 01       	movw	r20, r28
   174b4:	4f 5f       	subi	r20, 0xFF	; 255
   174b6:	5f 4f       	sbci	r21, 0xFF	; 255
   174b8:	89 ef       	ldi	r24, 0xF9	; 249
   174ba:	9c e1       	ldi	r25, 0x1C	; 28
   174bc:	0e 94 40 8a 	call	0x11480	; 0x11480 <gpib_write_str>
   174c0:	7c 01       	movw	r14, r24
   174c2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   174c6:	87 ff       	sbrs	r24, 7
   174c8:	04 c0       	rjmp	.+8      	; 0x174d2 <amigo_buffered_read+0xd0>
   174ca:	84 e4       	ldi	r24, 0x44	; 68
   174cc:	95 e1       	ldi	r25, 0x15	; 21
   174ce:	0e 94 4a 84 	call	0x10894	; 0x10894 <gpib_timer_elapsed_end>
   174d2:	89 81       	ldd	r24, Y+1	; 0x01
   174d4:	9a 81       	ldd	r25, Y+2	; 0x02
   174d6:	88 27       	eor	r24, r24
   174d8:	90 7d       	andi	r25, 0xD0	; 208
   174da:	89 2b       	or	r24, r25
   174dc:	49 f4       	brne	.+18     	; 0x174f0 <amigo_buffered_read+0xee>
   174de:	e0 91 7a 19 	lds	r30, 0x197A	; 0x80197a <AMIGOp>
   174e2:	f0 91 7b 19 	lds	r31, 0x197B	; 0x80197b <AMIGOp+0x1>
   174e6:	85 a1       	ldd	r24, Z+37	; 0x25
   174e8:	96 a1       	ldd	r25, Z+38	; 0x26
   174ea:	e8 16       	cp	r14, r24
   174ec:	f9 06       	cpc	r15, r25
   174ee:	31 f1       	breq	.+76     	; 0x1753c <amigo_buffered_read+0x13a>
   174f0:	e0 91 78 19 	lds	r30, 0x1978	; 0x801978 <AMIGOs>
   174f4:	f0 91 79 19 	lds	r31, 0x1979	; 0x801979 <AMIGOs+0x1>
   174f8:	81 e0       	ldi	r24, 0x01	; 1
   174fa:	86 83       	std	Z+6, r24	; 0x06
   174fc:	87 81       	ldd	r24, Z+7	; 0x07
   174fe:	90 85       	ldd	r25, Z+8	; 0x08
   17500:	80 62       	ori	r24, 0x20	; 32
   17502:	90 87       	std	Z+8, r25	; 0x08
   17504:	87 83       	std	Z+7, r24	; 0x07
   17506:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1750a:	80 ff       	sbrs	r24, 0
   1750c:	0a c0       	rjmp	.+20     	; 0x17522 <amigo_buffered_read+0x120>
   1750e:	89 e1       	ldi	r24, 0x19	; 25
   17510:	90 e3       	ldi	r25, 0x30	; 48
   17512:	1f 92       	push	r1
   17514:	9f 93       	push	r25
   17516:	8f 93       	push	r24
   17518:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1751c:	0f 90       	pop	r0
   1751e:	0f 90       	pop	r0
   17520:	0f 90       	pop	r0
   17522:	e0 91 7a 19 	lds	r30, 0x197A	; 0x80197a <AMIGOp>
   17526:	f0 91 7b 19 	lds	r31, 0x197B	; 0x80197b <AMIGOp+0x1>
   1752a:	81 81       	ldd	r24, Z+1	; 0x01
   1752c:	90 e0       	ldi	r25, 0x00	; 0
   1752e:	0e 94 f0 84 	call	0x109e0	; 0x109e0 <gpib_enable_PPR>
   17532:	89 81       	ldd	r24, Y+1	; 0x01
   17534:	9a 81       	ldd	r25, Y+2	; 0x02
   17536:	88 27       	eor	r24, r24
   17538:	90 7d       	andi	r25, 0xD0	; 208
   1753a:	1a c0       	rjmp	.+52     	; 0x17570 <amigo_buffered_read+0x16e>
   1753c:	86 e3       	ldi	r24, 0x36	; 54
   1753e:	95 e1       	ldi	r25, 0x15	; 21
   17540:	e9 dd       	rcall	.-1070   	; 0x17114 <amigo_increment>
   17542:	89 2b       	or	r24, r25
   17544:	59 f0       	breq	.+22     	; 0x1755c <amigo_buffered_read+0x15a>
   17546:	e0 91 78 19 	lds	r30, 0x1978	; 0x801978 <AMIGOs>
   1754a:	f0 91 79 19 	lds	r31, 0x1979	; 0x801979 <AMIGOs+0x1>
   1754e:	81 e0       	ldi	r24, 0x01	; 1
   17550:	86 83       	std	Z+6, r24	; 0x06
   17552:	87 81       	ldd	r24, Z+7	; 0x07
   17554:	90 85       	ldd	r25, Z+8	; 0x08
   17556:	84 60       	ori	r24, 0x04	; 4
   17558:	90 87       	std	Z+8, r25	; 0x08
   1755a:	87 83       	std	Z+7, r24	; 0x07
   1755c:	e0 91 7a 19 	lds	r30, 0x197A	; 0x80197a <AMIGOp>
   17560:	f0 91 7b 19 	lds	r31, 0x197B	; 0x80197b <AMIGOp+0x1>
   17564:	81 81       	ldd	r24, Z+1	; 0x01
   17566:	90 e0       	ldi	r25, 0x00	; 0
   17568:	0e 94 f0 84 	call	0x109e0	; 0x109e0 <gpib_enable_PPR>
   1756c:	80 e0       	ldi	r24, 0x00	; 0
   1756e:	90 e0       	ldi	r25, 0x00	; 0
   17570:	0f 90       	pop	r0
   17572:	0f 90       	pop	r0
   17574:	df 91       	pop	r29
   17576:	cf 91       	pop	r28
   17578:	1f 91       	pop	r17
   1757a:	0f 91       	pop	r16
   1757c:	ff 90       	pop	r15
   1757e:	ef 90       	pop	r14
   17580:	bf 90       	pop	r11
   17582:	af 90       	pop	r10
   17584:	9f 90       	pop	r9
   17586:	8f 90       	pop	r8
   17588:	08 95       	ret

0001758a <amigo_buffered_write>:
   1758a:	8f 92       	push	r8
   1758c:	9f 92       	push	r9
   1758e:	af 92       	push	r10
   17590:	bf 92       	push	r11
   17592:	ef 92       	push	r14
   17594:	ff 92       	push	r15
   17596:	0f 93       	push	r16
   17598:	1f 93       	push	r17
   1759a:	cf 93       	push	r28
   1759c:	df 93       	push	r29
   1759e:	00 d0       	rcall	.+0      	; 0x175a0 <amigo_buffered_write+0x16>
   175a0:	cd b7       	in	r28, 0x3d	; 61
   175a2:	de b7       	in	r29, 0x3e	; 62
   175a4:	6f e4       	ldi	r22, 0x4F	; 79
   175a6:	75 e1       	ldi	r23, 0x15	; 21
   175a8:	80 91 78 19 	lds	r24, 0x1978	; 0x801978 <AMIGOs>
   175ac:	90 91 79 19 	lds	r25, 0x1979	; 0x801979 <AMIGOs+0x1>
   175b0:	dc db       	rcall	.-2120   	; 0x16d6a <amigo_chs_to_logical>
   175b2:	4b 01       	movw	r8, r22
   175b4:	5c 01       	movw	r10, r24
   175b6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   175ba:	87 fd       	sbrc	r24, 7
   175bc:	0e 94 38 84 	call	0x10870	; 0x10870 <gpib_timer_elapsed_begin>
   175c0:	1a 82       	std	Y+2, r1	; 0x02
   175c2:	19 82       	std	Y+1, r1	; 0x01
   175c4:	e0 91 7a 19 	lds	r30, 0x197A	; 0x80197a <AMIGOp>
   175c8:	f0 91 7b 19 	lds	r31, 0x197B	; 0x80197b <AMIGOp+0x1>
   175cc:	65 a1       	ldd	r22, Z+37	; 0x25
   175ce:	76 a1       	ldd	r23, Z+38	; 0x26
   175d0:	ae 01       	movw	r20, r28
   175d2:	4f 5f       	subi	r20, 0xFF	; 255
   175d4:	5f 4f       	sbci	r21, 0xFF	; 255
   175d6:	89 ef       	ldi	r24, 0xF9	; 249
   175d8:	9c e1       	ldi	r25, 0x1C	; 28
   175da:	0e 94 92 89 	call	0x11324	; 0x11324 <gpib_read_str>
   175de:	7c 01       	movw	r14, r24
   175e0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   175e4:	87 ff       	sbrs	r24, 7
   175e6:	04 c0       	rjmp	.+8      	; 0x175f0 <amigo_buffered_write+0x66>
   175e8:	8e e5       	ldi	r24, 0x5E	; 94
   175ea:	95 e1       	ldi	r25, 0x15	; 21
   175ec:	0e 94 4a 84 	call	0x10894	; 0x10894 <gpib_timer_elapsed_end>
   175f0:	89 81       	ldd	r24, Y+1	; 0x01
   175f2:	9a 81       	ldd	r25, Y+2	; 0x02
   175f4:	88 27       	eor	r24, r24
   175f6:	90 7d       	andi	r25, 0xD0	; 208
   175f8:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   175fc:	89 2b       	or	r24, r25
   175fe:	49 f4       	brne	.+18     	; 0x17612 <amigo_buffered_write+0x88>
   17600:	e0 91 7a 19 	lds	r30, 0x197A	; 0x80197a <AMIGOp>
   17604:	f0 91 7b 19 	lds	r31, 0x197B	; 0x80197b <AMIGOp+0x1>
   17608:	85 a1       	ldd	r24, Z+37	; 0x25
   1760a:	96 a1       	ldd	r25, Z+38	; 0x26
   1760c:	e8 16       	cp	r14, r24
   1760e:	f9 06       	cpc	r15, r25
   17610:	c1 f0       	breq	.+48     	; 0x17642 <amigo_buffered_write+0xb8>
   17612:	e0 91 78 19 	lds	r30, 0x1978	; 0x801978 <AMIGOs>
   17616:	f0 91 79 19 	lds	r31, 0x1979	; 0x801979 <AMIGOs+0x1>
   1761a:	81 e0       	ldi	r24, 0x01	; 1
   1761c:	86 83       	std	Z+6, r24	; 0x06
   1761e:	87 81       	ldd	r24, Z+7	; 0x07
   17620:	90 85       	ldd	r25, Z+8	; 0x08
   17622:	80 62       	ori	r24, 0x20	; 32
   17624:	90 87       	std	Z+8, r25	; 0x08
   17626:	87 83       	std	Z+7, r24	; 0x07
   17628:	20 ff       	sbrs	r18, 0
   1762a:	4e c0       	rjmp	.+156    	; 0x176c8 <amigo_buffered_write+0x13e>
   1762c:	8a ef       	ldi	r24, 0xFA	; 250
   1762e:	9f e2       	ldi	r25, 0x2F	; 47
   17630:	1f 92       	push	r1
   17632:	9f 93       	push	r25
   17634:	8f 93       	push	r24
   17636:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1763a:	0f 90       	pop	r0
   1763c:	0f 90       	pop	r0
   1763e:	0f 90       	pop	r0
   17640:	43 c0       	rjmp	.+134    	; 0x176c8 <amigo_buffered_write+0x13e>
   17642:	26 fd       	sbrc	r18, 6
   17644:	0e 94 38 84 	call	0x10870	; 0x10870 <gpib_timer_elapsed_begin>
   17648:	80 91 7a 19 	lds	r24, 0x197A	; 0x80197a <AMIGOp>
   1764c:	90 91 7b 19 	lds	r25, 0x197B	; 0x80197b <AMIGOp+0x1>
   17650:	e0 90 78 19 	lds	r14, 0x1978	; 0x801978 <AMIGOs>
   17654:	f0 90 79 19 	lds	r15, 0x1979	; 0x801979 <AMIGOs+0x1>
   17658:	27 e0       	ldi	r18, 0x07	; 7
   1765a:	e2 0e       	add	r14, r18
   1765c:	f1 1c       	adc	r15, r1
   1765e:	fc 01       	movw	r30, r24
   17660:	05 a1       	ldd	r16, Z+37	; 0x25
   17662:	16 a1       	ldd	r17, Z+38	; 0x26
   17664:	29 ef       	ldi	r18, 0xF9	; 249
   17666:	3c e1       	ldi	r19, 0x1C	; 28
   17668:	b5 01       	movw	r22, r10
   1766a:	a4 01       	movw	r20, r8
   1766c:	02 96       	adiw	r24, 0x02	; 2
   1766e:	0e 94 e1 83 	call	0x107c2	; 0x107c2 <dbf_open_write>
   17672:	7c 01       	movw	r14, r24
   17674:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17678:	86 ff       	sbrs	r24, 6
   1767a:	04 c0       	rjmp	.+8      	; 0x17684 <amigo_buffered_write+0xfa>
   1767c:	8d e1       	ldi	r24, 0x1D	; 29
   1767e:	90 e1       	ldi	r25, 0x10	; 16
   17680:	0e 94 4a 84 	call	0x10894	; 0x10894 <gpib_timer_elapsed_end>
   17684:	e0 91 7a 19 	lds	r30, 0x197A	; 0x80197a <AMIGOp>
   17688:	f0 91 7b 19 	lds	r31, 0x197B	; 0x80197b <AMIGOp+0x1>
   1768c:	85 a1       	ldd	r24, Z+37	; 0x25
   1768e:	96 a1       	ldd	r25, Z+38	; 0x26
   17690:	e8 16       	cp	r14, r24
   17692:	f9 06       	cpc	r15, r25
   17694:	49 f0       	breq	.+18     	; 0x176a8 <amigo_buffered_write+0x11e>
   17696:	e0 91 78 19 	lds	r30, 0x1978	; 0x801978 <AMIGOs>
   1769a:	f0 91 79 19 	lds	r31, 0x1979	; 0x801979 <AMIGOs+0x1>
   1769e:	81 e0       	ldi	r24, 0x01	; 1
   176a0:	86 83       	std	Z+6, r24	; 0x06
   176a2:	80 e0       	ldi	r24, 0x00	; 0
   176a4:	90 e0       	ldi	r25, 0x00	; 0
   176a6:	1c c0       	rjmp	.+56     	; 0x176e0 <amigo_buffered_write+0x156>
   176a8:	8f e4       	ldi	r24, 0x4F	; 79
   176aa:	95 e1       	ldi	r25, 0x15	; 21
   176ac:	33 dd       	rcall	.-1434   	; 0x17114 <amigo_increment>
   176ae:	89 2b       	or	r24, r25
   176b0:	59 f0       	breq	.+22     	; 0x176c8 <amigo_buffered_write+0x13e>
   176b2:	e0 91 78 19 	lds	r30, 0x1978	; 0x801978 <AMIGOs>
   176b6:	f0 91 79 19 	lds	r31, 0x1979	; 0x801979 <AMIGOs+0x1>
   176ba:	81 e0       	ldi	r24, 0x01	; 1
   176bc:	86 83       	std	Z+6, r24	; 0x06
   176be:	87 81       	ldd	r24, Z+7	; 0x07
   176c0:	90 85       	ldd	r25, Z+8	; 0x08
   176c2:	84 60       	ori	r24, 0x04	; 4
   176c4:	90 87       	std	Z+8, r25	; 0x08
   176c6:	87 83       	std	Z+7, r24	; 0x07
   176c8:	e0 91 7a 19 	lds	r30, 0x197A	; 0x80197a <AMIGOp>
   176cc:	f0 91 7b 19 	lds	r31, 0x197B	; 0x80197b <AMIGOp+0x1>
   176d0:	81 81       	ldd	r24, Z+1	; 0x01
   176d2:	90 e0       	ldi	r25, 0x00	; 0
   176d4:	0e 94 f0 84 	call	0x109e0	; 0x109e0 <gpib_enable_PPR>
   176d8:	89 81       	ldd	r24, Y+1	; 0x01
   176da:	9a 81       	ldd	r25, Y+2	; 0x02
   176dc:	88 27       	eor	r24, r24
   176de:	90 7d       	andi	r25, 0xD0	; 208
   176e0:	0f 90       	pop	r0
   176e2:	0f 90       	pop	r0
   176e4:	df 91       	pop	r29
   176e6:	cf 91       	pop	r28
   176e8:	1f 91       	pop	r17
   176ea:	0f 91       	pop	r16
   176ec:	ff 90       	pop	r15
   176ee:	ef 90       	pop	r14
   176f0:	bf 90       	pop	r11
   176f2:	af 90       	pop	r10
   176f4:	9f 90       	pop	r9
   176f6:	8f 90       	pop	r8
   176f8:	08 95       	ret

000176fa <amigo_cmd_dsj>:
   176fa:	a3 e0       	ldi	r26, 0x03	; 3
   176fc:	b0 e0       	ldi	r27, 0x00	; 0
   176fe:	e3 e8       	ldi	r30, 0x83	; 131
   17700:	fb eb       	ldi	r31, 0xBB	; 187
   17702:	0c 94 23 e8 	jmp	0x1d046	; 0x1d046 <__prologue_saves__+0x20>
   17706:	e0 91 78 19 	lds	r30, 0x1978	; 0x801978 <AMIGOs>
   1770a:	f0 91 79 19 	lds	r31, 0x1979	; 0x801979 <AMIGOs+0x1>
   1770e:	86 81       	ldd	r24, Z+6	; 0x06
   17710:	8b 83       	std	Y+3, r24	; 0x03
   17712:	80 e0       	ldi	r24, 0x00	; 0
   17714:	91 e0       	ldi	r25, 0x01	; 1
   17716:	9a 83       	std	Y+2, r25	; 0x02
   17718:	89 83       	std	Y+1, r24	; 0x01
   1771a:	ae 01       	movw	r20, r28
   1771c:	4f 5f       	subi	r20, 0xFF	; 255
   1771e:	5f 4f       	sbci	r21, 0xFF	; 255
   17720:	61 e0       	ldi	r22, 0x01	; 1
   17722:	70 e0       	ldi	r23, 0x00	; 0
   17724:	ce 01       	movw	r24, r28
   17726:	03 96       	adiw	r24, 0x03	; 3
   17728:	0e 94 40 8a 	call	0x11480	; 0x11480 <gpib_write_str>
   1772c:	29 81       	ldd	r18, Y+1	; 0x01
   1772e:	3a 81       	ldd	r19, Y+2	; 0x02
   17730:	22 27       	eor	r18, r18
   17732:	30 7d       	andi	r19, 0xD0	; 208
   17734:	e0 91 78 19 	lds	r30, 0x1978	; 0x801978 <AMIGOs>
   17738:	f0 91 79 19 	lds	r31, 0x1979	; 0x801979 <AMIGOs+0x1>
   1773c:	23 2b       	or	r18, r19
   1773e:	29 f0       	breq	.+10     	; 0x1774a <amigo_cmd_dsj+0x50>
   17740:	27 81       	ldd	r18, Z+7	; 0x07
   17742:	30 85       	ldd	r19, Z+8	; 0x08
   17744:	20 62       	ori	r18, 0x20	; 32
   17746:	30 87       	std	Z+8, r19	; 0x08
   17748:	27 83       	std	Z+7, r18	; 0x07
   1774a:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1774e:	01 97       	sbiw	r24, 0x01	; 1
   17750:	c1 f0       	breq	.+48     	; 0x17782 <amigo_cmd_dsj+0x88>
   17752:	81 e0       	ldi	r24, 0x01	; 1
   17754:	86 83       	std	Z+6, r24	; 0x06
   17756:	87 81       	ldd	r24, Z+7	; 0x07
   17758:	90 85       	ldd	r25, Z+8	; 0x08
   1775a:	80 62       	ori	r24, 0x20	; 32
   1775c:	90 87       	std	Z+8, r25	; 0x08
   1775e:	87 83       	std	Z+7, r24	; 0x07
   17760:	20 ff       	sbrs	r18, 0
   17762:	0a c0       	rjmp	.+20     	; 0x17778 <amigo_cmd_dsj+0x7e>
   17764:	80 ee       	ldi	r24, 0xE0	; 224
   17766:	9f e2       	ldi	r25, 0x2F	; 47
   17768:	1f 92       	push	r1
   1776a:	9f 93       	push	r25
   1776c:	8f 93       	push	r24
   1776e:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   17772:	0f 90       	pop	r0
   17774:	0f 90       	pop	r0
   17776:	0f 90       	pop	r0
   17778:	89 81       	ldd	r24, Y+1	; 0x01
   1777a:	9a 81       	ldd	r25, Y+2	; 0x02
   1777c:	88 27       	eor	r24, r24
   1777e:	90 7d       	andi	r25, 0xD0	; 208
   17780:	1a c0       	rjmp	.+52     	; 0x177b6 <amigo_cmd_dsj+0xbc>
   17782:	25 ff       	sbrs	r18, 5
   17784:	0f c0       	rjmp	.+30     	; 0x177a4 <amigo_cmd_dsj+0xaa>
   17786:	86 81       	ldd	r24, Z+6	; 0x06
   17788:	1f 92       	push	r1
   1778a:	8f 93       	push	r24
   1778c:	83 ed       	ldi	r24, 0xD3	; 211
   1778e:	9f e2       	ldi	r25, 0x2F	; 47
   17790:	1f 92       	push	r1
   17792:	9f 93       	push	r25
   17794:	8f 93       	push	r24
   17796:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1779a:	0f 90       	pop	r0
   1779c:	0f 90       	pop	r0
   1779e:	0f 90       	pop	r0
   177a0:	0f 90       	pop	r0
   177a2:	0f 90       	pop	r0
   177a4:	e0 91 78 19 	lds	r30, 0x1978	; 0x801978 <AMIGOs>
   177a8:	f0 91 79 19 	lds	r31, 0x1979	; 0x801979 <AMIGOs+0x1>
   177ac:	16 82       	std	Z+6, r1	; 0x06
   177ae:	10 86       	std	Z+8, r1	; 0x08
   177b0:	17 82       	std	Z+7, r1	; 0x07
   177b2:	80 e0       	ldi	r24, 0x00	; 0
   177b4:	90 e0       	ldi	r25, 0x00	; 0
   177b6:	23 96       	adiw	r28, 0x03	; 3
   177b8:	e2 e0       	ldi	r30, 0x02	; 2
   177ba:	0c 94 3f e8 	jmp	0x1d07e	; 0x1d07e <__epilogue_restores__+0x20>

000177be <amigo_cmd_clear>:
   177be:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   177c2:	85 ff       	sbrs	r24, 5
   177c4:	0a c0       	rjmp	.+20     	; 0x177da <amigo_cmd_clear+0x1c>
   177c6:	8a e9       	ldi	r24, 0x9A	; 154
   177c8:	9f e2       	ldi	r25, 0x2F	; 47
   177ca:	1f 92       	push	r1
   177cc:	9f 93       	push	r25
   177ce:	8f 93       	push	r24
   177d0:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   177d4:	0f 90       	pop	r0
   177d6:	0f 90       	pop	r0
   177d8:	0f 90       	pop	r0
   177da:	e0 91 78 19 	lds	r30, 0x1978	; 0x801978 <AMIGOs>
   177de:	f0 91 79 19 	lds	r31, 0x1979	; 0x801979 <AMIGOs+0x1>
   177e2:	15 82       	std	Z+5, r1	; 0x05
   177e4:	14 82       	std	Z+4, r1	; 0x04
   177e6:	13 82       	std	Z+3, r1	; 0x03
   177e8:	16 82       	std	Z+6, r1	; 0x06
   177ea:	10 86       	std	Z+8, r1	; 0x08
   177ec:	17 82       	std	Z+7, r1	; 0x07
   177ee:	e0 91 7a 19 	lds	r30, 0x197A	; 0x80197a <AMIGOp>
   177f2:	f0 91 7b 19 	lds	r31, 0x197B	; 0x80197b <AMIGOp+0x1>
   177f6:	81 81       	ldd	r24, Z+1	; 0x01
   177f8:	90 e0       	ldi	r25, 0x00	; 0
   177fa:	0e 94 f0 84 	call	0x109e0	; 0x109e0 <gpib_enable_PPR>
   177fe:	80 e0       	ldi	r24, 0x00	; 0
   17800:	90 e0       	ldi	r25, 0x00	; 0
   17802:	08 95       	ret

00017804 <amigo_todo_op>:
/// @param[in] opcode: GPIB data byte OP Code
/// @param[in] len: Length of GOIB data returned
/// @return  0

int amigo_todo_op(uint8_t secondary, uint8_t opcode, int len)
{
   17804:	0f 93       	push	r16
   17806:	1f 93       	push	r17
   17808:	cf 93       	push	r28
   1780a:	df 93       	push	r29
   1780c:	c8 2f       	mov	r28, r24
   1780e:	d6 2f       	mov	r29, r22
   17810:	14 2f       	mov	r17, r20
   17812:	05 2f       	mov	r16, r21
    if(AMIGO_is_MLA(listening))
   17814:	80 91 ff 1e 	lds	r24, 0x1EFF	; 0x801eff <listening>
   17818:	90 e0       	ldi	r25, 0x00	; 0
   1781a:	0e 94 30 8b 	call	0x11660	; 0x11660 <AMIGO_is_MLA>
   1781e:	20 91 fd 1e 	lds	r18, 0x1EFD	; 0x801efd <talking>
   17822:	89 2b       	or	r24, r25
   17824:	19 f1       	breq	.+70     	; 0x1786c <amigo_todo_op+0x68>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   17826:	1f 92       	push	r1
   17828:	2f 93       	push	r18
   1782a:	80 91 ff 1e 	lds	r24, 0x1EFF	; 0x801eff <listening>
   1782e:	1f 92       	push	r1
   17830:	8f 93       	push	r24
   17832:	0f 93       	push	r16
   17834:	1f 93       	push	r17
   17836:	1f 92       	push	r1
   17838:	df 93       	push	r29
   1783a:	e0 91 78 19 	lds	r30, 0x1978	; 0x801978 <AMIGOs>
   1783e:	f0 91 79 19 	lds	r31, 0x1979	; 0x801979 <AMIGOs+0x1>
   17842:	80 81       	ld	r24, Z
   17844:	1f 92       	push	r1
   17846:	8f 93       	push	r24
   17848:	1f 92       	push	r1
   1784a:	cf 93       	push	r28
   1784c:	83 e3       	ldi	r24, 0x33	; 51
   1784e:	9f e2       	ldi	r25, 0x2F	; 47
   17850:	1f 92       	push	r1
   17852:	9f 93       	push	r25
   17854:	8f 93       	push	r24
   17856:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1785a:	8d b7       	in	r24, 0x3d	; 61
   1785c:	9e b7       	in	r25, 0x3e	; 62
   1785e:	0f 96       	adiw	r24, 0x0f	; 15
   17860:	0f b6       	in	r0, 0x3f	; 63
   17862:	f8 94       	cli
   17864:	9e bf       	out	0x3e, r25	; 62
   17866:	0f be       	out	0x3f, r0	; 63
   17868:	8d bf       	out	0x3d, r24	; 61
   1786a:	66 c0       	rjmp	.+204    	; 0x17938 <amigo_todo_op+0x134>
            secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(AMIGO_is_MTA(talking))
   1786c:	82 2f       	mov	r24, r18
   1786e:	90 e0       	ldi	r25, 0x00	; 0
   17870:	0e 94 41 8b 	call	0x11682	; 0x11682 <AMIGO_is_MTA>
   17874:	30 91 ff 1e 	lds	r19, 0x1EFF	; 0x801eff <listening>
   17878:	20 91 fd 1e 	lds	r18, 0x1EFD	; 0x801efd <talking>
   1787c:	e0 91 78 19 	lds	r30, 0x1978	; 0x801978 <AMIGOs>
   17880:	f0 91 79 19 	lds	r31, 0x1979	; 0x801979 <AMIGOs+0x1>
   17884:	89 2b       	or	r24, r25
   17886:	e9 f0       	breq	.+58     	; 0x178c2 <amigo_todo_op+0xbe>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   17888:	1f 92       	push	r1
   1788a:	2f 93       	push	r18
   1788c:	1f 92       	push	r1
   1788e:	3f 93       	push	r19
   17890:	0f 93       	push	r16
   17892:	1f 93       	push	r17
   17894:	1f 92       	push	r1
   17896:	df 93       	push	r29
   17898:	80 81       	ld	r24, Z
   1789a:	1f 92       	push	r1
   1789c:	8f 93       	push	r24
   1789e:	1f 92       	push	r1
   178a0:	cf 93       	push	r28
   178a2:	8c ec       	ldi	r24, 0xCC	; 204
   178a4:	9e e2       	ldi	r25, 0x2E	; 46
   178a6:	1f 92       	push	r1
   178a8:	9f 93       	push	r25
   178aa:	8f 93       	push	r24
   178ac:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   178b0:	8d b7       	in	r24, 0x3d	; 61
   178b2:	9e b7       	in	r25, 0x3e	; 62
   178b4:	0f 96       	adiw	r24, 0x0f	; 15
   178b6:	0f b6       	in	r0, 0x3f	; 63
   178b8:	f8 94       	cli
   178ba:	9e bf       	out	0x3e, r25	; 62
   178bc:	0f be       	out	0x3f, r0	; 63
   178be:	8d bf       	out	0x3d, r24	; 61
   178c0:	3b c0       	rjmp	.+118    	; 0x17938 <amigo_todo_op+0x134>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(talking == UNT)
   178c2:	2f 35       	cpi	r18, 0x5F	; 95
   178c4:	e9 f4       	brne	.+58     	; 0x17900 <amigo_todo_op+0xfc>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   178c6:	1f 92       	push	r1
   178c8:	2f 93       	push	r18
   178ca:	1f 92       	push	r1
   178cc:	3f 93       	push	r19
   178ce:	0f 93       	push	r16
   178d0:	1f 93       	push	r17
   178d2:	1f 92       	push	r1
   178d4:	df 93       	push	r29
   178d6:	80 81       	ld	r24, Z
   178d8:	1f 92       	push	r1
   178da:	8f 93       	push	r24
   178dc:	1f 92       	push	r1
   178de:	cf 93       	push	r28
   178e0:	85 e6       	ldi	r24, 0x65	; 101
   178e2:	9e e2       	ldi	r25, 0x2E	; 46
   178e4:	1f 92       	push	r1
   178e6:	9f 93       	push	r25
   178e8:	8f 93       	push	r24
   178ea:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   178ee:	8d b7       	in	r24, 0x3d	; 61
   178f0:	9e b7       	in	r25, 0x3e	; 62
   178f2:	0f 96       	adiw	r24, 0x0f	; 15
   178f4:	0f b6       	in	r0, 0x3f	; 63
   178f6:	f8 94       	cli
   178f8:	9e bf       	out	0x3e, r25	; 62
   178fa:	0f be       	out	0x3f, r0	; 63
   178fc:	8d bf       	out	0x3d, r24	; 61
   178fe:	1c c0       	rjmp	.+56     	; 0x17938 <amigo_todo_op+0x134>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else
        printf("[U Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   17900:	1f 92       	push	r1
   17902:	2f 93       	push	r18
   17904:	1f 92       	push	r1
   17906:	3f 93       	push	r19
   17908:	0f 93       	push	r16
   1790a:	1f 93       	push	r17
   1790c:	1f 92       	push	r1
   1790e:	df 93       	push	r29
   17910:	80 81       	ld	r24, Z
   17912:	1f 92       	push	r1
   17914:	8f 93       	push	r24
   17916:	1f 92       	push	r1
   17918:	cf 93       	push	r28
   1791a:	80 e0       	ldi	r24, 0x00	; 0
   1791c:	9e e2       	ldi	r25, 0x2E	; 46
   1791e:	1f 92       	push	r1
   17920:	9f 93       	push	r25
   17922:	8f 93       	push	r24
   17924:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   17928:	8d b7       	in	r24, 0x3d	; 61
   1792a:	9e b7       	in	r25, 0x3e	; 62
   1792c:	0f 96       	adiw	r24, 0x0f	; 15
   1792e:	0f b6       	in	r0, 0x3f	; 63
   17930:	f8 94       	cli
   17932:	9e bf       	out	0x3e, r25	; 62
   17934:	0f be       	out	0x3f, r0	; 63
   17936:	8d bf       	out	0x3d, r24	; 61
            secondary, AMIGOs->state, opcode, len, listening, talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   17938:	e0 91 7a 19 	lds	r30, 0x197A	; 0x80197a <AMIGOp>
   1793c:	f0 91 7b 19 	lds	r31, 0x197B	; 0x80197b <AMIGOp+0x1>
   17940:	81 81       	ldd	r24, Z+1	; 0x01
   17942:	90 e0       	ldi	r25, 0x00	; 0
   17944:	0e 94 f0 84 	call	0x109e0	; 0x109e0 <gpib_enable_PPR>
    return(0);
}
   17948:	80 e0       	ldi	r24, 0x00	; 0
   1794a:	90 e0       	ldi	r25, 0x00	; 0
   1794c:	df 91       	pop	r29
   1794e:	cf 91       	pop	r28
   17950:	1f 91       	pop	r17
   17952:	0f 91       	pop	r16
   17954:	08 95       	ret

00017956 <amigo_todo>:
/// @param[in] secondary: GPIB seconday command
///
/// @return  0

int amigo_todo(uint8_t secondary)
{
   17956:	cf 93       	push	r28
   17958:	c8 2f       	mov	r28, r24
    if(AMIGO_is_MLA(listening))
   1795a:	80 91 ff 1e 	lds	r24, 0x1EFF	; 0x801eff <listening>
   1795e:	90 e0       	ldi	r25, 0x00	; 0
   17960:	0e 94 30 8b 	call	0x11660	; 0x11660 <AMIGO_is_MLA>
   17964:	20 91 fd 1e 	lds	r18, 0x1EFD	; 0x801efd <talking>
   17968:	89 2b       	or	r24, r25
   1796a:	f9 f0       	breq	.+62     	; 0x179aa <amigo_todo+0x54>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   1796c:	1f 92       	push	r1
   1796e:	2f 93       	push	r18
   17970:	80 91 ff 1e 	lds	r24, 0x1EFF	; 0x801eff <listening>
   17974:	1f 92       	push	r1
   17976:	8f 93       	push	r24
   17978:	e0 91 78 19 	lds	r30, 0x1978	; 0x801978 <AMIGOs>
   1797c:	f0 91 79 19 	lds	r31, 0x1979	; 0x801979 <AMIGOs+0x1>
   17980:	80 81       	ld	r24, Z
   17982:	1f 92       	push	r1
   17984:	8f 93       	push	r24
   17986:	1f 92       	push	r1
   17988:	cf 93       	push	r28
   1798a:	80 eb       	ldi	r24, 0xB0	; 176
   1798c:	9d e2       	ldi	r25, 0x2D	; 45
   1798e:	1f 92       	push	r1
   17990:	9f 93       	push	r25
   17992:	8f 93       	push	r24
   17994:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   17998:	8d b7       	in	r24, 0x3d	; 61
   1799a:	9e b7       	in	r25, 0x3e	; 62
   1799c:	0b 96       	adiw	r24, 0x0b	; 11
   1799e:	0f b6       	in	r0, 0x3f	; 63
   179a0:	f8 94       	cli
   179a2:	9e bf       	out	0x3e, r25	; 62
   179a4:	0f be       	out	0x3f, r0	; 63
   179a6:	8d bf       	out	0x3d, r24	; 61
   179a8:	5a c0       	rjmp	.+180    	; 0x17a5e <amigo_todo+0x108>
            secondary,AMIGOs->state,listening,talking);
    else if(AMIGO_is_MTA(talking))
   179aa:	82 2f       	mov	r24, r18
   179ac:	90 e0       	ldi	r25, 0x00	; 0
   179ae:	0e 94 41 8b 	call	0x11682	; 0x11682 <AMIGO_is_MTA>
   179b2:	30 91 ff 1e 	lds	r19, 0x1EFF	; 0x801eff <listening>
   179b6:	20 91 fd 1e 	lds	r18, 0x1EFD	; 0x801efd <talking>
   179ba:	e0 91 78 19 	lds	r30, 0x1978	; 0x801978 <AMIGOs>
   179be:	f0 91 79 19 	lds	r31, 0x1979	; 0x801979 <AMIGOs+0x1>
   179c2:	89 2b       	or	r24, r25
   179c4:	c9 f0       	breq	.+50     	; 0x179f8 <amigo_todo+0xa2>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   179c6:	1f 92       	push	r1
   179c8:	2f 93       	push	r18
   179ca:	1f 92       	push	r1
   179cc:	3f 93       	push	r19
   179ce:	80 81       	ld	r24, Z
   179d0:	1f 92       	push	r1
   179d2:	8f 93       	push	r24
   179d4:	1f 92       	push	r1
   179d6:	cf 93       	push	r28
   179d8:	80 e6       	ldi	r24, 0x60	; 96
   179da:	9d e2       	ldi	r25, 0x2D	; 45
   179dc:	1f 92       	push	r1
   179de:	9f 93       	push	r25
   179e0:	8f 93       	push	r24
   179e2:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   179e6:	8d b7       	in	r24, 0x3d	; 61
   179e8:	9e b7       	in	r25, 0x3e	; 62
   179ea:	0b 96       	adiw	r24, 0x0b	; 11
   179ec:	0f b6       	in	r0, 0x3f	; 63
   179ee:	f8 94       	cli
   179f0:	9e bf       	out	0x3e, r25	; 62
   179f2:	0f be       	out	0x3f, r0	; 63
   179f4:	8d bf       	out	0x3d, r24	; 61
   179f6:	33 c0       	rjmp	.+102    	; 0x17a5e <amigo_todo+0x108>
                secondary,AMIGOs->state,listening,talking);
    else if(talking == UNT)
   179f8:	2f 35       	cpi	r18, 0x5F	; 95
   179fa:	c9 f4       	brne	.+50     	; 0x17a2e <amigo_todo+0xd8>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   179fc:	1f 92       	push	r1
   179fe:	2f 93       	push	r18
   17a00:	1f 92       	push	r1
   17a02:	3f 93       	push	r19
   17a04:	80 81       	ld	r24, Z
   17a06:	1f 92       	push	r1
   17a08:	8f 93       	push	r24
   17a0a:	1f 92       	push	r1
   17a0c:	cf 93       	push	r28
   17a0e:	80 e1       	ldi	r24, 0x10	; 16
   17a10:	9d e2       	ldi	r25, 0x2D	; 45
   17a12:	1f 92       	push	r1
   17a14:	9f 93       	push	r25
   17a16:	8f 93       	push	r24
   17a18:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   17a1c:	8d b7       	in	r24, 0x3d	; 61
   17a1e:	9e b7       	in	r25, 0x3e	; 62
   17a20:	0b 96       	adiw	r24, 0x0b	; 11
   17a22:	0f b6       	in	r0, 0x3f	; 63
   17a24:	f8 94       	cli
   17a26:	9e bf       	out	0x3e, r25	; 62
   17a28:	0f be       	out	0x3f, r0	; 63
   17a2a:	8d bf       	out	0x3d, r24	; 61
   17a2c:	18 c0       	rjmp	.+48     	; 0x17a5e <amigo_todo+0x108>
                secondary,AMIGOs->state,listening,talking);
    else
        printf("[E   Amigo ERROR secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   17a2e:	1f 92       	push	r1
   17a30:	2f 93       	push	r18
   17a32:	1f 92       	push	r1
   17a34:	3f 93       	push	r19
   17a36:	80 81       	ld	r24, Z
   17a38:	1f 92       	push	r1
   17a3a:	8f 93       	push	r24
   17a3c:	1f 92       	push	r1
   17a3e:	cf 93       	push	r28
   17a40:	8f eb       	ldi	r24, 0xBF	; 191
   17a42:	9c e2       	ldi	r25, 0x2C	; 44
   17a44:	1f 92       	push	r1
   17a46:	9f 93       	push	r25
   17a48:	8f 93       	push	r24
   17a4a:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   17a4e:	8d b7       	in	r24, 0x3d	; 61
   17a50:	9e b7       	in	r25, 0x3e	; 62
   17a52:	0b 96       	adiw	r24, 0x0b	; 11
   17a54:	0f b6       	in	r0, 0x3f	; 63
   17a56:	f8 94       	cli
   17a58:	9e bf       	out	0x3e, r25	; 62
   17a5a:	0f be       	out	0x3f, r0	; 63
   17a5c:	8d bf       	out	0x3d, r24	; 61
            secondary,AMIGOs->state,listening,talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   17a5e:	e0 91 7a 19 	lds	r30, 0x197A	; 0x80197a <AMIGOp>
   17a62:	f0 91 7b 19 	lds	r31, 0x197B	; 0x80197b <AMIGOp+0x1>
   17a66:	81 81       	ldd	r24, Z+1	; 0x01
   17a68:	90 e0       	ldi	r25, 0x00	; 0
   17a6a:	0e 94 f0 84 	call	0x109e0	; 0x109e0 <gpib_enable_PPR>
    return(0);
}
   17a6e:	80 e0       	ldi	r24, 0x00	; 0
   17a70:	90 e0       	ldi	r25, 0x00	; 0
   17a72:	cf 91       	pop	r28
   17a74:	08 95       	ret

00017a76 <amigo_check_unit>:
/// @brief  Amigo Check Valid unit
/// @param[in] unit: unit to set
/// @return void
void amigo_check_unit(uint8_t unit)
{
    if(unit != 15)
   17a76:	8f 30       	cpi	r24, 0x0F	; 15
   17a78:	29 f0       	breq	.+10     	; 0x17a84 <amigo_check_unit+0xe>
        AMIGOs->unitNO = unit;
   17a7a:	e0 91 78 19 	lds	r30, 0x1978	; 0x801978 <AMIGOs>
   17a7e:	f0 91 79 19 	lds	r31, 0x1979	; 0x801979 <AMIGOs+0x1>
   17a82:	81 83       	std	Z+1, r24	; 0x01
    if(AMIGOs->unitNO != 0)
   17a84:	e0 91 78 19 	lds	r30, 0x1978	; 0x801978 <AMIGOs>
   17a88:	f0 91 79 19 	lds	r31, 0x1979	; 0x801979 <AMIGOs+0x1>
   17a8c:	81 81       	ldd	r24, Z+1	; 0x01
   17a8e:	88 23       	and	r24, r24
   17a90:	29 f0       	breq	.+10     	; 0x17a9c <amigo_check_unit+0x26>
        AMIGOs->Errors |= ERR_UNIT;
   17a92:	87 81       	ldd	r24, Z+7	; 0x07
   17a94:	90 85       	ldd	r25, Z+8	; 0x08
   17a96:	80 64       	ori	r24, 0x40	; 64
   17a98:	90 87       	std	Z+8, r25	; 0x08
   17a9a:	87 83       	std	Z+7, r24	; 0x07
   17a9c:	08 95       	ret

00017a9e <Amigo_Command>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)

int Amigo_Command( int secondary )
{
   17a9e:	a3 e1       	ldi	r26, 0x13	; 19
   17aa0:	b0 e0       	ldi	r27, 0x00	; 0
   17aa2:	e5 e5       	ldi	r30, 0x55	; 85
   17aa4:	fd eb       	ldi	r31, 0xBD	; 189
   17aa6:	0c 94 1f e8 	jmp	0x1d03e	; 0x1d03e <__prologue_saves__+0x18>
   17aaa:	7c 01       	movw	r14, r24
    uint8_t *ptr;
    uint16_t status;                              // Current status
    UINT len;                                     // Size of Data/Op Codes/Parameters read in bytes

#if SDEBUG
    if(debuglevel & 32)
   17aac:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17ab0:	85 ff       	sbrs	r24, 5
   17ab2:	16 c0       	rjmp	.+44     	; 0x17ae0 <Amigo_Command+0x42>
        printf("[AMIGO Command(%02XH): listen:%02XH, talk:%02XH]\n",
   17ab4:	80 91 fd 1e 	lds	r24, 0x1EFD	; 0x801efd <talking>
   17ab8:	1f 92       	push	r1
   17aba:	8f 93       	push	r24
   17abc:	80 91 ff 1e 	lds	r24, 0x1EFF	; 0x801eff <listening>
   17ac0:	1f 92       	push	r1
   17ac2:	8f 93       	push	r24
   17ac4:	ff 92       	push	r15
   17ac6:	ef 92       	push	r14
   17ac8:	8d e8       	ldi	r24, 0x8D	; 141
   17aca:	9c e2       	ldi	r25, 0x2C	; 44
   17acc:	1f 92       	push	r1
   17ace:	9f 93       	push	r25
   17ad0:	8f 93       	push	r24
   17ad2:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   17ad6:	0f b6       	in	r0, 0x3f	; 63
   17ad8:	f8 94       	cli
   17ada:	de bf       	out	0x3e, r29	; 62
   17adc:	0f be       	out	0x3f, r0	; 63
   17ade:	cd bf       	out	0x3d, r28	; 61
            secondary, listening, talking);
#endif

///  Reference: A14
    if (secondary == 0x7e && AMIGO_is_MTA(talking))
   17ae0:	9e e7       	ldi	r25, 0x7E	; 126
   17ae2:	e9 16       	cp	r14, r25
   17ae4:	f1 04       	cpc	r15, r1
   17ae6:	f1 f5       	brne	.+124    	; 0x17b64 <Amigo_Command+0xc6>
   17ae8:	80 91 fd 1e 	lds	r24, 0x1EFD	; 0x801efd <talking>
   17aec:	90 e0       	ldi	r25, 0x00	; 0
   17aee:	0e 94 41 8b 	call	0x11682	; 0x11682 <AMIGO_is_MTA>
   17af2:	89 2b       	or	r24, r25
   17af4:	09 f4       	brne	.+2      	; 0x17af8 <Amigo_Command+0x5a>
   17af6:	86 c0       	rjmp	.+268    	; 0x17c04 <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17af8:	e0 91 7a 19 	lds	r30, 0x197A	; 0x80197a <AMIGOp>
   17afc:	f0 91 7b 19 	lds	r31, 0x197B	; 0x80197b <AMIGOp+0x1>
   17b00:	81 81       	ldd	r24, Z+1	; 0x01
   17b02:	90 e0       	ldi	r25, 0x00	; 0
   17b04:	0e 94 21 85 	call	0x10a42	; 0x10a42 <gpib_disable_PPR>
        status = EOI_FLAG;
   17b08:	80 e0       	ldi	r24, 0x00	; 0
   17b0a:	91 e0       	ldi	r25, 0x01	; 1
   17b0c:	9b 8b       	std	Y+19, r25	; 0x13
   17b0e:	8a 8b       	std	Y+18, r24	; 0x12
        len = gpib_write_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   17b10:	ae 01       	movw	r20, r28
   17b12:	4e 5e       	subi	r20, 0xEE	; 238
   17b14:	5f 4f       	sbci	r21, 0xFF	; 255
   17b16:	60 e0       	ldi	r22, 0x00	; 0
   17b18:	72 e0       	ldi	r23, 0x02	; 2
   17b1a:	89 ef       	ldi	r24, 0xF9	; 249
   17b1c:	9c e1       	ldi	r25, 0x1C	; 28
   17b1e:	0e 94 40 8a 	call	0x11480	; 0x11480 <gpib_write_str>
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   17b22:	e0 91 7a 19 	lds	r30, 0x197A	; 0x80197a <AMIGOp>
   17b26:	f0 91 7b 19 	lds	r31, 0x197B	; 0x80197b <AMIGOp+0x1>
   17b2a:	81 81       	ldd	r24, Z+1	; 0x01
   17b2c:	90 e0       	ldi	r25, 0x00	; 0
   17b2e:	0e 94 f0 84 	call	0x109e0	; 0x109e0 <gpib_enable_PPR>
        if(status & ERROR_MASK)
   17b32:	8a 89       	ldd	r24, Y+18	; 0x12
   17b34:	9b 89       	ldd	r25, Y+19	; 0x13
   17b36:	88 27       	eor	r24, r24
   17b38:	90 7d       	andi	r25, 0xD0	; 208
   17b3a:	89 2b       	or	r24, r25
   17b3c:	09 f4       	brne	.+2      	; 0x17b40 <Amigo_Command+0xa2>
   17b3e:	89 c2       	rjmp	.+1298   	; 0x18052 <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   17b40:	e0 91 78 19 	lds	r30, 0x1978	; 0x801978 <AMIGOs>
   17b44:	f0 91 79 19 	lds	r31, 0x1979	; 0x801979 <AMIGOs+0x1>
   17b48:	81 e0       	ldi	r24, 0x01	; 1
   17b4a:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   17b4c:	87 81       	ldd	r24, Z+7	; 0x07
   17b4e:	90 85       	ldd	r25, Z+8	; 0x08
   17b50:	80 62       	ori	r24, 0x20	; 32
   17b52:	90 87       	std	Z+8, r25	; 0x08
   17b54:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & 1)
   17b56:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17b5a:	80 ff       	sbrs	r24, 0
   17b5c:	7a c2       	rjmp	.+1268   	; 0x18052 <Amigo_Command+0x5b4>
                printf("[AMIGO_Command:GPIB write error]\n");
   17b5e:	8b e6       	ldi	r24, 0x6B	; 107
   17b60:	9c e2       	ldi	r25, 0x2C	; 44
   17b62:	8e c0       	rjmp	.+284    	; 0x17c80 <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

///  Reference: A25
    if (secondary == 0x7f && AMIGO_is_MLA(listening))
   17b64:	8f e7       	ldi	r24, 0x7F	; 127
   17b66:	e8 16       	cp	r14, r24
   17b68:	f1 04       	cpc	r15, r1
   17b6a:	09 f0       	breq	.+2      	; 0x17b6e <Amigo_Command+0xd0>
   17b6c:	4b c0       	rjmp	.+150    	; 0x17c04 <Amigo_Command+0x166>
   17b6e:	80 91 ff 1e 	lds	r24, 0x1EFF	; 0x801eff <listening>
   17b72:	90 e0       	ldi	r25, 0x00	; 0
   17b74:	0e 94 30 8b 	call	0x11660	; 0x11660 <AMIGO_is_MLA>
   17b78:	89 2b       	or	r24, r25
   17b7a:	09 f4       	brne	.+2      	; 0x17b7e <Amigo_Command+0xe0>
   17b7c:	43 c0       	rjmp	.+134    	; 0x17c04 <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17b7e:	e0 91 7a 19 	lds	r30, 0x197A	; 0x80197a <AMIGOp>
   17b82:	f0 91 7b 19 	lds	r31, 0x197B	; 0x80197b <AMIGOp+0x1>
   17b86:	81 81       	ldd	r24, Z+1	; 0x01
   17b88:	90 e0       	ldi	r25, 0x00	; 0
   17b8a:	0e 94 21 85 	call	0x10a42	; 0x10a42 <gpib_disable_PPR>
#if SDEBUG
        if(debuglevel & 128)
   17b8e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17b92:	87 fd       	sbrc	r24, 7
            gpib_timer_elapsed_begin();
   17b94:	0e 94 38 84 	call	0x10870	; 0x10870 <gpib_timer_elapsed_begin>
#endif
        status = EOI_FLAG;
   17b98:	80 e0       	ldi	r24, 0x00	; 0
   17b9a:	91 e0       	ldi	r25, 0x01	; 1
   17b9c:	9b 8b       	std	Y+19, r25	; 0x13
   17b9e:	8a 8b       	std	Y+18, r24	; 0x12
        len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   17ba0:	ae 01       	movw	r20, r28
   17ba2:	4e 5e       	subi	r20, 0xEE	; 238
   17ba4:	5f 4f       	sbci	r21, 0xFF	; 255
   17ba6:	60 e0       	ldi	r22, 0x00	; 0
   17ba8:	72 e0       	ldi	r23, 0x02	; 2
   17baa:	89 ef       	ldi	r24, 0xF9	; 249
   17bac:	9c e1       	ldi	r25, 0x1C	; 28
   17bae:	0e 94 92 89 	call	0x11324	; 0x11324 <gpib_read_str>
#if SDEBUG
        if(debuglevel & 128)
   17bb2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17bb6:	87 ff       	sbrs	r24, 7
   17bb8:	04 c0       	rjmp	.+8      	; 0x17bc2 <Amigo_Command+0x124>
            gpib_timer_elapsed_end("GPIB read str");
   17bba:	8e e5       	ldi	r24, 0x5E	; 94
   17bbc:	95 e1       	ldi	r25, 0x15	; 21
   17bbe:	0e 94 4a 84 	call	0x10894	; 0x10894 <gpib_timer_elapsed_end>
#endif
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   17bc2:	e0 91 7a 19 	lds	r30, 0x197A	; 0x80197a <AMIGOp>
   17bc6:	f0 91 7b 19 	lds	r31, 0x197B	; 0x80197b <AMIGOp+0x1>
   17bca:	81 81       	ldd	r24, Z+1	; 0x01
   17bcc:	90 e0       	ldi	r25, 0x00	; 0
   17bce:	0e 94 f0 84 	call	0x109e0	; 0x109e0 <gpib_enable_PPR>
        if(status & ERROR_MASK)
   17bd2:	8a 89       	ldd	r24, Y+18	; 0x12
   17bd4:	9b 89       	ldd	r25, Y+19	; 0x13
   17bd6:	88 27       	eor	r24, r24
   17bd8:	90 7d       	andi	r25, 0xD0	; 208
   17bda:	89 2b       	or	r24, r25
   17bdc:	09 f4       	brne	.+2      	; 0x17be0 <Amigo_Command+0x142>
   17bde:	39 c2       	rjmp	.+1138   	; 0x18052 <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   17be0:	e0 91 78 19 	lds	r30, 0x1978	; 0x801978 <AMIGOs>
   17be4:	f0 91 79 19 	lds	r31, 0x1979	; 0x801979 <AMIGOs+0x1>
   17be8:	81 e0       	ldi	r24, 0x01	; 1
   17bea:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   17bec:	87 81       	ldd	r24, Z+7	; 0x07
   17bee:	90 85       	ldd	r25, Z+8	; 0x08
   17bf0:	80 62       	ori	r24, 0x20	; 32
   17bf2:	90 87       	std	Z+8, r25	; 0x08
   17bf4:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & 1)
   17bf6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17bfa:	80 ff       	sbrs	r24, 0
   17bfc:	2a c2       	rjmp	.+1108   	; 0x18052 <Amigo_Command+0x5b4>
                printf("[AMIGO Command:GPIB read error]\n");
   17bfe:	8a e4       	ldi	r24, 0x4A	; 74
   17c00:	9c e2       	ldi	r25, 0x2C	; 44
   17c02:	3e c0       	rjmp	.+124    	; 0x17c80 <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   17c04:	80 91 ff 1e 	lds	r24, 0x1EFF	; 0x801eff <listening>
   17c08:	90 e0       	ldi	r25, 0x00	; 0
   17c0a:	0e 94 30 8b 	call	0x11660	; 0x11660 <AMIGO_is_MLA>
   17c0e:	89 2b       	or	r24, r25
   17c10:	19 f4       	brne	.+6      	; 0x17c18 <Amigo_Command+0x17a>
        return(0);
   17c12:	80 e0       	ldi	r24, 0x00	; 0
   17c14:	90 e0       	ldi	r25, 0x00	; 0
   17c16:	25 c2       	rjmp	.+1098   	; 0x18062 <Amigo_Command+0x5c4>
                printf("[AMIGO Command:GPIB read error]\n");
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   17c18:	80 91 fd 1e 	lds	r24, 0x1EFD	; 0x801efd <talking>
   17c1c:	90 e0       	ldi	r25, 0x00	; 0
   17c1e:	0e 94 41 8b 	call	0x11682	; 0x11682 <AMIGO_is_MTA>
   17c22:	89 2b       	or	r24, r25
   17c24:	b1 f7       	brne	.-20     	; 0x17c12 <Amigo_Command+0x174>
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17c26:	e0 91 7a 19 	lds	r30, 0x197A	; 0x80197a <AMIGOp>
   17c2a:	f0 91 7b 19 	lds	r31, 0x197B	; 0x80197b <AMIGOp+0x1>
   17c2e:	81 81       	ldd	r24, Z+1	; 0x01
   17c30:	90 e0       	ldi	r25, 0x00	; 0
   17c32:	0e 94 21 85 	call	0x10a42	; 0x10a42 <gpib_disable_PPR>


///  Note: the function will "unread" any commands and return
///  All Data MUST have EOI

    status = EOI_FLAG;
   17c36:	80 e0       	ldi	r24, 0x00	; 0
   17c38:	91 e0       	ldi	r25, 0x01	; 1
   17c3a:	9b 8b       	std	Y+19, r25	; 0x13
   17c3c:	8a 8b       	std	Y+18, r24	; 0x12
    len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   17c3e:	ae 01       	movw	r20, r28
   17c40:	4e 5e       	subi	r20, 0xEE	; 238
   17c42:	5f 4f       	sbci	r21, 0xFF	; 255
   17c44:	60 e0       	ldi	r22, 0x00	; 0
   17c46:	72 e0       	ldi	r23, 0x02	; 2
   17c48:	89 ef       	ldi	r24, 0xF9	; 249
   17c4a:	9c e1       	ldi	r25, 0x1C	; 28
   17c4c:	0e 94 92 89 	call	0x11324	; 0x11324 <gpib_read_str>
   17c50:	8c 01       	movw	r16, r24
    if(status & ERROR_MASK)
   17c52:	8a 89       	ldd	r24, Y+18	; 0x12
   17c54:	9b 89       	ldd	r25, Y+19	; 0x13
   17c56:	88 27       	eor	r24, r24
   17c58:	90 7d       	andi	r25, 0xD0	; 208
   17c5a:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   17c5e:	89 2b       	or	r24, r25
   17c60:	c1 f0       	breq	.+48     	; 0x17c92 <Amigo_Command+0x1f4>
    {
        AMIGOs->dsj = 1;
   17c62:	e0 91 78 19 	lds	r30, 0x1978	; 0x801978 <AMIGOs>
   17c66:	f0 91 79 19 	lds	r31, 0x1979	; 0x801979 <AMIGOs+0x1>
   17c6a:	81 e0       	ldi	r24, 0x01	; 1
   17c6c:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   17c6e:	87 81       	ldd	r24, Z+7	; 0x07
   17c70:	90 85       	ldd	r25, Z+8	; 0x08
   17c72:	80 62       	ori	r24, 0x20	; 32
   17c74:	90 87       	std	Z+8, r25	; 0x08
   17c76:	87 83       	std	Z+7, r24	; 0x07
        if(debuglevel & 1)
   17c78:	20 ff       	sbrs	r18, 0
   17c7a:	eb c1       	rjmp	.+982    	; 0x18052 <Amigo_Command+0x5b4>
            printf("[AMIGO Command:GPIB read error]\n");
   17c7c:	89 e2       	ldi	r24, 0x29	; 41
   17c7e:	9c e2       	ldi	r25, 0x2C	; 44
   17c80:	1f 92       	push	r1
   17c82:	9f 93       	push	r25
   17c84:	8f 93       	push	r24
   17c86:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   17c8a:	0f 90       	pop	r0
   17c8c:	0f 90       	pop	r0
   17c8e:	0f 90       	pop	r0
   17c90:	e0 c1       	rjmp	.+960    	; 0x18052 <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }
#if SDEBUG
    if(debuglevel & 32)
   17c92:	25 ff       	sbrs	r18, 5
   17c94:	10 c0       	rjmp	.+32     	; 0x17cb6 <Amigo_Command+0x218>
        printf("[AMIGO Command(%02XH): GPIB read bytes:%02XH]\n",
   17c96:	1f 93       	push	r17
   17c98:	0f 93       	push	r16
   17c9a:	ff 92       	push	r15
   17c9c:	ef 92       	push	r14
   17c9e:	8a ef       	ldi	r24, 0xFA	; 250
   17ca0:	9b e2       	ldi	r25, 0x2B	; 43
   17ca2:	1f 92       	push	r1
   17ca4:	9f 93       	push	r25
   17ca6:	8f 93       	push	r24
   17ca8:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   17cac:	0f b6       	in	r0, 0x3f	; 63
   17cae:	f8 94       	cli
   17cb0:	de bf       	out	0x3e, r29	; 62
   17cb2:	0f be       	out	0x3f, r0	; 63
   17cb4:	cd bf       	out	0x3d, r28	; 61
            secondary, len);
#endif
    if(!len)
   17cb6:	01 15       	cp	r16, r1
   17cb8:	11 05       	cpc	r17, r1
   17cba:	61 f4       	brne	.+24     	; 0x17cd4 <Amigo_Command+0x236>
    {
        AMIGOs->dsj = 1;
   17cbc:	e0 91 78 19 	lds	r30, 0x1978	; 0x801978 <AMIGOs>
   17cc0:	f0 91 79 19 	lds	r31, 0x1979	; 0x801979 <AMIGOs+0x1>
   17cc4:	81 e0       	ldi	r24, 0x01	; 1
   17cc6:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   17cc8:	87 81       	ldd	r24, Z+7	; 0x07
   17cca:	90 85       	ldd	r25, Z+8	; 0x08
   17ccc:	80 62       	ori	r24, 0x20	; 32
   17cce:	90 87       	std	Z+8, r25	; 0x08
   17cd0:	87 83       	std	Z+7, r24	; 0x07
   17cd2:	bf c1       	rjmp	.+894    	; 0x18052 <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }

    ptr = gpib_iobuff;
    op = *ptr++;
   17cd4:	60 91 f9 1c 	lds	r22, 0x1CF9	; 0x801cf9 <gpib_iobuff>

    if (secondary == 0x68)
   17cd8:	98 e6       	ldi	r25, 0x68	; 104
   17cda:	e9 16       	cp	r14, r25
   17cdc:	f1 04       	cpc	r15, r1
   17cde:	09 f0       	breq	.+2      	; 0x17ce2 <Amigo_Command+0x244>
   17ce0:	28 c1       	rjmp	.+592    	; 0x17f32 <Amigo_Command+0x494>
    {
        if(op == 0x00 && len == 2)
   17ce2:	61 11       	cpse	r22, r1
   17ce4:	2e c0       	rjmp	.+92     	; 0x17d42 <Amigo_Command+0x2a4>
   17ce6:	02 30       	cpi	r16, 0x02	; 2
   17ce8:	11 05       	cpc	r17, r1
   17cea:	09 f0       	breq	.+2      	; 0x17cee <Amigo_Command+0x250>
   17cec:	b7 c1       	rjmp	.+878    	; 0x1805c <Amigo_Command+0x5be>
        {
///  Reference: A40

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & 32)
   17cee:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17cf2:	85 ff       	sbrs	r24, 5
   17cf4:	0a c0       	rjmp	.+20     	; 0x17d0a <Amigo_Command+0x26c>
                printf("[AMIGO Cold Load Read Command]\n");
   17cf6:	8a ed       	ldi	r24, 0xDA	; 218
   17cf8:	9b e2       	ldi	r25, 0x2B	; 43
   17cfa:	1f 92       	push	r1
   17cfc:	9f 93       	push	r25
   17cfe:	8f 93       	push	r24
   17d00:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   17d04:	0f 90       	pop	r0
   17d06:	0f 90       	pop	r0
   17d08:	0f 90       	pop	r0
#endif
            ///TODO we do NOT support multiple units yet
            AMIGOs->unitNO = 0;
   17d0a:	e0 91 78 19 	lds	r30, 0x1978	; 0x801978 <AMIGOs>
   17d0e:	f0 91 79 19 	lds	r31, 0x1979	; 0x801979 <AMIGOs+0x1>
   17d12:	11 82       	std	Z+1, r1	; 0x01
            AMIGOs->dsj = 0;
   17d14:	16 82       	std	Z+6, r1	; 0x06
            AMIGOs->Errors = 0;
   17d16:	10 86       	std	Z+8, r1	; 0x08
   17d18:	17 82       	std	Z+7, r1	; 0x07
            /// Fill in temparary address
            tmp.cyl = 0;
   17d1a:	1c 82       	std	Y+4, r1	; 0x04
            tmp.head = ( (0xff & *ptr) >> 6) & 0x03;
   17d1c:	80 91 fa 1c 	lds	r24, 0x1CFA	; 0x801cfa <gpib_iobuff+0x1>
   17d20:	98 2f       	mov	r25, r24
   17d22:	92 95       	swap	r25
   17d24:	96 95       	lsr	r25
   17d26:	96 95       	lsr	r25
   17d28:	93 70       	andi	r25, 0x03	; 3
   17d2a:	9d 83       	std	Y+5, r25	; 0x05
            tmp.sector = 0x3f & *ptr;
   17d2c:	8f 73       	andi	r24, 0x3F	; 63
   17d2e:	8e 83       	std	Y+6, r24	; 0x06
            ++ptr;
            //update to real address on sucess
            amigo_seek((AMIGOStateType *) &tmp);
   17d30:	ce 01       	movw	r24, r28
   17d32:	01 96       	adiw	r24, 0x01	; 1
   17d34:	18 da       	rcall	.-3024   	; 0x17166 <amigo_seek>
            AMIGOs->state = AMIGO_COLD_LOAD_READ;
   17d36:	e0 91 78 19 	lds	r30, 0x1978	; 0x801978 <AMIGOs>
   17d3a:	f0 91 79 19 	lds	r31, 0x1979	; 0x801979 <AMIGOs+0x1>
   17d3e:	85 e0       	ldi	r24, 0x05	; 5
   17d40:	5c c1       	rjmp	.+696    	; 0x17ffa <Amigo_Command+0x55c>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 5)
   17d42:	62 30       	cpi	r22, 0x02	; 2
   17d44:	09 f0       	breq	.+2      	; 0x17d48 <Amigo_Command+0x2aa>
   17d46:	3f c0       	rjmp	.+126    	; 0x17dc6 <Amigo_Command+0x328>
   17d48:	05 30       	cpi	r16, 0x05	; 5
   17d4a:	11 05       	cpc	r17, r1
   17d4c:	d1 f4       	brne	.+52     	; 0x17d82 <Amigo_Command+0x2e4>
/// @brief 
///  Seek 1 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & 32)
   17d4e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17d52:	85 ff       	sbrs	r24, 5
   17d54:	0a c0       	rjmp	.+20     	; 0x17d6a <Amigo_Command+0x2cc>
                printf("[AMIGO Seek len=5]\n");
   17d56:	86 ec       	ldi	r24, 0xC6	; 198
   17d58:	9b e2       	ldi	r25, 0x2B	; 43
   17d5a:	1f 92       	push	r1
   17d5c:	9f 93       	push	r25
   17d5e:	8f 93       	push	r24
   17d60:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   17d64:	0f 90       	pop	r0
   17d66:	0f 90       	pop	r0
   17d68:	0f 90       	pop	r0
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17d6a:	80 91 fa 1c 	lds	r24, 0x1CFA	; 0x801cfa <gpib_iobuff+0x1>
   17d6e:	83 de       	rcall	.-762    	; 0x17a76 <amigo_check_unit>

            /// Fill in temparary address
            tmp.cyl = 0xff & *ptr++;
   17d70:	80 91 fb 1c 	lds	r24, 0x1CFB	; 0x801cfb <gpib_iobuff+0x2>
   17d74:	8c 83       	std	Y+4, r24	; 0x04
            tmp.head = 0xff & *ptr++;
   17d76:	80 91 fc 1c 	lds	r24, 0x1CFC	; 0x801cfc <gpib_iobuff+0x3>
   17d7a:	8d 83       	std	Y+5, r24	; 0x05
            tmp.sector = 0xff & *ptr++;
   17d7c:	80 91 fd 1c 	lds	r24, 0x1CFD	; 0x801cfd <gpib_iobuff+0x4>
   17d80:	1d c0       	rjmp	.+58     	; 0x17dbc <Amigo_Command+0x31e>
            //update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 6)
   17d82:	06 30       	cpi	r16, 0x06	; 6
   17d84:	11 05       	cpc	r17, r1
   17d86:	09 f0       	breq	.+2      	; 0x17d8a <Amigo_Command+0x2ec>
   17d88:	69 c1       	rjmp	.+722    	; 0x1805c <Amigo_Command+0x5be>
/// @brief 
///  Seek 2 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & 32)
   17d8a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17d8e:	85 ff       	sbrs	r24, 5
   17d90:	0a c0       	rjmp	.+20     	; 0x17da6 <Amigo_Command+0x308>
                printf("[AMIGO Seek len=6]\n");
   17d92:	82 eb       	ldi	r24, 0xB2	; 178
   17d94:	9b e2       	ldi	r25, 0x2B	; 43
   17d96:	1f 92       	push	r1
   17d98:	9f 93       	push	r25
   17d9a:	8f 93       	push	r24
   17d9c:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   17da0:	0f 90       	pop	r0
   17da2:	0f 90       	pop	r0
   17da4:	0f 90       	pop	r0
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17da6:	80 91 fa 1c 	lds	r24, 0x1CFA	; 0x801cfa <gpib_iobuff+0x1>
   17daa:	65 de       	rcall	.-822    	; 0x17a76 <amigo_check_unit>
            /// Fill in temparary address
            tmp.cyl = (0xff & *ptr++) << 8;       // MSB
            tmp.cyl |= (0xff & *ptr++);           // LSB
   17dac:	80 91 fc 1c 	lds	r24, 0x1CFC	; 0x801cfc <gpib_iobuff+0x3>
   17db0:	8c 83       	std	Y+4, r24	; 0x04
            tmp.head = 0xff & *ptr++;
   17db2:	80 91 fd 1c 	lds	r24, 0x1CFD	; 0x801cfd <gpib_iobuff+0x4>
   17db6:	8d 83       	std	Y+5, r24	; 0x05
            tmp.sector = 0xff & *ptr++;
   17db8:	80 91 fe 1c 	lds	r24, 0x1CFE	; 0x801cfe <gpib_iobuff+0x5>
            //update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
   17dbc:	8e 83       	std	Y+6, r24	; 0x06
   17dbe:	ce 01       	movw	r24, r28
   17dc0:	01 96       	adiw	r24, 0x01	; 1
   17dc2:	d1 d9       	rcall	.-3166   	; 0x17166 <amigo_seek>
   17dc4:	1b c1       	rjmp	.+566    	; 0x17ffc <Amigo_Command+0x55e>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x03 && len == 2)
   17dc6:	63 30       	cpi	r22, 0x03	; 3
   17dc8:	e9 f4       	brne	.+58     	; 0x17e04 <Amigo_Command+0x366>
   17dca:	02 30       	cpi	r16, 0x02	; 2
   17dcc:	11 05       	cpc	r17, r1
   17dce:	09 f0       	breq	.+2      	; 0x17dd2 <Amigo_Command+0x334>
   17dd0:	45 c1       	rjmp	.+650    	; 0x1805c <Amigo_Command+0x5be>
        {
///  Reference: A15
#if SDEBUG
            if(debuglevel & 32)
   17dd2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17dd6:	85 ff       	sbrs	r24, 5
   17dd8:	0a c0       	rjmp	.+20     	; 0x17dee <Amigo_Command+0x350>
                printf("[AMIGO Request Status Buffered Command]\n");
   17dda:	89 e8       	ldi	r24, 0x89	; 137
   17ddc:	9b e2       	ldi	r25, 0x2B	; 43
   17dde:	1f 92       	push	r1
   17de0:	9f 93       	push	r25
   17de2:	8f 93       	push	r24
   17de4:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   17de8:	0f 90       	pop	r0
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17dea:	0f 90       	pop	r0
   17dec:	0f 90       	pop	r0
   17dee:	80 91 fa 1c 	lds	r24, 0x1CFA	; 0x801cfa <gpib_iobuff+0x1>
            amigo_request_status();
   17df2:	41 de       	rcall	.-894    	; 0x17a76 <amigo_check_unit>
            AMIGOs->state = AMIGO_REQUEST_STATUS_BUFFERED;
   17df4:	7b d8       	rcall	.-3850   	; 0x16eec <amigo_request_status>
   17df6:	e0 91 78 19 	lds	r30, 0x1978	; 0x801978 <AMIGOs>
   17dfa:	f0 91 79 19 	lds	r31, 0x1979	; 0x801979 <AMIGOs+0x1>
   17dfe:	83 e0       	ldi	r24, 0x03	; 3
   17e00:	80 83       	st	Z, r24
            return(status & ERROR_MASK);
        }
        else if(op == 0x05 && len == 2)
   17e02:	27 c1       	rjmp	.+590    	; 0x18052 <Amigo_Command+0x5b4>
   17e04:	65 30       	cpi	r22, 0x05	; 5
   17e06:	d9 f4       	brne	.+54     	; 0x17e3e <Amigo_Command+0x3a0>
   17e08:	02 30       	cpi	r16, 0x02	; 2
   17e0a:	11 05       	cpc	r17, r1
   17e0c:	09 f0       	breq	.+2      	; 0x17e10 <Amigo_Command+0x372>
        {
///  Reference: A35
#if SDEBUG
            if(debuglevel & 32)
   17e0e:	26 c1       	rjmp	.+588    	; 0x1805c <Amigo_Command+0x5be>
   17e10:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17e14:	85 ff       	sbrs	r24, 5
                printf("[AMIGO Read Unbuffered Command]\n");
   17e16:	0a c0       	rjmp	.+20     	; 0x17e2c <Amigo_Command+0x38e>
   17e18:	88 e6       	ldi	r24, 0x68	; 104
   17e1a:	9b e2       	ldi	r25, 0x2B	; 43
   17e1c:	1f 92       	push	r1
   17e1e:	9f 93       	push	r25
   17e20:	8f 93       	push	r24
   17e22:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   17e26:	0f 90       	pop	r0
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17e28:	0f 90       	pop	r0
   17e2a:	0f 90       	pop	r0
   17e2c:	80 91 fa 1c 	lds	r24, 0x1CFA	; 0x801cfa <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_READ_UNBUFFERED;
   17e30:	22 de       	rcall	.-956    	; 0x17a76 <amigo_check_unit>
   17e32:	e0 91 78 19 	lds	r30, 0x1978	; 0x801978 <AMIGOs>
   17e36:	f0 91 79 19 	lds	r31, 0x1979	; 0x801979 <AMIGOs+0x1>
   17e3a:	86 e0       	ldi	r24, 0x06	; 6
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x07 && len == 4)
   17e3c:	de c0       	rjmp	.+444    	; 0x17ffa <Amigo_Command+0x55c>
   17e3e:	67 30       	cpi	r22, 0x07	; 7
   17e40:	f9 f4       	brne	.+62     	; 0x17e80 <Amigo_Command+0x3e2>
   17e42:	04 30       	cpi	r16, 0x04	; 4
   17e44:	11 05       	cpc	r17, r1
   17e46:	09 f0       	breq	.+2      	; 0x17e4a <Amigo_Command+0x3ac>
        {
            uint16_t sectors;
#if SDEBUG
            if(debuglevel & 32)
   17e48:	09 c1       	rjmp	.+530    	; 0x1805c <Amigo_Command+0x5be>
   17e4a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17e4e:	85 ff       	sbrs	r24, 5
                printf("[AMIGO Verify]\n");
   17e50:	0a c0       	rjmp	.+20     	; 0x17e66 <Amigo_Command+0x3c8>
   17e52:	88 e5       	ldi	r24, 0x58	; 88
   17e54:	9b e2       	ldi	r25, 0x2B	; 43
   17e56:	1f 92       	push	r1
   17e58:	9f 93       	push	r25
   17e5a:	8f 93       	push	r24
   17e5c:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   17e60:	0f 90       	pop	r0
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17e62:	0f 90       	pop	r0
   17e64:	0f 90       	pop	r0
   17e66:	80 91 fa 1c 	lds	r24, 0x1CFA	; 0x801cfa <gpib_iobuff+0x1>
            sectors = (0xff & *ptr++) << 8;
   17e6a:	05 de       	rcall	.-1014   	; 0x17a76 <amigo_check_unit>
   17e6c:	80 91 fb 1c 	lds	r24, 0x1CFB	; 0x801cfb <gpib_iobuff+0x2>
            sectors |= (0xff & *ptr++);
            return ( amigo_verify( sectors) );
   17e70:	90 e0       	ldi	r25, 0x00	; 0
   17e72:	98 2f       	mov	r25, r24
   17e74:	88 27       	eor	r24, r24
   17e76:	20 91 fc 1c 	lds	r18, 0x1CFC	; 0x801cfc <gpib_iobuff+0x3>
   17e7a:	82 2b       	or	r24, r18
        }
        else if(op == 0x08 && len == 2)
   17e7c:	9f d9       	rcall	.-3266   	; 0x171bc <amigo_verify>
   17e7e:	f1 c0       	rjmp	.+482    	; 0x18062 <Amigo_Command+0x5c4>
   17e80:	68 30       	cpi	r22, 0x08	; 8
   17e82:	d9 f4       	brne	.+54     	; 0x17eba <Amigo_Command+0x41c>
   17e84:	02 30       	cpi	r16, 0x02	; 2
   17e86:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   17e88:	09 f0       	breq	.+2      	; 0x17e8c <Amigo_Command+0x3ee>
   17e8a:	e8 c0       	rjmp	.+464    	; 0x1805c <Amigo_Command+0x5be>
   17e8c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("[AMIGO Write Unbuffered Command]\n");
   17e90:	85 ff       	sbrs	r24, 5
   17e92:	0a c0       	rjmp	.+20     	; 0x17ea8 <Amigo_Command+0x40a>
   17e94:	86 e3       	ldi	r24, 0x36	; 54
   17e96:	9b e2       	ldi	r25, 0x2B	; 43
   17e98:	1f 92       	push	r1
   17e9a:	9f 93       	push	r25
   17e9c:	8f 93       	push	r24
   17e9e:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17ea2:	0f 90       	pop	r0
   17ea4:	0f 90       	pop	r0
   17ea6:	0f 90       	pop	r0
   17ea8:	80 91 fa 1c 	lds	r24, 0x1CFA	; 0x801cfa <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_WRITE_UNBUFFERED;
   17eac:	e4 dd       	rcall	.-1080   	; 0x17a76 <amigo_check_unit>
   17eae:	e0 91 78 19 	lds	r30, 0x1978	; 0x801978 <AMIGOs>
   17eb2:	f0 91 79 19 	lds	r31, 0x1979	; 0x801979 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if((op == 0x0B || op == 0x2b) && len == 2)
   17eb6:	88 e0       	ldi	r24, 0x08	; 8
   17eb8:	a0 c0       	rjmp	.+320    	; 0x17ffa <Amigo_Command+0x55c>
   17eba:	86 2f       	mov	r24, r22
   17ebc:	8f 7d       	andi	r24, 0xDF	; 223
   17ebe:	8b 30       	cpi	r24, 0x0B	; 11
   17ec0:	d9 f4       	brne	.+54     	; 0x17ef8 <Amigo_Command+0x45a>
   17ec2:	02 30       	cpi	r16, 0x02	; 2
   17ec4:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   17ec6:	09 f0       	breq	.+2      	; 0x17eca <Amigo_Command+0x42c>
   17ec8:	c9 c0       	rjmp	.+402    	; 0x1805c <Amigo_Command+0x5be>
   17eca:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("[AMIGO Initialize Command]\n");
   17ece:	85 ff       	sbrs	r24, 5
   17ed0:	0a c0       	rjmp	.+20     	; 0x17ee6 <Amigo_Command+0x448>
   17ed2:	8a e1       	ldi	r24, 0x1A	; 26
   17ed4:	9b e2       	ldi	r25, 0x2B	; 43
   17ed6:	1f 92       	push	r1
   17ed8:	9f 93       	push	r25
   17eda:	8f 93       	push	r24
   17edc:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17ee0:	0f 90       	pop	r0
   17ee2:	0f 90       	pop	r0
   17ee4:	0f 90       	pop	r0
   17ee6:	80 91 fa 1c 	lds	r24, 0x1CFA	; 0x801cfa <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_INITIALIZE;
   17eea:	c5 dd       	rcall	.-1142   	; 0x17a76 <amigo_check_unit>
   17eec:	e0 91 78 19 	lds	r30, 0x1978	; 0x801978 <AMIGOs>
   17ef0:	f0 91 79 19 	lds	r31, 0x1979	; 0x801979 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x14 && len == 2)
   17ef4:	8a e0       	ldi	r24, 0x0A	; 10
   17ef6:	81 c0       	rjmp	.+258    	; 0x17ffa <Amigo_Command+0x55c>
   17ef8:	64 31       	cpi	r22, 0x14	; 20
   17efa:	09 f0       	breq	.+2      	; 0x17efe <Amigo_Command+0x460>
   17efc:	af c0       	rjmp	.+350    	; 0x1805c <Amigo_Command+0x5be>
   17efe:	02 30       	cpi	r16, 0x02	; 2
   17f00:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   17f02:	09 f0       	breq	.+2      	; 0x17f06 <Amigo_Command+0x468>
   17f04:	ab c0       	rjmp	.+342    	; 0x1805c <Amigo_Command+0x5be>
   17f06:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("[AMIGO Request Logical Address Command]\n");
   17f0a:	85 ff       	sbrs	r24, 5
   17f0c:	0a c0       	rjmp	.+20     	; 0x17f22 <Amigo_Command+0x484>
   17f0e:	81 ef       	ldi	r24, 0xF1	; 241
   17f10:	9a e2       	ldi	r25, 0x2A	; 42
   17f12:	1f 92       	push	r1
   17f14:	9f 93       	push	r25
   17f16:	8f 93       	push	r24
   17f18:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   17f1c:	0f 90       	pop	r0
#endif
            amigo_request_logical_address();
   17f1e:	0f 90       	pop	r0
   17f20:	0f 90       	pop	r0
            AMIGOs->state = AMIGO_REQUEST_LOGICAL_ADDRESS;
   17f22:	0e 94 68 b7 	call	0x16ed0	; 0x16ed0 <amigo_request_logical_address>
   17f26:	e0 91 78 19 	lds	r30, 0x1978	; 0x801978 <AMIGOs>
   17f2a:	f0 91 79 19 	lds	r31, 0x1979	; 0x801979 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x69)
   17f2e:	84 e0       	ldi	r24, 0x04	; 4
   17f30:	64 c0       	rjmp	.+200    	; 0x17ffa <Amigo_Command+0x55c>
   17f32:	89 e6       	ldi	r24, 0x69	; 105
   17f34:	e8 16       	cp	r14, r24
    {
        if(op == 0x08 && len == 2)
   17f36:	f1 04       	cpc	r15, r1
   17f38:	f1 f4       	brne	.+60     	; 0x17f76 <Amigo_Command+0x4d8>
   17f3a:	68 30       	cpi	r22, 0x08	; 8
   17f3c:	09 f0       	breq	.+2      	; 0x17f40 <Amigo_Command+0x4a2>
   17f3e:	8e c0       	rjmp	.+284    	; 0x1805c <Amigo_Command+0x5be>
   17f40:	02 30       	cpi	r16, 0x02	; 2
   17f42:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   17f44:	09 f0       	breq	.+2      	; 0x17f48 <Amigo_Command+0x4aa>
   17f46:	8a c0       	rjmp	.+276    	; 0x1805c <Amigo_Command+0x5be>
   17f48:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("[AMIGO Write Buffered Command]\n");
   17f4c:	85 ff       	sbrs	r24, 5
   17f4e:	0a c0       	rjmp	.+20     	; 0x17f64 <Amigo_Command+0x4c6>
   17f50:	81 ed       	ldi	r24, 0xD1	; 209
   17f52:	9a e2       	ldi	r25, 0x2A	; 42
   17f54:	1f 92       	push	r1
   17f56:	9f 93       	push	r25
   17f58:	8f 93       	push	r24
   17f5a:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17f5e:	0f 90       	pop	r0
   17f60:	0f 90       	pop	r0
   17f62:	0f 90       	pop	r0
   17f64:	80 91 fa 1c 	lds	r24, 0x1CFA	; 0x801cfa <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_WRITE_BUFFERED;
   17f68:	86 dd       	rcall	.-1268   	; 0x17a76 <amigo_check_unit>
   17f6a:	e0 91 78 19 	lds	r30, 0x1978	; 0x801978 <AMIGOs>
   17f6e:	f0 91 79 19 	lds	r31, 0x1979	; 0x801979 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x6A)
   17f72:	89 e0       	ldi	r24, 0x09	; 9
   17f74:	42 c0       	rjmp	.+132    	; 0x17ffa <Amigo_Command+0x55c>
   17f76:	9a e6       	ldi	r25, 0x6A	; 106
   17f78:	e9 16       	cp	r14, r25
   17f7a:	f1 04       	cpc	r15, r1
    {
        if(op == 0x08 && len == 2)
   17f7c:	09 f0       	breq	.+2      	; 0x17f80 <Amigo_Command+0x4e2>
   17f7e:	47 c0       	rjmp	.+142    	; 0x1800e <Amigo_Command+0x570>
   17f80:	68 30       	cpi	r22, 0x08	; 8
   17f82:	f1 f4       	brne	.+60     	; 0x17fc0 <Amigo_Command+0x522>
   17f84:	02 30       	cpi	r16, 0x02	; 2
   17f86:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   17f88:	09 f0       	breq	.+2      	; 0x17f8c <Amigo_Command+0x4ee>
   17f8a:	68 c0       	rjmp	.+208    	; 0x1805c <Amigo_Command+0x5be>
   17f8c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("[AMIGO Request Status Unbuffered Command]\n");
   17f90:	85 ff       	sbrs	r24, 5
   17f92:	0a c0       	rjmp	.+20     	; 0x17fa8 <Amigo_Command+0x50a>
   17f94:	86 ea       	ldi	r24, 0xA6	; 166
   17f96:	9a e2       	ldi	r25, 0x2A	; 42
   17f98:	1f 92       	push	r1
   17f9a:	9f 93       	push	r25
   17f9c:	8f 93       	push	r24
   17f9e:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17fa2:	0f 90       	pop	r0
   17fa4:	0f 90       	pop	r0
   17fa6:	0f 90       	pop	r0
   17fa8:	80 91 fa 1c 	lds	r24, 0x1CFA	; 0x801cfa <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_REQUEST_STATUS_UNBUFFERED;
   17fac:	64 dd       	rcall	.-1336   	; 0x17a76 <amigo_check_unit>
   17fae:	e0 91 78 19 	lds	r30, 0x1978	; 0x801978 <AMIGOs>
   17fb2:	f0 91 79 19 	lds	r31, 0x1979	; 0x801979 <AMIGOs+0x1>
            amigo_request_status();
   17fb6:	82 e0       	ldi	r24, 0x02	; 2
   17fb8:	80 83       	st	Z, r24
   17fba:	0e 94 76 b7 	call	0x16eec	; 0x16eec <amigo_request_status>
            return(status & ERROR_MASK);
        }
        if(op == 0x05 && len == 2)
   17fbe:	49 c0       	rjmp	.+146    	; 0x18052 <Amigo_Command+0x5b4>
   17fc0:	65 30       	cpi	r22, 0x05	; 5
   17fc2:	09 f0       	breq	.+2      	; 0x17fc6 <Amigo_Command+0x528>
   17fc4:	4b c0       	rjmp	.+150    	; 0x1805c <Amigo_Command+0x5be>
   17fc6:	02 30       	cpi	r16, 0x02	; 2
   17fc8:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   17fca:	09 f0       	breq	.+2      	; 0x17fce <Amigo_Command+0x530>
   17fcc:	47 c0       	rjmp	.+142    	; 0x1805c <Amigo_Command+0x5be>
   17fce:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("[AMIGO Read Buffered Command]\n");
   17fd2:	85 ff       	sbrs	r24, 5
   17fd4:	0a c0       	rjmp	.+20     	; 0x17fea <Amigo_Command+0x54c>
   17fd6:	87 e8       	ldi	r24, 0x87	; 135
   17fd8:	9a e2       	ldi	r25, 0x2A	; 42
   17fda:	1f 92       	push	r1
   17fdc:	9f 93       	push	r25
   17fde:	8f 93       	push	r24
   17fe0:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17fe4:	0f 90       	pop	r0
   17fe6:	0f 90       	pop	r0
   17fe8:	0f 90       	pop	r0
   17fea:	80 91 fa 1c 	lds	r24, 0x1CFA	; 0x801cfa <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_READ_BUFFERED;
   17fee:	43 dd       	rcall	.-1402   	; 0x17a76 <amigo_check_unit>
   17ff0:	e0 91 78 19 	lds	r30, 0x1978	; 0x801978 <AMIGOs>
   17ff4:	f0 91 79 19 	lds	r31, 0x1979	; 0x801979 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
   17ff8:	87 e0       	ldi	r24, 0x07	; 7
   17ffa:	80 83       	st	Z, r24
   17ffc:	e0 91 7a 19 	lds	r30, 0x197A	; 0x80197a <AMIGOp>
   18000:	f0 91 7b 19 	lds	r31, 0x197B	; 0x80197b <AMIGOp+0x1>
   18004:	81 81       	ldd	r24, Z+1	; 0x01
   18006:	90 e0       	ldi	r25, 0x00	; 0
   18008:	0e 94 f0 84 	call	0x109e0	; 0x109e0 <gpib_enable_PPR>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x6C)
   1800c:	22 c0       	rjmp	.+68     	; 0x18052 <Amigo_Command+0x5b4>
   1800e:	8c e6       	ldi	r24, 0x6C	; 108
   18010:	e8 16       	cp	r14, r24
    {
        if(op == 0x18 && len == 5)
   18012:	f1 04       	cpc	r15, r1
   18014:	d1 f4       	brne	.+52     	; 0x1804a <Amigo_Command+0x5ac>
   18016:	68 31       	cpi	r22, 0x18	; 24
   18018:	09 f5       	brne	.+66     	; 0x1805c <Amigo_Command+0x5be>
   1801a:	05 30       	cpi	r16, 0x05	; 5
        {
///  Reference: A48 ..  A50

            uint8_t db;
#if SDEBUG
            if(debuglevel & 32)
   1801c:	11 05       	cpc	r17, r1
   1801e:	f1 f4       	brne	.+60     	; 0x1805c <Amigo_Command+0x5be>
   18020:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("[AMIGO Format]\n");
   18024:	85 ff       	sbrs	r24, 5
   18026:	0a c0       	rjmp	.+20     	; 0x1803c <Amigo_Command+0x59e>
   18028:	87 e7       	ldi	r24, 0x77	; 119
   1802a:	9a e2       	ldi	r25, 0x2A	; 42
   1802c:	1f 92       	push	r1
   1802e:	9f 93       	push	r25
   18030:	8f 93       	push	r24
   18032:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   18036:	0f 90       	pop	r0
   18038:	0f 90       	pop	r0
   1803a:	0f 90       	pop	r0
            ++ptr; // override not used
            ++ptr; // interleave not used
            db = 0xff & *ptr++;
            amigo_format(db);
   1803c:	80 91 fa 1c 	lds	r24, 0x1CFA	; 0x801cfa <gpib_iobuff+0x1>
   18040:	1a dd       	rcall	.-1484   	; 0x17a76 <amigo_check_unit>
   18042:	80 91 fd 1c 	lds	r24, 0x1CFD	; 0x801cfd <gpib_iobuff+0x4>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x70)                   // HP-300 Clear
   18046:	4b d9       	rcall	.-3434   	; 0x172de <amigo_format>
   18048:	04 c0       	rjmp	.+8      	; 0x18052 <Amigo_Command+0x5b4>
    {
///  Reference: A23
        ++ptr;                                    // Dummy byte
        return(status & ERROR_MASK);
   1804a:	90 e7       	ldi	r25, 0x70	; 112
   1804c:	e9 16       	cp	r14, r25
   1804e:	f1 04       	cpc	r15, r1
   18050:	29 f4       	brne	.+10     	; 0x1805c <Amigo_Command+0x5be>
   18052:	8a 89       	ldd	r24, Y+18	; 0x12
    }
    return ( amigo_todo_op(secondary, op, len) );
   18054:	9b 89       	ldd	r25, Y+19	; 0x13
   18056:	88 27       	eor	r24, r24
   18058:	90 7d       	andi	r25, 0xD0	; 208
   1805a:	03 c0       	rjmp	.+6      	; 0x18062 <Amigo_Command+0x5c4>
}
   1805c:	a8 01       	movw	r20, r16
   1805e:	8e 2d       	mov	r24, r14
   18060:	d1 db       	rcall	.-2142   	; 0x17804 <amigo_todo_op>
   18062:	63 96       	adiw	r28, 0x13	; 19
   18064:	e6 e0       	ldi	r30, 0x06	; 6
   18066:	0c 94 3b e8 	jmp	0x1d076	; 0x1d076 <__epilogue_restores__+0x18>

0001806a <Amigo_Execute>:
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)


int Amigo_Execute( int secondary )
{
   1806a:	cf 93       	push	r28
   1806c:	df 93       	push	r29
   1806e:	ec 01       	movw	r28, r24
#if SDEBUG
    if(debuglevel & 32)
   18070:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   18074:	85 ff       	sbrs	r24, 5
   18076:	19 c0       	rjmp	.+50     	; 0x180aa <Amigo_Execute+0x40>
        printf("[AMIGO Execute(%02XH): listen:%02XH, talk:%02XH]\n",
   18078:	80 91 fd 1e 	lds	r24, 0x1EFD	; 0x801efd <talking>
   1807c:	1f 92       	push	r1
   1807e:	8f 93       	push	r24
   18080:	80 91 ff 1e 	lds	r24, 0x1EFF	; 0x801eff <listening>
   18084:	1f 92       	push	r1
   18086:	8f 93       	push	r24
   18088:	df 93       	push	r29
   1808a:	cf 93       	push	r28
   1808c:	85 e4       	ldi	r24, 0x45	; 69
   1808e:	9a e2       	ldi	r25, 0x2A	; 42
   18090:	1f 92       	push	r1
   18092:	9f 93       	push	r25
   18094:	8f 93       	push	r24
   18096:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1809a:	8d b7       	in	r24, 0x3d	; 61
   1809c:	9e b7       	in	r25, 0x3e	; 62
   1809e:	09 96       	adiw	r24, 0x09	; 9
   180a0:	0f b6       	in	r0, 0x3f	; 63
   180a2:	f8 94       	cli
   180a4:	9e bf       	out	0x3e, r25	; 62
   180a6:	0f be       	out	0x3f, r0	; 63
   180a8:	8d bf       	out	0x3d, r24	; 61
            secondary, listening, talking);
#endif

    if(talking == UNT)
   180aa:	80 91 fd 1e 	lds	r24, 0x1EFD	; 0x801efd <talking>
   180ae:	8f 35       	cpi	r24, 0x5F	; 95
   180b0:	09 f4       	brne	.+2      	; 0x180b4 <Amigo_Execute+0x4a>
   180b2:	ad c0       	rjmp	.+346    	; 0x1820e <Amigo_Execute+0x1a4>
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   180b4:	90 e0       	ldi	r25, 0x00	; 0
   180b6:	0e 94 41 8b 	call	0x11682	; 0x11682 <AMIGO_is_MTA>
   180ba:	89 2b       	or	r24, r25
   180bc:	39 f0       	breq	.+14     	; 0x180cc <Amigo_Execute+0x62>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
   180be:	ce 01       	movw	r24, r28
   180c0:	87 7f       	andi	r24, 0xF7	; 247
   180c2:	80 36       	cpi	r24, 0x60	; 96
   180c4:	91 05       	cpc	r25, r1
   180c6:	09 f0       	breq	.+2      	; 0x180ca <Amigo_Execute+0x60>
   180c8:	a2 c0       	rjmp	.+324    	; 0x1820e <Amigo_Execute+0x1a4>
   180ca:	08 c0       	rjmp	.+16     	; 0x180dc <Amigo_Execute+0x72>
#endif

    if(talking == UNT)
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   180cc:	80 91 ff 1e 	lds	r24, 0x1EFF	; 0x801eff <listening>
   180d0:	90 e0       	ldi	r25, 0x00	; 0
   180d2:	0e 94 30 8b 	call	0x11660	; 0x11660 <AMIGO_is_MLA>
   180d6:	89 2b       	or	r24, r25
   180d8:	91 f7       	brne	.-28     	; 0x180be <Amigo_Execute+0x54>
   180da:	99 c0       	rjmp	.+306    	; 0x1820e <Amigo_Execute+0x1a4>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   180dc:	e0 91 7a 19 	lds	r30, 0x197A	; 0x80197a <AMIGOp>
   180e0:	f0 91 7b 19 	lds	r31, 0x197B	; 0x80197b <AMIGOp+0x1>
   180e4:	81 81       	ldd	r24, Z+1	; 0x01
   180e6:	90 e0       	ldi	r25, 0x00	; 0
   180e8:	0e 94 21 85 	call	0x10a42	; 0x10a42 <gpib_disable_PPR>

    if(secondary == 0x60)
   180ec:	c0 36       	cpi	r28, 0x60	; 96
   180ee:	d1 05       	cpc	r29, r1
   180f0:	09 f0       	breq	.+2      	; 0x180f4 <Amigo_Execute+0x8a>
   180f2:	4e c0       	rjmp	.+156    	; 0x18190 <Amigo_Execute+0x126>
    {
        switch(AMIGOs->state)
   180f4:	e0 91 78 19 	lds	r30, 0x1978	; 0x801978 <AMIGOs>
   180f8:	f0 91 79 19 	lds	r31, 0x1979	; 0x801979 <AMIGOs+0x1>
   180fc:	e0 81       	ld	r30, Z
   180fe:	8e 2f       	mov	r24, r30
   18100:	90 e0       	ldi	r25, 0x00	; 0
   18102:	8b 30       	cpi	r24, 0x0B	; 11
   18104:	91 05       	cpc	r25, r1
   18106:	08 f0       	brcs	.+2      	; 0x1810a <Amigo_Execute+0xa0>
   18108:	41 c0       	rjmp	.+130    	; 0x1818c <Amigo_Execute+0x122>
   1810a:	fc 01       	movw	r30, r24
   1810c:	e0 52       	subi	r30, 0x20	; 32
   1810e:	ff 4f       	sbci	r31, 0xFF	; 255
   18110:	0c 94 cf e7 	jmp	0x1cf9e	; 0x1cf9e <__tablejump2__>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_COLD_LOAD_READ:
#if SDEBUG
                if(debuglevel & 32)
   18114:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   18118:	85 ff       	sbrs	r24, 5
   1811a:	18 c0       	rjmp	.+48     	; 0x1814c <Amigo_Execute+0xe2>
                    printf("[AMIGO Execute Cold Load Read]\n");
   1811c:	85 e2       	ldi	r24, 0x25	; 37
   1811e:	9a e2       	ldi	r25, 0x2A	; 42
   18120:	0d c0       	rjmp	.+26     	; 0x1813c <Amigo_Execute+0xd2>
#endif
                return ( amigo_buffered_read() );
            case AMIGO_READ_UNBUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   18122:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   18126:	85 ff       	sbrs	r24, 5
   18128:	11 c0       	rjmp	.+34     	; 0x1814c <Amigo_Execute+0xe2>
                    printf("[AMIGO Execute Read Unbuffered]\n");
   1812a:	84 e0       	ldi	r24, 0x04	; 4
   1812c:	9a e2       	ldi	r25, 0x2A	; 42
   1812e:	06 c0       	rjmp	.+12     	; 0x1813c <Amigo_Execute+0xd2>
#endif
                return ( amigo_buffered_read() );
            case AMIGO_READ_BUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   18130:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   18134:	85 ff       	sbrs	r24, 5
   18136:	0a c0       	rjmp	.+20     	; 0x1814c <Amigo_Execute+0xe2>
                    printf("[AMIGO Execute Read Buffered]\n");
   18138:	85 ee       	ldi	r24, 0xE5	; 229
   1813a:	99 e2       	ldi	r25, 0x29	; 41
   1813c:	1f 92       	push	r1
   1813e:	9f 93       	push	r25
   18140:	8f 93       	push	r24
   18142:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   18146:	0f 90       	pop	r0
   18148:	0f 90       	pop	r0
#endif
                return ( amigo_buffered_read() );
   1814a:	0f 90       	pop	r0
   1814c:	5a d9       	rcall	.-3404   	; 0x17402 <amigo_buffered_read>
            case AMIGO_WRITE_UNBUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   1814e:	61 c0       	rjmp	.+194    	; 0x18212 <Amigo_Execute+0x1a8>
   18150:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   18154:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Write Unbuffered]\n");
   18156:	18 c0       	rjmp	.+48     	; 0x18188 <Amigo_Execute+0x11e>
   18158:	83 ec       	ldi	r24, 0xC3	; 195
   1815a:	99 e2       	ldi	r25, 0x29	; 41
#endif
                return ( amigo_buffered_write() );
            case AMIGO_INITIALIZE:
#if SDEBUG
                if(debuglevel & 32)
   1815c:	0d c0       	rjmp	.+26     	; 0x18178 <Amigo_Execute+0x10e>
   1815e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   18162:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Initialize]\n");
   18164:	11 c0       	rjmp	.+34     	; 0x18188 <Amigo_Execute+0x11e>
   18166:	87 ea       	ldi	r24, 0xA7	; 167
   18168:	99 e2       	ldi	r25, 0x29	; 41
#endif
                return ( amigo_buffered_write() );
            case AMIGO_WRITE_BUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   1816a:	06 c0       	rjmp	.+12     	; 0x18178 <Amigo_Execute+0x10e>
   1816c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   18170:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Write Buffered]\n");
   18172:	0a c0       	rjmp	.+20     	; 0x18188 <Amigo_Execute+0x11e>
   18174:	87 e8       	ldi	r24, 0x87	; 135
   18176:	99 e2       	ldi	r25, 0x29	; 41
   18178:	1f 92       	push	r1
   1817a:	9f 93       	push	r25
   1817c:	8f 93       	push	r24
   1817e:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   18182:	0f 90       	pop	r0
#endif
                return ( amigo_buffered_write() );
   18184:	0f 90       	pop	r0
   18186:	0f 90       	pop	r0
   18188:	00 da       	rcall	.-3072   	; 0x1758a <amigo_buffered_write>
            default:
                return ( amigo_todo(secondary) );
   1818a:	43 c0       	rjmp	.+134    	; 0x18212 <Amigo_Execute+0x1a8>
   1818c:	80 e6       	ldi	r24, 0x60	; 96
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    if(secondary == 0x68)
   1818e:	3d c0       	rjmp	.+122    	; 0x1820a <Amigo_Execute+0x1a0>
   18190:	c8 36       	cpi	r28, 0x68	; 104
   18192:	d1 05       	cpc	r29, r1
    {
        switch(AMIGOs->state)
   18194:	e1 f5       	brne	.+120    	; 0x1820e <Amigo_Execute+0x1a4>
   18196:	e0 91 78 19 	lds	r30, 0x1978	; 0x801978 <AMIGOs>
   1819a:	f0 91 79 19 	lds	r31, 0x1979	; 0x801979 <AMIGOs+0x1>
   1819e:	80 81       	ld	r24, Z
   181a0:	82 30       	cpi	r24, 0x02	; 2
   181a2:	81 f0       	breq	.+32     	; 0x181c4 <Amigo_Execute+0x15a>
   181a4:	18 f4       	brcc	.+6      	; 0x181ac <Amigo_Execute+0x142>
   181a6:	88 23       	and	r24, r24
   181a8:	91 f1       	breq	.+100    	; 0x1820e <Amigo_Execute+0x1a4>
   181aa:	2e c0       	rjmp	.+92     	; 0x18208 <Amigo_Execute+0x19e>
   181ac:	83 30       	cpi	r24, 0x03	; 3
   181ae:	19 f0       	breq	.+6      	; 0x181b6 <Amigo_Execute+0x14c>
   181b0:	84 30       	cpi	r24, 0x04	; 4
   181b2:	c9 f0       	breq	.+50     	; 0x181e6 <Amigo_Execute+0x17c>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_REQUEST_STATUS_BUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   181b4:	29 c0       	rjmp	.+82     	; 0x18208 <Amigo_Execute+0x19e>
   181b6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   181ba:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Request Status Buffered]\n");
   181bc:	11 c0       	rjmp	.+34     	; 0x181e0 <Amigo_Execute+0x176>
   181be:	8e e5       	ldi	r24, 0x5E	; 94
   181c0:	99 e2       	ldi	r25, 0x29	; 41
#endif
                return ( amigo_send_status() );
            case AMIGO_REQUEST_STATUS_UNBUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   181c2:	06 c0       	rjmp	.+12     	; 0x181d0 <Amigo_Execute+0x166>
   181c4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   181c8:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Exicute Request Status Unbuffered]\n");
   181ca:	0a c0       	rjmp	.+20     	; 0x181e0 <Amigo_Execute+0x176>
   181cc:	83 e3       	ldi	r24, 0x33	; 51
   181ce:	99 e2       	ldi	r25, 0x29	; 41
   181d0:	1f 92       	push	r1
   181d2:	9f 93       	push	r25
   181d4:	8f 93       	push	r24
   181d6:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   181da:	0f 90       	pop	r0
   181dc:	0f 90       	pop	r0
#endif
                return ( amigo_send_status() );
   181de:	0f 90       	pop	r0
   181e0:	0e 94 2c b8 	call	0x17058	; 0x17058 <amigo_send_status>
            case AMIGO_REQUEST_LOGICAL_ADDRESS:
#if SDEBUG
                if(debuglevel & 32)
   181e4:	16 c0       	rjmp	.+44     	; 0x18212 <Amigo_Execute+0x1a8>
   181e6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   181ea:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Request Logical Address]\n");
   181ec:	0a c0       	rjmp	.+20     	; 0x18202 <Amigo_Execute+0x198>
   181ee:	8a e0       	ldi	r24, 0x0A	; 10
   181f0:	99 e2       	ldi	r25, 0x29	; 41
   181f2:	1f 92       	push	r1
   181f4:	9f 93       	push	r25
   181f6:	8f 93       	push	r24
   181f8:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   181fc:	0f 90       	pop	r0
   181fe:	0f 90       	pop	r0
#endif
                return ( amigo_send_logical_address() );
   18200:	0f 90       	pop	r0
   18202:	0e 94 ce b7 	call	0x16f9c	; 0x16f9c <amigo_send_logical_address>
            default:
                return ( amigo_todo(secondary) );
   18206:	05 c0       	rjmp	.+10     	; 0x18212 <Amigo_Execute+0x1a8>
   18208:	88 e6       	ldi	r24, 0x68	; 104
   1820a:	a5 db       	rcall	.-2230   	; 0x17956 <amigo_todo>
    if(secondary == 0x68)
    {
        switch(AMIGOs->state)
        {
            case AMIGO_IDLE:
                return(0);
   1820c:	02 c0       	rjmp	.+4      	; 0x18212 <Amigo_Execute+0x1a8>
   1820e:	80 e0       	ldi	r24, 0x00	; 0
                return ( amigo_todo(secondary) );
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    return(0);
}
   18210:	90 e0       	ldi	r25, 0x00	; 0
   18212:	df 91       	pop	r29
   18214:	cf 91       	pop	r28
   18216:	08 95       	ret

00018218 <AMIGO_COMMANDS>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{
   18218:	cf 93       	push	r28
   1821a:	df 93       	push	r29
   1821c:	c8 2f       	mov	r28, r24

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   1821e:	80 91 fd 1e 	lds	r24, 0x1EFD	; 0x801efd <talking>
   18222:	90 e0       	ldi	r25, 0x00	; 0
   18224:	0e 94 41 8b 	call	0x11682	; 0x11682 <AMIGO_is_MTA>
   18228:	89 2b       	or	r24, r25
   1822a:	51 f0       	breq	.+20     	; 0x18240 <AMIGO_COMMANDS+0x28>
    {

        if(talking == UNT && AMIGO_is_MLA(listening))
   1822c:	80 91 fd 1e 	lds	r24, 0x1EFD	; 0x801efd <talking>
   18230:	8f 35       	cpi	r24, 0x5F	; 95
   18232:	71 f4       	brne	.+28     	; 0x18250 <AMIGO_COMMANDS+0x38>
   18234:	80 91 ff 1e 	lds	r24, 0x1EFF	; 0x801eff <listening>
   18238:	90 e0       	ldi	r25, 0x00	; 0
   1823a:	0e 94 30 8b 	call	0x11660	; 0x11660 <AMIGO_is_MLA>
   1823e:	08 c0       	rjmp	.+16     	; 0x18250 <AMIGO_COMMANDS+0x38>
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   18240:	80 91 ff 1e 	lds	r24, 0x1EFF	; 0x801eff <listening>
   18244:	90 e0       	ldi	r25, 0x00	; 0
   18246:	0e 94 30 8b 	call	0x11660	; 0x11660 <AMIGO_is_MLA>
   1824a:	89 2b       	or	r24, r25
   1824c:	79 f7       	brne	.-34     	; 0x1822c <AMIGO_COMMANDS+0x14>
   1824e:	76 c0       	rjmp	.+236    	; 0x1833c <AMIGO_COMMANDS+0x124>

        if(talking == UNT && AMIGO_is_MLA(listening))
        {
            // printf("AMIGO COMMANDS %02XH NO TALK ADDRESS!\n", ch);
        }
        if(listening == 0 && AMIGO_is_MTA(talking))
   18250:	80 91 ff 1e 	lds	r24, 0x1EFF	; 0x801eff <listening>
   18254:	81 11       	cpse	r24, r1
   18256:	05 c0       	rjmp	.+10     	; 0x18262 <AMIGO_COMMANDS+0x4a>
   18258:	80 91 fd 1e 	lds	r24, 0x1EFD	; 0x801efd <talking>
   1825c:	90 e0       	ldi	r25, 0x00	; 0
   1825e:	0e 94 41 8b 	call	0x11682	; 0x11682 <AMIGO_is_MTA>
        {
            // printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   18262:	c0 36       	cpi	r28, 0x60	; 96
   18264:	99 f4       	brne	.+38     	; 0x1828c <AMIGO_COMMANDS+0x74>
   18266:	80 91 fd 1e 	lds	r24, 0x1EFD	; 0x801efd <talking>
   1826a:	90 e0       	ldi	r25, 0x00	; 0
   1826c:	0e 94 41 8b 	call	0x11682	; 0x11682 <AMIGO_is_MTA>
   18270:	89 2b       	or	r24, r25
   18272:	19 f0       	breq	.+6      	; 0x1827a <AMIGO_COMMANDS+0x62>
        {
            return (Amigo_Execute(ch) );
   18274:	80 e6       	ldi	r24, 0x60	; 96
   18276:	90 e0       	ldi	r25, 0x00	; 0
   18278:	14 c0       	rjmp	.+40     	; 0x182a2 <AMIGO_COMMANDS+0x8a>
        if(listening == 0 && AMIGO_is_MTA(talking))
        {
            // printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   1827a:	80 91 ff 1e 	lds	r24, 0x1EFF	; 0x801eff <listening>
   1827e:	90 e0       	ldi	r25, 0x00	; 0
   18280:	0e 94 30 8b 	call	0x11660	; 0x11660 <AMIGO_is_MLA>
   18284:	89 2b       	or	r24, r25
   18286:	09 f4       	brne	.+2      	; 0x1828a <AMIGO_COMMANDS+0x72>
   18288:	59 c0       	rjmp	.+178    	; 0x1833c <AMIGO_COMMANDS+0x124>
   1828a:	f4 cf       	rjmp	.-24     	; 0x18274 <AMIGO_COMMANDS+0x5c>
        {
            return (Amigo_Execute(ch) );
        }

        if(ch == 0x68 && AMIGO_is_MTA(talking) )
   1828c:	c8 36       	cpi	r28, 0x68	; 104
   1828e:	c1 f4       	brne	.+48     	; 0x182c0 <AMIGO_COMMANDS+0xa8>
   18290:	80 91 fd 1e 	lds	r24, 0x1EFD	; 0x801efd <talking>
   18294:	90 e0       	ldi	r25, 0x00	; 0
   18296:	0e 94 41 8b 	call	0x11682	; 0x11682 <AMIGO_is_MTA>
   1829a:	89 2b       	or	r24, r25
   1829c:	21 f0       	breq	.+8      	; 0x182a6 <AMIGO_COMMANDS+0x8e>
        {
            return (Amigo_Execute(ch) );
   1829e:	88 e6       	ldi	r24, 0x68	; 104
   182a0:	90 e0       	ldi	r25, 0x00	; 0
   182a2:	e3 de       	rcall	.-570    	; 0x1806a <Amigo_Execute>
   182a4:	0b c0       	rjmp	.+22     	; 0x182bc <AMIGO_COMMANDS+0xa4>
        }

        if(ch == 0x68 && AMIGO_is_MLA(listening) ) // Single byte command
   182a6:	80 91 ff 1e 	lds	r24, 0x1EFF	; 0x801eff <listening>
   182aa:	90 e0       	ldi	r25, 0x00	; 0
   182ac:	0e 94 30 8b 	call	0x11660	; 0x11660 <AMIGO_is_MLA>
   182b0:	89 2b       	or	r24, r25
   182b2:	09 f4       	brne	.+2      	; 0x182b6 <AMIGO_COMMANDS+0x9e>
   182b4:	43 c0       	rjmp	.+134    	; 0x1833c <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   182b6:	88 e6       	ldi	r24, 0x68	; 104
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) ) // Single byte command
        {
            return (Amigo_Command(ch) );
   182b8:	90 e0       	ldi	r25, 0x00	; 0
   182ba:	f1 db       	rcall	.-2078   	; 0x17a9e <Amigo_Command>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
            return( amigo_cmd_dsj() );
   182bc:	ec 01       	movw	r28, r24
   182be:	40 c0       	rjmp	.+128    	; 0x18340 <AMIGO_COMMANDS+0x128>

        if(ch == 0x68 && AMIGO_is_MLA(listening) ) // Single byte command
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x69 && AMIGO_is_MLA(listening) ) // Single byte command
   182c0:	c9 36       	cpi	r28, 0x69	; 105
   182c2:	51 f4       	brne	.+20     	; 0x182d8 <AMIGO_COMMANDS+0xc0>
   182c4:	80 91 ff 1e 	lds	r24, 0x1EFF	; 0x801eff <listening>
   182c8:	90 e0       	ldi	r25, 0x00	; 0
   182ca:	0e 94 30 8b 	call	0x11660	; 0x11660 <AMIGO_is_MLA>
   182ce:	89 2b       	or	r24, r25
   182d0:	a9 f1       	breq	.+106    	; 0x1833c <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   182d2:	89 e6       	ldi	r24, 0x69	; 105
   182d4:	90 e0       	ldi	r25, 0x00	; 0
   182d6:	f1 cf       	rjmp	.-30     	; 0x182ba <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6a && AMIGO_is_MLA(listening) ) // Single byte command
   182d8:	ca 36       	cpi	r28, 0x6A	; 106
   182da:	51 f4       	brne	.+20     	; 0x182f0 <AMIGO_COMMANDS+0xd8>
   182dc:	80 91 ff 1e 	lds	r24, 0x1EFF	; 0x801eff <listening>
   182e0:	90 e0       	ldi	r25, 0x00	; 0
   182e2:	0e 94 30 8b 	call	0x11660	; 0x11660 <AMIGO_is_MLA>
   182e6:	89 2b       	or	r24, r25
   182e8:	49 f1       	breq	.+82     	; 0x1833c <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   182ea:	8a e6       	ldi	r24, 0x6A	; 106
   182ec:	90 e0       	ldi	r25, 0x00	; 0
   182ee:	e5 cf       	rjmp	.-54     	; 0x182ba <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) ) // Single byte command
   182f0:	cc 36       	cpi	r28, 0x6C	; 108
   182f2:	51 f4       	brne	.+20     	; 0x18308 <AMIGO_COMMANDS+0xf0>
   182f4:	80 91 ff 1e 	lds	r24, 0x1EFF	; 0x801eff <listening>
   182f8:	90 e0       	ldi	r25, 0x00	; 0
   182fa:	0e 94 30 8b 	call	0x11660	; 0x11660 <AMIGO_is_MLA>
   182fe:	89 2b       	or	r24, r25
   18300:	e9 f0       	breq	.+58     	; 0x1833c <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   18302:	8c e6       	ldi	r24, 0x6C	; 108
   18304:	90 e0       	ldi	r25, 0x00	; 0
   18306:	d9 cf       	rjmp	.-78     	; 0x182ba <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
   18308:	c0 37       	cpi	r28, 0x70	; 112
   1830a:	c1 f4       	brne	.+48     	; 0x1833c <AMIGO_COMMANDS+0x124>
   1830c:	80 91 fd 1e 	lds	r24, 0x1EFD	; 0x801efd <talking>
   18310:	90 e0       	ldi	r25, 0x00	; 0
   18312:	0e 94 41 8b 	call	0x11682	; 0x11682 <AMIGO_is_MTA>
   18316:	ec 01       	movw	r28, r24
   18318:	89 2b       	or	r24, r25
   1831a:	51 f0       	breq	.+20     	; 0x18330 <AMIGO_COMMANDS+0x118>
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
   1831c:	e0 91 7a 19 	lds	r30, 0x197A	; 0x80197a <AMIGOp>
   18320:	f0 91 7b 19 	lds	r31, 0x197B	; 0x80197b <AMIGOp+0x1>
   18324:	81 81       	ldd	r24, Z+1	; 0x01
   18326:	90 e0       	ldi	r25, 0x00	; 0
   18328:	0e 94 21 85 	call	0x10a42	; 0x10a42 <gpib_disable_PPR>
            return( amigo_cmd_dsj() );
   1832c:	e6 d9       	rcall	.-3124   	; 0x176fa <amigo_cmd_dsj>
   1832e:	c6 cf       	rjmp	.-116    	; 0x182bc <AMIGO_COMMANDS+0xa4>
        }
        if(ch == 0x7e && ch == 0x7f)
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x70 && AMIGO_is_MLA(listening))
   18330:	80 91 ff 1e 	lds	r24, 0x1EFF	; 0x801eff <listening>
   18334:	90 e0       	ldi	r25, 0x00	; 0
   18336:	0e 94 30 8b 	call	0x11660	; 0x11660 <AMIGO_is_MLA>
   1833a:	02 c0       	rjmp	.+4      	; 0x18340 <AMIGO_COMMANDS+0x128>
        {
            // NOP
        }
    }
    return(0);
   1833c:	c0 e0       	ldi	r28, 0x00	; 0
   1833e:	d0 e0       	ldi	r29, 0x00	; 0
}
   18340:	ce 01       	movw	r24, r28
   18342:	df 91       	pop	r29
   18344:	cf 91       	pop	r28
   18346:	08 95       	ret

00018348 <printer_init>:
/// - Only called once after power on by main().
/// @return  void

void printer_init()
{
    plot.error = 0;
   18348:	e3 eb       	ldi	r30, 0xB3	; 179
   1834a:	f9 e1       	ldi	r31, 0x19	; 25
   1834c:	10 86       	std	Z+8, r1	; 0x08
    plot.count = 0;
   1834e:	10 82       	st	Z, r1
   18350:	11 82       	std	Z+1, r1	; 0x01
   18352:	12 82       	std	Z+2, r1	; 0x02
   18354:	13 82       	std	Z+3, r1	; 0x03
    plot.ind = 0;
   18356:	15 82       	std	Z+5, r1	; 0x05
   18358:	14 82       	std	Z+4, r1	; 0x04
    plot.fp = NULL;
   1835a:	12 86       	std	Z+10, r1	; 0x0a
   1835c:	11 86       	std	Z+9, r1	; 0x09
    plot.buf = NULL;
   1835e:	14 86       	std	Z+12, r1	; 0x0c
   18360:	13 86       	std	Z+11, r1	; 0x0b
   18362:	08 95       	ret

00018364 <receive_plot_flush>:
/// @see posix.h
/// @see printer_buffer()
/// @return  file handle

int receive_plot_flush()
{
   18364:	cf 93       	push	r28
   18366:	df 93       	push	r29
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
   18368:	20 91 bc 19 	lds	r18, 0x19BC	; 0x8019bc <plot+0x9>
   1836c:	30 91 bd 19 	lds	r19, 0x19BD	; 0x8019bd <plot+0xa>
   18370:	21 15       	cp	r18, r1
   18372:	31 05       	cpc	r19, r1
   18374:	09 f4       	brne	.+2      	; 0x18378 <receive_plot_flush+0x14>
   18376:	4a c0       	rjmp	.+148    	; 0x1840c <receive_plot_flush+0xa8>
   18378:	80 91 b7 19 	lds	r24, 0x19B7	; 0x8019b7 <plot+0x4>
   1837c:	90 91 b8 19 	lds	r25, 0x19B8	; 0x8019b8 <plot+0x5>
   18380:	00 97       	sbiw	r24, 0x00	; 0
   18382:	09 f4       	brne	.+2      	; 0x18386 <receive_plot_flush+0x22>
   18384:	45 c0       	rjmp	.+138    	; 0x18410 <receive_plot_flush+0xac>
        return(0);

    ret  = fwrite(plot.buf, 1, plot.ind , plot.fp);
   18386:	ac 01       	movw	r20, r24
   18388:	61 e0       	ldi	r22, 0x01	; 1
   1838a:	70 e0       	ldi	r23, 0x00	; 0
   1838c:	80 91 be 19 	lds	r24, 0x19BE	; 0x8019be <plot+0xb>
   18390:	90 91 bf 19 	lds	r25, 0x19BF	; 0x8019bf <plot+0xc>
   18394:	0e 94 be 7b 	call	0xf77c	; 0xf77c <fwrite>
   18398:	ec 01       	movw	r28, r24
    if(ret != plot.ind)
   1839a:	80 91 b7 19 	lds	r24, 0x19B7	; 0x8019b7 <plot+0x4>
   1839e:	90 91 b8 19 	lds	r25, 0x19B8	; 0x8019b8 <plot+0x5>
   183a2:	c8 17       	cp	r28, r24
   183a4:	d9 07       	cpc	r29, r25
   183a6:	31 f1       	breq	.+76     	; 0x183f4 <receive_plot_flush+0x90>
    {
        if(debuglevel & (1+32))
   183a8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   183ac:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   183b0:	81 72       	andi	r24, 0x21	; 33
   183b2:	99 27       	eor	r25, r25
   183b4:	89 2b       	or	r24, r25
   183b6:	d9 f0       	breq	.+54     	; 0x183ee <receive_plot_flush+0x8a>
        {
            perror("receive_plot_flush");
   183b8:	8c e6       	ldi	r24, 0x6C	; 108
   183ba:	95 e1       	ldi	r25, 0x15	; 21
   183bc:	0e 94 e0 77 	call	0xefc0	; 0xefc0 <perror>
            printf("write failed: wanted %d, got:%d\n", plot.ind, ret);
   183c0:	df 93       	push	r29
   183c2:	cf 93       	push	r28
   183c4:	80 91 b8 19 	lds	r24, 0x19B8	; 0x8019b8 <plot+0x5>
   183c8:	8f 93       	push	r24
   183ca:	80 91 b7 19 	lds	r24, 0x19B7	; 0x8019b7 <plot+0x4>
   183ce:	8f 93       	push	r24
   183d0:	8e ec       	ldi	r24, 0xCE	; 206
   183d2:	91 e3       	ldi	r25, 0x31	; 49
   183d4:	1f 92       	push	r1
   183d6:	9f 93       	push	r25
   183d8:	8f 93       	push	r24
   183da:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   183de:	8d b7       	in	r24, 0x3d	; 61
   183e0:	9e b7       	in	r25, 0x3e	; 62
   183e2:	07 96       	adiw	r24, 0x07	; 7
   183e4:	0f b6       	in	r0, 0x3f	; 63
   183e6:	f8 94       	cli
   183e8:	9e bf       	out	0x3e, r25	; 62
   183ea:	0f be       	out	0x3f, r0	; 63
   183ec:	8d bf       	out	0x3d, r24	; 61
        }
        return(-1);
   183ee:	8f ef       	ldi	r24, 0xFF	; 255
   183f0:	9f ef       	ldi	r25, 0xFF	; 255
   183f2:	0e c0       	rjmp	.+28     	; 0x18410 <receive_plot_flush+0xac>
    }

    fno = fileno( plot.fp );
   183f4:	80 91 bc 19 	lds	r24, 0x19BC	; 0x8019bc <plot+0x9>
   183f8:	90 91 bd 19 	lds	r25, 0x19BD	; 0x8019bd <plot+0xa>
   183fc:	0e 94 2a 76 	call	0xec54	; 0xec54 <fileno>
    if(fno < 0)
   18400:	97 fd       	sbrc	r25, 7
   18402:	f5 cf       	rjmp	.-22     	; 0x183ee <receive_plot_flush+0x8a>
        return(-1);
    ///@brief sync filesystem after every write 
    syncfs( fno );
   18404:	0e 94 08 7b 	call	0xf610	; 0xf610 <syncfs>
    return (ret);
   18408:	ce 01       	movw	r24, r28
   1840a:	02 c0       	rjmp	.+4      	; 0x18410 <receive_plot_flush+0xac>
{
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
        return(0);
   1840c:	80 e0       	ldi	r24, 0x00	; 0
   1840e:	90 e0       	ldi	r25, 0x00	; 0
    if(fno < 0)
        return(-1);
    ///@brief sync filesystem after every write 
    syncfs( fno );
    return (ret);
}
   18410:	df 91       	pop	r29
   18412:	cf 91       	pop	r28
   18414:	08 95       	ret

00018416 <printer_close>:
   18416:	a6 df       	rcall	.-180    	; 0x18364 <receive_plot_flush>
   18418:	97 ff       	sbrs	r25, 7
   1841a:	03 c0       	rjmp	.+6      	; 0x18422 <printer_close+0xc>
   1841c:	81 e0       	ldi	r24, 0x01	; 1
   1841e:	80 93 bb 19 	sts	0x19BB, r24	; 0x8019bb <plot+0x8>
   18422:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   18426:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1842a:	81 72       	andi	r24, 0x21	; 33
   1842c:	99 27       	eor	r25, r25
   1842e:	89 2b       	or	r24, r25
   18430:	71 f0       	breq	.+28     	; 0x1844e <printer_close+0x38>
   18432:	80 91 bb 19 	lds	r24, 0x19BB	; 0x8019bb <plot+0x8>
   18436:	88 23       	and	r24, r24
   18438:	51 f0       	breq	.+20     	; 0x1844e <printer_close+0x38>
   1843a:	8d ef       	ldi	r24, 0xFD	; 253
   1843c:	91 e3       	ldi	r25, 0x31	; 49
   1843e:	1f 92       	push	r1
   18440:	9f 93       	push	r25
   18442:	8f 93       	push	r24
   18444:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   18448:	0f 90       	pop	r0
   1844a:	0f 90       	pop	r0
   1844c:	0f 90       	pop	r0
   1844e:	80 91 bc 19 	lds	r24, 0x19BC	; 0x8019bc <plot+0x9>
   18452:	90 91 bd 19 	lds	r25, 0x19BD	; 0x8019bd <plot+0xa>
   18456:	00 97       	sbiw	r24, 0x00	; 0
   18458:	09 f1       	breq	.+66     	; 0x1849c <printer_close+0x86>
   1845a:	0e 94 40 7c 	call	0xf880	; 0xf880 <fclose>
   1845e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   18462:	85 ff       	sbrs	r24, 5
   18464:	1b c0       	rjmp	.+54     	; 0x1849c <printer_close+0x86>
   18466:	80 91 b6 19 	lds	r24, 0x19B6	; 0x8019b6 <plot+0x3>
   1846a:	8f 93       	push	r24
   1846c:	80 91 b5 19 	lds	r24, 0x19B5	; 0x8019b5 <plot+0x2>
   18470:	8f 93       	push	r24
   18472:	80 91 b4 19 	lds	r24, 0x19B4	; 0x8019b4 <plot+0x1>
   18476:	8f 93       	push	r24
   18478:	80 91 b3 19 	lds	r24, 0x19B3	; 0x8019b3 <plot>
   1847c:	8f 93       	push	r24
   1847e:	8f ee       	ldi	r24, 0xEF	; 239
   18480:	91 e3       	ldi	r25, 0x31	; 49
   18482:	1f 92       	push	r1
   18484:	9f 93       	push	r25
   18486:	8f 93       	push	r24
   18488:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1848c:	8d b7       	in	r24, 0x3d	; 61
   1848e:	9e b7       	in	r25, 0x3e	; 62
   18490:	07 96       	adiw	r24, 0x07	; 7
   18492:	0f b6       	in	r0, 0x3f	; 63
   18494:	f8 94       	cli
   18496:	9e bf       	out	0x3e, r25	; 62
   18498:	0f be       	out	0x3f, r0	; 63
   1849a:	8d bf       	out	0x3d, r24	; 61
   1849c:	80 91 be 19 	lds	r24, 0x19BE	; 0x8019be <plot+0xb>
   184a0:	90 91 bf 19 	lds	r25, 0x19BF	; 0x8019bf <plot+0xc>
   184a4:	00 97       	sbiw	r24, 0x00	; 0
   184a6:	11 f0       	breq	.+4      	; 0x184ac <printer_close+0x96>
   184a8:	0e 94 50 2a 	call	0x54a0	; 0x54a0 <safefree>
   184ac:	4d cf       	rjmp	.-358    	; 0x18348 <printer_init>
   184ae:	08 95       	ret

000184b0 <printer_open>:
   184b0:	ac e4       	ldi	r26, 0x4C	; 76
   184b2:	b0 e0       	ldi	r27, 0x00	; 0
   184b4:	ee e5       	ldi	r30, 0x5E	; 94
   184b6:	f2 ec       	ldi	r31, 0xC2	; 194
   184b8:	0c 94 19 e8 	jmp	0x1d032	; 0x1d032 <__prologue_saves__+0xc>
   184bc:	8c 01       	movw	r16, r24
   184be:	89 2b       	or	r24, r25
   184c0:	09 f0       	breq	.+2      	; 0x184c4 <printer_open+0x14>
   184c2:	4b c0       	rjmp	.+150    	; 0x1855a <printer_open+0xaa>
   184c4:	be 01       	movw	r22, r28
   184c6:	6f 5b       	subi	r22, 0xBF	; 191
   184c8:	7f 4f       	sbci	r23, 0xFF	; 255
   184ca:	80 e0       	ldi	r24, 0x00	; 0
   184cc:	90 e0       	ldi	r25, 0x00	; 0
   184ce:	0e 94 b0 34 	call	0x6960	; 0x6960 <clock_gettime>
   184d2:	25 96       	adiw	r28, 0x05	; 5
   184d4:	8c ad       	ldd	r24, Y+60	; 0x3c
   184d6:	9d ad       	ldd	r25, Y+61	; 0x3d
   184d8:	ae ad       	ldd	r26, Y+62	; 0x3e
   184da:	bf ad       	ldd	r27, Y+63	; 0x3f
   184dc:	25 97       	sbiw	r28, 0x05	; 5
   184de:	2d 96       	adiw	r28, 0x0d	; 13
   184e0:	8c af       	std	Y+60, r24	; 0x3c
   184e2:	9d af       	std	Y+61, r25	; 0x3d
   184e4:	ae af       	std	Y+62, r26	; 0x3e
   184e6:	bf af       	std	Y+63, r27	; 0x3f
   184e8:	2d 97       	sbiw	r28, 0x0d	; 13
   184ea:	ce 01       	movw	r24, r28
   184ec:	87 5b       	subi	r24, 0xB7	; 183
   184ee:	9f 4f       	sbci	r25, 0xFF	; 255
   184f0:	0e 94 80 38 	call	0x7100	; 0x7100 <gmtime>
   184f4:	8c 01       	movw	r16, r24
   184f6:	fc 01       	movw	r30, r24
   184f8:	90 80       	ld	r9, Z
   184fa:	81 80       	ldd	r8, Z+1	; 0x01
   184fc:	b2 80       	ldd	r11, Z+2	; 0x02
   184fe:	a3 80       	ldd	r10, Z+3	; 0x03
   18500:	d4 80       	ldd	r13, Z+4	; 0x04
   18502:	c5 80       	ldd	r12, Z+5	; 0x05
   18504:	e2 84       	ldd	r14, Z+10	; 0x0a
   18506:	f3 84       	ldd	r15, Z+11	; 0x0b
   18508:	f4 e9       	ldi	r31, 0x94	; 148
   1850a:	ef 1a       	sub	r14, r31
   1850c:	f8 ef       	ldi	r31, 0xF8	; 248
   1850e:	ff 0a       	sbc	r15, r31
   18510:	fc 01       	movw	r30, r24
   18512:	80 85       	ldd	r24, Z+8	; 0x08
   18514:	91 85       	ldd	r25, Z+9	; 0x09
   18516:	0e 94 5c 37 	call	0x6eb8	; 0x6eb8 <tm_mon_to_ascii>
   1851a:	8f 92       	push	r8
   1851c:	9f 92       	push	r9
   1851e:	af 92       	push	r10
   18520:	bf 92       	push	r11
   18522:	cf 92       	push	r12
   18524:	df 92       	push	r13
   18526:	ff 92       	push	r15
   18528:	ef 92       	push	r14
   1852a:	9f 93       	push	r25
   1852c:	8f 93       	push	r24
   1852e:	f8 01       	movw	r30, r16
   18530:	87 81       	ldd	r24, Z+7	; 0x07
   18532:	8f 93       	push	r24
   18534:	86 81       	ldd	r24, Z+6	; 0x06
   18536:	8f 93       	push	r24
   18538:	84 e3       	ldi	r24, 0x34	; 52
   1853a:	92 e3       	ldi	r25, 0x32	; 50
   1853c:	1f 92       	push	r1
   1853e:	9f 93       	push	r25
   18540:	8f 93       	push	r24
   18542:	8e 01       	movw	r16, r28
   18544:	0f 5f       	subi	r16, 0xFF	; 255
   18546:	1f 4f       	sbci	r17, 0xFF	; 255
   18548:	1f 93       	push	r17
   1854a:	0f 93       	push	r16
   1854c:	0e 94 0b 47 	call	0x8e16	; 0x8e16 <sprintf_P>
   18550:	0f b6       	in	r0, 0x3f	; 63
   18552:	f8 94       	cli
   18554:	de bf       	out	0x3e, r29	; 62
   18556:	0f be       	out	0x3f, r0	; 63
   18558:	cd bf       	out	0x3d, r28	; 61
   1855a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1855e:	85 ff       	sbrs	r24, 5
   18560:	0e c0       	rjmp	.+28     	; 0x1857e <printer_open+0xce>
   18562:	1f 93       	push	r17
   18564:	0f 93       	push	r16
   18566:	8e e1       	ldi	r24, 0x1E	; 30
   18568:	92 e3       	ldi	r25, 0x32	; 50
   1856a:	1f 92       	push	r1
   1856c:	9f 93       	push	r25
   1856e:	8f 93       	push	r24
   18570:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   18574:	0f 90       	pop	r0
   18576:	0f 90       	pop	r0
   18578:	0f 90       	pop	r0
   1857a:	0f 90       	pop	r0
   1857c:	0f 90       	pop	r0
   1857e:	6e e7       	ldi	r22, 0x7E	; 126
   18580:	78 e0       	ldi	r23, 0x08	; 8
   18582:	c8 01       	movw	r24, r16
   18584:	0e 94 96 7d 	call	0xfb2c	; 0xfb2c <fopen>
   18588:	90 93 bd 19 	sts	0x19BD, r25	; 0x8019bd <plot+0xa>
   1858c:	80 93 bc 19 	sts	0x19BC, r24	; 0x8019bc <plot+0x9>
   18590:	89 2b       	or	r24, r25
   18592:	b9 f4       	brne	.+46     	; 0x185c2 <printer_open+0x112>
   18594:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   18598:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1859c:	81 72       	andi	r24, 0x21	; 33
   1859e:	99 27       	eor	r25, r25
   185a0:	89 2b       	or	r24, r25
   185a2:	11 f1       	breq	.+68     	; 0x185e8 <printer_open+0x138>
   185a4:	85 e0       	ldi	r24, 0x05	; 5
   185a6:	9d e0       	ldi	r25, 0x0D	; 13
   185a8:	0e 94 e0 77 	call	0xefc0	; 0xefc0 <perror>
   185ac:	82 e1       	ldi	r24, 0x12	; 18
   185ae:	92 e3       	ldi	r25, 0x32	; 50
   185b0:	1f 92       	push	r1
   185b2:	9f 93       	push	r25
   185b4:	8f 93       	push	r24
   185b6:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   185ba:	0f 90       	pop	r0
   185bc:	0f 90       	pop	r0
   185be:	0f 90       	pop	r0
   185c0:	13 c0       	rjmp	.+38     	; 0x185e8 <printer_open+0x138>
   185c2:	61 e0       	ldi	r22, 0x01	; 1
   185c4:	70 e0       	ldi	r23, 0x00	; 0
   185c6:	81 e0       	ldi	r24, 0x01	; 1
   185c8:	92 e0       	ldi	r25, 0x02	; 2
   185ca:	0e 94 07 2a 	call	0x540e	; 0x540e <safecalloc>
   185ce:	90 93 bf 19 	sts	0x19BF, r25	; 0x8019bf <plot+0xc>
   185d2:	80 93 be 19 	sts	0x19BE, r24	; 0x8019be <plot+0xb>
   185d6:	89 2b       	or	r24, r25
   185d8:	09 f4       	brne	.+2      	; 0x185dc <printer_open+0x12c>
   185da:	1d df       	rcall	.-454    	; 0x18416 <printer_close>
   185dc:	80 e0       	ldi	r24, 0x00	; 0
   185de:	92 e0       	ldi	r25, 0x02	; 2
   185e0:	90 93 ba 19 	sts	0x19BA, r25	; 0x8019ba <plot+0x7>
   185e4:	80 93 b9 19 	sts	0x19B9, r24	; 0x8019b9 <plot+0x6>
   185e8:	c4 5b       	subi	r28, 0xB4	; 180
   185ea:	df 4f       	sbci	r29, 0xFF	; 255
   185ec:	ec e0       	ldi	r30, 0x0C	; 12
   185ee:	0c 94 35 e8 	jmp	0x1d06a	; 0x1d06a <__epilogue_restores__+0xc>

000185f2 <printer_buffer>:
   185f2:	cf 93       	push	r28
   185f4:	df 93       	push	r29
   185f6:	ec 01       	movw	r28, r24
   185f8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   185fc:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   18600:	81 72       	andi	r24, 0x21	; 33
   18602:	99 27       	eor	r25, r25
   18604:	89 2b       	or	r24, r25
   18606:	e9 f0       	breq	.+58     	; 0x18642 <printer_buffer+0x50>
   18608:	80 91 b3 19 	lds	r24, 0x19B3	; 0x8019b3 <plot>
   1860c:	90 91 b4 19 	lds	r25, 0x19B4	; 0x8019b4 <plot+0x1>
   18610:	20 91 b5 19 	lds	r18, 0x19B5	; 0x8019b5 <plot+0x2>
   18614:	30 91 b6 19 	lds	r19, 0x19B6	; 0x8019b6 <plot+0x3>
   18618:	81 11       	cpse	r24, r1
   1861a:	13 c0       	rjmp	.+38     	; 0x18642 <printer_buffer+0x50>
   1861c:	3f 93       	push	r19
   1861e:	2f 93       	push	r18
   18620:	9f 93       	push	r25
   18622:	8f 93       	push	r24
   18624:	87 ec       	ldi	r24, 0xC7	; 199
   18626:	91 e3       	ldi	r25, 0x31	; 49
   18628:	1f 92       	push	r1
   1862a:	9f 93       	push	r25
   1862c:	8f 93       	push	r24
   1862e:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   18632:	8d b7       	in	r24, 0x3d	; 61
   18634:	9e b7       	in	r25, 0x3e	; 62
   18636:	07 96       	adiw	r24, 0x07	; 7
   18638:	0f b6       	in	r0, 0x3f	; 63
   1863a:	f8 94       	cli
   1863c:	9e bf       	out	0x3e, r25	; 62
   1863e:	0f be       	out	0x3f, r0	; 63
   18640:	8d bf       	out	0x3d, r24	; 61
   18642:	ce 01       	movw	r24, r28
   18644:	88 27       	eor	r24, r24
   18646:	97 7f       	andi	r25, 0xF7	; 247
   18648:	89 2b       	or	r24, r25
   1864a:	41 f0       	breq	.+16     	; 0x1865c <printer_buffer+0x6a>
   1864c:	8b de       	rcall	.-746    	; 0x18364 <receive_plot_flush>
   1864e:	89 2b       	or	r24, r25
   18650:	09 f4       	brne	.+2      	; 0x18654 <printer_buffer+0x62>
   18652:	3f c0       	rjmp	.+126    	; 0x186d2 <printer_buffer+0xe0>
   18654:	81 e0       	ldi	r24, 0x01	; 1
   18656:	80 93 bb 19 	sts	0x19BB, r24	; 0x8019bb <plot+0x8>
   1865a:	3b c0       	rjmp	.+118    	; 0x186d2 <printer_buffer+0xe0>
   1865c:	20 91 be 19 	lds	r18, 0x19BE	; 0x8019be <plot+0xb>
   18660:	30 91 bf 19 	lds	r19, 0x19BF	; 0x8019bf <plot+0xc>
   18664:	80 91 b7 19 	lds	r24, 0x19B7	; 0x8019b7 <plot+0x4>
   18668:	90 91 b8 19 	lds	r25, 0x19B8	; 0x8019b8 <plot+0x5>
   1866c:	ac 01       	movw	r20, r24
   1866e:	4f 5f       	subi	r20, 0xFF	; 255
   18670:	5f 4f       	sbci	r21, 0xFF	; 255
   18672:	50 93 b8 19 	sts	0x19B8, r21	; 0x8019b8 <plot+0x5>
   18676:	40 93 b7 19 	sts	0x19B7, r20	; 0x8019b7 <plot+0x4>
   1867a:	f9 01       	movw	r30, r18
   1867c:	e8 0f       	add	r30, r24
   1867e:	f9 1f       	adc	r31, r25
   18680:	c0 83       	st	Z, r28
   18682:	80 91 b3 19 	lds	r24, 0x19B3	; 0x8019b3 <plot>
   18686:	90 91 b4 19 	lds	r25, 0x19B4	; 0x8019b4 <plot+0x1>
   1868a:	a0 91 b5 19 	lds	r26, 0x19B5	; 0x8019b5 <plot+0x2>
   1868e:	b0 91 b6 19 	lds	r27, 0x19B6	; 0x8019b6 <plot+0x3>
   18692:	01 96       	adiw	r24, 0x01	; 1
   18694:	a1 1d       	adc	r26, r1
   18696:	b1 1d       	adc	r27, r1
   18698:	80 93 b3 19 	sts	0x19B3, r24	; 0x8019b3 <plot>
   1869c:	90 93 b4 19 	sts	0x19B4, r25	; 0x8019b4 <plot+0x1>
   186a0:	a0 93 b5 19 	sts	0x19B5, r26	; 0x8019b5 <plot+0x2>
   186a4:	b0 93 b6 19 	sts	0x19B6, r27	; 0x8019b6 <plot+0x3>
   186a8:	20 91 b7 19 	lds	r18, 0x19B7	; 0x8019b7 <plot+0x4>
   186ac:	30 91 b8 19 	lds	r19, 0x19B8	; 0x8019b8 <plot+0x5>
   186b0:	80 91 b9 19 	lds	r24, 0x19B9	; 0x8019b9 <plot+0x6>
   186b4:	90 91 ba 19 	lds	r25, 0x19BA	; 0x8019ba <plot+0x7>
   186b8:	28 17       	cp	r18, r24
   186ba:	39 07       	cpc	r19, r25
   186bc:	54 f0       	brlt	.+20     	; 0x186d2 <printer_buffer+0xe0>
   186be:	52 de       	rcall	.-860    	; 0x18364 <receive_plot_flush>
   186c0:	97 ff       	sbrs	r25, 7
   186c2:	03 c0       	rjmp	.+6      	; 0x186ca <printer_buffer+0xd8>
   186c4:	81 e0       	ldi	r24, 0x01	; 1
   186c6:	80 93 bb 19 	sts	0x19BB, r24	; 0x8019bb <plot+0x8>
   186ca:	10 92 b8 19 	sts	0x19B8, r1	; 0x8019b8 <plot+0x5>
   186ce:	10 92 b7 19 	sts	0x19B7, r1	; 0x8019b7 <plot+0x4>
   186d2:	df 91       	pop	r29
   186d4:	cf 91       	pop	r28
   186d6:	08 95       	ret

000186d8 <PRINTER_COMMANDS>:
   186d8:	cf 93       	push	r28
   186da:	c8 2f       	mov	r28, r24
   186dc:	80 91 ff 1e 	lds	r24, 0x1EFF	; 0x801eff <listening>
   186e0:	90 e0       	ldi	r25, 0x00	; 0
   186e2:	0e 94 63 8b 	call	0x116c6	; 0x116c6 <PRINTER_is_MLA>
   186e6:	89 2b       	or	r24, r25
   186e8:	49 f0       	breq	.+18     	; 0x186fc <PRINTER_COMMANDS+0x24>
   186ea:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   186ee:	85 ff       	sbrs	r24, 5
   186f0:	1e c0       	rjmp	.+60     	; 0x1872e <PRINTER_COMMANDS+0x56>
   186f2:	1f 92       	push	r1
   186f4:	cf 93       	push	r28
   186f6:	8b ea       	ldi	r24, 0xAB	; 171
   186f8:	91 e3       	ldi	r25, 0x31	; 49
   186fa:	0f c0       	rjmp	.+30     	; 0x1871a <PRINTER_COMMANDS+0x42>
   186fc:	80 91 fd 1e 	lds	r24, 0x1EFD	; 0x801efd <talking>
   18700:	90 e0       	ldi	r25, 0x00	; 0
   18702:	0e 94 74 8b 	call	0x116e8	; 0x116e8 <PRINTER_is_MTA>
   18706:	89 2b       	or	r24, r25
   18708:	91 f0       	breq	.+36     	; 0x1872e <PRINTER_COMMANDS+0x56>
   1870a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1870e:	85 ff       	sbrs	r24, 5
   18710:	0e c0       	rjmp	.+28     	; 0x1872e <PRINTER_COMMANDS+0x56>
   18712:	1f 92       	push	r1
   18714:	cf 93       	push	r28
   18716:	81 e9       	ldi	r24, 0x91	; 145
   18718:	91 e3       	ldi	r25, 0x31	; 49
   1871a:	1f 92       	push	r1
   1871c:	9f 93       	push	r25
   1871e:	8f 93       	push	r24
   18720:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   18724:	0f 90       	pop	r0
   18726:	0f 90       	pop	r0
   18728:	0f 90       	pop	r0
   1872a:	0f 90       	pop	r0
   1872c:	0f 90       	pop	r0
   1872e:	80 e0       	ldi	r24, 0x00	; 0
   18730:	90 e0       	ldi	r25, 0x00	; 0
   18732:	cf 91       	pop	r28
   18734:	08 95       	ret

00018736 <plot_echo>:
   18736:	cf 92       	push	r12
   18738:	df 92       	push	r13
   1873a:	ff 92       	push	r15
   1873c:	0f 93       	push	r16
   1873e:	1f 93       	push	r17
   18740:	cf 93       	push	r28
   18742:	df 93       	push	r29
   18744:	cd b7       	in	r28, 0x3d	; 61
   18746:	de b7       	in	r29, 0x3e	; 62
   18748:	da 95       	dec	r29
   1874a:	0f b6       	in	r0, 0x3f	; 63
   1874c:	f8 94       	cli
   1874e:	de bf       	out	0x3e, r29	; 62
   18750:	0f be       	out	0x3f, r0	; 63
   18752:	cd bf       	out	0x3d, r28	; 61
   18754:	f8 2e       	mov	r15, r24
   18756:	84 e0       	ldi	r24, 0x04	; 4
   18758:	90 e0       	ldi	r25, 0x00	; 0
   1875a:	0e 94 98 93 	call	0x12730	; 0x12730 <find_type>
   1875e:	8c 01       	movw	r16, r24
   18760:	0f 3f       	cpi	r16, 0xFF	; 255
   18762:	8f ef       	ldi	r24, 0xFF	; 255
   18764:	18 07       	cpc	r17, r24
   18766:	59 f4       	brne	.+22     	; 0x1877e <plot_echo+0x48>
   18768:	8c e7       	ldi	r24, 0x7C	; 124
   1876a:	91 e3       	ldi	r25, 0x31	; 49
   1876c:	1f 92       	push	r1
   1876e:	9f 93       	push	r25
   18770:	8f 93       	push	r24
   18772:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   18776:	0f 90       	pop	r0
   18778:	0f 90       	pop	r0
   1877a:	0f 90       	pop	r0
   1877c:	5d c0       	rjmp	.+186    	; 0x18838 <plot_echo+0x102>
   1877e:	4b de       	rcall	.-874    	; 0x18416 <printer_close>
   18780:	80 e0       	ldi	r24, 0x00	; 0
   18782:	0e 94 9d 2c 	call	0x593a	; 0x593a <uart_keyhit>
   18786:	89 2b       	or	r24, r25
   18788:	31 f0       	breq	.+12     	; 0x18796 <plot_echo+0x60>
   1878a:	80 e0       	ldi	r24, 0x00	; 0
   1878c:	0e 94 4c 2c 	call	0x5898	; 0x5898 <uart_rx_byte>
   18790:	0e 94 c1 75 	call	0xeb82	; 0xeb82 <putchar>
   18794:	f5 cf       	rjmp	.-22     	; 0x18780 <plot_echo+0x4a>
   18796:	80 91 d0 1c 	lds	r24, 0x1CD0	; 0x801cd0 <__iob+0x2>
   1879a:	90 91 d1 1c 	lds	r25, 0x1CD1	; 0x801cd1 <__iob+0x3>
   1879e:	0e 94 1f 87 	call	0x10e3e	; 0x10e3e <gpib_decode_header>
   187a2:	20 e0       	ldi	r18, 0x00	; 0
   187a4:	30 e0       	ldi	r19, 0x00	; 0
   187a6:	4f e7       	ldi	r20, 0x7F	; 127
   187a8:	55 e1       	ldi	r21, 0x15	; 21
   187aa:	6f 2d       	mov	r22, r15
   187ac:	80 2f       	mov	r24, r16
   187ae:	52 d0       	rcall	.+164    	; 0x18854 <controller_send_str>
   187b0:	20 e0       	ldi	r18, 0x00	; 0
   187b2:	31 e0       	ldi	r19, 0x01	; 1
   187b4:	ce 01       	movw	r24, r28
   187b6:	01 96       	adiw	r24, 0x01	; 1
   187b8:	6c 01       	movw	r12, r24
   187ba:	ac 01       	movw	r20, r24
   187bc:	60 2f       	mov	r22, r16
   187be:	8f 2d       	mov	r24, r15
   187c0:	8c d0       	rcall	.+280    	; 0x188da <controller_read_str>
   187c2:	df 92       	push	r13
   187c4:	cf 92       	push	r12
   187c6:	9f 93       	push	r25
   187c8:	8f 93       	push	r24
   187ca:	8a e6       	ldi	r24, 0x6A	; 106
   187cc:	91 e3       	ldi	r25, 0x31	; 49
   187ce:	1f 92       	push	r1
   187d0:	9f 93       	push	r25
   187d2:	8f 93       	push	r24
   187d4:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   187d8:	20 e0       	ldi	r18, 0x00	; 0
   187da:	30 e0       	ldi	r19, 0x00	; 0
   187dc:	46 e8       	ldi	r20, 0x86	; 134
   187de:	55 e1       	ldi	r21, 0x15	; 21
   187e0:	6f 2d       	mov	r22, r15
   187e2:	80 2f       	mov	r24, r16
   187e4:	37 d0       	rcall	.+110    	; 0x18854 <controller_send_str>
   187e6:	20 e0       	ldi	r18, 0x00	; 0
   187e8:	31 e0       	ldi	r19, 0x01	; 1
   187ea:	a6 01       	movw	r20, r12
   187ec:	60 2f       	mov	r22, r16
   187ee:	8f 2d       	mov	r24, r15
   187f0:	74 d0       	rcall	.+232    	; 0x188da <controller_read_str>
   187f2:	df 92       	push	r13
   187f4:	cf 92       	push	r12
   187f6:	9f 93       	push	r25
   187f8:	8f 93       	push	r24
   187fa:	88 e5       	ldi	r24, 0x58	; 88
   187fc:	91 e3       	ldi	r25, 0x31	; 49
   187fe:	1f 92       	push	r1
   18800:	9f 93       	push	r25
   18802:	8f 93       	push	r24
   18804:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   18808:	20 e0       	ldi	r18, 0x00	; 0
   1880a:	30 e0       	ldi	r19, 0x00	; 0
   1880c:	49 e9       	ldi	r20, 0x99	; 153
   1880e:	55 e1       	ldi	r21, 0x15	; 21
   18810:	6f 2d       	mov	r22, r15
   18812:	80 2f       	mov	r24, r16
   18814:	1f d0       	rcall	.+62     	; 0x18854 <controller_send_str>
   18816:	60 2f       	mov	r22, r16
   18818:	8f 2d       	mov	r24, r15
   1881a:	a5 d0       	rcall	.+330    	; 0x18966 <controller_read_trace>
   1881c:	9f 93       	push	r25
   1881e:	8f 93       	push	r24
   18820:	83 e4       	ldi	r24, 0x43	; 67
   18822:	91 e3       	ldi	r25, 0x31	; 49
   18824:	1f 92       	push	r1
   18826:	9f 93       	push	r25
   18828:	8f 93       	push	r24
   1882a:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1882e:	0f b6       	in	r0, 0x3f	; 63
   18830:	f8 94       	cli
   18832:	de bf       	out	0x3e, r29	; 62
   18834:	0f be       	out	0x3f, r0	; 63
   18836:	cd bf       	out	0x3d, r28	; 61
   18838:	d3 95       	inc	r29
   1883a:	0f b6       	in	r0, 0x3f	; 63
   1883c:	f8 94       	cli
   1883e:	de bf       	out	0x3e, r29	; 62
   18840:	0f be       	out	0x3f, r0	; 63
   18842:	cd bf       	out	0x3d, r28	; 61
   18844:	df 91       	pop	r29
   18846:	cf 91       	pop	r28
   18848:	1f 91       	pop	r17
   1884a:	0f 91       	pop	r16
   1884c:	ff 90       	pop	r15
   1884e:	df 90       	pop	r13
   18850:	cf 90       	pop	r12
   18852:	08 95       	ret

00018854 <controller_send_str>:
/// @param[in] to:      GPIB listener
/// @param[in] str: string to send
/// @param[in] len: number of bytes to send (if 0 then length of string)
/// @return  number of bytes sent
int controller_send_str(uint8_t from, uint8_t to, char *str, int len)
{
   18854:	a2 e0       	ldi	r26, 0x02	; 2
   18856:	b0 e0       	ldi	r27, 0x00	; 0
   18858:	e0 e3       	ldi	r30, 0x30	; 48
   1885a:	f4 ec       	ldi	r31, 0xC4	; 196
   1885c:	0c 94 1d e8 	jmp	0x1d03a	; 0x1d03a <__prologue_saves__+0x14>
   18860:	e8 2e       	mov	r14, r24
   18862:	f6 2e       	mov	r15, r22
   18864:	6a 01       	movw	r12, r20
   18866:	89 01       	movw	r16, r18
    uint16_t status = 0;
   18868:	1a 82       	std	Y+2, r1	; 0x02
   1886a:	19 82       	std	Y+1, r1	; 0x01
    int size;
    if(len == 0)
   1886c:	23 2b       	or	r18, r19
   1886e:	41 f4       	brne	.+16     	; 0x18880 <controller_send_str+0x2c>
        len = strlen((char *)str);
   18870:	fa 01       	movw	r30, r20
   18872:	01 90       	ld	r0, Z+
   18874:	00 20       	and	r0, r0
   18876:	e9 f7       	brne	.-6      	; 0x18872 <controller_send_str+0x1e>
   18878:	31 97       	sbiw	r30, 0x01	; 1
   1887a:	8f 01       	movw	r16, r30
   1887c:	04 1b       	sub	r16, r20
   1887e:	15 0b       	sbc	r17, r21

    gpib_write_byte(0x5f | ATN_FLAG);   // untalk
   18880:	8f e5       	ldi	r24, 0x5F	; 95
   18882:	94 e0       	ldi	r25, 0x04	; 4
   18884:	0e 94 b7 85 	call	0x10b6e	; 0x10b6e <gpib_write_byte>
    gpib_write_byte(0x3f | ATN_FLAG);   // unlisten
   18888:	8f e3       	ldi	r24, 0x3F	; 63
   1888a:	94 e0       	ldi	r25, 0x04	; 4
   1888c:	0e 94 b7 85 	call	0x10b6e	; 0x10b6e <gpib_write_byte>

    gpib_write_byte(0x40 | from | ATN_FLAG);// GPIB talker
   18890:	8e 2d       	mov	r24, r14
   18892:	80 64       	ori	r24, 0x40	; 64
   18894:	90 e0       	ldi	r25, 0x00	; 0
   18896:	94 60       	ori	r25, 0x04	; 4
   18898:	0e 94 b7 85 	call	0x10b6e	; 0x10b6e <gpib_write_byte>
    gpib_write_byte(0x20 | to | ATN_FLAG);  // GPIB listener
   1889c:	8f 2d       	mov	r24, r15
   1889e:	80 62       	ori	r24, 0x20	; 32
   188a0:	90 e0       	ldi	r25, 0x00	; 0
   188a2:	94 60       	ori	r25, 0x04	; 4
   188a4:	0e 94 b7 85 	call	0x10b6e	; 0x10b6e <gpib_write_byte>

    status = EOI_FLAG;
   188a8:	80 e0       	ldi	r24, 0x00	; 0
   188aa:	91 e0       	ldi	r25, 0x01	; 1
   188ac:	9a 83       	std	Y+2, r25	; 0x02
   188ae:	89 83       	std	Y+1, r24	; 0x01
    size = gpib_write_str((uint8_t *)str, len, &status);
   188b0:	ae 01       	movw	r20, r28
   188b2:	4f 5f       	subi	r20, 0xFF	; 255
   188b4:	5f 4f       	sbci	r21, 0xFF	; 255
   188b6:	b8 01       	movw	r22, r16
   188b8:	c6 01       	movw	r24, r12
   188ba:	0e 94 40 8a 	call	0x11480	; 0x11480 <gpib_write_str>
   188be:	8c 01       	movw	r16, r24

    gpib_write_byte(0x5f | ATN_FLAG);   // untalk
   188c0:	8f e5       	ldi	r24, 0x5F	; 95
   188c2:	94 e0       	ldi	r25, 0x04	; 4
   188c4:	0e 94 b7 85 	call	0x10b6e	; 0x10b6e <gpib_write_byte>
    gpib_write_byte(0x3f | ATN_FLAG);   // unlisten
   188c8:	8f e3       	ldi	r24, 0x3F	; 63
   188ca:	94 e0       	ldi	r25, 0x04	; 4
   188cc:	0e 94 b7 85 	call	0x10b6e	; 0x10b6e <gpib_write_byte>
    return(size);
}
   188d0:	c8 01       	movw	r24, r16
   188d2:	22 96       	adiw	r28, 0x02	; 2
   188d4:	e8 e0       	ldi	r30, 0x08	; 8
   188d6:	0c 94 39 e8 	jmp	0x1d072	; 0x1d072 <__epilogue_restores__+0x14>

000188da <controller_read_str>:
/// @param[in] to:      GPIB listener
/// @param[in] str: string to read
/// @param[in] len: maximum number of bytes to read
/// @return  number of bytes read
int controller_read_str(uint8_t from, uint8_t to, char *str, int len)
{
   188da:	a2 e0       	ldi	r26, 0x02	; 2
   188dc:	b0 e0       	ldi	r27, 0x00	; 0
   188de:	e3 e7       	ldi	r30, 0x73	; 115
   188e0:	f4 ec       	ldi	r31, 0xC4	; 196
   188e2:	0c 94 1d e8 	jmp	0x1d03a	; 0x1d03a <__prologue_saves__+0x14>
   188e6:	c8 2e       	mov	r12, r24
   188e8:	d6 2e       	mov	r13, r22
   188ea:	7a 01       	movw	r14, r20
   188ec:	89 01       	movw	r16, r18
    uint16_t status;
    int size;

    gpib_write_byte(0x5f | ATN_FLAG);   // untalk
   188ee:	8f e5       	ldi	r24, 0x5F	; 95
   188f0:	94 e0       	ldi	r25, 0x04	; 4
   188f2:	0e 94 b7 85 	call	0x10b6e	; 0x10b6e <gpib_write_byte>
    gpib_write_byte(0x3f | ATN_FLAG);   // unlisten
   188f6:	8f e3       	ldi	r24, 0x3F	; 63
   188f8:	94 e0       	ldi	r25, 0x04	; 4
   188fa:	0e 94 b7 85 	call	0x10b6e	; 0x10b6e <gpib_write_byte>

    gpib_write_byte(0x40 | from | ATN_FLAG);    // GPIB talker
   188fe:	8c 2d       	mov	r24, r12
   18900:	80 64       	ori	r24, 0x40	; 64
   18902:	90 e0       	ldi	r25, 0x00	; 0
   18904:	94 60       	ori	r25, 0x04	; 4
   18906:	0e 94 b7 85 	call	0x10b6e	; 0x10b6e <gpib_write_byte>
    gpib_write_byte(0x20 | to | ATN_FLAG);      // GPIB listener
   1890a:	8d 2d       	mov	r24, r13
   1890c:	80 62       	ori	r24, 0x20	; 32
   1890e:	90 e0       	ldi	r25, 0x00	; 0
   18910:	94 60       	ori	r25, 0x04	; 4
   18912:	0e 94 b7 85 	call	0x10b6e	; 0x10b6e <gpib_write_byte>

    status = EOI_FLAG;
   18916:	80 e0       	ldi	r24, 0x00	; 0
   18918:	91 e0       	ldi	r25, 0x01	; 1
   1891a:	9a 83       	std	Y+2, r25	; 0x02
   1891c:	89 83       	std	Y+1, r24	; 0x01
    size = gpib_read_str((uint8_t *)str,len, &status);
   1891e:	ae 01       	movw	r20, r28
   18920:	4f 5f       	subi	r20, 0xFF	; 255
   18922:	5f 4f       	sbci	r21, 0xFF	; 255
   18924:	b8 01       	movw	r22, r16
   18926:	c7 01       	movw	r24, r14
   18928:	0e 94 92 89 	call	0x11324	; 0x11324 <gpib_read_str>
   1892c:	6c 01       	movw	r12, r24
    if(size > 0)
   1892e:	18 16       	cp	r1, r24
   18930:	19 06       	cpc	r1, r25
   18932:	64 f4       	brge	.+24     	; 0x1894c <controller_read_str+0x72>
    {
        if(size < len)
   18934:	80 17       	cp	r24, r16
   18936:	91 07       	cpc	r25, r17
   18938:	24 f4       	brge	.+8      	; 0x18942 <controller_read_str+0x68>
            str[size] = 0;
   1893a:	f7 01       	movw	r30, r14
   1893c:	e8 0f       	add	r30, r24
   1893e:	f9 1f       	adc	r31, r25
   18940:	04 c0       	rjmp	.+8      	; 0x1894a <controller_read_str+0x70>
        else
            str[len-1] = 0;
   18942:	0e 0d       	add	r16, r14
   18944:	1f 1d       	adc	r17, r15
   18946:	f8 01       	movw	r30, r16
   18948:	31 97       	sbiw	r30, 0x01	; 1
   1894a:	10 82       	st	Z, r1
    }

    gpib_write_byte(0x5f | ATN_FLAG);   // untalk
   1894c:	8f e5       	ldi	r24, 0x5F	; 95
   1894e:	94 e0       	ldi	r25, 0x04	; 4
   18950:	0e 94 b7 85 	call	0x10b6e	; 0x10b6e <gpib_write_byte>
    gpib_write_byte(0x3f | ATN_FLAG);   // unlisten
   18954:	8f e3       	ldi	r24, 0x3F	; 63
   18956:	94 e0       	ldi	r25, 0x04	; 4
   18958:	0e 94 b7 85 	call	0x10b6e	; 0x10b6e <gpib_write_byte>
    return(size);
}
   1895c:	c6 01       	movw	r24, r12
   1895e:	22 96       	adiw	r28, 0x02	; 2
   18960:	e8 e0       	ldi	r30, 0x08	; 8
   18962:	0c 94 39 e8 	jmp	0x1d072	; 0x1d072 <__epilogue_restores__+0x14>

00018966 <controller_read_trace>:
/// Stops reading at EOI
/// @param[in] from:    GPIB talker
/// @param[in] to:      GPIB listener
/// @return  number of bytes read
int controller_read_trace(uint8_t from, uint8_t to)
{
   18966:	cf 92       	push	r12
   18968:	df 92       	push	r13
   1896a:	ef 92       	push	r14
   1896c:	ff 92       	push	r15
   1896e:	cf 93       	push	r28
   18970:	df 93       	push	r29
   18972:	d8 2f       	mov	r29, r24
   18974:	c6 2f       	mov	r28, r22
    uint16_t ch;
    long len =0;

    gpib_write_byte(0x5f | ATN_FLAG);   // untalk
   18976:	8f e5       	ldi	r24, 0x5F	; 95
   18978:	94 e0       	ldi	r25, 0x04	; 4
   1897a:	0e 94 b7 85 	call	0x10b6e	; 0x10b6e <gpib_write_byte>
    gpib_write_byte(0x3f | ATN_FLAG);   // unlisten
   1897e:	8f e3       	ldi	r24, 0x3F	; 63
   18980:	94 e0       	ldi	r25, 0x04	; 4
   18982:	0e 94 b7 85 	call	0x10b6e	; 0x10b6e <gpib_write_byte>

    gpib_write_byte(0x40 | from | ATN_FLAG);    // GPIB talker
   18986:	d0 64       	ori	r29, 0x40	; 64
   18988:	8d 2f       	mov	r24, r29
   1898a:	90 e0       	ldi	r25, 0x00	; 0
   1898c:	94 60       	ori	r25, 0x04	; 4
   1898e:	0e 94 b7 85 	call	0x10b6e	; 0x10b6e <gpib_write_byte>
    gpib_write_byte(0x20 | to | ATN_FLAG);      // GPIB listener
   18992:	c0 62       	ori	r28, 0x20	; 32
   18994:	8c 2f       	mov	r24, r28
   18996:	90 e0       	ldi	r25, 0x00	; 0
   18998:	94 60       	ori	r25, 0x04	; 4
   1899a:	0e 94 b7 85 	call	0x10b6e	; 0x10b6e <gpib_write_byte>
/// @param[in] to:      GPIB listener
/// @return  number of bytes read
int controller_read_trace(uint8_t from, uint8_t to)
{
    uint16_t ch;
    long len =0;
   1899e:	c1 2c       	mov	r12, r1
   189a0:	d1 2c       	mov	r13, r1
   189a2:	76 01       	movw	r14, r12
    gpib_write_byte(0x40 | from | ATN_FLAG);    // GPIB talker
    gpib_write_byte(0x20 | to | ATN_FLAG);      // GPIB listener

    while(1) // loop until EOI or user ABORT
    {
        if(uart_keyhit(0))
   189a4:	80 e0       	ldi	r24, 0x00	; 0
   189a6:	0e 94 9d 2c 	call	0x593a	; 0x593a <uart_keyhit>
   189aa:	89 2b       	or	r24, r25
   189ac:	79 f4       	brne	.+30     	; 0x189cc <controller_read_trace+0x66>
            break;
        ch = gpib_read_byte(0);
   189ae:	80 e0       	ldi	r24, 0x00	; 0
   189b0:	90 e0       	ldi	r25, 0x00	; 0
   189b2:	0e 94 b8 88 	call	0x11170	; 0x11170 <gpib_read_byte>
   189b6:	ec 01       	movw	r28, r24
        gpib_decode(ch);
   189b8:	0e 94 8e 89 	call	0x1131c	; 0x1131c <gpib_decode>
       if(ch & EOI_FLAG)
   189bc:	d0 fd       	sbrc	r29, 0
   189be:	06 c0       	rjmp	.+12     	; 0x189cc <controller_read_trace+0x66>
            break;
        ++len;
   189c0:	8f ef       	ldi	r24, 0xFF	; 255
   189c2:	c8 1a       	sub	r12, r24
   189c4:	d8 0a       	sbc	r13, r24
   189c6:	e8 0a       	sbc	r14, r24
   189c8:	f8 0a       	sbc	r15, r24
    }
   189ca:	ec cf       	rjmp	.-40     	; 0x189a4 <controller_read_trace+0x3e>

    gpib_write_byte(0x5f | ATN_FLAG);   // untalk
   189cc:	8f e5       	ldi	r24, 0x5F	; 95
   189ce:	94 e0       	ldi	r25, 0x04	; 4
   189d0:	0e 94 b7 85 	call	0x10b6e	; 0x10b6e <gpib_write_byte>
    gpib_write_byte(0x3f | ATN_FLAG);   // unlisten
   189d4:	8f e3       	ldi	r24, 0x3F	; 63
   189d6:	94 e0       	ldi	r25, 0x04	; 4
   189d8:	0e 94 b7 85 	call	0x10b6e	; 0x10b6e <gpib_write_byte>
    return(len);
}
   189dc:	c6 01       	movw	r24, r12
   189de:	df 91       	pop	r29
   189e0:	cf 91       	pop	r28
   189e2:	ff 90       	pop	r15
   189e4:	ef 90       	pop	r14
   189e6:	df 90       	pop	r13
   189e8:	cf 90       	pop	r12
   189ea:	08 95       	ret

000189ec <lif_help>:
   189ec:	cf 93       	push	r28
   189ee:	df 93       	push	r29
   189f0:	ec 01       	movw	r28, r24
   189f2:	8d ef       	ldi	r24, 0xFD	; 253
   189f4:	95 e4       	ldi	r25, 0x45	; 69
   189f6:	1f 92       	push	r1
   189f8:	9f 93       	push	r25
   189fa:	8f 93       	push	r24
   189fc:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   18a00:	0f 90       	pop	r0
   18a02:	0f 90       	pop	r0
   18a04:	0f 90       	pop	r0
   18a06:	cd 2b       	or	r28, r29
   18a08:	51 f0       	breq	.+20     	; 0x18a1e <lif_help+0x32>
   18a0a:	88 e5       	ldi	r24, 0x58	; 88
   18a0c:	94 e4       	ldi	r25, 0x44	; 68
   18a0e:	1f 92       	push	r1
   18a10:	9f 93       	push	r25
   18a12:	8f 93       	push	r24
   18a14:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   18a18:	0f 90       	pop	r0
   18a1a:	0f 90       	pop	r0
   18a1c:	0f 90       	pop	r0
   18a1e:	df 91       	pop	r29
   18a20:	cf 91       	pop	r28
   18a22:	08 95       	ret

00018a24 <lif_calloc>:
   18a24:	ef 92       	push	r14
   18a26:	ff 92       	push	r15
   18a28:	0f 93       	push	r16
   18a2a:	1f 93       	push	r17
   18a2c:	cf 93       	push	r28
   18a2e:	df 93       	push	r29
   18a30:	16 2f       	mov	r17, r22
   18a32:	07 2f       	mov	r16, r23
   18a34:	f8 2e       	mov	r15, r24
   18a36:	e9 2e       	mov	r14, r25
   18a38:	61 e0       	ldi	r22, 0x01	; 1
   18a3a:	70 e0       	ldi	r23, 0x00	; 0
   18a3c:	81 2f       	mov	r24, r17
   18a3e:	90 2f       	mov	r25, r16
   18a40:	0e 94 07 2a 	call	0x540e	; 0x540e <safecalloc>
   18a44:	ec 01       	movw	r28, r24
   18a46:	89 2b       	or	r24, r25
   18a48:	99 f4       	brne	.+38     	; 0x18a70 <lif_calloc+0x4c>
   18a4a:	ef 92       	push	r14
   18a4c:	ff 92       	push	r15
   18a4e:	0f 93       	push	r16
   18a50:	1f 93       	push	r17
   18a52:	8f e2       	ldi	r24, 0x2F	; 47
   18a54:	94 e4       	ldi	r25, 0x44	; 68
   18a56:	1f 92       	push	r1
   18a58:	9f 93       	push	r25
   18a5a:	8f 93       	push	r24
   18a5c:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   18a60:	8d b7       	in	r24, 0x3d	; 61
   18a62:	9e b7       	in	r25, 0x3e	; 62
   18a64:	07 96       	adiw	r24, 0x07	; 7
   18a66:	0f b6       	in	r0, 0x3f	; 63
   18a68:	f8 94       	cli
   18a6a:	9e bf       	out	0x3e, r25	; 62
   18a6c:	0f be       	out	0x3f, r0	; 63
   18a6e:	8d bf       	out	0x3d, r24	; 61
   18a70:	ce 01       	movw	r24, r28
   18a72:	cd b7       	in	r28, 0x3d	; 61
   18a74:	de b7       	in	r29, 0x3e	; 62
   18a76:	e6 e0       	ldi	r30, 0x06	; 6
   18a78:	0c 94 3b e8 	jmp	0x1d076	; 0x1d076 <__epilogue_restores__+0x18>

00018a7c <lif_free>:
   18a7c:	00 97       	sbiw	r24, 0x00	; 0
   18a7e:	59 f4       	brne	.+22     	; 0x18a96 <lif_free+0x1a>
   18a80:	87 e1       	ldi	r24, 0x17	; 23
   18a82:	94 e4       	ldi	r25, 0x44	; 68
   18a84:	1f 92       	push	r1
   18a86:	9f 93       	push	r25
   18a88:	8f 93       	push	r24
   18a8a:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   18a8e:	0f 90       	pop	r0
   18a90:	0f 90       	pop	r0
   18a92:	0f 90       	pop	r0
   18a94:	08 95       	ret
   18a96:	0c 94 50 2a 	jmp	0x54a0	; 0x54a0 <safefree>
   18a9a:	08 95       	ret

00018a9c <lif_stralloc>:
   18a9c:	0f 93       	push	r16
   18a9e:	1f 93       	push	r17
   18aa0:	cf 93       	push	r28
   18aa2:	df 93       	push	r29
   18aa4:	ec 01       	movw	r28, r24
   18aa6:	fc 01       	movw	r30, r24
   18aa8:	01 90       	ld	r0, Z+
   18aaa:	00 20       	and	r0, r0
   18aac:	e9 f7       	brne	.-6      	; 0x18aa8 <lif_stralloc+0xc>
   18aae:	bf 01       	movw	r22, r30
   18ab0:	68 1b       	sub	r22, r24
   18ab2:	79 0b       	sbc	r23, r25
   18ab4:	6d 5f       	subi	r22, 0xFD	; 253
   18ab6:	7f 4f       	sbci	r23, 0xFF	; 255
   18ab8:	07 2e       	mov	r0, r23
   18aba:	00 0c       	add	r0, r0
   18abc:	88 0b       	sbc	r24, r24
   18abe:	99 0b       	sbc	r25, r25
   18ac0:	b1 df       	rcall	.-158    	; 0x18a24 <lif_calloc>
   18ac2:	8c 01       	movw	r16, r24
   18ac4:	00 97       	sbiw	r24, 0x00	; 0
   18ac6:	19 f0       	breq	.+6      	; 0x18ace <lif_stralloc+0x32>
   18ac8:	be 01       	movw	r22, r28
   18aca:	0e 94 17 32 	call	0x642e	; 0x642e <strcpy>
   18ace:	c8 01       	movw	r24, r16
   18ad0:	df 91       	pop	r29
   18ad2:	cf 91       	pop	r28
   18ad4:	1f 91       	pop	r17
   18ad6:	0f 91       	pop	r16
   18ad8:	08 95       	ret

00018ada <lif_open>:
   18ada:	ef 92       	push	r14
   18adc:	ff 92       	push	r15
   18ade:	0f 93       	push	r16
   18ae0:	1f 93       	push	r17
   18ae2:	cf 93       	push	r28
   18ae4:	df 93       	push	r29
   18ae6:	18 2f       	mov	r17, r24
   18ae8:	09 2f       	mov	r16, r25
   18aea:	f6 2e       	mov	r15, r22
   18aec:	e7 2e       	mov	r14, r23
   18aee:	0e 94 96 7d 	call	0xfb2c	; 0xfb2c <fopen>
   18af2:	ec 01       	movw	r28, r24
   18af4:	89 2b       	or	r24, r25
   18af6:	99 f4       	brne	.+38     	; 0x18b1e <lif_open+0x44>
   18af8:	ef 92       	push	r14
   18afa:	ff 92       	push	r15
   18afc:	0f 93       	push	r16
   18afe:	1f 93       	push	r17
   18b00:	82 ef       	ldi	r24, 0xF2	; 242
   18b02:	93 e4       	ldi	r25, 0x43	; 67
   18b04:	1f 92       	push	r1
   18b06:	9f 93       	push	r25
   18b08:	8f 93       	push	r24
   18b0a:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   18b0e:	8d b7       	in	r24, 0x3d	; 61
   18b10:	9e b7       	in	r25, 0x3e	; 62
   18b12:	07 96       	adiw	r24, 0x07	; 7
   18b14:	0f b6       	in	r0, 0x3f	; 63
   18b16:	f8 94       	cli
   18b18:	9e bf       	out	0x3e, r25	; 62
   18b1a:	0f be       	out	0x3f, r0	; 63
   18b1c:	8d bf       	out	0x3d, r24	; 61
   18b1e:	ce 01       	movw	r24, r28
   18b20:	cd b7       	in	r28, 0x3d	; 61
   18b22:	de b7       	in	r29, 0x3e	; 62
   18b24:	e6 e0       	ldi	r30, 0x06	; 6
   18b26:	0c 94 3b e8 	jmp	0x1d076	; 0x1d076 <__epilogue_restores__+0x18>

00018b2a <lif_stat>:
   18b2a:	0f 93       	push	r16
   18b2c:	1f 93       	push	r17
   18b2e:	cf 93       	push	r28
   18b30:	df 93       	push	r29
   18b32:	18 2f       	mov	r17, r24
   18b34:	09 2f       	mov	r16, r25
   18b36:	d6 2f       	mov	r29, r22
   18b38:	c7 2f       	mov	r28, r23
   18b3a:	0e 94 aa 78 	call	0xf154	; 0xf154 <stat>
   18b3e:	97 ff       	sbrs	r25, 7
   18b40:	11 c0       	rjmp	.+34     	; 0x18b64 <lif_stat+0x3a>
   18b42:	0f 93       	push	r16
   18b44:	1f 93       	push	r17
   18b46:	89 ed       	ldi	r24, 0xD9	; 217
   18b48:	93 e4       	ldi	r25, 0x43	; 67
   18b4a:	1f 92       	push	r1
   18b4c:	9f 93       	push	r25
   18b4e:	8f 93       	push	r24
   18b50:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   18b54:	0f 90       	pop	r0
   18b56:	0f 90       	pop	r0
   18b58:	0f 90       	pop	r0
   18b5a:	0f 90       	pop	r0
   18b5c:	0f 90       	pop	r0
   18b5e:	80 e0       	ldi	r24, 0x00	; 0
   18b60:	90 e0       	ldi	r25, 0x00	; 0
   18b62:	02 c0       	rjmp	.+4      	; 0x18b68 <lif_stat+0x3e>
   18b64:	8d 2f       	mov	r24, r29
   18b66:	9c 2f       	mov	r25, r28
   18b68:	df 91       	pop	r29
   18b6a:	cf 91       	pop	r28
   18b6c:	1f 91       	pop	r17
   18b6e:	0f 91       	pop	r16
   18b70:	08 95       	ret

00018b72 <lif_seek_msg>:
   18b72:	a0 e0       	ldi	r26, 0x00	; 0
   18b74:	b0 e0       	ldi	r27, 0x00	; 0
   18b76:	ef eb       	ldi	r30, 0xBF	; 191
   18b78:	f5 ec       	ldi	r31, 0xC5	; 197
   18b7a:	0c 94 1d e8 	jmp	0x1d03a	; 0x1d03a <__prologue_saves__+0x14>
   18b7e:	ec 01       	movw	r28, r24
   18b80:	6a 01       	movw	r12, r20
   18b82:	7b 01       	movw	r14, r22
   18b84:	12 2f       	mov	r17, r18
   18b86:	03 2f       	mov	r16, r19
   18b88:	0e 94 d6 79 	call	0xf3ac	; 0xf3ac <ftell>
   18b8c:	6c 15       	cp	r22, r12
   18b8e:	7d 05       	cpc	r23, r13
   18b90:	8e 05       	cpc	r24, r14
   18b92:	9f 05       	cpc	r25, r15
   18b94:	19 f4       	brne	.+6      	; 0x18b9c <lif_seek_msg+0x2a>
   18b96:	81 e0       	ldi	r24, 0x01	; 1
   18b98:	90 e0       	ldi	r25, 0x00	; 0
   18b9a:	20 c0       	rjmp	.+64     	; 0x18bdc <lif_seek_msg+0x6a>
   18b9c:	20 e0       	ldi	r18, 0x00	; 0
   18b9e:	30 e0       	ldi	r19, 0x00	; 0
   18ba0:	b7 01       	movw	r22, r14
   18ba2:	a6 01       	movw	r20, r12
   18ba4:	ce 01       	movw	r24, r28
   18ba6:	0e 94 58 7a 	call	0xf4b0	; 0xf4b0 <fseek>
   18baa:	97 ff       	sbrs	r25, 7
   18bac:	f4 cf       	rjmp	.-24     	; 0x18b96 <lif_seek_msg+0x24>
   18bae:	ff 92       	push	r15
   18bb0:	ef 92       	push	r14
   18bb2:	df 92       	push	r13
   18bb4:	cf 92       	push	r12
   18bb6:	0f 93       	push	r16
   18bb8:	1f 93       	push	r17
   18bba:	88 eb       	ldi	r24, 0xB8	; 184
   18bbc:	93 e4       	ldi	r25, 0x43	; 67
   18bbe:	1f 92       	push	r1
   18bc0:	9f 93       	push	r25
   18bc2:	8f 93       	push	r24
   18bc4:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   18bc8:	8d b7       	in	r24, 0x3d	; 61
   18bca:	9e b7       	in	r25, 0x3e	; 62
   18bcc:	09 96       	adiw	r24, 0x09	; 9
   18bce:	0f b6       	in	r0, 0x3f	; 63
   18bd0:	f8 94       	cli
   18bd2:	9e bf       	out	0x3e, r25	; 62
   18bd4:	0f be       	out	0x3f, r0	; 63
   18bd6:	8d bf       	out	0x3d, r24	; 61
   18bd8:	80 e0       	ldi	r24, 0x00	; 0
   18bda:	90 e0       	ldi	r25, 0x00	; 0
   18bdc:	cd b7       	in	r28, 0x3d	; 61
   18bde:	de b7       	in	r29, 0x3e	; 62
   18be0:	e8 e0       	ldi	r30, 0x08	; 8
   18be2:	0c 94 39 e8 	jmp	0x1d072	; 0x1d072 <__epilogue_restores__+0x14>

00018be6 <lif_read>:
   18be6:	a0 e0       	ldi	r26, 0x00	; 0
   18be8:	b0 e0       	ldi	r27, 0x00	; 0
   18bea:	e9 ef       	ldi	r30, 0xF9	; 249
   18bec:	f5 ec       	ldi	r31, 0xC5	; 197
   18bee:	0c 94 19 e8 	jmp	0x1d032	; 0x1d032 <__prologue_saves__+0xc>
   18bf2:	ec 01       	movw	r28, r24
   18bf4:	7b 01       	movw	r14, r22
   18bf6:	b2 2e       	mov	r11, r18
   18bf8:	a3 2e       	mov	r10, r19
   18bfa:	94 2e       	mov	r9, r20
   18bfc:	85 2e       	mov	r8, r21
   18bfe:	28 81       	ld	r18, Y
   18c00:	39 81       	ldd	r19, Y+1	; 0x01
   18c02:	4b 2d       	mov	r20, r11
   18c04:	5a 2d       	mov	r21, r10
   18c06:	69 2d       	mov	r22, r9
   18c08:	78 2d       	mov	r23, r8
   18c0a:	8a 81       	ldd	r24, Y+2	; 0x02
   18c0c:	9b 81       	ldd	r25, Y+3	; 0x03
   18c0e:	b1 df       	rcall	.-158    	; 0x18b72 <lif_seek_msg>
   18c10:	89 2b       	or	r24, r25
   18c12:	b9 f1       	breq	.+110    	; 0x18c82 <lif_read+0x9c>
   18c14:	2a 81       	ldd	r18, Y+2	; 0x02
   18c16:	3b 81       	ldd	r19, Y+3	; 0x03
   18c18:	a8 01       	movw	r20, r16
   18c1a:	61 e0       	ldi	r22, 0x01	; 1
   18c1c:	70 e0       	ldi	r23, 0x00	; 0
   18c1e:	c7 01       	movw	r24, r14
   18c20:	0e 94 ec 7a 	call	0xf5d8	; 0xf5d8 <fread>
   18c24:	6c 01       	movw	r12, r24
   18c26:	e1 2c       	mov	r14, r1
   18c28:	f1 2c       	mov	r15, r1
   18c2a:	b8 01       	movw	r22, r16
   18c2c:	01 2e       	mov	r0, r17
   18c2e:	00 0c       	add	r0, r0
   18c30:	88 0b       	sbc	r24, r24
   18c32:	99 0b       	sbc	r25, r25
   18c34:	c6 16       	cp	r12, r22
   18c36:	d7 06       	cpc	r13, r23
   18c38:	e8 06       	cpc	r14, r24
   18c3a:	f9 06       	cpc	r15, r25
   18c3c:	41 f1       	breq	.+80     	; 0x18c8e <lif_read+0xa8>
   18c3e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   18c42:	80 ff       	sbrs	r24, 0
   18c44:	22 c0       	rjmp	.+68     	; 0x18c8a <lif_read+0xa4>
   18c46:	1f 93       	push	r17
   18c48:	0f 93       	push	r16
   18c4a:	1f 92       	push	r1
   18c4c:	1f 92       	push	r1
   18c4e:	df 92       	push	r13
   18c50:	cf 92       	push	r12
   18c52:	8f 92       	push	r8
   18c54:	9f 92       	push	r9
   18c56:	af 92       	push	r10
   18c58:	bf 92       	push	r11
   18c5a:	89 81       	ldd	r24, Y+1	; 0x01
   18c5c:	8f 93       	push	r24
   18c5e:	88 81       	ld	r24, Y
   18c60:	8f 93       	push	r24
   18c62:	8c e7       	ldi	r24, 0x7C	; 124
   18c64:	93 e4       	ldi	r25, 0x43	; 67
   18c66:	1f 92       	push	r1
   18c68:	9f 93       	push	r25
   18c6a:	8f 93       	push	r24
   18c6c:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   18c70:	8d b7       	in	r24, 0x3d	; 61
   18c72:	9e b7       	in	r25, 0x3e	; 62
   18c74:	0f 96       	adiw	r24, 0x0f	; 15
   18c76:	0f b6       	in	r0, 0x3f	; 63
   18c78:	f8 94       	cli
   18c7a:	9e bf       	out	0x3e, r25	; 62
   18c7c:	0f be       	out	0x3f, r0	; 63
   18c7e:	8d bf       	out	0x3d, r24	; 61
   18c80:	04 c0       	rjmp	.+8      	; 0x18c8a <lif_read+0xa4>
   18c82:	60 e0       	ldi	r22, 0x00	; 0
   18c84:	70 e0       	ldi	r23, 0x00	; 0
   18c86:	cb 01       	movw	r24, r22
   18c88:	02 c0       	rjmp	.+4      	; 0x18c8e <lif_read+0xa8>
   18c8a:	c7 01       	movw	r24, r14
   18c8c:	b6 01       	movw	r22, r12
   18c8e:	cd b7       	in	r28, 0x3d	; 61
   18c90:	de b7       	in	r29, 0x3e	; 62
   18c92:	ec e0       	ldi	r30, 0x0C	; 12
   18c94:	0c 94 35 e8 	jmp	0x1d06a	; 0x1d06a <__epilogue_restores__+0xc>

00018c98 <lif_write>:
   18c98:	a0 e0       	ldi	r26, 0x00	; 0
   18c9a:	b0 e0       	ldi	r27, 0x00	; 0
   18c9c:	e2 e5       	ldi	r30, 0x52	; 82
   18c9e:	f6 ec       	ldi	r31, 0xC6	; 198
   18ca0:	0c 94 1b e8 	jmp	0x1d036	; 0x1d036 <__prologue_saves__+0x10>
   18ca4:	7c 01       	movw	r14, r24
   18ca6:	eb 01       	movw	r28, r22
   18ca8:	d2 2e       	mov	r13, r18
   18caa:	c3 2e       	mov	r12, r19
   18cac:	b4 2e       	mov	r11, r20
   18cae:	a5 2e       	mov	r10, r21
   18cb0:	fc 01       	movw	r30, r24
   18cb2:	20 81       	ld	r18, Z
   18cb4:	31 81       	ldd	r19, Z+1	; 0x01
   18cb6:	4d 2d       	mov	r20, r13
   18cb8:	5c 2d       	mov	r21, r12
   18cba:	6b 2d       	mov	r22, r11
   18cbc:	7a 2d       	mov	r23, r10
   18cbe:	82 81       	ldd	r24, Z+2	; 0x02
   18cc0:	93 81       	ldd	r25, Z+3	; 0x03
   18cc2:	57 df       	rcall	.-338    	; 0x18b72 <lif_seek_msg>
   18cc4:	00 97       	sbiw	r24, 0x00	; 0
   18cc6:	89 f1       	breq	.+98     	; 0x18d2a <lif_write+0x92>
   18cc8:	f7 01       	movw	r30, r14
   18cca:	22 81       	ldd	r18, Z+2	; 0x02
   18ccc:	33 81       	ldd	r19, Z+3	; 0x03
   18cce:	a8 01       	movw	r20, r16
   18cd0:	61 e0       	ldi	r22, 0x01	; 1
   18cd2:	70 e0       	ldi	r23, 0x00	; 0
   18cd4:	ce 01       	movw	r24, r28
   18cd6:	0e 94 be 7b 	call	0xf77c	; 0xf77c <fwrite>
   18cda:	ec 01       	movw	r28, r24
   18cdc:	08 17       	cp	r16, r24
   18cde:	19 07       	cpc	r17, r25
   18ce0:	09 f1       	breq	.+66     	; 0x18d24 <lif_write+0x8c>
   18ce2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   18ce6:	80 ff       	sbrs	r24, 0
   18ce8:	1f c0       	rjmp	.+62     	; 0x18d28 <lif_write+0x90>
   18cea:	1f 93       	push	r17
   18cec:	0f 93       	push	r16
   18cee:	df 93       	push	r29
   18cf0:	cf 93       	push	r28
   18cf2:	af 92       	push	r10
   18cf4:	bf 92       	push	r11
   18cf6:	cf 92       	push	r12
   18cf8:	df 92       	push	r13
   18cfa:	f7 01       	movw	r30, r14
   18cfc:	81 81       	ldd	r24, Z+1	; 0x01
   18cfe:	8f 93       	push	r24
   18d00:	80 81       	ld	r24, Z
   18d02:	8f 93       	push	r24
   18d04:	8f e3       	ldi	r24, 0x3F	; 63
   18d06:	93 e4       	ldi	r25, 0x43	; 67
   18d08:	1f 92       	push	r1
   18d0a:	9f 93       	push	r25
   18d0c:	8f 93       	push	r24
   18d0e:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   18d12:	8d b7       	in	r24, 0x3d	; 61
   18d14:	9e b7       	in	r25, 0x3e	; 62
   18d16:	0d 96       	adiw	r24, 0x0d	; 13
   18d18:	0f b6       	in	r0, 0x3f	; 63
   18d1a:	f8 94       	cli
   18d1c:	9e bf       	out	0x3e, r25	; 62
   18d1e:	0f be       	out	0x3f, r0	; 63
   18d20:	8d bf       	out	0x3d, r24	; 61
   18d22:	02 c0       	rjmp	.+4      	; 0x18d28 <lif_write+0x90>
   18d24:	c8 01       	movw	r24, r16
   18d26:	01 c0       	rjmp	.+2      	; 0x18d2a <lif_write+0x92>
   18d28:	ce 01       	movw	r24, r28
   18d2a:	cd b7       	in	r28, 0x3d	; 61
   18d2c:	de b7       	in	r29, 0x3e	; 62
   18d2e:	ea e0       	ldi	r30, 0x0A	; 10
   18d30:	0c 94 37 e8 	jmp	0x1d06e	; 0x1d06e <__epilogue_restores__+0x10>

00018d34 <lif_chars>:
   18d34:	80 32       	cpi	r24, 0x20	; 32
   18d36:	91 05       	cpc	r25, r1
   18d38:	e1 f0       	breq	.+56     	; 0x18d72 <lif_chars+0x3e>
   18d3a:	9c 01       	movw	r18, r24
   18d3c:	21 56       	subi	r18, 0x61	; 97
   18d3e:	31 09       	sbc	r19, r1
   18d40:	2a 31       	cpi	r18, 0x1A	; 26
   18d42:	31 05       	cpc	r19, r1
   18d44:	10 f4       	brcc	.+4      	; 0x18d4a <lif_chars+0x16>
   18d46:	80 97       	sbiw	r24, 0x20	; 32
   18d48:	08 95       	ret
   18d4a:	9c 01       	movw	r18, r24
   18d4c:	21 54       	subi	r18, 0x41	; 65
   18d4e:	31 09       	sbc	r19, r1
   18d50:	2a 31       	cpi	r18, 0x1A	; 26
   18d52:	31 05       	cpc	r19, r1
   18d54:	c8 f0       	brcs	.+50     	; 0x18d88 <lif_chars+0x54>
   18d56:	16 16       	cp	r1, r22
   18d58:	17 06       	cpc	r1, r23
   18d5a:	74 f4       	brge	.+28     	; 0x18d78 <lif_chars+0x44>
   18d5c:	2f 5e       	subi	r18, 0xEF	; 239
   18d5e:	3f 4f       	sbci	r19, 0xFF	; 255
   18d60:	2a 30       	cpi	r18, 0x0A	; 10
   18d62:	31 05       	cpc	r19, r1
   18d64:	88 f0       	brcs	.+34     	; 0x18d88 <lif_chars+0x54>
   18d66:	8f 35       	cpi	r24, 0x5F	; 95
   18d68:	91 05       	cpc	r25, r1
   18d6a:	49 f0       	breq	.+18     	; 0x18d7e <lif_chars+0x4a>
   18d6c:	8d 97       	sbiw	r24, 0x2d	; 45
   18d6e:	21 f4       	brne	.+8      	; 0x18d78 <lif_chars+0x44>
   18d70:	09 c0       	rjmp	.+18     	; 0x18d84 <lif_chars+0x50>
   18d72:	80 e2       	ldi	r24, 0x20	; 32
   18d74:	90 e0       	ldi	r25, 0x00	; 0
   18d76:	08 95       	ret
   18d78:	80 e0       	ldi	r24, 0x00	; 0
   18d7a:	90 e0       	ldi	r25, 0x00	; 0
   18d7c:	08 95       	ret
   18d7e:	8f e5       	ldi	r24, 0x5F	; 95
   18d80:	90 e0       	ldi	r25, 0x00	; 0
   18d82:	08 95       	ret
   18d84:	8d e2       	ldi	r24, 0x2D	; 45
   18d86:	90 e0       	ldi	r25, 0x00	; 0
   18d88:	08 95       	ret

00018d8a <lif_B2S>:
   18d8a:	a0 e0       	ldi	r26, 0x00	; 0
   18d8c:	b0 e0       	ldi	r27, 0x00	; 0
   18d8e:	eb ec       	ldi	r30, 0xCB	; 203
   18d90:	f6 ec       	ldi	r31, 0xC6	; 198
   18d92:	0c 94 19 e8 	jmp	0x1d032	; 0x1d032 <__prologue_saves__+0xc>
   18d96:	5c 01       	movw	r10, r24
   18d98:	6b 01       	movw	r12, r22
   18d9a:	ea 01       	movw	r28, r20
   18d9c:	4c 01       	movw	r8, r24
   18d9e:	ee 24       	eor	r14, r14
   18da0:	e3 94       	inc	r14
   18da2:	f1 2c       	mov	r15, r1
   18da4:	00 e0       	ldi	r16, 0x00	; 0
   18da6:	10 e0       	ldi	r17, 0x00	; 0
   18da8:	0c 17       	cp	r16, r28
   18daa:	1d 07       	cpc	r17, r29
   18dac:	6c f4       	brge	.+26     	; 0x18dc8 <lif_B2S+0x3e>
   18dae:	f4 01       	movw	r30, r8
   18db0:	81 91       	ld	r24, Z+
   18db2:	4f 01       	movw	r8, r30
   18db4:	b8 01       	movw	r22, r16
   18db6:	90 e0       	ldi	r25, 0x00	; 0
   18db8:	bd df       	rcall	.-134    	; 0x18d34 <lif_chars>
   18dba:	89 2b       	or	r24, r25
   18dbc:	11 f4       	brne	.+4      	; 0x18dc2 <lif_B2S+0x38>
   18dbe:	e1 2c       	mov	r14, r1
   18dc0:	f1 2c       	mov	r15, r1
   18dc2:	0f 5f       	subi	r16, 0xFF	; 255
   18dc4:	1f 4f       	sbci	r17, 0xFF	; 255
   18dc6:	f0 cf       	rjmp	.-32     	; 0x18da8 <lif_B2S+0x1e>
   18dc8:	d6 01       	movw	r26, r12
   18dca:	f5 01       	movw	r30, r10
   18dcc:	cf 01       	movw	r24, r30
   18dce:	8a 19       	sub	r24, r10
   18dd0:	9b 09       	sbc	r25, r11
   18dd2:	8c 17       	cp	r24, r28
   18dd4:	9d 07       	cpc	r25, r29
   18dd6:	1c f4       	brge	.+6      	; 0x18dde <lif_B2S+0x54>
   18dd8:	81 91       	ld	r24, Z+
   18dda:	8d 93       	st	X+, r24
   18ddc:	f7 cf       	rjmp	.-18     	; 0x18dcc <lif_B2S+0x42>
   18dde:	d7 ff       	sbrs	r29, 7
   18de0:	02 c0       	rjmp	.+4      	; 0x18de6 <lif_B2S+0x5c>
   18de2:	c0 e0       	ldi	r28, 0x00	; 0
   18de4:	d0 e0       	ldi	r29, 0x00	; 0
   18de6:	cc 0d       	add	r28, r12
   18de8:	dd 1d       	adc	r29, r13
   18dea:	18 82       	st	Y, r1
   18dec:	c6 01       	movw	r24, r12
   18dee:	0e 94 71 32 	call	0x64e2	; 0x64e2 <trim_tail>
   18df2:	c7 01       	movw	r24, r14
   18df4:	cd b7       	in	r28, 0x3d	; 61
   18df6:	de b7       	in	r29, 0x3e	; 62
   18df8:	ec e0       	ldi	r30, 0x0C	; 12
   18dfa:	0c 94 35 e8 	jmp	0x1d06a	; 0x1d06a <__epilogue_restores__+0xc>

00018dfe <lif_checkname>:
   18dfe:	ef 92       	push	r14
   18e00:	ff 92       	push	r15
   18e02:	0f 93       	push	r16
   18e04:	1f 93       	push	r17
   18e06:	cf 93       	push	r28
   18e08:	df 93       	push	r29
   18e0a:	7c 01       	movw	r14, r24
   18e0c:	ec 01       	movw	r28, r24
   18e0e:	01 e0       	ldi	r16, 0x01	; 1
   18e10:	10 e0       	ldi	r17, 0x00	; 0
   18e12:	be 01       	movw	r22, r28
   18e14:	6e 19       	sub	r22, r14
   18e16:	7f 09       	sbc	r23, r15
   18e18:	89 91       	ld	r24, Y+
   18e1a:	88 23       	and	r24, r24
   18e1c:	39 f0       	breq	.+14     	; 0x18e2c <lif_checkname+0x2e>
   18e1e:	90 e0       	ldi	r25, 0x00	; 0
   18e20:	89 df       	rcall	.-238    	; 0x18d34 <lif_chars>
   18e22:	89 2b       	or	r24, r25
   18e24:	b1 f7       	brne	.-20     	; 0x18e12 <lif_checkname+0x14>
   18e26:	00 e0       	ldi	r16, 0x00	; 0
   18e28:	10 e0       	ldi	r17, 0x00	; 0
   18e2a:	f3 cf       	rjmp	.-26     	; 0x18e12 <lif_checkname+0x14>
   18e2c:	c8 01       	movw	r24, r16
   18e2e:	cd b7       	in	r28, 0x3d	; 61
   18e30:	de b7       	in	r29, 0x3e	; 62
   18e32:	e6 e0       	ldi	r30, 0x06	; 6
   18e34:	0c 94 3b e8 	jmp	0x1d076	; 0x1d076 <__epilogue_restores__+0x18>

00018e38 <lif_S2B>:
   18e38:	fb 01       	movw	r30, r22
   18e3a:	dc 01       	movw	r26, r24
   18e3c:	20 e0       	ldi	r18, 0x00	; 0
   18e3e:	30 e0       	ldi	r19, 0x00	; 0
   18e40:	61 91       	ld	r22, Z+
   18e42:	61 11       	cpse	r22, r1
   18e44:	05 c0       	rjmp	.+10     	; 0x18e50 <lif_S2B+0x18>
   18e46:	fc 01       	movw	r30, r24
   18e48:	e2 0f       	add	r30, r18
   18e4a:	f3 1f       	adc	r31, r19
   18e4c:	60 e2       	ldi	r22, 0x20	; 32
   18e4e:	08 c0       	rjmp	.+16     	; 0x18e60 <lif_S2B+0x28>
   18e50:	24 17       	cp	r18, r20
   18e52:	35 07       	cpc	r19, r21
   18e54:	24 f4       	brge	.+8      	; 0x18e5e <lif_S2B+0x26>
   18e56:	6d 93       	st	X+, r22
   18e58:	2f 5f       	subi	r18, 0xFF	; 255
   18e5a:	3f 4f       	sbci	r19, 0xFF	; 255
   18e5c:	f1 cf       	rjmp	.-30     	; 0x18e40 <lif_S2B+0x8>
   18e5e:	08 95       	ret
   18e60:	9f 01       	movw	r18, r30
   18e62:	28 1b       	sub	r18, r24
   18e64:	39 0b       	sbc	r19, r25
   18e66:	24 17       	cp	r18, r20
   18e68:	35 07       	cpc	r19, r21
   18e6a:	14 f4       	brge	.+4      	; 0x18e70 <lif_S2B+0x38>
   18e6c:	61 93       	st	Z+, r22
   18e6e:	f8 cf       	rjmp	.-16     	; 0x18e60 <lif_S2B+0x28>
   18e70:	08 95       	ret

00018e72 <lif_fixname>:
   18e72:	a0 e0       	ldi	r26, 0x00	; 0
   18e74:	b0 e0       	ldi	r27, 0x00	; 0
   18e76:	ef e3       	ldi	r30, 0x3F	; 63
   18e78:	f7 ec       	ldi	r31, 0xC7	; 199
   18e7a:	0c 94 1c e8 	jmp	0x1d038	; 0x1d038 <__prologue_saves__+0x12>
   18e7e:	8c 01       	movw	r16, r24
   18e80:	cb 01       	movw	r24, r22
   18e82:	7a 01       	movw	r14, r20
   18e84:	0e 94 80 76 	call	0xed00	; 0xed00 <basename>
   18e88:	6c 01       	movw	r12, r24
   18e8a:	e8 01       	movw	r28, r16
   18e8c:	80 e2       	ldi	r24, 0x20	; 32
   18e8e:	b8 2e       	mov	r11, r24
   18e90:	be 01       	movw	r22, r28
   18e92:	60 1b       	sub	r22, r16
   18e94:	71 0b       	sbc	r23, r17
   18e96:	f6 01       	movw	r30, r12
   18e98:	81 91       	ld	r24, Z+
   18e9a:	6f 01       	movw	r12, r30
   18e9c:	81 11       	cpse	r24, r1
   18e9e:	02 c0       	rjmp	.+4      	; 0x18ea4 <lif_fixname+0x32>
   18ea0:	20 e2       	ldi	r18, 0x20	; 32
   18ea2:	0e c0       	rjmp	.+28     	; 0x18ec0 <lif_fixname+0x4e>
   18ea4:	1e 14       	cp	r1, r14
   18ea6:	1f 04       	cpc	r1, r15
   18ea8:	dc f7       	brge	.-10     	; 0x18ea0 <lif_fixname+0x2e>
   18eaa:	8e 32       	cpi	r24, 0x2E	; 46
   18eac:	c9 f3       	breq	.-14     	; 0x18ea0 <lif_fixname+0x2e>
   18eae:	90 e0       	ldi	r25, 0x00	; 0
   18eb0:	41 df       	rcall	.-382    	; 0x18d34 <lif_chars>
   18eb2:	88 23       	and	r24, r24
   18eb4:	11 f0       	breq	.+4      	; 0x18eba <lif_fixname+0x48>
   18eb6:	88 83       	st	Y, r24
   18eb8:	01 c0       	rjmp	.+2      	; 0x18ebc <lif_fixname+0x4a>
   18eba:	b8 82       	st	Y, r11
   18ebc:	21 96       	adiw	r28, 0x01	; 1
   18ebe:	e8 cf       	rjmp	.-48     	; 0x18e90 <lif_fixname+0x1e>
   18ec0:	ce 01       	movw	r24, r28
   18ec2:	80 1b       	sub	r24, r16
   18ec4:	91 0b       	sbc	r25, r17
   18ec6:	8e 15       	cp	r24, r14
   18ec8:	9f 05       	cpc	r25, r15
   18eca:	14 f4       	brge	.+4      	; 0x18ed0 <lif_fixname+0x5e>
   18ecc:	29 93       	st	Y+, r18
   18ece:	f8 cf       	rjmp	.-16     	; 0x18ec0 <lif_fixname+0x4e>
   18ed0:	18 82       	st	Y, r1
   18ed2:	f8 01       	movw	r30, r16
   18ed4:	01 90       	ld	r0, Z+
   18ed6:	00 20       	and	r0, r0
   18ed8:	e9 f7       	brne	.-6      	; 0x18ed4 <lif_fixname+0x62>
   18eda:	cf 01       	movw	r24, r30
   18edc:	01 97       	sbiw	r24, 0x01	; 1
   18ede:	80 1b       	sub	r24, r16
   18ee0:	91 0b       	sbc	r25, r17
   18ee2:	cd b7       	in	r28, 0x3d	; 61
   18ee4:	de b7       	in	r29, 0x3e	; 62
   18ee6:	e9 e0       	ldi	r30, 0x09	; 9
   18ee8:	0c 94 38 e8 	jmp	0x1d070	; 0x1d070 <__epilogue_restores__+0x12>

00018eec <lif_vol2str>:
   18eec:	ef 92       	push	r14
   18eee:	ff 92       	push	r15
   18ef0:	0f 93       	push	r16
   18ef2:	1f 93       	push	r17
   18ef4:	cf 93       	push	r28
   18ef6:	df 93       	push	r29
   18ef8:	7c 01       	movw	r14, r24
   18efa:	eb 01       	movw	r28, r22
   18efc:	fc 01       	movw	r30, r24
   18efe:	04 a1       	ldd	r16, Z+36	; 0x24
   18f00:	15 a1       	ldd	r17, Z+37	; 0x25
   18f02:	20 e0       	ldi	r18, 0x00	; 0
   18f04:	30 e0       	ldi	r19, 0x00	; 0
   18f06:	42 e0       	ldi	r20, 0x02	; 2
   18f08:	50 e0       	ldi	r21, 0x00	; 0
   18f0a:	60 e0       	ldi	r22, 0x00	; 0
   18f0c:	70 e0       	ldi	r23, 0x00	; 0
   18f0e:	ce 01       	movw	r24, r28
   18f10:	0e 94 30 93 	call	0x12660	; 0x12660 <V2B_MSB>
   18f14:	b7 01       	movw	r22, r14
   18f16:	6a 5d       	subi	r22, 0xDA	; 218
   18f18:	7f 4f       	sbci	r23, 0xFF	; 255
   18f1a:	46 e0       	ldi	r20, 0x06	; 6
   18f1c:	50 e0       	ldi	r21, 0x00	; 0
   18f1e:	ce 01       	movw	r24, r28
   18f20:	02 96       	adiw	r24, 0x02	; 2
   18f22:	8a df       	rcall	.-236    	; 0x18e38 <lif_S2B>
   18f24:	f7 01       	movw	r30, r14
   18f26:	05 a5       	ldd	r16, Z+45	; 0x2d
   18f28:	16 a5       	ldd	r17, Z+46	; 0x2e
   18f2a:	27 a5       	ldd	r18, Z+47	; 0x2f
   18f2c:	30 a9       	ldd	r19, Z+48	; 0x30
   18f2e:	44 e0       	ldi	r20, 0x04	; 4
   18f30:	50 e0       	ldi	r21, 0x00	; 0
   18f32:	68 e0       	ldi	r22, 0x08	; 8
   18f34:	70 e0       	ldi	r23, 0x00	; 0
   18f36:	ce 01       	movw	r24, r28
   18f38:	0e 94 30 93 	call	0x12660	; 0x12660 <V2B_MSB>
   18f3c:	f7 01       	movw	r30, r14
   18f3e:	01 a9       	ldd	r16, Z+49	; 0x31
   18f40:	12 a9       	ldd	r17, Z+50	; 0x32
   18f42:	20 e0       	ldi	r18, 0x00	; 0
   18f44:	30 e0       	ldi	r19, 0x00	; 0
   18f46:	42 e0       	ldi	r20, 0x02	; 2
   18f48:	50 e0       	ldi	r21, 0x00	; 0
   18f4a:	6c e0       	ldi	r22, 0x0C	; 12
   18f4c:	70 e0       	ldi	r23, 0x00	; 0
   18f4e:	ce 01       	movw	r24, r28
   18f50:	0e 94 30 93 	call	0x12660	; 0x12660 <V2B_MSB>
   18f54:	00 e0       	ldi	r16, 0x00	; 0
   18f56:	10 e0       	ldi	r17, 0x00	; 0
   18f58:	98 01       	movw	r18, r16
   18f5a:	42 e0       	ldi	r20, 0x02	; 2
   18f5c:	50 e0       	ldi	r21, 0x00	; 0
   18f5e:	6e e0       	ldi	r22, 0x0E	; 14
   18f60:	70 e0       	ldi	r23, 0x00	; 0
   18f62:	ce 01       	movw	r24, r28
   18f64:	0e 94 30 93 	call	0x12660	; 0x12660 <V2B_MSB>
   18f68:	f7 01       	movw	r30, r14
   18f6a:	05 a9       	ldd	r16, Z+53	; 0x35
   18f6c:	16 a9       	ldd	r17, Z+54	; 0x36
   18f6e:	27 a9       	ldd	r18, Z+55	; 0x37
   18f70:	30 ad       	ldd	r19, Z+56	; 0x38
   18f72:	44 e0       	ldi	r20, 0x04	; 4
   18f74:	50 e0       	ldi	r21, 0x00	; 0
   18f76:	60 e1       	ldi	r22, 0x10	; 16
   18f78:	70 e0       	ldi	r23, 0x00	; 0
   18f7a:	ce 01       	movw	r24, r28
   18f7c:	0e 94 30 93 	call	0x12660	; 0x12660 <V2B_MSB>
   18f80:	f7 01       	movw	r30, r14
   18f82:	01 ad       	ldd	r16, Z+57	; 0x39
   18f84:	12 ad       	ldd	r17, Z+58	; 0x3a
   18f86:	20 e0       	ldi	r18, 0x00	; 0
   18f88:	30 e0       	ldi	r19, 0x00	; 0
   18f8a:	42 e0       	ldi	r20, 0x02	; 2
   18f8c:	50 e0       	ldi	r21, 0x00	; 0
   18f8e:	64 e1       	ldi	r22, 0x14	; 20
   18f90:	70 e0       	ldi	r23, 0x00	; 0
   18f92:	ce 01       	movw	r24, r28
   18f94:	0e 94 30 93 	call	0x12660	; 0x12660 <V2B_MSB>
   18f98:	00 e0       	ldi	r16, 0x00	; 0
   18f9a:	10 e0       	ldi	r17, 0x00	; 0
   18f9c:	98 01       	movw	r18, r16
   18f9e:	42 e0       	ldi	r20, 0x02	; 2
   18fa0:	50 e0       	ldi	r21, 0x00	; 0
   18fa2:	66 e1       	ldi	r22, 0x16	; 22
   18fa4:	70 e0       	ldi	r23, 0x00	; 0
   18fa6:	ce 01       	movw	r24, r28
   18fa8:	0e 94 30 93 	call	0x12660	; 0x12660 <V2B_MSB>
   18fac:	f7 01       	movw	r30, r14
   18fae:	fd 96       	adiw	r30, 0x3d	; 61
   18fb0:	00 81       	ld	r16, Z
   18fb2:	11 81       	ldd	r17, Z+1	; 0x01
   18fb4:	22 81       	ldd	r18, Z+2	; 0x02
   18fb6:	33 81       	ldd	r19, Z+3	; 0x03
   18fb8:	44 e0       	ldi	r20, 0x04	; 4
   18fba:	50 e0       	ldi	r21, 0x00	; 0
   18fbc:	68 e1       	ldi	r22, 0x18	; 24
   18fbe:	70 e0       	ldi	r23, 0x00	; 0
   18fc0:	ce 01       	movw	r24, r28
   18fc2:	0e 94 30 93 	call	0x12660	; 0x12660 <V2B_MSB>
   18fc6:	f7 01       	movw	r30, r14
   18fc8:	ef 5b       	subi	r30, 0xBF	; 191
   18fca:	ff 4f       	sbci	r31, 0xFF	; 255
   18fcc:	00 81       	ld	r16, Z
   18fce:	11 81       	ldd	r17, Z+1	; 0x01
   18fd0:	22 81       	ldd	r18, Z+2	; 0x02
   18fd2:	33 81       	ldd	r19, Z+3	; 0x03
   18fd4:	44 e0       	ldi	r20, 0x04	; 4
   18fd6:	50 e0       	ldi	r21, 0x00	; 0
   18fd8:	6c e1       	ldi	r22, 0x1C	; 28
   18fda:	70 e0       	ldi	r23, 0x00	; 0
   18fdc:	ce 01       	movw	r24, r28
   18fde:	0e 94 30 93 	call	0x12660	; 0x12660 <V2B_MSB>
   18fe2:	f7 01       	movw	r30, r14
   18fe4:	eb 5b       	subi	r30, 0xBB	; 187
   18fe6:	ff 4f       	sbci	r31, 0xFF	; 255
   18fe8:	00 81       	ld	r16, Z
   18fea:	11 81       	ldd	r17, Z+1	; 0x01
   18fec:	22 81       	ldd	r18, Z+2	; 0x02
   18fee:	33 81       	ldd	r19, Z+3	; 0x03
   18ff0:	44 e0       	ldi	r20, 0x04	; 4
   18ff2:	50 e0       	ldi	r21, 0x00	; 0
   18ff4:	60 e2       	ldi	r22, 0x20	; 32
   18ff6:	70 e0       	ldi	r23, 0x00	; 0
   18ff8:	ce 01       	movw	r24, r28
   18ffa:	0e 94 30 93 	call	0x12660	; 0x12660 <V2B_MSB>
   18ffe:	de 01       	movw	r26, r28
   19000:	94 96       	adiw	r26, 0x24	; 36
   19002:	f7 01       	movw	r30, r14
   19004:	e7 5b       	subi	r30, 0xB7	; 183
   19006:	ff 4f       	sbci	r31, 0xFF	; 255
   19008:	86 e0       	ldi	r24, 0x06	; 6
   1900a:	01 90       	ld	r0, Z+
   1900c:	0d 92       	st	X+, r0
   1900e:	8a 95       	dec	r24
   19010:	e1 f7       	brne	.-8      	; 0x1900a <lif_vol2str+0x11e>
   19012:	cd b7       	in	r28, 0x3d	; 61
   19014:	de b7       	in	r29, 0x3e	; 62
   19016:	e6 e0       	ldi	r30, 0x06	; 6
   19018:	0c 94 3b e8 	jmp	0x1d076	; 0x1d076 <__epilogue_restores__+0x18>

0001901c <lif_str2vol>:
   1901c:	0f 93       	push	r16
   1901e:	1f 93       	push	r17
   19020:	cf 93       	push	r28
   19022:	df 93       	push	r29
   19024:	8c 01       	movw	r16, r24
   19026:	eb 01       	movw	r28, r22
   19028:	42 e0       	ldi	r20, 0x02	; 2
   1902a:	50 e0       	ldi	r21, 0x00	; 0
   1902c:	60 e0       	ldi	r22, 0x00	; 0
   1902e:	70 e0       	ldi	r23, 0x00	; 0
   19030:	0e 94 59 93 	call	0x126b2	; 0x126b2 <B2V_MSB>
   19034:	7d a3       	std	Y+37, r23	; 0x25
   19036:	6c a3       	std	Y+36, r22	; 0x24
   19038:	be 01       	movw	r22, r28
   1903a:	6a 5d       	subi	r22, 0xDA	; 218
   1903c:	7f 4f       	sbci	r23, 0xFF	; 255
   1903e:	46 e0       	ldi	r20, 0x06	; 6
   19040:	50 e0       	ldi	r21, 0x00	; 0
   19042:	c8 01       	movw	r24, r16
   19044:	02 96       	adiw	r24, 0x02	; 2
   19046:	a1 de       	rcall	.-702    	; 0x18d8a <lif_B2S>
   19048:	44 e0       	ldi	r20, 0x04	; 4
   1904a:	50 e0       	ldi	r21, 0x00	; 0
   1904c:	68 e0       	ldi	r22, 0x08	; 8
   1904e:	70 e0       	ldi	r23, 0x00	; 0
   19050:	c8 01       	movw	r24, r16
   19052:	0e 94 59 93 	call	0x126b2	; 0x126b2 <B2V_MSB>
   19056:	6d a7       	std	Y+45, r22	; 0x2d
   19058:	7e a7       	std	Y+46, r23	; 0x2e
   1905a:	8f a7       	std	Y+47, r24	; 0x2f
   1905c:	98 ab       	std	Y+48, r25	; 0x30
   1905e:	42 e0       	ldi	r20, 0x02	; 2
   19060:	50 e0       	ldi	r21, 0x00	; 0
   19062:	6c e0       	ldi	r22, 0x0C	; 12
   19064:	70 e0       	ldi	r23, 0x00	; 0
   19066:	c8 01       	movw	r24, r16
   19068:	0e 94 59 93 	call	0x126b2	; 0x126b2 <B2V_MSB>
   1906c:	7a ab       	std	Y+50, r23	; 0x32
   1906e:	69 ab       	std	Y+49, r22	; 0x31
   19070:	42 e0       	ldi	r20, 0x02	; 2
   19072:	50 e0       	ldi	r21, 0x00	; 0
   19074:	6e e0       	ldi	r22, 0x0E	; 14
   19076:	70 e0       	ldi	r23, 0x00	; 0
   19078:	c8 01       	movw	r24, r16
   1907a:	0e 94 59 93 	call	0x126b2	; 0x126b2 <B2V_MSB>
   1907e:	7c ab       	std	Y+52, r23	; 0x34
   19080:	6b ab       	std	Y+51, r22	; 0x33
   19082:	44 e0       	ldi	r20, 0x04	; 4
   19084:	50 e0       	ldi	r21, 0x00	; 0
   19086:	60 e1       	ldi	r22, 0x10	; 16
   19088:	70 e0       	ldi	r23, 0x00	; 0
   1908a:	c8 01       	movw	r24, r16
   1908c:	0e 94 59 93 	call	0x126b2	; 0x126b2 <B2V_MSB>
   19090:	6d ab       	std	Y+53, r22	; 0x35
   19092:	7e ab       	std	Y+54, r23	; 0x36
   19094:	8f ab       	std	Y+55, r24	; 0x37
   19096:	98 af       	std	Y+56, r25	; 0x38
   19098:	42 e0       	ldi	r20, 0x02	; 2
   1909a:	50 e0       	ldi	r21, 0x00	; 0
   1909c:	64 e1       	ldi	r22, 0x14	; 20
   1909e:	70 e0       	ldi	r23, 0x00	; 0
   190a0:	c8 01       	movw	r24, r16
   190a2:	0e 94 59 93 	call	0x126b2	; 0x126b2 <B2V_MSB>
   190a6:	7a af       	std	Y+58, r23	; 0x3a
   190a8:	69 af       	std	Y+57, r22	; 0x39
   190aa:	42 e0       	ldi	r20, 0x02	; 2
   190ac:	50 e0       	ldi	r21, 0x00	; 0
   190ae:	66 e1       	ldi	r22, 0x16	; 22
   190b0:	70 e0       	ldi	r23, 0x00	; 0
   190b2:	c8 01       	movw	r24, r16
   190b4:	0e 94 59 93 	call	0x126b2	; 0x126b2 <B2V_MSB>
   190b8:	7c af       	std	Y+60, r23	; 0x3c
   190ba:	6b af       	std	Y+59, r22	; 0x3b
   190bc:	44 e0       	ldi	r20, 0x04	; 4
   190be:	50 e0       	ldi	r21, 0x00	; 0
   190c0:	68 e1       	ldi	r22, 0x18	; 24
   190c2:	70 e0       	ldi	r23, 0x00	; 0
   190c4:	c8 01       	movw	r24, r16
   190c6:	0e 94 59 93 	call	0x126b2	; 0x126b2 <B2V_MSB>
   190ca:	fe 01       	movw	r30, r28
   190cc:	fd 96       	adiw	r30, 0x3d	; 61
   190ce:	60 83       	st	Z, r22
   190d0:	71 83       	std	Z+1, r23	; 0x01
   190d2:	82 83       	std	Z+2, r24	; 0x02
   190d4:	93 83       	std	Z+3, r25	; 0x03
   190d6:	44 e0       	ldi	r20, 0x04	; 4
   190d8:	50 e0       	ldi	r21, 0x00	; 0
   190da:	6c e1       	ldi	r22, 0x1C	; 28
   190dc:	70 e0       	ldi	r23, 0x00	; 0
   190de:	c8 01       	movw	r24, r16
   190e0:	0e 94 59 93 	call	0x126b2	; 0x126b2 <B2V_MSB>
   190e4:	fe 01       	movw	r30, r28
   190e6:	ef 5b       	subi	r30, 0xBF	; 191
   190e8:	ff 4f       	sbci	r31, 0xFF	; 255
   190ea:	60 83       	st	Z, r22
   190ec:	71 83       	std	Z+1, r23	; 0x01
   190ee:	82 83       	std	Z+2, r24	; 0x02
   190f0:	93 83       	std	Z+3, r25	; 0x03
   190f2:	44 e0       	ldi	r20, 0x04	; 4
   190f4:	50 e0       	ldi	r21, 0x00	; 0
   190f6:	60 e2       	ldi	r22, 0x20	; 32
   190f8:	70 e0       	ldi	r23, 0x00	; 0
   190fa:	c8 01       	movw	r24, r16
   190fc:	0e 94 59 93 	call	0x126b2	; 0x126b2 <B2V_MSB>
   19100:	fe 01       	movw	r30, r28
   19102:	eb 5b       	subi	r30, 0xBB	; 187
   19104:	ff 4f       	sbci	r31, 0xFF	; 255
   19106:	60 83       	st	Z, r22
   19108:	71 83       	std	Z+1, r23	; 0x01
   1910a:	82 83       	std	Z+2, r24	; 0x02
   1910c:	93 83       	std	Z+3, r25	; 0x03
   1910e:	de 01       	movw	r26, r28
   19110:	a7 5b       	subi	r26, 0xB7	; 183
   19112:	bf 4f       	sbci	r27, 0xFF	; 255
   19114:	f8 01       	movw	r30, r16
   19116:	b4 96       	adiw	r30, 0x24	; 36
   19118:	86 e0       	ldi	r24, 0x06	; 6
   1911a:	01 90       	ld	r0, Z+
   1911c:	0d 92       	st	X+, r0
   1911e:	8a 95       	dec	r24
   19120:	e1 f7       	brne	.-8      	; 0x1911a <lif_str2vol+0xfe>
   19122:	df 91       	pop	r29
   19124:	cf 91       	pop	r28
   19126:	1f 91       	pop	r17
   19128:	0f 91       	pop	r16
   1912a:	08 95       	ret

0001912c <lif_dir2str>:
   1912c:	ef 92       	push	r14
   1912e:	ff 92       	push	r15
   19130:	0f 93       	push	r16
   19132:	1f 93       	push	r17
   19134:	cf 93       	push	r28
   19136:	df 93       	push	r29
   19138:	ec 01       	movw	r28, r24
   1913a:	7b 01       	movw	r14, r22
   1913c:	bc 01       	movw	r22, r24
   1913e:	61 5b       	subi	r22, 0xB1	; 177
   19140:	7f 4f       	sbci	r23, 0xFF	; 255
   19142:	4a e0       	ldi	r20, 0x0A	; 10
   19144:	50 e0       	ldi	r21, 0x00	; 0
   19146:	c7 01       	movw	r24, r14
   19148:	77 de       	rcall	.-786    	; 0x18e38 <lif_S2B>
   1914a:	fe 01       	movw	r30, r28
   1914c:	e6 5a       	subi	r30, 0xA6	; 166
   1914e:	ff 4f       	sbci	r31, 0xFF	; 255
   19150:	00 81       	ld	r16, Z
   19152:	11 81       	ldd	r17, Z+1	; 0x01
   19154:	20 e0       	ldi	r18, 0x00	; 0
   19156:	30 e0       	ldi	r19, 0x00	; 0
   19158:	42 e0       	ldi	r20, 0x02	; 2
   1915a:	50 e0       	ldi	r21, 0x00	; 0
   1915c:	6a e0       	ldi	r22, 0x0A	; 10
   1915e:	70 e0       	ldi	r23, 0x00	; 0
   19160:	c7 01       	movw	r24, r14
   19162:	0e 94 30 93 	call	0x12660	; 0x12660 <V2B_MSB>
   19166:	fe 01       	movw	r30, r28
   19168:	e4 5a       	subi	r30, 0xA4	; 164
   1916a:	ff 4f       	sbci	r31, 0xFF	; 255
   1916c:	00 81       	ld	r16, Z
   1916e:	11 81       	ldd	r17, Z+1	; 0x01
   19170:	22 81       	ldd	r18, Z+2	; 0x02
   19172:	33 81       	ldd	r19, Z+3	; 0x03
   19174:	44 e0       	ldi	r20, 0x04	; 4
   19176:	50 e0       	ldi	r21, 0x00	; 0
   19178:	6c e0       	ldi	r22, 0x0C	; 12
   1917a:	70 e0       	ldi	r23, 0x00	; 0
   1917c:	c7 01       	movw	r24, r14
   1917e:	0e 94 30 93 	call	0x12660	; 0x12660 <V2B_MSB>
   19182:	fe 01       	movw	r30, r28
   19184:	e0 5a       	subi	r30, 0xA0	; 160
   19186:	ff 4f       	sbci	r31, 0xFF	; 255
   19188:	00 81       	ld	r16, Z
   1918a:	11 81       	ldd	r17, Z+1	; 0x01
   1918c:	22 81       	ldd	r18, Z+2	; 0x02
   1918e:	33 81       	ldd	r19, Z+3	; 0x03
   19190:	44 e0       	ldi	r20, 0x04	; 4
   19192:	50 e0       	ldi	r21, 0x00	; 0
   19194:	60 e1       	ldi	r22, 0x10	; 16
   19196:	70 e0       	ldi	r23, 0x00	; 0
   19198:	c7 01       	movw	r24, r14
   1919a:	0e 94 30 93 	call	0x12660	; 0x12660 <V2B_MSB>
   1919e:	d7 01       	movw	r26, r14
   191a0:	54 96       	adiw	r26, 0x14	; 20
   191a2:	fe 01       	movw	r30, r28
   191a4:	ec 59       	subi	r30, 0x9C	; 156
   191a6:	ff 4f       	sbci	r31, 0xFF	; 255
   191a8:	86 e0       	ldi	r24, 0x06	; 6
   191aa:	01 90       	ld	r0, Z+
   191ac:	0d 92       	st	X+, r0
   191ae:	8a 95       	dec	r24
   191b0:	e1 f7       	brne	.-8      	; 0x191aa <lif_dir2str+0x7e>
   191b2:	fe 01       	movw	r30, r28
   191b4:	e6 59       	subi	r30, 0x96	; 150
   191b6:	ff 4f       	sbci	r31, 0xFF	; 255
   191b8:	00 81       	ld	r16, Z
   191ba:	11 81       	ldd	r17, Z+1	; 0x01
   191bc:	20 e0       	ldi	r18, 0x00	; 0
   191be:	30 e0       	ldi	r19, 0x00	; 0
   191c0:	42 e0       	ldi	r20, 0x02	; 2
   191c2:	50 e0       	ldi	r21, 0x00	; 0
   191c4:	6a e1       	ldi	r22, 0x1A	; 26
   191c6:	70 e0       	ldi	r23, 0x00	; 0
   191c8:	c7 01       	movw	r24, r14
   191ca:	0e 94 30 93 	call	0x12660	; 0x12660 <V2B_MSB>
   191ce:	fe 01       	movw	r30, r28
   191d0:	e4 59       	subi	r30, 0x94	; 148
   191d2:	ff 4f       	sbci	r31, 0xFF	; 255
   191d4:	00 81       	ld	r16, Z
   191d6:	11 81       	ldd	r17, Z+1	; 0x01
   191d8:	20 e0       	ldi	r18, 0x00	; 0
   191da:	30 e0       	ldi	r19, 0x00	; 0
   191dc:	42 e0       	ldi	r20, 0x02	; 2
   191de:	50 e0       	ldi	r21, 0x00	; 0
   191e0:	6c e1       	ldi	r22, 0x1C	; 28
   191e2:	70 e0       	ldi	r23, 0x00	; 0
   191e4:	c7 01       	movw	r24, r14
   191e6:	0e 94 44 93 	call	0x12688	; 0x12688 <V2B_LSB>
   191ea:	c2 59       	subi	r28, 0x92	; 146
   191ec:	df 4f       	sbci	r29, 0xFF	; 255
   191ee:	08 81       	ld	r16, Y
   191f0:	19 81       	ldd	r17, Y+1	; 0x01
   191f2:	20 e0       	ldi	r18, 0x00	; 0
   191f4:	30 e0       	ldi	r19, 0x00	; 0
   191f6:	42 e0       	ldi	r20, 0x02	; 2
   191f8:	50 e0       	ldi	r21, 0x00	; 0
   191fa:	6e e1       	ldi	r22, 0x1E	; 30
   191fc:	70 e0       	ldi	r23, 0x00	; 0
   191fe:	c7 01       	movw	r24, r14
   19200:	0e 94 44 93 	call	0x12688	; 0x12688 <V2B_LSB>
   19204:	cd b7       	in	r28, 0x3d	; 61
   19206:	de b7       	in	r29, 0x3e	; 62
   19208:	e6 e0       	ldi	r30, 0x06	; 6
   1920a:	0c 94 3b e8 	jmp	0x1d076	; 0x1d076 <__epilogue_restores__+0x18>

0001920e <lif_str2dir>:
   1920e:	0f 93       	push	r16
   19210:	1f 93       	push	r17
   19212:	cf 93       	push	r28
   19214:	df 93       	push	r29
   19216:	8c 01       	movw	r16, r24
   19218:	eb 01       	movw	r28, r22
   1921a:	61 5b       	subi	r22, 0xB1	; 177
   1921c:	7f 4f       	sbci	r23, 0xFF	; 255
   1921e:	4a e0       	ldi	r20, 0x0A	; 10
   19220:	50 e0       	ldi	r21, 0x00	; 0
   19222:	b3 dd       	rcall	.-1178   	; 0x18d8a <lif_B2S>
   19224:	42 e0       	ldi	r20, 0x02	; 2
   19226:	50 e0       	ldi	r21, 0x00	; 0
   19228:	6a e0       	ldi	r22, 0x0A	; 10
   1922a:	70 e0       	ldi	r23, 0x00	; 0
   1922c:	c8 01       	movw	r24, r16
   1922e:	0e 94 59 93 	call	0x126b2	; 0x126b2 <B2V_MSB>
   19232:	fe 01       	movw	r30, r28
   19234:	e6 5a       	subi	r30, 0xA6	; 166
   19236:	ff 4f       	sbci	r31, 0xFF	; 255
   19238:	71 83       	std	Z+1, r23	; 0x01
   1923a:	60 83       	st	Z, r22
   1923c:	44 e0       	ldi	r20, 0x04	; 4
   1923e:	50 e0       	ldi	r21, 0x00	; 0
   19240:	6c e0       	ldi	r22, 0x0C	; 12
   19242:	70 e0       	ldi	r23, 0x00	; 0
   19244:	c8 01       	movw	r24, r16
   19246:	0e 94 59 93 	call	0x126b2	; 0x126b2 <B2V_MSB>
   1924a:	fe 01       	movw	r30, r28
   1924c:	e4 5a       	subi	r30, 0xA4	; 164
   1924e:	ff 4f       	sbci	r31, 0xFF	; 255
   19250:	60 83       	st	Z, r22
   19252:	71 83       	std	Z+1, r23	; 0x01
   19254:	82 83       	std	Z+2, r24	; 0x02
   19256:	93 83       	std	Z+3, r25	; 0x03
   19258:	44 e0       	ldi	r20, 0x04	; 4
   1925a:	50 e0       	ldi	r21, 0x00	; 0
   1925c:	60 e1       	ldi	r22, 0x10	; 16
   1925e:	70 e0       	ldi	r23, 0x00	; 0
   19260:	c8 01       	movw	r24, r16
   19262:	0e 94 59 93 	call	0x126b2	; 0x126b2 <B2V_MSB>
   19266:	fe 01       	movw	r30, r28
   19268:	e0 5a       	subi	r30, 0xA0	; 160
   1926a:	ff 4f       	sbci	r31, 0xFF	; 255
   1926c:	60 83       	st	Z, r22
   1926e:	71 83       	std	Z+1, r23	; 0x01
   19270:	82 83       	std	Z+2, r24	; 0x02
   19272:	93 83       	std	Z+3, r25	; 0x03
   19274:	de 01       	movw	r26, r28
   19276:	ac 59       	subi	r26, 0x9C	; 156
   19278:	bf 4f       	sbci	r27, 0xFF	; 255
   1927a:	f8 01       	movw	r30, r16
   1927c:	74 96       	adiw	r30, 0x14	; 20
   1927e:	86 e0       	ldi	r24, 0x06	; 6
   19280:	01 90       	ld	r0, Z+
   19282:	0d 92       	st	X+, r0
   19284:	8a 95       	dec	r24
   19286:	e1 f7       	brne	.-8      	; 0x19280 <lif_str2dir+0x72>
   19288:	42 e0       	ldi	r20, 0x02	; 2
   1928a:	50 e0       	ldi	r21, 0x00	; 0
   1928c:	6a e1       	ldi	r22, 0x1A	; 26
   1928e:	70 e0       	ldi	r23, 0x00	; 0
   19290:	c8 01       	movw	r24, r16
   19292:	0e 94 59 93 	call	0x126b2	; 0x126b2 <B2V_MSB>
   19296:	fe 01       	movw	r30, r28
   19298:	e6 59       	subi	r30, 0x96	; 150
   1929a:	ff 4f       	sbci	r31, 0xFF	; 255
   1929c:	71 83       	std	Z+1, r23	; 0x01
   1929e:	60 83       	st	Z, r22
   192a0:	42 e0       	ldi	r20, 0x02	; 2
   192a2:	50 e0       	ldi	r21, 0x00	; 0
   192a4:	6c e1       	ldi	r22, 0x1C	; 28
   192a6:	70 e0       	ldi	r23, 0x00	; 0
   192a8:	c8 01       	movw	r24, r16
   192aa:	0e 94 78 93 	call	0x126f0	; 0x126f0 <B2V_LSB>
   192ae:	fe 01       	movw	r30, r28
   192b0:	e4 59       	subi	r30, 0x94	; 148
   192b2:	ff 4f       	sbci	r31, 0xFF	; 255
   192b4:	71 83       	std	Z+1, r23	; 0x01
   192b6:	60 83       	st	Z, r22
   192b8:	42 e0       	ldi	r20, 0x02	; 2
   192ba:	50 e0       	ldi	r21, 0x00	; 0
   192bc:	6e e1       	ldi	r22, 0x1E	; 30
   192be:	70 e0       	ldi	r23, 0x00	; 0
   192c0:	c8 01       	movw	r24, r16
   192c2:	0e 94 78 93 	call	0x126f0	; 0x126f0 <B2V_LSB>
   192c6:	c2 59       	subi	r28, 0x92	; 146
   192c8:	df 4f       	sbci	r29, 0xFF	; 255
   192ca:	79 83       	std	Y+1, r23	; 0x01
   192cc:	68 83       	st	Y, r22
   192ce:	df 91       	pop	r29
   192d0:	cf 91       	pop	r28
   192d2:	1f 91       	pop	r17
   192d4:	0f 91       	pop	r16
   192d6:	08 95       	ret

000192d8 <lif_BIN2BCD>:
   192d8:	6a e0       	ldi	r22, 0x0A	; 10
   192da:	0e 94 5e e7 	call	0x1cebc	; 0x1cebc <__udivmodqi4>
   192de:	82 95       	swap	r24
   192e0:	80 7f       	andi	r24, 0xF0	; 240
   192e2:	89 2b       	or	r24, r25
   192e4:	08 95       	ret

000192e6 <lif_BCD2BIN>:
   192e6:	28 2f       	mov	r18, r24
   192e8:	22 95       	swap	r18
   192ea:	2f 70       	andi	r18, 0x0F	; 15
   192ec:	8f 70       	andi	r24, 0x0F	; 15
   192ee:	90 e0       	ldi	r25, 0x00	; 0
   192f0:	3a e0       	ldi	r19, 0x0A	; 10
   192f2:	23 9f       	mul	r18, r19
   192f4:	80 0d       	add	r24, r0
   192f6:	91 1d       	adc	r25, r1
   192f8:	11 24       	eor	r1, r1
   192fa:	08 95       	ret

000192fc <lif_time2lifbcd>:
   192fc:	aa e1       	ldi	r26, 0x1A	; 26
   192fe:	b0 e0       	ldi	r27, 0x00	; 0
   19300:	e4 e8       	ldi	r30, 0x84	; 132
   19302:	f9 ec       	ldi	r31, 0xC9	; 201
   19304:	0c 94 21 e8 	jmp	0x1d042	; 0x1d042 <__prologue_saves__+0x1c>
   19308:	8b 01       	movw	r16, r22
   1930a:	9c 01       	movw	r18, r24
   1930c:	6f 8b       	std	Y+23, r22	; 0x17
   1930e:	78 8f       	std	Y+24, r23	; 0x18
   19310:	89 8f       	std	Y+25, r24	; 0x19
   19312:	9a 8f       	std	Y+26, r25	; 0x1a
   19314:	67 2b       	or	r22, r23
   19316:	68 2b       	or	r22, r24
   19318:	69 2b       	or	r22, r25
   1931a:	41 f4       	brne	.+16     	; 0x1932c <lif_time2lifbcd+0x30>
   1931c:	fa 01       	movw	r30, r20
   1931e:	ca 01       	movw	r24, r20
   19320:	06 96       	adiw	r24, 0x06	; 6
   19322:	11 92       	st	Z+, r1
   19324:	e8 17       	cp	r30, r24
   19326:	f9 07       	cpc	r31, r25
   19328:	e1 f7       	brne	.-8      	; 0x19322 <lif_time2lifbcd+0x26>
   1932a:	26 c0       	rjmp	.+76     	; 0x19378 <lif_time2lifbcd+0x7c>
   1932c:	8a 01       	movw	r16, r20
   1932e:	be 01       	movw	r22, r28
   19330:	6f 5f       	subi	r22, 0xFF	; 255
   19332:	7f 4f       	sbci	r23, 0xFF	; 255
   19334:	ce 01       	movw	r24, r28
   19336:	47 96       	adiw	r24, 0x17	; 23
   19338:	0e 94 6b 38 	call	0x70d6	; 0x70d6 <gmtime_r>
   1933c:	8b 85       	ldd	r24, Y+11	; 0x0b
   1933e:	9c 85       	ldd	r25, Y+12	; 0x0c
   19340:	64 e6       	ldi	r22, 0x64	; 100
   19342:	70 e0       	ldi	r23, 0x00	; 0
   19344:	0e 94 7e e7 	call	0x1cefc	; 0x1cefc <__divmodhi4>
   19348:	c7 df       	rcall	.-114    	; 0x192d8 <lif_BIN2BCD>
   1934a:	f8 01       	movw	r30, r16
   1934c:	80 83       	st	Z, r24
   1934e:	89 85       	ldd	r24, Y+9	; 0x09
   19350:	8f 5f       	subi	r24, 0xFF	; 255
   19352:	c2 df       	rcall	.-124    	; 0x192d8 <lif_BIN2BCD>
   19354:	f8 01       	movw	r30, r16
   19356:	81 83       	std	Z+1, r24	; 0x01
   19358:	8f 81       	ldd	r24, Y+7	; 0x07
   1935a:	be df       	rcall	.-132    	; 0x192d8 <lif_BIN2BCD>
   1935c:	f8 01       	movw	r30, r16
   1935e:	82 83       	std	Z+2, r24	; 0x02
   19360:	8d 81       	ldd	r24, Y+5	; 0x05
   19362:	ba df       	rcall	.-140    	; 0x192d8 <lif_BIN2BCD>
   19364:	f8 01       	movw	r30, r16
   19366:	83 83       	std	Z+3, r24	; 0x03
   19368:	8b 81       	ldd	r24, Y+3	; 0x03
   1936a:	b6 df       	rcall	.-148    	; 0x192d8 <lif_BIN2BCD>
   1936c:	f8 01       	movw	r30, r16
   1936e:	84 83       	std	Z+4, r24	; 0x04
   19370:	89 81       	ldd	r24, Y+1	; 0x01
   19372:	b2 df       	rcall	.-156    	; 0x192d8 <lif_BIN2BCD>
   19374:	f8 01       	movw	r30, r16
   19376:	85 83       	std	Z+5, r24	; 0x05
   19378:	6a 96       	adiw	r28, 0x1a	; 26
   1937a:	e4 e0       	ldi	r30, 0x04	; 4
   1937c:	0c 94 3d e8 	jmp	0x1d07a	; 0x1d07a <__epilogue_restores__+0x1c>

00019380 <lif_lifbcd2time>:
   19380:	a6 e1       	ldi	r26, 0x16	; 22
   19382:	b0 e0       	ldi	r27, 0x00	; 0
   19384:	e6 ec       	ldi	r30, 0xC6	; 198
   19386:	f9 ec       	ldi	r31, 0xC9	; 201
   19388:	0c 94 1b e8 	jmp	0x1d036	; 0x1d036 <__prologue_saves__+0x10>
   1938c:	8c 01       	movw	r16, r24
   1938e:	7c 01       	movw	r14, r24
   19390:	5c 01       	movw	r10, r24
   19392:	26 e0       	ldi	r18, 0x06	; 6
   19394:	a2 0e       	add	r10, r18
   19396:	b1 1c       	adc	r11, r1
   19398:	cc 24       	eor	r12, r12
   1939a:	c3 94       	inc	r12
   1939c:	d1 2c       	mov	r13, r1
   1939e:	f7 01       	movw	r30, r14
   193a0:	81 91       	ld	r24, Z+
   193a2:	7f 01       	movw	r14, r30
   193a4:	a0 df       	rcall	.-192    	; 0x192e6 <lif_BCD2BIN>
   193a6:	89 2b       	or	r24, r25
   193a8:	11 f0       	breq	.+4      	; 0x193ae <lif_lifbcd2time+0x2e>
   193aa:	c1 2c       	mov	r12, r1
   193ac:	d1 2c       	mov	r13, r1
   193ae:	ea 14       	cp	r14, r10
   193b0:	fb 04       	cpc	r15, r11
   193b2:	a9 f7       	brne	.-22     	; 0x1939e <lif_lifbcd2time+0x1e>
   193b4:	c1 14       	cp	r12, r1
   193b6:	d1 04       	cpc	r13, r1
   193b8:	61 f5       	brne	.+88     	; 0x19412 <lif_lifbcd2time+0x92>
   193ba:	f8 01       	movw	r30, r16
   193bc:	80 81       	ld	r24, Z
   193be:	93 df       	rcall	.-218    	; 0x192e6 <lif_BCD2BIN>
   193c0:	7c 01       	movw	r14, r24
   193c2:	f8 01       	movw	r30, r16
   193c4:	81 81       	ldd	r24, Z+1	; 0x01
   193c6:	8f df       	rcall	.-226    	; 0x192e6 <lif_BCD2BIN>
   193c8:	01 97       	sbiw	r24, 0x01	; 1
   193ca:	f6 e4       	ldi	r31, 0x46	; 70
   193cc:	ef 16       	cp	r14, r31
   193ce:	f1 04       	cpc	r15, r1
   193d0:	1c f4       	brge	.+6      	; 0x193d8 <lif_lifbcd2time+0x58>
   193d2:	24 e6       	ldi	r18, 0x64	; 100
   193d4:	e2 0e       	add	r14, r18
   193d6:	f1 1c       	adc	r15, r1
   193d8:	fc 86       	std	Y+12, r15	; 0x0c
   193da:	eb 86       	std	Y+11, r14	; 0x0b
   193dc:	9a 87       	std	Y+10, r25	; 0x0a
   193de:	89 87       	std	Y+9, r24	; 0x09
   193e0:	f8 01       	movw	r30, r16
   193e2:	82 81       	ldd	r24, Z+2	; 0x02
   193e4:	80 df       	rcall	.-256    	; 0x192e6 <lif_BCD2BIN>
   193e6:	98 87       	std	Y+8, r25	; 0x08
   193e8:	8f 83       	std	Y+7, r24	; 0x07
   193ea:	f8 01       	movw	r30, r16
   193ec:	83 81       	ldd	r24, Z+3	; 0x03
   193ee:	7b df       	rcall	.-266    	; 0x192e6 <lif_BCD2BIN>
   193f0:	9e 83       	std	Y+6, r25	; 0x06
   193f2:	8d 83       	std	Y+5, r24	; 0x05
   193f4:	f8 01       	movw	r30, r16
   193f6:	84 81       	ldd	r24, Z+4	; 0x04
   193f8:	76 df       	rcall	.-276    	; 0x192e6 <lif_BCD2BIN>
   193fa:	9c 83       	std	Y+4, r25	; 0x04
   193fc:	8b 83       	std	Y+3, r24	; 0x03
   193fe:	f8 01       	movw	r30, r16
   19400:	85 81       	ldd	r24, Z+5	; 0x05
   19402:	71 df       	rcall	.-286    	; 0x192e6 <lif_BCD2BIN>
   19404:	9a 83       	std	Y+2, r25	; 0x02
   19406:	89 83       	std	Y+1, r24	; 0x01
   19408:	ce 01       	movw	r24, r28
   1940a:	01 96       	adiw	r24, 0x01	; 1
   1940c:	0e 94 40 3b 	call	0x7680	; 0x7680 <timegm>
   19410:	03 c0       	rjmp	.+6      	; 0x19418 <lif_lifbcd2time+0x98>
   19412:	60 e0       	ldi	r22, 0x00	; 0
   19414:	70 e0       	ldi	r23, 0x00	; 0
   19416:	cb 01       	movw	r24, r22
   19418:	66 96       	adiw	r28, 0x16	; 22
   1941a:	ea e0       	ldi	r30, 0x0A	; 10
   1941c:	0c 94 37 e8 	jmp	0x1d06e	; 0x1d06e <__epilogue_restores__+0x10>

00019420 <lif_ctime_gmt>:
   19420:	a6 e1       	ldi	r26, 0x16	; 22
   19422:	b0 e0       	ldi	r27, 0x00	; 0
   19424:	e6 e1       	ldi	r30, 0x16	; 22
   19426:	fa ec       	ldi	r31, 0xCA	; 202
   19428:	0c 94 21 e8 	jmp	0x1d042	; 0x1d042 <__prologue_saves__+0x1c>
   1942c:	20 e2       	ldi	r18, 0x20	; 32
   1942e:	e0 ee       	ldi	r30, 0xE0	; 224
   19430:	f9 e1       	ldi	r31, 0x19	; 25
   19432:	df 01       	movw	r26, r30
   19434:	1d 92       	st	X+, r1
   19436:	2a 95       	dec	r18
   19438:	e9 f7       	brne	.-6      	; 0x19434 <lif_ctime_gmt+0x14>
   1943a:	be 01       	movw	r22, r28
   1943c:	6f 5f       	subi	r22, 0xFF	; 255
   1943e:	7f 4f       	sbci	r23, 0xFF	; 255
   19440:	0e 94 6b 38 	call	0x70d6	; 0x70d6 <gmtime_r>
   19444:	60 ee       	ldi	r22, 0xE0	; 224
   19446:	79 e1       	ldi	r23, 0x19	; 25
   19448:	0e 94 96 3d 	call	0x7b2c	; 0x7b2c <asctime_r>
   1944c:	8c 01       	movw	r16, r24
   1944e:	0e 94 71 32 	call	0x64e2	; 0x64e2 <trim_tail>
   19452:	c8 01       	movw	r24, r16
   19454:	66 96       	adiw	r28, 0x16	; 22
   19456:	e4 e0       	ldi	r30, 0x04	; 4
   19458:	0c 94 3d e8 	jmp	0x1d07a	; 0x1d07a <__epilogue_restores__+0x1c>

0001945c <lif_lifbcd2timestr>:
   1945c:	a4 e0       	ldi	r26, 0x04	; 4
   1945e:	b0 e0       	ldi	r27, 0x00	; 0
   19460:	e4 e3       	ldi	r30, 0x34	; 52
   19462:	fa ec       	ldi	r31, 0xCA	; 202
   19464:	0c 94 23 e8 	jmp	0x1d046	; 0x1d046 <__prologue_saves__+0x20>
   19468:	20 e2       	ldi	r18, 0x20	; 32
   1946a:	e0 ec       	ldi	r30, 0xC0	; 192
   1946c:	f9 e1       	ldi	r31, 0x19	; 25
   1946e:	df 01       	movw	r26, r30
   19470:	1d 92       	st	X+, r1
   19472:	2a 95       	dec	r18
   19474:	e9 f7       	brne	.-6      	; 0x19470 <lif_lifbcd2timestr+0x14>
   19476:	84 df       	rcall	.-248    	; 0x19380 <lif_lifbcd2time>
   19478:	69 83       	std	Y+1, r22	; 0x01
   1947a:	7a 83       	std	Y+2, r23	; 0x02
   1947c:	8b 83       	std	Y+3, r24	; 0x03
   1947e:	9c 83       	std	Y+4, r25	; 0x04
   19480:	67 2b       	or	r22, r23
   19482:	68 2b       	or	r22, r24
   19484:	69 2b       	or	r22, r25
   19486:	29 f0       	breq	.+10     	; 0x19492 <lif_lifbcd2timestr+0x36>
   19488:	ce 01       	movw	r24, r28
   1948a:	01 96       	adiw	r24, 0x01	; 1
   1948c:	c9 df       	rcall	.-110    	; 0x19420 <lif_ctime_gmt>
   1948e:	bc 01       	movw	r22, r24
   19490:	02 c0       	rjmp	.+4      	; 0x19496 <lif_lifbcd2timestr+0x3a>
   19492:	65 ea       	ldi	r22, 0xA5	; 165
   19494:	75 e1       	ldi	r23, 0x15	; 21
   19496:	80 ec       	ldi	r24, 0xC0	; 192
   19498:	99 e1       	ldi	r25, 0x19	; 25
   1949a:	0e 94 17 32 	call	0x642e	; 0x642e <strcpy>
   1949e:	80 ec       	ldi	r24, 0xC0	; 192
   194a0:	99 e1       	ldi	r25, 0x19	; 25
   194a2:	24 96       	adiw	r28, 0x04	; 4
   194a4:	e2 e0       	ldi	r30, 0x02	; 2
   194a6:	0c 94 3f e8 	jmp	0x1d07e	; 0x1d07e <__epilogue_restores__+0x20>

000194aa <lif_image_clear>:
   194aa:	20 e7       	ldi	r18, 0x70	; 112
   194ac:	fc 01       	movw	r30, r24
   194ae:	11 92       	st	Z+, r1
   194b0:	2a 95       	dec	r18
   194b2:	e9 f7       	brne	.-6      	; 0x194ae <lif_image_clear+0x4>
   194b4:	08 95       	ret

000194b6 <lif_dir_clear>:
   194b6:	81 5b       	subi	r24, 0xB1	; 177
   194b8:	9f 4f       	sbci	r25, 0xFF	; 255
   194ba:	21 e2       	ldi	r18, 0x21	; 33
   194bc:	fc 01       	movw	r30, r24
   194be:	11 92       	st	Z+, r1
   194c0:	2a 95       	dec	r18
   194c2:	e9 f7       	brne	.-6      	; 0x194be <lif_dir_clear+0x8>
   194c4:	08 95       	ret

000194c6 <lif_vol_clear>:
   194c6:	84 96       	adiw	r24, 0x24	; 36
   194c8:	2b e2       	ldi	r18, 0x2B	; 43
   194ca:	fc 01       	movw	r30, r24
   194cc:	11 92       	st	Z+, r1
   194ce:	2a 95       	dec	r18
   194d0:	e9 f7       	brne	.-6      	; 0x194cc <lif_vol_clear+0x6>
   194d2:	08 95       	ret

000194d4 <lif_dump_vol>:
   194d4:	cf 93       	push	r28
   194d6:	df 93       	push	r29
   194d8:	ec 01       	movw	r28, r24
   194da:	7f 93       	push	r23
   194dc:	6f 93       	push	r22
   194de:	8a e3       	ldi	r24, 0x3A	; 58
   194e0:	93 e4       	ldi	r25, 0x43	; 67
   194e2:	1f 92       	push	r1
   194e4:	9f 93       	push	r25
   194e6:	8f 93       	push	r24
   194e8:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   194ec:	89 81       	ldd	r24, Y+1	; 0x01
   194ee:	8f 93       	push	r24
   194f0:	88 81       	ld	r24, Y
   194f2:	8f 93       	push	r24
   194f4:	80 e2       	ldi	r24, 0x20	; 32
   194f6:	93 e4       	ldi	r25, 0x43	; 67
   194f8:	1f 92       	push	r1
   194fa:	9f 93       	push	r25
   194fc:	8f 93       	push	r24
   194fe:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   19502:	8f 81       	ldd	r24, Y+7	; 0x07
   19504:	8f 93       	push	r24
   19506:	8e 81       	ldd	r24, Y+6	; 0x06
   19508:	8f 93       	push	r24
   1950a:	8d 81       	ldd	r24, Y+5	; 0x05
   1950c:	8f 93       	push	r24
   1950e:	8c 81       	ldd	r24, Y+4	; 0x04
   19510:	8f 93       	push	r24
   19512:	83 e0       	ldi	r24, 0x03	; 3
   19514:	93 e4       	ldi	r25, 0x43	; 67
   19516:	1f 92       	push	r1
   19518:	9f 93       	push	r25
   1951a:	8f 93       	push	r24
   1951c:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   19520:	8b 85       	ldd	r24, Y+11	; 0x0b
   19522:	8f 93       	push	r24
   19524:	8a 85       	ldd	r24, Y+10	; 0x0a
   19526:	8f 93       	push	r24
   19528:	89 85       	ldd	r24, Y+9	; 0x09
   1952a:	8f 93       	push	r24
   1952c:	88 85       	ldd	r24, Y+8	; 0x08
   1952e:	8f 93       	push	r24
   19530:	86 ee       	ldi	r24, 0xE6	; 230
   19532:	92 e4       	ldi	r25, 0x42	; 66
   19534:	1f 92       	push	r1
   19536:	9f 93       	push	r25
   19538:	8f 93       	push	r24
   1953a:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1953e:	8f 85       	ldd	r24, Y+15	; 0x0f
   19540:	8f 93       	push	r24
   19542:	8e 85       	ldd	r24, Y+14	; 0x0e
   19544:	8f 93       	push	r24
   19546:	8d 85       	ldd	r24, Y+13	; 0x0d
   19548:	8f 93       	push	r24
   1954a:	8c 85       	ldd	r24, Y+12	; 0x0c
   1954c:	8f 93       	push	r24
   1954e:	89 ec       	ldi	r24, 0xC9	; 201
   19550:	92 e4       	ldi	r25, 0x42	; 66
   19552:	1f 92       	push	r1
   19554:	9f 93       	push	r25
   19556:	8f 93       	push	r24
   19558:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1955c:	8b 89       	ldd	r24, Y+19	; 0x13
   1955e:	8f 93       	push	r24
   19560:	8a 89       	ldd	r24, Y+18	; 0x12
   19562:	8f 93       	push	r24
   19564:	89 89       	ldd	r24, Y+17	; 0x11
   19566:	8f 93       	push	r24
   19568:	88 89       	ldd	r24, Y+16	; 0x10
   1956a:	8f 93       	push	r24
   1956c:	8c ea       	ldi	r24, 0xAC	; 172
   1956e:	92 e4       	ldi	r25, 0x42	; 66
   19570:	1f 92       	push	r1
   19572:	9f 93       	push	r25
   19574:	8f 93       	push	r24
   19576:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1957a:	8d b7       	in	r24, 0x3d	; 61
   1957c:	9e b7       	in	r25, 0x3e	; 62
   1957e:	86 96       	adiw	r24, 0x26	; 38
   19580:	0f b6       	in	r0, 0x3f	; 63
   19582:	f8 94       	cli
   19584:	9e bf       	out	0x3e, r25	; 62
   19586:	0f be       	out	0x3f, r0	; 63
   19588:	8d bf       	out	0x3d, r24	; 61
   1958a:	8f 89       	ldd	r24, Y+23	; 0x17
   1958c:	8f 93       	push	r24
   1958e:	8e 89       	ldd	r24, Y+22	; 0x16
   19590:	8f 93       	push	r24
   19592:	8d 89       	ldd	r24, Y+21	; 0x15
   19594:	8f 93       	push	r24
   19596:	8c 89       	ldd	r24, Y+20	; 0x14
   19598:	8f 93       	push	r24
   1959a:	8f e8       	ldi	r24, 0x8F	; 143
   1959c:	92 e4       	ldi	r25, 0x42	; 66
   1959e:	1f 92       	push	r1
   195a0:	9f 93       	push	r25
   195a2:	8f 93       	push	r24
   195a4:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   195a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
   195aa:	8f 93       	push	r24
   195ac:	8a 8d       	ldd	r24, Y+26	; 0x1a
   195ae:	8f 93       	push	r24
   195b0:	89 8d       	ldd	r24, Y+25	; 0x19
   195b2:	8f 93       	push	r24
   195b4:	88 8d       	ldd	r24, Y+24	; 0x18
   195b6:	8f 93       	push	r24
   195b8:	82 e7       	ldi	r24, 0x72	; 114
   195ba:	92 e4       	ldi	r25, 0x42	; 66
   195bc:	1f 92       	push	r1
   195be:	9f 93       	push	r25
   195c0:	8f 93       	push	r24
   195c2:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   195c6:	8c 8d       	ldd	r24, Y+28	; 0x1c
   195c8:	9d 8d       	ldd	r25, Y+29	; 0x1d
   195ca:	09 2e       	mov	r0, r25
   195cc:	00 0c       	add	r0, r0
   195ce:	aa 0b       	sbc	r26, r26
   195d0:	bb 0b       	sbc	r27, r27
   195d2:	bf 93       	push	r27
   195d4:	af 93       	push	r26
   195d6:	9f 93       	push	r25
   195d8:	8f 93       	push	r24
   195da:	85 e5       	ldi	r24, 0x55	; 85
   195dc:	92 e4       	ldi	r25, 0x42	; 66
   195de:	1f 92       	push	r1
   195e0:	9f 93       	push	r25
   195e2:	8f 93       	push	r24
   195e4:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   195e8:	8e 8d       	ldd	r24, Y+30	; 0x1e
   195ea:	9f 8d       	ldd	r25, Y+31	; 0x1f
   195ec:	09 2e       	mov	r0, r25
   195ee:	00 0c       	add	r0, r0
   195f0:	aa 0b       	sbc	r26, r26
   195f2:	bb 0b       	sbc	r27, r27
   195f4:	bf 93       	push	r27
   195f6:	af 93       	push	r26
   195f8:	9f 93       	push	r25
   195fa:	8f 93       	push	r24
   195fc:	88 e3       	ldi	r24, 0x38	; 56
   195fe:	92 e4       	ldi	r25, 0x42	; 66
   19600:	1f 92       	push	r1
   19602:	9f 93       	push	r25
   19604:	8f 93       	push	r24
   19606:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1960a:	ce 01       	movw	r24, r28
   1960c:	86 96       	adiw	r24, 0x26	; 38
   1960e:	9f 93       	push	r25
   19610:	8f 93       	push	r24
   19612:	8e e1       	ldi	r24, 0x1E	; 30
   19614:	92 e4       	ldi	r25, 0x42	; 66
   19616:	1f 92       	push	r1
   19618:	9f 93       	push	r25
   1961a:	8f 93       	push	r24
   1961c:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   19620:	8d b7       	in	r24, 0x3d	; 61
   19622:	9e b7       	in	r25, 0x3e	; 62
   19624:	81 96       	adiw	r24, 0x21	; 33
   19626:	0f b6       	in	r0, 0x3f	; 63
   19628:	f8 94       	cli
   1962a:	9e bf       	out	0x3e, r25	; 62
   1962c:	0f be       	out	0x3f, r0	; 63
   1962e:	8d bf       	out	0x3d, r24	; 61
   19630:	8d a1       	ldd	r24, Y+37	; 0x25
   19632:	8f 93       	push	r24
   19634:	8c a1       	ldd	r24, Y+36	; 0x24
   19636:	8f 93       	push	r24
   19638:	82 e0       	ldi	r24, 0x02	; 2
   1963a:	92 e4       	ldi	r25, 0x42	; 66
   1963c:	1f 92       	push	r1
   1963e:	9f 93       	push	r25
   19640:	8f 93       	push	r24
   19642:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   19646:	88 a9       	ldd	r24, Y+48	; 0x30
   19648:	8f 93       	push	r24
   1964a:	8f a5       	ldd	r24, Y+47	; 0x2f
   1964c:	8f 93       	push	r24
   1964e:	8e a5       	ldd	r24, Y+46	; 0x2e
   19650:	8f 93       	push	r24
   19652:	8d a5       	ldd	r24, Y+45	; 0x2d
   19654:	8f 93       	push	r24
   19656:	85 ee       	ldi	r24, 0xE5	; 229
   19658:	91 e4       	ldi	r25, 0x41	; 65
   1965a:	1f 92       	push	r1
   1965c:	9f 93       	push	r25
   1965e:	8f 93       	push	r24
   19660:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   19664:	88 ad       	ldd	r24, Y+56	; 0x38
   19666:	8f 93       	push	r24
   19668:	8f a9       	ldd	r24, Y+55	; 0x37
   1966a:	8f 93       	push	r24
   1966c:	8e a9       	ldd	r24, Y+54	; 0x36
   1966e:	8f 93       	push	r24
   19670:	8d a9       	ldd	r24, Y+53	; 0x35
   19672:	8f 93       	push	r24
   19674:	88 ec       	ldi	r24, 0xC8	; 200
   19676:	91 e4       	ldi	r25, 0x41	; 65
   19678:	1f 92       	push	r1
   1967a:	9f 93       	push	r25
   1967c:	8f 93       	push	r24
   1967e:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   19682:	8a a9       	ldd	r24, Y+50	; 0x32
   19684:	8f 93       	push	r24
   19686:	89 a9       	ldd	r24, Y+49	; 0x31
   19688:	8f 93       	push	r24
   1968a:	8c ea       	ldi	r24, 0xAC	; 172
   1968c:	91 e4       	ldi	r25, 0x41	; 65
   1968e:	1f 92       	push	r1
   19690:	9f 93       	push	r25
   19692:	8f 93       	push	r24
   19694:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   19698:	8a ad       	ldd	r24, Y+58	; 0x3a
   1969a:	8f 93       	push	r24
   1969c:	89 ad       	ldd	r24, Y+57	; 0x39
   1969e:	8f 93       	push	r24
   196a0:	80 e9       	ldi	r24, 0x90	; 144
   196a2:	91 e4       	ldi	r25, 0x41	; 65
   196a4:	1f 92       	push	r1
   196a6:	9f 93       	push	r25
   196a8:	8f 93       	push	r24
   196aa:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   196ae:	ce 01       	movw	r24, r28
   196b0:	87 5b       	subi	r24, 0xB7	; 183
   196b2:	9f 4f       	sbci	r25, 0xFF	; 255
   196b4:	d3 de       	rcall	.-602    	; 0x1945c <lif_lifbcd2timestr>
   196b6:	9f 93       	push	r25
   196b8:	8f 93       	push	r24
   196ba:	86 e7       	ldi	r24, 0x76	; 118
   196bc:	91 e4       	ldi	r25, 0x41	; 65
   196be:	1f 92       	push	r1
   196c0:	9f 93       	push	r25
   196c2:	8f 93       	push	r24
   196c4:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   196c8:	8d b7       	in	r24, 0x3d	; 61
   196ca:	9e b7       	in	r25, 0x3e	; 62
   196cc:	82 96       	adiw	r24, 0x22	; 34
   196ce:	0f b6       	in	r0, 0x3f	; 63
   196d0:	f8 94       	cli
   196d2:	9e bf       	out	0x3e, r25	; 62
   196d4:	0f be       	out	0x3f, r0	; 63
   196d6:	8d bf       	out	0x3d, r24	; 61
   196d8:	ce 01       	movw	r24, r28
   196da:	81 5b       	subi	r24, 0xB1	; 177
   196dc:	9f 4f       	sbci	r25, 0xFF	; 255
   196de:	9f 93       	push	r25
   196e0:	8f 93       	push	r24
   196e2:	8c e5       	ldi	r24, 0x5C	; 92
   196e4:	91 e4       	ldi	r25, 0x41	; 65
   196e6:	1f 92       	push	r1
   196e8:	9f 93       	push	r25
   196ea:	8f 93       	push	r24
   196ec:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   196f0:	fe 01       	movw	r30, r28
   196f2:	e6 5a       	subi	r30, 0xA6	; 166
   196f4:	ff 4f       	sbci	r31, 0xFF	; 255
   196f6:	81 81       	ldd	r24, Z+1	; 0x01
   196f8:	8f 93       	push	r24
   196fa:	80 81       	ld	r24, Z
   196fc:	8f 93       	push	r24
   196fe:	80 e4       	ldi	r24, 0x40	; 64
   19700:	91 e4       	ldi	r25, 0x41	; 65
   19702:	1f 92       	push	r1
   19704:	9f 93       	push	r25
   19706:	8f 93       	push	r24
   19708:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1970c:	fe 01       	movw	r30, r28
   1970e:	e6 59       	subi	r30, 0x96	; 150
   19710:	ff 4f       	sbci	r31, 0xFF	; 255
   19712:	81 81       	ldd	r24, Z+1	; 0x01
   19714:	8f 93       	push	r24
   19716:	80 81       	ld	r24, Z
   19718:	8f 93       	push	r24
   1971a:	84 e2       	ldi	r24, 0x24	; 36
   1971c:	91 e4       	ldi	r25, 0x41	; 65
   1971e:	1f 92       	push	r1
   19720:	9f 93       	push	r25
   19722:	8f 93       	push	r24
   19724:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   19728:	fe 01       	movw	r30, r28
   1972a:	e4 5a       	subi	r30, 0xA4	; 164
   1972c:	ff 4f       	sbci	r31, 0xFF	; 255
   1972e:	83 81       	ldd	r24, Z+3	; 0x03
   19730:	8f 93       	push	r24
   19732:	82 81       	ldd	r24, Z+2	; 0x02
   19734:	8f 93       	push	r24
   19736:	81 81       	ldd	r24, Z+1	; 0x01
   19738:	8f 93       	push	r24
   1973a:	80 81       	ld	r24, Z
   1973c:	8f 93       	push	r24
   1973e:	87 e0       	ldi	r24, 0x07	; 7
   19740:	91 e4       	ldi	r25, 0x41	; 65
   19742:	1f 92       	push	r1
   19744:	9f 93       	push	r25
   19746:	8f 93       	push	r24
   19748:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1974c:	fe 01       	movw	r30, r28
   1974e:	e0 5a       	subi	r30, 0xA0	; 160
   19750:	ff 4f       	sbci	r31, 0xFF	; 255
   19752:	83 81       	ldd	r24, Z+3	; 0x03
   19754:	8f 93       	push	r24
   19756:	82 81       	ldd	r24, Z+2	; 0x02
   19758:	8f 93       	push	r24
   1975a:	81 81       	ldd	r24, Z+1	; 0x01
   1975c:	8f 93       	push	r24
   1975e:	80 81       	ld	r24, Z
   19760:	8f 93       	push	r24
   19762:	8a ee       	ldi	r24, 0xEA	; 234
   19764:	90 e4       	ldi	r25, 0x40	; 64
   19766:	1f 92       	push	r1
   19768:	9f 93       	push	r25
   1976a:	8f 93       	push	r24
   1976c:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   19770:	fe 01       	movw	r30, r28
   19772:	e4 59       	subi	r30, 0x94	; 148
   19774:	ff 4f       	sbci	r31, 0xFF	; 255
   19776:	80 81       	ld	r24, Z
   19778:	91 81       	ldd	r25, Z+1	; 0x01
   1977a:	1f 92       	push	r1
   1977c:	1f 92       	push	r1
   1977e:	9f 93       	push	r25
   19780:	8f 93       	push	r24
   19782:	8d ec       	ldi	r24, 0xCD	; 205
   19784:	90 e4       	ldi	r25, 0x40	; 64
   19786:	1f 92       	push	r1
   19788:	9f 93       	push	r25
   1978a:	8f 93       	push	r24
   1978c:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   19790:	8d b7       	in	r24, 0x3d	; 61
   19792:	9e b7       	in	r25, 0x3e	; 62
   19794:	84 96       	adiw	r24, 0x24	; 36
   19796:	0f b6       	in	r0, 0x3f	; 63
   19798:	f8 94       	cli
   1979a:	9e bf       	out	0x3e, r25	; 62
   1979c:	0f be       	out	0x3f, r0	; 63
   1979e:	8d bf       	out	0x3d, r24	; 61
   197a0:	fe 01       	movw	r30, r28
   197a2:	e2 59       	subi	r30, 0x92	; 146
   197a4:	ff 4f       	sbci	r31, 0xFF	; 255
   197a6:	81 81       	ldd	r24, Z+1	; 0x01
   197a8:	8f 93       	push	r24
   197aa:	80 81       	ld	r24, Z
   197ac:	8f 93       	push	r24
   197ae:	81 eb       	ldi	r24, 0xB1	; 177
   197b0:	90 e4       	ldi	r25, 0x40	; 64
   197b2:	1f 92       	push	r1
   197b4:	9f 93       	push	r25
   197b6:	8f 93       	push	r24
   197b8:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   197bc:	ce 01       	movw	r24, r28
   197be:	8c 59       	subi	r24, 0x9C	; 156
   197c0:	9f 4f       	sbci	r25, 0xFF	; 255
   197c2:	4c de       	rcall	.-872    	; 0x1945c <lif_lifbcd2timestr>
   197c4:	9f 93       	push	r25
   197c6:	8f 93       	push	r24
   197c8:	87 e9       	ldi	r24, 0x97	; 151
   197ca:	90 e4       	ldi	r25, 0x40	; 64
   197cc:	1f 92       	push	r1
   197ce:	9f 93       	push	r25
   197d0:	8f 93       	push	r24
   197d2:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   197d6:	85 e9       	ldi	r24, 0x95	; 149
   197d8:	90 e4       	ldi	r25, 0x40	; 64
   197da:	1f 92       	push	r1
   197dc:	9f 93       	push	r25
   197de:	8f 93       	push	r24
   197e0:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   197e4:	8d b7       	in	r24, 0x3d	; 61
   197e6:	9e b7       	in	r25, 0x3e	; 62
   197e8:	0d 96       	adiw	r24, 0x0d	; 13
   197ea:	0f b6       	in	r0, 0x3f	; 63
   197ec:	f8 94       	cli
   197ee:	9e bf       	out	0x3e, r25	; 62
   197f0:	0f be       	out	0x3f, r0	; 63
   197f2:	8d bf       	out	0x3d, r24	; 61
   197f4:	df 91       	pop	r29
   197f6:	cf 91       	pop	r28
   197f8:	08 95       	ret

000197fa <lif_check_volume>:
   197fa:	0f 93       	push	r16
   197fc:	1f 93       	push	r17
   197fe:	cf 93       	push	r28
   19800:	df 93       	push	r29
   19802:	ec 01       	movw	r28, r24
   19804:	86 96       	adiw	r24, 0x26	; 38
   19806:	fb da       	rcall	.-2570   	; 0x18dfe <lif_checkname>
   19808:	89 2b       	or	r24, r25
   1980a:	79 f4       	brne	.+30     	; 0x1982a <lif_check_volume+0x30>
   1980c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   19810:	80 ff       	sbrs	r24, 0
   19812:	0e c0       	rjmp	.+28     	; 0x19830 <lif_check_volume+0x36>
   19814:	86 e7       	ldi	r24, 0x76	; 118
   19816:	90 e4       	ldi	r25, 0x40	; 64
   19818:	1f 92       	push	r1
   1981a:	9f 93       	push	r25
   1981c:	8f 93       	push	r24
   1981e:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   19822:	0f 90       	pop	r0
   19824:	0f 90       	pop	r0
   19826:	0f 90       	pop	r0
   19828:	03 c0       	rjmp	.+6      	; 0x19830 <lif_check_volume+0x36>
   1982a:	81 e0       	ldi	r24, 0x01	; 1
   1982c:	90 e0       	ldi	r25, 0x00	; 0
   1982e:	02 c0       	rjmp	.+4      	; 0x19834 <lif_check_volume+0x3a>
   19830:	80 e0       	ldi	r24, 0x00	; 0
   19832:	90 e0       	ldi	r25, 0x00	; 0
   19834:	29 a9       	ldd	r18, Y+49	; 0x31
   19836:	3a a9       	ldd	r19, Y+50	; 0x32
   19838:	21 15       	cp	r18, r1
   1983a:	40 e1       	ldi	r20, 0x10	; 16
   1983c:	34 07       	cpc	r19, r20
   1983e:	a1 f0       	breq	.+40     	; 0x19868 <lif_check_volume+0x6e>
   19840:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   19844:	80 ff       	sbrs	r24, 0
   19846:	0e c0       	rjmp	.+28     	; 0x19864 <lif_check_volume+0x6a>
   19848:	3f 93       	push	r19
   1984a:	2f 93       	push	r18
   1984c:	8d e3       	ldi	r24, 0x3D	; 61
   1984e:	90 e4       	ldi	r25, 0x40	; 64
   19850:	1f 92       	push	r1
   19852:	9f 93       	push	r25
   19854:	8f 93       	push	r24
   19856:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1985a:	0f 90       	pop	r0
   1985c:	0f 90       	pop	r0
   1985e:	0f 90       	pop	r0
   19860:	0f 90       	pop	r0
   19862:	0f 90       	pop	r0
   19864:	80 e0       	ldi	r24, 0x00	; 0
   19866:	90 e0       	ldi	r25, 0x00	; 0
   19868:	29 ad       	ldd	r18, Y+57	; 0x39
   1986a:	3a ad       	ldd	r19, Y+58	; 0x3a
   1986c:	22 30       	cpi	r18, 0x02	; 2
   1986e:	31 05       	cpc	r19, r1
   19870:	a0 f0       	brcs	.+40     	; 0x1989a <lif_check_volume+0xa0>
   19872:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   19876:	80 ff       	sbrs	r24, 0
   19878:	0e c0       	rjmp	.+28     	; 0x19896 <lif_check_volume+0x9c>
   1987a:	3f 93       	push	r19
   1987c:	2f 93       	push	r18
   1987e:	85 e2       	ldi	r24, 0x25	; 37
   19880:	90 e4       	ldi	r25, 0x40	; 64
   19882:	1f 92       	push	r1
   19884:	9f 93       	push	r25
   19886:	8f 93       	push	r24
   19888:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1988c:	0f 90       	pop	r0
   1988e:	0f 90       	pop	r0
   19890:	0f 90       	pop	r0
   19892:	0f 90       	pop	r0
   19894:	0f 90       	pop	r0
   19896:	80 e0       	ldi	r24, 0x00	; 0
   19898:	90 e0       	ldi	r25, 0x00	; 0
   1989a:	2b a9       	ldd	r18, Y+51	; 0x33
   1989c:	3c a9       	ldd	r19, Y+52	; 0x34
   1989e:	23 2b       	or	r18, r19
   198a0:	81 f0       	breq	.+32     	; 0x198c2 <lif_check_volume+0xc8>
   198a2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   198a6:	80 ff       	sbrs	r24, 0
   198a8:	0a c0       	rjmp	.+20     	; 0x198be <lif_check_volume+0xc4>
   198aa:	8c ee       	ldi	r24, 0xEC	; 236
   198ac:	9f e3       	ldi	r25, 0x3F	; 63
   198ae:	1f 92       	push	r1
   198b0:	9f 93       	push	r25
   198b2:	8f 93       	push	r24
   198b4:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   198b8:	0f 90       	pop	r0
   198ba:	0f 90       	pop	r0
   198bc:	0f 90       	pop	r0
   198be:	80 e0       	ldi	r24, 0x00	; 0
   198c0:	90 e0       	ldi	r25, 0x00	; 0
   198c2:	2b ad       	ldd	r18, Y+59	; 0x3b
   198c4:	3c ad       	ldd	r19, Y+60	; 0x3c
   198c6:	23 2b       	or	r18, r19
   198c8:	81 f0       	breq	.+32     	; 0x198ea <lif_check_volume+0xf0>
   198ca:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   198ce:	80 ff       	sbrs	r24, 0
   198d0:	0a c0       	rjmp	.+20     	; 0x198e6 <lif_check_volume+0xec>
   198d2:	83 eb       	ldi	r24, 0xB3	; 179
   198d4:	9f e3       	ldi	r25, 0x3F	; 63
   198d6:	1f 92       	push	r1
   198d8:	9f 93       	push	r25
   198da:	8f 93       	push	r24
   198dc:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   198e0:	0f 90       	pop	r0
   198e2:	0f 90       	pop	r0
   198e4:	0f 90       	pop	r0
   198e6:	80 e0       	ldi	r24, 0x00	; 0
   198e8:	90 e0       	ldi	r25, 0x00	; 0
   198ea:	4d a5       	ldd	r20, Y+45	; 0x2d
   198ec:	5e a5       	ldd	r21, Y+46	; 0x2e
   198ee:	6f a5       	ldd	r22, Y+47	; 0x2f
   198f0:	78 a9       	ldd	r23, Y+48	; 0x30
   198f2:	45 2b       	or	r20, r21
   198f4:	46 2b       	or	r20, r22
   198f6:	47 2b       	or	r20, r23
   198f8:	c9 f4       	brne	.+50     	; 0x1992c <lif_check_volume+0x132>
   198fa:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   198fe:	80 ff       	sbrs	r24, 0
   19900:	13 c0       	rjmp	.+38     	; 0x19928 <lif_check_volume+0x12e>
   19902:	1f 92       	push	r1
   19904:	1f 92       	push	r1
   19906:	1f 92       	push	r1
   19908:	1f 92       	push	r1
   1990a:	8e e8       	ldi	r24, 0x8E	; 142
   1990c:	9f e3       	ldi	r25, 0x3F	; 63
   1990e:	1f 92       	push	r1
   19910:	9f 93       	push	r25
   19912:	8f 93       	push	r24
   19914:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   19918:	8d b7       	in	r24, 0x3d	; 61
   1991a:	9e b7       	in	r25, 0x3e	; 62
   1991c:	07 96       	adiw	r24, 0x07	; 7
   1991e:	0f b6       	in	r0, 0x3f	; 63
   19920:	f8 94       	cli
   19922:	9e bf       	out	0x3e, r25	; 62
   19924:	0f be       	out	0x3f, r0	; 63
   19926:	8d bf       	out	0x3d, r24	; 61
   19928:	80 e0       	ldi	r24, 0x00	; 0
   1992a:	90 e0       	ldi	r25, 0x00	; 0
   1992c:	4d a9       	ldd	r20, Y+53	; 0x35
   1992e:	5e a9       	ldd	r21, Y+54	; 0x36
   19930:	6f a9       	ldd	r22, Y+55	; 0x37
   19932:	78 ad       	ldd	r23, Y+56	; 0x38
   19934:	45 2b       	or	r20, r21
   19936:	46 2b       	or	r20, r22
   19938:	47 2b       	or	r20, r23
   1993a:	81 f4       	brne	.+32     	; 0x1995c <lif_check_volume+0x162>
   1993c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   19940:	80 ff       	sbrs	r24, 0
   19942:	0a c0       	rjmp	.+20     	; 0x19958 <lif_check_volume+0x15e>
   19944:	8f e5       	ldi	r24, 0x5F	; 95
   19946:	9f e3       	ldi	r25, 0x3F	; 63
   19948:	1f 92       	push	r1
   1994a:	9f 93       	push	r25
   1994c:	8f 93       	push	r24
   1994e:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   19952:	0f 90       	pop	r0
   19954:	0f 90       	pop	r0
   19956:	0f 90       	pop	r0
   19958:	80 e0       	ldi	r24, 0x00	; 0
   1995a:	90 e0       	ldi	r25, 0x00	; 0
   1995c:	0d a5       	ldd	r16, Y+45	; 0x2d
   1995e:	1e a5       	ldd	r17, Y+46	; 0x2e
   19960:	2f a5       	ldd	r18, Y+47	; 0x2f
   19962:	38 a9       	ldd	r19, Y+48	; 0x30
   19964:	4d a9       	ldd	r20, Y+53	; 0x35
   19966:	5e a9       	ldd	r21, Y+54	; 0x36
   19968:	6f a9       	ldd	r22, Y+55	; 0x37
   1996a:	78 ad       	ldd	r23, Y+56	; 0x38
   1996c:	40 0f       	add	r20, r16
   1996e:	51 1f       	adc	r21, r17
   19970:	62 1f       	adc	r22, r18
   19972:	73 1f       	adc	r23, r19
   19974:	0c 81       	ldd	r16, Y+4	; 0x04
   19976:	1d 81       	ldd	r17, Y+5	; 0x05
   19978:	2e 81       	ldd	r18, Y+6	; 0x06
   1997a:	3f 81       	ldd	r19, Y+7	; 0x07
   1997c:	04 17       	cp	r16, r20
   1997e:	15 07       	cpc	r17, r21
   19980:	26 07       	cpc	r18, r22
   19982:	37 07       	cpc	r19, r23
   19984:	80 f4       	brcc	.+32     	; 0x199a6 <lif_check_volume+0x1ac>
   19986:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1998a:	80 ff       	sbrs	r24, 0
   1998c:	0a c0       	rjmp	.+20     	; 0x199a2 <lif_check_volume+0x1a8>
   1998e:	83 e3       	ldi	r24, 0x33	; 51
   19990:	9f e3       	ldi	r25, 0x3F	; 63
   19992:	1f 92       	push	r1
   19994:	9f 93       	push	r25
   19996:	8f 93       	push	r24
   19998:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1999c:	0f 90       	pop	r0
   1999e:	0f 90       	pop	r0
   199a0:	0f 90       	pop	r0
   199a2:	80 e0       	ldi	r24, 0x00	; 0
   199a4:	90 e0       	ldi	r25, 0x00	; 0
   199a6:	df 91       	pop	r29
   199a8:	cf 91       	pop	r28
   199aa:	1f 91       	pop	r17
   199ac:	0f 91       	pop	r16
   199ae:	08 95       	ret

000199b0 <lif_check_dir>:
   199b0:	a4 e0       	ldi	r26, 0x04	; 4
   199b2:	b0 e0       	ldi	r27, 0x00	; 0
   199b4:	ee ed       	ldi	r30, 0xDE	; 222
   199b6:	fc ec       	ldi	r31, 0xCC	; 204
   199b8:	0c 94 13 e8 	jmp	0x1d026	; 0x1d026 <__prologue_saves__>
   199bc:	6c 01       	movw	r12, r24
   199be:	2a e5       	ldi	r18, 0x5A	; 90
   199c0:	c2 0e       	add	r12, r18
   199c2:	d1 1c       	adc	r13, r1
   199c4:	f6 01       	movw	r30, r12
   199c6:	20 81       	ld	r18, Z
   199c8:	31 81       	ldd	r19, Z+1	; 0x01
   199ca:	21 50       	subi	r18, 0x01	; 1
   199cc:	31 09       	sbc	r19, r1
   199ce:	2e 3f       	cpi	r18, 0xFE	; 254
   199d0:	3f 4f       	sbci	r19, 0xFF	; 255
   199d2:	08 f0       	brcs	.+2      	; 0x199d6 <lif_check_dir+0x26>
   199d4:	98 c1       	rjmp	.+816    	; 0x19d06 <lif_check_dir+0x356>
   199d6:	9c 83       	std	Y+4, r25	; 0x04
   199d8:	8b 83       	std	Y+3, r24	; 0x03
   199da:	8c 01       	movw	r16, r24
   199dc:	01 5b       	subi	r16, 0xB1	; 177
   199de:	1f 4f       	sbci	r17, 0xFF	; 255
   199e0:	c8 01       	movw	r24, r16
   199e2:	0d da       	rcall	.-3046   	; 0x18dfe <lif_checkname>
   199e4:	89 2b       	or	r24, r25
   199e6:	99 f4       	brne	.+38     	; 0x19a0e <lif_check_dir+0x5e>
   199e8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   199ec:	80 ff       	sbrs	r24, 0
   199ee:	12 c0       	rjmp	.+36     	; 0x19a14 <lif_check_dir+0x64>
   199f0:	1f 93       	push	r17
   199f2:	0f 93       	push	r16
   199f4:	82 e1       	ldi	r24, 0x12	; 18
   199f6:	9f e3       	ldi	r25, 0x3F	; 63
   199f8:	1f 92       	push	r1
   199fa:	9f 93       	push	r25
   199fc:	8f 93       	push	r24
   199fe:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   19a02:	0f 90       	pop	r0
   19a04:	0f 90       	pop	r0
   19a06:	0f 90       	pop	r0
   19a08:	0f 90       	pop	r0
   19a0a:	0f 90       	pop	r0
   19a0c:	03 c0       	rjmp	.+6      	; 0x19a14 <lif_check_dir+0x64>
   19a0e:	ee 24       	eor	r14, r14
   19a10:	e3 94       	inc	r14
   19a12:	01 c0       	rjmp	.+2      	; 0x19a16 <lif_check_dir+0x66>
   19a14:	e1 2c       	mov	r14, r1
   19a16:	f1 2c       	mov	r15, r1
   19a18:	eb 81       	ldd	r30, Y+3	; 0x03
   19a1a:	fc 81       	ldd	r31, Y+4	; 0x04
   19a1c:	84 85       	ldd	r24, Z+12	; 0x0c
   19a1e:	95 85       	ldd	r25, Z+13	; 0x0d
   19a20:	a6 85       	ldd	r26, Z+14	; 0x0e
   19a22:	b7 85       	ldd	r27, Z+15	; 0x0f
   19a24:	00 97       	sbiw	r24, 0x00	; 0
   19a26:	a1 05       	cpc	r26, r1
   19a28:	b1 05       	cpc	r27, r1
   19a2a:	39 f1       	breq	.+78     	; 0x19a7a <lif_check_dir+0xca>
   19a2c:	e4 5a       	subi	r30, 0xA4	; 164
   19a2e:	ff 4f       	sbci	r31, 0xFF	; 255
   19a30:	40 81       	ld	r20, Z
   19a32:	51 81       	ldd	r21, Z+1	; 0x01
   19a34:	62 81       	ldd	r22, Z+2	; 0x02
   19a36:	73 81       	ldd	r23, Z+3	; 0x03
   19a38:	48 17       	cp	r20, r24
   19a3a:	59 07       	cpc	r21, r25
   19a3c:	6a 07       	cpc	r22, r26
   19a3e:	7b 07       	cpc	r23, r27
   19a40:	e0 f4       	brcc	.+56     	; 0x19a7a <lif_check_dir+0xca>
   19a42:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   19a46:	20 ff       	sbrs	r18, 0
   19a48:	16 c0       	rjmp	.+44     	; 0x19a76 <lif_check_dir+0xc6>
   19a4a:	bf 93       	push	r27
   19a4c:	af 93       	push	r26
   19a4e:	9f 93       	push	r25
   19a50:	8f 93       	push	r24
   19a52:	7f 93       	push	r23
   19a54:	6f 93       	push	r22
   19a56:	5f 93       	push	r21
   19a58:	4f 93       	push	r20
   19a5a:	1f 93       	push	r17
   19a5c:	0f 93       	push	r16
   19a5e:	8e ec       	ldi	r24, 0xCE	; 206
   19a60:	9e e3       	ldi	r25, 0x3E	; 62
   19a62:	1f 92       	push	r1
   19a64:	9f 93       	push	r25
   19a66:	8f 93       	push	r24
   19a68:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   19a6c:	0f b6       	in	r0, 0x3f	; 63
   19a6e:	f8 94       	cli
   19a70:	de bf       	out	0x3e, r29	; 62
   19a72:	0f be       	out	0x3f, r0	; 63
   19a74:	cd bf       	out	0x3d, r28	; 61
   19a76:	e1 2c       	mov	r14, r1
   19a78:	f1 2c       	mov	r15, r1
   19a7a:	eb 81       	ldd	r30, Y+3	; 0x03
   19a7c:	fc 81       	ldd	r31, Y+4	; 0x04
   19a7e:	44 81       	ldd	r20, Z+4	; 0x04
   19a80:	55 81       	ldd	r21, Z+5	; 0x05
   19a82:	66 81       	ldd	r22, Z+6	; 0x06
   19a84:	77 81       	ldd	r23, Z+7	; 0x07
   19a86:	41 15       	cp	r20, r1
   19a88:	51 05       	cpc	r21, r1
   19a8a:	61 05       	cpc	r22, r1
   19a8c:	71 05       	cpc	r23, r1
   19a8e:	99 f1       	breq	.+102    	; 0x19af6 <lif_check_dir+0x146>
   19a90:	e4 5a       	subi	r30, 0xA4	; 164
   19a92:	ff 4f       	sbci	r31, 0xFF	; 255
   19a94:	80 80       	ld	r8, Z
   19a96:	91 80       	ldd	r9, Z+1	; 0x01
   19a98:	a2 80       	ldd	r10, Z+2	; 0x02
   19a9a:	b3 80       	ldd	r11, Z+3	; 0x03
   19a9c:	eb 81       	ldd	r30, Y+3	; 0x03
   19a9e:	fc 81       	ldd	r31, Y+4	; 0x04
   19aa0:	e0 5a       	subi	r30, 0xA0	; 160
   19aa2:	ff 4f       	sbci	r31, 0xFF	; 255
   19aa4:	80 81       	ld	r24, Z
   19aa6:	91 81       	ldd	r25, Z+1	; 0x01
   19aa8:	a2 81       	ldd	r26, Z+2	; 0x02
   19aaa:	b3 81       	ldd	r27, Z+3	; 0x03
   19aac:	88 0d       	add	r24, r8
   19aae:	99 1d       	adc	r25, r9
   19ab0:	aa 1d       	adc	r26, r10
   19ab2:	bb 1d       	adc	r27, r11
   19ab4:	48 17       	cp	r20, r24
   19ab6:	59 07       	cpc	r21, r25
   19ab8:	6a 07       	cpc	r22, r26
   19aba:	7b 07       	cpc	r23, r27
   19abc:	e0 f4       	brcc	.+56     	; 0x19af6 <lif_check_dir+0x146>
   19abe:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   19ac2:	20 ff       	sbrs	r18, 0
   19ac4:	16 c0       	rjmp	.+44     	; 0x19af2 <lif_check_dir+0x142>
   19ac6:	7f 93       	push	r23
   19ac8:	6f 93       	push	r22
   19aca:	5f 93       	push	r21
   19acc:	4f 93       	push	r20
   19ace:	bf 93       	push	r27
   19ad0:	af 93       	push	r26
   19ad2:	9f 93       	push	r25
   19ad4:	8f 93       	push	r24
   19ad6:	1f 93       	push	r17
   19ad8:	0f 93       	push	r16
   19ada:	8d e8       	ldi	r24, 0x8D	; 141
   19adc:	9e e3       	ldi	r25, 0x3E	; 62
   19ade:	1f 92       	push	r1
   19ae0:	9f 93       	push	r25
   19ae2:	8f 93       	push	r24
   19ae4:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   19ae8:	0f b6       	in	r0, 0x3f	; 63
   19aea:	f8 94       	cli
   19aec:	de bf       	out	0x3e, r29	; 62
   19aee:	0f be       	out	0x3f, r0	; 63
   19af0:	cd bf       	out	0x3d, r28	; 61
   19af2:	e1 2c       	mov	r14, r1
   19af4:	f1 2c       	mov	r15, r1
   19af6:	eb 81       	ldd	r30, Y+3	; 0x03
   19af8:	fc 81       	ldd	r31, Y+4	; 0x04
   19afa:	e6 59       	subi	r30, 0x96	; 150
   19afc:	ff 4f       	sbci	r31, 0xFF	; 255
   19afe:	80 81       	ld	r24, Z
   19b00:	91 81       	ldd	r25, Z+1	; 0x01
   19b02:	81 30       	cpi	r24, 0x01	; 1
   19b04:	30 e8       	ldi	r19, 0x80	; 128
   19b06:	93 07       	cpc	r25, r19
   19b08:	b1 f0       	breq	.+44     	; 0x19b36 <lif_check_dir+0x186>
   19b0a:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   19b0e:	20 ff       	sbrs	r18, 0
   19b10:	10 c0       	rjmp	.+32     	; 0x19b32 <lif_check_dir+0x182>
   19b12:	9f 93       	push	r25
   19b14:	8f 93       	push	r24
   19b16:	1f 93       	push	r17
   19b18:	0f 93       	push	r16
   19b1a:	8f e5       	ldi	r24, 0x5F	; 95
   19b1c:	9e e3       	ldi	r25, 0x3E	; 62
   19b1e:	1f 92       	push	r1
   19b20:	9f 93       	push	r25
   19b22:	8f 93       	push	r24
   19b24:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   19b28:	0f b6       	in	r0, 0x3f	; 63
   19b2a:	f8 94       	cli
   19b2c:	de bf       	out	0x3e, r29	; 62
   19b2e:	0f be       	out	0x3f, r0	; 63
   19b30:	cd bf       	out	0x3d, r28	; 61
   19b32:	e1 2c       	mov	r14, r1
   19b34:	f1 2c       	mov	r15, r1
   19b36:	f6 01       	movw	r30, r12
   19b38:	80 81       	ld	r24, Z
   19b3a:	91 81       	ldd	r25, Z+1	; 0x01
   19b3c:	8c 7f       	andi	r24, 0xFC	; 252
   19b3e:	80 31       	cpi	r24, 0x10	; 16
   19b40:	90 4e       	sbci	r25, 0xE0	; 224
   19b42:	09 f0       	breq	.+2      	; 0x19b46 <lif_check_dir+0x196>
   19b44:	b3 c0       	rjmp	.+358    	; 0x19cac <lif_check_dir+0x2fc>
   19b46:	cb 80       	ldd	r12, Y+3	; 0x03
   19b48:	dc 80       	ldd	r13, Y+4	; 0x04
   19b4a:	2c e6       	ldi	r18, 0x6C	; 108
   19b4c:	c2 0e       	add	r12, r18
   19b4e:	d1 1c       	adc	r13, r1
   19b50:	f6 01       	movw	r30, r12
   19b52:	20 81       	ld	r18, Z
   19b54:	31 81       	ldd	r19, Z+1	; 0x01
   19b56:	21 15       	cp	r18, r1
   19b58:	31 05       	cpc	r19, r1
   19b5a:	09 f4       	brne	.+2      	; 0x19b5e <lif_check_dir+0x1ae>
   19b5c:	a7 c0       	rjmp	.+334    	; 0x19cac <lif_check_dir+0x2fc>
   19b5e:	49 01       	movw	r8, r18
   19b60:	a1 2c       	mov	r10, r1
   19b62:	b1 2c       	mov	r11, r1
   19b64:	bb 27       	eor	r27, r27
   19b66:	ab 2d       	mov	r26, r11
   19b68:	9a 2d       	mov	r25, r10
   19b6a:	89 2d       	mov	r24, r9
   19b6c:	33 27       	eor	r19, r19
   19b6e:	2c 01       	movw	r4, r24
   19b70:	3d 01       	movw	r6, r26
   19b72:	21 15       	cp	r18, r1
   19b74:	31 05       	cpc	r19, r1
   19b76:	29 f0       	breq	.+10     	; 0x19b82 <lif_check_dir+0x1d2>
   19b78:	ff ef       	ldi	r31, 0xFF	; 255
   19b7a:	4f 1a       	sub	r4, r31
   19b7c:	5f 0a       	sbc	r5, r31
   19b7e:	6f 0a       	sbc	r6, r31
   19b80:	7f 0a       	sbc	r7, r31
   19b82:	2b 80       	ldd	r2, Y+3	; 0x03
   19b84:	3c 80       	ldd	r3, Y+4	; 0x04
   19b86:	40 e6       	ldi	r20, 0x60	; 96
   19b88:	24 0e       	add	r2, r20
   19b8a:	31 1c       	adc	r3, r1
   19b8c:	f1 01       	movw	r30, r2
   19b8e:	40 81       	ld	r20, Z
   19b90:	51 81       	ldd	r21, Z+1	; 0x01
   19b92:	62 81       	ldd	r22, Z+2	; 0x02
   19b94:	73 81       	ldd	r23, Z+3	; 0x03
   19b96:	44 15       	cp	r20, r4
   19b98:	55 05       	cpc	r21, r5
   19b9a:	66 05       	cpc	r22, r6
   19b9c:	77 05       	cpc	r23, r7
   19b9e:	28 f5       	brcc	.+74     	; 0x19bea <lif_check_dir+0x23a>
   19ba0:	e0 91 bd 01 	lds	r30, 0x01BD	; 0x8001bd <debuglevel>
   19ba4:	e0 ff       	sbrs	r30, 0
   19ba6:	1f c0       	rjmp	.+62     	; 0x19be6 <lif_check_dir+0x236>
   19ba8:	23 2b       	or	r18, r19
   19baa:	19 f0       	breq	.+6      	; 0x19bb2 <lif_check_dir+0x202>
   19bac:	01 96       	adiw	r24, 0x01	; 1
   19bae:	a1 1d       	adc	r26, r1
   19bb0:	b1 1d       	adc	r27, r1
   19bb2:	7f 93       	push	r23
   19bb4:	6f 93       	push	r22
   19bb6:	5f 93       	push	r21
   19bb8:	4f 93       	push	r20
   19bba:	bf 93       	push	r27
   19bbc:	af 93       	push	r26
   19bbe:	9f 93       	push	r25
   19bc0:	8f 93       	push	r24
   19bc2:	1f 92       	push	r1
   19bc4:	1f 92       	push	r1
   19bc6:	9f 92       	push	r9
   19bc8:	8f 92       	push	r8
   19bca:	1f 93       	push	r17
   19bcc:	0f 93       	push	r16
   19bce:	84 e1       	ldi	r24, 0x14	; 20
   19bd0:	9e e3       	ldi	r25, 0x3E	; 62
   19bd2:	1f 92       	push	r1
   19bd4:	9f 93       	push	r25
   19bd6:	8f 93       	push	r24
   19bd8:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   19bdc:	0f b6       	in	r0, 0x3f	; 63
   19bde:	f8 94       	cli
   19be0:	de bf       	out	0x3e, r29	; 62
   19be2:	0f be       	out	0x3f, r0	; 63
   19be4:	cd bf       	out	0x3d, r28	; 61
   19be6:	e1 2c       	mov	r14, r1
   19be8:	f1 2c       	mov	r15, r1
   19bea:	f6 01       	movw	r30, r12
   19bec:	20 81       	ld	r18, Z
   19bee:	31 81       	ldd	r19, Z+1	; 0x01
   19bf0:	49 01       	movw	r8, r18
   19bf2:	a1 2c       	mov	r10, r1
   19bf4:	b1 2c       	mov	r11, r1
   19bf6:	bb 27       	eor	r27, r27
   19bf8:	ab 2d       	mov	r26, r11
   19bfa:	9a 2d       	mov	r25, r10
   19bfc:	89 2d       	mov	r24, r9
   19bfe:	a9 01       	movw	r20, r18
   19c00:	55 27       	eor	r21, r21
   19c02:	5a 83       	std	Y+2, r21	; 0x02
   19c04:	49 83       	std	Y+1, r20	; 0x01
   19c06:	2c 01       	movw	r4, r24
   19c08:	3d 01       	movw	r6, r26
   19c0a:	45 2b       	or	r20, r21
   19c0c:	29 f0       	breq	.+10     	; 0x19c18 <lif_check_dir+0x268>
   19c0e:	5f ef       	ldi	r21, 0xFF	; 255
   19c10:	45 1a       	sub	r4, r21
   19c12:	55 0a       	sbc	r5, r21
   19c14:	65 0a       	sbc	r6, r21
   19c16:	75 0a       	sbc	r7, r21
   19c18:	f1 01       	movw	r30, r2
   19c1a:	40 81       	ld	r20, Z
   19c1c:	51 81       	ldd	r21, Z+1	; 0x01
   19c1e:	62 81       	ldd	r22, Z+2	; 0x02
   19c20:	73 81       	ldd	r23, Z+3	; 0x03
   19c22:	44 16       	cp	r4, r20
   19c24:	55 06       	cpc	r5, r21
   19c26:	66 06       	cpc	r6, r22
   19c28:	77 06       	cpc	r7, r23
   19c2a:	38 f5       	brcc	.+78     	; 0x19c7a <lif_check_dir+0x2ca>
   19c2c:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   19c30:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
   19c34:	32 ff       	sbrs	r19, 2
   19c36:	21 c0       	rjmp	.+66     	; 0x19c7a <lif_check_dir+0x2ca>
   19c38:	29 81       	ldd	r18, Y+1	; 0x01
   19c3a:	3a 81       	ldd	r19, Y+2	; 0x02
   19c3c:	23 2b       	or	r18, r19
   19c3e:	19 f0       	breq	.+6      	; 0x19c46 <lif_check_dir+0x296>
   19c40:	01 96       	adiw	r24, 0x01	; 1
   19c42:	a1 1d       	adc	r26, r1
   19c44:	b1 1d       	adc	r27, r1
   19c46:	7f 93       	push	r23
   19c48:	6f 93       	push	r22
   19c4a:	5f 93       	push	r21
   19c4c:	4f 93       	push	r20
   19c4e:	bf 93       	push	r27
   19c50:	af 93       	push	r26
   19c52:	9f 93       	push	r25
   19c54:	8f 93       	push	r24
   19c56:	1f 92       	push	r1
   19c58:	1f 92       	push	r1
   19c5a:	9f 92       	push	r9
   19c5c:	8f 92       	push	r8
   19c5e:	1f 93       	push	r17
   19c60:	0f 93       	push	r16
   19c62:	89 ec       	ldi	r24, 0xC9	; 201
   19c64:	9d e3       	ldi	r25, 0x3D	; 61
   19c66:	1f 92       	push	r1
   19c68:	9f 93       	push	r25
   19c6a:	8f 93       	push	r24
   19c6c:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   19c70:	0f b6       	in	r0, 0x3f	; 63
   19c72:	f8 94       	cli
   19c74:	de bf       	out	0x3e, r29	; 62
   19c76:	0f be       	out	0x3f, r0	; 63
   19c78:	cd bf       	out	0x3d, r28	; 61
   19c7a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   19c7e:	80 ff       	sbrs	r24, 0
   19c80:	15 c0       	rjmp	.+42     	; 0x19cac <lif_check_dir+0x2fc>
   19c82:	f6 01       	movw	r30, r12
   19c84:	80 81       	ld	r24, Z
   19c86:	91 81       	ldd	r25, Z+1	; 0x01
   19c88:	89 2b       	or	r24, r25
   19c8a:	81 f4       	brne	.+32     	; 0x19cac <lif_check_dir+0x2fc>
   19c8c:	1f 93       	push	r17
   19c8e:	0f 93       	push	r16
   19c90:	8e e9       	ldi	r24, 0x9E	; 158
   19c92:	9d e3       	ldi	r25, 0x3D	; 61
   19c94:	1f 92       	push	r1
   19c96:	9f 93       	push	r25
   19c98:	8f 93       	push	r24
   19c9a:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   19c9e:	0f 90       	pop	r0
   19ca0:	0f 90       	pop	r0
   19ca2:	0f 90       	pop	r0
   19ca4:	0f 90       	pop	r0
   19ca6:	0f 90       	pop	r0
   19ca8:	e1 2c       	mov	r14, r1
   19caa:	f1 2c       	mov	r15, r1
   19cac:	eb 81       	ldd	r30, Y+3	; 0x03
   19cae:	fc 81       	ldd	r31, Y+4	; 0x04
   19cb0:	e2 59       	subi	r30, 0x92	; 146
   19cb2:	ff 4f       	sbci	r31, 0xFF	; 255
   19cb4:	20 81       	ld	r18, Z
   19cb6:	31 81       	ldd	r19, Z+1	; 0x01
   19cb8:	21 15       	cp	r18, r1
   19cba:	f1 e0       	ldi	r31, 0x01	; 1
   19cbc:	3f 07       	cpc	r19, r31
   19cbe:	31 f1       	breq	.+76     	; 0x19d0c <lif_check_dir+0x35c>
   19cc0:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <debuglevel>
   19cc4:	50 91 be 01 	lds	r21, 0x01BE	; 0x8001be <debuglevel+0x1>
   19cc8:	ca 01       	movw	r24, r20
   19cca:	81 70       	andi	r24, 0x01	; 1
   19ccc:	99 27       	eor	r25, r25
   19cce:	40 ff       	sbrs	r20, 0
   19cd0:	1e c0       	rjmp	.+60     	; 0x19d0e <lif_check_dir+0x35e>
   19cd2:	c9 01       	movw	r24, r18
   19cd4:	1f 92       	push	r1
   19cd6:	1f 92       	push	r1
   19cd8:	9f 93       	push	r25
   19cda:	2f 93       	push	r18
   19cdc:	eb 81       	ldd	r30, Y+3	; 0x03
   19cde:	fc 81       	ldd	r31, Y+4	; 0x04
   19ce0:	81 81       	ldd	r24, Z+1	; 0x01
   19ce2:	8f 93       	push	r24
   19ce4:	80 81       	ld	r24, Z
   19ce6:	8f 93       	push	r24
   19ce8:	82 e7       	ldi	r24, 0x72	; 114
   19cea:	9d e3       	ldi	r25, 0x3D	; 61
   19cec:	1f 92       	push	r1
   19cee:	9f 93       	push	r25
   19cf0:	8f 93       	push	r24
   19cf2:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   19cf6:	0f b6       	in	r0, 0x3f	; 63
   19cf8:	f8 94       	cli
   19cfa:	de bf       	out	0x3e, r29	; 62
   19cfc:	0f be       	out	0x3f, r0	; 63
   19cfe:	cd bf       	out	0x3d, r28	; 61
   19d00:	80 e0       	ldi	r24, 0x00	; 0
   19d02:	90 e0       	ldi	r25, 0x00	; 0
   19d04:	04 c0       	rjmp	.+8      	; 0x19d0e <lif_check_dir+0x35e>
   19d06:	81 e0       	ldi	r24, 0x01	; 1
   19d08:	90 e0       	ldi	r25, 0x00	; 0
   19d0a:	01 c0       	rjmp	.+2      	; 0x19d0e <lif_check_dir+0x35e>
   19d0c:	c7 01       	movw	r24, r14
   19d0e:	24 96       	adiw	r28, 0x04	; 4
   19d10:	e2 e1       	ldi	r30, 0x12	; 18
   19d12:	0c 94 2f e8 	jmp	0x1d05e	; 0x1d05e <__epilogue_restores__>

00019d16 <lif_close_volume>:
   19d16:	cf 93       	push	r28
   19d18:	df 93       	push	r29
   19d1a:	00 97       	sbiw	r24, 0x00	; 0
   19d1c:	f9 f0       	breq	.+62     	; 0x19d5c <lif_close_volume+0x46>
   19d1e:	ec 01       	movw	r28, r24
   19d20:	8a 81       	ldd	r24, Y+2	; 0x02
   19d22:	9b 81       	ldd	r25, Y+3	; 0x03
   19d24:	00 97       	sbiw	r24, 0x00	; 0
   19d26:	79 f0       	breq	.+30     	; 0x19d46 <lif_close_volume+0x30>
   19d28:	22 e0       	ldi	r18, 0x02	; 2
   19d2a:	30 e0       	ldi	r19, 0x00	; 0
   19d2c:	40 e0       	ldi	r20, 0x00	; 0
   19d2e:	50 e0       	ldi	r21, 0x00	; 0
   19d30:	ba 01       	movw	r22, r20
   19d32:	0e 94 58 7a 	call	0xf4b0	; 0xf4b0 <fseek>
   19d36:	8a 81       	ldd	r24, Y+2	; 0x02
   19d38:	9b 81       	ldd	r25, Y+3	; 0x03
   19d3a:	0e 94 40 7c 	call	0xf880	; 0xf880 <fclose>
   19d3e:	1b 82       	std	Y+3, r1	; 0x03
   19d40:	1a 82       	std	Y+2, r1	; 0x02
   19d42:	0e 94 3b 7b 	call	0xf676	; 0xf676 <sync>
   19d46:	88 81       	ld	r24, Y
   19d48:	99 81       	ldd	r25, Y+1	; 0x01
   19d4a:	00 97       	sbiw	r24, 0x00	; 0
   19d4c:	11 f0       	breq	.+4      	; 0x19d52 <lif_close_volume+0x3c>
   19d4e:	0e 94 3e c5 	call	0x18a7c	; 0x18a7c <lif_free>
   19d52:	ce 01       	movw	r24, r28
   19d54:	b8 db       	rcall	.-2192   	; 0x194c6 <lif_vol_clear>
   19d56:	ce 01       	movw	r24, r28
   19d58:	0e 94 3e c5 	call	0x18a7c	; 0x18a7c <lif_free>
   19d5c:	df 91       	pop	r29
   19d5e:	cf 91       	pop	r28
   19d60:	08 95       	ret

00019d62 <lif_checkdirindex>:
   19d62:	a0 e0       	ldi	r26, 0x00	; 0
   19d64:	b0 e0       	ldi	r27, 0x00	; 0
   19d66:	e7 eb       	ldi	r30, 0xB7	; 183
   19d68:	fe ec       	ldi	r31, 0xCE	; 206
   19d6a:	0c 94 1d e8 	jmp	0x1d03a	; 0x1d03a <__prologue_saves__+0x14>
   19d6e:	77 fd       	sbrc	r23, 7
   19d70:	26 c0       	rjmp	.+76     	; 0x19dbe <lif_checkdirindex+0x5c>
   19d72:	8b 01       	movw	r16, r22
   19d74:	07 2e       	mov	r0, r23
   19d76:	00 0c       	add	r0, r0
   19d78:	22 0b       	sbc	r18, r18
   19d7a:	33 0b       	sbc	r19, r19
   19d7c:	45 e0       	ldi	r20, 0x05	; 5
   19d7e:	00 0f       	add	r16, r16
   19d80:	11 1f       	adc	r17, r17
   19d82:	22 1f       	adc	r18, r18
   19d84:	33 1f       	adc	r19, r19
   19d86:	4a 95       	dec	r20
   19d88:	d1 f7       	brne	.-12     	; 0x19d7e <lif_checkdirindex+0x1c>
   19d8a:	c1 2e       	mov	r12, r17
   19d8c:	d2 2e       	mov	r13, r18
   19d8e:	e3 2e       	mov	r14, r19
   19d90:	ff 24       	eor	r15, r15
   19d92:	11 27       	eor	r17, r17
   19d94:	22 27       	eor	r18, r18
   19d96:	33 27       	eor	r19, r19
   19d98:	01 2b       	or	r16, r17
   19d9a:	02 2b       	or	r16, r18
   19d9c:	03 2b       	or	r16, r19
   19d9e:	29 f0       	breq	.+10     	; 0x19daa <lif_checkdirindex+0x48>
   19da0:	2f ef       	ldi	r18, 0xFF	; 255
   19da2:	c2 1a       	sub	r12, r18
   19da4:	d2 0a       	sbc	r13, r18
   19da6:	e2 0a       	sbc	r14, r18
   19da8:	f2 0a       	sbc	r15, r18
   19daa:	fc 01       	movw	r30, r24
   19dac:	05 a9       	ldd	r16, Z+53	; 0x35
   19dae:	16 a9       	ldd	r17, Z+54	; 0x36
   19db0:	27 a9       	ldd	r18, Z+55	; 0x37
   19db2:	30 ad       	ldd	r19, Z+56	; 0x38
   19db4:	0c 15       	cp	r16, r12
   19db6:	1d 05       	cpc	r17, r13
   19db8:	2e 05       	cpc	r18, r14
   19dba:	3f 05       	cpc	r19, r15
   19dbc:	30 f5       	brcc	.+76     	; 0x19e0a <lif_checkdirindex+0xa8>
   19dbe:	ec 01       	movw	r28, r24
   19dc0:	7f 93       	push	r23
   19dc2:	6f 93       	push	r22
   19dc4:	89 81       	ldd	r24, Y+1	; 0x01
   19dc6:	8f 93       	push	r24
   19dc8:	88 81       	ld	r24, Y
   19dca:	8f 93       	push	r24
   19dcc:	83 eb       	ldi	r24, 0xB3	; 179
   19dce:	9c e3       	ldi	r25, 0x3C	; 60
   19dd0:	1f 92       	push	r1
   19dd2:	9f 93       	push	r25
   19dd4:	8f 93       	push	r24
   19dd6:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   19dda:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   19dde:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
   19de2:	8d b7       	in	r24, 0x3d	; 61
   19de4:	9e b7       	in	r25, 0x3e	; 62
   19de6:	07 96       	adiw	r24, 0x07	; 7
   19de8:	0f b6       	in	r0, 0x3f	; 63
   19dea:	f8 94       	cli
   19dec:	9e bf       	out	0x3e, r25	; 62
   19dee:	0f be       	out	0x3f, r0	; 63
   19df0:	8d bf       	out	0x3d, r24	; 61
   19df2:	c9 01       	movw	r24, r18
   19df4:	88 27       	eor	r24, r24
   19df6:	94 70       	andi	r25, 0x04	; 4
   19df8:	32 ff       	sbrs	r19, 2
   19dfa:	09 c0       	rjmp	.+18     	; 0x19e0e <lif_checkdirindex+0xac>
   19dfc:	6d ea       	ldi	r22, 0xAD	; 173
   19dfe:	75 e1       	ldi	r23, 0x15	; 21
   19e00:	ce 01       	movw	r24, r28
   19e02:	68 db       	rcall	.-2352   	; 0x194d4 <lif_dump_vol>
   19e04:	80 e0       	ldi	r24, 0x00	; 0
   19e06:	90 e0       	ldi	r25, 0x00	; 0
   19e08:	02 c0       	rjmp	.+4      	; 0x19e0e <lif_checkdirindex+0xac>
   19e0a:	81 e0       	ldi	r24, 0x01	; 1
   19e0c:	90 e0       	ldi	r25, 0x00	; 0
   19e0e:	cd b7       	in	r28, 0x3d	; 61
   19e10:	de b7       	in	r29, 0x3e	; 62
   19e12:	e8 e0       	ldi	r30, 0x08	; 8
   19e14:	0c 94 39 e8 	jmp	0x1d072	; 0x1d072 <__epilogue_restores__+0x14>

00019e18 <lif_readdirindex>:
   19e18:	a0 e2       	ldi	r26, 0x20	; 32
   19e1a:	b0 e0       	ldi	r27, 0x00	; 0
   19e1c:	e2 e1       	ldi	r30, 0x12	; 18
   19e1e:	ff ec       	ldi	r31, 0xCF	; 207
   19e20:	0c 94 1d e8 	jmp	0x1d03a	; 0x1d03a <__prologue_saves__+0x14>
   19e24:	7c 01       	movw	r14, r24
   19e26:	6b 01       	movw	r12, r22
   19e28:	9c df       	rcall	.-200    	; 0x19d62 <lif_checkdirindex>
   19e2a:	89 2b       	or	r24, r25
   19e2c:	19 f4       	brne	.+6      	; 0x19e34 <lif_readdirindex+0x1c>
   19e2e:	00 e0       	ldi	r16, 0x00	; 0
   19e30:	10 e0       	ldi	r17, 0x00	; 0
   19e32:	56 c0       	rjmp	.+172    	; 0x19ee0 <lif_readdirindex+0xc8>
   19e34:	f7 01       	movw	r30, r14
   19e36:	85 a5       	ldd	r24, Z+45	; 0x2d
   19e38:	96 a5       	ldd	r25, Z+46	; 0x2e
   19e3a:	a7 a5       	ldd	r26, Z+47	; 0x2f
   19e3c:	b0 a9       	ldd	r27, Z+48	; 0x30
   19e3e:	44 27       	eor	r20, r20
   19e40:	58 2f       	mov	r21, r24
   19e42:	69 2f       	mov	r22, r25
   19e44:	7a 2f       	mov	r23, r26
   19e46:	c6 01       	movw	r24, r12
   19e48:	0d 2c       	mov	r0, r13
   19e4a:	00 0c       	add	r0, r0
   19e4c:	aa 0b       	sbc	r26, r26
   19e4e:	bb 0b       	sbc	r27, r27
   19e50:	35 e0       	ldi	r19, 0x05	; 5
   19e52:	88 0f       	add	r24, r24
   19e54:	99 1f       	adc	r25, r25
   19e56:	aa 1f       	adc	r26, r26
   19e58:	bb 1f       	adc	r27, r27
   19e5a:	3a 95       	dec	r19
   19e5c:	d1 f7       	brne	.-12     	; 0x19e52 <lif_readdirindex+0x3a>
   19e5e:	9a 01       	movw	r18, r20
   19e60:	ab 01       	movw	r20, r22
   19e62:	28 0f       	add	r18, r24
   19e64:	39 1f       	adc	r19, r25
   19e66:	4a 1f       	adc	r20, r26
   19e68:	5b 1f       	adc	r21, r27
   19e6a:	00 e2       	ldi	r16, 0x20	; 32
   19e6c:	10 e0       	ldi	r17, 0x00	; 0
   19e6e:	be 01       	movw	r22, r28
   19e70:	6f 5f       	subi	r22, 0xFF	; 255
   19e72:	7f 4f       	sbci	r23, 0xFF	; 255
   19e74:	c7 01       	movw	r24, r14
   19e76:	0e 94 f3 c5 	call	0x18be6	; 0x18be6 <lif_read>
   19e7a:	60 32       	cpi	r22, 0x20	; 32
   19e7c:	71 05       	cpc	r23, r1
   19e7e:	81 05       	cpc	r24, r1
   19e80:	91 05       	cpc	r25, r1
   19e82:	a8 f2       	brcs	.-86     	; 0x19e2e <lif_readdirindex+0x16>
   19e84:	b7 01       	movw	r22, r14
   19e86:	ce 01       	movw	r24, r28
   19e88:	01 96       	adiw	r24, 0x01	; 1
   19e8a:	c1 d9       	rcall	.-3198   	; 0x1920e <lif_str2dir>
   19e8c:	f7 01       	movw	r30, r14
   19e8e:	e6 5a       	subi	r30, 0xA6	; 166
   19e90:	ff 4f       	sbci	r31, 0xFF	; 255
   19e92:	80 81       	ld	r24, Z
   19e94:	91 81       	ldd	r25, Z+1	; 0x01
   19e96:	01 96       	adiw	r24, 0x01	; 1
   19e98:	19 f4       	brne	.+6      	; 0x19ea0 <lif_readdirindex+0x88>
   19e9a:	f7 01       	movw	r30, r14
   19e9c:	d3 a2       	std	Z+35, r13	; 0x23
   19e9e:	c2 a2       	std	Z+34, r12	; 0x22
   19ea0:	c7 01       	movw	r24, r14
   19ea2:	86 dd       	rcall	.-1268   	; 0x199b0 <lif_check_dir>
   19ea4:	8c 01       	movw	r16, r24
   19ea6:	89 2b       	or	r24, r25
   19ea8:	c9 f4       	brne	.+50     	; 0x19edc <lif_readdirindex+0xc4>
   19eaa:	df 92       	push	r13
   19eac:	cf 92       	push	r12
   19eae:	83 e9       	ldi	r24, 0x93	; 147
   19eb0:	9c e3       	ldi	r25, 0x3C	; 60
   19eb2:	1f 92       	push	r1
   19eb4:	9f 93       	push	r25
   19eb6:	8f 93       	push	r24
   19eb8:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   19ebc:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   19ec0:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   19ec4:	0f 90       	pop	r0
   19ec6:	0f 90       	pop	r0
   19ec8:	0f 90       	pop	r0
   19eca:	0f 90       	pop	r0
   19ecc:	0f 90       	pop	r0
   19ece:	92 ff       	sbrs	r25, 2
   19ed0:	ae cf       	rjmp	.-164    	; 0x19e2e <lif_readdirindex+0x16>
   19ed2:	6e eb       	ldi	r22, 0xBE	; 190
   19ed4:	75 e1       	ldi	r23, 0x15	; 21
   19ed6:	c7 01       	movw	r24, r14
   19ed8:	fd da       	rcall	.-2566   	; 0x194d4 <lif_dump_vol>
   19eda:	02 c0       	rjmp	.+4      	; 0x19ee0 <lif_readdirindex+0xc8>
   19edc:	01 e0       	ldi	r16, 0x01	; 1
   19ede:	10 e0       	ldi	r17, 0x00	; 0
   19ee0:	c8 01       	movw	r24, r16
   19ee2:	a0 96       	adiw	r28, 0x20	; 32
   19ee4:	e8 e0       	ldi	r30, 0x08	; 8
   19ee6:	0c 94 39 e8 	jmp	0x1d072	; 0x1d072 <__epilogue_restores__+0x14>

00019eea <lif_writedirindex>:
   19eea:	a0 e2       	ldi	r26, 0x20	; 32
   19eec:	b0 e0       	ldi	r27, 0x00	; 0
   19eee:	eb e7       	ldi	r30, 0x7B	; 123
   19ef0:	ff ec       	ldi	r31, 0xCF	; 207
   19ef2:	0c 94 1b e8 	jmp	0x1d036	; 0x1d036 <__prologue_saves__+0x10>
   19ef6:	5c 01       	movw	r10, r24
   19ef8:	6b 01       	movw	r12, r22
   19efa:	5a dd       	rcall	.-1356   	; 0x199b0 <lif_check_dir>
   19efc:	7c 01       	movw	r14, r24
   19efe:	89 2b       	or	r24, r25
   19f00:	71 f4       	brne	.+28     	; 0x19f1e <lif_writedirindex+0x34>
   19f02:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   19f06:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   19f0a:	92 fd       	sbrc	r25, 2
   19f0c:	03 c0       	rjmp	.+6      	; 0x19f14 <lif_writedirindex+0x2a>
   19f0e:	e1 2c       	mov	r14, r1
   19f10:	f1 2c       	mov	r15, r1
   19f12:	42 c0       	rjmp	.+132    	; 0x19f98 <lif_writedirindex+0xae>
   19f14:	6f ec       	ldi	r22, 0xCF	; 207
   19f16:	75 e1       	ldi	r23, 0x15	; 21
   19f18:	c5 01       	movw	r24, r10
   19f1a:	dc da       	rcall	.-2632   	; 0x194d4 <lif_dump_vol>
   19f1c:	3d c0       	rjmp	.+122    	; 0x19f98 <lif_writedirindex+0xae>
   19f1e:	b6 01       	movw	r22, r12
   19f20:	c5 01       	movw	r24, r10
   19f22:	1f df       	rcall	.-450    	; 0x19d62 <lif_checkdirindex>
   19f24:	89 2b       	or	r24, r25
   19f26:	99 f3       	breq	.-26     	; 0x19f0e <lif_writedirindex+0x24>
   19f28:	f5 01       	movw	r30, r10
   19f2a:	e6 5a       	subi	r30, 0xA6	; 166
   19f2c:	ff 4f       	sbci	r31, 0xFF	; 255
   19f2e:	80 81       	ld	r24, Z
   19f30:	91 81       	ldd	r25, Z+1	; 0x01
   19f32:	01 96       	adiw	r24, 0x01	; 1
   19f34:	19 f4       	brne	.+6      	; 0x19f3c <lif_writedirindex+0x52>
   19f36:	f5 01       	movw	r30, r10
   19f38:	d3 a2       	std	Z+35, r13	; 0x23
   19f3a:	c2 a2       	std	Z+34, r12	; 0x22
   19f3c:	f5 01       	movw	r30, r10
   19f3e:	85 a5       	ldd	r24, Z+45	; 0x2d
   19f40:	96 a5       	ldd	r25, Z+46	; 0x2e
   19f42:	a7 a5       	ldd	r26, Z+47	; 0x2f
   19f44:	b0 a9       	ldd	r27, Z+48	; 0x30
   19f46:	ba 2f       	mov	r27, r26
   19f48:	a9 2f       	mov	r26, r25
   19f4a:	98 2f       	mov	r25, r24
   19f4c:	88 27       	eor	r24, r24
   19f4e:	0d 2c       	mov	r0, r13
   19f50:	00 0c       	add	r0, r0
   19f52:	ee 08       	sbc	r14, r14
   19f54:	ff 08       	sbc	r15, r15
   19f56:	35 e0       	ldi	r19, 0x05	; 5
   19f58:	cc 0c       	add	r12, r12
   19f5a:	dd 1c       	adc	r13, r13
   19f5c:	ee 1c       	adc	r14, r14
   19f5e:	ff 1c       	adc	r15, r15
   19f60:	3a 95       	dec	r19
   19f62:	d1 f7       	brne	.-12     	; 0x19f58 <lif_writedirindex+0x6e>
   19f64:	c8 0e       	add	r12, r24
   19f66:	d9 1e       	adc	r13, r25
   19f68:	ea 1e       	adc	r14, r26
   19f6a:	fb 1e       	adc	r15, r27
   19f6c:	be 01       	movw	r22, r28
   19f6e:	6f 5f       	subi	r22, 0xFF	; 255
   19f70:	7f 4f       	sbci	r23, 0xFF	; 255
   19f72:	c5 01       	movw	r24, r10
   19f74:	db d8       	rcall	.-3658   	; 0x1912c <lif_dir2str>
   19f76:	00 e2       	ldi	r16, 0x20	; 32
   19f78:	10 e0       	ldi	r17, 0x00	; 0
   19f7a:	a7 01       	movw	r20, r14
   19f7c:	96 01       	movw	r18, r12
   19f7e:	be 01       	movw	r22, r28
   19f80:	6f 5f       	subi	r22, 0xFF	; 255
   19f82:	7f 4f       	sbci	r23, 0xFF	; 255
   19f84:	c5 01       	movw	r24, r10
   19f86:	0e 94 4c c6 	call	0x18c98	; 0x18c98 <lif_write>
   19f8a:	31 e0       	ldi	r19, 0x01	; 1
   19f8c:	20 e0       	ldi	r18, 0x00	; 0
   19f8e:	80 97       	sbiw	r24, 0x20	; 32
   19f90:	0c f4       	brge	.+2      	; 0x19f94 <lif_writedirindex+0xaa>
   19f92:	30 e0       	ldi	r19, 0x00	; 0
   19f94:	e3 2e       	mov	r14, r19
   19f96:	f2 2e       	mov	r15, r18
   19f98:	c7 01       	movw	r24, r14
   19f9a:	a0 96       	adiw	r28, 0x20	; 32
   19f9c:	ea e0       	ldi	r30, 0x0A	; 10
   19f9e:	0c 94 37 e8 	jmp	0x1d06e	; 0x1d06e <__epilogue_restores__+0x10>

00019fa2 <lif_writedirEOF>:
   19fa2:	0f 93       	push	r16
   19fa4:	1f 93       	push	r17
   19fa6:	cf 93       	push	r28
   19fa8:	df 93       	push	r29
   19faa:	ec 01       	movw	r28, r24
   19fac:	8b 01       	movw	r16, r22
   19fae:	83 da       	rcall	.-2810   	; 0x194b6 <lif_dir_clear>
   19fb0:	fe 01       	movw	r30, r28
   19fb2:	e6 5a       	subi	r30, 0xA6	; 166
   19fb4:	ff 4f       	sbci	r31, 0xFF	; 255
   19fb6:	8f ef       	ldi	r24, 0xFF	; 255
   19fb8:	9f ef       	ldi	r25, 0xFF	; 255
   19fba:	91 83       	std	Z+1, r25	; 0x01
   19fbc:	80 83       	st	Z, r24
   19fbe:	1b a3       	std	Y+35, r17	; 0x23
   19fc0:	0a a3       	std	Y+34, r16	; 0x22
   19fc2:	b8 01       	movw	r22, r16
   19fc4:	ce 01       	movw	r24, r28
   19fc6:	91 df       	rcall	.-222    	; 0x19eea <lif_writedirindex>
   19fc8:	df 91       	pop	r29
   19fca:	cf 91       	pop	r28
   19fcc:	1f 91       	pop	r17
   19fce:	0f 91       	pop	r16
   19fd0:	08 95       	ret

00019fd2 <lif_updatefree>:
   19fd2:	2f 92       	push	r2
   19fd4:	3f 92       	push	r3
   19fd6:	4f 92       	push	r4
   19fd8:	5f 92       	push	r5
   19fda:	6f 92       	push	r6
   19fdc:	7f 92       	push	r7
   19fde:	8f 92       	push	r8
   19fe0:	af 92       	push	r10
   19fe2:	bf 92       	push	r11
   19fe4:	cf 92       	push	r12
   19fe6:	df 92       	push	r13
   19fe8:	ef 92       	push	r14
   19fea:	ff 92       	push	r15
   19fec:	0f 93       	push	r16
   19fee:	1f 93       	push	r17
   19ff0:	cf 93       	push	r28
   19ff2:	df 93       	push	r29
   19ff4:	cd b7       	in	r28, 0x3d	; 61
   19ff6:	de b7       	in	r29, 0x3e	; 62
   19ff8:	28 97       	sbiw	r28, 0x08	; 8
   19ffa:	0f b6       	in	r0, 0x3f	; 63
   19ffc:	f8 94       	cli
   19ffe:	de bf       	out	0x3e, r29	; 62
   1a000:	0f be       	out	0x3f, r0	; 63
   1a002:	cd bf       	out	0x3d, r28	; 61
   1a004:	98 87       	std	Y+8, r25	; 0x08
   1a006:	8f 83       	std	Y+7, r24	; 0x07
   1a008:	fc 01       	movw	r30, r24
   1a00a:	24 84       	ldd	r2, Z+12	; 0x0c
   1a00c:	35 84       	ldd	r3, Z+13	; 0x0d
   1a00e:	46 84       	ldd	r4, Z+14	; 0x0e
   1a010:	57 84       	ldd	r5, Z+15	; 0x0f
   1a012:	80 89       	ldd	r24, Z+16	; 0x10
   1a014:	91 89       	ldd	r25, Z+17	; 0x11
   1a016:	a2 89       	ldd	r26, Z+18	; 0x12
   1a018:	b3 89       	ldd	r27, Z+19	; 0x13
   1a01a:	80 8f       	std	Z+24, r24	; 0x18
   1a01c:	91 8f       	std	Z+25, r25	; 0x19
   1a01e:	a2 8f       	std	Z+26, r26	; 0x1a
   1a020:	b3 8f       	std	Z+27, r27	; 0x1b
   1a022:	14 8a       	std	Z+20, r1	; 0x14
   1a024:	15 8a       	std	Z+21, r1	; 0x15
   1a026:	16 8a       	std	Z+22, r1	; 0x16
   1a028:	17 8a       	std	Z+23, r1	; 0x17
   1a02a:	17 8e       	std	Z+31, r1	; 0x1f
   1a02c:	16 8e       	std	Z+30, r1	; 0x1e
   1a02e:	15 8e       	std	Z+29, r1	; 0x1d
   1a030:	14 8e       	std	Z+28, r1	; 0x1c
   1a032:	11 a2       	std	Z+33, r1	; 0x21
   1a034:	10 a2       	std	Z+32, r1	; 0x20
   1a036:	13 a2       	std	Z+35, r1	; 0x23
   1a038:	12 a2       	std	Z+34, r1	; 0x22
   1a03a:	cc 24       	eor	r12, r12
   1a03c:	c3 94       	inc	r12
   1a03e:	d1 2c       	mov	r13, r1
   1a040:	0f ef       	ldi	r16, 0xFF	; 255
   1a042:	1f ef       	ldi	r17, 0xFF	; 255
   1a044:	e6 5a       	subi	r30, 0xA6	; 166
   1a046:	ff 4f       	sbci	r31, 0xFF	; 255
   1a048:	fc 83       	std	Y+4, r31	; 0x04
   1a04a:	eb 83       	std	Y+3, r30	; 0x03
   1a04c:	af 80       	ldd	r10, Y+7	; 0x07
   1a04e:	b8 84       	ldd	r11, Y+8	; 0x08
   1a050:	fc e5       	ldi	r31, 0x5C	; 92
   1a052:	af 0e       	add	r10, r31
   1a054:	b1 1c       	adc	r11, r1
   1a056:	8f 81       	ldd	r24, Y+7	; 0x07
   1a058:	98 85       	ldd	r25, Y+8	; 0x08
   1a05a:	80 5a       	subi	r24, 0xA0	; 160
   1a05c:	9f 4f       	sbci	r25, 0xFF	; 255
   1a05e:	9e 83       	std	Y+6, r25	; 0x06
   1a060:	8d 83       	std	Y+5, r24	; 0x05
   1a062:	ef 81       	ldd	r30, Y+7	; 0x07
   1a064:	f8 85       	ldd	r31, Y+8	; 0x08
   1a066:	e1 5b       	subi	r30, 0xB1	; 177
   1a068:	ff 4f       	sbci	r31, 0xFF	; 255
   1a06a:	fa 83       	std	Y+2, r31	; 0x02
   1a06c:	e9 83       	std	Y+1, r30	; 0x01
   1a06e:	86 e4       	ldi	r24, 0x46	; 70
   1a070:	9c e3       	ldi	r25, 0x3C	; 60
   1a072:	3c 01       	movw	r6, r24
   1a074:	76 01       	movw	r14, r12
   1a076:	21 e0       	ldi	r18, 0x01	; 1
   1a078:	e2 1a       	sub	r14, r18
   1a07a:	f1 08       	sbc	r15, r1
   1a07c:	b7 01       	movw	r22, r14
   1a07e:	8f 81       	ldd	r24, Y+7	; 0x07
   1a080:	98 85       	ldd	r25, Y+8	; 0x08
   1a082:	ca de       	rcall	.-620    	; 0x19e18 <lif_readdirindex>
   1a084:	89 2b       	or	r24, r25
   1a086:	19 f4       	brne	.+6      	; 0x1a08e <lif_updatefree+0xbc>
   1a088:	80 e0       	ldi	r24, 0x00	; 0
   1a08a:	90 e0       	ldi	r25, 0x00	; 0
   1a08c:	92 c0       	rjmp	.+292    	; 0x1a1b2 <lif_updatefree+0x1e0>
   1a08e:	eb 81       	ldd	r30, Y+3	; 0x03
   1a090:	fc 81       	ldd	r31, Y+4	; 0x04
   1a092:	80 81       	ld	r24, Z
   1a094:	91 81       	ldd	r25, Z+1	; 0x01
   1a096:	8f 3f       	cpi	r24, 0xFF	; 255
   1a098:	ff ef       	ldi	r31, 0xFF	; 255
   1a09a:	9f 07       	cpc	r25, r31
   1a09c:	c1 f4       	brne	.+48     	; 0x1a0ce <lif_updatefree+0xfc>
   1a09e:	ef 81       	ldd	r30, Y+7	; 0x07
   1a0a0:	f8 85       	ldd	r31, Y+8	; 0x08
   1a0a2:	0f 3f       	cpi	r16, 0xFF	; 255
   1a0a4:	2f ef       	ldi	r18, 0xFF	; 255
   1a0a6:	12 07       	cpc	r17, r18
   1a0a8:	09 f4       	brne	.+2      	; 0x1a0ac <lif_updatefree+0xda>
   1a0aa:	79 c0       	rjmp	.+242    	; 0x1a19e <lif_updatefree+0x1cc>
   1a0ac:	13 a3       	std	Z+35, r17	; 0x23
   1a0ae:	02 a3       	std	Z+34, r16	; 0x22
   1a0b0:	e0 1a       	sub	r14, r16
   1a0b2:	f1 0a       	sbc	r15, r17
   1a0b4:	86 8d       	ldd	r24, Z+30	; 0x1e
   1a0b6:	97 8d       	ldd	r25, Z+31	; 0x1f
   1a0b8:	8e 19       	sub	r24, r14
   1a0ba:	9f 09       	sbc	r25, r15
   1a0bc:	97 8f       	std	Z+31, r25	; 0x1f
   1a0be:	86 8f       	std	Z+30, r24	; 0x1e
   1a0c0:	b8 01       	movw	r22, r16
   1a0c2:	cf 01       	movw	r24, r30
   1a0c4:	6e df       	rcall	.-292    	; 0x19fa2 <lif_writedirEOF>
   1a0c6:	89 2b       	or	r24, r25
   1a0c8:	09 f0       	breq	.+2      	; 0x1a0cc <lif_updatefree+0xfa>
   1a0ca:	6b c0       	rjmp	.+214    	; 0x1a1a2 <lif_updatefree+0x1d0>
   1a0cc:	dd cf       	rjmp	.-70     	; 0x1a088 <lif_updatefree+0xb6>
   1a0ce:	89 2b       	or	r24, r25
   1a0d0:	81 f4       	brne	.+32     	; 0x1a0f2 <lif_updatefree+0x120>
   1a0d2:	0f 3f       	cpi	r16, 0xFF	; 255
   1a0d4:	ff ef       	ldi	r31, 0xFF	; 255
   1a0d6:	1f 07       	cpc	r17, r31
   1a0d8:	09 f4       	brne	.+2      	; 0x1a0dc <lif_updatefree+0x10a>
   1a0da:	87 01       	movw	r16, r14
   1a0dc:	ef 81       	ldd	r30, Y+7	; 0x07
   1a0de:	f8 85       	ldd	r31, Y+8	; 0x08
   1a0e0:	86 8d       	ldd	r24, Z+30	; 0x1e
   1a0e2:	97 8d       	ldd	r25, Z+31	; 0x1f
   1a0e4:	01 96       	adiw	r24, 0x01	; 1
   1a0e6:	97 8f       	std	Z+31, r25	; 0x1f
   1a0e8:	86 8f       	std	Z+30, r24	; 0x1e
   1a0ea:	ff ef       	ldi	r31, 0xFF	; 255
   1a0ec:	cf 1a       	sub	r12, r31
   1a0ee:	df 0a       	sbc	r13, r31
   1a0f0:	c1 cf       	rjmp	.-126    	; 0x1a074 <lif_updatefree+0xa2>
   1a0f2:	f5 01       	movw	r30, r10
   1a0f4:	80 81       	ld	r24, Z
   1a0f6:	91 81       	ldd	r25, Z+1	; 0x01
   1a0f8:	a2 81       	ldd	r26, Z+2	; 0x02
   1a0fa:	b3 81       	ldd	r27, Z+3	; 0x03
   1a0fc:	82 15       	cp	r24, r2
   1a0fe:	93 05       	cpc	r25, r3
   1a100:	a4 05       	cpc	r26, r4
   1a102:	b5 05       	cpc	r27, r5
   1a104:	c0 f4       	brcc	.+48     	; 0x1a136 <lif_updatefree+0x164>
   1a106:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1a10a:	80 ff       	sbrs	r24, 0
   1a10c:	14 c0       	rjmp	.+40     	; 0x1a136 <lif_updatefree+0x164>
   1a10e:	fa 81       	ldd	r31, Y+2	; 0x02
   1a110:	ff 93       	push	r31
   1a112:	29 81       	ldd	r18, Y+1	; 0x01
   1a114:	2f 93       	push	r18
   1a116:	ef 81       	ldd	r30, Y+7	; 0x07
   1a118:	f8 85       	ldd	r31, Y+8	; 0x08
   1a11a:	81 81       	ldd	r24, Z+1	; 0x01
   1a11c:	8f 93       	push	r24
   1a11e:	80 81       	ld	r24, Z
   1a120:	8f 93       	push	r24
   1a122:	1f 92       	push	r1
   1a124:	7f 92       	push	r7
   1a126:	6f 92       	push	r6
   1a128:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1a12c:	0f b6       	in	r0, 0x3f	; 63
   1a12e:	f8 94       	cli
   1a130:	de bf       	out	0x3e, r29	; 62
   1a132:	0f be       	out	0x3f, r0	; 63
   1a134:	cd bf       	out	0x3d, r28	; 61
   1a136:	ed 81       	ldd	r30, Y+5	; 0x05
   1a138:	fe 81       	ldd	r31, Y+6	; 0x06
   1a13a:	80 81       	ld	r24, Z
   1a13c:	91 81       	ldd	r25, Z+1	; 0x01
   1a13e:	a2 81       	ldd	r26, Z+2	; 0x02
   1a140:	b3 81       	ldd	r27, Z+3	; 0x03
   1a142:	ef 81       	ldd	r30, Y+7	; 0x07
   1a144:	f8 85       	ldd	r31, Y+8	; 0x08
   1a146:	44 89       	ldd	r20, Z+20	; 0x14
   1a148:	55 89       	ldd	r21, Z+21	; 0x15
   1a14a:	66 89       	ldd	r22, Z+22	; 0x16
   1a14c:	77 89       	ldd	r23, Z+23	; 0x17
   1a14e:	48 0f       	add	r20, r24
   1a150:	59 1f       	adc	r21, r25
   1a152:	6a 1f       	adc	r22, r26
   1a154:	7b 1f       	adc	r23, r27
   1a156:	44 8b       	std	Z+20, r20	; 0x14
   1a158:	55 8b       	std	Z+21, r21	; 0x15
   1a15a:	66 8b       	std	Z+22, r22	; 0x16
   1a15c:	77 8b       	std	Z+23, r23	; 0x17
   1a15e:	40 8d       	ldd	r20, Z+24	; 0x18
   1a160:	51 8d       	ldd	r21, Z+25	; 0x19
   1a162:	62 8d       	ldd	r22, Z+26	; 0x1a
   1a164:	73 8d       	ldd	r23, Z+27	; 0x1b
   1a166:	48 1b       	sub	r20, r24
   1a168:	59 0b       	sbc	r21, r25
   1a16a:	6a 0b       	sbc	r22, r26
   1a16c:	7b 0b       	sbc	r23, r27
   1a16e:	40 8f       	std	Z+24, r20	; 0x18
   1a170:	51 8f       	std	Z+25, r21	; 0x19
   1a172:	62 8f       	std	Z+26, r22	; 0x1a
   1a174:	73 8f       	std	Z+27, r23	; 0x1b
   1a176:	24 8d       	ldd	r18, Z+28	; 0x1c
   1a178:	35 8d       	ldd	r19, Z+29	; 0x1d
   1a17a:	2f 5f       	subi	r18, 0xFF	; 255
   1a17c:	3f 4f       	sbci	r19, 0xFF	; 255
   1a17e:	35 8f       	std	Z+29, r19	; 0x1d
   1a180:	24 8f       	std	Z+28, r18	; 0x1c
   1a182:	f5 01       	movw	r30, r10
   1a184:	40 81       	ld	r20, Z
   1a186:	51 81       	ldd	r21, Z+1	; 0x01
   1a188:	62 81       	ldd	r22, Z+2	; 0x02
   1a18a:	73 81       	ldd	r23, Z+3	; 0x03
   1a18c:	1c 01       	movw	r2, r24
   1a18e:	2d 01       	movw	r4, r26
   1a190:	24 0e       	add	r2, r20
   1a192:	35 1e       	adc	r3, r21
   1a194:	46 1e       	adc	r4, r22
   1a196:	57 1e       	adc	r5, r23
   1a198:	0f ef       	ldi	r16, 0xFF	; 255
   1a19a:	1f ef       	ldi	r17, 0xFF	; 255
   1a19c:	a6 cf       	rjmp	.-180    	; 0x1a0ea <lif_updatefree+0x118>
   1a19e:	f3 a2       	std	Z+35, r15	; 0x23
   1a1a0:	e2 a2       	std	Z+34, r14	; 0x22
   1a1a2:	8f ef       	ldi	r24, 0xFF	; 255
   1a1a4:	9f ef       	ldi	r25, 0xFF	; 255
   1a1a6:	ef 81       	ldd	r30, Y+7	; 0x07
   1a1a8:	f8 85       	ldd	r31, Y+8	; 0x08
   1a1aa:	91 a3       	std	Z+33, r25	; 0x21
   1a1ac:	80 a3       	std	Z+32, r24	; 0x20
   1a1ae:	8f 81       	ldd	r24, Y+7	; 0x07
   1a1b0:	98 85       	ldd	r25, Y+8	; 0x08
   1a1b2:	28 96       	adiw	r28, 0x08	; 8
   1a1b4:	0f b6       	in	r0, 0x3f	; 63
   1a1b6:	f8 94       	cli
   1a1b8:	de bf       	out	0x3e, r29	; 62
   1a1ba:	0f be       	out	0x3f, r0	; 63
   1a1bc:	cd bf       	out	0x3d, r28	; 61
   1a1be:	df 91       	pop	r29
   1a1c0:	cf 91       	pop	r28
   1a1c2:	1f 91       	pop	r17
   1a1c4:	0f 91       	pop	r16
   1a1c6:	ff 90       	pop	r15
   1a1c8:	ef 90       	pop	r14
   1a1ca:	df 90       	pop	r13
   1a1cc:	cf 90       	pop	r12
   1a1ce:	bf 90       	pop	r11
   1a1d0:	af 90       	pop	r10
   1a1d2:	8f 90       	pop	r8
   1a1d4:	7f 90       	pop	r7
   1a1d6:	6f 90       	pop	r6
   1a1d8:	5f 90       	pop	r5
   1a1da:	4f 90       	pop	r4
   1a1dc:	3f 90       	pop	r3
   1a1de:	2f 90       	pop	r2
   1a1e0:	08 95       	ret

0001a1e2 <lif_create_volume>:
/// @param[in] dirstart:   Directory start sector
/// @param[in] dirsectors: Directory sectors
/// @return pointer to LIF structure
MEMSPACE
lif_t *lif_create_volume(char *imagename, char *liflabel, long dirstart, long dirsectors, long filesectors)
{
   1a1e2:	a6 e1       	ldi	r26, 0x16	; 22
   1a1e4:	b1 e0       	ldi	r27, 0x01	; 1
   1a1e6:	e7 ef       	ldi	r30, 0xF7	; 247
   1a1e8:	f0 ed       	ldi	r31, 0xD0	; 208
   1a1ea:	0c 94 13 e8 	jmp	0x1d026	; 0x1d026 <__prologue_saves__>
   1a1ee:	4c 01       	movw	r8, r24
   1a1f0:	1b 01       	movw	r2, r22
   1a1f2:	29 01       	movw	r4, r18
   1a1f4:	3a 01       	movw	r6, r20
   1a1f6:	cd 5e       	subi	r28, 0xED	; 237
   1a1f8:	de 4f       	sbci	r29, 0xFE	; 254
   1a1fa:	e8 82       	st	Y, r14
   1a1fc:	f9 82       	std	Y+1, r15	; 0x01
   1a1fe:	0a 83       	std	Y+2, r16	; 0x02
   1a200:	1b 83       	std	Y+3, r17	; 0x03
   1a202:	c3 51       	subi	r28, 0x13	; 19
   1a204:	d1 40       	sbci	r29, 0x01	; 1
   1a206:	c5 5f       	subi	r28, 0xF5	; 245
   1a208:	de 4f       	sbci	r29, 0xFE	; 254
   1a20a:	a8 82       	st	Y, r10
   1a20c:	b9 82       	std	Y+1, r11	; 0x01
   1a20e:	ca 82       	std	Y+2, r12	; 0x02
   1a210:	db 82       	std	Y+3, r13	; 0x03
   1a212:	cb 50       	subi	r28, 0x0B	; 11
   1a214:	d1 40       	sbci	r29, 0x01	; 1
    long i;
    long offset;
    long count;
    uint8_t buffer[LIF_SECTOR_SIZE];

    time_t t = time(NULL);
   1a216:	80 e0       	ldi	r24, 0x00	; 0
   1a218:	90 e0       	ldi	r25, 0x00	; 0
   1a21a:	0e 94 db 38 	call	0x71b6	; 0x71b6 <time>
   1a21e:	6b 01       	movw	r12, r22
   1a220:	7c 01       	movw	r14, r24

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
   1a222:	64 e7       	ldi	r22, 0x74	; 116
   1a224:	70 e0       	ldi	r23, 0x00	; 0
   1a226:	80 e0       	ldi	r24, 0x00	; 0
   1a228:	90 e0       	ldi	r25, 0x00	; 0
   1a22a:	0e 94 12 c5 	call	0x18a24	; 0x18a24 <lif_calloc>
   1a22e:	5c 01       	movw	r10, r24
    if(LIF == NULL)
   1a230:	89 2b       	or	r24, r25
   1a232:	09 f4       	brne	.+2      	; 0x1a236 <lif_create_volume+0x54>
   1a234:	f9 c2       	rjmp	.+1522   	; 0x1a828 <lif_create_volume+0x646>
        return(NULL);

	printf("Creating:%s, Label:%10s, Directory Start %ld, Directory Size: %ld, File Sectors:%ld\n",
   1a236:	c2 5f       	subi	r28, 0xF2	; 242
   1a238:	de 4f       	sbci	r29, 0xFE	; 254
   1a23a:	28 81       	ld	r18, Y
   1a23c:	ce 50       	subi	r28, 0x0E	; 14
   1a23e:	d1 40       	sbci	r29, 0x01	; 1
   1a240:	2f 93       	push	r18
   1a242:	c3 5f       	subi	r28, 0xF3	; 243
   1a244:	de 4f       	sbci	r29, 0xFE	; 254
   1a246:	38 81       	ld	r19, Y
   1a248:	cd 50       	subi	r28, 0x0D	; 13
   1a24a:	d1 40       	sbci	r29, 0x01	; 1
   1a24c:	3f 93       	push	r19
   1a24e:	c4 5f       	subi	r28, 0xF4	; 244
   1a250:	de 4f       	sbci	r29, 0xFE	; 254
   1a252:	48 81       	ld	r20, Y
   1a254:	cc 50       	subi	r28, 0x0C	; 12
   1a256:	d1 40       	sbci	r29, 0x01	; 1
   1a258:	4f 93       	push	r20
   1a25a:	c5 5f       	subi	r28, 0xF5	; 245
   1a25c:	de 4f       	sbci	r29, 0xFE	; 254
   1a25e:	58 81       	ld	r21, Y
   1a260:	cb 50       	subi	r28, 0x0B	; 11
   1a262:	d1 40       	sbci	r29, 0x01	; 1
   1a264:	5f 93       	push	r21
   1a266:	ca 5e       	subi	r28, 0xEA	; 234
   1a268:	de 4f       	sbci	r29, 0xFE	; 254
   1a26a:	88 81       	ld	r24, Y
   1a26c:	c6 51       	subi	r28, 0x16	; 22
   1a26e:	d1 40       	sbci	r29, 0x01	; 1
   1a270:	8f 93       	push	r24
   1a272:	cb 5e       	subi	r28, 0xEB	; 235
   1a274:	de 4f       	sbci	r29, 0xFE	; 254
   1a276:	98 81       	ld	r25, Y
   1a278:	c5 51       	subi	r28, 0x15	; 21
   1a27a:	d1 40       	sbci	r29, 0x01	; 1
   1a27c:	9f 93       	push	r25
   1a27e:	cc 5e       	subi	r28, 0xEC	; 236
   1a280:	de 4f       	sbci	r29, 0xFE	; 254
   1a282:	a8 81       	ld	r26, Y
   1a284:	c4 51       	subi	r28, 0x14	; 20
   1a286:	d1 40       	sbci	r29, 0x01	; 1
   1a288:	af 93       	push	r26
   1a28a:	cd 5e       	subi	r28, 0xED	; 237
   1a28c:	de 4f       	sbci	r29, 0xFE	; 254
   1a28e:	b8 81       	ld	r27, Y
   1a290:	c3 51       	subi	r28, 0x13	; 19
   1a292:	d1 40       	sbci	r29, 0x01	; 1
   1a294:	bf 93       	push	r27
   1a296:	7f 92       	push	r7
   1a298:	6f 92       	push	r6
   1a29a:	5f 92       	push	r5
   1a29c:	4f 92       	push	r4
   1a29e:	3f 92       	push	r3
   1a2a0:	2f 92       	push	r2
   1a2a2:	9f 92       	push	r9
   1a2a4:	8f 92       	push	r8
   1a2a6:	8d e1       	ldi	r24, 0x1D	; 29
   1a2a8:	9d e3       	ldi	r25, 0x3D	; 61
   1a2aa:	1f 92       	push	r1
   1a2ac:	9f 93       	push	r25
   1a2ae:	8f 93       	push	r24
   1a2b0:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
		imagename, liflabel, dirstart, dirsectors, filesectors );

    if(debuglevel & 0x400)
   1a2b4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1a2b8:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1a2bc:	0f b6       	in	r0, 0x3f	; 63
   1a2be:	f8 94       	cli
   1a2c0:	de bf       	out	0x3e, r29	; 62
   1a2c2:	0f be       	out	0x3f, r0	; 63
   1a2c4:	cd bf       	out	0x3d, r28	; 61
   1a2c6:	92 ff       	sbrs	r25, 2
   1a2c8:	04 c0       	rjmp	.+8      	; 0x1a2d2 <lif_create_volume+0xf0>
        lif_dump_vol(LIF,"lif_create_volume");
   1a2ca:	61 ee       	ldi	r22, 0xE1	; 225
   1a2cc:	75 e1       	ldi	r23, 0x15	; 21
   1a2ce:	c5 01       	movw	r24, r10
    
    lif_image_clear(LIF);
   1a2d0:	01 d9       	rcall	.-3582   	; 0x194d4 <lif_dump_vol>
   1a2d2:	c5 01       	movw	r24, r10

    // Initialize volume header
    LIF->VOL.LIFid = 0x8000;
   1a2d4:	ea d8       	rcall	.-3628   	; 0x194aa <lif_image_clear>
   1a2d6:	80 e0       	ldi	r24, 0x00	; 0
   1a2d8:	90 e8       	ldi	r25, 0x80	; 128
   1a2da:	d5 01       	movw	r26, r10
   1a2dc:	95 96       	adiw	r26, 0x25	; 37
   1a2de:	9c 93       	st	X, r25
   1a2e0:	8e 93       	st	-X, r24
    lif_fixname(LIF->VOL.Label, liflabel, 6);
   1a2e2:	94 97       	sbiw	r26, 0x24	; 36
   1a2e4:	46 e0       	ldi	r20, 0x06	; 6
   1a2e6:	50 e0       	ldi	r21, 0x00	; 0
   1a2e8:	b1 01       	movw	r22, r2
   1a2ea:	c5 01       	movw	r24, r10
   1a2ec:	86 96       	adiw	r24, 0x26	; 38
   1a2ee:	0e 94 39 c7 	call	0x18e72	; 0x18e72 <lif_fixname>
    LIF->VOL.DirStartSector = dirstart;
   1a2f2:	f5 01       	movw	r30, r10
   1a2f4:	45 a6       	std	Z+45, r4	; 0x2d
   1a2f6:	56 a6       	std	Z+46, r5	; 0x2e
   1a2f8:	67 a6       	std	Z+47, r6	; 0x2f
    LIF->VOL.DirSectors = dirsectors;
   1a2fa:	70 aa       	std	Z+48, r7	; 0x30
   1a2fc:	cd 5e       	subi	r28, 0xED	; 237
   1a2fe:	de 4f       	sbci	r29, 0xFE	; 254
   1a300:	28 81       	ld	r18, Y
   1a302:	39 81       	ldd	r19, Y+1	; 0x01
   1a304:	4a 81       	ldd	r20, Y+2	; 0x02
   1a306:	5b 81       	ldd	r21, Y+3	; 0x03
   1a308:	c3 51       	subi	r28, 0x13	; 19
   1a30a:	d1 40       	sbci	r29, 0x01	; 1
   1a30c:	25 ab       	std	Z+53, r18	; 0x35
   1a30e:	36 ab       	std	Z+54, r19	; 0x36
   1a310:	47 ab       	std	Z+55, r20	; 0x37
    LIF->VOL.System3000LIFid = 0x1000;
   1a312:	50 af       	std	Z+56, r21	; 0x38
   1a314:	80 e0       	ldi	r24, 0x00	; 0
   1a316:	90 e1       	ldi	r25, 0x10	; 16
   1a318:	92 ab       	std	Z+50, r25	; 0x32
    LIF->VOL.tracks_per_side = 0;
   1a31a:	81 ab       	std	Z+49, r24	; 0x31
   1a31c:	fd 96       	adiw	r30, 0x3d	; 61
   1a31e:	10 82       	st	Z, r1
   1a320:	11 82       	std	Z+1, r1	; 0x01
   1a322:	12 82       	std	Z+2, r1	; 0x02
    LIF->VOL.sides = 0;
   1a324:	13 82       	std	Z+3, r1	; 0x03
   1a326:	34 96       	adiw	r30, 0x04	; 4
   1a328:	10 82       	st	Z, r1
   1a32a:	11 82       	std	Z+1, r1	; 0x01
   1a32c:	12 82       	std	Z+2, r1	; 0x02
    LIF->VOL.sectors_per_track = 0;
   1a32e:	13 82       	std	Z+3, r1	; 0x03
   1a330:	34 96       	adiw	r30, 0x04	; 4
   1a332:	10 82       	st	Z, r1
   1a334:	11 82       	std	Z+1, r1	; 0x01
   1a336:	12 82       	std	Z+2, r1	; 0x02
    ///@brief 0 causes time to return the current date

    lif_time2lifbcd(t, LIF->VOL.date);
   1a338:	13 82       	std	Z+3, r1	; 0x03
   1a33a:	a5 01       	movw	r20, r10
   1a33c:	47 5b       	subi	r20, 0xB7	; 183
   1a33e:	5f 4f       	sbci	r21, 0xFF	; 255
   1a340:	c7 01       	movw	r24, r14
   1a342:	b6 01       	movw	r22, r12
   1a344:	0e 94 7e c9 	call	0x192fc	; 0x192fc <lif_time2lifbcd>

    // update LIF headers
    LIF->name = lif_stralloc(imagename);
   1a348:	c4 01       	movw	r24, r8
   1a34a:	0e 94 4e c5 	call	0x18a9c	; 0x18a9c <lif_stralloc>
   1a34e:	f5 01       	movw	r30, r10
   1a350:	91 83       	std	Z+1, r25	; 0x01
    if(LIF->name == NULL)
   1a352:	80 83       	st	Z, r24
   1a354:	89 2b       	or	r24, r25
   1a356:	09 f4       	brne	.+2      	; 0x1a35a <lif_create_volume+0x178>
        lif_close_volume(LIF);
        return(NULL);
    }

    // Initilize all LIF headers
    LIF->filesectors = filesectors;
   1a358:	5c c2       	rjmp	.+1208   	; 0x1a812 <lif_create_volume+0x630>
   1a35a:	c5 5f       	subi	r28, 0xF5	; 245
   1a35c:	de 4f       	sbci	r29, 0xFE	; 254
   1a35e:	28 81       	ld	r18, Y
   1a360:	39 81       	ldd	r19, Y+1	; 0x01
   1a362:	4a 81       	ldd	r20, Y+2	; 0x02
   1a364:	5b 81       	ldd	r21, Y+3	; 0x03
   1a366:	cb 50       	subi	r28, 0x0B	; 11
   1a368:	d1 40       	sbci	r29, 0x01	; 1
   1a36a:	20 8b       	std	Z+16, r18	; 0x10
   1a36c:	31 8b       	std	Z+17, r19	; 0x11
   1a36e:	42 8b       	std	Z+18, r20	; 0x12
    LIF->filestart = dirstart + dirsectors;
   1a370:	53 8b       	std	Z+19, r21	; 0x13
   1a372:	cd 5e       	subi	r28, 0xED	; 237
   1a374:	de 4f       	sbci	r29, 0xFE	; 254
   1a376:	88 81       	ld	r24, Y
   1a378:	99 81       	ldd	r25, Y+1	; 0x01
   1a37a:	aa 81       	ldd	r26, Y+2	; 0x02
   1a37c:	bb 81       	ldd	r27, Y+3	; 0x03
   1a37e:	c3 51       	subi	r28, 0x13	; 19
   1a380:	d1 40       	sbci	r29, 0x01	; 1
   1a382:	84 0d       	add	r24, r4
   1a384:	95 1d       	adc	r25, r5
   1a386:	a6 1d       	adc	r26, r6
   1a388:	b7 1d       	adc	r27, r7
   1a38a:	f5 01       	movw	r30, r10
   1a38c:	84 87       	std	Z+12, r24	; 0x0c
   1a38e:	95 87       	std	Z+13, r25	; 0x0d
   1a390:	a6 87       	std	Z+14, r26	; 0x0e
    LIF->sectors = (LIF->filestart+LIF->filesectors);
   1a392:	b7 87       	std	Z+15, r27	; 0x0f
   1a394:	82 0f       	add	r24, r18
   1a396:	93 1f       	adc	r25, r19
   1a398:	a4 1f       	adc	r26, r20
   1a39a:	b5 1f       	adc	r27, r21
   1a39c:	84 83       	std	Z+4, r24	; 0x04
   1a39e:	95 83       	std	Z+5, r25	; 0x05
   1a3a0:	a6 83       	std	Z+6, r26	; 0x06
    LIF->imagebytes = LIF->sectors * (long)LIF_SECTOR_SIZE;
   1a3a2:	b7 83       	std	Z+7, r27	; 0x07
   1a3a4:	ba 2f       	mov	r27, r26
   1a3a6:	a9 2f       	mov	r26, r25
   1a3a8:	98 2f       	mov	r25, r24
   1a3aa:	88 27       	eor	r24, r24
   1a3ac:	80 87       	std	Z+8, r24	; 0x08
   1a3ae:	91 87       	std	Z+9, r25	; 0x09
   1a3b0:	a2 87       	std	Z+10, r26	; 0x0a
    LIF->freesectors = LIF->filesectors;
   1a3b2:	b3 87       	std	Z+11, r27	; 0x0b
   1a3b4:	20 8f       	std	Z+24, r18	; 0x18
   1a3b6:	31 8f       	std	Z+25, r19	; 0x19
   1a3b8:	42 8f       	std	Z+26, r20	; 0x1a
    LIF->usedsectors = 0;
   1a3ba:	53 8f       	std	Z+27, r21	; 0x1b
   1a3bc:	14 8a       	std	Z+20, r1	; 0x14
   1a3be:	15 8a       	std	Z+21, r1	; 0x15
   1a3c0:	16 8a       	std	Z+22, r1	; 0x16
    LIF->files = 0;
   1a3c2:	17 8a       	std	Z+23, r1	; 0x17
   1a3c4:	15 8e       	std	Z+29, r1	; 0x1d
    LIF->purged = 0;
   1a3c6:	14 8e       	std	Z+28, r1	; 0x1c
   1a3c8:	17 8e       	std	Z+31, r1	; 0x1f
    LIF->dirindex = 0;
   1a3ca:	16 8e       	std	Z+30, r1	; 0x1e
   1a3cc:	11 a2       	std	Z+33, r1	; 0x21
    LIF->EOFindex = 0;
   1a3ce:	10 a2       	std	Z+32, r1	; 0x20
   1a3d0:	13 a2       	std	Z+35, r1	; 0x23

    memset(buffer,0,LIF_SECTOR_SIZE);
   1a3d2:	12 a2       	std	Z+34, r1	; 0x22
   1a3d4:	c1 2c       	mov	r12, r1
   1a3d6:	dd 24       	eor	r13, r13
   1a3d8:	d3 94       	inc	r13
   1a3da:	9e 01       	movw	r18, r28
   1a3dc:	2f 5f       	subi	r18, 0xFF	; 255
   1a3de:	3f 4f       	sbci	r19, 0xFF	; 255
   1a3e0:	79 01       	movw	r14, r18
   1a3e2:	d9 01       	movw	r26, r18
   1a3e4:	f6 01       	movw	r30, r12
   1a3e6:	1d 92       	st	X+, r1
   1a3e8:	31 97       	sbiw	r30, 0x01	; 1

    lif_vol2str(LIF,buffer);
   1a3ea:	e9 f7       	brne	.-6      	; 0x1a3e6 <lif_create_volume+0x204>
   1a3ec:	b9 01       	movw	r22, r18
   1a3ee:	c5 01       	movw	r24, r10
   1a3f0:	0e 94 76 c7 	call	0x18eec	; 0x18eec <lif_vol2str>

    // Write Volume header
    LIF->fp = lif_open(LIF->name,"wb+");
   1a3f4:	68 e8       	ldi	r22, 0x88	; 136
   1a3f6:	78 e0       	ldi	r23, 0x08	; 8
   1a3f8:	d5 01       	movw	r26, r10
   1a3fa:	8d 91       	ld	r24, X+
   1a3fc:	9c 91       	ld	r25, X
   1a3fe:	0e 94 6d c5 	call	0x18ada	; 0x18ada <lif_open>
   1a402:	f5 01       	movw	r30, r10
   1a404:	93 83       	std	Z+3, r25	; 0x03
    if(LIF->fp == NULL)
   1a406:	82 83       	std	Z+2, r24	; 0x02
   1a408:	89 2b       	or	r24, r25
   1a40a:	09 f4       	brne	.+2      	; 0x1a40e <lif_create_volume+0x22c>
    }

    offset = 0;
    count = 0;

    size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   1a40c:	02 c2       	rjmp	.+1028   	; 0x1a812 <lif_create_volume+0x630>
   1a40e:	00 e0       	ldi	r16, 0x00	; 0
   1a410:	11 e0       	ldi	r17, 0x01	; 1
   1a412:	20 e0       	ldi	r18, 0x00	; 0
   1a414:	30 e0       	ldi	r19, 0x00	; 0
   1a416:	a9 01       	movw	r20, r18
   1a418:	b7 01       	movw	r22, r14
   1a41a:	c5 01       	movw	r24, r10
   1a41c:	0e 94 4c c6 	call	0x18c98	; 0x18c98 <lif_write>
   1a420:	9c 01       	movw	r18, r24
   1a422:	99 0f       	add	r25, r25
   1a424:	44 0b       	sbc	r20, r20
   1a426:	55 0b       	sbc	r21, r21
   1a428:	c9 5f       	subi	r28, 0xF9	; 249
   1a42a:	de 4f       	sbci	r29, 0xFE	; 254
   1a42c:	28 83       	st	Y, r18
   1a42e:	39 83       	std	Y+1, r19	; 0x01
   1a430:	4a 83       	std	Y+2, r20	; 0x02
   1a432:	5b 83       	std	Y+3, r21	; 0x03
   1a434:	c7 50       	subi	r28, 0x07	; 7

    if(size < LIF_SECTOR_SIZE)
   1a436:	d1 40       	sbci	r29, 0x01	; 1
   1a438:	2f 3f       	cpi	r18, 0xFF	; 255
   1a43a:	31 05       	cpc	r19, r1
   1a43c:	41 05       	cpc	r20, r1
   1a43e:	51 05       	cpc	r21, r1
   1a440:	09 f0       	breq	.+2      	; 0x1a444 <lif_create_volume+0x262>
   1a442:	0c f4       	brge	.+2      	; 0x1a446 <lif_create_volume+0x264>
    }
    offset += size;
    ++count;


    memset(buffer,0,LIF_SECTOR_SIZE);
   1a444:	e6 c1       	rjmp	.+972    	; 0x1a812 <lif_create_volume+0x630>
   1a446:	d7 01       	movw	r26, r14
   1a448:	f6 01       	movw	r30, r12
   1a44a:	1d 92       	st	X+, r1
   1a44c:	31 97       	sbiw	r30, 0x01	; 1

    // Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   1a44e:	e9 f7       	brne	.-6      	; 0x1a44a <lif_create_volume+0x268>
   1a450:	21 e0       	ldi	r18, 0x01	; 1
   1a452:	30 e0       	ldi	r19, 0x00	; 0
   1a454:	40 e0       	ldi	r20, 0x00	; 0
   1a456:	50 e0       	ldi	r21, 0x00	; 0
   1a458:	cd 5f       	subi	r28, 0xFD	; 253
   1a45a:	de 4f       	sbci	r29, 0xFE	; 254
   1a45c:	28 83       	st	Y, r18
   1a45e:	39 83       	std	Y+1, r19	; 0x01
   1a460:	4a 83       	std	Y+2, r20	; 0x02
   1a462:	5b 83       	std	Y+3, r21	; 0x03
   1a464:	c3 50       	subi	r28, 0x03	; 3
   1a466:	d1 40       	sbci	r29, 0x01	; 1
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
            printf("Wrote: %ld\r", count);
   1a468:	47 01       	movw	r8, r14
   1a46a:	81 e1       	ldi	r24, 0x11	; 17
   1a46c:	9d e3       	ldi	r25, 0x3D	; 61


    memset(buffer,0,LIF_SECTOR_SIZE);

    // Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   1a46e:	6c 01       	movw	r12, r24
   1a470:	cd 5f       	subi	r28, 0xFD	; 253
   1a472:	de 4f       	sbci	r29, 0xFE	; 254
   1a474:	88 81       	ld	r24, Y
   1a476:	99 81       	ldd	r25, Y+1	; 0x01
   1a478:	aa 81       	ldd	r26, Y+2	; 0x02
   1a47a:	bb 81       	ldd	r27, Y+3	; 0x03
   1a47c:	c3 50       	subi	r28, 0x03	; 3
   1a47e:	d1 40       	sbci	r29, 0x01	; 1
   1a480:	84 15       	cp	r24, r4
   1a482:	95 05       	cpc	r25, r5
   1a484:	a6 05       	cpc	r26, r6
   1a486:	b7 05       	cpc	r27, r7
   1a488:	0c f0       	brlt	.+2      	; 0x1a48c <lif_create_volume+0x2aa>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   1a48a:	64 c0       	rjmp	.+200    	; 0x1a554 <lif_create_volume+0x372>
   1a48c:	00 e0       	ldi	r16, 0x00	; 0
   1a48e:	11 e0       	ldi	r17, 0x01	; 1
   1a490:	c9 5f       	subi	r28, 0xF9	; 249
   1a492:	de 4f       	sbci	r29, 0xFE	; 254
   1a494:	28 81       	ld	r18, Y
   1a496:	39 81       	ldd	r19, Y+1	; 0x01
   1a498:	4a 81       	ldd	r20, Y+2	; 0x02
   1a49a:	5b 81       	ldd	r21, Y+3	; 0x03
   1a49c:	c7 50       	subi	r28, 0x07	; 7
   1a49e:	d1 40       	sbci	r29, 0x01	; 1
   1a4a0:	b4 01       	movw	r22, r8
   1a4a2:	c5 01       	movw	r24, r10
   1a4a4:	0e 94 4c c6 	call	0x18c98	; 0x18c98 <lif_write>
   1a4a8:	09 2e       	mov	r0, r25
   1a4aa:	00 0c       	add	r0, r0
   1a4ac:	aa 0b       	sbc	r26, r26
        if(size < LIF_SECTOR_SIZE)
   1a4ae:	bb 0b       	sbc	r27, r27
   1a4b0:	8f 3f       	cpi	r24, 0xFF	; 255
   1a4b2:	91 05       	cpc	r25, r1
   1a4b4:	a1 05       	cpc	r26, r1
   1a4b6:	b1 05       	cpc	r27, r1
   1a4b8:	09 f0       	breq	.+2      	; 0x1a4bc <lif_create_volume+0x2da>
   1a4ba:	0c f4       	brge	.+2      	; 0x1a4be <lif_create_volume+0x2dc>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   1a4bc:	aa c1       	rjmp	.+852    	; 0x1a812 <lif_create_volume+0x630>
   1a4be:	c9 5f       	subi	r28, 0xF9	; 249
   1a4c0:	de 4f       	sbci	r29, 0xFE	; 254
   1a4c2:	28 81       	ld	r18, Y
   1a4c4:	39 81       	ldd	r19, Y+1	; 0x01
   1a4c6:	4a 81       	ldd	r20, Y+2	; 0x02
   1a4c8:	5b 81       	ldd	r21, Y+3	; 0x03
   1a4ca:	c7 50       	subi	r28, 0x07	; 7
   1a4cc:	d1 40       	sbci	r29, 0x01	; 1
   1a4ce:	28 0f       	add	r18, r24
   1a4d0:	39 1f       	adc	r19, r25
   1a4d2:	4a 1f       	adc	r20, r26
   1a4d4:	5b 1f       	adc	r21, r27
   1a4d6:	c9 5f       	subi	r28, 0xF9	; 249
   1a4d8:	de 4f       	sbci	r29, 0xFE	; 254
   1a4da:	28 83       	st	Y, r18
   1a4dc:	39 83       	std	Y+1, r19	; 0x01
   1a4de:	4a 83       	std	Y+2, r20	; 0x02
   1a4e0:	5b 83       	std	Y+3, r21	; 0x03
   1a4e2:	c7 50       	subi	r28, 0x07	; 7
            printf("Wrote: %ld\r", count);
   1a4e4:	d1 40       	sbci	r29, 0x01	; 1
   1a4e6:	ca 5f       	subi	r28, 0xFA	; 250
   1a4e8:	de 4f       	sbci	r29, 0xFE	; 254
   1a4ea:	38 81       	ld	r19, Y
   1a4ec:	c6 50       	subi	r28, 0x06	; 6
   1a4ee:	d1 40       	sbci	r29, 0x01	; 1
   1a4f0:	3f 93       	push	r19
   1a4f2:	cb 5f       	subi	r28, 0xFB	; 251
   1a4f4:	de 4f       	sbci	r29, 0xFE	; 254
   1a4f6:	48 81       	ld	r20, Y
   1a4f8:	c5 50       	subi	r28, 0x05	; 5
   1a4fa:	d1 40       	sbci	r29, 0x01	; 1
   1a4fc:	4f 93       	push	r20
   1a4fe:	cc 5f       	subi	r28, 0xFC	; 252
   1a500:	de 4f       	sbci	r29, 0xFE	; 254
   1a502:	58 81       	ld	r21, Y
   1a504:	c4 50       	subi	r28, 0x04	; 4
   1a506:	d1 40       	sbci	r29, 0x01	; 1
   1a508:	5f 93       	push	r21
   1a50a:	cd 5f       	subi	r28, 0xFD	; 253
   1a50c:	de 4f       	sbci	r29, 0xFE	; 254
   1a50e:	88 81       	ld	r24, Y
   1a510:	c3 50       	subi	r28, 0x03	; 3
   1a512:	d1 40       	sbci	r29, 0x01	; 1
   1a514:	8f 93       	push	r24
   1a516:	1f 92       	push	r1
   1a518:	df 92       	push	r13
   1a51a:	cf 92       	push	r12
   1a51c:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>


    memset(buffer,0,LIF_SECTOR_SIZE);

    // Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   1a520:	cd 5f       	subi	r28, 0xFD	; 253
   1a522:	de 4f       	sbci	r29, 0xFE	; 254
   1a524:	28 81       	ld	r18, Y
   1a526:	39 81       	ldd	r19, Y+1	; 0x01
   1a528:	4a 81       	ldd	r20, Y+2	; 0x02
   1a52a:	5b 81       	ldd	r21, Y+3	; 0x03
   1a52c:	c3 50       	subi	r28, 0x03	; 3
   1a52e:	d1 40       	sbci	r29, 0x01	; 1
   1a530:	2f 5f       	subi	r18, 0xFF	; 255
   1a532:	3f 4f       	sbci	r19, 0xFF	; 255
   1a534:	4f 4f       	sbci	r20, 0xFF	; 255
   1a536:	5f 4f       	sbci	r21, 0xFF	; 255
   1a538:	cd 5f       	subi	r28, 0xFD	; 253
   1a53a:	de 4f       	sbci	r29, 0xFE	; 254
   1a53c:	28 83       	st	Y, r18
   1a53e:	39 83       	std	Y+1, r19	; 0x01
   1a540:	4a 83       	std	Y+2, r20	; 0x02
   1a542:	5b 83       	std	Y+3, r21	; 0x03
   1a544:	c3 50       	subi	r28, 0x03	; 3
   1a546:	d1 40       	sbci	r29, 0x01	; 1
   1a548:	0f b6       	in	r0, 0x3f	; 63
   1a54a:	f8 94       	cli
   1a54c:	de bf       	out	0x3e, r29	; 62
   1a54e:	0f be       	out	0x3f, r0	; 63
   1a550:	cd bf       	out	0x3d, r28	; 61
            printf("Wrote: %ld\r", count);
        ++count;
    }

    // Write Directory sectors
    lif_dir_clear(LIF);
   1a552:	8e cf       	rjmp	.-228    	; 0x1a470 <lif_create_volume+0x28e>
   1a554:	c5 01       	movw	r24, r10
   1a556:	0e 94 5b ca 	call	0x194b6	; 0x194b6 <lif_dir_clear>
    LIF->DIR.FileType = 0xffff;
   1a55a:	8f ef       	ldi	r24, 0xFF	; 255
   1a55c:	9f ef       	ldi	r25, 0xFF	; 255
   1a55e:	f5 01       	movw	r30, r10
   1a560:	e6 5a       	subi	r30, 0xA6	; 166
   1a562:	ff 4f       	sbci	r31, 0xFF	; 255
   1a564:	91 83       	std	Z+1, r25	; 0x01
   1a566:	80 83       	st	Z, r24
   1a568:	74 01       	movw	r14, r8
   1a56a:	6e 01       	movw	r12, r28
   1a56c:	91 e0       	ldi	r25, 0x01	; 1
   1a56e:	c9 0e       	add	r12, r25

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);
   1a570:	d9 1e       	adc	r13, r25
   1a572:	b7 01       	movw	r22, r14
   1a574:	c5 01       	movw	r24, r10
   1a576:	0e 94 96 c8 	call	0x1912c	; 0x1912c <lif_dir2str>
   1a57a:	a0 e2       	ldi	r26, 0x20	; 32
   1a57c:	ea 0e       	add	r14, r26

    // Write Directory sectors
    lif_dir_clear(LIF);
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
   1a57e:	f1 1c       	adc	r15, r1
   1a580:	ce 14       	cp	r12, r14
   1a582:	df 04       	cpc	r13, r15
   1a584:	b1 f7       	brne	.-20     	; 0x1a572 <lif_create_volume+0x390>
   1a586:	c1 2c       	mov	r12, r1
   1a588:	d1 2c       	mov	r13, r1
   1a58a:	76 01       	movw	r14, r12
   1a58c:	fe 01       	movw	r30, r28
   1a58e:	31 96       	adiw	r30, 0x01	; 1
   1a590:	cf 5f       	subi	r28, 0xFF	; 255
   1a592:	de 4f       	sbci	r29, 0xFE	; 254
   1a594:	f9 83       	std	Y+1, r31	; 0x01
   1a596:	e8 83       	st	Y, r30
   1a598:	c1 50       	subi	r28, 0x01	; 1
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
   1a59a:	d1 40       	sbci	r29, 0x01	; 1
   1a59c:	84 e6       	ldi	r24, 0x64	; 100
   1a59e:	28 2e       	mov	r2, r24
   1a5a0:	31 2c       	mov	r3, r1
   1a5a2:	41 2c       	mov	r4, r1
            printf("Wrote: %ld\r", count);
   1a5a4:	51 2c       	mov	r5, r1
   1a5a6:	85 e0       	ldi	r24, 0x05	; 5
   1a5a8:	9d e3       	ldi	r25, 0x3D	; 61
   1a5aa:	3c 01       	movw	r6, r24
   1a5ac:	81 2c       	mov	r8, r1
   1a5ae:	cd 5f       	subi	r28, 0xFD	; 253
   1a5b0:	de 4f       	sbci	r29, 0xFE	; 254
   1a5b2:	28 81       	ld	r18, Y
   1a5b4:	39 81       	ldd	r19, Y+1	; 0x01
   1a5b6:	4a 81       	ldd	r20, Y+2	; 0x02
   1a5b8:	5b 81       	ldd	r21, Y+3	; 0x03
   1a5ba:	c3 50       	subi	r28, 0x03	; 3
   1a5bc:	d1 40       	sbci	r29, 0x01	; 1
   1a5be:	2c 0d       	add	r18, r12
   1a5c0:	3d 1d       	adc	r19, r13
   1a5c2:	4e 1d       	adc	r20, r14
   1a5c4:	5f 1d       	adc	r21, r15
   1a5c6:	c1 5f       	subi	r28, 0xF1	; 241
   1a5c8:	de 4f       	sbci	r29, 0xFE	; 254
   1a5ca:	28 83       	st	Y, r18
   1a5cc:	39 83       	std	Y+1, r19	; 0x01
   1a5ce:	4a 83       	std	Y+2, r20	; 0x02
   1a5d0:	5b 83       	std	Y+3, r21	; 0x03
   1a5d2:	cf 50       	subi	r28, 0x0F	; 15
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   1a5d4:	d1 40       	sbci	r29, 0x01	; 1
   1a5d6:	cd 5e       	subi	r28, 0xED	; 237
   1a5d8:	de 4f       	sbci	r29, 0xFE	; 254
   1a5da:	88 81       	ld	r24, Y
   1a5dc:	99 81       	ldd	r25, Y+1	; 0x01
   1a5de:	aa 81       	ldd	r26, Y+2	; 0x02
   1a5e0:	bb 81       	ldd	r27, Y+3	; 0x03
   1a5e2:	c3 51       	subi	r28, 0x13	; 19
   1a5e4:	d1 40       	sbci	r29, 0x01	; 1
   1a5e6:	c8 16       	cp	r12, r24
   1a5e8:	d9 06       	cpc	r13, r25
   1a5ea:	ea 06       	cpc	r14, r26
   1a5ec:	fb 06       	cpc	r15, r27
   1a5ee:	0c f0       	brlt	.+2      	; 0x1a5f2 <lif_create_volume+0x410>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   1a5f0:	67 c0       	rjmp	.+206    	; 0x1a6c0 <lif_create_volume+0x4de>
   1a5f2:	00 e0       	ldi	r16, 0x00	; 0
   1a5f4:	11 e0       	ldi	r17, 0x01	; 1
   1a5f6:	c9 5f       	subi	r28, 0xF9	; 249
   1a5f8:	de 4f       	sbci	r29, 0xFE	; 254
   1a5fa:	28 81       	ld	r18, Y
   1a5fc:	39 81       	ldd	r19, Y+1	; 0x01
   1a5fe:	4a 81       	ldd	r20, Y+2	; 0x02
   1a600:	5b 81       	ldd	r21, Y+3	; 0x03
   1a602:	c7 50       	subi	r28, 0x07	; 7
   1a604:	d1 40       	sbci	r29, 0x01	; 1
   1a606:	be 01       	movw	r22, r28
   1a608:	6f 5f       	subi	r22, 0xFF	; 255
   1a60a:	7f 4f       	sbci	r23, 0xFF	; 255
   1a60c:	c5 01       	movw	r24, r10
   1a60e:	0e 94 4c c6 	call	0x18c98	; 0x18c98 <lif_write>
   1a612:	09 2e       	mov	r0, r25
   1a614:	00 0c       	add	r0, r0
   1a616:	aa 0b       	sbc	r26, r26
        if(size < LIF_SECTOR_SIZE)
   1a618:	bb 0b       	sbc	r27, r27
   1a61a:	8f 3f       	cpi	r24, 0xFF	; 255
   1a61c:	91 05       	cpc	r25, r1
   1a61e:	a1 05       	cpc	r26, r1
   1a620:	b1 05       	cpc	r27, r1
   1a622:	09 f0       	breq	.+2      	; 0x1a626 <lif_create_volume+0x444>
   1a624:	0c f4       	brge	.+2      	; 0x1a628 <lif_create_volume+0x446>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   1a626:	f5 c0       	rjmp	.+490    	; 0x1a812 <lif_create_volume+0x630>
   1a628:	c9 5f       	subi	r28, 0xF9	; 249
   1a62a:	de 4f       	sbci	r29, 0xFE	; 254
   1a62c:	28 81       	ld	r18, Y
   1a62e:	39 81       	ldd	r19, Y+1	; 0x01
   1a630:	4a 81       	ldd	r20, Y+2	; 0x02
   1a632:	5b 81       	ldd	r21, Y+3	; 0x03
   1a634:	c7 50       	subi	r28, 0x07	; 7
   1a636:	d1 40       	sbci	r29, 0x01	; 1
   1a638:	28 0f       	add	r18, r24
   1a63a:	39 1f       	adc	r19, r25
   1a63c:	4a 1f       	adc	r20, r26
   1a63e:	5b 1f       	adc	r21, r27
   1a640:	c9 5f       	subi	r28, 0xF9	; 249
   1a642:	de 4f       	sbci	r29, 0xFE	; 254
   1a644:	28 83       	st	Y, r18
   1a646:	39 83       	std	Y+1, r19	; 0x01
   1a648:	4a 83       	std	Y+2, r20	; 0x02
   1a64a:	5b 83       	std	Y+3, r21	; 0x03
   1a64c:	c7 50       	subi	r28, 0x07	; 7
        if((count % 100) == 0)
   1a64e:	d1 40       	sbci	r29, 0x01	; 1
   1a650:	c1 5f       	subi	r28, 0xF1	; 241
   1a652:	de 4f       	sbci	r29, 0xFE	; 254
   1a654:	68 81       	ld	r22, Y
   1a656:	79 81       	ldd	r23, Y+1	; 0x01
   1a658:	8a 81       	ldd	r24, Y+2	; 0x02
   1a65a:	9b 81       	ldd	r25, Y+3	; 0x03
   1a65c:	cf 50       	subi	r28, 0x0F	; 15
   1a65e:	d1 40       	sbci	r29, 0x01	; 1
   1a660:	a2 01       	movw	r20, r4
   1a662:	91 01       	movw	r18, r2
   1a664:	0e 94 b3 e7 	call	0x1cf66	; 0x1cf66 <__divmodsi4>
   1a668:	67 2b       	or	r22, r23
   1a66a:	68 2b       	or	r22, r24
   1a66c:	69 2b       	or	r22, r25
            printf("Wrote: %ld\r", count);
   1a66e:	11 f5       	brne	.+68     	; 0x1a6b4 <lif_create_volume+0x4d2>
   1a670:	ce 5e       	subi	r28, 0xEE	; 238
   1a672:	de 4f       	sbci	r29, 0xFE	; 254
   1a674:	38 81       	ld	r19, Y
   1a676:	c2 51       	subi	r28, 0x12	; 18
   1a678:	d1 40       	sbci	r29, 0x01	; 1
   1a67a:	3f 93       	push	r19
   1a67c:	cf 5e       	subi	r28, 0xEF	; 239
   1a67e:	de 4f       	sbci	r29, 0xFE	; 254
   1a680:	48 81       	ld	r20, Y
   1a682:	c1 51       	subi	r28, 0x11	; 17
   1a684:	d1 40       	sbci	r29, 0x01	; 1
   1a686:	4f 93       	push	r20
   1a688:	c0 5f       	subi	r28, 0xF0	; 240
   1a68a:	de 4f       	sbci	r29, 0xFE	; 254
   1a68c:	58 81       	ld	r21, Y
   1a68e:	c0 51       	subi	r28, 0x10	; 16
   1a690:	d1 40       	sbci	r29, 0x01	; 1
   1a692:	5f 93       	push	r21
   1a694:	c1 5f       	subi	r28, 0xF1	; 241
   1a696:	de 4f       	sbci	r29, 0xFE	; 254
   1a698:	88 81       	ld	r24, Y
   1a69a:	cf 50       	subi	r28, 0x0F	; 15
   1a69c:	d1 40       	sbci	r29, 0x01	; 1
   1a69e:	8f 93       	push	r24
   1a6a0:	1f 92       	push	r1
   1a6a2:	7f 92       	push	r7
   1a6a4:	6f 92       	push	r6
   1a6a6:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1a6aa:	0f b6       	in	r0, 0x3f	; 63
   1a6ac:	f8 94       	cli
   1a6ae:	de bf       	out	0x3e, r29	; 62
   1a6b0:	0f be       	out	0x3f, r0	; 63
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   1a6b2:	cd bf       	out	0x3d, r28	; 61
   1a6b4:	bf ef       	ldi	r27, 0xFF	; 255
   1a6b6:	cb 1a       	sub	r12, r27
   1a6b8:	db 0a       	sbc	r13, r27
   1a6ba:	eb 0a       	sbc	r14, r27
   1a6bc:	fb 0a       	sbc	r15, r27
            printf("Wrote: %ld\r", count);
        ++count;
    }

    // File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
   1a6be:	77 cf       	rjmp	.-274    	; 0x1a5ae <lif_create_volume+0x3cc>
   1a6c0:	80 e0       	ldi	r24, 0x00	; 0
   1a6c2:	91 e0       	ldi	r25, 0x01	; 1
   1a6c4:	cf 5f       	subi	r28, 0xFF	; 255
   1a6c6:	de 4f       	sbci	r29, 0xFE	; 254
   1a6c8:	a8 81       	ld	r26, Y
   1a6ca:	b9 81       	ldd	r27, Y+1	; 0x01
   1a6cc:	c1 50       	subi	r28, 0x01	; 1
   1a6ce:	d1 40       	sbci	r29, 0x01	; 1
   1a6d0:	fc 01       	movw	r30, r24
   1a6d2:	1d 92       	st	X+, r1
   1a6d4:	31 97       	sbiw	r30, 0x01	; 1
    for(i=0;i<filesectors;++i)
   1a6d6:	e9 f7       	brne	.-6      	; 0x1a6d2 <lif_create_volume+0x4f0>
   1a6d8:	41 2c       	mov	r4, r1
   1a6da:	51 2c       	mov	r5, r1
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
            printf("Wrote: %ld\r", count);
   1a6dc:	32 01       	movw	r6, r4
   1a6de:	89 ef       	ldi	r24, 0xF9	; 249
   1a6e0:	9c e3       	ldi	r25, 0x3C	; 60
   1a6e2:	9c 01       	movw	r18, r24
   1a6e4:	40 e0       	ldi	r20, 0x00	; 0
   1a6e6:	cd 5f       	subi	r28, 0xFD	; 253
   1a6e8:	de 4f       	sbci	r29, 0xFE	; 254
   1a6ea:	28 83       	st	Y, r18
   1a6ec:	39 83       	std	Y+1, r19	; 0x01
   1a6ee:	4a 83       	std	Y+2, r20	; 0x02
   1a6f0:	c3 50       	subi	r28, 0x03	; 3
   1a6f2:	d1 40       	sbci	r29, 0x01	; 1
   1a6f4:	c1 5f       	subi	r28, 0xF1	; 241
   1a6f6:	de 4f       	sbci	r29, 0xFE	; 254
   1a6f8:	c8 80       	ld	r12, Y
   1a6fa:	d9 80       	ldd	r13, Y+1	; 0x01
   1a6fc:	ea 80       	ldd	r14, Y+2	; 0x02
   1a6fe:	fb 80       	ldd	r15, Y+3	; 0x03
   1a700:	cf 50       	subi	r28, 0x0F	; 15
   1a702:	d1 40       	sbci	r29, 0x01	; 1
   1a704:	c4 0c       	add	r12, r4
   1a706:	d5 1c       	adc	r13, r5
   1a708:	e6 1c       	adc	r14, r6
        ++count;
    }

    // File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   1a70a:	f7 1c       	adc	r15, r7
   1a70c:	c5 5f       	subi	r28, 0xF5	; 245
   1a70e:	de 4f       	sbci	r29, 0xFE	; 254
   1a710:	28 81       	ld	r18, Y
   1a712:	39 81       	ldd	r19, Y+1	; 0x01
   1a714:	4a 81       	ldd	r20, Y+2	; 0x02
   1a716:	5b 81       	ldd	r21, Y+3	; 0x03
   1a718:	cb 50       	subi	r28, 0x0B	; 11
   1a71a:	d1 40       	sbci	r29, 0x01	; 1
   1a71c:	42 16       	cp	r4, r18
   1a71e:	53 06       	cpc	r5, r19
   1a720:	64 06       	cpc	r6, r20
   1a722:	75 06       	cpc	r7, r21
   1a724:	0c f0       	brlt	.+2      	; 0x1a728 <lif_create_volume+0x546>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   1a726:	59 c0       	rjmp	.+178    	; 0x1a7da <lif_create_volume+0x5f8>
   1a728:	00 e0       	ldi	r16, 0x00	; 0
   1a72a:	11 e0       	ldi	r17, 0x01	; 1
   1a72c:	c9 5f       	subi	r28, 0xF9	; 249
   1a72e:	de 4f       	sbci	r29, 0xFE	; 254
   1a730:	28 81       	ld	r18, Y
   1a732:	39 81       	ldd	r19, Y+1	; 0x01
   1a734:	4a 81       	ldd	r20, Y+2	; 0x02
   1a736:	5b 81       	ldd	r21, Y+3	; 0x03
   1a738:	c7 50       	subi	r28, 0x07	; 7
   1a73a:	d1 40       	sbci	r29, 0x01	; 1
   1a73c:	be 01       	movw	r22, r28
   1a73e:	6f 5f       	subi	r22, 0xFF	; 255
   1a740:	7f 4f       	sbci	r23, 0xFF	; 255
   1a742:	c5 01       	movw	r24, r10
   1a744:	0e 94 4c c6 	call	0x18c98	; 0x18c98 <lif_write>
   1a748:	09 2e       	mov	r0, r25
   1a74a:	00 0c       	add	r0, r0
   1a74c:	aa 0b       	sbc	r26, r26
        if(size < LIF_SECTOR_SIZE)
   1a74e:	bb 0b       	sbc	r27, r27
   1a750:	8f 3f       	cpi	r24, 0xFF	; 255
   1a752:	91 05       	cpc	r25, r1
   1a754:	a1 05       	cpc	r26, r1
   1a756:	b1 05       	cpc	r27, r1
   1a758:	09 f0       	breq	.+2      	; 0x1a75c <lif_create_volume+0x57a>
   1a75a:	0c f4       	brge	.+2      	; 0x1a75e <lif_create_volume+0x57c>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   1a75c:	5a c0       	rjmp	.+180    	; 0x1a812 <lif_create_volume+0x630>
   1a75e:	c9 5f       	subi	r28, 0xF9	; 249
   1a760:	de 4f       	sbci	r29, 0xFE	; 254
   1a762:	28 81       	ld	r18, Y
   1a764:	39 81       	ldd	r19, Y+1	; 0x01
   1a766:	4a 81       	ldd	r20, Y+2	; 0x02
   1a768:	5b 81       	ldd	r21, Y+3	; 0x03
   1a76a:	c7 50       	subi	r28, 0x07	; 7
   1a76c:	d1 40       	sbci	r29, 0x01	; 1
   1a76e:	28 0f       	add	r18, r24
   1a770:	39 1f       	adc	r19, r25
   1a772:	4a 1f       	adc	r20, r26
   1a774:	5b 1f       	adc	r21, r27
   1a776:	c9 5f       	subi	r28, 0xF9	; 249
   1a778:	de 4f       	sbci	r29, 0xFE	; 254
   1a77a:	28 83       	st	Y, r18
   1a77c:	39 83       	std	Y+1, r19	; 0x01
   1a77e:	4a 83       	std	Y+2, r20	; 0x02
   1a780:	5b 83       	std	Y+3, r21	; 0x03
   1a782:	c7 50       	subi	r28, 0x07	; 7
        if((count % 100) == 0)
   1a784:	d1 40       	sbci	r29, 0x01	; 1
   1a786:	c7 01       	movw	r24, r14
   1a788:	b6 01       	movw	r22, r12
   1a78a:	24 e6       	ldi	r18, 0x64	; 100
   1a78c:	30 e0       	ldi	r19, 0x00	; 0
   1a78e:	40 e0       	ldi	r20, 0x00	; 0
   1a790:	50 e0       	ldi	r21, 0x00	; 0
   1a792:	0e 94 b3 e7 	call	0x1cf66	; 0x1cf66 <__divmodsi4>
   1a796:	67 2b       	or	r22, r23
   1a798:	68 2b       	or	r22, r24
   1a79a:	69 2b       	or	r22, r25
            printf("Wrote: %ld\r", count);
   1a79c:	c1 f4       	brne	.+48     	; 0x1a7ce <lif_create_volume+0x5ec>
   1a79e:	ff 92       	push	r15
   1a7a0:	ef 92       	push	r14
   1a7a2:	df 92       	push	r13
   1a7a4:	cf 92       	push	r12
   1a7a6:	1f 92       	push	r1
   1a7a8:	cc 5f       	subi	r28, 0xFC	; 252
   1a7aa:	de 4f       	sbci	r29, 0xFE	; 254
   1a7ac:	38 81       	ld	r19, Y
   1a7ae:	c4 50       	subi	r28, 0x04	; 4
   1a7b0:	d1 40       	sbci	r29, 0x01	; 1
   1a7b2:	3f 93       	push	r19
   1a7b4:	cd 5f       	subi	r28, 0xFD	; 253
   1a7b6:	de 4f       	sbci	r29, 0xFE	; 254
   1a7b8:	48 81       	ld	r20, Y
   1a7ba:	c3 50       	subi	r28, 0x03	; 3
   1a7bc:	d1 40       	sbci	r29, 0x01	; 1
   1a7be:	4f 93       	push	r20
   1a7c0:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1a7c4:	0f b6       	in	r0, 0x3f	; 63
   1a7c6:	f8 94       	cli
   1a7c8:	de bf       	out	0x3e, r29	; 62
   1a7ca:	0f be       	out	0x3f, r0	; 63
        ++count;
    }

    // File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   1a7cc:	cd bf       	out	0x3d, r28	; 61
   1a7ce:	9f ef       	ldi	r25, 0xFF	; 255
   1a7d0:	49 1a       	sub	r4, r25
   1a7d2:	59 0a       	sbc	r5, r25
   1a7d4:	69 0a       	sbc	r6, r25
   1a7d6:	79 0a       	sbc	r7, r25
        offset += size;
        if((count % 100) == 0)
            printf("Wrote: %ld\r", count);
        ++count;
    }
    printf("Wrote: %ld\n", count);
   1a7d8:	8d cf       	rjmp	.-230    	; 0x1a6f4 <lif_create_volume+0x512>
   1a7da:	ff 92       	push	r15
   1a7dc:	ef 92       	push	r14
   1a7de:	df 92       	push	r13
   1a7e0:	cf 92       	push	r12
   1a7e2:	8d ee       	ldi	r24, 0xED	; 237
   1a7e4:	9c e3       	ldi	r25, 0x3C	; 60
   1a7e6:	1f 92       	push	r1
   1a7e8:	9f 93       	push	r25
   1a7ea:	8f 93       	push	r24
   1a7ec:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
/// @return void
MEMSPACE
void lif_rewinddir(lif_t *LIF)
{
    // Directory index
    LIF->dirindex = -1;
   1a7f0:	8f ef       	ldi	r24, 0xFF	; 255
   1a7f2:	9f ef       	ldi	r25, 0xFF	; 255
   1a7f4:	d5 01       	movw	r26, r10
   1a7f6:	91 96       	adiw	r26, 0x21	; 33
   1a7f8:	9c 93       	st	X, r25
   1a7fa:	8e 93       	st	-X, r24
    printf("Wrote: %ld\n", count);

    lif_rewinddir(LIF);

    // As a sanity check verify basic values
    if( !lif_check_volume(LIF) )
   1a7fc:	90 97       	sbiw	r26, 0x20	; 32
   1a7fe:	c5 01       	movw	r24, r10
   1a800:	0e 94 fd cb 	call	0x197fa	; 0x197fa <lif_check_volume>
   1a804:	0f b6       	in	r0, 0x3f	; 63
   1a806:	f8 94       	cli
   1a808:	de bf       	out	0x3e, r29	; 62
   1a80a:	0f be       	out	0x3f, r0	; 63
   1a80c:	cd bf       	out	0x3d, r28	; 61
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a80e:	89 2b       	or	r24, r25
   1a810:	19 f4       	brne	.+6      	; 0x1a818 <lif_create_volume+0x636>
   1a812:	c5 01       	movw	r24, r10
   1a814:	80 da       	rcall	.-2816   	; 0x19d16 <lif_close_volume>
        lif_closedir(LIF);
        return(NULL);
    }

    // Scan directory and verify values
    if( !lif_updatefree(LIF))
   1a816:	08 c0       	rjmp	.+16     	; 0x1a828 <lif_create_volume+0x646>
   1a818:	c5 01       	movw	r24, r10
   1a81a:	db db       	rcall	.-2122   	; 0x19fd2 <lif_updatefree>
   1a81c:	7c 01       	movw	r14, r24
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a81e:	89 2b       	or	r24, r25
   1a820:	31 f4       	brne	.+12     	; 0x1a82e <lif_create_volume+0x64c>
   1a822:	c5 01       	movw	r24, r10

    // Scan directory and verify values
    if( !lif_updatefree(LIF))
    {
        lif_closedir(LIF);
        return(NULL);
   1a824:	78 da       	rcall	.-2832   	; 0x19d16 <lif_close_volume>

    time_t t = time(NULL);

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
    if(LIF == NULL)
        return(NULL);
   1a826:	04 c0       	rjmp	.+8      	; 0x1a830 <lif_create_volume+0x64e>
   1a828:	e1 2c       	mov	r14, r1
   1a82a:	f1 2c       	mov	r15, r1
   1a82c:	01 c0       	rjmp	.+2      	; 0x1a830 <lif_create_volume+0x64e>
        lif_closedir(LIF);
        return(NULL);
    }

    return(LIF);
}
   1a82e:	75 01       	movw	r14, r10
   1a830:	c7 01       	movw	r24, r14
   1a832:	ca 5e       	subi	r28, 0xEA	; 234
   1a834:	de 4f       	sbci	r29, 0xFE	; 254
   1a836:	e2 e1       	ldi	r30, 0x12	; 18
   1a838:	0c 94 2f e8 	jmp	0x1d05e	; 0x1d05e <__epilogue_restores__>

0001a83c <lif_newdir>:
/// @param[in] *LIF: LIF pointer
/// @param[in] sectors: try to find specified free space
/// @return index or free record or -1 on error
MEMSPACE
int lif_newdir(lif_t *LIF, long sectors)
{
   1a83c:	ac e0       	ldi	r26, 0x0C	; 12
   1a83e:	b0 e0       	ldi	r27, 0x00	; 0
   1a840:	e4 e2       	ldi	r30, 0x24	; 36
   1a842:	f4 ed       	ldi	r31, 0xD4	; 212
   1a844:	0c 94 13 e8 	jmp	0x1d026	; 0x1d026 <__prologue_saves__>
   1a848:	9c 87       	std	Y+12, r25	; 0x0c
   1a84a:	8b 87       	std	Y+11, r24	; 0x0b
   1a84c:	6a 01       	movw	r12, r20
   1a84e:	7b 01       	movw	r14, r22

    // Directory index
    index = 0;

    // Start of free space
    start = LIF->filestart;
   1a850:	fc 01       	movw	r30, r24
   1a852:	84 84       	ldd	r8, Z+12	; 0x0c
   1a854:	95 84       	ldd	r9, Z+13	; 0x0d
   1a856:	a6 84       	ldd	r10, Z+14	; 0x0e

    // Update all file information
    if(lif_updatefree(LIF) == NULL)
   1a858:	b7 84       	ldd	r11, Z+15	; 0x0f
   1a85a:	bb db       	rcall	.-2186   	; 0x19fd2 <lif_updatefree>
   1a85c:	89 2b       	or	r24, r25
    {
        printf("lif_newdir: not enough free space:[%ld] for size:[%ld]\n", (long)LIF->freesectors, (long) sectors);
   1a85e:	b1 f4       	brne	.+44     	; 0x1a88c <lif_newdir+0x50>
   1a860:	ff 92       	push	r15
   1a862:	ef 92       	push	r14
   1a864:	df 92       	push	r13
   1a866:	cf 92       	push	r12
   1a868:	eb 85       	ldd	r30, Y+11	; 0x0b
   1a86a:	fc 85       	ldd	r31, Y+12	; 0x0c
   1a86c:	83 8d       	ldd	r24, Z+27	; 0x1b
   1a86e:	8f 93       	push	r24
   1a870:	82 8d       	ldd	r24, Z+26	; 0x1a
   1a872:	8f 93       	push	r24
   1a874:	81 8d       	ldd	r24, Z+25	; 0x19
   1a876:	8f 93       	push	r24
   1a878:	80 8d       	ldd	r24, Z+24	; 0x18
   1a87a:	8f 93       	push	r24
   1a87c:	8e e0       	ldi	r24, 0x0E	; 14
   1a87e:	9c e3       	ldi	r25, 0x3C	; 60
   1a880:	1f 92       	push	r1
   1a882:	9f 93       	push	r25
   1a884:	8f 93       	push	r24
   1a886:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
        return(-1);
    }

    // Not enough room ?
    if(sectors > (long)LIF->freesectors)
   1a88a:	2c c0       	rjmp	.+88     	; 0x1a8e4 <lif_newdir+0xa8>
   1a88c:	eb 85       	ldd	r30, Y+11	; 0x0b
   1a88e:	fc 85       	ldd	r31, Y+12	; 0x0c
   1a890:	80 8d       	ldd	r24, Z+24	; 0x18
   1a892:	91 8d       	ldd	r25, Z+25	; 0x19
   1a894:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a896:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a898:	8c 15       	cp	r24, r12
   1a89a:	9d 05       	cpc	r25, r13
   1a89c:	ae 05       	cpc	r26, r14
   1a89e:	bf 05       	cpc	r27, r15
   1a8a0:	b4 f0       	brlt	.+44     	; 0x1a8ce <lif_newdir+0x92>
   1a8a2:	44 24       	eor	r4, r4
   1a8a4:	43 94       	inc	r4
   1a8a6:	51 2c       	mov	r5, r1
   1a8a8:	61 2c       	mov	r6, r1
#endif
            break;
        }

        // We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   1a8aa:	71 2c       	mov	r7, r1
   1a8ac:	e6 5a       	subi	r30, 0xA6	; 166
   1a8ae:	ff 4f       	sbci	r31, 0xFF	; 255
   1a8b0:	fc 83       	std	Y+4, r31	; 0x04
   1a8b2:	eb 83       	std	Y+3, r30	; 0x03
   1a8b4:	8b 85       	ldd	r24, Y+11	; 0x0b
   1a8b6:	9c 85       	ldd	r25, Y+12	; 0x0c
   1a8b8:	84 5a       	subi	r24, 0xA4	; 164
   1a8ba:	9f 4f       	sbci	r25, 0xFF	; 255
   1a8bc:	9a 83       	std	Y+2, r25	; 0x02
                freestate = 0;  // Try again
        }
        
        // Computed start of next record
        // Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   1a8be:	89 83       	std	Y+1, r24	; 0x01
   1a8c0:	eb 85       	ldd	r30, Y+11	; 0x0b
   1a8c2:	fc 85       	ldd	r31, Y+12	; 0x0c
   1a8c4:	e0 5a       	subi	r30, 0xA0	; 160
   1a8c6:	ff 4f       	sbci	r31, 0xFF	; 255
   1a8c8:	fe 83       	std	Y+6, r31	; 0x06
   1a8ca:	ed 83       	std	Y+5, r30	; 0x05
    }

    // Not enough room ?
    if(sectors > (long)LIF->freesectors)
    {
        printf("lif_newdir: not enough free space:[%ld]\n", (long)LIF->freesectors);
   1a8cc:	23 c0       	rjmp	.+70     	; 0x1a914 <lif_newdir+0xd8>
   1a8ce:	bf 93       	push	r27
   1a8d0:	af 93       	push	r26
   1a8d2:	9f 93       	push	r25
   1a8d4:	8f 93       	push	r24
   1a8d6:	85 ee       	ldi	r24, 0xE5	; 229
   1a8d8:	9b e3       	ldi	r25, 0x3B	; 59
   1a8da:	1f 92       	push	r1
   1a8dc:	9f 93       	push	r25
   1a8de:	8f 93       	push	r24
   1a8e0:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
        return(-1);
   1a8e4:	0f b6       	in	r0, 0x3f	; 63
   1a8e6:	f8 94       	cli
   1a8e8:	de bf       	out	0x3e, r29	; 62
   1a8ea:	0f be       	out	0x3f, r0	; 63
   1a8ec:	cd bf       	out	0x3d, r28	; 61
#endif
            break;
        }

        // We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   1a8ee:	05 c1       	rjmp	.+522    	; 0x1aafa <lif_newdir+0x2be>
   1a8f0:	eb 81       	ldd	r30, Y+3	; 0x03
   1a8f2:	fc 81       	ldd	r31, Y+4	; 0x04
   1a8f4:	80 81       	ld	r24, Z
   1a8f6:	91 81       	ldd	r25, Z+1	; 0x01
   1a8f8:	8f 3f       	cpi	r24, 0xFF	; 255
   1a8fa:	ff ef       	ldi	r31, 0xFF	; 255
   1a8fc:	9f 07       	cpc	r25, r31
            return(index);
        }


        // PURGED records
        if(LIF->DIR.FileType == 0)
   1a8fe:	a1 f0       	breq	.+40     	; 0x1a928 <lif_newdir+0xec>
   1a900:	89 2b       	or	r24, r25
   1a902:	09 f0       	breq	.+2      	; 0x1a906 <lif_newdir+0xca>
        {
            if(freestate == 0)
   1a904:	d0 c0       	rjmp	.+416    	; 0x1aaa6 <lif_newdir+0x26a>
   1a906:	61 14       	cp	r6, r1
   1a908:	71 04       	cpc	r7, r1
   1a90a:	09 f4       	brne	.+2      	; 0x1a90e <lif_newdir+0xd2>
   1a90c:	c3 c0       	rjmp	.+390    	; 0x1aa94 <lif_newdir+0x258>
   1a90e:	9f ef       	ldi	r25, 0xFF	; 255
   1a910:	49 1a       	sub	r4, r25
   1a912:	59 0a       	sbc	r5, r25
   1a914:	82 01       	movw	r16, r4
   1a916:	01 50       	subi	r16, 0x01	; 1

    // Update free space and EOF pointers
    while(1)
    {
        // Write new EOF after current one
        if( !lif_readdirindex(LIF,index) )
   1a918:	11 09       	sbc	r17, r1
   1a91a:	b8 01       	movw	r22, r16
   1a91c:	8b 85       	ldd	r24, Y+11	; 0x0b
   1a91e:	9c 85       	ldd	r25, Y+12	; 0x0c
   1a920:	7b da       	rcall	.-2826   	; 0x19e18 <lif_readdirindex>
   1a922:	89 2b       	or	r24, r25
   1a924:	29 f7       	brne	.-54     	; 0x1a8f0 <lif_newdir+0xb4>
        if(LIF->DIR.FileType == 0xffff)
        {

            // Was enough free space found in purged area ?
            // Do NOT need to update EOF!
            if(freestate == 2)
   1a926:	e9 c0       	rjmp	.+466    	; 0x1aafa <lif_newdir+0x2be>
   1a928:	22 e0       	ldi	r18, 0x02	; 2
   1a92a:	62 16       	cp	r6, r18
   1a92c:	71 04       	cpc	r7, r1
   1a92e:	09 f0       	breq	.+2      	; 0x1a932 <lif_newdir+0xf6>
            {
                // Update free pace for new file
                lif_dir_clear(LIF);
   1a930:	46 c0       	rjmp	.+140    	; 0x1a9be <lif_newdir+0x182>
   1a932:	8b 85       	ldd	r24, Y+11	; 0x0b
   1a934:	9c 85       	ldd	r25, Y+12	; 0x0c
   1a936:	0e 94 5b ca 	call	0x194b6	; 0x194b6 <lif_dir_clear>
                LIF->DIR.FileStartSector = freestart;
   1a93a:	eb 85       	ldd	r30, Y+11	; 0x0b
   1a93c:	fc 85       	ldd	r31, Y+12	; 0x0c
   1a93e:	e4 5a       	subi	r30, 0xA4	; 164
   1a940:	ff 4f       	sbci	r31, 0xFF	; 255
   1a942:	8f 81       	ldd	r24, Y+7	; 0x07
   1a944:	80 83       	st	Z, r24
   1a946:	98 85       	ldd	r25, Y+8	; 0x08
   1a948:	91 83       	std	Z+1, r25	; 0x01
   1a94a:	29 85       	ldd	r18, Y+9	; 0x09
   1a94c:	22 83       	std	Z+2, r18	; 0x02
   1a94e:	8a 85       	ldd	r24, Y+10	; 0x0a
                LIF->DIR.FileSectors = sectors;
   1a950:	83 83       	std	Z+3, r24	; 0x03
   1a952:	eb 85       	ldd	r30, Y+11	; 0x0b
   1a954:	fc 85       	ldd	r31, Y+12	; 0x0c
   1a956:	e0 5a       	subi	r30, 0xA0	; 160
   1a958:	ff 4f       	sbci	r31, 0xFF	; 255
   1a95a:	c0 82       	st	Z, r12
   1a95c:	d1 82       	std	Z+1, r13	; 0x01
   1a95e:	e2 82       	std	Z+2, r14	; 0x02
                LIF->usedsectors += sectors;
   1a960:	f3 82       	std	Z+3, r15	; 0x03
   1a962:	eb 85       	ldd	r30, Y+11	; 0x0b
   1a964:	fc 85       	ldd	r31, Y+12	; 0x0c
   1a966:	84 89       	ldd	r24, Z+20	; 0x14
   1a968:	95 89       	ldd	r25, Z+21	; 0x15
   1a96a:	a6 89       	ldd	r26, Z+22	; 0x16
   1a96c:	b7 89       	ldd	r27, Z+23	; 0x17
   1a96e:	8c 0d       	add	r24, r12
   1a970:	9d 1d       	adc	r25, r13
   1a972:	ae 1d       	adc	r26, r14
   1a974:	bf 1d       	adc	r27, r15
   1a976:	84 8b       	std	Z+20, r24	; 0x14
   1a978:	95 8b       	std	Z+21, r25	; 0x15
   1a97a:	a6 8b       	std	Z+22, r26	; 0x16
                LIF->freesectors -= sectors;
   1a97c:	b7 8b       	std	Z+23, r27	; 0x17
   1a97e:	80 8d       	ldd	r24, Z+24	; 0x18
   1a980:	91 8d       	ldd	r25, Z+25	; 0x19
   1a982:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a984:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a986:	8c 19       	sub	r24, r12
   1a988:	9d 09       	sbc	r25, r13
   1a98a:	ae 09       	sbc	r26, r14
   1a98c:	bf 09       	sbc	r27, r15
   1a98e:	80 8f       	std	Z+24, r24	; 0x18
   1a990:	91 8f       	std	Z+25, r25	; 0x19
   1a992:	a2 8f       	std	Z+26, r26	; 0x1a
                LIF->files++;
   1a994:	b3 8f       	std	Z+27, r27	; 0x1b
   1a996:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a998:	95 8d       	ldd	r25, Z+29	; 0x1d
   1a99a:	01 96       	adiw	r24, 0x01	; 1
   1a99c:	95 8f       	std	Z+29, r25	; 0x1d
                LIF->purged--;
   1a99e:	84 8f       	std	Z+28, r24	; 0x1c
   1a9a0:	86 8d       	ldd	r24, Z+30	; 0x1e
   1a9a2:	97 8d       	ldd	r25, Z+31	; 0x1f
   1a9a4:	01 97       	sbiw	r24, 0x01	; 1
   1a9a6:	97 8f       	std	Z+31, r25	; 0x1f
                LIF->dirindex = freeindex;
   1a9a8:	86 8f       	std	Z+30, r24	; 0x1e
                // Write new record (FileType is still EOF until data is updated by user)
                if( !lif_writedirindex(LIF,freeindex))
   1a9aa:	20 a2       	std	Z+32, r2	; 0x20
   1a9ac:	31 a2       	std	Z+33, r3	; 0x21
   1a9ae:	b1 01       	movw	r22, r2
   1a9b0:	cf 01       	movw	r24, r30
   1a9b2:	9b da       	rcall	.-2762   	; 0x19eea <lif_writedirindex>
   1a9b4:	89 2b       	or	r24, r25
   1a9b6:	09 f4       	brne	.+2      	; 0x1a9ba <lif_newdir+0x17e>
   1a9b8:	a0 c0       	rjmp	.+320    	; 0x1aafa <lif_newdir+0x2be>
                    break;
                }
                return(freeindex);
            }

            if(debuglevel & 0x400)
   1a9ba:	c1 01       	movw	r24, r2
   1a9bc:	a0 c0       	rjmp	.+320    	; 0x1aafe <lif_newdir+0x2c2>
   1a9be:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1a9c2:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
                printf("lif_newdir: index:[%d] adding at:[%ld]to purged space:[%ld] sectors, free:[%ld]\n", 
   1a9c6:	92 ff       	sbrs	r25, 2
   1a9c8:	20 c0       	rjmp	.+64     	; 0x1aa0a <lif_newdir+0x1ce>
   1a9ca:	eb 85       	ldd	r30, Y+11	; 0x0b
   1a9cc:	fc 85       	ldd	r31, Y+12	; 0x0c
   1a9ce:	83 8d       	ldd	r24, Z+27	; 0x1b
   1a9d0:	8f 93       	push	r24
   1a9d2:	82 8d       	ldd	r24, Z+26	; 0x1a
   1a9d4:	8f 93       	push	r24
   1a9d6:	81 8d       	ldd	r24, Z+25	; 0x19
   1a9d8:	8f 93       	push	r24
   1a9da:	80 8d       	ldd	r24, Z+24	; 0x18
   1a9dc:	8f 93       	push	r24
   1a9de:	ff 92       	push	r15
   1a9e0:	ef 92       	push	r14
   1a9e2:	df 92       	push	r13
   1a9e4:	cf 92       	push	r12
   1a9e6:	bf 92       	push	r11
   1a9e8:	af 92       	push	r10
   1a9ea:	9f 92       	push	r9
   1a9ec:	8f 92       	push	r8
   1a9ee:	1f 93       	push	r17
   1a9f0:	0f 93       	push	r16
   1a9f2:	84 e9       	ldi	r24, 0x94	; 148
   1a9f4:	9b e3       	ldi	r25, 0x3B	; 59
   1a9f6:	1f 92       	push	r1
   1a9f8:	9f 93       	push	r25
   1a9fa:	8f 93       	push	r24
   1a9fc:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1aa00:	0f b6       	in	r0, 0x3f	; 63
   1aa02:	f8 94       	cli
   1aa04:	de bf       	out	0x3e, r29	; 62
                    (int) index,(long)start,(long) sectors, (long)LIF->freesectors);

            // Write new EOF after current one
            if( !lif_writedirEOF(LIF,index+1) )
   1aa06:	0f be       	out	0x3f, r0	; 63
   1aa08:	cd bf       	out	0x3d, r28	; 61
   1aa0a:	b8 01       	movw	r22, r16
   1aa0c:	6f 5f       	subi	r22, 0xFF	; 255
   1aa0e:	7f 4f       	sbci	r23, 0xFF	; 255
   1aa10:	8b 85       	ldd	r24, Y+11	; 0x0b
   1aa12:	9c 85       	ldd	r25, Y+12	; 0x0c
   1aa14:	c6 da       	rcall	.-2676   	; 0x19fa2 <lif_writedirEOF>
   1aa16:	89 2b       	or	r24, r25
            {
                break;
            }

            lif_dir_clear(LIF);
   1aa18:	09 f4       	brne	.+2      	; 0x1aa1c <lif_newdir+0x1e0>
   1aa1a:	6f c0       	rjmp	.+222    	; 0x1aafa <lif_newdir+0x2be>
   1aa1c:	8b 85       	ldd	r24, Y+11	; 0x0b
   1aa1e:	9c 85       	ldd	r25, Y+12	; 0x0c
            LIF->DIR.FileStartSector = start;
   1aa20:	0e 94 5b ca 	call	0x194b6	; 0x194b6 <lif_dir_clear>
   1aa24:	eb 85       	ldd	r30, Y+11	; 0x0b
   1aa26:	fc 85       	ldd	r31, Y+12	; 0x0c
   1aa28:	e4 5a       	subi	r30, 0xA4	; 164
   1aa2a:	ff 4f       	sbci	r31, 0xFF	; 255
   1aa2c:	80 82       	st	Z, r8
   1aa2e:	91 82       	std	Z+1, r9	; 0x01
            LIF->DIR.FileSectors = sectors;
   1aa30:	a2 82       	std	Z+2, r10	; 0x02
   1aa32:	b3 82       	std	Z+3, r11	; 0x03
   1aa34:	eb 85       	ldd	r30, Y+11	; 0x0b
   1aa36:	fc 85       	ldd	r31, Y+12	; 0x0c
   1aa38:	e0 5a       	subi	r30, 0xA0	; 160
   1aa3a:	ff 4f       	sbci	r31, 0xFF	; 255
   1aa3c:	c0 82       	st	Z, r12
   1aa3e:	d1 82       	std	Z+1, r13	; 0x01
            LIF->usedsectors += sectors;
   1aa40:	e2 82       	std	Z+2, r14	; 0x02
   1aa42:	f3 82       	std	Z+3, r15	; 0x03
   1aa44:	eb 85       	ldd	r30, Y+11	; 0x0b
   1aa46:	fc 85       	ldd	r31, Y+12	; 0x0c
   1aa48:	84 89       	ldd	r24, Z+20	; 0x14
   1aa4a:	95 89       	ldd	r25, Z+21	; 0x15
   1aa4c:	a6 89       	ldd	r26, Z+22	; 0x16
   1aa4e:	b7 89       	ldd	r27, Z+23	; 0x17
   1aa50:	8c 0d       	add	r24, r12
   1aa52:	9d 1d       	adc	r25, r13
   1aa54:	ae 1d       	adc	r26, r14
   1aa56:	bf 1d       	adc	r27, r15
   1aa58:	84 8b       	std	Z+20, r24	; 0x14
   1aa5a:	95 8b       	std	Z+21, r25	; 0x15
            LIF->freesectors -= sectors;
   1aa5c:	a6 8b       	std	Z+22, r26	; 0x16
   1aa5e:	b7 8b       	std	Z+23, r27	; 0x17
   1aa60:	80 8d       	ldd	r24, Z+24	; 0x18
   1aa62:	91 8d       	ldd	r25, Z+25	; 0x19
   1aa64:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1aa66:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1aa68:	8c 19       	sub	r24, r12
   1aa6a:	9d 09       	sbc	r25, r13
   1aa6c:	ae 09       	sbc	r26, r14
   1aa6e:	bf 09       	sbc	r27, r15
   1aa70:	80 8f       	std	Z+24, r24	; 0x18
   1aa72:	91 8f       	std	Z+25, r25	; 0x19
            LIF->files++;
   1aa74:	a2 8f       	std	Z+26, r26	; 0x1a
   1aa76:	b3 8f       	std	Z+27, r27	; 0x1b
   1aa78:	84 8d       	ldd	r24, Z+28	; 0x1c
   1aa7a:	95 8d       	ldd	r25, Z+29	; 0x1d
            LIF->dirindex = index;
   1aa7c:	01 96       	adiw	r24, 0x01	; 1
            // Write new record (FileType is still EOF until data is updated by user )
            if( !lif_writedirindex(LIF,index))
   1aa7e:	95 8f       	std	Z+29, r25	; 0x1d
   1aa80:	84 8f       	std	Z+28, r24	; 0x1c
   1aa82:	11 a3       	std	Z+33, r17	; 0x21
   1aa84:	00 a3       	std	Z+32, r16	; 0x20
   1aa86:	b8 01       	movw	r22, r16
   1aa88:	cf 01       	movw	r24, r30
   1aa8a:	2f da       	rcall	.-2978   	; 0x19eea <lif_writedirindex>
   1aa8c:	89 2b       	or	r24, r25


        // PURGED records
        if(LIF->DIR.FileType == 0)
        {
            if(freestate == 0)
   1aa8e:	a9 f1       	breq	.+106    	; 0x1aafa <lif_newdir+0x2be>
   1aa90:	c8 01       	movw	r24, r16
   1aa92:	35 c0       	rjmp	.+106    	; 0x1aafe <lif_newdir+0x2c2>
   1aa94:	8f 82       	std	Y+7, r8	; 0x07
   1aa96:	98 86       	std	Y+8, r9	; 0x08
            {
                freeindex = index;
                freestart = start;
                freestate = 1;
   1aa98:	a9 86       	std	Y+9, r10	; 0x09
   1aa9a:	ba 86       	std	Y+10, r11	; 0x0a
   1aa9c:	18 01       	movw	r2, r16
            }
            ++index;
            continue;
   1aa9e:	66 24       	eor	r6, r6
        }
        

        // VALID record
        if(freestate == 1)
   1aaa0:	63 94       	inc	r6
   1aaa2:	71 2c       	mov	r7, r1
   1aaa4:	34 cf       	rjmp	.-408    	; 0x1a90e <lif_newdir+0xd2>
   1aaa6:	f1 e0       	ldi	r31, 0x01	; 1
        {
            long freesectors;
            // Compute sectors of purged space between valid records
            // Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
   1aaa8:	6f 16       	cp	r6, r31
   1aaaa:	71 04       	cpc	r7, r1
   1aaac:	a9 f4       	brne	.+42     	; 0x1aad8 <lif_newdir+0x29c>
   1aaae:	e9 81       	ldd	r30, Y+1	; 0x01
   1aab0:	fa 81       	ldd	r31, Y+2	; 0x02
   1aab2:	80 81       	ld	r24, Z
   1aab4:	91 81       	ldd	r25, Z+1	; 0x01
   1aab6:	a2 81       	ldd	r26, Z+2	; 0x02
   1aab8:	b3 81       	ldd	r27, Z+3	; 0x03
   1aaba:	88 19       	sub	r24, r8
   1aabc:	99 09       	sbc	r25, r9
   1aabe:	aa 09       	sbc	r26, r10
   1aac0:	bb 09       	sbc	r27, r11
   1aac2:	8c 15       	cp	r24, r12
   1aac4:	9d 05       	cpc	r25, r13
                freestate = 2;      // Found free space in purged record
            else
                freestate = 0;  // Try again
   1aac6:	ae 05       	cpc	r26, r14
   1aac8:	bf 05       	cpc	r27, r15
   1aaca:	1c f4       	brge	.+6      	; 0x1aad2 <lif_newdir+0x296>
            long freesectors;
            // Compute sectors of purged space between valid records
            // Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
                freestate = 2;      // Found free space in purged record
   1aacc:	61 2c       	mov	r6, r1
   1aace:	71 2c       	mov	r7, r1
   1aad0:	03 c0       	rjmp	.+6      	; 0x1aad8 <lif_newdir+0x29c>
                freestate = 0;  // Try again
        }
        
        // Computed start of next record
        // Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   1aad2:	82 e0       	ldi	r24, 0x02	; 2
   1aad4:	68 2e       	mov	r6, r24
   1aad6:	71 2c       	mov	r7, r1
   1aad8:	e9 81       	ldd	r30, Y+1	; 0x01
   1aada:	fa 81       	ldd	r31, Y+2	; 0x02
   1aadc:	80 80       	ld	r8, Z
   1aade:	91 80       	ldd	r9, Z+1	; 0x01
   1aae0:	a2 80       	ldd	r10, Z+2	; 0x02
   1aae2:	b3 80       	ldd	r11, Z+3	; 0x03
   1aae4:	ed 81       	ldd	r30, Y+5	; 0x05
   1aae6:	fe 81       	ldd	r31, Y+6	; 0x06
   1aae8:	80 81       	ld	r24, Z
   1aaea:	91 81       	ldd	r25, Z+1	; 0x01
   1aaec:	a2 81       	ldd	r26, Z+2	; 0x02
   1aaee:	b3 81       	ldd	r27, Z+3	; 0x03
   1aaf0:	88 0e       	add	r8, r24
   1aaf2:	99 1e       	adc	r9, r25
        ++index;
    }
    // ERROR
    return(-1);
   1aaf4:	aa 1e       	adc	r10, r26
   1aaf6:	bb 1e       	adc	r11, r27
}
   1aaf8:	0a cf       	rjmp	.-492    	; 0x1a90e <lif_newdir+0xd2>
   1aafa:	8f ef       	ldi	r24, 0xFF	; 255
   1aafc:	9f ef       	ldi	r25, 0xFF	; 255
   1aafe:	2c 96       	adiw	r28, 0x0c	; 12
   1ab00:	e2 e1       	ldi	r30, 0x12	; 18
   1ab02:	0c 94 2f e8 	jmp	0x1d05e	; 0x1d05e <__epilogue_restores__>

0001ab06 <lif_open_volume>:
/// @param[in] *name: file name of LIF image
/// @param[in] *mode: "rb" = read, "rb+" = read/write
/// @return LIF pointer on sucesses or NULL on error
MEMSPACE
lif_t *lif_open_volume(char *name, char *mode)
{
   1ab06:	a0 e3       	ldi	r26, 0x30	; 48
   1ab08:	b1 e0       	ldi	r27, 0x01	; 1
   1ab0a:	e9 e8       	ldi	r30, 0x89	; 137
   1ab0c:	f5 ed       	ldi	r31, 0xD5	; 213
   1ab0e:	0c 94 1b e8 	jmp	0x1d036	; 0x1d036 <__prologue_saves__+0x10>
   1ab12:	b8 2e       	mov	r11, r24
   1ab14:	a9 2e       	mov	r10, r25
   1ab16:	6b 01       	movw	r12, r22
    lif_t *LIF;
    stat_t sb, *sp;
    uint8_t buffer[LIF_SECTOR_SIZE];


    sp = lif_stat(name, (stat_t *)&sb);
   1ab18:	be 01       	movw	r22, r28
   1ab1a:	6f 5f       	subi	r22, 0xFF	; 255
   1ab1c:	7e 4f       	sbci	r23, 0xFE	; 254
   1ab1e:	0e 94 95 c5 	call	0x18b2a	; 0x18b2a <lif_stat>
   1ab22:	8c 01       	movw	r16, r24
    if(sp == NULL)
   1ab24:	00 97       	sbiw	r24, 0x00	; 0
   1ab26:	09 f1       	breq	.+66     	; 0x1ab6a <lif_open_volume+0x64>
        return(NULL);


    // To read LIF volume we must have at minimum two sectors
    // volume header a directory entry
    if(sp->st_size < (long)LIF_SECTOR_SIZE*2)
   1ab28:	fc 01       	movw	r30, r24
   1ab2a:	80 8d       	ldd	r24, Z+24	; 0x18
   1ab2c:	91 8d       	ldd	r25, Z+25	; 0x19
   1ab2e:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1ab30:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1ab32:	81 15       	cp	r24, r1
   1ab34:	f2 e0       	ldi	r31, 0x02	; 2
   1ab36:	9f 07       	cpc	r25, r31
   1ab38:	a1 05       	cpc	r26, r1
   1ab3a:	b1 05       	cpc	r27, r1
   1ab3c:	c8 f4       	brcc	.+50     	; 0x1ab70 <lif_open_volume+0x6a>
    {
        if(debuglevel & 1)
   1ab3e:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1ab42:	20 ff       	sbrs	r18, 0
   1ab44:	12 c0       	rjmp	.+36     	; 0x1ab6a <lif_open_volume+0x64>
            printf("lif_open_volume:[%s] error volume header area too small:[%ld]\n", name, (long)sp->st_size);
   1ab46:	bf 93       	push	r27
   1ab48:	af 93       	push	r26
   1ab4a:	9f 93       	push	r25
   1ab4c:	8f 93       	push	r24
   1ab4e:	af 92       	push	r10
   1ab50:	bf 92       	push	r11
   1ab52:	85 e5       	ldi	r24, 0x55	; 85
   1ab54:	9b e3       	ldi	r25, 0x3B	; 59
   1ab56:	1f 92       	push	r1
   1ab58:	9f 93       	push	r25
   1ab5a:	8f 93       	push	r24
   1ab5c:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1ab60:	0f b6       	in	r0, 0x3f	; 63
   1ab62:	f8 94       	cli
   1ab64:	de bf       	out	0x3e, r29	; 62
   1ab66:	0f be       	out	0x3f, r0	; 63
   1ab68:	cd bf       	out	0x3d, r28	; 61
        return(NULL);
   1ab6a:	00 e0       	ldi	r16, 0x00	; 0
   1ab6c:	10 e0       	ldi	r17, 0x00	; 0
   1ab6e:	c5 c0       	rjmp	.+394    	; 0x1acfa <lif_open_volume+0x1f4>
    }


    // Allocate LIF structure
    LIF = lif_calloc(sizeof(lif_t)+4);
   1ab70:	64 e7       	ldi	r22, 0x74	; 116
   1ab72:	70 e0       	ldi	r23, 0x00	; 0
   1ab74:	80 e0       	ldi	r24, 0x00	; 0
   1ab76:	90 e0       	ldi	r25, 0x00	; 0
   1ab78:	0e 94 12 c5 	call	0x18a24	; 0x18a24 <lif_calloc>
   1ab7c:	7c 01       	movw	r14, r24
    if(!LIF)
   1ab7e:	89 2b       	or	r24, r25
   1ab80:	a1 f3       	breq	.-24     	; 0x1ab6a <lif_open_volume+0x64>
        return(NULL);

    LIF->name = lif_stralloc(name);
   1ab82:	8b 2d       	mov	r24, r11
   1ab84:	9a 2d       	mov	r25, r10
   1ab86:	0e 94 4e c5 	call	0x18a9c	; 0x18a9c <lif_stralloc>
   1ab8a:	f7 01       	movw	r30, r14
   1ab8c:	91 83       	std	Z+1, r25	; 0x01
   1ab8e:	80 83       	st	Z, r24
    if(!LIF->name)
   1ab90:	00 97       	sbiw	r24, 0x00	; 0
   1ab92:	09 f4       	brne	.+2      	; 0x1ab96 <lif_open_volume+0x90>
   1ab94:	5a c0       	rjmp	.+180    	; 0x1ac4a <lif_open_volume+0x144>
    {
        lif_closedir(LIF);
        return(NULL);
    }
        
    LIF->imagebytes = sp->st_size;
   1ab96:	f8 01       	movw	r30, r16
   1ab98:	00 8d       	ldd	r16, Z+24	; 0x18
   1ab9a:	11 8d       	ldd	r17, Z+25	; 0x19
   1ab9c:	22 8d       	ldd	r18, Z+26	; 0x1a
   1ab9e:	33 8d       	ldd	r19, Z+27	; 0x1b
   1aba0:	f7 01       	movw	r30, r14
   1aba2:	00 87       	std	Z+8, r16	; 0x08
   1aba4:	11 87       	std	Z+9, r17	; 0x09
   1aba6:	22 87       	std	Z+10, r18	; 0x0a
   1aba8:	33 87       	std	Z+11, r19	; 0x0b
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1abaa:	77 27       	eor	r23, r23
   1abac:	63 2f       	mov	r22, r19
   1abae:	52 2f       	mov	r21, r18
   1abb0:	41 2f       	mov	r20, r17
    if(bytes % (long)LIF_SECTOR_SIZE)
   1abb2:	00 23       	and	r16, r16
   1abb4:	21 f0       	breq	.+8      	; 0x1abbe <lif_open_volume+0xb8>
        ++sectors;
   1abb6:	4f 5f       	subi	r20, 0xFF	; 255
   1abb8:	5f 4f       	sbci	r21, 0xFF	; 255
   1abba:	6f 4f       	sbci	r22, 0xFF	; 255
   1abbc:	7f 4f       	sbci	r23, 0xFF	; 255
        lif_closedir(LIF);
        return(NULL);
    }
        
    LIF->imagebytes = sp->st_size;
    LIF->sectors = lif_bytes2sectors(sp->st_size);
   1abbe:	f7 01       	movw	r30, r14
   1abc0:	44 83       	std	Z+4, r20	; 0x04
   1abc2:	55 83       	std	Z+5, r21	; 0x05
   1abc4:	66 83       	std	Z+6, r22	; 0x06
   1abc6:	77 83       	std	Z+7, r23	; 0x07

    LIF->fp = lif_open(LIF->name,mode);
   1abc8:	b6 01       	movw	r22, r12
   1abca:	0e 94 6d c5 	call	0x18ada	; 0x18ada <lif_open>
   1abce:	f7 01       	movw	r30, r14
   1abd0:	93 83       	std	Z+3, r25	; 0x03
   1abd2:	82 83       	std	Z+2, r24	; 0x02
    if(!LIF->fp)
   1abd4:	89 2b       	or	r24, r25
   1abd6:	c9 f1       	breq	.+114    	; 0x1ac4a <lif_open_volume+0x144>
        return(NULL);
    }
        
        
    // Volume header must be it least one sector
    if( lif_read(LIF, buffer, 0, LIF_SECTOR_SIZE) < LIF_SECTOR_SIZE)
   1abd8:	00 e0       	ldi	r16, 0x00	; 0
   1abda:	11 e0       	ldi	r17, 0x01	; 1
   1abdc:	20 e0       	ldi	r18, 0x00	; 0
   1abde:	30 e0       	ldi	r19, 0x00	; 0
   1abe0:	a9 01       	movw	r20, r18
   1abe2:	be 01       	movw	r22, r28
   1abe4:	6f 5f       	subi	r22, 0xFF	; 255
   1abe6:	7f 4f       	sbci	r23, 0xFF	; 255
   1abe8:	c7 01       	movw	r24, r14
   1abea:	0e 94 f3 c5 	call	0x18be6	; 0x18be6 <lif_read>
   1abee:	6f 3f       	cpi	r22, 0xFF	; 255
   1abf0:	71 05       	cpc	r23, r1
   1abf2:	81 05       	cpc	r24, r1
   1abf4:	91 05       	cpc	r25, r1
   1abf6:	09 f0       	breq	.+2      	; 0x1abfa <lif_open_volume+0xf4>
   1abf8:	4c f4       	brge	.+18     	; 0x1ac0c <lif_open_volume+0x106>
    {
        if(debuglevel & 1)
   1abfa:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1abfe:	80 ff       	sbrs	r24, 0
   1ac00:	24 c0       	rjmp	.+72     	; 0x1ac4a <lif_open_volume+0x144>
            printf("lif_open_volume:[%s] error read volume header failed\n", name);
   1ac02:	af 92       	push	r10
   1ac04:	bf 92       	push	r11
   1ac06:	8f e1       	ldi	r24, 0x1F	; 31
   1ac08:	9b e3       	ldi	r25, 0x3B	; 59
   1ac0a:	15 c0       	rjmp	.+42     	; 0x1ac36 <lif_open_volume+0x130>
        lif_closedir(LIF);
        return(NULL);
    }

    // Unpack Volumes has the Directory start sector
    lif_str2vol(buffer, LIF);
   1ac0c:	b7 01       	movw	r22, r14
   1ac0e:	ce 01       	movw	r24, r28
   1ac10:	01 96       	adiw	r24, 0x01	; 1
   1ac12:	0e 94 0e c8 	call	0x1901c	; 0x1901c <lif_str2vol>

    // Validate basic Volume headers 
    if( !lif_check_volume(LIF) )
   1ac16:	c7 01       	movw	r24, r14
   1ac18:	0e 94 fd cb 	call	0x197fa	; 0x197fa <lif_check_volume>
   1ac1c:	89 2b       	or	r24, r25
   1ac1e:	c1 f4       	brne	.+48     	; 0x1ac50 <lif_open_volume+0x14a>
    {
        if(debuglevel & 1)
   1ac20:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1ac24:	80 ff       	sbrs	r24, 0
   1ac26:	11 c0       	rjmp	.+34     	; 0x1ac4a <lif_open_volume+0x144>
            printf("lif_open_volume:[%s] error volume validate failed\n", LIF->name);
   1ac28:	f7 01       	movw	r30, r14
   1ac2a:	81 81       	ldd	r24, Z+1	; 0x01
   1ac2c:	8f 93       	push	r24
   1ac2e:	80 81       	ld	r24, Z
   1ac30:	8f 93       	push	r24
   1ac32:	8c ee       	ldi	r24, 0xEC	; 236
   1ac34:	9a e3       	ldi	r25, 0x3A	; 58
   1ac36:	1f 92       	push	r1
   1ac38:	9f 93       	push	r25
   1ac3a:	8f 93       	push	r24
   1ac3c:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1ac40:	0f 90       	pop	r0
   1ac42:	0f 90       	pop	r0
   1ac44:	0f 90       	pop	r0
   1ac46:	0f 90       	pop	r0
   1ac48:	0f 90       	pop	r0
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ac4a:	c7 01       	movw	r24, r14
   1ac4c:	64 d8       	rcall	.-3896   	; 0x19d16 <lif_close_volume>
   1ac4e:	8d cf       	rjmp	.-230    	; 0x1ab6a <lif_open_volume+0x64>
        lif_closedir(LIF);
        return(NULL);
    }

    // Initialize remaining LIF headers
    LIF->filestart = LIF->VOL.DirStartSector + LIF->VOL.DirSectors;
   1ac50:	f7 01       	movw	r30, r14
   1ac52:	45 a5       	ldd	r20, Z+45	; 0x2d
   1ac54:	56 a5       	ldd	r21, Z+46	; 0x2e
   1ac56:	67 a5       	ldd	r22, Z+47	; 0x2f
   1ac58:	70 a9       	ldd	r23, Z+48	; 0x30
   1ac5a:	85 a9       	ldd	r24, Z+53	; 0x35
   1ac5c:	96 a9       	ldd	r25, Z+54	; 0x36
   1ac5e:	a7 a9       	ldd	r26, Z+55	; 0x37
   1ac60:	b0 ad       	ldd	r27, Z+56	; 0x38
   1ac62:	48 0f       	add	r20, r24
   1ac64:	59 1f       	adc	r21, r25
   1ac66:	6a 1f       	adc	r22, r26
   1ac68:	7b 1f       	adc	r23, r27
   1ac6a:	44 87       	std	Z+12, r20	; 0x0c
   1ac6c:	55 87       	std	Z+13, r21	; 0x0d
   1ac6e:	66 87       	std	Z+14, r22	; 0x0e
   1ac70:	77 87       	std	Z+15, r23	; 0x0f
    LIF->filesectors = LIF->sectors - LIF->filestart;
   1ac72:	84 81       	ldd	r24, Z+4	; 0x04
   1ac74:	95 81       	ldd	r25, Z+5	; 0x05
   1ac76:	a6 81       	ldd	r26, Z+6	; 0x06
   1ac78:	b7 81       	ldd	r27, Z+7	; 0x07
   1ac7a:	84 1b       	sub	r24, r20
   1ac7c:	95 0b       	sbc	r25, r21
   1ac7e:	a6 0b       	sbc	r26, r22
   1ac80:	b7 0b       	sbc	r27, r23
   1ac82:	80 8b       	std	Z+16, r24	; 0x10
   1ac84:	91 8b       	std	Z+17, r25	; 0x11
   1ac86:	a2 8b       	std	Z+18, r26	; 0x12
   1ac88:	b3 8b       	std	Z+19, r27	; 0x13
    LIF->freesectors = LIF->filesectors;
   1ac8a:	80 8f       	std	Z+24, r24	; 0x18
   1ac8c:	91 8f       	std	Z+25, r25	; 0x19
   1ac8e:	a2 8f       	std	Z+26, r26	; 0x1a
   1ac90:	b3 8f       	std	Z+27, r27	; 0x1b
    LIF->usedsectors = 0;
   1ac92:	14 8a       	std	Z+20, r1	; 0x14
   1ac94:	15 8a       	std	Z+21, r1	; 0x15
   1ac96:	16 8a       	std	Z+22, r1	; 0x16
   1ac98:	17 8a       	std	Z+23, r1	; 0x17
    LIF->purged = 0;
   1ac9a:	17 8e       	std	Z+31, r1	; 0x1f
   1ac9c:	16 8e       	std	Z+30, r1	; 0x1e
    LIF->files = 0;
   1ac9e:	15 8e       	std	Z+29, r1	; 0x1d
   1aca0:	14 8e       	std	Z+28, r1	; 0x1c
    LIF->dirindex = 0;
   1aca2:	11 a2       	std	Z+33, r1	; 0x21
   1aca4:	10 a2       	std	Z+32, r1	; 0x20
    LIF->EOFindex = 0;
   1aca6:	13 a2       	std	Z+35, r1	; 0x23

    if( lif_updatefree(LIF) == NULL)
   1aca8:	12 a2       	std	Z+34, r1	; 0x22
   1acaa:	c7 01       	movw	r24, r14
   1acac:	92 d9       	rcall	.-3292   	; 0x19fd2 <lif_updatefree>
   1acae:	8c 01       	movw	r16, r24
   1acb0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1acb4:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1acb8:	01 15       	cp	r16, r1
   1acba:	11 05       	cpc	r17, r1
    {
        if(debuglevel & 1)
   1acbc:	b1 f4       	brne	.+44     	; 0x1acea <lif_open_volume+0x1e4>
   1acbe:	80 ff       	sbrs	r24, 0
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
   1acc0:	11 c0       	rjmp	.+34     	; 0x1ace4 <lif_open_volume+0x1de>
   1acc2:	f7 01       	movw	r30, r14
   1acc4:	81 81       	ldd	r24, Z+1	; 0x01
   1acc6:	8f 93       	push	r24
   1acc8:	80 81       	ld	r24, Z
   1acca:	8f 93       	push	r24
   1accc:	89 eb       	ldi	r24, 0xB9	; 185
   1acce:	9a e3       	ldi	r25, 0x3A	; 58
   1acd0:	1f 92       	push	r1
   1acd2:	9f 93       	push	r25
   1acd4:	8f 93       	push	r24
   1acd6:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1acda:	0f 90       	pop	r0
   1acdc:	0f 90       	pop	r0
   1acde:	0f 90       	pop	r0
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ace0:	0f 90       	pop	r0
   1ace2:	0f 90       	pop	r0
   1ace4:	c7 01       	movw	r24, r14
    if( lif_updatefree(LIF) == NULL)
    {
        if(debuglevel & 1)
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
        lif_closedir(LIF);
        return(NULL);
   1ace6:	17 d8       	rcall	.-4050   	; 0x19d16 <lif_close_volume>
    }

	if(debuglevel &0x400)
   1ace8:	08 c0       	rjmp	.+16     	; 0x1acfa <lif_open_volume+0x1f4>
   1acea:	92 ff       	sbrs	r25, 2
		lif_dump_vol(LIF, "Volume Listing");	
   1acec:	05 c0       	rjmp	.+10     	; 0x1acf8 <lif_open_volume+0x1f2>
   1acee:	63 ef       	ldi	r22, 0xF3	; 243
   1acf0:	75 e1       	ldi	r23, 0x15	; 21
   1acf2:	c7 01       	movw	r24, r14
   1acf4:	0e 94 6a ca 	call	0x194d4	; 0x194d4 <lif_dump_vol>
    return( LIF );
}
   1acf8:	87 01       	movw	r16, r14
   1acfa:	c8 01       	movw	r24, r16
   1acfc:	c0 5d       	subi	r28, 0xD0	; 208
   1acfe:	de 4f       	sbci	r29, 0xFE	; 254
   1ad00:	ea e0       	ldi	r30, 0x0A	; 10
   1ad02:	0c 94 37 e8 	jmp	0x1d06e	; 0x1d06e <__epilogue_restores__+0x10>

0001ad06 <lif_dir>:
/// @brief Display a LIF image file directory
/// @param[in] lifimagename: LIF disk image name
/// @return -1 on error or number of files found
MEMSPACE
void lif_dir(char *lifimagename)
{
   1ad06:	a1 e1       	ldi	r26, 0x11	; 17
   1ad08:	b0 e0       	ldi	r27, 0x00	; 0
   1ad0a:	e9 e8       	ldi	r30, 0x89	; 137
   1ad0c:	f6 ed       	ldi	r31, 0xD6	; 214
   1ad0e:	0c 94 13 e8 	jmp	0x1d026	; 0x1d026 <__prologue_saves__>
    int index = 0;
    char *vol;

    int warn = ' ';

    LIF = lif_open_volume(lifimagename,"rb+");
   1ad12:	6a e7       	ldi	r22, 0x7A	; 122
   1ad14:	78 e0       	ldi	r23, 0x08	; 8
   1ad16:	f7 de       	rcall	.-530    	; 0x1ab06 <lif_open_volume>
   1ad18:	99 8b       	std	Y+17, r25	; 0x11
   1ad1a:	88 8b       	std	Y+16, r24	; 0x10
    if(LIF == NULL)
   1ad1c:	00 97       	sbiw	r24, 0x00	; 0
   1ad1e:	09 f4       	brne	.+2      	; 0x1ad22 <lif_dir+0x1c>
   1ad20:	5b c1       	rjmp	.+694    	; 0x1afd8 <lif_dir+0x2d2>
        return;

    vol = (char *)LIF->VOL.Label;
    if(!vol[0])
   1ad22:	fc 01       	movw	r30, r24
   1ad24:	86 a1       	ldd	r24, Z+38	; 0x26
   1ad26:	88 23       	and	r24, r24
   1ad28:	21 f0       	breq	.+8      	; 0x1ad32 <lif_dir+0x2c>

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return;

    vol = (char *)LIF->VOL.Label;
   1ad2a:	8f 01       	movw	r16, r30
   1ad2c:	0a 5d       	subi	r16, 0xDA	; 218
   1ad2e:	1f 4f       	sbci	r17, 0xFF	; 255
   1ad30:	02 c0       	rjmp	.+4      	; 0x1ad36 <lif_dir+0x30>
    if(!vol[0])
        vol = "<EMPTY>";
   1ad32:	05 ea       	ldi	r16, 0xA5	; 165
   1ad34:	15 e1       	ldi	r17, 0x15	; 21

    printf("Volume:[%s] Date:[%s]\n", vol, lif_lifbcd2timestr(LIF->VOL.date));
   1ad36:	88 89       	ldd	r24, Y+16	; 0x10
   1ad38:	99 89       	ldd	r25, Y+17	; 0x11
   1ad3a:	87 5b       	subi	r24, 0xB7	; 183
   1ad3c:	9f 4f       	sbci	r25, 0xFF	; 255
   1ad3e:	0e 94 2e ca 	call	0x1945c	; 0x1945c <lif_lifbcd2timestr>
   1ad42:	9f 93       	push	r25
   1ad44:	8f 93       	push	r24
   1ad46:	1f 93       	push	r17
   1ad48:	0f 93       	push	r16
   1ad4a:	82 ea       	ldi	r24, 0xA2	; 162
   1ad4c:	9a e3       	ldi	r25, 0x3A	; 58
   1ad4e:	1f 92       	push	r1
   1ad50:	9f 93       	push	r25
   1ad52:	8f 93       	push	r24
   1ad54:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    
    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
   1ad58:	82 e6       	ldi	r24, 0x62	; 98
   1ad5a:	9a e3       	ldi	r25, 0x3A	; 58
   1ad5c:	1f 92       	push	r1
   1ad5e:	9f 93       	push	r25
   1ad60:	8f 93       	push	r24
   1ad62:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1ad66:	0f b6       	in	r0, 0x3f	; 63
   1ad68:	f8 94       	cli
   1ad6a:	de bf       	out	0x3e, r29	; 62
   1ad6c:	0f be       	out	0x3f, r0	; 63
   1ad6e:	cd bf       	out	0x3d, r28	; 61
    long bytes;
    lif_t *LIF;
    int index = 0;
    char *vol;

    int warn = ' ';
   1ad70:	60 e2       	ldi	r22, 0x20	; 32
   1ad72:	96 2e       	mov	r9, r22
MEMSPACE
void lif_dir(char *lifimagename)
{
    long bytes;
    lif_t *LIF;
    int index = 0;
   1ad74:	00 e0       	ldi	r16, 0x00	; 0
   1ad76:	10 e0       	ldi	r17, 0x00	; 0

        if(!lif_readdirindex(LIF,index))
            break;


        if(LIF->DIR.FileType == 0xffff)
   1ad78:	88 89       	ldd	r24, Y+16	; 0x10
   1ad7a:	99 89       	ldd	r25, Y+17	; 0x11
   1ad7c:	86 5a       	subi	r24, 0xA6	; 166
   1ad7e:	9f 4f       	sbci	r25, 0xFF	; 255
   1ad80:	9c 83       	std	Y+4, r25	; 0x04
   1ad82:	8b 83       	std	Y+3, r24	; 0x03
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   1ad84:	e8 89       	ldd	r30, Y+16	; 0x10
   1ad86:	f9 89       	ldd	r31, Y+17	; 0x11
   1ad88:	e0 5a       	subi	r30, 0xA0	; 160
   1ad8a:	ff 4f       	sbci	r31, 0xFF	; 255
   1ad8c:	fb 87       	std	Y+11, r31	; 0x0b
   1ad8e:	ea 87       	std	Y+10, r30	; 0x0a

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1ad90:	28 89       	ldd	r18, Y+16	; 0x10
   1ad92:	39 89       	ldd	r19, Y+17	; 0x11
   1ad94:	24 59       	subi	r18, 0x94	; 148
   1ad96:	3f 4f       	sbci	r19, 0xFF	; 255
   1ad98:	3d 87       	std	Y+13, r19	; 0x0d
   1ad9a:	2c 87       	std	Y+12, r18	; 0x0c
            else
            {
                warn = '!';
                if(debuglevel & 0x400)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n", 
   1ad9c:	88 89       	ldd	r24, Y+16	; 0x10
   1ad9e:	99 89       	ldd	r25, Y+17	; 0x11
   1ada0:	81 5b       	subi	r24, 0xB1	; 177
   1ada2:	9f 4f       	sbci	r25, 0xFF	; 255
   1ada4:	9a 83       	std	Y+2, r25	; 0x02
   1ada6:	89 83       	std	Y+1, r24	; 0x01
   1ada8:	86 e1       	ldi	r24, 0x16	; 22
   1adaa:	9a e3       	ldi	r25, 0x3A	; 58
   1adac:	3c 01       	movw	r6, r24
   1adae:	81 2c       	mov	r8, r1
            }
        }


        // name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n", 
   1adb0:	e8 89       	ldd	r30, Y+16	; 0x10
   1adb2:	f9 89       	ldd	r31, Y+17	; 0x11
   1adb4:	ec 59       	subi	r30, 0x9C	; 156
   1adb6:	ff 4f       	sbci	r31, 0xFF	; 255
   1adb8:	ff 87       	std	Y+15, r31	; 0x0f
   1adba:	ee 87       	std	Y+14, r30	; 0x0e
   1adbc:	28 89       	ldd	r18, Y+16	; 0x10
   1adbe:	39 89       	ldd	r19, Y+17	; 0x11
   1adc0:	22 59       	subi	r18, 0x92	; 146
   1adc2:	3f 4f       	sbci	r19, 0xFF	; 255
   1adc4:	3e 83       	std	Y+6, r19	; 0x06
   1adc6:	2d 83       	std	Y+5, r18	; 0x05
   1adc8:	a8 88       	ldd	r10, Y+16	; 0x10
   1adca:	b9 88       	ldd	r11, Y+17	; 0x11
   1adcc:	3c e5       	ldi	r19, 0x5C	; 92
   1adce:	a3 0e       	add	r10, r19
   1add0:	b1 1c       	adc	r11, r1
   1add2:	86 ee       	ldi	r24, 0xE6	; 230
   1add4:	99 e3       	ldi	r25, 0x39	; 57
   1add6:	9c 01       	movw	r18, r24
   1add8:	40 e0       	ldi	r20, 0x00	; 0
   1adda:	2f 83       	std	Y+7, r18	; 0x07
   1addc:	38 87       	std	Y+8, r19	; 0x08
   1adde:	49 87       	std	Y+9, r20	; 0x09
    
    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
    while(1)
    {

        if(!lif_readdirindex(LIF,index))
   1ade0:	b8 01       	movw	r22, r16
   1ade2:	88 89       	ldd	r24, Y+16	; 0x10
   1ade4:	99 89       	ldd	r25, Y+17	; 0x11
   1ade6:	18 d8       	rcall	.-4048   	; 0x19e18 <lif_readdirindex>
   1ade8:	89 2b       	or	r24, r25
   1adea:	09 f4       	brne	.+2      	; 0x1adee <lif_dir+0xe8>
   1adec:	9d c0       	rjmp	.+314    	; 0x1af28 <lif_dir+0x222>
            break;


        if(LIF->DIR.FileType == 0xffff)
   1adee:	eb 81       	ldd	r30, Y+3	; 0x03
   1adf0:	fc 81       	ldd	r31, Y+4	; 0x04
   1adf2:	20 81       	ld	r18, Z
   1adf4:	31 81       	ldd	r19, Z+1	; 0x01
   1adf6:	2f 3f       	cpi	r18, 0xFF	; 255
   1adf8:	ff ef       	ldi	r31, 0xFF	; 255
   1adfa:	3f 07       	cpc	r19, r31
   1adfc:	09 f4       	brne	.+2      	; 0x1ae00 <lif_dir+0xfa>
   1adfe:	94 c0       	rjmp	.+296    	; 0x1af28 <lif_dir+0x222>
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   1ae00:	ea 85       	ldd	r30, Y+10	; 0x0a
   1ae02:	fb 85       	ldd	r31, Y+11	; 0x0b
   1ae04:	80 81       	ld	r24, Z
   1ae06:	91 81       	ldd	r25, Z+1	; 0x01
   1ae08:	a2 81       	ldd	r26, Z+2	; 0x02
   1ae0a:	b3 81       	ldd	r27, Z+3	; 0x03
   1ae0c:	cc 24       	eor	r12, r12
   1ae0e:	d8 2e       	mov	r13, r24
   1ae10:	e9 2e       	mov	r14, r25
   1ae12:	fa 2e       	mov	r15, r26

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
   1ae14:	2c 7f       	andi	r18, 0xFC	; 252
   1ae16:	20 31       	cpi	r18, 0x10	; 16
   1ae18:	30 4e       	sbci	r19, 0xE0	; 224
   1ae1a:	09 f0       	breq	.+2      	; 0x1ae1e <lif_dir+0x118>
   1ae1c:	4b c0       	rjmp	.+150    	; 0x1aeb4 <lif_dir+0x1ae>
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1ae1e:	ec 85       	ldd	r30, Y+12	; 0x0c
   1ae20:	fd 85       	ldd	r31, Y+13	; 0x0d
   1ae22:	20 81       	ld	r18, Z
   1ae24:	31 81       	ldd	r19, Z+1	; 0x01
   1ae26:	21 15       	cp	r18, r1
   1ae28:	31 05       	cpc	r19, r1
   1ae2a:	a9 f0       	breq	.+42     	; 0x1ae56 <lif_dir+0x150>
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1ae2c:	19 01       	movw	r2, r18
   1ae2e:	41 2c       	mov	r4, r1
   1ae30:	51 2c       	mov	r5, r1
   1ae32:	77 27       	eor	r23, r23
   1ae34:	65 2d       	mov	r22, r5
   1ae36:	54 2d       	mov	r21, r4
   1ae38:	43 2d       	mov	r20, r3
    if(bytes % (long)LIF_SECTOR_SIZE)
   1ae3a:	22 23       	and	r18, r18
   1ae3c:	21 f0       	breq	.+8      	; 0x1ae46 <lif_dir+0x140>
        ++sectors;
   1ae3e:	4f 5f       	subi	r20, 0xFF	; 255
   1ae40:	5f 4f       	sbci	r21, 0xFF	; 255
   1ae42:	6f 4f       	sbci	r22, 0xFF	; 255
   1ae44:	7f 4f       	sbci	r23, 0xFF	; 255

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1ae46:	84 17       	cp	r24, r20
   1ae48:	95 07       	cpc	r25, r21
   1ae4a:	a6 07       	cpc	r26, r22
   1ae4c:	b7 07       	cpc	r27, r23
   1ae4e:	19 f4       	brne	.+6      	; 0x1ae56 <lif_dir+0x150>
            {
                bytes = LIF->DIR.FileBytes;
   1ae50:	72 01       	movw	r14, r4
   1ae52:	61 01       	movw	r12, r2
   1ae54:	2f c0       	rjmp	.+94     	; 0x1aeb4 <lif_dir+0x1ae>
            }
            else
            {
                warn = '!';
                if(debuglevel & 0x400)
   1ae56:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <debuglevel>
   1ae5a:	50 91 be 01 	lds	r21, 0x01BE	; 0x8001be <debuglevel+0x1>
   1ae5e:	52 ff       	sbrs	r21, 2
   1ae60:	27 c0       	rjmp	.+78     	; 0x1aeb0 <lif_dir+0x1aa>
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1ae62:	19 01       	movw	r2, r18
   1ae64:	41 2c       	mov	r4, r1
   1ae66:	51 2c       	mov	r5, r1
   1ae68:	77 27       	eor	r23, r23
   1ae6a:	65 2d       	mov	r22, r5
   1ae6c:	54 2d       	mov	r21, r4
   1ae6e:	43 2d       	mov	r20, r3
    if(bytes % (long)LIF_SECTOR_SIZE)
   1ae70:	22 23       	and	r18, r18
   1ae72:	21 f0       	breq	.+8      	; 0x1ae7c <lif_dir+0x176>
        ++sectors;
   1ae74:	4f 5f       	subi	r20, 0xFF	; 255
   1ae76:	5f 4f       	sbci	r21, 0xFF	; 255
   1ae78:	6f 4f       	sbci	r22, 0xFF	; 255
   1ae7a:	7f 4f       	sbci	r23, 0xFF	; 255
            else
            {
                warn = '!';
                if(debuglevel & 0x400)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n", 
   1ae7c:	bf 93       	push	r27
   1ae7e:	af 93       	push	r26
   1ae80:	9f 93       	push	r25
   1ae82:	8f 93       	push	r24
   1ae84:	7f 93       	push	r23
   1ae86:	6f 93       	push	r22
   1ae88:	5f 93       	push	r21
   1ae8a:	4f 93       	push	r20
   1ae8c:	1f 92       	push	r1
   1ae8e:	1f 92       	push	r1
   1ae90:	3f 92       	push	r3
   1ae92:	2f 92       	push	r2
   1ae94:	fa 81       	ldd	r31, Y+2	; 0x02
   1ae96:	ff 93       	push	r31
   1ae98:	29 81       	ldd	r18, Y+1	; 0x01
   1ae9a:	2f 93       	push	r18
   1ae9c:	1f 92       	push	r1
   1ae9e:	7f 92       	push	r7
   1aea0:	6f 92       	push	r6
   1aea2:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1aea6:	0f b6       	in	r0, 0x3f	; 63
   1aea8:	f8 94       	cli
   1aeaa:	de bf       	out	0x3e, r29	; 62
   1aeac:	0f be       	out	0x3f, r0	; 63
   1aeae:	cd bf       	out	0x3d, r28	; 61
            {
                bytes = LIF->DIR.FileBytes;
            }
            else
            {
                warn = '!';
   1aeb0:	81 e2       	ldi	r24, 0x21	; 33
   1aeb2:	98 2e       	mov	r9, r24
            }
        }


        // name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n", 
   1aeb4:	8e 85       	ldd	r24, Y+14	; 0x0e
   1aeb6:	9f 85       	ldd	r25, Y+15	; 0x0f
   1aeb8:	0e 94 2e ca 	call	0x1945c	; 0x1945c <lif_lifbcd2timestr>
   1aebc:	ed 81       	ldd	r30, Y+5	; 0x05
   1aebe:	fe 81       	ldd	r31, Y+6	; 0x06
   1aec0:	a0 81       	ld	r26, Z
   1aec2:	b1 81       	ldd	r27, Z+1	; 0x01
   1aec4:	f5 01       	movw	r30, r10
   1aec6:	60 81       	ld	r22, Z
   1aec8:	71 81       	ldd	r23, Z+1	; 0x01
   1aeca:	52 80       	ldd	r5, Z+2	; 0x02
   1aecc:	43 80       	ldd	r4, Z+3	; 0x03
   1aece:	eb 81       	ldd	r30, Y+3	; 0x03
   1aed0:	fc 81       	ldd	r31, Y+4	; 0x04
   1aed2:	40 81       	ld	r20, Z
   1aed4:	51 81       	ldd	r21, Z+1	; 0x01
   1aed6:	41 15       	cp	r20, r1
   1aed8:	51 05       	cpc	r21, r1
   1aeda:	19 f0       	breq	.+6      	; 0x1aee2 <lif_dir+0x1dc>
   1aedc:	29 81       	ldd	r18, Y+1	; 0x01
   1aede:	3a 81       	ldd	r19, Y+2	; 0x02
   1aee0:	02 c0       	rjmp	.+4      	; 0x1aee6 <lif_dir+0x1e0>
   1aee2:	22 e0       	ldi	r18, 0x02	; 2
   1aee4:	36 e1       	ldi	r19, 0x16	; 22
   1aee6:	9f 93       	push	r25
   1aee8:	8f 93       	push	r24
   1aeea:	bf 93       	push	r27
   1aeec:	af 93       	push	r26
   1aeee:	1f 92       	push	r1
   1aef0:	9f 92       	push	r9
   1aef2:	ff 92       	push	r15
   1aef4:	ef 92       	push	r14
   1aef6:	df 92       	push	r13
   1aef8:	cf 92       	push	r12
   1aefa:	4f 92       	push	r4
   1aefc:	5f 92       	push	r5
   1aefe:	7f 93       	push	r23
   1af00:	6f 93       	push	r22
   1af02:	5f 93       	push	r21
   1af04:	4f 93       	push	r20
   1af06:	3f 93       	push	r19
   1af08:	2f 93       	push	r18
   1af0a:	1f 92       	push	r1
   1af0c:	f8 85       	ldd	r31, Y+8	; 0x08
   1af0e:	ff 93       	push	r31
   1af10:	2f 81       	ldd	r18, Y+7	; 0x07
   1af12:	2f 93       	push	r18
   1af14:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
            (long)bytes, 
            warn,
            (int)LIF->DIR.SectorSize,
            lif_lifbcd2timestr(LIF->DIR.date));

        ++index;
   1af18:	0f 5f       	subi	r16, 0xFF	; 255
   1af1a:	1f 4f       	sbci	r17, 0xFF	; 255
    }   
   1af1c:	0f b6       	in	r0, 0x3f	; 63
   1af1e:	f8 94       	cli
   1af20:	de bf       	out	0x3e, r29	; 62
   1af22:	0f be       	out	0x3f, r0	; 63
   1af24:	cd bf       	out	0x3d, r28	; 61
   1af26:	5c cf       	rjmp	.-328    	; 0x1ade0 <lif_dir+0xda>

    printf("\n");
   1af28:	84 ee       	ldi	r24, 0xE4	; 228
   1af2a:	99 e3       	ldi	r25, 0x39	; 57
   1af2c:	1f 92       	push	r1
   1af2e:	9f 93       	push	r25
   1af30:	8f 93       	push	r24
   1af32:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    printf("%8ld Files\n", (long)LIF->files);
   1af36:	e8 89       	ldd	r30, Y+16	; 0x10
   1af38:	f9 89       	ldd	r31, Y+17	; 0x11
   1af3a:	84 8d       	ldd	r24, Z+28	; 0x1c
   1af3c:	95 8d       	ldd	r25, Z+29	; 0x1d
   1af3e:	09 2e       	mov	r0, r25
   1af40:	00 0c       	add	r0, r0
   1af42:	aa 0b       	sbc	r26, r26
   1af44:	bb 0b       	sbc	r27, r27
   1af46:	bf 93       	push	r27
   1af48:	af 93       	push	r26
   1af4a:	9f 93       	push	r25
   1af4c:	8f 93       	push	r24
   1af4e:	88 ed       	ldi	r24, 0xD8	; 216
   1af50:	99 e3       	ldi	r25, 0x39	; 57
   1af52:	1f 92       	push	r1
   1af54:	9f 93       	push	r25
   1af56:	8f 93       	push	r24
   1af58:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    printf("%8ld Purged\n", (long)LIF->purged);
   1af5c:	e8 89       	ldd	r30, Y+16	; 0x10
   1af5e:	f9 89       	ldd	r31, Y+17	; 0x11
   1af60:	86 8d       	ldd	r24, Z+30	; 0x1e
   1af62:	97 8d       	ldd	r25, Z+31	; 0x1f
   1af64:	09 2e       	mov	r0, r25
   1af66:	00 0c       	add	r0, r0
   1af68:	aa 0b       	sbc	r26, r26
   1af6a:	bb 0b       	sbc	r27, r27
   1af6c:	bf 93       	push	r27
   1af6e:	af 93       	push	r26
   1af70:	9f 93       	push	r25
   1af72:	8f 93       	push	r24
   1af74:	8b ec       	ldi	r24, 0xCB	; 203
   1af76:	99 e3       	ldi	r25, 0x39	; 57
   1af78:	1f 92       	push	r1
   1af7a:	9f 93       	push	r25
   1af7c:	8f 93       	push	r24
   1af7e:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
   1af82:	e8 89       	ldd	r30, Y+16	; 0x10
   1af84:	f9 89       	ldd	r31, Y+17	; 0x11
   1af86:	87 89       	ldd	r24, Z+23	; 0x17
   1af88:	8f 93       	push	r24
   1af8a:	86 89       	ldd	r24, Z+22	; 0x16
   1af8c:	8f 93       	push	r24
   1af8e:	85 89       	ldd	r24, Z+21	; 0x15
   1af90:	8f 93       	push	r24
   1af92:	84 89       	ldd	r24, Z+20	; 0x14
   1af94:	8f 93       	push	r24
   1af96:	88 eb       	ldi	r24, 0xB8	; 184
   1af98:	99 e3       	ldi	r25, 0x39	; 57
   1af9a:	1f 92       	push	r1
   1af9c:	9f 93       	push	r25
   1af9e:	8f 93       	push	r24
   1afa0:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    printf("%8ld Free sectors\n", (long)LIF->freesectors);
   1afa4:	e8 89       	ldd	r30, Y+16	; 0x10
   1afa6:	f9 89       	ldd	r31, Y+17	; 0x11
   1afa8:	83 8d       	ldd	r24, Z+27	; 0x1b
   1afaa:	8f 93       	push	r24
   1afac:	82 8d       	ldd	r24, Z+26	; 0x1a
   1afae:	8f 93       	push	r24
   1afb0:	81 8d       	ldd	r24, Z+25	; 0x19
   1afb2:	8f 93       	push	r24
   1afb4:	80 8d       	ldd	r24, Z+24	; 0x18
   1afb6:	8f 93       	push	r24
   1afb8:	85 ea       	ldi	r24, 0xA5	; 165
   1afba:	99 e3       	ldi	r25, 0x39	; 57
   1afbc:	1f 92       	push	r1
   1afbe:	9f 93       	push	r25
   1afc0:	8f 93       	push	r24
   1afc2:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1afc6:	88 89       	ldd	r24, Y+16	; 0x10
   1afc8:	99 89       	ldd	r25, Y+17	; 0x11
   1afca:	0e 94 8b ce 	call	0x19d16	; 0x19d16 <lif_close_volume>
   1afce:	0f b6       	in	r0, 0x3f	; 63
   1afd0:	f8 94       	cli
   1afd2:	de bf       	out	0x3e, r29	; 62
   1afd4:	0f be       	out	0x3f, r0	; 63
   1afd6:	cd bf       	out	0x3d, r28	; 61
    printf("%8ld Purged\n", (long)LIF->purged);
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
    printf("%8ld Free sectors\n", (long)LIF->freesectors);

    lif_closedir(LIF);
}
   1afd8:	61 96       	adiw	r28, 0x11	; 17
   1afda:	e2 e1       	ldi	r30, 0x12	; 18
   1afdc:	0c 94 2f e8 	jmp	0x1d05e	; 0x1d05e <__epilogue_restores__>

0001afe0 <lif_find_file>:
/// @param[in] *LIF: directory pointer
/// @param[in] liflabel: File name in LIF image
/// @return Directory index of record
MEMSPACE
int lif_find_file(lif_t *LIF, char *liflabel)
{
   1afe0:	a0 e0       	ldi	r26, 0x00	; 0
   1afe2:	b0 e0       	ldi	r27, 0x00	; 0
   1afe4:	e6 ef       	ldi	r30, 0xF6	; 246
   1afe6:	f7 ed       	ldi	r31, 0xD7	; 215
   1afe8:	0c 94 1b e8 	jmp	0x1d036	; 0x1d036 <__prologue_saves__+0x10>
   1afec:	7c 01       	movw	r14, r24
   1afee:	16 2f       	mov	r17, r22
   1aff0:	07 2f       	mov	r16, r23
    int index;

    if( !lif_checkname(liflabel) )
   1aff2:	86 2f       	mov	r24, r22
   1aff4:	97 2f       	mov	r25, r23
   1aff6:	0e 94 ff c6 	call	0x18dfe	; 0x18dfe <lif_checkname>
   1affa:	89 2b       	or	r24, r25
   1affc:	49 f4       	brne	.+18     	; 0x1b010 <lif_find_file+0x30>
    {
        if(debuglevel & 1)
   1affe:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1b002:	80 ff       	sbrs	r24, 0
   1b004:	48 c0       	rjmp	.+144    	; 0x1b096 <lif_find_file+0xb6>
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
   1b006:	0f 93       	push	r16
   1b008:	1f 93       	push	r17
   1b00a:	8e e7       	ldi	r24, 0x7E	; 126
   1b00c:	99 e3       	ldi	r25, 0x39	; 57
   1b00e:	13 c0       	rjmp	.+38     	; 0x1b036 <lif_find_file+0x56>
        return(-1);
    }
    if(strlen(liflabel) > 10)
   1b010:	a1 2f       	mov	r26, r17
   1b012:	b0 2f       	mov	r27, r16
   1b014:	fd 01       	movw	r30, r26
   1b016:	01 90       	ld	r0, Z+
   1b018:	00 20       	and	r0, r0
   1b01a:	e9 f7       	brne	.-6      	; 0x1b016 <lif_find_file+0x36>
   1b01c:	31 97       	sbiw	r30, 0x01	; 1
   1b01e:	ea 1b       	sub	r30, r26
   1b020:	fb 0b       	sbc	r31, r27
   1b022:	3b 97       	sbiw	r30, 0x0b	; 11
   1b024:	98 f0       	brcs	.+38     	; 0x1b04c <lif_find_file+0x6c>
    {
        if(debuglevel & 1)
   1b026:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1b02a:	80 ff       	sbrs	r24, 0
   1b02c:	34 c0       	rjmp	.+104    	; 0x1b096 <lif_find_file+0xb6>
            printf("lif_find_file:[%s] liflabel too big\n", liflabel);
   1b02e:	0f 93       	push	r16
   1b030:	1f 93       	push	r17
   1b032:	89 e5       	ldi	r24, 0x59	; 89
   1b034:	99 e3       	ldi	r25, 0x39	; 57
   1b036:	1f 92       	push	r1
   1b038:	9f 93       	push	r25
   1b03a:	8f 93       	push	r24
   1b03c:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1b040:	0f 90       	pop	r0
   1b042:	0f 90       	pop	r0
   1b044:	0f 90       	pop	r0
   1b046:	0f 90       	pop	r0
   1b048:	0f 90       	pop	r0
   1b04a:	25 c0       	rjmp	.+74     	; 0x1b096 <lif_find_file+0xb6>
        return(-1);
    }

    if(LIF == NULL)
   1b04c:	e1 14       	cp	r14, r1
   1b04e:	f1 04       	cpc	r15, r1
   1b050:	11 f1       	breq	.+68     	; 0x1b096 <lif_find_file+0xb6>
   1b052:	c0 e0       	ldi	r28, 0x00	; 0
   1b054:	d0 e0       	ldi	r29, 0x00	; 0
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1b056:	67 01       	movw	r12, r14
   1b058:	2a e5       	ldi	r18, 0x5A	; 90
   1b05a:	c2 0e       	add	r12, r18
   1b05c:	d1 1c       	adc	r13, r1
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1b05e:	57 01       	movw	r10, r14
   1b060:	8f e4       	ldi	r24, 0x4F	; 79
   1b062:	a8 0e       	add	r10, r24
   1b064:	b1 1c       	adc	r11, r1
        return(-1);
    
    index = 0;
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
   1b066:	be 01       	movw	r22, r28
   1b068:	c7 01       	movw	r24, r14
   1b06a:	0e 94 0c cf 	call	0x19e18	; 0x19e18 <lif_readdirindex>
   1b06e:	89 2b       	or	r24, r25
   1b070:	91 f0       	breq	.+36     	; 0x1b096 <lif_find_file+0xb6>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1b072:	f6 01       	movw	r30, r12
   1b074:	80 81       	ld	r24, Z
   1b076:	91 81       	ldd	r25, Z+1	; 0x01
   1b078:	8f 3f       	cpi	r24, 0xFF	; 255
   1b07a:	ff ef       	ldi	r31, 0xFF	; 255
   1b07c:	9f 07       	cpc	r25, r31
   1b07e:	59 f0       	breq	.+22     	; 0x1b096 <lif_find_file+0xb6>
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1b080:	89 2b       	or	r24, r25
   1b082:	39 f0       	breq	.+14     	; 0x1b092 <lif_find_file+0xb2>
   1b084:	61 2f       	mov	r22, r17
   1b086:	70 2f       	mov	r23, r16
   1b088:	c5 01       	movw	r24, r10
   1b08a:	0e 94 ad 32 	call	0x655a	; 0x655a <strcasecmp>
   1b08e:	89 2b       	or	r24, r25
   1b090:	29 f0       	breq	.+10     	; 0x1b09c <lif_find_file+0xbc>
            break;
        ++index;
   1b092:	21 96       	adiw	r28, 0x01	; 1
   1b094:	e8 cf       	rjmp	.-48     	; 0x1b066 <lif_find_file+0x86>

    if( !lif_checkname(liflabel) )
    {
        if(debuglevel & 1)
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
        return(-1);
   1b096:	8f ef       	ldi	r24, 0xFF	; 255
   1b098:	9f ef       	ldi	r25, 0xFF	; 255
   1b09a:	01 c0       	rjmp	.+2      	; 0x1b09e <lif_find_file+0xbe>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1b09c:	ce 01       	movw	r24, r28
            break;
        ++index;
    }
    return(index);
}
   1b09e:	cd b7       	in	r28, 0x3d	; 61
   1b0a0:	de b7       	in	r29, 0x3e	; 62
   1b0a2:	ea e0       	ldi	r30, 0x0A	; 10
   1b0a4:	0c 94 37 e8 	jmp	0x1d06e	; 0x1d06e <__epilogue_restores__+0x10>

0001b0a8 <lif_e010_pad_sector>:
/// @param[in] offset: sector offset
/// @param[in] wbuf: E010 PAD data
/// @return size of E010 PAD data
MEMSPACE
int lif_e010_pad_sector(long offset, uint8_t *wbuf)
{
   1b0a8:	a0 e0       	ldi	r26, 0x00	; 0
   1b0aa:	b0 e0       	ldi	r27, 0x00	; 0
   1b0ac:	ea e5       	ldi	r30, 0x5A	; 90
   1b0ae:	f8 ed       	ldi	r31, 0xD8	; 216
   1b0b0:	0c 94 1d e8 	jmp	0x1d03a	; 0x1d03a <__prologue_saves__+0x14>
   1b0b4:	6b 01       	movw	r12, r22
   1b0b6:	7c 01       	movw	r14, r24
   1b0b8:	8a 01       	movw	r16, r20
    int ind;
    int pos,rem;
    
    // Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
   1b0ba:	20 e0       	ldi	r18, 0x00	; 0
   1b0bc:	31 e0       	ldi	r19, 0x01	; 1
   1b0be:	40 e0       	ldi	r20, 0x00	; 0
   1b0c0:	50 e0       	ldi	r21, 0x00	; 0
   1b0c2:	0e 94 b3 e7 	call	0x1cf66	; 0x1cf66 <__divmodsi4>
    if(!pos)
   1b0c6:	61 15       	cp	r22, r1
   1b0c8:	71 05       	cpc	r23, r1
   1b0ca:	e1 f1       	breq	.+120    	; 0x1b144 <lif_e010_pad_sector+0x9c>
        return(0);

    // Number of bytes free in this sector
    rem = (long)LIF_SECTOR_SIZE - (long)pos;
   1b0cc:	c0 e0       	ldi	r28, 0x00	; 0
   1b0ce:	d1 e0       	ldi	r29, 0x01	; 1
   1b0d0:	c6 1b       	sub	r28, r22
   1b0d2:	d7 0b       	sbc	r29, r23

    // Bytes written to wbuf
    ind = 0;
    // PAD
    wbuf[ind++] = 0xEF;
   1b0d4:	f8 01       	movw	r30, r16
   1b0d6:	8f ee       	ldi	r24, 0xEF	; 239
   1b0d8:	81 93       	st	Z+, r24
    while(ind<rem)
        wbuf[ind++] = 0xff;
   1b0da:	2f ef       	ldi	r18, 0xFF	; 255

    // Bytes written to wbuf
    ind = 0;
    // PAD
    wbuf[ind++] = 0xEF;
    while(ind<rem)
   1b0dc:	cf 01       	movw	r24, r30
   1b0de:	80 1b       	sub	r24, r16
   1b0e0:	91 0b       	sbc	r25, r17
   1b0e2:	8c 17       	cp	r24, r28
   1b0e4:	9d 07       	cpc	r25, r29
   1b0e6:	14 f4       	brge	.+4      	; 0x1b0ec <lif_e010_pad_sector+0x44>
        wbuf[ind++] = 0xff;
   1b0e8:	21 93       	st	Z+, r18
   1b0ea:	f8 cf       	rjmp	.-16     	; 0x1b0dc <lif_e010_pad_sector+0x34>
   1b0ec:	1c 16       	cp	r1, r28
   1b0ee:	1d 06       	cpc	r1, r29
   1b0f0:	14 f0       	brlt	.+4      	; 0x1b0f6 <lif_e010_pad_sector+0x4e>
   1b0f2:	c1 e0       	ldi	r28, 0x01	; 1
   1b0f4:	d0 e0       	ldi	r29, 0x00	; 0

    pos = (offset + (long) ind)  % (long) LIF_SECTOR_SIZE;
   1b0f6:	ce 01       	movw	r24, r28
   1b0f8:	0d 2e       	mov	r0, r29
   1b0fa:	00 0c       	add	r0, r0
   1b0fc:	aa 0b       	sbc	r26, r26
   1b0fe:	bb 0b       	sbc	r27, r27
   1b100:	bc 01       	movw	r22, r24
   1b102:	cd 01       	movw	r24, r26
   1b104:	6c 0d       	add	r22, r12
   1b106:	7d 1d       	adc	r23, r13
   1b108:	8e 1d       	adc	r24, r14
   1b10a:	9f 1d       	adc	r25, r15
   1b10c:	20 e0       	ldi	r18, 0x00	; 0
   1b10e:	31 e0       	ldi	r19, 0x01	; 1
   1b110:	40 e0       	ldi	r20, 0x00	; 0
   1b112:	50 e0       	ldi	r21, 0x00	; 0
   1b114:	0e 94 b3 e7 	call	0x1cf66	; 0x1cf66 <__divmodsi4>
    // NEW SECTOR
    // Debugging make sure we are at sector boundry
    if(pos)
   1b118:	61 15       	cp	r22, r1
   1b11a:	71 05       	cpc	r23, r1
   1b11c:	b1 f0       	breq	.+44     	; 0x1b14a <lif_e010_pad_sector+0xa2>
    {
        if(debuglevel & 1)
   1b11e:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1b122:	20 ff       	sbrs	r18, 0
   1b124:	14 c0       	rjmp	.+40     	; 0x1b14e <lif_e010_pad_sector+0xa6>
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
   1b126:	7f 93       	push	r23
   1b128:	6f 93       	push	r22
   1b12a:	80 e2       	ldi	r24, 0x20	; 32
   1b12c:	99 e3       	ldi	r25, 0x39	; 57
   1b12e:	1f 92       	push	r1
   1b130:	9f 93       	push	r25
   1b132:	8f 93       	push	r24
   1b134:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1b138:	0f 90       	pop	r0
   1b13a:	0f 90       	pop	r0
   1b13c:	0f 90       	pop	r0
   1b13e:	0f 90       	pop	r0
   1b140:	0f 90       	pop	r0
   1b142:	05 c0       	rjmp	.+10     	; 0x1b14e <lif_e010_pad_sector+0xa6>
    int pos,rem;
    
    // Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
    if(!pos)
        return(0);
   1b144:	80 e0       	ldi	r24, 0x00	; 0
   1b146:	90 e0       	ldi	r25, 0x00	; 0
   1b148:	04 c0       	rjmp	.+8      	; 0x1b152 <lif_e010_pad_sector+0xaa>
   1b14a:	ce 01       	movw	r24, r28
   1b14c:	02 c0       	rjmp	.+4      	; 0x1b152 <lif_e010_pad_sector+0xaa>
    // Debugging make sure we are at sector boundry
    if(pos)
    {
        if(debuglevel & 1)
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
        return(-1);
   1b14e:	8f ef       	ldi	r24, 0xFF	; 255
   1b150:	9f ef       	ldi	r25, 0xFF	; 255
    }
    return(ind);
}
   1b152:	cd b7       	in	r28, 0x3d	; 61
   1b154:	de b7       	in	r29, 0x3e	; 62
   1b156:	e8 e0       	ldi	r30, 0x08	; 8
   1b158:	0c 94 39 e8 	jmp	0x1d072	; 0x1d072 <__epilogue_restores__+0x14>

0001b15c <lif_ascii_string_to_e010>:
/// @param[in] offset: E010 data sector offset, only used in formatting wbuf with headers
/// @param[in] wbuf: E010 data result
/// @return size of E010 data
MEMSPACE
int lif_ascii_string_to_e010(char *str, long offset, uint8_t *wbuf)
{
   1b15c:	a0 e0       	ldi	r26, 0x00	; 0
   1b15e:	b0 e0       	ldi	r27, 0x00	; 0
   1b160:	e4 eb       	ldi	r30, 0xB4	; 180
   1b162:	f8 ed       	ldi	r31, 0xD8	; 216
   1b164:	0c 94 13 e8 	jmp	0x1d026	; 0x1d026 <__prologue_saves__>
   1b168:	ec 01       	movw	r28, r24
   1b16a:	4a 01       	movw	r8, r20
   1b16c:	5b 01       	movw	r10, r22
   1b16e:	79 01       	movw	r14, r18
    int ind;
    int len;
    int pos,rem;
    
    // String size
    len = strlen(str);
   1b170:	fc 01       	movw	r30, r24
   1b172:	01 90       	ld	r0, Z+
   1b174:	00 20       	and	r0, r0
   1b176:	e9 f7       	brne	.-6      	; 0x1b172 <lif_ascii_string_to_e010+0x16>
   1b178:	31 97       	sbiw	r30, 0x01	; 1
   1b17a:	6f 01       	movw	r12, r30
   1b17c:	c8 1a       	sub	r12, r24
   1b17e:	d9 0a       	sbc	r13, r25
    ind = 0;

    // Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
    // Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1b180:	41 2c       	mov	r4, r1
   1b182:	51 2c       	mov	r5, r1
   1b184:	32 01       	movw	r6, r4
   1b186:	53 94       	inc	r5
   1b188:	cb 01       	movw	r24, r22
   1b18a:	ba 01       	movw	r22, r20
   1b18c:	a3 01       	movw	r20, r6
   1b18e:	92 01       	movw	r18, r4
   1b190:	0e 94 b3 e7 	call	0x1cf66	; 0x1cf66 <__divmodsi4>
   1b194:	21 2c       	mov	r2, r1
   1b196:	33 24       	eor	r3, r3
   1b198:	33 94       	inc	r3
   1b19a:	c1 01       	movw	r24, r2
   1b19c:	86 1b       	sub	r24, r22
   1b19e:	97 0b       	sbc	r25, r23

    /// We ALWAYS pad a sector if:
    ///   There is no room for a 0xdf single header 
    ///   - OR - 
    ///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
   1b1a0:	86 30       	cpi	r24, 0x06	; 6
   1b1a2:	91 05       	cpc	r25, r1
   1b1a4:	20 f0       	brcs	.+8      	; 0x1b1ae <lif_ascii_string_to_e010+0x52>
    ind = 0;

    // Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
    // Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1b1a6:	1c 01       	movw	r2, r24
    
    // String size
    len = strlen(str);

    // Output buffer index
    ind = 0;
   1b1a8:	00 e0       	ldi	r16, 0x00	; 0
   1b1aa:	10 e0       	ldi	r17, 0x00	; 0
   1b1ac:	17 c0       	rjmp	.+46     	; 0x1b1dc <lif_ascii_string_to_e010+0x80>
    ///   There is no room for a 0xdf single header 
    ///   - OR - 
    ///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
    {
        ind = lif_e010_pad_sector(offset, wbuf);
   1b1ae:	a7 01       	movw	r20, r14
   1b1b0:	c5 01       	movw	r24, r10
   1b1b2:	b4 01       	movw	r22, r8
   1b1b4:	79 df       	rcall	.-270    	; 0x1b0a8 <lif_e010_pad_sector>
   1b1b6:	8c 01       	movw	r16, r24
        if(ind < 0)
   1b1b8:	97 fd       	sbrc	r25, 7
   1b1ba:	84 c0       	rjmp	.+264    	; 0x1b2c4 <lif_ascii_string_to_e010+0x168>
            return(ind);

        // Compute the current offset in this sector
        pos = ((offset + ind) % (long) LIF_SECTOR_SIZE);
        // Number of bytes free in this sector
        rem = (long) LIF_SECTOR_SIZE - pos;
   1b1bc:	09 2e       	mov	r0, r25
   1b1be:	00 0c       	add	r0, r0
   1b1c0:	aa 0b       	sbc	r26, r26
   1b1c2:	bb 0b       	sbc	r27, r27
   1b1c4:	bc 01       	movw	r22, r24
   1b1c6:	cd 01       	movw	r24, r26
   1b1c8:	68 0d       	add	r22, r8
   1b1ca:	79 1d       	adc	r23, r9
   1b1cc:	8a 1d       	adc	r24, r10
   1b1ce:	9b 1d       	adc	r25, r11
   1b1d0:	a3 01       	movw	r20, r6
   1b1d2:	92 01       	movw	r18, r4
   1b1d4:	0e 94 b3 e7 	call	0x1cf66	; 0x1cf66 <__divmodsi4>
   1b1d8:	26 1a       	sub	r2, r22
   1b1da:	37 0a       	sbc	r3, r23
   1b1dc:	f7 01       	movw	r30, r14
   1b1de:	e0 0f       	add	r30, r16
   1b1e0:	f1 1f       	adc	r31, r17
   1b1e2:	0d 5f       	subi	r16, 0xFD	; 253
   1b1e4:	1f 4f       	sbci	r17, 0xFF	; 255
    }

    // Note: IMPORTANT we have >= 6 bytes!!!

    // Do not have to split, there is enough room
    if(rem >= (3 + len)) 
   1b1e6:	c6 01       	movw	r24, r12
   1b1e8:	02 96       	adiw	r24, 0x02	; 2
   1b1ea:	82 15       	cp	r24, r2
   1b1ec:	93 05       	cpc	r25, r3
   1b1ee:	84 f4       	brge	.+32     	; 0x1b210 <lif_ascii_string_to_e010+0xb4>
    {

        // Write string in new sector
        // The full string + header will fit
        wbuf[ind++] = 0xDF;
   1b1f0:	8f ed       	ldi	r24, 0xDF	; 223
   1b1f2:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1b1f4:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >> 8) & 0xff;
   1b1f6:	d2 82       	std	Z+2, r13	; 0x02
   1b1f8:	f7 01       	movw	r30, r14
   1b1fa:	e0 0f       	add	r30, r16
   1b1fc:	f1 1f       	adc	r31, r17
   1b1fe:	cf 01       	movw	r24, r30
   1b200:	8e 19       	sub	r24, r14
   1b202:	9f 09       	sbc	r25, r15
        // Write string
        while(*str)
   1b204:	29 91       	ld	r18, Y+
   1b206:	22 23       	and	r18, r18
   1b208:	09 f4       	brne	.+2      	; 0x1b20c <lif_ascii_string_to_e010+0xb0>
   1b20a:	5c c0       	rjmp	.+184    	; 0x1b2c4 <lif_ascii_string_to_e010+0x168>
            wbuf[ind++] = *str++;
   1b20c:	21 93       	st	Z+, r18
   1b20e:	f7 cf       	rjmp	.-18     	; 0x1b1fe <lif_ascii_string_to_e010+0xa2>

        // CURRENT SECTOR
        // String spans a sector , so split the string

        // 1st Split string header
        wbuf[ind++] = 0xCF;
   1b210:	8f ec       	ldi	r24, 0xCF	; 207
   1b212:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1b214:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >>8) & 0xff;
   1b216:	d2 82       	std	Z+2, r13	; 0x02
   1b218:	d7 01       	movw	r26, r14
   1b21a:	a0 0f       	add	r26, r16
   1b21c:	b1 1f       	adc	r27, r17
        // Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1b21e:	fe 01       	movw	r30, r28
   1b220:	81 91       	ld	r24, Z+
   1b222:	81 11       	cpse	r24, r1
   1b224:	0e c0       	rjmp	.+28     	; 0x1b242 <lif_ascii_string_to_e010+0xe6>
            wbuf[ind++] = *str++;

        // NEW SECTOR
        // Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
   1b226:	c8 01       	movw	r24, r16
   1b228:	01 2e       	mov	r0, r17
   1b22a:	00 0c       	add	r0, r0
   1b22c:	aa 0b       	sbc	r26, r26
   1b22e:	bb 0b       	sbc	r27, r27
   1b230:	bc 01       	movw	r22, r24
   1b232:	cd 01       	movw	r24, r26
   1b234:	68 0d       	add	r22, r8
   1b236:	79 1d       	adc	r23, r9
   1b238:	8a 1d       	adc	r24, r10
   1b23a:	9b 1d       	adc	r25, r11
   1b23c:	61 11       	cpse	r22, r1
   1b23e:	09 c0       	rjmp	.+18     	; 0x1b252 <lif_ascii_string_to_e010+0xf6>
   1b240:	21 c0       	rjmp	.+66     	; 0x1b284 <lif_ascii_string_to_e010+0x128>
        // 1st Split string header
        wbuf[ind++] = 0xCF;
        wbuf[ind++] = len & 0xff;
        wbuf[ind++] = (len >>8) & 0xff;
        // Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1b242:	02 15       	cp	r16, r2
   1b244:	13 05       	cpc	r17, r3
   1b246:	7c f7       	brge	.-34     	; 0x1b226 <lif_ascii_string_to_e010+0xca>
            wbuf[ind++] = *str++;
   1b248:	0f 5f       	subi	r16, 0xFF	; 255
   1b24a:	1f 4f       	sbci	r17, 0xFF	; 255
   1b24c:	8d 93       	st	X+, r24
   1b24e:	ef 01       	movw	r28, r30
   1b250:	e6 cf       	rjmp	.-52     	; 0x1b21e <lif_ascii_string_to_e010+0xc2>

        // NEW SECTOR
        // Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & 1)
   1b252:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1b256:	20 ff       	sbrs	r18, 0
   1b258:	33 c0       	rjmp	.+102    	; 0x1b2c0 <lif_ascii_string_to_e010+0x164>
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
   1b25a:	20 e0       	ldi	r18, 0x00	; 0
   1b25c:	31 e0       	ldi	r19, 0x01	; 1
   1b25e:	40 e0       	ldi	r20, 0x00	; 0
   1b260:	50 e0       	ldi	r21, 0x00	; 0
   1b262:	0e 94 b3 e7 	call	0x1cf66	; 0x1cf66 <__divmodsi4>
   1b266:	7f 93       	push	r23
   1b268:	6f 93       	push	r22
   1b26a:	8c ef       	ldi	r24, 0xFC	; 252
   1b26c:	98 e3       	ldi	r25, 0x38	; 56
   1b26e:	1f 92       	push	r1
   1b270:	9f 93       	push	r25
   1b272:	8f 93       	push	r24
   1b274:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1b278:	0f 90       	pop	r0
   1b27a:	0f 90       	pop	r0
   1b27c:	0f 90       	pop	r0
   1b27e:	0f 90       	pop	r0
   1b280:	0f 90       	pop	r0
   1b282:	1e c0       	rjmp	.+60     	; 0x1b2c0 <lif_ascii_string_to_e010+0x164>
            return(-1);
        }

        // Update remining string length
        len = strlen(str);
   1b284:	fe 01       	movw	r30, r28
   1b286:	01 90       	ld	r0, Z+
   1b288:	00 20       	and	r0, r0
   1b28a:	e9 f7       	brne	.-6      	; 0x1b286 <lif_ascii_string_to_e010+0x12a>
   1b28c:	31 97       	sbiw	r30, 0x01	; 1
   1b28e:	ec 1b       	sub	r30, r28
   1b290:	fd 0b       	sbc	r31, r29
        // 2nd Split string header 
        wbuf[ind++] = 0x6F;
   1b292:	d7 01       	movw	r26, r14
   1b294:	a0 0f       	add	r26, r16
   1b296:	b1 1f       	adc	r27, r17
   1b298:	8f e6       	ldi	r24, 0x6F	; 111
   1b29a:	8c 93       	st	X, r24
        wbuf[ind++] = (len & 0xff);
   1b29c:	11 96       	adiw	r26, 0x01	; 1
   1b29e:	ec 93       	st	X, r30
   1b2a0:	11 97       	sbiw	r26, 0x01	; 1
        wbuf[ind++] = (len>>8) & 0xff;
   1b2a2:	12 96       	adiw	r26, 0x02	; 2
   1b2a4:	fc 93       	st	X, r31
   1b2a6:	0d 5f       	subi	r16, 0xFD	; 253
   1b2a8:	1f 4f       	sbci	r17, 0xFF	; 255
   1b2aa:	f7 01       	movw	r30, r14
   1b2ac:	e0 0f       	add	r30, r16
   1b2ae:	f1 1f       	adc	r31, r17
   1b2b0:	cf 01       	movw	r24, r30
   1b2b2:	8e 19       	sub	r24, r14
   1b2b4:	9f 09       	sbc	r25, r15
        // Write string
        while(*str)
   1b2b6:	29 91       	ld	r18, Y+
   1b2b8:	22 23       	and	r18, r18
   1b2ba:	21 f0       	breq	.+8      	; 0x1b2c4 <lif_ascii_string_to_e010+0x168>
            wbuf[ind++] = *str++;
   1b2bc:	21 93       	st	Z+, r18
   1b2be:	f8 cf       	rjmp	.-16     	; 0x1b2b0 <lif_ascii_string_to_e010+0x154>
        // Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & 1)
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
            return(-1);
   1b2c0:	8f ef       	ldi	r24, 0xFF	; 255
   1b2c2:	9f ef       	ldi	r25, 0xFF	; 255
        while(*str)
            wbuf[ind++] = *str++;
    }

    return(ind);
}
   1b2c4:	cd b7       	in	r28, 0x3d	; 61
   1b2c6:	de b7       	in	r29, 0x3e	; 62
   1b2c8:	e2 e1       	ldi	r30, 0x12	; 18
   1b2ca:	0c 94 2f e8 	jmp	0x1d05e	; 0x1d05e <__epilogue_restores__>

0001b2ce <lif_add_ascii_file_as_e010_wrapper>:
/// @param[in] userfile: User ASCII file source
/// @param[in] *LIF: Where to write file if set (not NULL)
/// @return size of formatted result
MEMSPACE
long lif_add_ascii_file_as_e010_wrapper(lif_t *LIF, uint32_t offset, char *username)
{
   1b2ce:	a6 e0       	ldi	r26, 0x06	; 6
   1b2d0:	b3 e0       	ldi	r27, 0x03	; 3
   1b2d2:	ed e6       	ldi	r30, 0x6D	; 109
   1b2d4:	f9 ed       	ldi	r31, 0xD9	; 217
   1b2d6:	0c 94 13 e8 	jmp	0x1d026	; 0x1d026 <__prologue_saves__>
   1b2da:	7c 01       	movw	r14, r24
   1b2dc:	4a 01       	movw	r8, r20
   1b2de:	5b 01       	movw	r10, r22
   1b2e0:	c9 01       	movw	r24, r18
    // strings are limited to less then this
    char str[LIF_SECTOR_SIZE+1];
    // output buffer must be larger then a single sectors because of either headers or padding
    uint8_t obuf[LIF_SECTOR_SIZE*2];

    fi = lif_open(username, "rb");
   1b2e2:	60 e7       	ldi	r22, 0x70	; 112
   1b2e4:	78 e0       	ldi	r23, 0x08	; 8
   1b2e6:	0e 94 6d c5 	call	0x18ada	; 0x18ada <lif_open>
   1b2ea:	6c 01       	movw	r12, r24
    if(fi == NULL)
   1b2ec:	89 2b       	or	r24, r25
   1b2ee:	09 f4       	brne	.+2      	; 0x1b2f2 <lif_add_ascii_file_as_e010_wrapper+0x24>
   1b2f0:	6b c0       	rjmp	.+214    	; 0x1b3c8 <lif_add_ascii_file_as_e010_wrapper+0xfa>
   1b2f2:	21 2c       	mov	r2, r1
   1b2f4:	31 2c       	mov	r3, r1
   1b2f6:	41 2c       	mov	r4, r1
   1b2f8:	51 2c       	mov	r5, r1
   1b2fa:	32 01       	movw	r6, r4

        if(count > 256)
        {       
            count = 0;
            if(LIF)
                printf("Wrote: %8ld\r", (long)bytes);
   1b2fc:	8f ee       	ldi	r24, 0xEF	; 239
   1b2fe:	98 e3       	ldi	r25, 0x38	; 56
   1b300:	9c 01       	movw	r18, r24
   1b302:	40 e0       	ldi	r20, 0x00	; 0
   1b304:	cc 5f       	subi	r28, 0xFC	; 252
   1b306:	dc 4f       	sbci	r29, 0xFC	; 252
   1b308:	28 83       	st	Y, r18
   1b30a:	39 83       	std	Y+1, r19	; 0x01
   1b30c:	4a 83       	std	Y+2, r20	; 0x02
   1b30e:	c4 50       	subi	r28, 0x04	; 4
   1b310:	d3 40       	sbci	r29, 0x03	; 3
   1b312:	1a c0       	rjmp	.+52     	; 0x1b348 <lif_add_ascii_file_as_e010_wrapper+0x7a>
                fclose(fi);
                return(-1);
            }
        }

        offset += size;
   1b314:	ce 5f       	subi	r28, 0xFE	; 254
   1b316:	dc 4f       	sbci	r29, 0xFC	; 252
   1b318:	28 81       	ld	r18, Y
   1b31a:	39 81       	ldd	r19, Y+1	; 0x01
   1b31c:	c2 50       	subi	r28, 0x02	; 2
   1b31e:	d3 40       	sbci	r29, 0x03	; 3
   1b320:	c9 01       	movw	r24, r18
   1b322:	03 2e       	mov	r0, r19
   1b324:	00 0c       	add	r0, r0
   1b326:	aa 0b       	sbc	r26, r26
   1b328:	bb 0b       	sbc	r27, r27
   1b32a:	88 0e       	add	r8, r24
   1b32c:	99 1e       	adc	r9, r25
   1b32e:	aa 1e       	adc	r10, r26
   1b330:	bb 1e       	adc	r11, r27
        bytes += size;
   1b332:	48 0e       	add	r4, r24
   1b334:	59 1e       	adc	r5, r25
   1b336:	6a 1e       	adc	r6, r26
   1b338:	7b 1e       	adc	r7, r27
        count += size;
   1b33a:	22 0e       	add	r2, r18
   1b33c:	33 1e       	adc	r3, r19

        if(count > 256)
   1b33e:	31 e0       	ldi	r19, 0x01	; 1
   1b340:	23 16       	cp	r2, r19
   1b342:	33 06       	cpc	r3, r19
   1b344:	0c f0       	brlt	.+2      	; 0x1b348 <lif_add_ascii_file_as_e010_wrapper+0x7a>
   1b346:	45 c0       	rjmp	.+138    	; 0x1b3d2 <lif_add_ascii_file_as_e010_wrapper+0x104>
    bytes = 0;
    count = 0;

    // Read user file and write LIF records
    // reserve 3 + LIF header bytes + 1 (EOS)
    while( fgets((char *)str,(int)sizeof(str) - 4, fi) != NULL )
   1b348:	a6 01       	movw	r20, r12
   1b34a:	6d ef       	ldi	r22, 0xFD	; 253
   1b34c:	70 e0       	ldi	r23, 0x00	; 0
   1b34e:	ce 01       	movw	r24, r28
   1b350:	8f 5f       	subi	r24, 0xFF	; 255
   1b352:	9d 4f       	sbci	r25, 0xFD	; 253
   1b354:	0e 94 c7 75 	call	0xeb8e	; 0xeb8e <fgets>
   1b358:	89 2b       	or	r24, r25
   1b35a:	09 f4       	brne	.+2      	; 0x1b35e <lif_add_ascii_file_as_e010_wrapper+0x90>
   1b35c:	58 c0       	rjmp	.+176    	; 0x1b40e <lif_add_ascii_file_as_e010_wrapper+0x140>
    {
        trim_tail((char *)str);
   1b35e:	ce 01       	movw	r24, r28
   1b360:	8f 5f       	subi	r24, 0xFF	; 255
   1b362:	9d 4f       	sbci	r25, 0xFD	; 253
   1b364:	0e 94 71 32 	call	0x64e2	; 0x64e2 <trim_tail>

        strcat((char *)str,"\r"); // HP85 lines end with "\r"
   1b368:	6b e0       	ldi	r22, 0x0B	; 11
   1b36a:	76 e1       	ldi	r23, 0x16	; 22
   1b36c:	ce 01       	movw	r24, r28
   1b36e:	8f 5f       	subi	r24, 0xFF	; 255
   1b370:	9d 4f       	sbci	r25, 0xFD	; 253
   1b372:	0e 94 38 32 	call	0x6470	; 0x6470 <strcat>

        size = lif_ascii_string_to_e010(str, offset, obuf);
   1b376:	9e 01       	movw	r18, r28
   1b378:	2f 5f       	subi	r18, 0xFF	; 255
   1b37a:	3f 4f       	sbci	r19, 0xFF	; 255
   1b37c:	b5 01       	movw	r22, r10
   1b37e:	a4 01       	movw	r20, r8
   1b380:	ce 01       	movw	r24, r28
   1b382:	8f 5f       	subi	r24, 0xFF	; 255
   1b384:	9d 4f       	sbci	r25, 0xFD	; 253
   1b386:	ea de       	rcall	.-556    	; 0x1b15c <lif_ascii_string_to_e010>
   1b388:	ce 5f       	subi	r28, 0xFE	; 254
   1b38a:	dc 4f       	sbci	r29, 0xFC	; 252
   1b38c:	99 83       	std	Y+1, r25	; 0x01
   1b38e:	88 83       	st	Y, r24
   1b390:	c2 50       	subi	r28, 0x02	; 2
   1b392:	d3 40       	sbci	r29, 0x03	; 3
        // Write string
        // Now Write string
        if(LIF)
   1b394:	e1 14       	cp	r14, r1
   1b396:	f1 04       	cpc	r15, r1
   1b398:	09 f4       	brne	.+2      	; 0x1b39c <lif_add_ascii_file_as_e010_wrapper+0xce>
   1b39a:	bc cf       	rjmp	.-136    	; 0x1b314 <lif_add_ascii_file_as_e010_wrapper+0x46>
        {
            len = lif_write(LIF, obuf, offset, size);
   1b39c:	8c 01       	movw	r16, r24
   1b39e:	a5 01       	movw	r20, r10
   1b3a0:	94 01       	movw	r18, r8
   1b3a2:	be 01       	movw	r22, r28
   1b3a4:	6f 5f       	subi	r22, 0xFF	; 255
   1b3a6:	7f 4f       	sbci	r23, 0xFF	; 255
   1b3a8:	c7 01       	movw	r24, r14
   1b3aa:	0e 94 4c c6 	call	0x18c98	; 0x18c98 <lif_write>
            if(len < size)
   1b3ae:	ce 5f       	subi	r28, 0xFE	; 254
   1b3b0:	dc 4f       	sbci	r29, 0xFC	; 252
   1b3b2:	08 81       	ld	r16, Y
   1b3b4:	19 81       	ldd	r17, Y+1	; 0x01
   1b3b6:	c2 50       	subi	r28, 0x02	; 2
   1b3b8:	d3 40       	sbci	r29, 0x03	; 3
   1b3ba:	80 17       	cp	r24, r16
   1b3bc:	91 07       	cpc	r25, r17
   1b3be:	0c f0       	brlt	.+2      	; 0x1b3c2 <lif_add_ascii_file_as_e010_wrapper+0xf4>
   1b3c0:	a9 cf       	rjmp	.-174    	; 0x1b314 <lif_add_ascii_file_as_e010_wrapper+0x46>
            {
                fclose(fi);
   1b3c2:	c6 01       	movw	r24, r12
   1b3c4:	0e 94 40 7c 	call	0xf880	; 0xf880 <fclose>
                return(-1);
   1b3c8:	6f ef       	ldi	r22, 0xFF	; 255
   1b3ca:	7f ef       	ldi	r23, 0xFF	; 255
   1b3cc:	8f ef       	ldi	r24, 0xFF	; 255
   1b3ce:	9f ef       	ldi	r25, 0xFF	; 255
   1b3d0:	86 c0       	rjmp	.+268    	; 0x1b4de <lif_add_ascii_file_as_e010_wrapper+0x210>
        count += size;

        if(count > 256)
        {       
            count = 0;
            if(LIF)
   1b3d2:	e1 14       	cp	r14, r1
   1b3d4:	f1 04       	cpc	r15, r1
   1b3d6:	c1 f0       	breq	.+48     	; 0x1b408 <lif_add_ascii_file_as_e010_wrapper+0x13a>
                printf("Wrote: %8ld\r", (long)bytes);
   1b3d8:	7f 92       	push	r7
   1b3da:	6f 92       	push	r6
   1b3dc:	5f 92       	push	r5
   1b3de:	4f 92       	push	r4
   1b3e0:	1f 92       	push	r1
   1b3e2:	cb 5f       	subi	r28, 0xFB	; 251
   1b3e4:	dc 4f       	sbci	r29, 0xFC	; 252
   1b3e6:	48 81       	ld	r20, Y
   1b3e8:	c5 50       	subi	r28, 0x05	; 5
   1b3ea:	d3 40       	sbci	r29, 0x03	; 3
   1b3ec:	4f 93       	push	r20
   1b3ee:	cc 5f       	subi	r28, 0xFC	; 252
   1b3f0:	dc 4f       	sbci	r29, 0xFC	; 252
   1b3f2:	88 81       	ld	r24, Y
   1b3f4:	c4 50       	subi	r28, 0x04	; 4
   1b3f6:	d3 40       	sbci	r29, 0x03	; 3
   1b3f8:	8f 93       	push	r24
   1b3fa:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1b3fe:	0f b6       	in	r0, 0x3f	; 63
   1b400:	f8 94       	cli
   1b402:	de bf       	out	0x3e, r29	; 62
   1b404:	0f be       	out	0x3f, r0	; 63
   1b406:	cd bf       	out	0x3d, r28	; 61
        bytes += size;
        count += size;

        if(count > 256)
        {       
            count = 0;
   1b408:	21 2c       	mov	r2, r1
   1b40a:	31 2c       	mov	r3, r1
   1b40c:	9d cf       	rjmp	.-198    	; 0x1b348 <lif_add_ascii_file_as_e010_wrapper+0x7a>
            if(LIF)
                printf("Wrote: %8ld\r", (long)bytes);
        }
    }

    fclose(fi);
   1b40e:	c6 01       	movw	r24, r12
   1b410:	0e 94 40 7c 	call	0xf880	; 0xf880 <fclose>

    // Write EOF
    str[0] = 0;
   1b414:	cf 5f       	subi	r28, 0xFF	; 255
   1b416:	dd 4f       	sbci	r29, 0xFD	; 253
   1b418:	18 82       	st	Y, r1
   1b41a:	c1 50       	subi	r28, 0x01	; 1
   1b41c:	d2 40       	sbci	r29, 0x02	; 2
    // We only want to return the count of bytes in the file NOT the padding at the end
    // Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);
   1b41e:	9e 01       	movw	r18, r28
   1b420:	2f 5f       	subi	r18, 0xFF	; 255
   1b422:	3f 4f       	sbci	r19, 0xFF	; 255
   1b424:	b5 01       	movw	r22, r10
   1b426:	a4 01       	movw	r20, r8
   1b428:	ce 01       	movw	r24, r28
   1b42a:	8f 5f       	subi	r24, 0xFF	; 255
   1b42c:	9d 4f       	sbci	r25, 0xFD	; 253
   1b42e:	96 de       	rcall	.-724    	; 0x1b15c <lif_ascii_string_to_e010>
   1b430:	6c 01       	movw	r12, r24

    if(LIF)
   1b432:	e1 14       	cp	r14, r1
   1b434:	f1 04       	cpc	r15, r1
   1b436:	b9 f4       	brne	.+46     	; 0x1b466 <lif_add_ascii_file_as_e010_wrapper+0x198>
            return(-1);

    }

    offset += size;
    bytes += size;
   1b438:	c6 01       	movw	r24, r12
   1b43a:	dd 0c       	add	r13, r13
   1b43c:	aa 0b       	sbc	r26, r26
   1b43e:	bb 0b       	sbc	r27, r27
   1b440:	48 0e       	add	r4, r24
   1b442:	59 1e       	adc	r5, r25
   1b444:	6a 1e       	adc	r6, r26
   1b446:	7b 1e       	adc	r7, r27

    // PAD
    size = lif_e010_pad_sector(offset, obuf);
   1b448:	88 0e       	add	r8, r24
   1b44a:	99 1e       	adc	r9, r25
   1b44c:	aa 1e       	adc	r10, r26
   1b44e:	bb 1e       	adc	r11, r27
   1b450:	ae 01       	movw	r20, r28
   1b452:	4f 5f       	subi	r20, 0xFF	; 255
   1b454:	5f 4f       	sbci	r21, 0xFF	; 255
   1b456:	c5 01       	movw	r24, r10
   1b458:	b4 01       	movw	r22, r8
   1b45a:	26 de       	rcall	.-948    	; 0x1b0a8 <lif_e010_pad_sector>
   1b45c:	6c 01       	movw	r12, r24
    if(LIF)
   1b45e:	e1 14       	cp	r14, r1
   1b460:	f1 04       	cpc	r15, r1
   1b462:	f1 f4       	brne	.+60     	; 0x1b4a0 <lif_add_ascii_file_as_e010_wrapper+0x1d2>
   1b464:	3a c0       	rjmp	.+116    	; 0x1b4da <lif_add_ascii_file_as_e010_wrapper+0x20c>
    // Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);

    if(LIF)
    {
        printf("Wrote: %8ld\r", (long)bytes);
   1b466:	7f 92       	push	r7
   1b468:	6f 92       	push	r6
   1b46a:	5f 92       	push	r5
   1b46c:	4f 92       	push	r4
   1b46e:	82 ee       	ldi	r24, 0xE2	; 226
   1b470:	98 e3       	ldi	r25, 0x38	; 56
   1b472:	1f 92       	push	r1
   1b474:	9f 93       	push	r25
   1b476:	8f 93       	push	r24
   1b478:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
        len = lif_write(LIF, obuf, offset, size);
   1b47c:	86 01       	movw	r16, r12
   1b47e:	a5 01       	movw	r20, r10
   1b480:	94 01       	movw	r18, r8
   1b482:	be 01       	movw	r22, r28
   1b484:	6f 5f       	subi	r22, 0xFF	; 255
   1b486:	7f 4f       	sbci	r23, 0xFF	; 255
   1b488:	c7 01       	movw	r24, r14
   1b48a:	0e 94 4c c6 	call	0x18c98	; 0x18c98 <lif_write>
        if(len < size)
   1b48e:	0f b6       	in	r0, 0x3f	; 63
   1b490:	f8 94       	cli
   1b492:	de bf       	out	0x3e, r29	; 62
   1b494:	0f be       	out	0x3f, r0	; 63
   1b496:	cd bf       	out	0x3d, r28	; 61
   1b498:	8c 15       	cp	r24, r12
   1b49a:	9d 05       	cpc	r25, r13
   1b49c:	6c f6       	brge	.-102    	; 0x1b438 <lif_add_ascii_file_as_e010_wrapper+0x16a>
   1b49e:	94 cf       	rjmp	.-216    	; 0x1b3c8 <lif_add_ascii_file_as_e010_wrapper+0xfa>

    // PAD
    size = lif_e010_pad_sector(offset, obuf);
    if(LIF)
    {
        len = lif_write(LIF, obuf, offset, size);
   1b4a0:	8c 01       	movw	r16, r24
   1b4a2:	a5 01       	movw	r20, r10
   1b4a4:	94 01       	movw	r18, r8
   1b4a6:	be 01       	movw	r22, r28
   1b4a8:	6f 5f       	subi	r22, 0xFF	; 255
   1b4aa:	7f 4f       	sbci	r23, 0xFF	; 255
   1b4ac:	c7 01       	movw	r24, r14
   1b4ae:	0e 94 4c c6 	call	0x18c98	; 0x18c98 <lif_write>
        if(len < size)
   1b4b2:	8c 15       	cp	r24, r12
   1b4b4:	9d 05       	cpc	r25, r13
   1b4b6:	0c f4       	brge	.+2      	; 0x1b4ba <lif_add_ascii_file_as_e010_wrapper+0x1ec>
   1b4b8:	87 cf       	rjmp	.-242    	; 0x1b3c8 <lif_add_ascii_file_as_e010_wrapper+0xfa>
            return(-1);
    }

    if(LIF)
        printf("Wrote: %8ld\r",(long)bytes);
   1b4ba:	7f 92       	push	r7
   1b4bc:	6f 92       	push	r6
   1b4be:	5f 92       	push	r5
   1b4c0:	4f 92       	push	r4
   1b4c2:	85 ed       	ldi	r24, 0xD5	; 213
   1b4c4:	98 e3       	ldi	r25, 0x38	; 56
   1b4c6:	1f 92       	push	r1
   1b4c8:	9f 93       	push	r25
   1b4ca:	8f 93       	push	r24
   1b4cc:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1b4d0:	0f b6       	in	r0, 0x3f	; 63
   1b4d2:	f8 94       	cli
   1b4d4:	de bf       	out	0x3e, r29	; 62
   1b4d6:	0f be       	out	0x3f, r0	; 63
   1b4d8:	cd bf       	out	0x3d, r28	; 61

    return(bytes);
   1b4da:	b2 01       	movw	r22, r4
   1b4dc:	c3 01       	movw	r24, r6
}
   1b4de:	ca 5f       	subi	r28, 0xFA	; 250
   1b4e0:	dc 4f       	sbci	r29, 0xFC	; 252
   1b4e2:	e2 e1       	ldi	r30, 0x12	; 18
   1b4e4:	0c 94 2f e8 	jmp	0x1d05e	; 0x1d05e <__epilogue_restores__>

0001b4e8 <lif_add_ascii_file_as_e010>:
/// @param[in] lifname: LIF file name
/// @param[in] userfile: userfile name
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_ascii_file_as_e010(char *lifimagename, char *lifname, char *userfile)
{
   1b4e8:	a2 e3       	ldi	r26, 0x32	; 50
   1b4ea:	b0 e0       	ldi	r27, 0x00	; 0
   1b4ec:	ea e7       	ldi	r30, 0x7A	; 122
   1b4ee:	fa ed       	ldi	r31, 0xDA	; 218
   1b4f0:	0c 94 13 e8 	jmp	0x1d026	; 0x1d026 <__prologue_saves__>
   1b4f4:	6c 01       	movw	r12, r24
   1b4f6:	1b 01       	movw	r2, r22
   1b4f8:	7a 01       	movw	r14, r20
    int index;
    lif_t *LIF;
    stat_t st, *sp;


    if(!*lifimagename)
   1b4fa:	fc 01       	movw	r30, r24
   1b4fc:	80 81       	ld	r24, Z
   1b4fe:	81 11       	cpse	r24, r1
   1b500:	03 c0       	rjmp	.+6      	; 0x1b508 <lif_add_ascii_file_as_e010+0x20>
    {
        printf("lif_add_ascii_file_as_e010: lifimagename is empty\n");
   1b502:	82 ea       	ldi	r24, 0xA2	; 162
   1b504:	98 e3       	ldi	r25, 0x38	; 56
   1b506:	1a c0       	rjmp	.+52     	; 0x1b53c <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*lifname)
   1b508:	fb 01       	movw	r30, r22
   1b50a:	80 81       	ld	r24, Z
   1b50c:	81 11       	cpse	r24, r1
   1b50e:	03 c0       	rjmp	.+6      	; 0x1b516 <lif_add_ascii_file_as_e010+0x2e>
    {
        printf("lif_add_ascii_file_as_e010: lifname is empty\n");
   1b510:	84 e7       	ldi	r24, 0x74	; 116
   1b512:	98 e3       	ldi	r25, 0x38	; 56
   1b514:	13 c0       	rjmp	.+38     	; 0x1b53c <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*userfile)
   1b516:	fa 01       	movw	r30, r20
   1b518:	80 81       	ld	r24, Z
   1b51a:	81 11       	cpse	r24, r1
   1b51c:	03 c0       	rjmp	.+6      	; 0x1b524 <lif_add_ascii_file_as_e010+0x3c>
    {
        printf("lif_add_ascii_file_as_e010: userfile is empty\n");
   1b51e:	85 e4       	ldi	r24, 0x45	; 69
   1b520:	98 e3       	ldi	r25, 0x38	; 56
   1b522:	0c c0       	rjmp	.+24     	; 0x1b53c <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }

    //Get size and date info
    sp = lif_stat(userfile, (stat_t *)&st);
   1b524:	be 01       	movw	r22, r28
   1b526:	6f 5f       	subi	r22, 0xFF	; 255
   1b528:	7f 4f       	sbci	r23, 0xFF	; 255
   1b52a:	ca 01       	movw	r24, r20
   1b52c:	0e 94 95 c5 	call	0x18b2a	; 0x18b2a <lif_stat>
   1b530:	9a ab       	std	Y+50, r25	; 0x32
   1b532:	89 ab       	std	Y+49, r24	; 0x31
    if(!sp)
   1b534:	89 2b       	or	r24, r25
   1b536:	59 f4       	brne	.+22     	; 0x1b54e <lif_add_ascii_file_as_e010+0x66>
    {
        printf("lif_add_ascii_file_as_e010: userfile not found\n");
   1b538:	85 e1       	ldi	r24, 0x15	; 21
   1b53a:	98 e3       	ldi	r25, 0x38	; 56
   1b53c:	1f 92       	push	r1
   1b53e:	9f 93       	push	r25
   1b540:	8f 93       	push	r24
   1b542:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
        return(-1);
   1b546:	0f 90       	pop	r0
   1b548:	0f 90       	pop	r0
   1b54a:	0f 90       	pop	r0
   1b54c:	fe c0       	rjmp	.+508    	; 0x1b74a <lif_add_ascii_file_as_e010+0x262>
    }

    if(debuglevel & 0x400)
   1b54e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1b552:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1b556:	92 ff       	sbrs	r25, 2
   1b558:	12 c0       	rjmp	.+36     	; 0x1b57e <lif_add_ascii_file_as_e010+0x96>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n", 
   1b55a:	ff 92       	push	r15
   1b55c:	ef 92       	push	r14
   1b55e:	3f 92       	push	r3
   1b560:	2f 92       	push	r2
   1b562:	df 92       	push	r13
   1b564:	cf 92       	push	r12
   1b566:	86 ee       	ldi	r24, 0xE6	; 230
   1b568:	97 e3       	ldi	r25, 0x37	; 55
   1b56a:	1f 92       	push	r1
   1b56c:	9f 93       	push	r25
   1b56e:	8f 93       	push	r24
   1b570:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1b574:	0f b6       	in	r0, 0x3f	; 63
   1b576:	f8 94       	cli
   1b578:	de bf       	out	0x3e, r29	; 62
   1b57a:	0f be       	out	0x3f, r0	; 63
   1b57c:	cd bf       	out	0x3d, r28	; 61
            lifimagename, lifname, userfile);

    // Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
   1b57e:	97 01       	movw	r18, r14
   1b580:	40 e0       	ldi	r20, 0x00	; 0
   1b582:	50 e0       	ldi	r21, 0x00	; 0
   1b584:	ba 01       	movw	r22, r20
   1b586:	80 e0       	ldi	r24, 0x00	; 0
   1b588:	90 e0       	ldi	r25, 0x00	; 0
   1b58a:	a1 de       	rcall	.-702    	; 0x1b2ce <lif_add_ascii_file_as_e010_wrapper>
   1b58c:	4b 01       	movw	r8, r22
   1b58e:	5c 01       	movw	r10, r24
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1b590:	47 2e       	mov	r4, r23
   1b592:	58 2e       	mov	r5, r24
   1b594:	69 2e       	mov	r6, r25
   1b596:	77 24       	eor	r7, r7
    if(bytes % (long)LIF_SECTOR_SIZE)
   1b598:	66 23       	and	r22, r22
   1b59a:	29 f0       	breq	.+10     	; 0x1b5a6 <lif_add_ascii_file_as_e010+0xbe>
        ++sectors;
   1b59c:	9f ef       	ldi	r25, 0xFF	; 255
   1b59e:	49 1a       	sub	r4, r25
   1b5a0:	59 0a       	sbc	r5, r25
   1b5a2:	69 0a       	sbc	r6, r25
   1b5a4:	79 0a       	sbc	r7, r25

    // Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
   1b5a6:	63 e7       	ldi	r22, 0x73	; 115
   1b5a8:	78 e0       	ldi	r23, 0x08	; 8
   1b5aa:	c6 01       	movw	r24, r12
   1b5ac:	ac da       	rcall	.-2728   	; 0x1ab06 <lif_open_volume>
   1b5ae:	8c 01       	movw	r16, r24
    if(LIF == NULL)
   1b5b0:	00 97       	sbiw	r24, 0x00	; 0
   1b5b2:	09 f4       	brne	.+2      	; 0x1b5b6 <lif_add_ascii_file_as_e010+0xce>
        return(-1); 

    // Now find free record
    index = lif_newdir(LIF, sectors);
   1b5b4:	ca c0       	rjmp	.+404    	; 0x1b74a <lif_add_ascii_file_as_e010+0x262>
   1b5b6:	b3 01       	movw	r22, r6
   1b5b8:	a2 01       	movw	r20, r4
   1b5ba:	40 d9       	rcall	.-3456   	; 0x1a83c <lif_newdir>
    if(index == -1)
   1b5bc:	3c 01       	movw	r6, r24
   1b5be:	01 96       	adiw	r24, 0x01	; 1
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n", 
   1b5c0:	a1 f4       	brne	.+40     	; 0x1b5ea <lif_add_ascii_file_as_e010+0x102>
   1b5c2:	ff 92       	push	r15
   1b5c4:	ef 92       	push	r14
   1b5c6:	df 92       	push	r13
   1b5c8:	cf 92       	push	r12
   1b5ca:	86 eb       	ldi	r24, 0xB6	; 182
   1b5cc:	97 e3       	ldi	r25, 0x37	; 55
   1b5ce:	1f 92       	push	r1
   1b5d0:	9f 93       	push	r25
   1b5d2:	8f 93       	push	r24
   1b5d4:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b5d8:	c8 01       	movw	r24, r16
   1b5da:	0e 94 8b ce 	call	0x19d16	; 0x19d16 <lif_close_volume>
    if(index == -1)
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n", 
            lifimagename, userfile);
            lif_closedir(LIF);
            return(-1);
   1b5de:	0f b6       	in	r0, 0x3f	; 63
   1b5e0:	f8 94       	cli
   1b5e2:	de bf       	out	0x3e, r29	; 62
   1b5e4:	0f be       	out	0x3f, r0	; 63
   1b5e6:	cd bf       	out	0x3d, r28	; 61
    }

    // Initialize the free directory entry
    lif_fixname(LIF->DIR.filename, lifname,10);
   1b5e8:	b0 c0       	rjmp	.+352    	; 0x1b74a <lif_add_ascii_file_as_e010+0x262>
   1b5ea:	68 01       	movw	r12, r16
   1b5ec:	9f e4       	ldi	r25, 0x4F	; 79
   1b5ee:	c9 0e       	add	r12, r25
   1b5f0:	d1 1c       	adc	r13, r1
   1b5f2:	4a e0       	ldi	r20, 0x0A	; 10
   1b5f4:	50 e0       	ldi	r21, 0x00	; 0
   1b5f6:	b1 01       	movw	r22, r2
   1b5f8:	c6 01       	movw	r24, r12
   1b5fa:	0e 94 39 c7 	call	0x18e72	; 0x18e72 <lif_fixname>
    LIF->DIR.FileType = 0xe010;             // 10
   1b5fe:	80 e1       	ldi	r24, 0x10	; 16
   1b600:	90 ee       	ldi	r25, 0xE0	; 224
   1b602:	f8 01       	movw	r30, r16
   1b604:	e6 5a       	subi	r30, 0xA6	; 166
   1b606:	ff 4f       	sbci	r31, 0xFF	; 255
   1b608:	91 83       	std	Z+1, r25	; 0x01
    lif_time2lifbcd(sp->st_mtime, LIF->DIR.date);
   1b60a:	80 83       	st	Z, r24
   1b60c:	e9 a9       	ldd	r30, Y+49	; 0x31
   1b60e:	fa a9       	ldd	r31, Y+50	; 0x32
   1b610:	60 a5       	ldd	r22, Z+40	; 0x28
   1b612:	71 a5       	ldd	r23, Z+41	; 0x29
   1b614:	82 a5       	ldd	r24, Z+42	; 0x2a
   1b616:	93 a5       	ldd	r25, Z+43	; 0x2b
   1b618:	a8 01       	movw	r20, r16
   1b61a:	4c 59       	subi	r20, 0x9C	; 156
   1b61c:	5f 4f       	sbci	r21, 0xFF	; 255
   1b61e:	0e 94 7e c9 	call	0x192fc	; 0x192fc <lif_time2lifbcd>

    LIF->DIR.VolNumber = 0x8001;            // 26
   1b622:	81 e0       	ldi	r24, 0x01	; 1
   1b624:	90 e8       	ldi	r25, 0x80	; 128
   1b626:	f8 01       	movw	r30, r16
   1b628:	e6 59       	subi	r30, 0x96	; 150
   1b62a:	ff 4f       	sbci	r31, 0xFF	; 255
   1b62c:	91 83       	std	Z+1, r25	; 0x01
    LIF->DIR.FileBytes = bytes;                 // 28
   1b62e:	80 83       	st	Z, r24
   1b630:	32 96       	adiw	r30, 0x02	; 2
   1b632:	91 82       	std	Z+1, r9	; 0x01
    LIF->DIR.SectorSize  = 0x100;           // 30
   1b634:	80 82       	st	Z, r8
   1b636:	80 e0       	ldi	r24, 0x00	; 0
   1b638:	91 e0       	ldi	r25, 0x01	; 1
   1b63a:	32 96       	adiw	r30, 0x02	; 2
   1b63c:	91 83       	std	Z+1, r25	; 0x01
    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b63e:	80 83       	st	Z, r24
   1b640:	58 01       	movw	r10, r16
   1b642:	fc e5       	ldi	r31, 0x5C	; 92
   1b644:	af 0e       	add	r10, r31
   1b646:	b1 1c       	adc	r11, r1
   1b648:	f5 01       	movw	r30, r10
   1b64a:	80 81       	ld	r24, Z
   1b64c:	91 81       	ldd	r25, Z+1	; 0x01
   1b64e:	a2 81       	ldd	r26, Z+2	; 0x02
   1b650:	b3 81       	ldd	r27, Z+3	; 0x03
   1b652:	22 24       	eor	r2, r2
   1b654:	38 2e       	mov	r3, r24
   1b656:	49 2e       	mov	r4, r25

    if(debuglevel & 0x400)
   1b658:	5a 2e       	mov	r5, r26
   1b65a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1b65e:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1b662:	92 ff       	sbrs	r25, 2
        lif_dump_vol(LIF,"lif_after lif_newdir");
   1b664:	05 c0       	rjmp	.+10     	; 0x1b670 <lif_add_ascii_file_as_e010+0x188>
   1b666:	6d e0       	ldi	r22, 0x0D	; 13
   1b668:	76 e1       	ldi	r23, 0x16	; 22
   1b66a:	c8 01       	movw	r24, r16
   1b66c:	0e 94 6a ca 	call	0x194d4	; 0x194d4 <lif_dump_vol>

    // Write converted file into free space first
    bytes = lif_add_ascii_file_as_e010_wrapper(LIF,offset,userfile);
   1b670:	97 01       	movw	r18, r14
   1b672:	b2 01       	movw	r22, r4
   1b674:	a1 01       	movw	r20, r2
   1b676:	c8 01       	movw	r24, r16
   1b678:	2a de       	rcall	.-940    	; 0x1b2ce <lif_add_ascii_file_as_e010_wrapper>
   1b67a:	4b 01       	movw	r8, r22

    if(debuglevel & 0x400)
   1b67c:	7c 01       	movw	r14, r24
   1b67e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1b682:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1b686:	92 ff       	sbrs	r25, 2
    {
        printf("New Directory Information AFTER write\n");
   1b688:	40 c0       	rjmp	.+128    	; 0x1b70a <lif_add_ascii_file_as_e010+0x222>
   1b68a:	8f e8       	ldi	r24, 0x8F	; 143
   1b68c:	97 e3       	ldi	r25, 0x37	; 55
   1b68e:	1f 92       	push	r1
   1b690:	9f 93       	push	r25
   1b692:	8f 93       	push	r24
   1b694:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
        printf("Name:              %s\n", LIF->DIR.filename);
   1b698:	df 92       	push	r13
   1b69a:	cf 92       	push	r12
   1b69c:	88 e7       	ldi	r24, 0x78	; 120
   1b69e:	97 e3       	ldi	r25, 0x37	; 55
   1b6a0:	1f 92       	push	r1
   1b6a2:	9f 93       	push	r25
   1b6a4:	8f 93       	push	r24
   1b6a6:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
        printf("Index:            %4d\n", (int)index);
   1b6aa:	7f 92       	push	r7
   1b6ac:	6f 92       	push	r6
   1b6ae:	81 e6       	ldi	r24, 0x61	; 97
   1b6b0:	97 e3       	ldi	r25, 0x37	; 55
   1b6b2:	1f 92       	push	r1
   1b6b4:	9f 93       	push	r25
   1b6b6:	8f 93       	push	r24
   1b6b8:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
        printf("First Sector:     %4lxH\n", (long) LIF->DIR.FileStartSector);
   1b6bc:	f5 01       	movw	r30, r10
   1b6be:	83 81       	ldd	r24, Z+3	; 0x03
   1b6c0:	8f 93       	push	r24
   1b6c2:	82 81       	ldd	r24, Z+2	; 0x02
   1b6c4:	8f 93       	push	r24
   1b6c6:	81 81       	ldd	r24, Z+1	; 0x01
   1b6c8:	8f 93       	push	r24
   1b6ca:	80 81       	ld	r24, Z
   1b6cc:	8f 93       	push	r24
   1b6ce:	88 e4       	ldi	r24, 0x48	; 72
   1b6d0:	97 e3       	ldi	r25, 0x37	; 55
   1b6d2:	1f 92       	push	r1
   1b6d4:	9f 93       	push	r25
   1b6d6:	8f 93       	push	r24
   1b6d8:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
        printf("File Sectors:     %4lxH\n", (long)LIF->DIR.FileSectors);
   1b6dc:	f8 01       	movw	r30, r16
   1b6de:	e0 5a       	subi	r30, 0xA0	; 160
   1b6e0:	ff 4f       	sbci	r31, 0xFF	; 255
   1b6e2:	83 81       	ldd	r24, Z+3	; 0x03
   1b6e4:	8f 93       	push	r24
   1b6e6:	82 81       	ldd	r24, Z+2	; 0x02
   1b6e8:	8f 93       	push	r24
   1b6ea:	81 81       	ldd	r24, Z+1	; 0x01
   1b6ec:	8f 93       	push	r24
   1b6ee:	80 81       	ld	r24, Z
   1b6f0:	8f 93       	push	r24
   1b6f2:	8f e2       	ldi	r24, 0x2F	; 47
   1b6f4:	97 e3       	ldi	r25, 0x37	; 55
   1b6f6:	1f 92       	push	r1
   1b6f8:	9f 93       	push	r25
   1b6fa:	8f 93       	push	r24
   1b6fc:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1b700:	0f b6       	in	r0, 0x3f	; 63
   1b702:	f8 94       	cli
   1b704:	de bf       	out	0x3e, r29	; 62
   1b706:	0f be       	out	0x3f, r0	; 63
    }

    // Write directory record
    // Note: lif_newdir alrwady did the new EOF
    if( !lif_writedirindex(LIF,index))
   1b708:	cd bf       	out	0x3d, r28	; 61
   1b70a:	b3 01       	movw	r22, r6
   1b70c:	c8 01       	movw	r24, r16
   1b70e:	0e 94 75 cf 	call	0x19eea	; 0x19eea <lif_writedirindex>
   1b712:	89 2b       	or	r24, r25
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b714:	21 f4       	brne	.+8      	; 0x1b71e <lif_add_ascii_file_as_e010+0x236>
   1b716:	c8 01       	movw	r24, r16
   1b718:	0e 94 8b ce 	call	0x19d16	; 0x19d16 <lif_close_volume>
   1b71c:	16 c0       	rjmp	.+44     	; 0x1b74a <lif_add_ascii_file_as_e010+0x262>
   1b71e:	c8 01       	movw	r24, r16
   1b720:	0e 94 8b ce 	call	0x19d16	; 0x19d16 <lif_close_volume>
        return(-1);
    }

    lif_closedir(LIF);

    printf("Wrote: %8ld\n", bytes);
   1b724:	ff 92       	push	r15
   1b726:	ef 92       	push	r14
   1b728:	9f 92       	push	r9
   1b72a:	8f 92       	push	r8
   1b72c:	82 e2       	ldi	r24, 0x22	; 34
   1b72e:	97 e3       	ldi	r25, 0x37	; 55
   1b730:	1f 92       	push	r1
   1b732:	9f 93       	push	r25
   1b734:	8f 93       	push	r24
   1b736:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>

    // Return file size
    return(bytes);
   1b73a:	0f b6       	in	r0, 0x3f	; 63
   1b73c:	f8 94       	cli
   1b73e:	de bf       	out	0x3e, r29	; 62
   1b740:	0f be       	out	0x3f, r0	; 63
   1b742:	cd bf       	out	0x3d, r28	; 61
   1b744:	b4 01       	movw	r22, r8
   1b746:	c7 01       	movw	r24, r14
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
    if(LIF == NULL)
        return(-1); 
   1b748:	04 c0       	rjmp	.+8      	; 0x1b752 <lif_add_ascii_file_as_e010+0x26a>
   1b74a:	6f ef       	ldi	r22, 0xFF	; 255
   1b74c:	7f ef       	ldi	r23, 0xFF	; 255
   1b74e:	8f ef       	ldi	r24, 0xFF	; 255

    printf("Wrote: %8ld\n", bytes);

    // Return file size
    return(bytes);
}
   1b750:	9f ef       	ldi	r25, 0xFF	; 255
   1b752:	e2 96       	adiw	r28, 0x32	; 50
   1b754:	e2 e1       	ldi	r30, 0x12	; 18
   1b756:	0c 94 2f e8 	jmp	0x1d05e	; 0x1d05e <__epilogue_restores__>

0001b75a <lif_extract_e010_as_ascii>:
/// @param[in] lifname:  name of file in LIF image
/// @param[in] username: name to call the extracted image
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_e010_as_ascii(char *lifimagename, char *lifname, char *username)
{
   1b75a:	ac e2       	ldi	r26, 0x2C	; 44
   1b75c:	b2 e0       	ldi	r27, 0x02	; 2
   1b75e:	e3 eb       	ldi	r30, 0xB3	; 179
   1b760:	fb ed       	ldi	r31, 0xDB	; 219
   1b762:	0c 94 13 e8 	jmp	0x1d026	; 0x1d026 <__prologue_saves__>
   1b766:	f8 2e       	mov	r15, r24
   1b768:	b9 2e       	mov	r11, r25
   1b76a:	16 2f       	mov	r17, r22
   1b76c:	07 2f       	mov	r16, r23
   1b76e:	c4 5e       	subi	r28, 0xE4	; 228
   1b770:	dd 4f       	sbci	r29, 0xFD	; 253
   1b772:	48 83       	st	Y, r20
   1b774:	cc 51       	subi	r28, 0x1C	; 28
   1b776:	d2 40       	sbci	r29, 0x02	; 2
   1b778:	e5 2e       	mov	r14, r21
    uint8_t buf[LIF_SECTOR_SIZE+4];
    // Write buffer, FYI: will ALWAYS be smaller then the read data buffer
    uint8_t wbuf[LIF_SECTOR_SIZE+4];


    LIF = lif_open_volume(lifimagename,"r");
   1b77a:	6b e2       	ldi	r22, 0x2B	; 43
   1b77c:	77 e0       	ldi	r23, 0x07	; 7
   1b77e:	c3 d9       	rcall	.-3194   	; 0x1ab06 <lif_open_volume>
   1b780:	6c 01       	movw	r12, r24
    if(LIF == NULL)
   1b782:	00 97       	sbiw	r24, 0x00	; 0
   1b784:	51 f4       	brne	.+20     	; 0x1b79a <lif_extract_e010_as_ascii+0x40>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1b786:	bf 92       	push	r11
   1b788:	ff 92       	push	r15
   1b78a:	8a e0       	ldi	r24, 0x0A	; 10
   1b78c:	97 e3       	ldi	r25, 0x37	; 55
   1b78e:	1f 92       	push	r1
   1b790:	9f 93       	push	r25
   1b792:	8f 93       	push	r24
   1b794:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1b798:	11 c0       	rjmp	.+34     	; 0x1b7bc <lif_extract_e010_as_ascii+0x62>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1b79a:	61 2f       	mov	r22, r17
   1b79c:	70 2f       	mov	r23, r16
   1b79e:	20 dc       	rcall	.-1984   	; 0x1afe0 <lif_find_file>
    if(index == -1)
   1b7a0:	01 96       	adiw	r24, 0x01	; 1
   1b7a2:	a1 f4       	brne	.+40     	; 0x1b7cc <lif_extract_e010_as_ascii+0x72>
    {
        printf("LIF File not found:%s\n", lifname);
   1b7a4:	0f 93       	push	r16
   1b7a6:	1f 93       	push	r17
   1b7a8:	83 ef       	ldi	r24, 0xF3	; 243
   1b7aa:	96 e3       	ldi	r25, 0x36	; 54
   1b7ac:	1f 92       	push	r1
   1b7ae:	9f 93       	push	r25
   1b7b0:	8f 93       	push	r24
   1b7b2:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b7b6:	c6 01       	movw	r24, r12
   1b7b8:	0e 94 8b ce 	call	0x19d16	; 0x19d16 <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("LIF File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1b7bc:	0f 90       	pop	r0
   1b7be:	0f 90       	pop	r0
   1b7c0:	0f 90       	pop	r0
   1b7c2:	0f 90       	pop	r0
   1b7c4:	0f 90       	pop	r0
   1b7c6:	80 e0       	ldi	r24, 0x00	; 0
   1b7c8:	90 e0       	ldi	r25, 0x00	; 0
   1b7ca:	ae c2       	rjmp	.+1372   	; 0x1bd28 <lif_extract_e010_as_ascii+0x5ce>
    }

    if((LIF->DIR.FileType & 0xFFFC) != 0xE010)
   1b7cc:	f6 01       	movw	r30, r12
   1b7ce:	e6 5a       	subi	r30, 0xA6	; 166
   1b7d0:	ff 4f       	sbci	r31, 0xFF	; 255
   1b7d2:	80 81       	ld	r24, Z
   1b7d4:	91 81       	ldd	r25, Z+1	; 0x01
   1b7d6:	9c 01       	movw	r18, r24
   1b7d8:	2c 7f       	andi	r18, 0xFC	; 252
   1b7da:	20 31       	cpi	r18, 0x10	; 16
   1b7dc:	30 4e       	sbci	r19, 0xE0	; 224
   1b7de:	c9 f0       	breq	.+50     	; 0x1b812 <lif_extract_e010_as_ascii+0xb8>
    {
        printf("File %s has wrong type:[%04XH] expected 0xE010..0xE013\n", username, (int) LIF->DIR.FileType);
   1b7e0:	9f 93       	push	r25
   1b7e2:	8f 93       	push	r24
   1b7e4:	ef 92       	push	r14
   1b7e6:	c4 5e       	subi	r28, 0xE4	; 228
   1b7e8:	dd 4f       	sbci	r29, 0xFD	; 253
   1b7ea:	58 81       	ld	r21, Y
   1b7ec:	cc 51       	subi	r28, 0x1C	; 28
   1b7ee:	d2 40       	sbci	r29, 0x02	; 2
   1b7f0:	5f 93       	push	r21
   1b7f2:	8b eb       	ldi	r24, 0xBB	; 187
   1b7f4:	96 e3       	ldi	r25, 0x36	; 54
   1b7f6:	1f 92       	push	r1
   1b7f8:	9f 93       	push	r25
   1b7fa:	8f 93       	push	r24
   1b7fc:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b800:	c6 01       	movw	r24, r12
   1b802:	0e 94 8b ce 	call	0x19d16	; 0x19d16 <lif_close_volume>

    if((LIF->DIR.FileType & 0xFFFC) != 0xE010)
    {
        printf("File %s has wrong type:[%04XH] expected 0xE010..0xE013\n", username, (int) LIF->DIR.FileType);
        lif_closedir(LIF);
        return(0);
   1b806:	0f b6       	in	r0, 0x3f	; 63
   1b808:	f8 94       	cli
   1b80a:	de bf       	out	0x3e, r29	; 62
   1b80c:	0f be       	out	0x3f, r0	; 63
   1b80e:	cd bf       	out	0x3d, r28	; 61
   1b810:	da cf       	rjmp	.-76     	; 0x1b7c6 <lif_extract_e010_as_ascii+0x6c>
    }

    start = LIF->DIR.FileStartSector;
   1b812:	f6 01       	movw	r30, r12
   1b814:	e4 5a       	subi	r30, 0xA4	; 164
   1b816:	ff 4f       	sbci	r31, 0xFF	; 255
   1b818:	80 80       	ld	r8, Z
   1b81a:	91 80       	ldd	r9, Z+1	; 0x01
   1b81c:	a2 80       	ldd	r10, Z+2	; 0x02
   1b81e:	b3 80       	ldd	r11, Z+3	; 0x03
    end = start + LIF->DIR.FileSectors;
   1b820:	34 96       	adiw	r30, 0x04	; 4
   1b822:	80 81       	ld	r24, Z
   1b824:	91 81       	ldd	r25, Z+1	; 0x01
   1b826:	a2 81       	ldd	r26, Z+2	; 0x02
   1b828:	b3 81       	ldd	r27, Z+3	; 0x03
   1b82a:	a5 01       	movw	r20, r10
   1b82c:	94 01       	movw	r18, r8
   1b82e:	28 0f       	add	r18, r24
   1b830:	39 1f       	adc	r19, r25
   1b832:	4a 1f       	adc	r20, r26
   1b834:	5b 1f       	adc	r21, r27
   1b836:	c9 5d       	subi	r28, 0xD9	; 217
   1b838:	dd 4f       	sbci	r29, 0xFD	; 253
   1b83a:	28 83       	st	Y, r18
   1b83c:	39 83       	std	Y+1, r19	; 0x01
   1b83e:	4a 83       	std	Y+2, r20	; 0x02
   1b840:	5b 83       	std	Y+3, r21	; 0x03
   1b842:	c7 52       	subi	r28, 0x27	; 39
   1b844:	d2 40       	sbci	r29, 0x02	; 2

    t = lif_lifbcd2time(LIF->DIR.date);
   1b846:	c6 01       	movw	r24, r12
   1b848:	8c 59       	subi	r24, 0x9C	; 156
   1b84a:	9f 4f       	sbci	r25, 0xFF	; 255
   1b84c:	0e 94 c0 c9 	call	0x19380	; 0x19380 <lif_lifbcd2time>
   1b850:	c3 5e       	subi	r28, 0xE3	; 227
   1b852:	dd 4f       	sbci	r29, 0xFD	; 253
   1b854:	68 83       	st	Y, r22
   1b856:	79 83       	std	Y+1, r23	; 0x01
   1b858:	8a 83       	std	Y+2, r24	; 0x02
   1b85a:	9b 83       	std	Y+3, r25	; 0x03
   1b85c:	cd 51       	subi	r28, 0x1D	; 29
   1b85e:	d2 40       	sbci	r29, 0x02	; 2

    offset = start * (long) LIF_SECTOR_SIZE;
   1b860:	ba 2d       	mov	r27, r10
   1b862:	a9 2d       	mov	r26, r9
   1b864:	98 2d       	mov	r25, r8
   1b866:	88 27       	eor	r24, r24
   1b868:	cf 5e       	subi	r28, 0xEF	; 239
   1b86a:	dd 4f       	sbci	r29, 0xFD	; 253
   1b86c:	88 83       	st	Y, r24
   1b86e:	99 83       	std	Y+1, r25	; 0x01
   1b870:	aa 83       	std	Y+2, r26	; 0x02
   1b872:	bb 83       	std	Y+3, r27	; 0x03
   1b874:	c1 51       	subi	r28, 0x11	; 17
   1b876:	d2 40       	sbci	r29, 0x02	; 2

    fo = lif_open(username,"wb");
   1b878:	6e e7       	ldi	r22, 0x7E	; 126
   1b87a:	78 e0       	ldi	r23, 0x08	; 8
   1b87c:	c4 5e       	subi	r28, 0xE4	; 228
   1b87e:	dd 4f       	sbci	r29, 0xFD	; 253
   1b880:	88 81       	ld	r24, Y
   1b882:	cc 51       	subi	r28, 0x1C	; 28
   1b884:	d2 40       	sbci	r29, 0x02	; 2
   1b886:	9e 2d       	mov	r25, r14
   1b888:	0e 94 6d c5 	call	0x18ada	; 0x18ada <lif_open>
   1b88c:	c6 5e       	subi	r28, 0xE6	; 230
   1b88e:	dd 4f       	sbci	r29, 0xFD	; 253
   1b890:	99 83       	std	Y+1, r25	; 0x01
   1b892:	88 83       	st	Y, r24
   1b894:	ca 51       	subi	r28, 0x1A	; 26
   1b896:	d2 40       	sbci	r29, 0x02	; 2
    if(fo == NULL)
   1b898:	89 2b       	or	r24, r25
   1b89a:	21 f4       	brne	.+8      	; 0x1b8a4 <lif_extract_e010_as_ascii+0x14a>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b89c:	c6 01       	movw	r24, r12
   1b89e:	0e 94 8b ce 	call	0x19d16	; 0x19d16 <lif_close_volume>
   1b8a2:	91 cf       	rjmp	.-222    	; 0x1b7c6 <lif_extract_e010_as_ascii+0x6c>
    {
        lif_closedir(LIF);
        return(0);
    }

    printf("Extracting: %s\n", username);
   1b8a4:	ef 92       	push	r14
   1b8a6:	c4 5e       	subi	r28, 0xE4	; 228
   1b8a8:	dd 4f       	sbci	r29, 0xFD	; 253
   1b8aa:	98 81       	ld	r25, Y
   1b8ac:	cc 51       	subi	r28, 0x1C	; 28
   1b8ae:	d2 40       	sbci	r29, 0x02	; 2
   1b8b0:	9f 93       	push	r25
   1b8b2:	8b ea       	ldi	r24, 0xAB	; 171
   1b8b4:	96 e3       	ldi	r25, 0x36	; 54
   1b8b6:	1f 92       	push	r1
   1b8b8:	9f 93       	push	r25
   1b8ba:	8f 93       	push	r24
   1b8bc:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>

    bytes = 0;
    wind = 0;
    ind = 0;

    while(lif_bytes2sectors(offset) <= end)
   1b8c0:	0f 90       	pop	r0
   1b8c2:	0f 90       	pop	r0
   1b8c4:	0f 90       	pop	r0
   1b8c6:	0f 90       	pop	r0
   1b8c8:	0f 90       	pop	r0
    }

    printf("Extracting: %s\n", username);

    bytes = 0;
    wind = 0;
   1b8ca:	81 2c       	mov	r8, r1
   1b8cc:	91 2c       	mov	r9, r1
    uint32_t start, end;    // sectors
    long offset, bytes;     // bytes
    int index;
    int i, len,size;
    int status = 1;
    int done = 0;
   1b8ce:	c8 5e       	subi	r28, 0xE8	; 232
   1b8d0:	dd 4f       	sbci	r29, 0xFD	; 253
   1b8d2:	19 82       	std	Y+1, r1	; 0x01
   1b8d4:	18 82       	st	Y, r1
   1b8d6:	c8 51       	subi	r28, 0x18	; 24
   1b8d8:	d2 40       	sbci	r29, 0x02	; 2
    lif_t *LIF;
    uint32_t start, end;    // sectors
    long offset, bytes;     // bytes
    int index;
    int i, len,size;
    int status = 1;
   1b8da:	a1 e0       	ldi	r26, 0x01	; 1
   1b8dc:	cb 5e       	subi	r28, 0xEB	; 235
   1b8de:	dd 4f       	sbci	r29, 0xFD	; 253
   1b8e0:	a8 83       	st	Y, r26
   1b8e2:	c5 51       	subi	r28, 0x15	; 21
   1b8e4:	d2 40       	sbci	r29, 0x02	; 2
   1b8e6:	f1 2c       	mov	r15, r1
        return(0);
    }

    printf("Extracting: %s\n", username);

    bytes = 0;
   1b8e8:	41 2c       	mov	r4, r1
   1b8ea:	51 2c       	mov	r5, r1
   1b8ec:	32 01       	movw	r6, r4
                        status = 0;
                        done = 1;
                        break;
                    }
                    bytes += size;
                    printf("Wrote: %8ld\r", bytes);
   1b8ee:	8b ee       	ldi	r24, 0xEB	; 235
   1b8f0:	95 e3       	ldi	r25, 0x35	; 53
   1b8f2:	9c 01       	movw	r18, r24
   1b8f4:	40 e0       	ldi	r20, 0x00	; 0
   1b8f6:	cf 5d       	subi	r28, 0xDF	; 223
   1b8f8:	dd 4f       	sbci	r29, 0xFD	; 253
   1b8fa:	28 83       	st	Y, r18
   1b8fc:	39 83       	std	Y+1, r19	; 0x01
   1b8fe:	4a 83       	std	Y+2, r20	; 0x02
   1b900:	c1 52       	subi	r28, 0x21	; 33
   1b902:	d2 40       	sbci	r29, 0x02	; 2
                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1b904:	88 ef       	ldi	r24, 0xF8	; 248
   1b906:	95 e3       	ldi	r25, 0x35	; 53
   1b908:	9c 01       	movw	r18, r24
   1b90a:	40 e0       	ldi	r20, 0x00	; 0
   1b90c:	cc 5d       	subi	r28, 0xDC	; 220
   1b90e:	dd 4f       	sbci	r29, 0xFD	; 253
   1b910:	28 83       	st	Y, r18
   1b912:	39 83       	std	Y+1, r19	; 0x01
   1b914:	4a 83       	std	Y+2, r20	; 0x02
   1b916:	c4 52       	subi	r28, 0x24	; 36
   1b918:	d2 40       	sbci	r29, 0x02	; 2

    bytes = 0;
    wind = 0;
    ind = 0;

    while(lif_bytes2sectors(offset) <= end)
   1b91a:	cf 5e       	subi	r28, 0xEF	; 239
   1b91c:	dd 4f       	sbci	r29, 0xFD	; 253
   1b91e:	28 81       	ld	r18, Y
   1b920:	39 81       	ldd	r19, Y+1	; 0x01
   1b922:	4a 81       	ldd	r20, Y+2	; 0x02
   1b924:	5b 81       	ldd	r21, Y+3	; 0x03
   1b926:	c1 51       	subi	r28, 0x11	; 17
   1b928:	d2 40       	sbci	r29, 0x02	; 2
   1b92a:	bb 27       	eor	r27, r27
   1b92c:	a5 2f       	mov	r26, r21
   1b92e:	94 2f       	mov	r25, r20
   1b930:	83 2f       	mov	r24, r19
   1b932:	c9 5d       	subi	r28, 0xD9	; 217
   1b934:	dd 4f       	sbci	r29, 0xFD	; 253
   1b936:	28 81       	ld	r18, Y
   1b938:	39 81       	ldd	r19, Y+1	; 0x01
   1b93a:	4a 81       	ldd	r20, Y+2	; 0x02
   1b93c:	5b 81       	ldd	r21, Y+3	; 0x03
   1b93e:	c7 52       	subi	r28, 0x27	; 39
   1b940:	d2 40       	sbci	r29, 0x02	; 2
   1b942:	28 17       	cp	r18, r24
   1b944:	39 07       	cpc	r19, r25
   1b946:	4a 07       	cpc	r20, r26
   1b948:	5b 07       	cpc	r21, r27
   1b94a:	08 f4       	brcc	.+2      	; 0x1b94e <lif_extract_e010_as_ascii+0x1f4>
   1b94c:	76 c1       	rjmp	.+748    	; 0x1bc3a <lif_extract_e010_as_ascii+0x4e0>
    {
        // LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
   1b94e:	00 e0       	ldi	r16, 0x00	; 0
   1b950:	11 e0       	ldi	r17, 0x01	; 1
   1b952:	cf 5e       	subi	r28, 0xEF	; 239
   1b954:	dd 4f       	sbci	r29, 0xFD	; 253
   1b956:	28 81       	ld	r18, Y
   1b958:	39 81       	ldd	r19, Y+1	; 0x01
   1b95a:	4a 81       	ldd	r20, Y+2	; 0x02
   1b95c:	5b 81       	ldd	r21, Y+3	; 0x03
   1b95e:	c1 51       	subi	r28, 0x11	; 17
   1b960:	d2 40       	sbci	r29, 0x02	; 2
   1b962:	be 01       	movw	r22, r28
   1b964:	6b 5f       	subi	r22, 0xFB	; 251
   1b966:	7e 4f       	sbci	r23, 0xFE	; 254
   1b968:	c6 01       	movw	r24, r12
   1b96a:	0e 94 f3 c5 	call	0x18be6	; 0x18be6 <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1b96e:	6f 3f       	cpi	r22, 0xFF	; 255
   1b970:	71 05       	cpc	r23, r1
   1b972:	09 f0       	breq	.+2      	; 0x1b976 <lif_extract_e010_as_ascii+0x21c>
   1b974:	0c f4       	brge	.+2      	; 0x1b978 <lif_extract_e010_as_ascii+0x21e>
   1b976:	5b c1       	rjmp	.+694    	; 0x1bc2e <lif_extract_e010_as_ascii+0x4d4>
   1b978:	00 e0       	ldi	r16, 0x00	; 0
   1b97a:	10 e0       	ldi	r17, 0x00	; 0
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1b97c:	c8 5e       	subi	r28, 0xE8	; 232
   1b97e:	dd 4f       	sbci	r29, 0xFD	; 253
   1b980:	a8 81       	ld	r26, Y
   1b982:	b9 81       	ldd	r27, Y+1	; 0x01
   1b984:	c8 51       	subi	r28, 0x18	; 24
   1b986:	d2 40       	sbci	r29, 0x02	; 2
   1b988:	ab 2b       	or	r26, r27
   1b98a:	09 f0       	breq	.+2      	; 0x1b98e <lif_extract_e010_as_ascii+0x234>
   1b98c:	3c c1       	rjmp	.+632    	; 0x1bc06 <lif_extract_e010_as_ascii+0x4ac>
        {
            if(buf[ind] == 0xDF || buf[ind] == 0xCF || buf[ind] == 0x6F)
   1b98e:	e5 e0       	ldi	r30, 0x05	; 5
   1b990:	f1 e0       	ldi	r31, 0x01	; 1
   1b992:	ec 0f       	add	r30, r28
   1b994:	fd 1f       	adc	r31, r29
   1b996:	e0 0f       	add	r30, r16
   1b998:	f1 1f       	adc	r31, r17
   1b99a:	80 81       	ld	r24, Z
   1b99c:	98 2f       	mov	r25, r24
   1b99e:	9f 7e       	andi	r25, 0xEF	; 239
   1b9a0:	9f 3c       	cpi	r25, 0xCF	; 207
   1b9a2:	11 f0       	breq	.+4      	; 0x1b9a8 <lif_extract_e010_as_ascii+0x24e>
   1b9a4:	8f 36       	cpi	r24, 0x6F	; 111
   1b9a6:	d9 f5       	brne	.+118    	; 0x1ba1e <lif_extract_e010_as_ascii+0x2c4>
            {
                ++ind;
                len = buf[ind++] & 0xff;
   1b9a8:	e5 e0       	ldi	r30, 0x05	; 5
   1b9aa:	f1 e0       	ldi	r31, 0x01	; 1
   1b9ac:	ec 0f       	add	r30, r28
   1b9ae:	fd 1f       	adc	r31, r29
   1b9b0:	e0 0f       	add	r30, r16
   1b9b2:	f1 1f       	adc	r31, r17
   1b9b4:	21 80       	ldd	r2, Z+1	; 0x01
                len |= ((buf[ind++] & 0xff) <<8); 
   1b9b6:	f8 01       	movw	r30, r16
   1b9b8:	32 96       	adiw	r30, 0x02	; 2
   1b9ba:	45 e0       	ldi	r20, 0x05	; 5
   1b9bc:	51 e0       	ldi	r21, 0x01	; 1
   1b9be:	4c 0f       	add	r20, r28
   1b9c0:	5d 1f       	adc	r21, r29
   1b9c2:	e4 0f       	add	r30, r20
   1b9c4:	f5 1f       	adc	r31, r21
   1b9c6:	0d 5f       	subi	r16, 0xFD	; 253
   1b9c8:	1f 4f       	sbci	r17, 0xFF	; 255
   1b9ca:	80 81       	ld	r24, Z
   1b9cc:	31 2c       	mov	r3, r1
   1b9ce:	38 2a       	or	r3, r24
                // EOF ?
                if(len == 0)
   1b9d0:	21 14       	cp	r2, r1
   1b9d2:	31 04       	cpc	r3, r1
   1b9d4:	09 f4       	brne	.+2      	; 0x1b9d8 <lif_extract_e010_as_ascii+0x27e>
   1b9d6:	0f c1       	rjmp	.+542    	; 0x1bbf6 <lif_extract_e010_as_ascii+0x49c>
                {
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
   1b9d8:	5f ef       	ldi	r21, 0xFF	; 255
   1b9da:	25 16       	cp	r2, r21
   1b9dc:	31 04       	cpc	r3, r1
   1b9de:	09 f0       	breq	.+2      	; 0x1b9e2 <lif_extract_e010_as_ascii+0x288>
   1b9e0:	7c f4       	brge	.+30     	; 0x1ba00 <lif_extract_e010_as_ascii+0x2a6>
   1b9e2:	ca 5e       	subi	r28, 0xEA	; 234
   1b9e4:	dd 4f       	sbci	r29, 0xFD	; 253
   1b9e6:	19 82       	std	Y+1, r1	; 0x01
   1b9e8:	18 82       	st	Y, r1
   1b9ea:	c6 51       	subi	r28, 0x16	; 22
   1b9ec:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
            // write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
   1b9ee:	c1 01       	movw	r24, r2
   1b9f0:	01 97       	sbiw	r24, 0x01	; 1
   1b9f2:	c5 5d       	subi	r28, 0xD5	; 213
   1b9f4:	dd 4f       	sbci	r29, 0xFD	; 253
   1b9f6:	99 83       	std	Y+1, r25	; 0x01
   1b9f8:	88 83       	st	Y, r24
   1b9fa:	cb 52       	subi	r28, 0x2B	; 43
   1b9fc:	d2 40       	sbci	r29, 0x02	; 2
   1b9fe:	7b c0       	rjmp	.+246    	; 0x1baf6 <lif_extract_e010_as_ascii+0x39c>
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
                {
                    printf("lif_extract_e010_as_ascii: string too big size = %d\n", (int)len);
   1ba00:	3f 92       	push	r3
   1ba02:	2f 92       	push	r2
   1ba04:	86 e7       	ldi	r24, 0x76	; 118
   1ba06:	96 e3       	ldi	r25, 0x36	; 54
   1ba08:	1f 92       	push	r1
   1ba0a:	9f 93       	push	r25
   1ba0c:	8f 93       	push	r24
   1ba0e:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
                    status = 0;
                    done = 1;
                    break;
   1ba12:	0f 90       	pop	r0
   1ba14:	0f 90       	pop	r0
   1ba16:	0f 90       	pop	r0
   1ba18:	0f 90       	pop	r0
   1ba1a:	0f 90       	pop	r0
   1ba1c:	2b c0       	rjmp	.+86     	; 0x1ba74 <lif_extract_e010_as_ascii+0x31a>
                }
            }
            else if(buf[ind] == 0xEF)
   1ba1e:	8f 3e       	cpi	r24, 0xEF	; 239
   1ba20:	09 f4       	brne	.+2      	; 0x1ba24 <lif_extract_e010_as_ascii+0x2ca>
   1ba22:	f1 c0       	rjmp	.+482    	; 0x1bc06 <lif_extract_e010_as_ascii+0x4ac>
                ind = 0;
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
   1ba24:	1f 93       	push	r17
   1ba26:	0f 93       	push	r16
   1ba28:	cc 5e       	subi	r28, 0xEC	; 236
   1ba2a:	dd 4f       	sbci	r29, 0xFD	; 253
   1ba2c:	b8 81       	ld	r27, Y
   1ba2e:	c4 51       	subi	r28, 0x14	; 20
   1ba30:	d2 40       	sbci	r29, 0x02	; 2
   1ba32:	bf 93       	push	r27
   1ba34:	cd 5e       	subi	r28, 0xED	; 237
   1ba36:	dd 4f       	sbci	r29, 0xFD	; 253
   1ba38:	28 81       	ld	r18, Y
   1ba3a:	c3 51       	subi	r28, 0x13	; 19
   1ba3c:	d2 40       	sbci	r29, 0x02	; 2
   1ba3e:	2f 93       	push	r18
   1ba40:	ce 5e       	subi	r28, 0xEE	; 238
   1ba42:	dd 4f       	sbci	r29, 0xFD	; 253
   1ba44:	38 81       	ld	r19, Y
   1ba46:	c2 51       	subi	r28, 0x12	; 18
   1ba48:	d2 40       	sbci	r29, 0x02	; 2
   1ba4a:	3f 93       	push	r19
   1ba4c:	cf 5e       	subi	r28, 0xEF	; 239
   1ba4e:	dd 4f       	sbci	r29, 0xFD	; 253
   1ba50:	48 81       	ld	r20, Y
   1ba52:	c1 51       	subi	r28, 0x11	; 17
   1ba54:	d2 40       	sbci	r29, 0x02	; 2
   1ba56:	4f 93       	push	r20
   1ba58:	1f 92       	push	r1
   1ba5a:	8f 93       	push	r24
   1ba5c:	80 e2       	ldi	r24, 0x20	; 32
   1ba5e:	96 e3       	ldi	r25, 0x36	; 54
   1ba60:	1f 92       	push	r1
   1ba62:	9f 93       	push	r25
   1ba64:	8f 93       	push	r24
   1ba66:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
                status = 0;
                done = 1;
                break;
   1ba6a:	0f b6       	in	r0, 0x3f	; 63
   1ba6c:	f8 94       	cli
   1ba6e:	de bf       	out	0x3e, r29	; 62
   1ba70:	0f be       	out	0x3f, r0	; 63
   1ba72:	cd bf       	out	0x3d, r28	; 61
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
                status = 0;
                done = 1;
   1ba74:	a1 e0       	ldi	r26, 0x01	; 1
   1ba76:	b0 e0       	ldi	r27, 0x00	; 0
   1ba78:	c8 5e       	subi	r28, 0xE8	; 232
   1ba7a:	dd 4f       	sbci	r29, 0xFD	; 253
   1ba7c:	b9 83       	std	Y+1, r27	; 0x01
   1ba7e:	a8 83       	st	Y, r26
   1ba80:	c8 51       	subi	r28, 0x18	; 24
   1ba82:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
                status = 0;
   1ba84:	cb 5e       	subi	r28, 0xEB	; 235
   1ba86:	dd 4f       	sbci	r29, 0xFD	; 253
   1ba88:	18 82       	st	Y, r1
   1ba8a:	c5 51       	subi	r28, 0x15	; 21
   1ba8c:	d2 40       	sbci	r29, 0x02	; 2
   1ba8e:	f1 2c       	mov	r15, r1
                done = 1;
                break;
   1ba90:	ba c0       	rjmp	.+372    	; 0x1bc06 <lif_extract_e010_as_ascii+0x4ac>
            }
            // write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1ba92:	0f 3f       	cpi	r16, 0xFF	; 255
   1ba94:	11 05       	cpc	r17, r1
   1ba96:	11 f0       	breq	.+4      	; 0x1ba9c <lif_extract_e010_as_ascii+0x342>
   1ba98:	0c f0       	brlt	.+2      	; 0x1ba9c <lif_extract_e010_as_ascii+0x342>
   1ba9a:	b5 c0       	rjmp	.+362    	; 0x1bc06 <lif_extract_e010_as_ascii+0x4ac>
            {
                if(buf[ind] == '\r' && i == len-1)
   1ba9c:	e5 e0       	ldi	r30, 0x05	; 5
   1ba9e:	f1 e0       	ldi	r31, 0x01	; 1
   1baa0:	ec 0f       	add	r30, r28
   1baa2:	fd 1f       	adc	r31, r29
   1baa4:	e0 0f       	add	r30, r16
   1baa6:	f1 1f       	adc	r31, r17
   1baa8:	20 81       	ld	r18, Z
   1baaa:	a4 01       	movw	r20, r8
   1baac:	4f 5f       	subi	r20, 0xFF	; 255
   1baae:	5f 4f       	sbci	r21, 0xFF	; 255
   1bab0:	5a 01       	movw	r10, r20
   1bab2:	2d 30       	cpi	r18, 0x0D	; 13
   1bab4:	51 f1       	breq	.+84     	; 0x1bb0a <lif_extract_e010_as_ascii+0x3b0>
                    ++ind;
                    break;
                }
                else 
                {
                    wbuf[wind++] = buf[ind++];
   1bab6:	9a 2d       	mov	r25, r10
   1bab8:	8b 2d       	mov	r24, r11
   1baba:	0f 5f       	subi	r16, 0xFF	; 255
   1babc:	1f 4f       	sbci	r17, 0xFF	; 255
   1babe:	e1 e0       	ldi	r30, 0x01	; 1
   1bac0:	f0 e0       	ldi	r31, 0x00	; 0
   1bac2:	ec 0f       	add	r30, r28
   1bac4:	fd 1f       	adc	r31, r29
   1bac6:	e8 0d       	add	r30, r8
   1bac8:	f9 1d       	adc	r31, r9
   1baca:	20 83       	st	Z, r18
                }

                if(wind >= LIF_SECTOR_SIZE)
   1bacc:	2f ef       	ldi	r18, 0xFF	; 255
   1bace:	a2 16       	cp	r10, r18
   1bad0:	b1 04       	cpc	r11, r1
   1bad2:	09 f0       	breq	.+2      	; 0x1bad6 <lif_extract_e010_as_ascii+0x37c>
   1bad4:	ac f5       	brge	.+106    	; 0x1bb40 <lif_extract_e010_as_ascii+0x3e6>
                status = 0;
                done = 1;
                break;
            }
            // write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1bad6:	ca 5e       	subi	r28, 0xEA	; 234
   1bad8:	dd 4f       	sbci	r29, 0xFD	; 253
   1bada:	48 81       	ld	r20, Y
   1badc:	59 81       	ldd	r21, Y+1	; 0x01
   1bade:	c6 51       	subi	r28, 0x16	; 22
   1bae0:	d2 40       	sbci	r29, 0x02	; 2
   1bae2:	4f 5f       	subi	r20, 0xFF	; 255
   1bae4:	5f 4f       	sbci	r21, 0xFF	; 255
   1bae6:	ca 5e       	subi	r28, 0xEA	; 234
   1bae8:	dd 4f       	sbci	r29, 0xFD	; 253
   1baea:	59 83       	std	Y+1, r21	; 0x01
   1baec:	48 83       	st	Y, r20
   1baee:	c6 51       	subi	r28, 0x16	; 22
   1baf0:	d2 40       	sbci	r29, 0x02	; 2
   1baf2:	89 2e       	mov	r8, r25
   1baf4:	98 2e       	mov	r9, r24
   1baf6:	ca 5e       	subi	r28, 0xEA	; 234
   1baf8:	dd 4f       	sbci	r29, 0xFD	; 253
   1bafa:	88 81       	ld	r24, Y
   1bafc:	99 81       	ldd	r25, Y+1	; 0x01
   1bafe:	c6 51       	subi	r28, 0x16	; 22
   1bb00:	d2 40       	sbci	r29, 0x02	; 2
   1bb02:	82 15       	cp	r24, r2
   1bb04:	93 05       	cpc	r25, r3
   1bb06:	2c f2       	brlt	.-118    	; 0x1ba92 <lif_extract_e010_as_ascii+0x338>
   1bb08:	70 c0       	rjmp	.+224    	; 0x1bbea <lif_extract_e010_as_ascii+0x490>
            {
                if(buf[ind] == '\r' && i == len-1)
   1bb0a:	ca 5e       	subi	r28, 0xEA	; 234
   1bb0c:	dd 4f       	sbci	r29, 0xFD	; 253
   1bb0e:	88 81       	ld	r24, Y
   1bb10:	99 81       	ldd	r25, Y+1	; 0x01
   1bb12:	c6 51       	subi	r28, 0x16	; 22
   1bb14:	d2 40       	sbci	r29, 0x02	; 2
   1bb16:	c5 5d       	subi	r28, 0xD5	; 213
   1bb18:	dd 4f       	sbci	r29, 0xFD	; 253
   1bb1a:	a8 81       	ld	r26, Y
   1bb1c:	b9 81       	ldd	r27, Y+1	; 0x01
   1bb1e:	cb 52       	subi	r28, 0x2B	; 43
   1bb20:	d2 40       	sbci	r29, 0x02	; 2
   1bb22:	8a 17       	cp	r24, r26
   1bb24:	9b 07       	cpc	r25, r27
   1bb26:	39 f6       	brne	.-114    	; 0x1bab6 <lif_extract_e010_as_ascii+0x35c>
                {
                    wbuf[wind++] = '\n';
   1bb28:	e1 e0       	ldi	r30, 0x01	; 1
   1bb2a:	f0 e0       	ldi	r31, 0x00	; 0
   1bb2c:	ec 0f       	add	r30, r28
   1bb2e:	fd 1f       	adc	r31, r29
   1bb30:	e8 0d       	add	r30, r8
   1bb32:	f9 1d       	adc	r31, r9
   1bb34:	ba e0       	ldi	r27, 0x0A	; 10
   1bb36:	b0 83       	st	Z, r27
                    ++ind;
   1bb38:	0f 5f       	subi	r16, 0xFF	; 255
   1bb3a:	1f 4f       	sbci	r17, 0xFF	; 255
            // write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
                {
                    wbuf[wind++] = '\n';
   1bb3c:	4a 01       	movw	r8, r20
                    ++ind;
                    break;
   1bb3e:	55 c0       	rjmp	.+170    	; 0x1bbea <lif_extract_e010_as_ascii+0x490>
                    wbuf[wind++] = buf[ind++];
                }

                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
   1bb40:	c6 5e       	subi	r28, 0xE6	; 230
   1bb42:	dd 4f       	sbci	r29, 0xFD	; 253
   1bb44:	28 81       	ld	r18, Y
   1bb46:	39 81       	ldd	r19, Y+1	; 0x01
   1bb48:	ca 51       	subi	r28, 0x1A	; 26
   1bb4a:	d2 40       	sbci	r29, 0x02	; 2
   1bb4c:	a5 01       	movw	r20, r10
   1bb4e:	61 e0       	ldi	r22, 0x01	; 1
   1bb50:	70 e0       	ldi	r23, 0x00	; 0
   1bb52:	ce 01       	movw	r24, r28
   1bb54:	01 96       	adiw	r24, 0x01	; 1
   1bb56:	0e 94 be 7b 	call	0xf77c	; 0xf77c <fwrite>
                    if(size < wind)
   1bb5a:	8a 15       	cp	r24, r10
   1bb5c:	9b 05       	cpc	r25, r11
   1bb5e:	14 f5       	brge	.+68     	; 0x1bba4 <lif_extract_e010_as_ascii+0x44a>
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1bb60:	1f 92       	push	r1
   1bb62:	cb 5d       	subi	r28, 0xDB	; 219
   1bb64:	dd 4f       	sbci	r29, 0xFD	; 253
   1bb66:	38 81       	ld	r19, Y
   1bb68:	c5 52       	subi	r28, 0x25	; 37
   1bb6a:	d2 40       	sbci	r29, 0x02	; 2
   1bb6c:	3f 93       	push	r19
   1bb6e:	cc 5d       	subi	r28, 0xDC	; 220
   1bb70:	dd 4f       	sbci	r29, 0xFD	; 253
   1bb72:	48 81       	ld	r20, Y
   1bb74:	c4 52       	subi	r28, 0x24	; 36
   1bb76:	d2 40       	sbci	r29, 0x02	; 2
   1bb78:	4f 93       	push	r20
   1bb7a:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
                        status = 0;
                        done = 1;
                        break;
   1bb7e:	0f 90       	pop	r0
   1bb80:	0f 90       	pop	r0
   1bb82:	0f 90       	pop	r0
                    ++ind;
                    break;
                }
                else 
                {
                    wbuf[wind++] = buf[ind++];
   1bb84:	45 01       	movw	r8, r10
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
                        done = 1;
   1bb86:	81 e0       	ldi	r24, 0x01	; 1
   1bb88:	90 e0       	ldi	r25, 0x00	; 0
   1bb8a:	c8 5e       	subi	r28, 0xE8	; 232
   1bb8c:	dd 4f       	sbci	r29, 0xFD	; 253
   1bb8e:	99 83       	std	Y+1, r25	; 0x01
   1bb90:	88 83       	st	Y, r24
   1bb92:	c8 51       	subi	r28, 0x18	; 24
   1bb94:	d2 40       	sbci	r29, 0x02	; 2
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
   1bb96:	cb 5e       	subi	r28, 0xEB	; 235
   1bb98:	dd 4f       	sbci	r29, 0xFD	; 253
   1bb9a:	18 82       	st	Y, r1
   1bb9c:	c5 51       	subi	r28, 0x15	; 21
   1bb9e:	d2 40       	sbci	r29, 0x02	; 2
   1bba0:	f1 2c       	mov	r15, r1
                        done = 1;
                        break;
   1bba2:	23 c0       	rjmp	.+70     	; 0x1bbea <lif_extract_e010_as_ascii+0x490>
                    }
                    bytes += size;
   1bba4:	09 2e       	mov	r0, r25
   1bba6:	00 0c       	add	r0, r0
   1bba8:	aa 0b       	sbc	r26, r26
   1bbaa:	bb 0b       	sbc	r27, r27
   1bbac:	48 0e       	add	r4, r24
   1bbae:	59 1e       	adc	r5, r25
   1bbb0:	6a 1e       	adc	r6, r26
   1bbb2:	7b 1e       	adc	r7, r27
                    printf("Wrote: %8ld\r", bytes);
   1bbb4:	7f 92       	push	r7
   1bbb6:	6f 92       	push	r6
   1bbb8:	5f 92       	push	r5
   1bbba:	4f 92       	push	r4
   1bbbc:	1f 92       	push	r1
   1bbbe:	ce 5d       	subi	r28, 0xDE	; 222
   1bbc0:	dd 4f       	sbci	r29, 0xFD	; 253
   1bbc2:	98 81       	ld	r25, Y
   1bbc4:	c2 52       	subi	r28, 0x22	; 34
   1bbc6:	d2 40       	sbci	r29, 0x02	; 2
   1bbc8:	9f 93       	push	r25
   1bbca:	cf 5d       	subi	r28, 0xDF	; 223
   1bbcc:	dd 4f       	sbci	r29, 0xFD	; 253
   1bbce:	a8 81       	ld	r26, Y
   1bbd0:	c1 52       	subi	r28, 0x21	; 33
   1bbd2:	d2 40       	sbci	r29, 0x02	; 2
   1bbd4:	af 93       	push	r26
   1bbd6:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1bbda:	0f b6       	in	r0, 0x3f	; 63
   1bbdc:	f8 94       	cli
   1bbde:	de bf       	out	0x3e, r29	; 62
   1bbe0:	0f be       	out	0x3f, r0	; 63
   1bbe2:	cd bf       	out	0x3d, r28	; 61
                    wind = 0;
   1bbe4:	90 e0       	ldi	r25, 0x00	; 0
   1bbe6:	80 e0       	ldi	r24, 0x00	; 0
   1bbe8:	76 cf       	rjmp	.-276    	; 0x1bad6 <lif_extract_e010_as_ascii+0x37c>
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1bbea:	0f 3f       	cpi	r16, 0xFF	; 255
   1bbec:	11 05       	cpc	r17, r1
   1bbee:	09 f0       	breq	.+2      	; 0x1bbf2 <lif_extract_e010_as_ascii+0x498>
   1bbf0:	0c f4       	brge	.+2      	; 0x1bbf4 <lif_extract_e010_as_ascii+0x49a>
   1bbf2:	c4 ce       	rjmp	.-632    	; 0x1b97c <lif_extract_e010_as_ascii+0x222>
   1bbf4:	08 c0       	rjmp	.+16     	; 0x1bc06 <lif_extract_e010_as_ascii+0x4ac>
                len = buf[ind++] & 0xff;
                len |= ((buf[ind++] & 0xff) <<8); 
                // EOF ?
                if(len == 0)
                {
                    done = 1;
   1bbf6:	21 e0       	ldi	r18, 0x01	; 1
   1bbf8:	30 e0       	ldi	r19, 0x00	; 0
   1bbfa:	c8 5e       	subi	r28, 0xE8	; 232
   1bbfc:	dd 4f       	sbci	r29, 0xFD	; 253
   1bbfe:	39 83       	std	Y+1, r19	; 0x01
   1bc00:	28 83       	st	Y, r18
   1bc02:	c8 51       	subi	r28, 0x18	; 24
   1bc04:	d2 40       	sbci	r29, 0x02	; 2

            }   // for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)

        }   // while(ind < LIF_SECTOR_SIZE && status)

        offset += (long) LIF_SECTOR_SIZE;
   1bc06:	cf 5e       	subi	r28, 0xEF	; 239
   1bc08:	dd 4f       	sbci	r29, 0xFD	; 253
   1bc0a:	88 81       	ld	r24, Y
   1bc0c:	99 81       	ldd	r25, Y+1	; 0x01
   1bc0e:	aa 81       	ldd	r26, Y+2	; 0x02
   1bc10:	bb 81       	ldd	r27, Y+3	; 0x03
   1bc12:	c1 51       	subi	r28, 0x11	; 17
   1bc14:	d2 40       	sbci	r29, 0x02	; 2
   1bc16:	9f 5f       	subi	r25, 0xFF	; 255
   1bc18:	af 4f       	sbci	r26, 0xFF	; 255
   1bc1a:	bf 4f       	sbci	r27, 0xFF	; 255
   1bc1c:	cf 5e       	subi	r28, 0xEF	; 239
   1bc1e:	dd 4f       	sbci	r29, 0xFD	; 253
   1bc20:	88 83       	st	Y, r24
   1bc22:	99 83       	std	Y+1, r25	; 0x01
   1bc24:	aa 83       	std	Y+2, r26	; 0x02
   1bc26:	bb 83       	std	Y+3, r27	; 0x03
   1bc28:	c1 51       	subi	r28, 0x11	; 17
   1bc2a:	d2 40       	sbci	r29, 0x02	; 2
   1bc2c:	76 ce       	rjmp	.-788    	; 0x1b91a <lif_extract_e010_as_ascii+0x1c0>
    {
        // LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
        if(size < LIF_SECTOR_SIZE)
        {
            status = 0;
   1bc2e:	cb 5e       	subi	r28, 0xEB	; 235
   1bc30:	dd 4f       	sbci	r29, 0xFD	; 253
   1bc32:	18 82       	st	Y, r1
   1bc34:	c5 51       	subi	r28, 0x15	; 21
   1bc36:	d2 40       	sbci	r29, 0x02	; 2
   1bc38:	f1 2c       	mov	r15, r1
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bc3a:	c6 01       	movw	r24, r12
   1bc3c:	0e 94 8b ce 	call	0x19d16	; 0x19d16 <lif_close_volume>

    }   // while(offset <= end)

    lif_closedir(LIF);
    // Flush any remaining bytes
    if(wind)
   1bc40:	81 14       	cp	r8, r1
   1bc42:	91 04       	cpc	r9, r1
   1bc44:	51 f1       	breq	.+84     	; 0x1bc9a <lif_extract_e010_as_ascii+0x540>
    {
        size = fwrite(wbuf,1,wind,fo);
   1bc46:	c6 5e       	subi	r28, 0xE6	; 230
   1bc48:	dd 4f       	sbci	r29, 0xFD	; 253
   1bc4a:	28 81       	ld	r18, Y
   1bc4c:	39 81       	ldd	r19, Y+1	; 0x01
   1bc4e:	ca 51       	subi	r28, 0x1A	; 26
   1bc50:	d2 40       	sbci	r29, 0x02	; 2
   1bc52:	a4 01       	movw	r20, r8
   1bc54:	61 e0       	ldi	r22, 0x01	; 1
   1bc56:	70 e0       	ldi	r23, 0x00	; 0
   1bc58:	ce 01       	movw	r24, r28
   1bc5a:	01 96       	adiw	r24, 0x01	; 1
   1bc5c:	0e 94 be 7b 	call	0xf77c	; 0xf77c <fwrite>
   1bc60:	8c 01       	movw	r16, r24
        if(size < wind)
   1bc62:	88 15       	cp	r24, r8
   1bc64:	99 05       	cpc	r25, r9
   1bc66:	84 f4       	brge	.+32     	; 0x1bc88 <lif_extract_e010_as_ascii+0x52e>
        {
            printf("lif_extract_e010_as_ascii: write error\n");
   1bc68:	83 ec       	ldi	r24, 0xC3	; 195
   1bc6a:	95 e3       	ldi	r25, 0x35	; 53
   1bc6c:	1f 92       	push	r1
   1bc6e:	9f 93       	push	r25
   1bc70:	8f 93       	push	r24
   1bc72:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1bc76:	0f 90       	pop	r0
   1bc78:	0f 90       	pop	r0
   1bc7a:	0f 90       	pop	r0
            status = 0;
   1bc7c:	cb 5e       	subi	r28, 0xEB	; 235
   1bc7e:	dd 4f       	sbci	r29, 0xFD	; 253
   1bc80:	18 82       	st	Y, r1
   1bc82:	c5 51       	subi	r28, 0x15	; 21
   1bc84:	d2 40       	sbci	r29, 0x02	; 2
   1bc86:	f1 2c       	mov	r15, r1
        }
        bytes += size;
   1bc88:	c8 01       	movw	r24, r16
   1bc8a:	01 2e       	mov	r0, r17
   1bc8c:	00 0c       	add	r0, r0
   1bc8e:	aa 0b       	sbc	r26, r26
   1bc90:	bb 0b       	sbc	r27, r27
   1bc92:	48 0e       	add	r4, r24
   1bc94:	59 1e       	adc	r5, r25
   1bc96:	6a 1e       	adc	r6, r26
   1bc98:	7b 1e       	adc	r7, r27
    }
    fclose(fo);
   1bc9a:	c6 5e       	subi	r28, 0xE6	; 230
   1bc9c:	dd 4f       	sbci	r29, 0xFD	; 253
   1bc9e:	88 81       	ld	r24, Y
   1bca0:	99 81       	ldd	r25, Y+1	; 0x01
   1bca2:	ca 51       	subi	r28, 0x1A	; 26
   1bca4:	d2 40       	sbci	r29, 0x02	; 2
   1bca6:	0e 94 40 7c 	call	0xf880	; 0xf880 <fclose>
    if(t)
   1bcaa:	c3 5e       	subi	r28, 0xE3	; 227
   1bcac:	dd 4f       	sbci	r29, 0xFD	; 253
   1bcae:	88 81       	ld	r24, Y
   1bcb0:	99 81       	ldd	r25, Y+1	; 0x01
   1bcb2:	aa 81       	ldd	r26, Y+2	; 0x02
   1bcb4:	bb 81       	ldd	r27, Y+3	; 0x03
   1bcb6:	cd 51       	subi	r28, 0x1D	; 29
   1bcb8:	d2 40       	sbci	r29, 0x02	; 2
   1bcba:	00 97       	sbiw	r24, 0x00	; 0
   1bcbc:	a1 05       	cpc	r26, r1
   1bcbe:	b1 05       	cpc	r27, r1
   1bcc0:	d9 f0       	breq	.+54     	; 0x1bcf8 <lif_extract_e010_as_ascii+0x59e>
    {
        struct utimbuf times;
        times.modtime = t;
   1bcc2:	c3 5f       	subi	r28, 0xF3	; 243
   1bcc4:	dd 4f       	sbci	r29, 0xFD	; 253
   1bcc6:	88 83       	st	Y, r24
   1bcc8:	99 83       	std	Y+1, r25	; 0x01
   1bcca:	aa 83       	std	Y+2, r26	; 0x02
   1bccc:	bb 83       	std	Y+3, r27	; 0x03
   1bcce:	cd 50       	subi	r28, 0x0D	; 13
   1bcd0:	d2 40       	sbci	r29, 0x02	; 2
        times.actime = t;
   1bcd2:	c7 5f       	subi	r28, 0xF7	; 247
   1bcd4:	dd 4f       	sbci	r29, 0xFD	; 253
   1bcd6:	88 83       	st	Y, r24
   1bcd8:	99 83       	std	Y+1, r25	; 0x01
   1bcda:	aa 83       	std	Y+2, r26	; 0x02
   1bcdc:	bb 83       	std	Y+3, r27	; 0x03
   1bcde:	c9 50       	subi	r28, 0x09	; 9
   1bce0:	d2 40       	sbci	r29, 0x02	; 2
        utime(username, (struct utimbuf *) &times);
   1bce2:	be 01       	movw	r22, r28
   1bce4:	67 5f       	subi	r22, 0xF7	; 247
   1bce6:	7d 4f       	sbci	r23, 0xFD	; 253
   1bce8:	c4 5e       	subi	r28, 0xE4	; 228
   1bcea:	dd 4f       	sbci	r29, 0xFD	; 253
   1bcec:	88 81       	ld	r24, Y
   1bcee:	cc 51       	subi	r28, 0x1C	; 28
   1bcf0:	d2 40       	sbci	r29, 0x02	; 2
   1bcf2:	9e 2d       	mov	r25, r14
   1bcf4:	0e 94 7e 79 	call	0xf2fc	; 0xf2fc <utime>
    }
    sync();
   1bcf8:	0e 94 3b 7b 	call	0xf676	; 0xf676 <sync>
    printf("Wrote: %8ld\n", bytes);
   1bcfc:	7f 92       	push	r7
   1bcfe:	6f 92       	push	r6
   1bd00:	5f 92       	push	r5
   1bd02:	4f 92       	push	r4
   1bd04:	86 eb       	ldi	r24, 0xB6	; 182
   1bd06:	95 e3       	ldi	r25, 0x35	; 53
   1bd08:	1f 92       	push	r1
   1bd0a:	9f 93       	push	r25
   1bd0c:	8f 93       	push	r24
   1bd0e:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    return(status);
   1bd12:	0f b6       	in	r0, 0x3f	; 63
   1bd14:	f8 94       	cli
   1bd16:	de bf       	out	0x3e, r29	; 62
   1bd18:	0f be       	out	0x3f, r0	; 63
   1bd1a:	cd bf       	out	0x3d, r28	; 61
   1bd1c:	cb 5e       	subi	r28, 0xEB	; 235
   1bd1e:	dd 4f       	sbci	r29, 0xFD	; 253
   1bd20:	88 81       	ld	r24, Y
   1bd22:	c5 51       	subi	r28, 0x15	; 21
   1bd24:	d2 40       	sbci	r29, 0x02	; 2
   1bd26:	9f 2d       	mov	r25, r15
}
   1bd28:	c4 5d       	subi	r28, 0xD4	; 212
   1bd2a:	dd 4f       	sbci	r29, 0xFD	; 253
   1bd2c:	e2 e1       	ldi	r30, 0x12	; 18
   1bd2e:	0c 94 2f e8 	jmp	0x1d05e	; 0x1d05e <__epilogue_restores__>

0001bd32 <lif_extract_lif_as_lif>:
/// @param[in] lifname:  name of file in LIF image we want to extract
/// @param[in] username: new LIF file to create
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_lif_as_lif(char *lifimagename, char *lifname, char *username)
{
   1bd32:	ad e0       	ldi	r26, 0x0D	; 13
   1bd34:	b1 e0       	ldi	r27, 0x01	; 1
   1bd36:	ef e9       	ldi	r30, 0x9F	; 159
   1bd38:	fe ed       	ldi	r31, 0xDE	; 222
   1bd3a:	0c 94 13 e8 	jmp	0x1d026	; 0x1d026 <__prologue_saves__>
   1bd3e:	f8 2e       	mov	r15, r24
   1bd40:	e9 2e       	mov	r14, r25
   1bd42:	16 2f       	mov	r17, r22
   1bd44:	07 2f       	mov	r16, r23
   1bd46:	3a 01       	movw	r6, r20
    int i, size;
    int sectors;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    LIF = lif_open_volume(lifimagename,"r");
   1bd48:	6b e2       	ldi	r22, 0x2B	; 43
   1bd4a:	77 e0       	ldi	r23, 0x07	; 7
   1bd4c:	0e 94 83 d5 	call	0x1ab06	; 0x1ab06 <lif_open_volume>
   1bd50:	4c 01       	movw	r8, r24
    if(LIF == NULL)
   1bd52:	00 97       	sbiw	r24, 0x00	; 0
   1bd54:	51 f4       	brne	.+20     	; 0x1bd6a <lif_extract_lif_as_lif+0x38>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1bd56:	ef 92       	push	r14
   1bd58:	ff 92       	push	r15
   1bd5a:	8e e9       	ldi	r24, 0x9E	; 158
   1bd5c:	95 e3       	ldi	r25, 0x35	; 53
   1bd5e:	1f 92       	push	r1
   1bd60:	9f 93       	push	r25
   1bd62:	8f 93       	push	r24
   1bd64:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1bd68:	11 c0       	rjmp	.+34     	; 0x1bd8c <lif_extract_lif_as_lif+0x5a>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1bd6a:	61 2f       	mov	r22, r17
   1bd6c:	70 2f       	mov	r23, r16
   1bd6e:	38 d9       	rcall	.-3472   	; 0x1afe0 <lif_find_file>
    if(index == -1)
   1bd70:	01 96       	adiw	r24, 0x01	; 1
   1bd72:	a1 f4       	brne	.+40     	; 0x1bd9c <lif_extract_lif_as_lif+0x6a>
    {
        printf("File not found:%s\n", lifname);
   1bd74:	0f 93       	push	r16
   1bd76:	1f 93       	push	r17
   1bd78:	8b e8       	ldi	r24, 0x8B	; 139
   1bd7a:	95 e3       	ldi	r25, 0x35	; 53
   1bd7c:	1f 92       	push	r1
   1bd7e:	9f 93       	push	r25
   1bd80:	8f 93       	push	r24
   1bd82:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bd86:	c4 01       	movw	r24, r8
   1bd88:	0e 94 8b ce 	call	0x19d16	; 0x19d16 <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1bd8c:	0f 90       	pop	r0
   1bd8e:	0f 90       	pop	r0
   1bd90:	0f 90       	pop	r0
   1bd92:	0f 90       	pop	r0
   1bd94:	0f 90       	pop	r0
   1bd96:	00 e0       	ldi	r16, 0x00	; 0
   1bd98:	10 e0       	ldi	r17, 0x00	; 0
   1bd9a:	0c c1       	rjmp	.+536    	; 0x1bfb4 <lif_extract_lif_as_lif+0x282>
    }

    sectors = LIF->DIR.FileSectors;
   1bd9c:	a4 01       	movw	r20, r8
   1bd9e:	40 5a       	subi	r20, 0xA0	; 160
   1bda0:	5f 4f       	sbci	r21, 0xFF	; 255
   1bda2:	c4 5f       	subi	r28, 0xF4	; 244
   1bda4:	de 4f       	sbci	r29, 0xFE	; 254
   1bda6:	59 83       	std	Y+1, r21	; 0x01
   1bda8:	48 83       	st	Y, r20
   1bdaa:	cc 50       	subi	r28, 0x0C	; 12
   1bdac:	d1 40       	sbci	r29, 0x01	; 1

    //Initialize the user file lif_t structure
    ULIF = lif_create_volume(username, "HFSLIF",1,1,sectors);
   1bdae:	da 01       	movw	r26, r20
   1bdb0:	ad 90       	ld	r10, X+
   1bdb2:	bc 90       	ld	r11, X
   1bdb4:	0b 2c       	mov	r0, r11
   1bdb6:	00 0c       	add	r0, r0
   1bdb8:	cc 08       	sbc	r12, r12
   1bdba:	dd 08       	sbc	r13, r13
   1bdbc:	e1 2c       	mov	r14, r1
   1bdbe:	f1 2c       	mov	r15, r1
   1bdc0:	87 01       	movw	r16, r14
   1bdc2:	e3 94       	inc	r14
   1bdc4:	21 e0       	ldi	r18, 0x01	; 1
   1bdc6:	30 e0       	ldi	r19, 0x00	; 0
   1bdc8:	40 e0       	ldi	r20, 0x00	; 0
   1bdca:	50 e0       	ldi	r21, 0x00	; 0
   1bdcc:	62 e2       	ldi	r22, 0x22	; 34
   1bdce:	76 e1       	ldi	r23, 0x16	; 22
   1bdd0:	c3 01       	movw	r24, r6
   1bdd2:	0e 94 f1 d0 	call	0x1a1e2	; 0x1a1e2 <lif_create_volume>
   1bdd6:	5c 01       	movw	r10, r24
    if(ULIF == NULL)
   1bdd8:	89 2b       	or	r24, r25
   1bdda:	11 f4       	brne	.+4      	; 0x1bde0 <lif_extract_lif_as_lif+0xae>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bddc:	c4 01       	movw	r24, r8
   1bdde:	cf c0       	rjmp	.+414    	; 0x1bf7e <lif_extract_lif_as_lif+0x24c>
    }

    // Only the start sector changes

    // Copy directory record
    ULIF->DIR = LIF->DIR;
   1bde0:	81 e2       	ldi	r24, 0x21	; 33
   1bde2:	f4 01       	movw	r30, r8
   1bde4:	e1 5b       	subi	r30, 0xB1	; 177
   1bde6:	ff 4f       	sbci	r31, 0xFF	; 255
   1bde8:	d5 01       	movw	r26, r10
   1bdea:	a1 5b       	subi	r26, 0xB1	; 177
   1bdec:	bf 4f       	sbci	r27, 0xFF	; 255
   1bdee:	01 90       	ld	r0, Z+
   1bdf0:	0d 92       	st	X+, r0
   1bdf2:	8a 95       	dec	r24
   1bdf4:	e1 f7       	brne	.-8      	; 0x1bdee <lif_extract_lif_as_lif+0xbc>

    ULIF->DIR.FileStartSector = 2;
   1bdf6:	82 e0       	ldi	r24, 0x02	; 2
   1bdf8:	90 e0       	ldi	r25, 0x00	; 0
   1bdfa:	a0 e0       	ldi	r26, 0x00	; 0
   1bdfc:	b0 e0       	ldi	r27, 0x00	; 0
   1bdfe:	f5 01       	movw	r30, r10
   1be00:	e4 5a       	subi	r30, 0xA4	; 164
   1be02:	ff 4f       	sbci	r31, 0xFF	; 255
   1be04:	80 83       	st	Z, r24
   1be06:	91 83       	std	Z+1, r25	; 0x01
   1be08:	a2 83       	std	Z+2, r26	; 0x02
   1be0a:	b3 83       	std	Z+3, r27	; 0x03
    ULIF->filesectors = LIF->DIR.FileSectors;
   1be0c:	c4 5f       	subi	r28, 0xF4	; 244
   1be0e:	de 4f       	sbci	r29, 0xFE	; 254
   1be10:	e8 81       	ld	r30, Y
   1be12:	f9 81       	ldd	r31, Y+1	; 0x01
   1be14:	cc 50       	subi	r28, 0x0C	; 12
   1be16:	d1 40       	sbci	r29, 0x01	; 1
   1be18:	80 81       	ld	r24, Z
   1be1a:	91 81       	ldd	r25, Z+1	; 0x01
   1be1c:	a2 81       	ldd	r26, Z+2	; 0x02
   1be1e:	b3 81       	ldd	r27, Z+3	; 0x03
   1be20:	f5 01       	movw	r30, r10
   1be22:	80 8b       	std	Z+16, r24	; 0x10
   1be24:	91 8b       	std	Z+17, r25	; 0x11
   1be26:	a2 8b       	std	Z+18, r26	; 0x12
   1be28:	b3 8b       	std	Z+19, r27	; 0x13

    if( !lif_writedirindex(ULIF,0))
   1be2a:	60 e0       	ldi	r22, 0x00	; 0
   1be2c:	70 e0       	ldi	r23, 0x00	; 0
   1be2e:	c5 01       	movw	r24, r10
   1be30:	0e 94 75 cf 	call	0x19eea	; 0x19eea <lif_writedirindex>
   1be34:	8c 01       	movw	r16, r24
   1be36:	89 2b       	or	r24, r25
   1be38:	41 f0       	breq	.+16     	; 0x1be4a <lif_extract_lif_as_lif+0x118>
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
    }
    if( !lif_writedirEOF(ULIF,1) )
   1be3a:	61 e0       	ldi	r22, 0x01	; 1
   1be3c:	70 e0       	ldi	r23, 0x00	; 0
   1be3e:	c5 01       	movw	r24, r10
   1be40:	0e 94 d1 cf 	call	0x19fa2	; 0x19fa2 <lif_writedirEOF>
   1be44:	8c 01       	movw	r16, r24
   1be46:	89 2b       	or	r24, r25
   1be48:	39 f4       	brne	.+14     	; 0x1be58 <lif_extract_lif_as_lif+0x126>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1be4a:	c4 01       	movw	r24, r8
   1be4c:	0e 94 8b ce 	call	0x19d16	; 0x19d16 <lif_close_volume>
   1be50:	c5 01       	movw	r24, r10
   1be52:	0e 94 8b ce 	call	0x19d16	; 0x19d16 <lif_close_volume>
    }
    if( !lif_writedirEOF(ULIF,1) )
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
   1be56:	ae c0       	rjmp	.+348    	; 0x1bfb4 <lif_extract_lif_as_lif+0x282>
    }

    uoffset =  ULIF->filestart * (long) LIF_SECTOR_SIZE;
   1be58:	d5 01       	movw	r26, r10
   1be5a:	1c 96       	adiw	r26, 0x0c	; 12
   1be5c:	cd 90       	ld	r12, X+
   1be5e:	dd 90       	ld	r13, X+
   1be60:	ed 90       	ld	r14, X+
   1be62:	fc 90       	ld	r15, X
   1be64:	1f 97       	sbiw	r26, 0x0f	; 15
   1be66:	fe 2c       	mov	r15, r14
   1be68:	ed 2c       	mov	r14, r13
   1be6a:	dc 2c       	mov	r13, r12
   1be6c:	cc 24       	eor	r12, r12

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1be6e:	f4 01       	movw	r30, r8
   1be70:	e4 5a       	subi	r30, 0xA4	; 164
   1be72:	ff 4f       	sbci	r31, 0xFF	; 255
   1be74:	80 81       	ld	r24, Z
   1be76:	91 81       	ldd	r25, Z+1	; 0x01
   1be78:	a2 81       	ldd	r26, Z+2	; 0x02
   1be7a:	b3 81       	ldd	r27, Z+3	; 0x03
   1be7c:	22 27       	eor	r18, r18
   1be7e:	38 2f       	mov	r19, r24
   1be80:	49 2f       	mov	r20, r25
   1be82:	5a 2f       	mov	r21, r26
   1be84:	cb 5f       	subi	r28, 0xFB	; 251
   1be86:	de 4f       	sbci	r29, 0xFE	; 254
   1be88:	28 83       	st	Y, r18
   1be8a:	39 83       	std	Y+1, r19	; 0x01
   1be8c:	4a 83       	std	Y+2, r20	; 0x02
   1be8e:	5b 83       	std	Y+3, r21	; 0x03
   1be90:	c5 50       	subi	r28, 0x05	; 5
   1be92:	d1 40       	sbci	r29, 0x01	; 1

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1be94:	21 2c       	mov	r2, r1
   1be96:	31 2c       	mov	r3, r1
            return(0);
        }
        bytes += size;
        offset += size;
        uoffset += size;
        printf("Wrote: %8ld\r", bytes);
   1be98:	8e e7       	ldi	r24, 0x7E	; 126
   1be9a:	95 e3       	ldi	r25, 0x35	; 53
   1be9c:	9c 01       	movw	r18, r24
   1be9e:	40 e0       	ldi	r20, 0x00	; 0
   1bea0:	c7 5f       	subi	r28, 0xF7	; 247
   1bea2:	de 4f       	sbci	r29, 0xFE	; 254
   1bea4:	28 83       	st	Y, r18
   1bea6:	39 83       	std	Y+1, r19	; 0x01
   1bea8:	4a 83       	std	Y+2, r20	; 0x02
   1beaa:	c9 50       	subi	r28, 0x09	; 9
   1beac:	d1 40       	sbci	r29, 0x01	; 1

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1beae:	41 c0       	rjmp	.+130    	; 0x1bf32 <lif_extract_lif_as_lif+0x200>
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }

        lif_write(ULIF,buf,uoffset,LIF_SECTOR_SIZE);
   1beb0:	00 e0       	ldi	r16, 0x00	; 0
   1beb2:	11 e0       	ldi	r17, 0x01	; 1
   1beb4:	a7 01       	movw	r20, r14
   1beb6:	96 01       	movw	r18, r12
   1beb8:	be 01       	movw	r22, r28
   1beba:	6f 5f       	subi	r22, 0xFF	; 255
   1bebc:	7f 4f       	sbci	r23, 0xFF	; 255
   1bebe:	c5 01       	movw	r24, r10
   1bec0:	0e 94 4c c6 	call	0x18c98	; 0x18c98 <lif_write>
        {
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }
        bytes += size;
   1bec4:	05 2c       	mov	r0, r5
   1bec6:	00 0c       	add	r0, r0
   1bec8:	66 08       	sbc	r6, r6
   1beca:	77 08       	sbc	r7, r7
   1becc:	c4 0c       	add	r12, r4
   1bece:	d5 1c       	adc	r13, r5
   1bed0:	e6 1c       	adc	r14, r6
   1bed2:	f7 1c       	adc	r15, r7
        offset += size;
   1bed4:	cb 5f       	subi	r28, 0xFB	; 251
   1bed6:	de 4f       	sbci	r29, 0xFE	; 254
   1bed8:	88 81       	ld	r24, Y
   1beda:	99 81       	ldd	r25, Y+1	; 0x01
   1bedc:	aa 81       	ldd	r26, Y+2	; 0x02
   1bede:	bb 81       	ldd	r27, Y+3	; 0x03
   1bee0:	c5 50       	subi	r28, 0x05	; 5
   1bee2:	d1 40       	sbci	r29, 0x01	; 1
   1bee4:	84 0d       	add	r24, r4
   1bee6:	95 1d       	adc	r25, r5
   1bee8:	a6 1d       	adc	r26, r6
   1beea:	b7 1d       	adc	r27, r7
   1beec:	cb 5f       	subi	r28, 0xFB	; 251
   1beee:	de 4f       	sbci	r29, 0xFE	; 254
   1bef0:	88 83       	st	Y, r24
   1bef2:	99 83       	std	Y+1, r25	; 0x01
   1bef4:	aa 83       	std	Y+2, r26	; 0x02
   1bef6:	bb 83       	std	Y+3, r27	; 0x03
   1bef8:	c5 50       	subi	r28, 0x05	; 5
   1befa:	d1 40       	sbci	r29, 0x01	; 1
        uoffset += size;
        printf("Wrote: %8ld\r", bytes);
   1befc:	ff 92       	push	r15
   1befe:	ef 92       	push	r14
   1bf00:	df 92       	push	r13
   1bf02:	cf 92       	push	r12
   1bf04:	1f 92       	push	r1
   1bf06:	c6 5f       	subi	r28, 0xF6	; 246
   1bf08:	de 4f       	sbci	r29, 0xFE	; 254
   1bf0a:	98 81       	ld	r25, Y
   1bf0c:	ca 50       	subi	r28, 0x0A	; 10
   1bf0e:	d1 40       	sbci	r29, 0x01	; 1
   1bf10:	9f 93       	push	r25
   1bf12:	c7 5f       	subi	r28, 0xF7	; 247
   1bf14:	de 4f       	sbci	r29, 0xFE	; 254
   1bf16:	a8 81       	ld	r26, Y
   1bf18:	c9 50       	subi	r28, 0x09	; 9
   1bf1a:	d1 40       	sbci	r29, 0x01	; 1
   1bf1c:	af 93       	push	r26
   1bf1e:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1bf22:	bf ef       	ldi	r27, 0xFF	; 255
   1bf24:	2b 1a       	sub	r2, r27
   1bf26:	3b 0a       	sbc	r3, r27
   1bf28:	0f b6       	in	r0, 0x3f	; 63
   1bf2a:	f8 94       	cli
   1bf2c:	de bf       	out	0x3e, r29	; 62
   1bf2e:	0f be       	out	0x3f, r0	; 63
   1bf30:	cd bf       	out	0x3d, r28	; 61
   1bf32:	c4 5f       	subi	r28, 0xF4	; 244
   1bf34:	de 4f       	sbci	r29, 0xFE	; 254
   1bf36:	a8 81       	ld	r26, Y
   1bf38:	b9 81       	ldd	r27, Y+1	; 0x01
   1bf3a:	cc 50       	subi	r28, 0x0C	; 12
   1bf3c:	d1 40       	sbci	r29, 0x01	; 1
   1bf3e:	8d 91       	ld	r24, X+
   1bf40:	9c 91       	ld	r25, X
   1bf42:	28 16       	cp	r2, r24
   1bf44:	39 06       	cpc	r3, r25
   1bf46:	f4 f4       	brge	.+60     	; 0x1bf84 <lif_extract_lif_as_lif+0x252>
    {
        size = lif_read(LIF, buf, offset,LIF_SECTOR_SIZE);
   1bf48:	00 e0       	ldi	r16, 0x00	; 0
   1bf4a:	11 e0       	ldi	r17, 0x01	; 1
   1bf4c:	cb 5f       	subi	r28, 0xFB	; 251
   1bf4e:	de 4f       	sbci	r29, 0xFE	; 254
   1bf50:	28 81       	ld	r18, Y
   1bf52:	39 81       	ldd	r19, Y+1	; 0x01
   1bf54:	4a 81       	ldd	r20, Y+2	; 0x02
   1bf56:	5b 81       	ldd	r21, Y+3	; 0x03
   1bf58:	c5 50       	subi	r28, 0x05	; 5
   1bf5a:	d1 40       	sbci	r29, 0x01	; 1
   1bf5c:	be 01       	movw	r22, r28
   1bf5e:	6f 5f       	subi	r22, 0xFF	; 255
   1bf60:	7f 4f       	sbci	r23, 0xFF	; 255
   1bf62:	c4 01       	movw	r24, r8
   1bf64:	0e 94 f3 c5 	call	0x18be6	; 0x18be6 <lif_read>
   1bf68:	2b 01       	movw	r4, r22
   1bf6a:	3c 01       	movw	r6, r24
        if(size < LIF_SECTOR_SIZE)
   1bf6c:	6f 3f       	cpi	r22, 0xFF	; 255
   1bf6e:	71 05       	cpc	r23, r1
   1bf70:	11 f0       	breq	.+4      	; 0x1bf76 <lif_extract_lif_as_lif+0x244>
   1bf72:	0c f0       	brlt	.+2      	; 0x1bf76 <lif_extract_lif_as_lif+0x244>
   1bf74:	9d cf       	rjmp	.-198    	; 0x1beb0 <lif_extract_lif_as_lif+0x17e>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bf76:	c4 01       	movw	r24, r8
   1bf78:	0e 94 8b ce 	call	0x19d16	; 0x19d16 <lif_close_volume>
   1bf7c:	c5 01       	movw	r24, r10
   1bf7e:	0e 94 8b ce 	call	0x19d16	; 0x19d16 <lif_close_volume>
   1bf82:	09 cf       	rjmp	.-494    	; 0x1bd96 <lif_extract_lif_as_lif+0x64>
   1bf84:	c4 01       	movw	r24, r8
   1bf86:	0e 94 8b ce 	call	0x19d16	; 0x19d16 <lif_close_volume>
   1bf8a:	c5 01       	movw	r24, r10
   1bf8c:	0e 94 8b ce 	call	0x19d16	; 0x19d16 <lif_close_volume>
        uoffset += size;
        printf("Wrote: %8ld\r", bytes);
    }
    lif_closedir(LIF);
    lif_closedir(ULIF);
    printf("Wrote: %8ld\n", bytes);
   1bf90:	ff 92       	push	r15
   1bf92:	ef 92       	push	r14
   1bf94:	df 92       	push	r13
   1bf96:	cf 92       	push	r12
   1bf98:	81 e7       	ldi	r24, 0x71	; 113
   1bf9a:	95 e3       	ldi	r25, 0x35	; 53
   1bf9c:	1f 92       	push	r1
   1bf9e:	9f 93       	push	r25
   1bfa0:	8f 93       	push	r24
   1bfa2:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    return(1);
   1bfa6:	0f b6       	in	r0, 0x3f	; 63
   1bfa8:	f8 94       	cli
   1bfaa:	de bf       	out	0x3e, r29	; 62
   1bfac:	0f be       	out	0x3f, r0	; 63
   1bfae:	cd bf       	out	0x3d, r28	; 61
   1bfb0:	01 e0       	ldi	r16, 0x01	; 1
   1bfb2:	10 e0       	ldi	r17, 0x00	; 0
}
   1bfb4:	c8 01       	movw	r24, r16
   1bfb6:	c3 5f       	subi	r28, 0xF3	; 243
   1bfb8:	de 4f       	sbci	r29, 0xFE	; 254
   1bfba:	e2 e1       	ldi	r30, 0x12	; 18
   1bfbc:	0c 94 2f e8 	jmp	0x1d05e	; 0x1d05e <__epilogue_restores__>

0001bfc0 <lif_add_lif_file>:
/// @param[in] lifname: LIF file name to copy file to
/// @param[in] userfile: LIF mage name copy file from 
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_lif_file(char *lifimagename, char *lifname, char *userfile)
{
   1bfc0:	2f 92       	push	r2
   1bfc2:	3f 92       	push	r3
   1bfc4:	4f 92       	push	r4
   1bfc6:	5f 92       	push	r5
   1bfc8:	6f 92       	push	r6
   1bfca:	8f 92       	push	r8
   1bfcc:	9f 92       	push	r9
   1bfce:	af 92       	push	r10
   1bfd0:	bf 92       	push	r11
   1bfd2:	cf 92       	push	r12
   1bfd4:	df 92       	push	r13
   1bfd6:	ef 92       	push	r14
   1bfd8:	ff 92       	push	r15
   1bfda:	0f 93       	push	r16
   1bfdc:	1f 93       	push	r17
   1bfde:	cf 93       	push	r28
   1bfe0:	df 93       	push	r29
   1bfe2:	cd b7       	in	r28, 0x3d	; 61
   1bfe4:	de b7       	in	r29, 0x3e	; 62
   1bfe6:	c4 51       	subi	r28, 0x14	; 20
   1bfe8:	d1 40       	sbci	r29, 0x01	; 1
   1bfea:	0f b6       	in	r0, 0x3f	; 63
   1bfec:	f8 94       	cli
   1bfee:	de bf       	out	0x3e, r29	; 62
   1bff0:	0f be       	out	0x3f, r0	; 63
   1bff2:	cd bf       	out	0x3d, r28	; 61
   1bff4:	7c 01       	movw	r14, r24
   1bff6:	5b 01       	movw	r10, r22
   1bff8:	6a 01       	movw	r12, r20
    long offset, uoffset, start, bytes;
    int i, size;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    if(!*lifimagename)
   1bffa:	dc 01       	movw	r26, r24
   1bffc:	8c 91       	ld	r24, X
   1bffe:	81 11       	cpse	r24, r1
   1c000:	03 c0       	rjmp	.+6      	; 0x1c008 <lif_add_lif_file+0x48>
    {
        printf("lif_add: lifimagename is empty\n");
   1c002:	81 e5       	ldi	r24, 0x51	; 81
   1c004:	95 e3       	ldi	r25, 0x35	; 53
   1c006:	06 c0       	rjmp	.+12     	; 0x1c014 <lif_add_lif_file+0x54>
        return(-1);
    }
    if(!*lifname)
   1c008:	fb 01       	movw	r30, r22
   1c00a:	80 81       	ld	r24, Z
   1c00c:	81 11       	cpse	r24, r1
   1c00e:	0b c0       	rjmp	.+22     	; 0x1c026 <lif_add_lif_file+0x66>
    {
        printf("lif_add: lifname is empty\n");
   1c010:	86 e3       	ldi	r24, 0x36	; 54
   1c012:	95 e3       	ldi	r25, 0x35	; 53
   1c014:	1f 92       	push	r1
   1c016:	9f 93       	push	r25
   1c018:	8f 93       	push	r24
   1c01a:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
        return(-1);
   1c01e:	0f 90       	pop	r0
   1c020:	0f 90       	pop	r0
   1c022:	0f 90       	pop	r0
   1c024:	32 c1       	rjmp	.+612    	; 0x1c28a <lif_add_lif_file+0x2ca>
    }
    if(!*userfile)
   1c026:	da 01       	movw	r26, r20
   1c028:	8c 91       	ld	r24, X
   1c02a:	81 11       	cpse	r24, r1
   1c02c:	03 c0       	rjmp	.+6      	; 0x1c034 <lif_add_lif_file+0x74>
    {
        printf("lif_add: userfile is empty\n");
   1c02e:	8a e1       	ldi	r24, 0x1A	; 26
   1c030:	95 e3       	ldi	r25, 0x35	; 53
   1c032:	f0 cf       	rjmp	.-32     	; 0x1c014 <lif_add_lif_file+0x54>
        return(-1);
    }

    if(debuglevel & 0x400)
   1c034:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1c038:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1c03c:	92 ff       	sbrs	r25, 2
   1c03e:	12 c0       	rjmp	.+36     	; 0x1c064 <lif_add_lif_file+0xa4>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n", 
   1c040:	df 92       	push	r13
   1c042:	4f 93       	push	r20
   1c044:	bf 92       	push	r11
   1c046:	6f 93       	push	r22
   1c048:	ff 92       	push	r15
   1c04a:	ef 92       	push	r14
   1c04c:	8b ee       	ldi	r24, 0xEB	; 235
   1c04e:	94 e3       	ldi	r25, 0x34	; 52
   1c050:	1f 92       	push	r1
   1c052:	9f 93       	push	r25
   1c054:	8f 93       	push	r24
   1c056:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1c05a:	0f b6       	in	r0, 0x3f	; 63
   1c05c:	f8 94       	cli
   1c05e:	de bf       	out	0x3e, r29	; 62
   1c060:	0f be       	out	0x3f, r0	; 63
   1c062:	cd bf       	out	0x3d, r28	; 61
            lifimagename, lifname, userfile);

    // open  userfile as LIF image
    ULIF = lif_open_volume(userfile,"rb+");
   1c064:	6a e7       	ldi	r22, 0x7A	; 122
   1c066:	78 e0       	ldi	r23, 0x08	; 8
   1c068:	c6 01       	movw	r24, r12
   1c06a:	0e 94 83 d5 	call	0x1ab06	; 0x1ab06 <lif_open_volume>
   1c06e:	4c 01       	movw	r8, r24
    if(ULIF == NULL)
   1c070:	00 97       	sbiw	r24, 0x00	; 0
   1c072:	09 f4       	brne	.+2      	; 0x1c076 <lif_add_lif_file+0xb6>
   1c074:	0a c1       	rjmp	.+532    	; 0x1c28a <lif_add_lif_file+0x2ca>
        return(-1); 

    // find lif file in user image
    index = lif_find_file(ULIF, lifname);
   1c076:	b5 01       	movw	r22, r10
   1c078:	0e 94 f0 d7 	call	0x1afe0	; 0x1afe0 <lif_find_file>
    if(index == -1)
   1c07c:	01 96       	adiw	r24, 0x01	; 1
   1c07e:	b1 f4       	brne	.+44     	; 0x1c0ac <lif_add_lif_file+0xec>
    {
        printf("File not found:%s\n", lifname);
   1c080:	bf 92       	push	r11
   1c082:	af 92       	push	r10
   1c084:	88 ed       	ldi	r24, 0xD8	; 216
   1c086:	94 e3       	ldi	r25, 0x34	; 52
   1c088:	1f 92       	push	r1
   1c08a:	9f 93       	push	r25
   1c08c:	8f 93       	push	r24
   1c08e:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c092:	c4 01       	movw	r24, r8
   1c094:	0e 94 8b ce 	call	0x19d16	; 0x19d16 <lif_close_volume>
    index = lif_find_file(ULIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(ULIF);
        return(0);
   1c098:	0f 90       	pop	r0
   1c09a:	0f 90       	pop	r0
   1c09c:	0f 90       	pop	r0
   1c09e:	0f 90       	pop	r0
   1c0a0:	0f 90       	pop	r0
   1c0a2:	60 e0       	ldi	r22, 0x00	; 0
   1c0a4:	70 e0       	ldi	r23, 0x00	; 0
   1c0a6:	80 e0       	ldi	r24, 0x00	; 0
   1c0a8:	90 e0       	ldi	r25, 0x00	; 0
   1c0aa:	09 c1       	rjmp	.+530    	; 0x1c2be <lif_add_lif_file+0x2fe>
    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1c0ac:	6a e7       	ldi	r22, 0x7A	; 122
   1c0ae:	78 e0       	ldi	r23, 0x08	; 8
   1c0b0:	c7 01       	movw	r24, r14
   1c0b2:	0e 94 83 d5 	call	0x1ab06	; 0x1ab06 <lif_open_volume>
   1c0b6:	5c 01       	movw	r10, r24
    if(LIF == NULL)
   1c0b8:	00 97       	sbiw	r24, 0x00	; 0
   1c0ba:	09 f4       	brne	.+2      	; 0x1c0be <lif_add_lif_file+0xfe>
   1c0bc:	e6 c0       	rjmp	.+460    	; 0x1c28a <lif_add_lif_file+0x2ca>
        return(-1); 

    // Now find a new free record that is big enough
    index = lif_newdir(LIF, ULIF->DIR.FileSectors);
   1c0be:	f4 01       	movw	r30, r8
   1c0c0:	e0 5a       	subi	r30, 0xA0	; 160
   1c0c2:	ff 4f       	sbci	r31, 0xFF	; 255
   1c0c4:	40 81       	ld	r20, Z
   1c0c6:	51 81       	ldd	r21, Z+1	; 0x01
   1c0c8:	62 81       	ldd	r22, Z+2	; 0x02
   1c0ca:	73 81       	ldd	r23, Z+3	; 0x03
   1c0cc:	0e 94 1e d4 	call	0x1a83c	; 0x1a83c <lif_newdir>
   1c0d0:	c3 5f       	subi	r28, 0xF3	; 243
   1c0d2:	de 4f       	sbci	r29, 0xFE	; 254
   1c0d4:	99 83       	std	Y+1, r25	; 0x01
   1c0d6:	88 83       	st	Y, r24
   1c0d8:	cd 50       	subi	r28, 0x0D	; 13
   1c0da:	d1 40       	sbci	r29, 0x01	; 1
    if(index == -1)
   1c0dc:	01 96       	adiw	r24, 0x01	; 1
   1c0de:	b9 f4       	brne	.+46     	; 0x1c10e <lif_add_lif_file+0x14e>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n", 
   1c0e0:	df 92       	push	r13
   1c0e2:	cf 92       	push	r12
   1c0e4:	ff 92       	push	r15
   1c0e6:	ef 92       	push	r14
   1c0e8:	88 ea       	ldi	r24, 0xA8	; 168
   1c0ea:	94 e3       	ldi	r25, 0x34	; 52
   1c0ec:	1f 92       	push	r1
   1c0ee:	9f 93       	push	r25
   1c0f0:	8f 93       	push	r24
   1c0f2:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c0f6:	c5 01       	movw	r24, r10
   1c0f8:	0e 94 8b ce 	call	0x19d16	; 0x19d16 <lif_close_volume>
   1c0fc:	c4 01       	movw	r24, r8
   1c0fe:	0e 94 8b ce 	call	0x19d16	; 0x19d16 <lif_close_volume>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n", 
            lifimagename, userfile);
            lif_closedir(LIF);
            lif_closedir(ULIF);
        return(-1);
   1c102:	0f b6       	in	r0, 0x3f	; 63
   1c104:	f8 94       	cli
   1c106:	de bf       	out	0x3e, r29	; 62
   1c108:	0f be       	out	0x3f, r0	; 63
   1c10a:	cd bf       	out	0x3d, r28	; 61
   1c10c:	be c0       	rjmp	.+380    	; 0x1c28a <lif_add_lif_file+0x2ca>
    }

    // Save start sector
    start = LIF->DIR.FileStartSector;
   1c10e:	c5 01       	movw	r24, r10
   1c110:	84 5a       	subi	r24, 0xA4	; 164
   1c112:	9f 4f       	sbci	r25, 0xFF	; 255
   1c114:	dc 01       	movw	r26, r24
   1c116:	4d 91       	ld	r20, X+
   1c118:	5d 91       	ld	r21, X+
   1c11a:	6d 91       	ld	r22, X+
   1c11c:	7c 91       	ld	r23, X
   1c11e:	13 97       	sbiw	r26, 0x03	; 3

    // Copy user image directory record to master image directory record
    LIF->DIR = ULIF->DIR;
   1c120:	21 e2       	ldi	r18, 0x21	; 33
   1c122:	f4 01       	movw	r30, r8
   1c124:	e1 5b       	subi	r30, 0xB1	; 177
   1c126:	ff 4f       	sbci	r31, 0xFF	; 255
   1c128:	1d 97       	sbiw	r26, 0x0d	; 13
   1c12a:	01 90       	ld	r0, Z+
   1c12c:	0d 92       	st	X+, r0
   1c12e:	2a 95       	dec	r18
   1c130:	e1 f7       	brne	.-8      	; 0x1c12a <lif_add_lif_file+0x16a>

    // Restore FileStartSector
    LIF->DIR.FileStartSector = start;
   1c132:	fc 01       	movw	r30, r24
   1c134:	40 83       	st	Z, r20
   1c136:	51 83       	std	Z+1, r21	; 0x01
   1c138:	62 83       	std	Z+2, r22	; 0x02
   1c13a:	73 83       	std	Z+3, r23	; 0x03

    // Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1c13c:	b6 2f       	mov	r27, r22
   1c13e:	a5 2f       	mov	r26, r21
   1c140:	94 2f       	mov	r25, r20
   1c142:	88 27       	eor	r24, r24
   1c144:	cb 5f       	subi	r28, 0xFB	; 251
   1c146:	de 4f       	sbci	r29, 0xFE	; 254
   1c148:	88 83       	st	Y, r24
   1c14a:	99 83       	std	Y+1, r25	; 0x01
   1c14c:	aa 83       	std	Y+2, r26	; 0x02
   1c14e:	bb 83       	std	Y+3, r27	; 0x03
   1c150:	c5 50       	subi	r28, 0x05	; 5
   1c152:	d1 40       	sbci	r29, 0x01	; 1
    // User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1c154:	f4 01       	movw	r30, r8
   1c156:	e4 5a       	subi	r30, 0xA4	; 164
   1c158:	ff 4f       	sbci	r31, 0xFF	; 255
   1c15a:	80 81       	ld	r24, Z
   1c15c:	91 81       	ldd	r25, Z+1	; 0x01
   1c15e:	a2 81       	ldd	r26, Z+2	; 0x02
   1c160:	b3 81       	ldd	r27, Z+3	; 0x03
   1c162:	22 27       	eor	r18, r18
   1c164:	38 2f       	mov	r19, r24
   1c166:	49 2f       	mov	r20, r25
   1c168:	5a 2f       	mov	r21, r26
   1c16a:	c7 5f       	subi	r28, 0xF7	; 247
   1c16c:	de 4f       	sbci	r29, 0xFE	; 254
   1c16e:	28 83       	st	Y, r18
   1c170:	39 83       	std	Y+1, r19	; 0x01
   1c172:	4a 83       	std	Y+2, r20	; 0x02
   1c174:	5b 83       	std	Y+3, r21	; 0x03
   1c176:	c9 50       	subi	r28, 0x09	; 9
   1c178:	d1 40       	sbci	r29, 0x01	; 1
    bytes = 0;
    // Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1c17a:	21 2c       	mov	r2, r1
   1c17c:	31 2c       	mov	r3, r1

    // Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    // User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
   1c17e:	c1 2c       	mov	r12, r1
   1c180:	d1 2c       	mov	r13, r1
   1c182:	76 01       	movw	r14, r12
    // Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1c184:	a5 01       	movw	r20, r10
   1c186:	40 5a       	subi	r20, 0xA0	; 160
   1c188:	5f 4f       	sbci	r21, 0xFF	; 255
   1c18a:	cd 5e       	subi	r28, 0xED	; 237
   1c18c:	de 4f       	sbci	r29, 0xFE	; 254
   1c18e:	59 83       	std	Y+1, r21	; 0x01
   1c190:	48 83       	st	Y, r20
   1c192:	c3 51       	subi	r28, 0x13	; 19
   1c194:	d1 40       	sbci	r29, 0x01	; 1
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
        printf("Wrote: %8ld\r", bytes);
   1c196:	8b e9       	ldi	r24, 0x9B	; 155
   1c198:	94 e3       	ldi	r25, 0x34	; 52
   1c19a:	2c 01       	movw	r4, r24
   1c19c:	c7 5f       	subi	r28, 0xF7	; 247
   1c19e:	de 4f       	sbci	r29, 0xFE	; 254
   1c1a0:	28 81       	ld	r18, Y
   1c1a2:	39 81       	ldd	r19, Y+1	; 0x01
   1c1a4:	4a 81       	ldd	r20, Y+2	; 0x02
   1c1a6:	5b 81       	ldd	r21, Y+3	; 0x03
   1c1a8:	c9 50       	subi	r28, 0x09	; 9
   1c1aa:	d1 40       	sbci	r29, 0x01	; 1
   1c1ac:	2c 0d       	add	r18, r12
   1c1ae:	3d 1d       	adc	r19, r13
   1c1b0:	4e 1d       	adc	r20, r14
   1c1b2:	5f 1d       	adc	r21, r15
   1c1b4:	cb 5f       	subi	r28, 0xFB	; 251
   1c1b6:	de 4f       	sbci	r29, 0xFE	; 254
   1c1b8:	88 81       	ld	r24, Y
   1c1ba:	99 81       	ldd	r25, Y+1	; 0x01
   1c1bc:	aa 81       	ldd	r26, Y+2	; 0x02
   1c1be:	bb 81       	ldd	r27, Y+3	; 0x03
   1c1c0:	c5 50       	subi	r28, 0x05	; 5
   1c1c2:	d1 40       	sbci	r29, 0x01	; 1
   1c1c4:	8c 0d       	add	r24, r12
   1c1c6:	9d 1d       	adc	r25, r13
   1c1c8:	ae 1d       	adc	r26, r14
   1c1ca:	bf 1d       	adc	r27, r15
   1c1cc:	c1 5f       	subi	r28, 0xF1	; 241
   1c1ce:	de 4f       	sbci	r29, 0xFE	; 254
   1c1d0:	88 83       	st	Y, r24
   1c1d2:	99 83       	std	Y+1, r25	; 0x01
   1c1d4:	aa 83       	std	Y+2, r26	; 0x02
   1c1d6:	bb 83       	std	Y+3, r27	; 0x03
   1c1d8:	cf 50       	subi	r28, 0x0F	; 15
   1c1da:	d1 40       	sbci	r29, 0x01	; 1
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    // User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
    // Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1c1dc:	cd 5e       	subi	r28, 0xED	; 237
   1c1de:	de 4f       	sbci	r29, 0xFE	; 254
   1c1e0:	a8 81       	ld	r26, Y
   1c1e2:	b9 81       	ldd	r27, Y+1	; 0x01
   1c1e4:	c3 51       	subi	r28, 0x13	; 19
   1c1e6:	d1 40       	sbci	r29, 0x01	; 1
   1c1e8:	8d 91       	ld	r24, X+
   1c1ea:	9c 91       	ld	r25, X
   1c1ec:	28 16       	cp	r2, r24
   1c1ee:	39 06       	cpc	r3, r25
   1c1f0:	dc f5       	brge	.+118    	; 0x1c268 <lif_add_lif_file+0x2a8>
    {
        // Read
        size = lif_read(ULIF, buf, uoffset, LIF_SECTOR_SIZE);
   1c1f2:	00 e0       	ldi	r16, 0x00	; 0
   1c1f4:	11 e0       	ldi	r17, 0x01	; 1
   1c1f6:	be 01       	movw	r22, r28
   1c1f8:	6f 5f       	subi	r22, 0xFF	; 255
   1c1fa:	7f 4f       	sbci	r23, 0xFF	; 255
   1c1fc:	c4 01       	movw	r24, r8
   1c1fe:	0e 94 f3 c5 	call	0x18be6	; 0x18be6 <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1c202:	6f 3f       	cpi	r22, 0xFF	; 255
   1c204:	71 05       	cpc	r23, r1
   1c206:	a9 f0       	breq	.+42     	; 0x1c232 <lif_add_lif_file+0x272>
   1c208:	a4 f0       	brlt	.+40     	; 0x1c232 <lif_add_lif_file+0x272>
            lif_closedir(ULIF);
            return(-1);
        }

        // Write
        size = lif_write(LIF, buf, offset, LIF_SECTOR_SIZE);
   1c20a:	00 e0       	ldi	r16, 0x00	; 0
   1c20c:	11 e0       	ldi	r17, 0x01	; 1
   1c20e:	c1 5f       	subi	r28, 0xF1	; 241
   1c210:	de 4f       	sbci	r29, 0xFE	; 254
   1c212:	28 81       	ld	r18, Y
   1c214:	39 81       	ldd	r19, Y+1	; 0x01
   1c216:	4a 81       	ldd	r20, Y+2	; 0x02
   1c218:	5b 81       	ldd	r21, Y+3	; 0x03
   1c21a:	cf 50       	subi	r28, 0x0F	; 15
   1c21c:	d1 40       	sbci	r29, 0x01	; 1
   1c21e:	be 01       	movw	r22, r28
   1c220:	6f 5f       	subi	r22, 0xFF	; 255
   1c222:	7f 4f       	sbci	r23, 0xFF	; 255
   1c224:	c5 01       	movw	r24, r10
   1c226:	0e 94 4c c6 	call	0x18c98	; 0x18c98 <lif_write>
        if(size < LIF_SECTOR_SIZE)
   1c22a:	8f 3f       	cpi	r24, 0xFF	; 255
   1c22c:	91 05       	cpc	r25, r1
   1c22e:	09 f0       	breq	.+2      	; 0x1c232 <lif_add_lif_file+0x272>
   1c230:	2c f4       	brge	.+10     	; 0x1c23c <lif_add_lif_file+0x27c>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c232:	c5 01       	movw	r24, r10
   1c234:	0e 94 8b ce 	call	0x19d16	; 0x19d16 <lif_close_volume>
   1c238:	c4 01       	movw	r24, r8
   1c23a:	25 c0       	rjmp	.+74     	; 0x1c286 <lif_add_lif_file+0x2c6>
            lif_closedir(ULIF);
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
   1c23c:	5f ef       	ldi	r21, 0xFF	; 255
   1c23e:	d5 1a       	sub	r13, r21
   1c240:	e5 0a       	sbc	r14, r21
   1c242:	f5 0a       	sbc	r15, r21
        printf("Wrote: %8ld\r", bytes);
   1c244:	ff 92       	push	r15
   1c246:	ef 92       	push	r14
   1c248:	df 92       	push	r13
   1c24a:	cf 92       	push	r12
   1c24c:	1f 92       	push	r1
   1c24e:	5f 92       	push	r5
   1c250:	4f 92       	push	r4
   1c252:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    // User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
    // Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1c256:	8f ef       	ldi	r24, 0xFF	; 255
   1c258:	28 1a       	sub	r2, r24
   1c25a:	38 0a       	sbc	r3, r24
   1c25c:	0f b6       	in	r0, 0x3f	; 63
   1c25e:	f8 94       	cli
   1c260:	de bf       	out	0x3e, r29	; 62
   1c262:	0f be       	out	0x3f, r0	; 63
   1c264:	cd bf       	out	0x3d, r28	; 61
   1c266:	9a cf       	rjmp	.-204    	; 0x1c19c <lif_add_lif_file+0x1dc>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c268:	c4 01       	movw	r24, r8
   1c26a:	0e 94 8b ce 	call	0x19d16	; 0x19d16 <lif_close_volume>
        printf("Wrote: %8ld\r", bytes);
    }
    lif_closedir(ULIF);

    // Write directory record
    if( !lif_writedirindex(LIF,index))
   1c26e:	c3 5f       	subi	r28, 0xF3	; 243
   1c270:	de 4f       	sbci	r29, 0xFE	; 254
   1c272:	68 81       	ld	r22, Y
   1c274:	79 81       	ldd	r23, Y+1	; 0x01
   1c276:	cd 50       	subi	r28, 0x0D	; 13
   1c278:	d1 40       	sbci	r29, 0x01	; 1
   1c27a:	c5 01       	movw	r24, r10
   1c27c:	0e 94 75 cf 	call	0x19eea	; 0x19eea <lif_writedirindex>
   1c280:	89 2b       	or	r24, r25
   1c282:	41 f4       	brne	.+16     	; 0x1c294 <lif_add_lif_file+0x2d4>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c284:	c5 01       	movw	r24, r10
   1c286:	0e 94 8b ce 	call	0x19d16	; 0x19d16 <lif_close_volume>

    // Write directory record
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
   1c28a:	6f ef       	ldi	r22, 0xFF	; 255
   1c28c:	7f ef       	ldi	r23, 0xFF	; 255
   1c28e:	8f ef       	ldi	r24, 0xFF	; 255
   1c290:	9f ef       	ldi	r25, 0xFF	; 255
   1c292:	15 c0       	rjmp	.+42     	; 0x1c2be <lif_add_lif_file+0x2fe>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c294:	c5 01       	movw	r24, r10
   1c296:	0e 94 8b ce 	call	0x19d16	; 0x19d16 <lif_close_volume>
    {
        lif_closedir(LIF);
        return(-1);
    }
    lif_closedir(LIF);
    printf("Wrote: %8ld\n", bytes);
   1c29a:	ff 92       	push	r15
   1c29c:	ef 92       	push	r14
   1c29e:	df 92       	push	r13
   1c2a0:	cf 92       	push	r12
   1c2a2:	8e e8       	ldi	r24, 0x8E	; 142
   1c2a4:	94 e3       	ldi	r25, 0x34	; 52
   1c2a6:	1f 92       	push	r1
   1c2a8:	9f 93       	push	r25
   1c2aa:	8f 93       	push	r24
   1c2ac:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    return(bytes);
   1c2b0:	0f b6       	in	r0, 0x3f	; 63
   1c2b2:	f8 94       	cli
   1c2b4:	de bf       	out	0x3e, r29	; 62
   1c2b6:	0f be       	out	0x3f, r0	; 63
   1c2b8:	cd bf       	out	0x3d, r28	; 61
   1c2ba:	b6 01       	movw	r22, r12
   1c2bc:	c7 01       	movw	r24, r14
}
   1c2be:	cc 5e       	subi	r28, 0xEC	; 236
   1c2c0:	de 4f       	sbci	r29, 0xFE	; 254
   1c2c2:	0f b6       	in	r0, 0x3f	; 63
   1c2c4:	f8 94       	cli
   1c2c6:	de bf       	out	0x3e, r29	; 62
   1c2c8:	0f be       	out	0x3f, r0	; 63
   1c2ca:	cd bf       	out	0x3d, r28	; 61
   1c2cc:	df 91       	pop	r29
   1c2ce:	cf 91       	pop	r28
   1c2d0:	1f 91       	pop	r17
   1c2d2:	0f 91       	pop	r16
   1c2d4:	ff 90       	pop	r15
   1c2d6:	ef 90       	pop	r14
   1c2d8:	df 90       	pop	r13
   1c2da:	cf 90       	pop	r12
   1c2dc:	bf 90       	pop	r11
   1c2de:	af 90       	pop	r10
   1c2e0:	9f 90       	pop	r9
   1c2e2:	8f 90       	pop	r8
   1c2e4:	6f 90       	pop	r6
   1c2e6:	5f 90       	pop	r5
   1c2e8:	4f 90       	pop	r4
   1c2ea:	3f 90       	pop	r3
   1c2ec:	2f 90       	pop	r2
   1c2ee:	08 95       	ret

0001c2f0 <lif_del_file>:
/// @param[in] lifimagename: LIF image name
/// @param[in] lifname: LIF file name
/// @return 1 if deleted, 0 if not found, -1 error
MEMSPACE
int lif_del_file(char *lifimagename, char *lifname)
{
   1c2f0:	ef 92       	push	r14
   1c2f2:	ff 92       	push	r15
   1c2f4:	0f 93       	push	r16
   1c2f6:	1f 93       	push	r17
   1c2f8:	cf 93       	push	r28
   1c2fa:	df 93       	push	r29
   1c2fc:	7c 01       	movw	r14, r24
   1c2fe:	8b 01       	movw	r16, r22
    lif_t *LIF;
    int index;

    if(!*lifimagename)
   1c300:	fc 01       	movw	r30, r24
   1c302:	80 81       	ld	r24, Z
   1c304:	81 11       	cpse	r24, r1
   1c306:	03 c0       	rjmp	.+6      	; 0x1c30e <lif_del_file+0x1e>
    {
        printf("lif_del_file: lifimagename is empty\n");
   1c308:	89 e6       	ldi	r24, 0x69	; 105
   1c30a:	94 e3       	ldi	r25, 0x34	; 52
   1c30c:	06 c0       	rjmp	.+12     	; 0x1c31a <lif_del_file+0x2a>
        return(-1);
    }
    if(!*lifname)
   1c30e:	fb 01       	movw	r30, r22
   1c310:	80 81       	ld	r24, Z
   1c312:	81 11       	cpse	r24, r1
   1c314:	0b c0       	rjmp	.+22     	; 0x1c32c <lif_del_file+0x3c>
    {
        printf("lif_del_file: lifname is empty\n");
   1c316:	89 e4       	ldi	r24, 0x49	; 73
   1c318:	94 e3       	ldi	r25, 0x34	; 52
   1c31a:	1f 92       	push	r1
   1c31c:	9f 93       	push	r25
   1c31e:	8f 93       	push	r24
   1c320:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
        return(-1);
   1c324:	0f 90       	pop	r0
   1c326:	0f 90       	pop	r0
   1c328:	0f 90       	pop	r0
   1c32a:	74 c0       	rjmp	.+232    	; 0x1c414 <lif_del_file+0x124>
    }
    if(debuglevel & 0x400)
   1c32c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1c330:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1c334:	92 ff       	sbrs	r25, 2
   1c336:	13 c0       	rjmp	.+38     	; 0x1c35e <lif_del_file+0x6e>
        printf("LIF image:[%s], LIF name:[%s]\n", 
   1c338:	1f 93       	push	r17
   1c33a:	6f 93       	push	r22
   1c33c:	ff 92       	push	r15
   1c33e:	ef 92       	push	r14
   1c340:	8a e2       	ldi	r24, 0x2A	; 42
   1c342:	94 e3       	ldi	r25, 0x34	; 52
   1c344:	1f 92       	push	r1
   1c346:	9f 93       	push	r25
   1c348:	8f 93       	push	r24
   1c34a:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1c34e:	8d b7       	in	r24, 0x3d	; 61
   1c350:	9e b7       	in	r25, 0x3e	; 62
   1c352:	07 96       	adiw	r24, 0x07	; 7
   1c354:	0f b6       	in	r0, 0x3f	; 63
   1c356:	f8 94       	cli
   1c358:	9e bf       	out	0x3e, r25	; 62
   1c35a:	0f be       	out	0x3f, r0	; 63
   1c35c:	8d bf       	out	0x3d, r24	; 61
            lifimagename, lifname);


    LIF = lif_open_volume(lifimagename,"rb+");
   1c35e:	6a e7       	ldi	r22, 0x7A	; 122
   1c360:	78 e0       	ldi	r23, 0x08	; 8
   1c362:	c7 01       	movw	r24, r14
   1c364:	0e 94 83 d5 	call	0x1ab06	; 0x1ab06 <lif_open_volume>
   1c368:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1c36a:	00 97       	sbiw	r24, 0x00	; 0
   1c36c:	09 f4       	brne	.+2      	; 0x1c370 <lif_del_file+0x80>
   1c36e:	52 c0       	rjmp	.+164    	; 0x1c414 <lif_del_file+0x124>
        return(-1); 

    // Now find file record
    index = lif_find_file(LIF, lifname);
   1c370:	b8 01       	movw	r22, r16
   1c372:	0e 94 f0 d7 	call	0x1afe0	; 0x1afe0 <lif_find_file>
    if(index == -1)
   1c376:	8f 3f       	cpi	r24, 0xFF	; 255
   1c378:	ef ef       	ldi	r30, 0xFF	; 255
   1c37a:	9e 07       	cpc	r25, r30
   1c37c:	c9 f4       	brne	.+50     	; 0x1c3b0 <lif_del_file+0xc0>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c37e:	ce 01       	movw	r24, r28
   1c380:	0e 94 8b ce 	call	0x19d16	; 0x19d16 <lif_close_volume>
    // Now find file record
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        lif_closedir(LIF);
        printf("LIF image:[%s] lif name:[%s] not found\n", lifimagename, lifname);
   1c384:	1f 93       	push	r17
   1c386:	0f 93       	push	r16
   1c388:	ff 92       	push	r15
   1c38a:	ef 92       	push	r14
   1c38c:	82 e0       	ldi	r24, 0x02	; 2
   1c38e:	94 e3       	ldi	r25, 0x34	; 52
   1c390:	1f 92       	push	r1
   1c392:	9f 93       	push	r25
   1c394:	8f 93       	push	r24
   1c396:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
        return(0);
   1c39a:	8d b7       	in	r24, 0x3d	; 61
   1c39c:	9e b7       	in	r25, 0x3e	; 62
   1c39e:	07 96       	adiw	r24, 0x07	; 7
   1c3a0:	0f b6       	in	r0, 0x3f	; 63
   1c3a2:	f8 94       	cli
   1c3a4:	9e bf       	out	0x3e, r25	; 62
   1c3a6:	0f be       	out	0x3f, r0	; 63
   1c3a8:	8d bf       	out	0x3d, r24	; 61
   1c3aa:	80 e0       	ldi	r24, 0x00	; 0
   1c3ac:	90 e0       	ldi	r25, 0x00	; 0
   1c3ae:	34 c0       	rjmp	.+104    	; 0x1c418 <lif_del_file+0x128>
    }


// IF the next record is EOF then update EOF
    if(index >= LIF->EOFindex-1)
   1c3b0:	2a a1       	ldd	r18, Y+34	; 0x22
   1c3b2:	3b a1       	ldd	r19, Y+35	; 0x23
   1c3b4:	21 50       	subi	r18, 0x01	; 1
   1c3b6:	31 09       	sbc	r19, r1
   1c3b8:	fe 01       	movw	r30, r28
   1c3ba:	e6 5a       	subi	r30, 0xA6	; 166
   1c3bc:	ff 4f       	sbci	r31, 0xFF	; 255
   1c3be:	82 17       	cp	r24, r18
   1c3c0:	93 07       	cpc	r25, r19
   1c3c2:	2c f0       	brlt	.+10     	; 0x1c3ce <lif_del_file+0xde>
        LIF->DIR.FileType = 0xffff;
   1c3c4:	2f ef       	ldi	r18, 0xFF	; 255
   1c3c6:	3f ef       	ldi	r19, 0xFF	; 255
   1c3c8:	31 83       	std	Z+1, r19	; 0x01
   1c3ca:	20 83       	st	Z, r18
   1c3cc:	02 c0       	rjmp	.+4      	; 0x1c3d2 <lif_del_file+0xe2>
    else
        LIF->DIR.FileType = 0;
   1c3ce:	11 82       	std	Z+1, r1	; 0x01
   1c3d0:	10 82       	st	Z, r1

    // re-Write directory record
    if( !lif_writedirindex(LIF,index) )
   1c3d2:	bc 01       	movw	r22, r24
   1c3d4:	ce 01       	movw	r24, r28
   1c3d6:	0e 94 75 cf 	call	0x19eea	; 0x19eea <lif_writedirindex>
   1c3da:	89 2b       	or	r24, r25
   1c3dc:	21 f4       	brne	.+8      	; 0x1c3e6 <lif_del_file+0xf6>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c3de:	ce 01       	movw	r24, r28
   1c3e0:	0e 94 8b ce 	call	0x19d16	; 0x19d16 <lif_close_volume>
   1c3e4:	17 c0       	rjmp	.+46     	; 0x1c414 <lif_del_file+0x124>
    {
        lif_closedir(LIF);
        return(-1);
    }

    lif_updatefree(LIF);
   1c3e6:	ce 01       	movw	r24, r28
   1c3e8:	0e 94 e9 cf 	call	0x19fd2	; 0x19fd2 <lif_updatefree>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c3ec:	ce 01       	movw	r24, r28
   1c3ee:	0e 94 8b ce 	call	0x19d16	; 0x19d16 <lif_close_volume>
    }

    lif_updatefree(LIF);

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);
   1c3f2:	1f 93       	push	r17
   1c3f4:	0f 93       	push	r16
   1c3f6:	83 ef       	ldi	r24, 0xF3	; 243
   1c3f8:	93 e3       	ldi	r25, 0x33	; 51
   1c3fa:	1f 92       	push	r1
   1c3fc:	9f 93       	push	r25
   1c3fe:	8f 93       	push	r24
   1c400:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>

    return(1);
   1c404:	0f 90       	pop	r0
   1c406:	0f 90       	pop	r0
   1c408:	0f 90       	pop	r0
   1c40a:	0f 90       	pop	r0
   1c40c:	0f 90       	pop	r0
   1c40e:	81 e0       	ldi	r24, 0x01	; 1
   1c410:	90 e0       	ldi	r25, 0x00	; 0
   1c412:	02 c0       	rjmp	.+4      	; 0x1c418 <lif_del_file+0x128>
            lifimagename, lifname);


    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1); 
   1c414:	8f ef       	ldi	r24, 0xFF	; 255
   1c416:	9f ef       	ldi	r25, 0xFF	; 255

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);

    return(1);
}
   1c418:	cd b7       	in	r28, 0x3d	; 61
   1c41a:	de b7       	in	r29, 0x3e	; 62
   1c41c:	e6 e0       	ldi	r30, 0x06	; 6
   1c41e:	2b c6       	rjmp	.+3158   	; 0x1d076 <__epilogue_restores__+0x18>

0001c420 <lif_rename_file>:
/// @param[in] oldlifname: old LIF file name
/// @param[in] newlifname: new LIF file name
/// @return 1 if renamed, 0 if not found, -1 error
MEMSPACE
int lif_rename_file(char *lifimagename, char *oldlifname, char *newlifname)
{
   1c420:	a0 e0       	ldi	r26, 0x00	; 0
   1c422:	b0 e0       	ldi	r27, 0x00	; 0
   1c424:	e5 e1       	ldi	r30, 0x15	; 21
   1c426:	f2 ee       	ldi	r31, 0xE2	; 226
   1c428:	06 c6       	rjmp	.+3084   	; 0x1d036 <__prologue_saves__+0x10>
   1c42a:	6c 01       	movw	r12, r24
   1c42c:	8b 01       	movw	r16, r22
   1c42e:	7a 01       	movw	r14, r20
    int index;
    lif_t *LIF;

    if(!*lifimagename)
   1c430:	fc 01       	movw	r30, r24
   1c432:	80 81       	ld	r24, Z
   1c434:	81 11       	cpse	r24, r1
   1c436:	03 c0       	rjmp	.+6      	; 0x1c43e <lif_rename_file+0x1e>
    {
        printf("lif_rename_file: lifimagename is empty\n");
   1c438:	8b ec       	ldi	r24, 0xCB	; 203
   1c43a:	93 e3       	ldi	r25, 0x33	; 51
   1c43c:	06 c0       	rjmp	.+12     	; 0x1c44a <lif_rename_file+0x2a>
        return(-1);
    }
    if(!*oldlifname)
   1c43e:	fb 01       	movw	r30, r22
   1c440:	80 81       	ld	r24, Z
   1c442:	81 11       	cpse	r24, r1
   1c444:	0b c0       	rjmp	.+22     	; 0x1c45c <lif_rename_file+0x3c>
    {
        printf("lif_rename_file: old lifname is empty\n");
   1c446:	84 ea       	ldi	r24, 0xA4	; 164
   1c448:	93 e3       	ldi	r25, 0x33	; 51
   1c44a:	1f 92       	push	r1
   1c44c:	9f 93       	push	r25
   1c44e:	8f 93       	push	r24
   1c450:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
        return(-1);
   1c454:	0f 90       	pop	r0
   1c456:	0f 90       	pop	r0
   1c458:	0f 90       	pop	r0
   1c45a:	62 c0       	rjmp	.+196    	; 0x1c520 <lif_rename_file+0x100>
    }
    if(!*newlifname)
   1c45c:	fa 01       	movw	r30, r20
   1c45e:	80 81       	ld	r24, Z
   1c460:	81 11       	cpse	r24, r1
   1c462:	03 c0       	rjmp	.+6      	; 0x1c46a <lif_rename_file+0x4a>
    {
        printf("lif_rename_file: new lifname is empty\n");
   1c464:	8d e7       	ldi	r24, 0x7D	; 125
   1c466:	93 e3       	ldi	r25, 0x33	; 51
   1c468:	f0 cf       	rjmp	.-32     	; 0x1c44a <lif_rename_file+0x2a>
        return(-1);
    }

    if(!lif_checkname(newlifname))
   1c46a:	ca 01       	movw	r24, r20
   1c46c:	0e 94 ff c6 	call	0x18dfe	; 0x18dfe <lif_checkname>
   1c470:	89 2b       	or	r24, r25
   1c472:	19 f4       	brne	.+6      	; 0x1c47a <lif_rename_file+0x5a>
    {
        printf("lif_rename_file: new lifname contains bad characters\n");
   1c474:	87 e4       	ldi	r24, 0x47	; 71
   1c476:	93 e3       	ldi	r25, 0x33	; 51
   1c478:	e8 cf       	rjmp	.-48     	; 0x1c44a <lif_rename_file+0x2a>
        return(-1);

    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1c47a:	6a e7       	ldi	r22, 0x7A	; 122
   1c47c:	78 e0       	ldi	r23, 0x08	; 8
   1c47e:	c6 01       	movw	r24, r12
   1c480:	0e 94 83 d5 	call	0x1ab06	; 0x1ab06 <lif_open_volume>
   1c484:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1c486:	00 97       	sbiw	r24, 0x00	; 0
   1c488:	09 f4       	brne	.+2      	; 0x1c48c <lif_rename_file+0x6c>
   1c48a:	4a c0       	rjmp	.+148    	; 0x1c520 <lif_rename_file+0x100>
        return(-1); 

    // Now find file record
    index = lif_find_file(LIF, oldlifname);
   1c48c:	b8 01       	movw	r22, r16
   1c48e:	0e 94 f0 d7 	call	0x1afe0	; 0x1afe0 <lif_find_file>
   1c492:	5c 01       	movw	r10, r24
    if(index == -1)
   1c494:	01 96       	adiw	r24, 0x01	; 1
   1c496:	c9 f4       	brne	.+50     	; 0x1c4ca <lif_rename_file+0xaa>
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
   1c498:	1f 93       	push	r17
   1c49a:	0f 93       	push	r16
   1c49c:	df 92       	push	r13
   1c49e:	cf 92       	push	r12
   1c4a0:	8e e1       	ldi	r24, 0x1E	; 30
   1c4a2:	93 e3       	ldi	r25, 0x33	; 51
   1c4a4:	1f 92       	push	r1
   1c4a6:	9f 93       	push	r25
   1c4a8:	8f 93       	push	r24
   1c4aa:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c4ae:	ce 01       	movw	r24, r28
   1c4b0:	0e 94 8b ce 	call	0x19d16	; 0x19d16 <lif_close_volume>
    index = lif_find_file(LIF, oldlifname);
    if(index == -1)
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
        lif_closedir(LIF);
        return(0);
   1c4b4:	8d b7       	in	r24, 0x3d	; 61
   1c4b6:	9e b7       	in	r25, 0x3e	; 62
   1c4b8:	07 96       	adiw	r24, 0x07	; 7
   1c4ba:	0f b6       	in	r0, 0x3f	; 63
   1c4bc:	f8 94       	cli
   1c4be:	9e bf       	out	0x3e, r25	; 62
   1c4c0:	0f be       	out	0x3f, r0	; 63
   1c4c2:	8d bf       	out	0x3d, r24	; 61
   1c4c4:	80 e0       	ldi	r24, 0x00	; 0
   1c4c6:	90 e0       	ldi	r25, 0x00	; 0
   1c4c8:	2d c0       	rjmp	.+90     	; 0x1c524 <lif_rename_file+0x104>
    }
    lif_fixname(LIF->DIR.filename, newlifname, 10);
   1c4ca:	4a e0       	ldi	r20, 0x0A	; 10
   1c4cc:	50 e0       	ldi	r21, 0x00	; 0
   1c4ce:	b7 01       	movw	r22, r14
   1c4d0:	ce 01       	movw	r24, r28
   1c4d2:	81 5b       	subi	r24, 0xB1	; 177
   1c4d4:	9f 4f       	sbci	r25, 0xFF	; 255
   1c4d6:	0e 94 39 c7 	call	0x18e72	; 0x18e72 <lif_fixname>

    // re-Write directory record
    if( !lif_writedirindex(LIF,index))
   1c4da:	b5 01       	movw	r22, r10
   1c4dc:	ce 01       	movw	r24, r28
   1c4de:	0e 94 75 cf 	call	0x19eea	; 0x19eea <lif_writedirindex>
   1c4e2:	89 2b       	or	r24, r25
   1c4e4:	21 f4       	brne	.+8      	; 0x1c4ee <lif_rename_file+0xce>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c4e6:	ce 01       	movw	r24, r28
   1c4e8:	0e 94 8b ce 	call	0x19d16	; 0x19d16 <lif_close_volume>
   1c4ec:	19 c0       	rjmp	.+50     	; 0x1c520 <lif_rename_file+0x100>
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);
   1c4ee:	ff 92       	push	r15
   1c4f0:	ef 92       	push	r14
   1c4f2:	1f 93       	push	r17
   1c4f4:	0f 93       	push	r16
   1c4f6:	87 e0       	ldi	r24, 0x07	; 7
   1c4f8:	93 e3       	ldi	r25, 0x33	; 51
   1c4fa:	1f 92       	push	r1
   1c4fc:	9f 93       	push	r25
   1c4fe:	8f 93       	push	r24
   1c500:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c504:	ce 01       	movw	r24, r28
   1c506:	0e 94 8b ce 	call	0x19d16	; 0x19d16 <lif_close_volume>
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
   1c50a:	ed b7       	in	r30, 0x3d	; 61
   1c50c:	fe b7       	in	r31, 0x3e	; 62
   1c50e:	37 96       	adiw	r30, 0x07	; 7
   1c510:	0f b6       	in	r0, 0x3f	; 63
   1c512:	f8 94       	cli
   1c514:	fe bf       	out	0x3e, r31	; 62
   1c516:	0f be       	out	0x3f, r0	; 63
   1c518:	ed bf       	out	0x3d, r30	; 61
   1c51a:	81 e0       	ldi	r24, 0x01	; 1
   1c51c:	90 e0       	ldi	r25, 0x00	; 0
   1c51e:	02 c0       	rjmp	.+4      	; 0x1c524 <lif_rename_file+0x104>

    }

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1); 
   1c520:	8f ef       	ldi	r24, 0xFF	; 255
   1c522:	9f ef       	ldi	r25, 0xFF	; 255
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
}
   1c524:	cd b7       	in	r28, 0x3d	; 61
   1c526:	de b7       	in	r29, 0x3e	; 62
   1c528:	ea e0       	ldi	r30, 0x0A	; 10
   1c52a:	a1 c5       	rjmp	.+2882   	; 0x1d06e <__epilogue_restores__+0x10>

0001c52c <lif_create_image>:
/// @param[in] dirsectors: Number of LIF directory sectors
/// @param[in] sectors: total disk image size in sectors
///@return bytes writting to disk image
MEMSPACE
long lif_create_image(char *lifimagename, char *liflabel, uint32_t dirsectors, uint32_t sectors)
{
   1c52c:	4f 92       	push	r4
   1c52e:	5f 92       	push	r5
   1c530:	6f 92       	push	r6
   1c532:	7f 92       	push	r7
   1c534:	af 92       	push	r10
   1c536:	bf 92       	push	r11
   1c538:	cf 92       	push	r12
   1c53a:	df 92       	push	r13
   1c53c:	ef 92       	push	r14
   1c53e:	ff 92       	push	r15
   1c540:	0f 93       	push	r16
   1c542:	1f 93       	push	r17
   1c544:	cf 93       	push	r28
   1c546:	df 93       	push	r29
   1c548:	27 01       	movw	r4, r14
   1c54a:	38 01       	movw	r6, r16
    uint32_t dirstart,filestart,filesectors,end;
    lif_t *LIF;

    if(!*lifimagename)
   1c54c:	dc 01       	movw	r26, r24
   1c54e:	ec 91       	ld	r30, X
   1c550:	e1 11       	cpse	r30, r1
   1c552:	03 c0       	rjmp	.+6      	; 0x1c55a <lif_create_image+0x2e>
    {
        printf("lif_create_image: lifimagename is empty\n");
   1c554:	8e ed       	ldi	r24, 0xDE	; 222
   1c556:	92 e3       	ldi	r25, 0x32	; 50
   1c558:	16 c0       	rjmp	.+44     	; 0x1c586 <lif_create_image+0x5a>
        return(-1);
    }
    if(!*liflabel)
   1c55a:	db 01       	movw	r26, r22
   1c55c:	ec 91       	ld	r30, X
   1c55e:	e1 11       	cpse	r30, r1
   1c560:	03 c0       	rjmp	.+6      	; 0x1c568 <lif_create_image+0x3c>
    {
        printf("lif_create_image: liflabel is empty\n");
   1c562:	89 eb       	ldi	r24, 0xB9	; 185
   1c564:	92 e3       	ldi	r25, 0x32	; 50
   1c566:	0f c0       	rjmp	.+30     	; 0x1c586 <lif_create_image+0x5a>
        return(-1);
    }
    if(!dirsectors)
   1c568:	21 15       	cp	r18, r1
   1c56a:	31 05       	cpc	r19, r1
   1c56c:	41 05       	cpc	r20, r1
   1c56e:	51 05       	cpc	r21, r1
   1c570:	19 f4       	brne	.+6      	; 0x1c578 <lif_create_image+0x4c>
    {
        printf("lif_create_image: dirsectors is 0\n");
   1c572:	86 e9       	ldi	r24, 0x96	; 150
   1c574:	92 e3       	ldi	r25, 0x32	; 50
   1c576:	07 c0       	rjmp	.+14     	; 0x1c586 <lif_create_image+0x5a>
        return(-1);
    }
    if(!sectors)
   1c578:	e1 14       	cp	r14, r1
   1c57a:	f1 04       	cpc	r15, r1
   1c57c:	01 05       	cpc	r16, r1
   1c57e:	11 05       	cpc	r17, r1
   1c580:	59 f4       	brne	.+22     	; 0x1c598 <lif_create_image+0x6c>
    {
        printf("lif_create_image: sectors is 0\n");
   1c582:	86 e7       	ldi	r24, 0x76	; 118
   1c584:	92 e3       	ldi	r25, 0x32	; 50
   1c586:	1f 92       	push	r1
   1c588:	9f 93       	push	r25
   1c58a:	8f 93       	push	r24
   1c58c:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
        return(-1);
   1c590:	0f 90       	pop	r0
   1c592:	0f 90       	pop	r0
   1c594:	0f 90       	pop	r0
   1c596:	30 c0       	rjmp	.+96     	; 0x1c5f8 <lif_create_image+0xcc>
    dirstart = 2;
    filestart = dirstart + dirsectors;
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
   1c598:	67 01       	movw	r12, r14
   1c59a:	78 01       	movw	r14, r16
   1c59c:	b2 e0       	ldi	r27, 0x02	; 2
   1c59e:	cb 1a       	sub	r12, r27
   1c5a0:	d1 08       	sbc	r13, r1
   1c5a2:	e1 08       	sbc	r14, r1
   1c5a4:	f1 08       	sbc	r15, r1
   1c5a6:	56 01       	movw	r10, r12
   1c5a8:	67 01       	movw	r12, r14
   1c5aa:	a2 1a       	sub	r10, r18
   1c5ac:	b3 0a       	sbc	r11, r19
   1c5ae:	c4 0a       	sbc	r12, r20
   1c5b0:	d5 0a       	sbc	r13, r21
   1c5b2:	79 01       	movw	r14, r18
   1c5b4:	8a 01       	movw	r16, r20
   1c5b6:	22 e0       	ldi	r18, 0x02	; 2
   1c5b8:	30 e0       	ldi	r19, 0x00	; 0
   1c5ba:	40 e0       	ldi	r20, 0x00	; 0
   1c5bc:	50 e0       	ldi	r21, 0x00	; 0
   1c5be:	0e 94 f1 d0 	call	0x1a1e2	; 0x1a1e2 <lif_create_volume>
    if(LIF == NULL)
   1c5c2:	00 97       	sbiw	r24, 0x00	; 0
   1c5c4:	c9 f0       	breq	.+50     	; 0x1c5f8 <lif_create_image+0xcc>
        return(-1);
    lif_close_volume(LIF);
   1c5c6:	0e 94 8b ce 	call	0x19d16	; 0x19d16 <lif_close_volume>

    printf("Formating: wrote:[%ld] sectors\n", (long)end);
   1c5ca:	82 01       	movw	r16, r4
   1c5cc:	d6 2d       	mov	r29, r6
   1c5ce:	c7 2d       	mov	r28, r7
   1c5d0:	7f 92       	push	r7
   1c5d2:	6f 92       	push	r6
   1c5d4:	5f 92       	push	r5
   1c5d6:	4f 92       	push	r4
   1c5d8:	86 e5       	ldi	r24, 0x56	; 86
   1c5da:	92 e3       	ldi	r25, 0x32	; 50
   1c5dc:	1f 92       	push	r1
   1c5de:	9f 93       	push	r25
   1c5e0:	8f 93       	push	r24
   1c5e2:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    return(end);
   1c5e6:	8d b7       	in	r24, 0x3d	; 61
   1c5e8:	9e b7       	in	r25, 0x3e	; 62
   1c5ea:	07 96       	adiw	r24, 0x07	; 7
   1c5ec:	0f b6       	in	r0, 0x3f	; 63
   1c5ee:	f8 94       	cli
   1c5f0:	9e bf       	out	0x3e, r25	; 62
   1c5f2:	0f be       	out	0x3f, r0	; 63
   1c5f4:	8d bf       	out	0x3d, r24	; 61
   1c5f6:	04 c0       	rjmp	.+8      	; 0x1c600 <lif_create_image+0xd4>
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
    if(LIF == NULL)
        return(-1);
   1c5f8:	0f ef       	ldi	r16, 0xFF	; 255
   1c5fa:	1f ef       	ldi	r17, 0xFF	; 255
   1c5fc:	df ef       	ldi	r29, 0xFF	; 255
   1c5fe:	cf ef       	ldi	r28, 0xFF	; 255
    lif_close_volume(LIF);

    printf("Formating: wrote:[%ld] sectors\n", (long)end);
    return(end);
}
   1c600:	b8 01       	movw	r22, r16
   1c602:	8d 2f       	mov	r24, r29
   1c604:	9c 2f       	mov	r25, r28
   1c606:	df 91       	pop	r29
   1c608:	cf 91       	pop	r28
   1c60a:	1f 91       	pop	r17
   1c60c:	0f 91       	pop	r16
   1c60e:	ff 90       	pop	r15
   1c610:	ef 90       	pop	r14
   1c612:	df 90       	pop	r13
   1c614:	cf 90       	pop	r12
   1c616:	bf 90       	pop	r11
   1c618:	af 90       	pop	r10
   1c61a:	7f 90       	pop	r7
   1c61c:	6f 90       	pop	r6
   1c61e:	5f 90       	pop	r5
   1c620:	4f 90       	pop	r4
   1c622:	08 95       	ret

0001c624 <lif_tests>:

/// @brief LIF user tests
/// @return  1 matched token, 0 if not
MEMSPACE
int lif_tests(int argc, char *argv[])
{
   1c624:	a0 e0       	ldi	r26, 0x00	; 0
   1c626:	b0 e0       	ldi	r27, 0x00	; 0
   1c628:	e7 e1       	ldi	r30, 0x17	; 23
   1c62a:	f3 ee       	ldi	r31, 0xE3	; 227
   1c62c:	02 c5       	rjmp	.+2564   	; 0x1d032 <__prologue_saves__+0xc>
    // NAME
    ind = 0;
	// Skip program name
    ptr = argv[ind++];

    if(!ptr )
   1c62e:	fb 01       	movw	r30, r22
   1c630:	20 81       	ld	r18, Z
   1c632:	31 81       	ldd	r19, Z+1	; 0x01
   1c634:	23 2b       	or	r18, r19
   1c636:	59 f0       	breq	.+22     	; 0x1c64e <lif_tests+0x2a>
   1c638:	8b 01       	movw	r16, r22
   1c63a:	4c 01       	movw	r8, r24
        return(0);

	// Next Argument after program name
    ptr = argv[ind++];
   1c63c:	fb 01       	movw	r30, r22
   1c63e:	a2 80       	ldd	r10, Z+2	; 0x02
   1c640:	b3 80       	ldd	r11, Z+3	; 0x03



    if(argc <= 1 || !ptr || MATCH(ptr,"help") || MATCH(ptr,"-help") || MATCH(ptr,"-?") )
   1c642:	02 97       	sbiw	r24, 0x02	; 2
   1c644:	3c f4       	brge	.+14     	; 0x1c654 <lif_tests+0x30>
    {
        lif_help(1);
   1c646:	81 e0       	ldi	r24, 0x01	; 1
   1c648:	90 e0       	ldi	r25, 0x00	; 0
   1c64a:	0e 94 f6 c4 	call	0x189ec	; 0x189ec <lif_help>
#ifdef TELEDISK
        td0_help(1);
#endif
        return(0);
   1c64e:	80 e0       	ldi	r24, 0x00	; 0
   1c650:	90 e0       	ldi	r25, 0x00	; 0
   1c652:	0a c1       	rjmp	.+532    	; 0x1c868 <lif_tests+0x244>
	// Next Argument after program name
    ptr = argv[ind++];



    if(argc <= 1 || !ptr || MATCH(ptr,"help") || MATCH(ptr,"-help") || MATCH(ptr,"-?") )
   1c654:	a1 14       	cp	r10, r1
   1c656:	b1 04       	cpc	r11, r1
   1c658:	b1 f3       	breq	.-20     	; 0x1c646 <lif_tests+0x22>
   1c65a:	6a e2       	ldi	r22, 0x2A	; 42
   1c65c:	76 e1       	ldi	r23, 0x16	; 22
   1c65e:	c5 01       	movw	r24, r10
   1c660:	0e 94 f4 32 	call	0x65e8	; 0x65e8 <MATCH>
   1c664:	89 2b       	or	r24, r25
   1c666:	79 f7       	brne	.-34     	; 0x1c646 <lif_tests+0x22>
   1c668:	69 e2       	ldi	r22, 0x29	; 41
   1c66a:	76 e1       	ldi	r23, 0x16	; 22
   1c66c:	c5 01       	movw	r24, r10
   1c66e:	0e 94 f4 32 	call	0x65e8	; 0x65e8 <MATCH>
   1c672:	89 2b       	or	r24, r25
   1c674:	41 f7       	brne	.-48     	; 0x1c646 <lif_tests+0x22>
   1c676:	6f e2       	ldi	r22, 0x2F	; 47
   1c678:	76 e1       	ldi	r23, 0x16	; 22
   1c67a:	c5 01       	movw	r24, r10
   1c67c:	0e 94 f4 32 	call	0x65e8	; 0x65e8 <MATCH>
   1c680:	89 2b       	or	r24, r25
   1c682:	09 f7       	brne	.-62     	; 0x1c646 <lif_tests+0x22>
        return(0);
    }

	// Turn one debugging
	// in the future we can add tests for specific messages
    if (MATCHARGS(ptr,"-d", (ind + 0) ,argc))
   1c684:	94 01       	movw	r18, r8
   1c686:	42 e0       	ldi	r20, 0x02	; 2
   1c688:	50 e0       	ldi	r21, 0x00	; 0
   1c68a:	62 e3       	ldi	r22, 0x32	; 50
   1c68c:	76 e1       	ldi	r23, 0x16	; 22
   1c68e:	c5 01       	movw	r24, r10
   1c690:	0e 94 08 33 	call	0x6610	; 0x6610 <MATCHARGS>
   1c694:	89 2b       	or	r24, r25
   1c696:	69 f0       	breq	.+26     	; 0x1c6b2 <lif_tests+0x8e>
    {
		debuglevel = 0xffff;
   1c698:	8f ef       	ldi	r24, 0xFF	; 255
   1c69a:	9f ef       	ldi	r25, 0xFF	; 255
   1c69c:	90 93 be 01 	sts	0x01BE, r25	; 0x8001be <debuglevel+0x1>
   1c6a0:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <debuglevel>
		ptr = argv[ind++];
   1c6a4:	f8 01       	movw	r30, r16
   1c6a6:	a4 80       	ldd	r10, Z+4	; 0x04
   1c6a8:	b5 80       	ldd	r11, Z+5	; 0x05
   1c6aa:	f3 e0       	ldi	r31, 0x03	; 3
   1c6ac:	ef 2e       	mov	r14, r31
   1c6ae:	f1 2c       	mov	r15, r1
   1c6b0:	03 c0       	rjmp	.+6      	; 0x1c6b8 <lif_tests+0x94>

    if(!ptr )
        return(0);

	// Next Argument after program name
    ptr = argv[ind++];
   1c6b2:	e2 e0       	ldi	r30, 0x02	; 2
   1c6b4:	ee 2e       	mov	r14, r30
   1c6b6:	f1 2c       	mov	r15, r1
    {
		debuglevel = 0xffff;
		ptr = argv[ind++];
    }

    if (MATCHARGS(ptr,"addbin", (ind + 3) ,argc))
   1c6b8:	67 01       	movw	r12, r14
   1c6ba:	f3 e0       	ldi	r31, 0x03	; 3
   1c6bc:	cf 0e       	add	r12, r31
   1c6be:	d1 1c       	adc	r13, r1
   1c6c0:	94 01       	movw	r18, r8
   1c6c2:	a6 01       	movw	r20, r12
   1c6c4:	65 e3       	ldi	r22, 0x35	; 53
   1c6c6:	76 e1       	ldi	r23, 0x16	; 22
   1c6c8:	c5 01       	movw	r24, r10
   1c6ca:	0e 94 08 33 	call	0x6610	; 0x6610 <MATCHARGS>
   1c6ce:	e7 01       	movw	r28, r14
   1c6d0:	22 96       	adiw	r28, 0x02	; 2
   1c6d2:	89 2b       	or	r24, r25
   1c6d4:	79 f0       	breq	.+30     	; 0x1c6f4 <lif_tests+0xd0>
    {
        lif_add_lif_file(argv[ind],argv[ind+1],argv[ind+2]);
   1c6d6:	cc 0f       	add	r28, r28
   1c6d8:	dd 1f       	adc	r29, r29
   1c6da:	c0 0f       	add	r28, r16
   1c6dc:	d1 1f       	adc	r29, r17
   1c6de:	48 81       	ld	r20, Y
   1c6e0:	59 81       	ldd	r21, Y+1	; 0x01
   1c6e2:	fe 01       	movw	r30, r28
   1c6e4:	32 97       	sbiw	r30, 0x02	; 2
   1c6e6:	60 81       	ld	r22, Z
   1c6e8:	71 81       	ldd	r23, Z+1	; 0x01
   1c6ea:	24 97       	sbiw	r28, 0x04	; 4
   1c6ec:	88 81       	ld	r24, Y
   1c6ee:	99 81       	ldd	r25, Y+1	; 0x01
   1c6f0:	67 dc       	rcall	.-1842   	; 0x1bfc0 <lif_add_lif_file>
   1c6f2:	b8 c0       	rjmp	.+368    	; 0x1c864 <lif_tests+0x240>

        return(1);
    }
    if (MATCHARGS(ptr,"add", (ind + 3) ,argc))
   1c6f4:	94 01       	movw	r18, r8
   1c6f6:	a6 01       	movw	r20, r12
   1c6f8:	6c e3       	ldi	r22, 0x3C	; 60
   1c6fa:	76 e1       	ldi	r23, 0x16	; 22
   1c6fc:	c5 01       	movw	r24, r10
   1c6fe:	0e 94 08 33 	call	0x6610	; 0x6610 <MATCHARGS>
   1c702:	89 2b       	or	r24, r25
   1c704:	81 f0       	breq	.+32     	; 0x1c726 <lif_tests+0x102>
    {
        lif_add_ascii_file_as_e010(argv[ind],argv[ind+1],argv[ind+2]);
   1c706:	cc 0f       	add	r28, r28
   1c708:	dd 1f       	adc	r29, r29
   1c70a:	c0 0f       	add	r28, r16
   1c70c:	d1 1f       	adc	r29, r17
   1c70e:	48 81       	ld	r20, Y
   1c710:	59 81       	ldd	r21, Y+1	; 0x01
   1c712:	fe 01       	movw	r30, r28
   1c714:	32 97       	sbiw	r30, 0x02	; 2
   1c716:	60 81       	ld	r22, Z
   1c718:	71 81       	ldd	r23, Z+1	; 0x01
   1c71a:	24 97       	sbiw	r28, 0x04	; 4
   1c71c:	88 81       	ld	r24, Y
   1c71e:	99 81       	ldd	r25, Y+1	; 0x01
   1c720:	0e 94 74 da 	call	0x1b4e8	; 0x1b4e8 <lif_add_ascii_file_as_e010>
   1c724:	9f c0       	rjmp	.+318    	; 0x1c864 <lif_tests+0x240>
        return(1);
    }
    if (MATCHARGS(ptr,"del", (ind + 2) ,argc))
   1c726:	94 01       	movw	r18, r8
   1c728:	ae 01       	movw	r20, r28
   1c72a:	60 e4       	ldi	r22, 0x40	; 64
   1c72c:	76 e1       	ldi	r23, 0x16	; 22
   1c72e:	c5 01       	movw	r24, r10
   1c730:	0e 94 08 33 	call	0x6610	; 0x6610 <MATCHARGS>
   1c734:	89 2b       	or	r24, r25
   1c736:	71 f0       	breq	.+28     	; 0x1c754 <lif_tests+0x130>
    {
        lif_del_file(argv[ind],argv[ind+1]);
   1c738:	c7 01       	movw	r24, r14
   1c73a:	01 96       	adiw	r24, 0x01	; 1
   1c73c:	88 0f       	add	r24, r24
   1c73e:	99 1f       	adc	r25, r25
   1c740:	e8 01       	movw	r28, r16
   1c742:	c8 0f       	add	r28, r24
   1c744:	d9 1f       	adc	r29, r25
   1c746:	68 81       	ld	r22, Y
   1c748:	79 81       	ldd	r23, Y+1	; 0x01
   1c74a:	22 97       	sbiw	r28, 0x02	; 2
   1c74c:	88 81       	ld	r24, Y
   1c74e:	99 81       	ldd	r25, Y+1	; 0x01
   1c750:	cf dd       	rcall	.-1122   	; 0x1c2f0 <lif_del_file>
   1c752:	88 c0       	rjmp	.+272    	; 0x1c864 <lif_tests+0x240>

        return(1);
    }
    if (MATCHARGS(ptr,"create", (ind + 4) ,argc))
   1c754:	94 01       	movw	r18, r8
   1c756:	a7 01       	movw	r20, r14
   1c758:	4c 5f       	subi	r20, 0xFC	; 252
   1c75a:	5f 4f       	sbci	r21, 0xFF	; 255
   1c75c:	64 e4       	ldi	r22, 0x44	; 68
   1c75e:	76 e1       	ldi	r23, 0x16	; 22
   1c760:	c5 01       	movw	r24, r10
   1c762:	0e 94 08 33 	call	0x6610	; 0x6610 <MATCHARGS>
   1c766:	89 2b       	or	r24, r25
   1c768:	f1 f0       	breq	.+60     	; 0x1c7a6 <lif_tests+0x182>
    {
        ///@brief format LIF image
        lif_create_image(argv[ind],argv[ind+1], atol(argv[ind+2]), atol(argv[ind+3]) );
   1c76a:	e6 01       	movw	r28, r12
   1c76c:	cc 0f       	add	r28, r28
   1c76e:	dd 1f       	adc	r29, r29
   1c770:	c0 0f       	add	r28, r16
   1c772:	d1 1f       	adc	r29, r17
   1c774:	88 81       	ld	r24, Y
   1c776:	99 81       	ldd	r25, Y+1	; 0x01
   1c778:	0e 94 c5 47 	call	0x8f8a	; 0x8f8a <atol>
   1c77c:	6b 01       	movw	r12, r22
   1c77e:	7c 01       	movw	r14, r24
   1c780:	fe 01       	movw	r30, r28
   1c782:	32 97       	sbiw	r30, 0x02	; 2
   1c784:	80 81       	ld	r24, Z
   1c786:	91 81       	ldd	r25, Z+1	; 0x01
   1c788:	0e 94 c5 47 	call	0x8f8a	; 0x8f8a <atol>
   1c78c:	9b 01       	movw	r18, r22
   1c78e:	ac 01       	movw	r20, r24
   1c790:	fe 01       	movw	r30, r28
   1c792:	34 97       	sbiw	r30, 0x04	; 4
   1c794:	60 81       	ld	r22, Z
   1c796:	71 81       	ldd	r23, Z+1	; 0x01
   1c798:	26 97       	sbiw	r28, 0x06	; 6
   1c79a:	87 01       	movw	r16, r14
   1c79c:	76 01       	movw	r14, r12
   1c79e:	88 81       	ld	r24, Y
   1c7a0:	99 81       	ldd	r25, Y+1	; 0x01
   1c7a2:	c4 de       	rcall	.-632    	; 0x1c52c <lif_create_image>
   1c7a4:	5f c0       	rjmp	.+190    	; 0x1c864 <lif_tests+0x240>
        return(1);
    }
    else if (MATCHARGS(ptr,"dir", (ind + 1) ,argc))
   1c7a6:	94 01       	movw	r18, r8
   1c7a8:	a7 01       	movw	r20, r14
   1c7aa:	4f 5f       	subi	r20, 0xFF	; 255
   1c7ac:	5f 4f       	sbci	r21, 0xFF	; 255
   1c7ae:	66 e3       	ldi	r22, 0x36	; 54
   1c7b0:	7b e0       	ldi	r23, 0x0B	; 11
   1c7b2:	c5 01       	movw	r24, r10
   1c7b4:	0e 94 08 33 	call	0x6610	; 0x6610 <MATCHARGS>
   1c7b8:	89 2b       	or	r24, r25
   1c7ba:	59 f0       	breq	.+22     	; 0x1c7d2 <lif_tests+0x1ae>
    {
        lif_dir(argv[ind]);
   1c7bc:	c7 01       	movw	r24, r14
   1c7be:	88 0f       	add	r24, r24
   1c7c0:	99 1f       	adc	r25, r25
   1c7c2:	e8 01       	movw	r28, r16
   1c7c4:	c8 0f       	add	r28, r24
   1c7c6:	d9 1f       	adc	r29, r25
   1c7c8:	88 81       	ld	r24, Y
   1c7ca:	99 81       	ldd	r25, Y+1	; 0x01
   1c7cc:	0e 94 83 d6 	call	0x1ad06	; 0x1ad06 <lif_dir>
   1c7d0:	49 c0       	rjmp	.+146    	; 0x1c864 <lif_tests+0x240>
        return(1);
    }
    if (MATCHARGS(ptr,"extractbin", (ind + 3) ,argc))
   1c7d2:	94 01       	movw	r18, r8
   1c7d4:	a6 01       	movw	r20, r12
   1c7d6:	6b e4       	ldi	r22, 0x4B	; 75
   1c7d8:	76 e1       	ldi	r23, 0x16	; 22
   1c7da:	c5 01       	movw	r24, r10
   1c7dc:	0e 94 08 33 	call	0x6610	; 0x6610 <MATCHARGS>
   1c7e0:	89 2b       	or	r24, r25
   1c7e2:	79 f0       	breq	.+30     	; 0x1c802 <lif_tests+0x1de>
    {

        lif_extract_lif_as_lif(argv[ind],argv[ind+1],argv[ind+2]);
   1c7e4:	cc 0f       	add	r28, r28
   1c7e6:	dd 1f       	adc	r29, r29
   1c7e8:	c0 0f       	add	r28, r16
   1c7ea:	d1 1f       	adc	r29, r17
   1c7ec:	48 81       	ld	r20, Y
   1c7ee:	59 81       	ldd	r21, Y+1	; 0x01
   1c7f0:	fe 01       	movw	r30, r28
   1c7f2:	32 97       	sbiw	r30, 0x02	; 2
   1c7f4:	60 81       	ld	r22, Z
   1c7f6:	71 81       	ldd	r23, Z+1	; 0x01
   1c7f8:	24 97       	sbiw	r28, 0x04	; 4
   1c7fa:	88 81       	ld	r24, Y
   1c7fc:	99 81       	ldd	r25, Y+1	; 0x01
   1c7fe:	99 da       	rcall	.-2766   	; 0x1bd32 <lif_extract_lif_as_lif>
   1c800:	31 c0       	rjmp	.+98     	; 0x1c864 <lif_tests+0x240>
        return(1);
    }
    if (MATCHARGS(ptr,"extract", (ind + 3) ,argc))
   1c802:	94 01       	movw	r18, r8
   1c804:	a6 01       	movw	r20, r12
   1c806:	66 e5       	ldi	r22, 0x56	; 86
   1c808:	76 e1       	ldi	r23, 0x16	; 22
   1c80a:	c5 01       	movw	r24, r10
   1c80c:	0e 94 08 33 	call	0x6610	; 0x6610 <MATCHARGS>
   1c810:	89 2b       	or	r24, r25
   1c812:	81 f0       	breq	.+32     	; 0x1c834 <lif_tests+0x210>
    {

        lif_extract_e010_as_ascii(argv[ind],argv[ind+1],argv[ind+2]);
   1c814:	cc 0f       	add	r28, r28
   1c816:	dd 1f       	adc	r29, r29
   1c818:	c0 0f       	add	r28, r16
   1c81a:	d1 1f       	adc	r29, r17
   1c81c:	48 81       	ld	r20, Y
   1c81e:	59 81       	ldd	r21, Y+1	; 0x01
   1c820:	fe 01       	movw	r30, r28
   1c822:	32 97       	sbiw	r30, 0x02	; 2
   1c824:	60 81       	ld	r22, Z
   1c826:	71 81       	ldd	r23, Z+1	; 0x01
   1c828:	24 97       	sbiw	r28, 0x04	; 4
   1c82a:	88 81       	ld	r24, Y
   1c82c:	99 81       	ldd	r25, Y+1	; 0x01
   1c82e:	0e 94 ad db 	call	0x1b75a	; 0x1b75a <lif_extract_e010_as_ascii>
   1c832:	18 c0       	rjmp	.+48     	; 0x1c864 <lif_tests+0x240>
        return(1);
    }
    if (MATCHARGS(ptr,"rename", (ind + 3) ,argc))
   1c834:	94 01       	movw	r18, r8
   1c836:	a6 01       	movw	r20, r12
   1c838:	63 e4       	ldi	r22, 0x43	; 67
   1c83a:	7b e0       	ldi	r23, 0x0B	; 11
   1c83c:	c5 01       	movw	r24, r10
   1c83e:	0e 94 08 33 	call	0x6610	; 0x6610 <MATCHARGS>
   1c842:	89 2b       	or	r24, r25
   1c844:	09 f4       	brne	.+2      	; 0x1c848 <lif_tests+0x224>
   1c846:	03 cf       	rjmp	.-506    	; 0x1c64e <lif_tests+0x2a>
    {
        lif_rename_file(argv[ind],argv[ind+1],argv[ind+2]);
   1c848:	cc 0f       	add	r28, r28
   1c84a:	dd 1f       	adc	r29, r29
   1c84c:	c0 0f       	add	r28, r16
   1c84e:	d1 1f       	adc	r29, r17
   1c850:	48 81       	ld	r20, Y
   1c852:	59 81       	ldd	r21, Y+1	; 0x01
   1c854:	fe 01       	movw	r30, r28
   1c856:	32 97       	sbiw	r30, 0x02	; 2
   1c858:	60 81       	ld	r22, Z
   1c85a:	71 81       	ldd	r23, Z+1	; 0x01
   1c85c:	24 97       	sbiw	r28, 0x04	; 4
   1c85e:	88 81       	ld	r24, Y
   1c860:	99 81       	ldd	r25, Y+1	; 0x01
        return(1);
   1c862:	de dd       	rcall	.-1092   	; 0x1c420 <lif_rename_file>
        td02lif(argc,argv);
        return(1);
    }
#endif
    return(0);
}
   1c864:	81 e0       	ldi	r24, 0x01	; 1
   1c866:	90 e0       	ldi	r25, 0x00	; 0
   1c868:	cd b7       	in	r28, 0x3d	; 61
   1c86a:	de b7       	in	r29, 0x3e	; 62
   1c86c:	ec e0       	ldi	r30, 0x0C	; 12
   1c86e:	fd c3       	rjmp	.+2042   	; 0x1d06a <__epilogue_restores__+0xc>

0001c870 <copyright>:

///@brief Display Copyright
///@return void
void copyright()
{
    printf("Stand alone version of LIF utilities for linux\n");
   1c870:	80 e7       	ldi	r24, 0x70	; 112
   1c872:	99 e4       	ldi	r25, 0x49	; 73
   1c874:	1f 92       	push	r1
   1c876:	9f 93       	push	r25
   1c878:	8f 93       	push	r24
   1c87a:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    printf("HP85 Disk and Device Emulator\n");
   1c87e:	81 e5       	ldi	r24, 0x51	; 81
   1c880:	99 e4       	ldi	r25, 0x49	; 73
   1c882:	1f 92       	push	r1
   1c884:	9f 93       	push	r25
   1c886:	8f 93       	push	r24
   1c888:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    printf(" (c) 2014-2020 by Mike Gore\n");
   1c88c:	84 e3       	ldi	r24, 0x34	; 52
   1c88e:	99 e4       	ldi	r25, 0x49	; 73
   1c890:	1f 92       	push	r1
   1c892:	9f 93       	push	r25
   1c894:	8f 93       	push	r24
   1c896:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    printf(" GNU version 3\n");
   1c89a:	84 e2       	ldi	r24, 0x24	; 36
   1c89c:	99 e4       	ldi	r25, 0x49	; 73
   1c89e:	1f 92       	push	r1
   1c8a0:	9f 93       	push	r25
   1c8a2:	8f 93       	push	r24
   1c8a4:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    printf("-> https://github.com/magore/hp85disk\n");
   1c8a8:	8d ef       	ldi	r24, 0xFD	; 253
   1c8aa:	98 e4       	ldi	r25, 0x48	; 72
   1c8ac:	1f 92       	push	r1
   1c8ae:	9f 93       	push	r25
   1c8b0:	8f 93       	push	r24
   1c8b2:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    printf("   GIT last pushed:   %s\n", GIT_VERSION);
   1c8b6:	8e e5       	ldi	r24, 0x5E	; 94
   1c8b8:	96 e1       	ldi	r25, 0x16	; 22
   1c8ba:	9f 93       	push	r25
   1c8bc:	8f 93       	push	r24
   1c8be:	83 ee       	ldi	r24, 0xE3	; 227
   1c8c0:	98 e4       	ldi	r25, 0x48	; 72
   1c8c2:	1f 92       	push	r1
   1c8c4:	9f 93       	push	r25
   1c8c6:	8f 93       	push	r24
   1c8c8:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    printf("   Last updated file: %s\n", LOCAL_MOD);
   1c8cc:	82 e8       	ldi	r24, 0x82	; 130
   1c8ce:	96 e1       	ldi	r25, 0x16	; 22
   1c8d0:	9f 93       	push	r25
   1c8d2:	8f 93       	push	r24
   1c8d4:	89 ec       	ldi	r24, 0xC9	; 201
   1c8d6:	98 e4       	ldi	r25, 0x48	; 72
   1c8d8:	1f 92       	push	r1
   1c8da:	9f 93       	push	r25
   1c8dc:	8f 93       	push	r24
   1c8de:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
    printf("\n");
   1c8e2:	87 ec       	ldi	r24, 0xC7	; 199
   1c8e4:	98 e4       	ldi	r25, 0x48	; 72
   1c8e6:	1f 92       	push	r1
   1c8e8:	9f 93       	push	r25
   1c8ea:	8f 93       	push	r24
   1c8ec:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
}
   1c8f0:	8d b7       	in	r24, 0x3d	; 61
   1c8f2:	9e b7       	in	r25, 0x3e	; 62
   1c8f4:	4c 96       	adiw	r24, 0x1c	; 28
   1c8f6:	0f b6       	in	r0, 0x3f	; 63
   1c8f8:	f8 94       	cli
   1c8fa:	9e bf       	out	0x3e, r25	; 62
   1c8fc:	0f be       	out	0x3f, r0	; 63
   1c8fe:	8d bf       	out	0x3d, r24	; 61
   1c900:	08 95       	ret

0001c902 <delay_tests>:
///
/// This included measurement of avr-libc delays
/// @return  void
void delay_tests()
{
    printf("System delays\n");
   1c902:	88 eb       	ldi	r24, 0xB8	; 184
   1c904:	98 e4       	ldi	r25, 0x48	; 72
   1c906:	1f 92       	push	r1
   1c908:	9f 93       	push	r25
   1c90a:	8f 93       	push	r24
   1c90c:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>

    clock_elapsed_begin();
   1c910:	0e 94 4c 36 	call	0x6c98	; 0x6c98 <clock_elapsed_begin>
    clock_elapsed_end("elapsed timer overhead");
   1c914:	86 ea       	ldi	r24, 0xA6	; 166
   1c916:	96 e1       	ldi	r25, 0x16	; 22
   1c918:	0e 94 52 36 	call	0x6ca4	; 0x6ca4 <clock_elapsed_end>

    clock_elapsed_begin();
   1c91c:	0e 94 4c 36 	call	0x6c98	; 0x6c98 <clock_elapsed_begin>
   1c920:	83 ef       	ldi	r24, 0xF3	; 243
   1c922:	91 e0       	ldi	r25, 0x01	; 1
   1c924:	01 97       	sbiw	r24, 0x01	; 1
   1c926:	f1 f7       	brne	.-4      	; 0x1c924 <delay_tests+0x22>
   1c928:	00 c0       	rjmp	.+0      	; 0x1c92a <delay_tests+0x28>
   1c92a:	00 00       	nop
    _delay_us(100);
    clock_elapsed_end("_delay_us(100)");
   1c92c:	8d eb       	ldi	r24, 0xBD	; 189
   1c92e:	96 e1       	ldi	r25, 0x16	; 22
   1c930:	0e 94 52 36 	call	0x6ca4	; 0x6ca4 <clock_elapsed_end>

    clock_elapsed_begin();
   1c934:	0e 94 4c 36 	call	0x6c98	; 0x6c98 <clock_elapsed_begin>
   1c938:	83 ec       	ldi	r24, 0xC3	; 195
   1c93a:	99 e0       	ldi	r25, 0x09	; 9
   1c93c:	01 97       	sbiw	r24, 0x01	; 1
   1c93e:	f1 f7       	brne	.-4      	; 0x1c93c <delay_tests+0x3a>
   1c940:	00 c0       	rjmp	.+0      	; 0x1c942 <delay_tests+0x40>
   1c942:	00 00       	nop
    _delay_us(500);
    clock_elapsed_end("_delay_us(500)");
   1c944:	8c ec       	ldi	r24, 0xCC	; 204
   1c946:	96 e1       	ldi	r25, 0x16	; 22
   1c948:	0e 94 52 36 	call	0x6ca4	; 0x6ca4 <clock_elapsed_end>

    printf("My delays\n");
   1c94c:	8d ea       	ldi	r24, 0xAD	; 173
   1c94e:	98 e4       	ldi	r25, 0x48	; 72
   1c950:	1f 92       	push	r1
   1c952:	9f 93       	push	r25
   1c954:	8f 93       	push	r24
   1c956:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>

    clock_elapsed_begin();
   1c95a:	0e 94 4c 36 	call	0x6c98	; 0x6c98 <clock_elapsed_begin>
    delayus(100U);
   1c95e:	64 e6       	ldi	r22, 0x64	; 100
   1c960:	70 e0       	ldi	r23, 0x00	; 0
   1c962:	80 e0       	ldi	r24, 0x00	; 0
   1c964:	90 e0       	ldi	r25, 0x00	; 0
   1c966:	0e 94 7a 2a 	call	0x54f4	; 0x54f4 <delayus>
    clock_elapsed_end("delayus(100)");
   1c96a:	8b ed       	ldi	r24, 0xDB	; 219
   1c96c:	96 e1       	ldi	r25, 0x16	; 22
   1c96e:	0e 94 52 36 	call	0x6ca4	; 0x6ca4 <clock_elapsed_end>

    clock_elapsed_begin();
   1c972:	0e 94 4c 36 	call	0x6c98	; 0x6c98 <clock_elapsed_begin>
    delayus(500U);
   1c976:	64 ef       	ldi	r22, 0xF4	; 244
   1c978:	71 e0       	ldi	r23, 0x01	; 1
   1c97a:	80 e0       	ldi	r24, 0x00	; 0
   1c97c:	90 e0       	ldi	r25, 0x00	; 0
   1c97e:	0e 94 7a 2a 	call	0x54f4	; 0x54f4 <delayus>
    clock_elapsed_end("delayus(500)");
   1c982:	88 ee       	ldi	r24, 0xE8	; 232
   1c984:	96 e1       	ldi	r25, 0x16	; 22
   1c986:	0e 94 52 36 	call	0x6ca4	; 0x6ca4 <clock_elapsed_end>

    clock_elapsed_begin();
   1c98a:	0e 94 4c 36 	call	0x6c98	; 0x6c98 <clock_elapsed_begin>
    delayus(1100);
   1c98e:	6c e4       	ldi	r22, 0x4C	; 76
   1c990:	74 e0       	ldi	r23, 0x04	; 4
   1c992:	80 e0       	ldi	r24, 0x00	; 0
   1c994:	90 e0       	ldi	r25, 0x00	; 0
   1c996:	0e 94 7a 2a 	call	0x54f4	; 0x54f4 <delayus>
    clock_elapsed_end("delayus(1100)");
   1c99a:	85 ef       	ldi	r24, 0xF5	; 245
   1c99c:	96 e1       	ldi	r25, 0x16	; 22
   1c99e:	0e 94 52 36 	call	0x6ca4	; 0x6ca4 <clock_elapsed_end>

    clock_elapsed_begin();
   1c9a2:	0e 94 4c 36 	call	0x6c98	; 0x6c98 <clock_elapsed_begin>
    delayms(1000);
   1c9a6:	68 ee       	ldi	r22, 0xE8	; 232
   1c9a8:	73 e0       	ldi	r23, 0x03	; 3
   1c9aa:	80 e0       	ldi	r24, 0x00	; 0
   1c9ac:	90 e0       	ldi	r25, 0x00	; 0
   1c9ae:	0e 94 a7 2a 	call	0x554e	; 0x554e <delayms>
    clock_elapsed_end("delayms(1100)");
   1c9b2:	83 e0       	ldi	r24, 0x03	; 3
   1c9b4:	97 e1       	ldi	r25, 0x17	; 23
   1c9b6:	0e 94 52 36 	call	0x6ca4	; 0x6ca4 <clock_elapsed_end>
}
   1c9ba:	0f 90       	pop	r0
   1c9bc:	0f 90       	pop	r0
   1c9be:	0f 90       	pop	r0
   1c9c0:	0f 90       	pop	r0
   1c9c2:	0f 90       	pop	r0
   1c9c4:	0f 90       	pop	r0
   1c9c6:	08 95       	ret

0001c9c8 <help>:
   1c9c8:	53 df       	rcall	.-346    	; 0x1c870 <copyright>
   1c9ca:	80 e0       	ldi	r24, 0x00	; 0
   1c9cc:	90 e0       	ldi	r25, 0x00	; 0
   1c9ce:	0e 94 9c 72 	call	0xe538	; 0xe538 <fatfs_help>
   1c9d2:	80 e0       	ldi	r24, 0x00	; 0
   1c9d4:	90 e0       	ldi	r25, 0x00	; 0
   1c9d6:	0e 94 c2 7d 	call	0xfb84	; 0xfb84 <posix_help>
   1c9da:	80 e0       	ldi	r24, 0x00	; 0
   1c9dc:	90 e0       	ldi	r25, 0x00	; 0
   1c9de:	0e 94 f6 c4 	call	0x189ec	; 0x189ec <lif_help>
   1c9e2:	80 e0       	ldi	r24, 0x00	; 0
   1c9e4:	90 e0       	ldi	r25, 0x00	; 0
   1c9e6:	0e 94 1b 90 	call	0x12036	; 0x12036 <gpib_help>
   1c9ea:	8e e8       	ldi	r24, 0x8E	; 142
   1c9ec:	98 e4       	ldi	r25, 0x48	; 72
   1c9ee:	1f 92       	push	r1
   1c9f0:	9f 93       	push	r25
   1c9f2:	8f 93       	push	r24
   1c9f4:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1c9f8:	0f 90       	pop	r0
   1c9fa:	0f 90       	pop	r0
   1c9fc:	0f 90       	pop	r0
   1c9fe:	08 95       	ret

0001ca00 <task>:
   1ca00:	a4 ee       	ldi	r26, 0xE4	; 228
   1ca02:	b0 e0       	ldi	r27, 0x00	; 0
   1ca04:	e5 e0       	ldi	r30, 0x05	; 5
   1ca06:	f5 ee       	ldi	r31, 0xE5	; 229
   1ca08:	1a c3       	rjmp	.+1588   	; 0x1d03e <__prologue_saves__+0x18>
   1ca0a:	81 11       	cpse	r24, r1
   1ca0c:	0e 94 b9 8f 	call	0x11f72	; 0x11f72 <gpib_task>
   1ca10:	80 e0       	ldi	r24, 0x00	; 0
   1ca12:	0e 94 1a 2c 	call	0x5834	; 0x5834 <uart_rx_count>
   1ca16:	89 2b       	or	r24, r25
   1ca18:	09 f4       	brne	.+2      	; 0x1ca1c <task+0x1c>
   1ca1a:	a0 c0       	rjmp	.+320    	; 0x1cb5c <task+0x15c>
   1ca1c:	8b e8       	ldi	r24, 0x8B	; 139
   1ca1e:	98 e4       	ldi	r25, 0x48	; 72
   1ca20:	1f 92       	push	r1
   1ca22:	9f 93       	push	r25
   1ca24:	8f 93       	push	r24
   1ca26:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1ca2a:	40 91 ce 1c 	lds	r20, 0x1CCE	; 0x801cce <__iob>
   1ca2e:	50 91 cf 1c 	lds	r21, 0x1CCF	; 0x801ccf <__iob+0x1>
   1ca32:	6e e7       	ldi	r22, 0x7E	; 126
   1ca34:	70 e0       	ldi	r23, 0x00	; 0
   1ca36:	ce 01       	movw	r24, r28
   1ca38:	01 96       	adiw	r24, 0x01	; 1
   1ca3a:	0e 94 c7 75 	call	0xeb8e	; 0xeb8e <fgets>
   1ca3e:	42 e3       	ldi	r20, 0x32	; 50
   1ca40:	50 e0       	ldi	r21, 0x00	; 0
   1ca42:	be 01       	movw	r22, r28
   1ca44:	6f 57       	subi	r22, 0x7F	; 127
   1ca46:	7f 4f       	sbci	r23, 0xFF	; 255
   1ca48:	ce 01       	movw	r24, r28
   1ca4a:	01 96       	adiw	r24, 0x01	; 1
   1ca4c:	0e 94 65 33 	call	0x66ca	; 0x66ca <split_args>
   1ca50:	8c 01       	movw	r16, r24
   1ca52:	cf 57       	subi	r28, 0x7F	; 127
   1ca54:	df 4f       	sbci	r29, 0xFF	; 255
   1ca56:	e8 80       	ld	r14, Y
   1ca58:	f9 80       	ldd	r15, Y+1	; 0x01
   1ca5a:	c1 58       	subi	r28, 0x81	; 129
   1ca5c:	d0 40       	sbci	r29, 0x00	; 0
   1ca5e:	0f 90       	pop	r0
   1ca60:	0f 90       	pop	r0
   1ca62:	0f 90       	pop	r0
   1ca64:	e1 14       	cp	r14, r1
   1ca66:	f1 04       	cpc	r15, r1
   1ca68:	09 f4       	brne	.+2      	; 0x1ca6c <task+0x6c>
   1ca6a:	78 c0       	rjmp	.+240    	; 0x1cb5c <task+0x15c>
   1ca6c:	9c 01       	movw	r18, r24
   1ca6e:	41 e0       	ldi	r20, 0x01	; 1
   1ca70:	50 e0       	ldi	r21, 0x00	; 0
   1ca72:	61 e1       	ldi	r22, 0x11	; 17
   1ca74:	77 e1       	ldi	r23, 0x17	; 23
   1ca76:	c7 01       	movw	r24, r14
   1ca78:	0e 94 08 33 	call	0x6610	; 0x6610 <MATCHARGS>
   1ca7c:	89 2b       	or	r24, r25
   1ca7e:	11 f0       	breq	.+4      	; 0x1ca84 <task+0x84>
   1ca80:	40 df       	rcall	.-384    	; 0x1c902 <delay_tests>
   1ca82:	6c c0       	rjmp	.+216    	; 0x1cb5c <task+0x15c>
   1ca84:	98 01       	movw	r18, r16
   1ca86:	41 e0       	ldi	r20, 0x01	; 1
   1ca88:	50 e0       	ldi	r21, 0x00	; 0
   1ca8a:	6d e1       	ldi	r22, 0x1D	; 29
   1ca8c:	77 e1       	ldi	r23, 0x17	; 23
   1ca8e:	c7 01       	movw	r24, r14
   1ca90:	0e 94 08 33 	call	0x6610	; 0x6610 <MATCHARGS>
   1ca94:	89 2b       	or	r24, r25
   1ca96:	61 f4       	brne	.+24     	; 0x1cab0 <task+0xb0>
   1ca98:	98 01       	movw	r18, r16
   1ca9a:	41 e0       	ldi	r20, 0x01	; 1
   1ca9c:	50 e0       	ldi	r21, 0x00	; 0
   1ca9e:	62 e2       	ldi	r22, 0x22	; 34
   1caa0:	77 e1       	ldi	r23, 0x17	; 23
   1caa2:	c7 01       	movw	r24, r14
   1caa4:	0e 94 08 33 	call	0x6610	; 0x6610 <MATCHARGS>
   1caa8:	89 2b       	or	r24, r25
   1caaa:	29 f0       	breq	.+10     	; 0x1cab6 <task+0xb6>
   1caac:	0e 94 5b 3c 	call	0x78b6	; 0x78b6 <setdate>
   1cab0:	0e 94 74 3e 	call	0x7ce8	; 0x7ce8 <display_clock>
   1cab4:	53 c0       	rjmp	.+166    	; 0x1cb5c <task+0x15c>
   1cab6:	98 01       	movw	r18, r16
   1cab8:	41 e0       	ldi	r20, 0x01	; 1
   1caba:	50 e0       	ldi	r21, 0x00	; 0
   1cabc:	6a e2       	ldi	r22, 0x2A	; 42
   1cabe:	77 e1       	ldi	r23, 0x17	; 23
   1cac0:	c7 01       	movw	r24, r14
   1cac2:	0e 94 08 33 	call	0x6610	; 0x6610 <MATCHARGS>
   1cac6:	89 2b       	or	r24, r25
   1cac8:	19 f0       	breq	.+6      	; 0x1cad0 <task+0xd0>
   1caca:	0e 94 84 29 	call	0x5308	; 0x5308 <PrintFree>
   1cace:	46 c0       	rjmp	.+140    	; 0x1cb5c <task+0x15c>
   1cad0:	98 01       	movw	r18, r16
   1cad2:	41 e0       	ldi	r20, 0x01	; 1
   1cad4:	50 e0       	ldi	r21, 0x00	; 0
   1cad6:	6a e2       	ldi	r22, 0x2A	; 42
   1cad8:	76 e1       	ldi	r23, 0x16	; 22
   1cada:	c7 01       	movw	r24, r14
   1cadc:	0e 94 08 33 	call	0x6610	; 0x6610 <MATCHARGS>
   1cae0:	89 2b       	or	r24, r25
   1cae2:	11 f0       	breq	.+4      	; 0x1cae8 <task+0xe8>
   1cae4:	71 df       	rcall	.-286    	; 0x1c9c8 <help>
   1cae6:	3a c0       	rjmp	.+116    	; 0x1cb5c <task+0x15c>
   1cae8:	98 01       	movw	r18, r16
   1caea:	41 e0       	ldi	r20, 0x01	; 1
   1caec:	50 e0       	ldi	r21, 0x00	; 0
   1caee:	60 e3       	ldi	r22, 0x30	; 48
   1caf0:	76 e1       	ldi	r23, 0x16	; 22
   1caf2:	c7 01       	movw	r24, r14
   1caf4:	0e 94 08 33 	call	0x6610	; 0x6610 <MATCHARGS>
   1caf8:	89 2b       	or	r24, r25
   1cafa:	a1 f7       	brne	.-24     	; 0x1cae4 <task+0xe4>
   1cafc:	be 01       	movw	r22, r28
   1cafe:	6f 57       	subi	r22, 0x7F	; 127
   1cb00:	7f 4f       	sbci	r23, 0xFF	; 255
   1cb02:	c8 01       	movw	r24, r16
   1cb04:	0e 94 37 90 	call	0x1206e	; 0x1206e <gpib_tests>
   1cb08:	89 2b       	or	r24, r25
   1cb0a:	19 f0       	breq	.+6      	; 0x1cb12 <task+0x112>
   1cb0c:	0e 94 85 8b 	call	0x1170a	; 0x1170a <gpib_init_devices>
   1cb10:	25 c0       	rjmp	.+74     	; 0x1cb5c <task+0x15c>
   1cb12:	be 01       	movw	r22, r28
   1cb14:	6f 57       	subi	r22, 0x7F	; 127
   1cb16:	7f 4f       	sbci	r23, 0xFF	; 255
   1cb18:	c8 01       	movw	r24, r16
   1cb1a:	0e 94 36 81 	call	0x1026c	; 0x1026c <posix_tests>
   1cb1e:	89 2b       	or	r24, r25
   1cb20:	e9 f4       	brne	.+58     	; 0x1cb5c <task+0x15c>
   1cb22:	be 01       	movw	r22, r28
   1cb24:	6f 57       	subi	r22, 0x7F	; 127
   1cb26:	7f 4f       	sbci	r23, 0xFF	; 255
   1cb28:	c8 01       	movw	r24, r16
   1cb2a:	0e 94 b7 73 	call	0xe76e	; 0xe76e <fatfs_tests>
   1cb2e:	89 2b       	or	r24, r25
   1cb30:	a9 f4       	brne	.+42     	; 0x1cb5c <task+0x15c>
   1cb32:	be 01       	movw	r22, r28
   1cb34:	6f 57       	subi	r22, 0x7F	; 127
   1cb36:	7f 4f       	sbci	r23, 0xFF	; 255
   1cb38:	c8 01       	movw	r24, r16
   1cb3a:	74 dd       	rcall	.-1304   	; 0x1c624 <lif_tests>
   1cb3c:	89 2b       	or	r24, r25
   1cb3e:	71 f4       	brne	.+28     	; 0x1cb5c <task+0x15c>
   1cb40:	ff 92       	push	r15
   1cb42:	ef 92       	push	r14
   1cb44:	8f e7       	ldi	r24, 0x7F	; 127
   1cb46:	98 e4       	ldi	r25, 0x48	; 72
   1cb48:	1f 92       	push	r1
   1cb4a:	9f 93       	push	r25
   1cb4c:	8f 93       	push	r24
   1cb4e:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1cb52:	0f 90       	pop	r0
   1cb54:	0f 90       	pop	r0
   1cb56:	0f 90       	pop	r0
   1cb58:	0f 90       	pop	r0
   1cb5a:	0f 90       	pop	r0
   1cb5c:	cc 51       	subi	r28, 0x1C	; 28
   1cb5e:	df 4f       	sbci	r29, 0xFF	; 255
   1cb60:	e6 e0       	ldi	r30, 0x06	; 6
   1cb62:	89 c2       	rjmp	.+1298   	; 0x1d076 <__epilogue_restores__+0x18>

0001cb64 <main>:
   1cb64:	a8 e0       	ldi	r26, 0x08	; 8
   1cb66:	b0 e0       	ldi	r27, 0x00	; 0
   1cb68:	e7 eb       	ldi	r30, 0xB7	; 183
   1cb6a:	f5 ee       	ldi	r31, 0xE5	; 229
   1cb6c:	67 c2       	rjmp	.+1230   	; 0x1d03c <__prologue_saves__+0x16>
   1cb6e:	0e 94 a0 84 	call	0x10940	; 0x10940 <gpib_bus_init>
   1cb72:	0e 94 d7 36 	call	0x6dae	; 0x6dae <init_timers>
   1cb76:	40 e0       	ldi	r20, 0x00	; 0
   1cb78:	52 ec       	ldi	r21, 0xC2	; 194
   1cb7a:	61 e0       	ldi	r22, 0x01	; 1
   1cb7c:	70 e0       	ldi	r23, 0x00	; 0
   1cb7e:	80 e0       	ldi	r24, 0x00	; 0
   1cb80:	0e 94 89 2b 	call	0x5712	; 0x5712 <uart_init>
   1cb84:	06 2f       	mov	r16, r22
   1cb86:	f7 2e       	mov	r15, r23
   1cb88:	e8 2e       	mov	r14, r24
   1cb8a:	d9 2e       	mov	r13, r25
   1cb8c:	68 ec       	ldi	r22, 0xC8	; 200
   1cb8e:	70 e0       	ldi	r23, 0x00	; 0
   1cb90:	80 e0       	ldi	r24, 0x00	; 0
   1cb92:	90 e0       	ldi	r25, 0x00	; 0
   1cb94:	0e 94 a7 2a 	call	0x554e	; 0x554e <delayms>
   1cb98:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <sep>
   1cb9c:	88 e7       	ldi	r24, 0x78	; 120
   1cb9e:	98 e4       	ldi	r25, 0x48	; 72
   1cba0:	1f 92       	push	r1
   1cba2:	9f 93       	push	r25
   1cba4:	8f 93       	push	r24
   1cba6:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1cbaa:	11 e0       	ldi	r17, 0x01	; 1
   1cbac:	1f 93       	push	r17
   1cbae:	81 e3       	ldi	r24, 0x31	; 49
   1cbb0:	8f 93       	push	r24
   1cbb2:	8d e2       	ldi	r24, 0x2D	; 45
   1cbb4:	8f 93       	push	r24
   1cbb6:	1f 92       	push	r1
   1cbb8:	87 e6       	ldi	r24, 0x67	; 103
   1cbba:	98 e4       	ldi	r25, 0x48	; 72
   1cbbc:	1f 92       	push	r1
   1cbbe:	9f 93       	push	r25
   1cbc0:	8f 93       	push	r24
   1cbc2:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1cbc6:	df 92       	push	r13
   1cbc8:	ef 92       	push	r14
   1cbca:	ff 92       	push	r15
   1cbcc:	0f 93       	push	r16
   1cbce:	1f 92       	push	r1
   1cbd0:	1f 93       	push	r17
   1cbd2:	82 ec       	ldi	r24, 0xC2	; 194
   1cbd4:	8f 93       	push	r24
   1cbd6:	1f 92       	push	r1
   1cbd8:	80 e4       	ldi	r24, 0x40	; 64
   1cbda:	98 e4       	ldi	r25, 0x48	; 72
   1cbdc:	1f 92       	push	r1
   1cbde:	9f 93       	push	r25
   1cbe0:	8f 93       	push	r24
   1cbe2:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1cbe6:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <sep>
   1cbea:	81 e2       	ldi	r24, 0x21	; 33
   1cbec:	98 e4       	ldi	r25, 0x48	; 72
   1cbee:	1f 92       	push	r1
   1cbf0:	9f 93       	push	r25
   1cbf2:	8f 93       	push	r24
   1cbf4:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1cbf8:	84 e0       	ldi	r24, 0x04	; 4
   1cbfa:	98 e4       	ldi	r25, 0x48	; 72
   1cbfc:	1f 92       	push	r1
   1cbfe:	9f 93       	push	r25
   1cc00:	8f 93       	push	r24
   1cc02:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1cc06:	84 ef       	ldi	r24, 0xF4	; 244
   1cc08:	97 e4       	ldi	r25, 0x47	; 71
   1cc0a:	1f 92       	push	r1
   1cc0c:	9f 93       	push	r25
   1cc0e:	8f 93       	push	r24
   1cc10:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1cc14:	8d ec       	ldi	r24, 0xCD	; 205
   1cc16:	97 e4       	ldi	r25, 0x47	; 71
   1cc18:	1f 92       	push	r1
   1cc1a:	9f 93       	push	r25
   1cc1c:	8f 93       	push	r24
   1cc1e:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1cc22:	0f b6       	in	r0, 0x3f	; 63
   1cc24:	f8 94       	cli
   1cc26:	de bf       	out	0x3e, r29	; 62
   1cc28:	0f be       	out	0x3f, r0	; 63
   1cc2a:	cd bf       	out	0x3d, r28	; 61
   1cc2c:	8e e5       	ldi	r24, 0x5E	; 94
   1cc2e:	96 e1       	ldi	r25, 0x16	; 22
   1cc30:	9f 93       	push	r25
   1cc32:	8f 93       	push	r24
   1cc34:	83 eb       	ldi	r24, 0xB3	; 179
   1cc36:	97 e4       	ldi	r25, 0x47	; 71
   1cc38:	1f 92       	push	r1
   1cc3a:	9f 93       	push	r25
   1cc3c:	8f 93       	push	r24
   1cc3e:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1cc42:	82 e8       	ldi	r24, 0x82	; 130
   1cc44:	96 e1       	ldi	r25, 0x16	; 22
   1cc46:	9f 93       	push	r25
   1cc48:	8f 93       	push	r24
   1cc4a:	89 e9       	ldi	r24, 0x99	; 153
   1cc4c:	97 e4       	ldi	r25, 0x47	; 71
   1cc4e:	1f 92       	push	r1
   1cc50:	9f 93       	push	r25
   1cc52:	8f 93       	push	r24
   1cc54:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1cc58:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <sep>
   1cc5c:	0e 94 84 29 	call	0x5308	; 0x5308 <PrintFree>
   1cc60:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <sep>
   1cc64:	68 ec       	ldi	r22, 0xC8	; 200
   1cc66:	70 e0       	ldi	r23, 0x00	; 0
   1cc68:	80 e0       	ldi	r24, 0x00	; 0
   1cc6a:	90 e0       	ldi	r25, 0x00	; 0
   1cc6c:	0e 94 a7 2a 	call	0x554e	; 0x554e <delayms>
   1cc70:	83 e8       	ldi	r24, 0x83	; 131
   1cc72:	97 e4       	ldi	r25, 0x47	; 71
   1cc74:	1f 92       	push	r1
   1cc76:	9f 93       	push	r25
   1cc78:	8f 93       	push	r24
   1cc7a:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1cc7e:	4b e0       	ldi	r20, 0x0B	; 11
   1cc80:	50 e0       	ldi	r21, 0x00	; 0
   1cc82:	60 e2       	ldi	r22, 0x20	; 32
   1cc84:	71 ea       	ldi	r23, 0xA1	; 161
   1cc86:	87 e0       	ldi	r24, 0x07	; 7
   1cc88:	90 e0       	ldi	r25, 0x00	; 0
   1cc8a:	0e 94 00 29 	call	0x5200	; 0x5200 <spi_init>
   1cc8e:	8d e6       	ldi	r24, 0x6D	; 109
   1cc90:	97 e4       	ldi	r25, 0x47	; 71
   1cc92:	1f 92       	push	r1
   1cc94:	9f 93       	push	r25
   1cc96:	8f 93       	push	r24
   1cc98:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1cc9c:	61 e1       	ldi	r22, 0x11	; 17
   1cc9e:	81 e0       	ldi	r24, 0x01	; 1
   1cca0:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <TWI_Init>
   1cca4:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <sep>
   1cca8:	8b e5       	ldi	r24, 0x5B	; 91
   1ccaa:	97 e4       	ldi	r25, 0x47	; 71
   1ccac:	1f 92       	push	r1
   1ccae:	9f 93       	push	r25
   1ccb0:	8f 93       	push	r24
   1ccb2:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1ccb6:	0e 94 94 36 	call	0x6d28	; 0x6d28 <clock_clear>
   1ccba:	8c e4       	ldi	r24, 0x4C	; 76
   1ccbc:	97 e4       	ldi	r25, 0x47	; 71
   1ccbe:	1f 92       	push	r1
   1ccc0:	9f 93       	push	r25
   1ccc2:	8f 93       	push	r24
   1ccc4:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1ccc8:	be 01       	movw	r22, r28
   1ccca:	6f 5f       	subi	r22, 0xFF	; 255
   1cccc:	7f 4f       	sbci	r23, 0xFF	; 255
   1ccce:	80 e0       	ldi	r24, 0x00	; 0
   1ccd0:	90 e0       	ldi	r25, 0x00	; 0
   1ccd2:	0e 94 2f 37 	call	0x6e5e	; 0x6e5e <clock_getres>
   1ccd6:	88 85       	ldd	r24, Y+8	; 0x08
   1ccd8:	8f 93       	push	r24
   1ccda:	8f 81       	ldd	r24, Y+7	; 0x07
   1ccdc:	8f 93       	push	r24
   1ccde:	8e 81       	ldd	r24, Y+6	; 0x06
   1cce0:	8f 93       	push	r24
   1cce2:	8d 81       	ldd	r24, Y+5	; 0x05
   1cce4:	8f 93       	push	r24
   1cce6:	8f e2       	ldi	r24, 0x2F	; 47
   1cce8:	97 e4       	ldi	r25, 0x47	; 71
   1ccea:	1f 92       	push	r1
   1ccec:	9f 93       	push	r25
   1ccee:	8f 93       	push	r24
   1ccf0:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1ccf4:	8c e2       	ldi	r24, 0x2C	; 44
   1ccf6:	91 e0       	ldi	r25, 0x01	; 1
   1ccf8:	0e 94 fd 3d 	call	0x7bfa	; 0x7bfa <initialize_clock>
   1ccfc:	0e 94 74 3e 	call	0x7ce8	; 0x7ce8 <display_clock>
   1cd00:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <sep>
   1cd04:	81 e1       	ldi	r24, 0x11	; 17
   1cd06:	97 e4       	ldi	r25, 0x47	; 71
   1cd08:	1f 92       	push	r1
   1cd0a:	9f 93       	push	r25
   1cd0c:	8f 93       	push	r24
   1cd0e:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1cd12:	0f b6       	in	r0, 0x3f	; 63
   1cd14:	f8 94       	cli
   1cd16:	de bf       	out	0x3e, r29	; 62
   1cd18:	0f be       	out	0x3f, r0	; 63
   1cd1a:	cd bf       	out	0x3d, r28	; 61
   1cd1c:	84 ee       	ldi	r24, 0xE4	; 228
   1cd1e:	0e 94 1d 31 	call	0x623a	; 0x623a <LCD_init>
   1cd22:	89 2b       	or	r24, r25
   1cd24:	e9 f0       	breq	.+58     	; 0x1cd60 <main+0x1fc>
   1cd26:	60 e0       	ldi	r22, 0x00	; 0
   1cd28:	80 e0       	ldi	r24, 0x00	; 0
   1cd2a:	0e 94 e7 30 	call	0x61ce	; 0x61ce <LCD_pos>
   1cd2e:	8e e2       	ldi	r24, 0x2E	; 46
   1cd30:	97 e1       	ldi	r25, 0x17	; 23
   1cd32:	9f 93       	push	r25
   1cd34:	8f 93       	push	r24
   1cd36:	0e 94 d6 31 	call	0x63ac	; 0x63ac <lcd_printf>
   1cd3a:	8d e3       	ldi	r24, 0x3D	; 61
   1cd3c:	97 e1       	ldi	r25, 0x17	; 23
   1cd3e:	9f 93       	push	r25
   1cd40:	8f 93       	push	r24
   1cd42:	0e 94 d6 31 	call	0x63ac	; 0x63ac <lcd_printf>
   1cd46:	84 ef       	ldi	r24, 0xF4	; 244
   1cd48:	96 e4       	ldi	r25, 0x46	; 70
   1cd4a:	1f 92       	push	r1
   1cd4c:	9f 93       	push	r25
   1cd4e:	8f 93       	push	r24
   1cd50:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1cd54:	0f b6       	in	r0, 0x3f	; 63
   1cd56:	f8 94       	cli
   1cd58:	de bf       	out	0x3e, r29	; 62
   1cd5a:	0f be       	out	0x3f, r0	; 63
   1cd5c:	cd bf       	out	0x3d, r28	; 61
   1cd5e:	0a c0       	rjmp	.+20     	; 0x1cd74 <main+0x210>
   1cd60:	8a ed       	ldi	r24, 0xDA	; 218
   1cd62:	96 e4       	ldi	r25, 0x46	; 70
   1cd64:	1f 92       	push	r1
   1cd66:	9f 93       	push	r25
   1cd68:	8f 93       	push	r24
   1cd6a:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1cd6e:	0f 90       	pop	r0
   1cd70:	0f 90       	pop	r0
   1cd72:	0f 90       	pop	r0
   1cd74:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <sep>
   1cd78:	82 ec       	ldi	r24, 0xC2	; 194
   1cd7a:	96 e4       	ldi	r25, 0x46	; 70
   1cd7c:	1f 92       	push	r1
   1cd7e:	9f 93       	push	r25
   1cd80:	8f 93       	push	r24
   1cd82:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1cd86:	81 e0       	ldi	r24, 0x01	; 1
   1cd88:	90 e0       	ldi	r25, 0x00	; 0
   1cd8a:	0e 94 f0 6e 	call	0xdde0	; 0xdde0 <mmc_init>
   1cd8e:	81 eb       	ldi	r24, 0xB1	; 177
   1cd90:	96 e4       	ldi	r25, 0x46	; 70
   1cd92:	1f 92       	push	r1
   1cd94:	9f 93       	push	r25
   1cd96:	8f 93       	push	r24
   1cd98:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1cd9c:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <sep>
   1cda0:	0e 94 a0 84 	call	0x10940	; 0x10940 <gpib_bus_init>
   1cda4:	8b e9       	ldi	r24, 0x9B	; 155
   1cda6:	96 e4       	ldi	r25, 0x46	; 70
   1cda8:	1f 92       	push	r1
   1cdaa:	9f 93       	push	r25
   1cdac:	8f 93       	push	r24
   1cdae:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1cdb2:	0e 94 a4 c1 	call	0x18348	; 0x18348 <printer_init>
   1cdb6:	86 e8       	ldi	r24, 0x86	; 134
   1cdb8:	96 e4       	ldi	r25, 0x46	; 70
   1cdba:	1f 92       	push	r1
   1cdbc:	9f 93       	push	r25
   1cdbe:	8f 93       	push	r24
   1cdc0:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1cdc4:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <sep>
   1cdc8:	84 e7       	ldi	r24, 0x74	; 116
   1cdca:	96 e4       	ldi	r25, 0x46	; 70
   1cdcc:	1f 92       	push	r1
   1cdce:	9f 93       	push	r25
   1cdd0:	8f 93       	push	r24
   1cdd2:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1cdd6:	0e 94 b0 82 	call	0x10560	; 0x10560 <gpib_timer_init>
   1cdda:	8c e5       	ldi	r24, 0x5C	; 92
   1cddc:	96 e4       	ldi	r25, 0x46	; 70
   1cdde:	1f 92       	push	r1
   1cde0:	9f 93       	push	r25
   1cde2:	8f 93       	push	r24
   1cde4:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1cde8:	0e 94 b9 8a 	call	0x11572	; 0x11572 <gpib_file_init>
   1cdec:	87 e4       	ldi	r24, 0x47	; 71
   1cdee:	96 e4       	ldi	r25, 0x46	; 70
   1cdf0:	1f 92       	push	r1
   1cdf2:	9f 93       	push	r25
   1cdf4:	8f 93       	push	r24
   1cdf6:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1cdfa:	0e 94 c8 84 	call	0x10990	; 0x10990 <gpib_state_init>
   1cdfe:	81 e3       	ldi	r24, 0x31	; 49
   1ce00:	96 e4       	ldi	r25, 0x46	; 70
   1ce02:	1f 92       	push	r1
   1ce04:	9f 93       	push	r25
   1ce06:	8f 93       	push	r24
   1ce08:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1ce0c:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <sep>
   1ce10:	0e 94 73 a5 	call	0x14ae6	; 0x14ae6 <display_Config>
   1ce14:	0e 94 58 a8 	call	0x150b0	; 0x150b0 <format_drives>
   1ce18:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <sep>
   1ce1c:	0e 94 78 a4 	call	0x148f0	; 0x148f0 <display_Addresses>
   1ce20:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <sep>
   1ce24:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <debuglevel+0x1>
   1ce28:	8f 93       	push	r24
   1ce2a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1ce2e:	8f 93       	push	r24
   1ce30:	8b e1       	ldi	r24, 0x1B	; 27
   1ce32:	96 e4       	ldi	r25, 0x46	; 70
   1ce34:	1f 92       	push	r1
   1ce36:	9f 93       	push	r25
   1ce38:	8f 93       	push	r24
   1ce3a:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1ce3e:	60 e0       	ldi	r22, 0x00	; 0
   1ce40:	80 e0       	ldi	r24, 0x00	; 0
   1ce42:	0e 94 e7 30 	call	0x61ce	; 0x61ce <LCD_pos>
   1ce46:	83 e0       	ldi	r24, 0x03	; 3
   1ce48:	0e 94 ac 93 	call	0x12758	; 0x12758 <count_drive_types>
   1ce4c:	9f 93       	push	r25
   1ce4e:	8f 93       	push	r24
   1ce50:	8b e4       	ldi	r24, 0x4B	; 75
   1ce52:	97 e1       	ldi	r25, 0x17	; 23
   1ce54:	9f 93       	push	r25
   1ce56:	8f 93       	push	r24
   1ce58:	0e 94 d6 31 	call	0x63ac	; 0x63ac <lcd_printf>
   1ce5c:	0f b6       	in	r0, 0x3f	; 63
   1ce5e:	f8 94       	cli
   1ce60:	de bf       	out	0x3e, r29	; 62
   1ce62:	0f be       	out	0x3f, r0	; 63
   1ce64:	cd bf       	out	0x3d, r28	; 61
   1ce66:	81 e0       	ldi	r24, 0x01	; 1
   1ce68:	0e 94 ac 93 	call	0x12758	; 0x12758 <count_drive_types>
   1ce6c:	9f 93       	push	r25
   1ce6e:	8f 93       	push	r24
   1ce70:	8b e5       	ldi	r24, 0x5B	; 91
   1ce72:	97 e1       	ldi	r25, 0x17	; 23
   1ce74:	9f 93       	push	r25
   1ce76:	8f 93       	push	r24
   1ce78:	0e 94 d6 31 	call	0x63ac	; 0x63ac <lcd_printf>
   1ce7c:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <sep>
   1ce80:	87 e0       	ldi	r24, 0x07	; 7
   1ce82:	96 e4       	ldi	r25, 0x46	; 70
   1ce84:	1f 92       	push	r1
   1ce86:	9f 93       	push	r25
   1ce88:	8f 93       	push	r24
   1ce8a:	0e 94 1f 47 	call	0x8e3e	; 0x8e3e <printf_P>
   1ce8e:	0f b6       	in	r0, 0x3f	; 63
   1ce90:	f8 94       	cli
   1ce92:	de bf       	out	0x3e, r29	; 62
   1ce94:	0f be       	out	0x3f, r0	; 63
   1ce96:	cd bf       	out	0x3d, r28	; 61
   1ce98:	81 e0       	ldi	r24, 0x01	; 1
   1ce9a:	b2 dd       	rcall	.-1180   	; 0x1ca00 <task>
   1ce9c:	fd cf       	rjmp	.-6      	; 0x1ce98 <main+0x334>

0001ce9e <__mulsi3>:
   1ce9e:	db 01       	movw	r26, r22
   1cea0:	8f 93       	push	r24
   1cea2:	9f 93       	push	r25
   1cea4:	a0 d0       	rcall	.+320    	; 0x1cfe6 <__muluhisi3>
   1cea6:	bf 91       	pop	r27
   1cea8:	af 91       	pop	r26
   1ceaa:	a2 9f       	mul	r26, r18
   1ceac:	80 0d       	add	r24, r0
   1ceae:	91 1d       	adc	r25, r1
   1ceb0:	a3 9f       	mul	r26, r19
   1ceb2:	90 0d       	add	r25, r0
   1ceb4:	b2 9f       	mul	r27, r18
   1ceb6:	90 0d       	add	r25, r0
   1ceb8:	11 24       	eor	r1, r1
   1ceba:	08 95       	ret

0001cebc <__udivmodqi4>:
   1cebc:	99 1b       	sub	r25, r25
   1cebe:	79 e0       	ldi	r23, 0x09	; 9
   1cec0:	04 c0       	rjmp	.+8      	; 0x1ceca <__udivmodqi4_ep>

0001cec2 <__udivmodqi4_loop>:
   1cec2:	99 1f       	adc	r25, r25
   1cec4:	96 17       	cp	r25, r22
   1cec6:	08 f0       	brcs	.+2      	; 0x1ceca <__udivmodqi4_ep>
   1cec8:	96 1b       	sub	r25, r22

0001ceca <__udivmodqi4_ep>:
   1ceca:	88 1f       	adc	r24, r24
   1cecc:	7a 95       	dec	r23
   1cece:	c9 f7       	brne	.-14     	; 0x1cec2 <__udivmodqi4_loop>
   1ced0:	80 95       	com	r24
   1ced2:	08 95       	ret

0001ced4 <__udivmodhi4>:
   1ced4:	aa 1b       	sub	r26, r26
   1ced6:	bb 1b       	sub	r27, r27
   1ced8:	51 e1       	ldi	r21, 0x11	; 17
   1ceda:	07 c0       	rjmp	.+14     	; 0x1ceea <__udivmodhi4_ep>

0001cedc <__udivmodhi4_loop>:
   1cedc:	aa 1f       	adc	r26, r26
   1cede:	bb 1f       	adc	r27, r27
   1cee0:	a6 17       	cp	r26, r22
   1cee2:	b7 07       	cpc	r27, r23
   1cee4:	10 f0       	brcs	.+4      	; 0x1ceea <__udivmodhi4_ep>
   1cee6:	a6 1b       	sub	r26, r22
   1cee8:	b7 0b       	sbc	r27, r23

0001ceea <__udivmodhi4_ep>:
   1ceea:	88 1f       	adc	r24, r24
   1ceec:	99 1f       	adc	r25, r25
   1ceee:	5a 95       	dec	r21
   1cef0:	a9 f7       	brne	.-22     	; 0x1cedc <__udivmodhi4_loop>
   1cef2:	80 95       	com	r24
   1cef4:	90 95       	com	r25
   1cef6:	bc 01       	movw	r22, r24
   1cef8:	cd 01       	movw	r24, r26
   1cefa:	08 95       	ret

0001cefc <__divmodhi4>:
   1cefc:	97 fb       	bst	r25, 7
   1cefe:	07 2e       	mov	r0, r23
   1cf00:	16 f4       	brtc	.+4      	; 0x1cf06 <__divmodhi4+0xa>
   1cf02:	00 94       	com	r0
   1cf04:	06 d0       	rcall	.+12     	; 0x1cf12 <__divmodhi4_neg1>
   1cf06:	77 fd       	sbrc	r23, 7
   1cf08:	08 d0       	rcall	.+16     	; 0x1cf1a <__divmodhi4_neg2>
   1cf0a:	e4 df       	rcall	.-56     	; 0x1ced4 <__udivmodhi4>
   1cf0c:	07 fc       	sbrc	r0, 7
   1cf0e:	05 d0       	rcall	.+10     	; 0x1cf1a <__divmodhi4_neg2>
   1cf10:	3e f4       	brtc	.+14     	; 0x1cf20 <__divmodhi4_exit>

0001cf12 <__divmodhi4_neg1>:
   1cf12:	90 95       	com	r25
   1cf14:	81 95       	neg	r24
   1cf16:	9f 4f       	sbci	r25, 0xFF	; 255
   1cf18:	08 95       	ret

0001cf1a <__divmodhi4_neg2>:
   1cf1a:	70 95       	com	r23
   1cf1c:	61 95       	neg	r22
   1cf1e:	7f 4f       	sbci	r23, 0xFF	; 255

0001cf20 <__divmodhi4_exit>:
   1cf20:	08 95       	ret

0001cf22 <__udivmodsi4>:
   1cf22:	a1 e2       	ldi	r26, 0x21	; 33
   1cf24:	1a 2e       	mov	r1, r26
   1cf26:	aa 1b       	sub	r26, r26
   1cf28:	bb 1b       	sub	r27, r27
   1cf2a:	fd 01       	movw	r30, r26
   1cf2c:	0d c0       	rjmp	.+26     	; 0x1cf48 <__udivmodsi4_ep>

0001cf2e <__udivmodsi4_loop>:
   1cf2e:	aa 1f       	adc	r26, r26
   1cf30:	bb 1f       	adc	r27, r27
   1cf32:	ee 1f       	adc	r30, r30
   1cf34:	ff 1f       	adc	r31, r31
   1cf36:	a2 17       	cp	r26, r18
   1cf38:	b3 07       	cpc	r27, r19
   1cf3a:	e4 07       	cpc	r30, r20
   1cf3c:	f5 07       	cpc	r31, r21
   1cf3e:	20 f0       	brcs	.+8      	; 0x1cf48 <__udivmodsi4_ep>
   1cf40:	a2 1b       	sub	r26, r18
   1cf42:	b3 0b       	sbc	r27, r19
   1cf44:	e4 0b       	sbc	r30, r20
   1cf46:	f5 0b       	sbc	r31, r21

0001cf48 <__udivmodsi4_ep>:
   1cf48:	66 1f       	adc	r22, r22
   1cf4a:	77 1f       	adc	r23, r23
   1cf4c:	88 1f       	adc	r24, r24
   1cf4e:	99 1f       	adc	r25, r25
   1cf50:	1a 94       	dec	r1
   1cf52:	69 f7       	brne	.-38     	; 0x1cf2e <__udivmodsi4_loop>
   1cf54:	60 95       	com	r22
   1cf56:	70 95       	com	r23
   1cf58:	80 95       	com	r24
   1cf5a:	90 95       	com	r25
   1cf5c:	9b 01       	movw	r18, r22
   1cf5e:	ac 01       	movw	r20, r24
   1cf60:	bd 01       	movw	r22, r26
   1cf62:	cf 01       	movw	r24, r30
   1cf64:	08 95       	ret

0001cf66 <__divmodsi4>:
   1cf66:	05 2e       	mov	r0, r21
   1cf68:	97 fb       	bst	r25, 7
   1cf6a:	16 f4       	brtc	.+4      	; 0x1cf70 <__divmodsi4+0xa>
   1cf6c:	00 94       	com	r0
   1cf6e:	0f d0       	rcall	.+30     	; 0x1cf8e <__negsi2>
   1cf70:	57 fd       	sbrc	r21, 7
   1cf72:	05 d0       	rcall	.+10     	; 0x1cf7e <__divmodsi4_neg2>
   1cf74:	d6 df       	rcall	.-84     	; 0x1cf22 <__udivmodsi4>
   1cf76:	07 fc       	sbrc	r0, 7
   1cf78:	02 d0       	rcall	.+4      	; 0x1cf7e <__divmodsi4_neg2>
   1cf7a:	46 f4       	brtc	.+16     	; 0x1cf8c <__divmodsi4_exit>
   1cf7c:	08 c0       	rjmp	.+16     	; 0x1cf8e <__negsi2>

0001cf7e <__divmodsi4_neg2>:
   1cf7e:	50 95       	com	r21
   1cf80:	40 95       	com	r20
   1cf82:	30 95       	com	r19
   1cf84:	21 95       	neg	r18
   1cf86:	3f 4f       	sbci	r19, 0xFF	; 255
   1cf88:	4f 4f       	sbci	r20, 0xFF	; 255
   1cf8a:	5f 4f       	sbci	r21, 0xFF	; 255

0001cf8c <__divmodsi4_exit>:
   1cf8c:	08 95       	ret

0001cf8e <__negsi2>:
   1cf8e:	90 95       	com	r25
   1cf90:	80 95       	com	r24
   1cf92:	70 95       	com	r23
   1cf94:	61 95       	neg	r22
   1cf96:	7f 4f       	sbci	r23, 0xFF	; 255
   1cf98:	8f 4f       	sbci	r24, 0xFF	; 255
   1cf9a:	9f 4f       	sbci	r25, 0xFF	; 255
   1cf9c:	08 95       	ret

0001cf9e <__tablejump2__>:
   1cf9e:	ee 0f       	add	r30, r30
   1cfa0:	ff 1f       	adc	r31, r31
   1cfa2:	00 24       	eor	r0, r0
   1cfa4:	00 1c       	adc	r0, r0
   1cfa6:	0b be       	out	0x3b, r0	; 59
   1cfa8:	07 90       	elpm	r0, Z+
   1cfaa:	f6 91       	elpm	r31, Z
   1cfac:	e0 2d       	mov	r30, r0
   1cfae:	09 94       	ijmp

0001cfb0 <__mulhisi3>:
   1cfb0:	05 d0       	rcall	.+10     	; 0x1cfbc <__umulhisi3>
   1cfb2:	33 23       	and	r19, r19
   1cfb4:	12 f4       	brpl	.+4      	; 0x1cfba <__mulhisi3+0xa>
   1cfb6:	8a 1b       	sub	r24, r26
   1cfb8:	9b 0b       	sbc	r25, r27
   1cfba:	10 c0       	rjmp	.+32     	; 0x1cfdc <__usmulhisi3_tail>

0001cfbc <__umulhisi3>:
   1cfbc:	a2 9f       	mul	r26, r18
   1cfbe:	b0 01       	movw	r22, r0
   1cfc0:	b3 9f       	mul	r27, r19
   1cfc2:	c0 01       	movw	r24, r0
   1cfc4:	a3 9f       	mul	r26, r19
   1cfc6:	70 0d       	add	r23, r0
   1cfc8:	81 1d       	adc	r24, r1
   1cfca:	11 24       	eor	r1, r1
   1cfcc:	91 1d       	adc	r25, r1
   1cfce:	b2 9f       	mul	r27, r18
   1cfd0:	70 0d       	add	r23, r0
   1cfd2:	81 1d       	adc	r24, r1
   1cfd4:	11 24       	eor	r1, r1
   1cfd6:	91 1d       	adc	r25, r1
   1cfd8:	08 95       	ret

0001cfda <__usmulhisi3>:
   1cfda:	f0 df       	rcall	.-32     	; 0x1cfbc <__umulhisi3>

0001cfdc <__usmulhisi3_tail>:
   1cfdc:	b7 ff       	sbrs	r27, 7
   1cfde:	08 95       	ret
   1cfe0:	82 1b       	sub	r24, r18
   1cfe2:	93 0b       	sbc	r25, r19
   1cfe4:	08 95       	ret

0001cfe6 <__muluhisi3>:
   1cfe6:	ea df       	rcall	.-44     	; 0x1cfbc <__umulhisi3>
   1cfe8:	a5 9f       	mul	r26, r21
   1cfea:	90 0d       	add	r25, r0
   1cfec:	b4 9f       	mul	r27, r20
   1cfee:	90 0d       	add	r25, r0
   1cff0:	a4 9f       	mul	r26, r20
   1cff2:	80 0d       	add	r24, r0
   1cff4:	91 1d       	adc	r25, r1
   1cff6:	11 24       	eor	r1, r1
   1cff8:	08 95       	ret

0001cffa <__mulshisi3>:
   1cffa:	b7 ff       	sbrs	r27, 7
   1cffc:	f4 cf       	rjmp	.-24     	; 0x1cfe6 <__muluhisi3>

0001cffe <__mulohisi3>:
   1cffe:	f3 df       	rcall	.-26     	; 0x1cfe6 <__muluhisi3>
   1d000:	82 1b       	sub	r24, r18
   1d002:	93 0b       	sbc	r25, r19
   1d004:	08 95       	ret

0001d006 <__negdi2>:
   1d006:	60 95       	com	r22
   1d008:	70 95       	com	r23
   1d00a:	80 95       	com	r24
   1d00c:	90 95       	com	r25
   1d00e:	30 95       	com	r19
   1d010:	40 95       	com	r20
   1d012:	50 95       	com	r21
   1d014:	21 95       	neg	r18
   1d016:	3f 4f       	sbci	r19, 0xFF	; 255
   1d018:	4f 4f       	sbci	r20, 0xFF	; 255
   1d01a:	5f 4f       	sbci	r21, 0xFF	; 255
   1d01c:	6f 4f       	sbci	r22, 0xFF	; 255
   1d01e:	7f 4f       	sbci	r23, 0xFF	; 255
   1d020:	8f 4f       	sbci	r24, 0xFF	; 255
   1d022:	9f 4f       	sbci	r25, 0xFF	; 255
   1d024:	08 95       	ret

0001d026 <__prologue_saves__>:
   1d026:	2f 92       	push	r2
   1d028:	3f 92       	push	r3
   1d02a:	4f 92       	push	r4
   1d02c:	5f 92       	push	r5
   1d02e:	6f 92       	push	r6
   1d030:	7f 92       	push	r7
   1d032:	8f 92       	push	r8
   1d034:	9f 92       	push	r9
   1d036:	af 92       	push	r10
   1d038:	bf 92       	push	r11
   1d03a:	cf 92       	push	r12
   1d03c:	df 92       	push	r13
   1d03e:	ef 92       	push	r14
   1d040:	ff 92       	push	r15
   1d042:	0f 93       	push	r16
   1d044:	1f 93       	push	r17
   1d046:	cf 93       	push	r28
   1d048:	df 93       	push	r29
   1d04a:	cd b7       	in	r28, 0x3d	; 61
   1d04c:	de b7       	in	r29, 0x3e	; 62
   1d04e:	ca 1b       	sub	r28, r26
   1d050:	db 0b       	sbc	r29, r27
   1d052:	0f b6       	in	r0, 0x3f	; 63
   1d054:	f8 94       	cli
   1d056:	de bf       	out	0x3e, r29	; 62
   1d058:	0f be       	out	0x3f, r0	; 63
   1d05a:	cd bf       	out	0x3d, r28	; 61
   1d05c:	09 94       	ijmp

0001d05e <__epilogue_restores__>:
   1d05e:	2a 88       	ldd	r2, Y+18	; 0x12
   1d060:	39 88       	ldd	r3, Y+17	; 0x11
   1d062:	48 88       	ldd	r4, Y+16	; 0x10
   1d064:	5f 84       	ldd	r5, Y+15	; 0x0f
   1d066:	6e 84       	ldd	r6, Y+14	; 0x0e
   1d068:	7d 84       	ldd	r7, Y+13	; 0x0d
   1d06a:	8c 84       	ldd	r8, Y+12	; 0x0c
   1d06c:	9b 84       	ldd	r9, Y+11	; 0x0b
   1d06e:	aa 84       	ldd	r10, Y+10	; 0x0a
   1d070:	b9 84       	ldd	r11, Y+9	; 0x09
   1d072:	c8 84       	ldd	r12, Y+8	; 0x08
   1d074:	df 80       	ldd	r13, Y+7	; 0x07
   1d076:	ee 80       	ldd	r14, Y+6	; 0x06
   1d078:	fd 80       	ldd	r15, Y+5	; 0x05
   1d07a:	0c 81       	ldd	r16, Y+4	; 0x04
   1d07c:	1b 81       	ldd	r17, Y+3	; 0x03
   1d07e:	aa 81       	ldd	r26, Y+2	; 0x02
   1d080:	b9 81       	ldd	r27, Y+1	; 0x01
   1d082:	ce 0f       	add	r28, r30
   1d084:	d1 1d       	adc	r29, r1
   1d086:	0f b6       	in	r0, 0x3f	; 63
   1d088:	f8 94       	cli
   1d08a:	de bf       	out	0x3e, r29	; 62
   1d08c:	0f be       	out	0x3f, r0	; 63
   1d08e:	cd bf       	out	0x3d, r28	; 61
   1d090:	ed 01       	movw	r28, r26
   1d092:	08 95       	ret

0001d094 <__xload_1>:
   1d094:	57 fd       	sbrc	r21, 7
   1d096:	03 c0       	rjmp	.+6      	; 0x1d09e <__xload_1+0xa>
   1d098:	5b bf       	out	0x3b, r21	; 59
   1d09a:	67 91       	elpm	r22, Z+
   1d09c:	08 95       	ret
   1d09e:	60 81       	ld	r22, Z
   1d0a0:	08 95       	ret

0001d0a2 <__cmpdi2_s8>:
   1d0a2:	00 24       	eor	r0, r0
   1d0a4:	a7 fd       	sbrc	r26, 7
   1d0a6:	00 94       	com	r0
   1d0a8:	2a 17       	cp	r18, r26
   1d0aa:	30 05       	cpc	r19, r0
   1d0ac:	40 05       	cpc	r20, r0
   1d0ae:	50 05       	cpc	r21, r0
   1d0b0:	60 05       	cpc	r22, r0
   1d0b2:	70 05       	cpc	r23, r0
   1d0b4:	80 05       	cpc	r24, r0
   1d0b6:	90 05       	cpc	r25, r0
   1d0b8:	08 95       	ret

0001d0ba <__subsf3>:
   1d0ba:	50 58       	subi	r21, 0x80	; 128

0001d0bc <__addsf3>:
   1d0bc:	bb 27       	eor	r27, r27
   1d0be:	aa 27       	eor	r26, r26
   1d0c0:	0e d0       	rcall	.+28     	; 0x1d0de <__addsf3x>
   1d0c2:	75 c1       	rjmp	.+746    	; 0x1d3ae <__fp_round>
   1d0c4:	66 d1       	rcall	.+716    	; 0x1d392 <__fp_pscA>
   1d0c6:	30 f0       	brcs	.+12     	; 0x1d0d4 <__addsf3+0x18>
   1d0c8:	6b d1       	rcall	.+726    	; 0x1d3a0 <__fp_pscB>
   1d0ca:	20 f0       	brcs	.+8      	; 0x1d0d4 <__addsf3+0x18>
   1d0cc:	31 f4       	brne	.+12     	; 0x1d0da <__addsf3+0x1e>
   1d0ce:	9f 3f       	cpi	r25, 0xFF	; 255
   1d0d0:	11 f4       	brne	.+4      	; 0x1d0d6 <__addsf3+0x1a>
   1d0d2:	1e f4       	brtc	.+6      	; 0x1d0da <__addsf3+0x1e>
   1d0d4:	5b c1       	rjmp	.+694    	; 0x1d38c <__fp_nan>
   1d0d6:	0e f4       	brtc	.+2      	; 0x1d0da <__addsf3+0x1e>
   1d0d8:	e0 95       	com	r30
   1d0da:	e7 fb       	bst	r30, 7
   1d0dc:	51 c1       	rjmp	.+674    	; 0x1d380 <__fp_inf>

0001d0de <__addsf3x>:
   1d0de:	e9 2f       	mov	r30, r25
   1d0e0:	77 d1       	rcall	.+750    	; 0x1d3d0 <__fp_split3>
   1d0e2:	80 f3       	brcs	.-32     	; 0x1d0c4 <__addsf3+0x8>
   1d0e4:	ba 17       	cp	r27, r26
   1d0e6:	62 07       	cpc	r22, r18
   1d0e8:	73 07       	cpc	r23, r19
   1d0ea:	84 07       	cpc	r24, r20
   1d0ec:	95 07       	cpc	r25, r21
   1d0ee:	18 f0       	brcs	.+6      	; 0x1d0f6 <__addsf3x+0x18>
   1d0f0:	71 f4       	brne	.+28     	; 0x1d10e <__addsf3x+0x30>
   1d0f2:	9e f5       	brtc	.+102    	; 0x1d15a <__addsf3x+0x7c>
   1d0f4:	8f c1       	rjmp	.+798    	; 0x1d414 <__fp_zero>
   1d0f6:	0e f4       	brtc	.+2      	; 0x1d0fa <__addsf3x+0x1c>
   1d0f8:	e0 95       	com	r30
   1d0fa:	0b 2e       	mov	r0, r27
   1d0fc:	ba 2f       	mov	r27, r26
   1d0fe:	a0 2d       	mov	r26, r0
   1d100:	0b 01       	movw	r0, r22
   1d102:	b9 01       	movw	r22, r18
   1d104:	90 01       	movw	r18, r0
   1d106:	0c 01       	movw	r0, r24
   1d108:	ca 01       	movw	r24, r20
   1d10a:	a0 01       	movw	r20, r0
   1d10c:	11 24       	eor	r1, r1
   1d10e:	ff 27       	eor	r31, r31
   1d110:	59 1b       	sub	r21, r25
   1d112:	99 f0       	breq	.+38     	; 0x1d13a <__addsf3x+0x5c>
   1d114:	59 3f       	cpi	r21, 0xF9	; 249
   1d116:	50 f4       	brcc	.+20     	; 0x1d12c <__addsf3x+0x4e>
   1d118:	50 3e       	cpi	r21, 0xE0	; 224
   1d11a:	68 f1       	brcs	.+90     	; 0x1d176 <__addsf3x+0x98>
   1d11c:	1a 16       	cp	r1, r26
   1d11e:	f0 40       	sbci	r31, 0x00	; 0
   1d120:	a2 2f       	mov	r26, r18
   1d122:	23 2f       	mov	r18, r19
   1d124:	34 2f       	mov	r19, r20
   1d126:	44 27       	eor	r20, r20
   1d128:	58 5f       	subi	r21, 0xF8	; 248
   1d12a:	f3 cf       	rjmp	.-26     	; 0x1d112 <__addsf3x+0x34>
   1d12c:	46 95       	lsr	r20
   1d12e:	37 95       	ror	r19
   1d130:	27 95       	ror	r18
   1d132:	a7 95       	ror	r26
   1d134:	f0 40       	sbci	r31, 0x00	; 0
   1d136:	53 95       	inc	r21
   1d138:	c9 f7       	brne	.-14     	; 0x1d12c <__addsf3x+0x4e>
   1d13a:	7e f4       	brtc	.+30     	; 0x1d15a <__addsf3x+0x7c>
   1d13c:	1f 16       	cp	r1, r31
   1d13e:	ba 0b       	sbc	r27, r26
   1d140:	62 0b       	sbc	r22, r18
   1d142:	73 0b       	sbc	r23, r19
   1d144:	84 0b       	sbc	r24, r20
   1d146:	ba f0       	brmi	.+46     	; 0x1d176 <__addsf3x+0x98>
   1d148:	91 50       	subi	r25, 0x01	; 1
   1d14a:	a1 f0       	breq	.+40     	; 0x1d174 <__addsf3x+0x96>
   1d14c:	ff 0f       	add	r31, r31
   1d14e:	bb 1f       	adc	r27, r27
   1d150:	66 1f       	adc	r22, r22
   1d152:	77 1f       	adc	r23, r23
   1d154:	88 1f       	adc	r24, r24
   1d156:	c2 f7       	brpl	.-16     	; 0x1d148 <__addsf3x+0x6a>
   1d158:	0e c0       	rjmp	.+28     	; 0x1d176 <__addsf3x+0x98>
   1d15a:	ba 0f       	add	r27, r26
   1d15c:	62 1f       	adc	r22, r18
   1d15e:	73 1f       	adc	r23, r19
   1d160:	84 1f       	adc	r24, r20
   1d162:	48 f4       	brcc	.+18     	; 0x1d176 <__addsf3x+0x98>
   1d164:	87 95       	ror	r24
   1d166:	77 95       	ror	r23
   1d168:	67 95       	ror	r22
   1d16a:	b7 95       	ror	r27
   1d16c:	f7 95       	ror	r31
   1d16e:	9e 3f       	cpi	r25, 0xFE	; 254
   1d170:	08 f0       	brcs	.+2      	; 0x1d174 <__addsf3x+0x96>
   1d172:	b3 cf       	rjmp	.-154    	; 0x1d0da <__addsf3+0x1e>
   1d174:	93 95       	inc	r25
   1d176:	88 0f       	add	r24, r24
   1d178:	08 f0       	brcs	.+2      	; 0x1d17c <__addsf3x+0x9e>
   1d17a:	99 27       	eor	r25, r25
   1d17c:	ee 0f       	add	r30, r30
   1d17e:	97 95       	ror	r25
   1d180:	87 95       	ror	r24
   1d182:	08 95       	ret

0001d184 <__cmpsf2>:
   1d184:	d9 d0       	rcall	.+434    	; 0x1d338 <__fp_cmp>
   1d186:	08 f4       	brcc	.+2      	; 0x1d18a <__cmpsf2+0x6>
   1d188:	81 e0       	ldi	r24, 0x01	; 1
   1d18a:	08 95       	ret

0001d18c <__divsf3>:
   1d18c:	0c d0       	rcall	.+24     	; 0x1d1a6 <__divsf3x>
   1d18e:	0f c1       	rjmp	.+542    	; 0x1d3ae <__fp_round>
   1d190:	07 d1       	rcall	.+526    	; 0x1d3a0 <__fp_pscB>
   1d192:	40 f0       	brcs	.+16     	; 0x1d1a4 <__divsf3+0x18>
   1d194:	fe d0       	rcall	.+508    	; 0x1d392 <__fp_pscA>
   1d196:	30 f0       	brcs	.+12     	; 0x1d1a4 <__divsf3+0x18>
   1d198:	21 f4       	brne	.+8      	; 0x1d1a2 <__divsf3+0x16>
   1d19a:	5f 3f       	cpi	r21, 0xFF	; 255
   1d19c:	19 f0       	breq	.+6      	; 0x1d1a4 <__divsf3+0x18>
   1d19e:	f0 c0       	rjmp	.+480    	; 0x1d380 <__fp_inf>
   1d1a0:	51 11       	cpse	r21, r1
   1d1a2:	39 c1       	rjmp	.+626    	; 0x1d416 <__fp_szero>
   1d1a4:	f3 c0       	rjmp	.+486    	; 0x1d38c <__fp_nan>

0001d1a6 <__divsf3x>:
   1d1a6:	14 d1       	rcall	.+552    	; 0x1d3d0 <__fp_split3>
   1d1a8:	98 f3       	brcs	.-26     	; 0x1d190 <__divsf3+0x4>

0001d1aa <__divsf3_pse>:
   1d1aa:	99 23       	and	r25, r25
   1d1ac:	c9 f3       	breq	.-14     	; 0x1d1a0 <__divsf3+0x14>
   1d1ae:	55 23       	and	r21, r21
   1d1b0:	b1 f3       	breq	.-20     	; 0x1d19e <__divsf3+0x12>
   1d1b2:	95 1b       	sub	r25, r21
   1d1b4:	55 0b       	sbc	r21, r21
   1d1b6:	bb 27       	eor	r27, r27
   1d1b8:	aa 27       	eor	r26, r26
   1d1ba:	62 17       	cp	r22, r18
   1d1bc:	73 07       	cpc	r23, r19
   1d1be:	84 07       	cpc	r24, r20
   1d1c0:	38 f0       	brcs	.+14     	; 0x1d1d0 <__divsf3_pse+0x26>
   1d1c2:	9f 5f       	subi	r25, 0xFF	; 255
   1d1c4:	5f 4f       	sbci	r21, 0xFF	; 255
   1d1c6:	22 0f       	add	r18, r18
   1d1c8:	33 1f       	adc	r19, r19
   1d1ca:	44 1f       	adc	r20, r20
   1d1cc:	aa 1f       	adc	r26, r26
   1d1ce:	a9 f3       	breq	.-22     	; 0x1d1ba <__divsf3_pse+0x10>
   1d1d0:	33 d0       	rcall	.+102    	; 0x1d238 <__divsf3_pse+0x8e>
   1d1d2:	0e 2e       	mov	r0, r30
   1d1d4:	3a f0       	brmi	.+14     	; 0x1d1e4 <__divsf3_pse+0x3a>
   1d1d6:	e0 e8       	ldi	r30, 0x80	; 128
   1d1d8:	30 d0       	rcall	.+96     	; 0x1d23a <__divsf3_pse+0x90>
   1d1da:	91 50       	subi	r25, 0x01	; 1
   1d1dc:	50 40       	sbci	r21, 0x00	; 0
   1d1de:	e6 95       	lsr	r30
   1d1e0:	00 1c       	adc	r0, r0
   1d1e2:	ca f7       	brpl	.-14     	; 0x1d1d6 <__divsf3_pse+0x2c>
   1d1e4:	29 d0       	rcall	.+82     	; 0x1d238 <__divsf3_pse+0x8e>
   1d1e6:	fe 2f       	mov	r31, r30
   1d1e8:	27 d0       	rcall	.+78     	; 0x1d238 <__divsf3_pse+0x8e>
   1d1ea:	66 0f       	add	r22, r22
   1d1ec:	77 1f       	adc	r23, r23
   1d1ee:	88 1f       	adc	r24, r24
   1d1f0:	bb 1f       	adc	r27, r27
   1d1f2:	26 17       	cp	r18, r22
   1d1f4:	37 07       	cpc	r19, r23
   1d1f6:	48 07       	cpc	r20, r24
   1d1f8:	ab 07       	cpc	r26, r27
   1d1fa:	b0 e8       	ldi	r27, 0x80	; 128
   1d1fc:	09 f0       	breq	.+2      	; 0x1d200 <__divsf3_pse+0x56>
   1d1fe:	bb 0b       	sbc	r27, r27
   1d200:	80 2d       	mov	r24, r0
   1d202:	bf 01       	movw	r22, r30
   1d204:	ff 27       	eor	r31, r31
   1d206:	93 58       	subi	r25, 0x83	; 131
   1d208:	5f 4f       	sbci	r21, 0xFF	; 255
   1d20a:	2a f0       	brmi	.+10     	; 0x1d216 <__divsf3_pse+0x6c>
   1d20c:	9e 3f       	cpi	r25, 0xFE	; 254
   1d20e:	51 05       	cpc	r21, r1
   1d210:	68 f0       	brcs	.+26     	; 0x1d22c <__divsf3_pse+0x82>
   1d212:	b6 c0       	rjmp	.+364    	; 0x1d380 <__fp_inf>
   1d214:	00 c1       	rjmp	.+512    	; 0x1d416 <__fp_szero>
   1d216:	5f 3f       	cpi	r21, 0xFF	; 255
   1d218:	ec f3       	brlt	.-6      	; 0x1d214 <__divsf3_pse+0x6a>
   1d21a:	98 3e       	cpi	r25, 0xE8	; 232
   1d21c:	dc f3       	brlt	.-10     	; 0x1d214 <__divsf3_pse+0x6a>
   1d21e:	86 95       	lsr	r24
   1d220:	77 95       	ror	r23
   1d222:	67 95       	ror	r22
   1d224:	b7 95       	ror	r27
   1d226:	f7 95       	ror	r31
   1d228:	9f 5f       	subi	r25, 0xFF	; 255
   1d22a:	c9 f7       	brne	.-14     	; 0x1d21e <__divsf3_pse+0x74>
   1d22c:	88 0f       	add	r24, r24
   1d22e:	91 1d       	adc	r25, r1
   1d230:	96 95       	lsr	r25
   1d232:	87 95       	ror	r24
   1d234:	97 f9       	bld	r25, 7
   1d236:	08 95       	ret
   1d238:	e1 e0       	ldi	r30, 0x01	; 1
   1d23a:	66 0f       	add	r22, r22
   1d23c:	77 1f       	adc	r23, r23
   1d23e:	88 1f       	adc	r24, r24
   1d240:	bb 1f       	adc	r27, r27
   1d242:	62 17       	cp	r22, r18
   1d244:	73 07       	cpc	r23, r19
   1d246:	84 07       	cpc	r24, r20
   1d248:	ba 07       	cpc	r27, r26
   1d24a:	20 f0       	brcs	.+8      	; 0x1d254 <__divsf3_pse+0xaa>
   1d24c:	62 1b       	sub	r22, r18
   1d24e:	73 0b       	sbc	r23, r19
   1d250:	84 0b       	sbc	r24, r20
   1d252:	ba 0b       	sbc	r27, r26
   1d254:	ee 1f       	adc	r30, r30
   1d256:	88 f7       	brcc	.-30     	; 0x1d23a <__divsf3_pse+0x90>
   1d258:	e0 95       	com	r30
   1d25a:	08 95       	ret

0001d25c <__fixsfsi>:
   1d25c:	04 d0       	rcall	.+8      	; 0x1d266 <__fixunssfsi>
   1d25e:	68 94       	set
   1d260:	b1 11       	cpse	r27, r1
   1d262:	d9 c0       	rjmp	.+434    	; 0x1d416 <__fp_szero>
   1d264:	08 95       	ret

0001d266 <__fixunssfsi>:
   1d266:	bc d0       	rcall	.+376    	; 0x1d3e0 <__fp_splitA>
   1d268:	88 f0       	brcs	.+34     	; 0x1d28c <__fixunssfsi+0x26>
   1d26a:	9f 57       	subi	r25, 0x7F	; 127
   1d26c:	90 f0       	brcs	.+36     	; 0x1d292 <__fixunssfsi+0x2c>
   1d26e:	b9 2f       	mov	r27, r25
   1d270:	99 27       	eor	r25, r25
   1d272:	b7 51       	subi	r27, 0x17	; 23
   1d274:	a0 f0       	brcs	.+40     	; 0x1d29e <__fixunssfsi+0x38>
   1d276:	d1 f0       	breq	.+52     	; 0x1d2ac <__fixunssfsi+0x46>
   1d278:	66 0f       	add	r22, r22
   1d27a:	77 1f       	adc	r23, r23
   1d27c:	88 1f       	adc	r24, r24
   1d27e:	99 1f       	adc	r25, r25
   1d280:	1a f0       	brmi	.+6      	; 0x1d288 <__fixunssfsi+0x22>
   1d282:	ba 95       	dec	r27
   1d284:	c9 f7       	brne	.-14     	; 0x1d278 <__fixunssfsi+0x12>
   1d286:	12 c0       	rjmp	.+36     	; 0x1d2ac <__fixunssfsi+0x46>
   1d288:	b1 30       	cpi	r27, 0x01	; 1
   1d28a:	81 f0       	breq	.+32     	; 0x1d2ac <__fixunssfsi+0x46>
   1d28c:	c3 d0       	rcall	.+390    	; 0x1d414 <__fp_zero>
   1d28e:	b1 e0       	ldi	r27, 0x01	; 1
   1d290:	08 95       	ret
   1d292:	c0 c0       	rjmp	.+384    	; 0x1d414 <__fp_zero>
   1d294:	67 2f       	mov	r22, r23
   1d296:	78 2f       	mov	r23, r24
   1d298:	88 27       	eor	r24, r24
   1d29a:	b8 5f       	subi	r27, 0xF8	; 248
   1d29c:	39 f0       	breq	.+14     	; 0x1d2ac <__fixunssfsi+0x46>
   1d29e:	b9 3f       	cpi	r27, 0xF9	; 249
   1d2a0:	cc f3       	brlt	.-14     	; 0x1d294 <__fixunssfsi+0x2e>
   1d2a2:	86 95       	lsr	r24
   1d2a4:	77 95       	ror	r23
   1d2a6:	67 95       	ror	r22
   1d2a8:	b3 95       	inc	r27
   1d2aa:	d9 f7       	brne	.-10     	; 0x1d2a2 <__fixunssfsi+0x3c>
   1d2ac:	3e f4       	brtc	.+14     	; 0x1d2bc <__fixunssfsi+0x56>
   1d2ae:	90 95       	com	r25
   1d2b0:	80 95       	com	r24
   1d2b2:	70 95       	com	r23
   1d2b4:	61 95       	neg	r22
   1d2b6:	7f 4f       	sbci	r23, 0xFF	; 255
   1d2b8:	8f 4f       	sbci	r24, 0xFF	; 255
   1d2ba:	9f 4f       	sbci	r25, 0xFF	; 255
   1d2bc:	08 95       	ret

0001d2be <__floatunsisf>:
   1d2be:	e8 94       	clt
   1d2c0:	09 c0       	rjmp	.+18     	; 0x1d2d4 <__floatsisf+0x12>

0001d2c2 <__floatsisf>:
   1d2c2:	97 fb       	bst	r25, 7
   1d2c4:	3e f4       	brtc	.+14     	; 0x1d2d4 <__floatsisf+0x12>
   1d2c6:	90 95       	com	r25
   1d2c8:	80 95       	com	r24
   1d2ca:	70 95       	com	r23
   1d2cc:	61 95       	neg	r22
   1d2ce:	7f 4f       	sbci	r23, 0xFF	; 255
   1d2d0:	8f 4f       	sbci	r24, 0xFF	; 255
   1d2d2:	9f 4f       	sbci	r25, 0xFF	; 255
   1d2d4:	99 23       	and	r25, r25
   1d2d6:	a9 f0       	breq	.+42     	; 0x1d302 <__floatsisf+0x40>
   1d2d8:	f9 2f       	mov	r31, r25
   1d2da:	96 e9       	ldi	r25, 0x96	; 150
   1d2dc:	bb 27       	eor	r27, r27
   1d2de:	93 95       	inc	r25
   1d2e0:	f6 95       	lsr	r31
   1d2e2:	87 95       	ror	r24
   1d2e4:	77 95       	ror	r23
   1d2e6:	67 95       	ror	r22
   1d2e8:	b7 95       	ror	r27
   1d2ea:	f1 11       	cpse	r31, r1
   1d2ec:	f8 cf       	rjmp	.-16     	; 0x1d2de <__floatsisf+0x1c>
   1d2ee:	fa f4       	brpl	.+62     	; 0x1d32e <__floatsisf+0x6c>
   1d2f0:	bb 0f       	add	r27, r27
   1d2f2:	11 f4       	brne	.+4      	; 0x1d2f8 <__floatsisf+0x36>
   1d2f4:	60 ff       	sbrs	r22, 0
   1d2f6:	1b c0       	rjmp	.+54     	; 0x1d32e <__floatsisf+0x6c>
   1d2f8:	6f 5f       	subi	r22, 0xFF	; 255
   1d2fa:	7f 4f       	sbci	r23, 0xFF	; 255
   1d2fc:	8f 4f       	sbci	r24, 0xFF	; 255
   1d2fe:	9f 4f       	sbci	r25, 0xFF	; 255
   1d300:	16 c0       	rjmp	.+44     	; 0x1d32e <__floatsisf+0x6c>
   1d302:	88 23       	and	r24, r24
   1d304:	11 f0       	breq	.+4      	; 0x1d30a <__floatsisf+0x48>
   1d306:	96 e9       	ldi	r25, 0x96	; 150
   1d308:	11 c0       	rjmp	.+34     	; 0x1d32c <__floatsisf+0x6a>
   1d30a:	77 23       	and	r23, r23
   1d30c:	21 f0       	breq	.+8      	; 0x1d316 <__floatsisf+0x54>
   1d30e:	9e e8       	ldi	r25, 0x8E	; 142
   1d310:	87 2f       	mov	r24, r23
   1d312:	76 2f       	mov	r23, r22
   1d314:	05 c0       	rjmp	.+10     	; 0x1d320 <__floatsisf+0x5e>
   1d316:	66 23       	and	r22, r22
   1d318:	71 f0       	breq	.+28     	; 0x1d336 <__floatsisf+0x74>
   1d31a:	96 e8       	ldi	r25, 0x86	; 134
   1d31c:	86 2f       	mov	r24, r22
   1d31e:	70 e0       	ldi	r23, 0x00	; 0
   1d320:	60 e0       	ldi	r22, 0x00	; 0
   1d322:	2a f0       	brmi	.+10     	; 0x1d32e <__floatsisf+0x6c>
   1d324:	9a 95       	dec	r25
   1d326:	66 0f       	add	r22, r22
   1d328:	77 1f       	adc	r23, r23
   1d32a:	88 1f       	adc	r24, r24
   1d32c:	da f7       	brpl	.-10     	; 0x1d324 <__floatsisf+0x62>
   1d32e:	88 0f       	add	r24, r24
   1d330:	96 95       	lsr	r25
   1d332:	87 95       	ror	r24
   1d334:	97 f9       	bld	r25, 7
   1d336:	08 95       	ret

0001d338 <__fp_cmp>:
   1d338:	99 0f       	add	r25, r25
   1d33a:	00 08       	sbc	r0, r0
   1d33c:	55 0f       	add	r21, r21
   1d33e:	aa 0b       	sbc	r26, r26
   1d340:	e0 e8       	ldi	r30, 0x80	; 128
   1d342:	fe ef       	ldi	r31, 0xFE	; 254
   1d344:	16 16       	cp	r1, r22
   1d346:	17 06       	cpc	r1, r23
   1d348:	e8 07       	cpc	r30, r24
   1d34a:	f9 07       	cpc	r31, r25
   1d34c:	c0 f0       	brcs	.+48     	; 0x1d37e <__fp_cmp+0x46>
   1d34e:	12 16       	cp	r1, r18
   1d350:	13 06       	cpc	r1, r19
   1d352:	e4 07       	cpc	r30, r20
   1d354:	f5 07       	cpc	r31, r21
   1d356:	98 f0       	brcs	.+38     	; 0x1d37e <__fp_cmp+0x46>
   1d358:	62 1b       	sub	r22, r18
   1d35a:	73 0b       	sbc	r23, r19
   1d35c:	84 0b       	sbc	r24, r20
   1d35e:	95 0b       	sbc	r25, r21
MEMSPACE
static
void deselect (void)
{
    CS_HIGH();
    xchg_spi(0xFF);   /*< Dummy clock (force DO hi-z for multiple slave SPI) */
   1d360:	39 f4       	brne	.+14     	; 0x1d370 <__fp_cmp+0x38>
    xchg_spi(0xFF);   /*< Dummy clock (force DO hi-z for multiple slave SPI) */
   1d362:	0a 26       	eor	r0, r26
   1d364:	61 f0       	breq	.+24     	; 0x1d37e <__fp_cmp+0x46>
   1d366:	23 2b       	or	r18, r19
   1d368:	24 2b       	or	r18, r20
   1d36a:	25 2b       	or	r18, r21
   1d36c:	21 f4       	brne	.+8      	; 0x1d376 <__fp_cmp+0x3e>
   1d36e:	08 95       	ret
   1d370:	0a 26       	eor	r0, r26
   1d372:	09 f4       	brne	.+2      	; 0x1d376 <__fp_cmp+0x3e>
   1d374:	a1 40       	sbci	r26, 0x01	; 1
   1d376:	a6 95       	lsr	r26
   1d378:	8f ef       	ldi	r24, 0xFF	; 255
   1d37a:	81 1d       	adc	r24, r1
   1d37c:	81 1d       	adc	r24, r1
   1d37e:	08 95       	ret

0001d380 <__fp_inf>:
   1d380:	97 f9       	bld	r25, 7
   1d382:	9f 67       	ori	r25, 0x7F	; 127
   1d384:	80 e8       	ldi	r24, 0x80	; 128
   1d386:	70 e0       	ldi	r23, 0x00	; 0
   1d388:	60 e0       	ldi	r22, 0x00	; 0
   1d38a:	08 95       	ret

0001d38c <__fp_nan>:
   1d38c:	9f ef       	ldi	r25, 0xFF	; 255
   1d38e:	80 ec       	ldi	r24, 0xC0	; 192
   1d390:	08 95       	ret

0001d392 <__fp_pscA>:
   1d392:	00 24       	eor	r0, r0
   1d394:	0a 94       	dec	r0
   1d396:	16 16       	cp	r1, r22
   1d398:	17 06       	cpc	r1, r23
   1d39a:	18 06       	cpc	r1, r24
   1d39c:	09 06       	cpc	r0, r25
   1d39e:	08 95       	ret

0001d3a0 <__fp_pscB>:
   1d3a0:	00 24       	eor	r0, r0
   1d3a2:	0a 94       	dec	r0
   1d3a4:	12 16       	cp	r1, r18
   1d3a6:	13 06       	cpc	r1, r19
   1d3a8:	14 06       	cpc	r1, r20
   1d3aa:	05 06       	cpc	r0, r21
   1d3ac:	08 95       	ret

0001d3ae <__fp_round>:
   1d3ae:	09 2e       	mov	r0, r25
   1d3b0:	03 94       	inc	r0
   1d3b2:	00 0c       	add	r0, r0
   1d3b4:	11 f4       	brne	.+4      	; 0x1d3ba <__fp_round+0xc>
   1d3b6:	88 23       	and	r24, r24
   1d3b8:	52 f0       	brmi	.+20     	; 0x1d3ce <__fp_round+0x20>
   1d3ba:	bb 0f       	add	r27, r27
   1d3bc:	40 f4       	brcc	.+16     	; 0x1d3ce <__fp_round+0x20>
   1d3be:	bf 2b       	or	r27, r31
   1d3c0:	11 f4       	brne	.+4      	; 0x1d3c6 <__fp_round+0x18>
   1d3c2:	60 ff       	sbrs	r22, 0
   1d3c4:	04 c0       	rjmp	.+8      	; 0x1d3ce <__fp_round+0x20>
   1d3c6:	6f 5f       	subi	r22, 0xFF	; 255
   1d3c8:	7f 4f       	sbci	r23, 0xFF	; 255
   1d3ca:	8f 4f       	sbci	r24, 0xFF	; 255
   1d3cc:	9f 4f       	sbci	r25, 0xFF	; 255
   1d3ce:	08 95       	ret

0001d3d0 <__fp_split3>:
   1d3d0:	57 fd       	sbrc	r21, 7
   1d3d2:	90 58       	subi	r25, 0x80	; 128
   1d3d4:	44 0f       	add	r20, r20
   1d3d6:	55 1f       	adc	r21, r21
   1d3d8:	59 f0       	breq	.+22     	; 0x1d3f0 <__fp_splitA+0x10>
   1d3da:	5f 3f       	cpi	r21, 0xFF	; 255
   1d3dc:	71 f0       	breq	.+28     	; 0x1d3fa <__fp_splitA+0x1a>
   1d3de:	47 95       	ror	r20

0001d3e0 <__fp_splitA>:
   1d3e0:	88 0f       	add	r24, r24
   1d3e2:	97 fb       	bst	r25, 7
   1d3e4:	99 1f       	adc	r25, r25
   1d3e6:	61 f0       	breq	.+24     	; 0x1d400 <__fp_splitA+0x20>
   1d3e8:	9f 3f       	cpi	r25, 0xFF	; 255
   1d3ea:	79 f0       	breq	.+30     	; 0x1d40a <__fp_splitA+0x2a>
   1d3ec:	87 95       	ror	r24
   1d3ee:	08 95       	ret
   1d3f0:	12 16       	cp	r1, r18
   1d3f2:	13 06       	cpc	r1, r19
   1d3f4:	14 06       	cpc	r1, r20
   1d3f6:	55 1f       	adc	r21, r21
   1d3f8:	f2 cf       	rjmp	.-28     	; 0x1d3de <__fp_split3+0xe>
   1d3fa:	46 95       	lsr	r20
   1d3fc:	f1 df       	rcall	.-30     	; 0x1d3e0 <__fp_splitA>
   1d3fe:	08 c0       	rjmp	.+16     	; 0x1d410 <__fp_splitA+0x30>
   1d400:	16 16       	cp	r1, r22
   1d402:	17 06       	cpc	r1, r23
   1d404:	18 06       	cpc	r1, r24
   1d406:	99 1f       	adc	r25, r25
   1d408:	f1 cf       	rjmp	.-30     	; 0x1d3ec <__fp_splitA+0xc>
   1d40a:	86 95       	lsr	r24
   1d40c:	71 05       	cpc	r23, r1
   1d40e:	61 05       	cpc	r22, r1
   1d410:	08 94       	sec
   1d412:	08 95       	ret

0001d414 <__fp_zero>:
   1d414:	e8 94       	clt

0001d416 <__fp_szero>:
   1d416:	bb 27       	eor	r27, r27
   1d418:	66 27       	eor	r22, r22
   1d41a:	77 27       	eor	r23, r23
   1d41c:	cb 01       	movw	r24, r22
   1d41e:	97 f9       	bld	r25, 7
   1d420:	08 95       	ret

0001d422 <__gesf2>:
   1d422:	8a df       	rcall	.-236    	; 0x1d338 <__fp_cmp>
   1d424:	08 f4       	brcc	.+2      	; 0x1d428 <__gesf2+0x6>
   1d426:	8f ef       	ldi	r24, 0xFF	; 255
   1d428:	08 95       	ret

0001d42a <__mulsf3>:
   1d42a:	0b d0       	rcall	.+22     	; 0x1d442 <__mulsf3x>
   1d42c:	c0 cf       	rjmp	.-128    	; 0x1d3ae <__fp_round>
   1d42e:	b1 df       	rcall	.-158    	; 0x1d392 <__fp_pscA>
   1d430:	28 f0       	brcs	.+10     	; 0x1d43c <__mulsf3+0x12>
   1d432:	b6 df       	rcall	.-148    	; 0x1d3a0 <__fp_pscB>
   1d434:	18 f0       	brcs	.+6      	; 0x1d43c <__mulsf3+0x12>
   1d436:	95 23       	and	r25, r21
   1d438:	09 f0       	breq	.+2      	; 0x1d43c <__mulsf3+0x12>
   1d43a:	a2 cf       	rjmp	.-188    	; 0x1d380 <__fp_inf>
   1d43c:	a7 cf       	rjmp	.-178    	; 0x1d38c <__fp_nan>
   1d43e:	11 24       	eor	r1, r1
   1d440:	ea cf       	rjmp	.-44     	; 0x1d416 <__fp_szero>

0001d442 <__mulsf3x>:
   1d442:	c6 df       	rcall	.-116    	; 0x1d3d0 <__fp_split3>
   1d444:	a0 f3       	brcs	.-24     	; 0x1d42e <__mulsf3+0x4>

0001d446 <__mulsf3_pse>:
   1d446:	95 9f       	mul	r25, r21
   1d448:	d1 f3       	breq	.-12     	; 0x1d43e <__mulsf3+0x14>
   1d44a:	95 0f       	add	r25, r21
   1d44c:	50 e0       	ldi	r21, 0x00	; 0
   1d44e:	55 1f       	adc	r21, r21
   1d450:	62 9f       	mul	r22, r18
   1d452:	f0 01       	movw	r30, r0
   1d454:	72 9f       	mul	r23, r18
   1d456:	bb 27       	eor	r27, r27
   1d458:	f0 0d       	add	r31, r0
   1d45a:	b1 1d       	adc	r27, r1
   1d45c:	63 9f       	mul	r22, r19
   1d45e:	aa 27       	eor	r26, r26
   1d460:	f0 0d       	add	r31, r0
   1d462:	b1 1d       	adc	r27, r1
   1d464:	aa 1f       	adc	r26, r26
   1d466:	64 9f       	mul	r22, r20
   1d468:	66 27       	eor	r22, r22
   1d46a:	b0 0d       	add	r27, r0
   1d46c:	a1 1d       	adc	r26, r1
   1d46e:	66 1f       	adc	r22, r22
   1d470:	82 9f       	mul	r24, r18
   1d472:	22 27       	eor	r18, r18
   1d474:	b0 0d       	add	r27, r0
   1d476:	a1 1d       	adc	r26, r1
   1d478:	62 1f       	adc	r22, r18
   1d47a:	73 9f       	mul	r23, r19
   1d47c:	b0 0d       	add	r27, r0
   1d47e:	a1 1d       	adc	r26, r1
   1d480:	62 1f       	adc	r22, r18
   1d482:	83 9f       	mul	r24, r19
   1d484:	a0 0d       	add	r26, r0
   1d486:	61 1d       	adc	r22, r1
   1d488:	22 1f       	adc	r18, r18
   1d48a:	74 9f       	mul	r23, r20
   1d48c:	33 27       	eor	r19, r19
   1d48e:	a0 0d       	add	r26, r0
   1d490:	61 1d       	adc	r22, r1
   1d492:	23 1f       	adc	r18, r19
   1d494:	84 9f       	mul	r24, r20
   1d496:	60 0d       	add	r22, r0
   1d498:	21 1d       	adc	r18, r1
   1d49a:	82 2f       	mov	r24, r18
   1d49c:	76 2f       	mov	r23, r22
   1d49e:	6a 2f       	mov	r22, r26
   1d4a0:	11 24       	eor	r1, r1
   1d4a2:	9f 57       	subi	r25, 0x7F	; 127
   1d4a4:	50 40       	sbci	r21, 0x00	; 0
   1d4a6:	8a f0       	brmi	.+34     	; 0x1d4ca <__mulsf3_pse+0x84>
   1d4a8:	e1 f0       	breq	.+56     	; 0x1d4e2 <__mulsf3_pse+0x9c>
   1d4aa:	88 23       	and	r24, r24
   1d4ac:	4a f0       	brmi	.+18     	; 0x1d4c0 <__mulsf3_pse+0x7a>
   1d4ae:	ee 0f       	add	r30, r30
   1d4b0:	ff 1f       	adc	r31, r31
   1d4b2:	bb 1f       	adc	r27, r27
   1d4b4:	66 1f       	adc	r22, r22
   1d4b6:	77 1f       	adc	r23, r23
   1d4b8:	88 1f       	adc	r24, r24
   1d4ba:	91 50       	subi	r25, 0x01	; 1
   1d4bc:	50 40       	sbci	r21, 0x00	; 0
   1d4be:	a9 f7       	brne	.-22     	; 0x1d4aa <__mulsf3_pse+0x64>
   1d4c0:	9e 3f       	cpi	r25, 0xFE	; 254
   1d4c2:	51 05       	cpc	r21, r1
   1d4c4:	70 f0       	brcs	.+28     	; 0x1d4e2 <__mulsf3_pse+0x9c>
   1d4c6:	5c cf       	rjmp	.-328    	; 0x1d380 <__fp_inf>
   1d4c8:	a6 cf       	rjmp	.-180    	; 0x1d416 <__fp_szero>
   1d4ca:	5f 3f       	cpi	r21, 0xFF	; 255
   1d4cc:	ec f3       	brlt	.-6      	; 0x1d4c8 <__mulsf3_pse+0x82>
   1d4ce:	98 3e       	cpi	r25, 0xE8	; 232
   1d4d0:	dc f3       	brlt	.-10     	; 0x1d4c8 <__mulsf3_pse+0x82>
   1d4d2:	86 95       	lsr	r24
   1d4d4:	77 95       	ror	r23
   1d4d6:	67 95       	ror	r22
   1d4d8:	b7 95       	ror	r27
   1d4da:	f7 95       	ror	r31
   1d4dc:	e7 95       	ror	r30
   1d4de:	9f 5f       	subi	r25, 0xFF	; 255
   1d4e0:	c1 f7       	brne	.-16     	; 0x1d4d2 <__mulsf3_pse+0x8c>
   1d4e2:	fe 2b       	or	r31, r30
   1d4e4:	88 0f       	add	r24, r24
   1d4e6:	91 1d       	adc	r25, r1
   1d4e8:	96 95       	lsr	r25
   1d4ea:	87 95       	ror	r24
   1d4ec:	97 f9       	bld	r25, 7
   1d4ee:	08 95       	ret

0001d4f0 <round>:
   1d4f0:	77 df       	rcall	.-274    	; 0x1d3e0 <__fp_splitA>
   1d4f2:	e0 f0       	brcs	.+56     	; 0x1d52c <round+0x3c>
   1d4f4:	9e 37       	cpi	r25, 0x7E	; 126
   1d4f6:	d8 f0       	brcs	.+54     	; 0x1d52e <round+0x3e>
   1d4f8:	96 39       	cpi	r25, 0x96	; 150
   1d4fa:	b8 f4       	brcc	.+46     	; 0x1d52a <round+0x3a>
   1d4fc:	9e 38       	cpi	r25, 0x8E	; 142
   1d4fe:	48 f4       	brcc	.+18     	; 0x1d512 <round+0x22>
   1d500:	67 2f       	mov	r22, r23
   1d502:	78 2f       	mov	r23, r24
   1d504:	88 27       	eor	r24, r24
   1d506:	98 5f       	subi	r25, 0xF8	; 248
   1d508:	f9 cf       	rjmp	.-14     	; 0x1d4fc <round+0xc>
   1d50a:	86 95       	lsr	r24
   1d50c:	77 95       	ror	r23
   1d50e:	67 95       	ror	r22
   1d510:	93 95       	inc	r25
   1d512:	95 39       	cpi	r25, 0x95	; 149
   1d514:	d0 f3       	brcs	.-12     	; 0x1d50a <round+0x1a>
   1d516:	b6 2f       	mov	r27, r22
   1d518:	b1 70       	andi	r27, 0x01	; 1
   1d51a:	6b 0f       	add	r22, r27
   1d51c:	71 1d       	adc	r23, r1
   1d51e:	81 1d       	adc	r24, r1
   1d520:	20 f4       	brcc	.+8      	; 0x1d52a <round+0x3a>
   1d522:	87 95       	ror	r24
   1d524:	77 95       	ror	r23
   1d526:	67 95       	ror	r22
   1d528:	93 95       	inc	r25
   1d52a:	02 c0       	rjmp	.+4      	; 0x1d530 <__fp_mintl>
   1d52c:	1c c0       	rjmp	.+56     	; 0x1d566 <__fp_mpack>
   1d52e:	73 cf       	rjmp	.-282    	; 0x1d416 <__fp_szero>

0001d530 <__fp_mintl>:
   1d530:	88 23       	and	r24, r24
   1d532:	71 f4       	brne	.+28     	; 0x1d550 <__fp_mintl+0x20>
   1d534:	77 23       	and	r23, r23
   1d536:	21 f0       	breq	.+8      	; 0x1d540 <__fp_mintl+0x10>
   1d538:	98 50       	subi	r25, 0x08	; 8
   1d53a:	87 2b       	or	r24, r23
   1d53c:	76 2f       	mov	r23, r22
   1d53e:	07 c0       	rjmp	.+14     	; 0x1d54e <__fp_mintl+0x1e>
   1d540:	66 23       	and	r22, r22
   1d542:	11 f4       	brne	.+4      	; 0x1d548 <__fp_mintl+0x18>
   1d544:	99 27       	eor	r25, r25
   1d546:	0d c0       	rjmp	.+26     	; 0x1d562 <__fp_mintl+0x32>
   1d548:	90 51       	subi	r25, 0x10	; 16
   1d54a:	86 2b       	or	r24, r22
   1d54c:	70 e0       	ldi	r23, 0x00	; 0
   1d54e:	60 e0       	ldi	r22, 0x00	; 0
   1d550:	2a f0       	brmi	.+10     	; 0x1d55c <__fp_mintl+0x2c>
   1d552:	9a 95       	dec	r25
   1d554:	66 0f       	add	r22, r22
   1d556:	77 1f       	adc	r23, r23
   1d558:	88 1f       	adc	r24, r24
   1d55a:	da f7       	brpl	.-10     	; 0x1d552 <__fp_mintl+0x22>
   1d55c:	88 0f       	add	r24, r24
   1d55e:	96 95       	lsr	r25
   1d560:	87 95       	ror	r24
   1d562:	97 f9       	bld	r25, 7
   1d564:	08 95       	ret

0001d566 <__fp_mpack>:
   1d566:	9f 3f       	cpi	r25, 0xFF	; 255
   1d568:	31 f0       	breq	.+12     	; 0x1d576 <__fp_mpack_finite+0xc>

0001d56a <__fp_mpack_finite>:
   1d56a:	91 50       	subi	r25, 0x01	; 1
   1d56c:	20 f4       	brcc	.+8      	; 0x1d576 <__fp_mpack_finite+0xc>
   1d56e:	87 95       	ror	r24
   1d570:	77 95       	ror	r23
   1d572:	67 95       	ror	r22
   1d574:	b7 95       	ror	r27
   1d576:	88 0f       	add	r24, r24
   1d578:	91 1d       	adc	r25, r1
   1d57a:	96 95       	lsr	r25
   1d57c:	87 95       	ror	r24
   1d57e:	97 f9       	bld	r25, 7
   1d580:	08 95       	ret

0001d582 <calloc>:
   1d582:	0f 93       	push	r16
   1d584:	1f 93       	push	r17
   1d586:	cf 93       	push	r28
   1d588:	df 93       	push	r29
   1d58a:	86 9f       	mul	r24, r22
   1d58c:	80 01       	movw	r16, r0
   1d58e:	87 9f       	mul	r24, r23
   1d590:	10 0d       	add	r17, r0
   1d592:	96 9f       	mul	r25, r22
   1d594:	10 0d       	add	r17, r0
   1d596:	11 24       	eor	r1, r1
   1d598:	c8 01       	movw	r24, r16
   1d59a:	0d d0       	rcall	.+26     	; 0x1d5b6 <malloc>
   1d59c:	ec 01       	movw	r28, r24
   1d59e:	00 97       	sbiw	r24, 0x00	; 0
   1d5a0:	21 f0       	breq	.+8      	; 0x1d5aa <calloc+0x28>
   1d5a2:	a8 01       	movw	r20, r16
   1d5a4:	60 e0       	ldi	r22, 0x00	; 0
   1d5a6:	70 e0       	ldi	r23, 0x00	; 0
   1d5a8:	0a d2       	rcall	.+1044   	; 0x1d9be <memset>
   1d5aa:	ce 01       	movw	r24, r28
   1d5ac:	df 91       	pop	r29
   1d5ae:	cf 91       	pop	r28
   1d5b0:	1f 91       	pop	r17
   1d5b2:	0f 91       	pop	r16
   1d5b4:	08 95       	ret

0001d5b6 <malloc>:
   1d5b6:	0f 93       	push	r16
   1d5b8:	1f 93       	push	r17
   1d5ba:	cf 93       	push	r28
   1d5bc:	df 93       	push	r29
   1d5be:	82 30       	cpi	r24, 0x02	; 2
   1d5c0:	91 05       	cpc	r25, r1
   1d5c2:	10 f4       	brcc	.+4      	; 0x1d5c8 <malloc+0x12>
   1d5c4:	82 e0       	ldi	r24, 0x02	; 2
   1d5c6:	90 e0       	ldi	r25, 0x00	; 0
   1d5c8:	e0 91 bd 21 	lds	r30, 0x21BD	; 0x8021bd <__flp>
   1d5cc:	f0 91 be 21 	lds	r31, 0x21BE	; 0x8021be <__flp+0x1>
   1d5d0:	20 e0       	ldi	r18, 0x00	; 0
   1d5d2:	30 e0       	ldi	r19, 0x00	; 0
   1d5d4:	a0 e0       	ldi	r26, 0x00	; 0
   1d5d6:	b0 e0       	ldi	r27, 0x00	; 0
   1d5d8:	30 97       	sbiw	r30, 0x00	; 0
   1d5da:	19 f1       	breq	.+70     	; 0x1d622 <malloc+0x6c>
   1d5dc:	40 81       	ld	r20, Z
   1d5de:	51 81       	ldd	r21, Z+1	; 0x01
   1d5e0:	02 81       	ldd	r16, Z+2	; 0x02
   1d5e2:	13 81       	ldd	r17, Z+3	; 0x03
   1d5e4:	48 17       	cp	r20, r24
   1d5e6:	59 07       	cpc	r21, r25
   1d5e8:	c8 f0       	brcs	.+50     	; 0x1d61c <malloc+0x66>
   1d5ea:	84 17       	cp	r24, r20
   1d5ec:	95 07       	cpc	r25, r21
   1d5ee:	69 f4       	brne	.+26     	; 0x1d60a <malloc+0x54>
   1d5f0:	10 97       	sbiw	r26, 0x00	; 0
   1d5f2:	31 f0       	breq	.+12     	; 0x1d600 <malloc+0x4a>
   1d5f4:	12 96       	adiw	r26, 0x02	; 2
   1d5f6:	0c 93       	st	X, r16
   1d5f8:	12 97       	sbiw	r26, 0x02	; 2
   1d5fa:	13 96       	adiw	r26, 0x03	; 3
   1d5fc:	1c 93       	st	X, r17
   1d5fe:	27 c0       	rjmp	.+78     	; 0x1d64e <malloc+0x98>
   1d600:	00 93 bd 21 	sts	0x21BD, r16	; 0x8021bd <__flp>
   1d604:	10 93 be 21 	sts	0x21BE, r17	; 0x8021be <__flp+0x1>
   1d608:	22 c0       	rjmp	.+68     	; 0x1d64e <malloc+0x98>
   1d60a:	21 15       	cp	r18, r1
   1d60c:	31 05       	cpc	r19, r1
   1d60e:	19 f0       	breq	.+6      	; 0x1d616 <malloc+0x60>
   1d610:	42 17       	cp	r20, r18
   1d612:	53 07       	cpc	r21, r19
   1d614:	18 f4       	brcc	.+6      	; 0x1d61c <malloc+0x66>
   1d616:	9a 01       	movw	r18, r20
   1d618:	bd 01       	movw	r22, r26
   1d61a:	ef 01       	movw	r28, r30
   1d61c:	df 01       	movw	r26, r30
   1d61e:	f8 01       	movw	r30, r16
   1d620:	db cf       	rjmp	.-74     	; 0x1d5d8 <malloc+0x22>
   1d622:	21 15       	cp	r18, r1
   1d624:	31 05       	cpc	r19, r1
   1d626:	f9 f0       	breq	.+62     	; 0x1d666 <malloc+0xb0>
   1d628:	28 1b       	sub	r18, r24
   1d62a:	39 0b       	sbc	r19, r25
   1d62c:	24 30       	cpi	r18, 0x04	; 4
   1d62e:	31 05       	cpc	r19, r1
   1d630:	80 f4       	brcc	.+32     	; 0x1d652 <malloc+0x9c>
   1d632:	8a 81       	ldd	r24, Y+2	; 0x02
   1d634:	9b 81       	ldd	r25, Y+3	; 0x03
   1d636:	61 15       	cp	r22, r1
   1d638:	71 05       	cpc	r23, r1
   1d63a:	21 f0       	breq	.+8      	; 0x1d644 <malloc+0x8e>
   1d63c:	fb 01       	movw	r30, r22
   1d63e:	93 83       	std	Z+3, r25	; 0x03
   1d640:	82 83       	std	Z+2, r24	; 0x02
   1d642:	04 c0       	rjmp	.+8      	; 0x1d64c <malloc+0x96>
   1d644:	90 93 be 21 	sts	0x21BE, r25	; 0x8021be <__flp+0x1>
   1d648:	80 93 bd 21 	sts	0x21BD, r24	; 0x8021bd <__flp>
   1d64c:	fe 01       	movw	r30, r28
   1d64e:	32 96       	adiw	r30, 0x02	; 2
   1d650:	44 c0       	rjmp	.+136    	; 0x1d6da <malloc+0x124>
   1d652:	fe 01       	movw	r30, r28
   1d654:	e2 0f       	add	r30, r18
   1d656:	f3 1f       	adc	r31, r19
   1d658:	81 93       	st	Z+, r24
   1d65a:	91 93       	st	Z+, r25
   1d65c:	22 50       	subi	r18, 0x02	; 2
   1d65e:	31 09       	sbc	r19, r1
   1d660:	39 83       	std	Y+1, r19	; 0x01
   1d662:	28 83       	st	Y, r18
   1d664:	3a c0       	rjmp	.+116    	; 0x1d6da <malloc+0x124>
   1d666:	20 91 bb 21 	lds	r18, 0x21BB	; 0x8021bb <__brkval>
   1d66a:	30 91 bc 21 	lds	r19, 0x21BC	; 0x8021bc <__brkval+0x1>
   1d66e:	23 2b       	or	r18, r19
   1d670:	41 f4       	brne	.+16     	; 0x1d682 <malloc+0xcc>
   1d672:	20 91 57 02 	lds	r18, 0x0257	; 0x800257 <__malloc_heap_start>
   1d676:	30 91 58 02 	lds	r19, 0x0258	; 0x800258 <__malloc_heap_start+0x1>
   1d67a:	30 93 bc 21 	sts	0x21BC, r19	; 0x8021bc <__brkval+0x1>
   1d67e:	20 93 bb 21 	sts	0x21BB, r18	; 0x8021bb <__brkval>
   1d682:	20 91 55 02 	lds	r18, 0x0255	; 0x800255 <__malloc_heap_end>
   1d686:	30 91 56 02 	lds	r19, 0x0256	; 0x800256 <__malloc_heap_end+0x1>
   1d68a:	21 15       	cp	r18, r1
   1d68c:	31 05       	cpc	r19, r1
   1d68e:	41 f4       	brne	.+16     	; 0x1d6a0 <malloc+0xea>
   1d690:	2d b7       	in	r18, 0x3d	; 61
   1d692:	3e b7       	in	r19, 0x3e	; 62
   1d694:	40 91 59 02 	lds	r20, 0x0259	; 0x800259 <__malloc_margin>
   1d698:	50 91 5a 02 	lds	r21, 0x025A	; 0x80025a <__malloc_margin+0x1>
   1d69c:	24 1b       	sub	r18, r20
   1d69e:	35 0b       	sbc	r19, r21
   1d6a0:	e0 91 bb 21 	lds	r30, 0x21BB	; 0x8021bb <__brkval>
   1d6a4:	f0 91 bc 21 	lds	r31, 0x21BC	; 0x8021bc <__brkval+0x1>
   1d6a8:	e2 17       	cp	r30, r18
   1d6aa:	f3 07       	cpc	r31, r19
   1d6ac:	a0 f4       	brcc	.+40     	; 0x1d6d6 <malloc+0x120>
   1d6ae:	2e 1b       	sub	r18, r30
   1d6b0:	3f 0b       	sbc	r19, r31
   1d6b2:	28 17       	cp	r18, r24
   1d6b4:	39 07       	cpc	r19, r25
   1d6b6:	78 f0       	brcs	.+30     	; 0x1d6d6 <malloc+0x120>
   1d6b8:	ac 01       	movw	r20, r24
   1d6ba:	4e 5f       	subi	r20, 0xFE	; 254
   1d6bc:	5f 4f       	sbci	r21, 0xFF	; 255
   1d6be:	24 17       	cp	r18, r20
   1d6c0:	35 07       	cpc	r19, r21
   1d6c2:	48 f0       	brcs	.+18     	; 0x1d6d6 <malloc+0x120>
   1d6c4:	4e 0f       	add	r20, r30
   1d6c6:	5f 1f       	adc	r21, r31
   1d6c8:	50 93 bc 21 	sts	0x21BC, r21	; 0x8021bc <__brkval+0x1>
   1d6cc:	40 93 bb 21 	sts	0x21BB, r20	; 0x8021bb <__brkval>
   1d6d0:	81 93       	st	Z+, r24
   1d6d2:	91 93       	st	Z+, r25
   1d6d4:	02 c0       	rjmp	.+4      	; 0x1d6da <malloc+0x124>
   1d6d6:	e0 e0       	ldi	r30, 0x00	; 0
   1d6d8:	f0 e0       	ldi	r31, 0x00	; 0
   1d6da:	cf 01       	movw	r24, r30
   1d6dc:	df 91       	pop	r29
   1d6de:	cf 91       	pop	r28
   1d6e0:	1f 91       	pop	r17
   1d6e2:	0f 91       	pop	r16
   1d6e4:	08 95       	ret

0001d6e6 <free>:
   1d6e6:	cf 93       	push	r28
   1d6e8:	df 93       	push	r29
   1d6ea:	00 97       	sbiw	r24, 0x00	; 0
   1d6ec:	09 f4       	brne	.+2      	; 0x1d6f0 <free+0xa>
   1d6ee:	81 c0       	rjmp	.+258    	; 0x1d7f2 <free+0x10c>
   1d6f0:	fc 01       	movw	r30, r24
   1d6f2:	32 97       	sbiw	r30, 0x02	; 2
   1d6f4:	13 82       	std	Z+3, r1	; 0x03
   1d6f6:	12 82       	std	Z+2, r1	; 0x02
   1d6f8:	a0 91 bd 21 	lds	r26, 0x21BD	; 0x8021bd <__flp>
   1d6fc:	b0 91 be 21 	lds	r27, 0x21BE	; 0x8021be <__flp+0x1>
   1d700:	10 97       	sbiw	r26, 0x00	; 0
   1d702:	81 f4       	brne	.+32     	; 0x1d724 <free+0x3e>
   1d704:	20 81       	ld	r18, Z
   1d706:	31 81       	ldd	r19, Z+1	; 0x01
   1d708:	82 0f       	add	r24, r18
   1d70a:	93 1f       	adc	r25, r19
   1d70c:	20 91 bb 21 	lds	r18, 0x21BB	; 0x8021bb <__brkval>
   1d710:	30 91 bc 21 	lds	r19, 0x21BC	; 0x8021bc <__brkval+0x1>
   1d714:	28 17       	cp	r18, r24
   1d716:	39 07       	cpc	r19, r25
   1d718:	51 f5       	brne	.+84     	; 0x1d76e <free+0x88>
   1d71a:	f0 93 bc 21 	sts	0x21BC, r31	; 0x8021bc <__brkval+0x1>
   1d71e:	e0 93 bb 21 	sts	0x21BB, r30	; 0x8021bb <__brkval>
   1d722:	67 c0       	rjmp	.+206    	; 0x1d7f2 <free+0x10c>
   1d724:	ed 01       	movw	r28, r26
   1d726:	20 e0       	ldi	r18, 0x00	; 0
   1d728:	30 e0       	ldi	r19, 0x00	; 0
   1d72a:	ce 17       	cp	r28, r30
   1d72c:	df 07       	cpc	r29, r31
   1d72e:	40 f4       	brcc	.+16     	; 0x1d740 <free+0x5a>
   1d730:	4a 81       	ldd	r20, Y+2	; 0x02
   1d732:	5b 81       	ldd	r21, Y+3	; 0x03
   1d734:	9e 01       	movw	r18, r28
   1d736:	41 15       	cp	r20, r1
   1d738:	51 05       	cpc	r21, r1
   1d73a:	f1 f0       	breq	.+60     	; 0x1d778 <free+0x92>
   1d73c:	ea 01       	movw	r28, r20
   1d73e:	f5 cf       	rjmp	.-22     	; 0x1d72a <free+0x44>
   1d740:	d3 83       	std	Z+3, r29	; 0x03
   1d742:	c2 83       	std	Z+2, r28	; 0x02
   1d744:	40 81       	ld	r20, Z
   1d746:	51 81       	ldd	r21, Z+1	; 0x01
   1d748:	84 0f       	add	r24, r20
   1d74a:	95 1f       	adc	r25, r21
   1d74c:	c8 17       	cp	r28, r24
   1d74e:	d9 07       	cpc	r29, r25
   1d750:	59 f4       	brne	.+22     	; 0x1d768 <free+0x82>
   1d752:	88 81       	ld	r24, Y
   1d754:	99 81       	ldd	r25, Y+1	; 0x01
   1d756:	84 0f       	add	r24, r20
   1d758:	95 1f       	adc	r25, r21
   1d75a:	02 96       	adiw	r24, 0x02	; 2
   1d75c:	91 83       	std	Z+1, r25	; 0x01
   1d75e:	80 83       	st	Z, r24
   1d760:	8a 81       	ldd	r24, Y+2	; 0x02
   1d762:	9b 81       	ldd	r25, Y+3	; 0x03
   1d764:	93 83       	std	Z+3, r25	; 0x03
   1d766:	82 83       	std	Z+2, r24	; 0x02
   1d768:	21 15       	cp	r18, r1
   1d76a:	31 05       	cpc	r19, r1
   1d76c:	29 f4       	brne	.+10     	; 0x1d778 <free+0x92>
   1d76e:	f0 93 be 21 	sts	0x21BE, r31	; 0x8021be <__flp+0x1>
   1d772:	e0 93 bd 21 	sts	0x21BD, r30	; 0x8021bd <__flp>
   1d776:	3d c0       	rjmp	.+122    	; 0x1d7f2 <free+0x10c>
   1d778:	e9 01       	movw	r28, r18
   1d77a:	fb 83       	std	Y+3, r31	; 0x03
   1d77c:	ea 83       	std	Y+2, r30	; 0x02
   1d77e:	49 91       	ld	r20, Y+
   1d780:	59 91       	ld	r21, Y+
   1d782:	c4 0f       	add	r28, r20
   1d784:	d5 1f       	adc	r29, r21
   1d786:	ec 17       	cp	r30, r28
   1d788:	fd 07       	cpc	r31, r29
   1d78a:	61 f4       	brne	.+24     	; 0x1d7a4 <free+0xbe>
   1d78c:	80 81       	ld	r24, Z
   1d78e:	91 81       	ldd	r25, Z+1	; 0x01
   1d790:	84 0f       	add	r24, r20
   1d792:	95 1f       	adc	r25, r21
   1d794:	02 96       	adiw	r24, 0x02	; 2
   1d796:	e9 01       	movw	r28, r18
   1d798:	99 83       	std	Y+1, r25	; 0x01
   1d79a:	88 83       	st	Y, r24
   1d79c:	82 81       	ldd	r24, Z+2	; 0x02
   1d79e:	93 81       	ldd	r25, Z+3	; 0x03
   1d7a0:	9b 83       	std	Y+3, r25	; 0x03
   1d7a2:	8a 83       	std	Y+2, r24	; 0x02
   1d7a4:	e0 e0       	ldi	r30, 0x00	; 0
   1d7a6:	f0 e0       	ldi	r31, 0x00	; 0
   1d7a8:	12 96       	adiw	r26, 0x02	; 2
   1d7aa:	8d 91       	ld	r24, X+
   1d7ac:	9c 91       	ld	r25, X
   1d7ae:	13 97       	sbiw	r26, 0x03	; 3
   1d7b0:	00 97       	sbiw	r24, 0x00	; 0
   1d7b2:	19 f0       	breq	.+6      	; 0x1d7ba <free+0xd4>
   1d7b4:	fd 01       	movw	r30, r26
   1d7b6:	dc 01       	movw	r26, r24
   1d7b8:	f7 cf       	rjmp	.-18     	; 0x1d7a8 <free+0xc2>
   1d7ba:	8d 91       	ld	r24, X+
   1d7bc:	9c 91       	ld	r25, X
   1d7be:	11 97       	sbiw	r26, 0x01	; 1
   1d7c0:	9d 01       	movw	r18, r26
   1d7c2:	2e 5f       	subi	r18, 0xFE	; 254
   1d7c4:	3f 4f       	sbci	r19, 0xFF	; 255
   1d7c6:	82 0f       	add	r24, r18
   1d7c8:	93 1f       	adc	r25, r19
   1d7ca:	20 91 bb 21 	lds	r18, 0x21BB	; 0x8021bb <__brkval>
   1d7ce:	30 91 bc 21 	lds	r19, 0x21BC	; 0x8021bc <__brkval+0x1>
   1d7d2:	28 17       	cp	r18, r24
   1d7d4:	39 07       	cpc	r19, r25
   1d7d6:	69 f4       	brne	.+26     	; 0x1d7f2 <free+0x10c>
   1d7d8:	30 97       	sbiw	r30, 0x00	; 0
   1d7da:	29 f4       	brne	.+10     	; 0x1d7e6 <free+0x100>
   1d7dc:	10 92 be 21 	sts	0x21BE, r1	; 0x8021be <__flp+0x1>
   1d7e0:	10 92 bd 21 	sts	0x21BD, r1	; 0x8021bd <__flp>
   1d7e4:	02 c0       	rjmp	.+4      	; 0x1d7ea <free+0x104>
   1d7e6:	13 82       	std	Z+3, r1	; 0x03
   1d7e8:	12 82       	std	Z+2, r1	; 0x02
   1d7ea:	b0 93 bc 21 	sts	0x21BC, r27	; 0x8021bc <__brkval+0x1>
   1d7ee:	a0 93 bb 21 	sts	0x21BB, r26	; 0x8021bb <__brkval>
   1d7f2:	df 91       	pop	r29
   1d7f4:	cf 91       	pop	r28
   1d7f6:	08 95       	ret

0001d7f8 <__ftoa_engine>:
   1d7f8:	28 30       	cpi	r18, 0x08	; 8
   1d7fa:	08 f0       	brcs	.+2      	; 0x1d7fe <__ftoa_engine+0x6>
   1d7fc:	27 e0       	ldi	r18, 0x07	; 7
   1d7fe:	33 27       	eor	r19, r19
   1d800:	da 01       	movw	r26, r20
   1d802:	99 0f       	add	r25, r25
   1d804:	31 1d       	adc	r19, r1
   1d806:	87 fd       	sbrc	r24, 7
   1d808:	91 60       	ori	r25, 0x01	; 1
   1d80a:	00 96       	adiw	r24, 0x00	; 0
   1d80c:	61 05       	cpc	r22, r1
   1d80e:	71 05       	cpc	r23, r1
   1d810:	39 f4       	brne	.+14     	; 0x1d820 <__ftoa_engine+0x28>
   1d812:	32 60       	ori	r19, 0x02	; 2
   1d814:	2e 5f       	subi	r18, 0xFE	; 254
   1d816:	3d 93       	st	X+, r19
   1d818:	30 e3       	ldi	r19, 0x30	; 48
   1d81a:	2a 95       	dec	r18
   1d81c:	e1 f7       	brne	.-8      	; 0x1d816 <__ftoa_engine+0x1e>
   1d81e:	08 95       	ret
   1d820:	9f 3f       	cpi	r25, 0xFF	; 255
   1d822:	30 f0       	brcs	.+12     	; 0x1d830 <__ftoa_engine+0x38>
   1d824:	80 38       	cpi	r24, 0x80	; 128
   1d826:	71 05       	cpc	r23, r1
   1d828:	61 05       	cpc	r22, r1
   1d82a:	09 f0       	breq	.+2      	; 0x1d82e <__ftoa_engine+0x36>
   1d82c:	3c 5f       	subi	r19, 0xFC	; 252
   1d82e:	3c 5f       	subi	r19, 0xFC	; 252
   1d830:	3d 93       	st	X+, r19
   1d832:	91 30       	cpi	r25, 0x01	; 1
   1d834:	08 f0       	brcs	.+2      	; 0x1d838 <__ftoa_engine+0x40>
   1d836:	80 68       	ori	r24, 0x80	; 128
   1d838:	91 1d       	adc	r25, r1
   1d83a:	df 93       	push	r29
   1d83c:	cf 93       	push	r28
   1d83e:	1f 93       	push	r17
   1d840:	0f 93       	push	r16
   1d842:	ff 92       	push	r15
   1d844:	ef 92       	push	r14
   1d846:	19 2f       	mov	r17, r25
   1d848:	98 7f       	andi	r25, 0xF8	; 248
   1d84a:	96 95       	lsr	r25
   1d84c:	e9 2f       	mov	r30, r25
   1d84e:	96 95       	lsr	r25
   1d850:	96 95       	lsr	r25
   1d852:	e9 0f       	add	r30, r25
   1d854:	ff 27       	eor	r31, r31
   1d856:	e8 5c       	subi	r30, 0xC8	; 200
   1d858:	fd 4f       	sbci	r31, 0xFD	; 253
   1d85a:	99 27       	eor	r25, r25
   1d85c:	33 27       	eor	r19, r19
   1d85e:	ee 24       	eor	r14, r14
   1d860:	ff 24       	eor	r15, r15
   1d862:	a7 01       	movw	r20, r14
   1d864:	e7 01       	movw	r28, r14
   1d866:	05 90       	lpm	r0, Z+
   1d868:	08 94       	sec
   1d86a:	07 94       	ror	r0
   1d86c:	28 f4       	brcc	.+10     	; 0x1d878 <__ftoa_engine+0x80>
   1d86e:	36 0f       	add	r19, r22
   1d870:	e7 1e       	adc	r14, r23
   1d872:	f8 1e       	adc	r15, r24
   1d874:	49 1f       	adc	r20, r25
   1d876:	51 1d       	adc	r21, r1
   1d878:	66 0f       	add	r22, r22
   1d87a:	77 1f       	adc	r23, r23
   1d87c:	88 1f       	adc	r24, r24
   1d87e:	99 1f       	adc	r25, r25
   1d880:	06 94       	lsr	r0
   1d882:	a1 f7       	brne	.-24     	; 0x1d86c <__ftoa_engine+0x74>
   1d884:	05 90       	lpm	r0, Z+
   1d886:	07 94       	ror	r0
   1d888:	28 f4       	brcc	.+10     	; 0x1d894 <__ftoa_engine+0x9c>
   1d88a:	e7 0e       	add	r14, r23
   1d88c:	f8 1e       	adc	r15, r24
   1d88e:	49 1f       	adc	r20, r25
   1d890:	56 1f       	adc	r21, r22
   1d892:	c1 1d       	adc	r28, r1
   1d894:	77 0f       	add	r23, r23
   1d896:	88 1f       	adc	r24, r24
   1d898:	99 1f       	adc	r25, r25
   1d89a:	66 1f       	adc	r22, r22
   1d89c:	06 94       	lsr	r0
   1d89e:	a1 f7       	brne	.-24     	; 0x1d888 <__ftoa_engine+0x90>
   1d8a0:	05 90       	lpm	r0, Z+
   1d8a2:	07 94       	ror	r0
   1d8a4:	28 f4       	brcc	.+10     	; 0x1d8b0 <__ftoa_engine+0xb8>
   1d8a6:	f8 0e       	add	r15, r24
   1d8a8:	49 1f       	adc	r20, r25
   1d8aa:	56 1f       	adc	r21, r22
   1d8ac:	c7 1f       	adc	r28, r23
   1d8ae:	d1 1d       	adc	r29, r1
   1d8b0:	88 0f       	add	r24, r24
   1d8b2:	99 1f       	adc	r25, r25
   1d8b4:	66 1f       	adc	r22, r22
   1d8b6:	77 1f       	adc	r23, r23
   1d8b8:	06 94       	lsr	r0
   1d8ba:	a1 f7       	brne	.-24     	; 0x1d8a4 <__ftoa_engine+0xac>
   1d8bc:	05 90       	lpm	r0, Z+
   1d8be:	07 94       	ror	r0
   1d8c0:	20 f4       	brcc	.+8      	; 0x1d8ca <__ftoa_engine+0xd2>
   1d8c2:	49 0f       	add	r20, r25
   1d8c4:	56 1f       	adc	r21, r22
   1d8c6:	c7 1f       	adc	r28, r23
   1d8c8:	d8 1f       	adc	r29, r24
   1d8ca:	99 0f       	add	r25, r25
   1d8cc:	66 1f       	adc	r22, r22
   1d8ce:	77 1f       	adc	r23, r23
   1d8d0:	88 1f       	adc	r24, r24
   1d8d2:	06 94       	lsr	r0
   1d8d4:	a9 f7       	brne	.-22     	; 0x1d8c0 <__ftoa_engine+0xc8>
   1d8d6:	84 91       	lpm	r24, Z
   1d8d8:	10 95       	com	r17
   1d8da:	17 70       	andi	r17, 0x07	; 7
   1d8dc:	41 f0       	breq	.+16     	; 0x1d8ee <__ftoa_engine+0xf6>
   1d8de:	d6 95       	lsr	r29
   1d8e0:	c7 95       	ror	r28
   1d8e2:	57 95       	ror	r21
   1d8e4:	47 95       	ror	r20
   1d8e6:	f7 94       	ror	r15
   1d8e8:	e7 94       	ror	r14
   1d8ea:	1a 95       	dec	r17
   1d8ec:	c1 f7       	brne	.-16     	; 0x1d8de <__ftoa_engine+0xe6>
   1d8ee:	ee ed       	ldi	r30, 0xDE	; 222
   1d8f0:	f1 e0       	ldi	r31, 0x01	; 1
   1d8f2:	68 94       	set
   1d8f4:	15 90       	lpm	r1, Z+
   1d8f6:	15 91       	lpm	r17, Z+
   1d8f8:	35 91       	lpm	r19, Z+
   1d8fa:	65 91       	lpm	r22, Z+
   1d8fc:	95 91       	lpm	r25, Z+
   1d8fe:	05 90       	lpm	r0, Z+
   1d900:	7f e2       	ldi	r23, 0x2F	; 47
   1d902:	73 95       	inc	r23
   1d904:	e1 18       	sub	r14, r1
   1d906:	f1 0a       	sbc	r15, r17
   1d908:	43 0b       	sbc	r20, r19
   1d90a:	56 0b       	sbc	r21, r22
   1d90c:	c9 0b       	sbc	r28, r25
   1d90e:	d0 09       	sbc	r29, r0
   1d910:	c0 f7       	brcc	.-16     	; 0x1d902 <__ftoa_engine+0x10a>
   1d912:	e1 0c       	add	r14, r1
   1d914:	f1 1e       	adc	r15, r17
   1d916:	43 1f       	adc	r20, r19
   1d918:	56 1f       	adc	r21, r22
   1d91a:	c9 1f       	adc	r28, r25
   1d91c:	d0 1d       	adc	r29, r0
   1d91e:	7e f4       	brtc	.+30     	; 0x1d93e <__ftoa_engine+0x146>
   1d920:	70 33       	cpi	r23, 0x30	; 48
   1d922:	11 f4       	brne	.+4      	; 0x1d928 <__ftoa_engine+0x130>
   1d924:	8a 95       	dec	r24
   1d926:	e6 cf       	rjmp	.-52     	; 0x1d8f4 <__ftoa_engine+0xfc>
   1d928:	e8 94       	clt
   1d92a:	01 50       	subi	r16, 0x01	; 1
   1d92c:	30 f0       	brcs	.+12     	; 0x1d93a <__ftoa_engine+0x142>
   1d92e:	08 0f       	add	r16, r24
   1d930:	0a f4       	brpl	.+2      	; 0x1d934 <__ftoa_engine+0x13c>
   1d932:	00 27       	eor	r16, r16
   1d934:	02 17       	cp	r16, r18
   1d936:	08 f4       	brcc	.+2      	; 0x1d93a <__ftoa_engine+0x142>
   1d938:	20 2f       	mov	r18, r16
   1d93a:	23 95       	inc	r18
   1d93c:	02 2f       	mov	r16, r18
   1d93e:	7a 33       	cpi	r23, 0x3A	; 58
   1d940:	28 f0       	brcs	.+10     	; 0x1d94c <__ftoa_engine+0x154>
   1d942:	79 e3       	ldi	r23, 0x39	; 57
   1d944:	7d 93       	st	X+, r23
   1d946:	2a 95       	dec	r18
   1d948:	e9 f7       	brne	.-6      	; 0x1d944 <__ftoa_engine+0x14c>
   1d94a:	10 c0       	rjmp	.+32     	; 0x1d96c <__ftoa_engine+0x174>
   1d94c:	7d 93       	st	X+, r23
   1d94e:	2a 95       	dec	r18
   1d950:	89 f6       	brne	.-94     	; 0x1d8f4 <__ftoa_engine+0xfc>
   1d952:	06 94       	lsr	r0
   1d954:	97 95       	ror	r25
   1d956:	67 95       	ror	r22
   1d958:	37 95       	ror	r19
   1d95a:	17 95       	ror	r17
   1d95c:	17 94       	ror	r1
   1d95e:	e1 18       	sub	r14, r1
   1d960:	f1 0a       	sbc	r15, r17
   1d962:	43 0b       	sbc	r20, r19
   1d964:	56 0b       	sbc	r21, r22
   1d966:	c9 0b       	sbc	r28, r25
   1d968:	d0 09       	sbc	r29, r0
   1d96a:	98 f0       	brcs	.+38     	; 0x1d992 <__ftoa_engine+0x19a>
   1d96c:	23 95       	inc	r18
   1d96e:	7e 91       	ld	r23, -X
   1d970:	73 95       	inc	r23
   1d972:	7a 33       	cpi	r23, 0x3A	; 58
   1d974:	08 f0       	brcs	.+2      	; 0x1d978 <__ftoa_engine+0x180>
   1d976:	70 e3       	ldi	r23, 0x30	; 48
   1d978:	7c 93       	st	X, r23
   1d97a:	20 13       	cpse	r18, r16
   1d97c:	b8 f7       	brcc	.-18     	; 0x1d96c <__ftoa_engine+0x174>
   1d97e:	7e 91       	ld	r23, -X
   1d980:	70 61       	ori	r23, 0x10	; 16
   1d982:	7d 93       	st	X+, r23
   1d984:	30 f0       	brcs	.+12     	; 0x1d992 <__ftoa_engine+0x19a>
   1d986:	83 95       	inc	r24
   1d988:	71 e3       	ldi	r23, 0x31	; 49
   1d98a:	7d 93       	st	X+, r23
   1d98c:	70 e3       	ldi	r23, 0x30	; 48
   1d98e:	2a 95       	dec	r18
   1d990:	e1 f7       	brne	.-8      	; 0x1d98a <__ftoa_engine+0x192>
   1d992:	11 24       	eor	r1, r1
   1d994:	ef 90       	pop	r14
   1d996:	ff 90       	pop	r15
   1d998:	0f 91       	pop	r16
   1d99a:	1f 91       	pop	r17
   1d99c:	cf 91       	pop	r28
   1d99e:	df 91       	pop	r29
   1d9a0:	99 27       	eor	r25, r25
   1d9a2:	87 fd       	sbrc	r24, 7
   1d9a4:	90 95       	com	r25
   1d9a6:	08 95       	ret

0001d9a8 <strnlen_P>:
   1d9a8:	fc 01       	movw	r30, r24
   1d9aa:	05 90       	lpm	r0, Z+
   1d9ac:	61 50       	subi	r22, 0x01	; 1
   1d9ae:	70 40       	sbci	r23, 0x00	; 0
   1d9b0:	01 10       	cpse	r0, r1
   1d9b2:	d8 f7       	brcc	.-10     	; 0x1d9aa <strnlen_P+0x2>
   1d9b4:	80 95       	com	r24
   1d9b6:	90 95       	com	r25
   1d9b8:	8e 0f       	add	r24, r30
   1d9ba:	9f 1f       	adc	r25, r31
   1d9bc:	08 95       	ret

0001d9be <memset>:
   1d9be:	dc 01       	movw	r26, r24
   1d9c0:	01 c0       	rjmp	.+2      	; 0x1d9c4 <memset+0x6>
   1d9c2:	6d 93       	st	X+, r22
   1d9c4:	41 50       	subi	r20, 0x01	; 1
   1d9c6:	50 40       	sbci	r21, 0x00	; 0
   1d9c8:	e0 f7       	brcc	.-8      	; 0x1d9c2 <memset+0x4>
   1d9ca:	08 95       	ret

0001d9cc <strnlen>:
   1d9cc:	fc 01       	movw	r30, r24
   1d9ce:	61 50       	subi	r22, 0x01	; 1
   1d9d0:	70 40       	sbci	r23, 0x00	; 0
   1d9d2:	01 90       	ld	r0, Z+
   1d9d4:	01 10       	cpse	r0, r1
   1d9d6:	d8 f7       	brcc	.-10     	; 0x1d9ce <strnlen+0x2>
   1d9d8:	80 95       	com	r24
   1d9da:	90 95       	com	r25
   1d9dc:	8e 0f       	add	r24, r30
   1d9de:	9f 1f       	adc	r25, r31
   1d9e0:	08 95       	ret

0001d9e2 <__ultoa_invert>:
   1d9e2:	fa 01       	movw	r30, r20
   1d9e4:	aa 27       	eor	r26, r26
   1d9e6:	28 30       	cpi	r18, 0x08	; 8
   1d9e8:	51 f1       	breq	.+84     	; 0x1da3e <__ultoa_invert+0x5c>
   1d9ea:	20 31       	cpi	r18, 0x10	; 16
   1d9ec:	81 f1       	breq	.+96     	; 0x1da4e <__ultoa_invert+0x6c>
   1d9ee:	e8 94       	clt
   1d9f0:	6f 93       	push	r22
   1d9f2:	6e 7f       	andi	r22, 0xFE	; 254
   1d9f4:	6e 5f       	subi	r22, 0xFE	; 254
   1d9f6:	7f 4f       	sbci	r23, 0xFF	; 255
   1d9f8:	8f 4f       	sbci	r24, 0xFF	; 255
   1d9fa:	9f 4f       	sbci	r25, 0xFF	; 255
   1d9fc:	af 4f       	sbci	r26, 0xFF	; 255
   1d9fe:	b1 e0       	ldi	r27, 0x01	; 1
   1da00:	3e d0       	rcall	.+124    	; 0x1da7e <__ultoa_invert+0x9c>
   1da02:	b4 e0       	ldi	r27, 0x04	; 4
   1da04:	3c d0       	rcall	.+120    	; 0x1da7e <__ultoa_invert+0x9c>
   1da06:	67 0f       	add	r22, r23
   1da08:	78 1f       	adc	r23, r24
   1da0a:	89 1f       	adc	r24, r25
   1da0c:	9a 1f       	adc	r25, r26
   1da0e:	a1 1d       	adc	r26, r1
   1da10:	68 0f       	add	r22, r24
   1da12:	79 1f       	adc	r23, r25
   1da14:	8a 1f       	adc	r24, r26
   1da16:	91 1d       	adc	r25, r1
   1da18:	a1 1d       	adc	r26, r1
   1da1a:	6a 0f       	add	r22, r26
   1da1c:	71 1d       	adc	r23, r1
   1da1e:	81 1d       	adc	r24, r1
   1da20:	91 1d       	adc	r25, r1
   1da22:	a1 1d       	adc	r26, r1
   1da24:	20 d0       	rcall	.+64     	; 0x1da66 <__ultoa_invert+0x84>
   1da26:	09 f4       	brne	.+2      	; 0x1da2a <__ultoa_invert+0x48>
   1da28:	68 94       	set
   1da2a:	3f 91       	pop	r19
   1da2c:	2a e0       	ldi	r18, 0x0A	; 10
   1da2e:	26 9f       	mul	r18, r22
   1da30:	11 24       	eor	r1, r1
   1da32:	30 19       	sub	r19, r0
   1da34:	30 5d       	subi	r19, 0xD0	; 208
   1da36:	31 93       	st	Z+, r19
   1da38:	de f6       	brtc	.-74     	; 0x1d9f0 <__ultoa_invert+0xe>
   1da3a:	cf 01       	movw	r24, r30
   1da3c:	08 95       	ret
   1da3e:	46 2f       	mov	r20, r22
   1da40:	47 70       	andi	r20, 0x07	; 7
   1da42:	40 5d       	subi	r20, 0xD0	; 208
   1da44:	41 93       	st	Z+, r20
   1da46:	b3 e0       	ldi	r27, 0x03	; 3
   1da48:	0f d0       	rcall	.+30     	; 0x1da68 <__ultoa_invert+0x86>
   1da4a:	c9 f7       	brne	.-14     	; 0x1da3e <__ultoa_invert+0x5c>
   1da4c:	f6 cf       	rjmp	.-20     	; 0x1da3a <__ultoa_invert+0x58>
   1da4e:	46 2f       	mov	r20, r22
   1da50:	4f 70       	andi	r20, 0x0F	; 15
   1da52:	40 5d       	subi	r20, 0xD0	; 208
   1da54:	4a 33       	cpi	r20, 0x3A	; 58
   1da56:	18 f0       	brcs	.+6      	; 0x1da5e <__ultoa_invert+0x7c>
   1da58:	49 5d       	subi	r20, 0xD9	; 217
   1da5a:	31 fd       	sbrc	r19, 1
   1da5c:	40 52       	subi	r20, 0x20	; 32
   1da5e:	41 93       	st	Z+, r20
   1da60:	02 d0       	rcall	.+4      	; 0x1da66 <__ultoa_invert+0x84>
   1da62:	a9 f7       	brne	.-22     	; 0x1da4e <__ultoa_invert+0x6c>
   1da64:	ea cf       	rjmp	.-44     	; 0x1da3a <__ultoa_invert+0x58>
   1da66:	b4 e0       	ldi	r27, 0x04	; 4
   1da68:	a6 95       	lsr	r26
   1da6a:	97 95       	ror	r25
   1da6c:	87 95       	ror	r24
   1da6e:	77 95       	ror	r23
   1da70:	67 95       	ror	r22
   1da72:	ba 95       	dec	r27
   1da74:	c9 f7       	brne	.-14     	; 0x1da68 <__ultoa_invert+0x86>
   1da76:	00 97       	sbiw	r24, 0x00	; 0
   1da78:	61 05       	cpc	r22, r1
   1da7a:	71 05       	cpc	r23, r1
   1da7c:	08 95       	ret
   1da7e:	9b 01       	movw	r18, r22
   1da80:	ac 01       	movw	r20, r24
   1da82:	0a 2e       	mov	r0, r26
   1da84:	06 94       	lsr	r0
   1da86:	57 95       	ror	r21
   1da88:	47 95       	ror	r20
   1da8a:	37 95       	ror	r19
   1da8c:	27 95       	ror	r18
   1da8e:	ba 95       	dec	r27
   1da90:	c9 f7       	brne	.-14     	; 0x1da84 <__ultoa_invert+0xa2>
   1da92:	62 0f       	add	r22, r18
   1da94:	73 1f       	adc	r23, r19
   1da96:	84 1f       	adc	r24, r20
   1da98:	95 1f       	adc	r25, r21
   1da9a:	a0 1d       	adc	r26, r0
   1da9c:	08 95       	ret

0001da9e <_exit>:
   1da9e:	f8 94       	cli

0001daa0 <__stop_program>:
   1daa0:	ff cf       	rjmp	.-2      	; 0x1daa0 <__stop_program>
