
gpib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00001648  00800100  0001d66a  0001d6fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0001d66a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000968  00801748  00801748  0001ed46  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0001ed46  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001ed58  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00001798  00000000  00000000  0001ed98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00027eca  00000000  00000000  00020530  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000646d  00000000  00000000  000483fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00012215  00000000  00000000  0004e867  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000061c8  00000000  00000000  00060a7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000047d1  00000000  00000000  00066c44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0002703b  00000000  00000000  0006b415  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001788  00000000  00000000  00092450  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 52 24 	jmp	0x48a4	; 0x48a4 <__ctors_end>
       4:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
       8:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
       c:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      10:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      14:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      18:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      1c:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      20:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      24:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      28:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      2c:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      30:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      34:	0c 94 c8 34 	jmp	0x6990	; 0x6990 <__vector_13>
      38:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      3c:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      40:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      44:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      48:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      4c:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      50:	0c 94 72 2b 	jmp	0x56e4	; 0x56e4 <__vector_20>
      54:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      58:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      5c:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      60:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      64:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      68:	0c 94 41 2e 	jmp	0x5c82	; 0x5c82 <__vector_26>
      6c:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      70:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      74:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      78:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      7c:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      80:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      84:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      88:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <__bad_interrupt>
      8c:	6f 44       	sbci	r22, 0x4F	; 79
      8e:	ca 45       	sbci	r28, 0x5A	; 90
      90:	9f 44       	sbci	r25, 0x4F	; 79
      92:	a3 45       	sbci	r26, 0x53	; 83
      94:	a3 45       	sbci	r26, 0x53	; 83
      96:	ca 45       	sbci	r28, 0x5A	; 90
      98:	ca 45       	sbci	r28, 0x5A	; 90
      9a:	ca 45       	sbci	r28, 0x5A	; 90
      9c:	ca 45       	sbci	r28, 0x5A	; 90
      9e:	ca 45       	sbci	r28, 0x5A	; 90
      a0:	ca 45       	sbci	r28, 0x5A	; 90
      a2:	ca 45       	sbci	r28, 0x5A	; 90
      a4:	ca 45       	sbci	r28, 0x5A	; 90
      a6:	6f 44       	sbci	r22, 0x4F	; 79
      a8:	69 44       	sbci	r22, 0x49	; 73
      aa:	ca 45       	sbci	r28, 0x5A	; 90
      ac:	ca 45       	sbci	r28, 0x5A	; 90
      ae:	ca 45       	sbci	r28, 0x5A	; 90
      b0:	ca 45       	sbci	r28, 0x5A	; 90
      b2:	99 44       	sbci	r25, 0x49	; 73
      b4:	ca 45       	sbci	r28, 0x5A	; 90
      b6:	ca 45       	sbci	r28, 0x5A	; 90
      b8:	6f 44       	sbci	r22, 0x4F	; 79
      ba:	ca 45       	sbci	r28, 0x5A	; 90
      bc:	ca 45       	sbci	r28, 0x5A	; 90
      be:	ca 45       	sbci	r28, 0x5A	; 90
      c0:	ca 45       	sbci	r28, 0x5A	; 90
      c2:	ca 45       	sbci	r28, 0x5A	; 90
      c4:	ca 45       	sbci	r28, 0x5A	; 90
      c6:	ca 45       	sbci	r28, 0x5A	; 90
      c8:	ca 45       	sbci	r28, 0x5A	; 90
      ca:	ca 45       	sbci	r28, 0x5A	; 90
      cc:	6f 44       	sbci	r22, 0x4F	; 79
      ce:	c5 45       	sbci	r28, 0x55	; 85
      d0:	9f 44       	sbci	r25, 0x4F	; 79
      d2:	a3 45       	sbci	r26, 0x53	; 83
      d4:	a3 45       	sbci	r26, 0x53	; 83
      d6:	ca 45       	sbci	r28, 0x5A	; 90
      d8:	ca 45       	sbci	r28, 0x5A	; 90
      da:	ca 45       	sbci	r28, 0x5A	; 90
      dc:	ca 45       	sbci	r28, 0x5A	; 90
      de:	ca 45       	sbci	r28, 0x5A	; 90
      e0:	ca 45       	sbci	r28, 0x5A	; 90
      e2:	ca 45       	sbci	r28, 0x5A	; 90
      e4:	ca 45       	sbci	r28, 0x5A	; 90
      e6:	6f 44       	sbci	r22, 0x4F	; 79
      e8:	69 44       	sbci	r22, 0x49	; 73
      ea:	ca 45       	sbci	r28, 0x5A	; 90
      ec:	ca 45       	sbci	r28, 0x5A	; 90
      ee:	c0 45       	sbci	r28, 0x50	; 80
      f0:	ca 45       	sbci	r28, 0x5A	; 90
      f2:	99 44       	sbci	r25, 0x49	; 73
      f4:	ca 45       	sbci	r28, 0x5A	; 90
      f6:	ca 45       	sbci	r28, 0x5A	; 90
      f8:	6f 44       	sbci	r22, 0x4F	; 79
      fa:	ec 45       	sbci	r30, 0x5C	; 92
      fc:	d3 46       	sbci	r29, 0x63	; 99
      fe:	e2 45       	sbci	r30, 0x52	; 82
     100:	40 46       	sbci	r20, 0x60	; 96
     102:	27 46       	sbci	r18, 0x67	; 103
     104:	d3 46       	sbci	r29, 0x63	; 99
     106:	d3 46       	sbci	r29, 0x63	; 99
     108:	d3 46       	sbci	r29, 0x63	; 99
     10a:	d3 46       	sbci	r29, 0x63	; 99
     10c:	d3 46       	sbci	r29, 0x63	; 99
     10e:	d3 46       	sbci	r29, 0x63	; 99
     110:	d3 46       	sbci	r29, 0x63	; 99
     112:	d3 46       	sbci	r29, 0x63	; 99
     114:	f6 45       	sbci	r31, 0x56	; 86
     116:	0a 46       	sbci	r16, 0x6A	; 106
     118:	d3 46       	sbci	r29, 0x63	; 99
     11a:	d3 46       	sbci	r29, 0x63	; 99
     11c:	d3 46       	sbci	r29, 0x63	; 99
     11e:	d3 46       	sbci	r29, 0x63	; 99
     120:	de 45       	sbci	r29, 0x5E	; 94
     122:	d3 46       	sbci	r29, 0x63	; 99
     124:	d3 46       	sbci	r29, 0x63	; 99
     126:	0a 46       	sbci	r16, 0x6A	; 106
     128:	d3 46       	sbci	r29, 0x63	; 99
     12a:	d3 46       	sbci	r29, 0x63	; 99
     12c:	d3 46       	sbci	r29, 0x63	; 99
     12e:	d3 46       	sbci	r29, 0x63	; 99
     130:	d3 46       	sbci	r29, 0x63	; 99
     132:	d3 46       	sbci	r29, 0x63	; 99
     134:	d3 46       	sbci	r29, 0x63	; 99
     136:	d3 46       	sbci	r29, 0x63	; 99
     138:	d3 46       	sbci	r29, 0x63	; 99
     13a:	ec 45       	sbci	r30, 0x5C	; 92
     13c:	6e 46       	sbci	r22, 0x6E	; 110
     13e:	e2 45       	sbci	r30, 0x52	; 82
     140:	40 46       	sbci	r20, 0x60	; 96
     142:	27 46       	sbci	r18, 0x67	; 103
     144:	d3 46       	sbci	r29, 0x63	; 99
     146:	d3 46       	sbci	r29, 0x63	; 99
     148:	d3 46       	sbci	r29, 0x63	; 99
     14a:	d3 46       	sbci	r29, 0x63	; 99
     14c:	d3 46       	sbci	r29, 0x63	; 99
     14e:	d3 46       	sbci	r29, 0x63	; 99
     150:	d3 46       	sbci	r29, 0x63	; 99
     152:	d3 46       	sbci	r29, 0x63	; 99
     154:	f6 45       	sbci	r31, 0x56	; 86
     156:	0a 46       	sbci	r16, 0x6A	; 106
     158:	d3 46       	sbci	r29, 0x63	; 99
     15a:	d3 46       	sbci	r29, 0x63	; 99
     15c:	6e 46       	sbci	r22, 0x6E	; 110
     15e:	d3 46       	sbci	r29, 0x63	; 99
     160:	de 45       	sbci	r29, 0x5E	; 94
     162:	d3 46       	sbci	r29, 0x63	; 99
     164:	d3 46       	sbci	r29, 0x63	; 99
     166:	0a 46       	sbci	r16, 0x6A	; 106
     168:	45 6b       	ori	r20, 0xB5	; 181
     16a:	4f 6b       	ori	r20, 0xBF	; 191
     16c:	57 6b       	ori	r21, 0xB7	; 183
     16e:	5a 6b       	ori	r21, 0xBA	; 186
     170:	5d 6b       	ori	r21, 0xBD	; 189
     172:	60 6b       	ori	r22, 0xB0	; 176
     174:	63 6b       	ori	r22, 0xB3	; 179
     176:	66 6b       	ori	r22, 0xB6	; 182
     178:	69 6b       	ori	r22, 0xB9	; 185
     17a:	ab 87       	std	Y+11, r26	; 0x0b
     17c:	d1 87       	std	Z+9, r29	; 0x09
     17e:	f8 87       	std	Y+8, r31	; 0x08
     180:	12 88       	ldd	r1, Z+18	; 0x12
     182:	1b 88       	ldd	r1, Y+19	; 0x13
     184:	3b 88       	ldd	r3, Y+19	; 0x13
     186:	54 88       	ldd	r5, Z+20	; 0x14
     188:	63 88       	ldd	r6, Z+19	; 0x13
     18a:	ae 88       	ldd	r10, Y+22	; 0x16
     18c:	80 88       	ldd	r8, Z+16	; 0x10
     18e:	9c 8a       	std	Y+20, r9	; 0x14
     190:	a4 8a       	std	Z+20, r10	; 0x14
     192:	a9 8a       	std	Y+17, r10	; 0x11
     194:	cd 8a       	std	Y+21, r12	; 0x15
     196:	d7 8a       	std	Z+23, r13	; 0x17
     198:	21 8b       	std	Z+17, r18	; 0x11
     19a:	ec 8a       	std	Y+20, r14	; 0x14
     19c:	ec 8a       	std	Y+20, r14	; 0x14
     19e:	e4 8a       	std	Z+20, r14	; 0x14
     1a0:	b5 98       	cbi	0x16, 5	; 22
     1a2:	ee 99       	sbic	0x1d, 6	; 29
     1a4:	42 9a       	sbi	0x08, 2	; 8
     1a6:	c2 9a       	sbi	0x18, 2	; 24
     1a8:	f3 9a       	sbi	0x1e, 3	; 30
     1aa:	69 9b       	sbis	0x0d, 1	; 13
     1ac:	2b 9d       	mul	r18, r11
     1ae:	f0 9f       	mul	r31, r16
     1b0:	f0 9f       	mul	r31, r16
     1b2:	f0 9f       	mul	r31, r16
     1b4:	f8 9d       	mul	r31, r8
     1b6:	33 9e       	mul	r3, r19
     1b8:	e1 9e       	mul	r14, r17
     1ba:	21 9f       	mul	r18, r17
     1bc:	8e 99       	sbic	0x11, 6	; 17
     1be:	a7 99       	sbic	0x14, 7	; 20
     1c0:	bf bf       	out	0x3f, r27	; 63
     1c2:	7e bf       	out	0x3e, r23	; 62
     1c4:	7e bf       	out	0x3e, r23	; 62
     1c6:	7e bf       	out	0x3e, r23	; 62
     1c8:	7e bf       	out	0x3e, r23	; 62
     1ca:	42 bf       	out	0x32, r20	; 50
     1cc:	49 bf       	out	0x39, r20	; 57
     1ce:	50 bf       	out	0x30, r21	; 48
     1d0:	60 bf       	out	0x30, r22	; 48
     1d2:	6e bf       	out	0x3e, r22	; 62
     1d4:	67 bf       	out	0x37, r22	; 55

000001d6 <__trampolines_end>:
     1d6:	6e 61       	ori	r22, 0x1E	; 30
     1d8:	6e 00       	.word	0x006e	; ????

000001da <__c.2332>:
     1da:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1ea:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1fa:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     20a:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     21a:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     22a:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     23a:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     24a:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     25a:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     26a:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     27a:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     28a:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     29a:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2aa:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2ba:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     2ca:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000002d8 <__c.3743>:
     2d8:	63 73 5f 64 69 73 61 62 6c 65 20 77 61 73 3a 20     cs_disable was: 
     2e8:	25 64 2c 20 77 61 6e 74 3a 20 25 64 0a 00           %d, want: %d..

000002f6 <__c.3738>:
     2f6:	63 73 5f 65 6e 61 62 6c 65 20 77 61 73 3a 20 25     cs_enable was: %
     306:	64 2c 20 77 61 6e 74 3a 20 25 64 0a 00              d, want: %d..

00000313 <__c.3769>:
     313:	73 61 66 65 66 72 65 65 3a 20 46 52 45 45 20 45     safefree: FREE E
     323:	52 52 4f 52 20 28 25 75 29 2c 20 74 6f 70 3a 28     RROR (%u), top:(
     333:	25 75 29 0a 00                                      %u)..

00000338 <__c.3760>:
     338:	73 61 66 65 6d 61 6c 6c 6f 63 28 25 64 29 20 66     safemalloc(%d) f
     348:	61 69 6c 65 64 21 0a 00                             ailed!..

00000350 <__c.3754>:
     350:	73 61 66 65 63 61 6c 6c 6f 63 28 25 64 2c 25 64     safecalloc(%d,%d
     360:	29 20 66 61 69 6c 65 64 21 0a 00                    ) failed!..

0000036b <__c.3739>:
     36b:	20 20 5f 5f 62 72 6b 76 61 6c 3a 20 20 20 20 25       __brkval:    %
     37b:	35 75 0a 00                                         5u..

0000037f <__c.3737>:
     37f:	20 20 4d 61 6c 6c 6f 63 20 73 74 61 72 74 20 25       Malloc start %
     38f:	35 75 20 20 65 6e 64 3a 20 25 35 75 0a 00           5u  end: %5u..

0000039d <__c.3735>:
     39d:	20 20 48 65 61 70 3a 20 73 74 61 72 74 3a 20 25       Heap: start: %
     3ad:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000003bb <__c.3733>:
     3bb:	20 20 44 61 74 61 20 20 73 74 61 72 74 3a 20 25       Data  start: %
     3cb:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000003d9 <__c.3731>:
     3d9:	20 20 42 53 53 20 20 20 73 74 61 72 74 3a 20 25       BSS   start: %
     3e9:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000003f7 <__c.3729>:
     3f7:	20 20 53 74 61 63 6b 20 46 72 65 65 3a 20 20 25       Stack Free:  %
     407:	75 0a 00                                            u..

0000040a <__c.3727>:
     40a:	20 20 53 74 61 63 6b 20 54 6f 70 3a 20 20 20 25       Stack Top:   %
     41a:	75 0a 00                                            u..

0000041d <__c.3725>:
     41d:	46 72 65 65 20 52 61 6d 3a 25 75 0a 00              Free Ram:%u..

0000042a <__c.3723>:
     42a:	53 50 49 30 5f 4d 6f 64 65 3a 20 49 6e 76 61 6c     SPI0_Mode: Inval
     43a:	69 64 20 6d 6f 64 65 28 25 64 29 0a 00              id mode(%d)..

00000447 <__c.3750>:
     447:	72 74 63 5f 72 65 61 64 20 65 72 72 6f 72 0a 00     rtc_read error..

00000457 <__c.3743>:
     457:	72 74 63 5f 77 72 69 74 65 20 65 72 72 6f 72 0a     rtc_write error.
	...

00000468 <__c.3736>:
     468:	72 74 63 5f 69 6e 69 74 20 20 77 72 69 74 65 20     rtc_init  write 
     478:	65 70 6f 63 68 20 66 61 69 6c 65 64 0a 00           epoch failed..

00000486 <__c.3725>:
     486:	72 74 63 5f 72 75 6e 20 2d 20 77 72 69 74 65 20     rtc_run - write 
     496:	73 74 61 74 75 73 20 65 72 72 6f 72 0a 00           status error..

000004a4 <__c.3723>:
     4a4:	72 74 63 5f 72 75 6e 20 72 65 61 64 20 73 74 61     rtc_run read sta
     4b4:	74 75 73 20 65 72 72 6f 72 0a 00                    tus error..

000004bf <__c.3715>:
     4bf:	72 74 63 5f 72 75 6e 5f 74 65 73 74 20 72 65 61     rtc_run_test rea
     4cf:	64 20 65 72 72 6f 72 0a 00                          d error..

000004d8 <__c.3873>:
     4d8:	25 73 20 65 78 70 65 63 74 65 64 20 25 64 20 61     %s expected %d a
     4e8:	72 67 75 6d 65 6e 74 73 20 6f 6e 6c 79 20 67 6f     rguments only go
     4f8:	74 20 25 64 0a 00                                   t %d..

000004fe <__c.3707>:
     4fe:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     50e:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

0000051e <__c.3786>:
     51e:	54 69 6d 65 72 73 20 65 6e 61 62 6c 65 64 0a 00     Timers enabled..

0000052e <__c.3784>:
     52e:	43 6c 6f 63 6b 20 49 6e 73 74 61 6c 6c 65 64 0a     Clock Installed.
	...

0000053f <__c.3782>:
     53f:	43 6c 6f 63 6b 20 74 61 73 6b 20 69 6e 69 74 20     Clock task init 
     54f:	66 61 69 6c 65 64 0a 00                             failed..

00000557 <__c.3780>:
     557:	43 6c 6f 63 6b 20 49 6e 69 74 0a 00                 Clock Init..

00000563 <__c.3778>:
     563:	54 69 6d 65 72 73 20 63 6f 6e 66 69 67 75 72 65     Timers configure
     573:	64 0a 00                                            d..

00000576 <__c.3776>:
     576:	54 69 6d 65 72 73 20 69 6e 69 74 20 63 61 6c 6c     Timers init call
     586:	65 64 0a 00                                         ed..

0000058a <__c.3756>:
     58a:	5b 54 69 6d 65 3a 25 73 5d 0a 00                    [Time:%s]..

00000595 <__c.3754>:
     595:	5b 25 73 20 54 69 6d 65 3a 25 73 5d 0a 00           [%s Time:%s]..

000005a3 <__c.3745>:
     5a3:	5b 53 65 63 6f 6e 64 73 3a 20 25 73 5d 0a 00        [Seconds: %s]..

000005b2 <__c.3740>:
     5b2:	25 6c 64 2e 25 30 39 6c 64 00                       %ld.%09ld.

000005bc <__c.3720>:
     5bc:	73 65 74 5f 74 69 6d 65 72 73 3a 20 4e 6f 20 6d     set_timers: No m
     5cc:	6f 72 65 20 74 69 6d 65 72 73 21 0a 00              ore timers!..

000005d9 <__c.3995>:
     5d9:	63 6c 6b 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     clk time:    %s.
	...

000005ea <__c.3993>:
     5ea:	63 6c 6b 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     clk seconds: %lu
     5fa:	0a 00                                               ..

000005fc <__c.3991>:
     5fc:	52 54 43 20 72 65 61 64 20 66 61 69 6c 65 64 0a     RTC read failed.
	...

0000060d <__c.3989>:
     60d:	72 74 63 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     rtc time:    %s.
	...

0000061e <__c.3987>:
     61e:	72 74 63 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     rtc seconds: %lu
     62e:	0a 00                                               ..

00000630 <__c.3980>:
     630:	75 73 65 20 73 65 74 64 61 74 65 20 63 6f 6d 6d     use setdate comm
     640:	61 6e 64 20 74 6f 20 63 68 61 6e 67 65 20 74 69     and to change ti
     650:	6d 65 0a 00                                         me..

00000654 <__c.3978>:
     654:	72 74 63 20 72 65 61 64 20 65 72 72 6f 72 61 66     rtc read erroraf
     664:	74 65 72 20 69 6e 69 74 0a 00                       ter init..

0000066e <__c.3976>:
     66e:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     67e:	61 69 6c 65 64 0a 00                                ailed..

00000685 <__c.3974>:
     685:	61 74 74 65 6d 70 74 69 6e 67 20 72 74 63 20 69     attempting rtc i
     695:	6e 69 74 0a 00                                      nit..

0000069a <__c.3972>:
     69a:	72 74 63 20 75 6e 69 6e 69 74 69 6c 69 7a 65 64     rtc uninitilized
     6aa:	0a 00                                               ..

000006ac <__c.3963>:
     6ac:	44 53 54 20 45 4e 44 20 20 20 20 20 20 20 20 20     DST END         
     6bc:	47 4d 54 3a 20 25 73 0a 00                          GMT: %s..

000006c5 <__c.3961>:
     6c5:	44 53 54 20 53 54 41 52 54 20 20 20 20 20 20 20     DST START       
     6d5:	47 4d 54 3a 20 25 73 0a 00                          GMT: %s..

000006de <__c.3957>:
     6de:	44 53 54 20 45 4e 44 20 20 20 6c 6f 63 61 6c 74     DST END   localt
     6ee:	69 6d 65 3a 20 25 73 0a 00                          ime: %s..

000006f7 <__c.3955>:
     6f7:	44 53 54 20 53 54 41 52 54 20 6c 6f 63 61 6c 74     DST START localt
     707:	69 6d 65 3a 20 25 73 0a 00                          ime: %s..

00000710 <__c.3926>:
     710:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     720:	61 69 6c 65 64 0a 00                                ailed..

00000727 <__c.3924>:
     727:	69 6e 76 61 6c 69 64 20 6d 69 6e 3a 20 25 64 0a     invalid min: %d.
	...

00000738 <__c.3922>:
     738:	69 6e 76 61 6c 69 64 20 68 6f 75 72 3a 20 25 64     invalid hour: %d
     748:	0a 00                                               ..

0000074a <__c.3920>:
     74a:	69 6e 76 61 6c 69 64 20 64 61 79 3a 20 25 64 0a     invalid day: %d.
	...

0000075b <__c.3918>:
     75b:	69 6e 76 61 6c 69 64 20 6d 6f 6e 3a 20 25 64 0a     invalid mon: %d.
	...

0000076c <__c.3916>:
     76c:	69 6e 76 61 6c 69 64 20 79 65 61 72 3a 20 25 64     invalid year: %d
     77c:	0a 00                                               ..

0000077e <__c.3895>:
     77e:	45 6e 74 65 72 20 64 61 74 65 20 59 59 59 59 20     Enter date YYYY 
     78e:	4d 4d 20 44 44 20 48 48 3a 4d 4d 3a 53 53 20 3e     MM DD HH:MM:SS >
	...

0000079f <__c.3770>:
     79f:	25 73 20 25 73 20 25 32 64 20 25 30 32 64 3a 25     %s %s %2d %02d:%
     7af:	30 32 64 3a 25 30 32 64 20 25 34 64 00              02d:%02d %4d.

000007bc <__c.3738>:
     7bc:	73 65 6c 65 63 74 20 66 61 69 6c 65 64 21 0a 00     select failed!..

000007cc <__c.3767>:
     7cc:	45 4e 44 20 4d 4d 43 20 49 4e 49 54 0a 00           END MMC INIT..

000007da <__c.3765>:
     7da:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 3a 20     MMC Block Size: 
     7ea:	25 6c 64 0a 00                                      %ld..

000007ef <__c.3763>:
     7ef:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 20 2d     MMC Block Size -
     7ff:	20 72 65 61 64 20 66 61 69 6c 65 64 0a 00            read failed..

0000080d <__c.3760>:
     80d:	2c 20 43 6f 64 65 20 70 61 67 65 3a 20 25 75 0a     , Code page: %u.
	...

0000081e <__c.3758>:
     81e:	4c 46 4e 20 45 6e 61 62 6c 65 64 00                 LFN Enabled.

0000082a <__c.3756>:
     82a:	53 54 41 52 54 20 4d 4d 43 20 49 4e 49 54 0a 00     START MMC INIT..

0000083a <__c.3743>:
     83a:	4d 4d 43 20 54 49 4d 45 4f 55 54 0a 00              MMC TIMEOUT..

00000847 <__c.3715>:
     847:	4d 4d 43 20 43 6c 6f 63 6b 20 74 61 73 6b 20 69     MMC Clock task i
     857:	6e 69 74 20 66 61 69 6c 65 64 0a 00                 nit failed..

00000863 <__c.3787>:
     863:	0a 00                                               ..

00000865 <__c.3785>:
     865:	25 73 20 25 75 2f 25 30 32 75 2f 25 30 32 75 20     %s %u/%02u/%02u 
     875:	25 30 32 75 3a 25 30 32 75 20 25 39 6c 75 20 25     %02u:%02u %9lu %
     885:	73 00                                               s.

00000887 <__c.3783>:
     887:	66 61 74 66 73 5f 66 69 6c 69 6e 66 6f 5f 6c 69     fatfs_filinfo_li
     897:	73 74 3a 20 65 6d 70 74 79 0a 00                    st: empty..

000008a2 <__c.3777>:
     8a2:	25 75 20 66 69 6c 65 73 2c 20 25 6c 75 20 62 79     %u files, %lu by
     8b2:	74 65 73 2e 0a 25 75 20 66 6f 6c 64 65 72 73 2e     tes..%u folders.
     8c2:	0a 25 6c 75 20 4b 42 20 74 6f 74 61 6c 20 64 69     .%lu KB total di
     8d2:	73 6b 20 73 70 61 63 65 2e 0a 25 6c 75 20 4b 42     sk space..%lu KB
     8e2:	20 61 76 61 69 6c 61 62 6c 65 2e 0a 00               available...

000008ef <__c.3775>:
     8ef:	56 6f 6c 75 6d 65 20 53 2f 4e 20 20 20 20 20 20     Volume S/N      
     8ff:	20 20 20 20 20 20 20 20 3d 20 25 30 34 58 2d 25             = %04X-%
     90f:	30 34 58 0a 00                                      04X..

00000914 <__c.3773>:
     914:	56 6f 6c 75 6d 65 20 6e 61 6d 65 20 20 20 20 20     Volume name     
     924:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

00000932 <__c.3771>:
     932:	44 61 74 61 20 73 74 61 72 74 20 28 6c 62 61 29     Data start (lba)
     942:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000951 <__c.3769>:
     951:	44 49 52 20 73 74 61 72 74 20 28 6c 62 61 2c 63     DIR start (lba,c
     961:	6c 75 73 74 6f 72 29 20 3d 20 25 6c 75 0a 00        lustor) = %lu..

00000970 <__c.3767>:
     970:	46 41 54 20 73 74 61 72 74 20 28 6c 62 61 29 20     FAT start (lba) 
     980:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

0000098f <__c.3765>:
     98f:	4e 75 6d 62 65 72 20 6f 66 20 63 6c 75 73 74 65     Number of cluste
     99f:	72 73 20 20 20 20 20 20 3d 20 25 6c 75 0a 00        rs      = %lu..

000009ae <__c.3763>:
     9ae:	53 65 63 74 6f 72 73 2f 46 41 54 20 20 20 20 20     Sectors/FAT     
     9be:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

000009cd <__c.3761>:
     9cd:	52 6f 6f 74 20 44 49 52 20 65 6e 74 72 69 65 73     Root DIR entries
     9dd:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

000009eb <__c.3759>:
     9eb:	4e 75 6d 62 65 72 20 6f 66 20 46 41 54 73 20 20     Number of FATs  
     9fb:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

00000a09 <__c.3757>:
     a09:	42 79 74 65 73 2f 43 6c 75 73 74 65 72 20 20 20     Bytes/Cluster   
     a19:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000a28 <__c.3755>:
     a28:	46 41 54 20 74 79 70 65 20 20 20 20 20 20 20 20     FAT type        
     a38:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

00000a46 <__c.3753>:
     a46:	66 61 74 66 73 20 73 74 61 74 75 73 3a 25 73 0a     fatfs status:%s.
	...

00000a57 <__c.3717>:
     a57:	72 63 3d 25 75 0a 00                                rc=%u..

00000a5e <__c.3755>:
     a5e:	2c 20 25 31 30 6c 75 4b 20 62 79 74 65 73 20 66     , %10luK bytes f
     a6e:	72 65 65 0a 00                                      ree..

00000a73 <__c.3753>:
     a73:	25 34 75 20 46 69 6c 65 28 73 29 2c 25 31 30 6c     %4u File(s),%10l
     a83:	75 20 62 79 74 65 73 20 74 6f 74 61 6c 0a 25 34     u bytes total.%4
     a93:	75 20 44 69 72 28 73 29 00                          u Dir(s).

00000a9c <__c.3749>:
     a9c:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000aaa <__c.3736>:
     aaa:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     aba:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000aca <__c.3734>:
     aca:	45 4e 44 20 4d 4d 43 20 54 45 53 54 0a 00           END MMC TEST..

00000ad8 <__c.3732>:
     ad8:	4d 4d 43 20 44 69 72 65 63 74 6f 72 79 20 4c 69     MMC Directory Li
     ae8:	73 74 0a 00                                         st..

00000aec <__c.3730>:
     aec:	53 54 41 52 54 20 4d 4d 43 20 54 45 53 54 0a 00     START MMC TEST..

00000afc <__c.3728>:
     afc:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     b0c:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000b1c <__c.3720>:
     b1c:	69 6e 64 3a 25 64 2c 61 72 67 63 3a 25 64 0a 00     ind:%d,argc:%d..

00000b2c <__c.3710>:
     b2c:	4e 6f 74 65 3a 20 66 61 74 66 73 20 74 65 73 74     Note: fatfs test
     b3c:	73 20 4d 55 53 54 20 73 74 61 72 74 20 77 69 74     s MUST start wit
     b4c:	68 20 22 66 61 74 66 73 22 20 6b 65 79 77 6f 72     h "fatfs" keywor
     b5c:	64 0a 66 61 74 66 73 20 68 65 6c 70 0a 66 61 74     d.fatfs help.fat
     b6c:	66 73 20 6d 6d 63 5f 74 65 73 74 0a 66 61 74 66     fs mmc_test.fatf
     b7c:	73 20 6d 6d 63 5f 69 6e 69 74 0a 66 61 74 66 73     s mmc_init.fatfs
     b8c:	20 6c 73 20 64 69 72 0a 66 61 74 66 73 20 73 74      ls dir.fatfs st
     b9c:	61 74 75 73 20 66 69 6c 65 0a 0a 00                 atus file...

00000ba8 <__c.3708>:
     ba8:	66 61 74 66 73 20 68 65 6c 70 0a 00                 fatfs help..

00000bb4 <__c.4069>:
     bb4:	45 78 70 65 63 74 65 64 20 2f 64 65 76 2f 73 64     Expected /dev/sd
     bc4:	61 20 2e 2e 20 2f 64 65 76 2f 73 64 6a 0a 00        a .. /dev/sdj..

00000bd3 <__c.4040>:
     bd3:	25 73 0a 00                                         %s..

00000bd7 <__c.4038>:
     bd7:	25 73 3a 20 25 73 0a 00                             %s: %s..

00000bdf <__c.3934>:
     bdf:	09 63 74 69 6d 65 3a 20 25 73 0a 00                 .ctime: %s..

00000beb <__c.3932>:
     beb:	09 6d 74 69 6d 65 3a 20 25 73 0a 00                 .mtime: %s..

00000bf7 <__c.3930>:
     bf7:	09 61 74 69 6d 65 3a 20 25 73 0a 00                 .atime: %s..

00000c03 <__c.3928>:
     c03:	09 47 49 44 3a 20 20 20 25 6c 75 0a 00              .GID:   %lu..

00000c10 <__c.3926>:
     c10:	09 55 49 44 3a 20 20 20 25 6c 75 0a 00              .UID:   %lu..

00000c1d <__c.3924>:
     c1d:	09 4d 6f 64 65 3a 20 20 25 6c 6f 0a 00              .Mode:  %lo..

00000c2a <__c.3922>:
     c2a:	55 6e 6b 6e 6f 77 6e 0a 00                          Unknown..

00000c33 <__c.3920>:
     c33:	46 69 6c 65 0a 00                                   File..

00000c39 <__c.3918>:
     c39:	44 49 52 0a 00                                      DIR..

00000c3e <__c.3916>:
     c3e:	09 54 79 70 65 3a 20 20 00                          .Type:  .

00000c47 <__c.3914>:
     c47:	09 53 69 7a 65 3a 20 20 25 6c 75 0a 00              .Size:  %lu..

00000c54 <__c.3793>:
     c54:	53 65 65 6b 20 66 61 69 6c 65 64 00                 Seek failed.

00000c60 <__c.3722>:
     c60:	66 70 75 74 63 20 73 74 72 65 61 6d 2d 3e 70 75     fputc stream->pu
     c70:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000c78 <__c.3715>:
     c78:	66 67 65 74 63 20 73 74 72 65 61 6d 2d 3e 67 65     fgetc stream->ge
     c88:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000c90 <__c.3869>:
     c90:	46 69 6c 65 73 3a 20 25 64 0a 00                    Files: %d..

00000c9b <__c.3865>:
     c9b:	6e 61 6d 65 3a 5b 25 73 5d 20 74 6f 6f 20 6c 6f     name:[%s] too lo
     cab:	6e 67 20 77 69 74 68 20 66 75 6c 6c 20 70 61 74     ng with full pat
     cbb:	68 0a 00                                            h..

00000cbe <__c.3862>:
     cbe:	6f 70 65 6e 64 69 72 20 66 61 69 6c 65 64 0a 00     opendir failed..

00000cce <__c.3857>:
     cce:	6c 73 3a 20 63 61 6e 6e 6f 74 20 73 74 61 74 20     ls: cannot stat 
     cde:	5b 25 73 5d 0a 00                                   [%s]..

00000ce4 <__c.3855>:
     ce4:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000cf2 <__c.3853>:
     cf2:	6c 73 3a 20 43 61 6e 27 74 20 67 65 74 20 63 75     ls: Can't get cu
     d02:	72 72 65 6e 74 20 64 69 72 65 63 74 6f 72 79 0a     rrent directory.
	...

00000d13 <__c.3840>:
     d13:	25 73 20 6e 6f 6e 65 20 6e 6f 6e 65 20 25 31 32     %s none none %12
     d23:	6c 64 20 25 73 20 25 73 0a 00                       ld %s %s..

00000d2d <__c.3835>:
     d2d:	25 73 0a 00                                         %s..

00000d31 <__c.3833>:
     d31:	63 61 6e 20 6e 6f 74 20 73 74 61 74 3a 20 25 73     can not stat: %s
     d41:	0a 00                                               ..

00000d43 <__c.3821>:
     d43:	0d 00                                               ..

00000d45 <__c.3819>:
     d45:	4d 6f 72 65 2e 2e 00                                More...

00000d4c <__c.3809>:
     d4c:	25 6c 75 20 62 79 74 65 73 20 63 6f 70 69 65 64     %lu bytes copied
     d5c:	2e 0a 00                                            ...

00000d5f <__c.3805>:
     d5f:	43 6f 70 69 65 64 3a 20 25 30 38 6c 64 0d 00        Copied: %08ld..

00000d6e <__c.3802>:
     d6e:	57 72 69 74 65 20 65 72 72 6f 72 0a 00              Write error..

00000d7b <__c.3800>:
     d7b:	0a 43 6f 70 79 69 6e 67 2e 2e 2e 0a 00              .Copying.....

00000d88 <__c.3798>:
     d88:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000d98 <__c.3796>:
     d98:	43 72 65 61 74 69 6e 67 20 25 73 0a 00              Creating %s..

00000da5 <__c.3794>:
     da5:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000db5 <__c.3792>:
     db5:	4f 70 65 6e 69 6e 67 20 25 73 0a 00                 Opening %s..

00000dc1 <__c.3781>:
     dc1:	25 6c 64 20 62 79 74 65 73 0a 00                    %ld bytes..

00000dcc <__c.3779>:
     dcc:	0a 00                                               ..

00000dce <__c.3774>:
     dce:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000dde <__c.3764>:
     dde:	25 73 0a 00                                         %s..

00000de2 <__c.3741>:
     de2:	70 6f 73 69 78 20 70 72 65 66 69 78 20 69 73 20     posix prefix is 
     df2:	6f 70 74 69 6f 6e 61 6c 0a 70 6f 73 69 78 20 63     optional.posix c
     e02:	61 74 20 66 69 6c 65 20 5b 2d 70 5d 0a 70 6f 73     at file [-p].pos
     e12:	69 78 20 63 64 20 64 69 72 0a 70 6f 73 69 78 20     ix cd dir.posix 
     e22:	63 6f 70 79 20 66 69 6c 65 31 20 66 69 6c 65 32     copy file1 file2
     e32:	0a 70 6f 73 69 78 20 6c 73 20 64 69 72 20 5b 2d     .posix ls dir [-
     e42:	6c 5d 0a 70 6f 73 69 78 20 6d 6b 64 69 72 20 64     l].posix mkdir d
     e52:	69 72 0a 70 6f 73 69 78 20 70 61 67 65 20 4e 4e     ir.posix page NN
     e62:	0a 70 6f 73 69 78 20 70 77 64 0a 70 6f 73 69 78     .posix pwd.posix
     e72:	20 72 6d 20 66 69 6c 65 0a 70 6f 73 69 78 20 72      rm file.posix r
     e82:	6d 64 69 72 20 64 69 72 0a 70 6f 73 69 78 20 72     mdir dir.posix r
     e92:	65 6e 61 6d 65 20 6f 6c 64 20 6e 65 77 0a 0a 00     ename old new...

00000ea2 <__c.3739>:
     ea2:	70 6f 73 69 78 20 68 65 6c 70 0a 00                 posix help..

00000eae <__c.3930>:
     eae:	43 6c 6f 73 65 20 65 72 72 6f 72 3a 20 00           Close error: .

00000ebc <__c.3924>:
     ebc:	53 65 65 6b 20 65 72 72 6f 72 3a 20 00              Seek error: .

00000ec9 <__c.3917>:
     ec9:	57 72 69 74 65 20 65 72 72 6f 72 3a 20 00           Write error: .

00000ed7 <__c.3908>:
     ed7:	52 65 61 64 20 65 72 72 6f 72 3a 20 00              Read error: .

00000ee4 <__c.3899>:
     ee4:	4f 70 65 6e 20 65 72 72 6f 72 3a 5b 25 73 5d 20     Open error:[%s] 
	...

00000ef5 <__c.3885>:
     ef5:	5b 50 50 52 20 44 49 53 41 42 4c 45 20 41 4c 4c     [PPR DISABLE ALL
     f05:	5d 0a 00                                            ]..

00000f08 <__c.3867>:
     f08:	47 50 49 42 20 43 6c 6f 63 6b 20 74 61 73 6b 20     GPIB Clock task 
     f18:	69 6e 69 74 20 66 61 69 6c 65 64 0a 00              init failed..

00000f25 <__c.4452>:
     f25:	5b 67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 20     [gpib_write_str 
     f35:	73 65 6e 74 28 25 64 29 20 65 78 70 65 63 74 65     sent(%d) expecte
     f45:	64 28 25 64 29 5d 0a 00                             d(%d)]..

00000f4d <__c.4447>:
     f4d:	67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 3a 20     gpib_write_str: 
     f5d:	73 69 7a 65 20 3d 20 30 0a 00                       size = 0..

00000f67 <__c.4437>:
     f67:	5b 67 70 69 62 5f 72 65 61 64 5f 73 74 72 20 72     [gpib_read_str r
     f77:	65 61 64 28 25 64 29 20 65 78 70 65 63 74 65 64     ead(%d) expected
     f87:	28 25 64 29 5d 0a 00                                (%d)]..

00000f8e <__c.4433>:
     f8e:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 28 69 6e     gpib_read_str(in
     f9e:	64 3a 25 64 29 3a 20 41 54 4e 20 25 30 32 58 48     d:%d): ATN %02XH
     fae:	20 75 6e 65 78 70 65 63 74 65 64 0a 00               unexpected..

00000fbb <__c.4430>:
     fbb:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 3a 20 73     gpib_read_str: s
     fcb:	69 7a 65 20 3d 20 30 0a 00                          ize = 0..

00000fd4 <__c.4414>:
     fd4:	20 4d 53 41 20 25 30 32 58 68 00                     MSA %02Xh.

00000fdf <__c.4412>:
     fdf:	20 4d 54 41 20 25 30 32 58 68 00                     MTA %02Xh.

00000fea <__c.4410>:
     fea:	20 4d 4c 41 20 25 30 32 58 68 00                     MLA %02Xh.

00000ff5 <__c.4406>:
     ff5:	20 20 20 20 20 00                                        .

00000ffb <__c.4404>:
     ffb:	25 30 32 58 20 25 63 20 00                          %02X %c .

00001004 <__c.4362>:
    1004:	3c 4e 52 46 44 3d 25 64 2c 4e 44 41 56 3d 25 64     <NRFD=%d,NDAV=%d
    1014:	3e 0a 00                                            >..

00001017 <__c.4358>:
    1017:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    1027:	20 44 41 56 3d 3d 31 3e 0a 00                        DAV==1>..

00001031 <__c.4354>:
    1031:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    1041:	20 4e 44 41 43 3d 3d 31 3e 0a 00                     NDAC==1>..

0000104c <__c.4351>:
    104c:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    105c:	20 4e 52 46 44 3d 3d 30 3e 0a 00                     NRFD==0>..

00001067 <__c.4346>:
    1067:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    1077:	20 4e 52 46 44 3d 3d 31 20 26 26 20 4e 44 41 43      NRFD==1 && NDAC
    1087:	20 3d 3d 20 30 3e 0a 00                              == 0>..

0000108f <__c.4342>:
    108f:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    109f:	20 44 41 56 3d 3d 31 3e 0a 00                        DAV==1>..

000010a9 <__c.4325>:
    10a9:	67 70 69 62 5f 75 6e 72 65 61 64 3a 20 65 72 72     gpib_unread: err
    10b9:	6f 72 2c 20 63 61 6e 20 6f 6e 6c 79 20 62 65 20     or, can only be 
    10c9:	63 61 6c 6c 65 64 20 6f 6e 63 65 21 0a 00           called once!..

000010d7 <__c.4320>:
    10d7:	5b 52 45 4e 20 48 49 5d 0a 00                       [REN HI]..

000010e1 <__c.4318>:
    10e1:	5b 52 45 4e 20 4c 4f 57 5d 0a 00                    [REN LOW]..

000010ec <__c.4313>:
    10ec:	5b 49 46 43 20 53 45 4e 54 5d 0a 00                 [IFC SENT]..

000010f8 <__c.4305>:
    10f8:	5b 50 50 52 3a 25 30 32 58 48 2c 20 50 49 4e 3a     [PPR:%02XH, PIN:
    1108:	25 30 32 58 48 2c 20 44 44 52 3a 25 30 32 58 48     %02XH, DDR:%02XH
    1118:	5d 0a 00                                            ]..

0000111b <__c.4299>:
    111b:	5b 44 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [DPPR bit:%d, ma
    112b:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

00001136 <__c.4297>:
    1136:	67 70 69 62 5f 64 69 73 61 62 6c 65 5f 50 50 52     gpib_disable_PPR
    1146:	3a 20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20     : bit %d out of 
    1156:	72 61 6e 67 65 0a 00                                range..

0000115d <__c.4292>:
    115d:	5b 45 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [EPPR bit:%d, ma
    116d:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

00001178 <__c.4290>:
    1178:	67 70 69 62 5f 65 6e 61 62 6c 65 5f 50 50 52 3a     gpib_enable_PPR:
    1188:	20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20 72      bit %d out of r
    1198:	61 6e 67 65 0a 00                                   ange..

0000119e <__c.4285>:
    119e:	5b 47 50 49 42 20 53 54 41 54 45 20 49 4e 49 54     [GPIB STATE INIT
    11ae:	5d 0a 00                                            ]..

000011b1 <__c.4280>:
    11b1:	5b 47 50 49 42 20 42 55 53 5f 49 4e 49 54 5d 0a     [GPIB BUS_INIT].
	...

000011c2 <__c.4465>:
    11c2:	0a 00                                               ..

000011c4 <__c.4457>:
    11c4:	2e 00                                               ..

000011c6 <__c.4455>:
    11c6:	25 63 00                                            %c.

000011c9 <__c.4453>:
    11c9:	20 7c 20 00                                          | .

000011cd <__c.4448>:
    11cd:	20 25 30 32 58 00                                    %02X.

000011d3 <__c.4446>:
    11d3:	0a 00                                               ..

000011d5 <__c.4444>:
    11d5:	5b 44 75 6d 70 3a 20 25 64 5d 0a 00                 [Dump: %d]..

000011e1 <__c.4433>:
    11e1:	5b 50 52 49 4e 54 45 52 20 63 6c 6f 73 65 5d 0a     [PRINTER close].
	...

000011f2 <__c.4428>:
    11f2:	5b 53 41 20 25 30 32 58 48 2c 20 6c 69 73 74 65     [SA %02XH, liste
    1202:	6e 3a 25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30     n:%02XH, talk:%0
    1212:	32 58 48 5d 0a 00                                   2XH]..

00001218 <__c.4426>:
    1218:	5b 53 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [SA %02XH AMIGO]
    1228:	0a 00                                               ..

0000122a <__c.4424>:
    122a:	5b 53 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [SA %02XH SS80].
	...

0000123b <__c.4419>:
    123b:	5b 54 41 20 25 30 32 58 48 5d 0a 00                 [TA %02XH]..

00001247 <__c.4417>:
    1247:	5b 50 52 49 4e 54 45 52 20 4f 50 45 4e 5d 0a 00     [PRINTER OPEN]..

00001257 <__c.4415>:
    1257:	5b 54 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [TA %02XH PRINTE
    1267:	52 5d 0a 00                                         R]..

0000126b <__c.4413>:
    126b:	5b 54 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [TA %02XH AMIGO]
    127b:	0a 00                                               ..

0000127d <__c.4411>:
    127d:	5b 54 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [TA %02XH SS80].
	...

0000128e <__c.4409>:
    128e:	5b 55 4e 54 5d 0a 00                                [UNT]..

00001295 <__c.4404>:
    1295:	5b 4c 41 20 25 30 32 58 48 5d 0a 00                 [LA %02XH]..

000012a1 <__c.4402>:
    12a1:	5b 4c 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [LA %02XH PRINTE
    12b1:	52 5d 0a 00                                         R]..

000012b5 <__c.4400>:
    12b5:	5b 4c 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [LA %02XH SS80].
	...

000012c6 <__c.4398>:
    12c6:	5b 4c 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [LA %02XH AMIGO]
    12d6:	0a 00                                               ..

000012d8 <__c.4396>:
    12d8:	0a 00                                               ..

000012da <__c.4394>:
    12da:	5b 55 4e 4c 5d 0a 00                                [UNL]..

000012e1 <__c.4389>:
    12e1:	5b 48 50 49 42 20 28 25 30 32 58 48 29 20 6e 6f     [HPIB (%02XH) no
    12f1:	74 20 64 65 66 69 6e 65 64 5d 0a 00                 t defined]..

000012fd <__c.4387>:
    12fd:	5b 44 43 4c 5d 0a 00                                [DCL]..

00001304 <__c.4385>:
    1304:	5b 53 44 43 20 41 4d 49 47 4f 5d 0a 00              [SDC AMIGO]..

00001311 <__c.4383>:
    1311:	5b 53 44 43 20 53 53 38 30 5d 0a 00                 [SDC SS80]..

0000131d <__c.4381>:
    131d:	5b 53 44 43 5d 0a 00                                [SDC]..

00001324 <__c.4379>:
    1324:	5b 53 50 44 5d 0a 00                                [SPD]..

0000132b <__c.4377>:
    132b:	5b 53 50 45 5d 0a 00                                [SPE]..

00001332 <__c.4375>:
    1332:	5b 50 50 55 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPU unsupported
    1342:	5d 0a 00                                            ]..

00001345 <__c.4373>:
    1345:	5b 50 50 43 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPC unsupported
    1355:	5d 0a 00                                            ]..

00001358 <__c.4368>:
    1358:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    1368:	48 3d 25 30 34 58 48 5d 0a 00                       H=%04XH]..

00001372 <__c.4366>:
    1372:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    1382:	48 3d 25 30 34 58 48 20 46 41 49 4c 45 44 5d 0a     H=%04XH FAILED].
	...

00001393 <__c.4339>:
    1393:	3c 4d 45 44 49 41 20 4d 49 53 53 49 4e 47 3e 0a     <MEDIA MISSING>.
	...

000013a4 <__c.4337>:
    13a4:	3c 49 4e 54 45 52 52 55 50 54 3e 0a 00              <INTERRUPT>..

000013b1 <__c.4335>:
    13b1:	3c 42 55 53 3e 0a 00                                <BUS>..

000013b8 <__c.4333>:
    13b8:	3c 54 49 4d 45 4f 55 54 3e 0a 00                    <TIMEOUT>..

000013c3 <__c.4331>:
    13c3:	3c 49 46 43 3e 0a 00                                <IFC>..

000013ca <__c.4326>:
    13ca:	43 61 70 74 75 72 69 6e 67 20 43 6c 6f 73 65 64     Capturing Closed
    13da:	0a 00                                               ..

000013dc <__c.4324>:
    13dc:	44 6f 6e 65 0a 00                                   Done..

000013e2 <__c.4320>:
    13e2:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

000013ee <__c.4318>:
    13ee:	50 72 65 73 73 20 41 4e 59 20 6b 65 79 20 74 6f     Press ANY key to
    13fe:	20 65 78 69 74 0a 00                                 exit..

00001405 <__c.4316>:
    1405:	46 55 4c 4c 20 47 50 49 42 20 42 55 53 20 68 61     FULL GPIB BUS ha
    1415:	6e 64 73 68 61 6b 65 20 6c 6f 67 67 69 6e 67 20     ndshake logging 
    1425:	72 65 71 75 65 73 74 65 64 0a 00                    requested..

00001430 <__c.4314>:
    1430:	43 61 70 74 75 72 69 6e 67 20 47 50 49 42 20 42     Capturing GPIB B
    1440:	55 53 20 74 6f 3a 25 73 0a 00                       US to:%s..

0000144a <__c.4268>:
    144a:	43 61 72 64 20 69 73 20 77 72 69 74 65 20 70 72     Card is write pr
    145a:	6f 74 65 63 74 65 64 0a 00                          otected..

00001463 <__c.4266>:
    1463:	25 73 20 6f 70 65 6e 20 66 61 69 6c 75 72 65 0a     %s open failure.
	...

00001474 <__c.4264>:
    1474:	25 73 20 68 61 64 20 25 64 20 65 72 72 6f 72 73     %s had %d errors
    1484:	0a 00                                               ..

00001486 <__c.4482>:
    1486:	64 65 62 75 67 3d 25 30 34 58 48 0a 00              debug=%04XH..

00001493 <__c.4474>:
    1493:	67 70 69 62 20 70 72 65 66 69 78 20 69 73 20 6f     gpib prefix is o
    14a3:	70 74 69 6f 6e 61 6c 0a 67 70 69 62 20 61 64 64     ptional.gpib add
    14b3:	72 65 73 73 65 73 0a 67 70 69 62 20 63 6f 6e 66     resses.gpib conf
    14c3:	69 67 0a 67 70 69 62 20 64 65 62 75 67 20 4e 0a     ig.gpib debug N.
    14d3:	67 70 69 62 20 65 6c 61 70 73 65 64 0a 67 70 69     gpib elapsed.gpi
    14e3:	62 20 65 6c 61 70 73 65 64 5f 72 65 73 65 74 0a     b elapsed_reset.
    14f3:	67 70 69 62 20 69 66 63 0a 67 70 69 62 20 70 6c     gpib ifc.gpib pl
    1503:	6f 74 20 66 69 6c 65 6e 61 6d 65 2e 74 78 74 0a     ot filename.txt.
    1513:	67 70 69 62 20 70 6c 6f 74 5f 65 63 68 6f 0a 67     gpib plot_echo.g
    1523:	70 69 62 20 74 61 73 6b 0a 67 70 69 62 20 74 72     pib task.gpib tr
    1533:	61 63 65 20 66 69 6c 65 6e 61 6d 65 2e 74 78 74     ace filename.txt
    1543:	20 5b 42 55 53 5d 0a 0a 0a 00                        [BUS]....

0000154d <__c.4472>:
    154d:	67 70 69 62 20 68 65 6c 70 0a 00                    gpib help..

00001558 <__c.4913>:
    1558:	0a 00                                               ..

0000155a <__c.4908>:
    155a:	41 4d 49 47 4f 25 64 00                             AMIGO%d.

00001562 <__c.4906>:
    1562:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    1572:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    1582:	0a 00                                               ..

00001584 <__c.4904>:
    1584:	53 53 38 30 2d 25 64 00                             SS80-%d.

0000158c <__c.4902>:
    158c:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    159c:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    15ac:	0a 00                                               ..

000015ae <__c.4889>:
    15ae:	0a 00                                               ..

000015b0 <__c.4887>:
    15b0:	45 4e 44 0a 00                                      END..

000015b5 <__c.4882>:
    15b5:	0a 00                                               ..

000015b7 <__c.4880>:
    15b7:	45 4e 44 0a 00                                      END..

000015bc <__c.4878>:
    15bc:	20 20 45 4e 44 0a 00                                  END..

000015c3 <__c.4876>:
    15c3:	41 44 44 52 45 53 53 00                             ADDRESS.

000015cb <__c.4874>:
    15cb:	20 20 43 4f 4e 46 49 47 0a 00                         CONFIG..

000015d5 <__c.4872>:
    15d5:	50 52 49 4e 54 45 52 0a 00                          PRINTER..

000015de <__c.4870>:
    15de:	20 20 45 4e 44 0a 00                                  END..

000015e5 <__c.4868>:
    15e5:	23 20 42 4c 4f 43 4b 53 00                          # BLOCKS.

000015ee <__c.4866>:
    15ee:	43 59 4c 49 4e 44 45 52 53 00                       CYLINDERS.

000015f8 <__c.4864>:
    15f8:	48 45 41 44 53 00                                   HEADS.

000015fe <__c.4862>:
    15fe:	53 45 43 54 4f 52 53 5f 50 45 52 5f 54 52 41 43     SECTORS_PER_TRAC
    160e:	4b 00                                               K.

00001610 <__c.4860>:
    1610:	42 59 54 45 53 5f 50 45 52 5f 53 45 43 54 4f 52     BYTES_PER_SECTOR
	...

00001621 <__c.4858>:
    1621:	20 20 47 45 4f 4d 45 54 52 59 0a 00                   GEOMETRY..

0000162d <__c.4856>:
    162d:	20 20 45 4e 44 0a 00                                  END..

00001634 <__c.4854>:
    1634:	49 44 00                                            ID.

00001637 <__c.4852>:
    1637:	20 20 43 4f 4e 46 49 47 0a 00                         CONFIG..

00001641 <__c.4850>:
    1641:	20 20 45 4e 44 0a 00                                  END..

00001648 <__c.4848>:
    1648:	46 49 4c 45 00                                      FILE.

0000164d <__c.4846>:
    164d:	50 50 52 00                                         PPR.

00001651 <__c.4844>:
    1651:	41 44 44 52 45 53 53 00                             ADDRESS.

00001659 <__c.4842>:
    1659:	20 20 48 45 41 44 45 52 0a 00                         HEADER..

00001663 <__c.4840>:
    1663:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    1673:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

00001682 <__c.4838>:
    1682:	41 4d 49 47 4f 20 25 73 0a 00                       AMIGO %s..

0000168c <__c.4836>:
    168c:	20 20 45 4e 44 0a 00                                  END..

00001693 <__c.4834>:
    1693:	23 20 42 4c 4f 43 4b 53 00                          # BLOCKS.

0000169c <__c.4832>:
    169c:	49 4e 54 45 52 4c 45 41 56 45 00                    INTERLEAVE.

000016a7 <__c.4830>:
    16a7:	4d 41 58 5f 42 4c 4f 43 4b 5f 4e 55 4d 42 45 52     MAX_BLOCK_NUMBER
	...

000016b8 <__c.4828>:
    16b8:	4d 41 58 5f 53 45 43 54 4f 52 00                    MAX_SECTOR.

000016c3 <__c.4826>:
    16c3:	4d 41 58 5f 48 45 41 44 00                          MAX_HEAD.

000016cc <__c.4824>:
    16cc:	4d 41 58 5f 43 59 4c 49 4e 44 45 52 00              MAX_CYLINDER.

000016d9 <__c.4822>:
    16d9:	20 20 56 4f 4c 55 4d 45 0a 00                         VOLUME..

000016e3 <__c.4820>:
    16e3:	20 20 45 4e 44 0a 00                                  END..

000016ea <__c.4818>:
    16ea:	52 45 4d 4f 56 41 42 4c 45 5f 56 4f 4c 55 4d 45     REMOVABLE_VOLUME
    16fa:	53 00                                               S.

000016fc <__c.4816>:
    16fc:	46 49 58 45 44 5f 56 4f 4c 55 4d 45 53 00           FIXED_VOLUMES.

0000170a <__c.4814>:
    170a:	4d 41 58 49 4d 55 4d 5f 49 4e 54 45 52 4c 45 41     MAXIMUM_INTERLEA
    171a:	56 45 00                                            VE.

0000171d <__c.4812>:
    171d:	41 43 43 45 53 53 5f 54 49 4d 45 00                 ACCESS_TIME.

00001729 <__c.4810>:
    1729:	4f 50 54 49 4d 41 4c 5f 52 45 54 52 59 5f 54 49     OPTIMAL_RETRY_TI
    1739:	4d 45 00                                            ME.

0000173c <__c.4808>:
    173c:	43 4f 4e 54 49 4e 4f 55 53 5f 54 52 41 4e 53 46     CONTINOUS_TRANSF
    174c:	45 52 5f 52 41 54 45 00                             ER_RATE.

00001754 <__c.4806>:
    1754:	42 4c 4f 43 4b 5f 54 49 4d 45 00                    BLOCK_TIME.

0000175f <__c.4804>:
    175f:	42 55 52 53 54 5f 53 49 5a 45 00                    BURST_SIZE.

0000176a <__c.4802>:
    176a:	42 55 46 46 45 52 45 44 5f 42 4c 4f 43 4b 53 00     BUFFERED_BLOCKS.

0000177a <__c.4800>:
    177a:	42 59 54 45 53 5f 50 45 52 5f 42 4c 4f 43 4b 00     BYTES_PER_BLOCK.

0000178a <__c.4798>:
    178a:	44 45 56 49 43 45 5f 4e 55 4d 42 45 52 00           DEVICE_NUMBER.

00001798 <__c.4796>:
    1798:	55 4e 49 54 5f 54 59 50 45 00                       UNIT_TYPE.

000017a2 <__c.4794>:
    17a2:	20 20 55 4e 49 54 0a 00                               UNIT..

000017aa <__c.4792>:
    17aa:	20 20 45 4e 44 0a 00                                  END..

000017b1 <__c.4790>:
    17b1:	54 59 50 45 00                                      TYPE.

000017b6 <__c.4788>:
    17b6:	54 52 41 4e 53 46 45 52 5f 52 41 54 45 00           TRANSFER_RATE.

000017c4 <__c.4786>:
    17c4:	55 4e 49 54 53 5f 49 4e 53 54 41 4c 4c 45 44 00     UNITS_INSTALLED.

000017d4 <__c.4784>:
    17d4:	20 20 43 4f 4e 54 52 4f 4c 4c 45 52 0a 00             CONTROLLER..

000017e2 <__c.4782>:
    17e2:	20 20 45 4e 44 0a 00                                  END..

000017e9 <__c.4780>:
    17e9:	49 44 00                                            ID.

000017ec <__c.4778>:
    17ec:	20 20 48 45 41 44 45 52 0a 00                         HEADER..

000017f6 <__c.4776>:
    17f6:	20 20 45 4e 44 0a 00                                  END..

000017fd <__c.4774>:
    17fd:	46 49 4c 45 00                                      FILE.

00001802 <__c.4772>:
    1802:	50 50 52 00                                         PPR.

00001806 <__c.4770>:
    1806:	41 44 44 52 45 53 53 00                             ADDRESS.

0000180e <__c.4768>:
    180e:	20 20 43 4f 4e 46 49 47 0a 00                         CONFIG..

00001818 <__c.4766>:
    1818:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    1828:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

00001837 <__c.4764>:
    1837:	53 53 38 30 20 25 73 0a 00                          SS80 %s..

00001840 <__c.4761>:
    1840:	43 75 72 72 65 6e 74 20 43 6f 6e 66 69 67 75 72     Current Configur
    1850:	61 74 69 6f 6e 20 53 65 74 74 69 6e 67 73 0a 00     ation Settings..

00001860 <__c.4753>:
    1860:	0a 00                                               ..

00001862 <__c.4748>:
    1862:	20 20 50 52 49 4e 54 45 52 5f 4d 53 41 20 3d 20       PRINTER_MSA = 
    1872:	25 30 32 58 48 0a 00                                %02XH..

00001879 <__c.4746>:
    1879:	20 20 50 52 49 4e 54 45 52 5f 4d 54 41 20 3d 20       PRINTER_MTA = 
    1889:	25 30 32 58 48 0a 00                                %02XH..

00001890 <__c.4744>:
    1890:	20 20 50 52 49 4e 54 45 52 5f 4d 4c 41 20 3d 20       PRINTER_MLA = 
    18a0:	25 30 32 58 48 0a 00                                %02XH..

000018a7 <__c.4742>:
    18a7:	20 20 41 4d 49 47 4f 5f 4d 53 41 20 20 20 3d 20       AMIGO_MSA   = 
    18b7:	25 30 32 58 48 0a 00                                %02XH..

000018be <__c.4740>:
    18be:	20 20 41 4d 49 47 4f 5f 4d 54 41 20 20 20 3d 20       AMIGO_MTA   = 
    18ce:	25 30 32 58 48 0a 00                                %02XH..

000018d5 <__c.4738>:
    18d5:	20 20 41 4d 49 47 4f 5f 4d 4c 41 20 20 20 3d 20       AMIGO_MLA   = 
    18e5:	25 30 32 58 48 0a 00                                %02XH..

000018ec <__c.4736>:
    18ec:	20 20 53 53 38 30 5f 4d 53 41 20 20 20 20 3d 20       SS80_MSA    = 
    18fc:	25 30 32 58 48 0a 00                                %02XH..

00001903 <__c.4734>:
    1903:	20 20 53 53 38 30 5f 4d 54 41 20 20 20 20 3d 20       SS80_MTA    = 
    1913:	25 30 32 58 48 0a 00                                %02XH..

0000191a <__c.4732>:
    191a:	20 20 53 53 38 30 5f 4d 4c 41 20 20 20 20 3d 20       SS80_MLA    = 
    192a:	25 30 32 58 48 0a 00                                %02XH..

00001931 <__c.4729>:
    1931:	4c 69 73 74 65 6e 20 61 6e 64 20 54 61 6c 6b 20     Listen and Talk 
    1941:	41 64 64 72 65 73 73 20 53 65 74 74 69 6e 67 73     Address Settings
    1951:	0a 00                                               ..

00001953 <__c.4723>:
    1953:	20 20 20 20 25 2d 32 35 73 20 3d 20 22 25 73 22         %-25s = "%s"
    1963:	0a 00                                               ..

00001965 <__c.4712>:
    1965:	20 20 20 20 25 2d 32 35 73 20 3d 20 25 38 6c 78         %-25s = %8lx
    1975:	48 20 28 25 6c 64 29 0a 00                          H (%ld)..

0000197e <__c.4701>:
    197e:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 2a 2a 2a     Read_Config: ***
    198e:	2a 2a 2a 20 65 72 72 6f 72 73 28 25 64 29 20 2a     *** errors(%d) *
    199e:	2a 2a 2a 2a 2a 0a 00                                *****..

000019a5 <__c.4699>:
    19a5:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 72 65 61     Read_Config: rea
    19b5:	64 28 25 64 29 20 6c 69 6e 65 73 0a 00              d(%d) lines..

000019c2 <__c.4697>:
    19c2:	4d 69 73 73 69 6e 67 20 45 4e 44 20 73 74 61 74     Missing END stat
    19d2:	65 6d 65 6e 74 20 61 74 20 6c 69 6e 65 3a 25 64     ement at line:%d
    19e2:	0a 00                                               ..

000019e4 <__c.4693>:
    19e4:	55 6e 65 78 70 65 63 74 65 64 20 53 54 41 54 45     Unexpected STATE
    19f4:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1a04:	0a 00                                               ..

00001a06 <__c.4690>:
    1a06:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1a16:	20 47 45 4d 45 54 52 59 20 74 6f 6b 65 6e 3a 20      GEMETRY token: 
    1a26:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00001a36 <__c.4688>:
    1a36:	42 59 54 45 53 20 50 45 52 20 53 45 43 54 4f 52     BYTES PER SECTOR
    1a46:	3a 20 25 73 0a 00                                   : %s..

00001a4c <__c.4685>:
    1a4c:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1a5c:	20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25      CONFIG token: %
    1a6c:	73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00        s, at line:%d..

00001a7b <__c.4682>:
    1a7b:	55 6e 65 78 70 65 63 74 65 64 20 48 45 41 44 45     Unexpected HEADE
    1a8b:	52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20     R CONFIG token: 
    1a9b:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00001aab <__c.4680>:
    1aab:	53 6b 69 70 70 69 6e 67 20 25 73 2c 20 61 74 20     Skipping %s, at 
    1abb:	6c 69 6e 65 3a 25 64 0a 00                          line:%d..

00001ac4 <__c.4677>:
    1ac4:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1ad4:	20 53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73      START token: %s
    1ae4:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001af2 <__c.4674>:
    1af2:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1b02:	56 4f 4c 55 4d 45 20 74 6f 6b 65 6e 3a 20 25 73     VOLUME token: %s
    1b12:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001b20 <__c.4671>:
    1b20:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1b30:	55 4e 49 54 20 74 6f 6b 65 6e 3a 20 25 73 2c 20     UNIT token: %s, 
    1b40:	61 74 20 6c 69 6e 65 3a 25 64 0a 00                 at line:%d..

00001b4c <__c.4668>:
    1b4c:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1b5c:	43 4f 4e 54 52 4f 4c 4c 45 52 20 74 6f 6b 65 6e     CONTROLLER token
    1b6c:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1b7c:	0a 00                                               ..

00001b7e <__c.4665>:
    1b7e:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1b8e:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    1b9e:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001bac <__c.4662>:
    1bac:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1bbc:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    1bcc:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001bda <__c.4659>:
    1bda:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1bea:	53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73 2c     START token: %s,
    1bfa:	20 61 74 20 6c 69 6e 65 3a 25 64 0a 00               at line:%d..

00001c07 <__c.4656>:
    1c07:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    1c17:	45 52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a     ER CONFIG token:
    1c27:	20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a      %s, at line:%d.
	...

00001c38 <__c.4653>:
    1c38:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    1c48:	45 52 20 74 6f 6b 65 6e 3a 20 25 73 2c 20 61 74     ER token: %s, at
    1c58:	20 6c 69 6e 65 3a 25 64 0a 00                        line:%d..

00001c62 <__c.4649>:
    1c62:	55 6e 65 78 70 65 63 74 65 64 20 53 54 41 52 54     Unexpected START
    1c72:	20 74 6f 6b 65 6e 3a 20 25 73 2c 20 61 74 20 6c      token: %s, at l
    1c82:	69 6e 65 3a 25 64 0a 00                             ine:%d..

00001c8a <__c.4647>:
    1c8a:	53 6b 69 70 70 69 6e 67 20 25 73 2c 20 61 74 20     Skipping %s, at 
    1c9a:	6c 69 6e 65 3a 25 64 0a 00                          line:%d..

00001ca3 <__c.4643>:
    1ca3:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 6f 70 65     Read_Config: ope
    1cb3:	6e 28 25 73 29 20 66 61 69 6c 65 64 0a 00           n(%s) failed..

00001cc1 <__c.4641>:
    1cc1:	52 65 61 64 69 6e 67 3a 20 25 73 0a 00              Reading: %s..

00001cce <__c.4619>:
    1cce:	57 61 72 6e 69 6e 67 3a 20 25 73 20 42 59 54 45     Warning: %s BYTE
    1cde:	53 5f 50 45 52 5f 53 45 43 54 4f 52 20 21 3d 20     S_PER_SECTOR != 
    1cee:	32 35 36 2c 20 41 64 6a 75 73 74 69 6e 67 20 74     256, Adjusting t
    1cfe:	6f 20 32 35 36 0a 00                                o 256..

00001d05 <__c.4617>:
    1d05:	57 61 72 6e 69 6e 67 3a 20 25 73 20 42 59 54 45     Warning: %s BYTE
    1d15:	53 5f 50 45 52 5f 42 4c 4f 43 4b 20 21 3d 20 32     S_PER_BLOCK != 2
    1d25:	35 36 2c 20 41 64 6a 75 73 74 69 6e 67 20 74 6f     56, Adjusting to
    1d35:	20 32 35 36 0a 00                                    256..

00001d3b <__c.4604>:
    1d3b:	68 70 64 69 72 5f 70 61 72 61 6d 65 74 65 72 73     hpdir_parameters
    1d4b:	20 69 6e 76 61 6c 69 64 20 54 59 50 45 0a 00         invalid TYPE..

00001d5a <__c.4595>:
    1d5a:	6c 69 6e 65 3a 25 64 2c 20 25 73 20 69 73 20 61     line:%d, %s is a
    1d6a:	62 6f 76 65 20 72 61 6e 67 65 20 25 64 0a 00        bove range %d..

00001d79 <__c.4593>:
    1d79:	6c 69 6e 65 3a 25 64 2c 20 25 73 20 69 73 20 62     line:%d, %s is b
    1d89:	65 6c 6f 77 20 72 61 6e 67 65 20 25 64 0a 00        elow range %d..

00001d98 <__c.4591>:
    1d98:	6c 69 6e 65 3a 25 64 2c 20 6d 69 73 73 69 6e 67     line:%d, missing
    1da8:	20 76 61 6c 75 65 0a 00                              value..

00001db0 <__c.4568>:
    1db0:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 69 6e     alloc_device: in
    1dc0:	76 61 6c 69 64 20 74 79 70 65 3a 25 64 3a 25 73     valid type:%d:%s
    1dd0:	0a 00                                               ..

00001dd2 <__c.4560>:
    1dd2:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 44 65     alloc_device: De
    1de2:	76 69 63 65 20 74 61 62 6c 65 20 69 73 20 66 75     vice table is fu
    1df2:	6c 6c 0a 00                                         ll..

00001df6 <__c.4547>:
    1df6:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1e06:	65 3a 28 25 64 29 20 69 6e 76 61 6c 69 64 20 74     e:(%d) invalid t
    1e16:	79 70 65 3a 25 64 3a 25 73 0a 00                    ype:%d:%s..

00001e21 <__c.4545>:
    1e21:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1e31:	65 3a 20 69 6e 64 65 78 3a 20 25 64 20 74 79 70     e: index: %d typ
    1e41:	65 3a 25 64 3a 25 73 2c 20 73 74 61 74 65 20 3d     e:%d:%s, state =
    1e51:	3d 20 4e 55 4c 4c 0a 00                             = NULL..

00001e59 <__c.4543>:
    1e59:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1e69:	65 3a 20 69 6e 64 65 78 20 25 64 20 75 6e 69 6e     e: index %d unin
    1e79:	69 74 61 6c 69 7a 65 64 20 74 79 70 65 3a 25 64     italized type:%d
    1e89:	3a 25 73 0a 00                                      :%s..

00001e8e <__c.4541>:
    1e8e:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1e9e:	65 3a 20 69 6e 64 65 78 3a 25 64 20 74 79 70 65     e: index:%d type
    1eae:	3a 25 64 3a 25 73 2c 20 64 65 76 20 3d 3d 20 4e     :%d:%s, dev == N
    1ebe:	55 4c 4c 0a 00                                      ULL..

00001ec3 <__c.4539>:
    1ec3:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1ed3:	65 3a 20 69 6e 64 65 78 3a 25 64 20 61 64 64 72     e: index:%d addr
    1ee3:	65 73 73 3a 20 25 30 32 58 48 20 6f 75 74 20 6f     ess: %02XH out o
    1ef3:	66 20 72 61 6e 67 65 0a 00                          f range..

00001efc <__c.4537>:
    1efc:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1f0c:	65 3a 28 25 64 29 20 6f 75 74 20 6f 66 20 72 61     e:(%d) out of ra
    1f1c:	6e 67 65 0a 00                                      nge..

00001f21 <__c.3770>:
    1f21:	46 6f 75 6e 64 20 4d 6f 64 65 6c 3a 20 25 73 0a     Found Model: %s.
	...

00001f32 <__c.3768>:
    1f32:	25 73 20 25 73 0a 00                                %s %s..

00001f39 <__c.3764>:
    1f39:	45 72 72 6f 72 3a 20 68 70 64 69 72 2e 69 6e 69     Error: hpdir.ini
    1f49:	20 6e 6f 74 20 66 6f 75 6e 64 21 0a 00               not found!..

00001f56 <__c.4576>:
    1f56:	5b 53 53 38 30 20 55 6e 6b 6e 6f 77 6e 20 53 43     [SS80 Unknown SC
    1f66:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    1f76:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    1f86:	48 5d 0a 00                                         H]..

00001f8a <__c.4574>:
    1f8a:	5b 53 53 38 30 20 53 43 20 55 6e 6b 6e 6f 77 6e     [SS80 SC Unknown
    1f9a:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    1faa:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    1fba:	48 5d 0a 00                                         H]..

00001fbe <__c.4572>:
    1fbe:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    1fce:	74 5d 0a 00                                         t]..

00001fd2 <__c.4570>:
    1fd2:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

00001fe1 <__c.4568>:
    1fe1:	5b 53 53 38 30 20 52 65 70 6f 72 74 20 53 74 61     [SS80 Report Sta
    1ff1:	74 65 5d 0a 00                                      te]..

00001ff6 <__c.4566>:
    1ff6:	5b 53 53 30 30 20 45 78 65 63 75 74 65 20 53 74     [SS00 Execute St
    2006:	61 74 65 5d 0a 00                                   ate]..

0000200c <__c.4564>:
    200c:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    201c:	61 74 65 5d 0a 00                                   ate]..

00002022 <__c.4559>:
    2022:	5b 47 50 49 42 20 45 72 72 6f 72 20 52 65 74 75     [GPIB Error Retu
    2032:	72 6e 20 2d 20 57 72 69 74 65 20 45 52 52 4f 52     rn - Write ERROR
    2042:	5d 0a 00                                            ]..

00002045 <__c.4552>:
    2045:	5b 53 53 38 30 20 49 6e 63 72 65 6d 65 6e 74 20     [SS80 Increment 
    2055:	74 6f 20 28 25 6c 58 48 29 5d 0a 00                 to (%lXH)]..

00002061 <__c.4545>:
    2061:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

00002070 <__c.4543>:
    2070:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    2080:	5d 0a 00                                            ]..

00002083 <__c.4536>:
    2083:	5b 53 53 38 30 20 53 44 43 5d 0a 00                 [SS80 SDC]..

0000208f <__c.4522>:
    208f:	5b 53 53 38 30 20 71 73 74 61 74 20 25 30 32 58     [SS80 qstat %02X
    209f:	5d 0a 00                                            ]..

000020a2 <__c.4520>:
    20a2:	5b 53 53 38 30 20 71 73 74 61 74 20 73 65 6e 64     [SS80 qstat send
    20b2:	20 46 41 49 4c 45 44 5d 0a 00                        FAILED]..

000020bc <__c.4513>:
    20bc:	5b 53 53 38 30 20 53 65 65 6b 3a 25 30 38 6c 58     [SS80 Seek:%08lX
    20cc:	48 5d 0a 00                                         H]..

000020d0 <__c.4511>:
    20d0:	5b 53 53 38 30 20 53 65 65 6b 20 4f 56 45 52 46     [SS80 Seek OVERF
    20e0:	4c 4f 57 20 61 74 20 25 30 38 6c 58 48 5d 0a 00     LOW at %08lXH]..

000020f0 <__c.4506>:
    20f0:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    2100:	74 20 43 6f 6d 6d 61 6e 64 2c 20 45 72 72 6f 72     t Command, Error
    2110:	20 61 74 20 28 25 64 29 20 6f 66 20 28 25 64 29      at (%d) of (%d)
    2120:	20 4f 50 20 43 6f 64 65 73 5d 0a 00                  OP Codes]..

0000212c <__c.4503>:
    212c:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    213c:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

0000214c <__c.4501>:
    214c:	5b 53 53 38 30 20 43 61 6e 63 65 6c 20 28 25 64     [SS80 Cancel (%d
    215c:	29 5d 0a 00                                         )]..

00002160 <__c.4499>:
    2160:	5b 53 53 38 30 20 43 68 61 6e 6e 65 6c 20 49 6e     [SS80 Channel In
    2170:	64 65 70 65 6e 64 65 6e 74 20 43 6c 65 61 72 20     dependent Clear 
    2180:	28 25 64 29 5d 0a 00                                (%d)]..

00002187 <__c.4497>:
    2187:	5b 53 53 38 30 20 57 72 69 74 65 20 4c 6f 6f 70     [SS80 Write Loop
    2197:	62 61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00           back - TODO]..

000021a5 <__c.4495>:
    21a5:	5b 53 53 38 30 20 52 65 61 64 20 4c 6f 6f 70 62     [SS80 Read Loopb
    21b5:	61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00              ack - TODO]..

000021c2 <__c.4492>:
    21c2:	5b 53 53 38 30 20 48 50 2d 49 42 20 50 61 72 69     [SS80 HP-IB Pari
    21d2:	74 79 20 43 68 65 63 6b 69 6e 67 20 2d 20 54 4f     ty Checking - TO
    21e2:	44 4f 5d 0a 00                                      DO]..

000021e7 <__c.4489>:
    21e7:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    21f7:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

00002200 <__c.4487>:
    2200:	5b 47 50 49 42 20 52 65 61 64 20 45 52 52 4f 52     [GPIB Read ERROR
    2210:	5d 0a 00                                            ]..

00002213 <__c.4478>:
    2213:	5b 53 53 38 30 20 45 78 65 63 75 74 65 20 43 6f     [SS80 Execute Co
    2223:	6d 6d 61 6e 64 2c 20 45 72 72 6f 72 20 61 74 20     mmand, Error at 
    2233:	28 25 64 29 20 6f 66 20 28 25 64 29 20 4f 50 20     (%d) of (%d) OP 
    2243:	43 6f 64 65 73 5d 0a 00                             Codes]..

0000224b <__c.4475>:
    224b:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    225b:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

0000226b <__c.4473>:
    226b:	5b 53 53 38 30 20 49 6e 69 61 74 65 20 44 69 61     [SS80 Iniate Dia
    227b:	67 6e 6f 73 74 69 63 20 2d 20 54 4f 44 4f 5d 0a     gnostic - TODO].
	...

0000228c <__c.4471>:
    228c:	5b 53 53 38 30 20 52 65 71 75 65 73 74 20 53 74     [SS80 Request St
    229c:	61 74 75 73 5d 0a 00                                atus]..

000022a3 <__c.4469>:
    22a3:	5b 53 53 38 30 20 44 6f 6f 72 20 4c 6f 63 6b 20     [SS80 Door Lock 
    22b3:	2d 20 54 4f 44 4f 5d 0a 00                          - TODO]..

000022bc <__c.4467>:
    22bc:	5b 53 53 38 30 20 44 6f 6f 72 20 55 6e 4c 6f 63     [SS80 Door UnLoc
    22cc:	6b 20 2d 20 54 4f 44 4f 5d 0a 00                    k - TODO]..

000022d7 <__c.4465>:
    22d7:	5b 53 53 38 30 20 53 65 74 20 53 74 61 74 75 73     [SS80 Set Status
    22e7:	20 4d 61 73 6b 20 2d 20 54 4f 44 4f 5d 0a 00         Mask - TODO]..

000022f6 <__c.4463>:
    22f6:	5b 53 53 38 30 20 49 6e 69 74 69 61 6c 69 7a 65     [SS80 Initialize
    2306:	20 4d 65 64 69 61 20 54 4f 44 4f 5d 0a 00            Media TODO]..

00002314 <__c.4461>:
    2314:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

00002325 <__c.4459>:
    2325:	5b 53 53 38 30 20 56 61 6c 69 64 61 74 65 20 4b     [SS80 Validate K
    2335:	65 79 20 2d 20 54 4f 44 4f 5d 0a 00                 ey - TODO]..

00002341 <__c.4457>:
    2341:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 44 65     [SS80 Release De
    2351:	6e 69 65 64 20 4e 4f 2d 4f 50 5d 0a 00              nied NO-OP]..

0000235e <__c.4455>:
    235e:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 4e 4f     [SS80 Release NO
    236e:	2d 4f 50 5d 0a 00                                   -OP]..

00002374 <__c.4453>:
    2374:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2384:	20 56 65 72 69 66 79 20 2d 20 54 4f 44 4f 5d 0a      Verify - TODO].
	...

00002395 <__c.4451>:
    2395:	5b 53 53 38 30 20 53 65 74 20 52 65 74 75 72 6e     [SS80 Set Return
    23a5:	20 41 64 64 72 65 73 73 69 6e 67 20 2d 20 54 4f      Addressing - TO
    23b5:	44 4f 5d 0a 00                                      DO]..

000023ba <__c.4449>:
    23ba:	5b 53 53 38 30 20 53 65 74 20 52 65 6c 65 61 73     [SS80 Set Releas
    23ca:	65 20 4e 4f 2d 4f 50 5d 0a 00                       e NO-OP]..

000023d4 <__c.4447>:
    23d4:	5b 53 53 38 30 20 53 65 74 20 52 50 53 20 4e 4f     [SS80 Set RPS NO
    23e4:	2d 4f 50 5d 0a 00                                   -OP]..

000023ea <__c.4445>:
    23ea:	5b 53 53 38 30 20 4e 4f 2d 4f 50 5d 0a 00           [SS80 NO-OP]..

000023f8 <__c.4443>:
    23f8:	5b 53 53 38 30 20 53 65 74 20 4c 65 6e 67 74 68     [SS80 Set Length
    2408:	3a 28 25 30 38 6c 58 48 29 5d 0a 00                 :(%08lXH)]..

00002414 <__c.4441>:
    2414:	5b 53 53 38 30 20 53 65 74 20 41 64 64 72 65 73     [SS80 Set Addres
    2424:	73 3a 28 25 30 38 6c 58 48 29 5d 0a 00              s:(%08lXH)]..

00002431 <__c.4439>:
    2431:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2441:	20 57 72 69 74 65 5d 0a 00                           Write]..

0000244a <__c.4436>:
    244a:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    245a:	20 52 65 61 64 5d 0a 00                              Read]..

00002462 <__c.4434>:
    2462:	5b 53 53 38 30 20 53 65 74 20 56 6f 6c 75 6d 65     [SS80 Set Volume
    2472:	3a 20 28 25 64 29 5d 0a 00                          : (%d)]..

0000247b <__c.4431>:
    247b:	5b 53 53 38 30 20 53 65 74 20 55 6e 69 74 3a 28     [SS80 Set Unit:(
    248b:	25 64 29 5d 0a 00                                   %d)]..

00002491 <__c.4429>:
    2491:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    24a1:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

000024aa <__c.4427>:
    24aa:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    24ba:	61 74 65 20 47 50 49 42 20 52 65 61 64 20 45 52     ate GPIB Read ER
    24ca:	52 4f 52 5d 0a 00                                   ROR]..

000024d0 <__c.4418>:
    24d0:	5b 53 53 38 30 20 56 6f 6c 75 6d 65 3a 25 64 20     [SS80 Volume:%d 
    24e0:	69 6e 76 61 6c 69 64 5d 0a 00                       invalid]..

000024ea <__c.4413>:
    24ea:	5b 53 53 38 30 20 55 4e 49 54 3a 25 64 20 69 6e     [SS80 UNIT:%d in
    24fa:	76 61 6c 69 64 5d 0a 00                             valid]..

00002502 <__c.4408>:
    2502:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 56     [SS80 Describe V
    2512:	6f 6c 75 6d 65 20 46 41 49 4c 45 44 5d 0a 00        olume FAILED]..

00002521 <__c.4406>:
    2521:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 55     [SS80 Describe U
    2531:	6e 69 74 20 46 41 49 4c 45 44 5d 0a 00              nit FAILED]..

0000253e <__c.4404>:
    253e:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 43     [SS80 Describe C
    254e:	6f 6e 74 72 6f 6c 6c 65 72 20 46 41 49 4c 45 44     ontroller FAILED
    255e:	5d 0a 00                                            ]..

00002561 <__c.4402>:
    2561:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

00002572 <__c.4394>:
    2572:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    2582:	73 20 46 41 49 4c 45 44 5d 0a 00                    s FAILED]..

0000258d <__c.4392>:
    258d:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    259d:	73 5d 0a 00                                         s]..

000025a1 <__c.4382>:
    25a1:	20 20 20 20 25 64 3a 25 73 0a 00                        %d:%s..

000025ac <__c.4380>:
    25ac:	25 73 3a 0a 00                                      %s:..

000025b1 <__c.4355>:
    25b1:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    25c1:	20 57 72 69 74 65 20 57 72 6f 74 65 20 54 6f 74      Write Wrote Tot
    25d1:	61 6c 28 25 6c 78 48 29 5d 0a 00                    al(%lxH)]..

000025dc <__c.4353>:
    25dc:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    25ec:	20 57 72 69 74 65 20 44 49 44 20 4e 4f 54 20 46      Write DID NOT F
    25fc:	49 4e 49 53 48 5d 0a 00                             INISH]..

00002604 <__c.4349>:
    2604:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2614:	20 57 72 69 74 65 20 77 72 6f 74 65 28 25 30 32      Write wrote(%02
    2624:	58 48 29 5d 0a 00                                   XH)]..

0000262a <__c.4347>:
    262a:	5b 44 69 73 6b 20 57 72 69 74 65 20 45 72 72 6f     [Disk Write Erro
    263a:	72 5d 0a 00                                         r]..

0000263e <__c.4343>:
    263e:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    264e:	5d 0a 00                                            ]..

00002651 <__c.4341>:
    2651:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2661:	20 57 72 69 74 65 20 61 74 20 25 30 38 6c 58 48      Write at %08lXH
    2671:	28 25 6c 58 48 29 5d 0a 00                          (%lXH)]..

0000267a <__c.4329>:
    267a:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    268a:	65 61 64 20 54 6f 74 61 6c 28 25 6c 58 48 29 20     ead Total(%lXH) 
    269a:	62 79 74 65 73 5d 0a 00                             bytes]..

000026a2 <__c.4327>:
    26a2:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    26b2:	65 61 64 20 44 49 44 20 4e 4f 54 20 46 49 4e 49     ead DID NOT FINI
    26c2:	53 48 5d 0a 00                                      SH]..

000026c7 <__c.4322>:
    26c7:	5b 53 53 38 30 20 47 50 49 42 20 57 72 69 74 65     [SS80 GPIB Write
    26d7:	20 57 72 72 6f 72 5d 0a 00                           Wrror]..

000026e0 <__c.4320>:
    26e0:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    26f0:	45 72 72 6f 72 5d 0a 00                             Error]..

000026f8 <__c.4318>:
    26f8:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    2708:	25 30 32 58 48 20 62 79 74 65 73 5d 0a 00           %02XH bytes]..

00002716 <__c.4316>:
    2716:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2726:	20 52 65 61 64 20 61 74 20 25 30 38 6c 58 48 28      Read at %08lXH(
    2736:	25 6c 58 48 29 5d 0a 00                             %lXH)]..

0000273e <__c.4299>:
    273e:	5b 53 53 38 30 20 45 58 45 43 20 73 74 61 74 65     [SS80 EXEC state
    274e:	3a 25 64 20 65 72 72 6f 72 5d 0a 00                 :%d error]..

0000275a <__c.4283>:
    275a:	5b 53 53 38 30 20 25 30 32 58 48 20 49 4e 49 54     [SS80 %02XH INIT
    276a:	5d 0a 00                                            ]..

0000276d <__c.4258>:
    276d:	5b 53 53 38 30 20 54 65 73 74 20 44 6f 6e 65 5d     [SS80 Test Done]
    277d:	0a 00                                               ..

0000277f <__c.4256>:
    277f:	5b 53 53 38 30 20 54 65 73 74 5d 0a 00              [SS80 Test]..

0000278c <__c.4413>:
    278c:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    279c:	65 71 75 65 73 74 20 4c 6f 67 69 63 61 6c 20 41     equest Logical A
    27ac:	64 64 72 65 73 73 5d 0a 00                          ddress]..

000027b5 <__c.4410>:
    27b5:	5b 41 4d 49 47 4f 20 45 78 69 63 75 74 65 20 52     [AMIGO Exicute R
    27c5:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 55 6e     equest Status Un
    27d5:	62 75 66 66 65 72 65 64 5d 0a 00                    buffered]..

000027e0 <__c.4407>:
    27e0:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    27f0:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 42 75     equest Status Bu
    2800:	66 66 65 72 65 64 5d 0a 00                          ffered]..

00002809 <__c.4402>:
    2809:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    2819:	72 69 74 65 20 42 75 66 66 65 72 65 64 5d 0a 00     rite Buffered]..

00002829 <__c.4399>:
    2829:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 49     [AMIGO Execute I
    2839:	6e 69 74 69 61 6c 69 7a 65 5d 0a 00                 nitialize]..

00002845 <__c.4396>:
    2845:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    2855:	72 69 74 65 20 55 6e 62 75 66 66 65 72 65 64 5d     rite Unbuffered]
    2865:	0a 00                                               ..

00002867 <__c.4393>:
    2867:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2877:	65 61 64 20 42 75 66 66 65 72 65 64 5d 0a 00        ead Buffered]..

00002886 <__c.4390>:
    2886:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2896:	65 61 64 20 55 6e 62 75 66 66 65 72 65 64 5d 0a     ead Unbuffered].
	...

000028a7 <__c.4387>:
    28a7:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 43     [AMIGO Execute C
    28b7:	6f 6c 64 20 4c 6f 61 64 20 52 65 61 64 5d 0a 00     old Load Read]..

000028c7 <__c.4383>:
    28c7:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 28 25     [AMIGO Execute(%
    28d7:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    28e7:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    28f7:	0a 00                                               ..

000028f9 <__c.4378>:
    28f9:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 5d 0a 00     [AMIGO Format]..

00002909 <__c.4375>:
    2909:	5b 41 4d 49 47 4f 20 52 65 61 64 20 42 75 66 66     [AMIGO Read Buff
    2919:	65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00        ered Command]..

00002928 <__c.4373>:
    2928:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    2938:	74 61 74 75 73 20 55 6e 62 75 66 66 65 72 65 64     tatus Unbuffered
    2948:	20 43 6f 6d 6d 61 6e 64 5d 0a 00                     Command]..

00002953 <__c.4371>:
    2953:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 42 75 66     [AMIGO Write Buf
    2963:	66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00     fered Command]..

00002973 <__c.4369>:
    2973:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 4c     [AMIGO Request L
    2983:	6f 67 69 63 61 6c 20 41 64 64 72 65 73 73 20 43     ogical Address C
    2993:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

0000299c <__c.4367>:
    299c:	5b 41 4d 49 47 4f 20 49 6e 69 74 69 61 6c 69 7a     [AMIGO Initializ
    29ac:	65 20 43 6f 6d 6d 61 6e 64 5d 0a 00                 e Command]..

000029b8 <__c.4365>:
    29b8:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 55 6e 62     [AMIGO Write Unb
    29c8:	75 66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d     uffered Command]
    29d8:	0a 00                                               ..

000029da <__c.4363>:
    29da:	5b 41 4d 49 47 4f 20 56 65 72 69 66 79 5d 0a 00     [AMIGO Verify]..

000029ea <__c.4360>:
    29ea:	5b 41 4d 49 47 4f 20 52 65 61 64 20 55 6e 62 75     [AMIGO Read Unbu
    29fa:	66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a     ffered Command].
	...

00002a0b <__c.4358>:
    2a0b:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    2a1b:	74 61 74 75 73 20 42 75 66 66 65 72 65 64 20 43     tatus Buffered C
    2a2b:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

00002a34 <__c.4356>:
    2a34:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    2a44:	36 5d 0a 00                                         6]..

00002a48 <__c.4353>:
    2a48:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    2a58:	35 5d 0a 00                                         5]..

00002a5c <__c.4350>:
    2a5c:	5b 41 4d 49 47 4f 20 43 6f 6c 64 20 4c 6f 61 64     [AMIGO Cold Load
    2a6c:	20 52 65 61 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00      Read Command]..

00002a7c <__c.4347>:
    2a7c:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    2a8c:	30 32 58 48 29 3a 20 47 50 49 42 20 72 65 61 64     02XH): GPIB read
    2a9c:	20 62 79 74 65 73 3a 25 30 32 58 48 5d 0a 00         bytes:%02XH]..

00002aab <__c.4345>:
    2aab:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    2abb:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

00002acc <__c.4343>:
    2acc:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    2adc:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

00002aed <__c.4341>:
    2aed:	5b 41 4d 49 47 4f 5f 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO_Command:G
    2afd:	50 49 42 20 77 72 69 74 65 20 65 72 72 6f 72 5d     PIB write error]
    2b0d:	0a 00                                               ..

00002b0f <__c.4339>:
    2b0f:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    2b1f:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    2b2f:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    2b3f:	0a 00                                               ..

00002b41 <__c.4327>:
    2b41:	5b 45 20 20 20 41 6d 69 67 6f 20 45 52 52 4f 52     [E   Amigo ERROR
    2b51:	20 73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58      secondary: %02X
    2b61:	48 2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20     H, state:%02XH, 
    2b71:	6c 69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c     listening:%02XH,
    2b81:	20 74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a      talking:%02XH].
	...

00002b92 <__c.4325>:
    2b92:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    2ba2:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2bb2:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2bc2:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2bd2:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002be2 <__c.4323>:
    2be2:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    2bf2:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2c02:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2c12:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2c22:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002c32 <__c.4321>:
    2c32:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    2c42:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2c52:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2c62:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2c72:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002c82 <__c.4316>:
    2c82:	5b 55 20 41 6d 69 67 6f 20 54 4f 44 4f 20 73 65     [U Amigo TODO se
    2c92:	63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48 2c 20     condary: %02XH, 
    2ca2:	73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f 70 63     state:%02XH, opc
    2cb2:	6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e 3a 25     ode:%02XH, len:%
    2cc2:	33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a 25 30     3d, listening:%0
    2cd2:	32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25 30 32     2XH, talking:%02
    2ce2:	58 48 5d 0a 00                                      XH]..

00002ce7 <__c.4314>:
    2ce7:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    2cf7:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2d07:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2d17:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2d27:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2d37:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2d47:	30 32 58 48 5d 0a 00                                02XH]..

00002d4e <__c.4312>:
    2d4e:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    2d5e:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2d6e:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2d7e:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2d8e:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2d9e:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2dae:	30 32 58 48 5d 0a 00                                02XH]..

00002db5 <__c.4310>:
    2db5:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    2dc5:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2dd5:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2de5:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2df5:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2e05:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2e15:	30 32 58 48 5d 0a 00                                02XH]..

00002e1c <__c.4303>:
    2e1c:	5b 41 4d 49 47 4f 20 43 6c 65 61 72 5d 0a 00        [AMIGO Clear]..

00002e2b <__c.4299>:
    2e2b:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2e3b:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002e45 <__c.4297>:
    2e45:	5b 41 4d 49 47 4f 20 57 61 6b 65 75 70 5d 0a 00     [AMIGO Wakeup]..

00002e55 <__c.4290>:
    2e55:	5b 44 53 4a 20 25 30 32 58 48 5d 0a 00              [DSJ %02XH]..

00002e62 <__c.4288>:
    2e62:	5b 41 49 4d 47 4f 3a 20 44 53 4a 20 73 65 6e 64     [AIMGO: DSJ send
    2e72:	20 66 61 69 6c 65 64 5d 0a 00                        failed]..

00002e7c <__c.4281>:
    2e7c:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 47 50 49     [AMIGO Write GPI
    2e8c:	42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a 00        B read error]..

00002e9b <__c.4274>:
    2e9b:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2eab:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002eb5 <__c.4267>:
    2eb5:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 20 44 6f     [AMIGO Format Do
    2ec5:	6e 65 5d 0a 00                                      ne]..

00002eca <__c.4263>:
    2eca:	5b 41 4d 49 47 4f 20 66 6f 72 6d 61 74 5d 0a 00     [AMIGO format]..

00002eda <__c.4222>:
    2eda:	5b 41 4d 49 47 4f 20 25 73 2c 20 50 3a 25 30 38     [AMIGO %s, P:%08
    2eea:	6c 78 48 2c 20 55 3a 25 64 20 43 3a 25 64 20 48     lxH, U:%d C:%d H
    2efa:	3a 25 64 20 53 3a 25 64 5d 0a 00                    :%d S:%d]..

00002f05 <__c.4252>:
    2f05:	5b 41 4d 49 47 4f 20 76 65 72 69 66 79 20 50 3a     [AMIGO verify P:
    2f15:	25 30 38 6c 58 48 2c 20 73 65 63 74 6f 72 73 3a     %08lXH, sectors:
    2f25:	25 30 34 58 48 5d 0a 00                             %04XH]..

00002f2d <__c.4229>:
    2f2d:	5b 41 4d 49 47 4f 20 25 73 20 70 6f 73 20 4f 56     [AMIGO %s pos OV
    2f3d:	45 52 46 4c 4f 57 5d 0a 00                          ERFLOW]..

00002f46 <__c.4215>:
    2f46:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2f56:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002f60 <__c.4213>:
    2f60:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 73 74 61 74     [AMIGO send stat
    2f70:	75 73 5d 0a 00                                      us]..

00002f75 <__c.4207>:
    2f75:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2f85:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002f8f <__c.4205>:
    2f8f:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 6c 6f 67 69     [AMIGO send logi
    2f9f:	63 61 6c 20 61 64 64 72 65 73 73 5d 0a 00           cal address]..

00002fad <__c.4199>:
    2fad:	5b 41 4d 49 47 4f 20 72 65 71 75 65 73 74 20 73     [AMIGO request s
    2fbd:	74 61 74 75 73 5d 0a 00                             tatus]..

00002fc5 <__c.4221>:
    2fc5:	72 65 63 65 69 76 65 64 3a 5b 25 64 5d 20 62 79     received:[%d] by
    2fd5:	74 65 73 0a 00                                      tes..

00002fda <__c.4219>:
    2fda:	72 65 63 65 69 76 65 64 3a 5b 25 64 5d 20 25 73     received:[%d] %s
    2fea:	0a 00                                               ..

00002fec <__c.4217>:
    2fec:	72 65 63 65 69 76 65 64 3a 5b 25 64 5d 20 25 73     received:[%d] %s
    2ffc:	0a 00                                               ..

00002ffe <__c.4212>:
    2ffe:	70 72 69 6e 74 65 72 20 6e 6f 74 20 64 65 66 69     printer not defi
    300e:	6e 65 64 0a 00                                      ned..

00003013 <__c.4203>:
    3013:	5b 53 43 20 50 52 49 4e 54 45 52 20 54 61 6c 6b     [SC PRINTER Talk
    3023:	3a 20 25 30 32 58 48 5d 0a 00                       : %02XH]..

0000302d <__c.4201>:
    302d:	5b 53 43 20 50 52 49 4e 54 45 52 20 4c 69 73 74     [SC PRINTER List
    303d:	65 6e 3a 20 25 30 32 58 48 5d 0a 00                 en: %02XH]..

00003049 <__c.4196>:
    3049:	25 30 38 6c 64 0d 00                                %08ld..

00003050 <__c.4190>:
    3050:	77 72 69 74 65 20 66 61 69 6c 65 64 3a 20 77 61     write failed: wa
    3060:	6e 74 65 64 20 25 64 2c 20 67 6f 74 3a 25 64 0a     nted %d, got:%d.
	...

00003071 <__c.4184>:
    3071:	0a 44 4f 4e 45 3a 20 25 30 38 6c 64 0a 00           .DONE: %08ld..

0000307f <__c.4182>:
    307f:	45 52 52 4f 52 20 64 75 72 72 69 6e 67 20 77 72     ERROR durring wr
    308f:	69 74 65 0a 00                                      ite..

00003094 <__c.4176>:
    3094:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

000030a0 <__c.4174>:
    30a0:	43 61 70 74 75 72 69 6e 67 20 70 6c 6f 74 20 74     Capturing plot t
    30b0:	6f 3a 25 73 0a 00                                   o:%s..

000030b6 <__c.4172>:
    30b6:	2f 70 6c 6f 74 2d 25 30 32 64 25 73 25 30 34 64     /plot-%02d%s%04d
    30c6:	2d 25 30 32 64 25 30 32 64 25 30 32 64 2e 70 6c     -%02d%02d%02d.pl
    30d6:	74 00                                               t.

000030d8 <__c.4840>:
    30d8:	09 46 6f 72 6d 61 74 69 6e 67 3a 20 77 72 6f 74     .Formating: wrot
    30e8:	65 20 25 6c 64 20 73 65 63 74 6f 72 73 0a 00        e %ld sectors..

000030f7 <__c.4838>:
    30f7:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    3107:	3a 20 73 65 63 74 6f 72 73 20 69 73 20 30 0a 00     : sectors is 0..

00003117 <__c.4836>:
    3117:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    3127:	3a 20 64 69 72 73 65 63 74 6f 72 73 20 69 73 20     : dirsectors is 
    3137:	30 0a 00                                            0..

0000313a <__c.4834>:
    313a:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    314a:	3a 20 6c 69 66 6c 61 62 65 6c 20 69 73 20 65 6d     : liflabel is em
    315a:	70 74 79 0a 00                                      pty..

0000315f <__c.4832>:
    315f:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    316f:	3a 20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69     : lifimagename i
    317f:	73 20 65 6d 70 74 79 0a 00                          s empty..

00003188 <__c.4819>:
    3188:	72 65 6e 61 6d 65 64 3a 20 25 31 30 73 20 74 6f     renamed: %10s to
    3198:	20 25 31 30 73 0a 00                                 %10s..

0000319f <__c.4817>:
    319f:	6c 69 66 5f 72 65 6e 61 6d 65 3a 5b 25 73 5d 20     lif_rename:[%s] 
    31af:	6c 69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f     lif name:[%s] no
    31bf:	74 20 66 6f 75 6e 64 0a 00                          t found..

000031c8 <__c.4815>:
    31c8:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    31d8:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 63 6f 6e      new lifname con
    31e8:	74 61 69 6e 73 20 62 61 64 20 63 68 61 72 61 63     tains bad charac
    31f8:	74 65 72 73 0a 00                                   ters..

000031fe <__c.4813>:
    31fe:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    320e:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 69 73 20      new lifname is 
    321e:	65 6d 70 74 79 0a 00                                empty..

00003225 <__c.4811>:
    3225:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    3235:	20 6f 6c 64 20 6c 69 66 6e 61 6d 65 20 69 73 20      old lifname is 
    3245:	65 6d 70 74 79 0a 00                                empty..

0000324c <__c.4809>:
    324c:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    325c:	20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69 73      lifimagename is
    326c:	20 65 6d 70 74 79 0a 00                              empty..

00003274 <__c.4800>:
    3274:	44 65 6c 65 74 65 64 3a 20 25 31 30 73 0a 00        Deleted: %10s..

00003283 <__c.4798>:
    3283:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 20 6c     LIF image:[%s] l
    3293:	69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f 74     if name:[%s] not
    32a3:	20 66 6f 75 6e 64 0a 00                              found..

000032ab <__c.4796>:
    32ab:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    32bb:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 0a 00        LIF name:[%s]..

000032ca <__c.4794>:
    32ca:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    32da:	66 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     fname is empty..

000032ea <__c.4792>:
    32ea:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    32fa:	66 69 6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d     fimagename is em
    330a:	70 74 79 0a 00                                      pty..

0000330f <__c.4784>:
    330f:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

0000331d <__c.4779>:
    331d:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

0000332b <__c.4777>:
    332b:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    333b:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    334b:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

0000335b <__c.4775>:
    335b:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    336b:	73 0a 00                                            s..

0000336e <__c.4773>:
    336e:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    337e:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    338e:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

0000339d <__c.4771>:
    339d:	6c 69 66 5f 61 64 64 3a 20 75 73 65 72 66 69 6c     lif_add: userfil
    33ad:	65 20 69 73 20 65 6d 70 74 79 0a 00                 e is empty..

000033b9 <__c.4769>:
    33b9:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 6e 61 6d 65     lif_add: lifname
    33c9:	20 69 73 20 65 6d 70 74 79 0a 00                     is empty..

000033d4 <__c.4767>:
    33d4:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 69 6d 61 67     lif_add: lifimag
    33e4:	65 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     ename is empty..

000033f4 <__c.4750>:
    33f4:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

00003402 <__c.4745>:
    3402:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003410 <__c.4743>:
    3410:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    3420:	73 0a 00                                            s..

00003423 <__c.4741>:
    3423:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    3433:	75 6e 64 3a 25 73 0a 00                             und:%s..

0000343b <__c.4724>:
    343b:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

00003449 <__c.4721>:
    3449:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    3459:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    3469:	20 65 72 72 6f 72 0a 00                              error..

00003471 <__c.4713>:
    3471:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

0000347f <__c.4711>:
    347f:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    348f:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    349f:	20 65 72 72 6f 72 0a 00                              error..

000034a7 <__c.4708>:
    34a7:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    34b7:	5f 61 73 5f 61 73 63 69 69 3a 20 75 6e 65 78 70     _as_ascii: unexp
    34c7:	65 63 74 65 64 20 63 6f 6e 74 72 6f 6c 20 62 79     ected control by
    34d7:	74 65 3a 5b 25 30 32 58 48 5d 20 40 20 6f 66 66     te:[%02XH] @ off
    34e7:	73 65 74 3a 20 25 38 6c 78 2c 20 69 6e 64 3a 25     set: %8lx, ind:%
    34f7:	30 32 58 48 0a 00                                   02XH..

000034fd <__c.4706>:
    34fd:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    350d:	5f 61 73 5f 61 73 63 69 69 3a 20 73 74 72 69 6e     _as_ascii: strin
    351d:	67 20 74 6f 6f 20 62 69 67 20 73 69 7a 65 20 3d     g too big size =
    352d:	20 25 64 0a 00                                       %d..

00003532 <__c.4702>:
    3532:	45 78 74 72 61 63 74 69 6e 67 3a 20 25 73 0a 00     Extracting: %s..

00003542 <__c.4700>:
    3542:	46 69 6c 65 20 25 73 20 68 61 73 20 77 72 6f 6e     File %s has wron
    3552:	67 20 74 79 70 65 3a 5b 25 30 34 58 48 5d 20 65     g type:[%04XH] e
    3562:	78 70 65 63 74 65 64 20 30 78 45 30 31 30 2e 2e     xpected 0xE010..
    3572:	30 78 45 30 31 33 0a 00                             0xE013..

0000357a <__c.4698>:
    357a:	4c 49 46 20 46 69 6c 65 20 6e 6f 74 20 66 6f 75     LIF File not fou
    358a:	6e 64 3a 25 73 0a 00                                nd:%s..

00003591 <__c.4696>:
    3591:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    35a1:	75 6e 64 3a 25 73 0a 00                             und:%s..

000035a9 <__c.4672>:
    35a9:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

000035b7 <__c.4670>:
    35b7:	46 69 6c 65 20 53 65 63 74 6f 72 73 3a 20 20 20     File Sectors:   
    35c7:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

000035d0 <__c.4668>:
    35d0:	46 69 72 73 74 20 53 65 63 74 6f 72 3a 20 20 20     First Sector:   
    35e0:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

000035e9 <__c.4666>:
    35e9:	49 6e 64 65 78 3a 20 20 20 20 20 20 20 20 20 20     Index:          
    35f9:	20 20 25 34 64 0a 00                                  %4d..

00003600 <__c.4664>:
    3600:	4e 61 6d 65 3a 20 20 20 20 20 20 20 20 20 20 20     Name:           
    3610:	20 20 20 25 73 0a 00                                   %s..

00003617 <__c.4662>:
    3617:	4e 65 77 20 44 69 72 65 63 74 6f 72 79 20 49 6e     New Directory In
    3627:	66 6f 72 6d 61 74 69 6f 6e 20 41 46 54 45 52 20     formation AFTER 
    3637:	77 72 69 74 65 0a 00                                write..

0000363e <__c.4660>:
    363e:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    364e:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    365e:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

0000366e <__c.4658>:
    366e:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    367e:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    368e:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

0000369d <__c.4656>:
    369d:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    36ad:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    36bd:	66 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 0a 00     file not found..

000036cd <__c.4654>:
    36cd:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    36dd:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    36ed:	66 69 6c 65 20 69 73 20 65 6d 70 74 79 0a 00        file is empty..

000036fc <__c.4652>:
    36fc:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    370c:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 6e     le_as_e010: lifn
    371c:	61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00           ame is empty..

0000372a <__c.4650>:
    372a:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    373a:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 69     le_as_e010: lifi
    374a:	6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d 70 74     magename is empt
    375a:	79 0a 00                                            y..

0000375d <__c.4636>:
    375d:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

0000376b <__c.4634>:
    376b:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003779 <__c.4629>:
    3779:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003787 <__c.4612>:
    3787:	45 78 70 65 63 74 65 64 20 73 65 63 74 6f 72 20     Expected sector 
    3797:	62 6f 75 6e 64 72 79 2c 20 6f 66 66 73 65 74 3a     boundry, offset:
    37a7:	25 64 0a 00                                         %d..

000037ab <__c.4595>:
    37ab:	6c 69 66 5f 65 30 31 30 5f 64 61 70 5f 73 65 63     lif_e010_dap_sec
    37bb:	74 6f 72 3a 20 65 78 70 65 63 74 65 64 20 73 65     tor: expected se
    37cb:	63 74 6f 72 20 62 6f 75 6e 64 72 79 3a 20 6f 66     ctor boundry: of
    37db:	66 73 65 74 3a 25 64 0a 00                          fset:%d..

000037e4 <__c.4581>:
    37e4:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    37f4:	73 5d 20 6c 69 66 6c 61 62 65 6c 20 74 6f 6f 20     s] liflabel too 
    3804:	62 69 67 0a 00                                      big..

00003809 <__c.4579>:
    3809:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    3819:	73 5d 20 69 6e 76 61 6c 69 64 20 63 68 61 72 61     s] invalid chara
    3829:	63 74 65 72 73 0a 00                                cters..

00003830 <__c.4572>:
    3830:	25 38 6c 64 20 46 72 65 65 20 73 65 63 74 6f 72     %8ld Free sector
    3840:	73 0a 00                                            s..

00003843 <__c.4570>:
    3843:	25 38 6c 64 20 55 73 65 64 20 73 65 63 74 6f 72     %8ld Used sector
    3853:	73 0a 00                                            s..

00003856 <__c.4568>:
    3856:	25 38 6c 64 20 44 69 72 20 20 73 65 63 74 6f 72     %8ld Dir  sector
    3866:	73 0a 00                                            s..

00003869 <__c.4566>:
    3869:	25 38 6c 64 20 44 69 72 20 20 73 74 61 72 74 0a     %8ld Dir  start.
	...

0000387a <__c.4564>:
    387a:	25 38 6c 64 20 50 75 72 67 65 64 0a 00              %8ld Purged..

00003887 <__c.4562>:
    3887:	25 38 6c 64 20 46 69 6c 65 73 0a 00                 %8ld Files..

00003893 <__c.4560>:
    3893:	0a 00                                               ..

00003895 <__c.4557>:
    3895:	25 2d 31 30 73 20 20 25 30 34 58 68 20 20 20 20     %-10s  %04Xh    
    38a5:	20 20 25 38 6c 58 68 20 20 20 25 39 6c 64 25 63       %8lXh   %9ld%c
    38b5:	20 20 20 20 20 20 25 34 64 20 20 20 25 73 0a 00           %4d   %s..

000038c5 <__c.4555>:
    38c5:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    38d5:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    38e5:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    38f5:	6f 72 73 3a 25 6c 64 20 21 3d 20 46 69 6c 65 53     ors:%ld != FileS
    3905:	65 63 74 6f 72 73 3a 25 6c 64 0a 00                 ectors:%ld..

00003911 <__c.4552>:
    3911:	4e 41 4d 45 20 20 20 20 20 20 20 20 20 54 59 50     NAME         TYP
    3921:	45 20 20 20 53 54 41 52 54 20 53 45 43 54 4f 52     E   START SECTOR
    3931:	20 20 20 20 20 20 20 20 53 49 5a 45 20 20 20 20             SIZE    
    3941:	52 45 43 53 49 5a 45 20 20 20 44 41 54 45 0a 00     RECSIZE   DATE..

00003951 <__c.4550>:
    3951:	56 6f 6c 75 6d 65 3a 5b 25 73 5d 20 44 61 74 65     Volume:[%s] Date
    3961:	3a 5b 25 73 5d 0a 00                                :[%s]..

00003968 <__c.4540>:
    3968:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3978:	5b 25 73 5d 20 65 72 72 6f 72 20 64 69 72 65 63     [%s] error direc
    3988:	74 6f 72 79 20 63 68 65 63 6b 20 66 61 69 6c 65     tory check faile
    3998:	64 0a 00                                            d..

0000399b <__c.4538>:
    399b:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    39ab:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    39bb:	65 20 76 61 6c 69 64 61 74 65 20 66 61 69 6c 65     e validate faile
    39cb:	64 0a 00                                            d..

000039ce <__c.4536>:
    39ce:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    39de:	5b 25 73 5d 20 65 72 72 6f 72 20 72 65 61 64 20     [%s] error read 
    39ee:	76 6f 6c 75 6d 65 20 68 65 61 64 65 72 20 66 61     volume header fa
    39fe:	69 6c 65 64 0a 00                                   iled..

00003a04 <__c.4534>:
    3a04:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3a14:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    3a24:	65 20 68 65 61 64 65 72 20 61 72 65 61 20 74 6f     e header area to
    3a34:	6f 20 73 6d 61 6c 6c 3a 5b 25 6c 64 5d 0a 00        o small:[%ld]..

00003a43 <__c.4521>:
    3a43:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 69 6e 64 65     lif_newdir: inde
    3a53:	78 3a 5b 25 64 5d 20 61 64 64 69 6e 67 20 61 74     x:[%d] adding at
    3a63:	3a 5b 25 6c 64 5d 74 6f 20 70 75 72 67 65 64 20     :[%ld]to purged 
    3a73:	73 70 61 63 65 3a 5b 25 6c 64 5d 20 73 65 63 74     space:[%ld] sect
    3a83:	6f 72 73 2c 20 66 72 65 65 3a 5b 25 6c 64 5d 0a     ors, free:[%ld].
	...

00003a94 <__c.4518>:
    3a94:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    3aa4:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    3ab4:	65 3a 5b 25 6c 64 5d 0a 00                          e:[%ld]..

00003abd <__c.4516>:
    3abd:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    3acd:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    3add:	65 3a 5b 25 6c 64 5d 20 66 6f 72 20 73 69 7a 65     e:[%ld] for size
    3aed:	3a 5b 25 6c 64 5d 0a 00                             :[%ld]..

00003af5 <__c.4504>:
    3af5:	6c 69 66 5f 75 70 64 61 74 65 5f 66 72 65 65 3a     lif_update_free:
    3b05:	5b 25 73 5d 20 65 72 72 6f 72 20 70 72 65 76 69     [%s] error previ
    3b15:	6f 75 73 20 72 65 63 6f 72 64 20 66 69 6c 65 20     ous record file 
    3b25:	61 72 65 61 20 6f 76 65 72 6c 61 70 73 20 74 68     area overlaps th
    3b35:	69 73 20 6f 6e 65 3a 5b 25 73 5d 0a 00              is one:[%s]..

00003b42 <__c.4479>:
    3b42:	6c 69 66 5f 63 68 65 63 6b 5f 64 69 72 3a 20 65     lif_check_dir: e
    3b52:	72 72 6f 72 2c 20 69 6e 64 65 78 3a 25 64 0a 00     rror, index:%d..

00003b62 <__c.4470>:
    3b62:	6c 69 66 5f 63 68 65 63 6b 64 69 72 69 6e 64 65     lif_checkdirinde
    3b72:	78 3a 5b 25 73 5d 20 64 69 72 65 63 6f 72 79 20     x:[%s] direcory 
    3b82:	69 6e 64 65 78 3a 5b 25 64 5d 20 6f 75 74 20 6f     index:[%d] out o
    3b92:	66 20 62 6f 75 6e 64 73 0a 00                       f bounds..

00003b9c <__c.4451>:
    3b9c:	09 57 72 6f 74 65 3a 20 25 6c 64 0a 00              .Wrote: %ld..

00003ba9 <__c.4446>:
    3ba9:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

00003bb6 <__c.4441>:
    3bb6:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

00003bc3 <__c.4433>:
    3bc3:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

00003bd0 <__c.4431>:
    3bd0:	43 72 65 61 74 69 6e 67 3a 25 73 2c 20 4c 61 62     Creating:%s, Lab
    3be0:	65 6c 3a 5b 25 73 5d 2c 20 44 69 72 65 63 74 6f     el:[%s], Directo
    3bf0:	72 79 20 53 74 61 72 74 20 25 6c 64 2c 20 44 69     ry Start %ld, Di
    3c00:	72 65 63 74 6f 72 79 20 53 69 7a 65 3a 20 25 6c     rectory Size: %l
    3c10:	64 2c 20 46 69 6c 65 20 53 65 63 74 6f 72 73 3a     d, File Sectors:
    3c20:	25 6c 64 0a 00                                      %ld..

00003c25 <__c.4415>:
    3c25:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3c35:	73 5d 20 69 6e 76 61 6c 69 64 20 73 65 63 74 6f     s] invalid secto
    3c45:	72 20 73 69 7a 65 3a 25 6c 64 0a 00                 r size:%ld..

00003c51 <__c.4413>:
    3c51:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3c61:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3c71:	79 74 65 73 20 3d 3d 20 30 0a 00                    ytes == 0..

00003c7c <__c.4411>:
    3c7c:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3c8c:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    3c9c:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3cac:	6f 72 73 3a 25 6c 64 20 3c 20 46 69 6c 65 53 65     ors:%ld < FileSe
    3cbc:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003cc7 <__c.4409>:
    3cc7:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3cd7:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3ce7:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3cf7:	6f 72 73 3a 25 6c 64 20 3e 20 46 69 6c 65 53 65     ors:%ld > FileSe
    3d07:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003d12 <__c.4407>:
    3d12:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3d22:	73 5d 20 69 6e 76 61 6c 69 64 20 56 6f 6c 75 6d     s] invalid Volum
    3d32:	65 20 4e 75 6d 62 65 72 3a 25 58 68 0a 00           e Number:%Xh..

00003d40 <__c.4405>:
    3d40:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3d50:	73 5d 20 69 6e 76 61 6c 69 64 20 65 6e 64 20 73     s] invalid end s
    3d60:	65 63 74 6f 72 3a 25 6c 58 68 20 3e 20 74 6f 74     ector:%lXh > tot
    3d70:	61 6c 20 73 65 63 74 6f 72 73 3a 25 6c 58 68 0a     al sectors:%lXh.
	...

00003d81 <__c.4403>:
    3d81:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3d91:	73 5d 20 69 6e 76 61 6c 69 64 20 73 74 61 72 74     s] invalid start
    3da1:	20 73 65 63 74 6f 72 3a 25 6c 58 68 20 3c 20 66      sector:%lXh < f
    3db1:	69 65 20 61 72 65 61 20 73 74 61 72 74 3a 25 6c     ie area start:%l
    3dc1:	58 68 0a 00                                         Xh..

00003dc5 <__c.4401>:
    3dc5:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3dd5:	73 5d 20 69 6e 76 61 6c 69 64 20 4e 61 6d 65 0a     s] invalid Name.
	...

00003de6 <__c.4395>:
    3de6:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3df6:	69 64 20 66 69 6c 65 20 73 74 61 72 74 20 3e 20     id file start > 
    3e06:	69 6d 61 67 65 20 73 69 7a 65 0a 00                 image size..

00003e12 <__c.4393>:
    3e12:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3e22:	69 64 20 44 69 72 65 63 74 6f 72 79 20 53 65 63     id Directory Sec
    3e32:	74 6f 72 20 43 6f 75 6e 74 20 3c 20 31 0a 00        tor Count < 1..

00003e41 <__c.4391>:
    3e41:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3e51:	69 64 20 73 74 61 72 74 20 73 65 63 74 6f 72 3a     id start sector:
    3e61:	25 6c 64 0a 00                                      %ld..

00003e66 <__c.4389>:
    3e66:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3e76:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    3e86:	65 74 20 32 32 26 32 33 20 73 68 6f 75 6c 64 20     et 22&23 should 
    3e96:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00003e9f <__c.4387>:
    3e9f:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3eaf:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    3ebf:	65 74 20 31 34 26 31 35 20 73 68 6f 75 6c 64 20     et 14&15 should 
    3ecf:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00003ed8 <__c.4385>:
    3ed8:	4c 49 46 20 56 65 72 73 69 6f 6e 3a 20 25 30 34     LIF Version: %04
    3ee8:	58 48 20 3e 20 31 0a 00                             XH > 1..

00003ef0 <__c.4383>:
    3ef0:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3f00:	69 64 20 53 79 73 74 65 6d 33 30 30 30 20 49 44     id System3000 ID
    3f10:	20 28 25 30 34 58 48 29 20 65 78 70 65 63 74 65      (%04XH) expecte
    3f20:	64 20 31 30 30 30 48 0a 00                          d 1000H..

00003f29 <__c.4381>:
    3f29:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3f39:	69 64 20 56 6f 6c 75 6d 65 20 4e 61 6d 65 00        id Volume Name.

00003f48 <__c.4374>:
    3f48:	0a 00                                               ..

00003f4a <__c.4372>:
    3f4a:	44 49 52 20 46 69 6c 65 20 44 61 74 65 3a 20 20     DIR File Date:  
    3f5a:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003f64 <__c.4370>:
    3f64:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 20     DIR File sector 
    3f74:	73 69 7a 65 3a 20 25 38 58 68 0a 00                 size: %8Xh..

00003f80 <__c.4368>:
    3f80:	44 49 52 20 46 69 6c 65 20 62 79 74 65 73 3a 20     DIR File bytes: 
    3f90:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003f9d <__c.4366>:
    3f9d:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 73     DIR File sectors
    3fad:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

00003fba <__c.4364>:
    3fba:	44 49 52 20 46 69 6c 65 20 73 74 61 72 74 3a 20     DIR File start: 
    3fca:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003fd7 <__c.4362>:
    3fd7:	44 49 52 20 46 69 6c 65 20 56 6f 6c 75 6d 65 23     DIR File Volume#
    3fe7:	3a 20 20 20 20 20 25 38 58 68 0a 00                 :     %8Xh..

00003ff3 <__c.4360>:
    3ff3:	44 49 52 20 46 69 6c 65 20 54 79 70 65 3a 20 20     DIR File Type:  
    4003:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

0000400f <__c.4358>:
    400f:	44 49 52 20 46 69 6c 65 20 4e 61 6d 65 3a 20 20     DIR File Name:  
    401f:	20 20 20 20 20 20 25 73 0a 00                             %s..

00004029 <__c.4356>:
    4029:	56 4f 4c 20 44 61 74 65 3a 20 20 20 20 20 20 20     VOL Date:       
    4039:	20 20 20 20 20 20 25 73 0a 00                             %s..

00004043 <__c.4354>:
    4043:	56 4f 4c 20 4c 49 46 56 65 72 73 69 6f 6e 3a 20     VOL LIFVersion: 
    4053:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

0000405f <__c.4352>:
    405f:	56 4f 4c 20 33 30 30 30 4c 49 46 69 64 3a 20 20     VOL 3000LIFid:  
    406f:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

0000407b <__c.4350>:
    407b:	56 4f 4c 20 44 69 72 20 73 65 63 74 6f 72 73 3a     VOL Dir sectors:
    408b:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004098 <__c.4348>:
    4098:	56 4f 4c 20 44 69 72 20 73 74 61 72 74 3a 20 20     VOL Dir start:  
    40a8:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000040b5 <__c.4346>:
    40b5:	56 4f 4c 20 4c 49 46 69 64 3a 20 20 20 20 20 20     VOL LIFid:      
    40c5:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

000040d1 <__c.4344>:
    40d1:	56 4f 4c 20 4c 61 62 65 6c 3a 20 20 20 20 20 20     VOL Label:      
    40e1:	20 20 20 20 20 20 25 73 0a 00                             %s..

000040eb <__c.4342>:
    40eb:	4c 49 46 20 70 75 72 67 65 64 3a 20 20 20 20 20     LIF purged:     
    40fb:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004108 <__c.4340>:
    4108:	4c 49 46 20 66 69 6c 65 73 3a 20 20 20 20 20 20     LIF files:      
    4118:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004125 <__c.4338>:
    4125:	4c 49 46 20 66 72 65 65 3a 20 20 20 20 20 20 20     LIF free:       
    4135:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004142 <__c.4336>:
    4142:	4c 49 46 20 75 73 65 64 3a 20 20 20 20 20 20 20     LIF used:       
    4152:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

0000415f <__c.4334>:
    415f:	4c 49 46 20 66 69 6c 65 20 73 65 63 74 6f 72 73     LIF file sectors
    416f:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

0000417c <__c.4332>:
    417c:	4c 49 46 20 66 69 6c 65 73 74 61 72 74 3a 20 20     LIF filestart:  
    418c:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004199 <__c.4330>:
    4199:	4c 49 46 20 62 79 74 65 73 3a 20 20 20 20 20 20     LIF bytes:      
    41a9:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000041b6 <__c.4328>:
    41b6:	4c 49 46 20 73 65 63 74 6f 72 73 3a 20 20 20 20     LIF sectors:    
    41c6:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000041d3 <__c.4326>:
    41d3:	4c 49 46 20 6e 61 6d 65 3a 20 20 20 20 20 20 20     LIF name:       
    41e3:	20 20 20 20 20 20 25 73 0a 00                             %s..

000041ed <__c.4324>:
    41ed:	0a 25 73 0a 00                                      .%s..

000041f2 <__c.4201>:
    41f2:	6c 69 66 5f 77 72 69 74 65 3a 20 57 72 69 74 65     lif_write: Write
    4202:	3a 5b 25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c     :[%s] offset:[%l
    4212:	64 5d 20 77 72 69 74 65 3a 5b 25 64 5d 20 65 78     d] write:[%d] ex
    4222:	70 65 63 74 65 64 3a 5b 25 64 5d 0a 00              pected:[%d]..

0000422f <__c.4192>:
    422f:	6c 69 66 5f 72 65 61 64 3a 20 72 65 61 64 3a 5b     lif_read: read:[
    423f:	25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c 64 5d     %s] offset:[%ld]
    424f:	20 77 72 69 74 65 3a 5b 25 6c 64 5d 20 65 78 70      write:[%ld] exp
    425f:	65 63 74 65 64 3a 5b 25 64 5d 0a 00                 ected:[%d]..

0000426b <__c.4183>:
    426b:	6c 69 66 5f 72 65 61 64 5f 6d 73 67 3a 20 25 73     lif_read_msg: %s
    427b:	20 53 65 65 6b 20 65 72 72 6f 72 20 25 6c 64 0a      Seek error %ld.
	...

0000428c <__c.4176>:
    428c:	6c 69 66 5f 73 74 61 74 3a 20 43 61 6e 27 74 20     lif_stat: Can't 
    429c:	73 74 61 74 3a 25 73 0a 00                          stat:%s..

000042a5 <__c.4170>:
    42a5:	6c 69 66 5f 6f 70 65 6e 3a 20 43 61 6e 27 74 20     lif_open: Can't 
    42b5:	6f 70 65 6e 3a 5b 25 73 5d 20 6d 6f 64 65 3a 5b     open:[%s] mode:[
    42c5:	25 73 5d 0a 00                                      %s]..

000042ca <__c.4158>:
    42ca:	6c 69 66 5f 66 72 65 65 3a 20 4e 55 4c 4c 20 70     lif_free: NULL p
    42da:	6f 69 6e 74 65 72 0a 00                             ointer..

000042e2 <__c.4153>:
    42e2:	6c 69 66 5f 63 61 6c 6c 6f 63 3a 5b 25 6c 64 5d     lif_calloc:[%ld]
    42f2:	20 6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65      not enough free
    4302:	20 6d 65 6d 6f 72 79 0a 00                           memory..

0000430b <__c.4147>:
    430b:	44 69 73 6b 3a 20 25 73 20 6e 6f 74 20 66 6f 75     Disk: %s not fou
    431b:	6e 64 20 69 6e 20 68 70 64 69 72 2e 69 6e 69 0a     nd in hpdir.ini.
	...

0000432c <__c.4134>:
    432c:	6c 69 66 20 61 64 64 20 6c 69 66 69 6d 61 67 65     lif add lifimage
    433c:	20 6c 69 66 6e 61 6d 65 20 66 72 6f 6d 5f 61 73      lifname from_as
    434c:	63 69 69 5f 66 69 6c 65 0a 6c 69 66 20 61 64 64     cii_file.lif add
    435c:	62 69 6e 20 6c 69 66 69 6d 61 67 65 20 6c 69 66     bin lifimage lif
    436c:	6e 61 6d 65 20 66 72 6f 6d 5f 6c 69 66 5f 66 69     name from_lif_fi
    437c:	6c 65 0a 6c 69 66 20 63 72 65 61 74 65 20 6c 69     le.lif create li
    438c:	66 69 6d 61 67 65 20 6c 61 62 65 6c 20 64 69 72     fimage label dir
    439c:	65 63 74 6f 72 79 5f 73 65 63 74 6f 72 73 20 73     ectory_sectors s
    43ac:	65 63 74 6f 72 73 0a 6c 69 66 20 63 72 65 61 74     ectors.lif creat
    43bc:	65 64 69 73 6b 20 6c 69 66 69 6d 61 67 65 20 6c     edisk lifimage l
    43cc:	61 62 65 6c 20 6d 6f 64 65 6c 0a 6c 69 66 20 64     abel model.lif d
    43dc:	65 6c 20 6c 69 66 69 6d 61 67 65 20 6e 61 6d 65     el lifimage name
    43ec:	0a 6c 69 66 20 64 69 72 20 6c 69 66 69 6d 61 67     .lif dir lifimag
    43fc:	65 0a 6c 69 66 20 65 78 74 72 61 63 74 20 6c 69     e.lif extract li
    440c:	66 69 6d 61 67 65 20 6c 69 66 6e 61 6d 65 20 74     fimage lifname t
    441c:	6f 5f 61 73 63 69 69 5f 66 69 6c 65 0a 6c 69 66     o_ascii_file.lif
    442c:	20 65 78 74 72 61 63 74 62 69 6e 20 6c 69 66 69      extractbin lifi
    443c:	6d 61 67 65 20 6c 69 66 6e 61 6d 65 20 74 6f 5f     mage lifname to_
    444c:	6c 69 66 5f 66 69 6c 65 0a 20 20 20 20 65 78 74     lif_file.    ext
    445c:	72 61 63 74 73 20 61 20 66 69 6c 65 20 69 6e 74     racts a file int
    446c:	6f 20 61 20 73 69 67 6c 65 20 66 69 6c 65 20 4c     o a sigle file L
    447c:	49 46 20 69 6d 61 67 65 0a 6c 69 66 20 72 65 6e     IF image.lif ren
    448c:	61 6d 65 20 6c 69 66 69 6d 61 67 65 20 6f 6c 64     ame lifimage old
    449c:	6c 69 66 6e 61 6d 65 20 6e 65 77 6c 69 66 6e 61     lifname newlifna
    44ac:	6d 65 0a 55 73 65 20 2d 64 20 61 66 74 65 72 20     me.Use -d after 
    44bc:	66 69 72 73 74 20 6b 65 79 77 6f 72 64 20 27 6c     first keyword 'l
    44cc:	69 66 27 20 61 62 6f 76 65 20 66 6f 72 20 4c 49     if' above for LI
    44dc:	46 20 66 69 6c 65 73 79 73 74 65 6d 20 64 65 62     F filesystem deb
    44ec:	75 67 67 69 6e 67 0a 0a 00                          ugging...

000044f5 <__c.4132>:
    44f5:	6c 69 66 20 68 65 6c 70 0a 00                       lif help..

000044ff <__c.4600>:
    44ff:	53 74 61 72 74 69 6e 67 20 47 50 49 42 20 54 41     Starting GPIB TA
    450f:	53 4b 0a 00                                         SK..

00004513 <__c.4598>:
    4513:	64 65 62 75 67 6c 65 76 65 6c 20 20 20 3d 20 25     debuglevel   = %
    4523:	30 34 78 48 0a 00                                   04xH..

00004529 <__c.4596>:
    4529:	47 50 49 42 20 53 74 61 74 65 20 69 6e 69 74 20     GPIB State init 
    4539:	64 6f 6e 65 0a 00                                   done..

0000453f <__c.4594>:
    453f:	47 50 49 42 20 46 69 6c 65 20 69 6e 69 74 20 64     GPIB File init d
    454f:	6f 6e 65 0a 00                                      one..

00004554 <__c.4592>:
    4554:	47 50 49 42 20 54 69 6d 65 72 20 69 6e 69 74 69     GPIB Timer initi
    4564:	61 6c 69 7a 65 64 0a 00                             alized..

0000456c <__c.4590>:
    456c:	47 50 49 42 20 54 69 6d 65 72 20 53 65 74 75 70     GPIB Timer Setup
    457c:	0a 00                                               ..

0000457e <__c.4588>:
    457e:	50 72 69 6e 74 65 72 20 69 6e 69 74 69 61 6c 69     Printer initiali
    458e:	7a 65 64 0a 00                                      zed..

00004593 <__c.4586>:
    4593:	47 50 49 42 20 62 75 73 20 69 6e 69 74 69 61 6c     GPIB bus initial
    45a3:	69 7a 65 64 0a 00                                   ized..

000045a9 <__c.4584>:
    45a9:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 65 64 0a     MMC initialized.
	...

000045ba <__c.4582>:
    45ba:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 69 6e 67     MMC initializing
    45ca:	20 73 74 61 72 74 0a 00                              start..

000045d2 <__c.4580>:
    45d2:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    45e2:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

000045ec <__c.4578>:
    45ec:	49 32 43 20 4c 43 44 20 69 6e 69 74 69 61 6c 69     I2C LCD initiali
    45fc:	7a 61 74 69 6f 6e 20 44 6f 6e 65 0a 00              zation Done..

00004609 <__c.4576>:
    4609:	49 32 43 20 4c 43 44 20 69 6e 69 74 69 61 6c 69     I2C LCD initiali
    4619:	7a 61 74 69 6f 6e 20 73 74 61 72 74 0a 00           zation start..

00004627 <__c.4574>:
    4627:	53 59 53 54 45 4d 5f 54 41 53 4b 5f 43 4f 55 4e     SYSTEM_TASK_COUN
    4637:	54 45 52 5f 52 45 53 3a 25 6c 64 0a 00              TER_RES:%ld..

00004644 <__c.4572>:
    4644:	43 6c 6f 63 6b 20 63 6c 65 61 72 65 64 0a 00        Clock cleared..

00004653 <__c.4570>:
    4653:	69 6e 69 74 69 61 6c 69 7a 69 6e 67 20 52 54 43     initializing RTC
    4663:	0a 00                                               ..

00004665 <__c.4568>:
    4665:	69 6e 69 74 69 61 6c 69 7a 69 6e 67 20 49 32 43     initializing I2C
    4675:	20 62 75 73 0a 00                                    bus..

0000467b <__c.4566>:
    467b:	69 6e 69 74 69 61 6c 69 7a 69 6e 67 20 53 50 49     initializing SPI
    468b:	20 62 75 73 0a 00                                    bus..

00004691 <__c.4564>:
    4691:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    46a1:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

000046ab <__c.4562>:
    46ab:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    46bb:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

000046c5 <__c.4560>:
    46c5:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    46d5:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    46e5:	35 64 69 73 6b 0a 00                                5disk..

000046ec <__c.4558>:
    46ec:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

000046fc <__c.4556>:
    46fc:	20 28 43 29 20 32 30 31 34 2d 32 30 32 30 20 62      (C) 2014-2020 b
    470c:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

00004719 <__c.4554>:
    4719:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    4729:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

00004738 <__c.4552>:
    4738:	52 65 71 75 65 73 74 65 64 20 42 61 75 64 20 52     Requested Baud R
    4748:	61 74 65 3a 20 25 6c 64 2c 20 41 63 74 75 61 6c     ate: %ld, Actual
    4758:	3a 20 25 6c 64 0a 00                                : %ld..

0000475f <__c.4550>:
    475f:	43 50 55 20 43 6c 6f 63 6b 20 3d 20 25 6c 75 0a     CPU Clock = %lu.
	...

00004770 <__c.4548>:
    4770:	53 74 61 72 74 0a 00                                Start..

00004777 <__c.4540>:
    4777:	45 72 72 6f 72 3a 5b 25 73 5d 0a 00                 Error:[%s]..

00004783 <__c.4538>:
    4783:	0a 3e 00                                            .>.

00004786 <__c.4528>:
    4786:	64 65 6c 61 79 5f 74 65 73 74 73 0a 68 65 6c 70     delay_tests.help
    4796:	0a 6d 65 6d 0a 73 65 74 64 61 74 65 0a 74 69 6d     .mem.setdate.tim
    47a6:	65 0a 72 65 73 65 74 0a 0a 00                       e.reset...

000047b0 <__c.4522>:
    47b0:	4d 79 20 64 65 6c 61 79 73 0a 00                    My delays..

000047bb <__c.4520>:
    47bb:	53 79 73 74 65 6d 20 64 65 6c 61 79 73 0a 00        System delays..

000047ca <__c.4516>:
    47ca:	0a 00                                               ..

000047cc <__c.4514>:
    47cc:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    47dc:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

000047e6 <__c.4512>:
    47e6:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    47f6:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

00004800 <__c.4510>:
    4800:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    4810:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    4820:	35 64 69 73 6b 0a 00                                5disk..

00004827 <__c.4508>:
    4827:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

00004837 <__c.4506>:
    4837:	20 28 63 29 20 32 30 31 34 2d 32 30 32 30 20 62      (c) 2014-2020 b
    4847:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

00004854 <__c.4504>:
    4854:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    4864:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

00004873 <__c.4502>:
    4873:	53 74 61 6e 64 20 61 6c 6f 6e 65 20 76 65 72 73     Stand alone vers
    4883:	69 6f 6e 20 6f 66 20 4c 49 46 20 75 74 69 6c 69     ion of LIF utili
    4893:	74 69 65 73 20 66 6f 72 20 6c 69 6e 75 78 0a 00     ties for linux..
	...

000048a4 <__ctors_end>:
    48a4:	11 24       	eor	r1, r1
    48a6:	1f be       	out	0x3f, r1	; 63
    48a8:	cf ef       	ldi	r28, 0xFF	; 255
    48aa:	d0 e4       	ldi	r29, 0x40	; 64
    48ac:	de bf       	out	0x3e, r29	; 62
    48ae:	cd bf       	out	0x3d, r28	; 61

000048b0 <__do_copy_data>:
    48b0:	17 e1       	ldi	r17, 0x17	; 23
    48b2:	a0 e0       	ldi	r26, 0x00	; 0
    48b4:	b1 e0       	ldi	r27, 0x01	; 1
    48b6:	ea e6       	ldi	r30, 0x6A	; 106
    48b8:	f6 ed       	ldi	r31, 0xD6	; 214
    48ba:	01 e0       	ldi	r16, 0x01	; 1
    48bc:	0b bf       	out	0x3b, r16	; 59
    48be:	02 c0       	rjmp	.+4      	; 0x48c4 <__do_copy_data+0x14>
    48c0:	07 90       	elpm	r0, Z+
    48c2:	0d 92       	st	X+, r0
    48c4:	a8 34       	cpi	r26, 0x48	; 72
    48c6:	b1 07       	cpc	r27, r17
    48c8:	d9 f7       	brne	.-10     	; 0x48c0 <__do_copy_data+0x10>

000048ca <__do_clear_bss>:
    48ca:	20 e2       	ldi	r18, 0x20	; 32
    48cc:	a8 e4       	ldi	r26, 0x48	; 72
    48ce:	b7 e1       	ldi	r27, 0x17	; 23
    48d0:	01 c0       	rjmp	.+2      	; 0x48d4 <.do_clear_bss_start>

000048d2 <.do_clear_bss_loop>:
    48d2:	1d 92       	st	X+, r1

000048d4 <.do_clear_bss_start>:
    48d4:	a0 3b       	cpi	r26, 0xB0	; 176
    48d6:	b2 07       	cpc	r27, r18
    48d8:	e1 f7       	brne	.-8      	; 0x48d2 <.do_clear_bss_loop>
    48da:	0e 94 92 e3 	call	0x1c724	; 0x1c724 <main>
    48de:	0c 94 33 eb 	jmp	0x1d666	; 0x1d666 <_exit>

000048e2 <__bad_interrupt>:
    48e2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000048e6 <vfprintf>:
    48e6:	2f 92       	push	r2
    48e8:	3f 92       	push	r3
    48ea:	4f 92       	push	r4
    48ec:	5f 92       	push	r5
    48ee:	6f 92       	push	r6
    48f0:	7f 92       	push	r7
    48f2:	8f 92       	push	r8
    48f4:	9f 92       	push	r9
    48f6:	af 92       	push	r10
    48f8:	bf 92       	push	r11
    48fa:	cf 92       	push	r12
    48fc:	df 92       	push	r13
    48fe:	ef 92       	push	r14
    4900:	ff 92       	push	r15
    4902:	0f 93       	push	r16
    4904:	1f 93       	push	r17
    4906:	cf 93       	push	r28
    4908:	df 93       	push	r29
    490a:	cd b7       	in	r28, 0x3d	; 61
    490c:	de b7       	in	r29, 0x3e	; 62
    490e:	60 97       	sbiw	r28, 0x10	; 16
    4910:	0f b6       	in	r0, 0x3f	; 63
    4912:	f8 94       	cli
    4914:	de bf       	out	0x3e, r29	; 62
    4916:	0f be       	out	0x3f, r0	; 63
    4918:	cd bf       	out	0x3d, r28	; 61
    491a:	7c 01       	movw	r14, r24
    491c:	1b 01       	movw	r2, r22
    491e:	6a 01       	movw	r12, r20
    4920:	fc 01       	movw	r30, r24
    4922:	17 82       	std	Z+7, r1	; 0x07
    4924:	16 82       	std	Z+6, r1	; 0x06
    4926:	83 81       	ldd	r24, Z+3	; 0x03
    4928:	81 ff       	sbrs	r24, 1
    492a:	44 c3       	rjmp	.+1672   	; 0x4fb4 <vfprintf+0x6ce>
    492c:	9e 01       	movw	r18, r28
    492e:	2f 5f       	subi	r18, 0xFF	; 255
    4930:	3f 4f       	sbci	r19, 0xFF	; 255
    4932:	39 01       	movw	r6, r18
    4934:	f7 01       	movw	r30, r14
    4936:	93 81       	ldd	r25, Z+3	; 0x03
    4938:	f1 01       	movw	r30, r2
    493a:	93 fd       	sbrc	r25, 3
    493c:	85 91       	lpm	r24, Z+
    493e:	93 ff       	sbrs	r25, 3
    4940:	81 91       	ld	r24, Z+
    4942:	1f 01       	movw	r2, r30
    4944:	88 23       	and	r24, r24
    4946:	09 f4       	brne	.+2      	; 0x494a <vfprintf+0x64>
    4948:	31 c3       	rjmp	.+1634   	; 0x4fac <vfprintf+0x6c6>
    494a:	85 32       	cpi	r24, 0x25	; 37
    494c:	39 f4       	brne	.+14     	; 0x495c <vfprintf+0x76>
    494e:	93 fd       	sbrc	r25, 3
    4950:	85 91       	lpm	r24, Z+
    4952:	93 ff       	sbrs	r25, 3
    4954:	81 91       	ld	r24, Z+
    4956:	1f 01       	movw	r2, r30
    4958:	85 32       	cpi	r24, 0x25	; 37
    495a:	39 f4       	brne	.+14     	; 0x496a <vfprintf+0x84>
    495c:	b7 01       	movw	r22, r14
    495e:	90 e0       	ldi	r25, 0x00	; 0
    4960:	0e 94 0e 77 	call	0xee1c	; 0xee1c <fputc>
    4964:	56 01       	movw	r10, r12
    4966:	65 01       	movw	r12, r10
    4968:	e5 cf       	rjmp	.-54     	; 0x4934 <vfprintf+0x4e>
    496a:	10 e0       	ldi	r17, 0x00	; 0
    496c:	51 2c       	mov	r5, r1
    496e:	91 2c       	mov	r9, r1
    4970:	ff e1       	ldi	r31, 0x1F	; 31
    4972:	f9 15       	cp	r31, r9
    4974:	d8 f0       	brcs	.+54     	; 0x49ac <vfprintf+0xc6>
    4976:	8b 32       	cpi	r24, 0x2B	; 43
    4978:	79 f0       	breq	.+30     	; 0x4998 <vfprintf+0xb2>
    497a:	38 f4       	brcc	.+14     	; 0x498a <vfprintf+0xa4>
    497c:	80 32       	cpi	r24, 0x20	; 32
    497e:	79 f0       	breq	.+30     	; 0x499e <vfprintf+0xb8>
    4980:	83 32       	cpi	r24, 0x23	; 35
    4982:	a1 f4       	brne	.+40     	; 0x49ac <vfprintf+0xc6>
    4984:	f9 2d       	mov	r31, r9
    4986:	f0 61       	ori	r31, 0x10	; 16
    4988:	2e c0       	rjmp	.+92     	; 0x49e6 <vfprintf+0x100>
    498a:	8d 32       	cpi	r24, 0x2D	; 45
    498c:	61 f0       	breq	.+24     	; 0x49a6 <vfprintf+0xc0>
    498e:	80 33       	cpi	r24, 0x30	; 48
    4990:	69 f4       	brne	.+26     	; 0x49ac <vfprintf+0xc6>
    4992:	29 2d       	mov	r18, r9
    4994:	21 60       	ori	r18, 0x01	; 1
    4996:	2d c0       	rjmp	.+90     	; 0x49f2 <vfprintf+0x10c>
    4998:	39 2d       	mov	r19, r9
    499a:	32 60       	ori	r19, 0x02	; 2
    499c:	93 2e       	mov	r9, r19
    499e:	89 2d       	mov	r24, r9
    49a0:	84 60       	ori	r24, 0x04	; 4
    49a2:	98 2e       	mov	r9, r24
    49a4:	2a c0       	rjmp	.+84     	; 0x49fa <vfprintf+0x114>
    49a6:	e9 2d       	mov	r30, r9
    49a8:	e8 60       	ori	r30, 0x08	; 8
    49aa:	15 c0       	rjmp	.+42     	; 0x49d6 <vfprintf+0xf0>
    49ac:	97 fc       	sbrc	r9, 7
    49ae:	2d c0       	rjmp	.+90     	; 0x4a0a <vfprintf+0x124>
    49b0:	20 ed       	ldi	r18, 0xD0	; 208
    49b2:	28 0f       	add	r18, r24
    49b4:	2a 30       	cpi	r18, 0x0A	; 10
    49b6:	88 f4       	brcc	.+34     	; 0x49da <vfprintf+0xf4>
    49b8:	96 fe       	sbrs	r9, 6
    49ba:	06 c0       	rjmp	.+12     	; 0x49c8 <vfprintf+0xe2>
    49bc:	3a e0       	ldi	r19, 0x0A	; 10
    49be:	13 9f       	mul	r17, r19
    49c0:	20 0d       	add	r18, r0
    49c2:	11 24       	eor	r1, r1
    49c4:	12 2f       	mov	r17, r18
    49c6:	19 c0       	rjmp	.+50     	; 0x49fa <vfprintf+0x114>
    49c8:	8a e0       	ldi	r24, 0x0A	; 10
    49ca:	58 9e       	mul	r5, r24
    49cc:	20 0d       	add	r18, r0
    49ce:	11 24       	eor	r1, r1
    49d0:	52 2e       	mov	r5, r18
    49d2:	e9 2d       	mov	r30, r9
    49d4:	e0 62       	ori	r30, 0x20	; 32
    49d6:	9e 2e       	mov	r9, r30
    49d8:	10 c0       	rjmp	.+32     	; 0x49fa <vfprintf+0x114>
    49da:	8e 32       	cpi	r24, 0x2E	; 46
    49dc:	31 f4       	brne	.+12     	; 0x49ea <vfprintf+0x104>
    49de:	96 fc       	sbrc	r9, 6
    49e0:	e5 c2       	rjmp	.+1482   	; 0x4fac <vfprintf+0x6c6>
    49e2:	f9 2d       	mov	r31, r9
    49e4:	f0 64       	ori	r31, 0x40	; 64
    49e6:	9f 2e       	mov	r9, r31
    49e8:	08 c0       	rjmp	.+16     	; 0x49fa <vfprintf+0x114>
    49ea:	8c 36       	cpi	r24, 0x6C	; 108
    49ec:	21 f4       	brne	.+8      	; 0x49f6 <vfprintf+0x110>
    49ee:	29 2d       	mov	r18, r9
    49f0:	20 68       	ori	r18, 0x80	; 128
    49f2:	92 2e       	mov	r9, r18
    49f4:	02 c0       	rjmp	.+4      	; 0x49fa <vfprintf+0x114>
    49f6:	88 36       	cpi	r24, 0x68	; 104
    49f8:	41 f4       	brne	.+16     	; 0x4a0a <vfprintf+0x124>
    49fa:	f1 01       	movw	r30, r2
    49fc:	93 fd       	sbrc	r25, 3
    49fe:	85 91       	lpm	r24, Z+
    4a00:	93 ff       	sbrs	r25, 3
    4a02:	81 91       	ld	r24, Z+
    4a04:	1f 01       	movw	r2, r30
    4a06:	81 11       	cpse	r24, r1
    4a08:	b3 cf       	rjmp	.-154    	; 0x4970 <vfprintf+0x8a>
    4a0a:	9b eb       	ldi	r25, 0xBB	; 187
    4a0c:	98 0f       	add	r25, r24
    4a0e:	93 30       	cpi	r25, 0x03	; 3
    4a10:	20 f4       	brcc	.+8      	; 0x4a1a <vfprintf+0x134>
    4a12:	99 2d       	mov	r25, r9
    4a14:	90 61       	ori	r25, 0x10	; 16
    4a16:	80 5e       	subi	r24, 0xE0	; 224
    4a18:	07 c0       	rjmp	.+14     	; 0x4a28 <vfprintf+0x142>
    4a1a:	9b e9       	ldi	r25, 0x9B	; 155
    4a1c:	98 0f       	add	r25, r24
    4a1e:	93 30       	cpi	r25, 0x03	; 3
    4a20:	08 f0       	brcs	.+2      	; 0x4a24 <vfprintf+0x13e>
    4a22:	66 c1       	rjmp	.+716    	; 0x4cf0 <vfprintf+0x40a>
    4a24:	99 2d       	mov	r25, r9
    4a26:	9f 7e       	andi	r25, 0xEF	; 239
    4a28:	96 ff       	sbrs	r25, 6
    4a2a:	16 e0       	ldi	r17, 0x06	; 6
    4a2c:	9f 73       	andi	r25, 0x3F	; 63
    4a2e:	99 2e       	mov	r9, r25
    4a30:	85 36       	cpi	r24, 0x65	; 101
    4a32:	19 f4       	brne	.+6      	; 0x4a3a <vfprintf+0x154>
    4a34:	90 64       	ori	r25, 0x40	; 64
    4a36:	99 2e       	mov	r9, r25
    4a38:	08 c0       	rjmp	.+16     	; 0x4a4a <vfprintf+0x164>
    4a3a:	86 36       	cpi	r24, 0x66	; 102
    4a3c:	21 f4       	brne	.+8      	; 0x4a46 <vfprintf+0x160>
    4a3e:	39 2f       	mov	r19, r25
    4a40:	30 68       	ori	r19, 0x80	; 128
    4a42:	93 2e       	mov	r9, r19
    4a44:	02 c0       	rjmp	.+4      	; 0x4a4a <vfprintf+0x164>
    4a46:	11 11       	cpse	r17, r1
    4a48:	11 50       	subi	r17, 0x01	; 1
    4a4a:	97 fe       	sbrs	r9, 7
    4a4c:	07 c0       	rjmp	.+14     	; 0x4a5c <vfprintf+0x176>
    4a4e:	1c 33       	cpi	r17, 0x3C	; 60
    4a50:	50 f4       	brcc	.+20     	; 0x4a66 <vfprintf+0x180>
    4a52:	44 24       	eor	r4, r4
    4a54:	43 94       	inc	r4
    4a56:	41 0e       	add	r4, r17
    4a58:	27 e0       	ldi	r18, 0x07	; 7
    4a5a:	0b c0       	rjmp	.+22     	; 0x4a72 <vfprintf+0x18c>
    4a5c:	18 30       	cpi	r17, 0x08	; 8
    4a5e:	38 f0       	brcs	.+14     	; 0x4a6e <vfprintf+0x188>
    4a60:	27 e0       	ldi	r18, 0x07	; 7
    4a62:	17 e0       	ldi	r17, 0x07	; 7
    4a64:	05 c0       	rjmp	.+10     	; 0x4a70 <vfprintf+0x18a>
    4a66:	27 e0       	ldi	r18, 0x07	; 7
    4a68:	9c e3       	ldi	r25, 0x3C	; 60
    4a6a:	49 2e       	mov	r4, r25
    4a6c:	02 c0       	rjmp	.+4      	; 0x4a72 <vfprintf+0x18c>
    4a6e:	21 2f       	mov	r18, r17
    4a70:	41 2c       	mov	r4, r1
    4a72:	56 01       	movw	r10, r12
    4a74:	84 e0       	ldi	r24, 0x04	; 4
    4a76:	a8 0e       	add	r10, r24
    4a78:	b1 1c       	adc	r11, r1
    4a7a:	f6 01       	movw	r30, r12
    4a7c:	60 81       	ld	r22, Z
    4a7e:	71 81       	ldd	r23, Z+1	; 0x01
    4a80:	82 81       	ldd	r24, Z+2	; 0x02
    4a82:	93 81       	ldd	r25, Z+3	; 0x03
    4a84:	04 2d       	mov	r16, r4
    4a86:	a3 01       	movw	r20, r6
    4a88:	0e 94 e0 e9 	call	0x1d3c0	; 0x1d3c0 <__ftoa_engine>
    4a8c:	6c 01       	movw	r12, r24
    4a8e:	f9 81       	ldd	r31, Y+1	; 0x01
    4a90:	fc 87       	std	Y+12, r31	; 0x0c
    4a92:	f0 ff       	sbrs	r31, 0
    4a94:	02 c0       	rjmp	.+4      	; 0x4a9a <vfprintf+0x1b4>
    4a96:	f3 ff       	sbrs	r31, 3
    4a98:	06 c0       	rjmp	.+12     	; 0x4aa6 <vfprintf+0x1c0>
    4a9a:	91 fc       	sbrc	r9, 1
    4a9c:	06 c0       	rjmp	.+12     	; 0x4aaa <vfprintf+0x1c4>
    4a9e:	92 fe       	sbrs	r9, 2
    4aa0:	06 c0       	rjmp	.+12     	; 0x4aae <vfprintf+0x1c8>
    4aa2:	00 e2       	ldi	r16, 0x20	; 32
    4aa4:	05 c0       	rjmp	.+10     	; 0x4ab0 <vfprintf+0x1ca>
    4aa6:	0d e2       	ldi	r16, 0x2D	; 45
    4aa8:	03 c0       	rjmp	.+6      	; 0x4ab0 <vfprintf+0x1ca>
    4aaa:	0b e2       	ldi	r16, 0x2B	; 43
    4aac:	01 c0       	rjmp	.+2      	; 0x4ab0 <vfprintf+0x1ca>
    4aae:	00 e0       	ldi	r16, 0x00	; 0
    4ab0:	8c 85       	ldd	r24, Y+12	; 0x0c
    4ab2:	8c 70       	andi	r24, 0x0C	; 12
    4ab4:	19 f0       	breq	.+6      	; 0x4abc <vfprintf+0x1d6>
    4ab6:	01 11       	cpse	r16, r1
    4ab8:	5a c2       	rjmp	.+1204   	; 0x4f6e <vfprintf+0x688>
    4aba:	9b c2       	rjmp	.+1334   	; 0x4ff2 <vfprintf+0x70c>
    4abc:	97 fe       	sbrs	r9, 7
    4abe:	10 c0       	rjmp	.+32     	; 0x4ae0 <vfprintf+0x1fa>
    4ac0:	4c 0c       	add	r4, r12
    4ac2:	fc 85       	ldd	r31, Y+12	; 0x0c
    4ac4:	f4 ff       	sbrs	r31, 4
    4ac6:	04 c0       	rjmp	.+8      	; 0x4ad0 <vfprintf+0x1ea>
    4ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    4aca:	81 33       	cpi	r24, 0x31	; 49
    4acc:	09 f4       	brne	.+2      	; 0x4ad0 <vfprintf+0x1ea>
    4ace:	4a 94       	dec	r4
    4ad0:	14 14       	cp	r1, r4
    4ad2:	74 f5       	brge	.+92     	; 0x4b30 <vfprintf+0x24a>
    4ad4:	28 e0       	ldi	r18, 0x08	; 8
    4ad6:	24 15       	cp	r18, r4
    4ad8:	78 f5       	brcc	.+94     	; 0x4b38 <vfprintf+0x252>
    4ada:	88 e0       	ldi	r24, 0x08	; 8
    4adc:	48 2e       	mov	r4, r24
    4ade:	2c c0       	rjmp	.+88     	; 0x4b38 <vfprintf+0x252>
    4ae0:	96 fc       	sbrc	r9, 6
    4ae2:	2a c0       	rjmp	.+84     	; 0x4b38 <vfprintf+0x252>
    4ae4:	81 2f       	mov	r24, r17
    4ae6:	90 e0       	ldi	r25, 0x00	; 0
    4ae8:	8c 15       	cp	r24, r12
    4aea:	9d 05       	cpc	r25, r13
    4aec:	9c f0       	brlt	.+38     	; 0x4b14 <vfprintf+0x22e>
    4aee:	3c ef       	ldi	r19, 0xFC	; 252
    4af0:	c3 16       	cp	r12, r19
    4af2:	3f ef       	ldi	r19, 0xFF	; 255
    4af4:	d3 06       	cpc	r13, r19
    4af6:	74 f0       	brlt	.+28     	; 0x4b14 <vfprintf+0x22e>
    4af8:	89 2d       	mov	r24, r9
    4afa:	80 68       	ori	r24, 0x80	; 128
    4afc:	98 2e       	mov	r9, r24
    4afe:	0a c0       	rjmp	.+20     	; 0x4b14 <vfprintf+0x22e>
    4b00:	e2 e0       	ldi	r30, 0x02	; 2
    4b02:	f0 e0       	ldi	r31, 0x00	; 0
    4b04:	ec 0f       	add	r30, r28
    4b06:	fd 1f       	adc	r31, r29
    4b08:	e1 0f       	add	r30, r17
    4b0a:	f1 1d       	adc	r31, r1
    4b0c:	80 81       	ld	r24, Z
    4b0e:	80 33       	cpi	r24, 0x30	; 48
    4b10:	19 f4       	brne	.+6      	; 0x4b18 <vfprintf+0x232>
    4b12:	11 50       	subi	r17, 0x01	; 1
    4b14:	11 11       	cpse	r17, r1
    4b16:	f4 cf       	rjmp	.-24     	; 0x4b00 <vfprintf+0x21a>
    4b18:	97 fe       	sbrs	r9, 7
    4b1a:	0e c0       	rjmp	.+28     	; 0x4b38 <vfprintf+0x252>
    4b1c:	44 24       	eor	r4, r4
    4b1e:	43 94       	inc	r4
    4b20:	41 0e       	add	r4, r17
    4b22:	81 2f       	mov	r24, r17
    4b24:	90 e0       	ldi	r25, 0x00	; 0
    4b26:	c8 16       	cp	r12, r24
    4b28:	d9 06       	cpc	r13, r25
    4b2a:	2c f4       	brge	.+10     	; 0x4b36 <vfprintf+0x250>
    4b2c:	1c 19       	sub	r17, r12
    4b2e:	04 c0       	rjmp	.+8      	; 0x4b38 <vfprintf+0x252>
    4b30:	44 24       	eor	r4, r4
    4b32:	43 94       	inc	r4
    4b34:	01 c0       	rjmp	.+2      	; 0x4b38 <vfprintf+0x252>
    4b36:	10 e0       	ldi	r17, 0x00	; 0
    4b38:	97 fe       	sbrs	r9, 7
    4b3a:	06 c0       	rjmp	.+12     	; 0x4b48 <vfprintf+0x262>
    4b3c:	1c 14       	cp	r1, r12
    4b3e:	1d 04       	cpc	r1, r13
    4b40:	34 f4       	brge	.+12     	; 0x4b4e <vfprintf+0x268>
    4b42:	c6 01       	movw	r24, r12
    4b44:	01 96       	adiw	r24, 0x01	; 1
    4b46:	05 c0       	rjmp	.+10     	; 0x4b52 <vfprintf+0x26c>
    4b48:	85 e0       	ldi	r24, 0x05	; 5
    4b4a:	90 e0       	ldi	r25, 0x00	; 0
    4b4c:	02 c0       	rjmp	.+4      	; 0x4b52 <vfprintf+0x26c>
    4b4e:	81 e0       	ldi	r24, 0x01	; 1
    4b50:	90 e0       	ldi	r25, 0x00	; 0
    4b52:	01 11       	cpse	r16, r1
    4b54:	01 96       	adiw	r24, 0x01	; 1
    4b56:	11 23       	and	r17, r17
    4b58:	31 f0       	breq	.+12     	; 0x4b66 <vfprintf+0x280>
    4b5a:	21 2f       	mov	r18, r17
    4b5c:	30 e0       	ldi	r19, 0x00	; 0
    4b5e:	2f 5f       	subi	r18, 0xFF	; 255
    4b60:	3f 4f       	sbci	r19, 0xFF	; 255
    4b62:	82 0f       	add	r24, r18
    4b64:	93 1f       	adc	r25, r19
    4b66:	25 2d       	mov	r18, r5
    4b68:	30 e0       	ldi	r19, 0x00	; 0
    4b6a:	82 17       	cp	r24, r18
    4b6c:	93 07       	cpc	r25, r19
    4b6e:	14 f4       	brge	.+4      	; 0x4b74 <vfprintf+0x28e>
    4b70:	58 1a       	sub	r5, r24
    4b72:	01 c0       	rjmp	.+2      	; 0x4b76 <vfprintf+0x290>
    4b74:	51 2c       	mov	r5, r1
    4b76:	89 2d       	mov	r24, r9
    4b78:	89 70       	andi	r24, 0x09	; 9
    4b7a:	49 f4       	brne	.+18     	; 0x4b8e <vfprintf+0x2a8>
    4b7c:	55 20       	and	r5, r5
    4b7e:	39 f0       	breq	.+14     	; 0x4b8e <vfprintf+0x2a8>
    4b80:	b7 01       	movw	r22, r14
    4b82:	80 e2       	ldi	r24, 0x20	; 32
    4b84:	90 e0       	ldi	r25, 0x00	; 0
    4b86:	0e 94 0e 77 	call	0xee1c	; 0xee1c <fputc>
    4b8a:	5a 94       	dec	r5
    4b8c:	f7 cf       	rjmp	.-18     	; 0x4b7c <vfprintf+0x296>
    4b8e:	00 23       	and	r16, r16
    4b90:	29 f0       	breq	.+10     	; 0x4b9c <vfprintf+0x2b6>
    4b92:	b7 01       	movw	r22, r14
    4b94:	80 2f       	mov	r24, r16
    4b96:	90 e0       	ldi	r25, 0x00	; 0
    4b98:	0e 94 0e 77 	call	0xee1c	; 0xee1c <fputc>
    4b9c:	93 fc       	sbrc	r9, 3
    4b9e:	09 c0       	rjmp	.+18     	; 0x4bb2 <vfprintf+0x2cc>
    4ba0:	55 20       	and	r5, r5
    4ba2:	39 f0       	breq	.+14     	; 0x4bb2 <vfprintf+0x2cc>
    4ba4:	b7 01       	movw	r22, r14
    4ba6:	80 e3       	ldi	r24, 0x30	; 48
    4ba8:	90 e0       	ldi	r25, 0x00	; 0
    4baa:	0e 94 0e 77 	call	0xee1c	; 0xee1c <fputc>
    4bae:	5a 94       	dec	r5
    4bb0:	f7 cf       	rjmp	.-18     	; 0x4ba0 <vfprintf+0x2ba>
    4bb2:	97 fe       	sbrs	r9, 7
    4bb4:	4c c0       	rjmp	.+152    	; 0x4c4e <vfprintf+0x368>
    4bb6:	46 01       	movw	r8, r12
    4bb8:	d7 fe       	sbrs	r13, 7
    4bba:	02 c0       	rjmp	.+4      	; 0x4bc0 <vfprintf+0x2da>
    4bbc:	81 2c       	mov	r8, r1
    4bbe:	91 2c       	mov	r9, r1
    4bc0:	c6 01       	movw	r24, r12
    4bc2:	88 19       	sub	r24, r8
    4bc4:	99 09       	sbc	r25, r9
    4bc6:	f3 01       	movw	r30, r6
    4bc8:	e8 0f       	add	r30, r24
    4bca:	f9 1f       	adc	r31, r25
    4bcc:	fe 87       	std	Y+14, r31	; 0x0e
    4bce:	ed 87       	std	Y+13, r30	; 0x0d
    4bd0:	96 01       	movw	r18, r12
    4bd2:	24 19       	sub	r18, r4
    4bd4:	31 09       	sbc	r19, r1
    4bd6:	38 8b       	std	Y+16, r19	; 0x10
    4bd8:	2f 87       	std	Y+15, r18	; 0x0f
    4bda:	01 2f       	mov	r16, r17
    4bdc:	10 e0       	ldi	r17, 0x00	; 0
    4bde:	11 95       	neg	r17
    4be0:	01 95       	neg	r16
    4be2:	11 09       	sbc	r17, r1
    4be4:	3f ef       	ldi	r19, 0xFF	; 255
    4be6:	83 16       	cp	r8, r19
    4be8:	93 06       	cpc	r9, r19
    4bea:	29 f4       	brne	.+10     	; 0x4bf6 <vfprintf+0x310>
    4bec:	b7 01       	movw	r22, r14
    4bee:	8e e2       	ldi	r24, 0x2E	; 46
    4bf0:	90 e0       	ldi	r25, 0x00	; 0
    4bf2:	0e 94 0e 77 	call	0xee1c	; 0xee1c <fputc>
    4bf6:	c8 14       	cp	r12, r8
    4bf8:	d9 04       	cpc	r13, r9
    4bfa:	4c f0       	brlt	.+18     	; 0x4c0e <vfprintf+0x328>
    4bfc:	8f 85       	ldd	r24, Y+15	; 0x0f
    4bfe:	98 89       	ldd	r25, Y+16	; 0x10
    4c00:	88 15       	cp	r24, r8
    4c02:	99 05       	cpc	r25, r9
    4c04:	24 f4       	brge	.+8      	; 0x4c0e <vfprintf+0x328>
    4c06:	ed 85       	ldd	r30, Y+13	; 0x0d
    4c08:	fe 85       	ldd	r31, Y+14	; 0x0e
    4c0a:	81 81       	ldd	r24, Z+1	; 0x01
    4c0c:	01 c0       	rjmp	.+2      	; 0x4c10 <vfprintf+0x32a>
    4c0e:	80 e3       	ldi	r24, 0x30	; 48
    4c10:	f1 e0       	ldi	r31, 0x01	; 1
    4c12:	8f 1a       	sub	r8, r31
    4c14:	91 08       	sbc	r9, r1
    4c16:	2d 85       	ldd	r18, Y+13	; 0x0d
    4c18:	3e 85       	ldd	r19, Y+14	; 0x0e
    4c1a:	2f 5f       	subi	r18, 0xFF	; 255
    4c1c:	3f 4f       	sbci	r19, 0xFF	; 255
    4c1e:	3e 87       	std	Y+14, r19	; 0x0e
    4c20:	2d 87       	std	Y+13, r18	; 0x0d
    4c22:	80 16       	cp	r8, r16
    4c24:	91 06       	cpc	r9, r17
    4c26:	2c f0       	brlt	.+10     	; 0x4c32 <vfprintf+0x34c>
    4c28:	b7 01       	movw	r22, r14
    4c2a:	90 e0       	ldi	r25, 0x00	; 0
    4c2c:	0e 94 0e 77 	call	0xee1c	; 0xee1c <fputc>
    4c30:	d9 cf       	rjmp	.-78     	; 0x4be4 <vfprintf+0x2fe>
    4c32:	c8 14       	cp	r12, r8
    4c34:	d9 04       	cpc	r13, r9
    4c36:	41 f4       	brne	.+16     	; 0x4c48 <vfprintf+0x362>
    4c38:	9a 81       	ldd	r25, Y+2	; 0x02
    4c3a:	96 33       	cpi	r25, 0x36	; 54
    4c3c:	20 f4       	brcc	.+8      	; 0x4c46 <vfprintf+0x360>
    4c3e:	95 33       	cpi	r25, 0x35	; 53
    4c40:	19 f4       	brne	.+6      	; 0x4c48 <vfprintf+0x362>
    4c42:	3c 85       	ldd	r19, Y+12	; 0x0c
    4c44:	34 ff       	sbrs	r19, 4
    4c46:	81 e3       	ldi	r24, 0x31	; 49
    4c48:	b7 01       	movw	r22, r14
    4c4a:	90 e0       	ldi	r25, 0x00	; 0
    4c4c:	4e c0       	rjmp	.+156    	; 0x4cea <vfprintf+0x404>
    4c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    4c50:	81 33       	cpi	r24, 0x31	; 49
    4c52:	19 f0       	breq	.+6      	; 0x4c5a <vfprintf+0x374>
    4c54:	9c 85       	ldd	r25, Y+12	; 0x0c
    4c56:	9f 7e       	andi	r25, 0xEF	; 239
    4c58:	9c 87       	std	Y+12, r25	; 0x0c
    4c5a:	b7 01       	movw	r22, r14
    4c5c:	90 e0       	ldi	r25, 0x00	; 0
    4c5e:	0e 94 0e 77 	call	0xee1c	; 0xee1c <fputc>
    4c62:	11 11       	cpse	r17, r1
    4c64:	05 c0       	rjmp	.+10     	; 0x4c70 <vfprintf+0x38a>
    4c66:	94 fc       	sbrc	r9, 4
    4c68:	18 c0       	rjmp	.+48     	; 0x4c9a <vfprintf+0x3b4>
    4c6a:	85 e6       	ldi	r24, 0x65	; 101
    4c6c:	90 e0       	ldi	r25, 0x00	; 0
    4c6e:	17 c0       	rjmp	.+46     	; 0x4c9e <vfprintf+0x3b8>
    4c70:	b7 01       	movw	r22, r14
    4c72:	8e e2       	ldi	r24, 0x2E	; 46
    4c74:	90 e0       	ldi	r25, 0x00	; 0
    4c76:	0e 94 0e 77 	call	0xee1c	; 0xee1c <fputc>
    4c7a:	1e 5f       	subi	r17, 0xFE	; 254
    4c7c:	82 e0       	ldi	r24, 0x02	; 2
    4c7e:	01 e0       	ldi	r16, 0x01	; 1
    4c80:	08 0f       	add	r16, r24
    4c82:	f3 01       	movw	r30, r6
    4c84:	e8 0f       	add	r30, r24
    4c86:	f1 1d       	adc	r31, r1
    4c88:	80 81       	ld	r24, Z
    4c8a:	b7 01       	movw	r22, r14
    4c8c:	90 e0       	ldi	r25, 0x00	; 0
    4c8e:	0e 94 0e 77 	call	0xee1c	; 0xee1c <fputc>
    4c92:	80 2f       	mov	r24, r16
    4c94:	01 13       	cpse	r16, r17
    4c96:	f3 cf       	rjmp	.-26     	; 0x4c7e <vfprintf+0x398>
    4c98:	e6 cf       	rjmp	.-52     	; 0x4c66 <vfprintf+0x380>
    4c9a:	85 e4       	ldi	r24, 0x45	; 69
    4c9c:	90 e0       	ldi	r25, 0x00	; 0
    4c9e:	b7 01       	movw	r22, r14
    4ca0:	0e 94 0e 77 	call	0xee1c	; 0xee1c <fputc>
    4ca4:	d7 fc       	sbrc	r13, 7
    4ca6:	06 c0       	rjmp	.+12     	; 0x4cb4 <vfprintf+0x3ce>
    4ca8:	c1 14       	cp	r12, r1
    4caa:	d1 04       	cpc	r13, r1
    4cac:	41 f4       	brne	.+16     	; 0x4cbe <vfprintf+0x3d8>
    4cae:	ec 85       	ldd	r30, Y+12	; 0x0c
    4cb0:	e4 ff       	sbrs	r30, 4
    4cb2:	05 c0       	rjmp	.+10     	; 0x4cbe <vfprintf+0x3d8>
    4cb4:	d1 94       	neg	r13
    4cb6:	c1 94       	neg	r12
    4cb8:	d1 08       	sbc	r13, r1
    4cba:	8d e2       	ldi	r24, 0x2D	; 45
    4cbc:	01 c0       	rjmp	.+2      	; 0x4cc0 <vfprintf+0x3da>
    4cbe:	8b e2       	ldi	r24, 0x2B	; 43
    4cc0:	b7 01       	movw	r22, r14
    4cc2:	90 e0       	ldi	r25, 0x00	; 0
    4cc4:	0e 94 0e 77 	call	0xee1c	; 0xee1c <fputc>
    4cc8:	80 e3       	ldi	r24, 0x30	; 48
    4cca:	2a e0       	ldi	r18, 0x0A	; 10
    4ccc:	c2 16       	cp	r12, r18
    4cce:	d1 04       	cpc	r13, r1
    4cd0:	2c f0       	brlt	.+10     	; 0x4cdc <vfprintf+0x3f6>
    4cd2:	8f 5f       	subi	r24, 0xFF	; 255
    4cd4:	fa e0       	ldi	r31, 0x0A	; 10
    4cd6:	cf 1a       	sub	r12, r31
    4cd8:	d1 08       	sbc	r13, r1
    4cda:	f7 cf       	rjmp	.-18     	; 0x4cca <vfprintf+0x3e4>
    4cdc:	b7 01       	movw	r22, r14
    4cde:	90 e0       	ldi	r25, 0x00	; 0
    4ce0:	0e 94 0e 77 	call	0xee1c	; 0xee1c <fputc>
    4ce4:	b7 01       	movw	r22, r14
    4ce6:	c6 01       	movw	r24, r12
    4ce8:	c0 96       	adiw	r24, 0x30	; 48
    4cea:	0e 94 0e 77 	call	0xee1c	; 0xee1c <fputc>
    4cee:	54 c1       	rjmp	.+680    	; 0x4f98 <vfprintf+0x6b2>
    4cf0:	83 36       	cpi	r24, 0x63	; 99
    4cf2:	31 f0       	breq	.+12     	; 0x4d00 <vfprintf+0x41a>
    4cf4:	83 37       	cpi	r24, 0x73	; 115
    4cf6:	79 f0       	breq	.+30     	; 0x4d16 <vfprintf+0x430>
    4cf8:	83 35       	cpi	r24, 0x53	; 83
    4cfa:	09 f0       	breq	.+2      	; 0x4cfe <vfprintf+0x418>
    4cfc:	56 c0       	rjmp	.+172    	; 0x4daa <vfprintf+0x4c4>
    4cfe:	20 c0       	rjmp	.+64     	; 0x4d40 <vfprintf+0x45a>
    4d00:	56 01       	movw	r10, r12
    4d02:	32 e0       	ldi	r19, 0x02	; 2
    4d04:	a3 0e       	add	r10, r19
    4d06:	b1 1c       	adc	r11, r1
    4d08:	f6 01       	movw	r30, r12
    4d0a:	80 81       	ld	r24, Z
    4d0c:	89 83       	std	Y+1, r24	; 0x01
    4d0e:	01 e0       	ldi	r16, 0x01	; 1
    4d10:	10 e0       	ldi	r17, 0x00	; 0
    4d12:	63 01       	movw	r12, r6
    4d14:	12 c0       	rjmp	.+36     	; 0x4d3a <vfprintf+0x454>
    4d16:	56 01       	movw	r10, r12
    4d18:	f2 e0       	ldi	r31, 0x02	; 2
    4d1a:	af 0e       	add	r10, r31
    4d1c:	b1 1c       	adc	r11, r1
    4d1e:	f6 01       	movw	r30, r12
    4d20:	c0 80       	ld	r12, Z
    4d22:	d1 80       	ldd	r13, Z+1	; 0x01
    4d24:	96 fe       	sbrs	r9, 6
    4d26:	03 c0       	rjmp	.+6      	; 0x4d2e <vfprintf+0x448>
    4d28:	61 2f       	mov	r22, r17
    4d2a:	70 e0       	ldi	r23, 0x00	; 0
    4d2c:	02 c0       	rjmp	.+4      	; 0x4d32 <vfprintf+0x44c>
    4d2e:	6f ef       	ldi	r22, 0xFF	; 255
    4d30:	7f ef       	ldi	r23, 0xFF	; 255
    4d32:	c6 01       	movw	r24, r12
    4d34:	0e 94 ca ea 	call	0x1d594	; 0x1d594 <strnlen>
    4d38:	8c 01       	movw	r16, r24
    4d3a:	f9 2d       	mov	r31, r9
    4d3c:	ff 77       	andi	r31, 0x7F	; 127
    4d3e:	14 c0       	rjmp	.+40     	; 0x4d68 <vfprintf+0x482>
    4d40:	56 01       	movw	r10, r12
    4d42:	22 e0       	ldi	r18, 0x02	; 2
    4d44:	a2 0e       	add	r10, r18
    4d46:	b1 1c       	adc	r11, r1
    4d48:	f6 01       	movw	r30, r12
    4d4a:	c0 80       	ld	r12, Z
    4d4c:	d1 80       	ldd	r13, Z+1	; 0x01
    4d4e:	96 fe       	sbrs	r9, 6
    4d50:	03 c0       	rjmp	.+6      	; 0x4d58 <vfprintf+0x472>
    4d52:	61 2f       	mov	r22, r17
    4d54:	70 e0       	ldi	r23, 0x00	; 0
    4d56:	02 c0       	rjmp	.+4      	; 0x4d5c <vfprintf+0x476>
    4d58:	6f ef       	ldi	r22, 0xFF	; 255
    4d5a:	7f ef       	ldi	r23, 0xFF	; 255
    4d5c:	c6 01       	movw	r24, r12
    4d5e:	0e 94 b8 ea 	call	0x1d570	; 0x1d570 <strnlen_P>
    4d62:	8c 01       	movw	r16, r24
    4d64:	f9 2d       	mov	r31, r9
    4d66:	f0 68       	ori	r31, 0x80	; 128
    4d68:	9f 2e       	mov	r9, r31
    4d6a:	f3 fd       	sbrc	r31, 3
    4d6c:	1a c0       	rjmp	.+52     	; 0x4da2 <vfprintf+0x4bc>
    4d6e:	85 2d       	mov	r24, r5
    4d70:	90 e0       	ldi	r25, 0x00	; 0
    4d72:	08 17       	cp	r16, r24
    4d74:	19 07       	cpc	r17, r25
    4d76:	a8 f4       	brcc	.+42     	; 0x4da2 <vfprintf+0x4bc>
    4d78:	b7 01       	movw	r22, r14
    4d7a:	80 e2       	ldi	r24, 0x20	; 32
    4d7c:	90 e0       	ldi	r25, 0x00	; 0
    4d7e:	0e 94 0e 77 	call	0xee1c	; 0xee1c <fputc>
    4d82:	5a 94       	dec	r5
    4d84:	f4 cf       	rjmp	.-24     	; 0x4d6e <vfprintf+0x488>
    4d86:	f6 01       	movw	r30, r12
    4d88:	97 fc       	sbrc	r9, 7
    4d8a:	85 91       	lpm	r24, Z+
    4d8c:	97 fe       	sbrs	r9, 7
    4d8e:	81 91       	ld	r24, Z+
    4d90:	6f 01       	movw	r12, r30
    4d92:	b7 01       	movw	r22, r14
    4d94:	90 e0       	ldi	r25, 0x00	; 0
    4d96:	0e 94 0e 77 	call	0xee1c	; 0xee1c <fputc>
    4d9a:	51 10       	cpse	r5, r1
    4d9c:	5a 94       	dec	r5
    4d9e:	01 50       	subi	r16, 0x01	; 1
    4da0:	11 09       	sbc	r17, r1
    4da2:	01 15       	cp	r16, r1
    4da4:	11 05       	cpc	r17, r1
    4da6:	79 f7       	brne	.-34     	; 0x4d86 <vfprintf+0x4a0>
    4da8:	f7 c0       	rjmp	.+494    	; 0x4f98 <vfprintf+0x6b2>
    4daa:	84 36       	cpi	r24, 0x64	; 100
    4dac:	11 f0       	breq	.+4      	; 0x4db2 <vfprintf+0x4cc>
    4dae:	89 36       	cpi	r24, 0x69	; 105
    4db0:	61 f5       	brne	.+88     	; 0x4e0a <vfprintf+0x524>
    4db2:	56 01       	movw	r10, r12
    4db4:	97 fe       	sbrs	r9, 7
    4db6:	09 c0       	rjmp	.+18     	; 0x4dca <vfprintf+0x4e4>
    4db8:	24 e0       	ldi	r18, 0x04	; 4
    4dba:	a2 0e       	add	r10, r18
    4dbc:	b1 1c       	adc	r11, r1
    4dbe:	f6 01       	movw	r30, r12
    4dc0:	60 81       	ld	r22, Z
    4dc2:	71 81       	ldd	r23, Z+1	; 0x01
    4dc4:	82 81       	ldd	r24, Z+2	; 0x02
    4dc6:	93 81       	ldd	r25, Z+3	; 0x03
    4dc8:	0a c0       	rjmp	.+20     	; 0x4dde <vfprintf+0x4f8>
    4dca:	f2 e0       	ldi	r31, 0x02	; 2
    4dcc:	af 0e       	add	r10, r31
    4dce:	b1 1c       	adc	r11, r1
    4dd0:	f6 01       	movw	r30, r12
    4dd2:	60 81       	ld	r22, Z
    4dd4:	71 81       	ldd	r23, Z+1	; 0x01
    4dd6:	07 2e       	mov	r0, r23
    4dd8:	00 0c       	add	r0, r0
    4dda:	88 0b       	sbc	r24, r24
    4ddc:	99 0b       	sbc	r25, r25
    4dde:	f9 2d       	mov	r31, r9
    4de0:	ff 76       	andi	r31, 0x6F	; 111
    4de2:	9f 2e       	mov	r9, r31
    4de4:	97 ff       	sbrs	r25, 7
    4de6:	09 c0       	rjmp	.+18     	; 0x4dfa <vfprintf+0x514>
    4de8:	90 95       	com	r25
    4dea:	80 95       	com	r24
    4dec:	70 95       	com	r23
    4dee:	61 95       	neg	r22
    4df0:	7f 4f       	sbci	r23, 0xFF	; 255
    4df2:	8f 4f       	sbci	r24, 0xFF	; 255
    4df4:	9f 4f       	sbci	r25, 0xFF	; 255
    4df6:	f0 68       	ori	r31, 0x80	; 128
    4df8:	9f 2e       	mov	r9, r31
    4dfa:	2a e0       	ldi	r18, 0x0A	; 10
    4dfc:	30 e0       	ldi	r19, 0x00	; 0
    4dfe:	a3 01       	movw	r20, r6
    4e00:	0e 94 d5 ea 	call	0x1d5aa	; 0x1d5aa <__ultoa_invert>
    4e04:	c8 2e       	mov	r12, r24
    4e06:	c6 18       	sub	r12, r6
    4e08:	3f c0       	rjmp	.+126    	; 0x4e88 <vfprintf+0x5a2>
    4e0a:	09 2d       	mov	r16, r9
    4e0c:	85 37       	cpi	r24, 0x75	; 117
    4e0e:	21 f4       	brne	.+8      	; 0x4e18 <vfprintf+0x532>
    4e10:	0f 7e       	andi	r16, 0xEF	; 239
    4e12:	2a e0       	ldi	r18, 0x0A	; 10
    4e14:	30 e0       	ldi	r19, 0x00	; 0
    4e16:	1d c0       	rjmp	.+58     	; 0x4e52 <vfprintf+0x56c>
    4e18:	09 7f       	andi	r16, 0xF9	; 249
    4e1a:	8f 36       	cpi	r24, 0x6F	; 111
    4e1c:	91 f0       	breq	.+36     	; 0x4e42 <vfprintf+0x55c>
    4e1e:	18 f4       	brcc	.+6      	; 0x4e26 <vfprintf+0x540>
    4e20:	88 35       	cpi	r24, 0x58	; 88
    4e22:	59 f0       	breq	.+22     	; 0x4e3a <vfprintf+0x554>
    4e24:	c3 c0       	rjmp	.+390    	; 0x4fac <vfprintf+0x6c6>
    4e26:	80 37       	cpi	r24, 0x70	; 112
    4e28:	19 f0       	breq	.+6      	; 0x4e30 <vfprintf+0x54a>
    4e2a:	88 37       	cpi	r24, 0x78	; 120
    4e2c:	11 f0       	breq	.+4      	; 0x4e32 <vfprintf+0x54c>
    4e2e:	be c0       	rjmp	.+380    	; 0x4fac <vfprintf+0x6c6>
    4e30:	00 61       	ori	r16, 0x10	; 16
    4e32:	04 ff       	sbrs	r16, 4
    4e34:	09 c0       	rjmp	.+18     	; 0x4e48 <vfprintf+0x562>
    4e36:	04 60       	ori	r16, 0x04	; 4
    4e38:	07 c0       	rjmp	.+14     	; 0x4e48 <vfprintf+0x562>
    4e3a:	94 fe       	sbrs	r9, 4
    4e3c:	08 c0       	rjmp	.+16     	; 0x4e4e <vfprintf+0x568>
    4e3e:	06 60       	ori	r16, 0x06	; 6
    4e40:	06 c0       	rjmp	.+12     	; 0x4e4e <vfprintf+0x568>
    4e42:	28 e0       	ldi	r18, 0x08	; 8
    4e44:	30 e0       	ldi	r19, 0x00	; 0
    4e46:	05 c0       	rjmp	.+10     	; 0x4e52 <vfprintf+0x56c>
    4e48:	20 e1       	ldi	r18, 0x10	; 16
    4e4a:	30 e0       	ldi	r19, 0x00	; 0
    4e4c:	02 c0       	rjmp	.+4      	; 0x4e52 <vfprintf+0x56c>
    4e4e:	20 e1       	ldi	r18, 0x10	; 16
    4e50:	32 e0       	ldi	r19, 0x02	; 2
    4e52:	56 01       	movw	r10, r12
    4e54:	07 ff       	sbrs	r16, 7
    4e56:	09 c0       	rjmp	.+18     	; 0x4e6a <vfprintf+0x584>
    4e58:	84 e0       	ldi	r24, 0x04	; 4
    4e5a:	a8 0e       	add	r10, r24
    4e5c:	b1 1c       	adc	r11, r1
    4e5e:	f6 01       	movw	r30, r12
    4e60:	60 81       	ld	r22, Z
    4e62:	71 81       	ldd	r23, Z+1	; 0x01
    4e64:	82 81       	ldd	r24, Z+2	; 0x02
    4e66:	93 81       	ldd	r25, Z+3	; 0x03
    4e68:	08 c0       	rjmp	.+16     	; 0x4e7a <vfprintf+0x594>
    4e6a:	f2 e0       	ldi	r31, 0x02	; 2
    4e6c:	af 0e       	add	r10, r31
    4e6e:	b1 1c       	adc	r11, r1
    4e70:	f6 01       	movw	r30, r12
    4e72:	60 81       	ld	r22, Z
    4e74:	71 81       	ldd	r23, Z+1	; 0x01
    4e76:	80 e0       	ldi	r24, 0x00	; 0
    4e78:	90 e0       	ldi	r25, 0x00	; 0
    4e7a:	a3 01       	movw	r20, r6
    4e7c:	0e 94 d5 ea 	call	0x1d5aa	; 0x1d5aa <__ultoa_invert>
    4e80:	c8 2e       	mov	r12, r24
    4e82:	c6 18       	sub	r12, r6
    4e84:	0f 77       	andi	r16, 0x7F	; 127
    4e86:	90 2e       	mov	r9, r16
    4e88:	96 fe       	sbrs	r9, 6
    4e8a:	0b c0       	rjmp	.+22     	; 0x4ea2 <vfprintf+0x5bc>
    4e8c:	09 2d       	mov	r16, r9
    4e8e:	0e 7f       	andi	r16, 0xFE	; 254
    4e90:	c1 16       	cp	r12, r17
    4e92:	50 f4       	brcc	.+20     	; 0x4ea8 <vfprintf+0x5c2>
    4e94:	94 fe       	sbrs	r9, 4
    4e96:	0a c0       	rjmp	.+20     	; 0x4eac <vfprintf+0x5c6>
    4e98:	92 fc       	sbrc	r9, 2
    4e9a:	08 c0       	rjmp	.+16     	; 0x4eac <vfprintf+0x5c6>
    4e9c:	09 2d       	mov	r16, r9
    4e9e:	0e 7e       	andi	r16, 0xEE	; 238
    4ea0:	05 c0       	rjmp	.+10     	; 0x4eac <vfprintf+0x5c6>
    4ea2:	dc 2c       	mov	r13, r12
    4ea4:	09 2d       	mov	r16, r9
    4ea6:	03 c0       	rjmp	.+6      	; 0x4eae <vfprintf+0x5c8>
    4ea8:	dc 2c       	mov	r13, r12
    4eaa:	01 c0       	rjmp	.+2      	; 0x4eae <vfprintf+0x5c8>
    4eac:	d1 2e       	mov	r13, r17
    4eae:	04 ff       	sbrs	r16, 4
    4eb0:	0d c0       	rjmp	.+26     	; 0x4ecc <vfprintf+0x5e6>
    4eb2:	fe 01       	movw	r30, r28
    4eb4:	ec 0d       	add	r30, r12
    4eb6:	f1 1d       	adc	r31, r1
    4eb8:	80 81       	ld	r24, Z
    4eba:	80 33       	cpi	r24, 0x30	; 48
    4ebc:	11 f4       	brne	.+4      	; 0x4ec2 <vfprintf+0x5dc>
    4ebe:	09 7e       	andi	r16, 0xE9	; 233
    4ec0:	09 c0       	rjmp	.+18     	; 0x4ed4 <vfprintf+0x5ee>
    4ec2:	02 ff       	sbrs	r16, 2
    4ec4:	06 c0       	rjmp	.+12     	; 0x4ed2 <vfprintf+0x5ec>
    4ec6:	d3 94       	inc	r13
    4ec8:	d3 94       	inc	r13
    4eca:	04 c0       	rjmp	.+8      	; 0x4ed4 <vfprintf+0x5ee>
    4ecc:	80 2f       	mov	r24, r16
    4ece:	86 78       	andi	r24, 0x86	; 134
    4ed0:	09 f0       	breq	.+2      	; 0x4ed4 <vfprintf+0x5ee>
    4ed2:	d3 94       	inc	r13
    4ed4:	03 fd       	sbrc	r16, 3
    4ed6:	11 c0       	rjmp	.+34     	; 0x4efa <vfprintf+0x614>
    4ed8:	00 ff       	sbrs	r16, 0
    4eda:	06 c0       	rjmp	.+12     	; 0x4ee8 <vfprintf+0x602>
    4edc:	1c 2d       	mov	r17, r12
    4ede:	d5 14       	cp	r13, r5
    4ee0:	80 f4       	brcc	.+32     	; 0x4f02 <vfprintf+0x61c>
    4ee2:	15 0d       	add	r17, r5
    4ee4:	1d 19       	sub	r17, r13
    4ee6:	0d c0       	rjmp	.+26     	; 0x4f02 <vfprintf+0x61c>
    4ee8:	d5 14       	cp	r13, r5
    4eea:	58 f4       	brcc	.+22     	; 0x4f02 <vfprintf+0x61c>
    4eec:	b7 01       	movw	r22, r14
    4eee:	80 e2       	ldi	r24, 0x20	; 32
    4ef0:	90 e0       	ldi	r25, 0x00	; 0
    4ef2:	0e 94 0e 77 	call	0xee1c	; 0xee1c <fputc>
    4ef6:	d3 94       	inc	r13
    4ef8:	f7 cf       	rjmp	.-18     	; 0x4ee8 <vfprintf+0x602>
    4efa:	d5 14       	cp	r13, r5
    4efc:	10 f4       	brcc	.+4      	; 0x4f02 <vfprintf+0x61c>
    4efe:	5d 18       	sub	r5, r13
    4f00:	01 c0       	rjmp	.+2      	; 0x4f04 <vfprintf+0x61e>
    4f02:	51 2c       	mov	r5, r1
    4f04:	04 ff       	sbrs	r16, 4
    4f06:	10 c0       	rjmp	.+32     	; 0x4f28 <vfprintf+0x642>
    4f08:	b7 01       	movw	r22, r14
    4f0a:	80 e3       	ldi	r24, 0x30	; 48
    4f0c:	90 e0       	ldi	r25, 0x00	; 0
    4f0e:	0e 94 0e 77 	call	0xee1c	; 0xee1c <fputc>
    4f12:	02 ff       	sbrs	r16, 2
    4f14:	17 c0       	rjmp	.+46     	; 0x4f44 <vfprintf+0x65e>
    4f16:	01 fd       	sbrc	r16, 1
    4f18:	03 c0       	rjmp	.+6      	; 0x4f20 <vfprintf+0x63a>
    4f1a:	88 e7       	ldi	r24, 0x78	; 120
    4f1c:	90 e0       	ldi	r25, 0x00	; 0
    4f1e:	02 c0       	rjmp	.+4      	; 0x4f24 <vfprintf+0x63e>
    4f20:	88 e5       	ldi	r24, 0x58	; 88
    4f22:	90 e0       	ldi	r25, 0x00	; 0
    4f24:	b7 01       	movw	r22, r14
    4f26:	0c c0       	rjmp	.+24     	; 0x4f40 <vfprintf+0x65a>
    4f28:	80 2f       	mov	r24, r16
    4f2a:	86 78       	andi	r24, 0x86	; 134
    4f2c:	59 f0       	breq	.+22     	; 0x4f44 <vfprintf+0x65e>
    4f2e:	01 ff       	sbrs	r16, 1
    4f30:	02 c0       	rjmp	.+4      	; 0x4f36 <vfprintf+0x650>
    4f32:	8b e2       	ldi	r24, 0x2B	; 43
    4f34:	01 c0       	rjmp	.+2      	; 0x4f38 <vfprintf+0x652>
    4f36:	80 e2       	ldi	r24, 0x20	; 32
    4f38:	07 fd       	sbrc	r16, 7
    4f3a:	8d e2       	ldi	r24, 0x2D	; 45
    4f3c:	b7 01       	movw	r22, r14
    4f3e:	90 e0       	ldi	r25, 0x00	; 0
    4f40:	0e 94 0e 77 	call	0xee1c	; 0xee1c <fputc>
    4f44:	c1 16       	cp	r12, r17
    4f46:	38 f4       	brcc	.+14     	; 0x4f56 <vfprintf+0x670>
    4f48:	b7 01       	movw	r22, r14
    4f4a:	80 e3       	ldi	r24, 0x30	; 48
    4f4c:	90 e0       	ldi	r25, 0x00	; 0
    4f4e:	0e 94 0e 77 	call	0xee1c	; 0xee1c <fputc>
    4f52:	11 50       	subi	r17, 0x01	; 1
    4f54:	f7 cf       	rjmp	.-18     	; 0x4f44 <vfprintf+0x65e>
    4f56:	ca 94       	dec	r12
    4f58:	f3 01       	movw	r30, r6
    4f5a:	ec 0d       	add	r30, r12
    4f5c:	f1 1d       	adc	r31, r1
    4f5e:	80 81       	ld	r24, Z
    4f60:	b7 01       	movw	r22, r14
    4f62:	90 e0       	ldi	r25, 0x00	; 0
    4f64:	0e 94 0e 77 	call	0xee1c	; 0xee1c <fputc>
    4f68:	c1 10       	cpse	r12, r1
    4f6a:	f5 cf       	rjmp	.-22     	; 0x4f56 <vfprintf+0x670>
    4f6c:	15 c0       	rjmp	.+42     	; 0x4f98 <vfprintf+0x6b2>
    4f6e:	f4 e0       	ldi	r31, 0x04	; 4
    4f70:	f5 15       	cp	r31, r5
    4f72:	60 f5       	brcc	.+88     	; 0x4fcc <vfprintf+0x6e6>
    4f74:	84 e0       	ldi	r24, 0x04	; 4
    4f76:	58 1a       	sub	r5, r24
    4f78:	93 fe       	sbrs	r9, 3
    4f7a:	1f c0       	rjmp	.+62     	; 0x4fba <vfprintf+0x6d4>
    4f7c:	01 11       	cpse	r16, r1
    4f7e:	27 c0       	rjmp	.+78     	; 0x4fce <vfprintf+0x6e8>
    4f80:	2c 85       	ldd	r18, Y+12	; 0x0c
    4f82:	23 ff       	sbrs	r18, 3
    4f84:	2a c0       	rjmp	.+84     	; 0x4fda <vfprintf+0x6f4>
    4f86:	06 ed       	ldi	r16, 0xD6	; 214
    4f88:	11 e0       	ldi	r17, 0x01	; 1
    4f8a:	39 2d       	mov	r19, r9
    4f8c:	30 71       	andi	r19, 0x10	; 16
    4f8e:	93 2e       	mov	r9, r19
    4f90:	f8 01       	movw	r30, r16
    4f92:	84 91       	lpm	r24, Z
    4f94:	81 11       	cpse	r24, r1
    4f96:	24 c0       	rjmp	.+72     	; 0x4fe0 <vfprintf+0x6fa>
    4f98:	55 20       	and	r5, r5
    4f9a:	09 f4       	brne	.+2      	; 0x4f9e <vfprintf+0x6b8>
    4f9c:	e4 cc       	rjmp	.-1592   	; 0x4966 <vfprintf+0x80>
    4f9e:	b7 01       	movw	r22, r14
    4fa0:	80 e2       	ldi	r24, 0x20	; 32
    4fa2:	90 e0       	ldi	r25, 0x00	; 0
    4fa4:	0e 94 0e 77 	call	0xee1c	; 0xee1c <fputc>
    4fa8:	5a 94       	dec	r5
    4faa:	f6 cf       	rjmp	.-20     	; 0x4f98 <vfprintf+0x6b2>
    4fac:	f7 01       	movw	r30, r14
    4fae:	86 81       	ldd	r24, Z+6	; 0x06
    4fb0:	97 81       	ldd	r25, Z+7	; 0x07
    4fb2:	26 c0       	rjmp	.+76     	; 0x5000 <vfprintf+0x71a>
    4fb4:	8f ef       	ldi	r24, 0xFF	; 255
    4fb6:	9f ef       	ldi	r25, 0xFF	; 255
    4fb8:	23 c0       	rjmp	.+70     	; 0x5000 <vfprintf+0x71a>
    4fba:	b7 01       	movw	r22, r14
    4fbc:	80 e2       	ldi	r24, 0x20	; 32
    4fbe:	90 e0       	ldi	r25, 0x00	; 0
    4fc0:	0e 94 0e 77 	call	0xee1c	; 0xee1c <fputc>
    4fc4:	5a 94       	dec	r5
    4fc6:	51 10       	cpse	r5, r1
    4fc8:	f8 cf       	rjmp	.-16     	; 0x4fba <vfprintf+0x6d4>
    4fca:	d8 cf       	rjmp	.-80     	; 0x4f7c <vfprintf+0x696>
    4fcc:	51 2c       	mov	r5, r1
    4fce:	b7 01       	movw	r22, r14
    4fd0:	80 2f       	mov	r24, r16
    4fd2:	90 e0       	ldi	r25, 0x00	; 0
    4fd4:	0e 94 0e 77 	call	0xee1c	; 0xee1c <fputc>
    4fd8:	d3 cf       	rjmp	.-90     	; 0x4f80 <vfprintf+0x69a>
    4fda:	0a ed       	ldi	r16, 0xDA	; 218
    4fdc:	11 e0       	ldi	r17, 0x01	; 1
    4fde:	d5 cf       	rjmp	.-86     	; 0x4f8a <vfprintf+0x6a4>
    4fe0:	91 10       	cpse	r9, r1
    4fe2:	80 52       	subi	r24, 0x20	; 32
    4fe4:	b7 01       	movw	r22, r14
    4fe6:	90 e0       	ldi	r25, 0x00	; 0
    4fe8:	0e 94 0e 77 	call	0xee1c	; 0xee1c <fputc>
    4fec:	0f 5f       	subi	r16, 0xFF	; 255
    4fee:	1f 4f       	sbci	r17, 0xFF	; 255
    4ff0:	cf cf       	rjmp	.-98     	; 0x4f90 <vfprintf+0x6aa>
    4ff2:	23 e0       	ldi	r18, 0x03	; 3
    4ff4:	25 15       	cp	r18, r5
    4ff6:	10 f4       	brcc	.+4      	; 0x4ffc <vfprintf+0x716>
    4ff8:	83 e0       	ldi	r24, 0x03	; 3
    4ffa:	bd cf       	rjmp	.-134    	; 0x4f76 <vfprintf+0x690>
    4ffc:	51 2c       	mov	r5, r1
    4ffe:	c0 cf       	rjmp	.-128    	; 0x4f80 <vfprintf+0x69a>
    5000:	60 96       	adiw	r28, 0x10	; 16
    5002:	0f b6       	in	r0, 0x3f	; 63
    5004:	f8 94       	cli
    5006:	de bf       	out	0x3e, r29	; 62
    5008:	0f be       	out	0x3f, r0	; 63
    500a:	cd bf       	out	0x3d, r28	; 61
    500c:	df 91       	pop	r29
    500e:	cf 91       	pop	r28
    5010:	1f 91       	pop	r17
    5012:	0f 91       	pop	r16
    5014:	ff 90       	pop	r15
    5016:	ef 90       	pop	r14
    5018:	df 90       	pop	r13
    501a:	cf 90       	pop	r12
    501c:	bf 90       	pop	r11
    501e:	af 90       	pop	r10
    5020:	9f 90       	pop	r9
    5022:	8f 90       	pop	r8
    5024:	7f 90       	pop	r7
    5026:	6f 90       	pop	r6
    5028:	5f 90       	pop	r5
    502a:	4f 90       	pop	r4
    502c:	3f 90       	pop	r3
    502e:	2f 90       	pop	r2
    5030:	08 95       	ret

00005032 <chip_select>:
/// @brief SPI CS pin status
/// return CS GPIO pin number or 0xff
uint8_t spi_chip_select_status()
{
    return(_cs_pin);
}
    5032:	e8 2f       	mov	r30, r24
    5034:	e6 95       	lsr	r30
    5036:	e6 95       	lsr	r30
    5038:	e6 95       	lsr	r30
    503a:	93 e0       	ldi	r25, 0x03	; 3
    503c:	e9 9f       	mul	r30, r25
    503e:	f0 01       	movw	r30, r0
    5040:	11 24       	eor	r1, r1
    5042:	32 a1       	ldd	r19, Z+34	; 0x22
    5044:	28 2f       	mov	r18, r24
    5046:	27 70       	andi	r18, 0x07	; 7
    5048:	81 e0       	ldi	r24, 0x01	; 1
    504a:	90 e0       	ldi	r25, 0x00	; 0
    504c:	01 c0       	rjmp	.+2      	; 0x5050 <chip_select+0x1e>
    504e:	88 0f       	add	r24, r24
    5050:	2a 95       	dec	r18
    5052:	ea f7       	brpl	.-6      	; 0x504e <chip_select+0x1c>
    5054:	98 2f       	mov	r25, r24
    5056:	90 95       	com	r25
    5058:	93 23       	and	r25, r19
    505a:	92 a3       	std	Z+34, r25	; 0x22
    505c:	91 a1       	ldd	r25, Z+33	; 0x21
    505e:	89 2b       	or	r24, r25
    5060:	81 a3       	std	Z+33, r24	; 0x21
    5062:	08 95       	ret

00005064 <chip_deselect>:
    5064:	e8 2f       	mov	r30, r24
    5066:	e6 95       	lsr	r30
    5068:	e6 95       	lsr	r30
    506a:	e6 95       	lsr	r30
    506c:	93 e0       	ldi	r25, 0x03	; 3
    506e:	e9 9f       	mul	r30, r25
    5070:	f0 01       	movw	r30, r0
    5072:	11 24       	eor	r1, r1
    5074:	32 a1       	ldd	r19, Z+34	; 0x22
    5076:	28 2f       	mov	r18, r24
    5078:	27 70       	andi	r18, 0x07	; 7
    507a:	81 e0       	ldi	r24, 0x01	; 1
    507c:	90 e0       	ldi	r25, 0x00	; 0
    507e:	01 c0       	rjmp	.+2      	; 0x5082 <chip_deselect+0x1e>
    5080:	88 0f       	add	r24, r24
    5082:	2a 95       	dec	r18
    5084:	ea f7       	brpl	.-6      	; 0x5080 <chip_deselect+0x1c>
    5086:	93 2f       	mov	r25, r19
    5088:	98 2b       	or	r25, r24
    508a:	92 a3       	std	Z+34, r25	; 0x22
    508c:	91 a1       	ldd	r25, Z+33	; 0x21
    508e:	89 2b       	or	r24, r25
    5090:	81 a3       	std	Z+33, r24	; 0x21
    5092:	08 95       	ret

00005094 <chip_select_init>:
    5094:	e7 cf       	rjmp	.-50     	; 0x5064 <chip_deselect>
    5096:	08 95       	ret

00005098 <spi_end>:
    5098:	cf 93       	push	r28
    509a:	c8 2f       	mov	r28, r24
    509c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_cs_pin>
    50a0:	8c 17       	cp	r24, r28
    50a2:	a9 f0       	breq	.+42     	; 0x50ce <spi_end+0x36>
    50a4:	8f 3f       	cpi	r24, 0xFF	; 255
    50a6:	99 f0       	breq	.+38     	; 0x50ce <spi_end+0x36>
    50a8:	1f 92       	push	r1
    50aa:	cf 93       	push	r28
    50ac:	1f 92       	push	r1
    50ae:	8f 93       	push	r24
    50b0:	88 ed       	ldi	r24, 0xD8	; 216
    50b2:	92 e0       	ldi	r25, 0x02	; 2
    50b4:	1f 92       	push	r1
    50b6:	9f 93       	push	r25
    50b8:	8f 93       	push	r24
    50ba:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    50be:	8d b7       	in	r24, 0x3d	; 61
    50c0:	9e b7       	in	r25, 0x3e	; 62
    50c2:	07 96       	adiw	r24, 0x07	; 7
    50c4:	0f b6       	in	r0, 0x3f	; 63
    50c6:	f8 94       	cli
    50c8:	9e bf       	out	0x3e, r25	; 62
    50ca:	0f be       	out	0x3f, r0	; 63
    50cc:	8d bf       	out	0x3d, r24	; 61
    50ce:	8c 2f       	mov	r24, r28
    50d0:	c9 df       	rcall	.-110    	; 0x5064 <chip_deselect>
    50d2:	8f ef       	ldi	r24, 0xFF	; 255
    50d4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_cs_pin>
    50d8:	cf 91       	pop	r28
    50da:	08 95       	ret

000050dc <spi_TX_buffer>:
/// @brief SPI write buffer
/// @param[in] *data: transmit buffer
/// @param[in] count: number of bytes to write
/// @return  void
void spi_TX_buffer(const uint8_t *data, int count)
{
    50dc:	82 c4       	rjmp	.+2308   	; 0x59e2 <SPI0_TX>
    50de:	08 95       	ret

000050e0 <spi_RX_buffer>:
    50e0:	aa c4       	rjmp	.+2388   	; 0x5a36 <SPI0_RX>
    50e2:	08 95       	ret

000050e4 <spi_TX>:
    50e4:	a1 e0       	ldi	r26, 0x01	; 1
    50e6:	b0 e0       	ldi	r27, 0x00	; 0
    50e8:	e8 e7       	ldi	r30, 0x78	; 120
    50ea:	f8 e2       	ldi	r31, 0x28	; 40
    50ec:	0c 94 03 e6 	jmp	0x1cc06	; 0x1cc06 <__prologue_saves__+0x20>
    50f0:	89 83       	std	Y+1, r24	; 0x01
    50f2:	61 e0       	ldi	r22, 0x01	; 1
    50f4:	70 e0       	ldi	r23, 0x00	; 0
    50f6:	ce 01       	movw	r24, r28
    50f8:	01 96       	adiw	r24, 0x01	; 1
    50fa:	73 d4       	rcall	.+2278   	; 0x59e2 <SPI0_TX>
    50fc:	21 96       	adiw	r28, 0x01	; 1
    50fe:	e2 e0       	ldi	r30, 0x02	; 2
    5100:	0c 94 1f e6 	jmp	0x1cc3e	; 0x1cc3e <__epilogue_restores__+0x20>

00005104 <spi_init>:
    5104:	cf 92       	push	r12
    5106:	df 92       	push	r13
    5108:	ef 92       	push	r14
    510a:	ff 92       	push	r15
    510c:	6b 01       	movw	r12, r22
    510e:	7c 01       	movw	r14, r24
    5110:	84 2f       	mov	r24, r20
    5112:	a8 df       	rcall	.-176    	; 0x5064 <chip_deselect>
    5114:	8f ef       	ldi	r24, 0xFF	; 255
    5116:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_cs_pin>
    511a:	c7 01       	movw	r24, r14
    511c:	b6 01       	movw	r22, r12
    511e:	34 d4       	rcall	.+2152   	; 0x5988 <SPI0_Init>
    5120:	80 e0       	ldi	r24, 0x00	; 0
    5122:	90 e0       	ldi	r25, 0x00	; 0
    5124:	f5 d3       	rcall	.+2026   	; 0x5910 <SPI0_Mode>
    5126:	8f ef       	ldi	r24, 0xFF	; 255
    5128:	dd df       	rcall	.-70     	; 0x50e4 <spi_TX>
    512a:	c0 92 00 01 	sts	0x0100, r12	; 0x800100 <__data_start>
    512e:	d0 92 01 01 	sts	0x0101, r13	; 0x800101 <__data_start+0x1>
    5132:	e0 92 02 01 	sts	0x0102, r14	; 0x800102 <__data_start+0x2>
    5136:	f0 92 03 01 	sts	0x0103, r15	; 0x800103 <__data_start+0x3>
    513a:	ff 90       	pop	r15
    513c:	ef 90       	pop	r14
    513e:	df 90       	pop	r13
    5140:	cf 90       	pop	r12
    5142:	08 95       	ret

00005144 <spi_begin>:
    5144:	cf 92       	push	r12
    5146:	df 92       	push	r13
    5148:	ef 92       	push	r14
    514a:	ff 92       	push	r15
    514c:	cf 93       	push	r28
    514e:	df 93       	push	r29
    5150:	6b 01       	movw	r12, r22
    5152:	7c 01       	movw	r14, r24
    5154:	ea 01       	movw	r28, r20
    5156:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_cs_pin>
    515a:	8f 3f       	cpi	r24, 0xFF	; 255
    515c:	99 f0       	breq	.+38     	; 0x5184 <spi_begin+0x40>
    515e:	df 93       	push	r29
    5160:	4f 93       	push	r20
    5162:	1f 92       	push	r1
    5164:	8f 93       	push	r24
    5166:	86 ef       	ldi	r24, 0xF6	; 246
    5168:	92 e0       	ldi	r25, 0x02	; 2
    516a:	1f 92       	push	r1
    516c:	9f 93       	push	r25
    516e:	8f 93       	push	r24
    5170:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    5174:	8d b7       	in	r24, 0x3d	; 61
    5176:	9e b7       	in	r25, 0x3e	; 62
    5178:	07 96       	adiw	r24, 0x07	; 7
    517a:	0f b6       	in	r0, 0x3f	; 63
    517c:	f8 94       	cli
    517e:	9e bf       	out	0x3e, r25	; 62
    5180:	0f be       	out	0x3f, r0	; 63
    5182:	8d bf       	out	0x3d, r24	; 61
    5184:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    5188:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    518c:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
    5190:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
    5194:	8c 15       	cp	r24, r12
    5196:	9d 05       	cpc	r25, r13
    5198:	ae 05       	cpc	r26, r14
    519a:	bf 05       	cpc	r27, r15
    519c:	21 f0       	breq	.+8      	; 0x51a6 <spi_begin+0x62>
    519e:	ae 01       	movw	r20, r28
    51a0:	c7 01       	movw	r24, r14
    51a2:	b6 01       	movw	r22, r12
    51a4:	af df       	rcall	.-162    	; 0x5104 <spi_init>
    51a6:	8c 2f       	mov	r24, r28
    51a8:	44 df       	rcall	.-376    	; 0x5032 <chip_select>
    51aa:	c0 93 04 01 	sts	0x0104, r28	; 0x800104 <_cs_pin>
    51ae:	df 91       	pop	r29
    51b0:	cf 91       	pop	r28
    51b2:	ff 90       	pop	r15
    51b4:	ef 90       	pop	r14
    51b6:	df 90       	pop	r13
    51b8:	cf 90       	pop	r12
    51ba:	08 95       	ret

000051bc <spi_TXRX>:
    51bc:	a1 e0       	ldi	r26, 0x01	; 1
    51be:	b0 e0       	ldi	r27, 0x00	; 0
    51c0:	e4 ee       	ldi	r30, 0xE4	; 228
    51c2:	f8 e2       	ldi	r31, 0x28	; 40
    51c4:	0c 94 03 e6 	jmp	0x1cc06	; 0x1cc06 <__prologue_saves__+0x20>
    51c8:	89 83       	std	Y+1, r24	; 0x01
    51ca:	61 e0       	ldi	r22, 0x01	; 1
    51cc:	70 e0       	ldi	r23, 0x00	; 0
    51ce:	ce 01       	movw	r24, r28
    51d0:	01 96       	adiw	r24, 0x01	; 1
    51d2:	1b d4       	rcall	.+2102   	; 0x5a0a <SPI0_TXRX>
    51d4:	89 81       	ldd	r24, Y+1	; 0x01
    51d6:	21 96       	adiw	r28, 0x01	; 1
    51d8:	e2 e0       	ldi	r30, 0x02	; 2
    51da:	0c 94 1f e6 	jmp	0x1cc3e	; 0x1cc3e <__epilogue_restores__+0x20>

000051de <freeRam>:
/// - avr-libc dependent code.
///
/// @return free memory in bytes.
/// @see malloc().
uint16_t freeRam ()
{
    51de:	a2 e0       	ldi	r26, 0x02	; 2
    51e0:	b0 e0       	ldi	r27, 0x00	; 0
    51e2:	e5 ef       	ldi	r30, 0xF5	; 245
    51e4:	f8 e2       	ldi	r31, 0x28	; 40
    51e6:	0c 94 03 e6 	jmp	0x1cc06	; 0x1cc06 <__prologue_saves__+0x20>
    extern void * __heap_start;
    extern void * __brkval;
    int ret;
    uint16_t top;

    if(__brkval)
    51ea:	20 91 ac 20 	lds	r18, 0x20AC	; 0x8020ac <__brkval>
    51ee:	30 91 ad 20 	lds	r19, 0x20AD	; 0x8020ad <__brkval+0x1>
    51f2:	21 15       	cp	r18, r1
    51f4:	31 05       	cpc	r19, r1
    51f6:	11 f4       	brne	.+4      	; 0x51fc <freeRam+0x1e>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    51f8:	20 eb       	ldi	r18, 0xB0	; 176
    51fa:	30 e2       	ldi	r19, 0x20	; 32

    ret = (uint16_t) &v - top;
    return ( ret );
}
    51fc:	ce 01       	movw	r24, r28
    51fe:	01 96       	adiw	r24, 0x01	; 1
    5200:	82 1b       	sub	r24, r18
    5202:	93 0b       	sbc	r25, r19
    5204:	22 96       	adiw	r28, 0x02	; 2
    5206:	e2 e0       	ldi	r30, 0x02	; 2
    5208:	0c 94 1f e6 	jmp	0x1cc3e	; 0x1cc3e <__epilogue_restores__+0x20>

0000520c <PrintFree>:
/// - avr-libc dependent code.
/// - Stack, BSS, Data, Heap, Malloc.
///
/// @return  void
void PrintFree()
{
    520c:	a2 e0       	ldi	r26, 0x02	; 2
    520e:	b0 e0       	ldi	r27, 0x00	; 0
    5210:	ec e0       	ldi	r30, 0x0C	; 12
    5212:	f9 e2       	ldi	r31, 0x29	; 41
    5214:	0c 94 03 e6 	jmp	0x1cc06	; 0x1cc06 <__prologue_saves__+0x20>
    extern void * __data_start;
    extern void * __data_end;
    extern void * __stack;
    uint16_t ram;

    ram = freeRam();
    5218:	e2 df       	rcall	.-60     	; 0x51de <freeRam>
    521a:	89 83       	std	Y+1, r24	; 0x01

    printf("Free Ram:%u\n", ram);
    521c:	9a 83       	std	Y+2, r25	; 0x02
    521e:	9f 93       	push	r25
    5220:	8f 93       	push	r24
    5222:	8d e1       	ldi	r24, 0x1D	; 29
    5224:	94 e0       	ldi	r25, 0x04	; 4
    5226:	1f 92       	push	r1
    5228:	9f 93       	push	r25
    522a:	8f 93       	push	r24
    522c:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    printf("  Stack Top:   %u\n", (unsigned int) &__stack);
    5230:	8f ef       	ldi	r24, 0xFF	; 255
    5232:	90 e4       	ldi	r25, 0x40	; 64
    5234:	9f 93       	push	r25
    5236:	8f 93       	push	r24
    5238:	8a e0       	ldi	r24, 0x0A	; 10
    523a:	94 e0       	ldi	r25, 0x04	; 4
    523c:	1f 92       	push	r1
    523e:	9f 93       	push	r25
    5240:	8f 93       	push	r24
    5242:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    printf("  Stack Free:  %u\n", (unsigned int) &ram - 0);
    5246:	ce 01       	movw	r24, r28
    5248:	01 96       	adiw	r24, 0x01	; 1
    524a:	9f 93       	push	r25
    524c:	8f 93       	push	r24
    524e:	87 ef       	ldi	r24, 0xF7	; 247
    5250:	93 e0       	ldi	r25, 0x03	; 3
    5252:	1f 92       	push	r1
    5254:	9f 93       	push	r25
    5256:	8f 93       	push	r24
    5258:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>

    printf("  BSS   start: %5u, end: %5u\n",
    525c:	80 eb       	ldi	r24, 0xB0	; 176
    525e:	90 e2       	ldi	r25, 0x20	; 32
    5260:	9f 93       	push	r25
    5262:	8f 93       	push	r24
    5264:	88 e4       	ldi	r24, 0x48	; 72
    5266:	97 e1       	ldi	r25, 0x17	; 23
    5268:	9f 93       	push	r25
    526a:	8f 93       	push	r24
    526c:	89 ed       	ldi	r24, 0xD9	; 217
    526e:	93 e0       	ldi	r25, 0x03	; 3
    5270:	1f 92       	push	r1
    5272:	9f 93       	push	r25
    5274:	8f 93       	push	r24
    5276:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
        (unsigned int)&__bss_start, (unsigned int)&__bss_end);

    printf("  Data  start: %5u, end: %5u\n",
    527a:	88 e4       	ldi	r24, 0x48	; 72
    527c:	97 e1       	ldi	r25, 0x17	; 23
    527e:	9f 93       	push	r25
    5280:	8f 93       	push	r24
    5282:	80 e0       	ldi	r24, 0x00	; 0
    5284:	91 e0       	ldi	r25, 0x01	; 1
    5286:	9f 93       	push	r25
    5288:	8f 93       	push	r24
    528a:	8b eb       	ldi	r24, 0xBB	; 187
    528c:	93 e0       	ldi	r25, 0x03	; 3
    528e:	1f 92       	push	r1
    5290:	9f 93       	push	r25
    5292:	8f 93       	push	r24
    5294:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
        (unsigned int)&__data_start, (unsigned int)&__data_end);

    printf("  Heap: start: %5u, end: %5u\n",
    5298:	80 e0       	ldi	r24, 0x00	; 0
    529a:	90 e0       	ldi	r25, 0x00	; 0
    529c:	9f 93       	push	r25
    529e:	8f 93       	push	r24
    52a0:	80 eb       	ldi	r24, 0xB0	; 176
    52a2:	90 e2       	ldi	r25, 0x20	; 32
    52a4:	9f 93       	push	r25
    52a6:	8f 93       	push	r24
    52a8:	8d e9       	ldi	r24, 0x9D	; 157
    52aa:	93 e0       	ldi	r25, 0x03	; 3
    52ac:	1f 92       	push	r1
    52ae:	9f 93       	push	r25
    52b0:	8f 93       	push	r24
    52b2:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
        (unsigned int)&__heap_start, (unsigned int)&__heap_end);

    printf("  Malloc start %5u  end: %5u\n",
    52b6:	0f b6       	in	r0, 0x3f	; 63
    52b8:	f8 94       	cli
    52ba:	de bf       	out	0x3e, r29	; 62
    52bc:	0f be       	out	0x3f, r0	; 63
    52be:	cd bf       	out	0x3d, r28	; 61
    52c0:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <__malloc_heap_end+0x1>
    52c4:	8f 93       	push	r24
    52c6:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <__malloc_heap_end>
    52ca:	8f 93       	push	r24
    52cc:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <__malloc_heap_start+0x1>
    52d0:	8f 93       	push	r24
    52d2:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <__malloc_heap_start>
    52d6:	8f 93       	push	r24
    52d8:	8f e7       	ldi	r24, 0x7F	; 127
    52da:	93 e0       	ldi	r25, 0x03	; 3
    52dc:	1f 92       	push	r1
    52de:	9f 93       	push	r25
    52e0:	8f 93       	push	r24
    52e2:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
        (unsigned int)__malloc_heap_start, (unsigned int) __malloc_heap_end );

    printf("  __brkval:    %5u\n", (unsigned int) __brkval);
    52e6:	80 91 ad 20 	lds	r24, 0x20AD	; 0x8020ad <__brkval+0x1>
    52ea:	8f 93       	push	r24
    52ec:	80 91 ac 20 	lds	r24, 0x20AC	; 0x8020ac <__brkval>
    52f0:	8f 93       	push	r24
    52f2:	8b e6       	ldi	r24, 0x6B	; 107
    52f4:	93 e0       	ldi	r25, 0x03	; 3
    52f6:	1f 92       	push	r1
    52f8:	9f 93       	push	r25
    52fa:	8f 93       	push	r24
    52fc:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>

}
    5300:	0f b6       	in	r0, 0x3f	; 63
    5302:	f8 94       	cli
    5304:	de bf       	out	0x3e, r29	; 62
    5306:	0f be       	out	0x3f, r0	; 63
    5308:	cd bf       	out	0x3d, r28	; 61
    530a:	22 96       	adiw	r28, 0x02	; 2
    530c:	e2 e0       	ldi	r30, 0x02	; 2
    530e:	0c 94 1f e6 	jmp	0x1cc3e	; 0x1cc3e <__epilogue_restores__+0x20>

00005312 <safecalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
///
/// @return  void.
void *safecalloc(int size, int elements)
{
    5312:	ef 92       	push	r14
    5314:	ff 92       	push	r15
    5316:	0f 93       	push	r16
    5318:	1f 93       	push	r17
    531a:	cf 93       	push	r28
    531c:	df 93       	push	r29
    531e:	18 2f       	mov	r17, r24
    5320:	09 2f       	mov	r16, r25
    5322:	f6 2e       	mov	r15, r22
    5324:	e7 2e       	mov	r14, r23
	void *p = calloc(size, elements);
    5326:	0e 94 a1 e8 	call	0x1d142	; 0x1d142 <calloc>
    532a:	ec 01       	movw	r28, r24
	if(!p)
    532c:	89 2b       	or	r24, r25
    532e:	99 f4       	brne	.+38     	; 0x5356 <safecalloc+0x44>
	{
		printf("safecalloc(%d,%d) failed!\n", size, elements);
    5330:	ef 92       	push	r14
    5332:	ff 92       	push	r15
    5334:	0f 93       	push	r16
    5336:	1f 93       	push	r17
    5338:	80 e5       	ldi	r24, 0x50	; 80
    533a:	93 e0       	ldi	r25, 0x03	; 3
    533c:	1f 92       	push	r1
    533e:	9f 93       	push	r25
    5340:	8f 93       	push	r24
    5342:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    5346:	8d b7       	in	r24, 0x3d	; 61
    5348:	9e b7       	in	r25, 0x3e	; 62
    534a:	07 96       	adiw	r24, 0x07	; 7
    534c:	0f b6       	in	r0, 0x3f	; 63
    534e:	f8 94       	cli
    5350:	9e bf       	out	0x3e, r25	; 62
    5352:	0f be       	out	0x3f, r0	; 63
    5354:	8d bf       	out	0x3d, r24	; 61
	}
	return(p);
}
    5356:	ce 01       	movw	r24, r28
    5358:	cd b7       	in	r28, 0x3d	; 61
    535a:	de b7       	in	r29, 0x3e	; 62
    535c:	e6 e0       	ldi	r30, 0x06	; 6
    535e:	0c 94 1b e6 	jmp	0x1cc36	; 0x1cc36 <__epilogue_restores__+0x18>

00005362 <safemalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
/// @param[in] size:  size
/// @return  void.
void *safemalloc(size_t size)
{
    5362:	0f 93       	push	r16
    5364:	1f 93       	push	r17
    5366:	cf 93       	push	r28
    5368:	df 93       	push	r29
    536a:	18 2f       	mov	r17, r24
    536c:	09 2f       	mov	r16, r25
    void *p = calloc(size, 1);
    536e:	61 e0       	ldi	r22, 0x01	; 1
    5370:	70 e0       	ldi	r23, 0x00	; 0
    5372:	0e 94 a1 e8 	call	0x1d142	; 0x1d142 <calloc>
    5376:	ec 01       	movw	r28, r24
    if(!p)
    5378:	89 2b       	or	r24, r25
    537a:	71 f4       	brne	.+28     	; 0x5398 <safemalloc+0x36>
    {
        printf("safemalloc(%d) failed!\n", size);
    537c:	0f 93       	push	r16
    537e:	1f 93       	push	r17
    5380:	88 e3       	ldi	r24, 0x38	; 56
    5382:	93 e0       	ldi	r25, 0x03	; 3
    5384:	1f 92       	push	r1
    5386:	9f 93       	push	r25
    5388:	8f 93       	push	r24
    538a:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    538e:	0f 90       	pop	r0
    5390:	0f 90       	pop	r0
    5392:	0f 90       	pop	r0
    5394:	0f 90       	pop	r0
    5396:	0f 90       	pop	r0
    }
    return(p);
}
    5398:	ce 01       	movw	r24, r28
    539a:	df 91       	pop	r29
    539c:	cf 91       	pop	r28
    539e:	1f 91       	pop	r17
    53a0:	0f 91       	pop	r16
    53a2:	08 95       	ret

000053a4 <safefree>:
    extern void *__brkval;
    extern void * __heap_start;
    extern void * __heap_end;
    uint16_t top;

    if(p == NULL)
    53a4:	00 97       	sbiw	r24, 0x00	; 0
    53a6:	39 f1       	breq	.+78     	; 0x53f6 <safefree+0x52>
        return;

    if(__brkval)
    53a8:	20 91 ac 20 	lds	r18, 0x20AC	; 0x8020ac <__brkval>
    53ac:	30 91 ad 20 	lds	r19, 0x20AD	; 0x8020ad <__brkval+0x1>
    53b0:	21 15       	cp	r18, r1
    53b2:	31 05       	cpc	r19, r1
    53b4:	11 f4       	brne	.+4      	; 0x53ba <safefree+0x16>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    53b6:	20 eb       	ldi	r18, 0xB0	; 176
    53b8:	30 e2       	ldi	r19, 0x20	; 32

    if( ((uint16_t) p >= (uint16_t) &__heap_start) &&
    53ba:	40 e2       	ldi	r20, 0x20	; 32
    53bc:	80 3b       	cpi	r24, 0xB0	; 176
    53be:	94 07       	cpc	r25, r20
    53c0:	30 f0       	brcs	.+12     	; 0x53ce <safefree+0x2a>
    53c2:	28 17       	cp	r18, r24
    53c4:	39 07       	cpc	r19, r25
    53c6:	18 f0       	brcs	.+6      	; 0x53ce <safefree+0x2a>
        ((uint16_t) p <= top) )
    {
        free(p);
    53c8:	0c 94 53 e9 	jmp	0x1d2a6	; 0x1d2a6 <free>
        return;
    53cc:	08 95       	ret
    }
    printf("safefree: FREE ERROR (%u), top:(%u)\n", (uint16_t) p, (uint16_t) top);
    53ce:	3f 93       	push	r19
    53d0:	2f 93       	push	r18
    53d2:	9f 93       	push	r25
    53d4:	8f 93       	push	r24
    53d6:	83 e1       	ldi	r24, 0x13	; 19
    53d8:	93 e0       	ldi	r25, 0x03	; 3
    53da:	1f 92       	push	r1
    53dc:	9f 93       	push	r25
    53de:	8f 93       	push	r24
    53e0:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    PrintFree();
    53e4:	13 df       	rcall	.-474    	; 0x520c <PrintFree>
    53e6:	8d b7       	in	r24, 0x3d	; 61
    53e8:	9e b7       	in	r25, 0x3e	; 62
    53ea:	07 96       	adiw	r24, 0x07	; 7
    53ec:	0f b6       	in	r0, 0x3f	; 63
    53ee:	f8 94       	cli
    53f0:	9e bf       	out	0x3e, r25	; 62
    53f2:	0f be       	out	0x3f, r0	; 63
    53f4:	8d bf       	out	0x3d, r24	; 61
    53f6:	08 95       	ret

000053f8 <delayus>:
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayus(uint32_t us)
{

    while (us >= 100U)
    53f8:	64 36       	cpi	r22, 0x64	; 100
    53fa:	71 05       	cpc	r23, r1
    53fc:	81 05       	cpc	r24, r1
    53fe:	91 05       	cpc	r25, r1
    5400:	58 f0       	brcs	.+22     	; 0x5418 <delayus+0x20>
    {
        us -= 100U;
    5402:	64 56       	subi	r22, 0x64	; 100
    5404:	71 09       	sbc	r23, r1
    5406:	81 09       	sbc	r24, r1
    5408:	91 09       	sbc	r25, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    540a:	e3 ef       	ldi	r30, 0xF3	; 243
    540c:	f1 e0       	ldi	r31, 0x01	; 1
    540e:	31 97       	sbiw	r30, 0x01	; 1
    5410:	f1 f7       	brne	.-4      	; 0x540e <delayus+0x16>
    5412:	00 c0       	rjmp	.+0      	; 0x5414 <delayus+0x1c>
    5414:	00 00       	nop
    5416:	f0 cf       	rjmp	.-32     	; 0x53f8 <delayus>
        _delay_us(100);
    }
    while (us >= 10U)
    5418:	6a 30       	cpi	r22, 0x0A	; 10
    541a:	71 05       	cpc	r23, r1
    541c:	81 05       	cpc	r24, r1
    541e:	91 05       	cpc	r25, r1
    5420:	48 f0       	brcs	.+18     	; 0x5434 <delayus+0x3c>
    {
        us -= 10U;
    5422:	6a 50       	subi	r22, 0x0A	; 10
    5424:	71 09       	sbc	r23, r1
    5426:	81 09       	sbc	r24, r1
    5428:	91 09       	sbc	r25, r1
    542a:	f2 e4       	ldi	r31, 0x42	; 66
    542c:	fa 95       	dec	r31
    542e:	f1 f7       	brne	.-4      	; 0x542c <delayus+0x34>
    5430:	00 c0       	rjmp	.+0      	; 0x5432 <delayus+0x3a>
    5432:	f2 cf       	rjmp	.-28     	; 0x5418 <delayus+0x20>
        _delay_us(10);
    }
    while (us != 0U)
    5434:	61 15       	cp	r22, r1
    5436:	71 05       	cpc	r23, r1
    5438:	81 05       	cpc	r24, r1
    543a:	91 05       	cpc	r25, r1
    543c:	49 f0       	breq	.+18     	; 0x5450 <delayus+0x58>
    {
        --us;
    543e:	61 50       	subi	r22, 0x01	; 1
    5440:	71 09       	sbc	r23, r1
    5442:	81 09       	sbc	r24, r1
    5444:	91 09       	sbc	r25, r1
    5446:	26 e0       	ldi	r18, 0x06	; 6
    5448:	2a 95       	dec	r18
    544a:	f1 f7       	brne	.-4      	; 0x5448 <delayus+0x50>
    544c:	00 c0       	rjmp	.+0      	; 0x544e <delayus+0x56>
    544e:	f2 cf       	rjmp	.-28     	; 0x5434 <delayus+0x3c>
        _delay_us(1);
    }
}
    5450:	08 95       	ret

00005452 <delayms>:
/// _delay_us() has limited range - this extends it.
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayms(uint32_t ms)
{
    while (ms--)
    5452:	61 15       	cp	r22, r1
    5454:	71 05       	cpc	r23, r1
    5456:	81 05       	cpc	r24, r1
    5458:	91 05       	cpc	r25, r1
    545a:	09 f4       	brne	.+2      	; 0x545e <delayms+0xc>
    545c:	41 c0       	rjmp	.+130    	; 0x54e0 <delayms+0x8e>
    545e:	e3 ef       	ldi	r30, 0xF3	; 243
    5460:	f1 e0       	ldi	r31, 0x01	; 1
    5462:	31 97       	sbiw	r30, 0x01	; 1
    5464:	f1 f7       	brne	.-4      	; 0x5462 <delayms+0x10>
    5466:	00 c0       	rjmp	.+0      	; 0x5468 <delayms+0x16>
    5468:	00 00       	nop
    546a:	e3 ef       	ldi	r30, 0xF3	; 243
    546c:	f1 e0       	ldi	r31, 0x01	; 1
    546e:	31 97       	sbiw	r30, 0x01	; 1
    5470:	f1 f7       	brne	.-4      	; 0x546e <delayms+0x1c>
    5472:	00 c0       	rjmp	.+0      	; 0x5474 <delayms+0x22>
    5474:	00 00       	nop
    5476:	e3 ef       	ldi	r30, 0xF3	; 243
    5478:	f1 e0       	ldi	r31, 0x01	; 1
    547a:	31 97       	sbiw	r30, 0x01	; 1
    547c:	f1 f7       	brne	.-4      	; 0x547a <delayms+0x28>
    547e:	00 c0       	rjmp	.+0      	; 0x5480 <delayms+0x2e>
    5480:	00 00       	nop
    5482:	e3 ef       	ldi	r30, 0xF3	; 243
    5484:	f1 e0       	ldi	r31, 0x01	; 1
    5486:	31 97       	sbiw	r30, 0x01	; 1
    5488:	f1 f7       	brne	.-4      	; 0x5486 <delayms+0x34>
    548a:	00 c0       	rjmp	.+0      	; 0x548c <delayms+0x3a>
    548c:	00 00       	nop
    548e:	e3 ef       	ldi	r30, 0xF3	; 243
    5490:	f1 e0       	ldi	r31, 0x01	; 1
    5492:	31 97       	sbiw	r30, 0x01	; 1
    5494:	f1 f7       	brne	.-4      	; 0x5492 <delayms+0x40>
    5496:	00 c0       	rjmp	.+0      	; 0x5498 <delayms+0x46>
    5498:	00 00       	nop
    549a:	e3 ef       	ldi	r30, 0xF3	; 243
    549c:	f1 e0       	ldi	r31, 0x01	; 1
    549e:	31 97       	sbiw	r30, 0x01	; 1
    54a0:	f1 f7       	brne	.-4      	; 0x549e <delayms+0x4c>
    54a2:	00 c0       	rjmp	.+0      	; 0x54a4 <delayms+0x52>
    54a4:	00 00       	nop
    54a6:	e3 ef       	ldi	r30, 0xF3	; 243
    54a8:	f1 e0       	ldi	r31, 0x01	; 1
    54aa:	31 97       	sbiw	r30, 0x01	; 1
    54ac:	f1 f7       	brne	.-4      	; 0x54aa <delayms+0x58>
    54ae:	00 c0       	rjmp	.+0      	; 0x54b0 <delayms+0x5e>
    54b0:	00 00       	nop
    54b2:	e3 ef       	ldi	r30, 0xF3	; 243
    54b4:	f1 e0       	ldi	r31, 0x01	; 1
    54b6:	31 97       	sbiw	r30, 0x01	; 1
    54b8:	f1 f7       	brne	.-4      	; 0x54b6 <delayms+0x64>
    54ba:	00 c0       	rjmp	.+0      	; 0x54bc <delayms+0x6a>
    54bc:	00 00       	nop
    54be:	e3 ef       	ldi	r30, 0xF3	; 243
    54c0:	f1 e0       	ldi	r31, 0x01	; 1
    54c2:	31 97       	sbiw	r30, 0x01	; 1
    54c4:	f1 f7       	brne	.-4      	; 0x54c2 <delayms+0x70>
    54c6:	00 c0       	rjmp	.+0      	; 0x54c8 <delayms+0x76>
    54c8:	00 00       	nop
    54ca:	e3 ef       	ldi	r30, 0xF3	; 243
    54cc:	f1 e0       	ldi	r31, 0x01	; 1
    54ce:	31 97       	sbiw	r30, 0x01	; 1
    54d0:	f1 f7       	brne	.-4      	; 0x54ce <delayms+0x7c>
    54d2:	00 c0       	rjmp	.+0      	; 0x54d4 <delayms+0x82>
    54d4:	00 00       	nop
    54d6:	61 50       	subi	r22, 0x01	; 1
    54d8:	71 09       	sbc	r23, r1
    54da:	81 09       	sbc	r24, r1
    54dc:	91 09       	sbc	r25, r1
    54de:	b9 cf       	rjmp	.-142    	; 0x5452 <delayms>
        _delay_us(100);                           // 700
        _delay_us(100);                           // 800
        _delay_us(100);                           // 900
        _delay_us(100);                           //1000
    }
}
    54e0:	08 95       	ret

000054e2 <uart_ubr>:

    cli();
    c = uarts[uart].rx_buf[uarts[uart].rx_tail];
    sei();
    return (c & 0xff);
}
    54e2:	4f 92       	push	r4
    54e4:	5f 92       	push	r5
    54e6:	6f 92       	push	r6
    54e8:	7f 92       	push	r7
    54ea:	8f 92       	push	r8
    54ec:	9f 92       	push	r9
    54ee:	af 92       	push	r10
    54f0:	bf 92       	push	r11
    54f2:	cf 92       	push	r12
    54f4:	df 92       	push	r13
    54f6:	ef 92       	push	r14
    54f8:	ff 92       	push	r15
    54fa:	cf 93       	push	r28
    54fc:	df 93       	push	r29
    54fe:	5a 01       	movw	r10, r20
    5500:	e9 01       	movw	r28, r18
    5502:	0e 94 3f e7 	call	0x1ce7e	; 0x1ce7e <__floatunsisf>
    5506:	2b 01       	movw	r4, r22
    5508:	3c 01       	movw	r6, r24
    550a:	20 e0       	ldi	r18, 0x00	; 0
    550c:	30 e0       	ldi	r19, 0x00	; 0
    550e:	40 e0       	ldi	r20, 0x00	; 0
    5510:	51 e4       	ldi	r21, 0x41	; 65
    5512:	0e 94 f5 e7 	call	0x1cfea	; 0x1cfea <__mulsf3>
    5516:	9b 01       	movw	r18, r22
    5518:	ac 01       	movw	r20, r24
    551a:	60 e8       	ldi	r22, 0x80	; 128
    551c:	76 e9       	ldi	r23, 0x96	; 150
    551e:	88 e9       	ldi	r24, 0x98	; 152
    5520:	9b e4       	ldi	r25, 0x4B	; 75
    5522:	0e 94 a6 e6 	call	0x1cd4c	; 0x1cd4c <__divsf3>
    5526:	20 e0       	ldi	r18, 0x00	; 0
    5528:	30 e0       	ldi	r19, 0x00	; 0
    552a:	40 e8       	ldi	r20, 0x80	; 128
    552c:	5f e3       	ldi	r21, 0x3F	; 63
    552e:	0e 94 3d e6 	call	0x1cc7a	; 0x1cc7a <__subsf3>
    5532:	0e 94 58 e8 	call	0x1d0b0	; 0x1d0b0 <round>
    5536:	0e 94 13 e7 	call	0x1ce26	; 0x1ce26 <__fixunssfsi>
    553a:	6b 01       	movw	r12, r22
    553c:	7c 01       	movw	r14, r24
    553e:	c1 14       	cp	r12, r1
    5540:	80 e1       	ldi	r24, 0x10	; 16
    5542:	d8 06       	cpc	r13, r24
    5544:	e1 04       	cpc	r14, r1
    5546:	f1 04       	cpc	r15, r1
    5548:	58 f4       	brcc	.+22     	; 0x5560 <uart_ubr+0x7e>
    554a:	81 e0       	ldi	r24, 0x01	; 1
    554c:	90 e0       	ldi	r25, 0x00	; 0
    554e:	f5 01       	movw	r30, r10
    5550:	91 83       	std	Z+1, r25	; 0x01
    5552:	80 83       	st	Z, r24
    5554:	81 2c       	mov	r8, r1
    5556:	91 2c       	mov	r9, r1
    5558:	a1 2c       	mov	r10, r1
    555a:	21 e4       	ldi	r18, 0x41	; 65
    555c:	b2 2e       	mov	r11, r18
    555e:	31 c0       	rjmp	.+98     	; 0x55c2 <uart_ubr+0xe0>
    5560:	f5 01       	movw	r30, r10
    5562:	11 82       	std	Z+1, r1	; 0x01
    5564:	10 82       	st	Z, r1
    5566:	20 e0       	ldi	r18, 0x00	; 0
    5568:	30 e0       	ldi	r19, 0x00	; 0
    556a:	40 e8       	ldi	r20, 0x80	; 128
    556c:	51 e4       	ldi	r21, 0x41	; 65
    556e:	c3 01       	movw	r24, r6
    5570:	b2 01       	movw	r22, r4
    5572:	0e 94 f5 e7 	call	0x1cfea	; 0x1cfea <__mulsf3>
    5576:	9b 01       	movw	r18, r22
    5578:	ac 01       	movw	r20, r24
    557a:	60 e8       	ldi	r22, 0x80	; 128
    557c:	76 e9       	ldi	r23, 0x96	; 150
    557e:	88 e9       	ldi	r24, 0x98	; 152
    5580:	9b e4       	ldi	r25, 0x4B	; 75
    5582:	0e 94 a6 e6 	call	0x1cd4c	; 0x1cd4c <__divsf3>
    5586:	20 e0       	ldi	r18, 0x00	; 0
    5588:	30 e0       	ldi	r19, 0x00	; 0
    558a:	40 e8       	ldi	r20, 0x80	; 128
    558c:	5f e3       	ldi	r21, 0x3F	; 63
    558e:	0e 94 3d e6 	call	0x1cc7a	; 0x1cc7a <__subsf3>
    5592:	0e 94 58 e8 	call	0x1d0b0	; 0x1d0b0 <round>
    5596:	0e 94 13 e7 	call	0x1ce26	; 0x1ce26 <__fixunssfsi>
    559a:	6b 01       	movw	r12, r22
    559c:	7c 01       	movw	r14, r24
    559e:	81 2c       	mov	r8, r1
    55a0:	91 2c       	mov	r9, r1
    55a2:	90 e8       	ldi	r25, 0x80	; 128
    55a4:	a9 2e       	mov	r10, r25
    55a6:	91 e4       	ldi	r25, 0x41	; 65
    55a8:	b9 2e       	mov	r11, r25
    55aa:	c1 14       	cp	r12, r1
    55ac:	f0 e1       	ldi	r31, 0x10	; 16
    55ae:	df 06       	cpc	r13, r31
    55b0:	e1 04       	cpc	r14, r1
    55b2:	f1 04       	cpc	r15, r1
    55b4:	30 f0       	brcs	.+12     	; 0x55c2 <uart_ubr+0xe0>
    55b6:	cc 24       	eor	r12, r12
    55b8:	ca 94       	dec	r12
    55ba:	8f e0       	ldi	r24, 0x0F	; 15
    55bc:	d8 2e       	mov	r13, r24
    55be:	e1 2c       	mov	r14, r1
    55c0:	f1 2c       	mov	r15, r1
    55c2:	c7 01       	movw	r24, r14
    55c4:	b6 01       	movw	r22, r12
    55c6:	6f 5f       	subi	r22, 0xFF	; 255
    55c8:	7f 4f       	sbci	r23, 0xFF	; 255
    55ca:	8f 4f       	sbci	r24, 0xFF	; 255
    55cc:	9f 4f       	sbci	r25, 0xFF	; 255
    55ce:	0e 94 3f e7 	call	0x1ce7e	; 0x1ce7e <__floatunsisf>
    55d2:	a5 01       	movw	r20, r10
    55d4:	94 01       	movw	r18, r8
    55d6:	0e 94 f5 e7 	call	0x1cfea	; 0x1cfea <__mulsf3>
    55da:	9b 01       	movw	r18, r22
    55dc:	ac 01       	movw	r20, r24
    55de:	60 e8       	ldi	r22, 0x80	; 128
    55e0:	76 e9       	ldi	r23, 0x96	; 150
    55e2:	88 e9       	ldi	r24, 0x98	; 152
    55e4:	9b e4       	ldi	r25, 0x4B	; 75
    55e6:	0e 94 a6 e6 	call	0x1cd4c	; 0x1cd4c <__divsf3>
    55ea:	0e 94 13 e7 	call	0x1ce26	; 0x1ce26 <__fixunssfsi>
    55ee:	68 83       	st	Y, r22
    55f0:	79 83       	std	Y+1, r23	; 0x01
    55f2:	8a 83       	std	Y+2, r24	; 0x02
    55f4:	9b 83       	std	Y+3, r25	; 0x03
    55f6:	c6 01       	movw	r24, r12
    55f8:	df 91       	pop	r29
    55fa:	cf 91       	pop	r28
    55fc:	ff 90       	pop	r15
    55fe:	ef 90       	pop	r14
    5600:	df 90       	pop	r13
    5602:	cf 90       	pop	r12
    5604:	bf 90       	pop	r11
    5606:	af 90       	pop	r10
    5608:	9f 90       	pop	r9
    560a:	8f 90       	pop	r8
    560c:	7f 90       	pop	r7
    560e:	6f 90       	pop	r6
    5610:	5f 90       	pop	r5
    5612:	4f 90       	pop	r4
    5614:	08 95       	ret

00005616 <uart_init>:
    5616:	a6 e0       	ldi	r26, 0x06	; 6
    5618:	b0 e0       	ldi	r27, 0x00	; 0
    561a:	e1 e1       	ldi	r30, 0x11	; 17
    561c:	fb e2       	ldi	r31, 0x2B	; 43
    561e:	0c 94 03 e6 	jmp	0x1cc06	; 0x1cc06 <__prologue_saves__+0x20>
    5622:	1e 82       	std	Y+6, r1	; 0x06
    5624:	1d 82       	std	Y+5, r1	; 0x05
    5626:	81 11       	cpse	r24, r1
    5628:	36 c0       	rjmp	.+108    	; 0x5696 <uart_init+0x80>
    562a:	cb 01       	movw	r24, r22
    562c:	ba 01       	movw	r22, r20
    562e:	9e 01       	movw	r18, r28
    5630:	2f 5f       	subi	r18, 0xFF	; 255
    5632:	3f 4f       	sbci	r19, 0xFF	; 255
    5634:	ae 01       	movw	r20, r28
    5636:	4b 5f       	subi	r20, 0xFB	; 251
    5638:	5f 4f       	sbci	r21, 0xFF	; 255
    563a:	53 df       	rcall	.-346    	; 0x54e2 <uart_ubr>
    563c:	f8 94       	cli
    563e:	10 92 f7 18 	sts	0x18F7, r1	; 0x8018f7 <uarts+0x4>
    5642:	10 92 f6 18 	sts	0x18F6, r1	; 0x8018f6 <uarts+0x3>
    5646:	10 92 f3 18 	sts	0x18F3, r1	; 0x8018f3 <uarts>
    564a:	10 92 f4 18 	sts	0x18F4, r1	; 0x8018f4 <uarts+0x1>
    564e:	10 92 f5 18 	sts	0x18F5, r1	; 0x8018f5 <uarts+0x2>
    5652:	10 92 f8 18 	sts	0x18F8, r1	; 0x8018f8 <uarts+0x5>
    5656:	78 94       	sei
    5658:	f8 94       	cli
    565a:	58 9a       	sbi	0x0b, 0	; 11
    565c:	59 9a       	sbi	0x0b, 1	; 11
    565e:	50 98       	cbi	0x0a, 0	; 10
    5660:	51 9a       	sbi	0x0a, 1	; 10
    5662:	28 e9       	ldi	r18, 0x98	; 152
    5664:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    5668:	2d 81       	ldd	r18, Y+5	; 0x05
    566a:	3e 81       	ldd	r19, Y+6	; 0x06
    566c:	23 2b       	or	r18, r19
    566e:	19 f0       	breq	.+6      	; 0x5676 <uart_init+0x60>
    5670:	22 e0       	ldi	r18, 0x02	; 2
    5672:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    5676:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    567a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    567e:	78 94       	sei
    5680:	60 e0       	ldi	r22, 0x00	; 0
    5682:	7c e2       	ldi	r23, 0x2C	; 44
    5684:	85 e1       	ldi	r24, 0x15	; 21
    5686:	9c e2       	ldi	r25, 0x2C	; 44
    5688:	0e 94 c8 79 	call	0xf390	; 0xf390 <fdevopen>
    568c:	69 81       	ldd	r22, Y+1	; 0x01
    568e:	7a 81       	ldd	r23, Y+2	; 0x02
    5690:	8b 81       	ldd	r24, Y+3	; 0x03
    5692:	9c 81       	ldd	r25, Y+4	; 0x04
    5694:	03 c0       	rjmp	.+6      	; 0x569c <uart_init+0x86>
    5696:	60 e0       	ldi	r22, 0x00	; 0
    5698:	70 e0       	ldi	r23, 0x00	; 0
    569a:	cb 01       	movw	r24, r22
    569c:	26 96       	adiw	r28, 0x06	; 6
    569e:	e2 e0       	ldi	r30, 0x02	; 2
    56a0:	0c 94 1f e6 	jmp	0x1cc3e	; 0x1cc3e <__epilogue_restores__+0x20>

000056a4 <uart_rx_interrupt>:
    56a4:	27 e5       	ldi	r18, 0x57	; 87
    56a6:	82 9f       	mul	r24, r18
    56a8:	c0 01       	movw	r24, r0
    56aa:	11 24       	eor	r1, r1
    56ac:	fc 01       	movw	r30, r24
    56ae:	ed 50       	subi	r30, 0x0D	; 13
    56b0:	f7 4e       	sbci	r31, 0xE7	; 231
    56b2:	83 81       	ldd	r24, Z+3	; 0x03
    56b4:	94 81       	ldd	r25, Z+4	; 0x04
    56b6:	80 35       	cpi	r24, 0x50	; 80
    56b8:	91 05       	cpc	r25, r1
    56ba:	84 f4       	brge	.+32     	; 0x56dc <uart_rx_interrupt+0x38>
    56bc:	30 81       	ld	r19, Z
    56be:	21 e0       	ldi	r18, 0x01	; 1
    56c0:	23 0f       	add	r18, r19
    56c2:	20 83       	st	Z, r18
    56c4:	df 01       	movw	r26, r30
    56c6:	a3 0f       	add	r26, r19
    56c8:	b1 1d       	adc	r27, r1
    56ca:	16 96       	adiw	r26, 0x06	; 6
    56cc:	6c 93       	st	X, r22
    56ce:	01 96       	adiw	r24, 0x01	; 1
    56d0:	94 83       	std	Z+4, r25	; 0x04
    56d2:	83 83       	std	Z+3, r24	; 0x03
    56d4:	20 35       	cpi	r18, 0x50	; 80
    56d6:	28 f0       	brcs	.+10     	; 0x56e2 <uart_rx_interrupt+0x3e>
    56d8:	10 82       	st	Z, r1
    56da:	08 95       	ret
    56dc:	85 81       	ldd	r24, Z+5	; 0x05
    56de:	81 60       	ori	r24, 0x01	; 1
    56e0:	85 83       	std	Z+5, r24	; 0x05
    56e2:	08 95       	ret

000056e4 <__vector_20>:
    56e4:	1f 92       	push	r1
    56e6:	0f 92       	push	r0
    56e8:	0f b6       	in	r0, 0x3f	; 63
    56ea:	0f 92       	push	r0
    56ec:	11 24       	eor	r1, r1
    56ee:	0b b6       	in	r0, 0x3b	; 59
    56f0:	0f 92       	push	r0
    56f2:	2f 93       	push	r18
    56f4:	3f 93       	push	r19
    56f6:	4f 93       	push	r20
    56f8:	5f 93       	push	r21
    56fa:	6f 93       	push	r22
    56fc:	7f 93       	push	r23
    56fe:	8f 93       	push	r24
    5700:	9f 93       	push	r25
    5702:	af 93       	push	r26
    5704:	bf 93       	push	r27
    5706:	ef 93       	push	r30
    5708:	ff 93       	push	r31
    570a:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    570e:	80 e0       	ldi	r24, 0x00	; 0
    5710:	c9 df       	rcall	.-110    	; 0x56a4 <uart_rx_interrupt>
    5712:	ff 91       	pop	r31
    5714:	ef 91       	pop	r30
    5716:	bf 91       	pop	r27
    5718:	af 91       	pop	r26
    571a:	9f 91       	pop	r25
    571c:	8f 91       	pop	r24
    571e:	7f 91       	pop	r23
    5720:	6f 91       	pop	r22
    5722:	5f 91       	pop	r21
    5724:	4f 91       	pop	r20
    5726:	3f 91       	pop	r19
    5728:	2f 91       	pop	r18
    572a:	0f 90       	pop	r0
    572c:	0b be       	out	0x3b, r0	; 59
    572e:	0f 90       	pop	r0
    5730:	0f be       	out	0x3f, r0	; 63
    5732:	0f 90       	pop	r0
    5734:	1f 90       	pop	r1
    5736:	18 95       	reti

00005738 <uart_rx_count>:
/// @return  Character count in ring buffer.
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
    5738:	81 11       	cpse	r24, r1
    573a:	07 c0       	rjmp	.+14     	; 0x574a <uart_rx_count+0x12>
        return(EOF);

    cli();
    573c:	f8 94       	cli

    count = uarts[uart].rx_count;
    573e:	80 91 f6 18 	lds	r24, 0x18F6	; 0x8018f6 <uarts+0x3>
    5742:	90 91 f7 18 	lds	r25, 0x18F7	; 0x8018f7 <uarts+0x4>

    sei();
    5746:	78 94       	sei

    return (count );
    5748:	08 95       	ret
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
        return(EOF);
    574a:	8f ef       	ldi	r24, 0xFF	; 255
    574c:	9f ef       	ldi	r25, 0xFF	; 255
    count = uarts[uart].rx_count;

    sei();

    return (count );
}
    574e:	08 95       	ret

00005750 <uart_get_tail>:
/// @see uart_rx_count().
int uart_get_tail(uint8_t uart)
{
    uint8_t c;

    if (uart >= UARTS)
    5750:	81 11       	cpse	r24, r1
    5752:	21 c0       	rjmp	.+66     	; 0x5796 <uart_get_tail+0x46>
	{
        return(EOF);
	}

	while(uart_rx_count(uart) < 1)
    5754:	80 e0       	ldi	r24, 0x00	; 0
    5756:	f0 df       	rcall	.-32     	; 0x5738 <uart_rx_count>
    5758:	18 16       	cp	r1, r24
    575a:	19 06       	cpc	r1, r25
    575c:	dc f7       	brge	.-10     	; 0x5754 <uart_get_tail+0x4>
		;

    cli();
    575e:	f8 94       	cli
    c = uarts[uart].rx_buf[uarts[uart].rx_tail++];
    5760:	e0 91 f4 18 	lds	r30, 0x18F4	; 0x8018f4 <uarts+0x1>
    5764:	91 e0       	ldi	r25, 0x01	; 1
    5766:	9e 0f       	add	r25, r30
    5768:	90 93 f4 18 	sts	0x18F4, r25	; 0x8018f4 <uarts+0x1>
    576c:	f0 e0       	ldi	r31, 0x00	; 0
    576e:	ed 50       	subi	r30, 0x0D	; 13
    5770:	f7 4e       	sbci	r31, 0xE7	; 231
    5772:	86 81       	ldd	r24, Z+6	; 0x06
    if (uarts[uart].rx_tail >= RX_BUF_SIZE)
    5774:	90 35       	cpi	r25, 0x50	; 80
    5776:	10 f0       	brcs	.+4      	; 0x577c <uart_get_tail+0x2c>
        uarts[uart].rx_tail = 0;
    5778:	10 92 f4 18 	sts	0x18F4, r1	; 0x8018f4 <uarts+0x1>
    uarts[uart].rx_count--;
    577c:	20 91 f6 18 	lds	r18, 0x18F6	; 0x8018f6 <uarts+0x3>
    5780:	30 91 f7 18 	lds	r19, 0x18F7	; 0x8018f7 <uarts+0x4>
    5784:	21 50       	subi	r18, 0x01	; 1
    5786:	31 09       	sbc	r19, r1
    5788:	30 93 f7 18 	sts	0x18F7, r19	; 0x8018f7 <uarts+0x4>
    578c:	20 93 f6 18 	sts	0x18F6, r18	; 0x8018f6 <uarts+0x3>
    sei();
    5790:	78 94       	sei

    return (c & 0xff);
    5792:	90 e0       	ldi	r25, 0x00	; 0
    5794:	08 95       	ret
{
    uint8_t c;

    if (uart >= UARTS)
	{
        return(EOF);
    5796:	8f ef       	ldi	r24, 0xFF	; 255
    5798:	9f ef       	ldi	r25, 0xFF	; 255
        uarts[uart].rx_tail = 0;
    uarts[uart].rx_count--;
    sei();

    return (c & 0xff);
}
    579a:	08 95       	ret

0000579c <uart_rx_byte>:
///
/// @param[in] uart: uart number.
///
/// @return  Character.
int uart_rx_byte(uint8_t uart)
{
    579c:	d9 df       	rcall	.-78     	; 0x5750 <uart_get_tail>
    579e:	99 27       	eor	r25, r25
    57a0:	08 95       	ret

000057a2 <uart_tx_byte>:
    57a2:	61 11       	cpse	r22, r1
    57a4:	09 c0       	rjmp	.+18     	; 0x57b8 <uart_tx_byte+0x16>
    57a6:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    57aa:	25 ff       	sbrs	r18, 5
    57ac:	fc cf       	rjmp	.-8      	; 0x57a6 <uart_tx_byte+0x4>
    57ae:	28 2f       	mov	r18, r24
    57b0:	2f 77       	andi	r18, 0x7F	; 127
    57b2:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    57b6:	08 95       	ret
    57b8:	61 30       	cpi	r22, 0x01	; 1
    57ba:	49 f4       	brne	.+18     	; 0x57ce <uart_tx_byte+0x2c>
    57bc:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    57c0:	25 ff       	sbrs	r18, 5
    57c2:	fc cf       	rjmp	.-8      	; 0x57bc <uart_tx_byte+0x1a>
    57c4:	28 2f       	mov	r18, r24
    57c6:	2f 77       	andi	r18, 0x7F	; 127
    57c8:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    57cc:	08 95       	ret
    57ce:	8f ef       	ldi	r24, 0xFF	; 255
    57d0:	9f ef       	ldi	r25, 0xFF	; 255
    57d2:	08 95       	ret

000057d4 <uart_getchar>:
    57d4:	cf 93       	push	r28
    57d6:	81 11       	cpse	r24, r1
    57d8:	0f c0       	rjmp	.+30     	; 0x57f8 <uart_getchar+0x24>
    57da:	e0 df       	rcall	.-64     	; 0x579c <uart_rx_byte>
    57dc:	c8 2f       	mov	r28, r24
    57de:	60 e0       	ldi	r22, 0x00	; 0
    57e0:	90 e0       	ldi	r25, 0x00	; 0
    57e2:	df df       	rcall	.-66     	; 0x57a2 <uart_tx_byte>
    57e4:	cd 30       	cpi	r28, 0x0D	; 13
    57e6:	29 f4       	brne	.+10     	; 0x57f2 <uart_getchar+0x1e>
    57e8:	60 e0       	ldi	r22, 0x00	; 0
    57ea:	8a e0       	ldi	r24, 0x0A	; 10
    57ec:	90 e0       	ldi	r25, 0x00	; 0
    57ee:	d9 df       	rcall	.-78     	; 0x57a2 <uart_tx_byte>
    57f0:	ca e0       	ldi	r28, 0x0A	; 10
    57f2:	8c 2f       	mov	r24, r28
    57f4:	90 e0       	ldi	r25, 0x00	; 0
    57f6:	02 c0       	rjmp	.+4      	; 0x57fc <uart_getchar+0x28>
    57f8:	8f ef       	ldi	r24, 0xFF	; 255
    57fa:	9f ef       	ldi	r25, 0xFF	; 255
    57fc:	cf 91       	pop	r28
    57fe:	08 95       	ret

00005800 <uart0_getchar>:
    5800:	80 e0       	ldi	r24, 0x00	; 0
    5802:	e8 cf       	rjmp	.-48     	; 0x57d4 <uart_getchar>
    5804:	08 95       	ret

00005806 <uart_putchar>:
    5806:	1f 93       	push	r17
    5808:	cf 93       	push	r28
    580a:	df 93       	push	r29
    580c:	ec 01       	movw	r28, r24
    580e:	16 2f       	mov	r17, r22
    5810:	c8 df       	rcall	.-112    	; 0x57a2 <uart_tx_byte>
    5812:	ca 30       	cpi	r28, 0x0A	; 10
    5814:	d1 05       	cpc	r29, r1
    5816:	21 f4       	brne	.+8      	; 0x5820 <uart_putchar+0x1a>
    5818:	61 2f       	mov	r22, r17
    581a:	8d e0       	ldi	r24, 0x0D	; 13
    581c:	90 e0       	ldi	r25, 0x00	; 0
    581e:	c1 df       	rcall	.-126    	; 0x57a2 <uart_tx_byte>
    5820:	ce 01       	movw	r24, r28
    5822:	df 91       	pop	r29
    5824:	cf 91       	pop	r28
    5826:	1f 91       	pop	r17
    5828:	08 95       	ret

0000582a <uart0_putchar>:
    582a:	cf 93       	push	r28
    582c:	df 93       	push	r29
    582e:	ec 01       	movw	r28, r24
    5830:	60 e0       	ldi	r22, 0x00	; 0
    5832:	70 e0       	ldi	r23, 0x00	; 0
    5834:	e8 df       	rcall	.-48     	; 0x5806 <uart_putchar>
    5836:	ce 01       	movw	r24, r28
    5838:	df 91       	pop	r29
    583a:	cf 91       	pop	r28
    583c:	08 95       	ret

0000583e <uart_keyhit>:
    583e:	7c cf       	rjmp	.-264    	; 0x5738 <uart_rx_count>
    5840:	08 95       	ret

00005842 <SPI0_Speed>:
/// @brief  Return saved SPI mode as set by SPI0_Mode().
/// @return  saved mode.
int SPI0_Get_Mode( void )
{
    return(SPI0_Mode_value);
}
    5842:	cf 92       	push	r12
    5844:	df 92       	push	r13
    5846:	ef 92       	push	r14
    5848:	ff 92       	push	r15
    584a:	6b 01       	movw	r12, r22
    584c:	7c 01       	movw	r14, r24
    584e:	80 91 4a 17 	lds	r24, 0x174A	; 0x80174a <SPI0_Speed_value>
    5852:	90 91 4b 17 	lds	r25, 0x174B	; 0x80174b <SPI0_Speed_value+0x1>
    5856:	a0 91 4c 17 	lds	r26, 0x174C	; 0x80174c <SPI0_Speed_value+0x2>
    585a:	b0 91 4d 17 	lds	r27, 0x174D	; 0x80174d <SPI0_Speed_value+0x3>
    585e:	8c 15       	cp	r24, r12
    5860:	9d 05       	cpc	r25, r13
    5862:	ae 05       	cpc	r26, r14
    5864:	bf 05       	cpc	r27, r15
    5866:	09 f4       	brne	.+2      	; 0x586a <SPI0_Speed+0x28>
    5868:	4e c0       	rjmp	.+156    	; 0x5906 <SPI0_Speed+0xc4>
    586a:	60 e0       	ldi	r22, 0x00	; 0
    586c:	7d e2       	ldi	r23, 0x2D	; 45
    586e:	81 e3       	ldi	r24, 0x31	; 49
    5870:	91 e0       	ldi	r25, 0x01	; 1
    5872:	a7 01       	movw	r20, r14
    5874:	96 01       	movw	r18, r12
    5876:	0e 94 71 e5 	call	0x1cae2	; 0x1cae2 <__udivmodsi4>
    587a:	20 38       	cpi	r18, 0x80	; 128
    587c:	31 05       	cpc	r19, r1
    587e:	41 05       	cpc	r20, r1
    5880:	51 05       	cpc	r21, r1
    5882:	28 f4       	brcc	.+10     	; 0x588e <SPI0_Speed+0x4c>
    5884:	20 34       	cpi	r18, 0x40	; 64
    5886:	31 05       	cpc	r19, r1
    5888:	41 05       	cpc	r20, r1
    588a:	51 05       	cpc	r21, r1
    588c:	30 f0       	brcs	.+12     	; 0x589a <SPI0_Speed+0x58>
    588e:	8d b5       	in	r24, 0x2d	; 45
    5890:	8e 7f       	andi	r24, 0xFE	; 254
    5892:	8d bd       	out	0x2d, r24	; 45
    5894:	8c b5       	in	r24, 0x2c	; 44
    5896:	82 60       	ori	r24, 0x02	; 2
    5898:	1b c0       	rjmp	.+54     	; 0x58d0 <SPI0_Speed+0x8e>
    589a:	8d b5       	in	r24, 0x2d	; 45
    589c:	20 32       	cpi	r18, 0x20	; 32
    589e:	31 05       	cpc	r19, r1
    58a0:	41 05       	cpc	r20, r1
    58a2:	51 05       	cpc	r21, r1
    58a4:	28 f0       	brcs	.+10     	; 0x58b0 <SPI0_Speed+0x6e>
    58a6:	81 60       	ori	r24, 0x01	; 1
    58a8:	8d bd       	out	0x2d, r24	; 45
    58aa:	8c b5       	in	r24, 0x2c	; 44
    58ac:	82 60       	ori	r24, 0x02	; 2
    58ae:	1f c0       	rjmp	.+62     	; 0x58ee <SPI0_Speed+0xac>
    58b0:	20 31       	cpi	r18, 0x10	; 16
    58b2:	31 05       	cpc	r19, r1
    58b4:	41 05       	cpc	r20, r1
    58b6:	51 05       	cpc	r21, r1
    58b8:	10 f0       	brcs	.+4      	; 0x58be <SPI0_Speed+0x7c>
    58ba:	8e 7f       	andi	r24, 0xFE	; 254
    58bc:	06 c0       	rjmp	.+12     	; 0x58ca <SPI0_Speed+0x88>
    58be:	28 30       	cpi	r18, 0x08	; 8
    58c0:	31 05       	cpc	r19, r1
    58c2:	41 05       	cpc	r20, r1
    58c4:	51 05       	cpc	r21, r1
    58c6:	40 f0       	brcs	.+16     	; 0x58d8 <SPI0_Speed+0x96>
    58c8:	81 60       	ori	r24, 0x01	; 1
    58ca:	8d bd       	out	0x2d, r24	; 45
    58cc:	8c b5       	in	r24, 0x2c	; 44
    58ce:	8d 7f       	andi	r24, 0xFD	; 253
    58d0:	8c bd       	out	0x2c, r24	; 44
    58d2:	8c b5       	in	r24, 0x2c	; 44
    58d4:	81 60       	ori	r24, 0x01	; 1
    58d6:	0e c0       	rjmp	.+28     	; 0x58f4 <SPI0_Speed+0xb2>
    58d8:	24 30       	cpi	r18, 0x04	; 4
    58da:	31 05       	cpc	r19, r1
    58dc:	41 05       	cpc	r20, r1
    58de:	51 05       	cpc	r21, r1
    58e0:	10 f0       	brcs	.+4      	; 0x58e6 <SPI0_Speed+0xa4>
    58e2:	8e 7f       	andi	r24, 0xFE	; 254
    58e4:	01 c0       	rjmp	.+2      	; 0x58e8 <SPI0_Speed+0xa6>
    58e6:	81 60       	ori	r24, 0x01	; 1
    58e8:	8d bd       	out	0x2d, r24	; 45
    58ea:	8c b5       	in	r24, 0x2c	; 44
    58ec:	8d 7f       	andi	r24, 0xFD	; 253
    58ee:	8c bd       	out	0x2c, r24	; 44
    58f0:	8c b5       	in	r24, 0x2c	; 44
    58f2:	8e 7f       	andi	r24, 0xFE	; 254
    58f4:	8c bd       	out	0x2c, r24	; 44
    58f6:	c0 92 4a 17 	sts	0x174A, r12	; 0x80174a <SPI0_Speed_value>
    58fa:	d0 92 4b 17 	sts	0x174B, r13	; 0x80174b <SPI0_Speed_value+0x1>
    58fe:	e0 92 4c 17 	sts	0x174C, r14	; 0x80174c <SPI0_Speed_value+0x2>
    5902:	f0 92 4d 17 	sts	0x174D, r15	; 0x80174d <SPI0_Speed_value+0x3>
    5906:	ff 90       	pop	r15
    5908:	ef 90       	pop	r14
    590a:	df 90       	pop	r13
    590c:	cf 90       	pop	r12
    590e:	08 95       	ret

00005910 <SPI0_Mode>:
    5910:	cf 93       	push	r28
    5912:	df 93       	push	r29
    5914:	ec 01       	movw	r28, r24
    5916:	81 30       	cpi	r24, 0x01	; 1
    5918:	91 05       	cpc	r25, r1
    591a:	71 f0       	breq	.+28     	; 0x5938 <SPI0_Mode+0x28>
    591c:	2c f4       	brge	.+10     	; 0x5928 <SPI0_Mode+0x18>
    591e:	89 2b       	or	r24, r25
    5920:	c1 f4       	brne	.+48     	; 0x5952 <SPI0_Mode+0x42>
    5922:	8c b5       	in	r24, 0x2c	; 44
    5924:	87 7f       	andi	r24, 0xF7	; 247
    5926:	11 c0       	rjmp	.+34     	; 0x594a <SPI0_Mode+0x3a>
    5928:	82 30       	cpi	r24, 0x02	; 2
    592a:	91 05       	cpc	r25, r1
    592c:	61 f0       	breq	.+24     	; 0x5946 <SPI0_Mode+0x36>
    592e:	03 97       	sbiw	r24, 0x03	; 3
    5930:	81 f4       	brne	.+32     	; 0x5952 <SPI0_Mode+0x42>
    5932:	8c b5       	in	r24, 0x2c	; 44
    5934:	88 60       	ori	r24, 0x08	; 8
    5936:	02 c0       	rjmp	.+4      	; 0x593c <SPI0_Mode+0x2c>
    5938:	8c b5       	in	r24, 0x2c	; 44
    593a:	87 7f       	andi	r24, 0xF7	; 247
    593c:	8c bd       	out	0x2c, r24	; 44
    593e:	8c b5       	in	r24, 0x2c	; 44
    5940:	84 60       	ori	r24, 0x04	; 4
    5942:	8c bd       	out	0x2c, r24	; 44
    5944:	14 c0       	rjmp	.+40     	; 0x596e <SPI0_Mode+0x5e>
    5946:	8c b5       	in	r24, 0x2c	; 44
    5948:	88 60       	ori	r24, 0x08	; 8
    594a:	8c bd       	out	0x2c, r24	; 44
    594c:	8c b5       	in	r24, 0x2c	; 44
    594e:	8b 7f       	andi	r24, 0xFB	; 251
    5950:	f8 cf       	rjmp	.-16     	; 0x5942 <SPI0_Mode+0x32>
    5952:	df 93       	push	r29
    5954:	cf 93       	push	r28
    5956:	8a e2       	ldi	r24, 0x2A	; 42
    5958:	94 e0       	ldi	r25, 0x04	; 4
    595a:	1f 92       	push	r1
    595c:	9f 93       	push	r25
    595e:	8f 93       	push	r24
    5960:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    5964:	0f 90       	pop	r0
    5966:	0f 90       	pop	r0
    5968:	0f 90       	pop	r0
    596a:	0f 90       	pop	r0
    596c:	0f 90       	pop	r0
    596e:	d0 93 49 17 	sts	0x1749, r29	; 0x801749 <__data_end+0x1>
    5972:	c0 93 48 17 	sts	0x1748, r28	; 0x801748 <__data_end>
    5976:	df 91       	pop	r29
    5978:	cf 91       	pop	r28
    597a:	08 95       	ret

0000597c <SPI0_TXRX_Byte>:
/// @param[in] Data: Data to send.
///
/// @return  Data received.
uint8_t SPI0_TXRX_Byte(uint8_t Data)
{
    SPDR = Data;                                  // Transmit
    597c:	8e bd       	out	0x2e, r24	; 46

    while( !BIT_TST(SPSR,SPIF) )                  // Wait for send
    597e:	0d b4       	in	r0, 0x2d	; 45
    5980:	07 fe       	sbrs	r0, 7
    5982:	fd cf       	rjmp	.-6      	; 0x597e <SPI0_TXRX_Byte+0x2>
        ;

    return (SPDR);                                // Received Data
    5984:	8e b5       	in	r24, 0x2e	; 46
}
    5986:	08 95       	ret

00005988 <SPI0_Init>:

///@brief Initialize SPI0 device.
/// See Atmel App Note AVR151
/// Set default speed, IO pins and mode.
void SPI0_Init(uint32_t speed)
{
    5988:	cf 92       	push	r12
    598a:	df 92       	push	r13
    598c:	ef 92       	push	r14
    598e:	ff 92       	push	r15
    5990:	cf 93       	push	r28
    5992:	df 93       	push	r29
    5994:	1f 92       	push	r1
    5996:	cd b7       	in	r28, 0x3d	; 61
    5998:	de b7       	in	r29, 0x3e	; 62
    599a:	6b 01       	movw	r12, r22
    599c:	7c 01       	movw	r14, r24
	printf("Port B DDR:   0x%02x\n", (int) GPIO_PORT_DDR_RD(GPIO_B));
	printf("Port B LATCH: 0x%02x\n", (int) GPIO_PORT_LATCH_RD(GPIO_B));
	printf("Port B PINS:  0x%02x\n", (int) GPIO_PORT_LATCH_RD(GPIO_B));
#endif

	SPCR = 0;				// Clear SPCR in case we are not called after RESET
    599e:	1c bc       	out	0x2c, r1	; 44

    GPIO_PIN_HI(SCK);       // SCK Output
    59a0:	2f 9a       	sbi	0x05, 7	; 5
    59a2:	27 9a       	sbi	0x04, 7	; 4
    GPIO_PIN_HI(MOSI);                                  // MOSI Output
    59a4:	2d 9a       	sbi	0x05, 5	; 5
    59a6:	25 9a       	sbi	0x04, 5	; 4
    GPIO_PIN_FLOAT(MISO);   // MISO Input, no pull-up
    59a8:	26 98       	cbi	0x04, 6	; 4

	// Warning *** MSTR MUST be set BEFORE SPE!!!! *** otherwise SS will NOT behave as an output
	GPIO_PIN_LOW(SS); 		// SS Output must be HI prevent slave mode from getting set while initializing
    59aa:	2c 98       	cbi	0x05, 4	; 5
    59ac:	24 9a       	sbi	0x04, 4	; 4
    BIT_SET(SPCR, MSTR);    // Master Mode
    59ae:	8c b5       	in	r24, 0x2c	; 44
    59b0:	80 61       	ori	r24, 0x10	; 16
    59b2:	8c bd       	out	0x2c, r24	; 44
    BIT_SET(SPCR, SPE);     // Enable SPI
    59b4:	8c b5       	in	r24, 0x2c	; 44
    59b6:	80 64       	ori	r24, 0x40	; 64
    59b8:	8c bd       	out	0x2c, r24	; 44

	// SPI Clear any pending interrupt flags
	D = SPSR;
    59ba:	8d b5       	in	r24, 0x2d	; 45
    59bc:	89 83       	std	Y+1, r24	; 0x01
	D = SPDR;
    59be:	8e b5       	in	r24, 0x2e	; 46
    59c0:	89 83       	std	Y+1, r24	; 0x01

	/// Set SPI clock mode 0 
    ///  SPI Mode     CPOL    CPHA            Sample
    ///  0    0       0       Leading (Rising)   Edge
    SPI0_Mode(0);
    59c2:	80 e0       	ldi	r24, 0x00	; 0
    59c4:	90 e0       	ldi	r25, 0x00	; 0
    59c6:	a4 df       	rcall	.-184    	; 0x5910 <SPI0_Mode>

	// Set SPI clock speed
    SPI0_Speed(speed);
    59c8:	c7 01       	movw	r24, r14
    59ca:	b6 01       	movw	r22, r12

    SPI0_TXRX_Byte(0xff);	// Send dummy 0xFF
    59cc:	3a df       	rcall	.-396    	; 0x5842 <SPI0_Speed>
    59ce:	8f ef       	ldi	r24, 0xFF	; 255
    59d0:	d5 df       	rcall	.-86     	; 0x597c <SPI0_TXRX_Byte>
	SPI0_Init_state = 1;

}
    59d2:	0f 90       	pop	r0
    59d4:	df 91       	pop	r29
    59d6:	cf 91       	pop	r28
    59d8:	ff 90       	pop	r15
    59da:	ef 90       	pop	r14
    59dc:	df 90       	pop	r13
    59de:	cf 90       	pop	r12
    59e0:	08 95       	ret

000059e2 <SPI0_TX>:
/// @brief HSPI write using FIFO
/// @param[in] *data: transmit buffer
/// @param[in] count: number of bytes to write
/// @return  void
void SPI0_TX(uint8_t *data, int count)
{
    59e2:	0f 93       	push	r16
    59e4:	1f 93       	push	r17
    59e6:	cf 93       	push	r28
    59e8:	df 93       	push	r29
    59ea:	8c 01       	movw	r16, r24
    59ec:	eb 01       	movw	r28, r22

    while(count > 0)
    59ee:	1c 16       	cp	r1, r28
    59f0:	1d 06       	cpc	r1, r29
    59f2:	34 f4       	brge	.+12     	; 0x5a00 <SPI0_TX+0x1e>
    {
		SPI0_TXRX_Byte(*data);
    59f4:	f8 01       	movw	r30, r16
    59f6:	81 91       	ld	r24, Z+
    59f8:	8f 01       	movw	r16, r30
    59fa:	c0 df       	rcall	.-128    	; 0x597c <SPI0_TXRX_Byte>
		++data;
		--count;
    59fc:	21 97       	sbiw	r28, 0x01	; 1
    59fe:	f7 cf       	rjmp	.-18     	; 0x59ee <SPI0_TX+0xc>
	}
}
    5a00:	df 91       	pop	r29
    5a02:	cf 91       	pop	r28
    5a04:	1f 91       	pop	r17
    5a06:	0f 91       	pop	r16
    5a08:	08 95       	ret

00005a0a <SPI0_TXRX>:
/// @param[in] *data: transmit / receive buffer
/// @param[in] count: number of bytes to write / read
/// @return  void

void SPI0_TXRX(uint8_t *data, int count)
{
    5a0a:	0f 93       	push	r16
    5a0c:	1f 93       	push	r17
    5a0e:	cf 93       	push	r28
    5a10:	df 93       	push	r29
    5a12:	8c 01       	movw	r16, r24
    5a14:	eb 01       	movw	r28, r22

    while(count > 0)
    5a16:	1c 16       	cp	r1, r28
    5a18:	1d 06       	cpc	r1, r29
    5a1a:	44 f4       	brge	.+16     	; 0x5a2c <SPI0_TXRX+0x22>
    {
		*data = SPI0_TXRX_Byte(*data);
    5a1c:	f8 01       	movw	r30, r16
    5a1e:	80 81       	ld	r24, Z
    5a20:	ad df       	rcall	.-166    	; 0x597c <SPI0_TXRX_Byte>
    5a22:	f8 01       	movw	r30, r16
    5a24:	81 93       	st	Z+, r24
    5a26:	8f 01       	movw	r16, r30
		++data;
		--count;
    5a28:	21 97       	sbiw	r28, 0x01	; 1
    5a2a:	f5 cf       	rjmp	.-22     	; 0x5a16 <SPI0_TXRX+0xc>
	}
}
    5a2c:	df 91       	pop	r29
    5a2e:	cf 91       	pop	r28
    5a30:	1f 91       	pop	r17
    5a32:	0f 91       	pop	r16
    5a34:	08 95       	ret

00005a36 <SPI0_RX>:
/// @brief HSPI read using FIFO
/// @param[in] *data: receive buffer
/// @param[in] count: number of bytes to read
/// @return  void
void SPI0_RX(uint8_t *data, int count)
{
    5a36:	0f 93       	push	r16
    5a38:	1f 93       	push	r17
    5a3a:	cf 93       	push	r28
    5a3c:	df 93       	push	r29
    5a3e:	8c 01       	movw	r16, r24
    5a40:	eb 01       	movw	r28, r22

    while(count > 0)
    5a42:	1c 16       	cp	r1, r28
    5a44:	1d 06       	cpc	r1, r29
    5a46:	3c f4       	brge	.+14     	; 0x5a56 <SPI0_RX+0x20>
    {
		*data = SPI0_TXRX_Byte(0xff);
    5a48:	8f ef       	ldi	r24, 0xFF	; 255
    5a4a:	98 df       	rcall	.-208    	; 0x597c <SPI0_TXRX_Byte>
    5a4c:	f8 01       	movw	r30, r16
    5a4e:	81 93       	st	Z+, r24
    5a50:	8f 01       	movw	r16, r30
		++data;
		--count;
    5a52:	21 97       	sbiw	r28, 0x01	; 1
    5a54:	f6 cf       	rjmp	.-20     	; 0x5a42 <SPI0_RX+0xc>
	}
}
    5a56:	df 91       	pop	r29
    5a58:	cf 91       	pop	r28
    5a5a:	1f 91       	pop	r17
    5a5c:	0f 91       	pop	r16
    5a5e:	08 95       	ret

00005a60 <TWI_Init>:
///
///@return void.
void TWI_Init(const uint8_t Prescale, const uint8_t BitLength)
{

    GPIO_PIN_LATCH_HI(SCL);                   // Pull Up on
    5a60:	40 9a       	sbi	0x08, 0	; 8
    GPIO_PIN_LATCH_HI(SDA);                   // Pull Up on
    5a62:	41 9a       	sbi	0x08, 1	; 8

    BIT_SET(TWCR,TWEN);
    5a64:	ec eb       	ldi	r30, 0xBC	; 188
    5a66:	f0 e0       	ldi	r31, 0x00	; 0
    5a68:	90 81       	ld	r25, Z
    5a6a:	94 60       	ori	r25, 0x04	; 4
    5a6c:	90 83       	st	Z, r25

    TWSR  = Prescale;
    5a6e:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    TWBR  = BitLength;
    5a72:	60 93 b8 00 	sts	0x00B8, r22	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    5a76:	08 95       	ret

00005a78 <TWI_StopTransmission>:


/** @brief Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
inline void TWI_StopTransmission(void)
{
    TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    5a78:	84 e9       	ldi	r24, 0x94	; 148
    5a7a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5a7e:	08 95       	ret

00005a80 <TWI_StartTransmission>:
    for (;;)
    {
        bool     BusCaptured = false;
        uint16_t TimeoutRemaining;

        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    5a80:	94 ea       	ldi	r25, 0xA4	; 164
    5a82:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5a86:	24 e6       	ldi	r18, 0x64	; 100
    5a88:	62 9f       	mul	r22, r18
    5a8a:	b0 01       	movw	r22, r0
    5a8c:	11 24       	eor	r1, r1
    5a8e:	61 50       	subi	r22, 0x01	; 1
    5a90:	71 09       	sbc	r23, r1

        TimeoutRemaining = (TimeoutMS * 100);
        while (TimeoutRemaining-- && !(BusCaptured))
    5a92:	9b 01       	movw	r18, r22
///@return TWI error value on fail.
uint8_t TWI_StartTransmission(const uint8_t SlaveAddress, const uint8_t TimeoutMS)
{
    for (;;)
    {
        bool     BusCaptured = false;
    5a94:	40 e0       	ldi	r20, 0x00	; 0
    5a96:	50 e0       	ldi	r21, 0x00	; 0
                    case TW_START:
                    case TW_REP_START:
                        BusCaptured = true;
                        break;
                    case TW_MT_ARB_LOST:
                        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    5a98:	e4 ea       	ldi	r30, 0xA4	; 164
        uint16_t TimeoutRemaining;

        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));

        TimeoutRemaining = (TimeoutMS * 100);
        while (TimeoutRemaining-- && !(BusCaptured))
    5a9a:	2f 3f       	cpi	r18, 0xFF	; 255
    5a9c:	9f ef       	ldi	r25, 0xFF	; 255
    5a9e:	39 07       	cpc	r19, r25
    5aa0:	41 f1       	breq	.+80     	; 0x5af2 <TWI_StartTransmission+0x72>
    5aa2:	41 15       	cp	r20, r1
    5aa4:	51 05       	cpc	r21, r1
    5aa6:	f1 f4       	brne	.+60     	; 0x5ae4 <TWI_StartTransmission+0x64>
        {
            if (TWCR & (1 << TWINT))
    5aa8:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5aac:	97 ff       	sbrs	r25, 7
    5aae:	13 c0       	rjmp	.+38     	; 0x5ad6 <TWI_StartTransmission+0x56>
            {
                switch (TWSR & TW_STATUS_MASK)
    5ab0:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5ab4:	98 7f       	andi	r25, 0xF8	; 248
    5ab6:	90 31       	cpi	r25, 0x10	; 16
    5ab8:	61 f0       	breq	.+24     	; 0x5ad2 <TWI_StartTransmission+0x52>
    5aba:	98 33       	cpi	r25, 0x38	; 56
    5abc:	39 f0       	breq	.+14     	; 0x5acc <TWI_StartTransmission+0x4c>
    5abe:	98 30       	cpi	r25, 0x08	; 8
    5ac0:	41 f0       	breq	.+16     	; 0x5ad2 <TWI_StartTransmission+0x52>
                        break;
                    case TW_MT_ARB_LOST:
                        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
                        continue;
                    default:
                        TWCR = (1 << TWEN);
    5ac2:	84 e0       	ldi	r24, 0x04	; 4
    5ac4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
                        return TWI_ERROR_BusFault;
    5ac8:	81 e0       	ldi	r24, 0x01	; 1
    5aca:	08 95       	ret
                    case TW_START:
                    case TW_REP_START:
                        BusCaptured = true;
                        break;
                    case TW_MT_ARB_LOST:
                        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    5acc:	e0 93 bc 00 	sts	0x00BC, r30	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
                        continue;
    5ad0:	06 c0       	rjmp	.+12     	; 0x5ade <TWI_StartTransmission+0x5e>
            {
                switch (TWSR & TW_STATUS_MASK)
                {
                    case TW_START:
                    case TW_REP_START:
                        BusCaptured = true;
    5ad2:	41 e0       	ldi	r20, 0x01	; 1
    5ad4:	50 e0       	ldi	r21, 0x00	; 0
    5ad6:	92 e4       	ldi	r25, 0x42	; 66
    5ad8:	9a 95       	dec	r25
    5ada:	f1 f7       	brne	.-4      	; 0x5ad8 <TWI_StartTransmission+0x58>
    5adc:	00 c0       	rjmp	.+0      	; 0x5ade <TWI_StartTransmission+0x5e>
    5ade:	21 50       	subi	r18, 0x01	; 1
    5ae0:	31 09       	sbc	r19, r1
    5ae2:	db cf       	rjmp	.-74     	; 0x5a9a <TWI_StartTransmission+0x1a>
            }

            _delay_us(10);
        }

        if (!(TimeoutRemaining))
    5ae4:	23 2b       	or	r18, r19
    5ae6:	29 f4       	brne	.+10     	; 0x5af2 <TWI_StartTransmission+0x72>
        {
            TWCR = (1 << TWEN);
    5ae8:	84 e0       	ldi	r24, 0x04	; 4
    5aea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
            return TWI_ERROR_BusCaptureTimeout;
    5aee:	82 e0       	ldi	r24, 0x02	; 2
    5af0:	08 95       	ret
        }

        TWDR = SlaveAddress;
    5af2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
        TWCR = ((1 << TWINT) | (1 << TWEN));
    5af6:	84 e8       	ldi	r24, 0x84	; 132
    5af8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

        TimeoutRemaining = (TimeoutMS * 100);
        while (TimeoutRemaining--)
    5afc:	6f 3f       	cpi	r22, 0xFF	; 255
    5afe:	8f ef       	ldi	r24, 0xFF	; 255
    5b00:	78 07       	cpc	r23, r24
    5b02:	71 f0       	breq	.+28     	; 0x5b20 <TWI_StartTransmission+0xa0>
        {
            if (TWCR & (1 << TWINT))
    5b04:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5b08:	cb 01       	movw	r24, r22
    5b0a:	01 97       	sbiw	r24, 0x01	; 1
    5b0c:	27 fd       	sbrc	r18, 7
    5b0e:	06 c0       	rjmp	.+12     	; 0x5b1c <TWI_StartTransmission+0x9c>
    5b10:	22 e4       	ldi	r18, 0x42	; 66
    5b12:	2a 95       	dec	r18
    5b14:	f1 f7       	brne	.-4      	; 0x5b12 <TWI_StartTransmission+0x92>
    5b16:	00 c0       	rjmp	.+0      	; 0x5b18 <TWI_StartTransmission+0x98>
    5b18:	bc 01       	movw	r22, r24
    5b1a:	f0 cf       	rjmp	.-32     	; 0x5afc <TWI_StartTransmission+0x7c>
                break;

            _delay_us(10);
        }

        if (!(TimeoutRemaining))
    5b1c:	67 2b       	or	r22, r23
    5b1e:	61 f0       	breq	.+24     	; 0x5b38 <TWI_StartTransmission+0xb8>
            return TWI_ERROR_SlaveResponseTimeout;

        switch (TWSR & TW_STATUS_MASK)
    5b20:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5b24:	88 7f       	andi	r24, 0xF8	; 248
    5b26:	88 31       	cpi	r24, 0x18	; 24
    5b28:	49 f0       	breq	.+18     	; 0x5b3c <TWI_StartTransmission+0xbc>
    5b2a:	80 34       	cpi	r24, 0x40	; 64
    5b2c:	39 f0       	breq	.+14     	; 0x5b3c <TWI_StartTransmission+0xbc>
        {
            case TW_MT_SLA_ACK:
            case TW_MR_SLA_ACK:
                return TWI_ERROR_NoError;
            default:
                TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    5b2e:	84 e9       	ldi	r24, 0x94	; 148
    5b30:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
                return TWI_ERROR_SlaveNotReady;
    5b34:	84 e0       	ldi	r24, 0x04	; 4
    5b36:	08 95       	ret

            _delay_us(10);
        }

        if (!(TimeoutRemaining))
            return TWI_ERROR_SlaveResponseTimeout;
    5b38:	83 e0       	ldi	r24, 0x03	; 3
    5b3a:	08 95       	ret

        switch (TWSR & TW_STATUS_MASK)
        {
            case TW_MT_SLA_ACK:
            case TW_MR_SLA_ACK:
                return TWI_ERROR_NoError;
    5b3c:	80 e0       	ldi	r24, 0x00	; 0
            default:
                TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
                return TWI_ERROR_SlaveNotReady;
        }
    }
}
    5b3e:	08 95       	ret

00005b40 <TWI_SendByte>:
///
///@return 1 if Acknowledge.
///@return 0 on fail.
bool TWI_SendByte(const uint8_t Byte)
{
    TWDR = Byte;
    5b40:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    TWCR = ((1 << TWINT) | (1 << TWEN));
    5b44:	84 e8       	ldi	r24, 0x84	; 132
    5b46:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while (!(TWCR & (1 << TWINT)));
    5b4a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5b4e:	87 ff       	sbrs	r24, 7
    5b50:	fc cf       	rjmp	.-8      	; 0x5b4a <TWI_SendByte+0xa>

    return ((TWSR & TW_STATUS_MASK) == TW_MT_DATA_ACK);
    5b52:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5b56:	98 7f       	andi	r25, 0xF8	; 248
    5b58:	21 e0       	ldi	r18, 0x01	; 1
    5b5a:	30 e0       	ldi	r19, 0x00	; 0
    5b5c:	98 32       	cpi	r25, 0x28	; 40
    5b5e:	11 f0       	breq	.+4      	; 0x5b64 <TWI_SendByte+0x24>
    5b60:	20 e0       	ldi	r18, 0x00	; 0
    5b62:	30 e0       	ldi	r19, 0x00	; 0
}
    5b64:	c9 01       	movw	r24, r18
    5b66:	08 95       	ret

00005b68 <TWI_ReceiveByte>:


bool TWI_ReceiveByte(uint8_t* const Byte,
const bool LastByte)
{
    5b68:	fc 01       	movw	r30, r24
    uint8_t TWCRMask;

    if (LastByte)
    5b6a:	61 15       	cp	r22, r1
    5b6c:	71 05       	cpc	r23, r1
    5b6e:	11 f4       	brne	.+4      	; 0x5b74 <TWI_ReceiveByte+0xc>
        TWCRMask = ((1 << TWINT) | (1 << TWEN));
    else
        TWCRMask = ((1 << TWINT) | (1 << TWEN) | (1 << TWEA));
    5b70:	94 ec       	ldi	r25, 0xC4	; 196
    5b72:	01 c0       	rjmp	.+2      	; 0x5b76 <TWI_ReceiveByte+0xe>
const bool LastByte)
{
    uint8_t TWCRMask;

    if (LastByte)
        TWCRMask = ((1 << TWINT) | (1 << TWEN));
    5b74:	94 e8       	ldi	r25, 0x84	; 132
    else
        TWCRMask = ((1 << TWINT) | (1 << TWEN) | (1 << TWEA));

    TWCR = TWCRMask;
    5b76:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while (!BIT_TST(TWCR, TWINT))
    5b7a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5b7e:	87 ff       	sbrs	r24, 7
    5b80:	fc cf       	rjmp	.-8      	; 0x5b7a <TWI_ReceiveByte+0x12>
        ;
    *Byte = TWDR;
    5b82:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5b86:	80 83       	st	Z, r24

    uint8_t Status = (TWSR & TW_STATUS_MASK);
    5b88:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5b8c:	28 7f       	andi	r18, 0xF8	; 248

    return ((LastByte) ? (Status == TW_MR_DATA_NACK) : (Status == TW_MR_DATA_ACK));
    5b8e:	81 e0       	ldi	r24, 0x01	; 1
    5b90:	90 e0       	ldi	r25, 0x00	; 0
    5b92:	67 2b       	or	r22, r23
    5b94:	19 f0       	breq	.+6      	; 0x5b9c <TWI_ReceiveByte+0x34>
    5b96:	28 35       	cpi	r18, 0x58	; 88
    5b98:	19 f4       	brne	.+6      	; 0x5ba0 <TWI_ReceiveByte+0x38>
    5b9a:	03 c0       	rjmp	.+6      	; 0x5ba2 <TWI_ReceiveByte+0x3a>
    5b9c:	20 35       	cpi	r18, 0x50	; 80
    5b9e:	09 f0       	breq	.+2      	; 0x5ba2 <TWI_ReceiveByte+0x3a>
    5ba0:	80 e0       	ldi	r24, 0x00	; 0
}
    5ba2:	08 95       	ret

00005ba4 <TWI_ReadPacket>:
const uint8_t TimeoutMS,
const uint8_t* InternalAddress,
uint8_t InternalAddressLen,
uint8_t* Buffer,
uint8_t Length)
{
    5ba4:	a0 e0       	ldi	r26, 0x00	; 0
    5ba6:	b0 e0       	ldi	r27, 0x00	; 0
    5ba8:	e8 ed       	ldi	r30, 0xD8	; 216
    5baa:	fd e2       	ldi	r31, 0x2D	; 45
    5bac:	0c 94 fa e5 	jmp	0x1cbf4	; 0x1cbf4 <__prologue_saves__+0xe>
    5bb0:	f8 2e       	mov	r15, r24
    5bb2:	b6 2e       	mov	r11, r22
    5bb4:	94 2e       	mov	r9, r20
    5bb6:	a5 2e       	mov	r10, r21
    5bb8:	c2 2f       	mov	r28, r18
    uint8_t ErrorCode;

    if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_WRITE,
    5bba:	8e 7f       	andi	r24, 0xFE	; 254
    5bbc:	61 df       	rcall	.-318    	; 0x5a80 <TWI_StartTransmission>
    5bbe:	d8 2f       	mov	r29, r24
    5bc0:	81 11       	cpse	r24, r1
    5bc2:	2b c0       	rjmp	.+86     	; 0x5c1a <TWI_ReadPacket+0x76>
    5bc4:	c9 2c       	mov	r12, r9
    5bc6:	da 2c       	mov	r13, r10
        TimeoutMS)) == TWI_ERROR_NoError)
    {
        while (InternalAddressLen--)
    5bc8:	cc 23       	and	r28, r28
    5bca:	39 f0       	breq	.+14     	; 0x5bda <TWI_ReadPacket+0x36>
        {
            if (!(TWI_SendByte(*(InternalAddress++))))
    5bcc:	f6 01       	movw	r30, r12
    5bce:	81 91       	ld	r24, Z+
    5bd0:	6f 01       	movw	r12, r30
    5bd2:	b6 df       	rcall	.-148    	; 0x5b40 <TWI_SendByte>
    5bd4:	c1 50       	subi	r28, 0x01	; 1
    5bd6:	89 2b       	or	r24, r25
    5bd8:	b9 f7       	brne	.-18     	; 0x5bc8 <TWI_ReadPacket+0x24>
                ErrorCode = TWI_ERROR_SlaveNAK;
                break;
            }
        }

        if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_READ,
    5bda:	6b 2d       	mov	r22, r11
    5bdc:	8f 2d       	mov	r24, r15
    5bde:	81 60       	ori	r24, 0x01	; 1
    5be0:	4f df       	rcall	.-354    	; 0x5a80 <TWI_StartTransmission>
    5be2:	d8 2f       	mov	r29, r24
    5be4:	81 11       	cpse	r24, r1
    5be6:	19 c0       	rjmp	.+50     	; 0x5c1a <TWI_ReadPacket+0x76>
    5be8:	cf ef       	ldi	r28, 0xFF	; 255
    5bea:	ce 0d       	add	r28, r14
            TimeoutMS)) == TWI_ERROR_NoError)
        {
            while (Length--)
    5bec:	cf 3f       	cpi	r28, 0xFF	; 255
    5bee:	91 f0       	breq	.+36     	; 0x5c14 <TWI_ReadPacket+0x70>
            {
                if (!(TWI_ReceiveByte(Buffer++, (Length == 0))))
    5bf0:	78 01       	movw	r14, r16
    5bf2:	ff ef       	ldi	r31, 0xFF	; 255
    5bf4:	ef 1a       	sub	r14, r31
    5bf6:	ff 0a       	sbc	r15, r31
    5bf8:	61 e0       	ldi	r22, 0x01	; 1
    5bfa:	70 e0       	ldi	r23, 0x00	; 0
    5bfc:	cc 23       	and	r28, r28
    5bfe:	11 f0       	breq	.+4      	; 0x5c04 <TWI_ReadPacket+0x60>
    5c00:	60 e0       	ldi	r22, 0x00	; 0
    5c02:	70 e0       	ldi	r23, 0x00	; 0
    5c04:	c8 01       	movw	r24, r16
    5c06:	b0 df       	rcall	.-160    	; 0x5b68 <TWI_ReceiveByte>
    5c08:	c1 50       	subi	r28, 0x01	; 1
    5c0a:	89 2b       	or	r24, r25
    5c0c:	11 f0       	breq	.+4      	; 0x5c12 <TWI_ReadPacket+0x6e>
    5c0e:	87 01       	movw	r16, r14
    5c10:	ed cf       	rjmp	.-38     	; 0x5bec <TWI_ReadPacket+0x48>
                {
                    ErrorCode = TWI_ERROR_SlaveNAK;
    5c12:	d5 e0       	ldi	r29, 0x05	; 5


/** @brief Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
inline void TWI_StopTransmission(void)
{
    TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    5c14:	84 e9       	ldi	r24, 0x94	; 148
    5c16:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
            TWI_StopTransmission();
        }
    }

    return ErrorCode;
}
    5c1a:	8d 2f       	mov	r24, r29
    5c1c:	cd b7       	in	r28, 0x3d	; 61
    5c1e:	de b7       	in	r29, 0x3e	; 62
    5c20:	eb e0       	ldi	r30, 0x0B	; 11
    5c22:	0c 94 16 e6 	jmp	0x1cc2c	; 0x1cc2c <__epilogue_restores__+0xe>

00005c26 <TWI_WritePacket>:
const uint8_t TimeoutMS,
const uint8_t* InternalAddress,
uint8_t InternalAddressLen,
const uint8_t* Buffer,
uint8_t Length)
{
    5c26:	a0 e0       	ldi	r26, 0x00	; 0
    5c28:	b0 e0       	ldi	r27, 0x00	; 0
    5c2a:	e9 e1       	ldi	r30, 0x19	; 25
    5c2c:	fe e2       	ldi	r31, 0x2E	; 46
    5c2e:	0c 94 fc e5 	jmp	0x1cbf8	; 0x1cbf8 <__prologue_saves__+0x12>
    5c32:	b4 2e       	mov	r11, r20
    5c34:	f5 2e       	mov	r15, r21
    5c36:	c2 2f       	mov	r28, r18
    uint8_t ErrorCode;

    if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_WRITE,
    5c38:	8e 7f       	andi	r24, 0xFE	; 254
    5c3a:	22 df       	rcall	.-444    	; 0x5a80 <TWI_StartTransmission>
    5c3c:	d8 2f       	mov	r29, r24
    5c3e:	81 11       	cpse	r24, r1
    5c40:	1a c0       	rjmp	.+52     	; 0x5c76 <TWI_WritePacket+0x50>
    5c42:	cb 2c       	mov	r12, r11
    5c44:	df 2c       	mov	r13, r15
        TimeoutMS)) == TWI_ERROR_NoError)
    {
        while (InternalAddressLen--)
    5c46:	cc 23       	and	r28, r28
    5c48:	41 f0       	breq	.+16     	; 0x5c5a <TWI_WritePacket+0x34>
        {
            if (!(TWI_SendByte(*(InternalAddress++))))
    5c4a:	f6 01       	movw	r30, r12
    5c4c:	81 91       	ld	r24, Z+
    5c4e:	6f 01       	movw	r12, r30
    5c50:	77 df       	rcall	.-274    	; 0x5b40 <TWI_SendByte>
    5c52:	c1 50       	subi	r28, 0x01	; 1
    5c54:	89 2b       	or	r24, r25
    5c56:	b9 f7       	brne	.-18     	; 0x5c46 <TWI_WritePacket+0x20>
            {
                ErrorCode = TWI_ERROR_SlaveNAK;
    5c58:	d5 e0       	ldi	r29, 0x05	; 5
    5c5a:	68 01       	movw	r12, r16
                break;
            }
        }

        while (Length--)
    5c5c:	ee 20       	and	r14, r14
    5c5e:	41 f0       	breq	.+16     	; 0x5c70 <TWI_WritePacket+0x4a>
        {
            if (!(TWI_SendByte(*(Buffer++))))
    5c60:	f6 01       	movw	r30, r12
    5c62:	81 91       	ld	r24, Z+
    5c64:	6f 01       	movw	r12, r30
    5c66:	6c df       	rcall	.-296    	; 0x5b40 <TWI_SendByte>
    5c68:	ea 94       	dec	r14
    5c6a:	89 2b       	or	r24, r25
    5c6c:	b9 f7       	brne	.-18     	; 0x5c5c <TWI_WritePacket+0x36>
            {
                ErrorCode = TWI_ERROR_SlaveNAK;
    5c6e:	d5 e0       	ldi	r29, 0x05	; 5


/** @brief Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
inline void TWI_StopTransmission(void)
{
    TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    5c70:	84 e9       	ldi	r24, 0x94	; 148
    5c72:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

        TWI_StopTransmission();
    }

    return ErrorCode;
}
    5c76:	8d 2f       	mov	r24, r29
    5c78:	cd b7       	in	r28, 0x3d	; 61
    5c7a:	de b7       	in	r29, 0x3e	; 62
    5c7c:	e9 e0       	ldi	r30, 0x09	; 9
    5c7e:	0c 94 18 e6 	jmp	0x1cc30	; 0x1cc30 <__epilogue_restores__+0x12>

00005c82 <__vector_26>:
  }

  SREG = sreg;
}

ISR(TWI_vect, ISR_BLOCK) {
    5c82:	1f 92       	push	r1
    5c84:	0f 92       	push	r0
    5c86:	0f b6       	in	r0, 0x3f	; 63
    5c88:	0f 92       	push	r0
    5c8a:	11 24       	eor	r1, r1
    5c8c:	0b b6       	in	r0, 0x3b	; 59
    5c8e:	0f 92       	push	r0
    5c90:	2f 93       	push	r18
    5c92:	3f 93       	push	r19
    5c94:	4f 93       	push	r20
    5c96:	5f 93       	push	r21
    5c98:	6f 93       	push	r22
    5c9a:	7f 93       	push	r23
    5c9c:	8f 93       	push	r24
    5c9e:	9f 93       	push	r25
    5ca0:	af 93       	push	r26
    5ca2:	bf 93       	push	r27
    5ca4:	ef 93       	push	r30
    5ca6:	ff 93       	push	r31

  uint8_t status = TW_STATUS;
    5ca8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5cac:	88 7f       	andi	r24, 0xF8	; 248

  /* This interrupt should only fire if there is something to do. */
  assert(op != NULL);
    5cae:	e0 91 4e 17 	lds	r30, 0x174E	; 0x80174e <op>
    5cb2:	f0 91 4f 17 	lds	r31, 0x174F	; 0x80174f <op+0x1>
    5cb6:	30 97       	sbiw	r30, 0x00	; 0
    5cb8:	09 f4       	brne	.+2      	; 0x5cbc <__vector_26+0x3a>
    5cba:	6f c0       	rjmp	.+222    	; 0x5d9a <__vector_26+0x118>

  if ((op->address & _BV(0)) == TW_READ) {
    5cbc:	90 81       	ld	r25, Z
    5cbe:	90 ff       	sbrs	r25, 0
    5cc0:	39 c0       	rjmp	.+114    	; 0x5d34 <__vector_26+0xb2>
    /* Master Receiver mode. */
    switch (status) {
    5cc2:	80 34       	cpi	r24, 0x40	; 64
    5cc4:	81 f0       	breq	.+32     	; 0x5ce6 <__vector_26+0x64>
    5cc6:	38 f4       	brcc	.+14     	; 0x5cd6 <__vector_26+0x54>
    5cc8:	80 31       	cpi	r24, 0x10	; 16
    5cca:	09 f4       	brne	.+2      	; 0x5cce <__vector_26+0x4c>
    5ccc:	45 c0       	rjmp	.+138    	; 0x5d58 <__vector_26+0xd6>
    5cce:	88 33       	cpi	r24, 0x38	; 56
    5cd0:	09 f4       	brne	.+2      	; 0x5cd4 <__vector_26+0x52>
    5cd2:	94 c0       	rjmp	.+296    	; 0x5dfc <__vector_26+0x17a>
    5cd4:	36 c0       	rjmp	.+108    	; 0x5d42 <__vector_26+0xc0>
    5cd6:	80 35       	cpi	r24, 0x50	; 80
    5cd8:	59 f0       	breq	.+22     	; 0x5cf0 <__vector_26+0x6e>
    5cda:	88 35       	cpi	r24, 0x58	; 88
    5cdc:	f1 f0       	breq	.+60     	; 0x5d1a <__vector_26+0x98>
    5cde:	88 34       	cpi	r24, 0x48	; 72
    5ce0:	09 f0       	breq	.+2      	; 0x5ce4 <__vector_26+0x62>
    5ce2:	5b c0       	rjmp	.+182    	; 0x5d9a <__vector_26+0x118>
    5ce4:	54 c0       	rjmp	.+168    	; 0x5d8e <__vector_26+0x10c>
      TWCR = TWCR_DEFAULT | _BV(TWINT) | _BV(TWSTA);
      break;

    /* SLA+R has been transmitted; ACK has been received. */
    case TW_MR_SLA_ACK:
      if (op->buflen == 1) {
    5ce6:	81 81       	ldd	r24, Z+1	; 0x01
    5ce8:	81 30       	cpi	r24, 0x01	; 1
    5cea:	09 f0       	breq	.+2      	; 0x5cee <__vector_26+0x6c>
    5cec:	4a c0       	rjmp	.+148    	; 0x5d82 <__vector_26+0x100>
    5cee:	13 c0       	rjmp	.+38     	; 0x5d16 <__vector_26+0x94>
      txn->flags = I2C_TXN_DONE | I2C_TXN_ERR;
      goto next_txn;

    /* Data byte has been received; ACK has been returned. */
    case TW_MR_DATA_ACK:
      op->buf[op->bufpos++] = TWDR;
    5cf0:	a3 81       	ldd	r26, Z+3	; 0x03
    5cf2:	b4 81       	ldd	r27, Z+4	; 0x04
    5cf4:	82 81       	ldd	r24, Z+2	; 0x02
    5cf6:	91 e0       	ldi	r25, 0x01	; 1
    5cf8:	98 0f       	add	r25, r24
    5cfa:	92 83       	std	Z+2, r25	; 0x02
    5cfc:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5d00:	a8 0f       	add	r26, r24
    5d02:	b1 1d       	adc	r27, r1
    5d04:	9c 93       	st	X, r25
      if (op->bufpos+1 == op->buflen) {
    5d06:	82 81       	ldd	r24, Z+2	; 0x02
    5d08:	21 81       	ldd	r18, Z+1	; 0x01
    5d0a:	90 e0       	ldi	r25, 0x00	; 0
    5d0c:	01 96       	adiw	r24, 0x01	; 1
    5d0e:	30 e0       	ldi	r19, 0x00	; 0
    5d10:	82 17       	cp	r24, r18
    5d12:	93 07       	cpc	r25, r19
    5d14:	b1 f5       	brne	.+108    	; 0x5d82 <__vector_26+0x100>
        TWCR = TWCR_NOT_ACK;
    5d16:	85 e8       	ldi	r24, 0x85	; 133
    5d18:	7c c0       	rjmp	.+248    	; 0x5e12 <__vector_26+0x190>
      }
      break;

    /* Data byte has been received; NOT ACK has been returned. */
    case TW_MR_DATA_NACK:
      op->buf[op->bufpos++] = TWDR;
    5d1a:	83 81       	ldd	r24, Z+3	; 0x03
    5d1c:	94 81       	ldd	r25, Z+4	; 0x04
    5d1e:	22 81       	ldd	r18, Z+2	; 0x02
    5d20:	31 e0       	ldi	r19, 0x01	; 1
    5d22:	32 0f       	add	r19, r18
    5d24:	32 83       	std	Z+2, r19	; 0x02
    5d26:	30 91 bb 00 	lds	r19, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5d2a:	fc 01       	movw	r30, r24
    5d2c:	e2 0f       	add	r30, r18
    5d2e:	f1 1d       	adc	r31, r1
    5d30:	30 83       	st	Z, r19
      goto next_op;
    5d32:	35 c0       	rjmp	.+106    	; 0x5d9e <__vector_26+0x11c>
    default:
      assert(0 && "unknown status in master receiver mode");
    }
  } else {
    /* Master Transmitter mode. */
    switch (status) {
    5d34:	80 32       	cpi	r24, 0x20	; 32
    5d36:	59 f1       	breq	.+86     	; 0x5d8e <__vector_26+0x10c>
    5d38:	38 f4       	brcc	.+14     	; 0x5d48 <__vector_26+0xc6>
    5d3a:	80 31       	cpi	r24, 0x10	; 16
    5d3c:	69 f0       	breq	.+26     	; 0x5d58 <__vector_26+0xd6>
    5d3e:	88 31       	cpi	r24, 0x18	; 24
    5d40:	a1 f0       	breq	.+40     	; 0x5d6a <__vector_26+0xe8>
    5d42:	88 30       	cpi	r24, 0x08	; 8
    5d44:	51 f5       	brne	.+84     	; 0x5d9a <__vector_26+0x118>
    5d46:	08 c0       	rjmp	.+16     	; 0x5d58 <__vector_26+0xd6>
    5d48:	80 33       	cpi	r24, 0x30	; 48
    5d4a:	e9 f0       	breq	.+58     	; 0x5d86 <__vector_26+0x104>
    5d4c:	88 33       	cpi	r24, 0x38	; 56
    5d4e:	09 f4       	brne	.+2      	; 0x5d52 <__vector_26+0xd0>
    5d50:	55 c0       	rjmp	.+170    	; 0x5dfc <__vector_26+0x17a>
    5d52:	88 32       	cpi	r24, 0x28	; 40
    5d54:	11 f5       	brne	.+68     	; 0x5d9a <__vector_26+0x118>
    5d56:	05 c0       	rjmp	.+10     	; 0x5d62 <__vector_26+0xe0>

    /* A START condition has been transmitted. */
    case TW_START:
    /* A repeated START condition has been transmitted. */
    case TW_REP_START:
      assert(op->buflen > 0);
    5d58:	81 81       	ldd	r24, Z+1	; 0x01
    5d5a:	88 23       	and	r24, r24
    5d5c:	f1 f0       	breq	.+60     	; 0x5d9a <__vector_26+0x118>
      op->bufpos = 0;
    5d5e:	12 82       	std	Z+2, r1	; 0x02
    5d60:	0d c0       	rjmp	.+26     	; 0x5d7c <__vector_26+0xfa>
      txn->flags = I2C_TXN_DONE | I2C_TXN_ERR;
      goto next_txn;

    /* Data byte has been transmitted; ACK has been received. */
    case TW_MT_DATA_ACK:
      if (op->bufpos < op->buflen) {
    5d62:	92 81       	ldd	r25, Z+2	; 0x02
    5d64:	81 81       	ldd	r24, Z+1	; 0x01
    5d66:	98 17       	cp	r25, r24
    5d68:	d0 f4       	brcc	.+52     	; 0x5d9e <__vector_26+0x11c>
        TWDR = op->buf[op->bufpos++];
    5d6a:	83 81       	ldd	r24, Z+3	; 0x03
    5d6c:	94 81       	ldd	r25, Z+4	; 0x04
    5d6e:	22 81       	ldd	r18, Z+2	; 0x02
    5d70:	31 e0       	ldi	r19, 0x01	; 1
    5d72:	32 0f       	add	r19, r18
    5d74:	32 83       	std	Z+2, r19	; 0x02
    5d76:	fc 01       	movw	r30, r24
    5d78:	e2 0f       	add	r30, r18
    5d7a:	f1 1d       	adc	r31, r1
    5d7c:	80 81       	ld	r24, Z
    5d7e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
        TWCR = TWCR_DEFAULT | _BV(TWINT);
    5d82:	85 ec       	ldi	r24, 0xC5	; 197
    5d84:	46 c0       	rjmp	.+140    	; 0x5e12 <__vector_26+0x190>
      /* No more bytes left to transmit... */
      goto next_op;

    /* Data byte has been transmitted; NOT ACK has been received. */
    case TW_MT_DATA_NACK:
      if (op->bufpos < op->buflen) {
    5d86:	92 81       	ldd	r25, Z+2	; 0x02
    5d88:	81 81       	ldd	r24, Z+1	; 0x01
    5d8a:	98 17       	cp	r25, r24
    5d8c:	40 f4       	brcc	.+16     	; 0x5d9e <__vector_26+0x11c>
        /* There were more bytes left to transmit! */
        txn->flags = I2C_TXN_DONE | I2C_TXN_ERR;
    5d8e:	e0 91 50 17 	lds	r30, 0x1750	; 0x801750 <txn>
    5d92:	f0 91 51 17 	lds	r31, 0x1751	; 0x801751 <txn+0x1>
    5d96:	83 e0       	ldi	r24, 0x03	; 3
    5d98:	1d c0       	rjmp	.+58     	; 0x5dd4 <__vector_26+0x152>
      }

      goto next_op;

    default:
      assert(0 && "unknown status in master transmitter mode");
    5d9a:	0e 94 dc e9 	call	0x1d3b8	; 0x1d3b8 <abort>

next_op:
  /*
   * Advance to next operation in transaction, if possible.
   */
  if (++(txn->opspos) < txn->opslen) {
    5d9e:	e0 91 50 17 	lds	r30, 0x1750	; 0x801750 <txn>
    5da2:	f0 91 51 17 	lds	r31, 0x1751	; 0x801751 <txn+0x1>
    5da6:	84 81       	ldd	r24, Z+4	; 0x04
    5da8:	8f 5f       	subi	r24, 0xFF	; 255
    5daa:	84 83       	std	Z+4, r24	; 0x04
    5dac:	93 81       	ldd	r25, Z+3	; 0x03
    5dae:	89 17       	cp	r24, r25
    5db0:	80 f4       	brcc	.+32     	; 0x5dd2 <__vector_26+0x150>
    op = &txn->ops[txn->opspos];
    5db2:	84 81       	ldd	r24, Z+4	; 0x04
    5db4:	90 e0       	ldi	r25, 0x00	; 0
    5db6:	01 96       	adiw	r24, 0x01	; 1
    5db8:	45 e0       	ldi	r20, 0x05	; 5
    5dba:	48 9f       	mul	r20, r24
    5dbc:	90 01       	movw	r18, r0
    5dbe:	49 9f       	mul	r20, r25
    5dc0:	30 0d       	add	r19, r0
    5dc2:	11 24       	eor	r1, r1
    5dc4:	e2 0f       	add	r30, r18
    5dc6:	f3 1f       	adc	r31, r19
    5dc8:	f0 93 4f 17 	sts	0x174F, r31	; 0x80174f <op+0x1>
    5dcc:	e0 93 4e 17 	sts	0x174E, r30	; 0x80174e <op>
    5dd0:	15 c0       	rjmp	.+42     	; 0x5dfc <__vector_26+0x17a>
    TWCR = TWCR_DEFAULT | _BV(TWINT) | _BV(TWSTA);
    return;
  }

  /* No more operations, mark transaction as done. */
  txn->flags = I2C_TXN_DONE;
    5dd2:	81 e0       	ldi	r24, 0x01	; 1
    5dd4:	82 83       	std	Z+2, r24	; 0x02

next_txn:
  /*
   * Advance to next transaction, if possible.
   */
  if (txn->next != NULL) {
    5dd6:	e0 91 50 17 	lds	r30, 0x1750	; 0x801750 <txn>
    5dda:	f0 91 51 17 	lds	r31, 0x1751	; 0x801751 <txn+0x1>
    5dde:	80 81       	ld	r24, Z
    5de0:	91 81       	ldd	r25, Z+1	; 0x01
    5de2:	89 2b       	or	r24, r25
    5de4:	69 f0       	breq	.+26     	; 0x5e00 <__vector_26+0x17e>
    txn = txn->next;
    5de6:	80 81       	ld	r24, Z
    5de8:	91 81       	ldd	r25, Z+1	; 0x01
    5dea:	90 93 51 17 	sts	0x1751, r25	; 0x801751 <txn+0x1>
    5dee:	80 93 50 17 	sts	0x1750, r24	; 0x801750 <txn>
    op = &txn->ops[0];
    5df2:	05 96       	adiw	r24, 0x05	; 5
    5df4:	90 93 4f 17 	sts	0x174F, r25	; 0x80174f <op+0x1>
    5df8:	80 93 4e 17 	sts	0x174E, r24	; 0x80174e <op>

    /* Repeated start. */
    TWCR = TWCR_DEFAULT | _BV(TWINT) | _BV(TWSTA);
    5dfc:	85 ee       	ldi	r24, 0xE5	; 229
    5dfe:	09 c0       	rjmp	.+18     	; 0x5e12 <__vector_26+0x190>
    return;
  }

  txn = NULL;
    5e00:	10 92 51 17 	sts	0x1751, r1	; 0x801751 <txn+0x1>
    5e04:	10 92 50 17 	sts	0x1750, r1	; 0x801750 <txn>
  op = NULL;
    5e08:	10 92 4f 17 	sts	0x174F, r1	; 0x80174f <op+0x1>
    5e0c:	10 92 4e 17 	sts	0x174E, r1	; 0x80174e <op>

  /* No more transaction, transmit STOP. */
  TWCR = TWCR_DEFAULT | _BV(TWINT) | _BV(TWSTO);
    5e10:	85 ed       	ldi	r24, 0xD5	; 213
    5e12:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
}
    5e16:	ff 91       	pop	r31
    5e18:	ef 91       	pop	r30
    5e1a:	bf 91       	pop	r27
    5e1c:	af 91       	pop	r26
    5e1e:	9f 91       	pop	r25
    5e20:	8f 91       	pop	r24
    5e22:	7f 91       	pop	r23
    5e24:	6f 91       	pop	r22
    5e26:	5f 91       	pop	r21
    5e28:	4f 91       	pop	r20
    5e2a:	3f 91       	pop	r19
    5e2c:	2f 91       	pop	r18
    5e2e:	0f 90       	pop	r0
    5e30:	0b be       	out	0x3b, r0	; 59
    5e32:	0f 90       	pop	r0
    5e34:	0f be       	out	0x3f, r0	; 63
    5e36:	0f 90       	pop	r0
    5e38:	1f 90       	pop	r1
    5e3a:	18 95       	reti

00005e3c <BINtoBCD>:
        return -1;
    }
    if(b & 8)
        return 0;
    return 1;
}
    5e3c:	6a e0       	ldi	r22, 0x0A	; 10
    5e3e:	0e 94 3e e5 	call	0x1ca7c	; 0x1ca7c <__udivmodqi4>
    5e42:	82 95       	swap	r24
    5e44:	80 7f       	andi	r24, 0xF0	; 240
    5e46:	89 2b       	or	r24, r25
    5e48:	08 95       	ret

00005e4a <BCDtoBIN>:
    5e4a:	98 2f       	mov	r25, r24
    5e4c:	92 95       	swap	r25
    5e4e:	9f 70       	andi	r25, 0x0F	; 15
    5e50:	8f 70       	andi	r24, 0x0F	; 15
    5e52:	2a e0       	ldi	r18, 0x0A	; 10
    5e54:	92 9f       	mul	r25, r18
    5e56:	80 0d       	add	r24, r0
    5e58:	11 24       	eor	r1, r1
    5e5a:	08 95       	ret

00005e5c <rtc_run>:
///  - -1 = check run state.
///
/// @return  run state 0/1 on success.
/// @return -1 on error.
int rtc_run(int run)
{
    5e5c:	cf 92       	push	r12
    5e5e:	df 92       	push	r13
    5e60:	ef 92       	push	r14
    5e62:	0f 93       	push	r16
    5e64:	1f 93       	push	r17
    5e66:	cf 93       	push	r28
    5e68:	df 93       	push	r29
    5e6a:	00 d0       	rcall	.+0      	; 0x5e6c <rtc_run+0x10>
    5e6c:	1f 92       	push	r1
    5e6e:	cd b7       	in	r28, 0x3d	; 61
    5e70:	de b7       	in	r29, 0x3e	; 62
    5e72:	6c 01       	movw	r12, r24
    uint8_t  WriteAddress;
    uint8_t  ReadAddress;
    uint8_t b = 0;
    5e74:	19 82       	std	Y+1, r1	; 0x01

    ReadAddress = 0;
    5e76:	1a 82       	std	Y+2, r1	; 0x02
    if (TWI_ReadPacket(DS1307_R, RTC_TIMEOUT, &ReadAddress, sizeof(ReadAddress),
    5e78:	ee 24       	eor	r14, r14
    5e7a:	e3 94       	inc	r14
    5e7c:	8e 01       	movw	r16, r28
    5e7e:	0f 5f       	subi	r16, 0xFF	; 255
    5e80:	1f 4f       	sbci	r17, 0xFF	; 255
    5e82:	21 e0       	ldi	r18, 0x01	; 1
    5e84:	ae 01       	movw	r20, r28
    5e86:	4e 5f       	subi	r20, 0xFE	; 254
    5e88:	5f 4f       	sbci	r21, 0xFF	; 255
    5e8a:	62 e3       	ldi	r22, 0x32	; 50
    5e8c:	81 ed       	ldi	r24, 0xD1	; 209
    5e8e:	8a de       	rcall	.-748    	; 0x5ba4 <TWI_ReadPacket>
    5e90:	88 23       	and	r24, r24
    5e92:	19 f0       	breq	.+6      	; 0x5e9a <rtc_run+0x3e>
        (uint8_t*)&b, 1) != TWI_ERROR_NoError)
    {
        printf("rtc_run read status error\n");
    5e94:	84 ea       	ldi	r24, 0xA4	; 164
    5e96:	94 e0       	ldi	r25, 0x04	; 4
    5e98:	2a c0       	rjmp	.+84     	; 0x5eee <rtc_run+0x92>
    5e9a:	89 81       	ldd	r24, Y+1	; 0x01
        return -1;
    }

    if(run == -1)
    5e9c:	9f ef       	ldi	r25, 0xFF	; 255
    5e9e:	c9 16       	cp	r12, r25
    5ea0:	d9 06       	cpc	r13, r25
    5ea2:	59 f4       	brne	.+22     	; 0x5eba <rtc_run+0x5e>
        return ((b & 0x80) ? 0 : 1);
    5ea4:	08 2e       	mov	r0, r24
    5ea6:	00 0c       	add	r0, r0
    5ea8:	99 0b       	sbc	r25, r25
    5eaa:	80 95       	com	r24
    5eac:	90 95       	com	r25
    5eae:	89 2f       	mov	r24, r25
    5eb0:	88 1f       	adc	r24, r24
    5eb2:	88 27       	eor	r24, r24
    5eb4:	88 1f       	adc	r24, r24
    5eb6:	90 e0       	ldi	r25, 0x00	; 0
    5eb8:	26 c0       	rjmp	.+76     	; 0x5f06 <rtc_run+0xaa>

    b = ( b  & 0x7f) | (run ? 0 : 0x80);
    5eba:	8f 77       	andi	r24, 0x7F	; 127
    5ebc:	c1 14       	cp	r12, r1
    5ebe:	d1 04       	cpc	r13, r1
    5ec0:	11 f4       	brne	.+4      	; 0x5ec6 <rtc_run+0x6a>
    5ec2:	90 e8       	ldi	r25, 0x80	; 128
    5ec4:	01 c0       	rjmp	.+2      	; 0x5ec8 <rtc_run+0x6c>
    5ec6:	90 e0       	ldi	r25, 0x00	; 0
    5ec8:	89 2b       	or	r24, r25
    5eca:	89 83       	std	Y+1, r24	; 0x01

    WriteAddress = 0;
    5ecc:	1b 82       	std	Y+3, r1	; 0x03
    if (TWI_WritePacket(DS1307_W, RTC_TIMEOUT, &WriteAddress, sizeof(WriteAddress),
    5ece:	ee 24       	eor	r14, r14
    5ed0:	e3 94       	inc	r14
    5ed2:	8e 01       	movw	r16, r28
    5ed4:	0f 5f       	subi	r16, 0xFF	; 255
    5ed6:	1f 4f       	sbci	r17, 0xFF	; 255
    5ed8:	21 e0       	ldi	r18, 0x01	; 1
    5eda:	ae 01       	movw	r20, r28
    5edc:	4d 5f       	subi	r20, 0xFD	; 253
    5ede:	5f 4f       	sbci	r21, 0xFF	; 255
    5ee0:	62 e3       	ldi	r22, 0x32	; 50
    5ee2:	80 ed       	ldi	r24, 0xD0	; 208
    5ee4:	a0 de       	rcall	.-704    	; 0x5c26 <TWI_WritePacket>
    5ee6:	88 23       	and	r24, r24
    5ee8:	69 f0       	breq	.+26     	; 0x5f04 <rtc_run+0xa8>
        (uint8_t*)&b, 1) != TWI_ERROR_NoError)
    {
        printf("rtc_run - write status error\n");
    5eea:	86 e8       	ldi	r24, 0x86	; 134
    5eec:	94 e0       	ldi	r25, 0x04	; 4
    5eee:	1f 92       	push	r1
    5ef0:	9f 93       	push	r25
    5ef2:	8f 93       	push	r24
    5ef4:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
        return(-1);
    5ef8:	0f 90       	pop	r0
    5efa:	0f 90       	pop	r0
    5efc:	0f 90       	pop	r0
    5efe:	8f ef       	ldi	r24, 0xFF	; 255
    5f00:	9f ef       	ldi	r25, 0xFF	; 255
    5f02:	01 c0       	rjmp	.+2      	; 0x5f06 <rtc_run+0xaa>
    5f04:	c6 01       	movw	r24, r12
    }
    return(run);
}
    5f06:	0f 90       	pop	r0
    5f08:	0f 90       	pop	r0
    5f0a:	0f 90       	pop	r0
    5f0c:	df 91       	pop	r29
    5f0e:	cf 91       	pop	r28
    5f10:	1f 91       	pop	r17
    5f12:	0f 91       	pop	r16
    5f14:	ef 90       	pop	r14
    5f16:	df 90       	pop	r13
    5f18:	cf 90       	pop	r12
    5f1a:	08 95       	ret

00005f1c <rtc_write>:
/// @param[in] t: POSIX struct tm * time to set.
///
/// @return 1 on sucess.
/// @return 0 on fail.
uint8_t rtc_write(tm_t *t)
{
    5f1c:	ef 92       	push	r14
    5f1e:	0f 93       	push	r16
    5f20:	1f 93       	push	r17
    5f22:	cf 93       	push	r28
    5f24:	df 93       	push	r29
    5f26:	cd b7       	in	r28, 0x3d	; 61
    5f28:	de b7       	in	r29, 0x3e	; 62
    5f2a:	29 97       	sbiw	r28, 0x09	; 9
    5f2c:	0f b6       	in	r0, 0x3f	; 63
    5f2e:	f8 94       	cli
    5f30:	de bf       	out	0x3e, r29	; 62
    5f32:	0f be       	out	0x3f, r0	; 63
    5f34:	cd bf       	out	0x3d, r28	; 61
    5f36:	8c 01       	movw	r16, r24
    uint8_t buf[8];
    uint8_t WriteAddress;

    buf[0] =  BINtoBCD(t->tm_sec) & 0x7f;
    5f38:	fc 01       	movw	r30, r24
    5f3a:	80 81       	ld	r24, Z
    5f3c:	7f df       	rcall	.-258    	; 0x5e3c <BINtoBCD>
    5f3e:	8f 77       	andi	r24, 0x7F	; 127
    5f40:	89 83       	std	Y+1, r24	; 0x01
    buf[1] =  BINtoBCD(t->tm_min) & 0x7f;
    5f42:	f8 01       	movw	r30, r16
    5f44:	82 81       	ldd	r24, Z+2	; 0x02
    5f46:	7a df       	rcall	.-268    	; 0x5e3c <BINtoBCD>
    5f48:	8f 77       	andi	r24, 0x7F	; 127
    buf[2] =  BINtoBCD(t->tm_hour) & 0x3f;
    5f4a:	8a 83       	std	Y+2, r24	; 0x02
    5f4c:	f8 01       	movw	r30, r16
    5f4e:	84 81       	ldd	r24, Z+4	; 0x04
    5f50:	75 df       	rcall	.-278    	; 0x5e3c <BINtoBCD>
    5f52:	8f 73       	andi	r24, 0x3F	; 63
    buf[3] =  ((t->tm_wday & 7) + 1) & 0x0f;
    5f54:	8b 83       	std	Y+3, r24	; 0x03
    5f56:	f8 01       	movw	r30, r16
    5f58:	84 85       	ldd	r24, Z+12	; 0x0c
    5f5a:	87 70       	andi	r24, 0x07	; 7
    buf[4] =  BINtoBCD(t->tm_mday ) & 0x3f;
    5f5c:	8f 5f       	subi	r24, 0xFF	; 255
    5f5e:	8c 83       	std	Y+4, r24	; 0x04
    5f60:	86 81       	ldd	r24, Z+6	; 0x06
    5f62:	6c df       	rcall	.-296    	; 0x5e3c <BINtoBCD>
    buf[5] =  BINtoBCD(t->tm_mon + 1) & 0x1f;
    5f64:	8f 73       	andi	r24, 0x3F	; 63
    5f66:	8d 83       	std	Y+5, r24	; 0x05
    5f68:	f8 01       	movw	r30, r16
    5f6a:	80 85       	ldd	r24, Z+8	; 0x08
    5f6c:	8f 5f       	subi	r24, 0xFF	; 255
    5f6e:	66 df       	rcall	.-308    	; 0x5e3c <BINtoBCD>
    buf[6] =  BINtoBCD(t->tm_year - 100) & 0xff;  // 2000 = 0
    5f70:	8f 71       	andi	r24, 0x1F	; 31
    5f72:	8e 83       	std	Y+6, r24	; 0x06
    5f74:	f8 01       	movw	r30, r16
    5f76:	82 85       	ldd	r24, Z+10	; 0x0a
    5f78:	84 56       	subi	r24, 0x64	; 100
    5f7a:	60 df       	rcall	.-320    	; 0x5e3c <BINtoBCD>
    buf[7] = 0x93;                                // 32khz, out square wave
    5f7c:	8f 83       	std	Y+7, r24	; 0x07
    5f7e:	83 e9       	ldi	r24, 0x93	; 147
	for(i=0;i<7;++i)
		printf("%02x ", 0xff & buf[i]);
    printf("\n");
#endif

    WriteAddress = 0;
    5f80:	88 87       	std	Y+8, r24	; 0x08
    if (TWI_WritePacket(DS1307_W, RTC_TIMEOUT, &WriteAddress, sizeof(WriteAddress),
    5f82:	19 86       	std	Y+9, r1	; 0x09
    5f84:	88 e0       	ldi	r24, 0x08	; 8
    5f86:	e8 2e       	mov	r14, r24
    5f88:	8e 01       	movw	r16, r28
    5f8a:	0f 5f       	subi	r16, 0xFF	; 255
    5f8c:	1f 4f       	sbci	r17, 0xFF	; 255
    5f8e:	21 e0       	ldi	r18, 0x01	; 1
    5f90:	ae 01       	movw	r20, r28
    5f92:	47 5f       	subi	r20, 0xF7	; 247
    5f94:	5f 4f       	sbci	r21, 0xFF	; 255
    5f96:	62 e3       	ldi	r22, 0x32	; 50
    5f98:	80 ed       	ldi	r24, 0xD0	; 208
    5f9a:	45 de       	rcall	.-886    	; 0x5c26 <TWI_WritePacket>
    5f9c:	88 23       	and	r24, r24
        (uint8_t*)buf, 8) != TWI_ERROR_NoError)
    {
        printf("rtc_write error\n");
    5f9e:	61 f0       	breq	.+24     	; 0x5fb8 <rtc_write+0x9c>
    5fa0:	87 e5       	ldi	r24, 0x57	; 87
    5fa2:	94 e0       	ldi	r25, 0x04	; 4
    5fa4:	1f 92       	push	r1
    5fa6:	9f 93       	push	r25
    5fa8:	8f 93       	push	r24
    5faa:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
        return(0);
    5fae:	0f 90       	pop	r0
    5fb0:	0f 90       	pop	r0
    5fb2:	0f 90       	pop	r0
    5fb4:	80 e0       	ldi	r24, 0x00	; 0
    }

    return(1);
    5fb6:	01 c0       	rjmp	.+2      	; 0x5fba <rtc_write+0x9e>
}
    5fb8:	81 e0       	ldi	r24, 0x01	; 1
    5fba:	29 96       	adiw	r28, 0x09	; 9
    5fbc:	0f b6       	in	r0, 0x3f	; 63
    5fbe:	f8 94       	cli
    5fc0:	de bf       	out	0x3e, r29	; 62
    5fc2:	0f be       	out	0x3f, r0	; 63
    5fc4:	cd bf       	out	0x3d, r28	; 61
    5fc6:	df 91       	pop	r29
    5fc8:	cf 91       	pop	r28
    5fca:	1f 91       	pop	r17
    5fcc:	0f 91       	pop	r16
    5fce:	ef 90       	pop	r14
    5fd0:	08 95       	ret

00005fd2 <rtc_init>:
/// @param[in] seconds: POSIX EPOCH time in seconds.
///
/// @return  1 on success.
/// @return 0 on fail.
uint8_t rtc_init (int force, time_t seconds)
{
    5fd2:	a4 e0       	ldi	r26, 0x04	; 4
    5fd4:	b0 e0       	ldi	r27, 0x00	; 0
    5fd6:	ef ee       	ldi	r30, 0xEF	; 239
    5fd8:	ff e2       	ldi	r31, 0x2F	; 47
    5fda:	0c 94 01 e6 	jmp	0x1cc02	; 0x1cc02 <__prologue_saves__+0x1c>
    5fde:	8c 01       	movw	r16, r24
    5fe0:	49 83       	std	Y+1, r20	; 0x01
    5fe2:	5a 83       	std	Y+2, r21	; 0x02
    5fe4:	6b 83       	std	Y+3, r22	; 0x03
    5fe6:	7c 83       	std	Y+4, r23	; 0x04
    uint8_t  WriteAddress;
    int8_t    state;

    tm_t *tmp;

    TWI_Init(TWI_BIT_PRESCALE_4, TWI_BITLENGTH_FROM_FREQ(4, 100000));
    5fe8:	61 e1       	ldi	r22, 0x11	; 17
    5fea:	81 e0       	ldi	r24, 0x01	; 1
    5fec:	39 dd       	rcall	.-1422   	; 0x5a60 <TWI_Init>

    if(!force)
    5fee:	01 15       	cp	r16, r1
    5ff0:	11 05       	cpc	r17, r1
    5ff2:	d9 f4       	brne	.+54     	; 0x602a <rtc_init+0x58>
    {
        state = rtc_run(-1);
    5ff4:	8f ef       	ldi	r24, 0xFF	; 255
    5ff6:	9f ef       	ldi	r25, 0xFF	; 255
    5ff8:	31 df       	rcall	.-414    	; 0x5e5c <rtc_run>
        if(state < 0)
    5ffa:	87 ff       	sbrs	r24, 7
    5ffc:	06 c0       	rjmp	.+12     	; 0x600a <rtc_init+0x38>
        {
            rtc_ok = 0;
    5ffe:	10 92 f2 18 	sts	0x18F2, r1	; 0x8018f2 <rtc_ok+0x1>
    6002:	10 92 f1 18 	sts	0x18F1, r1	; 0x8018f1 <rtc_ok>
            return 0;
    6006:	10 e0       	ldi	r17, 0x00	; 0
    6008:	2b c0       	rjmp	.+86     	; 0x6060 <rtc_init+0x8e>
        }
        if(state == 0)                            // stopped
    600a:	88 23       	and	r24, r24
    600c:	71 f0       	breq	.+28     	; 0x602a <rtc_init+0x58>
                return(0);
            }
        }
#endif

        if(rtc_run(1) < 0)                        // START RTC
    600e:	05 c0       	rjmp	.+10     	; 0x601a <rtc_init+0x48>
    6010:	81 e0       	ldi	r24, 0x01	; 1
    6012:	90 e0       	ldi	r25, 0x00	; 0
    6014:	23 df       	rcall	.-442    	; 0x5e5c <rtc_run>
    6016:	97 fd       	sbrc	r25, 7
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }
    }
    rtc_ok = 1;
    6018:	f2 cf       	rjmp	.-28     	; 0x5ffe <rtc_init+0x2c>
    601a:	81 e0       	ldi	r24, 0x01	; 1
    601c:	90 e0       	ldi	r25, 0x00	; 0
    601e:	90 93 f2 18 	sts	0x18F2, r25	; 0x8018f2 <rtc_ok+0x1>
    6022:	80 93 f1 18 	sts	0x18F1, r24	; 0x8018f1 <rtc_ok>
            force = 1;
    }

    if(force)                                     // INIT
    {
        if(rtc_run(0) < 0)                        // STOP RTC
    6026:	11 e0       	ldi	r17, 0x01	; 1
    6028:	1b c0       	rjmp	.+54     	; 0x6060 <rtc_init+0x8e>
    602a:	80 e0       	ldi	r24, 0x00	; 0
    602c:	90 e0       	ldi	r25, 0x00	; 0
    602e:	16 df       	rcall	.-468    	; 0x5e5c <rtc_run>
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }
        tmp = gmtime(&seconds);
    6030:	97 fd       	sbrc	r25, 7
    6032:	e5 cf       	rjmp	.-54     	; 0x5ffe <rtc_init+0x2c>
    6034:	ce 01       	movw	r24, r28
        if(!rtc_write(tmp))
    6036:	01 96       	adiw	r24, 0x01	; 1
    6038:	0e 94 bf 38 	call	0x717e	; 0x717e <gmtime>
    603c:	6f df       	rcall	.-290    	; 0x5f1c <rtc_write>
    603e:	18 2f       	mov	r17, r24
        {
            printf("rtc_init  write epoch failed\n");
    6040:	81 11       	cpse	r24, r1
    6042:	e6 cf       	rjmp	.-52     	; 0x6010 <rtc_init+0x3e>
    6044:	88 e6       	ldi	r24, 0x68	; 104
    6046:	94 e0       	ldi	r25, 0x04	; 4
    6048:	1f 92       	push	r1
    604a:	9f 93       	push	r25
    604c:	8f 93       	push	r24
            rtc_ok = 0;
    604e:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    6052:	10 92 f2 18 	sts	0x18F2, r1	; 0x8018f2 <rtc_ok+0x1>
            return 0;
    6056:	10 92 f1 18 	sts	0x18F1, r1	; 0x8018f1 <rtc_ok>
    605a:	0f 90       	pop	r0
            return 0;
        }
    }
    rtc_ok = 1;
    return 1;
}
    605c:	0f 90       	pop	r0
    605e:	0f 90       	pop	r0
    6060:	81 2f       	mov	r24, r17
    6062:	24 96       	adiw	r28, 0x04	; 4
    6064:	e4 e0       	ldi	r30, 0x04	; 4
    6066:	0c 94 1d e6 	jmp	0x1cc3a	; 0x1cc3a <__epilogue_restores__+0x1c>

0000606a <rtc_read>:
///
/// @param[out] t: struct tm * POSIX time returned.
/// @return  1 on sucess.
/// @return 0 on fail.
uint8_t rtc_read(tm_t *t)
{
    606a:	cf 92       	push	r12
    606c:	df 92       	push	r13
    606e:	ef 92       	push	r14
    6070:	0f 93       	push	r16
    6072:	1f 93       	push	r17
    6074:	cf 93       	push	r28
    6076:	df 93       	push	r29
    6078:	cd b7       	in	r28, 0x3d	; 61
    607a:	de b7       	in	r29, 0x3e	; 62
    607c:	29 97       	sbiw	r28, 0x09	; 9
    607e:	0f b6       	in	r0, 0x3f	; 63
    6080:	f8 94       	cli
    6082:	de bf       	out	0x3e, r29	; 62
    6084:	0f be       	out	0x3f, r0	; 63
    6086:	cd bf       	out	0x3d, r28	; 61
    6088:	6c 01       	movw	r12, r24
    uint8_t buf[8];

    uint8_t ReadAddress = 0;
    608a:	19 86       	std	Y+9, r1	; 0x09

    ReadAddress = 0;
    if (TWI_ReadPacket(DS1307_R, RTC_TIMEOUT, &ReadAddress, sizeof(ReadAddress),
    608c:	88 e0       	ldi	r24, 0x08	; 8
    608e:	e8 2e       	mov	r14, r24
    6090:	8e 01       	movw	r16, r28
    6092:	0f 5f       	subi	r16, 0xFF	; 255
    6094:	1f 4f       	sbci	r17, 0xFF	; 255
    6096:	21 e0       	ldi	r18, 0x01	; 1
    6098:	ae 01       	movw	r20, r28
    609a:	47 5f       	subi	r20, 0xF7	; 247
    609c:	5f 4f       	sbci	r21, 0xFF	; 255
    609e:	62 e3       	ldi	r22, 0x32	; 50
    60a0:	81 ed       	ldi	r24, 0xD1	; 209
    60a2:	80 dd       	rcall	.-1280   	; 0x5ba4 <TWI_ReadPacket>
    60a4:	88 23       	and	r24, r24
    60a6:	61 f0       	breq	.+24     	; 0x60c0 <rtc_read+0x56>
        (uint8_t*)buf, 8) != TWI_ERROR_NoError)
    {
        printf("rtc_read error\n");
    60a8:	87 e4       	ldi	r24, 0x47	; 71
    60aa:	94 e0       	ldi	r25, 0x04	; 4
    60ac:	1f 92       	push	r1
    60ae:	9f 93       	push	r25
    60b0:	8f 93       	push	r24
    60b2:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
        return 0;
    60b6:	0f 90       	pop	r0
    60b8:	0f 90       	pop	r0
    60ba:	0f 90       	pop	r0
    60bc:	80 e0       	ldi	r24, 0x00	; 0
    60be:	33 c0       	rjmp	.+102    	; 0x6126 <rtc_read+0xbc>
    for(i=0;i<7;++i)
        printf("%02x ", 0xff & buf[i]);
    printf("\n");
#endif

    t->tm_sec =   BCDtoBIN( buf[0] & 0x7f);
    60c0:	89 81       	ldd	r24, Y+1	; 0x01
    60c2:	8f 77       	andi	r24, 0x7F	; 127
    60c4:	c2 de       	rcall	.-636    	; 0x5e4a <BCDtoBIN>
    60c6:	90 e0       	ldi	r25, 0x00	; 0
    60c8:	f6 01       	movw	r30, r12
    60ca:	91 83       	std	Z+1, r25	; 0x01
    t->tm_min =   BCDtoBIN( buf[1] & 0x7f);
    60cc:	80 83       	st	Z, r24
    60ce:	8a 81       	ldd	r24, Y+2	; 0x02
    60d0:	8f 77       	andi	r24, 0x7F	; 127
    60d2:	bb de       	rcall	.-650    	; 0x5e4a <BCDtoBIN>
    60d4:	90 e0       	ldi	r25, 0x00	; 0
    60d6:	f6 01       	movw	r30, r12
    t->tm_hour =  BCDtoBIN( buf[2] & 0x3f);
    60d8:	93 83       	std	Z+3, r25	; 0x03
    60da:	82 83       	std	Z+2, r24	; 0x02
    60dc:	8b 81       	ldd	r24, Y+3	; 0x03
    60de:	8f 73       	andi	r24, 0x3F	; 63
    60e0:	b4 de       	rcall	.-664    	; 0x5e4a <BCDtoBIN>
    60e2:	90 e0       	ldi	r25, 0x00	; 0
    60e4:	f6 01       	movw	r30, r12
    60e6:	95 83       	std	Z+5, r25	; 0x05
    t->tm_wday =  ( buf[3] & 0x07) - 1;
    60e8:	84 83       	std	Z+4, r24	; 0x04
    60ea:	8c 81       	ldd	r24, Y+4	; 0x04
    60ec:	87 70       	andi	r24, 0x07	; 7
    60ee:	90 e0       	ldi	r25, 0x00	; 0
    60f0:	01 97       	sbiw	r24, 0x01	; 1
    t->tm_mday =  BCDtoBIN( buf[4] & 0x3f) ;
    60f2:	95 87       	std	Z+13, r25	; 0x0d
    60f4:	84 87       	std	Z+12, r24	; 0x0c
    60f6:	8d 81       	ldd	r24, Y+5	; 0x05
    60f8:	8f 73       	andi	r24, 0x3F	; 63
    60fa:	a7 de       	rcall	.-690    	; 0x5e4a <BCDtoBIN>
    60fc:	90 e0       	ldi	r25, 0x00	; 0
    60fe:	f6 01       	movw	r30, r12
    t->tm_mon=    BCDtoBIN( buf[5] & 0x1f) - 1;
    6100:	97 83       	std	Z+7, r25	; 0x07
    6102:	86 83       	std	Z+6, r24	; 0x06
    6104:	8e 81       	ldd	r24, Y+6	; 0x06
    6106:	8f 71       	andi	r24, 0x1F	; 31
    6108:	a0 de       	rcall	.-704    	; 0x5e4a <BCDtoBIN>
    610a:	90 e0       	ldi	r25, 0x00	; 0
    610c:	01 97       	sbiw	r24, 0x01	; 1
    610e:	f6 01       	movw	r30, r12
    t->tm_year =  BCDtoBIN( buf[6] & 0xff) + 100;
    6110:	91 87       	std	Z+9, r25	; 0x09
    6112:	80 87       	std	Z+8, r24	; 0x08
    6114:	8f 81       	ldd	r24, Y+7	; 0x07
    6116:	99 de       	rcall	.-718    	; 0x5e4a <BCDtoBIN>
    6118:	90 e0       	ldi	r25, 0x00	; 0
    611a:	8c 59       	subi	r24, 0x9C	; 156
    611c:	9f 4f       	sbci	r25, 0xFF	; 255
    611e:	f6 01       	movw	r30, r12
    6120:	93 87       	std	Z+11, r25	; 0x0b
        t->tm_min,
        t->tm_sec,
        t->tm_wday);
#endif

    return 1;
    6122:	82 87       	std	Z+10, r24	; 0x0a
}
    6124:	81 e0       	ldi	r24, 0x01	; 1
    6126:	29 96       	adiw	r28, 0x09	; 9
    6128:	0f b6       	in	r0, 0x3f	; 63
    612a:	f8 94       	cli
    612c:	de bf       	out	0x3e, r29	; 62
    612e:	0f be       	out	0x3f, r0	; 63
    6130:	cd bf       	out	0x3d, r28	; 61
    6132:	df 91       	pop	r29
    6134:	cf 91       	pop	r28
    6136:	1f 91       	pop	r17
    6138:	0f 91       	pop	r16
    613a:	ef 90       	pop	r14
    613c:	df 90       	pop	r13
    613e:	cf 90       	pop	r12
    6140:	08 95       	ret

00006142 <I2C_Start>:
/*
 *  Move the cursor one character to the right.
 */
void LCD_moveCursorRight()
{
	LCD_moveCursorRightCount(1);
    6142:	64 e1       	ldi	r22, 0x14	; 20
    6144:	9d dc       	rcall	.-1734   	; 0x5a80 <TWI_StartTransmission>
    6146:	81 11       	cpse	r24, r1
    6148:	07 c0       	rjmp	.+14     	; 0x6158 <I2C_Start+0x16>
    614a:	81 e0       	ldi	r24, 0x01	; 1
    614c:	90 e0       	ldi	r25, 0x00	; 0
    614e:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <LCD_ok+0x1>
    6152:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <LCD_ok>
    6156:	04 c0       	rjmp	.+8      	; 0x6160 <I2C_Start+0x1e>
    6158:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <LCD_ok+0x1>
    615c:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <LCD_ok>
    6160:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <LCD_ok>
    6164:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <LCD_ok+0x1>
    6168:	08 95       	ret

0000616a <I2C_Stop>:
    616a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <LCD_ok>
    616e:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <LCD_ok+0x1>
    6172:	89 2b       	or	r24, r25
    6174:	09 f0       	breq	.+2      	; 0x6178 <I2C_Stop+0xe>
    6176:	80 cc       	rjmp	.-1792   	; 0x5a78 <TWI_StopTransmission>
    6178:	08 95       	ret

0000617a <I2C_Send>:
    617a:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <LCD_ok>
    617e:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <LCD_ok+0x1>
    6182:	21 15       	cp	r18, r1
    6184:	31 05       	cpc	r19, r1
    6186:	41 f0       	breq	.+16     	; 0x6198 <I2C_Send+0x1e>
    6188:	db dc       	rcall	.-1610   	; 0x5b40 <TWI_SendByte>
    618a:	51 e0       	ldi	r21, 0x01	; 1
    618c:	40 e0       	ldi	r20, 0x00	; 0
    618e:	89 2b       	or	r24, r25
    6190:	09 f0       	breq	.+2      	; 0x6194 <I2C_Send+0x1a>
    6192:	50 e0       	ldi	r21, 0x00	; 0
    6194:	25 2f       	mov	r18, r21
    6196:	34 2f       	mov	r19, r20
    6198:	c9 01       	movw	r24, r18
    619a:	08 95       	ret

0000619c <LCD_putb>:
    619c:	cf 93       	push	r28
    619e:	c8 2f       	mov	r28, r24
    61a0:	84 ee       	ldi	r24, 0xE4	; 228
    61a2:	cf df       	rcall	.-98     	; 0x6142 <I2C_Start>
    61a4:	89 2b       	or	r24, r25
    61a6:	19 f4       	brne	.+6      	; 0x61ae <LCD_putb+0x12>
    61a8:	80 e0       	ldi	r24, 0x00	; 0
    61aa:	90 e0       	ldi	r25, 0x00	; 0
    61ac:	07 c0       	rjmp	.+14     	; 0x61bc <LCD_putb+0x20>
    61ae:	8c 2f       	mov	r24, r28
    61b0:	e4 df       	rcall	.-56     	; 0x617a <I2C_Send>
    61b2:	89 2b       	or	r24, r25
    61b4:	c9 f3       	breq	.-14     	; 0x61a8 <LCD_putb+0xc>
    61b6:	d9 df       	rcall	.-78     	; 0x616a <I2C_Stop>
    61b8:	81 e0       	ldi	r24, 0x01	; 1
    61ba:	90 e0       	ldi	r25, 0x00	; 0
    61bc:	cf 91       	pop	r28
    61be:	08 95       	ret

000061c0 <LCD_command>:
    61c0:	cf 93       	push	r28
    61c2:	c8 2f       	mov	r28, r24
    61c4:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <lcd_address>
    61c8:	bc df       	rcall	.-136    	; 0x6142 <I2C_Start>
    61ca:	89 2b       	or	r24, r25
    61cc:	51 f0       	breq	.+20     	; 0x61e2 <LCD_command+0x22>
    61ce:	8c e7       	ldi	r24, 0x7C	; 124
    61d0:	d4 df       	rcall	.-88     	; 0x617a <I2C_Send>
    61d2:	8c 2f       	mov	r24, r28
    61d4:	d2 df       	rcall	.-92     	; 0x617a <I2C_Send>
    61d6:	c9 df       	rcall	.-110    	; 0x616a <I2C_Stop>
    61d8:	6a e0       	ldi	r22, 0x0A	; 10
    61da:	70 e0       	ldi	r23, 0x00	; 0
    61dc:	80 e0       	ldi	r24, 0x00	; 0
    61de:	90 e0       	ldi	r25, 0x00	; 0
    61e0:	38 d9       	rcall	.-3472   	; 0x5452 <delayms>
    61e2:	cf 91       	pop	r28
    61e4:	08 95       	ret

000061e6 <LCD_specialCommand>:
    61e6:	cf 93       	push	r28
    61e8:	c8 2f       	mov	r28, r24
    61ea:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <lcd_address>
    61ee:	a9 df       	rcall	.-174    	; 0x6142 <I2C_Start>
    61f0:	89 2b       	or	r24, r25
    61f2:	51 f0       	breq	.+20     	; 0x6208 <LCD_specialCommand+0x22>
    61f4:	8e ef       	ldi	r24, 0xFE	; 254
    61f6:	c1 df       	rcall	.-126    	; 0x617a <I2C_Send>
    61f8:	8c 2f       	mov	r24, r28
    61fa:	bf df       	rcall	.-130    	; 0x617a <I2C_Send>
    61fc:	b6 df       	rcall	.-148    	; 0x616a <I2C_Stop>
    61fe:	62 e3       	ldi	r22, 0x32	; 50
    6200:	70 e0       	ldi	r23, 0x00	; 0
    6202:	80 e0       	ldi	r24, 0x00	; 0
    6204:	90 e0       	ldi	r25, 0x00	; 0
    6206:	25 d9       	rcall	.-3510   	; 0x5452 <delayms>
    6208:	cf 91       	pop	r28
    620a:	08 95       	ret

0000620c <LCD_setCursor>:
    620c:	a8 e0       	ldi	r26, 0x08	; 8
    620e:	b0 e0       	ldi	r27, 0x00	; 0
    6210:	ec e0       	ldi	r30, 0x0C	; 12
    6212:	f1 e3       	ldi	r31, 0x31	; 49
    6214:	0c 94 03 e6 	jmp	0x1cc06	; 0x1cc06 <__prologue_saves__+0x20>
    6218:	98 e0       	ldi	r25, 0x08	; 8
    621a:	eb e5       	ldi	r30, 0x5B	; 91
    621c:	f2 e0       	ldi	r31, 0x02	; 2
    621e:	de 01       	movw	r26, r28
    6220:	11 96       	adiw	r26, 0x01	; 1
    6222:	01 90       	ld	r0, Z+
    6224:	0d 92       	st	X+, r0
    6226:	9a 95       	dec	r25
    6228:	e1 f7       	brne	.-8      	; 0x6222 <LCD_setCursor+0x16>
    622a:	64 30       	cpi	r22, 0x04	; 4
    622c:	08 f0       	brcs	.+2      	; 0x6230 <LCD_setCursor+0x24>
    622e:	63 e0       	ldi	r22, 0x03	; 3
    6230:	fe 01       	movw	r30, r28
    6232:	31 96       	adiw	r30, 0x01	; 1
    6234:	e6 0f       	add	r30, r22
    6236:	f1 1d       	adc	r31, r1
    6238:	e6 0f       	add	r30, r22
    623a:	f1 1d       	adc	r31, r1
    623c:	90 81       	ld	r25, Z
    623e:	89 0f       	add	r24, r25
    6240:	80 68       	ori	r24, 0x80	; 128
    6242:	d1 df       	rcall	.-94     	; 0x61e6 <LCD_specialCommand>
    6244:	28 96       	adiw	r28, 0x08	; 8
    6246:	e2 e0       	ldi	r30, 0x02	; 2
    6248:	0c 94 1f e6 	jmp	0x1cc3e	; 0x1cc3e <__epilogue_restores__+0x20>

0000624c <LCD_pos>:
    624c:	ea e0       	ldi	r30, 0x0A	; 10
    624e:	f1 e0       	ldi	r31, 0x01	; 1
    6250:	28 2f       	mov	r18, r24
    6252:	30 e0       	ldi	r19, 0x00	; 0
    6254:	31 83       	std	Z+1, r19	; 0x01
    6256:	20 83       	st	Z, r18
    6258:	26 2f       	mov	r18, r22
    625a:	30 e0       	ldi	r19, 0x00	; 0
    625c:	33 83       	std	Z+3, r19	; 0x03
    625e:	22 83       	std	Z+2, r18	; 0x02
    6260:	d5 cf       	rjmp	.-86     	; 0x620c <LCD_setCursor>
    6262:	08 95       	ret

00006264 <LCD_clear>:
    6264:	8d e2       	ldi	r24, 0x2D	; 45
    6266:	ac df       	rcall	.-168    	; 0x61c0 <LCD_command>
    6268:	60 e0       	ldi	r22, 0x00	; 0
    626a:	80 e0       	ldi	r24, 0x00	; 0
    626c:	ef df       	rcall	.-34     	; 0x624c <LCD_pos>
    626e:	6a e0       	ldi	r22, 0x0A	; 10
    6270:	70 e0       	ldi	r23, 0x00	; 0
    6272:	80 e0       	ldi	r24, 0x00	; 0
    6274:	90 e0       	ldi	r25, 0x00	; 0
    6276:	ed c8       	rjmp	.-3622   	; 0x5452 <delayms>
    6278:	08 95       	ret

0000627a <LCD_setFastBacklightRGB>:
} // moveCursorRight


//New command - set backlight with LCD messages or delaymss
void LCD_setFastBacklightRGB(byte r, byte g, byte b)
{
    627a:	1f 93       	push	r17
    627c:	cf 93       	push	r28
    627e:	df 93       	push	r29
    6280:	18 2f       	mov	r17, r24
    6282:	d6 2f       	mov	r29, r22
    6284:	c4 2f       	mov	r28, r20
  //send commands to the display to set backlights
  if( !I2C_Start(lcd_address) )
    6286:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <lcd_address>
    628a:	5b df       	rcall	.-330    	; 0x6142 <I2C_Start>
    628c:	89 2b       	or	r24, r25
	return;
  I2C_Send(SETTING_COMMAND); //Send special command character
    628e:	81 f0       	breq	.+32     	; 0x62b0 <LCD_setFastBacklightRGB+0x36>
  I2C_Send(SET_RGB_COMMAND); //Send the set RGB character '+' or plus
    6290:	8c e7       	ldi	r24, 0x7C	; 124
  I2C_Send(r);               //Send the red value
  I2C_Send(g);               //Send the green value
    6292:	73 df       	rcall	.-282    	; 0x617a <I2C_Send>
    6294:	8b e2       	ldi	r24, 0x2B	; 43
  I2C_Send(b);               //Send the blue value
    6296:	71 df       	rcall	.-286    	; 0x617a <I2C_Send>
    6298:	81 2f       	mov	r24, r17
  I2C_Stop();         //Stop transmission
    629a:	6f df       	rcall	.-290    	; 0x617a <I2C_Send>
    629c:	8d 2f       	mov	r24, r29
  delayms(10);
    629e:	6d df       	rcall	.-294    	; 0x617a <I2C_Send>
    62a0:	8c 2f       	mov	r24, r28
    62a2:	6b df       	rcall	.-298    	; 0x617a <I2C_Send>
    62a4:	62 df       	rcall	.-316    	; 0x616a <I2C_Stop>
    62a6:	6a e0       	ldi	r22, 0x0A	; 10
    62a8:	70 e0       	ldi	r23, 0x00	; 0
} // setFastBacklight
    62aa:	80 e0       	ldi	r24, 0x00	; 0
    62ac:	90 e0       	ldi	r25, 0x00	; 0
    62ae:	d1 d8       	rcall	.-3678   	; 0x5452 <delayms>
    62b0:	df 91       	pop	r29
    62b2:	cf 91       	pop	r28
    62b4:	1f 91       	pop	r17
    62b6:	08 95       	ret

000062b8 <LCD_init>:
 *
 */
bool LCD_init(uint8_t addr)
{
  
  if( !I2C_Start(lcd_address = addr) )
    62b8:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <lcd_address>
    62bc:	42 df       	rcall	.-380    	; 0x6142 <I2C_Start>
    62be:	00 97       	sbiw	r24, 0x00	; 0
	return 0;

  I2C_Send(SPECIAL_COMMAND);                      //Send special command character
    62c0:	61 f1       	breq	.+88     	; 0x631a <LCD_init+0x62>
    62c2:	8e ef       	ldi	r24, 0xFE	; 254
  I2C_Send(LCD_DISPLAYCONTROL | _displayControl); //Send the display command
    62c4:	5a df       	rcall	.-332    	; 0x617a <I2C_Send>
    62c6:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <_displayControl>

  I2C_Send(SPECIAL_COMMAND);                      //Send special command character
    62ca:	88 60       	ori	r24, 0x08	; 8
    62cc:	56 df       	rcall	.-340    	; 0x617a <I2C_Send>
  I2C_Send(LCD_ENTRYMODESET | _displayMode);      //Send the entry mode command
    62ce:	8e ef       	ldi	r24, 0xFE	; 254
    62d0:	54 df       	rcall	.-344    	; 0x617a <I2C_Send>

  I2C_Send(SETTING_COMMAND);                      //Put LCD into setting mode
    62d2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_displayMode>
  I2C_Send(CLEAR_COMMAND);                        //Send clear display command

  I2C_Send(SETTING_COMMAND);                      //Send special command character
    62d6:	84 60       	ori	r24, 0x04	; 4
  I2C_Send(DISABLE_SYSTEM_MESSAGE_DISPLAY);       //Send the set '.' character
    62d8:	50 df       	rcall	.-352    	; 0x617a <I2C_Send>
    62da:	8c e7       	ldi	r24, 0x7C	; 124

  I2C_Send(SPECIAL_COMMAND);                      //Send special command character
    62dc:	4e df       	rcall	.-356    	; 0x617a <I2C_Send>
    62de:	8d e2       	ldi	r24, 0x2D	; 45
  I2C_Send(LCD_SETDDRAMADDR | 0);				// HOME 0,0
    62e0:	4c df       	rcall	.-360    	; 0x617a <I2C_Send>
    62e2:	8c e7       	ldi	r24, 0x7C	; 124

  I2C_Stop();
    62e4:	4a df       	rcall	.-364    	; 0x617a <I2C_Send>
    62e6:	8f e2       	ldi	r24, 0x2F	; 47
  delayms(50);                                      //let things settle a bit
    62e8:	48 df       	rcall	.-368    	; 0x617a <I2C_Send>
    62ea:	8e ef       	ldi	r24, 0xFE	; 254
    62ec:	46 df       	rcall	.-372    	; 0x617a <I2C_Send>
    62ee:	80 e8       	ldi	r24, 0x80	; 128
    62f0:	44 df       	rcall	.-376    	; 0x617a <I2C_Send>
    62f2:	3b df       	rcall	.-394    	; 0x616a <I2C_Stop>

  LCD_setFastBacklightRGB ( 0xC0, 0xC0, 0xC0 );
    62f4:	62 e3       	ldi	r22, 0x32	; 50
    62f6:	70 e0       	ldi	r23, 0x00	; 0
    62f8:	80 e0       	ldi	r24, 0x00	; 0
    62fa:	90 e0       	ldi	r25, 0x00	; 0
    62fc:	aa d8       	rcall	.-3756   	; 0x5452 <delayms>

  lcd.xpos = 0;
    62fe:	40 ec       	ldi	r20, 0xC0	; 192
    6300:	60 ec       	ldi	r22, 0xC0	; 192
    6302:	80 ec       	ldi	r24, 0xC0	; 192
    6304:	ba df       	rcall	.-140    	; 0x627a <LCD_setFastBacklightRGB>
  lcd.ypos = 0;
    6306:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <lcd+0x1>
    630a:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <lcd>

  return(1);
    630e:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <lcd+0x3>
} //init
    6312:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <lcd+0x2>
    6316:	81 e0       	ldi	r24, 0x01	; 1
    6318:	90 e0       	ldi	r25, 0x00	; 0
    631a:	08 95       	ret

0000631c <lcd_cleareol>:
	{
		LCD_putb(' ');
		rem--;
	}
	LCD_pos(lcd.xpos = 0,lcd.ypos);
}
    631c:	cf 93       	push	r28
    631e:	df 93       	push	r29
    6320:	c0 91 0e 01 	lds	r28, 0x010E	; 0x80010e <lcd+0x4>
    6324:	d0 91 0f 01 	lds	r29, 0x010F	; 0x80010f <lcd+0x5>
    6328:	21 97       	sbiw	r28, 0x01	; 1
    632a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lcd>
    632e:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <lcd+0x1>
    6332:	c8 1b       	sub	r28, r24
    6334:	d9 0b       	sbc	r29, r25
    6336:	1c 16       	cp	r1, r28
    6338:	1d 06       	cpc	r1, r29
    633a:	24 f4       	brge	.+8      	; 0x6344 <lcd_cleareol+0x28>
    633c:	80 e2       	ldi	r24, 0x20	; 32
    633e:	2e df       	rcall	.-420    	; 0x619c <LCD_putb>
    6340:	21 97       	sbiw	r28, 0x01	; 1
    6342:	f9 cf       	rjmp	.-14     	; 0x6336 <lcd_cleareol+0x1a>
    6344:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <lcd+0x2>
    6348:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <lcd+0x4>
    634c:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <lcd+0x5>
    6350:	01 97       	sbiw	r24, 0x01	; 1
    6352:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <lcd+0x1>
    6356:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <lcd>
    635a:	78 df       	rcall	.-272    	; 0x624c <LCD_pos>
    635c:	df 91       	pop	r29
    635e:	cf 91       	pop	r28
    6360:	08 95       	ret

00006362 <lcd_putch>:

/// @brief  put character 
/// @param[in] c: character
/// return: void
void lcd_putch(int c)
{
    6362:	cf 93       	push	r28
    6364:	df 93       	push	r29
	int rem;

	if(c < 0 || c > 0x7e)
    6366:	8f 37       	cpi	r24, 0x7F	; 127
    6368:	91 05       	cpc	r25, r1
    636a:	08 f0       	brcs	.+2      	; 0x636e <lcd_putch+0xc>
    636c:	50 c0       	rjmp	.+160    	; 0x640e <lcd_putch+0xac>
    636e:	ec 01       	movw	r28, r24
		return;

	// Normal visible characters
	if(c >= ' ')
    6370:	80 32       	cpi	r24, 0x20	; 32
    6372:	91 05       	cpc	r25, r1
    6374:	4c f1       	brlt	.+82     	; 0x63c8 <lcd_putch+0x66>
	{
		rem = (lcd.w - 1 - lcd.xpos);
		if( rem <= 0 )
    6376:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <lcd+0x4>
    637a:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <lcd+0x5>
    637e:	01 97       	sbiw	r24, 0x01	; 1
    6380:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <lcd>
    6384:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <lcd+0x1>
    6388:	82 1b       	sub	r24, r18
    638a:	93 0b       	sbc	r25, r19
    638c:	18 16       	cp	r1, r24
    638e:	19 06       	cpc	r1, r25
    6390:	7c f0       	brlt	.+30     	; 0x63b0 <lcd_putch+0x4e>
		{
			LCD_pos(++lcd.ypos,lcd.xpos=0);
    6392:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <lcd+0x1>
    6396:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <lcd>
    639a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <lcd+0x2>
    639e:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <lcd+0x3>
    63a2:	01 96       	adiw	r24, 0x01	; 1
    63a4:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <lcd+0x3>
    63a8:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <lcd+0x2>
    63ac:	60 e0       	ldi	r22, 0x00	; 0
		}
		(void) LCD_putb(c);
    63ae:	4e df       	rcall	.-356    	; 0x624c <LCD_pos>
    63b0:	8c 2f       	mov	r24, r28
		// uart_putchar(c,0);
		lcd.xpos++;
    63b2:	f4 de       	rcall	.-536    	; 0x619c <LCD_putb>
    63b4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lcd>
    63b8:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <lcd+0x1>
    63bc:	01 96       	adiw	r24, 0x01	; 1
    63be:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <lcd+0x1>
    63c2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <lcd>
		return;
	}

	// Control characters
	if(c == '\n')
    63c6:	23 c0       	rjmp	.+70     	; 0x640e <lcd_putch+0xac>
    63c8:	8a 30       	cpi	r24, 0x0A	; 10
	{
		// uart_putchar(c,0);
		lcd_cleareol();
    63ca:	91 05       	cpc	r25, r1
    63cc:	91 f4       	brne	.+36     	; 0x63f2 <lcd_putch+0x90>
		++lcd.ypos;
		lcd.ypos &= 3;
    63ce:	a6 df       	rcall	.-180    	; 0x631c <lcd_cleareol>
    63d0:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <lcd+0x2>
    63d4:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <lcd+0x3>
    63d8:	6f 5f       	subi	r22, 0xFF	; 255
    63da:	7f 4f       	sbci	r23, 0xFF	; 255
    63dc:	63 70       	andi	r22, 0x03	; 3
    63de:	77 27       	eor	r23, r23
    63e0:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <lcd+0x3>
    63e4:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <lcd+0x2>
		LCD_pos(lcd.xpos=0,lcd.ypos);
    63e8:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <lcd+0x1>
    63ec:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <lcd>
	}

	if(c == '\f')
    63f0:	0c c0       	rjmp	.+24     	; 0x640a <lcd_putch+0xa8>
	{
		LCD_clear();
    63f2:	0c 97       	sbiw	r24, 0x0c	; 12
    63f4:	61 f4       	brne	.+24     	; 0x640e <lcd_putch+0xac>
		LCD_pos(lcd.xpos=0,lcd.ypos=0);
    63f6:	36 df       	rcall	.-404    	; 0x6264 <LCD_clear>
    63f8:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <lcd+0x3>
    63fc:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <lcd+0x2>
    6400:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <lcd+0x1>
    6404:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <lcd>
    6408:	60 e0       	ldi	r22, 0x00	; 0
    640a:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    640c:	1f df       	rcall	.-450    	; 0x624c <LCD_pos>
    640e:	df 91       	pop	r29
    6410:	cf 91       	pop	r28
    6412:	08 95       	ret

00006414 <_putc_win>:


// We do not use the printf structure
static void _putc_win(struct _printf_t *p, char ch)
{
    6414:	fc 01       	movw	r30, r24
	p->sent++;
    6416:	26 81       	ldd	r18, Z+6	; 0x06
    6418:	37 81       	ldd	r19, Z+7	; 0x07
    641a:	2f 5f       	subi	r18, 0xFF	; 255
    641c:	3f 4f       	sbci	r19, 0xFF	; 255
    641e:	37 83       	std	Z+7, r19	; 0x07
    6420:	26 83       	std	Z+6, r18	; 0x06
	lcd_putch(ch);
    6422:	86 2f       	mov	r24, r22
    6424:	90 e0       	ldi	r25, 0x00	; 0
    6426:	9d cf       	rjmp	.-198    	; 0x6362 <lcd_putch>
    6428:	08 95       	ret

0000642a <lcd_printf>:
/// @param[in] fmt: printf forat string
/// @param[in] ...: vararg list or arguments
/// @return size of string
MEMSPACE
int lcd_printf(const char *fmt, ... )
{
    642a:	a8 e0       	ldi	r26, 0x08	; 8
    642c:	b0 e0       	ldi	r27, 0x00	; 0
    642e:	eb e1       	ldi	r30, 0x1B	; 27
    6430:	f2 e3       	ldi	r31, 0x32	; 50
    6432:	0c 94 03 e6 	jmp	0x1cc06	; 0x1cc06 <__prologue_saves__+0x20>
    6436:	9e 01       	movw	r18, r28
    6438:	23 5f       	subi	r18, 0xF3	; 243
    643a:	3f 4f       	sbci	r19, 0xFF	; 255
    643c:	f9 01       	movw	r30, r18
    643e:	41 91       	ld	r20, Z+
    6440:	51 91       	ld	r21, Z+
    6442:	9f 01       	movw	r18, r30
    printf_t fn;

    fn.put = _putc_win;
    6444:	8a e0       	ldi	r24, 0x0A	; 10
    6446:	92 e3       	ldi	r25, 0x32	; 50
    6448:	9a 83       	std	Y+2, r25	; 0x02
    644a:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    644c:	18 86       	std	Y+8, r1	; 0x08
    644e:	1f 82       	std	Y+7, r1	; 0x07

    va_list va;
    va_start(va, fmt);

    _printf_fn(&fn, fmt, va);
    6450:	60 e8       	ldi	r22, 0x80	; 128
    6452:	ce 01       	movw	r24, r28
    6454:	01 96       	adiw	r24, 0x01	; 1
    6456:	0e 94 f6 42 	call	0x85ec	; 0x85ec <_printf_fn>

    va_end(va);

	return(fn.sent);

}
    645a:	8f 81       	ldd	r24, Y+7	; 0x07
    645c:	98 85       	ldd	r25, Y+8	; 0x08
    645e:	28 96       	adiw	r28, 0x08	; 8
    6460:	e2 e0       	ldi	r30, 0x02	; 2
    6462:	0c 94 1f e6 	jmp	0x1cc3e	; 0x1cc3e <__epilogue_restores__+0x20>

00006466 <sep>:
    {
        if(strncmp(str,pat,len) == 0 )
            return(len);
    }
    return(0);
}
    6466:	8e ef       	ldi	r24, 0xFE	; 254
    6468:	94 e0       	ldi	r25, 0x04	; 4
    646a:	1f 92       	push	r1
    646c:	9f 93       	push	r25
    646e:	8f 93       	push	r24
    6470:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    6474:	0f 90       	pop	r0
    6476:	0f 90       	pop	r0
    6478:	0f 90       	pop	r0
    647a:	08 95       	ret

0000647c <islower>:
    647c:	9c 01       	movw	r18, r24
    647e:	21 56       	subi	r18, 0x61	; 97
    6480:	31 09       	sbc	r19, r1
    6482:	81 e0       	ldi	r24, 0x01	; 1
    6484:	90 e0       	ldi	r25, 0x00	; 0
    6486:	2a 31       	cpi	r18, 0x1A	; 26
    6488:	31 05       	cpc	r19, r1
    648a:	10 f0       	brcs	.+4      	; 0x6490 <islower+0x14>
    648c:	80 e0       	ldi	r24, 0x00	; 0
    648e:	90 e0       	ldi	r25, 0x00	; 0
    6490:	08 95       	ret

00006492 <toupper>:
    6492:	cf 93       	push	r28
    6494:	df 93       	push	r29
    6496:	ec 01       	movw	r28, r24
    6498:	f1 df       	rcall	.-30     	; 0x647c <islower>
    649a:	89 2b       	or	r24, r25
    649c:	19 f0       	breq	.+6      	; 0x64a4 <toupper+0x12>
    649e:	ce 01       	movw	r24, r28
    64a0:	80 97       	sbiw	r24, 0x20	; 32
    64a2:	01 c0       	rjmp	.+2      	; 0x64a6 <toupper+0x14>
    64a4:	ce 01       	movw	r24, r28
    64a6:	df 91       	pop	r29
    64a8:	cf 91       	pop	r28
    64aa:	08 95       	ret

000064ac <strcpy>:
    64ac:	fc 01       	movw	r30, r24
    64ae:	db 01       	movw	r26, r22
    64b0:	2d 91       	ld	r18, X+
    64b2:	bd 01       	movw	r22, r26
    64b4:	01 96       	adiw	r24, 0x01	; 1
    64b6:	22 23       	and	r18, r18
    64b8:	11 f0       	breq	.+4      	; 0x64be <strcpy+0x12>
    64ba:	20 83       	st	Z, r18
    64bc:	f7 cf       	rjmp	.-18     	; 0x64ac <strcpy>
    64be:	10 82       	st	Z, r1
    64c0:	08 95       	ret

000064c2 <strncpy>:
    64c2:	db 01       	movw	r26, r22
    64c4:	fc 01       	movw	r30, r24
    64c6:	2d 91       	ld	r18, X+
    64c8:	21 11       	cpse	r18, r1
    64ca:	03 c0       	rjmp	.+6      	; 0x64d2 <strncpy+0x10>
    64cc:	4e 0f       	add	r20, r30
    64ce:	5f 1f       	adc	r21, r31
    64d0:	08 c0       	rjmp	.+16     	; 0x64e2 <strncpy+0x20>
    64d2:	41 15       	cp	r20, r1
    64d4:	51 05       	cpc	r21, r1
    64d6:	21 f0       	breq	.+8      	; 0x64e0 <strncpy+0x1e>
    64d8:	21 93       	st	Z+, r18
    64da:	41 50       	subi	r20, 0x01	; 1
    64dc:	51 09       	sbc	r21, r1
    64de:	f3 cf       	rjmp	.-26     	; 0x64c6 <strncpy+0x4>
    64e0:	08 95       	ret
    64e2:	4e 17       	cp	r20, r30
    64e4:	5f 07       	cpc	r21, r31
    64e6:	11 f0       	breq	.+4      	; 0x64ec <strncpy+0x2a>
    64e8:	11 92       	st	Z+, r1
    64ea:	fb cf       	rjmp	.-10     	; 0x64e2 <strncpy+0x20>
    64ec:	08 95       	ret

000064ee <strcat>:
    64ee:	cf 93       	push	r28
    64f0:	df 93       	push	r29
    64f2:	d8 2f       	mov	r29, r24
    64f4:	c9 2f       	mov	r28, r25
    64f6:	28 2f       	mov	r18, r24
    64f8:	39 2f       	mov	r19, r25
    64fa:	c9 01       	movw	r24, r18
    64fc:	2f 5f       	subi	r18, 0xFF	; 255
    64fe:	3f 4f       	sbci	r19, 0xFF	; 255
    6500:	fc 01       	movw	r30, r24
    6502:	40 81       	ld	r20, Z
    6504:	41 11       	cpse	r20, r1
    6506:	f9 cf       	rjmp	.-14     	; 0x64fa <strcat+0xc>
    6508:	d1 df       	rcall	.-94     	; 0x64ac <strcpy>
    650a:	8d 2f       	mov	r24, r29
    650c:	9c 2f       	mov	r25, r28
    650e:	df 91       	pop	r29
    6510:	cf 91       	pop	r28
    6512:	08 95       	ret

00006514 <reverse>:
    6514:	fc 01       	movw	r30, r24
    6516:	01 90       	ld	r0, Z+
    6518:	00 20       	and	r0, r0
    651a:	e9 f7       	brne	.-6      	; 0x6516 <reverse+0x2>
    651c:	31 97       	sbiw	r30, 0x01	; 1
    651e:	e8 1b       	sub	r30, r24
    6520:	f9 0b       	sbc	r31, r25
    6522:	af 01       	movw	r20, r30
    6524:	55 95       	asr	r21
    6526:	47 95       	ror	r20
    6528:	e8 0f       	add	r30, r24
    652a:	f9 1f       	adc	r31, r25
    652c:	dc 01       	movw	r26, r24
    652e:	9d 01       	movw	r18, r26
    6530:	28 1b       	sub	r18, r24
    6532:	39 0b       	sbc	r19, r25
    6534:	24 17       	cp	r18, r20
    6536:	35 07       	cpc	r19, r21
    6538:	2c f4       	brge	.+10     	; 0x6544 <reverse+0x30>
    653a:	22 91       	ld	r18, -Z
    653c:	3c 91       	ld	r19, X
    653e:	30 83       	st	Z, r19
    6540:	2d 93       	st	X+, r18
    6542:	f5 cf       	rjmp	.-22     	; 0x652e <reverse+0x1a>
    6544:	08 95       	ret

00006546 <strupper>:
    6546:	cf 93       	push	r28
    6548:	df 93       	push	r29
    654a:	ec 01       	movw	r28, r24
    654c:	88 81       	ld	r24, Y
    654e:	88 23       	and	r24, r24
    6550:	21 f0       	breq	.+8      	; 0x655a <strupper+0x14>
    6552:	90 e0       	ldi	r25, 0x00	; 0
    6554:	9e df       	rcall	.-196    	; 0x6492 <toupper>
    6556:	89 93       	st	Y+, r24
    6558:	f9 cf       	rjmp	.-14     	; 0x654c <strupper+0x6>
    655a:	df 91       	pop	r29
    655c:	cf 91       	pop	r28
    655e:	08 95       	ret

00006560 <trim_tail>:
    6560:	00 97       	sbiw	r24, 0x00	; 0
    6562:	69 f0       	breq	.+26     	; 0x657e <trim_tail+0x1e>
    6564:	fc 01       	movw	r30, r24
    6566:	01 90       	ld	r0, Z+
    6568:	00 20       	and	r0, r0
    656a:	e9 f7       	brne	.-6      	; 0x6566 <trim_tail+0x6>
    656c:	31 97       	sbiw	r30, 0x01	; 1
    656e:	e8 17       	cp	r30, r24
    6570:	f9 07       	cpc	r31, r25
    6572:	29 f0       	breq	.+10     	; 0x657e <trim_tail+0x1e>
    6574:	22 91       	ld	r18, -Z
    6576:	21 32       	cpi	r18, 0x21	; 33
    6578:	10 f4       	brcc	.+4      	; 0x657e <trim_tail+0x1e>
    657a:	10 82       	st	Z, r1
    657c:	f8 cf       	rjmp	.-16     	; 0x656e <trim_tail+0xe>
    657e:	08 95       	ret

00006580 <skipspaces>:
    6580:	00 97       	sbiw	r24, 0x00	; 0
    6582:	39 f0       	breq	.+14     	; 0x6592 <skipspaces+0x12>
    6584:	fc 01       	movw	r30, r24
    6586:	cf 01       	movw	r24, r30
    6588:	21 91       	ld	r18, Z+
    658a:	20 32       	cpi	r18, 0x20	; 32
    658c:	e1 f3       	breq	.-8      	; 0x6586 <skipspaces+0x6>
    658e:	29 30       	cpi	r18, 0x09	; 9
    6590:	d1 f3       	breq	.-12     	; 0x6586 <skipspaces+0x6>
    6592:	08 95       	ret

00006594 <strcmp>:
    6594:	dc 01       	movw	r26, r24
    6596:	fb 01       	movw	r30, r22
    6598:	2d 91       	ld	r18, X+
    659a:	41 91       	ld	r20, Z+
    659c:	50 e0       	ldi	r21, 0x00	; 0
    659e:	30 e0       	ldi	r19, 0x00	; 0
    65a0:	c9 01       	movw	r24, r18
    65a2:	84 1b       	sub	r24, r20
    65a4:	95 0b       	sbc	r25, r21
    65a6:	11 f4       	brne	.+4      	; 0x65ac <strcmp+0x18>
    65a8:	45 2b       	or	r20, r21
    65aa:	b1 f7       	brne	.-20     	; 0x6598 <strcmp+0x4>
    65ac:	08 95       	ret

000065ae <strncmp>:
    65ae:	fc 01       	movw	r30, r24
    65b0:	db 01       	movw	r26, r22
    65b2:	48 0f       	add	r20, r24
    65b4:	59 1f       	adc	r21, r25
    65b6:	e4 17       	cp	r30, r20
    65b8:	f5 07       	cpc	r31, r21
    65ba:	59 f0       	breq	.+22     	; 0x65d2 <strncmp+0x24>
    65bc:	21 91       	ld	r18, Z+
    65be:	6d 91       	ld	r22, X+
    65c0:	70 e0       	ldi	r23, 0x00	; 0
    65c2:	30 e0       	ldi	r19, 0x00	; 0
    65c4:	c9 01       	movw	r24, r18
    65c6:	86 1b       	sub	r24, r22
    65c8:	97 0b       	sbc	r25, r23
    65ca:	29 f4       	brne	.+10     	; 0x65d6 <strncmp+0x28>
    65cc:	67 2b       	or	r22, r23
    65ce:	99 f7       	brne	.-26     	; 0x65b6 <strncmp+0x8>
    65d0:	02 c0       	rjmp	.+4      	; 0x65d6 <strncmp+0x28>
    65d2:	80 e0       	ldi	r24, 0x00	; 0
    65d4:	90 e0       	ldi	r25, 0x00	; 0
    65d6:	08 95       	ret

000065d8 <strcasecmp>:
    65d8:	ef 92       	push	r14
    65da:	ff 92       	push	r15
    65dc:	0f 93       	push	r16
    65de:	1f 93       	push	r17
    65e0:	cf 93       	push	r28
    65e2:	df 93       	push	r29
    65e4:	7c 01       	movw	r14, r24
    65e6:	8b 01       	movw	r16, r22
    65e8:	f7 01       	movw	r30, r14
    65ea:	81 91       	ld	r24, Z+
    65ec:	7f 01       	movw	r14, r30
    65ee:	90 e0       	ldi	r25, 0x00	; 0
    65f0:	50 df       	rcall	.-352    	; 0x6492 <toupper>
    65f2:	ec 01       	movw	r28, r24
    65f4:	f8 01       	movw	r30, r16
    65f6:	81 91       	ld	r24, Z+
    65f8:	8f 01       	movw	r16, r30
    65fa:	90 e0       	ldi	r25, 0x00	; 0
    65fc:	4a df       	rcall	.-364    	; 0x6492 <toupper>
    65fe:	9c 01       	movw	r18, r24
    6600:	ce 01       	movw	r24, r28
    6602:	82 1b       	sub	r24, r18
    6604:	93 0b       	sbc	r25, r19
    6606:	11 f4       	brne	.+4      	; 0x660c <strcasecmp+0x34>
    6608:	23 2b       	or	r18, r19
    660a:	71 f7       	brne	.-36     	; 0x65e8 <strcasecmp+0x10>
    660c:	cd b7       	in	r28, 0x3d	; 61
    660e:	de b7       	in	r29, 0x3e	; 62
    6610:	e6 e0       	ldi	r30, 0x06	; 6
    6612:	0c 94 1b e6 	jmp	0x1cc36	; 0x1cc36 <__epilogue_restores__+0x18>

00006616 <strncasecmp>:
    6616:	a0 e0       	ldi	r26, 0x00	; 0
    6618:	b0 e0       	ldi	r27, 0x00	; 0
    661a:	e1 e1       	ldi	r30, 0x11	; 17
    661c:	f3 e3       	ldi	r31, 0x33	; 51
    661e:	0c 94 fd e5 	jmp	0x1cbfa	; 0x1cbfa <__prologue_saves__+0x14>
    6622:	8c 01       	movw	r16, r24
    6624:	7b 01       	movw	r14, r22
    6626:	6c 01       	movw	r12, r24
    6628:	c4 0e       	add	r12, r20
    662a:	d5 1e       	adc	r13, r21
    662c:	0c 15       	cp	r16, r12
    662e:	1d 05       	cpc	r17, r13
    6630:	99 f0       	breq	.+38     	; 0x6658 <strncasecmp+0x42>
    6632:	f8 01       	movw	r30, r16
    6634:	81 91       	ld	r24, Z+
    6636:	8f 01       	movw	r16, r30
    6638:	90 e0       	ldi	r25, 0x00	; 0
    663a:	2b df       	rcall	.-426    	; 0x6492 <toupper>
    663c:	ec 01       	movw	r28, r24
    663e:	f7 01       	movw	r30, r14
    6640:	81 91       	ld	r24, Z+
    6642:	7f 01       	movw	r14, r30
    6644:	90 e0       	ldi	r25, 0x00	; 0
    6646:	25 df       	rcall	.-438    	; 0x6492 <toupper>
    6648:	9c 01       	movw	r18, r24
    664a:	ce 01       	movw	r24, r28
    664c:	82 1b       	sub	r24, r18
    664e:	93 0b       	sbc	r25, r19
    6650:	29 f4       	brne	.+10     	; 0x665c <strncasecmp+0x46>
    6652:	23 2b       	or	r18, r19
    6654:	59 f7       	brne	.-42     	; 0x662c <strncasecmp+0x16>
    6656:	02 c0       	rjmp	.+4      	; 0x665c <strncasecmp+0x46>
    6658:	80 e0       	ldi	r24, 0x00	; 0
    665a:	90 e0       	ldi	r25, 0x00	; 0
    665c:	cd b7       	in	r28, 0x3d	; 61
    665e:	de b7       	in	r29, 0x3e	; 62
    6660:	e8 e0       	ldi	r30, 0x08	; 8
    6662:	0c 94 19 e6 	jmp	0x1cc32	; 0x1cc32 <__epilogue_restores__+0x14>

00006666 <MATCH>:
    6666:	cf 93       	push	r28
    6668:	df 93       	push	r29
    666a:	fb 01       	movw	r30, r22
    666c:	01 90       	ld	r0, Z+
    666e:	00 20       	and	r0, r0
    6670:	e9 f7       	brne	.-6      	; 0x666c <MATCH+0x6>
    6672:	31 97       	sbiw	r30, 0x01	; 1
    6674:	ef 01       	movw	r28, r30
    6676:	c6 1b       	sub	r28, r22
    6678:	d7 0b       	sbc	r29, r23
    667a:	8c df       	rcall	.-232    	; 0x6594 <strcmp>
    667c:	89 2b       	or	r24, r25
    667e:	11 f4       	brne	.+4      	; 0x6684 <MATCH+0x1e>
    6680:	ce 01       	movw	r24, r28
    6682:	02 c0       	rjmp	.+4      	; 0x6688 <MATCH+0x22>
    6684:	80 e0       	ldi	r24, 0x00	; 0
    6686:	90 e0       	ldi	r25, 0x00	; 0
    6688:	df 91       	pop	r29
    668a:	cf 91       	pop	r28
    668c:	08 95       	ret

0000668e <MATCHARGS>:
    668e:	ef 92       	push	r14
    6690:	ff 92       	push	r15
    6692:	0f 93       	push	r16
    6694:	1f 93       	push	r17
    6696:	cf 93       	push	r28
    6698:	df 93       	push	r29
    669a:	f6 2e       	mov	r15, r22
    669c:	e7 2e       	mov	r14, r23
    669e:	ea 01       	movw	r28, r20
    66a0:	89 01       	movw	r16, r18
    66a2:	e1 df       	rcall	.-62     	; 0x6666 <MATCH>
    66a4:	00 97       	sbiw	r24, 0x00	; 0
    66a6:	e9 f0       	breq	.+58     	; 0x66e2 <MATCHARGS+0x54>
    66a8:	0c 17       	cp	r16, r28
    66aa:	1d 07       	cpc	r17, r29
    66ac:	c4 f4       	brge	.+48     	; 0x66de <MATCHARGS+0x50>
    66ae:	1f 93       	push	r17
    66b0:	0f 93       	push	r16
    66b2:	df 93       	push	r29
    66b4:	cf 93       	push	r28
    66b6:	ef 92       	push	r14
    66b8:	ff 92       	push	r15
    66ba:	88 ed       	ldi	r24, 0xD8	; 216
    66bc:	94 e0       	ldi	r25, 0x04	; 4
    66be:	1f 92       	push	r1
    66c0:	9f 93       	push	r25
    66c2:	8f 93       	push	r24
    66c4:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    66c8:	8d b7       	in	r24, 0x3d	; 61
    66ca:	9e b7       	in	r25, 0x3e	; 62
    66cc:	09 96       	adiw	r24, 0x09	; 9
    66ce:	0f b6       	in	r0, 0x3f	; 63
    66d0:	f8 94       	cli
    66d2:	9e bf       	out	0x3e, r25	; 62
    66d4:	0f be       	out	0x3f, r0	; 63
    66d6:	8d bf       	out	0x3d, r24	; 61
    66d8:	80 e0       	ldi	r24, 0x00	; 0
    66da:	90 e0       	ldi	r25, 0x00	; 0
    66dc:	02 c0       	rjmp	.+4      	; 0x66e2 <MATCHARGS+0x54>
    66de:	81 e0       	ldi	r24, 0x01	; 1
    66e0:	90 e0       	ldi	r25, 0x00	; 0
    66e2:	cd b7       	in	r28, 0x3d	; 61
    66e4:	de b7       	in	r29, 0x3e	; 62
    66e6:	e6 e0       	ldi	r30, 0x06	; 6
    66e8:	0c 94 1b e6 	jmp	0x1cc36	; 0x1cc36 <__epilogue_restores__+0x18>

000066ec <MATCHI>:
    66ec:	cf 93       	push	r28
    66ee:	df 93       	push	r29
    66f0:	fb 01       	movw	r30, r22
    66f2:	01 90       	ld	r0, Z+
    66f4:	00 20       	and	r0, r0
    66f6:	e9 f7       	brne	.-6      	; 0x66f2 <MATCHI+0x6>
    66f8:	31 97       	sbiw	r30, 0x01	; 1
    66fa:	ef 01       	movw	r28, r30
    66fc:	c6 1b       	sub	r28, r22
    66fe:	d7 0b       	sbc	r29, r23
    6700:	6b df       	rcall	.-298    	; 0x65d8 <strcasecmp>
    6702:	89 2b       	or	r24, r25
    6704:	11 f4       	brne	.+4      	; 0x670a <MATCHI+0x1e>
    6706:	ce 01       	movw	r24, r28
    6708:	02 c0       	rjmp	.+4      	; 0x670e <MATCHI+0x22>
    670a:	80 e0       	ldi	r24, 0x00	; 0
    670c:	90 e0       	ldi	r25, 0x00	; 0
    670e:	df 91       	pop	r29
    6710:	cf 91       	pop	r28
    6712:	08 95       	ret

00006714 <MATCHI_LEN>:
///@return string lenth on match.
///@return 0 on no match.
///@warning Matches sub strings so be caeful.
MEMSPACE
int MATCHI_LEN(char *str, char *pat)
{
    6714:	cf 93       	push	r28
    6716:	df 93       	push	r29
    int len;

    if(!str || !pat)
    6718:	00 97       	sbiw	r24, 0x00	; 0
    671a:	89 f0       	breq	.+34     	; 0x673e <MATCHI_LEN+0x2a>
    671c:	61 15       	cp	r22, r1
    671e:	71 05       	cpc	r23, r1
    6720:	71 f0       	breq	.+28     	; 0x673e <MATCHI_LEN+0x2a>
        return(0);
    len = strlen(pat);
    6722:	eb 01       	movw	r28, r22
    6724:	09 90       	ld	r0, Y+
    6726:	00 20       	and	r0, r0
    6728:	e9 f7       	brne	.-6      	; 0x6724 <MATCHI_LEN+0x10>
    672a:	21 97       	sbiw	r28, 0x01	; 1
    672c:	c6 1b       	sub	r28, r22
    672e:	d7 0b       	sbc	r29, r23

    if( len )
    6730:	31 f0       	breq	.+12     	; 0x673e <MATCHI_LEN+0x2a>
    {
        if(strncasecmp(str,pat,len) == 0 )
    6732:	ae 01       	movw	r20, r28
    6734:	70 df       	rcall	.-288    	; 0x6616 <strncasecmp>
    6736:	89 2b       	or	r24, r25
    6738:	11 f4       	brne	.+4      	; 0x673e <MATCHI_LEN+0x2a>
    673a:	ce 01       	movw	r24, r28
    673c:	02 c0       	rjmp	.+4      	; 0x6742 <MATCHI_LEN+0x2e>
int MATCHI_LEN(char *str, char *pat)
{
    int len;

    if(!str || !pat)
        return(0);
    673e:	80 e0       	ldi	r24, 0x00	; 0
    6740:	90 e0       	ldi	r25, 0x00	; 0
    {
        if(strncasecmp(str,pat,len) == 0 )
            return(len);
    }
    return(0);
}
    6742:	df 91       	pop	r29
    6744:	cf 91       	pop	r28
    6746:	08 95       	ret

00006748 <split_args>:
///@param[out] *argv[]: token array
///@param[in] max: maximum argument count
///@return count
MEMSPACE
int split_args(char *str, char *argv[], int max)
{
    6748:	a0 e0       	ldi	r26, 0x00	; 0
    674a:	b0 e0       	ldi	r27, 0x00	; 0
    674c:	ea ea       	ldi	r30, 0xAA	; 170
    674e:	f3 e3       	ldi	r31, 0x33	; 51
    6750:	0c 94 fd e5 	jmp	0x1cbfa	; 0x1cbfa <__prologue_saves__+0x14>
    6754:	dc 01       	movw	r26, r24
    6756:	6a 01       	movw	r12, r20
    6758:	8b 01       	movw	r16, r22
    int i;
    int count = 0;
    // NULL ?

    for(i=0;i<max;++i)
    675a:	fb 01       	movw	r30, r22
    675c:	80 e0       	ldi	r24, 0x00	; 0
    675e:	90 e0       	ldi	r25, 0x00	; 0
    6760:	8c 15       	cp	r24, r12
    6762:	9d 05       	cpc	r25, r13
    6764:	24 f4       	brge	.+8      	; 0x676e <split_args+0x26>
        argv[i] = NULL; 
    6766:	11 92       	st	Z+, r1
    6768:	11 92       	st	Z+, r1
{
    int i;
    int count = 0;
    // NULL ?

    for(i=0;i<max;++i)
    676a:	01 96       	adiw	r24, 0x01	; 1
    676c:	f9 cf       	rjmp	.-14     	; 0x6760 <split_args+0x18>
        argv[i] = NULL; 

    // You may replace argv[0]
    // argv[count++] = "main";

    if(!max)
    676e:	c1 14       	cp	r12, r1
    6770:	d1 04       	cpc	r13, r1
    6772:	d9 f1       	breq	.+118    	; 0x67ea <split_args+0xa2>
        return(0);

    if(!str)
    6774:	10 97       	sbiw	r26, 0x00	; 0
    6776:	c9 f1       	breq	.+114    	; 0x67ea <split_args+0xa2>
    6778:	ee 24       	eor	r14, r14
    677a:	e3 94       	inc	r14
    677c:	f1 2c       	mov	r15, r1
    677e:	c0 e0       	ldi	r28, 0x00	; 0
    6780:	d0 e0       	ldi	r29, 0x00	; 0
        return(0);

    while(*str && count < max)
    6782:	8c 91       	ld	r24, X
    6784:	88 23       	and	r24, r24
    6786:	b1 f1       	breq	.+108    	; 0x67f4 <split_args+0xac>
    6788:	cc 15       	cp	r28, r12
    678a:	dd 05       	cpc	r29, r13
    678c:	9c f5       	brge	.+102    	; 0x67f4 <split_args+0xac>
    {
        str = skipspaces(str);
    678e:	cd 01       	movw	r24, r26
    6790:	f7 de       	rcall	.-530    	; 0x6580 <skipspaces>
        if(!*str)
    6792:	dc 01       	movw	r26, r24
    6794:	2c 91       	ld	r18, X
    6796:	22 23       	and	r18, r18
    6798:	69 f1       	breq	.+90     	; 0x67f4 <split_args+0xac>
            break;

        // string processing
        if(*str == '"')
    679a:	22 32       	cpi	r18, 0x22	; 34
    679c:	79 f4       	brne	.+30     	; 0x67bc <split_args+0x74>
        {
            ++str;
    679e:	fc 01       	movw	r30, r24
    67a0:	31 96       	adiw	r30, 0x01	; 1
            // Save string pointer
            argv[count++] = str;
    67a2:	d8 01       	movw	r26, r16
    67a4:	ed 93       	st	X+, r30
    67a6:	fc 93       	st	X, r31
    67a8:	df 01       	movw	r26, r30
            while(*str && *str != '"')
    67aa:	80 81       	ld	r24, Z
    67ac:	31 96       	adiw	r30, 0x01	; 1
    67ae:	88 23       	and	r24, r24
    67b0:	a9 f0       	breq	.+42     	; 0x67dc <split_args+0x94>
    67b2:	82 32       	cpi	r24, 0x22	; 34
    67b4:	c9 f7       	brne	.-14     	; 0x67a8 <split_args+0x60>
                ++str;
            if(*str == '"')
                *str++ = 0;
    67b6:	1c 92       	st	X, r1
    67b8:	df 01       	movw	r26, r30
    67ba:	10 c0       	rjmp	.+32     	; 0x67dc <split_args+0x94>
            continue;
        }

        argv[count++] = str;
    67bc:	f8 01       	movw	r30, r16
    67be:	91 83       	std	Z+1, r25	; 0x01
    67c0:	80 83       	st	Z, r24
    67c2:	fc 01       	movw	r30, r24
    67c4:	2e 2f       	mov	r18, r30
    67c6:	9f 2f       	mov	r25, r31
        // Find size of token
        while(*str > ' ' && *str <= 0x7e)
    67c8:	81 91       	ld	r24, Z+
    67ca:	3f ed       	ldi	r19, 0xDF	; 223
    67cc:	38 0f       	add	r19, r24
    67ce:	3e 35       	cpi	r19, 0x5E	; 94
    67d0:	c8 f3       	brcs	.-14     	; 0x67c4 <split_args+0x7c>
            ++str;
        if(!*str)
    67d2:	88 23       	and	r24, r24
    67d4:	69 f0       	breq	.+26     	; 0x67f0 <split_args+0xa8>
            break;
        *str  = 0;
    67d6:	a2 2f       	mov	r26, r18
    67d8:	b9 2f       	mov	r27, r25
    67da:	1d 92       	st	X+, r1
    67dc:	21 96       	adiw	r28, 0x01	; 1
    67de:	ff ef       	ldi	r31, 0xFF	; 255
    67e0:	ef 1a       	sub	r14, r31
    67e2:	ff 0a       	sbc	r15, r31
    67e4:	0e 5f       	subi	r16, 0xFE	; 254
    67e6:	1f 4f       	sbci	r17, 0xFF	; 255
    67e8:	cc cf       	rjmp	.-104    	; 0x6782 <split_args+0x3a>

    // You may replace argv[0]
    // argv[count++] = "main";

    if(!max)
        return(0);
    67ea:	80 e0       	ldi	r24, 0x00	; 0
    67ec:	90 e0       	ldi	r25, 0x00	; 0
    67ee:	03 c0       	rjmp	.+6      	; 0x67f6 <split_args+0xae>
            if(*str == '"')
                *str++ = 0;
            continue;
        }

        argv[count++] = str;
    67f0:	c7 01       	movw	r24, r14
    67f2:	01 c0       	rjmp	.+2      	; 0x67f6 <split_args+0xae>
    67f4:	ce 01       	movw	r24, r28
            break;
        *str  = 0;
        ++str;
    }
    return(count);
}
    67f6:	cd b7       	in	r28, 0x3d	; 61
    67f8:	de b7       	in	r29, 0x3e	; 62
    67fa:	e8 e0       	ldi	r30, 0x08	; 8
    67fc:	0c 94 19 e6 	jmp	0x1cc32	; 0x1cc32 <__epilogue_restores__+0x14>

00006800 <get_token>:
///
///@return pointer past token on success .
///@return NULL if no token found
MEMSPACE
char *get_token(char *str, char *token, int max)
{
    6800:	ef 92       	push	r14
    6802:	ff 92       	push	r15
    6804:	0f 93       	push	r16
    6806:	1f 93       	push	r17
    6808:	cf 93       	push	r28
    680a:	df 93       	push	r29
    680c:	eb 01       	movw	r28, r22
    680e:	8a 01       	movw	r16, r20

	*token = 0;
    6810:	18 82       	st	Y, r1

    if(!str || *str == 0)
    6812:	00 97       	sbiw	r24, 0x00	; 0
    6814:	89 f1       	breq	.+98     	; 0x6878 <get_token+0x78>
    6816:	fc 01       	movw	r30, r24
    6818:	20 81       	ld	r18, Z
    681a:	22 23       	and	r18, r18
        return(str);

    // Skip beginning spaces
    str = skipspaces(str);
    681c:	79 f1       	breq	.+94     	; 0x687c <get_token+0x7c>
    // Delete all trailing spaces
    trim_tail(str);
    681e:	b0 de       	rcall	.-672    	; 0x6580 <skipspaces>
    6820:	7c 01       	movw	r14, r24
    6822:	9e de       	rcall	.-708    	; 0x6560 <trim_tail>
    6824:	f7 01       	movw	r30, r14

    while(*str > ' ' && max > 0) {
    6826:	cf 01       	movw	r24, r30
    6828:	21 91       	ld	r18, Z+
    682a:	21 32       	cpi	r18, 0x21	; 33
    682c:	e0 f0       	brcs	.+56     	; 0x6866 <get_token+0x66>
    682e:	10 16       	cp	r1, r16
    6830:	11 06       	cpc	r1, r17

        // String processing
        // A token can be a quoted string
        if(*str == '"')
    6832:	cc f4       	brge	.+50     	; 0x6866 <get_token+0x66>
    6834:	22 32       	cpi	r18, 0x22	; 34
    6836:	79 f4       	brne	.+30     	; 0x6856 <get_token+0x56>
    6838:	fc 01       	movw	r30, r24
    683a:	31 96       	adiw	r30, 0x01	; 1
    683c:	0c 0f       	add	r16, r28
    683e:	1d 1f       	adc	r17, r29
        {
            ++str;
            // We are pointing at the body of the quoted string now
            while(*str && *str != '"' && max > 0)
    6840:	cf 01       	movw	r24, r30
    6842:	21 91       	ld	r18, Z+
    6844:	22 23       	and	r18, r18
    6846:	79 f0       	breq	.+30     	; 0x6866 <get_token+0x66>
    6848:	22 32       	cpi	r18, 0x22	; 34
    684a:	59 f0       	breq	.+22     	; 0x6862 <get_token+0x62>
    684c:	c0 17       	cp	r28, r16
    684e:	d1 07       	cpc	r29, r17
            {
                *token++ = *str++;
    6850:	51 f0       	breq	.+20     	; 0x6866 <get_token+0x66>
    6852:	29 93       	st	Y+, r18
            }
            break;
        }

        // If we have a comma, outside of a string, break
        if(*str == ',' )
    6854:	f5 cf       	rjmp	.-22     	; 0x6840 <get_token+0x40>
    6856:	2c 32       	cpi	r18, 0x2C	; 44
            break;

        // copy token
        *token++ = *str++;
    6858:	31 f0       	breq	.+12     	; 0x6866 <get_token+0x66>
        --max;
    685a:	29 93       	st	Y+, r18
    685c:	01 50       	subi	r16, 0x01	; 1
                --max;
            }
            if(*str == '"')
            {
                ++str;
                *token = 0;
    685e:	11 09       	sbc	r17, r1
        *token++ = *str++;
        --max;
    }

    // Skip trailing spaces
    str = skipspaces(str);
    6860:	e2 cf       	rjmp	.-60     	; 0x6826 <get_token+0x26>
    6862:	cf 01       	movw	r24, r30
    6864:	18 82       	st	Y, r1
    // If we had a trailing comma skip it
    if(*str == ',' )
    6866:	8c de       	rcall	.-744    	; 0x6580 <skipspaces>
    6868:	fc 01       	movw	r30, r24
    686a:	80 81       	ld	r24, Z
        ++str;
    686c:	8c 32       	cpi	r24, 0x2C	; 44

    *token = 0;
    686e:	09 f4       	brne	.+2      	; 0x6872 <get_token+0x72>
    return(str);
    6870:	31 96       	adiw	r30, 0x01	; 1
    6872:	18 82       	st	Y, r1
    6874:	cf 01       	movw	r24, r30
    6876:	02 c0       	rjmp	.+4      	; 0x687c <get_token+0x7c>
}
    6878:	80 e0       	ldi	r24, 0x00	; 0
    687a:	90 e0       	ldi	r25, 0x00	; 0
    687c:	cd b7       	in	r28, 0x3d	; 61
    687e:	de b7       	in	r29, 0x3e	; 62
    6880:	e6 e0       	ldi	r30, 0x06	; 6
    6882:	0c 94 1b e6 	jmp	0x1cc36	; 0x1cc36 <__epilogue_restores__+0x18>

00006886 <token>:
///@return string lenth on match.
///@return 0 on no match.

MEMSPACE
int token(char *str, char *pat)
{
    6886:	ef 92       	push	r14
    6888:	ff 92       	push	r15
    688a:	0f 93       	push	r16
    688c:	1f 93       	push	r17
    688e:	cf 93       	push	r28
    6890:	df 93       	push	r29
    int patlen;
    int len;
    char *ptr;

    if(!str || *str == 0)
    6892:	00 97       	sbiw	r24, 0x00	; 0
    6894:	11 f1       	breq	.+68     	; 0x68da <token+0x54>
    6896:	fc 01       	movw	r30, r24
    6898:	20 81       	ld	r18, Z
    689a:	22 23       	and	r18, r18
    689c:	f1 f0       	breq	.+60     	; 0x68da <token+0x54>
    689e:	7b 01       	movw	r14, r22
        return(0);

    ptr = skipspaces(str);
    68a0:	8c 01       	movw	r16, r24
    68a2:	6e de       	rcall	.-804    	; 0x6580 <skipspaces>
    len = 0;
    while(*ptr > ' ' && *ptr <= 0x7e )
    68a4:	9c 01       	movw	r18, r24
    68a6:	fc 01       	movw	r30, r24
    68a8:	ef 01       	movw	r28, r30
    68aa:	c2 1b       	sub	r28, r18
    68ac:	d3 0b       	sbc	r29, r19
    68ae:	91 91       	ld	r25, Z+
    68b0:	91 52       	subi	r25, 0x21	; 33
    68b2:	9e 35       	cpi	r25, 0x5E	; 94
    {
        ++len;
        ++ptr;
    }

    if(!len)
    68b4:	c8 f3       	brcs	.-14     	; 0x68a8 <token+0x22>
    68b6:	20 97       	sbiw	r28, 0x00	; 0
        return(0);

    patlen = strlen(pat);
    68b8:	91 f0       	breq	.+36     	; 0x68de <token+0x58>
    68ba:	f7 01       	movw	r30, r14
    68bc:	01 90       	ld	r0, Z+
    68be:	00 20       	and	r0, r0
    68c0:	e9 f7       	brne	.-6      	; 0x68bc <token+0x36>
    68c2:	31 97       	sbiw	r30, 0x01	; 1
    68c4:	ee 19       	sub	r30, r14

    if(len != patlen)
    68c6:	ff 09       	sbc	r31, r15
    68c8:	ec 17       	cp	r30, r28
    68ca:	fd 07       	cpc	r31, r29
        return(0);

    if(strncmp(str,pat,patlen) == 0)
    68cc:	31 f4       	brne	.+12     	; 0x68da <token+0x54>
    68ce:	ae 01       	movw	r20, r28
    68d0:	b7 01       	movw	r22, r14
    68d2:	c8 01       	movw	r24, r16
    68d4:	6c de       	rcall	.-808    	; 0x65ae <strncmp>
    68d6:	89 2b       	or	r24, r25
    int patlen;
    int len;
    char *ptr;

    if(!str || *str == 0)
        return(0);
    68d8:	11 f0       	breq	.+4      	; 0x68de <token+0x58>
    68da:	c0 e0       	ldi	r28, 0x00	; 0
        return(0);

    if(strncmp(str,pat,patlen) == 0)
        return(len);
    return(0);
}
    68dc:	d0 e0       	ldi	r29, 0x00	; 0
    68de:	ce 01       	movw	r24, r28
    68e0:	cd b7       	in	r28, 0x3d	; 61
    68e2:	de b7       	in	r29, 0x3e	; 62
    68e4:	e6 e0       	ldi	r30, 0x06	; 6
    68e6:	0c 94 1b e6 	jmp	0x1cc36	; 0x1cc36 <__epilogue_restores__+0x18>

000068ea <get_value>:
/// @param[in] str: string to examine
///
/// @return  value
MEMSPACE
int32_t get_value(char *str)
{ 
    68ea:	a2 e0       	ldi	r26, 0x02	; 2
    68ec:	b0 e0       	ldi	r27, 0x00	; 0
    68ee:	eb e7       	ldi	r30, 0x7B	; 123
    68f0:	f4 e3       	ldi	r31, 0x34	; 52
    68f2:	0c 94 01 e6 	jmp	0x1cc02	; 0x1cc02 <__prologue_saves__+0x1c>
    int base;
    int ret;
    char *ptr;
    char *endptr;

    if(!str || *str == 0)
    68f6:	00 97       	sbiw	r24, 0x00	; 0
    68f8:	79 f1       	breq	.+94     	; 0x6958 <get_value+0x6e>
    68fa:	fc 01       	movw	r30, r24
    68fc:	20 81       	ld	r18, Z
    68fe:	22 23       	and	r18, r18
        return(0);

    ptr = skipspaces(str);
    6900:	59 f1       	breq	.+86     	; 0x6958 <get_value+0x6e>
    6902:	3e de       	rcall	.-900    	; 0x6580 <skipspaces>
    base = 10;

    // convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    6904:	8c 01       	movw	r16, r24
    6906:	6e e2       	ldi	r22, 0x2E	; 46
    6908:	77 e0       	ldi	r23, 0x07	; 7
    690a:	04 df       	rcall	.-504    	; 0x6714 <MATCHI_LEN>
    690c:	00 97       	sbiw	r24, 0x00	; 0
    {
        base = 16;
        ptr += ret;
    690e:	29 f0       	breq	.+10     	; 0x691a <get_value+0x30>
    6910:	08 0f       	add	r16, r24
    base = 10;

    // convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    {
        base = 16;
    6912:	19 1f       	adc	r17, r25
    6914:	40 e1       	ldi	r20, 0x10	; 16
    6916:	50 e0       	ldi	r21, 0x00	; 0
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    6918:	18 c0       	rjmp	.+48     	; 0x694a <get_value+0x60>
    691a:	61 e3       	ldi	r22, 0x31	; 49
    691c:	77 e0       	ldi	r23, 0x07	; 7
    691e:	c8 01       	movw	r24, r16
    6920:	f9 de       	rcall	.-526    	; 0x6714 <MATCHI_LEN>
    6922:	00 97       	sbiw	r24, 0x00	; 0
    {
        base = 8;
        ptr += ret;
    6924:	29 f0       	breq	.+10     	; 0x6930 <get_value+0x46>
    6926:	08 0f       	add	r16, r24
        base = 16;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    {
        base = 8;
    6928:	19 1f       	adc	r17, r25
    692a:	48 e0       	ldi	r20, 0x08	; 8
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    692c:	50 e0       	ldi	r21, 0x00	; 0
    692e:	0d c0       	rjmp	.+26     	; 0x694a <get_value+0x60>
    6930:	64 e3       	ldi	r22, 0x34	; 52
    6932:	77 e0       	ldi	r23, 0x07	; 7
    6934:	c8 01       	movw	r24, r16
    6936:	ee de       	rcall	.-548    	; 0x6714 <MATCHI_LEN>
    {
        base = 2;
        ptr += ret;
    6938:	00 97       	sbiw	r24, 0x00	; 0
    693a:	29 f0       	breq	.+10     	; 0x6946 <get_value+0x5c>
        base = 8;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
    693c:	08 0f       	add	r16, r24
    693e:	19 1f       	adc	r17, r25
    6940:	42 e0       	ldi	r20, 0x02	; 2

    if(!str || *str == 0)
        return(0);

    ptr = skipspaces(str);
    base = 10;
    6942:	50 e0       	ldi	r21, 0x00	; 0
    6944:	02 c0       	rjmp	.+4      	; 0x694a <get_value+0x60>
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
    6946:	4a e0       	ldi	r20, 0x0A	; 10
    6948:	50 e0       	ldi	r21, 0x00	; 0
    694a:	be 01       	movw	r22, r28
    694c:	6f 5f       	subi	r22, 0xFF	; 255
    694e:	7f 4f       	sbci	r23, 0xFF	; 255
    6950:	c8 01       	movw	r24, r16
    6952:	0e 94 99 47 	call	0x8f32	; 0x8f32 <strtol>
    int ret;
    char *ptr;
    char *endptr;

    if(!str || *str == 0)
        return(0);
    6956:	03 c0       	rjmp	.+6      	; 0x695e <get_value+0x74>
    6958:	60 e0       	ldi	r22, 0x00	; 0
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
}
    695a:	70 e0       	ldi	r23, 0x00	; 0
    695c:	cb 01       	movw	r24, r22
    695e:	22 96       	adiw	r28, 0x02	; 2
    6960:	e4 e0       	ldi	r30, 0x04	; 4
    6962:	0c 94 1d e6 	jmp	0x1cc3a	; 0x1cc3a <__epilogue_restores__+0x1c>

00006966 <enable_system_task>:
/// @brief Enable interrupts
/// @return void.
MEMSPACE
void enable_system_task()
{
    sei();
    6966:	78 94       	sei
    6968:	08 95       	ret

0000696a <install_timers_isr>:
///
/// @see ISR().
/// @return void.
MEMSPACE void install_timers_isr()
{
    cli();
    696a:	f8 94       	cli
    TCCR1B=(1<<WGM12) | TIMER1_PRE_1;   // No Prescale
    696c:	89 e0       	ldi	r24, 0x09	; 9
    696e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    TCCR1A=0;
    6972:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    OCR1A=(TIMER1_COUNTS_PER_TIC-1);    // 0 .. count
    6976:	8f e1       	ldi	r24, 0x1F	; 31
    6978:	9e e4       	ldi	r25, 0x4E	; 78
    697a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    697e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    TIMSK1 |= (1<<OCIE1A);              //Enable the Output Compare A interrupt
    6982:	ef e6       	ldi	r30, 0x6F	; 111
    6984:	f0 e0       	ldi	r31, 0x00	; 0
    6986:	80 81       	ld	r24, Z
    6988:	82 60       	ori	r24, 0x02	; 2
    698a:	80 83       	st	Z, r24
    sei();
    698c:	78 94       	sei
    698e:	08 95       	ret

00006990 <__vector_13>:
/// @brief AVR Timer Interrupt Vector
///
/// - calls execute_timers() - we call this the System task.
///
ISR(TIMER1_COMPA_vect)
{
    6990:	1f 92       	push	r1
    6992:	0f 92       	push	r0
    6994:	0f b6       	in	r0, 0x3f	; 63
    6996:	0f 92       	push	r0
    6998:	11 24       	eor	r1, r1
    699a:	0b b6       	in	r0, 0x3b	; 59
    699c:	0f 92       	push	r0
    699e:	2f 93       	push	r18
    69a0:	3f 93       	push	r19
    69a2:	4f 93       	push	r20
    69a4:	5f 93       	push	r21
    69a6:	6f 93       	push	r22
    69a8:	7f 93       	push	r23
    69aa:	8f 93       	push	r24
    69ac:	9f 93       	push	r25
    69ae:	af 93       	push	r26
    69b0:	bf 93       	push	r27
    69b2:	ef 93       	push	r30
    execute_timers();
    69b4:	ff 93       	push	r31
}
    69b6:	26 d2       	rcall	.+1100   	; 0x6e04 <execute_timers>
    69b8:	ff 91       	pop	r31
    69ba:	ef 91       	pop	r30
    69bc:	bf 91       	pop	r27
    69be:	af 91       	pop	r26
    69c0:	9f 91       	pop	r25
    69c2:	8f 91       	pop	r24
    69c4:	7f 91       	pop	r23
    69c6:	6f 91       	pop	r22
    69c8:	5f 91       	pop	r21
    69ca:	4f 91       	pop	r20
    69cc:	3f 91       	pop	r19
    69ce:	2f 91       	pop	r18
    69d0:	0f 90       	pop	r0
    69d2:	0b be       	out	0x3b, r0	; 59
    69d4:	0f 90       	pop	r0
    69d6:	0f be       	out	0x3f, r0	; 63
    69d8:	0f 90       	pop	r0
    69da:	1f 90       	pop	r1
    69dc:	18 95       	reti

000069de <clock_gettime>:
///
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id, struct timespec *ts)
{
    69de:	0f 93       	push	r16
    69e0:	1f 93       	push	r17
    69e2:	cf 93       	push	r28
    69e4:	df 93       	push	r29
    69e6:	fb 01       	movw	r30, r22
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;

    // disable interrupts
    cli();
    69e8:	f8 94       	cli

    count1 = TCNT1;
    69ea:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    69ee:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    ts->tv_sec = __clock.tv_sec;
    69f2:	80 91 4a 19 	lds	r24, 0x194A	; 0x80194a <__clock>
    69f6:	90 91 4b 19 	lds	r25, 0x194B	; 0x80194b <__clock+0x1>
    69fa:	a0 91 4c 19 	lds	r26, 0x194C	; 0x80194c <__clock+0x2>
    69fe:	b0 91 4d 19 	lds	r27, 0x194D	; 0x80194d <__clock+0x3>
    6a02:	80 83       	st	Z, r24
    6a04:	91 83       	std	Z+1, r25	; 0x01
    6a06:	a2 83       	std	Z+2, r26	; 0x02
    6a08:	b3 83       	std	Z+3, r27	; 0x03
    ts->tv_nsec = __clock.tv_nsec;
    6a0a:	80 91 4e 19 	lds	r24, 0x194E	; 0x80194e <__clock+0x4>
    6a0e:	90 91 4f 19 	lds	r25, 0x194F	; 0x80194f <__clock+0x5>
    6a12:	a0 91 50 19 	lds	r26, 0x1950	; 0x801950 <__clock+0x6>
    6a16:	b0 91 51 19 	lds	r27, 0x1951	; 0x801951 <__clock+0x7>
    6a1a:	84 83       	std	Z+4, r24	; 0x04
    6a1c:	95 83       	std	Z+5, r25	; 0x05
    6a1e:	a6 83       	std	Z+6, r26	; 0x06
    6a20:	b7 83       	std	Z+7, r27	; 0x07

    count2 = TCNT1;
    6a22:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    6a26:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    if( TIFR1 & (1<<OCF1A) )
    6a2a:	b1 9b       	sbis	0x16, 1	; 22
    6a2c:	03 c0       	rjmp	.+6      	; 0x6a34 <clock_gettime+0x56>
int clock_gettime(clockid_t clk_id, struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    6a2e:	c0 e0       	ldi	r28, 0x00	; 0
    6a30:	d0 e0       	ldi	r29, 0x00	; 0
    6a32:	3f c0       	rjmp	.+126    	; 0x6ab2 <clock_gettime+0xd4>
    count2 = TCNT1;

    if( TIFR1 & (1<<OCF1A) )
        pendingf = 1;

    if (count2 < count1)
    6a34:	82 17       	cp	r24, r18
    6a36:	93 07       	cpc	r25, r19
    6a38:	d0 f1       	brcs	.+116    	; 0x6aae <clock_gettime+0xd0>
int clock_gettime(clockid_t clk_id, struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    6a3a:	c0 e0       	ldi	r28, 0x00	; 0
    6a3c:	d0 e0       	ldi	r29, 0x00	; 0
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id, struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    6a3e:	40 e0       	ldi	r20, 0x00	; 0
    6a40:	50 e0       	ldi	r21, 0x00	; 0
    6a42:	ba 01       	movw	r22, r20
    else
    {
        if( pendingf )
            offset = TIMER1_COUNTS_PER_TIC;       // overflow
    }
    offset += count2;
    6a44:	9a 01       	movw	r18, r20
    6a46:	ab 01       	movw	r20, r22
    6a48:	28 0f       	add	r18, r24
    6a4a:	39 1f       	adc	r19, r25
    6a4c:	41 1d       	adc	r20, r1
    6a4e:	51 1d       	adc	r21, r1

    // enable interrupts
    sei();
    6a50:	78 94       	sei

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    6a52:	a2 e3       	ldi	r26, 0x32	; 50
    6a54:	b0 e0       	ldi	r27, 0x00	; 0
    6a56:	0e 94 d3 e5 	call	0x1cba6	; 0x1cba6 <__muluhisi3>
    6a5a:	04 81       	ldd	r16, Z+4	; 0x04
    6a5c:	15 81       	ldd	r17, Z+5	; 0x05
    6a5e:	26 81       	ldd	r18, Z+6	; 0x06
    6a60:	37 81       	ldd	r19, Z+7	; 0x07
    6a62:	dc 01       	movw	r26, r24
    6a64:	cb 01       	movw	r24, r22
    6a66:	80 0f       	add	r24, r16
    6a68:	91 1f       	adc	r25, r17
    6a6a:	a2 1f       	adc	r26, r18
    6a6c:	b3 1f       	adc	r27, r19

    if (ts->tv_nsec >= 1000000000L)
    6a6e:	81 15       	cp	r24, r1
    6a70:	2a ec       	ldi	r18, 0xCA	; 202
    6a72:	92 07       	cpc	r25, r18
    6a74:	2a e9       	ldi	r18, 0x9A	; 154
    6a76:	a2 07       	cpc	r26, r18
    6a78:	2b e3       	ldi	r18, 0x3B	; 59
    6a7a:	b2 07       	cpc	r27, r18
    6a7c:	2c f4       	brge	.+10     	; 0x6a88 <clock_gettime+0xaa>
    // enable interrupts
    sei();

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    6a7e:	84 83       	std	Z+4, r24	; 0x04
    6a80:	95 83       	std	Z+5, r25	; 0x05
    6a82:	a6 83       	std	Z+6, r26	; 0x06
    6a84:	b7 83       	std	Z+7, r27	; 0x07
    6a86:	1a c0       	rjmp	.+52     	; 0x6abc <clock_gettime+0xde>

    if (ts->tv_nsec >= 1000000000L)
    {
        ts->tv_nsec -= 1000000000L;
    6a88:	9a 5c       	subi	r25, 0xCA	; 202
    6a8a:	aa 49       	sbci	r26, 0x9A	; 154
    6a8c:	bb 43       	sbci	r27, 0x3B	; 59
    6a8e:	84 83       	std	Z+4, r24	; 0x04
    6a90:	95 83       	std	Z+5, r25	; 0x05
    6a92:	a6 83       	std	Z+6, r26	; 0x06
    6a94:	b7 83       	std	Z+7, r27	; 0x07
        ts->tv_sec++;
    6a96:	80 81       	ld	r24, Z
    6a98:	91 81       	ldd	r25, Z+1	; 0x01
    6a9a:	a2 81       	ldd	r26, Z+2	; 0x02
    6a9c:	b3 81       	ldd	r27, Z+3	; 0x03
    6a9e:	01 96       	adiw	r24, 0x01	; 1
    6aa0:	a1 1d       	adc	r26, r1
    6aa2:	b1 1d       	adc	r27, r1
    6aa4:	80 83       	st	Z, r24
    6aa6:	91 83       	std	Z+1, r25	; 0x01
    6aa8:	a2 83       	std	Z+2, r26	; 0x02
    6aaa:	b3 83       	std	Z+3, r27	; 0x03
    }
    return(errorf);
    6aac:	07 c0       	rjmp	.+14     	; 0x6abc <clock_gettime+0xde>

    if (count2 < count1)
    {
///  note: counter2 < count1 implies ISR flag must be set
        if( !pendingf )
            errorf = -1;    // counter overflow and NO pending is an error!
    6aae:	cf ef       	ldi	r28, 0xFF	; 255
    6ab0:	df ef       	ldi	r29, 0xFF	; 255
        offset = TIMER1_COUNTS_PER_TIC;           // overflow
    6ab2:	40 e2       	ldi	r20, 0x20	; 32
    6ab4:	5e e4       	ldi	r21, 0x4E	; 78
    6ab6:	60 e0       	ldi	r22, 0x00	; 0
    6ab8:	70 e0       	ldi	r23, 0x00	; 0
    6aba:	c4 cf       	rjmp	.-120    	; 0x6a44 <clock_gettime+0x66>
    {
        ts->tv_nsec -= 1000000000L;
        ts->tv_sec++;
    }
    return(errorf);
}
    6abc:	ce 01       	movw	r24, r28
    6abe:	df 91       	pop	r29
    6ac0:	cf 91       	pop	r28
    6ac2:	1f 91       	pop	r17
    6ac4:	0f 91       	pop	r16
    6ac6:	08 95       	ret

00006ac8 <clock_task>:
void disable_timers()
{
    if(timers_configured && timers_enabled)
    {
        disable_system_task();
        timers_enabled = 0;
    6ac8:	80 91 4e 19 	lds	r24, 0x194E	; 0x80194e <__clock+0x4>
    6acc:	90 91 4f 19 	lds	r25, 0x194F	; 0x80194f <__clock+0x5>
    6ad0:	a0 91 50 19 	lds	r26, 0x1950	; 0x801950 <__clock+0x6>
    6ad4:	b0 91 51 19 	lds	r27, 0x1951	; 0x801951 <__clock+0x7>
    6ad8:	80 5c       	subi	r24, 0xC0	; 192
    6ada:	9d 4b       	sbci	r25, 0xBD	; 189
    6adc:	a0 4f       	sbci	r26, 0xF0	; 240
    6ade:	bf 4f       	sbci	r27, 0xFF	; 255
    6ae0:	80 93 4e 19 	sts	0x194E, r24	; 0x80194e <__clock+0x4>
    6ae4:	90 93 4f 19 	sts	0x194F, r25	; 0x80194f <__clock+0x5>
    6ae8:	a0 93 50 19 	sts	0x1950, r26	; 0x801950 <__clock+0x6>
    6aec:	b0 93 51 19 	sts	0x1951, r27	; 0x801951 <__clock+0x7>
    6af0:	80 91 4e 19 	lds	r24, 0x194E	; 0x80194e <__clock+0x4>
    6af4:	90 91 4f 19 	lds	r25, 0x194F	; 0x80194f <__clock+0x5>
    6af8:	a0 91 50 19 	lds	r26, 0x1950	; 0x801950 <__clock+0x6>
    6afc:	b0 91 51 19 	lds	r27, 0x1951	; 0x801951 <__clock+0x7>
    6b00:	81 15       	cp	r24, r1
    6b02:	9a 4c       	sbci	r25, 0xCA	; 202
    6b04:	aa 49       	sbci	r26, 0x9A	; 154
    6b06:	bb 43       	sbci	r27, 0x3B	; 59
    6b08:	dc f0       	brlt	.+54     	; 0x6b40 <clock_task+0x78>
    6b0a:	80 91 4a 19 	lds	r24, 0x194A	; 0x80194a <__clock>
    6b0e:	90 91 4b 19 	lds	r25, 0x194B	; 0x80194b <__clock+0x1>
    6b12:	a0 91 4c 19 	lds	r26, 0x194C	; 0x80194c <__clock+0x2>
    6b16:	b0 91 4d 19 	lds	r27, 0x194D	; 0x80194d <__clock+0x3>
    6b1a:	01 96       	adiw	r24, 0x01	; 1
    6b1c:	a1 1d       	adc	r26, r1
    6b1e:	b1 1d       	adc	r27, r1
    6b20:	80 93 4a 19 	sts	0x194A, r24	; 0x80194a <__clock>
    6b24:	90 93 4b 19 	sts	0x194B, r25	; 0x80194b <__clock+0x1>
    6b28:	a0 93 4c 19 	sts	0x194C, r26	; 0x80194c <__clock+0x2>
    6b2c:	b0 93 4d 19 	sts	0x194D, r27	; 0x80194d <__clock+0x3>
    6b30:	10 92 4e 19 	sts	0x194E, r1	; 0x80194e <__clock+0x4>
    6b34:	10 92 4f 19 	sts	0x194F, r1	; 0x80194f <__clock+0x5>
    6b38:	10 92 50 19 	sts	0x1950, r1	; 0x801950 <__clock+0x6>
    6b3c:	10 92 51 19 	sts	0x1951, r1	; 0x801951 <__clock+0x7>
    6b40:	08 95       	ret

00006b42 <clock_settime.part.2>:
    6b42:	fc 01       	movw	r30, r24
    6b44:	84 81       	ldd	r24, Z+4	; 0x04
    6b46:	95 81       	ldd	r25, Z+5	; 0x05
    6b48:	a6 81       	ldd	r26, Z+6	; 0x06
    6b4a:	b7 81       	ldd	r27, Z+7	; 0x07
    6b4c:	80 93 4e 19 	sts	0x194E, r24	; 0x80194e <__clock+0x4>
    6b50:	90 93 4f 19 	sts	0x194F, r25	; 0x80194f <__clock+0x5>
    6b54:	a0 93 50 19 	sts	0x1950, r26	; 0x801950 <__clock+0x6>
    6b58:	b0 93 51 19 	sts	0x1951, r27	; 0x801951 <__clock+0x7>
    6b5c:	80 81       	ld	r24, Z
    6b5e:	91 81       	ldd	r25, Z+1	; 0x01
    6b60:	a2 81       	ldd	r26, Z+2	; 0x02
    6b62:	b3 81       	ldd	r27, Z+3	; 0x03
    6b64:	80 93 4a 19 	sts	0x194A, r24	; 0x80194a <__clock>
    6b68:	90 93 4b 19 	sts	0x194B, r25	; 0x80194b <__clock+0x1>
    6b6c:	a0 93 4c 19 	sts	0x194C, r26	; 0x80194c <__clock+0x2>
    6b70:	b0 93 4d 19 	sts	0x194D, r27	; 0x80194d <__clock+0x3>
    6b74:	80 91 4e 19 	lds	r24, 0x194E	; 0x80194e <__clock+0x4>
    6b78:	90 91 4f 19 	lds	r25, 0x194F	; 0x80194f <__clock+0x5>
    6b7c:	a0 91 50 19 	lds	r26, 0x1950	; 0x801950 <__clock+0x6>
    6b80:	b0 91 51 19 	lds	r27, 0x1951	; 0x801951 <__clock+0x7>
    6b84:	44 81       	ldd	r20, Z+4	; 0x04
    6b86:	55 81       	ldd	r21, Z+5	; 0x05
    6b88:	66 81       	ldd	r22, Z+6	; 0x06
    6b8a:	77 81       	ldd	r23, Z+7	; 0x07
    6b8c:	48 17       	cp	r20, r24
    6b8e:	59 07       	cpc	r21, r25
    6b90:	6a 07       	cpc	r22, r26
    6b92:	7b 07       	cpc	r23, r27
    6b94:	b9 f6       	brne	.-82     	; 0x6b44 <clock_settime.part.2+0x2>
    6b96:	80 91 4a 19 	lds	r24, 0x194A	; 0x80194a <__clock>
    6b9a:	90 91 4b 19 	lds	r25, 0x194B	; 0x80194b <__clock+0x1>
    6b9e:	a0 91 4c 19 	lds	r26, 0x194C	; 0x80194c <__clock+0x2>
    6ba2:	b0 91 4d 19 	lds	r27, 0x194D	; 0x80194d <__clock+0x3>
    6ba6:	40 81       	ld	r20, Z
    6ba8:	51 81       	ldd	r21, Z+1	; 0x01
    6baa:	62 81       	ldd	r22, Z+2	; 0x02
    6bac:	73 81       	ldd	r23, Z+3	; 0x03
    6bae:	48 17       	cp	r20, r24
    6bb0:	59 07       	cpc	r21, r25
    6bb2:	6a 07       	cpc	r22, r26
    6bb4:	7b 07       	cpc	r23, r27
    6bb6:	31 f6       	brne	.-116    	; 0x6b44 <clock_settime.part.2+0x2>
    6bb8:	80 e0       	ldi	r24, 0x00	; 0
    6bba:	90 e0       	ldi	r25, 0x00	; 0
    6bbc:	08 95       	ret

00006bbe <set_timers>:
    6bbe:	00 97       	sbiw	r24, 0x00	; 0
    6bc0:	79 f1       	breq	.+94     	; 0x6c20 <set_timers+0x62>
    6bc2:	e2 e5       	ldi	r30, 0x52	; 82
    6bc4:	f9 e1       	ldi	r31, 0x19	; 25
    6bc6:	4f ef       	ldi	r20, 0xFF	; 255
    6bc8:	5f ef       	ldi	r21, 0xFF	; 255
    6bca:	20 e0       	ldi	r18, 0x00	; 0
    6bcc:	30 e0       	ldi	r19, 0x00	; 0
    6bce:	60 81       	ld	r22, Z
    6bd0:	71 81       	ldd	r23, Z+1	; 0x01
    6bd2:	86 17       	cp	r24, r22
    6bd4:	97 07       	cpc	r25, r23
    6bd6:	79 f0       	breq	.+30     	; 0x6bf6 <set_timers+0x38>
    6bd8:	67 2b       	or	r22, r23
    6bda:	71 f4       	brne	.+28     	; 0x6bf8 <set_timers+0x3a>
    6bdc:	f9 01       	movw	r30, r18
    6bde:	ee 0f       	add	r30, r30
    6be0:	ff 1f       	adc	r31, r31
    6be2:	e2 0f       	add	r30, r18
    6be4:	f3 1f       	adc	r31, r19
    6be6:	ee 5a       	subi	r30, 0xAE	; 174
    6be8:	f6 4e       	sbci	r31, 0xE6	; 230
    6bea:	91 83       	std	Z+1, r25	; 0x01
    6bec:	80 83       	st	Z, r24
    6bee:	81 e0       	ldi	r24, 0x01	; 1
    6bf0:	82 83       	std	Z+2, r24	; 0x02
    6bf2:	c9 01       	movw	r24, r18
    6bf4:	08 95       	ret
    6bf6:	a9 01       	movw	r20, r18
    6bf8:	2f 5f       	subi	r18, 0xFF	; 255
    6bfa:	3f 4f       	sbci	r19, 0xFF	; 255
    6bfc:	33 96       	adiw	r30, 0x03	; 3
    6bfe:	28 30       	cpi	r18, 0x08	; 8
    6c00:	31 05       	cpc	r19, r1
    6c02:	29 f7       	brne	.-54     	; 0x6bce <set_timers+0x10>
    6c04:	4f 3f       	cpi	r20, 0xFF	; 255
    6c06:	8f ef       	ldi	r24, 0xFF	; 255
    6c08:	58 07       	cpc	r21, r24
    6c0a:	69 f4       	brne	.+26     	; 0x6c26 <set_timers+0x68>
    6c0c:	8c eb       	ldi	r24, 0xBC	; 188
    6c0e:	95 e0       	ldi	r25, 0x05	; 5
    6c10:	1f 92       	push	r1
    6c12:	9f 93       	push	r25
    6c14:	8f 93       	push	r24
    6c16:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    6c1a:	0f 90       	pop	r0
    6c1c:	0f 90       	pop	r0
    6c1e:	0f 90       	pop	r0
    6c20:	8f ef       	ldi	r24, 0xFF	; 255
    6c22:	9f ef       	ldi	r25, 0xFF	; 255
    6c24:	08 95       	ret
    6c26:	ca 01       	movw	r24, r20
    6c28:	08 95       	ret

00006c2a <delete_all_timers>:
    6c2a:	e2 e5       	ldi	r30, 0x52	; 82
    6c2c:	f9 e1       	ldi	r31, 0x19	; 25
    6c2e:	12 82       	std	Z+2, r1	; 0x02
    6c30:	11 82       	std	Z+1, r1	; 0x01
    6c32:	10 82       	st	Z, r1
    6c34:	33 96       	adiw	r30, 0x03	; 3
    6c36:	89 e1       	ldi	r24, 0x19	; 25
    6c38:	ea 36       	cpi	r30, 0x6A	; 106
    6c3a:	f8 07       	cpc	r31, r24
    6c3c:	c1 f7       	brne	.-16     	; 0x6c2e <delete_all_timers+0x4>
    6c3e:	08 95       	ret

00006c40 <subtract_timespec>:
    6c40:	0f 93       	push	r16
    6c42:	1f 93       	push	r17
    6c44:	cf 93       	push	r28
    6c46:	df 93       	push	r29
    6c48:	fc 01       	movw	r30, r24
    6c4a:	84 81       	ldd	r24, Z+4	; 0x04
    6c4c:	95 81       	ldd	r25, Z+5	; 0x05
    6c4e:	a6 81       	ldd	r26, Z+6	; 0x06
    6c50:	b7 81       	ldd	r27, Z+7	; 0x07
    6c52:	eb 01       	movw	r28, r22
    6c54:	0c 81       	ldd	r16, Y+4	; 0x04
    6c56:	1d 81       	ldd	r17, Y+5	; 0x05
    6c58:	2e 81       	ldd	r18, Y+6	; 0x06
    6c5a:	3f 81       	ldd	r19, Y+7	; 0x07
    6c5c:	80 1b       	sub	r24, r16
    6c5e:	91 0b       	sbc	r25, r17
    6c60:	a2 0b       	sbc	r26, r18
    6c62:	b3 0b       	sbc	r27, r19
    6c64:	b7 fd       	sbrc	r27, 7
    6c66:	05 c0       	rjmp	.+10     	; 0x6c72 <subtract_timespec+0x32>
    6c68:	84 83       	std	Z+4, r24	; 0x04
    6c6a:	95 83       	std	Z+5, r25	; 0x05
    6c6c:	a6 83       	std	Z+6, r26	; 0x06
    6c6e:	b7 83       	std	Z+7, r27	; 0x07
    6c70:	12 c0       	rjmp	.+36     	; 0x6c96 <subtract_timespec+0x56>
    6c72:	96 53       	subi	r25, 0x36	; 54
    6c74:	a5 46       	sbci	r26, 0x65	; 101
    6c76:	b4 4c       	sbci	r27, 0xC4	; 196
    6c78:	84 83       	std	Z+4, r24	; 0x04
    6c7a:	95 83       	std	Z+5, r25	; 0x05
    6c7c:	a6 83       	std	Z+6, r26	; 0x06
    6c7e:	b7 83       	std	Z+7, r27	; 0x07
    6c80:	80 81       	ld	r24, Z
    6c82:	91 81       	ldd	r25, Z+1	; 0x01
    6c84:	a2 81       	ldd	r26, Z+2	; 0x02
    6c86:	b3 81       	ldd	r27, Z+3	; 0x03
    6c88:	01 97       	sbiw	r24, 0x01	; 1
    6c8a:	a1 09       	sbc	r26, r1
    6c8c:	b1 09       	sbc	r27, r1
    6c8e:	80 83       	st	Z, r24
    6c90:	91 83       	std	Z+1, r25	; 0x01
    6c92:	a2 83       	std	Z+2, r26	; 0x02
    6c94:	b3 83       	std	Z+3, r27	; 0x03
    6c96:	80 81       	ld	r24, Z
    6c98:	91 81       	ldd	r25, Z+1	; 0x01
    6c9a:	a2 81       	ldd	r26, Z+2	; 0x02
    6c9c:	b3 81       	ldd	r27, Z+3	; 0x03
    6c9e:	eb 01       	movw	r28, r22
    6ca0:	48 81       	ld	r20, Y
    6ca2:	59 81       	ldd	r21, Y+1	; 0x01
    6ca4:	6a 81       	ldd	r22, Y+2	; 0x02
    6ca6:	7b 81       	ldd	r23, Y+3	; 0x03
    6ca8:	84 1b       	sub	r24, r20
    6caa:	95 0b       	sbc	r25, r21
    6cac:	a6 0b       	sbc	r26, r22
    6cae:	b7 0b       	sbc	r27, r23
    6cb0:	80 83       	st	Z, r24
    6cb2:	91 83       	std	Z+1, r25	; 0x01
    6cb4:	a2 83       	std	Z+2, r26	; 0x02
    6cb6:	b3 83       	std	Z+3, r27	; 0x03
    6cb8:	df 91       	pop	r29
    6cba:	cf 91       	pop	r28
    6cbc:	1f 91       	pop	r17
    6cbe:	0f 91       	pop	r16
    6cc0:	08 95       	ret

00006cc2 <ts_to_str>:
    6cc2:	fc 01       	movw	r30, r24
    6cc4:	87 81       	ldd	r24, Z+7	; 0x07
    6cc6:	8f 93       	push	r24
    6cc8:	86 81       	ldd	r24, Z+6	; 0x06
    6cca:	8f 93       	push	r24
    6ccc:	85 81       	ldd	r24, Z+5	; 0x05
    6cce:	8f 93       	push	r24
    6cd0:	84 81       	ldd	r24, Z+4	; 0x04
    6cd2:	8f 93       	push	r24
    6cd4:	83 81       	ldd	r24, Z+3	; 0x03
    6cd6:	8f 93       	push	r24
    6cd8:	82 81       	ldd	r24, Z+2	; 0x02
    6cda:	8f 93       	push	r24
    6cdc:	81 81       	ldd	r24, Z+1	; 0x01
    6cde:	8f 93       	push	r24
    6ce0:	80 81       	ld	r24, Z
    6ce2:	8f 93       	push	r24
    6ce4:	82 eb       	ldi	r24, 0xB2	; 178
    6ce6:	95 e0       	ldi	r25, 0x05	; 5
    6ce8:	1f 92       	push	r1
    6cea:	9f 93       	push	r25
    6cec:	8f 93       	push	r24
    6cee:	1f 92       	push	r1
    6cf0:	8f e1       	ldi	r24, 0x1F	; 31
    6cf2:	8f 93       	push	r24
    6cf4:	8a e5       	ldi	r24, 0x5A	; 90
    6cf6:	97 e1       	ldi	r25, 0x17	; 23
    6cf8:	9f 93       	push	r25
    6cfa:	8f 93       	push	r24
    6cfc:	0e 94 36 47 	call	0x8e6c	; 0x8e6c <snprintf_P>
    6d00:	8d b7       	in	r24, 0x3d	; 61
    6d02:	9e b7       	in	r25, 0x3e	; 62
    6d04:	0f 96       	adiw	r24, 0x0f	; 15
    6d06:	0f b6       	in	r0, 0x3f	; 63
    6d08:	f8 94       	cli
    6d0a:	9e bf       	out	0x3e, r25	; 62
    6d0c:	0f be       	out	0x3f, r0	; 63
    6d0e:	8d bf       	out	0x3d, r24	; 61
    6d10:	8a e5       	ldi	r24, 0x5A	; 90
    6d12:	97 e1       	ldi	r25, 0x17	; 23
    6d14:	08 95       	ret

00006d16 <clock_elapsed_begin>:
    6d16:	62 e5       	ldi	r22, 0x52	; 82
    6d18:	77 e1       	ldi	r23, 0x17	; 23
    6d1a:	80 e0       	ldi	r24, 0x00	; 0
    6d1c:	90 e0       	ldi	r25, 0x00	; 0
    6d1e:	5f ce       	rjmp	.-834    	; 0x69de <clock_gettime>
    6d20:	08 95       	ret

00006d22 <clock_elapsed_end>:
    6d22:	a8 e0       	ldi	r26, 0x08	; 8
    6d24:	b0 e0       	ldi	r27, 0x00	; 0
    6d26:	e7 e9       	ldi	r30, 0x97	; 151
    6d28:	f6 e3       	ldi	r31, 0x36	; 54
    6d2a:	0c 94 01 e6 	jmp	0x1cc02	; 0x1cc02 <__prologue_saves__+0x1c>
    6d2e:	8c 01       	movw	r16, r24
    6d30:	be 01       	movw	r22, r28
    6d32:	6f 5f       	subi	r22, 0xFF	; 255
    6d34:	7f 4f       	sbci	r23, 0xFF	; 255
    6d36:	80 e0       	ldi	r24, 0x00	; 0
    6d38:	90 e0       	ldi	r25, 0x00	; 0
    6d3a:	51 de       	rcall	.-862    	; 0x69de <clock_gettime>
    6d3c:	62 e5       	ldi	r22, 0x52	; 82
    6d3e:	77 e1       	ldi	r23, 0x17	; 23
    6d40:	ce 01       	movw	r24, r28
    6d42:	01 96       	adiw	r24, 0x01	; 1
    6d44:	7d df       	rcall	.-262    	; 0x6c40 <subtract_timespec>
    6d46:	01 15       	cp	r16, r1
    6d48:	11 05       	cpc	r17, r1
    6d4a:	c1 f0       	breq	.+48     	; 0x6d7c <clock_elapsed_end+0x5a>
    6d4c:	f8 01       	movw	r30, r16
    6d4e:	80 81       	ld	r24, Z
    6d50:	88 23       	and	r24, r24
    6d52:	a1 f0       	breq	.+40     	; 0x6d7c <clock_elapsed_end+0x5a>
    6d54:	ce 01       	movw	r24, r28
    6d56:	01 96       	adiw	r24, 0x01	; 1
    6d58:	b4 df       	rcall	.-152    	; 0x6cc2 <ts_to_str>
    6d5a:	9f 93       	push	r25
    6d5c:	8f 93       	push	r24
    6d5e:	1f 93       	push	r17
    6d60:	0f 93       	push	r16
    6d62:	85 e9       	ldi	r24, 0x95	; 149
    6d64:	95 e0       	ldi	r25, 0x05	; 5
    6d66:	1f 92       	push	r1
    6d68:	9f 93       	push	r25
    6d6a:	8f 93       	push	r24
    6d6c:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    6d70:	0f b6       	in	r0, 0x3f	; 63
    6d72:	f8 94       	cli
    6d74:	de bf       	out	0x3e, r29	; 62
    6d76:	0f be       	out	0x3f, r0	; 63
    6d78:	cd bf       	out	0x3d, r28	; 61
    6d7a:	11 c0       	rjmp	.+34     	; 0x6d9e <clock_elapsed_end+0x7c>
    6d7c:	ce 01       	movw	r24, r28
    6d7e:	01 96       	adiw	r24, 0x01	; 1
    6d80:	a0 df       	rcall	.-192    	; 0x6cc2 <ts_to_str>
    6d82:	9f 93       	push	r25
    6d84:	8f 93       	push	r24
    6d86:	8a e8       	ldi	r24, 0x8A	; 138
    6d88:	95 e0       	ldi	r25, 0x05	; 5
    6d8a:	1f 92       	push	r1
    6d8c:	9f 93       	push	r25
    6d8e:	8f 93       	push	r24
    6d90:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    6d94:	0f 90       	pop	r0
    6d96:	0f 90       	pop	r0
    6d98:	0f 90       	pop	r0
    6d9a:	0f 90       	pop	r0
    6d9c:	0f 90       	pop	r0
    6d9e:	28 96       	adiw	r28, 0x08	; 8
    6da0:	e4 e0       	ldi	r30, 0x04	; 4
    6da2:	0c 94 1d e6 	jmp	0x1cc3a	; 0x1cc3a <__epilogue_restores__+0x1c>

00006da6 <clock_clear>:
    6da6:	a8 e0       	ldi	r26, 0x08	; 8
    6da8:	b0 e0       	ldi	r27, 0x00	; 0
    6daa:	e9 ed       	ldi	r30, 0xD9	; 217
    6dac:	f6 e3       	ldi	r31, 0x36	; 54
    6dae:	0c 94 03 e6 	jmp	0x1cc06	; 0x1cc06 <__prologue_saves__+0x20>
    6db2:	1d 82       	std	Y+5, r1	; 0x05
    6db4:	1e 82       	std	Y+6, r1	; 0x06
    6db6:	1f 82       	std	Y+7, r1	; 0x07
    6db8:	18 86       	std	Y+8, r1	; 0x08
    6dba:	19 82       	std	Y+1, r1	; 0x01
    6dbc:	1a 82       	std	Y+2, r1	; 0x02
    6dbe:	1b 82       	std	Y+3, r1	; 0x03
    6dc0:	1c 82       	std	Y+4, r1	; 0x04
    6dc2:	ce 01       	movw	r24, r28
    6dc4:	01 96       	adiw	r24, 0x01	; 1
    6dc6:	bd de       	rcall	.-646    	; 0x6b42 <clock_settime.part.2>
    6dc8:	ea e6       	ldi	r30, 0x6A	; 106
    6dca:	f9 e1       	ldi	r31, 0x19	; 25
    6dcc:	11 82       	std	Z+1, r1	; 0x01
    6dce:	10 82       	st	Z, r1
    6dd0:	13 82       	std	Z+3, r1	; 0x03
    6dd2:	12 82       	std	Z+2, r1	; 0x02
    6dd4:	28 96       	adiw	r28, 0x08	; 8
    6dd6:	e2 e0       	ldi	r30, 0x02	; 2
    6dd8:	0c 94 1f e6 	jmp	0x1cc3e	; 0x1cc3e <__epilogue_restores__+0x20>

00006ddc <enable_timers>:
///
/// @return  void
MEMSPACE
void enable_timers()
{
    if(timers_configured && !timers_enabled)
    6ddc:	80 91 7a 17 	lds	r24, 0x177A	; 0x80177a <timers_configured>
    6de0:	90 91 7b 17 	lds	r25, 0x177B	; 0x80177b <timers_configured+0x1>
    6de4:	89 2b       	or	r24, r25
    6de6:	69 f0       	breq	.+26     	; 0x6e02 <enable_timers+0x26>
    6de8:	80 91 7c 17 	lds	r24, 0x177C	; 0x80177c <timers_enabled>
    6dec:	90 91 7d 17 	lds	r25, 0x177D	; 0x80177d <timers_enabled+0x1>
    6df0:	89 2b       	or	r24, r25
    {
        enable_system_task();
    6df2:	39 f4       	brne	.+14     	; 0x6e02 <enable_timers+0x26>
        timers_enabled = 1;
    6df4:	b8 dd       	rcall	.-1168   	; 0x6966 <enable_system_task>
    6df6:	81 e0       	ldi	r24, 0x01	; 1
    6df8:	90 e0       	ldi	r25, 0x00	; 0
    6dfa:	90 93 7d 17 	sts	0x177D, r25	; 0x80177d <timers_enabled+0x1>
    6dfe:	80 93 7c 17 	sts	0x177C, r24	; 0x80177c <timers_enabled>
    6e02:	08 95       	ret

00006e04 <execute_timers>:
/// @brief  Execute all user timers at SYSTEM_HZ rate.
///  Called by system task
///
/// @return  void
void execute_timers()
{
    6e04:	cf 93       	push	r28
    6e06:	df 93       	push	r29
    6e08:	c2 e5       	ldi	r28, 0x52	; 82
    6e0a:	d9 e1       	ldi	r29, 0x19	; 25
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
    6e0c:	8a 81       	ldd	r24, Y+2	; 0x02
    6e0e:	88 23       	and	r24, r24
    6e10:	29 f0       	breq	.+10     	; 0x6e1c <execute_timers+0x18>
    6e12:	e8 81       	ld	r30, Y
    6e14:	f9 81       	ldd	r31, Y+1	; 0x01
    6e16:	30 97       	sbiw	r30, 0x00	; 0
    6e18:	09 f0       	breq	.+2      	; 0x6e1c <execute_timers+0x18>
            (*timer_irq[i].user_timer_handler)();
    6e1a:	09 95       	icall
    6e1c:	23 96       	adiw	r28, 0x03	; 3
/// @return  void
void execute_timers()
{
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    6e1e:	89 e1       	ldi	r24, 0x19	; 25
    6e20:	ca 36       	cpi	r28, 0x6A	; 106
    6e22:	d8 07       	cpc	r29, r24
    6e24:	99 f7       	brne	.-26     	; 0x6e0c <execute_timers+0x8>
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
            (*timer_irq[i].user_timer_handler)();
    }
}
    6e26:	df 91       	pop	r29
    6e28:	cf 91       	pop	r28
    6e2a:	08 95       	ret

00006e2c <init_timers>:
//
/// @return  void
MEMSPACE
void init_timers()
{
    printf("Timers init called\n");
    6e2c:	86 e7       	ldi	r24, 0x76	; 118
    6e2e:	95 e0       	ldi	r25, 0x05	; 5
    6e30:	1f 92       	push	r1
    6e32:	9f 93       	push	r25
    6e34:	8f 93       	push	r24
    6e36:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>

    if(!timers_configured)
    6e3a:	0f 90       	pop	r0
    6e3c:	0f 90       	pop	r0
    6e3e:	0f 90       	pop	r0
    6e40:	80 91 7a 17 	lds	r24, 0x177A	; 0x80177a <timers_configured>
    6e44:	90 91 7b 17 	lds	r25, 0x177B	; 0x80177b <timers_configured+0x1>
    6e48:	89 2b       	or	r24, r25
    {
        install_timers_isr();
    6e4a:	a9 f4       	brne	.+42     	; 0x6e76 <init_timers+0x4a>
        timers_configured = 1;
    6e4c:	8e dd       	rcall	.-1252   	; 0x696a <install_timers_isr>
    6e4e:	81 e0       	ldi	r24, 0x01	; 1
    6e50:	90 e0       	ldi	r25, 0x00	; 0
    6e52:	90 93 7b 17 	sts	0x177B, r25	; 0x80177b <timers_configured+0x1>
    6e56:	80 93 7a 17 	sts	0x177A, r24	; 0x80177a <timers_configured>
        timers_enabled = 0;
    6e5a:	10 92 7d 17 	sts	0x177D, r1	; 0x80177d <timers_enabled+0x1>
    6e5e:	10 92 7c 17 	sts	0x177C, r1	; 0x80177c <timers_enabled>
        printf("Timers configured\n");
    6e62:	83 e6       	ldi	r24, 0x63	; 99
    6e64:	95 e0       	ldi	r25, 0x05	; 5
    6e66:	1f 92       	push	r1
    6e68:	9f 93       	push	r25
    6e6a:	8f 93       	push	r24
    6e6c:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    }

    delete_all_timers();
    6e70:	0f 90       	pop	r0

    clock_clear();
    6e72:	0f 90       	pop	r0
    6e74:	0f 90       	pop	r0
    printf("Clock Init\n");
    6e76:	d9 de       	rcall	.-590    	; 0x6c2a <delete_all_timers>
    6e78:	96 df       	rcall	.-212    	; 0x6da6 <clock_clear>
    6e7a:	87 e5       	ldi	r24, 0x57	; 87
    6e7c:	95 e0       	ldi	r25, 0x05	; 5
    6e7e:	1f 92       	push	r1
    6e80:	9f 93       	push	r25
    6e82:	8f 93       	push	r24

///  See time.c
    if(set_timers(clock_task,1) == -1)
    6e84:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    6e88:	61 e0       	ldi	r22, 0x01	; 1
    6e8a:	70 e0       	ldi	r23, 0x00	; 0
    6e8c:	84 e6       	ldi	r24, 0x64	; 100
    6e8e:	95 e3       	ldi	r25, 0x35	; 53
    6e90:	96 de       	rcall	.-724    	; 0x6bbe <set_timers>
    6e92:	0f 90       	pop	r0
    6e94:	0f 90       	pop	r0
    6e96:	0f 90       	pop	r0
        printf("Clock task init failed\n");
    6e98:	01 96       	adiw	r24, 0x01	; 1
    6e9a:	51 f4       	brne	.+20     	; 0x6eb0 <init_timers+0x84>
    6e9c:	8f e3       	ldi	r24, 0x3F	; 63
    6e9e:	95 e0       	ldi	r25, 0x05	; 5
    6ea0:	1f 92       	push	r1
    6ea2:	9f 93       	push	r25
    6ea4:	8f 93       	push	r24
    6ea6:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    6eaa:	0f 90       	pop	r0
    printf("Clock Installed\n");
    6eac:	0f 90       	pop	r0
    6eae:	0f 90       	pop	r0
    6eb0:	8e e2       	ldi	r24, 0x2E	; 46
    6eb2:	95 e0       	ldi	r25, 0x05	; 5
    6eb4:	1f 92       	push	r1
    6eb6:	9f 93       	push	r25

    enable_timers();
    6eb8:	8f 93       	push	r24
    6eba:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>

    printf("Timers enabled\n");
    6ebe:	8e df       	rcall	.-228    	; 0x6ddc <enable_timers>
    6ec0:	8e e1       	ldi	r24, 0x1E	; 30
    6ec2:	95 e0       	ldi	r25, 0x05	; 5
    6ec4:	1f 92       	push	r1
    6ec6:	9f 93       	push	r25
    6ec8:	8f 93       	push	r24
}
    6eca:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    6ece:	0f 90       	pop	r0
    6ed0:	0f 90       	pop	r0
    6ed2:	0f 90       	pop	r0
    6ed4:	0f 90       	pop	r0
    6ed6:	0f 90       	pop	r0
    6ed8:	0f 90       	pop	r0
    6eda:	08 95       	ret

00006edc <clock_getres>:
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_getres(clockid_t clk_id, struct timespec *res)
{
    res->tv_sec = 0;
    6edc:	fb 01       	movw	r30, r22
    6ede:	10 82       	st	Z, r1
    6ee0:	11 82       	std	Z+1, r1	; 0x01
    6ee2:	12 82       	std	Z+2, r1	; 0x02
    6ee4:	13 82       	std	Z+3, r1	; 0x03
    res->tv_nsec = SYSTEM_TASK_TIC_NS;
    6ee6:	80 e4       	ldi	r24, 0x40	; 64
    6ee8:	92 e4       	ldi	r25, 0x42	; 66
    6eea:	af e0       	ldi	r26, 0x0F	; 15
    6eec:	b0 e0       	ldi	r27, 0x00	; 0
    6eee:	84 83       	std	Z+4, r24	; 0x04
    6ef0:	95 83       	std	Z+5, r25	; 0x05
    6ef2:	a6 83       	std	Z+6, r26	; 0x06
    6ef4:	b7 83       	std	Z+7, r27	; 0x07
    return(0);
}
    6ef6:	80 e0       	ldi	r24, 0x00	; 0
    6ef8:	90 e0       	ldi	r25, 0x00	; 0
    6efa:	08 95       	ret

00006efc <clock_settime>:
///
/// @return 0.
MEMSPACE
int clock_settime(clockid_t clk_id, const struct timespec *ts)
{
    if(clk_id)
    6efc:	89 2b       	or	r24, r25
    6efe:	19 f4       	brne	.+6      	; 0x6f06 <clock_settime+0xa>
    6f00:	cb 01       	movw	r24, r22
    6f02:	1f ce       	rjmp	.-962    	; 0x6b42 <clock_settime.part.2>
    6f04:	08 95       	ret
        return(-1);
    6f06:	8f ef       	ldi	r24, 0xFF	; 255
    6f08:	9f ef       	ldi	r25, 0xFF	; 255
            continue;
        break;
    }

    return(0);
}
    6f0a:	08 95       	ret

00006f0c <IS_Leap>:
void print_dst_gmt()
{
    printf("DST START       GMT: %s\n", ctime_gm(&dst.start));
    printf("DST END         GMT: %s\n", ctime_gm(&dst.end));

}
    6f0c:	9c 01       	movw	r18, r24
    6f0e:	83 70       	andi	r24, 0x03	; 3
    6f10:	99 27       	eor	r25, r25
    6f12:	00 97       	sbiw	r24, 0x00	; 0
    6f14:	69 f4       	brne	.+26     	; 0x6f30 <IS_Leap+0x24>
    6f16:	2c 36       	cpi	r18, 0x6C	; 108
    6f18:	47 e0       	ldi	r20, 0x07	; 7
    6f1a:	34 07       	cpc	r19, r20
    6f1c:	59 f0       	breq	.+22     	; 0x6f34 <IS_Leap+0x28>
    6f1e:	51 e0       	ldi	r21, 0x01	; 1
    6f20:	40 e0       	ldi	r20, 0x00	; 0
    6f22:	24 33       	cpi	r18, 0x34	; 52
    6f24:	38 40       	sbci	r19, 0x08	; 8
    6f26:	09 f4       	brne	.+2      	; 0x6f2a <IS_Leap+0x1e>
    6f28:	50 e0       	ldi	r21, 0x00	; 0
    6f2a:	85 2f       	mov	r24, r21
    6f2c:	94 2f       	mov	r25, r20
    6f2e:	08 95       	ret
    6f30:	80 e0       	ldi	r24, 0x00	; 0
    6f32:	90 e0       	ldi	r25, 0x00	; 0
    6f34:	08 95       	ret

00006f36 <tm_mon_to_ascii>:
    6f36:	8c 30       	cpi	r24, 0x0C	; 12
    6f38:	91 05       	cpc	r25, r1
    6f3a:	40 f4       	brcc	.+16     	; 0x6f4c <tm_mon_to_ascii+0x16>
    6f3c:	88 0f       	add	r24, r24
    6f3e:	99 1f       	adc	r25, r25
    6f40:	fc 01       	movw	r30, r24
    6f42:	ee 5e       	subi	r30, 0xEE	; 238
    6f44:	fe 4f       	sbci	r31, 0xFE	; 254
    6f46:	80 81       	ld	r24, Z
    6f48:	91 81       	ldd	r25, Z+1	; 0x01
    6f4a:	08 95       	ret
    6f4c:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__Month+0x18>
    6f50:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <__Month+0x19>
    6f54:	08 95       	ret

00006f56 <Days_Per_Month>:
    6f56:	cf 93       	push	r28
    6f58:	df 93       	push	r29
    6f5a:	8c 30       	cpi	r24, 0x0C	; 12
    6f5c:	91 05       	cpc	r25, r1
    6f5e:	24 f0       	brlt	.+8      	; 0x6f68 <Days_Per_Month+0x12>
    6f60:	6f 5f       	subi	r22, 0xFF	; 255
    6f62:	7f 4f       	sbci	r23, 0xFF	; 255
    6f64:	0c 97       	sbiw	r24, 0x0c	; 12
    6f66:	f9 cf       	rjmp	.-14     	; 0x6f5a <Days_Per_Month+0x4>
    6f68:	97 ff       	sbrs	r25, 7
    6f6a:	04 c0       	rjmp	.+8      	; 0x6f74 <Days_Per_Month+0x1e>
    6f6c:	61 50       	subi	r22, 0x01	; 1
    6f6e:	71 09       	sbc	r23, r1
    6f70:	0c 96       	adiw	r24, 0x0c	; 12
    6f72:	fa cf       	rjmp	.-12     	; 0x6f68 <Days_Per_Month+0x12>
    6f74:	fc 01       	movw	r30, r24
    6f76:	ee 0f       	add	r30, r30
    6f78:	ff 1f       	adc	r31, r31
    6f7a:	ed 59       	subi	r30, 0x9D	; 157
    6f7c:	fd 4f       	sbci	r31, 0xFD	; 253
    6f7e:	c0 81       	ld	r28, Z
    6f80:	d1 81       	ldd	r29, Z+1	; 0x01
    6f82:	01 97       	sbiw	r24, 0x01	; 1
    6f84:	29 f4       	brne	.+10     	; 0x6f90 <Days_Per_Month+0x3a>
    6f86:	cb 01       	movw	r24, r22
    6f88:	c1 df       	rcall	.-126    	; 0x6f0c <IS_Leap>
    6f8a:	89 2b       	or	r24, r25
    6f8c:	09 f0       	breq	.+2      	; 0x6f90 <Days_Per_Month+0x3a>
    6f8e:	21 96       	adiw	r28, 0x01	; 1
    6f90:	ce 01       	movw	r24, r28
    6f92:	df 91       	pop	r29
    6f94:	cf 91       	pop	r28
    6f96:	08 95       	ret

00006f98 <time_to_tm>:
    6f98:	a0 e0       	ldi	r26, 0x00	; 0
    6f9a:	b0 e0       	ldi	r27, 0x00	; 0
    6f9c:	e2 ed       	ldi	r30, 0xD2	; 210
    6f9e:	f7 e3       	ldi	r31, 0x37	; 55
    6fa0:	0c 94 f5 e5 	jmp	0x1cbea	; 0x1cbea <__prologue_saves__+0x4>
    6fa4:	e8 01       	movw	r28, r16
    6fa6:	e6 e1       	ldi	r30, 0x16	; 22
    6fa8:	d8 01       	movw	r26, r16
    6faa:	1d 92       	st	X+, r1
    6fac:	ea 95       	dec	r30
    6fae:	e9 f7       	brne	.-6      	; 0x6faa <time_to_tm+0x12>
    6fb0:	61 15       	cp	r22, r1
    6fb2:	bd e5       	ldi	r27, 0x5D	; 93
    6fb4:	7b 07       	cpc	r23, r27
    6fb6:	bd ef       	ldi	r27, 0xFD	; 253
    6fb8:	8b 07       	cpc	r24, r27
    6fba:	bf ef       	ldi	r27, 0xFF	; 255
    6fbc:	9b 07       	cpc	r25, r27
    6fbe:	08 f0       	brcs	.+2      	; 0x6fc2 <time_to_tm+0x2a>
    6fc0:	c0 c0       	rjmp	.+384    	; 0x7142 <time_to_tm+0x1aa>
    6fc2:	6b 01       	movw	r12, r22
    6fc4:	7c 01       	movw	r14, r24
    6fc6:	c2 1a       	sub	r12, r18
    6fc8:	d3 0a       	sbc	r13, r19
    6fca:	e4 0a       	sbc	r14, r20
    6fcc:	f5 0a       	sbc	r15, r21
    6fce:	46 01       	movw	r8, r12
    6fd0:	57 01       	movw	r10, r14
    6fd2:	e0 e8       	ldi	r30, 0x80	; 128
    6fd4:	ce 16       	cp	r12, r30
    6fd6:	ee ea       	ldi	r30, 0xAE	; 174
    6fd8:	de 06       	cpc	r13, r30
    6fda:	ee ef       	ldi	r30, 0xFE	; 254
    6fdc:	ee 06       	cpc	r14, r30
    6fde:	ef ef       	ldi	r30, 0xFF	; 255
    6fe0:	fe 06       	cpc	r15, r30
    6fe2:	50 f0       	brcs	.+20     	; 0x6ff8 <time_to_tm+0x60>
    6fe4:	80 e8       	ldi	r24, 0x80	; 128
    6fe6:	88 0e       	add	r8, r24
    6fe8:	81 e5       	ldi	r24, 0x51	; 81
    6fea:	98 1e       	adc	r9, r24
    6fec:	81 e0       	ldi	r24, 0x01	; 1
    6fee:	a8 1e       	adc	r10, r24
    6ff0:	b1 1c       	adc	r11, r1
    6ff2:	01 e0       	ldi	r16, 0x01	; 1
    6ff4:	10 e0       	ldi	r17, 0x00	; 0
    6ff6:	02 c0       	rjmp	.+4      	; 0x6ffc <time_to_tm+0x64>
    6ff8:	00 e0       	ldi	r16, 0x00	; 0
    6ffa:	10 e0       	ldi	r17, 0x00	; 0
    6ffc:	8c e3       	ldi	r24, 0x3C	; 60
    6ffe:	48 2e       	mov	r4, r24
    7000:	51 2c       	mov	r5, r1
    7002:	61 2c       	mov	r6, r1
    7004:	71 2c       	mov	r7, r1
    7006:	c5 01       	movw	r24, r10
    7008:	b4 01       	movw	r22, r8
    700a:	a3 01       	movw	r20, r6
    700c:	92 01       	movw	r18, r4
    700e:	0e 94 71 e5 	call	0x1cae2	; 0x1cae2 <__udivmodsi4>
    7012:	79 83       	std	Y+1, r23	; 0x01
    7014:	68 83       	st	Y, r22
    7016:	ca 01       	movw	r24, r20
    7018:	b9 01       	movw	r22, r18
    701a:	a3 01       	movw	r20, r6
    701c:	92 01       	movw	r18, r4
    701e:	0e 94 71 e5 	call	0x1cae2	; 0x1cae2 <__udivmodsi4>
    7022:	7b 83       	std	Y+3, r23	; 0x03
    7024:	6a 83       	std	Y+2, r22	; 0x02
    7026:	c5 01       	movw	r24, r10
    7028:	b4 01       	movw	r22, r8
    702a:	20 e1       	ldi	r18, 0x10	; 16
    702c:	3e e0       	ldi	r19, 0x0E	; 14
    702e:	40 e0       	ldi	r20, 0x00	; 0
    7030:	50 e0       	ldi	r21, 0x00	; 0
    7032:	0e 94 71 e5 	call	0x1cae2	; 0x1cae2 <__udivmodsi4>
    7036:	ca 01       	movw	r24, r20
    7038:	b9 01       	movw	r22, r18
    703a:	28 e1       	ldi	r18, 0x18	; 24
    703c:	30 e0       	ldi	r19, 0x00	; 0
    703e:	40 e0       	ldi	r20, 0x00	; 0
    7040:	50 e0       	ldi	r21, 0x00	; 0
    7042:	0e 94 71 e5 	call	0x1cae2	; 0x1cae2 <__udivmodsi4>
    7046:	7d 83       	std	Y+5, r23	; 0x05
    7048:	6c 83       	std	Y+4, r22	; 0x04
    704a:	01 15       	cp	r16, r1
    704c:	11 05       	cpc	r17, r1
    704e:	89 f0       	breq	.+34     	; 0x7072 <time_to_tm+0xda>
    7050:	85 e4       	ldi	r24, 0x45	; 69
    7052:	90 e0       	ldi	r25, 0x00	; 0
    7054:	9b 87       	std	Y+11, r25	; 0x0b
    7056:	8a 87       	std	Y+10, r24	; 0x0a
    7058:	8b e0       	ldi	r24, 0x0B	; 11
    705a:	90 e0       	ldi	r25, 0x00	; 0
    705c:	99 87       	std	Y+9, r25	; 0x09
    705e:	88 87       	std	Y+8, r24	; 0x08
    7060:	8f e1       	ldi	r24, 0x1F	; 31
    7062:	90 e0       	ldi	r25, 0x00	; 0
    7064:	9f 83       	std	Y+7, r25	; 0x07
    7066:	8e 83       	std	Y+6, r24	; 0x06
    7068:	83 e0       	ldi	r24, 0x03	; 3
    706a:	90 e0       	ldi	r25, 0x00	; 0
    706c:	9d 87       	std	Y+13, r25	; 0x0d
    706e:	8c 87       	std	Y+12, r24	; 0x0c
    7070:	65 c0       	rjmp	.+202    	; 0x713c <time_to_tm+0x1a4>
    7072:	c5 01       	movw	r24, r10
    7074:	b4 01       	movw	r22, r8
    7076:	20 e8       	ldi	r18, 0x80	; 128
    7078:	31 e5       	ldi	r19, 0x51	; 81
    707a:	41 e0       	ldi	r20, 0x01	; 1
    707c:	50 e0       	ldi	r21, 0x00	; 0
    707e:	0e 94 71 e5 	call	0x1cae2	; 0x1cae2 <__udivmodsi4>
    7082:	49 01       	movw	r8, r18
    7084:	5a 01       	movw	r10, r20
    7086:	ca 01       	movw	r24, r20
    7088:	b9 01       	movw	r22, r18
    708a:	6c 5f       	subi	r22, 0xFC	; 252
    708c:	7f 4f       	sbci	r23, 0xFF	; 255
    708e:	8f 4f       	sbci	r24, 0xFF	; 255
    7090:	9f 4f       	sbci	r25, 0xFF	; 255
    7092:	27 e0       	ldi	r18, 0x07	; 7
    7094:	30 e0       	ldi	r19, 0x00	; 0
    7096:	40 e0       	ldi	r20, 0x00	; 0
    7098:	50 e0       	ldi	r21, 0x00	; 0
    709a:	0e 94 93 e5 	call	0x1cb26	; 0x1cb26 <__divmodsi4>
    709e:	7d 87       	std	Y+13, r23	; 0x0d
    70a0:	6c 87       	std	Y+12, r22	; 0x0c
    70a2:	02 eb       	ldi	r16, 0xB2	; 178
    70a4:	17 e0       	ldi	r17, 0x07	; 7
    70a6:	c8 01       	movw	r24, r16
    70a8:	31 df       	rcall	.-414    	; 0x6f0c <IS_Leap>
    70aa:	00 97       	sbiw	r24, 0x00	; 0
    70ac:	19 f4       	brne	.+6      	; 0x70b4 <time_to_tm+0x11c>
    70ae:	4d e6       	ldi	r20, 0x6D	; 109
    70b0:	51 e0       	ldi	r21, 0x01	; 1
    70b2:	02 c0       	rjmp	.+4      	; 0x70b8 <time_to_tm+0x120>
    70b4:	4e e6       	ldi	r20, 0x6E	; 110
    70b6:	51 e0       	ldi	r21, 0x01	; 1
    70b8:	05 2e       	mov	r0, r21
    70ba:	00 0c       	add	r0, r0
    70bc:	66 0b       	sbc	r22, r22
    70be:	77 0b       	sbc	r23, r23
    70c0:	84 16       	cp	r8, r20
    70c2:	95 06       	cpc	r9, r21
    70c4:	a6 06       	cpc	r10, r22
    70c6:	b7 06       	cpc	r11, r23
    70c8:	3c f0       	brlt	.+14     	; 0x70d8 <time_to_tm+0x140>
    70ca:	0f 5f       	subi	r16, 0xFF	; 255
    70cc:	1f 4f       	sbci	r17, 0xFF	; 255
    70ce:	84 1a       	sub	r8, r20
    70d0:	95 0a       	sbc	r9, r21
    70d2:	a6 0a       	sbc	r10, r22
    70d4:	b7 0a       	sbc	r11, r23
    70d6:	e7 cf       	rjmp	.-50     	; 0x70a6 <time_to_tm+0x10e>
    70d8:	0c 56       	subi	r16, 0x6C	; 108
    70da:	17 40       	sbci	r17, 0x07	; 7
    70dc:	1b 87       	std	Y+11, r17	; 0x0b
    70de:	0a 87       	std	Y+10, r16	; 0x0a
    70e0:	9f 86       	std	Y+15, r9	; 0x0f
    70e2:	8e 86       	std	Y+14, r8	; 0x0e
    70e4:	e3 e6       	ldi	r30, 0x63	; 99
    70e6:	f2 e0       	ldi	r31, 0x02	; 2
    70e8:	20 e0       	ldi	r18, 0x00	; 0
    70ea:	30 e0       	ldi	r19, 0x00	; 0
    70ec:	18 14       	cp	r1, r8
    70ee:	19 04       	cpc	r1, r9
    70f0:	1a 04       	cpc	r1, r10
    70f2:	1b 04       	cpc	r1, r11
    70f4:	e4 f4       	brge	.+56     	; 0x712e <time_to_tm+0x196>
    70f6:	2c 30       	cpi	r18, 0x0C	; 12
    70f8:	31 05       	cpc	r19, r1
    70fa:	c9 f0       	breq	.+50     	; 0x712e <time_to_tm+0x196>
    70fc:	41 91       	ld	r20, Z+
    70fe:	51 91       	ld	r21, Z+
    7100:	21 30       	cpi	r18, 0x01	; 1
    7102:	31 05       	cpc	r19, r1
    7104:	21 f4       	brne	.+8      	; 0x710e <time_to_tm+0x176>
    7106:	00 97       	sbiw	r24, 0x00	; 0
    7108:	11 f0       	breq	.+4      	; 0x710e <time_to_tm+0x176>
    710a:	4f 5f       	subi	r20, 0xFF	; 255
    710c:	5f 4f       	sbci	r21, 0xFF	; 255
    710e:	05 2e       	mov	r0, r21
    7110:	00 0c       	add	r0, r0
    7112:	66 0b       	sbc	r22, r22
    7114:	77 0b       	sbc	r23, r23
    7116:	84 16       	cp	r8, r20
    7118:	95 06       	cpc	r9, r21
    711a:	a6 06       	cpc	r10, r22
    711c:	b7 06       	cpc	r11, r23
    711e:	3c f0       	brlt	.+14     	; 0x712e <time_to_tm+0x196>
    7120:	84 1a       	sub	r8, r20
    7122:	95 0a       	sbc	r9, r21
    7124:	a6 0a       	sbc	r10, r22
    7126:	b7 0a       	sbc	r11, r23
    7128:	2f 5f       	subi	r18, 0xFF	; 255
    712a:	3f 4f       	sbci	r19, 0xFF	; 255
    712c:	df cf       	rjmp	.-66     	; 0x70ec <time_to_tm+0x154>
    712e:	39 87       	std	Y+9, r19	; 0x09
    7130:	28 87       	std	Y+8, r18	; 0x08
    7132:	af ef       	ldi	r26, 0xFF	; 255
    7134:	8a 1a       	sub	r8, r26
    7136:	9a 0a       	sbc	r9, r26
    7138:	9f 82       	std	Y+7, r9	; 0x07
    713a:	8e 82       	std	Y+6, r8	; 0x06
    713c:	b6 01       	movw	r22, r12
    713e:	c7 01       	movw	r24, r14
    7140:	04 c0       	rjmp	.+8      	; 0x714a <time_to_tm+0x1b2>
    7142:	6f ef       	ldi	r22, 0xFF	; 255
    7144:	7f ef       	ldi	r23, 0xFF	; 255
    7146:	8f ef       	ldi	r24, 0xFF	; 255
    7148:	9f ef       	ldi	r25, 0xFF	; 255
    714a:	cd b7       	in	r28, 0x3d	; 61
    714c:	de b7       	in	r29, 0x3e	; 62
    714e:	e0 e1       	ldi	r30, 0x10	; 16
    7150:	0c 94 11 e6 	jmp	0x1cc22	; 0x1cc22 <__epilogue_restores__+0x4>

00007154 <gmtime_r>:
    7154:	0f 93       	push	r16
    7156:	1f 93       	push	r17
    7158:	cf 93       	push	r28
    715a:	df 93       	push	r29
    715c:	eb 01       	movw	r28, r22
    715e:	fc 01       	movw	r30, r24
    7160:	60 81       	ld	r22, Z
    7162:	71 81       	ldd	r23, Z+1	; 0x01
    7164:	82 81       	ldd	r24, Z+2	; 0x02
    7166:	93 81       	ldd	r25, Z+3	; 0x03
    7168:	8e 01       	movw	r16, r28
    716a:	20 e0       	ldi	r18, 0x00	; 0
    716c:	30 e0       	ldi	r19, 0x00	; 0
    716e:	a9 01       	movw	r20, r18
    7170:	13 df       	rcall	.-474    	; 0x6f98 <time_to_tm>
    7172:	ce 01       	movw	r24, r28
    7174:	df 91       	pop	r29
    7176:	cf 91       	pop	r28
    7178:	1f 91       	pop	r17
    717a:	0f 91       	pop	r16
    717c:	08 95       	ret

0000717e <gmtime>:
    717e:	2c e9       	ldi	r18, 0x9C	; 156
    7180:	37 e1       	ldi	r19, 0x17	; 23
    7182:	30 93 b3 17 	sts	0x17B3, r19	; 0x8017b3 <p.3798+0x1>
    7186:	20 93 b2 17 	sts	0x17B2, r18	; 0x8017b2 <p.3798>
    718a:	b9 01       	movw	r22, r18
    718c:	e3 df       	rcall	.-58     	; 0x7154 <gmtime_r>
    718e:	8c e9       	ldi	r24, 0x9C	; 156
    7190:	97 e1       	ldi	r25, 0x17	; 23
    7192:	08 95       	ret

00007194 <gettimezone>:
    7194:	ea e6       	ldi	r30, 0x6A	; 106
    7196:	f9 e1       	ldi	r31, 0x19	; 25
    7198:	20 81       	ld	r18, Z
    719a:	31 81       	ldd	r19, Z+1	; 0x01
    719c:	dc 01       	movw	r26, r24
    719e:	11 96       	adiw	r26, 0x01	; 1
    71a0:	3c 93       	st	X, r19
    71a2:	2e 93       	st	-X, r18
    71a4:	22 81       	ldd	r18, Z+2	; 0x02
    71a6:	33 81       	ldd	r19, Z+3	; 0x03
    71a8:	13 96       	adiw	r26, 0x03	; 3
    71aa:	3c 93       	st	X, r19
    71ac:	2e 93       	st	-X, r18
    71ae:	12 97       	sbiw	r26, 0x02	; 2
    71b0:	80 e0       	ldi	r24, 0x00	; 0
    71b2:	90 e0       	ldi	r25, 0x00	; 0
    71b4:	08 95       	ret

000071b6 <settimezone>:
    71b6:	dc 01       	movw	r26, r24
    71b8:	2d 91       	ld	r18, X+
    71ba:	3c 91       	ld	r19, X
    71bc:	11 97       	sbiw	r26, 0x01	; 1
    71be:	ea e6       	ldi	r30, 0x6A	; 106
    71c0:	f9 e1       	ldi	r31, 0x19	; 25
    71c2:	31 83       	std	Z+1, r19	; 0x01
    71c4:	20 83       	st	Z, r18
    71c6:	12 96       	adiw	r26, 0x02	; 2
    71c8:	8d 91       	ld	r24, X+
    71ca:	9c 91       	ld	r25, X
    71cc:	13 97       	sbiw	r26, 0x03	; 3
    71ce:	93 83       	std	Z+3, r25	; 0x03
    71d0:	82 83       	std	Z+2, r24	; 0x02
    71d2:	80 e0       	ldi	r24, 0x00	; 0
    71d4:	90 e0       	ldi	r25, 0x00	; 0
    71d6:	08 95       	ret

000071d8 <gettimeofday>:
    71d8:	a8 e0       	ldi	r26, 0x08	; 8
    71da:	b0 e0       	ldi	r27, 0x00	; 0
    71dc:	e2 ef       	ldi	r30, 0xF2	; 242
    71de:	f8 e3       	ldi	r31, 0x38	; 56
    71e0:	0c 94 ff e5 	jmp	0x1cbfe	; 0x1cbfe <__prologue_saves__+0x18>
    71e4:	8c 01       	movw	r16, r24
    71e6:	7b 01       	movw	r14, r22
    71e8:	be 01       	movw	r22, r28
    71ea:	6f 5f       	subi	r22, 0xFF	; 255
    71ec:	7f 4f       	sbci	r23, 0xFF	; 255
    71ee:	80 e0       	ldi	r24, 0x00	; 0
    71f0:	90 e0       	ldi	r25, 0x00	; 0
    71f2:	f5 db       	rcall	.-2070   	; 0x69de <clock_gettime>
    71f4:	89 81       	ldd	r24, Y+1	; 0x01
    71f6:	9a 81       	ldd	r25, Y+2	; 0x02
    71f8:	ab 81       	ldd	r26, Y+3	; 0x03
    71fa:	bc 81       	ldd	r27, Y+4	; 0x04
    71fc:	f8 01       	movw	r30, r16
    71fe:	80 83       	st	Z, r24
    7200:	91 83       	std	Z+1, r25	; 0x01
    7202:	a2 83       	std	Z+2, r26	; 0x02
    7204:	b3 83       	std	Z+3, r27	; 0x03
    7206:	6d 81       	ldd	r22, Y+5	; 0x05
    7208:	7e 81       	ldd	r23, Y+6	; 0x06
    720a:	8f 81       	ldd	r24, Y+7	; 0x07
    720c:	98 85       	ldd	r25, Y+8	; 0x08
    720e:	28 ee       	ldi	r18, 0xE8	; 232
    7210:	33 e0       	ldi	r19, 0x03	; 3
    7212:	40 e0       	ldi	r20, 0x00	; 0
    7214:	50 e0       	ldi	r21, 0x00	; 0
    7216:	0e 94 93 e5 	call	0x1cb26	; 0x1cb26 <__divmodsi4>
    721a:	f8 01       	movw	r30, r16
    721c:	24 83       	std	Z+4, r18	; 0x04
    721e:	35 83       	std	Z+5, r19	; 0x05
    7220:	46 83       	std	Z+6, r20	; 0x06
    7222:	57 83       	std	Z+7, r21	; 0x07
    7224:	c7 01       	movw	r24, r14
    7226:	b6 df       	rcall	.-148    	; 0x7194 <gettimezone>
    7228:	80 e0       	ldi	r24, 0x00	; 0
    722a:	90 e0       	ldi	r25, 0x00	; 0
    722c:	28 96       	adiw	r28, 0x08	; 8
    722e:	e6 e0       	ldi	r30, 0x06	; 6
    7230:	0c 94 1b e6 	jmp	0x1cc36	; 0x1cc36 <__epilogue_restores__+0x18>

00007234 <time>:
    7234:	cf 93       	push	r28
    7236:	df 93       	push	r29
    7238:	ec 01       	movw	r28, r24
    723a:	6e e7       	ldi	r22, 0x7E	; 126
    723c:	77 e1       	ldi	r23, 0x17	; 23
    723e:	80 e0       	ldi	r24, 0x00	; 0
    7240:	90 e0       	ldi	r25, 0x00	; 0
    7242:	cd db       	rcall	.-2150   	; 0x69de <clock_gettime>
    7244:	20 97       	sbiw	r28, 0x00	; 0
    7246:	61 f0       	breq	.+24     	; 0x7260 <time+0x2c>
    7248:	80 91 7e 17 	lds	r24, 0x177E	; 0x80177e <ts.3876>
    724c:	90 91 7f 17 	lds	r25, 0x177F	; 0x80177f <ts.3876+0x1>
    7250:	a0 91 80 17 	lds	r26, 0x1780	; 0x801780 <ts.3876+0x2>
    7254:	b0 91 81 17 	lds	r27, 0x1781	; 0x801781 <ts.3876+0x3>
    7258:	88 83       	st	Y, r24
    725a:	99 83       	std	Y+1, r25	; 0x01
    725c:	aa 83       	std	Y+2, r26	; 0x02
    725e:	bb 83       	std	Y+3, r27	; 0x03
    7260:	60 91 7e 17 	lds	r22, 0x177E	; 0x80177e <ts.3876>
    7264:	70 91 7f 17 	lds	r23, 0x177F	; 0x80177f <ts.3876+0x1>
    7268:	80 91 80 17 	lds	r24, 0x1780	; 0x801780 <ts.3876+0x2>
    726c:	90 91 81 17 	lds	r25, 0x1781	; 0x801781 <ts.3876+0x3>
    7270:	df 91       	pop	r29
    7272:	cf 91       	pop	r28
    7274:	08 95       	ret

00007276 <is_dst>:
    7276:	cf 92       	push	r12
    7278:	df 92       	push	r13
    727a:	ef 92       	push	r14
    727c:	ff 92       	push	r15
    727e:	6b 01       	movw	r12, r22
    7280:	7c 01       	movw	r14, r24
    7282:	ff d3       	rcall	.+2046   	; 0x7a82 <set_dst>
    7284:	80 91 6e 19 	lds	r24, 0x196E	; 0x80196e <dst>
    7288:	90 91 6f 19 	lds	r25, 0x196F	; 0x80196f <dst+0x1>
    728c:	a0 91 70 19 	lds	r26, 0x1970	; 0x801970 <dst+0x2>
    7290:	b0 91 71 19 	lds	r27, 0x1971	; 0x801971 <dst+0x3>
    7294:	c8 16       	cp	r12, r24
    7296:	d9 06       	cpc	r13, r25
    7298:	ea 06       	cpc	r14, r26
    729a:	fb 06       	cpc	r15, r27
    729c:	88 f0       	brcs	.+34     	; 0x72c0 <is_dst+0x4a>
    729e:	81 e0       	ldi	r24, 0x01	; 1
    72a0:	90 e0       	ldi	r25, 0x00	; 0
    72a2:	40 91 72 19 	lds	r20, 0x1972	; 0x801972 <dst+0x4>
    72a6:	50 91 73 19 	lds	r21, 0x1973	; 0x801973 <dst+0x5>
    72aa:	60 91 74 19 	lds	r22, 0x1974	; 0x801974 <dst+0x6>
    72ae:	70 91 75 19 	lds	r23, 0x1975	; 0x801975 <dst+0x7>
    72b2:	4c 15       	cp	r20, r12
    72b4:	5d 05       	cpc	r21, r13
    72b6:	6e 05       	cpc	r22, r14
    72b8:	7f 05       	cpc	r23, r15
    72ba:	20 f4       	brcc	.+8      	; 0x72c4 <is_dst+0x4e>
    72bc:	80 e0       	ldi	r24, 0x00	; 0
    72be:	02 c0       	rjmp	.+4      	; 0x72c4 <is_dst+0x4e>
    72c0:	80 e0       	ldi	r24, 0x00	; 0
    72c2:	90 e0       	ldi	r25, 0x00	; 0
    72c4:	ff 90       	pop	r15
    72c6:	ef 90       	pop	r14
    72c8:	df 90       	pop	r13
    72ca:	cf 90       	pop	r12
    72cc:	08 95       	ret

000072ce <localtime_r>:
    72ce:	4f 92       	push	r4
    72d0:	5f 92       	push	r5
    72d2:	6f 92       	push	r6
    72d4:	7f 92       	push	r7
    72d6:	af 92       	push	r10
    72d8:	bf 92       	push	r11
    72da:	cf 92       	push	r12
    72dc:	df 92       	push	r13
    72de:	ef 92       	push	r14
    72e0:	ff 92       	push	r15
    72e2:	0f 93       	push	r16
    72e4:	1f 93       	push	r17
    72e6:	cf 93       	push	r28
    72e8:	df 93       	push	r29
    72ea:	00 d0       	rcall	.+0      	; 0x72ec <localtime_r+0x1e>
    72ec:	00 d0       	rcall	.+0      	; 0x72ee <localtime_r+0x20>
    72ee:	cd b7       	in	r28, 0x3d	; 61
    72f0:	de b7       	in	r29, 0x3e	; 62
    72f2:	5b 01       	movw	r10, r22
    72f4:	fc 01       	movw	r30, r24
    72f6:	40 80       	ld	r4, Z
    72f8:	51 80       	ldd	r5, Z+1	; 0x01
    72fa:	62 80       	ldd	r6, Z+2	; 0x02
    72fc:	73 80       	ldd	r7, Z+3	; 0x03
    72fe:	ce 01       	movw	r24, r28
    7300:	01 96       	adiw	r24, 0x01	; 1
    7302:	48 df       	rcall	.-368    	; 0x7194 <gettimezone>
    7304:	a9 81       	ldd	r26, Y+1	; 0x01
    7306:	ba 81       	ldd	r27, Y+2	; 0x02
    7308:	2c e3       	ldi	r18, 0x3C	; 60
    730a:	30 e0       	ldi	r19, 0x00	; 0
    730c:	0e 94 cd e5 	call	0x1cb9a	; 0x1cb9a <__usmulhisi3>
    7310:	6b 01       	movw	r12, r22
    7312:	7c 01       	movw	r14, r24
    7314:	c3 01       	movw	r24, r6
    7316:	b2 01       	movw	r22, r4
    7318:	6c 19       	sub	r22, r12
    731a:	7d 09       	sbc	r23, r13
    731c:	8e 09       	sbc	r24, r14
    731e:	9f 09       	sbc	r25, r15
    7320:	aa df       	rcall	.-172    	; 0x7276 <is_dst>
    7322:	89 2b       	or	r24, r25
    7324:	31 f0       	breq	.+12     	; 0x7332 <localtime_r+0x64>
    7326:	f0 e1       	ldi	r31, 0x10	; 16
    7328:	cf 1a       	sub	r12, r31
    732a:	fe e0       	ldi	r31, 0x0E	; 14
    732c:	df 0a       	sbc	r13, r31
    732e:	e1 08       	sbc	r14, r1
    7330:	f1 08       	sbc	r15, r1
    7332:	85 01       	movw	r16, r10
    7334:	a7 01       	movw	r20, r14
    7336:	96 01       	movw	r18, r12
    7338:	c3 01       	movw	r24, r6
    733a:	b2 01       	movw	r22, r4
    733c:	2d de       	rcall	.-934    	; 0x6f98 <time_to_tm>
    733e:	c5 01       	movw	r24, r10
    7340:	0f 90       	pop	r0
    7342:	0f 90       	pop	r0
    7344:	0f 90       	pop	r0
    7346:	0f 90       	pop	r0
    7348:	df 91       	pop	r29
    734a:	cf 91       	pop	r28
    734c:	1f 91       	pop	r17
    734e:	0f 91       	pop	r16
    7350:	ff 90       	pop	r15
    7352:	ef 90       	pop	r14
    7354:	df 90       	pop	r13
    7356:	cf 90       	pop	r12
    7358:	bf 90       	pop	r11
    735a:	af 90       	pop	r10
    735c:	7f 90       	pop	r7
    735e:	6f 90       	pop	r6
    7360:	5f 90       	pop	r5
    7362:	4f 90       	pop	r4
    7364:	08 95       	ret

00007366 <localtime>:
    7366:	66 e8       	ldi	r22, 0x86	; 134
    7368:	77 e1       	ldi	r23, 0x17	; 23
    736a:	b1 cf       	rjmp	.-158    	; 0x72ce <localtime_r>
    736c:	08 95       	ret

0000736e <normalize>:
    736e:	aa e0       	ldi	r26, 0x0A	; 10
    7370:	b0 e0       	ldi	r27, 0x00	; 0
    7372:	ed eb       	ldi	r30, 0xBD	; 189
    7374:	f9 e3       	ldi	r31, 0x39	; 57
    7376:	0c 94 f3 e5 	jmp	0x1cbe6	; 0x1cbe6 <__prologue_saves__>
    737a:	7c 01       	movw	r14, r24
    737c:	7a 87       	std	Y+10, r23	; 0x0a
    737e:	69 87       	std	Y+9, r22	; 0x09
    7380:	f7 01       	movw	r30, r14
    7382:	80 81       	ld	r24, Z
    7384:	91 81       	ldd	r25, Z+1	; 0x01
    7386:	8c 33       	cpi	r24, 0x3C	; 60
    7388:	91 05       	cpc	r25, r1
    738a:	5c f0       	brlt	.+22     	; 0x73a2 <normalize+0x34>
    738c:	f7 01       	movw	r30, r14
    738e:	22 81       	ldd	r18, Z+2	; 0x02
    7390:	33 81       	ldd	r19, Z+3	; 0x03
    7392:	2f 5f       	subi	r18, 0xFF	; 255
    7394:	3f 4f       	sbci	r19, 0xFF	; 255
    7396:	33 83       	std	Z+3, r19	; 0x03
    7398:	22 83       	std	Z+2, r18	; 0x02
    739a:	cc 97       	sbiw	r24, 0x3c	; 60
    739c:	91 83       	std	Z+1, r25	; 0x01
    739e:	80 83       	st	Z, r24
    73a0:	ef cf       	rjmp	.-34     	; 0x7380 <normalize+0x12>
    73a2:	f7 01       	movw	r30, r14
    73a4:	01 90       	ld	r0, Z+
    73a6:	f0 81       	ld	r31, Z
    73a8:	e0 2d       	mov	r30, r0
    73aa:	fe 83       	std	Y+6, r31	; 0x06
    73ac:	ed 83       	std	Y+5, r30	; 0x05
    73ae:	f7 ff       	sbrs	r31, 7
    73b0:	0d c0       	rjmp	.+26     	; 0x73cc <normalize+0x5e>
    73b2:	f7 01       	movw	r30, r14
    73b4:	82 81       	ldd	r24, Z+2	; 0x02
    73b6:	93 81       	ldd	r25, Z+3	; 0x03
    73b8:	01 97       	sbiw	r24, 0x01	; 1
    73ba:	93 83       	std	Z+3, r25	; 0x03
    73bc:	82 83       	std	Z+2, r24	; 0x02
    73be:	6d 81       	ldd	r22, Y+5	; 0x05
    73c0:	7e 81       	ldd	r23, Y+6	; 0x06
    73c2:	64 5c       	subi	r22, 0xC4	; 196
    73c4:	7f 4f       	sbci	r23, 0xFF	; 255
    73c6:	71 83       	std	Z+1, r23	; 0x01
    73c8:	60 83       	st	Z, r22
    73ca:	eb cf       	rjmp	.-42     	; 0x73a2 <normalize+0x34>
    73cc:	f7 01       	movw	r30, r14
    73ce:	82 81       	ldd	r24, Z+2	; 0x02
    73d0:	93 81       	ldd	r25, Z+3	; 0x03
    73d2:	8c 33       	cpi	r24, 0x3C	; 60
    73d4:	91 05       	cpc	r25, r1
    73d6:	5c f0       	brlt	.+22     	; 0x73ee <normalize+0x80>
    73d8:	f7 01       	movw	r30, r14
    73da:	24 81       	ldd	r18, Z+4	; 0x04
    73dc:	35 81       	ldd	r19, Z+5	; 0x05
    73de:	2f 5f       	subi	r18, 0xFF	; 255
    73e0:	3f 4f       	sbci	r19, 0xFF	; 255
    73e2:	35 83       	std	Z+5, r19	; 0x05
    73e4:	24 83       	std	Z+4, r18	; 0x04
    73e6:	cc 97       	sbiw	r24, 0x3c	; 60
    73e8:	93 83       	std	Z+3, r25	; 0x03
    73ea:	82 83       	std	Z+2, r24	; 0x02
    73ec:	ef cf       	rjmp	.-34     	; 0x73cc <normalize+0x5e>
    73ee:	f7 01       	movw	r30, r14
    73f0:	22 80       	ldd	r2, Z+2	; 0x02
    73f2:	33 80       	ldd	r3, Z+3	; 0x03
    73f4:	37 fe       	sbrs	r3, 7
    73f6:	0d c0       	rjmp	.+26     	; 0x7412 <normalize+0xa4>
    73f8:	f7 01       	movw	r30, r14
    73fa:	84 81       	ldd	r24, Z+4	; 0x04
    73fc:	95 81       	ldd	r25, Z+5	; 0x05
    73fe:	01 97       	sbiw	r24, 0x01	; 1
    7400:	95 83       	std	Z+5, r25	; 0x05
    7402:	84 83       	std	Z+4, r24	; 0x04
    7404:	fc e3       	ldi	r31, 0x3C	; 60
    7406:	2f 0e       	add	r2, r31
    7408:	31 1c       	adc	r3, r1
    740a:	f7 01       	movw	r30, r14
    740c:	33 82       	std	Z+3, r3	; 0x03
    740e:	22 82       	std	Z+2, r2	; 0x02
    7410:	ee cf       	rjmp	.-36     	; 0x73ee <normalize+0x80>
    7412:	f7 01       	movw	r30, r14
    7414:	84 81       	ldd	r24, Z+4	; 0x04
    7416:	95 81       	ldd	r25, Z+5	; 0x05
    7418:	88 31       	cpi	r24, 0x18	; 24
    741a:	91 05       	cpc	r25, r1
    741c:	5c f0       	brlt	.+22     	; 0x7434 <normalize+0xc6>
    741e:	f7 01       	movw	r30, r14
    7420:	26 81       	ldd	r18, Z+6	; 0x06
    7422:	37 81       	ldd	r19, Z+7	; 0x07
    7424:	2f 5f       	subi	r18, 0xFF	; 255
    7426:	3f 4f       	sbci	r19, 0xFF	; 255
    7428:	37 83       	std	Z+7, r19	; 0x07
    742a:	26 83       	std	Z+6, r18	; 0x06
    742c:	48 97       	sbiw	r24, 0x18	; 24
    742e:	95 83       	std	Z+5, r25	; 0x05
    7430:	84 83       	std	Z+4, r24	; 0x04
    7432:	ef cf       	rjmp	.-34     	; 0x7412 <normalize+0xa4>
    7434:	f7 01       	movw	r30, r14
    7436:	04 81       	ldd	r16, Z+4	; 0x04
    7438:	15 81       	ldd	r17, Z+5	; 0x05
    743a:	17 ff       	sbrs	r17, 7
    743c:	0b c0       	rjmp	.+22     	; 0x7454 <normalize+0xe6>
    743e:	f7 01       	movw	r30, r14
    7440:	86 81       	ldd	r24, Z+6	; 0x06
    7442:	97 81       	ldd	r25, Z+7	; 0x07
    7444:	01 97       	sbiw	r24, 0x01	; 1
    7446:	97 83       	std	Z+7, r25	; 0x07
    7448:	86 83       	std	Z+6, r24	; 0x06
    744a:	08 5e       	subi	r16, 0xE8	; 232
    744c:	1f 4f       	sbci	r17, 0xFF	; 255
    744e:	15 83       	std	Z+5, r17	; 0x05
    7450:	04 83       	std	Z+4, r16	; 0x04
    7452:	f0 cf       	rjmp	.-32     	; 0x7434 <normalize+0xc6>
    7454:	f7 01       	movw	r30, r14
    7456:	80 85       	ldd	r24, Z+8	; 0x08
    7458:	91 85       	ldd	r25, Z+9	; 0x09
    745a:	8c 30       	cpi	r24, 0x0C	; 12
    745c:	91 05       	cpc	r25, r1
    745e:	5c f0       	brlt	.+22     	; 0x7476 <normalize+0x108>
    7460:	f7 01       	movw	r30, r14
    7462:	22 85       	ldd	r18, Z+10	; 0x0a
    7464:	33 85       	ldd	r19, Z+11	; 0x0b
    7466:	2f 5f       	subi	r18, 0xFF	; 255
    7468:	3f 4f       	sbci	r19, 0xFF	; 255
    746a:	33 87       	std	Z+11, r19	; 0x0b
    746c:	22 87       	std	Z+10, r18	; 0x0a
    746e:	0c 97       	sbiw	r24, 0x0c	; 12
    7470:	91 87       	std	Z+9, r25	; 0x09
    7472:	80 87       	std	Z+8, r24	; 0x08
    7474:	ef cf       	rjmp	.-34     	; 0x7454 <normalize+0xe6>
    7476:	f7 01       	movw	r30, r14
    7478:	80 85       	ldd	r24, Z+8	; 0x08
    747a:	91 85       	ldd	r25, Z+9	; 0x09
    747c:	97 ff       	sbrs	r25, 7
    747e:	2d c0       	rjmp	.+90     	; 0x74da <normalize+0x16c>
    7480:	f7 01       	movw	r30, r14
    7482:	22 85       	ldd	r18, Z+10	; 0x0a
    7484:	33 85       	ldd	r19, Z+11	; 0x0b
    7486:	21 50       	subi	r18, 0x01	; 1
    7488:	31 09       	sbc	r19, r1
    748a:	33 87       	std	Z+11, r19	; 0x0b
    748c:	22 87       	std	Z+10, r18	; 0x0a
    748e:	0c 96       	adiw	r24, 0x0c	; 12
    7490:	91 87       	std	Z+9, r25	; 0x09
    7492:	80 87       	std	Z+8, r24	; 0x08
    7494:	f0 cf       	rjmp	.-32     	; 0x7476 <normalize+0x108>
    7496:	f7 01       	movw	r30, r14
    7498:	c6 80       	ldd	r12, Z+6	; 0x06
    749a:	d7 80       	ldd	r13, Z+7	; 0x07
    749c:	a0 84       	ldd	r10, Z+8	; 0x08
    749e:	b1 84       	ldd	r11, Z+9	; 0x09
    74a0:	b4 01       	movw	r22, r8
    74a2:	c5 01       	movw	r24, r10
    74a4:	58 dd       	rcall	.-1360   	; 0x6f56 <Days_Per_Month>
    74a6:	8c 15       	cp	r24, r12
    74a8:	9d 05       	cpc	r25, r13
    74aa:	84 f5       	brge	.+96     	; 0x750c <normalize+0x19e>
    74ac:	c8 1a       	sub	r12, r24
    74ae:	d9 0a       	sbc	r13, r25
    74b0:	f7 01       	movw	r30, r14
    74b2:	d7 82       	std	Z+7, r13	; 0x07
    74b4:	c6 82       	std	Z+6, r12	; 0x06
    74b6:	c5 01       	movw	r24, r10
    74b8:	01 96       	adiw	r24, 0x01	; 1
    74ba:	91 87       	std	Z+9, r25	; 0x09
    74bc:	80 87       	std	Z+8, r24	; 0x08
    74be:	0c 97       	sbiw	r24, 0x0c	; 12
    74c0:	54 f3       	brlt	.-44     	; 0x7496 <normalize+0x128>
    74c2:	fb e0       	ldi	r31, 0x0B	; 11
    74c4:	af 1a       	sub	r10, r31
    74c6:	b1 08       	sbc	r11, r1
    74c8:	f7 01       	movw	r30, r14
    74ca:	b1 86       	std	Z+9, r11	; 0x09
    74cc:	a0 86       	std	Z+8, r10	; 0x08
    74ce:	ff ef       	ldi	r31, 0xFF	; 255
    74d0:	8f 1a       	sub	r8, r31
    74d2:	9f 0a       	sbc	r9, r31
    74d4:	f7 01       	movw	r30, r14
    74d6:	93 86       	std	Z+11, r9	; 0x0b
    74d8:	82 86       	std	Z+10, r8	; 0x0a
    74da:	f7 01       	movw	r30, r14
    74dc:	82 84       	ldd	r8, Z+10	; 0x0a
    74de:	93 84       	ldd	r9, Z+11	; 0x0b
    74e0:	da cf       	rjmp	.-76     	; 0x7496 <normalize+0x128>
    74e2:	f7 01       	movw	r30, r14
    74e4:	80 85       	ldd	r24, Z+8	; 0x08
    74e6:	91 85       	ldd	r25, Z+9	; 0x09
    74e8:	9c 01       	movw	r18, r24
    74ea:	21 50       	subi	r18, 0x01	; 1
    74ec:	31 09       	sbc	r19, r1
    74ee:	37 fd       	sbrc	r19, 7
    74f0:	16 c0       	rjmp	.+44     	; 0x751e <normalize+0x1b0>
    74f2:	31 87       	std	Z+9, r19	; 0x09
    74f4:	20 87       	std	Z+8, r18	; 0x08
    74f6:	f7 01       	movw	r30, r14
    74f8:	62 85       	ldd	r22, Z+10	; 0x0a
    74fa:	73 85       	ldd	r23, Z+11	; 0x0b
    74fc:	80 85       	ldd	r24, Z+8	; 0x08
    74fe:	91 85       	ldd	r25, Z+9	; 0x09
    7500:	2a dd       	rcall	.-1452   	; 0x6f56 <Days_Per_Month>
    7502:	88 0d       	add	r24, r8
    7504:	99 1d       	adc	r25, r9
    7506:	f7 01       	movw	r30, r14
    7508:	97 83       	std	Z+7, r25	; 0x07
    750a:	86 83       	std	Z+6, r24	; 0x06
    750c:	f7 01       	movw	r30, r14
    750e:	86 80       	ldd	r8, Z+6	; 0x06
    7510:	97 80       	ldd	r9, Z+7	; 0x07
    7512:	a2 84       	ldd	r10, Z+10	; 0x0a
    7514:	b3 84       	ldd	r11, Z+11	; 0x0b
    7516:	18 14       	cp	r1, r8
    7518:	19 04       	cpc	r1, r9
    751a:	1c f7       	brge	.-58     	; 0x74e2 <normalize+0x174>
    751c:	0b c0       	rjmp	.+22     	; 0x7534 <normalize+0x1c6>
    751e:	0b 96       	adiw	r24, 0x0b	; 11
    7520:	f7 01       	movw	r30, r14
    7522:	91 87       	std	Z+9, r25	; 0x09
    7524:	80 87       	std	Z+8, r24	; 0x08
    7526:	f1 e0       	ldi	r31, 0x01	; 1
    7528:	af 1a       	sub	r10, r31
    752a:	b1 08       	sbc	r11, r1
    752c:	f7 01       	movw	r30, r14
    752e:	b3 86       	std	Z+11, r11	; 0x0b
    7530:	a2 86       	std	Z+10, r10	; 0x0a
    7532:	e1 cf       	rjmp	.-62     	; 0x74f6 <normalize+0x188>
    7534:	a5 01       	movw	r20, r10
    7536:	44 59       	subi	r20, 0x94	; 148
    7538:	58 4f       	sbci	r21, 0xF8	; 248
    753a:	58 87       	std	Y+8, r21	; 0x08
    753c:	4f 83       	std	Y+7, r20	; 0x07
    753e:	35 01       	movw	r6, r10
    7540:	56 e4       	ldi	r21, 0x46	; 70
    7542:	65 1a       	sub	r6, r21
    7544:	71 08       	sbc	r7, r1
    7546:	89 e8       	ldi	r24, 0x89	; 137
    7548:	68 16       	cp	r6, r24
    754a:	71 04       	cpc	r7, r1
    754c:	08 f0       	brcs	.+2      	; 0x7550 <normalize+0x1e2>
    754e:	9b c0       	rjmp	.+310    	; 0x7686 <normalize+0x318>
    7550:	c0 84       	ldd	r12, Z+8	; 0x08
    7552:	d1 84       	ldd	r13, Z+9	; 0x09
    7554:	9c e0       	ldi	r25, 0x0C	; 12
    7556:	c9 16       	cp	r12, r25
    7558:	d1 04       	cpc	r13, r1
    755a:	08 f0       	brcs	.+2      	; 0x755e <normalize+0x1f0>
    755c:	94 c0       	rjmp	.+296    	; 0x7686 <normalize+0x318>
    755e:	24 01       	movw	r4, r8
    7560:	e1 e0       	ldi	r30, 0x01	; 1
    7562:	4e 1a       	sub	r4, r30
    7564:	51 08       	sbc	r5, r1
    7566:	6f 81       	ldd	r22, Y+7	; 0x07
    7568:	78 85       	ldd	r23, Y+8	; 0x08
    756a:	c6 01       	movw	r24, r12
    756c:	f4 dc       	rcall	.-1560   	; 0x6f56 <Days_Per_Month>
    756e:	48 16       	cp	r4, r24
    7570:	59 06       	cpc	r5, r25
    7572:	0c f0       	brlt	.+2      	; 0x7576 <normalize+0x208>
    7574:	88 c0       	rjmp	.+272    	; 0x7686 <normalize+0x318>
    7576:	08 31       	cpi	r16, 0x18	; 24
    7578:	11 05       	cpc	r17, r1
    757a:	0c f0       	brlt	.+2      	; 0x757e <normalize+0x210>
    757c:	84 c0       	rjmp	.+264    	; 0x7686 <normalize+0x318>
    757e:	fc e3       	ldi	r31, 0x3C	; 60
    7580:	2f 16       	cp	r2, r31
    7582:	31 04       	cpc	r3, r1
    7584:	0c f0       	brlt	.+2      	; 0x7588 <normalize+0x21a>
    7586:	7f c0       	rjmp	.+254    	; 0x7686 <normalize+0x318>
    7588:	4d 81       	ldd	r20, Y+5	; 0x05
    758a:	5e 81       	ldd	r21, Y+6	; 0x06
    758c:	4c 33       	cpi	r20, 0x3C	; 60
    758e:	51 05       	cpc	r21, r1
    7590:	0c f0       	brlt	.+2      	; 0x7594 <normalize+0x226>
    7592:	79 c0       	rjmp	.+242    	; 0x7686 <normalize+0x318>
    7594:	2d e6       	ldi	r18, 0x6D	; 109
    7596:	31 e0       	ldi	r19, 0x01	; 1
    7598:	d3 01       	movw	r26, r6
    759a:	0e 94 cd e5 	call	0x1cb9a	; 0x1cb9a <__usmulhisi3>
    759e:	f6 01       	movw	r30, r12
    75a0:	ee 0f       	add	r30, r30
    75a2:	ff 1f       	adc	r31, r31
    75a4:	e5 58       	subi	r30, 0x85	; 133
    75a6:	fd 4f       	sbci	r31, 0xFD	; 253
    75a8:	20 81       	ld	r18, Z
    75aa:	31 81       	ldd	r19, Z+1	; 0x01
    75ac:	dc 01       	movw	r26, r24
    75ae:	cb 01       	movw	r24, r22
    75b0:	82 0f       	add	r24, r18
    75b2:	93 1f       	adc	r25, r19
    75b4:	a1 1d       	adc	r26, r1
    75b6:	b1 1d       	adc	r27, r1
    75b8:	05 2c       	mov	r0, r5
    75ba:	00 0c       	add	r0, r0
    75bc:	66 08       	sbc	r6, r6
    75be:	77 08       	sbc	r7, r7
    75c0:	48 0e       	add	r4, r24
    75c2:	59 1e       	adc	r5, r25
    75c4:	6a 1e       	adc	r6, r26
    75c6:	7b 1e       	adc	r7, r27
    75c8:	1a 14       	cp	r1, r10
    75ca:	1b 04       	cpc	r1, r11
    75cc:	1c f4       	brge	.+6      	; 0x75d4 <normalize+0x266>
    75ce:	51 e0       	ldi	r21, 0x01	; 1
    75d0:	a5 1a       	sub	r10, r21
    75d2:	b1 08       	sbc	r11, r1
    75d4:	45 01       	movw	r8, r10
    75d6:	95 94       	asr	r9
    75d8:	87 94       	ror	r8
    75da:	95 94       	asr	r9
    75dc:	87 94       	ror	r8
    75de:	88 ec       	ldi	r24, 0xC8	; 200
    75e0:	a8 16       	cp	r10, r24
    75e2:	b1 04       	cpc	r11, r1
    75e4:	1c f0       	brlt	.+6      	; 0x75ec <normalize+0x27e>
    75e6:	91 e0       	ldi	r25, 0x01	; 1
    75e8:	89 1a       	sub	r8, r25
    75ea:	91 08       	sbc	r9, r1
    75ec:	09 2c       	mov	r0, r9
    75ee:	00 0c       	add	r0, r0
    75f0:	aa 08       	sbc	r10, r10
    75f2:	bb 08       	sbc	r11, r11
    75f4:	84 0c       	add	r8, r4
    75f6:	95 1c       	adc	r9, r5
    75f8:	a6 1c       	adc	r10, r6
    75fa:	b7 1c       	adc	r11, r7
    75fc:	24 01       	movw	r4, r8
    75fe:	35 01       	movw	r6, r10
    7600:	e1 e1       	ldi	r30, 0x11	; 17
    7602:	4e 1a       	sub	r4, r30
    7604:	51 08       	sbc	r5, r1
    7606:	61 08       	sbc	r6, r1
    7608:	71 08       	sbc	r7, r1
    760a:	f2 e0       	ldi	r31, 0x02	; 2
    760c:	cf 16       	cp	r12, r31
    760e:	d1 04       	cpc	r13, r1
    7610:	64 f0       	brlt	.+24     	; 0x762a <normalize+0x2bc>
    7612:	8f 81       	ldd	r24, Y+7	; 0x07
    7614:	98 85       	ldd	r25, Y+8	; 0x08
    7616:	7a dc       	rcall	.-1804   	; 0x6f0c <IS_Leap>
    7618:	89 2b       	or	r24, r25
    761a:	39 f0       	breq	.+14     	; 0x762a <normalize+0x2bc>
    761c:	24 01       	movw	r4, r8
    761e:	35 01       	movw	r6, r10
    7620:	40 e1       	ldi	r20, 0x10	; 16
    7622:	44 1a       	sub	r4, r20
    7624:	51 08       	sbc	r5, r1
    7626:	61 08       	sbc	r6, r1
    7628:	71 08       	sbc	r7, r1
    762a:	a8 e1       	ldi	r26, 0x18	; 24
    762c:	b0 e0       	ldi	r27, 0x00	; 0
    762e:	a3 01       	movw	r20, r6
    7630:	92 01       	movw	r18, r4
    7632:	0e 94 d3 e5 	call	0x1cba6	; 0x1cba6 <__muluhisi3>
    7636:	01 2e       	mov	r0, r17
    7638:	00 0c       	add	r0, r0
    763a:	22 0b       	sbc	r18, r18
    763c:	33 0b       	sbc	r19, r19
    763e:	a9 01       	movw	r20, r18
    7640:	98 01       	movw	r18, r16
    7642:	26 0f       	add	r18, r22
    7644:	37 1f       	adc	r19, r23
    7646:	48 1f       	adc	r20, r24
    7648:	59 1f       	adc	r21, r25
    764a:	ac e3       	ldi	r26, 0x3C	; 60
    764c:	b0 e0       	ldi	r27, 0x00	; 0
    764e:	0e 94 d3 e5 	call	0x1cba6	; 0x1cba6 <__muluhisi3>
    7652:	81 01       	movw	r16, r2
    7654:	03 2c       	mov	r0, r3
    7656:	00 0c       	add	r0, r0
    7658:	22 0b       	sbc	r18, r18
    765a:	33 0b       	sbc	r19, r19
    765c:	a9 01       	movw	r20, r18
    765e:	98 01       	movw	r18, r16
    7660:	26 0f       	add	r18, r22
    7662:	37 1f       	adc	r19, r23
    7664:	48 1f       	adc	r20, r24
    7666:	59 1f       	adc	r21, r25
    7668:	0e 94 d3 e5 	call	0x1cba6	; 0x1cba6 <__muluhisi3>
    766c:	ed 81       	ldd	r30, Y+5	; 0x05
    766e:	fe 81       	ldd	r31, Y+6	; 0x06
    7670:	8f 01       	movw	r16, r30
    7672:	ff 0f       	add	r31, r31
    7674:	22 0b       	sbc	r18, r18
    7676:	33 0b       	sbc	r19, r19
    7678:	48 01       	movw	r8, r16
    767a:	59 01       	movw	r10, r18
    767c:	86 0e       	add	r8, r22
    767e:	97 1e       	adc	r9, r23
    7680:	a8 1e       	adc	r10, r24
    7682:	b9 1e       	adc	r11, r25
    7684:	04 c0       	rjmp	.+8      	; 0x768e <normalize+0x320>
    7686:	88 24       	eor	r8, r8
    7688:	8a 94       	dec	r8
    768a:	98 2c       	mov	r9, r8
    768c:	54 01       	movw	r10, r8
    768e:	49 85       	ldd	r20, Y+9	; 0x09
    7690:	5a 85       	ldd	r21, Y+10	; 0x0a
    7692:	45 2b       	or	r20, r21
    7694:	e9 f0       	breq	.+58     	; 0x76d0 <normalize+0x362>
    7696:	ce 01       	movw	r24, r28
    7698:	01 96       	adiw	r24, 0x01	; 1
    769a:	7c dd       	rcall	.-1288   	; 0x7194 <gettimezone>
    769c:	a9 81       	ldd	r26, Y+1	; 0x01
    769e:	ba 81       	ldd	r27, Y+2	; 0x02
    76a0:	2c e3       	ldi	r18, 0x3C	; 60
    76a2:	30 e0       	ldi	r19, 0x00	; 0
    76a4:	0e 94 cd e5 	call	0x1cb9a	; 0x1cb9a <__usmulhisi3>
    76a8:	2b 01       	movw	r4, r22
    76aa:	3c 01       	movw	r6, r24
    76ac:	c5 01       	movw	r24, r10
    76ae:	b4 01       	movw	r22, r8
    76b0:	e2 dd       	rcall	.-1084   	; 0x7276 <is_dst>
    76b2:	89 2b       	or	r24, r25
    76b4:	51 f0       	breq	.+20     	; 0x76ca <normalize+0x35c>
    76b6:	50 e1       	ldi	r21, 0x10	; 16
    76b8:	45 1a       	sub	r4, r21
    76ba:	5e e0       	ldi	r21, 0x0E	; 14
    76bc:	55 0a       	sbc	r5, r21
    76be:	61 08       	sbc	r6, r1
    76c0:	71 08       	sbc	r7, r1
    76c2:	cc 24       	eor	r12, r12
    76c4:	c3 94       	inc	r12
    76c6:	d1 2c       	mov	r13, r1
    76c8:	08 c0       	rjmp	.+16     	; 0x76da <normalize+0x36c>
    76ca:	c1 2c       	mov	r12, r1
    76cc:	d1 2c       	mov	r13, r1
    76ce:	05 c0       	rjmp	.+10     	; 0x76da <normalize+0x36c>
    76d0:	c1 2c       	mov	r12, r1
    76d2:	d1 2c       	mov	r13, r1
    76d4:	41 2c       	mov	r4, r1
    76d6:	51 2c       	mov	r5, r1
    76d8:	32 01       	movw	r6, r4
    76da:	87 01       	movw	r16, r14
    76dc:	a3 01       	movw	r20, r6
    76de:	92 01       	movw	r18, r4
    76e0:	c5 01       	movw	r24, r10
    76e2:	b4 01       	movw	r22, r8
    76e4:	59 dc       	rcall	.-1870   	; 0x6f98 <time_to_tm>
    76e6:	c1 14       	cp	r12, r1
    76e8:	d1 04       	cpc	r13, r1
    76ea:	29 f0       	breq	.+10     	; 0x76f6 <normalize+0x388>
    76ec:	21 e0       	ldi	r18, 0x01	; 1
    76ee:	30 e0       	ldi	r19, 0x00	; 0
    76f0:	f7 01       	movw	r30, r14
    76f2:	31 8b       	std	Z+17, r19	; 0x11
    76f4:	20 8b       	std	Z+16, r18	; 0x10
    76f6:	2a 96       	adiw	r28, 0x0a	; 10
    76f8:	e2 e1       	ldi	r30, 0x12	; 18
    76fa:	0c 94 0f e6 	jmp	0x1cc1e	; 0x1cc1e <__epilogue_restores__>

000076fe <timegm>:
    76fe:	60 e0       	ldi	r22, 0x00	; 0
    7700:	70 e0       	ldi	r23, 0x00	; 0
    7702:	35 ce       	rjmp	.-918    	; 0x736e <normalize>
    7704:	08 95       	ret

00007706 <setdate_r>:
    7706:	cf 92       	push	r12
    7708:	df 92       	push	r13
    770a:	ef 92       	push	r14
    770c:	ff 92       	push	r15
    770e:	cf 93       	push	r28
    7710:	df 93       	push	r29
    7712:	cd b7       	in	r28, 0x3d	; 61
    7714:	de b7       	in	r29, 0x3e	; 62
    7716:	a0 97       	sbiw	r28, 0x20	; 32
    7718:	0f b6       	in	r0, 0x3f	; 63
    771a:	f8 94       	cli
    771c:	de bf       	out	0x3e, r29	; 62
    771e:	0f be       	out	0x3f, r0	; 63
    7720:	cd bf       	out	0x3d, r28	; 61
    7722:	98 a3       	std	Y+32, r25	; 0x20
    7724:	8f 8f       	std	Y+31, r24	; 0x1f
    7726:	1a 82       	std	Y+2, r1	; 0x02
    7728:	19 82       	std	Y+1, r1	; 0x01
    772a:	1c 82       	std	Y+4, r1	; 0x04
    772c:	1b 82       	std	Y+3, r1	; 0x03
    772e:	1e 82       	std	Y+6, r1	; 0x06
    7730:	1d 82       	std	Y+5, r1	; 0x05
    7732:	18 86       	std	Y+8, r1	; 0x08
    7734:	1f 82       	std	Y+7, r1	; 0x07
    7736:	1a 86       	std	Y+10, r1	; 0x0a
    7738:	19 86       	std	Y+9, r1	; 0x09
    773a:	1c 86       	std	Y+12, r1	; 0x0c
    773c:	1b 86       	std	Y+11, r1	; 0x0b
    773e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7740:	98 a1       	ldd	r25, Y+32	; 0x20
    7742:	fc 01       	movw	r30, r24
    7744:	20 81       	ld	r18, Z
    7746:	20 32       	cpi	r18, 0x20	; 32
    7748:	21 f4       	brne	.+8      	; 0x7752 <setdate_r+0x4c>
    774a:	01 96       	adiw	r24, 0x01	; 1
    774c:	98 a3       	std	Y+32, r25	; 0x20
    774e:	8f 8f       	std	Y+31, r24	; 0x1f
    7750:	f6 cf       	rjmp	.-20     	; 0x773e <setdate_r+0x38>
    7752:	4a e0       	ldi	r20, 0x0A	; 10
    7754:	50 e0       	ldi	r21, 0x00	; 0
    7756:	be 01       	movw	r22, r28
    7758:	61 5e       	subi	r22, 0xE1	; 225
    775a:	7f 4f       	sbci	r23, 0xFF	; 255
    775c:	0e 94 99 47 	call	0x8f32	; 0x8f32 <strtol>
    7760:	7c 87       	std	Y+12, r23	; 0x0c
    7762:	6b 87       	std	Y+11, r22	; 0x0b
    7764:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7766:	98 a1       	ldd	r25, Y+32	; 0x20
    7768:	fc 01       	movw	r30, r24
    776a:	20 81       	ld	r18, Z
    776c:	20 32       	cpi	r18, 0x20	; 32
    776e:	21 f4       	brne	.+8      	; 0x7778 <setdate_r+0x72>
    7770:	01 96       	adiw	r24, 0x01	; 1
    7772:	98 a3       	std	Y+32, r25	; 0x20
    7774:	8f 8f       	std	Y+31, r24	; 0x1f
    7776:	f6 cf       	rjmp	.-20     	; 0x7764 <setdate_r+0x5e>
    7778:	4a e0       	ldi	r20, 0x0A	; 10
    777a:	50 e0       	ldi	r21, 0x00	; 0
    777c:	be 01       	movw	r22, r28
    777e:	61 5e       	subi	r22, 0xE1	; 225
    7780:	7f 4f       	sbci	r23, 0xFF	; 255
    7782:	0e 94 99 47 	call	0x8f32	; 0x8f32 <strtol>
    7786:	7a 87       	std	Y+10, r23	; 0x0a
    7788:	69 87       	std	Y+9, r22	; 0x09
    778a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    778c:	98 a1       	ldd	r25, Y+32	; 0x20
    778e:	fc 01       	movw	r30, r24
    7790:	20 81       	ld	r18, Z
    7792:	20 32       	cpi	r18, 0x20	; 32
    7794:	21 f4       	brne	.+8      	; 0x779e <setdate_r+0x98>
    7796:	01 96       	adiw	r24, 0x01	; 1
    7798:	98 a3       	std	Y+32, r25	; 0x20
    779a:	8f 8f       	std	Y+31, r24	; 0x1f
    779c:	f6 cf       	rjmp	.-20     	; 0x778a <setdate_r+0x84>
    779e:	4a e0       	ldi	r20, 0x0A	; 10
    77a0:	50 e0       	ldi	r21, 0x00	; 0
    77a2:	be 01       	movw	r22, r28
    77a4:	61 5e       	subi	r22, 0xE1	; 225
    77a6:	7f 4f       	sbci	r23, 0xFF	; 255
    77a8:	0e 94 99 47 	call	0x8f32	; 0x8f32 <strtol>
    77ac:	78 87       	std	Y+8, r23	; 0x08
    77ae:	6f 83       	std	Y+7, r22	; 0x07
    77b0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    77b2:	98 a1       	ldd	r25, Y+32	; 0x20
    77b4:	fc 01       	movw	r30, r24
    77b6:	20 81       	ld	r18, Z
    77b8:	20 32       	cpi	r18, 0x20	; 32
    77ba:	21 f4       	brne	.+8      	; 0x77c4 <setdate_r+0xbe>
    77bc:	01 96       	adiw	r24, 0x01	; 1
    77be:	98 a3       	std	Y+32, r25	; 0x20
    77c0:	8f 8f       	std	Y+31, r24	; 0x1f
    77c2:	f6 cf       	rjmp	.-20     	; 0x77b0 <setdate_r+0xaa>
    77c4:	4a e0       	ldi	r20, 0x0A	; 10
    77c6:	50 e0       	ldi	r21, 0x00	; 0
    77c8:	be 01       	movw	r22, r28
    77ca:	61 5e       	subi	r22, 0xE1	; 225
    77cc:	7f 4f       	sbci	r23, 0xFF	; 255
    77ce:	0e 94 99 47 	call	0x8f32	; 0x8f32 <strtol>
    77d2:	7e 83       	std	Y+6, r23	; 0x06
    77d4:	6d 83       	std	Y+5, r22	; 0x05
    77d6:	ef 8d       	ldd	r30, Y+31	; 0x1f
    77d8:	f8 a1       	ldd	r31, Y+32	; 0x20
    77da:	80 81       	ld	r24, Z
    77dc:	88 23       	and	r24, r24
    77de:	39 f0       	breq	.+14     	; 0x77ee <setdate_r+0xe8>
    77e0:	80 32       	cpi	r24, 0x20	; 32
    77e2:	11 f0       	breq	.+4      	; 0x77e8 <setdate_r+0xe2>
    77e4:	8a 33       	cpi	r24, 0x3A	; 58
    77e6:	19 f4       	brne	.+6      	; 0x77ee <setdate_r+0xe8>
    77e8:	31 96       	adiw	r30, 0x01	; 1
    77ea:	f8 a3       	std	Y+32, r31	; 0x20
    77ec:	ef 8f       	std	Y+31, r30	; 0x1f
    77ee:	4a e0       	ldi	r20, 0x0A	; 10
    77f0:	50 e0       	ldi	r21, 0x00	; 0
    77f2:	be 01       	movw	r22, r28
    77f4:	61 5e       	subi	r22, 0xE1	; 225
    77f6:	7f 4f       	sbci	r23, 0xFF	; 255
    77f8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    77fa:	98 a1       	ldd	r25, Y+32	; 0x20
    77fc:	0e 94 99 47 	call	0x8f32	; 0x8f32 <strtol>
    7800:	7c 83       	std	Y+4, r23	; 0x04
    7802:	6b 83       	std	Y+3, r22	; 0x03
    7804:	ef 8d       	ldd	r30, Y+31	; 0x1f
    7806:	f8 a1       	ldd	r31, Y+32	; 0x20
    7808:	80 81       	ld	r24, Z
    780a:	88 23       	and	r24, r24
    780c:	39 f0       	breq	.+14     	; 0x781c <setdate_r+0x116>
    780e:	80 32       	cpi	r24, 0x20	; 32
    7810:	11 f0       	breq	.+4      	; 0x7816 <setdate_r+0x110>
    7812:	8a 33       	cpi	r24, 0x3A	; 58
    7814:	19 f4       	brne	.+6      	; 0x781c <setdate_r+0x116>
    7816:	31 96       	adiw	r30, 0x01	; 1
    7818:	f8 a3       	std	Y+32, r31	; 0x20
    781a:	ef 8f       	std	Y+31, r30	; 0x1f
    781c:	4a e0       	ldi	r20, 0x0A	; 10
    781e:	50 e0       	ldi	r21, 0x00	; 0
    7820:	be 01       	movw	r22, r28
    7822:	61 5e       	subi	r22, 0xE1	; 225
    7824:	7f 4f       	sbci	r23, 0xFF	; 255
    7826:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7828:	98 a1       	ldd	r25, Y+32	; 0x20
    782a:	0e 94 99 47 	call	0x8f32	; 0x8f32 <strtol>
    782e:	7a 83       	std	Y+2, r23	; 0x02
    7830:	69 83       	std	Y+1, r22	; 0x01
    7832:	29 85       	ldd	r18, Y+9	; 0x09
    7834:	3a 85       	ldd	r19, Y+10	; 0x0a
    7836:	21 50       	subi	r18, 0x01	; 1
    7838:	31 09       	sbc	r19, r1
    783a:	3a 87       	std	Y+10, r19	; 0x0a
    783c:	29 87       	std	Y+9, r18	; 0x09
    783e:	8b 85       	ldd	r24, Y+11	; 0x0b
    7840:	9c 85       	ldd	r25, Y+12	; 0x0c
    7842:	ac 01       	movw	r20, r24
    7844:	42 5b       	subi	r20, 0xB2	; 178
    7846:	57 40       	sbci	r21, 0x07	; 7
    7848:	45 34       	cpi	r20, 0x45	; 69
    784a:	51 05       	cpc	r21, r1
    784c:	28 f0       	brcs	.+10     	; 0x7858 <setdate_r+0x152>
    784e:	9f 93       	push	r25
    7850:	8f 93       	push	r24
    7852:	8c e6       	ldi	r24, 0x6C	; 108
    7854:	97 e0       	ldi	r25, 0x07	; 7
    7856:	2c c0       	rjmp	.+88     	; 0x78b0 <setdate_r+0x1aa>
    7858:	8c 56       	subi	r24, 0x6C	; 108
    785a:	97 40       	sbci	r25, 0x07	; 7
    785c:	9c 87       	std	Y+12, r25	; 0x0c
    785e:	8b 87       	std	Y+11, r24	; 0x0b
    7860:	2c 30       	cpi	r18, 0x0C	; 12
    7862:	31 05       	cpc	r19, r1
    7864:	28 f0       	brcs	.+10     	; 0x7870 <setdate_r+0x16a>
    7866:	9f 93       	push	r25
    7868:	8f 93       	push	r24
    786a:	8b e5       	ldi	r24, 0x5B	; 91
    786c:	97 e0       	ldi	r25, 0x07	; 7
    786e:	20 c0       	rjmp	.+64     	; 0x78b0 <setdate_r+0x1aa>
    7870:	8f 81       	ldd	r24, Y+7	; 0x07
    7872:	98 85       	ldd	r25, Y+8	; 0x08
    7874:	9c 01       	movw	r18, r24
    7876:	21 50       	subi	r18, 0x01	; 1
    7878:	31 09       	sbc	r19, r1
    787a:	2f 31       	cpi	r18, 0x1F	; 31
    787c:	31 05       	cpc	r19, r1
    787e:	28 f0       	brcs	.+10     	; 0x788a <setdate_r+0x184>
    7880:	9f 93       	push	r25
    7882:	8f 93       	push	r24
    7884:	8a e4       	ldi	r24, 0x4A	; 74
    7886:	97 e0       	ldi	r25, 0x07	; 7
    7888:	13 c0       	rjmp	.+38     	; 0x78b0 <setdate_r+0x1aa>
    788a:	8d 81       	ldd	r24, Y+5	; 0x05
    788c:	9e 81       	ldd	r25, Y+6	; 0x06
    788e:	88 31       	cpi	r24, 0x18	; 24
    7890:	91 05       	cpc	r25, r1
    7892:	28 f0       	brcs	.+10     	; 0x789e <setdate_r+0x198>
    7894:	9f 93       	push	r25
    7896:	8f 93       	push	r24
    7898:	88 e3       	ldi	r24, 0x38	; 56
    789a:	97 e0       	ldi	r25, 0x07	; 7
    789c:	09 c0       	rjmp	.+18     	; 0x78b0 <setdate_r+0x1aa>
    789e:	8b 81       	ldd	r24, Y+3	; 0x03
    78a0:	9c 81       	ldd	r25, Y+4	; 0x04
    78a2:	8c 33       	cpi	r24, 0x3C	; 60
    78a4:	91 05       	cpc	r25, r1
    78a6:	78 f0       	brcs	.+30     	; 0x78c6 <setdate_r+0x1c0>
    78a8:	9f 93       	push	r25
    78aa:	8f 93       	push	r24
    78ac:	87 e2       	ldi	r24, 0x27	; 39
    78ae:	97 e0       	ldi	r25, 0x07	; 7
    78b0:	1f 92       	push	r1
    78b2:	9f 93       	push	r25
    78b4:	8f 93       	push	r24
    78b6:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    78ba:	0f 90       	pop	r0
    78bc:	0f 90       	pop	r0
    78be:	0f 90       	pop	r0
    78c0:	0f 90       	pop	r0
    78c2:	0f 90       	pop	r0
    78c4:	25 c0       	rjmp	.+74     	; 0x7910 <setdate_r+0x20a>
    78c6:	ce 01       	movw	r24, r28
    78c8:	01 96       	adiw	r24, 0x01	; 1
    78ca:	19 df       	rcall	.-462    	; 0x76fe <timegm>
    78cc:	6b 01       	movw	r12, r22
    78ce:	7c 01       	movw	r14, r24
    78d0:	6f 8b       	std	Y+23, r22	; 0x17
    78d2:	78 8f       	std	Y+24, r23	; 0x18
    78d4:	89 8f       	std	Y+25, r24	; 0x19
    78d6:	9a 8f       	std	Y+26, r25	; 0x1a
    78d8:	1b 8e       	std	Y+27, r1	; 0x1b
    78da:	1c 8e       	std	Y+28, r1	; 0x1c
    78dc:	1d 8e       	std	Y+29, r1	; 0x1d
    78de:	1e 8e       	std	Y+30, r1	; 0x1e
    78e0:	be 01       	movw	r22, r28
    78e2:	69 5e       	subi	r22, 0xE9	; 233
    78e4:	7f 4f       	sbci	r23, 0xFF	; 255
    78e6:	80 e0       	ldi	r24, 0x00	; 0
    78e8:	90 e0       	ldi	r25, 0x00	; 0
    78ea:	08 db       	rcall	.-2544   	; 0x6efc <clock_settime>
    78ec:	b7 01       	movw	r22, r14
    78ee:	a6 01       	movw	r20, r12
    78f0:	81 e0       	ldi	r24, 0x01	; 1
    78f2:	90 e0       	ldi	r25, 0x00	; 0
    78f4:	0e 94 e9 2f 	call	0x5fd2	; 0x5fd2 <rtc_init>
    78f8:	81 11       	cpse	r24, r1
    78fa:	0d c0       	rjmp	.+26     	; 0x7916 <setdate_r+0x210>
    78fc:	80 e1       	ldi	r24, 0x10	; 16
    78fe:	97 e0       	ldi	r25, 0x07	; 7
    7900:	1f 92       	push	r1
    7902:	9f 93       	push	r25
    7904:	8f 93       	push	r24
    7906:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    790a:	0f 90       	pop	r0
    790c:	0f 90       	pop	r0
    790e:	0f 90       	pop	r0
    7910:	8f ef       	ldi	r24, 0xFF	; 255
    7912:	9f ef       	ldi	r25, 0xFF	; 255
    7914:	02 c0       	rjmp	.+4      	; 0x791a <setdate_r+0x214>
    7916:	80 e0       	ldi	r24, 0x00	; 0
    7918:	90 e0       	ldi	r25, 0x00	; 0
    791a:	a0 96       	adiw	r28, 0x20	; 32
    791c:	0f b6       	in	r0, 0x3f	; 63
    791e:	f8 94       	cli
    7920:	de bf       	out	0x3e, r29	; 62
    7922:	0f be       	out	0x3f, r0	; 63
    7924:	cd bf       	out	0x3d, r28	; 61
    7926:	df 91       	pop	r29
    7928:	cf 91       	pop	r28
    792a:	ff 90       	pop	r15
    792c:	ef 90       	pop	r14
    792e:	df 90       	pop	r13
    7930:	cf 90       	pop	r12
    7932:	08 95       	ret

00007934 <setdate>:
    7934:	a8 e2       	ldi	r26, 0x28	; 40
    7936:	b0 e0       	ldi	r27, 0x00	; 0
    7938:	e0 ea       	ldi	r30, 0xA0	; 160
    793a:	fc e3       	ldi	r31, 0x3C	; 60
    793c:	0c 94 03 e6 	jmp	0x1cc06	; 0x1cc06 <__prologue_saves__+0x20>
    7940:	8e e7       	ldi	r24, 0x7E	; 126
    7942:	97 e0       	ldi	r25, 0x07	; 7
    7944:	1f 92       	push	r1
    7946:	9f 93       	push	r25
    7948:	8f 93       	push	r24
    794a:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    794e:	40 91 bf 1b 	lds	r20, 0x1BBF	; 0x801bbf <__iob>
    7952:	50 91 c0 1b 	lds	r21, 0x1BC0	; 0x801bc0 <__iob+0x1>
    7956:	67 e2       	ldi	r22, 0x27	; 39
    7958:	70 e0       	ldi	r23, 0x00	; 0
    795a:	ce 01       	movw	r24, r28
    795c:	01 96       	adiw	r24, 0x01	; 1
    795e:	0e 94 74 77 	call	0xeee8	; 0xeee8 <fgets>
    7962:	ce 01       	movw	r24, r28
    7964:	01 96       	adiw	r24, 0x01	; 1
    7966:	cf de       	rcall	.-610    	; 0x7706 <setdate_r>
    7968:	0f 90       	pop	r0
    796a:	0f 90       	pop	r0
    796c:	0f 90       	pop	r0
    796e:	a8 96       	adiw	r28, 0x28	; 40
    7970:	e2 e0       	ldi	r30, 0x02	; 2
    7972:	0c 94 1f e6 	jmp	0x1cc3e	; 0x1cc3e <__epilogue_restores__+0x20>

00007976 <find_dst>:
    7976:	a8 e2       	ldi	r26, 0x28	; 40
    7978:	b0 e0       	ldi	r27, 0x00	; 0
    797a:	e1 ec       	ldi	r30, 0xC1	; 193
    797c:	fc e3       	ldi	r31, 0x3C	; 60
    797e:	0c 94 f3 e5 	jmp	0x1cbe6	; 0x1cbe6 <__prologue_saves__>
    7982:	3c 01       	movw	r6, r24
    7984:	1a 01       	movw	r2, r20
    7986:	2b 01       	movw	r4, r22
    7988:	49 01       	movw	r8, r18
    798a:	1c a3       	std	Y+36, r17	; 0x24
    798c:	0b a3       	std	Y+35, r16	; 0x23
    798e:	de a2       	std	Y+38, r13	; 0x26
    7990:	cd a2       	std	Y+37, r12	; 0x25
    7992:	b8 a6       	std	Y+40, r11	; 0x28
    7994:	af a2       	std	Y+39, r10	; 0x27
    7996:	be 01       	movw	r22, r28
    7998:	61 5e       	subi	r22, 0xE1	; 225
    799a:	7f 4f       	sbci	r23, 0xFF	; 255
    799c:	ce 01       	movw	r24, r28
    799e:	47 96       	adiw	r24, 0x17	; 23
    79a0:	1b dc       	rcall	.-1994   	; 0x71d8 <gettimeofday>
    79a2:	af 8d       	ldd	r26, Y+31	; 0x1f
    79a4:	b8 a1       	ldd	r27, Y+32	; 0x20
    79a6:	2c e3       	ldi	r18, 0x3C	; 60
    79a8:	30 e0       	ldi	r19, 0x00	; 0
    79aa:	0e 94 cd e5 	call	0x1cb9a	; 0x1cb9a <__usmulhisi3>
    79ae:	5b 01       	movw	r10, r22
    79b0:	6c 01       	movw	r12, r24
    79b2:	61 14       	cp	r6, r1
    79b4:	71 04       	cpc	r7, r1
    79b6:	31 f0       	breq	.+12     	; 0x79c4 <find_dst+0x4e>
    79b8:	20 e1       	ldi	r18, 0x10	; 16
    79ba:	a2 1a       	sub	r10, r18
    79bc:	2e e0       	ldi	r18, 0x0E	; 14
    79be:	b2 0a       	sbc	r11, r18
    79c0:	c1 08       	sbc	r12, r1
    79c2:	d1 08       	sbc	r13, r1
    79c4:	81 14       	cp	r8, r1
    79c6:	91 04       	cpc	r9, r1
    79c8:	39 f0       	breq	.+14     	; 0x79d8 <find_dst+0x62>
    79ca:	4c e6       	ldi	r20, 0x6C	; 108
    79cc:	84 1a       	sub	r8, r20
    79ce:	47 e0       	ldi	r20, 0x07	; 7
    79d0:	94 0a       	sbc	r9, r20
    79d2:	9c 86       	std	Y+12, r9	; 0x0c
    79d4:	8b 86       	std	Y+11, r8	; 0x0b
    79d6:	11 c0       	rjmp	.+34     	; 0x79fa <find_dst+0x84>
    79d8:	21 14       	cp	r2, r1
    79da:	31 04       	cpc	r3, r1
    79dc:	41 04       	cpc	r4, r1
    79de:	51 04       	cpc	r5, r1
    79e0:	21 f4       	brne	.+8      	; 0x79ea <find_dst+0x74>
    79e2:	2f 88       	ldd	r2, Y+23	; 0x17
    79e4:	38 8c       	ldd	r3, Y+24	; 0x18
    79e6:	49 8c       	ldd	r4, Y+25	; 0x19
    79e8:	5a 8c       	ldd	r5, Y+26	; 0x1a
    79ea:	8e 01       	movw	r16, r28
    79ec:	0f 5f       	subi	r16, 0xFF	; 255
    79ee:	1f 4f       	sbci	r17, 0xFF	; 255
    79f0:	a6 01       	movw	r20, r12
    79f2:	95 01       	movw	r18, r10
    79f4:	c2 01       	movw	r24, r4
    79f6:	b1 01       	movw	r22, r2
    79f8:	cf da       	rcall	.-2658   	; 0x6f98 <time_to_tm>
    79fa:	8b a1       	ldd	r24, Y+35	; 0x23
    79fc:	9c a1       	ldd	r25, Y+36	; 0x24
    79fe:	01 97       	sbiw	r24, 0x01	; 1
    7a00:	9a 87       	std	Y+10, r25	; 0x0a
    7a02:	89 87       	std	Y+9, r24	; 0x09
    7a04:	81 e0       	ldi	r24, 0x01	; 1
    7a06:	90 e0       	ldi	r25, 0x00	; 0
    7a08:	98 87       	std	Y+8, r25	; 0x08
    7a0a:	8f 83       	std	Y+7, r24	; 0x07
    7a0c:	8f a1       	ldd	r24, Y+39	; 0x27
    7a0e:	98 a5       	ldd	r25, Y+40	; 0x28
    7a10:	9e 83       	std	Y+6, r25	; 0x06
    7a12:	8d 83       	std	Y+5, r24	; 0x05
    7a14:	1c 82       	std	Y+4, r1	; 0x04
    7a16:	1b 82       	std	Y+3, r1	; 0x03
    7a18:	1a 82       	std	Y+2, r1	; 0x02
    7a1a:	19 82       	std	Y+1, r1	; 0x01
    7a1c:	ce 01       	movw	r24, r28
    7a1e:	01 96       	adiw	r24, 0x01	; 1
    7a20:	6e de       	rcall	.-804    	; 0x76fe <timegm>
    7a22:	45 01       	movw	r8, r10
    7a24:	56 01       	movw	r10, r12
    7a26:	86 0e       	add	r8, r22
    7a28:	97 1e       	adc	r9, r23
    7a2a:	a8 1e       	adc	r10, r24
    7a2c:	b9 1e       	adc	r11, r25
    7a2e:	8e 01       	movw	r16, r28
    7a30:	0f 5f       	subi	r16, 0xFF	; 255
    7a32:	1f 4f       	sbci	r17, 0xFF	; 255
    7a34:	20 e0       	ldi	r18, 0x00	; 0
    7a36:	30 e0       	ldi	r19, 0x00	; 0
    7a38:	a9 01       	movw	r20, r18
    7a3a:	c5 01       	movw	r24, r10
    7a3c:	b4 01       	movw	r22, r8
    7a3e:	ac da       	rcall	.-2728   	; 0x6f98 <time_to_tm>
    7a40:	2d 85       	ldd	r18, Y+13	; 0x0d
    7a42:	3e 85       	ldd	r19, Y+14	; 0x0e
    7a44:	e7 e0       	ldi	r30, 0x07	; 7
    7a46:	f0 e0       	ldi	r31, 0x00	; 0
    7a48:	c9 01       	movw	r24, r18
    7a4a:	bf 01       	movw	r22, r30
    7a4c:	0e 94 5e e5 	call	0x1cabc	; 0x1cabc <__divmodhi4>
    7a50:	4d a1       	ldd	r20, Y+37	; 0x25
    7a52:	5e a1       	ldd	r21, Y+38	; 0x26
    7a54:	48 17       	cp	r20, r24
    7a56:	59 07       	cpc	r21, r25
    7a58:	21 f4       	brne	.+8      	; 0x7a62 <find_dst+0xec>
    7a5a:	51 e0       	ldi	r21, 0x01	; 1
    7a5c:	e5 1a       	sub	r14, r21
    7a5e:	f1 08       	sbc	r15, r1
    7a60:	51 f0       	breq	.+20     	; 0x7a76 <find_dst+0x100>
    7a62:	80 e8       	ldi	r24, 0x80	; 128
    7a64:	88 0e       	add	r8, r24
    7a66:	81 e5       	ldi	r24, 0x51	; 81
    7a68:	98 1e       	adc	r9, r24
    7a6a:	81 e0       	ldi	r24, 0x01	; 1
    7a6c:	a8 1e       	adc	r10, r24
    7a6e:	b1 1c       	adc	r11, r1
    7a70:	2f 5f       	subi	r18, 0xFF	; 255
    7a72:	3f 4f       	sbci	r19, 0xFF	; 255
    7a74:	e9 cf       	rjmp	.-46     	; 0x7a48 <find_dst+0xd2>
    7a76:	c5 01       	movw	r24, r10
    7a78:	b4 01       	movw	r22, r8
    7a7a:	a8 96       	adiw	r28, 0x28	; 40
    7a7c:	e2 e1       	ldi	r30, 0x12	; 18
    7a7e:	0c 94 0f e6 	jmp	0x1cc1e	; 0x1cc1e <__epilogue_restores__>

00007a82 <set_dst>:
    7a82:	4f 92       	push	r4
    7a84:	5f 92       	push	r5
    7a86:	6f 92       	push	r6
    7a88:	7f 92       	push	r7
    7a8a:	af 92       	push	r10
    7a8c:	bf 92       	push	r11
    7a8e:	cf 92       	push	r12
    7a90:	df 92       	push	r13
    7a92:	ef 92       	push	r14
    7a94:	ff 92       	push	r15
    7a96:	0f 93       	push	r16
    7a98:	1f 93       	push	r17
    7a9a:	cf 93       	push	r28
    7a9c:	df 93       	push	r29
    7a9e:	cd b7       	in	r28, 0x3d	; 61
    7aa0:	de b7       	in	r29, 0x3e	; 62
    7aa2:	2c 97       	sbiw	r28, 0x0c	; 12
    7aa4:	0f b6       	in	r0, 0x3f	; 63
    7aa6:	f8 94       	cli
    7aa8:	de bf       	out	0x3e, r29	; 62
    7aaa:	0f be       	out	0x3f, r0	; 63
    7aac:	cd bf       	out	0x3d, r28	; 61
    7aae:	2b 01       	movw	r4, r22
    7ab0:	3c 01       	movw	r6, r24
    7ab2:	67 2b       	or	r22, r23
    7ab4:	68 2b       	or	r22, r24
    7ab6:	69 2b       	or	r22, r25
    7ab8:	51 f4       	brne	.+20     	; 0x7ace <set_dst+0x4c>
    7aba:	be 01       	movw	r22, r28
    7abc:	67 5f       	subi	r22, 0xF7	; 247
    7abe:	7f 4f       	sbci	r23, 0xFF	; 255
    7ac0:	ce 01       	movw	r24, r28
    7ac2:	01 96       	adiw	r24, 0x01	; 1
    7ac4:	89 db       	rcall	.-2286   	; 0x71d8 <gettimeofday>
    7ac6:	49 80       	ldd	r4, Y+1	; 0x01
    7ac8:	5a 80       	ldd	r5, Y+2	; 0x02
    7aca:	6b 80       	ldd	r6, Y+3	; 0x03
    7acc:	7c 80       	ldd	r7, Y+4	; 0x04
    7ace:	80 91 76 19 	lds	r24, 0x1976	; 0x801976 <dst+0x8>
    7ad2:	90 91 77 19 	lds	r25, 0x1977	; 0x801977 <dst+0x9>
    7ad6:	a0 91 78 19 	lds	r26, 0x1978	; 0x801978 <dst+0xa>
    7ada:	b0 91 79 19 	lds	r27, 0x1979	; 0x801979 <dst+0xb>
    7ade:	84 15       	cp	r24, r4
    7ae0:	95 05       	cpc	r25, r5
    7ae2:	a6 05       	cpc	r26, r6
    7ae4:	b7 05       	cpc	r27, r7
    7ae6:	50 f0       	brcs	.+20     	; 0x7afc <set_dst+0x7a>
    7ae8:	84 19       	sub	r24, r4
    7aea:	95 09       	sbc	r25, r5
    7aec:	a6 09       	sbc	r26, r6
    7aee:	b7 09       	sbc	r27, r7
    7af0:	80 38       	cpi	r24, 0x80	; 128
    7af2:	91 45       	sbci	r25, 0x51	; 81
    7af4:	a1 40       	sbci	r26, 0x01	; 1
    7af6:	b1 05       	cpc	r27, r1
    7af8:	70 f4       	brcc	.+28     	; 0x7b16 <set_dst+0x94>
    7afa:	42 c0       	rjmp	.+132    	; 0x7b80 <set_dst+0xfe>
    7afc:	a3 01       	movw	r20, r6
    7afe:	92 01       	movw	r18, r4
    7b00:	28 1b       	sub	r18, r24
    7b02:	39 0b       	sbc	r19, r25
    7b04:	4a 0b       	sbc	r20, r26
    7b06:	5b 0b       	sbc	r21, r27
    7b08:	da 01       	movw	r26, r20
    7b0a:	c9 01       	movw	r24, r18
    7b0c:	80 38       	cpi	r24, 0x80	; 128
    7b0e:	91 45       	sbci	r25, 0x51	; 81
    7b10:	a1 40       	sbci	r26, 0x01	; 1
    7b12:	b1 05       	cpc	r27, r1
    7b14:	a8 f1       	brcs	.+106    	; 0x7b80 <set_dst+0xfe>
    7b16:	40 92 76 19 	sts	0x1976, r4	; 0x801976 <dst+0x8>
    7b1a:	50 92 77 19 	sts	0x1977, r5	; 0x801977 <dst+0x9>
    7b1e:	60 92 78 19 	sts	0x1978, r6	; 0x801978 <dst+0xa>
    7b22:	70 92 79 19 	sts	0x1979, r7	; 0x801979 <dst+0xb>
    7b26:	82 e0       	ldi	r24, 0x02	; 2
    7b28:	a8 2e       	mov	r10, r24
    7b2a:	b1 2c       	mov	r11, r1
    7b2c:	c1 2c       	mov	r12, r1
    7b2e:	d1 2c       	mov	r13, r1
    7b30:	92 e0       	ldi	r25, 0x02	; 2
    7b32:	e9 2e       	mov	r14, r25
    7b34:	f1 2c       	mov	r15, r1
    7b36:	03 e0       	ldi	r16, 0x03	; 3
    7b38:	10 e0       	ldi	r17, 0x00	; 0
    7b3a:	20 e0       	ldi	r18, 0x00	; 0
    7b3c:	30 e0       	ldi	r19, 0x00	; 0
    7b3e:	b3 01       	movw	r22, r6
    7b40:	a2 01       	movw	r20, r4
    7b42:	80 e0       	ldi	r24, 0x00	; 0
    7b44:	90 e0       	ldi	r25, 0x00	; 0
    7b46:	17 df       	rcall	.-466    	; 0x7976 <find_dst>
    7b48:	60 93 6e 19 	sts	0x196E, r22	; 0x80196e <dst>
    7b4c:	70 93 6f 19 	sts	0x196F, r23	; 0x80196f <dst+0x1>
    7b50:	80 93 70 19 	sts	0x1970, r24	; 0x801970 <dst+0x2>
    7b54:	90 93 71 19 	sts	0x1971, r25	; 0x801971 <dst+0x3>
    7b58:	ee 24       	eor	r14, r14
    7b5a:	e3 94       	inc	r14
    7b5c:	f1 2c       	mov	r15, r1
    7b5e:	0b e0       	ldi	r16, 0x0B	; 11
    7b60:	10 e0       	ldi	r17, 0x00	; 0
    7b62:	20 e0       	ldi	r18, 0x00	; 0
    7b64:	30 e0       	ldi	r19, 0x00	; 0
    7b66:	b3 01       	movw	r22, r6
    7b68:	a2 01       	movw	r20, r4
    7b6a:	81 e0       	ldi	r24, 0x01	; 1
    7b6c:	90 e0       	ldi	r25, 0x00	; 0
    7b6e:	03 df       	rcall	.-506    	; 0x7976 <find_dst>
    7b70:	60 93 72 19 	sts	0x1972, r22	; 0x801972 <dst+0x4>
    7b74:	70 93 73 19 	sts	0x1973, r23	; 0x801973 <dst+0x5>
    7b78:	80 93 74 19 	sts	0x1974, r24	; 0x801974 <dst+0x6>
    7b7c:	90 93 75 19 	sts	0x1975, r25	; 0x801975 <dst+0x7>
    7b80:	2c 96       	adiw	r28, 0x0c	; 12
    7b82:	0f b6       	in	r0, 0x3f	; 63
    7b84:	f8 94       	cli
    7b86:	de bf       	out	0x3e, r29	; 62
    7b88:	0f be       	out	0x3f, r0	; 63
    7b8a:	cd bf       	out	0x3d, r28	; 61
    7b8c:	df 91       	pop	r29
    7b8e:	cf 91       	pop	r28
    7b90:	1f 91       	pop	r17
    7b92:	0f 91       	pop	r16
    7b94:	ff 90       	pop	r15
    7b96:	ef 90       	pop	r14
    7b98:	df 90       	pop	r13
    7b9a:	cf 90       	pop	r12
    7b9c:	bf 90       	pop	r11
    7b9e:	af 90       	pop	r10
    7ba0:	7f 90       	pop	r7
    7ba2:	6f 90       	pop	r6
    7ba4:	5f 90       	pop	r5
    7ba6:	4f 90       	pop	r4
    7ba8:	08 95       	ret

00007baa <asctime_r>:
    7baa:	0f 93       	push	r16
    7bac:	1f 93       	push	r17
    7bae:	cf 93       	push	r28
    7bb0:	df 93       	push	r29
    7bb2:	ec 01       	movw	r28, r24
    7bb4:	8b 01       	movw	r16, r22
    7bb6:	60 e0       	ldi	r22, 0x00	; 0
    7bb8:	70 e0       	ldi	r23, 0x00	; 0
    7bba:	d9 db       	rcall	.-2126   	; 0x736e <normalize>
    7bbc:	20 e2       	ldi	r18, 0x20	; 32
    7bbe:	d8 01       	movw	r26, r16
    7bc0:	82 2f       	mov	r24, r18
    7bc2:	1d 92       	st	X+, r1
    7bc4:	8a 95       	dec	r24
    7bc6:	e9 f7       	brne	.-6      	; 0x7bc2 <asctime_r+0x18>
    7bc8:	8a 85       	ldd	r24, Y+10	; 0x0a
    7bca:	9b 85       	ldd	r25, Y+11	; 0x0b
    7bcc:	84 59       	subi	r24, 0x94	; 148
    7bce:	98 4f       	sbci	r25, 0xF8	; 248
    7bd0:	9f 93       	push	r25
    7bd2:	8f 93       	push	r24
    7bd4:	89 81       	ldd	r24, Y+1	; 0x01
    7bd6:	8f 93       	push	r24
    7bd8:	88 81       	ld	r24, Y
    7bda:	8f 93       	push	r24
    7bdc:	8b 81       	ldd	r24, Y+3	; 0x03
    7bde:	8f 93       	push	r24
    7be0:	8a 81       	ldd	r24, Y+2	; 0x02
    7be2:	8f 93       	push	r24
    7be4:	8d 81       	ldd	r24, Y+5	; 0x05
    7be6:	8f 93       	push	r24
    7be8:	8c 81       	ldd	r24, Y+4	; 0x04
    7bea:	8f 93       	push	r24
    7bec:	8f 81       	ldd	r24, Y+7	; 0x07
    7bee:	8f 93       	push	r24
    7bf0:	8e 81       	ldd	r24, Y+6	; 0x06
    7bf2:	8f 93       	push	r24
    7bf4:	e8 85       	ldd	r30, Y+8	; 0x08
    7bf6:	f9 85       	ldd	r31, Y+9	; 0x09
    7bf8:	ee 0f       	add	r30, r30
    7bfa:	ff 1f       	adc	r31, r31
    7bfc:	ee 5e       	subi	r30, 0xEE	; 238
    7bfe:	fe 4f       	sbci	r31, 0xFE	; 254
    7c00:	81 81       	ldd	r24, Z+1	; 0x01
    7c02:	8f 93       	push	r24
    7c04:	80 81       	ld	r24, Z
    7c06:	8f 93       	push	r24
    7c08:	ec 85       	ldd	r30, Y+12	; 0x0c
    7c0a:	fd 85       	ldd	r31, Y+13	; 0x0d
    7c0c:	ee 0f       	add	r30, r30
    7c0e:	ff 1f       	adc	r31, r31
    7c10:	e4 5d       	subi	r30, 0xD4	; 212
    7c12:	fe 4f       	sbci	r31, 0xFE	; 254
    7c14:	81 81       	ldd	r24, Z+1	; 0x01
    7c16:	8f 93       	push	r24
    7c18:	80 81       	ld	r24, Z
    7c1a:	8f 93       	push	r24
    7c1c:	8f e9       	ldi	r24, 0x9F	; 159
    7c1e:	97 e0       	ldi	r25, 0x07	; 7
    7c20:	1f 92       	push	r1
    7c22:	9f 93       	push	r25
    7c24:	8f 93       	push	r24
    7c26:	1f 92       	push	r1
    7c28:	2f 93       	push	r18
    7c2a:	1f 93       	push	r17
    7c2c:	0f 93       	push	r16
    7c2e:	0e 94 36 47 	call	0x8e6c	; 0x8e6c <snprintf_P>
    7c32:	ad b7       	in	r26, 0x3d	; 61
    7c34:	be b7       	in	r27, 0x3e	; 62
    7c36:	55 96       	adiw	r26, 0x15	; 21
    7c38:	0f b6       	in	r0, 0x3f	; 63
    7c3a:	f8 94       	cli
    7c3c:	be bf       	out	0x3e, r27	; 62
    7c3e:	0f be       	out	0x3f, r0	; 63
    7c40:	ad bf       	out	0x3d, r26	; 61
    7c42:	c8 01       	movw	r24, r16
    7c44:	df 91       	pop	r29
    7c46:	cf 91       	pop	r28
    7c48:	1f 91       	pop	r17
    7c4a:	0f 91       	pop	r16
    7c4c:	08 95       	ret

00007c4e <asctime>:
    7c4e:	64 ef       	ldi	r22, 0xF4	; 244
    7c50:	77 e1       	ldi	r23, 0x17	; 23
    7c52:	ab cf       	rjmp	.-170    	; 0x7baa <asctime_r>
    7c54:	08 95       	ret

00007c56 <ctime_gm>:
    7c56:	a6 e1       	ldi	r26, 0x16	; 22
    7c58:	b0 e0       	ldi	r27, 0x00	; 0
    7c5a:	e1 e3       	ldi	r30, 0x31	; 49
    7c5c:	fe e3       	ldi	r31, 0x3E	; 62
    7c5e:	0c 94 03 e6 	jmp	0x1cc06	; 0x1cc06 <__prologue_saves__+0x20>
    7c62:	be 01       	movw	r22, r28
    7c64:	6f 5f       	subi	r22, 0xFF	; 255
    7c66:	7f 4f       	sbci	r23, 0xFF	; 255
    7c68:	75 da       	rcall	.-2838   	; 0x7154 <gmtime_r>
    7c6a:	64 eb       	ldi	r22, 0xB4	; 180
    7c6c:	77 e1       	ldi	r23, 0x17	; 23
    7c6e:	9d df       	rcall	.-198    	; 0x7baa <asctime_r>
    7c70:	66 96       	adiw	r28, 0x16	; 22
    7c72:	e2 e0       	ldi	r30, 0x02	; 2
    7c74:	0c 94 1f e6 	jmp	0x1cc3e	; 0x1cc3e <__epilogue_restores__+0x20>

00007c78 <initialize_clock>:
/// @param[in] minwest: your time zone as minute west
///@return  void
///@see: clock_settime()
MEMSPACE
void initialize_clock(int minwest)
{
    7c78:	a2 e2       	ldi	r26, 0x22	; 34
    7c7a:	b0 e0       	ldi	r27, 0x00	; 0
    7c7c:	e2 e4       	ldi	r30, 0x42	; 66
    7c7e:	fe e3       	ldi	r31, 0x3E	; 62
    7c80:	0c 94 fd e5 	jmp	0x1cbfa	; 0x1cbfa <__prologue_saves__+0x14>
    7c84:	8c 01       	movw	r16, r24
    tm_t tc;
    ts_t ts;
    tz_t tz;

#ifdef RTC_SUPPORT
    if(!rtc_init(0,0L))
    7c86:	40 e0       	ldi	r20, 0x00	; 0
    7c88:	50 e0       	ldi	r21, 0x00	; 0
    7c8a:	ba 01       	movw	r22, r20
    7c8c:	80 e0       	ldi	r24, 0x00	; 0
    7c8e:	90 e0       	ldi	r25, 0x00	; 0
    7c90:	0e 94 e9 2f 	call	0x5fd2	; 0x5fd2 <rtc_init>
    7c94:	81 11       	cpse	r24, r1
    7c96:	27 c0       	rjmp	.+78     	; 0x7ce6 <initialize_clock+0x6e>
    {
        printf("rtc uninitilized\n");
    7c98:	8a e9       	ldi	r24, 0x9A	; 154
    7c9a:	96 e0       	ldi	r25, 0x06	; 6
    7c9c:	1f 92       	push	r1
    7c9e:	9f 93       	push	r25
    7ca0:	8f 93       	push	r24
    7ca2:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
        printf("attempting rtc init\n");
    7ca6:	85 e8       	ldi	r24, 0x85	; 133
    7ca8:	96 e0       	ldi	r25, 0x06	; 6
    7caa:	1f 92       	push	r1
    7cac:	9f 93       	push	r25
    7cae:	8f 93       	push	r24
    7cb0:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
        if( !rtc_init(1, (time_t) 0) )
    7cb4:	40 e0       	ldi	r20, 0x00	; 0
    7cb6:	50 e0       	ldi	r21, 0x00	; 0
    7cb8:	ba 01       	movw	r22, r20
    7cba:	81 e0       	ldi	r24, 0x01	; 1
    7cbc:	90 e0       	ldi	r25, 0x00	; 0
    7cbe:	0e 94 e9 2f 	call	0x5fd2	; 0x5fd2 <rtc_init>
    7cc2:	0f 90       	pop	r0
    7cc4:	0f 90       	pop	r0
    7cc6:	0f 90       	pop	r0
    7cc8:	0f 90       	pop	r0
    7cca:	0f 90       	pop	r0
    7ccc:	0f 90       	pop	r0
    7cce:	81 11       	cpse	r24, r1
    7cd0:	0a c0       	rjmp	.+20     	; 0x7ce6 <initialize_clock+0x6e>
        {
            printf("rtc force init failed\n");
    7cd2:	8e e6       	ldi	r24, 0x6E	; 110
    7cd4:	96 e0       	ldi	r25, 0x06	; 6
    7cd6:	1f 92       	push	r1
    7cd8:	9f 93       	push	r25
    7cda:	8f 93       	push	r24
    7cdc:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    7ce0:	0f 90       	pop	r0
    7ce2:	0f 90       	pop	r0
    7ce4:	0f 90       	pop	r0
        }
    }

    if(rtc_read(&tc))
    7ce6:	ce 01       	movw	r24, r28
    7ce8:	01 96       	adiw	r24, 0x01	; 1
    7cea:	0e 94 35 30 	call	0x606a	; 0x606a <rtc_read>
    7cee:	88 23       	and	r24, r24
    7cf0:	51 f0       	breq	.+20     	; 0x7d06 <initialize_clock+0x8e>
    {
        seconds = timegm(&tc);
    7cf2:	ce 01       	movw	r24, r28
    7cf4:	01 96       	adiw	r24, 0x01	; 1
    7cf6:	03 dd       	rcall	.-1530   	; 0x76fe <timegm>
    7cf8:	6b 01       	movw	r12, r22
    7cfa:	7c 01       	movw	r14, r24
    }
#else
    printf("NO RTC\n");
    seconds = 0;
#endif  // RTC_SUPPORT
    if(!seconds)
    7cfc:	67 2b       	or	r22, r23
    7cfe:	68 2b       	or	r22, r24
    7d00:	69 2b       	or	r22, r25
    7d02:	c1 f4       	brne	.+48     	; 0x7d34 <initialize_clock+0xbc>
    7d04:	0a c0       	rjmp	.+20     	; 0x7d1a <initialize_clock+0xa2>
        seconds = timegm(&tc);
    }
    else
    {
        seconds = 0;
        printf("rtc read errorafter init\n");
    7d06:	84 e5       	ldi	r24, 0x54	; 84
    7d08:	96 e0       	ldi	r25, 0x06	; 6
    7d0a:	1f 92       	push	r1
    7d0c:	9f 93       	push	r25
    7d0e:	8f 93       	push	r24
    7d10:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    7d14:	0f 90       	pop	r0
    7d16:	0f 90       	pop	r0
    7d18:	0f 90       	pop	r0
#else
    printf("NO RTC\n");
    seconds = 0;
#endif  // RTC_SUPPORT
    if(!seconds)
        printf("use setdate command to change time\n");
    7d1a:	80 e3       	ldi	r24, 0x30	; 48
    7d1c:	96 e0       	ldi	r25, 0x06	; 6
    7d1e:	1f 92       	push	r1
    7d20:	9f 93       	push	r25
    7d22:	8f 93       	push	r24
    7d24:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    7d28:	0f 90       	pop	r0
    7d2a:	0f 90       	pop	r0
    7d2c:	0f 90       	pop	r0
    7d2e:	c1 2c       	mov	r12, r1
    7d30:	d1 2c       	mov	r13, r1
    7d32:	76 01       	movw	r14, r12
    tz.tz_minuteswest = minwest;
    7d34:	18 a3       	std	Y+32, r17	; 0x20
    7d36:	0f 8f       	std	Y+31, r16	; 0x1f
    tz.tz_dsttime = 0;
    7d38:	1a a2       	std	Y+34, r1	; 0x22
    7d3a:	19 a2       	std	Y+33, r1	; 0x21
    settimezone( &tz );
    7d3c:	ce 01       	movw	r24, r28
    7d3e:	4f 96       	adiw	r24, 0x1f	; 31
    7d40:	3a da       	rcall	.-2956   	; 0x71b6 <settimezone>

    ts.tv_sec = seconds;
    7d42:	cf 8a       	std	Y+23, r12	; 0x17
    7d44:	d8 8e       	std	Y+24, r13	; 0x18
    7d46:	e9 8e       	std	Y+25, r14	; 0x19
    7d48:	fa 8e       	std	Y+26, r15	; 0x1a
    ts.tv_nsec = 0L;
    7d4a:	1b 8e       	std	Y+27, r1	; 0x1b
    7d4c:	1c 8e       	std	Y+28, r1	; 0x1c
    7d4e:	1d 8e       	std	Y+29, r1	; 0x1d
    7d50:	1e 8e       	std	Y+30, r1	; 0x1e
    clock_settime(0, (ts_t *) &ts);
    7d52:	be 01       	movw	r22, r28
    7d54:	69 5e       	subi	r22, 0xE9	; 233
    7d56:	7f 4f       	sbci	r23, 0xFF	; 255
    7d58:	80 e0       	ldi	r24, 0x00	; 0
    7d5a:	90 e0       	ldi	r25, 0x00	; 0
    7d5c:	cf d8       	rcall	.-3682   	; 0x6efc <clock_settime>
}
    7d5e:	a2 96       	adiw	r28, 0x22	; 34
    7d60:	e8 e0       	ldi	r30, 0x08	; 8
    7d62:	0c 94 19 e6 	jmp	0x1cc32	; 0x1cc32 <__epilogue_restores__+0x14>

00007d66 <display_clock>:
/// @see: rtc_read
/// @see: timegm()
/// @see: ascitime()
MEMSPACE
void display_clock()
{
    7d66:	a2 e2       	ldi	r26, 0x22	; 34
    7d68:	b0 e0       	ldi	r27, 0x00	; 0
    7d6a:	e9 eb       	ldi	r30, 0xB9	; 185
    7d6c:	fe e3       	ldi	r31, 0x3E	; 62
    7d6e:	0c 94 03 e6 	jmp	0x1cc06	; 0x1cc06 <__prologue_saves__+0x20>
    time_t seconds;
    tm_t tc;
    ts_t ts;

#ifdef RTC_SUPPORT
    if(rtc_read(&tc))
    7d72:	ce 01       	movw	r24, r28
    7d74:	01 96       	adiw	r24, 0x01	; 1
    7d76:	0e 94 35 30 	call	0x606a	; 0x606a <rtc_read>
    7d7a:	88 23       	and	r24, r24
    7d7c:	21 f1       	breq	.+72     	; 0x7dc6 <display_clock+0x60>
    {
        seconds = timegm(&tc);
    7d7e:	ce 01       	movw	r24, r28
    7d80:	01 96       	adiw	r24, 0x01	; 1
    7d82:	bd dc       	rcall	.-1670   	; 0x76fe <timegm>
    7d84:	6f 8f       	std	Y+31, r22	; 0x1f
    7d86:	78 a3       	std	Y+32, r23	; 0x20
    7d88:	89 a3       	std	Y+33, r24	; 0x21
    7d8a:	9a a3       	std	Y+34, r25	; 0x22
        printf("rtc seconds: %lu\n",seconds);
    7d8c:	9f 93       	push	r25
    7d8e:	8f 93       	push	r24
    7d90:	7f 93       	push	r23
    7d92:	6f 93       	push	r22
    7d94:	8e e1       	ldi	r24, 0x1E	; 30
    7d96:	96 e0       	ldi	r25, 0x06	; 6
    7d98:	1f 92       	push	r1
    7d9a:	9f 93       	push	r25
    7d9c:	8f 93       	push	r24
    7d9e:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
        printf("rtc time:    %s\n",asctime(&tc));
    7da2:	ce 01       	movw	r24, r28
    7da4:	01 96       	adiw	r24, 0x01	; 1
    7da6:	53 df       	rcall	.-346    	; 0x7c4e <asctime>
    7da8:	9f 93       	push	r25
    7daa:	8f 93       	push	r24
    7dac:	8d e0       	ldi	r24, 0x0D	; 13
    7dae:	96 e0       	ldi	r25, 0x06	; 6
    7db0:	1f 92       	push	r1
    7db2:	9f 93       	push	r25
    7db4:	8f 93       	push	r24
    7db6:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    7dba:	0f b6       	in	r0, 0x3f	; 63
    7dbc:	f8 94       	cli
    7dbe:	de bf       	out	0x3e, r29	; 62
    7dc0:	0f be       	out	0x3f, r0	; 63
    7dc2:	cd bf       	out	0x3d, r28	; 61
    7dc4:	0a c0       	rjmp	.+20     	; 0x7dda <display_clock+0x74>
            (int) tc.tm_wday);
#endif
    }
    else
    {
        printf("RTC read failed\n");
    7dc6:	8c ef       	ldi	r24, 0xFC	; 252
    7dc8:	95 e0       	ldi	r25, 0x05	; 5
    7dca:	1f 92       	push	r1
    7dcc:	9f 93       	push	r25
    7dce:	8f 93       	push	r24
    7dd0:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    7dd4:	0f 90       	pop	r0
    7dd6:	0f 90       	pop	r0
    7dd8:	0f 90       	pop	r0
    }
#endif  // RTC_SUPPORT

    clock_gettime(0, (ts_t *) &ts);
    7dda:	be 01       	movw	r22, r28
    7ddc:	69 5e       	subi	r22, 0xE9	; 233
    7dde:	7f 4f       	sbci	r23, 0xFF	; 255
    7de0:	80 e0       	ldi	r24, 0x00	; 0
    7de2:	90 e0       	ldi	r25, 0x00	; 0
    7de4:	0e 94 ef 34 	call	0x69de	; 0x69de <clock_gettime>
    seconds = ts.tv_sec;
    7de8:	8f 89       	ldd	r24, Y+23	; 0x17
    7dea:	98 8d       	ldd	r25, Y+24	; 0x18
    7dec:	29 8d       	ldd	r18, Y+25	; 0x19
    7dee:	3a 8d       	ldd	r19, Y+26	; 0x1a
    7df0:	8f 8f       	std	Y+31, r24	; 0x1f
    7df2:	98 a3       	std	Y+32, r25	; 0x20
    7df4:	29 a3       	std	Y+33, r18	; 0x21
    7df6:	3a a3       	std	Y+34, r19	; 0x22
    printf("clk seconds: %lu\n",seconds);
    7df8:	3f 93       	push	r19
    7dfa:	2f 93       	push	r18
    7dfc:	9f 93       	push	r25
    7dfe:	8f 93       	push	r24
    7e00:	8a ee       	ldi	r24, 0xEA	; 234
    7e02:	95 e0       	ldi	r25, 0x05	; 5
    7e04:	1f 92       	push	r1
    7e06:	9f 93       	push	r25
    7e08:	8f 93       	push	r24
    7e0a:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    printf("clk time:    %s\n", asctime(gmtime(&seconds)));
    7e0e:	ce 01       	movw	r24, r28
    7e10:	4f 96       	adiw	r24, 0x1f	; 31
    7e12:	b5 d9       	rcall	.-3222   	; 0x717e <gmtime>
    7e14:	1c df       	rcall	.-456    	; 0x7c4e <asctime>
    7e16:	9f 93       	push	r25
    7e18:	8f 93       	push	r24
    7e1a:	89 ed       	ldi	r24, 0xD9	; 217
    7e1c:	95 e0       	ldi	r25, 0x05	; 5
    7e1e:	1f 92       	push	r1
    7e20:	9f 93       	push	r25
    7e22:	8f 93       	push	r24
    7e24:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
}
    7e28:	0f b6       	in	r0, 0x3f	; 63
    7e2a:	f8 94       	cli
    7e2c:	de bf       	out	0x3e, r29	; 62
    7e2e:	0f be       	out	0x3f, r0	; 63
    7e30:	cd bf       	out	0x3d, r28	; 61
    7e32:	a2 96       	adiw	r28, 0x22	; 34
    7e34:	e2 e0       	ldi	r30, 0x02	; 2
    7e36:	0c 94 1f e6 	jmp	0x1cc3e	; 0x1cc3e <__epilogue_restores__+0x20>

00007e3a <_putc_buffer_fn>:
    va_start(va, format);
    _printf_fn(&fn, format, va);
    va_end(va);

    return ((int)fn.sent);
}
    7e3a:	fc 01       	movw	r30, r24
    7e3c:	84 81       	ldd	r24, Z+4	; 0x04
    7e3e:	95 81       	ldd	r25, Z+5	; 0x05
    7e40:	00 97       	sbiw	r24, 0x00	; 0
    7e42:	79 f0       	breq	.+30     	; 0x7e62 <_putc_buffer_fn+0x28>
    7e44:	66 23       	and	r22, r22
    7e46:	69 f0       	breq	.+26     	; 0x7e62 <_putc_buffer_fn+0x28>
    7e48:	01 97       	sbiw	r24, 0x01	; 1
    7e4a:	95 83       	std	Z+5, r25	; 0x05
    7e4c:	84 83       	std	Z+4, r24	; 0x04
    7e4e:	86 81       	ldd	r24, Z+6	; 0x06
    7e50:	97 81       	ldd	r25, Z+7	; 0x07
    7e52:	01 96       	adiw	r24, 0x01	; 1
    7e54:	97 83       	std	Z+7, r25	; 0x07
    7e56:	86 83       	std	Z+6, r24	; 0x06
    7e58:	a2 81       	ldd	r26, Z+2	; 0x02
    7e5a:	b3 81       	ldd	r27, Z+3	; 0x03
    7e5c:	6d 93       	st	X+, r22
    7e5e:	b3 83       	std	Z+3, r27	; 0x03
    7e60:	a2 83       	std	Z+2, r26	; 0x02
    7e62:	02 80       	ldd	r0, Z+2	; 0x02
    7e64:	f3 81       	ldd	r31, Z+3	; 0x03
    7e66:	e0 2d       	mov	r30, r0
    7e68:	10 82       	st	Z, r1
    7e6a:	08 95       	ret

00007e6c <_putc_fn>:
    7e6c:	fc 01       	movw	r30, r24
    7e6e:	26 81       	ldd	r18, Z+6	; 0x06
    7e70:	37 81       	ldd	r19, Z+7	; 0x07
    7e72:	2f 5f       	subi	r18, 0xFF	; 255
    7e74:	3f 4f       	sbci	r19, 0xFF	; 255
    7e76:	37 83       	std	Z+7, r19	; 0x07
    7e78:	26 83       	std	Z+6, r18	; 0x06
    7e7a:	86 2f       	mov	r24, r22
    7e7c:	90 e0       	ldi	r25, 0x00	; 0
    7e7e:	0c 94 6e 77 	jmp	0xeedc	; 0xeedc <putchar>
    7e82:	08 95       	ret

00007e84 <bin2num>:
    7e84:	a0 e0       	ldi	r26, 0x00	; 0
    7e86:	b0 e0       	ldi	r27, 0x00	; 0
    7e88:	e8 e4       	ldi	r30, 0x48	; 72
    7e8a:	ff e3       	ldi	r31, 0x3F	; 63
    7e8c:	0c 94 fa e5 	jmp	0x1cbf4	; 0x1cbf4 <__prologue_saves__+0xe>
    7e90:	ea 01       	movw	r28, r20
    7e92:	53 e0       	ldi	r21, 0x03	; 3
    7e94:	ee 0c       	add	r14, r14
    7e96:	ff 1c       	adc	r15, r15
    7e98:	5a 95       	dec	r21
    7e9a:	e1 f7       	brne	.-8      	; 0x7e94 <bin2num+0x10>
    7e9c:	fc 01       	movw	r30, r24
    7e9e:	af 01       	movw	r20, r30
    7ea0:	48 1b       	sub	r20, r24
    7ea2:	59 0b       	sbc	r21, r25
    7ea4:	c4 17       	cp	r28, r20
    7ea6:	d5 07       	cpc	r29, r21
    7ea8:	14 f0       	brlt	.+4      	; 0x7eae <bin2num+0x2a>
    7eaa:	11 92       	st	Z+, r1
    7eac:	f8 cf       	rjmp	.-16     	; 0x7e9e <bin2num+0x1a>
    7eae:	41 e0       	ldi	r20, 0x01	; 1
    7eb0:	e4 1a       	sub	r14, r20
    7eb2:	f1 08       	sbc	r15, r1
    7eb4:	5b 01       	movw	r10, r22
    7eb6:	42 e0       	ldi	r20, 0x02	; 2
    7eb8:	a4 1a       	sub	r10, r20
    7eba:	b1 08       	sbc	r11, r1
    7ebc:	f7 fc       	sbrc	r15, 7
    7ebe:	3b c0       	rjmp	.+118    	; 0x7f36 <bin2num+0xb2>
    7ec0:	f7 01       	movw	r30, r14
    7ec2:	43 e0       	ldi	r20, 0x03	; 3
    7ec4:	f5 95       	asr	r31
    7ec6:	e7 95       	ror	r30
    7ec8:	4a 95       	dec	r20
    7eca:	e1 f7       	brne	.-8      	; 0x7ec4 <bin2num+0x40>
    7ecc:	e0 0f       	add	r30, r16
    7ece:	f1 1f       	adc	r31, r17
    7ed0:	40 81       	ld	r20, Z
    7ed2:	50 e0       	ldi	r21, 0x00	; 0
    7ed4:	f7 01       	movw	r30, r14
    7ed6:	e7 70       	andi	r30, 0x07	; 7
    7ed8:	ff 27       	eor	r31, r31
    7eda:	02 c0       	rjmp	.+4      	; 0x7ee0 <bin2num+0x5c>
    7edc:	55 95       	asr	r21
    7ede:	47 95       	ror	r20
    7ee0:	ea 95       	dec	r30
    7ee2:	e2 f7       	brpl	.-8      	; 0x7edc <bin2num+0x58>
    7ee4:	41 70       	andi	r20, 0x01	; 1
    7ee6:	55 27       	eor	r21, r21
    7ee8:	dc 01       	movw	r26, r24
    7eea:	e0 e0       	ldi	r30, 0x00	; 0
    7eec:	f0 e0       	ldi	r31, 0x00	; 0
    7eee:	ec 17       	cp	r30, r28
    7ef0:	fd 07       	cpc	r31, r29
    7ef2:	ec f4       	brge	.+58     	; 0x7f2e <bin2num+0xaa>
    7ef4:	ea 15       	cp	r30, r10
    7ef6:	fb 05       	cpc	r31, r11
    7ef8:	4c f0       	brlt	.+18     	; 0x7f0c <bin2num+0x88>
    7efa:	dc 01       	movw	r26, r24
    7efc:	ae 0f       	add	r26, r30
    7efe:	bf 1f       	adc	r27, r31
    7f00:	1c 92       	st	X, r1
    7f02:	41 e0       	ldi	r20, 0x01	; 1
    7f04:	e4 1a       	sub	r14, r20
    7f06:	f1 08       	sbc	r15, r1
    7f08:	ef 01       	movw	r28, r30
    7f0a:	d8 cf       	rjmp	.-80     	; 0x7ebc <bin2num+0x38>
    7f0c:	9c 90       	ld	r9, X
    7f0e:	99 0c       	add	r9, r9
    7f10:	94 2a       	or	r9, r20
    7f12:	49 2d       	mov	r20, r9
    7f14:	50 e0       	ldi	r21, 0x00	; 0
    7f16:	42 17       	cp	r20, r18
    7f18:	53 07       	cpc	r21, r19
    7f1a:	24 f0       	brlt	.+8      	; 0x7f24 <bin2num+0xa0>
    7f1c:	92 1a       	sub	r9, r18
    7f1e:	41 e0       	ldi	r20, 0x01	; 1
    7f20:	50 e0       	ldi	r21, 0x00	; 0
    7f22:	02 c0       	rjmp	.+4      	; 0x7f28 <bin2num+0xa4>
    7f24:	40 e0       	ldi	r20, 0x00	; 0
    7f26:	50 e0       	ldi	r21, 0x00	; 0
    7f28:	9d 92       	st	X+, r9
    7f2a:	31 96       	adiw	r30, 0x01	; 1
    7f2c:	e0 cf       	rjmp	.-64     	; 0x7eee <bin2num+0x6a>
    7f2e:	41 15       	cp	r20, r1
    7f30:	51 05       	cpc	r21, r1
    7f32:	01 f7       	brne	.-64     	; 0x7ef4 <bin2num+0x70>
    7f34:	e2 cf       	rjmp	.-60     	; 0x7efa <bin2num+0x76>
    7f36:	fc 01       	movw	r30, r24
    7f38:	9f 01       	movw	r18, r30
    7f3a:	28 1b       	sub	r18, r24
    7f3c:	39 0b       	sbc	r19, r25
    7f3e:	2c 17       	cp	r18, r28
    7f40:	3d 07       	cpc	r19, r29
    7f42:	4c f4       	brge	.+18     	; 0x7f56 <bin2num+0xd2>
    7f44:	20 81       	ld	r18, Z
    7f46:	2a 30       	cpi	r18, 0x0A	; 10
    7f48:	10 f4       	brcc	.+4      	; 0x7f4e <bin2num+0xca>
    7f4a:	20 5d       	subi	r18, 0xD0	; 208
    7f4c:	01 c0       	rjmp	.+2      	; 0x7f50 <bin2num+0xcc>
    7f4e:	29 5a       	subi	r18, 0xA9	; 169
    7f50:	20 83       	st	Z, r18
    7f52:	31 96       	adiw	r30, 0x01	; 1
    7f54:	f1 cf       	rjmp	.-30     	; 0x7f38 <bin2num+0xb4>
    7f56:	9e 01       	movw	r18, r28
    7f58:	d7 ff       	sbrs	r29, 7
    7f5a:	02 c0       	rjmp	.+4      	; 0x7f60 <bin2num+0xdc>
    7f5c:	20 e0       	ldi	r18, 0x00	; 0
    7f5e:	30 e0       	ldi	r19, 0x00	; 0
    7f60:	c1 14       	cp	r12, r1
    7f62:	d1 04       	cpc	r13, r1
    7f64:	61 f0       	breq	.+24     	; 0x7f7e <bin2num+0xfa>
    7f66:	61 50       	subi	r22, 0x01	; 1
    7f68:	71 09       	sbc	r23, r1
    7f6a:	26 17       	cp	r18, r22
    7f6c:	37 07       	cpc	r19, r23
    7f6e:	3c f4       	brge	.+14     	; 0x7f7e <bin2num+0xfa>
    7f70:	fc 01       	movw	r30, r24
    7f72:	e2 0f       	add	r30, r18
    7f74:	f3 1f       	adc	r31, r19
    7f76:	c0 82       	st	Z, r12
    7f78:	21 96       	adiw	r28, 0x01	; 1
    7f7a:	2f 5f       	subi	r18, 0xFF	; 255
    7f7c:	3f 4f       	sbci	r19, 0xFF	; 255
    7f7e:	fc 01       	movw	r30, r24
    7f80:	e2 0f       	add	r30, r18
    7f82:	f3 1f       	adc	r31, r19
    7f84:	10 82       	st	Z, r1
    7f86:	0e 94 8a 32 	call	0x6514	; 0x6514 <reverse>
    7f8a:	ce 01       	movw	r24, r28
    7f8c:	cd b7       	in	r28, 0x3d	; 61
    7f8e:	de b7       	in	r29, 0x3e	; 62
    7f90:	eb e0       	ldi	r30, 0x0B	; 11
    7f92:	0c 94 16 e6 	jmp	0x1cc2c	; 0x1cc2c <__epilogue_restores__+0xe>

00007f96 <pch_init>:
    7f96:	ea e7       	ldi	r30, 0x7A	; 122
    7f98:	f9 e1       	ldi	r31, 0x19	; 25
    7f9a:	91 83       	std	Z+1, r25	; 0x01
    7f9c:	80 83       	st	Z, r24
    7f9e:	13 82       	std	Z+3, r1	; 0x03
    7fa0:	12 82       	std	Z+2, r1	; 0x02
    7fa2:	61 50       	subi	r22, 0x01	; 1
    7fa4:	71 09       	sbc	r23, r1
    7fa6:	75 83       	std	Z+5, r23	; 0x05
    7fa8:	64 83       	std	Z+4, r22	; 0x04
    7faa:	fc 01       	movw	r30, r24
    7fac:	10 82       	st	Z, r1
    7fae:	08 95       	ret

00007fb0 <pch>:
    7fb0:	20 91 7c 19 	lds	r18, 0x197C	; 0x80197c <_pch+0x2>
    7fb4:	30 91 7d 19 	lds	r19, 0x197D	; 0x80197d <_pch+0x3>
    7fb8:	60 91 7e 19 	lds	r22, 0x197E	; 0x80197e <_pch+0x4>
    7fbc:	70 91 7f 19 	lds	r23, 0x197F	; 0x80197f <_pch+0x5>
    7fc0:	40 91 7a 19 	lds	r20, 0x197A	; 0x80197a <_pch>
    7fc4:	50 91 7b 19 	lds	r21, 0x197B	; 0x80197b <_pch+0x1>
    7fc8:	26 17       	cp	r18, r22
    7fca:	37 07       	cpc	r19, r23
    7fcc:	64 f4       	brge	.+24     	; 0x7fe6 <pch+0x36>
    7fce:	b9 01       	movw	r22, r18
    7fd0:	6f 5f       	subi	r22, 0xFF	; 255
    7fd2:	7f 4f       	sbci	r23, 0xFF	; 255
    7fd4:	70 93 7d 19 	sts	0x197D, r23	; 0x80197d <_pch+0x3>
    7fd8:	60 93 7c 19 	sts	0x197C, r22	; 0x80197c <_pch+0x2>
    7fdc:	fa 01       	movw	r30, r20
    7fde:	e2 0f       	add	r30, r18
    7fe0:	f3 1f       	adc	r31, r19
    7fe2:	80 83       	st	Z, r24
    7fe4:	04 c0       	rjmp	.+8      	; 0x7fee <pch+0x3e>
    7fe6:	fa 01       	movw	r30, r20
    7fe8:	e2 0f       	add	r30, r18
    7fea:	f3 1f       	adc	r31, r19
    7fec:	10 82       	st	Z, r1
    7fee:	80 91 7c 19 	lds	r24, 0x197C	; 0x80197c <_pch+0x2>
    7ff2:	90 91 7d 19 	lds	r25, 0x197D	; 0x80197d <_pch+0x3>
    7ff6:	08 95       	ret

00007ff8 <p_ntoa>:
    7ff8:	af 92       	push	r10
    7ffa:	cf 92       	push	r12
    7ffc:	df 92       	push	r13
    7ffe:	ef 92       	push	r14
    8000:	ff 92       	push	r15
    8002:	0f 93       	push	r16
    8004:	1f 93       	push	r17
    8006:	cf 93       	push	r28
    8008:	df 93       	push	r29
    800a:	dc 01       	movw	r26, r24
    800c:	eb 01       	movw	r28, r22
    800e:	fa 01       	movw	r30, r20
    8010:	b9 01       	movw	r22, r18
    8012:	98 01       	movw	r18, r16
    8014:	a6 01       	movw	r20, r12
    8016:	9a 2d       	mov	r25, r10
    8018:	a5 fa       	bst	r10, 5
    801a:	cc 24       	eor	r12, r12
    801c:	c0 f8       	bld	r12, 0
    801e:	a6 fc       	sbrc	r10, 6
    8020:	07 c0       	rjmp	.+14     	; 0x8030 <p_ntoa+0x38>
    8022:	a2 fc       	sbrc	r10, 2
    8024:	08 c0       	rjmp	.+16     	; 0x8036 <p_ntoa+0x3e>
    8026:	a4 fe       	sbrs	r10, 4
    8028:	09 c0       	rjmp	.+18     	; 0x803c <p_ntoa+0x44>
    802a:	00 e2       	ldi	r16, 0x20	; 32
    802c:	10 e0       	ldi	r17, 0x00	; 0
    802e:	08 c0       	rjmp	.+16     	; 0x8040 <p_ntoa+0x48>
    8030:	0d e2       	ldi	r16, 0x2D	; 45
    8032:	10 e0       	ldi	r17, 0x00	; 0
    8034:	05 c0       	rjmp	.+10     	; 0x8040 <p_ntoa+0x48>
    8036:	0b e2       	ldi	r16, 0x2B	; 43
    8038:	10 e0       	ldi	r17, 0x00	; 0
    803a:	02 c0       	rjmp	.+4      	; 0x8040 <p_ntoa+0x48>
    803c:	00 e0       	ldi	r16, 0x00	; 0
    803e:	10 e0       	ldi	r17, 0x00	; 0
    8040:	95 ff       	sbrs	r25, 5
    8042:	04 c0       	rjmp	.+8      	; 0x804c <p_ntoa+0x54>
    8044:	89 2f       	mov	r24, r25
    8046:	8a 70       	andi	r24, 0x0A	; 10
    8048:	09 f0       	breq	.+2      	; 0x804c <p_ntoa+0x54>
    804a:	c1 2c       	mov	r12, r1
    804c:	c0 fa       	bst	r12, 0
    804e:	95 f9       	bld	r25, 5
    8050:	89 2f       	mov	r24, r25
    8052:	82 70       	andi	r24, 0x02	; 2
    8054:	c8 2e       	mov	r12, r24
    8056:	91 fd       	sbrc	r25, 1
    8058:	02 c0       	rjmp	.+4      	; 0x805e <p_ntoa+0x66>
    805a:	40 e0       	ldi	r20, 0x00	; 0
    805c:	50 e0       	ldi	r21, 0x00	; 0
    805e:	89 2f       	mov	r24, r25
    8060:	83 70       	andi	r24, 0x03	; 3
    8062:	11 f4       	brne	.+4      	; 0x8068 <p_ntoa+0x70>
    8064:	41 e0       	ldi	r20, 0x01	; 1
    8066:	50 e0       	ldi	r21, 0x00	; 0
    8068:	90 ff       	sbrs	r25, 0
    806a:	0c c0       	rjmp	.+24     	; 0x8084 <p_ntoa+0x8c>
    806c:	95 fd       	sbrc	r25, 5
    806e:	05 c0       	rjmp	.+10     	; 0x807a <p_ntoa+0x82>
    8070:	c1 10       	cpse	r12, r1
    8072:	08 c0       	rjmp	.+16     	; 0x8084 <p_ntoa+0x8c>
    8074:	41 e0       	ldi	r20, 0x01	; 1
    8076:	50 e0       	ldi	r21, 0x00	; 0
    8078:	05 c0       	rjmp	.+10     	; 0x8084 <p_ntoa+0x8c>
    807a:	94 75       	andi	r25, 0x54	; 84
    807c:	a7 01       	movw	r20, r14
    807e:	11 f0       	breq	.+4      	; 0x8084 <p_ntoa+0x8c>
    8080:	41 50       	subi	r20, 0x01	; 1
    8082:	51 09       	sbc	r21, r1
    8084:	68 01       	movw	r12, r16
    8086:	7e 01       	movw	r14, r28
    8088:	8d 01       	movw	r16, r26
    808a:	cf 01       	movw	r24, r30
    808c:	fb de       	rcall	.-522    	; 0x7e84 <bin2num>
    808e:	df 91       	pop	r29
    8090:	cf 91       	pop	r28
    8092:	1f 91       	pop	r17
    8094:	0f 91       	pop	r16
    8096:	ff 90       	pop	r15
    8098:	ef 90       	pop	r14
    809a:	df 90       	pop	r13
    809c:	cf 90       	pop	r12
    809e:	af 90       	pop	r10
    80a0:	08 95       	ret

000080a2 <p_ftoa>:
    80a2:	2f 92       	push	r2
    80a4:	3f 92       	push	r3
    80a6:	4f 92       	push	r4
    80a8:	5f 92       	push	r5
    80aa:	6f 92       	push	r6
    80ac:	7f 92       	push	r7
    80ae:	8f 92       	push	r8
    80b0:	9f 92       	push	r9
    80b2:	af 92       	push	r10
    80b4:	bf 92       	push	r11
    80b6:	cf 92       	push	r12
    80b8:	ef 92       	push	r14
    80ba:	ff 92       	push	r15
    80bc:	0f 93       	push	r16
    80be:	1f 93       	push	r17
    80c0:	cf 93       	push	r28
    80c2:	df 93       	push	r29
    80c4:	4b 01       	movw	r8, r22
    80c6:	5c 01       	movw	r10, r24
    80c8:	1a 01       	movw	r2, r20
    80ca:	38 01       	movw	r6, r16
    80cc:	c6 fa       	bst	r12, 6
    80ce:	cc 27       	eor	r28, r28
    80d0:	c0 f9       	bld	r28, 0
    80d2:	b9 01       	movw	r22, r18
    80d4:	ca 01       	movw	r24, r20
    80d6:	5f df       	rcall	.-322    	; 0x7f96 <pch_init>
    80d8:	20 e0       	ldi	r18, 0x00	; 0
    80da:	30 e0       	ldi	r19, 0x00	; 0
    80dc:	a9 01       	movw	r20, r18
    80de:	c5 01       	movw	r24, r10
    80e0:	b4 01       	movw	r22, r8
    80e2:	0e 94 a2 e6 	call	0x1cd44	; 0x1cd44 <__cmpsf2>
    80e6:	87 ff       	sbrs	r24, 7
    80e8:	05 c0       	rjmp	.+10     	; 0x80f4 <p_ftoa+0x52>
    80ea:	b7 fa       	bst	r11, 7
    80ec:	b0 94       	com	r11
    80ee:	b7 f8       	bld	r11, 7
    80f0:	b0 94       	com	r11
    80f2:	c1 e0       	ldi	r28, 0x01	; 1
    80f4:	c0 fb       	bst	r28, 0
    80f6:	c6 f8       	bld	r12, 6
    80f8:	c6 fe       	sbrs	r12, 6
    80fa:	02 c0       	rjmp	.+4      	; 0x8100 <p_ftoa+0x5e>
    80fc:	8d e2       	ldi	r24, 0x2D	; 45
    80fe:	07 c0       	rjmp	.+14     	; 0x810e <p_ftoa+0x6c>
    8100:	c2 fe       	sbrs	r12, 2
    8102:	02 c0       	rjmp	.+4      	; 0x8108 <p_ftoa+0x66>
    8104:	8b e2       	ldi	r24, 0x2B	; 43
    8106:	03 c0       	rjmp	.+6      	; 0x810e <p_ftoa+0x6c>
    8108:	c4 fe       	sbrs	r12, 4
    810a:	02 c0       	rjmp	.+4      	; 0x8110 <p_ftoa+0x6e>
    810c:	80 e2       	ldi	r24, 0x20	; 32
    810e:	50 df       	rcall	.-352    	; 0x7fb0 <pch>
    8110:	e7 01       	movw	r28, r14
    8112:	f7 fe       	sbrs	r15, 7
    8114:	02 c0       	rjmp	.+4      	; 0x811a <p_ftoa+0x78>
    8116:	c0 e0       	ldi	r28, 0x00	; 0
    8118:	d0 e0       	ldi	r29, 0x00	; 0
    811a:	20 e0       	ldi	r18, 0x00	; 0
    811c:	30 e0       	ldi	r19, 0x00	; 0
    811e:	a9 01       	movw	r20, r18
    8120:	c5 01       	movw	r24, r10
    8122:	b4 01       	movw	r22, r8
    8124:	0e 94 a2 e6 	call	0x1cd44	; 0x1cd44 <__cmpsf2>
    8128:	88 23       	and	r24, r24
    812a:	d1 f1       	breq	.+116    	; 0x81a0 <p_ftoa+0xfe>
    812c:	c1 fe       	sbrs	r12, 1
    812e:	11 c0       	rjmp	.+34     	; 0x8152 <p_ftoa+0xb0>
    8130:	8e 01       	movw	r16, r28
    8132:	60 e0       	ldi	r22, 0x00	; 0
    8134:	70 e0       	ldi	r23, 0x00	; 0
    8136:	80 e0       	ldi	r24, 0x00	; 0
    8138:	9f e3       	ldi	r25, 0x3F	; 63
    813a:	01 15       	cp	r16, r1
    813c:	11 05       	cpc	r17, r1
    813e:	69 f0       	breq	.+26     	; 0x815a <p_ftoa+0xb8>
    8140:	20 e0       	ldi	r18, 0x00	; 0
    8142:	30 e0       	ldi	r19, 0x00	; 0
    8144:	40 e2       	ldi	r20, 0x20	; 32
    8146:	51 e4       	ldi	r21, 0x41	; 65
    8148:	0e 94 a6 e6 	call	0x1cd4c	; 0x1cd4c <__divsf3>
    814c:	01 50       	subi	r16, 0x01	; 1
    814e:	11 09       	sbc	r17, r1
    8150:	f4 cf       	rjmp	.-24     	; 0x813a <p_ftoa+0x98>
    8152:	60 e0       	ldi	r22, 0x00	; 0
    8154:	70 e0       	ldi	r23, 0x00	; 0
    8156:	80 e0       	ldi	r24, 0x00	; 0
    8158:	9f e3       	ldi	r25, 0x3F	; 63
    815a:	9b 01       	movw	r18, r22
    815c:	ac 01       	movw	r20, r24
    815e:	c5 01       	movw	r24, r10
    8160:	b4 01       	movw	r22, r8
    8162:	0e 94 3e e6 	call	0x1cc7c	; 0x1cc7c <__addsf3>
    8166:	4b 01       	movw	r8, r22
    8168:	5c 01       	movw	r10, r24
    816a:	ee 24       	eor	r14, r14
    816c:	e3 94       	inc	r14
    816e:	f1 2c       	mov	r15, r1
    8170:	20 e0       	ldi	r18, 0x00	; 0
    8172:	30 e0       	ldi	r19, 0x00	; 0
    8174:	40 e2       	ldi	r20, 0x20	; 32
    8176:	51 e4       	ldi	r21, 0x41	; 65
    8178:	c5 01       	movw	r24, r10
    817a:	b4 01       	movw	r22, r8
    817c:	0e 94 f1 e7 	call	0x1cfe2	; 0x1cfe2 <__gesf2>
    8180:	87 fd       	sbrc	r24, 7
    8182:	11 c0       	rjmp	.+34     	; 0x81a6 <p_ftoa+0x104>
    8184:	2f ef       	ldi	r18, 0xFF	; 255
    8186:	e2 1a       	sub	r14, r18
    8188:	f2 0a       	sbc	r15, r18
    818a:	20 e0       	ldi	r18, 0x00	; 0
    818c:	30 e0       	ldi	r19, 0x00	; 0
    818e:	40 e2       	ldi	r20, 0x20	; 32
    8190:	51 e4       	ldi	r21, 0x41	; 65
    8192:	c5 01       	movw	r24, r10
    8194:	b4 01       	movw	r22, r8
    8196:	0e 94 a6 e6 	call	0x1cd4c	; 0x1cd4c <__divsf3>
    819a:	4b 01       	movw	r8, r22
    819c:	5c 01       	movw	r10, r24
    819e:	e8 cf       	rjmp	.-48     	; 0x8170 <p_ftoa+0xce>
    81a0:	ee 24       	eor	r14, r14
    81a2:	e3 94       	inc	r14
    81a4:	f1 2c       	mov	r15, r1
    81a6:	8c 2d       	mov	r24, r12
    81a8:	88 72       	andi	r24, 0x28	; 40
    81aa:	80 32       	cpi	r24, 0x20	; 32
    81ac:	b9 f4       	brne	.+46     	; 0x81dc <p_ftoa+0x13a>
    81ae:	83 01       	movw	r16, r6
    81b0:	0e 19       	sub	r16, r14
    81b2:	1f 09       	sbc	r17, r15
    81b4:	80 91 7c 19 	lds	r24, 0x197C	; 0x80197c <_pch+0x2>
    81b8:	90 91 7d 19 	lds	r25, 0x197D	; 0x80197d <_pch+0x3>
    81bc:	08 1b       	sub	r16, r24
    81be:	19 0b       	sbc	r17, r25
    81c0:	c1 fe       	sbrs	r12, 1
    81c2:	06 c0       	rjmp	.+12     	; 0x81d0 <p_ftoa+0x12e>
    81c4:	20 97       	sbiw	r28, 0x00	; 0
    81c6:	21 f0       	breq	.+8      	; 0x81d0 <p_ftoa+0x12e>
    81c8:	0c 1b       	sub	r16, r28
    81ca:	1d 0b       	sbc	r17, r29
    81cc:	01 50       	subi	r16, 0x01	; 1
    81ce:	11 09       	sbc	r17, r1
    81d0:	10 16       	cp	r1, r16
    81d2:	11 06       	cpc	r1, r17
    81d4:	1c f4       	brge	.+6      	; 0x81dc <p_ftoa+0x13a>
    81d6:	80 e3       	ldi	r24, 0x30	; 48
    81d8:	eb de       	rcall	.-554    	; 0x7fb0 <pch>
    81da:	f8 cf       	rjmp	.-16     	; 0x81cc <p_ftoa+0x12a>
    81dc:	c5 01       	movw	r24, r10
    81de:	b4 01       	movw	r22, r8
    81e0:	0e 94 0e e7 	call	0x1ce1c	; 0x1ce1c <__fixsfsi>
    81e4:	2b 01       	movw	r4, r22
    81e6:	3c 01       	movw	r6, r24
    81e8:	80 e3       	ldi	r24, 0x30	; 48
    81ea:	84 0d       	add	r24, r4
    81ec:	e1 de       	rcall	.-574    	; 0x7fb0 <pch>
    81ee:	b2 01       	movw	r22, r4
    81f0:	55 0c       	add	r5, r5
    81f2:	88 0b       	sbc	r24, r24
    81f4:	99 0b       	sbc	r25, r25
    81f6:	0e 94 41 e7 	call	0x1ce82	; 0x1ce82 <__floatsisf>
    81fa:	9b 01       	movw	r18, r22
    81fc:	ac 01       	movw	r20, r24
    81fe:	c5 01       	movw	r24, r10
    8200:	b4 01       	movw	r22, r8
    8202:	0e 94 3d e6 	call	0x1cc7a	; 0x1cc7a <__subsf3>
    8206:	21 e0       	ldi	r18, 0x01	; 1
    8208:	e2 1a       	sub	r14, r18
    820a:	f1 08       	sbc	r15, r1
    820c:	20 e0       	ldi	r18, 0x00	; 0
    820e:	30 e0       	ldi	r19, 0x00	; 0
    8210:	40 e2       	ldi	r20, 0x20	; 32
    8212:	51 e4       	ldi	r21, 0x41	; 65
    8214:	0e 94 f5 e7 	call	0x1cfea	; 0x1cfea <__mulsf3>
    8218:	4b 01       	movw	r8, r22
    821a:	5c 01       	movw	r10, r24
    821c:	e1 14       	cp	r14, r1
    821e:	f1 04       	cpc	r15, r1
    8220:	e9 f6       	brne	.-70     	; 0x81dc <p_ftoa+0x13a>
    8222:	c1 fc       	sbrc	r12, 1
    8224:	1c c0       	rjmp	.+56     	; 0x825e <p_ftoa+0x1bc>
    8226:	80 e0       	ldi	r24, 0x00	; 0
    8228:	c3 de       	rcall	.-634    	; 0x7fb0 <pch>
    822a:	f1 01       	movw	r30, r2
    822c:	01 90       	ld	r0, Z+
    822e:	00 20       	and	r0, r0
    8230:	e9 f7       	brne	.-6      	; 0x822c <p_ftoa+0x18a>
    8232:	31 97       	sbiw	r30, 0x01	; 1
    8234:	cf 01       	movw	r24, r30
    8236:	82 19       	sub	r24, r2
    8238:	93 09       	sbc	r25, r3
    823a:	df 91       	pop	r29
    823c:	cf 91       	pop	r28
    823e:	1f 91       	pop	r17
    8240:	0f 91       	pop	r16
    8242:	ff 90       	pop	r15
    8244:	ef 90       	pop	r14
    8246:	cf 90       	pop	r12
    8248:	bf 90       	pop	r11
    824a:	af 90       	pop	r10
    824c:	9f 90       	pop	r9
    824e:	8f 90       	pop	r8
    8250:	7f 90       	pop	r7
    8252:	6f 90       	pop	r6
    8254:	5f 90       	pop	r5
    8256:	4f 90       	pop	r4
    8258:	3f 90       	pop	r3
    825a:	2f 90       	pop	r2
    825c:	08 95       	ret
    825e:	20 97       	sbiw	r28, 0x00	; 0
    8260:	11 f3       	breq	.-60     	; 0x8226 <p_ftoa+0x184>
    8262:	8e e2       	ldi	r24, 0x2E	; 46
    8264:	a5 de       	rcall	.-694    	; 0x7fb0 <pch>
    8266:	c5 01       	movw	r24, r10
    8268:	b4 01       	movw	r22, r8
    826a:	0e 94 0e e7 	call	0x1ce1c	; 0x1ce1c <__fixsfsi>
    826e:	2b 01       	movw	r4, r22
    8270:	3c 01       	movw	r6, r24
    8272:	07 2e       	mov	r0, r23
    8274:	00 0c       	add	r0, r0
    8276:	88 0b       	sbc	r24, r24
    8278:	99 0b       	sbc	r25, r25
    827a:	0e 94 41 e7 	call	0x1ce82	; 0x1ce82 <__floatsisf>
    827e:	9b 01       	movw	r18, r22
    8280:	ac 01       	movw	r20, r24
    8282:	c5 01       	movw	r24, r10
    8284:	b4 01       	movw	r22, r8
    8286:	0e 94 3d e6 	call	0x1cc7a	; 0x1cc7a <__subsf3>
    828a:	4b 01       	movw	r8, r22
    828c:	5c 01       	movw	r10, r24
    828e:	80 e3       	ldi	r24, 0x30	; 48
    8290:	84 0d       	add	r24, r4
    8292:	8e de       	rcall	.-740    	; 0x7fb0 <pch>
    8294:	21 97       	sbiw	r28, 0x01	; 1
    8296:	20 e0       	ldi	r18, 0x00	; 0
    8298:	30 e0       	ldi	r19, 0x00	; 0
    829a:	40 e2       	ldi	r20, 0x20	; 32
    829c:	51 e4       	ldi	r21, 0x41	; 65
    829e:	c5 01       	movw	r24, r10
    82a0:	b4 01       	movw	r22, r8
    82a2:	0e 94 f5 e7 	call	0x1cfea	; 0x1cfea <__mulsf3>
    82a6:	4b 01       	movw	r8, r22
    82a8:	5c 01       	movw	r10, r24
    82aa:	20 97       	sbiw	r28, 0x00	; 0
    82ac:	e1 f6       	brne	.-72     	; 0x8266 <p_ftoa+0x1c4>
    82ae:	bb cf       	rjmp	.-138    	; 0x8226 <p_ftoa+0x184>

000082b0 <p_etoa>:
    82b0:	ad e0       	ldi	r26, 0x0D	; 13
    82b2:	b0 e0       	ldi	r27, 0x00	; 0
    82b4:	ee e5       	ldi	r30, 0x5E	; 94
    82b6:	f1 e4       	ldi	r31, 0x41	; 65
    82b8:	0c 94 f3 e5 	jmp	0x1cbe6	; 0x1cbe6 <__prologue_saves__>
    82bc:	4b 01       	movw	r8, r22
    82be:	5c 01       	movw	r10, r24
    82c0:	5b 87       	std	Y+11, r21	; 0x0b
    82c2:	4a 87       	std	Y+10, r20	; 0x0a
    82c4:	1d 87       	std	Y+13, r17	; 0x0d
    82c6:	0c 87       	std	Y+12, r16	; 0x0c
    82c8:	3c 2c       	mov	r3, r12
    82ca:	c6 fa       	bst	r12, 6
    82cc:	11 27       	eor	r17, r17
    82ce:	10 f9       	bld	r17, 0
    82d0:	b9 01       	movw	r22, r18
    82d2:	ca 01       	movw	r24, r20
    82d4:	60 de       	rcall	.-832    	; 0x7f96 <pch_init>
    82d6:	20 e0       	ldi	r18, 0x00	; 0
    82d8:	30 e0       	ldi	r19, 0x00	; 0
    82da:	a9 01       	movw	r20, r18
    82dc:	c5 01       	movw	r24, r10
    82de:	b4 01       	movw	r22, r8
    82e0:	0e 94 a2 e6 	call	0x1cd44	; 0x1cd44 <__cmpsf2>
    82e4:	87 ff       	sbrs	r24, 7
    82e6:	05 c0       	rjmp	.+10     	; 0x82f2 <p_etoa+0x42>
    82e8:	b7 fa       	bst	r11, 7
    82ea:	b0 94       	com	r11
    82ec:	b7 f8       	bld	r11, 7
    82ee:	b0 94       	com	r11
    82f0:	11 e0       	ldi	r17, 0x01	; 1
    82f2:	10 fb       	bst	r17, 0
    82f4:	36 f8       	bld	r3, 6
    82f6:	36 fe       	sbrs	r3, 6
    82f8:	02 c0       	rjmp	.+4      	; 0x82fe <p_etoa+0x4e>
    82fa:	8d e2       	ldi	r24, 0x2D	; 45
    82fc:	07 c0       	rjmp	.+14     	; 0x830c <p_etoa+0x5c>
    82fe:	32 fe       	sbrs	r3, 2
    8300:	02 c0       	rjmp	.+4      	; 0x8306 <p_etoa+0x56>
    8302:	8b e2       	ldi	r24, 0x2B	; 43
    8304:	03 c0       	rjmp	.+6      	; 0x830c <p_etoa+0x5c>
    8306:	34 fe       	sbrs	r3, 4
    8308:	02 c0       	rjmp	.+4      	; 0x830e <p_etoa+0x5e>
    830a:	80 e2       	ldi	r24, 0x20	; 32
    830c:	51 de       	rcall	.-862    	; 0x7fb0 <pch>
    830e:	37 01       	movw	r6, r14
    8310:	f7 fe       	sbrs	r15, 7
    8312:	02 c0       	rjmp	.+4      	; 0x8318 <p_etoa+0x68>
    8314:	61 2c       	mov	r6, r1
    8316:	71 2c       	mov	r7, r1
    8318:	19 86       	std	Y+9, r1	; 0x09
    831a:	18 86       	std	Y+8, r1	; 0x08
    831c:	20 e0       	ldi	r18, 0x00	; 0
    831e:	30 e0       	ldi	r19, 0x00	; 0
    8320:	a9 01       	movw	r20, r18
    8322:	c5 01       	movw	r24, r10
    8324:	b4 01       	movw	r22, r8
    8326:	0e 94 a2 e6 	call	0x1cd44	; 0x1cd44 <__cmpsf2>
    832a:	23 2d       	mov	r18, r3
    832c:	22 70       	andi	r18, 0x02	; 2
    832e:	22 2e       	mov	r2, r18
    8330:	88 23       	and	r24, r24
    8332:	09 f4       	brne	.+2      	; 0x8336 <p_etoa+0x86>
    8334:	70 c0       	rjmp	.+224    	; 0x8416 <p_etoa+0x166>
    8336:	22 23       	and	r18, r18
    8338:	b1 f0       	breq	.+44     	; 0x8366 <p_etoa+0xb6>
    833a:	83 01       	movw	r16, r6
    833c:	c1 2c       	mov	r12, r1
    833e:	d1 2c       	mov	r13, r1
    8340:	e1 2c       	mov	r14, r1
    8342:	2f e3       	ldi	r18, 0x3F	; 63
    8344:	f2 2e       	mov	r15, r18
    8346:	01 15       	cp	r16, r1
    8348:	11 05       	cpc	r17, r1
    834a:	91 f0       	breq	.+36     	; 0x8370 <p_etoa+0xc0>
    834c:	20 e0       	ldi	r18, 0x00	; 0
    834e:	30 e0       	ldi	r19, 0x00	; 0
    8350:	40 e2       	ldi	r20, 0x20	; 32
    8352:	51 e4       	ldi	r21, 0x41	; 65
    8354:	c7 01       	movw	r24, r14
    8356:	b6 01       	movw	r22, r12
    8358:	0e 94 a6 e6 	call	0x1cd4c	; 0x1cd4c <__divsf3>
    835c:	6b 01       	movw	r12, r22
    835e:	7c 01       	movw	r14, r24
    8360:	01 50       	subi	r16, 0x01	; 1
    8362:	11 09       	sbc	r17, r1
    8364:	f0 cf       	rjmp	.-32     	; 0x8346 <p_etoa+0x96>
    8366:	c1 2c       	mov	r12, r1
    8368:	d1 2c       	mov	r13, r1
    836a:	e1 2c       	mov	r14, r1
    836c:	9f e3       	ldi	r25, 0x3F	; 63
    836e:	f9 2e       	mov	r15, r25
    8370:	41 2c       	mov	r4, r1
    8372:	51 2c       	mov	r5, r1
    8374:	82 01       	movw	r16, r4
    8376:	01 50       	subi	r16, 0x01	; 1
    8378:	11 09       	sbc	r17, r1
    837a:	20 e0       	ldi	r18, 0x00	; 0
    837c:	30 e0       	ldi	r19, 0x00	; 0
    837e:	40 e8       	ldi	r20, 0x80	; 128
    8380:	5f e3       	ldi	r21, 0x3F	; 63
    8382:	c5 01       	movw	r24, r10
    8384:	b4 01       	movw	r22, r8
    8386:	0e 94 a2 e6 	call	0x1cd44	; 0x1cd44 <__cmpsf2>
    838a:	87 ff       	sbrs	r24, 7
    838c:	0c c0       	rjmp	.+24     	; 0x83a6 <p_etoa+0xf6>
    838e:	20 e0       	ldi	r18, 0x00	; 0
    8390:	30 e0       	ldi	r19, 0x00	; 0
    8392:	40 e2       	ldi	r20, 0x20	; 32
    8394:	51 e4       	ldi	r21, 0x41	; 65
    8396:	c5 01       	movw	r24, r10
    8398:	b4 01       	movw	r22, r8
    839a:	0e 94 f5 e7 	call	0x1cfea	; 0x1cfea <__mulsf3>
    839e:	4b 01       	movw	r8, r22
    83a0:	5c 01       	movw	r10, r24
    83a2:	28 01       	movw	r4, r16
    83a4:	e7 cf       	rjmp	.-50     	; 0x8374 <p_etoa+0xc4>
    83a6:	82 01       	movw	r16, r4
    83a8:	0f 5f       	subi	r16, 0xFF	; 255
    83aa:	1f 4f       	sbci	r17, 0xFF	; 255
    83ac:	20 e0       	ldi	r18, 0x00	; 0
    83ae:	30 e0       	ldi	r19, 0x00	; 0
    83b0:	40 e2       	ldi	r20, 0x20	; 32
    83b2:	51 e4       	ldi	r21, 0x41	; 65
    83b4:	c5 01       	movw	r24, r10
    83b6:	b4 01       	movw	r22, r8
    83b8:	0e 94 f1 e7 	call	0x1cfe2	; 0x1cfe2 <__gesf2>
    83bc:	87 fd       	sbrc	r24, 7
    83be:	0c c0       	rjmp	.+24     	; 0x83d8 <p_etoa+0x128>
    83c0:	20 e0       	ldi	r18, 0x00	; 0
    83c2:	30 e0       	ldi	r19, 0x00	; 0
    83c4:	40 e2       	ldi	r20, 0x20	; 32
    83c6:	51 e4       	ldi	r21, 0x41	; 65
    83c8:	c5 01       	movw	r24, r10
    83ca:	b4 01       	movw	r22, r8
    83cc:	0e 94 a6 e6 	call	0x1cd4c	; 0x1cd4c <__divsf3>
    83d0:	4b 01       	movw	r8, r22
    83d2:	5c 01       	movw	r10, r24
    83d4:	28 01       	movw	r4, r16
    83d6:	e7 cf       	rjmp	.-50     	; 0x83a6 <p_etoa+0xf6>
    83d8:	a7 01       	movw	r20, r14
    83da:	96 01       	movw	r18, r12
    83dc:	c5 01       	movw	r24, r10
    83de:	b4 01       	movw	r22, r8
    83e0:	0e 94 3e e6 	call	0x1cc7c	; 0x1cc7c <__addsf3>
    83e4:	4b 01       	movw	r8, r22
    83e6:	5c 01       	movw	r10, r24
    83e8:	82 01       	movw	r16, r4
    83ea:	3f ef       	ldi	r19, 0xFF	; 255
    83ec:	43 1a       	sub	r4, r19
    83ee:	53 0a       	sbc	r5, r19
    83f0:	20 e0       	ldi	r18, 0x00	; 0
    83f2:	30 e0       	ldi	r19, 0x00	; 0
    83f4:	40 e2       	ldi	r20, 0x20	; 32
    83f6:	51 e4       	ldi	r21, 0x41	; 65
    83f8:	0e 94 f1 e7 	call	0x1cfe2	; 0x1cfe2 <__gesf2>
    83fc:	87 fd       	sbrc	r24, 7
    83fe:	09 c0       	rjmp	.+18     	; 0x8412 <p_etoa+0x162>
    8400:	20 e0       	ldi	r18, 0x00	; 0
    8402:	30 e0       	ldi	r19, 0x00	; 0
    8404:	40 e2       	ldi	r20, 0x20	; 32
    8406:	51 e4       	ldi	r21, 0x41	; 65
    8408:	c5 01       	movw	r24, r10
    840a:	b4 01       	movw	r22, r8
    840c:	0e 94 a6 e6 	call	0x1cd4c	; 0x1cd4c <__divsf3>
    8410:	e9 cf       	rjmp	.-46     	; 0x83e4 <p_etoa+0x134>
    8412:	08 87       	std	Y+8, r16	; 0x08
    8414:	19 87       	std	Y+9, r17	; 0x09
    8416:	85 e6       	ldi	r24, 0x65	; 101
    8418:	89 83       	std	Y+1, r24	; 0x01
    841a:	88 85       	ldd	r24, Y+8	; 0x08
    841c:	99 85       	ldd	r25, Y+9	; 0x09
    841e:	97 ff       	sbrs	r25, 7
    8420:	08 c0       	rjmp	.+16     	; 0x8432 <p_etoa+0x182>
    8422:	91 95       	neg	r25
    8424:	81 95       	neg	r24
    8426:	91 09       	sbc	r25, r1
    8428:	99 87       	std	Y+9, r25	; 0x09
    842a:	88 87       	std	Y+8, r24	; 0x08
    842c:	8d e2       	ldi	r24, 0x2D	; 45
    842e:	90 e0       	ldi	r25, 0x00	; 0
    8430:	02 c0       	rjmp	.+4      	; 0x8436 <p_etoa+0x186>
    8432:	8b e2       	ldi	r24, 0x2B	; 43
    8434:	90 e0       	ldi	r25, 0x00	; 0
    8436:	6c 01       	movw	r12, r24
    8438:	82 e0       	ldi	r24, 0x02	; 2
    843a:	e8 2e       	mov	r14, r24
    843c:	f1 2c       	mov	r15, r1
    843e:	8e 01       	movw	r16, r28
    8440:	08 5f       	subi	r16, 0xF8	; 248
    8442:	1f 4f       	sbci	r17, 0xFF	; 255
    8444:	2a e0       	ldi	r18, 0x0A	; 10
    8446:	30 e0       	ldi	r19, 0x00	; 0
    8448:	42 e0       	ldi	r20, 0x02	; 2
    844a:	50 e0       	ldi	r21, 0x00	; 0
    844c:	65 e0       	ldi	r22, 0x05	; 5
    844e:	70 e0       	ldi	r23, 0x00	; 0
    8450:	ce 01       	movw	r24, r28
    8452:	02 96       	adiw	r24, 0x02	; 2
    8454:	17 dd       	rcall	.-1490   	; 0x7e84 <bin2num>
    8456:	9c 01       	movw	r18, r24
    8458:	93 2d       	mov	r25, r3
    845a:	98 72       	andi	r25, 0x28	; 40
    845c:	90 32       	cpi	r25, 0x20	; 32
    845e:	61 f0       	breq	.+24     	; 0x8478 <p_etoa+0x1c8>
    8460:	c5 01       	movw	r24, r10
    8462:	b4 01       	movw	r22, r8
    8464:	0e 94 0e e7 	call	0x1ce1c	; 0x1ce1c <__fixsfsi>
    8468:	6b 01       	movw	r12, r22
    846a:	7c 01       	movw	r14, r24
    846c:	80 e3       	ldi	r24, 0x30	; 48
    846e:	8c 0d       	add	r24, r12
    8470:	9f dd       	rcall	.-1218   	; 0x7fb0 <pch>
    8472:	21 10       	cpse	r2, r1
    8474:	20 c0       	rjmp	.+64     	; 0x84b6 <p_etoa+0x206>
    8476:	5e c0       	rjmp	.+188    	; 0x8534 <p_etoa+0x284>
    8478:	80 91 7c 19 	lds	r24, 0x197C	; 0x80197c <_pch+0x2>
    847c:	90 91 7d 19 	lds	r25, 0x197D	; 0x80197d <_pch+0x3>
    8480:	0c 85       	ldd	r16, Y+12	; 0x0c
    8482:	1d 85       	ldd	r17, Y+13	; 0x0d
    8484:	08 1b       	sub	r16, r24
    8486:	19 0b       	sbc	r17, r25
    8488:	22 20       	and	r2, r2
    848a:	41 f0       	breq	.+16     	; 0x849c <p_etoa+0x1ec>
    848c:	61 14       	cp	r6, r1
    848e:	71 04       	cpc	r7, r1
    8490:	29 f0       	breq	.+10     	; 0x849c <p_etoa+0x1ec>
    8492:	06 19       	sub	r16, r6
    8494:	17 09       	sbc	r17, r7
    8496:	06 50       	subi	r16, 0x06	; 6
    8498:	11 09       	sbc	r17, r1
    849a:	02 c0       	rjmp	.+4      	; 0x84a0 <p_etoa+0x1f0>
    849c:	05 50       	subi	r16, 0x05	; 5
    849e:	11 09       	sbc	r17, r1
    84a0:	24 30       	cpi	r18, 0x04	; 4
    84a2:	31 05       	cpc	r19, r1
    84a4:	14 f0       	brlt	.+4      	; 0x84aa <p_etoa+0x1fa>
    84a6:	01 50       	subi	r16, 0x01	; 1
    84a8:	11 09       	sbc	r17, r1
    84aa:	10 16       	cp	r1, r16
    84ac:	11 06       	cpc	r1, r17
    84ae:	c4 f6       	brge	.-80     	; 0x8460 <p_etoa+0x1b0>
    84b0:	80 e3       	ldi	r24, 0x30	; 48
    84b2:	7e dd       	rcall	.-1284   	; 0x7fb0 <pch>
    84b4:	f8 cf       	rjmp	.-16     	; 0x84a6 <p_etoa+0x1f6>
    84b6:	61 14       	cp	r6, r1
    84b8:	71 04       	cpc	r7, r1
    84ba:	09 f4       	brne	.+2      	; 0x84be <p_etoa+0x20e>
    84bc:	3b c0       	rjmp	.+118    	; 0x8534 <p_etoa+0x284>
    84be:	b6 01       	movw	r22, r12
    84c0:	dd 0c       	add	r13, r13
    84c2:	88 0b       	sbc	r24, r24
    84c4:	99 0b       	sbc	r25, r25
    84c6:	0e 94 41 e7 	call	0x1ce82	; 0x1ce82 <__floatsisf>
    84ca:	9b 01       	movw	r18, r22
    84cc:	ac 01       	movw	r20, r24
    84ce:	c5 01       	movw	r24, r10
    84d0:	b4 01       	movw	r22, r8
    84d2:	0e 94 3d e6 	call	0x1cc7a	; 0x1cc7a <__subsf3>
    84d6:	20 e0       	ldi	r18, 0x00	; 0
    84d8:	30 e0       	ldi	r19, 0x00	; 0
    84da:	40 e2       	ldi	r20, 0x20	; 32
    84dc:	51 e4       	ldi	r21, 0x41	; 65
    84de:	0e 94 f5 e7 	call	0x1cfea	; 0x1cfea <__mulsf3>
    84e2:	6b 01       	movw	r12, r22
    84e4:	7c 01       	movw	r14, r24
    84e6:	8e e2       	ldi	r24, 0x2E	; 46
    84e8:	63 dd       	rcall	.-1338   	; 0x7fb0 <pch>
    84ea:	c7 01       	movw	r24, r14
    84ec:	b6 01       	movw	r22, r12
    84ee:	0e 94 0e e7 	call	0x1ce1c	; 0x1ce1c <__fixsfsi>
    84f2:	4b 01       	movw	r8, r22
    84f4:	5c 01       	movw	r10, r24
    84f6:	07 2e       	mov	r0, r23
    84f8:	00 0c       	add	r0, r0
    84fa:	88 0b       	sbc	r24, r24
    84fc:	99 0b       	sbc	r25, r25
    84fe:	0e 94 41 e7 	call	0x1ce82	; 0x1ce82 <__floatsisf>
    8502:	9b 01       	movw	r18, r22
    8504:	ac 01       	movw	r20, r24
    8506:	c7 01       	movw	r24, r14
    8508:	b6 01       	movw	r22, r12
    850a:	0e 94 3d e6 	call	0x1cc7a	; 0x1cc7a <__subsf3>
    850e:	6b 01       	movw	r12, r22
    8510:	7c 01       	movw	r14, r24
    8512:	80 e3       	ldi	r24, 0x30	; 48
    8514:	88 0d       	add	r24, r8
    8516:	4c dd       	rcall	.-1384   	; 0x7fb0 <pch>
    8518:	20 e0       	ldi	r18, 0x00	; 0
    851a:	30 e0       	ldi	r19, 0x00	; 0
    851c:	40 e2       	ldi	r20, 0x20	; 32
    851e:	51 e4       	ldi	r21, 0x41	; 65
    8520:	c7 01       	movw	r24, r14
    8522:	b6 01       	movw	r22, r12
    8524:	0e 94 f5 e7 	call	0x1cfea	; 0x1cfea <__mulsf3>
    8528:	6b 01       	movw	r12, r22
    852a:	7c 01       	movw	r14, r24
    852c:	81 e0       	ldi	r24, 0x01	; 1
    852e:	68 1a       	sub	r6, r24
    8530:	71 08       	sbc	r7, r1
    8532:	d9 f6       	brne	.-74     	; 0x84ea <p_etoa+0x23a>
    8534:	8e 01       	movw	r16, r28
    8536:	0f 5f       	subi	r16, 0xFF	; 255
    8538:	1f 4f       	sbci	r17, 0xFF	; 255
    853a:	f8 01       	movw	r30, r16
    853c:	81 91       	ld	r24, Z+
    853e:	8f 01       	movw	r16, r30
    8540:	88 23       	and	r24, r24
    8542:	11 f0       	breq	.+4      	; 0x8548 <p_etoa+0x298>
    8544:	35 dd       	rcall	.-1430   	; 0x7fb0 <pch>
    8546:	f9 cf       	rjmp	.-14     	; 0x853a <p_etoa+0x28a>
    8548:	33 dd       	rcall	.-1434   	; 0x7fb0 <pch>
    854a:	ea 85       	ldd	r30, Y+10	; 0x0a
    854c:	fb 85       	ldd	r31, Y+11	; 0x0b
    854e:	01 90       	ld	r0, Z+
    8550:	00 20       	and	r0, r0
    8552:	e9 f7       	brne	.-6      	; 0x854e <p_etoa+0x29e>
    8554:	cf 01       	movw	r24, r30
    8556:	01 97       	sbiw	r24, 0x01	; 1
    8558:	2a 85       	ldd	r18, Y+10	; 0x0a
    855a:	3b 85       	ldd	r19, Y+11	; 0x0b
    855c:	82 1b       	sub	r24, r18
    855e:	93 0b       	sbc	r25, r19
    8560:	2d 96       	adiw	r28, 0x0d	; 13
    8562:	e2 e1       	ldi	r30, 0x12	; 18
    8564:	0c 94 0f e6 	jmp	0x1cc1e	; 0x1cc1e <__epilogue_restores__>

00008568 <_puts_pad>:
    8568:	a0 e0       	ldi	r26, 0x00	; 0
    856a:	b0 e0       	ldi	r27, 0x00	; 0
    856c:	ea eb       	ldi	r30, 0xBA	; 186
    856e:	f2 e4       	ldi	r31, 0x42	; 66
    8570:	0c 94 f9 e5 	jmp	0x1cbf2	; 0x1cbf2 <__prologue_saves__+0xc>
    8574:	6c 01       	movw	r12, r24
    8576:	4b 01       	movw	r8, r22
    8578:	79 01       	movw	r14, r18
    857a:	24 17       	cp	r18, r20
    857c:	35 07       	cpc	r19, r21
    857e:	24 f4       	brge	.+8      	; 0x8588 <_puts_pad+0x20>
    8580:	ea 01       	movw	r28, r20
    8582:	c2 1b       	sub	r28, r18
    8584:	d3 0b       	sbc	r29, r19
    8586:	02 c0       	rjmp	.+4      	; 0x858c <_puts_pad+0x24>
    8588:	c0 e0       	ldi	r28, 0x00	; 0
    858a:	d0 e0       	ldi	r29, 0x00	; 0
    858c:	01 15       	cp	r16, r1
    858e:	11 05       	cpc	r17, r1
    8590:	49 f4       	brne	.+18     	; 0x85a4 <_puts_pad+0x3c>
    8592:	21 97       	sbiw	r28, 0x01	; 1
    8594:	38 f0       	brcs	.+14     	; 0x85a4 <_puts_pad+0x3c>
    8596:	d6 01       	movw	r26, r12
    8598:	ed 91       	ld	r30, X+
    859a:	fc 91       	ld	r31, X
    859c:	60 e2       	ldi	r22, 0x20	; 32
    859e:	c6 01       	movw	r24, r12
    85a0:	09 95       	icall
    85a2:	f7 cf       	rjmp	.-18     	; 0x8592 <_puts_pad+0x2a>
    85a4:	54 01       	movw	r10, r8
    85a6:	f5 01       	movw	r30, r10
    85a8:	61 91       	ld	r22, Z+
    85aa:	5f 01       	movw	r10, r30
    85ac:	66 23       	and	r22, r22
    85ae:	61 f0       	breq	.+24     	; 0x85c8 <_puts_pad+0x60>
    85b0:	e1 14       	cp	r14, r1
    85b2:	f1 04       	cpc	r15, r1
    85b4:	49 f0       	breq	.+18     	; 0x85c8 <_puts_pad+0x60>
    85b6:	d6 01       	movw	r26, r12
    85b8:	ed 91       	ld	r30, X+
    85ba:	fc 91       	ld	r31, X
    85bc:	c6 01       	movw	r24, r12
    85be:	09 95       	icall
    85c0:	b1 e0       	ldi	r27, 0x01	; 1
    85c2:	eb 1a       	sub	r14, r27
    85c4:	f1 08       	sbc	r15, r1
    85c6:	ef cf       	rjmp	.-34     	; 0x85a6 <_puts_pad+0x3e>
    85c8:	01 15       	cp	r16, r1
    85ca:	11 05       	cpc	r17, r1
    85cc:	51 f0       	breq	.+20     	; 0x85e2 <_puts_pad+0x7a>
    85ce:	20 97       	sbiw	r28, 0x00	; 0
    85d0:	41 f0       	breq	.+16     	; 0x85e2 <_puts_pad+0x7a>
    85d2:	d6 01       	movw	r26, r12
    85d4:	ed 91       	ld	r30, X+
    85d6:	fc 91       	ld	r31, X
    85d8:	60 e2       	ldi	r22, 0x20	; 32
    85da:	c6 01       	movw	r24, r12
    85dc:	09 95       	icall
    85de:	21 97       	sbiw	r28, 0x01	; 1
    85e0:	f6 cf       	rjmp	.-20     	; 0x85ce <_puts_pad+0x66>
    85e2:	cd b7       	in	r28, 0x3d	; 61
    85e4:	de b7       	in	r29, 0x3e	; 62
    85e6:	ec e0       	ldi	r30, 0x0C	; 12
    85e8:	0c 94 15 e6 	jmp	0x1cc2a	; 0x1cc2a <__epilogue_restores__+0xc>

000085ec <_printf_fn>:
    85ec:	ab e6       	ldi	r26, 0x6B	; 107
    85ee:	b0 e0       	ldi	r27, 0x00	; 0
    85f0:	ec ef       	ldi	r30, 0xFC	; 252
    85f2:	f2 e4       	ldi	r31, 0x42	; 66
    85f4:	0c 94 f3 e5 	jmp	0x1cbe6	; 0x1cbe6 <__prologue_saves__>
    85f8:	a5 96       	adiw	r28, 0x25	; 37
    85fa:	9f af       	std	Y+63, r25	; 0x3f
    85fc:	8e af       	std	Y+62, r24	; 0x3e
    85fe:	a5 97       	sbiw	r28, 0x25	; 37
    8600:	6a 01       	movw	r12, r20
    8602:	e6 2e       	mov	r14, r22
    8604:	19 01       	movw	r2, r18
    8606:	a9 96       	adiw	r28, 0x29	; 41
    8608:	1c ae       	std	Y+60, r1	; 0x3c
    860a:	1d ae       	std	Y+61, r1	; 0x3d
    860c:	1e ae       	std	Y+62, r1	; 0x3e
    860e:	1f ae       	std	Y+63, r1	; 0x3f
    8610:	a9 97       	sbiw	r28, 0x29	; 41
    8612:	9e 01       	movw	r18, r28
    8614:	2f 5a       	subi	r18, 0xAF	; 175
    8616:	3f 4f       	sbci	r19, 0xFF	; 255
    8618:	67 96       	adiw	r28, 0x17	; 23
    861a:	3f af       	std	Y+63, r19	; 0x3f
    861c:	2e af       	std	Y+62, r18	; 0x3e
    861e:	67 97       	sbiw	r28, 0x17	; 23
    8620:	ae 01       	movw	r20, r28
    8622:	4d 5b       	subi	r20, 0xBD	; 189
    8624:	5f 4f       	sbci	r21, 0xFF	; 255
    8626:	69 96       	adiw	r28, 0x19	; 25
    8628:	5f af       	std	Y+63, r21	; 0x3f
    862a:	4e af       	std	Y+62, r20	; 0x3e
    862c:	69 97       	sbiw	r28, 0x19	; 25
    862e:	ce 01       	movw	r24, r28
    8630:	85 5b       	subi	r24, 0xB5	; 181
    8632:	9f 4f       	sbci	r25, 0xFF	; 255
    8634:	6b 96       	adiw	r28, 0x1b	; 27
    8636:	9f af       	std	Y+63, r25	; 0x3f
    8638:	8e af       	std	Y+62, r24	; 0x3e
    863a:	6b 97       	sbiw	r28, 0x1b	; 27
    863c:	de 01       	movw	r26, r28
    863e:	ad 5a       	subi	r26, 0xAD	; 173
    8640:	bf 4f       	sbci	r27, 0xFF	; 255
    8642:	6d 96       	adiw	r28, 0x1d	; 29
    8644:	bf af       	std	Y+63, r27	; 0x3f
    8646:	ae af       	std	Y+62, r26	; 0x3e
    8648:	6d 97       	sbiw	r28, 0x1d	; 29
    864a:	f6 01       	movw	r30, r12
    864c:	5e 2d       	mov	r21, r14
    864e:	0e 94 2a e6 	call	0x1cc54	; 0x1cc54 <__xload_1>
    8652:	66 23       	and	r22, r22
    8654:	09 f4       	brne	.+2      	; 0x8658 <_printf_fn+0x6c>
    8656:	df c3       	rjmp	.+1982   	; 0x8e16 <_printf_fn+0x82a>
    8658:	ae 2d       	mov	r26, r14
    865a:	c6 01       	movw	r24, r12
    865c:	01 96       	adiw	r24, 0x01	; 1
    865e:	a1 1d       	adc	r26, r1
    8660:	3c 01       	movw	r6, r24
    8662:	8a 2e       	mov	r8, r26
    8664:	65 32       	cpi	r22, 0x25	; 37
    8666:	51 f0       	breq	.+20     	; 0x867c <_printf_fn+0x90>
    8668:	a5 96       	adiw	r28, 0x25	; 37
    866a:	ae ad       	ldd	r26, Y+62	; 0x3e
    866c:	bf ad       	ldd	r27, Y+63	; 0x3f
    866e:	a5 97       	sbiw	r28, 0x25	; 37
    8670:	ed 91       	ld	r30, X+
    8672:	fc 91       	ld	r31, X
    8674:	11 97       	sbiw	r26, 0x01	; 1
    8676:	cd 01       	movw	r24, r26
    8678:	09 95       	icall
    867a:	99 c3       	rjmp	.+1842   	; 0x8dae <_printf_fn+0x7c2>
    867c:	91 2c       	mov	r9, r1
    867e:	f3 01       	movw	r30, r6
    8680:	58 2d       	mov	r21, r8
    8682:	0e 94 2a e6 	call	0x1cc54	; 0x1cc54 <__xload_1>
    8686:	63 32       	cpi	r22, 0x23	; 35
    8688:	19 f4       	brne	.+6      	; 0x8690 <_printf_fn+0xa4>
    868a:	68 94       	set
    868c:	97 f8       	bld	r9, 7
    868e:	04 c0       	rjmp	.+8      	; 0x8698 <_printf_fn+0xac>
    8690:	6b 32       	cpi	r22, 0x2B	; 43
    8692:	39 f4       	brne	.+14     	; 0x86a2 <_printf_fn+0xb6>
    8694:	68 94       	set
    8696:	92 f8       	bld	r9, 2
    8698:	bf ef       	ldi	r27, 0xFF	; 255
    869a:	6b 1a       	sub	r6, r27
    869c:	7b 0a       	sbc	r7, r27
    869e:	8b 0a       	sbc	r8, r27
    86a0:	ee cf       	rjmp	.-36     	; 0x867e <_printf_fn+0x92>
    86a2:	6d 32       	cpi	r22, 0x2D	; 45
    86a4:	a9 f4       	brne	.+42     	; 0x86d0 <_printf_fn+0xe4>
    86a6:	93 fc       	sbrc	r9, 3
    86a8:	05 c0       	rjmp	.+10     	; 0x86b4 <_printf_fn+0xc8>
    86aa:	6d 32       	cpi	r22, 0x2D	; 45
    86ac:	19 f4       	brne	.+6      	; 0x86b4 <_printf_fn+0xc8>
    86ae:	68 94       	set
    86b0:	93 f8       	bld	r9, 3
    86b2:	f2 cf       	rjmp	.-28     	; 0x8698 <_printf_fn+0xac>
    86b4:	94 fc       	sbrc	r9, 4
    86b6:	05 c0       	rjmp	.+10     	; 0x86c2 <_printf_fn+0xd6>
    86b8:	60 32       	cpi	r22, 0x20	; 32
    86ba:	19 f4       	brne	.+6      	; 0x86c2 <_printf_fn+0xd6>
    86bc:	68 94       	set
    86be:	94 f8       	bld	r9, 4
    86c0:	eb cf       	rjmp	.-42     	; 0x8698 <_printf_fn+0xac>
    86c2:	95 fc       	sbrc	r9, 5
    86c4:	e9 cf       	rjmp	.-46     	; 0x8698 <_printf_fn+0xac>
    86c6:	60 33       	cpi	r22, 0x30	; 48
    86c8:	39 f7       	brne	.-50     	; 0x8698 <_printf_fn+0xac>
    86ca:	68 94       	set
    86cc:	95 f8       	bld	r9, 5
    86ce:	e4 cf       	rjmp	.-56     	; 0x8698 <_printf_fn+0xac>
    86d0:	86 2f       	mov	r24, r22
    86d2:	8f 7e       	andi	r24, 0xEF	; 239
    86d4:	80 32       	cpi	r24, 0x20	; 32
    86d6:	39 f3       	breq	.-50     	; 0x86a6 <_printf_fn+0xba>
    86d8:	70 e0       	ldi	r23, 0x00	; 0
    86da:	60 53       	subi	r22, 0x30	; 48
    86dc:	71 09       	sbc	r23, r1
    86de:	41 2c       	mov	r4, r1
    86e0:	51 2c       	mov	r5, r1
    86e2:	6a 30       	cpi	r22, 0x0A	; 10
    86e4:	71 05       	cpc	r23, r1
    86e6:	e0 f4       	brcc	.+56     	; 0x8720 <_printf_fn+0x134>
    86e8:	2a e0       	ldi	r18, 0x0A	; 10
    86ea:	f3 01       	movw	r30, r6
    86ec:	58 2d       	mov	r21, r8
    86ee:	0e 94 2a e6 	call	0x1cc54	; 0x1cc54 <__xload_1>
    86f2:	70 e0       	ldi	r23, 0x00	; 0
    86f4:	cb 01       	movw	r24, r22
    86f6:	c0 97       	sbiw	r24, 0x30	; 48
    86f8:	0a 97       	sbiw	r24, 0x0a	; 10
    86fa:	80 f4       	brcc	.+32     	; 0x871c <_printf_fn+0x130>
    86fc:	ef ef       	ldi	r30, 0xFF	; 255
    86fe:	6e 1a       	sub	r6, r30
    8700:	7e 0a       	sbc	r7, r30
    8702:	8e 0a       	sbc	r8, r30
    8704:	24 9d       	mul	r18, r4
    8706:	c0 01       	movw	r24, r0
    8708:	25 9d       	mul	r18, r5
    870a:	90 0d       	add	r25, r0
    870c:	11 24       	eor	r1, r1
    870e:	68 0f       	add	r22, r24
    8710:	79 1f       	adc	r23, r25
    8712:	2b 01       	movw	r4, r22
    8714:	f0 e3       	ldi	r31, 0x30	; 48
    8716:	4f 1a       	sub	r4, r31
    8718:	51 08       	sbc	r5, r1
    871a:	e7 cf       	rjmp	.-50     	; 0x86ea <_printf_fn+0xfe>
    871c:	68 94       	set
    871e:	90 f8       	bld	r9, 0
    8720:	f3 01       	movw	r30, r6
    8722:	58 2d       	mov	r21, r8
    8724:	0e 94 2a e6 	call	0x1cc54	; 0x1cc54 <__xload_1>
    8728:	6e 32       	cpi	r22, 0x2E	; 46
    872a:	59 f5       	brne	.+86     	; 0x8782 <_printf_fn+0x196>
    872c:	2f ef       	ldi	r18, 0xFF	; 255
    872e:	62 1a       	sub	r6, r18
    8730:	72 0a       	sbc	r7, r18
    8732:	82 0a       	sbc	r8, r18
    8734:	a1 96       	adiw	r28, 0x21	; 33
    8736:	1f ae       	std	Y+63, r1	; 0x3f
    8738:	1e ae       	std	Y+62, r1	; 0x3e
    873a:	a1 97       	sbiw	r28, 0x21	; 33
    873c:	2a e0       	ldi	r18, 0x0A	; 10
    873e:	f3 01       	movw	r30, r6
    8740:	58 2d       	mov	r21, r8
    8742:	0e 94 2a e6 	call	0x1cc54	; 0x1cc54 <__xload_1>
    8746:	70 e0       	ldi	r23, 0x00	; 0
    8748:	cb 01       	movw	r24, r22
    874a:	c0 97       	sbiw	r24, 0x30	; 48
    874c:	0a 97       	sbiw	r24, 0x0a	; 10
    874e:	b0 f4       	brcc	.+44     	; 0x877c <_printf_fn+0x190>
    8750:	3f ef       	ldi	r19, 0xFF	; 255
    8752:	63 1a       	sub	r6, r19
    8754:	73 0a       	sbc	r7, r19
    8756:	83 0a       	sbc	r8, r19
    8758:	a1 96       	adiw	r28, 0x21	; 33
    875a:	4e ad       	ldd	r20, Y+62	; 0x3e
    875c:	5f ad       	ldd	r21, Y+63	; 0x3f
    875e:	a1 97       	sbiw	r28, 0x21	; 33
    8760:	24 9f       	mul	r18, r20
    8762:	c0 01       	movw	r24, r0
    8764:	25 9f       	mul	r18, r21
    8766:	90 0d       	add	r25, r0
    8768:	11 24       	eor	r1, r1
    876a:	68 0f       	add	r22, r24
    876c:	79 1f       	adc	r23, r25
    876e:	cb 01       	movw	r24, r22
    8770:	c0 97       	sbiw	r24, 0x30	; 48
    8772:	a1 96       	adiw	r28, 0x21	; 33
    8774:	9f af       	std	Y+63, r25	; 0x3f
    8776:	8e af       	std	Y+62, r24	; 0x3e
    8778:	a1 97       	sbiw	r28, 0x21	; 33
    877a:	e1 cf       	rjmp	.-62     	; 0x873e <_printf_fn+0x152>
    877c:	68 94       	set
    877e:	91 f8       	bld	r9, 1
    8780:	04 c0       	rjmp	.+8      	; 0x878a <_printf_fn+0x19e>
    8782:	a1 96       	adiw	r28, 0x21	; 33
    8784:	1f ae       	std	Y+63, r1	; 0x3f
    8786:	1e ae       	std	Y+62, r1	; 0x3e
    8788:	a1 97       	sbiw	r28, 0x21	; 33
    878a:	f3 01       	movw	r30, r6
    878c:	58 2d       	mov	r21, r8
    878e:	0e 94 2a e6 	call	0x1cc54	; 0x1cc54 <__xload_1>
    8792:	69 34       	cpi	r22, 0x49	; 73
    8794:	09 f0       	breq	.+2      	; 0x8798 <_printf_fn+0x1ac>
    8796:	45 c0       	rjmp	.+138    	; 0x8822 <_printf_fn+0x236>
    8798:	9f ef       	ldi	r25, 0xFF	; 255
    879a:	69 1a       	sub	r6, r25
    879c:	79 0a       	sbc	r7, r25
    879e:	89 0a       	sbc	r8, r25
    87a0:	6f 96       	adiw	r28, 0x1f	; 31
    87a2:	1f ae       	std	Y+63, r1	; 0x3f
    87a4:	1e ae       	std	Y+62, r1	; 0x3e
    87a6:	6f 97       	sbiw	r28, 0x1f	; 31
    87a8:	2a e0       	ldi	r18, 0x0A	; 10
    87aa:	f3 01       	movw	r30, r6
    87ac:	58 2d       	mov	r21, r8
    87ae:	0e 94 2a e6 	call	0x1cc54	; 0x1cc54 <__xload_1>
    87b2:	70 e0       	ldi	r23, 0x00	; 0
    87b4:	cb 01       	movw	r24, r22
    87b6:	c0 97       	sbiw	r24, 0x30	; 48
    87b8:	0a 97       	sbiw	r24, 0x0a	; 10
    87ba:	b8 f4       	brcc	.+46     	; 0x87ea <_printf_fn+0x1fe>
    87bc:	af ef       	ldi	r26, 0xFF	; 255
    87be:	6a 1a       	sub	r6, r26
    87c0:	7a 0a       	sbc	r7, r26
    87c2:	8a 0a       	sbc	r8, r26
    87c4:	6f 96       	adiw	r28, 0x1f	; 31
    87c6:	ee ad       	ldd	r30, Y+62	; 0x3e
    87c8:	ff ad       	ldd	r31, Y+63	; 0x3f
    87ca:	6f 97       	sbiw	r28, 0x1f	; 31
    87cc:	2e 9f       	mul	r18, r30
    87ce:	c0 01       	movw	r24, r0
    87d0:	2f 9f       	mul	r18, r31
    87d2:	90 0d       	add	r25, r0
    87d4:	11 24       	eor	r1, r1
    87d6:	68 0f       	add	r22, r24
    87d8:	79 1f       	adc	r23, r25
    87da:	ab 01       	movw	r20, r22
    87dc:	40 53       	subi	r20, 0x30	; 48
    87de:	51 09       	sbc	r21, r1
    87e0:	6f 96       	adiw	r28, 0x1f	; 31
    87e2:	5f af       	std	Y+63, r21	; 0x3f
    87e4:	4e af       	std	Y+62, r20	; 0x3e
    87e6:	6f 97       	sbiw	r28, 0x1f	; 31
    87e8:	e0 cf       	rjmp	.-64     	; 0x87aa <_printf_fn+0x1be>
    87ea:	6f 96       	adiw	r28, 0x1f	; 31
    87ec:	8e ad       	ldd	r24, Y+62	; 0x3e
    87ee:	9f ad       	ldd	r25, Y+63	; 0x3f
    87f0:	6f 97       	sbiw	r28, 0x1f	; 31
    87f2:	00 97       	sbiw	r24, 0x00	; 0
    87f4:	09 f4       	brne	.+2      	; 0x87f8 <_printf_fn+0x20c>
    87f6:	4f c0       	rjmp	.+158    	; 0x8896 <_printf_fn+0x2aa>
    87f8:	87 70       	andi	r24, 0x07	; 7
    87fa:	99 27       	eor	r25, r25
    87fc:	89 2b       	or	r24, r25
    87fe:	09 f0       	breq	.+2      	; 0x8802 <_printf_fn+0x216>
    8800:	46 c0       	rjmp	.+140    	; 0x888e <_printf_fn+0x2a2>
    8802:	6f 96       	adiw	r28, 0x1f	; 31
    8804:	ae ad       	ldd	r26, Y+62	; 0x3e
    8806:	bf ad       	ldd	r27, Y+63	; 0x3f
    8808:	6f 97       	sbiw	r28, 0x1f	; 31
    880a:	83 e0       	ldi	r24, 0x03	; 3
    880c:	b5 95       	asr	r27
    880e:	a7 95       	ror	r26
    8810:	8a 95       	dec	r24
    8812:	e1 f7       	brne	.-8      	; 0x880c <_printf_fn+0x220>
    8814:	6f 96       	adiw	r28, 0x1f	; 31
    8816:	bf af       	std	Y+63, r27	; 0x3f
    8818:	ae af       	std	Y+62, r26	; 0x3e
    881a:	6f 97       	sbiw	r28, 0x1f	; 31
    881c:	ab 2b       	or	r26, r27
    881e:	d9 f1       	breq	.+118    	; 0x8896 <_printf_fn+0x2aa>
    8820:	27 c0       	rjmp	.+78     	; 0x8870 <_printf_fn+0x284>
    8822:	68 36       	cpi	r22, 0x68	; 104
    8824:	29 f4       	brne	.+10     	; 0x8830 <_printf_fn+0x244>
    8826:	bf ef       	ldi	r27, 0xFF	; 255
    8828:	6b 1a       	sub	r6, r27
    882a:	7b 0a       	sbc	r7, r27
    882c:	8b 0a       	sbc	r8, r27
    882e:	c2 c2       	rjmp	.+1412   	; 0x8db4 <_printf_fn+0x7c8>
    8830:	6c 36       	cpi	r22, 0x6C	; 108
    8832:	09 f0       	breq	.+2      	; 0x8836 <_printf_fn+0x24a>
    8834:	bf c2       	rjmp	.+1406   	; 0x8db4 <_printf_fn+0x7c8>
    8836:	a8 2d       	mov	r26, r8
    8838:	c3 01       	movw	r24, r6
    883a:	01 96       	adiw	r24, 0x01	; 1
    883c:	a1 1d       	adc	r26, r1
    883e:	fc 01       	movw	r30, r24
    8840:	5a 2f       	mov	r21, r26
    8842:	0e 94 2a e6 	call	0x1cc54	; 0x1cc54 <__xload_1>
    8846:	6c 36       	cpi	r22, 0x6C	; 108
    8848:	49 f0       	breq	.+18     	; 0x885c <_printf_fn+0x270>
    884a:	3c 01       	movw	r6, r24
    884c:	8a 2e       	mov	r8, r26
    884e:	24 e0       	ldi	r18, 0x04	; 4
    8850:	30 e0       	ldi	r19, 0x00	; 0
    8852:	6f 96       	adiw	r28, 0x1f	; 31
    8854:	3f af       	std	Y+63, r19	; 0x3f
    8856:	2e af       	std	Y+62, r18	; 0x3e
    8858:	6f 97       	sbiw	r28, 0x1f	; 31
    885a:	0a c0       	rjmp	.+20     	; 0x8870 <_printf_fn+0x284>
    885c:	32 e0       	ldi	r19, 0x02	; 2
    885e:	63 0e       	add	r6, r19
    8860:	71 1c       	adc	r7, r1
    8862:	81 1c       	adc	r8, r1
    8864:	48 e0       	ldi	r20, 0x08	; 8
    8866:	50 e0       	ldi	r21, 0x00	; 0
    8868:	6f 96       	adiw	r28, 0x1f	; 31
    886a:	5f af       	std	Y+63, r21	; 0x3f
    886c:	4e af       	std	Y+62, r20	; 0x3e
    886e:	6f 97       	sbiw	r28, 0x1f	; 31
    8870:	f3 01       	movw	r30, r6
    8872:	58 2d       	mov	r21, r8
    8874:	0e 94 2a e6 	call	0x1cc54	; 0x1cc54 <__xload_1>
    8878:	86 2f       	mov	r24, r22
    887a:	90 e0       	ldi	r25, 0x00	; 0
    887c:	a3 96       	adiw	r28, 0x23	; 35
    887e:	9f af       	std	Y+63, r25	; 0x3f
    8880:	8e af       	std	Y+62, r24	; 0x3e
    8882:	a3 97       	sbiw	r28, 0x23	; 35
    8884:	84 36       	cpi	r24, 0x64	; 100
    8886:	91 05       	cpc	r25, r1
    8888:	09 f4       	brne	.+2      	; 0x888c <_printf_fn+0x2a0>
    888a:	9b c2       	rjmp	.+1334   	; 0x8dc2 <_printf_fn+0x7d6>
    888c:	08 c0       	rjmp	.+16     	; 0x889e <_printf_fn+0x2b2>
    888e:	6f 96       	adiw	r28, 0x1f	; 31
    8890:	1f ae       	std	Y+63, r1	; 0x3f
    8892:	1e ae       	std	Y+62, r1	; 0x3e
    8894:	6f 97       	sbiw	r28, 0x1f	; 31
    8896:	a3 96       	adiw	r28, 0x23	; 35
    8898:	1f ae       	std	Y+63, r1	; 0x3f
    889a:	1e ae       	std	Y+62, r1	; 0x3e
    889c:	a3 97       	sbiw	r28, 0x23	; 35
    889e:	31 e0       	ldi	r19, 0x01	; 1
    88a0:	20 e0       	ldi	r18, 0x00	; 0
    88a2:	a3 96       	adiw	r28, 0x23	; 35
    88a4:	ae ad       	ldd	r26, Y+62	; 0x3e
    88a6:	bf ad       	ldd	r27, Y+63	; 0x3f
    88a8:	a3 97       	sbiw	r28, 0x23	; 35
    88aa:	a4 34       	cpi	r26, 0x44	; 68
    88ac:	b1 05       	cpc	r27, r1
    88ae:	09 f0       	breq	.+2      	; 0x88b2 <_printf_fn+0x2c6>
    88b0:	30 e0       	ldi	r19, 0x00	; 0
    88b2:	83 2f       	mov	r24, r19
    88b4:	92 2f       	mov	r25, r18
    88b6:	a3 96       	adiw	r28, 0x23	; 35
    88b8:	ee ad       	ldd	r30, Y+62	; 0x3e
    88ba:	ff ad       	ldd	r31, Y+63	; 0x3f
    88bc:	a3 97       	sbiw	r28, 0x23	; 35
    88be:	e2 54       	subi	r30, 0x42	; 66
    88c0:	f1 09       	sbc	r31, r1
    88c2:	e7 33       	cpi	r30, 0x37	; 55
    88c4:	f1 05       	cpc	r31, r1
    88c6:	08 f0       	brcs	.+2      	; 0x88ca <_printf_fn+0x2de>
    88c8:	65 c1       	rjmp	.+714    	; 0x8b94 <_printf_fn+0x5a8>
    88ca:	ea 5b       	subi	r30, 0xBA	; 186
    88cc:	ff 4f       	sbci	r31, 0xFF	; 255
    88ce:	0c 94 af e5 	jmp	0x1cb5e	; 0x1cb5e <__tablejump2__>
    88d2:	e2 e0       	ldi	r30, 0x02	; 2
    88d4:	f0 e0       	ldi	r31, 0x00	; 0
    88d6:	6f 96       	adiw	r28, 0x1f	; 31
    88d8:	ff af       	std	Y+63, r31	; 0x3f
    88da:	ee af       	std	Y+62, r30	; 0x3e
    88dc:	6f 97       	sbiw	r28, 0x1f	; 31
    88de:	29 2d       	mov	r18, r9
    88e0:	28 72       	andi	r18, 0x28	; 40
    88e2:	28 32       	cpi	r18, 0x28	; 40
    88e4:	11 f4       	brne	.+4      	; 0x88ea <_printf_fn+0x2fe>
    88e6:	e8 94       	clt
    88e8:	95 f8       	bld	r9, 5
    88ea:	29 2d       	mov	r18, r9
    88ec:	22 72       	andi	r18, 0x22	; 34
    88ee:	22 32       	cpi	r18, 0x22	; 34
    88f0:	11 f4       	brne	.+4      	; 0x88f6 <_printf_fn+0x30a>
    88f2:	e8 94       	clt
    88f4:	95 f8       	bld	r9, 5
    88f6:	29 2d       	mov	r18, r9
    88f8:	21 72       	andi	r18, 0x21	; 33
    88fa:	21 32       	cpi	r18, 0x21	; 33
    88fc:	59 f4       	brne	.+22     	; 0x8914 <_printf_fn+0x328>
    88fe:	a1 96       	adiw	r28, 0x21	; 33
    8900:	2e ad       	ldd	r18, Y+62	; 0x3e
    8902:	3f ad       	ldd	r19, Y+63	; 0x3f
    8904:	a1 97       	sbiw	r28, 0x21	; 33
    8906:	24 15       	cp	r18, r4
    8908:	35 05       	cpc	r19, r5
    890a:	24 f4       	brge	.+8      	; 0x8914 <_printf_fn+0x328>
    890c:	a1 96       	adiw	r28, 0x21	; 33
    890e:	5f ae       	std	Y+63, r5	; 0x3f
    8910:	4e ae       	std	Y+62, r4	; 0x3e
    8912:	a1 97       	sbiw	r28, 0x21	; 33
    8914:	29 2d       	mov	r18, r9
    8916:	23 72       	andi	r18, 0x23	; 35
    8918:	23 32       	cpi	r18, 0x23	; 35
    891a:	59 f4       	brne	.+22     	; 0x8932 <_printf_fn+0x346>
    891c:	a1 96       	adiw	r28, 0x21	; 33
    891e:	4e ad       	ldd	r20, Y+62	; 0x3e
    8920:	5f ad       	ldd	r21, Y+63	; 0x3f
    8922:	a1 97       	sbiw	r28, 0x21	; 33
    8924:	44 15       	cp	r20, r4
    8926:	55 05       	cpc	r21, r5
    8928:	24 f4       	brge	.+8      	; 0x8932 <_printf_fn+0x346>
    892a:	a1 96       	adiw	r28, 0x21	; 33
    892c:	5f ae       	std	Y+63, r5	; 0x3f
    892e:	4e ae       	std	Y+62, r4	; 0x3e
    8930:	a1 97       	sbiw	r28, 0x21	; 33
    8932:	e8 94       	clt
    8934:	94 f8       	bld	r9, 4
    8936:	e8 94       	clt
    8938:	92 f8       	bld	r9, 2
    893a:	e8 94       	clt
    893c:	96 f8       	bld	r9, 6
    893e:	6f 96       	adiw	r28, 0x1f	; 31
    8940:	ae ad       	ldd	r26, Y+62	; 0x3e
    8942:	bf ad       	ldd	r27, Y+63	; 0x3f
    8944:	6f 97       	sbiw	r28, 0x1f	; 31
    8946:	12 97       	sbiw	r26, 0x02	; 2
    8948:	29 f5       	brne	.+74     	; 0x8994 <_printf_fn+0x3a8>
    894a:	51 01       	movw	r10, r2
    894c:	b2 e0       	ldi	r27, 0x02	; 2
    894e:	ab 0e       	add	r10, r27
    8950:	b1 1c       	adc	r11, r1
    8952:	f1 01       	movw	r30, r2
    8954:	80 81       	ld	r24, Z
    8956:	91 81       	ldd	r25, Z+1	; 0x01
    8958:	65 96       	adiw	r28, 0x15	; 21
    895a:	9f af       	std	Y+63, r25	; 0x3f
    895c:	8e af       	std	Y+62, r24	; 0x3e
    895e:	65 97       	sbiw	r28, 0x15	; 21
    8960:	a3 96       	adiw	r28, 0x23	; 35
    8962:	2e ad       	ldd	r18, Y+62	; 0x3e
    8964:	3f ad       	ldd	r19, Y+63	; 0x3f
    8966:	a3 97       	sbiw	r28, 0x23	; 35
    8968:	24 34       	cpi	r18, 0x44	; 68
    896a:	31 05       	cpc	r19, r1
    896c:	09 f0       	breq	.+2      	; 0x8970 <_printf_fn+0x384>
    896e:	c0 c0       	rjmp	.+384    	; 0x8af0 <_printf_fn+0x504>
    8970:	97 ff       	sbrs	r25, 7
    8972:	b8 c0       	rjmp	.+368    	; 0x8ae4 <_printf_fn+0x4f8>
    8974:	68 94       	set
    8976:	96 f8       	bld	r9, 6
    8978:	91 95       	neg	r25
    897a:	81 95       	neg	r24
    897c:	91 09       	sbc	r25, r1
    897e:	65 96       	adiw	r28, 0x15	; 21
    8980:	9f af       	std	Y+63, r25	; 0x3f
    8982:	8e af       	std	Y+62, r24	; 0x3e
    8984:	65 97       	sbiw	r28, 0x15	; 21
    8986:	42 e0       	ldi	r20, 0x02	; 2
    8988:	50 e0       	ldi	r21, 0x00	; 0
    898a:	6f 96       	adiw	r28, 0x1f	; 31
    898c:	5f af       	std	Y+63, r21	; 0x3f
    898e:	4e af       	std	Y+62, r20	; 0x3e
    8990:	6f 97       	sbiw	r28, 0x1f	; 31
    8992:	ae c0       	rjmp	.+348    	; 0x8af0 <_printf_fn+0x504>
    8994:	6f 96       	adiw	r28, 0x1f	; 31
    8996:	ae ad       	ldd	r26, Y+62	; 0x3e
    8998:	bf ad       	ldd	r27, Y+63	; 0x3f
    899a:	6f 97       	sbiw	r28, 0x1f	; 31
    899c:	14 97       	sbiw	r26, 0x04	; 4
    899e:	59 f5       	brne	.+86     	; 0x89f6 <_printf_fn+0x40a>
    89a0:	51 01       	movw	r10, r2
    89a2:	b4 e0       	ldi	r27, 0x04	; 4
    89a4:	ab 0e       	add	r10, r27
    89a6:	b1 1c       	adc	r11, r1
    89a8:	f1 01       	movw	r30, r2
    89aa:	80 81       	ld	r24, Z
    89ac:	91 81       	ldd	r25, Z+1	; 0x01
    89ae:	a2 81       	ldd	r26, Z+2	; 0x02
    89b0:	b3 81       	ldd	r27, Z+3	; 0x03
    89b2:	2f 96       	adiw	r28, 0x0f	; 15
    89b4:	8c af       	std	Y+60, r24	; 0x3c
    89b6:	9d af       	std	Y+61, r25	; 0x3d
    89b8:	ae af       	std	Y+62, r26	; 0x3e
    89ba:	bf af       	std	Y+63, r27	; 0x3f
    89bc:	2f 97       	sbiw	r28, 0x0f	; 15
    89be:	a3 96       	adiw	r28, 0x23	; 35
    89c0:	2e ad       	ldd	r18, Y+62	; 0x3e
    89c2:	3f ad       	ldd	r19, Y+63	; 0x3f
    89c4:	a3 97       	sbiw	r28, 0x23	; 35
    89c6:	24 34       	cpi	r18, 0x44	; 68
    89c8:	31 05       	cpc	r19, r1
    89ca:	09 f0       	breq	.+2      	; 0x89ce <_printf_fn+0x3e2>
    89cc:	9e c0       	rjmp	.+316    	; 0x8b0a <_printf_fn+0x51e>
    89ce:	b7 ff       	sbrs	r27, 7
    89d0:	96 c0       	rjmp	.+300    	; 0x8afe <_printf_fn+0x512>
    89d2:	68 94       	set
    89d4:	96 f8       	bld	r9, 6
    89d6:	b0 95       	com	r27
    89d8:	a0 95       	com	r26
    89da:	90 95       	com	r25
    89dc:	81 95       	neg	r24
    89de:	9f 4f       	sbci	r25, 0xFF	; 255
    89e0:	af 4f       	sbci	r26, 0xFF	; 255
    89e2:	bf 4f       	sbci	r27, 0xFF	; 255
    89e4:	2f 96       	adiw	r28, 0x0f	; 15
    89e6:	8c af       	std	Y+60, r24	; 0x3c
    89e8:	9d af       	std	Y+61, r25	; 0x3d
    89ea:	ae af       	std	Y+62, r26	; 0x3e
    89ec:	bf af       	std	Y+63, r27	; 0x3f
    89ee:	2f 97       	sbiw	r28, 0x0f	; 15
    89f0:	86 c0       	rjmp	.+268    	; 0x8afe <_printf_fn+0x512>
    89f2:	81 e0       	ldi	r24, 0x01	; 1
    89f4:	90 e0       	ldi	r25, 0x00	; 0
    89f6:	6f 96       	adiw	r28, 0x1f	; 31
    89f8:	ae ad       	ldd	r26, Y+62	; 0x3e
    89fa:	bf ad       	ldd	r27, Y+63	; 0x3f
    89fc:	6f 97       	sbiw	r28, 0x1f	; 31
    89fe:	51 01       	movw	r10, r2
    8a00:	18 97       	sbiw	r26, 0x08	; 8
    8a02:	09 f0       	breq	.+2      	; 0x8a06 <_printf_fn+0x41a>
    8a04:	89 c0       	rjmp	.+274    	; 0x8b18 <_printf_fn+0x52c>
    8a06:	b8 e0       	ldi	r27, 0x08	; 8
    8a08:	ab 0e       	add	r10, r27
    8a0a:	b1 1c       	adc	r11, r1
    8a0c:	f1 01       	movw	r30, r2
    8a0e:	f0 81       	ld	r31, Z
    8a10:	aa 96       	adiw	r28, 0x2a	; 42
    8a12:	ff af       	std	Y+63, r31	; 0x3f
    8a14:	aa 97       	sbiw	r28, 0x2a	; 42
    8a16:	d1 01       	movw	r26, r2
    8a18:	11 96       	adiw	r26, 0x01	; 1
    8a1a:	fc 90       	ld	r15, X
    8a1c:	11 97       	sbiw	r26, 0x01	; 1
    8a1e:	12 96       	adiw	r26, 0x02	; 2
    8a20:	0c 91       	ld	r16, X
    8a22:	12 97       	sbiw	r26, 0x02	; 2
    8a24:	13 96       	adiw	r26, 0x03	; 3
    8a26:	1c 91       	ld	r17, X
    8a28:	13 97       	sbiw	r26, 0x03	; 3
    8a2a:	14 96       	adiw	r26, 0x04	; 4
    8a2c:	bc 91       	ld	r27, X
    8a2e:	f1 01       	movw	r30, r2
    8a30:	f5 81       	ldd	r31, Z+5	; 0x05
    8a32:	ab 96       	adiw	r28, 0x2b	; 43
    8a34:	ff af       	std	Y+63, r31	; 0x3f
    8a36:	ab 97       	sbiw	r28, 0x2b	; 43
    8a38:	f1 01       	movw	r30, r2
    8a3a:	f6 81       	ldd	r31, Z+6	; 0x06
    8a3c:	ac 96       	adiw	r28, 0x2c	; 44
    8a3e:	ff af       	std	Y+63, r31	; 0x3f
    8a40:	ac 97       	sbiw	r28, 0x2c	; 44
    8a42:	f1 01       	movw	r30, r2
    8a44:	37 80       	ldd	r3, Z+7	; 0x07
    8a46:	aa 96       	adiw	r28, 0x2a	; 42
    8a48:	ff ad       	ldd	r31, Y+63	; 0x3f
    8a4a:	aa 97       	sbiw	r28, 0x2a	; 42
    8a4c:	24 96       	adiw	r28, 0x04	; 4
    8a4e:	ff af       	std	Y+63, r31	; 0x3f
    8a50:	24 97       	sbiw	r28, 0x04	; 4
    8a52:	25 96       	adiw	r28, 0x05	; 5
    8a54:	ff ae       	std	Y+63, r15	; 0x3f
    8a56:	25 97       	sbiw	r28, 0x05	; 5
    8a58:	26 96       	adiw	r28, 0x06	; 6
    8a5a:	0f af       	std	Y+63, r16	; 0x3f
    8a5c:	26 97       	sbiw	r28, 0x06	; 6
    8a5e:	27 96       	adiw	r28, 0x07	; 7
    8a60:	1f af       	std	Y+63, r17	; 0x3f
    8a62:	27 97       	sbiw	r28, 0x07	; 7
    8a64:	28 96       	adiw	r28, 0x08	; 8
    8a66:	bf af       	std	Y+63, r27	; 0x3f
    8a68:	28 97       	sbiw	r28, 0x08	; 8
    8a6a:	ab 96       	adiw	r28, 0x2b	; 43
    8a6c:	ef ad       	ldd	r30, Y+63	; 0x3f
    8a6e:	ab 97       	sbiw	r28, 0x2b	; 43
    8a70:	29 96       	adiw	r28, 0x09	; 9
    8a72:	ef af       	std	Y+63, r30	; 0x3f
    8a74:	29 97       	sbiw	r28, 0x09	; 9
    8a76:	ac 96       	adiw	r28, 0x2c	; 44
    8a78:	ff ad       	ldd	r31, Y+63	; 0x3f
    8a7a:	ac 97       	sbiw	r28, 0x2c	; 44
    8a7c:	2a 96       	adiw	r28, 0x0a	; 10
    8a7e:	ff af       	std	Y+63, r31	; 0x3f
    8a80:	2a 97       	sbiw	r28, 0x0a	; 10
    8a82:	2b 96       	adiw	r28, 0x0b	; 11
    8a84:	3f ae       	std	Y+63, r3	; 0x3f
    8a86:	2b 97       	sbiw	r28, 0x0b	; 11
    8a88:	89 2b       	or	r24, r25
    8a8a:	09 f4       	brne	.+2      	; 0x8a8e <_printf_fn+0x4a2>
    8a8c:	50 c0       	rjmp	.+160    	; 0x8b2e <_printf_fn+0x542>
    8a8e:	aa 96       	adiw	r28, 0x2a	; 42
    8a90:	2f ad       	ldd	r18, Y+63	; 0x3f
    8a92:	aa 97       	sbiw	r28, 0x2a	; 42
    8a94:	3f 2d       	mov	r19, r15
    8a96:	a8 01       	movw	r20, r16
    8a98:	6b 2f       	mov	r22, r27
    8a9a:	7e 2f       	mov	r23, r30
    8a9c:	8f 2f       	mov	r24, r31
    8a9e:	93 2d       	mov	r25, r3
    8aa0:	a0 e0       	ldi	r26, 0x00	; 0
    8aa2:	0e 94 31 e6 	call	0x1cc62	; 0x1cc62 <__cmpdi2_s8>
    8aa6:	0c f0       	brlt	.+2      	; 0x8aaa <_printf_fn+0x4be>
    8aa8:	42 c0       	rjmp	.+132    	; 0x8b2e <_printf_fn+0x542>
    8aaa:	68 94       	set
    8aac:	96 f8       	bld	r9, 6
    8aae:	0e 94 e3 e5 	call	0x1cbc6	; 0x1cbc6 <__negdi2>
    8ab2:	24 96       	adiw	r28, 0x04	; 4
    8ab4:	2f af       	std	Y+63, r18	; 0x3f
    8ab6:	24 97       	sbiw	r28, 0x04	; 4
    8ab8:	25 96       	adiw	r28, 0x05	; 5
    8aba:	3f af       	std	Y+63, r19	; 0x3f
    8abc:	25 97       	sbiw	r28, 0x05	; 5
    8abe:	26 96       	adiw	r28, 0x06	; 6
    8ac0:	4f af       	std	Y+63, r20	; 0x3f
    8ac2:	26 97       	sbiw	r28, 0x06	; 6
    8ac4:	27 96       	adiw	r28, 0x07	; 7
    8ac6:	5f af       	std	Y+63, r21	; 0x3f
    8ac8:	27 97       	sbiw	r28, 0x07	; 7
    8aca:	28 96       	adiw	r28, 0x08	; 8
    8acc:	6f af       	std	Y+63, r22	; 0x3f
    8ace:	28 97       	sbiw	r28, 0x08	; 8
    8ad0:	29 96       	adiw	r28, 0x09	; 9
    8ad2:	7f af       	std	Y+63, r23	; 0x3f
    8ad4:	29 97       	sbiw	r28, 0x09	; 9
    8ad6:	2a 96       	adiw	r28, 0x0a	; 10
    8ad8:	8f af       	std	Y+63, r24	; 0x3f
    8ada:	2a 97       	sbiw	r28, 0x0a	; 10
    8adc:	2b 96       	adiw	r28, 0x0b	; 11
    8ade:	9f af       	std	Y+63, r25	; 0x3f
    8ae0:	2b 97       	sbiw	r28, 0x0b	; 11
    8ae2:	25 c0       	rjmp	.+74     	; 0x8b2e <_printf_fn+0x542>
    8ae4:	22 e0       	ldi	r18, 0x02	; 2
    8ae6:	30 e0       	ldi	r19, 0x00	; 0
    8ae8:	6f 96       	adiw	r28, 0x1f	; 31
    8aea:	3f af       	std	Y+63, r19	; 0x3f
    8aec:	2e af       	std	Y+62, r18	; 0x3e
    8aee:	6f 97       	sbiw	r28, 0x1f	; 31
    8af0:	6c 96       	adiw	r28, 0x1c	; 28
    8af2:	8f ad       	ldd	r24, Y+63	; 0x3f
    8af4:	6c 97       	sbiw	r28, 0x1c	; 28
    8af6:	6d 96       	adiw	r28, 0x1d	; 29
    8af8:	9f ad       	ldd	r25, Y+63	; 0x3f
    8afa:	6d 97       	sbiw	r28, 0x1d	; 29
    8afc:	1e c0       	rjmp	.+60     	; 0x8b3a <_printf_fn+0x54e>
    8afe:	44 e0       	ldi	r20, 0x04	; 4
    8b00:	50 e0       	ldi	r21, 0x00	; 0
    8b02:	6f 96       	adiw	r28, 0x1f	; 31
    8b04:	5f af       	std	Y+63, r21	; 0x3f
    8b06:	4e af       	std	Y+62, r20	; 0x3e
    8b08:	6f 97       	sbiw	r28, 0x1f	; 31
    8b0a:	6a 96       	adiw	r28, 0x1a	; 26
    8b0c:	8f ad       	ldd	r24, Y+63	; 0x3f
    8b0e:	6a 97       	sbiw	r28, 0x1a	; 26
    8b10:	6b 96       	adiw	r28, 0x1b	; 27
    8b12:	9f ad       	ldd	r25, Y+63	; 0x3f
    8b14:	6b 97       	sbiw	r28, 0x1b	; 27
    8b16:	11 c0       	rjmp	.+34     	; 0x8b3a <_printf_fn+0x54e>
    8b18:	66 96       	adiw	r28, 0x16	; 22
    8b1a:	8f ad       	ldd	r24, Y+63	; 0x3f
    8b1c:	66 97       	sbiw	r28, 0x16	; 22
    8b1e:	67 96       	adiw	r28, 0x17	; 23
    8b20:	9f ad       	ldd	r25, Y+63	; 0x3f
    8b22:	67 97       	sbiw	r28, 0x17	; 23
    8b24:	a3 96       	adiw	r28, 0x23	; 35
    8b26:	1f ae       	std	Y+63, r1	; 0x3f
    8b28:	1e ae       	std	Y+62, r1	; 0x3e
    8b2a:	a3 97       	sbiw	r28, 0x23	; 35
    8b2c:	06 c0       	rjmp	.+12     	; 0x8b3a <_printf_fn+0x54e>
    8b2e:	68 96       	adiw	r28, 0x18	; 24
    8b30:	8f ad       	ldd	r24, Y+63	; 0x3f
    8b32:	68 97       	sbiw	r28, 0x18	; 24
    8b34:	69 96       	adiw	r28, 0x19	; 25
    8b36:	9f ad       	ldd	r25, Y+63	; 0x3f
    8b38:	69 97       	sbiw	r28, 0x19	; 25
    8b3a:	5f ef       	ldi	r21, 0xFF	; 255
    8b3c:	65 1a       	sub	r6, r21
    8b3e:	75 0a       	sbc	r7, r21
    8b40:	85 0a       	sbc	r8, r21
    8b42:	15 01       	movw	r2, r10
    8b44:	2d c0       	rjmp	.+90     	; 0x8ba0 <_printf_fn+0x5b4>
    8b46:	91 fc       	sbrc	r9, 1
    8b48:	08 c0       	rjmp	.+16     	; 0x8b5a <_printf_fn+0x56e>
    8b4a:	68 94       	set
    8b4c:	91 f8       	bld	r9, 1
    8b4e:	86 e0       	ldi	r24, 0x06	; 6
    8b50:	90 e0       	ldi	r25, 0x00	; 0
    8b52:	a1 96       	adiw	r28, 0x21	; 33
    8b54:	9f af       	std	Y+63, r25	; 0x3f
    8b56:	8e af       	std	Y+62, r24	; 0x3e
    8b58:	a1 97       	sbiw	r28, 0x21	; 33
    8b5a:	d1 01       	movw	r26, r2
    8b5c:	2d 91       	ld	r18, X+
    8b5e:	3d 91       	ld	r19, X+
    8b60:	4d 91       	ld	r20, X+
    8b62:	5c 91       	ld	r21, X
    8b64:	a9 96       	adiw	r28, 0x29	; 41
    8b66:	2c af       	std	Y+60, r18	; 0x3c
    8b68:	3d af       	std	Y+61, r19	; 0x3d
    8b6a:	4e af       	std	Y+62, r20	; 0x3e
    8b6c:	5f af       	std	Y+63, r21	; 0x3f
    8b6e:	a9 97       	sbiw	r28, 0x29	; 41
    8b70:	bf ef       	ldi	r27, 0xFF	; 255
    8b72:	6b 1a       	sub	r6, r27
    8b74:	7b 0a       	sbc	r7, r27
    8b76:	8b 0a       	sbc	r8, r27
    8b78:	f1 01       	movw	r30, r2
    8b7a:	34 96       	adiw	r30, 0x04	; 4
    8b7c:	1f 01       	movw	r2, r30
    8b7e:	0a c0       	rjmp	.+20     	; 0x8b94 <_printf_fn+0x5a8>
    8b80:	ff ef       	ldi	r31, 0xFF	; 255
    8b82:	6f 1a       	sub	r6, r31
    8b84:	7f 0a       	sbc	r7, r31
    8b86:	8f 0a       	sbc	r8, r31
    8b88:	b0 c0       	rjmp	.+352    	; 0x8cea <_printf_fn+0x6fe>
    8b8a:	2f ef       	ldi	r18, 0xFF	; 255
    8b8c:	62 1a       	sub	r6, r18
    8b8e:	72 0a       	sbc	r7, r18
    8b90:	82 0a       	sbc	r8, r18
    8b92:	b8 c0       	rjmp	.+368    	; 0x8d04 <_printf_fn+0x718>
    8b94:	66 96       	adiw	r28, 0x16	; 22
    8b96:	8f ad       	ldd	r24, Y+63	; 0x3f
    8b98:	66 97       	sbiw	r28, 0x16	; 22
    8b9a:	67 96       	adiw	r28, 0x17	; 23
    8b9c:	9f ad       	ldd	r25, Y+63	; 0x3f
    8b9e:	67 97       	sbiw	r28, 0x17	; 23
    8ba0:	a3 96       	adiw	r28, 0x23	; 35
    8ba2:	ee ad       	ldd	r30, Y+62	; 0x3e
    8ba4:	ff ad       	ldd	r31, Y+63	; 0x3f
    8ba6:	a3 97       	sbiw	r28, 0x23	; 35
    8ba8:	e2 54       	subi	r30, 0x42	; 66
    8baa:	f1 09       	sbc	r31, r1
    8bac:	e7 33       	cpi	r30, 0x37	; 55
    8bae:	f1 05       	cpc	r31, r1
    8bb0:	08 f0       	brcs	.+2      	; 0x8bb4 <_printf_fn+0x5c8>
    8bb2:	f9 c0       	rjmp	.+498    	; 0x8da6 <_printf_fn+0x7ba>
    8bb4:	e3 58       	subi	r30, 0x83	; 131
    8bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    8bb8:	0c 94 af e5 	jmp	0x1cb5e	; 0x1cb5e <__tablejump2__>
    8bbc:	e8 94       	clt
    8bbe:	94 f8       	bld	r9, 4
    8bc0:	e8 94       	clt
    8bc2:	92 f8       	bld	r9, 2
    8bc4:	a9 2c       	mov	r10, r9
    8bc6:	b1 2c       	mov	r11, r1
    8bc8:	a1 96       	adiw	r28, 0x21	; 33
    8bca:	ce ac       	ldd	r12, Y+62	; 0x3e
    8bcc:	df ac       	ldd	r13, Y+63	; 0x3f
    8bce:	a1 97       	sbiw	r28, 0x21	; 33
    8bd0:	72 01       	movw	r14, r4
    8bd2:	0a e0       	ldi	r16, 0x0A	; 10
    8bd4:	10 e0       	ldi	r17, 0x00	; 0
    8bd6:	13 c0       	rjmp	.+38     	; 0x8bfe <_printf_fn+0x612>
    8bd8:	a9 2c       	mov	r10, r9
    8bda:	b1 2c       	mov	r11, r1
    8bdc:	a1 96       	adiw	r28, 0x21	; 33
    8bde:	ce ac       	ldd	r12, Y+62	; 0x3e
    8be0:	df ac       	ldd	r13, Y+63	; 0x3f
    8be2:	a1 97       	sbiw	r28, 0x21	; 33
    8be4:	72 01       	movw	r14, r4
    8be6:	02 e0       	ldi	r16, 0x02	; 2
    8be8:	10 e0       	ldi	r17, 0x00	; 0
    8bea:	09 c0       	rjmp	.+18     	; 0x8bfe <_printf_fn+0x612>
    8bec:	a9 2c       	mov	r10, r9
    8bee:	b1 2c       	mov	r11, r1
    8bf0:	a1 96       	adiw	r28, 0x21	; 33
    8bf2:	ce ac       	ldd	r12, Y+62	; 0x3e
    8bf4:	df ac       	ldd	r13, Y+63	; 0x3f
    8bf6:	a1 97       	sbiw	r28, 0x21	; 33
    8bf8:	72 01       	movw	r14, r4
    8bfa:	08 e0       	ldi	r16, 0x08	; 8
    8bfc:	10 e0       	ldi	r17, 0x00	; 0
    8bfe:	22 e4       	ldi	r18, 0x42	; 66
    8c00:	30 e0       	ldi	r19, 0x00	; 0
    8c02:	ae 01       	movw	r20, r28
    8c04:	4f 5f       	subi	r20, 0xFF	; 255
    8c06:	5f 4f       	sbci	r21, 0xFF	; 255
    8c08:	6f 96       	adiw	r28, 0x1f	; 31
    8c0a:	6e ad       	ldd	r22, Y+62	; 0x3e
    8c0c:	7f ad       	ldd	r23, Y+63	; 0x3f
    8c0e:	6f 97       	sbiw	r28, 0x1f	; 31
    8c10:	f3 d9       	rcall	.-3098   	; 0x7ff8 <p_ntoa>
    8c12:	30 c0       	rjmp	.+96     	; 0x8c74 <_printf_fn+0x688>
    8c14:	a9 2c       	mov	r10, r9
    8c16:	b1 2c       	mov	r11, r1
    8c18:	a1 96       	adiw	r28, 0x21	; 33
    8c1a:	ce ac       	ldd	r12, Y+62	; 0x3e
    8c1c:	df ac       	ldd	r13, Y+63	; 0x3f
    8c1e:	a1 97       	sbiw	r28, 0x21	; 33
    8c20:	72 01       	movw	r14, r4
    8c22:	00 e1       	ldi	r16, 0x10	; 16
    8c24:	10 e0       	ldi	r17, 0x00	; 0
    8c26:	22 e4       	ldi	r18, 0x42	; 66
    8c28:	30 e0       	ldi	r19, 0x00	; 0
    8c2a:	ae 01       	movw	r20, r28
    8c2c:	4f 5f       	subi	r20, 0xFF	; 255
    8c2e:	5f 4f       	sbci	r21, 0xFF	; 255
    8c30:	6f 96       	adiw	r28, 0x1f	; 31
    8c32:	6e ad       	ldd	r22, Y+62	; 0x3e
    8c34:	7f ad       	ldd	r23, Y+63	; 0x3f
    8c36:	6f 97       	sbiw	r28, 0x1f	; 31
    8c38:	df d9       	rcall	.-3138   	; 0x7ff8 <p_ntoa>
    8c3a:	7c 01       	movw	r14, r24
    8c3c:	a3 96       	adiw	r28, 0x23	; 35
    8c3e:	6e ad       	ldd	r22, Y+62	; 0x3e
    8c40:	7f ad       	ldd	r23, Y+63	; 0x3f
    8c42:	a3 97       	sbiw	r28, 0x23	; 35
    8c44:	67 7f       	andi	r22, 0xF7	; 247
    8c46:	60 35       	cpi	r22, 0x50	; 80
    8c48:	71 05       	cpc	r23, r1
    8c4a:	c9 f5       	brne	.+114    	; 0x8cbe <_printf_fn+0x6d2>
    8c4c:	34 c0       	rjmp	.+104    	; 0x8cb6 <_printf_fn+0x6ca>
    8c4e:	c9 2c       	mov	r12, r9
    8c50:	d1 2c       	mov	r13, r1
    8c52:	a1 96       	adiw	r28, 0x21	; 33
    8c54:	ee ac       	ldd	r14, Y+62	; 0x3e
    8c56:	ff ac       	ldd	r15, Y+63	; 0x3f
    8c58:	a1 97       	sbiw	r28, 0x21	; 33
    8c5a:	82 01       	movw	r16, r4
    8c5c:	22 e4       	ldi	r18, 0x42	; 66
    8c5e:	30 e0       	ldi	r19, 0x00	; 0
    8c60:	ae 01       	movw	r20, r28
    8c62:	4f 5f       	subi	r20, 0xFF	; 255
    8c64:	5f 4f       	sbci	r21, 0xFF	; 255
    8c66:	a9 96       	adiw	r28, 0x29	; 41
    8c68:	6c ad       	ldd	r22, Y+60	; 0x3c
    8c6a:	7d ad       	ldd	r23, Y+61	; 0x3d
    8c6c:	8e ad       	ldd	r24, Y+62	; 0x3e
    8c6e:	9f ad       	ldd	r25, Y+63	; 0x3f
    8c70:	a9 97       	sbiw	r28, 0x29	; 41
    8c72:	17 da       	rcall	.-3026   	; 0x80a2 <p_ftoa>
    8c74:	93 fa       	bst	r9, 3
    8c76:	00 27       	eor	r16, r16
    8c78:	00 f9       	bld	r16, 0
    8c7a:	10 e0       	ldi	r17, 0x00	; 0
    8c7c:	9c 01       	movw	r18, r24
    8c7e:	24 c0       	rjmp	.+72     	; 0x8cc8 <_printf_fn+0x6dc>
    8c80:	c9 2c       	mov	r12, r9
    8c82:	d1 2c       	mov	r13, r1
    8c84:	a1 96       	adiw	r28, 0x21	; 33
    8c86:	ee ac       	ldd	r14, Y+62	; 0x3e
    8c88:	ff ac       	ldd	r15, Y+63	; 0x3f
    8c8a:	a1 97       	sbiw	r28, 0x21	; 33
    8c8c:	82 01       	movw	r16, r4
    8c8e:	22 e4       	ldi	r18, 0x42	; 66
    8c90:	30 e0       	ldi	r19, 0x00	; 0
    8c92:	ae 01       	movw	r20, r28
    8c94:	4f 5f       	subi	r20, 0xFF	; 255
    8c96:	5f 4f       	sbci	r21, 0xFF	; 255
    8c98:	a9 96       	adiw	r28, 0x29	; 41
    8c9a:	6c ad       	ldd	r22, Y+60	; 0x3c
    8c9c:	7d ad       	ldd	r23, Y+61	; 0x3d
    8c9e:	8e ad       	ldd	r24, Y+62	; 0x3e
    8ca0:	9f ad       	ldd	r25, Y+63	; 0x3f
    8ca2:	a9 97       	sbiw	r28, 0x29	; 41
    8ca4:	05 db       	rcall	.-2550   	; 0x82b0 <p_etoa>
    8ca6:	7c 01       	movw	r14, r24
    8ca8:	a3 96       	adiw	r28, 0x23	; 35
    8caa:	4e ad       	ldd	r20, Y+62	; 0x3e
    8cac:	5f ad       	ldd	r21, Y+63	; 0x3f
    8cae:	a3 97       	sbiw	r28, 0x23	; 35
    8cb0:	45 34       	cpi	r20, 0x45	; 69
    8cb2:	51 05       	cpc	r21, r1
    8cb4:	21 f4       	brne	.+8      	; 0x8cbe <_printf_fn+0x6d2>
    8cb6:	ce 01       	movw	r24, r28
    8cb8:	01 96       	adiw	r24, 0x01	; 1
    8cba:	0e 94 a3 32 	call	0x6546	; 0x6546 <strupper>
    8cbe:	93 fa       	bst	r9, 3
    8cc0:	00 27       	eor	r16, r16
    8cc2:	00 f9       	bld	r16, 0
    8cc4:	10 e0       	ldi	r17, 0x00	; 0
    8cc6:	97 01       	movw	r18, r14
    8cc8:	a2 01       	movw	r20, r4
    8cca:	be 01       	movw	r22, r28
    8ccc:	6f 5f       	subi	r22, 0xFF	; 255
    8cce:	7f 4f       	sbci	r23, 0xFF	; 255
    8cd0:	a5 96       	adiw	r28, 0x25	; 37
    8cd2:	8e ad       	ldd	r24, Y+62	; 0x3e
    8cd4:	9f ad       	ldd	r25, Y+63	; 0x3f
    8cd6:	a5 97       	sbiw	r28, 0x25	; 37
    8cd8:	47 dc       	rcall	.-1906   	; 0x8568 <_puts_pad>
    8cda:	69 c0       	rjmp	.+210    	; 0x8dae <_printf_fn+0x7c2>
    8cdc:	a3 96       	adiw	r28, 0x23	; 35
    8cde:	8e ad       	ldd	r24, Y+62	; 0x3e
    8ce0:	9f ad       	ldd	r25, Y+63	; 0x3f
    8ce2:	a3 97       	sbiw	r28, 0x23	; 35
    8ce4:	83 37       	cpi	r24, 0x73	; 115
    8ce6:	91 05       	cpc	r25, r1
    8ce8:	69 f4       	brne	.+26     	; 0x8d04 <_printf_fn+0x718>
    8cea:	71 01       	movw	r14, r2
    8cec:	92 e0       	ldi	r25, 0x02	; 2
    8cee:	e9 0e       	add	r14, r25
    8cf0:	f1 1c       	adc	r15, r1
    8cf2:	d1 01       	movw	r26, r2
    8cf4:	6d 91       	ld	r22, X+
    8cf6:	7c 91       	ld	r23, X
    8cf8:	61 15       	cp	r22, r1
    8cfa:	71 05       	cpc	r23, r1
    8cfc:	91 f4       	brne	.+36     	; 0x8d22 <_printf_fn+0x736>
    8cfe:	67 ee       	ldi	r22, 0xE7	; 231
    8d00:	77 e0       	ldi	r23, 0x07	; 7
    8d02:	0f c0       	rjmp	.+30     	; 0x8d22 <_printf_fn+0x736>
    8d04:	71 01       	movw	r14, r2
    8d06:	b2 e0       	ldi	r27, 0x02	; 2
    8d08:	eb 0e       	add	r14, r27
    8d0a:	f1 1c       	adc	r15, r1
    8d0c:	f1 01       	movw	r30, r2
    8d0e:	80 81       	ld	r24, Z
    8d10:	60 96       	adiw	r28, 0x10	; 16
    8d12:	8f af       	std	Y+63, r24	; 0x3f
    8d14:	60 97       	sbiw	r28, 0x10	; 16
    8d16:	61 96       	adiw	r28, 0x11	; 17
    8d18:	1f ae       	std	Y+63, r1	; 0x3f
    8d1a:	61 97       	sbiw	r28, 0x11	; 17
    8d1c:	be 01       	movw	r22, r28
    8d1e:	61 5b       	subi	r22, 0xB1	; 177
    8d20:	7f 4f       	sbci	r23, 0xFF	; 255
    8d22:	fb 01       	movw	r30, r22
    8d24:	01 90       	ld	r0, Z+
    8d26:	00 20       	and	r0, r0
    8d28:	e9 f7       	brne	.-6      	; 0x8d24 <_printf_fn+0x738>
    8d2a:	31 97       	sbiw	r30, 0x01	; 1
    8d2c:	e6 1b       	sub	r30, r22
    8d2e:	f7 0b       	sbc	r31, r23
    8d30:	a1 96       	adiw	r28, 0x21	; 33
    8d32:	2e ad       	ldd	r18, Y+62	; 0x3e
    8d34:	3f ad       	ldd	r19, Y+63	; 0x3f
    8d36:	a1 97       	sbiw	r28, 0x21	; 33
    8d38:	23 2b       	or	r18, r19
    8d3a:	21 f4       	brne	.+8      	; 0x8d44 <_printf_fn+0x758>
    8d3c:	a1 96       	adiw	r28, 0x21	; 33
    8d3e:	ff af       	std	Y+63, r31	; 0x3f
    8d40:	ee af       	std	Y+62, r30	; 0x3e
    8d42:	a1 97       	sbiw	r28, 0x21	; 33
    8d44:	a1 96       	adiw	r28, 0x21	; 33
    8d46:	4e ad       	ldd	r20, Y+62	; 0x3e
    8d48:	5f ad       	ldd	r21, Y+63	; 0x3f
    8d4a:	a1 97       	sbiw	r28, 0x21	; 33
    8d4c:	44 16       	cp	r4, r20
    8d4e:	55 06       	cpc	r5, r21
    8d50:	3c f4       	brge	.+14     	; 0x8d60 <_printf_fn+0x774>
    8d52:	41 14       	cp	r4, r1
    8d54:	51 04       	cpc	r5, r1
    8d56:	21 f0       	breq	.+8      	; 0x8d60 <_printf_fn+0x774>
    8d58:	a1 96       	adiw	r28, 0x21	; 33
    8d5a:	5f ae       	std	Y+63, r5	; 0x3f
    8d5c:	4e ae       	std	Y+62, r4	; 0x3e
    8d5e:	a1 97       	sbiw	r28, 0x21	; 33
    8d60:	93 fa       	bst	r9, 3
    8d62:	00 27       	eor	r16, r16
    8d64:	00 f9       	bld	r16, 0
    8d66:	10 e0       	ldi	r17, 0x00	; 0
    8d68:	a1 96       	adiw	r28, 0x21	; 33
    8d6a:	2e ad       	ldd	r18, Y+62	; 0x3e
    8d6c:	3f ad       	ldd	r19, Y+63	; 0x3f
    8d6e:	a1 97       	sbiw	r28, 0x21	; 33
    8d70:	a2 01       	movw	r20, r4
    8d72:	a5 96       	adiw	r28, 0x25	; 37
    8d74:	8e ad       	ldd	r24, Y+62	; 0x3e
    8d76:	9f ad       	ldd	r25, Y+63	; 0x3f
    8d78:	a5 97       	sbiw	r28, 0x25	; 37
    8d7a:	f6 db       	rcall	.-2068   	; 0x8568 <_puts_pad>
    8d7c:	17 01       	movw	r2, r14
    8d7e:	17 c0       	rjmp	.+46     	; 0x8dae <_printf_fn+0x7c2>
    8d80:	f6 01       	movw	r30, r12
    8d82:	5e 2d       	mov	r21, r14
    8d84:	0e 94 2a e6 	call	0x1cc54	; 0x1cc54 <__xload_1>
    8d88:	66 23       	and	r22, r22
    8d8a:	89 f0       	breq	.+34     	; 0x8dae <_printf_fn+0x7c2>
    8d8c:	5f ef       	ldi	r21, 0xFF	; 255
    8d8e:	c5 1a       	sub	r12, r21
    8d90:	d5 0a       	sbc	r13, r21
    8d92:	e5 0a       	sbc	r14, r21
    8d94:	a5 96       	adiw	r28, 0x25	; 37
    8d96:	ae ad       	ldd	r26, Y+62	; 0x3e
    8d98:	bf ad       	ldd	r27, Y+63	; 0x3f
    8d9a:	a5 97       	sbiw	r28, 0x25	; 37
    8d9c:	ed 91       	ld	r30, X+
    8d9e:	fc 91       	ld	r31, X
    8da0:	11 97       	sbiw	r26, 0x01	; 1
    8da2:	cd 01       	movw	r24, r26
    8da4:	09 95       	icall
    8da6:	6c 14       	cp	r6, r12
    8da8:	7d 04       	cpc	r7, r13
    8daa:	8e 04       	cpc	r8, r14
    8dac:	48 f7       	brcc	.-46     	; 0x8d80 <_printf_fn+0x794>
    8dae:	e8 2c       	mov	r14, r8
    8db0:	63 01       	movw	r12, r6
    8db2:	4b cc       	rjmp	.-1898   	; 0x864a <_printf_fn+0x5e>
    8db4:	e2 e0       	ldi	r30, 0x02	; 2
    8db6:	f0 e0       	ldi	r31, 0x00	; 0
    8db8:	6f 96       	adiw	r28, 0x1f	; 31
    8dba:	ff af       	std	Y+63, r31	; 0x3f
    8dbc:	ee af       	std	Y+62, r30	; 0x3e
    8dbe:	6f 97       	sbiw	r28, 0x1f	; 31
    8dc0:	57 cd       	rjmp	.-1362   	; 0x8870 <_printf_fn+0x284>
    8dc2:	6f 96       	adiw	r28, 0x1f	; 31
    8dc4:	ee ad       	ldd	r30, Y+62	; 0x3e
    8dc6:	ff ad       	ldd	r31, Y+63	; 0x3f
    8dc8:	6f 97       	sbiw	r28, 0x1f	; 31
    8dca:	32 97       	sbiw	r30, 0x02	; 2
    8dcc:	61 f4       	brne	.+24     	; 0x8de6 <_printf_fn+0x7fa>
    8dce:	51 01       	movw	r10, r2
    8dd0:	f2 e0       	ldi	r31, 0x02	; 2
    8dd2:	af 0e       	add	r10, r31
    8dd4:	b1 1c       	adc	r11, r1
    8dd6:	d1 01       	movw	r26, r2
    8dd8:	8d 91       	ld	r24, X+
    8dda:	9c 91       	ld	r25, X
    8ddc:	65 96       	adiw	r28, 0x15	; 21
    8dde:	9f af       	std	Y+63, r25	; 0x3f
    8de0:	8e af       	std	Y+62, r24	; 0x3e
    8de2:	65 97       	sbiw	r28, 0x15	; 21
    8de4:	c5 cd       	rjmp	.-1142   	; 0x8970 <_printf_fn+0x384>
    8de6:	6f 96       	adiw	r28, 0x1f	; 31
    8de8:	2e ad       	ldd	r18, Y+62	; 0x3e
    8dea:	3f ad       	ldd	r19, Y+63	; 0x3f
    8dec:	6f 97       	sbiw	r28, 0x1f	; 31
    8dee:	24 30       	cpi	r18, 0x04	; 4
    8df0:	31 05       	cpc	r19, r1
    8df2:	09 f0       	breq	.+2      	; 0x8df6 <_printf_fn+0x80a>
    8df4:	fe cd       	rjmp	.-1028   	; 0x89f2 <_printf_fn+0x406>
    8df6:	51 01       	movw	r10, r2
    8df8:	f4 e0       	ldi	r31, 0x04	; 4
    8dfa:	af 0e       	add	r10, r31
    8dfc:	b1 1c       	adc	r11, r1
    8dfe:	f1 01       	movw	r30, r2
    8e00:	80 81       	ld	r24, Z
    8e02:	91 81       	ldd	r25, Z+1	; 0x01
    8e04:	a2 81       	ldd	r26, Z+2	; 0x02
    8e06:	b3 81       	ldd	r27, Z+3	; 0x03
    8e08:	2f 96       	adiw	r28, 0x0f	; 15
    8e0a:	8c af       	std	Y+60, r24	; 0x3c
    8e0c:	9d af       	std	Y+61, r25	; 0x3d
    8e0e:	ae af       	std	Y+62, r26	; 0x3e
    8e10:	bf af       	std	Y+63, r27	; 0x3f
    8e12:	2f 97       	sbiw	r28, 0x0f	; 15
    8e14:	dc cd       	rjmp	.-1096   	; 0x89ce <_printf_fn+0x3e2>
    8e16:	c5 59       	subi	r28, 0x95	; 149
    8e18:	df 4f       	sbci	r29, 0xFF	; 255
    8e1a:	e2 e1       	ldi	r30, 0x12	; 18
    8e1c:	0c 94 0f e6 	jmp	0x1cc1e	; 0x1cc1e <__epilogue_restores__>

00008e20 <vsnprintf_P>:
    8e20:	a8 e0       	ldi	r26, 0x08	; 8
    8e22:	b0 e0       	ldi	r27, 0x00	; 0
    8e24:	e6 e1       	ldi	r30, 0x16	; 22
    8e26:	f7 e4       	ldi	r31, 0x47	; 71
    8e28:	0c 94 ff e5 	jmp	0x1cbfe	; 0x1cbfe <__prologue_saves__+0x18>
    8e2c:	7c 01       	movw	r14, r24
    8e2e:	cb 01       	movw	r24, r22
    8e30:	64 2f       	mov	r22, r20
    8e32:	a9 01       	movw	r20, r18
    8e34:	98 01       	movw	r18, r16
    8e36:	f7 01       	movw	r30, r14
    8e38:	10 82       	st	Z, r1
    8e3a:	ed e1       	ldi	r30, 0x1D	; 29
    8e3c:	ff e3       	ldi	r31, 0x3F	; 63
    8e3e:	fa 83       	std	Y+2, r31	; 0x02
    8e40:	e9 83       	std	Y+1, r30	; 0x01
    8e42:	9e 83       	std	Y+6, r25	; 0x06
    8e44:	8d 83       	std	Y+5, r24	; 0x05
    8e46:	18 86       	std	Y+8, r1	; 0x08
    8e48:	1f 82       	std	Y+7, r1	; 0x07
    8e4a:	fc 82       	std	Y+4, r15	; 0x04
    8e4c:	eb 82       	std	Y+3, r14	; 0x03
    8e4e:	ce 01       	movw	r24, r28
    8e50:	01 96       	adiw	r24, 0x01	; 1
    8e52:	cc db       	rcall	.-2152   	; 0x85ec <_printf_fn>
    8e54:	f7 01       	movw	r30, r14
    8e56:	01 90       	ld	r0, Z+
    8e58:	00 20       	and	r0, r0
    8e5a:	e9 f7       	brne	.-6      	; 0x8e56 <vsnprintf_P+0x36>
    8e5c:	cf 01       	movw	r24, r30
    8e5e:	01 97       	sbiw	r24, 0x01	; 1
    8e60:	8e 19       	sub	r24, r14
    8e62:	9f 09       	sbc	r25, r15
    8e64:	28 96       	adiw	r28, 0x08	; 8
    8e66:	e6 e0       	ldi	r30, 0x06	; 6
    8e68:	0c 94 1b e6 	jmp	0x1cc36	; 0x1cc36 <__epilogue_restores__+0x18>

00008e6c <snprintf_P>:
    8e6c:	a0 e0       	ldi	r26, 0x00	; 0
    8e6e:	b0 e0       	ldi	r27, 0x00	; 0
    8e70:	ec e3       	ldi	r30, 0x3C	; 60
    8e72:	f7 e4       	ldi	r31, 0x47	; 71
    8e74:	0c 94 01 e6 	jmp	0x1cc02	; 0x1cc02 <__prologue_saves__+0x1c>
    8e78:	8e 01       	movw	r16, r28
    8e7a:	02 5f       	subi	r16, 0xF2	; 242
    8e7c:	1f 4f       	sbci	r17, 0xFF	; 255
    8e7e:	2b 85       	ldd	r18, Y+11	; 0x0b
    8e80:	3c 85       	ldd	r19, Y+12	; 0x0c
    8e82:	4d 85       	ldd	r20, Y+13	; 0x0d
    8e84:	69 85       	ldd	r22, Y+9	; 0x09
    8e86:	7a 85       	ldd	r23, Y+10	; 0x0a
    8e88:	8f 81       	ldd	r24, Y+7	; 0x07
    8e8a:	98 85       	ldd	r25, Y+8	; 0x08
    8e8c:	c9 df       	rcall	.-110    	; 0x8e20 <vsnprintf_P>
    8e8e:	e4 e0       	ldi	r30, 0x04	; 4
    8e90:	0c 94 1d e6 	jmp	0x1cc3a	; 0x1cc3a <__epilogue_restores__+0x1c>

00008e94 <sprintf_P>:
    8e94:	a0 e0       	ldi	r26, 0x00	; 0
    8e96:	b0 e0       	ldi	r27, 0x00	; 0
    8e98:	e0 e5       	ldi	r30, 0x50	; 80
    8e9a:	f7 e4       	ldi	r31, 0x47	; 71
    8e9c:	0c 94 01 e6 	jmp	0x1cc02	; 0x1cc02 <__prologue_saves__+0x1c>
    8ea0:	8e 01       	movw	r16, r28
    8ea2:	04 5f       	subi	r16, 0xF4	; 244
    8ea4:	1f 4f       	sbci	r17, 0xFF	; 255
    8ea6:	29 85       	ldd	r18, Y+9	; 0x09
    8ea8:	3a 85       	ldd	r19, Y+10	; 0x0a
    8eaa:	4b 85       	ldd	r20, Y+11	; 0x0b
    8eac:	60 e0       	ldi	r22, 0x00	; 0
    8eae:	74 e0       	ldi	r23, 0x04	; 4
    8eb0:	8f 81       	ldd	r24, Y+7	; 0x07
    8eb2:	98 85       	ldd	r25, Y+8	; 0x08
    8eb4:	b5 df       	rcall	.-150    	; 0x8e20 <vsnprintf_P>
    8eb6:	e4 e0       	ldi	r30, 0x04	; 4
    8eb8:	0c 94 1d e6 	jmp	0x1cc3a	; 0x1cc3a <__epilogue_restores__+0x1c>

00008ebc <printf_P>:
/// @return size of printed string
/// TODO create a devprintf using an array of function prointers ?
MEMSPACE 
int 
printf_P(__memx const char *format, ...)
{
    8ebc:	a8 e0       	ldi	r26, 0x08	; 8
    8ebe:	b0 e0       	ldi	r27, 0x00	; 0
    8ec0:	e4 e6       	ldi	r30, 0x64	; 100
    8ec2:	f7 e4       	ldi	r31, 0x47	; 71
    8ec4:	0c 94 03 e6 	jmp	0x1cc06	; 0x1cc06 <__prologue_saves__+0x20>
    8ec8:	9e 01       	movw	r18, r28
    8eca:	23 5f       	subi	r18, 0xF3	; 243
    8ecc:	3f 4f       	sbci	r19, 0xFF	; 255
    8ece:	f9 01       	movw	r30, r18
    8ed0:	41 91       	ld	r20, Z+
    8ed2:	51 91       	ld	r21, Z+
    8ed4:	61 91       	ld	r22, Z+
    8ed6:	9f 01       	movw	r18, r30
    printf_t fn;
    va_list va;

    fn.put = _putc_fn;
    8ed8:	86 e3       	ldi	r24, 0x36	; 54
    8eda:	9f e3       	ldi	r25, 0x3F	; 63
    8edc:	9a 83       	std	Y+2, r25	; 0x02
    8ede:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    8ee0:	18 86       	std	Y+8, r1	; 0x08
    8ee2:	1f 82       	std	Y+7, r1	; 0x07

    va_start(va, format);
    _printf_fn(&fn, format, va);
    8ee4:	ce 01       	movw	r24, r28
    8ee6:	01 96       	adiw	r24, 0x01	; 1
    8ee8:	81 db       	rcall	.-2302   	; 0x85ec <_printf_fn>
    va_end(va);

    return ((int)fn.sent);
}
    8eea:	8f 81       	ldd	r24, Y+7	; 0x07
    8eec:	98 85       	ldd	r25, Y+8	; 0x08
    8eee:	28 96       	adiw	r28, 0x08	; 8
    8ef0:	e2 e0       	ldi	r30, 0x02	; 2
    8ef2:	0c 94 1f e6 	jmp	0x1cc3e	; 0x1cc3e <__epilogue_restores__+0x20>

00008ef6 <atodigit>:
    if(sign)
        num = -num;
    if(endptr)
        *endptr = (char *) nptr;
    return(num);
}
    8ef6:	9c 01       	movw	r18, r24
    8ef8:	20 53       	subi	r18, 0x30	; 48
    8efa:	31 09       	sbc	r19, r1
    8efc:	2a 30       	cpi	r18, 0x0A	; 10
    8efe:	31 05       	cpc	r19, r1
    8f00:	10 f4       	brcc	.+4      	; 0x8f06 <atodigit+0x10>
    8f02:	c9 01       	movw	r24, r18
    8f04:	10 c0       	rjmp	.+32     	; 0x8f26 <atodigit+0x30>
    8f06:	9c 01       	movw	r18, r24
    8f08:	21 54       	subi	r18, 0x41	; 65
    8f0a:	31 09       	sbc	r19, r1
    8f0c:	26 30       	cpi	r18, 0x06	; 6
    8f0e:	31 05       	cpc	r19, r1
    8f10:	10 f4       	brcc	.+4      	; 0x8f16 <atodigit+0x20>
    8f12:	c7 97       	sbiw	r24, 0x37	; 55
    8f14:	08 c0       	rjmp	.+16     	; 0x8f26 <atodigit+0x30>
    8f16:	9c 01       	movw	r18, r24
    8f18:	21 56       	subi	r18, 0x61	; 97
    8f1a:	31 09       	sbc	r19, r1
    8f1c:	26 30       	cpi	r18, 0x06	; 6
    8f1e:	31 05       	cpc	r19, r1
    8f20:	28 f4       	brcc	.+10     	; 0x8f2c <atodigit+0x36>
    8f22:	87 55       	subi	r24, 0x57	; 87
    8f24:	91 09       	sbc	r25, r1
    8f26:	86 17       	cp	r24, r22
    8f28:	97 07       	cpc	r25, r23
    8f2a:	14 f0       	brlt	.+4      	; 0x8f30 <atodigit+0x3a>
    8f2c:	8f ef       	ldi	r24, 0xFF	; 255
    8f2e:	9f ef       	ldi	r25, 0xFF	; 255
    8f30:	08 95       	ret

00008f32 <strtol>:
    8f32:	a0 e0       	ldi	r26, 0x00	; 0
    8f34:	b0 e0       	ldi	r27, 0x00	; 0
    8f36:	ef e9       	ldi	r30, 0x9F	; 159
    8f38:	f7 e4       	ldi	r31, 0x47	; 71
    8f3a:	0c 94 f3 e5 	jmp	0x1cbe6	; 0x1cbe6 <__prologue_saves__>
    8f3e:	2b 01       	movw	r4, r22
    8f40:	8a 01       	movw	r16, r20
    8f42:	ec 01       	movw	r28, r24
    8f44:	28 81       	ld	r18, Y
    8f46:	01 96       	adiw	r24, 0x01	; 1
    8f48:	20 32       	cpi	r18, 0x20	; 32
    8f4a:	d9 f3       	breq	.-10     	; 0x8f42 <strtol+0x10>
    8f4c:	29 30       	cpi	r18, 0x09	; 9
    8f4e:	c9 f3       	breq	.-14     	; 0x8f42 <strtol+0x10>
    8f50:	2d 32       	cpi	r18, 0x2D	; 45
    8f52:	29 f4       	brne	.+10     	; 0x8f5e <strtol+0x2c>
    8f54:	ec 01       	movw	r28, r24
    8f56:	66 24       	eor	r6, r6
    8f58:	63 94       	inc	r6
    8f5a:	71 2c       	mov	r7, r1
    8f5c:	05 c0       	rjmp	.+10     	; 0x8f68 <strtol+0x36>
    8f5e:	2b 32       	cpi	r18, 0x2B	; 43
    8f60:	09 f4       	brne	.+2      	; 0x8f64 <strtol+0x32>
    8f62:	ec 01       	movw	r28, r24
    8f64:	61 2c       	mov	r6, r1
    8f66:	71 2c       	mov	r7, r1
    8f68:	9e 01       	movw	r18, r28
    8f6a:	2f 5f       	subi	r18, 0xFF	; 255
    8f6c:	3f 4f       	sbci	r19, 0xFF	; 255
    8f6e:	88 81       	ld	r24, Y
    8f70:	80 33       	cpi	r24, 0x30	; 48
    8f72:	11 f4       	brne	.+4      	; 0x8f78 <strtol+0x46>
    8f74:	e9 01       	movw	r28, r18
    8f76:	f8 cf       	rjmp	.-16     	; 0x8f68 <strtol+0x36>
    8f78:	c1 2c       	mov	r12, r1
    8f7a:	d1 2c       	mov	r13, r1
    8f7c:	76 01       	movw	r14, r12
    8f7e:	48 01       	movw	r8, r16
    8f80:	01 2e       	mov	r0, r17
    8f82:	00 0c       	add	r0, r0
    8f84:	aa 08       	sbc	r10, r10
    8f86:	bb 08       	sbc	r11, r11
    8f88:	3c 2e       	mov	r3, r28
    8f8a:	2d 2e       	mov	r2, r29
    8f8c:	89 91       	ld	r24, Y+
    8f8e:	88 23       	and	r24, r24
    8f90:	31 f0       	breq	.+12     	; 0x8f9e <strtol+0x6c>
    8f92:	b8 01       	movw	r22, r16
    8f94:	90 e0       	ldi	r25, 0x00	; 0
    8f96:	af df       	rcall	.-162    	; 0x8ef6 <atodigit>
    8f98:	fc 01       	movw	r30, r24
    8f9a:	97 ff       	sbrs	r25, 7
    8f9c:	0c c0       	rjmp	.+24     	; 0x8fb6 <strtol+0x84>
    8f9e:	61 14       	cp	r6, r1
    8fa0:	71 04       	cpc	r7, r1
    8fa2:	c1 f0       	breq	.+48     	; 0x8fd4 <strtol+0xa2>
    8fa4:	f0 94       	com	r15
    8fa6:	e0 94       	com	r14
    8fa8:	d0 94       	com	r13
    8faa:	c0 94       	com	r12
    8fac:	c1 1c       	adc	r12, r1
    8fae:	d1 1c       	adc	r13, r1
    8fb0:	e1 1c       	adc	r14, r1
    8fb2:	f1 1c       	adc	r15, r1
    8fb4:	0f c0       	rjmp	.+30     	; 0x8fd4 <strtol+0xa2>
    8fb6:	a5 01       	movw	r20, r10
    8fb8:	94 01       	movw	r18, r8
    8fba:	c7 01       	movw	r24, r14
    8fbc:	b6 01       	movw	r22, r12
    8fbe:	0e 94 2f e5 	call	0x1ca5e	; 0x1ca5e <__mulsi3>
    8fc2:	6f 01       	movw	r12, r30
    8fc4:	ff 0f       	add	r31, r31
    8fc6:	ee 08       	sbc	r14, r14
    8fc8:	ff 08       	sbc	r15, r15
    8fca:	c6 0e       	add	r12, r22
    8fcc:	d7 1e       	adc	r13, r23
    8fce:	e8 1e       	adc	r14, r24
    8fd0:	f9 1e       	adc	r15, r25
    8fd2:	da cf       	rjmp	.-76     	; 0x8f88 <strtol+0x56>
    8fd4:	41 14       	cp	r4, r1
    8fd6:	51 04       	cpc	r5, r1
    8fd8:	19 f0       	breq	.+6      	; 0x8fe0 <strtol+0xae>
    8fda:	f2 01       	movw	r30, r4
    8fdc:	30 82       	st	Z, r3
    8fde:	21 82       	std	Z+1, r2	; 0x01
    8fe0:	c7 01       	movw	r24, r14
    8fe2:	b6 01       	movw	r22, r12
    8fe4:	cd b7       	in	r28, 0x3d	; 61
    8fe6:	de b7       	in	r29, 0x3e	; 62
    8fe8:	e2 e1       	ldi	r30, 0x12	; 18
    8fea:	0c 94 0f e6 	jmp	0x1cc1e	; 0x1cc1e <__epilogue_restores__>

00008fee <atoi>:
MEMSPACE 
int
atoi(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    8fee:	4a e0       	ldi	r20, 0x0A	; 10
    8ff0:	50 e0       	ldi	r21, 0x00	; 0
    8ff2:	60 e0       	ldi	r22, 0x00	; 0
    8ff4:	70 e0       	ldi	r23, 0x00	; 0
    8ff6:	9d df       	rcall	.-198    	; 0x8f32 <strtol>
    return((int)num);
}
    8ff8:	cb 01       	movw	r24, r22
    8ffa:	08 95       	ret

00008ffc <atol>:
MEMSPACE 
long
atol(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    8ffc:	4a e0       	ldi	r20, 0x0A	; 10
    8ffe:	50 e0       	ldi	r21, 0x00	; 0
    9000:	60 e0       	ldi	r22, 0x00	; 0
    9002:	70 e0       	ldi	r23, 0x00	; 0
    9004:	96 cf       	rjmp	.-212    	; 0x8f32 <strtol>
    return(num);
}
    9006:	08 95       	ret

00009008 <ld_dword>:
#endif
		if (res != FR_OK) ABORT(fs, res);
	}

	LEAVE_FF(fs, res);
}
    9008:	fc 01       	movw	r30, r24
    900a:	62 81       	ldd	r22, Z+2	; 0x02
    900c:	73 81       	ldd	r23, Z+3	; 0x03
    900e:	cb 01       	movw	r24, r22
    9010:	a0 e0       	ldi	r26, 0x00	; 0
    9012:	b0 e0       	ldi	r27, 0x00	; 0
    9014:	ba 2f       	mov	r27, r26
    9016:	a9 2f       	mov	r26, r25
    9018:	98 2f       	mov	r25, r24
    901a:	88 27       	eor	r24, r24
    901c:	21 81       	ldd	r18, Z+1	; 0x01
    901e:	82 2b       	or	r24, r18
    9020:	ba 2f       	mov	r27, r26
    9022:	a9 2f       	mov	r26, r25
    9024:	98 2f       	mov	r25, r24
    9026:	88 27       	eor	r24, r24
    9028:	20 81       	ld	r18, Z
    902a:	bc 01       	movw	r22, r24
    902c:	cd 01       	movw	r24, r26
    902e:	62 2b       	or	r22, r18
    9030:	08 95       	ret

00009032 <st_dword>:
    9032:	fc 01       	movw	r30, r24
    9034:	40 83       	st	Z, r20
    9036:	51 83       	std	Z+1, r21	; 0x01
    9038:	62 83       	std	Z+2, r22	; 0x02
    903a:	73 83       	std	Z+3, r23	; 0x03
    903c:	08 95       	ret

0000903e <mem_set>:
    903e:	48 0f       	add	r20, r24
    9040:	59 1f       	adc	r21, r25
    9042:	fc 01       	movw	r30, r24
    9044:	61 93       	st	Z+, r22
    9046:	cf 01       	movw	r24, r30
    9048:	e4 17       	cp	r30, r20
    904a:	f5 07       	cpc	r31, r21
    904c:	d1 f7       	brne	.-12     	; 0x9042 <mem_set+0x4>
    904e:	08 95       	ret

00009050 <mem_cmp>:
    9050:	dc 01       	movw	r26, r24
    9052:	fb 01       	movw	r30, r22
    9054:	2d 91       	ld	r18, X+
    9056:	81 91       	ld	r24, Z+
    9058:	30 e0       	ldi	r19, 0x00	; 0
    905a:	b9 01       	movw	r22, r18
    905c:	68 1b       	sub	r22, r24
    905e:	71 09       	sbc	r23, r1
    9060:	cb 01       	movw	r24, r22
    9062:	41 50       	subi	r20, 0x01	; 1
    9064:	51 09       	sbc	r21, r1
    9066:	11 f0       	breq	.+4      	; 0x906c <mem_cmp+0x1c>
    9068:	00 97       	sbiw	r24, 0x00	; 0
    906a:	a1 f3       	breq	.-24     	; 0x9054 <mem_cmp+0x4>
    906c:	08 95       	ret

0000906e <tchar2uni>:
    906e:	0f 93       	push	r16
    9070:	1f 93       	push	r17
    9072:	fc 01       	movw	r30, r24
    9074:	a0 81       	ld	r26, Z
    9076:	b1 81       	ldd	r27, Z+1	; 0x01
    9078:	fd 01       	movw	r30, r26
    907a:	31 96       	adiw	r30, 0x01	; 1
    907c:	4c 91       	ld	r20, X
    907e:	47 fd       	sbrc	r20, 7
    9080:	04 c0       	rjmp	.+8      	; 0x908a <tchar2uni+0x1c>
    9082:	50 e0       	ldi	r21, 0x00	; 0
    9084:	60 e0       	ldi	r22, 0x00	; 0
    9086:	70 e0       	ldi	r23, 0x00	; 0
    9088:	68 c0       	rjmp	.+208    	; 0x915a <tchar2uni+0xec>
    908a:	24 2f       	mov	r18, r20
    908c:	20 7e       	andi	r18, 0xE0	; 224
    908e:	20 3c       	cpi	r18, 0xC0	; 192
    9090:	39 f4       	brne	.+14     	; 0x90a0 <tchar2uni+0x32>
    9092:	4f 71       	andi	r20, 0x1F	; 31
    9094:	50 e0       	ldi	r21, 0x00	; 0
    9096:	60 e0       	ldi	r22, 0x00	; 0
    9098:	70 e0       	ldi	r23, 0x00	; 0
    909a:	21 e0       	ldi	r18, 0x01	; 1
    909c:	30 e0       	ldi	r19, 0x00	; 0
    909e:	16 c0       	rjmp	.+44     	; 0x90cc <tchar2uni+0x5e>
    90a0:	24 2f       	mov	r18, r20
    90a2:	20 7f       	andi	r18, 0xF0	; 240
    90a4:	20 3e       	cpi	r18, 0xE0	; 224
    90a6:	39 f4       	brne	.+14     	; 0x90b6 <tchar2uni+0x48>
    90a8:	4f 70       	andi	r20, 0x0F	; 15
    90aa:	50 e0       	ldi	r21, 0x00	; 0
    90ac:	60 e0       	ldi	r22, 0x00	; 0
    90ae:	70 e0       	ldi	r23, 0x00	; 0
    90b0:	22 e0       	ldi	r18, 0x02	; 2
    90b2:	30 e0       	ldi	r19, 0x00	; 0
    90b4:	0b c0       	rjmp	.+22     	; 0x90cc <tchar2uni+0x5e>
    90b6:	24 2f       	mov	r18, r20
    90b8:	28 7f       	andi	r18, 0xF8	; 248
    90ba:	20 3f       	cpi	r18, 0xF0	; 240
    90bc:	09 f0       	breq	.+2      	; 0x90c0 <tchar2uni+0x52>
    90be:	54 c0       	rjmp	.+168    	; 0x9168 <tchar2uni+0xfa>
    90c0:	47 70       	andi	r20, 0x07	; 7
    90c2:	50 e0       	ldi	r21, 0x00	; 0
    90c4:	60 e0       	ldi	r22, 0x00	; 0
    90c6:	70 e0       	ldi	r23, 0x00	; 0
    90c8:	23 e0       	ldi	r18, 0x03	; 3
    90ca:	30 e0       	ldi	r19, 0x00	; 0
    90cc:	31 96       	adiw	r30, 0x01	; 1
    90ce:	df 01       	movw	r26, r30
    90d0:	11 97       	sbiw	r26, 0x01	; 1
    90d2:	ac 91       	ld	r26, X
    90d4:	ba 2f       	mov	r27, r26
    90d6:	b0 7c       	andi	r27, 0xC0	; 192
    90d8:	b0 38       	cpi	r27, 0x80	; 128
    90da:	09 f0       	breq	.+2      	; 0x90de <tchar2uni+0x70>
    90dc:	45 c0       	rjmp	.+138    	; 0x9168 <tchar2uni+0xfa>
    90de:	b6 e0       	ldi	r27, 0x06	; 6
    90e0:	44 0f       	add	r20, r20
    90e2:	55 1f       	adc	r21, r21
    90e4:	66 1f       	adc	r22, r22
    90e6:	77 1f       	adc	r23, r23
    90e8:	ba 95       	dec	r27
    90ea:	d1 f7       	brne	.-12     	; 0x90e0 <tchar2uni+0x72>
    90ec:	af 73       	andi	r26, 0x3F	; 63
    90ee:	4a 2b       	or	r20, r26
    90f0:	21 50       	subi	r18, 0x01	; 1
    90f2:	31 09       	sbc	r19, r1
    90f4:	59 f7       	brne	.-42     	; 0x90cc <tchar2uni+0x5e>
    90f6:	8a 01       	movw	r16, r20
    90f8:	9b 01       	movw	r18, r22
    90fa:	00 58       	subi	r16, 0x80	; 128
    90fc:	11 09       	sbc	r17, r1
    90fe:	21 09       	sbc	r18, r1
    9100:	31 09       	sbc	r19, r1
    9102:	00 38       	cpi	r16, 0x80	; 128
    9104:	1f 4f       	sbci	r17, 0xFF	; 255
    9106:	20 41       	sbci	r18, 0x10	; 16
    9108:	31 05       	cpc	r19, r1
    910a:	70 f5       	brcc	.+92     	; 0x9168 <tchar2uni+0xfa>
    910c:	8a 01       	movw	r16, r20
    910e:	9b 01       	movw	r18, r22
    9110:	18 5d       	subi	r17, 0xD8	; 216
    9112:	21 09       	sbc	r18, r1
    9114:	31 09       	sbc	r19, r1
    9116:	01 15       	cp	r16, r1
    9118:	18 40       	sbci	r17, 0x08	; 8
    911a:	21 05       	cpc	r18, r1
    911c:	31 05       	cpc	r19, r1
    911e:	20 f1       	brcs	.+72     	; 0x9168 <tchar2uni+0xfa>
    9120:	41 15       	cp	r20, r1
    9122:	51 05       	cpc	r21, r1
    9124:	21 e0       	ldi	r18, 0x01	; 1
    9126:	62 07       	cpc	r22, r18
    9128:	71 05       	cpc	r23, r1
    912a:	b8 f0       	brcs	.+46     	; 0x915a <tchar2uni+0xec>
    912c:	8a 01       	movw	r16, r20
    912e:	9b 01       	movw	r18, r22
    9130:	21 50       	subi	r18, 0x01	; 1
    9132:	31 09       	sbc	r19, r1
    9134:	a6 e0       	ldi	r26, 0x06	; 6
    9136:	00 0f       	add	r16, r16
    9138:	11 1f       	adc	r17, r17
    913a:	22 1f       	adc	r18, r18
    913c:	33 1f       	adc	r19, r19
    913e:	aa 95       	dec	r26
    9140:	d1 f7       	brne	.-12     	; 0x9136 <tchar2uni+0xc8>
    9142:	00 27       	eor	r16, r16
    9144:	11 27       	eor	r17, r17
    9146:	33 70       	andi	r19, 0x03	; 3
    9148:	53 70       	andi	r21, 0x03	; 3
    914a:	66 27       	eor	r22, r22
    914c:	77 27       	eor	r23, r23
    914e:	5c 6d       	ori	r21, 0xDC	; 220
    9150:	78 6d       	ori	r23, 0xD8	; 216
    9152:	40 2b       	or	r20, r16
    9154:	51 2b       	or	r21, r17
    9156:	62 2b       	or	r22, r18
    9158:	73 2b       	or	r23, r19
    915a:	dc 01       	movw	r26, r24
    915c:	ed 93       	st	X+, r30
    915e:	fc 93       	st	X, r31
    9160:	34 2f       	mov	r19, r20
    9162:	25 2f       	mov	r18, r21
    9164:	cb 01       	movw	r24, r22
    9166:	04 c0       	rjmp	.+8      	; 0x9170 <tchar2uni+0x102>
    9168:	3f ef       	ldi	r19, 0xFF	; 255
    916a:	2f ef       	ldi	r18, 0xFF	; 255
    916c:	8f ef       	ldi	r24, 0xFF	; 255
    916e:	9f ef       	ldi	r25, 0xFF	; 255
    9170:	63 2f       	mov	r22, r19
    9172:	72 2f       	mov	r23, r18
    9174:	1f 91       	pop	r17
    9176:	0f 91       	pop	r16
    9178:	08 95       	ret

0000917a <clst2sect>:
    917a:	0f 93       	push	r16
    917c:	1f 93       	push	r17
    917e:	fc 01       	movw	r30, r24
    9180:	9a 01       	movw	r18, r20
    9182:	ab 01       	movw	r20, r22
    9184:	22 50       	subi	r18, 0x02	; 2
    9186:	31 09       	sbc	r19, r1
    9188:	41 09       	sbc	r20, r1
    918a:	51 09       	sbc	r21, r1
    918c:	81 8d       	ldd	r24, Z+25	; 0x19
    918e:	92 8d       	ldd	r25, Z+26	; 0x1a
    9190:	a3 8d       	ldd	r26, Z+27	; 0x1b
    9192:	b4 8d       	ldd	r27, Z+28	; 0x1c
    9194:	02 97       	sbiw	r24, 0x02	; 2
    9196:	a1 09       	sbc	r26, r1
    9198:	b1 09       	sbc	r27, r1
    919a:	28 17       	cp	r18, r24
    919c:	39 07       	cpc	r19, r25
    919e:	4a 07       	cpc	r20, r26
    91a0:	5b 07       	cpc	r21, r27
    91a2:	68 f4       	brcc	.+26     	; 0x91be <clst2sect+0x44>
    91a4:	a1 85       	ldd	r26, Z+9	; 0x09
    91a6:	b2 85       	ldd	r27, Z+10	; 0x0a
    91a8:	0e 94 d3 e5 	call	0x1cba6	; 0x1cba6 <__muluhisi3>
    91ac:	05 a5       	ldd	r16, Z+45	; 0x2d
    91ae:	16 a5       	ldd	r17, Z+46	; 0x2e
    91b0:	27 a5       	ldd	r18, Z+47	; 0x2f
    91b2:	30 a9       	ldd	r19, Z+48	; 0x30
    91b4:	60 0f       	add	r22, r16
    91b6:	71 1f       	adc	r23, r17
    91b8:	82 1f       	adc	r24, r18
    91ba:	93 1f       	adc	r25, r19
    91bc:	03 c0       	rjmp	.+6      	; 0x91c4 <clst2sect+0x4a>
    91be:	60 e0       	ldi	r22, 0x00	; 0
    91c0:	70 e0       	ldi	r23, 0x00	; 0
    91c2:	cb 01       	movw	r24, r22
    91c4:	1f 91       	pop	r17
    91c6:	0f 91       	pop	r16
    91c8:	08 95       	ret

000091ca <clmt_clust>:
    91ca:	cf 93       	push	r28
    91cc:	df 93       	push	r29
    91ce:	fc 01       	movw	r30, r24
    91d0:	c2 a1       	ldd	r28, Z+34	; 0x22
    91d2:	d3 a1       	ldd	r29, Z+35	; 0x23
    91d4:	24 96       	adiw	r28, 0x04	; 4
    91d6:	cb 01       	movw	r24, r22
    91d8:	ba 01       	movw	r22, r20
    91da:	29 e0       	ldi	r18, 0x09	; 9
    91dc:	96 95       	lsr	r25
    91de:	87 95       	ror	r24
    91e0:	77 95       	ror	r23
    91e2:	67 95       	ror	r22
    91e4:	2a 95       	dec	r18
    91e6:	d1 f7       	brne	.-12     	; 0x91dc <clmt_clust+0x12>
    91e8:	01 90       	ld	r0, Z+
    91ea:	f0 81       	ld	r31, Z
    91ec:	e0 2d       	mov	r30, r0
    91ee:	21 85       	ldd	r18, Z+9	; 0x09
    91f0:	32 85       	ldd	r19, Z+10	; 0x0a
    91f2:	40 e0       	ldi	r20, 0x00	; 0
    91f4:	50 e0       	ldi	r21, 0x00	; 0
    91f6:	0e 94 71 e5 	call	0x1cae2	; 0x1cae2 <__udivmodsi4>
    91fa:	88 81       	ld	r24, Y
    91fc:	99 81       	ldd	r25, Y+1	; 0x01
    91fe:	aa 81       	ldd	r26, Y+2	; 0x02
    9200:	bb 81       	ldd	r27, Y+3	; 0x03
    9202:	00 97       	sbiw	r24, 0x00	; 0
    9204:	a1 05       	cpc	r26, r1
    9206:	b1 05       	cpc	r27, r1
    9208:	b1 f0       	breq	.+44     	; 0x9236 <clmt_clust+0x6c>
    920a:	28 17       	cp	r18, r24
    920c:	39 07       	cpc	r19, r25
    920e:	4a 07       	cpc	r20, r26
    9210:	5b 07       	cpc	r21, r27
    9212:	30 f0       	brcs	.+12     	; 0x9220 <clmt_clust+0x56>
    9214:	28 1b       	sub	r18, r24
    9216:	39 0b       	sbc	r19, r25
    9218:	4a 0b       	sbc	r20, r26
    921a:	5b 0b       	sbc	r21, r27
    921c:	28 96       	adiw	r28, 0x08	; 8
    921e:	ed cf       	rjmp	.-38     	; 0x91fa <clmt_clust+0x30>
    9220:	8c 81       	ldd	r24, Y+4	; 0x04
    9222:	9d 81       	ldd	r25, Y+5	; 0x05
    9224:	ae 81       	ldd	r26, Y+6	; 0x06
    9226:	bf 81       	ldd	r27, Y+7	; 0x07
    9228:	bc 01       	movw	r22, r24
    922a:	cd 01       	movw	r24, r26
    922c:	62 0f       	add	r22, r18
    922e:	73 1f       	adc	r23, r19
    9230:	84 1f       	adc	r24, r20
    9232:	95 1f       	adc	r25, r21
    9234:	03 c0       	rjmp	.+6      	; 0x923c <clmt_clust+0x72>
    9236:	60 e0       	ldi	r22, 0x00	; 0
    9238:	70 e0       	ldi	r23, 0x00	; 0
    923a:	cb 01       	movw	r24, r22
    923c:	df 91       	pop	r29
    923e:	cf 91       	pop	r28
    9240:	08 95       	ret

00009242 <sum_sfn>:
    9242:	fc 01       	movw	r30, r24
    9244:	9c 01       	movw	r18, r24
    9246:	25 5f       	subi	r18, 0xF5	; 245
    9248:	3f 4f       	sbci	r19, 0xFF	; 255
    924a:	80 e0       	ldi	r24, 0x00	; 0
    924c:	98 2f       	mov	r25, r24
    924e:	90 fb       	bst	r25, 0
    9250:	97 95       	ror	r25
    9252:	97 f9       	bld	r25, 7
    9254:	81 91       	ld	r24, Z+
    9256:	89 0f       	add	r24, r25
    9258:	e2 17       	cp	r30, r18
    925a:	f3 07       	cpc	r31, r19
    925c:	b9 f7       	brne	.-18     	; 0x924c <sum_sfn+0xa>
    925e:	08 95       	ret

00009260 <get_ldnumber>:
    9260:	cf 93       	push	r28
    9262:	df 93       	push	r29
    9264:	dc 01       	movw	r26, r24
    9266:	ed 91       	ld	r30, X+
    9268:	fc 91       	ld	r31, X
    926a:	11 97       	sbiw	r26, 0x01	; 1
    926c:	30 97       	sbiw	r30, 0x00	; 0
    926e:	f9 f0       	breq	.+62     	; 0x92ae <get_ldnumber+0x4e>
    9270:	9f 01       	movw	r18, r30
    9272:	2f 5f       	subi	r18, 0xFF	; 255
    9274:	3f 4f       	sbci	r19, 0xFF	; 255
    9276:	e9 01       	movw	r28, r18
    9278:	21 97       	sbiw	r28, 0x01	; 1
    927a:	88 81       	ld	r24, Y
    927c:	80 32       	cpi	r24, 0x20	; 32
    927e:	18 f0       	brcs	.+6      	; 0x9286 <get_ldnumber+0x26>
    9280:	8a 33       	cpi	r24, 0x3A	; 58
    9282:	b9 f7       	brne	.-18     	; 0x9272 <get_ldnumber+0x12>
    9284:	04 c0       	rjmp	.+8      	; 0x928e <get_ldnumber+0x2e>
    9286:	80 91 14 18 	lds	r24, 0x1814	; 0x801814 <CurrVol>
    928a:	90 e0       	ldi	r25, 0x00	; 0
    928c:	12 c0       	rjmp	.+36     	; 0x92b2 <get_ldnumber+0x52>
    928e:	90 81       	ld	r25, Z
    9290:	80 ed       	ldi	r24, 0xD0	; 208
    9292:	89 0f       	add	r24, r25
    9294:	8a 30       	cpi	r24, 0x0A	; 10
    9296:	58 f4       	brcc	.+22     	; 0x92ae <get_ldnumber+0x4e>
    9298:	32 96       	adiw	r30, 0x02	; 2
    929a:	2e 17       	cp	r18, r30
    929c:	3f 07       	cpc	r19, r31
    929e:	39 f4       	brne	.+14     	; 0x92ae <get_ldnumber+0x4e>
    92a0:	90 33       	cpi	r25, 0x30	; 48
    92a2:	29 f4       	brne	.+10     	; 0x92ae <get_ldnumber+0x4e>
    92a4:	2d 93       	st	X+, r18
    92a6:	3c 93       	st	X, r19
    92a8:	80 e0       	ldi	r24, 0x00	; 0
    92aa:	90 e0       	ldi	r25, 0x00	; 0
    92ac:	02 c0       	rjmp	.+4      	; 0x92b2 <get_ldnumber+0x52>
    92ae:	8f ef       	ldi	r24, 0xFF	; 255
    92b0:	9f ef       	ldi	r25, 0xFF	; 255
    92b2:	df 91       	pop	r29
    92b4:	cf 91       	pop	r28
    92b6:	08 95       	ret

000092b8 <validate>:
    92b8:	0f 93       	push	r16
    92ba:	1f 93       	push	r17
    92bc:	cf 93       	push	r28
    92be:	df 93       	push	r29
    92c0:	ec 01       	movw	r28, r24
    92c2:	8b 01       	movw	r16, r22
    92c4:	89 2b       	or	r24, r25
    92c6:	f9 f0       	breq	.+62     	; 0x9306 <validate+0x4e>
    92c8:	e8 81       	ld	r30, Y
    92ca:	f9 81       	ldd	r31, Y+1	; 0x01
    92cc:	30 97       	sbiw	r30, 0x00	; 0
    92ce:	d9 f0       	breq	.+54     	; 0x9306 <validate+0x4e>
    92d0:	80 81       	ld	r24, Z
    92d2:	88 23       	and	r24, r24
    92d4:	c1 f0       	breq	.+48     	; 0x9306 <validate+0x4e>
    92d6:	2a 81       	ldd	r18, Y+2	; 0x02
    92d8:	3b 81       	ldd	r19, Y+3	; 0x03
    92da:	85 81       	ldd	r24, Z+5	; 0x05
    92dc:	96 81       	ldd	r25, Z+6	; 0x06
    92de:	28 17       	cp	r18, r24
    92e0:	39 07       	cpc	r19, r25
    92e2:	89 f4       	brne	.+34     	; 0x9306 <validate+0x4e>
    92e4:	81 81       	ldd	r24, Z+1	; 0x01
    92e6:	0e 94 77 6b 	call	0xd6ee	; 0xd6ee <disk_status>
    92ea:	80 fd       	sbrc	r24, 0
    92ec:	0c c0       	rjmp	.+24     	; 0x9306 <validate+0x4e>
    92ee:	28 81       	ld	r18, Y
    92f0:	39 81       	ldd	r19, Y+1	; 0x01
    92f2:	80 e0       	ldi	r24, 0x00	; 0
    92f4:	90 e0       	ldi	r25, 0x00	; 0
    92f6:	f8 01       	movw	r30, r16
    92f8:	31 83       	std	Z+1, r19	; 0x01
    92fa:	20 83       	st	Z, r18
    92fc:	df 91       	pop	r29
    92fe:	cf 91       	pop	r28
    9300:	1f 91       	pop	r17
    9302:	0f 91       	pop	r16
    9304:	08 95       	ret
    9306:	89 e0       	ldi	r24, 0x09	; 9
    9308:	90 e0       	ldi	r25, 0x00	; 0
    930a:	20 e0       	ldi	r18, 0x00	; 0
    930c:	30 e0       	ldi	r19, 0x00	; 0
    930e:	f3 cf       	rjmp	.-26     	; 0x92f6 <validate+0x3e>

00009310 <mem_cpy.part.0>:
    9310:	fb 01       	movw	r30, r22
    9312:	48 0f       	add	r20, r24
    9314:	59 1f       	adc	r21, r25
    9316:	21 91       	ld	r18, Z+
    9318:	dc 01       	movw	r26, r24
    931a:	2d 93       	st	X+, r18
    931c:	cd 01       	movw	r24, r26
    931e:	a4 17       	cp	r26, r20
    9320:	b5 07       	cpc	r27, r21
    9322:	c9 f7       	brne	.-14     	; 0x9316 <mem_cpy.part.0+0x6>
    9324:	08 95       	ret

00009326 <put_utf>:
    9326:	0f 93       	push	r16
    9328:	1f 93       	push	r17
    932a:	fa 01       	movw	r30, r20
    932c:	60 38       	cpi	r22, 0x80	; 128
    932e:	71 05       	cpc	r23, r1
    9330:	81 05       	cpc	r24, r1
    9332:	91 05       	cpc	r25, r1
    9334:	30 f4       	brcc	.+12     	; 0x9342 <put_utf+0x1c>
    9336:	23 2b       	or	r18, r19
    9338:	09 f4       	brne	.+2      	; 0x933c <put_utf+0x16>
    933a:	9e c0       	rjmp	.+316    	; 0x9478 <put_utf+0x152>
    933c:	60 83       	st	Z, r22
    933e:	81 e0       	ldi	r24, 0x01	; 1
    9340:	9c c0       	rjmp	.+312    	; 0x947a <put_utf+0x154>
    9342:	61 15       	cp	r22, r1
    9344:	48 e0       	ldi	r20, 0x08	; 8
    9346:	74 07       	cpc	r23, r20
    9348:	81 05       	cpc	r24, r1
    934a:	91 05       	cpc	r25, r1
    934c:	a0 f4       	brcc	.+40     	; 0x9376 <put_utf+0x50>
    934e:	22 30       	cpi	r18, 0x02	; 2
    9350:	31 05       	cpc	r19, r1
    9352:	08 f4       	brcc	.+2      	; 0x9356 <put_utf+0x30>
    9354:	91 c0       	rjmp	.+290    	; 0x9478 <put_utf+0x152>
    9356:	8b 01       	movw	r16, r22
    9358:	9c 01       	movw	r18, r24
    935a:	76 e0       	ldi	r23, 0x06	; 6
    935c:	36 95       	lsr	r19
    935e:	27 95       	ror	r18
    9360:	17 95       	ror	r17
    9362:	07 95       	ror	r16
    9364:	7a 95       	dec	r23
    9366:	d1 f7       	brne	.-12     	; 0x935c <put_utf+0x36>
    9368:	00 6c       	ori	r16, 0xC0	; 192
    936a:	00 83       	st	Z, r16
    936c:	6f 73       	andi	r22, 0x3F	; 63
    936e:	60 68       	ori	r22, 0x80	; 128
    9370:	61 83       	std	Z+1, r22	; 0x01
    9372:	82 e0       	ldi	r24, 0x02	; 2
    9374:	82 c0       	rjmp	.+260    	; 0x947a <put_utf+0x154>
    9376:	61 15       	cp	r22, r1
    9378:	71 05       	cpc	r23, r1
    937a:	41 e0       	ldi	r20, 0x01	; 1
    937c:	84 07       	cpc	r24, r20
    937e:	91 05       	cpc	r25, r1
    9380:	58 f5       	brcc	.+86     	; 0x93d8 <put_utf+0xb2>
    9382:	23 30       	cpi	r18, 0x03	; 3
    9384:	31 05       	cpc	r19, r1
    9386:	08 f4       	brcc	.+2      	; 0x938a <put_utf+0x64>
    9388:	77 c0       	rjmp	.+238    	; 0x9478 <put_utf+0x152>
    938a:	8b 01       	movw	r16, r22
    938c:	9c 01       	movw	r18, r24
    938e:	18 5d       	subi	r17, 0xD8	; 216
    9390:	21 09       	sbc	r18, r1
    9392:	31 09       	sbc	r19, r1
    9394:	01 15       	cp	r16, r1
    9396:	18 40       	sbci	r17, 0x08	; 8
    9398:	21 05       	cpc	r18, r1
    939a:	31 05       	cpc	r19, r1
    939c:	08 f4       	brcc	.+2      	; 0x93a0 <put_utf+0x7a>
    939e:	6c c0       	rjmp	.+216    	; 0x9478 <put_utf+0x152>
    93a0:	8b 01       	movw	r16, r22
    93a2:	9c 01       	movw	r18, r24
    93a4:	4c e0       	ldi	r20, 0x0C	; 12
    93a6:	36 95       	lsr	r19
    93a8:	27 95       	ror	r18
    93aa:	17 95       	ror	r17
    93ac:	07 95       	ror	r16
    93ae:	4a 95       	dec	r20
    93b0:	d1 f7       	brne	.-12     	; 0x93a6 <put_utf+0x80>
    93b2:	00 6e       	ori	r16, 0xE0	; 224
    93b4:	00 83       	st	Z, r16
    93b6:	8b 01       	movw	r16, r22
    93b8:	9c 01       	movw	r18, r24
    93ba:	56 e0       	ldi	r21, 0x06	; 6
    93bc:	36 95       	lsr	r19
    93be:	27 95       	ror	r18
    93c0:	17 95       	ror	r17
    93c2:	07 95       	ror	r16
    93c4:	5a 95       	dec	r21
    93c6:	d1 f7       	brne	.-12     	; 0x93bc <put_utf+0x96>
    93c8:	0f 73       	andi	r16, 0x3F	; 63
    93ca:	00 68       	ori	r16, 0x80	; 128
    93cc:	01 83       	std	Z+1, r16	; 0x01
    93ce:	6f 73       	andi	r22, 0x3F	; 63
    93d0:	60 68       	ori	r22, 0x80	; 128
    93d2:	62 83       	std	Z+2, r22	; 0x02
    93d4:	83 e0       	ldi	r24, 0x03	; 3
    93d6:	51 c0       	rjmp	.+162    	; 0x947a <put_utf+0x154>
    93d8:	24 30       	cpi	r18, 0x04	; 4
    93da:	31 05       	cpc	r19, r1
    93dc:	08 f4       	brcc	.+2      	; 0x93e0 <put_utf+0xba>
    93de:	4c c0       	rjmp	.+152    	; 0x9478 <put_utf+0x152>
    93e0:	8b 01       	movw	r16, r22
    93e2:	9c 01       	movw	r18, r24
    93e4:	00 27       	eor	r16, r16
    93e6:	11 27       	eor	r17, r17
    93e8:	38 5d       	subi	r19, 0xD8	; 216
    93ea:	b6 e0       	ldi	r27, 0x06	; 6
    93ec:	36 95       	lsr	r19
    93ee:	27 95       	ror	r18
    93f0:	17 95       	ror	r17
    93f2:	07 95       	ror	r16
    93f4:	ba 95       	dec	r27
    93f6:	d1 f7       	brne	.-12     	; 0x93ec <put_utf+0xc6>
    93f8:	01 15       	cp	r16, r1
    93fa:	11 05       	cpc	r17, r1
    93fc:	40 e1       	ldi	r20, 0x10	; 16
    93fe:	24 07       	cpc	r18, r20
    9400:	31 05       	cpc	r19, r1
    9402:	d0 f5       	brcc	.+116    	; 0x9478 <put_utf+0x152>
    9404:	dc 01       	movw	r26, r24
    9406:	cb 01       	movw	r24, r22
    9408:	aa 27       	eor	r26, r26
    940a:	bb 27       	eor	r27, r27
    940c:	9c 5d       	subi	r25, 0xDC	; 220
    940e:	a1 09       	sbc	r26, r1
    9410:	b1 09       	sbc	r27, r1
    9412:	81 15       	cp	r24, r1
    9414:	44 e0       	ldi	r20, 0x04	; 4
    9416:	94 07       	cpc	r25, r20
    9418:	a1 05       	cpc	r26, r1
    941a:	b1 05       	cpc	r27, r1
    941c:	68 f5       	brcc	.+90     	; 0x9478 <put_utf+0x152>
    941e:	80 2b       	or	r24, r16
    9420:	91 2b       	or	r25, r17
    9422:	a2 2b       	or	r26, r18
    9424:	b3 2b       	or	r27, r19
    9426:	11 96       	adiw	r26, 0x01	; 1
    9428:	ac 01       	movw	r20, r24
    942a:	bd 01       	movw	r22, r26
    942c:	22 e1       	ldi	r18, 0x12	; 18
    942e:	76 95       	lsr	r23
    9430:	67 95       	ror	r22
    9432:	57 95       	ror	r21
    9434:	47 95       	ror	r20
    9436:	2a 95       	dec	r18
    9438:	d1 f7       	brne	.-12     	; 0x942e <put_utf+0x108>
    943a:	40 6f       	ori	r20, 0xF0	; 240
    943c:	40 83       	st	Z, r20
    943e:	ac 01       	movw	r20, r24
    9440:	bd 01       	movw	r22, r26
    9442:	3c e0       	ldi	r19, 0x0C	; 12
    9444:	76 95       	lsr	r23
    9446:	67 95       	ror	r22
    9448:	57 95       	ror	r21
    944a:	47 95       	ror	r20
    944c:	3a 95       	dec	r19
    944e:	d1 f7       	brne	.-12     	; 0x9444 <put_utf+0x11e>
    9450:	4f 73       	andi	r20, 0x3F	; 63
    9452:	40 68       	ori	r20, 0x80	; 128
    9454:	41 83       	std	Z+1, r20	; 0x01
    9456:	ac 01       	movw	r20, r24
    9458:	bd 01       	movw	r22, r26
    945a:	a6 e0       	ldi	r26, 0x06	; 6
    945c:	76 95       	lsr	r23
    945e:	67 95       	ror	r22
    9460:	57 95       	ror	r21
    9462:	47 95       	ror	r20
    9464:	aa 95       	dec	r26
    9466:	d1 f7       	brne	.-12     	; 0x945c <put_utf+0x136>
    9468:	4f 73       	andi	r20, 0x3F	; 63
    946a:	40 68       	ori	r20, 0x80	; 128
    946c:	42 83       	std	Z+2, r20	; 0x02
    946e:	8f 73       	andi	r24, 0x3F	; 63
    9470:	80 68       	ori	r24, 0x80	; 128
    9472:	83 83       	std	Z+3, r24	; 0x03
    9474:	84 e0       	ldi	r24, 0x04	; 4
    9476:	01 c0       	rjmp	.+2      	; 0x947a <put_utf+0x154>
    9478:	80 e0       	ldi	r24, 0x00	; 0
    947a:	1f 91       	pop	r17
    947c:	0f 91       	pop	r16
    947e:	08 95       	ret

00009480 <get_fileinfo>:
    9480:	a0 e0       	ldi	r26, 0x00	; 0
    9482:	b0 e0       	ldi	r27, 0x00	; 0
    9484:	e6 e4       	ldi	r30, 0x46	; 70
    9486:	fa e4       	ldi	r31, 0x4A	; 74
    9488:	0c 94 f3 e5 	jmp	0x1cbe6	; 0x1cbe6 <__prologue_saves__>
    948c:	dc 01       	movw	r26, r24
    948e:	6d 90       	ld	r6, X+
    9490:	7c 90       	ld	r7, X
    9492:	11 97       	sbiw	r26, 0x01	; 1
    9494:	fb 01       	movw	r30, r22
    9496:	16 8a       	std	Z+22, r1	; 0x16
    9498:	56 96       	adiw	r26, 0x16	; 22
    949a:	0d 91       	ld	r16, X+
    949c:	1d 91       	ld	r17, X+
    949e:	2d 91       	ld	r18, X+
    94a0:	3c 91       	ld	r19, X
    94a2:	59 97       	sbiw	r26, 0x19	; 25
    94a4:	01 15       	cp	r16, r1
    94a6:	11 05       	cpc	r17, r1
    94a8:	21 05       	cpc	r18, r1
    94aa:	31 05       	cpc	r19, r1
    94ac:	09 f4       	brne	.+2      	; 0x94b0 <get_fileinfo+0x30>
    94ae:	fc c0       	rjmp	.+504    	; 0x96a8 <get_fileinfo+0x228>
    94b0:	eb 01       	movw	r28, r22
    94b2:	8c 01       	movw	r16, r24
    94b4:	fc 01       	movw	r30, r24
    94b6:	80 a5       	ldd	r24, Z+40	; 0x28
    94b8:	91 a5       	ldd	r25, Z+41	; 0x29
    94ba:	a2 a5       	ldd	r26, Z+42	; 0x2a
    94bc:	b3 a5       	ldd	r27, Z+43	; 0x2b
    94be:	8f 3f       	cpi	r24, 0xFF	; 255
    94c0:	9f 4f       	sbci	r25, 0xFF	; 255
    94c2:	af 4f       	sbci	r26, 0xFF	; 255
    94c4:	bf 4f       	sbci	r27, 0xFF	; 255
    94c6:	09 f4       	brne	.+2      	; 0x94ca <get_fileinfo+0x4a>
    94c8:	49 c0       	rjmp	.+146    	; 0x955c <get_fileinfo+0xdc>
    94ca:	a1 2c       	mov	r10, r1
    94cc:	b1 2c       	mov	r11, r1
    94ce:	c1 2c       	mov	r12, r1
    94d0:	d1 2c       	mov	r13, r1
    94d2:	e1 2c       	mov	r14, r1
    94d4:	f1 2c       	mov	r15, r1
    94d6:	88 24       	eor	r8, r8
    94d8:	8a 94       	dec	r8
    94da:	91 2c       	mov	r9, r1
    94dc:	d3 01       	movw	r26, r6
    94de:	1b 96       	adiw	r26, 0x0b	; 11
    94e0:	ed 91       	ld	r30, X+
    94e2:	fc 91       	ld	r31, X
    94e4:	1c 97       	sbiw	r26, 0x0c	; 12
    94e6:	ea 0d       	add	r30, r10
    94e8:	fb 1d       	adc	r31, r11
    94ea:	80 81       	ld	r24, Z
    94ec:	91 81       	ldd	r25, Z+1	; 0x01
    94ee:	00 97       	sbiw	r24, 0x00	; 0
    94f0:	69 f1       	breq	.+90     	; 0x954c <get_fileinfo+0xcc>
    94f2:	c1 14       	cp	r12, r1
    94f4:	d1 04       	cpc	r13, r1
    94f6:	29 f4       	brne	.+10     	; 0x9502 <get_fileinfo+0x82>
    94f8:	9c 01       	movw	r18, r24
    94fa:	38 5d       	subi	r19, 0xD8	; 216
    94fc:	21 15       	cp	r18, r1
    94fe:	38 40       	sbci	r19, 0x08	; 8
    9500:	f0 f0       	brcs	.+60     	; 0x953e <get_fileinfo+0xbe>
    9502:	a7 01       	movw	r20, r14
    9504:	4a 5e       	subi	r20, 0xEA	; 234
    9506:	5f 4f       	sbci	r21, 0xFF	; 255
    9508:	4c 0f       	add	r20, r28
    950a:	5d 1f       	adc	r21, r29
    950c:	16 01       	movw	r2, r12
    950e:	41 2c       	mov	r4, r1
    9510:	51 2c       	mov	r5, r1
    9512:	21 01       	movw	r4, r2
    9514:	33 24       	eor	r3, r3
    9516:	22 24       	eor	r2, r2
    9518:	a0 e0       	ldi	r26, 0x00	; 0
    951a:	b0 e0       	ldi	r27, 0x00	; 0
    951c:	bc 01       	movw	r22, r24
    951e:	cd 01       	movw	r24, r26
    9520:	62 29       	or	r22, r2
    9522:	73 29       	or	r23, r3
    9524:	84 29       	or	r24, r4
    9526:	95 29       	or	r25, r5
    9528:	94 01       	movw	r18, r8
    952a:	2e 19       	sub	r18, r14
    952c:	3f 09       	sbc	r19, r15
    952e:	fb de       	rcall	.-522    	; 0x9326 <put_utf>
    9530:	90 e0       	ldi	r25, 0x00	; 0
    9532:	00 97       	sbiw	r24, 0x00	; 0
    9534:	49 f0       	breq	.+18     	; 0x9548 <get_fileinfo+0xc8>
    9536:	e8 0e       	add	r14, r24
    9538:	f9 1e       	adc	r15, r25
    953a:	80 e0       	ldi	r24, 0x00	; 0
    953c:	90 e0       	ldi	r25, 0x00	; 0
    953e:	a2 e0       	ldi	r26, 0x02	; 2
    9540:	aa 0e       	add	r10, r26
    9542:	b1 1c       	adc	r11, r1
    9544:	6c 01       	movw	r12, r24
    9546:	ca cf       	rjmp	.-108    	; 0x94dc <get_fileinfo+0x5c>
    9548:	e1 2c       	mov	r14, r1
    954a:	f1 2c       	mov	r15, r1
    954c:	cd 28       	or	r12, r13
    954e:	11 f0       	breq	.+4      	; 0x9554 <get_fileinfo+0xd4>
    9550:	e1 2c       	mov	r14, r1
    9552:	f1 2c       	mov	r15, r1
    9554:	fe 01       	movw	r30, r28
    9556:	ee 0d       	add	r30, r14
    9558:	ff 1d       	adc	r31, r15
    955a:	16 8a       	std	Z+22, r1	; 0x16
    955c:	e1 2c       	mov	r14, r1
    955e:	f1 2c       	mov	r15, r1
    9560:	80 e0       	ldi	r24, 0x00	; 0
    9562:	90 e0       	ldi	r25, 0x00	; 0
    9564:	2c e0       	ldi	r18, 0x0C	; 12
    9566:	a2 2e       	mov	r10, r18
    9568:	b1 2c       	mov	r11, r1
    956a:	3e e2       	ldi	r19, 0x2E	; 46
    956c:	93 2e       	mov	r9, r19
    956e:	6c 01       	movw	r12, r24
    9570:	bf ef       	ldi	r27, 0xFF	; 255
    9572:	cb 1a       	sub	r12, r27
    9574:	db 0a       	sbc	r13, r27
    9576:	f8 01       	movw	r30, r16
    9578:	22 8d       	ldd	r18, Z+26	; 0x1a
    957a:	33 8d       	ldd	r19, Z+27	; 0x1b
    957c:	f9 01       	movw	r30, r18
    957e:	e8 0f       	add	r30, r24
    9580:	f9 1f       	adc	r31, r25
    9582:	80 81       	ld	r24, Z
    9584:	90 e0       	ldi	r25, 0x00	; 0
    9586:	80 32       	cpi	r24, 0x20	; 32
    9588:	91 05       	cpc	r25, r1
    958a:	71 f1       	breq	.+92     	; 0x95e8 <get_fileinfo+0x168>
    958c:	85 30       	cpi	r24, 0x05	; 5
    958e:	91 05       	cpc	r25, r1
    9590:	11 f4       	brne	.+4      	; 0x9596 <get_fileinfo+0x116>
    9592:	85 ee       	ldi	r24, 0xE5	; 229
    9594:	90 e0       	ldi	r25, 0x00	; 0
    9596:	f9 e0       	ldi	r31, 0x09	; 9
    9598:	cf 16       	cp	r12, r31
    959a:	d1 04       	cpc	r13, r1
    959c:	59 f4       	brne	.+22     	; 0x95b4 <get_fileinfo+0x134>
    959e:	2c e0       	ldi	r18, 0x0C	; 12
    95a0:	e2 16       	cp	r14, r18
    95a2:	f1 04       	cpc	r15, r1
    95a4:	38 f4       	brcc	.+14     	; 0x95b4 <get_fileinfo+0x134>
    95a6:	fe 01       	movw	r30, r28
    95a8:	ee 0d       	add	r30, r14
    95aa:	ff 1d       	adc	r31, r15
    95ac:	91 86       	std	Z+9, r9	; 0x09
    95ae:	d7 01       	movw	r26, r14
    95b0:	11 96       	adiw	r26, 0x01	; 1
    95b2:	7d 01       	movw	r14, r26
    95b4:	65 eb       	ldi	r22, 0xB5	; 181
    95b6:	71 e0       	ldi	r23, 0x01	; 1
    95b8:	0e 94 00 6b 	call	0xd600	; 0xd600 <ff_oem2uni>
    95bc:	00 97       	sbiw	r24, 0x00	; 0
    95be:	19 f4       	brne	.+6      	; 0x95c6 <get_fileinfo+0x146>
    95c0:	e1 2c       	mov	r14, r1
    95c2:	f1 2c       	mov	r15, r1
    95c4:	16 c0       	rjmp	.+44     	; 0x95f2 <get_fileinfo+0x172>
    95c6:	a7 01       	movw	r20, r14
    95c8:	47 5f       	subi	r20, 0xF7	; 247
    95ca:	5f 4f       	sbci	r21, 0xFF	; 255
    95cc:	4c 0f       	add	r20, r28
    95ce:	5d 1f       	adc	r21, r29
    95d0:	bc 01       	movw	r22, r24
    95d2:	80 e0       	ldi	r24, 0x00	; 0
    95d4:	90 e0       	ldi	r25, 0x00	; 0
    95d6:	95 01       	movw	r18, r10
    95d8:	2e 19       	sub	r18, r14
    95da:	3f 09       	sbc	r19, r15
    95dc:	a4 de       	rcall	.-696    	; 0x9326 <put_utf>
    95de:	90 e0       	ldi	r25, 0x00	; 0
    95e0:	00 97       	sbiw	r24, 0x00	; 0
    95e2:	71 f3       	breq	.-36     	; 0x95c0 <get_fileinfo+0x140>
    95e4:	e8 0e       	add	r14, r24
    95e6:	f9 1e       	adc	r15, r25
    95e8:	c6 01       	movw	r24, r12
    95ea:	8b 30       	cpi	r24, 0x0B	; 11
    95ec:	91 05       	cpc	r25, r1
    95ee:	09 f0       	breq	.+2      	; 0x95f2 <get_fileinfo+0x172>
    95f0:	be cf       	rjmp	.-132    	; 0x956e <get_fileinfo+0xee>
    95f2:	fe 01       	movw	r30, r28
    95f4:	ee 0d       	add	r30, r14
    95f6:	ff 1d       	adc	r31, r15
    95f8:	11 86       	std	Z+9, r1	; 0x09
    95fa:	8e 89       	ldd	r24, Y+22	; 0x16
    95fc:	81 11       	cpse	r24, r1
    95fe:	39 c0       	rjmp	.+114    	; 0x9672 <get_fileinfo+0x1f2>
    9600:	e1 14       	cp	r14, r1
    9602:	f1 04       	cpc	r15, r1
    9604:	31 f0       	breq	.+12     	; 0x9612 <get_fileinfo+0x192>
    9606:	fe 01       	movw	r30, r28
    9608:	39 96       	adiw	r30, 0x09	; 9
    960a:	58 e0       	ldi	r21, 0x08	; 8
    960c:	20 e0       	ldi	r18, 0x00	; 0
    960e:	30 e0       	ldi	r19, 0x00	; 0
    9610:	13 c0       	rjmp	.+38     	; 0x9638 <get_fileinfo+0x1b8>
    9612:	8f e3       	ldi	r24, 0x3F	; 63
    9614:	8e 8b       	std	Y+22, r24	; 0x16
    9616:	21 e0       	ldi	r18, 0x01	; 1
    9618:	30 e0       	ldi	r19, 0x00	; 0
    961a:	1e c0       	rjmp	.+60     	; 0x9658 <get_fileinfo+0x1d8>
    961c:	90 e0       	ldi	r25, 0x00	; 0
    961e:	8e 32       	cpi	r24, 0x2E	; 46
    9620:	91 05       	cpc	r25, r1
    9622:	09 f4       	brne	.+2      	; 0x9626 <get_fileinfo+0x1a6>
    9624:	50 e1       	ldi	r21, 0x10	; 16
    9626:	bc 01       	movw	r22, r24
    9628:	61 54       	subi	r22, 0x41	; 65
    962a:	71 09       	sbc	r23, r1
    962c:	6a 31       	cpi	r22, 0x1A	; 26
    962e:	71 05       	cpc	r23, r1
    9630:	38 f0       	brcs	.+14     	; 0x9640 <get_fileinfo+0x1c0>
    9632:	84 87       	std	Z+12, r24	; 0x0c
    9634:	2f 5f       	subi	r18, 0xFF	; 255
    9636:	3f 4f       	sbci	r19, 0xFF	; 255
    9638:	81 91       	ld	r24, Z+
    963a:	81 11       	cpse	r24, r1
    963c:	ef cf       	rjmp	.-34     	; 0x961c <get_fileinfo+0x19c>
    963e:	0c c0       	rjmp	.+24     	; 0x9658 <get_fileinfo+0x1d8>
    9640:	d8 01       	movw	r26, r16
    9642:	5a 96       	adiw	r26, 0x1a	; 26
    9644:	6d 91       	ld	r22, X+
    9646:	7c 91       	ld	r23, X
    9648:	5b 97       	sbiw	r26, 0x1b	; 27
    964a:	db 01       	movw	r26, r22
    964c:	1c 96       	adiw	r26, 0x0c	; 12
    964e:	4c 91       	ld	r20, X
    9650:	45 23       	and	r20, r21
    9652:	79 f3       	breq	.-34     	; 0x9632 <get_fileinfo+0x1b2>
    9654:	80 96       	adiw	r24, 0x20	; 32
    9656:	ed cf       	rjmp	.-38     	; 0x9632 <get_fileinfo+0x1b2>
    9658:	fe 01       	movw	r30, r28
    965a:	e2 0f       	add	r30, r18
    965c:	f3 1f       	adc	r31, r19
    965e:	16 8a       	std	Z+22, r1	; 0x16
    9660:	d8 01       	movw	r26, r16
    9662:	5a 96       	adiw	r26, 0x1a	; 26
    9664:	ed 91       	ld	r30, X+
    9666:	fc 91       	ld	r31, X
    9668:	5b 97       	sbiw	r26, 0x1b	; 27
    966a:	84 85       	ldd	r24, Z+12	; 0x0c
    966c:	81 11       	cpse	r24, r1
    966e:	01 c0       	rjmp	.+2      	; 0x9672 <get_fileinfo+0x1f2>
    9670:	19 86       	std	Y+9, r1	; 0x09
    9672:	d8 01       	movw	r26, r16
    9674:	5a 96       	adiw	r26, 0x1a	; 26
    9676:	ed 91       	ld	r30, X+
    9678:	fc 91       	ld	r31, X
    967a:	5b 97       	sbiw	r26, 0x1b	; 27
    967c:	83 85       	ldd	r24, Z+11	; 0x0b
    967e:	88 87       	std	Y+8, r24	; 0x08
    9680:	5a 96       	adiw	r26, 0x1a	; 26
    9682:	0d 91       	ld	r16, X+
    9684:	1c 91       	ld	r17, X
    9686:	5b 97       	sbiw	r26, 0x1b	; 27
    9688:	c8 01       	movw	r24, r16
    968a:	4c 96       	adiw	r24, 0x1c	; 28
    968c:	bd dc       	rcall	.-1670   	; 0x9008 <ld_dword>
    968e:	68 83       	st	Y, r22
    9690:	79 83       	std	Y+1, r23	; 0x01
    9692:	8a 83       	std	Y+2, r24	; 0x02
    9694:	9b 83       	std	Y+3, r25	; 0x03
    9696:	f8 01       	movw	r30, r16
    9698:	86 89       	ldd	r24, Z+22	; 0x16
    969a:	97 89       	ldd	r25, Z+23	; 0x17
    969c:	9f 83       	std	Y+7, r25	; 0x07
    969e:	8e 83       	std	Y+6, r24	; 0x06
    96a0:	80 8d       	ldd	r24, Z+24	; 0x18
    96a2:	91 8d       	ldd	r25, Z+25	; 0x19
    96a4:	9d 83       	std	Y+5, r25	; 0x05
    96a6:	8c 83       	std	Y+4, r24	; 0x04
    96a8:	cd b7       	in	r28, 0x3d	; 61
    96aa:	de b7       	in	r29, 0x3e	; 62
    96ac:	e2 e1       	ldi	r30, 0x12	; 18
    96ae:	0c 94 0f e6 	jmp	0x1cc1e	; 0x1cc1e <__epilogue_restores__>

000096b2 <ld_clust.isra.4>:
    96b2:	fb 01       	movw	r30, r22
    96b4:	42 8d       	ldd	r20, Z+26	; 0x1a
    96b6:	53 8d       	ldd	r21, Z+27	; 0x1b
    96b8:	60 e0       	ldi	r22, 0x00	; 0
    96ba:	70 e0       	ldi	r23, 0x00	; 0
    96bc:	83 30       	cpi	r24, 0x03	; 3
    96be:	59 f4       	brne	.+22     	; 0x96d6 <ld_clust.isra.4+0x24>
    96c0:	84 89       	ldd	r24, Z+20	; 0x14
    96c2:	95 89       	ldd	r25, Z+21	; 0x15
    96c4:	a0 e0       	ldi	r26, 0x00	; 0
    96c6:	b0 e0       	ldi	r27, 0x00	; 0
    96c8:	dc 01       	movw	r26, r24
    96ca:	99 27       	eor	r25, r25
    96cc:	88 27       	eor	r24, r24
    96ce:	48 2b       	or	r20, r24
    96d0:	59 2b       	or	r21, r25
    96d2:	6a 2b       	or	r22, r26
    96d4:	7b 2b       	or	r23, r27
    96d6:	cb 01       	movw	r24, r22
    96d8:	ba 01       	movw	r22, r20
    96da:	08 95       	ret

000096dc <st_clust.isra.5>:
    96dc:	fb 01       	movw	r30, r22
    96de:	22 8f       	std	Z+26, r18	; 0x1a
    96e0:	33 8f       	std	Z+27, r19	; 0x1b
    96e2:	dc 01       	movw	r26, r24
    96e4:	8c 91       	ld	r24, X
    96e6:	83 30       	cpi	r24, 0x03	; 3
    96e8:	29 f4       	brne	.+10     	; 0x96f4 <st_clust.isra.5+0x18>
    96ea:	ca 01       	movw	r24, r20
    96ec:	aa 27       	eor	r26, r26
    96ee:	bb 27       	eor	r27, r27
    96f0:	84 8b       	std	Z+20, r24	; 0x14
    96f2:	95 8b       	std	Z+21, r25	; 0x15
    96f4:	08 95       	ret

000096f6 <sync_window.part.6>:
    96f6:	8f 92       	push	r8
    96f8:	9f 92       	push	r9
    96fa:	af 92       	push	r10
    96fc:	bf 92       	push	r11
    96fe:	ef 92       	push	r14
    9700:	ff 92       	push	r15
    9702:	0f 93       	push	r16
    9704:	1f 93       	push	r17
    9706:	cf 93       	push	r28
    9708:	df 93       	push	r29
    970a:	ec 01       	movw	r28, r24
    970c:	7c 01       	movw	r14, r24
    970e:	45 e3       	ldi	r20, 0x35	; 53
    9710:	e4 0e       	add	r14, r20
    9712:	f1 1c       	adc	r15, r1
    9714:	29 a9       	ldd	r18, Y+49	; 0x31
    9716:	3a a9       	ldd	r19, Y+50	; 0x32
    9718:	4b a9       	ldd	r20, Y+51	; 0x33
    971a:	5c a9       	ldd	r21, Y+52	; 0x34
    971c:	01 e0       	ldi	r16, 0x01	; 1
    971e:	10 e0       	ldi	r17, 0x00	; 0
    9720:	b7 01       	movw	r22, r14
    9722:	89 81       	ldd	r24, Y+1	; 0x01
    9724:	0e 94 93 6b 	call	0xd726	; 0xd726 <disk_write>
    9728:	89 2b       	or	r24, r25
    972a:	41 f5       	brne	.+80     	; 0x977c <sync_window.part.6+0x86>
    972c:	1b 82       	std	Y+3, r1	; 0x03
    972e:	09 a9       	ldd	r16, Y+49	; 0x31
    9730:	1a a9       	ldd	r17, Y+50	; 0x32
    9732:	2b a9       	ldd	r18, Y+51	; 0x33
    9734:	3c a9       	ldd	r19, Y+52	; 0x34
    9736:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9738:	9e 8d       	ldd	r25, Y+30	; 0x1e
    973a:	af 8d       	ldd	r26, Y+31	; 0x1f
    973c:	b8 a1       	ldd	r27, Y+32	; 0x20
    973e:	8d a0       	ldd	r8, Y+37	; 0x25
    9740:	9e a0       	ldd	r9, Y+38	; 0x26
    9742:	af a0       	ldd	r10, Y+39	; 0x27
    9744:	b8 a4       	ldd	r11, Y+40	; 0x28
    9746:	b9 01       	movw	r22, r18
    9748:	a8 01       	movw	r20, r16
    974a:	48 19       	sub	r20, r8
    974c:	59 09       	sbc	r21, r9
    974e:	6a 09       	sbc	r22, r10
    9750:	7b 09       	sbc	r23, r11
    9752:	48 17       	cp	r20, r24
    9754:	59 07       	cpc	r21, r25
    9756:	6a 07       	cpc	r22, r26
    9758:	7b 07       	cpc	r23, r27
    975a:	98 f4       	brcc	.+38     	; 0x9782 <sync_window.part.6+0x8c>
    975c:	6a 81       	ldd	r22, Y+2	; 0x02
    975e:	62 30       	cpi	r22, 0x02	; 2
    9760:	81 f4       	brne	.+32     	; 0x9782 <sync_window.part.6+0x8c>
    9762:	a9 01       	movw	r20, r18
    9764:	98 01       	movw	r18, r16
    9766:	28 0f       	add	r18, r24
    9768:	39 1f       	adc	r19, r25
    976a:	4a 1f       	adc	r20, r26
    976c:	5b 1f       	adc	r21, r27
    976e:	01 e0       	ldi	r16, 0x01	; 1
    9770:	10 e0       	ldi	r17, 0x00	; 0
    9772:	b7 01       	movw	r22, r14
    9774:	89 81       	ldd	r24, Y+1	; 0x01
    9776:	0e 94 93 6b 	call	0xd726	; 0xd726 <disk_write>
    977a:	03 c0       	rjmp	.+6      	; 0x9782 <sync_window.part.6+0x8c>
    977c:	81 e0       	ldi	r24, 0x01	; 1
    977e:	90 e0       	ldi	r25, 0x00	; 0
    9780:	02 c0       	rjmp	.+4      	; 0x9786 <sync_window.part.6+0x90>
    9782:	80 e0       	ldi	r24, 0x00	; 0
    9784:	90 e0       	ldi	r25, 0x00	; 0
    9786:	df 91       	pop	r29
    9788:	cf 91       	pop	r28
    978a:	1f 91       	pop	r17
    978c:	0f 91       	pop	r16
    978e:	ff 90       	pop	r15
    9790:	ef 90       	pop	r14
    9792:	bf 90       	pop	r11
    9794:	af 90       	pop	r10
    9796:	9f 90       	pop	r9
    9798:	8f 90       	pop	r8
    979a:	08 95       	ret

0000979c <sync_fs>:
    979c:	ef 92       	push	r14
    979e:	ff 92       	push	r15
    97a0:	0f 93       	push	r16
    97a2:	1f 93       	push	r17
    97a4:	cf 93       	push	r28
    97a6:	df 93       	push	r29
    97a8:	ec 01       	movw	r28, r24
    97aa:	8b 81       	ldd	r24, Y+3	; 0x03
    97ac:	81 11       	cpse	r24, r1
    97ae:	05 c0       	rjmp	.+10     	; 0x97ba <sync_fs+0x1e>
    97b0:	88 81       	ld	r24, Y
    97b2:	83 30       	cpi	r24, 0x03	; 3
    97b4:	09 f0       	breq	.+2      	; 0x97b8 <sync_fs+0x1c>
    97b6:	52 c0       	rjmp	.+164    	; 0x985c <sync_fs+0xc0>
    97b8:	06 c0       	rjmp	.+12     	; 0x97c6 <sync_fs+0x2a>
    97ba:	ce 01       	movw	r24, r28
    97bc:	9c df       	rcall	.-200    	; 0x96f6 <sync_window.part.6>
    97be:	00 97       	sbiw	r24, 0x00	; 0
    97c0:	09 f0       	breq	.+2      	; 0x97c4 <sync_fs+0x28>
    97c2:	59 c0       	rjmp	.+178    	; 0x9876 <sync_fs+0xda>
    97c4:	f5 cf       	rjmp	.-22     	; 0x97b0 <sync_fs+0x14>
    97c6:	8c 81       	ldd	r24, Y+4	; 0x04
    97c8:	81 30       	cpi	r24, 0x01	; 1
    97ca:	09 f0       	breq	.+2      	; 0x97ce <sync_fs+0x32>
    97cc:	47 c0       	rjmp	.+142    	; 0x985c <sync_fs+0xc0>
    97ce:	40 e0       	ldi	r20, 0x00	; 0
    97d0:	52 e0       	ldi	r21, 0x02	; 2
    97d2:	60 e0       	ldi	r22, 0x00	; 0
    97d4:	70 e0       	ldi	r23, 0x00	; 0
    97d6:	7e 01       	movw	r14, r28
    97d8:	85 e3       	ldi	r24, 0x35	; 53
    97da:	e8 0e       	add	r14, r24
    97dc:	f1 1c       	adc	r15, r1
    97de:	c7 01       	movw	r24, r14
    97e0:	2e dc       	rcall	.-1956   	; 0x903e <mem_set>
    97e2:	85 e5       	ldi	r24, 0x55	; 85
    97e4:	fe 01       	movw	r30, r28
    97e6:	ed 5c       	subi	r30, 0xCD	; 205
    97e8:	fd 4f       	sbci	r31, 0xFD	; 253
    97ea:	80 83       	st	Z, r24
    97ec:	8a ea       	ldi	r24, 0xAA	; 170
    97ee:	31 96       	adiw	r30, 0x01	; 1
    97f0:	80 83       	st	Z, r24
    97f2:	82 e5       	ldi	r24, 0x52	; 82
    97f4:	8d ab       	std	Y+53, r24	; 0x35
    97f6:	8e ab       	std	Y+54, r24	; 0x36
    97f8:	81 e6       	ldi	r24, 0x61	; 97
    97fa:	8f ab       	std	Y+55, r24	; 0x37
    97fc:	91 e4       	ldi	r25, 0x41	; 65
    97fe:	98 af       	std	Y+56, r25	; 0x38
    9800:	22 e7       	ldi	r18, 0x72	; 114
    9802:	7b 97       	sbiw	r30, 0x1b	; 27
    9804:	20 83       	st	Z, r18
    9806:	31 96       	adiw	r30, 0x01	; 1
    9808:	20 83       	st	Z, r18
    980a:	31 96       	adiw	r30, 0x01	; 1
    980c:	90 83       	st	Z, r25
    980e:	31 96       	adiw	r30, 0x01	; 1
    9810:	80 83       	st	Z, r24
    9812:	49 89       	ldd	r20, Y+17	; 0x11
    9814:	5a 89       	ldd	r21, Y+18	; 0x12
    9816:	6b 89       	ldd	r22, Y+19	; 0x13
    9818:	7c 89       	ldd	r23, Y+20	; 0x14
    981a:	ce 01       	movw	r24, r28
    981c:	83 5e       	subi	r24, 0xE3	; 227
    981e:	9d 4f       	sbci	r25, 0xFD	; 253
    9820:	08 dc       	rcall	.-2032   	; 0x9032 <st_dword>
    9822:	4d 85       	ldd	r20, Y+13	; 0x0d
    9824:	5e 85       	ldd	r21, Y+14	; 0x0e
    9826:	6f 85       	ldd	r22, Y+15	; 0x0f
    9828:	78 89       	ldd	r23, Y+16	; 0x10
    982a:	ce 01       	movw	r24, r28
    982c:	8f 5d       	subi	r24, 0xDF	; 223
    982e:	9d 4f       	sbci	r25, 0xFD	; 253
    9830:	00 dc       	rcall	.-2048   	; 0x9032 <st_dword>
    9832:	89 a1       	ldd	r24, Y+33	; 0x21
    9834:	9a a1       	ldd	r25, Y+34	; 0x22
    9836:	ab a1       	ldd	r26, Y+35	; 0x23
    9838:	bc a1       	ldd	r27, Y+36	; 0x24
    983a:	9c 01       	movw	r18, r24
    983c:	ad 01       	movw	r20, r26
    983e:	2f 5f       	subi	r18, 0xFF	; 255
    9840:	3f 4f       	sbci	r19, 0xFF	; 255
    9842:	4f 4f       	sbci	r20, 0xFF	; 255
    9844:	5f 4f       	sbci	r21, 0xFF	; 255
    9846:	29 ab       	std	Y+49, r18	; 0x31
    9848:	3a ab       	std	Y+50, r19	; 0x32
    984a:	4b ab       	std	Y+51, r20	; 0x33
    984c:	5c ab       	std	Y+52, r21	; 0x34
    984e:	01 e0       	ldi	r16, 0x01	; 1
    9850:	10 e0       	ldi	r17, 0x00	; 0
    9852:	b7 01       	movw	r22, r14
    9854:	89 81       	ldd	r24, Y+1	; 0x01
    9856:	0e 94 93 6b 	call	0xd726	; 0xd726 <disk_write>
    985a:	1c 82       	std	Y+4, r1	; 0x04
    985c:	40 e0       	ldi	r20, 0x00	; 0
    985e:	50 e0       	ldi	r21, 0x00	; 0
    9860:	60 e0       	ldi	r22, 0x00	; 0
    9862:	89 81       	ldd	r24, Y+1	; 0x01
    9864:	0e 94 a3 6b 	call	0xd746	; 0xd746 <disk_ioctl>
    9868:	31 e0       	ldi	r19, 0x01	; 1
    986a:	20 e0       	ldi	r18, 0x00	; 0
    986c:	89 2b       	or	r24, r25
    986e:	09 f4       	brne	.+2      	; 0x9872 <sync_fs+0xd6>
    9870:	30 e0       	ldi	r19, 0x00	; 0
    9872:	83 2f       	mov	r24, r19
    9874:	92 2f       	mov	r25, r18
    9876:	cd b7       	in	r28, 0x3d	; 61
    9878:	de b7       	in	r29, 0x3e	; 62
    987a:	e6 e0       	ldi	r30, 0x06	; 6
    987c:	0c 94 1b e6 	jmp	0x1cc36	; 0x1cc36 <__epilogue_restores__+0x18>

00009880 <dir_clear>:
    9880:	4f 92       	push	r4
    9882:	5f 92       	push	r5
    9884:	6f 92       	push	r6
    9886:	7f 92       	push	r7
    9888:	af 92       	push	r10
    988a:	bf 92       	push	r11
    988c:	cf 92       	push	r12
    988e:	df 92       	push	r13
    9890:	ef 92       	push	r14
    9892:	ff 92       	push	r15
    9894:	0f 93       	push	r16
    9896:	1f 93       	push	r17
    9898:	cf 93       	push	r28
    989a:	df 93       	push	r29
    989c:	ec 01       	movw	r28, r24
    989e:	6a 01       	movw	r12, r20
    98a0:	7b 01       	movw	r14, r22
    98a2:	8b 81       	ldd	r24, Y+3	; 0x03
    98a4:	81 11       	cpse	r24, r1
    98a6:	28 c0       	rjmp	.+80     	; 0x98f8 <dir_clear+0x78>
    98a8:	b7 01       	movw	r22, r14
    98aa:	a6 01       	movw	r20, r12
    98ac:	ce 01       	movw	r24, r28
    98ae:	65 dc       	rcall	.-1846   	; 0x917a <clst2sect>
    98b0:	2b 01       	movw	r4, r22
    98b2:	3c 01       	movw	r6, r24
    98b4:	69 ab       	std	Y+49, r22	; 0x31
    98b6:	7a ab       	std	Y+50, r23	; 0x32
    98b8:	8b ab       	std	Y+51, r24	; 0x33
    98ba:	9c ab       	std	Y+52, r25	; 0x34
    98bc:	5e 01       	movw	r10, r28
    98be:	25 e3       	ldi	r18, 0x35	; 53
    98c0:	a2 0e       	add	r10, r18
    98c2:	b1 1c       	adc	r11, r1
    98c4:	40 e0       	ldi	r20, 0x00	; 0
    98c6:	52 e0       	ldi	r21, 0x02	; 2
    98c8:	60 e0       	ldi	r22, 0x00	; 0
    98ca:	70 e0       	ldi	r23, 0x00	; 0
    98cc:	c5 01       	movw	r24, r10
    98ce:	b7 db       	rcall	.-2194   	; 0x903e <mem_set>
    98d0:	09 85       	ldd	r16, Y+9	; 0x09
    98d2:	1a 85       	ldd	r17, Y+10	; 0x0a
    98d4:	c8 01       	movw	r24, r16
    98d6:	a0 e0       	ldi	r26, 0x00	; 0
    98d8:	b0 e0       	ldi	r27, 0x00	; 0
    98da:	39 e0       	ldi	r19, 0x09	; 9
    98dc:	88 0f       	add	r24, r24
    98de:	99 1f       	adc	r25, r25
    98e0:	aa 1f       	adc	r26, r26
    98e2:	bb 1f       	adc	r27, r27
    98e4:	3a 95       	dec	r19
    98e6:	d1 f7       	brne	.-12     	; 0x98dc <dir_clear+0x5c>
    98e8:	81 15       	cp	r24, r1
    98ea:	90 48       	sbci	r25, 0x80	; 128
    98ec:	a1 05       	cpc	r26, r1
    98ee:	b1 05       	cpc	r27, r1
    98f0:	50 f0       	brcs	.+20     	; 0x9906 <dir_clear+0x86>
    98f2:	00 e0       	ldi	r16, 0x00	; 0
    98f4:	10 e8       	ldi	r17, 0x80	; 128
    98f6:	14 c0       	rjmp	.+40     	; 0x9920 <dir_clear+0xa0>
    98f8:	ce 01       	movw	r24, r28
    98fa:	fd de       	rcall	.-518    	; 0x96f6 <sync_window.part.6>
    98fc:	89 2b       	or	r24, r25
    98fe:	a1 f2       	breq	.-88     	; 0x98a8 <dir_clear+0x28>
    9900:	81 e0       	ldi	r24, 0x01	; 1
    9902:	90 e0       	ldi	r25, 0x00	; 0
    9904:	56 c0       	rjmp	.+172    	; 0x99b2 <dir_clear+0x132>
    9906:	10 2f       	mov	r17, r16
    9908:	00 27       	eor	r16, r16
    990a:	11 0f       	add	r17, r17
    990c:	09 c0       	rjmp	.+18     	; 0x9920 <dir_clear+0xa0>
    990e:	c8 01       	movw	r24, r16
    9910:	0e 94 c7 6a 	call	0xd58e	; 0xd58e <ff_memalloc>
    9914:	6c 01       	movw	r12, r24
    9916:	00 97       	sbiw	r24, 0x00	; 0
    9918:	09 f0       	breq	.+2      	; 0x991c <dir_clear+0x9c>
    991a:	40 c0       	rjmp	.+128    	; 0x999c <dir_clear+0x11c>
    991c:	16 95       	lsr	r17
    991e:	07 95       	ror	r16
    9920:	01 30       	cpi	r16, 0x01	; 1
    9922:	82 e0       	ldi	r24, 0x02	; 2
    9924:	18 07       	cpc	r17, r24
    9926:	98 f7       	brcc	.-26     	; 0x990e <dir_clear+0x8e>
    9928:	e1 2c       	mov	r14, r1
    992a:	f1 2c       	mov	r15, r1
    992c:	11 c0       	rjmp	.+34     	; 0x9950 <dir_clear+0xd0>
    992e:	01 e0       	ldi	r16, 0x01	; 1
    9930:	10 e0       	ldi	r17, 0x00	; 0
    9932:	a3 01       	movw	r20, r6
    9934:	92 01       	movw	r18, r4
    9936:	2e 0d       	add	r18, r14
    9938:	3f 1d       	adc	r19, r15
    993a:	41 1d       	adc	r20, r1
    993c:	51 1d       	adc	r21, r1
    993e:	b5 01       	movw	r22, r10
    9940:	89 81       	ldd	r24, Y+1	; 0x01
    9942:	0e 94 93 6b 	call	0xd726	; 0xd726 <disk_write>
    9946:	89 2b       	or	r24, r25
    9948:	01 f5       	brne	.+64     	; 0x998a <dir_clear+0x10a>
    994a:	2f ef       	ldi	r18, 0xFF	; 255
    994c:	e2 1a       	sub	r14, r18
    994e:	f2 0a       	sbc	r15, r18
    9950:	89 85       	ldd	r24, Y+9	; 0x09
    9952:	9a 85       	ldd	r25, Y+10	; 0x0a
    9954:	e8 16       	cp	r14, r24
    9956:	f9 06       	cpc	r15, r25
    9958:	50 f3       	brcs	.-44     	; 0x992e <dir_clear+0xae>
    995a:	17 c0       	rjmp	.+46     	; 0x998a <dir_clear+0x10a>
    995c:	85 01       	movw	r16, r10
    995e:	a3 01       	movw	r20, r6
    9960:	92 01       	movw	r18, r4
    9962:	2e 0d       	add	r18, r14
    9964:	3f 1d       	adc	r19, r15
    9966:	41 1d       	adc	r20, r1
    9968:	51 1d       	adc	r21, r1
    996a:	b6 01       	movw	r22, r12
    996c:	89 81       	ldd	r24, Y+1	; 0x01
    996e:	0e 94 93 6b 	call	0xd726	; 0xd726 <disk_write>
    9972:	89 2b       	or	r24, r25
    9974:	39 f4       	brne	.+14     	; 0x9984 <dir_clear+0x104>
    9976:	ea 0c       	add	r14, r10
    9978:	fb 1c       	adc	r15, r11
    997a:	89 85       	ldd	r24, Y+9	; 0x09
    997c:	9a 85       	ldd	r25, Y+10	; 0x0a
    997e:	e8 16       	cp	r14, r24
    9980:	f9 06       	cpc	r15, r25
    9982:	60 f3       	brcs	.-40     	; 0x995c <dir_clear+0xdc>
    9984:	c6 01       	movw	r24, r12
    9986:	0e 94 ca 6a 	call	0xd594	; 0xd594 <ff_memfree>
    998a:	81 e0       	ldi	r24, 0x01	; 1
    998c:	90 e0       	ldi	r25, 0x00	; 0
    998e:	29 85       	ldd	r18, Y+9	; 0x09
    9990:	3a 85       	ldd	r19, Y+10	; 0x0a
    9992:	2e 15       	cp	r18, r14
    9994:	3f 05       	cpc	r19, r15
    9996:	69 f4       	brne	.+26     	; 0x99b2 <dir_clear+0x132>
    9998:	80 e0       	ldi	r24, 0x00	; 0
    999a:	0b c0       	rjmp	.+22     	; 0x99b2 <dir_clear+0x132>
    999c:	a8 01       	movw	r20, r16
    999e:	60 e0       	ldi	r22, 0x00	; 0
    99a0:	70 e0       	ldi	r23, 0x00	; 0
    99a2:	4d db       	rcall	.-2406   	; 0x903e <mem_set>
    99a4:	58 01       	movw	r10, r16
    99a6:	ab 2c       	mov	r10, r11
    99a8:	bb 24       	eor	r11, r11
    99aa:	a6 94       	lsr	r10
    99ac:	e1 2c       	mov	r14, r1
    99ae:	f1 2c       	mov	r15, r1
    99b0:	e4 cf       	rjmp	.-56     	; 0x997a <dir_clear+0xfa>
    99b2:	df 91       	pop	r29
    99b4:	cf 91       	pop	r28
    99b6:	1f 91       	pop	r17
    99b8:	0f 91       	pop	r16
    99ba:	ff 90       	pop	r15
    99bc:	ef 90       	pop	r14
    99be:	df 90       	pop	r13
    99c0:	cf 90       	pop	r12
    99c2:	bf 90       	pop	r11
    99c4:	af 90       	pop	r10
    99c6:	7f 90       	pop	r7
    99c8:	6f 90       	pop	r6
    99ca:	5f 90       	pop	r5
    99cc:	4f 90       	pop	r4
    99ce:	08 95       	ret

000099d0 <move_window>:
    99d0:	a0 e0       	ldi	r26, 0x00	; 0
    99d2:	b0 e0       	ldi	r27, 0x00	; 0
    99d4:	ee ee       	ldi	r30, 0xEE	; 238
    99d6:	fc e4       	ldi	r31, 0x4C	; 76
    99d8:	0c 94 fd e5 	jmp	0x1cbfa	; 0x1cbfa <__prologue_saves__+0x14>
    99dc:	ec 01       	movw	r28, r24
    99de:	6a 01       	movw	r12, r20
    99e0:	7b 01       	movw	r14, r22
    99e2:	89 a9       	ldd	r24, Y+49	; 0x31
    99e4:	9a a9       	ldd	r25, Y+50	; 0x32
    99e6:	ab a9       	ldd	r26, Y+51	; 0x33
    99e8:	bc a9       	ldd	r27, Y+52	; 0x34
    99ea:	84 17       	cp	r24, r20
    99ec:	95 07       	cpc	r25, r21
    99ee:	a6 07       	cpc	r26, r22
    99f0:	b7 07       	cpc	r27, r23
    99f2:	11 f1       	breq	.+68     	; 0x9a38 <move_window+0x68>
    99f4:	8b 81       	ldd	r24, Y+3	; 0x03
    99f6:	81 11       	cpse	r24, r1
    99f8:	13 c0       	rjmp	.+38     	; 0x9a20 <move_window+0x50>
    99fa:	01 e0       	ldi	r16, 0x01	; 1
    99fc:	10 e0       	ldi	r17, 0x00	; 0
    99fe:	a7 01       	movw	r20, r14
    9a00:	96 01       	movw	r18, r12
    9a02:	be 01       	movw	r22, r28
    9a04:	6b 5c       	subi	r22, 0xCB	; 203
    9a06:	7f 4f       	sbci	r23, 0xFF	; 255
    9a08:	89 81       	ldd	r24, Y+1	; 0x01
    9a0a:	0e 94 83 6b 	call	0xd706	; 0xd706 <disk_read>
    9a0e:	89 2b       	or	r24, r25
    9a10:	61 f0       	breq	.+24     	; 0x9a2a <move_window+0x5a>
    9a12:	81 e0       	ldi	r24, 0x01	; 1
    9a14:	90 e0       	ldi	r25, 0x00	; 0
    9a16:	cc 24       	eor	r12, r12
    9a18:	ca 94       	dec	r12
    9a1a:	dc 2c       	mov	r13, r12
    9a1c:	76 01       	movw	r14, r12
    9a1e:	07 c0       	rjmp	.+14     	; 0x9a2e <move_window+0x5e>
    9a20:	ce 01       	movw	r24, r28
    9a22:	69 de       	rcall	.-814    	; 0x96f6 <sync_window.part.6>
    9a24:	00 97       	sbiw	r24, 0x00	; 0
    9a26:	51 f4       	brne	.+20     	; 0x9a3c <move_window+0x6c>
    9a28:	e8 cf       	rjmp	.-48     	; 0x99fa <move_window+0x2a>
    9a2a:	80 e0       	ldi	r24, 0x00	; 0
    9a2c:	90 e0       	ldi	r25, 0x00	; 0
    9a2e:	c9 aa       	std	Y+49, r12	; 0x31
    9a30:	da aa       	std	Y+50, r13	; 0x32
    9a32:	eb aa       	std	Y+51, r14	; 0x33
    9a34:	fc aa       	std	Y+52, r15	; 0x34
    9a36:	02 c0       	rjmp	.+4      	; 0x9a3c <move_window+0x6c>
    9a38:	80 e0       	ldi	r24, 0x00	; 0
    9a3a:	90 e0       	ldi	r25, 0x00	; 0
    9a3c:	cd b7       	in	r28, 0x3d	; 61
    9a3e:	de b7       	in	r29, 0x3e	; 62
    9a40:	e8 e0       	ldi	r30, 0x08	; 8
    9a42:	0c 94 19 e6 	jmp	0x1cc32	; 0x1cc32 <__epilogue_restores__+0x14>

00009a46 <check_fs>:
    9a46:	cf 93       	push	r28
    9a48:	df 93       	push	r29
    9a4a:	ec 01       	movw	r28, r24
    9a4c:	1b 82       	std	Y+3, r1	; 0x03
    9a4e:	8f ef       	ldi	r24, 0xFF	; 255
    9a50:	9f ef       	ldi	r25, 0xFF	; 255
    9a52:	dc 01       	movw	r26, r24
    9a54:	89 ab       	std	Y+49, r24	; 0x31
    9a56:	9a ab       	std	Y+50, r25	; 0x32
    9a58:	ab ab       	std	Y+51, r26	; 0x33
    9a5a:	bc ab       	std	Y+52, r27	; 0x34
    9a5c:	ce 01       	movw	r24, r28
    9a5e:	b8 df       	rcall	.-144    	; 0x99d0 <move_window>
    9a60:	89 2b       	or	r24, r25
    9a62:	19 f5       	brne	.+70     	; 0x9aaa <check_fs+0x64>
    9a64:	fe 01       	movw	r30, r28
    9a66:	ed 5c       	subi	r30, 0xCD	; 205
    9a68:	fd 4f       	sbci	r31, 0xFD	; 253
    9a6a:	80 81       	ld	r24, Z
    9a6c:	91 81       	ldd	r25, Z+1	; 0x01
    9a6e:	85 35       	cpi	r24, 0x55	; 85
    9a70:	9a 4a       	sbci	r25, 0xAA	; 170
    9a72:	f1 f4       	brne	.+60     	; 0x9ab0 <check_fs+0x6a>
    9a74:	8d a9       	ldd	r24, Y+53	; 0x35
    9a76:	8b 3e       	cpi	r24, 0xEB	; 235
    9a78:	19 f0       	breq	.+6      	; 0x9a80 <check_fs+0x3a>
    9a7a:	88 5e       	subi	r24, 0xE8	; 232
    9a7c:	82 30       	cpi	r24, 0x02	; 2
    9a7e:	f0 f4       	brcc	.+60     	; 0x9abc <check_fs+0x76>
    9a80:	43 e0       	ldi	r20, 0x03	; 3
    9a82:	50 e0       	ldi	r21, 0x00	; 0
    9a84:	68 e5       	ldi	r22, 0x58	; 88
    9a86:	78 e0       	ldi	r23, 0x08	; 8
    9a88:	ce 01       	movw	r24, r28
    9a8a:	85 59       	subi	r24, 0x95	; 149
    9a8c:	9f 4f       	sbci	r25, 0xFF	; 255
    9a8e:	e0 da       	rcall	.-2624   	; 0x9050 <mem_cmp>
    9a90:	89 2b       	or	r24, r25
    9a92:	89 f0       	breq	.+34     	; 0x9ab6 <check_fs+0x70>
    9a94:	45 e0       	ldi	r20, 0x05	; 5
    9a96:	50 e0       	ldi	r21, 0x00	; 0
    9a98:	6e ee       	ldi	r22, 0xEE	; 238
    9a9a:	77 e0       	ldi	r23, 0x07	; 7
    9a9c:	ce 01       	movw	r24, r28
    9a9e:	89 57       	subi	r24, 0x79	; 121
    9aa0:	9f 4f       	sbci	r25, 0xFF	; 255
    9aa2:	d6 da       	rcall	.-2644   	; 0x9050 <mem_cmp>
    9aa4:	89 2b       	or	r24, r25
    9aa6:	51 f4       	brne	.+20     	; 0x9abc <check_fs+0x76>
    9aa8:	06 c0       	rjmp	.+12     	; 0x9ab6 <check_fs+0x70>
    9aaa:	84 e0       	ldi	r24, 0x04	; 4
    9aac:	90 e0       	ldi	r25, 0x00	; 0
    9aae:	08 c0       	rjmp	.+16     	; 0x9ac0 <check_fs+0x7a>
    9ab0:	83 e0       	ldi	r24, 0x03	; 3
    9ab2:	90 e0       	ldi	r25, 0x00	; 0
    9ab4:	05 c0       	rjmp	.+10     	; 0x9ac0 <check_fs+0x7a>
    9ab6:	80 e0       	ldi	r24, 0x00	; 0
    9ab8:	90 e0       	ldi	r25, 0x00	; 0
    9aba:	02 c0       	rjmp	.+4      	; 0x9ac0 <check_fs+0x7a>
    9abc:	82 e0       	ldi	r24, 0x02	; 2
    9abe:	90 e0       	ldi	r25, 0x00	; 0
    9ac0:	df 91       	pop	r29
    9ac2:	cf 91       	pop	r28
    9ac4:	08 95       	ret

00009ac6 <mount_volume>:
    9ac6:	a0 e2       	ldi	r26, 0x20	; 32
    9ac8:	b0 e0       	ldi	r27, 0x00	; 0
    9aca:	e9 e6       	ldi	r30, 0x69	; 105
    9acc:	fd e4       	ldi	r31, 0x4D	; 77
    9ace:	0c 94 f5 e5 	jmp	0x1cbea	; 0x1cbea <__prologue_saves__+0x4>
    9ad2:	5b 01       	movw	r10, r22
    9ad4:	f4 2e       	mov	r15, r20
    9ad6:	db 01       	movw	r26, r22
    9ad8:	1d 92       	st	X+, r1
    9ada:	1c 92       	st	X, r1
    9adc:	c1 db       	rcall	.-2174   	; 0x9260 <get_ldnumber>
    9ade:	6c 01       	movw	r12, r24
    9ae0:	97 fd       	sbrc	r25, 7
    9ae2:	41 c2       	rjmp	.+1154   	; 0x9f66 <mount_volume+0x4a0>
    9ae4:	fc 01       	movw	r30, r24
    9ae6:	ee 0f       	add	r30, r30
    9ae8:	ff 1f       	adc	r31, r31
    9aea:	e9 5e       	subi	r30, 0xE9	; 233
    9aec:	f7 4e       	sbci	r31, 0xE7	; 231
    9aee:	00 81       	ld	r16, Z
    9af0:	11 81       	ldd	r17, Z+1	; 0x01
    9af2:	01 15       	cp	r16, r1
    9af4:	11 05       	cpc	r17, r1
    9af6:	09 f4       	brne	.+2      	; 0x9afa <mount_volume+0x34>
    9af8:	39 c2       	rjmp	.+1138   	; 0x9f6c <mount_volume+0x4a6>
    9afa:	f5 01       	movw	r30, r10
    9afc:	11 83       	std	Z+1, r17	; 0x01
    9afe:	00 83       	st	Z, r16
    9b00:	ff 2d       	mov	r31, r15
    9b02:	fe 7f       	andi	r31, 0xFE	; 254
    9b04:	ff 2e       	mov	r15, r31
    9b06:	d8 01       	movw	r26, r16
    9b08:	8c 91       	ld	r24, X
    9b0a:	88 23       	and	r24, r24
    9b0c:	71 f0       	breq	.+28     	; 0x9b2a <mount_volume+0x64>
    9b0e:	11 96       	adiw	r26, 0x01	; 1
    9b10:	8c 91       	ld	r24, X
    9b12:	0e 94 77 6b 	call	0xd6ee	; 0xd6ee <disk_status>
    9b16:	80 fd       	sbrc	r24, 0
    9b18:	08 c0       	rjmp	.+16     	; 0x9b2a <mount_volume+0x64>
    9b1a:	ff 20       	and	r15, r15
    9b1c:	09 f4       	brne	.+2      	; 0x9b20 <mount_volume+0x5a>
    9b1e:	29 c2       	rjmp	.+1106   	; 0x9f72 <mount_volume+0x4ac>
    9b20:	82 ff       	sbrs	r24, 2
    9b22:	27 c2       	rjmp	.+1102   	; 0x9f72 <mount_volume+0x4ac>
    9b24:	8a e0       	ldi	r24, 0x0A	; 10
    9b26:	90 e0       	ldi	r25, 0x00	; 0
    9b28:	2c c2       	rjmp	.+1112   	; 0x9f82 <mount_volume+0x4bc>
    9b2a:	f8 01       	movw	r30, r16
    9b2c:	10 82       	st	Z, r1
    9b2e:	c1 82       	std	Z+1, r12	; 0x01
    9b30:	8c 2d       	mov	r24, r12
    9b32:	0e 94 7d 6b 	call	0xd6fa	; 0xd6fa <disk_initialize>
    9b36:	80 fd       	sbrc	r24, 0
    9b38:	1f c2       	rjmp	.+1086   	; 0x9f78 <mount_volume+0x4b2>
    9b3a:	ff 20       	and	r15, r15
    9b3c:	11 f0       	breq	.+4      	; 0x9b42 <mount_volume+0x7c>
    9b3e:	82 fd       	sbrc	r24, 2
    9b40:	f1 cf       	rjmp	.-30     	; 0x9b24 <mount_volume+0x5e>
    9b42:	40 e0       	ldi	r20, 0x00	; 0
    9b44:	50 e0       	ldi	r21, 0x00	; 0
    9b46:	ba 01       	movw	r22, r20
    9b48:	c8 01       	movw	r24, r16
    9b4a:	7d df       	rcall	.-262    	; 0x9a46 <check_fs>
    9b4c:	82 30       	cpi	r24, 0x02	; 2
    9b4e:	91 05       	cpc	r25, r1
    9b50:	b9 f5       	brne	.+110    	; 0x9bc0 <mount_volume+0xfa>
    9b52:	68 01       	movw	r12, r16
    9b54:	f5 e0       	ldi	r31, 0x05	; 5
    9b56:	cf 1a       	sub	r12, r31
    9b58:	fe ef       	ldi	r31, 0xFE	; 254
    9b5a:	df 0a       	sbc	r13, r31
    9b5c:	9e 01       	movw	r18, r28
    9b5e:	2f 5f       	subi	r18, 0xFF	; 255
    9b60:	3f 4f       	sbci	r19, 0xFF	; 255
    9b62:	79 01       	movw	r14, r18
    9b64:	48 01       	movw	r8, r16
    9b66:	35 ec       	ldi	r19, 0xC5	; 197
    9b68:	83 1a       	sub	r8, r19
    9b6a:	3d ef       	ldi	r19, 0xFD	; 253
    9b6c:	93 0a       	sbc	r9, r19
    9b6e:	57 01       	movw	r10, r14
    9b70:	c6 01       	movw	r24, r12
    9b72:	4a da       	rcall	.-2924   	; 0x9008 <ld_dword>
    9b74:	d5 01       	movw	r26, r10
    9b76:	6d 93       	st	X+, r22
    9b78:	7d 93       	st	X+, r23
    9b7a:	8d 93       	st	X+, r24
    9b7c:	9d 93       	st	X+, r25
    9b7e:	5d 01       	movw	r10, r26
    9b80:	b0 e1       	ldi	r27, 0x10	; 16
    9b82:	cb 0e       	add	r12, r27
    9b84:	d1 1c       	adc	r13, r1
    9b86:	c8 14       	cp	r12, r8
    9b88:	d9 04       	cpc	r13, r9
    9b8a:	91 f7       	brne	.-28     	; 0x9b70 <mount_volume+0xaa>
    9b8c:	6e 01       	movw	r12, r28
    9b8e:	e1 e1       	ldi	r30, 0x11	; 17
    9b90:	ce 0e       	add	r12, r30
    9b92:	d1 1c       	adc	r13, r1
    9b94:	d7 01       	movw	r26, r14
    9b96:	4d 91       	ld	r20, X+
    9b98:	5d 91       	ld	r21, X+
    9b9a:	6d 91       	ld	r22, X+
    9b9c:	7d 91       	ld	r23, X+
    9b9e:	7d 01       	movw	r14, r26
    9ba0:	41 15       	cp	r20, r1
    9ba2:	51 05       	cpc	r21, r1
    9ba4:	61 05       	cpc	r22, r1
    9ba6:	71 05       	cpc	r23, r1
    9ba8:	31 f0       	breq	.+12     	; 0x9bb6 <mount_volume+0xf0>
    9baa:	c8 01       	movw	r24, r16
    9bac:	4c df       	rcall	.-360    	; 0x9a46 <check_fs>
    9bae:	82 30       	cpi	r24, 0x02	; 2
    9bb0:	91 05       	cpc	r25, r1
    9bb2:	18 f4       	brcc	.+6      	; 0x9bba <mount_volume+0xf4>
    9bb4:	05 c0       	rjmp	.+10     	; 0x9bc0 <mount_volume+0xfa>
    9bb6:	83 e0       	ldi	r24, 0x03	; 3
    9bb8:	90 e0       	ldi	r25, 0x00	; 0
    9bba:	ce 14       	cp	r12, r14
    9bbc:	df 04       	cpc	r13, r15
    9bbe:	51 f7       	brne	.-44     	; 0x9b94 <mount_volume+0xce>
    9bc0:	84 30       	cpi	r24, 0x04	; 4
    9bc2:	91 05       	cpc	r25, r1
    9bc4:	09 f4       	brne	.+2      	; 0x9bc8 <mount_volume+0x102>
    9bc6:	db c1       	rjmp	.+950    	; 0x9f7e <mount_volume+0x4b8>
    9bc8:	02 97       	sbiw	r24, 0x02	; 2
    9bca:	18 f0       	brcs	.+6      	; 0x9bd2 <mount_volume+0x10c>
    9bcc:	8d e0       	ldi	r24, 0x0D	; 13
    9bce:	90 e0       	ldi	r25, 0x00	; 0
    9bd0:	d8 c1       	rjmp	.+944    	; 0x9f82 <mount_volume+0x4bc>
    9bd2:	f8 01       	movw	r30, r16
    9bd4:	e0 5c       	subi	r30, 0xC0	; 192
    9bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    9bd8:	80 81       	ld	r24, Z
    9bda:	91 81       	ldd	r25, Z+1	; 0x01
    9bdc:	81 15       	cp	r24, r1
    9bde:	92 40       	sbci	r25, 0x02	; 2
    9be0:	a9 f7       	brne	.-22     	; 0x9bcc <mount_volume+0x106>
    9be2:	3b 96       	adiw	r30, 0x0b	; 11
    9be4:	40 80       	ld	r4, Z
    9be6:	51 80       	ldd	r5, Z+1	; 0x01
    9be8:	41 14       	cp	r4, r1
    9bea:	51 04       	cpc	r5, r1
    9bec:	19 f0       	breq	.+6      	; 0x9bf4 <mount_volume+0x12e>
    9bee:	61 2c       	mov	r6, r1
    9bf0:	71 2c       	mov	r7, r1
    9bf2:	06 c0       	rjmp	.+12     	; 0x9c00 <mount_volume+0x13a>
    9bf4:	c8 01       	movw	r24, r16
    9bf6:	87 5a       	subi	r24, 0xA7	; 167
    9bf8:	9f 4f       	sbci	r25, 0xFF	; 255
    9bfa:	06 da       	rcall	.-3060   	; 0x9008 <ld_dword>
    9bfc:	2b 01       	movw	r4, r22
    9bfe:	3c 01       	movw	r6, r24
    9c00:	d8 01       	movw	r26, r16
    9c02:	d1 96       	adiw	r26, 0x31	; 49
    9c04:	2d 91       	ld	r18, X+
    9c06:	3d 91       	ld	r19, X+
    9c08:	4d 91       	ld	r20, X+
    9c0a:	5c 91       	ld	r21, X
    9c0c:	d4 97       	sbiw	r26, 0x34	; 52
    9c0e:	29 8b       	std	Y+17, r18	; 0x11
    9c10:	3a 8b       	std	Y+18, r19	; 0x12
    9c12:	4b 8b       	std	Y+19, r20	; 0x13
    9c14:	5c 8b       	std	Y+20, r21	; 0x14
    9c16:	f8 01       	movw	r30, r16
    9c18:	45 8e       	std	Z+29, r4	; 0x1d
    9c1a:	56 8e       	std	Z+30, r5	; 0x1e
    9c1c:	67 8e       	std	Z+31, r6	; 0x1f
    9c1e:	70 a2       	std	Z+32, r7	; 0x20
    9c20:	eb 5b       	subi	r30, 0xBB	; 187
    9c22:	ff 4f       	sbci	r31, 0xFF	; 255
    9c24:	a0 80       	ld	r10, Z
    9c26:	12 96       	adiw	r26, 0x02	; 2
    9c28:	ac 92       	st	X, r10
    9c2a:	12 97       	sbiw	r26, 0x02	; 2
    9c2c:	8f ef       	ldi	r24, 0xFF	; 255
    9c2e:	8a 0d       	add	r24, r10
    9c30:	82 30       	cpi	r24, 0x02	; 2
    9c32:	60 f6       	brcc	.-104    	; 0x9bcc <mount_volume+0x106>
    9c34:	33 97       	sbiw	r30, 0x03	; 3
    9c36:	b0 80       	ld	r11, Z
    9c38:	8b 2d       	mov	r24, r11
    9c3a:	90 e0       	ldi	r25, 0x00	; 0
    9c3c:	f8 01       	movw	r30, r16
    9c3e:	92 87       	std	Z+10, r25	; 0x0a
    9c40:	81 87       	std	Z+9, r24	; 0x09
    9c42:	00 97       	sbiw	r24, 0x00	; 0
    9c44:	19 f2       	breq	.-122    	; 0x9bcc <mount_volume+0x106>
    9c46:	9c 01       	movw	r18, r24
    9c48:	21 50       	subi	r18, 0x01	; 1
    9c4a:	31 09       	sbc	r19, r1
    9c4c:	82 23       	and	r24, r18
    9c4e:	93 23       	and	r25, r19
    9c50:	89 2b       	or	r24, r25
    9c52:	09 f0       	breq	.+2      	; 0x9c56 <mount_volume+0x190>
    9c54:	bb cf       	rjmp	.-138    	; 0x9bcc <mount_volume+0x106>
    9c56:	ea 5b       	subi	r30, 0xBA	; 186
    9c58:	ff 4f       	sbci	r31, 0xFF	; 255
    9c5a:	80 80       	ld	r8, Z
    9c5c:	91 80       	ldd	r9, Z+1	; 0x01
    9c5e:	18 96       	adiw	r26, 0x08	; 8
    9c60:	9c 92       	st	X, r9
    9c62:	8e 92       	st	-X, r8
    9c64:	17 97       	sbiw	r26, 0x07	; 7
    9c66:	c4 01       	movw	r24, r8
    9c68:	8f 70       	andi	r24, 0x0F	; 15
    9c6a:	99 27       	eor	r25, r25
    9c6c:	89 2b       	or	r24, r25
    9c6e:	09 f0       	breq	.+2      	; 0x9c72 <mount_volume+0x1ac>
    9c70:	ad cf       	rjmp	.-166    	; 0x9bcc <mount_volume+0x106>
    9c72:	32 96       	adiw	r30, 0x02	; 2
    9c74:	80 81       	ld	r24, Z
    9c76:	91 81       	ldd	r25, Z+1	; 0x01
    9c78:	6c 01       	movw	r12, r24
    9c7a:	e1 2c       	mov	r14, r1
    9c7c:	f1 2c       	mov	r15, r1
    9c7e:	89 2b       	or	r24, r25
    9c80:	31 f4       	brne	.+12     	; 0x9c8e <mount_volume+0x1c8>
    9c82:	c8 01       	movw	r24, r16
    9c84:	8b 5a       	subi	r24, 0xAB	; 171
    9c86:	9f 4f       	sbci	r25, 0xFF	; 255
    9c88:	bf d9       	rcall	.-3202   	; 0x9008 <ld_dword>
    9c8a:	6b 01       	movw	r12, r22
    9c8c:	7c 01       	movw	r14, r24
    9c8e:	f8 01       	movw	r30, r16
    9c90:	ed 5b       	subi	r30, 0xBD	; 189
    9c92:	ff 4f       	sbci	r31, 0xFF	; 255
    9c94:	01 90       	ld	r0, Z+
    9c96:	f0 81       	ld	r31, Z
    9c98:	e0 2d       	mov	r30, r0
    9c9a:	30 97       	sbiw	r30, 0x00	; 0
    9c9c:	09 f4       	brne	.+2      	; 0x9ca0 <mount_volume+0x1da>
    9c9e:	96 cf       	rjmp	.-212    	; 0x9bcc <mount_volume+0x106>
    9ca0:	aa 2d       	mov	r26, r10
    9ca2:	b0 e0       	ldi	r27, 0x00	; 0
    9ca4:	a3 01       	movw	r20, r6
    9ca6:	92 01       	movw	r18, r4
    9ca8:	0e 94 d3 e5 	call	0x1cba6	; 0x1cba6 <__muluhisi3>
    9cac:	69 8f       	std	Y+25, r22	; 0x19
    9cae:	7a 8f       	std	Y+26, r23	; 0x1a
    9cb0:	8b 8f       	std	Y+27, r24	; 0x1b
    9cb2:	9c 8f       	std	Y+28, r25	; 0x1c
    9cb4:	9f 01       	movw	r18, r30
    9cb6:	40 e0       	ldi	r20, 0x00	; 0
    9cb8:	50 e0       	ldi	r21, 0x00	; 0
    9cba:	2d 8f       	std	Y+29, r18	; 0x1d
    9cbc:	3e 8f       	std	Y+30, r19	; 0x1e
    9cbe:	4f 8f       	std	Y+31, r20	; 0x1f
    9cc0:	58 a3       	std	Y+32, r21	; 0x20
    9cc2:	c4 01       	movw	r24, r8
    9cc4:	f4 e0       	ldi	r31, 0x04	; 4
    9cc6:	96 95       	lsr	r25
    9cc8:	87 95       	ror	r24
    9cca:	fa 95       	dec	r31
    9ccc:	e1 f7       	brne	.-8      	; 0x9cc6 <mount_volume+0x200>
    9cce:	28 0f       	add	r18, r24
    9cd0:	39 1f       	adc	r19, r25
    9cd2:	41 1d       	adc	r20, r1
    9cd4:	51 1d       	adc	r21, r1
    9cd6:	da 01       	movw	r26, r20
    9cd8:	c9 01       	movw	r24, r18
    9cda:	29 8d       	ldd	r18, Y+25	; 0x19
    9cdc:	3a 8d       	ldd	r19, Y+26	; 0x1a
    9cde:	4b 8d       	ldd	r20, Y+27	; 0x1b
    9ce0:	5c 8d       	ldd	r21, Y+28	; 0x1c
    9ce2:	28 0f       	add	r18, r24
    9ce4:	39 1f       	adc	r19, r25
    9ce6:	4a 1f       	adc	r20, r26
    9ce8:	5b 1f       	adc	r21, r27
    9cea:	2d 8b       	std	Y+21, r18	; 0x15
    9cec:	3e 8b       	std	Y+22, r19	; 0x16
    9cee:	4f 8b       	std	Y+23, r20	; 0x17
    9cf0:	58 8f       	std	Y+24, r21	; 0x18
    9cf2:	c2 16       	cp	r12, r18
    9cf4:	d3 06       	cpc	r13, r19
    9cf6:	e4 06       	cpc	r14, r20
    9cf8:	f5 06       	cpc	r15, r21
    9cfa:	08 f4       	brcc	.+2      	; 0x9cfe <mount_volume+0x238>
    9cfc:	67 cf       	rjmp	.-306    	; 0x9bcc <mount_volume+0x106>
    9cfe:	c7 01       	movw	r24, r14
    9d00:	b6 01       	movw	r22, r12
    9d02:	62 1b       	sub	r22, r18
    9d04:	73 0b       	sbc	r23, r19
    9d06:	84 0b       	sbc	r24, r20
    9d08:	95 0b       	sbc	r25, r21
    9d0a:	2b 2d       	mov	r18, r11
    9d0c:	30 e0       	ldi	r19, 0x00	; 0
    9d0e:	40 e0       	ldi	r20, 0x00	; 0
    9d10:	50 e0       	ldi	r21, 0x00	; 0
    9d12:	0e 94 71 e5 	call	0x1cae2	; 0x1cae2 <__udivmodsi4>
    9d16:	da 01       	movw	r26, r20
    9d18:	c9 01       	movw	r24, r18
    9d1a:	01 97       	sbiw	r24, 0x01	; 1
    9d1c:	a1 09       	sbc	r26, r1
    9d1e:	b1 09       	sbc	r27, r1
    9d20:	85 3f       	cpi	r24, 0xF5	; 245
    9d22:	9f 4f       	sbci	r25, 0xFF	; 255
    9d24:	af 4f       	sbci	r26, 0xFF	; 255
    9d26:	bf 40       	sbci	r27, 0x0F	; 15
    9d28:	08 f0       	brcs	.+2      	; 0x9d2c <mount_volume+0x266>
    9d2a:	50 cf       	rjmp	.-352    	; 0x9bcc <mount_volume+0x106>
    9d2c:	26 3f       	cpi	r18, 0xF6	; 246
    9d2e:	8f ef       	ldi	r24, 0xFF	; 255
    9d30:	38 07       	cpc	r19, r24
    9d32:	41 05       	cpc	r20, r1
    9d34:	51 05       	cpc	r21, r1
    9d36:	50 f4       	brcc	.+20     	; 0x9d4c <mount_volume+0x286>
    9d38:	26 3f       	cpi	r18, 0xF6	; 246
    9d3a:	9f e0       	ldi	r25, 0x0F	; 15
    9d3c:	39 07       	cpc	r19, r25
    9d3e:	41 05       	cpc	r20, r1
    9d40:	51 05       	cpc	r21, r1
    9d42:	40 f4       	brcc	.+16     	; 0x9d54 <mount_volume+0x28e>
    9d44:	aa 24       	eor	r10, r10
    9d46:	a3 94       	inc	r10
    9d48:	b1 2c       	mov	r11, r1
    9d4a:	07 c0       	rjmp	.+14     	; 0x9d5a <mount_volume+0x294>
    9d4c:	73 e0       	ldi	r23, 0x03	; 3
    9d4e:	a7 2e       	mov	r10, r23
    9d50:	b1 2c       	mov	r11, r1
    9d52:	03 c0       	rjmp	.+6      	; 0x9d5a <mount_volume+0x294>
    9d54:	62 e0       	ldi	r22, 0x02	; 2
    9d56:	a6 2e       	mov	r10, r22
    9d58:	b1 2c       	mov	r11, r1
    9d5a:	69 01       	movw	r12, r18
    9d5c:	7a 01       	movw	r14, r20
    9d5e:	a2 e0       	ldi	r26, 0x02	; 2
    9d60:	ca 0e       	add	r12, r26
    9d62:	d1 1c       	adc	r13, r1
    9d64:	e1 1c       	adc	r14, r1
    9d66:	f1 1c       	adc	r15, r1
    9d68:	f8 01       	movw	r30, r16
    9d6a:	c1 8e       	std	Z+25, r12	; 0x19
    9d6c:	d2 8e       	std	Z+26, r13	; 0x1a
    9d6e:	e3 8e       	std	Z+27, r14	; 0x1b
    9d70:	f4 8e       	std	Z+28, r15	; 0x1c
    9d72:	29 89       	ldd	r18, Y+17	; 0x11
    9d74:	3a 89       	ldd	r19, Y+18	; 0x12
    9d76:	4b 89       	ldd	r20, Y+19	; 0x13
    9d78:	5c 89       	ldd	r21, Y+20	; 0x14
    9d7a:	21 a3       	std	Z+33, r18	; 0x21
    9d7c:	32 a3       	std	Z+34, r19	; 0x22
    9d7e:	43 a3       	std	Z+35, r20	; 0x23
    9d80:	54 a3       	std	Z+36, r21	; 0x24
    9d82:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9d84:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9d86:	af 8d       	ldd	r26, Y+31	; 0x1f
    9d88:	b8 a1       	ldd	r27, Y+32	; 0x20
    9d8a:	28 0f       	add	r18, r24
    9d8c:	39 1f       	adc	r19, r25
    9d8e:	4a 1f       	adc	r20, r26
    9d90:	5b 1f       	adc	r21, r27
    9d92:	2d 8f       	std	Y+29, r18	; 0x1d
    9d94:	3e 8f       	std	Y+30, r19	; 0x1e
    9d96:	4f 8f       	std	Y+31, r20	; 0x1f
    9d98:	58 a3       	std	Y+32, r21	; 0x20
    9d9a:	25 a3       	std	Z+37, r18	; 0x25
    9d9c:	36 a3       	std	Z+38, r19	; 0x26
    9d9e:	47 a3       	std	Z+39, r20	; 0x27
    9da0:	50 a7       	std	Z+40, r21	; 0x28
    9da2:	49 89       	ldd	r20, Y+17	; 0x11
    9da4:	5a 89       	ldd	r21, Y+18	; 0x12
    9da6:	6b 89       	ldd	r22, Y+19	; 0x13
    9da8:	7c 89       	ldd	r23, Y+20	; 0x14
    9daa:	8d 89       	ldd	r24, Y+21	; 0x15
    9dac:	9e 89       	ldd	r25, Y+22	; 0x16
    9dae:	af 89       	ldd	r26, Y+23	; 0x17
    9db0:	b8 8d       	ldd	r27, Y+24	; 0x18
    9db2:	48 0f       	add	r20, r24
    9db4:	59 1f       	adc	r21, r25
    9db6:	6a 1f       	adc	r22, r26
    9db8:	7b 1f       	adc	r23, r27
    9dba:	45 a7       	std	Z+45, r20	; 0x2d
    9dbc:	56 a7       	std	Z+46, r21	; 0x2e
    9dbe:	67 a7       	std	Z+47, r22	; 0x2f
    9dc0:	70 ab       	std	Z+48, r23	; 0x30
    9dc2:	b3 e0       	ldi	r27, 0x03	; 3
    9dc4:	ab 16       	cp	r10, r27
    9dc6:	b1 04       	cpc	r11, r1
    9dc8:	e1 f4       	brne	.+56     	; 0x9e02 <mount_volume+0x33c>
    9dca:	e1 5a       	subi	r30, 0xA1	; 161
    9dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    9dce:	80 81       	ld	r24, Z
    9dd0:	91 81       	ldd	r25, Z+1	; 0x01
    9dd2:	89 2b       	or	r24, r25
    9dd4:	09 f0       	breq	.+2      	; 0x9dd8 <mount_volume+0x312>
    9dd6:	fa ce       	rjmp	.-524    	; 0x9bcc <mount_volume+0x106>
    9dd8:	81 14       	cp	r8, r1
    9dda:	91 04       	cpc	r9, r1
    9ddc:	09 f0       	breq	.+2      	; 0x9de0 <mount_volume+0x31a>
    9dde:	f6 ce       	rjmp	.-532    	; 0x9bcc <mount_volume+0x106>
    9de0:	c8 01       	movw	r24, r16
    9de2:	8f 59       	subi	r24, 0x9F	; 159
    9de4:	9f 4f       	sbci	r25, 0xFF	; 255
    9de6:	10 d9       	rcall	.-3552   	; 0x9008 <ld_dword>
    9de8:	f8 01       	movw	r30, r16
    9dea:	61 a7       	std	Z+41, r22	; 0x29
    9dec:	72 a7       	std	Z+42, r23	; 0x2a
    9dee:	83 a7       	std	Z+43, r24	; 0x2b
    9df0:	94 a7       	std	Z+44, r25	; 0x2c
    9df2:	42 e0       	ldi	r20, 0x02	; 2
    9df4:	cc 0c       	add	r12, r12
    9df6:	dd 1c       	adc	r13, r13
    9df8:	ee 1c       	adc	r14, r14
    9dfa:	ff 1c       	adc	r15, r15
    9dfc:	4a 95       	dec	r20
    9dfe:	d1 f7       	brne	.-12     	; 0x9df4 <mount_volume+0x32e>
    9e00:	33 c0       	rjmp	.+102    	; 0x9e68 <mount_volume+0x3a2>
    9e02:	81 14       	cp	r8, r1
    9e04:	91 04       	cpc	r9, r1
    9e06:	09 f4       	brne	.+2      	; 0x9e0a <mount_volume+0x344>
    9e08:	e1 ce       	rjmp	.-574    	; 0x9bcc <mount_volume+0x106>
    9e0a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9e0c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9e0e:	af 8d       	ldd	r26, Y+31	; 0x1f
    9e10:	b8 a1       	ldd	r27, Y+32	; 0x20
    9e12:	29 8d       	ldd	r18, Y+25	; 0x19
    9e14:	3a 8d       	ldd	r19, Y+26	; 0x1a
    9e16:	4b 8d       	ldd	r20, Y+27	; 0x1b
    9e18:	5c 8d       	ldd	r21, Y+28	; 0x1c
    9e1a:	82 0f       	add	r24, r18
    9e1c:	93 1f       	adc	r25, r19
    9e1e:	a4 1f       	adc	r26, r20
    9e20:	b5 1f       	adc	r27, r21
    9e22:	f8 01       	movw	r30, r16
    9e24:	81 a7       	std	Z+41, r24	; 0x29
    9e26:	92 a7       	std	Z+42, r25	; 0x2a
    9e28:	a3 a7       	std	Z+43, r26	; 0x2b
    9e2a:	b4 a7       	std	Z+44, r27	; 0x2c
    9e2c:	f2 e0       	ldi	r31, 0x02	; 2
    9e2e:	af 16       	cp	r10, r31
    9e30:	b1 04       	cpc	r11, r1
    9e32:	29 f4       	brne	.+10     	; 0x9e3e <mount_volume+0x378>
    9e34:	cc 0c       	add	r12, r12
    9e36:	dd 1c       	adc	r13, r13
    9e38:	ee 1c       	adc	r14, r14
    9e3a:	ff 1c       	adc	r15, r15
    9e3c:	15 c0       	rjmp	.+42     	; 0x9e68 <mount_volume+0x3a2>
    9e3e:	a3 e0       	ldi	r26, 0x03	; 3
    9e40:	b0 e0       	ldi	r27, 0x00	; 0
    9e42:	a7 01       	movw	r20, r14
    9e44:	96 01       	movw	r18, r12
    9e46:	0e 94 d3 e5 	call	0x1cba6	; 0x1cba6 <__muluhisi3>
    9e4a:	dc 01       	movw	r26, r24
    9e4c:	cb 01       	movw	r24, r22
    9e4e:	b6 95       	lsr	r27
    9e50:	a7 95       	ror	r26
    9e52:	97 95       	ror	r25
    9e54:	87 95       	ror	r24
    9e56:	21 e0       	ldi	r18, 0x01	; 1
    9e58:	c2 22       	and	r12, r18
    9e5a:	dd 24       	eor	r13, r13
    9e5c:	ee 24       	eor	r14, r14
    9e5e:	ff 24       	eor	r15, r15
    9e60:	c8 0e       	add	r12, r24
    9e62:	d9 1e       	adc	r13, r25
    9e64:	ea 1e       	adc	r14, r26
    9e66:	fb 1e       	adc	r15, r27
    9e68:	3f ef       	ldi	r19, 0xFF	; 255
    9e6a:	c3 0e       	add	r12, r19
    9e6c:	31 e0       	ldi	r19, 0x01	; 1
    9e6e:	d3 1e       	adc	r13, r19
    9e70:	e1 1c       	adc	r14, r1
    9e72:	f1 1c       	adc	r15, r1
    9e74:	89 e0       	ldi	r24, 0x09	; 9
    9e76:	f6 94       	lsr	r15
    9e78:	e7 94       	ror	r14
    9e7a:	d7 94       	ror	r13
    9e7c:	c7 94       	ror	r12
    9e7e:	8a 95       	dec	r24
    9e80:	d1 f7       	brne	.-12     	; 0x9e76 <mount_volume+0x3b0>
    9e82:	4c 14       	cp	r4, r12
    9e84:	5d 04       	cpc	r5, r13
    9e86:	6e 04       	cpc	r6, r14
    9e88:	7f 04       	cpc	r7, r15
    9e8a:	08 f4       	brcc	.+2      	; 0x9e8e <mount_volume+0x3c8>
    9e8c:	9f ce       	rjmp	.-706    	; 0x9bcc <mount_volume+0x106>
    9e8e:	8f ef       	ldi	r24, 0xFF	; 255
    9e90:	9f ef       	ldi	r25, 0xFF	; 255
    9e92:	dc 01       	movw	r26, r24
    9e94:	f8 01       	movw	r30, r16
    9e96:	81 8b       	std	Z+17, r24	; 0x11
    9e98:	92 8b       	std	Z+18, r25	; 0x12
    9e9a:	a3 8b       	std	Z+19, r26	; 0x13
    9e9c:	b4 8b       	std	Z+20, r27	; 0x14
    9e9e:	85 87       	std	Z+13, r24	; 0x0d
    9ea0:	96 87       	std	Z+14, r25	; 0x0e
    9ea2:	a7 87       	std	Z+15, r26	; 0x0f
    9ea4:	b0 8b       	std	Z+16, r27	; 0x10
    9ea6:	80 e8       	ldi	r24, 0x80	; 128
    9ea8:	84 83       	std	Z+4, r24	; 0x04
    9eaa:	f3 e0       	ldi	r31, 0x03	; 3
    9eac:	af 16       	cp	r10, r31
    9eae:	b1 04       	cpc	r11, r1
    9eb0:	09 f0       	breq	.+2      	; 0x9eb4 <mount_volume+0x3ee>
    9eb2:	44 c0       	rjmp	.+136    	; 0x9f3c <mount_volume+0x476>
    9eb4:	f8 01       	movw	r30, r16
    9eb6:	eb 59       	subi	r30, 0x9B	; 155
    9eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    9eba:	80 81       	ld	r24, Z
    9ebc:	91 81       	ldd	r25, Z+1	; 0x01
    9ebe:	01 97       	sbiw	r24, 0x01	; 1
    9ec0:	09 f0       	breq	.+2      	; 0x9ec4 <mount_volume+0x3fe>
    9ec2:	3c c0       	rjmp	.+120    	; 0x9f3c <mount_volume+0x476>
    9ec4:	49 89       	ldd	r20, Y+17	; 0x11
    9ec6:	5a 89       	ldd	r21, Y+18	; 0x12
    9ec8:	6b 89       	ldd	r22, Y+19	; 0x13
    9eca:	7c 89       	ldd	r23, Y+20	; 0x14
    9ecc:	4f 5f       	subi	r20, 0xFF	; 255
    9ece:	5f 4f       	sbci	r21, 0xFF	; 255
    9ed0:	6f 4f       	sbci	r22, 0xFF	; 255
    9ed2:	7f 4f       	sbci	r23, 0xFF	; 255
    9ed4:	c8 01       	movw	r24, r16
    9ed6:	7c dd       	rcall	.-1288   	; 0x99d0 <move_window>
    9ed8:	89 2b       	or	r24, r25
    9eda:	81 f5       	brne	.+96     	; 0x9f3c <mount_volume+0x476>
    9edc:	d8 01       	movw	r26, r16
    9ede:	14 96       	adiw	r26, 0x04	; 4
    9ee0:	1c 92       	st	X, r1
    9ee2:	f8 01       	movw	r30, r16
    9ee4:	ed 5c       	subi	r30, 0xCD	; 205
    9ee6:	fd 4f       	sbci	r31, 0xFD	; 253
    9ee8:	80 81       	ld	r24, Z
    9eea:	91 81       	ldd	r25, Z+1	; 0x01
    9eec:	85 35       	cpi	r24, 0x55	; 85
    9eee:	9a 4a       	sbci	r25, 0xAA	; 170
    9ef0:	29 f5       	brne	.+74     	; 0x9f3c <mount_volume+0x476>
    9ef2:	c8 01       	movw	r24, r16
    9ef4:	c5 96       	adiw	r24, 0x35	; 53
    9ef6:	88 d8       	rcall	.-3824   	; 0x9008 <ld_dword>
    9ef8:	62 35       	cpi	r22, 0x52	; 82
    9efa:	72 45       	sbci	r23, 0x52	; 82
    9efc:	81 46       	sbci	r24, 0x61	; 97
    9efe:	91 44       	sbci	r25, 0x41	; 65
    9f00:	e9 f4       	brne	.+58     	; 0x9f3c <mount_volume+0x476>
    9f02:	c8 01       	movw	r24, r16
    9f04:	87 5e       	subi	r24, 0xE7	; 231
    9f06:	9d 4f       	sbci	r25, 0xFD	; 253
    9f08:	7f d8       	rcall	.-3842   	; 0x9008 <ld_dword>
    9f0a:	62 37       	cpi	r22, 0x72	; 114
    9f0c:	72 47       	sbci	r23, 0x72	; 114
    9f0e:	81 44       	sbci	r24, 0x41	; 65
    9f10:	91 46       	sbci	r25, 0x61	; 97
    9f12:	a1 f4       	brne	.+40     	; 0x9f3c <mount_volume+0x476>
    9f14:	c8 01       	movw	r24, r16
    9f16:	83 5e       	subi	r24, 0xE3	; 227
    9f18:	9d 4f       	sbci	r25, 0xFD	; 253
    9f1a:	76 d8       	rcall	.-3860   	; 0x9008 <ld_dword>
    9f1c:	d8 01       	movw	r26, r16
    9f1e:	51 96       	adiw	r26, 0x11	; 17
    9f20:	6d 93       	st	X+, r22
    9f22:	7d 93       	st	X+, r23
    9f24:	8d 93       	st	X+, r24
    9f26:	9c 93       	st	X, r25
    9f28:	54 97       	sbiw	r26, 0x14	; 20
    9f2a:	c8 01       	movw	r24, r16
    9f2c:	8f 5d       	subi	r24, 0xDF	; 223
    9f2e:	9d 4f       	sbci	r25, 0xFD	; 253
    9f30:	6b d8       	rcall	.-3882   	; 0x9008 <ld_dword>
    9f32:	f8 01       	movw	r30, r16
    9f34:	65 87       	std	Z+13, r22	; 0x0d
    9f36:	76 87       	std	Z+14, r23	; 0x0e
    9f38:	87 87       	std	Z+15, r24	; 0x0f
    9f3a:	90 8b       	std	Z+16, r25	; 0x10
    9f3c:	d8 01       	movw	r26, r16
    9f3e:	ac 92       	st	X, r10
    9f40:	80 91 15 18 	lds	r24, 0x1815	; 0x801815 <Fsid>
    9f44:	90 91 16 18 	lds	r25, 0x1816	; 0x801816 <Fsid+0x1>
    9f48:	01 96       	adiw	r24, 0x01	; 1
    9f4a:	90 93 16 18 	sts	0x1816, r25	; 0x801816 <Fsid+0x1>
    9f4e:	80 93 15 18 	sts	0x1815, r24	; 0x801815 <Fsid>
    9f52:	16 96       	adiw	r26, 0x06	; 6
    9f54:	9c 93       	st	X, r25
    9f56:	8e 93       	st	-X, r24
    9f58:	15 97       	sbiw	r26, 0x05	; 5
    9f5a:	f8 01       	movw	r30, r16
    9f5c:	15 8a       	std	Z+21, r1	; 0x15
    9f5e:	16 8a       	std	Z+22, r1	; 0x16
    9f60:	17 8a       	std	Z+23, r1	; 0x17
    9f62:	10 8e       	std	Z+24, r1	; 0x18
    9f64:	06 c0       	rjmp	.+12     	; 0x9f72 <mount_volume+0x4ac>
    9f66:	8b e0       	ldi	r24, 0x0B	; 11
    9f68:	90 e0       	ldi	r25, 0x00	; 0
    9f6a:	0b c0       	rjmp	.+22     	; 0x9f82 <mount_volume+0x4bc>
    9f6c:	8c e0       	ldi	r24, 0x0C	; 12
    9f6e:	90 e0       	ldi	r25, 0x00	; 0
    9f70:	08 c0       	rjmp	.+16     	; 0x9f82 <mount_volume+0x4bc>
    9f72:	80 e0       	ldi	r24, 0x00	; 0
    9f74:	90 e0       	ldi	r25, 0x00	; 0
    9f76:	05 c0       	rjmp	.+10     	; 0x9f82 <mount_volume+0x4bc>
    9f78:	83 e0       	ldi	r24, 0x03	; 3
    9f7a:	90 e0       	ldi	r25, 0x00	; 0
    9f7c:	02 c0       	rjmp	.+4      	; 0x9f82 <mount_volume+0x4bc>
    9f7e:	81 e0       	ldi	r24, 0x01	; 1
    9f80:	90 e0       	ldi	r25, 0x00	; 0
    9f82:	a0 96       	adiw	r28, 0x20	; 32
    9f84:	e0 e1       	ldi	r30, 0x10	; 16
    9f86:	0c 94 11 e6 	jmp	0x1cc22	; 0x1cc22 <__epilogue_restores__+0x4>

00009f8a <put_fat>:
    9f8a:	a6 e0       	ldi	r26, 0x06	; 6
    9f8c:	b0 e0       	ldi	r27, 0x00	; 0
    9f8e:	eb ec       	ldi	r30, 0xCB	; 203
    9f90:	ff e4       	ldi	r31, 0x4F	; 79
    9f92:	0c 94 f3 e5 	jmp	0x1cbe6	; 0x1cbe6 <__prologue_saves__>
    9f96:	42 30       	cpi	r20, 0x02	; 2
    9f98:	51 05       	cpc	r21, r1
    9f9a:	61 05       	cpc	r22, r1
    9f9c:	71 05       	cpc	r23, r1
    9f9e:	08 f4       	brcc	.+2      	; 0x9fa2 <put_fat+0x18>
    9fa0:	eb c0       	rjmp	.+470    	; 0xa178 <put_fat+0x1ee>
    9fa2:	dc 01       	movw	r26, r24
    9fa4:	59 96       	adiw	r26, 0x19	; 25
    9fa6:	cd 90       	ld	r12, X+
    9fa8:	dd 90       	ld	r13, X+
    9faa:	ed 90       	ld	r14, X+
    9fac:	fc 90       	ld	r15, X
    9fae:	5c 97       	sbiw	r26, 0x1c	; 28
    9fb0:	4c 15       	cp	r20, r12
    9fb2:	5d 05       	cpc	r21, r13
    9fb4:	6e 05       	cpc	r22, r14
    9fb6:	7f 05       	cpc	r23, r15
    9fb8:	08 f0       	brcs	.+2      	; 0x9fbc <put_fat+0x32>
    9fba:	de c0       	rjmp	.+444    	; 0xa178 <put_fat+0x1ee>
    9fbc:	28 01       	movw	r4, r16
    9fbe:	39 01       	movw	r6, r18
    9fc0:	6a 01       	movw	r12, r20
    9fc2:	7b 01       	movw	r14, r22
    9fc4:	9e 83       	std	Y+6, r25	; 0x06
    9fc6:	8d 83       	std	Y+5, r24	; 0x05
    9fc8:	fc 01       	movw	r30, r24
    9fca:	80 81       	ld	r24, Z
    9fcc:	82 30       	cpi	r24, 0x02	; 2
    9fce:	09 f4       	brne	.+2      	; 0x9fd2 <put_fat+0x48>
    9fd0:	73 c0       	rjmp	.+230    	; 0xa0b8 <put_fat+0x12e>
    9fd2:	83 30       	cpi	r24, 0x03	; 3
    9fd4:	09 f4       	brne	.+2      	; 0x9fd8 <put_fat+0x4e>
    9fd6:	92 c0       	rjmp	.+292    	; 0xa0fc <put_fat+0x172>
    9fd8:	81 30       	cpi	r24, 0x01	; 1
    9fda:	09 f0       	breq	.+2      	; 0x9fde <put_fat+0x54>
    9fdc:	cd c0       	rjmp	.+410    	; 0xa178 <put_fat+0x1ee>
    9fde:	4a 01       	movw	r8, r20
    9fe0:	96 94       	lsr	r9
    9fe2:	87 94       	ror	r8
    9fe4:	84 0e       	add	r8, r20
    9fe6:	95 1e       	adc	r9, r21
    9fe8:	c4 01       	movw	r24, r8
    9fea:	89 2f       	mov	r24, r25
    9fec:	99 27       	eor	r25, r25
    9fee:	86 95       	lsr	r24
    9ff0:	45 a1       	ldd	r20, Z+37	; 0x25
    9ff2:	56 a1       	ldd	r21, Z+38	; 0x26
    9ff4:	67 a1       	ldd	r22, Z+39	; 0x27
    9ff6:	70 a5       	ldd	r23, Z+40	; 0x28
    9ff8:	48 0f       	add	r20, r24
    9ffa:	59 1f       	adc	r21, r25
    9ffc:	61 1d       	adc	r22, r1
    9ffe:	71 1d       	adc	r23, r1
    a000:	cf 01       	movw	r24, r30
    a002:	e6 dc       	rcall	.-1588   	; 0x99d0 <move_window>
    a004:	5c 01       	movw	r10, r24
    a006:	89 2b       	or	r24, r25
    a008:	09 f0       	breq	.+2      	; 0xa00c <put_fat+0x82>
    a00a:	b9 c0       	rjmp	.+370    	; 0xa17e <put_fat+0x1f4>
    a00c:	2d 80       	ldd	r2, Y+5	; 0x05
    a00e:	3e 80       	ldd	r3, Y+6	; 0x06
    a010:	f5 e3       	ldi	r31, 0x35	; 53
    a012:	2f 0e       	add	r2, r31
    a014:	31 1c       	adc	r3, r1
    a016:	84 01       	movw	r16, r8
    a018:	0f 5f       	subi	r16, 0xFF	; 255
    a01a:	1f 4f       	sbci	r17, 0xFF	; 255
    a01c:	21 e0       	ldi	r18, 0x01	; 1
    a01e:	92 22       	and	r9, r18
    a020:	f1 01       	movw	r30, r2
    a022:	e8 0d       	add	r30, r8
    a024:	f9 1d       	adc	r31, r9
    a026:	d7 01       	movw	r26, r14
    a028:	c6 01       	movw	r24, r12
    a02a:	81 70       	andi	r24, 0x01	; 1
    a02c:	99 27       	eor	r25, r25
    a02e:	aa 27       	eor	r26, r26
    a030:	bb 27       	eor	r27, r27
    a032:	89 83       	std	Y+1, r24	; 0x01
    a034:	9a 83       	std	Y+2, r25	; 0x02
    a036:	ab 83       	std	Y+3, r26	; 0x03
    a038:	bc 83       	std	Y+4, r27	; 0x04
    a03a:	c0 fe       	sbrs	r12, 0
    a03c:	09 c0       	rjmp	.+18     	; 0xa050 <put_fat+0xc6>
    a03e:	80 81       	ld	r24, Z
    a040:	28 2f       	mov	r18, r24
    a042:	2f 70       	andi	r18, 0x0F	; 15
    a044:	a0 e1       	ldi	r26, 0x10	; 16
    a046:	4a 9e       	mul	r4, r26
    a048:	c0 01       	movw	r24, r0
    a04a:	11 24       	eor	r1, r1
    a04c:	82 2b       	or	r24, r18
    a04e:	01 c0       	rjmp	.+2      	; 0xa052 <put_fat+0xc8>
    a050:	84 2d       	mov	r24, r4
    a052:	80 83       	st	Z, r24
    a054:	81 e0       	ldi	r24, 0x01	; 1
    a056:	ed 81       	ldd	r30, Y+5	; 0x05
    a058:	fe 81       	ldd	r31, Y+6	; 0x06
    a05a:	83 83       	std	Z+3, r24	; 0x03
    a05c:	45 a1       	ldd	r20, Z+37	; 0x25
    a05e:	56 a1       	ldd	r21, Z+38	; 0x26
    a060:	67 a1       	ldd	r22, Z+39	; 0x27
    a062:	70 a5       	ldd	r23, Z+40	; 0x28
    a064:	c8 01       	movw	r24, r16
    a066:	89 2f       	mov	r24, r25
    a068:	99 27       	eor	r25, r25
    a06a:	86 95       	lsr	r24
    a06c:	48 0f       	add	r20, r24
    a06e:	59 1f       	adc	r21, r25
    a070:	61 1d       	adc	r22, r1
    a072:	71 1d       	adc	r23, r1
    a074:	cf 01       	movw	r24, r30
    a076:	ac dc       	rcall	.-1704   	; 0x99d0 <move_window>
    a078:	5c 01       	movw	r10, r24
    a07a:	89 2b       	or	r24, r25
    a07c:	09 f0       	breq	.+2      	; 0xa080 <put_fat+0xf6>
    a07e:	7f c0       	rjmp	.+254    	; 0xa17e <put_fat+0x1f4>
    a080:	11 70       	andi	r17, 0x01	; 1
    a082:	f1 01       	movw	r30, r2
    a084:	e0 0f       	add	r30, r16
    a086:	f1 1f       	adc	r31, r17
    a088:	89 81       	ldd	r24, Y+1	; 0x01
    a08a:	9a 81       	ldd	r25, Y+2	; 0x02
    a08c:	ab 81       	ldd	r26, Y+3	; 0x03
    a08e:	bc 81       	ldd	r27, Y+4	; 0x04
    a090:	89 2b       	or	r24, r25
    a092:	8a 2b       	or	r24, r26
    a094:	8b 2b       	or	r24, r27
    a096:	41 f0       	breq	.+16     	; 0xa0a8 <put_fat+0x11e>
    a098:	54 e0       	ldi	r21, 0x04	; 4
    a09a:	76 94       	lsr	r7
    a09c:	67 94       	ror	r6
    a09e:	57 94       	ror	r5
    a0a0:	47 94       	ror	r4
    a0a2:	5a 95       	dec	r21
    a0a4:	d1 f7       	brne	.-12     	; 0xa09a <put_fat+0x110>
    a0a6:	06 c0       	rjmp	.+12     	; 0xa0b4 <put_fat+0x12a>
    a0a8:	00 81       	ld	r16, Z
    a0aa:	00 7f       	andi	r16, 0xF0	; 240
    a0ac:	85 2d       	mov	r24, r5
    a0ae:	8f 70       	andi	r24, 0x0F	; 15
    a0b0:	40 2e       	mov	r4, r16
    a0b2:	48 2a       	or	r4, r24
    a0b4:	40 82       	st	Z, r4
    a0b6:	5a c0       	rjmp	.+180    	; 0xa16c <put_fat+0x1e2>
    a0b8:	77 27       	eor	r23, r23
    a0ba:	6f 2d       	mov	r22, r15
    a0bc:	5e 2d       	mov	r21, r14
    a0be:	4d 2d       	mov	r20, r13
    a0c0:	ed 81       	ldd	r30, Y+5	; 0x05
    a0c2:	fe 81       	ldd	r31, Y+6	; 0x06
    a0c4:	85 a1       	ldd	r24, Z+37	; 0x25
    a0c6:	96 a1       	ldd	r25, Z+38	; 0x26
    a0c8:	a7 a1       	ldd	r26, Z+39	; 0x27
    a0ca:	b0 a5       	ldd	r27, Z+40	; 0x28
    a0cc:	48 0f       	add	r20, r24
    a0ce:	59 1f       	adc	r21, r25
    a0d0:	6a 1f       	adc	r22, r26
    a0d2:	7b 1f       	adc	r23, r27
    a0d4:	cf 01       	movw	r24, r30
    a0d6:	7c dc       	rcall	.-1800   	; 0x99d0 <move_window>
    a0d8:	5c 01       	movw	r10, r24
    a0da:	89 2b       	or	r24, r25
    a0dc:	09 f0       	breq	.+2      	; 0xa0e0 <put_fat+0x156>
    a0de:	4f c0       	rjmp	.+158    	; 0xa17e <put_fat+0x1f4>
    a0e0:	ed 81       	ldd	r30, Y+5	; 0x05
    a0e2:	fe 81       	ldd	r31, Y+6	; 0x06
    a0e4:	f5 96       	adiw	r30, 0x35	; 53
    a0e6:	cc 0c       	add	r12, r12
    a0e8:	dd 1c       	adc	r13, r13
    a0ea:	e8 94       	clt
    a0ec:	c0 f8       	bld	r12, 0
    a0ee:	21 e0       	ldi	r18, 0x01	; 1
    a0f0:	d2 22       	and	r13, r18
    a0f2:	ec 0d       	add	r30, r12
    a0f4:	fd 1d       	adc	r31, r13
    a0f6:	40 82       	st	Z, r4
    a0f8:	51 82       	std	Z+1, r5	; 0x01
    a0fa:	38 c0       	rjmp	.+112    	; 0xa16c <put_fat+0x1e2>
    a0fc:	ed 81       	ldd	r30, Y+5	; 0x05
    a0fe:	fe 81       	ldd	r31, Y+6	; 0x06
    a100:	85 a1       	ldd	r24, Z+37	; 0x25
    a102:	96 a1       	ldd	r25, Z+38	; 0x26
    a104:	a7 a1       	ldd	r26, Z+39	; 0x27
    a106:	b0 a5       	ldd	r27, Z+40	; 0x28
    a108:	27 e0       	ldi	r18, 0x07	; 7
    a10a:	76 95       	lsr	r23
    a10c:	67 95       	ror	r22
    a10e:	57 95       	ror	r21
    a110:	47 95       	ror	r20
    a112:	2a 95       	dec	r18
    a114:	d1 f7       	brne	.-12     	; 0xa10a <put_fat+0x180>
    a116:	48 0f       	add	r20, r24
    a118:	59 1f       	adc	r21, r25
    a11a:	6a 1f       	adc	r22, r26
    a11c:	7b 1f       	adc	r23, r27
    a11e:	cf 01       	movw	r24, r30
    a120:	57 dc       	rcall	.-1874   	; 0x99d0 <move_window>
    a122:	5c 01       	movw	r10, r24
    a124:	89 2b       	or	r24, r25
    a126:	59 f5       	brne	.+86     	; 0xa17e <put_fat+0x1f4>
    a128:	4d 81       	ldd	r20, Y+5	; 0x05
    a12a:	5e 81       	ldd	r21, Y+6	; 0x06
    a12c:	4b 5c       	subi	r20, 0xCB	; 203
    a12e:	5f 4f       	sbci	r21, 0xFF	; 255
    a130:	cc 0c       	add	r12, r12
    a132:	dd 1c       	adc	r13, r13
    a134:	cc 0c       	add	r12, r12
    a136:	dd 1c       	adc	r13, r13
    a138:	fc ef       	ldi	r31, 0xFC	; 252
    a13a:	cf 22       	and	r12, r31
    a13c:	f1 e0       	ldi	r31, 0x01	; 1
    a13e:	df 22       	and	r13, r31
    a140:	c4 0e       	add	r12, r20
    a142:	d5 1e       	adc	r13, r21
    a144:	c6 01       	movw	r24, r12
    a146:	0e 94 04 48 	call	0x9008	; 0x9008 <ld_dword>
    a14a:	2f e0       	ldi	r18, 0x0F	; 15
    a14c:	72 22       	and	r7, r18
    a14e:	dc 01       	movw	r26, r24
    a150:	cb 01       	movw	r24, r22
    a152:	88 27       	eor	r24, r24
    a154:	99 27       	eor	r25, r25
    a156:	aa 27       	eor	r26, r26
    a158:	b0 7f       	andi	r27, 0xF0	; 240
    a15a:	b3 01       	movw	r22, r6
    a15c:	a2 01       	movw	r20, r4
    a15e:	48 2b       	or	r20, r24
    a160:	59 2b       	or	r21, r25
    a162:	6a 2b       	or	r22, r26
    a164:	7b 2b       	or	r23, r27
    a166:	c6 01       	movw	r24, r12
    a168:	0e 94 19 48 	call	0x9032	; 0x9032 <st_dword>
    a16c:	81 e0       	ldi	r24, 0x01	; 1
    a16e:	ad 81       	ldd	r26, Y+5	; 0x05
    a170:	be 81       	ldd	r27, Y+6	; 0x06
    a172:	13 96       	adiw	r26, 0x03	; 3
    a174:	8c 93       	st	X, r24
    a176:	03 c0       	rjmp	.+6      	; 0xa17e <put_fat+0x1f4>
    a178:	82 e0       	ldi	r24, 0x02	; 2
    a17a:	a8 2e       	mov	r10, r24
    a17c:	b1 2c       	mov	r11, r1
    a17e:	c5 01       	movw	r24, r10
    a180:	26 96       	adiw	r28, 0x06	; 6
    a182:	e2 e1       	ldi	r30, 0x12	; 18
    a184:	0c 94 0f e6 	jmp	0x1cc1e	; 0x1cc1e <__epilogue_restores__>

0000a188 <get_fat.isra.10>:
    a188:	a0 e0       	ldi	r26, 0x00	; 0
    a18a:	b0 e0       	ldi	r27, 0x00	; 0
    a18c:	ea ec       	ldi	r30, 0xCA	; 202
    a18e:	f0 e5       	ldi	r31, 0x50	; 80
    a190:	0c 94 fb e5 	jmp	0x1cbf6	; 0x1cbf6 <__prologue_saves__+0x10>
    a194:	42 30       	cpi	r20, 0x02	; 2
    a196:	51 05       	cpc	r21, r1
    a198:	61 05       	cpc	r22, r1
    a19a:	71 05       	cpc	r23, r1
    a19c:	08 f4       	brcc	.+2      	; 0xa1a0 <get_fat.isra.10+0x18>
    a19e:	9f c0       	rjmp	.+318    	; 0xa2de <get_fat.isra.10+0x156>
    a1a0:	fc 01       	movw	r30, r24
    a1a2:	01 8d       	ldd	r16, Z+25	; 0x19
    a1a4:	12 8d       	ldd	r17, Z+26	; 0x1a
    a1a6:	23 8d       	ldd	r18, Z+27	; 0x1b
    a1a8:	34 8d       	ldd	r19, Z+28	; 0x1c
    a1aa:	40 17       	cp	r20, r16
    a1ac:	51 07       	cpc	r21, r17
    a1ae:	62 07       	cpc	r22, r18
    a1b0:	73 07       	cpc	r23, r19
    a1b2:	08 f0       	brcs	.+2      	; 0xa1b6 <get_fat.isra.10+0x2e>
    a1b4:	94 c0       	rjmp	.+296    	; 0xa2de <get_fat.isra.10+0x156>
    a1b6:	6a 01       	movw	r12, r20
    a1b8:	7b 01       	movw	r14, r22
    a1ba:	8c 01       	movw	r16, r24
    a1bc:	80 81       	ld	r24, Z
    a1be:	82 30       	cpi	r24, 0x02	; 2
    a1c0:	09 f4       	brne	.+2      	; 0xa1c4 <get_fat.isra.10+0x3c>
    a1c2:	4b c0       	rjmp	.+150    	; 0xa25a <get_fat.isra.10+0xd2>
    a1c4:	83 30       	cpi	r24, 0x03	; 3
    a1c6:	09 f4       	brne	.+2      	; 0xa1ca <get_fat.isra.10+0x42>
    a1c8:	67 c0       	rjmp	.+206    	; 0xa298 <get_fat.isra.10+0x110>
    a1ca:	81 30       	cpi	r24, 0x01	; 1
    a1cc:	09 f0       	breq	.+2      	; 0xa1d0 <get_fat.isra.10+0x48>
    a1ce:	87 c0       	rjmp	.+270    	; 0xa2de <get_fat.isra.10+0x156>
    a1d0:	ea 01       	movw	r28, r20
    a1d2:	d6 95       	lsr	r29
    a1d4:	c7 95       	ror	r28
    a1d6:	cc 0d       	add	r28, r12
    a1d8:	dd 1d       	adc	r29, r13
    a1da:	ce 01       	movw	r24, r28
    a1dc:	89 2f       	mov	r24, r25
    a1de:	99 27       	eor	r25, r25
    a1e0:	86 95       	lsr	r24
    a1e2:	45 a1       	ldd	r20, Z+37	; 0x25
    a1e4:	56 a1       	ldd	r21, Z+38	; 0x26
    a1e6:	67 a1       	ldd	r22, Z+39	; 0x27
    a1e8:	70 a5       	ldd	r23, Z+40	; 0x28
    a1ea:	48 0f       	add	r20, r24
    a1ec:	59 1f       	adc	r21, r25
    a1ee:	61 1d       	adc	r22, r1
    a1f0:	71 1d       	adc	r23, r1
    a1f2:	cf 01       	movw	r24, r30
    a1f4:	ed db       	rcall	.-2086   	; 0x99d0 <move_window>
    a1f6:	89 2b       	or	r24, r25
    a1f8:	21 f0       	breq	.+8      	; 0xa202 <get_fat.isra.10+0x7a>
    a1fa:	6f ef       	ldi	r22, 0xFF	; 255
    a1fc:	7f ef       	ldi	r23, 0xFF	; 255
    a1fe:	cb 01       	movw	r24, r22
    a200:	72 c0       	rjmp	.+228    	; 0xa2e6 <get_fat.isra.10+0x15e>
    a202:	5e 01       	movw	r10, r28
    a204:	ff ef       	ldi	r31, 0xFF	; 255
    a206:	af 1a       	sub	r10, r31
    a208:	bf 0a       	sbc	r11, r31
    a20a:	d1 70       	andi	r29, 0x01	; 1
    a20c:	c0 0f       	add	r28, r16
    a20e:	d1 1f       	adc	r29, r17
    a210:	cd a9       	ldd	r28, Y+53	; 0x35
    a212:	c5 01       	movw	r24, r10
    a214:	89 2f       	mov	r24, r25
    a216:	99 27       	eor	r25, r25
    a218:	86 95       	lsr	r24
    a21a:	f8 01       	movw	r30, r16
    a21c:	45 a1       	ldd	r20, Z+37	; 0x25
    a21e:	56 a1       	ldd	r21, Z+38	; 0x26
    a220:	67 a1       	ldd	r22, Z+39	; 0x27
    a222:	70 a5       	ldd	r23, Z+40	; 0x28
    a224:	48 0f       	add	r20, r24
    a226:	59 1f       	adc	r21, r25
    a228:	61 1d       	adc	r22, r1
    a22a:	71 1d       	adc	r23, r1
    a22c:	c8 01       	movw	r24, r16
    a22e:	d0 db       	rcall	.-2144   	; 0x99d0 <move_window>
    a230:	89 2b       	or	r24, r25
    a232:	19 f7       	brne	.-58     	; 0xa1fa <get_fat.isra.10+0x72>
    a234:	f1 e0       	ldi	r31, 0x01	; 1
    a236:	bf 22       	and	r11, r31
    a238:	f8 01       	movw	r30, r16
    a23a:	ea 0d       	add	r30, r10
    a23c:	fb 1d       	adc	r31, r11
    a23e:	85 a9       	ldd	r24, Z+53	; 0x35
    a240:	6c 2f       	mov	r22, r28
    a242:	70 e0       	ldi	r23, 0x00	; 0
    a244:	78 2b       	or	r23, r24
    a246:	c0 fe       	sbrs	r12, 0
    a248:	06 c0       	rjmp	.+12     	; 0xa256 <get_fat.isra.10+0xce>
    a24a:	54 e0       	ldi	r21, 0x04	; 4
    a24c:	76 95       	lsr	r23
    a24e:	67 95       	ror	r22
    a250:	5a 95       	dec	r21
    a252:	e1 f7       	brne	.-8      	; 0xa24c <get_fat.isra.10+0xc4>
    a254:	1e c0       	rjmp	.+60     	; 0xa292 <get_fat.isra.10+0x10a>
    a256:	7f 70       	andi	r23, 0x0F	; 15
    a258:	1c c0       	rjmp	.+56     	; 0xa292 <get_fat.isra.10+0x10a>
    a25a:	77 27       	eor	r23, r23
    a25c:	6f 2d       	mov	r22, r15
    a25e:	5e 2d       	mov	r21, r14
    a260:	4d 2d       	mov	r20, r13
    a262:	85 a1       	ldd	r24, Z+37	; 0x25
    a264:	96 a1       	ldd	r25, Z+38	; 0x26
    a266:	a7 a1       	ldd	r26, Z+39	; 0x27
    a268:	b0 a5       	ldd	r27, Z+40	; 0x28
    a26a:	48 0f       	add	r20, r24
    a26c:	59 1f       	adc	r21, r25
    a26e:	6a 1f       	adc	r22, r26
    a270:	7b 1f       	adc	r23, r27
    a272:	cf 01       	movw	r24, r30
    a274:	ad db       	rcall	.-2214   	; 0x99d0 <move_window>
    a276:	89 2b       	or	r24, r25
    a278:	09 f0       	breq	.+2      	; 0xa27c <get_fat.isra.10+0xf4>
    a27a:	bf cf       	rjmp	.-130    	; 0xa1fa <get_fat.isra.10+0x72>
    a27c:	cc 0c       	add	r12, r12
    a27e:	dd 1c       	adc	r13, r13
    a280:	e8 94       	clt
    a282:	c0 f8       	bld	r12, 0
    a284:	f1 e0       	ldi	r31, 0x01	; 1
    a286:	df 22       	and	r13, r31
    a288:	f8 01       	movw	r30, r16
    a28a:	ec 0d       	add	r30, r12
    a28c:	fd 1d       	adc	r31, r13
    a28e:	65 a9       	ldd	r22, Z+53	; 0x35
    a290:	76 a9       	ldd	r23, Z+54	; 0x36
    a292:	80 e0       	ldi	r24, 0x00	; 0
    a294:	90 e0       	ldi	r25, 0x00	; 0
    a296:	27 c0       	rjmp	.+78     	; 0xa2e6 <get_fat.isra.10+0x15e>
    a298:	85 a1       	ldd	r24, Z+37	; 0x25
    a29a:	96 a1       	ldd	r25, Z+38	; 0x26
    a29c:	a7 a1       	ldd	r26, Z+39	; 0x27
    a29e:	b0 a5       	ldd	r27, Z+40	; 0x28
    a2a0:	27 e0       	ldi	r18, 0x07	; 7
    a2a2:	76 95       	lsr	r23
    a2a4:	67 95       	ror	r22
    a2a6:	57 95       	ror	r21
    a2a8:	47 95       	ror	r20
    a2aa:	2a 95       	dec	r18
    a2ac:	d1 f7       	brne	.-12     	; 0xa2a2 <get_fat.isra.10+0x11a>
    a2ae:	48 0f       	add	r20, r24
    a2b0:	59 1f       	adc	r21, r25
    a2b2:	6a 1f       	adc	r22, r26
    a2b4:	7b 1f       	adc	r23, r27
    a2b6:	cf 01       	movw	r24, r30
    a2b8:	8b db       	rcall	.-2282   	; 0x99d0 <move_window>
    a2ba:	89 2b       	or	r24, r25
    a2bc:	09 f0       	breq	.+2      	; 0xa2c0 <get_fat.isra.10+0x138>
    a2be:	9d cf       	rjmp	.-198    	; 0xa1fa <get_fat.isra.10+0x72>
    a2c0:	0b 5c       	subi	r16, 0xCB	; 203
    a2c2:	1f 4f       	sbci	r17, 0xFF	; 255
    a2c4:	cc 0c       	add	r12, r12
    a2c6:	dd 1c       	adc	r13, r13
    a2c8:	cc 0c       	add	r12, r12
    a2ca:	dd 1c       	adc	r13, r13
    a2cc:	c6 01       	movw	r24, r12
    a2ce:	8c 7f       	andi	r24, 0xFC	; 252
    a2d0:	91 70       	andi	r25, 0x01	; 1
    a2d2:	80 0f       	add	r24, r16
    a2d4:	91 1f       	adc	r25, r17
    a2d6:	0e 94 04 48 	call	0x9008	; 0x9008 <ld_dword>
    a2da:	9f 70       	andi	r25, 0x0F	; 15
    a2dc:	04 c0       	rjmp	.+8      	; 0xa2e6 <get_fat.isra.10+0x15e>
    a2de:	61 e0       	ldi	r22, 0x01	; 1
    a2e0:	70 e0       	ldi	r23, 0x00	; 0
    a2e2:	80 e0       	ldi	r24, 0x00	; 0
    a2e4:	90 e0       	ldi	r25, 0x00	; 0
    a2e6:	cd b7       	in	r28, 0x3d	; 61
    a2e8:	de b7       	in	r29, 0x3e	; 62
    a2ea:	ea e0       	ldi	r30, 0x0A	; 10
    a2ec:	0c 94 17 e6 	jmp	0x1cc2e	; 0x1cc2e <__epilogue_restores__+0x10>

0000a2f0 <dir_sdi>:
    a2f0:	a0 e0       	ldi	r26, 0x00	; 0
    a2f2:	b0 e0       	ldi	r27, 0x00	; 0
    a2f4:	ee e7       	ldi	r30, 0x7E	; 126
    a2f6:	f1 e5       	ldi	r31, 0x51	; 81
    a2f8:	0c 94 f5 e5 	jmp	0x1cbea	; 0x1cbea <__prologue_saves__+0x4>
    a2fc:	ec 01       	movw	r28, r24
    a2fe:	6a 01       	movw	r12, r20
    a300:	7b 01       	movw	r14, r22
    a302:	41 15       	cp	r20, r1
    a304:	51 05       	cpc	r21, r1
    a306:	80 e2       	ldi	r24, 0x20	; 32
    a308:	68 07       	cpc	r22, r24
    a30a:	71 05       	cpc	r23, r1
    a30c:	18 f0       	brcs	.+6      	; 0xa314 <dir_sdi+0x24>
    a30e:	82 e0       	ldi	r24, 0x02	; 2
    a310:	90 e0       	ldi	r25, 0x00	; 0
    a312:	aa c0       	rjmp	.+340    	; 0xa468 <dir_sdi+0x178>
    a314:	db 01       	movw	r26, r22
    a316:	ca 01       	movw	r24, r20
    a318:	8f 71       	andi	r24, 0x1F	; 31
    a31a:	99 27       	eor	r25, r25
    a31c:	aa 27       	eor	r26, r26
    a31e:	bb 27       	eor	r27, r27
    a320:	89 2b       	or	r24, r25
    a322:	8a 2b       	or	r24, r26
    a324:	8b 2b       	or	r24, r27
    a326:	99 f7       	brne	.-26     	; 0xa30e <dir_sdi+0x1e>
    a328:	08 81       	ld	r16, Y
    a32a:	19 81       	ldd	r17, Y+1	; 0x01
    a32c:	4e 87       	std	Y+14, r20	; 0x0e
    a32e:	5f 87       	std	Y+15, r21	; 0x0f
    a330:	68 8b       	std	Y+16, r22	; 0x10
    a332:	79 8b       	std	Y+17, r23	; 0x11
    a334:	8e 80       	ldd	r8, Y+6	; 0x06
    a336:	9f 80       	ldd	r9, Y+7	; 0x07
    a338:	a8 84       	ldd	r10, Y+8	; 0x08
    a33a:	b9 84       	ldd	r11, Y+9	; 0x09
    a33c:	81 14       	cp	r8, r1
    a33e:	91 04       	cpc	r9, r1
    a340:	a1 04       	cpc	r10, r1
    a342:	b1 04       	cpc	r11, r1
    a344:	51 f5       	brne	.+84     	; 0xa39a <dir_sdi+0xaa>
    a346:	f8 01       	movw	r30, r16
    a348:	80 81       	ld	r24, Z
    a34a:	83 30       	cpi	r24, 0x03	; 3
    a34c:	40 f0       	brcs	.+16     	; 0xa35e <dir_sdi+0x6e>
    a34e:	81 a5       	ldd	r24, Z+41	; 0x29
    a350:	92 a5       	ldd	r25, Z+42	; 0x2a
    a352:	a3 a5       	ldd	r26, Z+43	; 0x2b
    a354:	b4 a5       	ldd	r27, Z+44	; 0x2c
    a356:	00 97       	sbiw	r24, 0x00	; 0
    a358:	a1 05       	cpc	r26, r1
    a35a:	b1 05       	cpc	r27, r1
    a35c:	e1 f4       	brne	.+56     	; 0xa396 <dir_sdi+0xa6>
    a35e:	f8 01       	movw	r30, r16
    a360:	87 81       	ldd	r24, Z+7	; 0x07
    a362:	90 85       	ldd	r25, Z+8	; 0x08
    a364:	a0 e0       	ldi	r26, 0x00	; 0
    a366:	b0 e0       	ldi	r27, 0x00	; 0
    a368:	b7 01       	movw	r22, r14
    a36a:	a6 01       	movw	r20, r12
    a36c:	25 e0       	ldi	r18, 0x05	; 5
    a36e:	76 95       	lsr	r23
    a370:	67 95       	ror	r22
    a372:	57 95       	ror	r21
    a374:	47 95       	ror	r20
    a376:	2a 95       	dec	r18
    a378:	d1 f7       	brne	.-12     	; 0xa36e <dir_sdi+0x7e>
    a37a:	48 17       	cp	r20, r24
    a37c:	59 07       	cpc	r21, r25
    a37e:	6a 07       	cpc	r22, r26
    a380:	7b 07       	cpc	r23, r27
    a382:	28 f6       	brcc	.-118    	; 0xa30e <dir_sdi+0x1e>
    a384:	81 a5       	ldd	r24, Z+41	; 0x29
    a386:	92 a5       	ldd	r25, Z+42	; 0x2a
    a388:	a3 a5       	ldd	r26, Z+43	; 0x2b
    a38a:	b4 a5       	ldd	r27, Z+44	; 0x2c
    a38c:	8e 8b       	std	Y+22, r24	; 0x16
    a38e:	9f 8b       	std	Y+23, r25	; 0x17
    a390:	a8 8f       	std	Y+24, r26	; 0x18
    a392:	b9 8f       	std	Y+25, r27	; 0x19
    a394:	3e c0       	rjmp	.+124    	; 0xa412 <dir_sdi+0x122>
    a396:	4c 01       	movw	r8, r24
    a398:	5d 01       	movw	r10, r26
    a39a:	f8 01       	movw	r30, r16
    a39c:	41 84       	ldd	r4, Z+9	; 0x09
    a39e:	52 84       	ldd	r5, Z+10	; 0x0a
    a3a0:	61 2c       	mov	r6, r1
    a3a2:	71 2c       	mov	r7, r1
    a3a4:	39 e0       	ldi	r19, 0x09	; 9
    a3a6:	44 0c       	add	r4, r4
    a3a8:	55 1c       	adc	r5, r5
    a3aa:	66 1c       	adc	r6, r6
    a3ac:	77 1c       	adc	r7, r7
    a3ae:	3a 95       	dec	r19
    a3b0:	d1 f7       	brne	.-12     	; 0xa3a6 <dir_sdi+0xb6>
    a3b2:	b5 01       	movw	r22, r10
    a3b4:	a4 01       	movw	r20, r8
    a3b6:	c4 14       	cp	r12, r4
    a3b8:	d5 04       	cpc	r13, r5
    a3ba:	e6 04       	cpc	r14, r6
    a3bc:	f7 04       	cpc	r15, r7
    a3be:	10 f1       	brcs	.+68     	; 0xa404 <dir_sdi+0x114>
    a3c0:	88 81       	ld	r24, Y
    a3c2:	99 81       	ldd	r25, Y+1	; 0x01
    a3c4:	e1 de       	rcall	.-574    	; 0xa188 <get_fat.isra.10>
    a3c6:	4b 01       	movw	r8, r22
    a3c8:	5c 01       	movw	r10, r24
    a3ca:	6f 3f       	cpi	r22, 0xFF	; 255
    a3cc:	7f 4f       	sbci	r23, 0xFF	; 255
    a3ce:	8f 4f       	sbci	r24, 0xFF	; 255
    a3d0:	9f 4f       	sbci	r25, 0xFF	; 255
    a3d2:	09 f4       	brne	.+2      	; 0xa3d6 <dir_sdi+0xe6>
    a3d4:	47 c0       	rjmp	.+142    	; 0xa464 <dir_sdi+0x174>
    a3d6:	82 e0       	ldi	r24, 0x02	; 2
    a3d8:	88 16       	cp	r8, r24
    a3da:	91 04       	cpc	r9, r1
    a3dc:	a1 04       	cpc	r10, r1
    a3de:	b1 04       	cpc	r11, r1
    a3e0:	08 f4       	brcc	.+2      	; 0xa3e4 <dir_sdi+0xf4>
    a3e2:	95 cf       	rjmp	.-214    	; 0xa30e <dir_sdi+0x1e>
    a3e4:	f8 01       	movw	r30, r16
    a3e6:	81 8d       	ldd	r24, Z+25	; 0x19
    a3e8:	92 8d       	ldd	r25, Z+26	; 0x1a
    a3ea:	a3 8d       	ldd	r26, Z+27	; 0x1b
    a3ec:	b4 8d       	ldd	r27, Z+28	; 0x1c
    a3ee:	88 16       	cp	r8, r24
    a3f0:	99 06       	cpc	r9, r25
    a3f2:	aa 06       	cpc	r10, r26
    a3f4:	bb 06       	cpc	r11, r27
    a3f6:	08 f0       	brcs	.+2      	; 0xa3fa <dir_sdi+0x10a>
    a3f8:	8a cf       	rjmp	.-236    	; 0xa30e <dir_sdi+0x1e>
    a3fa:	c4 18       	sub	r12, r4
    a3fc:	d5 08       	sbc	r13, r5
    a3fe:	e6 08       	sbc	r14, r6
    a400:	f7 08       	sbc	r15, r7
    a402:	d7 cf       	rjmp	.-82     	; 0xa3b2 <dir_sdi+0xc2>
    a404:	c8 01       	movw	r24, r16
    a406:	0e 94 bd 48 	call	0x917a	; 0x917a <clst2sect>
    a40a:	6e 8b       	std	Y+22, r22	; 0x16
    a40c:	7f 8b       	std	Y+23, r23	; 0x17
    a40e:	88 8f       	std	Y+24, r24	; 0x18
    a410:	99 8f       	std	Y+25, r25	; 0x19
    a412:	8a 8a       	std	Y+18, r8	; 0x12
    a414:	9b 8a       	std	Y+19, r9	; 0x13
    a416:	ac 8a       	std	Y+20, r10	; 0x14
    a418:	bd 8a       	std	Y+21, r11	; 0x15
    a41a:	8e 89       	ldd	r24, Y+22	; 0x16
    a41c:	9f 89       	ldd	r25, Y+23	; 0x17
    a41e:	a8 8d       	ldd	r26, Y+24	; 0x18
    a420:	b9 8d       	ldd	r27, Y+25	; 0x19
    a422:	00 97       	sbiw	r24, 0x00	; 0
    a424:	a1 05       	cpc	r26, r1
    a426:	b1 05       	cpc	r27, r1
    a428:	09 f4       	brne	.+2      	; 0xa42c <dir_sdi+0x13c>
    a42a:	71 cf       	rjmp	.-286    	; 0xa30e <dir_sdi+0x1e>
    a42c:	b7 01       	movw	r22, r14
    a42e:	a6 01       	movw	r20, r12
    a430:	29 e0       	ldi	r18, 0x09	; 9
    a432:	76 95       	lsr	r23
    a434:	67 95       	ror	r22
    a436:	57 95       	ror	r21
    a438:	47 95       	ror	r20
    a43a:	2a 95       	dec	r18
    a43c:	d1 f7       	brne	.-12     	; 0xa432 <dir_sdi+0x142>
    a43e:	84 0f       	add	r24, r20
    a440:	95 1f       	adc	r25, r21
    a442:	a6 1f       	adc	r26, r22
    a444:	b7 1f       	adc	r27, r23
    a446:	8e 8b       	std	Y+22, r24	; 0x16
    a448:	9f 8b       	std	Y+23, r25	; 0x17
    a44a:	a8 8f       	std	Y+24, r26	; 0x18
    a44c:	b9 8f       	std	Y+25, r27	; 0x19
    a44e:	0b 5c       	subi	r16, 0xCB	; 203
    a450:	1f 4f       	sbci	r17, 0xFF	; 255
    a452:	f1 e0       	ldi	r31, 0x01	; 1
    a454:	df 22       	and	r13, r31
    a456:	c0 0e       	add	r12, r16
    a458:	d1 1e       	adc	r13, r17
    a45a:	db 8e       	std	Y+27, r13	; 0x1b
    a45c:	ca 8e       	std	Y+26, r12	; 0x1a
    a45e:	80 e0       	ldi	r24, 0x00	; 0
    a460:	90 e0       	ldi	r25, 0x00	; 0
    a462:	02 c0       	rjmp	.+4      	; 0xa468 <dir_sdi+0x178>
    a464:	81 e0       	ldi	r24, 0x01	; 1
    a466:	90 e0       	ldi	r25, 0x00	; 0
    a468:	cd b7       	in	r28, 0x3d	; 61
    a46a:	de b7       	in	r29, 0x3e	; 62
    a46c:	e0 e1       	ldi	r30, 0x10	; 16
    a46e:	0c 94 11 e6 	jmp	0x1cc22	; 0x1cc22 <__epilogue_restores__+0x4>

0000a472 <create_chain>:
    a472:	a0 e0       	ldi	r26, 0x00	; 0
    a474:	b0 e0       	ldi	r27, 0x00	; 0
    a476:	ef e3       	ldi	r30, 0x3F	; 63
    a478:	f2 e5       	ldi	r31, 0x52	; 82
    a47a:	0c 94 f5 e5 	jmp	0x1cbea	; 0x1cbea <__prologue_saves__+0x4>
    a47e:	8c 01       	movw	r16, r24
    a480:	2a 01       	movw	r4, r20
    a482:	3b 01       	movw	r6, r22
    a484:	fc 01       	movw	r30, r24
    a486:	c0 81       	ld	r28, Z
    a488:	d1 81       	ldd	r29, Z+1	; 0x01
    a48a:	41 15       	cp	r20, r1
    a48c:	51 05       	cpc	r21, r1
    a48e:	61 05       	cpc	r22, r1
    a490:	71 05       	cpc	r23, r1
    a492:	99 f4       	brne	.+38     	; 0xa4ba <create_chain+0x48>
    a494:	8d 84       	ldd	r8, Y+13	; 0x0d
    a496:	9e 84       	ldd	r9, Y+14	; 0x0e
    a498:	af 84       	ldd	r10, Y+15	; 0x0f
    a49a:	b8 88       	ldd	r11, Y+16	; 0x10
    a49c:	81 14       	cp	r8, r1
    a49e:	91 04       	cpc	r9, r1
    a4a0:	a1 04       	cpc	r10, r1
    a4a2:	b1 04       	cpc	r11, r1
    a4a4:	51 f1       	breq	.+84     	; 0xa4fa <create_chain+0x88>
    a4a6:	89 8d       	ldd	r24, Y+25	; 0x19
    a4a8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a4aa:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a4ac:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a4ae:	88 16       	cp	r8, r24
    a4b0:	99 06       	cpc	r9, r25
    a4b2:	aa 06       	cpc	r10, r26
    a4b4:	bb 06       	cpc	r11, r27
    a4b6:	28 f1       	brcs	.+74     	; 0xa502 <create_chain+0x90>
    a4b8:	20 c0       	rjmp	.+64     	; 0xa4fa <create_chain+0x88>
    a4ba:	ce 01       	movw	r24, r28
    a4bc:	65 de       	rcall	.-822    	; 0xa188 <get_fat.isra.10>
    a4be:	62 30       	cpi	r22, 0x02	; 2
    a4c0:	71 05       	cpc	r23, r1
    a4c2:	81 05       	cpc	r24, r1
    a4c4:	91 05       	cpc	r25, r1
    a4c6:	08 f4       	brcc	.+2      	; 0xa4ca <create_chain+0x58>
    a4c8:	ea c0       	rjmp	.+468    	; 0xa69e <create_chain+0x22c>
    a4ca:	6f 3f       	cpi	r22, 0xFF	; 255
    a4cc:	ff ef       	ldi	r31, 0xFF	; 255
    a4ce:	7f 07       	cpc	r23, r31
    a4d0:	8f 07       	cpc	r24, r31
    a4d2:	9f 07       	cpc	r25, r31
    a4d4:	29 f4       	brne	.+10     	; 0xa4e0 <create_chain+0x6e>
    a4d6:	4f ef       	ldi	r20, 0xFF	; 255
    a4d8:	3f ef       	ldi	r19, 0xFF	; 255
    a4da:	2f ef       	ldi	r18, 0xFF	; 255
    a4dc:	9f ef       	ldi	r25, 0xFF	; 255
    a4de:	e7 c0       	rjmp	.+462    	; 0xa6ae <create_chain+0x23c>
    a4e0:	c9 8c       	ldd	r12, Y+25	; 0x19
    a4e2:	da 8c       	ldd	r13, Y+26	; 0x1a
    a4e4:	eb 8c       	ldd	r14, Y+27	; 0x1b
    a4e6:	fc 8c       	ldd	r15, Y+28	; 0x1c
    a4e8:	6c 15       	cp	r22, r12
    a4ea:	7d 05       	cpc	r23, r13
    a4ec:	8e 05       	cpc	r24, r14
    a4ee:	9f 05       	cpc	r25, r15
    a4f0:	08 f4       	brcc	.+2      	; 0xa4f4 <create_chain+0x82>
    a4f2:	da c0       	rjmp	.+436    	; 0xa6a8 <create_chain+0x236>
    a4f4:	53 01       	movw	r10, r6
    a4f6:	42 01       	movw	r8, r4
    a4f8:	04 c0       	rjmp	.+8      	; 0xa502 <create_chain+0x90>
    a4fa:	81 2c       	mov	r8, r1
    a4fc:	91 2c       	mov	r9, r1
    a4fe:	54 01       	movw	r10, r8
    a500:	83 94       	inc	r8
    a502:	89 89       	ldd	r24, Y+17	; 0x11
    a504:	9a 89       	ldd	r25, Y+18	; 0x12
    a506:	ab 89       	ldd	r26, Y+19	; 0x13
    a508:	bc 89       	ldd	r27, Y+20	; 0x14
    a50a:	89 2b       	or	r24, r25
    a50c:	8a 2b       	or	r24, r26
    a50e:	8b 2b       	or	r24, r27
    a510:	11 f4       	brne	.+4      	; 0xa516 <create_chain+0xa4>
    a512:	40 e0       	ldi	r20, 0x00	; 0
    a514:	c5 c0       	rjmp	.+394    	; 0xa6a0 <create_chain+0x22e>
    a516:	84 14       	cp	r8, r4
    a518:	95 04       	cpc	r9, r5
    a51a:	a6 04       	cpc	r10, r6
    a51c:	b7 04       	cpc	r11, r7
    a51e:	09 f0       	breq	.+2      	; 0xa522 <create_chain+0xb0>
    a520:	46 c0       	rjmp	.+140    	; 0xa5ae <create_chain+0x13c>
    a522:	75 01       	movw	r14, r10
    a524:	64 01       	movw	r12, r8
    a526:	2f ef       	ldi	r18, 0xFF	; 255
    a528:	c2 1a       	sub	r12, r18
    a52a:	d2 0a       	sbc	r13, r18
    a52c:	e2 0a       	sbc	r14, r18
    a52e:	f2 0a       	sbc	r15, r18
    a530:	89 8d       	ldd	r24, Y+25	; 0x19
    a532:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a534:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a536:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a538:	c8 16       	cp	r12, r24
    a53a:	d9 06       	cpc	r13, r25
    a53c:	ea 06       	cpc	r14, r26
    a53e:	fb 06       	cpc	r15, r27
    a540:	28 f0       	brcs	.+10     	; 0xa54c <create_chain+0xda>
    a542:	92 e0       	ldi	r25, 0x02	; 2
    a544:	c9 2e       	mov	r12, r25
    a546:	d1 2c       	mov	r13, r1
    a548:	e1 2c       	mov	r14, r1
    a54a:	f1 2c       	mov	r15, r1
    a54c:	b7 01       	movw	r22, r14
    a54e:	a6 01       	movw	r20, r12
    a550:	f8 01       	movw	r30, r16
    a552:	80 81       	ld	r24, Z
    a554:	91 81       	ldd	r25, Z+1	; 0x01
    a556:	18 de       	rcall	.-976    	; 0xa188 <get_fat.isra.10>
    a558:	61 30       	cpi	r22, 0x01	; 1
    a55a:	71 05       	cpc	r23, r1
    a55c:	81 05       	cpc	r24, r1
    a55e:	91 05       	cpc	r25, r1
    a560:	09 f4       	brne	.+2      	; 0xa564 <create_chain+0xf2>
    a562:	9d c0       	rjmp	.+314    	; 0xa69e <create_chain+0x22c>
    a564:	6f 3f       	cpi	r22, 0xFF	; 255
    a566:	ff ef       	ldi	r31, 0xFF	; 255
    a568:	7f 07       	cpc	r23, r31
    a56a:	8f 07       	cpc	r24, r31
    a56c:	9f 07       	cpc	r25, r31
    a56e:	09 f4       	brne	.+2      	; 0xa572 <create_chain+0x100>
    a570:	b2 cf       	rjmp	.-156    	; 0xa4d6 <create_chain+0x64>
    a572:	67 2b       	or	r22, r23
    a574:	68 2b       	or	r22, r24
    a576:	69 2b       	or	r22, r25
    a578:	a9 f0       	breq	.+42     	; 0xa5a4 <create_chain+0x132>
    a57a:	8d 85       	ldd	r24, Y+13	; 0x0d
    a57c:	9e 85       	ldd	r25, Y+14	; 0x0e
    a57e:	af 85       	ldd	r26, Y+15	; 0x0f
    a580:	b8 89       	ldd	r27, Y+16	; 0x10
    a582:	82 30       	cpi	r24, 0x02	; 2
    a584:	91 05       	cpc	r25, r1
    a586:	a1 05       	cpc	r26, r1
    a588:	b1 05       	cpc	r27, r1
    a58a:	88 f0       	brcs	.+34     	; 0xa5ae <create_chain+0x13c>
    a58c:	49 8d       	ldd	r20, Y+25	; 0x19
    a58e:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a590:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a592:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a594:	84 17       	cp	r24, r20
    a596:	95 07       	cpc	r25, r21
    a598:	a6 07       	cpc	r26, r22
    a59a:	b7 07       	cpc	r27, r23
    a59c:	40 f4       	brcc	.+16     	; 0xa5ae <create_chain+0x13c>
    a59e:	4c 01       	movw	r8, r24
    a5a0:	5d 01       	movw	r10, r26
    a5a2:	05 c0       	rjmp	.+10     	; 0xa5ae <create_chain+0x13c>
    a5a4:	c1 14       	cp	r12, r1
    a5a6:	d1 04       	cpc	r13, r1
    a5a8:	e1 04       	cpc	r14, r1
    a5aa:	f1 04       	cpc	r15, r1
    a5ac:	c9 f5       	brne	.+114    	; 0xa620 <create_chain+0x1ae>
    a5ae:	75 01       	movw	r14, r10
    a5b0:	64 01       	movw	r12, r8
    a5b2:	2f ef       	ldi	r18, 0xFF	; 255
    a5b4:	c2 1a       	sub	r12, r18
    a5b6:	d2 0a       	sbc	r13, r18
    a5b8:	e2 0a       	sbc	r14, r18
    a5ba:	f2 0a       	sbc	r15, r18
    a5bc:	89 8d       	ldd	r24, Y+25	; 0x19
    a5be:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a5c0:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a5c2:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a5c4:	c8 16       	cp	r12, r24
    a5c6:	d9 06       	cpc	r13, r25
    a5c8:	ea 06       	cpc	r14, r26
    a5ca:	fb 06       	cpc	r15, r27
    a5cc:	60 f0       	brcs	.+24     	; 0xa5e6 <create_chain+0x174>
    a5ce:	82 e0       	ldi	r24, 0x02	; 2
    a5d0:	88 16       	cp	r8, r24
    a5d2:	91 04       	cpc	r9, r1
    a5d4:	a1 04       	cpc	r10, r1
    a5d6:	b1 04       	cpc	r11, r1
    a5d8:	08 f4       	brcc	.+2      	; 0xa5dc <create_chain+0x16a>
    a5da:	9b cf       	rjmp	.-202    	; 0xa512 <create_chain+0xa0>
    a5dc:	82 e0       	ldi	r24, 0x02	; 2
    a5de:	c8 2e       	mov	r12, r24
    a5e0:	d1 2c       	mov	r13, r1
    a5e2:	e1 2c       	mov	r14, r1
    a5e4:	f1 2c       	mov	r15, r1
    a5e6:	b7 01       	movw	r22, r14
    a5e8:	a6 01       	movw	r20, r12
    a5ea:	f8 01       	movw	r30, r16
    a5ec:	80 81       	ld	r24, Z
    a5ee:	91 81       	ldd	r25, Z+1	; 0x01
    a5f0:	cb dd       	rcall	.-1130   	; 0xa188 <get_fat.isra.10>
    a5f2:	61 15       	cp	r22, r1
    a5f4:	71 05       	cpc	r23, r1
    a5f6:	81 05       	cpc	r24, r1
    a5f8:	91 05       	cpc	r25, r1
    a5fa:	91 f0       	breq	.+36     	; 0xa620 <create_chain+0x1ae>
    a5fc:	61 30       	cpi	r22, 0x01	; 1
    a5fe:	71 05       	cpc	r23, r1
    a600:	81 05       	cpc	r24, r1
    a602:	91 05       	cpc	r25, r1
    a604:	09 f4       	brne	.+2      	; 0xa608 <create_chain+0x196>
    a606:	4b c0       	rjmp	.+150    	; 0xa69e <create_chain+0x22c>
    a608:	6f 3f       	cpi	r22, 0xFF	; 255
    a60a:	7f 4f       	sbci	r23, 0xFF	; 255
    a60c:	8f 4f       	sbci	r24, 0xFF	; 255
    a60e:	9f 4f       	sbci	r25, 0xFF	; 255
    a610:	09 f4       	brne	.+2      	; 0xa614 <create_chain+0x1a2>
    a612:	61 cf       	rjmp	.-318    	; 0xa4d6 <create_chain+0x64>
    a614:	c8 14       	cp	r12, r8
    a616:	d9 04       	cpc	r13, r9
    a618:	ea 04       	cpc	r14, r10
    a61a:	fb 04       	cpc	r15, r11
    a61c:	51 f6       	brne	.-108    	; 0xa5b2 <create_chain+0x140>
    a61e:	79 cf       	rjmp	.-270    	; 0xa512 <create_chain+0xa0>
    a620:	0f ef       	ldi	r16, 0xFF	; 255
    a622:	1f ef       	ldi	r17, 0xFF	; 255
    a624:	98 01       	movw	r18, r16
    a626:	b7 01       	movw	r22, r14
    a628:	a6 01       	movw	r20, r12
    a62a:	ce 01       	movw	r24, r28
    a62c:	ae dc       	rcall	.-1700   	; 0x9f8a <put_fat>
    a62e:	00 97       	sbiw	r24, 0x00	; 0
    a630:	99 f5       	brne	.+102    	; 0xa698 <create_chain+0x226>
    a632:	41 14       	cp	r4, r1
    a634:	51 04       	cpc	r5, r1
    a636:	61 04       	cpc	r6, r1
    a638:	71 04       	cpc	r7, r1
    a63a:	e9 f4       	brne	.+58     	; 0xa676 <create_chain+0x204>
    a63c:	cd 86       	std	Y+13, r12	; 0x0d
    a63e:	de 86       	std	Y+14, r13	; 0x0e
    a640:	ef 86       	std	Y+15, r14	; 0x0f
    a642:	f8 8a       	std	Y+16, r15	; 0x10
    a644:	89 89       	ldd	r24, Y+17	; 0x11
    a646:	9a 89       	ldd	r25, Y+18	; 0x12
    a648:	ab 89       	ldd	r26, Y+19	; 0x13
    a64a:	bc 89       	ldd	r27, Y+20	; 0x14
    a64c:	49 8d       	ldd	r20, Y+25	; 0x19
    a64e:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a650:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a652:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a654:	42 50       	subi	r20, 0x02	; 2
    a656:	51 09       	sbc	r21, r1
    a658:	61 09       	sbc	r22, r1
    a65a:	71 09       	sbc	r23, r1
    a65c:	48 17       	cp	r20, r24
    a65e:	59 07       	cpc	r21, r25
    a660:	6a 07       	cpc	r22, r26
    a662:	7b 07       	cpc	r23, r27
    a664:	88 f0       	brcs	.+34     	; 0xa688 <create_chain+0x216>
    a666:	01 97       	sbiw	r24, 0x01	; 1
    a668:	a1 09       	sbc	r26, r1
    a66a:	b1 09       	sbc	r27, r1
    a66c:	89 8b       	std	Y+17, r24	; 0x11
    a66e:	9a 8b       	std	Y+18, r25	; 0x12
    a670:	ab 8b       	std	Y+19, r26	; 0x13
    a672:	bc 8b       	std	Y+20, r27	; 0x14
    a674:	09 c0       	rjmp	.+18     	; 0xa688 <create_chain+0x216>
    a676:	97 01       	movw	r18, r14
    a678:	86 01       	movw	r16, r12
    a67a:	b3 01       	movw	r22, r6
    a67c:	a2 01       	movw	r20, r4
    a67e:	ce 01       	movw	r24, r28
    a680:	84 dc       	rcall	.-1784   	; 0x9f8a <put_fat>
    a682:	00 97       	sbiw	r24, 0x00	; 0
    a684:	d9 f2       	breq	.-74     	; 0xa63c <create_chain+0x1ca>
    a686:	08 c0       	rjmp	.+16     	; 0xa698 <create_chain+0x226>
    a688:	8c 81       	ldd	r24, Y+4	; 0x04
    a68a:	81 60       	ori	r24, 0x01	; 1
    a68c:	8c 83       	std	Y+4, r24	; 0x04
    a68e:	4c 2d       	mov	r20, r12
    a690:	3d 2d       	mov	r19, r13
    a692:	2e 2d       	mov	r18, r14
    a694:	9f 2d       	mov	r25, r15
    a696:	0b c0       	rjmp	.+22     	; 0xa6ae <create_chain+0x23c>
    a698:	01 97       	sbiw	r24, 0x01	; 1
    a69a:	09 f4       	brne	.+2      	; 0xa69e <create_chain+0x22c>
    a69c:	1c cf       	rjmp	.-456    	; 0xa4d6 <create_chain+0x64>
    a69e:	41 e0       	ldi	r20, 0x01	; 1
    a6a0:	30 e0       	ldi	r19, 0x00	; 0
    a6a2:	20 e0       	ldi	r18, 0x00	; 0
    a6a4:	90 e0       	ldi	r25, 0x00	; 0
    a6a6:	03 c0       	rjmp	.+6      	; 0xa6ae <create_chain+0x23c>
    a6a8:	46 2f       	mov	r20, r22
    a6aa:	37 2f       	mov	r19, r23
    a6ac:	28 2f       	mov	r18, r24
    a6ae:	64 2f       	mov	r22, r20
    a6b0:	73 2f       	mov	r23, r19
    a6b2:	82 2f       	mov	r24, r18
    a6b4:	cd b7       	in	r28, 0x3d	; 61
    a6b6:	de b7       	in	r29, 0x3e	; 62
    a6b8:	e0 e1       	ldi	r30, 0x10	; 16
    a6ba:	0c 94 11 e6 	jmp	0x1cc22	; 0x1cc22 <__epilogue_restores__+0x4>

0000a6be <remove_chain>:
    a6be:	4f 92       	push	r4
    a6c0:	5f 92       	push	r5
    a6c2:	6f 92       	push	r6
    a6c4:	7f 92       	push	r7
    a6c6:	af 92       	push	r10
    a6c8:	bf 92       	push	r11
    a6ca:	cf 92       	push	r12
    a6cc:	df 92       	push	r13
    a6ce:	ef 92       	push	r14
    a6d0:	ff 92       	push	r15
    a6d2:	0f 93       	push	r16
    a6d4:	1f 93       	push	r17
    a6d6:	cf 93       	push	r28
    a6d8:	df 93       	push	r29
    a6da:	5c 01       	movw	r10, r24
    a6dc:	6a 01       	movw	r12, r20
    a6de:	7b 01       	movw	r14, r22
    a6e0:	b9 01       	movw	r22, r18
    a6e2:	a8 01       	movw	r20, r16
    a6e4:	22 e0       	ldi	r18, 0x02	; 2
    a6e6:	c2 16       	cp	r12, r18
    a6e8:	d1 04       	cpc	r13, r1
    a6ea:	e1 04       	cpc	r14, r1
    a6ec:	f1 04       	cpc	r15, r1
    a6ee:	10 f4       	brcc	.+4      	; 0xa6f4 <remove_chain+0x36>
    a6f0:	22 e0       	ldi	r18, 0x02	; 2
    a6f2:	27 c0       	rjmp	.+78     	; 0xa742 <remove_chain+0x84>
    a6f4:	fc 01       	movw	r30, r24
    a6f6:	c0 81       	ld	r28, Z
    a6f8:	d1 81       	ldd	r29, Z+1	; 0x01
    a6fa:	89 8d       	ldd	r24, Y+25	; 0x19
    a6fc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a6fe:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a700:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a702:	c8 16       	cp	r12, r24
    a704:	d9 06       	cpc	r13, r25
    a706:	ea 06       	cpc	r14, r26
    a708:	fb 06       	cpc	r15, r27
    a70a:	90 f7       	brcc	.-28     	; 0xa6f0 <remove_chain+0x32>
    a70c:	41 15       	cp	r20, r1
    a70e:	51 05       	cpc	r21, r1
    a710:	61 05       	cpc	r22, r1
    a712:	71 05       	cpc	r23, r1
    a714:	41 f0       	breq	.+16     	; 0xa726 <remove_chain+0x68>
    a716:	0f ef       	ldi	r16, 0xFF	; 255
    a718:	1f ef       	ldi	r17, 0xFF	; 255
    a71a:	98 01       	movw	r18, r16
    a71c:	ce 01       	movw	r24, r28
    a71e:	35 dc       	rcall	.-1942   	; 0x9f8a <put_fat>
    a720:	00 97       	sbiw	r24, 0x00	; 0
    a722:	09 f0       	breq	.+2      	; 0xa726 <remove_chain+0x68>
    a724:	4c c0       	rjmp	.+152    	; 0xa7be <remove_chain+0x100>
    a726:	b7 01       	movw	r22, r14
    a728:	a6 01       	movw	r20, r12
    a72a:	f5 01       	movw	r30, r10
    a72c:	80 81       	ld	r24, Z
    a72e:	91 81       	ldd	r25, Z+1	; 0x01
    a730:	2b dd       	rcall	.-1450   	; 0xa188 <get_fat.isra.10>
    a732:	2b 01       	movw	r4, r22
    a734:	3c 01       	movw	r6, r24
    a736:	61 15       	cp	r22, r1
    a738:	71 05       	cpc	r23, r1
    a73a:	81 05       	cpc	r24, r1
    a73c:	91 05       	cpc	r25, r1
    a73e:	19 f4       	brne	.+6      	; 0xa746 <remove_chain+0x88>
    a740:	20 e0       	ldi	r18, 0x00	; 0
    a742:	90 e0       	ldi	r25, 0x00	; 0
    a744:	3d c0       	rjmp	.+122    	; 0xa7c0 <remove_chain+0x102>
    a746:	61 30       	cpi	r22, 0x01	; 1
    a748:	71 05       	cpc	r23, r1
    a74a:	81 05       	cpc	r24, r1
    a74c:	91 05       	cpc	r25, r1
    a74e:	81 f2       	breq	.-96     	; 0xa6f0 <remove_chain+0x32>
    a750:	6f 3f       	cpi	r22, 0xFF	; 255
    a752:	7f 4f       	sbci	r23, 0xFF	; 255
    a754:	8f 4f       	sbci	r24, 0xFF	; 255
    a756:	9f 4f       	sbci	r25, 0xFF	; 255
    a758:	81 f1       	breq	.+96     	; 0xa7ba <remove_chain+0xfc>
    a75a:	00 e0       	ldi	r16, 0x00	; 0
    a75c:	10 e0       	ldi	r17, 0x00	; 0
    a75e:	98 01       	movw	r18, r16
    a760:	b7 01       	movw	r22, r14
    a762:	a6 01       	movw	r20, r12
    a764:	ce 01       	movw	r24, r28
    a766:	11 dc       	rcall	.-2014   	; 0x9f8a <put_fat>
    a768:	00 97       	sbiw	r24, 0x00	; 0
    a76a:	49 f5       	brne	.+82     	; 0xa7be <remove_chain+0x100>
    a76c:	89 89       	ldd	r24, Y+17	; 0x11
    a76e:	9a 89       	ldd	r25, Y+18	; 0x12
    a770:	ab 89       	ldd	r26, Y+19	; 0x13
    a772:	bc 89       	ldd	r27, Y+20	; 0x14
    a774:	49 8d       	ldd	r20, Y+25	; 0x19
    a776:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a778:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a77a:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a77c:	6a 01       	movw	r12, r20
    a77e:	7b 01       	movw	r14, r22
    a780:	e2 e0       	ldi	r30, 0x02	; 2
    a782:	ce 1a       	sub	r12, r30
    a784:	d1 08       	sbc	r13, r1
    a786:	e1 08       	sbc	r14, r1
    a788:	f1 08       	sbc	r15, r1
    a78a:	8c 15       	cp	r24, r12
    a78c:	9d 05       	cpc	r25, r13
    a78e:	ae 05       	cpc	r26, r14
    a790:	bf 05       	cpc	r27, r15
    a792:	50 f4       	brcc	.+20     	; 0xa7a8 <remove_chain+0xea>
    a794:	01 96       	adiw	r24, 0x01	; 1
    a796:	a1 1d       	adc	r26, r1
    a798:	b1 1d       	adc	r27, r1
    a79a:	89 8b       	std	Y+17, r24	; 0x11
    a79c:	9a 8b       	std	Y+18, r25	; 0x12
    a79e:	ab 8b       	std	Y+19, r26	; 0x13
    a7a0:	bc 8b       	std	Y+20, r27	; 0x14
    a7a2:	8c 81       	ldd	r24, Y+4	; 0x04
    a7a4:	81 60       	ori	r24, 0x01	; 1
    a7a6:	8c 83       	std	Y+4, r24	; 0x04
    a7a8:	73 01       	movw	r14, r6
    a7aa:	62 01       	movw	r12, r4
    a7ac:	44 16       	cp	r4, r20
    a7ae:	55 06       	cpc	r5, r21
    a7b0:	66 06       	cpc	r6, r22
    a7b2:	77 06       	cpc	r7, r23
    a7b4:	08 f4       	brcc	.+2      	; 0xa7b8 <remove_chain+0xfa>
    a7b6:	b7 cf       	rjmp	.-146    	; 0xa726 <remove_chain+0x68>
    a7b8:	c3 cf       	rjmp	.-122    	; 0xa740 <remove_chain+0x82>
    a7ba:	21 e0       	ldi	r18, 0x01	; 1
    a7bc:	c2 cf       	rjmp	.-124    	; 0xa742 <remove_chain+0x84>
    a7be:	28 2f       	mov	r18, r24
    a7c0:	82 2f       	mov	r24, r18
    a7c2:	df 91       	pop	r29
    a7c4:	cf 91       	pop	r28
    a7c6:	1f 91       	pop	r17
    a7c8:	0f 91       	pop	r16
    a7ca:	ff 90       	pop	r15
    a7cc:	ef 90       	pop	r14
    a7ce:	df 90       	pop	r13
    a7d0:	cf 90       	pop	r12
    a7d2:	bf 90       	pop	r11
    a7d4:	af 90       	pop	r10
    a7d6:	7f 90       	pop	r7
    a7d8:	6f 90       	pop	r6
    a7da:	5f 90       	pop	r5
    a7dc:	4f 90       	pop	r4
    a7de:	08 95       	ret

0000a7e0 <dir_next>:
    a7e0:	4f 92       	push	r4
    a7e2:	5f 92       	push	r5
    a7e4:	6f 92       	push	r6
    a7e6:	7f 92       	push	r7
    a7e8:	af 92       	push	r10
    a7ea:	bf 92       	push	r11
    a7ec:	cf 92       	push	r12
    a7ee:	df 92       	push	r13
    a7f0:	ef 92       	push	r14
    a7f2:	ff 92       	push	r15
    a7f4:	0f 93       	push	r16
    a7f6:	1f 93       	push	r17
    a7f8:	cf 93       	push	r28
    a7fa:	df 93       	push	r29
    a7fc:	ec 01       	movw	r28, r24
    a7fe:	08 81       	ld	r16, Y
    a800:	19 81       	ldd	r17, Y+1	; 0x01
    a802:	ce 84       	ldd	r12, Y+14	; 0x0e
    a804:	df 84       	ldd	r13, Y+15	; 0x0f
    a806:	e8 88       	ldd	r14, Y+16	; 0x10
    a808:	f9 88       	ldd	r15, Y+17	; 0x11
    a80a:	80 e2       	ldi	r24, 0x20	; 32
    a80c:	c8 0e       	add	r12, r24
    a80e:	d1 1c       	adc	r13, r1
    a810:	e1 1c       	adc	r14, r1
    a812:	f1 1c       	adc	r15, r1
    a814:	c1 14       	cp	r12, r1
    a816:	d1 04       	cpc	r13, r1
    a818:	e0 e2       	ldi	r30, 0x20	; 32
    a81a:	ee 06       	cpc	r14, r30
    a81c:	f1 04       	cpc	r15, r1
    a81e:	20 f0       	brcs	.+8      	; 0xa828 <dir_next+0x48>
    a820:	1e 8a       	std	Y+22, r1	; 0x16
    a822:	1f 8a       	std	Y+23, r1	; 0x17
    a824:	18 8e       	std	Y+24, r1	; 0x18
    a826:	19 8e       	std	Y+25, r1	; 0x19
    a828:	8e 89       	ldd	r24, Y+22	; 0x16
    a82a:	9f 89       	ldd	r25, Y+23	; 0x17
    a82c:	a8 8d       	ldd	r26, Y+24	; 0x18
    a82e:	b9 8d       	ldd	r27, Y+25	; 0x19
    a830:	00 97       	sbiw	r24, 0x00	; 0
    a832:	a1 05       	cpc	r26, r1
    a834:	b1 05       	cpc	r27, r1
    a836:	09 f4       	brne	.+2      	; 0xa83a <dir_next+0x5a>
    a838:	a7 c0       	rjmp	.+334    	; 0xa988 <dir_next+0x1a8>
    a83a:	5b 01       	movw	r10, r22
    a83c:	b7 01       	movw	r22, r14
    a83e:	a6 01       	movw	r20, r12
    a840:	51 70       	andi	r21, 0x01	; 1
    a842:	66 27       	eor	r22, r22
    a844:	77 27       	eor	r23, r23
    a846:	45 2b       	or	r20, r21
    a848:	46 2b       	or	r20, r22
    a84a:	47 2b       	or	r20, r23
    a84c:	09 f0       	breq	.+2      	; 0xa850 <dir_next+0x70>
    a84e:	8d c0       	rjmp	.+282    	; 0xa96a <dir_next+0x18a>
    a850:	01 96       	adiw	r24, 0x01	; 1
    a852:	a1 1d       	adc	r26, r1
    a854:	b1 1d       	adc	r27, r1
    a856:	8e 8b       	std	Y+22, r24	; 0x16
    a858:	9f 8b       	std	Y+23, r25	; 0x17
    a85a:	a8 8f       	std	Y+24, r26	; 0x18
    a85c:	b9 8f       	std	Y+25, r27	; 0x19
    a85e:	4a 89       	ldd	r20, Y+18	; 0x12
    a860:	5b 89       	ldd	r21, Y+19	; 0x13
    a862:	6c 89       	ldd	r22, Y+20	; 0x14
    a864:	7d 89       	ldd	r23, Y+21	; 0x15
    a866:	f8 01       	movw	r30, r16
    a868:	41 15       	cp	r20, r1
    a86a:	51 05       	cpc	r21, r1
    a86c:	61 05       	cpc	r22, r1
    a86e:	71 05       	cpc	r23, r1
    a870:	c1 f4       	brne	.+48     	; 0xa8a2 <dir_next+0xc2>
    a872:	87 81       	ldd	r24, Z+7	; 0x07
    a874:	90 85       	ldd	r25, Z+8	; 0x08
    a876:	a0 e0       	ldi	r26, 0x00	; 0
    a878:	b0 e0       	ldi	r27, 0x00	; 0
    a87a:	b7 01       	movw	r22, r14
    a87c:	a6 01       	movw	r20, r12
    a87e:	35 e0       	ldi	r19, 0x05	; 5
    a880:	76 95       	lsr	r23
    a882:	67 95       	ror	r22
    a884:	57 95       	ror	r21
    a886:	47 95       	ror	r20
    a888:	3a 95       	dec	r19
    a88a:	d1 f7       	brne	.-12     	; 0xa880 <dir_next+0xa0>
    a88c:	48 17       	cp	r20, r24
    a88e:	59 07       	cpc	r21, r25
    a890:	6a 07       	cpc	r22, r26
    a892:	7b 07       	cpc	r23, r27
    a894:	08 f4       	brcc	.+2      	; 0xa898 <dir_next+0xb8>
    a896:	69 c0       	rjmp	.+210    	; 0xa96a <dir_next+0x18a>
    a898:	1e 8a       	std	Y+22, r1	; 0x16
    a89a:	1f 8a       	std	Y+23, r1	; 0x17
    a89c:	18 8e       	std	Y+24, r1	; 0x18
    a89e:	19 8e       	std	Y+25, r1	; 0x19
    a8a0:	73 c0       	rjmp	.+230    	; 0xa988 <dir_next+0x1a8>
    a8a2:	81 85       	ldd	r24, Z+9	; 0x09
    a8a4:	92 85       	ldd	r25, Z+10	; 0x0a
    a8a6:	01 97       	sbiw	r24, 0x01	; 1
    a8a8:	a0 e0       	ldi	r26, 0x00	; 0
    a8aa:	b0 e0       	ldi	r27, 0x00	; 0
    a8ac:	26 01       	movw	r4, r12
    a8ae:	37 01       	movw	r6, r14
    a8b0:	29 e0       	ldi	r18, 0x09	; 9
    a8b2:	76 94       	lsr	r7
    a8b4:	67 94       	ror	r6
    a8b6:	57 94       	ror	r5
    a8b8:	47 94       	ror	r4
    a8ba:	2a 95       	dec	r18
    a8bc:	d1 f7       	brne	.-12     	; 0xa8b2 <dir_next+0xd2>
    a8be:	84 21       	and	r24, r4
    a8c0:	95 21       	and	r25, r5
    a8c2:	a6 21       	and	r26, r6
    a8c4:	b7 21       	and	r27, r7
    a8c6:	89 2b       	or	r24, r25
    a8c8:	8a 2b       	or	r24, r26
    a8ca:	8b 2b       	or	r24, r27
    a8cc:	09 f0       	breq	.+2      	; 0xa8d0 <dir_next+0xf0>
    a8ce:	4d c0       	rjmp	.+154    	; 0xa96a <dir_next+0x18a>
    a8d0:	c8 01       	movw	r24, r16
    a8d2:	5a dc       	rcall	.-1868   	; 0xa188 <get_fat.isra.10>
    a8d4:	2b 01       	movw	r4, r22
    a8d6:	3c 01       	movw	r6, r24
    a8d8:	62 30       	cpi	r22, 0x02	; 2
    a8da:	71 05       	cpc	r23, r1
    a8dc:	81 05       	cpc	r24, r1
    a8de:	91 05       	cpc	r25, r1
    a8e0:	18 f4       	brcc	.+6      	; 0xa8e8 <dir_next+0x108>
    a8e2:	82 e0       	ldi	r24, 0x02	; 2
    a8e4:	90 e0       	ldi	r25, 0x00	; 0
    a8e6:	55 c0       	rjmp	.+170    	; 0xa992 <dir_next+0x1b2>
    a8e8:	8f ef       	ldi	r24, 0xFF	; 255
    a8ea:	48 16       	cp	r4, r24
    a8ec:	58 06       	cpc	r5, r24
    a8ee:	68 06       	cpc	r6, r24
    a8f0:	78 06       	cpc	r7, r24
    a8f2:	19 f4       	brne	.+6      	; 0xa8fa <dir_next+0x11a>
    a8f4:	81 e0       	ldi	r24, 0x01	; 1
    a8f6:	90 e0       	ldi	r25, 0x00	; 0
    a8f8:	4c c0       	rjmp	.+152    	; 0xa992 <dir_next+0x1b2>
    a8fa:	f8 01       	movw	r30, r16
    a8fc:	81 8d       	ldd	r24, Z+25	; 0x19
    a8fe:	92 8d       	ldd	r25, Z+26	; 0x1a
    a900:	a3 8d       	ldd	r26, Z+27	; 0x1b
    a902:	b4 8d       	ldd	r27, Z+28	; 0x1c
    a904:	48 16       	cp	r4, r24
    a906:	59 06       	cpc	r5, r25
    a908:	6a 06       	cpc	r6, r26
    a90a:	7b 06       	cpc	r7, r27
    a90c:	08 f1       	brcs	.+66     	; 0xa950 <dir_next+0x170>
    a90e:	ab 28       	or	r10, r11
    a910:	19 f2       	breq	.-122    	; 0xa898 <dir_next+0xb8>
    a912:	4a 89       	ldd	r20, Y+18	; 0x12
    a914:	5b 89       	ldd	r21, Y+19	; 0x13
    a916:	6c 89       	ldd	r22, Y+20	; 0x14
    a918:	7d 89       	ldd	r23, Y+21	; 0x15
    a91a:	ce 01       	movw	r24, r28
    a91c:	aa dd       	rcall	.-1196   	; 0xa472 <create_chain>
    a91e:	2b 01       	movw	r4, r22
    a920:	3c 01       	movw	r6, r24
    a922:	61 15       	cp	r22, r1
    a924:	71 05       	cpc	r23, r1
    a926:	81 05       	cpc	r24, r1
    a928:	91 05       	cpc	r25, r1
    a92a:	89 f1       	breq	.+98     	; 0xa98e <dir_next+0x1ae>
    a92c:	61 30       	cpi	r22, 0x01	; 1
    a92e:	71 05       	cpc	r23, r1
    a930:	81 05       	cpc	r24, r1
    a932:	91 05       	cpc	r25, r1
    a934:	b1 f2       	breq	.-84     	; 0xa8e2 <dir_next+0x102>
    a936:	8f ef       	ldi	r24, 0xFF	; 255
    a938:	48 16       	cp	r4, r24
    a93a:	58 06       	cpc	r5, r24
    a93c:	68 06       	cpc	r6, r24
    a93e:	78 06       	cpc	r7, r24
    a940:	c9 f2       	breq	.-78     	; 0xa8f4 <dir_next+0x114>
    a942:	b3 01       	movw	r22, r6
    a944:	a2 01       	movw	r20, r4
    a946:	c8 01       	movw	r24, r16
    a948:	0e 94 40 4c 	call	0x9880	; 0x9880 <dir_clear>
    a94c:	89 2b       	or	r24, r25
    a94e:	91 f6       	brne	.-92     	; 0xa8f4 <dir_next+0x114>
    a950:	4a 8a       	std	Y+18, r4	; 0x12
    a952:	5b 8a       	std	Y+19, r5	; 0x13
    a954:	6c 8a       	std	Y+20, r6	; 0x14
    a956:	7d 8a       	std	Y+21, r7	; 0x15
    a958:	b3 01       	movw	r22, r6
    a95a:	a2 01       	movw	r20, r4
    a95c:	c8 01       	movw	r24, r16
    a95e:	0e 94 bd 48 	call	0x917a	; 0x917a <clst2sect>
    a962:	6e 8b       	std	Y+22, r22	; 0x16
    a964:	7f 8b       	std	Y+23, r23	; 0x17
    a966:	88 8f       	std	Y+24, r24	; 0x18
    a968:	99 8f       	std	Y+25, r25	; 0x19
    a96a:	ce 86       	std	Y+14, r12	; 0x0e
    a96c:	df 86       	std	Y+15, r13	; 0x0f
    a96e:	e8 8a       	std	Y+16, r14	; 0x10
    a970:	f9 8a       	std	Y+17, r15	; 0x11
    a972:	0b 5c       	subi	r16, 0xCB	; 203
    a974:	1f 4f       	sbci	r17, 0xFF	; 255
    a976:	e1 e0       	ldi	r30, 0x01	; 1
    a978:	de 22       	and	r13, r30
    a97a:	c0 0e       	add	r12, r16
    a97c:	d1 1e       	adc	r13, r17
    a97e:	db 8e       	std	Y+27, r13	; 0x1b
    a980:	ca 8e       	std	Y+26, r12	; 0x1a
    a982:	80 e0       	ldi	r24, 0x00	; 0
    a984:	90 e0       	ldi	r25, 0x00	; 0
    a986:	05 c0       	rjmp	.+10     	; 0xa992 <dir_next+0x1b2>
    a988:	84 e0       	ldi	r24, 0x04	; 4
    a98a:	90 e0       	ldi	r25, 0x00	; 0
    a98c:	02 c0       	rjmp	.+4      	; 0xa992 <dir_next+0x1b2>
    a98e:	87 e0       	ldi	r24, 0x07	; 7
    a990:	90 e0       	ldi	r25, 0x00	; 0
    a992:	df 91       	pop	r29
    a994:	cf 91       	pop	r28
    a996:	1f 91       	pop	r17
    a998:	0f 91       	pop	r16
    a99a:	ff 90       	pop	r15
    a99c:	ef 90       	pop	r14
    a99e:	df 90       	pop	r13
    a9a0:	cf 90       	pop	r12
    a9a2:	bf 90       	pop	r11
    a9a4:	af 90       	pop	r10
    a9a6:	7f 90       	pop	r7
    a9a8:	6f 90       	pop	r6
    a9aa:	5f 90       	pop	r5
    a9ac:	4f 90       	pop	r4
    a9ae:	08 95       	ret

0000a9b0 <dir_alloc>:
    a9b0:	a0 e0       	ldi	r26, 0x00	; 0
    a9b2:	b0 e0       	ldi	r27, 0x00	; 0
    a9b4:	ee ed       	ldi	r30, 0xDE	; 222
    a9b6:	f4 e5       	ldi	r31, 0x54	; 84
    a9b8:	0c 94 fd e5 	jmp	0x1cbfa	; 0x1cbfa <__prologue_saves__+0x14>
    a9bc:	ec 01       	movw	r28, r24
    a9be:	6b 01       	movw	r12, r22
    a9c0:	e8 80       	ld	r14, Y
    a9c2:	f9 80       	ldd	r15, Y+1	; 0x01
    a9c4:	40 e0       	ldi	r20, 0x00	; 0
    a9c6:	50 e0       	ldi	r21, 0x00	; 0
    a9c8:	ba 01       	movw	r22, r20
    a9ca:	92 dc       	rcall	.-1756   	; 0xa2f0 <dir_sdi>
    a9cc:	00 97       	sbiw	r24, 0x00	; 0
    a9ce:	01 f5       	brne	.+64     	; 0xaa10 <dir_alloc+0x60>
    a9d0:	00 e0       	ldi	r16, 0x00	; 0
    a9d2:	10 e0       	ldi	r17, 0x00	; 0
    a9d4:	4e 89       	ldd	r20, Y+22	; 0x16
    a9d6:	5f 89       	ldd	r21, Y+23	; 0x17
    a9d8:	68 8d       	ldd	r22, Y+24	; 0x18
    a9da:	79 8d       	ldd	r23, Y+25	; 0x19
    a9dc:	c7 01       	movw	r24, r14
    a9de:	0e 94 e8 4c 	call	0x99d0	; 0x99d0 <move_window>
    a9e2:	00 97       	sbiw	r24, 0x00	; 0
    a9e4:	a9 f4       	brne	.+42     	; 0xaa10 <dir_alloc+0x60>
    a9e6:	ea 8d       	ldd	r30, Y+26	; 0x1a
    a9e8:	fb 8d       	ldd	r31, Y+27	; 0x1b
    a9ea:	20 81       	ld	r18, Z
    a9ec:	25 3e       	cpi	r18, 0xE5	; 229
    a9ee:	11 f0       	breq	.+4      	; 0xa9f4 <dir_alloc+0x44>
    a9f0:	21 11       	cpse	r18, r1
    a9f2:	06 c0       	rjmp	.+12     	; 0xaa00 <dir_alloc+0x50>
    a9f4:	0f 5f       	subi	r16, 0xFF	; 255
    a9f6:	1f 4f       	sbci	r17, 0xFF	; 255
    a9f8:	0c 15       	cp	r16, r12
    a9fa:	1d 05       	cpc	r17, r13
    a9fc:	19 f4       	brne	.+6      	; 0xaa04 <dir_alloc+0x54>
    a9fe:	0d c0       	rjmp	.+26     	; 0xaa1a <dir_alloc+0x6a>
    aa00:	00 e0       	ldi	r16, 0x00	; 0
    aa02:	10 e0       	ldi	r17, 0x00	; 0
    aa04:	61 e0       	ldi	r22, 0x01	; 1
    aa06:	70 e0       	ldi	r23, 0x00	; 0
    aa08:	ce 01       	movw	r24, r28
    aa0a:	ea de       	rcall	.-556    	; 0xa7e0 <dir_next>
    aa0c:	00 97       	sbiw	r24, 0x00	; 0
    aa0e:	11 f3       	breq	.-60     	; 0xa9d4 <dir_alloc+0x24>
    aa10:	84 30       	cpi	r24, 0x04	; 4
    aa12:	91 05       	cpc	r25, r1
    aa14:	11 f4       	brne	.+4      	; 0xaa1a <dir_alloc+0x6a>
    aa16:	87 e0       	ldi	r24, 0x07	; 7
    aa18:	90 e0       	ldi	r25, 0x00	; 0
    aa1a:	cd b7       	in	r28, 0x3d	; 61
    aa1c:	de b7       	in	r29, 0x3e	; 62
    aa1e:	e8 e0       	ldi	r30, 0x08	; 8
    aa20:	0c 94 19 e6 	jmp	0x1cc32	; 0x1cc32 <__epilogue_restores__+0x14>

0000aa24 <dir_read>:
    aa24:	a0 e0       	ldi	r26, 0x00	; 0
    aa26:	b0 e0       	ldi	r27, 0x00	; 0
    aa28:	e8 e1       	ldi	r30, 0x18	; 24
    aa2a:	f5 e5       	ldi	r31, 0x55	; 85
    aa2c:	0c 94 f7 e5 	jmp	0x1cbee	; 0x1cbee <__prologue_saves__+0x8>
    aa30:	ec 01       	movw	r28, r24
    aa32:	7b 01       	movw	r14, r22
    aa34:	a8 80       	ld	r10, Y
    aa36:	b9 80       	ldd	r11, Y+1	; 0x01
    aa38:	dd 24       	eor	r13, r13
    aa3a:	da 94       	dec	r13
    aa3c:	1f ef       	ldi	r17, 0xFF	; 255
    aa3e:	84 e0       	ldi	r24, 0x04	; 4
    aa40:	90 e0       	ldi	r25, 0x00	; 0
    aa42:	ad e0       	ldi	r26, 0x0D	; 13
    aa44:	ca 2e       	mov	r12, r26
    aa46:	4e 89       	ldd	r20, Y+22	; 0x16
    aa48:	5f 89       	ldd	r21, Y+23	; 0x17
    aa4a:	68 8d       	ldd	r22, Y+24	; 0x18
    aa4c:	79 8d       	ldd	r23, Y+25	; 0x19
    aa4e:	41 15       	cp	r20, r1
    aa50:	51 05       	cpc	r21, r1
    aa52:	61 05       	cpc	r22, r1
    aa54:	71 05       	cpc	r23, r1
    aa56:	09 f4       	brne	.+2      	; 0xaa5a <dir_read+0x36>
    aa58:	a3 c0       	rjmp	.+326    	; 0xaba0 <dir_read+0x17c>
    aa5a:	c5 01       	movw	r24, r10
    aa5c:	0e 94 e8 4c 	call	0x99d0	; 0x99d0 <move_window>
    aa60:	00 97       	sbiw	r24, 0x00	; 0
    aa62:	09 f0       	breq	.+2      	; 0xaa66 <dir_read+0x42>
    aa64:	9f c0       	rjmp	.+318    	; 0xaba4 <dir_read+0x180>
    aa66:	aa 8d       	ldd	r26, Y+26	; 0x1a
    aa68:	bb 8d       	ldd	r27, Y+27	; 0x1b
    aa6a:	0c 91       	ld	r16, X
    aa6c:	00 23       	and	r16, r16
    aa6e:	09 f4       	brne	.+2      	; 0xaa72 <dir_read+0x4e>
    aa70:	a1 c0       	rjmp	.+322    	; 0xabb4 <dir_read+0x190>
    aa72:	1b 96       	adiw	r26, 0x0b	; 11
    aa74:	8c 91       	ld	r24, X
    aa76:	1b 97       	sbiw	r26, 0x0b	; 11
    aa78:	8f 73       	andi	r24, 0x3F	; 63
    aa7a:	8c 83       	std	Y+4, r24	; 0x04
    aa7c:	05 3e       	cpi	r16, 0xE5	; 229
    aa7e:	09 f4       	brne	.+2      	; 0xaa82 <dir_read+0x5e>
    aa80:	86 c0       	rjmp	.+268    	; 0xab8e <dir_read+0x16a>
    aa82:	0e 32       	cpi	r16, 0x2E	; 46
    aa84:	09 f4       	brne	.+2      	; 0xaa88 <dir_read+0x64>
    aa86:	83 c0       	rjmp	.+262    	; 0xab8e <dir_read+0x16a>
    aa88:	21 e0       	ldi	r18, 0x01	; 1
    aa8a:	30 e0       	ldi	r19, 0x00	; 0
    aa8c:	98 2f       	mov	r25, r24
    aa8e:	9f 71       	andi	r25, 0x1F	; 31
    aa90:	98 30       	cpi	r25, 0x08	; 8
    aa92:	11 f0       	breq	.+4      	; 0xaa98 <dir_read+0x74>
    aa94:	20 e0       	ldi	r18, 0x00	; 0
    aa96:	30 e0       	ldi	r19, 0x00	; 0
    aa98:	2e 15       	cp	r18, r14
    aa9a:	3f 05       	cpc	r19, r15
    aa9c:	09 f0       	breq	.+2      	; 0xaaa0 <dir_read+0x7c>
    aa9e:	77 c0       	rjmp	.+238    	; 0xab8e <dir_read+0x16a>
    aaa0:	8f 30       	cpi	r24, 0x0F	; 15
    aaa2:	09 f0       	breq	.+2      	; 0xaaa6 <dir_read+0x82>
    aaa4:	64 c0       	rjmp	.+200    	; 0xab6e <dir_read+0x14a>
    aaa6:	06 ff       	sbrs	r16, 6
    aaa8:	0d c0       	rjmp	.+26     	; 0xaac4 <dir_read+0xa0>
    aaaa:	1d 96       	adiw	r26, 0x0d	; 13
    aaac:	8c 91       	ld	r24, X
    aaae:	1d 97       	sbiw	r26, 0x0d	; 13
    aab0:	0f 7b       	andi	r16, 0xBF	; 191
    aab2:	4e 85       	ldd	r20, Y+14	; 0x0e
    aab4:	5f 85       	ldd	r21, Y+15	; 0x0f
    aab6:	68 89       	ldd	r22, Y+16	; 0x10
    aab8:	79 89       	ldd	r23, Y+17	; 0x11
    aaba:	48 a7       	std	Y+40, r20	; 0x28
    aabc:	59 a7       	std	Y+41, r21	; 0x29
    aabe:	6a a7       	std	Y+42, r22	; 0x2a
    aac0:	7b a7       	std	Y+43, r23	; 0x2b
    aac2:	03 c0       	rjmp	.+6      	; 0xaaca <dir_read+0xa6>
    aac4:	10 13       	cpse	r17, r16
    aac6:	63 c0       	rjmp	.+198    	; 0xab8e <dir_read+0x16a>
    aac8:	8d 2d       	mov	r24, r13
    aaca:	1d 96       	adiw	r26, 0x0d	; 13
    aacc:	dc 90       	ld	r13, X
    aace:	1d 97       	sbiw	r26, 0x0d	; 13
    aad0:	d8 12       	cpse	r13, r24
    aad2:	5c c0       	rjmp	.+184    	; 0xab8c <dir_read+0x168>
    aad4:	5a 96       	adiw	r26, 0x1a	; 26
    aad6:	8d 91       	ld	r24, X+
    aad8:	9c 91       	ld	r25, X
    aada:	5b 97       	sbiw	r26, 0x1b	; 27
    aadc:	89 2b       	or	r24, r25
    aade:	09 f0       	breq	.+2      	; 0xaae2 <dir_read+0xbe>
    aae0:	56 c0       	rjmp	.+172    	; 0xab8e <dir_read+0x16a>
    aae2:	f5 01       	movw	r30, r10
    aae4:	63 85       	ldd	r22, Z+11	; 0x0b
    aae6:	74 85       	ldd	r23, Z+12	; 0x0c
    aae8:	8c 91       	ld	r24, X
    aaea:	90 e0       	ldi	r25, 0x00	; 0
    aaec:	8f 7b       	andi	r24, 0xBF	; 191
    aaee:	01 97       	sbiw	r24, 0x01	; 1
    aaf0:	c8 9e       	mul	r12, r24
    aaf2:	90 01       	movw	r18, r0
    aaf4:	c9 9e       	mul	r12, r25
    aaf6:	30 0d       	add	r19, r0
    aaf8:	11 24       	eor	r1, r1
    aafa:	fd e4       	ldi	r31, 0x4D	; 77
    aafc:	6f 2e       	mov	r6, r31
    aafe:	f3 e0       	ldi	r31, 0x03	; 3
    ab00:	7f 2e       	mov	r7, r31
    ab02:	81 e0       	ldi	r24, 0x01	; 1
    ab04:	90 e0       	ldi	r25, 0x00	; 0
    ab06:	f3 01       	movw	r30, r6
    ab08:	41 91       	ld	r20, Z+
    ab0a:	3f 01       	movw	r6, r30
    ab0c:	4d 01       	movw	r8, r26
    ab0e:	84 0e       	add	r8, r20
    ab10:	91 1c       	adc	r9, r1
    ab12:	f4 01       	movw	r30, r8
    ab14:	40 81       	ld	r20, Z
    ab16:	51 81       	ldd	r21, Z+1	; 0x01
    ab18:	00 97       	sbiw	r24, 0x00	; 0
    ab1a:	81 f0       	breq	.+32     	; 0xab3c <dir_read+0x118>
    ab1c:	2f 3f       	cpi	r18, 0xFF	; 255
    ab1e:	31 05       	cpc	r19, r1
    ab20:	09 f0       	breq	.+2      	; 0xab24 <dir_read+0x100>
    ab22:	a8 f5       	brcc	.+106    	; 0xab8e <dir_read+0x16a>
    ab24:	c9 01       	movw	r24, r18
    ab26:	88 0f       	add	r24, r24
    ab28:	99 1f       	adc	r25, r25
    ab2a:	86 0f       	add	r24, r22
    ab2c:	97 1f       	adc	r25, r23
    ab2e:	fc 01       	movw	r30, r24
    ab30:	51 83       	std	Z+1, r21	; 0x01
    ab32:	40 83       	st	Z, r20
    ab34:	ca 01       	movw	r24, r20
    ab36:	2f 5f       	subi	r18, 0xFF	; 255
    ab38:	3f 4f       	sbci	r19, 0xFF	; 255
    ab3a:	03 c0       	rjmp	.+6      	; 0xab42 <dir_read+0x11e>
    ab3c:	4f 3f       	cpi	r20, 0xFF	; 255
    ab3e:	5f 4f       	sbci	r21, 0xFF	; 255
    ab40:	31 f5       	brne	.+76     	; 0xab8e <dir_read+0x16a>
    ab42:	4a e5       	ldi	r20, 0x5A	; 90
    ab44:	64 16       	cp	r6, r20
    ab46:	43 e0       	ldi	r20, 0x03	; 3
    ab48:	74 06       	cpc	r7, r20
    ab4a:	e9 f6       	brne	.-70     	; 0xab06 <dir_read+0xe2>
    ab4c:	4c 91       	ld	r20, X
    ab4e:	46 ff       	sbrs	r20, 6
    ab50:	2e c0       	rjmp	.+92     	; 0xabae <dir_read+0x18a>
    ab52:	89 2b       	or	r24, r25
    ab54:	61 f1       	breq	.+88     	; 0xabae <dir_read+0x18a>
    ab56:	2f 3f       	cpi	r18, 0xFF	; 255
    ab58:	31 05       	cpc	r19, r1
    ab5a:	09 f0       	breq	.+2      	; 0xab5e <dir_read+0x13a>
    ab5c:	c0 f4       	brcc	.+48     	; 0xab8e <dir_read+0x16a>
    ab5e:	22 0f       	add	r18, r18
    ab60:	33 1f       	adc	r19, r19
    ab62:	fb 01       	movw	r30, r22
    ab64:	e2 0f       	add	r30, r18
    ab66:	f3 1f       	adc	r31, r19
    ab68:	11 82       	std	Z+1, r1	; 0x01
    ab6a:	10 82       	st	Z, r1
    ab6c:	20 c0       	rjmp	.+64     	; 0xabae <dir_read+0x18a>
    ab6e:	11 11       	cpse	r17, r1
    ab70:	05 c0       	rjmp	.+10     	; 0xab7c <dir_read+0x158>
    ab72:	cd 01       	movw	r24, r26
    ab74:	0e 94 21 49 	call	0x9242	; 0x9242 <sum_sfn>
    ab78:	d8 16       	cp	r13, r24
    ab7a:	f9 f0       	breq	.+62     	; 0xabba <dir_read+0x196>
    ab7c:	8f ef       	ldi	r24, 0xFF	; 255
    ab7e:	9f ef       	ldi	r25, 0xFF	; 255
    ab80:	dc 01       	movw	r26, r24
    ab82:	88 a7       	std	Y+40, r24	; 0x28
    ab84:	99 a7       	std	Y+41, r25	; 0x29
    ab86:	aa a7       	std	Y+42, r26	; 0x2a
    ab88:	bb a7       	std	Y+43, r27	; 0x2b
    ab8a:	17 c0       	rjmp	.+46     	; 0xabba <dir_read+0x196>
    ab8c:	d8 2e       	mov	r13, r24
    ab8e:	1f ef       	ldi	r17, 0xFF	; 255
    ab90:	60 e0       	ldi	r22, 0x00	; 0
    ab92:	70 e0       	ldi	r23, 0x00	; 0
    ab94:	ce 01       	movw	r24, r28
    ab96:	24 de       	rcall	.-952    	; 0xa7e0 <dir_next>
    ab98:	00 97       	sbiw	r24, 0x00	; 0
    ab9a:	09 f4       	brne	.+2      	; 0xab9e <dir_read+0x17a>
    ab9c:	54 cf       	rjmp	.-344    	; 0xaa46 <dir_read+0x22>
    ab9e:	02 c0       	rjmp	.+4      	; 0xaba4 <dir_read+0x180>
    aba0:	00 97       	sbiw	r24, 0x00	; 0
    aba2:	59 f0       	breq	.+22     	; 0xabba <dir_read+0x196>
    aba4:	1e 8a       	std	Y+22, r1	; 0x16
    aba6:	1f 8a       	std	Y+23, r1	; 0x17
    aba8:	18 8e       	std	Y+24, r1	; 0x18
    abaa:	19 8e       	std	Y+25, r1	; 0x19
    abac:	08 c0       	rjmp	.+16     	; 0xabbe <dir_read+0x19a>
    abae:	1f ef       	ldi	r17, 0xFF	; 255
    abb0:	10 0f       	add	r17, r16
    abb2:	ee cf       	rjmp	.-36     	; 0xab90 <dir_read+0x16c>
    abb4:	84 e0       	ldi	r24, 0x04	; 4
    abb6:	90 e0       	ldi	r25, 0x00	; 0
    abb8:	f5 cf       	rjmp	.-22     	; 0xaba4 <dir_read+0x180>
    abba:	80 e0       	ldi	r24, 0x00	; 0
    abbc:	90 e0       	ldi	r25, 0x00	; 0
    abbe:	cd b7       	in	r28, 0x3d	; 61
    abc0:	de b7       	in	r29, 0x3e	; 62
    abc2:	ee e0       	ldi	r30, 0x0E	; 14
    abc4:	0c 94 13 e6 	jmp	0x1cc26	; 0x1cc26 <__epilogue_restores__+0x8>

0000abc8 <dir_remove>:
    abc8:	a0 e0       	ldi	r26, 0x00	; 0
    abca:	b0 e0       	ldi	r27, 0x00	; 0
    abcc:	ea ee       	ldi	r30, 0xEA	; 234
    abce:	f5 e5       	ldi	r31, 0x55	; 85
    abd0:	0c 94 fb e5 	jmp	0x1cbf6	; 0x1cbf6 <__prologue_saves__+0x10>
    abd4:	ec 01       	movw	r28, r24
    abd6:	08 81       	ld	r16, Y
    abd8:	19 81       	ldd	r17, Y+1	; 0x01
    abda:	ce 84       	ldd	r12, Y+14	; 0x0e
    abdc:	df 84       	ldd	r13, Y+15	; 0x0f
    abde:	e8 88       	ldd	r14, Y+16	; 0x10
    abe0:	f9 88       	ldd	r15, Y+17	; 0x11
    abe2:	48 a5       	ldd	r20, Y+40	; 0x28
    abe4:	59 a5       	ldd	r21, Y+41	; 0x29
    abe6:	6a a5       	ldd	r22, Y+42	; 0x2a
    abe8:	7b a5       	ldd	r23, Y+43	; 0x2b
    abea:	4f 3f       	cpi	r20, 0xFF	; 255
    abec:	8f ef       	ldi	r24, 0xFF	; 255
    abee:	58 07       	cpc	r21, r24
    abf0:	68 07       	cpc	r22, r24
    abf2:	78 07       	cpc	r23, r24
    abf4:	29 f4       	brne	.+10     	; 0xac00 <dir_remove+0x38>
    abf6:	85 ee       	ldi	r24, 0xE5	; 229
    abf8:	b8 2e       	mov	r11, r24
    abfa:	aa 24       	eor	r10, r10
    abfc:	a3 94       	inc	r10
    abfe:	19 c0       	rjmp	.+50     	; 0xac32 <dir_remove+0x6a>
    ac00:	ce 01       	movw	r24, r28
    ac02:	76 db       	rcall	.-2324   	; 0xa2f0 <dir_sdi>
    ac04:	00 97       	sbiw	r24, 0x00	; 0
    ac06:	19 f5       	brne	.+70     	; 0xac4e <dir_remove+0x86>
    ac08:	f6 cf       	rjmp	.-20     	; 0xabf6 <dir_remove+0x2e>
    ac0a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    ac0c:	fb 8d       	ldd	r31, Y+27	; 0x1b
    ac0e:	b0 82       	st	Z, r11
    ac10:	f8 01       	movw	r30, r16
    ac12:	a3 82       	std	Z+3, r10	; 0x03
    ac14:	4e 85       	ldd	r20, Y+14	; 0x0e
    ac16:	5f 85       	ldd	r21, Y+15	; 0x0f
    ac18:	68 89       	ldd	r22, Y+16	; 0x10
    ac1a:	79 89       	ldd	r23, Y+17	; 0x11
    ac1c:	4c 15       	cp	r20, r12
    ac1e:	5d 05       	cpc	r21, r13
    ac20:	6e 05       	cpc	r22, r14
    ac22:	7f 05       	cpc	r23, r15
    ac24:	a0 f4       	brcc	.+40     	; 0xac4e <dir_remove+0x86>
    ac26:	60 e0       	ldi	r22, 0x00	; 0
    ac28:	70 e0       	ldi	r23, 0x00	; 0
    ac2a:	ce 01       	movw	r24, r28
    ac2c:	d9 dd       	rcall	.-1102   	; 0xa7e0 <dir_next>
    ac2e:	00 97       	sbiw	r24, 0x00	; 0
    ac30:	49 f4       	brne	.+18     	; 0xac44 <dir_remove+0x7c>
    ac32:	4e 89       	ldd	r20, Y+22	; 0x16
    ac34:	5f 89       	ldd	r21, Y+23	; 0x17
    ac36:	68 8d       	ldd	r22, Y+24	; 0x18
    ac38:	79 8d       	ldd	r23, Y+25	; 0x19
    ac3a:	c8 01       	movw	r24, r16
    ac3c:	0e 94 e8 4c 	call	0x99d0	; 0x99d0 <move_window>
    ac40:	00 97       	sbiw	r24, 0x00	; 0
    ac42:	19 f3       	breq	.-58     	; 0xac0a <dir_remove+0x42>
    ac44:	84 30       	cpi	r24, 0x04	; 4
    ac46:	91 05       	cpc	r25, r1
    ac48:	11 f4       	brne	.+4      	; 0xac4e <dir_remove+0x86>
    ac4a:	82 e0       	ldi	r24, 0x02	; 2
    ac4c:	90 e0       	ldi	r25, 0x00	; 0
    ac4e:	cd b7       	in	r28, 0x3d	; 61
    ac50:	de b7       	in	r29, 0x3e	; 62
    ac52:	ea e0       	ldi	r30, 0x0A	; 10
    ac54:	0c 94 17 e6 	jmp	0x1cc2e	; 0x1cc2e <__epilogue_restores__+0x10>

0000ac58 <dir_find>:
    ac58:	ac e0       	ldi	r26, 0x0C	; 12
    ac5a:	b0 e0       	ldi	r27, 0x00	; 0
    ac5c:	e2 e3       	ldi	r30, 0x32	; 50
    ac5e:	f6 e5       	ldi	r31, 0x56	; 86
    ac60:	0c 94 f3 e5 	jmp	0x1cbe6	; 0x1cbe6 <__prologue_saves__>
    ac64:	9c 87       	std	Y+12, r25	; 0x0c
    ac66:	8b 87       	std	Y+11, r24	; 0x0b
    ac68:	fc 01       	movw	r30, r24
    ac6a:	01 90       	ld	r0, Z+
    ac6c:	f0 81       	ld	r31, Z
    ac6e:	e0 2d       	mov	r30, r0
    ac70:	fc 83       	std	Y+4, r31	; 0x04
    ac72:	eb 83       	std	Y+3, r30	; 0x03
    ac74:	40 e0       	ldi	r20, 0x00	; 0
    ac76:	50 e0       	ldi	r21, 0x00	; 0
    ac78:	ba 01       	movw	r22, r20
    ac7a:	3a db       	rcall	.-2444   	; 0xa2f0 <dir_sdi>
    ac7c:	00 97       	sbiw	r24, 0x00	; 0
    ac7e:	09 f0       	breq	.+2      	; 0xac82 <dir_find+0x2a>
    ac80:	e7 c0       	rjmp	.+462    	; 0xae50 <dir_find+0x1f8>
    ac82:	8f ef       	ldi	r24, 0xFF	; 255
    ac84:	9f ef       	ldi	r25, 0xFF	; 255
    ac86:	dc 01       	movw	r26, r24
    ac88:	eb 85       	ldd	r30, Y+11	; 0x0b
    ac8a:	fc 85       	ldd	r31, Y+12	; 0x0c
    ac8c:	80 a7       	std	Z+40, r24	; 0x28
    ac8e:	91 a7       	std	Z+41, r25	; 0x29
    ac90:	a2 a7       	std	Z+42, r26	; 0x2a
    ac92:	b3 a7       	std	Z+43, r27	; 0x2b
    ac94:	0f ef       	ldi	r16, 0xFF	; 255
    ac96:	1f ef       	ldi	r17, 0xFF	; 255
    ac98:	44 24       	eor	r4, r4
    ac9a:	4a 94       	dec	r4
    ac9c:	54 2c       	mov	r5, r4
    ac9e:	32 01       	movw	r6, r4
    aca0:	7c 96       	adiw	r30, 0x1c	; 28
    aca2:	fa 87       	std	Y+10, r31	; 0x0a
    aca4:	e9 87       	std	Y+9, r30	; 0x09
    aca6:	eb 85       	ldd	r30, Y+11	; 0x0b
    aca8:	fc 85       	ldd	r31, Y+12	; 0x0c
    acaa:	46 89       	ldd	r20, Z+22	; 0x16
    acac:	57 89       	ldd	r21, Z+23	; 0x17
    acae:	60 8d       	ldd	r22, Z+24	; 0x18
    acb0:	71 8d       	ldd	r23, Z+25	; 0x19
    acb2:	8b 81       	ldd	r24, Y+3	; 0x03
    acb4:	9c 81       	ldd	r25, Y+4	; 0x04
    acb6:	0e 94 e8 4c 	call	0x99d0	; 0x99d0 <move_window>
    acba:	00 97       	sbiw	r24, 0x00	; 0
    acbc:	09 f0       	breq	.+2      	; 0xacc0 <dir_find+0x68>
    acbe:	c8 c0       	rjmp	.+400    	; 0xae50 <dir_find+0x1f8>
    acc0:	eb 85       	ldd	r30, Y+11	; 0x0b
    acc2:	fc 85       	ldd	r31, Y+12	; 0x0c
    acc4:	e2 8c       	ldd	r14, Z+26	; 0x1a
    acc6:	f3 8c       	ldd	r15, Z+27	; 0x1b
    acc8:	f7 01       	movw	r30, r14
    acca:	d0 80       	ld	r13, Z
    accc:	dd 20       	and	r13, r13
    acce:	09 f4       	brne	.+2      	; 0xacd2 <dir_find+0x7a>
    acd0:	c1 c0       	rjmp	.+386    	; 0xae54 <dir_find+0x1fc>
    acd2:	93 85       	ldd	r25, Z+11	; 0x0b
    acd4:	89 2f       	mov	r24, r25
    acd6:	8f 73       	andi	r24, 0x3F	; 63
    acd8:	eb 85       	ldd	r30, Y+11	; 0x0b
    acda:	fc 85       	ldd	r31, Y+12	; 0x0c
    acdc:	84 83       	std	Z+4, r24	; 0x04
    acde:	f5 ee       	ldi	r31, 0xE5	; 229
    ace0:	df 16       	cp	r13, r31
    ace2:	09 f4       	brne	.+2      	; 0xace6 <dir_find+0x8e>
    ace4:	a6 c0       	rjmp	.+332    	; 0xae32 <dir_find+0x1da>
    ace6:	93 ff       	sbrs	r25, 3
    ace8:	04 c0       	rjmp	.+8      	; 0xacf2 <dir_find+0x9a>
    acea:	8f 30       	cpi	r24, 0x0F	; 15
    acec:	09 f0       	breq	.+2      	; 0xacf0 <dir_find+0x98>
    acee:	a1 c0       	rjmp	.+322    	; 0xae32 <dir_find+0x1da>
    acf0:	03 c0       	rjmp	.+6      	; 0xacf8 <dir_find+0xa0>
    acf2:	8f 30       	cpi	r24, 0x0F	; 15
    acf4:	09 f0       	breq	.+2      	; 0xacf8 <dir_find+0xa0>
    acf6:	88 c0       	rjmp	.+272    	; 0xae08 <dir_find+0x1b0>
    acf8:	eb 85       	ldd	r30, Y+11	; 0x0b
    acfa:	fc 85       	ldd	r31, Y+12	; 0x0c
    acfc:	87 a1       	ldd	r24, Z+39	; 0x27
    acfe:	86 fd       	sbrc	r24, 6
    ad00:	9f c0       	rjmp	.+318    	; 0xae40 <dir_find+0x1e8>
    ad02:	d6 fe       	sbrs	r13, 6
    ad04:	10 c0       	rjmp	.+32     	; 0xad26 <dir_find+0xce>
    ad06:	f7 01       	movw	r30, r14
    ad08:	05 85       	ldd	r16, Z+13	; 0x0d
    ad0a:	fd 2d       	mov	r31, r13
    ad0c:	ff 7b       	andi	r31, 0xBF	; 191
    ad0e:	df 2e       	mov	r13, r31
    ad10:	eb 85       	ldd	r30, Y+11	; 0x0b
    ad12:	fc 85       	ldd	r31, Y+12	; 0x0c
    ad14:	86 85       	ldd	r24, Z+14	; 0x0e
    ad16:	97 85       	ldd	r25, Z+15	; 0x0f
    ad18:	a0 89       	ldd	r26, Z+16	; 0x10
    ad1a:	b1 89       	ldd	r27, Z+17	; 0x11
    ad1c:	80 a7       	std	Z+40, r24	; 0x28
    ad1e:	91 a7       	std	Z+41, r25	; 0x29
    ad20:	a2 a7       	std	Z+42, r26	; 0x2a
    ad22:	b3 a7       	std	Z+43, r27	; 0x2b
    ad24:	02 c0       	rjmp	.+4      	; 0xad2a <dir_find+0xd2>
    ad26:	1d 11       	cpse	r17, r13
    ad28:	8a c0       	rjmp	.+276    	; 0xae3e <dir_find+0x1e6>
    ad2a:	f7 01       	movw	r30, r14
    ad2c:	c5 84       	ldd	r12, Z+13	; 0x0d
    ad2e:	c0 12       	cpse	r12, r16
    ad30:	86 c0       	rjmp	.+268    	; 0xae3e <dir_find+0x1e6>
    ad32:	82 8d       	ldd	r24, Z+26	; 0x1a
    ad34:	93 8d       	ldd	r25, Z+27	; 0x1b
    ad36:	89 2b       	or	r24, r25
    ad38:	09 f0       	breq	.+2      	; 0xad3c <dir_find+0xe4>
    ad3a:	91 c0       	rjmp	.+290    	; 0xae5e <dir_find+0x206>
    ad3c:	eb 81       	ldd	r30, Y+3	; 0x03
    ad3e:	fc 81       	ldd	r31, Y+4	; 0x04
    ad40:	03 84       	ldd	r0, Z+11	; 0x0b
    ad42:	f4 85       	ldd	r31, Z+12	; 0x0c
    ad44:	e0 2d       	mov	r30, r0
    ad46:	fe 83       	std	Y+6, r31	; 0x06
    ad48:	ed 83       	std	Y+5, r30	; 0x05
    ad4a:	f7 01       	movw	r30, r14
    ad4c:	80 81       	ld	r24, Z
    ad4e:	8f 73       	andi	r24, 0x3F	; 63
    ad50:	90 e0       	ldi	r25, 0x00	; 0
    ad52:	01 97       	sbiw	r24, 0x01	; 1
    ad54:	fd e0       	ldi	r31, 0x0D	; 13
    ad56:	f8 9f       	mul	r31, r24
    ad58:	80 01       	movw	r16, r0
    ad5a:	f9 9f       	mul	r31, r25
    ad5c:	10 0d       	add	r17, r0
    ad5e:	11 24       	eor	r1, r1
    ad60:	2d e4       	ldi	r18, 0x4D	; 77
    ad62:	33 e0       	ldi	r19, 0x03	; 3
    ad64:	3a 83       	std	Y+2, r19	; 0x02
    ad66:	29 83       	std	Y+1, r18	; 0x01
    ad68:	81 e0       	ldi	r24, 0x01	; 1
    ad6a:	90 e0       	ldi	r25, 0x00	; 0
    ad6c:	e9 81       	ldd	r30, Y+1	; 0x01
    ad6e:	fa 81       	ldd	r31, Y+2	; 0x02
    ad70:	21 91       	ld	r18, Z+
    ad72:	fa 83       	std	Y+2, r31	; 0x02
    ad74:	e9 83       	std	Y+1, r30	; 0x01
    ad76:	f7 01       	movw	r30, r14
    ad78:	e2 0f       	add	r30, r18
    ad7a:	f1 1d       	adc	r31, r1
    ad7c:	20 80       	ld	r2, Z
    ad7e:	31 80       	ldd	r3, Z+1	; 0x01
    ad80:	00 97       	sbiw	r24, 0x00	; 0
    ad82:	39 f1       	breq	.+78     	; 0xadd2 <dir_find+0x17a>
    ad84:	0f 3f       	cpi	r16, 0xFF	; 255
    ad86:	11 05       	cpc	r17, r1
    ad88:	11 f0       	breq	.+4      	; 0xad8e <dir_find+0x136>
    ad8a:	08 f0       	brcs	.+2      	; 0xad8e <dir_find+0x136>
    ad8c:	68 c0       	rjmp	.+208    	; 0xae5e <dir_find+0x206>
    ad8e:	b1 01       	movw	r22, r2
    ad90:	80 e0       	ldi	r24, 0x00	; 0
    ad92:	90 e0       	ldi	r25, 0x00	; 0
    ad94:	0e 94 15 6b 	call	0xd62a	; 0xd62a <ff_wtoupper>
    ad98:	4b 01       	movw	r8, r22
    ad9a:	5c 01       	movw	r10, r24
    ad9c:	98 01       	movw	r18, r16
    ad9e:	2f 5f       	subi	r18, 0xFF	; 255
    ada0:	3f 4f       	sbci	r19, 0xFF	; 255
    ada2:	38 87       	std	Y+8, r19	; 0x08
    ada4:	2f 83       	std	Y+7, r18	; 0x07
    ada6:	00 0f       	add	r16, r16
    ada8:	11 1f       	adc	r17, r17
    adaa:	ed 81       	ldd	r30, Y+5	; 0x05
    adac:	fe 81       	ldd	r31, Y+6	; 0x06
    adae:	e0 0f       	add	r30, r16
    adb0:	f1 1f       	adc	r31, r17
    adb2:	60 81       	ld	r22, Z
    adb4:	71 81       	ldd	r23, Z+1	; 0x01
    adb6:	80 e0       	ldi	r24, 0x00	; 0
    adb8:	90 e0       	ldi	r25, 0x00	; 0
    adba:	0e 94 15 6b 	call	0xd62a	; 0xd62a <ff_wtoupper>
    adbe:	86 16       	cp	r8, r22
    adc0:	97 06       	cpc	r9, r23
    adc2:	a8 06       	cpc	r10, r24
    adc4:	b9 06       	cpc	r11, r25
    adc6:	09 f0       	breq	.+2      	; 0xadca <dir_find+0x172>
    adc8:	4a c0       	rjmp	.+148    	; 0xae5e <dir_find+0x206>
    adca:	c1 01       	movw	r24, r2
    adcc:	0f 81       	ldd	r16, Y+7	; 0x07
    adce:	18 85       	ldd	r17, Y+8	; 0x08
    add0:	05 c0       	rjmp	.+10     	; 0xaddc <dir_find+0x184>
    add2:	3f ef       	ldi	r19, 0xFF	; 255
    add4:	23 16       	cp	r2, r19
    add6:	33 06       	cpc	r3, r19
    add8:	09 f0       	breq	.+2      	; 0xaddc <dir_find+0x184>
    adda:	41 c0       	rjmp	.+130    	; 0xae5e <dir_find+0x206>
    addc:	e9 81       	ldd	r30, Y+1	; 0x01
    adde:	fa 81       	ldd	r31, Y+2	; 0x02
    ade0:	ea 55       	subi	r30, 0x5A	; 90
    ade2:	f3 40       	sbci	r31, 0x03	; 3
    ade4:	19 f6       	brne	.-122    	; 0xad6c <dir_find+0x114>
    ade6:	f7 01       	movw	r30, r14
    ade8:	20 81       	ld	r18, Z
    adea:	26 ff       	sbrs	r18, 6
    adec:	3a c0       	rjmp	.+116    	; 0xae62 <dir_find+0x20a>
    adee:	89 2b       	or	r24, r25
    adf0:	c1 f1       	breq	.+112    	; 0xae62 <dir_find+0x20a>
    adf2:	00 0f       	add	r16, r16
    adf4:	11 1f       	adc	r17, r17
    adf6:	ed 81       	ldd	r30, Y+5	; 0x05
    adf8:	fe 81       	ldd	r31, Y+6	; 0x06
    adfa:	e0 0f       	add	r30, r16
    adfc:	f1 1f       	adc	r31, r17
    adfe:	80 81       	ld	r24, Z
    ae00:	91 81       	ldd	r25, Z+1	; 0x01
    ae02:	89 2b       	or	r24, r25
    ae04:	71 f1       	breq	.+92     	; 0xae62 <dir_find+0x20a>
    ae06:	2b c0       	rjmp	.+86     	; 0xae5e <dir_find+0x206>
    ae08:	11 11       	cpse	r17, r1
    ae0a:	05 c0       	rjmp	.+10     	; 0xae16 <dir_find+0x1be>
    ae0c:	c7 01       	movw	r24, r14
    ae0e:	0e 94 21 49 	call	0x9242	; 0x9242 <sum_sfn>
    ae12:	08 17       	cp	r16, r24
    ae14:	09 f1       	breq	.+66     	; 0xae58 <dir_find+0x200>
    ae16:	eb 85       	ldd	r30, Y+11	; 0x0b
    ae18:	fc 85       	ldd	r31, Y+12	; 0x0c
    ae1a:	87 a1       	ldd	r24, Z+39	; 0x27
    ae1c:	80 fd       	sbrc	r24, 0
    ae1e:	09 c0       	rjmp	.+18     	; 0xae32 <dir_find+0x1da>
    ae20:	4b e0       	ldi	r20, 0x0B	; 11
    ae22:	50 e0       	ldi	r21, 0x00	; 0
    ae24:	69 85       	ldd	r22, Y+9	; 0x09
    ae26:	7a 85       	ldd	r23, Y+10	; 0x0a
    ae28:	c7 01       	movw	r24, r14
    ae2a:	0e 94 28 48 	call	0x9050	; 0x9050 <mem_cmp>
    ae2e:	89 2b       	or	r24, r25
    ae30:	99 f0       	breq	.+38     	; 0xae58 <dir_find+0x200>
    ae32:	eb 85       	ldd	r30, Y+11	; 0x0b
    ae34:	fc 85       	ldd	r31, Y+12	; 0x0c
    ae36:	40 a6       	std	Z+40, r4	; 0x28
    ae38:	51 a6       	std	Z+41, r5	; 0x29
    ae3a:	62 a6       	std	Z+42, r6	; 0x2a
    ae3c:	73 a6       	std	Z+43, r7	; 0x2b
    ae3e:	1f ef       	ldi	r17, 0xFF	; 255
    ae40:	60 e0       	ldi	r22, 0x00	; 0
    ae42:	70 e0       	ldi	r23, 0x00	; 0
    ae44:	8b 85       	ldd	r24, Y+11	; 0x0b
    ae46:	9c 85       	ldd	r25, Y+12	; 0x0c
    ae48:	cb dc       	rcall	.-1642   	; 0xa7e0 <dir_next>
    ae4a:	00 97       	sbiw	r24, 0x00	; 0
    ae4c:	09 f4       	brne	.+2      	; 0xae50 <dir_find+0x1f8>
    ae4e:	2b cf       	rjmp	.-426    	; 0xaca6 <dir_find+0x4e>
    ae50:	28 2f       	mov	r18, r24
    ae52:	0b c0       	rjmp	.+22     	; 0xae6a <dir_find+0x212>
    ae54:	24 e0       	ldi	r18, 0x04	; 4
    ae56:	01 c0       	rjmp	.+2      	; 0xae5a <dir_find+0x202>
    ae58:	20 e0       	ldi	r18, 0x00	; 0
    ae5a:	90 e0       	ldi	r25, 0x00	; 0
    ae5c:	06 c0       	rjmp	.+12     	; 0xae6a <dir_find+0x212>
    ae5e:	0c 2d       	mov	r16, r12
    ae60:	ee cf       	rjmp	.-36     	; 0xae3e <dir_find+0x1e6>
    ae62:	1f ef       	ldi	r17, 0xFF	; 255
    ae64:	1d 0d       	add	r17, r13
    ae66:	0c 2d       	mov	r16, r12
    ae68:	eb cf       	rjmp	.-42     	; 0xae40 <dir_find+0x1e8>
    ae6a:	82 2f       	mov	r24, r18
    ae6c:	2c 96       	adiw	r28, 0x0c	; 12
    ae6e:	e2 e1       	ldi	r30, 0x12	; 18
    ae70:	0c 94 0f e6 	jmp	0x1cc1e	; 0x1cc1e <__epilogue_restores__>

0000ae74 <dir_register>:
    ae74:	a6 e1       	ldi	r26, 0x16	; 22
    ae76:	b0 e0       	ldi	r27, 0x00	; 0
    ae78:	e0 e4       	ldi	r30, 0x40	; 64
    ae7a:	f7 e5       	ldi	r31, 0x57	; 87
    ae7c:	0c 94 f3 e5 	jmp	0x1cbe6	; 0x1cbe6 <__prologue_saves__>
    ae80:	dc 01       	movw	r26, r24
    ae82:	97 96       	adiw	r26, 0x27	; 39
    ae84:	2c 91       	ld	r18, X
    ae86:	97 97       	sbiw	r26, 0x27	; 39
    ae88:	20 7a       	andi	r18, 0xA0	; 160
    ae8a:	09 f0       	breq	.+2      	; 0xae8e <dir_register+0x1a>
    ae8c:	61 c1       	rjmp	.+706    	; 0xb150 <dir_register+0x2dc>
    ae8e:	cd 90       	ld	r12, X+
    ae90:	dc 90       	ld	r13, X
    ae92:	d6 01       	movw	r26, r12
    ae94:	1b 96       	adiw	r26, 0x0b	; 11
    ae96:	ed 91       	ld	r30, X+
    ae98:	fc 91       	ld	r31, X
    ae9a:	1c 97       	sbiw	r26, 0x0c	; 12
    ae9c:	81 2c       	mov	r8, r1
    ae9e:	91 2c       	mov	r9, r1
    aea0:	21 91       	ld	r18, Z+
    aea2:	31 91       	ld	r19, Z+
    aea4:	23 2b       	or	r18, r19
    aea6:	21 f0       	breq	.+8      	; 0xaeb0 <dir_register+0x3c>
    aea8:	bf ef       	ldi	r27, 0xFF	; 255
    aeaa:	8b 1a       	sub	r8, r27
    aeac:	9b 0a       	sbc	r9, r27
    aeae:	f8 cf       	rjmp	.-16     	; 0xaea0 <dir_register+0x2c>
    aeb0:	8c 01       	movw	r16, r24
    aeb2:	5c 01       	movw	r10, r24
    aeb4:	ec e1       	ldi	r30, 0x1C	; 28
    aeb6:	ae 0e       	add	r10, r30
    aeb8:	b1 1c       	adc	r11, r1
    aeba:	4c e0       	ldi	r20, 0x0C	; 12
    aebc:	50 e0       	ldi	r21, 0x00	; 0
    aebe:	b5 01       	movw	r22, r10
    aec0:	ce 01       	movw	r24, r28
    aec2:	01 96       	adiw	r24, 0x01	; 1
    aec4:	0e 94 88 49 	call	0x9310	; 0x9310 <mem_cpy.part.0>
    aec8:	8c 85       	ldd	r24, Y+12	; 0x0c
    aeca:	80 ff       	sbrs	r24, 0
    aecc:	96 c0       	rjmp	.+300    	; 0xaffa <dir_register+0x186>
    aece:	80 e4       	ldi	r24, 0x40	; 64
    aed0:	d8 01       	movw	r26, r16
    aed2:	97 96       	adiw	r26, 0x27	; 39
    aed4:	8c 93       	st	X, r24
    aed6:	41 2c       	mov	r4, r1
    aed8:	51 2c       	mov	r5, r1
    aeda:	32 01       	movw	r6, r4
    aedc:	43 94       	inc	r4
    aede:	72 01       	movw	r14, r4
    aee0:	f6 01       	movw	r30, r12
    aee2:	23 84       	ldd	r2, Z+11	; 0x0b
    aee4:	34 84       	ldd	r3, Z+12	; 0x0c
    aee6:	4b e0       	ldi	r20, 0x0B	; 11
    aee8:	50 e0       	ldi	r21, 0x00	; 0
    aeea:	be 01       	movw	r22, r28
    aeec:	6f 5f       	subi	r22, 0xFF	; 255
    aeee:	7f 4f       	sbci	r23, 0xFF	; 255
    aef0:	c5 01       	movw	r24, r10
    aef2:	0e 94 88 49 	call	0x9310	; 0x9310 <mem_cpy.part.0>
    aef6:	f6 e0       	ldi	r31, 0x06	; 6
    aef8:	4f 16       	cp	r4, r31
    aefa:	51 04       	cpc	r5, r1
    aefc:	18 f1       	brcs	.+70     	; 0xaf44 <dir_register+0xd0>
    aefe:	f1 01       	movw	r30, r2
    af00:	b3 01       	movw	r22, r6
    af02:	a2 01       	movw	r20, r4
    af04:	81 91       	ld	r24, Z+
    af06:	91 91       	ld	r25, Z+
    af08:	00 97       	sbiw	r24, 0x00	; 0
    af0a:	d9 f0       	breq	.+54     	; 0xaf42 <dir_register+0xce>
    af0c:	20 e1       	ldi	r18, 0x10	; 16
    af0e:	30 e0       	ldi	r19, 0x00	; 0
    af10:	44 0f       	add	r20, r20
    af12:	55 1f       	adc	r21, r21
    af14:	66 1f       	adc	r22, r22
    af16:	77 1f       	adc	r23, r23
    af18:	dc 01       	movw	r26, r24
    af1a:	a1 70       	andi	r26, 0x01	; 1
    af1c:	bb 27       	eor	r27, r27
    af1e:	4a 0f       	add	r20, r26
    af20:	5b 1f       	adc	r21, r27
    af22:	61 1d       	adc	r22, r1
    af24:	71 1d       	adc	r23, r1
    af26:	96 95       	lsr	r25
    af28:	87 95       	ror	r24
    af2a:	60 ff       	sbrs	r22, 0
    af2c:	06 c0       	rjmp	.+12     	; 0xaf3a <dir_register+0xc6>
    af2e:	a1 e2       	ldi	r26, 0x21	; 33
    af30:	4a 27       	eor	r20, r26
    af32:	a0 e1       	ldi	r26, 0x10	; 16
    af34:	5a 27       	eor	r21, r26
    af36:	a1 e0       	ldi	r26, 0x01	; 1
    af38:	6a 27       	eor	r22, r26
    af3a:	21 50       	subi	r18, 0x01	; 1
    af3c:	31 09       	sbc	r19, r1
    af3e:	41 f7       	brne	.-48     	; 0xaf10 <dir_register+0x9c>
    af40:	e1 cf       	rjmp	.-62     	; 0xaf04 <dir_register+0x90>
    af42:	7a 01       	movw	r14, r20
    af44:	fe 01       	movw	r30, r28
    af46:	75 96       	adiw	r30, 0x15	; 21
    af48:	27 e0       	ldi	r18, 0x07	; 7
    af4a:	30 e0       	ldi	r19, 0x00	; 0
    af4c:	9e 2d       	mov	r25, r14
    af4e:	9f 70       	andi	r25, 0x0F	; 15
    af50:	80 e3       	ldi	r24, 0x30	; 48
    af52:	89 0f       	add	r24, r25
    af54:	8a 33       	cpi	r24, 0x3A	; 58
    af56:	10 f0       	brcs	.+4      	; 0xaf5c <dir_register+0xe8>
    af58:	87 e3       	ldi	r24, 0x37	; 55
    af5a:	89 0f       	add	r24, r25
    af5c:	21 50       	subi	r18, 0x01	; 1
    af5e:	31 09       	sbc	r19, r1
    af60:	82 93       	st	-Z, r24
    af62:	a4 e0       	ldi	r26, 0x04	; 4
    af64:	f6 94       	lsr	r15
    af66:	e7 94       	ror	r14
    af68:	aa 95       	dec	r26
    af6a:	e1 f7       	brne	.-8      	; 0xaf64 <dir_register+0xf0>
    af6c:	e1 14       	cp	r14, r1
    af6e:	f1 04       	cpc	r15, r1
    af70:	69 f7       	brne	.-38     	; 0xaf4c <dir_register+0xd8>
    af72:	ed e0       	ldi	r30, 0x0D	; 13
    af74:	f0 e0       	ldi	r31, 0x00	; 0
    af76:	ec 0f       	add	r30, r28
    af78:	fd 1f       	adc	r31, r29
    af7a:	e2 0f       	add	r30, r18
    af7c:	f3 1f       	adc	r31, r19
    af7e:	be e7       	ldi	r27, 0x7E	; 126
    af80:	b0 83       	st	Z, r27
    af82:	f5 01       	movw	r30, r10
    af84:	80 e0       	ldi	r24, 0x00	; 0
    af86:	90 e0       	ldi	r25, 0x00	; 0
    af88:	28 17       	cp	r18, r24
    af8a:	39 07       	cpc	r19, r25
    af8c:	29 f0       	breq	.+10     	; 0xaf98 <dir_register+0x124>
    af8e:	41 91       	ld	r20, Z+
    af90:	40 32       	cpi	r20, 0x20	; 32
    af92:	11 f0       	breq	.+4      	; 0xaf98 <dir_register+0x124>
    af94:	01 96       	adiw	r24, 0x01	; 1
    af96:	f8 cf       	rjmp	.-16     	; 0xaf88 <dir_register+0x114>
    af98:	f5 01       	movw	r30, r10
    af9a:	e8 0f       	add	r30, r24
    af9c:	f9 1f       	adc	r31, r25
    af9e:	28 30       	cpi	r18, 0x08	; 8
    afa0:	31 05       	cpc	r19, r1
    afa2:	50 f4       	brcc	.+20     	; 0xafb8 <dir_register+0x144>
    afa4:	ad e0       	ldi	r26, 0x0D	; 13
    afa6:	b0 e0       	ldi	r27, 0x00	; 0
    afa8:	ac 0f       	add	r26, r28
    afaa:	bd 1f       	adc	r27, r29
    afac:	a2 0f       	add	r26, r18
    afae:	b3 1f       	adc	r27, r19
    afb0:	8c 91       	ld	r24, X
    afb2:	2f 5f       	subi	r18, 0xFF	; 255
    afb4:	3f 4f       	sbci	r19, 0xFF	; 255
    afb6:	01 c0       	rjmp	.+2      	; 0xafba <dir_register+0x146>
    afb8:	80 e2       	ldi	r24, 0x20	; 32
    afba:	81 93       	st	Z+, r24
    afbc:	cf 01       	movw	r24, r30
    afbe:	8a 19       	sub	r24, r10
    afc0:	9b 09       	sbc	r25, r11
    afc2:	08 97       	sbiw	r24, 0x08	; 8
    afc4:	60 f3       	brcs	.-40     	; 0xaf9e <dir_register+0x12a>
    afc6:	c8 01       	movw	r24, r16
    afc8:	47 de       	rcall	.-882    	; 0xac58 <dir_find>
    afca:	00 97       	sbiw	r24, 0x00	; 0
    afcc:	71 f4       	brne	.+28     	; 0xafea <dir_register+0x176>
    afce:	ef ef       	ldi	r30, 0xFF	; 255
    afd0:	4e 1a       	sub	r4, r30
    afd2:	5e 0a       	sbc	r5, r30
    afd4:	6e 0a       	sbc	r6, r30
    afd6:	7e 0a       	sbc	r7, r30
    afd8:	f4 e6       	ldi	r31, 0x64	; 100
    afda:	4f 16       	cp	r4, r31
    afdc:	51 04       	cpc	r5, r1
    afde:	61 04       	cpc	r6, r1
    afe0:	71 04       	cpc	r7, r1
    afe2:	09 f0       	breq	.+2      	; 0xafe6 <dir_register+0x172>
    afe4:	7c cf       	rjmp	.-264    	; 0xaede <dir_register+0x6a>
    afe6:	27 e0       	ldi	r18, 0x07	; 7
    afe8:	b4 c0       	rjmp	.+360    	; 0xb152 <dir_register+0x2de>
    afea:	84 30       	cpi	r24, 0x04	; 4
    afec:	91 05       	cpc	r25, r1
    afee:	09 f0       	breq	.+2      	; 0xaff2 <dir_register+0x17e>
    aff0:	df c0       	rjmp	.+446    	; 0xb1b0 <dir_register+0x33c>
    aff2:	8c 85       	ldd	r24, Y+12	; 0x0c
    aff4:	d8 01       	movw	r26, r16
    aff6:	97 96       	adiw	r26, 0x27	; 39
    aff8:	8c 93       	st	X, r24
    affa:	8c 85       	ldd	r24, Y+12	; 0x0c
    affc:	81 ff       	sbrs	r24, 1
    affe:	0b c0       	rjmp	.+22     	; 0xb016 <dir_register+0x1a2>
    b000:	c4 01       	movw	r24, r8
    b002:	0c 96       	adiw	r24, 0x0c	; 12
    b004:	6d e0       	ldi	r22, 0x0D	; 13
    b006:	70 e0       	ldi	r23, 0x00	; 0
    b008:	0e 94 4a e5 	call	0x1ca94	; 0x1ca94 <__udivmodhi4>
    b00c:	7b 01       	movw	r14, r22
    b00e:	bf ef       	ldi	r27, 0xFF	; 255
    b010:	eb 1a       	sub	r14, r27
    b012:	fb 0a       	sbc	r15, r27
    b014:	03 c0       	rjmp	.+6      	; 0xb01c <dir_register+0x1a8>
    b016:	ee 24       	eor	r14, r14
    b018:	e3 94       	inc	r14
    b01a:	f1 2c       	mov	r15, r1
    b01c:	b7 01       	movw	r22, r14
    b01e:	c8 01       	movw	r24, r16
    b020:	c7 dc       	rcall	.-1650   	; 0xa9b0 <dir_alloc>
    b022:	00 97       	sbiw	r24, 0x00	; 0
    b024:	09 f0       	breq	.+2      	; 0xb028 <dir_register+0x1b4>
    b026:	c4 c0       	rjmp	.+392    	; 0xb1b0 <dir_register+0x33c>
    b028:	e1 e0       	ldi	r30, 0x01	; 1
    b02a:	ee 1a       	sub	r14, r30
    b02c:	f1 08       	sbc	r15, r1
    b02e:	09 f4       	brne	.+2      	; 0xb032 <dir_register+0x1be>
    b030:	92 c0       	rjmp	.+292    	; 0xb156 <dir_register+0x2e2>
    b032:	d8 01       	movw	r26, r16
    b034:	1e 96       	adiw	r26, 0x0e	; 14
    b036:	4d 91       	ld	r20, X+
    b038:	5d 91       	ld	r21, X+
    b03a:	6d 91       	ld	r22, X+
    b03c:	7c 91       	ld	r23, X
    b03e:	51 97       	sbiw	r26, 0x11	; 17
    b040:	c7 01       	movw	r24, r14
    b042:	e5 e0       	ldi	r30, 0x05	; 5
    b044:	88 0f       	add	r24, r24
    b046:	99 1f       	adc	r25, r25
    b048:	ea 95       	dec	r30
    b04a:	e1 f7       	brne	.-8      	; 0xb044 <dir_register+0x1d0>
    b04c:	48 1b       	sub	r20, r24
    b04e:	59 0b       	sbc	r21, r25
    b050:	61 09       	sbc	r22, r1
    b052:	71 09       	sbc	r23, r1
    b054:	c8 01       	movw	r24, r16
    b056:	4c d9       	rcall	.-3432   	; 0xa2f0 <dir_sdi>
    b058:	00 97       	sbiw	r24, 0x00	; 0
    b05a:	09 f0       	breq	.+2      	; 0xb05e <dir_register+0x1ea>
    b05c:	a9 c0       	rjmp	.+338    	; 0xb1b0 <dir_register+0x33c>
    b05e:	c5 01       	movw	r24, r10
    b060:	0e 94 21 49 	call	0x9242	; 0x9242 <sum_sfn>
    b064:	68 2e       	mov	r6, r24
    b066:	5f e0       	ldi	r21, 0x0F	; 15
    b068:	35 2e       	mov	r3, r21
    b06a:	6d e0       	ldi	r22, 0x0D	; 13
    b06c:	46 2e       	mov	r4, r22
    b06e:	7a e5       	ldi	r23, 0x5A	; 90
    b070:	87 2e       	mov	r8, r23
    b072:	73 e0       	ldi	r23, 0x03	; 3
    b074:	97 2e       	mov	r9, r23
    b076:	55 24       	eor	r5, r5
    b078:	53 94       	inc	r5
    b07a:	f8 01       	movw	r30, r16
    b07c:	46 89       	ldd	r20, Z+22	; 0x16
    b07e:	57 89       	ldd	r21, Z+23	; 0x17
    b080:	60 8d       	ldd	r22, Z+24	; 0x18
    b082:	71 8d       	ldd	r23, Z+25	; 0x19
    b084:	c6 01       	movw	r24, r12
    b086:	0e 94 e8 4c 	call	0x99d0	; 0x99d0 <move_window>
    b08a:	00 97       	sbiw	r24, 0x00	; 0
    b08c:	09 f0       	breq	.+2      	; 0xb090 <dir_register+0x21c>
    b08e:	90 c0       	rjmp	.+288    	; 0xb1b0 <dir_register+0x33c>
    b090:	7e 2c       	mov	r7, r14
    b092:	d8 01       	movw	r26, r16
    b094:	5a 96       	adiw	r26, 0x1a	; 26
    b096:	ed 91       	ld	r30, X+
    b098:	fc 91       	ld	r31, X
    b09a:	5b 97       	sbiw	r26, 0x1b	; 27
    b09c:	d6 01       	movw	r26, r12
    b09e:	1b 96       	adiw	r26, 0x0b	; 11
    b0a0:	6d 91       	ld	r22, X+
    b0a2:	7c 91       	ld	r23, X
    b0a4:	1c 97       	sbiw	r26, 0x0c	; 12
    b0a6:	65 86       	std	Z+13, r6	; 0x0d
    b0a8:	33 86       	std	Z+11, r3	; 0x0b
    b0aa:	14 86       	std	Z+12, r1	; 0x0c
    b0ac:	12 8e       	std	Z+26, r1	; 0x1a
    b0ae:	13 8e       	std	Z+27, r1	; 0x1b
    b0b0:	97 01       	movw	r18, r14
    b0b2:	33 27       	eor	r19, r19
    b0b4:	21 50       	subi	r18, 0x01	; 1
    b0b6:	31 09       	sbc	r19, r1
    b0b8:	42 9e       	mul	r4, r18
    b0ba:	c0 01       	movw	r24, r0
    b0bc:	43 9e       	mul	r4, r19
    b0be:	90 0d       	add	r25, r0
    b0c0:	11 24       	eor	r1, r1
    b0c2:	2d e4       	ldi	r18, 0x4D	; 77
    b0c4:	33 e0       	ldi	r19, 0x03	; 3
    b0c6:	3e 8b       	std	Y+22, r19	; 0x16
    b0c8:	2d 8b       	std	Y+21, r18	; 0x15
    b0ca:	20 e0       	ldi	r18, 0x00	; 0
    b0cc:	30 e0       	ldi	r19, 0x00	; 0
    b0ce:	2f 3f       	cpi	r18, 0xFF	; 255
    b0d0:	4f ef       	ldi	r20, 0xFF	; 255
    b0d2:	34 07       	cpc	r19, r20
    b0d4:	49 f0       	breq	.+18     	; 0xb0e8 <dir_register+0x274>
    b0d6:	9c 01       	movw	r18, r24
    b0d8:	22 0f       	add	r18, r18
    b0da:	33 1f       	adc	r19, r19
    b0dc:	26 0f       	add	r18, r22
    b0de:	37 1f       	adc	r19, r23
    b0e0:	d9 01       	movw	r26, r18
    b0e2:	2d 91       	ld	r18, X+
    b0e4:	3c 91       	ld	r19, X
    b0e6:	01 96       	adiw	r24, 0x01	; 1
    b0e8:	ad 89       	ldd	r26, Y+21	; 0x15
    b0ea:	be 89       	ldd	r27, Y+22	; 0x16
    b0ec:	4d 91       	ld	r20, X+
    b0ee:	be 8b       	std	Y+22, r27	; 0x16
    b0f0:	ad 8b       	std	Y+21, r26	; 0x15
    b0f2:	df 01       	movw	r26, r30
    b0f4:	a4 0f       	add	r26, r20
    b0f6:	b1 1d       	adc	r27, r1
    b0f8:	2c 93       	st	X, r18
    b0fa:	11 96       	adiw	r26, 0x01	; 1
    b0fc:	3c 93       	st	X, r19
    b0fe:	21 15       	cp	r18, r1
    b100:	31 05       	cpc	r19, r1
    b102:	11 f4       	brne	.+4      	; 0xb108 <dir_register+0x294>
    b104:	2f ef       	ldi	r18, 0xFF	; 255
    b106:	3f ef       	ldi	r19, 0xFF	; 255
    b108:	4d 89       	ldd	r20, Y+21	; 0x15
    b10a:	5e 89       	ldd	r21, Y+22	; 0x16
    b10c:	84 16       	cp	r8, r20
    b10e:	95 06       	cpc	r9, r21
    b110:	f1 f6       	brne	.-68     	; 0xb0ce <dir_register+0x25a>
    b112:	2f 3f       	cpi	r18, 0xFF	; 255
    b114:	3f 4f       	sbci	r19, 0xFF	; 255
    b116:	49 f0       	breq	.+18     	; 0xb12a <dir_register+0x2b6>
    b118:	88 0f       	add	r24, r24
    b11a:	99 1f       	adc	r25, r25
    b11c:	db 01       	movw	r26, r22
    b11e:	a8 0f       	add	r26, r24
    b120:	b9 1f       	adc	r27, r25
    b122:	8d 91       	ld	r24, X+
    b124:	9c 91       	ld	r25, X
    b126:	89 2b       	or	r24, r25
    b128:	19 f4       	brne	.+6      	; 0xb130 <dir_register+0x2bc>
    b12a:	87 2d       	mov	r24, r7
    b12c:	80 64       	ori	r24, 0x40	; 64
    b12e:	78 2e       	mov	r7, r24
    b130:	70 82       	st	Z, r7
    b132:	d6 01       	movw	r26, r12
    b134:	13 96       	adiw	r26, 0x03	; 3
    b136:	5c 92       	st	X, r5
    b138:	60 e0       	ldi	r22, 0x00	; 0
    b13a:	70 e0       	ldi	r23, 0x00	; 0
    b13c:	c8 01       	movw	r24, r16
    b13e:	50 db       	rcall	.-2400   	; 0xa7e0 <dir_next>
    b140:	00 97       	sbiw	r24, 0x00	; 0
    b142:	b1 f5       	brne	.+108    	; 0xb1b0 <dir_register+0x33c>
    b144:	b1 e0       	ldi	r27, 0x01	; 1
    b146:	eb 1a       	sub	r14, r27
    b148:	f1 08       	sbc	r15, r1
    b14a:	09 f0       	breq	.+2      	; 0xb14e <dir_register+0x2da>
    b14c:	96 cf       	rjmp	.-212    	; 0xb07a <dir_register+0x206>
    b14e:	03 c0       	rjmp	.+6      	; 0xb156 <dir_register+0x2e2>
    b150:	26 e0       	ldi	r18, 0x06	; 6
    b152:	90 e0       	ldi	r25, 0x00	; 0
    b154:	2e c0       	rjmp	.+92     	; 0xb1b2 <dir_register+0x33e>
    b156:	d8 01       	movw	r26, r16
    b158:	56 96       	adiw	r26, 0x16	; 22
    b15a:	4d 91       	ld	r20, X+
    b15c:	5d 91       	ld	r21, X+
    b15e:	6d 91       	ld	r22, X+
    b160:	7c 91       	ld	r23, X
    b162:	59 97       	sbiw	r26, 0x19	; 25
    b164:	c6 01       	movw	r24, r12
    b166:	0e 94 e8 4c 	call	0x99d0	; 0x99d0 <move_window>
    b16a:	00 97       	sbiw	r24, 0x00	; 0
    b16c:	09 f5       	brne	.+66     	; 0xb1b0 <dir_register+0x33c>
    b16e:	40 e2       	ldi	r20, 0x20	; 32
    b170:	50 e0       	ldi	r21, 0x00	; 0
    b172:	60 e0       	ldi	r22, 0x00	; 0
    b174:	70 e0       	ldi	r23, 0x00	; 0
    b176:	f8 01       	movw	r30, r16
    b178:	82 8d       	ldd	r24, Z+26	; 0x1a
    b17a:	93 8d       	ldd	r25, Z+27	; 0x1b
    b17c:	0e 94 1f 48 	call	0x903e	; 0x903e <mem_set>
    b180:	4b e0       	ldi	r20, 0x0B	; 11
    b182:	50 e0       	ldi	r21, 0x00	; 0
    b184:	b5 01       	movw	r22, r10
    b186:	d8 01       	movw	r26, r16
    b188:	5a 96       	adiw	r26, 0x1a	; 26
    b18a:	8d 91       	ld	r24, X+
    b18c:	9c 91       	ld	r25, X
    b18e:	5b 97       	sbiw	r26, 0x1b	; 27
    b190:	0e 94 88 49 	call	0x9310	; 0x9310 <mem_cpy.part.0>
    b194:	d8 01       	movw	r26, r16
    b196:	5a 96       	adiw	r26, 0x1a	; 26
    b198:	ed 91       	ld	r30, X+
    b19a:	fc 91       	ld	r31, X
    b19c:	5b 97       	sbiw	r26, 0x1b	; 27
    b19e:	97 96       	adiw	r26, 0x27	; 39
    b1a0:	8c 91       	ld	r24, X
    b1a2:	88 71       	andi	r24, 0x18	; 24
    b1a4:	84 87       	std	Z+12, r24	; 0x0c
    b1a6:	81 e0       	ldi	r24, 0x01	; 1
    b1a8:	f6 01       	movw	r30, r12
    b1aa:	83 83       	std	Z+3, r24	; 0x03
    b1ac:	20 e0       	ldi	r18, 0x00	; 0
    b1ae:	d1 cf       	rjmp	.-94     	; 0xb152 <dir_register+0x2de>
    b1b0:	28 2f       	mov	r18, r24
    b1b2:	82 2f       	mov	r24, r18
    b1b4:	66 96       	adiw	r28, 0x16	; 22
    b1b6:	e2 e1       	ldi	r30, 0x12	; 18
    b1b8:	0c 94 0f e6 	jmp	0x1cc1e	; 0x1cc1e <__epilogue_restores__>

0000b1bc <follow_path>:
    b1bc:	aa e0       	ldi	r26, 0x0A	; 10
    b1be:	b0 e0       	ldi	r27, 0x00	; 0
    b1c0:	e4 ee       	ldi	r30, 0xE4	; 228
    b1c2:	f8 e5       	ldi	r31, 0x58	; 88
    b1c4:	0c 94 f3 e5 	jmp	0x1cbe6	; 0x1cbe6 <__prologue_saves__>
    b1c8:	7c 01       	movw	r14, r24
    b1ca:	3b 01       	movw	r6, r22
    b1cc:	dc 01       	movw	r26, r24
    b1ce:	0d 90       	ld	r0, X+
    b1d0:	bc 91       	ld	r27, X
    b1d2:	a0 2d       	mov	r26, r0
    b1d4:	be 83       	std	Y+6, r27	; 0x06
    b1d6:	ad 83       	std	Y+5, r26	; 0x05
    b1d8:	fb 01       	movw	r30, r22
    b1da:	80 81       	ld	r24, Z
    b1dc:	8f 32       	cpi	r24, 0x2F	; 47
    b1de:	11 f0       	breq	.+4      	; 0xb1e4 <follow_path+0x28>
    b1e0:	8c 35       	cpi	r24, 0x5C	; 92
    b1e2:	11 f4       	brne	.+4      	; 0xb1e8 <follow_path+0x2c>
    b1e4:	93 01       	movw	r18, r6
    b1e6:	0c c0       	rjmp	.+24     	; 0xb200 <follow_path+0x44>
    b1e8:	ed 81       	ldd	r30, Y+5	; 0x05
    b1ea:	fe 81       	ldd	r31, Y+6	; 0x06
    b1ec:	85 89       	ldd	r24, Z+21	; 0x15
    b1ee:	96 89       	ldd	r25, Z+22	; 0x16
    b1f0:	a7 89       	ldd	r26, Z+23	; 0x17
    b1f2:	b0 8d       	ldd	r27, Z+24	; 0x18
    b1f4:	f7 01       	movw	r30, r14
    b1f6:	86 83       	std	Z+6, r24	; 0x06
    b1f8:	97 83       	std	Z+7, r25	; 0x07
    b1fa:	a0 87       	std	Z+8, r26	; 0x08
    b1fc:	b1 87       	std	Z+9, r27	; 0x09
    b1fe:	0e c0       	rjmp	.+28     	; 0xb21c <follow_path+0x60>
    b200:	39 01       	movw	r6, r18
    b202:	d9 01       	movw	r26, r18
    b204:	8c 91       	ld	r24, X
    b206:	2f 5f       	subi	r18, 0xFF	; 255
    b208:	3f 4f       	sbci	r19, 0xFF	; 255
    b20a:	8f 32       	cpi	r24, 0x2F	; 47
    b20c:	c9 f3       	breq	.-14     	; 0xb200 <follow_path+0x44>
    b20e:	8c 35       	cpi	r24, 0x5C	; 92
    b210:	b9 f3       	breq	.-18     	; 0xb200 <follow_path+0x44>
    b212:	f7 01       	movw	r30, r14
    b214:	16 82       	std	Z+6, r1	; 0x06
    b216:	17 82       	std	Z+7, r1	; 0x07
    b218:	10 86       	std	Z+8, r1	; 0x08
    b21a:	11 86       	std	Z+9, r1	; 0x09
    b21c:	d3 01       	movw	r26, r6
    b21e:	8c 91       	ld	r24, X
    b220:	80 32       	cpi	r24, 0x20	; 32
    b222:	58 f0       	brcs	.+22     	; 0xb23a <follow_path+0x7e>
    b224:	f7 01       	movw	r30, r14
    b226:	7c 96       	adiw	r30, 0x1c	; 28
    b228:	f8 87       	std	Y+8, r31	; 0x08
    b22a:	ef 83       	std	Y+7, r30	; 0x07
    b22c:	2d 81       	ldd	r18, Y+5	; 0x05
    b22e:	3e 81       	ldd	r19, Y+6	; 0x06
    b230:	2b 5c       	subi	r18, 0xCB	; 203
    b232:	3f 4f       	sbci	r19, 0xFF	; 255
    b234:	3a 87       	std	Y+10, r19	; 0x0a
    b236:	29 87       	std	Y+9, r18	; 0x09
    b238:	98 c0       	rjmp	.+304    	; 0xb36a <follow_path+0x1ae>
    b23a:	80 e8       	ldi	r24, 0x80	; 128
    b23c:	d7 01       	movw	r26, r14
    b23e:	97 96       	adiw	r26, 0x27	; 39
    b240:	8c 93       	st	X, r24
    b242:	40 e0       	ldi	r20, 0x00	; 0
    b244:	50 e0       	ldi	r21, 0x00	; 0
    b246:	ba 01       	movw	r22, r20
    b248:	c7 01       	movw	r24, r14
    b24a:	52 d8       	rcall	.-3932   	; 0xa2f0 <dir_sdi>
    b24c:	e9 c1       	rjmp	.+978    	; 0xb620 <follow_path+0x464>
    b24e:	6c 35       	cpi	r22, 0x5C	; 92
    b250:	71 05       	cpc	r23, r1
    b252:	b9 f1       	breq	.+110    	; 0xb2c2 <follow_path+0x106>
    b254:	60 38       	cpi	r22, 0x80	; 128
    b256:	71 05       	cpc	r23, r1
    b258:	28 f4       	brcc	.+10     	; 0xb264 <follow_path+0xa8>
    b25a:	e4 ef       	ldi	r30, 0xF4	; 244
    b25c:	f7 e0       	ldi	r31, 0x07	; 7
    b25e:	41 91       	ld	r20, Z+
    b260:	41 11       	cpse	r20, r1
    b262:	8d c0       	rjmp	.+282    	; 0xb37e <follow_path+0x1c2>
    b264:	0f 3f       	cpi	r16, 0xFF	; 255
    b266:	11 05       	cpc	r17, r1
    b268:	08 f0       	brcs	.+2      	; 0xb26c <follow_path+0xb0>
    b26a:	bc c1       	rjmp	.+888    	; 0xb5e4 <follow_path+0x428>
    b26c:	f8 01       	movw	r30, r16
    b26e:	ee 0f       	add	r30, r30
    b270:	ff 1f       	adc	r31, r31
    b272:	ea 0d       	add	r30, r10
    b274:	fb 1d       	adc	r31, r11
    b276:	71 83       	std	Z+1, r23	; 0x01
    b278:	60 83       	st	Z, r22
    b27a:	0f 5f       	subi	r16, 0xFF	; 255
    b27c:	1f 4f       	sbci	r17, 0xFF	; 255
    b27e:	ce 01       	movw	r24, r28
    b280:	01 96       	adiw	r24, 0x01	; 1
    b282:	0e 94 37 48 	call	0x906e	; 0x906e <tchar2uni>
    b286:	6f 3f       	cpi	r22, 0xFF	; 255
    b288:	bf ef       	ldi	r27, 0xFF	; 255
    b28a:	7b 07       	cpc	r23, r27
    b28c:	8b 07       	cpc	r24, r27
    b28e:	9b 07       	cpc	r25, r27
    b290:	09 f4       	brne	.+2      	; 0xb294 <follow_path+0xd8>
    b292:	a8 c1       	rjmp	.+848    	; 0xb5e4 <follow_path+0x428>
    b294:	61 15       	cp	r22, r1
    b296:	71 05       	cpc	r23, r1
    b298:	e1 e0       	ldi	r30, 0x01	; 1
    b29a:	8e 07       	cpc	r24, r30
    b29c:	91 05       	cpc	r25, r1
    b29e:	48 f0       	brcs	.+18     	; 0xb2b2 <follow_path+0xf6>
    b2a0:	f8 01       	movw	r30, r16
    b2a2:	ee 0f       	add	r30, r30
    b2a4:	ff 1f       	adc	r31, r31
    b2a6:	ea 0d       	add	r30, r10
    b2a8:	fb 1d       	adc	r31, r11
    b2aa:	91 83       	std	Z+1, r25	; 0x01
    b2ac:	80 83       	st	Z, r24
    b2ae:	0f 5f       	subi	r16, 0xFF	; 255
    b2b0:	1f 4f       	sbci	r17, 0xFF	; 255
    b2b2:	9b 01       	movw	r18, r22
    b2b4:	60 32       	cpi	r22, 0x20	; 32
    b2b6:	71 05       	cpc	r23, r1
    b2b8:	08 f4       	brcc	.+2      	; 0xb2bc <follow_path+0x100>
    b2ba:	6b c0       	rjmp	.+214    	; 0xb392 <follow_path+0x1d6>
    b2bc:	6f 32       	cpi	r22, 0x2F	; 47
    b2be:	71 05       	cpc	r23, r1
    b2c0:	31 f6       	brne	.-116    	; 0xb24e <follow_path+0x92>
    b2c2:	e9 81       	ldd	r30, Y+1	; 0x01
    b2c4:	fa 81       	ldd	r31, Y+2	; 0x02
    b2c6:	80 81       	ld	r24, Z
    b2c8:	8f 32       	cpi	r24, 0x2F	; 47
    b2ca:	09 f4       	brne	.+2      	; 0xb2ce <follow_path+0x112>
    b2cc:	5e c0       	rjmp	.+188    	; 0xb38a <follow_path+0x1ce>
    b2ce:	8c 35       	cpi	r24, 0x5C	; 92
    b2d0:	09 f4       	brne	.+2      	; 0xb2d4 <follow_path+0x118>
    b2d2:	5b c0       	rjmp	.+182    	; 0xb38a <follow_path+0x1ce>
    b2d4:	1b 82       	std	Y+3, r1	; 0x03
    b2d6:	69 80       	ldd	r6, Y+1	; 0x01
    b2d8:	7a 80       	ldd	r7, Y+2	; 0x02
    b2da:	f8 01       	movw	r30, r16
    b2dc:	ee 0f       	add	r30, r30
    b2de:	ff 1f       	adc	r31, r31
    b2e0:	01 30       	cpi	r16, 0x01	; 1
    b2e2:	11 05       	cpc	r17, r1
    b2e4:	09 f0       	breq	.+2      	; 0xb2e8 <follow_path+0x12c>
    b2e6:	58 c0       	rjmp	.+176    	; 0xb398 <follow_path+0x1dc>
    b2e8:	d5 01       	movw	r26, r10
    b2ea:	8d 91       	ld	r24, X+
    b2ec:	9c 91       	ld	r25, X
    b2ee:	8e 97       	sbiw	r24, 0x2e	; 46
    b2f0:	09 f0       	breq	.+2      	; 0xb2f4 <follow_path+0x138>
    b2f2:	5d c0       	rjmp	.+186    	; 0xb3ae <follow_path+0x1f2>
    b2f4:	ea 0d       	add	r30, r10
    b2f6:	fb 1d       	adc	r31, r11
    b2f8:	11 82       	std	Z+1, r1	; 0x01
    b2fa:	10 82       	st	Z, r1
    b2fc:	f7 01       	movw	r30, r14
    b2fe:	7c 96       	adiw	r30, 0x1c	; 28
    b300:	80 e0       	ldi	r24, 0x00	; 0
    b302:	90 e0       	ldi	r25, 0x00	; 0
    b304:	80 17       	cp	r24, r16
    b306:	91 07       	cpc	r25, r17
    b308:	08 f0       	brcs	.+2      	; 0xb30c <follow_path+0x150>
    b30a:	54 c0       	rjmp	.+168    	; 0xb3b4 <follow_path+0x1f8>
    b30c:	2e e2       	ldi	r18, 0x2E	; 46
    b30e:	21 93       	st	Z+, r18
    b310:	01 96       	adiw	r24, 0x01	; 1
    b312:	8b 30       	cpi	r24, 0x0B	; 11
    b314:	91 05       	cpc	r25, r1
    b316:	b1 f7       	brne	.-20     	; 0xb304 <follow_path+0x148>
    b318:	8b 81       	ldd	r24, Y+3	; 0x03
    b31a:	80 62       	ori	r24, 0x20	; 32
    b31c:	f7 01       	movw	r30, r14
    b31e:	87 a3       	std	Z+39, r24	; 0x27
    b320:	80 e0       	ldi	r24, 0x00	; 0
    b322:	90 e0       	ldi	r25, 0x00	; 0
    b324:	00 97       	sbiw	r24, 0x00	; 0
    b326:	09 f0       	breq	.+2      	; 0xb32a <follow_path+0x16e>
    b328:	7b c1       	rjmp	.+758    	; 0xb620 <follow_path+0x464>
    b32a:	c7 01       	movw	r24, r14
    b32c:	95 dc       	rcall	.-1750   	; 0xac58 <dir_find>
    b32e:	d7 01       	movw	r26, r14
    b330:	97 96       	adiw	r26, 0x27	; 39
    b332:	2c 91       	ld	r18, X
    b334:	97 97       	sbiw	r26, 0x27	; 39
    b336:	00 97       	sbiw	r24, 0x00	; 0
    b338:	09 f0       	breq	.+2      	; 0xb33c <follow_path+0x180>
    b33a:	57 c1       	rjmp	.+686    	; 0xb5ea <follow_path+0x42e>
    b33c:	22 fd       	sbrc	r18, 2
    b33e:	70 c1       	rjmp	.+736    	; 0xb620 <follow_path+0x464>
    b340:	f7 01       	movw	r30, r14
    b342:	84 81       	ldd	r24, Z+4	; 0x04
    b344:	84 ff       	sbrs	r24, 4
    b346:	63 c1       	rjmp	.+710    	; 0xb60e <follow_path+0x452>
    b348:	66 85       	ldd	r22, Z+14	; 0x0e
    b34a:	77 85       	ldd	r23, Z+15	; 0x0f
    b34c:	71 70       	andi	r23, 0x01	; 1
    b34e:	29 85       	ldd	r18, Y+9	; 0x09
    b350:	3a 85       	ldd	r19, Y+10	; 0x0a
    b352:	62 0f       	add	r22, r18
    b354:	73 1f       	adc	r23, r19
    b356:	ad 81       	ldd	r26, Y+5	; 0x05
    b358:	be 81       	ldd	r27, Y+6	; 0x06
    b35a:	8c 91       	ld	r24, X
    b35c:	0e 94 59 4b 	call	0x96b2	; 0x96b2 <ld_clust.isra.4>
    b360:	f7 01       	movw	r30, r14
    b362:	66 83       	std	Z+6, r22	; 0x06
    b364:	77 83       	std	Z+7, r23	; 0x07
    b366:	80 87       	std	Z+8, r24	; 0x08
    b368:	91 87       	std	Z+9, r25	; 0x09
    b36a:	7a 82       	std	Y+2, r7	; 0x02
    b36c:	69 82       	std	Y+1, r6	; 0x01
    b36e:	d7 01       	movw	r26, r14
    b370:	ed 91       	ld	r30, X+
    b372:	fc 91       	ld	r31, X
    b374:	a3 84       	ldd	r10, Z+11	; 0x0b
    b376:	b4 84       	ldd	r11, Z+12	; 0x0c
    b378:	00 e0       	ldi	r16, 0x00	; 0
    b37a:	10 e0       	ldi	r17, 0x00	; 0
    b37c:	80 cf       	rjmp	.-256    	; 0xb27e <follow_path+0xc2>
    b37e:	50 e0       	ldi	r21, 0x00	; 0
    b380:	24 17       	cp	r18, r20
    b382:	35 07       	cpc	r19, r21
    b384:	09 f0       	breq	.+2      	; 0xb388 <follow_path+0x1cc>
    b386:	6b cf       	rjmp	.-298    	; 0xb25e <follow_path+0xa2>
    b388:	2d c1       	rjmp	.+602    	; 0xb5e4 <follow_path+0x428>
    b38a:	31 96       	adiw	r30, 0x01	; 1
    b38c:	fa 83       	std	Y+2, r31	; 0x02
    b38e:	e9 83       	std	Y+1, r30	; 0x01
    b390:	98 cf       	rjmp	.-208    	; 0xb2c2 <follow_path+0x106>
    b392:	f4 e0       	ldi	r31, 0x04	; 4
    b394:	fb 83       	std	Y+3, r31	; 0x03
    b396:	9f cf       	rjmp	.-194    	; 0xb2d6 <follow_path+0x11a>
    b398:	02 30       	cpi	r16, 0x02	; 2
    b39a:	11 05       	cpc	r17, r1
    b39c:	41 f4       	brne	.+16     	; 0xb3ae <follow_path+0x1f2>
    b39e:	d5 01       	movw	r26, r10
    b3a0:	12 96       	adiw	r26, 0x02	; 2
    b3a2:	8d 91       	ld	r24, X+
    b3a4:	9c 91       	ld	r25, X
    b3a6:	13 97       	sbiw	r26, 0x03	; 3
    b3a8:	8e 97       	sbiw	r24, 0x2e	; 46
    b3aa:	09 f4       	brne	.+2      	; 0xb3ae <follow_path+0x1f2>
    b3ac:	9e cf       	rjmp	.-196    	; 0xb2ea <follow_path+0x12e>
    b3ae:	ea 0d       	add	r30, r10
    b3b0:	fb 1d       	adc	r31, r11
    b3b2:	09 c0       	rjmp	.+18     	; 0xb3c6 <follow_path+0x20a>
    b3b4:	20 e2       	ldi	r18, 0x20	; 32
    b3b6:	ab cf       	rjmp	.-170    	; 0xb30e <follow_path+0x152>
    b3b8:	92 91       	ld	r25, -Z
    b3ba:	82 91       	ld	r24, -Z
    b3bc:	80 32       	cpi	r24, 0x20	; 32
    b3be:	91 05       	cpc	r25, r1
    b3c0:	31 f4       	brne	.+12     	; 0xb3ce <follow_path+0x212>
    b3c2:	01 50       	subi	r16, 0x01	; 1
    b3c4:	11 09       	sbc	r17, r1
    b3c6:	01 15       	cp	r16, r1
    b3c8:	11 05       	cpc	r17, r1
    b3ca:	b1 f7       	brne	.-20     	; 0xb3b8 <follow_path+0x1fc>
    b3cc:	02 c0       	rjmp	.+4      	; 0xb3d2 <follow_path+0x216>
    b3ce:	8e 97       	sbiw	r24, 0x2e	; 46
    b3d0:	c1 f3       	breq	.-16     	; 0xb3c2 <follow_path+0x206>
    b3d2:	f8 01       	movw	r30, r16
    b3d4:	ee 0f       	add	r30, r30
    b3d6:	ff 1f       	adc	r31, r31
    b3d8:	ea 0d       	add	r30, r10
    b3da:	fb 1d       	adc	r31, r11
    b3dc:	11 82       	std	Z+1, r1	; 0x01
    b3de:	10 82       	st	Z, r1
    b3e0:	01 15       	cp	r16, r1
    b3e2:	11 05       	cpc	r17, r1
    b3e4:	09 f4       	brne	.+2      	; 0xb3e8 <follow_path+0x22c>
    b3e6:	fe c0       	rjmp	.+508    	; 0xb5e4 <follow_path+0x428>
    b3e8:	d5 01       	movw	r26, r10
    b3ea:	41 2c       	mov	r4, r1
    b3ec:	51 2c       	mov	r5, r1
    b3ee:	8d 91       	ld	r24, X+
    b3f0:	9d 91       	ld	r25, X+
    b3f2:	80 32       	cpi	r24, 0x20	; 32
    b3f4:	91 05       	cpc	r25, r1
    b3f6:	21 f4       	brne	.+8      	; 0xb400 <follow_path+0x244>
    b3f8:	2f ef       	ldi	r18, 0xFF	; 255
    b3fa:	42 1a       	sub	r4, r18
    b3fc:	52 0a       	sbc	r5, r18
    b3fe:	f7 cf       	rjmp	.-18     	; 0xb3ee <follow_path+0x232>
    b400:	41 14       	cp	r4, r1
    b402:	51 04       	cpc	r5, r1
    b404:	11 f4       	brne	.+4      	; 0xb40a <follow_path+0x24e>
    b406:	8e 97       	sbiw	r24, 0x2e	; 46
    b408:	39 f4       	brne	.+14     	; 0xb418 <follow_path+0x25c>
    b40a:	3b 81       	ldd	r19, Y+3	; 0x03
    b40c:	33 60       	ori	r19, 0x03	; 3
    b40e:	3b 83       	std	Y+3, r19	; 0x03
    b410:	03 c0       	rjmp	.+6      	; 0xb418 <follow_path+0x25c>
    b412:	01 50       	subi	r16, 0x01	; 1
    b414:	11 09       	sbc	r17, r1
    b416:	21 f0       	breq	.+8      	; 0xb420 <follow_path+0x264>
    b418:	92 91       	ld	r25, -Z
    b41a:	82 91       	ld	r24, -Z
    b41c:	8e 97       	sbiw	r24, 0x2e	; 46
    b41e:	c9 f7       	brne	.-14     	; 0xb412 <follow_path+0x256>
    b420:	4b e0       	ldi	r20, 0x0B	; 11
    b422:	50 e0       	ldi	r21, 0x00	; 0
    b424:	60 e2       	ldi	r22, 0x20	; 32
    b426:	70 e0       	ldi	r23, 0x00	; 0
    b428:	8f 81       	ldd	r24, Y+7	; 0x07
    b42a:	98 85       	ldd	r25, Y+8	; 0x08
    b42c:	0e 94 1f 48 	call	0x903e	; 0x903e <mem_set>
    b430:	48 e0       	ldi	r20, 0x08	; 8
    b432:	84 2e       	mov	r8, r20
    b434:	91 2c       	mov	r9, r1
    b436:	c1 2c       	mov	r12, r1
    b438:	d1 2c       	mov	r13, r1
    b43a:	1c 82       	std	Y+4, r1	; 0x04
    b43c:	12 01       	movw	r2, r4
    b43e:	8f ef       	ldi	r24, 0xFF	; 255
    b440:	28 1a       	sub	r2, r24
    b442:	38 0a       	sbc	r3, r24
    b444:	44 0c       	add	r4, r4
    b446:	55 1c       	adc	r5, r5
    b448:	f5 01       	movw	r30, r10
    b44a:	e4 0d       	add	r30, r4
    b44c:	f5 1d       	adc	r31, r5
    b44e:	80 81       	ld	r24, Z
    b450:	91 81       	ldd	r25, Z+1	; 0x01
    b452:	00 97       	sbiw	r24, 0x00	; 0
    b454:	09 f4       	brne	.+2      	; 0xb458 <follow_path+0x29c>
    b456:	98 c0       	rjmp	.+304    	; 0xb588 <follow_path+0x3cc>
    b458:	80 32       	cpi	r24, 0x20	; 32
    b45a:	91 05       	cpc	r25, r1
    b45c:	31 f0       	breq	.+12     	; 0xb46a <follow_path+0x2ae>
    b45e:	8e 32       	cpi	r24, 0x2E	; 46
    b460:	91 05       	cpc	r25, r1
    b462:	41 f4       	brne	.+16     	; 0xb474 <follow_path+0x2b8>
    b464:	20 16       	cp	r2, r16
    b466:	31 06       	cpc	r3, r17
    b468:	61 f0       	breq	.+24     	; 0xb482 <follow_path+0x2c6>
    b46a:	9b 81       	ldd	r25, Y+3	; 0x03
    b46c:	93 60       	ori	r25, 0x03	; 3
    b46e:	9b 83       	std	Y+3, r25	; 0x03
    b470:	21 01       	movw	r4, r2
    b472:	e4 cf       	rjmp	.-56     	; 0xb43c <follow_path+0x280>
    b474:	c8 14       	cp	r12, r8
    b476:	d9 04       	cpc	r13, r9
    b478:	40 f4       	brcc	.+16     	; 0xb48a <follow_path+0x2ce>
    b47a:	20 16       	cp	r2, r16
    b47c:	31 06       	cpc	r3, r17
    b47e:	31 f5       	brne	.+76     	; 0xb4cc <follow_path+0x310>
    b480:	c9 c0       	rjmp	.+402    	; 0xb614 <follow_path+0x458>
    b482:	c8 14       	cp	r12, r8
    b484:	d9 04       	cpc	r13, r9
    b486:	08 f4       	brcc	.+2      	; 0xb48a <follow_path+0x2ce>
    b488:	c5 c0       	rjmp	.+394    	; 0xb614 <follow_path+0x458>
    b48a:	ab e0       	ldi	r26, 0x0B	; 11
    b48c:	8a 16       	cp	r8, r26
    b48e:	91 04       	cpc	r9, r1
    b490:	39 f4       	brne	.+14     	; 0xb4a0 <follow_path+0x2e4>
    b492:	bb 81       	ldd	r27, Y+3	; 0x03
    b494:	b3 60       	ori	r27, 0x03	; 3
    b496:	bb 83       	std	Y+3, r27	; 0x03
    b498:	2b e0       	ldi	r18, 0x0B	; 11
    b49a:	82 2e       	mov	r8, r18
    b49c:	91 2c       	mov	r9, r1
    b49e:	74 c0       	rjmp	.+232    	; 0xb588 <follow_path+0x3cc>
    b4a0:	20 16       	cp	r2, r16
    b4a2:	31 06       	cpc	r3, r17
    b4a4:	39 f0       	breq	.+14     	; 0xb4b4 <follow_path+0x2f8>
    b4a6:	eb 81       	ldd	r30, Y+3	; 0x03
    b4a8:	e3 60       	ori	r30, 0x03	; 3
    b4aa:	eb 83       	std	Y+3, r30	; 0x03
    b4ac:	02 15       	cp	r16, r2
    b4ae:	13 05       	cpc	r17, r3
    b4b0:	08 f4       	brcc	.+2      	; 0xb4b4 <follow_path+0x2f8>
    b4b2:	6a c0       	rjmp	.+212    	; 0xb588 <follow_path+0x3cc>
    b4b4:	fc 81       	ldd	r31, Y+4	; 0x04
    b4b6:	ff 0f       	add	r31, r31
    b4b8:	ff 0f       	add	r31, r31
    b4ba:	fc 83       	std	Y+4, r31	; 0x04
    b4bc:	18 01       	movw	r2, r16
    b4be:	8b e0       	ldi	r24, 0x0B	; 11
    b4c0:	88 2e       	mov	r8, r24
    b4c2:	91 2c       	mov	r9, r1
    b4c4:	98 e0       	ldi	r25, 0x08	; 8
    b4c6:	c9 2e       	mov	r12, r25
    b4c8:	d1 2c       	mov	r13, r1
    b4ca:	d2 cf       	rjmp	.-92     	; 0xb470 <follow_path+0x2b4>
    b4cc:	80 38       	cpi	r24, 0x80	; 128
    b4ce:	91 05       	cpc	r25, r1
    b4d0:	78 f1       	brcs	.+94     	; 0xb530 <follow_path+0x374>
    b4d2:	2b 81       	ldd	r18, Y+3	; 0x03
    b4d4:	22 60       	ori	r18, 0x02	; 2
    b4d6:	52 2e       	mov	r5, r18
    b4d8:	bc 01       	movw	r22, r24
    b4da:	80 e0       	ldi	r24, 0x00	; 0
    b4dc:	90 e0       	ldi	r25, 0x00	; 0
    b4de:	45 eb       	ldi	r20, 0xB5	; 181
    b4e0:	51 e0       	ldi	r21, 0x01	; 1
    b4e2:	0e 94 cd 6a 	call	0xd59a	; 0xd59a <ff_uni2oem>
    b4e6:	87 ff       	sbrs	r24, 7
    b4e8:	08 c0       	rjmp	.+16     	; 0xb4fa <follow_path+0x33e>
    b4ea:	8f 77       	andi	r24, 0x7F	; 127
    b4ec:	99 27       	eor	r25, r25
    b4ee:	fc 01       	movw	r30, r24
    b4f0:	e3 53       	subi	r30, 0x33	; 51
    b4f2:	fd 4f       	sbci	r31, 0xFD	; 253
    b4f4:	80 81       	ld	r24, Z
    b4f6:	90 e0       	ldi	r25, 0x00	; 0
    b4f8:	18 c0       	rjmp	.+48     	; 0xb52a <follow_path+0x36e>
    b4fa:	8f 3f       	cpi	r24, 0xFF	; 255
    b4fc:	91 05       	cpc	r25, r1
    b4fe:	a9 f0       	breq	.+42     	; 0xb52a <follow_path+0x36e>
    b500:	a0 f0       	brcs	.+40     	; 0xb52a <follow_path+0x36e>
    b502:	94 01       	movw	r18, r8
    b504:	21 50       	subi	r18, 0x01	; 1
    b506:	31 09       	sbc	r19, r1
    b508:	c2 16       	cp	r12, r18
    b50a:	d3 06       	cpc	r13, r19
    b50c:	28 f0       	brcs	.+10     	; 0xb518 <follow_path+0x35c>
    b50e:	3b 81       	ldd	r19, Y+3	; 0x03
    b510:	33 60       	ori	r19, 0x03	; 3
    b512:	3b 83       	std	Y+3, r19	; 0x03
    b514:	64 01       	movw	r12, r8
    b516:	ac cf       	rjmp	.-168    	; 0xb470 <follow_path+0x2b4>
    b518:	f7 01       	movw	r30, r14
    b51a:	ec 0d       	add	r30, r12
    b51c:	fd 1d       	adc	r31, r13
    b51e:	94 8f       	std	Z+28, r25	; 0x1c
    b520:	d6 01       	movw	r26, r12
    b522:	11 96       	adiw	r26, 0x01	; 1
    b524:	6d 01       	movw	r12, r26
    b526:	5b 82       	std	Y+3, r5	; 0x03
    b528:	26 c0       	rjmp	.+76     	; 0xb576 <follow_path+0x3ba>
    b52a:	00 97       	sbiw	r24, 0x00	; 0
    b52c:	59 f0       	breq	.+22     	; 0xb544 <follow_path+0x388>
    b52e:	5b 82       	std	Y+3, r5	; 0x03
    b530:	ed ef       	ldi	r30, 0xFD	; 253
    b532:	f7 e0       	ldi	r31, 0x07	; 7
    b534:	21 91       	ld	r18, Z+
    b536:	22 23       	and	r18, r18
    b538:	59 f0       	breq	.+22     	; 0xb550 <follow_path+0x394>
    b53a:	30 e0       	ldi	r19, 0x00	; 0
    b53c:	82 17       	cp	r24, r18
    b53e:	93 07       	cpc	r25, r19
    b540:	c9 f7       	brne	.-14     	; 0xb534 <follow_path+0x378>
    b542:	5b 80       	ldd	r5, Y+3	; 0x03
    b544:	b5 2d       	mov	r27, r5
    b546:	b3 60       	ori	r27, 0x03	; 3
    b548:	bb 83       	std	Y+3, r27	; 0x03
    b54a:	8f e5       	ldi	r24, 0x5F	; 95
    b54c:	90 e0       	ldi	r25, 0x00	; 0
    b54e:	13 c0       	rjmp	.+38     	; 0xb576 <follow_path+0x3ba>
    b550:	9c 01       	movw	r18, r24
    b552:	21 54       	subi	r18, 0x41	; 65
    b554:	31 09       	sbc	r19, r1
    b556:	2a 31       	cpi	r18, 0x1A	; 26
    b558:	31 05       	cpc	r19, r1
    b55a:	18 f4       	brcc	.+6      	; 0xb562 <follow_path+0x3a6>
    b55c:	ec 81       	ldd	r30, Y+4	; 0x04
    b55e:	e2 60       	ori	r30, 0x02	; 2
    b560:	ec 83       	std	Y+4, r30	; 0x04
    b562:	9c 01       	movw	r18, r24
    b564:	21 56       	subi	r18, 0x61	; 97
    b566:	31 09       	sbc	r19, r1
    b568:	2a 31       	cpi	r18, 0x1A	; 26
    b56a:	31 05       	cpc	r19, r1
    b56c:	20 f4       	brcc	.+8      	; 0xb576 <follow_path+0x3ba>
    b56e:	fc 81       	ldd	r31, Y+4	; 0x04
    b570:	f1 60       	ori	r31, 0x01	; 1
    b572:	fc 83       	std	Y+4, r31	; 0x04
    b574:	80 97       	sbiw	r24, 0x20	; 32
    b576:	f7 01       	movw	r30, r14
    b578:	ec 0d       	add	r30, r12
    b57a:	fd 1d       	adc	r31, r13
    b57c:	84 8f       	std	Z+28, r24	; 0x1c
    b57e:	96 01       	movw	r18, r12
    b580:	2f 5f       	subi	r18, 0xFF	; 255
    b582:	3f 4f       	sbci	r19, 0xFF	; 255
    b584:	69 01       	movw	r12, r18
    b586:	74 cf       	rjmp	.-280    	; 0xb470 <follow_path+0x2b4>
    b588:	d7 01       	movw	r26, r14
    b58a:	5c 96       	adiw	r26, 0x1c	; 28
    b58c:	8c 91       	ld	r24, X
    b58e:	5c 97       	sbiw	r26, 0x1c	; 28
    b590:	85 3e       	cpi	r24, 0xE5	; 229
    b592:	19 f4       	brne	.+6      	; 0xb59a <follow_path+0x3de>
    b594:	e5 e0       	ldi	r30, 0x05	; 5
    b596:	5c 96       	adiw	r26, 0x1c	; 28
    b598:	ec 93       	st	X, r30
    b59a:	f8 e0       	ldi	r31, 0x08	; 8
    b59c:	8f 16       	cp	r8, r31
    b59e:	91 04       	cpc	r9, r1
    b5a0:	21 f4       	brne	.+8      	; 0xb5aa <follow_path+0x3ee>
    b5a2:	2c 81       	ldd	r18, Y+4	; 0x04
    b5a4:	22 0f       	add	r18, r18
    b5a6:	22 0f       	add	r18, r18
    b5a8:	2c 83       	std	Y+4, r18	; 0x04
    b5aa:	8c 81       	ldd	r24, Y+4	; 0x04
    b5ac:	8c 70       	andi	r24, 0x0C	; 12
    b5ae:	8c 30       	cpi	r24, 0x0C	; 12
    b5b0:	21 f0       	breq	.+8      	; 0xb5ba <follow_path+0x3fe>
    b5b2:	8c 81       	ldd	r24, Y+4	; 0x04
    b5b4:	83 70       	andi	r24, 0x03	; 3
    b5b6:	83 30       	cpi	r24, 0x03	; 3
    b5b8:	19 f4       	brne	.+6      	; 0xb5c0 <follow_path+0x404>
    b5ba:	3b 81       	ldd	r19, Y+3	; 0x03
    b5bc:	32 60       	ori	r19, 0x02	; 2
    b5be:	3b 83       	std	Y+3, r19	; 0x03
    b5c0:	8b 81       	ldd	r24, Y+3	; 0x03
    b5c2:	81 fd       	sbrc	r24, 1
    b5c4:	0b c0       	rjmp	.+22     	; 0xb5dc <follow_path+0x420>
    b5c6:	9c 81       	ldd	r25, Y+4	; 0x04
    b5c8:	90 ff       	sbrs	r25, 0
    b5ca:	02 c0       	rjmp	.+4      	; 0xb5d0 <follow_path+0x414>
    b5cc:	80 61       	ori	r24, 0x10	; 16
    b5ce:	8b 83       	std	Y+3, r24	; 0x03
    b5d0:	ac 81       	ldd	r26, Y+4	; 0x04
    b5d2:	a2 ff       	sbrs	r26, 2
    b5d4:	03 c0       	rjmp	.+6      	; 0xb5dc <follow_path+0x420>
    b5d6:	bb 81       	ldd	r27, Y+3	; 0x03
    b5d8:	b8 60       	ori	r27, 0x08	; 8
    b5da:	bb 83       	std	Y+3, r27	; 0x03
    b5dc:	2b 81       	ldd	r18, Y+3	; 0x03
    b5de:	f7 01       	movw	r30, r14
    b5e0:	27 a3       	std	Z+39, r18	; 0x27
    b5e2:	9e ce       	rjmp	.-708    	; 0xb320 <follow_path+0x164>
    b5e4:	86 e0       	ldi	r24, 0x06	; 6
    b5e6:	90 e0       	ldi	r25, 0x00	; 0
    b5e8:	9d ce       	rjmp	.-710    	; 0xb324 <follow_path+0x168>
    b5ea:	84 30       	cpi	r24, 0x04	; 4
    b5ec:	91 05       	cpc	r25, r1
    b5ee:	c1 f4       	brne	.+48     	; 0xb620 <follow_path+0x464>
    b5f0:	32 2f       	mov	r19, r18
    b5f2:	34 70       	andi	r19, 0x04	; 4
    b5f4:	25 ff       	sbrs	r18, 5
    b5f6:	09 c0       	rjmp	.+18     	; 0xb60a <follow_path+0x44e>
    b5f8:	33 23       	and	r19, r19
    b5fa:	09 f4       	brne	.+2      	; 0xb5fe <follow_path+0x442>
    b5fc:	b6 ce       	rjmp	.-660    	; 0xb36a <follow_path+0x1ae>
    b5fe:	80 e8       	ldi	r24, 0x80	; 128
    b600:	97 96       	adiw	r26, 0x27	; 39
    b602:	8c 93       	st	X, r24
    b604:	80 e0       	ldi	r24, 0x00	; 0
    b606:	90 e0       	ldi	r25, 0x00	; 0
    b608:	0b c0       	rjmp	.+22     	; 0xb620 <follow_path+0x464>
    b60a:	31 11       	cpse	r19, r1
    b60c:	09 c0       	rjmp	.+18     	; 0xb620 <follow_path+0x464>
    b60e:	85 e0       	ldi	r24, 0x05	; 5
    b610:	90 e0       	ldi	r25, 0x00	; 0
    b612:	06 c0       	rjmp	.+12     	; 0xb620 <follow_path+0x464>
    b614:	fb e0       	ldi	r31, 0x0B	; 11
    b616:	8f 16       	cp	r8, r31
    b618:	91 04       	cpc	r9, r1
    b61a:	09 f0       	breq	.+2      	; 0xb61e <follow_path+0x462>
    b61c:	4b cf       	rjmp	.-362    	; 0xb4b4 <follow_path+0x2f8>
    b61e:	39 cf       	rjmp	.-398    	; 0xb492 <follow_path+0x2d6>
    b620:	2a 96       	adiw	r28, 0x0a	; 10
    b622:	e2 e1       	ldi	r30, 0x12	; 18
    b624:	0c 94 0f e6 	jmp	0x1cc1e	; 0x1cc1e <__epilogue_restores__>

0000b628 <f_mount>:
    b628:	a6 e0       	ldi	r26, 0x06	; 6
    b62a:	b0 e0       	ldi	r27, 0x00	; 0
    b62c:	ea e1       	ldi	r30, 0x1A	; 26
    b62e:	fb e5       	ldi	r31, 0x5B	; 91
    b630:	0c 94 02 e6 	jmp	0x1cc04	; 0x1cc04 <__prologue_saves__+0x1e>
    b634:	9c 83       	std	Y+4, r25	; 0x04
    b636:	8b 83       	std	Y+3, r24	; 0x03
    b638:	7e 83       	std	Y+6, r23	; 0x06
    b63a:	6d 83       	std	Y+5, r22	; 0x05
    b63c:	14 2f       	mov	r17, r20
    b63e:	7a 83       	std	Y+2, r23	; 0x02
    b640:	69 83       	std	Y+1, r22	; 0x01
    b642:	ce 01       	movw	r24, r28
    b644:	01 96       	adiw	r24, 0x01	; 1
    b646:	0e 94 30 49 	call	0x9260	; 0x9260 <get_ldnumber>
    b64a:	97 fd       	sbrc	r25, 7
    b64c:	20 c0       	rjmp	.+64     	; 0xb68e <f_mount+0x66>
    b64e:	88 0f       	add	r24, r24
    b650:	99 1f       	adc	r25, r25
    b652:	fc 01       	movw	r30, r24
    b654:	e9 5e       	subi	r30, 0xE9	; 233
    b656:	f7 4e       	sbci	r31, 0xE7	; 231
    b658:	01 90       	ld	r0, Z+
    b65a:	f0 81       	ld	r31, Z
    b65c:	e0 2d       	mov	r30, r0
    b65e:	30 97       	sbiw	r30, 0x00	; 0
    b660:	09 f0       	breq	.+2      	; 0xb664 <f_mount+0x3c>
    b662:	10 82       	st	Z, r1
    b664:	eb 81       	ldd	r30, Y+3	; 0x03
    b666:	fc 81       	ldd	r31, Y+4	; 0x04
    b668:	30 97       	sbiw	r30, 0x00	; 0
    b66a:	09 f0       	breq	.+2      	; 0xb66e <f_mount+0x46>
    b66c:	10 82       	st	Z, r1
    b66e:	dc 01       	movw	r26, r24
    b670:	a9 5e       	subi	r26, 0xE9	; 233
    b672:	b7 4e       	sbci	r27, 0xE7	; 231
    b674:	ed 93       	st	X+, r30
    b676:	fc 93       	st	X, r31
    b678:	11 23       	and	r17, r17
    b67a:	61 f0       	breq	.+24     	; 0xb694 <f_mount+0x6c>
    b67c:	40 e0       	ldi	r20, 0x00	; 0
    b67e:	be 01       	movw	r22, r28
    b680:	6d 5f       	subi	r22, 0xFD	; 253
    b682:	7f 4f       	sbci	r23, 0xFF	; 255
    b684:	ce 01       	movw	r24, r28
    b686:	05 96       	adiw	r24, 0x05	; 5
    b688:	0e 94 63 4d 	call	0x9ac6	; 0x9ac6 <mount_volume>
    b68c:	05 c0       	rjmp	.+10     	; 0xb698 <f_mount+0x70>
    b68e:	8b e0       	ldi	r24, 0x0B	; 11
    b690:	90 e0       	ldi	r25, 0x00	; 0
    b692:	02 c0       	rjmp	.+4      	; 0xb698 <f_mount+0x70>
    b694:	80 e0       	ldi	r24, 0x00	; 0
    b696:	90 e0       	ldi	r25, 0x00	; 0
    b698:	26 96       	adiw	r28, 0x06	; 6
    b69a:	e3 e0       	ldi	r30, 0x03	; 3
    b69c:	0c 94 1e e6 	jmp	0x1cc3c	; 0x1cc3c <__epilogue_restores__+0x1e>

0000b6a0 <f_open>:
    b6a0:	a6 e3       	ldi	r26, 0x36	; 54
    b6a2:	b0 e0       	ldi	r27, 0x00	; 0
    b6a4:	e6 e5       	ldi	r30, 0x56	; 86
    b6a6:	fb e5       	ldi	r31, 0x5B	; 91
    b6a8:	0c 94 f3 e5 	jmp	0x1cbe6	; 0x1cbe6 <__prologue_saves__>
    b6ac:	7a ab       	std	Y+50, r23	; 0x32
    b6ae:	69 ab       	std	Y+49, r22	; 0x31
    b6b0:	00 97       	sbiw	r24, 0x00	; 0
    b6b2:	09 f4       	brne	.+2      	; 0xb6b6 <f_open+0x16>
    b6b4:	96 c1       	rjmp	.+812    	; 0xb9e2 <f_open+0x342>
    b6b6:	74 2e       	mov	r7, r20
    b6b8:	7c 01       	movw	r14, r24
    b6ba:	24 2f       	mov	r18, r20
    b6bc:	2f 73       	andi	r18, 0x3F	; 63
    b6be:	32 2e       	mov	r3, r18
    b6c0:	42 2f       	mov	r20, r18
    b6c2:	be 01       	movw	r22, r28
    b6c4:	61 5d       	subi	r22, 0xD1	; 209
    b6c6:	7f 4f       	sbci	r23, 0xFF	; 255
    b6c8:	ce 01       	movw	r24, r28
    b6ca:	c1 96       	adiw	r24, 0x31	; 49
    b6cc:	0e 94 63 4d 	call	0x9ac6	; 0x9ac6 <mount_volume>
    b6d0:	00 97       	sbiw	r24, 0x00	; 0
    b6d2:	09 f0       	breq	.+2      	; 0xb6d6 <f_open+0x36>
    b6d4:	80 c1       	rjmp	.+768    	; 0xb9d6 <f_open+0x336>
    b6d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    b6d8:	98 a9       	ldd	r25, Y+48	; 0x30
    b6da:	9a 83       	std	Y+2, r25	; 0x02
    b6dc:	89 83       	std	Y+1, r24	; 0x01
    b6de:	80 e0       	ldi	r24, 0x00	; 0
    b6e0:	92 e0       	ldi	r25, 0x02	; 2
    b6e2:	0e 94 c7 6a 	call	0xd58e	; 0xd58e <ff_memalloc>
    b6e6:	5c 01       	movw	r10, r24
    b6e8:	00 97       	sbiw	r24, 0x00	; 0
    b6ea:	09 f4       	brne	.+2      	; 0xb6ee <f_open+0x4e>
    b6ec:	7c c1       	rjmp	.+760    	; 0xb9e6 <f_open+0x346>
    b6ee:	ef a5       	ldd	r30, Y+47	; 0x2f
    b6f0:	f8 a9       	ldd	r31, Y+48	; 0x30
    b6f2:	94 87       	std	Z+12, r25	; 0x0c
    b6f4:	83 87       	std	Z+11, r24	; 0x0b
    b6f6:	69 a9       	ldd	r22, Y+49	; 0x31
    b6f8:	7a a9       	ldd	r23, Y+50	; 0x32
    b6fa:	ce 01       	movw	r24, r28
    b6fc:	01 96       	adiw	r24, 0x01	; 1
    b6fe:	5e dd       	rcall	.-1348   	; 0xb1bc <follow_path>
    b700:	8c 01       	movw	r16, r24
    b702:	89 2b       	or	r24, r25
    b704:	29 f4       	brne	.+10     	; 0xb710 <f_open+0x70>
    b706:	88 a5       	ldd	r24, Y+40	; 0x28
    b708:	87 ff       	sbrs	r24, 7
    b70a:	02 c0       	rjmp	.+4      	; 0xb710 <f_open+0x70>
    b70c:	06 e0       	ldi	r16, 0x06	; 6
    b70e:	10 e0       	ldi	r17, 0x00	; 0
    b710:	87 2d       	mov	r24, r7
    b712:	8c 71       	andi	r24, 0x1C	; 28
    b714:	09 f4       	brne	.+2      	; 0xb718 <f_open+0x78>
    b716:	78 c0       	rjmp	.+240    	; 0xb808 <f_open+0x168>
    b718:	01 15       	cp	r16, r1
    b71a:	11 05       	cpc	r17, r1
    b71c:	79 f0       	breq	.+30     	; 0xb73c <f_open+0x9c>
    b71e:	04 30       	cpi	r16, 0x04	; 4
    b720:	11 05       	cpc	r17, r1
    b722:	09 f0       	breq	.+2      	; 0xb726 <f_open+0x86>
    b724:	70 c1       	rjmp	.+736    	; 0xba06 <f_open+0x366>
    b726:	ce 01       	movw	r24, r28
    b728:	01 96       	adiw	r24, 0x01	; 1
    b72a:	a4 db       	rcall	.-2232   	; 0xae74 <dir_register>
    b72c:	8c 01       	movw	r16, r24
    b72e:	89 2b       	or	r24, r25
    b730:	09 f0       	breq	.+2      	; 0xb734 <f_open+0x94>
    b732:	69 c1       	rjmp	.+722    	; 0xba06 <f_open+0x366>
    b734:	33 2d       	mov	r19, r3
    b736:	38 60       	ori	r19, 0x08	; 8
    b738:	33 2e       	mov	r3, r19
    b73a:	06 c0       	rjmp	.+12     	; 0xb748 <f_open+0xa8>
    b73c:	8d 81       	ldd	r24, Y+5	; 0x05
    b73e:	81 71       	andi	r24, 0x11	; 17
    b740:	09 f0       	breq	.+2      	; 0xb744 <f_open+0xa4>
    b742:	5f c1       	rjmp	.+702    	; 0xba02 <f_open+0x362>
    b744:	72 fc       	sbrc	r7, 2
    b746:	54 c1       	rjmp	.+680    	; 0xb9f0 <f_open+0x350>
    b748:	33 fe       	sbrs	r3, 3
    b74a:	6e c0       	rjmp	.+220    	; 0xb828 <f_open+0x188>
    b74c:	6b 8d       	ldd	r22, Y+27	; 0x1b
    b74e:	7c 8d       	ldd	r23, Y+28	; 0x1c
    b750:	ef a5       	ldd	r30, Y+47	; 0x2f
    b752:	f8 a9       	ldd	r31, Y+48	; 0x30
    b754:	80 81       	ld	r24, Z
    b756:	0e 94 59 4b 	call	0x96b2	; 0x96b2 <ld_clust.isra.4>
    b75a:	2b 01       	movw	r4, r22
    b75c:	3c 01       	movw	r6, r24
    b75e:	0e 94 b5 71 	call	0xe36a	; 0xe36a <get_fattime>
    b762:	ab 01       	movw	r20, r22
    b764:	bc 01       	movw	r22, r24
    b766:	8b 8d       	ldd	r24, Y+27	; 0x1b
    b768:	9c 8d       	ldd	r25, Y+28	; 0x1c
    b76a:	0e 96       	adiw	r24, 0x0e	; 14
    b76c:	0e 94 19 48 	call	0x9032	; 0x9032 <st_dword>
    b770:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b772:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b774:	80 e2       	ldi	r24, 0x20	; 32
    b776:	83 87       	std	Z+11, r24	; 0x0b
    b778:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b77a:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b77c:	af a5       	ldd	r26, Y+47	; 0x2f
    b77e:	b8 a9       	ldd	r27, Y+48	; 0x30
    b780:	12 8e       	std	Z+26, r1	; 0x1a
    b782:	13 8e       	std	Z+27, r1	; 0x1b
    b784:	8c 91       	ld	r24, X
    b786:	83 30       	cpi	r24, 0x03	; 3
    b788:	11 f4       	brne	.+4      	; 0xb78e <f_open+0xee>
    b78a:	14 8a       	std	Z+20, r1	; 0x14
    b78c:	15 8a       	std	Z+21, r1	; 0x15
    b78e:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b790:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b792:	14 8e       	std	Z+28, r1	; 0x1c
    b794:	15 8e       	std	Z+29, r1	; 0x1d
    b796:	16 8e       	std	Z+30, r1	; 0x1e
    b798:	17 8e       	std	Z+31, r1	; 0x1f
    b79a:	81 e0       	ldi	r24, 0x01	; 1
    b79c:	13 96       	adiw	r26, 0x03	; 3
    b79e:	8c 93       	st	X, r24
    b7a0:	13 97       	sbiw	r26, 0x03	; 3
    b7a2:	41 14       	cp	r4, r1
    b7a4:	51 04       	cpc	r5, r1
    b7a6:	61 04       	cpc	r6, r1
    b7a8:	71 04       	cpc	r7, r1
    b7aa:	d9 f1       	breq	.+118    	; 0xb822 <f_open+0x182>
    b7ac:	d1 96       	adiw	r26, 0x31	; 49
    b7ae:	2d 91       	ld	r18, X+
    b7b0:	3d 91       	ld	r19, X+
    b7b2:	4d 91       	ld	r20, X+
    b7b4:	5c 91       	ld	r21, X
    b7b6:	d4 97       	sbiw	r26, 0x34	; 52
    b7b8:	2b ab       	std	Y+51, r18	; 0x33
    b7ba:	3c ab       	std	Y+52, r19	; 0x34
    b7bc:	4d ab       	std	Y+53, r20	; 0x35
    b7be:	5e ab       	std	Y+54, r21	; 0x36
    b7c0:	00 e0       	ldi	r16, 0x00	; 0
    b7c2:	10 e0       	ldi	r17, 0x00	; 0
    b7c4:	98 01       	movw	r18, r16
    b7c6:	b3 01       	movw	r22, r6
    b7c8:	a2 01       	movw	r20, r4
    b7ca:	ce 01       	movw	r24, r28
    b7cc:	01 96       	adiw	r24, 0x01	; 1
    b7ce:	0e 94 5f 53 	call	0xa6be	; 0xa6be <remove_chain>
    b7d2:	8c 01       	movw	r16, r24
    b7d4:	89 2b       	or	r24, r25
    b7d6:	09 f0       	breq	.+2      	; 0xb7da <f_open+0x13a>
    b7d8:	16 c1       	rjmp	.+556    	; 0xba06 <f_open+0x366>
    b7da:	4b a9       	ldd	r20, Y+51	; 0x33
    b7dc:	5c a9       	ldd	r21, Y+52	; 0x34
    b7de:	6d a9       	ldd	r22, Y+53	; 0x35
    b7e0:	7e a9       	ldd	r23, Y+54	; 0x36
    b7e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    b7e4:	98 a9       	ldd	r25, Y+48	; 0x30
    b7e6:	0e 94 e8 4c 	call	0x99d0	; 0x99d0 <move_window>
    b7ea:	8c 01       	movw	r16, r24
    b7ec:	ef a5       	ldd	r30, Y+47	; 0x2f
    b7ee:	f8 a9       	ldd	r31, Y+48	; 0x30
    b7f0:	31 e0       	ldi	r19, 0x01	; 1
    b7f2:	43 1a       	sub	r4, r19
    b7f4:	51 08       	sbc	r5, r1
    b7f6:	61 08       	sbc	r6, r1
    b7f8:	71 08       	sbc	r7, r1
    b7fa:	45 86       	std	Z+13, r4	; 0x0d
    b7fc:	56 86       	std	Z+14, r5	; 0x0e
    b7fe:	67 86       	std	Z+15, r6	; 0x0f
    b800:	70 8a       	std	Z+16, r7	; 0x10
    b802:	89 2b       	or	r24, r25
    b804:	61 f0       	breq	.+24     	; 0xb81e <f_open+0x17e>
    b806:	ff c0       	rjmp	.+510    	; 0xba06 <f_open+0x366>
    b808:	01 15       	cp	r16, r1
    b80a:	11 05       	cpc	r17, r1
    b80c:	09 f0       	breq	.+2      	; 0xb810 <f_open+0x170>
    b80e:	fb c0       	rjmp	.+502    	; 0xba06 <f_open+0x366>
    b810:	8d 81       	ldd	r24, Y+5	; 0x05
    b812:	84 fd       	sbrc	r24, 4
    b814:	f3 c0       	rjmp	.+486    	; 0xb9fc <f_open+0x35c>
    b816:	71 fe       	sbrs	r7, 1
    b818:	02 c0       	rjmp	.+4      	; 0xb81e <f_open+0x17e>
    b81a:	80 fd       	sbrc	r24, 0
    b81c:	f2 c0       	rjmp	.+484    	; 0xba02 <f_open+0x362>
    b81e:	33 fe       	sbrs	r3, 3
    b820:	03 c0       	rjmp	.+6      	; 0xb828 <f_open+0x188>
    b822:	43 2d       	mov	r20, r3
    b824:	40 64       	ori	r20, 0x40	; 64
    b826:	34 2e       	mov	r3, r20
    b828:	0f a5       	ldd	r16, Y+47	; 0x2f
    b82a:	18 a9       	ldd	r17, Y+48	; 0x30
    b82c:	f8 01       	movw	r30, r16
    b82e:	81 a9       	ldd	r24, Z+49	; 0x31
    b830:	92 a9       	ldd	r25, Z+50	; 0x32
    b832:	a3 a9       	ldd	r26, Z+51	; 0x33
    b834:	b4 a9       	ldd	r27, Z+52	; 0x34
    b836:	f7 01       	movw	r30, r14
    b838:	84 8f       	std	Z+28, r24	; 0x1c
    b83a:	95 8f       	std	Z+29, r25	; 0x1d
    b83c:	a6 8f       	std	Z+30, r26	; 0x1e
    b83e:	b7 8f       	std	Z+31, r27	; 0x1f
    b840:	6b 8c       	ldd	r6, Y+27	; 0x1b
    b842:	7c 8c       	ldd	r7, Y+28	; 0x1c
    b844:	71 a2       	std	Z+33, r7	; 0x21
    b846:	60 a2       	std	Z+32, r6	; 0x20
    b848:	b3 01       	movw	r22, r6
    b84a:	f8 01       	movw	r30, r16
    b84c:	80 81       	ld	r24, Z
    b84e:	0e 94 59 4b 	call	0x96b2	; 0x96b2 <ld_clust.isra.4>
    b852:	f7 01       	movw	r30, r14
    b854:	66 83       	std	Z+6, r22	; 0x06
    b856:	77 83       	std	Z+7, r23	; 0x07
    b858:	80 87       	std	Z+8, r24	; 0x08
    b85a:	91 87       	std	Z+9, r25	; 0x09
    b85c:	c3 01       	movw	r24, r6
    b85e:	4c 96       	adiw	r24, 0x1c	; 28
    b860:	0e 94 04 48 	call	0x9008	; 0x9008 <ld_dword>
    b864:	f7 01       	movw	r30, r14
    b866:	62 87       	std	Z+10, r22	; 0x0a
    b868:	73 87       	std	Z+11, r23	; 0x0b
    b86a:	84 87       	std	Z+12, r24	; 0x0c
    b86c:	95 87       	std	Z+13, r25	; 0x0d
    b86e:	13 a2       	std	Z+35, r1	; 0x23
    b870:	12 a2       	std	Z+34, r1	; 0x22
    b872:	11 83       	std	Z+1, r17	; 0x01
    b874:	00 83       	st	Z, r16
    b876:	f8 01       	movw	r30, r16
    b878:	85 81       	ldd	r24, Z+5	; 0x05
    b87a:	96 81       	ldd	r25, Z+6	; 0x06
    b87c:	f7 01       	movw	r30, r14
    b87e:	93 83       	std	Z+3, r25	; 0x03
    b880:	82 83       	std	Z+2, r24	; 0x02
    b882:	36 86       	std	Z+14, r3	; 0x0e
    b884:	17 86       	std	Z+15, r1	; 0x0f
    b886:	10 8e       	std	Z+24, r1	; 0x18
    b888:	11 8e       	std	Z+25, r1	; 0x19
    b88a:	12 8e       	std	Z+26, r1	; 0x1a
    b88c:	13 8e       	std	Z+27, r1	; 0x1b
    b88e:	10 8a       	std	Z+16, r1	; 0x10
    b890:	11 8a       	std	Z+17, r1	; 0x11
    b892:	12 8a       	std	Z+18, r1	; 0x12
    b894:	13 8a       	std	Z+19, r1	; 0x13
    b896:	67 01       	movw	r12, r14
    b898:	f4 e2       	ldi	r31, 0x24	; 36
    b89a:	cf 0e       	add	r12, r31
    b89c:	d1 1c       	adc	r13, r1
    b89e:	40 e0       	ldi	r20, 0x00	; 0
    b8a0:	52 e0       	ldi	r21, 0x02	; 2
    b8a2:	60 e0       	ldi	r22, 0x00	; 0
    b8a4:	70 e0       	ldi	r23, 0x00	; 0
    b8a6:	c6 01       	movw	r24, r12
    b8a8:	0e 94 1f 48 	call	0x903e	; 0x903e <mem_set>
    b8ac:	35 fc       	sbrc	r3, 5
    b8ae:	03 c0       	rjmp	.+6      	; 0xb8b6 <f_open+0x216>
    b8b0:	00 e0       	ldi	r16, 0x00	; 0
    b8b2:	10 e0       	ldi	r17, 0x00	; 0
    b8b4:	89 c0       	rjmp	.+274    	; 0xb9c8 <f_open+0x328>
    b8b6:	f7 01       	movw	r30, r14
    b8b8:	62 84       	ldd	r6, Z+10	; 0x0a
    b8ba:	73 84       	ldd	r7, Z+11	; 0x0b
    b8bc:	84 84       	ldd	r8, Z+12	; 0x0c
    b8be:	95 84       	ldd	r9, Z+13	; 0x0d
    b8c0:	61 14       	cp	r6, r1
    b8c2:	71 04       	cpc	r7, r1
    b8c4:	81 04       	cpc	r8, r1
    b8c6:	91 04       	cpc	r9, r1
    b8c8:	99 f3       	breq	.-26     	; 0xb8b0 <f_open+0x210>
    b8ca:	60 8a       	std	Z+16, r6	; 0x10
    b8cc:	71 8a       	std	Z+17, r7	; 0x11
    b8ce:	82 8a       	std	Z+18, r8	; 0x12
    b8d0:	93 8a       	std	Z+19, r9	; 0x13
    b8d2:	ef a5       	ldd	r30, Y+47	; 0x2f
    b8d4:	f8 a9       	ldd	r31, Y+48	; 0x30
    b8d6:	21 84       	ldd	r2, Z+9	; 0x09
    b8d8:	32 84       	ldd	r3, Z+10	; 0x0a
    b8da:	c1 01       	movw	r24, r2
    b8dc:	a0 e0       	ldi	r26, 0x00	; 0
    b8de:	b0 e0       	ldi	r27, 0x00	; 0
    b8e0:	1c 01       	movw	r2, r24
    b8e2:	2d 01       	movw	r4, r26
    b8e4:	59 e0       	ldi	r21, 0x09	; 9
    b8e6:	22 0c       	add	r2, r2
    b8e8:	33 1c       	adc	r3, r3
    b8ea:	44 1c       	adc	r4, r4
    b8ec:	55 1c       	adc	r5, r5
    b8ee:	5a 95       	dec	r21
    b8f0:	d1 f7       	brne	.-12     	; 0xb8e6 <f_open+0x246>
    b8f2:	f7 01       	movw	r30, r14
    b8f4:	46 81       	ldd	r20, Z+6	; 0x06
    b8f6:	57 81       	ldd	r21, Z+7	; 0x07
    b8f8:	60 85       	ldd	r22, Z+8	; 0x08
    b8fa:	71 85       	ldd	r23, Z+9	; 0x09
    b8fc:	26 14       	cp	r2, r6
    b8fe:	37 04       	cpc	r3, r7
    b900:	48 04       	cpc	r4, r8
    b902:	59 04       	cpc	r5, r9
    b904:	f0 f4       	brcc	.+60     	; 0xb942 <f_open+0x2a2>
    b906:	f7 01       	movw	r30, r14
    b908:	80 81       	ld	r24, Z
    b90a:	91 81       	ldd	r25, Z+1	; 0x01
    b90c:	0e 94 c4 50 	call	0xa188	; 0xa188 <get_fat.isra.10>
    b910:	ab 01       	movw	r20, r22
    b912:	bc 01       	movw	r22, r24
    b914:	d4 01       	movw	r26, r8
    b916:	c3 01       	movw	r24, r6
    b918:	82 19       	sub	r24, r2
    b91a:	93 09       	sbc	r25, r3
    b91c:	a4 09       	sbc	r26, r4
    b91e:	b5 09       	sbc	r27, r5
    b920:	3c 01       	movw	r6, r24
    b922:	4d 01       	movw	r8, r26
    b924:	42 30       	cpi	r20, 0x02	; 2
    b926:	51 05       	cpc	r21, r1
    b928:	61 05       	cpc	r22, r1
    b92a:	71 05       	cpc	r23, r1
    b92c:	08 f4       	brcc	.+2      	; 0xb930 <f_open+0x290>
    b92e:	63 c0       	rjmp	.+198    	; 0xb9f6 <f_open+0x356>
    b930:	4f 3f       	cpi	r20, 0xFF	; 255
    b932:	ff ef       	ldi	r31, 0xFF	; 255
    b934:	5f 07       	cpc	r21, r31
    b936:	6f 07       	cpc	r22, r31
    b938:	7f 07       	cpc	r23, r31
    b93a:	01 f7       	brne	.-64     	; 0xb8fc <f_open+0x25c>
    b93c:	01 e0       	ldi	r16, 0x01	; 1
    b93e:	10 e0       	ldi	r17, 0x00	; 0
    b940:	02 c0       	rjmp	.+4      	; 0xb946 <f_open+0x2a6>
    b942:	00 e0       	ldi	r16, 0x00	; 0
    b944:	10 e0       	ldi	r17, 0x00	; 0
    b946:	f7 01       	movw	r30, r14
    b948:	44 8b       	std	Z+20, r20	; 0x14
    b94a:	55 8b       	std	Z+21, r21	; 0x15
    b94c:	66 8b       	std	Z+22, r22	; 0x16
    b94e:	77 8b       	std	Z+23, r23	; 0x17
    b950:	01 15       	cp	r16, r1
    b952:	11 05       	cpc	r17, r1
    b954:	c9 f5       	brne	.+114    	; 0xb9c8 <f_open+0x328>
    b956:	d4 01       	movw	r26, r8
    b958:	c3 01       	movw	r24, r6
    b95a:	91 70       	andi	r25, 0x01	; 1
    b95c:	aa 27       	eor	r26, r26
    b95e:	bb 27       	eor	r27, r27
    b960:	89 2b       	or	r24, r25
    b962:	8a 2b       	or	r24, r26
    b964:	8b 2b       	or	r24, r27
    b966:	09 f4       	brne	.+2      	; 0xb96a <f_open+0x2ca>
    b968:	a3 cf       	rjmp	.-186    	; 0xb8b0 <f_open+0x210>
    b96a:	4f a4       	ldd	r4, Y+47	; 0x2f
    b96c:	58 a8       	ldd	r5, Y+48	; 0x30
    b96e:	c2 01       	movw	r24, r4
    b970:	0e 94 bd 48 	call	0x917a	; 0x917a <clst2sect>
    b974:	61 15       	cp	r22, r1
    b976:	71 05       	cpc	r23, r1
    b978:	81 05       	cpc	r24, r1
    b97a:	91 05       	cpc	r25, r1
    b97c:	19 f1       	breq	.+70     	; 0xb9c4 <f_open+0x324>
    b97e:	94 01       	movw	r18, r8
    b980:	83 01       	movw	r16, r6
    b982:	49 e0       	ldi	r20, 0x09	; 9
    b984:	36 95       	lsr	r19
    b986:	27 95       	ror	r18
    b988:	17 95       	ror	r17
    b98a:	07 95       	ror	r16
    b98c:	4a 95       	dec	r20
    b98e:	d1 f7       	brne	.-12     	; 0xb984 <f_open+0x2e4>
    b990:	a9 01       	movw	r20, r18
    b992:	98 01       	movw	r18, r16
    b994:	26 0f       	add	r18, r22
    b996:	37 1f       	adc	r19, r23
    b998:	48 1f       	adc	r20, r24
    b99a:	59 1f       	adc	r21, r25
    b99c:	f7 01       	movw	r30, r14
    b99e:	20 8f       	std	Z+24, r18	; 0x18
    b9a0:	31 8f       	std	Z+25, r19	; 0x19
    b9a2:	42 8f       	std	Z+26, r20	; 0x1a
    b9a4:	53 8f       	std	Z+27, r21	; 0x1b
    b9a6:	01 e0       	ldi	r16, 0x01	; 1
    b9a8:	10 e0       	ldi	r17, 0x00	; 0
    b9aa:	b6 01       	movw	r22, r12
    b9ac:	f2 01       	movw	r30, r4
    b9ae:	81 81       	ldd	r24, Z+1	; 0x01
    b9b0:	0e 94 83 6b 	call	0xd706	; 0xd706 <disk_read>
    b9b4:	31 e0       	ldi	r19, 0x01	; 1
    b9b6:	20 e0       	ldi	r18, 0x00	; 0
    b9b8:	89 2b       	or	r24, r25
    b9ba:	09 f4       	brne	.+2      	; 0xb9be <f_open+0x31e>
    b9bc:	30 e0       	ldi	r19, 0x00	; 0
    b9be:	03 2f       	mov	r16, r19
    b9c0:	12 2f       	mov	r17, r18
    b9c2:	02 c0       	rjmp	.+4      	; 0xb9c8 <f_open+0x328>
    b9c4:	02 e0       	ldi	r16, 0x02	; 2
    b9c6:	10 e0       	ldi	r17, 0x00	; 0
    b9c8:	c5 01       	movw	r24, r10
    b9ca:	0e 94 ca 6a 	call	0xd594	; 0xd594 <ff_memfree>
    b9ce:	01 15       	cp	r16, r1
    b9d0:	11 05       	cpc	r17, r1
    b9d2:	59 f0       	breq	.+22     	; 0xb9ea <f_open+0x34a>
    b9d4:	01 c0       	rjmp	.+2      	; 0xb9d8 <f_open+0x338>
    b9d6:	8c 01       	movw	r16, r24
    b9d8:	f7 01       	movw	r30, r14
    b9da:	11 82       	std	Z+1, r1	; 0x01
    b9dc:	10 82       	st	Z, r1
    b9de:	c8 01       	movw	r24, r16
    b9e0:	16 c0       	rjmp	.+44     	; 0xba0e <f_open+0x36e>
    b9e2:	89 e0       	ldi	r24, 0x09	; 9
    b9e4:	03 c0       	rjmp	.+6      	; 0xb9ec <f_open+0x34c>
    b9e6:	81 e1       	ldi	r24, 0x11	; 17
    b9e8:	01 c0       	rjmp	.+2      	; 0xb9ec <f_open+0x34c>
    b9ea:	80 e0       	ldi	r24, 0x00	; 0
    b9ec:	90 e0       	ldi	r25, 0x00	; 0
    b9ee:	0f c0       	rjmp	.+30     	; 0xba0e <f_open+0x36e>
    b9f0:	08 e0       	ldi	r16, 0x08	; 8
    b9f2:	10 e0       	ldi	r17, 0x00	; 0
    b9f4:	08 c0       	rjmp	.+16     	; 0xba06 <f_open+0x366>
    b9f6:	02 e0       	ldi	r16, 0x02	; 2
    b9f8:	10 e0       	ldi	r17, 0x00	; 0
    b9fa:	a5 cf       	rjmp	.-182    	; 0xb946 <f_open+0x2a6>
    b9fc:	04 e0       	ldi	r16, 0x04	; 4
    b9fe:	10 e0       	ldi	r17, 0x00	; 0
    ba00:	02 c0       	rjmp	.+4      	; 0xba06 <f_open+0x366>
    ba02:	07 e0       	ldi	r16, 0x07	; 7
    ba04:	10 e0       	ldi	r17, 0x00	; 0
    ba06:	c5 01       	movw	r24, r10
    ba08:	0e 94 ca 6a 	call	0xd594	; 0xd594 <ff_memfree>
    ba0c:	e5 cf       	rjmp	.-54     	; 0xb9d8 <f_open+0x338>
    ba0e:	e6 96       	adiw	r28, 0x36	; 54
    ba10:	e2 e1       	ldi	r30, 0x12	; 18
    ba12:	0c 94 0f e6 	jmp	0x1cc1e	; 0x1cc1e <__epilogue_restores__>

0000ba16 <f_read>:
    ba16:	a6 e0       	ldi	r26, 0x06	; 6
    ba18:	b0 e0       	ldi	r27, 0x00	; 0
    ba1a:	e1 e1       	ldi	r30, 0x11	; 17
    ba1c:	fd e5       	ldi	r31, 0x5D	; 93
    ba1e:	0c 94 f3 e5 	jmp	0x1cbe6	; 0x1cbe6 <__prologue_saves__>
    ba22:	7c 01       	movw	r14, r24
    ba24:	4b 01       	movw	r8, r22
    ba26:	5a 01       	movw	r10, r20
    ba28:	3e 83       	std	Y+6, r19	; 0x06
    ba2a:	2d 83       	std	Y+5, r18	; 0x05
    ba2c:	f9 01       	movw	r30, r18
    ba2e:	11 82       	std	Z+1, r1	; 0x01
    ba30:	10 82       	st	Z, r1
    ba32:	be 01       	movw	r22, r28
    ba34:	6f 5f       	subi	r22, 0xFF	; 255
    ba36:	7f 4f       	sbci	r23, 0xFF	; 255
    ba38:	0e 94 5c 49 	call	0x92b8	; 0x92b8 <validate>
    ba3c:	00 97       	sbiw	r24, 0x00	; 0
    ba3e:	09 f0       	breq	.+2      	; 0xba42 <f_read+0x2c>
    ba40:	31 c1       	rjmp	.+610    	; 0xbca4 <f_read+0x28e>
    ba42:	f7 01       	movw	r30, r14
    ba44:	87 85       	ldd	r24, Z+15	; 0x0f
    ba46:	90 e0       	ldi	r25, 0x00	; 0
    ba48:	00 97       	sbiw	r24, 0x00	; 0
    ba4a:	09 f0       	breq	.+2      	; 0xba4e <f_read+0x38>
    ba4c:	2b c1       	rjmp	.+598    	; 0xbca4 <f_read+0x28e>
    ba4e:	86 85       	ldd	r24, Z+14	; 0x0e
    ba50:	80 ff       	sbrs	r24, 0
    ba52:	26 c1       	rjmp	.+588    	; 0xbca0 <f_read+0x28a>
    ba54:	82 85       	ldd	r24, Z+10	; 0x0a
    ba56:	93 85       	ldd	r25, Z+11	; 0x0b
    ba58:	a4 85       	ldd	r26, Z+12	; 0x0c
    ba5a:	b5 85       	ldd	r27, Z+13	; 0x0d
    ba5c:	40 89       	ldd	r20, Z+16	; 0x10
    ba5e:	51 89       	ldd	r21, Z+17	; 0x11
    ba60:	62 89       	ldd	r22, Z+18	; 0x12
    ba62:	73 89       	ldd	r23, Z+19	; 0x13
    ba64:	84 1b       	sub	r24, r20
    ba66:	95 0b       	sbc	r25, r21
    ba68:	a6 0b       	sbc	r26, r22
    ba6a:	b7 0b       	sbc	r27, r23
    ba6c:	a5 01       	movw	r20, r10
    ba6e:	60 e0       	ldi	r22, 0x00	; 0
    ba70:	70 e0       	ldi	r23, 0x00	; 0
    ba72:	84 17       	cp	r24, r20
    ba74:	95 07       	cpc	r25, r21
    ba76:	a6 07       	cpc	r26, r22
    ba78:	b7 07       	cpc	r27, r23
    ba7a:	08 f4       	brcc	.+2      	; 0xba7e <f_read+0x68>
    ba7c:	5c 01       	movw	r10, r24
    ba7e:	17 01       	movw	r2, r14
    ba80:	f4 e2       	ldi	r31, 0x24	; 36
    ba82:	2f 0e       	add	r2, r31
    ba84:	31 1c       	adc	r3, r1
    ba86:	a1 14       	cp	r10, r1
    ba88:	b1 04       	cpc	r11, r1
    ba8a:	09 f4       	brne	.+2      	; 0xba8e <f_read+0x78>
    ba8c:	07 c1       	rjmp	.+526    	; 0xbc9c <f_read+0x286>
    ba8e:	f7 01       	movw	r30, r14
    ba90:	40 89       	ldd	r20, Z+16	; 0x10
    ba92:	51 89       	ldd	r21, Z+17	; 0x11
    ba94:	62 89       	ldd	r22, Z+18	; 0x12
    ba96:	73 89       	ldd	r23, Z+19	; 0x13
    ba98:	db 01       	movw	r26, r22
    ba9a:	ca 01       	movw	r24, r20
    ba9c:	91 70       	andi	r25, 0x01	; 1
    ba9e:	aa 27       	eor	r26, r26
    baa0:	bb 27       	eor	r27, r27
    baa2:	89 2b       	or	r24, r25
    baa4:	8a 2b       	or	r24, r26
    baa6:	8b 2b       	or	r24, r27
    baa8:	09 f0       	breq	.+2      	; 0xbaac <f_read+0x96>
    baaa:	cb c0       	rjmp	.+406    	; 0xbc42 <f_read+0x22c>
    baac:	e9 81       	ldd	r30, Y+1	; 0x01
    baae:	fa 81       	ldd	r31, Y+2	; 0x02
    bab0:	01 85       	ldd	r16, Z+9	; 0x09
    bab2:	12 85       	ldd	r17, Z+10	; 0x0a
    bab4:	01 50       	subi	r16, 0x01	; 1
    bab6:	11 09       	sbc	r17, r1
    bab8:	db 01       	movw	r26, r22
    baba:	ca 01       	movw	r24, r20
    babc:	e9 e0       	ldi	r30, 0x09	; 9
    babe:	b6 95       	lsr	r27
    bac0:	a7 95       	ror	r26
    bac2:	97 95       	ror	r25
    bac4:	87 95       	ror	r24
    bac6:	ea 95       	dec	r30
    bac8:	d1 f7       	brne	.-12     	; 0xbabe <f_read+0xa8>
    baca:	08 23       	and	r16, r24
    bacc:	19 23       	and	r17, r25
    bace:	01 15       	cp	r16, r1
    bad0:	11 05       	cpc	r17, r1
    bad2:	91 f5       	brne	.+100    	; 0xbb38 <f_read+0x122>
    bad4:	f7 01       	movw	r30, r14
    bad6:	41 15       	cp	r20, r1
    bad8:	51 05       	cpc	r21, r1
    bada:	61 05       	cpc	r22, r1
    badc:	71 05       	cpc	r23, r1
    bade:	29 f4       	brne	.+10     	; 0xbaea <f_read+0xd4>
    bae0:	66 81       	ldd	r22, Z+6	; 0x06
    bae2:	77 81       	ldd	r23, Z+7	; 0x07
    bae4:	80 85       	ldd	r24, Z+8	; 0x08
    bae6:	91 85       	ldd	r25, Z+9	; 0x09
    bae8:	11 c0       	rjmp	.+34     	; 0xbb0c <f_read+0xf6>
    baea:	82 a1       	ldd	r24, Z+34	; 0x22
    baec:	93 a1       	ldd	r25, Z+35	; 0x23
    baee:	89 2b       	or	r24, r25
    baf0:	21 f0       	breq	.+8      	; 0xbafa <f_read+0xe4>
    baf2:	c7 01       	movw	r24, r14
    baf4:	0e 94 e5 48 	call	0x91ca	; 0x91ca <clmt_clust>
    baf8:	09 c0       	rjmp	.+18     	; 0xbb0c <f_read+0xf6>
    bafa:	f7 01       	movw	r30, r14
    bafc:	44 89       	ldd	r20, Z+20	; 0x14
    bafe:	55 89       	ldd	r21, Z+21	; 0x15
    bb00:	66 89       	ldd	r22, Z+22	; 0x16
    bb02:	77 89       	ldd	r23, Z+23	; 0x17
    bb04:	80 81       	ld	r24, Z
    bb06:	91 81       	ldd	r25, Z+1	; 0x01
    bb08:	0e 94 c4 50 	call	0xa188	; 0xa188 <get_fat.isra.10>
    bb0c:	62 30       	cpi	r22, 0x02	; 2
    bb0e:	71 05       	cpc	r23, r1
    bb10:	81 05       	cpc	r24, r1
    bb12:	91 05       	cpc	r25, r1
    bb14:	10 f4       	brcc	.+4      	; 0xbb1a <f_read+0x104>
    bb16:	82 e0       	ldi	r24, 0x02	; 2
    bb18:	07 c0       	rjmp	.+14     	; 0xbb28 <f_read+0x112>
    bb1a:	6f 3f       	cpi	r22, 0xFF	; 255
    bb1c:	ff ef       	ldi	r31, 0xFF	; 255
    bb1e:	7f 07       	cpc	r23, r31
    bb20:	8f 07       	cpc	r24, r31
    bb22:	9f 07       	cpc	r25, r31
    bb24:	21 f4       	brne	.+8      	; 0xbb2e <f_read+0x118>
    bb26:	81 e0       	ldi	r24, 0x01	; 1
    bb28:	f7 01       	movw	r30, r14
    bb2a:	87 87       	std	Z+15, r24	; 0x0f
    bb2c:	ba c0       	rjmp	.+372    	; 0xbca2 <f_read+0x28c>
    bb2e:	f7 01       	movw	r30, r14
    bb30:	64 8b       	std	Z+20, r22	; 0x14
    bb32:	75 8b       	std	Z+21, r23	; 0x15
    bb34:	86 8b       	std	Z+22, r24	; 0x16
    bb36:	97 8b       	std	Z+23, r25	; 0x17
    bb38:	89 81       	ldd	r24, Y+1	; 0x01
    bb3a:	9a 81       	ldd	r25, Y+2	; 0x02
    bb3c:	9c 83       	std	Y+4, r25	; 0x04
    bb3e:	8b 83       	std	Y+3, r24	; 0x03
    bb40:	f7 01       	movw	r30, r14
    bb42:	44 89       	ldd	r20, Z+20	; 0x14
    bb44:	55 89       	ldd	r21, Z+21	; 0x15
    bb46:	66 89       	ldd	r22, Z+22	; 0x16
    bb48:	77 89       	ldd	r23, Z+23	; 0x17
    bb4a:	0e 94 bd 48 	call	0x917a	; 0x917a <clst2sect>
    bb4e:	61 15       	cp	r22, r1
    bb50:	71 05       	cpc	r23, r1
    bb52:	81 05       	cpc	r24, r1
    bb54:	91 05       	cpc	r25, r1
    bb56:	f9 f2       	breq	.-66     	; 0xbb16 <f_read+0x100>
    bb58:	2b 01       	movw	r4, r22
    bb5a:	3c 01       	movw	r6, r24
    bb5c:	40 0e       	add	r4, r16
    bb5e:	51 1e       	adc	r5, r17
    bb60:	61 1c       	adc	r6, r1
    bb62:	71 1c       	adc	r7, r1
    bb64:	65 01       	movw	r12, r10
    bb66:	cd 2c       	mov	r12, r13
    bb68:	dd 24       	eor	r13, r13
    bb6a:	c6 94       	lsr	r12
    bb6c:	c1 14       	cp	r12, r1
    bb6e:	d1 04       	cpc	r13, r1
    bb70:	d1 f1       	breq	.+116    	; 0xbbe6 <f_read+0x1d0>
    bb72:	eb 81       	ldd	r30, Y+3	; 0x03
    bb74:	fc 81       	ldd	r31, Y+4	; 0x04
    bb76:	81 85       	ldd	r24, Z+9	; 0x09
    bb78:	92 85       	ldd	r25, Z+10	; 0x0a
    bb7a:	98 01       	movw	r18, r16
    bb7c:	2c 0d       	add	r18, r12
    bb7e:	3d 1d       	adc	r19, r13
    bb80:	82 17       	cp	r24, r18
    bb82:	93 07       	cpc	r25, r19
    bb84:	18 f4       	brcc	.+6      	; 0xbb8c <f_read+0x176>
    bb86:	6c 01       	movw	r12, r24
    bb88:	c0 1a       	sub	r12, r16
    bb8a:	d1 0a       	sbc	r13, r17
    bb8c:	86 01       	movw	r16, r12
    bb8e:	a3 01       	movw	r20, r6
    bb90:	92 01       	movw	r18, r4
    bb92:	b4 01       	movw	r22, r8
    bb94:	eb 81       	ldd	r30, Y+3	; 0x03
    bb96:	fc 81       	ldd	r31, Y+4	; 0x04
    bb98:	81 81       	ldd	r24, Z+1	; 0x01
    bb9a:	0e 94 83 6b 	call	0xd706	; 0xd706 <disk_read>
    bb9e:	89 2b       	or	r24, r25
    bba0:	11 f6       	brne	.-124    	; 0xbb26 <f_read+0x110>
    bba2:	f7 01       	movw	r30, r14
    bba4:	86 85       	ldd	r24, Z+14	; 0x0e
    bba6:	87 ff       	sbrs	r24, 7
    bba8:	1a c0       	rjmp	.+52     	; 0xbbde <f_read+0x1c8>
    bbaa:	80 8d       	ldd	r24, Z+24	; 0x18
    bbac:	91 8d       	ldd	r25, Z+25	; 0x19
    bbae:	a2 8d       	ldd	r26, Z+26	; 0x1a
    bbb0:	b3 8d       	ldd	r27, Z+27	; 0x1b
    bbb2:	84 19       	sub	r24, r4
    bbb4:	95 09       	sbc	r25, r5
    bbb6:	a6 09       	sbc	r26, r6
    bbb8:	b7 09       	sbc	r27, r7
    bbba:	a6 01       	movw	r20, r12
    bbbc:	60 e0       	ldi	r22, 0x00	; 0
    bbbe:	70 e0       	ldi	r23, 0x00	; 0
    bbc0:	84 17       	cp	r24, r20
    bbc2:	95 07       	cpc	r25, r21
    bbc4:	a6 07       	cpc	r26, r22
    bbc6:	b7 07       	cpc	r27, r23
    bbc8:	50 f4       	brcc	.+20     	; 0xbbde <f_read+0x1c8>
    bbca:	98 2f       	mov	r25, r24
    bbcc:	88 27       	eor	r24, r24
    bbce:	99 0f       	add	r25, r25
    bbd0:	40 e0       	ldi	r20, 0x00	; 0
    bbd2:	52 e0       	ldi	r21, 0x02	; 2
    bbd4:	b1 01       	movw	r22, r2
    bbd6:	88 0d       	add	r24, r8
    bbd8:	99 1d       	adc	r25, r9
    bbda:	0e 94 88 49 	call	0x9310	; 0x9310 <mem_cpy.part.0>
    bbde:	dc 2c       	mov	r13, r12
    bbe0:	cc 24       	eor	r12, r12
    bbe2:	dd 0c       	add	r13, r13
    bbe4:	41 c0       	rjmp	.+130    	; 0xbc68 <f_read+0x252>
    bbe6:	f7 01       	movw	r30, r14
    bbe8:	20 8d       	ldd	r18, Z+24	; 0x18
    bbea:	31 8d       	ldd	r19, Z+25	; 0x19
    bbec:	42 8d       	ldd	r20, Z+26	; 0x1a
    bbee:	53 8d       	ldd	r21, Z+27	; 0x1b
    bbf0:	42 16       	cp	r4, r18
    bbf2:	53 06       	cpc	r5, r19
    bbf4:	64 06       	cpc	r6, r20
    bbf6:	75 06       	cpc	r7, r21
    bbf8:	f9 f0       	breq	.+62     	; 0xbc38 <f_read+0x222>
    bbfa:	86 85       	ldd	r24, Z+14	; 0x0e
    bbfc:	87 ff       	sbrs	r24, 7
    bbfe:	0f c0       	rjmp	.+30     	; 0xbc1e <f_read+0x208>
    bc00:	01 e0       	ldi	r16, 0x01	; 1
    bc02:	10 e0       	ldi	r17, 0x00	; 0
    bc04:	b1 01       	movw	r22, r2
    bc06:	eb 81       	ldd	r30, Y+3	; 0x03
    bc08:	fc 81       	ldd	r31, Y+4	; 0x04
    bc0a:	81 81       	ldd	r24, Z+1	; 0x01
    bc0c:	0e 94 93 6b 	call	0xd726	; 0xd726 <disk_write>
    bc10:	89 2b       	or	r24, r25
    bc12:	09 f0       	breq	.+2      	; 0xbc16 <f_read+0x200>
    bc14:	88 cf       	rjmp	.-240    	; 0xbb26 <f_read+0x110>
    bc16:	f7 01       	movw	r30, r14
    bc18:	86 85       	ldd	r24, Z+14	; 0x0e
    bc1a:	8f 77       	andi	r24, 0x7F	; 127
    bc1c:	86 87       	std	Z+14, r24	; 0x0e
    bc1e:	e9 81       	ldd	r30, Y+1	; 0x01
    bc20:	fa 81       	ldd	r31, Y+2	; 0x02
    bc22:	01 e0       	ldi	r16, 0x01	; 1
    bc24:	10 e0       	ldi	r17, 0x00	; 0
    bc26:	a3 01       	movw	r20, r6
    bc28:	92 01       	movw	r18, r4
    bc2a:	b1 01       	movw	r22, r2
    bc2c:	81 81       	ldd	r24, Z+1	; 0x01
    bc2e:	0e 94 83 6b 	call	0xd706	; 0xd706 <disk_read>
    bc32:	89 2b       	or	r24, r25
    bc34:	09 f0       	breq	.+2      	; 0xbc38 <f_read+0x222>
    bc36:	77 cf       	rjmp	.-274    	; 0xbb26 <f_read+0x110>
    bc38:	f7 01       	movw	r30, r14
    bc3a:	40 8e       	std	Z+24, r4	; 0x18
    bc3c:	51 8e       	std	Z+25, r5	; 0x19
    bc3e:	62 8e       	std	Z+26, r6	; 0x1a
    bc40:	73 8e       	std	Z+27, r7	; 0x1b
    bc42:	f7 01       	movw	r30, r14
    bc44:	60 89       	ldd	r22, Z+16	; 0x10
    bc46:	71 89       	ldd	r23, Z+17	; 0x11
    bc48:	71 70       	andi	r23, 0x01	; 1
    bc4a:	80 e0       	ldi	r24, 0x00	; 0
    bc4c:	92 e0       	ldi	r25, 0x02	; 2
    bc4e:	86 1b       	sub	r24, r22
    bc50:	97 0b       	sbc	r25, r23
    bc52:	65 01       	movw	r12, r10
    bc54:	8a 15       	cp	r24, r10
    bc56:	9b 05       	cpc	r25, r11
    bc58:	08 f4       	brcc	.+2      	; 0xbc5c <f_read+0x246>
    bc5a:	6c 01       	movw	r12, r24
    bc5c:	62 0d       	add	r22, r2
    bc5e:	73 1d       	adc	r23, r3
    bc60:	a6 01       	movw	r20, r12
    bc62:	c4 01       	movw	r24, r8
    bc64:	0e 94 88 49 	call	0x9310	; 0x9310 <mem_cpy.part.0>
    bc68:	ac 18       	sub	r10, r12
    bc6a:	bd 08       	sbc	r11, r13
    bc6c:	ed 81       	ldd	r30, Y+5	; 0x05
    bc6e:	fe 81       	ldd	r31, Y+6	; 0x06
    bc70:	80 81       	ld	r24, Z
    bc72:	91 81       	ldd	r25, Z+1	; 0x01
    bc74:	8c 0d       	add	r24, r12
    bc76:	9d 1d       	adc	r25, r13
    bc78:	91 83       	std	Z+1, r25	; 0x01
    bc7a:	80 83       	st	Z, r24
    bc7c:	8c 0c       	add	r8, r12
    bc7e:	9d 1c       	adc	r9, r13
    bc80:	f7 01       	movw	r30, r14
    bc82:	80 89       	ldd	r24, Z+16	; 0x10
    bc84:	91 89       	ldd	r25, Z+17	; 0x11
    bc86:	a2 89       	ldd	r26, Z+18	; 0x12
    bc88:	b3 89       	ldd	r27, Z+19	; 0x13
    bc8a:	8c 0d       	add	r24, r12
    bc8c:	9d 1d       	adc	r25, r13
    bc8e:	a1 1d       	adc	r26, r1
    bc90:	b1 1d       	adc	r27, r1
    bc92:	80 8b       	std	Z+16, r24	; 0x10
    bc94:	91 8b       	std	Z+17, r25	; 0x11
    bc96:	a2 8b       	std	Z+18, r26	; 0x12
    bc98:	b3 8b       	std	Z+19, r27	; 0x13
    bc9a:	f5 ce       	rjmp	.-534    	; 0xba86 <f_read+0x70>
    bc9c:	80 e0       	ldi	r24, 0x00	; 0
    bc9e:	01 c0       	rjmp	.+2      	; 0xbca2 <f_read+0x28c>
    bca0:	87 e0       	ldi	r24, 0x07	; 7
    bca2:	90 e0       	ldi	r25, 0x00	; 0
    bca4:	26 96       	adiw	r28, 0x06	; 6
    bca6:	e2 e1       	ldi	r30, 0x12	; 18
    bca8:	0c 94 0f e6 	jmp	0x1cc1e	; 0x1cc1e <__epilogue_restores__>

0000bcac <f_write>:
    bcac:	a8 e0       	ldi	r26, 0x08	; 8
    bcae:	b0 e0       	ldi	r27, 0x00	; 0
    bcb0:	ec e5       	ldi	r30, 0x5C	; 92
    bcb2:	fe e5       	ldi	r31, 0x5E	; 94
    bcb4:	0c 94 f3 e5 	jmp	0x1cbe6	; 0x1cbe6 <__prologue_saves__>
    bcb8:	7c 01       	movw	r14, r24
    bcba:	3b 01       	movw	r6, r22
    bcbc:	5a 01       	movw	r10, r20
    bcbe:	38 87       	std	Y+8, r19	; 0x08
    bcc0:	2f 83       	std	Y+7, r18	; 0x07
    bcc2:	f9 01       	movw	r30, r18
    bcc4:	11 82       	std	Z+1, r1	; 0x01
    bcc6:	10 82       	st	Z, r1
    bcc8:	be 01       	movw	r22, r28
    bcca:	6f 5f       	subi	r22, 0xFF	; 255
    bccc:	7f 4f       	sbci	r23, 0xFF	; 255
    bcce:	0e 94 5c 49 	call	0x92b8	; 0x92b8 <validate>
    bcd2:	00 97       	sbiw	r24, 0x00	; 0
    bcd4:	09 f0       	breq	.+2      	; 0xbcd8 <f_write+0x2c>
    bcd6:	7d c1       	rjmp	.+762    	; 0xbfd2 <f_write+0x326>
    bcd8:	f7 01       	movw	r30, r14
    bcda:	87 85       	ldd	r24, Z+15	; 0x0f
    bcdc:	90 e0       	ldi	r25, 0x00	; 0
    bcde:	00 97       	sbiw	r24, 0x00	; 0
    bce0:	09 f0       	breq	.+2      	; 0xbce4 <f_write+0x38>
    bce2:	77 c1       	rjmp	.+750    	; 0xbfd2 <f_write+0x326>
    bce4:	86 85       	ldd	r24, Z+14	; 0x0e
    bce6:	81 ff       	sbrs	r24, 1
    bce8:	72 c1       	rjmp	.+740    	; 0xbfce <f_write+0x322>
    bcea:	80 89       	ldd	r24, Z+16	; 0x10
    bcec:	91 89       	ldd	r25, Z+17	; 0x11
    bcee:	a2 89       	ldd	r26, Z+18	; 0x12
    bcf0:	b3 89       	ldd	r27, Z+19	; 0x13
    bcf2:	ac 01       	movw	r20, r24
    bcf4:	bd 01       	movw	r22, r26
    bcf6:	4a 0d       	add	r20, r10
    bcf8:	5b 1d       	adc	r21, r11
    bcfa:	61 1d       	adc	r22, r1
    bcfc:	71 1d       	adc	r23, r1
    bcfe:	48 17       	cp	r20, r24
    bd00:	59 07       	cpc	r21, r25
    bd02:	6a 07       	cpc	r22, r26
    bd04:	7b 07       	cpc	r23, r27
    bd06:	18 f4       	brcc	.+6      	; 0xbd0e <f_write+0x62>
    bd08:	5c 01       	movw	r10, r24
    bd0a:	a0 94       	com	r10
    bd0c:	b0 94       	com	r11
    bd0e:	97 01       	movw	r18, r14
    bd10:	2c 5d       	subi	r18, 0xDC	; 220
    bd12:	3f 4f       	sbci	r19, 0xFF	; 255
    bd14:	3e 83       	std	Y+6, r19	; 0x06
    bd16:	2d 83       	std	Y+5, r18	; 0x05
    bd18:	a1 14       	cp	r10, r1
    bd1a:	b1 04       	cpc	r11, r1
    bd1c:	09 f4       	brne	.+2      	; 0xbd20 <f_write+0x74>
    bd1e:	4d c0       	rjmp	.+154    	; 0xbdba <f_write+0x10e>
    bd20:	f7 01       	movw	r30, r14
    bd22:	40 89       	ldd	r20, Z+16	; 0x10
    bd24:	51 89       	ldd	r21, Z+17	; 0x11
    bd26:	62 89       	ldd	r22, Z+18	; 0x12
    bd28:	73 89       	ldd	r23, Z+19	; 0x13
    bd2a:	db 01       	movw	r26, r22
    bd2c:	ca 01       	movw	r24, r20
    bd2e:	91 70       	andi	r25, 0x01	; 1
    bd30:	aa 27       	eor	r26, r26
    bd32:	bb 27       	eor	r27, r27
    bd34:	89 2b       	or	r24, r25
    bd36:	8a 2b       	or	r24, r26
    bd38:	8b 2b       	or	r24, r27
    bd3a:	09 f0       	breq	.+2      	; 0xbd3e <f_write+0x92>
    bd3c:	05 c1       	rjmp	.+522    	; 0xbf48 <f_write+0x29c>
    bd3e:	e9 81       	ldd	r30, Y+1	; 0x01
    bd40:	fa 81       	ldd	r31, Y+2	; 0x02
    bd42:	81 84       	ldd	r8, Z+9	; 0x09
    bd44:	92 84       	ldd	r9, Z+10	; 0x0a
    bd46:	f1 e0       	ldi	r31, 0x01	; 1
    bd48:	8f 1a       	sub	r8, r31
    bd4a:	91 08       	sbc	r9, r1
    bd4c:	db 01       	movw	r26, r22
    bd4e:	ca 01       	movw	r24, r20
    bd50:	e9 e0       	ldi	r30, 0x09	; 9
    bd52:	b6 95       	lsr	r27
    bd54:	a7 95       	ror	r26
    bd56:	97 95       	ror	r25
    bd58:	87 95       	ror	r24
    bd5a:	ea 95       	dec	r30
    bd5c:	d1 f7       	brne	.-12     	; 0xbd52 <f_write+0xa6>
    bd5e:	88 22       	and	r8, r24
    bd60:	99 22       	and	r9, r25
    bd62:	81 14       	cp	r8, r1
    bd64:	91 04       	cpc	r9, r1
    bd66:	09 f0       	breq	.+2      	; 0xbd6a <f_write+0xbe>
    bd68:	51 c0       	rjmp	.+162    	; 0xbe0c <f_write+0x160>
    bd6a:	f7 01       	movw	r30, r14
    bd6c:	41 15       	cp	r20, r1
    bd6e:	51 05       	cpc	r21, r1
    bd70:	61 05       	cpc	r22, r1
    bd72:	71 05       	cpc	r23, r1
    bd74:	69 f4       	brne	.+26     	; 0xbd90 <f_write+0xe4>
    bd76:	66 81       	ldd	r22, Z+6	; 0x06
    bd78:	77 81       	ldd	r23, Z+7	; 0x07
    bd7a:	80 85       	ldd	r24, Z+8	; 0x08
    bd7c:	91 85       	ldd	r25, Z+9	; 0x09
    bd7e:	61 15       	cp	r22, r1
    bd80:	71 05       	cpc	r23, r1
    bd82:	81 05       	cpc	r24, r1
    bd84:	91 05       	cpc	r25, r1
    bd86:	f9 f4       	brne	.+62     	; 0xbdc6 <f_write+0x11a>
    bd88:	40 e0       	ldi	r20, 0x00	; 0
    bd8a:	50 e0       	ldi	r21, 0x00	; 0
    bd8c:	ba 01       	movw	r22, r20
    bd8e:	0d c0       	rjmp	.+26     	; 0xbdaa <f_write+0xfe>
    bd90:	82 a1       	ldd	r24, Z+34	; 0x22
    bd92:	93 a1       	ldd	r25, Z+35	; 0x23
    bd94:	89 2b       	or	r24, r25
    bd96:	21 f0       	breq	.+8      	; 0xbda0 <f_write+0xf4>
    bd98:	c7 01       	movw	r24, r14
    bd9a:	0e 94 e5 48 	call	0x91ca	; 0x91ca <clmt_clust>
    bd9e:	08 c0       	rjmp	.+16     	; 0xbdb0 <f_write+0x104>
    bda0:	f7 01       	movw	r30, r14
    bda2:	44 89       	ldd	r20, Z+20	; 0x14
    bda4:	55 89       	ldd	r21, Z+21	; 0x15
    bda6:	66 89       	ldd	r22, Z+22	; 0x16
    bda8:	77 89       	ldd	r23, Z+23	; 0x17
    bdaa:	c7 01       	movw	r24, r14
    bdac:	0e 94 39 52 	call	0xa472	; 0xa472 <create_chain>
    bdb0:	61 15       	cp	r22, r1
    bdb2:	71 05       	cpc	r23, r1
    bdb4:	81 05       	cpc	r24, r1
    bdb6:	91 05       	cpc	r25, r1
    bdb8:	31 f4       	brne	.+12     	; 0xbdc6 <f_write+0x11a>
    bdba:	f7 01       	movw	r30, r14
    bdbc:	86 85       	ldd	r24, Z+14	; 0x0e
    bdbe:	80 64       	ori	r24, 0x40	; 64
    bdc0:	86 87       	std	Z+14, r24	; 0x0e
    bdc2:	80 e0       	ldi	r24, 0x00	; 0
    bdc4:	05 c1       	rjmp	.+522    	; 0xbfd0 <f_write+0x324>
    bdc6:	61 30       	cpi	r22, 0x01	; 1
    bdc8:	71 05       	cpc	r23, r1
    bdca:	81 05       	cpc	r24, r1
    bdcc:	91 05       	cpc	r25, r1
    bdce:	11 f4       	brne	.+4      	; 0xbdd4 <f_write+0x128>
    bdd0:	82 e0       	ldi	r24, 0x02	; 2
    bdd2:	07 c0       	rjmp	.+14     	; 0xbde2 <f_write+0x136>
    bdd4:	6f 3f       	cpi	r22, 0xFF	; 255
    bdd6:	ff ef       	ldi	r31, 0xFF	; 255
    bdd8:	7f 07       	cpc	r23, r31
    bdda:	8f 07       	cpc	r24, r31
    bddc:	9f 07       	cpc	r25, r31
    bdde:	21 f4       	brne	.+8      	; 0xbde8 <f_write+0x13c>
    bde0:	81 e0       	ldi	r24, 0x01	; 1
    bde2:	f7 01       	movw	r30, r14
    bde4:	87 87       	std	Z+15, r24	; 0x0f
    bde6:	f4 c0       	rjmp	.+488    	; 0xbfd0 <f_write+0x324>
    bde8:	f7 01       	movw	r30, r14
    bdea:	64 8b       	std	Z+20, r22	; 0x14
    bdec:	75 8b       	std	Z+21, r23	; 0x15
    bdee:	86 8b       	std	Z+22, r24	; 0x16
    bdf0:	97 8b       	std	Z+23, r25	; 0x17
    bdf2:	06 81       	ldd	r16, Z+6	; 0x06
    bdf4:	17 81       	ldd	r17, Z+7	; 0x07
    bdf6:	20 85       	ldd	r18, Z+8	; 0x08
    bdf8:	31 85       	ldd	r19, Z+9	; 0x09
    bdfa:	01 15       	cp	r16, r1
    bdfc:	11 05       	cpc	r17, r1
    bdfe:	21 05       	cpc	r18, r1
    be00:	31 05       	cpc	r19, r1
    be02:	21 f4       	brne	.+8      	; 0xbe0c <f_write+0x160>
    be04:	66 83       	std	Z+6, r22	; 0x06
    be06:	77 83       	std	Z+7, r23	; 0x07
    be08:	80 87       	std	Z+8, r24	; 0x08
    be0a:	91 87       	std	Z+9, r25	; 0x09
    be0c:	f7 01       	movw	r30, r14
    be0e:	86 85       	ldd	r24, Z+14	; 0x0e
    be10:	87 ff       	sbrs	r24, 7
    be12:	13 c0       	rjmp	.+38     	; 0xbe3a <f_write+0x18e>
    be14:	20 8d       	ldd	r18, Z+24	; 0x18
    be16:	31 8d       	ldd	r19, Z+25	; 0x19
    be18:	42 8d       	ldd	r20, Z+26	; 0x1a
    be1a:	53 8d       	ldd	r21, Z+27	; 0x1b
    be1c:	e9 81       	ldd	r30, Y+1	; 0x01
    be1e:	fa 81       	ldd	r31, Y+2	; 0x02
    be20:	01 e0       	ldi	r16, 0x01	; 1
    be22:	10 e0       	ldi	r17, 0x00	; 0
    be24:	6d 81       	ldd	r22, Y+5	; 0x05
    be26:	7e 81       	ldd	r23, Y+6	; 0x06
    be28:	81 81       	ldd	r24, Z+1	; 0x01
    be2a:	0e 94 93 6b 	call	0xd726	; 0xd726 <disk_write>
    be2e:	89 2b       	or	r24, r25
    be30:	b9 f6       	brne	.-82     	; 0xbde0 <f_write+0x134>
    be32:	f7 01       	movw	r30, r14
    be34:	86 85       	ldd	r24, Z+14	; 0x0e
    be36:	8f 77       	andi	r24, 0x7F	; 127
    be38:	86 87       	std	Z+14, r24	; 0x0e
    be3a:	29 81       	ldd	r18, Y+1	; 0x01
    be3c:	3a 81       	ldd	r19, Y+2	; 0x02
    be3e:	3c 83       	std	Y+4, r19	; 0x04
    be40:	2b 83       	std	Y+3, r18	; 0x03
    be42:	f7 01       	movw	r30, r14
    be44:	44 89       	ldd	r20, Z+20	; 0x14
    be46:	55 89       	ldd	r21, Z+21	; 0x15
    be48:	66 89       	ldd	r22, Z+22	; 0x16
    be4a:	77 89       	ldd	r23, Z+23	; 0x17
    be4c:	c9 01       	movw	r24, r18
    be4e:	0e 94 bd 48 	call	0x917a	; 0x917a <clst2sect>
    be52:	61 15       	cp	r22, r1
    be54:	71 05       	cpc	r23, r1
    be56:	81 05       	cpc	r24, r1
    be58:	91 05       	cpc	r25, r1
    be5a:	09 f4       	brne	.+2      	; 0xbe5e <f_write+0x1b2>
    be5c:	b9 cf       	rjmp	.-142    	; 0xbdd0 <f_write+0x124>
    be5e:	1b 01       	movw	r2, r22
    be60:	2c 01       	movw	r4, r24
    be62:	28 0c       	add	r2, r8
    be64:	39 1c       	adc	r3, r9
    be66:	41 1c       	adc	r4, r1
    be68:	51 1c       	adc	r5, r1
    be6a:	65 01       	movw	r12, r10
    be6c:	cd 2c       	mov	r12, r13
    be6e:	dd 24       	eor	r13, r13
    be70:	c6 94       	lsr	r12
    be72:	c1 14       	cp	r12, r1
    be74:	d1 04       	cpc	r13, r1
    be76:	f1 f1       	breq	.+124    	; 0xbef4 <f_write+0x248>
    be78:	eb 81       	ldd	r30, Y+3	; 0x03
    be7a:	fc 81       	ldd	r31, Y+4	; 0x04
    be7c:	81 85       	ldd	r24, Z+9	; 0x09
    be7e:	92 85       	ldd	r25, Z+10	; 0x0a
    be80:	94 01       	movw	r18, r8
    be82:	2c 0d       	add	r18, r12
    be84:	3d 1d       	adc	r19, r13
    be86:	82 17       	cp	r24, r18
    be88:	93 07       	cpc	r25, r19
    be8a:	18 f4       	brcc	.+6      	; 0xbe92 <f_write+0x1e6>
    be8c:	6c 01       	movw	r12, r24
    be8e:	c8 18       	sub	r12, r8
    be90:	d9 08       	sbc	r13, r9
    be92:	86 01       	movw	r16, r12
    be94:	a2 01       	movw	r20, r4
    be96:	91 01       	movw	r18, r2
    be98:	b3 01       	movw	r22, r6
    be9a:	eb 81       	ldd	r30, Y+3	; 0x03
    be9c:	fc 81       	ldd	r31, Y+4	; 0x04
    be9e:	81 81       	ldd	r24, Z+1	; 0x01
    bea0:	0e 94 93 6b 	call	0xd726	; 0xd726 <disk_write>
    bea4:	89 2b       	or	r24, r25
    bea6:	09 f0       	breq	.+2      	; 0xbeaa <f_write+0x1fe>
    bea8:	9b cf       	rjmp	.-202    	; 0xbde0 <f_write+0x134>
    beaa:	f7 01       	movw	r30, r14
    beac:	80 8d       	ldd	r24, Z+24	; 0x18
    beae:	91 8d       	ldd	r25, Z+25	; 0x19
    beb0:	a2 8d       	ldd	r26, Z+26	; 0x1a
    beb2:	b3 8d       	ldd	r27, Z+27	; 0x1b
    beb4:	82 19       	sub	r24, r2
    beb6:	93 09       	sbc	r25, r3
    beb8:	a4 09       	sbc	r26, r4
    beba:	b5 09       	sbc	r27, r5
    bebc:	a6 01       	movw	r20, r12
    bebe:	60 e0       	ldi	r22, 0x00	; 0
    bec0:	70 e0       	ldi	r23, 0x00	; 0
    bec2:	84 17       	cp	r24, r20
    bec4:	95 07       	cpc	r25, r21
    bec6:	a6 07       	cpc	r26, r22
    bec8:	b7 07       	cpc	r27, r23
    beca:	80 f4       	brcc	.+32     	; 0xbeec <f_write+0x240>
    becc:	98 2f       	mov	r25, r24
    bece:	88 27       	eor	r24, r24
    bed0:	99 0f       	add	r25, r25
    bed2:	b3 01       	movw	r22, r6
    bed4:	68 0f       	add	r22, r24
    bed6:	79 1f       	adc	r23, r25
    bed8:	40 e0       	ldi	r20, 0x00	; 0
    beda:	52 e0       	ldi	r21, 0x02	; 2
    bedc:	8d 81       	ldd	r24, Y+5	; 0x05
    bede:	9e 81       	ldd	r25, Y+6	; 0x06
    bee0:	0e 94 88 49 	call	0x9310	; 0x9310 <mem_cpy.part.0>
    bee4:	f7 01       	movw	r30, r14
    bee6:	86 85       	ldd	r24, Z+14	; 0x0e
    bee8:	8f 77       	andi	r24, 0x7F	; 127
    beea:	86 87       	std	Z+14, r24	; 0x0e
    beec:	dc 2c       	mov	r13, r12
    beee:	cc 24       	eor	r12, r12
    bef0:	dd 0c       	add	r13, r13
    bef2:	43 c0       	rjmp	.+134    	; 0xbf7a <f_write+0x2ce>
    bef4:	f7 01       	movw	r30, r14
    bef6:	80 8d       	ldd	r24, Z+24	; 0x18
    bef8:	91 8d       	ldd	r25, Z+25	; 0x19
    befa:	a2 8d       	ldd	r26, Z+26	; 0x1a
    befc:	b3 8d       	ldd	r27, Z+27	; 0x1b
    befe:	28 16       	cp	r2, r24
    bf00:	39 06       	cpc	r3, r25
    bf02:	4a 06       	cpc	r4, r26
    bf04:	5b 06       	cpc	r5, r27
    bf06:	d9 f0       	breq	.+54     	; 0xbf3e <f_write+0x292>
    bf08:	40 89       	ldd	r20, Z+16	; 0x10
    bf0a:	51 89       	ldd	r21, Z+17	; 0x11
    bf0c:	62 89       	ldd	r22, Z+18	; 0x12
    bf0e:	73 89       	ldd	r23, Z+19	; 0x13
    bf10:	82 85       	ldd	r24, Z+10	; 0x0a
    bf12:	93 85       	ldd	r25, Z+11	; 0x0b
    bf14:	a4 85       	ldd	r26, Z+12	; 0x0c
    bf16:	b5 85       	ldd	r27, Z+13	; 0x0d
    bf18:	48 17       	cp	r20, r24
    bf1a:	59 07       	cpc	r21, r25
    bf1c:	6a 07       	cpc	r22, r26
    bf1e:	7b 07       	cpc	r23, r27
    bf20:	70 f4       	brcc	.+28     	; 0xbf3e <f_write+0x292>
    bf22:	01 e0       	ldi	r16, 0x01	; 1
    bf24:	10 e0       	ldi	r17, 0x00	; 0
    bf26:	a2 01       	movw	r20, r4
    bf28:	91 01       	movw	r18, r2
    bf2a:	6d 81       	ldd	r22, Y+5	; 0x05
    bf2c:	7e 81       	ldd	r23, Y+6	; 0x06
    bf2e:	eb 81       	ldd	r30, Y+3	; 0x03
    bf30:	fc 81       	ldd	r31, Y+4	; 0x04
    bf32:	81 81       	ldd	r24, Z+1	; 0x01
    bf34:	0e 94 83 6b 	call	0xd706	; 0xd706 <disk_read>
    bf38:	89 2b       	or	r24, r25
    bf3a:	09 f0       	breq	.+2      	; 0xbf3e <f_write+0x292>
    bf3c:	51 cf       	rjmp	.-350    	; 0xbde0 <f_write+0x134>
    bf3e:	f7 01       	movw	r30, r14
    bf40:	20 8e       	std	Z+24, r2	; 0x18
    bf42:	31 8e       	std	Z+25, r3	; 0x19
    bf44:	42 8e       	std	Z+26, r4	; 0x1a
    bf46:	53 8e       	std	Z+27, r5	; 0x1b
    bf48:	f7 01       	movw	r30, r14
    bf4a:	80 89       	ldd	r24, Z+16	; 0x10
    bf4c:	91 89       	ldd	r25, Z+17	; 0x11
    bf4e:	91 70       	andi	r25, 0x01	; 1
    bf50:	20 e0       	ldi	r18, 0x00	; 0
    bf52:	32 e0       	ldi	r19, 0x02	; 2
    bf54:	28 1b       	sub	r18, r24
    bf56:	39 0b       	sbc	r19, r25
    bf58:	65 01       	movw	r12, r10
    bf5a:	2a 15       	cp	r18, r10
    bf5c:	3b 05       	cpc	r19, r11
    bf5e:	08 f4       	brcc	.+2      	; 0xbf62 <f_write+0x2b6>
    bf60:	69 01       	movw	r12, r18
    bf62:	a6 01       	movw	r20, r12
    bf64:	b3 01       	movw	r22, r6
    bf66:	2d 81       	ldd	r18, Y+5	; 0x05
    bf68:	3e 81       	ldd	r19, Y+6	; 0x06
    bf6a:	82 0f       	add	r24, r18
    bf6c:	93 1f       	adc	r25, r19
    bf6e:	0e 94 88 49 	call	0x9310	; 0x9310 <mem_cpy.part.0>
    bf72:	f7 01       	movw	r30, r14
    bf74:	86 85       	ldd	r24, Z+14	; 0x0e
    bf76:	80 68       	ori	r24, 0x80	; 128
    bf78:	86 87       	std	Z+14, r24	; 0x0e
    bf7a:	ac 18       	sub	r10, r12
    bf7c:	bd 08       	sbc	r11, r13
    bf7e:	ef 81       	ldd	r30, Y+7	; 0x07
    bf80:	f8 85       	ldd	r31, Y+8	; 0x08
    bf82:	80 81       	ld	r24, Z
    bf84:	91 81       	ldd	r25, Z+1	; 0x01
    bf86:	8c 0d       	add	r24, r12
    bf88:	9d 1d       	adc	r25, r13
    bf8a:	91 83       	std	Z+1, r25	; 0x01
    bf8c:	80 83       	st	Z, r24
    bf8e:	6c 0c       	add	r6, r12
    bf90:	7d 1c       	adc	r7, r13
    bf92:	f7 01       	movw	r30, r14
    bf94:	80 89       	ldd	r24, Z+16	; 0x10
    bf96:	91 89       	ldd	r25, Z+17	; 0x11
    bf98:	a2 89       	ldd	r26, Z+18	; 0x12
    bf9a:	b3 89       	ldd	r27, Z+19	; 0x13
    bf9c:	8c 0d       	add	r24, r12
    bf9e:	9d 1d       	adc	r25, r13
    bfa0:	a1 1d       	adc	r26, r1
    bfa2:	b1 1d       	adc	r27, r1
    bfa4:	80 8b       	std	Z+16, r24	; 0x10
    bfa6:	91 8b       	std	Z+17, r25	; 0x11
    bfa8:	a2 8b       	std	Z+18, r26	; 0x12
    bfaa:	b3 8b       	std	Z+19, r27	; 0x13
    bfac:	42 85       	ldd	r20, Z+10	; 0x0a
    bfae:	53 85       	ldd	r21, Z+11	; 0x0b
    bfb0:	64 85       	ldd	r22, Z+12	; 0x0c
    bfb2:	75 85       	ldd	r23, Z+13	; 0x0d
    bfb4:	48 17       	cp	r20, r24
    bfb6:	59 07       	cpc	r21, r25
    bfb8:	6a 07       	cpc	r22, r26
    bfba:	7b 07       	cpc	r23, r27
    bfbc:	10 f4       	brcc	.+4      	; 0xbfc2 <f_write+0x316>
    bfbe:	ac 01       	movw	r20, r24
    bfc0:	bd 01       	movw	r22, r26
    bfc2:	f7 01       	movw	r30, r14
    bfc4:	42 87       	std	Z+10, r20	; 0x0a
    bfc6:	53 87       	std	Z+11, r21	; 0x0b
    bfc8:	64 87       	std	Z+12, r22	; 0x0c
    bfca:	75 87       	std	Z+13, r23	; 0x0d
    bfcc:	a5 ce       	rjmp	.-694    	; 0xbd18 <f_write+0x6c>
    bfce:	87 e0       	ldi	r24, 0x07	; 7
    bfd0:	90 e0       	ldi	r25, 0x00	; 0
    bfd2:	28 96       	adiw	r28, 0x08	; 8
    bfd4:	e2 e1       	ldi	r30, 0x12	; 18
    bfd6:	0c 94 0f e6 	jmp	0x1cc1e	; 0x1cc1e <__epilogue_restores__>

0000bfda <f_sync>:
    bfda:	8f 92       	push	r8
    bfdc:	9f 92       	push	r9
    bfde:	af 92       	push	r10
    bfe0:	bf 92       	push	r11
    bfe2:	ef 92       	push	r14
    bfe4:	ff 92       	push	r15
    bfe6:	0f 93       	push	r16
    bfe8:	1f 93       	push	r17
    bfea:	cf 93       	push	r28
    bfec:	df 93       	push	r29
    bfee:	00 d0       	rcall	.+0      	; 0xbff0 <f_sync+0x16>
    bff0:	cd b7       	in	r28, 0x3d	; 61
    bff2:	de b7       	in	r29, 0x3e	; 62
    bff4:	7c 01       	movw	r14, r24
    bff6:	be 01       	movw	r22, r28
    bff8:	6f 5f       	subi	r22, 0xFF	; 255
    bffa:	7f 4f       	sbci	r23, 0xFF	; 255
    bffc:	0e 94 5c 49 	call	0x92b8	; 0x92b8 <validate>
    c000:	00 97       	sbiw	r24, 0x00	; 0
    c002:	09 f0       	breq	.+2      	; 0xc006 <f_sync+0x2c>
    c004:	5d c0       	rjmp	.+186    	; 0xc0c0 <f_sync+0xe6>
    c006:	f7 01       	movw	r30, r14
    c008:	86 85       	ldd	r24, Z+14	; 0x0e
    c00a:	86 ff       	sbrs	r24, 6
    c00c:	55 c0       	rjmp	.+170    	; 0xc0b8 <f_sync+0xde>
    c00e:	87 ff       	sbrs	r24, 7
    c010:	15 c0       	rjmp	.+42     	; 0xc03c <f_sync+0x62>
    c012:	20 8d       	ldd	r18, Z+24	; 0x18
    c014:	31 8d       	ldd	r19, Z+25	; 0x19
    c016:	42 8d       	ldd	r20, Z+26	; 0x1a
    c018:	53 8d       	ldd	r21, Z+27	; 0x1b
    c01a:	e9 81       	ldd	r30, Y+1	; 0x01
    c01c:	fa 81       	ldd	r31, Y+2	; 0x02
    c01e:	01 e0       	ldi	r16, 0x01	; 1
    c020:	10 e0       	ldi	r17, 0x00	; 0
    c022:	b7 01       	movw	r22, r14
    c024:	6c 5d       	subi	r22, 0xDC	; 220
    c026:	7f 4f       	sbci	r23, 0xFF	; 255
    c028:	81 81       	ldd	r24, Z+1	; 0x01
    c02a:	0e 94 93 6b 	call	0xd726	; 0xd726 <disk_write>
    c02e:	89 2b       	or	r24, r25
    c030:	09 f0       	breq	.+2      	; 0xc034 <f_sync+0x5a>
    c032:	44 c0       	rjmp	.+136    	; 0xc0bc <f_sync+0xe2>
    c034:	f7 01       	movw	r30, r14
    c036:	86 85       	ldd	r24, Z+14	; 0x0e
    c038:	8f 77       	andi	r24, 0x7F	; 127
    c03a:	86 87       	std	Z+14, r24	; 0x0e
    c03c:	0e 94 b5 71 	call	0xe36a	; 0xe36a <get_fattime>
    c040:	4b 01       	movw	r8, r22
    c042:	5c 01       	movw	r10, r24
    c044:	f7 01       	movw	r30, r14
    c046:	44 8d       	ldd	r20, Z+28	; 0x1c
    c048:	55 8d       	ldd	r21, Z+29	; 0x1d
    c04a:	66 8d       	ldd	r22, Z+30	; 0x1e
    c04c:	77 8d       	ldd	r23, Z+31	; 0x1f
    c04e:	89 81       	ldd	r24, Y+1	; 0x01
    c050:	9a 81       	ldd	r25, Y+2	; 0x02
    c052:	0e 94 e8 4c 	call	0x99d0	; 0x99d0 <move_window>
    c056:	00 97       	sbiw	r24, 0x00	; 0
    c058:	99 f5       	brne	.+102    	; 0xc0c0 <f_sync+0xe6>
    c05a:	f7 01       	movw	r30, r14
    c05c:	00 a1       	ldd	r16, Z+32	; 0x20
    c05e:	11 a1       	ldd	r17, Z+33	; 0x21
    c060:	f8 01       	movw	r30, r16
    c062:	83 85       	ldd	r24, Z+11	; 0x0b
    c064:	80 62       	ori	r24, 0x20	; 32
    c066:	83 87       	std	Z+11, r24	; 0x0b
    c068:	f7 01       	movw	r30, r14
    c06a:	26 81       	ldd	r18, Z+6	; 0x06
    c06c:	37 81       	ldd	r19, Z+7	; 0x07
    c06e:	40 85       	ldd	r20, Z+8	; 0x08
    c070:	51 85       	ldd	r21, Z+9	; 0x09
    c072:	b8 01       	movw	r22, r16
    c074:	80 81       	ld	r24, Z
    c076:	91 81       	ldd	r25, Z+1	; 0x01
    c078:	0e 94 6e 4b 	call	0x96dc	; 0x96dc <st_clust.isra.5>
    c07c:	f7 01       	movw	r30, r14
    c07e:	42 85       	ldd	r20, Z+10	; 0x0a
    c080:	53 85       	ldd	r21, Z+11	; 0x0b
    c082:	64 85       	ldd	r22, Z+12	; 0x0c
    c084:	75 85       	ldd	r23, Z+13	; 0x0d
    c086:	c8 01       	movw	r24, r16
    c088:	4c 96       	adiw	r24, 0x1c	; 28
    c08a:	0e 94 19 48 	call	0x9032	; 0x9032 <st_dword>
    c08e:	b5 01       	movw	r22, r10
    c090:	a4 01       	movw	r20, r8
    c092:	c8 01       	movw	r24, r16
    c094:	46 96       	adiw	r24, 0x16	; 22
    c096:	0e 94 19 48 	call	0x9032	; 0x9032 <st_dword>
    c09a:	f8 01       	movw	r30, r16
    c09c:	12 8a       	std	Z+18, r1	; 0x12
    c09e:	13 8a       	std	Z+19, r1	; 0x13
    c0a0:	89 81       	ldd	r24, Y+1	; 0x01
    c0a2:	9a 81       	ldd	r25, Y+2	; 0x02
    c0a4:	21 e0       	ldi	r18, 0x01	; 1
    c0a6:	fc 01       	movw	r30, r24
    c0a8:	23 83       	std	Z+3, r18	; 0x03
    c0aa:	0e 94 ce 4b 	call	0x979c	; 0x979c <sync_fs>
    c0ae:	f7 01       	movw	r30, r14
    c0b0:	26 85       	ldd	r18, Z+14	; 0x0e
    c0b2:	2f 7b       	andi	r18, 0xBF	; 191
    c0b4:	26 87       	std	Z+14, r18	; 0x0e
    c0b6:	04 c0       	rjmp	.+8      	; 0xc0c0 <f_sync+0xe6>
    c0b8:	80 e0       	ldi	r24, 0x00	; 0
    c0ba:	01 c0       	rjmp	.+2      	; 0xc0be <f_sync+0xe4>
    c0bc:	81 e0       	ldi	r24, 0x01	; 1
    c0be:	90 e0       	ldi	r25, 0x00	; 0
    c0c0:	0f 90       	pop	r0
    c0c2:	0f 90       	pop	r0
    c0c4:	df 91       	pop	r29
    c0c6:	cf 91       	pop	r28
    c0c8:	1f 91       	pop	r17
    c0ca:	0f 91       	pop	r16
    c0cc:	ff 90       	pop	r15
    c0ce:	ef 90       	pop	r14
    c0d0:	bf 90       	pop	r11
    c0d2:	af 90       	pop	r10
    c0d4:	9f 90       	pop	r9
    c0d6:	8f 90       	pop	r8
    c0d8:	08 95       	ret

0000c0da <f_close>:
    c0da:	a2 e0       	ldi	r26, 0x02	; 2
    c0dc:	b0 e0       	ldi	r27, 0x00	; 0
    c0de:	e3 e7       	ldi	r30, 0x73	; 115
    c0e0:	f0 e6       	ldi	r31, 0x60	; 96
    c0e2:	0c 94 01 e6 	jmp	0x1cc02	; 0x1cc02 <__prologue_saves__+0x1c>
    c0e6:	8c 01       	movw	r16, r24
    c0e8:	78 df       	rcall	.-272    	; 0xbfda <f_sync>
    c0ea:	00 97       	sbiw	r24, 0x00	; 0
    c0ec:	59 f4       	brne	.+22     	; 0xc104 <f_close+0x2a>
    c0ee:	be 01       	movw	r22, r28
    c0f0:	6f 5f       	subi	r22, 0xFF	; 255
    c0f2:	7f 4f       	sbci	r23, 0xFF	; 255
    c0f4:	c8 01       	movw	r24, r16
    c0f6:	0e 94 5c 49 	call	0x92b8	; 0x92b8 <validate>
    c0fa:	00 97       	sbiw	r24, 0x00	; 0
    c0fc:	19 f4       	brne	.+6      	; 0xc104 <f_close+0x2a>
    c0fe:	f8 01       	movw	r30, r16
    c100:	11 82       	std	Z+1, r1	; 0x01
    c102:	10 82       	st	Z, r1
    c104:	22 96       	adiw	r28, 0x02	; 2
    c106:	e4 e0       	ldi	r30, 0x04	; 4
    c108:	0c 94 1d e6 	jmp	0x1cc3a	; 0x1cc3a <__epilogue_restores__+0x1c>

0000c10c <f_chdir>:
    c10c:	a2 e3       	ldi	r26, 0x32	; 50
    c10e:	b0 e0       	ldi	r27, 0x00	; 0
    c110:	ec e8       	ldi	r30, 0x8C	; 140
    c112:	f0 e6       	ldi	r31, 0x60	; 96
    c114:	0c 94 fd e5 	jmp	0x1cbfa	; 0x1cbfa <__prologue_saves__+0x14>
    c118:	9a ab       	std	Y+50, r25	; 0x32
    c11a:	89 ab       	std	Y+49, r24	; 0x31
    c11c:	40 e0       	ldi	r20, 0x00	; 0
    c11e:	be 01       	movw	r22, r28
    c120:	61 5d       	subi	r22, 0xD1	; 209
    c122:	7f 4f       	sbci	r23, 0xFF	; 255
    c124:	ce 01       	movw	r24, r28
    c126:	c1 96       	adiw	r24, 0x31	; 49
    c128:	0e 94 63 4d 	call	0x9ac6	; 0x9ac6 <mount_volume>
    c12c:	00 97       	sbiw	r24, 0x00	; 0
    c12e:	09 f0       	breq	.+2      	; 0xc132 <f_chdir+0x26>
    c130:	44 c0       	rjmp	.+136    	; 0xc1ba <f_chdir+0xae>
    c132:	8f a5       	ldd	r24, Y+47	; 0x2f
    c134:	98 a9       	ldd	r25, Y+48	; 0x30
    c136:	9a 83       	std	Y+2, r25	; 0x02
    c138:	89 83       	std	Y+1, r24	; 0x01
    c13a:	80 e0       	ldi	r24, 0x00	; 0
    c13c:	92 e0       	ldi	r25, 0x02	; 2
    c13e:	0e 94 c7 6a 	call	0xd58e	; 0xd58e <ff_memalloc>
    c142:	7c 01       	movw	r14, r24
    c144:	00 97       	sbiw	r24, 0x00	; 0
    c146:	a9 f1       	breq	.+106    	; 0xc1b2 <f_chdir+0xa6>
    c148:	ef a5       	ldd	r30, Y+47	; 0x2f
    c14a:	f8 a9       	ldd	r31, Y+48	; 0x30
    c14c:	94 87       	std	Z+12, r25	; 0x0c
    c14e:	83 87       	std	Z+11, r24	; 0x0b
    c150:	69 a9       	ldd	r22, Y+49	; 0x31
    c152:	7a a9       	ldd	r23, Y+50	; 0x32
    c154:	ce 01       	movw	r24, r28
    c156:	01 96       	adiw	r24, 0x01	; 1
    c158:	31 d8       	rcall	.-3998   	; 0xb1bc <follow_path>
    c15a:	8c 01       	movw	r16, r24
    c15c:	89 2b       	or	r24, r25
    c15e:	09 f5       	brne	.+66     	; 0xc1a2 <f_chdir+0x96>
    c160:	88 a5       	ldd	r24, Y+40	; 0x28
    c162:	87 ff       	sbrs	r24, 7
    c164:	0b c0       	rjmp	.+22     	; 0xc17c <f_chdir+0x70>
    c166:	ef a5       	ldd	r30, Y+47	; 0x2f
    c168:	f8 a9       	ldd	r31, Y+48	; 0x30
    c16a:	8f 81       	ldd	r24, Y+7	; 0x07
    c16c:	98 85       	ldd	r25, Y+8	; 0x08
    c16e:	a9 85       	ldd	r26, Y+9	; 0x09
    c170:	ba 85       	ldd	r27, Y+10	; 0x0a
    c172:	85 8b       	std	Z+21, r24	; 0x15
    c174:	96 8b       	std	Z+22, r25	; 0x16
    c176:	a7 8b       	std	Z+23, r26	; 0x17
    c178:	b0 8f       	std	Z+24, r27	; 0x18
    c17a:	13 c0       	rjmp	.+38     	; 0xc1a2 <f_chdir+0x96>
    c17c:	8d 81       	ldd	r24, Y+5	; 0x05
    c17e:	84 ff       	sbrs	r24, 4
    c180:	0e c0       	rjmp	.+28     	; 0xc19e <f_chdir+0x92>
    c182:	cf a4       	ldd	r12, Y+47	; 0x2f
    c184:	d8 a8       	ldd	r13, Y+48	; 0x30
    c186:	6b 8d       	ldd	r22, Y+27	; 0x1b
    c188:	7c 8d       	ldd	r23, Y+28	; 0x1c
    c18a:	f6 01       	movw	r30, r12
    c18c:	80 81       	ld	r24, Z
    c18e:	0e 94 59 4b 	call	0x96b2	; 0x96b2 <ld_clust.isra.4>
    c192:	f6 01       	movw	r30, r12
    c194:	65 8b       	std	Z+21, r22	; 0x15
    c196:	76 8b       	std	Z+22, r23	; 0x16
    c198:	87 8b       	std	Z+23, r24	; 0x17
    c19a:	90 8f       	std	Z+24, r25	; 0x18
    c19c:	02 c0       	rjmp	.+4      	; 0xc1a2 <f_chdir+0x96>
    c19e:	05 e0       	ldi	r16, 0x05	; 5
    c1a0:	10 e0       	ldi	r17, 0x00	; 0
    c1a2:	c7 01       	movw	r24, r14
    c1a4:	0e 94 ca 6a 	call	0xd594	; 0xd594 <ff_memfree>
    c1a8:	04 30       	cpi	r16, 0x04	; 4
    c1aa:	11 05       	cpc	r17, r1
    c1ac:	29 f4       	brne	.+10     	; 0xc1b8 <f_chdir+0xac>
    c1ae:	85 e0       	ldi	r24, 0x05	; 5
    c1b0:	01 c0       	rjmp	.+2      	; 0xc1b4 <f_chdir+0xa8>
    c1b2:	81 e1       	ldi	r24, 0x11	; 17
    c1b4:	90 e0       	ldi	r25, 0x00	; 0
    c1b6:	01 c0       	rjmp	.+2      	; 0xc1ba <f_chdir+0xae>
    c1b8:	c8 01       	movw	r24, r16
    c1ba:	e2 96       	adiw	r28, 0x32	; 50
    c1bc:	e8 e0       	ldi	r30, 0x08	; 8
    c1be:	0c 94 19 e6 	jmp	0x1cc32	; 0x1cc32 <__epilogue_restores__+0x14>

0000c1c2 <f_getcwd>:
    c1c2:	a8 e4       	ldi	r26, 0x48	; 72
    c1c4:	b1 e0       	ldi	r27, 0x01	; 1
    c1c6:	e7 ee       	ldi	r30, 0xE7	; 231
    c1c8:	f0 e6       	ldi	r31, 0x60	; 96
    c1ca:	0c 94 f3 e5 	jmp	0x1cbe6	; 0x1cbe6 <__prologue_saves__>
    c1ce:	c9 5b       	subi	r28, 0xB9	; 185
    c1d0:	de 4f       	sbci	r29, 0xFE	; 254
    c1d2:	99 83       	std	Y+1, r25	; 0x01
    c1d4:	88 83       	st	Y, r24
    c1d6:	c7 54       	subi	r28, 0x47	; 71
    c1d8:	d1 40       	sbci	r29, 0x01	; 1
    c1da:	4b 01       	movw	r8, r22
    c1dc:	7c 01       	movw	r14, r24
    c1de:	fc 01       	movw	r30, r24
    c1e0:	10 82       	st	Z, r1
    c1e2:	40 e0       	ldi	r20, 0x00	; 0
    c1e4:	be 01       	movw	r22, r28
    c1e6:	6b 5b       	subi	r22, 0xBB	; 187
    c1e8:	7e 4f       	sbci	r23, 0xFE	; 254
    c1ea:	ce 01       	movw	r24, r28
    c1ec:	89 5b       	subi	r24, 0xB9	; 185
    c1ee:	9e 4f       	sbci	r25, 0xFE	; 254
    c1f0:	0e 94 63 4d 	call	0x9ac6	; 0x9ac6 <mount_volume>
    c1f4:	1c 01       	movw	r2, r24
    c1f6:	89 2b       	or	r24, r25
    c1f8:	09 f0       	breq	.+2      	; 0xc1fc <f_getcwd+0x3a>
    c1fa:	03 c1       	rjmp	.+518    	; 0xc402 <f_getcwd+0x240>
    c1fc:	cb 5b       	subi	r28, 0xBB	; 187
    c1fe:	de 4f       	sbci	r29, 0xFE	; 254
    c200:	88 81       	ld	r24, Y
    c202:	99 81       	ldd	r25, Y+1	; 0x01
    c204:	c5 54       	subi	r28, 0x45	; 69
    c206:	d1 40       	sbci	r29, 0x01	; 1
    c208:	c9 5e       	subi	r28, 0xE9	; 233
    c20a:	de 4f       	sbci	r29, 0xFE	; 254
    c20c:	99 83       	std	Y+1, r25	; 0x01
    c20e:	88 83       	st	Y, r24
    c210:	c7 51       	subi	r28, 0x17	; 23
    c212:	d1 40       	sbci	r29, 0x01	; 1
    c214:	80 e0       	ldi	r24, 0x00	; 0
    c216:	92 e0       	ldi	r25, 0x02	; 2
    c218:	0e 94 c7 6a 	call	0xd58e	; 0xd58e <ff_memalloc>
    c21c:	5c 01       	movw	r10, r24
    c21e:	00 97       	sbiw	r24, 0x00	; 0
    c220:	09 f4       	brne	.+2      	; 0xc224 <f_getcwd+0x62>
    c222:	f3 c0       	rjmp	.+486    	; 0xc40a <f_getcwd+0x248>
    c224:	cb 5b       	subi	r28, 0xBB	; 187
    c226:	de 4f       	sbci	r29, 0xFE	; 254
    c228:	e8 81       	ld	r30, Y
    c22a:	f9 81       	ldd	r31, Y+1	; 0x01
    c22c:	c5 54       	subi	r28, 0x45	; 69
    c22e:	d1 40       	sbci	r29, 0x01	; 1
    c230:	94 87       	std	Z+12, r25	; 0x0c
    c232:	83 87       	std	Z+11, r24	; 0x0b
    c234:	85 89       	ldd	r24, Z+21	; 0x15
    c236:	96 89       	ldd	r25, Z+22	; 0x16
    c238:	a7 89       	ldd	r26, Z+23	; 0x17
    c23a:	b0 8d       	ldd	r27, Z+24	; 0x18
    c23c:	c3 5e       	subi	r28, 0xE3	; 227
    c23e:	de 4f       	sbci	r29, 0xFE	; 254
    c240:	88 83       	st	Y, r24
    c242:	99 83       	std	Y+1, r25	; 0x01
    c244:	aa 83       	std	Y+2, r26	; 0x02
    c246:	bb 83       	std	Y+3, r27	; 0x03
    c248:	cd 51       	subi	r28, 0x1D	; 29
    c24a:	d1 40       	sbci	r29, 0x01	; 1
    c24c:	84 01       	movw	r16, r8
    c24e:	ce 01       	movw	r24, r28
    c250:	01 96       	adiw	r24, 0x01	; 1
    c252:	6c 01       	movw	r12, r24
    c254:	c3 5e       	subi	r28, 0xE3	; 227
    c256:	de 4f       	sbci	r29, 0xFE	; 254
    c258:	48 80       	ld	r4, Y
    c25a:	59 80       	ldd	r5, Y+1	; 0x01
    c25c:	6a 80       	ldd	r6, Y+2	; 0x02
    c25e:	7b 80       	ldd	r7, Y+3	; 0x03
    c260:	cd 51       	subi	r28, 0x1D	; 29
    c262:	d1 40       	sbci	r29, 0x01	; 1
    c264:	41 14       	cp	r4, r1
    c266:	51 04       	cpc	r5, r1
    c268:	61 04       	cpc	r6, r1
    c26a:	71 04       	cpc	r7, r1
    c26c:	09 f4       	brne	.+2      	; 0xc270 <f_getcwd+0xae>
    c26e:	a3 c0       	rjmp	.+326    	; 0xc3b6 <f_getcwd+0x1f4>
    c270:	40 e2       	ldi	r20, 0x20	; 32
    c272:	50 e0       	ldi	r21, 0x00	; 0
    c274:	60 e0       	ldi	r22, 0x00	; 0
    c276:	70 e0       	ldi	r23, 0x00	; 0
    c278:	ce 01       	movw	r24, r28
    c27a:	89 5e       	subi	r24, 0xE9	; 233
    c27c:	9e 4f       	sbci	r25, 0xFE	; 254
    c27e:	0e 94 78 51 	call	0xa2f0	; 0xa2f0 <dir_sdi>
    c282:	00 97       	sbiw	r24, 0x00	; 0
    c284:	09 f0       	breq	.+2      	; 0xc288 <f_getcwd+0xc6>
    c286:	c6 c0       	rjmp	.+396    	; 0xc414 <f_getcwd+0x252>
    c288:	c3 5d       	subi	r28, 0xD3	; 211
    c28a:	de 4f       	sbci	r29, 0xFE	; 254
    c28c:	48 81       	ld	r20, Y
    c28e:	59 81       	ldd	r21, Y+1	; 0x01
    c290:	6a 81       	ldd	r22, Y+2	; 0x02
    c292:	7b 81       	ldd	r23, Y+3	; 0x03
    c294:	cd 52       	subi	r28, 0x2D	; 45
    c296:	d1 40       	sbci	r29, 0x01	; 1
    c298:	cb 5b       	subi	r28, 0xBB	; 187
    c29a:	de 4f       	sbci	r29, 0xFE	; 254
    c29c:	88 81       	ld	r24, Y
    c29e:	99 81       	ldd	r25, Y+1	; 0x01
    c2a0:	c5 54       	subi	r28, 0x45	; 69
    c2a2:	d1 40       	sbci	r29, 0x01	; 1
    c2a4:	0e 94 e8 4c 	call	0x99d0	; 0x99d0 <move_window>
    c2a8:	00 97       	sbiw	r24, 0x00	; 0
    c2aa:	09 f0       	breq	.+2      	; 0xc2ae <f_getcwd+0xec>
    c2ac:	b3 c0       	rjmp	.+358    	; 0xc414 <f_getcwd+0x252>
    c2ae:	cf 5c       	subi	r28, 0xCF	; 207
    c2b0:	de 4f       	sbci	r29, 0xFE	; 254
    c2b2:	68 81       	ld	r22, Y
    c2b4:	79 81       	ldd	r23, Y+1	; 0x01
    c2b6:	c1 53       	subi	r28, 0x31	; 49
    c2b8:	d1 40       	sbci	r29, 0x01	; 1
    c2ba:	cb 5b       	subi	r28, 0xBB	; 187
    c2bc:	de 4f       	sbci	r29, 0xFE	; 254
    c2be:	e8 81       	ld	r30, Y
    c2c0:	f9 81       	ldd	r31, Y+1	; 0x01
    c2c2:	c5 54       	subi	r28, 0x45	; 69
    c2c4:	d1 40       	sbci	r29, 0x01	; 1
    c2c6:	80 81       	ld	r24, Z
    c2c8:	0e 94 59 4b 	call	0x96b2	; 0x96b2 <ld_clust.isra.4>
    c2cc:	c3 5e       	subi	r28, 0xE3	; 227
    c2ce:	de 4f       	sbci	r29, 0xFE	; 254
    c2d0:	68 83       	st	Y, r22
    c2d2:	79 83       	std	Y+1, r23	; 0x01
    c2d4:	8a 83       	std	Y+2, r24	; 0x02
    c2d6:	9b 83       	std	Y+3, r25	; 0x03
    c2d8:	cd 51       	subi	r28, 0x1D	; 29
    c2da:	d1 40       	sbci	r29, 0x01	; 1
    c2dc:	40 e0       	ldi	r20, 0x00	; 0
    c2de:	50 e0       	ldi	r21, 0x00	; 0
    c2e0:	ba 01       	movw	r22, r20
    c2e2:	ce 01       	movw	r24, r28
    c2e4:	89 5e       	subi	r24, 0xE9	; 233
    c2e6:	9e 4f       	sbci	r25, 0xFE	; 254
    c2e8:	0e 94 78 51 	call	0xa2f0	; 0xa2f0 <dir_sdi>
    c2ec:	00 97       	sbiw	r24, 0x00	; 0
    c2ee:	09 f0       	breq	.+2      	; 0xc2f2 <f_getcwd+0x130>
    c2f0:	91 c0       	rjmp	.+290    	; 0xc414 <f_getcwd+0x252>
    c2f2:	60 e0       	ldi	r22, 0x00	; 0
    c2f4:	70 e0       	ldi	r23, 0x00	; 0
    c2f6:	ce 01       	movw	r24, r28
    c2f8:	89 5e       	subi	r24, 0xE9	; 233
    c2fa:	9e 4f       	sbci	r25, 0xFE	; 254
    c2fc:	0e 94 12 55 	call	0xaa24	; 0xaa24 <dir_read>
    c300:	00 97       	sbiw	r24, 0x00	; 0
    c302:	09 f0       	breq	.+2      	; 0xc306 <f_getcwd+0x144>
    c304:	89 c0       	rjmp	.+274    	; 0xc418 <f_getcwd+0x256>
    c306:	cf 5c       	subi	r28, 0xCF	; 207
    c308:	de 4f       	sbci	r29, 0xFE	; 254
    c30a:	68 81       	ld	r22, Y
    c30c:	79 81       	ldd	r23, Y+1	; 0x01
    c30e:	c1 53       	subi	r28, 0x31	; 49
    c310:	d1 40       	sbci	r29, 0x01	; 1
    c312:	cb 5b       	subi	r28, 0xBB	; 187
    c314:	de 4f       	sbci	r29, 0xFE	; 254
    c316:	e8 81       	ld	r30, Y
    c318:	f9 81       	ldd	r31, Y+1	; 0x01
    c31a:	c5 54       	subi	r28, 0x45	; 69
    c31c:	d1 40       	sbci	r29, 0x01	; 1
    c31e:	80 81       	ld	r24, Z
    c320:	0e 94 59 4b 	call	0x96b2	; 0x96b2 <ld_clust.isra.4>
    c324:	46 16       	cp	r4, r22
    c326:	57 06       	cpc	r5, r23
    c328:	68 06       	cpc	r6, r24
    c32a:	79 06       	cpc	r7, r25
    c32c:	41 f4       	brne	.+16     	; 0xc33e <f_getcwd+0x17c>
    c32e:	b6 01       	movw	r22, r12
    c330:	ce 01       	movw	r24, r28
    c332:	89 5e       	subi	r24, 0xE9	; 233
    c334:	9e 4f       	sbci	r25, 0xFE	; 254
    c336:	0e 94 40 4a 	call	0x9480	; 0x9480 <get_fileinfo>
    c33a:	f6 01       	movw	r30, r12
    c33c:	0a c0       	rjmp	.+20     	; 0xc352 <f_getcwd+0x190>
    c33e:	60 e0       	ldi	r22, 0x00	; 0
    c340:	70 e0       	ldi	r23, 0x00	; 0
    c342:	ce 01       	movw	r24, r28
    c344:	89 5e       	subi	r24, 0xE9	; 233
    c346:	9e 4f       	sbci	r25, 0xFE	; 254
    c348:	0e 94 f0 53 	call	0xa7e0	; 0xa7e0 <dir_next>
    c34c:	00 97       	sbiw	r24, 0x00	; 0
    c34e:	89 f2       	breq	.-94     	; 0xc2f2 <f_getcwd+0x130>
    c350:	63 c0       	rjmp	.+198    	; 0xc418 <f_getcwd+0x256>
    c352:	cf 01       	movw	r24, r30
    c354:	8c 19       	sub	r24, r12
    c356:	9d 09       	sbc	r25, r13
    c358:	31 96       	adiw	r30, 0x01	; 1
    c35a:	25 89       	ldd	r18, Z+21	; 0x15
    c35c:	21 11       	cpse	r18, r1
    c35e:	f9 cf       	rjmp	.-14     	; 0xc352 <f_getcwd+0x190>
    c360:	9c 01       	movw	r18, r24
    c362:	2f 5f       	subi	r18, 0xFF	; 255
    c364:	3f 4f       	sbci	r19, 0xFF	; 255
    c366:	02 17       	cp	r16, r18
    c368:	13 07       	cpc	r17, r19
    c36a:	08 f4       	brcc	.+2      	; 0xc36e <f_getcwd+0x1ac>
    c36c:	51 c0       	rjmp	.+162    	; 0xc410 <f_getcwd+0x24e>
    c36e:	f6 01       	movw	r30, r12
    c370:	e8 0f       	add	r30, r24
    c372:	f9 1f       	adc	r31, r25
    c374:	98 01       	movw	r18, r16
    c376:	ce 16       	cp	r12, r30
    c378:	df 06       	cpc	r13, r31
    c37a:	71 f0       	breq	.+28     	; 0xc398 <f_getcwd+0x1d6>
    c37c:	21 50       	subi	r18, 0x01	; 1
    c37e:	31 09       	sbc	r19, r1
    c380:	45 89       	ldd	r20, Z+21	; 0x15
    c382:	c9 5b       	subi	r28, 0xB9	; 185
    c384:	de 4f       	sbci	r29, 0xFE	; 254
    c386:	a8 81       	ld	r26, Y
    c388:	b9 81       	ldd	r27, Y+1	; 0x01
    c38a:	c7 54       	subi	r28, 0x47	; 71
    c38c:	d1 40       	sbci	r29, 0x01	; 1
    c38e:	a2 0f       	add	r26, r18
    c390:	b3 1f       	adc	r27, r19
    c392:	4c 93       	st	X, r20
    c394:	31 97       	sbiw	r30, 0x01	; 1
    c396:	ef cf       	rjmp	.-34     	; 0xc376 <f_getcwd+0x1b4>
    c398:	80 95       	com	r24
    c39a:	90 95       	com	r25
    c39c:	08 0f       	add	r16, r24
    c39e:	19 1f       	adc	r17, r25
    c3a0:	c9 5b       	subi	r28, 0xB9	; 185
    c3a2:	de 4f       	sbci	r29, 0xFE	; 254
    c3a4:	e8 81       	ld	r30, Y
    c3a6:	f9 81       	ldd	r31, Y+1	; 0x01
    c3a8:	c7 54       	subi	r28, 0x47	; 71
    c3aa:	d1 40       	sbci	r29, 0x01	; 1
    c3ac:	e0 0f       	add	r30, r16
    c3ae:	f1 1f       	adc	r31, r17
    c3b0:	9f e2       	ldi	r25, 0x2F	; 47
    c3b2:	90 83       	st	Z, r25
    c3b4:	4f cf       	rjmp	.-354    	; 0xc254 <f_getcwd+0x92>
    c3b6:	08 15       	cp	r16, r8
    c3b8:	19 05       	cpc	r17, r9
    c3ba:	61 f4       	brne	.+24     	; 0xc3d4 <f_getcwd+0x212>
    c3bc:	01 50       	subi	r16, 0x01	; 1
    c3be:	11 09       	sbc	r17, r1
    c3c0:	c9 5b       	subi	r28, 0xB9	; 185
    c3c2:	de 4f       	sbci	r29, 0xFE	; 254
    c3c4:	e8 81       	ld	r30, Y
    c3c6:	f9 81       	ldd	r31, Y+1	; 0x01
    c3c8:	c7 54       	subi	r28, 0x47	; 71
    c3ca:	d1 40       	sbci	r29, 0x01	; 1
    c3cc:	e0 0f       	add	r30, r16
    c3ce:	f1 1f       	adc	r31, r17
    c3d0:	8f e2       	ldi	r24, 0x2F	; 47
    c3d2:	80 83       	st	Z, r24
    c3d4:	ef ef       	ldi	r30, 0xFF	; 255
    c3d6:	ee 1a       	sub	r14, r30
    c3d8:	fe 0a       	sbc	r15, r30
    c3da:	c9 5b       	subi	r28, 0xB9	; 185
    c3dc:	de 4f       	sbci	r29, 0xFE	; 254
    c3de:	e8 81       	ld	r30, Y
    c3e0:	f9 81       	ldd	r31, Y+1	; 0x01
    c3e2:	c7 54       	subi	r28, 0x47	; 71
    c3e4:	d1 40       	sbci	r29, 0x01	; 1
    c3e6:	e0 0f       	add	r30, r16
    c3e8:	f1 1f       	adc	r31, r17
    c3ea:	80 81       	ld	r24, Z
    c3ec:	f7 01       	movw	r30, r14
    c3ee:	31 97       	sbiw	r30, 0x01	; 1
    c3f0:	80 83       	st	Z, r24
    c3f2:	0f 5f       	subi	r16, 0xFF	; 255
    c3f4:	1f 4f       	sbci	r17, 0xFF	; 255
    c3f6:	08 15       	cp	r16, r8
    c3f8:	19 05       	cpc	r17, r9
    c3fa:	60 f3       	brcs	.-40     	; 0xc3d4 <f_getcwd+0x212>
    c3fc:	c5 01       	movw	r24, r10
    c3fe:	0e 94 ca 6a 	call	0xd594	; 0xd594 <ff_memfree>
    c402:	f7 01       	movw	r30, r14
    c404:	10 82       	st	Z, r1
    c406:	c1 01       	movw	r24, r2
    c408:	0d c0       	rjmp	.+26     	; 0xc424 <f_getcwd+0x262>
    c40a:	81 e1       	ldi	r24, 0x11	; 17
    c40c:	90 e0       	ldi	r25, 0x00	; 0
    c40e:	0a c0       	rjmp	.+20     	; 0xc424 <f_getcwd+0x262>
    c410:	81 e1       	ldi	r24, 0x11	; 17
    c412:	90 e0       	ldi	r25, 0x00	; 0
    c414:	1c 01       	movw	r2, r24
    c416:	f2 cf       	rjmp	.-28     	; 0xc3fc <f_getcwd+0x23a>
    c418:	84 30       	cpi	r24, 0x04	; 4
    c41a:	91 05       	cpc	r25, r1
    c41c:	d9 f7       	brne	.-10     	; 0xc414 <f_getcwd+0x252>
    c41e:	82 e0       	ldi	r24, 0x02	; 2
    c420:	90 e0       	ldi	r25, 0x00	; 0
    c422:	f8 cf       	rjmp	.-16     	; 0xc414 <f_getcwd+0x252>
    c424:	c8 5b       	subi	r28, 0xB8	; 184
    c426:	de 4f       	sbci	r29, 0xFE	; 254
    c428:	e2 e1       	ldi	r30, 0x12	; 18
    c42a:	0c 94 0f e6 	jmp	0x1cc1e	; 0x1cc1e <__epilogue_restores__>

0000c42e <f_lseek>:
    c42e:	aa e0       	ldi	r26, 0x0A	; 10
    c430:	b0 e0       	ldi	r27, 0x00	; 0
    c432:	ed e1       	ldi	r30, 0x1D	; 29
    c434:	f2 e6       	ldi	r31, 0x62	; 98
    c436:	0c 94 f3 e5 	jmp	0x1cbe6	; 0x1cbe6 <__prologue_saves__>
    c43a:	1c 01       	movw	r2, r24
    c43c:	6a 01       	movw	r12, r20
    c43e:	7b 01       	movw	r14, r22
    c440:	be 01       	movw	r22, r28
    c442:	6f 5f       	subi	r22, 0xFF	; 255
    c444:	7f 4f       	sbci	r23, 0xFF	; 255
    c446:	0e 94 5c 49 	call	0x92b8	; 0x92b8 <validate>
    c44a:	00 97       	sbiw	r24, 0x00	; 0
    c44c:	09 f0       	breq	.+2      	; 0xc450 <f_lseek+0x22>
    c44e:	c6 c2       	rjmp	.+1420   	; 0xc9dc <f_lseek+0x5ae>
    c450:	d1 01       	movw	r26, r2
    c452:	1f 96       	adiw	r26, 0x0f	; 15
    c454:	8c 91       	ld	r24, X
    c456:	1f 97       	sbiw	r26, 0x0f	; 15
    c458:	90 e0       	ldi	r25, 0x00	; 0
    c45a:	00 97       	sbiw	r24, 0x00	; 0
    c45c:	09 f0       	breq	.+2      	; 0xc460 <f_lseek+0x32>
    c45e:	be c2       	rjmp	.+1404   	; 0xc9dc <f_lseek+0x5ae>
    c460:	92 96       	adiw	r26, 0x22	; 34
    c462:	ed 91       	ld	r30, X+
    c464:	fc 91       	ld	r31, X
    c466:	93 97       	sbiw	r26, 0x23	; 35
    c468:	30 97       	sbiw	r30, 0x00	; 0
    c46a:	09 f4       	brne	.+2      	; 0xc46e <f_lseek+0x40>
    c46c:	3a c1       	rjmp	.+628    	; 0xc6e2 <f_lseek+0x2b4>
    c46e:	bf ef       	ldi	r27, 0xFF	; 255
    c470:	cb 16       	cp	r12, r27
    c472:	db 06       	cpc	r13, r27
    c474:	eb 06       	cpc	r14, r27
    c476:	fb 06       	cpc	r15, r27
    c478:	09 f0       	breq	.+2      	; 0xc47c <f_lseek+0x4e>
    c47a:	9f c0       	rjmp	.+318    	; 0xc5ba <f_lseek+0x18c>
    c47c:	8f 01       	movw	r16, r30
    c47e:	0c 5f       	subi	r16, 0xFC	; 252
    c480:	1f 4f       	sbci	r17, 0xFF	; 255
    c482:	20 81       	ld	r18, Z
    c484:	31 81       	ldd	r19, Z+1	; 0x01
    c486:	42 81       	ldd	r20, Z+2	; 0x02
    c488:	53 81       	ldd	r21, Z+3	; 0x03
    c48a:	2f 83       	std	Y+7, r18	; 0x07
    c48c:	38 87       	std	Y+8, r19	; 0x08
    c48e:	49 87       	std	Y+9, r20	; 0x09
    c490:	5a 87       	std	Y+10, r21	; 0x0a
    c492:	d1 01       	movw	r26, r2
    c494:	16 96       	adiw	r26, 0x06	; 6
    c496:	8d 90       	ld	r8, X+
    c498:	9d 90       	ld	r9, X+
    c49a:	ad 90       	ld	r10, X+
    c49c:	bc 90       	ld	r11, X
    c49e:	19 97       	sbiw	r26, 0x09	; 9
    c4a0:	52 e0       	ldi	r21, 0x02	; 2
    c4a2:	c5 2e       	mov	r12, r21
    c4a4:	d1 2c       	mov	r13, r1
    c4a6:	e1 2c       	mov	r14, r1
    c4a8:	f1 2c       	mov	r15, r1
    c4aa:	81 14       	cp	r8, r1
    c4ac:	91 04       	cpc	r9, r1
    c4ae:	a1 04       	cpc	r10, r1
    c4b0:	b1 04       	cpc	r11, r1
    c4b2:	09 f4       	brne	.+2      	; 0xc4b6 <f_lseek+0x88>
    c4b4:	68 c0       	rjmp	.+208    	; 0xc586 <f_lseek+0x158>
    c4b6:	24 01       	movw	r4, r8
    c4b8:	35 01       	movw	r6, r10
    c4ba:	1b 82       	std	Y+3, r1	; 0x03
    c4bc:	1c 82       	std	Y+4, r1	; 0x04
    c4be:	1d 82       	std	Y+5, r1	; 0x05
    c4c0:	1e 82       	std	Y+6, r1	; 0x06
    c4c2:	2b 81       	ldd	r18, Y+3	; 0x03
    c4c4:	3c 81       	ldd	r19, Y+4	; 0x04
    c4c6:	4d 81       	ldd	r20, Y+5	; 0x05
    c4c8:	5e 81       	ldd	r21, Y+6	; 0x06
    c4ca:	2f 5f       	subi	r18, 0xFF	; 255
    c4cc:	3f 4f       	sbci	r19, 0xFF	; 255
    c4ce:	4f 4f       	sbci	r20, 0xFF	; 255
    c4d0:	5f 4f       	sbci	r21, 0xFF	; 255
    c4d2:	2b 83       	std	Y+3, r18	; 0x03
    c4d4:	3c 83       	std	Y+4, r19	; 0x04
    c4d6:	4d 83       	std	Y+5, r20	; 0x05
    c4d8:	5e 83       	std	Y+6, r21	; 0x06
    c4da:	b3 01       	movw	r22, r6
    c4dc:	a2 01       	movw	r20, r4
    c4de:	d1 01       	movw	r26, r2
    c4e0:	8d 91       	ld	r24, X+
    c4e2:	9c 91       	ld	r25, X
    c4e4:	0e 94 c4 50 	call	0xa188	; 0xa188 <get_fat.isra.10>
    c4e8:	62 30       	cpi	r22, 0x02	; 2
    c4ea:	71 05       	cpc	r23, r1
    c4ec:	81 05       	cpc	r24, r1
    c4ee:	91 05       	cpc	r25, r1
    c4f0:	20 f4       	brcc	.+8      	; 0xc4fa <f_lseek+0xcc>
    c4f2:	82 e0       	ldi	r24, 0x02	; 2
    c4f4:	f1 01       	movw	r30, r2
    c4f6:	87 87       	std	Z+15, r24	; 0x0f
    c4f8:	0a c0       	rjmp	.+20     	; 0xc50e <f_lseek+0xe0>
    c4fa:	6f 3f       	cpi	r22, 0xFF	; 255
    c4fc:	ff ef       	ldi	r31, 0xFF	; 255
    c4fe:	7f 07       	cpc	r23, r31
    c500:	8f 07       	cpc	r24, r31
    c502:	9f 07       	cpc	r25, r31
    c504:	31 f4       	brne	.+12     	; 0xc512 <f_lseek+0xe4>
    c506:	81 e0       	ldi	r24, 0x01	; 1
    c508:	d1 01       	movw	r26, r2
    c50a:	1f 96       	adiw	r26, 0x0f	; 15
    c50c:	8c 93       	st	X, r24
    c50e:	90 e0       	ldi	r25, 0x00	; 0
    c510:	65 c2       	rjmp	.+1226   	; 0xc9dc <f_lseek+0x5ae>
    c512:	a3 01       	movw	r20, r6
    c514:	92 01       	movw	r18, r4
    c516:	2f 5f       	subi	r18, 0xFF	; 255
    c518:	3f 4f       	sbci	r19, 0xFF	; 255
    c51a:	4f 4f       	sbci	r20, 0xFF	; 255
    c51c:	5f 4f       	sbci	r21, 0xFF	; 255
    c51e:	2b 01       	movw	r4, r22
    c520:	3c 01       	movw	r6, r24
    c522:	62 17       	cp	r22, r18
    c524:	73 07       	cpc	r23, r19
    c526:	84 07       	cpc	r24, r20
    c528:	95 07       	cpc	r25, r21
    c52a:	59 f2       	breq	.-106    	; 0xc4c2 <f_lseek+0x94>
    c52c:	b2 e0       	ldi	r27, 0x02	; 2
    c52e:	cb 0e       	add	r12, r27
    c530:	d1 1c       	adc	r13, r1
    c532:	e1 1c       	adc	r14, r1
    c534:	f1 1c       	adc	r15, r1
    c536:	2f 81       	ldd	r18, Y+7	; 0x07
    c538:	38 85       	ldd	r19, Y+8	; 0x08
    c53a:	49 85       	ldd	r20, Y+9	; 0x09
    c53c:	5a 85       	ldd	r21, Y+10	; 0x0a
    c53e:	2c 15       	cp	r18, r12
    c540:	3d 05       	cpc	r19, r13
    c542:	4e 05       	cpc	r20, r14
    c544:	5f 05       	cpc	r21, r15
    c546:	88 f0       	brcs	.+34     	; 0xc56a <f_lseek+0x13c>
    c548:	2b 81       	ldd	r18, Y+3	; 0x03
    c54a:	3c 81       	ldd	r19, Y+4	; 0x04
    c54c:	4d 81       	ldd	r20, Y+5	; 0x05
    c54e:	5e 81       	ldd	r21, Y+6	; 0x06
    c550:	d8 01       	movw	r26, r16
    c552:	2d 93       	st	X+, r18
    c554:	3d 93       	st	X+, r19
    c556:	4d 93       	st	X+, r20
    c558:	5c 93       	st	X, r21
    c55a:	13 97       	sbiw	r26, 0x03	; 3
    c55c:	f8 01       	movw	r30, r16
    c55e:	84 82       	std	Z+4, r8	; 0x04
    c560:	95 82       	std	Z+5, r9	; 0x05
    c562:	a6 82       	std	Z+6, r10	; 0x06
    c564:	b7 82       	std	Z+7, r11	; 0x07
    c566:	08 5f       	subi	r16, 0xF8	; 248
    c568:	1f 4f       	sbci	r17, 0xFF	; 255
    c56a:	e9 81       	ldd	r30, Y+1	; 0x01
    c56c:	fa 81       	ldd	r31, Y+2	; 0x02
    c56e:	81 8c       	ldd	r8, Z+25	; 0x19
    c570:	92 8c       	ldd	r9, Z+26	; 0x1a
    c572:	a3 8c       	ldd	r10, Z+27	; 0x1b
    c574:	b4 8c       	ldd	r11, Z+28	; 0x1c
    c576:	68 15       	cp	r22, r8
    c578:	79 05       	cpc	r23, r9
    c57a:	8a 05       	cpc	r24, r10
    c57c:	9b 05       	cpc	r25, r11
    c57e:	18 f4       	brcc	.+6      	; 0xc586 <f_lseek+0x158>
    c580:	4b 01       	movw	r8, r22
    c582:	5c 01       	movw	r10, r24
    c584:	98 cf       	rjmp	.-208    	; 0xc4b6 <f_lseek+0x88>
    c586:	d1 01       	movw	r26, r2
    c588:	92 96       	adiw	r26, 0x22	; 34
    c58a:	ed 91       	ld	r30, X+
    c58c:	fc 91       	ld	r31, X
    c58e:	93 97       	sbiw	r26, 0x23	; 35
    c590:	c0 82       	st	Z, r12
    c592:	d1 82       	std	Z+1, r13	; 0x01
    c594:	e2 82       	std	Z+2, r14	; 0x02
    c596:	f3 82       	std	Z+3, r15	; 0x03
    c598:	2f 81       	ldd	r18, Y+7	; 0x07
    c59a:	38 85       	ldd	r19, Y+8	; 0x08
    c59c:	49 85       	ldd	r20, Y+9	; 0x09
    c59e:	5a 85       	ldd	r21, Y+10	; 0x0a
    c5a0:	2c 15       	cp	r18, r12
    c5a2:	3d 05       	cpc	r19, r13
    c5a4:	4e 05       	cpc	r20, r14
    c5a6:	5f 05       	cpc	r21, r15
    c5a8:	08 f4       	brcc	.+2      	; 0xc5ac <f_lseek+0x17e>
    c5aa:	0f c2       	rjmp	.+1054   	; 0xc9ca <f_lseek+0x59c>
    c5ac:	d8 01       	movw	r26, r16
    c5ae:	1d 92       	st	X+, r1
    c5b0:	1d 92       	st	X+, r1
    c5b2:	1d 92       	st	X+, r1
    c5b4:	1c 92       	st	X, r1
    c5b6:	13 97       	sbiw	r26, 0x03	; 3
    c5b8:	06 c2       	rjmp	.+1036   	; 0xc9c6 <f_lseek+0x598>
    c5ba:	f1 01       	movw	r30, r2
    c5bc:	82 85       	ldd	r24, Z+10	; 0x0a
    c5be:	93 85       	ldd	r25, Z+11	; 0x0b
    c5c0:	a4 85       	ldd	r26, Z+12	; 0x0c
    c5c2:	b5 85       	ldd	r27, Z+13	; 0x0d
    c5c4:	46 01       	movw	r8, r12
    c5c6:	57 01       	movw	r10, r14
    c5c8:	8c 15       	cp	r24, r12
    c5ca:	9d 05       	cpc	r25, r13
    c5cc:	ae 05       	cpc	r26, r14
    c5ce:	bf 05       	cpc	r27, r15
    c5d0:	10 f4       	brcc	.+4      	; 0xc5d6 <f_lseek+0x1a8>
    c5d2:	4c 01       	movw	r8, r24
    c5d4:	5d 01       	movw	r10, r26
    c5d6:	d1 01       	movw	r26, r2
    c5d8:	50 96       	adiw	r26, 0x10	; 16
    c5da:	8d 92       	st	X+, r8
    c5dc:	9d 92       	st	X+, r9
    c5de:	ad 92       	st	X+, r10
    c5e0:	bc 92       	st	X, r11
    c5e2:	53 97       	sbiw	r26, 0x13	; 19
    c5e4:	81 14       	cp	r8, r1
    c5e6:	91 04       	cpc	r9, r1
    c5e8:	a1 04       	cpc	r10, r1
    c5ea:	b1 04       	cpc	r11, r1
    c5ec:	09 f4       	brne	.+2      	; 0xc5f0 <f_lseek+0x1c2>
    c5ee:	eb c1       	rjmp	.+982    	; 0xc9c6 <f_lseek+0x598>
    c5f0:	24 01       	movw	r4, r8
    c5f2:	35 01       	movw	r6, r10
    c5f4:	b1 e0       	ldi	r27, 0x01	; 1
    c5f6:	4b 1a       	sub	r4, r27
    c5f8:	51 08       	sbc	r5, r1
    c5fa:	61 08       	sbc	r6, r1
    c5fc:	71 08       	sbc	r7, r1
    c5fe:	b3 01       	movw	r22, r6
    c600:	a2 01       	movw	r20, r4
    c602:	c1 01       	movw	r24, r2
    c604:	0e 94 e5 48 	call	0x91ca	; 0x91ca <clmt_clust>
    c608:	ab 01       	movw	r20, r22
    c60a:	bc 01       	movw	r22, r24
    c60c:	f1 01       	movw	r30, r2
    c60e:	44 8b       	std	Z+20, r20	; 0x14
    c610:	55 8b       	std	Z+21, r21	; 0x15
    c612:	66 8b       	std	Z+22, r22	; 0x16
    c614:	77 8b       	std	Z+23, r23	; 0x17
    c616:	e9 80       	ldd	r14, Y+1	; 0x01
    c618:	fa 80       	ldd	r15, Y+2	; 0x02
    c61a:	c7 01       	movw	r24, r14
    c61c:	0e 94 bd 48 	call	0x917a	; 0x917a <clst2sect>
    c620:	61 15       	cp	r22, r1
    c622:	71 05       	cpc	r23, r1
    c624:	81 05       	cpc	r24, r1
    c626:	91 05       	cpc	r25, r1
    c628:	09 f4       	brne	.+2      	; 0xc62c <f_lseek+0x1fe>
    c62a:	63 cf       	rjmp	.-314    	; 0xc4f2 <f_lseek+0xc4>
    c62c:	95 01       	movw	r18, r10
    c62e:	84 01       	movw	r16, r8
    c630:	11 70       	andi	r17, 0x01	; 1
    c632:	22 27       	eor	r18, r18
    c634:	33 27       	eor	r19, r19
    c636:	01 15       	cp	r16, r1
    c638:	11 05       	cpc	r17, r1
    c63a:	21 05       	cpc	r18, r1
    c63c:	31 05       	cpc	r19, r1
    c63e:	09 f4       	brne	.+2      	; 0xc642 <f_lseek+0x214>
    c640:	c2 c1       	rjmp	.+900    	; 0xc9c6 <f_lseek+0x598>
    c642:	d7 01       	movw	r26, r14
    c644:	19 96       	adiw	r26, 0x09	; 9
    c646:	8d 90       	ld	r8, X+
    c648:	9c 90       	ld	r9, X
    c64a:	1a 97       	sbiw	r26, 0x0a	; 10
    c64c:	b1 e0       	ldi	r27, 0x01	; 1
    c64e:	8b 1a       	sub	r8, r27
    c650:	91 08       	sbc	r9, r1
    c652:	a1 2c       	mov	r10, r1
    c654:	b1 2c       	mov	r11, r1
    c656:	49 e0       	ldi	r20, 0x09	; 9
    c658:	76 94       	lsr	r7
    c65a:	67 94       	ror	r6
    c65c:	57 94       	ror	r5
    c65e:	47 94       	ror	r4
    c660:	4a 95       	dec	r20
    c662:	d1 f7       	brne	.-12     	; 0xc658 <f_lseek+0x22a>
    c664:	48 20       	and	r4, r8
    c666:	59 20       	and	r5, r9
    c668:	6a 20       	and	r6, r10
    c66a:	7b 20       	and	r7, r11
    c66c:	53 01       	movw	r10, r6
    c66e:	42 01       	movw	r8, r4
    c670:	86 0e       	add	r8, r22
    c672:	97 1e       	adc	r9, r23
    c674:	a8 1e       	adc	r10, r24
    c676:	b9 1e       	adc	r11, r25
    c678:	f1 01       	movw	r30, r2
    c67a:	20 8d       	ldd	r18, Z+24	; 0x18
    c67c:	31 8d       	ldd	r19, Z+25	; 0x19
    c67e:	42 8d       	ldd	r20, Z+26	; 0x1a
    c680:	53 8d       	ldd	r21, Z+27	; 0x1b
    c682:	82 16       	cp	r8, r18
    c684:	93 06       	cpc	r9, r19
    c686:	a4 06       	cpc	r10, r20
    c688:	b5 06       	cpc	r11, r21
    c68a:	09 f4       	brne	.+2      	; 0xc68e <f_lseek+0x260>
    c68c:	9c c1       	rjmp	.+824    	; 0xc9c6 <f_lseek+0x598>
    c68e:	86 85       	ldd	r24, Z+14	; 0x0e
    c690:	b1 01       	movw	r22, r2
    c692:	6c 5d       	subi	r22, 0xDC	; 220
    c694:	7f 4f       	sbci	r23, 0xFF	; 255
    c696:	6b 01       	movw	r12, r22
    c698:	87 ff       	sbrs	r24, 7
    c69a:	0e c0       	rjmp	.+28     	; 0xc6b8 <f_lseek+0x28a>
    c69c:	01 e0       	ldi	r16, 0x01	; 1
    c69e:	10 e0       	ldi	r17, 0x00	; 0
    c6a0:	d7 01       	movw	r26, r14
    c6a2:	11 96       	adiw	r26, 0x01	; 1
    c6a4:	8c 91       	ld	r24, X
    c6a6:	0e 94 93 6b 	call	0xd726	; 0xd726 <disk_write>
    c6aa:	89 2b       	or	r24, r25
    c6ac:	09 f0       	breq	.+2      	; 0xc6b0 <f_lseek+0x282>
    c6ae:	2b cf       	rjmp	.-426    	; 0xc506 <f_lseek+0xd8>
    c6b0:	f1 01       	movw	r30, r2
    c6b2:	86 85       	ldd	r24, Z+14	; 0x0e
    c6b4:	8f 77       	andi	r24, 0x7F	; 127
    c6b6:	86 87       	std	Z+14, r24	; 0x0e
    c6b8:	e9 81       	ldd	r30, Y+1	; 0x01
    c6ba:	fa 81       	ldd	r31, Y+2	; 0x02
    c6bc:	01 e0       	ldi	r16, 0x01	; 1
    c6be:	10 e0       	ldi	r17, 0x00	; 0
    c6c0:	a5 01       	movw	r20, r10
    c6c2:	94 01       	movw	r18, r8
    c6c4:	b6 01       	movw	r22, r12
    c6c6:	81 81       	ldd	r24, Z+1	; 0x01
    c6c8:	0e 94 83 6b 	call	0xd706	; 0xd706 <disk_read>
    c6cc:	89 2b       	or	r24, r25
    c6ce:	09 f0       	breq	.+2      	; 0xc6d2 <f_lseek+0x2a4>
    c6d0:	1a cf       	rjmp	.-460    	; 0xc506 <f_lseek+0xd8>
    c6d2:	d1 01       	movw	r26, r2
    c6d4:	58 96       	adiw	r26, 0x18	; 24
    c6d6:	8d 92       	st	X+, r8
    c6d8:	9d 92       	st	X+, r9
    c6da:	ad 92       	st	X+, r10
    c6dc:	bc 92       	st	X, r11
    c6de:	5b 97       	sbiw	r26, 0x1b	; 27
    c6e0:	72 c1       	rjmp	.+740    	; 0xc9c6 <f_lseek+0x598>
    c6e2:	f1 01       	movw	r30, r2
    c6e4:	82 85       	ldd	r24, Z+10	; 0x0a
    c6e6:	93 85       	ldd	r25, Z+11	; 0x0b
    c6e8:	a4 85       	ldd	r26, Z+12	; 0x0c
    c6ea:	b5 85       	ldd	r27, Z+13	; 0x0d
    c6ec:	8c 15       	cp	r24, r12
    c6ee:	9d 05       	cpc	r25, r13
    c6f0:	ae 05       	cpc	r26, r14
    c6f2:	bf 05       	cpc	r27, r15
    c6f4:	28 f4       	brcc	.+10     	; 0xc700 <f_lseek+0x2d2>
    c6f6:	26 85       	ldd	r18, Z+14	; 0x0e
    c6f8:	21 fd       	sbrc	r18, 1
    c6fa:	02 c0       	rjmp	.+4      	; 0xc700 <f_lseek+0x2d2>
    c6fc:	6c 01       	movw	r12, r24
    c6fe:	7d 01       	movw	r14, r26
    c700:	d1 01       	movw	r26, r2
    c702:	50 96       	adiw	r26, 0x10	; 16
    c704:	4d 90       	ld	r4, X+
    c706:	5d 90       	ld	r5, X+
    c708:	6d 90       	ld	r6, X+
    c70a:	7c 90       	ld	r7, X
    c70c:	53 97       	sbiw	r26, 0x13	; 19
    c70e:	f1 01       	movw	r30, r2
    c710:	10 8a       	std	Z+16, r1	; 0x10
    c712:	11 8a       	std	Z+17, r1	; 0x11
    c714:	12 8a       	std	Z+18, r1	; 0x12
    c716:	13 8a       	std	Z+19, r1	; 0x13
    c718:	c1 14       	cp	r12, r1
    c71a:	d1 04       	cpc	r13, r1
    c71c:	e1 04       	cpc	r14, r1
    c71e:	f1 04       	cpc	r15, r1
    c720:	09 f4       	brne	.+2      	; 0xc724 <f_lseek+0x2f6>
    c722:	55 c1       	rjmp	.+682    	; 0xc9ce <f_lseek+0x5a0>
    c724:	e9 81       	ldd	r30, Y+1	; 0x01
    c726:	fa 81       	ldd	r31, Y+2	; 0x02
    c728:	81 84       	ldd	r8, Z+9	; 0x09
    c72a:	92 84       	ldd	r9, Z+10	; 0x0a
    c72c:	a1 2c       	mov	r10, r1
    c72e:	b1 2c       	mov	r11, r1
    c730:	39 e0       	ldi	r19, 0x09	; 9
    c732:	88 0c       	add	r8, r8
    c734:	99 1c       	adc	r9, r9
    c736:	aa 1c       	adc	r10, r10
    c738:	bb 1c       	adc	r11, r11
    c73a:	3a 95       	dec	r19
    c73c:	d1 f7       	brne	.-12     	; 0xc732 <f_lseek+0x304>
    c73e:	41 14       	cp	r4, r1
    c740:	51 04       	cpc	r5, r1
    c742:	61 04       	cpc	r6, r1
    c744:	71 04       	cpc	r7, r1
    c746:	09 f4       	brne	.+2      	; 0xc74a <f_lseek+0x31c>
    c748:	3f c0       	rjmp	.+126    	; 0xc7c8 <f_lseek+0x39a>
    c74a:	f1 e0       	ldi	r31, 0x01	; 1
    c74c:	4f 1a       	sub	r4, r31
    c74e:	51 08       	sbc	r5, r1
    c750:	61 08       	sbc	r6, r1
    c752:	71 08       	sbc	r7, r1
    c754:	c7 01       	movw	r24, r14
    c756:	b6 01       	movw	r22, r12
    c758:	61 50       	subi	r22, 0x01	; 1
    c75a:	71 09       	sbc	r23, r1
    c75c:	81 09       	sbc	r24, r1
    c75e:	91 09       	sbc	r25, r1
    c760:	a5 01       	movw	r20, r10
    c762:	94 01       	movw	r18, r8
    c764:	0e 94 71 e5 	call	0x1cae2	; 0x1cae2 <__udivmodsi4>
    c768:	2b 83       	std	Y+3, r18	; 0x03
    c76a:	3c 83       	std	Y+4, r19	; 0x04
    c76c:	4d 83       	std	Y+5, r20	; 0x05
    c76e:	5e 83       	std	Y+6, r21	; 0x06
    c770:	c3 01       	movw	r24, r6
    c772:	b2 01       	movw	r22, r4
    c774:	a5 01       	movw	r20, r10
    c776:	94 01       	movw	r18, r8
    c778:	0e 94 71 e5 	call	0x1cae2	; 0x1cae2 <__udivmodsi4>
    c77c:	6b 81       	ldd	r22, Y+3	; 0x03
    c77e:	7c 81       	ldd	r23, Y+4	; 0x04
    c780:	8d 81       	ldd	r24, Y+5	; 0x05
    c782:	9e 81       	ldd	r25, Y+6	; 0x06
    c784:	62 17       	cp	r22, r18
    c786:	73 07       	cpc	r23, r19
    c788:	84 07       	cpc	r24, r20
    c78a:	95 07       	cpc	r25, r21
    c78c:	e8 f0       	brcs	.+58     	; 0xc7c8 <f_lseek+0x39a>
    c78e:	88 27       	eor	r24, r24
    c790:	99 27       	eor	r25, r25
    c792:	dc 01       	movw	r26, r24
    c794:	88 19       	sub	r24, r8
    c796:	99 09       	sbc	r25, r9
    c798:	aa 09       	sbc	r26, r10
    c79a:	bb 09       	sbc	r27, r11
    c79c:	48 22       	and	r4, r24
    c79e:	59 22       	and	r5, r25
    c7a0:	6a 22       	and	r6, r26
    c7a2:	7b 22       	and	r7, r27
    c7a4:	d1 01       	movw	r26, r2
    c7a6:	50 96       	adiw	r26, 0x10	; 16
    c7a8:	4d 92       	st	X+, r4
    c7aa:	5d 92       	st	X+, r5
    c7ac:	6d 92       	st	X+, r6
    c7ae:	7c 92       	st	X, r7
    c7b0:	53 97       	sbiw	r26, 0x13	; 19
    c7b2:	c4 18       	sub	r12, r4
    c7b4:	d5 08       	sbc	r13, r5
    c7b6:	e6 08       	sbc	r14, r6
    c7b8:	f7 08       	sbc	r15, r7
    c7ba:	54 96       	adiw	r26, 0x14	; 20
    c7bc:	4d 91       	ld	r20, X+
    c7be:	5d 91       	ld	r21, X+
    c7c0:	6d 91       	ld	r22, X+
    c7c2:	7c 91       	ld	r23, X
    c7c4:	57 97       	sbiw	r26, 0x17	; 23
    c7c6:	2b c0       	rjmp	.+86     	; 0xc81e <f_lseek+0x3f0>
    c7c8:	f1 01       	movw	r30, r2
    c7ca:	46 81       	ldd	r20, Z+6	; 0x06
    c7cc:	57 81       	ldd	r21, Z+7	; 0x07
    c7ce:	60 85       	ldd	r22, Z+8	; 0x08
    c7d0:	71 85       	ldd	r23, Z+9	; 0x09
    c7d2:	41 15       	cp	r20, r1
    c7d4:	51 05       	cpc	r21, r1
    c7d6:	61 05       	cpc	r22, r1
    c7d8:	71 05       	cpc	r23, r1
    c7da:	e1 f4       	brne	.+56     	; 0xc814 <f_lseek+0x3e6>
    c7dc:	40 e0       	ldi	r20, 0x00	; 0
    c7de:	50 e0       	ldi	r21, 0x00	; 0
    c7e0:	ba 01       	movw	r22, r20
    c7e2:	c1 01       	movw	r24, r2
    c7e4:	0e 94 39 52 	call	0xa472	; 0xa472 <create_chain>
    c7e8:	ab 01       	movw	r20, r22
    c7ea:	bc 01       	movw	r22, r24
    c7ec:	41 30       	cpi	r20, 0x01	; 1
    c7ee:	51 05       	cpc	r21, r1
    c7f0:	61 05       	cpc	r22, r1
    c7f2:	71 05       	cpc	r23, r1
    c7f4:	09 f4       	brne	.+2      	; 0xc7f8 <f_lseek+0x3ca>
    c7f6:	7d ce       	rjmp	.-774    	; 0xc4f2 <f_lseek+0xc4>
    c7f8:	4f 3f       	cpi	r20, 0xFF	; 255
    c7fa:	ff ef       	ldi	r31, 0xFF	; 255
    c7fc:	5f 07       	cpc	r21, r31
    c7fe:	6f 07       	cpc	r22, r31
    c800:	7f 07       	cpc	r23, r31
    c802:	09 f4       	brne	.+2      	; 0xc806 <f_lseek+0x3d8>
    c804:	80 ce       	rjmp	.-768    	; 0xc506 <f_lseek+0xd8>
    c806:	d1 01       	movw	r26, r2
    c808:	16 96       	adiw	r26, 0x06	; 6
    c80a:	4d 93       	st	X+, r20
    c80c:	5d 93       	st	X+, r21
    c80e:	6d 93       	st	X+, r22
    c810:	7c 93       	st	X, r23
    c812:	19 97       	sbiw	r26, 0x09	; 9
    c814:	f1 01       	movw	r30, r2
    c816:	44 8b       	std	Z+20, r20	; 0x14
    c818:	55 8b       	std	Z+21, r21	; 0x15
    c81a:	66 8b       	std	Z+22, r22	; 0x16
    c81c:	77 8b       	std	Z+23, r23	; 0x17
    c81e:	41 15       	cp	r20, r1
    c820:	51 05       	cpc	r21, r1
    c822:	61 05       	cpc	r22, r1
    c824:	71 05       	cpc	r23, r1
    c826:	09 f0       	breq	.+2      	; 0xc82a <f_lseek+0x3fc>
    c828:	40 c0       	rjmp	.+128    	; 0xc8aa <f_lseek+0x47c>
    c82a:	c1 2c       	mov	r12, r1
    c82c:	d1 2c       	mov	r13, r1
    c82e:	76 01       	movw	r14, r12
    c830:	79 c0       	rjmp	.+242    	; 0xc924 <f_lseek+0x4f6>
    c832:	c8 18       	sub	r12, r8
    c834:	d9 08       	sbc	r13, r9
    c836:	ea 08       	sbc	r14, r10
    c838:	fb 08       	sbc	r15, r11
    c83a:	f1 01       	movw	r30, r2
    c83c:	80 89       	ldd	r24, Z+16	; 0x10
    c83e:	91 89       	ldd	r25, Z+17	; 0x11
    c840:	a2 89       	ldd	r26, Z+18	; 0x12
    c842:	b3 89       	ldd	r27, Z+19	; 0x13
    c844:	88 0d       	add	r24, r8
    c846:	99 1d       	adc	r25, r9
    c848:	aa 1d       	adc	r26, r10
    c84a:	bb 1d       	adc	r27, r11
    c84c:	80 8b       	std	Z+16, r24	; 0x10
    c84e:	91 8b       	std	Z+17, r25	; 0x11
    c850:	a2 8b       	std	Z+18, r26	; 0x12
    c852:	b3 8b       	std	Z+19, r27	; 0x13
    c854:	86 85       	ldd	r24, Z+14	; 0x0e
    c856:	81 ff       	sbrs	r24, 1
    c858:	2f c0       	rjmp	.+94     	; 0xc8b8 <f_lseek+0x48a>
    c85a:	c1 01       	movw	r24, r2
    c85c:	0e 94 39 52 	call	0xa472	; 0xa472 <create_chain>
    c860:	ab 01       	movw	r20, r22
    c862:	bc 01       	movw	r22, r24
    c864:	41 15       	cp	r20, r1
    c866:	51 05       	cpc	r21, r1
    c868:	61 05       	cpc	r22, r1
    c86a:	71 05       	cpc	r23, r1
    c86c:	61 f1       	breq	.+88     	; 0xc8c6 <f_lseek+0x498>
    c86e:	4f 3f       	cpi	r20, 0xFF	; 255
    c870:	bf ef       	ldi	r27, 0xFF	; 255
    c872:	5b 07       	cpc	r21, r27
    c874:	6b 07       	cpc	r22, r27
    c876:	7b 07       	cpc	r23, r27
    c878:	09 f4       	brne	.+2      	; 0xc87c <f_lseek+0x44e>
    c87a:	45 ce       	rjmp	.-886    	; 0xc506 <f_lseek+0xd8>
    c87c:	42 30       	cpi	r20, 0x02	; 2
    c87e:	51 05       	cpc	r21, r1
    c880:	61 05       	cpc	r22, r1
    c882:	71 05       	cpc	r23, r1
    c884:	08 f4       	brcc	.+2      	; 0xc888 <f_lseek+0x45a>
    c886:	35 ce       	rjmp	.-918    	; 0xc4f2 <f_lseek+0xc4>
    c888:	e9 81       	ldd	r30, Y+1	; 0x01
    c88a:	fa 81       	ldd	r31, Y+2	; 0x02
    c88c:	81 8d       	ldd	r24, Z+25	; 0x19
    c88e:	92 8d       	ldd	r25, Z+26	; 0x1a
    c890:	a3 8d       	ldd	r26, Z+27	; 0x1b
    c892:	b4 8d       	ldd	r27, Z+28	; 0x1c
    c894:	48 17       	cp	r20, r24
    c896:	59 07       	cpc	r21, r25
    c898:	6a 07       	cpc	r22, r26
    c89a:	7b 07       	cpc	r23, r27
    c89c:	08 f0       	brcs	.+2      	; 0xc8a0 <f_lseek+0x472>
    c89e:	29 ce       	rjmp	.-942    	; 0xc4f2 <f_lseek+0xc4>
    c8a0:	f1 01       	movw	r30, r2
    c8a2:	44 8b       	std	Z+20, r20	; 0x14
    c8a4:	55 8b       	std	Z+21, r21	; 0x15
    c8a6:	66 8b       	std	Z+22, r22	; 0x16
    c8a8:	77 8b       	std	Z+23, r23	; 0x17
    c8aa:	8c 14       	cp	r8, r12
    c8ac:	9d 04       	cpc	r9, r13
    c8ae:	ae 04       	cpc	r10, r14
    c8b0:	bf 04       	cpc	r11, r15
    c8b2:	08 f4       	brcc	.+2      	; 0xc8b6 <f_lseek+0x488>
    c8b4:	be cf       	rjmp	.-132    	; 0xc832 <f_lseek+0x404>
    c8b6:	0a c0       	rjmp	.+20     	; 0xc8cc <f_lseek+0x49e>
    c8b8:	80 81       	ld	r24, Z
    c8ba:	91 81       	ldd	r25, Z+1	; 0x01
    c8bc:	0e 94 c4 50 	call	0xa188	; 0xa188 <get_fat.isra.10>
    c8c0:	ab 01       	movw	r20, r22
    c8c2:	bc 01       	movw	r22, r24
    c8c4:	d4 cf       	rjmp	.-88     	; 0xc86e <f_lseek+0x440>
    c8c6:	c1 2c       	mov	r12, r1
    c8c8:	d1 2c       	mov	r13, r1
    c8ca:	76 01       	movw	r14, r12
    c8cc:	f1 01       	movw	r30, r2
    c8ce:	80 89       	ldd	r24, Z+16	; 0x10
    c8d0:	91 89       	ldd	r25, Z+17	; 0x11
    c8d2:	a2 89       	ldd	r26, Z+18	; 0x12
    c8d4:	b3 89       	ldd	r27, Z+19	; 0x13
    c8d6:	8c 0d       	add	r24, r12
    c8d8:	9d 1d       	adc	r25, r13
    c8da:	ae 1d       	adc	r26, r14
    c8dc:	bf 1d       	adc	r27, r15
    c8de:	80 8b       	std	Z+16, r24	; 0x10
    c8e0:	91 8b       	std	Z+17, r25	; 0x11
    c8e2:	a2 8b       	std	Z+18, r26	; 0x12
    c8e4:	b3 8b       	std	Z+19, r27	; 0x13
    c8e6:	d7 01       	movw	r26, r14
    c8e8:	c6 01       	movw	r24, r12
    c8ea:	91 70       	andi	r25, 0x01	; 1
    c8ec:	aa 27       	eor	r26, r26
    c8ee:	bb 27       	eor	r27, r27
    c8f0:	89 2b       	or	r24, r25
    c8f2:	8a 2b       	or	r24, r26
    c8f4:	8b 2b       	or	r24, r27
    c8f6:	09 f4       	brne	.+2      	; 0xc8fa <f_lseek+0x4cc>
    c8f8:	98 cf       	rjmp	.-208    	; 0xc82a <f_lseek+0x3fc>
    c8fa:	89 81       	ldd	r24, Y+1	; 0x01
    c8fc:	9a 81       	ldd	r25, Y+2	; 0x02
    c8fe:	0e 94 bd 48 	call	0x917a	; 0x917a <clst2sect>
    c902:	61 15       	cp	r22, r1
    c904:	71 05       	cpc	r23, r1
    c906:	81 05       	cpc	r24, r1
    c908:	91 05       	cpc	r25, r1
    c90a:	09 f4       	brne	.+2      	; 0xc90e <f_lseek+0x4e0>
    c90c:	f2 cd       	rjmp	.-1052   	; 0xc4f2 <f_lseek+0xc4>
    c90e:	29 e0       	ldi	r18, 0x09	; 9
    c910:	f6 94       	lsr	r15
    c912:	e7 94       	ror	r14
    c914:	d7 94       	ror	r13
    c916:	c7 94       	ror	r12
    c918:	2a 95       	dec	r18
    c91a:	d1 f7       	brne	.-12     	; 0xc910 <f_lseek+0x4e2>
    c91c:	c6 0e       	add	r12, r22
    c91e:	d7 1e       	adc	r13, r23
    c920:	e8 1e       	adc	r14, r24
    c922:	f9 1e       	adc	r15, r25
    c924:	f1 01       	movw	r30, r2
    c926:	80 89       	ldd	r24, Z+16	; 0x10
    c928:	91 89       	ldd	r25, Z+17	; 0x11
    c92a:	a2 89       	ldd	r26, Z+18	; 0x12
    c92c:	b3 89       	ldd	r27, Z+19	; 0x13
    c92e:	42 85       	ldd	r20, Z+10	; 0x0a
    c930:	53 85       	ldd	r21, Z+11	; 0x0b
    c932:	64 85       	ldd	r22, Z+12	; 0x0c
    c934:	75 85       	ldd	r23, Z+13	; 0x0d
    c936:	48 17       	cp	r20, r24
    c938:	59 07       	cpc	r21, r25
    c93a:	6a 07       	cpc	r22, r26
    c93c:	7b 07       	cpc	r23, r27
    c93e:	38 f4       	brcc	.+14     	; 0xc94e <f_lseek+0x520>
    c940:	82 87       	std	Z+10, r24	; 0x0a
    c942:	93 87       	std	Z+11, r25	; 0x0b
    c944:	a4 87       	std	Z+12, r26	; 0x0c
    c946:	b5 87       	std	Z+13, r27	; 0x0d
    c948:	26 85       	ldd	r18, Z+14	; 0x0e
    c94a:	20 64       	ori	r18, 0x40	; 64
    c94c:	26 87       	std	Z+14, r18	; 0x0e
    c94e:	91 70       	andi	r25, 0x01	; 1
    c950:	aa 27       	eor	r26, r26
    c952:	bb 27       	eor	r27, r27
    c954:	89 2b       	or	r24, r25
    c956:	8a 2b       	or	r24, r26
    c958:	8b 2b       	or	r24, r27
    c95a:	a9 f1       	breq	.+106    	; 0xc9c6 <f_lseek+0x598>
    c95c:	d1 01       	movw	r26, r2
    c95e:	58 96       	adiw	r26, 0x18	; 24
    c960:	2d 91       	ld	r18, X+
    c962:	3d 91       	ld	r19, X+
    c964:	4d 91       	ld	r20, X+
    c966:	5c 91       	ld	r21, X
    c968:	5b 97       	sbiw	r26, 0x1b	; 27
    c96a:	2c 15       	cp	r18, r12
    c96c:	3d 05       	cpc	r19, r13
    c96e:	4e 05       	cpc	r20, r14
    c970:	5f 05       	cpc	r21, r15
    c972:	49 f1       	breq	.+82     	; 0xc9c6 <f_lseek+0x598>
    c974:	1e 96       	adiw	r26, 0x0e	; 14
    c976:	8c 91       	ld	r24, X
    c978:	f1 01       	movw	r30, r2
    c97a:	b4 96       	adiw	r30, 0x24	; 36
    c97c:	5f 01       	movw	r10, r30
    c97e:	87 ff       	sbrs	r24, 7
    c980:	11 c0       	rjmp	.+34     	; 0xc9a4 <f_lseek+0x576>
    c982:	e9 81       	ldd	r30, Y+1	; 0x01
    c984:	fa 81       	ldd	r31, Y+2	; 0x02
    c986:	01 e0       	ldi	r16, 0x01	; 1
    c988:	10 e0       	ldi	r17, 0x00	; 0
    c98a:	b5 01       	movw	r22, r10
    c98c:	81 81       	ldd	r24, Z+1	; 0x01
    c98e:	cb d6       	rcall	.+3478   	; 0xd726 <disk_write>
    c990:	89 2b       	or	r24, r25
    c992:	09 f0       	breq	.+2      	; 0xc996 <f_lseek+0x568>
    c994:	b8 cd       	rjmp	.-1168   	; 0xc506 <f_lseek+0xd8>
    c996:	d1 01       	movw	r26, r2
    c998:	1e 96       	adiw	r26, 0x0e	; 14
    c99a:	8c 91       	ld	r24, X
    c99c:	1e 97       	sbiw	r26, 0x0e	; 14
    c99e:	8f 77       	andi	r24, 0x7F	; 127
    c9a0:	1e 96       	adiw	r26, 0x0e	; 14
    c9a2:	8c 93       	st	X, r24
    c9a4:	e9 81       	ldd	r30, Y+1	; 0x01
    c9a6:	fa 81       	ldd	r31, Y+2	; 0x02
    c9a8:	01 e0       	ldi	r16, 0x01	; 1
    c9aa:	10 e0       	ldi	r17, 0x00	; 0
    c9ac:	a7 01       	movw	r20, r14
    c9ae:	96 01       	movw	r18, r12
    c9b0:	b5 01       	movw	r22, r10
    c9b2:	81 81       	ldd	r24, Z+1	; 0x01
    c9b4:	a8 d6       	rcall	.+3408   	; 0xd706 <disk_read>
    c9b6:	89 2b       	or	r24, r25
    c9b8:	09 f0       	breq	.+2      	; 0xc9bc <f_lseek+0x58e>
    c9ba:	a5 cd       	rjmp	.-1206   	; 0xc506 <f_lseek+0xd8>
    c9bc:	f1 01       	movw	r30, r2
    c9be:	c0 8e       	std	Z+24, r12	; 0x18
    c9c0:	d1 8e       	std	Z+25, r13	; 0x19
    c9c2:	e2 8e       	std	Z+26, r14	; 0x1a
    c9c4:	f3 8e       	std	Z+27, r15	; 0x1b
    c9c6:	80 e0       	ldi	r24, 0x00	; 0
    c9c8:	a2 cd       	rjmp	.-1212   	; 0xc50e <f_lseek+0xe0>
    c9ca:	81 e1       	ldi	r24, 0x11	; 17
    c9cc:	a0 cd       	rjmp	.-1216   	; 0xc50e <f_lseek+0xe0>
    c9ce:	80 e0       	ldi	r24, 0x00	; 0
    c9d0:	90 e0       	ldi	r25, 0x00	; 0
    c9d2:	dc 01       	movw	r26, r24
    c9d4:	c1 2c       	mov	r12, r1
    c9d6:	d1 2c       	mov	r13, r1
    c9d8:	76 01       	movw	r14, r12
    c9da:	b9 cf       	rjmp	.-142    	; 0xc94e <f_lseek+0x520>
    c9dc:	2a 96       	adiw	r28, 0x0a	; 10
    c9de:	e2 e1       	ldi	r30, 0x12	; 18
    c9e0:	0c 94 0f e6 	jmp	0x1cc1e	; 0x1cc1e <__epilogue_restores__>

0000c9e4 <f_opendir>:
    c9e4:	a4 e0       	ldi	r26, 0x04	; 4
    c9e6:	b0 e0       	ldi	r27, 0x00	; 0
    c9e8:	e8 ef       	ldi	r30, 0xF8	; 248
    c9ea:	f4 e6       	ldi	r31, 0x64	; 100
    c9ec:	0c 94 fd e5 	jmp	0x1cbfa	; 0x1cbfa <__prologue_saves__+0x14>
    c9f0:	7c 83       	std	Y+4, r23	; 0x04
    c9f2:	6b 83       	std	Y+3, r22	; 0x03
    c9f4:	00 97       	sbiw	r24, 0x00	; 0
    c9f6:	09 f4       	brne	.+2      	; 0xc9fa <f_opendir+0x16>
    c9f8:	48 c0       	rjmp	.+144    	; 0xca8a <f_opendir+0xa6>
    c9fa:	8c 01       	movw	r16, r24
    c9fc:	40 e0       	ldi	r20, 0x00	; 0
    c9fe:	be 01       	movw	r22, r28
    ca00:	6f 5f       	subi	r22, 0xFF	; 255
    ca02:	7f 4f       	sbci	r23, 0xFF	; 255
    ca04:	ce 01       	movw	r24, r28
    ca06:	03 96       	adiw	r24, 0x03	; 3
    ca08:	0e 94 63 4d 	call	0x9ac6	; 0x9ac6 <mount_volume>
    ca0c:	7c 01       	movw	r14, r24
    ca0e:	89 2b       	or	r24, r25
    ca10:	b9 f5       	brne	.+110    	; 0xca80 <f_opendir+0x9c>
    ca12:	89 81       	ldd	r24, Y+1	; 0x01
    ca14:	9a 81       	ldd	r25, Y+2	; 0x02
    ca16:	f8 01       	movw	r30, r16
    ca18:	91 83       	std	Z+1, r25	; 0x01
    ca1a:	80 83       	st	Z, r24
    ca1c:	80 e0       	ldi	r24, 0x00	; 0
    ca1e:	92 e0       	ldi	r25, 0x02	; 2
    ca20:	b6 d5       	rcall	.+2924   	; 0xd58e <ff_memalloc>
    ca22:	6c 01       	movw	r12, r24
    ca24:	00 97       	sbiw	r24, 0x00	; 0
    ca26:	99 f1       	breq	.+102    	; 0xca8e <f_opendir+0xaa>
    ca28:	e9 81       	ldd	r30, Y+1	; 0x01
    ca2a:	fa 81       	ldd	r31, Y+2	; 0x02
    ca2c:	94 87       	std	Z+12, r25	; 0x0c
    ca2e:	83 87       	std	Z+11, r24	; 0x0b
    ca30:	6b 81       	ldd	r22, Y+3	; 0x03
    ca32:	7c 81       	ldd	r23, Y+4	; 0x04
    ca34:	c8 01       	movw	r24, r16
    ca36:	0e 94 de 58 	call	0xb1bc	; 0xb1bc <follow_path>
    ca3a:	7c 01       	movw	r14, r24
    ca3c:	89 2b       	or	r24, r25
    ca3e:	b9 f4       	brne	.+46     	; 0xca6e <f_opendir+0x8a>
    ca40:	f8 01       	movw	r30, r16
    ca42:	87 a1       	ldd	r24, Z+39	; 0x27
    ca44:	87 fd       	sbrc	r24, 7
    ca46:	28 c0       	rjmp	.+80     	; 0xca98 <f_opendir+0xb4>
    ca48:	84 81       	ldd	r24, Z+4	; 0x04
    ca4a:	84 ff       	sbrs	r24, 4
    ca4c:	0d c0       	rjmp	.+26     	; 0xca68 <f_opendir+0x84>
    ca4e:	62 8d       	ldd	r22, Z+26	; 0x1a
    ca50:	73 8d       	ldd	r23, Z+27	; 0x1b
    ca52:	e9 81       	ldd	r30, Y+1	; 0x01
    ca54:	fa 81       	ldd	r31, Y+2	; 0x02
    ca56:	80 81       	ld	r24, Z
    ca58:	0e 94 59 4b 	call	0x96b2	; 0x96b2 <ld_clust.isra.4>
    ca5c:	f8 01       	movw	r30, r16
    ca5e:	66 83       	std	Z+6, r22	; 0x06
    ca60:	77 83       	std	Z+7, r23	; 0x07
    ca62:	80 87       	std	Z+8, r24	; 0x08
    ca64:	91 87       	std	Z+9, r25	; 0x09
    ca66:	18 c0       	rjmp	.+48     	; 0xca98 <f_opendir+0xb4>
    ca68:	95 e0       	ldi	r25, 0x05	; 5
    ca6a:	e9 2e       	mov	r14, r25
    ca6c:	f1 2c       	mov	r15, r1
    ca6e:	c6 01       	movw	r24, r12
    ca70:	91 d5       	rcall	.+2850   	; 0xd594 <ff_memfree>
    ca72:	f4 e0       	ldi	r31, 0x04	; 4
    ca74:	ef 16       	cp	r14, r31
    ca76:	f1 04       	cpc	r15, r1
    ca78:	f1 f0       	breq	.+60     	; 0xcab6 <f_opendir+0xd2>
    ca7a:	e1 14       	cp	r14, r1
    ca7c:	f1 04       	cpc	r15, r1
    ca7e:	49 f0       	breq	.+18     	; 0xca92 <f_opendir+0xae>
    ca80:	f8 01       	movw	r30, r16
    ca82:	11 82       	std	Z+1, r1	; 0x01
    ca84:	10 82       	st	Z, r1
    ca86:	c7 01       	movw	r24, r14
    ca88:	1a c0       	rjmp	.+52     	; 0xcabe <f_opendir+0xda>
    ca8a:	89 e0       	ldi	r24, 0x09	; 9
    ca8c:	03 c0       	rjmp	.+6      	; 0xca94 <f_opendir+0xb0>
    ca8e:	81 e1       	ldi	r24, 0x11	; 17
    ca90:	01 c0       	rjmp	.+2      	; 0xca94 <f_opendir+0xb0>
    ca92:	80 e0       	ldi	r24, 0x00	; 0
    ca94:	90 e0       	ldi	r25, 0x00	; 0
    ca96:	13 c0       	rjmp	.+38     	; 0xcabe <f_opendir+0xda>
    ca98:	e9 81       	ldd	r30, Y+1	; 0x01
    ca9a:	fa 81       	ldd	r31, Y+2	; 0x02
    ca9c:	85 81       	ldd	r24, Z+5	; 0x05
    ca9e:	96 81       	ldd	r25, Z+6	; 0x06
    caa0:	f8 01       	movw	r30, r16
    caa2:	93 83       	std	Z+3, r25	; 0x03
    caa4:	82 83       	std	Z+2, r24	; 0x02
    caa6:	40 e0       	ldi	r20, 0x00	; 0
    caa8:	50 e0       	ldi	r21, 0x00	; 0
    caaa:	ba 01       	movw	r22, r20
    caac:	c8 01       	movw	r24, r16
    caae:	0e 94 78 51 	call	0xa2f0	; 0xa2f0 <dir_sdi>
    cab2:	7c 01       	movw	r14, r24
    cab4:	dc cf       	rjmp	.-72     	; 0xca6e <f_opendir+0x8a>
    cab6:	85 e0       	ldi	r24, 0x05	; 5
    cab8:	e8 2e       	mov	r14, r24
    caba:	f1 2c       	mov	r15, r1
    cabc:	e1 cf       	rjmp	.-62     	; 0xca80 <f_opendir+0x9c>
    cabe:	24 96       	adiw	r28, 0x04	; 4
    cac0:	e8 e0       	ldi	r30, 0x08	; 8
    cac2:	0c 94 19 e6 	jmp	0x1cc32	; 0x1cc32 <__epilogue_restores__+0x14>

0000cac6 <f_closedir>:
    cac6:	a2 e0       	ldi	r26, 0x02	; 2
    cac8:	b0 e0       	ldi	r27, 0x00	; 0
    caca:	e9 e6       	ldi	r30, 0x69	; 105
    cacc:	f5 e6       	ldi	r31, 0x65	; 101
    cace:	0c 94 01 e6 	jmp	0x1cc02	; 0x1cc02 <__prologue_saves__+0x1c>
    cad2:	8c 01       	movw	r16, r24
    cad4:	be 01       	movw	r22, r28
    cad6:	6f 5f       	subi	r22, 0xFF	; 255
    cad8:	7f 4f       	sbci	r23, 0xFF	; 255
    cada:	0e 94 5c 49 	call	0x92b8	; 0x92b8 <validate>
    cade:	00 97       	sbiw	r24, 0x00	; 0
    cae0:	19 f4       	brne	.+6      	; 0xcae8 <f_closedir+0x22>
    cae2:	f8 01       	movw	r30, r16
    cae4:	11 82       	std	Z+1, r1	; 0x01
    cae6:	10 82       	st	Z, r1
    cae8:	22 96       	adiw	r28, 0x02	; 2
    caea:	e4 e0       	ldi	r30, 0x04	; 4
    caec:	0c 94 1d e6 	jmp	0x1cc3a	; 0x1cc3a <__epilogue_restores__+0x1c>

0000caf0 <f_readdir>:
    caf0:	a2 e0       	ldi	r26, 0x02	; 2
    caf2:	b0 e0       	ldi	r27, 0x00	; 0
    caf4:	ee e7       	ldi	r30, 0x7E	; 126
    caf6:	f5 e6       	ldi	r31, 0x65	; 101
    caf8:	0c 94 fb e5 	jmp	0x1cbf6	; 0x1cbf6 <__prologue_saves__+0x10>
    cafc:	7c 01       	movw	r14, r24
    cafe:	5b 01       	movw	r10, r22
    cb00:	be 01       	movw	r22, r28
    cb02:	6f 5f       	subi	r22, 0xFF	; 255
    cb04:	7f 4f       	sbci	r23, 0xFF	; 255
    cb06:	0e 94 5c 49 	call	0x92b8	; 0x92b8 <validate>
    cb0a:	00 97       	sbiw	r24, 0x00	; 0
    cb0c:	89 f5       	brne	.+98     	; 0xcb70 <f_readdir+0x80>
    cb0e:	a1 14       	cp	r10, r1
    cb10:	b1 04       	cpc	r11, r1
    cb12:	39 f4       	brne	.+14     	; 0xcb22 <f_readdir+0x32>
    cb14:	40 e0       	ldi	r20, 0x00	; 0
    cb16:	50 e0       	ldi	r21, 0x00	; 0
    cb18:	ba 01       	movw	r22, r20
    cb1a:	c7 01       	movw	r24, r14
    cb1c:	0e 94 78 51 	call	0xa2f0	; 0xa2f0 <dir_sdi>
    cb20:	27 c0       	rjmp	.+78     	; 0xcb70 <f_readdir+0x80>
    cb22:	80 e0       	ldi	r24, 0x00	; 0
    cb24:	92 e0       	ldi	r25, 0x02	; 2
    cb26:	33 d5       	rcall	.+2662   	; 0xd58e <ff_memalloc>
    cb28:	6c 01       	movw	r12, r24
    cb2a:	00 97       	sbiw	r24, 0x00	; 0
    cb2c:	f9 f0       	breq	.+62     	; 0xcb6c <f_readdir+0x7c>
    cb2e:	e9 81       	ldd	r30, Y+1	; 0x01
    cb30:	fa 81       	ldd	r31, Y+2	; 0x02
    cb32:	94 87       	std	Z+12, r25	; 0x0c
    cb34:	83 87       	std	Z+11, r24	; 0x0b
    cb36:	60 e0       	ldi	r22, 0x00	; 0
    cb38:	70 e0       	ldi	r23, 0x00	; 0
    cb3a:	c7 01       	movw	r24, r14
    cb3c:	0e 94 12 55 	call	0xaa24	; 0xaa24 <dir_read>
    cb40:	8c 01       	movw	r16, r24
    cb42:	8b 7f       	andi	r24, 0xFB	; 251
    cb44:	89 2b       	or	r24, r25
    cb46:	71 f4       	brne	.+28     	; 0xcb64 <f_readdir+0x74>
    cb48:	b5 01       	movw	r22, r10
    cb4a:	c7 01       	movw	r24, r14
    cb4c:	0e 94 40 4a 	call	0x9480	; 0x9480 <get_fileinfo>
    cb50:	60 e0       	ldi	r22, 0x00	; 0
    cb52:	70 e0       	ldi	r23, 0x00	; 0
    cb54:	c7 01       	movw	r24, r14
    cb56:	0e 94 f0 53 	call	0xa7e0	; 0xa7e0 <dir_next>
    cb5a:	8c 01       	movw	r16, r24
    cb5c:	04 97       	sbiw	r24, 0x04	; 4
    cb5e:	11 f4       	brne	.+4      	; 0xcb64 <f_readdir+0x74>
    cb60:	00 e0       	ldi	r16, 0x00	; 0
    cb62:	10 e0       	ldi	r17, 0x00	; 0
    cb64:	c6 01       	movw	r24, r12
    cb66:	16 d5       	rcall	.+2604   	; 0xd594 <ff_memfree>
    cb68:	c8 01       	movw	r24, r16
    cb6a:	02 c0       	rjmp	.+4      	; 0xcb70 <f_readdir+0x80>
    cb6c:	81 e1       	ldi	r24, 0x11	; 17
    cb6e:	90 e0       	ldi	r25, 0x00	; 0
    cb70:	22 96       	adiw	r28, 0x02	; 2
    cb72:	ea e0       	ldi	r30, 0x0A	; 10
    cb74:	0c 94 17 e6 	jmp	0x1cc2e	; 0x1cc2e <__epilogue_restores__+0x10>

0000cb78 <f_stat>:
    cb78:	a0 e3       	ldi	r26, 0x30	; 48
    cb7a:	b0 e0       	ldi	r27, 0x00	; 0
    cb7c:	e2 ec       	ldi	r30, 0xC2	; 194
    cb7e:	f5 e6       	ldi	r31, 0x65	; 101
    cb80:	0c 94 fd e5 	jmp	0x1cbfa	; 0x1cbfa <__prologue_saves__+0x14>
    cb84:	98 ab       	std	Y+48, r25	; 0x30
    cb86:	8f a7       	std	Y+47, r24	; 0x2f
    cb88:	6b 01       	movw	r12, r22
    cb8a:	40 e0       	ldi	r20, 0x00	; 0
    cb8c:	be 01       	movw	r22, r28
    cb8e:	6f 5f       	subi	r22, 0xFF	; 255
    cb90:	7f 4f       	sbci	r23, 0xFF	; 255
    cb92:	ce 01       	movw	r24, r28
    cb94:	8f 96       	adiw	r24, 0x2f	; 47
    cb96:	0e 94 63 4d 	call	0x9ac6	; 0x9ac6 <mount_volume>
    cb9a:	00 97       	sbiw	r24, 0x00	; 0
    cb9c:	39 f5       	brne	.+78     	; 0xcbec <f_stat+0x74>
    cb9e:	80 e0       	ldi	r24, 0x00	; 0
    cba0:	92 e0       	ldi	r25, 0x02	; 2
    cba2:	f5 d4       	rcall	.+2538   	; 0xd58e <ff_memalloc>
    cba4:	7c 01       	movw	r14, r24
    cba6:	00 97       	sbiw	r24, 0x00	; 0
    cba8:	f9 f0       	breq	.+62     	; 0xcbe8 <f_stat+0x70>
    cbaa:	e9 81       	ldd	r30, Y+1	; 0x01
    cbac:	fa 81       	ldd	r31, Y+2	; 0x02
    cbae:	94 87       	std	Z+12, r25	; 0x0c
    cbb0:	83 87       	std	Z+11, r24	; 0x0b
    cbb2:	6f a5       	ldd	r22, Y+47	; 0x2f
    cbb4:	78 a9       	ldd	r23, Y+48	; 0x30
    cbb6:	ce 01       	movw	r24, r28
    cbb8:	01 96       	adiw	r24, 0x01	; 1
    cbba:	0e 94 de 58 	call	0xb1bc	; 0xb1bc <follow_path>
    cbbe:	8c 01       	movw	r16, r24
    cbc0:	89 2b       	or	r24, r25
    cbc2:	71 f4       	brne	.+28     	; 0xcbe0 <f_stat+0x68>
    cbc4:	88 a5       	ldd	r24, Y+40	; 0x28
    cbc6:	87 fd       	sbrc	r24, 7
    cbc8:	09 c0       	rjmp	.+18     	; 0xcbdc <f_stat+0x64>
    cbca:	c1 14       	cp	r12, r1
    cbcc:	d1 04       	cpc	r13, r1
    cbce:	41 f0       	breq	.+16     	; 0xcbe0 <f_stat+0x68>
    cbd0:	b6 01       	movw	r22, r12
    cbd2:	ce 01       	movw	r24, r28
    cbd4:	01 96       	adiw	r24, 0x01	; 1
    cbd6:	0e 94 40 4a 	call	0x9480	; 0x9480 <get_fileinfo>
    cbda:	02 c0       	rjmp	.+4      	; 0xcbe0 <f_stat+0x68>
    cbdc:	06 e0       	ldi	r16, 0x06	; 6
    cbde:	10 e0       	ldi	r17, 0x00	; 0
    cbe0:	c7 01       	movw	r24, r14
    cbe2:	d8 d4       	rcall	.+2480   	; 0xd594 <ff_memfree>
    cbe4:	c8 01       	movw	r24, r16
    cbe6:	02 c0       	rjmp	.+4      	; 0xcbec <f_stat+0x74>
    cbe8:	81 e1       	ldi	r24, 0x11	; 17
    cbea:	90 e0       	ldi	r25, 0x00	; 0
    cbec:	e0 96       	adiw	r28, 0x30	; 48
    cbee:	e8 e0       	ldi	r30, 0x08	; 8
    cbf0:	0c 94 19 e6 	jmp	0x1cc32	; 0x1cc32 <__epilogue_restores__+0x14>

0000cbf4 <f_getfree>:
    cbf4:	aa e0       	ldi	r26, 0x0A	; 10
    cbf6:	b0 e0       	ldi	r27, 0x00	; 0
    cbf8:	e0 e0       	ldi	r30, 0x00	; 0
    cbfa:	f6 e6       	ldi	r31, 0x66	; 102
    cbfc:	0c 94 f3 e5 	jmp	0x1cbe6	; 0x1cbe6 <__prologue_saves__>
    cc00:	9c 83       	std	Y+4, r25	; 0x04
    cc02:	8b 83       	std	Y+3, r24	; 0x03
    cc04:	7e 83       	std	Y+6, r23	; 0x06
    cc06:	6d 83       	std	Y+5, r22	; 0x05
    cc08:	7a 01       	movw	r14, r20
    cc0a:	40 e0       	ldi	r20, 0x00	; 0
    cc0c:	be 01       	movw	r22, r28
    cc0e:	6f 5f       	subi	r22, 0xFF	; 255
    cc10:	7f 4f       	sbci	r23, 0xFF	; 255
    cc12:	ce 01       	movw	r24, r28
    cc14:	03 96       	adiw	r24, 0x03	; 3
    cc16:	0e 94 63 4d 	call	0x9ac6	; 0x9ac6 <mount_volume>
    cc1a:	8c 01       	movw	r16, r24
    cc1c:	89 2b       	or	r24, r25
    cc1e:	09 f0       	breq	.+2      	; 0xcc22 <f_getfree+0x2e>
    cc20:	c3 c0       	rjmp	.+390    	; 0xcda8 <f_getfree+0x1b4>
    cc22:	69 80       	ldd	r6, Y+1	; 0x01
    cc24:	7a 80       	ldd	r7, Y+2	; 0x02
    cc26:	d7 01       	movw	r26, r14
    cc28:	6d 92       	st	X+, r6
    cc2a:	7c 92       	st	X, r7
    cc2c:	f3 01       	movw	r30, r6
    cc2e:	81 89       	ldd	r24, Z+17	; 0x11
    cc30:	92 89       	ldd	r25, Z+18	; 0x12
    cc32:	a3 89       	ldd	r26, Z+19	; 0x13
    cc34:	b4 89       	ldd	r27, Z+20	; 0x14
    cc36:	81 8c       	ldd	r8, Z+25	; 0x19
    cc38:	92 8c       	ldd	r9, Z+26	; 0x1a
    cc3a:	a3 8c       	ldd	r10, Z+27	; 0x1b
    cc3c:	b4 8c       	ldd	r11, Z+28	; 0x1c
    cc3e:	b5 01       	movw	r22, r10
    cc40:	a4 01       	movw	r20, r8
    cc42:	42 50       	subi	r20, 0x02	; 2
    cc44:	51 09       	sbc	r21, r1
    cc46:	61 09       	sbc	r22, r1
    cc48:	71 09       	sbc	r23, r1
    cc4a:	48 17       	cp	r20, r24
    cc4c:	59 07       	cpc	r21, r25
    cc4e:	6a 07       	cpc	r22, r26
    cc50:	7b 07       	cpc	r23, r27
    cc52:	38 f0       	brcs	.+14     	; 0xcc62 <f_getfree+0x6e>
    cc54:	ed 81       	ldd	r30, Y+5	; 0x05
    cc56:	fe 81       	ldd	r31, Y+6	; 0x06
    cc58:	80 83       	st	Z, r24
    cc5a:	91 83       	std	Z+1, r25	; 0x01
    cc5c:	a2 83       	std	Z+2, r26	; 0x02
    cc5e:	b3 83       	std	Z+3, r27	; 0x03
    cc60:	a3 c0       	rjmp	.+326    	; 0xcda8 <f_getfree+0x1b4>
    cc62:	80 81       	ld	r24, Z
    cc64:	81 30       	cpi	r24, 0x01	; 1
    cc66:	a1 f5       	brne	.+104    	; 0xccd0 <f_getfree+0xdc>
    cc68:	82 e0       	ldi	r24, 0x02	; 2
    cc6a:	88 2e       	mov	r8, r24
    cc6c:	91 2c       	mov	r9, r1
    cc6e:	a1 2c       	mov	r10, r1
    cc70:	b1 2c       	mov	r11, r1
    cc72:	c1 2c       	mov	r12, r1
    cc74:	d1 2c       	mov	r13, r1
    cc76:	76 01       	movw	r14, r12
    cc78:	b5 01       	movw	r22, r10
    cc7a:	a4 01       	movw	r20, r8
    cc7c:	c3 01       	movw	r24, r6
    cc7e:	0e 94 c4 50 	call	0xa188	; 0xa188 <get_fat.isra.10>
    cc82:	6f 3f       	cpi	r22, 0xFF	; 255
    cc84:	bf ef       	ldi	r27, 0xFF	; 255
    cc86:	7b 07       	cpc	r23, r27
    cc88:	8b 07       	cpc	r24, r27
    cc8a:	9b 07       	cpc	r25, r27
    cc8c:	09 f4       	brne	.+2      	; 0xcc90 <f_getfree+0x9c>
    cc8e:	75 c0       	rjmp	.+234    	; 0xcd7a <f_getfree+0x186>
    cc90:	61 30       	cpi	r22, 0x01	; 1
    cc92:	71 05       	cpc	r23, r1
    cc94:	81 05       	cpc	r24, r1
    cc96:	91 05       	cpc	r25, r1
    cc98:	09 f4       	brne	.+2      	; 0xcc9c <f_getfree+0xa8>
    cc9a:	72 c0       	rjmp	.+228    	; 0xcd80 <f_getfree+0x18c>
    cc9c:	67 2b       	or	r22, r23
    cc9e:	68 2b       	or	r22, r24
    cca0:	69 2b       	or	r22, r25
    cca2:	29 f4       	brne	.+10     	; 0xccae <f_getfree+0xba>
    cca4:	ef ef       	ldi	r30, 0xFF	; 255
    cca6:	ce 1a       	sub	r12, r30
    cca8:	de 0a       	sbc	r13, r30
    ccaa:	ee 0a       	sbc	r14, r30
    ccac:	fe 0a       	sbc	r15, r30
    ccae:	ff ef       	ldi	r31, 0xFF	; 255
    ccb0:	8f 1a       	sub	r8, r31
    ccb2:	9f 0a       	sbc	r9, r31
    ccb4:	af 0a       	sbc	r10, r31
    ccb6:	bf 0a       	sbc	r11, r31
    ccb8:	e9 81       	ldd	r30, Y+1	; 0x01
    ccba:	fa 81       	ldd	r31, Y+2	; 0x02
    ccbc:	81 8d       	ldd	r24, Z+25	; 0x19
    ccbe:	92 8d       	ldd	r25, Z+26	; 0x1a
    ccc0:	a3 8d       	ldd	r26, Z+27	; 0x1b
    ccc2:	b4 8d       	ldd	r27, Z+28	; 0x1c
    ccc4:	88 16       	cp	r8, r24
    ccc6:	99 06       	cpc	r9, r25
    ccc8:	aa 06       	cpc	r10, r26
    ccca:	bb 06       	cpc	r11, r27
    cccc:	a8 f2       	brcs	.-86     	; 0xcc78 <f_getfree+0x84>
    ccce:	5c c0       	rjmp	.+184    	; 0xcd88 <f_getfree+0x194>
    ccd0:	45 a0       	ldd	r4, Z+37	; 0x25
    ccd2:	56 a0       	ldd	r5, Z+38	; 0x26
    ccd4:	67 a0       	ldd	r6, Z+39	; 0x27
    ccd6:	70 a4       	ldd	r7, Z+40	; 0x28
    ccd8:	21 2c       	mov	r2, r1
    ccda:	31 2c       	mov	r3, r1
    ccdc:	c1 2c       	mov	r12, r1
    ccde:	d1 2c       	mov	r13, r1
    cce0:	76 01       	movw	r14, r12
    cce2:	21 14       	cp	r2, r1
    cce4:	31 04       	cpc	r3, r1
    cce6:	b1 f4       	brne	.+44     	; 0xcd14 <f_getfree+0x120>
    cce8:	d3 01       	movw	r26, r6
    ccea:	c2 01       	movw	r24, r4
    ccec:	01 96       	adiw	r24, 0x01	; 1
    ccee:	a1 1d       	adc	r26, r1
    ccf0:	b1 1d       	adc	r27, r1
    ccf2:	8f 83       	std	Y+7, r24	; 0x07
    ccf4:	98 87       	std	Y+8, r25	; 0x08
    ccf6:	a9 87       	std	Y+9, r26	; 0x09
    ccf8:	ba 87       	std	Y+10, r27	; 0x0a
    ccfa:	b3 01       	movw	r22, r6
    ccfc:	a2 01       	movw	r20, r4
    ccfe:	89 81       	ldd	r24, Y+1	; 0x01
    cd00:	9a 81       	ldd	r25, Y+2	; 0x02
    cd02:	0e 94 e8 4c 	call	0x99d0	; 0x99d0 <move_window>
    cd06:	00 97       	sbiw	r24, 0x00	; 0
    cd08:	09 f0       	breq	.+2      	; 0xcd0c <f_getfree+0x118>
    cd0a:	3d c0       	rjmp	.+122    	; 0xcd86 <f_getfree+0x192>
    cd0c:	4f 80       	ldd	r4, Y+7	; 0x07
    cd0e:	58 84       	ldd	r5, Y+8	; 0x08
    cd10:	69 84       	ldd	r6, Y+9	; 0x09
    cd12:	7a 84       	ldd	r7, Y+10	; 0x0a
    cd14:	e9 81       	ldd	r30, Y+1	; 0x01
    cd16:	fa 81       	ldd	r31, Y+2	; 0x02
    cd18:	80 81       	ld	r24, Z
    cd1a:	82 30       	cpi	r24, 0x02	; 2
    cd1c:	79 f4       	brne	.+30     	; 0xcd3c <f_getfree+0x148>
    cd1e:	e2 0d       	add	r30, r2
    cd20:	f3 1d       	adc	r31, r3
    cd22:	85 a9       	ldd	r24, Z+53	; 0x35
    cd24:	96 a9       	ldd	r25, Z+54	; 0x36
    cd26:	89 2b       	or	r24, r25
    cd28:	29 f4       	brne	.+10     	; 0xcd34 <f_getfree+0x140>
    cd2a:	9f ef       	ldi	r25, 0xFF	; 255
    cd2c:	c9 1a       	sub	r12, r25
    cd2e:	d9 0a       	sbc	r13, r25
    cd30:	e9 0a       	sbc	r14, r25
    cd32:	f9 0a       	sbc	r15, r25
    cd34:	a2 e0       	ldi	r26, 0x02	; 2
    cd36:	2a 0e       	add	r2, r26
    cd38:	31 1c       	adc	r3, r1
    cd3a:	15 c0       	rjmp	.+42     	; 0xcd66 <f_getfree+0x172>
    cd3c:	cf 01       	movw	r24, r30
    cd3e:	c5 96       	adiw	r24, 0x35	; 53
    cd40:	82 0d       	add	r24, r2
    cd42:	93 1d       	adc	r25, r3
    cd44:	0e 94 04 48 	call	0x9008	; 0x9008 <ld_dword>
    cd48:	dc 01       	movw	r26, r24
    cd4a:	cb 01       	movw	r24, r22
    cd4c:	bf 70       	andi	r27, 0x0F	; 15
    cd4e:	89 2b       	or	r24, r25
    cd50:	8a 2b       	or	r24, r26
    cd52:	8b 2b       	or	r24, r27
    cd54:	29 f4       	brne	.+10     	; 0xcd60 <f_getfree+0x16c>
    cd56:	bf ef       	ldi	r27, 0xFF	; 255
    cd58:	cb 1a       	sub	r12, r27
    cd5a:	db 0a       	sbc	r13, r27
    cd5c:	eb 0a       	sbc	r14, r27
    cd5e:	fb 0a       	sbc	r15, r27
    cd60:	e4 e0       	ldi	r30, 0x04	; 4
    cd62:	2e 0e       	add	r2, r30
    cd64:	31 1c       	adc	r3, r1
    cd66:	f1 e0       	ldi	r31, 0x01	; 1
    cd68:	3f 22       	and	r3, r31
    cd6a:	21 e0       	ldi	r18, 0x01	; 1
    cd6c:	82 1a       	sub	r8, r18
    cd6e:	91 08       	sbc	r9, r1
    cd70:	a1 08       	sbc	r10, r1
    cd72:	b1 08       	sbc	r11, r1
    cd74:	09 f0       	breq	.+2      	; 0xcd78 <f_getfree+0x184>
    cd76:	b5 cf       	rjmp	.-150    	; 0xcce2 <f_getfree+0xee>
    cd78:	07 c0       	rjmp	.+14     	; 0xcd88 <f_getfree+0x194>
    cd7a:	01 e0       	ldi	r16, 0x01	; 1
    cd7c:	10 e0       	ldi	r17, 0x00	; 0
    cd7e:	04 c0       	rjmp	.+8      	; 0xcd88 <f_getfree+0x194>
    cd80:	02 e0       	ldi	r16, 0x02	; 2
    cd82:	10 e0       	ldi	r17, 0x00	; 0
    cd84:	01 c0       	rjmp	.+2      	; 0xcd88 <f_getfree+0x194>
    cd86:	8c 01       	movw	r16, r24
    cd88:	ad 81       	ldd	r26, Y+5	; 0x05
    cd8a:	be 81       	ldd	r27, Y+6	; 0x06
    cd8c:	cd 92       	st	X+, r12
    cd8e:	dd 92       	st	X+, r13
    cd90:	ed 92       	st	X+, r14
    cd92:	fc 92       	st	X, r15
    cd94:	13 97       	sbiw	r26, 0x03	; 3
    cd96:	e9 81       	ldd	r30, Y+1	; 0x01
    cd98:	fa 81       	ldd	r31, Y+2	; 0x02
    cd9a:	c1 8a       	std	Z+17, r12	; 0x11
    cd9c:	d2 8a       	std	Z+18, r13	; 0x12
    cd9e:	e3 8a       	std	Z+19, r14	; 0x13
    cda0:	f4 8a       	std	Z+20, r15	; 0x14
    cda2:	84 81       	ldd	r24, Z+4	; 0x04
    cda4:	81 60       	ori	r24, 0x01	; 1
    cda6:	84 83       	std	Z+4, r24	; 0x04
    cda8:	c8 01       	movw	r24, r16
    cdaa:	2a 96       	adiw	r28, 0x0a	; 10
    cdac:	e2 e1       	ldi	r30, 0x12	; 18
    cdae:	0c 94 0f e6 	jmp	0x1cc1e	; 0x1cc1e <__epilogue_restores__>

0000cdb2 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
    cdb2:	a0 e6       	ldi	r26, 0x60	; 96
    cdb4:	b0 e0       	ldi	r27, 0x00	; 0
    cdb6:	ef ed       	ldi	r30, 0xDF	; 223
    cdb8:	f6 e6       	ldi	r31, 0x66	; 102
    cdba:	0c 94 fa e5 	jmp	0x1cbf4	; 0x1cbf4 <__prologue_saves__+0xe>
    cdbe:	a1 96       	adiw	r28, 0x21	; 33
    cdc0:	9f af       	std	Y+63, r25	; 0x3f
    cdc2:	8e af       	std	Y+62, r24	; 0x3e
    cdc4:	a1 97       	sbiw	r28, 0x21	; 33
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
    cdc6:	42 e0       	ldi	r20, 0x02	; 2
    cdc8:	be 01       	movw	r22, r28
    cdca:	63 5a       	subi	r22, 0xA3	; 163
    cdcc:	7f 4f       	sbci	r23, 0xFF	; 255
    cdce:	ce 01       	movw	r24, r28
    cdd0:	81 5a       	subi	r24, 0xA1	; 161
    cdd2:	9f 4f       	sbci	r25, 0xFF	; 255
    cdd4:	0e 94 63 4d 	call	0x9ac6	; 0x9ac6 <mount_volume>
	if (res == FR_OK) {
    cdd8:	00 97       	sbiw	r24, 0x00	; 0
    cdda:	09 f0       	breq	.+2      	; 0xcdde <f_unlink+0x2c>
    cddc:	8c c0       	rjmp	.+280    	; 0xcef6 <f_unlink+0x144>
		dj.obj.fs = fs;
    cdde:	6f 96       	adiw	r28, 0x1f	; 31
    cde0:	8e ad       	ldd	r24, Y+62	; 0x3e
    cde2:	9f ad       	ldd	r25, Y+63	; 0x3f
    cde4:	6f 97       	sbiw	r28, 0x1f	; 31
    cde6:	98 ab       	std	Y+48, r25	; 0x30
    cde8:	8f a7       	std	Y+47, r24	; 0x2f
		INIT_NAMBUF(fs);
    cdea:	80 e0       	ldi	r24, 0x00	; 0
    cdec:	92 e0       	ldi	r25, 0x02	; 2
    cdee:	cf d3       	rcall	.+1950   	; 0xd58e <ff_memalloc>
    cdf0:	5c 01       	movw	r10, r24
    cdf2:	00 97       	sbiw	r24, 0x00	; 0
    cdf4:	09 f4       	brne	.+2      	; 0xcdf8 <f_unlink+0x46>
    cdf6:	49 c0       	rjmp	.+146    	; 0xce8a <f_unlink+0xd8>
    cdf8:	6f 96       	adiw	r28, 0x1f	; 31
    cdfa:	ee ad       	ldd	r30, Y+62	; 0x3e
    cdfc:	ff ad       	ldd	r31, Y+63	; 0x3f
    cdfe:	6f 97       	sbiw	r28, 0x1f	; 31
    ce00:	94 87       	std	Z+12, r25	; 0x0c
    ce02:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);		/* Follow the file path */
    ce04:	a1 96       	adiw	r28, 0x21	; 33
    ce06:	6e ad       	ldd	r22, Y+62	; 0x3e
    ce08:	7f ad       	ldd	r23, Y+63	; 0x3f
    ce0a:	a1 97       	sbiw	r28, 0x21	; 33
    ce0c:	ce 01       	movw	r24, r28
    ce0e:	8f 96       	adiw	r24, 0x2f	; 47
    ce10:	0e 94 de 58 	call	0xb1bc	; 0xb1bc <follow_path>
    ce14:	8c 01       	movw	r16, r24
		if (FF_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
    ce16:	89 2b       	or	r24, r25
    ce18:	a1 f5       	brne	.+104    	; 0xce82 <f_unlink+0xd0>
    ce1a:	67 96       	adiw	r28, 0x17	; 23
    ce1c:	8f ad       	ldd	r24, Y+63	; 0x3f
    ce1e:	67 97       	sbiw	r28, 0x17	; 23
    ce20:	85 fd       	sbrc	r24, 5
    ce22:	36 c0       	rjmp	.+108    	; 0xce90 <f_unlink+0xde>
		}
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
    ce24:	87 fd       	sbrc	r24, 7
    ce26:	34 c0       	rjmp	.+104    	; 0xce90 <f_unlink+0xde>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
			} else {
				if (dj.obj.attr & AM_RDO) {
    ce28:	9b a8       	ldd	r9, Y+51	; 0x33
    ce2a:	90 fc       	sbrc	r9, 0
    ce2c:	40 c0       	rjmp	.+128    	; 0xceae <f_unlink+0xfc>
					init_alloc_info(fs, &obj);
					dclst = obj.sclust;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
    ce2e:	6f 96       	adiw	r28, 0x1f	; 31
    ce30:	0e ad       	ldd	r16, Y+62	; 0x3e
    ce32:	1f ad       	ldd	r17, Y+63	; 0x3f
    ce34:	6f 97       	sbiw	r28, 0x1f	; 31
    ce36:	2b 96       	adiw	r28, 0x0b	; 11
    ce38:	6e ad       	ldd	r22, Y+62	; 0x3e
    ce3a:	7f ad       	ldd	r23, Y+63	; 0x3f
    ce3c:	2b 97       	sbiw	r28, 0x0b	; 11
    ce3e:	f8 01       	movw	r30, r16
    ce40:	80 81       	ld	r24, Z
    ce42:	0e 94 59 4b 	call	0x96b2	; 0x96b2 <ld_clust.isra.4>
    ce46:	6b 01       	movw	r12, r22
    ce48:	7c 01       	movw	r14, r24
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
    ce4a:	94 fe       	sbrs	r9, 4
    ce4c:	33 c0       	rjmp	.+102    	; 0xceb4 <f_unlink+0x102>
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
    ce4e:	f8 01       	movw	r30, r16
    ce50:	85 89       	ldd	r24, Z+21	; 0x15
    ce52:	96 89       	ldd	r25, Z+22	; 0x16
    ce54:	a7 89       	ldd	r26, Z+23	; 0x17
    ce56:	b0 8d       	ldd	r27, Z+24	; 0x18
    ce58:	c8 16       	cp	r12, r24
    ce5a:	d9 06       	cpc	r13, r25
    ce5c:	ea 06       	cpc	r14, r26
    ce5e:	fb 06       	cpc	r15, r27
    ce60:	31 f1       	breq	.+76     	; 0xceae <f_unlink+0xfc>
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;				/* Open the sub-directory */
    ce62:	1a 83       	std	Y+2, r17	; 0x02
    ce64:	09 83       	std	Y+1, r16	; 0x01
						sdj.obj.sclust = dclst;
    ce66:	cf 82       	std	Y+7, r12	; 0x07
    ce68:	d8 86       	std	Y+8, r13	; 0x08
    ce6a:	e9 86       	std	Y+9, r14	; 0x09
    ce6c:	fa 86       	std	Y+10, r15	; 0x0a
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
    ce6e:	40 e0       	ldi	r20, 0x00	; 0
    ce70:	50 e0       	ldi	r21, 0x00	; 0
    ce72:	ba 01       	movw	r22, r20
    ce74:	ce 01       	movw	r24, r28
    ce76:	01 96       	adiw	r24, 0x01	; 1
    ce78:	0e 94 78 51 	call	0xa2f0	; 0xa2f0 <dir_sdi>
    ce7c:	8c 01       	movw	r16, r24
						if (res == FR_OK) {
    ce7e:	89 2b       	or	r24, r25
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    ce80:	51 f0       	breq	.+20     	; 0xce96 <f_unlink+0xe4>
    ce82:	c5 01       	movw	r24, r10
    ce84:	87 d3       	rcall	.+1806   	; 0xd594 <ff_memfree>
    ce86:	c8 01       	movw	r24, r16

	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    ce88:	36 c0       	rjmp	.+108    	; 0xcef6 <f_unlink+0x144>
    ce8a:	81 e1       	ldi	r24, 0x11	; 17
    ce8c:	90 e0       	ldi	r25, 0x00	; 0
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
    ce8e:	33 c0       	rjmp	.+102    	; 0xcef6 <f_unlink+0x144>
    ce90:	06 e0       	ldi	r16, 0x06	; 6
    ce92:	10 e0       	ldi	r17, 0x00	; 0
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
						if (res == FR_OK) {
							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
    ce94:	f6 cf       	rjmp	.-20     	; 0xce82 <f_unlink+0xd0>
    ce96:	60 e0       	ldi	r22, 0x00	; 0
    ce98:	70 e0       	ldi	r23, 0x00	; 0
    ce9a:	ce 01       	movw	r24, r28
    ce9c:	01 96       	adiw	r24, 0x01	; 1
    ce9e:	0e 94 12 55 	call	0xaa24	; 0xaa24 <dir_read>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
    cea2:	8c 01       	movw	r16, r24
    cea4:	00 97       	sbiw	r24, 0x00	; 0
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
    cea6:	19 f0       	breq	.+6      	; 0xceae <f_unlink+0xfc>
    cea8:	04 97       	sbiw	r24, 0x04	; 4
    ceaa:	21 f0       	breq	.+8      	; 0xceb4 <f_unlink+0x102>
					dclst = ld_clust(fs, dj.dir);
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
						res = FR_DENIED;
    ceac:	ea cf       	rjmp	.-44     	; 0xce82 <f_unlink+0xd0>
    ceae:	07 e0       	ldi	r16, 0x07	; 7
    ceb0:	10 e0       	ldi	r17, 0x00	; 0
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);			/* Remove the directory entry */
    ceb2:	e7 cf       	rjmp	.-50     	; 0xce82 <f_unlink+0xd0>
    ceb4:	ce 01       	movw	r24, r28
    ceb6:	8f 96       	adiw	r24, 0x2f	; 47
    ceb8:	0e 94 e4 55 	call	0xabc8	; 0xabc8 <dir_remove>
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
    cebc:	8c 01       	movw	r16, r24
    cebe:	89 2b       	or	r24, r25
    cec0:	01 f7       	brne	.-64     	; 0xce82 <f_unlink+0xd0>
    cec2:	c1 14       	cp	r12, r1
    cec4:	d1 04       	cpc	r13, r1
    cec6:	e1 04       	cpc	r14, r1
    cec8:	f1 04       	cpc	r15, r1
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    ceca:	41 f4       	brne	.+16     	; 0xcedc <f_unlink+0x12a>
    cecc:	6f 96       	adiw	r28, 0x1f	; 31
    cece:	8e ad       	ldd	r24, Y+62	; 0x3e
    ced0:	9f ad       	ldd	r25, Y+63	; 0x3f
    ced2:	6f 97       	sbiw	r28, 0x1f	; 31
    ced4:	0e 94 ce 4b 	call	0x979c	; 0x979c <sync_fs>
    ced8:	8c 01       	movw	r16, r24
				res = dir_remove(&dj);			/* Remove the directory entry */
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
#if FF_FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
    ceda:	d3 cf       	rjmp	.-90     	; 0xce82 <f_unlink+0xd0>
    cedc:	00 e0       	ldi	r16, 0x00	; 0
    cede:	10 e0       	ldi	r17, 0x00	; 0
    cee0:	98 01       	movw	r18, r16
    cee2:	b7 01       	movw	r22, r14
    cee4:	a6 01       	movw	r20, r12
    cee6:	ce 01       	movw	r24, r28
    cee8:	8f 96       	adiw	r24, 0x2f	; 47
    ceea:	0e 94 5f 53 	call	0xa6be	; 0xa6be <remove_chain>
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    ceee:	8c 01       	movw	r16, r24
    cef0:	89 2b       	or	r24, r25
    cef2:	39 f6       	brne	.-114    	; 0xce82 <f_unlink+0xd0>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cef4:	eb cf       	rjmp	.-42     	; 0xcecc <f_unlink+0x11a>
    cef6:	c0 5a       	subi	r28, 0xA0	; 160
    cef8:	df 4f       	sbci	r29, 0xFF	; 255
    cefa:	eb e0       	ldi	r30, 0x0B	; 11
    cefc:	0c 94 16 e6 	jmp	0x1cc2c	; 0x1cc2c <__epilogue_restores__+0xe>

0000cf00 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
    cf00:	a0 e4       	ldi	r26, 0x40	; 64
    cf02:	b0 e0       	ldi	r27, 0x00	; 0
    cf04:	e6 e8       	ldi	r30, 0x86	; 134
    cf06:	f7 e6       	ldi	r31, 0x67	; 103
    cf08:	0c 94 f5 e5 	jmp	0x1cbea	; 0x1cbea <__prologue_saves__+0x4>
    cf0c:	21 96       	adiw	r28, 0x01	; 1
    cf0e:	9f af       	std	Y+63, r25	; 0x3f
    cf10:	8e af       	std	Y+62, r24	; 0x3e
    cf12:	21 97       	sbiw	r28, 0x01	; 1
	FATFS *fs;
	DWORD dcl, pcl, tm;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    cf14:	42 e0       	ldi	r20, 0x02	; 2
    cf16:	be 01       	movw	r22, r28
    cf18:	63 5c       	subi	r22, 0xC3	; 195
    cf1a:	7f 4f       	sbci	r23, 0xFF	; 255
    cf1c:	ce 01       	movw	r24, r28
    cf1e:	cf 96       	adiw	r24, 0x3f	; 63
    cf20:	0e 94 63 4d 	call	0x9ac6	; 0x9ac6 <mount_volume>
	if (res == FR_OK) {
    cf24:	00 97       	sbiw	r24, 0x00	; 0
    cf26:	09 f0       	breq	.+2      	; 0xcf2a <f_mkdir+0x2a>
    cf28:	d6 c0       	rjmp	.+428    	; 0xd0d6 <f_mkdir+0x1d6>
		dj.obj.fs = fs;
    cf2a:	8d ad       	ldd	r24, Y+61	; 0x3d
    cf2c:	9e ad       	ldd	r25, Y+62	; 0x3e
    cf2e:	9a 83       	std	Y+2, r25	; 0x02
    cf30:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    cf32:	80 e0       	ldi	r24, 0x00	; 0
    cf34:	92 e0       	ldi	r25, 0x02	; 2
    cf36:	2b d3       	rcall	.+1622   	; 0xd58e <ff_memalloc>
    cf38:	6c 01       	movw	r12, r24
    cf3a:	00 97       	sbiw	r24, 0x00	; 0
    cf3c:	e9 f0       	breq	.+58     	; 0xcf78 <f_mkdir+0x78>
    cf3e:	ed ad       	ldd	r30, Y+61	; 0x3d
    cf40:	fe ad       	ldd	r31, Y+62	; 0x3e
    cf42:	94 87       	std	Z+12, r25	; 0x0c
    cf44:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);			/* Follow the file path */
    cf46:	21 96       	adiw	r28, 0x01	; 1
    cf48:	6e ad       	ldd	r22, Y+62	; 0x3e
    cf4a:	7f ad       	ldd	r23, Y+63	; 0x3f
    cf4c:	21 97       	sbiw	r28, 0x01	; 1
    cf4e:	ce 01       	movw	r24, r28
    cf50:	01 96       	adiw	r24, 0x01	; 1
    cf52:	0e 94 de 58 	call	0xb1bc	; 0xb1bc <follow_path>
    cf56:	7c 01       	movw	r14, r24
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    cf58:	89 2b       	or	r24, r25
    cf5a:	89 f0       	breq	.+34     	; 0xcf7e <f_mkdir+0x7e>
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
    cf5c:	84 e0       	ldi	r24, 0x04	; 4
    cf5e:	e8 16       	cp	r14, r24
    cf60:	f1 04       	cpc	r15, r1
    cf62:	31 f4       	brne	.+12     	; 0xcf70 <f_mkdir+0x70>
    cf64:	88 a5       	ldd	r24, Y+40	; 0x28
    cf66:	85 ff       	sbrs	r24, 5
    cf68:	0e c0       	rjmp	.+28     	; 0xcf86 <f_mkdir+0x86>
			res = FR_INVALID_NAME;
    cf6a:	26 e0       	ldi	r18, 0x06	; 6
    cf6c:	e2 2e       	mov	r14, r18
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
			}
		}
		FREE_NAMBUF();
    cf6e:	f1 2c       	mov	r15, r1
    cf70:	c6 01       	movw	r24, r12
    cf72:	10 d3       	rcall	.+1568   	; 0xd594 <ff_memfree>
    cf74:	c7 01       	movw	r24, r14


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    cf76:	af c0       	rjmp	.+350    	; 0xd0d6 <f_mkdir+0x1d6>
    cf78:	81 e1       	ldi	r24, 0x11	; 17
    cf7a:	90 e0       	ldi	r25, 0x00	; 0
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    cf7c:	ac c0       	rjmp	.+344    	; 0xd0d6 <f_mkdir+0x1d6>
    cf7e:	38 e0       	ldi	r19, 0x08	; 8
    cf80:	e3 2e       	mov	r14, r19
    cf82:	f1 2c       	mov	r15, r1
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
    cf84:	f5 cf       	rjmp	.-22     	; 0xcf70 <f_mkdir+0x70>
    cf86:	8d ad       	ldd	r24, Y+61	; 0x3d
    cf88:	9e ad       	ldd	r25, Y+62	; 0x3e
    cf8a:	98 ab       	std	Y+48, r25	; 0x30
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
    cf8c:	8f a7       	std	Y+47, r24	; 0x2f
    cf8e:	40 e0       	ldi	r20, 0x00	; 0
    cf90:	50 e0       	ldi	r21, 0x00	; 0
    cf92:	ba 01       	movw	r22, r20
    cf94:	ce 01       	movw	r24, r28
    cf96:	8f 96       	adiw	r24, 0x2f	; 47
    cf98:	0e 94 39 52 	call	0xa472	; 0xa472 <create_chain>
    cf9c:	4b 01       	movw	r8, r22
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    cf9e:	5c 01       	movw	r10, r24
    cfa0:	67 2b       	or	r22, r23
    cfa2:	68 2b       	or	r22, r24
    cfa4:	69 2b       	or	r22, r25
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    cfa6:	09 f1       	breq	.+66     	; 0xcfea <f_mkdir+0xea>
    cfa8:	e1 e0       	ldi	r30, 0x01	; 1
    cfaa:	8e 16       	cp	r8, r30
    cfac:	91 04       	cpc	r9, r1
    cfae:	a1 04       	cpc	r10, r1
    cfb0:	b1 04       	cpc	r11, r1
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
    cfb2:	61 f0       	breq	.+24     	; 0xcfcc <f_mkdir+0xcc>
    cfb4:	ff ef       	ldi	r31, 0xFF	; 255
    cfb6:	8f 16       	cp	r8, r31
    cfb8:	9f 06       	cpc	r9, r31
    cfba:	af 06       	cpc	r10, r31
    cfbc:	bf 06       	cpc	r11, r31
			tm = GET_FATTIME();
    cfbe:	d9 f4       	brne	.+54     	; 0xcff6 <f_mkdir+0xf6>
    cfc0:	0e 94 b5 71 	call	0xe36a	; 0xe36a <get_fattime>
    cfc4:	ee 24       	eor	r14, r14
    cfc6:	e3 94       	inc	r14
    cfc8:	f1 2c       	mov	r15, r1
    cfca:	05 c0       	rjmp	.+10     	; 0xcfd6 <f_mkdir+0xd6>
    cfcc:	0e 94 b5 71 	call	0xe36a	; 0xe36a <get_fattime>
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    cfd0:	92 e0       	ldi	r25, 0x02	; 2
    cfd2:	e9 2e       	mov	r14, r25
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
    cfd4:	f1 2c       	mov	r15, r1
    cfd6:	00 e0       	ldi	r16, 0x00	; 0
    cfd8:	10 e0       	ldi	r17, 0x00	; 0
    cfda:	98 01       	movw	r18, r16
    cfdc:	b5 01       	movw	r22, r10
    cfde:	a4 01       	movw	r20, r8
    cfe0:	ce 01       	movw	r24, r28
    cfe2:	8f 96       	adiw	r24, 0x2f	; 47
    cfe4:	0e 94 5f 53 	call	0xa6be	; 0xa6be <remove_chain>
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
			tm = GET_FATTIME();
    cfe8:	c3 cf       	rjmp	.-122    	; 0xcf70 <f_mkdir+0x70>
    cfea:	0e 94 b5 71 	call	0xe36a	; 0xe36a <get_fattime>
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    cfee:	87 e0       	ldi	r24, 0x07	; 7
    cff0:	e8 2e       	mov	r14, r24
    cff2:	f1 2c       	mov	r15, r1
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
			tm = GET_FATTIME();
    cff4:	f0 cf       	rjmp	.-32     	; 0xcfd6 <f_mkdir+0xd6>
    cff6:	0e 94 b5 71 	call	0xe36a	; 0xe36a <get_fattime>
    cffa:	2b 01       	movw	r4, r22
			if (res == FR_OK) {
				res = dir_clear(fs, dcl);		/* Clean up the new table */
    cffc:	3c 01       	movw	r6, r24
    cffe:	b5 01       	movw	r22, r10
    d000:	a4 01       	movw	r20, r8
    d002:	8d ad       	ldd	r24, Y+61	; 0x3d
    d004:	9e ad       	ldd	r25, Y+62	; 0x3e
    d006:	0e 94 40 4c 	call	0x9880	; 0x9880 <dir_clear>
				if (res == FR_OK) {
    d00a:	7c 01       	movw	r14, r24
    d00c:	89 2b       	or	r24, r25
					if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* Create dot entries (FAT only) */
						mem_set(fs->win + DIR_Name, ' ', 11);	/* Create "." entry */
    d00e:	19 f7       	brne	.-58     	; 0xcfd6 <f_mkdir+0xd6>
    d010:	8d ad       	ldd	r24, Y+61	; 0x3d
    d012:	9e ad       	ldd	r25, Y+62	; 0x3e
    d014:	4b e0       	ldi	r20, 0x0B	; 11
    d016:	50 e0       	ldi	r21, 0x00	; 0
    d018:	60 e2       	ldi	r22, 0x20	; 32
    d01a:	70 e0       	ldi	r23, 0x00	; 0
    d01c:	c5 96       	adiw	r24, 0x35	; 53
    d01e:	0e 94 1f 48 	call	0x903e	; 0x903e <mem_set>
						fs->win[DIR_Name] = '.';
    d022:	8d ad       	ldd	r24, Y+61	; 0x3d
    d024:	9e ad       	ldd	r25, Y+62	; 0x3e
    d026:	1e e2       	ldi	r17, 0x2E	; 46
    d028:	fc 01       	movw	r30, r24
						fs->win[DIR_Attr] = AM_DIR;
    d02a:	15 ab       	std	Z+53, r17	; 0x35
    d02c:	e0 5c       	subi	r30, 0xC0	; 192
    d02e:	ff 4f       	sbci	r31, 0xFF	; 255
    d030:	20 e1       	ldi	r18, 0x10	; 16
						st_dword(fs->win + DIR_ModTime, tm);
    d032:	20 83       	st	Z, r18
    d034:	b3 01       	movw	r22, r6
    d036:	a2 01       	movw	r20, r4
    d038:	85 5b       	subi	r24, 0xB5	; 181
    d03a:	9f 4f       	sbci	r25, 0xFF	; 255
    d03c:	0e 94 19 48 	call	0x9032	; 0x9032 <st_dword>
						st_clust(fs, fs->win, dcl);
    d040:	8d ad       	ldd	r24, Y+61	; 0x3d
    d042:	9e ad       	ldd	r25, Y+62	; 0x3e
    d044:	bc 01       	movw	r22, r24
    d046:	6b 5c       	subi	r22, 0xCB	; 203
    d048:	7f 4f       	sbci	r23, 0xFF	; 255
    d04a:	a5 01       	movw	r20, r10
    d04c:	94 01       	movw	r18, r8
    d04e:	0e 94 6e 4b 	call	0x96dc	; 0x96dc <st_clust.isra.5>
						mem_cpy(fs->win + SZDIRE, fs->win, SZDIRE); /* Create ".." entry */
    d052:	8d ad       	ldd	r24, Y+61	; 0x3d
    d054:	9e ad       	ldd	r25, Y+62	; 0x3e
    d056:	bc 01       	movw	r22, r24
    d058:	6b 5c       	subi	r22, 0xCB	; 203
    d05a:	7f 4f       	sbci	r23, 0xFF	; 255
    d05c:	40 e2       	ldi	r20, 0x20	; 32
    d05e:	50 e0       	ldi	r21, 0x00	; 0
    d060:	8b 5a       	subi	r24, 0xAB	; 171
    d062:	9f 4f       	sbci	r25, 0xFF	; 255
    d064:	0e 94 88 49 	call	0x9310	; 0x9310 <mem_cpy.part.0>
						fs->win[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
    d068:	8d ad       	ldd	r24, Y+61	; 0x3d
    d06a:	9e ad       	ldd	r25, Y+62	; 0x3e
    d06c:	fc 01       	movw	r30, r24
    d06e:	ea 5a       	subi	r30, 0xAA	; 170
    d070:	ff 4f       	sbci	r31, 0xFF	; 255
						st_clust(fs, fs->win + SZDIRE, pcl);
    d072:	10 83       	st	Z, r17
    d074:	2f 81       	ldd	r18, Y+7	; 0x07
    d076:	38 85       	ldd	r19, Y+8	; 0x08
    d078:	49 85       	ldd	r20, Y+9	; 0x09
    d07a:	5a 85       	ldd	r21, Y+10	; 0x0a
    d07c:	bc 01       	movw	r22, r24
    d07e:	6b 5a       	subi	r22, 0xAB	; 171
    d080:	7f 4f       	sbci	r23, 0xFF	; 255
    d082:	0e 94 6e 4b 	call	0x96dc	; 0x96dc <st_clust.isra.5>
						fs->wflag = 1;
    d086:	ed ad       	ldd	r30, Y+61	; 0x3d
    d088:	fe ad       	ldd	r31, Y+62	; 0x3e
    d08a:	81 e0       	ldi	r24, 0x01	; 1
					}
					res = dir_register(&dj);	/* Register the object to the parent directoy */
    d08c:	83 83       	std	Z+3, r24	; 0x03
    d08e:	ce 01       	movw	r24, r28
    d090:	01 96       	adiw	r24, 0x01	; 1
    d092:	0e 94 3a 57 	call	0xae74	; 0xae74 <dir_register>
				}
			}
			if (res == FR_OK) {
    d096:	7c 01       	movw	r14, r24
    d098:	89 2b       	or	r24, r25
    d09a:	09 f0       	breq	.+2      	; 0xd09e <f_mkdir+0x19e>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					st_dword(dj.dir + DIR_ModTime, tm);	/* Created time */
    d09c:	9c cf       	rjmp	.-200    	; 0xcfd6 <f_mkdir+0xd6>
    d09e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    d0a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    d0a2:	b3 01       	movw	r22, r6
    d0a4:	a2 01       	movw	r20, r4
    d0a6:	46 96       	adiw	r24, 0x16	; 22
    d0a8:	0e 94 19 48 	call	0x9032	; 0x9032 <st_dword>
					st_clust(fs, dj.dir, dcl);			/* Table start cluster */
    d0ac:	6b 8d       	ldd	r22, Y+27	; 0x1b
    d0ae:	7c 8d       	ldd	r23, Y+28	; 0x1c
    d0b0:	a5 01       	movw	r20, r10
    d0b2:	94 01       	movw	r18, r8
    d0b4:	8d ad       	ldd	r24, Y+61	; 0x3d
    d0b6:	9e ad       	ldd	r25, Y+62	; 0x3e
    d0b8:	0e 94 6e 4b 	call	0x96dc	; 0x96dc <st_clust.isra.5>
					dj.dir[DIR_Attr] = AM_DIR;			/* Attribute */
    d0bc:	eb 8d       	ldd	r30, Y+27	; 0x1b
    d0be:	fc 8d       	ldd	r31, Y+28	; 0x1c
    d0c0:	80 e1       	ldi	r24, 0x10	; 16
					fs->wflag = 1;
    d0c2:	83 87       	std	Z+11, r24	; 0x0b
    d0c4:	8d ad       	ldd	r24, Y+61	; 0x3d
    d0c6:	9e ad       	ldd	r25, Y+62	; 0x3e
    d0c8:	21 e0       	ldi	r18, 0x01	; 1
    d0ca:	fc 01       	movw	r30, r24
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
    d0cc:	23 83       	std	Z+3, r18	; 0x03
    d0ce:	0e 94 ce 4b 	call	0x979c	; 0x979c <sync_fs>
    d0d2:	7c 01       	movw	r14, r24
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    d0d4:	4d cf       	rjmp	.-358    	; 0xcf70 <f_mkdir+0x70>
    d0d6:	c0 5c       	subi	r28, 0xC0	; 192
    d0d8:	df 4f       	sbci	r29, 0xFF	; 255
    d0da:	e0 e1       	ldi	r30, 0x10	; 16
    d0dc:	0c 94 11 e6 	jmp	0x1cc22	; 0x1cc22 <__epilogue_restores__+0x4>

0000d0e0 <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
    d0e0:	a2 e8       	ldi	r26, 0x82	; 130
    d0e2:	b0 e0       	ldi	r27, 0x00	; 0
    d0e4:	e6 e7       	ldi	r30, 0x76	; 118
    d0e6:	f8 e6       	ldi	r31, 0x68	; 104
    d0e8:	0c 94 fc e5 	jmp	0x1cbf8	; 0x1cbf8 <__prologue_saves__+0x12>
    d0ec:	c1 58       	subi	r28, 0x81	; 129
    d0ee:	df 4f       	sbci	r29, 0xFF	; 255
    d0f0:	99 83       	std	Y+1, r25	; 0x01
    d0f2:	88 83       	st	Y, r24
    d0f4:	cf 57       	subi	r28, 0x7F	; 127
    d0f6:	d0 40       	sbci	r29, 0x00	; 0
    d0f8:	cf 57       	subi	r28, 0x7F	; 127
    d0fa:	df 4f       	sbci	r29, 0xFF	; 255
    d0fc:	79 83       	std	Y+1, r23	; 0x01
    d0fe:	68 83       	st	Y, r22
    d100:	c1 58       	subi	r28, 0x81	; 129
    d102:	d0 40       	sbci	r29, 0x00	; 0
	BYTE buf[FF_FS_EXFAT ? SZDIRE * 2 : SZDIRE], *dir;
	LBA_t sect;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
    d104:	ce 01       	movw	r24, r28
    d106:	8f 57       	subi	r24, 0x7F	; 127
    d108:	9f 4f       	sbci	r25, 0xFF	; 255
    d10a:	0e 94 30 49 	call	0x9260	; 0x9260 <get_ldnumber>
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
    d10e:	42 e0       	ldi	r20, 0x02	; 2
    d110:	be 01       	movw	r22, r28
    d112:	63 58       	subi	r22, 0x83	; 131
    d114:	7f 4f       	sbci	r23, 0xFF	; 255
    d116:	ce 01       	movw	r24, r28
    d118:	81 58       	subi	r24, 0x81	; 129
    d11a:	9f 4f       	sbci	r25, 0xFF	; 255
    d11c:	0e 94 63 4d 	call	0x9ac6	; 0x9ac6 <mount_volume>
	if (res == FR_OK) {
    d120:	00 97       	sbiw	r24, 0x00	; 0
    d122:	09 f0       	breq	.+2      	; 0xd126 <f_rename+0x46>
    d124:	ed c0       	rjmp	.+474    	; 0xd300 <f_rename+0x220>
		djo.obj.fs = fs;
    d126:	ef 96       	adiw	r28, 0x3f	; 63
    d128:	8e ad       	ldd	r24, Y+62	; 0x3e
    d12a:	9f ad       	ldd	r25, Y+63	; 0x3f
    d12c:	ef 97       	sbiw	r28, 0x3f	; 63
    d12e:	98 ab       	std	Y+48, r25	; 0x30
    d130:	8f a7       	std	Y+47, r24	; 0x2f
		INIT_NAMBUF(fs);
    d132:	80 e0       	ldi	r24, 0x00	; 0
    d134:	92 e0       	ldi	r25, 0x02	; 2
    d136:	2b d2       	rcall	.+1110   	; 0xd58e <ff_memalloc>
    d138:	6c 01       	movw	r12, r24
    d13a:	00 97       	sbiw	r24, 0x00	; 0
    d13c:	f1 f0       	breq	.+60     	; 0xd17a <f_rename+0x9a>
    d13e:	ef 96       	adiw	r28, 0x3f	; 63
    d140:	ee ad       	ldd	r30, Y+62	; 0x3e
    d142:	ff ad       	ldd	r31, Y+63	; 0x3f
    d144:	ef 97       	sbiw	r28, 0x3f	; 63
    d146:	94 87       	std	Z+12, r25	; 0x0c
    d148:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&djo, path_old);		/* Check old object */
    d14a:	c1 58       	subi	r28, 0x81	; 129
    d14c:	df 4f       	sbci	r29, 0xFF	; 255
    d14e:	68 81       	ld	r22, Y
    d150:	79 81       	ldd	r23, Y+1	; 0x01
    d152:	cf 57       	subi	r28, 0x7F	; 127
    d154:	d0 40       	sbci	r29, 0x00	; 0
    d156:	ce 01       	movw	r24, r28
    d158:	8f 96       	adiw	r24, 0x2f	; 47
    d15a:	0e 94 de 58 	call	0xb1bc	; 0xb1bc <follow_path>
    d15e:	8c 01       	movw	r16, r24
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
    d160:	89 2b       	or	r24, r25
    d162:	39 f4       	brne	.+14     	; 0xd172 <f_rename+0x92>
    d164:	67 96       	adiw	r28, 0x17	; 23
    d166:	8f ad       	ldd	r24, Y+63	; 0x3f
    d168:	67 97       	sbiw	r28, 0x17	; 23
    d16a:	80 7a       	andi	r24, 0xA0	; 160
    d16c:	49 f0       	breq	.+18     	; 0xd180 <f_rename+0xa0>
    d16e:	06 e0       	ldi	r16, 0x06	; 6
					res = sync_fs(fs);
				}
			}
/* End of the critical section */
		}
		FREE_NAMBUF();
    d170:	10 e0       	ldi	r17, 0x00	; 0
    d172:	c6 01       	movw	r24, r12
    d174:	0f d2       	rcall	.+1054   	; 0xd594 <ff_memfree>
    d176:	c8 01       	movw	r24, r16

	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
	if (res == FR_OK) {
		djo.obj.fs = fs;
		INIT_NAMBUF(fs);
    d178:	c3 c0       	rjmp	.+390    	; 0xd300 <f_rename+0x220>
    d17a:	81 e1       	ldi	r24, 0x11	; 17
    d17c:	90 e0       	ldi	r25, 0x00	; 0
    d17e:	c0 c0       	rjmp	.+384    	; 0xd300 <f_rename+0x220>
    d180:	2b 96       	adiw	r28, 0x0b	; 11
    d182:	6e ad       	ldd	r22, Y+62	; 0x3e
    d184:	7f ad       	ldd	r23, Y+63	; 0x3f
    d186:	2b 97       	sbiw	r28, 0x0b	; 11
    d188:	40 e2       	ldi	r20, 0x20	; 32
    d18a:	50 e0       	ldi	r21, 0x00	; 0
    d18c:	ce 01       	movw	r24, r28
    d18e:	83 5a       	subi	r24, 0xA3	; 163
    d190:	9f 4f       	sbci	r25, 0xFF	; 255
    d192:	0e 94 88 49 	call	0x9310	; 0x9310 <mem_cpy.part.0>
    d196:	4e e2       	ldi	r20, 0x2E	; 46
    d198:	50 e0       	ldi	r21, 0x00	; 0
    d19a:	be 01       	movw	r22, r28
    d19c:	61 5d       	subi	r22, 0xD1	; 209
    d19e:	7f 4f       	sbci	r23, 0xFF	; 255
    d1a0:	ce 01       	movw	r24, r28
    d1a2:	01 96       	adiw	r24, 0x01	; 1
    d1a4:	0e 94 88 49 	call	0x9310	; 0x9310 <mem_cpy.part.0>
			} else
#endif
			{	/* At FAT/FAT32 volume */
				mem_cpy(buf, djo.dir, SZDIRE);			/* Save directory entry of the object */
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
    d1a8:	cf 57       	subi	r28, 0x7F	; 127
    d1aa:	df 4f       	sbci	r29, 0xFF	; 255
    d1ac:	68 81       	ld	r22, Y
    d1ae:	79 81       	ldd	r23, Y+1	; 0x01
    d1b0:	c1 58       	subi	r28, 0x81	; 129
    d1b2:	d0 40       	sbci	r29, 0x00	; 0
    d1b4:	ce 01       	movw	r24, r28
    d1b6:	01 96       	adiw	r24, 0x01	; 1
    d1b8:	0e 94 de 58 	call	0xb1bc	; 0xb1bc <follow_path>
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
    d1bc:	8c 01       	movw	r16, r24
    d1be:	89 2b       	or	r24, r25
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
    d1c0:	f9 f4       	brne	.+62     	; 0xd200 <f_rename+0x120>
    d1c2:	4f 81       	ldd	r20, Y+7	; 0x07
    d1c4:	58 85       	ldd	r21, Y+8	; 0x08
    d1c6:	69 85       	ldd	r22, Y+9	; 0x09
    d1c8:	7a 85       	ldd	r23, Y+10	; 0x0a
    d1ca:	8d a9       	ldd	r24, Y+53	; 0x35
    d1cc:	9e a9       	ldd	r25, Y+54	; 0x36
    d1ce:	af a9       	ldd	r26, Y+55	; 0x37
    d1d0:	b8 ad       	ldd	r27, Y+56	; 0x38
    d1d2:	48 17       	cp	r20, r24
    d1d4:	59 07       	cpc	r21, r25
    d1d6:	6a 07       	cpc	r22, r26
    d1d8:	7b 07       	cpc	r23, r27
    d1da:	09 f0       	breq	.+2      	; 0xd1de <f_rename+0xfe>
    d1dc:	8b c0       	rjmp	.+278    	; 0xd2f4 <f_rename+0x214>
    d1de:	4f 85       	ldd	r20, Y+15	; 0x0f
    d1e0:	58 89       	ldd	r21, Y+16	; 0x10
    d1e2:	69 89       	ldd	r22, Y+17	; 0x11
    d1e4:	7a 89       	ldd	r23, Y+18	; 0x12
    d1e6:	21 96       	adiw	r28, 0x01	; 1
    d1e8:	8c ad       	ldd	r24, Y+60	; 0x3c
    d1ea:	9d ad       	ldd	r25, Y+61	; 0x3d
    d1ec:	ae ad       	ldd	r26, Y+62	; 0x3e
    d1ee:	bf ad       	ldd	r27, Y+63	; 0x3f
    d1f0:	21 97       	sbiw	r28, 0x01	; 1
    d1f2:	48 17       	cp	r20, r24
    d1f4:	59 07       	cpc	r21, r25
    d1f6:	6a 07       	cpc	r22, r26
    d1f8:	7b 07       	cpc	r23, r27
    d1fa:	09 f0       	breq	.+2      	; 0xd1fe <f_rename+0x11e>
    d1fc:	7b c0       	rjmp	.+246    	; 0xd2f4 <f_rename+0x214>
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
    d1fe:	04 c0       	rjmp	.+8      	; 0xd208 <f_rename+0x128>
    d200:	04 30       	cpi	r16, 0x04	; 4
    d202:	11 05       	cpc	r17, r1
    d204:	09 f0       	breq	.+2      	; 0xd208 <f_rename+0x128>
					res = dir_register(&djn);			/* Register the new entry */
    d206:	b5 cf       	rjmp	.-150    	; 0xd172 <f_rename+0x92>
    d208:	ce 01       	movw	r24, r28
    d20a:	01 96       	adiw	r24, 0x01	; 1
    d20c:	0e 94 3a 57 	call	0xae74	; 0xae74 <dir_register>
					if (res == FR_OK) {
    d210:	8c 01       	movw	r16, r24
    d212:	89 2b       	or	r24, r25
    d214:	09 f0       	breq	.+2      	; 0xd218 <f_rename+0x138>
						dir = djn.dir;					/* Copy directory entry of the object except name */
    d216:	ad cf       	rjmp	.-166    	; 0xd172 <f_rename+0x92>
    d218:	0b 8d       	ldd	r16, Y+27	; 0x1b
    d21a:	1c 8d       	ldd	r17, Y+28	; 0x1c
    d21c:	6d e5       	ldi	r22, 0x5D	; 93
    d21e:	70 e0       	ldi	r23, 0x00	; 0
    d220:	6c 0f       	add	r22, r28
    d222:	7d 1f       	adc	r23, r29
    d224:	63 5f       	subi	r22, 0xF3	; 243
    d226:	7f 4f       	sbci	r23, 0xFF	; 255
    d228:	43 e1       	ldi	r20, 0x13	; 19
    d22a:	50 e0       	ldi	r21, 0x00	; 0
    d22c:	c8 01       	movw	r24, r16
    d22e:	0d 96       	adiw	r24, 0x0d	; 13
    d230:	0e 94 88 49 	call	0x9310	; 0x9310 <mem_cpy.part.0>
						mem_cpy(dir + 13, buf + 13, SZDIRE - 13);
						dir[DIR_Attr] = buf[DIR_Attr];
    d234:	a9 96       	adiw	r28, 0x29	; 41
    d236:	8f ad       	ldd	r24, Y+63	; 0x3f
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
    d238:	a9 97       	sbiw	r28, 0x29	; 41
    d23a:	84 ff       	sbrs	r24, 4
    d23c:	80 62       	ori	r24, 0x20	; 32
    d23e:	f8 01       	movw	r30, r16
						fs->wflag = 1;
    d240:	83 87       	std	Z+11, r24	; 0x0b
    d242:	ef 96       	adiw	r28, 0x3f	; 63
    d244:	ee ac       	ldd	r14, Y+62	; 0x3e
    d246:	ff ac       	ldd	r15, Y+63	; 0x3f
    d248:	ef 97       	sbiw	r28, 0x3f	; 63
    d24a:	bb 24       	eor	r11, r11
    d24c:	b3 94       	inc	r11
    d24e:	f7 01       	movw	r30, r14
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
    d250:	b3 82       	std	Z+3, r11	; 0x03
    d252:	f8 01       	movw	r30, r16
    d254:	83 85       	ldd	r24, Z+11	; 0x0b
    d256:	84 ff       	sbrs	r24, 4
    d258:	3d c0       	rjmp	.+122    	; 0xd2d4 <f_rename+0x1f4>
    d25a:	4d a9       	ldd	r20, Y+53	; 0x35
    d25c:	5e a9       	ldd	r21, Y+54	; 0x36
    d25e:	6f a9       	ldd	r22, Y+55	; 0x37
    d260:	78 ad       	ldd	r23, Y+56	; 0x38
    d262:	8f 81       	ldd	r24, Y+7	; 0x07
    d264:	98 85       	ldd	r25, Y+8	; 0x08
    d266:	a9 85       	ldd	r26, Y+9	; 0x09
    d268:	ba 85       	ldd	r27, Y+10	; 0x0a
    d26a:	48 17       	cp	r20, r24
    d26c:	59 07       	cpc	r21, r25
    d26e:	6a 07       	cpc	r22, r26
    d270:	7b 07       	cpc	r23, r27
							sect = clst2sect(fs, ld_clust(fs, dir));
    d272:	81 f1       	breq	.+96     	; 0xd2d4 <f_rename+0x1f4>
    d274:	b8 01       	movw	r22, r16
    d276:	f7 01       	movw	r30, r14
    d278:	80 81       	ld	r24, Z
    d27a:	0e 94 59 4b 	call	0x96b2	; 0x96b2 <ld_clust.isra.4>
    d27e:	ab 01       	movw	r20, r22
    d280:	bc 01       	movw	r22, r24
    d282:	c7 01       	movw	r24, r14
    d284:	0e 94 bd 48 	call	0x917a	; 0x917a <clst2sect>
    d288:	ab 01       	movw	r20, r22
							if (sect == 0) {
    d28a:	bc 01       	movw	r22, r24
    d28c:	41 15       	cp	r20, r1
    d28e:	51 05       	cpc	r21, r1
    d290:	61 05       	cpc	r22, r1
    d292:	71 05       	cpc	r23, r1
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
    d294:	91 f1       	breq	.+100    	; 0xd2fa <f_rename+0x21a>
    d296:	c7 01       	movw	r24, r14
    d298:	0e 94 e8 4c 	call	0x99d0	; 0x99d0 <move_window>
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
								if (res == FR_OK && dir[1] == '.') {
    d29c:	8c 01       	movw	r16, r24
    d29e:	89 2b       	or	r24, r25
    d2a0:	09 f0       	breq	.+2      	; 0xd2a4 <f_rename+0x1c4>
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    d2a2:	67 cf       	rjmp	.-306    	; 0xd172 <f_rename+0x92>
    d2a4:	ef 96       	adiw	r28, 0x3f	; 63
    d2a6:	8e ad       	ldd	r24, Y+62	; 0x3e
    d2a8:	9f ad       	ldd	r25, Y+63	; 0x3f
								if (res == FR_OK && dir[1] == '.') {
    d2aa:	ef 97       	sbiw	r28, 0x3f	; 63
    d2ac:	fc 01       	movw	r30, r24
    d2ae:	ea 5a       	subi	r30, 0xAA	; 170
    d2b0:	ff 4f       	sbci	r31, 0xFF	; 255
    d2b2:	20 81       	ld	r18, Z
    d2b4:	2e 32       	cpi	r18, 0x2E	; 46
									st_clust(fs, dir, djn.obj.sclust);
    d2b6:	71 f4       	brne	.+28     	; 0xd2d4 <f_rename+0x1f4>
    d2b8:	2f 81       	ldd	r18, Y+7	; 0x07
    d2ba:	38 85       	ldd	r19, Y+8	; 0x08
    d2bc:	49 85       	ldd	r20, Y+9	; 0x09
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    d2be:	5a 85       	ldd	r21, Y+10	; 0x0a
    d2c0:	bc 01       	movw	r22, r24
    d2c2:	6b 5a       	subi	r22, 0xAB	; 171
								if (res == FR_OK && dir[1] == '.') {
									st_clust(fs, dir, djn.obj.sclust);
    d2c4:	7f 4f       	sbci	r23, 0xFF	; 255
    d2c6:	0e 94 6e 4b 	call	0x96dc	; 0x96dc <st_clust.isra.5>
									fs->wflag = 1;
    d2ca:	ef 96       	adiw	r28, 0x3f	; 63
    d2cc:	ee ad       	ldd	r30, Y+62	; 0x3e
    d2ce:	ff ad       	ldd	r31, Y+63	; 0x3f
    d2d0:	ef 97       	sbiw	r28, 0x3f	; 63
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&djo);		/* Remove old entry */
    d2d2:	b3 82       	std	Z+3, r11	; 0x03
    d2d4:	ce 01       	movw	r24, r28
    d2d6:	8f 96       	adiw	r24, 0x2f	; 47
    d2d8:	0e 94 e4 55 	call	0xabc8	; 0xabc8 <dir_remove>
				if (res == FR_OK) {
    d2dc:	8c 01       	movw	r16, r24
    d2de:	89 2b       	or	r24, r25
    d2e0:	09 f0       	breq	.+2      	; 0xd2e4 <f_rename+0x204>
					res = sync_fs(fs);
    d2e2:	47 cf       	rjmp	.-370    	; 0xd172 <f_rename+0x92>
    d2e4:	ef 96       	adiw	r28, 0x3f	; 63
    d2e6:	8e ad       	ldd	r24, Y+62	; 0x3e
    d2e8:	9f ad       	ldd	r25, Y+63	; 0x3f
    d2ea:	ef 97       	sbiw	r28, 0x3f	; 63
    d2ec:	0e 94 ce 4b 	call	0x979c	; 0x979c <sync_fs>
    d2f0:	8c 01       	movw	r16, r24
    d2f2:	3f cf       	rjmp	.-386    	; 0xd172 <f_rename+0x92>
    d2f4:	08 e0       	ldi	r16, 0x08	; 8
    d2f6:	10 e0       	ldi	r17, 0x00	; 0
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
						fs->wflag = 1;
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
							sect = clst2sect(fs, ld_clust(fs, dir));
							if (sect == 0) {
								res = FR_INT_ERR;
    d2f8:	3c cf       	rjmp	.-392    	; 0xd172 <f_rename+0x92>
    d2fa:	02 e0       	ldi	r16, 0x02	; 2
    d2fc:	10 e0       	ldi	r17, 0x00	; 0
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    d2fe:	39 cf       	rjmp	.-398    	; 0xd172 <f_rename+0x92>
    d300:	ce 57       	subi	r28, 0x7E	; 126
    d302:	df 4f       	sbci	r29, 0xFF	; 255
    d304:	e9 e0       	ldi	r30, 0x09	; 9
    d306:	0c 94 18 e6 	jmp	0x1cc30	; 0x1cc30 <__epilogue_restores__+0x12>

0000d30a <f_chmod>:
FRESULT f_chmod (
	const TCHAR* path,	/* Pointer to the file path */
	BYTE attr,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
    d30a:	a2 e3       	ldi	r26, 0x32	; 50
    d30c:	b0 e0       	ldi	r27, 0x00	; 0
    d30e:	eb e8       	ldi	r30, 0x8B	; 139
    d310:	f9 e6       	ldi	r31, 0x69	; 105
    d312:	0c 94 fd e5 	jmp	0x1cbfa	; 0x1cbfa <__prologue_saves__+0x14>
    d316:	9a ab       	std	Y+50, r25	; 0x32
    d318:	89 ab       	std	Y+49, r24	; 0x31
    d31a:	e6 2e       	mov	r14, r22
    d31c:	f4 2e       	mov	r15, r20
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    d31e:	42 e0       	ldi	r20, 0x02	; 2
    d320:	be 01       	movw	r22, r28
    d322:	61 5d       	subi	r22, 0xD1	; 209
    d324:	7f 4f       	sbci	r23, 0xFF	; 255
    d326:	ce 01       	movw	r24, r28
    d328:	c1 96       	adiw	r24, 0x31	; 49
    d32a:	0e 94 63 4d 	call	0x9ac6	; 0x9ac6 <mount_volume>
	if (res == FR_OK) {
    d32e:	00 97       	sbiw	r24, 0x00	; 0
    d330:	a9 f5       	brne	.+106    	; 0xd39c <f_chmod+0x92>
		dj.obj.fs = fs;
    d332:	8f a5       	ldd	r24, Y+47	; 0x2f
    d334:	98 a9       	ldd	r25, Y+48	; 0x30
    d336:	9a 83       	std	Y+2, r25	; 0x02
    d338:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    d33a:	80 e0       	ldi	r24, 0x00	; 0
    d33c:	92 e0       	ldi	r25, 0x02	; 2
    d33e:	27 d1       	rcall	.+590    	; 0xd58e <ff_memalloc>
    d340:	6c 01       	movw	r12, r24
    d342:	00 97       	sbiw	r24, 0x00	; 0
    d344:	b1 f0       	breq	.+44     	; 0xd372 <f_chmod+0x68>
    d346:	ef a5       	ldd	r30, Y+47	; 0x2f
    d348:	f8 a9       	ldd	r31, Y+48	; 0x30
    d34a:	94 87       	std	Z+12, r25	; 0x0c
    d34c:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);	/* Follow the file path */
    d34e:	69 a9       	ldd	r22, Y+49	; 0x31
    d350:	7a a9       	ldd	r23, Y+50	; 0x32
    d352:	ce 01       	movw	r24, r28
    d354:	01 96       	adiw	r24, 0x01	; 1
    d356:	0e 94 de 58 	call	0xb1bc	; 0xb1bc <follow_path>
    d35a:	8c 01       	movw	r16, r24
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
    d35c:	89 2b       	or	r24, r25
    d35e:	29 f4       	brne	.+10     	; 0xd36a <f_chmod+0x60>
    d360:	88 a5       	ldd	r24, Y+40	; 0x28
    d362:	80 7a       	andi	r24, 0xA0	; 160
    d364:	49 f0       	breq	.+18     	; 0xd378 <f_chmod+0x6e>
    d366:	06 e0       	ldi	r16, 0x06	; 6
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    d368:	10 e0       	ldi	r17, 0x00	; 0
    d36a:	c6 01       	movw	r24, r12
    d36c:	13 d1       	rcall	.+550    	; 0xd594 <ff_memfree>
    d36e:	c8 01       	movw	r24, r16


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    d370:	15 c0       	rjmp	.+42     	; 0xd39c <f_chmod+0x92>
    d372:	81 e1       	ldi	r24, 0x11	; 17
    d374:	90 e0       	ldi	r25, 0x00	; 0
				fs->dirbuf[XDIR_Attr] = (attr & mask) | (fs->dirbuf[XDIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
				res = store_xdir(&dj);
			} else
#endif
			{
				dj.dir[DIR_Attr] = (attr & mask) | (dj.dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
    d376:	12 c0       	rjmp	.+36     	; 0xd39c <f_chmod+0x92>
    d378:	eb 8d       	ldd	r30, Y+27	; 0x1b
    d37a:	fc 8d       	ldd	r31, Y+28	; 0x1c
    d37c:	83 85       	ldd	r24, Z+11	; 0x0b
    d37e:	6e 2d       	mov	r22, r14
    d380:	68 27       	eor	r22, r24
    d382:	6f 21       	and	r22, r15
    d384:	67 72       	andi	r22, 0x27	; 39
    d386:	68 27       	eor	r22, r24
				fs->wflag = 1;
    d388:	63 87       	std	Z+11, r22	; 0x0b
    d38a:	8f a5       	ldd	r24, Y+47	; 0x2f
    d38c:	98 a9       	ldd	r25, Y+48	; 0x30
    d38e:	21 e0       	ldi	r18, 0x01	; 1
    d390:	fc 01       	movw	r30, r24
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
    d392:	23 83       	std	Z+3, r18	; 0x03
    d394:	0e 94 ce 4b 	call	0x979c	; 0x979c <sync_fs>
    d398:	8c 01       	movw	r16, r24
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    d39a:	e7 cf       	rjmp	.-50     	; 0xd36a <f_chmod+0x60>
    d39c:	e2 96       	adiw	r28, 0x32	; 50
    d39e:	e8 e0       	ldi	r30, 0x08	; 8
    d3a0:	0c 94 19 e6 	jmp	0x1cc32	; 0x1cc32 <__epilogue_restores__+0x14>

0000d3a4 <f_utime>:

FRESULT f_utime (
	const TCHAR* path,	/* Pointer to the file/directory name */
	const FILINFO* fno	/* Pointer to the timestamp to be set */
)
{
    d3a4:	a2 e3       	ldi	r26, 0x32	; 50
    d3a6:	b0 e0       	ldi	r27, 0x00	; 0
    d3a8:	e8 ed       	ldi	r30, 0xD8	; 216
    d3aa:	f9 e6       	ldi	r31, 0x69	; 105
    d3ac:	0c 94 fd e5 	jmp	0x1cbfa	; 0x1cbfa <__prologue_saves__+0x14>
    d3b0:	9a ab       	std	Y+50, r25	; 0x32
    d3b2:	89 ab       	std	Y+49, r24	; 0x31
    d3b4:	6b 01       	movw	r12, r22
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    d3b6:	42 e0       	ldi	r20, 0x02	; 2
    d3b8:	be 01       	movw	r22, r28
    d3ba:	61 5d       	subi	r22, 0xD1	; 209
    d3bc:	7f 4f       	sbci	r23, 0xFF	; 255
    d3be:	ce 01       	movw	r24, r28
    d3c0:	c1 96       	adiw	r24, 0x31	; 49
    d3c2:	0e 94 63 4d 	call	0x9ac6	; 0x9ac6 <mount_volume>
	if (res == FR_OK) {
    d3c6:	00 97       	sbiw	r24, 0x00	; 0
    d3c8:	09 f0       	breq	.+2      	; 0xd3cc <f_utime+0x28>
    d3ca:	41 c0       	rjmp	.+130    	; 0xd44e <f_utime+0xaa>
		dj.obj.fs = fs;
    d3cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    d3ce:	98 a9       	ldd	r25, Y+48	; 0x30
    d3d0:	9a 83       	std	Y+2, r25	; 0x02
    d3d2:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    d3d4:	80 e0       	ldi	r24, 0x00	; 0
    d3d6:	92 e0       	ldi	r25, 0x02	; 2
    d3d8:	da d0       	rcall	.+436    	; 0xd58e <ff_memalloc>
    d3da:	7c 01       	movw	r14, r24
    d3dc:	00 97       	sbiw	r24, 0x00	; 0
    d3de:	b1 f0       	breq	.+44     	; 0xd40c <f_utime+0x68>
    d3e0:	ef a5       	ldd	r30, Y+47	; 0x2f
    d3e2:	f8 a9       	ldd	r31, Y+48	; 0x30
    d3e4:	94 87       	std	Z+12, r25	; 0x0c
    d3e6:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);	/* Follow the file path */
    d3e8:	69 a9       	ldd	r22, Y+49	; 0x31
    d3ea:	7a a9       	ldd	r23, Y+50	; 0x32
    d3ec:	ce 01       	movw	r24, r28
    d3ee:	01 96       	adiw	r24, 0x01	; 1
    d3f0:	0e 94 de 58 	call	0xb1bc	; 0xb1bc <follow_path>
    d3f4:	8c 01       	movw	r16, r24
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
    d3f6:	89 2b       	or	r24, r25
    d3f8:	29 f4       	brne	.+10     	; 0xd404 <f_utime+0x60>
    d3fa:	88 a5       	ldd	r24, Y+40	; 0x28
    d3fc:	80 7a       	andi	r24, 0xA0	; 160
    d3fe:	49 f0       	breq	.+18     	; 0xd412 <f_utime+0x6e>
    d400:	06 e0       	ldi	r16, 0x06	; 6
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    d402:	10 e0       	ldi	r17, 0x00	; 0
    d404:	c7 01       	movw	r24, r14
    d406:	c6 d0       	rcall	.+396    	; 0xd594 <ff_memfree>
    d408:	c8 01       	movw	r24, r16


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    d40a:	21 c0       	rjmp	.+66     	; 0xd44e <f_utime+0xaa>
    d40c:	81 e1       	ldi	r24, 0x11	; 17
    d40e:	90 e0       	ldi	r25, 0x00	; 0
				st_dword(fs->dirbuf + XDIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
				res = store_xdir(&dj);
			} else
#endif
			{
				st_dword(dj.dir + DIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
    d410:	1e c0       	rjmp	.+60     	; 0xd44e <f_utime+0xaa>
    d412:	f6 01       	movw	r30, r12
    d414:	44 81       	ldd	r20, Z+4	; 0x04
    d416:	55 81       	ldd	r21, Z+5	; 0x05
    d418:	60 e0       	ldi	r22, 0x00	; 0
    d41a:	70 e0       	ldi	r23, 0x00	; 0
    d41c:	ba 01       	movw	r22, r20
    d41e:	55 27       	eor	r21, r21
    d420:	44 27       	eor	r20, r20
    d422:	86 81       	ldd	r24, Z+6	; 0x06
    d424:	97 81       	ldd	r25, Z+7	; 0x07
    d426:	a0 e0       	ldi	r26, 0x00	; 0
    d428:	b0 e0       	ldi	r27, 0x00	; 0
    d42a:	48 2b       	or	r20, r24
    d42c:	59 2b       	or	r21, r25
    d42e:	6a 2b       	or	r22, r26
    d430:	7b 2b       	or	r23, r27
    d432:	8b 8d       	ldd	r24, Y+27	; 0x1b
    d434:	9c 8d       	ldd	r25, Y+28	; 0x1c
    d436:	46 96       	adiw	r24, 0x16	; 22
    d438:	0e 94 19 48 	call	0x9032	; 0x9032 <st_dword>
				fs->wflag = 1;
    d43c:	8f a5       	ldd	r24, Y+47	; 0x2f
    d43e:	98 a9       	ldd	r25, Y+48	; 0x30
    d440:	21 e0       	ldi	r18, 0x01	; 1
    d442:	fc 01       	movw	r30, r24
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
    d444:	23 83       	std	Z+3, r18	; 0x03
    d446:	0e 94 ce 4b 	call	0x979c	; 0x979c <sync_fs>
    d44a:	8c 01       	movw	r16, r24
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    d44c:	db cf       	rjmp	.-74     	; 0xd404 <f_utime+0x60>
    d44e:	e2 96       	adiw	r28, 0x32	; 50
    d450:	e8 e0       	ldi	r30, 0x08	; 8
    d452:	0c 94 19 e6 	jmp	0x1cc32	; 0x1cc32 <__epilogue_restores__+0x14>

0000d456 <f_getlabel>:
FRESULT f_getlabel (
	const TCHAR* path,	/* Logical drive number */
	TCHAR* label,		/* Buffer to store the volume label */
	DWORD* vsn			/* Variable to store the volume serial number */
)
{
    d456:	a2 e3       	ldi	r26, 0x32	; 50
    d458:	b0 e0       	ldi	r27, 0x00	; 0
    d45a:	e1 e3       	ldi	r30, 0x31	; 49
    d45c:	fa e6       	ldi	r31, 0x6A	; 106
    d45e:	0c 94 f9 e5 	jmp	0x1cbf2	; 0x1cbf2 <__prologue_saves__+0xc>
    d462:	9a ab       	std	Y+50, r25	; 0x32
    d464:	89 ab       	std	Y+49, r24	; 0x31
    d466:	6b 01       	movw	r12, r22
    d468:	5a 01       	movw	r10, r20
	FATFS *fs;
	UINT si, di;
	WCHAR wc;

	/* Get logical drive */
	res = mount_volume(&path, &fs, 0);
    d46a:	40 e0       	ldi	r20, 0x00	; 0
    d46c:	be 01       	movw	r22, r28
    d46e:	61 5d       	subi	r22, 0xD1	; 209
    d470:	7f 4f       	sbci	r23, 0xFF	; 255
    d472:	ce 01       	movw	r24, r28
    d474:	c1 96       	adiw	r24, 0x31	; 49
    d476:	0e 94 63 4d 	call	0x9ac6	; 0x9ac6 <mount_volume>
    d47a:	7c 01       	movw	r14, r24

	/* Get volume label */
	if (res == FR_OK && label) {
    d47c:	89 2b       	or	r24, r25
    d47e:	09 f0       	breq	.+2      	; 0xd482 <f_getlabel+0x2c>
    d480:	81 c0       	rjmp	.+258    	; 0xd584 <f_getlabel+0x12e>
    d482:	c1 14       	cp	r12, r1
    d484:	d1 04       	cpc	r13, r1
    d486:	09 f4       	brne	.+2      	; 0xd48a <f_getlabel+0x34>
    d488:	53 c0       	rjmp	.+166    	; 0xd530 <f_getlabel+0xda>
		dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
    d48a:	8f a5       	ldd	r24, Y+47	; 0x2f
    d48c:	98 a9       	ldd	r25, Y+48	; 0x30
    d48e:	9a 83       	std	Y+2, r25	; 0x02
    d490:	89 83       	std	Y+1, r24	; 0x01
    d492:	1f 82       	std	Y+7, r1	; 0x07
    d494:	18 86       	std	Y+8, r1	; 0x08
    d496:	19 86       	std	Y+9, r1	; 0x09
    d498:	1a 86       	std	Y+10, r1	; 0x0a
		res = dir_sdi(&dj, 0);
    d49a:	40 e0       	ldi	r20, 0x00	; 0
    d49c:	50 e0       	ldi	r21, 0x00	; 0
    d49e:	ba 01       	movw	r22, r20
    d4a0:	ce 01       	movw	r24, r28
    d4a2:	01 96       	adiw	r24, 0x01	; 1
    d4a4:	0e 94 78 51 	call	0xa2f0	; 0xa2f0 <dir_sdi>
		if (res == FR_OK) {
    d4a8:	00 97       	sbiw	r24, 0x00	; 0
    d4aa:	e9 f5       	brne	.+122    	; 0xd526 <f_getlabel+0xd0>
		 	res = DIR_READ_LABEL(&dj);		/* Find a volume label entry */
    d4ac:	61 e0       	ldi	r22, 0x01	; 1
    d4ae:	70 e0       	ldi	r23, 0x00	; 0
    d4b0:	ce 01       	movw	r24, r28
    d4b2:	01 96       	adiw	r24, 0x01	; 1
    d4b4:	0e 94 12 55 	call	0xaa24	; 0xaa24 <dir_read>
		 	if (res == FR_OK) {
    d4b8:	00 97       	sbiw	r24, 0x00	; 0
    d4ba:	a9 f5       	brne	.+106    	; 0xd526 <f_getlabel+0xd0>
    d4bc:	00 e0       	ldi	r16, 0x00	; 0
    d4be:	10 e0       	ldi	r17, 0x00	; 0
    d4c0:	80 e0       	ldi	r24, 0x00	; 0
    d4c2:	90 e0       	ldi	r25, 0x00	; 0
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry */
					while (si < 11) {
						wc = dj.dir[si++];
    d4c4:	4c 01       	movw	r8, r24
    d4c6:	2f ef       	ldi	r18, 0xFF	; 255
    d4c8:	82 1a       	sub	r8, r18
    d4ca:	92 0a       	sbc	r9, r18
    d4cc:	2b 8d       	ldd	r18, Y+27	; 0x1b
    d4ce:	3c 8d       	ldd	r19, Y+28	; 0x1c
    d4d0:	f9 01       	movw	r30, r18
    d4d2:	e8 0f       	add	r30, r24
    d4d4:	f9 1f       	adc	r31, r25
    d4d6:	80 81       	ld	r24, Z
#if FF_USE_LFN && FF_LFN_UNICODE >= 1 	/* Unicode output */
						if (dbc_1st((BYTE)wc) && si < 11) wc = wc << 8 | dj.dir[si++];	/* Is it a DBC? */
						wc = ff_oem2uni(wc, CODEPAGE);					/* Convert it into Unicode */
    d4d8:	65 eb       	ldi	r22, 0xB5	; 181
    d4da:	71 e0       	ldi	r23, 0x01	; 1
    d4dc:	90 e0       	ldi	r25, 0x00	; 0
    d4de:	90 d0       	rcall	.+288    	; 0xd600 <ff_oem2uni>
						if (wc != 0) wc = put_utf(wc, &label[di], 4);	/* Put it in Unicode */
    d4e0:	00 97       	sbiw	r24, 0x00	; 0
    d4e2:	19 f4       	brne	.+6      	; 0xd4ea <f_getlabel+0x94>
						if (wc == 0) { di = 0; break; }
    d4e4:	00 e0       	ldi	r16, 0x00	; 0
    d4e6:	10 e0       	ldi	r17, 0x00	; 0
    d4e8:	13 c0       	rjmp	.+38     	; 0xd510 <f_getlabel+0xba>
					while (si < 11) {
						wc = dj.dir[si++];
#if FF_USE_LFN && FF_LFN_UNICODE >= 1 	/* Unicode output */
						if (dbc_1st((BYTE)wc) && si < 11) wc = wc << 8 | dj.dir[si++];	/* Is it a DBC? */
						wc = ff_oem2uni(wc, CODEPAGE);					/* Convert it into Unicode */
						if (wc != 0) wc = put_utf(wc, &label[di], 4);	/* Put it in Unicode */
    d4ea:	bc 01       	movw	r22, r24
    d4ec:	80 e0       	ldi	r24, 0x00	; 0
    d4ee:	90 e0       	ldi	r25, 0x00	; 0
    d4f0:	24 e0       	ldi	r18, 0x04	; 4
    d4f2:	30 e0       	ldi	r19, 0x00	; 0
    d4f4:	a6 01       	movw	r20, r12
    d4f6:	40 0f       	add	r20, r16
    d4f8:	51 1f       	adc	r21, r17
    d4fa:	0e 94 93 49 	call	0x9326	; 0x9326 <put_utf>
    d4fe:	90 e0       	ldi	r25, 0x00	; 0
						if (wc == 0) { di = 0; break; }
    d500:	00 97       	sbiw	r24, 0x00	; 0
    d502:	81 f3       	breq	.-32     	; 0xd4e4 <f_getlabel+0x8e>
						di += wc;
    d504:	08 0f       	add	r16, r24
    d506:	19 1f       	adc	r17, r25
    d508:	c4 01       	movw	r24, r8
					label[di] = 0;
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry */
					while (si < 11) {
    d50a:	8b 30       	cpi	r24, 0x0B	; 11
    d50c:	91 05       	cpc	r25, r1
    d50e:	d1 f6       	brne	.-76     	; 0xd4c4 <f_getlabel+0x6e>
    d510:	f6 01       	movw	r30, r12
    d512:	e0 0f       	add	r30, r16
    d514:	f1 1f       	adc	r31, r17
#else									/* ANSI/OEM output */
						label[di++] = (TCHAR)wc;
#endif
					}
					do {				/* Truncate trailing spaces */
						label[di] = 0;
    d516:	10 82       	st	Z, r1
						if (di == 0) break;
    d518:	ce 16       	cp	r12, r30
    d51a:	df 06       	cpc	r13, r31
    d51c:	49 f0       	breq	.+18     	; 0xd530 <f_getlabel+0xda>
					} while (label[--di] == ' ');
    d51e:	82 91       	ld	r24, -Z
    d520:	80 32       	cpi	r24, 0x20	; 32
    d522:	c9 f3       	breq	.-14     	; 0xd516 <f_getlabel+0xc0>
    d524:	05 c0       	rjmp	.+10     	; 0xd530 <f_getlabel+0xda>
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    d526:	84 30       	cpi	r24, 0x04	; 4
    d528:	91 05       	cpc	r25, r1
    d52a:	59 f5       	brne	.+86     	; 0xd582 <f_getlabel+0x12c>
			label[0] = 0;
    d52c:	f6 01       	movw	r30, r12
    d52e:	10 82       	st	Z, r1
			res = FR_OK;
		}
	}

	/* Get volume serial number */
	if (res == FR_OK && vsn) {
    d530:	a1 14       	cp	r10, r1
    d532:	b1 04       	cpc	r11, r1
    d534:	39 f1       	breq	.+78     	; 0xd584 <f_getlabel+0x12e>
		res = move_window(fs, fs->volbase);
    d536:	8f a5       	ldd	r24, Y+47	; 0x2f
    d538:	98 a9       	ldd	r25, Y+48	; 0x30
    d53a:	fc 01       	movw	r30, r24
    d53c:	41 a1       	ldd	r20, Z+33	; 0x21
    d53e:	52 a1       	ldd	r21, Z+34	; 0x22
    d540:	63 a1       	ldd	r22, Z+35	; 0x23
    d542:	74 a1       	ldd	r23, Z+36	; 0x24
    d544:	0e 94 e8 4c 	call	0x99d0	; 0x99d0 <move_window>
    d548:	7c 01       	movw	r14, r24
		if (res == FR_OK) {
    d54a:	89 2b       	or	r24, r25
    d54c:	d9 f4       	brne	.+54     	; 0xd584 <f_getlabel+0x12e>
			switch (fs->fs_type) {
    d54e:	ef a5       	ldd	r30, Y+47	; 0x2f
    d550:	f8 a9       	ldd	r31, Y+48	; 0x30
    d552:	80 81       	ld	r24, Z
    d554:	83 30       	cpi	r24, 0x03	; 3
    d556:	29 f0       	breq	.+10     	; 0xd562 <f_getlabel+0x10c>
    d558:	84 30       	cpi	r24, 0x04	; 4
    d55a:	31 f0       	breq	.+12     	; 0xd568 <f_getlabel+0x112>

			case FS_FAT32:
				di = BS_VolID32; break;

			default:
				di = BS_VolID;
    d55c:	87 e2       	ldi	r24, 0x27	; 39
    d55e:	90 e0       	ldi	r25, 0x00	; 0
    d560:	05 c0       	rjmp	.+10     	; 0xd56c <f_getlabel+0x116>
			switch (fs->fs_type) {
			case FS_EXFAT:
				di = BPB_VolIDEx; break;

			case FS_FAT32:
				di = BS_VolID32; break;
    d562:	83 e4       	ldi	r24, 0x43	; 67
    d564:	90 e0       	ldi	r25, 0x00	; 0
    d566:	02 c0       	rjmp	.+4      	; 0xd56c <f_getlabel+0x116>
	if (res == FR_OK && vsn) {
		res = move_window(fs, fs->volbase);
		if (res == FR_OK) {
			switch (fs->fs_type) {
			case FS_EXFAT:
				di = BPB_VolIDEx; break;
    d568:	84 e6       	ldi	r24, 0x64	; 100
    d56a:	90 e0       	ldi	r25, 0x00	; 0
				di = BS_VolID32; break;

			default:
				di = BS_VolID;
			}
			*vsn = ld_dword(fs->win + di);
    d56c:	f5 96       	adiw	r30, 0x35	; 53
    d56e:	8e 0f       	add	r24, r30
    d570:	9f 1f       	adc	r25, r31
    d572:	0e 94 04 48 	call	0x9008	; 0x9008 <ld_dword>
    d576:	f5 01       	movw	r30, r10
    d578:	60 83       	st	Z, r22
    d57a:	71 83       	std	Z+1, r23	; 0x01
    d57c:	82 83       	std	Z+2, r24	; 0x02
    d57e:	93 83       	std	Z+3, r25	; 0x03
    d580:	01 c0       	rjmp	.+2      	; 0xd584 <f_getlabel+0x12e>
						if (di == 0) break;
					} while (label[--di] == ' ');
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    d582:	7c 01       	movw	r14, r24
			*vsn = ld_dword(fs->win + di);
		}
	}

	LEAVE_FF(fs, res);
}
    d584:	c7 01       	movw	r24, r14
    d586:	e2 96       	adiw	r28, 0x32	; 50
    d588:	ec e0       	ldi	r30, 0x0C	; 12
    d58a:	0c 94 15 e6 	jmp	0x1cc2a	; 0x1cc2a <__epilogue_restores__+0xc>

0000d58e <ff_memalloc>:

void* ff_memalloc (	/* Returns pointer to the allocated memory block (null if not enough core) */
	UINT msize		/* Number of bytes to allocate */
)
{
	return safemalloc(msize);	/* Allocate a new memory block with POSIX API */
    d58e:	0c 94 b1 29 	jmp	0x5362	; 0x5362 <safemalloc>
}
    d592:	08 95       	ret

0000d594 <ff_memfree>:

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free (nothing to do if null) */
)
{
	safefree(mblock);	/* Free the memory block with POSIX API */
    d594:	0c 94 d2 29 	jmp	0x53a4	; 0x53a4 <safefree>
    d598:	08 95       	ret

0000d59a <ff_uni2oem>:
#if FF_CODE_PAGE != 0 && FF_CODE_PAGE < 900
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
    d59a:	cf 92       	push	r12
    d59c:	df 92       	push	r13
    d59e:	ef 92       	push	r14
    d5a0:	ff 92       	push	r15
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (uni < 0x80) {	/* ASCII? */
    d5a2:	60 38       	cpi	r22, 0x80	; 128
    d5a4:	71 05       	cpc	r23, r1
    d5a6:	81 05       	cpc	r24, r1
    d5a8:	91 05       	cpc	r25, r1
    d5aa:	10 f4       	brcc	.+4      	; 0xd5b0 <ff_uni2oem+0x16>
		c = (WCHAR)uni;
    d5ac:	cb 01       	movw	r24, r22
    d5ae:	23 c0       	rjmp	.+70     	; 0xd5f6 <ff_uni2oem+0x5c>

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
    d5b0:	61 15       	cp	r22, r1
    d5b2:	71 05       	cpc	r23, r1
    d5b4:	21 e0       	ldi	r18, 0x01	; 1
    d5b6:	82 07       	cpc	r24, r18
    d5b8:	91 05       	cpc	r25, r1
    d5ba:	d8 f4       	brcc	.+54     	; 0xd5f2 <ff_uni2oem+0x58>
    d5bc:	45 3b       	cpi	r20, 0xB5	; 181
    d5be:	51 40       	sbci	r21, 0x01	; 1
    d5c0:	c1 f4       	brne	.+48     	; 0xd5f2 <ff_uni2oem+0x58>
    d5c2:	e8 e0       	ldi	r30, 0x08	; 8
    d5c4:	f6 e0       	ldi	r31, 0x06	; 6
    d5c6:	20 e0       	ldi	r18, 0x00	; 0
    d5c8:	30 e0       	ldi	r19, 0x00	; 0
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
    d5ca:	c1 90       	ld	r12, Z+
    d5cc:	d1 90       	ld	r13, Z+
    d5ce:	e1 2c       	mov	r14, r1
    d5d0:	f1 2c       	mov	r15, r1
    d5d2:	6c 15       	cp	r22, r12
    d5d4:	7d 05       	cpc	r23, r13
    d5d6:	8e 05       	cpc	r24, r14
    d5d8:	9f 05       	cpc	r25, r15
    d5da:	29 f0       	breq	.+10     	; 0xd5e6 <ff_uni2oem+0x4c>
    d5dc:	2f 5f       	subi	r18, 0xFF	; 255
    d5de:	3f 4f       	sbci	r19, 0xFF	; 255
    d5e0:	20 38       	cpi	r18, 0x80	; 128
    d5e2:	31 05       	cpc	r19, r1
    d5e4:	91 f7       	brne	.-28     	; 0xd5ca <ff_uni2oem+0x30>
			c = (c + 0x80) & 0xFF;
    d5e6:	b9 01       	movw	r22, r18
    d5e8:	60 58       	subi	r22, 0x80	; 128
    d5ea:	7f 4f       	sbci	r23, 0xFF	; 255
    d5ec:	cb 01       	movw	r24, r22
    d5ee:	99 27       	eor	r25, r25
    d5f0:	02 c0       	rjmp	.+4      	; 0xd5f6 <ff_uni2oem+0x5c>
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
	WCHAR c = 0;
    d5f2:	80 e0       	ldi	r24, 0x00	; 0
    d5f4:	90 e0       	ldi	r25, 0x00	; 0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
    d5f6:	ff 90       	pop	r15
    d5f8:	ef 90       	pop	r14
    d5fa:	df 90       	pop	r13
    d5fc:	cf 90       	pop	r12
    d5fe:	08 95       	ret

0000d600 <ff_oem2uni>:
{
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (oem < 0x80) {	/* ASCII? */
    d600:	80 38       	cpi	r24, 0x80	; 128
    d602:	91 05       	cpc	r25, r1
    d604:	88 f0       	brcs	.+34     	; 0xd628 <ff_oem2uni+0x28>
		c = oem;

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
    d606:	65 3b       	cpi	r22, 0xB5	; 181
    d608:	71 40       	sbci	r23, 0x01	; 1
    d60a:	61 f4       	brne	.+24     	; 0xd624 <ff_oem2uni+0x24>
			if (oem < 0x100) c = p[oem - 0x80];
    d60c:	8f 3f       	cpi	r24, 0xFF	; 255
    d60e:	91 05       	cpc	r25, r1
    d610:	09 f0       	breq	.+2      	; 0xd614 <ff_oem2uni+0x14>
    d612:	40 f4       	brcc	.+16     	; 0xd624 <ff_oem2uni+0x24>
    d614:	88 0f       	add	r24, r24
    d616:	99 1f       	adc	r25, r25
    d618:	fc 01       	movw	r30, r24
    d61a:	e8 5f       	subi	r30, 0xF8	; 248
    d61c:	fa 4f       	sbci	r31, 0xFA	; 250
    d61e:	80 81       	ld	r24, Z
    d620:	91 81       	ldd	r25, Z+1	; 0x01
    d622:	08 95       	ret
WCHAR ff_oem2uni (	/* Returns Unicode character in UTF-16, zero on error */
	WCHAR	oem,	/* OEM code to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
	WCHAR c = 0;
    d624:	80 e0       	ldi	r24, 0x00	; 0
    d626:	90 e0       	ldi	r25, 0x00	; 0
			if (oem < 0x100) c = p[oem - 0x80];
		}
	}

	return c;
}
    d628:	08 95       	ret

0000d62a <ff_wtoupper>:

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
    d62a:	61 15       	cp	r22, r1
    d62c:	71 05       	cpc	r23, r1
    d62e:	21 e0       	ldi	r18, 0x01	; 1
    d630:	82 07       	cpc	r24, r18
    d632:	91 05       	cpc	r25, r1
    d634:	08 f0       	brcs	.+2      	; 0xd638 <ff_wtoupper+0xe>
    d636:	5a c0       	rjmp	.+180    	; 0xd6ec <ff_wtoupper+0xc2>
		uc = (WORD)uni;
		p = uc < 0x1000 ? cvt1 : cvt2;
    d638:	61 15       	cp	r22, r1
    d63a:	80 e1       	ldi	r24, 0x10	; 16
    d63c:	78 07       	cpc	r23, r24
    d63e:	18 f0       	brcs	.+6      	; 0xd646 <ff_wtoupper+0x1c>
    d640:	aa e5       	ldi	r26, 0x5A	; 90
    d642:	b3 e0       	ldi	r27, 0x03	; 3
    d644:	02 c0       	rjmp	.+4      	; 0xd64a <ff_wtoupper+0x20>
    d646:	a6 e1       	ldi	r26, 0x16	; 22
    d648:	b4 e0       	ldi	r27, 0x04	; 4
		for (;;) {
			bc = *p++;								/* Get the block base */
    d64a:	2d 91       	ld	r18, X+
    d64c:	3c 91       	ld	r19, X
    d64e:	11 97       	sbiw	r26, 0x01	; 1
			if (bc == 0 || uc < bc) break;			/* Not matched? */
    d650:	21 15       	cp	r18, r1
    d652:	31 05       	cpc	r19, r1
    d654:	09 f4       	brne	.+2      	; 0xd658 <ff_wtoupper+0x2e>
    d656:	48 c0       	rjmp	.+144    	; 0xd6e8 <ff_wtoupper+0xbe>
    d658:	62 17       	cp	r22, r18
    d65a:	73 07       	cpc	r23, r19
    d65c:	08 f4       	brcc	.+2      	; 0xd660 <ff_wtoupper+0x36>
    d65e:	44 c0       	rjmp	.+136    	; 0xd6e8 <ff_wtoupper+0xbe>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
    d660:	14 96       	adiw	r26, 0x04	; 4
    d662:	fd 01       	movw	r30, r26
    d664:	32 97       	sbiw	r30, 0x02	; 2
    d666:	80 81       	ld	r24, Z
    d668:	91 81       	ldd	r25, Z+1	; 0x01
    d66a:	e9 2f       	mov	r30, r25
    d66c:	ff 27       	eor	r31, r31
    d66e:	99 27       	eor	r25, r25
			if (uc < bc + nc) {	/* In the block? */
    d670:	a9 01       	movw	r20, r18
    d672:	48 0f       	add	r20, r24
    d674:	59 1f       	adc	r21, r25
    d676:	64 17       	cp	r22, r20
    d678:	75 07       	cpc	r23, r21
    d67a:	70 f5       	brcc	.+92     	; 0xd6d8 <ff_wtoupper+0xae>
				switch (cmd) {
    d67c:	e9 30       	cpi	r30, 0x09	; 9
    d67e:	f1 05       	cpc	r31, r1
    d680:	98 f5       	brcc	.+102    	; 0xd6e8 <ff_wtoupper+0xbe>
    d682:	ec 54       	subi	r30, 0x4C	; 76
    d684:	ff 4f       	sbci	r31, 0xFF	; 255
    d686:	0c 94 af e5 	jmp	0x1cb5e	; 0x1cb5e <__tablejump2__>
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
    d68a:	62 1b       	sub	r22, r18
    d68c:	73 0b       	sbc	r23, r19
    d68e:	fb 01       	movw	r30, r22
    d690:	ee 0f       	add	r30, r30
    d692:	ff 1f       	adc	r31, r31
    d694:	ea 0f       	add	r30, r26
    d696:	fb 1f       	adc	r31, r27
    d698:	60 81       	ld	r22, Z
    d69a:	71 81       	ldd	r23, Z+1	; 0x01
    d69c:	25 c0       	rjmp	.+74     	; 0xd6e8 <ff_wtoupper+0xbe>
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
    d69e:	cb 01       	movw	r24, r22
    d6a0:	82 1b       	sub	r24, r18
    d6a2:	93 0b       	sbc	r25, r19
    d6a4:	81 70       	andi	r24, 0x01	; 1
    d6a6:	99 27       	eor	r25, r25
    d6a8:	68 1b       	sub	r22, r24
    d6aa:	79 0b       	sbc	r23, r25
    d6ac:	1d c0       	rjmp	.+58     	; 0xd6e8 <ff_wtoupper+0xbe>
				case 2: uc -= 16; break;			/* Shift -16 */
    d6ae:	60 51       	subi	r22, 0x10	; 16
    d6b0:	71 09       	sbc	r23, r1
    d6b2:	1a c0       	rjmp	.+52     	; 0xd6e8 <ff_wtoupper+0xbe>
				case 3:	uc -= 32; break;			/* Shift -32 */
    d6b4:	60 52       	subi	r22, 0x20	; 32
    d6b6:	71 09       	sbc	r23, r1
    d6b8:	17 c0       	rjmp	.+46     	; 0xd6e8 <ff_wtoupper+0xbe>
				case 4:	uc -= 48; break;			/* Shift -48 */
    d6ba:	60 53       	subi	r22, 0x30	; 48
    d6bc:	71 09       	sbc	r23, r1
    d6be:	14 c0       	rjmp	.+40     	; 0xd6e8 <ff_wtoupper+0xbe>
				case 5:	uc -= 26; break;			/* Shift -26 */
    d6c0:	6a 51       	subi	r22, 0x1A	; 26
    d6c2:	71 09       	sbc	r23, r1
    d6c4:	11 c0       	rjmp	.+34     	; 0xd6e8 <ff_wtoupper+0xbe>
				case 6:	uc += 8; break;				/* Shift +8 */
    d6c6:	68 5f       	subi	r22, 0xF8	; 248
    d6c8:	7f 4f       	sbci	r23, 0xFF	; 255
    d6ca:	0e c0       	rjmp	.+28     	; 0xd6e8 <ff_wtoupper+0xbe>
				case 7: uc -= 80; break;			/* Shift -80 */
    d6cc:	60 55       	subi	r22, 0x50	; 80
    d6ce:	71 09       	sbc	r23, r1
    d6d0:	0b c0       	rjmp	.+22     	; 0xd6e8 <ff_wtoupper+0xbe>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
    d6d2:	60 56       	subi	r22, 0x60	; 96
    d6d4:	7c 41       	sbci	r23, 0x1C	; 28
    d6d6:	08 c0       	rjmp	.+16     	; 0xd6e8 <ff_wtoupper+0xbe>
				}
				break;
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
    d6d8:	ef 2b       	or	r30, r31
    d6da:	09 f0       	breq	.+2      	; 0xd6de <ff_wtoupper+0xb4>
    d6dc:	b6 cf       	rjmp	.-148    	; 0xd64a <ff_wtoupper+0x20>
    d6de:	88 0f       	add	r24, r24
    d6e0:	99 1f       	adc	r25, r25
    d6e2:	a8 0f       	add	r26, r24
    d6e4:	b9 1f       	adc	r27, r25
    d6e6:	b1 cf       	rjmp	.-158    	; 0xd64a <ff_wtoupper+0x20>
		}
		uni = uc;
    d6e8:	80 e0       	ldi	r24, 0x00	; 0
    d6ea:	90 e0       	ldi	r25, 0x00	; 0
	}

	return uni;
}
    d6ec:	08 95       	ret

0000d6ee <disk_status>:

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
	switch (pdrv) {
    d6ee:	81 11       	cpse	r24, r1
#ifdef DRV_MMC
	case DEV_MMC :
		return ( mmc_disk_status() );
    d6f0:	02 c0       	rjmp	.+4      	; 0xd6f6 <disk_status+0x8>
    d6f2:	9b c1       	rjmp	.+822    	; 0xda2a <mmc_disk_status>
#ifdef DRV_USB
	case DEV_USB :
		return ( usb_disk_status() );
#endif
	}
	return STA_NOINIT;
    d6f4:	08 95       	ret
}
    d6f6:	81 e0       	ldi	r24, 0x01	; 1
    d6f8:	08 95       	ret

0000d6fa <disk_initialize>:
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{

	switch (pdrv) {
    d6fa:	81 11       	cpse	r24, r1
#ifdef DRV_MMC
	case DEV_MMC :
		return ( mmc_disk_initialize() );
    d6fc:	02 c0       	rjmp	.+4      	; 0xd702 <disk_initialize+0x8>
    d6fe:	f8 c0       	rjmp	.+496    	; 0xd8f0 <mmc_disk_initialize>
#ifdef DRV_USB
	case DEV_USB :
		return ( usb_disk_initialize() );
#endif
	}
	return STA_NOINIT;
    d700:	08 95       	ret
}
    d702:	81 e0       	ldi	r24, 0x01	; 1
    d704:	08 95       	ret

0000d706 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	LBA_t sector,	/* Start sector in LBA */
	UINT count		/* Number of sectors to read */
)
{
    d706:	0f 93       	push	r16
    d708:	1f 93       	push	r17
    d70a:	fb 01       	movw	r30, r22
	switch (pdrv) {
    d70c:	81 11       	cpse	r24, r1
    d70e:	06 c0       	rjmp	.+12     	; 0xd71c <disk_read+0x16>
    d710:	ba 01       	movw	r22, r20
    d712:	a9 01       	movw	r20, r18
    d714:	cf 01       	movw	r24, r30
#ifdef DRV_MMC
	case DEV_MMC :
		return ( mmc_disk_read(buff, sector, count) );
    d716:	98 01       	movw	r18, r16
    d718:	8b d1       	rcall	.+790    	; 0xda30 <mmc_disk_read>
    d71a:	02 c0       	rjmp	.+4      	; 0xd720 <disk_read+0x1a>
#ifdef DRV_USB
	case DEV_USB :
		return ( usb_disk_read(buff, sector, count) );
#endif
	}
	return RES_PARERR;
    d71c:	84 e0       	ldi	r24, 0x04	; 4
    d71e:	90 e0       	ldi	r25, 0x00	; 0
}
    d720:	1f 91       	pop	r17
    d722:	0f 91       	pop	r16
    d724:	08 95       	ret

0000d726 <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	LBA_t sector,		/* Start sector in LBA */
	UINT count			/* Number of sectors to write */
)
{
    d726:	0f 93       	push	r16
    d728:	1f 93       	push	r17
    d72a:	fb 01       	movw	r30, r22
	switch (pdrv) {
    d72c:	81 11       	cpse	r24, r1
    d72e:	06 c0       	rjmp	.+12     	; 0xd73c <disk_write+0x16>
    d730:	ba 01       	movw	r22, r20
    d732:	a9 01       	movw	r20, r18
    d734:	cf 01       	movw	r24, r30
#ifdef DRV_MMC
	case DEV_MMC :
		return ( mmc_disk_write(buff, sector, count) );
    d736:	98 01       	movw	r18, r16
    d738:	c1 d1       	rcall	.+898    	; 0xdabc <mmc_disk_write>
    d73a:	02 c0       	rjmp	.+4      	; 0xd740 <disk_write+0x1a>
	case DEV_USB :
		return ( usb_disk_write(buff, sector, count) );
#endif
	}

	return RES_PARERR;
    d73c:	84 e0       	ldi	r24, 0x04	; 4
    d73e:	90 e0       	ldi	r25, 0x00	; 0
}
    d740:	1f 91       	pop	r17
    d742:	0f 91       	pop	r16
    d744:	08 95       	ret

0000d746 <disk_ioctl>:
DRESULT disk_ioctl (
    BYTE pdrv,      /* Physical drive nmuber (0..) */
    BYTE cmd,       /* Control code */
    void *buff      /* Buffer to send/receive control data */
)
{
    d746:	96 2f       	mov	r25, r22
    switch (pdrv) {
    d748:	81 11       	cpse	r24, r1
    d74a:	04 c0       	rjmp	.+8      	; 0xd754 <disk_ioctl+0xe>
    d74c:	ba 01       	movw	r22, r20
#ifdef DRV_MMC
    case DEV_MMC :
        return ( mmc_disk_ioctl(cmd, buff) );
    d74e:	89 2f       	mov	r24, r25
    d750:	1a c2       	rjmp	.+1076   	; 0xdb86 <mmc_disk_ioctl>
#ifdef DRV_USB
    case DEV_MMC :
        return ( usb_disk_ioctl(cmd, buff) );
#endif
    }
    return RES_PARERR;
    d752:	08 95       	ret
    d754:	84 e0       	ldi	r24, 0x04	; 4
}
    d756:	90 e0       	ldi	r25, 0x00	; 0
    d758:	08 95       	ret

0000d75a <xchg_spi>:
///@return Data read
static
BYTE xchg_spi (     /* Returns received data */
    BYTE dat        /* Data to be sent */
)
{
    d75a:	cd c4       	rjmp	.+2458   	; 0xe0f6 <mmc_spi_TXRX>
    d75c:	08 95       	ret

0000d75e <deselect>:
    d75e:	a2 d4       	rcall	.+2372   	; 0xe0a4 <mmc_spi_end>
    d760:	8f ef       	ldi	r24, 0xFF	; 255
    d762:	fb df       	rcall	.-10     	; 0xd75a <xchg_spi>
    d764:	8f ef       	ldi	r24, 0xFF	; 255
    d766:	f9 cf       	rjmp	.-14     	; 0xd75a <xchg_spi>
    d768:	08 95       	ret

0000d76a <rcvr_datablock>:
    d76a:	0f 93       	push	r16
    d76c:	1f 93       	push	r17
    d76e:	cf 93       	push	r28
    d770:	df 93       	push	r29
    d772:	ec 01       	movw	r28, r24
    d774:	8b 01       	movw	r16, r22
    d776:	46 9a       	sbi	0x08, 6	; 8
    d778:	3e 9a       	sbi	0x07, 6	; 7
    d77a:	88 ee       	ldi	r24, 0xE8	; 232
    d77c:	93 e0       	ldi	r25, 0x03	; 3
    d77e:	be d4       	rcall	.+2428   	; 0xe0fc <mmc_set_ms_timeout>
    d780:	8f ef       	ldi	r24, 0xFF	; 255
    d782:	b9 d4       	rcall	.+2418   	; 0xe0f6 <mmc_spi_TXRX>
    d784:	8f 3f       	cpi	r24, 0xFF	; 255
    d786:	31 f4       	brne	.+12     	; 0xd794 <rcvr_datablock+0x2a>
    d788:	c0 d4       	rcall	.+2432   	; 0xe10a <mmc_test_timeout>
    d78a:	89 2b       	or	r24, r25
    d78c:	c9 f3       	breq	.-14     	; 0xd780 <rcvr_datablock+0x16>
    d78e:	80 e0       	ldi	r24, 0x00	; 0
    d790:	90 e0       	ldi	r25, 0x00	; 0
    d792:	0d c0       	rjmp	.+26     	; 0xd7ae <rcvr_datablock+0x44>
    d794:	8e 3f       	cpi	r24, 0xFE	; 254
    d796:	d9 f7       	brne	.-10     	; 0xd78e <rcvr_datablock+0x24>
    d798:	b8 01       	movw	r22, r16
    d79a:	ce 01       	movw	r24, r28
    d79c:	a9 d4       	rcall	.+2386   	; 0xe0f0 <mmc_spi_RX_buffer>
    d79e:	8f ef       	ldi	r24, 0xFF	; 255
    d7a0:	dc df       	rcall	.-72     	; 0xd75a <xchg_spi>
    d7a2:	8f ef       	ldi	r24, 0xFF	; 255
    d7a4:	da df       	rcall	.-76     	; 0xd75a <xchg_spi>
    d7a6:	46 98       	cbi	0x08, 6	; 8
    d7a8:	3e 9a       	sbi	0x07, 6	; 7
    d7aa:	81 e0       	ldi	r24, 0x01	; 1
    d7ac:	90 e0       	ldi	r25, 0x00	; 0
    d7ae:	df 91       	pop	r29
    d7b0:	cf 91       	pop	r28
    d7b2:	1f 91       	pop	r17
    d7b4:	0f 91       	pop	r16
    d7b6:	08 95       	ret

0000d7b8 <wait_ready>:
    d7b8:	cf 93       	push	r28
    d7ba:	a0 d4       	rcall	.+2368   	; 0xe0fc <mmc_set_ms_timeout>
    d7bc:	8f ef       	ldi	r24, 0xFF	; 255
    d7be:	9b d4       	rcall	.+2358   	; 0xe0f6 <mmc_spi_TXRX>
    d7c0:	c8 2f       	mov	r28, r24
    d7c2:	8f 3f       	cpi	r24, 0xFF	; 255
    d7c4:	19 f0       	breq	.+6      	; 0xd7cc <wait_ready+0x14>
    d7c6:	a1 d4       	rcall	.+2370   	; 0xe10a <mmc_test_timeout>
    d7c8:	89 2b       	or	r24, r25
    d7ca:	c1 f3       	breq	.-16     	; 0xd7bc <wait_ready+0x4>
    d7cc:	81 e0       	ldi	r24, 0x01	; 1
    d7ce:	90 e0       	ldi	r25, 0x00	; 0
    d7d0:	cf 3f       	cpi	r28, 0xFF	; 255
    d7d2:	11 f0       	breq	.+4      	; 0xd7d8 <wait_ready+0x20>
    d7d4:	80 e0       	ldi	r24, 0x00	; 0
    d7d6:	90 e0       	ldi	r25, 0x00	; 0
    d7d8:	cf 91       	pop	r28
    d7da:	08 95       	ret

0000d7dc <select>:
    d7dc:	cf 93       	push	r28
    d7de:	df 93       	push	r29
    d7e0:	54 d4       	rcall	.+2216   	; 0xe08a <mmc_spi_begin>
    d7e2:	8f ef       	ldi	r24, 0xFF	; 255
    d7e4:	ba df       	rcall	.-140    	; 0xd75a <xchg_spi>
    d7e6:	88 ee       	ldi	r24, 0xE8	; 232
    d7e8:	93 e0       	ldi	r25, 0x03	; 3
    d7ea:	e6 df       	rcall	.-52     	; 0xd7b8 <wait_ready>
    d7ec:	ec 01       	movw	r28, r24
    d7ee:	89 2b       	or	r24, r25
    d7f0:	61 f4       	brne	.+24     	; 0xd80a <select+0x2e>
    d7f2:	8c eb       	ldi	r24, 0xBC	; 188
    d7f4:	97 e0       	ldi	r25, 0x07	; 7
    d7f6:	1f 92       	push	r1
    d7f8:	9f 93       	push	r25
    d7fa:	8f 93       	push	r24
    d7fc:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    d800:	ae df       	rcall	.-164    	; 0xd75e <deselect>
    d802:	0f 90       	pop	r0
    d804:	0f 90       	pop	r0
    d806:	0f 90       	pop	r0
    d808:	02 c0       	rjmp	.+4      	; 0xd80e <select+0x32>
    d80a:	c1 e0       	ldi	r28, 0x01	; 1
    d80c:	d0 e0       	ldi	r29, 0x00	; 0
    d80e:	ce 01       	movw	r24, r28
    d810:	df 91       	pop	r29
    d812:	cf 91       	pop	r28
    d814:	08 95       	ret

0000d816 <send_cmd>:
    d816:	ff 92       	push	r15
    d818:	0f 93       	push	r16
    d81a:	1f 93       	push	r17
    d81c:	cf 93       	push	r28
    d81e:	df 93       	push	r29
    d820:	c8 2f       	mov	r28, r24
    d822:	d4 2f       	mov	r29, r20
    d824:	15 2f       	mov	r17, r21
    d826:	06 2f       	mov	r16, r22
    d828:	f7 2e       	mov	r15, r23
    d82a:	87 ff       	sbrs	r24, 7
    d82c:	08 c0       	rjmp	.+16     	; 0xd83e <send_cmd+0x28>
    d82e:	40 e0       	ldi	r20, 0x00	; 0
    d830:	50 e0       	ldi	r21, 0x00	; 0
    d832:	ba 01       	movw	r22, r20
    d834:	87 e3       	ldi	r24, 0x37	; 55
    d836:	ef df       	rcall	.-34     	; 0xd816 <send_cmd>
    d838:	82 30       	cpi	r24, 0x02	; 2
    d83a:	58 f5       	brcc	.+86     	; 0xd892 <send_cmd+0x7c>
    d83c:	cf 77       	andi	r28, 0x7F	; 127
    d83e:	cc 30       	cpi	r28, 0x0C	; 12
    d840:	71 f4       	brne	.+28     	; 0xd85e <send_cmd+0x48>
    d842:	8c 2f       	mov	r24, r28
    d844:	80 64       	ori	r24, 0x40	; 64
    d846:	89 df       	rcall	.-238    	; 0xd75a <xchg_spi>
    d848:	8f 2d       	mov	r24, r15
    d84a:	87 df       	rcall	.-242    	; 0xd75a <xchg_spi>
    d84c:	80 2f       	mov	r24, r16
    d84e:	85 df       	rcall	.-246    	; 0xd75a <xchg_spi>
    d850:	81 2f       	mov	r24, r17
    d852:	83 df       	rcall	.-250    	; 0xd75a <xchg_spi>
    d854:	8d 2f       	mov	r24, r29
    d856:	81 df       	rcall	.-254    	; 0xd75a <xchg_spi>
    d858:	cc 23       	and	r28, r28
    d85a:	c9 f0       	breq	.+50     	; 0xd88e <send_cmd+0x78>
    d85c:	06 c0       	rjmp	.+12     	; 0xd86a <send_cmd+0x54>
    d85e:	7f df       	rcall	.-258    	; 0xd75e <deselect>
    d860:	bd df       	rcall	.-134    	; 0xd7dc <select>
    d862:	89 2b       	or	r24, r25
    d864:	71 f7       	brne	.-36     	; 0xd842 <send_cmd+0x2c>
    d866:	8f ef       	ldi	r24, 0xFF	; 255
    d868:	14 c0       	rjmp	.+40     	; 0xd892 <send_cmd+0x7c>
    d86a:	c8 30       	cpi	r28, 0x08	; 8
    d86c:	11 f4       	brne	.+4      	; 0xd872 <send_cmd+0x5c>
    d86e:	87 e8       	ldi	r24, 0x87	; 135
    d870:	01 c0       	rjmp	.+2      	; 0xd874 <send_cmd+0x5e>
    d872:	81 e0       	ldi	r24, 0x01	; 1
    d874:	72 df       	rcall	.-284    	; 0xd75a <xchg_spi>
    d876:	cc 30       	cpi	r28, 0x0C	; 12
    d878:	11 f4       	brne	.+4      	; 0xd87e <send_cmd+0x68>
    d87a:	8f ef       	ldi	r24, 0xFF	; 255
    d87c:	6e df       	rcall	.-292    	; 0xd75a <xchg_spi>
    d87e:	ca e0       	ldi	r28, 0x0A	; 10
    d880:	8f ef       	ldi	r24, 0xFF	; 255
    d882:	39 d4       	rcall	.+2162   	; 0xe0f6 <mmc_spi_TXRX>
    d884:	87 ff       	sbrs	r24, 7
    d886:	05 c0       	rjmp	.+10     	; 0xd892 <send_cmd+0x7c>
    d888:	c1 50       	subi	r28, 0x01	; 1
    d88a:	d1 f7       	brne	.-12     	; 0xd880 <send_cmd+0x6a>
    d88c:	02 c0       	rjmp	.+4      	; 0xd892 <send_cmd+0x7c>
    d88e:	85 e9       	ldi	r24, 0x95	; 149
    d890:	f5 cf       	rjmp	.-22     	; 0xd87c <send_cmd+0x66>
    d892:	cd b7       	in	r28, 0x3d	; 61
    d894:	de b7       	in	r29, 0x3e	; 62
    d896:	e5 e0       	ldi	r30, 0x05	; 5
    d898:	0c 94 1c e6 	jmp	0x1cc38	; 0x1cc38 <__epilogue_restores__+0x1a>

0000d89c <xmit_datablock>:
    d89c:	0f 93       	push	r16
    d89e:	1f 93       	push	r17
    d8a0:	cf 93       	push	r28
    d8a2:	8c 01       	movw	r16, r24
    d8a4:	c6 2f       	mov	r28, r22
    d8a6:	2c 9a       	sbi	0x05, 4	; 5
    d8a8:	24 9a       	sbi	0x04, 4	; 4
    d8aa:	88 ee       	ldi	r24, 0xE8	; 232
    d8ac:	93 e0       	ldi	r25, 0x03	; 3
    d8ae:	84 df       	rcall	.-248    	; 0xd7b8 <wait_ready>
    d8b0:	89 2b       	or	r24, r25
    d8b2:	19 f4       	brne	.+6      	; 0xd8ba <xmit_datablock+0x1e>
    d8b4:	80 e0       	ldi	r24, 0x00	; 0
    d8b6:	90 e0       	ldi	r25, 0x00	; 0
    d8b8:	17 c0       	rjmp	.+46     	; 0xd8e8 <xmit_datablock+0x4c>
    d8ba:	8c 2f       	mov	r24, r28
    d8bc:	4e df       	rcall	.-356    	; 0xd75a <xchg_spi>
    d8be:	cd 3f       	cpi	r28, 0xFD	; 253
    d8c0:	29 f4       	brne	.+10     	; 0xd8cc <xmit_datablock+0x30>
    d8c2:	46 98       	cbi	0x08, 6	; 8
    d8c4:	3e 9a       	sbi	0x07, 6	; 7
    d8c6:	81 e0       	ldi	r24, 0x01	; 1
    d8c8:	90 e0       	ldi	r25, 0x00	; 0
    d8ca:	0e c0       	rjmp	.+28     	; 0xd8e8 <xmit_datablock+0x4c>
    d8cc:	60 e0       	ldi	r22, 0x00	; 0
    d8ce:	72 e0       	ldi	r23, 0x02	; 2
    d8d0:	c8 01       	movw	r24, r16
    d8d2:	0b d4       	rcall	.+2070   	; 0xe0ea <mmc_spi_TX_buffer>
    d8d4:	8f ef       	ldi	r24, 0xFF	; 255
    d8d6:	41 df       	rcall	.-382    	; 0xd75a <xchg_spi>
    d8d8:	8f ef       	ldi	r24, 0xFF	; 255
    d8da:	3f df       	rcall	.-386    	; 0xd75a <xchg_spi>
    d8dc:	8f ef       	ldi	r24, 0xFF	; 255
    d8de:	0b d4       	rcall	.+2070   	; 0xe0f6 <mmc_spi_TXRX>
    d8e0:	8f 71       	andi	r24, 0x1F	; 31
    d8e2:	85 30       	cpi	r24, 0x05	; 5
    d8e4:	39 f7       	brne	.-50     	; 0xd8b4 <xmit_datablock+0x18>
    d8e6:	ed cf       	rjmp	.-38     	; 0xd8c2 <xmit_datablock+0x26>
    d8e8:	cf 91       	pop	r28
    d8ea:	1f 91       	pop	r17
    d8ec:	0f 91       	pop	r16
    d8ee:	08 95       	ret

0000d8f0 <mmc_disk_initialize>:
    d8f0:	a4 e0       	ldi	r26, 0x04	; 4
    d8f2:	b0 e0       	ldi	r27, 0x00	; 0
    d8f4:	ee e7       	ldi	r30, 0x7E	; 126
    d8f6:	fc e6       	ldi	r31, 0x6C	; 108
    d8f8:	0c 94 fd e5 	jmp	0x1cbfa	; 0x1cbfa <__prologue_saves__+0x14>
    d8fc:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    d900:	81 fd       	sbrc	r24, 1
    d902:	8d c0       	rjmp	.+282    	; 0xda1e <mmc_disk_initialize+0x12e>
    d904:	d3 d3       	rcall	.+1958   	; 0xe0ac <mmc_slow>
    d906:	1a e0       	ldi	r17, 0x0A	; 10
    d908:	8f ef       	ldi	r24, 0xFF	; 255
    d90a:	27 df       	rcall	.-434    	; 0xd75a <xchg_spi>
    d90c:	11 50       	subi	r17, 0x01	; 1
    d90e:	e1 f7       	brne	.-8      	; 0xd908 <mmc_disk_initialize+0x18>
    d910:	40 e0       	ldi	r20, 0x00	; 0
    d912:	50 e0       	ldi	r21, 0x00	; 0
    d914:	ba 01       	movw	r22, r20
    d916:	80 e0       	ldi	r24, 0x00	; 0
    d918:	7e df       	rcall	.-260    	; 0xd816 <send_cmd>
    d91a:	81 30       	cpi	r24, 0x01	; 1
    d91c:	09 f0       	breq	.+2      	; 0xd920 <mmc_disk_initialize+0x30>
    d91e:	6f c0       	rjmp	.+222    	; 0xd9fe <mmc_disk_initialize+0x10e>
    d920:	80 ed       	ldi	r24, 0xD0	; 208
    d922:	97 e0       	ldi	r25, 0x07	; 7
    d924:	eb d3       	rcall	.+2006   	; 0xe0fc <mmc_set_ms_timeout>
    d926:	4a ea       	ldi	r20, 0xAA	; 170
    d928:	51 e0       	ldi	r21, 0x01	; 1
    d92a:	60 e0       	ldi	r22, 0x00	; 0
    d92c:	70 e0       	ldi	r23, 0x00	; 0
    d92e:	88 e0       	ldi	r24, 0x08	; 8
    d930:	72 df       	rcall	.-284    	; 0xd816 <send_cmd>
    d932:	81 30       	cpi	r24, 0x01	; 1
    d934:	09 f0       	breq	.+2      	; 0xd938 <mmc_disk_initialize+0x48>
    d936:	3d c0       	rjmp	.+122    	; 0xd9b2 <mmc_disk_initialize+0xc2>
    d938:	8e 01       	movw	r16, r28
    d93a:	0f 5f       	subi	r16, 0xFF	; 255
    d93c:	1f 4f       	sbci	r17, 0xFF	; 255
    d93e:	6e 01       	movw	r12, r28
    d940:	85 e0       	ldi	r24, 0x05	; 5
    d942:	c8 0e       	add	r12, r24
    d944:	d1 1c       	adc	r13, r1
    d946:	78 01       	movw	r14, r16
    d948:	8f ef       	ldi	r24, 0xFF	; 255
    d94a:	d5 d3       	rcall	.+1962   	; 0xe0f6 <mmc_spi_TXRX>
    d94c:	f7 01       	movw	r30, r14
    d94e:	81 93       	st	Z+, r24
    d950:	7f 01       	movw	r14, r30
    d952:	ce 16       	cp	r12, r30
    d954:	df 06       	cpc	r13, r31
    d956:	c1 f7       	brne	.-16     	; 0xd948 <mmc_disk_initialize+0x58>
    d958:	8b 81       	ldd	r24, Y+3	; 0x03
    d95a:	81 30       	cpi	r24, 0x01	; 1
    d95c:	09 f0       	breq	.+2      	; 0xd960 <mmc_disk_initialize+0x70>
    d95e:	4f c0       	rjmp	.+158    	; 0xd9fe <mmc_disk_initialize+0x10e>
    d960:	8c 81       	ldd	r24, Y+4	; 0x04
    d962:	8a 3a       	cpi	r24, 0xAA	; 170
    d964:	09 f0       	breq	.+2      	; 0xd968 <mmc_disk_initialize+0x78>
    d966:	4b c0       	rjmp	.+150    	; 0xd9fe <mmc_disk_initialize+0x10e>
    d968:	d0 d3       	rcall	.+1952   	; 0xe10a <mmc_test_timeout>
    d96a:	89 2b       	or	r24, r25
    d96c:	29 f0       	breq	.+10     	; 0xd978 <mmc_disk_initialize+0x88>
    d96e:	cd d3       	rcall	.+1946   	; 0xe10a <mmc_test_timeout>
    d970:	89 2b       	or	r24, r25
    d972:	09 f0       	breq	.+2      	; 0xd976 <mmc_disk_initialize+0x86>
    d974:	44 c0       	rjmp	.+136    	; 0xd9fe <mmc_disk_initialize+0x10e>
    d976:	09 c0       	rjmp	.+18     	; 0xd98a <mmc_disk_initialize+0x9a>
    d978:	40 e0       	ldi	r20, 0x00	; 0
    d97a:	50 e0       	ldi	r21, 0x00	; 0
    d97c:	60 e0       	ldi	r22, 0x00	; 0
    d97e:	70 e4       	ldi	r23, 0x40	; 64
    d980:	89 ea       	ldi	r24, 0xA9	; 169
    d982:	49 df       	rcall	.-366    	; 0xd816 <send_cmd>
    d984:	81 11       	cpse	r24, r1
    d986:	f0 cf       	rjmp	.-32     	; 0xd968 <mmc_disk_initialize+0x78>
    d988:	f2 cf       	rjmp	.-28     	; 0xd96e <mmc_disk_initialize+0x7e>
    d98a:	40 e0       	ldi	r20, 0x00	; 0
    d98c:	50 e0       	ldi	r21, 0x00	; 0
    d98e:	ba 01       	movw	r22, r20
    d990:	8a e3       	ldi	r24, 0x3A	; 58
    d992:	41 df       	rcall	.-382    	; 0xd816 <send_cmd>
    d994:	81 11       	cpse	r24, r1
    d996:	33 c0       	rjmp	.+102    	; 0xd9fe <mmc_disk_initialize+0x10e>
    d998:	8f ef       	ldi	r24, 0xFF	; 255
    d99a:	ad d3       	rcall	.+1882   	; 0xe0f6 <mmc_spi_TXRX>
    d99c:	f8 01       	movw	r30, r16
    d99e:	81 93       	st	Z+, r24
    d9a0:	8f 01       	movw	r16, r30
    d9a2:	ce 16       	cp	r12, r30
    d9a4:	df 06       	cpc	r13, r31
    d9a6:	c1 f7       	brne	.-16     	; 0xd998 <mmc_disk_initialize+0xa8>
    d9a8:	89 81       	ldd	r24, Y+1	; 0x01
    d9aa:	86 fd       	sbrc	r24, 6
    d9ac:	2a c0       	rjmp	.+84     	; 0xda02 <mmc_disk_initialize+0x112>
    d9ae:	14 e0       	ldi	r17, 0x04	; 4
    d9b0:	29 c0       	rjmp	.+82     	; 0xda04 <mmc_disk_initialize+0x114>
    d9b2:	80 ed       	ldi	r24, 0xD0	; 208
    d9b4:	97 e0       	ldi	r25, 0x07	; 7
    d9b6:	a2 d3       	rcall	.+1860   	; 0xe0fc <mmc_set_ms_timeout>
    d9b8:	40 e0       	ldi	r20, 0x00	; 0
    d9ba:	50 e0       	ldi	r21, 0x00	; 0
    d9bc:	ba 01       	movw	r22, r20
    d9be:	89 ea       	ldi	r24, 0xA9	; 169
    d9c0:	2a df       	rcall	.-428    	; 0xd816 <send_cmd>
    d9c2:	82 30       	cpi	r24, 0x02	; 2
    d9c4:	18 f0       	brcs	.+6      	; 0xd9cc <mmc_disk_initialize+0xdc>
    d9c6:	11 e0       	ldi	r17, 0x01	; 1
    d9c8:	01 e0       	ldi	r16, 0x01	; 1
    d9ca:	02 c0       	rjmp	.+4      	; 0xd9d0 <mmc_disk_initialize+0xe0>
    d9cc:	12 e0       	ldi	r17, 0x02	; 2
    d9ce:	09 ea       	ldi	r16, 0xA9	; 169
    d9d0:	9c d3       	rcall	.+1848   	; 0xe10a <mmc_test_timeout>
    d9d2:	89 2b       	or	r24, r25
    d9d4:	21 f0       	breq	.+8      	; 0xd9de <mmc_disk_initialize+0xee>
    d9d6:	99 d3       	rcall	.+1842   	; 0xe10a <mmc_test_timeout>
    d9d8:	89 2b       	or	r24, r25
    d9da:	89 f4       	brne	.+34     	; 0xd9fe <mmc_disk_initialize+0x10e>
    d9dc:	08 c0       	rjmp	.+16     	; 0xd9ee <mmc_disk_initialize+0xfe>
    d9de:	40 e0       	ldi	r20, 0x00	; 0
    d9e0:	50 e0       	ldi	r21, 0x00	; 0
    d9e2:	ba 01       	movw	r22, r20
    d9e4:	80 2f       	mov	r24, r16
    d9e6:	17 df       	rcall	.-466    	; 0xd816 <send_cmd>
    d9e8:	81 11       	cpse	r24, r1
    d9ea:	f2 cf       	rjmp	.-28     	; 0xd9d0 <mmc_disk_initialize+0xe0>
    d9ec:	f4 cf       	rjmp	.-24     	; 0xd9d6 <mmc_disk_initialize+0xe6>
    d9ee:	40 e0       	ldi	r20, 0x00	; 0
    d9f0:	52 e0       	ldi	r21, 0x02	; 2
    d9f2:	60 e0       	ldi	r22, 0x00	; 0
    d9f4:	70 e0       	ldi	r23, 0x00	; 0
    d9f6:	80 e1       	ldi	r24, 0x10	; 16
    d9f8:	0e df       	rcall	.-484    	; 0xd816 <send_cmd>
    d9fa:	88 23       	and	r24, r24
    d9fc:	19 f0       	breq	.+6      	; 0xda04 <mmc_disk_initialize+0x114>
    d9fe:	10 e0       	ldi	r17, 0x00	; 0
    da00:	01 c0       	rjmp	.+2      	; 0xda04 <mmc_disk_initialize+0x114>
    da02:	1c e0       	ldi	r17, 0x0C	; 12
    da04:	10 93 19 18 	sts	0x1819, r17	; 0x801819 <CardType>
    da08:	aa de       	rcall	.-684    	; 0xd75e <deselect>
    da0a:	11 23       	and	r17, r17
    da0c:	39 f0       	breq	.+14     	; 0xda1c <mmc_disk_initialize+0x12c>
    da0e:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    da12:	8e 7f       	andi	r24, 0xFE	; 254
    da14:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <Stat>
    da18:	5b d3       	rcall	.+1718   	; 0xe0d0 <mmc_fast>
    da1a:	01 c0       	rjmp	.+2      	; 0xda1e <mmc_disk_initialize+0x12e>
    da1c:	33 d4       	rcall	.+2150   	; 0xe284 <mmc_power_off>
    da1e:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    da22:	24 96       	adiw	r28, 0x04	; 4
    da24:	e8 e0       	ldi	r30, 0x08	; 8
    da26:	0c 94 19 e6 	jmp	0x1cc32	; 0x1cc32 <__epilogue_restores__+0x14>

0000da2a <mmc_disk_status>:
    da2a:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    da2e:	08 95       	ret

0000da30 <mmc_disk_read>:
    da30:	ef 92       	push	r14
    da32:	ff 92       	push	r15
    da34:	1f 93       	push	r17
    da36:	cf 93       	push	r28
    da38:	df 93       	push	r29
    da3a:	7c 01       	movw	r14, r24
    da3c:	e9 01       	movw	r28, r18
    da3e:	20 97       	sbiw	r28, 0x00	; 0
    da40:	19 f4       	brne	.+6      	; 0xda48 <mmc_disk_read+0x18>
    da42:	8d de       	rcall	.-742    	; 0xd75e <deselect>
    da44:	84 e0       	ldi	r24, 0x04	; 4
    da46:	06 c0       	rjmp	.+12     	; 0xda54 <mmc_disk_read+0x24>
    da48:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    da4c:	80 ff       	sbrs	r24, 0
    da4e:	04 c0       	rjmp	.+8      	; 0xda58 <mmc_disk_read+0x28>
    da50:	86 de       	rcall	.-756    	; 0xd75e <deselect>
    da52:	83 e0       	ldi	r24, 0x03	; 3
    da54:	90 e0       	ldi	r25, 0x00	; 0
    da56:	2c c0       	rjmp	.+88     	; 0xdab0 <mmc_disk_read+0x80>
    da58:	80 91 19 18 	lds	r24, 0x1819	; 0x801819 <CardType>
    da5c:	83 fd       	sbrc	r24, 3
    da5e:	07 c0       	rjmp	.+14     	; 0xda6e <mmc_disk_read+0x3e>
    da60:	89 e0       	ldi	r24, 0x09	; 9
    da62:	44 0f       	add	r20, r20
    da64:	55 1f       	adc	r21, r21
    da66:	66 1f       	adc	r22, r22
    da68:	77 1f       	adc	r23, r23
    da6a:	8a 95       	dec	r24
    da6c:	d1 f7       	brne	.-12     	; 0xda62 <mmc_disk_read+0x32>
    da6e:	c2 30       	cpi	r28, 0x02	; 2
    da70:	d1 05       	cpc	r29, r1
    da72:	10 f4       	brcc	.+4      	; 0xda78 <mmc_disk_read+0x48>
    da74:	11 e1       	ldi	r17, 0x11	; 17
    da76:	01 c0       	rjmp	.+2      	; 0xda7a <mmc_disk_read+0x4a>
    da78:	12 e1       	ldi	r17, 0x12	; 18
    da7a:	81 2f       	mov	r24, r17
    da7c:	cc de       	rcall	.-616    	; 0xd816 <send_cmd>
    da7e:	81 11       	cpse	r24, r1
    da80:	11 c0       	rjmp	.+34     	; 0xdaa4 <mmc_disk_read+0x74>
    da82:	60 e0       	ldi	r22, 0x00	; 0
    da84:	72 e0       	ldi	r23, 0x02	; 2
    da86:	c7 01       	movw	r24, r14
    da88:	70 de       	rcall	.-800    	; 0xd76a <rcvr_datablock>
    da8a:	89 2b       	or	r24, r25
    da8c:	21 f0       	breq	.+8      	; 0xda96 <mmc_disk_read+0x66>
    da8e:	8e ef       	ldi	r24, 0xFE	; 254
    da90:	f8 1a       	sub	r15, r24
    da92:	21 97       	sbiw	r28, 0x01	; 1
    da94:	b1 f7       	brne	.-20     	; 0xda82 <mmc_disk_read+0x52>
    da96:	12 31       	cpi	r17, 0x12	; 18
    da98:	29 f4       	brne	.+10     	; 0xdaa4 <mmc_disk_read+0x74>
    da9a:	40 e0       	ldi	r20, 0x00	; 0
    da9c:	50 e0       	ldi	r21, 0x00	; 0
    da9e:	ba 01       	movw	r22, r20
    daa0:	8c e0       	ldi	r24, 0x0C	; 12
    daa2:	b9 de       	rcall	.-654    	; 0xd816 <send_cmd>
    daa4:	5c de       	rcall	.-840    	; 0xd75e <deselect>
    daa6:	81 e0       	ldi	r24, 0x01	; 1
    daa8:	90 e0       	ldi	r25, 0x00	; 0
    daaa:	cd 2b       	or	r28, r29
    daac:	09 f4       	brne	.+2      	; 0xdab0 <mmc_disk_read+0x80>
    daae:	80 e0       	ldi	r24, 0x00	; 0
    dab0:	df 91       	pop	r29
    dab2:	cf 91       	pop	r28
    dab4:	1f 91       	pop	r17
    dab6:	ff 90       	pop	r15
    dab8:	ef 90       	pop	r14
    daba:	08 95       	ret

0000dabc <mmc_disk_write>:
    dabc:	a0 e0       	ldi	r26, 0x00	; 0
    dabe:	b0 e0       	ldi	r27, 0x00	; 0
    dac0:	e4 e6       	ldi	r30, 0x64	; 100
    dac2:	fd e6       	ldi	r31, 0x6D	; 109
    dac4:	0c 94 fd e5 	jmp	0x1cbfa	; 0x1cbfa <__prologue_saves__+0x14>
    dac8:	8c 01       	movw	r16, r24
    daca:	6a 01       	movw	r12, r20
    dacc:	7b 01       	movw	r14, r22
    dace:	e9 01       	movw	r28, r18
    dad0:	20 97       	sbiw	r28, 0x00	; 0
    dad2:	19 f4       	brne	.+6      	; 0xdada <mmc_disk_write+0x1e>
    dad4:	44 de       	rcall	.-888    	; 0xd75e <deselect>
    dad6:	84 e0       	ldi	r24, 0x04	; 4
    dad8:	06 c0       	rjmp	.+12     	; 0xdae6 <mmc_disk_write+0x2a>
    dada:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    dade:	80 ff       	sbrs	r24, 0
    dae0:	04 c0       	rjmp	.+8      	; 0xdaea <mmc_disk_write+0x2e>
    dae2:	3d de       	rcall	.-902    	; 0xd75e <deselect>
    dae4:	83 e0       	ldi	r24, 0x03	; 3
    dae6:	90 e0       	ldi	r25, 0x00	; 0
    dae8:	49 c0       	rjmp	.+146    	; 0xdb7c <mmc_disk_write+0xc0>
    daea:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    daee:	82 ff       	sbrs	r24, 2
    daf0:	03 c0       	rjmp	.+6      	; 0xdaf8 <mmc_disk_write+0x3c>
    daf2:	35 de       	rcall	.-918    	; 0xd75e <deselect>
    daf4:	82 e0       	ldi	r24, 0x02	; 2
    daf6:	f7 cf       	rjmp	.-18     	; 0xdae6 <mmc_disk_write+0x2a>
    daf8:	80 91 19 18 	lds	r24, 0x1819	; 0x801819 <CardType>
    dafc:	83 fd       	sbrc	r24, 3
    dafe:	07 c0       	rjmp	.+14     	; 0xdb0e <mmc_disk_write+0x52>
    db00:	99 e0       	ldi	r25, 0x09	; 9
    db02:	cc 0c       	add	r12, r12
    db04:	dd 1c       	adc	r13, r13
    db06:	ee 1c       	adc	r14, r14
    db08:	ff 1c       	adc	r15, r15
    db0a:	9a 95       	dec	r25
    db0c:	d1 f7       	brne	.-12     	; 0xdb02 <mmc_disk_write+0x46>
    db0e:	c1 30       	cpi	r28, 0x01	; 1
    db10:	d1 05       	cpc	r29, r1
    db12:	89 f4       	brne	.+34     	; 0xdb36 <mmc_disk_write+0x7a>
    db14:	b7 01       	movw	r22, r14
    db16:	a6 01       	movw	r20, r12
    db18:	88 e1       	ldi	r24, 0x18	; 24
    db1a:	7d de       	rcall	.-774    	; 0xd816 <send_cmd>
    db1c:	81 11       	cpse	r24, r1
    db1e:	26 c0       	rjmp	.+76     	; 0xdb6c <mmc_disk_write+0xb0>
    db20:	6e ef       	ldi	r22, 0xFE	; 254
    db22:	c8 01       	movw	r24, r16
    db24:	bb de       	rcall	.-650    	; 0xd89c <xmit_datablock>
    db26:	31 e0       	ldi	r19, 0x01	; 1
    db28:	20 e0       	ldi	r18, 0x00	; 0
    db2a:	89 2b       	or	r24, r25
    db2c:	09 f0       	breq	.+2      	; 0xdb30 <mmc_disk_write+0x74>
    db2e:	30 e0       	ldi	r19, 0x00	; 0
    db30:	c3 2f       	mov	r28, r19
    db32:	d2 2f       	mov	r29, r18
    db34:	1d c0       	rjmp	.+58     	; 0xdb70 <mmc_disk_write+0xb4>
    db36:	86 70       	andi	r24, 0x06	; 6
    db38:	29 f0       	breq	.+10     	; 0xdb44 <mmc_disk_write+0x88>
    db3a:	ae 01       	movw	r20, r28
    db3c:	60 e0       	ldi	r22, 0x00	; 0
    db3e:	70 e0       	ldi	r23, 0x00	; 0
    db40:	87 e9       	ldi	r24, 0x97	; 151
    db42:	69 de       	rcall	.-814    	; 0xd816 <send_cmd>
    db44:	b7 01       	movw	r22, r14
    db46:	a6 01       	movw	r20, r12
    db48:	89 e1       	ldi	r24, 0x19	; 25
    db4a:	65 de       	rcall	.-822    	; 0xd816 <send_cmd>
    db4c:	81 11       	cpse	r24, r1
    db4e:	10 c0       	rjmp	.+32     	; 0xdb70 <mmc_disk_write+0xb4>
    db50:	6c ef       	ldi	r22, 0xFC	; 252
    db52:	c8 01       	movw	r24, r16
    db54:	a3 de       	rcall	.-698    	; 0xd89c <xmit_datablock>
    db56:	89 2b       	or	r24, r25
    db58:	19 f0       	breq	.+6      	; 0xdb60 <mmc_disk_write+0xa4>
    db5a:	1e 5f       	subi	r17, 0xFE	; 254
    db5c:	21 97       	sbiw	r28, 0x01	; 1
    db5e:	c1 f7       	brne	.-16     	; 0xdb50 <mmc_disk_write+0x94>
    db60:	6d ef       	ldi	r22, 0xFD	; 253
    db62:	80 e0       	ldi	r24, 0x00	; 0
    db64:	90 e0       	ldi	r25, 0x00	; 0
    db66:	9a de       	rcall	.-716    	; 0xd89c <xmit_datablock>
    db68:	89 2b       	or	r24, r25
    db6a:	11 f4       	brne	.+4      	; 0xdb70 <mmc_disk_write+0xb4>
    db6c:	c1 e0       	ldi	r28, 0x01	; 1
    db6e:	d0 e0       	ldi	r29, 0x00	; 0
    db70:	f6 dd       	rcall	.-1044   	; 0xd75e <deselect>
    db72:	81 e0       	ldi	r24, 0x01	; 1
    db74:	90 e0       	ldi	r25, 0x00	; 0
    db76:	cd 2b       	or	r28, r29
    db78:	09 f4       	brne	.+2      	; 0xdb7c <mmc_disk_write+0xc0>
    db7a:	80 e0       	ldi	r24, 0x00	; 0
    db7c:	cd b7       	in	r28, 0x3d	; 61
    db7e:	de b7       	in	r29, 0x3e	; 62
    db80:	e8 e0       	ldi	r30, 0x08	; 8
    db82:	0c 94 19 e6 	jmp	0x1cc32	; 0x1cc32 <__epilogue_restores__+0x14>

0000db86 <mmc_disk_ioctl>:
    db86:	a0 e1       	ldi	r26, 0x10	; 16
    db88:	b0 e0       	ldi	r27, 0x00	; 0
    db8a:	e9 ec       	ldi	r30, 0xC9	; 201
    db8c:	fd e6       	ldi	r31, 0x6D	; 109
    db8e:	0c 94 fd e5 	jmp	0x1cbfa	; 0x1cbfa <__prologue_saves__+0x14>
    db92:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <Stat>
    db96:	90 fd       	sbrc	r25, 0
    db98:	2b c2       	rjmp	.+1110   	; 0xdff0 <mmc_disk_ioctl+0x46a>
    db9a:	8b 01       	movw	r16, r22
    db9c:	83 33       	cpi	r24, 0x33	; 51
    db9e:	09 f4       	brne	.+2      	; 0xdba2 <mmc_disk_ioctl+0x1c>
    dba0:	01 c1       	rjmp	.+514    	; 0xdda4 <mmc_disk_ioctl+0x21e>
    dba2:	a0 f4       	brcc	.+40     	; 0xdbcc <mmc_disk_ioctl+0x46>
    dba4:	83 30       	cpi	r24, 0x03	; 3
    dba6:	09 f4       	brne	.+2      	; 0xdbaa <mmc_disk_ioctl+0x24>
    dba8:	85 c0       	rjmp	.+266    	; 0xdcb4 <mmc_disk_ioctl+0x12e>
    dbaa:	28 f4       	brcc	.+10     	; 0xdbb6 <mmc_disk_ioctl+0x30>
    dbac:	88 23       	and	r24, r24
    dbae:	11 f1       	breq	.+68     	; 0xdbf4 <mmc_disk_ioctl+0x6e>
    dbb0:	81 30       	cpi	r24, 0x01	; 1
    dbb2:	11 f1       	breq	.+68     	; 0xdbf8 <mmc_disk_ioctl+0x72>
    dbb4:	1f c2       	rjmp	.+1086   	; 0xdff4 <mmc_disk_ioctl+0x46e>
    dbb6:	87 30       	cpi	r24, 0x07	; 7
    dbb8:	09 f4       	brne	.+2      	; 0xdbbc <mmc_disk_ioctl+0x36>
    dbba:	2a c1       	rjmp	.+596    	; 0xde10 <mmc_disk_ioctl+0x28a>
    dbbc:	82 33       	cpi	r24, 0x32	; 50
    dbbe:	09 f0       	breq	.+2      	; 0xdbc2 <mmc_disk_ioctl+0x3c>
    dbc0:	19 c2       	rjmp	.+1074   	; 0xdff4 <mmc_disk_ioctl+0x46e>
    dbc2:	80 91 19 18 	lds	r24, 0x1819	; 0x801819 <CardType>
    dbc6:	fb 01       	movw	r30, r22
    dbc8:	80 83       	st	Z, r24
    dbca:	28 c1       	rjmp	.+592    	; 0xde1c <mmc_disk_ioctl+0x296>
    dbcc:	86 33       	cpi	r24, 0x36	; 54
    dbce:	09 f4       	brne	.+2      	; 0xdbd2 <mmc_disk_ioctl+0x4c>
    dbd0:	0c c1       	rjmp	.+536    	; 0xddea <mmc_disk_ioctl+0x264>
    dbd2:	38 f4       	brcc	.+14     	; 0xdbe2 <mmc_disk_ioctl+0x5c>
    dbd4:	84 33       	cpi	r24, 0x34	; 52
    dbd6:	09 f4       	brne	.+2      	; 0xdbda <mmc_disk_ioctl+0x54>
    dbd8:	ea c0       	rjmp	.+468    	; 0xddae <mmc_disk_ioctl+0x228>
    dbda:	85 33       	cpi	r24, 0x35	; 53
    dbdc:	09 f4       	brne	.+2      	; 0xdbe0 <mmc_disk_ioctl+0x5a>
    dbde:	f1 c0       	rjmp	.+482    	; 0xddc2 <mmc_disk_ioctl+0x23c>
    dbe0:	09 c2       	rjmp	.+1042   	; 0xdff4 <mmc_disk_ioctl+0x46e>
    dbe2:	88 33       	cpi	r24, 0x38	; 56
    dbe4:	09 f4       	brne	.+2      	; 0xdbe8 <mmc_disk_ioctl+0x62>
    dbe6:	74 c1       	rjmp	.+744    	; 0xded0 <mmc_disk_ioctl+0x34a>
    dbe8:	08 f4       	brcc	.+2      	; 0xdbec <mmc_disk_ioctl+0x66>
    dbea:	1a c1       	rjmp	.+564    	; 0xde20 <mmc_disk_ioctl+0x29a>
    dbec:	89 33       	cpi	r24, 0x39	; 57
    dbee:	09 f4       	brne	.+2      	; 0xdbf2 <mmc_disk_ioctl+0x6c>
    dbf0:	bc c1       	rjmp	.+888    	; 0xdf6a <mmc_disk_ioctl+0x3e4>
    dbf2:	00 c2       	rjmp	.+1024   	; 0xdff4 <mmc_disk_ioctl+0x46e>
    dbf4:	f3 dd       	rcall	.-1050   	; 0xd7dc <select>
    dbf6:	06 c1       	rjmp	.+524    	; 0xde04 <mmc_disk_ioctl+0x27e>
    dbf8:	40 e0       	ldi	r20, 0x00	; 0
    dbfa:	50 e0       	ldi	r21, 0x00	; 0
    dbfc:	ba 01       	movw	r22, r20
    dbfe:	89 e0       	ldi	r24, 0x09	; 9
    dc00:	0a de       	rcall	.-1004   	; 0xd816 <send_cmd>
    dc02:	81 11       	cpse	r24, r1
    dc04:	f1 c1       	rjmp	.+994    	; 0xdfe8 <mmc_disk_ioctl+0x462>
    dc06:	60 e1       	ldi	r22, 0x10	; 16
    dc08:	70 e0       	ldi	r23, 0x00	; 0
    dc0a:	ce 01       	movw	r24, r28
    dc0c:	01 96       	adiw	r24, 0x01	; 1
    dc0e:	ad dd       	rcall	.-1190   	; 0xd76a <rcvr_datablock>
    dc10:	89 2b       	or	r24, r25
    dc12:	09 f4       	brne	.+2      	; 0xdc16 <mmc_disk_ioctl+0x90>
    dc14:	e9 c1       	rjmp	.+978    	; 0xdfe8 <mmc_disk_ioctl+0x462>
    dc16:	99 81       	ldd	r25, Y+1	; 0x01
    dc18:	92 95       	swap	r25
    dc1a:	96 95       	lsr	r25
    dc1c:	96 95       	lsr	r25
    dc1e:	93 70       	andi	r25, 0x03	; 3
    dc20:	29 85       	ldd	r18, Y+9	; 0x09
    dc22:	4a 85       	ldd	r20, Y+10	; 0x0a
    dc24:	88 85       	ldd	r24, Y+8	; 0x08
    dc26:	91 30       	cpi	r25, 0x01	; 1
    dc28:	d9 f4       	brne	.+54     	; 0xdc60 <mmc_disk_ioctl+0xda>
    dc2a:	30 e0       	ldi	r19, 0x00	; 0
    dc2c:	32 2f       	mov	r19, r18
    dc2e:	22 27       	eor	r18, r18
    dc30:	24 0f       	add	r18, r20
    dc32:	31 1d       	adc	r19, r1
    dc34:	8f 73       	andi	r24, 0x3F	; 63
    dc36:	90 e0       	ldi	r25, 0x00	; 0
    dc38:	a0 e0       	ldi	r26, 0x00	; 0
    dc3a:	b0 e0       	ldi	r27, 0x00	; 0
    dc3c:	dc 01       	movw	r26, r24
    dc3e:	99 27       	eor	r25, r25
    dc40:	88 27       	eor	r24, r24
    dc42:	01 96       	adiw	r24, 0x01	; 1
    dc44:	a1 1d       	adc	r26, r1
    dc46:	b1 1d       	adc	r27, r1
    dc48:	82 0f       	add	r24, r18
    dc4a:	93 1f       	adc	r25, r19
    dc4c:	a1 1d       	adc	r26, r1
    dc4e:	b1 1d       	adc	r27, r1
    dc50:	fa e0       	ldi	r31, 0x0A	; 10
    dc52:	88 0f       	add	r24, r24
    dc54:	99 1f       	adc	r25, r25
    dc56:	aa 1f       	adc	r26, r26
    dc58:	bb 1f       	adc	r27, r27
    dc5a:	fa 95       	dec	r31
    dc5c:	d1 f7       	brne	.-12     	; 0xdc52 <mmc_disk_ioctl+0xcc>
    dc5e:	9b c0       	rjmp	.+310    	; 0xdd96 <mmc_disk_ioctl+0x210>
    dc60:	22 95       	swap	r18
    dc62:	26 95       	lsr	r18
    dc64:	26 95       	lsr	r18
    dc66:	23 70       	andi	r18, 0x03	; 3
    dc68:	f4 e0       	ldi	r31, 0x04	; 4
    dc6a:	8f 9f       	mul	r24, r31
    dc6c:	c0 01       	movw	r24, r0
    dc6e:	11 24       	eor	r1, r1
    dc70:	82 0f       	add	r24, r18
    dc72:	91 1d       	adc	r25, r1
    dc74:	01 96       	adiw	r24, 0x01	; 1
    dc76:	2f 81       	ldd	r18, Y+7	; 0x07
    dc78:	23 70       	andi	r18, 0x03	; 3
    dc7a:	30 e0       	ldi	r19, 0x00	; 0
    dc7c:	32 2f       	mov	r19, r18
    dc7e:	22 27       	eor	r18, r18
    dc80:	33 0f       	add	r19, r19
    dc82:	33 0f       	add	r19, r19
    dc84:	82 0f       	add	r24, r18
    dc86:	93 1f       	adc	r25, r19
    dc88:	a0 e0       	ldi	r26, 0x00	; 0
    dc8a:	b0 e0       	ldi	r27, 0x00	; 0
    dc8c:	2e 81       	ldd	r18, Y+6	; 0x06
    dc8e:	32 2f       	mov	r19, r18
    dc90:	3f 70       	andi	r19, 0x0F	; 15
    dc92:	2b 85       	ldd	r18, Y+11	; 0x0b
    dc94:	22 1f       	adc	r18, r18
    dc96:	22 27       	eor	r18, r18
    dc98:	22 1f       	adc	r18, r18
    dc9a:	23 0f       	add	r18, r19
    dc9c:	43 70       	andi	r20, 0x03	; 3
    dc9e:	44 0f       	add	r20, r20
    dca0:	42 0f       	add	r20, r18
    dca2:	47 50       	subi	r20, 0x07	; 7
    dca4:	04 c0       	rjmp	.+8      	; 0xdcae <mmc_disk_ioctl+0x128>
    dca6:	88 0f       	add	r24, r24
    dca8:	99 1f       	adc	r25, r25
    dcaa:	aa 1f       	adc	r26, r26
    dcac:	bb 1f       	adc	r27, r27
    dcae:	4a 95       	dec	r20
    dcb0:	d2 f7       	brpl	.-12     	; 0xdca6 <mmc_disk_ioctl+0x120>
    dcb2:	71 c0       	rjmp	.+226    	; 0xdd96 <mmc_disk_ioctl+0x210>
    dcb4:	80 91 19 18 	lds	r24, 0x1819	; 0x801819 <CardType>
    dcb8:	40 e0       	ldi	r20, 0x00	; 0
    dcba:	50 e0       	ldi	r21, 0x00	; 0
    dcbc:	ba 01       	movw	r22, r20
    dcbe:	82 ff       	sbrs	r24, 2
    dcc0:	24 c0       	rjmp	.+72     	; 0xdd0a <mmc_disk_ioctl+0x184>
    dcc2:	8d e8       	ldi	r24, 0x8D	; 141
    dcc4:	a8 dd       	rcall	.-1200   	; 0xd816 <send_cmd>
    dcc6:	81 11       	cpse	r24, r1
    dcc8:	8f c1       	rjmp	.+798    	; 0xdfe8 <mmc_disk_ioctl+0x462>
    dcca:	8f ef       	ldi	r24, 0xFF	; 255
    dccc:	46 dd       	rcall	.-1396   	; 0xd75a <xchg_spi>
    dcce:	60 e1       	ldi	r22, 0x10	; 16
    dcd0:	70 e0       	ldi	r23, 0x00	; 0
    dcd2:	ce 01       	movw	r24, r28
    dcd4:	01 96       	adiw	r24, 0x01	; 1
    dcd6:	49 dd       	rcall	.-1390   	; 0xd76a <rcvr_datablock>
    dcd8:	89 2b       	or	r24, r25
    dcda:	09 f4       	brne	.+2      	; 0xdcde <mmc_disk_ioctl+0x158>
    dcdc:	85 c1       	rjmp	.+778    	; 0xdfe8 <mmc_disk_ioctl+0x462>
    dcde:	50 e3       	ldi	r21, 0x30	; 48
    dce0:	f5 2e       	mov	r15, r21
    dce2:	8f ef       	ldi	r24, 0xFF	; 255
    dce4:	3a dd       	rcall	.-1420   	; 0xd75a <xchg_spi>
    dce6:	fa 94       	dec	r15
    dce8:	f1 10       	cpse	r15, r1
    dcea:	fb cf       	rjmp	.-10     	; 0xdce2 <mmc_disk_ioctl+0x15c>
    dcec:	2b 85       	ldd	r18, Y+11	; 0x0b
    dcee:	22 95       	swap	r18
    dcf0:	2f 70       	andi	r18, 0x0F	; 15
    dcf2:	80 e1       	ldi	r24, 0x10	; 16
    dcf4:	90 e0       	ldi	r25, 0x00	; 0
    dcf6:	a0 e0       	ldi	r26, 0x00	; 0
    dcf8:	b0 e0       	ldi	r27, 0x00	; 0
    dcfa:	04 c0       	rjmp	.+8      	; 0xdd04 <mmc_disk_ioctl+0x17e>
    dcfc:	88 0f       	add	r24, r24
    dcfe:	99 1f       	adc	r25, r25
    dd00:	aa 1f       	adc	r26, r26
    dd02:	bb 1f       	adc	r27, r27
    dd04:	2a 95       	dec	r18
    dd06:	d2 f7       	brpl	.-12     	; 0xdcfc <mmc_disk_ioctl+0x176>
    dd08:	46 c0       	rjmp	.+140    	; 0xdd96 <mmc_disk_ioctl+0x210>
    dd0a:	89 e0       	ldi	r24, 0x09	; 9
    dd0c:	84 dd       	rcall	.-1272   	; 0xd816 <send_cmd>
    dd0e:	81 11       	cpse	r24, r1
    dd10:	6b c1       	rjmp	.+726    	; 0xdfe8 <mmc_disk_ioctl+0x462>
    dd12:	60 e1       	ldi	r22, 0x10	; 16
    dd14:	70 e0       	ldi	r23, 0x00	; 0
    dd16:	ce 01       	movw	r24, r28
    dd18:	01 96       	adiw	r24, 0x01	; 1
    dd1a:	27 dd       	rcall	.-1458   	; 0xd76a <rcvr_datablock>
    dd1c:	89 2b       	or	r24, r25
    dd1e:	09 f4       	brne	.+2      	; 0xdd22 <mmc_disk_ioctl+0x19c>
    dd20:	63 c1       	rjmp	.+710    	; 0xdfe8 <mmc_disk_ioctl+0x462>
    dd22:	90 91 19 18 	lds	r25, 0x1819	; 0x801819 <CardType>
    dd26:	2b 85       	ldd	r18, Y+11	; 0x0b
    dd28:	8c 85       	ldd	r24, Y+12	; 0x0c
    dd2a:	91 ff       	sbrs	r25, 1
    dd2c:	16 c0       	rjmp	.+44     	; 0xdd5a <mmc_disk_ioctl+0x1d4>
    dd2e:	2f 73       	andi	r18, 0x3F	; 63
    dd30:	88 1f       	adc	r24, r24
    dd32:	88 27       	eor	r24, r24
    dd34:	88 1f       	adc	r24, r24
    dd36:	90 e0       	ldi	r25, 0x00	; 0
    dd38:	01 96       	adiw	r24, 0x01	; 1
    dd3a:	82 0f       	add	r24, r18
    dd3c:	91 1d       	adc	r25, r1
    dd3e:	82 0f       	add	r24, r18
    dd40:	91 1d       	adc	r25, r1
    dd42:	2e 85       	ldd	r18, Y+14	; 0x0e
    dd44:	22 95       	swap	r18
    dd46:	26 95       	lsr	r18
    dd48:	26 95       	lsr	r18
    dd4a:	23 70       	andi	r18, 0x03	; 3
    dd4c:	21 50       	subi	r18, 0x01	; 1
    dd4e:	02 c0       	rjmp	.+4      	; 0xdd54 <mmc_disk_ioctl+0x1ce>
    dd50:	88 0f       	add	r24, r24
    dd52:	99 1f       	adc	r25, r25
    dd54:	2a 95       	dec	r18
    dd56:	e2 f7       	brpl	.-8      	; 0xdd50 <mmc_disk_ioctl+0x1ca>
    dd58:	1c c0       	rjmp	.+56     	; 0xdd92 <mmc_disk_ioctl+0x20c>
    dd5a:	38 2f       	mov	r19, r24
    dd5c:	33 70       	andi	r19, 0x03	; 3
    dd5e:	82 95       	swap	r24
    dd60:	86 95       	lsr	r24
    dd62:	87 70       	andi	r24, 0x07	; 7
    dd64:	90 e0       	ldi	r25, 0x00	; 0
    dd66:	f8 e0       	ldi	r31, 0x08	; 8
    dd68:	3f 9f       	mul	r19, r31
    dd6a:	80 0d       	add	r24, r0
    dd6c:	91 1d       	adc	r25, r1
    dd6e:	11 24       	eor	r1, r1
    dd70:	01 96       	adiw	r24, 0x01	; 1
    dd72:	2c 77       	andi	r18, 0x7C	; 124
    dd74:	30 e0       	ldi	r19, 0x00	; 0
    dd76:	35 95       	asr	r19
    dd78:	27 95       	ror	r18
    dd7a:	35 95       	asr	r19
    dd7c:	27 95       	ror	r18
    dd7e:	2f 5f       	subi	r18, 0xFF	; 255
    dd80:	3f 4f       	sbci	r19, 0xFF	; 255
    dd82:	82 9f       	mul	r24, r18
    dd84:	a0 01       	movw	r20, r0
    dd86:	83 9f       	mul	r24, r19
    dd88:	50 0d       	add	r21, r0
    dd8a:	92 9f       	mul	r25, r18
    dd8c:	50 0d       	add	r21, r0
    dd8e:	11 24       	eor	r1, r1
    dd90:	ca 01       	movw	r24, r20
    dd92:	a0 e0       	ldi	r26, 0x00	; 0
    dd94:	b0 e0       	ldi	r27, 0x00	; 0
    dd96:	f8 01       	movw	r30, r16
    dd98:	80 83       	st	Z, r24
    dd9a:	91 83       	std	Z+1, r25	; 0x01
    dd9c:	a2 83       	std	Z+2, r26	; 0x02
    dd9e:	b3 83       	std	Z+3, r27	; 0x03
    dda0:	00 e0       	ldi	r16, 0x00	; 0
    dda2:	23 c1       	rjmp	.+582    	; 0xdfea <mmc_disk_ioctl+0x464>
    dda4:	40 e0       	ldi	r20, 0x00	; 0
    dda6:	50 e0       	ldi	r21, 0x00	; 0
    dda8:	ba 01       	movw	r22, r20
    ddaa:	89 e0       	ldi	r24, 0x09	; 9
    ddac:	04 c0       	rjmp	.+8      	; 0xddb6 <mmc_disk_ioctl+0x230>
    ddae:	40 e0       	ldi	r20, 0x00	; 0
    ddb0:	50 e0       	ldi	r21, 0x00	; 0
    ddb2:	ba 01       	movw	r22, r20
    ddb4:	8a e0       	ldi	r24, 0x0A	; 10
    ddb6:	2f dd       	rcall	.-1442   	; 0xd816 <send_cmd>
    ddb8:	81 11       	cpse	r24, r1
    ddba:	16 c1       	rjmp	.+556    	; 0xdfe8 <mmc_disk_ioctl+0x462>
    ddbc:	60 e1       	ldi	r22, 0x10	; 16
    ddbe:	70 e0       	ldi	r23, 0x00	; 0
    ddc0:	1f c0       	rjmp	.+62     	; 0xde00 <mmc_disk_ioctl+0x27a>
    ddc2:	40 e0       	ldi	r20, 0x00	; 0
    ddc4:	50 e0       	ldi	r21, 0x00	; 0
    ddc6:	ba 01       	movw	r22, r20
    ddc8:	8a e3       	ldi	r24, 0x3A	; 58
    ddca:	25 dd       	rcall	.-1462   	; 0xd816 <send_cmd>
    ddcc:	81 11       	cpse	r24, r1
    ddce:	0c c1       	rjmp	.+536    	; 0xdfe8 <mmc_disk_ioctl+0x462>
    ddd0:	78 01       	movw	r14, r16
    ddd2:	f4 e0       	ldi	r31, 0x04	; 4
    ddd4:	ef 0e       	add	r14, r31
    ddd6:	f1 1c       	adc	r15, r1
    ddd8:	8f ef       	ldi	r24, 0xFF	; 255
    ddda:	8d d1       	rcall	.+794    	; 0xe0f6 <mmc_spi_TXRX>
    dddc:	f8 01       	movw	r30, r16
    ddde:	81 93       	st	Z+, r24
    dde0:	8f 01       	movw	r16, r30
    dde2:	ee 15       	cp	r30, r14
    dde4:	ff 05       	cpc	r31, r15
    dde6:	c1 f7       	brne	.-16     	; 0xddd8 <mmc_disk_ioctl+0x252>
    dde8:	db cf       	rjmp	.-74     	; 0xdda0 <mmc_disk_ioctl+0x21a>
    ddea:	40 e0       	ldi	r20, 0x00	; 0
    ddec:	50 e0       	ldi	r21, 0x00	; 0
    ddee:	ba 01       	movw	r22, r20
    ddf0:	8d e8       	ldi	r24, 0x8D	; 141
    ddf2:	11 dd       	rcall	.-1502   	; 0xd816 <send_cmd>
    ddf4:	81 11       	cpse	r24, r1
    ddf6:	f8 c0       	rjmp	.+496    	; 0xdfe8 <mmc_disk_ioctl+0x462>
    ddf8:	8f ef       	ldi	r24, 0xFF	; 255
    ddfa:	af dc       	rcall	.-1698   	; 0xd75a <xchg_spi>
    ddfc:	60 e4       	ldi	r22, 0x40	; 64
    ddfe:	70 e0       	ldi	r23, 0x00	; 0
    de00:	c8 01       	movw	r24, r16
    de02:	b3 dc       	rcall	.-1690   	; 0xd76a <rcvr_datablock>
    de04:	01 e0       	ldi	r16, 0x01	; 1
    de06:	10 e0       	ldi	r17, 0x00	; 0
    de08:	89 2b       	or	r24, r25
    de0a:	09 f4       	brne	.+2      	; 0xde0e <mmc_disk_ioctl+0x288>
    de0c:	ef c0       	rjmp	.+478    	; 0xdfec <mmc_disk_ioctl+0x466>
    de0e:	ea c0       	rjmp	.+468    	; 0xdfe4 <mmc_disk_ioctl+0x45e>
    de10:	39 d2       	rcall	.+1138   	; 0xe284 <mmc_power_off>
    de12:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    de16:	81 60       	ori	r24, 0x01	; 1
    de18:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <Stat>
    de1c:	00 e0       	ldi	r16, 0x00	; 0
    de1e:	eb c0       	rjmp	.+470    	; 0xdff6 <mmc_disk_ioctl+0x470>
    de20:	fb 01       	movw	r30, r22
    de22:	43 81       	ldd	r20, Z+3	; 0x03
    de24:	54 81       	ldd	r21, Z+4	; 0x04
    de26:	65 81       	ldd	r22, Z+5	; 0x05
    de28:	76 81       	ldd	r23, Z+6	; 0x06
    de2a:	39 e0       	ldi	r19, 0x09	; 9
    de2c:	44 0f       	add	r20, r20
    de2e:	55 1f       	adc	r21, r21
    de30:	66 1f       	adc	r22, r22
    de32:	77 1f       	adc	r23, r23
    de34:	3a 95       	dec	r19
    de36:	d1 f7       	brne	.-12     	; 0xde2c <mmc_disk_ioctl+0x2a6>
    de38:	70 68       	ori	r23, 0x80	; 128
    de3a:	80 81       	ld	r24, Z
    de3c:	90 e0       	ldi	r25, 0x00	; 0
    de3e:	a0 e0       	ldi	r26, 0x00	; 0
    de40:	b0 e0       	ldi	r27, 0x00	; 0
    de42:	2c e1       	ldi	r18, 0x1C	; 28
    de44:	88 0f       	add	r24, r24
    de46:	99 1f       	adc	r25, r25
    de48:	aa 1f       	adc	r26, r26
    de4a:	bb 1f       	adc	r27, r27
    de4c:	2a 95       	dec	r18
    de4e:	d1 f7       	brne	.-12     	; 0xde44 <mmc_disk_ioctl+0x2be>
    de50:	48 2b       	or	r20, r24
    de52:	59 2b       	or	r21, r25
    de54:	6a 2b       	or	r22, r26
    de56:	7b 2b       	or	r23, r27
    de58:	81 81       	ldd	r24, Z+1	; 0x01
    de5a:	92 81       	ldd	r25, Z+2	; 0x02
    de5c:	01 97       	sbiw	r24, 0x01	; 1
    de5e:	91 70       	andi	r25, 0x01	; 1
    de60:	a0 e0       	ldi	r26, 0x00	; 0
    de62:	b0 e0       	ldi	r27, 0x00	; 0
    de64:	48 2b       	or	r20, r24
    de66:	59 2b       	or	r21, r25
    de68:	6a 2b       	or	r22, r26
    de6a:	7b 2b       	or	r23, r27
    de6c:	80 e3       	ldi	r24, 0x30	; 48
    de6e:	d3 dc       	rcall	.-1626   	; 0xd816 <send_cmd>
    de70:	81 11       	cpse	r24, r1
    de72:	ba c0       	rjmp	.+372    	; 0xdfe8 <mmc_disk_ioctl+0x462>
    de74:	88 ee       	ldi	r24, 0xE8	; 232
    de76:	93 e0       	ldi	r25, 0x03	; 3
    de78:	41 d1       	rcall	.+642    	; 0xe0fc <mmc_set_ms_timeout>
    de7a:	8f ef       	ldi	r24, 0xFF	; 255
    de7c:	3c d1       	rcall	.+632    	; 0xe0f6 <mmc_spi_TXRX>
    de7e:	8f 3f       	cpi	r24, 0xFF	; 255
    de80:	21 f4       	brne	.+8      	; 0xde8a <mmc_disk_ioctl+0x304>
    de82:	43 d1       	rcall	.+646    	; 0xe10a <mmc_test_timeout>
    de84:	89 2b       	or	r24, r25
    de86:	c9 f3       	breq	.-14     	; 0xde7a <mmc_disk_ioctl+0x2f4>
    de88:	af c0       	rjmp	.+350    	; 0xdfe8 <mmc_disk_ioctl+0x462>
    de8a:	8e 3f       	cpi	r24, 0xFE	; 254
    de8c:	09 f0       	breq	.+2      	; 0xde90 <mmc_disk_ioctl+0x30a>
    de8e:	ac c0       	rjmp	.+344    	; 0xdfe8 <mmc_disk_ioctl+0x462>
    de90:	f8 01       	movw	r30, r16
    de92:	e7 80       	ldd	r14, Z+7	; 0x07
    de94:	f0 84       	ldd	r15, Z+8	; 0x08
    de96:	c1 80       	ldd	r12, Z+1	; 0x01
    de98:	d2 80       	ldd	r13, Z+2	; 0x02
    de9a:	ce 0c       	add	r12, r14
    de9c:	df 1c       	adc	r13, r15
    de9e:	ce 14       	cp	r12, r14
    dea0:	df 04       	cpc	r13, r15
    dea2:	31 f0       	breq	.+12     	; 0xdeb0 <mmc_disk_ioctl+0x32a>
    dea4:	8f ef       	ldi	r24, 0xFF	; 255
    dea6:	27 d1       	rcall	.+590    	; 0xe0f6 <mmc_spi_TXRX>
    dea8:	f7 01       	movw	r30, r14
    deaa:	81 93       	st	Z+, r24
    deac:	7f 01       	movw	r14, r30
    deae:	f7 cf       	rjmp	.-18     	; 0xde9e <mmc_disk_ioctl+0x318>
    deb0:	f8 01       	movw	r30, r16
    deb2:	81 81       	ldd	r24, Z+1	; 0x01
    deb4:	92 81       	ldd	r25, Z+2	; 0x02
    deb6:	02 e0       	ldi	r16, 0x02	; 2
    deb8:	12 e0       	ldi	r17, 0x02	; 2
    deba:	08 1b       	sub	r16, r24
    debc:	19 0b       	sbc	r17, r25
    debe:	01 15       	cp	r16, r1
    dec0:	11 05       	cpc	r17, r1
    dec2:	09 f4       	brne	.+2      	; 0xdec6 <mmc_disk_ioctl+0x340>
    dec4:	6d cf       	rjmp	.-294    	; 0xdda0 <mmc_disk_ioctl+0x21a>
    dec6:	8f ef       	ldi	r24, 0xFF	; 255
    dec8:	48 dc       	rcall	.-1904   	; 0xd75a <xchg_spi>
    deca:	01 50       	subi	r16, 0x01	; 1
    decc:	11 09       	sbc	r17, r1
    dece:	f7 cf       	rjmp	.-18     	; 0xdebe <mmc_disk_ioctl+0x338>
    ded0:	fb 01       	movw	r30, r22
    ded2:	43 81       	ldd	r20, Z+3	; 0x03
    ded4:	54 81       	ldd	r21, Z+4	; 0x04
    ded6:	65 81       	ldd	r22, Z+5	; 0x05
    ded8:	76 81       	ldd	r23, Z+6	; 0x06
    deda:	39 e0       	ldi	r19, 0x09	; 9
    dedc:	44 0f       	add	r20, r20
    dede:	55 1f       	adc	r21, r21
    dee0:	66 1f       	adc	r22, r22
    dee2:	77 1f       	adc	r23, r23
    dee4:	3a 95       	dec	r19
    dee6:	d1 f7       	brne	.-12     	; 0xdedc <mmc_disk_ioctl+0x356>
    dee8:	70 68       	ori	r23, 0x80	; 128
    deea:	80 81       	ld	r24, Z
    deec:	90 e0       	ldi	r25, 0x00	; 0
    deee:	a0 e0       	ldi	r26, 0x00	; 0
    def0:	b0 e0       	ldi	r27, 0x00	; 0
    def2:	2c e1       	ldi	r18, 0x1C	; 28
    def4:	88 0f       	add	r24, r24
    def6:	99 1f       	adc	r25, r25
    def8:	aa 1f       	adc	r26, r26
    defa:	bb 1f       	adc	r27, r27
    defc:	2a 95       	dec	r18
    defe:	d1 f7       	brne	.-12     	; 0xdef4 <mmc_disk_ioctl+0x36e>
    df00:	48 2b       	or	r20, r24
    df02:	59 2b       	or	r21, r25
    df04:	6a 2b       	or	r22, r26
    df06:	7b 2b       	or	r23, r27
    df08:	81 81       	ldd	r24, Z+1	; 0x01
    df0a:	92 81       	ldd	r25, Z+2	; 0x02
    df0c:	01 97       	sbiw	r24, 0x01	; 1
    df0e:	91 70       	andi	r25, 0x01	; 1
    df10:	a0 e0       	ldi	r26, 0x00	; 0
    df12:	b0 e0       	ldi	r27, 0x00	; 0
    df14:	48 2b       	or	r20, r24
    df16:	59 2b       	or	r21, r25
    df18:	6a 2b       	or	r22, r26
    df1a:	7b 2b       	or	r23, r27
    df1c:	81 e3       	ldi	r24, 0x31	; 49
    df1e:	7b dc       	rcall	.-1802   	; 0xd816 <send_cmd>
    df20:	81 11       	cpse	r24, r1
    df22:	62 c0       	rjmp	.+196    	; 0xdfe8 <mmc_disk_ioctl+0x462>
    df24:	8f ef       	ldi	r24, 0xFF	; 255
    df26:	19 dc       	rcall	.-1998   	; 0xd75a <xchg_spi>
    df28:	8e ef       	ldi	r24, 0xFE	; 254
    df2a:	17 dc       	rcall	.-2002   	; 0xd75a <xchg_spi>
    df2c:	f8 01       	movw	r30, r16
    df2e:	e7 80       	ldd	r14, Z+7	; 0x07
    df30:	f0 84       	ldd	r15, Z+8	; 0x08
    df32:	c1 80       	ldd	r12, Z+1	; 0x01
    df34:	d2 80       	ldd	r13, Z+2	; 0x02
    df36:	ce 0c       	add	r12, r14
    df38:	df 1c       	adc	r13, r15
    df3a:	ec 14       	cp	r14, r12
    df3c:	fd 04       	cpc	r15, r13
    df3e:	29 f0       	breq	.+10     	; 0xdf4a <mmc_disk_ioctl+0x3c4>
    df40:	f7 01       	movw	r30, r14
    df42:	81 91       	ld	r24, Z+
    df44:	7f 01       	movw	r14, r30
    df46:	09 dc       	rcall	.-2030   	; 0xd75a <xchg_spi>
    df48:	f8 cf       	rjmp	.-16     	; 0xdf3a <mmc_disk_ioctl+0x3b4>
    df4a:	f8 01       	movw	r30, r16
    df4c:	81 81       	ldd	r24, Z+1	; 0x01
    df4e:	92 81       	ldd	r25, Z+2	; 0x02
    df50:	02 e0       	ldi	r16, 0x02	; 2
    df52:	12 e0       	ldi	r17, 0x02	; 2
    df54:	08 1b       	sub	r16, r24
    df56:	19 0b       	sbc	r17, r25
    df58:	8f ef       	ldi	r24, 0xFF	; 255
    df5a:	01 15       	cp	r16, r1
    df5c:	11 05       	cpc	r17, r1
    df5e:	09 f4       	brne	.+2      	; 0xdf62 <mmc_disk_ioctl+0x3dc>
    df60:	3b c0       	rjmp	.+118    	; 0xdfd8 <mmc_disk_ioctl+0x452>
    df62:	fb db       	rcall	.-2058   	; 0xd75a <xchg_spi>
    df64:	01 50       	subi	r16, 0x01	; 1
    df66:	11 09       	sbc	r17, r1
    df68:	f7 cf       	rjmp	.-18     	; 0xdf58 <mmc_disk_ioctl+0x3d2>
    df6a:	fb 01       	movw	r30, r22
    df6c:	43 81       	ldd	r20, Z+3	; 0x03
    df6e:	54 81       	ldd	r21, Z+4	; 0x04
    df70:	65 81       	ldd	r22, Z+5	; 0x05
    df72:	76 81       	ldd	r23, Z+6	; 0x06
    df74:	89 e0       	ldi	r24, 0x09	; 9
    df76:	44 0f       	add	r20, r20
    df78:	55 1f       	adc	r21, r21
    df7a:	66 1f       	adc	r22, r22
    df7c:	77 1f       	adc	r23, r23
    df7e:	8a 95       	dec	r24
    df80:	d1 f7       	brne	.-12     	; 0xdf76 <mmc_disk_ioctl+0x3f0>
    df82:	74 68       	ori	r23, 0x84	; 132
    df84:	80 81       	ld	r24, Z
    df86:	90 e0       	ldi	r25, 0x00	; 0
    df88:	a0 e0       	ldi	r26, 0x00	; 0
    df8a:	b0 e0       	ldi	r27, 0x00	; 0
    df8c:	2c e1       	ldi	r18, 0x1C	; 28
    df8e:	88 0f       	add	r24, r24
    df90:	99 1f       	adc	r25, r25
    df92:	aa 1f       	adc	r26, r26
    df94:	bb 1f       	adc	r27, r27
    df96:	2a 95       	dec	r18
    df98:	d1 f7       	brne	.-12     	; 0xdf8e <mmc_disk_ioctl+0x408>
    df9a:	48 2b       	or	r20, r24
    df9c:	59 2b       	or	r21, r25
    df9e:	6a 2b       	or	r22, r26
    dfa0:	7b 2b       	or	r23, r27
    dfa2:	82 81       	ldd	r24, Z+2	; 0x02
    dfa4:	90 e0       	ldi	r25, 0x00	; 0
    dfa6:	a0 e0       	ldi	r26, 0x00	; 0
    dfa8:	b0 e0       	ldi	r27, 0x00	; 0
    dfaa:	48 2b       	or	r20, r24
    dfac:	59 2b       	or	r21, r25
    dfae:	6a 2b       	or	r22, r26
    dfb0:	7b 2b       	or	r23, r27
    dfb2:	81 e3       	ldi	r24, 0x31	; 49
    dfb4:	30 dc       	rcall	.-1952   	; 0xd816 <send_cmd>
    dfb6:	81 11       	cpse	r24, r1
    dfb8:	17 c0       	rjmp	.+46     	; 0xdfe8 <mmc_disk_ioctl+0x462>
    dfba:	8f ef       	ldi	r24, 0xFF	; 255
    dfbc:	ce db       	rcall	.-2148   	; 0xd75a <xchg_spi>
    dfbe:	8e ef       	ldi	r24, 0xFE	; 254
    dfc0:	cc db       	rcall	.-2152   	; 0xd75a <xchg_spi>
    dfc2:	f8 01       	movw	r30, r16
    dfc4:	81 81       	ldd	r24, Z+1	; 0x01
    dfc6:	c9 db       	rcall	.-2158   	; 0xd75a <xchg_spi>
    dfc8:	01 e0       	ldi	r16, 0x01	; 1
    dfca:	12 e0       	ldi	r17, 0x02	; 2
    dfcc:	8f ef       	ldi	r24, 0xFF	; 255
    dfce:	c5 db       	rcall	.-2166   	; 0xd75a <xchg_spi>
    dfd0:	01 50       	subi	r16, 0x01	; 1
    dfd2:	11 09       	sbc	r17, r1
    dfd4:	d9 f7       	brne	.-10     	; 0xdfcc <mmc_disk_ioctl+0x446>
    dfd6:	8f ef       	ldi	r24, 0xFF	; 255
    dfd8:	8e d0       	rcall	.+284    	; 0xe0f6 <mmc_spi_TXRX>
    dfda:	8f 71       	andi	r24, 0x1F	; 31
    dfdc:	01 e0       	ldi	r16, 0x01	; 1
    dfde:	10 e0       	ldi	r17, 0x00	; 0
    dfe0:	85 30       	cpi	r24, 0x05	; 5
    dfe2:	21 f4       	brne	.+8      	; 0xdfec <mmc_disk_ioctl+0x466>
    dfe4:	00 e0       	ldi	r16, 0x00	; 0
    dfe6:	02 c0       	rjmp	.+4      	; 0xdfec <mmc_disk_ioctl+0x466>
    dfe8:	01 e0       	ldi	r16, 0x01	; 1
    dfea:	10 e0       	ldi	r17, 0x00	; 0
    dfec:	b8 db       	rcall	.-2192   	; 0xd75e <deselect>
    dfee:	04 c0       	rjmp	.+8      	; 0xdff8 <mmc_disk_ioctl+0x472>
    dff0:	03 e0       	ldi	r16, 0x03	; 3
    dff2:	01 c0       	rjmp	.+2      	; 0xdff6 <mmc_disk_ioctl+0x470>
    dff4:	04 e0       	ldi	r16, 0x04	; 4
    dff6:	10 e0       	ldi	r17, 0x00	; 0
    dff8:	c8 01       	movw	r24, r16
    dffa:	60 96       	adiw	r28, 0x10	; 16
    dffc:	e8 e0       	ldi	r30, 0x08	; 8
    dffe:	0c 94 19 e6 	jmp	0x1cc32	; 0x1cc32 <__epilogue_restores__+0x14>

0000e002 <mmc_disk_timerproc>:
    e002:	80 91 1b 18 	lds	r24, 0x181B	; 0x80181b <Timer1>
    e006:	88 23       	and	r24, r24
    e008:	19 f0       	breq	.+6      	; 0xe010 <mmc_disk_timerproc+0xe>
    e00a:	81 50       	subi	r24, 0x01	; 1
    e00c:	80 93 1b 18 	sts	0x181B, r24	; 0x80181b <Timer1>
    e010:	80 91 1a 18 	lds	r24, 0x181A	; 0x80181a <Timer2>
    e014:	88 23       	and	r24, r24
    e016:	19 f0       	breq	.+6      	; 0xe01e <mmc_disk_timerproc+0x1c>
    e018:	81 50       	subi	r24, 0x01	; 1
    e01a:	80 93 1a 18 	sts	0x181A, r24	; 0x80181a <Timer2>
    e01e:	08 95       	ret

0000e020 <mmc_task>:
void mmc_ms_wait(int ms)
{
    mmc_set_ms_timeout(ms);
    while(!mmc_test_timeout())
        ;
}
    e020:	80 91 22 18 	lds	r24, 0x1822	; 0x801822 <_mmc_timeout>
    e024:	90 91 23 18 	lds	r25, 0x1823	; 0x801823 <_mmc_timeout+0x1>
    e028:	00 97       	sbiw	r24, 0x00	; 0
    e02a:	29 f0       	breq	.+10     	; 0xe036 <mmc_task+0x16>
    e02c:	01 97       	sbiw	r24, 0x01	; 1
    e02e:	90 93 23 18 	sts	0x1823, r25	; 0x801823 <_mmc_timeout+0x1>
    e032:	80 93 22 18 	sts	0x1822, r24	; 0x801822 <_mmc_timeout>
    e036:	80 91 1c 18 	lds	r24, 0x181C	; 0x80181c <_mmc_pre>
    e03a:	90 91 1d 18 	lds	r25, 0x181D	; 0x80181d <_mmc_pre+0x1>
    e03e:	8a 30       	cpi	r24, 0x0A	; 10
    e040:	91 05       	cpc	r25, r1
    e042:	30 f4       	brcc	.+12     	; 0xe050 <mmc_task+0x30>
    e044:	01 96       	adiw	r24, 0x01	; 1
    e046:	90 93 1d 18 	sts	0x181D, r25	; 0x80181d <_mmc_pre+0x1>
    e04a:	80 93 1c 18 	sts	0x181C, r24	; 0x80181c <_mmc_pre>
    e04e:	08 95       	ret
    e050:	10 92 1d 18 	sts	0x181D, r1	; 0x80181d <_mmc_pre+0x1>
    e054:	10 92 1c 18 	sts	0x181C, r1	; 0x80181c <_mmc_pre>
    e058:	d4 cf       	rjmp	.-88     	; 0xe002 <mmc_disk_timerproc>
    e05a:	08 95       	ret

0000e05c <mmc_install_timer>:
    e05c:	10 92 23 18 	sts	0x1823, r1	; 0x801823 <_mmc_timeout+0x1>
    e060:	10 92 22 18 	sts	0x1822, r1	; 0x801822 <_mmc_timeout>
    e064:	61 e0       	ldi	r22, 0x01	; 1
    e066:	70 e0       	ldi	r23, 0x00	; 0
    e068:	80 e1       	ldi	r24, 0x10	; 16
    e06a:	90 e7       	ldi	r25, 0x70	; 112
    e06c:	0e 94 df 35 	call	0x6bbe	; 0x6bbe <set_timers>
    e070:	01 96       	adiw	r24, 0x01	; 1
    e072:	51 f4       	brne	.+20     	; 0xe088 <mmc_install_timer+0x2c>
    e074:	87 e4       	ldi	r24, 0x47	; 71
    e076:	98 e0       	ldi	r25, 0x08	; 8
    e078:	1f 92       	push	r1
    e07a:	9f 93       	push	r25
    e07c:	8f 93       	push	r24
    e07e:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    e082:	0f 90       	pop	r0
    e084:	0f 90       	pop	r0
    e086:	0f 90       	pop	r0
    e088:	08 95       	ret

0000e08a <mmc_spi_begin>:
    e08a:	60 91 1e 18 	lds	r22, 0x181E	; 0x80181e <_mmc_clock>
    e08e:	70 91 1f 18 	lds	r23, 0x181F	; 0x80181f <_mmc_clock+0x1>
    e092:	80 91 20 18 	lds	r24, 0x1820	; 0x801820 <_mmc_clock+0x2>
    e096:	90 91 21 18 	lds	r25, 0x1821	; 0x801821 <_mmc_clock+0x3>
    e09a:	4b e0       	ldi	r20, 0x0B	; 11
    e09c:	50 e0       	ldi	r21, 0x00	; 0
    e09e:	0c 94 a2 28 	jmp	0x5144	; 0x5144 <spi_begin>
    e0a2:	08 95       	ret

0000e0a4 <mmc_spi_end>:
    e0a4:	8b e0       	ldi	r24, 0x0B	; 11
    e0a6:	0c 94 4c 28 	jmp	0x5098	; 0x5098 <spi_end>
    e0aa:	08 95       	ret

0000e0ac <mmc_slow>:
    e0ac:	80 e2       	ldi	r24, 0x20	; 32
    e0ae:	91 ea       	ldi	r25, 0xA1	; 161
    e0b0:	a7 e0       	ldi	r26, 0x07	; 7
    e0b2:	b0 e0       	ldi	r27, 0x00	; 0
    e0b4:	80 93 1e 18 	sts	0x181E, r24	; 0x80181e <_mmc_clock>
    e0b8:	90 93 1f 18 	sts	0x181F, r25	; 0x80181f <_mmc_clock+0x1>
    e0bc:	a0 93 20 18 	sts	0x1820, r26	; 0x801820 <_mmc_clock+0x2>
    e0c0:	b0 93 21 18 	sts	0x1821, r27	; 0x801821 <_mmc_clock+0x3>
    e0c4:	08 95       	ret

0000e0c6 <mmc_spi_init>:
    e0c6:	8b e0       	ldi	r24, 0x0B	; 11
    e0c8:	0e 94 4a 28 	call	0x5094	; 0x5094 <chip_select_init>
    e0cc:	ef cf       	rjmp	.-34     	; 0xe0ac <mmc_slow>
    e0ce:	08 95       	ret

0000e0d0 <mmc_fast>:
    e0d0:	80 ea       	ldi	r24, 0xA0	; 160
    e0d2:	95 e2       	ldi	r25, 0x25	; 37
    e0d4:	a6 e2       	ldi	r26, 0x26	; 38
    e0d6:	b0 e0       	ldi	r27, 0x00	; 0
    e0d8:	80 93 1e 18 	sts	0x181E, r24	; 0x80181e <_mmc_clock>
    e0dc:	90 93 1f 18 	sts	0x181F, r25	; 0x80181f <_mmc_clock+0x1>
    e0e0:	a0 93 20 18 	sts	0x1820, r26	; 0x801820 <_mmc_clock+0x2>
    e0e4:	b0 93 21 18 	sts	0x1821, r27	; 0x801821 <_mmc_clock+0x3>
    e0e8:	08 95       	ret

0000e0ea <mmc_spi_TX_buffer>:
    e0ea:	0c 94 6e 28 	jmp	0x50dc	; 0x50dc <spi_TX_buffer>
    e0ee:	08 95       	ret

0000e0f0 <mmc_spi_RX_buffer>:
    e0f0:	0c 94 70 28 	jmp	0x50e0	; 0x50e0 <spi_RX_buffer>
    e0f4:	08 95       	ret

0000e0f6 <mmc_spi_TXRX>:
    e0f6:	0c 94 de 28 	jmp	0x51bc	; 0x51bc <spi_TXRX>
    e0fa:	08 95       	ret

0000e0fc <mmc_set_ms_timeout>:
    e0fc:	f8 94       	cli
    e0fe:	90 93 23 18 	sts	0x1823, r25	; 0x801823 <_mmc_timeout+0x1>
    e102:	80 93 22 18 	sts	0x1822, r24	; 0x801822 <_mmc_timeout>
    e106:	78 94       	sei
    e108:	08 95       	ret

0000e10a <mmc_test_timeout>:
    e10a:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    e10e:	81 fd       	sbrc	r24, 1
    e110:	15 c0       	rjmp	.+42     	; 0xe13c <mmc_test_timeout+0x32>
    e112:	80 91 22 18 	lds	r24, 0x1822	; 0x801822 <_mmc_timeout>
    e116:	90 91 23 18 	lds	r25, 0x1823	; 0x801823 <_mmc_timeout+0x1>
    e11a:	89 2b       	or	r24, r25
    e11c:	91 f4       	brne	.+36     	; 0xe142 <mmc_test_timeout+0x38>
    e11e:	8a e3       	ldi	r24, 0x3A	; 58
    e120:	98 e0       	ldi	r25, 0x08	; 8
    e122:	1f 92       	push	r1
    e124:	9f 93       	push	r25
    e126:	8f 93       	push	r24
    e128:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    e12c:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    e130:	83 60       	ori	r24, 0x03	; 3
    e132:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <Stat>
    e136:	0f 90       	pop	r0
    e138:	0f 90       	pop	r0
    e13a:	0f 90       	pop	r0
    e13c:	81 e0       	ldi	r24, 0x01	; 1
    e13e:	90 e0       	ldi	r25, 0x00	; 0
    e140:	08 95       	ret
    e142:	80 e0       	ldi	r24, 0x00	; 0
    e144:	90 e0       	ldi	r25, 0x00	; 0
    e146:	08 95       	ret

0000e148 <mmc_init>:
///
/// @param[in] verbose: display initialisation messages
/// @return
MEMSPACE
int mmc_init(int verbose)
{
    e148:	a4 e0       	ldi	r26, 0x04	; 4
    e14a:	b0 e0       	ldi	r27, 0x00	; 0
    e14c:	ea ea       	ldi	r30, 0xAA	; 170
    e14e:	f0 e7       	ldi	r31, 0x70	; 112
    e150:	0c 94 ff e5 	jmp	0x1cbfe	; 0x1cbfe <__prologue_saves__+0x18>
    e154:	7c 01       	movw	r14, r24
    int rc;

    Stat = 0;
    e156:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <Stat>

    mmc_spi_init();

    if( verbose)
    e15a:	b5 df       	rcall	.-150    	; 0xe0c6 <mmc_spi_init>
    e15c:	e1 14       	cp	r14, r1
    e15e:	f1 04       	cpc	r15, r1
    {
        printf("START MMC INIT\n");
    e160:	51 f0       	breq	.+20     	; 0xe176 <mmc_init+0x2e>
    e162:	8a e2       	ldi	r24, 0x2A	; 42
    e164:	98 e0       	ldi	r25, 0x08	; 8
    e166:	1f 92       	push	r1
    e168:	9f 93       	push	r25
    e16a:	8f 93       	push	r24
    e16c:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    e170:	0f 90       	pop	r0
    e172:	0f 90       	pop	r0
    }
    // we only install timers once!
    if(!mmc_init_flag)
    e174:	0f 90       	pop	r0
    e176:	80 91 24 18 	lds	r24, 0x1824	; 0x801824 <mmc_init_flag>
    e17a:	90 91 25 18 	lds	r25, 0x1825	; 0x801825 <mmc_init_flag+0x1>
        mmc_install_timer();
    e17e:	89 2b       	or	r24, r25
    e180:	09 f4       	brne	.+2      	; 0xe184 <mmc_init+0x3c>

    if( verbose)
    e182:	6c df       	rcall	.-296    	; 0xe05c <mmc_install_timer>
    e184:	e1 14       	cp	r14, r1
    e186:	f1 04       	cpc	r15, r1
    {
#if defined (FF_USE_LFN)
        printf("LFN Enabled");
    e188:	b9 f0       	breq	.+46     	; 0xe1b8 <mmc_init+0x70>
    e18a:	8e e1       	ldi	r24, 0x1E	; 30
    e18c:	98 e0       	ldi	r25, 0x08	; 8
    e18e:	1f 92       	push	r1
    e190:	9f 93       	push	r25
    e192:	8f 93       	push	r24
    e194:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
#else
        printf("LFN Disabled");
#endif
        printf(", Code page: %u\n", FF_CODE_PAGE);
    e198:	81 e0       	ldi	r24, 0x01	; 1
    e19a:	8f 93       	push	r24
    e19c:	85 eb       	ldi	r24, 0xB5	; 181
    e19e:	8f 93       	push	r24
    e1a0:	8d e0       	ldi	r24, 0x0D	; 13
    e1a2:	98 e0       	ldi	r25, 0x08	; 8
    e1a4:	1f 92       	push	r1
    e1a6:	9f 93       	push	r25
    e1a8:	8f 93       	push	r24
    e1aa:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    e1ae:	0f b6       	in	r0, 0x3f	; 63
    e1b0:	f8 94       	cli
    e1b2:	de bf       	out	0x3e, r29	; 62
    }

    rc = disk_initialize(DEV_MMC);    // aliased to mmc_disk_initialize()
    e1b4:	0f be       	out	0x3f, r0	; 63
    e1b6:	cd bf       	out	0x3d, r28	; 61
    e1b8:	80 e0       	ldi	r24, 0x00	; 0
    e1ba:	9f da       	rcall	.-2754   	; 0xd6fa <disk_initialize>
    e1bc:	08 2f       	mov	r16, r24

    if( rc != RES_OK  )
    e1be:	10 e0       	ldi	r17, 0x00	; 0
    e1c0:	01 15       	cp	r16, r1
        put_rc(rc);
    e1c2:	11 05       	cpc	r17, r1
    e1c4:	19 f0       	breq	.+6      	; 0xe1cc <mmc_init+0x84>
    e1c6:	c8 01       	movw	r24, r16
    e1c8:	e3 d0       	rcall	.+454    	; 0xe390 <put_rc>

    if( rc == RES_OK)
        rc = f_mount(&Fatfs[0],"/", 0);
    e1ca:	0e c0       	rjmp	.+28     	; 0xe1e8 <mmc_init+0xa0>
    e1cc:	40 e0       	ldi	r20, 0x00	; 0
    e1ce:	68 e3       	ldi	r22, 0x38	; 56
    e1d0:	78 e0       	ldi	r23, 0x08	; 8
    e1d2:	80 e8       	ldi	r24, 0x80	; 128
    e1d4:	99 e1       	ldi	r25, 0x19	; 25
    e1d6:	0e 94 14 5b 	call	0xb628	; 0xb628 <f_mount>

    if( rc != RES_OK || verbose)
    e1da:	8c 01       	movw	r16, r24
    e1dc:	89 2b       	or	r24, r25
    e1de:	21 f4       	brne	.+8      	; 0xe1e8 <mmc_init+0xa0>
    e1e0:	e1 14       	cp	r14, r1
    e1e2:	f1 04       	cpc	r15, r1
        put_rc( rc );
    e1e4:	09 f4       	brne	.+2      	; 0xe1e8 <mmc_init+0xa0>
    e1e6:	43 c0       	rjmp	.+134    	; 0xe26e <mmc_init+0x126>
    e1e8:	c8 01       	movw	r24, r16

    if (verbose )
    e1ea:	d2 d0       	rcall	.+420    	; 0xe390 <put_rc>
    e1ec:	e1 14       	cp	r14, r1
    e1ee:	f1 04       	cpc	r15, r1
    e1f0:	09 f4       	brne	.+2      	; 0xe1f4 <mmc_init+0xac>
    {
        DWORD blksize = 0;
    e1f2:	3d c0       	rjmp	.+122    	; 0xe26e <mmc_init+0x126>
    e1f4:	19 82       	std	Y+1, r1	; 0x01
    e1f6:	1a 82       	std	Y+2, r1	; 0x02
    e1f8:	1b 82       	std	Y+3, r1	; 0x03
        if(rc == RES_OK)
    e1fa:	1c 82       	std	Y+4, r1	; 0x04
    e1fc:	01 15       	cp	r16, r1
        {
            rc = disk_ioctl ( DEV_MMC, GET_BLOCK_SIZE, (void *) &blksize);
    e1fe:	11 05       	cpc	r17, r1
    e200:	61 f5       	brne	.+88     	; 0xe25a <mmc_init+0x112>
    e202:	ae 01       	movw	r20, r28
    e204:	4f 5f       	subi	r20, 0xFF	; 255
    e206:	5f 4f       	sbci	r21, 0xFF	; 255
    e208:	63 e0       	ldi	r22, 0x03	; 3
            if( rc != RES_OK)
    e20a:	80 e0       	ldi	r24, 0x00	; 0
    e20c:	9c da       	rcall	.-2760   	; 0xd746 <disk_ioctl>
            {
                put_rc( rc );
    e20e:	8c 01       	movw	r16, r24
    e210:	00 97       	sbiw	r24, 0x00	; 0
                printf("MMC Block Size - read failed\n");
    e212:	61 f0       	breq	.+24     	; 0xe22c <mmc_init+0xe4>
    e214:	bd d0       	rcall	.+378    	; 0xe390 <put_rc>
    e216:	8f ee       	ldi	r24, 0xEF	; 239
    e218:	97 e0       	ldi	r25, 0x07	; 7
    e21a:	1f 92       	push	r1
    e21c:	9f 93       	push	r25
    e21e:	8f 93       	push	r24
    e220:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    e224:	0f 90       	pop	r0
    e226:	0f 90       	pop	r0
            }
            else
            {
                printf("MMC Block Size: %ld\n", blksize);
    e228:	0f 90       	pop	r0
    e22a:	17 c0       	rjmp	.+46     	; 0xe25a <mmc_init+0x112>
    e22c:	8c 81       	ldd	r24, Y+4	; 0x04
    e22e:	8f 93       	push	r24
    e230:	8b 81       	ldd	r24, Y+3	; 0x03
    e232:	8f 93       	push	r24
    e234:	8a 81       	ldd	r24, Y+2	; 0x02
    e236:	8f 93       	push	r24
    e238:	89 81       	ldd	r24, Y+1	; 0x01
    e23a:	8f 93       	push	r24
    e23c:	8a ed       	ldi	r24, 0xDA	; 218
    e23e:	97 e0       	ldi	r25, 0x07	; 7
    e240:	1f 92       	push	r1
    e242:	9f 93       	push	r25
            }
            if( rc == RES_OK)
            {
                fatfs_status("/");
    e244:	8f 93       	push	r24
    e246:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    e24a:	88 e3       	ldi	r24, 0x38	; 56
    e24c:	98 e0       	ldi	r25, 0x08	; 8
    e24e:	2e d1       	rcall	.+604    	; 0xe4ac <fatfs_status>
    e250:	0f b6       	in	r0, 0x3f	; 63
    e252:	f8 94       	cli
    e254:	de bf       	out	0x3e, r29	; 62
            }
        }
        printf("END MMC INIT\n");
    e256:	0f be       	out	0x3f, r0	; 63
    e258:	cd bf       	out	0x3d, r28	; 61
    e25a:	8c ec       	ldi	r24, 0xCC	; 204
    e25c:	97 e0       	ldi	r25, 0x07	; 7
    e25e:	1f 92       	push	r1
    e260:	9f 93       	push	r25
    e262:	8f 93       	push	r24
    e264:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    e268:	0f 90       	pop	r0
    }
    mmc_init_flag = 1;
    e26a:	0f 90       	pop	r0
    e26c:	0f 90       	pop	r0
    e26e:	81 e0       	ldi	r24, 0x01	; 1
    e270:	90 e0       	ldi	r25, 0x00	; 0
    e272:	90 93 25 18 	sts	0x1825, r25	; 0x801825 <mmc_init_flag+0x1>

    return( rc ) ;
}
    e276:	80 93 24 18 	sts	0x1824, r24	; 0x801824 <mmc_init_flag>
    e27a:	c8 01       	movw	r24, r16
    e27c:	24 96       	adiw	r28, 0x04	; 4
    e27e:	e6 e0       	ldi	r30, 0x06	; 6
    e280:	0c 94 1b e6 	jmp	0x1cc36	; 0x1cc36 <__epilogue_restores__+0x18>

0000e284 <mmc_power_off>:
/// @brief  MMC Power OFF
///
/// @return void
MEMSPACE
void mmc_power_off()
{
    e284:	08 95       	ret

0000e286 <mmc_ins_status>:

MEMSPACE
int mmc_ins_status()
{
    return (1);
}
    e286:	81 e0       	ldi	r24, 0x01	; 1
    e288:	90 e0       	ldi	r25, 0x00	; 0
    e28a:	08 95       	ret

0000e28c <mmc_wp_status>:

MEMSPACE
int mmc_wp_status()
{
    return (0);
}
    e28c:	80 e0       	ldi	r24, 0x00	; 0
    e28e:	90 e0       	ldi	r25, 0x00	; 0
    e290:	08 95       	ret

0000e292 <tm_to_fat>:
/// @param[in] t: POSIX struct tm * to convert.
///
/// @return  FAT32 time.
MEMSPACE
uint32_t tm_to_fat(tm_t *t)
{
    e292:	0f 93       	push	r16
    e294:	1f 93       	push	r17
    e296:	fc 01       	movw	r30, r24
        | (((uint32_t)t->tm_mon+1) << 21)
        | (((uint32_t)t->tm_mday) << 16)
        | ((uint32_t)t->tm_hour << 11)
        | ((uint32_t)t->tm_min << 5)
        | ((uint32_t)t->tm_sec >> 1);
    return(fat);
    e298:	46 81       	ldd	r20, Z+6	; 0x06
    e29a:	57 81       	ldd	r21, Z+7	; 0x07
    e29c:	05 2e       	mov	r0, r21
    e29e:	00 0c       	add	r0, r0
    e2a0:	66 0b       	sbc	r22, r22
    e2a2:	77 0b       	sbc	r23, r23
    e2a4:	ba 01       	movw	r22, r20
    e2a6:	55 27       	eor	r21, r21
    e2a8:	44 27       	eor	r20, r20
    e2aa:	84 81       	ldd	r24, Z+4	; 0x04
    e2ac:	95 81       	ldd	r25, Z+5	; 0x05
    e2ae:	09 2e       	mov	r0, r25
    e2b0:	00 0c       	add	r0, r0
    e2b2:	aa 0b       	sbc	r26, r26
    e2b4:	bb 0b       	sbc	r27, r27
    e2b6:	2b e0       	ldi	r18, 0x0B	; 11
    e2b8:	88 0f       	add	r24, r24
    e2ba:	99 1f       	adc	r25, r25
    e2bc:	aa 1f       	adc	r26, r26
    e2be:	bb 1f       	adc	r27, r27
    e2c0:	2a 95       	dec	r18
    e2c2:	d1 f7       	brne	.-12     	; 0xe2b8 <tm_to_fat+0x26>
    e2c4:	48 2b       	or	r20, r24
    e2c6:	59 2b       	or	r21, r25
    e2c8:	6a 2b       	or	r22, r26
    e2ca:	7b 2b       	or	r23, r27
    e2cc:	82 81       	ldd	r24, Z+2	; 0x02
    e2ce:	93 81       	ldd	r25, Z+3	; 0x03
    e2d0:	09 2e       	mov	r0, r25
    e2d2:	00 0c       	add	r0, r0
    e2d4:	aa 0b       	sbc	r26, r26
    e2d6:	bb 0b       	sbc	r27, r27
    e2d8:	35 e0       	ldi	r19, 0x05	; 5
    e2da:	88 0f       	add	r24, r24
    e2dc:	99 1f       	adc	r25, r25
    e2de:	aa 1f       	adc	r26, r26
    e2e0:	bb 1f       	adc	r27, r27
    e2e2:	3a 95       	dec	r19
    e2e4:	d1 f7       	brne	.-12     	; 0xe2da <tm_to_fat+0x48>
    e2e6:	48 2b       	or	r20, r24
    e2e8:	59 2b       	or	r21, r25
    e2ea:	6a 2b       	or	r22, r26
    e2ec:	7b 2b       	or	r23, r27
    e2ee:	80 81       	ld	r24, Z
    e2f0:	91 81       	ldd	r25, Z+1	; 0x01
    e2f2:	09 2e       	mov	r0, r25
    e2f4:	00 0c       	add	r0, r0
    e2f6:	aa 0b       	sbc	r26, r26
    e2f8:	bb 0b       	sbc	r27, r27
    e2fa:	b6 95       	lsr	r27
    e2fc:	a7 95       	ror	r26
    e2fe:	97 95       	ror	r25
    e300:	87 95       	ror	r24
    e302:	84 2b       	or	r24, r20
    e304:	95 2b       	or	r25, r21
    e306:	a6 2b       	or	r26, r22
    e308:	b7 2b       	or	r27, r23
    e30a:	02 85       	ldd	r16, Z+10	; 0x0a
    e30c:	13 85       	ldd	r17, Z+11	; 0x0b
    e30e:	00 55       	subi	r16, 0x50	; 80
    e310:	11 09       	sbc	r17, r1
    e312:	01 2e       	mov	r0, r17
    e314:	00 0c       	add	r0, r0
    e316:	22 0b       	sbc	r18, r18
    e318:	33 0b       	sbc	r19, r19
    e31a:	49 e1       	ldi	r20, 0x19	; 25
    e31c:	00 0f       	add	r16, r16
    e31e:	11 1f       	adc	r17, r17
    e320:	22 1f       	adc	r18, r18
    e322:	33 1f       	adc	r19, r19
    e324:	4a 95       	dec	r20
    e326:	d1 f7       	brne	.-12     	; 0xe31c <tm_to_fat+0x8a>
    e328:	ac 01       	movw	r20, r24
    e32a:	bd 01       	movw	r22, r26
    e32c:	40 2b       	or	r20, r16
    e32e:	51 2b       	or	r21, r17
    e330:	62 2b       	or	r22, r18
    e332:	73 2b       	or	r23, r19
    e334:	80 85       	ldd	r24, Z+8	; 0x08
    e336:	91 85       	ldd	r25, Z+9	; 0x09
    e338:	09 2e       	mov	r0, r25
    e33a:	00 0c       	add	r0, r0
    e33c:	aa 0b       	sbc	r26, r26
    e33e:	bb 0b       	sbc	r27, r27
    e340:	01 96       	adiw	r24, 0x01	; 1
    e342:	a1 1d       	adc	r26, r1
    e344:	b1 1d       	adc	r27, r1
    e346:	e5 e1       	ldi	r30, 0x15	; 21
    e348:	88 0f       	add	r24, r24
    e34a:	99 1f       	adc	r25, r25
    e34c:	aa 1f       	adc	r26, r26
    e34e:	bb 1f       	adc	r27, r27
    e350:	ea 95       	dec	r30
    e352:	d1 f7       	brne	.-12     	; 0xe348 <tm_to_fat+0xb6>
    e354:	8a 01       	movw	r16, r20
    e356:	9b 01       	movw	r18, r22
    e358:	08 2b       	or	r16, r24
    e35a:	19 2b       	or	r17, r25
    e35c:	2a 2b       	or	r18, r26
    e35e:	3b 2b       	or	r19, r27
    e360:	c9 01       	movw	r24, r18
    e362:	b8 01       	movw	r22, r16
}
    e364:	1f 91       	pop	r17
    e366:	0f 91       	pop	r16
    e368:	08 95       	ret

0000e36a <get_fattime>:
///
/// @return FAT32 time.
/// @see tm_to_fat().
MEMSPACE
DWORD get_fattime (void)
{
    e36a:	a4 e0       	ldi	r26, 0x04	; 4
    e36c:	b0 e0       	ldi	r27, 0x00	; 0
    e36e:	eb eb       	ldi	r30, 0xBB	; 187
    e370:	f1 e7       	ldi	r31, 0x71	; 113
    e372:	0c 94 03 e6 	jmp	0x1cc06	; 0x1cc06 <__prologue_saves__+0x20>
    time_t t;
/* Get GMT time */
    time(&t);
    e376:	ce 01       	movw	r24, r28
    e378:	01 96       	adiw	r24, 0x01	; 1
    e37a:	0e 94 1a 39 	call	0x7234	; 0x7234 <time>
    return( tm_to_fat(localtime(&t)));
    e37e:	ce 01       	movw	r24, r28
    e380:	01 96       	adiw	r24, 0x01	; 1
    e382:	0e 94 b3 39 	call	0x7366	; 0x7366 <localtime>
    e386:	85 df       	rcall	.-246    	; 0xe292 <tm_to_fat>
}
    e388:	24 96       	adiw	r28, 0x04	; 4
    e38a:	e2 e0       	ldi	r30, 0x02	; 2
    e38c:	0c 94 1f e6 	jmp	0x1cc3e	; 0x1cc3e <__epilogue_restores__+0x20>

0000e390 <put_rc>:
        ptr = "INVALID ERROR MESSAGE";
    else
        ptr = (char *) err_msg[(int)rc];
    printf("rc=%u FR_%s\n", rc, ptr);
#else
    printf("rc=%u\n", rc);
    e390:	9f 93       	push	r25
    e392:	8f 93       	push	r24
    e394:	87 e5       	ldi	r24, 0x57	; 87
    e396:	9a e0       	ldi	r25, 0x0A	; 10
    e398:	1f 92       	push	r1
    e39a:	9f 93       	push	r25
    e39c:	8f 93       	push	r24
    e39e:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
#endif
}
    e3a2:	0f 90       	pop	r0
    e3a4:	0f 90       	pop	r0
    e3a6:	0f 90       	pop	r0
    e3a8:	0f 90       	pop	r0
    e3aa:	0f 90       	pop	r0
    e3ac:	08 95       	ret

0000e3ae <fatfs_scan_files>:

MEMSPACE
int fatfs_scan_files (
char* path                                        /* Pointer to the working buffer with start path */
)
{
    e3ae:	a4 e4       	ldi	r26, 0x44	; 68
    e3b0:	b1 e0       	ldi	r27, 0x01	; 1
    e3b2:	ed ed       	ldi	r30, 0xDD	; 221
    e3b4:	f1 e7       	ldi	r31, 0x71	; 113
    e3b6:	0c 94 fe e5 	jmp	0x1cbfc	; 0x1cbfc <__prologue_saves__+0x16>
    e3ba:	8c 01       	movw	r16, r24
    DIR dirs;
    FRESULT fr;
    int i;
    FILINFO info;

    fr = f_opendir(&dirs, path);
    e3bc:	bc 01       	movw	r22, r24
    e3be:	ce 01       	movw	r24, r28
    e3c0:	89 5e       	subi	r24, 0xE9	; 233
    e3c2:	9e 4f       	sbci	r25, 0xFE	; 254
    e3c4:	0e 94 f2 64 	call	0xc9e4	; 0xc9e4 <f_opendir>
    if (fr == FR_OK) {
    e3c8:	00 97       	sbiw	r24, 0x00	; 0
    e3ca:	09 f0       	breq	.+2      	; 0xe3ce <fatfs_scan_files+0x20>
    e3cc:	5b c0       	rjmp	.+182    	; 0xe484 <fatfs_scan_files+0xd6>
        while (((fr = f_readdir(&dirs, &info)) == FR_OK) && info.fname[0]) {
            if (info.fattrib & AM_DIR) {
                AccDirs++;
                i = strlen(path);
                path[i] = '/'; strcpy(path+i+1, info.fname);
    e3ce:	8f e2       	ldi	r24, 0x2F	; 47
    e3d0:	d8 2e       	mov	r13, r24
    int i;
    FILINFO info;

    fr = f_opendir(&dirs, path);
    if (fr == FR_OK) {
        while (((fr = f_readdir(&dirs, &info)) == FR_OK) && info.fname[0]) {
    e3d2:	be 01       	movw	r22, r28
    e3d4:	6f 5f       	subi	r22, 0xFF	; 255
    e3d6:	7f 4f       	sbci	r23, 0xFF	; 255
    e3d8:	ce 01       	movw	r24, r28
    e3da:	89 5e       	subi	r24, 0xE9	; 233
    e3dc:	9e 4f       	sbci	r25, 0xFE	; 254
    e3de:	0e 94 78 65 	call	0xcaf0	; 0xcaf0 <f_readdir>
    e3e2:	00 97       	sbiw	r24, 0x00	; 0
    e3e4:	09 f0       	breq	.+2      	; 0xe3e8 <fatfs_scan_files+0x3a>
    e3e6:	4e c0       	rjmp	.+156    	; 0xe484 <fatfs_scan_files+0xd6>
    e3e8:	2f 89       	ldd	r18, Y+23	; 0x17
    e3ea:	22 23       	and	r18, r18
    e3ec:	09 f4       	brne	.+2      	; 0xe3f0 <fatfs_scan_files+0x42>
    e3ee:	4a c0       	rjmp	.+148    	; 0xe484 <fatfs_scan_files+0xd6>
            if (info.fattrib & AM_DIR) {
    e3f0:	89 85       	ldd	r24, Y+9	; 0x09
    e3f2:	84 ff       	sbrs	r24, 4
    e3f4:	25 c0       	rjmp	.+74     	; 0xe440 <fatfs_scan_files+0x92>
                AccDirs++;
    e3f6:	80 91 b9 1b 	lds	r24, 0x1BB9	; 0x801bb9 <AccDirs>
    e3fa:	90 91 ba 1b 	lds	r25, 0x1BBA	; 0x801bba <AccDirs+0x1>
    e3fe:	01 96       	adiw	r24, 0x01	; 1
    e400:	90 93 ba 1b 	sts	0x1BBA, r25	; 0x801bba <AccDirs+0x1>
    e404:	80 93 b9 1b 	sts	0x1BB9, r24	; 0x801bb9 <AccDirs>
                i = strlen(path);
    e408:	f8 01       	movw	r30, r16
    e40a:	01 90       	ld	r0, Z+
    e40c:	00 20       	and	r0, r0
    e40e:	e9 f7       	brne	.-6      	; 0xe40a <fatfs_scan_files+0x5c>
    e410:	31 97       	sbiw	r30, 0x01	; 1
    e412:	e0 1b       	sub	r30, r16
    e414:	f1 0b       	sbc	r31, r17
                path[i] = '/'; strcpy(path+i+1, info.fname);
    e416:	78 01       	movw	r14, r16
    e418:	ee 0e       	add	r14, r30
    e41a:	ff 1e       	adc	r15, r31
    e41c:	d7 01       	movw	r26, r14
    e41e:	dc 92       	st	X, r13
    e420:	cf 01       	movw	r24, r30
    e422:	01 96       	adiw	r24, 0x01	; 1
    e424:	be 01       	movw	r22, r28
    e426:	69 5e       	subi	r22, 0xE9	; 233
    e428:	7f 4f       	sbci	r23, 0xFF	; 255
    e42a:	80 0f       	add	r24, r16
    e42c:	91 1f       	adc	r25, r17
    e42e:	0e 94 56 32 	call	0x64ac	; 0x64ac <strcpy>
                fr = fatfs_scan_files(path);
    e432:	c8 01       	movw	r24, r16
    e434:	bc df       	rcall	.-136    	; 0xe3ae <fatfs_scan_files>
                path[i] = 0;
    e436:	f7 01       	movw	r30, r14
    e438:	10 82       	st	Z, r1
                if (fr != FR_OK) break;
    e43a:	00 97       	sbiw	r24, 0x00	; 0
    e43c:	51 f2       	breq	.-108    	; 0xe3d2 <fatfs_scan_files+0x24>
    e43e:	22 c0       	rjmp	.+68     	; 0xe484 <fatfs_scan_files+0xd6>
            } else {
//              xprintf(PSTR("%s/%s\n"), path, info.fname);
                AccFiles++;
    e440:	80 91 bb 1b 	lds	r24, 0x1BBB	; 0x801bbb <AccFiles>
    e444:	90 91 bc 1b 	lds	r25, 0x1BBC	; 0x801bbc <AccFiles+0x1>
    e448:	01 96       	adiw	r24, 0x01	; 1
    e44a:	90 93 bc 1b 	sts	0x1BBC, r25	; 0x801bbc <AccFiles+0x1>
    e44e:	80 93 bb 1b 	sts	0x1BBB, r24	; 0x801bbb <AccFiles>
                AccSize += info.fsize;
    e452:	40 91 b5 1b 	lds	r20, 0x1BB5	; 0x801bb5 <AccSize>
    e456:	50 91 b6 1b 	lds	r21, 0x1BB6	; 0x801bb6 <AccSize+0x1>
    e45a:	60 91 b7 1b 	lds	r22, 0x1BB7	; 0x801bb7 <AccSize+0x2>
    e45e:	70 91 b8 1b 	lds	r23, 0x1BB8	; 0x801bb8 <AccSize+0x3>
    e462:	89 81       	ldd	r24, Y+1	; 0x01
    e464:	9a 81       	ldd	r25, Y+2	; 0x02
    e466:	ab 81       	ldd	r26, Y+3	; 0x03
    e468:	bc 81       	ldd	r27, Y+4	; 0x04
    e46a:	84 0f       	add	r24, r20
    e46c:	95 1f       	adc	r25, r21
    e46e:	a6 1f       	adc	r26, r22
    e470:	b7 1f       	adc	r27, r23
    e472:	80 93 b5 1b 	sts	0x1BB5, r24	; 0x801bb5 <AccSize>
    e476:	90 93 b6 1b 	sts	0x1BB6, r25	; 0x801bb6 <AccSize+0x1>
    e47a:	a0 93 b7 1b 	sts	0x1BB7, r26	; 0x801bb7 <AccSize+0x2>
    e47e:	b0 93 b8 1b 	sts	0x1BB8, r27	; 0x801bb8 <AccSize+0x3>
    e482:	a7 cf       	rjmp	.-178    	; 0xe3d2 <fatfs_scan_files+0x24>
#endif
        }
    }

    return fr;
}
    e484:	cc 5b       	subi	r28, 0xBC	; 188
    e486:	de 4f       	sbci	r29, 0xFE	; 254
    e488:	e7 e0       	ldi	r30, 0x07	; 7
    e48a:	0c 94 1a e6 	jmp	0x1cc34	; 0x1cc34 <__epilogue_restores__+0x16>

0000e48e <fatfs_fstype>:
/// @brief  return a string with the file system type
/// @param[in] type: file system type
/// @return string with file system type
MEMSPACE
char *fatfs_fstype(int type)
{
    e48e:	01 97       	sbiw	r24, 0x01	; 1
    e490:	84 30       	cpi	r24, 0x04	; 4
    e492:	91 05       	cpc	r25, r1
    e494:	40 f4       	brcc	.+16     	; 0xe4a6 <fatfs_fstype+0x18>
    e496:	88 0f       	add	r24, r24
    e498:	99 1f       	adc	r25, r25
    e49a:	fc 01       	movw	r30, r24
    e49c:	e8 5f       	subi	r30, 0xF8	; 248
    e49e:	f8 4f       	sbci	r31, 0xF8	; 248
    e4a0:	80 81       	ld	r24, Z
    e4a2:	91 81       	ldd	r25, Z+1	; 0x01
    e4a4:	08 95       	ret
    char *ptr;
    switch(type)
    e4a6:	8a e3       	ldi	r24, 0x3A	; 58
    e4a8:	98 e0       	ldi	r25, 0x08	; 8
        default:
             ptr = "UNKNOWN";
            break;
    }
    return(ptr);
}
    e4aa:	08 95       	ret

0000e4ac <fatfs_status>:
/// @see AccFiles: Total number of Files
/// @see AccSize:  Total size of all files
/// @return  void
MEMSPACE
void fatfs_status(char *ptr)
{
    e4ac:	a4 e2       	ldi	r26, 0x24	; 36
    e4ae:	b0 e0       	ldi	r27, 0x00	; 0
    e4b0:	ec e5       	ldi	r30, 0x5C	; 92
    e4b2:	f2 e7       	ldi	r31, 0x72	; 114
    e4b4:	0c 94 fd e5 	jmp	0x1cbfa	; 0x1cbfa <__prologue_saves__+0x14>
    e4b8:	8c 01       	movw	r16, r24
    int res;
    FATFS *fs;
    char label[24+2];
    DWORD vsn; // volume serial number

    while(*ptr == ' ' || *ptr == '\t')
    e4ba:	fc 01       	movw	r30, r24
    e4bc:	21 91       	ld	r18, Z+
    e4be:	cf 01       	movw	r24, r30
    e4c0:	20 32       	cpi	r18, 0x20	; 32
    e4c2:	d1 f3       	breq	.-12     	; 0xe4b8 <fatfs_status+0xc>
    e4c4:	29 30       	cpi	r18, 0x09	; 9
    e4c6:	c1 f3       	breq	.-16     	; 0xe4b8 <fatfs_status+0xc>
        ++ptr;
    printf("fatfs status:%s\n",ptr);
    e4c8:	1f 93       	push	r17
    e4ca:	0f 93       	push	r16
    e4cc:	86 e4       	ldi	r24, 0x46	; 70
    e4ce:	9a e0       	ldi	r25, 0x0A	; 10
    e4d0:	1f 92       	push	r1
    e4d2:	9f 93       	push	r25
    e4d4:	8f 93       	push	r24
    e4d6:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    res = f_getfree(ptr, (DWORD*)&p2, &fs);
    e4da:	ae 01       	movw	r20, r28
    e4dc:	4d 5d       	subi	r20, 0xDD	; 221
    e4de:	5f 4f       	sbci	r21, 0xFF	; 255
    e4e0:	be 01       	movw	r22, r28
    e4e2:	61 5e       	subi	r22, 0xE1	; 225
    e4e4:	7f 4f       	sbci	r23, 0xFF	; 255
    e4e6:	c8 01       	movw	r24, r16
    e4e8:	0e 94 fa 65 	call	0xcbf4	; 0xcbf4 <f_getfree>
    if (res)
    e4ec:	0f 90       	pop	r0
    e4ee:	0f 90       	pop	r0
    e4f0:	0f 90       	pop	r0
    e4f2:	0f 90       	pop	r0
    e4f4:	0f 90       	pop	r0
    e4f6:	00 97       	sbiw	r24, 0x00	; 0
    e4f8:	09 f0       	breq	.+2      	; 0xe4fc <fatfs_status+0x50>
    e4fa:	e8 c0       	rjmp	.+464    	; 0xe6cc <fatfs_status+0x220>
    {
        put_rc(res);
        return;
    }
    printf("FAT type                = %s\n",  fatfs_fstype(fs->fs_type));
    e4fc:	eb a1       	ldd	r30, Y+35	; 0x23
    e4fe:	fc a1       	ldd	r31, Y+36	; 0x24
    e500:	80 81       	ld	r24, Z
    e502:	90 e0       	ldi	r25, 0x00	; 0
    e504:	c4 df       	rcall	.-120    	; 0xe48e <fatfs_fstype>
    e506:	9f 93       	push	r25
    e508:	8f 93       	push	r24
    e50a:	88 e2       	ldi	r24, 0x28	; 40
    e50c:	9a e0       	ldi	r25, 0x0A	; 10
    e50e:	1f 92       	push	r1
    e510:	9f 93       	push	r25
    e512:	8f 93       	push	r24
    e514:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    printf("Bytes/Cluster           = %lu\n", (DWORD)fs->csize * 512);
    e518:	eb a1       	ldd	r30, Y+35	; 0x23
    e51a:	fc a1       	ldd	r31, Y+36	; 0x24
    e51c:	81 85       	ldd	r24, Z+9	; 0x09
    e51e:	92 85       	ldd	r25, Z+10	; 0x0a
    e520:	a0 e0       	ldi	r26, 0x00	; 0
    e522:	b0 e0       	ldi	r27, 0x00	; 0
    e524:	49 e0       	ldi	r20, 0x09	; 9
    e526:	88 0f       	add	r24, r24
    e528:	99 1f       	adc	r25, r25
    e52a:	aa 1f       	adc	r26, r26
    e52c:	bb 1f       	adc	r27, r27
    e52e:	4a 95       	dec	r20
    e530:	d1 f7       	brne	.-12     	; 0xe526 <fatfs_status+0x7a>
    e532:	bf 93       	push	r27
    e534:	af 93       	push	r26
    e536:	9f 93       	push	r25
    e538:	8f 93       	push	r24
    e53a:	89 e0       	ldi	r24, 0x09	; 9
    e53c:	9a e0       	ldi	r25, 0x0A	; 10
    e53e:	1f 92       	push	r1
    e540:	9f 93       	push	r25
    e542:	8f 93       	push	r24
    e544:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    printf("Number of FATs          = %u\n",  fs->n_fats);
    e548:	eb a1       	ldd	r30, Y+35	; 0x23
    e54a:	fc a1       	ldd	r31, Y+36	; 0x24
    e54c:	82 81       	ldd	r24, Z+2	; 0x02
    e54e:	1f 92       	push	r1
    e550:	8f 93       	push	r24
    e552:	8b ee       	ldi	r24, 0xEB	; 235
    e554:	99 e0       	ldi	r25, 0x09	; 9
    e556:	1f 92       	push	r1
    e558:	9f 93       	push	r25
    e55a:	8f 93       	push	r24
    e55c:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    printf("Root DIR entries        = %u\n",  fs->n_rootdir);
    e560:	eb a1       	ldd	r30, Y+35	; 0x23
    e562:	fc a1       	ldd	r31, Y+36	; 0x24
    e564:	80 85       	ldd	r24, Z+8	; 0x08
    e566:	8f 93       	push	r24
    e568:	87 81       	ldd	r24, Z+7	; 0x07
    e56a:	8f 93       	push	r24
    e56c:	8d ec       	ldi	r24, 0xCD	; 205
    e56e:	99 e0       	ldi	r25, 0x09	; 9
    e570:	1f 92       	push	r1
    e572:	9f 93       	push	r25
    e574:	8f 93       	push	r24
    e576:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    printf("Sectors/FAT             = %lu\n", fs->fsize);
    e57a:	eb a1       	ldd	r30, Y+35	; 0x23
    e57c:	fc a1       	ldd	r31, Y+36	; 0x24
    e57e:	80 a1       	ldd	r24, Z+32	; 0x20
    e580:	8f 93       	push	r24
    e582:	87 8d       	ldd	r24, Z+31	; 0x1f
    e584:	8f 93       	push	r24
    e586:	86 8d       	ldd	r24, Z+30	; 0x1e
    e588:	8f 93       	push	r24
    e58a:	85 8d       	ldd	r24, Z+29	; 0x1d
    e58c:	8f 93       	push	r24
    e58e:	8e ea       	ldi	r24, 0xAE	; 174
    e590:	99 e0       	ldi	r25, 0x09	; 9
    e592:	1f 92       	push	r1
    e594:	9f 93       	push	r25
    e596:	8f 93       	push	r24
    e598:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    printf("Number of clusters      = %lu\n", fs->n_fatent - 2);
    e59c:	eb a1       	ldd	r30, Y+35	; 0x23
    e59e:	fc a1       	ldd	r31, Y+36	; 0x24
    e5a0:	81 8d       	ldd	r24, Z+25	; 0x19
    e5a2:	92 8d       	ldd	r25, Z+26	; 0x1a
    e5a4:	a3 8d       	ldd	r26, Z+27	; 0x1b
    e5a6:	b4 8d       	ldd	r27, Z+28	; 0x1c
    e5a8:	02 97       	sbiw	r24, 0x02	; 2
    e5aa:	a1 09       	sbc	r26, r1
    e5ac:	b1 09       	sbc	r27, r1
    e5ae:	bf 93       	push	r27
    e5b0:	af 93       	push	r26
    e5b2:	9f 93       	push	r25
    e5b4:	8f 93       	push	r24
    e5b6:	8f e8       	ldi	r24, 0x8F	; 143
    e5b8:	99 e0       	ldi	r25, 0x09	; 9
    e5ba:	1f 92       	push	r1
    e5bc:	9f 93       	push	r25
    e5be:	8f 93       	push	r24
    e5c0:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    printf("FAT start (lba)         = %lu\n", fs->fatbase);
    e5c4:	0f b6       	in	r0, 0x3f	; 63
    e5c6:	f8 94       	cli
    e5c8:	de bf       	out	0x3e, r29	; 62
    e5ca:	0f be       	out	0x3f, r0	; 63
    e5cc:	cd bf       	out	0x3d, r28	; 61
    e5ce:	eb a1       	ldd	r30, Y+35	; 0x23
    e5d0:	fc a1       	ldd	r31, Y+36	; 0x24
    e5d2:	80 a5       	ldd	r24, Z+40	; 0x28
    e5d4:	8f 93       	push	r24
    e5d6:	87 a1       	ldd	r24, Z+39	; 0x27
    e5d8:	8f 93       	push	r24
    e5da:	86 a1       	ldd	r24, Z+38	; 0x26
    e5dc:	8f 93       	push	r24
    e5de:	85 a1       	ldd	r24, Z+37	; 0x25
    e5e0:	8f 93       	push	r24
    e5e2:	80 e7       	ldi	r24, 0x70	; 112
    e5e4:	99 e0       	ldi	r25, 0x09	; 9
    e5e6:	1f 92       	push	r1
    e5e8:	9f 93       	push	r25
    e5ea:	8f 93       	push	r24
    e5ec:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    printf("DIR start (lba,clustor) = %lu\n", fs->dirbase);
    e5f0:	eb a1       	ldd	r30, Y+35	; 0x23
    e5f2:	fc a1       	ldd	r31, Y+36	; 0x24
    e5f4:	84 a5       	ldd	r24, Z+44	; 0x2c
    e5f6:	8f 93       	push	r24
    e5f8:	83 a5       	ldd	r24, Z+43	; 0x2b
    e5fa:	8f 93       	push	r24
    e5fc:	82 a5       	ldd	r24, Z+42	; 0x2a
    e5fe:	8f 93       	push	r24
    e600:	81 a5       	ldd	r24, Z+41	; 0x29
    e602:	8f 93       	push	r24
    e604:	81 e5       	ldi	r24, 0x51	; 81
    e606:	99 e0       	ldi	r25, 0x09	; 9
    e608:	1f 92       	push	r1
    e60a:	9f 93       	push	r25
    e60c:	8f 93       	push	r24
    e60e:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    printf("Data start (lba)        = %lu\n", fs->database);
    e612:	eb a1       	ldd	r30, Y+35	; 0x23
    e614:	fc a1       	ldd	r31, Y+36	; 0x24
    e616:	80 a9       	ldd	r24, Z+48	; 0x30
    e618:	8f 93       	push	r24
    e61a:	87 a5       	ldd	r24, Z+47	; 0x2f
    e61c:	8f 93       	push	r24
    e61e:	86 a5       	ldd	r24, Z+46	; 0x2e
    e620:	8f 93       	push	r24
    e622:	85 a5       	ldd	r24, Z+45	; 0x2d
    e624:	8f 93       	push	r24
    e626:	82 e3       	ldi	r24, 0x32	; 50
    e628:	99 e0       	ldi	r25, 0x09	; 9
    e62a:	1f 92       	push	r1
    e62c:	9f 93       	push	r25
    e62e:	8f 93       	push	r24
    e630:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>

#if FF_USE_LABEL
    res = f_getlabel(ptr, label, (DWORD*)&vsn);
    e634:	ae 01       	movw	r20, r28
    e636:	45 5e       	subi	r20, 0xE5	; 229
    e638:	5f 4f       	sbci	r21, 0xFF	; 255
    e63a:	be 01       	movw	r22, r28
    e63c:	6f 5f       	subi	r22, 0xFF	; 255
    e63e:	7f 4f       	sbci	r23, 0xFF	; 255
    e640:	c8 01       	movw	r24, r16
    e642:	0e 94 2b 6a 	call	0xd456	; 0xd456 <f_getlabel>
    if (res)
    e646:	0f b6       	in	r0, 0x3f	; 63
    e648:	f8 94       	cli
    e64a:	de bf       	out	0x3e, r29	; 62
    e64c:	0f be       	out	0x3f, r0	; 63
    e64e:	cd bf       	out	0x3d, r28	; 61
    e650:	00 97       	sbiw	r24, 0x00	; 0
    e652:	e1 f5       	brne	.+120    	; 0xe6cc <fatfs_status+0x220>
    {
        put_rc(res);
        return;
    }
    printf("Volume name             = %s\n", label[0] ? label : "<blank>");
    e654:	89 81       	ldd	r24, Y+1	; 0x01
    e656:	81 11       	cpse	r24, r1
    e658:	03 c0       	rjmp	.+6      	; 0xe660 <fatfs_status+0x1b4>
    e65a:	82 e4       	ldi	r24, 0x42	; 66
    e65c:	98 e0       	ldi	r25, 0x08	; 8
    e65e:	02 c0       	rjmp	.+4      	; 0xe664 <fatfs_status+0x1b8>
    e660:	ce 01       	movw	r24, r28
    e662:	01 96       	adiw	r24, 0x01	; 1
    e664:	9f 93       	push	r25
    e666:	8f 93       	push	r24
    e668:	84 e1       	ldi	r24, 0x14	; 20
    e66a:	99 e0       	ldi	r25, 0x09	; 9
    e66c:	1f 92       	push	r1
    e66e:	9f 93       	push	r25
    e670:	8f 93       	push	r24
    e672:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    printf("Volume S/N              = %04X-%04X\n", (WORD)((DWORD)vsn >> 16), (WORD)(vsn & 0xFFFF));
    e676:	8b 8d       	ldd	r24, Y+27	; 0x1b
    e678:	9c 8d       	ldd	r25, Y+28	; 0x1c
    e67a:	ad 8d       	ldd	r26, Y+29	; 0x1d
    e67c:	be 8d       	ldd	r27, Y+30	; 0x1e
    e67e:	9f 93       	push	r25
    e680:	8f 93       	push	r24
    e682:	cd 01       	movw	r24, r26
    e684:	aa 27       	eor	r26, r26
    e686:	bb 27       	eor	r27, r27
    e688:	9f 93       	push	r25
    e68a:	8f 93       	push	r24
    e68c:	8f ee       	ldi	r24, 0xEF	; 239
    e68e:	98 e0       	ldi	r25, 0x08	; 8
    e690:	1f 92       	push	r1
    e692:	9f 93       	push	r25
    e694:	8f 93       	push	r24
    e696:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
#endif

    AccSize = AccFiles = AccDirs = 0;
    e69a:	10 92 ba 1b 	sts	0x1BBA, r1	; 0x801bba <AccDirs+0x1>
    e69e:	10 92 b9 1b 	sts	0x1BB9, r1	; 0x801bb9 <AccDirs>
    e6a2:	10 92 bc 1b 	sts	0x1BBC, r1	; 0x801bbc <AccFiles+0x1>
    e6a6:	10 92 bb 1b 	sts	0x1BBB, r1	; 0x801bbb <AccFiles>
    e6aa:	10 92 b5 1b 	sts	0x1BB5, r1	; 0x801bb5 <AccSize>
    e6ae:	10 92 b6 1b 	sts	0x1BB6, r1	; 0x801bb6 <AccSize+0x1>
    e6b2:	10 92 b7 1b 	sts	0x1BB7, r1	; 0x801bb7 <AccSize+0x2>
    e6b6:	10 92 b8 1b 	sts	0x1BB8, r1	; 0x801bb8 <AccSize+0x3>
    res = fatfs_scan_files(ptr);
    e6ba:	c8 01       	movw	r24, r16
    if (res)
    e6bc:	78 de       	rcall	.-784    	; 0xe3ae <fatfs_scan_files>
    e6be:	0f b6       	in	r0, 0x3f	; 63
    e6c0:	f8 94       	cli
    e6c2:	de bf       	out	0x3e, r29	; 62
    e6c4:	0f be       	out	0x3f, r0	; 63
    e6c6:	cd bf       	out	0x3d, r28	; 61
    {
        put_rc(res);
    e6c8:	00 97       	sbiw	r24, 0x00	; 0
    e6ca:	11 f0       	breq	.+4      	; 0xe6d0 <fatfs_status+0x224>
        return;
    e6cc:	61 de       	rcall	.-830    	; 0xe390 <put_rc>
    }
    printf("%u files, %lu bytes.\n%u folders.\n"
    e6ce:	56 c0       	rjmp	.+172    	; 0xe77c <fatfs_status+0x2d0>
    e6d0:	0b a1       	ldd	r16, Y+35	; 0x23
    e6d2:	1c a1       	ldd	r17, Y+36	; 0x24
    e6d4:	f8 01       	movw	r30, r16
    e6d6:	c1 84       	ldd	r12, Z+9	; 0x09
    e6d8:	d2 84       	ldd	r13, Z+10	; 0x0a
    e6da:	e1 2c       	mov	r14, r1
    e6dc:	f1 2c       	mov	r15, r1
    e6de:	6f 8d       	ldd	r22, Y+31	; 0x1f
    e6e0:	78 a1       	ldd	r23, Y+32	; 0x20
    e6e2:	89 a1       	ldd	r24, Y+33	; 0x21
    e6e4:	9a a1       	ldd	r25, Y+34	; 0x22
    e6e6:	a7 01       	movw	r20, r14
    e6e8:	96 01       	movw	r18, r12
    e6ea:	0e 94 2f e5 	call	0x1ca5e	; 0x1ca5e <__mulsi3>
    e6ee:	22 e0       	ldi	r18, 0x02	; 2
    e6f0:	30 e0       	ldi	r19, 0x00	; 0
    e6f2:	40 e0       	ldi	r20, 0x00	; 0
    e6f4:	50 e0       	ldi	r21, 0x00	; 0
    e6f6:	0e 94 93 e5 	call	0x1cb26	; 0x1cb26 <__divmodsi4>
    e6fa:	5f 93       	push	r21
    e6fc:	4f 93       	push	r20
    e6fe:	3f 93       	push	r19
    e700:	2f 93       	push	r18
    e702:	f8 01       	movw	r30, r16
    e704:	81 8d       	ldd	r24, Z+25	; 0x19
    e706:	92 8d       	ldd	r25, Z+26	; 0x1a
    e708:	a3 8d       	ldd	r26, Z+27	; 0x1b
    e70a:	b4 8d       	ldd	r27, Z+28	; 0x1c
    e70c:	9c 01       	movw	r18, r24
    e70e:	ad 01       	movw	r20, r26
    e710:	22 50       	subi	r18, 0x02	; 2
    e712:	31 09       	sbc	r19, r1
    e714:	41 09       	sbc	r20, r1
    e716:	51 09       	sbc	r21, r1
    e718:	c7 01       	movw	r24, r14
    e71a:	b6 01       	movw	r22, r12
    e71c:	0e 94 2f e5 	call	0x1ca5e	; 0x1ca5e <__mulsi3>
    e720:	dc 01       	movw	r26, r24
    e722:	cb 01       	movw	r24, r22
    e724:	b6 95       	lsr	r27
    e726:	a7 95       	ror	r26
    e728:	97 95       	ror	r25
    e72a:	87 95       	ror	r24
    e72c:	bf 93       	push	r27
    e72e:	af 93       	push	r26
    e730:	9f 93       	push	r25
    e732:	8f 93       	push	r24
    e734:	80 91 ba 1b 	lds	r24, 0x1BBA	; 0x801bba <AccDirs+0x1>
    e738:	8f 93       	push	r24
    e73a:	80 91 b9 1b 	lds	r24, 0x1BB9	; 0x801bb9 <AccDirs>
    e73e:	8f 93       	push	r24
    e740:	80 91 b8 1b 	lds	r24, 0x1BB8	; 0x801bb8 <AccSize+0x3>
    e744:	8f 93       	push	r24
    e746:	80 91 b7 1b 	lds	r24, 0x1BB7	; 0x801bb7 <AccSize+0x2>
    e74a:	8f 93       	push	r24
    e74c:	80 91 b6 1b 	lds	r24, 0x1BB6	; 0x801bb6 <AccSize+0x1>
    e750:	8f 93       	push	r24
    e752:	80 91 b5 1b 	lds	r24, 0x1BB5	; 0x801bb5 <AccSize>
    e756:	8f 93       	push	r24
    e758:	80 91 bc 1b 	lds	r24, 0x1BBC	; 0x801bbc <AccFiles+0x1>
    e75c:	8f 93       	push	r24
    e75e:	80 91 bb 1b 	lds	r24, 0x1BBB	; 0x801bbb <AccFiles>
    e762:	8f 93       	push	r24
    e764:	82 ea       	ldi	r24, 0xA2	; 162
    e766:	98 e0       	ldi	r25, 0x08	; 8
    e768:	1f 92       	push	r1
    e76a:	9f 93       	push	r25
    e76c:	8f 93       	push	r24
    e76e:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    e772:	0f b6       	in	r0, 0x3f	; 63
    e774:	f8 94       	cli
    e776:	de bf       	out	0x3e, r29	; 62
    e778:	0f be       	out	0x3f, r0	; 63
                 "%lu KB total disk space.\n%lu KB available.\n",
            AccFiles, AccSize, AccDirs,
            (fs->n_fatent - 2) * fs->csize / 2, p2 * fs->csize / 2
    );

}
    e77a:	cd bf       	out	0x3d, r28	; 61
    e77c:	a4 96       	adiw	r28, 0x24	; 36
    e77e:	e8 e0       	ldi	r30, 0x08	; 8
    e780:	0c 94 19 e6 	jmp	0x1cc32	; 0x1cc32 <__epilogue_restores__+0x14>

0000e784 <fatfs_filinfo_list>:
/// @param[in] : FILINFO pointer
/// @return  void

MEMSPACE
void fatfs_filinfo_list(FILINFO *info)
{
    e784:	a6 e0       	ldi	r26, 0x06	; 6
    e786:	b0 e0       	ldi	r27, 0x00	; 0
    e788:	e8 ec       	ldi	r30, 0xC8	; 200
    e78a:	f3 e7       	ldi	r31, 0x73	; 115
    e78c:	0c 94 03 e6 	jmp	0x1cc06	; 0x1cc06 <__prologue_saves__+0x20>
    e790:	fc 01       	movw	r30, r24
    char attrs[6];
    if(info->fname[0] == 0)
    e792:	86 89       	ldd	r24, Z+22	; 0x16
    e794:	81 11       	cpse	r24, r1
    e796:	0b c0       	rjmp	.+22     	; 0xe7ae <fatfs_filinfo_list+0x2a>
    {
        printf("fatfs_filinfo_list: empty\n");
    e798:	87 e8       	ldi	r24, 0x87	; 135
    e79a:	98 e0       	ldi	r25, 0x08	; 8
    e79c:	1f 92       	push	r1
    e79e:	9f 93       	push	r25
    e7a0:	8f 93       	push	r24
    e7a2:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
        return;
    e7a6:	0f 90       	pop	r0
    e7a8:	0f 90       	pop	r0
    e7aa:	0f 90       	pop	r0
    e7ac:	6e c0       	rjmp	.+220    	; 0xe88a <fatfs_filinfo_list+0x106>
    }
    attrs[0] = (info->fattrib & AM_DIR) ? 'D' : '-';
    e7ae:	80 85       	ldd	r24, Z+8	; 0x08
    e7b0:	84 fd       	sbrc	r24, 4
    e7b2:	02 c0       	rjmp	.+4      	; 0xe7b8 <fatfs_filinfo_list+0x34>
    e7b4:	9d e2       	ldi	r25, 0x2D	; 45
    e7b6:	01 c0       	rjmp	.+2      	; 0xe7ba <fatfs_filinfo_list+0x36>
    e7b8:	94 e4       	ldi	r25, 0x44	; 68
    e7ba:	99 83       	std	Y+1, r25	; 0x01
    attrs[1] = (info->fattrib & AM_RDO) ? 'R' : '-';
    e7bc:	80 fd       	sbrc	r24, 0
    e7be:	02 c0       	rjmp	.+4      	; 0xe7c4 <fatfs_filinfo_list+0x40>
    e7c0:	9d e2       	ldi	r25, 0x2D	; 45
    e7c2:	01 c0       	rjmp	.+2      	; 0xe7c6 <fatfs_filinfo_list+0x42>
    e7c4:	92 e5       	ldi	r25, 0x52	; 82
    e7c6:	9a 83       	std	Y+2, r25	; 0x02
    attrs[2] = (info->fattrib & AM_HID) ? 'H' : '-';
    e7c8:	81 fd       	sbrc	r24, 1
    e7ca:	02 c0       	rjmp	.+4      	; 0xe7d0 <fatfs_filinfo_list+0x4c>
    e7cc:	9d e2       	ldi	r25, 0x2D	; 45
    e7ce:	01 c0       	rjmp	.+2      	; 0xe7d2 <fatfs_filinfo_list+0x4e>
    e7d0:	98 e4       	ldi	r25, 0x48	; 72
    e7d2:	9b 83       	std	Y+3, r25	; 0x03
    attrs[3] = (info->fattrib & AM_SYS) ? 'S' : '-';
    e7d4:	82 fd       	sbrc	r24, 2
    e7d6:	02 c0       	rjmp	.+4      	; 0xe7dc <fatfs_filinfo_list+0x58>
    e7d8:	9d e2       	ldi	r25, 0x2D	; 45
    e7da:	01 c0       	rjmp	.+2      	; 0xe7de <fatfs_filinfo_list+0x5a>
    e7dc:	93 e5       	ldi	r25, 0x53	; 83
    e7de:	9c 83       	std	Y+4, r25	; 0x04
    attrs[4] = (info->fattrib & AM_ARC) ? 'A' : '-';
    e7e0:	85 fd       	sbrc	r24, 5
    e7e2:	02 c0       	rjmp	.+4      	; 0xe7e8 <fatfs_filinfo_list+0x64>
    e7e4:	8d e2       	ldi	r24, 0x2D	; 45
    e7e6:	01 c0       	rjmp	.+2      	; 0xe7ea <fatfs_filinfo_list+0x66>
    e7e8:	81 e4       	ldi	r24, 0x41	; 65
    e7ea:	8d 83       	std	Y+5, r24	; 0x05
    attrs[5] = 0;
    e7ec:	1e 82       	std	Y+6, r1	; 0x06
    printf("%s %u/%02u/%02u %02u:%02u %9lu %s",
    e7ee:	46 81       	ldd	r20, Z+6	; 0x06
    e7f0:	57 81       	ldd	r21, Z+7	; 0x07
    e7f2:	84 81       	ldd	r24, Z+4	; 0x04
    e7f4:	95 81       	ldd	r25, Z+5	; 0x05
    e7f6:	9f 01       	movw	r18, r30
    e7f8:	2a 5e       	subi	r18, 0xEA	; 234
    e7fa:	3f 4f       	sbci	r19, 0xFF	; 255
    e7fc:	3f 93       	push	r19
    e7fe:	2f 93       	push	r18
    e800:	23 81       	ldd	r18, Z+3	; 0x03
    e802:	2f 93       	push	r18
    e804:	22 81       	ldd	r18, Z+2	; 0x02
    e806:	2f 93       	push	r18
    e808:	21 81       	ldd	r18, Z+1	; 0x01
    e80a:	2f 93       	push	r18
    e80c:	20 81       	ld	r18, Z
    e80e:	2f 93       	push	r18
    e810:	9a 01       	movw	r18, r20
    e812:	45 e0       	ldi	r20, 0x05	; 5
    e814:	36 95       	lsr	r19
    e816:	27 95       	ror	r18
    e818:	4a 95       	dec	r20
    e81a:	e1 f7       	brne	.-8      	; 0xe814 <fatfs_filinfo_list+0x90>
    e81c:	2f 73       	andi	r18, 0x3F	; 63
    e81e:	33 27       	eor	r19, r19
    e820:	3f 93       	push	r19
    e822:	2f 93       	push	r18
    e824:	25 2f       	mov	r18, r21
    e826:	26 95       	lsr	r18
    e828:	26 95       	lsr	r18
    e82a:	26 95       	lsr	r18
    e82c:	1f 92       	push	r1
    e82e:	2f 93       	push	r18
    e830:	9c 01       	movw	r18, r24
    e832:	2f 71       	andi	r18, 0x1F	; 31
    e834:	33 27       	eor	r19, r19
    e836:	3f 93       	push	r19
    e838:	2f 93       	push	r18
    e83a:	9c 01       	movw	r18, r24
    e83c:	55 e0       	ldi	r21, 0x05	; 5
    e83e:	36 95       	lsr	r19
    e840:	27 95       	ror	r18
    e842:	5a 95       	dec	r21
    e844:	e1 f7       	brne	.-8      	; 0xe83e <fatfs_filinfo_list+0xba>
    e846:	2f 70       	andi	r18, 0x0F	; 15
    e848:	33 27       	eor	r19, r19
    e84a:	3f 93       	push	r19
    e84c:	2f 93       	push	r18
    e84e:	89 2f       	mov	r24, r25
    e850:	99 27       	eor	r25, r25
    e852:	86 95       	lsr	r24
    e854:	84 54       	subi	r24, 0x44	; 68
    e856:	98 4f       	sbci	r25, 0xF8	; 248
    e858:	9f 93       	push	r25
    e85a:	8f 93       	push	r24
    e85c:	ce 01       	movw	r24, r28
    e85e:	01 96       	adiw	r24, 0x01	; 1
    e860:	9f 93       	push	r25
    e862:	8f 93       	push	r24
    e864:	85 e6       	ldi	r24, 0x65	; 101
    e866:	98 e0       	ldi	r25, 0x08	; 8
    e868:	1f 92       	push	r1
    e86a:	9f 93       	push	r25
    e86c:	8f 93       	push	r24
    e86e:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
        attrs,
        (info->fdate >> 9) + 1980, (info->fdate >> 5) & 15, info->fdate & 31,
        (info->ftime >> 11), (info->ftime >> 5) & 63,
        info->fsize, info->fname);
    printf("\n");
    e872:	83 e6       	ldi	r24, 0x63	; 99
    e874:	98 e0       	ldi	r25, 0x08	; 8
    e876:	1f 92       	push	r1
    e878:	9f 93       	push	r25
    e87a:	8f 93       	push	r24
    e87c:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    e880:	0f b6       	in	r0, 0x3f	; 63
    e882:	f8 94       	cli
    e884:	de bf       	out	0x3e, r29	; 62
    e886:	0f be       	out	0x3f, r0	; 63
    e888:	cd bf       	out	0x3d, r28	; 61
}
    e88a:	26 96       	adiw	r28, 0x06	; 6
    e88c:	e2 e0       	ldi	r30, 0x02	; 2
    e88e:	0c 94 1f e6 	jmp	0x1cc3e	; 0x1cc3e <__epilogue_restores__+0x20>

0000e892 <fatfs_help>:

/// @brief Display FatFs test diagnostics help menu.
/// @return  void
MEMSPACE
void fatfs_help( int full)
{
    e892:	cf 93       	push	r28
    e894:	df 93       	push	r29
    e896:	ec 01       	movw	r28, r24
    printf("fatfs help\n");
    e898:	88 ea       	ldi	r24, 0xA8	; 168
    e89a:	9b e0       	ldi	r25, 0x0B	; 11
    e89c:	1f 92       	push	r1
    e89e:	9f 93       	push	r25
    e8a0:	8f 93       	push	r24
    e8a2:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    
    if(full)
    e8a6:	0f 90       	pop	r0
    e8a8:	0f 90       	pop	r0
    e8aa:	0f 90       	pop	r0
    e8ac:	cd 2b       	or	r28, r29
    e8ae:	51 f0       	breq	.+20     	; 0xe8c4 <fatfs_help+0x32>
    {
        printf(
    e8b0:	8c e2       	ldi	r24, 0x2C	; 44
    e8b2:	9b e0       	ldi	r25, 0x0B	; 11
    e8b4:	1f 92       	push	r1
    e8b6:	9f 93       	push	r25
    e8b8:	8f 93       	push	r24
    e8ba:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    e8be:	0f 90       	pop	r0
    e8c0:	0f 90       	pop	r0
    e8c2:	0f 90       	pop	r0
#endif
        "\n"
        );
    }
        
}
    e8c4:	df 91       	pop	r29
    e8c6:	cf 91       	pop	r28
    e8c8:	08 95       	ret

0000e8ca <fatfs_ls>:
///
/// @see fatfs_filinfo_list().
/// @return  void.
MEMSPACE
void fatfs_ls(char *name)
{
    e8ca:	aa e4       	ldi	r26, 0x4A	; 74
    e8cc:	b2 e0       	ldi	r27, 0x02	; 2
    e8ce:	eb e6       	ldi	r30, 0x6B	; 107
    e8d0:	f4 e7       	ldi	r31, 0x74	; 116
    e8d2:	0c 94 fd e5 	jmp	0x1cbfa	; 0x1cbfa <__prologue_saves__+0x14>
    e8d6:	8e 01       	movw	r16, r28
    e8d8:	09 5e       	subi	r16, 0xE9	; 233
    e8da:	1e 4f       	sbci	r17, 0xFE	; 254
    FILINFO fno;
    DIR dirs;                                     /* Directory object */
    FATFS *fs;
    char buff[256]; 

    if(!name || !*name)
    e8dc:	00 97       	sbiw	r24, 0x00	; 0
    e8de:	21 f0       	breq	.+8      	; 0xe8e8 <fatfs_ls+0x1e>
    e8e0:	fc 01       	movw	r30, r24
    e8e2:	20 81       	ld	r18, Z
    e8e4:	21 11       	cpse	r18, r1
    e8e6:	03 c0       	rjmp	.+6      	; 0xe8ee <fatfs_ls+0x24>
    {
        strcpy(buff,".");
    e8e8:	66 e4       	ldi	r22, 0x46	; 70
    e8ea:	72 e1       	ldi	r23, 0x12	; 18
    e8ec:	01 c0       	rjmp	.+2      	; 0xe8f0 <fatfs_ls+0x26>
    }
    else
    {
        strcpy(buff,name);
    e8ee:	bc 01       	movw	r22, r24
    e8f0:	c8 01       	movw	r24, r16
    e8f2:	0e 94 56 32 	call	0x64ac	; 0x64ac <strcpy>
    }
    printf("Listing:[%s]\n",buff);
    e8f6:	1f 93       	push	r17
    e8f8:	0f 93       	push	r16
    e8fa:	8c e9       	ldi	r24, 0x9C	; 156
    e8fc:	9a e0       	ldi	r25, 0x0A	; 10
    e8fe:	1f 92       	push	r1
    e900:	9f 93       	push	r25
    e902:	8f 93       	push	r24
    e904:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>

    res = f_opendir(&dirs, buff);
    e908:	b8 01       	movw	r22, r16
    e90a:	ce 01       	movw	r24, r28
    e90c:	89 5e       	subi	r24, 0xE9	; 233
    e90e:	9d 4f       	sbci	r25, 0xFD	; 253
    e910:	0e 94 f2 64 	call	0xc9e4	; 0xc9e4 <f_opendir>
    if (res) { put_rc(res); return; }
    e914:	0f 90       	pop	r0
    e916:	0f 90       	pop	r0
    e918:	0f 90       	pop	r0
    e91a:	0f 90       	pop	r0
    e91c:	0f 90       	pop	r0
    e91e:	00 97       	sbiw	r24, 0x00	; 0
    e920:	11 f0       	breq	.+4      	; 0xe926 <fatfs_ls+0x5c>
    e922:	36 dd       	rcall	.-1428   	; 0xe390 <put_rc>
    p1 = s1 = s2 = 0;
    e924:	9a c0       	rjmp	.+308    	; 0xea5a <fatfs_ls+0x190>
    e926:	cb 5b       	subi	r28, 0xBB	; 187
    e928:	dd 4f       	sbci	r29, 0xFD	; 253
    e92a:	18 82       	st	Y, r1
    e92c:	19 82       	std	Y+1, r1	; 0x01
    e92e:	1a 82       	std	Y+2, r1	; 0x02
    e930:	1b 82       	std	Y+3, r1	; 0x03
    e932:	c5 54       	subi	r28, 0x45	; 69
    e934:	d2 40       	sbci	r29, 0x02	; 2
    e936:	c1 2c       	mov	r12, r1
    e938:	d1 2c       	mov	r13, r1
    e93a:	e1 2c       	mov	r14, r1
    while(1)
    {
        res = f_readdir(&dirs, &fno);
    e93c:	f1 2c       	mov	r15, r1
    e93e:	be 01       	movw	r22, r28
    e940:	6f 5f       	subi	r22, 0xFF	; 255
    e942:	7f 4f       	sbci	r23, 0xFF	; 255
    e944:	ce 01       	movw	r24, r28
    e946:	89 5e       	subi	r24, 0xE9	; 233
    e948:	9d 4f       	sbci	r25, 0xFD	; 253
    e94a:	0e 94 78 65 	call	0xcaf0	; 0xcaf0 <f_readdir>
        if ((res != FR_OK) || !fno.fname[0]) break;
    e94e:	89 2b       	or	r24, r25
    e950:	49 f5       	brne	.+82     	; 0xe9a4 <fatfs_ls+0xda>
    e952:	8f 89       	ldd	r24, Y+23	; 0x17
    e954:	88 23       	and	r24, r24
        if (fno.fattrib & AM_DIR)
    e956:	31 f1       	breq	.+76     	; 0xe9a4 <fatfs_ls+0xda>
    e958:	89 85       	ldd	r24, Y+9	; 0x09
    e95a:	84 ff       	sbrs	r24, 4
        {
            s2++;
    e95c:	04 c0       	rjmp	.+8      	; 0xe966 <fatfs_ls+0x9c>
    e95e:	ff ef       	ldi	r31, 0xFF	; 255
    e960:	cf 1a       	sub	r12, r31
    e962:	df 0a       	sbc	r13, r31
        }
        else
        {
            s1++; p1 += fno.fsize;
    e964:	1b c0       	rjmp	.+54     	; 0xe99c <fatfs_ls+0xd2>
    e966:	2f ef       	ldi	r18, 0xFF	; 255
    e968:	e2 1a       	sub	r14, r18
    e96a:	f2 0a       	sbc	r15, r18
    e96c:	49 81       	ldd	r20, Y+1	; 0x01
    e96e:	5a 81       	ldd	r21, Y+2	; 0x02
    e970:	6b 81       	ldd	r22, Y+3	; 0x03
    e972:	7c 81       	ldd	r23, Y+4	; 0x04
    e974:	cb 5b       	subi	r28, 0xBB	; 187
    e976:	dd 4f       	sbci	r29, 0xFD	; 253
    e978:	88 81       	ld	r24, Y
    e97a:	99 81       	ldd	r25, Y+1	; 0x01
    e97c:	aa 81       	ldd	r26, Y+2	; 0x02
    e97e:	bb 81       	ldd	r27, Y+3	; 0x03
    e980:	c5 54       	subi	r28, 0x45	; 69
    e982:	d2 40       	sbci	r29, 0x02	; 2
    e984:	84 0f       	add	r24, r20
    e986:	95 1f       	adc	r25, r21
    e988:	a6 1f       	adc	r26, r22
    e98a:	b7 1f       	adc	r27, r23
    e98c:	cb 5b       	subi	r28, 0xBB	; 187
    e98e:	dd 4f       	sbci	r29, 0xFD	; 253
    e990:	88 83       	st	Y, r24
    e992:	99 83       	std	Y+1, r25	; 0x01
    e994:	aa 83       	std	Y+2, r26	; 0x02
    e996:	bb 83       	std	Y+3, r27	; 0x03
    e998:	c5 54       	subi	r28, 0x45	; 69
        }
        fatfs_filinfo_list(&fno);
    e99a:	d2 40       	sbci	r29, 0x02	; 2
    e99c:	ce 01       	movw	r24, r28
    e99e:	01 96       	adiw	r24, 0x01	; 1
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    e9a0:	f1 de       	rcall	.-542    	; 0xe784 <fatfs_filinfo_list>
    printf("%4u File(s),%10lu bytes total\n%4u Dir(s)", s1, p1, s2);
    e9a2:	cd cf       	rjmp	.-102    	; 0xe93e <fatfs_ls+0x74>
    e9a4:	df 92       	push	r13
    e9a6:	cf 92       	push	r12
    e9a8:	c8 5b       	subi	r28, 0xB8	; 184
    e9aa:	dd 4f       	sbci	r29, 0xFD	; 253
    e9ac:	88 81       	ld	r24, Y
    e9ae:	c8 54       	subi	r28, 0x48	; 72
    e9b0:	d2 40       	sbci	r29, 0x02	; 2
    e9b2:	8f 93       	push	r24
    e9b4:	c9 5b       	subi	r28, 0xB9	; 185
    e9b6:	dd 4f       	sbci	r29, 0xFD	; 253
    e9b8:	88 81       	ld	r24, Y
    e9ba:	c7 54       	subi	r28, 0x47	; 71
    e9bc:	d2 40       	sbci	r29, 0x02	; 2
    e9be:	8f 93       	push	r24
    e9c0:	ca 5b       	subi	r28, 0xBA	; 186
    e9c2:	dd 4f       	sbci	r29, 0xFD	; 253
    e9c4:	88 81       	ld	r24, Y
    e9c6:	c6 54       	subi	r28, 0x46	; 70
    e9c8:	d2 40       	sbci	r29, 0x02	; 2
    e9ca:	8f 93       	push	r24
    e9cc:	cb 5b       	subi	r28, 0xBB	; 187
    e9ce:	dd 4f       	sbci	r29, 0xFD	; 253
    e9d0:	88 81       	ld	r24, Y
    e9d2:	c5 54       	subi	r28, 0x45	; 69
    e9d4:	d2 40       	sbci	r29, 0x02	; 2
    e9d6:	8f 93       	push	r24
    e9d8:	ff 92       	push	r15
    e9da:	ef 92       	push	r14
    e9dc:	83 e7       	ldi	r24, 0x73	; 115
    e9de:	9a e0       	ldi	r25, 0x0A	; 10
    e9e0:	1f 92       	push	r1
    e9e2:	9f 93       	push	r25
    e9e4:	8f 93       	push	r24
    e9e6:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    if (f_getfree(buff, (DWORD*)&p1, &fs) == FR_OK)
    e9ea:	ae 01       	movw	r20, r28
    e9ec:	47 5b       	subi	r20, 0xB7	; 183
    e9ee:	5d 4f       	sbci	r21, 0xFD	; 253
    e9f0:	be 01       	movw	r22, r28
    e9f2:	6b 5b       	subi	r22, 0xBB	; 187
    e9f4:	7d 4f       	sbci	r23, 0xFD	; 253
    e9f6:	c8 01       	movw	r24, r16
    e9f8:	0e 94 fa 65 	call	0xcbf4	; 0xcbf4 <f_getfree>
    e9fc:	0f b6       	in	r0, 0x3f	; 63
    e9fe:	f8 94       	cli
    ea00:	de bf       	out	0x3e, r29	; 62
    ea02:	0f be       	out	0x3f, r0	; 63
    ea04:	cd bf       	out	0x3d, r28	; 61
    ea06:	89 2b       	or	r24, r25
        printf(", %10luK bytes free\n", p1 * fs->csize / 2);
    ea08:	41 f5       	brne	.+80     	; 0xea5a <fatfs_ls+0x190>
    ea0a:	c7 5b       	subi	r28, 0xB7	; 183
    ea0c:	dd 4f       	sbci	r29, 0xFD	; 253
    ea0e:	e8 81       	ld	r30, Y
    ea10:	f9 81       	ldd	r31, Y+1	; 0x01
    ea12:	c9 54       	subi	r28, 0x49	; 73
    ea14:	d2 40       	sbci	r29, 0x02	; 2
    ea16:	a1 85       	ldd	r26, Z+9	; 0x09
    ea18:	b2 85       	ldd	r27, Z+10	; 0x0a
    ea1a:	cb 5b       	subi	r28, 0xBB	; 187
    ea1c:	dd 4f       	sbci	r29, 0xFD	; 253
    ea1e:	28 81       	ld	r18, Y
    ea20:	39 81       	ldd	r19, Y+1	; 0x01
    ea22:	4a 81       	ldd	r20, Y+2	; 0x02
    ea24:	5b 81       	ldd	r21, Y+3	; 0x03
    ea26:	c5 54       	subi	r28, 0x45	; 69
    ea28:	d2 40       	sbci	r29, 0x02	; 2
    ea2a:	0e 94 d3 e5 	call	0x1cba6	; 0x1cba6 <__muluhisi3>
    ea2e:	22 e0       	ldi	r18, 0x02	; 2
    ea30:	30 e0       	ldi	r19, 0x00	; 0
    ea32:	40 e0       	ldi	r20, 0x00	; 0
    ea34:	50 e0       	ldi	r21, 0x00	; 0
    ea36:	0e 94 93 e5 	call	0x1cb26	; 0x1cb26 <__divmodsi4>
    ea3a:	5f 93       	push	r21
    ea3c:	4f 93       	push	r20
    ea3e:	3f 93       	push	r19
    ea40:	2f 93       	push	r18
    ea42:	8e e5       	ldi	r24, 0x5E	; 94
    ea44:	9a e0       	ldi	r25, 0x0A	; 10
    ea46:	1f 92       	push	r1
    ea48:	9f 93       	push	r25
    ea4a:	8f 93       	push	r24
    ea4c:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    ea50:	0f b6       	in	r0, 0x3f	; 63
    ea52:	f8 94       	cli
    ea54:	de bf       	out	0x3e, r29	; 62
    ea56:	0f be       	out	0x3f, r0	; 63
}
    ea58:	cd bf       	out	0x3d, r28	; 61
    ea5a:	c6 5b       	subi	r28, 0xB6	; 182
    ea5c:	dd 4f       	sbci	r29, 0xFD	; 253
    ea5e:	e8 e0       	ldi	r30, 0x08	; 8
    ea60:	0c 94 19 e6 	jmp	0x1cc32	; 0x1cc32 <__epilogue_restores__+0x14>

0000ea64 <mmc_test>:
///
/// @return void
MEMSPACE
void mmc_test(void)
{
    printf("==============================\n");
    ea64:	8c ef       	ldi	r24, 0xFC	; 252
    ea66:	9a e0       	ldi	r25, 0x0A	; 10
    ea68:	1f 92       	push	r1
    ea6a:	9f 93       	push	r25
    ea6c:	8f 93       	push	r24
    ea6e:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    printf("START MMC TEST\n");
    ea72:	8c ee       	ldi	r24, 0xEC	; 236
    ea74:	9a e0       	ldi	r25, 0x0A	; 10
    ea76:	1f 92       	push	r1
    ea78:	9f 93       	push	r25
    ea7a:	8f 93       	push	r24
    ea7c:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    fatfs_status("/");
    ea80:	88 e3       	ldi	r24, 0x38	; 56
    ea82:	98 e0       	ldi	r25, 0x08	; 8
    ea84:	13 dd       	rcall	.-1498   	; 0xe4ac <fatfs_status>
    printf("MMC Directory List\n");
    ea86:	88 ed       	ldi	r24, 0xD8	; 216
    ea88:	9a e0       	ldi	r25, 0x0A	; 10
    ea8a:	1f 92       	push	r1
    ea8c:	9f 93       	push	r25
    ea8e:	8f 93       	push	r24
    ea90:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    fatfs_ls("/");
    ea94:	88 e3       	ldi	r24, 0x38	; 56
    ea96:	98 e0       	ldi	r25, 0x08	; 8
    ea98:	18 df       	rcall	.-464    	; 0xe8ca <fatfs_ls>
    fatfs_cat("test3.txt");
    fatfs_ls("");
#endif
#endif

    printf("END MMC TEST\n");
    ea9a:	8a ec       	ldi	r24, 0xCA	; 202
    ea9c:	9a e0       	ldi	r25, 0x0A	; 10
    ea9e:	1f 92       	push	r1
    eaa0:	9f 93       	push	r25
    eaa2:	8f 93       	push	r24
    eaa4:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    printf("==============================\n");
    eaa8:	8a ea       	ldi	r24, 0xAA	; 170
    eaaa:	9a e0       	ldi	r25, 0x0A	; 10
    eaac:	1f 92       	push	r1
    eaae:	9f 93       	push	r25
    eab0:	8f 93       	push	r24
    eab2:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
}
    eab6:	8d b7       	in	r24, 0x3d	; 61
    eab8:	9e b7       	in	r25, 0x3e	; 62
    eaba:	0f 96       	adiw	r24, 0x0f	; 15
    eabc:	0f b6       	in	r0, 0x3f	; 63
    eabe:	f8 94       	cli
    eac0:	9e bf       	out	0x3e, r25	; 62
    eac2:	0f be       	out	0x3f, r0	; 63
    eac4:	8d bf       	out	0x3d, r24	; 61
    eac6:	08 95       	ret

0000eac8 <fatfs_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int fatfs_tests(int argc,char *argv[])
{
    eac8:	ef 92       	push	r14
    eaca:	ff 92       	push	r15
    eacc:	0f 93       	push	r16
    eace:	1f 93       	push	r17
    ead0:	cf 93       	push	r28
    ead2:	df 93       	push	r29
    char *ptr;
    int ind;


    ind = 0;
    ptr = argv[ind++];
    ead4:	fb 01       	movw	r30, r22
    ead6:	20 81       	ld	r18, Z
    ead8:	31 81       	ldd	r19, Z+1	; 0x01

    if(!ptr)
    eada:	21 15       	cp	r18, r1
    eadc:	31 05       	cpc	r19, r1
    eade:	19 f4       	brne	.+6      	; 0xeae6 <fatfs_tests+0x1e>
        return(0);
    eae0:	80 e0       	ldi	r24, 0x00	; 0
    eae2:	90 e0       	ldi	r25, 0x00	; 0
    eae4:	77 c0       	rjmp	.+238    	; 0xebd4 <fatfs_tests+0x10c>
    eae6:	eb 01       	movw	r28, r22
    eae8:	8c 01       	movw	r16, r24

// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCH(ptr,"fatfs") )
    eaea:	6c e5       	ldi	r22, 0x5C	; 92
    eaec:	78 e0       	ldi	r23, 0x08	; 8
    eaee:	c9 01       	movw	r24, r18
    eaf0:	0e 94 33 33 	call	0x6666	; 0x6666 <MATCH>
    eaf4:	89 2b       	or	r24, r25
    eaf6:	a1 f3       	breq	.-24     	; 0xeae0 <fatfs_tests+0x18>
    {
        ptr = argv[ind++];
    eaf8:	ea 80       	ldd	r14, Y+2	; 0x02
    eafa:	fb 80       	ldd	r15, Y+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
    eafc:	e1 14       	cp	r14, r1
    eafe:	f1 04       	cpc	r15, r1
    eb00:	21 f4       	brne	.+8      	; 0xeb0a <fatfs_tests+0x42>
        {
            fatfs_help(1);
    eb02:	81 e0       	ldi	r24, 0x01	; 1
    eb04:	90 e0       	ldi	r25, 0x00	; 0
    eb06:	c5 de       	rcall	.-630    	; 0xe892 <fatfs_help>
    eb08:	63 c0       	rjmp	.+198    	; 0xebd0 <fatfs_tests+0x108>
// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCH(ptr,"fatfs") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
    eb0a:	67 ef       	ldi	r22, 0xF7	; 247
    eb0c:	75 e1       	ldi	r23, 0x15	; 21
    eb0e:	c7 01       	movw	r24, r14
    eb10:	0e 94 33 33 	call	0x6666	; 0x6666 <MATCH>
    eb14:	89 2b       	or	r24, r25
    eb16:	a9 f7       	brne	.-22     	; 0xeb02 <fatfs_tests+0x3a>
    {
        return(0);
    }
#endif

    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
    eb18:	98 01       	movw	r18, r16
    eb1a:	42 e0       	ldi	r20, 0x02	; 2
    eb1c:	50 e0       	ldi	r21, 0x00	; 0
    eb1e:	62 e6       	ldi	r22, 0x62	; 98
    eb20:	78 e0       	ldi	r23, 0x08	; 8
    eb22:	c7 01       	movw	r24, r14
    eb24:	0e 94 47 33 	call	0x668e	; 0x668e <MATCHARGS>
    eb28:	89 2b       	or	r24, r25
    eb2a:	51 f1       	breq	.+84     	; 0xeb80 <fatfs_tests+0xb8>
    {
        int i;
        int args = 0;
        printf("ind:%d,argc:%d\n", ind, argc);
    eb2c:	1f 93       	push	r17
    eb2e:	0f 93       	push	r16
    eb30:	1f 92       	push	r1
    eb32:	82 e0       	ldi	r24, 0x02	; 2
    eb34:	8f 93       	push	r24
    eb36:	8c e1       	ldi	r24, 0x1C	; 28
    eb38:	9b e0       	ldi	r25, 0x0B	; 11
    eb3a:	1f 92       	push	r1
    eb3c:	9f 93       	push	r25
    eb3e:	8f 93       	push	r24
    eb40:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    eb44:	7e 01       	movw	r14, r28
    eb46:	f4 e0       	ldi	r31, 0x04	; 4
    eb48:	ef 0e       	add	r14, r31
    eb4a:	f1 1c       	adc	r15, r1
        for(i=ind;i<argc;++i)
    eb4c:	8d b7       	in	r24, 0x3d	; 61
    eb4e:	9e b7       	in	r25, 0x3e	; 62
    eb50:	07 96       	adiw	r24, 0x07	; 7
    eb52:	0f b6       	in	r0, 0x3f	; 63
    eb54:	f8 94       	cli
    eb56:	9e bf       	out	0x3e, r25	; 62
    eb58:	0f be       	out	0x3f, r0	; 63
    eb5a:	8d bf       	out	0x3d, r24	; 61
    eb5c:	c2 e0       	ldi	r28, 0x02	; 2
    eb5e:	d0 e0       	ldi	r29, 0x00	; 0
    eb60:	c0 17       	cp	r28, r16
    eb62:	d1 07       	cpc	r29, r17
    eb64:	3c f4       	brge	.+14     	; 0xeb74 <fatfs_tests+0xac>
        {
            //printf("%d:%s\n", i, argv[i]);
            fatfs_ls(argv[i]);
    eb66:	f7 01       	movw	r30, r14
    eb68:	81 91       	ld	r24, Z+
    eb6a:	91 91       	ld	r25, Z+
    eb6c:	7f 01       	movw	r14, r30
    eb6e:	ad de       	rcall	.-678    	; 0xe8ca <fatfs_ls>
    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
    {
        int i;
        int args = 0;
        printf("ind:%d,argc:%d\n", ind, argc);
        for(i=ind;i<argc;++i)
    eb70:	21 96       	adiw	r28, 0x01	; 1
    eb72:	f6 cf       	rjmp	.-20     	; 0xeb60 <fatfs_tests+0x98>
        {
            //printf("%d:%s\n", i, argv[i]);
            fatfs_ls(argv[i]);
            ++args;
        }
        if(!args)
    eb74:	22 97       	sbiw	r28, 0x02	; 2
        {
            fatfs_ls("");
    eb76:	61 f5       	brne	.+88     	; 0xebd0 <fatfs_tests+0x108>
    eb78:	87 e1       	ldi	r24, 0x17	; 23
    eb7a:	97 e1       	ldi	r25, 0x17	; 23
    eb7c:	a6 de       	rcall	.-692    	; 0xe8ca <fatfs_ls>
        }
        return(1);
    }

    if (MATCHARGS(ptr,"mmc_test",(ind+0),argc ))
    eb7e:	28 c0       	rjmp	.+80     	; 0xebd0 <fatfs_tests+0x108>
    eb80:	98 01       	movw	r18, r16
    eb82:	42 e0       	ldi	r20, 0x02	; 2
    eb84:	50 e0       	ldi	r21, 0x00	; 0
    eb86:	65 e6       	ldi	r22, 0x65	; 101
    eb88:	78 e0       	ldi	r23, 0x08	; 8
    eb8a:	c7 01       	movw	r24, r14
    eb8c:	0e 94 47 33 	call	0x668e	; 0x668e <MATCHARGS>
    {
        mmc_test();
    eb90:	89 2b       	or	r24, r25
    eb92:	11 f0       	breq	.+4      	; 0xeb98 <fatfs_tests+0xd0>
    eb94:	67 df       	rcall	.-306    	; 0xea64 <mmc_test>
        return(1);
    }

    if (MATCHARGS(ptr,"mmc_init",(ind+0),argc))
    eb96:	1c c0       	rjmp	.+56     	; 0xebd0 <fatfs_tests+0x108>
    eb98:	98 01       	movw	r18, r16
    eb9a:	42 e0       	ldi	r20, 0x02	; 2
    eb9c:	50 e0       	ldi	r21, 0x00	; 0
    eb9e:	6e e6       	ldi	r22, 0x6E	; 110
    eba0:	78 e0       	ldi	r23, 0x08	; 8
    eba2:	c7 01       	movw	r24, r14
    eba4:	0e 94 47 33 	call	0x668e	; 0x668e <MATCHARGS>
    {
        mmc_init(1);
    eba8:	89 2b       	or	r24, r25
    ebaa:	21 f0       	breq	.+8      	; 0xebb4 <fatfs_tests+0xec>
    ebac:	81 e0       	ldi	r24, 0x01	; 1
    ebae:	90 e0       	ldi	r25, 0x00	; 0
    ebb0:	cb da       	rcall	.-2666   	; 0xe148 <mmc_init>
        return(1);
    }

    if (MATCHARGS(ptr,"status", (ind + 1), argc))
    ebb2:	0e c0       	rjmp	.+28     	; 0xebd0 <fatfs_tests+0x108>
    ebb4:	98 01       	movw	r18, r16
    ebb6:	43 e0       	ldi	r20, 0x03	; 3
    ebb8:	50 e0       	ldi	r21, 0x00	; 0
    ebba:	67 e7       	ldi	r22, 0x77	; 119
    ebbc:	78 e0       	ldi	r23, 0x08	; 8
    ebbe:	c7 01       	movw	r24, r14
    ebc0:	0e 94 47 33 	call	0x668e	; 0x668e <MATCHARGS>
    ebc4:	89 2b       	or	r24, r25
    {
        fatfs_status(argv[ind]);
    ebc6:	09 f4       	brne	.+2      	; 0xebca <fatfs_tests+0x102>
    ebc8:	8b cf       	rjmp	.-234    	; 0xeae0 <fatfs_tests+0x18>
    ebca:	8c 81       	ldd	r24, Y+4	; 0x04
    ebcc:	9d 81       	ldd	r25, Y+5	; 0x05
        }
        if(!args)
        {
            fatfs_ls("");
        }
        return(1);
    ebce:	6e dc       	rcall	.-1828   	; 0xe4ac <fatfs_status>
    ebd0:	81 e0       	ldi	r24, 0x01	; 1
        return(1);
    }
#endif

    return(0);
}
    ebd2:	90 e0       	ldi	r25, 0x00	; 0
    ebd4:	cd b7       	in	r28, 0x3d	; 61
    ebd6:	de b7       	in	r29, 0x3e	; 62
    ebd8:	e6 e0       	ldi	r30, 0x06	; 6
    ebda:	0c 94 1b e6 	jmp	0x1cc36	; 0x1cc36 <__epilogue_restores__+0x18>

0000ebde <fatfs_getc>:
    {
        errno = fatfs_to_errno(rc);
        return(-1);
    }
    return(0);
}
    ebde:	8f 92       	push	r8
    ebe0:	9f 92       	push	r9
    ebe2:	af 92       	push	r10
    ebe4:	bf 92       	push	r11
    ebe6:	ef 92       	push	r14
    ebe8:	ff 92       	push	r15
    ebea:	0f 93       	push	r16
    ebec:	1f 93       	push	r17
    ebee:	cf 93       	push	r28
    ebf0:	df 93       	push	r29
    ebf2:	00 d0       	rcall	.+0      	; 0xebf4 <fatfs_getc+0x16>
    ebf4:	1f 92       	push	r1
    ebf6:	cd b7       	in	r28, 0x3d	; 61
    ebf8:	de b7       	in	r29, 0x3e	; 62
    ebfa:	10 92 be 1b 	sts	0x1BBE, r1	; 0x801bbe <errno+0x1>
    ebfe:	10 92 bd 1b 	sts	0x1BBD, r1	; 0x801bbd <errno>
    ec02:	00 97       	sbiw	r24, 0x00	; 0
    ec04:	39 f4       	brne	.+14     	; 0xec14 <fatfs_getc+0x36>
    ec06:	89 e0       	ldi	r24, 0x09	; 9
    ec08:	90 e0       	ldi	r25, 0x00	; 0
    ec0a:	90 93 be 1b 	sts	0x1BBE, r25	; 0x801bbe <errno+0x1>
    ec0e:	80 93 bd 1b 	sts	0x1BBD, r24	; 0x801bbd <errno>
    ec12:	2f c0       	rjmp	.+94     	; 0xec72 <fatfs_getc+0x94>
    ec14:	fc 01       	movw	r30, r24
    ec16:	e4 84       	ldd	r14, Z+12	; 0x0c
    ec18:	f5 84       	ldd	r15, Z+13	; 0x0d
    ec1a:	e1 14       	cp	r14, r1
    ec1c:	f1 04       	cpc	r15, r1
    ec1e:	99 f3       	breq	.-26     	; 0xec06 <fatfs_getc+0x28>
    ec20:	8c 01       	movw	r16, r24
    ec22:	9e 01       	movw	r18, r28
    ec24:	2f 5f       	subi	r18, 0xFF	; 255
    ec26:	3f 4f       	sbci	r19, 0xFF	; 255
    ec28:	41 e0       	ldi	r20, 0x01	; 1
    ec2a:	50 e0       	ldi	r21, 0x00	; 0
    ec2c:	be 01       	movw	r22, r28
    ec2e:	6d 5f       	subi	r22, 0xFD	; 253
    ec30:	7f 4f       	sbci	r23, 0xFF	; 255
    ec32:	c7 01       	movw	r24, r14
    ec34:	0e 94 0b 5d 	call	0xba16	; 0xba16 <f_read>
    ec38:	00 97       	sbiw	r24, 0x00	; 0
    ec3a:	31 f4       	brne	.+12     	; 0xec48 <fatfs_getc+0x6a>
    ec3c:	29 81       	ldd	r18, Y+1	; 0x01
    ec3e:	3a 81       	ldd	r19, Y+2	; 0x02
    ec40:	21 30       	cpi	r18, 0x01	; 1
    ec42:	31 05       	cpc	r19, r1
    ec44:	c9 f0       	breq	.+50     	; 0xec78 <fatfs_getc+0x9a>
    ec46:	03 c0       	rjmp	.+6      	; 0xec4e <fatfs_getc+0x70>
    ec48:	84 31       	cpi	r24, 0x14	; 20
    ec4a:	91 05       	cpc	r25, r1
    ec4c:	40 f4       	brcc	.+16     	; 0xec5e <fatfs_getc+0x80>
    ec4e:	fc 01       	movw	r30, r24
    ec50:	e0 5f       	subi	r30, 0xF0	; 240
    ec52:	f8 4f       	sbci	r31, 0xF8	; 248
    ec54:	80 81       	ld	r24, Z
    ec56:	08 2e       	mov	r0, r24
    ec58:	00 0c       	add	r0, r0
    ec5a:	99 0b       	sbc	r25, r25
    ec5c:	02 c0       	rjmp	.+4      	; 0xec62 <fatfs_getc+0x84>
    ec5e:	83 e2       	ldi	r24, 0x23	; 35
    ec60:	90 e0       	ldi	r25, 0x00	; 0
    ec62:	90 93 be 1b 	sts	0x1BBE, r25	; 0x801bbe <errno+0x1>
    ec66:	80 93 bd 1b 	sts	0x1BBD, r24	; 0x801bbd <errno>
    ec6a:	f8 01       	movw	r30, r16
    ec6c:	83 81       	ldd	r24, Z+3	; 0x03
    ec6e:	80 62       	ori	r24, 0x20	; 32
    ec70:	83 83       	std	Z+3, r24	; 0x03
    ec72:	8f ef       	ldi	r24, 0xFF	; 255
    ec74:	9f ef       	ldi	r25, 0xFF	; 255
    ec76:	28 c0       	rjmp	.+80     	; 0xecc8 <fatfs_getc+0xea>
    ec78:	8b 81       	ldd	r24, Y+3	; 0x03
    ec7a:	8d 30       	cpi	r24, 0x0D	; 13
    ec7c:	01 f5       	brne	.+64     	; 0xecbe <fatfs_getc+0xe0>
    ec7e:	f7 01       	movw	r30, r14
    ec80:	80 88       	ldd	r8, Z+16	; 0x10
    ec82:	91 88       	ldd	r9, Z+17	; 0x11
    ec84:	a2 88       	ldd	r10, Z+18	; 0x12
    ec86:	b3 88       	ldd	r11, Z+19	; 0x13
    ec88:	9e 01       	movw	r18, r28
    ec8a:	2f 5f       	subi	r18, 0xFF	; 255
    ec8c:	3f 4f       	sbci	r19, 0xFF	; 255
    ec8e:	41 e0       	ldi	r20, 0x01	; 1
    ec90:	50 e0       	ldi	r21, 0x00	; 0
    ec92:	be 01       	movw	r22, r28
    ec94:	6d 5f       	subi	r22, 0xFD	; 253
    ec96:	7f 4f       	sbci	r23, 0xFF	; 255
    ec98:	c7 01       	movw	r24, r14
    ec9a:	0e 94 0b 5d 	call	0xba16	; 0xba16 <f_read>
    ec9e:	89 2b       	or	r24, r25
    eca0:	89 f4       	brne	.+34     	; 0xecc4 <fatfs_getc+0xe6>
    eca2:	89 81       	ldd	r24, Y+1	; 0x01
    eca4:	9a 81       	ldd	r25, Y+2	; 0x02
    eca6:	01 97       	sbiw	r24, 0x01	; 1
    eca8:	69 f4       	brne	.+26     	; 0xecc4 <fatfs_getc+0xe6>
    ecaa:	8b 81       	ldd	r24, Y+3	; 0x03
    ecac:	8a 30       	cpi	r24, 0x0A	; 10
    ecae:	31 f0       	breq	.+12     	; 0xecbc <fatfs_getc+0xde>
    ecb0:	b5 01       	movw	r22, r10
    ecb2:	a4 01       	movw	r20, r8
    ecb4:	c7 01       	movw	r24, r14
    ecb6:	0e 94 17 62 	call	0xc42e	; 0xc42e <f_lseek>
    ecba:	04 c0       	rjmp	.+8      	; 0xecc4 <fatfs_getc+0xe6>
    ecbc:	8b 83       	std	Y+3, r24	; 0x03
    ecbe:	8b 81       	ldd	r24, Y+3	; 0x03
    ecc0:	90 e0       	ldi	r25, 0x00	; 0
    ecc2:	02 c0       	rjmp	.+4      	; 0xecc8 <fatfs_getc+0xea>
    ecc4:	8a e0       	ldi	r24, 0x0A	; 10
    ecc6:	90 e0       	ldi	r25, 0x00	; 0
    ecc8:	0f 90       	pop	r0
    ecca:	0f 90       	pop	r0
    eccc:	0f 90       	pop	r0
    ecce:	df 91       	pop	r29
    ecd0:	cf 91       	pop	r28
    ecd2:	1f 91       	pop	r17
    ecd4:	0f 91       	pop	r16
    ecd6:	ff 90       	pop	r15
    ecd8:	ef 90       	pop	r14
    ecda:	bf 90       	pop	r11
    ecdc:	af 90       	pop	r10
    ecde:	9f 90       	pop	r9
    ece0:	8f 90       	pop	r8
    ece2:	08 95       	ret

0000ece4 <fatfs_putc>:
    ece4:	a3 e0       	ldi	r26, 0x03	; 3
    ece6:	b0 e0       	ldi	r27, 0x00	; 0
    ece8:	e8 e7       	ldi	r30, 0x78	; 120
    ecea:	f6 e7       	ldi	r31, 0x76	; 118
    ecec:	0c 94 01 e6 	jmp	0x1cc02	; 0x1cc02 <__prologue_saves__+0x1c>
    ecf0:	8b 83       	std	Y+3, r24	; 0x03
    ecf2:	10 92 be 1b 	sts	0x1BBE, r1	; 0x801bbe <errno+0x1>
    ecf6:	10 92 bd 1b 	sts	0x1BBD, r1	; 0x801bbd <errno>
    ecfa:	61 15       	cp	r22, r1
    ecfc:	71 05       	cpc	r23, r1
    ecfe:	39 f4       	brne	.+14     	; 0xed0e <fatfs_putc+0x2a>
    ed00:	89 e0       	ldi	r24, 0x09	; 9
    ed02:	90 e0       	ldi	r25, 0x00	; 0
    ed04:	90 93 be 1b 	sts	0x1BBE, r25	; 0x801bbe <errno+0x1>
    ed08:	80 93 bd 1b 	sts	0x1BBD, r24	; 0x801bbd <errno>
    ed0c:	2d c0       	rjmp	.+90     	; 0xed68 <fatfs_putc+0x84>
    ed0e:	fb 01       	movw	r30, r22
    ed10:	84 85       	ldd	r24, Z+12	; 0x0c
    ed12:	95 85       	ldd	r25, Z+13	; 0x0d
    ed14:	00 97       	sbiw	r24, 0x00	; 0
    ed16:	a1 f3       	breq	.-24     	; 0xed00 <fatfs_putc+0x1c>
    ed18:	8b 01       	movw	r16, r22
    ed1a:	9e 01       	movw	r18, r28
    ed1c:	2f 5f       	subi	r18, 0xFF	; 255
    ed1e:	3f 4f       	sbci	r19, 0xFF	; 255
    ed20:	41 e0       	ldi	r20, 0x01	; 1
    ed22:	50 e0       	ldi	r21, 0x00	; 0
    ed24:	be 01       	movw	r22, r28
    ed26:	6d 5f       	subi	r22, 0xFD	; 253
    ed28:	7f 4f       	sbci	r23, 0xFF	; 255
    ed2a:	0e 94 56 5e 	call	0xbcac	; 0xbcac <f_write>
    ed2e:	00 97       	sbiw	r24, 0x00	; 0
    ed30:	31 f4       	brne	.+12     	; 0xed3e <fatfs_putc+0x5a>
    ed32:	29 81       	ldd	r18, Y+1	; 0x01
    ed34:	3a 81       	ldd	r19, Y+2	; 0x02
    ed36:	21 30       	cpi	r18, 0x01	; 1
    ed38:	31 05       	cpc	r19, r1
    ed3a:	c9 f0       	breq	.+50     	; 0xed6e <fatfs_putc+0x8a>
    ed3c:	03 c0       	rjmp	.+6      	; 0xed44 <fatfs_putc+0x60>
    ed3e:	84 31       	cpi	r24, 0x14	; 20
    ed40:	91 05       	cpc	r25, r1
    ed42:	40 f4       	brcc	.+16     	; 0xed54 <fatfs_putc+0x70>
    ed44:	fc 01       	movw	r30, r24
    ed46:	e0 5f       	subi	r30, 0xF0	; 240
    ed48:	f8 4f       	sbci	r31, 0xF8	; 248
    ed4a:	80 81       	ld	r24, Z
    ed4c:	08 2e       	mov	r0, r24
    ed4e:	00 0c       	add	r0, r0
    ed50:	99 0b       	sbc	r25, r25
    ed52:	02 c0       	rjmp	.+4      	; 0xed58 <fatfs_putc+0x74>
    ed54:	83 e2       	ldi	r24, 0x23	; 35
    ed56:	90 e0       	ldi	r25, 0x00	; 0
    ed58:	90 93 be 1b 	sts	0x1BBE, r25	; 0x801bbe <errno+0x1>
    ed5c:	80 93 bd 1b 	sts	0x1BBD, r24	; 0x801bbd <errno>
    ed60:	f8 01       	movw	r30, r16
    ed62:	83 81       	ldd	r24, Z+3	; 0x03
    ed64:	80 62       	ori	r24, 0x20	; 32
    ed66:	83 83       	std	Z+3, r24	; 0x03
    ed68:	8f ef       	ldi	r24, 0xFF	; 255
    ed6a:	9f ef       	ldi	r25, 0xFF	; 255
    ed6c:	02 c0       	rjmp	.+4      	; 0xed72 <fatfs_putc+0x8e>
    ed6e:	8b 81       	ldd	r24, Y+3	; 0x03
    ed70:	90 e0       	ldi	r25, 0x00	; 0
    ed72:	23 96       	adiw	r28, 0x03	; 3
    ed74:	e4 e0       	ldi	r30, 0x04	; 4
    ed76:	0c 94 1d e6 	jmp	0x1cc3a	; 0x1cc3a <__epilogue_restores__+0x1c>

0000ed7a <fgetc>:
    ed7a:	cf 93       	push	r28
    ed7c:	df 93       	push	r29
    ed7e:	ec 01       	movw	r28, r24
    ed80:	00 97       	sbiw	r24, 0x00	; 0
    ed82:	39 f4       	brne	.+14     	; 0xed92 <fgetc+0x18>
    ed84:	89 e0       	ldi	r24, 0x09	; 9
    ed86:	90 e0       	ldi	r25, 0x00	; 0
    ed88:	90 93 be 1b 	sts	0x1BBE, r25	; 0x801bbe <errno+0x1>
    ed8c:	80 93 bd 1b 	sts	0x1BBD, r24	; 0x801bbd <errno>
    ed90:	40 c0       	rjmp	.+128    	; 0xee12 <fgetc+0x98>
    ed92:	2b 81       	ldd	r18, Y+3	; 0x03
    ed94:	20 ff       	sbrs	r18, 0
    ed96:	3d c0       	rjmp	.+122    	; 0xee12 <fgetc+0x98>
    ed98:	26 ff       	sbrs	r18, 6
    ed9a:	0a c0       	rjmp	.+20     	; 0xedb0 <fgetc+0x36>
    ed9c:	2f 7b       	andi	r18, 0xBF	; 191
    ed9e:	2b 83       	std	Y+3, r18	; 0x03
    eda0:	8e 81       	ldd	r24, Y+6	; 0x06
    eda2:	9f 81       	ldd	r25, Y+7	; 0x07
    eda4:	01 96       	adiw	r24, 0x01	; 1
    eda6:	9f 83       	std	Y+7, r25	; 0x07
    eda8:	8e 83       	std	Y+6, r24	; 0x06
    edaa:	8a 81       	ldd	r24, Y+2	; 0x02
    edac:	90 e0       	ldi	r25, 0x00	; 0
    edae:	33 c0       	rjmp	.+102    	; 0xee16 <fgetc+0x9c>
    edb0:	22 ff       	sbrs	r18, 2
    edb2:	0d c0       	rjmp	.+26     	; 0xedce <fgetc+0x54>
    edb4:	e8 81       	ld	r30, Y
    edb6:	f9 81       	ldd	r31, Y+1	; 0x01
    edb8:	80 81       	ld	r24, Z
    edba:	90 e0       	ldi	r25, 0x00	; 0
    edbc:	00 97       	sbiw	r24, 0x00	; 0
    edbe:	19 f4       	brne	.+6      	; 0xedc6 <fgetc+0x4c>
    edc0:	20 62       	ori	r18, 0x20	; 32
    edc2:	2b 83       	std	Y+3, r18	; 0x03
    edc4:	26 c0       	rjmp	.+76     	; 0xee12 <fgetc+0x98>
    edc6:	31 96       	adiw	r30, 0x01	; 1
    edc8:	f9 83       	std	Y+1, r31	; 0x01
    edca:	e8 83       	st	Y, r30
    edcc:	1b c0       	rjmp	.+54     	; 0xee04 <fgetc+0x8a>
    edce:	ea 85       	ldd	r30, Y+10	; 0x0a
    edd0:	fb 85       	ldd	r31, Y+11	; 0x0b
    edd2:	30 97       	sbiw	r30, 0x00	; 0
    edd4:	59 f4       	brne	.+22     	; 0xedec <fgetc+0x72>
    edd6:	88 e7       	ldi	r24, 0x78	; 120
    edd8:	9c e0       	ldi	r25, 0x0C	; 12
    edda:	1f 92       	push	r1
    eddc:	9f 93       	push	r25
    edde:	8f 93       	push	r24
    ede0:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    ede4:	0f 90       	pop	r0
    ede6:	0f 90       	pop	r0
    ede8:	0f 90       	pop	r0
    edea:	13 c0       	rjmp	.+38     	; 0xee12 <fgetc+0x98>
    edec:	09 95       	icall
    edee:	97 ff       	sbrs	r25, 7
    edf0:	09 c0       	rjmp	.+18     	; 0xee04 <fgetc+0x8a>
    edf2:	2b 81       	ldd	r18, Y+3	; 0x03
    edf4:	02 96       	adiw	r24, 0x02	; 2
    edf6:	11 f0       	breq	.+4      	; 0xedfc <fgetc+0x82>
    edf8:	80 e2       	ldi	r24, 0x20	; 32
    edfa:	01 c0       	rjmp	.+2      	; 0xedfe <fgetc+0x84>
    edfc:	80 e1       	ldi	r24, 0x10	; 16
    edfe:	82 2b       	or	r24, r18
    ee00:	8b 83       	std	Y+3, r24	; 0x03
    ee02:	07 c0       	rjmp	.+14     	; 0xee12 <fgetc+0x98>
    ee04:	2e 81       	ldd	r18, Y+6	; 0x06
    ee06:	3f 81       	ldd	r19, Y+7	; 0x07
    ee08:	2f 5f       	subi	r18, 0xFF	; 255
    ee0a:	3f 4f       	sbci	r19, 0xFF	; 255
    ee0c:	3f 83       	std	Y+7, r19	; 0x07
    ee0e:	2e 83       	std	Y+6, r18	; 0x06
    ee10:	02 c0       	rjmp	.+4      	; 0xee16 <fgetc+0x9c>
    ee12:	8f ef       	ldi	r24, 0xFF	; 255
    ee14:	9f ef       	ldi	r25, 0xFF	; 255
    ee16:	df 91       	pop	r29
    ee18:	cf 91       	pop	r28
    ee1a:	08 95       	ret

0000ee1c <fputc>:
    ee1c:	cf 93       	push	r28
    ee1e:	df 93       	push	r29
    ee20:	eb 01       	movw	r28, r22
    ee22:	10 92 be 1b 	sts	0x1BBE, r1	; 0x801bbe <errno+0x1>
    ee26:	10 92 bd 1b 	sts	0x1BBD, r1	; 0x801bbd <errno>
    ee2a:	20 91 c1 1b 	lds	r18, 0x1BC1	; 0x801bc1 <__iob+0x2>
    ee2e:	30 91 c2 1b 	lds	r19, 0x1BC2	; 0x801bc2 <__iob+0x3>
    ee32:	62 17       	cp	r22, r18
    ee34:	73 07       	cpc	r23, r19
    ee36:	49 f0       	breq	.+18     	; 0xee4a <fputc+0x2e>
    ee38:	20 91 c3 1b 	lds	r18, 0x1BC3	; 0x801bc3 <__iob+0x4>
    ee3c:	30 91 c4 1b 	lds	r19, 0x1BC4	; 0x801bc4 <__iob+0x5>
    ee40:	62 17       	cp	r22, r18
    ee42:	73 07       	cpc	r23, r19
    ee44:	11 f0       	breq	.+4      	; 0xee4a <fputc+0x2e>
    ee46:	4e df       	rcall	.-356    	; 0xece4 <fatfs_putc>
    ee48:	33 c0       	rjmp	.+102    	; 0xeeb0 <fputc+0x94>
    ee4a:	2b 81       	ldd	r18, Y+3	; 0x03
    ee4c:	21 ff       	sbrs	r18, 1
    ee4e:	2e c0       	rjmp	.+92     	; 0xeeac <fputc+0x90>
    ee50:	22 ff       	sbrs	r18, 2
    ee52:	10 c0       	rjmp	.+32     	; 0xee74 <fputc+0x58>
    ee54:	4e 81       	ldd	r20, Y+6	; 0x06
    ee56:	5f 81       	ldd	r21, Y+7	; 0x07
    ee58:	2c 81       	ldd	r18, Y+4	; 0x04
    ee5a:	3d 81       	ldd	r19, Y+5	; 0x05
    ee5c:	42 17       	cp	r20, r18
    ee5e:	53 07       	cpc	r21, r19
    ee60:	f4 f4       	brge	.+60     	; 0xee9e <fputc+0x82>
    ee62:	e8 81       	ld	r30, Y
    ee64:	f9 81       	ldd	r31, Y+1	; 0x01
    ee66:	9f 01       	movw	r18, r30
    ee68:	2f 5f       	subi	r18, 0xFF	; 255
    ee6a:	3f 4f       	sbci	r19, 0xFF	; 255
    ee6c:	39 83       	std	Y+1, r19	; 0x01
    ee6e:	28 83       	st	Y, r18
    ee70:	80 83       	st	Z, r24
    ee72:	15 c0       	rjmp	.+42     	; 0xee9e <fputc+0x82>
    ee74:	e8 85       	ldd	r30, Y+8	; 0x08
    ee76:	f9 85       	ldd	r31, Y+9	; 0x09
    ee78:	30 97       	sbiw	r30, 0x00	; 0
    ee7a:	59 f4       	brne	.+22     	; 0xee92 <fputc+0x76>
    ee7c:	80 e6       	ldi	r24, 0x60	; 96
    ee7e:	9c e0       	ldi	r25, 0x0C	; 12
    ee80:	1f 92       	push	r1
    ee82:	9f 93       	push	r25
    ee84:	8f 93       	push	r24
    ee86:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    ee8a:	0f 90       	pop	r0
    ee8c:	0f 90       	pop	r0
    ee8e:	0f 90       	pop	r0
    ee90:	0d c0       	rjmp	.+26     	; 0xeeac <fputc+0x90>
    ee92:	be 01       	movw	r22, r28
    ee94:	09 95       	icall
    ee96:	8f 3f       	cpi	r24, 0xFF	; 255
    ee98:	2f ef       	ldi	r18, 0xFF	; 255
    ee9a:	92 07       	cpc	r25, r18
    ee9c:	39 f0       	breq	.+14     	; 0xeeac <fputc+0x90>
    ee9e:	2e 81       	ldd	r18, Y+6	; 0x06
    eea0:	3f 81       	ldd	r19, Y+7	; 0x07
    eea2:	2f 5f       	subi	r18, 0xFF	; 255
    eea4:	3f 4f       	sbci	r19, 0xFF	; 255
    eea6:	3f 83       	std	Y+7, r19	; 0x07
    eea8:	2e 83       	std	Y+6, r18	; 0x06
    eeaa:	02 c0       	rjmp	.+4      	; 0xeeb0 <fputc+0x94>
    eeac:	8f ef       	ldi	r24, 0xFF	; 255
    eeae:	9f ef       	ldi	r25, 0xFF	; 255
    eeb0:	df 91       	pop	r29
    eeb2:	cf 91       	pop	r28
    eeb4:	08 95       	ret

0000eeb6 <_fprintf_putc>:
    eeb6:	fc 01       	movw	r30, r24
    eeb8:	86 2f       	mov	r24, r22
    eeba:	26 81       	ldd	r18, Z+6	; 0x06
    eebc:	37 81       	ldd	r19, Z+7	; 0x07
    eebe:	2f 5f       	subi	r18, 0xFF	; 255
    eec0:	3f 4f       	sbci	r19, 0xFF	; 255
    eec2:	37 83       	std	Z+7, r19	; 0x07
    eec4:	26 83       	std	Z+6, r18	; 0x06
    eec6:	62 81       	ldd	r22, Z+2	; 0x02
    eec8:	73 81       	ldd	r23, Z+3	; 0x03
    eeca:	90 e0       	ldi	r25, 0x00	; 0
    eecc:	a7 cf       	rjmp	.-178    	; 0xee1c <fputc>
    eece:	08 95       	ret

0000eed0 <getchar>:
    eed0:	80 91 bf 1b 	lds	r24, 0x1BBF	; 0x801bbf <__iob>
    eed4:	90 91 c0 1b 	lds	r25, 0x1BC0	; 0x801bc0 <__iob+0x1>
    eed8:	50 cf       	rjmp	.-352    	; 0xed7a <fgetc>
    eeda:	08 95       	ret

0000eedc <putchar>:
    eedc:	60 91 c1 1b 	lds	r22, 0x1BC1	; 0x801bc1 <__iob+0x2>
    eee0:	70 91 c2 1b 	lds	r23, 0x1BC2	; 0x801bc2 <__iob+0x3>
    eee4:	9b cf       	rjmp	.-202    	; 0xee1c <fputc>
    eee6:	08 95       	ret

0000eee8 <fgets>:
    eee8:	a0 e0       	ldi	r26, 0x00	; 0
    eeea:	b0 e0       	ldi	r27, 0x00	; 0
    eeec:	ea e7       	ldi	r30, 0x7A	; 122
    eeee:	f7 e7       	ldi	r31, 0x77	; 119
    eef0:	0c 94 fd e5 	jmp	0x1cbfa	; 0x1cbfa <__prologue_saves__+0x14>
    eef4:	7c 01       	movw	r14, r24
    eef6:	6a 01       	movw	r12, r20
    eef8:	8b 01       	movw	r16, r22
    eefa:	c0 e0       	ldi	r28, 0x00	; 0
    eefc:	d0 e0       	ldi	r29, 0x00	; 0
    eefe:	01 15       	cp	r16, r1
    ef00:	11 05       	cpc	r17, r1
    ef02:	41 f0       	breq	.+16     	; 0xef14 <fgets+0x2c>
    ef04:	c6 01       	movw	r24, r12
    ef06:	39 df       	rcall	.-398    	; 0xed7a <fgetc>
    ef08:	8f 3f       	cpi	r24, 0xFF	; 255
    ef0a:	2f ef       	ldi	r18, 0xFF	; 255
    ef0c:	92 07       	cpc	r25, r18
    ef0e:	39 f4       	brne	.+14     	; 0xef1e <fgets+0x36>
    ef10:	20 97       	sbiw	r28, 0x00	; 0
    ef12:	b9 f0       	breq	.+46     	; 0xef42 <fgets+0x5a>
    ef14:	ce 0d       	add	r28, r14
    ef16:	df 1d       	adc	r29, r15
    ef18:	18 82       	st	Y, r1
    ef1a:	c7 01       	movw	r24, r14
    ef1c:	14 c0       	rjmp	.+40     	; 0xef46 <fgets+0x5e>
    ef1e:	8a 30       	cpi	r24, 0x0A	; 10
    ef20:	91 05       	cpc	r25, r1
    ef22:	c1 f3       	breq	.-16     	; 0xef14 <fgets+0x2c>
    ef24:	88 30       	cpi	r24, 0x08	; 8
    ef26:	91 05       	cpc	r25, r1
    ef28:	21 f4       	brne	.+8      	; 0xef32 <fgets+0x4a>
    ef2a:	20 97       	sbiw	r28, 0x00	; 0
    ef2c:	39 f0       	breq	.+14     	; 0xef3c <fgets+0x54>
    ef2e:	21 97       	sbiw	r28, 0x01	; 1
    ef30:	05 c0       	rjmp	.+10     	; 0xef3c <fgets+0x54>
    ef32:	f7 01       	movw	r30, r14
    ef34:	ec 0f       	add	r30, r28
    ef36:	fd 1f       	adc	r31, r29
    ef38:	80 83       	st	Z, r24
    ef3a:	21 96       	adiw	r28, 0x01	; 1
    ef3c:	01 50       	subi	r16, 0x01	; 1
    ef3e:	11 09       	sbc	r17, r1
    ef40:	de cf       	rjmp	.-68     	; 0xeefe <fgets+0x16>
    ef42:	80 e0       	ldi	r24, 0x00	; 0
    ef44:	90 e0       	ldi	r25, 0x00	; 0
    ef46:	cd b7       	in	r28, 0x3d	; 61
    ef48:	de b7       	in	r29, 0x3e	; 62
    ef4a:	e8 e0       	ldi	r30, 0x08	; 8
    ef4c:	0c 94 19 e6 	jmp	0x1cc32	; 0x1cc32 <__epilogue_restores__+0x14>

0000ef50 <fputs>:
    ef50:	0f 93       	push	r16
    ef52:	1f 93       	push	r17
    ef54:	cf 93       	push	r28
    ef56:	df 93       	push	r29
    ef58:	8b 01       	movw	r16, r22
    ef5a:	ec 01       	movw	r28, r24
    ef5c:	89 91       	ld	r24, Y+
    ef5e:	88 23       	and	r24, r24
    ef60:	41 f0       	breq	.+16     	; 0xef72 <fputs+0x22>
    ef62:	b8 01       	movw	r22, r16
    ef64:	90 e0       	ldi	r25, 0x00	; 0
    ef66:	5a df       	rcall	.-332    	; 0xee1c <fputc>
    ef68:	8f 3f       	cpi	r24, 0xFF	; 255
    ef6a:	2f ef       	ldi	r18, 0xFF	; 255
    ef6c:	92 07       	cpc	r25, r18
    ef6e:	b1 f7       	brne	.-20     	; 0xef5c <fputs+0xc>
    ef70:	02 c0       	rjmp	.+4      	; 0xef76 <fputs+0x26>
    ef72:	80 e0       	ldi	r24, 0x00	; 0
    ef74:	90 e0       	ldi	r25, 0x00	; 0
    ef76:	df 91       	pop	r29
    ef78:	cf 91       	pop	r28
    ef7a:	1f 91       	pop	r17
    ef7c:	0f 91       	pop	r16
    ef7e:	08 95       	ret

0000ef80 <puts>:
    ef80:	cf 93       	push	r28
    ef82:	df 93       	push	r29
    ef84:	ec 01       	movw	r28, r24
    ef86:	89 91       	ld	r24, Y+
    ef88:	60 91 c1 1b 	lds	r22, 0x1BC1	; 0x801bc1 <__iob+0x2>
    ef8c:	70 91 c2 1b 	lds	r23, 0x1BC2	; 0x801bc2 <__iob+0x3>
    ef90:	88 23       	and	r24, r24
    ef92:	39 f0       	breq	.+14     	; 0xefa2 <puts+0x22>
    ef94:	90 e0       	ldi	r25, 0x00	; 0
    ef96:	42 df       	rcall	.-380    	; 0xee1c <fputc>
    ef98:	8f 3f       	cpi	r24, 0xFF	; 255
    ef9a:	2f ef       	ldi	r18, 0xFF	; 255
    ef9c:	92 07       	cpc	r25, r18
    ef9e:	99 f7       	brne	.-26     	; 0xef86 <puts+0x6>
    efa0:	03 c0       	rjmp	.+6      	; 0xefa8 <puts+0x28>
    efa2:	8a e0       	ldi	r24, 0x0A	; 10
    efa4:	90 e0       	ldi	r25, 0x00	; 0
    efa6:	3a df       	rcall	.-396    	; 0xee1c <fputc>
    efa8:	df 91       	pop	r29
    efaa:	cf 91       	pop	r28
    efac:	08 95       	ret

0000efae <fileno>:
    efae:	00 97       	sbiw	r24, 0x00	; 0
    efb0:	39 f4       	brne	.+14     	; 0xefc0 <fileno+0x12>
    efb2:	89 e0       	ldi	r24, 0x09	; 9
    efb4:	90 e0       	ldi	r25, 0x00	; 0
    efb6:	90 93 be 1b 	sts	0x1BBE, r25	; 0x801bbe <errno+0x1>
    efba:	80 93 bd 1b 	sts	0x1BBD, r24	; 0x801bbd <errno>
    efbe:	0e c0       	rjmp	.+28     	; 0xefdc <fileno+0x2e>
    efc0:	ef eb       	ldi	r30, 0xBF	; 191
    efc2:	fb e1       	ldi	r31, 0x1B	; 27
    efc4:	20 e0       	ldi	r18, 0x00	; 0
    efc6:	30 e0       	ldi	r19, 0x00	; 0
    efc8:	41 91       	ld	r20, Z+
    efca:	51 91       	ld	r21, Z+
    efcc:	84 17       	cp	r24, r20
    efce:	95 07       	cpc	r25, r21
    efd0:	41 f0       	breq	.+16     	; 0xefe2 <fileno+0x34>
    efd2:	2f 5f       	subi	r18, 0xFF	; 255
    efd4:	3f 4f       	sbci	r19, 0xFF	; 255
    efd6:	20 31       	cpi	r18, 0x10	; 16
    efd8:	31 05       	cpc	r19, r1
    efda:	b1 f7       	brne	.-20     	; 0xefc8 <fileno+0x1a>
    efdc:	8f ef       	ldi	r24, 0xFF	; 255
    efde:	9f ef       	ldi	r25, 0xFF	; 255
    efe0:	08 95       	ret
    efe2:	c9 01       	movw	r24, r18
    efe4:	08 95       	ret

0000efe6 <fileno_to_stream>:
    efe6:	80 31       	cpi	r24, 0x10	; 16
    efe8:	91 05       	cpc	r25, r1
    efea:	48 f4       	brcc	.+18     	; 0xeffe <fileno_to_stream+0x18>
    efec:	88 0f       	add	r24, r24
    efee:	99 1f       	adc	r25, r25
    eff0:	fc 01       	movw	r30, r24
    eff2:	e1 54       	subi	r30, 0x41	; 65
    eff4:	f4 4e       	sbci	r31, 0xE4	; 228
    eff6:	80 81       	ld	r24, Z
    eff8:	91 81       	ldd	r25, Z+1	; 0x01
    effa:	00 97       	sbiw	r24, 0x00	; 0
    effc:	41 f4       	brne	.+16     	; 0xf00e <fileno_to_stream+0x28>
    effe:	89 e0       	ldi	r24, 0x09	; 9
    f000:	90 e0       	ldi	r25, 0x00	; 0
    f002:	90 93 be 1b 	sts	0x1BBE, r25	; 0x801bbe <errno+0x1>
    f006:	80 93 bd 1b 	sts	0x1BBD, r24	; 0x801bbd <errno>
    f00a:	80 e0       	ldi	r24, 0x00	; 0
    f00c:	90 e0       	ldi	r25, 0x00	; 0
    f00e:	08 95       	ret

0000f010 <mctime>:
    f010:	a4 e0       	ldi	r26, 0x04	; 4
    f012:	b0 e0       	ldi	r27, 0x00	; 0
    f014:	ee e0       	ldi	r30, 0x0E	; 14
    f016:	f8 e7       	ldi	r31, 0x78	; 120
    f018:	0c 94 03 e6 	jmp	0x1cc06	; 0x1cc06 <__prologue_saves__+0x20>
    f01c:	69 83       	std	Y+1, r22	; 0x01
    f01e:	7a 83       	std	Y+2, r23	; 0x02
    f020:	8b 83       	std	Y+3, r24	; 0x03
    f022:	9c 83       	std	Y+4, r25	; 0x04
    f024:	10 92 be 1b 	sts	0x1BBE, r1	; 0x801bbe <errno+0x1>
    f028:	10 92 bd 1b 	sts	0x1BBD, r1	; 0x801bbd <errno>
    f02c:	ce 01       	movw	r24, r28
    f02e:	01 96       	adiw	r24, 0x01	; 1
    f030:	0e 94 2b 3e 	call	0x7c56	; 0x7c56 <ctime_gm>
    f034:	fc 01       	movw	r30, r24
    f036:	01 90       	ld	r0, Z+
    f038:	00 20       	and	r0, r0
    f03a:	e9 f7       	brne	.-6      	; 0xf036 <mctime+0x26>
    f03c:	31 97       	sbiw	r30, 0x01	; 1
    f03e:	e8 1b       	sub	r30, r24
    f040:	f9 0b       	sbc	r31, r25
    f042:	39 f0       	breq	.+14     	; 0xf052 <mctime+0x42>
    f044:	31 97       	sbiw	r30, 0x01	; 1
    f046:	e8 0f       	add	r30, r24
    f048:	f9 1f       	adc	r31, r25
    f04a:	20 81       	ld	r18, Z
    f04c:	2a 30       	cpi	r18, 0x0A	; 10
    f04e:	09 f4       	brne	.+2      	; 0xf052 <mctime+0x42>
    f050:	10 82       	st	Z, r1
    f052:	24 96       	adiw	r28, 0x04	; 4
    f054:	e2 e0       	ldi	r30, 0x02	; 2
    f056:	0c 94 1f e6 	jmp	0x1cc3e	; 0x1cc3e <__epilogue_restores__+0x20>

0000f05a <basename>:
    f05a:	00 97       	sbiw	r24, 0x00	; 0
    f05c:	49 f0       	breq	.+18     	; 0xf070 <basename+0x16>
    f05e:	fc 01       	movw	r30, r24
    f060:	21 91       	ld	r18, Z+
    f062:	22 23       	and	r18, r18
    f064:	21 f0       	breq	.+8      	; 0xf06e <basename+0x14>
    f066:	2f 32       	cpi	r18, 0x2F	; 47
    f068:	d9 f7       	brne	.-10     	; 0xf060 <basename+0x6>
    f06a:	cf 01       	movw	r24, r30
    f06c:	f9 cf       	rjmp	.-14     	; 0xf060 <basename+0x6>
    f06e:	08 95       	ret
    f070:	87 e1       	ldi	r24, 0x17	; 23
    f072:	97 e1       	ldi	r25, 0x17	; 23
    f074:	08 95       	ret

0000f076 <chdir>:
    f076:	10 92 be 1b 	sts	0x1BBE, r1	; 0x801bbe <errno+0x1>
    f07a:	10 92 bd 1b 	sts	0x1BBD, r1	; 0x801bbd <errno>
    f07e:	0e 94 86 60 	call	0xc10c	; 0xc10c <f_chdir>
    f082:	00 97       	sbiw	r24, 0x00	; 0
    f084:	a1 f0       	breq	.+40     	; 0xf0ae <chdir+0x38>
    f086:	84 31       	cpi	r24, 0x14	; 20
    f088:	91 05       	cpc	r25, r1
    f08a:	40 f4       	brcc	.+16     	; 0xf09c <chdir+0x26>
    f08c:	fc 01       	movw	r30, r24
    f08e:	e0 5f       	subi	r30, 0xF0	; 240
    f090:	f8 4f       	sbci	r31, 0xF8	; 248
    f092:	80 81       	ld	r24, Z
    f094:	08 2e       	mov	r0, r24
    f096:	00 0c       	add	r0, r0
    f098:	99 0b       	sbc	r25, r25
    f09a:	02 c0       	rjmp	.+4      	; 0xf0a0 <chdir+0x2a>
    f09c:	83 e2       	ldi	r24, 0x23	; 35
    f09e:	90 e0       	ldi	r25, 0x00	; 0
    f0a0:	90 93 be 1b 	sts	0x1BBE, r25	; 0x801bbe <errno+0x1>
    f0a4:	80 93 bd 1b 	sts	0x1BBD, r24	; 0x801bbd <errno>
    f0a8:	8f ef       	ldi	r24, 0xFF	; 255
    f0aa:	9f ef       	ldi	r25, 0xFF	; 255
    f0ac:	08 95       	ret
    f0ae:	80 e0       	ldi	r24, 0x00	; 0
    f0b0:	90 e0       	ldi	r25, 0x00	; 0
    f0b2:	08 95       	ret

0000f0b4 <chmod>:
    f0b4:	10 92 be 1b 	sts	0x1BBE, r1	; 0x801bbe <errno+0x1>
    f0b8:	10 92 bd 1b 	sts	0x1BBD, r1	; 0x801bbd <errno>
    f0bc:	42 79       	andi	r20, 0x92	; 146
    f0be:	55 27       	eor	r21, r21
    f0c0:	66 27       	eor	r22, r22
    f0c2:	77 27       	eor	r23, r23
    f0c4:	45 2b       	or	r20, r21
    f0c6:	46 2b       	or	r20, r22
    f0c8:	47 2b       	or	r20, r23
    f0ca:	19 f0       	breq	.+6      	; 0xf0d2 <chmod+0x1e>
    f0cc:	80 e0       	ldi	r24, 0x00	; 0
    f0ce:	90 e0       	ldi	r25, 0x00	; 0
    f0d0:	08 95       	ret
    f0d2:	41 e0       	ldi	r20, 0x01	; 1
    f0d4:	61 e0       	ldi	r22, 0x01	; 1
    f0d6:	0e 94 85 69 	call	0xd30a	; 0xd30a <f_chmod>
    f0da:	00 97       	sbiw	r24, 0x00	; 0
    f0dc:	b9 f3       	breq	.-18     	; 0xf0cc <chmod+0x18>
    f0de:	84 31       	cpi	r24, 0x14	; 20
    f0e0:	91 05       	cpc	r25, r1
    f0e2:	40 f4       	brcc	.+16     	; 0xf0f4 <chmod+0x40>
    f0e4:	fc 01       	movw	r30, r24
    f0e6:	e0 5f       	subi	r30, 0xF0	; 240
    f0e8:	f8 4f       	sbci	r31, 0xF8	; 248
    f0ea:	80 81       	ld	r24, Z
    f0ec:	08 2e       	mov	r0, r24
    f0ee:	00 0c       	add	r0, r0
    f0f0:	99 0b       	sbc	r25, r25
    f0f2:	02 c0       	rjmp	.+4      	; 0xf0f8 <chmod+0x44>
    f0f4:	83 e2       	ldi	r24, 0x23	; 35
    f0f6:	90 e0       	ldi	r25, 0x00	; 0
    f0f8:	90 93 be 1b 	sts	0x1BBE, r25	; 0x801bbe <errno+0x1>
    f0fc:	80 93 bd 1b 	sts	0x1BBD, r24	; 0x801bbd <errno>
    f100:	8f ef       	ldi	r24, 0xFF	; 255
    f102:	9f ef       	ldi	r25, 0xFF	; 255
    f104:	08 95       	ret

0000f106 <getcwd>:
    f106:	cf 93       	push	r28
    f108:	df 93       	push	r29
    f10a:	d8 2f       	mov	r29, r24
    f10c:	c9 2f       	mov	r28, r25
    f10e:	10 92 be 1b 	sts	0x1BBE, r1	; 0x801bbe <errno+0x1>
    f112:	10 92 bd 1b 	sts	0x1BBD, r1	; 0x801bbd <errno>
    f116:	0e 94 e1 60 	call	0xc1c2	; 0xc1c2 <f_getcwd>
    f11a:	00 97       	sbiw	r24, 0x00	; 0
    f11c:	a1 f0       	breq	.+40     	; 0xf146 <getcwd+0x40>
    f11e:	84 31       	cpi	r24, 0x14	; 20
    f120:	91 05       	cpc	r25, r1
    f122:	40 f4       	brcc	.+16     	; 0xf134 <getcwd+0x2e>
    f124:	fc 01       	movw	r30, r24
    f126:	e0 5f       	subi	r30, 0xF0	; 240
    f128:	f8 4f       	sbci	r31, 0xF8	; 248
    f12a:	80 81       	ld	r24, Z
    f12c:	08 2e       	mov	r0, r24
    f12e:	00 0c       	add	r0, r0
    f130:	99 0b       	sbc	r25, r25
    f132:	02 c0       	rjmp	.+4      	; 0xf138 <getcwd+0x32>
    f134:	83 e2       	ldi	r24, 0x23	; 35
    f136:	90 e0       	ldi	r25, 0x00	; 0
    f138:	90 93 be 1b 	sts	0x1BBE, r25	; 0x801bbe <errno+0x1>
    f13c:	80 93 bd 1b 	sts	0x1BBD, r24	; 0x801bbd <errno>
    f140:	80 e0       	ldi	r24, 0x00	; 0
    f142:	90 e0       	ldi	r25, 0x00	; 0
    f144:	02 c0       	rjmp	.+4      	; 0xf14a <getcwd+0x44>
    f146:	8d 2f       	mov	r24, r29
    f148:	9c 2f       	mov	r25, r28
    f14a:	df 91       	pop	r29
    f14c:	cf 91       	pop	r28
    f14e:	08 95       	ret

0000f150 <mkdir>:
    f150:	cf 93       	push	r28
    f152:	df 93       	push	r29
    f154:	ec 01       	movw	r28, r24
    f156:	10 92 be 1b 	sts	0x1BBE, r1	; 0x801bbe <errno+0x1>
    f15a:	10 92 bd 1b 	sts	0x1BBD, r1	; 0x801bbd <errno>
    f15e:	41 15       	cp	r20, r1
    f160:	51 05       	cpc	r21, r1
    f162:	61 05       	cpc	r22, r1
    f164:	71 05       	cpc	r23, r1
    f166:	41 f4       	brne	.+16     	; 0xf178 <mkdir+0x28>
    f168:	ce 01       	movw	r24, r28
    f16a:	0e 94 80 67 	call	0xcf00	; 0xcf00 <f_mkdir>
    f16e:	00 97       	sbiw	r24, 0x00	; 0
    f170:	39 f4       	brne	.+14     	; 0xf180 <mkdir+0x30>
    f172:	80 e0       	ldi	r24, 0x00	; 0
    f174:	90 e0       	ldi	r25, 0x00	; 0
    f176:	17 c0       	rjmp	.+46     	; 0xf1a6 <mkdir+0x56>
    f178:	9d df       	rcall	.-198    	; 0xf0b4 <chmod>
    f17a:	89 2b       	or	r24, r25
    f17c:	a9 f3       	breq	.-22     	; 0xf168 <mkdir+0x18>
    f17e:	11 c0       	rjmp	.+34     	; 0xf1a2 <mkdir+0x52>
    f180:	84 31       	cpi	r24, 0x14	; 20
    f182:	91 05       	cpc	r25, r1
    f184:	40 f4       	brcc	.+16     	; 0xf196 <mkdir+0x46>
    f186:	fc 01       	movw	r30, r24
    f188:	e0 5f       	subi	r30, 0xF0	; 240
    f18a:	f8 4f       	sbci	r31, 0xF8	; 248
    f18c:	80 81       	ld	r24, Z
    f18e:	08 2e       	mov	r0, r24
    f190:	00 0c       	add	r0, r0
    f192:	99 0b       	sbc	r25, r25
    f194:	02 c0       	rjmp	.+4      	; 0xf19a <mkdir+0x4a>
    f196:	83 e2       	ldi	r24, 0x23	; 35
    f198:	90 e0       	ldi	r25, 0x00	; 0
    f19a:	90 93 be 1b 	sts	0x1BBE, r25	; 0x801bbe <errno+0x1>
    f19e:	80 93 bd 1b 	sts	0x1BBD, r24	; 0x801bbd <errno>
    f1a2:	8f ef       	ldi	r24, 0xFF	; 255
    f1a4:	9f ef       	ldi	r25, 0xFF	; 255
    f1a6:	df 91       	pop	r29
    f1a8:	cf 91       	pop	r28
    f1aa:	08 95       	ret

0000f1ac <rename>:
    f1ac:	10 92 be 1b 	sts	0x1BBE, r1	; 0x801bbe <errno+0x1>
    f1b0:	10 92 bd 1b 	sts	0x1BBD, r1	; 0x801bbd <errno>
    f1b4:	0e 94 70 68 	call	0xd0e0	; 0xd0e0 <f_rename>
    f1b8:	00 97       	sbiw	r24, 0x00	; 0
    f1ba:	a1 f0       	breq	.+40     	; 0xf1e4 <rename+0x38>
    f1bc:	84 31       	cpi	r24, 0x14	; 20
    f1be:	91 05       	cpc	r25, r1
    f1c0:	40 f4       	brcc	.+16     	; 0xf1d2 <rename+0x26>
    f1c2:	fc 01       	movw	r30, r24
    f1c4:	e0 5f       	subi	r30, 0xF0	; 240
    f1c6:	f8 4f       	sbci	r31, 0xF8	; 248
    f1c8:	80 81       	ld	r24, Z
    f1ca:	08 2e       	mov	r0, r24
    f1cc:	00 0c       	add	r0, r0
    f1ce:	99 0b       	sbc	r25, r25
    f1d0:	02 c0       	rjmp	.+4      	; 0xf1d6 <rename+0x2a>
    f1d2:	83 e2       	ldi	r24, 0x23	; 35
    f1d4:	90 e0       	ldi	r25, 0x00	; 0
    f1d6:	90 93 be 1b 	sts	0x1BBE, r25	; 0x801bbe <errno+0x1>
    f1da:	80 93 bd 1b 	sts	0x1BBD, r24	; 0x801bbd <errno>
    f1de:	8f ef       	ldi	r24, 0xFF	; 255
    f1e0:	9f ef       	ldi	r25, 0xFF	; 255
    f1e2:	08 95       	ret
    f1e4:	80 e0       	ldi	r24, 0x00	; 0
    f1e6:	90 e0       	ldi	r25, 0x00	; 0
    f1e8:	08 95       	ret

0000f1ea <unlink>:
    f1ea:	10 92 be 1b 	sts	0x1BBE, r1	; 0x801bbe <errno+0x1>
    f1ee:	10 92 bd 1b 	sts	0x1BBD, r1	; 0x801bbd <errno>
    f1f2:	0e 94 d9 66 	call	0xcdb2	; 0xcdb2 <f_unlink>
    f1f6:	00 97       	sbiw	r24, 0x00	; 0
    f1f8:	a1 f0       	breq	.+40     	; 0xf222 <unlink+0x38>
    f1fa:	84 31       	cpi	r24, 0x14	; 20
    f1fc:	91 05       	cpc	r25, r1
    f1fe:	40 f4       	brcc	.+16     	; 0xf210 <unlink+0x26>
    f200:	fc 01       	movw	r30, r24
    f202:	e0 5f       	subi	r30, 0xF0	; 240
    f204:	f8 4f       	sbci	r31, 0xF8	; 248
    f206:	80 81       	ld	r24, Z
    f208:	08 2e       	mov	r0, r24
    f20a:	00 0c       	add	r0, r0
    f20c:	99 0b       	sbc	r25, r25
    f20e:	02 c0       	rjmp	.+4      	; 0xf214 <unlink+0x2a>
    f210:	83 e2       	ldi	r24, 0x23	; 35
    f212:	90 e0       	ldi	r25, 0x00	; 0
    f214:	90 93 be 1b 	sts	0x1BBE, r25	; 0x801bbe <errno+0x1>
    f218:	80 93 bd 1b 	sts	0x1BBD, r24	; 0x801bbd <errno>
    f21c:	8f ef       	ldi	r24, 0xFF	; 255
    f21e:	9f ef       	ldi	r25, 0xFF	; 255
    f220:	08 95       	ret
    f222:	80 e0       	ldi	r24, 0x00	; 0
    f224:	90 e0       	ldi	r25, 0x00	; 0
    f226:	08 95       	ret

0000f228 <rmdir>:
    f228:	e0 cf       	rjmp	.-64     	; 0xf1ea <unlink>
    f22a:	08 95       	ret

0000f22c <closedir>:
    f22c:	0e 94 63 65 	call	0xcac6	; 0xcac6 <f_closedir>
    f230:	00 97       	sbiw	r24, 0x00	; 0
    f232:	a1 f0       	breq	.+40     	; 0xf25c <closedir+0x30>
    f234:	84 31       	cpi	r24, 0x14	; 20
    f236:	91 05       	cpc	r25, r1
    f238:	40 f4       	brcc	.+16     	; 0xf24a <closedir+0x1e>
    f23a:	fc 01       	movw	r30, r24
    f23c:	e0 5f       	subi	r30, 0xF0	; 240
    f23e:	f8 4f       	sbci	r31, 0xF8	; 248
    f240:	80 81       	ld	r24, Z
    f242:	08 2e       	mov	r0, r24
    f244:	00 0c       	add	r0, r0
    f246:	99 0b       	sbc	r25, r25
    f248:	02 c0       	rjmp	.+4      	; 0xf24e <closedir+0x22>
    f24a:	83 e2       	ldi	r24, 0x23	; 35
    f24c:	90 e0       	ldi	r25, 0x00	; 0
    f24e:	90 93 be 1b 	sts	0x1BBE, r25	; 0x801bbe <errno+0x1>
    f252:	80 93 bd 1b 	sts	0x1BBD, r24	; 0x801bbd <errno>
    f256:	8f ef       	ldi	r24, 0xFF	; 255
    f258:	9f ef       	ldi	r25, 0xFF	; 255
    f25a:	08 95       	ret
    f25c:	80 e0       	ldi	r24, 0x00	; 0
    f25e:	90 e0       	ldi	r25, 0x00	; 0
    f260:	08 95       	ret

0000f262 <opendir>:
    f262:	bc 01       	movw	r22, r24
    f264:	83 e3       	ldi	r24, 0x33	; 51
    f266:	98 e1       	ldi	r25, 0x18	; 24
    f268:	0e 94 f2 64 	call	0xc9e4	; 0xc9e4 <f_opendir>
    f26c:	00 97       	sbiw	r24, 0x00	; 0
    f26e:	a1 f0       	breq	.+40     	; 0xf298 <opendir+0x36>
    f270:	84 31       	cpi	r24, 0x14	; 20
    f272:	91 05       	cpc	r25, r1
    f274:	40 f4       	brcc	.+16     	; 0xf286 <opendir+0x24>
    f276:	fc 01       	movw	r30, r24
    f278:	e0 5f       	subi	r30, 0xF0	; 240
    f27a:	f8 4f       	sbci	r31, 0xF8	; 248
    f27c:	80 81       	ld	r24, Z
    f27e:	08 2e       	mov	r0, r24
    f280:	00 0c       	add	r0, r0
    f282:	99 0b       	sbc	r25, r25
    f284:	02 c0       	rjmp	.+4      	; 0xf28a <opendir+0x28>
    f286:	83 e2       	ldi	r24, 0x23	; 35
    f288:	90 e0       	ldi	r25, 0x00	; 0
    f28a:	90 93 be 1b 	sts	0x1BBE, r25	; 0x801bbe <errno+0x1>
    f28e:	80 93 bd 1b 	sts	0x1BBD, r24	; 0x801bbd <errno>
    f292:	80 e0       	ldi	r24, 0x00	; 0
    f294:	90 e0       	ldi	r25, 0x00	; 0
    f296:	08 95       	ret
    f298:	83 e3       	ldi	r24, 0x33	; 51
    f29a:	98 e1       	ldi	r25, 0x18	; 24
    f29c:	08 95       	ret

0000f29e <readdir>:
    f29e:	a6 e1       	ldi	r26, 0x16	; 22
    f2a0:	b1 e0       	ldi	r27, 0x01	; 1
    f2a2:	e5 e5       	ldi	r30, 0x55	; 85
    f2a4:	f9 e7       	ldi	r31, 0x79	; 121
    f2a6:	0c 94 01 e6 	jmp	0x1cc02	; 0x1cc02 <__prologue_saves__+0x1c>
    f2aa:	10 92 26 18 	sts	0x1826, r1	; 0x801826 <_de>
    f2ae:	be 01       	movw	r22, r28
    f2b0:	6f 5f       	subi	r22, 0xFF	; 255
    f2b2:	7f 4f       	sbci	r23, 0xFF	; 255
    f2b4:	0e 94 78 65 	call	0xcaf0	; 0xcaf0 <f_readdir>
    f2b8:	00 97       	sbiw	r24, 0x00	; 0
    f2ba:	a1 f0       	breq	.+40     	; 0xf2e4 <readdir+0x46>
    f2bc:	84 31       	cpi	r24, 0x14	; 20
    f2be:	91 05       	cpc	r25, r1
    f2c0:	40 f4       	brcc	.+16     	; 0xf2d2 <readdir+0x34>
    f2c2:	fc 01       	movw	r30, r24
    f2c4:	e0 5f       	subi	r30, 0xF0	; 240
    f2c6:	f8 4f       	sbci	r31, 0xF8	; 248
    f2c8:	80 81       	ld	r24, Z
    f2ca:	08 2e       	mov	r0, r24
    f2cc:	00 0c       	add	r0, r0
    f2ce:	99 0b       	sbc	r25, r25
    f2d0:	02 c0       	rjmp	.+4      	; 0xf2d6 <readdir+0x38>
    f2d2:	83 e2       	ldi	r24, 0x23	; 35
    f2d4:	90 e0       	ldi	r25, 0x00	; 0
    f2d6:	90 93 be 1b 	sts	0x1BBE, r25	; 0x801bbe <errno+0x1>
    f2da:	80 93 bd 1b 	sts	0x1BBD, r24	; 0x801bbd <errno>
    f2de:	80 e0       	ldi	r24, 0x00	; 0
    f2e0:	90 e0       	ldi	r25, 0x00	; 0
    f2e2:	16 c0       	rjmp	.+44     	; 0xf310 <readdir+0x72>
    f2e4:	be 01       	movw	r22, r28
    f2e6:	69 5e       	subi	r22, 0xE9	; 233
    f2e8:	7f 4f       	sbci	r23, 0xFF	; 255
    f2ea:	fb 01       	movw	r30, r22
    f2ec:	01 90       	ld	r0, Z+
    f2ee:	00 20       	and	r0, r0
    f2f0:	e9 f7       	brne	.-6      	; 0xf2ec <readdir+0x4e>
    f2f2:	31 97       	sbiw	r30, 0x01	; 1
    f2f4:	8f 01       	movw	r16, r30
    f2f6:	06 1b       	sub	r16, r22
    f2f8:	17 0b       	sbc	r17, r23
    f2fa:	a8 01       	movw	r20, r16
    f2fc:	86 e2       	ldi	r24, 0x26	; 38
    f2fe:	98 e1       	ldi	r25, 0x18	; 24
    f300:	0e 94 61 32 	call	0x64c2	; 0x64c2 <strncpy>
    f304:	f8 01       	movw	r30, r16
    f306:	ea 5d       	subi	r30, 0xDA	; 218
    f308:	f7 4e       	sbci	r31, 0xE7	; 231
    f30a:	10 82       	st	Z, r1
    f30c:	86 e2       	ldi	r24, 0x26	; 38
    f30e:	98 e1       	ldi	r25, 0x18	; 24
    f310:	ca 5e       	subi	r28, 0xEA	; 234
    f312:	de 4f       	sbci	r29, 0xFE	; 254
    f314:	e4 e0       	ldi	r30, 0x04	; 4
    f316:	0c 94 1d e6 	jmp	0x1cc3a	; 0x1cc3a <__epilogue_restores__+0x1c>

0000f31a <perror>:
    f31a:	e0 91 bd 1b 	lds	r30, 0x1BBD	; 0x801bbd <errno>
    f31e:	f0 91 be 1b 	lds	r31, 0x1BBE	; 0x801bbe <errno+0x1>
    f322:	e3 32       	cpi	r30, 0x23	; 35
    f324:	f1 05       	cpc	r31, r1
    f326:	38 f4       	brcc	.+14     	; 0xf336 <perror+0x1c>
    f328:	ee 0f       	add	r30, r30
    f32a:	ff 1f       	adc	r31, r31
    f32c:	e3 5c       	subi	r30, 0xC3	; 195
    f32e:	fe 4f       	sbci	r31, 0xFE	; 254
    f330:	20 81       	ld	r18, Z
    f332:	31 81       	ldd	r19, Z+1	; 0x01
    f334:	04 c0       	rjmp	.+8      	; 0xf33e <perror+0x24>
    f336:	20 91 83 01 	lds	r18, 0x0183	; 0x800183 <sys_errlist+0x46>
    f33a:	30 91 84 01 	lds	r19, 0x0184	; 0x800184 <sys_errlist+0x47>
    f33e:	00 97       	sbiw	r24, 0x00	; 0
    f340:	c1 f0       	breq	.+48     	; 0xf372 <perror+0x58>
    f342:	fc 01       	movw	r30, r24
    f344:	40 81       	ld	r20, Z
    f346:	44 23       	and	r20, r20
    f348:	a1 f0       	breq	.+40     	; 0xf372 <perror+0x58>
    f34a:	3f 93       	push	r19
    f34c:	2f 93       	push	r18
    f34e:	9f 93       	push	r25
    f350:	8f 93       	push	r24
    f352:	87 ed       	ldi	r24, 0xD7	; 215
    f354:	9b e0       	ldi	r25, 0x0B	; 11
    f356:	1f 92       	push	r1
    f358:	9f 93       	push	r25
    f35a:	8f 93       	push	r24
    f35c:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    f360:	8d b7       	in	r24, 0x3d	; 61
    f362:	9e b7       	in	r25, 0x3e	; 62
    f364:	07 96       	adiw	r24, 0x07	; 7
    f366:	0f b6       	in	r0, 0x3f	; 63
    f368:	f8 94       	cli
    f36a:	9e bf       	out	0x3e, r25	; 62
    f36c:	0f be       	out	0x3f, r0	; 63
    f36e:	8d bf       	out	0x3d, r24	; 61
    f370:	08 95       	ret
    f372:	3f 93       	push	r19
    f374:	2f 93       	push	r18
    f376:	83 ed       	ldi	r24, 0xD3	; 211
    f378:	9b e0       	ldi	r25, 0x0B	; 11
    f37a:	1f 92       	push	r1
    f37c:	9f 93       	push	r25
    f37e:	8f 93       	push	r24
    f380:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    f384:	0f 90       	pop	r0
    f386:	0f 90       	pop	r0
    f388:	0f 90       	pop	r0
    f38a:	0f 90       	pop	r0
    f38c:	0f 90       	pop	r0
    f38e:	08 95       	ret

0000f390 <fdevopen>:
    f390:	0f 93       	push	r16
    f392:	1f 93       	push	r17
    f394:	cf 93       	push	r28
    f396:	df 93       	push	r29
    f398:	00 97       	sbiw	r24, 0x00	; 0
    f39a:	31 f4       	brne	.+12     	; 0xf3a8 <fdevopen+0x18>
    f39c:	61 15       	cp	r22, r1
    f39e:	71 05       	cpc	r23, r1
    f3a0:	19 f4       	brne	.+6      	; 0xf3a8 <fdevopen+0x18>
    f3a2:	80 e0       	ldi	r24, 0x00	; 0
    f3a4:	90 e0       	ldi	r25, 0x00	; 0
    f3a6:	3a c0       	rjmp	.+116    	; 0xf41c <fdevopen+0x8c>
    f3a8:	8b 01       	movw	r16, r22
    f3aa:	ec 01       	movw	r28, r24
    f3ac:	6e e0       	ldi	r22, 0x0E	; 14
    f3ae:	70 e0       	ldi	r23, 0x00	; 0
    f3b0:	81 e0       	ldi	r24, 0x01	; 1
    f3b2:	90 e0       	ldi	r25, 0x00	; 0
    f3b4:	0e 94 89 29 	call	0x5312	; 0x5312 <safecalloc>
    f3b8:	fc 01       	movw	r30, r24
    f3ba:	89 2b       	or	r24, r25
    f3bc:	91 f3       	breq	.-28     	; 0xf3a2 <fdevopen+0x12>
    f3be:	80 e8       	ldi	r24, 0x80	; 128
    f3c0:	83 83       	std	Z+3, r24	; 0x03
    f3c2:	01 15       	cp	r16, r1
    f3c4:	11 05       	cpc	r17, r1
    f3c6:	71 f0       	breq	.+28     	; 0xf3e4 <fdevopen+0x54>
    f3c8:	13 87       	std	Z+11, r17	; 0x0b
    f3ca:	02 87       	std	Z+10, r16	; 0x0a
    f3cc:	81 e8       	ldi	r24, 0x81	; 129
    f3ce:	83 83       	std	Z+3, r24	; 0x03
    f3d0:	80 91 bf 1b 	lds	r24, 0x1BBF	; 0x801bbf <__iob>
    f3d4:	90 91 c0 1b 	lds	r25, 0x1BC0	; 0x801bc0 <__iob+0x1>
    f3d8:	89 2b       	or	r24, r25
    f3da:	21 f4       	brne	.+8      	; 0xf3e4 <fdevopen+0x54>
    f3dc:	f0 93 c0 1b 	sts	0x1BC0, r31	; 0x801bc0 <__iob+0x1>
    f3e0:	e0 93 bf 1b 	sts	0x1BBF, r30	; 0x801bbf <__iob>
    f3e4:	20 97       	sbiw	r28, 0x00	; 0
    f3e6:	c9 f0       	breq	.+50     	; 0xf41a <fdevopen+0x8a>
    f3e8:	d1 87       	std	Z+9, r29	; 0x09
    f3ea:	c0 87       	std	Z+8, r28	; 0x08
    f3ec:	83 81       	ldd	r24, Z+3	; 0x03
    f3ee:	82 60       	ori	r24, 0x02	; 2
    f3f0:	83 83       	std	Z+3, r24	; 0x03
    f3f2:	80 91 c1 1b 	lds	r24, 0x1BC1	; 0x801bc1 <__iob+0x2>
    f3f6:	90 91 c2 1b 	lds	r25, 0x1BC2	; 0x801bc2 <__iob+0x3>
    f3fa:	89 2b       	or	r24, r25
    f3fc:	21 f4       	brne	.+8      	; 0xf406 <fdevopen+0x76>
    f3fe:	f0 93 c2 1b 	sts	0x1BC2, r31	; 0x801bc2 <__iob+0x3>
    f402:	e0 93 c1 1b 	sts	0x1BC1, r30	; 0x801bc1 <__iob+0x2>
    f406:	80 91 c3 1b 	lds	r24, 0x1BC3	; 0x801bc3 <__iob+0x4>
    f40a:	90 91 c4 1b 	lds	r25, 0x1BC4	; 0x801bc4 <__iob+0x5>
    f40e:	89 2b       	or	r24, r25
    f410:	21 f4       	brne	.+8      	; 0xf41a <fdevopen+0x8a>
    f412:	f0 93 c4 1b 	sts	0x1BC4, r31	; 0x801bc4 <__iob+0x5>
    f416:	e0 93 c3 1b 	sts	0x1BC3, r30	; 0x801bc3 <__iob+0x4>
    f41a:	cf 01       	movw	r24, r30
    f41c:	df 91       	pop	r29
    f41e:	cf 91       	pop	r28
    f420:	1f 91       	pop	r17
    f422:	0f 91       	pop	r16
    f424:	08 95       	ret

0000f426 <fat_time_to_unix>:
    f426:	a6 e1       	ldi	r26, 0x16	; 22
    f428:	b0 e0       	ldi	r27, 0x00	; 0
    f42a:	e9 e1       	ldi	r30, 0x19	; 25
    f42c:	fa e7       	ldi	r31, 0x7A	; 122
    f42e:	0c 94 03 e6 	jmp	0x1cc06	; 0x1cc06 <__prologue_saves__+0x20>
    f432:	fe 01       	movw	r30, r28
    f434:	31 96       	adiw	r30, 0x01	; 1
    f436:	26 e1       	ldi	r18, 0x16	; 22
    f438:	df 01       	movw	r26, r30
    f43a:	1d 92       	st	X+, r1
    f43c:	2a 95       	dec	r18
    f43e:	e9 f7       	brne	.-6      	; 0xf43a <fat_time_to_unix+0x14>
    f440:	9b 01       	movw	r18, r22
    f442:	22 0f       	add	r18, r18
    f444:	33 1f       	adc	r19, r19
    f446:	2e 73       	andi	r18, 0x3E	; 62
    f448:	33 27       	eor	r19, r19
    f44a:	3a 83       	std	Y+2, r19	; 0x02
    f44c:	29 83       	std	Y+1, r18	; 0x01
    f44e:	9b 01       	movw	r18, r22
    f450:	55 e0       	ldi	r21, 0x05	; 5
    f452:	36 95       	lsr	r19
    f454:	27 95       	ror	r18
    f456:	5a 95       	dec	r21
    f458:	e1 f7       	brne	.-8      	; 0xf452 <fat_time_to_unix+0x2c>
    f45a:	2f 73       	andi	r18, 0x3F	; 63
    f45c:	33 27       	eor	r19, r19
    f45e:	3c 83       	std	Y+4, r19	; 0x04
    f460:	2b 83       	std	Y+3, r18	; 0x03
    f462:	27 2f       	mov	r18, r23
    f464:	26 95       	lsr	r18
    f466:	26 95       	lsr	r18
    f468:	26 95       	lsr	r18
    f46a:	2d 83       	std	Y+5, r18	; 0x05
    f46c:	1e 82       	std	Y+6, r1	; 0x06
    f46e:	9c 01       	movw	r18, r24
    f470:	2f 71       	andi	r18, 0x1F	; 31
    f472:	33 27       	eor	r19, r19
    f474:	38 87       	std	Y+8, r19	; 0x08
    f476:	2f 83       	std	Y+7, r18	; 0x07
    f478:	9c 01       	movw	r18, r24
    f47a:	65 e0       	ldi	r22, 0x05	; 5
    f47c:	36 95       	lsr	r19
    f47e:	27 95       	ror	r18
    f480:	6a 95       	dec	r22
    f482:	e1 f7       	brne	.-8      	; 0xf47c <fat_time_to_unix+0x56>
    f484:	2f 70       	andi	r18, 0x0F	; 15
    f486:	33 27       	eor	r19, r19
    f488:	21 50       	subi	r18, 0x01	; 1
    f48a:	31 09       	sbc	r19, r1
    f48c:	3a 87       	std	Y+10, r19	; 0x0a
    f48e:	29 87       	std	Y+9, r18	; 0x09
    f490:	9c 01       	movw	r18, r24
    f492:	23 2f       	mov	r18, r19
    f494:	33 27       	eor	r19, r19
    f496:	26 95       	lsr	r18
    f498:	20 5b       	subi	r18, 0xB0	; 176
    f49a:	3f 4f       	sbci	r19, 0xFF	; 255
    f49c:	3c 87       	std	Y+12, r19	; 0x0c
    f49e:	2b 87       	std	Y+11, r18	; 0x0b
    f4a0:	cf 01       	movw	r24, r30
    f4a2:	0e 94 7f 3b 	call	0x76fe	; 0x76fe <timegm>
    f4a6:	66 96       	adiw	r28, 0x16	; 22
    f4a8:	e2 e0       	ldi	r30, 0x02	; 2
    f4aa:	0c 94 1f e6 	jmp	0x1cc3e	; 0x1cc3e <__epilogue_restores__+0x20>

0000f4ae <stat>:
    f4ae:	a6 e1       	ldi	r26, 0x16	; 22
    f4b0:	b1 e0       	ldi	r27, 0x01	; 1
    f4b2:	ed e5       	ldi	r30, 0x5D	; 93
    f4b4:	fa e7       	ldi	r31, 0x7A	; 122
    f4b6:	0c 94 ff e5 	jmp	0x1cbfe	; 0x1cbfe <__prologue_saves__+0x18>
    f4ba:	7c 01       	movw	r14, r24
    f4bc:	8b 01       	movw	r16, r22
    f4be:	10 92 be 1b 	sts	0x1BBE, r1	; 0x801bbe <errno+0x1>
    f4c2:	10 92 bd 1b 	sts	0x1BBD, r1	; 0x801bbd <errno>
    f4c6:	68 e3       	ldi	r22, 0x38	; 56
    f4c8:	78 e0       	ldi	r23, 0x08	; 8
    f4ca:	0e 94 ca 32 	call	0x6594	; 0x6594 <strcmp>
    f4ce:	89 2b       	or	r24, r25
    f4d0:	39 f0       	breq	.+14     	; 0xf4e0 <stat+0x32>
    f4d2:	66 e4       	ldi	r22, 0x46	; 70
    f4d4:	72 e1       	ldi	r23, 0x12	; 18
    f4d6:	c7 01       	movw	r24, r14
    f4d8:	0e 94 ca 32 	call	0x6594	; 0x6594 <strcmp>
    f4dc:	89 2b       	or	r24, r25
    f4de:	d1 f4       	brne	.+52     	; 0xf514 <stat+0x66>
    f4e0:	f8 01       	movw	r30, r16
    f4e2:	14 a2       	std	Z+36, r1	; 0x24
    f4e4:	15 a2       	std	Z+37, r1	; 0x25
    f4e6:	16 a2       	std	Z+38, r1	; 0x26
    f4e8:	17 a2       	std	Z+39, r1	; 0x27
    f4ea:	10 a6       	std	Z+40, r1	; 0x28
    f4ec:	11 a6       	std	Z+41, r1	; 0x29
    f4ee:	12 a6       	std	Z+42, r1	; 0x2a
    f4f0:	13 a6       	std	Z+43, r1	; 0x2b
    f4f2:	14 a6       	std	Z+44, r1	; 0x2c
    f4f4:	15 a6       	std	Z+45, r1	; 0x2d
    f4f6:	16 a6       	std	Z+46, r1	; 0x2e
    f4f8:	17 a6       	std	Z+47, r1	; 0x2f
    f4fa:	11 8a       	std	Z+17, r1	; 0x11
    f4fc:	10 8a       	std	Z+16, r1	; 0x10
    f4fe:	13 8a       	std	Z+19, r1	; 0x13
    f500:	12 8a       	std	Z+18, r1	; 0x12
    f502:	10 8e       	std	Z+24, r1	; 0x18
    f504:	11 8e       	std	Z+25, r1	; 0x19
    f506:	12 8e       	std	Z+26, r1	; 0x1a
    f508:	13 8e       	std	Z+27, r1	; 0x1b
    f50a:	80 e0       	ldi	r24, 0x00	; 0
    f50c:	90 e4       	ldi	r25, 0x40	; 64
    f50e:	a0 e0       	ldi	r26, 0x00	; 0
    f510:	b0 e0       	ldi	r27, 0x00	; 0
    f512:	4e c0       	rjmp	.+156    	; 0xf5b0 <stat+0x102>
    f514:	be 01       	movw	r22, r28
    f516:	6f 5f       	subi	r22, 0xFF	; 255
    f518:	7f 4f       	sbci	r23, 0xFF	; 255
    f51a:	c7 01       	movw	r24, r14
    f51c:	0e 94 bc 65 	call	0xcb78	; 0xcb78 <f_stat>
    f520:	00 97       	sbiw	r24, 0x00	; 0
    f522:	a1 f0       	breq	.+40     	; 0xf54c <stat+0x9e>
    f524:	84 31       	cpi	r24, 0x14	; 20
    f526:	91 05       	cpc	r25, r1
    f528:	40 f4       	brcc	.+16     	; 0xf53a <stat+0x8c>
    f52a:	fc 01       	movw	r30, r24
    f52c:	e0 5f       	subi	r30, 0xF0	; 240
    f52e:	f8 4f       	sbci	r31, 0xF8	; 248
    f530:	80 81       	ld	r24, Z
    f532:	08 2e       	mov	r0, r24
    f534:	00 0c       	add	r0, r0
    f536:	99 0b       	sbc	r25, r25
    f538:	02 c0       	rjmp	.+4      	; 0xf53e <stat+0x90>
    f53a:	83 e2       	ldi	r24, 0x23	; 35
    f53c:	90 e0       	ldi	r25, 0x00	; 0
    f53e:	90 93 be 1b 	sts	0x1BBE, r25	; 0x801bbe <errno+0x1>
    f542:	80 93 bd 1b 	sts	0x1BBD, r24	; 0x801bbd <errno>
    f546:	8f ef       	ldi	r24, 0xFF	; 255
    f548:	9f ef       	ldi	r25, 0xFF	; 255
    f54a:	38 c0       	rjmp	.+112    	; 0xf5bc <stat+0x10e>
    f54c:	89 81       	ldd	r24, Y+1	; 0x01
    f54e:	9a 81       	ldd	r25, Y+2	; 0x02
    f550:	ab 81       	ldd	r26, Y+3	; 0x03
    f552:	bc 81       	ldd	r27, Y+4	; 0x04
    f554:	f8 01       	movw	r30, r16
    f556:	80 8f       	std	Z+24, r24	; 0x18
    f558:	91 8f       	std	Z+25, r25	; 0x19
    f55a:	a2 8f       	std	Z+26, r26	; 0x1a
    f55c:	b3 8f       	std	Z+27, r27	; 0x1b
    f55e:	6f 81       	ldd	r22, Y+7	; 0x07
    f560:	78 85       	ldd	r23, Y+8	; 0x08
    f562:	8d 81       	ldd	r24, Y+5	; 0x05
    f564:	9e 81       	ldd	r25, Y+6	; 0x06
    f566:	5f df       	rcall	.-322    	; 0xf426 <fat_time_to_unix>
    f568:	f8 01       	movw	r30, r16
    f56a:	64 a3       	std	Z+36, r22	; 0x24
    f56c:	75 a3       	std	Z+37, r23	; 0x25
    f56e:	86 a3       	std	Z+38, r24	; 0x26
    f570:	97 a3       	std	Z+39, r25	; 0x27
    f572:	60 a7       	std	Z+40, r22	; 0x28
    f574:	71 a7       	std	Z+41, r23	; 0x29
    f576:	82 a7       	std	Z+42, r24	; 0x2a
    f578:	93 a7       	std	Z+43, r25	; 0x2b
    f57a:	64 a7       	std	Z+44, r22	; 0x2c
    f57c:	75 a7       	std	Z+45, r23	; 0x2d
    f57e:	86 a7       	std	Z+46, r24	; 0x2e
    f580:	97 a7       	std	Z+47, r25	; 0x2f
    f582:	29 85       	ldd	r18, Y+9	; 0x09
    f584:	20 fd       	sbrc	r18, 0
    f586:	03 c0       	rjmp	.+6      	; 0xf58e <stat+0xe0>
    f588:	8f ef       	ldi	r24, 0xFF	; 255
    f58a:	91 e0       	ldi	r25, 0x01	; 1
    f58c:	02 c0       	rjmp	.+4      	; 0xf592 <stat+0xe4>
    f58e:	8d e6       	ldi	r24, 0x6D	; 109
    f590:	91 e0       	ldi	r25, 0x01	; 1
    f592:	48 ee       	ldi	r20, 0xE8	; 232
    f594:	53 e0       	ldi	r21, 0x03	; 3
    f596:	f8 01       	movw	r30, r16
    f598:	51 8b       	std	Z+17, r21	; 0x11
    f59a:	40 8b       	std	Z+16, r20	; 0x10
    f59c:	53 8b       	std	Z+19, r21	; 0x13
    f59e:	42 8b       	std	Z+18, r20	; 0x12
    f5a0:	24 ff       	sbrs	r18, 4
    f5a2:	02 c0       	rjmp	.+4      	; 0xf5a8 <stat+0xfa>
    f5a4:	90 64       	ori	r25, 0x40	; 64
    f5a6:	01 c0       	rjmp	.+2      	; 0xf5aa <stat+0xfc>
    f5a8:	90 68       	ori	r25, 0x80	; 128
    f5aa:	a0 e0       	ldi	r26, 0x00	; 0
    f5ac:	b0 e0       	ldi	r27, 0x00	; 0
    f5ae:	f8 01       	movw	r30, r16
    f5b0:	80 87       	std	Z+8, r24	; 0x08
    f5b2:	91 87       	std	Z+9, r25	; 0x09
    f5b4:	a2 87       	std	Z+10, r26	; 0x0a
    f5b6:	b3 87       	std	Z+11, r27	; 0x0b
    f5b8:	80 e0       	ldi	r24, 0x00	; 0
    f5ba:	90 e0       	ldi	r25, 0x00	; 0
    f5bc:	ca 5e       	subi	r28, 0xEA	; 234
    f5be:	de 4f       	sbci	r29, 0xFE	; 254
    f5c0:	e6 e0       	ldi	r30, 0x06	; 6
    f5c2:	0c 94 1b e6 	jmp	0x1cc36	; 0x1cc36 <__epilogue_restores__+0x18>

0000f5c6 <unix_time_to_fat>:
    f5c6:	a4 e0       	ldi	r26, 0x04	; 4
    f5c8:	b0 e0       	ldi	r27, 0x00	; 0
    f5ca:	e9 ee       	ldi	r30, 0xE9	; 233
    f5cc:	fa e7       	ldi	r31, 0x7A	; 122
    f5ce:	0c 94 ff e5 	jmp	0x1cbfe	; 0x1cbfe <__prologue_saves__+0x18>
    f5d2:	69 83       	std	Y+1, r22	; 0x01
    f5d4:	7a 83       	std	Y+2, r23	; 0x02
    f5d6:	8b 83       	std	Y+3, r24	; 0x03
    f5d8:	9c 83       	std	Y+4, r25	; 0x04
    f5da:	7a 01       	movw	r14, r20
    f5dc:	89 01       	movw	r16, r18
    f5de:	ce 01       	movw	r24, r28
    f5e0:	01 96       	adiw	r24, 0x01	; 1
    f5e2:	0e 94 bf 38 	call	0x717e	; 0x717e <gmtime>
    f5e6:	fc 01       	movw	r30, r24
    f5e8:	22 85       	ldd	r18, Z+10	; 0x0a
    f5ea:	33 85       	ldd	r19, Z+11	; 0x0b
    f5ec:	20 55       	subi	r18, 0x50	; 80
    f5ee:	31 09       	sbc	r19, r1
    f5f0:	c9 01       	movw	r24, r18
    f5f2:	98 2f       	mov	r25, r24
    f5f4:	88 27       	eor	r24, r24
    f5f6:	99 0f       	add	r25, r25
    f5f8:	20 85       	ldd	r18, Z+8	; 0x08
    f5fa:	31 85       	ldd	r19, Z+9	; 0x09
    f5fc:	2f 5f       	subi	r18, 0xFF	; 255
    f5fe:	3f 4f       	sbci	r19, 0xFF	; 255
    f600:	45 e0       	ldi	r20, 0x05	; 5
    f602:	22 0f       	add	r18, r18
    f604:	33 1f       	adc	r19, r19
    f606:	4a 95       	dec	r20
    f608:	e1 f7       	brne	.-8      	; 0xf602 <unix_time_to_fat+0x3c>
    f60a:	28 2b       	or	r18, r24
    f60c:	39 2b       	or	r19, r25
    f60e:	86 81       	ldd	r24, Z+6	; 0x06
    f610:	97 81       	ldd	r25, Z+7	; 0x07
    f612:	28 2b       	or	r18, r24
    f614:	39 2b       	or	r19, r25
    f616:	d7 01       	movw	r26, r14
    f618:	2d 93       	st	X+, r18
    f61a:	3c 93       	st	X, r19
    f61c:	84 81       	ldd	r24, Z+4	; 0x04
    f61e:	20 e0       	ldi	r18, 0x00	; 0
    f620:	30 e0       	ldi	r19, 0x00	; 0
    f622:	38 2f       	mov	r19, r24
    f624:	33 0f       	add	r19, r19
    f626:	33 0f       	add	r19, r19
    f628:	33 0f       	add	r19, r19
    f62a:	82 81       	ldd	r24, Z+2	; 0x02
    f62c:	93 81       	ldd	r25, Z+3	; 0x03
    f62e:	55 e0       	ldi	r21, 0x05	; 5
    f630:	88 0f       	add	r24, r24
    f632:	99 1f       	adc	r25, r25
    f634:	5a 95       	dec	r21
    f636:	e1 f7       	brne	.-8      	; 0xf630 <unix_time_to_fat+0x6a>
    f638:	82 2b       	or	r24, r18
    f63a:	93 2b       	or	r25, r19
    f63c:	20 81       	ld	r18, Z
    f63e:	31 81       	ldd	r19, Z+1	; 0x01
    f640:	36 95       	lsr	r19
    f642:	27 95       	ror	r18
    f644:	82 2b       	or	r24, r18
    f646:	93 2b       	or	r25, r19
    f648:	f8 01       	movw	r30, r16
    f64a:	91 83       	std	Z+1, r25	; 0x01
    f64c:	80 83       	st	Z, r24
    f64e:	24 96       	adiw	r28, 0x04	; 4
    f650:	e6 e0       	ldi	r30, 0x06	; 6
    f652:	0c 94 1b e6 	jmp	0x1cc36	; 0x1cc36 <__epilogue_restores__+0x18>

0000f656 <utime>:
    f656:	aa e1       	ldi	r26, 0x1A	; 26
    f658:	b1 e0       	ldi	r27, 0x01	; 1
    f65a:	e1 e3       	ldi	r30, 0x31	; 49
    f65c:	fb e7       	ldi	r31, 0x7B	; 123
    f65e:	0c 94 01 e6 	jmp	0x1cc02	; 0x1cc02 <__prologue_saves__+0x1c>
    f662:	8c 01       	movw	r16, r24
    f664:	61 15       	cp	r22, r1
    f666:	71 05       	cpc	r23, r1
    f668:	31 f0       	breq	.+12     	; 0xf676 <utime+0x20>
    f66a:	fb 01       	movw	r30, r22
    f66c:	64 81       	ldd	r22, Z+4	; 0x04
    f66e:	75 81       	ldd	r23, Z+5	; 0x05
    f670:	86 81       	ldd	r24, Z+6	; 0x06
    f672:	97 81       	ldd	r25, Z+7	; 0x07
    f674:	04 c0       	rjmp	.+8      	; 0xf67e <utime+0x28>
    f676:	80 e0       	ldi	r24, 0x00	; 0
    f678:	90 e0       	ldi	r25, 0x00	; 0
    f67a:	0e 94 1a 39 	call	0x7234	; 0x7234 <time>
    f67e:	9e 01       	movw	r18, r28
    f680:	29 5e       	subi	r18, 0xE9	; 233
    f682:	3e 4f       	sbci	r19, 0xFE	; 254
    f684:	ae 01       	movw	r20, r28
    f686:	47 5e       	subi	r20, 0xE7	; 231
    f688:	5e 4f       	sbci	r21, 0xFE	; 254
    f68a:	9d df       	rcall	.-198    	; 0xf5c6 <unix_time_to_fat>
    f68c:	c7 5e       	subi	r28, 0xE7	; 231
    f68e:	de 4f       	sbci	r29, 0xFE	; 254
    f690:	88 81       	ld	r24, Y
    f692:	99 81       	ldd	r25, Y+1	; 0x01
    f694:	c9 51       	subi	r28, 0x19	; 25
    f696:	d1 40       	sbci	r29, 0x01	; 1
    f698:	9e 83       	std	Y+6, r25	; 0x06
    f69a:	8d 83       	std	Y+5, r24	; 0x05
    f69c:	c9 5e       	subi	r28, 0xE9	; 233
    f69e:	de 4f       	sbci	r29, 0xFE	; 254
    f6a0:	88 81       	ld	r24, Y
    f6a2:	99 81       	ldd	r25, Y+1	; 0x01
    f6a4:	c7 51       	subi	r28, 0x17	; 23
    f6a6:	d1 40       	sbci	r29, 0x01	; 1
    f6a8:	98 87       	std	Y+8, r25	; 0x08
    f6aa:	8f 83       	std	Y+7, r24	; 0x07
    f6ac:	be 01       	movw	r22, r28
    f6ae:	6f 5f       	subi	r22, 0xFF	; 255
    f6b0:	7f 4f       	sbci	r23, 0xFF	; 255
    f6b2:	c8 01       	movw	r24, r16
    f6b4:	0e 94 d2 69 	call	0xd3a4	; 0xd3a4 <f_utime>
    f6b8:	84 31       	cpi	r24, 0x14	; 20
    f6ba:	91 05       	cpc	r25, r1
    f6bc:	40 f4       	brcc	.+16     	; 0xf6ce <utime+0x78>
    f6be:	fc 01       	movw	r30, r24
    f6c0:	e0 5f       	subi	r30, 0xF0	; 240
    f6c2:	f8 4f       	sbci	r31, 0xF8	; 248
    f6c4:	80 81       	ld	r24, Z
    f6c6:	08 2e       	mov	r0, r24
    f6c8:	00 0c       	add	r0, r0
    f6ca:	99 0b       	sbc	r25, r25
    f6cc:	02 c0       	rjmp	.+4      	; 0xf6d2 <utime+0x7c>
    f6ce:	83 e2       	ldi	r24, 0x23	; 35
    f6d0:	90 e0       	ldi	r25, 0x00	; 0
    f6d2:	c6 5e       	subi	r28, 0xE6	; 230
    f6d4:	de 4f       	sbci	r29, 0xFE	; 254
    f6d6:	e4 e0       	ldi	r30, 0x04	; 4
    f6d8:	0c 94 1d e6 	jmp	0x1cc3a	; 0x1cc3a <__epilogue_restores__+0x1c>

0000f6dc <fileno_to_fatfs>:
    f6dc:	83 30       	cpi	r24, 0x03	; 3
    f6de:	91 05       	cpc	r25, r1
    f6e0:	48 f4       	brcc	.+18     	; 0xf6f4 <fileno_to_fatfs+0x18>
    f6e2:	89 e0       	ldi	r24, 0x09	; 9
    f6e4:	90 e0       	ldi	r25, 0x00	; 0
    f6e6:	90 93 be 1b 	sts	0x1BBE, r25	; 0x801bbe <errno+0x1>
    f6ea:	80 93 bd 1b 	sts	0x1BBD, r24	; 0x801bbd <errno>
    f6ee:	80 e0       	ldi	r24, 0x00	; 0
    f6f0:	90 e0       	ldi	r25, 0x00	; 0
    f6f2:	08 95       	ret
    f6f4:	78 dc       	rcall	.-1808   	; 0xefe6 <fileno_to_stream>
    f6f6:	00 97       	sbiw	r24, 0x00	; 0
    f6f8:	d1 f3       	breq	.-12     	; 0xf6ee <fileno_to_fatfs+0x12>
    f6fa:	fc 01       	movw	r30, r24
    f6fc:	84 85       	ldd	r24, Z+12	; 0x0c
    f6fe:	95 85       	ldd	r25, Z+13	; 0x0d
    f700:	00 97       	sbiw	r24, 0x00	; 0
    f702:	79 f3       	breq	.-34     	; 0xf6e2 <fileno_to_fatfs+0x6>
    f704:	08 95       	ret

0000f706 <ftell>:
    f706:	10 92 be 1b 	sts	0x1BBE, r1	; 0x801bbe <errno+0x1>
    f70a:	10 92 bd 1b 	sts	0x1BBD, r1	; 0x801bbd <errno>
    f70e:	4f dc       	rcall	.-1890   	; 0xefae <fileno>
    f710:	83 30       	cpi	r24, 0x03	; 3
    f712:	91 05       	cpc	r25, r1
    f714:	48 f0       	brcs	.+18     	; 0xf728 <ftell+0x22>
    f716:	e2 df       	rcall	.-60     	; 0xf6dc <fileno_to_fatfs>
    f718:	00 97       	sbiw	r24, 0x00	; 0
    f71a:	51 f4       	brne	.+20     	; 0xf730 <ftell+0x2a>
    f71c:	89 e0       	ldi	r24, 0x09	; 9
    f71e:	90 e0       	ldi	r25, 0x00	; 0
    f720:	90 93 be 1b 	sts	0x1BBE, r25	; 0x801bbe <errno+0x1>
    f724:	80 93 bd 1b 	sts	0x1BBD, r24	; 0x801bbd <errno>
    f728:	6f ef       	ldi	r22, 0xFF	; 255
    f72a:	7f ef       	ldi	r23, 0xFF	; 255
    f72c:	cb 01       	movw	r24, r22
    f72e:	08 95       	ret
    f730:	fc 01       	movw	r30, r24
    f732:	60 89       	ldd	r22, Z+16	; 0x10
    f734:	71 89       	ldd	r23, Z+17	; 0x11
    f736:	82 89       	ldd	r24, Z+18	; 0x12
    f738:	93 89       	ldd	r25, Z+19	; 0x13
    f73a:	08 95       	ret

0000f73c <lseek>:
    f73c:	a0 e0       	ldi	r26, 0x00	; 0
    f73e:	b0 e0       	ldi	r27, 0x00	; 0
    f740:	e4 ea       	ldi	r30, 0xA4	; 164
    f742:	fb e7       	ldi	r31, 0x7B	; 123
    f744:	0c 94 fb e5 	jmp	0x1cbf6	; 0x1cbf6 <__prologue_saves__+0x10>
    f748:	5c 01       	movw	r10, r24
    f74a:	6a 01       	movw	r12, r20
    f74c:	7b 01       	movw	r14, r22
    f74e:	89 01       	movw	r16, r18
    f750:	10 92 be 1b 	sts	0x1BBE, r1	; 0x801bbe <errno+0x1>
    f754:	10 92 bd 1b 	sts	0x1BBD, r1	; 0x801bbd <errno>
    f758:	c1 df       	rcall	.-126    	; 0xf6dc <fileno_to_fatfs>
    f75a:	ec 01       	movw	r28, r24
    f75c:	89 2b       	or	r24, r25
    f75e:	19 f4       	brne	.+6      	; 0xf766 <lseek+0x2a>
    f760:	88 e1       	ldi	r24, 0x18	; 24
    f762:	90 e0       	ldi	r25, 0x00	; 0
    f764:	26 c0       	rjmp	.+76     	; 0xf7b2 <lseek+0x76>
    f766:	83 e0       	ldi	r24, 0x03	; 3
    f768:	a8 16       	cp	r10, r24
    f76a:	b1 04       	cpc	r11, r1
    f76c:	d0 f1       	brcs	.+116    	; 0xf7e2 <lseek+0xa6>
    f76e:	c5 01       	movw	r24, r10
    f770:	3a dc       	rcall	.-1932   	; 0xefe6 <fileno_to_stream>
    f772:	fc 01       	movw	r30, r24
    f774:	93 81       	ldd	r25, Z+3	; 0x03
    f776:	90 64       	ori	r25, 0x40	; 64
    f778:	93 83       	std	Z+3, r25	; 0x03
    f77a:	02 30       	cpi	r16, 0x02	; 2
    f77c:	11 05       	cpc	r17, r1
    f77e:	a9 f5       	brne	.+106    	; 0xf7ea <lseek+0xae>
    f780:	8a 85       	ldd	r24, Y+10	; 0x0a
    f782:	9b 85       	ldd	r25, Y+11	; 0x0b
    f784:	ac 85       	ldd	r26, Y+12	; 0x0c
    f786:	bd 85       	ldd	r27, Y+13	; 0x0d
    f788:	c8 0e       	add	r12, r24
    f78a:	d9 1e       	adc	r13, r25
    f78c:	ea 1e       	adc	r14, r26
    f78e:	fb 1e       	adc	r15, r27
    f790:	b7 01       	movw	r22, r14
    f792:	a6 01       	movw	r20, r12
    f794:	ce 01       	movw	r24, r28
    f796:	0e 94 17 62 	call	0xc42e	; 0xc42e <f_lseek>
    f79a:	00 97       	sbiw	r24, 0x00	; 0
    f79c:	79 f0       	breq	.+30     	; 0xf7bc <lseek+0x80>
    f79e:	84 31       	cpi	r24, 0x14	; 20
    f7a0:	91 05       	cpc	r25, r1
    f7a2:	58 f5       	brcc	.+86     	; 0xf7fa <lseek+0xbe>
    f7a4:	fc 01       	movw	r30, r24
    f7a6:	e0 5f       	subi	r30, 0xF0	; 240
    f7a8:	f8 4f       	sbci	r31, 0xF8	; 248
    f7aa:	80 81       	ld	r24, Z
    f7ac:	08 2e       	mov	r0, r24
    f7ae:	00 0c       	add	r0, r0
    f7b0:	99 0b       	sbc	r25, r25
    f7b2:	90 93 be 1b 	sts	0x1BBE, r25	; 0x801bbe <errno+0x1>
    f7b6:	80 93 bd 1b 	sts	0x1BBD, r24	; 0x801bbd <errno>
    f7ba:	13 c0       	rjmp	.+38     	; 0xf7e2 <lseek+0xa6>
    f7bc:	68 89       	ldd	r22, Y+16	; 0x10
    f7be:	79 89       	ldd	r23, Y+17	; 0x11
    f7c0:	8a 89       	ldd	r24, Y+18	; 0x12
    f7c2:	9b 89       	ldd	r25, Y+19	; 0x13
    f7c4:	c6 16       	cp	r12, r22
    f7c6:	d7 06       	cpc	r13, r23
    f7c8:	e8 06       	cpc	r14, r24
    f7ca:	f9 06       	cpc	r15, r25
    f7cc:	c9 f0       	breq	.+50     	; 0xf800 <lseek+0xc4>
    f7ce:	84 e5       	ldi	r24, 0x54	; 84
    f7d0:	9c e0       	ldi	r25, 0x0C	; 12
    f7d2:	1f 92       	push	r1
    f7d4:	9f 93       	push	r25
    f7d6:	8f 93       	push	r24
    f7d8:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    f7dc:	0f 90       	pop	r0
    f7de:	0f 90       	pop	r0
    f7e0:	0f 90       	pop	r0
    f7e2:	6f ef       	ldi	r22, 0xFF	; 255
    f7e4:	7f ef       	ldi	r23, 0xFF	; 255
    f7e6:	cb 01       	movw	r24, r22
    f7e8:	0b c0       	rjmp	.+22     	; 0xf800 <lseek+0xc4>
    f7ea:	01 30       	cpi	r16, 0x01	; 1
    f7ec:	11 05       	cpc	r17, r1
    f7ee:	81 f6       	brne	.-96     	; 0xf790 <lseek+0x54>
    f7f0:	88 89       	ldd	r24, Y+16	; 0x10
    f7f2:	99 89       	ldd	r25, Y+17	; 0x11
    f7f4:	aa 89       	ldd	r26, Y+18	; 0x12
    f7f6:	bb 89       	ldd	r27, Y+19	; 0x13
    f7f8:	c7 cf       	rjmp	.-114    	; 0xf788 <lseek+0x4c>
    f7fa:	83 e2       	ldi	r24, 0x23	; 35
    f7fc:	90 e0       	ldi	r25, 0x00	; 0
    f7fe:	d9 cf       	rjmp	.-78     	; 0xf7b2 <lseek+0x76>
    f800:	cd b7       	in	r28, 0x3d	; 61
    f802:	de b7       	in	r29, 0x3e	; 62
    f804:	ea e0       	ldi	r30, 0x0A	; 10
    f806:	0c 94 17 e6 	jmp	0x1cc2e	; 0x1cc2e <__epilogue_restores__+0x10>

0000f80a <fseek>:
    f80a:	cf 92       	push	r12
    f80c:	df 92       	push	r13
    f80e:	ef 92       	push	r14
    f810:	ff 92       	push	r15
    f812:	cf 93       	push	r28
    f814:	df 93       	push	r29
    f816:	6a 01       	movw	r12, r20
    f818:	7b 01       	movw	r14, r22
    f81a:	e9 01       	movw	r28, r18
    f81c:	c8 db       	rcall	.-2160   	; 0xefae <fileno>
    f81e:	97 fd       	sbrc	r25, 7
    f820:	12 c0       	rjmp	.+36     	; 0xf846 <fseek+0x3c>
    f822:	9e 01       	movw	r18, r28
    f824:	b7 01       	movw	r22, r14
    f826:	a6 01       	movw	r20, r12
    f828:	89 df       	rcall	.-238    	; 0xf73c <lseek>
    f82a:	21 e0       	ldi	r18, 0x01	; 1
    f82c:	30 e0       	ldi	r19, 0x00	; 0
    f82e:	6f 3f       	cpi	r22, 0xFF	; 255
    f830:	7f 4f       	sbci	r23, 0xFF	; 255
    f832:	8f 4f       	sbci	r24, 0xFF	; 255
    f834:	9f 4f       	sbci	r25, 0xFF	; 255
    f836:	11 f0       	breq	.+4      	; 0xf83c <fseek+0x32>
    f838:	20 e0       	ldi	r18, 0x00	; 0
    f83a:	30 e0       	ldi	r19, 0x00	; 0
    f83c:	88 27       	eor	r24, r24
    f83e:	99 27       	eor	r25, r25
    f840:	82 1b       	sub	r24, r18
    f842:	93 0b       	sbc	r25, r19
    f844:	02 c0       	rjmp	.+4      	; 0xf84a <fseek+0x40>
    f846:	8f ef       	ldi	r24, 0xFF	; 255
    f848:	9f ef       	ldi	r25, 0xFF	; 255
    f84a:	df 91       	pop	r29
    f84c:	cf 91       	pop	r28
    f84e:	ff 90       	pop	r15
    f850:	ef 90       	pop	r14
    f852:	df 90       	pop	r13
    f854:	cf 90       	pop	r12
    f856:	08 95       	ret

0000f858 <read>:
///
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t read(int fd, const void *buf, size_t count)
{
    f858:	a2 e0       	ldi	r26, 0x02	; 2
    f85a:	b0 e0       	ldi	r27, 0x00	; 0
    f85c:	e2 e3       	ldi	r30, 0x32	; 50
    f85e:	fc e7       	ldi	r31, 0x7C	; 124
    f860:	0c 94 fb e5 	jmp	0x1cbf6	; 0x1cbf6 <__prologue_saves__+0x10>
    f864:	5c 01       	movw	r10, r24
    f866:	8b 01       	movw	r16, r22
    f868:	6a 01       	movw	r12, r20
    int ret;
    FIL *fh;
    FILE *stream;

    //FIXME
    *(char *) buf = 0;
    f86a:	fb 01       	movw	r30, r22
    f86c:	10 82       	st	Z, r1

    errno = 0;
    f86e:	10 92 be 1b 	sts	0x1BBE, r1	; 0x801bbe <errno+0x1>
    f872:	10 92 bd 1b 	sts	0x1BBD, r1	; 0x801bbd <errno>

    // TTY read function
    // FIXME should we really be blocking ???
    stream = fileno_to_stream(fd);
    f876:	b7 db       	rcall	.-2194   	; 0xefe6 <fileno_to_stream>
    if(stream == stdin)
    f878:	7c 01       	movw	r14, r24
    f87a:	80 91 bf 1b 	lds	r24, 0x1BBF	; 0x801bbf <__iob>
    f87e:	90 91 c0 1b 	lds	r25, 0x1BC0	; 0x801bc0 <__iob+0x1>
    f882:	e8 16       	cp	r14, r24
    f884:	f9 06       	cpc	r15, r25
    {
        char *ptr = (char *) buf;
        // ungetc is undefined for read
        stream->flags |= __SUNGET;
    f886:	c9 f4       	brne	.+50     	; 0xf8ba <read+0x62>
    f888:	f7 01       	movw	r30, r14
    f88a:	83 81       	ldd	r24, Z+3	; 0x03
    f88c:	80 64       	ori	r24, 0x40	; 64
        size = 0;
    f88e:	83 83       	std	Z+3, r24	; 0x03
    f890:	1a 82       	std	Y+2, r1	; 0x02
    f892:	19 82       	std	Y+1, r1	; 0x01
    f894:	c0 0e       	add	r12, r16
        while(count--)
    f896:	d1 1e       	adc	r13, r17
    f898:	0c 15       	cp	r16, r12
    f89a:	1d 05       	cpc	r17, r13
        {
            ret = fgetc(stream);
    f89c:	09 f4       	brne	.+2      	; 0xf8a0 <read+0x48>
    f89e:	3d c0       	rjmp	.+122    	; 0xf91a <read+0xc2>
            if(ret < 0)
    f8a0:	c7 01       	movw	r24, r14
    f8a2:	6b da       	rcall	.-2858   	; 0xed7a <fgetc>
                break;
            
            *ptr++ = ret;
    f8a4:	97 fd       	sbrc	r25, 7
    f8a6:	39 c0       	rjmp	.+114    	; 0xf91a <read+0xc2>
    f8a8:	f8 01       	movw	r30, r16
            ++size;
    f8aa:	81 93       	st	Z+, r24
    f8ac:	8f 01       	movw	r16, r30
    f8ae:	89 81       	ldd	r24, Y+1	; 0x01
    f8b0:	9a 81       	ldd	r25, Y+2	; 0x02
    f8b2:	01 96       	adiw	r24, 0x01	; 1
    f8b4:	9a 83       	std	Y+2, r25	; 0x02
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    f8b6:	89 83       	std	Y+1, r24	; 0x01
    f8b8:	ef cf       	rjmp	.-34     	; 0xf898 <read+0x40>
    f8ba:	80 91 c1 1b 	lds	r24, 0x1BC1	; 0x801bc1 <__iob+0x2>
    f8be:	90 91 c2 1b 	lds	r25, 0x1BC2	; 0x801bc2 <__iob+0x3>
    f8c2:	e8 16       	cp	r14, r24
    f8c4:	f9 06       	cpc	r15, r25
    f8c6:	71 f1       	breq	.+92     	; 0xf924 <read+0xcc>
    f8c8:	80 91 c3 1b 	lds	r24, 0x1BC3	; 0x801bc3 <__iob+0x4>
    f8cc:	90 91 c4 1b 	lds	r25, 0x1BC4	; 0x801bc4 <__iob+0x5>
    {
        return(-1);
    }

    // fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f8d0:	e8 16       	cp	r14, r24
    f8d2:	f9 06       	cpc	r15, r25
    f8d4:	39 f1       	breq	.+78     	; 0xf924 <read+0xcc>
    if ( fh == NULL )
    f8d6:	c5 01       	movw	r24, r10
    f8d8:	01 df       	rcall	.-510    	; 0xf6dc <fileno_to_fatfs>
    {
        errno = EBADF;
    f8da:	00 97       	sbiw	r24, 0x00	; 0
    f8dc:	19 f4       	brne	.+6      	; 0xf8e4 <read+0x8c>
    f8de:	89 e0       	ldi	r24, 0x09	; 9
        return(-1);
    }

    res = f_read(fh, (void *) buf, bytes, &size);
    f8e0:	90 e0       	ldi	r25, 0x00	; 0
    f8e2:	16 c0       	rjmp	.+44     	; 0xf910 <read+0xb8>
    f8e4:	9e 01       	movw	r18, r28
    f8e6:	2f 5f       	subi	r18, 0xFF	; 255
    f8e8:	3f 4f       	sbci	r19, 0xFF	; 255
    f8ea:	a6 01       	movw	r20, r12
    f8ec:	b8 01       	movw	r22, r16
    if(res != FR_OK)
    f8ee:	0e 94 0b 5d 	call	0xba16	; 0xba16 <f_read>
    f8f2:	00 97       	sbiw	r24, 0x00	; 0
    f8f4:	91 f0       	breq	.+36     	; 0xf91a <read+0xc2>
    f8f6:	84 31       	cpi	r24, 0x14	; 20
    f8f8:	91 05       	cpc	r25, r1
    f8fa:	40 f4       	brcc	.+16     	; 0xf90c <read+0xb4>
    f8fc:	fc 01       	movw	r30, r24
    f8fe:	e0 5f       	subi	r30, 0xF0	; 240
    f900:	f8 4f       	sbci	r31, 0xF8	; 248
    f902:	80 81       	ld	r24, Z
    f904:	08 2e       	mov	r0, r24
    f906:	00 0c       	add	r0, r0
    f908:	99 0b       	sbc	r25, r25
    f90a:	02 c0       	rjmp	.+4      	; 0xf910 <read+0xb8>
    {
        errno = fatfs_to_errno(res);
    f90c:	83 e2       	ldi	r24, 0x23	; 35
    f90e:	90 e0       	ldi	r25, 0x00	; 0
    f910:	90 93 be 1b 	sts	0x1BBE, r25	; 0x801bbe <errno+0x1>
    f914:	80 93 bd 1b 	sts	0x1BBD, r24	; 0x801bbd <errno>
        return(-1);
    }
    return ((ssize_t) size);
    f918:	05 c0       	rjmp	.+10     	; 0xf924 <read+0xcc>
    f91a:	69 81       	ldd	r22, Y+1	; 0x01
    f91c:	7a 81       	ldd	r23, Y+2	; 0x02
    f91e:	80 e0       	ldi	r24, 0x00	; 0
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    {
        return(-1);
    f920:	90 e0       	ldi	r25, 0x00	; 0
    f922:	03 c0       	rjmp	.+6      	; 0xf92a <read+0xd2>
    f924:	6f ef       	ldi	r22, 0xFF	; 255
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    f926:	7f ef       	ldi	r23, 0xFF	; 255
    f928:	cb 01       	movw	r24, r22
    f92a:	22 96       	adiw	r28, 0x02	; 2
    f92c:	ea e0       	ldi	r30, 0x0A	; 10
    f92e:	0c 94 17 e6 	jmp	0x1cc2e	; 0x1cc2e <__epilogue_restores__+0x10>

0000f932 <fread>:
///
/// @return count on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    f932:	0f 93       	push	r16
    f934:	1f 93       	push	r17
    f936:	cf 93       	push	r28
    f938:	df 93       	push	r29
    f93a:	ec 01       	movw	r28, r24
    f93c:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    f93e:	64 9f       	mul	r22, r20
    f940:	80 01       	movw	r16, r0
    f942:	65 9f       	mul	r22, r21
    f944:	10 0d       	add	r17, r0
    f946:	74 9f       	mul	r23, r20
    f948:	10 0d       	add	r17, r0
    int fn = fileno(stream);
    f94a:	11 24       	eor	r1, r1
    ssize_t ret;

    // read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    f94c:	30 db       	rcall	.-2464   	; 0xefae <fileno>
    f94e:	a8 01       	movw	r20, r16
    f950:	be 01       	movw	r22, r28
    if(ret < 0)
    f952:	82 df       	rcall	.-252    	; 0xf858 <read>
    f954:	97 fd       	sbrc	r25, 7
        return(0);

    return((size_t) ret);
    f956:	02 c0       	rjmp	.+4      	; 0xf95c <fread+0x2a>
    f958:	cb 01       	movw	r24, r22
    ssize_t ret;

    // read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    if(ret < 0)
        return(0);
    f95a:	02 c0       	rjmp	.+4      	; 0xf960 <fread+0x2e>
    f95c:	80 e0       	ldi	r24, 0x00	; 0

    return((size_t) ret);
}
    f95e:	90 e0       	ldi	r25, 0x00	; 0
    f960:	df 91       	pop	r29
    f962:	cf 91       	pop	r28
    f964:	1f 91       	pop	r17
    f966:	0f 91       	pop	r16
    f968:	08 95       	ret

0000f96a <syncfs>:
/// @param[in] fd: POSIX fileno to sync.
/// @return 0.
/// @return -1 on error witrh errno set.
MEMSPACE
int syncfs(int fd)
{
    f96a:	cf 93       	push	r28
    f96c:	df 93       	push	r29
    FIL *fh;
    FRESULT res;
    FILE *stream;

    errno = 0;
    f96e:	10 92 be 1b 	sts	0x1BBE, r1	; 0x801bbe <errno+0x1>
    f972:	10 92 bd 1b 	sts	0x1BBD, r1	; 0x801bbd <errno>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f976:	83 30       	cpi	r24, 0x03	; 3
    f978:	91 05       	cpc	r25, r1
    f97a:	18 f4       	brcc	.+6      	; 0xf982 <syncfs+0x18>

    // fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    if(fh == NULL)
    {
        errno = EBADF;
    f97c:	89 e0       	ldi	r24, 0x09	; 9
    f97e:	90 e0       	ldi	r25, 0x00	; 0
    f980:	18 c0       	rjmp	.+48     	; 0xf9b2 <syncfs+0x48>
    if(isatty(fd))
    {
        errno = EBADF;
        return(-1);
    }
    stream = fileno_to_stream(fd);
    f982:	ec 01       	movw	r28, r24
    f984:	30 db       	rcall	.-2464   	; 0xefe6 <fileno_to_stream>
    // reset unget on sync
    stream->flags |= __SUNGET;
    f986:	fc 01       	movw	r30, r24
    f988:	93 81       	ldd	r25, Z+3	; 0x03

    // fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f98a:	90 64       	ori	r25, 0x40	; 64
    f98c:	93 83       	std	Z+3, r25	; 0x03
    if(fh == NULL)
    f98e:	ce 01       	movw	r24, r28
    f990:	a5 de       	rcall	.-694    	; 0xf6dc <fileno_to_fatfs>
    {
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    f992:	00 97       	sbiw	r24, 0x00	; 0
    f994:	99 f3       	breq	.-26     	; 0xf97c <syncfs+0x12>
    if (res != FR_OK)
    f996:	0e 94 ed 5f 	call	0xbfda	; 0xbfda <f_sync>
    f99a:	00 97       	sbiw	r24, 0x00	; 0
    f99c:	a1 f0       	breq	.+40     	; 0xf9c6 <syncfs+0x5c>
    f99e:	84 31       	cpi	r24, 0x14	; 20
    f9a0:	91 05       	cpc	r25, r1
    f9a2:	70 f4       	brcc	.+28     	; 0xf9c0 <syncfs+0x56>
    f9a4:	fc 01       	movw	r30, r24
    f9a6:	e0 5f       	subi	r30, 0xF0	; 240
    f9a8:	f8 4f       	sbci	r31, 0xF8	; 248
    f9aa:	80 81       	ld	r24, Z
    f9ac:	08 2e       	mov	r0, r24
    {
        errno = fatfs_to_errno(res);
    f9ae:	00 0c       	add	r0, r0
    f9b0:	99 0b       	sbc	r25, r25
    f9b2:	90 93 be 1b 	sts	0x1BBE, r25	; 0x801bbe <errno+0x1>
        return(-1);
    f9b6:	80 93 bd 1b 	sts	0x1BBD, r24	; 0x801bbd <errno>
    f9ba:	8f ef       	ldi	r24, 0xFF	; 255
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    if (res != FR_OK)
    f9bc:	9f ef       	ldi	r25, 0xFF	; 255
    f9be:	05 c0       	rjmp	.+10     	; 0xf9ca <syncfs+0x60>
    f9c0:	83 e2       	ldi	r24, 0x23	; 35
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return(0);
    f9c2:	90 e0       	ldi	r25, 0x00	; 0
    f9c4:	f6 cf       	rjmp	.-20     	; 0xf9b2 <syncfs+0x48>
}
    f9c6:	80 e0       	ldi	r24, 0x00	; 0
    f9c8:	90 e0       	ldi	r25, 0x00	; 0
    f9ca:	df 91       	pop	r29
    f9cc:	cf 91       	pop	r28
    f9ce:	08 95       	ret

0000f9d0 <sync>:
/// - man page sync (2).
///
/// @return  void.
MEMSPACE
void sync(void)
{
    f9d0:	cf 93       	push	r28
    f9d2:	df 93       	push	r29
    FIL *fh;
    int i;

    for(i=0;i<MAX_FILES;++i)
    f9d4:	c0 e0       	ldi	r28, 0x00	; 0
    f9d6:	d0 e0       	ldi	r29, 0x00	; 0
    f9d8:	21 96       	adiw	r28, 0x01	; 1
    f9da:	c0 31       	cpi	r28, 0x10	; 16
    f9dc:	d1 05       	cpc	r29, r1
    f9de:	51 f0       	breq	.+20     	; 0xf9f4 <sync+0x24>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f9e0:	c3 30       	cpi	r28, 0x03	; 3
    f9e2:	d1 05       	cpc	r29, r1
    f9e4:	cc f3       	brlt	.-14     	; 0xf9d8 <sync+0x8>
    {
        if(isatty(i))
            continue;

        // fileno_to_fatfs checks for i out of bounds
        fh = fileno_to_fatfs(i);
    f9e6:	ce 01       	movw	r24, r28
    f9e8:	79 de       	rcall	.-782    	; 0xf6dc <fileno_to_fatfs>
        if(fh == NULL)
    f9ea:	89 2b       	or	r24, r25
            continue;

        (void ) syncfs(i);
    f9ec:	a9 f3       	breq	.-22     	; 0xf9d8 <sync+0x8>
    f9ee:	ce 01       	movw	r24, r28
    f9f0:	bc df       	rcall	.-136    	; 0xf96a <syncfs>
    }
}
    f9f2:	f2 cf       	rjmp	.-28     	; 0xf9d8 <sync+0x8>
    f9f4:	df 91       	pop	r29
    f9f6:	cf 91       	pop	r28
    f9f8:	08 95       	ret

0000f9fa <write>:
/// @param[in] count: number of bytes to write.
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t write(int fd, const void *buf, size_t count)
{
    f9fa:	a2 e0       	ldi	r26, 0x02	; 2
    f9fc:	b0 e0       	ldi	r27, 0x00	; 0
    f9fe:	e3 e0       	ldi	r30, 0x03	; 3
    fa00:	fd e7       	ldi	r31, 0x7D	; 125
    fa02:	0c 94 f9 e5 	jmp	0x1cbf2	; 0x1cbf2 <__prologue_saves__+0xc>
    fa06:	8c 01       	movw	r16, r24
    fa08:	b6 2e       	mov	r11, r22
    fa0a:	f7 2e       	mov	r15, r23
    fa0c:	4a 01       	movw	r8, r20
    UINT size;
    UINT bytes = count;
    FRESULT res;
    FIL *fh;
    FILE *stream;
    errno = 0;
    fa0e:	10 92 be 1b 	sts	0x1BBE, r1	; 0x801bbe <errno+0x1>
    fa12:	10 92 bd 1b 	sts	0x1BBD, r1	; 0x801bbd <errno>

    // TTY read function
    stream = fileno_to_stream(fd);
    fa16:	e7 da       	rcall	.-2610   	; 0xefe6 <fileno_to_stream>
    if(stream == stdout || stream == stderr)
    fa18:	6c 01       	movw	r12, r24
    fa1a:	80 91 c1 1b 	lds	r24, 0x1BC1	; 0x801bc1 <__iob+0x2>
    fa1e:	90 91 c2 1b 	lds	r25, 0x1BC2	; 0x801bc2 <__iob+0x3>
    fa22:	c8 16       	cp	r12, r24
    fa24:	d9 06       	cpc	r13, r25
    fa26:	39 f0       	breq	.+14     	; 0xfa36 <write+0x3c>
    fa28:	80 91 c3 1b 	lds	r24, 0x1BC3	; 0x801bc3 <__iob+0x4>
    fa2c:	90 91 c4 1b 	lds	r25, 0x1BC4	; 0x801bc4 <__iob+0x5>
    fa30:	c8 16       	cp	r12, r24
    fa32:	d9 06       	cpc	r13, r25
    {
        char *ptr = (char *) buf;   
        size = 0;
    fa34:	d1 f4       	brne	.+52     	; 0xfa6a <write+0x70>
    fa36:	1a 82       	std	Y+2, r1	; 0x02
    fa38:	19 82       	std	Y+1, r1	; 0x01
    fa3a:	0b 2d       	mov	r16, r11
    fa3c:	1f 2d       	mov	r17, r15
    fa3e:	78 01       	movw	r14, r16
    fa40:	e8 0c       	add	r14, r8
        while(count--)
    fa42:	f9 1c       	adc	r15, r9
    fa44:	0e 15       	cp	r16, r14
    fa46:	1f 05       	cpc	r17, r15
        {
            int c,ret;
            c = *ptr++;
    fa48:	d1 f1       	breq	.+116    	; 0xfabe <write+0xc4>
    fa4a:	f8 01       	movw	r30, r16
    fa4c:	a1 90       	ld	r10, Z+
    fa4e:	8f 01       	movw	r16, r30
            ret = fputc(c, stream);
    fa50:	b1 2c       	mov	r11, r1
    fa52:	b6 01       	movw	r22, r12
    fa54:	c5 01       	movw	r24, r10
            if(c != ret)
    fa56:	e2 d9       	rcall	.-3132   	; 0xee1c <fputc>
    fa58:	a8 16       	cp	r10, r24
    fa5a:	b9 06       	cpc	r11, r25
                break;

            ++size;
    fa5c:	81 f5       	brne	.+96     	; 0xfabe <write+0xc4>
    fa5e:	89 81       	ldd	r24, Y+1	; 0x01
    fa60:	9a 81       	ldd	r25, Y+2	; 0x02
    fa62:	01 96       	adiw	r24, 0x01	; 1
    fa64:	9a 83       	std	Y+2, r25	; 0x02
    fa66:	89 83       	std	Y+1, r24	; 0x01
        }
        return(size);
    }
    if(stream == stdin)
    fa68:	ed cf       	rjmp	.-38     	; 0xfa44 <write+0x4a>
    fa6a:	80 91 bf 1b 	lds	r24, 0x1BBF	; 0x801bbf <__iob>
    fa6e:	90 91 c0 1b 	lds	r25, 0x1BC0	; 0x801bc0 <__iob+0x1>
    fa72:	c8 16       	cp	r12, r24
    {
        return(-1);
    }

    // fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    fa74:	d9 06       	cpc	r13, r25
    fa76:	41 f1       	breq	.+80     	; 0xfac8 <write+0xce>
    fa78:	c8 01       	movw	r24, r16
    if ( fh == NULL )
    fa7a:	30 de       	rcall	.-928    	; 0xf6dc <fileno_to_fatfs>
    fa7c:	00 97       	sbiw	r24, 0x00	; 0
    {
        errno = EBADF;
    fa7e:	19 f4       	brne	.+6      	; 0xfa86 <write+0x8c>
    fa80:	89 e0       	ldi	r24, 0x09	; 9
    fa82:	90 e0       	ldi	r25, 0x00	; 0
        return(-1);
    }

    res = f_write(fh, buf, bytes, &size);
    fa84:	17 c0       	rjmp	.+46     	; 0xfab4 <write+0xba>
    fa86:	9e 01       	movw	r18, r28
    fa88:	2f 5f       	subi	r18, 0xFF	; 255
    fa8a:	3f 4f       	sbci	r19, 0xFF	; 255
    fa8c:	a4 01       	movw	r20, r8
    fa8e:	6b 2d       	mov	r22, r11
    fa90:	7f 2d       	mov	r23, r15
    fa92:	0e 94 56 5e 	call	0xbcac	; 0xbcac <f_write>
    if(res != FR_OK)
    fa96:	00 97       	sbiw	r24, 0x00	; 0
    fa98:	91 f0       	breq	.+36     	; 0xfabe <write+0xc4>
    fa9a:	84 31       	cpi	r24, 0x14	; 20
    fa9c:	91 05       	cpc	r25, r1
    fa9e:	40 f4       	brcc	.+16     	; 0xfab0 <write+0xb6>
    faa0:	fc 01       	movw	r30, r24
    faa2:	e0 5f       	subi	r30, 0xF0	; 240
    faa4:	f8 4f       	sbci	r31, 0xF8	; 248
    faa6:	80 81       	ld	r24, Z
    faa8:	08 2e       	mov	r0, r24
    faaa:	00 0c       	add	r0, r0
    faac:	99 0b       	sbc	r25, r25
    faae:	02 c0       	rjmp	.+4      	; 0xfab4 <write+0xba>
    fab0:	83 e2       	ldi	r24, 0x23	; 35
    {
        errno = fatfs_to_errno(res);
    fab2:	90 e0       	ldi	r25, 0x00	; 0
    fab4:	90 93 be 1b 	sts	0x1BBE, r25	; 0x801bbe <errno+0x1>
    fab8:	80 93 bd 1b 	sts	0x1BBD, r24	; 0x801bbd <errno>
        return(-1);
    }
    return ((ssize_t) size);
    fabc:	05 c0       	rjmp	.+10     	; 0xfac8 <write+0xce>
    fabe:	69 81       	ldd	r22, Y+1	; 0x01
    fac0:	7a 81       	ldd	r23, Y+2	; 0x02
    fac2:	80 e0       	ldi	r24, 0x00	; 0
    fac4:	90 e0       	ldi	r25, 0x00	; 0
        }
        return(size);
    }
    if(stream == stdin)
    {
        return(-1);
    fac6:	03 c0       	rjmp	.+6      	; 0xface <write+0xd4>
    fac8:	6f ef       	ldi	r22, 0xFF	; 255
    faca:	7f ef       	ldi	r23, 0xFF	; 255
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    facc:	cb 01       	movw	r24, r22
    face:	22 96       	adiw	r28, 0x02	; 2
    fad0:	ec e0       	ldi	r30, 0x0C	; 12
    fad2:	0c 94 15 e6 	jmp	0x1cc2a	; 0x1cc2a <__epilogue_restores__+0xc>

0000fad6 <fwrite>:
///
/// @return count written on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    fad6:	0f 93       	push	r16
    fad8:	1f 93       	push	r17
    fada:	cf 93       	push	r28
    fadc:	df 93       	push	r29
    fade:	ec 01       	movw	r28, r24
    fae0:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    fae2:	64 9f       	mul	r22, r20
    fae4:	80 01       	movw	r16, r0
    fae6:	65 9f       	mul	r22, r21
    fae8:	10 0d       	add	r17, r0
    faea:	74 9f       	mul	r23, r20
    faec:	10 0d       	add	r17, r0
    int fn = fileno(stream);
    faee:	11 24       	eor	r1, r1
    ssize_t ret;
    
    // write () checks for fn out of bounds
    ret =  write(fn, ptr, count);
    faf0:	5e da       	rcall	.-2884   	; 0xefae <fileno>
    faf2:	a8 01       	movw	r20, r16
    faf4:	be 01       	movw	r22, r28

    if(ret < 0)
    faf6:	81 df       	rcall	.-254    	; 0xf9fa <write>
    faf8:	97 fd       	sbrc	r25, 7
        return(0);

    return((size_t) ret);
    fafa:	02 c0       	rjmp	.+4      	; 0xfb00 <fwrite+0x2a>
    fafc:	cb 01       	movw	r24, r22
    
    // write () checks for fn out of bounds
    ret =  write(fn, ptr, count);

    if(ret < 0)
        return(0);
    fafe:	02 c0       	rjmp	.+4      	; 0xfb04 <fwrite+0x2e>
    fb00:	80 e0       	ldi	r24, 0x00	; 0

    return((size_t) ret);
}
    fb02:	90 e0       	ldi	r25, 0x00	; 0
    fb04:	df 91       	pop	r29
    fb06:	cf 91       	pop	r28
    fb08:	1f 91       	pop	r17
    fb0a:	0f 91       	pop	r16
    fb0c:	08 95       	ret

0000fb0e <free_file_descriptor>:
///
/// @return fileno on success.
/// @return -1 on failure.
MEMSPACE
int free_file_descriptor(int fileno)
{
    fb0e:	0f 93       	push	r16
    fb10:	1f 93       	push	r17
    fb12:	cf 93       	push	r28
    fb14:	df 93       	push	r29
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    fb16:	83 30       	cpi	r24, 0x03	; 3
    fb18:	91 05       	cpc	r25, r1
    fb1a:	48 f4       	brcc	.+18     	; 0xfb2e <free_file_descriptor+0x20>
    FILE *stream;
    FIL *fh;

    if(isatty( fileno ))
    {
        errno = EBADF;
    fb1c:	89 e0       	ldi	r24, 0x09	; 9
    fb1e:	90 e0       	ldi	r25, 0x00	; 0
    fb20:	90 93 be 1b 	sts	0x1BBE, r25	; 0x801bbe <errno+0x1>
    fb24:	80 93 bd 1b 	sts	0x1BBD, r24	; 0x801bbd <errno>
        return(-1);
    fb28:	8f ef       	ldi	r24, 0xFF	; 255
    fb2a:	9f ef       	ldi	r25, 0xFF	; 255
    fb2c:	20 c0       	rjmp	.+64     	; 0xfb6e <free_file_descriptor+0x60>
    }

    // checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    fb2e:	ec 01       	movw	r28, r24
    fb30:	5a da       	rcall	.-2892   	; 0xefe6 <fileno_to_stream>
    if(stream == NULL)
    fb32:	8c 01       	movw	r16, r24
    fb34:	89 2b       	or	r24, r25
    {
        return(-1);
    }

    fh = fdev_get_udata(stream);
    fb36:	c1 f3       	breq	.-16     	; 0xfb28 <free_file_descriptor+0x1a>
    fb38:	f8 01       	movw	r30, r16
    fb3a:	84 85       	ldd	r24, Z+12	; 0x0c

    if(fh != NULL)
    fb3c:	95 85       	ldd	r25, Z+13	; 0x0d
    fb3e:	00 97       	sbiw	r24, 0x00	; 0
    {
        safefree(fh);
    fb40:	11 f0       	breq	.+4      	; 0xfb46 <free_file_descriptor+0x38>
    fb42:	0e 94 d2 29 	call	0x53a4	; 0x53a4 <safefree>
    }

    if(stream->buf != NULL && stream->flags & __SMALLOC)
    fb46:	f8 01       	movw	r30, r16
    fb48:	80 81       	ld	r24, Z
    fb4a:	91 81       	ldd	r25, Z+1	; 0x01
    fb4c:	00 97       	sbiw	r24, 0x00	; 0
    fb4e:	21 f0       	breq	.+8      	; 0xfb58 <free_file_descriptor+0x4a>
    fb50:	23 81       	ldd	r18, Z+3	; 0x03
    {
        safefree(stream->buf);
    fb52:	27 fd       	sbrc	r18, 7
    fb54:	0e 94 d2 29 	call	0x53a4	; 0x53a4 <safefree>
    }

    __iob[fileno]  = NULL;
    fb58:	fe 01       	movw	r30, r28
    fb5a:	ee 0f       	add	r30, r30
    fb5c:	ff 1f       	adc	r31, r31
    fb5e:	e1 54       	subi	r30, 0x41	; 65
    fb60:	f4 4e       	sbci	r31, 0xE4	; 228
    fb62:	11 82       	std	Z+1, r1	; 0x01
    safefree(stream);
    fb64:	10 82       	st	Z, r1
    fb66:	c8 01       	movw	r24, r16
    fb68:	0e 94 d2 29 	call	0x53a4	; 0x53a4 <safefree>
    return(fileno);
}
    fb6c:	ce 01       	movw	r24, r28
    fb6e:	df 91       	pop	r29
    fb70:	cf 91       	pop	r28
    fb72:	1f 91       	pop	r17
    fb74:	0f 91       	pop	r16
    fb76:	08 95       	ret

0000fb78 <close>:
///
/// @return 0 on sucess.
/// @return -1 on error with errno set.
MEMSPACE
int close(int fileno)
{
    fb78:	0f 93       	push	r16
    fb7a:	1f 93       	push	r17
    fb7c:	cf 93       	push	r28
    fb7e:	df 93       	push	r29
    fb80:	8c 01       	movw	r16, r24
    FILE *stream;
    FIL *fh;
    int res;

    errno = 0;
    fb82:	10 92 be 1b 	sts	0x1BBE, r1	; 0x801bbe <errno+0x1>
    fb86:	10 92 bd 1b 	sts	0x1BBD, r1	; 0x801bbd <errno>

    // checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    if(stream == NULL)
    fb8a:	2d da       	rcall	.-2982   	; 0xefe6 <fileno_to_stream>
    {
        return(-1);
    }

    // fileno_to_fatfs checks for fileno out of bounds
    fh = fileno_to_fatfs(fileno);
    fb8c:	89 2b       	or	r24, r25
    fb8e:	d9 f0       	breq	.+54     	; 0xfbc6 <close+0x4e>
    if(fh == NULL)
    fb90:	c8 01       	movw	r24, r16
    fb92:	a4 dd       	rcall	.-1208   	; 0xf6dc <fileno_to_fatfs>
    {
        return(-1);
    }
    res = f_close(fh);
    fb94:	00 97       	sbiw	r24, 0x00	; 0
    fb96:	b9 f0       	breq	.+46     	; 0xfbc6 <close+0x4e>
    free_file_descriptor(fileno);
    fb98:	0e 94 6d 60 	call	0xc0da	; 0xc0da <f_close>
    fb9c:	ec 01       	movw	r28, r24
    if (res != FR_OK)
    fb9e:	c8 01       	movw	r24, r16
    fba0:	b6 df       	rcall	.-148    	; 0xfb0e <free_file_descriptor>
    fba2:	20 97       	sbiw	r28, 0x00	; 0
    fba4:	99 f0       	breq	.+38     	; 0xfbcc <close+0x54>
    fba6:	c4 31       	cpi	r28, 0x14	; 20
    fba8:	d1 05       	cpc	r29, r1
    fbaa:	38 f4       	brcc	.+14     	; 0xfbba <close+0x42>
    fbac:	c0 5f       	subi	r28, 0xF0	; 240
    fbae:	d8 4f       	sbci	r29, 0xF8	; 248
    fbb0:	88 81       	ld	r24, Y
    fbb2:	08 2e       	mov	r0, r24
    fbb4:	00 0c       	add	r0, r0
    fbb6:	99 0b       	sbc	r25, r25
    fbb8:	02 c0       	rjmp	.+4      	; 0xfbbe <close+0x46>
    {
        errno = fatfs_to_errno(res);
    fbba:	83 e2       	ldi	r24, 0x23	; 35
    fbbc:	90 e0       	ldi	r25, 0x00	; 0
    fbbe:	90 93 be 1b 	sts	0x1BBE, r25	; 0x801bbe <errno+0x1>
        return(-1);
    fbc2:	80 93 bd 1b 	sts	0x1BBD, r24	; 0x801bbd <errno>
    fbc6:	8f ef       	ldi	r24, 0xFF	; 255
    }
    return(0);
    fbc8:	9f ef       	ldi	r25, 0xFF	; 255
    fbca:	02 c0       	rjmp	.+4      	; 0xfbd0 <close+0x58>
}
    fbcc:	80 e0       	ldi	r24, 0x00	; 0
    fbce:	90 e0       	ldi	r25, 0x00	; 0
    fbd0:	df 91       	pop	r29
    fbd2:	cf 91       	pop	r28
    fbd4:	1f 91       	pop	r17
    fbd6:	0f 91       	pop	r16
    fbd8:	08 95       	ret

0000fbda <fclose>:
    fbda:	e9 d9       	rcall	.-3118   	; 0xefae <fileno>
    fbdc:	97 fd       	sbrc	r25, 7
    fbde:	02 c0       	rjmp	.+4      	; 0xfbe4 <fclose+0xa>
    fbe0:	cb cf       	rjmp	.-106    	; 0xfb78 <close>
    fbe2:	08 95       	ret
    fbe4:	8f ef       	ldi	r24, 0xFF	; 255
    fbe6:	9f ef       	ldi	r25, 0xFF	; 255
    fbe8:	08 95       	ret

0000fbea <new_file_descriptor>:
    fbea:	0f 93       	push	r16
    fbec:	1f 93       	push	r17
    fbee:	cf 93       	push	r28
    fbf0:	df 93       	push	r29
    fbf2:	ef eb       	ldi	r30, 0xBF	; 191
    fbf4:	fb e1       	ldi	r31, 0x1B	; 27
    fbf6:	c0 e0       	ldi	r28, 0x00	; 0
    fbf8:	d0 e0       	ldi	r29, 0x00	; 0
    fbfa:	21 96       	adiw	r28, 0x01	; 1
    fbfc:	c0 31       	cpi	r28, 0x10	; 16
    fbfe:	d1 05       	cpc	r29, r1
    fc00:	49 f0       	breq	.+18     	; 0xfc14 <new_file_descriptor+0x2a>
    fc02:	c3 30       	cpi	r28, 0x03	; 3
    fc04:	d1 05       	cpc	r29, r1
    fc06:	24 f0       	brlt	.+8      	; 0xfc10 <new_file_descriptor+0x26>
    fc08:	82 81       	ldd	r24, Z+2	; 0x02
    fc0a:	93 81       	ldd	r25, Z+3	; 0x03
    fc0c:	89 2b       	or	r24, r25
    fc0e:	59 f0       	breq	.+22     	; 0xfc26 <new_file_descriptor+0x3c>
    fc10:	32 96       	adiw	r30, 0x02	; 2
    fc12:	f3 cf       	rjmp	.-26     	; 0xfbfa <new_file_descriptor+0x10>
    fc14:	87 e1       	ldi	r24, 0x17	; 23
    fc16:	90 e0       	ldi	r25, 0x00	; 0
    fc18:	90 93 be 1b 	sts	0x1BBE, r25	; 0x801bbe <errno+0x1>
    fc1c:	80 93 bd 1b 	sts	0x1BBD, r24	; 0x801bbd <errno>
    fc20:	8f ef       	ldi	r24, 0xFF	; 255
    fc22:	9f ef       	ldi	r25, 0xFF	; 255
    fc24:	22 c0       	rjmp	.+68     	; 0xfc6a <new_file_descriptor+0x80>
    fc26:	61 e0       	ldi	r22, 0x01	; 1
    fc28:	70 e0       	ldi	r23, 0x00	; 0
    fc2a:	8e e0       	ldi	r24, 0x0E	; 14
    fc2c:	90 e0       	ldi	r25, 0x00	; 0
    fc2e:	0e 94 89 29 	call	0x5312	; 0x5312 <safecalloc>
    fc32:	8c 01       	movw	r16, r24
    fc34:	89 2b       	or	r24, r25
    fc36:	59 f0       	breq	.+22     	; 0xfc4e <new_file_descriptor+0x64>
    fc38:	61 e0       	ldi	r22, 0x01	; 1
    fc3a:	70 e0       	ldi	r23, 0x00	; 0
    fc3c:	84 e2       	ldi	r24, 0x24	; 36
    fc3e:	92 e0       	ldi	r25, 0x02	; 2
    fc40:	0e 94 89 29 	call	0x5312	; 0x5312 <safecalloc>
    fc44:	00 97       	sbiw	r24, 0x00	; 0
    fc46:	31 f4       	brne	.+12     	; 0xfc54 <new_file_descriptor+0x6a>
    fc48:	c8 01       	movw	r24, r16
    fc4a:	0e 94 d2 29 	call	0x53a4	; 0x53a4 <safefree>
    fc4e:	8c e0       	ldi	r24, 0x0C	; 12
    fc50:	90 e0       	ldi	r25, 0x00	; 0
    fc52:	e2 cf       	rjmp	.-60     	; 0xfc18 <new_file_descriptor+0x2e>
    fc54:	fe 01       	movw	r30, r28
    fc56:	ee 0f       	add	r30, r30
    fc58:	ff 1f       	adc	r31, r31
    fc5a:	e1 54       	subi	r30, 0x41	; 65
    fc5c:	f4 4e       	sbci	r31, 0xE4	; 228
    fc5e:	11 83       	std	Z+1, r17	; 0x01
    fc60:	00 83       	st	Z, r16
    fc62:	f8 01       	movw	r30, r16
    fc64:	95 87       	std	Z+13, r25	; 0x0d
    fc66:	84 87       	std	Z+12, r24	; 0x0c
    fc68:	ce 01       	movw	r24, r28
    fc6a:	df 91       	pop	r29
    fc6c:	cf 91       	pop	r28
    fc6e:	1f 91       	pop	r17
    fc70:	0f 91       	pop	r16
    fc72:	08 95       	ret

0000fc74 <open>:
    fc74:	a0 e0       	ldi	r26, 0x00	; 0
    fc76:	b0 e0       	ldi	r27, 0x00	; 0
    fc78:	e0 e4       	ldi	r30, 0x40	; 64
    fc7a:	fe e7       	ldi	r31, 0x7E	; 126
    fc7c:	0c 94 f7 e5 	jmp	0x1cbee	; 0x1cbee <__prologue_saves__+0x8>
    fc80:	5c 01       	movw	r10, r24
    fc82:	6b 01       	movw	r12, r22
    fc84:	10 92 be 1b 	sts	0x1BBE, r1	; 0x801bbe <errno+0x1>
    fc88:	10 92 bd 1b 	sts	0x1BBD, r1	; 0x801bbd <errno>
    fc8c:	7b 01       	movw	r14, r22
    fc8e:	83 e0       	ldi	r24, 0x03	; 3
    fc90:	e8 22       	and	r14, r24
    fc92:	ff 24       	eor	r15, r15
    fc94:	e2 e0       	ldi	r30, 0x02	; 2
    fc96:	ee 16       	cp	r14, r30
    fc98:	f1 04       	cpc	r15, r1
    fc9a:	31 f0       	breq	.+12     	; 0xfca8 <open+0x34>
    fc9c:	e1 14       	cp	r14, r1
    fc9e:	f1 04       	cpc	r15, r1
    fca0:	31 f0       	breq	.+12     	; 0xfcae <open+0x3a>
    fca2:	02 e0       	ldi	r16, 0x02	; 2
    fca4:	10 e0       	ldi	r17, 0x00	; 0
    fca6:	05 c0       	rjmp	.+10     	; 0xfcb2 <open+0x3e>
    fca8:	03 e0       	ldi	r16, 0x03	; 3
    fcaa:	10 e0       	ldi	r17, 0x00	; 0
    fcac:	02 c0       	rjmp	.+4      	; 0xfcb2 <open+0x3e>
    fcae:	01 e0       	ldi	r16, 0x01	; 1
    fcb0:	10 e0       	ldi	r17, 0x00	; 0
    fcb2:	c6 fe       	sbrs	r12, 6
    fcb4:	05 c0       	rjmp	.+10     	; 0xfcc0 <open+0x4c>
    fcb6:	d1 fe       	sbrs	r13, 1
    fcb8:	02 c0       	rjmp	.+4      	; 0xfcbe <open+0x4a>
    fcba:	08 60       	ori	r16, 0x08	; 8
    fcbc:	01 c0       	rjmp	.+2      	; 0xfcc0 <open+0x4c>
    fcbe:	00 61       	ori	r16, 0x10	; 16
    fcc0:	94 df       	rcall	.-216    	; 0xfbea <new_file_descriptor>
    fcc2:	3c 01       	movw	r6, r24
    fcc4:	90 d9       	rcall	.-3296   	; 0xefe6 <fileno_to_stream>
    fcc6:	ec 01       	movw	r28, r24
    fcc8:	c3 01       	movw	r24, r6
    fcca:	20 97       	sbiw	r28, 0x00	; 0
    fccc:	09 f4       	brne	.+2      	; 0xfcd0 <open+0x5c>
    fcce:	48 c0       	rjmp	.+144    	; 0xfd60 <open+0xec>
    fcd0:	05 dd       	rcall	.-1526   	; 0xf6dc <fileno_to_fatfs>
    fcd2:	4c 01       	movw	r8, r24
    fcd4:	00 97       	sbiw	r24, 0x00	; 0
    fcd6:	59 f4       	brne	.+22     	; 0xfcee <open+0x7a>
    fcd8:	c3 01       	movw	r24, r6
    fcda:	19 df       	rcall	.-462    	; 0xfb0e <free_file_descriptor>
    fcdc:	89 e0       	ldi	r24, 0x09	; 9
    fcde:	90 e0       	ldi	r25, 0x00	; 0
    fce0:	90 93 be 1b 	sts	0x1BBE, r25	; 0x801bbe <errno+0x1>
    fce4:	80 93 bd 1b 	sts	0x1BBD, r24	; 0x801bbd <errno>
    fce8:	8f ef       	ldi	r24, 0xFF	; 255
    fcea:	9f ef       	ldi	r25, 0xFF	; 255
    fcec:	5d c0       	rjmp	.+186    	; 0xfda8 <open+0x134>
    fcee:	40 2f       	mov	r20, r16
    fcf0:	b5 01       	movw	r22, r10
    fcf2:	0e 94 50 5b 	call	0xb6a0	; 0xb6a0 <f_open>
    fcf6:	00 97       	sbiw	r24, 0x00	; 0
    fcf8:	91 f0       	breq	.+36     	; 0xfd1e <open+0xaa>
    fcfa:	84 31       	cpi	r24, 0x14	; 20
    fcfc:	91 05       	cpc	r25, r1
    fcfe:	40 f4       	brcc	.+16     	; 0xfd10 <open+0x9c>
    fd00:	fc 01       	movw	r30, r24
    fd02:	e0 5f       	subi	r30, 0xF0	; 240
    fd04:	f8 4f       	sbci	r31, 0xF8	; 248
    fd06:	80 81       	ld	r24, Z
    fd08:	08 2e       	mov	r0, r24
    fd0a:	00 0c       	add	r0, r0
    fd0c:	99 0b       	sbc	r25, r25
    fd0e:	02 c0       	rjmp	.+4      	; 0xfd14 <open+0xa0>
    fd10:	83 e2       	ldi	r24, 0x23	; 35
    fd12:	90 e0       	ldi	r25, 0x00	; 0
    fd14:	90 93 be 1b 	sts	0x1BBE, r25	; 0x801bbe <errno+0x1>
    fd18:	80 93 bd 1b 	sts	0x1BBD, r24	; 0x801bbd <errno>
    fd1c:	20 c0       	rjmp	.+64     	; 0xfd5e <open+0xea>
    fd1e:	d2 fe       	sbrs	r13, 2
    fd20:	21 c0       	rjmp	.+66     	; 0xfd64 <open+0xf0>
    fd22:	f4 01       	movw	r30, r8
    fd24:	42 85       	ldd	r20, Z+10	; 0x0a
    fd26:	53 85       	ldd	r21, Z+11	; 0x0b
    fd28:	64 85       	ldd	r22, Z+12	; 0x0c
    fd2a:	75 85       	ldd	r23, Z+13	; 0x0d
    fd2c:	c4 01       	movw	r24, r8
    fd2e:	0e 94 17 62 	call	0xc42e	; 0xc42e <f_lseek>
    fd32:	00 97       	sbiw	r24, 0x00	; 0
    fd34:	b9 f0       	breq	.+46     	; 0xfd64 <open+0xf0>
    fd36:	84 31       	cpi	r24, 0x14	; 20
    fd38:	91 05       	cpc	r25, r1
    fd3a:	40 f4       	brcc	.+16     	; 0xfd4c <open+0xd8>
    fd3c:	fc 01       	movw	r30, r24
    fd3e:	e0 5f       	subi	r30, 0xF0	; 240
    fd40:	f8 4f       	sbci	r31, 0xF8	; 248
    fd42:	80 81       	ld	r24, Z
    fd44:	08 2e       	mov	r0, r24
    fd46:	00 0c       	add	r0, r0
    fd48:	99 0b       	sbc	r25, r25
    fd4a:	02 c0       	rjmp	.+4      	; 0xfd50 <open+0xdc>
    fd4c:	83 e2       	ldi	r24, 0x23	; 35
    fd4e:	90 e0       	ldi	r25, 0x00	; 0
    fd50:	90 93 be 1b 	sts	0x1BBE, r25	; 0x801bbe <errno+0x1>
    fd54:	80 93 bd 1b 	sts	0x1BBD, r24	; 0x801bbd <errno>
    fd58:	c4 01       	movw	r24, r8
    fd5a:	0e 94 6d 60 	call	0xc0da	; 0xc0da <f_close>
    fd5e:	c3 01       	movw	r24, r6
    fd60:	d6 de       	rcall	.-596    	; 0xfb0e <free_file_descriptor>
    fd62:	c2 cf       	rjmp	.-124    	; 0xfce8 <open+0x74>
    fd64:	f2 e0       	ldi	r31, 0x02	; 2
    fd66:	ef 16       	cp	r14, r31
    fd68:	f1 04       	cpc	r15, r1
    fd6a:	51 f4       	brne	.+20     	; 0xfd80 <open+0x10c>
    fd6c:	82 e7       	ldi	r24, 0x72	; 114
    fd6e:	96 e7       	ldi	r25, 0x76	; 118
    fd70:	99 87       	std	Y+9, r25	; 0x09
    fd72:	88 87       	std	Y+8, r24	; 0x08
    fd74:	8f ee       	ldi	r24, 0xEF	; 239
    fd76:	95 e7       	ldi	r25, 0x75	; 117
    fd78:	9b 87       	std	Y+11, r25	; 0x0b
    fd7a:	8a 87       	std	Y+10, r24	; 0x0a
    fd7c:	83 e0       	ldi	r24, 0x03	; 3
    fd7e:	12 c0       	rjmp	.+36     	; 0xfda4 <open+0x130>
    fd80:	e1 14       	cp	r14, r1
    fd82:	f1 04       	cpc	r15, r1
    fd84:	41 f4       	brne	.+16     	; 0xfd96 <open+0x122>
    fd86:	19 86       	std	Y+9, r1	; 0x09
    fd88:	18 86       	std	Y+8, r1	; 0x08
    fd8a:	8f ee       	ldi	r24, 0xEF	; 239
    fd8c:	95 e7       	ldi	r25, 0x75	; 117
    fd8e:	9b 87       	std	Y+11, r25	; 0x0b
    fd90:	8a 87       	std	Y+10, r24	; 0x0a
    fd92:	81 e0       	ldi	r24, 0x01	; 1
    fd94:	07 c0       	rjmp	.+14     	; 0xfda4 <open+0x130>
    fd96:	82 e7       	ldi	r24, 0x72	; 114
    fd98:	96 e7       	ldi	r25, 0x76	; 118
    fd9a:	99 87       	std	Y+9, r25	; 0x09
    fd9c:	88 87       	std	Y+8, r24	; 0x08
    fd9e:	1b 86       	std	Y+11, r1	; 0x0b
    fda0:	1a 86       	std	Y+10, r1	; 0x0a
    fda2:	82 e0       	ldi	r24, 0x02	; 2
    fda4:	8b 83       	std	Y+3, r24	; 0x03
    fda6:	c3 01       	movw	r24, r6
    fda8:	cd b7       	in	r28, 0x3d	; 61
    fdaa:	de b7       	in	r29, 0x3e	; 62
    fdac:	ee e0       	ldi	r30, 0x0E	; 14
    fdae:	0c 94 13 e6 	jmp	0x1cc26	; 0x1cc26 <__epilogue_restores__+0x8>

0000fdb2 <posix_fopen_modes_to_open>:
    fdb2:	cf 93       	push	r28
    fdb4:	df 93       	push	r29
    fdb6:	ec 01       	movw	r28, r24
    fdb8:	61 e4       	ldi	r22, 0x41	; 65
    fdba:	77 e0       	ldi	r23, 0x07	; 7
    fdbc:	0e 94 ca 32 	call	0x6594	; 0x6594 <strcmp>
    fdc0:	00 97       	sbiw	r24, 0x00	; 0
    fdc2:	09 f4       	brne	.+2      	; 0xfdc6 <posix_fopen_modes_to_open+0x14>
    fdc4:	5d c0       	rjmp	.+186    	; 0xfe80 <posix_fopen_modes_to_open+0xce>
    fdc6:	66 e8       	ldi	r22, 0x86	; 134
    fdc8:	78 e0       	ldi	r23, 0x08	; 8
    fdca:	ce 01       	movw	r24, r28
    fdcc:	0e 94 ca 32 	call	0x6594	; 0x6594 <strcmp>
    fdd0:	00 97       	sbiw	r24, 0x00	; 0
    fdd2:	09 f4       	brne	.+2      	; 0xfdd6 <posix_fopen_modes_to_open+0x24>
    fdd4:	55 c0       	rjmp	.+170    	; 0xfe80 <posix_fopen_modes_to_open+0xce>
    fdd6:	69 e8       	ldi	r22, 0x89	; 137
    fdd8:	78 e0       	ldi	r23, 0x08	; 8
    fdda:	ce 01       	movw	r24, r28
    fddc:	0e 94 ca 32 	call	0x6594	; 0x6594 <strcmp>
    fde0:	89 2b       	or	r24, r25
    fde2:	09 f4       	brne	.+2      	; 0xfde6 <posix_fopen_modes_to_open+0x34>
    fde4:	42 c0       	rjmp	.+132    	; 0xfe6a <posix_fopen_modes_to_open+0xb8>
    fde6:	6c e8       	ldi	r22, 0x8C	; 140
    fde8:	78 e0       	ldi	r23, 0x08	; 8
    fdea:	ce 01       	movw	r24, r28
    fdec:	0e 94 ca 32 	call	0x6594	; 0x6594 <strcmp>
    fdf0:	89 2b       	or	r24, r25
    fdf2:	d9 f1       	breq	.+118    	; 0xfe6a <posix_fopen_modes_to_open+0xb8>
    fdf4:	60 e9       	ldi	r22, 0x90	; 144
    fdf6:	78 e0       	ldi	r23, 0x08	; 8
    fdf8:	ce 01       	movw	r24, r28
    fdfa:	0e 94 ca 32 	call	0x6594	; 0x6594 <strcmp>
    fdfe:	89 2b       	or	r24, r25
    fe00:	a1 f1       	breq	.+104    	; 0xfe6a <posix_fopen_modes_to_open+0xb8>
    fe02:	65 e4       	ldi	r22, 0x45	; 69
    fe04:	7a e0       	ldi	r23, 0x0A	; 10
    fe06:	ce 01       	movw	r24, r28
    fe08:	0e 94 ca 32 	call	0x6594	; 0x6594 <strcmp>
    fe0c:	89 2b       	or	r24, r25
    fe0e:	81 f1       	breq	.+96     	; 0xfe70 <posix_fopen_modes_to_open+0xbe>
    fe10:	64 e9       	ldi	r22, 0x94	; 148
    fe12:	78 e0       	ldi	r23, 0x08	; 8
    fe14:	ce 01       	movw	r24, r28
    fe16:	0e 94 ca 32 	call	0x6594	; 0x6594 <strcmp>
    fe1a:	89 2b       	or	r24, r25
    fe1c:	49 f1       	breq	.+82     	; 0xfe70 <posix_fopen_modes_to_open+0xbe>
    fe1e:	67 e9       	ldi	r22, 0x97	; 151
    fe20:	78 e0       	ldi	r23, 0x08	; 8
    fe22:	ce 01       	movw	r24, r28
    fe24:	0e 94 ca 32 	call	0x6594	; 0x6594 <strcmp>
    fe28:	89 2b       	or	r24, r25
    fe2a:	29 f1       	breq	.+74     	; 0xfe76 <posix_fopen_modes_to_open+0xc4>
    fe2c:	6a e9       	ldi	r22, 0x9A	; 154
    fe2e:	78 e0       	ldi	r23, 0x08	; 8
    fe30:	ce 01       	movw	r24, r28
    fe32:	0e 94 ca 32 	call	0x6594	; 0x6594 <strcmp>
    fe36:	89 2b       	or	r24, r25
    fe38:	f1 f0       	breq	.+60     	; 0xfe76 <posix_fopen_modes_to_open+0xc4>
    fe3a:	6e e9       	ldi	r22, 0x9E	; 158
    fe3c:	78 e0       	ldi	r23, 0x08	; 8
    fe3e:	ce 01       	movw	r24, r28
    fe40:	0e 94 ca 32 	call	0x6594	; 0x6594 <strcmp>
    fe44:	89 2b       	or	r24, r25
    fe46:	b9 f0       	breq	.+46     	; 0xfe76 <posix_fopen_modes_to_open+0xc4>
    fe48:	67 e7       	ldi	r22, 0x77	; 119
    fe4a:	72 e1       	ldi	r23, 0x12	; 18
    fe4c:	ce 01       	movw	r24, r28
    fe4e:	0e 94 ca 32 	call	0x6594	; 0x6594 <strcmp>
    fe52:	89 2b       	or	r24, r25
    fe54:	99 f0       	breq	.+38     	; 0xfe7c <posix_fopen_modes_to_open+0xca>
    fe56:	62 ea       	ldi	r22, 0xA2	; 162
    fe58:	78 e0       	ldi	r23, 0x08	; 8
    fe5a:	ce 01       	movw	r24, r28
    fe5c:	0e 94 ca 32 	call	0x6594	; 0x6594 <strcmp>
    fe60:	89 2b       	or	r24, r25
    fe62:	61 f0       	breq	.+24     	; 0xfe7c <posix_fopen_modes_to_open+0xca>
    fe64:	8f ef       	ldi	r24, 0xFF	; 255
    fe66:	9f ef       	ldi	r25, 0xFF	; 255
    fe68:	0b c0       	rjmp	.+22     	; 0xfe80 <posix_fopen_modes_to_open+0xce>
    fe6a:	82 e0       	ldi	r24, 0x02	; 2
    fe6c:	92 e0       	ldi	r25, 0x02	; 2
    fe6e:	08 c0       	rjmp	.+16     	; 0xfe80 <posix_fopen_modes_to_open+0xce>
    fe70:	81 e4       	ldi	r24, 0x41	; 65
    fe72:	92 e0       	ldi	r25, 0x02	; 2
    fe74:	05 c0       	rjmp	.+10     	; 0xfe80 <posix_fopen_modes_to_open+0xce>
    fe76:	82 e4       	ldi	r24, 0x42	; 66
    fe78:	92 e0       	ldi	r25, 0x02	; 2
    fe7a:	02 c0       	rjmp	.+4      	; 0xfe80 <posix_fopen_modes_to_open+0xce>
    fe7c:	81 e4       	ldi	r24, 0x41	; 65
    fe7e:	94 e0       	ldi	r25, 0x04	; 4
    fe80:	df 91       	pop	r29
    fe82:	cf 91       	pop	r28
    fe84:	08 95       	ret

0000fe86 <fopen>:
    fe86:	cf 93       	push	r28
    fe88:	df 93       	push	r29
    fe8a:	ec 01       	movw	r28, r24
    fe8c:	cb 01       	movw	r24, r22
    fe8e:	91 df       	rcall	.-222    	; 0xfdb2 <posix_fopen_modes_to_open>
    fe90:	bc 01       	movw	r22, r24
    fe92:	ce 01       	movw	r24, r28
    fe94:	ef de       	rcall	.-546    	; 0xfc74 <open>
    fe96:	a7 d8       	rcall	.-3762   	; 0xefe6 <fileno_to_stream>
    fe98:	df 91       	pop	r29
    fe9a:	cf 91       	pop	r28
    fe9c:	08 95       	ret

0000fe9e <fprintf>:
    fe9e:	a8 e0       	ldi	r26, 0x08	; 8
    fea0:	b0 e0       	ldi	r27, 0x00	; 0
    fea2:	e5 e5       	ldi	r30, 0x55	; 85
    fea4:	ff e7       	ldi	r31, 0x7F	; 127
    fea6:	0c 94 03 e6 	jmp	0x1cc06	; 0x1cc06 <__prologue_saves__+0x20>
    feaa:	8b e5       	ldi	r24, 0x5B	; 91
    feac:	97 e7       	ldi	r25, 0x77	; 119
    feae:	9a 83       	std	Y+2, r25	; 0x02
    feb0:	89 83       	std	Y+1, r24	; 0x01
    feb2:	18 86       	std	Y+8, r1	; 0x08
    feb4:	1f 82       	std	Y+7, r1	; 0x07
    feb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    feb8:	9e 85       	ldd	r25, Y+14	; 0x0e
    feba:	9c 83       	std	Y+4, r25	; 0x04
    febc:	8b 83       	std	Y+3, r24	; 0x03
    febe:	4f 85       	ldd	r20, Y+15	; 0x0f
    fec0:	58 89       	ldd	r21, Y+16	; 0x10
    fec2:	60 e8       	ldi	r22, 0x80	; 128
    fec4:	9e 01       	movw	r18, r28
    fec6:	2f 5e       	subi	r18, 0xEF	; 239
    fec8:	3f 4f       	sbci	r19, 0xFF	; 255
    feca:	ce 01       	movw	r24, r28
    fecc:	01 96       	adiw	r24, 0x01	; 1
    fece:	0e 94 f6 42 	call	0x85ec	; 0x85ec <_printf_fn>
    fed2:	8f 81       	ldd	r24, Y+7	; 0x07
    fed4:	98 85       	ldd	r25, Y+8	; 0x08
    fed6:	28 96       	adiw	r28, 0x08	; 8
    fed8:	e2 e0       	ldi	r30, 0x02	; 2
    feda:	0c 94 1f e6 	jmp	0x1cc3e	; 0x1cc3e <__epilogue_restores__+0x20>

0000fede <posix_help>:
    fede:	cf 93       	push	r28
    fee0:	df 93       	push	r29
    fee2:	ec 01       	movw	r28, r24
    fee4:	82 ea       	ldi	r24, 0xA2	; 162
    fee6:	9e e0       	ldi	r25, 0x0E	; 14
    fee8:	1f 92       	push	r1
    feea:	9f 93       	push	r25
    feec:	8f 93       	push	r24
    feee:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    fef2:	0f 90       	pop	r0
    fef4:	0f 90       	pop	r0
    fef6:	0f 90       	pop	r0
    fef8:	cd 2b       	or	r28, r29
    fefa:	51 f0       	breq	.+20     	; 0xff10 <__DATA_REGION_LENGTH__+0x10>
    fefc:	82 ee       	ldi	r24, 0xE2	; 226
    fefe:	9d e0       	ldi	r25, 0x0D	; 13
    ff00:	1f 92       	push	r1
    ff02:	9f 93       	push	r25
    ff04:	8f 93       	push	r24
    ff06:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    ff0a:	0f 90       	pop	r0
    ff0c:	0f 90       	pop	r0
    ff0e:	0f 90       	pop	r0
    ff10:	df 91       	pop	r29
    ff12:	cf 91       	pop	r28
    ff14:	08 95       	ret

0000ff16 <copy>:
    ff16:	4f 92       	push	r4
    ff18:	5f 92       	push	r5
    ff1a:	6f 92       	push	r6
    ff1c:	8f 92       	push	r8
    ff1e:	9f 92       	push	r9
    ff20:	af 92       	push	r10
    ff22:	bf 92       	push	r11
    ff24:	cf 92       	push	r12
    ff26:	df 92       	push	r13
    ff28:	ef 92       	push	r14
    ff2a:	ff 92       	push	r15
    ff2c:	0f 93       	push	r16
    ff2e:	1f 93       	push	r17
    ff30:	cf 93       	push	r28
    ff32:	df 93       	push	r29
    ff34:	18 2f       	mov	r17, r24
    ff36:	09 2f       	mov	r16, r25
    ff38:	eb 01       	movw	r28, r22
    ff3a:	9f 93       	push	r25
    ff3c:	8f 93       	push	r24
    ff3e:	85 eb       	ldi	r24, 0xB5	; 181
    ff40:	9d e0       	ldi	r25, 0x0D	; 13
    ff42:	1f 92       	push	r1
    ff44:	9f 93       	push	r25
    ff46:	8f 93       	push	r24
    ff48:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    ff4c:	66 e8       	ldi	r22, 0x86	; 134
    ff4e:	78 e0       	ldi	r23, 0x08	; 8
    ff50:	81 2f       	mov	r24, r17
    ff52:	90 2f       	mov	r25, r16
    ff54:	98 df       	rcall	.-208    	; 0xfe86 <fopen>
    ff56:	7c 01       	movw	r14, r24
    ff58:	0f 90       	pop	r0
    ff5a:	0f 90       	pop	r0
    ff5c:	0f 90       	pop	r0
    ff5e:	0f 90       	pop	r0
    ff60:	0f 90       	pop	r0
    ff62:	89 2b       	or	r24, r25
    ff64:	51 f4       	brne	.+20     	; 0xff7a <copy+0x64>
    ff66:	0f 93       	push	r16
    ff68:	1f 93       	push	r17
    ff6a:	85 ea       	ldi	r24, 0xA5	; 165
    ff6c:	9d e0       	ldi	r25, 0x0D	; 13
    ff6e:	1f 92       	push	r1
    ff70:	9f 93       	push	r25
    ff72:	8f 93       	push	r24
    ff74:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    ff78:	21 c0       	rjmp	.+66     	; 0xffbc <copy+0xa6>
    ff7a:	df 93       	push	r29
    ff7c:	cf 93       	push	r28
    ff7e:	88 e9       	ldi	r24, 0x98	; 152
    ff80:	9d e0       	ldi	r25, 0x0D	; 13
    ff82:	1f 92       	push	r1
    ff84:	9f 93       	push	r25
    ff86:	8f 93       	push	r24
    ff88:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    ff8c:	64 e9       	ldi	r22, 0x94	; 148
    ff8e:	78 e0       	ldi	r23, 0x08	; 8
    ff90:	ce 01       	movw	r24, r28
    ff92:	79 df       	rcall	.-270    	; 0xfe86 <fopen>
    ff94:	8c 01       	movw	r16, r24
    ff96:	0f 90       	pop	r0
    ff98:	0f 90       	pop	r0
    ff9a:	0f 90       	pop	r0
    ff9c:	0f 90       	pop	r0
    ff9e:	0f 90       	pop	r0
    ffa0:	89 2b       	or	r24, r25
    ffa2:	b1 f4       	brne	.+44     	; 0xffd0 <copy+0xba>
    ffa4:	df 93       	push	r29
    ffa6:	cf 93       	push	r28
    ffa8:	88 e8       	ldi	r24, 0x88	; 136
    ffaa:	9d e0       	ldi	r25, 0x0D	; 13
    ffac:	1f 92       	push	r1
    ffae:	9f 93       	push	r25
    ffb0:	8f 93       	push	r24
    ffb2:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    ffb6:	80 e0       	ldi	r24, 0x00	; 0
    ffb8:	90 e0       	ldi	r25, 0x00	; 0
    ffba:	0f de       	rcall	.-994    	; 0xfbda <fclose>
    ffbc:	0f 90       	pop	r0
    ffbe:	0f 90       	pop	r0
    ffc0:	0f 90       	pop	r0
    ffc2:	0f 90       	pop	r0
    ffc4:	0f 90       	pop	r0
    ffc6:	60 e0       	ldi	r22, 0x00	; 0
    ffc8:	70 e0       	ldi	r23, 0x00	; 0
    ffca:	80 e0       	ldi	r24, 0x00	; 0
    ffcc:	90 e0       	ldi	r25, 0x00	; 0
    ffce:	73 c0       	rjmp	.+230    	; 0x100b6 <__EEPROM_REGION_LENGTH__+0xb6>
    ffd0:	61 e0       	ldi	r22, 0x01	; 1
    ffd2:	70 e0       	ldi	r23, 0x00	; 0
    ffd4:	80 e0       	ldi	r24, 0x00	; 0
    ffd6:	92 e0       	ldi	r25, 0x02	; 2
    ffd8:	0e 94 89 29 	call	0x5312	; 0x5312 <safecalloc>
    ffdc:	6c 01       	movw	r12, r24
    ffde:	89 2b       	or	r24, r25
    ffe0:	29 f4       	brne	.+10     	; 0xffec <copy+0xd6>
    ffe2:	c7 01       	movw	r24, r14
    ffe4:	fa dd       	rcall	.-1036   	; 0xfbda <fclose>
    ffe6:	c8 01       	movw	r24, r16
    ffe8:	f8 dd       	rcall	.-1040   	; 0xfbda <fclose>
    ffea:	ed cf       	rjmp	.-38     	; 0xffc6 <copy+0xb0>
    ffec:	8b e7       	ldi	r24, 0x7B	; 123
    ffee:	9d e0       	ldi	r25, 0x0D	; 13
    fff0:	1f 92       	push	r1
    fff2:	9f 93       	push	r25
    fff4:	8f 93       	push	r24
    fff6:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    fffa:	0f 90       	pop	r0
    fffc:	0f 90       	pop	r0
    fffe:	0f 90       	pop	r0
   10000:	81 2c       	mov	r8, r1
   10002:	91 2c       	mov	r9, r1
   10004:	54 01       	movw	r10, r8
   10006:	8f e5       	ldi	r24, 0x5F	; 95
   10008:	9d e0       	ldi	r25, 0x0D	; 13
   1000a:	2c 01       	movw	r4, r24
   1000c:	97 01       	movw	r18, r14
   1000e:	40 e0       	ldi	r20, 0x00	; 0
   10010:	52 e0       	ldi	r21, 0x02	; 2
   10012:	61 e0       	ldi	r22, 0x01	; 1
   10014:	70 e0       	ldi	r23, 0x00	; 0
   10016:	c6 01       	movw	r24, r12
   10018:	8c dc       	rcall	.-1768   	; 0xf932 <fread>
   1001a:	ec 01       	movw	r28, r24
   1001c:	18 16       	cp	r1, r24
   1001e:	19 06       	cpc	r1, r25
   10020:	74 f5       	brge	.+92     	; 0x1007e <__EEPROM_REGION_LENGTH__+0x7e>
   10022:	98 01       	movw	r18, r16
   10024:	ae 01       	movw	r20, r28
   10026:	61 e0       	ldi	r22, 0x01	; 1
   10028:	70 e0       	ldi	r23, 0x00	; 0
   1002a:	c6 01       	movw	r24, r12
   1002c:	54 dd       	rcall	.-1368   	; 0xfad6 <fwrite>
   1002e:	8c 17       	cp	r24, r28
   10030:	9d 07       	cpc	r25, r29
   10032:	5c f4       	brge	.+22     	; 0x1004a <__EEPROM_REGION_LENGTH__+0x4a>
   10034:	8e e6       	ldi	r24, 0x6E	; 110
   10036:	9d e0       	ldi	r25, 0x0D	; 13
   10038:	1f 92       	push	r1
   1003a:	9f 93       	push	r25
   1003c:	8f 93       	push	r24
   1003e:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   10042:	0f 90       	pop	r0
   10044:	0f 90       	pop	r0
   10046:	0f 90       	pop	r0
   10048:	1a c0       	rjmp	.+52     	; 0x1007e <__EEPROM_REGION_LENGTH__+0x7e>
   1004a:	ce 01       	movw	r24, r28
   1004c:	dd 0f       	add	r29, r29
   1004e:	aa 0b       	sbc	r26, r26
   10050:	bb 0b       	sbc	r27, r27
   10052:	88 0e       	add	r8, r24
   10054:	99 1e       	adc	r9, r25
   10056:	aa 1e       	adc	r10, r26
   10058:	bb 1e       	adc	r11, r27
   1005a:	bf 92       	push	r11
   1005c:	af 92       	push	r10
   1005e:	9f 92       	push	r9
   10060:	8f 92       	push	r8
   10062:	1f 92       	push	r1
   10064:	5f 92       	push	r5
   10066:	4f 92       	push	r4
   10068:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1006c:	8d b7       	in	r24, 0x3d	; 61
   1006e:	9e b7       	in	r25, 0x3e	; 62
   10070:	07 96       	adiw	r24, 0x07	; 7
   10072:	0f b6       	in	r0, 0x3f	; 63
   10074:	f8 94       	cli
   10076:	9e bf       	out	0x3e, r25	; 62
   10078:	0f be       	out	0x3f, r0	; 63
   1007a:	8d bf       	out	0x3d, r24	; 61
   1007c:	c7 cf       	rjmp	.-114    	; 0x1000c <__EEPROM_REGION_LENGTH__+0xc>
   1007e:	bf 92       	push	r11
   10080:	af 92       	push	r10
   10082:	9f 92       	push	r9
   10084:	8f 92       	push	r8
   10086:	8c e4       	ldi	r24, 0x4C	; 76
   10088:	9d e0       	ldi	r25, 0x0D	; 13
   1008a:	1f 92       	push	r1
   1008c:	9f 93       	push	r25
   1008e:	8f 93       	push	r24
   10090:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   10094:	c6 01       	movw	r24, r12
   10096:	0e 94 d2 29 	call	0x53a4	; 0x53a4 <safefree>
   1009a:	c7 01       	movw	r24, r14
   1009c:	9e dd       	rcall	.-1220   	; 0xfbda <fclose>
   1009e:	c8 01       	movw	r24, r16
   100a0:	9c dd       	rcall	.-1224   	; 0xfbda <fclose>
   100a2:	8d b7       	in	r24, 0x3d	; 61
   100a4:	9e b7       	in	r25, 0x3e	; 62
   100a6:	07 96       	adiw	r24, 0x07	; 7
   100a8:	0f b6       	in	r0, 0x3f	; 63
   100aa:	f8 94       	cli
   100ac:	9e bf       	out	0x3e, r25	; 62
   100ae:	0f be       	out	0x3f, r0	; 63
   100b0:	8d bf       	out	0x3d, r24	; 61
   100b2:	b4 01       	movw	r22, r8
   100b4:	c5 01       	movw	r24, r10
   100b6:	df 91       	pop	r29
   100b8:	cf 91       	pop	r28
   100ba:	1f 91       	pop	r17
   100bc:	0f 91       	pop	r16
   100be:	ff 90       	pop	r15
   100c0:	ef 90       	pop	r14
   100c2:	df 90       	pop	r13
   100c4:	cf 90       	pop	r12
   100c6:	bf 90       	pop	r11
   100c8:	af 90       	pop	r10
   100ca:	9f 90       	pop	r9
   100cc:	8f 90       	pop	r8
   100ce:	6f 90       	pop	r6
   100d0:	5f 90       	pop	r5
   100d2:	4f 90       	pop	r4
   100d4:	08 95       	ret

000100d6 <testpage>:
   100d6:	cf 93       	push	r28
   100d8:	df 93       	push	r29
   100da:	20 91 87 01 	lds	r18, 0x0187	; 0x800187 <_pagesize>
   100de:	30 91 88 01 	lds	r19, 0x0188	; 0x800188 <_pagesize+0x1>
   100e2:	82 17       	cp	r24, r18
   100e4:	93 07       	cpc	r25, r19
   100e6:	3c f1       	brlt	.+78     	; 0x10136 <testpage+0x60>
   100e8:	85 e4       	ldi	r24, 0x45	; 69
   100ea:	9d e0       	ldi	r25, 0x0D	; 13
   100ec:	1f 92       	push	r1
   100ee:	9f 93       	push	r25
   100f0:	8f 93       	push	r24
   100f2:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   100f6:	0e 94 68 77 	call	0xeed0	; 0xeed0 <getchar>
   100fa:	ec 01       	movw	r28, r24
   100fc:	83 e4       	ldi	r24, 0x43	; 67
   100fe:	9d e0       	ldi	r25, 0x0D	; 13
   10100:	1f 92       	push	r1
   10102:	9f 93       	push	r25
   10104:	8f 93       	push	r24
   10106:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1010a:	0f 90       	pop	r0
   1010c:	0f 90       	pop	r0
   1010e:	0f 90       	pop	r0
   10110:	0f 90       	pop	r0
   10112:	0f 90       	pop	r0
   10114:	0f 90       	pop	r0
   10116:	c1 37       	cpi	r28, 0x71	; 113
   10118:	d1 05       	cpc	r29, r1
   1011a:	41 f0       	breq	.+16     	; 0x1012c <testpage+0x56>
   1011c:	2a 97       	sbiw	r28, 0x0a	; 10
   1011e:	49 f4       	brne	.+18     	; 0x10132 <testpage+0x5c>
   10120:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <_pagesize>
   10124:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <_pagesize+0x1>
   10128:	01 97       	sbiw	r24, 0x01	; 1
   1012a:	05 c0       	rjmp	.+10     	; 0x10136 <testpage+0x60>
   1012c:	8f ef       	ldi	r24, 0xFF	; 255
   1012e:	9f ef       	ldi	r25, 0xFF	; 255
   10130:	02 c0       	rjmp	.+4      	; 0x10136 <testpage+0x60>
   10132:	80 e0       	ldi	r24, 0x00	; 0
   10134:	90 e0       	ldi	r25, 0x00	; 0
   10136:	df 91       	pop	r29
   10138:	cf 91       	pop	r28
   1013a:	08 95       	ret

0001013c <cat>:
/// @param[in] name: file name.
/// @param[in] option: --p page display
/// @return  void.
MEMSPACE
long cat(char *name, int dopage)
{
   1013c:	a0 e0       	ldi	r26, 0x00	; 0
   1013e:	b1 e0       	ldi	r27, 0x01	; 1
   10140:	e4 ea       	ldi	r30, 0xA4	; 164
   10142:	f0 e8       	ldi	r31, 0x80	; 128
   10144:	0c 94 f9 e5 	jmp	0x1cbf2	; 0x1cbf2 <__prologue_saves__+0xc>
   10148:	18 2f       	mov	r17, r24
   1014a:	09 2f       	mov	r16, r25
   1014c:	4b 01       	movw	r8, r22
    FILE *fp;
    int count = 0;
    int size = 0;
    char line[256];

    fp = fopen(name,"rb");
   1014e:	66 e8       	ldi	r22, 0x86	; 134
   10150:	78 e0       	ldi	r23, 0x08	; 8
   10152:	99 de       	rcall	.-718    	; 0xfe86 <fopen>
   10154:	7c 01       	movw	r14, r24
    if (!fp)
   10156:	89 2b       	or	r24, r25
   10158:	41 f0       	breq	.+16     	; 0x1016a <cat+0x2e>
   1015a:	c1 2c       	mov	r12, r1
   1015c:	d1 2c       	mov	r13, r1
   1015e:	a1 2c       	mov	r10, r1
   10160:	b1 2c       	mov	r11, r1
    {
        printf("Can't open: %s\n", name);
        return(0);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
   10162:	8e 01       	movw	r16, r28
   10164:	0f 5f       	subi	r16, 0xFF	; 255
   10166:	1f 4f       	sbci	r17, 0xFF	; 255
   10168:	24 c0       	rjmp	.+72     	; 0x101b2 <cat+0x76>
    char line[256];

    fp = fopen(name,"rb");
    if (!fp)
    {
        printf("Can't open: %s\n", name);
   1016a:	0f 93       	push	r16
   1016c:	1f 93       	push	r17
   1016e:	8e ec       	ldi	r24, 0xCE	; 206
   10170:	9d e0       	ldi	r25, 0x0D	; 13
   10172:	1f 92       	push	r1
   10174:	9f 93       	push	r25
   10176:	8f 93       	push	r24
   10178:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
        return(0);
   1017c:	0f 90       	pop	r0
   1017e:	0f 90       	pop	r0
   10180:	0f 90       	pop	r0
   10182:	0f 90       	pop	r0
   10184:	0f 90       	pop	r0
   10186:	c1 2c       	mov	r12, r1
   10188:	d1 2c       	mov	r13, r1
   1018a:	76 01       	movw	r14, r12
   1018c:	3e c0       	rjmp	.+124    	; 0x1020a <cat+0xce>
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    {
        trim_tail(line);
   1018e:	c8 01       	movw	r24, r16
   10190:	0e 94 b0 32 	call	0x6560	; 0x6560 <trim_tail>
        size += strlen(line);
   10194:	f8 01       	movw	r30, r16
   10196:	01 90       	ld	r0, Z+
   10198:	00 20       	and	r0, r0
   1019a:	e9 f7       	brne	.-6      	; 0x10196 <cat+0x5a>
   1019c:	31 97       	sbiw	r30, 0x01	; 1
   1019e:	e0 1b       	sub	r30, r16
   101a0:	f1 0b       	sbc	r31, r17
   101a2:	ce 0e       	add	r12, r30
   101a4:	df 1e       	adc	r13, r31
        puts(line);
   101a6:	c8 01       	movw	r24, r16
   101a8:	0e 94 c0 77 	call	0xef80	; 0xef80 <puts>
        if(dopage)
   101ac:	81 14       	cp	r8, r1
   101ae:	91 04       	cpc	r9, r1
   101b0:	49 f4       	brne	.+18     	; 0x101c4 <cat+0x88>
    if (!fp)
    {
        printf("Can't open: %s\n", name);
        return(0);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
   101b2:	a7 01       	movw	r20, r14
   101b4:	6e ef       	ldi	r22, 0xFE	; 254
   101b6:	70 e0       	ldi	r23, 0x00	; 0
   101b8:	c8 01       	movw	r24, r16
   101ba:	0e 94 74 77 	call	0xeee8	; 0xeee8 <fgets>
   101be:	89 2b       	or	r24, r25
   101c0:	31 f7       	brne	.-52     	; 0x1018e <cat+0x52>
   101c2:	06 c0       	rjmp	.+12     	; 0x101d0 <cat+0x94>
        trim_tail(line);
        size += strlen(line);
        puts(line);
        if(dopage)
        {
            count = testpage(++count);
   101c4:	c5 01       	movw	r24, r10
   101c6:	01 96       	adiw	r24, 0x01	; 1
   101c8:	86 df       	rcall	.-244    	; 0x100d6 <testpage>
   101ca:	5c 01       	movw	r10, r24
            if(count < 0)
   101cc:	97 ff       	sbrs	r25, 7
   101ce:	f1 cf       	rjmp	.-30     	; 0x101b2 <cat+0x76>
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    printf("\n");
   101d0:	8c ec       	ldi	r24, 0xCC	; 204
   101d2:	9d e0       	ldi	r25, 0x0D	; 13
   101d4:	1f 92       	push	r1
   101d6:	9f 93       	push	r25
   101d8:	8f 93       	push	r24
   101da:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    fclose(fp);
   101de:	c7 01       	movw	r24, r14
   101e0:	fc dc       	rcall	.-1544   	; 0xfbda <fclose>
    printf("%ld bytes\n", (long)size);
   101e2:	0d 2c       	mov	r0, r13
   101e4:	00 0c       	add	r0, r0
   101e6:	ee 08       	sbc	r14, r14
   101e8:	ff 08       	sbc	r15, r15
   101ea:	ff 92       	push	r15
   101ec:	ef 92       	push	r14
   101ee:	df 92       	push	r13
   101f0:	cf 92       	push	r12
   101f2:	81 ec       	ldi	r24, 0xC1	; 193
   101f4:	9d e0       	ldi	r25, 0x0D	; 13
   101f6:	1f 92       	push	r1
   101f8:	9f 93       	push	r25
   101fa:	8f 93       	push	r24
   101fc:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    return(size);
   10200:	0f b6       	in	r0, 0x3f	; 63
   10202:	f8 94       	cli
   10204:	de bf       	out	0x3e, r29	; 62
   10206:	0f be       	out	0x3f, r0	; 63
   10208:	cd bf       	out	0x3d, r28	; 61
}
   1020a:	c7 01       	movw	r24, r14
   1020c:	b6 01       	movw	r22, r12
   1020e:	d3 95       	inc	r29
   10210:	ec e0       	ldi	r30, 0x0C	; 12
   10212:	0c 94 15 e6 	jmp	0x1cc2a	; 0x1cc2a <__epilogue_restores__+0xc>

00010216 <ls_info>:
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
   10216:	4f 92       	push	r4
   10218:	5f 92       	push	r5
   1021a:	6f 92       	push	r6
   1021c:	7f 92       	push	r7
   1021e:	af 92       	push	r10
   10220:	bf 92       	push	r11
   10222:	cf 92       	push	r12
   10224:	df 92       	push	r13
   10226:	ef 92       	push	r14
   10228:	ff 92       	push	r15
   1022a:	0f 93       	push	r16
   1022c:	1f 93       	push	r17
   1022e:	cf 93       	push	r28
   10230:	df 93       	push	r29
   10232:	cd b7       	in	r28, 0x3d	; 61
   10234:	de b7       	in	r29, 0x3e	; 62
   10236:	ec 97       	sbiw	r28, 0x3c	; 60
   10238:	0f b6       	in	r0, 0x3f	; 63
   1023a:	f8 94       	cli
   1023c:	de bf       	out	0x3e, r29	; 62
   1023e:	0f be       	out	0x3f, r0	; 63
   10240:	cd bf       	out	0x3d, r28	; 61
   10242:	8c 01       	movw	r16, r24
   10244:	7b 01       	movw	r14, r22
    uint16_t mask;
    char *cm = "rwx";
    char attr[12], *p;


    if(stat(name, &sp) == -1) 
   10246:	be 01       	movw	r22, r28
   10248:	6f 5f       	subi	r22, 0xFF	; 255
   1024a:	7f 4f       	sbci	r23, 0xFF	; 255
   1024c:	30 d9       	rcall	.-3488   	; 0xf4ae <stat>
   1024e:	01 96       	adiw	r24, 0x01	; 1
   10250:	89 f4       	brne	.+34     	; 0x10274 <ls_info+0x5e>
    {
        printf("can not stat: %s\n", name);
   10252:	1f 93       	push	r17
   10254:	0f 93       	push	r16
   10256:	81 e3       	ldi	r24, 0x31	; 49
   10258:	9d e0       	ldi	r25, 0x0D	; 13
   1025a:	1f 92       	push	r1
   1025c:	9f 93       	push	r25
   1025e:	8f 93       	push	r24
   10260:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
        return(0);
   10264:	0f 90       	pop	r0
   10266:	0f 90       	pop	r0
   10268:	0f 90       	pop	r0
   1026a:	0f 90       	pop	r0
   1026c:	0f 90       	pop	r0
   1026e:	80 e0       	ldi	r24, 0x00	; 0
   10270:	90 e0       	ldi	r25, 0x00	; 0
   10272:	79 c0       	rjmp	.+242    	; 0x10366 <ls_info+0x150>
    }

    if(!verbose)
   10274:	ef 28       	or	r14, r15
   10276:	91 f4       	brne	.+36     	; 0x1029c <ls_info+0x86>
    {
        printf("%s\n",basename(name));
   10278:	c8 01       	movw	r24, r16
   1027a:	0e 94 2d 78 	call	0xf05a	; 0xf05a <basename>
   1027e:	9f 93       	push	r25
   10280:	8f 93       	push	r24
   10282:	8d e2       	ldi	r24, 0x2D	; 45
   10284:	9d e0       	ldi	r25, 0x0D	; 13
   10286:	1f 92       	push	r1
   10288:	9f 93       	push	r25
   1028a:	8f 93       	push	r24
   1028c:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
        return(1);
   10290:	0f 90       	pop	r0
   10292:	0f 90       	pop	r0
   10294:	0f 90       	pop	r0
   10296:	0f 90       	pop	r0
   10298:	0f 90       	pop	r0
   1029a:	63 c0       	rjmp	.+198    	; 0x10362 <ls_info+0x14c>
    }

    p = attr;
    if(S_ISDIR(sp.st_mode))
   1029c:	49 84       	ldd	r4, Y+9	; 0x09
   1029e:	5a 84       	ldd	r5, Y+10	; 0x0a
   102a0:	6b 84       	ldd	r6, Y+11	; 0x0b
   102a2:	7c 84       	ldd	r7, Y+12	; 0x0c
   102a4:	d3 01       	movw	r26, r6
   102a6:	c2 01       	movw	r24, r4
   102a8:	88 27       	eor	r24, r24
   102aa:	90 7f       	andi	r25, 0xF0	; 240
   102ac:	aa 27       	eor	r26, r26
   102ae:	bb 27       	eor	r27, r27
   102b0:	81 15       	cp	r24, r1
   102b2:	90 44       	sbci	r25, 0x40	; 64
   102b4:	a1 05       	cpc	r26, r1
   102b6:	b1 05       	cpc	r27, r1
   102b8:	11 f4       	brne	.+4      	; 0x102be <ls_info+0xa8>
        *p++ = 'd';
   102ba:	84 e6       	ldi	r24, 0x64	; 100
   102bc:	01 c0       	rjmp	.+2      	; 0x102c0 <ls_info+0xaa>
    else
        *p++ = '-';
   102be:	8d e2       	ldi	r24, 0x2D	; 45
   102c0:	89 ab       	std	Y+49, r24	; 0x31
   102c2:	fe 01       	movw	r30, r28
   102c4:	f1 96       	adiw	r30, 0x31	; 49
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
   102c6:	e1 2c       	mov	r14, r1
   102c8:	ff 24       	eor	r15, r15
   102ca:	f3 94       	inc	r15
   102cc:	20 e0       	ldi	r18, 0x00	; 0
   102ce:	30 e0       	ldi	r19, 0x00	; 0
   102d0:	5f 01       	movw	r10, r30
    {
        // User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
   102d2:	4d e2       	ldi	r20, 0x2D	; 45
    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
        // User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
   102d4:	53 e0       	ldi	r21, 0x03	; 3
   102d6:	c5 2e       	mov	r12, r21
   102d8:	d1 2c       	mov	r13, r1

    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
        // User
        if( sp.st_mode & mask)
   102da:	c7 01       	movw	r24, r14
   102dc:	a0 e0       	ldi	r26, 0x00	; 0
   102de:	b0 e0       	ldi	r27, 0x00	; 0
   102e0:	84 21       	and	r24, r4
   102e2:	95 21       	and	r25, r5
   102e4:	a6 21       	and	r26, r6
   102e6:	b7 21       	and	r27, r7
   102e8:	89 2b       	or	r24, r25
   102ea:	8a 2b       	or	r24, r26
   102ec:	8b 2b       	or	r24, r27
   102ee:	51 f0       	breq	.+20     	; 0x10304 <ls_info+0xee>
            *p++ = cm[ i % 3];
   102f0:	c9 01       	movw	r24, r18
   102f2:	b6 01       	movw	r22, r12
   102f4:	0e 94 5e e5 	call	0x1cabc	; 0x1cabc <__divmodhi4>
   102f8:	dc 01       	movw	r26, r24
   102fa:	a2 5d       	subi	r26, 0xD2	; 210
   102fc:	b4 4f       	sbci	r27, 0xF4	; 244
   102fe:	8c 91       	ld	r24, X
   10300:	81 83       	std	Z+1, r24	; 0x01
   10302:	01 c0       	rjmp	.+2      	; 0x10306 <ls_info+0xf0>
        else
            *p++ = '-';
   10304:	41 83       	std	Z+1, r20	; 0x01
        mask >>= 1;
   10306:	f6 94       	lsr	r15
   10308:	e7 94       	ror	r14
        *p++ = 'd';
    else
        *p++ = '-';

    mask = 4 << 6;
    for(i=0;i<9;++i)
   1030a:	2f 5f       	subi	r18, 0xFF	; 255
   1030c:	3f 4f       	sbci	r19, 0xFF	; 255
   1030e:	31 96       	adiw	r30, 0x01	; 1
   10310:	29 30       	cpi	r18, 0x09	; 9
   10312:	31 05       	cpc	r19, r1
   10314:	11 f7       	brne	.-60     	; 0x102da <ls_info+0xc4>
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
        mask >>= 1;
    }
    *p = 0;
   10316:	1b ae       	std	Y+59, r1	; 0x3b

    printf("%s none none %12ld %s %s\n",
   10318:	c8 01       	movw	r24, r16
   1031a:	0e 94 2d 78 	call	0xf05a	; 0xf05a <basename>
   1031e:	18 2f       	mov	r17, r24
   10320:	09 2f       	mov	r16, r25
   10322:	69 a5       	ldd	r22, Y+41	; 0x29
   10324:	7a a5       	ldd	r23, Y+42	; 0x2a
   10326:	8b a5       	ldd	r24, Y+43	; 0x2b
   10328:	9c a5       	ldd	r25, Y+44	; 0x2c
   1032a:	0e 94 08 78 	call	0xf010	; 0xf010 <mctime>
   1032e:	0f 93       	push	r16
   10330:	1f 93       	push	r17
   10332:	9f 93       	push	r25
   10334:	8f 93       	push	r24
   10336:	8c 8d       	ldd	r24, Y+28	; 0x1c
   10338:	8f 93       	push	r24
   1033a:	8b 8d       	ldd	r24, Y+27	; 0x1b
   1033c:	8f 93       	push	r24
   1033e:	8a 8d       	ldd	r24, Y+26	; 0x1a
   10340:	8f 93       	push	r24
   10342:	89 8d       	ldd	r24, Y+25	; 0x19
   10344:	8f 93       	push	r24
   10346:	bf 92       	push	r11
   10348:	af 92       	push	r10
   1034a:	83 e1       	ldi	r24, 0x13	; 19
   1034c:	9d e0       	ldi	r25, 0x0D	; 13
   1034e:	1f 92       	push	r1
   10350:	9f 93       	push	r25
   10352:	8f 93       	push	r24
   10354:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
        attr, 
        (long) sp.st_size, 
        mctime((time_t)sp.st_mtime),
        basename(name));
    return(1);
   10358:	0f b6       	in	r0, 0x3f	; 63
   1035a:	f8 94       	cli
   1035c:	de bf       	out	0x3e, r29	; 62
   1035e:	0f be       	out	0x3f, r0	; 63
   10360:	cd bf       	out	0x3d, r28	; 61
   10362:	81 e0       	ldi	r24, 0x01	; 1
   10364:	90 e0       	ldi	r25, 0x00	; 0
}
   10366:	ec 96       	adiw	r28, 0x3c	; 60
   10368:	0f b6       	in	r0, 0x3f	; 63
   1036a:	f8 94       	cli
   1036c:	de bf       	out	0x3e, r29	; 62
   1036e:	0f be       	out	0x3f, r0	; 63
   10370:	cd bf       	out	0x3d, r28	; 61
   10372:	df 91       	pop	r29
   10374:	cf 91       	pop	r28
   10376:	1f 91       	pop	r17
   10378:	0f 91       	pop	r16
   1037a:	ff 90       	pop	r15
   1037c:	ef 90       	pop	r14
   1037e:	df 90       	pop	r13
   10380:	cf 90       	pop	r12
   10382:	bf 90       	pop	r11
   10384:	af 90       	pop	r10
   10386:	7f 90       	pop	r7
   10388:	6f 90       	pop	r6
   1038a:	5f 90       	pop	r5
   1038c:	4f 90       	pop	r4
   1038e:	08 95       	ret

00010390 <ls>:
/// @param[in] path: file name or directory
/// @param[in] option: -l for detail
/// @return  number of files
MEMSPACE
int ls(char *name, int verbose)
{
   10390:	2f 92       	push	r2
   10392:	3f 92       	push	r3
   10394:	4f 92       	push	r4
   10396:	5f 92       	push	r5
   10398:	6f 92       	push	r6
   1039a:	8f 92       	push	r8
   1039c:	9f 92       	push	r9
   1039e:	af 92       	push	r10
   103a0:	bf 92       	push	r11
   103a2:	cf 92       	push	r12
   103a4:	df 92       	push	r13
   103a6:	ef 92       	push	r14
   103a8:	ff 92       	push	r15
   103aa:	0f 93       	push	r16
   103ac:	1f 93       	push	r17
   103ae:	cf 93       	push	r28
   103b0:	df 93       	push	r29
   103b2:	cd b7       	in	r28, 0x3d	; 61
   103b4:	de b7       	in	r29, 0x3e	; 62
   103b6:	c0 54       	subi	r28, 0x40	; 64
   103b8:	d1 09       	sbc	r29, r1
   103ba:	0f b6       	in	r0, 0x3f	; 63
   103bc:	f8 94       	cli
   103be:	de bf       	out	0x3e, r29	; 62
   103c0:	0f be       	out	0x3f, r0	; 63
   103c2:	cd bf       	out	0x3d, r28	; 61
   103c4:	7c 01       	movw	r14, r24
   103c6:	4b 01       	movw	r8, r22
    int files = 0;
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
   103c8:	19 aa       	std	Y+49, r1	; 0x31
   103ca:	8e 01       	movw	r16, r28
   103cc:	0f 5c       	subi	r16, 0xCF	; 207
   103ce:	1f 4f       	sbci	r17, 0xFF	; 255
    if(!name || !*name || MATCH(name,".") )
   103d0:	00 97       	sbiw	r24, 0x00	; 0
   103d2:	91 f4       	brne	.+36     	; 0x103f8 <ls+0x68>
    {
        if( !getcwd(fullpath, sizeof(fullpath)-2) )
   103d4:	6c e0       	ldi	r22, 0x0C	; 12
   103d6:	70 e0       	ldi	r23, 0x00	; 0
   103d8:	c8 01       	movw	r24, r16
   103da:	0e 94 83 78 	call	0xf106	; 0xf106 <getcwd>
   103de:	89 2b       	or	r24, r25
   103e0:	d1 f4       	brne	.+52     	; 0x10416 <ls+0x86>
        {
            printf("ls: Can't get current directory\n"); 
   103e2:	82 ef       	ldi	r24, 0xF2	; 242
   103e4:	9c e0       	ldi	r25, 0x0C	; 12
   103e6:	1f 92       	push	r1
   103e8:	9f 93       	push	r25
   103ea:	8f 93       	push	r24
   103ec:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
            return(0); 
   103f0:	0f 90       	pop	r0
   103f2:	0f 90       	pop	r0
   103f4:	0f 90       	pop	r0
   103f6:	3b c0       	rjmp	.+118    	; 0x1046e <ls+0xde>
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
    if(!name || !*name || MATCH(name,".") )
   103f8:	fc 01       	movw	r30, r24
   103fa:	80 81       	ld	r24, Z
   103fc:	88 23       	and	r24, r24
   103fe:	51 f3       	breq	.-44     	; 0x103d4 <ls+0x44>
   10400:	66 e4       	ldi	r22, 0x46	; 70
   10402:	72 e1       	ldi	r23, 0x12	; 18
   10404:	c7 01       	movw	r24, r14
   10406:	0e 94 33 33 	call	0x6666	; 0x6666 <MATCH>
   1040a:	89 2b       	or	r24, r25
   1040c:	19 f7       	brne	.-58     	; 0x103d4 <ls+0x44>

        }
    }
    else
    {
        strcpy(fullpath,name);
   1040e:	b7 01       	movw	r22, r14
   10410:	c8 01       	movw	r24, r16
   10412:	0e 94 56 32 	call	0x64ac	; 0x64ac <strcpy>
    }
    len = strlen(fullpath);
   10416:	f8 01       	movw	r30, r16
   10418:	01 90       	ld	r0, Z+
   1041a:	00 20       	and	r0, r0
   1041c:	e9 f7       	brne	.-6      	; 0x10418 <ls+0x88>
   1041e:	31 97       	sbiw	r30, 0x01	; 1
   10420:	1f 01       	movw	r2, r30
   10422:	20 1a       	sub	r2, r16
   10424:	31 0a       	sbc	r3, r17


    printf("Listing:[%s]\n",fullpath);
   10426:	1f 93       	push	r17
   10428:	0f 93       	push	r16
   1042a:	84 ee       	ldi	r24, 0xE4	; 228
   1042c:	9c e0       	ldi	r25, 0x0C	; 12
   1042e:	1f 92       	push	r1
   10430:	9f 93       	push	r25
   10432:	8f 93       	push	r24
   10434:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>

    if (stat(fullpath, &st)) 
   10438:	be 01       	movw	r22, r28
   1043a:	6f 5f       	subi	r22, 0xFF	; 255
   1043c:	7f 4f       	sbci	r23, 0xFF	; 255
   1043e:	c8 01       	movw	r24, r16
   10440:	36 d8       	rcall	.-3988   	; 0xf4ae <stat>
   10442:	7c 01       	movw	r14, r24
   10444:	0f 90       	pop	r0
   10446:	0f 90       	pop	r0
   10448:	0f 90       	pop	r0
   1044a:	0f 90       	pop	r0
   1044c:	0f 90       	pop	r0
   1044e:	89 2b       	or	r24, r25
   10450:	89 f0       	breq	.+34     	; 0x10474 <ls+0xe4>
    { 
        printf("ls: cannot stat [%s]\n", fullpath); 
   10452:	1f 93       	push	r17
   10454:	0f 93       	push	r16
   10456:	8e ec       	ldi	r24, 0xCE	; 206
   10458:	9c e0       	ldi	r25, 0x0C	; 12
   1045a:	1f 92       	push	r1
   1045c:	9f 93       	push	r25
   1045e:	8f 93       	push	r24
   10460:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
        return(0); 
   10464:	0f 90       	pop	r0
   10466:	0f 90       	pop	r0
   10468:	0f 90       	pop	r0
   1046a:	0f 90       	pop	r0
   1046c:	0f 90       	pop	r0
   1046e:	e1 2c       	mov	r14, r1
   10470:	f1 2c       	mov	r15, r1
   10472:	86 c0       	rjmp	.+268    	; 0x10580 <ls+0x1f0>
    }

    switch (st.st_mode & S_IFMT) 
   10474:	89 85       	ldd	r24, Y+9	; 0x09
   10476:	9a 85       	ldd	r25, Y+10	; 0x0a
   10478:	ab 85       	ldd	r26, Y+11	; 0x0b
   1047a:	bc 85       	ldd	r27, Y+12	; 0x0c
   1047c:	88 27       	eor	r24, r24
   1047e:	90 7f       	andi	r25, 0xF0	; 240
   10480:	aa 27       	eor	r26, r26
   10482:	bb 27       	eor	r27, r27
   10484:	81 15       	cp	r24, r1
   10486:	f0 e4       	ldi	r31, 0x40	; 64
   10488:	9f 07       	cpc	r25, r31
   1048a:	a1 05       	cpc	r26, r1
   1048c:	b1 05       	cpc	r27, r1
   1048e:	51 f0       	breq	.+20     	; 0x104a4 <ls+0x114>
   10490:	81 15       	cp	r24, r1
   10492:	90 48       	sbci	r25, 0x80	; 128
   10494:	a1 05       	cpc	r26, r1
   10496:	b1 05       	cpc	r27, r1
   10498:	09 f0       	breq	.+2      	; 0x1049c <ls+0x10c>
   1049a:	62 c0       	rjmp	.+196    	; 0x10560 <ls+0x1d0>
    {
    case S_IFREG:
        ls_info(fullpath,verbose);
   1049c:	b4 01       	movw	r22, r8
   1049e:	c8 01       	movw	r24, r16
   104a0:	ba de       	rcall	.-652    	; 0x10216 <ls_info>
   104a2:	5e c0       	rjmp	.+188    	; 0x10560 <ls+0x1d0>
        break;
    case S_IFDIR:
        dirp = opendir(fullpath);
   104a4:	c8 01       	movw	r24, r16
   104a6:	0e 94 31 79 	call	0xf262	; 0xf262 <opendir>
   104aa:	5c 01       	movw	r10, r24
        if(!dirp)
   104ac:	89 2b       	or	r24, r25
   104ae:	69 f0       	breq	.+26     	; 0x104ca <ls+0x13a>
    }
    else
    {
        strcpy(fullpath,name);
    }
    len = strlen(fullpath);
   104b0:	e1 2c       	mov	r14, r1
   104b2:	f1 2c       	mov	r15, r1
                strcat(fullpath,"/");
            }
            strcat(fullpath,de->d_name);
            files +=ls_info(fullpath,verbose);
            // restore path
            fullpath[len] = 0;
   104b4:	c8 01       	movw	r24, r16
   104b6:	82 0d       	add	r24, r2
   104b8:	93 1d       	adc	r25, r3
   104ba:	21 96       	adiw	r28, 0x01	; 1
   104bc:	9f af       	std	Y+63, r25	; 0x3f
   104be:	8e af       	std	Y+62, r24	; 0x3e
   104c0:	21 97       	sbiw	r28, 0x01	; 1
                break;
            // FIXME neeed beetter string length tests here
            len2 = strlen(de->d_name);
            if(len + len2 >= MAX_NAME_LEN)
            {
                printf("name:[%s] too long with full path\n",de->d_name);
   104c2:	8b e9       	ldi	r24, 0x9B	; 155
   104c4:	9c e0       	ldi	r25, 0x0C	; 12
   104c6:	2c 01       	movw	r4, r24
   104c8:	26 c0       	rjmp	.+76     	; 0x10516 <ls+0x186>
        break;
    case S_IFDIR:
        dirp = opendir(fullpath);
        if(!dirp)
        {
            printf("opendir failed\n");
   104ca:	8e eb       	ldi	r24, 0xBE	; 190
   104cc:	9c e0       	ldi	r25, 0x0C	; 12
   104ce:	1f 92       	push	r1
   104d0:	9f 93       	push	r25
   104d2:	8f 93       	push	r24
   104d4:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
            return(0);
   104d8:	0f 90       	pop	r0
   104da:	0f 90       	pop	r0
   104dc:	0f 90       	pop	r0
   104de:	50 c0       	rjmp	.+160    	; 0x10580 <ls+0x1f0>
        }
        while ( (de = readdir(dirp)) ) 
        {
            if(de->d_name[0] == 0)
   104e0:	f6 01       	movw	r30, r12
   104e2:	80 81       	ld	r24, Z
   104e4:	88 23       	and	r24, r24
   104e6:	e9 f0       	breq	.+58     	; 0x10522 <ls+0x192>
                break;
            // FIXME neeed beetter string length tests here
            len2 = strlen(de->d_name);
   104e8:	f6 01       	movw	r30, r12
   104ea:	01 90       	ld	r0, Z+
   104ec:	00 20       	and	r0, r0
   104ee:	e9 f7       	brne	.-6      	; 0x104ea <ls+0x15a>
   104f0:	31 97       	sbiw	r30, 0x01	; 1
   104f2:	ec 19       	sub	r30, r12
   104f4:	fd 09       	sbc	r31, r13
            if(len + len2 >= MAX_NAME_LEN)
   104f6:	e2 0d       	add	r30, r2
   104f8:	f3 1d       	adc	r31, r3
   104fa:	3d 97       	sbiw	r30, 0x0d	; 13
   104fc:	b4 f0       	brlt	.+44     	; 0x1052a <ls+0x19a>
            {
                printf("name:[%s] too long with full path\n",de->d_name);
   104fe:	df 92       	push	r13
   10500:	cf 92       	push	r12
   10502:	1f 92       	push	r1
   10504:	5f 92       	push	r5
   10506:	4f 92       	push	r4
   10508:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
                continue;
   1050c:	0f 90       	pop	r0
   1050e:	0f 90       	pop	r0
   10510:	0f 90       	pop	r0
   10512:	0f 90       	pop	r0
   10514:	0f 90       	pop	r0
        if(!dirp)
        {
            printf("opendir failed\n");
            return(0);
        }
        while ( (de = readdir(dirp)) ) 
   10516:	c5 01       	movw	r24, r10
   10518:	0e 94 4f 79 	call	0xf29e	; 0xf29e <readdir>
   1051c:	6c 01       	movw	r12, r24
   1051e:	89 2b       	or	r24, r25
   10520:	f9 f6       	brne	.-66     	; 0x104e0 <ls+0x150>
#ifdef ESP8266
            optimistic_yield(1000);
            wdt_reset();
#endif
        }
        closedir(dirp);
   10522:	c5 01       	movw	r24, r10
   10524:	0e 94 16 79 	call	0xf22c	; 0xf22c <closedir>
        break;
   10528:	1d c0       	rjmp	.+58     	; 0x10564 <ls+0x1d4>
            if(len + len2 >= MAX_NAME_LEN)
            {
                printf("name:[%s] too long with full path\n",de->d_name);
                continue;
            }
            if(!MATCH(fullpath,"/") )
   1052a:	68 e3       	ldi	r22, 0x38	; 56
   1052c:	78 e0       	ldi	r23, 0x08	; 8
   1052e:	c8 01       	movw	r24, r16
   10530:	0e 94 33 33 	call	0x6666	; 0x6666 <MATCH>
   10534:	89 2b       	or	r24, r25
   10536:	29 f4       	brne	.+10     	; 0x10542 <ls+0x1b2>
            {
                strcat(fullpath,"/");
   10538:	68 e3       	ldi	r22, 0x38	; 56
   1053a:	78 e0       	ldi	r23, 0x08	; 8
   1053c:	c8 01       	movw	r24, r16
   1053e:	0e 94 77 32 	call	0x64ee	; 0x64ee <strcat>
            }
            strcat(fullpath,de->d_name);
   10542:	b6 01       	movw	r22, r12
   10544:	c8 01       	movw	r24, r16
   10546:	0e 94 77 32 	call	0x64ee	; 0x64ee <strcat>
            files +=ls_info(fullpath,verbose);
   1054a:	b4 01       	movw	r22, r8
   1054c:	c8 01       	movw	r24, r16
   1054e:	63 de       	rcall	.-826    	; 0x10216 <ls_info>
   10550:	e8 0e       	add	r14, r24
   10552:	f9 1e       	adc	r15, r25
            // restore path
            fullpath[len] = 0;
   10554:	21 96       	adiw	r28, 0x01	; 1
   10556:	ee ad       	ldd	r30, Y+62	; 0x3e
   10558:	ff ad       	ldd	r31, Y+63	; 0x3f
   1055a:	21 97       	sbiw	r28, 0x01	; 1
   1055c:	10 82       	st	Z, r1
   1055e:	db cf       	rjmp	.-74     	; 0x10516 <ls+0x186>
MEMSPACE
int ls(char *name, int verbose)
{
    struct stat st;
    DIR *dirp;
    int files = 0;
   10560:	e1 2c       	mov	r14, r1
   10562:	f1 2c       	mov	r15, r1
#endif
        }
        closedir(dirp);
        break;
    }
    printf("Files: %d\n", (int)files);
   10564:	ff 92       	push	r15
   10566:	ef 92       	push	r14
   10568:	80 e9       	ldi	r24, 0x90	; 144
   1056a:	9c e0       	ldi	r25, 0x0C	; 12
   1056c:	1f 92       	push	r1
   1056e:	9f 93       	push	r25
   10570:	8f 93       	push	r24
   10572:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    return(files);
   10576:	0f 90       	pop	r0
   10578:	0f 90       	pop	r0
   1057a:	0f 90       	pop	r0
   1057c:	0f 90       	pop	r0
   1057e:	0f 90       	pop	r0
}
   10580:	c7 01       	movw	r24, r14
   10582:	c0 5c       	subi	r28, 0xC0	; 192
   10584:	df 4f       	sbci	r29, 0xFF	; 255
   10586:	0f b6       	in	r0, 0x3f	; 63
   10588:	f8 94       	cli
   1058a:	de bf       	out	0x3e, r29	; 62
   1058c:	0f be       	out	0x3f, r0	; 63
   1058e:	cd bf       	out	0x3d, r28	; 61
   10590:	df 91       	pop	r29
   10592:	cf 91       	pop	r28
   10594:	1f 91       	pop	r17
   10596:	0f 91       	pop	r16
   10598:	ff 90       	pop	r15
   1059a:	ef 90       	pop	r14
   1059c:	df 90       	pop	r13
   1059e:	cf 90       	pop	r12
   105a0:	bf 90       	pop	r11
   105a2:	af 90       	pop	r10
   105a4:	9f 90       	pop	r9
   105a6:	8f 90       	pop	r8
   105a8:	6f 90       	pop	r6
   105aa:	5f 90       	pop	r5
   105ac:	4f 90       	pop	r4
   105ae:	3f 90       	pop	r3
   105b0:	2f 90       	pop	r2
   105b2:	08 95       	ret

000105b4 <posix_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int posix_tests(int argc,char *argv[])
{
   105b4:	a0 e0       	ldi	r26, 0x00	; 0
   105b6:	b1 e0       	ldi	r27, 0x01	; 1
   105b8:	e0 ee       	ldi	r30, 0xE0	; 224
   105ba:	f2 e8       	ldi	r31, 0x82	; 130
   105bc:	0c 94 f5 e5 	jmp	0x1cbea	; 0x1cbea <__prologue_saves__+0x4>
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   105c0:	fb 01       	movw	r30, r22
   105c2:	c0 80       	ld	r12, Z
   105c4:	d1 80       	ldd	r13, Z+1	; 0x01

    if(!ptr)
   105c6:	c1 14       	cp	r12, r1
   105c8:	d1 04       	cpc	r13, r1
   105ca:	19 f4       	brne	.+6      	; 0x105d2 <posix_tests+0x1e>
        return(0);
   105cc:	80 e0       	ldi	r24, 0x00	; 0
   105ce:	90 e0       	ldi	r25, 0x00	; 0
   105d0:	67 c1       	rjmp	.+718    	; 0x108a0 <posix_tests+0x2ec>
   105d2:	4b 01       	movw	r8, r22
   105d4:	8c 01       	movw	r16, r24

    if( MATCH(ptr,"posix") )
   105d6:	62 e3       	ldi	r22, 0x32	; 50
   105d8:	7b e0       	ldi	r23, 0x0B	; 11
   105da:	c6 01       	movw	r24, r12
   105dc:	0e 94 33 33 	call	0x6666	; 0x6666 <MATCH>
   105e0:	89 2b       	or	r24, r25
   105e2:	a9 f0       	breq	.+42     	; 0x1060e <posix_tests+0x5a>
    {
        ptr = argv[ind++];
   105e4:	f4 01       	movw	r30, r8
   105e6:	c2 80       	ldd	r12, Z+2	; 0x02
   105e8:	d3 80       	ldd	r13, Z+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
   105ea:	c1 14       	cp	r12, r1
   105ec:	d1 04       	cpc	r13, r1
   105ee:	21 f4       	brne	.+8      	; 0x105f8 <posix_tests+0x44>
        {
            posix_help(1);
   105f0:	81 e0       	ldi	r24, 0x01	; 1
   105f2:	90 e0       	ldi	r25, 0x00	; 0
   105f4:	74 dc       	rcall	.-1816   	; 0xfede <posix_help>
   105f6:	52 c1       	rjmp	.+676    	; 0x1089c <posix_tests+0x2e8>
        return(0);

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
   105f8:	67 ef       	ldi	r22, 0xF7	; 247
   105fa:	75 e1       	ldi	r23, 0x15	; 21
   105fc:	c6 01       	movw	r24, r12
   105fe:	0e 94 33 33 	call	0x6666	; 0x6666 <MATCH>
   10602:	89 2b       	or	r24, r25
   10604:	a9 f7       	brne	.-22     	; 0x105f0 <posix_tests+0x3c>
    if(!ptr)
        return(0);

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
   10606:	42 e0       	ldi	r20, 0x02	; 2
   10608:	64 2e       	mov	r6, r20
   1060a:	71 2c       	mov	r7, r1
   1060c:	03 c0       	rjmp	.+6      	; 0x10614 <posix_tests+0x60>
{
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   1060e:	66 24       	eor	r6, r6
   10610:	63 94       	inc	r6
   10612:	71 2c       	mov	r7, r1
            posix_help(1);
            return(1);
        }
    }

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
   10614:	73 01       	movw	r14, r6
   10616:	ff ef       	ldi	r31, 0xFF	; 255
   10618:	ef 1a       	sub	r14, r31
   1061a:	ff 0a       	sbc	r15, r31
   1061c:	98 01       	movw	r18, r16
   1061e:	a7 01       	movw	r20, r14
   10620:	68 e3       	ldi	r22, 0x38	; 56
   10622:	7b e0       	ldi	r23, 0x0B	; 11
   10624:	c6 01       	movw	r24, r12
   10626:	0e 94 47 33 	call	0x668e	; 0x668e <MATCHARGS>
   1062a:	89 2b       	or	r24, r25
   1062c:	a1 f1       	breq	.+104    	; 0x10696 <posix_tests+0xe2>
   1062e:	73 01       	movw	r14, r6
   10630:	ee 0c       	add	r14, r14
   10632:	ff 1c       	adc	r15, r15
   10634:	e8 0c       	add	r14, r8
   10636:	f9 1c       	adc	r15, r9
   10638:	57 01       	movw	r10, r14
   1063a:	47 01       	movw	r8, r14
   1063c:	63 01       	movw	r12, r6
   1063e:	41 2c       	mov	r4, r1
   10640:	51 2c       	mov	r5, r1
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   10642:	c0 16       	cp	r12, r16
   10644:	d1 06       	cpc	r13, r17
   10646:	1c f5       	brge	.+70     	; 0x1068e <posix_tests+0xda>
        {
            if(MATCH(argv[i],"-p"))
   10648:	6c e3       	ldi	r22, 0x3C	; 60
   1064a:	7b e0       	ldi	r23, 0x0B	; 11
   1064c:	f4 01       	movw	r30, r8
   1064e:	81 91       	ld	r24, Z+
   10650:	91 91       	ld	r25, Z+
   10652:	4f 01       	movw	r8, r30
   10654:	0e 94 33 33 	call	0x6666	; 0x6666 <MATCH>
   10658:	89 2b       	or	r24, r25
   1065a:	19 f0       	breq	.+6      	; 0x10662 <posix_tests+0xae>
                page = 1;
   1065c:	44 24       	eor	r4, r4
   1065e:	43 94       	inc	r4
   10660:	51 2c       	mov	r5, r1

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   10662:	ff ef       	ldi	r31, 0xFF	; 255
   10664:	cf 1a       	sub	r12, r31
   10666:	df 0a       	sbc	r13, r31
   10668:	ec cf       	rjmp	.-40     	; 0x10642 <posix_tests+0x8e>
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
        {
            if(!MATCH(argv[i],"-p"))
   1066a:	6c e3       	ldi	r22, 0x3C	; 60
   1066c:	7b e0       	ldi	r23, 0x0B	; 11
   1066e:	f5 01       	movw	r30, r10
   10670:	81 91       	ld	r24, Z+
   10672:	91 91       	ld	r25, Z+
   10674:	5f 01       	movw	r10, r30
   10676:	0e 94 33 33 	call	0x6666	; 0x6666 <MATCH>
   1067a:	89 2b       	or	r24, r25
   1067c:	29 f4       	brne	.+10     	; 0x10688 <posix_tests+0xd4>
                cat(argv[ind], page);
   1067e:	b2 01       	movw	r22, r4
   10680:	f7 01       	movw	r30, r14
   10682:	80 81       	ld	r24, Z
   10684:	91 81       	ldd	r25, Z+1	; 0x01
   10686:	5a dd       	rcall	.-1356   	; 0x1013c <cat>
        for(i=ind;i<argc;++i)
        {
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
   10688:	ff ef       	ldi	r31, 0xFF	; 255
   1068a:	6f 1a       	sub	r6, r31
   1068c:	7f 0a       	sbc	r7, r31
   1068e:	60 16       	cp	r6, r16
   10690:	71 06       	cpc	r7, r17
   10692:	5c f3       	brlt	.-42     	; 0x1066a <posix_tests+0xb6>
   10694:	03 c1       	rjmp	.+518    	; 0x1089c <posix_tests+0x2e8>
        chmod( argv[ind],strtol(argv[ind+1],NULL,8));
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"copy", (ind + 2), argc))
   10696:	53 01       	movw	r10, r6
   10698:	82 e0       	ldi	r24, 0x02	; 2
   1069a:	a8 0e       	add	r10, r24
   1069c:	b1 1c       	adc	r11, r1
   1069e:	98 01       	movw	r18, r16
   106a0:	a5 01       	movw	r20, r10
   106a2:	6f e3       	ldi	r22, 0x3F	; 63
   106a4:	7b e0       	ldi	r23, 0x0B	; 11
   106a6:	c6 01       	movw	r24, r12
   106a8:	0e 94 47 33 	call	0x668e	; 0x668e <MATCHARGS>
   106ac:	89 2b       	or	r24, r25
   106ae:	61 f0       	breq	.+24     	; 0x106c8 <posix_tests+0x114>
    {
        copy(argv[ind],argv[ind+1]);
   106b0:	ee 0c       	add	r14, r14
   106b2:	ff 1c       	adc	r15, r15
   106b4:	f4 01       	movw	r30, r8
   106b6:	ee 0d       	add	r30, r14
   106b8:	ff 1d       	adc	r31, r15
   106ba:	60 81       	ld	r22, Z
   106bc:	71 81       	ldd	r23, Z+1	; 0x01
   106be:	32 97       	sbiw	r30, 0x02	; 2
   106c0:	80 81       	ld	r24, Z
   106c2:	91 81       	ldd	r25, Z+1	; 0x01
   106c4:	28 dc       	rcall	.-1968   	; 0xff16 <copy>
   106c6:	ea c0       	rjmp	.+468    	; 0x1089c <posix_tests+0x2e8>
        return(1);
    }

    if (MATCHARGS(ptr,"cd", (ind + 1), argc))
   106c8:	98 01       	movw	r18, r16
   106ca:	a7 01       	movw	r20, r14
   106cc:	64 e4       	ldi	r22, 0x44	; 68
   106ce:	7b e0       	ldi	r23, 0x0B	; 11
   106d0:	c6 01       	movw	r24, r12
   106d2:	0e 94 47 33 	call	0x668e	; 0x668e <MATCHARGS>
   106d6:	89 2b       	or	r24, r25
   106d8:	59 f0       	breq	.+22     	; 0x106f0 <posix_tests+0x13c>
    {
        chdir(argv[ind]);
   106da:	73 01       	movw	r14, r6
   106dc:	ee 0c       	add	r14, r14
   106de:	ff 1c       	adc	r15, r15
   106e0:	f4 01       	movw	r30, r8
   106e2:	ee 0d       	add	r30, r14
   106e4:	ff 1d       	adc	r31, r15
   106e6:	80 81       	ld	r24, Z
   106e8:	91 81       	ldd	r25, Z+1	; 0x01
   106ea:	0e 94 3b 78 	call	0xf076	; 0xf076 <chdir>
   106ee:	d6 c0       	rjmp	.+428    	; 0x1089c <posix_tests+0x2e8>
        logfile(argv[ind],argv[ind+1]);
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
   106f0:	98 01       	movw	r18, r16
   106f2:	a3 01       	movw	r20, r6
   106f4:	62 e6       	ldi	r22, 0x62	; 98
   106f6:	78 e0       	ldi	r23, 0x08	; 8
   106f8:	c6 01       	movw	r24, r12
   106fa:	0e 94 47 33 	call	0x668e	; 0x668e <MATCHARGS>
   106fe:	89 2b       	or	r24, r25
   10700:	69 f1       	breq	.+90     	; 0x1075c <posix_tests+0x1a8>
   10702:	73 01       	movw	r14, r6
   10704:	ee 0c       	add	r14, r14
   10706:	ff 1c       	adc	r15, r15
   10708:	e8 0c       	add	r14, r8
   1070a:	f9 1c       	adc	r15, r9
   1070c:	c1 2c       	mov	r12, r1
   1070e:	d1 2c       	mov	r13, r1
    {
        int i;
        int args = 0;
        for(i=ind;i<argc;++i)
   10710:	c6 01       	movw	r24, r12
   10712:	86 0d       	add	r24, r6
   10714:	97 1d       	adc	r25, r7
   10716:	80 17       	cp	r24, r16
   10718:	91 07       	cpc	r25, r17
   1071a:	b4 f4       	brge	.+44     	; 0x10748 <posix_tests+0x194>
        {
            if(!MATCH(argv[i],"-l"))
   1071c:	67 e4       	ldi	r22, 0x47	; 71
   1071e:	7b e0       	ldi	r23, 0x0B	; 11
   10720:	f7 01       	movw	r30, r14
   10722:	80 81       	ld	r24, Z
   10724:	91 81       	ldd	r25, Z+1	; 0x01
   10726:	0e 94 33 33 	call	0x6666	; 0x6666 <MATCH>
   1072a:	89 2b       	or	r24, r25
   1072c:	31 f4       	brne	.+12     	; 0x1073a <posix_tests+0x186>
                ls(argv[i],1);
   1072e:	61 e0       	ldi	r22, 0x01	; 1
   10730:	70 e0       	ldi	r23, 0x00	; 0
   10732:	f7 01       	movw	r30, r14
   10734:	80 81       	ld	r24, Z
   10736:	91 81       	ldd	r25, Z+1	; 0x01
   10738:	2b de       	rcall	.-938    	; 0x10390 <ls>
            ++args;
   1073a:	ff ef       	ldi	r31, 0xFF	; 255
   1073c:	cf 1a       	sub	r12, r31
   1073e:	df 0a       	sbc	r13, r31
   10740:	82 e0       	ldi	r24, 0x02	; 2
   10742:	e8 0e       	add	r14, r24
   10744:	f1 1c       	adc	r15, r1
   10746:	e4 cf       	rjmp	.-56     	; 0x10710 <posix_tests+0x15c>
        }
        if(!args)
   10748:	c1 14       	cp	r12, r1
   1074a:	d1 04       	cpc	r13, r1
   1074c:	09 f0       	breq	.+2      	; 0x10750 <posix_tests+0x19c>
        {
            ls("",1);
   1074e:	a6 c0       	rjmp	.+332    	; 0x1089c <posix_tests+0x2e8>
   10750:	61 e0       	ldi	r22, 0x01	; 1
   10752:	70 e0       	ldi	r23, 0x00	; 0
   10754:	87 e1       	ldi	r24, 0x17	; 23
   10756:	97 e1       	ldi	r25, 0x17	; 23
   10758:	1b de       	rcall	.-970    	; 0x10390 <ls>
        mkfs(argv[ind++]);
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
   1075a:	a0 c0       	rjmp	.+320    	; 0x1089c <posix_tests+0x2e8>
   1075c:	98 01       	movw	r18, r16
   1075e:	a7 01       	movw	r20, r14
   10760:	6a e4       	ldi	r22, 0x4A	; 74
   10762:	7b e0       	ldi	r23, 0x0B	; 11
   10764:	c6 01       	movw	r24, r12
   10766:	0e 94 47 33 	call	0x668e	; 0x668e <MATCHARGS>
   1076a:	89 2b       	or	r24, r25
    {
        int mode = 0777;
        if((ind+2) <= argc)
   1076c:	19 f1       	breq	.+70     	; 0x107b4 <posix_tests+0x200>
   1076e:	e0 16       	cp	r14, r16
   10770:	f1 06       	cpc	r15, r17
        {
            mode = strtol(argv[ind+1],NULL,8);
   10772:	7c f4       	brge	.+30     	; 0x10792 <posix_tests+0x1de>
   10774:	ee 0c       	add	r14, r14
   10776:	ff 1c       	adc	r15, r15
   10778:	f4 01       	movw	r30, r8
   1077a:	ee 0d       	add	r30, r14
   1077c:	ff 1d       	adc	r31, r15
   1077e:	48 e0       	ldi	r20, 0x08	; 8
   10780:	50 e0       	ldi	r21, 0x00	; 0
   10782:	60 e0       	ldi	r22, 0x00	; 0
   10784:	70 e0       	ldi	r23, 0x00	; 0
   10786:	80 81       	ld	r24, Z
   10788:	91 81       	ldd	r25, Z+1	; 0x01
   1078a:	0e 94 99 47 	call	0x8f32	; 0x8f32 <strtol>
   1078e:	ab 01       	movw	r20, r22
    }
#endif

    if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
    {
        int mode = 0777;
   10790:	02 c0       	rjmp	.+4      	; 0x10796 <posix_tests+0x1e2>
   10792:	4f ef       	ldi	r20, 0xFF	; 255
        if((ind+2) <= argc)
        {
            mode = strtol(argv[ind+1],NULL,8);
        }
        mkdir(argv[ind],mode);
   10794:	51 e0       	ldi	r21, 0x01	; 1
   10796:	05 2e       	mov	r0, r21
   10798:	00 0c       	add	r0, r0
   1079a:	66 0b       	sbc	r22, r22
   1079c:	77 0b       	sbc	r23, r23
   1079e:	73 01       	movw	r14, r6
   107a0:	ee 0c       	add	r14, r14
   107a2:	ff 1c       	adc	r15, r15
   107a4:	f4 01       	movw	r30, r8
   107a6:	ee 0d       	add	r30, r14
   107a8:	ff 1d       	adc	r31, r15
   107aa:	80 81       	ld	r24, Z
   107ac:	91 81       	ldd	r25, Z+1	; 0x01
   107ae:	0e 94 a8 78 	call	0xf150	; 0xf150 <mkdir>
        return(1);
    }

    if (MATCHARGS(ptr,"page", (ind + 1), argc))
   107b2:	74 c0       	rjmp	.+232    	; 0x1089c <posix_tests+0x2e8>
   107b4:	98 01       	movw	r18, r16
   107b6:	a7 01       	movw	r20, r14
   107b8:	60 e5       	ldi	r22, 0x50	; 80
   107ba:	7b e0       	ldi	r23, 0x0B	; 11
   107bc:	c6 01       	movw	r24, r12
   107be:	0e 94 47 33 	call	0x668e	; 0x668e <MATCHARGS>
   107c2:	89 2b       	or	r24, r25
    {
        setpage(atoi(argv[ind]));
   107c4:	79 f0       	breq	.+30     	; 0x107e4 <posix_tests+0x230>
   107c6:	73 01       	movw	r14, r6
   107c8:	ee 0c       	add	r14, r14
   107ca:	ff 1c       	adc	r15, r15
   107cc:	f4 01       	movw	r30, r8
   107ce:	ee 0d       	add	r30, r14
   107d0:	ff 1d       	adc	r31, r15
   107d2:	80 81       	ld	r24, Z
   107d4:	91 81       	ldd	r25, Z+1	; 0x01
   107d6:	0e 94 f7 47 	call	0x8fee	; 0x8fee <atoi>
/// @retrun void
static int _pagesize = 25;
MEMSPACE
int setpage(int count)
{
    _pagesize = count;
   107da:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <_pagesize+0x1>
   107de:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <_pagesize>
    {
        setpage(atoi(argv[ind]));
        return(1);
    }

    if (MATCHARGS(ptr,"pwd", (ind + 0), argc))
   107e2:	5c c0       	rjmp	.+184    	; 0x1089c <posix_tests+0x2e8>
   107e4:	98 01       	movw	r18, r16
   107e6:	a3 01       	movw	r20, r6
   107e8:	65 e5       	ldi	r22, 0x55	; 85
   107ea:	7b e0       	ldi	r23, 0x0B	; 11
   107ec:	c6 01       	movw	r24, r12
   107ee:	0e 94 47 33 	call	0x668e	; 0x668e <MATCHARGS>
   107f2:	89 2b       	or	r24, r25
    {
        char path[256];
        printf("%s\n", getcwd(path, sizeof(path)-2));
   107f4:	a9 f0       	breq	.+42     	; 0x10820 <posix_tests+0x26c>
   107f6:	6e ef       	ldi	r22, 0xFE	; 254
   107f8:	70 e0       	ldi	r23, 0x00	; 0
   107fa:	ce 01       	movw	r24, r28
   107fc:	01 96       	adiw	r24, 0x01	; 1
   107fe:	0e 94 83 78 	call	0xf106	; 0xf106 <getcwd>
   10802:	9f 93       	push	r25
   10804:	8f 93       	push	r24
   10806:	8e ed       	ldi	r24, 0xDE	; 222
   10808:	9d e0       	ldi	r25, 0x0D	; 13
   1080a:	1f 92       	push	r1
   1080c:	9f 93       	push	r25
   1080e:	8f 93       	push	r24
   10810:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   10814:	0f 90       	pop	r0
   10816:	0f 90       	pop	r0
   10818:	0f 90       	pop	r0
   1081a:	0f 90       	pop	r0
   1081c:	0f 90       	pop	r0
        return(1);
    }

    if (MATCHARGS(ptr,"rename", (ind + 2), argc))
   1081e:	3e c0       	rjmp	.+124    	; 0x1089c <posix_tests+0x2e8>
   10820:	98 01       	movw	r18, r16
   10822:	a5 01       	movw	r20, r10
   10824:	69 e5       	ldi	r22, 0x59	; 89
   10826:	7b e0       	ldi	r23, 0x0B	; 11
   10828:	c6 01       	movw	r24, r12
   1082a:	0e 94 47 33 	call	0x668e	; 0x668e <MATCHARGS>
   1082e:	89 2b       	or	r24, r25
    {
        rename(argv[ind],argv[ind+1]);
   10830:	69 f0       	breq	.+26     	; 0x1084c <posix_tests+0x298>
   10832:	ee 0c       	add	r14, r14
   10834:	ff 1c       	adc	r15, r15
   10836:	f4 01       	movw	r30, r8
   10838:	ee 0d       	add	r30, r14
   1083a:	ff 1d       	adc	r31, r15
   1083c:	60 81       	ld	r22, Z
   1083e:	71 81       	ldd	r23, Z+1	; 0x01
   10840:	32 97       	sbiw	r30, 0x02	; 2
   10842:	80 81       	ld	r24, Z
   10844:	91 81       	ldd	r25, Z+1	; 0x01
   10846:	0e 94 d6 78 	call	0xf1ac	; 0xf1ac <rename>
        return(1);
    }

    if (MATCHARGS(ptr,"rm", (ind + 1), argc))
   1084a:	28 c0       	rjmp	.+80     	; 0x1089c <posix_tests+0x2e8>
   1084c:	98 01       	movw	r18, r16
   1084e:	a7 01       	movw	r20, r14
   10850:	60 e6       	ldi	r22, 0x60	; 96
   10852:	7b e0       	ldi	r23, 0x0B	; 11
   10854:	c6 01       	movw	r24, r12
   10856:	0e 94 47 33 	call	0x668e	; 0x668e <MATCHARGS>
   1085a:	89 2b       	or	r24, r25
    {
        unlink(argv[ind]);
   1085c:	59 f0       	breq	.+22     	; 0x10874 <posix_tests+0x2c0>
   1085e:	73 01       	movw	r14, r6
   10860:	ee 0c       	add	r14, r14
   10862:	ff 1c       	adc	r15, r15
   10864:	f4 01       	movw	r30, r8
   10866:	ee 0d       	add	r30, r14
   10868:	ff 1d       	adc	r31, r15
   1086a:	80 81       	ld	r24, Z
   1086c:	91 81       	ldd	r25, Z+1	; 0x01
   1086e:	0e 94 f5 78 	call	0xf1ea	; 0xf1ea <unlink>
        dump_stat(&p);
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"rmdir", (ind + 1), argc))
   10872:	14 c0       	rjmp	.+40     	; 0x1089c <posix_tests+0x2e8>
   10874:	98 01       	movw	r18, r16
   10876:	a7 01       	movw	r20, r14
   10878:	63 e6       	ldi	r22, 0x63	; 99
   1087a:	7b e0       	ldi	r23, 0x0B	; 11
   1087c:	c6 01       	movw	r24, r12
   1087e:	0e 94 47 33 	call	0x668e	; 0x668e <MATCHARGS>
   10882:	89 2b       	or	r24, r25
   10884:	09 f4       	brne	.+2      	; 0x10888 <posix_tests+0x2d4>
    {
        rmdir(argv[ind]);
   10886:	a2 ce       	rjmp	.-700    	; 0x105cc <posix_tests+0x18>
   10888:	73 01       	movw	r14, r6
   1088a:	ee 0c       	add	r14, r14
   1088c:	ff 1c       	adc	r15, r15
   1088e:	f4 01       	movw	r30, r8
   10890:	ee 0d       	add	r30, r14
   10892:	ff 1d       	adc	r31, r15
   10894:	80 81       	ld	r24, Z
   10896:	91 81       	ldd	r25, Z+1	; 0x01
   10898:	0e 94 14 79 	call	0xf228	; 0xf228 <rmdir>
        return(1);
   1089c:	81 e0       	ldi	r24, 0x01	; 1
        return(1);
    }
#endif

    return(0);
}
   1089e:	90 e0       	ldi	r25, 0x00	; 0
   108a0:	d3 95       	inc	r29
   108a2:	e0 e1       	ldi	r30, 0x10	; 16
   108a4:	0c 94 11 e6 	jmp	0x1cc22	; 0x1cc22 <__epilogue_restores__+0x4>

000108a8 <gpib_timer_init>:
/// - Has some platform dependent code.
/// @return  void

void gpib_timer_init()
{
    if(set_timers(gpib_timer_task,1) == -1)       // Install Clock Task
   108a8:	61 e0       	ldi	r22, 0x01	; 1
   108aa:	70 e0       	ldi	r23, 0x00	; 0
   108ac:	81 ef       	ldi	r24, 0xF1	; 241
   108ae:	95 e8       	ldi	r25, 0x85	; 133
   108b0:	0e 94 df 35 	call	0x6bbe	; 0x6bbe <set_timers>
   108b4:	01 96       	adiw	r24, 0x01	; 1
   108b6:	51 f4       	brne	.+20     	; 0x108cc <gpib_timer_init+0x24>
        printf("GPIB Clock task init failed\n");
   108b8:	88 e0       	ldi	r24, 0x08	; 8
   108ba:	9f e0       	ldi	r25, 0x0F	; 15
   108bc:	1f 92       	push	r1
   108be:	9f 93       	push	r25
   108c0:	8f 93       	push	r24
   108c2:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   108c6:	0f 90       	pop	r0
   108c8:	0f 90       	pop	r0

    gpib_timer_reset();
   108ca:	0f 90       	pop	r0
   108cc:	78 c1       	rjmp	.+752    	; 0x10bbe <gpib_timer_reset>
   108ce:	08 95       	ret

000108d0 <reverse_8bits>:
/// - GPIB D1 controls last device.
///
/// @param [in] mask: bit mask to reverse.
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
   108d0:	28 2f       	mov	r18, r24
   108d2:	98 e0       	ldi	r25, 0x08	; 8
    int8_t i;
    uint8_t rmask = 0;
   108d4:	80 e0       	ldi	r24, 0x00	; 0
    for(i=0;i<8;++i)
    {
        rmask <<= 1;
   108d6:	88 0f       	add	r24, r24
        if(mask & 1)
   108d8:	20 fd       	sbrc	r18, 0
            rmask |= 1;
   108da:	81 60       	ori	r24, 0x01	; 1
        mask >>= 1;
   108dc:	26 95       	lsr	r18
   108de:	91 50       	subi	r25, 0x01	; 1
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
    int8_t i;
    uint8_t rmask = 0;
    for(i=0;i<8;++i)
   108e0:	d1 f7       	brne	.-12     	; 0x108d6 <reverse_8bits+0x6>
        if(mask & 1)
            rmask |= 1;
        mask >>= 1;
    }
    return(rmask & 0xff);
}
   108e2:	08 95       	ret

000108e4 <ppr_set>:
   108e4:	f5 df       	rcall	.-22     	; 0x108d0 <reverse_8bits>
   108e6:	80 93 61 18 	sts	0x1861, r24	; 0x801861 <_ppr_reg>
   108ea:	0e 94 be 2c 	call	0x597c	; 0x597c <SPI0_TXRX_Byte>
   108ee:	2a 9a       	sbi	0x05, 2	; 5
   108f0:	22 9a       	sbi	0x04, 2	; 4
   108f2:	2a 98       	cbi	0x05, 2	; 5
   108f4:	22 9a       	sbi	0x04, 2	; 4
   108f6:	08 95       	ret

000108f8 <ppr_reg>:
   108f8:	80 91 61 18 	lds	r24, 0x1861	; 0x801861 <_ppr_reg>
   108fc:	e9 cf       	rjmp	.-46     	; 0x108d0 <reverse_8bits>
   108fe:	08 95       	ret

00010900 <ppr_init>:
   10900:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   10904:	81 ff       	sbrs	r24, 1
   10906:	0a c0       	rjmp	.+20     	; 0x1091c <ppr_init+0x1c>
   10908:	85 ef       	ldi	r24, 0xF5	; 245
   1090a:	9e e0       	ldi	r25, 0x0E	; 14
   1090c:	1f 92       	push	r1
   1090e:	9f 93       	push	r25
   10910:	8f 93       	push	r24
   10912:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   10916:	0f 90       	pop	r0
   10918:	0f 90       	pop	r0
   1091a:	0f 90       	pop	r0
   1091c:	80 e0       	ldi	r24, 0x00	; 0
   1091e:	e2 cf       	rjmp	.-60     	; 0x108e4 <ppr_set>
   10920:	08 95       	ret

00010922 <ppr_bit_set>:
   10922:	21 e0       	ldi	r18, 0x01	; 1
   10924:	30 e0       	ldi	r19, 0x00	; 0
   10926:	01 c0       	rjmp	.+2      	; 0x1092a <ppr_bit_set+0x8>
   10928:	22 0f       	add	r18, r18
   1092a:	8a 95       	dec	r24
   1092c:	ea f7       	brpl	.-6      	; 0x10928 <ppr_bit_set+0x6>
   1092e:	80 91 61 18 	lds	r24, 0x1861	; 0x801861 <_ppr_reg>
   10932:	82 2b       	or	r24, r18
   10934:	80 93 61 18 	sts	0x1861, r24	; 0x801861 <_ppr_reg>
   10938:	d5 cf       	rjmp	.-86     	; 0x108e4 <ppr_set>
   1093a:	08 95       	ret

0001093c <ppr_bit_clr>:
   1093c:	21 e0       	ldi	r18, 0x01	; 1
   1093e:	30 e0       	ldi	r19, 0x00	; 0
   10940:	01 c0       	rjmp	.+2      	; 0x10944 <ppr_bit_clr+0x8>
   10942:	22 0f       	add	r18, r18
   10944:	8a 95       	dec	r24
   10946:	ea f7       	brpl	.-6      	; 0x10942 <ppr_bit_clr+0x6>
   10948:	20 95       	com	r18
   1094a:	80 91 61 18 	lds	r24, 0x1861	; 0x801861 <_ppr_reg>
   1094e:	82 23       	and	r24, r18
   10950:	80 93 61 18 	sts	0x1861, r24	; 0x801861 <_ppr_reg>
   10954:	c7 cf       	rjmp	.-114    	; 0x108e4 <ppr_set>
   10956:	08 95       	ret

00010958 <dbf_open>:
   10958:	0f 93       	push	r16
   1095a:	1f 93       	push	r17
   1095c:	cf 93       	push	r28
   1095e:	df 93       	push	r29
   10960:	16 2f       	mov	r17, r22
   10962:	07 2f       	mov	r16, r23
   10964:	0e 94 50 5b 	call	0xb6a0	; 0xb6a0 <f_open>
   10968:	ec 01       	movw	r28, r24
   1096a:	89 2b       	or	r24, r25
   1096c:	89 f0       	breq	.+34     	; 0x10990 <dbf_open+0x38>
   1096e:	0f 93       	push	r16
   10970:	1f 93       	push	r17
   10972:	84 ee       	ldi	r24, 0xE4	; 228
   10974:	9e e0       	ldi	r25, 0x0E	; 14
   10976:	1f 92       	push	r1
   10978:	9f 93       	push	r25
   1097a:	8f 93       	push	r24
   1097c:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   10980:	ce 01       	movw	r24, r28
   10982:	0e 94 c8 71 	call	0xe390	; 0xe390 <put_rc>
   10986:	0f 90       	pop	r0
   10988:	0f 90       	pop	r0
   1098a:	0f 90       	pop	r0
   1098c:	0f 90       	pop	r0
   1098e:	0f 90       	pop	r0
   10990:	ce 01       	movw	r24, r28
   10992:	df 91       	pop	r29
   10994:	cf 91       	pop	r28
   10996:	1f 91       	pop	r17
   10998:	0f 91       	pop	r16
   1099a:	08 95       	ret

0001099c <dbf_read>:
   1099c:	cf 93       	push	r28
   1099e:	df 93       	push	r29
   109a0:	0e 94 0b 5d 	call	0xba16	; 0xba16 <f_read>
   109a4:	ec 01       	movw	r28, r24
   109a6:	89 2b       	or	r24, r25
   109a8:	69 f0       	breq	.+26     	; 0x109c4 <dbf_read+0x28>
   109aa:	87 ed       	ldi	r24, 0xD7	; 215
   109ac:	9e e0       	ldi	r25, 0x0E	; 14
   109ae:	1f 92       	push	r1
   109b0:	9f 93       	push	r25
   109b2:	8f 93       	push	r24
   109b4:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   109b8:	ce 01       	movw	r24, r28
   109ba:	0e 94 c8 71 	call	0xe390	; 0xe390 <put_rc>
   109be:	0f 90       	pop	r0
   109c0:	0f 90       	pop	r0
   109c2:	0f 90       	pop	r0
   109c4:	ce 01       	movw	r24, r28
   109c6:	df 91       	pop	r29
   109c8:	cf 91       	pop	r28
   109ca:	08 95       	ret

000109cc <dbf_write>:
   109cc:	cf 93       	push	r28
   109ce:	df 93       	push	r29
   109d0:	0e 94 56 5e 	call	0xbcac	; 0xbcac <f_write>
   109d4:	ec 01       	movw	r28, r24
   109d6:	89 2b       	or	r24, r25
   109d8:	69 f0       	breq	.+26     	; 0x109f4 <dbf_write+0x28>
   109da:	89 ec       	ldi	r24, 0xC9	; 201
   109dc:	9e e0       	ldi	r25, 0x0E	; 14
   109de:	1f 92       	push	r1
   109e0:	9f 93       	push	r25
   109e2:	8f 93       	push	r24
   109e4:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   109e8:	ce 01       	movw	r24, r28
   109ea:	0e 94 c8 71 	call	0xe390	; 0xe390 <put_rc>
   109ee:	0f 90       	pop	r0
   109f0:	0f 90       	pop	r0
   109f2:	0f 90       	pop	r0
   109f4:	ce 01       	movw	r24, r28
   109f6:	df 91       	pop	r29
   109f8:	cf 91       	pop	r28
   109fa:	08 95       	ret

000109fc <dbf_lseek>:
   109fc:	cf 93       	push	r28
   109fe:	df 93       	push	r29
   10a00:	0e 94 17 62 	call	0xc42e	; 0xc42e <f_lseek>
   10a04:	ec 01       	movw	r28, r24
   10a06:	89 2b       	or	r24, r25
   10a08:	69 f0       	breq	.+26     	; 0x10a24 <dbf_lseek+0x28>
   10a0a:	8c eb       	ldi	r24, 0xBC	; 188
   10a0c:	9e e0       	ldi	r25, 0x0E	; 14
   10a0e:	1f 92       	push	r1
   10a10:	9f 93       	push	r25
   10a12:	8f 93       	push	r24
   10a14:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   10a18:	ce 01       	movw	r24, r28
   10a1a:	0e 94 c8 71 	call	0xe390	; 0xe390 <put_rc>
   10a1e:	0f 90       	pop	r0
   10a20:	0f 90       	pop	r0
   10a22:	0f 90       	pop	r0
   10a24:	ce 01       	movw	r24, r28
   10a26:	df 91       	pop	r29
   10a28:	cf 91       	pop	r28
   10a2a:	08 95       	ret

00010a2c <dbf_close>:
   10a2c:	cf 93       	push	r28
   10a2e:	df 93       	push	r29
   10a30:	0e 94 6d 60 	call	0xc0da	; 0xc0da <f_close>
   10a34:	ec 01       	movw	r28, r24
   10a36:	89 2b       	or	r24, r25
   10a38:	69 f0       	breq	.+26     	; 0x10a54 <dbf_close+0x28>
   10a3a:	8e ea       	ldi	r24, 0xAE	; 174
   10a3c:	9e e0       	ldi	r25, 0x0E	; 14
   10a3e:	1f 92       	push	r1
   10a40:	9f 93       	push	r25
   10a42:	8f 93       	push	r24
   10a44:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   10a48:	ce 01       	movw	r24, r28
   10a4a:	0e 94 c8 71 	call	0xe390	; 0xe390 <put_rc>
   10a4e:	0f 90       	pop	r0
   10a50:	0f 90       	pop	r0
   10a52:	0f 90       	pop	r0
   10a54:	ce 01       	movw	r24, r28
   10a56:	df 91       	pop	r29
   10a58:	cf 91       	pop	r28
   10a5a:	08 95       	ret

00010a5c <dbf_open_read>:
   10a5c:	a6 e2       	ldi	r26, 0x26	; 38
   10a5e:	b2 e0       	ldi	r27, 0x02	; 2
   10a60:	e4 e3       	ldi	r30, 0x34	; 52
   10a62:	f5 e8       	ldi	r31, 0x85	; 133
   10a64:	0c 94 f9 e5 	jmp	0x1cbf2	; 0x1cbf2 <__prologue_saves__+0xc>
   10a68:	4a 01       	movw	r8, r20
   10a6a:	5b 01       	movw	r10, r22
   10a6c:	69 01       	movw	r12, r18
   10a6e:	cb 5d       	subi	r28, 0xDB	; 219
   10a70:	dd 4f       	sbci	r29, 0xFD	; 253
   10a72:	19 82       	std	Y+1, r1	; 0x01
   10a74:	18 82       	st	Y, r1
   10a76:	c5 52       	subi	r28, 0x25	; 37
   10a78:	d2 40       	sbci	r29, 0x02	; 2
   10a7a:	43 e0       	ldi	r20, 0x03	; 3
   10a7c:	bc 01       	movw	r22, r24
   10a7e:	ce 01       	movw	r24, r28
   10a80:	01 96       	adiw	r24, 0x01	; 1
   10a82:	6a df       	rcall	.-300    	; 0x10958 <dbf_open>
   10a84:	89 2b       	or	r24, r25
   10a86:	19 f0       	breq	.+6      	; 0x10a8e <dbf_open_read+0x32>
   10a88:	81 e1       	ldi	r24, 0x11	; 17
   10a8a:	90 e0       	ldi	r25, 0x00	; 0
   10a8c:	2f c0       	rjmp	.+94     	; 0x10aec <dbf_open_read+0x90>
   10a8e:	b5 01       	movw	r22, r10
   10a90:	a4 01       	movw	r20, r8
   10a92:	ce 01       	movw	r24, r28
   10a94:	01 96       	adiw	r24, 0x01	; 1
   10a96:	b2 df       	rcall	.-156    	; 0x109fc <dbf_lseek>
   10a98:	89 2b       	or	r24, r25
   10a9a:	59 f0       	breq	.+22     	; 0x10ab2 <dbf_open_read+0x56>
   10a9c:	85 e0       	ldi	r24, 0x05	; 5
   10a9e:	90 e0       	ldi	r25, 0x00	; 0
   10aa0:	f7 01       	movw	r30, r14
   10aa2:	91 83       	std	Z+1, r25	; 0x01
   10aa4:	80 83       	st	Z, r24
   10aa6:	ce 01       	movw	r24, r28
   10aa8:	01 96       	adiw	r24, 0x01	; 1
   10aaa:	c0 df       	rcall	.-128    	; 0x10a2c <dbf_close>
   10aac:	8f ef       	ldi	r24, 0xFF	; 255
   10aae:	9f ef       	ldi	r25, 0xFF	; 255
   10ab0:	27 c0       	rjmp	.+78     	; 0x10b00 <dbf_open_read+0xa4>
   10ab2:	9e 01       	movw	r18, r28
   10ab4:	2b 5d       	subi	r18, 0xDB	; 219
   10ab6:	3d 4f       	sbci	r19, 0xFD	; 253
   10ab8:	a8 01       	movw	r20, r16
   10aba:	b6 01       	movw	r22, r12
   10abc:	ce 01       	movw	r24, r28
   10abe:	01 96       	adiw	r24, 0x01	; 1
   10ac0:	6d df       	rcall	.-294    	; 0x1099c <dbf_read>
   10ac2:	89 2b       	or	r24, r25
   10ac4:	49 f4       	brne	.+18     	; 0x10ad8 <dbf_open_read+0x7c>
   10ac6:	cb 5d       	subi	r28, 0xDB	; 219
   10ac8:	dd 4f       	sbci	r29, 0xFD	; 253
   10aca:	88 81       	ld	r24, Y
   10acc:	99 81       	ldd	r25, Y+1	; 0x01
   10ace:	c5 52       	subi	r28, 0x25	; 37
   10ad0:	d2 40       	sbci	r29, 0x02	; 2
   10ad2:	08 17       	cp	r16, r24
   10ad4:	19 07       	cpc	r17, r25
   10ad6:	19 f0       	breq	.+6      	; 0x10ade <dbf_open_read+0x82>
   10ad8:	81 e0       	ldi	r24, 0x01	; 1
   10ada:	90 e0       	ldi	r25, 0x00	; 0
   10adc:	e1 cf       	rjmp	.-62     	; 0x10aa0 <dbf_open_read+0x44>
   10ade:	ce 01       	movw	r24, r28
   10ae0:	01 96       	adiw	r24, 0x01	; 1
   10ae2:	a4 df       	rcall	.-184    	; 0x10a2c <dbf_close>
   10ae4:	89 2b       	or	r24, r25
   10ae6:	31 f0       	breq	.+12     	; 0x10af4 <dbf_open_read+0x98>
   10ae8:	80 e1       	ldi	r24, 0x10	; 16
   10aea:	90 e0       	ldi	r25, 0x00	; 0
   10aec:	f7 01       	movw	r30, r14
   10aee:	91 83       	std	Z+1, r25	; 0x01
   10af0:	80 83       	st	Z, r24
   10af2:	dc cf       	rjmp	.-72     	; 0x10aac <dbf_open_read+0x50>
   10af4:	cb 5d       	subi	r28, 0xDB	; 219
   10af6:	dd 4f       	sbci	r29, 0xFD	; 253
   10af8:	88 81       	ld	r24, Y
   10afa:	99 81       	ldd	r25, Y+1	; 0x01
   10afc:	c5 52       	subi	r28, 0x25	; 37
   10afe:	d2 40       	sbci	r29, 0x02	; 2
   10b00:	ca 5d       	subi	r28, 0xDA	; 218
   10b02:	dd 4f       	sbci	r29, 0xFD	; 253
   10b04:	ec e0       	ldi	r30, 0x0C	; 12
   10b06:	0c 94 15 e6 	jmp	0x1cc2a	; 0x1cc2a <__epilogue_restores__+0xc>

00010b0a <dbf_open_write>:
   10b0a:	a6 e2       	ldi	r26, 0x26	; 38
   10b0c:	b2 e0       	ldi	r27, 0x02	; 2
   10b0e:	eb e8       	ldi	r30, 0x8B	; 139
   10b10:	f5 e8       	ldi	r31, 0x85	; 133
   10b12:	0c 94 f9 e5 	jmp	0x1cbf2	; 0x1cbf2 <__prologue_saves__+0xc>
   10b16:	4a 01       	movw	r8, r20
   10b18:	5b 01       	movw	r10, r22
   10b1a:	69 01       	movw	r12, r18
   10b1c:	cb 5d       	subi	r28, 0xDB	; 219
   10b1e:	dd 4f       	sbci	r29, 0xFD	; 253
   10b20:	19 82       	std	Y+1, r1	; 0x01
   10b22:	18 82       	st	Y, r1
   10b24:	c5 52       	subi	r28, 0x25	; 37
   10b26:	d2 40       	sbci	r29, 0x02	; 2
   10b28:	43 e0       	ldi	r20, 0x03	; 3
   10b2a:	bc 01       	movw	r22, r24
   10b2c:	ce 01       	movw	r24, r28
   10b2e:	01 96       	adiw	r24, 0x01	; 1
   10b30:	13 df       	rcall	.-474    	; 0x10958 <dbf_open>
   10b32:	89 2b       	or	r24, r25
   10b34:	19 f0       	breq	.+6      	; 0x10b3c <dbf_open_write+0x32>
   10b36:	81 e1       	ldi	r24, 0x11	; 17
   10b38:	90 e0       	ldi	r25, 0x00	; 0
   10b3a:	2f c0       	rjmp	.+94     	; 0x10b9a <dbf_open_write+0x90>
   10b3c:	b5 01       	movw	r22, r10
   10b3e:	a4 01       	movw	r20, r8
   10b40:	ce 01       	movw	r24, r28
   10b42:	01 96       	adiw	r24, 0x01	; 1
   10b44:	5b df       	rcall	.-330    	; 0x109fc <dbf_lseek>
   10b46:	89 2b       	or	r24, r25
   10b48:	59 f0       	breq	.+22     	; 0x10b60 <dbf_open_write+0x56>
   10b4a:	85 e0       	ldi	r24, 0x05	; 5
   10b4c:	90 e0       	ldi	r25, 0x00	; 0
   10b4e:	f7 01       	movw	r30, r14
   10b50:	91 83       	std	Z+1, r25	; 0x01
   10b52:	80 83       	st	Z, r24
   10b54:	ce 01       	movw	r24, r28
   10b56:	01 96       	adiw	r24, 0x01	; 1
   10b58:	69 df       	rcall	.-302    	; 0x10a2c <dbf_close>
   10b5a:	8f ef       	ldi	r24, 0xFF	; 255
   10b5c:	9f ef       	ldi	r25, 0xFF	; 255
   10b5e:	27 c0       	rjmp	.+78     	; 0x10bae <dbf_open_write+0xa4>
   10b60:	9e 01       	movw	r18, r28
   10b62:	2b 5d       	subi	r18, 0xDB	; 219
   10b64:	3d 4f       	sbci	r19, 0xFD	; 253
   10b66:	a8 01       	movw	r20, r16
   10b68:	b6 01       	movw	r22, r12
   10b6a:	ce 01       	movw	r24, r28
   10b6c:	01 96       	adiw	r24, 0x01	; 1
   10b6e:	2e df       	rcall	.-420    	; 0x109cc <dbf_write>
   10b70:	89 2b       	or	r24, r25
   10b72:	49 f4       	brne	.+18     	; 0x10b86 <dbf_open_write+0x7c>
   10b74:	cb 5d       	subi	r28, 0xDB	; 219
   10b76:	dd 4f       	sbci	r29, 0xFD	; 253
   10b78:	88 81       	ld	r24, Y
   10b7a:	99 81       	ldd	r25, Y+1	; 0x01
   10b7c:	c5 52       	subi	r28, 0x25	; 37
   10b7e:	d2 40       	sbci	r29, 0x02	; 2
   10b80:	08 17       	cp	r16, r24
   10b82:	19 07       	cpc	r17, r25
   10b84:	19 f0       	breq	.+6      	; 0x10b8c <dbf_open_write+0x82>
   10b86:	81 e0       	ldi	r24, 0x01	; 1
   10b88:	90 e0       	ldi	r25, 0x00	; 0
   10b8a:	e1 cf       	rjmp	.-62     	; 0x10b4e <dbf_open_write+0x44>
   10b8c:	ce 01       	movw	r24, r28
   10b8e:	01 96       	adiw	r24, 0x01	; 1
   10b90:	4d df       	rcall	.-358    	; 0x10a2c <dbf_close>
   10b92:	89 2b       	or	r24, r25
   10b94:	31 f0       	breq	.+12     	; 0x10ba2 <dbf_open_write+0x98>
   10b96:	80 e1       	ldi	r24, 0x10	; 16
   10b98:	90 e0       	ldi	r25, 0x00	; 0
   10b9a:	f7 01       	movw	r30, r14
   10b9c:	91 83       	std	Z+1, r25	; 0x01
   10b9e:	80 83       	st	Z, r24
   10ba0:	dc cf       	rjmp	.-72     	; 0x10b5a <dbf_open_write+0x50>
   10ba2:	cb 5d       	subi	r28, 0xDB	; 219
   10ba4:	dd 4f       	sbci	r29, 0xFD	; 253
   10ba6:	88 81       	ld	r24, Y
   10ba8:	99 81       	ldd	r25, Y+1	; 0x01
   10baa:	c5 52       	subi	r28, 0x25	; 37
   10bac:	d2 40       	sbci	r29, 0x02	; 2
   10bae:	ca 5d       	subi	r28, 0xDA	; 218
   10bb0:	dd 4f       	sbci	r29, 0xFD	; 253
   10bb2:	ec e0       	ldi	r30, 0x0C	; 12
   10bb4:	0c 94 15 e6 	jmp	0x1cc2a	; 0x1cc2a <__epilogue_restores__+0xc>

00010bb8 <gpib_timer_elapsed_begin>:
   10bb8:	0c 94 8b 36 	jmp	0x6d16	; 0x6d16 <clock_elapsed_begin>
   10bbc:	08 95       	ret

00010bbe <gpib_timer_reset>:
   10bbe:	f8 94       	cli
   10bc0:	ef ed       	ldi	r30, 0xDF	; 223
   10bc2:	fb e1       	ldi	r31, 0x1B	; 27
   10bc4:	10 82       	st	Z, r1
   10bc6:	11 82       	std	Z+1, r1	; 0x01
   10bc8:	12 82       	std	Z+2, r1	; 0x02
   10bca:	13 82       	std	Z+3, r1	; 0x03
   10bcc:	14 82       	std	Z+4, r1	; 0x04
   10bce:	15 82       	std	Z+5, r1	; 0x05
   10bd0:	16 82       	std	Z+6, r1	; 0x06
   10bd2:	17 82       	std	Z+7, r1	; 0x07
   10bd4:	81 e0       	ldi	r24, 0x01	; 1
   10bd6:	80 87       	std	Z+8, r24	; 0x08
   10bd8:	78 94       	sei
   10bda:	08 95       	ret

00010bdc <gpib_timer_elapsed_end>:
   10bdc:	0c 94 91 36 	jmp	0x6d22	; 0x6d22 <clock_elapsed_end>
   10be0:	08 95       	ret

00010be2 <gpib_timer_task>:
   10be2:	f8 94       	cli
   10be4:	80 91 e3 1b 	lds	r24, 0x1BE3	; 0x801be3 <gpib_timer+0x4>
   10be8:	90 91 e4 1b 	lds	r25, 0x1BE4	; 0x801be4 <gpib_timer+0x5>
   10bec:	a0 91 e5 1b 	lds	r26, 0x1BE5	; 0x801be5 <gpib_timer+0x6>
   10bf0:	b0 91 e6 1b 	lds	r27, 0x1BE6	; 0x801be6 <gpib_timer+0x7>
   10bf4:	89 2b       	or	r24, r25
   10bf6:	8a 2b       	or	r24, r26
   10bf8:	8b 2b       	or	r24, r27
   10bfa:	a1 f0       	breq	.+40     	; 0x10c24 <gpib_timer_task+0x42>
   10bfc:	80 91 e3 1b 	lds	r24, 0x1BE3	; 0x801be3 <gpib_timer+0x4>
   10c00:	90 91 e4 1b 	lds	r25, 0x1BE4	; 0x801be4 <gpib_timer+0x5>
   10c04:	a0 91 e5 1b 	lds	r26, 0x1BE5	; 0x801be5 <gpib_timer+0x6>
   10c08:	b0 91 e6 1b 	lds	r27, 0x1BE6	; 0x801be6 <gpib_timer+0x7>
   10c0c:	01 97       	sbiw	r24, 0x01	; 1
   10c0e:	a1 09       	sbc	r26, r1
   10c10:	b1 09       	sbc	r27, r1
   10c12:	80 93 e3 1b 	sts	0x1BE3, r24	; 0x801be3 <gpib_timer+0x4>
   10c16:	90 93 e4 1b 	sts	0x1BE4, r25	; 0x801be4 <gpib_timer+0x5>
   10c1a:	a0 93 e5 1b 	sts	0x1BE5, r26	; 0x801be5 <gpib_timer+0x6>
   10c1e:	b0 93 e6 1b 	sts	0x1BE6, r27	; 0x801be6 <gpib_timer+0x7>
   10c22:	03 c0       	rjmp	.+6      	; 0x10c2a <gpib_timer_task+0x48>
   10c24:	81 e0       	ldi	r24, 0x01	; 1
   10c26:	80 93 e7 1b 	sts	0x1BE7, r24	; 0x801be7 <gpib_timer+0x8>
   10c2a:	78 94       	sei
   10c2c:	08 95       	ret

00010c2e <gpib_timeout_set>:
   10c2e:	f8 94       	cli
   10c30:	ef ed       	ldi	r30, 0xDF	; 223
   10c32:	fb e1       	ldi	r31, 0x1B	; 27
   10c34:	64 83       	std	Z+4, r22	; 0x04
   10c36:	75 83       	std	Z+5, r23	; 0x05
   10c38:	86 83       	std	Z+6, r24	; 0x06
   10c3a:	97 83       	std	Z+7, r25	; 0x07
   10c3c:	10 86       	std	Z+8, r1	; 0x08
   10c3e:	78 94       	sei
   10c40:	08 95       	ret

00010c42 <gpib_bus_read_init>:
   10c42:	54 98       	cbi	0x0a, 4	; 10
   10c44:	57 98       	cbi	0x0a, 7	; 10
   10c46:	45 98       	cbi	0x08, 5	; 8
   10c48:	3d 9a       	sbi	0x07, 5	; 7
   10c4a:	11 b8       	out	0x01, r1	; 1
   10c4c:	2f ef       	ldi	r18, 0xFF	; 255
   10c4e:	22 b9       	out	0x02, r18	; 2
   10c50:	43 98       	cbi	0x08, 3	; 8
   10c52:	3b 9a       	sbi	0x07, 3	; 7
   10c54:	21 98       	cbi	0x04, 1	; 4
   10c56:	56 98       	cbi	0x0a, 6	; 10
   10c58:	20 98       	cbi	0x04, 0	; 4
   10c5a:	55 98       	cbi	0x0a, 5	; 10
   10c5c:	89 2b       	or	r24, r25
   10c5e:	39 f4       	brne	.+14     	; 0x10c6e <gpib_bus_read_init+0x2c>
   10c60:	52 98       	cbi	0x0a, 2	; 10
   10c62:	53 98       	cbi	0x0a, 3	; 10
   10c64:	8d e0       	ldi	r24, 0x0D	; 13
   10c66:	8a 95       	dec	r24
   10c68:	f1 f7       	brne	.-4      	; 0x10c66 <gpib_bus_read_init+0x24>
   10c6a:	00 00       	nop
   10c6c:	04 c0       	rjmp	.+8      	; 0x10c76 <gpib_bus_read_init+0x34>
   10c6e:	5b 98       	cbi	0x0b, 3	; 11
   10c70:	53 9a       	sbi	0x0a, 3	; 10
   10c72:	5a 98       	cbi	0x0b, 2	; 11
   10c74:	52 9a       	sbi	0x0a, 2	; 10
   10c76:	42 98       	cbi	0x08, 2	; 8
   10c78:	3a 9a       	sbi	0x07, 2	; 7
   10c7a:	44 9a       	sbi	0x08, 4	; 8
   10c7c:	3c 9a       	sbi	0x07, 4	; 7
   10c7e:	8d e0       	ldi	r24, 0x0D	; 13
   10c80:	8a 95       	dec	r24
   10c82:	f1 f7       	brne	.-4      	; 0x10c80 <gpib_bus_read_init+0x3e>
   10c84:	00 00       	nop
   10c86:	08 95       	ret

00010c88 <gpib_bus_init>:
   10c88:	10 92 62 18 	sts	0x1862, r1	; 0x801862 <gpib_unread_f>
   10c8c:	11 b8       	out	0x01, r1	; 1
   10c8e:	8f ef       	ldi	r24, 0xFF	; 255
   10c90:	82 b9       	out	0x02, r24	; 2
   10c92:	21 98       	cbi	0x04, 1	; 4
   10c94:	52 98       	cbi	0x0a, 2	; 10
   10c96:	53 98       	cbi	0x0a, 3	; 10
   10c98:	54 98       	cbi	0x0a, 4	; 10
   10c9a:	57 98       	cbi	0x0a, 7	; 10
   10c9c:	56 98       	cbi	0x0a, 6	; 10
   10c9e:	20 98       	cbi	0x04, 0	; 4
   10ca0:	55 98       	cbi	0x0a, 5	; 10
   10ca2:	45 98       	cbi	0x08, 5	; 8
   10ca4:	3d 9a       	sbi	0x07, 5	; 7
   10ca6:	43 98       	cbi	0x08, 3	; 8
   10ca8:	3b 9a       	sbi	0x07, 3	; 7
   10caa:	42 98       	cbi	0x08, 2	; 8
   10cac:	3a 9a       	sbi	0x07, 2	; 7
   10cae:	44 9a       	sbi	0x08, 4	; 8
   10cb0:	3c 9a       	sbi	0x07, 4	; 7
   10cb2:	8d e0       	ldi	r24, 0x0D	; 13
   10cb4:	8a 95       	dec	r24
   10cb6:	f1 f7       	brne	.-4      	; 0x10cb4 <gpib_bus_init+0x2c>
   10cb8:	00 00       	nop
   10cba:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   10cbe:	82 ff       	sbrs	r24, 2
   10cc0:	0a c0       	rjmp	.+20     	; 0x10cd6 <gpib_bus_init+0x4e>
   10cc2:	81 eb       	ldi	r24, 0xB1	; 177
   10cc4:	91 e1       	ldi	r25, 0x11	; 17
   10cc6:	1f 92       	push	r1
   10cc8:	9f 93       	push	r25
   10cca:	8f 93       	push	r24
   10ccc:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   10cd0:	0f 90       	pop	r0
   10cd2:	0f 90       	pop	r0
   10cd4:	0f 90       	pop	r0
   10cd6:	08 95       	ret

00010cd8 <gpib_state_init>:
   10cd8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   10cdc:	82 ff       	sbrs	r24, 2
   10cde:	0a c0       	rjmp	.+20     	; 0x10cf4 <gpib_state_init+0x1c>
   10ce0:	8e e9       	ldi	r24, 0x9E	; 158
   10ce2:	91 e1       	ldi	r25, 0x11	; 17
   10ce4:	1f 92       	push	r1
   10ce6:	9f 93       	push	r25
   10ce8:	8f 93       	push	r24
   10cea:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   10cee:	0f 90       	pop	r0
   10cf0:	0f 90       	pop	r0
   10cf2:	0f 90       	pop	r0
   10cf4:	05 de       	rcall	.-1014   	; 0x10900 <ppr_init>
   10cf6:	0e 94 9e 90 	call	0x1213c	; 0x1213c <listen_cleanup>
   10cfa:	0e 94 ae 91 	call	0x1235c	; 0x1235c <talk_cleanup>
   10cfe:	10 92 eb 1d 	sts	0x1DEB, r1	; 0x801deb <spoll>
   10d02:	10 92 ee 1d 	sts	0x1DEE, r1	; 0x801dee <talking>
   10d06:	10 92 f1 1d 	sts	0x1DF1, r1	; 0x801df1 <talking_last>
   10d0a:	10 92 f0 1d 	sts	0x1DF0, r1	; 0x801df0 <listening>
   10d0e:	10 92 ea 1d 	sts	0x1DEA, r1	; 0x801dea <listening_last>
   10d12:	10 92 e9 1b 	sts	0x1BE9, r1	; 0x801be9 <lastcmd+0x1>
   10d16:	10 92 e8 1b 	sts	0x1BE8, r1	; 0x801be8 <lastcmd>
   10d1a:	10 92 ed 1d 	sts	0x1DED, r1	; 0x801ded <current+0x1>
   10d1e:	10 92 ec 1d 	sts	0x1DEC, r1	; 0x801dec <current>
   10d22:	10 92 ef 1d 	sts	0x1DEF, r1	; 0x801def <secondary>
   10d26:	08 95       	ret

00010d28 <gpib_enable_PPR>:
   10d28:	cf 93       	push	r28
   10d2a:	df 93       	push	r29
   10d2c:	ec 01       	movw	r28, r24
   10d2e:	88 30       	cpi	r24, 0x08	; 8
   10d30:	91 05       	cpc	r25, r1
   10d32:	78 f0       	brcs	.+30     	; 0x10d52 <gpib_enable_PPR+0x2a>
   10d34:	df 93       	push	r29
   10d36:	cf 93       	push	r28
   10d38:	88 e7       	ldi	r24, 0x78	; 120
   10d3a:	91 e1       	ldi	r25, 0x11	; 17
   10d3c:	1f 92       	push	r1
   10d3e:	9f 93       	push	r25
   10d40:	8f 93       	push	r24
   10d42:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   10d46:	0f 90       	pop	r0
   10d48:	0f 90       	pop	r0
   10d4a:	0f 90       	pop	r0
   10d4c:	0f 90       	pop	r0
   10d4e:	0f 90       	pop	r0
   10d50:	19 c0       	rjmp	.+50     	; 0x10d84 <gpib_enable_PPR+0x5c>
   10d52:	e7 dd       	rcall	.-1074   	; 0x10922 <ppr_bit_set>
   10d54:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   10d58:	81 ff       	sbrs	r24, 1
   10d5a:	14 c0       	rjmp	.+40     	; 0x10d84 <gpib_enable_PPR+0x5c>
   10d5c:	cd dd       	rcall	.-1126   	; 0x108f8 <ppr_reg>
   10d5e:	1f 92       	push	r1
   10d60:	8f 93       	push	r24
   10d62:	df 93       	push	r29
   10d64:	cf 93       	push	r28
   10d66:	8d e5       	ldi	r24, 0x5D	; 93
   10d68:	91 e1       	ldi	r25, 0x11	; 17
   10d6a:	1f 92       	push	r1
   10d6c:	9f 93       	push	r25
   10d6e:	8f 93       	push	r24
   10d70:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   10d74:	8d b7       	in	r24, 0x3d	; 61
   10d76:	9e b7       	in	r25, 0x3e	; 62
   10d78:	07 96       	adiw	r24, 0x07	; 7
   10d7a:	0f b6       	in	r0, 0x3f	; 63
   10d7c:	f8 94       	cli
   10d7e:	9e bf       	out	0x3e, r25	; 62
   10d80:	0f be       	out	0x3f, r0	; 63
   10d82:	8d bf       	out	0x3d, r24	; 61
   10d84:	df 91       	pop	r29
   10d86:	cf 91       	pop	r28
   10d88:	08 95       	ret

00010d8a <gpib_disable_PPR>:
   10d8a:	cf 93       	push	r28
   10d8c:	df 93       	push	r29
   10d8e:	ec 01       	movw	r28, r24
   10d90:	88 30       	cpi	r24, 0x08	; 8
   10d92:	91 05       	cpc	r25, r1
   10d94:	78 f0       	brcs	.+30     	; 0x10db4 <gpib_disable_PPR+0x2a>
   10d96:	df 93       	push	r29
   10d98:	cf 93       	push	r28
   10d9a:	86 e3       	ldi	r24, 0x36	; 54
   10d9c:	91 e1       	ldi	r25, 0x11	; 17
   10d9e:	1f 92       	push	r1
   10da0:	9f 93       	push	r25
   10da2:	8f 93       	push	r24
   10da4:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   10da8:	0f 90       	pop	r0
   10daa:	0f 90       	pop	r0
   10dac:	0f 90       	pop	r0
   10dae:	0f 90       	pop	r0
   10db0:	0f 90       	pop	r0
   10db2:	19 c0       	rjmp	.+50     	; 0x10de6 <gpib_disable_PPR+0x5c>
   10db4:	c3 dd       	rcall	.-1146   	; 0x1093c <ppr_bit_clr>
   10db6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   10dba:	81 ff       	sbrs	r24, 1
   10dbc:	14 c0       	rjmp	.+40     	; 0x10de6 <gpib_disable_PPR+0x5c>
   10dbe:	9c dd       	rcall	.-1224   	; 0x108f8 <ppr_reg>
   10dc0:	1f 92       	push	r1
   10dc2:	8f 93       	push	r24
   10dc4:	df 93       	push	r29
   10dc6:	cf 93       	push	r28
   10dc8:	8b e1       	ldi	r24, 0x1B	; 27
   10dca:	91 e1       	ldi	r25, 0x11	; 17
   10dcc:	1f 92       	push	r1
   10dce:	9f 93       	push	r25
   10dd0:	8f 93       	push	r24
   10dd2:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   10dd6:	8d b7       	in	r24, 0x3d	; 61
   10dd8:	9e b7       	in	r25, 0x3e	; 62
   10dda:	07 96       	adiw	r24, 0x07	; 7
   10ddc:	0f b6       	in	r0, 0x3f	; 63
   10dde:	f8 94       	cli
   10de0:	9e bf       	out	0x3e, r25	; 62
   10de2:	0f be       	out	0x3f, r0	; 63
   10de4:	8d bf       	out	0x3d, r24	; 61
   10de6:	df 91       	pop	r29
   10de8:	cf 91       	pop	r28
   10dea:	08 95       	ret

00010dec <gpib_assert_ifc>:
   10dec:	5c 98       	cbi	0x0b, 4	; 11
   10dee:	54 9a       	sbi	0x0a, 4	; 10
   10df0:	6a ef       	ldi	r22, 0xFA	; 250
   10df2:	70 e0       	ldi	r23, 0x00	; 0
   10df4:	80 e0       	ldi	r24, 0x00	; 0
   10df6:	90 e0       	ldi	r25, 0x00	; 0
   10df8:	0e 94 fc 29 	call	0x53f8	; 0x53f8 <delayus>
   10dfc:	54 98       	cbi	0x0a, 4	; 10
   10dfe:	6a ef       	ldi	r22, 0xFA	; 250
   10e00:	70 e0       	ldi	r23, 0x00	; 0
   10e02:	80 e0       	ldi	r24, 0x00	; 0
   10e04:	90 e0       	ldi	r25, 0x00	; 0
   10e06:	0e 94 fc 29 	call	0x53f8	; 0x53f8 <delayus>
   10e0a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   10e0e:	82 ff       	sbrs	r24, 2
   10e10:	0a c0       	rjmp	.+20     	; 0x10e26 <gpib_assert_ifc+0x3a>
   10e12:	8c ee       	ldi	r24, 0xEC	; 236
   10e14:	90 e1       	ldi	r25, 0x10	; 16
   10e16:	1f 92       	push	r1
   10e18:	9f 93       	push	r25
   10e1a:	8f 93       	push	r24
   10e1c:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   10e20:	0f 90       	pop	r0
   10e22:	0f 90       	pop	r0
   10e24:	0f 90       	pop	r0
   10e26:	08 95       	ret

00010e28 <gpib_unread>:
   10e28:	cf 93       	push	r28
   10e2a:	df 93       	push	r29
   10e2c:	ec 01       	movw	r28, r24
   10e2e:	80 91 62 18 	lds	r24, 0x1862	; 0x801862 <gpib_unread_f>
   10e32:	81 11       	cpse	r24, r1
   10e34:	08 c0       	rjmp	.+16     	; 0x10e46 <gpib_unread+0x1e>
   10e36:	d0 93 f3 1d 	sts	0x1DF3, r29	; 0x801df3 <gpib_unread_data+0x1>
   10e3a:	c0 93 f2 1d 	sts	0x1DF2, r28	; 0x801df2 <gpib_unread_data>
   10e3e:	81 e0       	ldi	r24, 0x01	; 1
   10e40:	80 93 62 18 	sts	0x1862, r24	; 0x801862 <gpib_unread_f>
   10e44:	12 c0       	rjmp	.+36     	; 0x10e6a <gpib_unread+0x42>
   10e46:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   10e4a:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   10e4e:	85 70       	andi	r24, 0x05	; 5
   10e50:	99 27       	eor	r25, r25
   10e52:	89 2b       	or	r24, r25
   10e54:	51 f0       	breq	.+20     	; 0x10e6a <gpib_unread+0x42>
   10e56:	89 ea       	ldi	r24, 0xA9	; 169
   10e58:	90 e1       	ldi	r25, 0x10	; 16
   10e5a:	1f 92       	push	r1
   10e5c:	9f 93       	push	r25
   10e5e:	8f 93       	push	r24
   10e60:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   10e64:	0f 90       	pop	r0
   10e66:	0f 90       	pop	r0
   10e68:	0f 90       	pop	r0
   10e6a:	ce 01       	movw	r24, r28
   10e6c:	df 91       	pop	r29
   10e6e:	cf 91       	pop	r28
   10e70:	08 95       	ret

00010e72 <gpib_bus_read>:

/// @brief Read GPIB data BUS only
/// @return  bus (lower 8 bits)
uint8_t gpib_bus_read()
{
    uint8_t bus = ~(GPIB_BUS_RD());
   10e72:	11 b8       	out	0x01, r1	; 1
   10e74:	80 b1       	in	r24, 0x00	; 0
   10e76:	80 95       	com	r24

    ///@brief if a command byte (ATN low) then strip partity
    if(!GPIB_PIN_TST(ATN))
   10e78:	4e 9b       	sbis	0x09, 6	; 9
        bus &= 0x7f;
   10e7a:	8f 77       	andi	r24, 0x7F	; 127
    else
        bus &= 0xff;
    return(bus);
}
   10e7c:	08 95       	ret

00010e7e <gpib_control_pin_read>:
/// @return  control lines (upper 8 bits)
/// @see gpib_bus_read_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
    if(GPIB_PIN_TST(ATN) == 0 )
   10e7e:	4e 99       	sbic	0x09, 6	; 9
   10e80:	03 c0       	rjmp	.+6      	; 0x10e88 <gpib_control_pin_read+0xa>
        control |= ATN_FLAG;
   10e82:	80 e0       	ldi	r24, 0x00	; 0
   10e84:	94 e0       	ldi	r25, 0x04	; 4
   10e86:	02 c0       	rjmp	.+4      	; 0x10e8c <gpib_control_pin_read+0xe>
///   FIXME We could add a test for read/write state ??
/// @return  control lines (upper 8 bits)
/// @see gpib_bus_read_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
   10e88:	80 e0       	ldi	r24, 0x00	; 0
   10e8a:	90 e0       	ldi	r25, 0x00	; 0
    if(GPIB_PIN_TST(ATN) == 0 )
        control |= ATN_FLAG;
    if(GPIB_PIN_TST(EOI) == 0 )
   10e8c:	18 9b       	sbis	0x03, 0	; 3
        control |= EOI_FLAG;
   10e8e:	91 60       	ori	r25, 0x01	; 1
    if(GPIB_PIN_TST(SRQ) == 0 )
   10e90:	4d 9b       	sbis	0x09, 5	; 9
        control |= SRQ_FLAG;
   10e92:	92 60       	ori	r25, 0x02	; 2
    if(GPIB_PIN_TST(REN) == 0 )
   10e94:	4f 9b       	sbis	0x09, 7	; 9
        control |= REN_FLAG;
   10e96:	98 60       	ori	r25, 0x08	; 8
    if(GPIB_PIN_TST(IFC) == 0 )
   10e98:	4c 9b       	sbis	0x09, 4	; 9
        control |= IFC_FLAG;
   10e9a:	90 61       	ori	r25, 0x10	; 16
    return(control);
}
   10e9c:	08 95       	ret

00010e9e <gpib_handshake_pin_read>:
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
    ///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
    /// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
   10e9e:	19 99       	sbic	0x03, 1	; 3
   10ea0:	03 c0       	rjmp	.+6      	; 0x10ea8 <gpib_handshake_pin_read+0xa>
        control |= DAV_FLAG;
   10ea2:	80 e0       	ldi	r24, 0x00	; 0
   10ea4:	90 e2       	ldi	r25, 0x20	; 32
   10ea6:	02 c0       	rjmp	.+4      	; 0x10eac <gpib_handshake_pin_read+0xe>
/// FIXME: V2 boards can only read pins enabled for read by the SN75162
///   FIXME We could add a test for read/write state ??
/// @return  handshake lines (upper 8 bits)
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
   10ea8:	80 e0       	ldi	r24, 0x00	; 0
   10eaa:	90 e0       	ldi	r25, 0x00	; 0
    ///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
    /// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
        control |= DAV_FLAG;
    if(GPIB_PIN_TST(NRFD) == 0 )
   10eac:	4a 9b       	sbis	0x09, 2	; 9
        control |= NRFD_FLAG;
   10eae:	90 64       	ori	r25, 0x40	; 64
    if(GPIB_PIN_TST(NDAC) == 0 )
   10eb0:	4b 9b       	sbis	0x09, 3	; 9
        control |= NDAC_FLAG;
   10eb2:	90 68       	ori	r25, 0x80	; 128
    return(control);
}
   10eb4:	08 95       	ret

00010eb6 <gpib_write_byte>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
uint16_t gpib_write_byte(uint16_t ch)
{
   10eb6:	2f 92       	push	r2
   10eb8:	3f 92       	push	r3
   10eba:	4f 92       	push	r4
   10ebc:	6f 92       	push	r6
   10ebe:	7f 92       	push	r7
   10ec0:	8f 92       	push	r8
   10ec2:	cf 92       	push	r12
   10ec4:	df 92       	push	r13
   10ec6:	ef 92       	push	r14
   10ec8:	1f 93       	push	r17
   10eca:	cf 93       	push	r28
   10ecc:	df 93       	push	r29
   10ece:	cd b7       	in	r28, 0x3d	; 61
   10ed0:	de b7       	in	r29, 0x3e	; 62
   10ed2:	28 97       	sbiw	r28, 0x08	; 8
   10ed4:	0f b6       	in	r0, 0x3f	; 63
   10ed6:	f8 94       	cli
   10ed8:	de bf       	out	0x3e, r29	; 62
   10eda:	0f be       	out	0x3f, r0	; 63
   10edc:	cd bf       	out	0x3d, r28	; 61
   10ede:	98 87       	std	Y+8, r25	; 0x08
   10ee0:	8f 83       	std	Y+7, r24	; 0x07
    uint8_t tx_state;

	// Wait for DAV to be released before starting
	// Read state for DAV
	gpib_bus_read_init(0);
   10ee2:	80 e0       	ldi	r24, 0x00	; 0
   10ee4:	90 e0       	ldi	r25, 0x00	; 0
   10ee6:	ad de       	rcall	.-678    	; 0x10c42 <gpib_bus_read_init>
	// Bus read init sets the following states
	// GPIB_BUS_LATCH_WR(0xff); // float OC BUS on write
	// GPIB_IO_LOW(PE);			// BUS OC PULLUP

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);
   10ee8:	64 ef       	ldi	r22, 0xF4	; 244
   10eea:	71 e0       	ldi	r23, 0x01	; 1
   10eec:	80 e0       	ldi	r24, 0x00	; 0
   10eee:	90 e0       	ldi	r25, 0x00	; 0
   10ef0:	9e de       	rcall	.-708    	; 0x10c2e <gpib_timeout_set>

	// Bus read init sets the following states
	// GPIB_BUS_LATCH_WR(0xff); // float OC BUS on write
	// GPIB_IO_LOW(PE);			// BUS OC PULLUP

    tx_state = GPIB_TX_START;
   10ef2:	10 e0       	ldi	r17, 0x00	; 0
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for DAV==1>\n");
   10ef4:	87 e1       	ldi	r24, 0x17	; 23
   10ef6:	90 e1       	ldi	r25, 0x10	; 16
   10ef8:	6c 01       	movw	r12, r24
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for NDAC==1>\n");
   10efa:	81 e3       	ldi	r24, 0x31	; 49
   10efc:	90 e1       	ldi	r25, 0x10	; 16
   10efe:	3c 01       	movw	r6, r24
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for NRFD==0>\n");
   10f00:	8c e4       	ldi	r24, 0x4C	; 76
   10f02:	90 e1       	ldi	r25, 0x10	; 16
   10f04:	1c 01       	movw	r2, r24
                }
                if (gpib_timeout_test())
                {
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for NRFD==1 && NDAC == 0>\n");
   10f06:	87 e6       	ldi	r24, 0x67	; 103
   10f08:	90 e1       	ldi	r25, 0x10	; 16
   10f0a:	9c 01       	movw	r18, r24
   10f0c:	40 e0       	ldi	r20, 0x00	; 0
   10f0e:	29 83       	std	Y+1, r18	; 0x01
   10f10:	3a 83       	std	Y+2, r19	; 0x02
   10f12:	4b 83       	std	Y+3, r20	; 0x03
                }
                if (gpib_timeout_test())
                {
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for DAV==1>\n");
   10f14:	8f e8       	ldi	r24, 0x8F	; 143
   10f16:	90 e1       	ldi	r25, 0x10	; 16
   10f18:	9c 01       	movw	r18, r24
   10f1a:	40 e0       	ldi	r20, 0x00	; 0
   10f1c:	2c 83       	std	Y+4, r18	; 0x04
   10f1e:	3d 83       	std	Y+5, r19	; 0x05
   10f20:	4e 83       	std	Y+6, r20	; 0x06
    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);

    while(tx_state != GPIB_TX_DONE )
    {
        if(uart_keyhit(0))
   10f22:	80 e0       	ldi	r24, 0x00	; 0
   10f24:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_keyhit>
   10f28:	89 2b       	or	r24, r25
   10f2a:	09 f0       	breq	.+2      	; 0x10f2e <gpib_write_byte+0x78>
   10f2c:	17 c1       	rjmp	.+558    	; 0x1115c <gpib_write_byte+0x2a6>
        if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

		// IFC is always in for a device
        if(GPIB_PIN_TST(IFC) == 0)
   10f2e:	4c 99       	sbic	0x09, 4	; 9
   10f30:	07 c0       	rjmp	.+14     	; 0x10f40 <gpib_write_byte+0x8a>
        {
            ch |= IFC_FLAG;
   10f32:	8f 81       	ldd	r24, Y+7	; 0x07
   10f34:	98 85       	ldd	r25, Y+8	; 0x08
   10f36:	90 61       	ori	r25, 0x10	; 16
   10f38:	98 87       	std	Y+8, r25	; 0x08
			gpib_bus_init();
   10f3a:	8f 83       	std	Y+7, r24	; 0x07
   10f3c:	a5 de       	rcall	.-694    	; 0x10c88 <gpib_bus_init>
            break;
   10f3e:	0e c1       	rjmp	.+540    	; 0x1115c <gpib_write_byte+0x2a6>
        }

        switch(tx_state)
   10f40:	81 2f       	mov	r24, r17
   10f42:	90 e0       	ldi	r25, 0x00	; 0
   10f44:	8a 30       	cpi	r24, 0x0A	; 10
   10f46:	91 05       	cpc	r25, r1
   10f48:	08 f0       	brcs	.+2      	; 0x10f4c <gpib_write_byte+0x96>
   10f4a:	fe c0       	rjmp	.+508    	; 0x11148 <gpib_write_byte+0x292>
   10f4c:	fc 01       	movw	r30, r24
   10f4e:	e3 54       	subi	r30, 0x43	; 67
   10f50:	ff 4f       	sbci	r31, 0xFF	; 255
   10f52:	0c 94 af e5 	jmp	0x1cb5e	; 0x1cb5e <__tablejump2__>
        {
            case GPIB_TX_START:
                // Wait for release of DAV and EOI before starting
				// IF DAV = 0 the bus is busy
                if(GPIB_PIN_TST(DAV) == 1)
   10f56:	19 9b       	sbis	0x03, 1	; 3
   10f58:	12 c0       	rjmp	.+36     	; 0x10f7e <gpib_write_byte+0xc8>
					// We arive here in Read Mode - see gpib_bus_read_init(0);

					// Switch GBIB driver direction to Write
					// CPU has BUS already set IN with pullups = 0xff - see gpib_bus_read_init(0);
					// When we switch the GPIB drivers will be in OC mode and off the bus (0xff)
					GPIB_IO_HI(TE); // BUS OUT, DAV OUT, NRFD and NDAC IN
   10f5a:	42 9a       	sbi	0x08, 2	; 8
   10f5c:	3a 9a       	sbi	0x07, 2	; 7
					GPIB_IO_LOW(DC);// ATN OUT, EOI OUT, SRQ IN
   10f5e:	44 98       	cbi	0x08, 4	; 8
   10f60:	3c 9a       	sbi	0x07, 4	; 7
#endif
                    // My testing with various GPIB devices shows that we MUST assert ATN EARLY!
                    if(ch & ATN_FLAG)
   10f62:	2f 81       	ldd	r18, Y+7	; 0x07
   10f64:	38 85       	ldd	r19, Y+8	; 0x08
   10f66:	32 ff       	sbrs	r19, 2
   10f68:	03 c0       	rjmp	.+6      	; 0x10f70 <gpib_write_byte+0xba>
                        GPIB_IO_LOW(ATN);   // FYI: SS80 never sends ATN from a device
   10f6a:	5e 98       	cbi	0x0b, 6	; 11
   10f6c:	56 9a       	sbi	0x0a, 6	; 10
   10f6e:	01 c0       	rjmp	.+2      	; 0x10f72 <gpib_write_byte+0xbc>
                    else
                        GPIB_PIN_FLOAT_UP(ATN);
   10f70:	56 98       	cbi	0x0a, 6	; 10

                    gpib_timeout_set(HTIMEOUT);
   10f72:	64 ef       	ldi	r22, 0xF4	; 244
   10f74:	71 e0       	ldi	r23, 0x01	; 1
   10f76:	80 e0       	ldi	r24, 0x00	; 0
   10f78:	90 e0       	ldi	r25, 0x00	; 0
   10f7a:	59 de       	rcall	.-846    	; 0x10c2e <gpib_timeout_set>
                    tx_state = GPIB_TX_WAIT_READY;
   10f7c:	11 e0       	ldi	r17, 0x01	; 1
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10f7e:	80 91 e7 1b 	lds	r24, 0x1BE7	; 0x801be7 <gpib_timer+0x8>
                        GPIB_PIN_FLOAT_UP(ATN);

                    gpib_timeout_set(HTIMEOUT);
                    tx_state = GPIB_TX_WAIT_READY;
                }
                if (gpib_timeout_test())
   10f82:	88 23       	and	r24, r24
   10f84:	71 f2       	breq	.-100    	; 0x10f22 <gpib_write_byte+0x6c>
                {
#if SDEBUG
                    if(debuglevel & (1+4))
   10f86:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   10f8a:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   10f8e:	85 70       	andi	r24, 0x05	; 5
   10f90:	99 27       	eor	r25, r25
   10f92:	89 2b       	or	r24, r25
   10f94:	39 f1       	breq	.+78     	; 0x10fe4 <gpib_write_byte+0x12e>
                        printf("<BUS waiting for DAV==1>\n");
   10f96:	1f 92       	push	r1
   10f98:	3d 81       	ldd	r19, Y+5	; 0x05
   10f9a:	3f 93       	push	r19
   10f9c:	4c 81       	ldd	r20, Y+4	; 0x04
   10f9e:	4f 93       	push	r20
   10fa0:	1c c0       	rjmp	.+56     	; 0x10fda <gpib_write_byte+0x124>
                }
                break;

            case GPIB_TX_WAIT_READY:
                // Wait for ready condition
                if(GPIB_PIN_TST(NRFD) == 1 && GPIB_PIN_TST(NDAC) == 0)
   10fa2:	4a 9b       	sbis	0x09, 2	; 9
   10fa4:	08 c0       	rjmp	.+16     	; 0x10fb6 <gpib_write_byte+0x100>
   10fa6:	4b 99       	sbic	0x09, 3	; 9
                {
                    gpib_timeout_set(HTIMEOUT);
   10fa8:	06 c0       	rjmp	.+12     	; 0x10fb6 <gpib_write_byte+0x100>
   10faa:	64 ef       	ldi	r22, 0xF4	; 244
   10fac:	71 e0       	ldi	r23, 0x01	; 1
   10fae:	80 e0       	ldi	r24, 0x00	; 0
   10fb0:	90 e0       	ldi	r25, 0x00	; 0
                    tx_state = GPIB_TX_PUT_DATA;
   10fb2:	3d de       	rcall	.-902    	; 0x10c2e <gpib_timeout_set>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10fb4:	12 e0       	ldi	r17, 0x02	; 2
   10fb6:	80 91 e7 1b 	lds	r24, 0x1BE7	; 0x801be7 <gpib_timer+0x8>
                if(GPIB_PIN_TST(NRFD) == 1 && GPIB_PIN_TST(NDAC) == 0)
                {
                    gpib_timeout_set(HTIMEOUT);
                    tx_state = GPIB_TX_PUT_DATA;
                }
                if (gpib_timeout_test())
   10fba:	88 23       	and	r24, r24
   10fbc:	09 f4       	brne	.+2      	; 0x10fc0 <gpib_write_byte+0x10a>
                {
#if SDEBUG
                    if(debuglevel & (1+4))
   10fbe:	b1 cf       	rjmp	.-158    	; 0x10f22 <gpib_write_byte+0x6c>
   10fc0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   10fc4:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   10fc8:	85 70       	andi	r24, 0x05	; 5
   10fca:	99 27       	eor	r25, r25
   10fcc:	89 2b       	or	r24, r25
                        printf("<BUS waiting for NRFD==1 && NDAC == 0>\n");
   10fce:	51 f0       	breq	.+20     	; 0x10fe4 <gpib_write_byte+0x12e>
   10fd0:	1f 92       	push	r1
   10fd2:	9a 81       	ldd	r25, Y+2	; 0x02
   10fd4:	9f 93       	push	r25
   10fd6:	29 81       	ldd	r18, Y+1	; 0x01
   10fd8:	2f 93       	push	r18
   10fda:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   10fde:	0f 90       	pop	r0
   10fe0:	0f 90       	pop	r0
#endif
                    ch |= TIMEOUT_FLAG;
   10fe2:	0f 90       	pop	r0
   10fe4:	8f 81       	ldd	r24, Y+7	; 0x07
   10fe6:	98 85       	ldd	r25, Y+8	; 0x08
   10fe8:	90 64       	ori	r25, 0x40	; 64
   10fea:	98 87       	std	Y+8, r25	; 0x08
   10fec:	8f 83       	std	Y+7, r24	; 0x07
                }
                break;

            case GPIB_TX_PUT_DATA:

                if(ch & EOI_FLAG)
   10fee:	b4 c0       	rjmp	.+360    	; 0x11158 <gpib_write_byte+0x2a2>
   10ff0:	2f 81       	ldd	r18, Y+7	; 0x07
   10ff2:	38 85       	ldd	r19, Y+8	; 0x08
   10ff4:	30 ff       	sbrs	r19, 0
                    GPIB_IO_LOW(EOI);
   10ff6:	03 c0       	rjmp	.+6      	; 0x10ffe <gpib_write_byte+0x148>
   10ff8:	28 98       	cbi	0x05, 0	; 5
   10ffa:	20 9a       	sbi	0x04, 0	; 4
                else
                    GPIB_PIN_FLOAT_UP(EOI);
   10ffc:	01 c0       	rjmp	.+2      	; 0x11000 <gpib_write_byte+0x14a>

                GPIB_BUS_WR((ch & 0xff) ^ 0xff);  // Write Data inverted
   10ffe:	20 98       	cbi	0x04, 0	; 4
   11000:	8f ef       	ldi	r24, 0xFF	; 255
   11002:	81 b9       	out	0x01, r24	; 1
   11004:	8f 81       	ldd	r24, Y+7	; 0x07
   11006:	80 95       	com	r24
#if BOARD == 2
				// Switch to Tristate mode to soeed up Write
                GPIB_IO_HI(PE); 
   11008:	82 b9       	out	0x02, r24	; 2
   1100a:	43 9a       	sbi	0x08, 3	; 8
   1100c:	3b 9a       	sbi	0x07, 3	; 7
   1100e:	3d e0       	ldi	r19, 0x0D	; 13
   11010:	3a 95       	dec	r19
#endif
                GPIB_BUS_SETTLE();                // Let Data BUS settle

                gpib_timeout_set(HTIMEOUT);
   11012:	f1 f7       	brne	.-4      	; 0x11010 <gpib_write_byte+0x15a>
   11014:	00 00       	nop
   11016:	64 ef       	ldi	r22, 0xF4	; 244
   11018:	71 e0       	ldi	r23, 0x01	; 1
   1101a:	80 e0       	ldi	r24, 0x00	; 0
   1101c:	90 e0       	ldi	r25, 0x00	; 0
                tx_state = GPIB_TX_SET_DAV_LOW;
   1101e:	07 de       	rcall	.-1010   	; 0x10c2e <gpib_timeout_set>
                break;


            case GPIB_TX_SET_DAV_LOW:
                GPIB_IO_LOW(DAV);
   11020:	13 e0       	ldi	r17, 0x03	; 3
                gpib_timeout_set(HTIMEOUT);
   11022:	7f cf       	rjmp	.-258    	; 0x10f22 <gpib_write_byte+0x6c>
   11024:	29 98       	cbi	0x05, 1	; 5
   11026:	21 9a       	sbi	0x04, 1	; 4
   11028:	64 ef       	ldi	r22, 0xF4	; 244
   1102a:	71 e0       	ldi	r23, 0x01	; 1
   1102c:	80 e0       	ldi	r24, 0x00	; 0
                tx_state = GPIB_TX_WAIT_FOR_NRFD_LOW;
                break;

            ///@brief first device is ready
            case GPIB_TX_WAIT_FOR_NRFD_LOW:
                if (GPIB_PIN_TST(NRFD) == 0)
   1102e:	90 e0       	ldi	r25, 0x00	; 0
   11030:	fe dd       	rcall	.-1028   	; 0x10c2e <gpib_timeout_set>
                {
                    gpib_timeout_set(HTIMEOUT);
   11032:	14 e0       	ldi	r17, 0x04	; 4
   11034:	76 cf       	rjmp	.-276    	; 0x10f22 <gpib_write_byte+0x6c>
   11036:	4a 99       	sbic	0x09, 2	; 9
   11038:	07 c0       	rjmp	.+14     	; 0x11048 <gpib_write_byte+0x192>
   1103a:	64 ef       	ldi	r22, 0xF4	; 244
   1103c:	71 e0       	ldi	r23, 0x01	; 1
                    tx_state = GPIB_TX_WAIT_FOR_NDAC_HI;
   1103e:	80 e0       	ldi	r24, 0x00	; 0
                    break;
   11040:	90 e0       	ldi	r25, 0x00	; 0
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11042:	f5 dd       	rcall	.-1046   	; 0x10c2e <gpib_timeout_set>
   11044:	15 e0       	ldi	r17, 0x05	; 5
                {
                    gpib_timeout_set(HTIMEOUT);
                    tx_state = GPIB_TX_WAIT_FOR_NDAC_HI;
                    break;
                }
                if (gpib_timeout_test())
   11046:	6d cf       	rjmp	.-294    	; 0x10f22 <gpib_write_byte+0x6c>
   11048:	80 91 e7 1b 	lds	r24, 0x1BE7	; 0x801be7 <gpib_timer+0x8>
                {
                    ch |= TIMEOUT_FLAG;
   1104c:	88 23       	and	r24, r24
   1104e:	09 f4       	brne	.+2      	; 0x11052 <gpib_write_byte+0x19c>
   11050:	68 cf       	rjmp	.-304    	; 0x10f22 <gpib_write_byte+0x6c>
   11052:	8f 81       	ldd	r24, Y+7	; 0x07
   11054:	98 85       	ldd	r25, Y+8	; 0x08
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
   11056:	90 64       	ori	r25, 0x40	; 64
   11058:	98 87       	std	Y+8, r25	; 0x08
   1105a:	8f 83       	std	Y+7, r24	; 0x07
   1105c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11060:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11064:	85 70       	andi	r24, 0x05	; 5
   11066:	99 27       	eor	r25, r25
                        printf("<BUS waiting for NRFD==0>\n");
   11068:	89 2b       	or	r24, r25
   1106a:	09 f4       	brne	.+2      	; 0x1106e <gpib_write_byte+0x1b8>
   1106c:	75 c0       	rjmp	.+234    	; 0x11158 <gpib_write_byte+0x2a2>
   1106e:	1f 92       	push	r1
                }
                break;

            ///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)         // Byte byte accepted
   11070:	3f 92       	push	r3
   11072:	2f 92       	push	r2
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11074:	3f c0       	rjmp	.+126    	; 0x110f4 <gpib_write_byte+0x23e>
   11076:	4b 99       	sbic	0x09, 3	; 9
                if(GPIB_PIN_TST(NDAC) == 1)         // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
                    break;
                }
                if (gpib_timeout_test())
   11078:	6b c0       	rjmp	.+214    	; 0x11150 <gpib_write_byte+0x29a>
   1107a:	80 91 e7 1b 	lds	r24, 0x1BE7	; 0x801be7 <gpib_timer+0x8>
                {
                    ch |= TIMEOUT_FLAG;
   1107e:	88 23       	and	r24, r24
   11080:	09 f4       	brne	.+2      	; 0x11084 <gpib_write_byte+0x1ce>
   11082:	4f cf       	rjmp	.-354    	; 0x10f22 <gpib_write_byte+0x6c>
   11084:	2f 81       	ldd	r18, Y+7	; 0x07
   11086:	38 85       	ldd	r19, Y+8	; 0x08
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
   11088:	30 64       	ori	r19, 0x40	; 64
   1108a:	38 87       	std	Y+8, r19	; 0x08
   1108c:	2f 83       	std	Y+7, r18	; 0x07
   1108e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11092:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11096:	85 70       	andi	r24, 0x05	; 5
   11098:	99 27       	eor	r25, r25
                        printf("<BUS waiting for NDAC==1>\n");
   1109a:	89 2b       	or	r24, r25
   1109c:	09 f4       	brne	.+2      	; 0x110a0 <gpib_write_byte+0x1ea>
   1109e:	5c c0       	rjmp	.+184    	; 0x11158 <gpib_write_byte+0x2a2>
                }
                break;

            ///@release BUS
            case GPIB_TX_SET_DAV_HI:
                GPIB_PIN_FLOAT_UP(DAV);
   110a0:	1f 92       	push	r1
   110a2:	7f 92       	push	r7
   110a4:	6f 92       	push	r6
   110a6:	26 c0       	rjmp	.+76     	; 0x110f4 <gpib_write_byte+0x23e>
				GPIB_BUS_SETTLE();			// give some time

				gpib_bus_read_init(0);		// Free BUS, NOT busy
   110a8:	21 98       	cbi	0x04, 1	; 4
   110aa:	3d e0       	ldi	r19, 0x0D	; 13
   110ac:	3a 95       	dec	r19
   110ae:	f1 f7       	brne	.-4      	; 0x110ac <gpib_write_byte+0x1f6>

                gpib_timeout_set(HTIMEOUT);
   110b0:	00 00       	nop
   110b2:	80 e0       	ldi	r24, 0x00	; 0
   110b4:	90 e0       	ldi	r25, 0x00	; 0
   110b6:	c5 dd       	rcall	.-1142   	; 0x10c42 <gpib_bus_read_init>
   110b8:	64 ef       	ldi	r22, 0xF4	; 244
   110ba:	71 e0       	ldi	r23, 0x01	; 1
                tx_state = GPIB_TX_WAIT_FOR_DAV_HI;
   110bc:	80 e0       	ldi	r24, 0x00	; 0
                break;
   110be:	90 e0       	ldi	r25, 0x00	; 0

			/// We are in read mode now
            ///@wait for DAV to finish float HI - finishing floating HI
            case GPIB_TX_WAIT_FOR_DAV_HI:
                if(GPIO_PIN_TST(DAV) == 1)
   110c0:	b6 dd       	rcall	.-1172   	; 0x10c2e <gpib_timeout_set>
   110c2:	17 e0       	ldi	r17, 0x07	; 7
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   110c4:	2e cf       	rjmp	.-420    	; 0x10f22 <gpib_write_byte+0x6c>
   110c6:	19 99       	sbic	0x03, 1	; 3
                if(GPIO_PIN_TST(DAV) == 1)
                {
                    tx_state = GPIB_TX_FINISH;
                    break;
                }
                if (gpib_timeout_test())
   110c8:	45 c0       	rjmp	.+138    	; 0x11154 <gpib_write_byte+0x29e>
   110ca:	80 91 e7 1b 	lds	r24, 0x1BE7	; 0x801be7 <gpib_timer+0x8>
                {
                    ch |= TIMEOUT_FLAG;
   110ce:	88 23       	and	r24, r24
   110d0:	09 f4       	brne	.+2      	; 0x110d4 <gpib_write_byte+0x21e>
   110d2:	27 cf       	rjmp	.-434    	; 0x10f22 <gpib_write_byte+0x6c>
   110d4:	8f 81       	ldd	r24, Y+7	; 0x07
   110d6:	98 85       	ldd	r25, Y+8	; 0x08
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
   110d8:	90 64       	ori	r25, 0x40	; 64
   110da:	98 87       	std	Y+8, r25	; 0x08
   110dc:	8f 83       	std	Y+7, r24	; 0x07
   110de:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   110e2:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   110e6:	85 70       	andi	r24, 0x05	; 5
                        printf("<BUS waiting for DAV==1>\n");
   110e8:	99 27       	eor	r25, r25
   110ea:	89 2b       	or	r24, r25
   110ec:	a9 f1       	breq	.+106    	; 0x11158 <gpib_write_byte+0x2a2>
   110ee:	1f 92       	push	r1
   110f0:	df 92       	push	r13
   110f2:	cf 92       	push	r12
   110f4:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   110f8:	0f 90       	pop	r0
                tx_state = GPIB_TX_DONE;
                break;

            case GPIB_TX_ERROR:
#if SDEBUG
                if(debuglevel & (1+4))
   110fa:	0f 90       	pop	r0
   110fc:	0f 90       	pop	r0
   110fe:	2c c0       	rjmp	.+88     	; 0x11158 <gpib_write_byte+0x2a2>
   11100:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11104:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11108:	85 70       	andi	r24, 0x05	; 5
                    printf("<NRFD=%d,NDAV=%d>\n", GPIB_PIN_TST(NRFD),GPIB_PIN_TST(NDAC));
   1110a:	99 27       	eor	r25, r25
   1110c:	89 2b       	or	r24, r25
   1110e:	c1 f0       	breq	.+48     	; 0x11140 <gpib_write_byte+0x28a>
   11110:	99 b1       	in	r25, 0x09	; 9
   11112:	89 b1       	in	r24, 0x09	; 9
   11114:	93 fb       	bst	r25, 3
   11116:	99 27       	eor	r25, r25
   11118:	90 f9       	bld	r25, 0
   1111a:	1f 92       	push	r1
   1111c:	9f 93       	push	r25
   1111e:	82 fb       	bst	r24, 2
   11120:	88 27       	eor	r24, r24
   11122:	80 f9       	bld	r24, 0
   11124:	1f 92       	push	r1
   11126:	8f 93       	push	r24
   11128:	84 e0       	ldi	r24, 0x04	; 4
   1112a:	90 e1       	ldi	r25, 0x10	; 16
   1112c:	1f 92       	push	r1
   1112e:	9f 93       	push	r25
   11130:	8f 93       	push	r24
   11132:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   11136:	0f b6       	in	r0, 0x3f	; 63
#endif
// Free BUS, BUSY on error
				gpib_bus_read_init(1);		
   11138:	f8 94       	cli
   1113a:	de bf       	out	0x3e, r29	; 62
   1113c:	0f be       	out	0x3f, r0	; 63
   1113e:	cd bf       	out	0x3d, r28	; 61
                tx_state = GPIB_TX_DONE;
                break;
   11140:	81 e0       	ldi	r24, 0x01	; 1
	// GPIB_IO_LOW(PE);			// BUS OC PULLUP

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);

    while(tx_state != GPIB_TX_DONE )
   11142:	90 e0       	ldi	r25, 0x00	; 0
   11144:	7e dd       	rcall	.-1284   	; 0x10c42 <gpib_bus_read_init>
   11146:	0a c0       	rjmp	.+20     	; 0x1115c <gpib_write_byte+0x2a6>
   11148:	1a 30       	cpi	r17, 0x0A	; 10

            ///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)         // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
   1114a:	09 f0       	breq	.+2      	; 0x1114e <gpib_write_byte+0x298>
   1114c:	ea ce       	rjmp	.-556    	; 0x10f22 <gpib_write_byte+0x6c>
			/// We are in read mode now
            ///@wait for DAV to finish float HI - finishing floating HI
            case GPIB_TX_WAIT_FOR_DAV_HI:
                if(GPIO_PIN_TST(DAV) == 1)
                {
                    tx_state = GPIB_TX_FINISH;
   1114e:	06 c0       	rjmp	.+12     	; 0x1115c <gpib_write_byte+0x2a6>
   11150:	16 e0       	ldi	r17, 0x06	; 6
                    break;
                }
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
   11152:	e7 ce       	rjmp	.-562    	; 0x10f22 <gpib_write_byte+0x6c>
   11154:	18 e0       	ldi	r17, 0x08	; 8
            case GPIB_TX_DONE:
                break;
        }
    }
    return(ch);
}
   11156:	e5 ce       	rjmp	.-566    	; 0x10f22 <gpib_write_byte+0x6c>
   11158:	19 e0       	ldi	r17, 0x09	; 9
   1115a:	e3 ce       	rjmp	.-570    	; 0x10f22 <gpib_write_byte+0x6c>
   1115c:	8f 81       	ldd	r24, Y+7	; 0x07
   1115e:	98 85       	ldd	r25, Y+8	; 0x08
   11160:	28 96       	adiw	r28, 0x08	; 8
   11162:	0f b6       	in	r0, 0x3f	; 63
   11164:	f8 94       	cli
   11166:	de bf       	out	0x3e, r29	; 62
   11168:	0f be       	out	0x3f, r0	; 63
   1116a:	cd bf       	out	0x3d, r28	; 61
   1116c:	df 91       	pop	r29
   1116e:	cf 91       	pop	r28
   11170:	1f 91       	pop	r17
   11172:	ef 90       	pop	r14
   11174:	df 90       	pop	r13
   11176:	cf 90       	pop	r12
   11178:	8f 90       	pop	r8
   1117a:	7f 90       	pop	r7
   1117c:	6f 90       	pop	r6
   1117e:	4f 90       	pop	r4
   11180:	3f 90       	pop	r3
   11182:	2f 90       	pop	r2
   11184:	08 95       	ret

00011186 <gpib_decode_header>:
/// @see: gpib.h _FLAGS defines for a full list is control lines we track
/// @see: gpib_trace()
/// @return void
///@param[in] fo: FILE pointer or "stdout"
void gpib_decode_header( FILE *fo)
{
   11186:	cf 93       	push	r28
   11188:	df 93       	push	r29
   1118a:	ec 01       	movw	r28, r24
    if(fo == NULL)
   1118c:	89 2b       	or	r24, r25
   1118e:	21 f4       	brne	.+8      	; 0x11198 <gpib_decode_header+0x12>
        fo = stdout;
   11190:	c0 91 c1 1b 	lds	r28, 0x1BC1	; 0x801bc1 <__iob+0x2>
   11194:	d0 91 c2 1b 	lds	r29, 0x1BC2	; 0x801bc2 <__iob+0x3>
        
    fprintf(fo,"===========================================\n");
   11198:	be 01       	movw	r22, r28
   1119a:	85 e7       	ldi	r24, 0x75	; 117
   1119c:	9b e0       	ldi	r25, 0x0B	; 11
   1119e:	0e 94 a8 77 	call	0xef50	; 0xef50 <fputs>
    fprintf(fo,"GPIB bus state\n");
   111a2:	be 01       	movw	r22, r28
   111a4:	82 ea       	ldi	r24, 0xA2	; 162
   111a6:	9b e0       	ldi	r25, 0x0B	; 11
   111a8:	0e 94 a8 77 	call	0xef50	; 0xef50 <fputs>
    fprintf(fo,"HH . AESRPITB gpib\n");
   111ac:	be 01       	movw	r22, r28
   111ae:	82 eb       	ldi	r24, 0xB2	; 178
   111b0:	9b e0       	ldi	r25, 0x0B	; 11
   111b2:	0e 94 a8 77 	call	0xef50	; 0xef50 <fputs>
    fprintf(fo,"HH = Hex value of Command or Data\n");
   111b6:	be 01       	movw	r22, r28
   111b8:	86 ec       	ldi	r24, 0xC6	; 198
   111ba:	9b e0       	ldi	r25, 0x0B	; 11
   111bc:	0e 94 a8 77 	call	0xef50	; 0xef50 <fputs>
    fprintf(fo,"   . = ASCII of XX only for 0x20 .. 0x7e\n");
   111c0:	be 01       	movw	r22, r28
   111c2:	89 ee       	ldi	r24, 0xE9	; 233
   111c4:	9b e0       	ldi	r25, 0x0B	; 11
   111c6:	0e 94 a8 77 	call	0xef50	; 0xef50 <fputs>
    fprintf(fo,"     A = ATN\n");
   111ca:	be 01       	movw	r22, r28
   111cc:	83 e1       	ldi	r24, 0x13	; 19
   111ce:	9c e0       	ldi	r25, 0x0C	; 12
   111d0:	0e 94 a8 77 	call	0xef50	; 0xef50 <fputs>
    fprintf(fo,"      E = EOI\n");
   111d4:	be 01       	movw	r22, r28
   111d6:	81 e2       	ldi	r24, 0x21	; 33
   111d8:	9c e0       	ldi	r25, 0x0C	; 12
   111da:	0e 94 a8 77 	call	0xef50	; 0xef50 <fputs>
    fprintf(fo,"       S = SRQ\n");
   111de:	be 01       	movw	r22, r28
   111e0:	80 e3       	ldi	r24, 0x30	; 48
   111e2:	9c e0       	ldi	r25, 0x0C	; 12
   111e4:	0e 94 a8 77 	call	0xef50	; 0xef50 <fputs>
    fprintf(fo,"        R = REN\n");
   111e8:	be 01       	movw	r22, r28
   111ea:	80 e4       	ldi	r24, 0x40	; 64
   111ec:	9c e0       	ldi	r25, 0x0C	; 12
   111ee:	0e 94 a8 77 	call	0xef50	; 0xef50 <fputs>
    fprintf(fo,"         I = IFC\n");
   111f2:	be 01       	movw	r22, r28
   111f4:	81 e5       	ldi	r24, 0x51	; 81
   111f6:	9c e0       	ldi	r25, 0x0C	; 12
   111f8:	0e 94 a8 77 	call	0xef50	; 0xef50 <fputs>
    fprintf(fo,"          P = Parallel Poll seen\n");
   111fc:	be 01       	movw	r22, r28
   111fe:	83 e6       	ldi	r24, 0x63	; 99
   11200:	9c e0       	ldi	r25, 0x0C	; 12
   11202:	0e 94 a8 77 	call	0xef50	; 0xef50 <fputs>
    fprintf(fo,"           T = TIMEOUT\n");
   11206:	be 01       	movw	r22, r28
   11208:	85 e8       	ldi	r24, 0x85	; 133
   1120a:	9c e0       	ldi	r25, 0x0C	; 12
   1120c:	0e 94 a8 77 	call	0xef50	; 0xef50 <fputs>
    fprintf(fo,"            B = BUS_ERROR\n");
   11210:	be 01       	movw	r22, r28
   11212:	8d e9       	ldi	r24, 0x9D	; 157
   11214:	9c e0       	ldi	r25, 0x0C	; 12
   11216:	0e 94 a8 77 	call	0xef50	; 0xef50 <fputs>
    fprintf(fo,"              GPIB commands\n");
   1121a:	be 01       	movw	r22, r28
   1121c:	88 eb       	ldi	r24, 0xB8	; 184
   1121e:	9c e0       	ldi	r25, 0x0C	; 12
   11220:	0e 94 a8 77 	call	0xef50	; 0xef50 <fputs>
}
   11224:	df 91       	pop	r29
   11226:	cf 91       	pop	r28
   11228:	08 95       	ret

0001122a <gpib_trace_display>:
/// @return  void
/// Note the bits we can read depends on what hardware verions we have
/// V2 hardware can only read status bits based on GPIB control buffer direction
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
   1122a:	a0 e8       	ldi	r26, 0x80	; 128
   1122c:	b0 e0       	ldi	r27, 0x00	; 0
   1122e:	eb e1       	ldi	r30, 0x1B	; 27
   11230:	f9 e8       	ldi	r31, 0x89	; 137
   11232:	0c 94 f9 e5 	jmp	0x1cbf2	; 0x1cbf2 <__prologue_saves__+0xc>
   11236:	8c 01       	movw	r16, r24
   11238:	5b 01       	movw	r10, r22
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
    extern FILE *gpib_log_fp;

    str[0] = 0;
   1123a:	19 82       	std	Y+1, r1	; 0x01
   1123c:	4c 01       	movw	r8, r24
   1123e:	88 24       	eor	r8, r8
   11240:	44 e0       	ldi	r20, 0x04	; 4
   11242:	94 22       	and	r9, r20
   11244:	ce 01       	movw	r24, r28
   11246:	01 96       	adiw	r24, 0x01	; 1
   11248:	6c 01       	movw	r12, r24

    // Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
   1124a:	62 30       	cpi	r22, 0x02	; 2
   1124c:	71 05       	cpc	r23, r1
   1124e:	f0 f4       	brcc	.+60     	; 0x1128c <gpib_trace_display+0x62>
    {
        uint8_t printable = ' ';                          // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   11250:	81 14       	cp	r8, r1
   11252:	91 04       	cpc	r9, r1
   11254:	29 f4       	brne	.+10     	; 0x11260 <gpib_trace_display+0x36>
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
   11256:	80 2f       	mov	r24, r16

    // Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                          // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   11258:	90 ee       	ldi	r25, 0xE0	; 224
   1125a:	90 0f       	add	r25, r16
   1125c:	9f 35       	cpi	r25, 0x5F	; 95
   1125e:	08 f0       	brcs	.+2      	; 0x11262 <gpib_trace_display+0x38>
    str[0] = 0;

    // Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                          // Data
   11260:	80 e2       	ldi	r24, 0x20	; 32
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
            printable = bus;
        sprintf(str, "%02X %c ", (int)bus & 0xff, (int)printable);
   11262:	1f 92       	push	r1
   11264:	8f 93       	push	r24
   11266:	c8 01       	movw	r24, r16
   11268:	99 27       	eor	r25, r25
   1126a:	9f 93       	push	r25
   1126c:	8f 93       	push	r24
   1126e:	8b ef       	ldi	r24, 0xFB	; 251
   11270:	9f e0       	ldi	r25, 0x0F	; 15
   11272:	1f 92       	push	r1
   11274:	9f 93       	push	r25
   11276:	8f 93       	push	r24
   11278:	df 92       	push	r13
   1127a:	cf 92       	push	r12
   1127c:	0e 94 4a 47 	call	0x8e94	; 0x8e94 <sprintf_P>
   11280:	0f b6       	in	r0, 0x3f	; 63
   11282:	f8 94       	cli
   11284:	de bf       	out	0x3e, r29	; 62
   11286:	0f be       	out	0x3f, r0	; 63
   11288:	cd bf       	out	0x3d, r28	; 61
   1128a:	0e c0       	rjmp	.+28     	; 0x112a8 <gpib_trace_display+0x7e>
    }
    else
    {
        sprintf(str, "     ");
   1128c:	85 ef       	ldi	r24, 0xF5	; 245
   1128e:	9f e0       	ldi	r25, 0x0F	; 15
   11290:	1f 92       	push	r1
   11292:	9f 93       	push	r25
   11294:	8f 93       	push	r24
   11296:	df 92       	push	r13
   11298:	cf 92       	push	r12
   1129a:	0e 94 4a 47 	call	0x8e94	; 0x8e94 <sprintf_P>
   1129e:	0f 90       	pop	r0
   112a0:	0f 90       	pop	r0
   112a2:	0f 90       	pop	r0
   112a4:	0f 90       	pop	r0
   112a6:	0f 90       	pop	r0
    }

    tmp = str + strlen(str);
   112a8:	f6 01       	movw	r30, r12
   112aa:	01 90       	ld	r0, Z+
   112ac:	00 20       	and	r0, r0
   112ae:	e9 f7       	brne	.-6      	; 0x112aa <gpib_trace_display+0x80>
   112b0:	31 97       	sbiw	r30, 0x01	; 1
   112b2:	cf 01       	movw	r24, r30
   112b4:	01 96       	adiw	r24, 0x01	; 1

    if(status & ATN_FLAG)
   112b6:	81 14       	cp	r8, r1
   112b8:	91 04       	cpc	r9, r1
   112ba:	11 f0       	breq	.+4      	; 0x112c0 <gpib_trace_display+0x96>
        *tmp++ = 'A';
   112bc:	21 e4       	ldi	r18, 0x41	; 65
   112be:	01 c0       	rjmp	.+2      	; 0x112c2 <gpib_trace_display+0x98>
    else
        *tmp++ = '-';
   112c0:	2d e2       	ldi	r18, 0x2D	; 45
   112c2:	20 83       	st	Z, r18
   112c4:	dc 01       	movw	r26, r24
   112c6:	11 96       	adiw	r26, 0x01	; 1

    if(status & EOI_FLAG)
   112c8:	10 ff       	sbrs	r17, 0
   112ca:	02 c0       	rjmp	.+4      	; 0x112d0 <gpib_trace_display+0xa6>
        *tmp++ = 'E';
   112cc:	25 e4       	ldi	r18, 0x45	; 69
   112ce:	01 c0       	rjmp	.+2      	; 0x112d2 <gpib_trace_display+0xa8>
    else
        *tmp++ = '-';
   112d0:	2d e2       	ldi	r18, 0x2D	; 45
   112d2:	fc 01       	movw	r30, r24
   112d4:	20 83       	st	Z, r18
   112d6:	fd 01       	movw	r30, r26
   112d8:	31 96       	adiw	r30, 0x01	; 1

    if(status & SRQ_FLAG)
   112da:	11 ff       	sbrs	r17, 1
   112dc:	02 c0       	rjmp	.+4      	; 0x112e2 <gpib_trace_display+0xb8>
        *tmp++ = 'S';
   112de:	83 e5       	ldi	r24, 0x53	; 83
   112e0:	01 c0       	rjmp	.+2      	; 0x112e4 <gpib_trace_display+0xba>
    else
        *tmp++ = '-';
   112e2:	8d e2       	ldi	r24, 0x2D	; 45
   112e4:	8c 93       	st	X, r24
   112e6:	df 01       	movw	r26, r30
   112e8:	11 96       	adiw	r26, 0x01	; 1

    if(status & REN_FLAG)
   112ea:	13 ff       	sbrs	r17, 3
   112ec:	02 c0       	rjmp	.+4      	; 0x112f2 <gpib_trace_display+0xc8>
        *tmp++ = 'R';
   112ee:	82 e5       	ldi	r24, 0x52	; 82
   112f0:	01 c0       	rjmp	.+2      	; 0x112f4 <gpib_trace_display+0xca>
    else
        *tmp++ = '-';
   112f2:	8d e2       	ldi	r24, 0x2D	; 45
   112f4:	80 83       	st	Z, r24
   112f6:	fd 01       	movw	r30, r26
   112f8:	31 96       	adiw	r30, 0x01	; 1

    if(status & IFC_FLAG)
   112fa:	14 ff       	sbrs	r17, 4
   112fc:	02 c0       	rjmp	.+4      	; 0x11302 <gpib_trace_display+0xd8>
        *tmp++ = 'I';
   112fe:	89 e4       	ldi	r24, 0x49	; 73
   11300:	01 c0       	rjmp	.+2      	; 0x11304 <gpib_trace_display+0xda>
    else
        *tmp++ = '-';
   11302:	8d e2       	ldi	r24, 0x2D	; 45
   11304:	8c 93       	st	X, r24

    if(trace_state == TRACE_DISABLE)
   11306:	a1 14       	cp	r10, r1
   11308:	b1 04       	cpc	r11, r1
   1130a:	d1 f4       	brne	.+52     	; 0x11340 <gpib_trace_display+0x116>
   1130c:	df 01       	movw	r26, r30
   1130e:	11 96       	adiw	r26, 0x01	; 1
    {
        if(status & PP_FLAG)
   11310:	15 ff       	sbrs	r17, 5
   11312:	02 c0       	rjmp	.+4      	; 0x11318 <gpib_trace_display+0xee>
            *tmp++ = 'P';
   11314:	80 e5       	ldi	r24, 0x50	; 80
   11316:	01 c0       	rjmp	.+2      	; 0x1131a <gpib_trace_display+0xf0>
        else
            *tmp++ = '-';
   11318:	8d e2       	ldi	r24, 0x2D	; 45
   1131a:	80 83       	st	Z, r24
   1131c:	fd 01       	movw	r30, r26
   1131e:	31 96       	adiw	r30, 0x01	; 1
        if(status & TIMEOUT_FLAG)
   11320:	16 ff       	sbrs	r17, 6
   11322:	02 c0       	rjmp	.+4      	; 0x11328 <gpib_trace_display+0xfe>
            *tmp++ = 'T';
   11324:	84 e5       	ldi	r24, 0x54	; 84
   11326:	01 c0       	rjmp	.+2      	; 0x1132a <gpib_trace_display+0x100>
        else
            *tmp++ = '-';
   11328:	8d e2       	ldi	r24, 0x2D	; 45
   1132a:	8c 93       	st	X, r24
   1132c:	cf 01       	movw	r24, r30
   1132e:	01 96       	adiw	r24, 0x01	; 1
        if(status & BUS_ERROR_FLAG)
            *tmp++ = 'B';
   11330:	7c 01       	movw	r14, r24
            *tmp++ = '-';
        if(status & TIMEOUT_FLAG)
            *tmp++ = 'T';
        else
            *tmp++ = '-';
        if(status & BUS_ERROR_FLAG)
   11332:	17 ff       	sbrs	r17, 7
   11334:	02 c0       	rjmp	.+4      	; 0x1133a <gpib_trace_display+0x110>
            *tmp++ = 'B';
   11336:	82 e4       	ldi	r24, 0x42	; 66
   11338:	01 c0       	rjmp	.+2      	; 0x1133c <gpib_trace_display+0x112>
        else
            *tmp++ = '-';
   1133a:	8d e2       	ldi	r24, 0x2D	; 45
   1133c:	80 83       	st	Z, r24
   1133e:	08 c0       	rjmp	.+16     	; 0x11350 <gpib_trace_display+0x126>
    }
    else
    {
        // not used when tracing
        *tmp++ = '-';
   11340:	8d e2       	ldi	r24, 0x2D	; 45
   11342:	80 83       	st	Z, r24
        *tmp++ = '-';
   11344:	81 83       	std	Z+1, r24	; 0x01
        *tmp++ = '-';
   11346:	7f 01       	movw	r14, r30
   11348:	43 e0       	ldi	r20, 0x03	; 3
   1134a:	e4 0e       	add	r14, r20
   1134c:	f1 1c       	adc	r15, r1
   1134e:	82 83       	std	Z+2, r24	; 0x02
    }
    *tmp = 0;
   11350:	f7 01       	movw	r30, r14
   11352:	10 82       	st	Z, r1

    if(trace_state == TRACE_READ || trace_state == TRACE_BUS)
   11354:	f1 e0       	ldi	r31, 0x01	; 1
   11356:	af 1a       	sub	r10, r31
   11358:	b1 08       	sbc	r11, r1
   1135a:	42 e0       	ldi	r20, 0x02	; 2
   1135c:	a4 16       	cp	r10, r20
   1135e:	b1 04       	cpc	r11, r1
   11360:	f0 f4       	brcc	.+60     	; 0x1139e <gpib_trace_display+0x174>
    {
        if(status & DAV_FLAG)
   11362:	15 ff       	sbrs	r17, 5
   11364:	03 c0       	rjmp	.+6      	; 0x1136c <gpib_trace_display+0x142>
            strcat(str,"  DAV");
   11366:	65 ed       	ldi	r22, 0xD5	; 213
   11368:	7c e0       	ldi	r23, 0x0C	; 12
   1136a:	02 c0       	rjmp	.+4      	; 0x11370 <gpib_trace_display+0x146>
        else
            strcat(str,"     ");
   1136c:	62 e3       	ldi	r22, 0x32	; 50
   1136e:	78 e0       	ldi	r23, 0x08	; 8
   11370:	c6 01       	movw	r24, r12
   11372:	0e 94 77 32 	call	0x64ee	; 0x64ee <strcat>
        if(status & NRFD_FLAG)
   11376:	16 ff       	sbrs	r17, 6
   11378:	03 c0       	rjmp	.+6      	; 0x11380 <gpib_trace_display+0x156>
            strcat(str," NRFD");
   1137a:	6b ed       	ldi	r22, 0xDB	; 219
   1137c:	7c e0       	ldi	r23, 0x0C	; 12
   1137e:	02 c0       	rjmp	.+4      	; 0x11384 <gpib_trace_display+0x15a>
        else
            strcat(str,"     ");
   11380:	62 e3       	ldi	r22, 0x32	; 50
   11382:	78 e0       	ldi	r23, 0x08	; 8
   11384:	c6 01       	movw	r24, r12
   11386:	0e 94 77 32 	call	0x64ee	; 0x64ee <strcat>
        if(status & NDAC_FLAG)
   1138a:	17 ff       	sbrs	r17, 7
   1138c:	03 c0       	rjmp	.+6      	; 0x11394 <gpib_trace_display+0x16a>
            strcat(str," NDAC");
   1138e:	61 ee       	ldi	r22, 0xE1	; 225
   11390:	7c e0       	ldi	r23, 0x0C	; 12
   11392:	02 c0       	rjmp	.+4      	; 0x11398 <gpib_trace_display+0x16e>
        else
            strcat(str,"     ");
   11394:	62 e3       	ldi	r22, 0x32	; 50
   11396:	78 e0       	ldi	r23, 0x08	; 8
   11398:	c6 01       	movw	r24, r12
   1139a:	0e 94 77 32 	call	0x64ee	; 0x64ee <strcat>
    }

    if( (status & ATN_FLAG) )
   1139e:	81 14       	cp	r8, r1
   113a0:	91 04       	cpc	r9, r1
   113a2:	09 f4       	brne	.+2      	; 0x113a6 <gpib_trace_display+0x17c>
   113a4:	58 c0       	rjmp	.+176    	; 0x11456 <gpib_trace_display+0x22c>
    {
        int i;
        int cmd = status & CMD_MASK;
   113a6:	c8 01       	movw	r24, r16
   113a8:	8f 77       	andi	r24, 0x7F	; 127
   113aa:	99 27       	eor	r25, r25
        if(cmd >= 0x020 && cmd <= 0x3e)
   113ac:	9c 01       	movw	r18, r24
   113ae:	20 52       	subi	r18, 0x20	; 32
   113b0:	31 09       	sbc	r19, r1
   113b2:	2f 31       	cpi	r18, 0x1F	; 31
   113b4:	31 05       	cpc	r19, r1
   113b6:	38 f4       	brcc	.+14     	; 0x113c6 <gpib_trace_display+0x19c>
            sprintf(tmp," MLA %02Xh", cmd & 0x1f);
   113b8:	0f 71       	andi	r16, 0x1F	; 31
   113ba:	11 27       	eor	r17, r17
   113bc:	1f 93       	push	r17
   113be:	0f 93       	push	r16
   113c0:	8a ee       	ldi	r24, 0xEA	; 234
   113c2:	9f e0       	ldi	r25, 0x0F	; 15
   113c4:	0c c0       	rjmp	.+24     	; 0x113de <gpib_trace_display+0x1b4>
        else if(cmd >= 0x040 && cmd <= 0x4e)
   113c6:	9c 01       	movw	r18, r24
   113c8:	20 54       	subi	r18, 0x40	; 64
   113ca:	31 09       	sbc	r19, r1
   113cc:	2f 30       	cpi	r18, 0x0F	; 15
   113ce:	31 05       	cpc	r19, r1
   113d0:	98 f4       	brcc	.+38     	; 0x113f8 <gpib_trace_display+0x1ce>
            sprintf(tmp," MTA %02Xh", cmd & 0x1f);
   113d2:	0f 71       	andi	r16, 0x1F	; 31
   113d4:	11 27       	eor	r17, r17
   113d6:	1f 93       	push	r17
   113d8:	0f 93       	push	r16
   113da:	8f ed       	ldi	r24, 0xDF	; 223
   113dc:	9f e0       	ldi	r25, 0x0F	; 15
   113de:	1f 92       	push	r1
   113e0:	9f 93       	push	r25
   113e2:	8f 93       	push	r24
   113e4:	ff 92       	push	r15
   113e6:	ef 92       	push	r14
   113e8:	0e 94 4a 47 	call	0x8e94	; 0x8e94 <sprintf_P>
   113ec:	0f b6       	in	r0, 0x3f	; 63
   113ee:	f8 94       	cli
   113f0:	de bf       	out	0x3e, r29	; 62
   113f2:	0f be       	out	0x3f, r0	; 63
   113f4:	cd bf       	out	0x3d, r28	; 61
   113f6:	2f c0       	rjmp	.+94     	; 0x11456 <gpib_trace_display+0x22c>
        else if(cmd >= 0x060 && cmd <= 0x6f)
   113f8:	9c 01       	movw	r18, r24
   113fa:	20 56       	subi	r18, 0x60	; 96
   113fc:	31 09       	sbc	r19, r1
   113fe:	20 31       	cpi	r18, 0x10	; 16
   11400:	31 05       	cpc	r19, r1
   11402:	28 f0       	brcs	.+10     	; 0x1140e <gpib_trace_display+0x1e4>
   11404:	e9 e8       	ldi	r30, 0x89	; 137
   11406:	f1 e0       	ldi	r31, 0x01	; 1
   11408:	00 e0       	ldi	r16, 0x00	; 0
   1140a:	10 e0       	ldi	r17, 0x00	; 0
   1140c:	09 c0       	rjmp	.+18     	; 0x11420 <gpib_trace_display+0x1f6>
            sprintf(tmp," MSA %02Xh", cmd & 0x1f);
   1140e:	0f 71       	andi	r16, 0x1F	; 31
   11410:	11 27       	eor	r17, r17
   11412:	1f 93       	push	r17
   11414:	0f 93       	push	r16
   11416:	84 ed       	ldi	r24, 0xD4	; 212
   11418:	9f e0       	ldi	r25, 0x0F	; 15
   1141a:	e1 cf       	rjmp	.-62     	; 0x113de <gpib_trace_display+0x1b4>
        else
        {
            for(i=0;gpib_tokens[i].cmd != -1;++i)
   1141c:	0f 5f       	subi	r16, 0xFF	; 255
   1141e:	1f 4f       	sbci	r17, 0xFF	; 255
   11420:	20 81       	ld	r18, Z
   11422:	31 81       	ldd	r19, Z+1	; 0x01
   11424:	2f 3f       	cpi	r18, 0xFF	; 255
   11426:	4f ef       	ldi	r20, 0xFF	; 255
   11428:	34 07       	cpc	r19, r20
   1142a:	a9 f0       	breq	.+42     	; 0x11456 <gpib_trace_display+0x22c>
   1142c:	34 96       	adiw	r30, 0x04	; 4
            {
                if(cmd == gpib_tokens[i].cmd)
   1142e:	82 17       	cp	r24, r18
   11430:	93 07       	cpc	r25, r19
   11432:	a1 f7       	brne	.-24     	; 0x1141c <gpib_trace_display+0x1f2>
                {
                    strcat(tmp," ");
   11434:	66 e3       	ldi	r22, 0x36	; 54
   11436:	78 e0       	ldi	r23, 0x08	; 8
   11438:	c7 01       	movw	r24, r14
   1143a:	0e 94 77 32 	call	0x64ee	; 0x64ee <strcat>
                    strcat(tmp,gpib_tokens[i].name);
   1143e:	00 0f       	add	r16, r16
   11440:	11 1f       	adc	r17, r17
   11442:	00 0f       	add	r16, r16
   11444:	11 1f       	adc	r17, r17
   11446:	f8 01       	movw	r30, r16
   11448:	e7 57       	subi	r30, 0x77	; 119
   1144a:	fe 4f       	sbci	r31, 0xFE	; 254
   1144c:	62 81       	ldd	r22, Z+2	; 0x02
   1144e:	73 81       	ldd	r23, Z+3	; 0x03
   11450:	c7 01       	movw	r24, r14
   11452:	0e 94 77 32 	call	0x64ee	; 0x64ee <strcat>
                }
            }
        }
    }

    if(gpib_log_fp == NULL)
   11456:	20 91 63 18 	lds	r18, 0x1863	; 0x801863 <gpib_log_fp>
   1145a:	30 91 64 18 	lds	r19, 0x1864	; 0x801864 <gpib_log_fp+0x1>
   1145e:	80 91 c1 1b 	lds	r24, 0x1BC1	; 0x801bc1 <__iob+0x2>
   11462:	90 91 c2 1b 	lds	r25, 0x1BC2	; 0x801bc2 <__iob+0x3>
   11466:	23 2b       	or	r18, r19
   11468:	21 f4       	brne	.+8      	; 0x11472 <gpib_trace_display+0x248>
        gpib_log_fp = stdout;
   1146a:	90 93 64 18 	sts	0x1864, r25	; 0x801864 <gpib_log_fp+0x1>
   1146e:	80 93 63 18 	sts	0x1863, r24	; 0x801863 <gpib_log_fp>

    // Echo to console unless file is the console
    if(gpib_log_fp != stdout)
   11472:	20 91 63 18 	lds	r18, 0x1863	; 0x801863 <gpib_log_fp>
   11476:	30 91 64 18 	lds	r19, 0x1864	; 0x801864 <gpib_log_fp+0x1>
   1147a:	82 17       	cp	r24, r18
   1147c:	93 07       	cpc	r25, r19
   1147e:	19 f0       	breq	.+6      	; 0x11486 <gpib_trace_display+0x25c>
        puts(str);
   11480:	c6 01       	movw	r24, r12
   11482:	0e 94 c0 77 	call	0xef80	; 0xef80 <puts>

    // Save to file
    fprintf(gpib_log_fp,"%s\n",str);
   11486:	df 92       	push	r13
   11488:	cf 92       	push	r12
   1148a:	87 ee       	ldi	r24, 0xE7	; 231
   1148c:	9c e0       	ldi	r25, 0x0C	; 12
   1148e:	9f 93       	push	r25
   11490:	8f 93       	push	r24
   11492:	80 91 64 18 	lds	r24, 0x1864	; 0x801864 <gpib_log_fp+0x1>
   11496:	8f 93       	push	r24
   11498:	80 91 63 18 	lds	r24, 0x1863	; 0x801863 <gpib_log_fp>
   1149c:	8f 93       	push	r24
   1149e:	0e 94 4f 7f 	call	0xfe9e	; 0xfe9e <fprintf>
}
   114a2:	0f 90       	pop	r0
   114a4:	0f 90       	pop	r0
   114a6:	0f 90       	pop	r0
   114a8:	0f 90       	pop	r0
   114aa:	0f 90       	pop	r0
   114ac:	0f 90       	pop	r0
   114ae:	c0 58       	subi	r28, 0x80	; 128
   114b0:	df 4f       	sbci	r29, 0xFF	; 255
   114b2:	ec e0       	ldi	r30, 0x0C	; 12
   114b4:	0c 94 15 e6 	jmp	0x1cc2a	; 0x1cc2a <__epilogue_restores__+0xc>

000114b8 <gpib_read_byte>:
///     - Error Flags:
///       - IFC_FLAG
///
/// @return (data bus, control and error status)
uint16_t gpib_read_byte(int trace)
{
   114b8:	af 92       	push	r10
   114ba:	bf 92       	push	r11
   114bc:	cf 92       	push	r12
   114be:	df 92       	push	r13
   114c0:	ff 92       	push	r15
   114c2:	0f 93       	push	r16
   114c4:	1f 93       	push	r17
   114c6:	cf 93       	push	r28
   114c8:	df 93       	push	r29

    ch = 0;
    control_last = 0;

    // If we have an unread state it has already been traced!
    if(gpib_unread_f)
   114ca:	20 91 62 18 	lds	r18, 0x1862	; 0x801862 <gpib_unread_f>
   114ce:	22 23       	and	r18, r18
   114d0:	39 f0       	breq	.+14     	; 0x114e0 <gpib_read_byte+0x28>
    {
        gpib_unread_f = 0;
   114d2:	10 92 62 18 	sts	0x1862, r1	; 0x801862 <gpib_unread_f>
        return(gpib_unread_data);
   114d6:	80 91 f2 1d 	lds	r24, 0x1DF2	; 0x801df2 <gpib_unread_data>
   114da:	90 91 f3 1d 	lds	r25, 0x1DF3	; 0x801df3 <gpib_unread_data+0x1>
   114de:	b8 c0       	rjmp	.+368    	; 0x11650 <gpib_read_byte+0x198>
   114e0:	6c 01       	movw	r12, r24
    }

	gpib_bus_read_init(1); // Busy until we are ready
   114e2:	81 e0       	ldi	r24, 0x01	; 1
   114e4:	90 e0       	ldi	r25, 0x00	; 0
   114e6:	ad db       	rcall	.-2214   	; 0x10c42 <gpib_bus_read_init>


///@brief V2 boards can NOT read all bits on the control bus at once
/// FIXME We could add a test for read/write state ??
///@brief NRFD,NDAC SRQ are outputs
    if(trace)
   114e8:	c1 14       	cp	r12, r1
   114ea:	d1 04       	cpc	r13, r1
    {
        control_last = gpib_control_pin_read();
   114ec:	51 f0       	breq	.+20     	; 0x11502 <gpib_read_byte+0x4a>
   114ee:	c7 dc       	rcall	.-1650   	; 0x10e7e <gpib_control_pin_read>
        control_last |= gpib_handshake_pin_read();
   114f0:	8c 01       	movw	r16, r24
   114f2:	d5 dc       	rcall	.-1622   	; 0x10e9e <gpib_handshake_pin_read>
   114f4:	08 2b       	or	r16, r24
        gpib_trace_display(control_last, TRACE_BUS);
   114f6:	19 2b       	or	r17, r25
   114f8:	62 e0       	ldi	r22, 0x02	; 2
   114fa:	70 e0       	ldi	r23, 0x00	; 0
   114fc:	c8 01       	movw	r24, r16
   114fe:	95 de       	rcall	.-726    	; 0x1122a <gpib_trace_display>
    uint16_t bus, control, control_last;
    extern uint8_t gpib_unread_f;
    extern uint16_t gpib_unread_data;

    ch = 0;
    control_last = 0;
   11500:	02 c0       	rjmp	.+4      	; 0x11506 <gpib_read_byte+0x4e>
   11502:	00 e0       	ldi	r16, 0x00	; 0
        control_last |= gpib_handshake_pin_read();
        gpib_trace_display(control_last, TRACE_BUS);
    }

    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
   11504:	10 e0       	ldi	r17, 0x00	; 0
   11506:	f1 2c       	mov	r15, r1
   11508:	c0 e0       	ldi	r28, 0x00	; 0
    {
        if(uart_keyhit(0))
   1150a:	d0 e0       	ldi	r29, 0x00	; 0
   1150c:	80 e0       	ldi	r24, 0x00	; 0
   1150e:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_keyhit>
   11512:	89 2b       	or	r24, r25
		if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

		// IFC is always in for a device
        if(GPIB_PIN_TST(IFC) == 0)
   11514:	09 f0       	breq	.+2      	; 0x11518 <gpib_read_byte+0x60>
   11516:	78 c0       	rjmp	.+240    	; 0x11608 <gpib_read_byte+0x150>
        {
            ch |= IFC_FLAG;
   11518:	4c 99       	sbic	0x09, 4	; 9
			gpib_bus_init();
   1151a:	03 c0       	rjmp	.+6      	; 0x11522 <gpib_read_byte+0x6a>
   1151c:	d0 61       	ori	r29, 0x10	; 16
   1151e:	b4 db       	rcall	.-2200   	; 0x10c88 <gpib_bus_init>
            break;
        }


        switch(rx_state)
   11520:	73 c0       	rjmp	.+230    	; 0x11608 <gpib_read_byte+0x150>
   11522:	8f 2d       	mov	r24, r15
   11524:	90 e0       	ldi	r25, 0x00	; 0
   11526:	89 30       	cpi	r24, 0x09	; 9
   11528:	91 05       	cpc	r25, r1
   1152a:	08 f0       	brcs	.+2      	; 0x1152e <gpib_read_byte+0x76>
   1152c:	51 c0       	rjmp	.+162    	; 0x115d0 <gpib_read_byte+0x118>
   1152e:	fc 01       	movw	r30, r24
   11530:	e9 53       	subi	r30, 0x39	; 57
   11532:	ff 4f       	sbci	r31, 0xFF	; 255
   11534:	0c 94 af e5 	jmp	0x1cb5e	; 0x1cb5e <__tablejump2__>
   11538:	52 98       	cbi	0x0a, 2	; 10
   1153a:	8d e0       	ldi	r24, 0x0D	; 13
   1153c:	8a 95       	dec	r24
   1153e:	f1 f7       	brne	.-4      	; 0x1153c <gpib_read_byte+0x84>
        {
            case GPIB_RX_START:
                ///@brief Signal that we are ready to ready
                GPIB_PIN_FLOAT_UP(NRFD);
                GPIB_BUS_SETTLE();                // Let Data BUS settle
                rx_state = GPIB_RX_WAIT_FOR_DAV_LOW;
   11540:	00 00       	nop
   11542:	ff 24       	eor	r15, r15
   11544:	f3 94       	inc	r15
                break;

            case GPIB_RX_WAIT_FOR_DAV_LOW:
                ///@brief Wait for Ready acknowledge
                if ( GPIB_PIN_TST(DAV) == 0 )
   11546:	7f c0       	rjmp	.+254    	; 0x11646 <gpib_read_byte+0x18e>
                    rx_state = GPIB_RX_DAV_IS_LOW;
   11548:	19 99       	sbic	0x03, 1	; 3
                break;

// Accept Data
            case GPIB_RX_DAV_IS_LOW:
                GPIB_IO_LOW(NRFD);                // BUSY
   1154a:	7d c0       	rjmp	.+250    	; 0x11646 <gpib_read_byte+0x18e>

                ///@brief gpib_bus_read strips command parity if ATN is low at read time
                bus = gpib_bus_read();
   1154c:	62 e0       	ldi	r22, 0x02	; 2
   1154e:	f6 2e       	mov	r15, r22
   11550:	7a c0       	rjmp	.+244    	; 0x11646 <gpib_read_byte+0x18e>
   11552:	5a 98       	cbi	0x0b, 2	; 11
                ch |= bus;
///@brief V2 boards can NOT read all bits on the control bus at once
/// FIXME could add a test for read/write state ??
///@brief NRFD,NDAC SRQ are outputs
                control_last = gpib_control_pin_read();
   11554:	52 9a       	sbi	0x0a, 2	; 10
   11556:	8d dc       	rcall	.-1766   	; 0x10e72 <gpib_bus_read>
   11558:	a8 2e       	mov	r10, r24
   1155a:	b1 2c       	mov	r11, r1
                ch |= control_last;
   1155c:	90 dc       	rcall	.-1760   	; 0x10e7e <gpib_control_pin_read>
   1155e:	8c 01       	movw	r16, r24

                if(trace)
   11560:	c8 2b       	or	r28, r24
   11562:	d9 2b       	or	r29, r25
   11564:	ca 29       	or	r28, r10
                {
///@brief V2 boards can NOT read all bits on the control bus at once
/// FIXME We could add a test for read/write state ??
///@brief NRFD,NDAC SRQ are outputs
                    control_last |= gpib_handshake_pin_read();
   11566:	db 29       	or	r29, r11
   11568:	c1 14       	cp	r12, r1
   1156a:	d1 04       	cpc	r13, r1
                    gpib_trace_display(bus | control_last, TRACE_READ);
   1156c:	49 f0       	breq	.+18     	; 0x11580 <gpib_read_byte+0xc8>
   1156e:	97 dc       	rcall	.-1746   	; 0x10e9e <gpib_handshake_pin_read>
   11570:	08 2b       	or	r16, r24
   11572:	19 2b       	or	r17, r25
   11574:	61 e0       	ldi	r22, 0x01	; 1
   11576:	70 e0       	ldi	r23, 0x00	; 0
   11578:	c5 01       	movw	r24, r10
   1157a:	80 2b       	or	r24, r16
   1157c:	91 2b       	or	r25, r17
   1157e:	55 de       	rcall	.-854    	; 0x1122a <gpib_trace_display>
                }

                GPIB_PIN_FLOAT_UP(NDAC);
                GPIB_BUS_SETTLE();                // Let Data BUS settle
                gpib_timeout_set(HTIMEOUT);
   11580:	53 98       	cbi	0x0a, 3	; 10
   11582:	8d e0       	ldi	r24, 0x0D	; 13
   11584:	8a 95       	dec	r24
   11586:	f1 f7       	brne	.-4      	; 0x11584 <gpib_read_byte+0xcc>
   11588:	00 00       	nop
#if BOARD == 2
				/// FIXME do we want to keep the next state ?
                rx_state = GPIB_RX_WAIT_FOR_DAV_HI;
   1158a:	64 ef       	ldi	r22, 0xF4	; 244
   1158c:	71 e0       	ldi	r23, 0x01	; 1
   1158e:	80 e0       	ldi	r24, 0x00	; 0
/// FIXME We clould add a test for read/write state ??
///@brief V2 boards we can't - not a big deal as the DAV test works anyway
            ///@brief Wait for NDAC float HI

            case GPIB_RX_WAIT_FOR_NDAC_HI:
                if (GPIB_PIN_TST(NDAC) == 1)
   11590:	90 e0       	ldi	r25, 0x00	; 0
   11592:	4d db       	rcall	.-2406   	; 0x10c2e <gpib_timeout_set>
                {
                    gpib_timeout_set(HTIMEOUT);
   11594:	54 e0       	ldi	r21, 0x04	; 4
   11596:	f5 2e       	mov	r15, r21
   11598:	56 c0       	rjmp	.+172    	; 0x11646 <gpib_read_byte+0x18e>
   1159a:	4b 9b       	sbis	0x09, 3	; 9
   1159c:	0c c0       	rjmp	.+24     	; 0x115b6 <gpib_read_byte+0xfe>
   1159e:	64 ef       	ldi	r22, 0xF4	; 244
                    rx_state = GPIB_RX_WAIT_FOR_DAV_HI;
   115a0:	71 e0       	ldi	r23, 0x01	; 1
   115a2:	80 e0       	ldi	r24, 0x00	; 0
   115a4:	90 e0       	ldi	r25, 0x00	; 0
                }
                break;

            ///@brief Wait for DAV HI
            case GPIB_RX_WAIT_FOR_DAV_HI:
                if (GPIB_PIN_TST(DAV) == 1)
   115a6:	43 db       	rcall	.-2426   	; 0x10c2e <gpib_timeout_set>
   115a8:	44 e0       	ldi	r20, 0x04	; 4
				{
                    rx_state = GPIB_RX_DAV_IS_HI;
   115aa:	f4 2e       	mov	r15, r20
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   115ac:	04 c0       	rjmp	.+8      	; 0x115b6 <gpib_read_byte+0xfe>
            case GPIB_RX_WAIT_FOR_DAV_HI:
                if (GPIB_PIN_TST(DAV) == 1)
				{
                    rx_state = GPIB_RX_DAV_IS_HI;
				}
                if (gpib_timeout_test())
   115ae:	19 9b       	sbis	0x03, 1	; 3
   115b0:	02 c0       	rjmp	.+4      	; 0x115b6 <gpib_read_byte+0xfe>
   115b2:	35 e0       	ldi	r19, 0x05	; 5
                {
                    ch |= TIMEOUT_FLAG;
   115b4:	f3 2e       	mov	r15, r19
                    rx_state = GPIB_RX_ERROR;
   115b6:	80 91 e7 1b 	lds	r24, 0x1BE7	; 0x801be7 <gpib_timer+0x8>
   115ba:	88 23       	and	r24, r24
            case GPIB_RX_ERROR:
                rx_state = GPIB_RX_DONE;
                break;

            case GPIB_RX_DONE:
				gpib_bus_read_init(1); // Busy
   115bc:	09 f4       	brne	.+2      	; 0x115c0 <gpib_read_byte+0x108>
   115be:	43 c0       	rjmp	.+134    	; 0x11646 <gpib_read_byte+0x18e>
   115c0:	d0 64       	ori	r29, 0x40	; 64
                break;
        }

        if(trace)
   115c2:	27 e0       	ldi	r18, 0x07	; 7
   115c4:	f2 2e       	mov	r15, r18
   115c6:	3f c0       	rjmp	.+126    	; 0x11646 <gpib_read_byte+0x18e>
   115c8:	81 e0       	ldi	r24, 0x01	; 1
   115ca:	90 e0       	ldi	r25, 0x00	; 0
   115cc:	3a db       	rcall	.-2444   	; 0x10c42 <gpib_bus_read_init>
   115ce:	04 c0       	rjmp	.+8      	; 0x115d8 <gpib_read_byte+0x120>
   115d0:	c1 14       	cp	r12, r1
        {
			/// V2 boards can not read all control and handshake bits at once
			/// FIXME We could add a test for read/write state ??
			/// NRFD,NDAC SRQ are outputs durring write phase, but not at very start
            control = gpib_control_pin_read();
   115d2:	d1 04       	cpc	r13, r1
   115d4:	99 f0       	breq	.+38     	; 0x115fc <gpib_read_byte+0x144>
   115d6:	05 c0       	rjmp	.+10     	; 0x115e2 <gpib_read_byte+0x12a>
            control |= gpib_handshake_pin_read();
   115d8:	c1 14       	cp	r12, r1
   115da:	d1 04       	cpc	r13, r1
   115dc:	a9 f0       	breq	.+42     	; 0x11608 <gpib_read_byte+0x150>
   115de:	98 e0       	ldi	r25, 0x08	; 8
            if(control_last != control)
   115e0:	f9 2e       	mov	r15, r25
   115e2:	4d dc       	rcall	.-1894   	; 0x10e7e <gpib_control_pin_read>
   115e4:	5c 01       	movw	r10, r24
            {
                gpib_trace_display(control, TRACE_BUS);
   115e6:	5b dc       	rcall	.-1866   	; 0x10e9e <gpib_handshake_pin_read>
   115e8:	a8 2a       	or	r10, r24
   115ea:	b9 2a       	or	r11, r25
   115ec:	a0 16       	cp	r10, r16
   115ee:	b1 06       	cpc	r11, r17
   115f0:	31 f0       	breq	.+12     	; 0x115fe <gpib_read_byte+0x146>
            case GPIB_RX_DONE:
				gpib_bus_read_init(1); // Busy
                break;
        }

        if(trace)
   115f2:	62 e0       	ldi	r22, 0x02	; 2
        control_last |= gpib_handshake_pin_read();
        gpib_trace_display(control_last, TRACE_BUS);
    }

    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
   115f4:	70 e0       	ldi	r23, 0x00	; 0
   115f6:	c5 01       	movw	r24, r10
   115f8:	18 de       	rcall	.-976    	; 0x1122a <gpib_trace_display>
   115fa:	01 c0       	rjmp	.+2      	; 0x115fe <gpib_read_byte+0x146>
   115fc:	58 01       	movw	r10, r16
///  - Remember that NDAC and NRFD are now both LOW!
///  - The spec says to KEEP BOTH LOW when NOT ready to read otherwise
///    we may miss a transfer and cause a controller timeout!
///  - GPIB TX state expects NRFD LOW on entry or it is an ERROR!

    lastcmd = current;
   115fe:	88 e0       	ldi	r24, 0x08	; 8
   11600:	f8 16       	cp	r15, r24
   11602:	11 f0       	breq	.+4      	; 0x11608 <gpib_read_byte+0x150>
   11604:	85 01       	movw	r16, r10
   11606:	82 cf       	rjmp	.-252    	; 0x1150c <gpib_read_byte+0x54>
   11608:	80 91 ec 1d 	lds	r24, 0x1DEC	; 0x801dec <current>
   1160c:	90 91 ed 1d 	lds	r25, 0x1DED	; 0x801ded <current+0x1>

    if(ch & ERROR_MASK || (ch & ATN_FLAG) == 0)
   11610:	90 93 e9 1b 	sts	0x1BE9, r25	; 0x801be9 <lastcmd+0x1>
   11614:	80 93 e8 1b 	sts	0x1BE8, r24	; 0x801be8 <lastcmd>
   11618:	ce 01       	movw	r24, r28
   1161a:	88 27       	eor	r24, r24
        current = 0;
   1161c:	90 7d       	andi	r25, 0xD0	; 208
   1161e:	89 2b       	or	r24, r25
   11620:	11 f4       	brne	.+4      	; 0x11626 <gpib_read_byte+0x16e>
   11622:	d2 fd       	sbrc	r29, 2
   11624:	05 c0       	rjmp	.+10     	; 0x11630 <gpib_read_byte+0x178>
    else
        current = ch & CMD_MASK;
   11626:	10 92 ed 1d 	sts	0x1DED, r1	; 0x801ded <current+0x1>
   1162a:	10 92 ec 1d 	sts	0x1DEC, r1	; 0x801dec <current>
   1162e:	07 c0       	rjmp	.+14     	; 0x1163e <gpib_read_byte+0x186>
   11630:	ce 01       	movw	r24, r28
   11632:	8f 77       	andi	r24, 0x7F	; 127
   11634:	99 27       	eor	r25, r25
   11636:	90 93 ed 1d 	sts	0x1DED, r25	; 0x801ded <current+0x1>
                }
                break;

            ///@brief Ready for next byte
            case GPIB_RX_DAV_IS_HI:
                rx_state = GPIB_RX_FINISH;        // DONE
   1163a:	80 93 ec 1d 	sts	0x1DEC, r24	; 0x801dec <current>
            case GPIB_RX_DONE:
				gpib_bus_read_init(1); // Busy
                break;
        }

        if(trace)
   1163e:	ce 01       	movw	r24, r28
   11640:	07 c0       	rjmp	.+14     	; 0x11650 <gpib_read_byte+0x198>
   11642:	86 e0       	ldi	r24, 0x06	; 6
   11644:	f8 2e       	mov	r15, r24
        current = 0;
    else
        current = ch & CMD_MASK;

    return (ch);
}
   11646:	c1 14       	cp	r12, r1
   11648:	d1 04       	cpc	r13, r1
   1164a:	09 f4       	brne	.+2      	; 0x1164e <gpib_read_byte+0x196>
   1164c:	5f cf       	rjmp	.-322    	; 0x1150c <gpib_read_byte+0x54>
   1164e:	c9 cf       	rjmp	.-110    	; 0x115e2 <gpib_read_byte+0x12a>
   11650:	df 91       	pop	r29
   11652:	cf 91       	pop	r28
   11654:	1f 91       	pop	r17
   11656:	0f 91       	pop	r16
   11658:	ff 90       	pop	r15
   1165a:	df 90       	pop	r13
   1165c:	cf 90       	pop	r12
   1165e:	bf 90       	pop	r11
   11660:	af 90       	pop	r10
   11662:	08 95       	ret

00011664 <gpib_decode>:
/// @see gpib_decode_str()
/// @return  void

void gpib_decode(uint16_t ch)
{
    gpib_trace_display(ch,0);
   11664:	60 e0       	ldi	r22, 0x00	; 0
   11666:	70 e0       	ldi	r23, 0x00	; 0
   11668:	e0 cd       	rjmp	.-1088   	; 0x1122a <gpib_trace_display>
   1166a:	08 95       	ret

0001166c <gpib_read_str>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
int gpib_read_str(uint8_t *buf, int size, uint16_t *status)
{
   1166c:	a0 e0       	ldi	r26, 0x00	; 0
   1166e:	b0 e0       	ldi	r27, 0x00	; 0
   11670:	ec e3       	ldi	r30, 0x3C	; 60
   11672:	fb e8       	ldi	r31, 0x8B	; 139
   11674:	0c 94 fb e5 	jmp	0x1cbf6	; 0x1cbf6 <__prologue_saves__+0x10>
   11678:	5b 01       	movw	r10, r22
   1167a:	6a 01       	movw	r12, r20
    uint16_t val;
    int ind = 0;

    *status &= STATUS_MASK;
   1167c:	fa 01       	movw	r30, r20
   1167e:	20 81       	ld	r18, Z
   11680:	31 81       	ldd	r19, Z+1	; 0x01
   11682:	22 27       	eor	r18, r18
   11684:	31 83       	std	Z+1, r19	; 0x01
   11686:	20 83       	st	Z, r18

    if(!size)
   11688:	67 2b       	or	r22, r23
   1168a:	21 f0       	breq	.+8      	; 0x11694 <gpib_read_str+0x28>
   1168c:	7c 01       	movw	r14, r24
   1168e:	c0 e0       	ldi	r28, 0x00	; 0
   11690:	d0 e0       	ldi	r29, 0x00	; 0
   11692:	28 c0       	rjmp	.+80     	; 0x116e4 <gpib_read_str+0x78>
    {
        if(debuglevel & (1+4))
   11694:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11698:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1169c:	85 70       	andi	r24, 0x05	; 5
   1169e:	99 27       	eor	r25, r25
   116a0:	89 2b       	or	r24, r25
   116a2:	09 f4       	brne	.+2      	; 0x116a6 <gpib_read_str+0x3a>
   116a4:	89 c0       	rjmp	.+274    	; 0x117b8 <gpib_read_str+0x14c>
            printf("gpib_read_str: size = 0\n");
   116a6:	8b eb       	ldi	r24, 0xBB	; 187
   116a8:	9f e0       	ldi	r25, 0x0F	; 15
   116aa:	1f 92       	push	r1
   116ac:	9f 93       	push	r25
   116ae:	8f 93       	push	r24
   116b0:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   116b4:	0f 90       	pop	r0
   116b6:	0f 90       	pop	r0
   116b8:	0f 90       	pop	r0
   116ba:	7e c0       	rjmp	.+252    	; 0x117b8 <gpib_read_str+0x14c>
        {
            *status |= (val & ERROR_MASK);
            break;
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
   116bc:	80 27       	eor	r24, r16
   116be:	91 27       	eor	r25, r17
   116c0:	92 fd       	sbrc	r25, 2
   116c2:	2e c0       	rjmp	.+92     	; 0x11720 <gpib_read_str+0xb4>
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
            gpib_unread(val);
            break;
        }

        if(val & ATN_FLAG)
   116c4:	c8 01       	movw	r24, r16
   116c6:	88 27       	eor	r24, r24
   116c8:	94 70       	andi	r25, 0x04	; 4
   116ca:	12 ff       	sbrs	r17, 2
   116cc:	49 c0       	rjmp	.+146    	; 0x11760 <gpib_read_str+0xf4>
            buf[ind] = (val & CMD_MASK);
   116ce:	20 2f       	mov	r18, r16
   116d0:	2f 77       	andi	r18, 0x7F	; 127
   116d2:	f7 01       	movw	r30, r14
   116d4:	20 83       	st	Z, r18
        else
            buf[ind] = (val & DATA_MASK);
        ++ind;
   116d6:	21 96       	adiw	r28, 0x01	; 1

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   116d8:	89 2b       	or	r24, r25
   116da:	09 f4       	brne	.+2      	; 0x116de <gpib_read_str+0x72>
   116dc:	44 c0       	rjmp	.+136    	; 0x11766 <gpib_read_str+0xfa>
   116de:	ff ef       	ldi	r31, 0xFF	; 255
   116e0:	ef 1a       	sub	r14, r31
   116e2:	ff 0a       	sbc	r15, r31
    {
        if(debuglevel & (1+4))
            printf("gpib_read_str: size = 0\n");
    }

    while(ind < size)
   116e4:	ca 15       	cp	r28, r10
   116e6:	db 05       	cpc	r29, r11
   116e8:	0c f0       	brlt	.+2      	; 0x116ec <gpib_read_str+0x80>
   116ea:	47 c0       	rjmp	.+142    	; 0x1177a <gpib_read_str+0x10e>
    {
        val = gpib_read_byte(NO_TRACE);
   116ec:	80 e0       	ldi	r24, 0x00	; 0
   116ee:	90 e0       	ldi	r25, 0x00	; 0
   116f0:	e3 de       	rcall	.-570    	; 0x114b8 <gpib_read_byte>
   116f2:	8c 01       	movw	r16, r24
#if SDEBUG
        if(debuglevel & 256)
   116f4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   116f8:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   116fc:	90 ff       	sbrs	r25, 0
            gpib_decode(val);
   116fe:	02 c0       	rjmp	.+4      	; 0x11704 <gpib_read_str+0x98>
   11700:	c8 01       	movw	r24, r16
#endif
        if(val & ERROR_MASK)
   11702:	b0 df       	rcall	.-160    	; 0x11664 <gpib_decode>
   11704:	98 01       	movw	r18, r16
   11706:	22 27       	eor	r18, r18
   11708:	30 7d       	andi	r19, 0xD0	; 208
   1170a:	f6 01       	movw	r30, r12
   1170c:	80 81       	ld	r24, Z
   1170e:	91 81       	ldd	r25, Z+1	; 0x01
   11710:	21 15       	cp	r18, r1
   11712:	31 05       	cpc	r19, r1
        {
            *status |= (val & ERROR_MASK);
   11714:	99 f2       	breq	.-90     	; 0x116bc <gpib_read_str+0x50>
   11716:	82 2b       	or	r24, r18
   11718:	93 2b       	or	r25, r19
   1171a:	91 83       	std	Z+1, r25	; 0x01
            break;
   1171c:	80 83       	st	Z, r24
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
        {
            if(debuglevel & (1+4))
   1171e:	30 c0       	rjmp	.+96     	; 0x11780 <gpib_read_str+0x114>
   11720:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11724:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11728:	85 70       	andi	r24, 0x05	; 5
   1172a:	99 27       	eor	r25, r25
   1172c:	89 2b       	or	r24, r25
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
   1172e:	a9 f0       	breq	.+42     	; 0x1175a <gpib_read_str+0xee>
   11730:	c8 01       	movw	r24, r16
   11732:	99 27       	eor	r25, r25
   11734:	9f 93       	push	r25
   11736:	8f 93       	push	r24
   11738:	df 93       	push	r29
   1173a:	cf 93       	push	r28
   1173c:	8e e8       	ldi	r24, 0x8E	; 142
   1173e:	9f e0       	ldi	r25, 0x0F	; 15
   11740:	1f 92       	push	r1
   11742:	9f 93       	push	r25
   11744:	8f 93       	push	r24
   11746:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1174a:	ed b7       	in	r30, 0x3d	; 61
   1174c:	fe b7       	in	r31, 0x3e	; 62
   1174e:	37 96       	adiw	r30, 0x07	; 7
   11750:	0f b6       	in	r0, 0x3f	; 63
   11752:	f8 94       	cli
   11754:	fe bf       	out	0x3e, r31	; 62
            gpib_unread(val);
   11756:	0f be       	out	0x3f, r0	; 63
   11758:	ed bf       	out	0x3d, r30	; 61
   1175a:	c8 01       	movw	r24, r16
            break;
   1175c:	65 db       	rcall	.-2358   	; 0x10e28 <gpib_unread>
        }

        if(val & ATN_FLAG)
            buf[ind] = (val & CMD_MASK);
        else
            buf[ind] = (val & DATA_MASK);
   1175e:	10 c0       	rjmp	.+32     	; 0x11780 <gpib_read_str+0x114>
   11760:	f7 01       	movw	r30, r14
   11762:	00 83       	st	Z, r16
        ++ind;

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   11764:	b8 cf       	rjmp	.-144    	; 0x116d6 <gpib_read_str+0x6a>
   11766:	10 ff       	sbrs	r17, 0
        {

            if(*status & EOI_FLAG)
   11768:	ba cf       	rjmp	.-140    	; 0x116de <gpib_read_str+0x72>
   1176a:	f6 01       	movw	r30, r12
   1176c:	80 81       	ld	r24, Z
   1176e:	91 81       	ldd	r25, Z+1	; 0x01
   11770:	90 fd       	sbrc	r25, 0
                return(ind);
/// @todo TODO
///  decode this state - for now I just set the EOI_FLAG
            *status |= EOI_FLAG;
   11772:	24 c0       	rjmp	.+72     	; 0x117bc <gpib_read_str+0x150>
   11774:	91 60       	ori	r25, 0x01	; 1
   11776:	91 83       	std	Z+1, r25	; 0x01
            break;
        }
    }
    if ( ind != size )
   11778:	80 83       	st	Z, r24
   1177a:	ca 15       	cp	r28, r10
   1177c:	db 05       	cpc	r29, r11
    {
        if(debuglevel & (1+4))
   1177e:	f1 f0       	breq	.+60     	; 0x117bc <gpib_read_str+0x150>
   11780:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11784:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11788:	85 70       	andi	r24, 0x05	; 5
   1178a:	99 27       	eor	r25, r25
   1178c:	89 2b       	or	r24, r25
            printf("[gpib_read_str read(%d) expected(%d)]\n", ind , size);
   1178e:	b1 f0       	breq	.+44     	; 0x117bc <gpib_read_str+0x150>
   11790:	bf 92       	push	r11
   11792:	af 92       	push	r10
   11794:	df 93       	push	r29
   11796:	cf 93       	push	r28
   11798:	87 e6       	ldi	r24, 0x67	; 103
   1179a:	9f e0       	ldi	r25, 0x0F	; 15
   1179c:	1f 92       	push	r1
   1179e:	9f 93       	push	r25
   117a0:	8f 93       	push	r24
   117a2:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   117a6:	ed b7       	in	r30, 0x3d	; 61
   117a8:	fe b7       	in	r31, 0x3e	; 62
   117aa:	37 96       	adiw	r30, 0x07	; 7
   117ac:	0f b6       	in	r0, 0x3f	; 63
   117ae:	f8 94       	cli
   117b0:	fe bf       	out	0x3e, r31	; 62
   117b2:	0f be       	out	0x3f, r0	; 63
   117b4:	ed bf       	out	0x3d, r30	; 61
   117b6:	02 c0       	rjmp	.+4      	; 0x117bc <gpib_read_str+0x150>
   117b8:	c0 e0       	ldi	r28, 0x00	; 0
    }
    return(ind);
}
   117ba:	d0 e0       	ldi	r29, 0x00	; 0
   117bc:	ce 01       	movw	r24, r28
   117be:	cd b7       	in	r28, 0x3d	; 61
   117c0:	de b7       	in	r29, 0x3e	; 62
   117c2:	ea e0       	ldi	r30, 0x0A	; 10
   117c4:	0c 94 17 e6 	jmp	0x1cc2e	; 0x1cc2e <__epilogue_restores__+0x10>

000117c8 <gpib_write_str>:
///     - Error Flags:
///       - IFC_FLAG
/// @see: gpib_write_byte()
/// @see: gpib.h _FLAGS defines for a full list)
int gpib_write_str(uint8_t *buf, int size, uint16_t *status)
{
   117c8:	a0 e0       	ldi	r26, 0x00	; 0
   117ca:	b0 e0       	ldi	r27, 0x00	; 0
   117cc:	ea ee       	ldi	r30, 0xEA	; 234
   117ce:	fb e8       	ldi	r31, 0x8B	; 139
   117d0:	0c 94 fb e5 	jmp	0x1cbf6	; 0x1cbf6 <__prologue_saves__+0x10>
   117d4:	8b 01       	movw	r16, r22
   117d6:	7a 01       	movw	r14, r20
    uint16_t val, ch;
    int ind = 0;

    *status &= STATUS_MASK;
   117d8:	fa 01       	movw	r30, r20
   117da:	20 81       	ld	r18, Z
   117dc:	31 81       	ldd	r19, Z+1	; 0x01
   117de:	22 27       	eor	r18, r18
   117e0:	31 83       	std	Z+1, r19	; 0x01
   117e2:	20 83       	st	Z, r18

    if(!size)
   117e4:	67 2b       	or	r22, r23
   117e6:	21 f0       	breq	.+8      	; 0x117f0 <gpib_write_str+0x28>
   117e8:	6c 01       	movw	r12, r24
   117ea:	c0 e0       	ldi	r28, 0x00	; 0
   117ec:	d0 e0       	ldi	r29, 0x00	; 0
   117ee:	35 c0       	rjmp	.+106    	; 0x1185a <gpib_write_str+0x92>
    {
        if(debuglevel & (1+4))
   117f0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   117f4:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   117f8:	85 70       	andi	r24, 0x05	; 5
   117fa:	99 27       	eor	r25, r25
   117fc:	89 2b       	or	r24, r25
   117fe:	09 f4       	brne	.+2      	; 0x11802 <gpib_write_str+0x3a>
   11800:	54 c0       	rjmp	.+168    	; 0x118aa <gpib_write_str+0xe2>
            printf("gpib_write_str: size = 0\n");
   11802:	8d e4       	ldi	r24, 0x4D	; 77
   11804:	9f e0       	ldi	r25, 0x0F	; 15
   11806:	1f 92       	push	r1
   11808:	9f 93       	push	r25
   1180a:	8f 93       	push	r24
   1180c:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   11810:	0f 90       	pop	r0
   11812:	0f 90       	pop	r0
   11814:	0f 90       	pop	r0
   11816:	49 c0       	rjmp	.+146    	; 0x118aa <gpib_write_str+0xe2>
    }

    while(ind < size)
    {
        ch = buf[ind++] & 0xff;                   // unsigned
   11818:	21 96       	adiw	r28, 0x01	; 1
   1181a:	f6 01       	movw	r30, r12
   1181c:	81 91       	ld	r24, Z+
   1181e:	6f 01       	movw	r12, r30
   11820:	90 e0       	ldi	r25, 0x00	; 0

        if(*status & ATN_FLAG)
   11822:	f7 01       	movw	r30, r14
   11824:	20 81       	ld	r18, Z
   11826:	31 81       	ldd	r19, Z+1	; 0x01
   11828:	32 fd       	sbrc	r19, 2
        {
            ch |= ATN_FLAG;
   1182a:	94 60       	ori	r25, 0x04	; 4
        }

        if( (*status & EOI_FLAG) && (ind == size ) )
   1182c:	30 fd       	sbrc	r19, 0
            ch |= EOI_FLAG;

/// @return Returns

        val = gpib_write_byte(ch);
   1182e:	19 c0       	rjmp	.+50     	; 0x11862 <gpib_write_str+0x9a>
        *status |= (val & ERROR_MASK);
   11830:	42 db       	rcall	.-2428   	; 0x10eb6 <gpib_write_byte>
   11832:	5c 01       	movw	r10, r24
   11834:	aa 24       	eor	r10, r10
   11836:	f0 ed       	ldi	r31, 0xD0	; 208
   11838:	bf 22       	and	r11, r31
   1183a:	f7 01       	movw	r30, r14
   1183c:	20 81       	ld	r18, Z
   1183e:	31 81       	ldd	r19, Z+1	; 0x01
   11840:	2a 29       	or	r18, r10
   11842:	3b 29       	or	r19, r11
   11844:	31 83       	std	Z+1, r19	; 0x01

#if SDEBUG
        if(debuglevel & 256)
   11846:	20 83       	st	Z, r18
   11848:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1184c:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
            gpib_decode(val);
   11850:	30 fd       	sbrc	r19, 0
#endif
        if(val & ERROR_MASK)
   11852:	08 df       	rcall	.-496    	; 0x11664 <gpib_decode>
   11854:	a1 14       	cp	r10, r1
   11856:	b1 04       	cpc	r11, r1
    {
        if(debuglevel & (1+4))
            printf("gpib_write_str: size = 0\n");
    }

    while(ind < size)
   11858:	49 f4       	brne	.+18     	; 0x1186c <gpib_write_str+0xa4>
   1185a:	c0 17       	cp	r28, r16
   1185c:	d1 07       	cpc	r29, r17
   1185e:	e4 f2       	brlt	.-72     	; 0x11818 <gpib_write_str+0x50>
        if(*status & ATN_FLAG)
        {
            ch |= ATN_FLAG;
        }

        if( (*status & EOI_FLAG) && (ind == size ) )
   11860:	05 c0       	rjmp	.+10     	; 0x1186c <gpib_write_str+0xa4>
   11862:	0c 17       	cp	r16, r28
   11864:	1d 07       	cpc	r17, r29
            ch |= EOI_FLAG;
   11866:	21 f7       	brne	.-56     	; 0x11830 <gpib_write_str+0x68>
   11868:	91 60       	ori	r25, 0x01	; 1
        {
            break;
        }

    }                                             // while(ind < size)
    if ( ind != size )
   1186a:	e2 cf       	rjmp	.-60     	; 0x11830 <gpib_write_str+0x68>
   1186c:	c0 17       	cp	r28, r16
   1186e:	d1 07       	cpc	r29, r17
    {
        if(debuglevel & (1+4))
   11870:	f1 f0       	breq	.+60     	; 0x118ae <gpib_write_str+0xe6>
   11872:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11876:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1187a:	85 70       	andi	r24, 0x05	; 5
   1187c:	99 27       	eor	r25, r25
   1187e:	89 2b       	or	r24, r25
            printf("[gpib_write_str sent(%d) expected(%d)]\n", ind,size);
   11880:	b1 f0       	breq	.+44     	; 0x118ae <gpib_write_str+0xe6>
   11882:	1f 93       	push	r17
   11884:	0f 93       	push	r16
   11886:	df 93       	push	r29
   11888:	cf 93       	push	r28
   1188a:	85 e2       	ldi	r24, 0x25	; 37
   1188c:	9f e0       	ldi	r25, 0x0F	; 15
   1188e:	1f 92       	push	r1
   11890:	9f 93       	push	r25
   11892:	8f 93       	push	r24
   11894:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   11898:	8d b7       	in	r24, 0x3d	; 61
   1189a:	9e b7       	in	r25, 0x3e	; 62
   1189c:	07 96       	adiw	r24, 0x07	; 7
   1189e:	0f b6       	in	r0, 0x3f	; 63
   118a0:	f8 94       	cli
   118a2:	9e bf       	out	0x3e, r25	; 62
   118a4:	0f be       	out	0x3f, r0	; 63
   118a6:	8d bf       	out	0x3d, r24	; 61
    uint16_t val, ch;
    int ind = 0;

    *status &= STATUS_MASK;

    if(!size)
   118a8:	02 c0       	rjmp	.+4      	; 0x118ae <gpib_write_str+0xe6>
   118aa:	c0 e0       	ldi	r28, 0x00	; 0
    {
        if(debuglevel & (1+4))
            printf("[gpib_write_str sent(%d) expected(%d)]\n", ind,size);
    }
    return(ind);
}
   118ac:	d0 e0       	ldi	r29, 0x00	; 0
   118ae:	ce 01       	movw	r24, r28
   118b0:	cd b7       	in	r28, 0x3d	; 61
   118b2:	de b7       	in	r29, 0x3e	; 62
   118b4:	ea e0       	ldi	r30, 0x0A	; 10
   118b6:	0c 94 17 e6 	jmp	0x1cc2e	; 0x1cc2e <__epilogue_restores__+0x10>

000118ba <gpib_file_init>:
   118ba:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <debuglevel+0x1>
   118be:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <debuglevel>
   118c2:	8f eb       	ldi	r24, 0xBF	; 191
   118c4:	91 e0       	ldi	r25, 0x01	; 1
   118c6:	0e 94 e2 97 	call	0x12fc4	; 0x12fc4 <Read_Config>
   118ca:	18 16       	cp	r1, r24
   118cc:	19 06       	cpc	r1, r25
   118ce:	b4 f4       	brge	.+44     	; 0x118fc <gpib_file_init+0x42>
   118d0:	9f 93       	push	r25
   118d2:	8f 93       	push	r24
   118d4:	8f eb       	ldi	r24, 0xBF	; 191
   118d6:	91 e0       	ldi	r25, 0x01	; 1
   118d8:	9f 93       	push	r25
   118da:	8f 93       	push	r24
   118dc:	84 e7       	ldi	r24, 0x74	; 116
   118de:	94 e1       	ldi	r25, 0x14	; 20
   118e0:	1f 92       	push	r1
   118e2:	9f 93       	push	r25
   118e4:	8f 93       	push	r24
   118e6:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   118ea:	8d b7       	in	r24, 0x3d	; 61
   118ec:	9e b7       	in	r25, 0x3e	; 62
   118ee:	07 96       	adiw	r24, 0x07	; 7
   118f0:	0f b6       	in	r0, 0x3f	; 63
   118f2:	f8 94       	cli
   118f4:	9e bf       	out	0x3e, r25	; 62
   118f6:	0f be       	out	0x3f, r0	; 63
   118f8:	8d bf       	out	0x3d, r24	; 61
   118fa:	12 c0       	rjmp	.+36     	; 0x11920 <gpib_file_init+0x66>
   118fc:	89 2b       	or	r24, r25
   118fe:	81 f0       	breq	.+32     	; 0x11920 <gpib_file_init+0x66>
   11900:	8f eb       	ldi	r24, 0xBF	; 191
   11902:	91 e0       	ldi	r25, 0x01	; 1
   11904:	9f 93       	push	r25
   11906:	8f 93       	push	r24
   11908:	83 e6       	ldi	r24, 0x63	; 99
   1190a:	94 e1       	ldi	r25, 0x14	; 20
   1190c:	1f 92       	push	r1
   1190e:	9f 93       	push	r25
   11910:	8f 93       	push	r24
   11912:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   11916:	0f 90       	pop	r0
   11918:	0f 90       	pop	r0
   1191a:	0f 90       	pop	r0
   1191c:	0f 90       	pop	r0
   1191e:	0f 90       	pop	r0
   11920:	0e 94 9c 96 	call	0x12d38	; 0x12d38 <set_Config_Defaults>
   11924:	0e 94 46 71 	call	0xe28c	; 0xe28c <mmc_wp_status>
   11928:	89 2b       	or	r24, r25
   1192a:	51 f0       	breq	.+20     	; 0x11940 <gpib_file_init+0x86>
   1192c:	8a e4       	ldi	r24, 0x4A	; 74
   1192e:	94 e1       	ldi	r25, 0x14	; 20
   11930:	1f 92       	push	r1
   11932:	9f 93       	push	r25
   11934:	8f 93       	push	r24
   11936:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1193a:	0f 90       	pop	r0
   1193c:	0f 90       	pop	r0
   1193e:	0f 90       	pop	r0
   11940:	08 95       	ret

00011942 <SS80_is_MLA>:
   11942:	40 e2       	ldi	r20, 0x20	; 32
   11944:	50 e0       	ldi	r21, 0x00	; 0
   11946:	bc 01       	movw	r22, r24
   11948:	83 e0       	ldi	r24, 0x03	; 3
   1194a:	90 e0       	ldi	r25, 0x00	; 0
   1194c:	8a d6       	rcall	.+3348   	; 0x12662 <find_device>
   1194e:	8f 3f       	cpi	r24, 0xFF	; 255
   11950:	2f ef       	ldi	r18, 0xFF	; 255
   11952:	92 07       	cpc	r25, r18
   11954:	11 f0       	breq	.+4      	; 0x1195a <SS80_is_MLA+0x18>
   11956:	af c6       	rjmp	.+3422   	; 0x126b6 <set_active_device>
   11958:	08 95       	ret
   1195a:	80 e0       	ldi	r24, 0x00	; 0
   1195c:	90 e0       	ldi	r25, 0x00	; 0
   1195e:	08 95       	ret

00011960 <SS80_is_MTA>:
   11960:	40 e4       	ldi	r20, 0x40	; 64
   11962:	50 e0       	ldi	r21, 0x00	; 0
   11964:	bc 01       	movw	r22, r24
   11966:	83 e0       	ldi	r24, 0x03	; 3
   11968:	90 e0       	ldi	r25, 0x00	; 0
   1196a:	7b d6       	rcall	.+3318   	; 0x12662 <find_device>
   1196c:	8f 3f       	cpi	r24, 0xFF	; 255
   1196e:	2f ef       	ldi	r18, 0xFF	; 255
   11970:	92 07       	cpc	r25, r18
   11972:	11 f0       	breq	.+4      	; 0x11978 <SS80_is_MTA+0x18>
   11974:	a0 c6       	rjmp	.+3392   	; 0x126b6 <set_active_device>
   11976:	08 95       	ret
   11978:	80 e0       	ldi	r24, 0x00	; 0
   1197a:	90 e0       	ldi	r25, 0x00	; 0
   1197c:	08 95       	ret

0001197e <SS80_is_MSA>:
   1197e:	40 e6       	ldi	r20, 0x60	; 96
   11980:	50 e0       	ldi	r21, 0x00	; 0
   11982:	bc 01       	movw	r22, r24
   11984:	83 e0       	ldi	r24, 0x03	; 3
   11986:	90 e0       	ldi	r25, 0x00	; 0
   11988:	6c d6       	rcall	.+3288   	; 0x12662 <find_device>
   1198a:	8f 3f       	cpi	r24, 0xFF	; 255
   1198c:	2f ef       	ldi	r18, 0xFF	; 255
   1198e:	92 07       	cpc	r25, r18
   11990:	11 f0       	breq	.+4      	; 0x11996 <SS80_is_MSA+0x18>
   11992:	91 c6       	rjmp	.+3362   	; 0x126b6 <set_active_device>
   11994:	08 95       	ret
   11996:	80 e0       	ldi	r24, 0x00	; 0
   11998:	90 e0       	ldi	r25, 0x00	; 0
   1199a:	08 95       	ret

0001199c <AMIGO_is_MLA>:
   1199c:	40 e2       	ldi	r20, 0x20	; 32
   1199e:	50 e0       	ldi	r21, 0x00	; 0
   119a0:	bc 01       	movw	r22, r24
   119a2:	81 e0       	ldi	r24, 0x01	; 1
   119a4:	90 e0       	ldi	r25, 0x00	; 0
   119a6:	5d d6       	rcall	.+3258   	; 0x12662 <find_device>
   119a8:	8f 3f       	cpi	r24, 0xFF	; 255
   119aa:	2f ef       	ldi	r18, 0xFF	; 255
   119ac:	92 07       	cpc	r25, r18
   119ae:	11 f0       	breq	.+4      	; 0x119b4 <AMIGO_is_MLA+0x18>
   119b0:	82 c6       	rjmp	.+3332   	; 0x126b6 <set_active_device>
   119b2:	08 95       	ret
   119b4:	80 e0       	ldi	r24, 0x00	; 0
   119b6:	90 e0       	ldi	r25, 0x00	; 0
   119b8:	08 95       	ret

000119ba <AMIGO_is_MTA>:
   119ba:	40 e4       	ldi	r20, 0x40	; 64
   119bc:	50 e0       	ldi	r21, 0x00	; 0
   119be:	bc 01       	movw	r22, r24
   119c0:	81 e0       	ldi	r24, 0x01	; 1
   119c2:	90 e0       	ldi	r25, 0x00	; 0
   119c4:	4e d6       	rcall	.+3228   	; 0x12662 <find_device>
   119c6:	8f 3f       	cpi	r24, 0xFF	; 255
   119c8:	2f ef       	ldi	r18, 0xFF	; 255
   119ca:	92 07       	cpc	r25, r18
   119cc:	11 f0       	breq	.+4      	; 0x119d2 <AMIGO_is_MTA+0x18>
   119ce:	73 c6       	rjmp	.+3302   	; 0x126b6 <set_active_device>
   119d0:	08 95       	ret
   119d2:	80 e0       	ldi	r24, 0x00	; 0
   119d4:	90 e0       	ldi	r25, 0x00	; 0
   119d6:	08 95       	ret

000119d8 <AMIGO_is_MSA>:
   119d8:	40 e6       	ldi	r20, 0x60	; 96
   119da:	50 e0       	ldi	r21, 0x00	; 0
   119dc:	bc 01       	movw	r22, r24
   119de:	81 e0       	ldi	r24, 0x01	; 1
   119e0:	90 e0       	ldi	r25, 0x00	; 0
   119e2:	3f d6       	rcall	.+3198   	; 0x12662 <find_device>
   119e4:	8f 3f       	cpi	r24, 0xFF	; 255
   119e6:	2f ef       	ldi	r18, 0xFF	; 255
   119e8:	92 07       	cpc	r25, r18
   119ea:	11 f0       	breq	.+4      	; 0x119f0 <AMIGO_is_MSA+0x18>
   119ec:	64 c6       	rjmp	.+3272   	; 0x126b6 <set_active_device>
   119ee:	08 95       	ret
   119f0:	80 e0       	ldi	r24, 0x00	; 0
   119f2:	90 e0       	ldi	r25, 0x00	; 0
   119f4:	08 95       	ret

000119f6 <PRINTER_is_MLA>:
   119f6:	40 e2       	ldi	r20, 0x20	; 32
   119f8:	50 e0       	ldi	r21, 0x00	; 0
   119fa:	bc 01       	movw	r22, r24
   119fc:	84 e0       	ldi	r24, 0x04	; 4
   119fe:	90 e0       	ldi	r25, 0x00	; 0
   11a00:	30 d6       	rcall	.+3168   	; 0x12662 <find_device>
   11a02:	8f 3f       	cpi	r24, 0xFF	; 255
   11a04:	2f ef       	ldi	r18, 0xFF	; 255
   11a06:	92 07       	cpc	r25, r18
   11a08:	11 f0       	breq	.+4      	; 0x11a0e <PRINTER_is_MLA+0x18>
   11a0a:	55 c6       	rjmp	.+3242   	; 0x126b6 <set_active_device>
   11a0c:	08 95       	ret
   11a0e:	80 e0       	ldi	r24, 0x00	; 0
   11a10:	90 e0       	ldi	r25, 0x00	; 0
   11a12:	08 95       	ret

00011a14 <PRINTER_is_MTA>:
   11a14:	40 e4       	ldi	r20, 0x40	; 64
   11a16:	50 e0       	ldi	r21, 0x00	; 0
   11a18:	bc 01       	movw	r22, r24
   11a1a:	84 e0       	ldi	r24, 0x04	; 4
   11a1c:	90 e0       	ldi	r25, 0x00	; 0
   11a1e:	21 d6       	rcall	.+3138   	; 0x12662 <find_device>
   11a20:	8f 3f       	cpi	r24, 0xFF	; 255
   11a22:	2f ef       	ldi	r18, 0xFF	; 255
   11a24:	92 07       	cpc	r25, r18
   11a26:	11 f0       	breq	.+4      	; 0x11a2c <PRINTER_is_MTA+0x18>
   11a28:	46 c6       	rjmp	.+3212   	; 0x126b6 <set_active_device>
   11a2a:	08 95       	ret
   11a2c:	80 e0       	ldi	r24, 0x00	; 0
   11a2e:	90 e0       	ldi	r25, 0x00	; 0
   11a30:	08 95       	ret

00011a32 <gpib_init_devices>:
   11a32:	2a d9       	rcall	.-3500   	; 0x10c88 <gpib_bus_init>
   11a34:	0e 94 57 b0 	call	0x160ae	; 0x160ae <SS80_init>
   11a38:	0e 94 dc b5 	call	0x16bb8	; 0x16bb8 <amigo_init>
   11a3c:	0c 94 c3 c0 	jmp	0x18186	; 0x18186 <printer_close>
   11a40:	08 95       	ret

00011a42 <gpib_trace_task>:
   11a42:	0f 93       	push	r16
   11a44:	1f 93       	push	r17
   11a46:	cf 93       	push	r28
   11a48:	df 93       	push	r29
   11a4a:	eb 01       	movw	r28, r22
   11a4c:	00 97       	sbiw	r24, 0x00	; 0
   11a4e:	09 f4       	brne	.+2      	; 0x11a52 <gpib_trace_task+0x10>
   11a50:	42 c0       	rjmp	.+132    	; 0x11ad6 <gpib_trace_task+0x94>
   11a52:	fc 01       	movw	r30, r24
   11a54:	20 81       	ld	r18, Z
   11a56:	22 23       	and	r18, r18
   11a58:	f1 f1       	breq	.+124    	; 0x11ad6 <gpib_trace_task+0x94>
   11a5a:	0e 94 c0 32 	call	0x6580	; 0x6580 <skipspaces>
   11a5e:	8c 01       	movw	r16, r24
   11a60:	1f 93       	push	r17
   11a62:	8f 93       	push	r24
   11a64:	80 e3       	ldi	r24, 0x30	; 48
   11a66:	94 e1       	ldi	r25, 0x14	; 20
   11a68:	1f 92       	push	r1
   11a6a:	9f 93       	push	r25
   11a6c:	8f 93       	push	r24
   11a6e:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   11a72:	0f 90       	pop	r0
   11a74:	0f 90       	pop	r0
   11a76:	0f 90       	pop	r0
   11a78:	0f 90       	pop	r0
   11a7a:	0f 90       	pop	r0
   11a7c:	20 97       	sbiw	r28, 0x00	; 0
   11a7e:	51 f0       	breq	.+20     	; 0x11a94 <gpib_trace_task+0x52>
   11a80:	85 e0       	ldi	r24, 0x05	; 5
   11a82:	94 e1       	ldi	r25, 0x14	; 20
   11a84:	1f 92       	push	r1
   11a86:	9f 93       	push	r25
   11a88:	8f 93       	push	r24
   11a8a:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   11a8e:	0f 90       	pop	r0
   11a90:	0f 90       	pop	r0
   11a92:	0f 90       	pop	r0
   11a94:	8e ee       	ldi	r24, 0xEE	; 238
   11a96:	93 e1       	ldi	r25, 0x13	; 19
   11a98:	1f 92       	push	r1
   11a9a:	9f 93       	push	r25
   11a9c:	8f 93       	push	r24
   11a9e:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   11aa2:	64 e9       	ldi	r22, 0x94	; 148
   11aa4:	78 e0       	ldi	r23, 0x08	; 8
   11aa6:	c8 01       	movw	r24, r16
   11aa8:	0e 94 43 7f 	call	0xfe86	; 0xfe86 <fopen>
   11aac:	90 93 64 18 	sts	0x1864, r25	; 0x801864 <gpib_log_fp+0x1>
   11ab0:	80 93 63 18 	sts	0x1863, r24	; 0x801863 <gpib_log_fp>
   11ab4:	0f 90       	pop	r0
   11ab6:	0f 90       	pop	r0
   11ab8:	0f 90       	pop	r0
   11aba:	89 2b       	or	r24, r25
   11abc:	a1 f4       	brne	.+40     	; 0x11ae6 <gpib_trace_task+0xa4>
   11abe:	8b e1       	ldi	r24, 0x1B	; 27
   11ac0:	9d e0       	ldi	r25, 0x0D	; 13
   11ac2:	0e 94 8d 79 	call	0xf31a	; 0xf31a <perror>
   11ac6:	82 ee       	ldi	r24, 0xE2	; 226
   11ac8:	93 e1       	ldi	r25, 0x13	; 19
   11aca:	1f 92       	push	r1
   11acc:	9f 93       	push	r25
   11ace:	8f 93       	push	r24
   11ad0:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   11ad4:	3b c0       	rjmp	.+118    	; 0x11b4c <gpib_trace_task+0x10a>
   11ad6:	80 91 c1 1b 	lds	r24, 0x1BC1	; 0x801bc1 <__iob+0x2>
   11ada:	90 91 c2 1b 	lds	r25, 0x1BC2	; 0x801bc2 <__iob+0x3>
   11ade:	90 93 64 18 	sts	0x1864, r25	; 0x801864 <gpib_log_fp+0x1>
   11ae2:	80 93 63 18 	sts	0x1863, r24	; 0x801863 <gpib_log_fp>
   11ae6:	f8 d8       	rcall	.-3600   	; 0x10cd8 <gpib_state_init>
   11ae8:	a4 df       	rcall	.-184    	; 0x11a32 <gpib_init_devices>
   11aea:	80 91 63 18 	lds	r24, 0x1863	; 0x801863 <gpib_log_fp>
   11aee:	90 91 64 18 	lds	r25, 0x1864	; 0x801864 <gpib_log_fp+0x1>
   11af2:	49 db       	rcall	.-2414   	; 0x11186 <gpib_decode_header>
   11af4:	80 e0       	ldi	r24, 0x00	; 0
   11af6:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_keyhit>
   11afa:	89 2b       	or	r24, r25
   11afc:	31 f4       	brne	.+12     	; 0x11b0a <gpib_trace_task+0xc8>
   11afe:	ce 01       	movw	r24, r28
   11b00:	db dc       	rcall	.-1610   	; 0x114b8 <gpib_read_byte>
   11b02:	20 97       	sbiw	r28, 0x00	; 0
   11b04:	b9 f7       	brne	.-18     	; 0x11af4 <gpib_trace_task+0xb2>
   11b06:	ae dd       	rcall	.-1188   	; 0x11664 <gpib_decode>
   11b08:	f5 cf       	rjmp	.-22     	; 0x11af4 <gpib_trace_task+0xb2>
   11b0a:	8c ed       	ldi	r24, 0xDC	; 220
   11b0c:	93 e1       	ldi	r25, 0x13	; 19
   11b0e:	1f 92       	push	r1
   11b10:	9f 93       	push	r25
   11b12:	8f 93       	push	r24
   11b14:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   11b18:	80 91 63 18 	lds	r24, 0x1863	; 0x801863 <gpib_log_fp>
   11b1c:	90 91 64 18 	lds	r25, 0x1864	; 0x801864 <gpib_log_fp+0x1>
   11b20:	0f 90       	pop	r0
   11b22:	0f 90       	pop	r0
   11b24:	0f 90       	pop	r0
   11b26:	00 97       	sbiw	r24, 0x00	; 0
   11b28:	a1 f0       	breq	.+40     	; 0x11b52 <gpib_trace_task+0x110>
   11b2a:	0e 94 ed 7d 	call	0xfbda	; 0xfbda <fclose>
   11b2e:	8a ec       	ldi	r24, 0xCA	; 202
   11b30:	93 e1       	ldi	r25, 0x13	; 19
   11b32:	1f 92       	push	r1
   11b34:	9f 93       	push	r25
   11b36:	8f 93       	push	r24
   11b38:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   11b3c:	80 91 c1 1b 	lds	r24, 0x1BC1	; 0x801bc1 <__iob+0x2>
   11b40:	90 91 c2 1b 	lds	r25, 0x1BC2	; 0x801bc2 <__iob+0x3>
   11b44:	90 93 64 18 	sts	0x1864, r25	; 0x801864 <gpib_log_fp+0x1>
   11b48:	80 93 63 18 	sts	0x1863, r24	; 0x801863 <gpib_log_fp>
   11b4c:	0f 90       	pop	r0
   11b4e:	0f 90       	pop	r0
   11b50:	0f 90       	pop	r0
   11b52:	df 91       	pop	r29
   11b54:	cf 91       	pop	r28
   11b56:	1f 91       	pop	r17
   11b58:	0f 91       	pop	r16
   11b5a:	08 95       	ret

00011b5c <gpib_error_test>:
   11b5c:	ef 92       	push	r14
   11b5e:	ff 92       	push	r15
   11b60:	0f 93       	push	r16
   11b62:	1f 93       	push	r17
   11b64:	cf 93       	push	r28
   11b66:	df 93       	push	r29
   11b68:	7c 01       	movw	r14, r24
   11b6a:	ec 01       	movw	r28, r24
   11b6c:	cc 27       	eor	r28, r28
   11b6e:	d0 7d       	andi	r29, 0xD0	; 208
   11b70:	20 97       	sbiw	r28, 0x00	; 0
   11b72:	61 f0       	breq	.+24     	; 0x11b8c <gpib_error_test+0x30>
   11b74:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11b78:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11b7c:	8e 72       	andi	r24, 0x2E	; 46
   11b7e:	99 27       	eor	r25, r25
   11b80:	87 01       	movw	r16, r14
   11b82:	00 27       	eor	r16, r16
   11b84:	10 71       	andi	r17, 0x10	; 16
   11b86:	89 2b       	or	r24, r25
   11b88:	59 f4       	brne	.+22     	; 0x11ba0 <gpib_error_test+0x44>
   11b8a:	17 c0       	rjmp	.+46     	; 0x11bba <gpib_error_test+0x5e>
   11b8c:	80 e0       	ldi	r24, 0x00	; 0
   11b8e:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_keyhit>
   11b92:	89 2b       	or	r24, r25
   11b94:	79 f7       	brne	.-34     	; 0x11b74 <gpib_error_test+0x18>
   11b96:	0e 94 43 71 	call	0xe286	; 0xe286 <mmc_ins_status>
   11b9a:	01 97       	sbiw	r24, 0x01	; 1
   11b9c:	59 f7       	brne	.-42     	; 0x11b74 <gpib_error_test+0x18>
   11b9e:	62 c0       	rjmp	.+196    	; 0x11c64 <gpib_error_test+0x108>
   11ba0:	01 15       	cp	r16, r1
   11ba2:	11 05       	cpc	r17, r1
   11ba4:	51 f0       	breq	.+20     	; 0x11bba <gpib_error_test+0x5e>
   11ba6:	83 ec       	ldi	r24, 0xC3	; 195
   11ba8:	93 e1       	ldi	r25, 0x13	; 19
   11baa:	1f 92       	push	r1
   11bac:	9f 93       	push	r25
   11bae:	8f 93       	push	r24
   11bb0:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   11bb4:	0f 90       	pop	r0
   11bb6:	0f 90       	pop	r0
   11bb8:	0f 90       	pop	r0
   11bba:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11bbe:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11bc2:	85 70       	andi	r24, 0x05	; 5
   11bc4:	99 27       	eor	r25, r25
   11bc6:	89 2b       	or	r24, r25
   11bc8:	c1 f0       	breq	.+48     	; 0x11bfa <gpib_error_test+0x9e>
   11bca:	f6 fe       	sbrs	r15, 6
   11bcc:	0a c0       	rjmp	.+20     	; 0x11be2 <gpib_error_test+0x86>
   11bce:	88 eb       	ldi	r24, 0xB8	; 184
   11bd0:	93 e1       	ldi	r25, 0x13	; 19
   11bd2:	1f 92       	push	r1
   11bd4:	9f 93       	push	r25
   11bd6:	8f 93       	push	r24
   11bd8:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   11bdc:	0f 90       	pop	r0
   11bde:	0f 90       	pop	r0
   11be0:	0f 90       	pop	r0
   11be2:	d7 ff       	sbrs	r29, 7
   11be4:	0a c0       	rjmp	.+20     	; 0x11bfa <gpib_error_test+0x9e>
   11be6:	81 eb       	ldi	r24, 0xB1	; 177
   11be8:	93 e1       	ldi	r25, 0x13	; 19
   11bea:	1f 92       	push	r1
   11bec:	9f 93       	push	r25
   11bee:	8f 93       	push	r24
   11bf0:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   11bf4:	0f 90       	pop	r0
   11bf6:	0f 90       	pop	r0
   11bf8:	0f 90       	pop	r0
   11bfa:	80 e0       	ldi	r24, 0x00	; 0
   11bfc:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_keyhit>
   11c00:	89 2b       	or	r24, r25
   11c02:	51 f0       	breq	.+20     	; 0x11c18 <gpib_error_test+0xbc>
   11c04:	84 ea       	ldi	r24, 0xA4	; 164
   11c06:	93 e1       	ldi	r25, 0x13	; 19
   11c08:	1f 92       	push	r1
   11c0a:	9f 93       	push	r25
   11c0c:	8f 93       	push	r24
   11c0e:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   11c12:	0f 90       	pop	r0
   11c14:	0f 90       	pop	r0
   11c16:	0f 90       	pop	r0
   11c18:	0e 94 43 71 	call	0xe286	; 0xe286 <mmc_ins_status>
   11c1c:	01 97       	sbiw	r24, 0x01	; 1
   11c1e:	51 f0       	breq	.+20     	; 0x11c34 <gpib_error_test+0xd8>
   11c20:	83 e9       	ldi	r24, 0x93	; 147
   11c22:	93 e1       	ldi	r25, 0x13	; 19
   11c24:	1f 92       	push	r1
   11c26:	9f 93       	push	r25
   11c28:	8f 93       	push	r24
   11c2a:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   11c2e:	0f 90       	pop	r0
   11c30:	0f 90       	pop	r0
   11c32:	0f 90       	pop	r0
   11c34:	01 15       	cp	r16, r1
   11c36:	11 05       	cpc	r17, r1
   11c38:	09 f0       	breq	.+2      	; 0x11c3c <gpib_error_test+0xe0>
   11c3a:	fb de       	rcall	.-522    	; 0x11a32 <gpib_init_devices>
   11c3c:	80 e0       	ldi	r24, 0x00	; 0
   11c3e:	0e 94 1f 2c 	call	0x583e	; 0x583e <uart_keyhit>
   11c42:	89 2b       	or	r24, r25
   11c44:	11 f0       	breq	.+4      	; 0x11c4a <gpib_error_test+0xee>
   11c46:	f5 de       	rcall	.-534    	; 0x11a32 <gpib_init_devices>
   11c48:	0b c0       	rjmp	.+22     	; 0x11c60 <gpib_error_test+0x104>
   11c4a:	0e 94 43 71 	call	0xe286	; 0xe286 <mmc_ins_status>
   11c4e:	01 97       	sbiw	r24, 0x01	; 1
   11c50:	39 f4       	brne	.+14     	; 0x11c60 <gpib_error_test+0x104>
   11c52:	01 15       	cp	r16, r1
   11c54:	11 05       	cpc	r17, r1
   11c56:	31 f0       	breq	.+12     	; 0x11c64 <gpib_error_test+0x108>
   11c58:	54 98       	cbi	0x0a, 4	; 10
   11c5a:	4c 9b       	sbis	0x09, 4	; 9
   11c5c:	fd cf       	rjmp	.-6      	; 0x11c58 <gpib_error_test+0xfc>
   11c5e:	02 c0       	rjmp	.+4      	; 0x11c64 <gpib_error_test+0x108>
   11c60:	c1 e0       	ldi	r28, 0x01	; 1
   11c62:	d0 e0       	ldi	r29, 0x00	; 0
   11c64:	ce 01       	movw	r24, r28
   11c66:	cd b7       	in	r28, 0x3d	; 61
   11c68:	de b7       	in	r29, 0x3e	; 62
   11c6a:	e6 e0       	ldi	r30, 0x06	; 6
   11c6c:	0c 94 1b e6 	jmp	0x1cc36	; 0x1cc36 <__epilogue_restores__+0x18>

00011c70 <GPIB_COMMANDS>:
   11c70:	1f 93       	push	r17
   11c72:	cf 93       	push	r28
   11c74:	df 93       	push	r29
   11c76:	ec 01       	movw	r28, r24
   11c78:	16 2f       	mov	r17, r22
   11c7a:	80 91 ee 1d 	lds	r24, 0x1DEE	; 0x801dee <talking>
   11c7e:	8f 35       	cpi	r24, 0x5F	; 95
   11c80:	91 f0       	breq	.+36     	; 0x11ca6 <GPIB_COMMANDS+0x36>
   11c82:	80 91 f0 1d 	lds	r24, 0x1DF0	; 0x801df0 <listening>
   11c86:	90 e0       	ldi	r25, 0x00	; 0
   11c88:	89 de       	rcall	.-750    	; 0x1199c <AMIGO_is_MLA>
   11c8a:	89 2b       	or	r24, r25
   11c8c:	c9 f4       	brne	.+50     	; 0x11cc0 <GPIB_COMMANDS+0x50>
   11c8e:	80 91 f0 1d 	lds	r24, 0x1DF0	; 0x801df0 <listening>
   11c92:	90 e0       	ldi	r25, 0x00	; 0
   11c94:	56 de       	rcall	.-852    	; 0x11942 <SS80_is_MLA>
   11c96:	89 2b       	or	r24, r25
   11c98:	11 f5       	brne	.+68     	; 0x11cde <GPIB_COMMANDS+0x6e>
   11c9a:	80 91 f0 1d 	lds	r24, 0x1DF0	; 0x801df0 <listening>
   11c9e:	90 e0       	ldi	r25, 0x00	; 0
   11ca0:	aa de       	rcall	.-684    	; 0x119f6 <PRINTER_is_MLA>
   11ca2:	89 2b       	or	r24, r25
   11ca4:	59 f5       	brne	.+86     	; 0x11cfc <GPIB_COMMANDS+0x8c>
   11ca6:	80 91 f0 1d 	lds	r24, 0x1DF0	; 0x801df0 <listening>
   11caa:	8f 33       	cpi	r24, 0x3F	; 63
   11cac:	19 f4       	brne	.+6      	; 0x11cb4 <GPIB_COMMANDS+0x44>
   11cae:	80 e0       	ldi	r24, 0x00	; 0
   11cb0:	90 e0       	ldi	r25, 0x00	; 0
   11cb2:	2e c0       	rjmp	.+92     	; 0x11d10 <GPIB_COMMANDS+0xa0>
   11cb4:	80 91 ee 1d 	lds	r24, 0x1DEE	; 0x801dee <talking>
   11cb8:	90 e0       	ldi	r25, 0x00	; 0
   11cba:	7f de       	rcall	.-770    	; 0x119ba <AMIGO_is_MTA>
   11cbc:	89 2b       	or	r24, r25
   11cbe:	49 f0       	breq	.+18     	; 0x11cd2 <GPIB_COMMANDS+0x62>
   11cc0:	11 23       	and	r17, r17
   11cc2:	11 f0       	breq	.+4      	; 0x11cc8 <GPIB_COMMANDS+0x58>
   11cc4:	ce 01       	movw	r24, r28
   11cc6:	b0 d8       	rcall	.-3744   	; 0x10e28 <gpib_unread>
   11cc8:	80 91 ef 1d 	lds	r24, 0x1DEF	; 0x801def <secondary>
   11ccc:	0e 94 c4 bf 	call	0x17f88	; 0x17f88 <AMIGO_COMMANDS>
   11cd0:	1d c0       	rjmp	.+58     	; 0x11d0c <GPIB_COMMANDS+0x9c>
   11cd2:	80 91 ee 1d 	lds	r24, 0x1DEE	; 0x801dee <talking>
   11cd6:	90 e0       	ldi	r25, 0x00	; 0
   11cd8:	43 de       	rcall	.-890    	; 0x11960 <SS80_is_MTA>
   11cda:	89 2b       	or	r24, r25
   11cdc:	49 f0       	breq	.+18     	; 0x11cf0 <GPIB_COMMANDS+0x80>
   11cde:	11 23       	and	r17, r17
   11ce0:	11 f0       	breq	.+4      	; 0x11ce6 <GPIB_COMMANDS+0x76>
   11ce2:	ce 01       	movw	r24, r28
   11ce4:	a1 d8       	rcall	.-3774   	; 0x10e28 <gpib_unread>
   11ce6:	80 91 ef 1d 	lds	r24, 0x1DEF	; 0x801def <secondary>
   11cea:	0e 94 36 b4 	call	0x1686c	; 0x1686c <SS80_COMMANDS>
   11cee:	0e c0       	rjmp	.+28     	; 0x11d0c <GPIB_COMMANDS+0x9c>
   11cf0:	80 91 ee 1d 	lds	r24, 0x1DEE	; 0x801dee <talking>
   11cf4:	90 e0       	ldi	r25, 0x00	; 0
   11cf6:	8e de       	rcall	.-740    	; 0x11a14 <PRINTER_is_MTA>
   11cf8:	89 2b       	or	r24, r25
   11cfa:	c9 f2       	breq	.-78     	; 0x11cae <GPIB_COMMANDS+0x3e>
   11cfc:	11 23       	and	r17, r17
   11cfe:	11 f0       	breq	.+4      	; 0x11d04 <GPIB_COMMANDS+0x94>
   11d00:	ce 01       	movw	r24, r28
   11d02:	92 d8       	rcall	.-3804   	; 0x10e28 <gpib_unread>
   11d04:	80 91 ef 1d 	lds	r24, 0x1DEF	; 0x801def <secondary>
   11d08:	0e 94 24 c2 	call	0x18448	; 0x18448 <PRINTER_COMMANDS>
   11d0c:	10 92 ef 1d 	sts	0x1DEF, r1	; 0x801def <secondary>
   11d10:	df 91       	pop	r29
   11d12:	cf 91       	pop	r28
   11d14:	1f 91       	pop	r17
   11d16:	08 95       	ret

00011d18 <Send_Identify>:
   11d18:	a4 e0       	ldi	r26, 0x04	; 4
   11d1a:	b0 e0       	ldi	r27, 0x00	; 0
   11d1c:	e2 e9       	ldi	r30, 0x92	; 146
   11d1e:	fe e8       	ldi	r31, 0x8E	; 142
   11d20:	0c 94 fe e5 	jmp	0x1cbfc	; 0x1cbfc <__prologue_saves__+0x16>
   11d24:	d8 2e       	mov	r13, r24
   11d26:	7b 01       	movw	r14, r22
   11d28:	80 e0       	ldi	r24, 0x00	; 0
   11d2a:	91 e0       	ldi	r25, 0x01	; 1
   11d2c:	9c 83       	std	Y+4, r25	; 0x04
   11d2e:	8b 83       	std	Y+3, r24	; 0x03
   11d30:	8b 01       	movw	r16, r22
   11d32:	20 e0       	ldi	r18, 0x00	; 0
   11d34:	30 e0       	ldi	r19, 0x00	; 0
   11d36:	42 e0       	ldi	r20, 0x02	; 2
   11d38:	50 e0       	ldi	r21, 0x00	; 0
   11d3a:	60 e0       	ldi	r22, 0x00	; 0
   11d3c:	70 e0       	ldi	r23, 0x00	; 0
   11d3e:	ce 01       	movw	r24, r28
   11d40:	01 96       	adiw	r24, 0x01	; 1
   11d42:	e7 d3       	rcall	.+1998   	; 0x12512 <V2B_MSB>
   11d44:	ae 01       	movw	r20, r28
   11d46:	4d 5f       	subi	r20, 0xFD	; 253
   11d48:	5f 4f       	sbci	r21, 0xFF	; 255
   11d4a:	62 e0       	ldi	r22, 0x02	; 2
   11d4c:	70 e0       	ldi	r23, 0x00	; 0
   11d4e:	ce 01       	movw	r24, r28
   11d50:	01 96       	adiw	r24, 0x01	; 1
   11d52:	3a dd       	rcall	.-1420   	; 0x117c8 <gpib_write_str>
   11d54:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   11d58:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
   11d5c:	02 97       	sbiw	r24, 0x02	; 2
   11d5e:	59 f0       	breq	.+22     	; 0x11d76 <Send_Identify+0x5e>
   11d60:	25 70       	andi	r18, 0x05	; 5
   11d62:	33 27       	eor	r19, r19
   11d64:	23 2b       	or	r18, r19
   11d66:	c9 f0       	breq	.+50     	; 0x11d9a <Send_Identify+0x82>
   11d68:	ff 92       	push	r15
   11d6a:	ef 92       	push	r14
   11d6c:	1f 92       	push	r1
   11d6e:	df 92       	push	r13
   11d70:	82 e7       	ldi	r24, 0x72	; 114
   11d72:	93 e1       	ldi	r25, 0x13	; 19
   11d74:	08 c0       	rjmp	.+16     	; 0x11d86 <Send_Identify+0x6e>
   11d76:	22 ff       	sbrs	r18, 2
   11d78:	10 c0       	rjmp	.+32     	; 0x11d9a <Send_Identify+0x82>
   11d7a:	ff 92       	push	r15
   11d7c:	ef 92       	push	r14
   11d7e:	1f 92       	push	r1
   11d80:	df 92       	push	r13
   11d82:	88 e5       	ldi	r24, 0x58	; 88
   11d84:	93 e1       	ldi	r25, 0x13	; 19
   11d86:	1f 92       	push	r1
   11d88:	9f 93       	push	r25
   11d8a:	8f 93       	push	r24
   11d8c:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   11d90:	0f b6       	in	r0, 0x3f	; 63
   11d92:	f8 94       	cli
   11d94:	de bf       	out	0x3e, r29	; 62
   11d96:	0f be       	out	0x3f, r0	; 63
   11d98:	cd bf       	out	0x3d, r28	; 61
   11d9a:	8b 81       	ldd	r24, Y+3	; 0x03
   11d9c:	9c 81       	ldd	r25, Y+4	; 0x04
   11d9e:	88 27       	eor	r24, r24
   11da0:	90 7d       	andi	r25, 0xD0	; 208
   11da2:	24 96       	adiw	r28, 0x04	; 4
   11da4:	e7 e0       	ldi	r30, 0x07	; 7
   11da6:	0c 94 1a e6 	jmp	0x1cc34	; 0x1cc34 <__epilogue_restores__+0x16>

00011daa <GPIB>:
   11daa:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   11dae:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
   11db2:	85 30       	cpi	r24, 0x05	; 5
   11db4:	89 f4       	brne	.+34     	; 0x11dd8 <GPIB+0x2e>
   11db6:	24 71       	andi	r18, 0x14	; 20
   11db8:	33 27       	eor	r19, r19
   11dba:	23 2b       	or	r18, r19
   11dbc:	51 f0       	breq	.+20     	; 0x11dd2 <GPIB+0x28>
   11dbe:	85 e4       	ldi	r24, 0x45	; 69
   11dc0:	93 e1       	ldi	r25, 0x13	; 19
   11dc2:	1f 92       	push	r1
   11dc4:	9f 93       	push	r25
   11dc6:	8f 93       	push	r24
   11dc8:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   11dcc:	0f 90       	pop	r0
   11dce:	0f 90       	pop	r0
   11dd0:	0f 90       	pop	r0
   11dd2:	10 92 eb 1d 	sts	0x1DEB, r1	; 0x801deb <spoll>
   11dd6:	9d c0       	rjmp	.+314    	; 0x11f12 <GPIB+0x168>
   11dd8:	85 31       	cpi	r24, 0x15	; 21
   11dda:	39 f4       	brne	.+14     	; 0x11dea <GPIB+0x40>
   11ddc:	24 71       	andi	r18, 0x14	; 20
   11dde:	33 27       	eor	r19, r19
   11de0:	23 2b       	or	r18, r19
   11de2:	b9 f3       	breq	.-18     	; 0x11dd2 <GPIB+0x28>
   11de4:	82 e3       	ldi	r24, 0x32	; 50
   11de6:	93 e1       	ldi	r25, 0x13	; 19
   11de8:	ec cf       	rjmp	.-40     	; 0x11dc2 <GPIB+0x18>
   11dea:	88 31       	cpi	r24, 0x18	; 24
   11dec:	c9 f4       	brne	.+50     	; 0x11e20 <GPIB+0x76>
   11dee:	22 ff       	sbrs	r18, 2
   11df0:	0a c0       	rjmp	.+20     	; 0x11e06 <GPIB+0x5c>
   11df2:	8b e2       	ldi	r24, 0x2B	; 43
   11df4:	93 e1       	ldi	r25, 0x13	; 19
   11df6:	1f 92       	push	r1
   11df8:	9f 93       	push	r25
   11dfa:	8f 93       	push	r24
   11dfc:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   11e00:	0f 90       	pop	r0
   11e02:	0f 90       	pop	r0
   11e04:	0f 90       	pop	r0
   11e06:	81 e0       	ldi	r24, 0x01	; 1
   11e08:	80 93 eb 1d 	sts	0x1DEB, r24	; 0x801deb <spoll>
   11e0c:	80 91 ee 1d 	lds	r24, 0x1DEE	; 0x801dee <talking>
   11e10:	90 e0       	ldi	r25, 0x00	; 0
   11e12:	a6 dd       	rcall	.-1204   	; 0x11960 <SS80_is_MTA>
   11e14:	89 2b       	or	r24, r25
   11e16:	09 f4       	brne	.+2      	; 0x11e1a <GPIB+0x70>
   11e18:	7c c0       	rjmp	.+248    	; 0x11f12 <GPIB+0x168>
   11e1a:	0c 94 ea af 	jmp	0x15fd4	; 0x15fd4 <SS80_Report>
   11e1e:	08 95       	ret
   11e20:	89 31       	cpi	r24, 0x19	; 25
   11e22:	29 f4       	brne	.+10     	; 0x11e2e <GPIB+0x84>
   11e24:	22 ff       	sbrs	r18, 2
   11e26:	d5 cf       	rjmp	.-86     	; 0x11dd2 <GPIB+0x28>
   11e28:	84 e2       	ldi	r24, 0x24	; 36
   11e2a:	93 e1       	ldi	r25, 0x13	; 19
   11e2c:	ca cf       	rjmp	.-108    	; 0x11dc2 <GPIB+0x18>
   11e2e:	84 30       	cpi	r24, 0x04	; 4
   11e30:	09 f0       	breq	.+2      	; 0x11e34 <GPIB+0x8a>
   11e32:	48 c0       	rjmp	.+144    	; 0x11ec4 <GPIB+0x11a>
   11e34:	22 ff       	sbrs	r18, 2
   11e36:	0a c0       	rjmp	.+20     	; 0x11e4c <GPIB+0xa2>
   11e38:	8d e1       	ldi	r24, 0x1D	; 29
   11e3a:	93 e1       	ldi	r25, 0x13	; 19
   11e3c:	1f 92       	push	r1
   11e3e:	9f 93       	push	r25
   11e40:	8f 93       	push	r24
   11e42:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   11e46:	0f 90       	pop	r0
   11e48:	0f 90       	pop	r0
   11e4a:	0f 90       	pop	r0
   11e4c:	80 91 f0 1d 	lds	r24, 0x1DF0	; 0x801df0 <listening>
   11e50:	90 e0       	ldi	r25, 0x00	; 0
   11e52:	77 dd       	rcall	.-1298   	; 0x11942 <SS80_is_MLA>
   11e54:	89 2b       	or	r24, r25
   11e56:	d9 f0       	breq	.+54     	; 0x11e8e <GPIB+0xe4>
   11e58:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11e5c:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11e60:	84 72       	andi	r24, 0x24	; 36
   11e62:	99 27       	eor	r25, r25
   11e64:	89 2b       	or	r24, r25
   11e66:	51 f0       	breq	.+20     	; 0x11e7c <GPIB+0xd2>
   11e68:	81 e1       	ldi	r24, 0x11	; 17
   11e6a:	93 e1       	ldi	r25, 0x13	; 19
   11e6c:	1f 92       	push	r1
   11e6e:	9f 93       	push	r25
   11e70:	8f 93       	push	r24
   11e72:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   11e76:	0f 90       	pop	r0
   11e78:	0f 90       	pop	r0
   11e7a:	0f 90       	pop	r0
   11e7c:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80s>
   11e80:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80s+0x1>
   11e84:	85 81       	ldd	r24, Z+5	; 0x05
   11e86:	90 e0       	ldi	r25, 0x00	; 0
   11e88:	0c 94 b8 b0 	jmp	0x16170	; 0x16170 <SS80_Selected_Device_Clear>
   11e8c:	08 95       	ret
   11e8e:	80 91 f0 1d 	lds	r24, 0x1DF0	; 0x801df0 <listening>
   11e92:	90 e0       	ldi	r25, 0x00	; 0
   11e94:	83 dd       	rcall	.-1274   	; 0x1199c <AMIGO_is_MLA>
   11e96:	89 2b       	or	r24, r25
   11e98:	e1 f1       	breq	.+120    	; 0x11f12 <GPIB+0x168>
   11e9a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11e9e:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11ea2:	84 72       	andi	r24, 0x24	; 36
   11ea4:	99 27       	eor	r25, r25
   11ea6:	89 2b       	or	r24, r25
   11ea8:	51 f0       	breq	.+20     	; 0x11ebe <GPIB+0x114>
   11eaa:	84 e0       	ldi	r24, 0x04	; 4
   11eac:	93 e1       	ldi	r25, 0x13	; 19
   11eae:	1f 92       	push	r1
   11eb0:	9f 93       	push	r25
   11eb2:	8f 93       	push	r24
   11eb4:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   11eb8:	0f 90       	pop	r0
   11eba:	0f 90       	pop	r0
   11ebc:	0f 90       	pop	r0
   11ebe:	0c 94 97 ba 	jmp	0x1752e	; 0x1752e <amigo_cmd_clear>
   11ec2:	08 95       	ret
   11ec4:	84 31       	cpi	r24, 0x14	; 20
   11ec6:	99 f4       	brne	.+38     	; 0x11eee <GPIB+0x144>
   11ec8:	22 ff       	sbrs	r18, 2
   11eca:	0a c0       	rjmp	.+20     	; 0x11ee0 <GPIB+0x136>
   11ecc:	8d ef       	ldi	r24, 0xFD	; 253
   11ece:	92 e1       	ldi	r25, 0x12	; 18
   11ed0:	1f 92       	push	r1
   11ed2:	9f 93       	push	r25
   11ed4:	8f 93       	push	r24
   11ed6:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   11eda:	0f 90       	pop	r0
   11edc:	0f 90       	pop	r0
   11ede:	0f 90       	pop	r0
   11ee0:	0e 94 aa b0 	call	0x16154	; 0x16154 <SS80_Universal_Device_Clear>
   11ee4:	0e 94 97 ba 	call	0x1752e	; 0x1752e <amigo_cmd_clear>
   11ee8:	0e 94 c3 c0 	call	0x18186	; 0x18186 <printer_close>
   11eec:	12 c0       	rjmp	.+36     	; 0x11f12 <GPIB+0x168>
   11eee:	25 71       	andi	r18, 0x15	; 21
   11ef0:	33 27       	eor	r19, r19
   11ef2:	23 2b       	or	r18, r19
   11ef4:	71 f0       	breq	.+28     	; 0x11f12 <GPIB+0x168>
   11ef6:	1f 92       	push	r1
   11ef8:	8f 93       	push	r24
   11efa:	81 ee       	ldi	r24, 0xE1	; 225
   11efc:	92 e1       	ldi	r25, 0x12	; 18
   11efe:	1f 92       	push	r1
   11f00:	9f 93       	push	r25
   11f02:	8f 93       	push	r24
   11f04:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   11f08:	0f 90       	pop	r0
   11f0a:	0f 90       	pop	r0
   11f0c:	0f 90       	pop	r0
   11f0e:	0f 90       	pop	r0
   11f10:	0f 90       	pop	r0
   11f12:	80 e0       	ldi	r24, 0x00	; 0
   11f14:	90 e0       	ldi	r25, 0x00	; 0
   11f16:	08 95       	ret

00011f18 <GPIB_TALK>:
   11f18:	0f 93       	push	r16
   11f1a:	1f 93       	push	r17
   11f1c:	cf 93       	push	r28
   11f1e:	c8 2f       	mov	r28, r24
   11f20:	80 91 ee 1d 	lds	r24, 0x1DEE	; 0x801dee <talking>
   11f24:	80 93 f1 1d 	sts	0x1DF1, r24	; 0x801df1 <talking_last>
   11f28:	c0 93 ee 1d 	sts	0x1DEE, r28	; 0x801dee <talking>
   11f2c:	cf 35       	cpi	r28, 0x5F	; 95
   11f2e:	79 f4       	brne	.+30     	; 0x11f4e <GPIB_TALK+0x36>
   11f30:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11f34:	82 ff       	sbrs	r24, 2
   11f36:	7f c0       	rjmp	.+254    	; 0x12036 <GPIB_TALK+0x11e>
   11f38:	8e e8       	ldi	r24, 0x8E	; 142
   11f3a:	92 e1       	ldi	r25, 0x12	; 18
   11f3c:	1f 92       	push	r1
   11f3e:	9f 93       	push	r25
   11f40:	8f 93       	push	r24
   11f42:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   11f46:	0f 90       	pop	r0
   11f48:	0f 90       	pop	r0
   11f4a:	0f 90       	pop	r0
   11f4c:	74 c0       	rjmp	.+232    	; 0x12036 <GPIB_TALK+0x11e>
   11f4e:	0c 2f       	mov	r16, r28
   11f50:	10 e0       	ldi	r17, 0x00	; 0
   11f52:	c8 01       	movw	r24, r16
   11f54:	05 dd       	rcall	.-1526   	; 0x11960 <SS80_is_MTA>
   11f56:	89 2b       	or	r24, r25
   11f58:	f1 f0       	breq	.+60     	; 0x11f96 <GPIB_TALK+0x7e>
   11f5a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11f5e:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11f62:	84 72       	andi	r24, 0x24	; 36
   11f64:	99 27       	eor	r25, r25
   11f66:	89 2b       	or	r24, r25
   11f68:	71 f0       	breq	.+28     	; 0x11f86 <GPIB_TALK+0x6e>
   11f6a:	1f 92       	push	r1
   11f6c:	cf 93       	push	r28
   11f6e:	8d e7       	ldi	r24, 0x7D	; 125
   11f70:	92 e1       	ldi	r25, 0x12	; 18
   11f72:	1f 92       	push	r1
   11f74:	9f 93       	push	r25
   11f76:	8f 93       	push	r24
   11f78:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   11f7c:	0f 90       	pop	r0
   11f7e:	0f 90       	pop	r0
   11f80:	0f 90       	pop	r0
   11f82:	0f 90       	pop	r0
   11f84:	0f 90       	pop	r0
   11f86:	80 91 eb 1d 	lds	r24, 0x1DEB	; 0x801deb <spoll>
   11f8a:	88 23       	and	r24, r24
   11f8c:	09 f4       	brne	.+2      	; 0x11f90 <GPIB_TALK+0x78>
   11f8e:	53 c0       	rjmp	.+166    	; 0x12036 <GPIB_TALK+0x11e>
   11f90:	0e 94 ea af 	call	0x15fd4	; 0x15fd4 <SS80_Report>
   11f94:	50 c0       	rjmp	.+160    	; 0x12036 <GPIB_TALK+0x11e>
   11f96:	c8 01       	movw	r24, r16
   11f98:	10 dd       	rcall	.-1504   	; 0x119ba <AMIGO_is_MTA>
   11f9a:	89 2b       	or	r24, r25
   11f9c:	71 f0       	breq	.+28     	; 0x11fba <GPIB_TALK+0xa2>
   11f9e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11fa2:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11fa6:	84 72       	andi	r24, 0x24	; 36
   11fa8:	99 27       	eor	r25, r25
   11faa:	89 2b       	or	r24, r25
   11fac:	09 f4       	brne	.+2      	; 0x11fb0 <GPIB_TALK+0x98>
   11fae:	43 c0       	rjmp	.+134    	; 0x12036 <GPIB_TALK+0x11e>
   11fb0:	1f 92       	push	r1
   11fb2:	cf 93       	push	r28
   11fb4:	8b e6       	ldi	r24, 0x6B	; 107
   11fb6:	92 e1       	ldi	r25, 0x12	; 18
   11fb8:	34 c0       	rjmp	.+104    	; 0x12022 <GPIB_TALK+0x10a>
   11fba:	c8 01       	movw	r24, r16
   11fbc:	2b dd       	rcall	.-1450   	; 0x11a14 <PRINTER_is_MTA>
   11fbe:	89 2b       	or	r24, r25
   11fc0:	69 f0       	breq	.+26     	; 0x11fdc <GPIB_TALK+0xc4>
   11fc2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11fc6:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11fca:	84 72       	andi	r24, 0x24	; 36
   11fcc:	99 27       	eor	r25, r25
   11fce:	89 2b       	or	r24, r25
   11fd0:	91 f1       	breq	.+100    	; 0x12036 <GPIB_TALK+0x11e>
   11fd2:	1f 92       	push	r1
   11fd4:	cf 93       	push	r28
   11fd6:	87 e5       	ldi	r24, 0x57	; 87
   11fd8:	92 e1       	ldi	r25, 0x12	; 18
   11fda:	23 c0       	rjmp	.+70     	; 0x12022 <GPIB_TALK+0x10a>
   11fdc:	80 91 f0 1d 	lds	r24, 0x1DF0	; 0x801df0 <listening>
   11fe0:	90 e0       	ldi	r25, 0x00	; 0
   11fe2:	09 dd       	rcall	.-1518   	; 0x119f6 <PRINTER_is_MLA>
   11fe4:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   11fe8:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
   11fec:	89 2b       	or	r24, r25
   11fee:	99 f0       	breq	.+38     	; 0x12016 <GPIB_TALK+0xfe>
   11ff0:	24 72       	andi	r18, 0x24	; 36
   11ff2:	33 27       	eor	r19, r19
   11ff4:	23 2b       	or	r18, r19
   11ff6:	51 f0       	breq	.+20     	; 0x1200c <GPIB_TALK+0xf4>
   11ff8:	87 e4       	ldi	r24, 0x47	; 71
   11ffa:	92 e1       	ldi	r25, 0x12	; 18
   11ffc:	1f 92       	push	r1
   11ffe:	9f 93       	push	r25
   12000:	8f 93       	push	r24
   12002:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   12006:	0f 90       	pop	r0
   12008:	0f 90       	pop	r0
   1200a:	0f 90       	pop	r0
   1200c:	80 e0       	ldi	r24, 0x00	; 0
   1200e:	90 e0       	ldi	r25, 0x00	; 0
   12010:	0e 94 10 c1 	call	0x18220	; 0x18220 <printer_open>
   12014:	10 c0       	rjmp	.+32     	; 0x12036 <GPIB_TALK+0x11e>
   12016:	22 ff       	sbrs	r18, 2
   12018:	0e c0       	rjmp	.+28     	; 0x12036 <GPIB_TALK+0x11e>
   1201a:	1f 92       	push	r1
   1201c:	cf 93       	push	r28
   1201e:	8b e3       	ldi	r24, 0x3B	; 59
   12020:	92 e1       	ldi	r25, 0x12	; 18
   12022:	1f 92       	push	r1
   12024:	9f 93       	push	r25
   12026:	8f 93       	push	r24
   12028:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1202c:	0f 90       	pop	r0
   1202e:	0f 90       	pop	r0
   12030:	0f 90       	pop	r0
   12032:	0f 90       	pop	r0
   12034:	0f 90       	pop	r0
   12036:	80 e0       	ldi	r24, 0x00	; 0
   12038:	90 e0       	ldi	r25, 0x00	; 0
   1203a:	cf 91       	pop	r28
   1203c:	1f 91       	pop	r17
   1203e:	0f 91       	pop	r16
   12040:	08 95       	ret

00012042 <GPIB_SECONDARY_ADDRESS>:
   12042:	0f 93       	push	r16
   12044:	1f 93       	push	r17
   12046:	cf 93       	push	r28
   12048:	c8 2f       	mov	r28, r24
   1204a:	08 2f       	mov	r16, r24
   1204c:	10 e0       	ldi	r17, 0x00	; 0
   1204e:	c8 01       	movw	r24, r16
   12050:	96 dc       	rcall	.-1748   	; 0x1197e <SS80_is_MSA>
   12052:	89 2b       	or	r24, r25
   12054:	19 f1       	breq	.+70     	; 0x1209c <GPIB_SECONDARY_ADDRESS+0x5a>
   12056:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1205a:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1205e:	84 72       	andi	r24, 0x24	; 36
   12060:	99 27       	eor	r25, r25
   12062:	89 2b       	or	r24, r25
   12064:	71 f0       	breq	.+28     	; 0x12082 <GPIB_SECONDARY_ADDRESS+0x40>
   12066:	1f 92       	push	r1
   12068:	cf 93       	push	r28
   1206a:	8a e2       	ldi	r24, 0x2A	; 42
   1206c:	92 e1       	ldi	r25, 0x12	; 18
   1206e:	1f 92       	push	r1
   12070:	9f 93       	push	r25
   12072:	8f 93       	push	r24
   12074:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   12078:	0f 90       	pop	r0
   1207a:	0f 90       	pop	r0
   1207c:	0f 90       	pop	r0
   1207e:	0f 90       	pop	r0
   12080:	0f 90       	pop	r0
   12082:	e0 91 6d 18 	lds	r30, 0x186D	; 0x80186d <SS80p>
   12086:	f0 91 6e 18 	lds	r31, 0x186E	; 0x80186e <SS80p+0x1>
   1208a:	81 81       	ldd	r24, Z+1	; 0x01
   1208c:	90 e0       	ldi	r25, 0x00	; 0
   1208e:	0e 94 c5 86 	call	0x10d8a	; 0x10d8a <gpib_disable_PPR>
   12092:	e0 91 6d 18 	lds	r30, 0x186D	; 0x80186d <SS80p>
   12096:	f0 91 6e 18 	lds	r31, 0x186E	; 0x80186e <SS80p+0x1>
   1209a:	27 c0       	rjmp	.+78     	; 0x120ea <GPIB_SECONDARY_ADDRESS+0xa8>
   1209c:	c8 01       	movw	r24, r16
   1209e:	9c dc       	rcall	.-1736   	; 0x119d8 <AMIGO_is_MSA>
   120a0:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   120a4:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
   120a8:	89 2b       	or	r24, r25
   120aa:	21 f1       	breq	.+72     	; 0x120f4 <GPIB_SECONDARY_ADDRESS+0xb2>
   120ac:	c9 01       	movw	r24, r18
   120ae:	84 72       	andi	r24, 0x24	; 36
   120b0:	99 27       	eor	r25, r25
   120b2:	89 2b       	or	r24, r25
   120b4:	71 f0       	breq	.+28     	; 0x120d2 <GPIB_SECONDARY_ADDRESS+0x90>
   120b6:	1f 92       	push	r1
   120b8:	cf 93       	push	r28
   120ba:	88 e1       	ldi	r24, 0x18	; 24
   120bc:	92 e1       	ldi	r25, 0x12	; 18
   120be:	1f 92       	push	r1
   120c0:	9f 93       	push	r25
   120c2:	8f 93       	push	r24
   120c4:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   120c8:	0f 90       	pop	r0
   120ca:	0f 90       	pop	r0
   120cc:	0f 90       	pop	r0
   120ce:	0f 90       	pop	r0
   120d0:	0f 90       	pop	r0
   120d2:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <AMIGOp>
   120d6:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <AMIGOp+0x1>
   120da:	81 81       	ldd	r24, Z+1	; 0x01
   120dc:	90 e0       	ldi	r25, 0x00	; 0
   120de:	0e 94 c5 86 	call	0x10d8a	; 0x10d8a <gpib_disable_PPR>
   120e2:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <AMIGOp>
   120e6:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <AMIGOp+0x1>
   120ea:	63 a1       	ldd	r22, Z+35	; 0x23
   120ec:	74 a1       	ldd	r23, Z+36	; 0x24
   120ee:	8c 2f       	mov	r24, r28
   120f0:	13 de       	rcall	.-986    	; 0x11d18 <Send_Identify>
   120f2:	20 c0       	rjmp	.+64     	; 0x12134 <GPIB_SECONDARY_ADDRESS+0xf2>
   120f4:	c9 01       	movw	r24, r18
   120f6:	84 72       	andi	r24, 0x24	; 36
   120f8:	99 27       	eor	r25, r25
   120fa:	00 97       	sbiw	r24, 0x00	; 0
   120fc:	d9 f0       	breq	.+54     	; 0x12134 <GPIB_SECONDARY_ADDRESS+0xf2>
   120fe:	80 91 ee 1d 	lds	r24, 0x1DEE	; 0x801dee <talking>
   12102:	1f 92       	push	r1
   12104:	8f 93       	push	r24
   12106:	80 91 f0 1d 	lds	r24, 0x1DF0	; 0x801df0 <listening>
   1210a:	1f 92       	push	r1
   1210c:	8f 93       	push	r24
   1210e:	1f 92       	push	r1
   12110:	cf 93       	push	r28
   12112:	82 ef       	ldi	r24, 0xF2	; 242
   12114:	91 e1       	ldi	r25, 0x11	; 17
   12116:	1f 92       	push	r1
   12118:	9f 93       	push	r25
   1211a:	8f 93       	push	r24
   1211c:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   12120:	8d b7       	in	r24, 0x3d	; 61
   12122:	9e b7       	in	r25, 0x3e	; 62
   12124:	09 96       	adiw	r24, 0x09	; 9
   12126:	0f b6       	in	r0, 0x3f	; 63
   12128:	f8 94       	cli
   1212a:	9e bf       	out	0x3e, r25	; 62
   1212c:	0f be       	out	0x3f, r0	; 63
   1212e:	8d bf       	out	0x3d, r24	; 61
   12130:	80 e0       	ldi	r24, 0x00	; 0
   12132:	90 e0       	ldi	r25, 0x00	; 0
   12134:	cf 91       	pop	r28
   12136:	1f 91       	pop	r17
   12138:	0f 91       	pop	r16
   1213a:	08 95       	ret

0001213c <listen_cleanup>:
   1213c:	60 91 ea 1d 	lds	r22, 0x1DEA	; 0x801dea <listening_last>
   12140:	66 23       	and	r22, r22
   12142:	e1 f0       	breq	.+56     	; 0x1217c <listen_cleanup+0x40>
   12144:	70 e0       	ldi	r23, 0x00	; 0
   12146:	40 e2       	ldi	r20, 0x20	; 32
   12148:	50 e0       	ldi	r21, 0x00	; 0
   1214a:	84 e0       	ldi	r24, 0x04	; 4
   1214c:	90 e0       	ldi	r25, 0x00	; 0
   1214e:	89 d2       	rcall	.+1298   	; 0x12662 <find_device>
   12150:	01 96       	adiw	r24, 0x01	; 1
   12152:	a1 f0       	breq	.+40     	; 0x1217c <listen_cleanup+0x40>
   12154:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   12158:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1215c:	84 72       	andi	r24, 0x24	; 36
   1215e:	99 27       	eor	r25, r25
   12160:	89 2b       	or	r24, r25
   12162:	51 f0       	breq	.+20     	; 0x12178 <listen_cleanup+0x3c>
   12164:	81 ee       	ldi	r24, 0xE1	; 225
   12166:	91 e1       	ldi	r25, 0x11	; 17
   12168:	1f 92       	push	r1
   1216a:	9f 93       	push	r25
   1216c:	8f 93       	push	r24
   1216e:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   12172:	0f 90       	pop	r0
   12174:	0f 90       	pop	r0
   12176:	0f 90       	pop	r0
   12178:	0c 94 c3 c0 	jmp	0x18186	; 0x18186 <printer_close>
   1217c:	08 95       	ret

0001217e <GPIB_LISTEN>:
   1217e:	0f 93       	push	r16
   12180:	1f 93       	push	r17
   12182:	cf 93       	push	r28
   12184:	c8 2f       	mov	r28, r24
   12186:	80 91 f0 1d 	lds	r24, 0x1DF0	; 0x801df0 <listening>
   1218a:	80 93 ea 1d 	sts	0x1DEA, r24	; 0x801dea <listening_last>
   1218e:	c0 93 f0 1d 	sts	0x1DF0, r28	; 0x801df0 <listening>
   12192:	d4 df       	rcall	.-88     	; 0x1213c <listen_cleanup>
   12194:	cf 33       	cpi	r28, 0x3F	; 63
   12196:	19 f5       	brne	.+70     	; 0x121de <GPIB_LISTEN+0x60>
   12198:	10 92 f0 1d 	sts	0x1DF0, r1	; 0x801df0 <listening>
   1219c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   121a0:	82 ff       	sbrs	r24, 2
   121a2:	75 c0       	rjmp	.+234    	; 0x1228e <GPIB_LISTEN+0x110>
   121a4:	8a ed       	ldi	r24, 0xDA	; 218
   121a6:	92 e1       	ldi	r25, 0x12	; 18
   121a8:	1f 92       	push	r1
   121aa:	9f 93       	push	r25
   121ac:	8f 93       	push	r24
   121ae:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   121b2:	0f 90       	pop	r0
   121b4:	0f 90       	pop	r0
   121b6:	0f 90       	pop	r0
   121b8:	80 91 e8 1b 	lds	r24, 0x1BE8	; 0x801be8 <lastcmd>
   121bc:	90 91 e9 1b 	lds	r25, 0x1BE9	; 0x801be9 <lastcmd+0x1>
   121c0:	8f 35       	cpi	r24, 0x5F	; 95
   121c2:	91 05       	cpc	r25, r1
   121c4:	09 f0       	breq	.+2      	; 0x121c8 <GPIB_LISTEN+0x4a>
   121c6:	63 c0       	rjmp	.+198    	; 0x1228e <GPIB_LISTEN+0x110>
   121c8:	88 ed       	ldi	r24, 0xD8	; 216
   121ca:	92 e1       	ldi	r25, 0x12	; 18
   121cc:	1f 92       	push	r1
   121ce:	9f 93       	push	r25
   121d0:	8f 93       	push	r24
   121d2:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   121d6:	0f 90       	pop	r0
   121d8:	0f 90       	pop	r0
   121da:	0f 90       	pop	r0
   121dc:	58 c0       	rjmp	.+176    	; 0x1228e <GPIB_LISTEN+0x110>
   121de:	0c 2f       	mov	r16, r28
   121e0:	10 e0       	ldi	r17, 0x00	; 0
   121e2:	c8 01       	movw	r24, r16
   121e4:	db db       	rcall	.-2122   	; 0x1199c <AMIGO_is_MLA>
   121e6:	89 2b       	or	r24, r25
   121e8:	71 f0       	breq	.+28     	; 0x12206 <GPIB_LISTEN+0x88>
   121ea:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   121ee:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   121f2:	84 72       	andi	r24, 0x24	; 36
   121f4:	99 27       	eor	r25, r25
   121f6:	89 2b       	or	r24, r25
   121f8:	09 f4       	brne	.+2      	; 0x121fc <GPIB_LISTEN+0x7e>
   121fa:	49 c0       	rjmp	.+146    	; 0x1228e <GPIB_LISTEN+0x110>
   121fc:	1f 92       	push	r1
   121fe:	cf 93       	push	r28
   12200:	86 ec       	ldi	r24, 0xC6	; 198
   12202:	92 e1       	ldi	r25, 0x12	; 18
   12204:	3a c0       	rjmp	.+116    	; 0x1227a <GPIB_LISTEN+0xfc>
   12206:	c8 01       	movw	r24, r16
   12208:	9c db       	rcall	.-2248   	; 0x11942 <SS80_is_MLA>
   1220a:	89 2b       	or	r24, r25
   1220c:	69 f0       	breq	.+26     	; 0x12228 <GPIB_LISTEN+0xaa>
   1220e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   12212:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   12216:	84 72       	andi	r24, 0x24	; 36
   12218:	99 27       	eor	r25, r25
   1221a:	89 2b       	or	r24, r25
   1221c:	c1 f1       	breq	.+112    	; 0x1228e <GPIB_LISTEN+0x110>
   1221e:	1f 92       	push	r1
   12220:	cf 93       	push	r28
   12222:	85 eb       	ldi	r24, 0xB5	; 181
   12224:	92 e1       	ldi	r25, 0x12	; 18
   12226:	29 c0       	rjmp	.+82     	; 0x1227a <GPIB_LISTEN+0xfc>
   12228:	c8 01       	movw	r24, r16
   1222a:	e5 db       	rcall	.-2102   	; 0x119f6 <PRINTER_is_MLA>
   1222c:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   12230:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
   12234:	89 2b       	or	r24, r25
   12236:	d9 f0       	breq	.+54     	; 0x1226e <GPIB_LISTEN+0xf0>
   12238:	24 72       	andi	r18, 0x24	; 36
   1223a:	33 27       	eor	r19, r19
   1223c:	23 2b       	or	r18, r19
   1223e:	71 f0       	breq	.+28     	; 0x1225c <GPIB_LISTEN+0xde>
   12240:	1f 92       	push	r1
   12242:	cf 93       	push	r28
   12244:	81 ea       	ldi	r24, 0xA1	; 161
   12246:	92 e1       	ldi	r25, 0x12	; 18
   12248:	1f 92       	push	r1
   1224a:	9f 93       	push	r25
   1224c:	8f 93       	push	r24
   1224e:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   12252:	0f 90       	pop	r0
   12254:	0f 90       	pop	r0
   12256:	0f 90       	pop	r0
   12258:	0f 90       	pop	r0
   1225a:	0f 90       	pop	r0
   1225c:	80 91 ee 1d 	lds	r24, 0x1DEE	; 0x801dee <talking>
   12260:	8f 35       	cpi	r24, 0x5F	; 95
   12262:	a9 f0       	breq	.+42     	; 0x1228e <GPIB_LISTEN+0x110>
   12264:	80 e0       	ldi	r24, 0x00	; 0
   12266:	90 e0       	ldi	r25, 0x00	; 0
   12268:	0e 94 10 c1 	call	0x18220	; 0x18220 <printer_open>
   1226c:	10 c0       	rjmp	.+32     	; 0x1228e <GPIB_LISTEN+0x110>
   1226e:	22 ff       	sbrs	r18, 2
   12270:	0e c0       	rjmp	.+28     	; 0x1228e <GPIB_LISTEN+0x110>
   12272:	1f 92       	push	r1
   12274:	cf 93       	push	r28
   12276:	85 e9       	ldi	r24, 0x95	; 149
   12278:	92 e1       	ldi	r25, 0x12	; 18
   1227a:	1f 92       	push	r1
   1227c:	9f 93       	push	r25
   1227e:	8f 93       	push	r24
   12280:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   12284:	0f 90       	pop	r0
   12286:	0f 90       	pop	r0
   12288:	0f 90       	pop	r0
   1228a:	0f 90       	pop	r0
   1228c:	0f 90       	pop	r0
   1228e:	80 e0       	ldi	r24, 0x00	; 0
   12290:	90 e0       	ldi	r25, 0x00	; 0
   12292:	cf 91       	pop	r28
   12294:	1f 91       	pop	r17
   12296:	0f 91       	pop	r16
   12298:	08 95       	ret

0001229a <gpib_task>:
   1229a:	cf 93       	push	r28
   1229c:	df 93       	push	r29
   1229e:	0e 94 6c 86 	call	0x10cd8	; 0x10cd8 <gpib_state_init>
   122a2:	c7 db       	rcall	.-2162   	; 0x11a32 <gpib_init_devices>
   122a4:	10 92 64 18 	sts	0x1864, r1	; 0x801864 <gpib_log_fp+0x1>
   122a8:	10 92 63 18 	sts	0x1863, r1	; 0x801863 <gpib_log_fp>
   122ac:	80 e0       	ldi	r24, 0x00	; 0
   122ae:	90 e0       	ldi	r25, 0x00	; 0
   122b0:	03 d9       	rcall	.-3578   	; 0x114b8 <gpib_read_byte>
   122b2:	ec 01       	movw	r28, r24
   122b4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   122b8:	83 ff       	sbrs	r24, 3
   122ba:	02 c0       	rjmp	.+4      	; 0x122c0 <gpib_task+0x26>
   122bc:	ce 01       	movw	r24, r28
   122be:	d2 d9       	rcall	.-3164   	; 0x11664 <gpib_decode>
   122c0:	ce 01       	movw	r24, r28
   122c2:	4c dc       	rcall	.-1896   	; 0x11b5c <gpib_error_test>
   122c4:	9c 01       	movw	r18, r24
   122c6:	23 70       	andi	r18, 0x03	; 3
   122c8:	33 27       	eor	r19, r19
   122ca:	23 2b       	or	r18, r19
   122cc:	09 f0       	breq	.+2      	; 0x122d0 <gpib_task+0x36>
   122ce:	43 c0       	rjmp	.+134    	; 0x12356 <gpib_task+0xbc>
   122d0:	89 2b       	or	r24, r25
   122d2:	61 f7       	brne	.-40     	; 0x122ac <gpib_task+0x12>
   122d4:	d2 ff       	sbrs	r29, 2
   122d6:	26 c0       	rjmp	.+76     	; 0x12324 <gpib_task+0x8a>
   122d8:	8c 2f       	mov	r24, r28
   122da:	8f 77       	andi	r24, 0x7F	; 127
   122dc:	80 32       	cpi	r24, 0x20	; 32
   122de:	10 f4       	brcc	.+4      	; 0x122e4 <gpib_task+0x4a>
   122e0:	64 dd       	rcall	.-1336   	; 0x11daa <GPIB>
   122e2:	e4 cf       	rjmp	.-56     	; 0x122ac <gpib_task+0x12>
   122e4:	90 ee       	ldi	r25, 0xE0	; 224
   122e6:	98 0f       	add	r25, r24
   122e8:	90 32       	cpi	r25, 0x20	; 32
   122ea:	10 f4       	brcc	.+4      	; 0x122f0 <gpib_task+0x56>
   122ec:	48 df       	rcall	.-368    	; 0x1217e <GPIB_LISTEN>
   122ee:	de cf       	rjmp	.-68     	; 0x122ac <gpib_task+0x12>
   122f0:	90 ec       	ldi	r25, 0xC0	; 192
   122f2:	98 0f       	add	r25, r24
   122f4:	90 32       	cpi	r25, 0x20	; 32
   122f6:	10 f4       	brcc	.+4      	; 0x122fc <gpib_task+0x62>
   122f8:	0f de       	rcall	.-994    	; 0x11f18 <GPIB_TALK>
   122fa:	d8 cf       	rjmp	.-80     	; 0x122ac <gpib_task+0x12>
   122fc:	90 91 f0 1d 	lds	r25, 0x1DF0	; 0x801df0 <listening>
   12300:	99 23       	and	r25, r25
   12302:	59 f0       	breq	.+22     	; 0x1231a <gpib_task+0x80>
   12304:	20 91 e8 1b 	lds	r18, 0x1BE8	; 0x801be8 <lastcmd>
   12308:	30 91 e9 1b 	lds	r19, 0x1BE9	; 0x801be9 <lastcmd+0x1>
   1230c:	2f 35       	cpi	r18, 0x5F	; 95
   1230e:	31 05       	cpc	r19, r1
   12310:	21 f4       	brne	.+8      	; 0x1231a <gpib_task+0x80>
   12312:	10 92 ef 1d 	sts	0x1DEF, r1	; 0x801def <secondary>
   12316:	95 de       	rcall	.-726    	; 0x12042 <GPIB_SECONDARY_ADDRESS>
   12318:	c9 cf       	rjmp	.-110    	; 0x122ac <gpib_task+0x12>
   1231a:	80 93 ef 1d 	sts	0x1DEF, r24	; 0x801def <secondary>
   1231e:	60 e0       	ldi	r22, 0x00	; 0
   12320:	90 e0       	ldi	r25, 0x00	; 0
   12322:	12 c0       	rjmp	.+36     	; 0x12348 <gpib_task+0xae>
   12324:	80 91 f0 1d 	lds	r24, 0x1DF0	; 0x801df0 <listening>
   12328:	90 e0       	ldi	r25, 0x00	; 0
   1232a:	65 db       	rcall	.-2358   	; 0x119f6 <PRINTER_is_MLA>
   1232c:	89 2b       	or	r24, r25
   1232e:	29 f0       	breq	.+10     	; 0x1233a <gpib_task+0xa0>
   12330:	ce 01       	movw	r24, r28
   12332:	99 27       	eor	r25, r25
   12334:	0e 94 b1 c1 	call	0x18362	; 0x18362 <printer_buffer>
   12338:	b9 cf       	rjmp	.-142    	; 0x122ac <gpib_task+0x12>
   1233a:	80 91 ef 1d 	lds	r24, 0x1DEF	; 0x801def <secondary>
   1233e:	88 23       	and	r24, r24
   12340:	09 f4       	brne	.+2      	; 0x12344 <gpib_task+0xaa>
   12342:	b4 cf       	rjmp	.-152    	; 0x122ac <gpib_task+0x12>
   12344:	61 e0       	ldi	r22, 0x01	; 1
   12346:	ce 01       	movw	r24, r28
   12348:	93 dc       	rcall	.-1754   	; 0x11c70 <GPIB_COMMANDS>
   1234a:	08 dc       	rcall	.-2032   	; 0x11b5c <gpib_error_test>
   1234c:	83 70       	andi	r24, 0x03	; 3
   1234e:	99 27       	eor	r25, r25
   12350:	89 2b       	or	r24, r25
   12352:	09 f4       	brne	.+2      	; 0x12356 <gpib_task+0xbc>
   12354:	ab cf       	rjmp	.-170    	; 0x122ac <gpib_task+0x12>
   12356:	df 91       	pop	r29
   12358:	cf 91       	pop	r28
   1235a:	08 95       	ret

0001235c <talk_cleanup>:
   1235c:	08 95       	ret

0001235e <gpib_help>:
///  Help Menu for User invoked GPIB functions and tasks
///  See: int gpib_tests(char *str)
/// @return  void

void gpib_help(int full)
{
   1235e:	cf 93       	push	r28
   12360:	df 93       	push	r29
   12362:	ec 01       	movw	r28, r24
    printf("gpib help\n");
   12364:	8d e4       	ldi	r24, 0x4D	; 77
   12366:	95 e1       	ldi	r25, 0x15	; 21
   12368:	1f 92       	push	r1
   1236a:	9f 93       	push	r25
   1236c:	8f 93       	push	r24
   1236e:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    if(full)
   12372:	0f 90       	pop	r0
   12374:	0f 90       	pop	r0
   12376:	0f 90       	pop	r0
   12378:	cd 2b       	or	r28, r29
   1237a:	51 f0       	breq	.+20     	; 0x12390 <gpib_help+0x32>
    {
        printf("gpib prefix is optional\n"
   1237c:	83 e9       	ldi	r24, 0x93	; 147
   1237e:	94 e1       	ldi	r25, 0x14	; 20
   12380:	1f 92       	push	r1
   12382:	9f 93       	push	r25
   12384:	8f 93       	push	r24
   12386:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1238a:	0f 90       	pop	r0
   1238c:	0f 90       	pop	r0
   1238e:	0f 90       	pop	r0
            "gpib ppr_set XX\n"
#endif
            "\n"
            );
    }
}
   12390:	df 91       	pop	r29
   12392:	cf 91       	pop	r28
   12394:	08 95       	ret

00012396 <gpib_tests>:

/// @brief GPIB user tests
///  User invoked GPIB functions and tasks
/// @return  1 matched token, 0 if not
int gpib_tests(int argc, char * argv[])
{
   12396:	ef 92       	push	r14
   12398:	ff 92       	push	r15
   1239a:	0f 93       	push	r16
   1239c:	1f 93       	push	r17
   1239e:	cf 93       	push	r28
   123a0:	df 93       	push	r29
   123a2:	8c 01       	movw	r16, r24

    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   123a4:	fb 01       	movw	r30, r22
   123a6:	80 81       	ld	r24, Z
   123a8:	91 81       	ldd	r25, Z+1	; 0x01

    // skip optional gpib key word
    if( !ptr || !MATCH(ptr,"gpib") )
   123aa:	00 97       	sbiw	r24, 0x00	; 0
   123ac:	19 f4       	brne	.+6      	; 0x123b4 <gpib_tests+0x1e>
        return(0);
   123ae:	80 e0       	ldi	r24, 0x00	; 0
   123b0:	90 e0       	ldi	r25, 0x00	; 0
   123b2:	aa c0       	rjmp	.+340    	; 0x12508 <gpib_tests+0x172>
   123b4:	7b 01       	movw	r14, r22

    ind = 0;
    ptr = argv[ind++];

    // skip optional gpib key word
    if( !ptr || !MATCH(ptr,"gpib") )
   123b6:	67 e2       	ldi	r22, 0x27	; 39
   123b8:	7d e0       	ldi	r23, 0x0D	; 13
   123ba:	0e 94 33 33 	call	0x6666	; 0x6666 <MATCH>
   123be:	89 2b       	or	r24, r25
   123c0:	b1 f3       	breq	.-20     	; 0x123ae <gpib_tests+0x18>
        return(0);

    ptr = argv[ind++];
   123c2:	f7 01       	movw	r30, r14
   123c4:	c2 81       	ldd	r28, Z+2	; 0x02
   123c6:	d3 81       	ldd	r29, Z+3	; 0x03
    if ( !ptr || MATCH(ptr,"help") )
   123c8:	20 97       	sbiw	r28, 0x00	; 0
   123ca:	21 f4       	brne	.+8      	; 0x123d4 <gpib_tests+0x3e>
    {
        gpib_help(1);
   123cc:	81 e0       	ldi	r24, 0x01	; 1
   123ce:	90 e0       	ldi	r25, 0x00	; 0
   123d0:	c6 df       	rcall	.-116    	; 0x1235e <gpib_help>
   123d2:	98 c0       	rjmp	.+304    	; 0x12504 <gpib_tests+0x16e>
    // skip optional gpib key word
    if( !ptr || !MATCH(ptr,"gpib") )
        return(0);

    ptr = argv[ind++];
    if ( !ptr || MATCH(ptr,"help") )
   123d4:	67 ef       	ldi	r22, 0xF7	; 247
   123d6:	75 e1       	ldi	r23, 0x15	; 21
   123d8:	ce 01       	movw	r24, r28
   123da:	0e 94 33 33 	call	0x6666	; 0x6666 <MATCH>
   123de:	89 2b       	or	r24, r25
   123e0:	a9 f7       	brne	.-22     	; 0x123cc <gpib_tests+0x36>
    {
        gpib_help(1);
        return(1);
    }

    if (MATCHARGS(ptr,"addresses",(ind+0),argc))
   123e2:	98 01       	movw	r18, r16
   123e4:	42 e0       	ldi	r20, 0x02	; 2
   123e6:	50 e0       	ldi	r21, 0x00	; 0
   123e8:	6c e2       	ldi	r22, 0x2C	; 44
   123ea:	7d e0       	ldi	r23, 0x0D	; 13
   123ec:	ce 01       	movw	r24, r28
   123ee:	0e 94 47 33 	call	0x668e	; 0x668e <MATCHARGS>
   123f2:	89 2b       	or	r24, r25
   123f4:	19 f0       	breq	.+6      	; 0x123fc <gpib_tests+0x66>
    {
        display_Addresses();
   123f6:	0e 94 fc a0 	call	0x141f8	; 0x141f8 <display_Addresses>
   123fa:	84 c0       	rjmp	.+264    	; 0x12504 <gpib_tests+0x16e>
        return(1);
    }

    if (MATCHARGS(ptr,"config",(ind+0),argc))
   123fc:	98 01       	movw	r18, r16
   123fe:	42 e0       	ldi	r20, 0x02	; 2
   12400:	50 e0       	ldi	r21, 0x00	; 0
   12402:	66 e3       	ldi	r22, 0x36	; 54
   12404:	7d e0       	ldi	r23, 0x0D	; 13
   12406:	ce 01       	movw	r24, r28
   12408:	0e 94 47 33 	call	0x668e	; 0x668e <MATCHARGS>
   1240c:	89 2b       	or	r24, r25
   1240e:	19 f0       	breq	.+6      	; 0x12416 <gpib_tests+0x80>
    {
        display_Config();
   12410:	0e 94 f7 a1 	call	0x143ee	; 0x143ee <display_Config>
   12414:	77 c0       	rjmp	.+238    	; 0x12504 <gpib_tests+0x16e>
        return(1);
    }

    if (MATCHARGS(ptr,"debug", (ind+1) ,argc))
   12416:	98 01       	movw	r18, r16
   12418:	43 e0       	ldi	r20, 0x03	; 3
   1241a:	50 e0       	ldi	r21, 0x00	; 0
   1241c:	6d e3       	ldi	r22, 0x3D	; 61
   1241e:	7d e0       	ldi	r23, 0x0D	; 13
   12420:	ce 01       	movw	r24, r28
   12422:	0e 94 47 33 	call	0x668e	; 0x668e <MATCHARGS>
   12426:	89 2b       	or	r24, r25
   12428:	c1 f0       	breq	.+48     	; 0x1245a <gpib_tests+0xc4>
    {
        debuglevel = get_value(argv[ind]);
   1242a:	f7 01       	movw	r30, r14
   1242c:	84 81       	ldd	r24, Z+4	; 0x04
   1242e:	95 81       	ldd	r25, Z+5	; 0x05
   12430:	0e 94 75 34 	call	0x68ea	; 0x68ea <get_value>
   12434:	60 93 bd 01 	sts	0x01BD, r22	; 0x8001bd <debuglevel>
   12438:	70 93 be 01 	sts	0x01BE, r23	; 0x8001be <debuglevel+0x1>
        printf("debug=%04XH\n", debuglevel);
   1243c:	7f 93       	push	r23
   1243e:	6f 93       	push	r22
   12440:	86 e8       	ldi	r24, 0x86	; 134
   12442:	94 e1       	ldi	r25, 0x14	; 20
   12444:	1f 92       	push	r1
   12446:	9f 93       	push	r25
   12448:	8f 93       	push	r24
   1244a:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
        return(1);
   1244e:	0f 90       	pop	r0
   12450:	0f 90       	pop	r0
   12452:	0f 90       	pop	r0
   12454:	0f 90       	pop	r0
   12456:	0f 90       	pop	r0
   12458:	55 c0       	rjmp	.+170    	; 0x12504 <gpib_tests+0x16e>
    }

    if (MATCHARGS(ptr,"elapsed_reset",(ind+0),argc))
   1245a:	98 01       	movw	r18, r16
   1245c:	42 e0       	ldi	r20, 0x02	; 2
   1245e:	50 e0       	ldi	r21, 0x00	; 0
   12460:	63 e4       	ldi	r22, 0x43	; 67
   12462:	7d e0       	ldi	r23, 0x0D	; 13
   12464:	ce 01       	movw	r24, r28
   12466:	0e 94 47 33 	call	0x668e	; 0x668e <MATCHARGS>
   1246a:	89 2b       	or	r24, r25
   1246c:	19 f0       	breq	.+6      	; 0x12474 <gpib_tests+0xde>
    {
        gpib_timer_elapsed_begin();
   1246e:	0e 94 dc 85 	call	0x10bb8	; 0x10bb8 <gpib_timer_elapsed_begin>
   12472:	48 c0       	rjmp	.+144    	; 0x12504 <gpib_tests+0x16e>
        return(1);
    }

    if (MATCHARGS(ptr,"elapsed",(ind+0),argc))
   12474:	98 01       	movw	r18, r16
   12476:	42 e0       	ldi	r20, 0x02	; 2
   12478:	50 e0       	ldi	r21, 0x00	; 0
   1247a:	61 e5       	ldi	r22, 0x51	; 81
   1247c:	7d e0       	ldi	r23, 0x0D	; 13
   1247e:	ce 01       	movw	r24, r28
   12480:	0e 94 47 33 	call	0x668e	; 0x668e <MATCHARGS>
   12484:	89 2b       	or	r24, r25
   12486:	29 f0       	breq	.+10     	; 0x12492 <gpib_tests+0xfc>
    {
        gpib_timer_elapsed_end("gpib elapsed:");
   12488:	89 e5       	ldi	r24, 0x59	; 89
   1248a:	9d e0       	ldi	r25, 0x0D	; 13
   1248c:	0e 94 ee 85 	call	0x10bdc	; 0x10bdc <gpib_timer_elapsed_end>
   12490:	39 c0       	rjmp	.+114    	; 0x12504 <gpib_tests+0x16e>
        return(1);
    }

    if ( MATCHARGS(ptr, "ifc",(ind+0),argc))
   12492:	98 01       	movw	r18, r16
   12494:	42 e0       	ldi	r20, 0x02	; 2
   12496:	50 e0       	ldi	r21, 0x00	; 0
   12498:	67 e6       	ldi	r22, 0x67	; 103
   1249a:	7d e0       	ldi	r23, 0x0D	; 13
   1249c:	ce 01       	movw	r24, r28
   1249e:	0e 94 47 33 	call	0x668e	; 0x668e <MATCHARGS>
   124a2:	89 2b       	or	r24, r25
   124a4:	19 f0       	breq	.+6      	; 0x124ac <gpib_tests+0x116>
    {
        gpib_assert_ifc();
   124a6:	0e 94 f6 86 	call	0x10dec	; 0x10dec <gpib_assert_ifc>
   124aa:	2c c0       	rjmp	.+88     	; 0x12504 <gpib_tests+0x16e>
        return(1);

    }

    if (MATCHARGS(ptr,"task",(ind+0),argc))
   124ac:	98 01       	movw	r18, r16
   124ae:	42 e0       	ldi	r20, 0x02	; 2
   124b0:	50 e0       	ldi	r21, 0x00	; 0
   124b2:	6b e6       	ldi	r22, 0x6B	; 107
   124b4:	7d e0       	ldi	r23, 0x0D	; 13
   124b6:	ce 01       	movw	r24, r28
   124b8:	0e 94 47 33 	call	0x668e	; 0x668e <MATCHARGS>
   124bc:	89 2b       	or	r24, r25
    {
        gpib_task();
   124be:	11 f0       	breq	.+4      	; 0x124c4 <gpib_tests+0x12e>
   124c0:	ec de       	rcall	.-552    	; 0x1229a <gpib_task>
   124c2:	20 c0       	rjmp	.+64     	; 0x12504 <gpib_tests+0x16e>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
   124c4:	98 01       	movw	r18, r16
   124c6:	43 e0       	ldi	r20, 0x03	; 3
   124c8:	50 e0       	ldi	r21, 0x00	; 0
   124ca:	60 e7       	ldi	r22, 0x70	; 112
   124cc:	7d e0       	ldi	r23, 0x0D	; 13
   124ce:	ce 01       	movw	r24, r28
   124d0:	0e 94 47 33 	call	0x668e	; 0x668e <MATCHARGS>
   124d4:	89 2b       	or	r24, r25
   124d6:	09 f4       	brne	.+2      	; 0x124da <gpib_tests+0x144>
   124d8:	6a cf       	rjmp	.-300    	; 0x123ae <gpib_tests+0x18>
    {
        int detail = 0;
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
   124da:	f7 01       	movw	r30, r14
   124dc:	86 81       	ldd	r24, Z+6	; 0x06
   124de:	97 81       	ldd	r25, Z+7	; 0x07
   124e0:	00 97       	sbiw	r24, 0x00	; 0
   124e2:	51 f0       	breq	.+20     	; 0x124f8 <gpib_tests+0x162>
   124e4:	66 e7       	ldi	r22, 0x76	; 118
   124e6:	7d e0       	ldi	r23, 0x0D	; 13
   124e8:	0e 94 33 33 	call	0x6666	; 0x6666 <MATCH>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
    {
        int detail = 0;
   124ec:	61 e0       	ldi	r22, 0x01	; 1
   124ee:	70 e0       	ldi	r23, 0x00	; 0
   124f0:	89 2b       	or	r24, r25
   124f2:	21 f4       	brne	.+8      	; 0x124fc <gpib_tests+0x166>
   124f4:	60 e0       	ldi	r22, 0x00	; 0
   124f6:	02 c0       	rjmp	.+4      	; 0x124fc <gpib_tests+0x166>
   124f8:	60 e0       	ldi	r22, 0x00	; 0
   124fa:	70 e0       	ldi	r23, 0x00	; 0
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
            detail = 1;
        gpib_trace_task(argv[ind], detail);
   124fc:	f7 01       	movw	r30, r14
   124fe:	84 81       	ldd	r24, Z+4	; 0x04
   12500:	95 81       	ldd	r25, Z+5	; 0x05
   12502:	9f da       	rcall	.-2754   	; 0x11a42 <gpib_trace_task>
        return(1);
   12504:	81 e0       	ldi	r24, 0x01	; 1
   12506:	90 e0       	ldi	r25, 0x00	; 0

	} // port write 
#endif  // #ifdef GPIB_EXTENDED_TESTS

    return(0);
}
   12508:	cd b7       	in	r28, 0x3d	; 61
   1250a:	de b7       	in	r29, 0x3e	; 62
   1250c:	e6 e0       	ldi	r30, 0x06	; 6
   1250e:	0c 94 1b e6 	jmp	0x1cc36	; 0x1cc36 <__epilogue_restores__+0x18>

00012512 <V2B_MSB>:
   12512:	0f 93       	push	r16
   12514:	1f 93       	push	r17
   12516:	da 01       	movw	r26, r20
   12518:	11 97       	sbiw	r26, 0x01	; 1
   1251a:	b7 fd       	sbrc	r27, 7
   1251c:	0b c0       	rjmp	.+22     	; 0x12534 <V2B_MSB+0x22>
   1251e:	fd 01       	movw	r30, r26
   12520:	e6 0f       	add	r30, r22
   12522:	f7 1f       	adc	r31, r23
   12524:	e8 0f       	add	r30, r24
   12526:	f9 1f       	adc	r31, r25
   12528:	00 83       	st	Z, r16
   1252a:	01 2f       	mov	r16, r17
   1252c:	12 2f       	mov	r17, r18
   1252e:	23 2f       	mov	r18, r19
   12530:	33 27       	eor	r19, r19
   12532:	f2 cf       	rjmp	.-28     	; 0x12518 <V2B_MSB+0x6>
   12534:	1f 91       	pop	r17
   12536:	0f 91       	pop	r16
   12538:	08 95       	ret

0001253a <V2B_LSB>:
   1253a:	0f 93       	push	r16
   1253c:	1f 93       	push	r17
   1253e:	fc 01       	movw	r30, r24
   12540:	e6 0f       	add	r30, r22
   12542:	f7 1f       	adc	r31, r23
   12544:	bf 01       	movw	r22, r30
   12546:	cf 01       	movw	r24, r30
   12548:	86 1b       	sub	r24, r22
   1254a:	97 0b       	sbc	r25, r23
   1254c:	84 17       	cp	r24, r20
   1254e:	95 07       	cpc	r25, r21
   12550:	34 f4       	brge	.+12     	; 0x1255e <V2B_LSB+0x24>
   12552:	01 93       	st	Z+, r16
   12554:	01 2f       	mov	r16, r17
   12556:	12 2f       	mov	r17, r18
   12558:	23 2f       	mov	r18, r19
   1255a:	33 27       	eor	r19, r19
   1255c:	f4 cf       	rjmp	.-24     	; 0x12546 <V2B_LSB+0xc>
   1255e:	1f 91       	pop	r17
   12560:	0f 91       	pop	r16
   12562:	08 95       	ret

00012564 <B2V_MSB>:
   12564:	cf 92       	push	r12
   12566:	df 92       	push	r13
   12568:	ef 92       	push	r14
   1256a:	ff 92       	push	r15
   1256c:	fc 01       	movw	r30, r24
   1256e:	e6 0f       	add	r30, r22
   12570:	f7 1f       	adc	r31, r23
   12572:	60 e0       	ldi	r22, 0x00	; 0
   12574:	70 e0       	ldi	r23, 0x00	; 0
   12576:	cb 01       	movw	r24, r22
   12578:	df 01       	movw	r26, r30
   1257a:	9f 01       	movw	r18, r30
   1257c:	2a 1b       	sub	r18, r26
   1257e:	3b 0b       	sbc	r19, r27
   12580:	24 17       	cp	r18, r20
   12582:	35 07       	cpc	r19, r21
   12584:	4c f4       	brge	.+18     	; 0x12598 <B2V_MSB+0x34>
   12586:	cc 24       	eor	r12, r12
   12588:	d6 2e       	mov	r13, r22
   1258a:	e7 2e       	mov	r14, r23
   1258c:	f8 2e       	mov	r15, r24
   1258e:	21 91       	ld	r18, Z+
   12590:	c7 01       	movw	r24, r14
   12592:	b6 01       	movw	r22, r12
   12594:	62 2b       	or	r22, r18
   12596:	f1 cf       	rjmp	.-30     	; 0x1257a <B2V_MSB+0x16>
   12598:	ff 90       	pop	r15
   1259a:	ef 90       	pop	r14
   1259c:	df 90       	pop	r13
   1259e:	cf 90       	pop	r12
   125a0:	08 95       	ret

000125a2 <B2V_LSB>:
   125a2:	cf 92       	push	r12
   125a4:	df 92       	push	r13
   125a6:	ef 92       	push	r14
   125a8:	ff 92       	push	r15
   125aa:	9c 01       	movw	r18, r24
   125ac:	db 01       	movw	r26, r22
   125ae:	60 e0       	ldi	r22, 0x00	; 0
   125b0:	70 e0       	ldi	r23, 0x00	; 0
   125b2:	cb 01       	movw	r24, r22
   125b4:	41 50       	subi	r20, 0x01	; 1
   125b6:	51 09       	sbc	r21, r1
   125b8:	57 fd       	sbrc	r21, 7
   125ba:	0e c0       	rjmp	.+28     	; 0x125d8 <B2V_LSB+0x36>
   125bc:	cc 24       	eor	r12, r12
   125be:	d6 2e       	mov	r13, r22
   125c0:	e7 2e       	mov	r14, r23
   125c2:	f8 2e       	mov	r15, r24
   125c4:	fa 01       	movw	r30, r20
   125c6:	ea 0f       	add	r30, r26
   125c8:	fb 1f       	adc	r31, r27
   125ca:	e2 0f       	add	r30, r18
   125cc:	f3 1f       	adc	r31, r19
   125ce:	e0 81       	ld	r30, Z
   125d0:	c7 01       	movw	r24, r14
   125d2:	b6 01       	movw	r22, r12
   125d4:	6e 2b       	or	r22, r30
   125d6:	ee cf       	rjmp	.-36     	; 0x125b4 <B2V_LSB+0x12>
   125d8:	ff 90       	pop	r15
   125da:	ef 90       	pop	r14
   125dc:	df 90       	pop	r13
   125de:	cf 90       	pop	r12
   125e0:	08 95       	ret

000125e2 <find_type>:
   125e2:	e4 ef       	ldi	r30, 0xF4	; 244
   125e4:	fd e1       	ldi	r31, 0x1D	; 29
   125e6:	20 e0       	ldi	r18, 0x00	; 0
   125e8:	30 e0       	ldi	r19, 0x00	; 0
   125ea:	40 81       	ld	r20, Z
   125ec:	50 e0       	ldi	r21, 0x00	; 0
   125ee:	48 17       	cp	r20, r24
   125f0:	59 07       	cpc	r21, r25
   125f2:	49 f0       	breq	.+18     	; 0x12606 <find_type+0x24>
   125f4:	2f 5f       	subi	r18, 0xFF	; 255
   125f6:	3f 4f       	sbci	r19, 0xFF	; 255
   125f8:	bb 96       	adiw	r30, 0x2b	; 43
   125fa:	2c 30       	cpi	r18, 0x0C	; 12
   125fc:	31 05       	cpc	r19, r1
   125fe:	a9 f7       	brne	.-22     	; 0x125ea <find_type+0x8>
   12600:	8f ef       	ldi	r24, 0xFF	; 255
   12602:	9f ef       	ldi	r25, 0xFF	; 255
   12604:	08 95       	ret
   12606:	c9 01       	movw	r24, r18
   12608:	08 95       	ret

0001260a <count_drive_types>:
   1260a:	28 2f       	mov	r18, r24
   1260c:	e4 ef       	ldi	r30, 0xF4	; 244
   1260e:	fd e1       	ldi	r31, 0x1D	; 29
   12610:	80 e0       	ldi	r24, 0x00	; 0
   12612:	90 e0       	ldi	r25, 0x00	; 0
   12614:	30 81       	ld	r19, Z
   12616:	32 13       	cpse	r19, r18
   12618:	01 c0       	rjmp	.+2      	; 0x1261c <count_drive_types+0x12>
   1261a:	01 96       	adiw	r24, 0x01	; 1
   1261c:	bb 96       	adiw	r30, 0x2b	; 43
   1261e:	3f e1       	ldi	r19, 0x1F	; 31
   12620:	e8 3f       	cpi	r30, 0xF8	; 248
   12622:	f3 07       	cpc	r31, r19
   12624:	b9 f7       	brne	.-18     	; 0x12614 <count_drive_types+0xa>
   12626:	08 95       	ret

00012628 <type_to_str>:
   12628:	00 97       	sbiw	r24, 0x00	; 0
   1262a:	59 f0       	breq	.+22     	; 0x12642 <type_to_str+0x1a>
   1262c:	81 30       	cpi	r24, 0x01	; 1
   1262e:	91 05       	cpc	r25, r1
   12630:	59 f0       	breq	.+22     	; 0x12648 <type_to_str+0x20>
   12632:	83 30       	cpi	r24, 0x03	; 3
   12634:	91 05       	cpc	r25, r1
   12636:	59 f0       	breq	.+22     	; 0x1264e <type_to_str+0x26>
   12638:	04 97       	sbiw	r24, 0x04	; 4
   1263a:	61 f0       	breq	.+24     	; 0x12654 <type_to_str+0x2c>
   1263c:	84 ea       	ldi	r24, 0xA4	; 164
   1263e:	9d e0       	ldi	r25, 0x0D	; 13
   12640:	08 95       	ret
   12642:	8a e7       	ldi	r24, 0x7A	; 122
   12644:	9d e0       	ldi	r25, 0x0D	; 13
   12646:	08 95       	ret
   12648:	82 e8       	ldi	r24, 0x82	; 130
   1264a:	9d e0       	ldi	r25, 0x0D	; 13
   1264c:	08 95       	ret
   1264e:	8a e9       	ldi	r24, 0x9A	; 154
   12650:	9d e0       	ldi	r25, 0x0D	; 13
   12652:	08 95       	ret
   12654:	8d e8       	ldi	r24, 0x8D	; 141
   12656:	9d e0       	ldi	r25, 0x0D	; 13
   12658:	08 95       	ret

0001265a <find_free>:
   1265a:	80 e0       	ldi	r24, 0x00	; 0
   1265c:	90 e0       	ldi	r25, 0x00	; 0
   1265e:	c1 cf       	rjmp	.-126    	; 0x125e2 <find_type>
   12660:	08 95       	ret

00012662 <find_device>:
int find_device(int type, int address, int base)
{
    int i;

    ///@skip Only interested in device addresses
    if(address < BASE_MLA || address >(BASE_MSA+30))
   12662:	9b 01       	movw	r18, r22
   12664:	20 52       	subi	r18, 0x20	; 32
   12666:	31 09       	sbc	r19, r1
   12668:	2f 35       	cpi	r18, 0x5F	; 95
   1266a:	31 05       	cpc	r19, r1
   1266c:	f8 f4       	brcc	.+62     	; 0x126ac <find_device+0x4a>
        return(-1);

    ///@brief Make sure address is in expected range
    if(address < base || address > (base+30))
   1266e:	64 17       	cp	r22, r20
   12670:	75 07       	cpc	r23, r21
   12672:	e4 f0       	brlt	.+56     	; 0x126ac <find_device+0x4a>
   12674:	9a 01       	movw	r18, r20
   12676:	22 5e       	subi	r18, 0xE2	; 226
   12678:	3f 4f       	sbci	r19, 0xFF	; 255
   1267a:	26 17       	cp	r18, r22
   1267c:	37 07       	cpc	r19, r23
   1267e:	b4 f0       	brlt	.+44     	; 0x126ac <find_device+0x4a>
        return(-1);

    ///@brief convert to device address
    address -= base;
   12680:	64 1b       	sub	r22, r20
   12682:	75 0b       	sbc	r23, r21
   12684:	e4 ef       	ldi	r30, 0xF4	; 244
   12686:	fd e1       	ldi	r31, 0x1D	; 29

    ///@brief search for device address
    for(i=0;i<MAX_DEVICES;++i)
   12688:	20 e0       	ldi	r18, 0x00	; 0
   1268a:	30 e0       	ldi	r19, 0x00	; 0
    {
        if(Devices[i].TYPE == type && Devices[i].ADDRESS == address)
   1268c:	40 81       	ld	r20, Z
   1268e:	50 e0       	ldi	r21, 0x00	; 0
   12690:	48 17       	cp	r20, r24
   12692:	59 07       	cpc	r21, r25
   12694:	29 f4       	brne	.+10     	; 0x126a0 <find_device+0x3e>
   12696:	41 81       	ldd	r20, Z+1	; 0x01
   12698:	50 e0       	ldi	r21, 0x00	; 0
   1269a:	64 17       	cp	r22, r20
   1269c:	75 07       	cpc	r23, r21
   1269e:	49 f0       	breq	.+18     	; 0x126b2 <find_device+0x50>

    ///@brief convert to device address
    address -= base;

    ///@brief search for device address
    for(i=0;i<MAX_DEVICES;++i)
   126a0:	2f 5f       	subi	r18, 0xFF	; 255
   126a2:	3f 4f       	sbci	r19, 0xFF	; 255
   126a4:	bb 96       	adiw	r30, 0x2b	; 43
   126a6:	2c 30       	cpi	r18, 0x0C	; 12
   126a8:	31 05       	cpc	r19, r1
   126aa:	81 f7       	brne	.-32     	; 0x1268c <find_device+0x2a>
{
    int i;

    ///@skip Only interested in device addresses
    if(address < BASE_MLA || address >(BASE_MSA+30))
        return(-1);
   126ac:	8f ef       	ldi	r24, 0xFF	; 255
   126ae:	9f ef       	ldi	r25, 0xFF	; 255
   126b0:	08 95       	ret
   126b2:	c9 01       	movw	r24, r18
    {
        if(Devices[i].TYPE == type && Devices[i].ADDRESS == address)
            return(i);
    }
    return(-1);
}
   126b4:	08 95       	ret

000126b6 <set_active_device>:
/// Since we can be called multiple times per single GPIB state we do not
/// display state changes here. Other code displays the active state.
///@param index: Devices[] index
///@return 1 on success or 0 on fail
int set_active_device(int index)
{
   126b6:	1f 93       	push	r17
   126b8:	cf 93       	push	r28
   126ba:	df 93       	push	r29
    int type,address;

    ///@brief We also check for -1 
    /// So the result of find_device() can be used without additional tests
    if(index == -1)
   126bc:	8f 3f       	cpi	r24, 0xFF	; 255
   126be:	2f ef       	ldi	r18, 0xFF	; 255
   126c0:	92 07       	cpc	r25, r18
   126c2:	09 f4       	brne	.+2      	; 0x126c6 <set_active_device+0x10>
   126c4:	fa c0       	rjmp	.+500    	; 0x128ba <set_active_device+0x204>
   126c6:	ec 01       	movw	r28, r24
    {
        return(0);
    }

    if(index < 0 || index >= MAX_DEVICES)
   126c8:	0c 97       	sbiw	r24, 0x0c	; 12
   126ca:	c0 f0       	brcs	.+48     	; 0x126fc <set_active_device+0x46>
    {
        if(debuglevel & 1)
   126cc:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   126d0:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   126d4:	9c 01       	movw	r18, r24
   126d6:	21 70       	andi	r18, 0x01	; 1
   126d8:	33 27       	eor	r19, r19
   126da:	80 ff       	sbrs	r24, 0
   126dc:	f0 c0       	rjmp	.+480    	; 0x128be <set_active_device+0x208>
            printf("set_active_device:(%d) out of range\n", index);
   126de:	df 93       	push	r29
   126e0:	cf 93       	push	r28
   126e2:	8c ef       	ldi	r24, 0xFC	; 252
   126e4:	9e e1       	ldi	r25, 0x1E	; 30
   126e6:	1f 92       	push	r1
   126e8:	9f 93       	push	r25
   126ea:	8f 93       	push	r24
   126ec:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   126f0:	0f 90       	pop	r0
   126f2:	0f 90       	pop	r0
   126f4:	0f 90       	pop	r0
   126f6:	0f 90       	pop	r0
   126f8:	0f 90       	pop	r0
   126fa:	df c0       	rjmp	.+446    	; 0x128ba <set_active_device+0x204>
        return(0);
    }

    type = Devices[index].TYPE;
    address = Devices[index].ADDRESS;
   126fc:	8b e2       	ldi	r24, 0x2B	; 43
   126fe:	8c 9f       	mul	r24, r28
   12700:	f0 01       	movw	r30, r0
   12702:	8d 9f       	mul	r24, r29
   12704:	f0 0d       	add	r31, r0
   12706:	11 24       	eor	r1, r1
   12708:	ec 50       	subi	r30, 0x0C	; 12
   1270a:	f2 4e       	sbci	r31, 0xE2	; 226
   1270c:	81 81       	ldd	r24, Z+1	; 0x01
    if(address < 0 || address > 30)
   1270e:	8f 31       	cpi	r24, 0x1F	; 31
   12710:	e8 f0       	brcs	.+58     	; 0x1274c <set_active_device+0x96>
    {
        if(debuglevel & 1)
   12712:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <debuglevel>
   12716:	50 91 be 01 	lds	r21, 0x01BE	; 0x8001be <debuglevel+0x1>
   1271a:	9a 01       	movw	r18, r20
   1271c:	21 70       	andi	r18, 0x01	; 1
   1271e:	33 27       	eor	r19, r19
   12720:	40 ff       	sbrs	r20, 0
   12722:	cd c0       	rjmp	.+410    	; 0x128be <set_active_device+0x208>
            printf("set_active_device: index:%d address: %02XH out of range\n", index,address);
   12724:	1f 92       	push	r1
   12726:	8f 93       	push	r24
   12728:	df 93       	push	r29
   1272a:	cf 93       	push	r28
   1272c:	83 ec       	ldi	r24, 0xC3	; 195
   1272e:	9e e1       	ldi	r25, 0x1E	; 30
   12730:	1f 92       	push	r1
   12732:	9f 93       	push	r25
   12734:	8f 93       	push	r24
   12736:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1273a:	8d b7       	in	r24, 0x3d	; 61
   1273c:	9e b7       	in	r25, 0x3e	; 62
   1273e:	07 96       	adiw	r24, 0x07	; 7
   12740:	0f b6       	in	r0, 0x3f	; 63
   12742:	f8 94       	cli
   12744:	9e bf       	out	0x3e, r25	; 62
   12746:	0f be       	out	0x3f, r0	; 63
   12748:	8d bf       	out	0x3d, r24	; 61
   1274a:	b7 c0       	rjmp	.+366    	; 0x128ba <set_active_device+0x204>
        if(debuglevel & 1)
            printf("set_active_device:(%d) out of range\n", index);
        return(0);
    }

    type = Devices[index].TYPE;
   1274c:	10 81       	ld	r17, Z
   1274e:	81 2f       	mov	r24, r17
   12750:	90 e0       	ldi	r25, 0x00	; 0
        if(debuglevel & 1)
            printf("set_active_device: index:%d address: %02XH out of range\n", index,address);
        return(0);
    }

    if(Devices[index].dev == NULL)
   12752:	27 a1       	ldd	r18, Z+39	; 0x27
   12754:	30 a5       	ldd	r19, Z+40	; 0x28
   12756:	21 15       	cp	r18, r1
   12758:	31 05       	cpc	r19, r1
   1275a:	01 f5       	brne	.+64     	; 0x1279c <set_active_device+0xe6>
    {
        if(debuglevel & 1)
   1275c:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <debuglevel>
   12760:	50 91 be 01 	lds	r21, 0x01BE	; 0x8001be <debuglevel+0x1>
   12764:	9a 01       	movw	r18, r20
   12766:	21 70       	andi	r18, 0x01	; 1
   12768:	33 27       	eor	r19, r19
   1276a:	40 ff       	sbrs	r20, 0
            printf("set_active_device: index:%d type:%d:%s, dev == NULL\n", 
   1276c:	a8 c0       	rjmp	.+336    	; 0x128be <set_active_device+0x208>
   1276e:	5c df       	rcall	.-328    	; 0x12628 <type_to_str>
   12770:	9f 93       	push	r25
   12772:	8f 93       	push	r24
   12774:	1f 92       	push	r1
   12776:	1f 93       	push	r17
   12778:	df 93       	push	r29
   1277a:	cf 93       	push	r28
   1277c:	8e e8       	ldi	r24, 0x8E	; 142
   1277e:	9e e1       	ldi	r25, 0x1E	; 30
   12780:	1f 92       	push	r1
   12782:	9f 93       	push	r25
   12784:	8f 93       	push	r24
   12786:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1278a:	8d b7       	in	r24, 0x3d	; 61
   1278c:	9e b7       	in	r25, 0x3e	; 62
   1278e:	09 96       	adiw	r24, 0x09	; 9
   12790:	0f b6       	in	r0, 0x3f	; 63
   12792:	f8 94       	cli
   12794:	9e bf       	out	0x3e, r25	; 62
   12796:	0f be       	out	0x3f, r0	; 63
   12798:	8d bf       	out	0x3d, r24	; 61
                index,type,type_to_str(type));
        return(0);
    }

    if(type == NO_TYPE)
   1279a:	8f c0       	rjmp	.+286    	; 0x128ba <set_active_device+0x204>
   1279c:	00 97       	sbiw	r24, 0x00	; 0
    {
        if(debuglevel & 1)
   1279e:	11 f5       	brne	.+68     	; 0x127e4 <set_active_device+0x12e>
   127a0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   127a4:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   127a8:	9c 01       	movw	r18, r24
   127aa:	21 70       	andi	r18, 0x01	; 1
   127ac:	33 27       	eor	r19, r19
   127ae:	80 ff       	sbrs	r24, 0
            printf("set_active_device: index %d uninitalized type:%d:%s\n", 
   127b0:	86 c0       	rjmp	.+268    	; 0x128be <set_active_device+0x208>
   127b2:	80 e0       	ldi	r24, 0x00	; 0
   127b4:	90 e0       	ldi	r25, 0x00	; 0
   127b6:	38 df       	rcall	.-400    	; 0x12628 <type_to_str>
   127b8:	9f 93       	push	r25
   127ba:	8f 93       	push	r24
   127bc:	1f 92       	push	r1
   127be:	1f 92       	push	r1
   127c0:	df 93       	push	r29
   127c2:	cf 93       	push	r28
   127c4:	89 e5       	ldi	r24, 0x59	; 89
   127c6:	9e e1       	ldi	r25, 0x1E	; 30
   127c8:	1f 92       	push	r1
   127ca:	9f 93       	push	r25
   127cc:	8f 93       	push	r24
   127ce:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   127d2:	8d b7       	in	r24, 0x3d	; 61
   127d4:	9e b7       	in	r25, 0x3e	; 62
   127d6:	09 96       	adiw	r24, 0x09	; 9
   127d8:	0f b6       	in	r0, 0x3f	; 63
   127da:	f8 94       	cli
   127dc:	9e bf       	out	0x3e, r25	; 62
   127de:	0f be       	out	0x3f, r0	; 63
   127e0:	8d bf       	out	0x3d, r24	; 61
                index,type,type_to_str(type));
        return(0);
    }

    if(type == PRINTER_TYPE)
   127e2:	6b c0       	rjmp	.+214    	; 0x128ba <set_active_device+0x204>
   127e4:	84 30       	cpi	r24, 0x04	; 4
   127e6:	91 05       	cpc	r25, r1
    {
        PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
   127e8:	29 f4       	brne	.+10     	; 0x127f4 <set_active_device+0x13e>
   127ea:	30 93 70 18 	sts	0x1870, r19	; 0x801870 <PRINTERp+0x1>
   127ee:	20 93 6f 18 	sts	0x186F, r18	; 0x80186f <PRINTERp>
        return(1);
    }

    if(type == AMIGO_TYPE || type == SS80_TYPE) 
   127f2:	41 c0       	rjmp	.+130    	; 0x12876 <set_active_device+0x1c0>
   127f4:	41 2f       	mov	r20, r17
   127f6:	4d 7f       	andi	r20, 0xFD	; 253
   127f8:	41 30       	cpi	r20, 0x01	; 1
   127fa:	09 f0       	breq	.+2      	; 0x127fe <set_active_device+0x148>
    {
        if(Devices[index].state == NULL)
   127fc:	3f c0       	rjmp	.+126    	; 0x1287c <set_active_device+0x1c6>
   127fe:	41 a5       	ldd	r20, Z+41	; 0x29
   12800:	52 a5       	ldd	r21, Z+42	; 0x2a
   12802:	41 15       	cp	r20, r1
   12804:	51 05       	cpc	r21, r1
        {
            if(debuglevel & 1)
   12806:	01 f5       	brne	.+64     	; 0x12848 <set_active_device+0x192>
   12808:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <debuglevel>
   1280c:	50 91 be 01 	lds	r21, 0x01BE	; 0x8001be <debuglevel+0x1>
   12810:	9a 01       	movw	r18, r20
   12812:	21 70       	andi	r18, 0x01	; 1
   12814:	33 27       	eor	r19, r19
                printf("set_active_device: index: %d type:%d:%s, state == NULL\n",
   12816:	40 ff       	sbrs	r20, 0
   12818:	52 c0       	rjmp	.+164    	; 0x128be <set_active_device+0x208>
   1281a:	06 df       	rcall	.-500    	; 0x12628 <type_to_str>
   1281c:	9f 93       	push	r25
   1281e:	8f 93       	push	r24
   12820:	1f 92       	push	r1
   12822:	1f 93       	push	r17
   12824:	df 93       	push	r29
   12826:	cf 93       	push	r28
   12828:	81 e2       	ldi	r24, 0x21	; 33
   1282a:	9e e1       	ldi	r25, 0x1E	; 30
   1282c:	1f 92       	push	r1
   1282e:	9f 93       	push	r25
   12830:	8f 93       	push	r24
   12832:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   12836:	8d b7       	in	r24, 0x3d	; 61
   12838:	9e b7       	in	r25, 0x3e	; 62
   1283a:	09 96       	adiw	r24, 0x09	; 9
   1283c:	0f b6       	in	r0, 0x3f	; 63
   1283e:	f8 94       	cli
   12840:	9e bf       	out	0x3e, r25	; 62
   12842:	0f be       	out	0x3f, r0	; 63
   12844:	8d bf       	out	0x3d, r24	; 61
                     index,type,type_to_str(type));
            return(0);
        }
#ifdef AMIGO
        if(type == AMIGO_TYPE)
   12846:	39 c0       	rjmp	.+114    	; 0x128ba <set_active_device+0x204>
   12848:	81 30       	cpi	r24, 0x01	; 1
   1284a:	91 05       	cpc	r25, r1
        {
            AMIGOp = (AMIGODiskType *) Devices[index].dev;
   1284c:	49 f4       	brne	.+18     	; 0x12860 <set_active_device+0x1aa>
   1284e:	30 93 6a 18 	sts	0x186A, r19	; 0x80186a <AMIGOp+0x1>
   12852:	20 93 69 18 	sts	0x1869, r18	; 0x801869 <AMIGOp>
            AMIGOs = (AMIGOStateType *) Devices[index].state;
   12856:	50 93 68 18 	sts	0x1868, r21	; 0x801868 <AMIGOs+0x1>
   1285a:	40 93 67 18 	sts	0x1867, r20	; 0x801867 <AMIGOs>
            return(1);
        }
#endif
        if(type == SS80_TYPE)
   1285e:	0b c0       	rjmp	.+22     	; 0x12876 <set_active_device+0x1c0>
   12860:	83 30       	cpi	r24, 0x03	; 3
   12862:	91 05       	cpc	r25, r1
        {
            SS80p = (SS80DiskType *) Devices[index].dev;
   12864:	59 f4       	brne	.+22     	; 0x1287c <set_active_device+0x1c6>
   12866:	30 93 6e 18 	sts	0x186E, r19	; 0x80186e <SS80p+0x1>
   1286a:	20 93 6d 18 	sts	0x186D, r18	; 0x80186d <SS80p>
            SS80s = (SS80StateType *) Devices[index].state;
   1286e:	50 93 6c 18 	sts	0x186C, r21	; 0x80186c <SS80s+0x1>
   12872:	40 93 6b 18 	sts	0x186B, r20	; 0x80186b <SS80s>
            return(1);
   12876:	21 e0       	ldi	r18, 0x01	; 1
   12878:	30 e0       	ldi	r19, 0x00	; 0
        }
    }
    if(debuglevel & 1)
   1287a:	21 c0       	rjmp	.+66     	; 0x128be <set_active_device+0x208>
   1287c:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <debuglevel>
   12880:	50 91 be 01 	lds	r21, 0x01BE	; 0x8001be <debuglevel+0x1>
   12884:	9a 01       	movw	r18, r20
   12886:	21 70       	andi	r18, 0x01	; 1
   12888:	33 27       	eor	r19, r19
        printf("set_active_device:(%d) invalid type:%d:%s\n", 
   1288a:	40 ff       	sbrs	r20, 0
   1288c:	18 c0       	rjmp	.+48     	; 0x128be <set_active_device+0x208>
   1288e:	cc de       	rcall	.-616    	; 0x12628 <type_to_str>
   12890:	9f 93       	push	r25
   12892:	8f 93       	push	r24
   12894:	1f 92       	push	r1
   12896:	1f 93       	push	r17
   12898:	df 93       	push	r29
   1289a:	cf 93       	push	r28
   1289c:	86 ef       	ldi	r24, 0xF6	; 246
   1289e:	9d e1       	ldi	r25, 0x1D	; 29
   128a0:	1f 92       	push	r1
   128a2:	9f 93       	push	r25
   128a4:	8f 93       	push	r24
   128a6:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   128aa:	8d b7       	in	r24, 0x3d	; 61
   128ac:	9e b7       	in	r25, 0x3e	; 62
   128ae:	09 96       	adiw	r24, 0x09	; 9
   128b0:	0f b6       	in	r0, 0x3f	; 63
   128b2:	f8 94       	cli
   128b4:	9e bf       	out	0x3e, r25	; 62
   128b6:	0f be       	out	0x3f, r0	; 63

    ///@brief We also check for -1 
    /// So the result of find_device() can be used without additional tests
    if(index == -1)
    {
        return(0);
   128b8:	8d bf       	out	0x3d, r24	; 61
   128ba:	20 e0       	ldi	r18, 0x00	; 0
    }
    if(debuglevel & 1)
        printf("set_active_device:(%d) invalid type:%d:%s\n", 
            index,type,type_to_str(type));
    return(0);
}
   128bc:	30 e0       	ldi	r19, 0x00	; 0
   128be:	c9 01       	movw	r24, r18
   128c0:	df 91       	pop	r29
   128c2:	cf 91       	pop	r28
   128c4:	1f 91       	pop	r17
   128c6:	08 95       	ret

000128c8 <SS80_Set_Defaults>:
///@brief Set Default Values for a new SS80 Device IF defaults have been defined
/// Most values in the CONTROLER and UNIT are defaults that should not need to be specified
/// Note all of the values are zeroed on allocation including strings
///@return void
void SS80_Set_Defaults(int index)
{
   128c8:	0f 93       	push	r16
   128ca:	1f 93       	push	r17
   128cc:	cf 93       	push	r28
   128ce:	df 93       	push	r29
   128d0:	ec 01       	movw	r28, r24
	int defindex = find_type(SS80_DEFAULT_TYPE);
   128d2:	82 e0       	ldi	r24, 0x02	; 2
   128d4:	90 e0       	ldi	r25, 0x00	; 0
   128d6:	85 de       	rcall	.-758    	; 0x125e2 <find_type>
	SS80DiskType *SS80p = (SS80DiskType *) Devices[index].dev;
	SS80DiskType *SS80DEFAULTp;

	if(defindex < 0 )
   128d8:	97 fd       	sbrc	r25, 7
   128da:	88 c0       	rjmp	.+272    	; 0x129ec <SS80_Set_Defaults+0x124>
/// Note all of the values are zeroed on allocation including strings
///@return void
void SS80_Set_Defaults(int index)
{
	int defindex = find_type(SS80_DEFAULT_TYPE);
	SS80DiskType *SS80p = (SS80DiskType *) Devices[index].dev;
   128dc:	2b e2       	ldi	r18, 0x2B	; 43
   128de:	2c 9f       	mul	r18, r28
   128e0:	f0 01       	movw	r30, r0
   128e2:	2d 9f       	mul	r18, r29
   128e4:	f0 0d       	add	r31, r0
   128e6:	11 24       	eor	r1, r1
   128e8:	ec 50       	subi	r30, 0x0C	; 12
   128ea:	f2 4e       	sbci	r31, 0xE2	; 226
   128ec:	c7 a1       	ldd	r28, Z+39	; 0x27
   128ee:	d0 a5       	ldd	r29, Z+40	; 0x28
	SS80DiskType *SS80DEFAULTp;

	if(defindex < 0 )
		return;

	SS80DEFAULTp = (SS80DiskType *) Devices[defindex].dev;
   128f0:	28 9f       	mul	r18, r24
   128f2:	f0 01       	movw	r30, r0
   128f4:	29 9f       	mul	r18, r25
   128f6:	f0 0d       	add	r31, r0
   128f8:	11 24       	eor	r1, r1
   128fa:	ec 50       	subi	r30, 0x0C	; 12
   128fc:	f2 4e       	sbci	r31, 0xE2	; 226
   128fe:	07 a1       	ldd	r16, Z+39	; 0x27
   12900:	10 a5       	ldd	r17, Z+40	; 0x28

	SS80p->HEADER.ADDRESS				= SS80DEFAULTp->HEADER.ADDRESS;
   12902:	f8 01       	movw	r30, r16
   12904:	80 81       	ld	r24, Z
   12906:	88 83       	st	Y, r24
	SS80p->HEADER.PPR					= SS80DEFAULTp->HEADER.PPR;
   12908:	81 81       	ldd	r24, Z+1	; 0x01
   1290a:	89 83       	std	Y+1, r24	; 0x01
	strncpy(SS80p->HEADER.NAME,SS80DEFAULTp->HEADER.NAME,sizeof(SS80p->HEADER.NAME)-1);
   1290c:	b8 01       	movw	r22, r16
   1290e:	6e 5f       	subi	r22, 0xFE	; 254
   12910:	7f 4f       	sbci	r23, 0xFF	; 255
   12912:	40 e2       	ldi	r20, 0x20	; 32
   12914:	50 e0       	ldi	r21, 0x00	; 0
   12916:	ce 01       	movw	r24, r28
   12918:	02 96       	adiw	r24, 0x02	; 2
   1291a:	0e 94 61 32 	call	0x64c2	; 0x64c2 <strncpy>

	SS80p->CONFIG.ID					= SS80DEFAULTp->CONFIG.ID;
   1291e:	f8 01       	movw	r30, r16
   12920:	83 a1       	ldd	r24, Z+35	; 0x23
   12922:	94 a1       	ldd	r25, Z+36	; 0x24
   12924:	9c a3       	std	Y+36, r25	; 0x24
   12926:	8b a3       	std	Y+35, r24	; 0x23
	SS80p->CONTROLLER.UNITS_INSTALLED	= SS80DEFAULTp->CONTROLLER.UNITS_INSTALLED;
   12928:	85 a1       	ldd	r24, Z+37	; 0x25
   1292a:	96 a1       	ldd	r25, Z+38	; 0x26
   1292c:	9e a3       	std	Y+38, r25	; 0x26
   1292e:	8d a3       	std	Y+37, r24	; 0x25
	SS80p->CONTROLLER.TRANSFER_RATE		= SS80DEFAULTp->CONTROLLER.TRANSFER_RATE;
   12930:	87 a1       	ldd	r24, Z+39	; 0x27
   12932:	90 a5       	ldd	r25, Z+40	; 0x28
   12934:	98 a7       	std	Y+40, r25	; 0x28
   12936:	8f a3       	std	Y+39, r24	; 0x27
	SS80p->CONTROLLER.TYPE				= SS80DEFAULTp->CONTROLLER.TYPE;
   12938:	81 a5       	ldd	r24, Z+41	; 0x29
   1293a:	89 a7       	std	Y+41, r24	; 0x29

	SS80p->UNIT.UNIT_TYPE				= SS80DEFAULTp->UNIT.UNIT_TYPE;
   1293c:	82 a5       	ldd	r24, Z+42	; 0x2a
   1293e:	8a a7       	std	Y+42, r24	; 0x2a
	SS80p->UNIT.DEVICE_NUMBER			= SS80DEFAULTp->UNIT.DEVICE_NUMBER;
   12940:	83 a5       	ldd	r24, Z+43	; 0x2b
   12942:	94 a5       	ldd	r25, Z+44	; 0x2c
   12944:	a5 a5       	ldd	r26, Z+45	; 0x2d
   12946:	b6 a5       	ldd	r27, Z+46	; 0x2e
   12948:	8b a7       	std	Y+43, r24	; 0x2b
   1294a:	9c a7       	std	Y+44, r25	; 0x2c
   1294c:	ad a7       	std	Y+45, r26	; 0x2d
   1294e:	be a7       	std	Y+46, r27	; 0x2e
	SS80p->UNIT.BYTES_PER_BLOCK			= SS80DEFAULTp->UNIT.BYTES_PER_BLOCK;
   12950:	87 a5       	ldd	r24, Z+47	; 0x2f
   12952:	90 a9       	ldd	r25, Z+48	; 0x30
   12954:	98 ab       	std	Y+48, r25	; 0x30
   12956:	8f a7       	std	Y+47, r24	; 0x2f
	SS80p->UNIT.BUFFERED_BLOCKS			= SS80DEFAULTp->UNIT.BUFFERED_BLOCKS;
   12958:	81 a9       	ldd	r24, Z+49	; 0x31
   1295a:	89 ab       	std	Y+49, r24	; 0x31
	SS80p->UNIT.BURST_SIZE				= SS80DEFAULTp->UNIT.BURST_SIZE;
   1295c:	82 a9       	ldd	r24, Z+50	; 0x32
   1295e:	8a ab       	std	Y+50, r24	; 0x32
	SS80p->UNIT.BLOCK_TIME				= SS80DEFAULTp->UNIT.BLOCK_TIME;
   12960:	83 a9       	ldd	r24, Z+51	; 0x33
   12962:	94 a9       	ldd	r25, Z+52	; 0x34
   12964:	9c ab       	std	Y+52, r25	; 0x34
   12966:	8b ab       	std	Y+51, r24	; 0x33
	SS80p->UNIT.CONTINOUS_TRANSFER_RATE	= SS80DEFAULTp->UNIT.CONTINOUS_TRANSFER_RATE;
   12968:	85 a9       	ldd	r24, Z+53	; 0x35
   1296a:	96 a9       	ldd	r25, Z+54	; 0x36
   1296c:	9e ab       	std	Y+54, r25	; 0x36
   1296e:	8d ab       	std	Y+53, r24	; 0x35
	SS80p->UNIT.OPTIMAL_RETRY_TIME		= SS80DEFAULTp->UNIT.OPTIMAL_RETRY_TIME;
   12970:	87 a9       	ldd	r24, Z+55	; 0x37
   12972:	90 ad       	ldd	r25, Z+56	; 0x38
   12974:	98 af       	std	Y+56, r25	; 0x38
   12976:	8f ab       	std	Y+55, r24	; 0x37
	SS80p->UNIT.ACCESS_TIME				= SS80DEFAULTp->UNIT.ACCESS_TIME;
   12978:	81 ad       	ldd	r24, Z+57	; 0x39
   1297a:	92 ad       	ldd	r25, Z+58	; 0x3a
   1297c:	9a af       	std	Y+58, r25	; 0x3a
   1297e:	89 af       	std	Y+57, r24	; 0x39
	SS80p->UNIT.MAXIMUM_INTERLEAVE		= SS80DEFAULTp->UNIT.MAXIMUM_INTERLEAVE;
   12980:	83 ad       	ldd	r24, Z+59	; 0x3b
   12982:	8b af       	std	Y+59, r24	; 0x3b
	SS80p->UNIT.FIXED_VOLUMES			= SS80DEFAULTp->UNIT.FIXED_VOLUMES;
   12984:	84 ad       	ldd	r24, Z+60	; 0x3c
   12986:	8c af       	std	Y+60, r24	; 0x3c

	SS80p->VOLUME.MAX_CYLINDER			= SS80DEFAULTp->VOLUME.MAX_CYLINDER;
   12988:	fe 96       	adiw	r30, 0x3e	; 62
   1298a:	80 81       	ld	r24, Z
   1298c:	91 81       	ldd	r25, Z+1	; 0x01
   1298e:	a2 81       	ldd	r26, Z+2	; 0x02
   12990:	b3 81       	ldd	r27, Z+3	; 0x03
   12992:	fe 01       	movw	r30, r28
   12994:	fe 96       	adiw	r30, 0x3e	; 62
   12996:	80 83       	st	Z, r24
   12998:	91 83       	std	Z+1, r25	; 0x01
   1299a:	a2 83       	std	Z+2, r26	; 0x02
   1299c:	b3 83       	std	Z+3, r27	; 0x03
	SS80p->VOLUME.MAX_HEAD				= SS80DEFAULTp->VOLUME.MAX_HEAD;
   1299e:	f8 01       	movw	r30, r16
   129a0:	ee 5b       	subi	r30, 0xBE	; 190
   129a2:	ff 4f       	sbci	r31, 0xFF	; 255
   129a4:	80 81       	ld	r24, Z
   129a6:	fe 01       	movw	r30, r28
   129a8:	ee 5b       	subi	r30, 0xBE	; 190
   129aa:	ff 4f       	sbci	r31, 0xFF	; 255
   129ac:	80 83       	st	Z, r24
	SS80p->VOLUME.MAX_SECTOR			= SS80DEFAULTp->VOLUME.MAX_SECTOR;
   129ae:	f8 01       	movw	r30, r16
   129b0:	ed 5b       	subi	r30, 0xBD	; 189
   129b2:	ff 4f       	sbci	r31, 0xFF	; 255
   129b4:	80 81       	ld	r24, Z
   129b6:	91 81       	ldd	r25, Z+1	; 0x01
   129b8:	fe 01       	movw	r30, r28
   129ba:	ed 5b       	subi	r30, 0xBD	; 189
   129bc:	ff 4f       	sbci	r31, 0xFF	; 255
   129be:	91 83       	std	Z+1, r25	; 0x01
   129c0:	80 83       	st	Z, r24
	SS80p->VOLUME.MAX_BLOCK_NUMBER		= SS80DEFAULTp->VOLUME.MAX_BLOCK_NUMBER;
   129c2:	f8 01       	movw	r30, r16
   129c4:	eb 5b       	subi	r30, 0xBB	; 187
   129c6:	ff 4f       	sbci	r31, 0xFF	; 255
   129c8:	80 81       	ld	r24, Z
   129ca:	91 81       	ldd	r25, Z+1	; 0x01
   129cc:	a2 81       	ldd	r26, Z+2	; 0x02
   129ce:	b3 81       	ldd	r27, Z+3	; 0x03
   129d0:	fe 01       	movw	r30, r28
   129d2:	eb 5b       	subi	r30, 0xBB	; 187
   129d4:	ff 4f       	sbci	r31, 0xFF	; 255
   129d6:	80 83       	st	Z, r24
   129d8:	91 83       	std	Z+1, r25	; 0x01
   129da:	a2 83       	std	Z+2, r26	; 0x02
   129dc:	b3 83       	std	Z+3, r27	; 0x03
	SS80p->VOLUME.INTERLEAVE			= SS80DEFAULTp->VOLUME.INTERLEAVE;
   129de:	f8 01       	movw	r30, r16
   129e0:	e7 5b       	subi	r30, 0xB7	; 183
   129e2:	ff 4f       	sbci	r31, 0xFF	; 255
   129e4:	80 81       	ld	r24, Z
   129e6:	c7 5b       	subi	r28, 0xB7	; 183
   129e8:	df 4f       	sbci	r29, 0xFF	; 255
   129ea:	88 83       	st	Y, r24
};
   129ec:	df 91       	pop	r29
   129ee:	cf 91       	pop	r28
   129f0:	1f 91       	pop	r17
   129f2:	0f 91       	pop	r16
   129f4:	08 95       	ret

000129f6 <alloc_device>:

///@brief Allocate a Device structure for a disk or printer
///@param type: disk type
///@return Devices[] index on sucess or -1
int alloc_device(int type)
{
   129f6:	0f 93       	push	r16
   129f8:	1f 93       	push	r17
   129fa:	cf 93       	push	r28
   129fc:	df 93       	push	r29
    int ind;
    int index = -1;

    // Find a free slot
    ind = find_free();
   129fe:	ec 01       	movw	r28, r24
   12a00:	2c de       	rcall	.-936    	; 0x1265a <find_free>
    if(ind == -1)
   12a02:	8c 01       	movw	r16, r24
   12a04:	0f 3f       	cpi	r16, 0xFF	; 255
   12a06:	8f ef       	ldi	r24, 0xFF	; 255
   12a08:	18 07       	cpc	r17, r24
    {
        if(debuglevel & 1)
   12a0a:	99 f4       	brne	.+38     	; 0x12a32 <alloc_device+0x3c>
   12a0c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   12a10:	80 ff       	sbrs	r24, 0
            printf("alloc_device: Device table is full\n", type);
   12a12:	9e c0       	rjmp	.+316    	; 0x12b50 <alloc_device+0x15a>
   12a14:	df 93       	push	r29
   12a16:	cf 93       	push	r28
   12a18:	82 ed       	ldi	r24, 0xD2	; 210
   12a1a:	9d e1       	ldi	r25, 0x1D	; 29
   12a1c:	1f 92       	push	r1
   12a1e:	9f 93       	push	r25
   12a20:	8f 93       	push	r24
   12a22:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   12a26:	0f 90       	pop	r0
   12a28:	0f 90       	pop	r0
   12a2a:	0f 90       	pop	r0
   12a2c:	0f 90       	pop	r0
   12a2e:	0f 90       	pop	r0
        return(ind);
    }

    switch(type)
   12a30:	8f c0       	rjmp	.+286    	; 0x12b50 <alloc_device+0x15a>
   12a32:	c2 30       	cpi	r28, 0x02	; 2
   12a34:	d1 05       	cpc	r29, r1
   12a36:	c1 f1       	breq	.+112    	; 0x12aa8 <alloc_device+0xb2>
   12a38:	dc f4       	brge	.+54     	; 0x12a70 <alloc_device+0x7a>
   12a3a:	c1 30       	cpi	r28, 0x01	; 1
   12a3c:	d1 05       	cpc	r29, r1
   12a3e:	09 f0       	breq	.+2      	; 0x12a42 <alloc_device+0x4c>
            index = ind;
			SS80_Set_Defaults(index);	// Set any defaults we may have
            break;
#ifdef AMIGO
        case AMIGO_TYPE:
            Devices[ind].TYPE = type;
   12a40:	6c c0       	rjmp	.+216    	; 0x12b1a <alloc_device+0x124>
   12a42:	8b e2       	ldi	r24, 0x2B	; 43
   12a44:	80 9f       	mul	r24, r16
   12a46:	e0 01       	movw	r28, r0
   12a48:	81 9f       	mul	r24, r17
   12a4a:	d0 0d       	add	r29, r0
   12a4c:	11 24       	eor	r1, r1
   12a4e:	cc 50       	subi	r28, 0x0C	; 12
   12a50:	d2 4e       	sbci	r29, 0xE2	; 226
   12a52:	81 e0       	ldi	r24, 0x01	; 1
            Devices[ind].dev = safecalloc(sizeof(AMIGODiskType)+7,1);
   12a54:	88 83       	st	Y, r24
   12a56:	61 e0       	ldi	r22, 0x01	; 1
   12a58:	70 e0       	ldi	r23, 0x00	; 0
   12a5a:	84 e3       	ldi	r24, 0x34	; 52
   12a5c:	90 e0       	ldi	r25, 0x00	; 0
   12a5e:	0e 94 89 29 	call	0x5312	; 0x5312 <safecalloc>
   12a62:	98 a7       	std	Y+40, r25	; 0x28
            Devices[ind].state = safecalloc(sizeof(AMIGOStateType)+7,1);
   12a64:	8f a3       	std	Y+39, r24	; 0x27
   12a66:	61 e0       	ldi	r22, 0x01	; 1
   12a68:	70 e0       	ldi	r23, 0x00	; 0
   12a6a:	88 e1       	ldi	r24, 0x18	; 24
   12a6c:	90 e0       	ldi	r25, 0x00	; 0
        if(debuglevel & 1)
            printf("alloc_device: Device table is full\n", type);
        return(ind);
    }

    switch(type)
   12a6e:	50 c0       	rjmp	.+160    	; 0x12b10 <alloc_device+0x11a>
   12a70:	c3 30       	cpi	r28, 0x03	; 3
   12a72:	d1 05       	cpc	r29, r1
   12a74:	81 f1       	breq	.+96     	; 0x12ad6 <alloc_device+0xe0>
   12a76:	c4 30       	cpi	r28, 0x04	; 4
   12a78:	d1 05       	cpc	r29, r1
   12a7a:	09 f0       	breq	.+2      	; 0x12a7e <alloc_device+0x88>
            Devices[ind].state = safecalloc(sizeof(AMIGOStateType)+7,1);
            index = ind;
            break;
#endif
        case PRINTER_TYPE:
            Devices[ind].TYPE = type;
   12a7c:	4e c0       	rjmp	.+156    	; 0x12b1a <alloc_device+0x124>
   12a7e:	8b e2       	ldi	r24, 0x2B	; 43
   12a80:	80 9f       	mul	r24, r16
   12a82:	e0 01       	movw	r28, r0
   12a84:	81 9f       	mul	r24, r17
   12a86:	d0 0d       	add	r29, r0
   12a88:	11 24       	eor	r1, r1
   12a8a:	cc 50       	subi	r28, 0x0C	; 12
   12a8c:	d2 4e       	sbci	r29, 0xE2	; 226
   12a8e:	84 e0       	ldi	r24, 0x04	; 4
            Devices[ind].dev = safecalloc(sizeof(PRINTERDeviceType)+7,1);
   12a90:	88 83       	st	Y, r24
   12a92:	61 e0       	ldi	r22, 0x01	; 1
   12a94:	70 e0       	ldi	r23, 0x00	; 0
   12a96:	8a e2       	ldi	r24, 0x2A	; 42
   12a98:	90 e0       	ldi	r25, 0x00	; 0
   12a9a:	0e 94 89 29 	call	0x5312	; 0x5312 <safecalloc>
   12a9e:	98 a7       	std	Y+40, r25	; 0x28
            Devices[ind].state = NULL;
   12aa0:	8f a3       	std	Y+39, r24	; 0x27
   12aa2:	1a a6       	std	Y+42, r1	; 0x2a
            index = ind;
            break;
   12aa4:	19 a6       	std	Y+41, r1	; 0x29

    switch(type)
    {
		// Same as SS80 type but sets initial defaults for any remaining SS80 drives
        case SS80_DEFAULT_TYPE:
            Devices[ind].TYPE = type;
   12aa6:	54 c0       	rjmp	.+168    	; 0x12b50 <alloc_device+0x15a>
   12aa8:	8b e2       	ldi	r24, 0x2B	; 43
   12aaa:	80 9f       	mul	r24, r16
   12aac:	e0 01       	movw	r28, r0
   12aae:	81 9f       	mul	r24, r17
   12ab0:	d0 0d       	add	r29, r0
   12ab2:	11 24       	eor	r1, r1
   12ab4:	cc 50       	subi	r28, 0x0C	; 12
   12ab6:	d2 4e       	sbci	r29, 0xE2	; 226
   12ab8:	82 e0       	ldi	r24, 0x02	; 2
            Devices[ind].dev = safecalloc(sizeof(SS80DiskType)+7,1);
   12aba:	88 83       	st	Y, r24
   12abc:	61 e0       	ldi	r22, 0x01	; 1
   12abe:	70 e0       	ldi	r23, 0x00	; 0
   12ac0:	81 e5       	ldi	r24, 0x51	; 81
   12ac2:	90 e0       	ldi	r25, 0x00	; 0
   12ac4:	0e 94 89 29 	call	0x5312	; 0x5312 <safecalloc>
   12ac8:	98 a7       	std	Y+40, r25	; 0x28
            Devices[ind].state = safecalloc(sizeof(SS80StateType)+7,1);
   12aca:	8f a3       	std	Y+39, r24	; 0x27
   12acc:	61 e0       	ldi	r22, 0x01	; 1
   12ace:	70 e0       	ldi	r23, 0x00	; 0
   12ad0:	86 e1       	ldi	r24, 0x16	; 22
   12ad2:	90 e0       	ldi	r25, 0x00	; 0
            index = ind;
            break;
        case SS80_TYPE:
            Devices[ind].TYPE = type;
   12ad4:	1d c0       	rjmp	.+58     	; 0x12b10 <alloc_device+0x11a>
   12ad6:	8b e2       	ldi	r24, 0x2B	; 43
   12ad8:	80 9f       	mul	r24, r16
   12ada:	e0 01       	movw	r28, r0
   12adc:	81 9f       	mul	r24, r17
   12ade:	d0 0d       	add	r29, r0
   12ae0:	11 24       	eor	r1, r1
   12ae2:	cc 50       	subi	r28, 0x0C	; 12
   12ae4:	d2 4e       	sbci	r29, 0xE2	; 226
   12ae6:	83 e0       	ldi	r24, 0x03	; 3
            Devices[ind].dev = safecalloc(sizeof(SS80DiskType)+7,1);
   12ae8:	88 83       	st	Y, r24
   12aea:	61 e0       	ldi	r22, 0x01	; 1
   12aec:	70 e0       	ldi	r23, 0x00	; 0
   12aee:	81 e5       	ldi	r24, 0x51	; 81
   12af0:	90 e0       	ldi	r25, 0x00	; 0
   12af2:	0e 94 89 29 	call	0x5312	; 0x5312 <safecalloc>
   12af6:	98 a7       	std	Y+40, r25	; 0x28
            Devices[ind].state = safecalloc(sizeof(SS80StateType)+7,1);
   12af8:	8f a3       	std	Y+39, r24	; 0x27
   12afa:	61 e0       	ldi	r22, 0x01	; 1
   12afc:	70 e0       	ldi	r23, 0x00	; 0
   12afe:	86 e1       	ldi	r24, 0x16	; 22
   12b00:	90 e0       	ldi	r25, 0x00	; 0
   12b02:	0e 94 89 29 	call	0x5312	; 0x5312 <safecalloc>
            index = ind;
			SS80_Set_Defaults(index);	// Set any defaults we may have
   12b06:	9a a7       	std	Y+42, r25	; 0x2a
   12b08:	89 a7       	std	Y+41, r24	; 0x29
            break;
   12b0a:	c8 01       	movw	r24, r16
#ifdef AMIGO
        case AMIGO_TYPE:
            Devices[ind].TYPE = type;
            Devices[ind].dev = safecalloc(sizeof(AMIGODiskType)+7,1);
            Devices[ind].state = safecalloc(sizeof(AMIGOStateType)+7,1);
   12b0c:	dd de       	rcall	.-582    	; 0x128c8 <SS80_Set_Defaults>
   12b0e:	20 c0       	rjmp	.+64     	; 0x12b50 <alloc_device+0x15a>
   12b10:	0e 94 89 29 	call	0x5312	; 0x5312 <safecalloc>
            index = ind;
            break;
   12b14:	9a a7       	std	Y+42, r25	; 0x2a
            Devices[ind].dev = safecalloc(sizeof(PRINTERDeviceType)+7,1);
            Devices[ind].state = NULL;
            index = ind;
            break;
        default:
            if(debuglevel & 1)
   12b16:	89 a7       	std	Y+41, r24	; 0x29
   12b18:	1b c0       	rjmp	.+54     	; 0x12b50 <alloc_device+0x15a>
   12b1a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("alloc_device: invalid type:%d:%s\n", type,type_to_str(type));
   12b1e:	80 ff       	sbrs	r24, 0
   12b20:	15 c0       	rjmp	.+42     	; 0x12b4c <alloc_device+0x156>
   12b22:	ce 01       	movw	r24, r28
   12b24:	81 dd       	rcall	.-1278   	; 0x12628 <type_to_str>
   12b26:	9f 93       	push	r25
   12b28:	8f 93       	push	r24
   12b2a:	df 93       	push	r29
   12b2c:	cf 93       	push	r28
   12b2e:	80 eb       	ldi	r24, 0xB0	; 176
   12b30:	9d e1       	ldi	r25, 0x1D	; 29
   12b32:	1f 92       	push	r1
   12b34:	9f 93       	push	r25
   12b36:	8f 93       	push	r24
   12b38:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   12b3c:	8d b7       	in	r24, 0x3d	; 61
   12b3e:	9e b7       	in	r25, 0x3e	; 62
   12b40:	07 96       	adiw	r24, 0x07	; 7
   12b42:	0f b6       	in	r0, 0x3f	; 63
   12b44:	f8 94       	cli
   12b46:	9e bf       	out	0x3e, r25	; 62
   12b48:	0f be       	out	0x3f, r0	; 63
   12b4a:	8d bf       	out	0x3d, r24	; 61
            break;
    }
    return(index);
}
   12b4c:	0f ef       	ldi	r16, 0xFF	; 255
   12b4e:	1f ef       	ldi	r17, 0xFF	; 255
   12b50:	c8 01       	movw	r24, r16
   12b52:	df 91       	pop	r29
   12b54:	cf 91       	pop	r28
   12b56:	1f 91       	pop	r17
   12b58:	0f 91       	pop	r16
   12b5a:	08 95       	ret

00012b5c <init_Devices>:

// =============================================
/// @brief Init Config Parser Stack
/// Called only durring power up so we do not have to free memory
void init_Devices()
{
   12b5c:	cf 93       	push	r28
   12b5e:	df 93       	push	r29
    int i;
    stack_ind = 0;
   12b60:	10 92 7c 18 	sts	0x187C, r1	; 0x80187c <stack_ind+0x1>
   12b64:	10 92 7b 18 	sts	0x187B, r1	; 0x80187b <stack_ind>
   12b68:	e4 ef       	ldi	r30, 0xF4	; 244
   12b6a:	fd e1       	ldi	r31, 0x1D	; 29
    for(i=0;i<MAX_DEVICES;++i)
    {
        Devices[i].TYPE = NO_TYPE;
        Devices[i].ADDRESS = 0;
        Devices[i].PPR = 0xff;
   12b6c:	9f ef       	ldi	r25, 0xFF	; 255
        Devices[i].BLOCKS = 0;
        memset(Devices[i].model, 0, sizeof(Devices[i].model) );
   12b6e:	80 e2       	ldi	r24, 0x20	; 32
{
    int i;
    stack_ind = 0;
    for(i=0;i<MAX_DEVICES;++i)
    {
        Devices[i].TYPE = NO_TYPE;
   12b70:	10 82       	st	Z, r1
        Devices[i].ADDRESS = 0;
   12b72:	11 82       	std	Z+1, r1	; 0x01
        Devices[i].PPR = 0xff;
   12b74:	92 83       	std	Z+2, r25	; 0x02
        Devices[i].BLOCKS = 0;
   12b76:	13 82       	std	Z+3, r1	; 0x03
   12b78:	14 82       	std	Z+4, r1	; 0x04
   12b7a:	15 82       	std	Z+5, r1	; 0x05
   12b7c:	16 82       	std	Z+6, r1	; 0x06
        memset(Devices[i].model, 0, sizeof(Devices[i].model) );
   12b7e:	df 01       	movw	r26, r30
   12b80:	17 96       	adiw	r26, 0x07	; 7
   12b82:	ed 01       	movw	r28, r26
   12b84:	28 2f       	mov	r18, r24
   12b86:	19 92       	st	Y+, r1
   12b88:	2a 95       	dec	r18
   12b8a:	e9 f7       	brne	.-6      	; 0x12b86 <init_Devices+0x2a>
        Devices[i].dev = NULL;
   12b8c:	10 a6       	std	Z+40, r1	; 0x28
   12b8e:	17 a2       	std	Z+39, r1	; 0x27
        Devices[i].state = NULL;
   12b90:	12 a6       	std	Z+42, r1	; 0x2a
   12b92:	11 a6       	std	Z+41, r1	; 0x29
   12b94:	bb 96       	adiw	r30, 0x2b	; 43
/// Called only durring power up so we do not have to free memory
void init_Devices()
{
    int i;
    stack_ind = 0;
    for(i=0;i<MAX_DEVICES;++i)
   12b96:	cf e1       	ldi	r28, 0x1F	; 31
   12b98:	e8 3f       	cpi	r30, 0xF8	; 248
   12b9a:	fc 07       	cpc	r31, r28
   12b9c:	49 f7       	brne	.-46     	; 0x12b70 <init_Devices+0x14>
        Devices[i].BLOCKS = 0;
        memset(Devices[i].model, 0, sizeof(Devices[i].model) );
        Devices[i].dev = NULL;
        Devices[i].state = NULL;
    }
}
   12b9e:	df 91       	pop	r29
   12ba0:	cf 91       	pop	r28
   12ba2:	08 95       	ret

00012ba4 <push_state>:
/// @brief Push Parser State
/// @param state: parser state
/// @return state
int push_state(int state)
{
    if(stack_ind < MAX_STACK)
   12ba4:	20 91 7b 18 	lds	r18, 0x187B	; 0x80187b <stack_ind>
   12ba8:	30 91 7c 18 	lds	r19, 0x187C	; 0x80187c <stack_ind+0x1>
   12bac:	25 30       	cpi	r18, 0x05	; 5
   12bae:	31 05       	cpc	r19, r1
   12bb0:	7c f4       	brge	.+30     	; 0x12bd0 <push_state+0x2c>
        stack_p[stack_ind++] = state;
   12bb2:	a9 01       	movw	r20, r18
   12bb4:	4f 5f       	subi	r20, 0xFF	; 255
   12bb6:	5f 4f       	sbci	r21, 0xFF	; 255
   12bb8:	50 93 7c 18 	sts	0x187C, r21	; 0x80187c <stack_ind+0x1>
   12bbc:	40 93 7b 18 	sts	0x187B, r20	; 0x80187b <stack_ind>
   12bc0:	22 0f       	add	r18, r18
   12bc2:	33 1f       	adc	r19, r19
   12bc4:	f9 01       	movw	r30, r18
   12bc6:	ef 58       	subi	r30, 0x8F	; 143
   12bc8:	f7 4e       	sbci	r31, 0xE7	; 231
   12bca:	80 83       	st	Z, r24
   12bcc:	91 83       	std	Z+1, r25	; 0x01
    else
        return(START_STATE);
    return(state);
   12bce:	08 95       	ret
int push_state(int state)
{
    if(stack_ind < MAX_STACK)
        stack_p[stack_ind++] = state;
    else
        return(START_STATE);
   12bd0:	80 e0       	ldi	r24, 0x00	; 0
   12bd2:	90 e0       	ldi	r25, 0x00	; 0
    return(state);
}
   12bd4:	08 95       	ret

00012bd6 <pop_state>:
/// ===============================================
/// @brief Pop Parser State
/// @return state
int pop_state()
{
    if(stack_ind > 0)
   12bd6:	80 91 7b 18 	lds	r24, 0x187B	; 0x80187b <stack_ind>
   12bda:	90 91 7c 18 	lds	r25, 0x187C	; 0x80187c <stack_ind+0x1>
   12bde:	18 16       	cp	r1, r24
   12be0:	19 06       	cpc	r1, r25
   12be2:	6c f4       	brge	.+26     	; 0x12bfe <pop_state+0x28>
        return(stack_p[--stack_ind]);
   12be4:	01 97       	sbiw	r24, 0x01	; 1
   12be6:	90 93 7c 18 	sts	0x187C, r25	; 0x80187c <stack_ind+0x1>
   12bea:	80 93 7b 18 	sts	0x187B, r24	; 0x80187b <stack_ind>
   12bee:	88 0f       	add	r24, r24
   12bf0:	99 1f       	adc	r25, r25
   12bf2:	fc 01       	movw	r30, r24
   12bf4:	ef 58       	subi	r30, 0x8F	; 143
   12bf6:	f7 4e       	sbci	r31, 0xE7	; 231
   12bf8:	80 81       	ld	r24, Z
   12bfa:	91 81       	ldd	r25, Z+1	; 0x01
   12bfc:	08 95       	ret
    else
        return(START_STATE);
   12bfe:	80 e0       	ldi	r24, 0x00	; 0
   12c00:	90 e0       	ldi	r25, 0x00	; 0
}
   12c02:	08 95       	ret

00012c04 <assign_value>:
/// @param[in] maxval: maximum value
/// @param[in] *val: value to set
///
/// @return  1 is matched and value in range, 0 not matched or out of range
bool assign_value(char *str, uint32_t minval, uint32_t maxval, uint32_t *val)
{
   12c04:	a0 e0       	ldi	r26, 0x00	; 0
   12c06:	b0 e0       	ldi	r27, 0x00	; 0
   12c08:	e8 e0       	ldi	r30, 0x08	; 8
   12c0a:	f6 e9       	ldi	r31, 0x96	; 150
   12c0c:	0c 94 f5 e5 	jmp	0x1cbea	; 0x1cbea <__prologue_saves__+0x4>
   12c10:	2a 01       	movw	r4, r20
   12c12:	3b 01       	movw	r6, r22
   12c14:	48 01       	movw	r8, r16
   12c16:	59 01       	movw	r10, r18
   12c18:	87 01       	movw	r16, r14
    uint32_t tmp;
    int bad = 0;
    char *ptr;

    // Skip spaces before assignment
    ptr = skipspaces(str);
   12c1a:	0e 94 c0 32 	call	0x6580	; 0x6580 <skipspaces>
   12c1e:	ec 01       	movw	r28, r24
    // Skip optional '='
    if(*ptr == '=')
   12c20:	88 81       	ld	r24, Y
   12c22:	8d 33       	cpi	r24, 0x3D	; 61
   12c24:	29 f4       	brne	.+10     	; 0x12c30 <assign_value+0x2c>
    {
        ++ptr;
        // skip spaces after assignment
        ptr = skipspaces(ptr);
   12c26:	ce 01       	movw	r24, r28
   12c28:	01 96       	adiw	r24, 0x01	; 1
   12c2a:	0e 94 c0 32 	call	0x6580	; 0x6580 <skipspaces>
   12c2e:	ec 01       	movw	r28, r24
    }
    if(!*ptr)
   12c30:	88 81       	ld	r24, Y
   12c32:	81 11       	cpse	r24, r1
   12c34:	17 c0       	rjmp	.+46     	; 0x12c64 <assign_value+0x60>
    {
        if(debuglevel & 1)
   12c36:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   12c3a:	80 ff       	sbrs	r24, 0
   12c3c:	76 c0       	rjmp	.+236    	; 0x12d2a <assign_value+0x126>
            printf("line:%d, missing value\n", lines);
   12c3e:	80 91 66 18 	lds	r24, 0x1866	; 0x801866 <lines+0x1>
   12c42:	8f 93       	push	r24
   12c44:	80 91 65 18 	lds	r24, 0x1865	; 0x801865 <lines>
   12c48:	8f 93       	push	r24
   12c4a:	88 e9       	ldi	r24, 0x98	; 152
   12c4c:	9d e1       	ldi	r25, 0x1D	; 29
   12c4e:	1f 92       	push	r1
   12c50:	9f 93       	push	r25
   12c52:	8f 93       	push	r24
   12c54:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   12c58:	0f 90       	pop	r0
   12c5a:	0f 90       	pop	r0
   12c5c:	0f 90       	pop	r0
   12c5e:	0f 90       	pop	r0
   12c60:	0f 90       	pop	r0
   12c62:	63 c0       	rjmp	.+198    	; 0x12d2a <assign_value+0x126>
        bad = 1;
    }
    if(!bad)
    {
        // FIXME detect bad numbers
        tmp = get_value(ptr);
   12c64:	ce 01       	movw	r24, r28
   12c66:	0e 94 75 34 	call	0x68ea	; 0x68ea <get_value>
   12c6a:	6b 01       	movw	r12, r22
   12c6c:	7c 01       	movw	r14, r24
        *val = tmp;
   12c6e:	f8 01       	movw	r30, r16
   12c70:	60 83       	st	Z, r22
   12c72:	71 83       	std	Z+1, r23	; 0x01
   12c74:	82 83       	std	Z+2, r24	; 0x02
   12c76:	93 83       	std	Z+3, r25	; 0x03
        if((minval && (tmp < minval)))
   12c78:	41 14       	cp	r4, r1
   12c7a:	51 04       	cpc	r5, r1
   12c7c:	61 04       	cpc	r6, r1
   12c7e:	71 04       	cpc	r7, r1
   12c80:	39 f1       	breq	.+78     	; 0x12cd0 <assign_value+0xcc>
   12c82:	c4 14       	cp	r12, r4
   12c84:	d5 04       	cpc	r13, r5
   12c86:	e6 04       	cpc	r14, r6
   12c88:	f7 04       	cpc	r15, r7
   12c8a:	10 f5       	brcc	.+68     	; 0x12cd0 <assign_value+0xcc>
        {
            printf("line:%d, %s is below range %d\n", lines, ptr,(int)minval);
   12c8c:	5f 92       	push	r5
   12c8e:	4f 92       	push	r4
   12c90:	df 93       	push	r29
   12c92:	cf 93       	push	r28
   12c94:	80 91 66 18 	lds	r24, 0x1866	; 0x801866 <lines+0x1>
   12c98:	8f 93       	push	r24
   12c9a:	80 91 65 18 	lds	r24, 0x1865	; 0x801865 <lines>
   12c9e:	8f 93       	push	r24
   12ca0:	89 e7       	ldi	r24, 0x79	; 121
   12ca2:	9d e1       	ldi	r25, 0x1D	; 29
   12ca4:	1f 92       	push	r1
   12ca6:	9f 93       	push	r25
   12ca8:	8f 93       	push	r24
   12caa:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
            bad = 1;
        }
        if((maxval != 0xffffffffUL) && (tmp > maxval))
   12cae:	ed b7       	in	r30, 0x3d	; 61
   12cb0:	fe b7       	in	r31, 0x3e	; 62
   12cb2:	39 96       	adiw	r30, 0x09	; 9
   12cb4:	0f b6       	in	r0, 0x3f	; 63
   12cb6:	f8 94       	cli
   12cb8:	fe bf       	out	0x3e, r31	; 62
   12cba:	0f be       	out	0x3f, r0	; 63
   12cbc:	ed bf       	out	0x3d, r30	; 61
   12cbe:	ff ef       	ldi	r31, 0xFF	; 255
   12cc0:	8f 16       	cp	r8, r31
   12cc2:	9f 06       	cpc	r9, r31
   12cc4:	af 06       	cpc	r10, r31
   12cc6:	bf 06       	cpc	r11, r31
   12cc8:	81 f1       	breq	.+96     	; 0x12d2a <assign_value+0x126>
        tmp = get_value(ptr);
        *val = tmp;
        if((minval && (tmp < minval)))
        {
            printf("line:%d, %s is below range %d\n", lines, ptr,(int)minval);
            bad = 1;
   12cca:	81 e0       	ldi	r24, 0x01	; 1
   12ccc:	90 e0       	ldi	r25, 0x00	; 0
   12cce:	08 c0       	rjmp	.+16     	; 0x12ce0 <assign_value+0xdc>
        }
        if((maxval != 0xffffffffUL) && (tmp > maxval))
   12cd0:	ff ef       	ldi	r31, 0xFF	; 255
   12cd2:	8f 16       	cp	r8, r31
   12cd4:	9f 06       	cpc	r9, r31
   12cd6:	af 06       	cpc	r10, r31
   12cd8:	bf 06       	cpc	r11, r31
   12cda:	21 f1       	breq	.+72     	; 0x12d24 <assign_value+0x120>
   12cdc:	80 e0       	ldi	r24, 0x00	; 0
   12cde:	90 e0       	ldi	r25, 0x00	; 0
   12ce0:	8c 14       	cp	r8, r12
   12ce2:	9d 04       	cpc	r9, r13
   12ce4:	ae 04       	cpc	r10, r14
   12ce6:	bf 04       	cpc	r11, r15
   12ce8:	d0 f4       	brcc	.+52     	; 0x12d1e <assign_value+0x11a>
        {
            printf("line:%d, %s is above range %d\n", lines, ptr,(int)maxval);
   12cea:	9f 92       	push	r9
   12cec:	8f 92       	push	r8
   12cee:	df 93       	push	r29
   12cf0:	cf 93       	push	r28
   12cf2:	80 91 66 18 	lds	r24, 0x1866	; 0x801866 <lines+0x1>
   12cf6:	8f 93       	push	r24
   12cf8:	80 91 65 18 	lds	r24, 0x1865	; 0x801865 <lines>
   12cfc:	8f 93       	push	r24
   12cfe:	8a e5       	ldi	r24, 0x5A	; 90
   12d00:	9d e1       	ldi	r25, 0x1D	; 29
   12d02:	1f 92       	push	r1
   12d04:	9f 93       	push	r25
   12d06:	8f 93       	push	r24
   12d08:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   12d0c:	ed b7       	in	r30, 0x3d	; 61
   12d0e:	fe b7       	in	r31, 0x3e	; 62
   12d10:	39 96       	adiw	r30, 0x09	; 9
   12d12:	0f b6       	in	r0, 0x3f	; 63
   12d14:	f8 94       	cli
   12d16:	fe bf       	out	0x3e, r31	; 62
   12d18:	0f be       	out	0x3f, r0	; 63
   12d1a:	ed bf       	out	0x3d, r30	; 61
   12d1c:	06 c0       	rjmp	.+12     	; 0x12d2a <assign_value+0x126>
            bad = 1;
        }
    }
    if(bad)
        return(0);
   12d1e:	f1 e0       	ldi	r31, 0x01	; 1
   12d20:	8f 27       	eor	r24, r31
   12d22:	05 c0       	rjmp	.+10     	; 0x12d2e <assign_value+0x12a>
    return(1);
   12d24:	81 e0       	ldi	r24, 0x01	; 1
   12d26:	90 e0       	ldi	r25, 0x00	; 0
   12d28:	02 c0       	rjmp	.+4      	; 0x12d2e <assign_value+0x12a>
            printf("line:%d, %s is above range %d\n", lines, ptr,(int)maxval);
            bad = 1;
        }
    }
    if(bad)
        return(0);
   12d2a:	80 e0       	ldi	r24, 0x00	; 0
   12d2c:	90 e0       	ldi	r25, 0x00	; 0
    return(1);
}
   12d2e:	cd b7       	in	r28, 0x3d	; 61
   12d30:	de b7       	in	r29, 0x3e	; 62
   12d32:	e0 e1       	ldi	r30, 0x10	; 16
   12d34:	0c 94 11 e6 	jmp	0x1cc22	; 0x1cc22 <__epilogue_restores__+0x4>

00012d38 <set_Config_Defaults>:
/// ===============================================
///@brief Set Defaults for any missing disk or printer devices
/// These are only used if the Config file omits them or is empty
/// @return  void
void set_Config_Defaults()
{
   12d38:	08 95       	ret

00012d3a <hpdir_set_device>:
{
    SS80DiskType *SS80p = NULL;
#ifdef AMIGO
    AMIGODiskType *AMIGOp = NULL;
#endif
	if(Devices[index].TYPE == SS80_TYPE)
   12d3a:	2b e2       	ldi	r18, 0x2B	; 43
   12d3c:	28 9f       	mul	r18, r24
   12d3e:	f0 01       	movw	r30, r0
   12d40:	29 9f       	mul	r18, r25
   12d42:	f0 0d       	add	r31, r0
   12d44:	11 24       	eor	r1, r1
   12d46:	ec 50       	subi	r30, 0x0C	; 12
   12d48:	f2 4e       	sbci	r31, 0xE2	; 226
   12d4a:	20 81       	ld	r18, Z
   12d4c:	23 30       	cpi	r18, 0x03	; 3
   12d4e:	e1 f5       	brne	.+120    	; 0x12dc8 <hpdir_set_device+0x8e>
	{
		SS80p = (SS80DiskType *) Devices[index].dev;
   12d50:	07 a0       	ldd	r0, Z+39	; 0x27
   12d52:	f0 a5       	ldd	r31, Z+40	; 0x28
   12d54:	e0 2d       	mov	r30, r0
		return;
	}

	if(Devices[index].TYPE == SS80_TYPE)
	{
		SS80p->CONFIG.ID 				= hpdir.ID;
   12d56:	20 91 78 20 	lds	r18, 0x2078	; 0x802078 <hpdir+0x80>
   12d5a:	30 91 79 20 	lds	r19, 0x2079	; 0x802079 <hpdir+0x81>
   12d5e:	34 a3       	std	Z+36, r19	; 0x24
   12d60:	23 a3       	std	Z+35, r18	; 0x23
		SS80p->UNIT.DEVICE_NUMBER 		= hpdir.DEVICE_NUMBER;
   12d62:	40 91 84 20 	lds	r20, 0x2084	; 0x802084 <hpdir+0x8c>
   12d66:	50 91 85 20 	lds	r21, 0x2085	; 0x802085 <hpdir+0x8d>
   12d6a:	60 91 86 20 	lds	r22, 0x2086	; 0x802086 <hpdir+0x8e>
   12d6e:	70 91 87 20 	lds	r23, 0x2087	; 0x802087 <hpdir+0x8f>
   12d72:	43 a7       	std	Z+43, r20	; 0x2b
   12d74:	54 a7       	std	Z+44, r21	; 0x2c
   12d76:	65 a7       	std	Z+45, r22	; 0x2d
   12d78:	76 a7       	std	Z+46, r23	; 0x2e
		SS80p->UNIT.BYTES_PER_BLOCK 	= hpdir.BYTES_PER_SECTOR;
   12d7a:	20 91 98 20 	lds	r18, 0x2098	; 0x802098 <hpdir+0xa0>
   12d7e:	30 91 99 20 	lds	r19, 0x2099	; 0x802099 <hpdir+0xa1>
   12d82:	30 ab       	std	Z+48, r19	; 0x30
   12d84:	27 a7       	std	Z+47, r18	; 0x2f

		// CHS NOT used in this emulator!
		SS80p->VOLUME.MAX_CYLINDER 		= 0;	// hpdir.CYLINDERS-1;
   12d86:	df 01       	movw	r26, r30
   12d88:	de 96       	adiw	r26, 0x3e	; 62
   12d8a:	1d 92       	st	X+, r1
   12d8c:	1d 92       	st	X+, r1
   12d8e:	1d 92       	st	X+, r1
   12d90:	1c 92       	st	X, r1
   12d92:	13 97       	sbiw	r26, 0x03	; 3
		SS80p->VOLUME.MAX_HEAD 			= 0;	// hpdir.HEADS-1;
   12d94:	14 96       	adiw	r26, 0x04	; 4
   12d96:	1c 92       	st	X, r1
		SS80p->VOLUME.MAX_SECTOR 		= 0;	// hpdir.SECTORS-1;
   12d98:	11 96       	adiw	r26, 0x01	; 1
   12d9a:	1d 92       	st	X+, r1
   12d9c:	1c 92       	st	X, r1

		SS80p->VOLUME.MAX_BLOCK_NUMBER 	= hpdir.BLOCKS-1;
   12d9e:	eb 5b       	subi	r30, 0xBB	; 187
   12da0:	ff 4f       	sbci	r31, 0xFF	; 255
   12da2:	40 91 a4 20 	lds	r20, 0x20A4	; 0x8020a4 <hpdir+0xac>
   12da6:	50 91 a5 20 	lds	r21, 0x20A5	; 0x8020a5 <hpdir+0xad>
   12daa:	60 91 a6 20 	lds	r22, 0x20A6	; 0x8020a6 <hpdir+0xae>
   12dae:	70 91 a7 20 	lds	r23, 0x20A7	; 0x8020a7 <hpdir+0xaf>
   12db2:	41 50       	subi	r20, 0x01	; 1
   12db4:	51 09       	sbc	r21, r1
   12db6:	61 09       	sbc	r22, r1
   12db8:	71 09       	sbc	r23, r1
   12dba:	40 83       	st	Z, r20
   12dbc:	51 83       	std	Z+1, r21	; 0x01
   12dbe:	62 83       	std	Z+2, r22	; 0x02
   12dc0:	73 83       	std	Z+3, r23	; 0x03
///@return 1 on sucess or 0 on fail
void hpdir_set_device(int index)
{
    SS80DiskType *SS80p = NULL;
#ifdef AMIGO
    AMIGODiskType *AMIGOp = NULL;
   12dc2:	e0 e0       	ldi	r30, 0x00	; 0
   12dc4:	f0 e0       	ldi	r31, 0x00	; 0
   12dc6:	11 c0       	rjmp	.+34     	; 0x12dea <hpdir_set_device+0xb0>
	if(Devices[index].TYPE == SS80_TYPE)
	{
		SS80p = (SS80DiskType *) Devices[index].dev;
	}
#ifdef AMIGO
	else if(Devices[index].TYPE == AMIGO_TYPE)
   12dc8:	21 30       	cpi	r18, 0x01	; 1
   12dca:	21 f4       	brne	.+8      	; 0x12dd4 <hpdir_set_device+0x9a>
	{
		AMIGOp = (AMIGODiskType *) Devices[index].dev;
   12dcc:	07 a0       	ldd	r0, Z+39	; 0x27
   12dce:	f0 a5       	ldd	r31, Z+40	; 0x28
   12dd0:	e0 2d       	mov	r30, r0
   12dd2:	0b c0       	rjmp	.+22     	; 0x12dea <hpdir_set_device+0xb0>
	}
#endif
	else
	{
		printf("hpdir_parameters invalid TYPE\n");
   12dd4:	8b e3       	ldi	r24, 0x3B	; 59
   12dd6:	9d e1       	ldi	r25, 0x1D	; 29
   12dd8:	1f 92       	push	r1
   12dda:	9f 93       	push	r25
   12ddc:	8f 93       	push	r24
   12dde:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
		return;
   12de2:	0f 90       	pop	r0
   12de4:	0f 90       	pop	r0
   12de6:	0f 90       	pop	r0
   12de8:	08 95       	ret

		SS80p->VOLUME.MAX_BLOCK_NUMBER 	= hpdir.BLOCKS-1;
	}

#ifdef AMIGO
	if(Devices[index].TYPE == AMIGO_TYPE)
   12dea:	2b e2       	ldi	r18, 0x2B	; 43
   12dec:	28 9f       	mul	r18, r24
   12dee:	d0 01       	movw	r26, r0
   12df0:	29 9f       	mul	r18, r25
   12df2:	b0 0d       	add	r27, r0
   12df4:	11 24       	eor	r1, r1
   12df6:	ac 50       	subi	r26, 0x0C	; 12
   12df8:	b2 4e       	sbci	r27, 0xE2	; 226
   12dfa:	2c 91       	ld	r18, X
   12dfc:	21 30       	cpi	r18, 0x01	; 1
   12dfe:	f1 f4       	brne	.+60     	; 0x12e3c <hpdir_set_device+0x102>
	{
		AMIGOp->CONFIG.ID = hpdir.ID;
   12e00:	20 91 78 20 	lds	r18, 0x2078	; 0x802078 <hpdir+0x80>
   12e04:	30 91 79 20 	lds	r19, 0x2079	; 0x802079 <hpdir+0x81>
   12e08:	34 a3       	std	Z+36, r19	; 0x24
   12e0a:	23 a3       	std	Z+35, r18	; 0x23
		AMIGOp->GEOMETRY.BYTES_PER_SECTOR = hpdir.BYTES_PER_SECTOR;
   12e0c:	20 91 98 20 	lds	r18, 0x2098	; 0x802098 <hpdir+0xa0>
   12e10:	30 91 99 20 	lds	r19, 0x2099	; 0x802099 <hpdir+0xa1>
   12e14:	36 a3       	std	Z+38, r19	; 0x26
   12e16:	25 a3       	std	Z+37, r18	; 0x25
		AMIGOp->GEOMETRY.SECTORS_PER_TRACK = hpdir.SECTORS;
   12e18:	20 91 94 20 	lds	r18, 0x2094	; 0x802094 <hpdir+0x9c>
   12e1c:	30 91 95 20 	lds	r19, 0x2095	; 0x802095 <hpdir+0x9d>
   12e20:	30 a7       	std	Z+40, r19	; 0x28
   12e22:	27 a3       	std	Z+39, r18	; 0x27
		AMIGOp->GEOMETRY.HEADS = hpdir.HEADS;
   12e24:	20 91 90 20 	lds	r18, 0x2090	; 0x802090 <hpdir+0x98>
   12e28:	30 91 91 20 	lds	r19, 0x2091	; 0x802091 <hpdir+0x99>
   12e2c:	32 a7       	std	Z+42, r19	; 0x2a
   12e2e:	21 a7       	std	Z+41, r18	; 0x29
		AMIGOp->GEOMETRY.CYLINDERS = hpdir.CYLINDERS;
   12e30:	20 91 8c 20 	lds	r18, 0x208C	; 0x80208c <hpdir+0x94>
   12e34:	30 91 8d 20 	lds	r19, 0x208D	; 0x80208d <hpdir+0x95>
   12e38:	34 a7       	std	Z+44, r19	; 0x2c
   12e3a:	23 a7       	std	Z+43, r18	; 0x2b
	}
#endif
	Devices[index].BLOCKS = hpdir.BLOCKS;
   12e3c:	4b e2       	ldi	r20, 0x2B	; 43
   12e3e:	48 9f       	mul	r20, r24
   12e40:	90 01       	movw	r18, r0
   12e42:	49 9f       	mul	r20, r25
   12e44:	30 0d       	add	r19, r0
   12e46:	11 24       	eor	r1, r1
   12e48:	f9 01       	movw	r30, r18
   12e4a:	ec 50       	subi	r30, 0x0C	; 12
   12e4c:	f2 4e       	sbci	r31, 0xE2	; 226
   12e4e:	80 91 a4 20 	lds	r24, 0x20A4	; 0x8020a4 <hpdir+0xac>
   12e52:	90 91 a5 20 	lds	r25, 0x20A5	; 0x8020a5 <hpdir+0xad>
   12e56:	a0 91 a6 20 	lds	r26, 0x20A6	; 0x8020a6 <hpdir+0xae>
   12e5a:	b0 91 a7 20 	lds	r27, 0x20A7	; 0x8020a7 <hpdir+0xaf>
   12e5e:	83 83       	std	Z+3, r24	; 0x03
   12e60:	94 83       	std	Z+4, r25	; 0x04
   12e62:	a5 83       	std	Z+5, r26	; 0x05
   12e64:	b6 83       	std	Z+6, r27	; 0x06
	strncpy(Devices[index].model, hpdir.model, sizeof(Devices[index].model) -2);
   12e66:	4e e1       	ldi	r20, 0x1E	; 30
   12e68:	50 e0       	ldi	r21, 0x00	; 0
   12e6a:	68 ef       	ldi	r22, 0xF8	; 248
   12e6c:	7f e1       	ldi	r23, 0x1F	; 31
   12e6e:	c9 01       	movw	r24, r18
   12e70:	85 50       	subi	r24, 0x05	; 5
   12e72:	92 4e       	sbci	r25, 0xE2	; 226
   12e74:	0c 94 61 32 	jmp	0x64c2	; 0x64c2 <strncpy>
   12e78:	08 95       	ret

00012e7a <hpdir_set_parameters>:
///@param[in] index: Devices index
///@param[in] model: model string
///
///@return void
void hpdir_set_parameters(int index, char *model)
{
   12e7a:	cf 93       	push	r28
   12e7c:	df 93       	push	r29
   12e7e:	ec 01       	movw	r28, r24
   12e80:	cb 01       	movw	r24, r22
	if ( hpdir_find_drive( model, 0 ,1) )
   12e82:	41 e0       	ldi	r20, 0x01	; 1
   12e84:	50 e0       	ldi	r21, 0x00	; 0
   12e86:	60 e0       	ldi	r22, 0x00	; 0
   12e88:	70 e0       	ldi	r23, 0x00	; 0
   12e8a:	0e 94 9d a6 	call	0x14d3a	; 0x14d3a <hpdir_find_drive>
   12e8e:	89 2b       	or	r24, r25
   12e90:	11 f0       	breq	.+4      	; 0x12e96 <hpdir_set_parameters+0x1c>
		hpdir_set_device(index);
   12e92:	ce 01       	movw	r24, r28
   12e94:	52 df       	rcall	.-348    	; 0x12d3a <hpdir_set_device>
}
   12e96:	df 91       	pop	r29
   12e98:	cf 91       	pop	r28
   12e9a:	08 95       	ret

00012e9c <Post_Config>:

/// ===============================================
/// @brief Post Process COnfiguration file after reading
/// @return  void
void Post_Config()
{
   12e9c:	4f 92       	push	r4
   12e9e:	5f 92       	push	r5
   12ea0:	6f 92       	push	r6
   12ea2:	7f 92       	push	r7
   12ea4:	8f 92       	push	r8
   12ea6:	af 92       	push	r10
   12ea8:	bf 92       	push	r11
   12eaa:	cf 92       	push	r12
   12eac:	df 92       	push	r13
   12eae:	ef 92       	push	r14
   12eb0:	0f 93       	push	r16
   12eb2:	1f 93       	push	r17
   12eb4:	cf 93       	push	r28
   12eb6:	df 93       	push	r29
   12eb8:	c4 ef       	ldi	r28, 0xF4	; 244
   12eba:	dd e1       	ldi	r29, 0x1D	; 29
   12ebc:	88 ef       	ldi	r24, 0xF8	; 248
   12ebe:	48 2e       	mov	r4, r24
   12ec0:	8f e1       	ldi	r24, 0x1F	; 31
   12ec2:	58 2e       	mov	r5, r24
        if(Devices[i].TYPE == AMIGO_TYPE )
        {
            AMIGOp = (AMIGODiskType *)Devices[i].dev;
			if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
			{
				AMIGOp->GEOMETRY.BYTES_PER_SECTOR = 256;
   12ec4:	a1 2c       	mov	r10, r1
   12ec6:	bb 24       	eor	r11, r11
   12ec8:	b3 94       	inc	r11
				printf("Warning: %s BYTES_PER_SECTOR != 256, Adjusting to 256\n", Devices[i].model);
   12eca:	8e ec       	ldi	r24, 0xCE	; 206
   12ecc:	9c e1       	ldi	r25, 0x1C	; 28
   12ece:	6c 01       	movw	r12, r24
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
			if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
			{
				// SS80p->UNIT.BYTES_PER_BLOCK = 256;
				printf("Warning: %s BYTES_PER_BLOCK != 256, Adjusting to 256\n", Devices[i].model);
   12ed0:	85 e0       	ldi	r24, 0x05	; 5
   12ed2:	9d e1       	ldi	r25, 0x1D	; 29
   12ed4:	3c 01       	movw	r6, r24
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   12ed6:	88 81       	ld	r24, Y
   12ed8:	88 23       	and	r24, r24
   12eda:	09 f4       	brne	.+2      	; 0x12ede <Post_Config+0x42>
   12edc:	5f c0       	rjmp	.+190    	; 0x12f9c <Post_Config+0x100>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   12ede:	83 30       	cpi	r24, 0x03	; 3
   12ee0:	21 f5       	brne	.+72     	; 0x12f2a <Post_Config+0x8e>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   12ee2:	0f a1       	ldd	r16, Y+39	; 0x27
   12ee4:	18 a5       	ldd	r17, Y+40	; 0x28
			if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
   12ee6:	f8 01       	movw	r30, r16
   12ee8:	87 a5       	ldd	r24, Z+47	; 0x2f
   12eea:	90 a9       	ldd	r25, Z+48	; 0x30
   12eec:	81 15       	cp	r24, r1
   12eee:	91 40       	sbci	r25, 0x01	; 1
   12ef0:	71 f0       	breq	.+28     	; 0x12f0e <Post_Config+0x72>
			{
				// SS80p->UNIT.BYTES_PER_BLOCK = 256;
				printf("Warning: %s BYTES_PER_BLOCK != 256, Adjusting to 256\n", Devices[i].model);
   12ef2:	ce 01       	movw	r24, r28
   12ef4:	07 96       	adiw	r24, 0x07	; 7
   12ef6:	9f 93       	push	r25
   12ef8:	8f 93       	push	r24
   12efa:	1f 92       	push	r1
   12efc:	7f 92       	push	r7
   12efe:	6f 92       	push	r6
   12f00:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   12f04:	0f 90       	pop	r0
   12f06:	0f 90       	pop	r0
   12f08:	0f 90       	pop	r0
   12f0a:	0f 90       	pop	r0
   12f0c:	0f 90       	pop	r0
			}
			sectors = SS80p->VOLUME.MAX_BLOCK_NUMBER+1;
   12f0e:	f8 01       	movw	r30, r16
   12f10:	eb 5b       	subi	r30, 0xBB	; 187
   12f12:	ff 4f       	sbci	r31, 0xFF	; 255
			Devices[i].BLOCKS = sectors;
   12f14:	80 81       	ld	r24, Z
   12f16:	91 81       	ldd	r25, Z+1	; 0x01
   12f18:	a2 81       	ldd	r26, Z+2	; 0x02
   12f1a:	b3 81       	ldd	r27, Z+3	; 0x03
   12f1c:	01 96       	adiw	r24, 0x01	; 1
   12f1e:	a1 1d       	adc	r26, r1
   12f20:	b1 1d       	adc	r27, r1
   12f22:	8b 83       	std	Y+3, r24	; 0x03
   12f24:	9c 83       	std	Y+4, r25	; 0x04
   12f26:	ad 83       	std	Y+5, r26	; 0x05
   12f28:	be 83       	std	Y+6, r27	; 0x06
        } // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   12f2a:	88 81       	ld	r24, Y
   12f2c:	81 30       	cpi	r24, 0x01	; 1
   12f2e:	b1 f5       	brne	.+108    	; 0x12f9c <Post_Config+0x100>
        {
            AMIGOp = (AMIGODiskType *)Devices[i].dev;
   12f30:	0f a1       	ldd	r16, Y+39	; 0x27
   12f32:	18 a5       	ldd	r17, Y+40	; 0x28
			if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
   12f34:	f8 01       	movw	r30, r16
   12f36:	85 a1       	ldd	r24, Z+37	; 0x25
   12f38:	96 a1       	ldd	r25, Z+38	; 0x26
   12f3a:	81 15       	cp	r24, r1
   12f3c:	91 40       	sbci	r25, 0x01	; 1
   12f3e:	89 f0       	breq	.+34     	; 0x12f62 <Post_Config+0xc6>
			{
				AMIGOp->GEOMETRY.BYTES_PER_SECTOR = 256;
   12f40:	f8 01       	movw	r30, r16
   12f42:	b6 a2       	std	Z+38, r11	; 0x26
   12f44:	a5 a2       	std	Z+37, r10	; 0x25
				printf("Warning: %s BYTES_PER_SECTOR != 256, Adjusting to 256\n", Devices[i].model);
   12f46:	ce 01       	movw	r24, r28
   12f48:	07 96       	adiw	r24, 0x07	; 7
   12f4a:	9f 93       	push	r25
   12f4c:	8f 93       	push	r24
   12f4e:	1f 92       	push	r1
   12f50:	df 92       	push	r13
   12f52:	cf 92       	push	r12
   12f54:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   12f58:	0f 90       	pop	r0
   12f5a:	0f 90       	pop	r0
   12f5c:	0f 90       	pop	r0
   12f5e:	0f 90       	pop	r0
   12f60:	0f 90       	pop	r0
			}
			sectors = AMIGOp->GEOMETRY.SECTORS_PER_TRACK
				 * AMIGOp->GEOMETRY.HEADS
				 * AMIGOp->GEOMETRY.CYLINDERS;
			Devices[i].BLOCKS = sectors;
   12f62:	f8 01       	movw	r30, r16
   12f64:	27 a1       	ldd	r18, Z+39	; 0x27
   12f66:	30 a5       	ldd	r19, Z+40	; 0x28
   12f68:	81 a5       	ldd	r24, Z+41	; 0x29
   12f6a:	92 a5       	ldd	r25, Z+42	; 0x2a
   12f6c:	28 9f       	mul	r18, r24
   12f6e:	a0 01       	movw	r20, r0
   12f70:	29 9f       	mul	r18, r25
   12f72:	50 0d       	add	r21, r0
   12f74:	38 9f       	mul	r19, r24
   12f76:	50 0d       	add	r21, r0
   12f78:	11 24       	eor	r1, r1
   12f7a:	23 a5       	ldd	r18, Z+43	; 0x2b
   12f7c:	34 a5       	ldd	r19, Z+44	; 0x2c
   12f7e:	42 9f       	mul	r20, r18
   12f80:	c0 01       	movw	r24, r0
   12f82:	43 9f       	mul	r20, r19
   12f84:	90 0d       	add	r25, r0
   12f86:	52 9f       	mul	r21, r18
   12f88:	90 0d       	add	r25, r0
   12f8a:	11 24       	eor	r1, r1
   12f8c:	09 2e       	mov	r0, r25
   12f8e:	00 0c       	add	r0, r0
   12f90:	aa 0b       	sbc	r26, r26
   12f92:	bb 0b       	sbc	r27, r27
   12f94:	8b 83       	std	Y+3, r24	; 0x03
   12f96:	9c 83       	std	Y+4, r25	; 0x04
   12f98:	ad 83       	std	Y+5, r26	; 0x05
   12f9a:	be 83       	std	Y+6, r27	; 0x06
   12f9c:	ab 96       	adiw	r28, 0x2b	; 43
#ifdef AMIGO
    ///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
   12f9e:	4c 16       	cp	r4, r28
   12fa0:	5d 06       	cpc	r5, r29
   12fa2:	09 f0       	breq	.+2      	; 0x12fa6 <Post_Config+0x10a>
   12fa4:	98 cf       	rjmp	.-208    	; 0x12ed6 <Post_Config+0x3a>
				 * AMIGOp->GEOMETRY.CYLINDERS;
			Devices[i].BLOCKS = sectors;
        } 
#endif // #ifdef AMIGO
    }
}
   12fa6:	df 91       	pop	r29
   12fa8:	cf 91       	pop	r28
   12faa:	1f 91       	pop	r17
   12fac:	0f 91       	pop	r16
   12fae:	ef 90       	pop	r14
   12fb0:	df 90       	pop	r13
   12fb2:	cf 90       	pop	r12
   12fb4:	bf 90       	pop	r11
   12fb6:	af 90       	pop	r10
   12fb8:	8f 90       	pop	r8
   12fba:	7f 90       	pop	r7
   12fbc:	6f 90       	pop	r6
   12fbe:	5f 90       	pop	r5
   12fc0:	4f 90       	pop	r4
   12fc2:	08 95       	ret

00012fc4 <Read_Config>:
/// Set all drive parameters and debuglevel 
///
/// @param name: config file name to process
/// @return  number of parse errors
int Read_Config(char *name)
{
   12fc4:	aa e9       	ldi	r26, 0x9A	; 154
   12fc6:	b0 e0       	ldi	r27, 0x00	; 0
   12fc8:	e8 ee       	ldi	r30, 0xE8	; 232
   12fca:	f7 e9       	ldi	r31, 0x97	; 151
   12fcc:	0c 94 f3 e5 	jmp	0x1cbe6	; 0x1cbe6 <__prologue_saves__>
   12fd0:	18 2f       	mov	r17, r24
#endif

    char *ptr;
    char str[128];

    init_Devices();
   12fd2:	09 2f       	mov	r16, r25

    lines = 0;
   12fd4:	c3 dd       	rcall	.-1146   	; 0x12b5c <init_Devices>
   12fd6:	10 92 66 18 	sts	0x1866, r1	; 0x801866 <lines+0x1>
   12fda:	10 92 65 18 	sts	0x1865, r1	; 0x801865 <lines>

    printf("Reading: %s\n", name);
   12fde:	0f 93       	push	r16
   12fe0:	1f 93       	push	r17
   12fe2:	81 ec       	ldi	r24, 0xC1	; 193
   12fe4:	9c e1       	ldi	r25, 0x1C	; 28
   12fe6:	1f 92       	push	r1
   12fe8:	9f 93       	push	r25
   12fea:	8f 93       	push	r24
   12fec:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    cfg = fopen(name, "rb");
   12ff0:	66 e8       	ldi	r22, 0x86	; 134
   12ff2:	78 e0       	ldi	r23, 0x08	; 8
   12ff4:	81 2f       	mov	r24, r17
   12ff6:	90 2f       	mov	r25, r16
   12ff8:	0e 94 43 7f 	call	0xfe86	; 0xfe86 <fopen>
   12ffc:	c9 57       	subi	r28, 0x79	; 121
   12ffe:	df 4f       	sbci	r29, 0xFF	; 255
   13000:	99 83       	std	Y+1, r25	; 0x01
   13002:	88 83       	st	Y, r24
   13004:	c7 58       	subi	r28, 0x87	; 135
    if(cfg == NULL)
   13006:	d0 40       	sbci	r29, 0x00	; 0
   13008:	0f 90       	pop	r0
   1300a:	0f 90       	pop	r0
   1300c:	0f 90       	pop	r0
   1300e:	0f 90       	pop	r0
   13010:	0f 90       	pop	r0
   13012:	89 2b       	or	r24, r25
   13014:	09 f4       	brne	.+2      	; 0x13018 <Read_Config+0x54>
   13016:	53 c0       	rjmp	.+166    	; 0x130be <Read_Config+0xfa>
   13018:	21 2c       	mov	r2, r1
   1301a:	31 2c       	mov	r3, r1
   1301c:	41 2c       	mov	r4, r1
   1301e:	51 2c       	mov	r5, r1
   13020:	cb 57       	subi	r28, 0x7B	; 123
   13022:	df 4f       	sbci	r29, 0xFF	; 255
   13024:	19 82       	std	Y+1, r1	; 0x01
   13026:	18 82       	st	Y, r1
   13028:	c5 58       	subi	r28, 0x85	; 133
   1302a:	d0 40       	sbci	r29, 0x00	; 0
   1302c:	81 2c       	mov	r8, r1
   1302e:	91 2c       	mov	r9, r1
   13030:	a1 2c       	mov	r10, r1
   13032:	b1 2c       	mov	r11, r1
   13034:	61 2c       	mov	r6, r1
            }
            break;
#endif // #ifdef AMIGO

        default:
            printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   13036:	71 2c       	mov	r7, r1
   13038:	84 ee       	ldi	r24, 0xE4	; 228
   1303a:	99 e1       	ldi	r25, 0x19	; 25
   1303c:	9c 01       	movw	r18, r24
   1303e:	40 e0       	ldi	r20, 0x00	; 0
   13040:	c7 57       	subi	r28, 0x77	; 119
   13042:	df 4f       	sbci	r29, 0xFF	; 255
   13044:	28 83       	st	Y, r18
   13046:	39 83       	std	Y+1, r19	; 0x01
   13048:	4a 83       	std	Y+2, r20	; 0x02
   1304a:	c9 58       	subi	r28, 0x89	; 137
                    ++errors;
                AMIGOp->GEOMETRY.CYLINDERS = val;
            }
            else
            {
                printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   1304c:	d0 40       	sbci	r29, 0x00	; 0
   1304e:	86 e0       	ldi	r24, 0x06	; 6
   13050:	9a e1       	ldi	r25, 0x1A	; 26
   13052:	9c 01       	movw	r18, r24
   13054:	40 e0       	ldi	r20, 0x00	; 0
   13056:	c4 57       	subi	r28, 0x74	; 116
   13058:	df 4f       	sbci	r29, 0xFF	; 255
   1305a:	28 83       	st	Y, r18
   1305c:	39 83       	std	Y+1, r19	; 0x01
   1305e:	4a 83       	std	Y+2, r20	; 0x02
   13060:	cc 58       	subi	r28, 0x8C	; 140
            if( (ind = token(ptr,"BYTES_PER_SECTOR")) )
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0x1000UL, &val) )
                    ++errors;
printf("BYTES PER SECTOR: %s\n", token);
   13062:	d0 40       	sbci	r29, 0x00	; 0
   13064:	86 e3       	ldi	r24, 0x36	; 54
   13066:	9a e1       	ldi	r25, 0x1A	; 26
   13068:	9c 01       	movw	r18, r24
   1306a:	40 e0       	ldi	r20, 0x00	; 0
   1306c:	c1 57       	subi	r28, 0x71	; 113
   1306e:	df 4f       	sbci	r29, 0xFF	; 255
   13070:	28 83       	st	Y, r18
   13072:	39 83       	std	Y+1, r19	; 0x01
   13074:	4a 83       	std	Y+2, r20	; 0x02
   13076:	cf 58       	subi	r28, 0x8F	; 143
                    ++errors;
                AMIGOp->CONFIG.ID = val;
            }
            else
            {
                printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   13078:	d0 40       	sbci	r29, 0x00	; 0
   1307a:	8c e4       	ldi	r24, 0x4C	; 76
   1307c:	9a e1       	ldi	r25, 0x1A	; 26
   1307e:	9c 01       	movw	r18, r24
   13080:	40 e0       	ldi	r20, 0x00	; 0
   13082:	ce 56       	subi	r28, 0x6E	; 110
   13084:	df 4f       	sbci	r29, 0xFF	; 255
   13086:	28 83       	st	Y, r18
   13088:	39 83       	std	Y+1, r19	; 0x01
   1308a:	4a 83       	std	Y+2, r20	; 0x02
   1308c:	c2 59       	subi	r28, 0x92	; 146
                strncpy(AMIGOp->HEADER.NAME, ptr, sizeof(AMIGOp->HEADER.NAME)-1);
                AMIGOp->HEADER.NAME[sizeof(AMIGOp->HEADER.NAME)-1] = 0;
            }
            else
            {
                printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   1308e:	d0 40       	sbci	r29, 0x00	; 0
   13090:	8b e7       	ldi	r24, 0x7B	; 123
   13092:	9a e1       	ldi	r25, 0x1A	; 26
   13094:	9c 01       	movw	r18, r24
   13096:	40 e0       	ldi	r20, 0x00	; 0
   13098:	cb 56       	subi	r28, 0x6B	; 107
   1309a:	df 4f       	sbci	r29, 0xFF	; 255
   1309c:	28 83       	st	Y, r18
   1309e:	39 83       	std	Y+1, r19	; 0x01
   130a0:	4a 83       	std	Y+2, r20	; 0x02
   130a2:	c5 59       	subi	r28, 0x95	; 149

        case AMIGO_HEADER:
            if( (ind = token(ptr,"DRIVE")) )
            {
                ptr += ind;
                printf("Skipping %s, at line:%d\n", ptr,lines);
   130a4:	d0 40       	sbci	r29, 0x00	; 0
   130a6:	8b ea       	ldi	r24, 0xAB	; 171
   130a8:	9a e1       	ldi	r25, 0x1A	; 26
   130aa:	9c 01       	movw	r18, r24
   130ac:	40 e0       	ldi	r20, 0x00	; 0
   130ae:	c8 56       	subi	r28, 0x68	; 104
   130b0:	df 4f       	sbci	r29, 0xFF	; 255
   130b2:	28 83       	st	Y, r18
   130b4:	39 83       	std	Y+1, r19	; 0x01
   130b6:	4a 83       	std	Y+2, r20	; 0x02
   130b8:	c8 59       	subi	r28, 0x98	; 152
   130ba:	d0 40       	sbci	r29, 0x00	; 0
    cfg = fopen(name, "rb");
    if(cfg == NULL)
    {
        ++errors;
        //FIXME
        perror("Read_Config - open");
   130bc:	2f c0       	rjmp	.+94     	; 0x1311c <Read_Config+0x158>
   130be:	8c ec       	ldi	r24, 0xCC	; 204
   130c0:	9d e0       	ldi	r25, 0x0D	; 13
   130c2:	0e 94 8d 79 	call	0xf31a	; 0xf31a <perror>
        printf("Read_Config: open(%s) failed\n", name);
   130c6:	0f 93       	push	r16
   130c8:	1f 93       	push	r17
   130ca:	83 ea       	ldi	r24, 0xA3	; 163
   130cc:	9c e1       	ldi	r25, 0x1C	; 28
   130ce:	1f 92       	push	r1
   130d0:	9f 93       	push	r25
   130d2:	8f 93       	push	r24
   130d4:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
        set_Config_Defaults();
        return(errors);
   130d8:	0f 90       	pop	r0
   130da:	0f 90       	pop	r0
   130dc:	0f 90       	pop	r0
   130de:	0f 90       	pop	r0
   130e0:	0f 90       	pop	r0
   130e2:	81 e0       	ldi	r24, 0x01	; 1
   130e4:	90 e0       	ldi	r25, 0x00	; 0
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
        ++lines;
   130e6:	eb c7       	rjmp	.+4054   	; 0x140be <Read_Config+0x10fa>
   130e8:	80 91 65 18 	lds	r24, 0x1865	; 0x801865 <lines>
   130ec:	90 91 66 18 	lds	r25, 0x1866	; 0x801866 <lines+0x1>
   130f0:	01 96       	adiw	r24, 0x01	; 1
   130f2:	90 93 66 18 	sts	0x1866, r25	; 0x801866 <lines+0x1>
   130f6:	80 93 65 18 	sts	0x1865, r24	; 0x801865 <lines>

        ptr = str;

        trim_tail(ptr);
   130fa:	ce 01       	movw	r24, r28
   130fc:	01 96       	adiw	r24, 0x01	; 1
   130fe:	0e 94 b0 32 	call	0x6560	; 0x6560 <trim_tail>
        ptr = skipspaces(ptr);
   13102:	ce 01       	movw	r24, r28
   13104:	01 96       	adiw	r24, 0x01	; 1
   13106:	0e 94 c0 32 	call	0x6580	; 0x6580 <skipspaces>
        len = strlen(ptr);
   1310a:	6c 01       	movw	r12, r24
   1310c:	fc 01       	movw	r30, r24
   1310e:	01 90       	ld	r0, Z+
   13110:	00 20       	and	r0, r0
   13112:	e9 f7       	brne	.-6      	; 0x1310e <Read_Config+0x14a>
        if(!len)
   13114:	31 97       	sbiw	r30, 0x01	; 1
   13116:	8e 17       	cp	r24, r30
   13118:	9f 07       	cpc	r25, r31
        printf("Read_Config: open(%s) failed\n", name);
        set_Config_Defaults();
        return(errors);
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   1311a:	79 f4       	brne	.+30     	; 0x1313a <Read_Config+0x176>
   1311c:	c9 57       	subi	r28, 0x79	; 121
   1311e:	df 4f       	sbci	r29, 0xFF	; 255
   13120:	48 81       	ld	r20, Y
   13122:	59 81       	ldd	r21, Y+1	; 0x01
   13124:	c7 58       	subi	r28, 0x87	; 135
   13126:	d0 40       	sbci	r29, 0x00	; 0
   13128:	6e e7       	ldi	r22, 0x7E	; 126
   1312a:	70 e0       	ldi	r23, 0x00	; 0
   1312c:	ce 01       	movw	r24, r28
   1312e:	01 96       	adiw	r24, 0x01	; 1
   13130:	0e 94 74 77 	call	0xeee8	; 0xeee8 <fgets>
   13134:	89 2b       	or	r24, r25
   13136:	c1 f6       	brne	.-80     	; 0x130e8 <Read_Config+0x124>
        ptr = skipspaces(ptr);
        len = strlen(ptr);
        if(!len)
            continue;
        // Skip comments
        if(*ptr == '#')
   13138:	73 c7       	rjmp	.+3814   	; 0x14020 <Read_Config+0x105c>
   1313a:	dc 01       	movw	r26, r24
   1313c:	8c 91       	ld	r24, X
   1313e:	83 32       	cpi	r24, 0x23	; 35
            continue;

        //FIXME check for state and last state
        if(token(ptr,"END"))
   13140:	69 f3       	breq	.-38     	; 0x1311c <Read_Config+0x158>
   13142:	6f ed       	ldi	r22, 0xDF	; 223
   13144:	7d e0       	ldi	r23, 0x0D	; 13
   13146:	c6 01       	movw	r24, r12
   13148:	0e 94 43 34 	call	0x6886	; 0x6886 <token>
        {
            state = pop_state();
   1314c:	89 2b       	or	r24, r25
   1314e:	19 f0       	breq	.+6      	; 0x13156 <Read_Config+0x192>
   13150:	42 dd       	rcall	.-1404   	; 0x12bd6 <pop_state>
            continue;
   13152:	3c 01       	movw	r6, r24
        }

        switch(state)
   13154:	e3 cf       	rjmp	.-58     	; 0x1311c <Read_Config+0x158>
   13156:	b0 e1       	ldi	r27, 0x10	; 16
   13158:	6b 16       	cp	r6, r27
   1315a:	71 04       	cpc	r7, r1
   1315c:	08 f0       	brcs	.+2      	; 0x13160 <Read_Config+0x19c>
   1315e:	40 c7       	rjmp	.+3712   	; 0x13fe0 <Read_Config+0x101c>
   13160:	f3 01       	movw	r30, r6
   13162:	e0 53       	subi	r30, 0x30	; 48
   13164:	ff 4f       	sbci	r31, 0xFF	; 255
   13166:	0c 94 af e5 	jmp	0x1cb5e	; 0x1cb5e <__tablejump2__>
        {
        case START_STATE:

            if( (ind = token(ptr,"SS80_DEFAULT") ))
   1316a:	63 ee       	ldi	r22, 0xE3	; 227
   1316c:	7d e0       	ldi	r23, 0x0D	; 13
   1316e:	c6 01       	movw	r24, r12
   13170:	0e 94 43 34 	call	0x6886	; 0x6886 <token>
            {
                push_state(state);
   13174:	89 2b       	or	r24, r25
   13176:	a1 f0       	breq	.+40     	; 0x131a0 <Read_Config+0x1dc>
				state = SS80_STATE;
				index = alloc_device(SS80_DEFAULT_TYPE);
   13178:	80 e0       	ldi	r24, 0x00	; 0
   1317a:	90 e0       	ldi	r25, 0x00	; 0
   1317c:	13 dd       	rcall	.-1498   	; 0x12ba4 <push_state>
   1317e:	82 e0       	ldi	r24, 0x02	; 2
   13180:	90 e0       	ldi	r25, 0x00	; 0
				if(index == -1)
   13182:	39 dc       	rcall	.-1934   	; 0x129f6 <alloc_device>
   13184:	4c 01       	movw	r8, r24
					state = START_STATE;
				else
					SS80p = (SS80DiskType *) Devices[index].dev;
   13186:	01 96       	adiw	r24, 0x01	; 1
   13188:	49 f2       	breq	.-110    	; 0x1311c <Read_Config+0x158>
   1318a:	8b e2       	ldi	r24, 0x2B	; 43
   1318c:	88 9d       	mul	r24, r8
   1318e:	f0 01       	movw	r30, r0
   13190:	89 9d       	mul	r24, r9
   13192:	f0 0d       	add	r31, r0
   13194:	11 24       	eor	r1, r1
   13196:	ec 50       	subi	r30, 0x0C	; 12
   13198:	f2 4e       	sbci	r31, 0xE2	; 226
   1319a:	47 a0       	ldd	r4, Z+39	; 0x27
            }

            else if( (ind = token(ptr,"SS80")) || (ind = token(ptr, "CS80")) )
   1319c:	50 a4       	ldd	r5, Z+40	; 0x28
   1319e:	2c c0       	rjmp	.+88     	; 0x131f8 <Read_Config+0x234>
   131a0:	60 ef       	ldi	r22, 0xF0	; 240
   131a2:	7d e0       	ldi	r23, 0x0D	; 13
   131a4:	c6 01       	movw	r24, r12
   131a6:	0e 94 43 34 	call	0x6886	; 0x6886 <token>
   131aa:	8c 01       	movw	r16, r24
   131ac:	89 2b       	or	r24, r25
   131ae:	41 f4       	brne	.+16     	; 0x131c0 <Read_Config+0x1fc>
   131b0:	65 ef       	ldi	r22, 0xF5	; 245
   131b2:	7d e0       	ldi	r23, 0x0D	; 13
   131b4:	c6 01       	movw	r24, r12
   131b6:	0e 94 43 34 	call	0x6886	; 0x6886 <token>
            {
                push_state(state);
   131ba:	8c 01       	movw	r16, r24
   131bc:	89 2b       	or	r24, r25
   131be:	01 f1       	breq	.+64     	; 0x13200 <Read_Config+0x23c>
				state = SS80_STATE;
				index = alloc_device(SS80_TYPE);
   131c0:	80 e0       	ldi	r24, 0x00	; 0
   131c2:	90 e0       	ldi	r25, 0x00	; 0
   131c4:	ef dc       	rcall	.-1570   	; 0x12ba4 <push_state>
   131c6:	83 e0       	ldi	r24, 0x03	; 3
   131c8:	90 e0       	ldi	r25, 0x00	; 0
				if(index == -1)
   131ca:	15 dc       	rcall	.-2006   	; 0x129f6 <alloc_device>
   131cc:	4c 01       	movw	r8, r24
   131ce:	01 96       	adiw	r24, 0x01	; 1
				{
					state = START_STATE;
				}
				else
				{
					SS80p = (SS80DiskType *) Devices[index].dev;
   131d0:	09 f4       	brne	.+2      	; 0x131d4 <Read_Config+0x210>
   131d2:	a4 cf       	rjmp	.-184    	; 0x1311c <Read_Config+0x158>
   131d4:	8b e2       	ldi	r24, 0x2B	; 43
   131d6:	88 9d       	mul	r24, r8
   131d8:	f0 01       	movw	r30, r0
   131da:	89 9d       	mul	r24, r9
   131dc:	f0 0d       	add	r31, r0
   131de:	11 24       	eor	r1, r1
   131e0:	ec 50       	subi	r30, 0x0C	; 12
   131e2:	f2 4e       	sbci	r31, 0xE2	; 226
					ptr += ind;
					ptr = skipspaces(ptr);
   131e4:	47 a0       	ldd	r4, Z+39	; 0x27
   131e6:	50 a4       	ldd	r5, Z+40	; 0x28
   131e8:	c6 01       	movw	r24, r12
   131ea:	80 0f       	add	r24, r16
					hpdir_set_parameters(index,ptr);	// Also sets Devices[index].model
   131ec:	91 1f       	adc	r25, r17
   131ee:	0e 94 c0 32 	call	0x6580	; 0x6580 <skipspaces>
   131f2:	bc 01       	movw	r22, r24
            }

            else if( (ind = token(ptr,"SS80")) || (ind = token(ptr, "CS80")) )
            {
                push_state(state);
				state = SS80_STATE;
   131f4:	c4 01       	movw	r24, r8
   131f6:	41 de       	rcall	.-894    	; 0x12e7a <hpdir_set_parameters>
   131f8:	66 24       	eor	r6, r6
   131fa:	63 94       	inc	r6
					hpdir_set_parameters(index,ptr);	// Also sets Devices[index].model
				}
			}

#ifdef AMIGO
            else if( (ind = token(ptr,"AMIGO")) )
   131fc:	71 2c       	mov	r7, r1
   131fe:	8e cf       	rjmp	.-228    	; 0x1311c <Read_Config+0x158>
   13200:	6a ef       	ldi	r22, 0xFA	; 250
   13202:	7d e0       	ldi	r23, 0x0D	; 13
   13204:	c6 01       	movw	r24, r12
   13206:	0e 94 43 34 	call	0x6886	; 0x6886 <token>
            {
                push_state(state);
   1320a:	8c 01       	movw	r16, r24
   1320c:	89 2b       	or	r24, r25
   1320e:	01 f1       	breq	.+64     	; 0x13250 <Read_Config+0x28c>
                state = AMIGO_STATE;
                index = alloc_device(AMIGO_TYPE);
   13210:	80 e0       	ldi	r24, 0x00	; 0
   13212:	90 e0       	ldi	r25, 0x00	; 0
   13214:	c7 dc       	rcall	.-1650   	; 0x12ba4 <push_state>
   13216:	81 e0       	ldi	r24, 0x01	; 1
   13218:	90 e0       	ldi	r25, 0x00	; 0
                if(index == -1)
   1321a:	ed db       	rcall	.-2086   	; 0x129f6 <alloc_device>
   1321c:	4c 01       	movw	r8, r24
   1321e:	01 96       	adiw	r24, 0x01	; 1
				{
                    state = START_STATE;
				}
                else
				{
                    AMIGOp = (AMIGODiskType *) Devices[index].dev;
   13220:	09 f4       	brne	.+2      	; 0x13224 <Read_Config+0x260>
   13222:	7c cf       	rjmp	.-264    	; 0x1311c <Read_Config+0x158>
   13224:	8b e2       	ldi	r24, 0x2B	; 43
   13226:	88 9d       	mul	r24, r8
   13228:	f0 01       	movw	r30, r0
   1322a:	89 9d       	mul	r24, r9
   1322c:	f0 0d       	add	r31, r0
   1322e:	11 24       	eor	r1, r1
   13230:	ec 50       	subi	r30, 0x0C	; 12
					ptr += ind;
					ptr = skipspaces(ptr);
   13232:	f2 4e       	sbci	r31, 0xE2	; 226
   13234:	27 a0       	ldd	r2, Z+39	; 0x27
   13236:	30 a4       	ldd	r3, Z+40	; 0x28
   13238:	c6 01       	movw	r24, r12
   1323a:	80 0f       	add	r24, r16
					hpdir_set_parameters(index,ptr);	// Also sets Devices[index.model
   1323c:	91 1f       	adc	r25, r17
   1323e:	0e 94 c0 32 	call	0x6580	; 0x6580 <skipspaces>
   13242:	bc 01       	movw	r22, r24

#ifdef AMIGO
            else if( (ind = token(ptr,"AMIGO")) )
            {
                push_state(state);
                state = AMIGO_STATE;
   13244:	c4 01       	movw	r24, r8
   13246:	19 de       	rcall	.-974    	; 0x12e7a <hpdir_set_parameters>
   13248:	aa e0       	ldi	r26, 0x0A	; 10
					ptr = skipspaces(ptr);
					hpdir_set_parameters(index,ptr);	// Also sets Devices[index.model
				}
			}
#endif
            else if(token(ptr,"PRINTER"))
   1324a:	6a 2e       	mov	r6, r26
   1324c:	71 2c       	mov	r7, r1
   1324e:	66 cf       	rjmp	.-308    	; 0x1311c <Read_Config+0x158>
   13250:	60 e0       	ldi	r22, 0x00	; 0
   13252:	7e e0       	ldi	r23, 0x0E	; 14
   13254:	c6 01       	movw	r24, r12
            {
                push_state(state);
   13256:	0e 94 43 34 	call	0x6886	; 0x6886 <token>
   1325a:	89 2b       	or	r24, r25
   1325c:	f1 f0       	breq	.+60     	; 0x1329a <Read_Config+0x2d6>
                state = PRINTER_STATE;
                index = alloc_device(PRINTER_TYPE);
   1325e:	80 e0       	ldi	r24, 0x00	; 0
   13260:	90 e0       	ldi	r25, 0x00	; 0
   13262:	a0 dc       	rcall	.-1728   	; 0x12ba4 <push_state>
   13264:	84 e0       	ldi	r24, 0x04	; 4
   13266:	90 e0       	ldi	r25, 0x00	; 0
                if(index == -1)
   13268:	c6 db       	rcall	.-2164   	; 0x129f6 <alloc_device>
   1326a:	4c 01       	movw	r8, r24
   1326c:	01 96       	adiw	r24, 0x01	; 1
                    state = START_STATE;
                else
                    PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
   1326e:	09 f4       	brne	.+2      	; 0x13272 <Read_Config+0x2ae>
   13270:	55 cf       	rjmp	.-342    	; 0x1311c <Read_Config+0x158>
   13272:	8b e2       	ldi	r24, 0x2B	; 43
   13274:	88 9d       	mul	r24, r8
   13276:	f0 01       	movw	r30, r0
   13278:	89 9d       	mul	r24, r9
   1327a:	f0 0d       	add	r31, r0
   1327c:	11 24       	eor	r1, r1
   1327e:	ec 50       	subi	r30, 0x0C	; 12
   13280:	f2 4e       	sbci	r31, 0xE2	; 226
   13282:	87 a1       	ldd	r24, Z+39	; 0x27
   13284:	90 a5       	ldd	r25, Z+40	; 0x28
   13286:	cb 57       	subi	r28, 0x7B	; 123
   13288:	df 4f       	sbci	r29, 0xFF	; 255
   1328a:	99 83       	std	Y+1, r25	; 0x01
   1328c:	88 83       	st	Y, r24
			}
#endif
            else if(token(ptr,"PRINTER"))
            {
                push_state(state);
                state = PRINTER_STATE;
   1328e:	c5 58       	subi	r28, 0x85	; 133
   13290:	d0 40       	sbci	r29, 0x00	; 0
   13292:	fe e0       	ldi	r31, 0x0E	; 14
   13294:	6f 2e       	mov	r6, r31
                if(index == -1)
                    state = START_STATE;
                else
                    PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
            }
            else if( (ind = token(ptr,"DEBUG")) )
   13296:	71 2c       	mov	r7, r1
   13298:	41 cf       	rjmp	.-382    	; 0x1311c <Read_Config+0x158>
   1329a:	68 e0       	ldi	r22, 0x08	; 8
   1329c:	7e e0       	ldi	r23, 0x0E	; 14
   1329e:	c6 01       	movw	r24, r12
   132a0:	0e 94 43 34 	call	0x6886	; 0x6886 <token>
            {
                ptr += ind;
                if ( assign_value(ptr, 0, 65535, &val) )
   132a4:	00 97       	sbiw	r24, 0x00	; 0
   132a6:	e1 f0       	breq	.+56     	; 0x132e0 <Read_Config+0x31c>
   132a8:	de 01       	movw	r26, r28
   132aa:	af 57       	subi	r26, 0x7F	; 127
   132ac:	bf 4f       	sbci	r27, 0xFF	; 255
   132ae:	7d 01       	movw	r14, r26
   132b0:	0f ef       	ldi	r16, 0xFF	; 255
   132b2:	1f ef       	ldi	r17, 0xFF	; 255
   132b4:	20 e0       	ldi	r18, 0x00	; 0
   132b6:	30 e0       	ldi	r19, 0x00	; 0
   132b8:	40 e0       	ldi	r20, 0x00	; 0
   132ba:	50 e0       	ldi	r21, 0x00	; 0
   132bc:	ba 01       	movw	r22, r20
   132be:	8c 0d       	add	r24, r12
   132c0:	9d 1d       	adc	r25, r13
   132c2:	a0 dc       	rcall	.-1728   	; 0x12c04 <assign_value>
   132c4:	89 2b       	or	r24, r25
                    debuglevel = val;
   132c6:	09 f4       	brne	.+2      	; 0x132ca <Read_Config+0x306>
   132c8:	29 cf       	rjmp	.-430    	; 0x1311c <Read_Config+0x158>
   132ca:	cf 57       	subi	r28, 0x7F	; 127
   132cc:	df 4f       	sbci	r29, 0xFF	; 255
   132ce:	88 81       	ld	r24, Y
   132d0:	99 81       	ldd	r25, Y+1	; 0x01
   132d2:	c1 58       	subi	r28, 0x81	; 129
   132d4:	d0 40       	sbci	r29, 0x00	; 0
   132d6:	90 93 be 01 	sts	0x01BE, r25	; 0x8001be <debuglevel+0x1>
   132da:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <debuglevel>
            }
            else if( (ind = token(ptr,"PRINTER_DEFAULT_ADDRESS")) )
   132de:	1e cf       	rjmp	.-452    	; 0x1311c <Read_Config+0x158>
   132e0:	6e e0       	ldi	r22, 0x0E	; 14
   132e2:	7e e0       	ldi	r23, 0x0E	; 14
   132e4:	c6 01       	movw	r24, r12
   132e6:	0e 94 43 34 	call	0x6886	; 0x6886 <token>
   132ea:	30 91 66 18 	lds	r19, 0x1866	; 0x801866 <lines+0x1>
   132ee:	20 91 65 18 	lds	r18, 0x1865	; 0x801865 <lines>
            {
                ptr += ind;
                //FIXME REMOVE from config
                printf("Skipping %s, at line:%d\n", ptr,lines);
   132f2:	00 97       	sbiw	r24, 0x00	; 0
   132f4:	61 f0       	breq	.+24     	; 0x1330e <Read_Config+0x34a>
   132f6:	3f 93       	push	r19
   132f8:	2f 93       	push	r18
   132fa:	c8 0e       	add	r12, r24
   132fc:	d9 1e       	adc	r13, r25
   132fe:	df 92       	push	r13
   13300:	cf 92       	push	r12
   13302:	8a e8       	ldi	r24, 0x8A	; 138
   13304:	9c e1       	ldi	r25, 0x1C	; 28
   13306:	1f 92       	push	r1
   13308:	9f 93       	push	r25
            }
            else
            {
                printf("Unexpected START token: %s, at line:%d\n", ptr,lines);
   1330a:	8f 93       	push	r24
   1330c:	ca c4       	rjmp	.+2452   	; 0x13ca2 <Read_Config+0xcde>
   1330e:	3f 93       	push	r19
   13310:	2f 93       	push	r18
   13312:	df 92       	push	r13
   13314:	cf 92       	push	r12
                ++errors;
            }
            break;

        case PRINTER_STATE:
            if(token(ptr,"CONFIG"))
   13316:	82 e6       	ldi	r24, 0x62	; 98
   13318:	9c e1       	ldi	r25, 0x1C	; 28
   1331a:	b0 c0       	rjmp	.+352    	; 0x1347c <Read_Config+0x4b8>
   1331c:	66 e2       	ldi	r22, 0x26	; 38
   1331e:	7e e0       	ldi	r23, 0x0E	; 14
   13320:	c6 01       	movw	r24, r12
   13322:	0e 94 43 34 	call	0x6886	; 0x6886 <token>
            {
                push_state(state);
   13326:	89 2b       	or	r24, r25
   13328:	39 f0       	breq	.+14     	; 0x13338 <Read_Config+0x374>
   1332a:	8e e0       	ldi	r24, 0x0E	; 14
                state = PRINTER_CONFIG;
   1332c:	90 e0       	ldi	r25, 0x00	; 0
   1332e:	3a dc       	rcall	.-1932   	; 0x12ba4 <push_state>
   13330:	ef e0       	ldi	r30, 0x0F	; 15
   13332:	6e 2e       	mov	r6, r30
            }
            else
            {
                printf("Unexpected PRINTER token: %s, at line:%d\n", ptr,lines);
   13334:	71 2c       	mov	r7, r1
   13336:	f2 ce       	rjmp	.-540    	; 0x1311c <Read_Config+0x158>
   13338:	80 91 66 18 	lds	r24, 0x1866	; 0x801866 <lines+0x1>
   1333c:	8f 93       	push	r24
   1333e:	80 91 65 18 	lds	r24, 0x1865	; 0x801865 <lines>
   13342:	8f 93       	push	r24
   13344:	df 92       	push	r13
   13346:	cf 92       	push	r12
   13348:	88 e3       	ldi	r24, 0x38	; 56
                ++errors;
            }
            break;

        case PRINTER_CONFIG:
            if( (ind = token(ptr,"ADDRESS")) )
   1334a:	9c e1       	ldi	r25, 0x1C	; 28
   1334c:	88 c4       	rjmp	.+2320   	; 0x13c5e <Read_Config+0xc9a>
   1334e:	6e e1       	ldi	r22, 0x1E	; 30
   13350:	7e e0       	ldi	r23, 0x0E	; 14
   13352:	c6 01       	movw	r24, r12
   13354:	0e 94 43 34 	call	0x6886	; 0x6886 <token>
            {
                ptr += ind;
                
                tmp = 0xff;
                if (!assign_value(ptr, 0, 14, &val) )
   13358:	00 97       	sbiw	r24, 0x00	; 0
   1335a:	69 f1       	breq	.+90     	; 0x133b6 <Read_Config+0x3f2>
   1335c:	de 01       	movw	r26, r28
   1335e:	af 57       	subi	r26, 0x7F	; 127
   13360:	bf 4f       	sbci	r27, 0xFF	; 255
   13362:	7d 01       	movw	r14, r26
   13364:	0e e0       	ldi	r16, 0x0E	; 14
   13366:	10 e0       	ldi	r17, 0x00	; 0
   13368:	20 e0       	ldi	r18, 0x00	; 0
   1336a:	30 e0       	ldi	r19, 0x00	; 0
   1336c:	40 e0       	ldi	r20, 0x00	; 0
   1336e:	50 e0       	ldi	r21, 0x00	; 0
   13370:	ba 01       	movw	r22, r20
   13372:	8c 0d       	add	r24, r12
   13374:	9d 1d       	adc	r25, r13
   13376:	46 dc       	rcall	.-1908   	; 0x12c04 <assign_value>
                    ++errors;
   13378:	89 2b       	or	r24, r25
   1337a:	29 f4       	brne	.+10     	; 0x13386 <Read_Config+0x3c2>
   1337c:	bf ef       	ldi	r27, 0xFF	; 255
        case PRINTER_CONFIG:
            if( (ind = token(ptr,"ADDRESS")) )
            {
                ptr += ind;
                
                tmp = 0xff;
   1337e:	ab 1a       	sub	r10, r27
   13380:	bb 0a       	sbc	r11, r27
                if (!assign_value(ptr, 0, 14, &val) )
                    ++errors;
                else
                    tmp = val;
   13382:	8f ef       	ldi	r24, 0xFF	; 255
   13384:	05 c0       	rjmp	.+10     	; 0x13390 <Read_Config+0x3cc>
   13386:	cf 57       	subi	r28, 0x7F	; 127
   13388:	df 4f       	sbci	r29, 0xFF	; 255
   1338a:	88 81       	ld	r24, Y
                Devices[index].ADDRESS = tmp;
   1338c:	c1 58       	subi	r28, 0x81	; 129
   1338e:	d0 40       	sbci	r29, 0x00	; 0
   13390:	9b e2       	ldi	r25, 0x2B	; 43
   13392:	98 9d       	mul	r25, r8
   13394:	f0 01       	movw	r30, r0
   13396:	99 9d       	mul	r25, r9
   13398:	f0 0d       	add	r31, r0
   1339a:	11 24       	eor	r1, r1
   1339c:	ec 50       	subi	r30, 0x0C	; 12
                PRINTERp->HEADER.ADDRESS  = tmp;
   1339e:	f2 4e       	sbci	r31, 0xE2	; 226
   133a0:	81 83       	std	Z+1, r24	; 0x01
   133a2:	cb 57       	subi	r28, 0x7B	; 123
   133a4:	df 4f       	sbci	r29, 0xFF	; 255
   133a6:	a8 81       	ld	r26, Y
   133a8:	b9 81       	ldd	r27, Y+1	; 0x01
   133aa:	c5 58       	subi	r28, 0x85	; 133
                // NO PPR
                Devices[index].PPR = 0xff;
   133ac:	d0 40       	sbci	r29, 0x00	; 0
   133ae:	8c 93       	st	X, r24
   133b0:	8f ef       	ldi	r24, 0xFF	; 255
                PRINTERp->HEADER.PPR = 0xff;
            }
            else
            {
                printf("Unexpected PRINTER CONFIG token: %s, at line:%d\n", ptr,lines);
   133b2:	82 83       	std	Z+2, r24	; 0x02
   133b4:	be c0       	rjmp	.+380    	; 0x13532 <Read_Config+0x56e>
   133b6:	80 91 66 18 	lds	r24, 0x1866	; 0x801866 <lines+0x1>
   133ba:	8f 93       	push	r24
   133bc:	80 91 65 18 	lds	r24, 0x1865	; 0x801865 <lines>
   133c0:	8f 93       	push	r24
   133c2:	df 92       	push	r13
   133c4:	cf 92       	push	r12
   133c6:	87 e0       	ldi	r24, 0x07	; 7
   133c8:	9c e1       	ldi	r25, 0x1C	; 28
   133ca:	1f 92       	push	r1
   133cc:	9f 93       	push	r25
                ++errors;
   133ce:	8f 93       	push	r24
   133d0:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   133d4:	bf ef       	ldi	r27, 0xFF	; 255
            }
            break;

        case SS80_STATE:
            if(token(ptr,"HEADER"))
   133d6:	ab 1a       	sub	r10, r27
   133d8:	bb 0a       	sbc	r11, r27
   133da:	1c c6       	rjmp	.+3128   	; 0x14014 <Read_Config+0x1050>
   133dc:	6d e2       	ldi	r22, 0x2D	; 45
   133de:	7e e0       	ldi	r23, 0x0E	; 14
   133e0:	c6 01       	movw	r24, r12
   133e2:	0e 94 43 34 	call	0x6886	; 0x6886 <token>
            {
                push_state(state);
   133e6:	89 2b       	or	r24, r25
   133e8:	39 f0       	breq	.+14     	; 0x133f8 <Read_Config+0x434>
                state = SS80_HEADER;
   133ea:	81 e0       	ldi	r24, 0x01	; 1
   133ec:	90 e0       	ldi	r25, 0x00	; 0
   133ee:	da db       	rcall	.-2124   	; 0x12ba4 <push_state>
   133f0:	72 e0       	ldi	r23, 0x02	; 2
            }
            else if(token(ptr,"CONFIG"))
   133f2:	67 2e       	mov	r6, r23
   133f4:	71 2c       	mov	r7, r1
   133f6:	92 ce       	rjmp	.-732    	; 0x1311c <Read_Config+0x158>
   133f8:	66 e2       	ldi	r22, 0x26	; 38
   133fa:	7e e0       	ldi	r23, 0x0E	; 14
   133fc:	c6 01       	movw	r24, r12
            {
                push_state(state);
   133fe:	0e 94 43 34 	call	0x6886	; 0x6886 <token>
   13402:	89 2b       	or	r24, r25
                state = SS80_CONFIG;
   13404:	39 f0       	breq	.+14     	; 0x13414 <Read_Config+0x450>
   13406:	81 e0       	ldi	r24, 0x01	; 1
   13408:	90 e0       	ldi	r25, 0x00	; 0
   1340a:	cc db       	rcall	.-2152   	; 0x12ba4 <push_state>
            }
            else if(token(ptr,"CONTROLLER"))
   1340c:	63 e0       	ldi	r22, 0x03	; 3
   1340e:	66 2e       	mov	r6, r22
   13410:	71 2c       	mov	r7, r1
   13412:	84 ce       	rjmp	.-760    	; 0x1311c <Read_Config+0x158>
   13414:	64 e3       	ldi	r22, 0x34	; 52
   13416:	7e e0       	ldi	r23, 0x0E	; 14
            {
                push_state(state);
   13418:	c6 01       	movw	r24, r12
   1341a:	0e 94 43 34 	call	0x6886	; 0x6886 <token>
   1341e:	89 2b       	or	r24, r25
                state = SS80_CONTROLLER;
   13420:	39 f0       	breq	.+14     	; 0x13430 <Read_Config+0x46c>
   13422:	81 e0       	ldi	r24, 0x01	; 1
   13424:	90 e0       	ldi	r25, 0x00	; 0
   13426:	be db       	rcall	.-2180   	; 0x12ba4 <push_state>
            }
            else if(token(ptr,"UNIT"))
   13428:	54 e0       	ldi	r21, 0x04	; 4
   1342a:	65 2e       	mov	r6, r21
   1342c:	71 2c       	mov	r7, r1
   1342e:	76 ce       	rjmp	.-788    	; 0x1311c <Read_Config+0x158>
   13430:	6f e3       	ldi	r22, 0x3F	; 63
   13432:	7e e0       	ldi	r23, 0x0E	; 14
            {
                push_state(state);
   13434:	c6 01       	movw	r24, r12
   13436:	0e 94 43 34 	call	0x6886	; 0x6886 <token>
   1343a:	89 2b       	or	r24, r25
                state = SS80_UNIT;
   1343c:	39 f0       	breq	.+14     	; 0x1344c <Read_Config+0x488>
   1343e:	81 e0       	ldi	r24, 0x01	; 1
   13440:	90 e0       	ldi	r25, 0x00	; 0
   13442:	b0 db       	rcall	.-2208   	; 0x12ba4 <push_state>
            }
            else if(token(ptr,"VOLUME"))
   13444:	45 e0       	ldi	r20, 0x05	; 5
   13446:	64 2e       	mov	r6, r20
   13448:	71 2c       	mov	r7, r1
   1344a:	68 ce       	rjmp	.-816    	; 0x1311c <Read_Config+0x158>
   1344c:	64 e4       	ldi	r22, 0x44	; 68
   1344e:	7e e0       	ldi	r23, 0x0E	; 14
   13450:	c6 01       	movw	r24, r12
            {
                push_state(state);
   13452:	0e 94 43 34 	call	0x6886	; 0x6886 <token>
   13456:	89 2b       	or	r24, r25
   13458:	39 f0       	breq	.+14     	; 0x13468 <Read_Config+0x4a4>
                state = SS80_VOLUME;
   1345a:	81 e0       	ldi	r24, 0x01	; 1
   1345c:	90 e0       	ldi	r25, 0x00	; 0
   1345e:	a2 db       	rcall	.-2236   	; 0x12ba4 <push_state>
   13460:	36 e0       	ldi	r19, 0x06	; 6
            }
            else
            {
                printf("Unexpected SS80 START token: %s, at line:%d\n", ptr,lines);
   13462:	63 2e       	mov	r6, r19
   13464:	71 2c       	mov	r7, r1
   13466:	5a ce       	rjmp	.-844    	; 0x1311c <Read_Config+0x158>
   13468:	80 91 66 18 	lds	r24, 0x1866	; 0x801866 <lines+0x1>
   1346c:	8f 93       	push	r24
   1346e:	80 91 65 18 	lds	r24, 0x1865	; 0x801865 <lines>
   13472:	8f 93       	push	r24
   13474:	df 92       	push	r13
   13476:	cf 92       	push	r12
   13478:	8a ed       	ldi	r24, 0xDA	; 218
   1347a:	9b e1       	ldi	r25, 0x1B	; 27
            }
            break;


        case SS80_HEADER:
            if( (ind = token(ptr,"ADDRESS")) )
   1347c:	1f 92       	push	r1
   1347e:	9f 93       	push	r25
   13480:	8f 93       	push	r24
   13482:	a8 c5       	rjmp	.+2896   	; 0x13fd4 <Read_Config+0x1010>
   13484:	6e e1       	ldi	r22, 0x1E	; 30
   13486:	7e e0       	ldi	r23, 0x0E	; 14
            {
                ptr += ind;
                tmp = 0xff;
                if (!assign_value(ptr, 0, 30, &val) )
   13488:	c6 01       	movw	r24, r12
   1348a:	0e 94 43 34 	call	0x6886	; 0x6886 <token>
   1348e:	00 97       	sbiw	r24, 0x00	; 0
   13490:	29 f1       	breq	.+74     	; 0x134dc <Read_Config+0x518>
   13492:	de 01       	movw	r26, r28
   13494:	af 57       	subi	r26, 0x7F	; 127
   13496:	bf 4f       	sbci	r27, 0xFF	; 255
   13498:	7d 01       	movw	r14, r26
   1349a:	0e e1       	ldi	r16, 0x1E	; 30
   1349c:	10 e0       	ldi	r17, 0x00	; 0
   1349e:	20 e0       	ldi	r18, 0x00	; 0
   134a0:	30 e0       	ldi	r19, 0x00	; 0
   134a2:	40 e0       	ldi	r20, 0x00	; 0
   134a4:	50 e0       	ldi	r21, 0x00	; 0
   134a6:	ba 01       	movw	r22, r20
   134a8:	8c 0d       	add	r24, r12
                    ++errors;
   134aa:	9d 1d       	adc	r25, r13
   134ac:	ab db       	rcall	.-2218   	; 0x12c04 <assign_value>
   134ae:	89 2b       	or	r24, r25

        case SS80_HEADER:
            if( (ind = token(ptr,"ADDRESS")) )
            {
                ptr += ind;
                tmp = 0xff;
   134b0:	29 f4       	brne	.+10     	; 0x134bc <Read_Config+0x4f8>
   134b2:	bf ef       	ldi	r27, 0xFF	; 255
                if (!assign_value(ptr, 0, 30, &val) )
                    ++errors;
                else
                    tmp = val;
   134b4:	ab 1a       	sub	r10, r27
   134b6:	bb 0a       	sbc	r11, r27
   134b8:	8f ef       	ldi	r24, 0xFF	; 255
   134ba:	05 c0       	rjmp	.+10     	; 0x134c6 <Read_Config+0x502>
   134bc:	cf 57       	subi	r28, 0x7F	; 127
                Devices[index].ADDRESS = tmp;
   134be:	df 4f       	sbci	r29, 0xFF	; 255
   134c0:	88 81       	ld	r24, Y
   134c2:	c1 58       	subi	r28, 0x81	; 129
   134c4:	d0 40       	sbci	r29, 0x00	; 0
   134c6:	9b e2       	ldi	r25, 0x2B	; 43
   134c8:	98 9d       	mul	r25, r8
   134ca:	f0 01       	movw	r30, r0
   134cc:	99 9d       	mul	r25, r9
   134ce:	f0 0d       	add	r31, r0
                SS80p->HEADER.ADDRESS  = tmp;
   134d0:	11 24       	eor	r1, r1
            }
            else if( (ind = token(ptr,"PPR")) )
   134d2:	ec 50       	subi	r30, 0x0C	; 12
   134d4:	f2 4e       	sbci	r31, 0xE2	; 226
   134d6:	81 83       	std	Z+1, r24	; 0x01
   134d8:	f2 01       	movw	r30, r4
   134da:	03 c3       	rjmp	.+1542   	; 0x13ae2 <Read_Config+0xb1e>
   134dc:	6b e4       	ldi	r22, 0x4B	; 75
   134de:	7e e0       	ldi	r23, 0x0E	; 14
            {
                ptr += ind;
                tmp = 0xff;
                if (!assign_value(ptr, 0, 7, &val) )
   134e0:	c6 01       	movw	r24, r12
   134e2:	0e 94 43 34 	call	0x6886	; 0x6886 <token>
   134e6:	00 97       	sbiw	r24, 0x00	; 0
   134e8:	39 f1       	breq	.+78     	; 0x13538 <Read_Config+0x574>
   134ea:	9e 01       	movw	r18, r28
   134ec:	2f 57       	subi	r18, 0x7F	; 127
   134ee:	3f 4f       	sbci	r19, 0xFF	; 255
   134f0:	79 01       	movw	r14, r18
   134f2:	07 e0       	ldi	r16, 0x07	; 7
   134f4:	10 e0       	ldi	r17, 0x00	; 0
   134f6:	20 e0       	ldi	r18, 0x00	; 0
   134f8:	30 e0       	ldi	r19, 0x00	; 0
   134fa:	40 e0       	ldi	r20, 0x00	; 0
   134fc:	50 e0       	ldi	r21, 0x00	; 0
   134fe:	ba 01       	movw	r22, r20
   13500:	8c 0d       	add	r24, r12
                    ++errors;
   13502:	9d 1d       	adc	r25, r13
   13504:	7f db       	rcall	.-2306   	; 0x12c04 <assign_value>
   13506:	89 2b       	or	r24, r25
                SS80p->HEADER.ADDRESS  = tmp;
            }
            else if( (ind = token(ptr,"PPR")) )
            {
                ptr += ind;
                tmp = 0xff;
   13508:	29 f4       	brne	.+10     	; 0x13514 <Read_Config+0x550>
   1350a:	3f ef       	ldi	r19, 0xFF	; 255
                if (!assign_value(ptr, 0, 7, &val) )
                    ++errors;
                else
                    tmp = val;
   1350c:	a3 1a       	sub	r10, r19
   1350e:	b3 0a       	sbc	r11, r19
   13510:	8f ef       	ldi	r24, 0xFF	; 255
   13512:	05 c0       	rjmp	.+10     	; 0x1351e <Read_Config+0x55a>
   13514:	cf 57       	subi	r28, 0x7F	; 127
                Devices[index].PPR = tmp;
   13516:	df 4f       	sbci	r29, 0xFF	; 255
   13518:	88 81       	ld	r24, Y
   1351a:	c1 58       	subi	r28, 0x81	; 129
   1351c:	d0 40       	sbci	r29, 0x00	; 0
   1351e:	9b e2       	ldi	r25, 0x2B	; 43
   13520:	98 9d       	mul	r25, r8
   13522:	f0 01       	movw	r30, r0
   13524:	99 9d       	mul	r25, r9
   13526:	f0 0d       	add	r31, r0
                SS80p->HEADER.PPR = tmp;
   13528:	11 24       	eor	r1, r1
   1352a:	ec 50       	subi	r30, 0x0C	; 12
   1352c:	f2 4e       	sbci	r31, 0xE2	; 226
   1352e:	82 83       	std	Z+2, r24	; 0x02
            }
            else if( (ind = token(ptr,"FILE")) )
   13530:	d2 01       	movw	r26, r4
   13532:	11 96       	adiw	r26, 0x01	; 1
   13534:	8c 93       	st	X, r24
   13536:	f2 cd       	rjmp	.-1052   	; 0x1311c <Read_Config+0x158>
   13538:	6f e4       	ldi	r22, 0x4F	; 79
   1353a:	7e e0       	ldi	r23, 0x0E	; 14
   1353c:	c6 01       	movw	r24, r12
            {
                ptr += ind;
                ptr = skipspaces(ptr);
   1353e:	0e 94 43 34 	call	0x6886	; 0x6886 <token>
   13542:	00 97       	sbiw	r24, 0x00	; 0
   13544:	a1 f0       	breq	.+40     	; 0x1356e <Read_Config+0x5aa>
                if(*ptr == '=')
   13546:	8c 0d       	add	r24, r12
   13548:	9d 1d       	adc	r25, r13
   1354a:	0e 94 c0 32 	call	0x6580	; 0x6580 <skipspaces>
                {
                    ++ptr;
                    ptr = skipspaces(ptr);
   1354e:	fc 01       	movw	r30, r24
   13550:	20 81       	ld	r18, Z
   13552:	2d 33       	cpi	r18, 0x3D	; 61
                }
                strncpy(SS80p->HEADER.NAME,ptr, sizeof(SS80p->HEADER.NAME)-1);
   13554:	19 f4       	brne	.+6      	; 0x1355c <Read_Config+0x598>
   13556:	01 96       	adiw	r24, 0x01	; 1
   13558:	0e 94 c0 32 	call	0x6580	; 0x6580 <skipspaces>
   1355c:	40 e2       	ldi	r20, 0x20	; 32
   1355e:	50 e0       	ldi	r21, 0x00	; 0
   13560:	bc 01       	movw	r22, r24
                SS80p->HEADER.NAME[sizeof(SS80p->HEADER.NAME)-1] = 0;
   13562:	c2 01       	movw	r24, r4
   13564:	02 96       	adiw	r24, 0x02	; 2
            }
            else
            {
                printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   13566:	0e 94 61 32 	call	0x64c2	; 0x64c2 <strncpy>
   1356a:	d2 01       	movw	r26, r4
   1356c:	12 c4       	rjmp	.+2084   	; 0x13d92 <Read_Config+0xdce>
   1356e:	80 91 66 18 	lds	r24, 0x1866	; 0x801866 <lines+0x1>
   13572:	8f 93       	push	r24
   13574:	80 91 65 18 	lds	r24, 0x1865	; 0x801865 <lines>
   13578:	8f 93       	push	r24
                ++errors;
            }
            break;

        case SS80_CONFIG:
            if( (ind = token(ptr,"ID")) )
   1357a:	df 92       	push	r13
   1357c:	cf 92       	push	r12
   1357e:	8c ea       	ldi	r24, 0xAC	; 172
   13580:	9b e1       	ldi	r25, 0x1B	; 27
   13582:	23 cf       	rjmp	.-442    	; 0x133ca <Read_Config+0x406>
   13584:	64 e5       	ldi	r22, 0x54	; 84
   13586:	7e e0       	ldi	r23, 0x0E	; 14
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val))
   13588:	c6 01       	movw	r24, r12
   1358a:	0e 94 43 34 	call	0x6886	; 0x6886 <token>
   1358e:	00 97       	sbiw	r24, 0x00	; 0
   13590:	f9 f0       	breq	.+62     	; 0x135d0 <Read_Config+0x60c>
   13592:	9e 01       	movw	r18, r28
   13594:	2f 57       	subi	r18, 0x7F	; 127
   13596:	3f 4f       	sbci	r19, 0xFF	; 255
   13598:	79 01       	movw	r14, r18
   1359a:	0f ef       	ldi	r16, 0xFF	; 255
   1359c:	1f ef       	ldi	r17, 0xFF	; 255
   1359e:	20 e0       	ldi	r18, 0x00	; 0
   135a0:	30 e0       	ldi	r19, 0x00	; 0
   135a2:	40 e0       	ldi	r20, 0x00	; 0
   135a4:	50 e0       	ldi	r21, 0x00	; 0
   135a6:	ba 01       	movw	r22, r20
   135a8:	8c 0d       	add	r24, r12
                    ++errors;
   135aa:	9d 1d       	adc	r25, r13
   135ac:	2b db       	rcall	.-2474   	; 0x12c04 <assign_value>
   135ae:	89 2b       	or	r24, r25
                SS80p->CONFIG.ID = val;
   135b0:	19 f4       	brne	.+6      	; 0x135b8 <Read_Config+0x5f4>
   135b2:	3f ef       	ldi	r19, 0xFF	; 255
   135b4:	a3 1a       	sub	r10, r19
   135b6:	b3 0a       	sbc	r11, r19
   135b8:	cf 57       	subi	r28, 0x7F	; 127
   135ba:	df 4f       	sbci	r29, 0xFF	; 255
   135bc:	88 81       	ld	r24, Y
   135be:	99 81       	ldd	r25, Y+1	; 0x01
   135c0:	c1 58       	subi	r28, 0x81	; 129
   135c2:	d0 40       	sbci	r29, 0x00	; 0
   135c4:	d2 01       	movw	r26, r4
   135c6:	94 96       	adiw	r26, 0x24	; 36
            }
            else
            {
                printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   135c8:	9c 93       	st	X, r25
   135ca:	8e 93       	st	-X, r24
   135cc:	93 97       	sbiw	r26, 0x23	; 35
   135ce:	a6 cd       	rjmp	.-1204   	; 0x1311c <Read_Config+0x158>
   135d0:	80 91 66 18 	lds	r24, 0x1866	; 0x801866 <lines+0x1>
   135d4:	8f 93       	push	r24
   135d6:	80 91 65 18 	lds	r24, 0x1865	; 0x801865 <lines>
   135da:	8f 93       	push	r24
                ++errors;
            }
            break;

        case SS80_CONTROLLER:
            if( (ind = token(ptr,"UNITS_INSTALLED")) )
   135dc:	df 92       	push	r13
   135de:	cf 92       	push	r12
   135e0:	8e e7       	ldi	r24, 0x7E	; 126
   135e2:	9b e1       	ldi	r25, 0x1B	; 27
   135e4:	f2 ce       	rjmp	.-540    	; 0x133ca <Read_Config+0x406>
   135e6:	67 e5       	ldi	r22, 0x57	; 87
   135e8:	7e e0       	ldi	r23, 0x0E	; 14
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val))
   135ea:	c6 01       	movw	r24, r12
   135ec:	0e 94 43 34 	call	0x6886	; 0x6886 <token>
   135f0:	00 97       	sbiw	r24, 0x00	; 0
   135f2:	f9 f0       	breq	.+62     	; 0x13632 <Read_Config+0x66e>
   135f4:	9e 01       	movw	r18, r28
   135f6:	2f 57       	subi	r18, 0x7F	; 127
   135f8:	3f 4f       	sbci	r19, 0xFF	; 255
   135fa:	79 01       	movw	r14, r18
   135fc:	0f ef       	ldi	r16, 0xFF	; 255
   135fe:	1f ef       	ldi	r17, 0xFF	; 255
   13600:	20 e0       	ldi	r18, 0x00	; 0
   13602:	30 e0       	ldi	r19, 0x00	; 0
   13604:	40 e0       	ldi	r20, 0x00	; 0
   13606:	50 e0       	ldi	r21, 0x00	; 0
   13608:	ba 01       	movw	r22, r20
   1360a:	8c 0d       	add	r24, r12
                    ++errors;
   1360c:	9d 1d       	adc	r25, r13
   1360e:	fa da       	rcall	.-2572   	; 0x12c04 <assign_value>
   13610:	89 2b       	or	r24, r25
                SS80p->CONTROLLER.UNITS_INSTALLED = val;
   13612:	19 f4       	brne	.+6      	; 0x1361a <Read_Config+0x656>
   13614:	3f ef       	ldi	r19, 0xFF	; 255
   13616:	a3 1a       	sub	r10, r19
   13618:	b3 0a       	sbc	r11, r19
   1361a:	cf 57       	subi	r28, 0x7F	; 127
   1361c:	df 4f       	sbci	r29, 0xFF	; 255
   1361e:	88 81       	ld	r24, Y
   13620:	99 81       	ldd	r25, Y+1	; 0x01
   13622:	c1 58       	subi	r28, 0x81	; 129
   13624:	d0 40       	sbci	r29, 0x00	; 0
   13626:	d2 01       	movw	r26, r4
            }
            else if( (ind = token(ptr,"TRANSFER_RATE")) )
   13628:	96 96       	adiw	r26, 0x26	; 38
   1362a:	9c 93       	st	X, r25
   1362c:	8e 93       	st	-X, r24
   1362e:	95 97       	sbiw	r26, 0x25	; 37
   13630:	75 cd       	rjmp	.-1302   	; 0x1311c <Read_Config+0x158>
   13632:	6f eb       	ldi	r22, 0xBF	; 191
   13634:	7e e0       	ldi	r23, 0x0E	; 14
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val))
   13636:	c6 01       	movw	r24, r12
   13638:	0e 94 43 34 	call	0x6886	; 0x6886 <token>
   1363c:	00 97       	sbiw	r24, 0x00	; 0
   1363e:	d9 f0       	breq	.+54     	; 0x13676 <Read_Config+0x6b2>
   13640:	fe 01       	movw	r30, r28
   13642:	ef 57       	subi	r30, 0x7F	; 127
   13644:	ff 4f       	sbci	r31, 0xFF	; 255
   13646:	7f 01       	movw	r14, r30
   13648:	0f ef       	ldi	r16, 0xFF	; 255
   1364a:	1f ef       	ldi	r17, 0xFF	; 255
   1364c:	20 e0       	ldi	r18, 0x00	; 0
   1364e:	30 e0       	ldi	r19, 0x00	; 0
   13650:	40 e0       	ldi	r20, 0x00	; 0
   13652:	50 e0       	ldi	r21, 0x00	; 0
   13654:	ba 01       	movw	r22, r20
   13656:	8c 0d       	add	r24, r12
                    ++errors;
   13658:	9d 1d       	adc	r25, r13
   1365a:	d4 da       	rcall	.-2648   	; 0x12c04 <assign_value>
   1365c:	89 2b       	or	r24, r25
                SS80p->CONTROLLER.TRANSFER_RATE = val;
   1365e:	19 f4       	brne	.+6      	; 0x13666 <Read_Config+0x6a2>
   13660:	ff ef       	ldi	r31, 0xFF	; 255
   13662:	af 1a       	sub	r10, r31
   13664:	bf 0a       	sbc	r11, r31
   13666:	cf 57       	subi	r28, 0x7F	; 127
   13668:	df 4f       	sbci	r29, 0xFF	; 255
   1366a:	88 81       	ld	r24, Y
            }
            else if( (ind = token(ptr,"TYPE")) )
   1366c:	99 81       	ldd	r25, Y+1	; 0x01
   1366e:	c1 58       	subi	r28, 0x81	; 129
   13670:	d0 40       	sbci	r29, 0x00	; 0
   13672:	d2 01       	movw	r26, r4
   13674:	47 c4       	rjmp	.+2190   	; 0x13f04 <Read_Config+0xf40>
   13676:	6c ea       	ldi	r22, 0xAC	; 172
   13678:	7d e0       	ldi	r23, 0x0D	; 13
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val))
   1367a:	c6 01       	movw	r24, r12
   1367c:	0e 94 43 34 	call	0x6886	; 0x6886 <token>
   13680:	00 97       	sbiw	r24, 0x00	; 0
   13682:	e1 f0       	breq	.+56     	; 0x136bc <Read_Config+0x6f8>
   13684:	fe 01       	movw	r30, r28
   13686:	ef 57       	subi	r30, 0x7F	; 127
   13688:	ff 4f       	sbci	r31, 0xFF	; 255
   1368a:	7f 01       	movw	r14, r30
   1368c:	0f ef       	ldi	r16, 0xFF	; 255
   1368e:	1f ef       	ldi	r17, 0xFF	; 255
   13690:	20 e0       	ldi	r18, 0x00	; 0
   13692:	30 e0       	ldi	r19, 0x00	; 0
   13694:	40 e0       	ldi	r20, 0x00	; 0
   13696:	50 e0       	ldi	r21, 0x00	; 0
   13698:	ba 01       	movw	r22, r20
   1369a:	8c 0d       	add	r24, r12
                    ++errors;
   1369c:	9d 1d       	adc	r25, r13
   1369e:	b2 da       	rcall	.-2716   	; 0x12c04 <assign_value>
   136a0:	89 2b       	or	r24, r25
                SS80p->CONTROLLER.TYPE = val;
   136a2:	19 f4       	brne	.+6      	; 0x136aa <Read_Config+0x6e6>
   136a4:	ff ef       	ldi	r31, 0xFF	; 255
   136a6:	af 1a       	sub	r10, r31
   136a8:	bf 0a       	sbc	r11, r31
   136aa:	cf 57       	subi	r28, 0x7F	; 127
   136ac:	df 4f       	sbci	r29, 0xFF	; 255
   136ae:	88 81       	ld	r24, Y
   136b0:	c1 58       	subi	r28, 0x81	; 129
   136b2:	d0 40       	sbci	r29, 0x00	; 0
            }
            else
            {
                printf("Unexpected SS80 CONTROLLER token: %s, at line:%d\n", ptr,lines);
   136b4:	d2 01       	movw	r26, r4
   136b6:	99 96       	adiw	r26, 0x29	; 41
   136b8:	8c 93       	st	X, r24
   136ba:	30 cd       	rjmp	.-1440   	; 0x1311c <Read_Config+0x158>
   136bc:	80 91 66 18 	lds	r24, 0x1866	; 0x801866 <lines+0x1>
   136c0:	8f 93       	push	r24
   136c2:	80 91 65 18 	lds	r24, 0x1865	; 0x801865 <lines>
   136c6:	8f 93       	push	r24
            }
            break;


        case SS80_UNIT:
            if( (ind = token(ptr,"UNIT_TYPE")) )
   136c8:	df 92       	push	r13
   136ca:	cf 92       	push	r12
   136cc:	8c e4       	ldi	r24, 0x4C	; 76
   136ce:	9b e1       	ldi	r25, 0x1B	; 27
   136d0:	7c ce       	rjmp	.-776    	; 0x133ca <Read_Config+0x406>
   136d2:	67 e6       	ldi	r22, 0x67	; 103
   136d4:	7e e0       	ldi	r23, 0x0E	; 14
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val))
   136d6:	c6 01       	movw	r24, r12
   136d8:	0e 94 43 34 	call	0x6886	; 0x6886 <token>
   136dc:	00 97       	sbiw	r24, 0x00	; 0
   136de:	e1 f0       	breq	.+56     	; 0x13718 <Read_Config+0x754>
   136e0:	9e 01       	movw	r18, r28
   136e2:	2f 57       	subi	r18, 0x7F	; 127
   136e4:	3f 4f       	sbci	r19, 0xFF	; 255
   136e6:	79 01       	movw	r14, r18
   136e8:	0f ef       	ldi	r16, 0xFF	; 255
   136ea:	1f ef       	ldi	r17, 0xFF	; 255
   136ec:	20 e0       	ldi	r18, 0x00	; 0
   136ee:	30 e0       	ldi	r19, 0x00	; 0
   136f0:	40 e0       	ldi	r20, 0x00	; 0
   136f2:	50 e0       	ldi	r21, 0x00	; 0
   136f4:	ba 01       	movw	r22, r20
   136f6:	8c 0d       	add	r24, r12
                    ++errors;
   136f8:	9d 1d       	adc	r25, r13
   136fa:	84 da       	rcall	.-2808   	; 0x12c04 <assign_value>
                SS80p->UNIT.UNIT_TYPE = val;
   136fc:	89 2b       	or	r24, r25
   136fe:	19 f4       	brne	.+6      	; 0x13706 <Read_Config+0x742>
   13700:	3f ef       	ldi	r19, 0xFF	; 255
   13702:	a3 1a       	sub	r10, r19
   13704:	b3 0a       	sbc	r11, r19
   13706:	cf 57       	subi	r28, 0x7F	; 127
   13708:	df 4f       	sbci	r29, 0xFF	; 255
   1370a:	88 81       	ld	r24, Y
            }
            else if( (ind = token(ptr,"DEVICE_NUMBER")) )
   1370c:	c1 58       	subi	r28, 0x81	; 129
   1370e:	d0 40       	sbci	r29, 0x00	; 0
   13710:	d2 01       	movw	r26, r4
   13712:	9a 96       	adiw	r26, 0x2a	; 42
   13714:	8c 93       	st	X, r24
   13716:	02 cd       	rjmp	.-1532   	; 0x1311c <Read_Config+0x158>
   13718:	61 e7       	ldi	r22, 0x71	; 113
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFFFFFUL, &val))
   1371a:	7e e0       	ldi	r23, 0x0E	; 14
   1371c:	c6 01       	movw	r24, r12
   1371e:	0e 94 43 34 	call	0x6886	; 0x6886 <token>
   13722:	00 97       	sbiw	r24, 0x00	; 0
   13724:	01 f1       	breq	.+64     	; 0x13766 <Read_Config+0x7a2>
   13726:	fe 01       	movw	r30, r28
   13728:	ef 57       	subi	r30, 0x7F	; 127
   1372a:	ff 4f       	sbci	r31, 0xFF	; 255
   1372c:	7f 01       	movw	r14, r30
   1372e:	0f ef       	ldi	r16, 0xFF	; 255
   13730:	1f ef       	ldi	r17, 0xFF	; 255
   13732:	98 01       	movw	r18, r16
   13734:	40 e0       	ldi	r20, 0x00	; 0
   13736:	50 e0       	ldi	r21, 0x00	; 0
   13738:	ba 01       	movw	r22, r20
                    ++errors;
   1373a:	8c 0d       	add	r24, r12
   1373c:	9d 1d       	adc	r25, r13
   1373e:	62 da       	rcall	.-2876   	; 0x12c04 <assign_value>
                SS80p->UNIT.DEVICE_NUMBER = val;
   13740:	89 2b       	or	r24, r25
   13742:	19 f4       	brne	.+6      	; 0x1374a <Read_Config+0x786>
   13744:	ff ef       	ldi	r31, 0xFF	; 255
   13746:	af 1a       	sub	r10, r31
   13748:	bf 0a       	sbc	r11, r31
   1374a:	cf 57       	subi	r28, 0x7F	; 127
   1374c:	df 4f       	sbci	r29, 0xFF	; 255
   1374e:	88 81       	ld	r24, Y
   13750:	99 81       	ldd	r25, Y+1	; 0x01
   13752:	aa 81       	ldd	r26, Y+2	; 0x02
   13754:	bb 81       	ldd	r27, Y+3	; 0x03
   13756:	c1 58       	subi	r28, 0x81	; 129
   13758:	d0 40       	sbci	r29, 0x00	; 0
            }
            else if( (ind = token(ptr,"BYTES_PER_BLOCK")) )
   1375a:	f2 01       	movw	r30, r4
   1375c:	83 a7       	std	Z+43, r24	; 0x2b
   1375e:	94 a7       	std	Z+44, r25	; 0x2c
   13760:	a5 a7       	std	Z+45, r26	; 0x2d
   13762:	b6 a7       	std	Z+46, r27	; 0x2e
   13764:	db cc       	rjmp	.-1610   	; 0x1311c <Read_Config+0x158>
   13766:	6f e7       	ldi	r22, 0x7F	; 127
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0x1000UL, &val) )
   13768:	7e e0       	ldi	r23, 0x0E	; 14
   1376a:	c6 01       	movw	r24, r12
   1376c:	0e 94 43 34 	call	0x6886	; 0x6886 <token>
   13770:	00 97       	sbiw	r24, 0x00	; 0
   13772:	f9 f0       	breq	.+62     	; 0x137b2 <Read_Config+0x7ee>
   13774:	9e 01       	movw	r18, r28
   13776:	2f 57       	subi	r18, 0x7F	; 127
   13778:	3f 4f       	sbci	r19, 0xFF	; 255
   1377a:	79 01       	movw	r14, r18
   1377c:	00 e0       	ldi	r16, 0x00	; 0
   1377e:	10 e1       	ldi	r17, 0x10	; 16
   13780:	20 e0       	ldi	r18, 0x00	; 0
   13782:	30 e0       	ldi	r19, 0x00	; 0
   13784:	40 e0       	ldi	r20, 0x00	; 0
   13786:	50 e0       	ldi	r21, 0x00	; 0
   13788:	ba 01       	movw	r22, r20
                    ++errors;
   1378a:	8c 0d       	add	r24, r12
   1378c:	9d 1d       	adc	r25, r13
   1378e:	3a da       	rcall	.-2956   	; 0x12c04 <assign_value>
                SS80p->UNIT.BYTES_PER_BLOCK = val;
   13790:	89 2b       	or	r24, r25
   13792:	19 f4       	brne	.+6      	; 0x1379a <Read_Config+0x7d6>
   13794:	3f ef       	ldi	r19, 0xFF	; 255
   13796:	a3 1a       	sub	r10, r19
   13798:	b3 0a       	sbc	r11, r19
   1379a:	cf 57       	subi	r28, 0x7F	; 127
   1379c:	df 4f       	sbci	r29, 0xFF	; 255
   1379e:	88 81       	ld	r24, Y
   137a0:	99 81       	ldd	r25, Y+1	; 0x01
   137a2:	c1 58       	subi	r28, 0x81	; 129
   137a4:	d0 40       	sbci	r29, 0x00	; 0
            }
            else if( (ind = token(ptr,"BUFFERED_BLOCKS")) )
   137a6:	d2 01       	movw	r26, r4
   137a8:	d0 96       	adiw	r26, 0x30	; 48
   137aa:	9c 93       	st	X, r25
   137ac:	8e 93       	st	-X, r24
   137ae:	9f 97       	sbiw	r26, 0x2f	; 47
   137b0:	b5 cc       	rjmp	.-1686   	; 0x1311c <Read_Config+0x158>
   137b2:	6f e8       	ldi	r22, 0x8F	; 143
            {
                ptr += ind;
                if (!assign_value(ptr, 1UL, 1UL, &val) )
   137b4:	7e e0       	ldi	r23, 0x0E	; 14
   137b6:	c6 01       	movw	r24, r12
   137b8:	0e 94 43 34 	call	0x6886	; 0x6886 <token>
   137bc:	00 97       	sbiw	r24, 0x00	; 0
   137be:	e9 f0       	breq	.+58     	; 0x137fa <Read_Config+0x836>
   137c0:	fe 01       	movw	r30, r28
   137c2:	ef 57       	subi	r30, 0x7F	; 127
   137c4:	ff 4f       	sbci	r31, 0xFF	; 255
   137c6:	7f 01       	movw	r14, r30
   137c8:	01 e0       	ldi	r16, 0x01	; 1
   137ca:	10 e0       	ldi	r17, 0x00	; 0
   137cc:	20 e0       	ldi	r18, 0x00	; 0
   137ce:	30 e0       	ldi	r19, 0x00	; 0
   137d0:	41 e0       	ldi	r20, 0x01	; 1
   137d2:	50 e0       	ldi	r21, 0x00	; 0
   137d4:	60 e0       	ldi	r22, 0x00	; 0
                    ++errors;
   137d6:	70 e0       	ldi	r23, 0x00	; 0
   137d8:	8c 0d       	add	r24, r12
                SS80p->UNIT.BUFFERED_BLOCKS = val;
   137da:	9d 1d       	adc	r25, r13
   137dc:	13 da       	rcall	.-3034   	; 0x12c04 <assign_value>
   137de:	89 2b       	or	r24, r25
   137e0:	19 f4       	brne	.+6      	; 0x137e8 <Read_Config+0x824>
   137e2:	ff ef       	ldi	r31, 0xFF	; 255
   137e4:	af 1a       	sub	r10, r31
   137e6:	bf 0a       	sbc	r11, r31
   137e8:	cf 57       	subi	r28, 0x7F	; 127
   137ea:	df 4f       	sbci	r29, 0xFF	; 255
            }
            else if( (ind = token(ptr,"BURST_SIZE")) )
   137ec:	88 81       	ld	r24, Y
   137ee:	c1 58       	subi	r28, 0x81	; 129
   137f0:	d0 40       	sbci	r29, 0x00	; 0
   137f2:	d2 01       	movw	r26, r4
   137f4:	d1 96       	adiw	r26, 0x31	; 49
   137f6:	8c 93       	st	X, r24
   137f8:	91 cc       	rjmp	.-1758   	; 0x1311c <Read_Config+0x158>
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0, &val) )
   137fa:	6f e9       	ldi	r22, 0x9F	; 159
   137fc:	7e e0       	ldi	r23, 0x0E	; 14
   137fe:	c6 01       	movw	r24, r12
   13800:	0e 94 43 34 	call	0x6886	; 0x6886 <token>
   13804:	00 97       	sbiw	r24, 0x00	; 0
   13806:	d9 f0       	breq	.+54     	; 0x1383e <Read_Config+0x87a>
   13808:	fe 01       	movw	r30, r28
   1380a:	ef 57       	subi	r30, 0x7F	; 127
   1380c:	ff 4f       	sbci	r31, 0xFF	; 255
   1380e:	7f 01       	movw	r14, r30
   13810:	00 e0       	ldi	r16, 0x00	; 0
   13812:	10 e0       	ldi	r17, 0x00	; 0
   13814:	98 01       	movw	r18, r16
   13816:	40 e0       	ldi	r20, 0x00	; 0
                    ++errors;
   13818:	50 e0       	ldi	r21, 0x00	; 0
   1381a:	ba 01       	movw	r22, r20
                SS80p->UNIT.BURST_SIZE = val;
   1381c:	8c 0d       	add	r24, r12
   1381e:	9d 1d       	adc	r25, r13
   13820:	f1 d9       	rcall	.-3102   	; 0x12c04 <assign_value>
   13822:	89 2b       	or	r24, r25
   13824:	19 f4       	brne	.+6      	; 0x1382c <Read_Config+0x868>
   13826:	ff ef       	ldi	r31, 0xFF	; 255
   13828:	af 1a       	sub	r10, r31
   1382a:	bf 0a       	sbc	r11, r31
   1382c:	cf 57       	subi	r28, 0x7F	; 127
            }
            else if( (ind = token(ptr,"BLOCK_TIME")) )
   1382e:	df 4f       	sbci	r29, 0xFF	; 255
   13830:	88 81       	ld	r24, Y
   13832:	c1 58       	subi	r28, 0x81	; 129
   13834:	d0 40       	sbci	r29, 0x00	; 0
   13836:	d2 01       	movw	r26, r4
   13838:	d2 96       	adiw	r26, 0x32	; 50
   1383a:	8c 93       	st	X, r24
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val) )
   1383c:	6f cc       	rjmp	.-1826   	; 0x1311c <Read_Config+0x158>
   1383e:	6a ea       	ldi	r22, 0xAA	; 170
   13840:	7e e0       	ldi	r23, 0x0E	; 14
   13842:	c6 01       	movw	r24, r12
   13844:	0e 94 43 34 	call	0x6886	; 0x6886 <token>
   13848:	00 97       	sbiw	r24, 0x00	; 0
   1384a:	f9 f0       	breq	.+62     	; 0x1388a <Read_Config+0x8c6>
   1384c:	fe 01       	movw	r30, r28
   1384e:	ef 57       	subi	r30, 0x7F	; 127
   13850:	ff 4f       	sbci	r31, 0xFF	; 255
   13852:	7f 01       	movw	r14, r30
   13854:	0f ef       	ldi	r16, 0xFF	; 255
   13856:	1f ef       	ldi	r17, 0xFF	; 255
   13858:	20 e0       	ldi	r18, 0x00	; 0
   1385a:	30 e0       	ldi	r19, 0x00	; 0
   1385c:	40 e0       	ldi	r20, 0x00	; 0
                    ++errors;
   1385e:	50 e0       	ldi	r21, 0x00	; 0
   13860:	ba 01       	movw	r22, r20
                SS80p->UNIT.BLOCK_TIME = val;
   13862:	8c 0d       	add	r24, r12
   13864:	9d 1d       	adc	r25, r13
   13866:	ce d9       	rcall	.-3172   	; 0x12c04 <assign_value>
   13868:	89 2b       	or	r24, r25
   1386a:	19 f4       	brne	.+6      	; 0x13872 <Read_Config+0x8ae>
   1386c:	ff ef       	ldi	r31, 0xFF	; 255
   1386e:	af 1a       	sub	r10, r31
   13870:	bf 0a       	sbc	r11, r31
   13872:	cf 57       	subi	r28, 0x7F	; 127
   13874:	df 4f       	sbci	r29, 0xFF	; 255
   13876:	88 81       	ld	r24, Y
   13878:	99 81       	ldd	r25, Y+1	; 0x01
            }
            else if( (ind = token(ptr,"CONTINOUS_TRANSFER_RATE")) )
   1387a:	c1 58       	subi	r28, 0x81	; 129
   1387c:	d0 40       	sbci	r29, 0x00	; 0
   1387e:	d2 01       	movw	r26, r4
   13880:	d4 96       	adiw	r26, 0x34	; 52
   13882:	9c 93       	st	X, r25
   13884:	8e 93       	st	-X, r24
   13886:	d3 97       	sbiw	r26, 0x33	; 51
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val) )
   13888:	49 cc       	rjmp	.-1902   	; 0x1311c <Read_Config+0x158>
   1388a:	65 eb       	ldi	r22, 0xB5	; 181
   1388c:	7e e0       	ldi	r23, 0x0E	; 14
   1388e:	c6 01       	movw	r24, r12
   13890:	0e 94 43 34 	call	0x6886	; 0x6886 <token>
   13894:	00 97       	sbiw	r24, 0x00	; 0
   13896:	f9 f0       	breq	.+62     	; 0x138d6 <Read_Config+0x912>
   13898:	fe 01       	movw	r30, r28
   1389a:	ef 57       	subi	r30, 0x7F	; 127
   1389c:	ff 4f       	sbci	r31, 0xFF	; 255
   1389e:	7f 01       	movw	r14, r30
   138a0:	0f ef       	ldi	r16, 0xFF	; 255
   138a2:	1f ef       	ldi	r17, 0xFF	; 255
   138a4:	20 e0       	ldi	r18, 0x00	; 0
   138a6:	30 e0       	ldi	r19, 0x00	; 0
   138a8:	40 e0       	ldi	r20, 0x00	; 0
                    ++errors;
   138aa:	50 e0       	ldi	r21, 0x00	; 0
   138ac:	ba 01       	movw	r22, r20
                SS80p->UNIT.CONTINOUS_TRANSFER_RATE = val;
   138ae:	8c 0d       	add	r24, r12
   138b0:	9d 1d       	adc	r25, r13
   138b2:	a8 d9       	rcall	.-3248   	; 0x12c04 <assign_value>
   138b4:	89 2b       	or	r24, r25
   138b6:	19 f4       	brne	.+6      	; 0x138be <Read_Config+0x8fa>
   138b8:	ff ef       	ldi	r31, 0xFF	; 255
   138ba:	af 1a       	sub	r10, r31
   138bc:	bf 0a       	sbc	r11, r31
   138be:	cf 57       	subi	r28, 0x7F	; 127
   138c0:	df 4f       	sbci	r29, 0xFF	; 255
   138c2:	88 81       	ld	r24, Y
   138c4:	99 81       	ldd	r25, Y+1	; 0x01
            }
            else if( (ind = token(ptr,"OPTIMAL_RETRY_TIME")) )
   138c6:	c1 58       	subi	r28, 0x81	; 129
   138c8:	d0 40       	sbci	r29, 0x00	; 0
   138ca:	d2 01       	movw	r26, r4
   138cc:	d6 96       	adiw	r26, 0x36	; 54
   138ce:	9c 93       	st	X, r25
   138d0:	8e 93       	st	-X, r24
   138d2:	d5 97       	sbiw	r26, 0x35	; 53
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val) )
   138d4:	23 cc       	rjmp	.-1978   	; 0x1311c <Read_Config+0x158>
   138d6:	6d ec       	ldi	r22, 0xCD	; 205
   138d8:	7e e0       	ldi	r23, 0x0E	; 14
   138da:	c6 01       	movw	r24, r12
   138dc:	0e 94 43 34 	call	0x6886	; 0x6886 <token>
   138e0:	00 97       	sbiw	r24, 0x00	; 0
   138e2:	f9 f0       	breq	.+62     	; 0x13922 <Read_Config+0x95e>
   138e4:	fe 01       	movw	r30, r28
   138e6:	ef 57       	subi	r30, 0x7F	; 127
   138e8:	ff 4f       	sbci	r31, 0xFF	; 255
   138ea:	7f 01       	movw	r14, r30
   138ec:	0f ef       	ldi	r16, 0xFF	; 255
   138ee:	1f ef       	ldi	r17, 0xFF	; 255
   138f0:	20 e0       	ldi	r18, 0x00	; 0
   138f2:	30 e0       	ldi	r19, 0x00	; 0
                    ++errors;
   138f4:	40 e0       	ldi	r20, 0x00	; 0
   138f6:	50 e0       	ldi	r21, 0x00	; 0
                SS80p->UNIT.OPTIMAL_RETRY_TIME = val;
   138f8:	ba 01       	movw	r22, r20
   138fa:	8c 0d       	add	r24, r12
   138fc:	9d 1d       	adc	r25, r13
   138fe:	82 d9       	rcall	.-3324   	; 0x12c04 <assign_value>
   13900:	89 2b       	or	r24, r25
   13902:	19 f4       	brne	.+6      	; 0x1390a <Read_Config+0x946>
   13904:	ff ef       	ldi	r31, 0xFF	; 255
   13906:	af 1a       	sub	r10, r31
   13908:	bf 0a       	sbc	r11, r31
   1390a:	cf 57       	subi	r28, 0x7F	; 127
   1390c:	df 4f       	sbci	r29, 0xFF	; 255
   1390e:	88 81       	ld	r24, Y
            }
            else if( (ind = token(ptr,"ACCESS_TIME")) )
   13910:	99 81       	ldd	r25, Y+1	; 0x01
   13912:	c1 58       	subi	r28, 0x81	; 129
   13914:	d0 40       	sbci	r29, 0x00	; 0
   13916:	d2 01       	movw	r26, r4
   13918:	d8 96       	adiw	r26, 0x38	; 56
   1391a:	9c 93       	st	X, r25
   1391c:	8e 93       	st	-X, r24
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val) )
   1391e:	d7 97       	sbiw	r26, 0x37	; 55
   13920:	fd cb       	rjmp	.-2054   	; 0x1311c <Read_Config+0x158>
   13922:	60 ee       	ldi	r22, 0xE0	; 224
   13924:	7e e0       	ldi	r23, 0x0E	; 14
   13926:	c6 01       	movw	r24, r12
   13928:	0e 94 43 34 	call	0x6886	; 0x6886 <token>
   1392c:	00 97       	sbiw	r24, 0x00	; 0
   1392e:	f9 f0       	breq	.+62     	; 0x1396e <Read_Config+0x9aa>
   13930:	fe 01       	movw	r30, r28
   13932:	ef 57       	subi	r30, 0x7F	; 127
   13934:	ff 4f       	sbci	r31, 0xFF	; 255
   13936:	7f 01       	movw	r14, r30
   13938:	0f ef       	ldi	r16, 0xFF	; 255
   1393a:	1f ef       	ldi	r17, 0xFF	; 255
   1393c:	20 e0       	ldi	r18, 0x00	; 0
                    ++errors;
   1393e:	30 e0       	ldi	r19, 0x00	; 0
   13940:	40 e0       	ldi	r20, 0x00	; 0
   13942:	50 e0       	ldi	r21, 0x00	; 0
                SS80p->UNIT.ACCESS_TIME = val;
   13944:	ba 01       	movw	r22, r20
   13946:	8c 0d       	add	r24, r12
   13948:	9d 1d       	adc	r25, r13
   1394a:	5c d9       	rcall	.-3400   	; 0x12c04 <assign_value>
   1394c:	89 2b       	or	r24, r25
   1394e:	19 f4       	brne	.+6      	; 0x13956 <Read_Config+0x992>
   13950:	ff ef       	ldi	r31, 0xFF	; 255
   13952:	af 1a       	sub	r10, r31
   13954:	bf 0a       	sbc	r11, r31
   13956:	cf 57       	subi	r28, 0x7F	; 127
   13958:	df 4f       	sbci	r29, 0xFF	; 255
   1395a:	88 81       	ld	r24, Y
            }
            else if( (ind = token(ptr,"MAXIMUM_INTERLEAVE")) )
   1395c:	99 81       	ldd	r25, Y+1	; 0x01
   1395e:	c1 58       	subi	r28, 0x81	; 129
   13960:	d0 40       	sbci	r29, 0x00	; 0
   13962:	d2 01       	movw	r26, r4
   13964:	da 96       	adiw	r26, 0x3a	; 58
   13966:	9c 93       	st	X, r25
   13968:	8e 93       	st	-X, r24
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   1396a:	d9 97       	sbiw	r26, 0x39	; 57
   1396c:	d7 cb       	rjmp	.-2130   	; 0x1311c <Read_Config+0x158>
   1396e:	6c ee       	ldi	r22, 0xEC	; 236
   13970:	7e e0       	ldi	r23, 0x0E	; 14
   13972:	c6 01       	movw	r24, r12
   13974:	0e 94 43 34 	call	0x6886	; 0x6886 <token>
   13978:	00 97       	sbiw	r24, 0x00	; 0
   1397a:	e1 f0       	breq	.+56     	; 0x139b4 <Read_Config+0x9f0>
   1397c:	fe 01       	movw	r30, r28
   1397e:	ef 57       	subi	r30, 0x7F	; 127
   13980:	ff 4f       	sbci	r31, 0xFF	; 255
   13982:	7f 01       	movw	r14, r30
   13984:	0f ef       	ldi	r16, 0xFF	; 255
   13986:	10 e0       	ldi	r17, 0x00	; 0
   13988:	20 e0       	ldi	r18, 0x00	; 0
                    ++errors;
   1398a:	30 e0       	ldi	r19, 0x00	; 0
   1398c:	40 e0       	ldi	r20, 0x00	; 0
   1398e:	50 e0       	ldi	r21, 0x00	; 0
                SS80p->UNIT.MAXIMUM_INTERLEAVE = val;
   13990:	ba 01       	movw	r22, r20
   13992:	8c 0d       	add	r24, r12
   13994:	9d 1d       	adc	r25, r13
   13996:	36 d9       	rcall	.-3476   	; 0x12c04 <assign_value>
   13998:	89 2b       	or	r24, r25
   1399a:	19 f4       	brne	.+6      	; 0x139a2 <Read_Config+0x9de>
   1399c:	ff ef       	ldi	r31, 0xFF	; 255
   1399e:	af 1a       	sub	r10, r31
   139a0:	bf 0a       	sbc	r11, r31
            }
            else if( (ind = token(ptr,"FIXED_VOLUMES")) )
   139a2:	cf 57       	subi	r28, 0x7F	; 127
   139a4:	df 4f       	sbci	r29, 0xFF	; 255
   139a6:	88 81       	ld	r24, Y
   139a8:	c1 58       	subi	r28, 0x81	; 129
   139aa:	d0 40       	sbci	r29, 0x00	; 0
   139ac:	d2 01       	movw	r26, r4
   139ae:	db 96       	adiw	r26, 0x3b	; 59
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   139b0:	8c 93       	st	X, r24
   139b2:	b4 cb       	rjmp	.-2200   	; 0x1311c <Read_Config+0x158>
   139b4:	6f ef       	ldi	r22, 0xFF	; 255
   139b6:	7e e0       	ldi	r23, 0x0E	; 14
   139b8:	c6 01       	movw	r24, r12
   139ba:	0e 94 43 34 	call	0x6886	; 0x6886 <token>
   139be:	00 97       	sbiw	r24, 0x00	; 0
   139c0:	e1 f0       	breq	.+56     	; 0x139fa <Read_Config+0xa36>
   139c2:	fe 01       	movw	r30, r28
   139c4:	ef 57       	subi	r30, 0x7F	; 127
   139c6:	ff 4f       	sbci	r31, 0xFF	; 255
   139c8:	7f 01       	movw	r14, r30
   139ca:	0f ef       	ldi	r16, 0xFF	; 255
   139cc:	10 e0       	ldi	r17, 0x00	; 0
   139ce:	20 e0       	ldi	r18, 0x00	; 0
                    ++errors;
   139d0:	30 e0       	ldi	r19, 0x00	; 0
   139d2:	40 e0       	ldi	r20, 0x00	; 0
   139d4:	50 e0       	ldi	r21, 0x00	; 0
                SS80p->UNIT.FIXED_VOLUMES = val;
   139d6:	ba 01       	movw	r22, r20
   139d8:	8c 0d       	add	r24, r12
   139da:	9d 1d       	adc	r25, r13
   139dc:	13 d9       	rcall	.-3546   	; 0x12c04 <assign_value>
   139de:	89 2b       	or	r24, r25
   139e0:	19 f4       	brne	.+6      	; 0x139e8 <Read_Config+0xa24>
   139e2:	ff ef       	ldi	r31, 0xFF	; 255
   139e4:	af 1a       	sub	r10, r31
   139e6:	bf 0a       	sbc	r11, r31
            }
            else if( (ind = token(ptr,"REMOVABLE_VOLUMES")) )
   139e8:	cf 57       	subi	r28, 0x7F	; 127
   139ea:	df 4f       	sbci	r29, 0xFF	; 255
   139ec:	88 81       	ld	r24, Y
   139ee:	c1 58       	subi	r28, 0x81	; 129
   139f0:	d0 40       	sbci	r29, 0x00	; 0
   139f2:	d2 01       	movw	r26, r4
   139f4:	dc 96       	adiw	r26, 0x3c	; 60
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   139f6:	8c 93       	st	X, r24
   139f8:	91 cb       	rjmp	.-2270   	; 0x1311c <Read_Config+0x158>
   139fa:	6d e0       	ldi	r22, 0x0D	; 13
   139fc:	7f e0       	ldi	r23, 0x0F	; 15
   139fe:	c6 01       	movw	r24, r12
   13a00:	0e 94 43 34 	call	0x6886	; 0x6886 <token>
   13a04:	00 97       	sbiw	r24, 0x00	; 0
   13a06:	e1 f0       	breq	.+56     	; 0x13a40 <Read_Config+0xa7c>
   13a08:	fe 01       	movw	r30, r28
   13a0a:	ef 57       	subi	r30, 0x7F	; 127
   13a0c:	ff 4f       	sbci	r31, 0xFF	; 255
   13a0e:	7f 01       	movw	r14, r30
   13a10:	0f ef       	ldi	r16, 0xFF	; 255
   13a12:	10 e0       	ldi	r17, 0x00	; 0
   13a14:	20 e0       	ldi	r18, 0x00	; 0
   13a16:	30 e0       	ldi	r19, 0x00	; 0
                    ++errors;
   13a18:	40 e0       	ldi	r20, 0x00	; 0
   13a1a:	50 e0       	ldi	r21, 0x00	; 0
                SS80p->UNIT.REMOVABLE_VOLUMES = val;
   13a1c:	ba 01       	movw	r22, r20
   13a1e:	8c 0d       	add	r24, r12
   13a20:	9d 1d       	adc	r25, r13
   13a22:	f0 d8       	rcall	.-3616   	; 0x12c04 <assign_value>
   13a24:	89 2b       	or	r24, r25
   13a26:	19 f4       	brne	.+6      	; 0x13a2e <Read_Config+0xa6a>
   13a28:	ff ef       	ldi	r31, 0xFF	; 255
   13a2a:	af 1a       	sub	r10, r31
            }
            else
            {
                printf("Unexpected SS80 UNIT token: %s, at line:%d\n", ptr,lines);
   13a2c:	bf 0a       	sbc	r11, r31
   13a2e:	cf 57       	subi	r28, 0x7F	; 127
   13a30:	df 4f       	sbci	r29, 0xFF	; 255
   13a32:	88 81       	ld	r24, Y
   13a34:	c1 58       	subi	r28, 0x81	; 129
   13a36:	d0 40       	sbci	r29, 0x00	; 0
   13a38:	d2 01       	movw	r26, r4
   13a3a:	dd 96       	adiw	r26, 0x3d	; 61
   13a3c:	8c 93       	st	X, r24
   13a3e:	6e cb       	rjmp	.-2340   	; 0x1311c <Read_Config+0x158>
   13a40:	80 91 66 18 	lds	r24, 0x1866	; 0x801866 <lines+0x1>
                ++errors;
            }
            break;

        case SS80_VOLUME:
            if( (ind = token(ptr,"MAX_CYLINDER")) )
   13a44:	8f 93       	push	r24
   13a46:	80 91 65 18 	lds	r24, 0x1865	; 0x801865 <lines>
   13a4a:	8f 93       	push	r24
   13a4c:	df 92       	push	r13
   13a4e:	cf 92       	push	r12
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFFFFFUL, &val) )
   13a50:	80 e2       	ldi	r24, 0x20	; 32
   13a52:	9b e1       	ldi	r25, 0x1B	; 27
   13a54:	ba cc       	rjmp	.-1676   	; 0x133ca <Read_Config+0x406>
   13a56:	6f e1       	ldi	r22, 0x1F	; 31
   13a58:	7f e0       	ldi	r23, 0x0F	; 15
   13a5a:	c6 01       	movw	r24, r12
   13a5c:	0e 94 43 34 	call	0x6886	; 0x6886 <token>
   13a60:	00 97       	sbiw	r24, 0x00	; 0
   13a62:	e9 f0       	breq	.+58     	; 0x13a9e <Read_Config+0xada>
   13a64:	9e 01       	movw	r18, r28
   13a66:	2f 57       	subi	r18, 0x7F	; 127
   13a68:	3f 4f       	sbci	r19, 0xFF	; 255
   13a6a:	79 01       	movw	r14, r18
   13a6c:	0f ef       	ldi	r16, 0xFF	; 255
                    ++errors;
   13a6e:	1f ef       	ldi	r17, 0xFF	; 255
   13a70:	98 01       	movw	r18, r16
   13a72:	40 e0       	ldi	r20, 0x00	; 0
                SS80p->VOLUME.MAX_CYLINDER = val;
   13a74:	50 e0       	ldi	r21, 0x00	; 0
   13a76:	ba 01       	movw	r22, r20
   13a78:	8c 0d       	add	r24, r12
   13a7a:	9d 1d       	adc	r25, r13
   13a7c:	c3 d8       	rcall	.-3706   	; 0x12c04 <assign_value>
   13a7e:	89 2b       	or	r24, r25
   13a80:	19 f4       	brne	.+6      	; 0x13a88 <Read_Config+0xac4>
   13a82:	3f ef       	ldi	r19, 0xFF	; 255
   13a84:	a3 1a       	sub	r10, r19
   13a86:	b3 0a       	sbc	r11, r19
   13a88:	cf 57       	subi	r28, 0x7F	; 127
            }
            else if( (ind = token(ptr,"MAX_HEAD")) )
   13a8a:	df 4f       	sbci	r29, 0xFF	; 255
   13a8c:	88 81       	ld	r24, Y
   13a8e:	99 81       	ldd	r25, Y+1	; 0x01
   13a90:	aa 81       	ldd	r26, Y+2	; 0x02
   13a92:	bb 81       	ldd	r27, Y+3	; 0x03
   13a94:	c1 58       	subi	r28, 0x81	; 129
   13a96:	d0 40       	sbci	r29, 0x00	; 0
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   13a98:	f2 01       	movw	r30, r4
   13a9a:	fe 96       	adiw	r30, 0x3e	; 62
   13a9c:	6e c0       	rjmp	.+220    	; 0x13b7a <Read_Config+0xbb6>
   13a9e:	6c e2       	ldi	r22, 0x2C	; 44
   13aa0:	7f e0       	ldi	r23, 0x0F	; 15
   13aa2:	c6 01       	movw	r24, r12
   13aa4:	0e 94 43 34 	call	0x6886	; 0x6886 <token>
   13aa8:	00 97       	sbiw	r24, 0x00	; 0
   13aaa:	e9 f0       	breq	.+58     	; 0x13ae6 <Read_Config+0xb22>
   13aac:	de 01       	movw	r26, r28
   13aae:	af 57       	subi	r26, 0x7F	; 127
   13ab0:	bf 4f       	sbci	r27, 0xFF	; 255
   13ab2:	7d 01       	movw	r14, r26
   13ab4:	0f ef       	ldi	r16, 0xFF	; 255
   13ab6:	10 e0       	ldi	r17, 0x00	; 0
                    ++errors;
   13ab8:	20 e0       	ldi	r18, 0x00	; 0
   13aba:	30 e0       	ldi	r19, 0x00	; 0
   13abc:	40 e0       	ldi	r20, 0x00	; 0
                SS80p->VOLUME.MAX_HEAD = val;
   13abe:	50 e0       	ldi	r21, 0x00	; 0
   13ac0:	ba 01       	movw	r22, r20
   13ac2:	8c 0d       	add	r24, r12
   13ac4:	9d 1d       	adc	r25, r13
   13ac6:	9e d8       	rcall	.-3780   	; 0x12c04 <assign_value>
   13ac8:	89 2b       	or	r24, r25
   13aca:	19 f4       	brne	.+6      	; 0x13ad2 <Read_Config+0xb0e>
   13acc:	bf ef       	ldi	r27, 0xFF	; 255
   13ace:	ab 1a       	sub	r10, r27
   13ad0:	bb 0a       	sbc	r11, r27
            }
            else if( (ind = token(ptr,"MAX_SECTOR")) )
   13ad2:	cf 57       	subi	r28, 0x7F	; 127
   13ad4:	df 4f       	sbci	r29, 0xFF	; 255
   13ad6:	88 81       	ld	r24, Y
   13ad8:	c1 58       	subi	r28, 0x81	; 129
   13ada:	d0 40       	sbci	r29, 0x00	; 0
   13adc:	f2 01       	movw	r30, r4
   13ade:	ee 5b       	subi	r30, 0xBE	; 190
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val) )
   13ae0:	ff 4f       	sbci	r31, 0xFF	; 255
   13ae2:	80 83       	st	Z, r24
   13ae4:	1b cb       	rjmp	.-2506   	; 0x1311c <Read_Config+0x158>
   13ae6:	65 e3       	ldi	r22, 0x35	; 53
   13ae8:	7f e0       	ldi	r23, 0x0F	; 15
   13aea:	c6 01       	movw	r24, r12
   13aec:	0e 94 43 34 	call	0x6886	; 0x6886 <token>
   13af0:	00 97       	sbiw	r24, 0x00	; 0
   13af2:	f9 f0       	breq	.+62     	; 0x13b32 <Read_Config+0xb6e>
   13af4:	fe 01       	movw	r30, r28
   13af6:	ef 57       	subi	r30, 0x7F	; 127
   13af8:	ff 4f       	sbci	r31, 0xFF	; 255
   13afa:	7f 01       	movw	r14, r30
   13afc:	0f ef       	ldi	r16, 0xFF	; 255
   13afe:	1f ef       	ldi	r17, 0xFF	; 255
                    ++errors;
   13b00:	20 e0       	ldi	r18, 0x00	; 0
   13b02:	30 e0       	ldi	r19, 0x00	; 0
   13b04:	40 e0       	ldi	r20, 0x00	; 0
                SS80p->VOLUME.MAX_SECTOR = val;
   13b06:	50 e0       	ldi	r21, 0x00	; 0
   13b08:	ba 01       	movw	r22, r20
   13b0a:	8c 0d       	add	r24, r12
   13b0c:	9d 1d       	adc	r25, r13
   13b0e:	7a d8       	rcall	.-3852   	; 0x12c04 <assign_value>
   13b10:	89 2b       	or	r24, r25
   13b12:	19 f4       	brne	.+6      	; 0x13b1a <Read_Config+0xb56>
   13b14:	ff ef       	ldi	r31, 0xFF	; 255
   13b16:	af 1a       	sub	r10, r31
   13b18:	bf 0a       	sbc	r11, r31
   13b1a:	cf 57       	subi	r28, 0x7F	; 127
   13b1c:	df 4f       	sbci	r29, 0xFF	; 255
            }
            else if( (ind = token(ptr,"MAX_BLOCK_NUMBER")) )
   13b1e:	88 81       	ld	r24, Y
   13b20:	99 81       	ldd	r25, Y+1	; 0x01
   13b22:	c1 58       	subi	r28, 0x81	; 129
   13b24:	d0 40       	sbci	r29, 0x00	; 0
   13b26:	f2 01       	movw	r30, r4
   13b28:	ed 5b       	subi	r30, 0xBD	; 189
   13b2a:	ff 4f       	sbci	r31, 0xFF	; 255
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFFFFFUL, &val) )
   13b2c:	91 83       	std	Z+1, r25	; 0x01
   13b2e:	80 83       	st	Z, r24
   13b30:	f5 ca       	rjmp	.-2582   	; 0x1311c <Read_Config+0x158>
   13b32:	60 e4       	ldi	r22, 0x40	; 64
   13b34:	7f e0       	ldi	r23, 0x0F	; 15
   13b36:	c6 01       	movw	r24, r12
   13b38:	0e 94 43 34 	call	0x6886	; 0x6886 <token>
   13b3c:	00 97       	sbiw	r24, 0x00	; 0
   13b3e:	11 f1       	breq	.+68     	; 0x13b84 <Read_Config+0xbc0>
   13b40:	9e 01       	movw	r18, r28
   13b42:	2f 57       	subi	r18, 0x7F	; 127
   13b44:	3f 4f       	sbci	r19, 0xFF	; 255
   13b46:	79 01       	movw	r14, r18
   13b48:	0f ef       	ldi	r16, 0xFF	; 255
                    ++errors;
   13b4a:	1f ef       	ldi	r17, 0xFF	; 255
   13b4c:	98 01       	movw	r18, r16
   13b4e:	40 e0       	ldi	r20, 0x00	; 0
                SS80p->VOLUME.MAX_BLOCK_NUMBER = val;
   13b50:	50 e0       	ldi	r21, 0x00	; 0
   13b52:	ba 01       	movw	r22, r20
   13b54:	8c 0d       	add	r24, r12
   13b56:	9d 1d       	adc	r25, r13
   13b58:	55 d8       	rcall	.-3926   	; 0x12c04 <assign_value>
   13b5a:	89 2b       	or	r24, r25
   13b5c:	19 f4       	brne	.+6      	; 0x13b64 <Read_Config+0xba0>
   13b5e:	3f ef       	ldi	r19, 0xFF	; 255
   13b60:	a3 1a       	sub	r10, r19
   13b62:	b3 0a       	sbc	r11, r19
   13b64:	cf 57       	subi	r28, 0x7F	; 127
   13b66:	df 4f       	sbci	r29, 0xFF	; 255
   13b68:	88 81       	ld	r24, Y
   13b6a:	99 81       	ldd	r25, Y+1	; 0x01
   13b6c:	aa 81       	ldd	r26, Y+2	; 0x02
   13b6e:	bb 81       	ldd	r27, Y+3	; 0x03
            }
            else if( (ind = token(ptr,"INTERLEAVE")) )
   13b70:	c1 58       	subi	r28, 0x81	; 129
   13b72:	d0 40       	sbci	r29, 0x00	; 0
   13b74:	f2 01       	movw	r30, r4
   13b76:	eb 5b       	subi	r30, 0xBB	; 187
   13b78:	ff 4f       	sbci	r31, 0xFF	; 255
   13b7a:	80 83       	st	Z, r24
   13b7c:	91 83       	std	Z+1, r25	; 0x01
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   13b7e:	a2 83       	std	Z+2, r26	; 0x02
   13b80:	b3 83       	std	Z+3, r27	; 0x03
   13b82:	cc ca       	rjmp	.-2664   	; 0x1311c <Read_Config+0x158>
   13b84:	64 ef       	ldi	r22, 0xF4	; 244
   13b86:	7e e0       	ldi	r23, 0x0E	; 14
   13b88:	c6 01       	movw	r24, r12
   13b8a:	0e 94 43 34 	call	0x6886	; 0x6886 <token>
   13b8e:	00 97       	sbiw	r24, 0x00	; 0
   13b90:	e1 f0       	breq	.+56     	; 0x13bca <Read_Config+0xc06>
   13b92:	de 01       	movw	r26, r28
   13b94:	af 57       	subi	r26, 0x7F	; 127
   13b96:	bf 4f       	sbci	r27, 0xFF	; 255
   13b98:	7d 01       	movw	r14, r26
   13b9a:	0f ef       	ldi	r16, 0xFF	; 255
   13b9c:	10 e0       	ldi	r17, 0x00	; 0
   13b9e:	20 e0       	ldi	r18, 0x00	; 0
                    ++errors;
   13ba0:	30 e0       	ldi	r19, 0x00	; 0
   13ba2:	40 e0       	ldi	r20, 0x00	; 0
   13ba4:	50 e0       	ldi	r21, 0x00	; 0
                SS80p->VOLUME.INTERLEAVE = val;
   13ba6:	ba 01       	movw	r22, r20
   13ba8:	8c 0d       	add	r24, r12
   13baa:	9d 1d       	adc	r25, r13
   13bac:	2b d8       	rcall	.-4010   	; 0x12c04 <assign_value>
   13bae:	89 2b       	or	r24, r25
   13bb0:	19 f4       	brne	.+6      	; 0x13bb8 <Read_Config+0xbf4>
   13bb2:	bf ef       	ldi	r27, 0xFF	; 255
   13bb4:	ab 1a       	sub	r10, r27
   13bb6:	bb 0a       	sbc	r11, r27

            }
            else
            {
                printf("Unexpected SS80 VOLUME token: %s, at line:%d\n", ptr,lines);
   13bb8:	cf 57       	subi	r28, 0x7F	; 127
   13bba:	df 4f       	sbci	r29, 0xFF	; 255
   13bbc:	88 81       	ld	r24, Y
   13bbe:	c1 58       	subi	r28, 0x81	; 129
   13bc0:	d0 40       	sbci	r29, 0x00	; 0
   13bc2:	f2 01       	movw	r30, r4
   13bc4:	e7 5b       	subi	r30, 0xB7	; 183
   13bc6:	ff 4f       	sbci	r31, 0xFF	; 255
   13bc8:	8c cf       	rjmp	.-232    	; 0x13ae2 <Read_Config+0xb1e>
   13bca:	80 91 66 18 	lds	r24, 0x1866	; 0x801866 <lines+0x1>
   13bce:	8f 93       	push	r24
   13bd0:	80 91 65 18 	lds	r24, 0x1865	; 0x801865 <lines>
   13bd4:	8f 93       	push	r24
                ++errors;
   13bd6:	df 92       	push	r13
   13bd8:	cf 92       	push	r12
   13bda:	82 ef       	ldi	r24, 0xF2	; 242
   13bdc:	9a e1       	ldi	r25, 0x1A	; 26
            }
            break;

#ifdef AMIGO
        case AMIGO_STATE:
            if(token(ptr,"HEADER"))
   13bde:	1f 92       	push	r1
   13be0:	9f 93       	push	r25
   13be2:	8f 93       	push	r24
   13be4:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   13be8:	ef ef       	ldi	r30, 0xFF	; 255
   13bea:	ae 1a       	sub	r10, r30
            {
                push_state(state);
   13bec:	be 0a       	sbc	r11, r30
   13bee:	12 c2       	rjmp	.+1060   	; 0x14014 <Read_Config+0x1050>
   13bf0:	6d e2       	ldi	r22, 0x2D	; 45
   13bf2:	7e e0       	ldi	r23, 0x0E	; 14
                state = AMIGO_HEADER;
   13bf4:	c6 01       	movw	r24, r12
   13bf6:	0e 94 43 34 	call	0x6886	; 0x6886 <token>
   13bfa:	89 2b       	or	r24, r25
            }
            else if(token(ptr,"CONFIG"))
   13bfc:	41 f0       	breq	.+16     	; 0x13c0e <Read_Config+0xc4a>
   13bfe:	8a e0       	ldi	r24, 0x0A	; 10
   13c00:	90 e0       	ldi	r25, 0x00	; 0
   13c02:	0e 94 d2 95 	call	0x12ba4	; 0x12ba4 <push_state>
   13c06:	2b e0       	ldi	r18, 0x0B	; 11
   13c08:	62 2e       	mov	r6, r18
            {
                push_state(state);
   13c0a:	71 2c       	mov	r7, r1
   13c0c:	87 ca       	rjmp	.-2802   	; 0x1311c <Read_Config+0x158>
   13c0e:	66 e2       	ldi	r22, 0x26	; 38
   13c10:	7e e0       	ldi	r23, 0x0E	; 14
                state = AMIGO_CONFIG;
   13c12:	c6 01       	movw	r24, r12
   13c14:	0e 94 43 34 	call	0x6886	; 0x6886 <token>
   13c18:	89 2b       	or	r24, r25
            }
            else if(token(ptr,"GEOMETRY"))
   13c1a:	41 f0       	breq	.+16     	; 0x13c2c <Read_Config+0xc68>
   13c1c:	8a e0       	ldi	r24, 0x0A	; 10
   13c1e:	90 e0       	ldi	r25, 0x00	; 0
   13c20:	0e 94 d2 95 	call	0x12ba4	; 0x12ba4 <push_state>
   13c24:	9c e0       	ldi	r25, 0x0C	; 12
   13c26:	69 2e       	mov	r6, r25
            {
                push_state(state);
   13c28:	71 2c       	mov	r7, r1
   13c2a:	78 ca       	rjmp	.-2832   	; 0x1311c <Read_Config+0x158>
   13c2c:	61 e5       	ldi	r22, 0x51	; 81
   13c2e:	7f e0       	ldi	r23, 0x0F	; 15
                state = AMIGO_GEOMETRY;
   13c30:	c6 01       	movw	r24, r12
   13c32:	0e 94 43 34 	call	0x6886	; 0x6886 <token>
   13c36:	89 2b       	or	r24, r25
            }
            else
            {
                printf("Unexpected AMIGO START token: %s, at line:%d\n", ptr,lines);
   13c38:	41 f0       	breq	.+16     	; 0x13c4a <Read_Config+0xc86>
   13c3a:	8a e0       	ldi	r24, 0x0A	; 10
   13c3c:	90 e0       	ldi	r25, 0x00	; 0
   13c3e:	0e 94 d2 95 	call	0x12ba4	; 0x12ba4 <push_state>
   13c42:	8d e0       	ldi	r24, 0x0D	; 13
   13c44:	68 2e       	mov	r6, r24
   13c46:	71 2c       	mov	r7, r1
   13c48:	69 ca       	rjmp	.-2862   	; 0x1311c <Read_Config+0x158>
   13c4a:	80 91 66 18 	lds	r24, 0x1866	; 0x801866 <lines+0x1>
   13c4e:	8f 93       	push	r24
   13c50:	80 91 65 18 	lds	r24, 0x1865	; 0x801865 <lines>
                ++errors;
            }
            break;

        case AMIGO_HEADER:
            if( (ind = token(ptr,"DRIVE")) )
   13c54:	8f 93       	push	r24
   13c56:	df 92       	push	r13
   13c58:	cf 92       	push	r12
   13c5a:	84 ec       	ldi	r24, 0xC4	; 196
   13c5c:	9a e1       	ldi	r25, 0x1A	; 26
   13c5e:	1f 92       	push	r1
   13c60:	9f 93       	push	r25
            {
                ptr += ind;
                printf("Skipping %s, at line:%d\n", ptr,lines);
   13c62:	8f 93       	push	r24
   13c64:	e8 c0       	rjmp	.+464    	; 0x13e36 <Read_Config+0xe72>
   13c66:	6a e5       	ldi	r22, 0x5A	; 90
   13c68:	7f e0       	ldi	r23, 0x0F	; 15
   13c6a:	c6 01       	movw	r24, r12
   13c6c:	0e 94 43 34 	call	0x6886	; 0x6886 <token>
   13c70:	00 97       	sbiw	r24, 0x00	; 0
   13c72:	d1 f0       	breq	.+52     	; 0x13ca8 <Read_Config+0xce4>
   13c74:	20 91 66 18 	lds	r18, 0x1866	; 0x801866 <lines+0x1>
   13c78:	2f 93       	push	r18
   13c7a:	20 91 65 18 	lds	r18, 0x1865	; 0x801865 <lines>
   13c7e:	2f 93       	push	r18
   13c80:	c8 0e       	add	r12, r24
   13c82:	d9 1e       	adc	r13, r25
   13c84:	df 92       	push	r13
   13c86:	cf 92       	push	r12
   13c88:	1f 92       	push	r1
   13c8a:	c7 56       	subi	r28, 0x67	; 103
   13c8c:	df 4f       	sbci	r29, 0xFF	; 255
   13c8e:	98 81       	ld	r25, Y
   13c90:	c9 59       	subi	r28, 0x99	; 153
   13c92:	d0 40       	sbci	r29, 0x00	; 0
   13c94:	9f 93       	push	r25
                //skip this
            }
            else if( (ind = token(ptr,"ADDRESS")) )
   13c96:	c8 56       	subi	r28, 0x68	; 104
   13c98:	df 4f       	sbci	r29, 0xFF	; 255
   13c9a:	a8 81       	ld	r26, Y
   13c9c:	c8 59       	subi	r28, 0x98	; 152
   13c9e:	d0 40       	sbci	r29, 0x00	; 0
   13ca0:	af 93       	push	r26
   13ca2:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
            {
                ptr += ind;
                tmp = 0xff;
                if (!assign_value(ptr, 0, 14UL, &val) )
   13ca6:	b6 c1       	rjmp	.+876    	; 0x14014 <Read_Config+0x1050>
   13ca8:	6e e1       	ldi	r22, 0x1E	; 30
   13caa:	7e e0       	ldi	r23, 0x0E	; 14
   13cac:	c6 01       	movw	r24, r12
   13cae:	0e 94 43 34 	call	0x6886	; 0x6886 <token>
   13cb2:	00 97       	sbiw	r24, 0x00	; 0
   13cb4:	39 f1       	breq	.+78     	; 0x13d04 <Read_Config+0xd40>
   13cb6:	9e 01       	movw	r18, r28
   13cb8:	2f 57       	subi	r18, 0x7F	; 127
   13cba:	3f 4f       	sbci	r19, 0xFF	; 255
   13cbc:	79 01       	movw	r14, r18
   13cbe:	0e e0       	ldi	r16, 0x0E	; 14
   13cc0:	10 e0       	ldi	r17, 0x00	; 0
   13cc2:	20 e0       	ldi	r18, 0x00	; 0
   13cc4:	30 e0       	ldi	r19, 0x00	; 0
                    ++errors;
   13cc6:	40 e0       	ldi	r20, 0x00	; 0
   13cc8:	50 e0       	ldi	r21, 0x00	; 0
   13cca:	ba 01       	movw	r22, r20
                //skip this
            }
            else if( (ind = token(ptr,"ADDRESS")) )
            {
                ptr += ind;
                tmp = 0xff;
   13ccc:	8c 0d       	add	r24, r12
   13cce:	9d 1d       	adc	r25, r13
                if (!assign_value(ptr, 0, 14UL, &val) )
                    ++errors;
                else
                    tmp = val;
   13cd0:	0e 94 02 96 	call	0x12c04	; 0x12c04 <assign_value>
   13cd4:	89 2b       	or	r24, r25
   13cd6:	29 f4       	brne	.+10     	; 0x13ce2 <Read_Config+0xd1e>
   13cd8:	3f ef       	ldi	r19, 0xFF	; 255
                Devices[index].ADDRESS = tmp;
   13cda:	a3 1a       	sub	r10, r19
   13cdc:	b3 0a       	sbc	r11, r19
   13cde:	8f ef       	ldi	r24, 0xFF	; 255
   13ce0:	05 c0       	rjmp	.+10     	; 0x13cec <Read_Config+0xd28>
   13ce2:	cf 57       	subi	r28, 0x7F	; 127
   13ce4:	df 4f       	sbci	r29, 0xFF	; 255
   13ce6:	88 81       	ld	r24, Y
   13ce8:	c1 58       	subi	r28, 0x81	; 129
   13cea:	d0 40       	sbci	r29, 0x00	; 0
                AMIGOp->HEADER.ADDRESS = tmp;
   13cec:	9b e2       	ldi	r25, 0x2B	; 43
   13cee:	98 9d       	mul	r25, r8
   13cf0:	f0 01       	movw	r30, r0
            }
            else if( (ind = token(ptr,"PPR")) )
   13cf2:	99 9d       	mul	r25, r9
   13cf4:	f0 0d       	add	r31, r0
   13cf6:	11 24       	eor	r1, r1
   13cf8:	ec 50       	subi	r30, 0x0C	; 12
   13cfa:	f2 4e       	sbci	r31, 0xE2	; 226
   13cfc:	81 83       	std	Z+1, r24	; 0x01
   13cfe:	d1 01       	movw	r26, r2
            {
                ptr += ind;
                tmp = 0xff;
                if (!assign_value(ptr, 0, 7UL, &val) )
   13d00:	8c 93       	st	X, r24
   13d02:	0c ca       	rjmp	.-3048   	; 0x1311c <Read_Config+0x158>
   13d04:	6b e4       	ldi	r22, 0x4B	; 75
   13d06:	7e e0       	ldi	r23, 0x0E	; 14
   13d08:	c6 01       	movw	r24, r12
   13d0a:	0e 94 43 34 	call	0x6886	; 0x6886 <token>
   13d0e:	00 97       	sbiw	r24, 0x00	; 0
   13d10:	31 f1       	breq	.+76     	; 0x13d5e <Read_Config+0xd9a>
   13d12:	fe 01       	movw	r30, r28
   13d14:	ef 57       	subi	r30, 0x7F	; 127
   13d16:	ff 4f       	sbci	r31, 0xFF	; 255
   13d18:	7f 01       	movw	r14, r30
   13d1a:	07 e0       	ldi	r16, 0x07	; 7
   13d1c:	10 e0       	ldi	r17, 0x00	; 0
   13d1e:	20 e0       	ldi	r18, 0x00	; 0
   13d20:	30 e0       	ldi	r19, 0x00	; 0
                    ++errors;
   13d22:	40 e0       	ldi	r20, 0x00	; 0
   13d24:	50 e0       	ldi	r21, 0x00	; 0
   13d26:	ba 01       	movw	r22, r20
                AMIGOp->HEADER.ADDRESS = tmp;
            }
            else if( (ind = token(ptr,"PPR")) )
            {
                ptr += ind;
                tmp = 0xff;
   13d28:	8c 0d       	add	r24, r12
   13d2a:	9d 1d       	adc	r25, r13
                if (!assign_value(ptr, 0, 7UL, &val) )
                    ++errors;
                else
                    tmp = val;
   13d2c:	0e 94 02 96 	call	0x12c04	; 0x12c04 <assign_value>
   13d30:	89 2b       	or	r24, r25
   13d32:	29 f4       	brne	.+10     	; 0x13d3e <Read_Config+0xd7a>
   13d34:	ff ef       	ldi	r31, 0xFF	; 255
                Devices[index].PPR = tmp;
   13d36:	af 1a       	sub	r10, r31
   13d38:	bf 0a       	sbc	r11, r31
   13d3a:	8f ef       	ldi	r24, 0xFF	; 255
   13d3c:	05 c0       	rjmp	.+10     	; 0x13d48 <Read_Config+0xd84>
   13d3e:	cf 57       	subi	r28, 0x7F	; 127
   13d40:	df 4f       	sbci	r29, 0xFF	; 255
   13d42:	88 81       	ld	r24, Y
   13d44:	c1 58       	subi	r28, 0x81	; 129
   13d46:	d0 40       	sbci	r29, 0x00	; 0
                AMIGOp->HEADER.PPR = tmp;
   13d48:	9b e2       	ldi	r25, 0x2B	; 43
   13d4a:	98 9d       	mul	r25, r8
            }
            else if( (ind = token(ptr,"FILE")) )
   13d4c:	f0 01       	movw	r30, r0
   13d4e:	99 9d       	mul	r25, r9
   13d50:	f0 0d       	add	r31, r0
   13d52:	11 24       	eor	r1, r1
   13d54:	ec 50       	subi	r30, 0x0C	; 12
   13d56:	f2 4e       	sbci	r31, 0xE2	; 226
   13d58:	82 83       	std	Z+2, r24	; 0x02
            {
                ptr += ind;
                ptr = skipspaces(ptr);
   13d5a:	d1 01       	movw	r26, r2
   13d5c:	ea cb       	rjmp	.-2092   	; 0x13532 <Read_Config+0x56e>
   13d5e:	6f e4       	ldi	r22, 0x4F	; 79
   13d60:	7e e0       	ldi	r23, 0x0E	; 14
                if(*ptr == '=')
   13d62:	c6 01       	movw	r24, r12
   13d64:	0e 94 43 34 	call	0x6886	; 0x6886 <token>
   13d68:	00 97       	sbiw	r24, 0x00	; 0
                {
                    ++ptr;
                    ptr = skipspaces(ptr);
   13d6a:	b1 f0       	breq	.+44     	; 0x13d98 <Read_Config+0xdd4>
   13d6c:	8c 0d       	add	r24, r12
   13d6e:	9d 1d       	adc	r25, r13
                }
                strncpy(AMIGOp->HEADER.NAME, ptr, sizeof(AMIGOp->HEADER.NAME)-1);
   13d70:	0e 94 c0 32 	call	0x6580	; 0x6580 <skipspaces>
   13d74:	fc 01       	movw	r30, r24
   13d76:	20 81       	ld	r18, Z
   13d78:	2d 33       	cpi	r18, 0x3D	; 61
   13d7a:	19 f4       	brne	.+6      	; 0x13d82 <Read_Config+0xdbe>
   13d7c:	01 96       	adiw	r24, 0x01	; 1
                AMIGOp->HEADER.NAME[sizeof(AMIGOp->HEADER.NAME)-1] = 0;
   13d7e:	0e 94 c0 32 	call	0x6580	; 0x6580 <skipspaces>
   13d82:	40 e2       	ldi	r20, 0x20	; 32
   13d84:	50 e0       	ldi	r21, 0x00	; 0
            }
            else
            {
                printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   13d86:	bc 01       	movw	r22, r24
   13d88:	c1 01       	movw	r24, r2
   13d8a:	02 96       	adiw	r24, 0x02	; 2
   13d8c:	0e 94 61 32 	call	0x64c2	; 0x64c2 <strncpy>
   13d90:	d1 01       	movw	r26, r2
   13d92:	92 96       	adiw	r26, 0x22	; 34
   13d94:	1c 92       	st	X, r1
   13d96:	c2 c9       	rjmp	.-3196   	; 0x1311c <Read_Config+0x158>
   13d98:	80 91 66 18 	lds	r24, 0x1866	; 0x801866 <lines+0x1>
   13d9c:	8f 93       	push	r24
   13d9e:	80 91 65 18 	lds	r24, 0x1865	; 0x801865 <lines>
   13da2:	8f 93       	push	r24
   13da4:	df 92       	push	r13
   13da6:	cf 92       	push	r12
   13da8:	1f 92       	push	r1
   13daa:	ca 56       	subi	r28, 0x6A	; 106
   13dac:	df 4f       	sbci	r29, 0xFF	; 255
   13dae:	b8 81       	ld	r27, Y
                ++errors;
            }
            break;

        case AMIGO_CONFIG:
            if( (ind = token(ptr,"ID")) )
   13db0:	c6 59       	subi	r28, 0x96	; 150
   13db2:	d0 40       	sbci	r29, 0x00	; 0
   13db4:	bf 93       	push	r27
   13db6:	cb 56       	subi	r28, 0x6B	; 107
   13db8:	df 4f       	sbci	r29, 0xFF	; 255
   13dba:	e8 81       	ld	r30, Y
   13dbc:	c5 59       	subi	r28, 0x95	; 149
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val) )
   13dbe:	d0 40       	sbci	r29, 0x00	; 0
   13dc0:	08 c1       	rjmp	.+528    	; 0x13fd2 <Read_Config+0x100e>
   13dc2:	64 e5       	ldi	r22, 0x54	; 84
   13dc4:	7e e0       	ldi	r23, 0x0E	; 14
   13dc6:	c6 01       	movw	r24, r12
   13dc8:	0e 94 43 34 	call	0x6886	; 0x6886 <token>
   13dcc:	00 97       	sbiw	r24, 0x00	; 0
   13dce:	f1 f0       	breq	.+60     	; 0x13e0c <Read_Config+0xe48>
   13dd0:	de 01       	movw	r26, r28
   13dd2:	af 57       	subi	r26, 0x7F	; 127
   13dd4:	bf 4f       	sbci	r27, 0xFF	; 255
   13dd6:	7d 01       	movw	r14, r26
   13dd8:	0f ef       	ldi	r16, 0xFF	; 255
   13dda:	1f ef       	ldi	r17, 0xFF	; 255
   13ddc:	20 e0       	ldi	r18, 0x00	; 0
   13dde:	30 e0       	ldi	r19, 0x00	; 0
                    ++errors;
   13de0:	40 e0       	ldi	r20, 0x00	; 0
   13de2:	50 e0       	ldi	r21, 0x00	; 0
   13de4:	ba 01       	movw	r22, r20
                AMIGOp->CONFIG.ID = val;
   13de6:	8c 0d       	add	r24, r12
   13de8:	9d 1d       	adc	r25, r13
   13dea:	0e 94 02 96 	call	0x12c04	; 0x12c04 <assign_value>
   13dee:	89 2b       	or	r24, r25
   13df0:	19 f4       	brne	.+6      	; 0x13df8 <Read_Config+0xe34>
   13df2:	bf ef       	ldi	r27, 0xFF	; 255
   13df4:	ab 1a       	sub	r10, r27
   13df6:	bb 0a       	sbc	r11, r27
   13df8:	cf 57       	subi	r28, 0x7F	; 127
            }
            else
            {
                printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   13dfa:	df 4f       	sbci	r29, 0xFF	; 255
   13dfc:	88 81       	ld	r24, Y
   13dfe:	99 81       	ldd	r25, Y+1	; 0x01
   13e00:	c1 58       	subi	r28, 0x81	; 129
   13e02:	d0 40       	sbci	r29, 0x00	; 0
   13e04:	f1 01       	movw	r30, r2
   13e06:	94 a3       	std	Z+36, r25	; 0x24
   13e08:	83 a3       	std	Z+35, r24	; 0x23
   13e0a:	88 c9       	rjmp	.-3312   	; 0x1311c <Read_Config+0x158>
   13e0c:	80 91 66 18 	lds	r24, 0x1866	; 0x801866 <lines+0x1>
   13e10:	8f 93       	push	r24
   13e12:	80 91 65 18 	lds	r24, 0x1865	; 0x801865 <lines>
   13e16:	8f 93       	push	r24
   13e18:	df 92       	push	r13
   13e1a:	cf 92       	push	r12
   13e1c:	1f 92       	push	r1
   13e1e:	cd 56       	subi	r28, 0x6D	; 109
   13e20:	df 4f       	sbci	r29, 0xFF	; 255
   13e22:	f8 81       	ld	r31, Y
   13e24:	c3 59       	subi	r28, 0x93	; 147
   13e26:	d0 40       	sbci	r29, 0x00	; 0
                ++errors;
   13e28:	ff 93       	push	r31
   13e2a:	ce 56       	subi	r28, 0x6E	; 110
   13e2c:	df 4f       	sbci	r29, 0xFF	; 255
   13e2e:	28 81       	ld	r18, Y
            }
            break;

        case AMIGO_GEOMETRY:
            if( (ind = token(ptr,"BYTES_PER_SECTOR")) )
   13e30:	c2 59       	subi	r28, 0x92	; 146
   13e32:	d0 40       	sbci	r29, 0x00	; 0
   13e34:	2f 93       	push	r18
   13e36:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   13e3a:	3f ef       	ldi	r19, 0xFF	; 255
   13e3c:	a3 1a       	sub	r10, r19
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0x1000UL, &val) )
   13e3e:	b3 0a       	sbc	r11, r19
   13e40:	e9 c0       	rjmp	.+466    	; 0x14014 <Read_Config+0x1050>
   13e42:	60 e6       	ldi	r22, 0x60	; 96
   13e44:	7f e0       	ldi	r23, 0x0F	; 15
   13e46:	c6 01       	movw	r24, r12
   13e48:	0e 94 43 34 	call	0x6886	; 0x6886 <token>
   13e4c:	00 97       	sbiw	r24, 0x00	; 0
   13e4e:	c1 f1       	breq	.+112    	; 0x13ec0 <Read_Config+0xefc>
   13e50:	de 01       	movw	r26, r28
   13e52:	af 57       	subi	r26, 0x7F	; 127
   13e54:	bf 4f       	sbci	r27, 0xFF	; 255
   13e56:	7d 01       	movw	r14, r26
   13e58:	00 e0       	ldi	r16, 0x00	; 0
   13e5a:	10 e1       	ldi	r17, 0x10	; 16
   13e5c:	20 e0       	ldi	r18, 0x00	; 0
   13e5e:	30 e0       	ldi	r19, 0x00	; 0
                    ++errors;
   13e60:	40 e0       	ldi	r20, 0x00	; 0
   13e62:	50 e0       	ldi	r21, 0x00	; 0
   13e64:	ba 01       	movw	r22, r20
printf("BYTES PER SECTOR: %s\n", token);
   13e66:	8c 0d       	add	r24, r12
   13e68:	9d 1d       	adc	r25, r13
   13e6a:	0e 94 02 96 	call	0x12c04	; 0x12c04 <assign_value>
   13e6e:	89 2b       	or	r24, r25
   13e70:	19 f4       	brne	.+6      	; 0x13e78 <Read_Config+0xeb4>
   13e72:	bf ef       	ldi	r27, 0xFF	; 255
   13e74:	ab 1a       	sub	r10, r27
   13e76:	bb 0a       	sbc	r11, r27
   13e78:	83 e4       	ldi	r24, 0x43	; 67
   13e7a:	94 e3       	ldi	r25, 0x34	; 52
   13e7c:	9f 93       	push	r25
   13e7e:	8f 93       	push	r24
   13e80:	1f 92       	push	r1
   13e82:	c0 57       	subi	r28, 0x70	; 112
   13e84:	df 4f       	sbci	r29, 0xFF	; 255
   13e86:	e8 81       	ld	r30, Y
   13e88:	c0 59       	subi	r28, 0x90	; 144
   13e8a:	d0 40       	sbci	r29, 0x00	; 0
                AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val;
   13e8c:	ef 93       	push	r30
   13e8e:	c1 57       	subi	r28, 0x71	; 113
   13e90:	df 4f       	sbci	r29, 0xFF	; 255
   13e92:	f8 81       	ld	r31, Y
   13e94:	cf 58       	subi	r28, 0x8F	; 143
   13e96:	d0 40       	sbci	r29, 0x00	; 0
   13e98:	ff 93       	push	r31
   13e9a:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   13e9e:	cf 57       	subi	r28, 0x7F	; 127
   13ea0:	df 4f       	sbci	r29, 0xFF	; 255
   13ea2:	88 81       	ld	r24, Y
   13ea4:	99 81       	ldd	r25, Y+1	; 0x01
   13ea6:	c1 58       	subi	r28, 0x81	; 129
   13ea8:	d0 40       	sbci	r29, 0x00	; 0
   13eaa:	d1 01       	movw	r26, r2
   13eac:	96 96       	adiw	r26, 0x26	; 38
            }
            else if( (ind = token(ptr,"SECTORS_PER_TRACK")) )
   13eae:	9c 93       	st	X, r25
   13eb0:	8e 93       	st	-X, r24
   13eb2:	95 97       	sbiw	r26, 0x25	; 37
   13eb4:	0f 90       	pop	r0
   13eb6:	0f 90       	pop	r0
   13eb8:	0f 90       	pop	r0
   13eba:	0f 90       	pop	r0
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   13ebc:	0f 90       	pop	r0
   13ebe:	2e c9       	rjmp	.-3492   	; 0x1311c <Read_Config+0x158>
   13ec0:	61 e7       	ldi	r22, 0x71	; 113
   13ec2:	7f e0       	ldi	r23, 0x0F	; 15
   13ec4:	c6 01       	movw	r24, r12
   13ec6:	0e 94 43 34 	call	0x6886	; 0x6886 <token>
   13eca:	00 97       	sbiw	r24, 0x00	; 0
   13ecc:	01 f1       	breq	.+64     	; 0x13f0e <Read_Config+0xf4a>
   13ece:	fe 01       	movw	r30, r28
   13ed0:	ef 57       	subi	r30, 0x7F	; 127
   13ed2:	ff 4f       	sbci	r31, 0xFF	; 255
   13ed4:	7f 01       	movw	r14, r30
   13ed6:	0f ef       	ldi	r16, 0xFF	; 255
   13ed8:	10 e0       	ldi	r17, 0x00	; 0
   13eda:	20 e0       	ldi	r18, 0x00	; 0
   13edc:	30 e0       	ldi	r19, 0x00	; 0
                    ++errors;
   13ede:	40 e0       	ldi	r20, 0x00	; 0
   13ee0:	50 e0       	ldi	r21, 0x00	; 0
   13ee2:	ba 01       	movw	r22, r20
                AMIGOp->GEOMETRY.SECTORS_PER_TRACK = val;
   13ee4:	8c 0d       	add	r24, r12
   13ee6:	9d 1d       	adc	r25, r13
   13ee8:	0e 94 02 96 	call	0x12c04	; 0x12c04 <assign_value>
   13eec:	89 2b       	or	r24, r25
   13eee:	19 f4       	brne	.+6      	; 0x13ef6 <Read_Config+0xf32>
   13ef0:	ff ef       	ldi	r31, 0xFF	; 255
   13ef2:	af 1a       	sub	r10, r31
   13ef4:	bf 0a       	sbc	r11, r31
   13ef6:	cf 57       	subi	r28, 0x7F	; 127
   13ef8:	df 4f       	sbci	r29, 0xFF	; 255
   13efa:	88 81       	ld	r24, Y
            }
            else if( (ind = token(ptr,"HEADS")) )
   13efc:	99 81       	ldd	r25, Y+1	; 0x01
   13efe:	c1 58       	subi	r28, 0x81	; 129
   13f00:	d0 40       	sbci	r29, 0x00	; 0
   13f02:	d1 01       	movw	r26, r2
   13f04:	98 96       	adiw	r26, 0x28	; 40
   13f06:	9c 93       	st	X, r25
   13f08:	8e 93       	st	-X, r24
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   13f0a:	97 97       	sbiw	r26, 0x27	; 39
   13f0c:	07 c9       	rjmp	.-3570   	; 0x1311c <Read_Config+0x158>
   13f0e:	63 e8       	ldi	r22, 0x83	; 131
   13f10:	7f e0       	ldi	r23, 0x0F	; 15
   13f12:	c6 01       	movw	r24, r12
   13f14:	0e 94 43 34 	call	0x6886	; 0x6886 <token>
   13f18:	00 97       	sbiw	r24, 0x00	; 0
   13f1a:	01 f1       	breq	.+64     	; 0x13f5c <Read_Config+0xf98>
   13f1c:	fe 01       	movw	r30, r28
   13f1e:	ef 57       	subi	r30, 0x7F	; 127
   13f20:	ff 4f       	sbci	r31, 0xFF	; 255
   13f22:	7f 01       	movw	r14, r30
   13f24:	0f ef       	ldi	r16, 0xFF	; 255
   13f26:	10 e0       	ldi	r17, 0x00	; 0
   13f28:	20 e0       	ldi	r18, 0x00	; 0
   13f2a:	30 e0       	ldi	r19, 0x00	; 0
                    ++errors;
   13f2c:	40 e0       	ldi	r20, 0x00	; 0
   13f2e:	50 e0       	ldi	r21, 0x00	; 0
   13f30:	ba 01       	movw	r22, r20
                AMIGOp->GEOMETRY.HEADS = val;
   13f32:	8c 0d       	add	r24, r12
   13f34:	9d 1d       	adc	r25, r13
   13f36:	0e 94 02 96 	call	0x12c04	; 0x12c04 <assign_value>
   13f3a:	89 2b       	or	r24, r25
   13f3c:	19 f4       	brne	.+6      	; 0x13f44 <Read_Config+0xf80>
   13f3e:	ff ef       	ldi	r31, 0xFF	; 255
   13f40:	af 1a       	sub	r10, r31
   13f42:	bf 0a       	sbc	r11, r31
   13f44:	cf 57       	subi	r28, 0x7F	; 127
   13f46:	df 4f       	sbci	r29, 0xFF	; 255
   13f48:	88 81       	ld	r24, Y
            }
            else if( (ind = token(ptr,"CYLINDERS")) )
   13f4a:	99 81       	ldd	r25, Y+1	; 0x01
   13f4c:	c1 58       	subi	r28, 0x81	; 129
   13f4e:	d0 40       	sbci	r29, 0x00	; 0
   13f50:	d1 01       	movw	r26, r2
   13f52:	9a 96       	adiw	r26, 0x2a	; 42
   13f54:	9c 93       	st	X, r25
   13f56:	8e 93       	st	-X, r24
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   13f58:	99 97       	sbiw	r26, 0x29	; 41
   13f5a:	e0 c8       	rjmp	.-3648   	; 0x1311c <Read_Config+0x158>
   13f5c:	69 e8       	ldi	r22, 0x89	; 137
   13f5e:	7f e0       	ldi	r23, 0x0F	; 15
   13f60:	c6 01       	movw	r24, r12
   13f62:	0e 94 43 34 	call	0x6886	; 0x6886 <token>
   13f66:	00 97       	sbiw	r24, 0x00	; 0
   13f68:	01 f1       	breq	.+64     	; 0x13faa <Read_Config+0xfe6>
   13f6a:	fe 01       	movw	r30, r28
   13f6c:	ef 57       	subi	r30, 0x7F	; 127
   13f6e:	ff 4f       	sbci	r31, 0xFF	; 255
   13f70:	7f 01       	movw	r14, r30
   13f72:	0f ef       	ldi	r16, 0xFF	; 255
   13f74:	10 e0       	ldi	r17, 0x00	; 0
   13f76:	20 e0       	ldi	r18, 0x00	; 0
   13f78:	30 e0       	ldi	r19, 0x00	; 0
                    ++errors;
   13f7a:	40 e0       	ldi	r20, 0x00	; 0
   13f7c:	50 e0       	ldi	r21, 0x00	; 0
   13f7e:	ba 01       	movw	r22, r20
                AMIGOp->GEOMETRY.CYLINDERS = val;
   13f80:	8c 0d       	add	r24, r12
   13f82:	9d 1d       	adc	r25, r13
   13f84:	0e 94 02 96 	call	0x12c04	; 0x12c04 <assign_value>
   13f88:	89 2b       	or	r24, r25
   13f8a:	19 f4       	brne	.+6      	; 0x13f92 <Read_Config+0xfce>
   13f8c:	ff ef       	ldi	r31, 0xFF	; 255
   13f8e:	af 1a       	sub	r10, r31
   13f90:	bf 0a       	sbc	r11, r31
   13f92:	cf 57       	subi	r28, 0x7F	; 127
   13f94:	df 4f       	sbci	r29, 0xFF	; 255
   13f96:	88 81       	ld	r24, Y
            }
            else
            {
                printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   13f98:	99 81       	ldd	r25, Y+1	; 0x01
   13f9a:	c1 58       	subi	r28, 0x81	; 129
   13f9c:	d0 40       	sbci	r29, 0x00	; 0
   13f9e:	d1 01       	movw	r26, r2
   13fa0:	9c 96       	adiw	r26, 0x2c	; 44
   13fa2:	9c 93       	st	X, r25
   13fa4:	8e 93       	st	-X, r24
   13fa6:	9b 97       	sbiw	r26, 0x2b	; 43
   13fa8:	b9 c8       	rjmp	.-3726   	; 0x1311c <Read_Config+0x158>
   13faa:	80 91 66 18 	lds	r24, 0x1866	; 0x801866 <lines+0x1>
   13fae:	8f 93       	push	r24
   13fb0:	80 91 65 18 	lds	r24, 0x1865	; 0x801865 <lines>
   13fb4:	8f 93       	push	r24
   13fb6:	df 92       	push	r13
   13fb8:	cf 92       	push	r12
   13fba:	1f 92       	push	r1
   13fbc:	c3 57       	subi	r28, 0x73	; 115
   13fbe:	df 4f       	sbci	r29, 0xFF	; 255
   13fc0:	b8 81       	ld	r27, Y
   13fc2:	cd 58       	subi	r28, 0x8D	; 141
   13fc4:	d0 40       	sbci	r29, 0x00	; 0
                ++errors;
   13fc6:	bf 93       	push	r27
   13fc8:	c4 57       	subi	r28, 0x74	; 116
   13fca:	df 4f       	sbci	r29, 0xFF	; 255
   13fcc:	e8 81       	ld	r30, Y
            }
            break;
#endif // #ifdef AMIGO

        default:
            printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   13fce:	cc 58       	subi	r28, 0x8C	; 140
   13fd0:	d0 40       	sbci	r29, 0x00	; 0
   13fd2:	ef 93       	push	r30
   13fd4:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   13fd8:	ff ef       	ldi	r31, 0xFF	; 255
   13fda:	af 1a       	sub	r10, r31
   13fdc:	bf 0a       	sbc	r11, r31
   13fde:	1a c0       	rjmp	.+52     	; 0x14014 <Read_Config+0x1050>
   13fe0:	80 91 66 18 	lds	r24, 0x1866	; 0x801866 <lines+0x1>
   13fe4:	8f 93       	push	r24
   13fe6:	80 91 65 18 	lds	r24, 0x1865	; 0x801865 <lines>
   13fea:	8f 93       	push	r24
   13fec:	df 92       	push	r13
   13fee:	cf 92       	push	r12
   13ff0:	1f 92       	push	r1
   13ff2:	c6 57       	subi	r28, 0x76	; 118
   13ff4:	df 4f       	sbci	r29, 0xFF	; 255
   13ff6:	38 81       	ld	r19, Y
   13ff8:	ca 58       	subi	r28, 0x8A	; 138
   13ffa:	d0 40       	sbci	r29, 0x00	; 0
            ++errors;
   13ffc:	3f 93       	push	r19
   13ffe:	c7 57       	subi	r28, 0x77	; 119
   14000:	df 4f       	sbci	r29, 0xFF	; 255
            break;
   14002:	48 81       	ld	r20, Y
   14004:	c9 58       	subi	r28, 0x89	; 137
   14006:	d0 40       	sbci	r29, 0x00	; 0
   14008:	4f 93       	push	r20
   1400a:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>

        } // switch
    } //while
    if(state != START_STATE)
   1400e:	8f ef       	ldi	r24, 0xFF	; 255
   14010:	a8 1a       	sub	r10, r24
   14012:	b8 0a       	sbc	r11, r24
    {
        printf("Missing END statement at line:%d\n", lines);
   14014:	0f b6       	in	r0, 0x3f	; 63
   14016:	f8 94       	cli
   14018:	de bf       	out	0x3e, r29	; 62
   1401a:	0f be       	out	0x3f, r0	; 63
   1401c:	cd bf       	out	0x3d, r28	; 61
   1401e:	7e c8       	rjmp	.-3844   	; 0x1311c <Read_Config+0x158>
   14020:	61 14       	cp	r6, r1
   14022:	71 04       	cpc	r7, r1
   14024:	a9 f0       	breq	.+42     	; 0x14050 <Read_Config+0x108c>
   14026:	80 91 66 18 	lds	r24, 0x1866	; 0x801866 <lines+0x1>
   1402a:	8f 93       	push	r24
   1402c:	80 91 65 18 	lds	r24, 0x1865	; 0x801865 <lines>
        ++errors;
   14030:	8f 93       	push	r24
   14032:	82 ec       	ldi	r24, 0xC2	; 194
   14034:	99 e1       	ldi	r25, 0x19	; 25
   14036:	1f 92       	push	r1
   14038:	9f 93       	push	r25
   1403a:	8f 93       	push	r24
   1403c:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    }
    printf("Read_Config: read(%d) lines\n", lines);
   14040:	bf ef       	ldi	r27, 0xFF	; 255
   14042:	ab 1a       	sub	r10, r27
   14044:	bb 0a       	sbc	r11, r27
   14046:	0f 90       	pop	r0
   14048:	0f 90       	pop	r0
   1404a:	0f 90       	pop	r0
   1404c:	0f 90       	pop	r0
   1404e:	0f 90       	pop	r0
   14050:	80 91 66 18 	lds	r24, 0x1866	; 0x801866 <lines+0x1>
   14054:	8f 93       	push	r24
   14056:	80 91 65 18 	lds	r24, 0x1865	; 0x801865 <lines>
    if(errors)
   1405a:	8f 93       	push	r24
   1405c:	85 ea       	ldi	r24, 0xA5	; 165
   1405e:	99 e1       	ldi	r25, 0x19	; 25
   14060:	1f 92       	push	r1
   14062:	9f 93       	push	r25
   14064:	8f 93       	push	r24
   14066:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
        printf("Read_Config: ****** errors(%d) ******\n", errors);
   1406a:	0f 90       	pop	r0
   1406c:	0f 90       	pop	r0
   1406e:	0f 90       	pop	r0
   14070:	0f 90       	pop	r0
   14072:	0f 90       	pop	r0
   14074:	a1 14       	cp	r10, r1
   14076:	b1 04       	cpc	r11, r1
   14078:	71 f0       	breq	.+28     	; 0x14096 <Read_Config+0x10d2>
   1407a:	bf 92       	push	r11
   1407c:	af 92       	push	r10
   1407e:	8e e7       	ldi	r24, 0x7E	; 126
   14080:	99 e1       	ldi	r25, 0x19	; 25
   14082:	1f 92       	push	r1

    ret = fclose(cfg);
   14084:	9f 93       	push	r25
   14086:	8f 93       	push	r24
   14088:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1408c:	0f 90       	pop	r0
   1408e:	0f 90       	pop	r0
   14090:	0f 90       	pop	r0
   14092:	0f 90       	pop	r0
    if(ret == EOF)
   14094:	0f 90       	pop	r0
   14096:	c9 57       	subi	r28, 0x79	; 121
    {
        perror("Read_Config - close error");
   14098:	df 4f       	sbci	r29, 0xFF	; 255
   1409a:	88 81       	ld	r24, Y
   1409c:	99 81       	ldd	r25, Y+1	; 0x01
   1409e:	c7 58       	subi	r28, 0x87	; 135
        ++errors;
   140a0:	d0 40       	sbci	r29, 0x00	; 0
   140a2:	0e 94 ed 7d 	call	0xfbda	; 0xfbda <fclose>
    }

	// Post process device values
	Post_Config();
   140a6:	01 96       	adiw	r24, 0x01	; 1
   140a8:	39 f4       	brne	.+14     	; 0x140b8 <Read_Config+0x10f4>

    return(errors);
   140aa:	83 e9       	ldi	r24, 0x93	; 147
}
   140ac:	9f e0       	ldi	r25, 0x0F	; 15
   140ae:	0e 94 8d 79 	call	0xf31a	; 0xf31a <perror>
   140b2:	ff ef       	ldi	r31, 0xFF	; 255
   140b4:	af 1a       	sub	r10, r31
   140b6:	bf 0a       	sbc	r11, r31
   140b8:	0e 94 4e 97 	call	0x12e9c	; 0x12e9c <Post_Config>
   140bc:	c5 01       	movw	r24, r10
   140be:	c6 56       	subi	r28, 0x66	; 102
   140c0:	df 4f       	sbci	r29, 0xFF	; 255
   140c2:	e2 e1       	ldi	r30, 0x12	; 18
   140c4:	0c 94 0f e6 	jmp	0x1cc1e	; 0x1cc1e <__epilogue_restores__>

000140c8 <print_var_P>:
/// @brief Display Configuration File variable
/// @param str: title
/// @param val: variable value
/// @return  void
void print_var_P(__memx const char *str, uint32_t val)
{
   140c8:	cf 92       	push	r12
   140ca:	df 92       	push	r13
   140cc:	ef 92       	push	r14
   140ce:	0f 93       	push	r16
   140d0:	1f 93       	push	r17
   140d2:	cf 93       	push	r28
   140d4:	df 93       	push	r29
   140d6:	cd b7       	in	r28, 0x3d	; 61
   140d8:	de b7       	in	r29, 0x3e	; 62
   140da:	c0 54       	subi	r28, 0x40	; 64
   140dc:	d1 09       	sbc	r29, r1
   140de:	0f b6       	in	r0, 0x3f	; 63
   140e0:	f8 94       	cli
   140e2:	de bf       	out	0x3e, r29	; 62
   140e4:	0f be       	out	0x3f, r0	; 63
   140e6:	cd bf       	out	0x3d, r28	; 61
   140e8:	6b 01       	movw	r12, r22
   140ea:	e8 2e       	mov	r14, r24
   140ec:	75 2f       	mov	r23, r21
   140ee:	de 01       	movw	r26, r28
   140f0:	11 96       	adiw	r26, 0x01	; 1
    char tmp[64];
    int i=0;
   140f2:	80 e0       	ldi	r24, 0x00	; 0
   140f4:	90 e0       	ldi	r25, 0x00	; 0
   140f6:	8d 01       	movw	r16, r26
    while( *str && i < 62)
   140f8:	f6 01       	movw	r30, r12
   140fa:	5e 2d       	mov	r21, r14
   140fc:	0e 94 2a e6 	call	0x1cc54	; 0x1cc54 <__xload_1>
   14100:	66 23       	and	r22, r22
   14102:	51 f0       	breq	.+20     	; 0x14118 <print_var_P+0x50>
   14104:	8e 33       	cpi	r24, 0x3E	; 62
   14106:	91 05       	cpc	r25, r1
   14108:	39 f0       	breq	.+14     	; 0x14118 <print_var_P+0x50>
        tmp[i++] = *str++;
   1410a:	01 96       	adiw	r24, 0x01	; 1
   1410c:	5f ef       	ldi	r21, 0xFF	; 255
   1410e:	c5 1a       	sub	r12, r21
   14110:	d5 0a       	sbc	r13, r21
   14112:	e5 0a       	sbc	r14, r21
   14114:	6d 93       	st	X+, r22
   14116:	f0 cf       	rjmp	.-32     	; 0x140f8 <print_var_P+0x30>
    tmp[i++] = 0;
   14118:	f8 01       	movw	r30, r16
   1411a:	e8 0f       	add	r30, r24
   1411c:	f9 1f       	adc	r31, r25
   1411e:	10 82       	st	Z, r1

    printf("    %-25s = %8lxH (%ld)\n", tmp, val, val); 
   14120:	7f 93       	push	r23
   14122:	4f 93       	push	r20
   14124:	3f 93       	push	r19
   14126:	2f 93       	push	r18
   14128:	7f 93       	push	r23
   1412a:	4f 93       	push	r20
   1412c:	3f 93       	push	r19
   1412e:	2f 93       	push	r18
   14130:	1f 93       	push	r17
   14132:	0f 93       	push	r16
   14134:	85 e6       	ldi	r24, 0x65	; 101
   14136:	99 e1       	ldi	r25, 0x19	; 25
   14138:	1f 92       	push	r1
   1413a:	9f 93       	push	r25
   1413c:	8f 93       	push	r24
   1413e:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
}
   14142:	0f b6       	in	r0, 0x3f	; 63
   14144:	f8 94       	cli
   14146:	de bf       	out	0x3e, r29	; 62
   14148:	0f be       	out	0x3f, r0	; 63
   1414a:	cd bf       	out	0x3d, r28	; 61
   1414c:	c0 5c       	subi	r28, 0xC0	; 192
   1414e:	df 4f       	sbci	r29, 0xFF	; 255
   14150:	0f b6       	in	r0, 0x3f	; 63
   14152:	f8 94       	cli
   14154:	de bf       	out	0x3e, r29	; 62
   14156:	0f be       	out	0x3f, r0	; 63
   14158:	cd bf       	out	0x3d, r28	; 61
   1415a:	df 91       	pop	r29
   1415c:	cf 91       	pop	r28
   1415e:	1f 91       	pop	r17
   14160:	0f 91       	pop	r16
   14162:	ef 90       	pop	r14
   14164:	df 90       	pop	r13
   14166:	cf 90       	pop	r12
   14168:	08 95       	ret

0001416a <print_str_P>:
/// @brief Display Configuration File string
/// @param *str: title
/// @param *arg: string
/// @return  void
void print_str_P(__memx const char *str, char *arg)
{
   1416a:	cf 92       	push	r12
   1416c:	df 92       	push	r13
   1416e:	ef 92       	push	r14
   14170:	cf 93       	push	r28
   14172:	df 93       	push	r29
   14174:	cd b7       	in	r28, 0x3d	; 61
   14176:	de b7       	in	r29, 0x3e	; 62
   14178:	c0 54       	subi	r28, 0x40	; 64
   1417a:	d1 09       	sbc	r29, r1
   1417c:	0f b6       	in	r0, 0x3f	; 63
   1417e:	f8 94       	cli
   14180:	de bf       	out	0x3e, r29	; 62
   14182:	0f be       	out	0x3f, r0	; 63
   14184:	cd bf       	out	0x3d, r28	; 61
   14186:	6b 01       	movw	r12, r22
   14188:	e8 2e       	mov	r14, r24
   1418a:	75 2f       	mov	r23, r21
   1418c:	de 01       	movw	r26, r28
   1418e:	11 96       	adiw	r26, 0x01	; 1
    char tmp[64];
    int i=0;
   14190:	80 e0       	ldi	r24, 0x00	; 0
   14192:	90 e0       	ldi	r25, 0x00	; 0
   14194:	9d 01       	movw	r18, r26
    while( *str && i < 62)
   14196:	f6 01       	movw	r30, r12
   14198:	5e 2d       	mov	r21, r14
   1419a:	0e 94 2a e6 	call	0x1cc54	; 0x1cc54 <__xload_1>
   1419e:	66 23       	and	r22, r22
   141a0:	51 f0       	breq	.+20     	; 0x141b6 <print_str_P+0x4c>
   141a2:	8e 33       	cpi	r24, 0x3E	; 62
   141a4:	91 05       	cpc	r25, r1
   141a6:	39 f0       	breq	.+14     	; 0x141b6 <print_str_P+0x4c>
        tmp[i++] = *str++;
   141a8:	01 96       	adiw	r24, 0x01	; 1
   141aa:	5f ef       	ldi	r21, 0xFF	; 255
   141ac:	c5 1a       	sub	r12, r21
   141ae:	d5 0a       	sbc	r13, r21
   141b0:	e5 0a       	sbc	r14, r21
   141b2:	6d 93       	st	X+, r22
   141b4:	f0 cf       	rjmp	.-32     	; 0x14196 <print_str_P+0x2c>
    tmp[i++] = 0;
   141b6:	f9 01       	movw	r30, r18
   141b8:	e8 0f       	add	r30, r24
   141ba:	f9 1f       	adc	r31, r25
   141bc:	10 82       	st	Z, r1
    printf("    %-25s = \"%s\"\n", tmp, arg);   
   141be:	7f 93       	push	r23
   141c0:	4f 93       	push	r20
   141c2:	3f 93       	push	r19
   141c4:	2f 93       	push	r18
   141c6:	83 e5       	ldi	r24, 0x53	; 83
   141c8:	99 e1       	ldi	r25, 0x19	; 25
   141ca:	1f 92       	push	r1
   141cc:	9f 93       	push	r25
   141ce:	8f 93       	push	r24
   141d0:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
}
   141d4:	0f b6       	in	r0, 0x3f	; 63
   141d6:	f8 94       	cli
   141d8:	de bf       	out	0x3e, r29	; 62
   141da:	0f be       	out	0x3f, r0	; 63
   141dc:	cd bf       	out	0x3d, r28	; 61
   141de:	c0 5c       	subi	r28, 0xC0	; 192
   141e0:	df 4f       	sbci	r29, 0xFF	; 255
   141e2:	0f b6       	in	r0, 0x3f	; 63
   141e4:	f8 94       	cli
   141e6:	de bf       	out	0x3e, r29	; 62
   141e8:	0f be       	out	0x3f, r0	; 63
   141ea:	cd bf       	out	0x3d, r28	; 61
   141ec:	df 91       	pop	r29
   141ee:	cf 91       	pop	r28
   141f0:	ef 90       	pop	r14
   141f2:	df 90       	pop	r13
   141f4:	cf 90       	pop	r12
   141f6:	08 95       	ret

000141f8 <display_Addresses>:

/// ===============================================
/// @brief Display Configuration device address saummary
/// @return  void
void display_Addresses()
{
   141f8:	2f 92       	push	r2
   141fa:	3f 92       	push	r3
   141fc:	4f 92       	push	r4
   141fe:	6f 92       	push	r6
   14200:	7f 92       	push	r7
   14202:	8f 92       	push	r8
   14204:	af 92       	push	r10
   14206:	bf 92       	push	r11
   14208:	cf 92       	push	r12
   1420a:	df 92       	push	r13
   1420c:	ef 92       	push	r14
   1420e:	0f 93       	push	r16
   14210:	1f 93       	push	r17
   14212:	cf 93       	push	r28
   14214:	df 93       	push	r29
   14216:	cd b7       	in	r28, 0x3d	; 61
   14218:	de b7       	in	r29, 0x3e	; 62
   1421a:	2b 97       	sbiw	r28, 0x0b	; 11
   1421c:	0f b6       	in	r0, 0x3f	; 63
   1421e:	f8 94       	cli
   14220:	de bf       	out	0x3e, r29	; 62
   14222:	0f be       	out	0x3f, r0	; 63
   14224:	cd bf       	out	0x3d, r28	; 61
    int i;
    int address;
    printf("Listen and Talk Address Settings\n");
   14226:	81 e3       	ldi	r24, 0x31	; 49
   14228:	99 e1       	ldi	r25, 0x19	; 25
   1422a:	1f 92       	push	r1
   1422c:	9f 93       	push	r25
   1422e:	8f 93       	push	r24
   14230:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   14234:	04 ef       	ldi	r16, 0xF4	; 244
   14236:	1d e1       	ldi	r17, 0x1D	; 29
   14238:	0f 90       	pop	r0
   1423a:	0f 90       	pop	r0
   1423c:	0f 90       	pop	r0
            printf("  AMIGO_MSA   = %02XH\n",BASE_MSA + address );
        }
#endif
        if(Devices[i].TYPE == PRINTER_TYPE )
        {
            printf("  PRINTER_MLA = %02XH\n",BASE_MLA + address );
   1423e:	80 e9       	ldi	r24, 0x90	; 144
   14240:	98 e1       	ldi	r25, 0x18	; 24
   14242:	9c 01       	movw	r18, r24
   14244:	40 e0       	ldi	r20, 0x00	; 0
   14246:	29 83       	std	Y+1, r18	; 0x01
   14248:	3a 83       	std	Y+2, r19	; 0x02
   1424a:	4b 83       	std	Y+3, r20	; 0x03
            printf("  PRINTER_MTA = %02XH\n",BASE_MTA + address );
   1424c:	89 e7       	ldi	r24, 0x79	; 121
   1424e:	98 e1       	ldi	r25, 0x18	; 24
   14250:	9c 01       	movw	r18, r24
   14252:	40 e0       	ldi	r20, 0x00	; 0
   14254:	2c 83       	std	Y+4, r18	; 0x04
   14256:	3d 83       	std	Y+5, r19	; 0x05
   14258:	4e 83       	std	Y+6, r20	; 0x06
            printf("  PRINTER_MSA = %02XH\n",BASE_MSA + address );
   1425a:	82 e6       	ldi	r24, 0x62	; 98
   1425c:	98 e1       	ldi	r25, 0x18	; 24
   1425e:	9c 01       	movw	r18, r24
   14260:	40 e0       	ldi	r20, 0x00	; 0
   14262:	2f 83       	std	Y+7, r18	; 0x07
   14264:	38 87       	std	Y+8, r19	; 0x08
   14266:	49 87       	std	Y+9, r20	; 0x09
            printf("  SS80_MSA    = %02XH\n",BASE_MSA + address );
        }
#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
        {
            printf("  AMIGO_MLA   = %02XH\n",BASE_MLA + address );
   14268:	85 ed       	ldi	r24, 0xD5	; 213
   1426a:	98 e1       	ldi	r25, 0x18	; 24
   1426c:	6c 01       	movw	r12, r24
            printf("  AMIGO_MTA   = %02XH\n",BASE_MTA + address );
   1426e:	8e eb       	ldi	r24, 0xBE	; 190
   14270:	98 e1       	ldi	r25, 0x18	; 24
   14272:	3c 01       	movw	r6, r24
            printf("  AMIGO_MSA   = %02XH\n",BASE_MSA + address );
   14274:	87 ea       	ldi	r24, 0xA7	; 167
   14276:	98 e1       	ldi	r25, 0x18	; 24
   14278:	1c 01       	movw	r2, r24
            continue;
        address = Devices[i].ADDRESS;

        if(Devices[i].TYPE == SS80_TYPE)
        {
            printf("  SS80_MLA    = %02XH\n",BASE_MLA + address );
   1427a:	8a e1       	ldi	r24, 0x1A	; 26
   1427c:	a8 2e       	mov	r10, r24
   1427e:	89 e1       	ldi	r24, 0x19	; 25
   14280:	b8 2e       	mov	r11, r24
    int i;
    int address;
    printf("Listen and Talk Address Settings\n");
    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   14282:	f8 01       	movw	r30, r16
   14284:	80 81       	ld	r24, Z
   14286:	88 23       	and	r24, r24
   14288:	09 f4       	brne	.+2      	; 0x1428c <display_Addresses+0x94>
   1428a:	8a c0       	rjmp	.+276    	; 0x143a0 <display_Addresses+0x1a8>
            continue;
        address = Devices[i].ADDRESS;
   1428c:	f1 81       	ldd	r31, Z+1	; 0x01
   1428e:	2f 2f       	mov	r18, r31
   14290:	30 e0       	ldi	r19, 0x00	; 0
   14292:	3b 87       	std	Y+11, r19	; 0x0b
   14294:	2a 87       	std	Y+10, r18	; 0x0a

        if(Devices[i].TYPE == SS80_TYPE)
   14296:	83 30       	cpi	r24, 0x03	; 3
   14298:	49 f5       	brne	.+82     	; 0x142ec <display_Addresses+0xf4>
        {
            printf("  SS80_MLA    = %02XH\n",BASE_MLA + address );
   1429a:	c9 01       	movw	r24, r18
   1429c:	80 96       	adiw	r24, 0x20	; 32
   1429e:	9f 93       	push	r25
   142a0:	8f 93       	push	r24
   142a2:	c5 01       	movw	r24, r10
   142a4:	1f 92       	push	r1
   142a6:	9f 93       	push	r25
   142a8:	af 92       	push	r10
   142aa:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
            printf("  SS80_MTA    = %02XH\n",BASE_MTA + address );
   142ae:	8a 85       	ldd	r24, Y+10	; 0x0a
   142b0:	9b 85       	ldd	r25, Y+11	; 0x0b
   142b2:	80 5c       	subi	r24, 0xC0	; 192
   142b4:	9f 4f       	sbci	r25, 0xFF	; 255
   142b6:	9f 93       	push	r25
   142b8:	8f 93       	push	r24
   142ba:	83 e0       	ldi	r24, 0x03	; 3
   142bc:	99 e1       	ldi	r25, 0x19	; 25
   142be:	1f 92       	push	r1
   142c0:	9f 93       	push	r25
   142c2:	8f 93       	push	r24
   142c4:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
            printf("  SS80_MSA    = %02XH\n",BASE_MSA + address );
   142c8:	8a 85       	ldd	r24, Y+10	; 0x0a
   142ca:	9b 85       	ldd	r25, Y+11	; 0x0b
   142cc:	80 5a       	subi	r24, 0xA0	; 160
   142ce:	9f 4f       	sbci	r25, 0xFF	; 255
   142d0:	9f 93       	push	r25
   142d2:	8f 93       	push	r24
   142d4:	8c ee       	ldi	r24, 0xEC	; 236
   142d6:	98 e1       	ldi	r25, 0x18	; 24
   142d8:	1f 92       	push	r1
   142da:	9f 93       	push	r25
   142dc:	8f 93       	push	r24
   142de:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   142e2:	0f b6       	in	r0, 0x3f	; 63
   142e4:	f8 94       	cli
   142e6:	de bf       	out	0x3e, r29	; 62
   142e8:	0f be       	out	0x3f, r0	; 63
   142ea:	cd bf       	out	0x3d, r28	; 61
        }
#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   142ec:	f8 01       	movw	r30, r16
   142ee:	80 81       	ld	r24, Z
   142f0:	81 30       	cpi	r24, 0x01	; 1
   142f2:	29 f5       	brne	.+74     	; 0x1433e <display_Addresses+0x146>
        {
            printf("  AMIGO_MLA   = %02XH\n",BASE_MLA + address );
   142f4:	8a 85       	ldd	r24, Y+10	; 0x0a
   142f6:	9b 85       	ldd	r25, Y+11	; 0x0b
   142f8:	80 96       	adiw	r24, 0x20	; 32
   142fa:	9f 93       	push	r25
   142fc:	8f 93       	push	r24
   142fe:	1f 92       	push	r1
   14300:	df 92       	push	r13
   14302:	cf 92       	push	r12
   14304:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
            printf("  AMIGO_MTA   = %02XH\n",BASE_MTA + address );
   14308:	8a 85       	ldd	r24, Y+10	; 0x0a
   1430a:	9b 85       	ldd	r25, Y+11	; 0x0b
   1430c:	80 5c       	subi	r24, 0xC0	; 192
   1430e:	9f 4f       	sbci	r25, 0xFF	; 255
   14310:	9f 93       	push	r25
   14312:	8f 93       	push	r24
   14314:	1f 92       	push	r1
   14316:	7f 92       	push	r7
   14318:	6f 92       	push	r6
   1431a:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
            printf("  AMIGO_MSA   = %02XH\n",BASE_MSA + address );
   1431e:	8a 85       	ldd	r24, Y+10	; 0x0a
   14320:	9b 85       	ldd	r25, Y+11	; 0x0b
   14322:	80 5a       	subi	r24, 0xA0	; 160
   14324:	9f 4f       	sbci	r25, 0xFF	; 255
   14326:	9f 93       	push	r25
   14328:	8f 93       	push	r24
   1432a:	1f 92       	push	r1
   1432c:	3f 92       	push	r3
   1432e:	2f 92       	push	r2
   14330:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   14334:	0f b6       	in	r0, 0x3f	; 63
   14336:	f8 94       	cli
   14338:	de bf       	out	0x3e, r29	; 62
   1433a:	0f be       	out	0x3f, r0	; 63
   1433c:	cd bf       	out	0x3d, r28	; 61
        }
#endif
        if(Devices[i].TYPE == PRINTER_TYPE )
   1433e:	f8 01       	movw	r30, r16
   14340:	80 81       	ld	r24, Z
   14342:	84 30       	cpi	r24, 0x04	; 4
   14344:	69 f5       	brne	.+90     	; 0x143a0 <display_Addresses+0x1a8>
        {
            printf("  PRINTER_MLA = %02XH\n",BASE_MLA + address );
   14346:	8a 85       	ldd	r24, Y+10	; 0x0a
   14348:	9b 85       	ldd	r25, Y+11	; 0x0b
   1434a:	80 96       	adiw	r24, 0x20	; 32
   1434c:	9f 93       	push	r25
   1434e:	8f 93       	push	r24
   14350:	1f 92       	push	r1
   14352:	fa 81       	ldd	r31, Y+2	; 0x02
   14354:	ff 93       	push	r31
   14356:	29 81       	ldd	r18, Y+1	; 0x01
   14358:	2f 93       	push	r18
   1435a:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
            printf("  PRINTER_MTA = %02XH\n",BASE_MTA + address );
   1435e:	8a 85       	ldd	r24, Y+10	; 0x0a
   14360:	9b 85       	ldd	r25, Y+11	; 0x0b
   14362:	80 5c       	subi	r24, 0xC0	; 192
   14364:	9f 4f       	sbci	r25, 0xFF	; 255
   14366:	9f 93       	push	r25
   14368:	8f 93       	push	r24
   1436a:	1f 92       	push	r1
   1436c:	3d 81       	ldd	r19, Y+5	; 0x05
   1436e:	3f 93       	push	r19
   14370:	4c 81       	ldd	r20, Y+4	; 0x04
   14372:	4f 93       	push	r20
   14374:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
            printf("  PRINTER_MSA = %02XH\n",BASE_MSA + address );
   14378:	8a 85       	ldd	r24, Y+10	; 0x0a
   1437a:	9b 85       	ldd	r25, Y+11	; 0x0b
   1437c:	80 5a       	subi	r24, 0xA0	; 160
   1437e:	9f 4f       	sbci	r25, 0xFF	; 255
   14380:	9b 87       	std	Y+11, r25	; 0x0b
   14382:	8a 87       	std	Y+10, r24	; 0x0a
   14384:	9f 93       	push	r25
   14386:	8f 93       	push	r24
   14388:	1f 92       	push	r1
   1438a:	98 85       	ldd	r25, Y+8	; 0x08
   1438c:	9f 93       	push	r25
   1438e:	ef 81       	ldd	r30, Y+7	; 0x07
   14390:	ef 93       	push	r30
   14392:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   14396:	0f b6       	in	r0, 0x3f	; 63
   14398:	f8 94       	cli
   1439a:	de bf       	out	0x3e, r29	; 62
   1439c:	0f be       	out	0x3f, r0	; 63
   1439e:	cd bf       	out	0x3d, r28	; 61
   143a0:	05 5d       	subi	r16, 0xD5	; 213
   143a2:	1f 4f       	sbci	r17, 0xFF	; 255
void display_Addresses()
{
    int i;
    int address;
    printf("Listen and Talk Address Settings\n");
    for(i=0;i<MAX_DEVICES;++i)
   143a4:	3f e1       	ldi	r19, 0x1F	; 31
   143a6:	08 3f       	cpi	r16, 0xF8	; 248
   143a8:	13 07       	cpc	r17, r19
   143aa:	09 f0       	breq	.+2      	; 0x143ae <display_Addresses+0x1b6>
   143ac:	6a cf       	rjmp	.-300    	; 0x14282 <display_Addresses+0x8a>
            printf("  PRINTER_MLA = %02XH\n",BASE_MLA + address );
            printf("  PRINTER_MTA = %02XH\n",BASE_MTA + address );
            printf("  PRINTER_MSA = %02XH\n",BASE_MSA + address );
        }
    }
    printf("\n");
   143ae:	80 e6       	ldi	r24, 0x60	; 96
   143b0:	98 e1       	ldi	r25, 0x18	; 24
   143b2:	1f 92       	push	r1
   143b4:	9f 93       	push	r25
   143b6:	8f 93       	push	r24
   143b8:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
}
   143bc:	0f 90       	pop	r0
   143be:	0f 90       	pop	r0
   143c0:	0f 90       	pop	r0
   143c2:	2b 96       	adiw	r28, 0x0b	; 11
   143c4:	0f b6       	in	r0, 0x3f	; 63
   143c6:	f8 94       	cli
   143c8:	de bf       	out	0x3e, r29	; 62
   143ca:	0f be       	out	0x3f, r0	; 63
   143cc:	cd bf       	out	0x3d, r28	; 61
   143ce:	df 91       	pop	r29
   143d0:	cf 91       	pop	r28
   143d2:	1f 91       	pop	r17
   143d4:	0f 91       	pop	r16
   143d6:	ef 90       	pop	r14
   143d8:	df 90       	pop	r13
   143da:	cf 90       	pop	r12
   143dc:	bf 90       	pop	r11
   143de:	af 90       	pop	r10
   143e0:	8f 90       	pop	r8
   143e2:	7f 90       	pop	r7
   143e4:	6f 90       	pop	r6
   143e6:	4f 90       	pop	r4
   143e8:	3f 90       	pop	r3
   143ea:	2f 90       	pop	r2
   143ec:	08 95       	ret

000143ee <display_Config>:

/// ===============================================
/// @brief Display current Configuration File values
/// @return  void
void display_Config()
{
   143ee:	2f 92       	push	r2
   143f0:	3f 92       	push	r3
   143f2:	4f 92       	push	r4
   143f4:	6f 92       	push	r6
   143f6:	7f 92       	push	r7
   143f8:	8f 92       	push	r8
   143fa:	af 92       	push	r10
   143fc:	bf 92       	push	r11
   143fe:	cf 92       	push	r12
   14400:	df 92       	push	r13
   14402:	ef 92       	push	r14
   14404:	0f 93       	push	r16
   14406:	1f 93       	push	r17
   14408:	cf 93       	push	r28
   1440a:	df 93       	push	r29
   1440c:	cd b7       	in	r28, 0x3d	; 61
   1440e:	de b7       	in	r29, 0x3e	; 62
   14410:	2b 97       	sbiw	r28, 0x0b	; 11
   14412:	0f b6       	in	r0, 0x3f	; 63
   14414:	f8 94       	cli
   14416:	de bf       	out	0x3e, r29	; 62
   14418:	0f be       	out	0x3f, r0	; 63
   1441a:	cd bf       	out	0x3d, r28	; 61
#ifdef AMIGO
    ///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    printf("Current Configuration Settings\n");
   1441c:	80 e4       	ldi	r24, 0x40	; 64
   1441e:	98 e1       	ldi	r25, 0x18	; 24
   14420:	1f 92       	push	r1
   14422:	9f 93       	push	r25
   14424:	8f 93       	push	r24
   14426:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1442a:	04 ef       	ldi	r16, 0xF4	; 244
   1442c:	1d e1       	ldi	r17, 0x1D	; 29
   1442e:	0f 90       	pop	r0
   14430:	0f 90       	pop	r0
   14432:	0f 90       	pop	r0
            printf("PRINTER\n");
            printf("  CONFIG\n");
                print_var("ADDRESS", (uint32_t) PRINTERp->HEADER.ADDRESS);
			printf("  END\n");
        }
		printf("END\n");
   14434:	87 eb       	ldi	r24, 0xB7	; 183
   14436:	95 e1       	ldi	r25, 0x15	; 21
   14438:	9c 01       	movw	r18, r24
   1443a:	40 e0       	ldi	r20, 0x00	; 0
   1443c:	29 83       	std	Y+1, r18	; 0x01
   1443e:	3a 83       	std	Y+2, r19	; 0x02
   14440:	4b 83       	std	Y+3, r20	; 0x03
		printf("\n");
   14442:	85 eb       	ldi	r24, 0xB5	; 181
   14444:	95 e1       	ldi	r25, 0x15	; 21
   14446:	9c 01       	movw	r18, r24
   14448:	40 e0       	ldi	r20, 0x00	; 0
   1444a:	2c 83       	std	Y+4, r18	; 0x04
   1444c:	3d 83       	std	Y+5, r19	; 0x05
   1444e:	4e 83       	std	Y+6, r20	; 0x06

        if(Devices[i].TYPE == PRINTER_TYPE )
        {
            PRINTERp= (PRINTERDeviceType *)Devices[i].dev;

            printf("PRINTER\n");
   14450:	85 ed       	ldi	r24, 0xD5	; 213
   14452:	95 e1       	ldi	r25, 0x15	; 21
   14454:	9c 01       	movw	r18, r24
   14456:	40 e0       	ldi	r20, 0x00	; 0
   14458:	2f 83       	std	Y+7, r18	; 0x07
   1445a:	38 87       	std	Y+8, r19	; 0x08
   1445c:	49 87       	std	Y+9, r20	; 0x09
            printf("  CONFIG\n");
   1445e:	8b ec       	ldi	r24, 0xCB	; 203
   14460:	95 e1       	ldi	r25, 0x15	; 21
   14462:	1c 01       	movw	r2, r24
                print_var("ADDRESS", (uint32_t) PRINTERp->HEADER.ADDRESS);
   14464:	83 ec       	ldi	r24, 0xC3	; 195
   14466:	95 e1       	ldi	r25, 0x15	; 21
   14468:	3c 01       	movw	r6, r24
   1446a:	81 2c       	mov	r8, r1
			printf("  END\n");
   1446c:	8c eb       	ldi	r24, 0xBC	; 188
   1446e:	95 e1       	ldi	r25, 0x15	; 21
   14470:	6c 01       	movw	r12, r24
#endif

    printf("Current Configuration Settings\n");
    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   14472:	f8 01       	movw	r30, r16
   14474:	80 81       	ld	r24, Z
   14476:	88 23       	and	r24, r24
   14478:	09 f4       	brne	.+2      	; 0x1447c <display_Config+0x8e>
   1447a:	6d c2       	rjmp	.+1242   	; 0x14956 <display_Config+0x568>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   1447c:	83 30       	cpi	r24, 0x03	; 3
   1447e:	09 f0       	breq	.+2      	; 0x14482 <display_Config+0x94>
   14480:	75 c1       	rjmp	.+746    	; 0x1476c <display_Config+0x37e>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   14482:	27 a1       	ldd	r18, Z+39	; 0x27
   14484:	30 a5       	ldd	r19, Z+40	; 0x28
   14486:	3b 87       	std	Y+11, r19	; 0x0b
   14488:	2a 87       	std	Y+10, r18	; 0x0a

            printf("SS80 %s\n", Devices[i].model);
   1448a:	c8 01       	movw	r24, r16
   1448c:	07 96       	adiw	r24, 0x07	; 7
   1448e:	9f 93       	push	r25
   14490:	8f 93       	push	r24
   14492:	87 e3       	ldi	r24, 0x37	; 55
   14494:	98 e1       	ldi	r25, 0x18	; 24
   14496:	1f 92       	push	r1
   14498:	9f 93       	push	r25
   1449a:	8f 93       	push	r24
   1449c:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
			printf("  # HP85 BASIC ADDRESS :D7%d0\n", (int) SS80p->HEADER.ADDRESS);
   144a0:	ea 85       	ldd	r30, Y+10	; 0x0a
   144a2:	fb 85       	ldd	r31, Y+11	; 0x0b
   144a4:	80 81       	ld	r24, Z
   144a6:	1f 92       	push	r1
   144a8:	8f 93       	push	r24
   144aa:	88 e1       	ldi	r24, 0x18	; 24
   144ac:	98 e1       	ldi	r25, 0x18	; 24
   144ae:	1f 92       	push	r1
   144b0:	9f 93       	push	r25
   144b2:	8f 93       	push	r24
   144b4:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
            printf("  CONFIG\n");
   144b8:	8e e0       	ldi	r24, 0x0E	; 14
   144ba:	98 e1       	ldi	r25, 0x18	; 24
   144bc:	1f 92       	push	r1
   144be:	9f 93       	push	r25
   144c0:	8f 93       	push	r24
   144c2:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
                print_var("ADDRESS", (uint32_t) SS80p->HEADER.ADDRESS);
   144c6:	ea 85       	ldd	r30, Y+10	; 0x0a
   144c8:	fb 85       	ldd	r31, Y+11	; 0x0b
   144ca:	20 81       	ld	r18, Z
   144cc:	30 e0       	ldi	r19, 0x00	; 0
   144ce:	40 e0       	ldi	r20, 0x00	; 0
   144d0:	50 e0       	ldi	r21, 0x00	; 0
   144d2:	66 e0       	ldi	r22, 0x06	; 6
   144d4:	78 e1       	ldi	r23, 0x18	; 24
   144d6:	80 e0       	ldi	r24, 0x00	; 0
   144d8:	f7 dd       	rcall	.-1042   	; 0x140c8 <print_var_P>
                print_var("PPR", (uint32_t) SS80p->HEADER.PPR);
   144da:	ea 85       	ldd	r30, Y+10	; 0x0a
   144dc:	fb 85       	ldd	r31, Y+11	; 0x0b
   144de:	21 81       	ldd	r18, Z+1	; 0x01
   144e0:	30 e0       	ldi	r19, 0x00	; 0
   144e2:	40 e0       	ldi	r20, 0x00	; 0
   144e4:	50 e0       	ldi	r21, 0x00	; 0
   144e6:	62 e0       	ldi	r22, 0x02	; 2
   144e8:	78 e1       	ldi	r23, 0x18	; 24
   144ea:	80 e0       	ldi	r24, 0x00	; 0
   144ec:	ed dd       	rcall	.-1062   	; 0x140c8 <print_var_P>
                print_str("FILE", SS80p->HEADER.NAME);
   144ee:	4a 85       	ldd	r20, Y+10	; 0x0a
   144f0:	5b 85       	ldd	r21, Y+11	; 0x0b
   144f2:	4e 5f       	subi	r20, 0xFE	; 254
   144f4:	5f 4f       	sbci	r21, 0xFF	; 255
   144f6:	6d ef       	ldi	r22, 0xFD	; 253
   144f8:	77 e1       	ldi	r23, 0x17	; 23
   144fa:	80 e0       	ldi	r24, 0x00	; 0
   144fc:	36 de       	rcall	.-916    	; 0x1416a <print_str_P>
			printf("  END\n");
   144fe:	86 ef       	ldi	r24, 0xF6	; 246
   14500:	97 e1       	ldi	r25, 0x17	; 23
   14502:	1f 92       	push	r1
   14504:	9f 93       	push	r25
   14506:	8f 93       	push	r24
   14508:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
            printf("  HEADER\n");
   1450c:	8c ee       	ldi	r24, 0xEC	; 236
   1450e:	97 e1       	ldi	r25, 0x17	; 23
   14510:	1f 92       	push	r1
   14512:	9f 93       	push	r25
   14514:	8f 93       	push	r24
   14516:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
                print_var("ID", (uint32_t) SS80p->CONFIG.ID);
   1451a:	ea 85       	ldd	r30, Y+10	; 0x0a
   1451c:	fb 85       	ldd	r31, Y+11	; 0x0b
   1451e:	23 a1       	ldd	r18, Z+35	; 0x23
   14520:	34 a1       	ldd	r19, Z+36	; 0x24
   14522:	40 e0       	ldi	r20, 0x00	; 0
   14524:	50 e0       	ldi	r21, 0x00	; 0
   14526:	69 ee       	ldi	r22, 0xE9	; 233
   14528:	77 e1       	ldi	r23, 0x17	; 23
   1452a:	80 e0       	ldi	r24, 0x00	; 0
   1452c:	cd dd       	rcall	.-1126   	; 0x140c8 <print_var_P>
			printf("  END\n");
   1452e:	82 ee       	ldi	r24, 0xE2	; 226
   14530:	97 e1       	ldi	r25, 0x17	; 23
   14532:	1f 92       	push	r1
   14534:	9f 93       	push	r25
   14536:	8f 93       	push	r24
   14538:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
            printf("  CONTROLLER\n");
   1453c:	84 ed       	ldi	r24, 0xD4	; 212
   1453e:	97 e1       	ldi	r25, 0x17	; 23
   14540:	1f 92       	push	r1
   14542:	9f 93       	push	r25
   14544:	8f 93       	push	r24
   14546:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
                print_var("UNITS_INSTALLED", (uint32_t) SS80p->CONTROLLER.UNITS_INSTALLED);
   1454a:	ea 85       	ldd	r30, Y+10	; 0x0a
   1454c:	fb 85       	ldd	r31, Y+11	; 0x0b
   1454e:	25 a1       	ldd	r18, Z+37	; 0x25
   14550:	36 a1       	ldd	r19, Z+38	; 0x26
   14552:	40 e0       	ldi	r20, 0x00	; 0
   14554:	50 e0       	ldi	r21, 0x00	; 0
   14556:	64 ec       	ldi	r22, 0xC4	; 196
   14558:	77 e1       	ldi	r23, 0x17	; 23
   1455a:	80 e0       	ldi	r24, 0x00	; 0
   1455c:	b5 dd       	rcall	.-1174   	; 0x140c8 <print_var_P>
                print_var("TRANSFER_RATE", (uint32_t)  SS80p->CONTROLLER.TRANSFER_RATE);
   1455e:	ea 85       	ldd	r30, Y+10	; 0x0a
   14560:	fb 85       	ldd	r31, Y+11	; 0x0b
   14562:	27 a1       	ldd	r18, Z+39	; 0x27
   14564:	30 a5       	ldd	r19, Z+40	; 0x28
   14566:	40 e0       	ldi	r20, 0x00	; 0
   14568:	50 e0       	ldi	r21, 0x00	; 0
   1456a:	66 eb       	ldi	r22, 0xB6	; 182
   1456c:	77 e1       	ldi	r23, 0x17	; 23
   1456e:	80 e0       	ldi	r24, 0x00	; 0
   14570:	ab dd       	rcall	.-1194   	; 0x140c8 <print_var_P>
                print_var("TYPE", (uint32_t)  SS80p->CONTROLLER.TYPE);
   14572:	ea 85       	ldd	r30, Y+10	; 0x0a
   14574:	fb 85       	ldd	r31, Y+11	; 0x0b
   14576:	21 a5       	ldd	r18, Z+41	; 0x29
   14578:	30 e0       	ldi	r19, 0x00	; 0
   1457a:	40 e0       	ldi	r20, 0x00	; 0
   1457c:	50 e0       	ldi	r21, 0x00	; 0
   1457e:	61 eb       	ldi	r22, 0xB1	; 177
   14580:	77 e1       	ldi	r23, 0x17	; 23
   14582:	80 e0       	ldi	r24, 0x00	; 0
   14584:	a1 dd       	rcall	.-1214   	; 0x140c8 <print_var_P>
			printf("  END\n");
   14586:	8a ea       	ldi	r24, 0xAA	; 170
   14588:	97 e1       	ldi	r25, 0x17	; 23
   1458a:	1f 92       	push	r1
   1458c:	9f 93       	push	r25
   1458e:	8f 93       	push	r24
   14590:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
            printf("  UNIT\n");
   14594:	82 ea       	ldi	r24, 0xA2	; 162
   14596:	97 e1       	ldi	r25, 0x17	; 23
   14598:	1f 92       	push	r1
   1459a:	9f 93       	push	r25
   1459c:	8f 93       	push	r24
   1459e:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
                print_var("UNIT_TYPE", (uint32_t)SS80p->UNIT.UNIT_TYPE);
   145a2:	ea 85       	ldd	r30, Y+10	; 0x0a
   145a4:	fb 85       	ldd	r31, Y+11	; 0x0b
   145a6:	22 a5       	ldd	r18, Z+42	; 0x2a
   145a8:	30 e0       	ldi	r19, 0x00	; 0
   145aa:	40 e0       	ldi	r20, 0x00	; 0
   145ac:	50 e0       	ldi	r21, 0x00	; 0
   145ae:	68 e9       	ldi	r22, 0x98	; 152
   145b0:	77 e1       	ldi	r23, 0x17	; 23
   145b2:	80 e0       	ldi	r24, 0x00	; 0
   145b4:	89 dd       	rcall	.-1262   	; 0x140c8 <print_var_P>
                print_var("DEVICE_NUMBER", (uint32_t)SS80p->UNIT.DEVICE_NUMBER);
   145b6:	ea 85       	ldd	r30, Y+10	; 0x0a
   145b8:	fb 85       	ldd	r31, Y+11	; 0x0b
   145ba:	23 a5       	ldd	r18, Z+43	; 0x2b
   145bc:	34 a5       	ldd	r19, Z+44	; 0x2c
   145be:	45 a5       	ldd	r20, Z+45	; 0x2d
   145c0:	56 a5       	ldd	r21, Z+46	; 0x2e
   145c2:	6a e8       	ldi	r22, 0x8A	; 138
   145c4:	77 e1       	ldi	r23, 0x17	; 23
   145c6:	80 e0       	ldi	r24, 0x00	; 0
                print_var("BYTES_PER_BLOCK", (uint32_t)SS80p->UNIT.BYTES_PER_BLOCK);
   145c8:	7f dd       	rcall	.-1282   	; 0x140c8 <print_var_P>
   145ca:	ea 85       	ldd	r30, Y+10	; 0x0a
   145cc:	fb 85       	ldd	r31, Y+11	; 0x0b
   145ce:	27 a5       	ldd	r18, Z+47	; 0x2f
   145d0:	30 a9       	ldd	r19, Z+48	; 0x30
   145d2:	40 e0       	ldi	r20, 0x00	; 0
   145d4:	50 e0       	ldi	r21, 0x00	; 0
   145d6:	6a e7       	ldi	r22, 0x7A	; 122
   145d8:	77 e1       	ldi	r23, 0x17	; 23
                print_var("BUFFERED_BLOCKS", (uint32_t)SS80p->UNIT.BUFFERED_BLOCKS);
   145da:	80 e0       	ldi	r24, 0x00	; 0
   145dc:	75 dd       	rcall	.-1302   	; 0x140c8 <print_var_P>
   145de:	ea 85       	ldd	r30, Y+10	; 0x0a
   145e0:	fb 85       	ldd	r31, Y+11	; 0x0b
   145e2:	21 a9       	ldd	r18, Z+49	; 0x31
   145e4:	30 e0       	ldi	r19, 0x00	; 0
   145e6:	40 e0       	ldi	r20, 0x00	; 0
   145e8:	50 e0       	ldi	r21, 0x00	; 0
   145ea:	6a e6       	ldi	r22, 0x6A	; 106
   145ec:	77 e1       	ldi	r23, 0x17	; 23
                print_var("BURST_SIZE", (uint32_t)SS80p->UNIT.BURST_SIZE);
   145ee:	80 e0       	ldi	r24, 0x00	; 0
   145f0:	6b dd       	rcall	.-1322   	; 0x140c8 <print_var_P>
   145f2:	ea 85       	ldd	r30, Y+10	; 0x0a
   145f4:	fb 85       	ldd	r31, Y+11	; 0x0b
   145f6:	22 a9       	ldd	r18, Z+50	; 0x32
   145f8:	30 e0       	ldi	r19, 0x00	; 0
   145fa:	40 e0       	ldi	r20, 0x00	; 0
   145fc:	50 e0       	ldi	r21, 0x00	; 0
   145fe:	6f e5       	ldi	r22, 0x5F	; 95
   14600:	77 e1       	ldi	r23, 0x17	; 23
                print_var("BLOCK_TIME", (uint32_t)SS80p->UNIT.BLOCK_TIME);
   14602:	80 e0       	ldi	r24, 0x00	; 0
   14604:	61 dd       	rcall	.-1342   	; 0x140c8 <print_var_P>
   14606:	ea 85       	ldd	r30, Y+10	; 0x0a
   14608:	fb 85       	ldd	r31, Y+11	; 0x0b
   1460a:	23 a9       	ldd	r18, Z+51	; 0x33
   1460c:	34 a9       	ldd	r19, Z+52	; 0x34
   1460e:	40 e0       	ldi	r20, 0x00	; 0
   14610:	50 e0       	ldi	r21, 0x00	; 0
   14612:	64 e5       	ldi	r22, 0x54	; 84
   14614:	77 e1       	ldi	r23, 0x17	; 23
                print_var("CONTINOUS_TRANSFER_RATE", (uint32_t)SS80p->UNIT.CONTINOUS_TRANSFER_RATE);
   14616:	80 e0       	ldi	r24, 0x00	; 0
   14618:	57 dd       	rcall	.-1362   	; 0x140c8 <print_var_P>
   1461a:	ea 85       	ldd	r30, Y+10	; 0x0a
   1461c:	fb 85       	ldd	r31, Y+11	; 0x0b
   1461e:	25 a9       	ldd	r18, Z+53	; 0x35
   14620:	36 a9       	ldd	r19, Z+54	; 0x36
   14622:	40 e0       	ldi	r20, 0x00	; 0
   14624:	50 e0       	ldi	r21, 0x00	; 0
   14626:	6c e3       	ldi	r22, 0x3C	; 60
   14628:	77 e1       	ldi	r23, 0x17	; 23
                print_var("OPTIMAL_RETRY_TIME", (uint32_t)SS80p->UNIT.OPTIMAL_RETRY_TIME);
   1462a:	80 e0       	ldi	r24, 0x00	; 0
   1462c:	4d dd       	rcall	.-1382   	; 0x140c8 <print_var_P>
   1462e:	ea 85       	ldd	r30, Y+10	; 0x0a
   14630:	fb 85       	ldd	r31, Y+11	; 0x0b
   14632:	27 a9       	ldd	r18, Z+55	; 0x37
   14634:	30 ad       	ldd	r19, Z+56	; 0x38
   14636:	40 e0       	ldi	r20, 0x00	; 0
   14638:	50 e0       	ldi	r21, 0x00	; 0
   1463a:	69 e2       	ldi	r22, 0x29	; 41
   1463c:	77 e1       	ldi	r23, 0x17	; 23
                print_var("ACCESS_TIME", (uint32_t)SS80p->UNIT.ACCESS_TIME);
   1463e:	80 e0       	ldi	r24, 0x00	; 0
   14640:	43 dd       	rcall	.-1402   	; 0x140c8 <print_var_P>
   14642:	ea 85       	ldd	r30, Y+10	; 0x0a
   14644:	fb 85       	ldd	r31, Y+11	; 0x0b
   14646:	21 ad       	ldd	r18, Z+57	; 0x39
   14648:	32 ad       	ldd	r19, Z+58	; 0x3a
   1464a:	40 e0       	ldi	r20, 0x00	; 0
   1464c:	50 e0       	ldi	r21, 0x00	; 0
   1464e:	6d e1       	ldi	r22, 0x1D	; 29
   14650:	77 e1       	ldi	r23, 0x17	; 23
                print_var("MAXIMUM_INTERLEAVE", (uint32_t)SS80p->UNIT.MAXIMUM_INTERLEAVE);
   14652:	80 e0       	ldi	r24, 0x00	; 0
   14654:	39 dd       	rcall	.-1422   	; 0x140c8 <print_var_P>
   14656:	ea 85       	ldd	r30, Y+10	; 0x0a
   14658:	fb 85       	ldd	r31, Y+11	; 0x0b
   1465a:	23 ad       	ldd	r18, Z+59	; 0x3b
   1465c:	30 e0       	ldi	r19, 0x00	; 0
   1465e:	40 e0       	ldi	r20, 0x00	; 0
   14660:	50 e0       	ldi	r21, 0x00	; 0
   14662:	6a e0       	ldi	r22, 0x0A	; 10
   14664:	77 e1       	ldi	r23, 0x17	; 23
                print_var("FIXED_VOLUMES", (uint32_t)SS80p->UNIT.FIXED_VOLUMES);
   14666:	80 e0       	ldi	r24, 0x00	; 0
   14668:	2f dd       	rcall	.-1442   	; 0x140c8 <print_var_P>
   1466a:	ea 85       	ldd	r30, Y+10	; 0x0a
   1466c:	fb 85       	ldd	r31, Y+11	; 0x0b
   1466e:	24 ad       	ldd	r18, Z+60	; 0x3c
   14670:	30 e0       	ldi	r19, 0x00	; 0
   14672:	40 e0       	ldi	r20, 0x00	; 0
   14674:	50 e0       	ldi	r21, 0x00	; 0
   14676:	6c ef       	ldi	r22, 0xFC	; 252
   14678:	76 e1       	ldi	r23, 0x16	; 22
                print_var("REMOVABLE_VOLUMES", (uint32_t)SS80p->UNIT.REMOVABLE_VOLUMES);
   1467a:	80 e0       	ldi	r24, 0x00	; 0
   1467c:	25 dd       	rcall	.-1462   	; 0x140c8 <print_var_P>
   1467e:	ea 85       	ldd	r30, Y+10	; 0x0a
   14680:	fb 85       	ldd	r31, Y+11	; 0x0b
   14682:	25 ad       	ldd	r18, Z+61	; 0x3d
   14684:	30 e0       	ldi	r19, 0x00	; 0
   14686:	40 e0       	ldi	r20, 0x00	; 0
   14688:	50 e0       	ldi	r21, 0x00	; 0
   1468a:	6a ee       	ldi	r22, 0xEA	; 234
   1468c:	76 e1       	ldi	r23, 0x16	; 22
   1468e:	80 e0       	ldi	r24, 0x00	; 0
			printf("  END\n");
   14690:	1b dd       	rcall	.-1482   	; 0x140c8 <print_var_P>
   14692:	83 ee       	ldi	r24, 0xE3	; 227
   14694:	96 e1       	ldi	r25, 0x16	; 22
   14696:	1f 92       	push	r1
   14698:	9f 93       	push	r25
   1469a:	8f 93       	push	r24
   1469c:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
            printf("  VOLUME\n");
   146a0:	0f b6       	in	r0, 0x3f	; 63
   146a2:	f8 94       	cli
   146a4:	de bf       	out	0x3e, r29	; 62
   146a6:	0f be       	out	0x3f, r0	; 63
   146a8:	cd bf       	out	0x3d, r28	; 61
   146aa:	89 ed       	ldi	r24, 0xD9	; 217
   146ac:	96 e1       	ldi	r25, 0x16	; 22
   146ae:	1f 92       	push	r1
   146b0:	9f 93       	push	r25
   146b2:	8f 93       	push	r24
                print_var("MAX_CYLINDER", (uint32_t)SS80p->VOLUME.MAX_CYLINDER);
   146b4:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   146b8:	ea 85       	ldd	r30, Y+10	; 0x0a
   146ba:	fb 85       	ldd	r31, Y+11	; 0x0b
   146bc:	fe 96       	adiw	r30, 0x3e	; 62
   146be:	20 81       	ld	r18, Z
   146c0:	31 81       	ldd	r19, Z+1	; 0x01
   146c2:	42 81       	ldd	r20, Z+2	; 0x02
   146c4:	53 81       	ldd	r21, Z+3	; 0x03
   146c6:	6c ec       	ldi	r22, 0xCC	; 204
   146c8:	76 e1       	ldi	r23, 0x16	; 22
                print_var("MAX_HEAD", (uint32_t)SS80p->VOLUME.MAX_HEAD);
   146ca:	80 e0       	ldi	r24, 0x00	; 0
   146cc:	fd dc       	rcall	.-1542   	; 0x140c8 <print_var_P>
   146ce:	ea 85       	ldd	r30, Y+10	; 0x0a
   146d0:	fb 85       	ldd	r31, Y+11	; 0x0b
   146d2:	ee 5b       	subi	r30, 0xBE	; 190
   146d4:	ff 4f       	sbci	r31, 0xFF	; 255
   146d6:	20 81       	ld	r18, Z
   146d8:	30 e0       	ldi	r19, 0x00	; 0
   146da:	40 e0       	ldi	r20, 0x00	; 0
   146dc:	50 e0       	ldi	r21, 0x00	; 0
   146de:	63 ec       	ldi	r22, 0xC3	; 195
   146e0:	76 e1       	ldi	r23, 0x16	; 22
                print_var("MAX_SECTOR", (uint32_t)SS80p->VOLUME.MAX_SECTOR);
   146e2:	80 e0       	ldi	r24, 0x00	; 0
   146e4:	f1 dc       	rcall	.-1566   	; 0x140c8 <print_var_P>
   146e6:	ea 85       	ldd	r30, Y+10	; 0x0a
   146e8:	fb 85       	ldd	r31, Y+11	; 0x0b
   146ea:	ed 5b       	subi	r30, 0xBD	; 189
   146ec:	ff 4f       	sbci	r31, 0xFF	; 255
   146ee:	20 81       	ld	r18, Z
   146f0:	31 81       	ldd	r19, Z+1	; 0x01
   146f2:	40 e0       	ldi	r20, 0x00	; 0
   146f4:	50 e0       	ldi	r21, 0x00	; 0
   146f6:	68 eb       	ldi	r22, 0xB8	; 184
   146f8:	76 e1       	ldi	r23, 0x16	; 22
                print_var("MAX_BLOCK_NUMBER", (uint32_t)SS80p->VOLUME.MAX_BLOCK_NUMBER);
   146fa:	80 e0       	ldi	r24, 0x00	; 0
   146fc:	e5 dc       	rcall	.-1590   	; 0x140c8 <print_var_P>
   146fe:	aa 84       	ldd	r10, Y+10	; 0x0a
   14700:	bb 84       	ldd	r11, Y+11	; 0x0b
   14702:	35 e4       	ldi	r19, 0x45	; 69
   14704:	a3 0e       	add	r10, r19
   14706:	b1 1c       	adc	r11, r1
   14708:	f5 01       	movw	r30, r10
   1470a:	20 81       	ld	r18, Z
   1470c:	31 81       	ldd	r19, Z+1	; 0x01
   1470e:	42 81       	ldd	r20, Z+2	; 0x02
   14710:	53 81       	ldd	r21, Z+3	; 0x03
   14712:	67 ea       	ldi	r22, 0xA7	; 167
   14714:	76 e1       	ldi	r23, 0x16	; 22
                print_var("INTERLEAVE", (uint32_t)SS80p->VOLUME.INTERLEAVE);
   14716:	80 e0       	ldi	r24, 0x00	; 0
   14718:	d7 dc       	rcall	.-1618   	; 0x140c8 <print_var_P>
   1471a:	2a 85       	ldd	r18, Y+10	; 0x0a
   1471c:	3b 85       	ldd	r19, Y+11	; 0x0b
   1471e:	27 5b       	subi	r18, 0xB7	; 183
   14720:	3f 4f       	sbci	r19, 0xFF	; 255
   14722:	f9 01       	movw	r30, r18
   14724:	20 81       	ld	r18, Z
   14726:	30 e0       	ldi	r19, 0x00	; 0
   14728:	40 e0       	ldi	r20, 0x00	; 0
   1472a:	50 e0       	ldi	r21, 0x00	; 0
   1472c:	6c e9       	ldi	r22, 0x9C	; 156
   1472e:	76 e1       	ldi	r23, 0x16	; 22
                print_var("# BLOCKS", (uint32_t)SS80p->VOLUME.MAX_BLOCK_NUMBER+1);
   14730:	80 e0       	ldi	r24, 0x00	; 0
   14732:	ca dc       	rcall	.-1644   	; 0x140c8 <print_var_P>
   14734:	f5 01       	movw	r30, r10
   14736:	80 81       	ld	r24, Z
   14738:	91 81       	ldd	r25, Z+1	; 0x01
   1473a:	a2 81       	ldd	r26, Z+2	; 0x02
   1473c:	b3 81       	ldd	r27, Z+3	; 0x03
   1473e:	9c 01       	movw	r18, r24
   14740:	ad 01       	movw	r20, r26
   14742:	2f 5f       	subi	r18, 0xFF	; 255
   14744:	3f 4f       	sbci	r19, 0xFF	; 255
   14746:	4f 4f       	sbci	r20, 0xFF	; 255
   14748:	5f 4f       	sbci	r21, 0xFF	; 255
   1474a:	63 e9       	ldi	r22, 0x93	; 147
   1474c:	76 e1       	ldi	r23, 0x16	; 22
   1474e:	80 e0       	ldi	r24, 0x00	; 0
			printf("  END\n");
   14750:	bb dc       	rcall	.-1674   	; 0x140c8 <print_var_P>
   14752:	8c e8       	ldi	r24, 0x8C	; 140
   14754:	96 e1       	ldi	r25, 0x16	; 22
   14756:	1f 92       	push	r1
   14758:	9f 93       	push	r25
   1475a:	8f 93       	push	r24
   1475c:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   14760:	0f 90       	pop	r0
   14762:	0f 90       	pop	r0
   14764:	0f 90       	pop	r0
   14766:	0f 90       	pop	r0
   14768:	0f 90       	pop	r0
        } // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   1476a:	0f 90       	pop	r0
   1476c:	f8 01       	movw	r30, r16
   1476e:	80 81       	ld	r24, Z
   14770:	81 30       	cpi	r24, 0x01	; 1
   14772:	09 f0       	breq	.+2      	; 0x14776 <display_Config+0x388>
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
   14774:	b5 c0       	rjmp	.+362    	; 0x148e0 <display_Config+0x4f2>
   14776:	27 a1       	ldd	r18, Z+39	; 0x27
   14778:	30 a5       	ldd	r19, Z+40	; 0x28
   1477a:	3b 87       	std	Y+11, r19	; 0x0b

            printf("AMIGO %s\n", Devices[i].model);
   1477c:	2a 87       	std	Y+10, r18	; 0x0a
   1477e:	c8 01       	movw	r24, r16
   14780:	07 96       	adiw	r24, 0x07	; 7
   14782:	9f 93       	push	r25
   14784:	8f 93       	push	r24
   14786:	e2 e8       	ldi	r30, 0x82	; 130
   14788:	f6 e1       	ldi	r31, 0x16	; 22
   1478a:	cf 01       	movw	r24, r30
   1478c:	1f 92       	push	r1
   1478e:	9f 93       	push	r25
   14790:	ef 93       	push	r30
   14792:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
			printf("  # HP85 BASIC ADDRESS :D7%d0\n", (int) AMIGOp->HEADER.ADDRESS);
   14796:	ea 85       	ldd	r30, Y+10	; 0x0a
   14798:	fb 85       	ldd	r31, Y+11	; 0x0b
   1479a:	80 81       	ld	r24, Z
   1479c:	1f 92       	push	r1
   1479e:	8f 93       	push	r24
   147a0:	83 e6       	ldi	r24, 0x63	; 99
   147a2:	96 e1       	ldi	r25, 0x16	; 22
   147a4:	1f 92       	push	r1
   147a6:	9f 93       	push	r25
   147a8:	8f 93       	push	r24
            printf("  HEADER\n");
   147aa:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   147ae:	89 e5       	ldi	r24, 0x59	; 89
   147b0:	96 e1       	ldi	r25, 0x16	; 22
   147b2:	1f 92       	push	r1
   147b4:	9f 93       	push	r25
                print_var("ADDRESS", (uint32_t) AMIGOp->HEADER.ADDRESS);
   147b6:	8f 93       	push	r24
   147b8:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   147bc:	ea 85       	ldd	r30, Y+10	; 0x0a
   147be:	fb 85       	ldd	r31, Y+11	; 0x0b
   147c0:	20 81       	ld	r18, Z
   147c2:	30 e0       	ldi	r19, 0x00	; 0
   147c4:	40 e0       	ldi	r20, 0x00	; 0
   147c6:	50 e0       	ldi	r21, 0x00	; 0
   147c8:	61 e5       	ldi	r22, 0x51	; 81
                print_var("PPR", (uint32_t) AMIGOp->HEADER.PPR);
   147ca:	76 e1       	ldi	r23, 0x16	; 22
   147cc:	80 e0       	ldi	r24, 0x00	; 0
   147ce:	7c dc       	rcall	.-1800   	; 0x140c8 <print_var_P>
   147d0:	ea 85       	ldd	r30, Y+10	; 0x0a
   147d2:	fb 85       	ldd	r31, Y+11	; 0x0b
   147d4:	21 81       	ldd	r18, Z+1	; 0x01
   147d6:	30 e0       	ldi	r19, 0x00	; 0
   147d8:	40 e0       	ldi	r20, 0x00	; 0
   147da:	50 e0       	ldi	r21, 0x00	; 0
   147dc:	6d e4       	ldi	r22, 0x4D	; 77
   147de:	76 e1       	ldi	r23, 0x16	; 22
                print_str("FILE", AMIGOp->HEADER.NAME);
   147e0:	80 e0       	ldi	r24, 0x00	; 0
   147e2:	72 dc       	rcall	.-1820   	; 0x140c8 <print_var_P>
   147e4:	4a 85       	ldd	r20, Y+10	; 0x0a
   147e6:	5b 85       	ldd	r21, Y+11	; 0x0b
   147e8:	4e 5f       	subi	r20, 0xFE	; 254
   147ea:	5f 4f       	sbci	r21, 0xFF	; 255
   147ec:	68 e4       	ldi	r22, 0x48	; 72
   147ee:	76 e1       	ldi	r23, 0x16	; 22
			printf("  END\n");
   147f0:	80 e0       	ldi	r24, 0x00	; 0
   147f2:	bb dc       	rcall	.-1674   	; 0x1416a <print_str_P>
   147f4:	81 e4       	ldi	r24, 0x41	; 65
   147f6:	96 e1       	ldi	r25, 0x16	; 22
   147f8:	1f 92       	push	r1
   147fa:	9f 93       	push	r25
   147fc:	8f 93       	push	r24
            printf("  CONFIG\n");
   147fe:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   14802:	87 e3       	ldi	r24, 0x37	; 55
   14804:	96 e1       	ldi	r25, 0x16	; 22
   14806:	1f 92       	push	r1
   14808:	9f 93       	push	r25
   1480a:	8f 93       	push	r24
                print_var("ID", (uint32_t) AMIGOp->CONFIG.ID);
   1480c:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   14810:	ea 85       	ldd	r30, Y+10	; 0x0a
   14812:	fb 85       	ldd	r31, Y+11	; 0x0b
   14814:	23 a1       	ldd	r18, Z+35	; 0x23
   14816:	34 a1       	ldd	r19, Z+36	; 0x24
   14818:	40 e0       	ldi	r20, 0x00	; 0
   1481a:	50 e0       	ldi	r21, 0x00	; 0
   1481c:	64 e3       	ldi	r22, 0x34	; 52
   1481e:	76 e1       	ldi	r23, 0x16	; 22
			printf("  END\n");
   14820:	80 e0       	ldi	r24, 0x00	; 0
   14822:	52 dc       	rcall	.-1884   	; 0x140c8 <print_var_P>
   14824:	8d e2       	ldi	r24, 0x2D	; 45
   14826:	96 e1       	ldi	r25, 0x16	; 22
   14828:	1f 92       	push	r1
   1482a:	9f 93       	push	r25
   1482c:	8f 93       	push	r24
            printf("  GEOMETRY\n");
   1482e:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   14832:	81 e2       	ldi	r24, 0x21	; 33
   14834:	96 e1       	ldi	r25, 0x16	; 22
   14836:	1f 92       	push	r1
   14838:	9f 93       	push	r25
                print_var("BYTES_PER_SECTOR", (uint32_t) AMIGOp->GEOMETRY.BYTES_PER_SECTOR);
   1483a:	8f 93       	push	r24
   1483c:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   14840:	ea 85       	ldd	r30, Y+10	; 0x0a
   14842:	fb 85       	ldd	r31, Y+11	; 0x0b
   14844:	25 a1       	ldd	r18, Z+37	; 0x25
   14846:	36 a1       	ldd	r19, Z+38	; 0x26
   14848:	03 2e       	mov	r0, r19
   1484a:	00 0c       	add	r0, r0
   1484c:	44 0b       	sbc	r20, r20
   1484e:	55 0b       	sbc	r21, r21
   14850:	60 e1       	ldi	r22, 0x10	; 16
                print_var("SECTORS_PER_TRACK", (uint32_t) AMIGOp->GEOMETRY.SECTORS_PER_TRACK);
   14852:	76 e1       	ldi	r23, 0x16	; 22
   14854:	80 e0       	ldi	r24, 0x00	; 0
   14856:	38 dc       	rcall	.-1936   	; 0x140c8 <print_var_P>
   14858:	ea 85       	ldd	r30, Y+10	; 0x0a
   1485a:	fb 85       	ldd	r31, Y+11	; 0x0b
   1485c:	27 a1       	ldd	r18, Z+39	; 0x27
   1485e:	30 a5       	ldd	r19, Z+40	; 0x28
   14860:	03 2e       	mov	r0, r19
   14862:	00 0c       	add	r0, r0
   14864:	44 0b       	sbc	r20, r20
   14866:	55 0b       	sbc	r21, r21
   14868:	6e ef       	ldi	r22, 0xFE	; 254
                print_var("HEADS", (uint32_t) AMIGOp->GEOMETRY.HEADS);
   1486a:	75 e1       	ldi	r23, 0x15	; 21
   1486c:	80 e0       	ldi	r24, 0x00	; 0
   1486e:	2c dc       	rcall	.-1960   	; 0x140c8 <print_var_P>
   14870:	ea 85       	ldd	r30, Y+10	; 0x0a
   14872:	fb 85       	ldd	r31, Y+11	; 0x0b
   14874:	21 a5       	ldd	r18, Z+41	; 0x29
   14876:	32 a5       	ldd	r19, Z+42	; 0x2a
   14878:	03 2e       	mov	r0, r19
   1487a:	00 0c       	add	r0, r0
   1487c:	44 0b       	sbc	r20, r20
   1487e:	55 0b       	sbc	r21, r21
   14880:	68 ef       	ldi	r22, 0xF8	; 248
                print_var("CYLINDERS", (uint32_t) AMIGOp->GEOMETRY.CYLINDERS);
   14882:	75 e1       	ldi	r23, 0x15	; 21
   14884:	80 e0       	ldi	r24, 0x00	; 0
   14886:	20 dc       	rcall	.-1984   	; 0x140c8 <print_var_P>
   14888:	ea 85       	ldd	r30, Y+10	; 0x0a
   1488a:	fb 85       	ldd	r31, Y+11	; 0x0b
   1488c:	23 a5       	ldd	r18, Z+43	; 0x2b
   1488e:	34 a5       	ldd	r19, Z+44	; 0x2c
   14890:	03 2e       	mov	r0, r19
   14892:	00 0c       	add	r0, r0
   14894:	44 0b       	sbc	r20, r20
   14896:	55 0b       	sbc	r21, r21
   14898:	6e ee       	ldi	r22, 0xEE	; 238
   1489a:	75 e1       	ldi	r23, 0x15	; 21
                print_var("# BLOCKS", (uint32_t)AMIGOp->GEOMETRY.CYLINDERS * AMIGOp->GEOMETRY.SECTORS_PER_TRACK * AMIGOp->GEOMETRY.HEADS );
   1489c:	80 e0       	ldi	r24, 0x00	; 0
   1489e:	14 dc       	rcall	.-2008   	; 0x140c8 <print_var_P>
   148a0:	ea 85       	ldd	r30, Y+10	; 0x0a
   148a2:	fb 85       	ldd	r31, Y+11	; 0x0b
   148a4:	23 a5       	ldd	r18, Z+43	; 0x2b
   148a6:	34 a5       	ldd	r19, Z+44	; 0x2c
   148a8:	a7 a1       	ldd	r26, Z+39	; 0x27
   148aa:	b0 a5       	ldd	r27, Z+40	; 0x28
   148ac:	0e 94 b8 e5 	call	0x1cb70	; 0x1cb70 <__mulhisi3>
   148b0:	9b 01       	movw	r18, r22
   148b2:	ac 01       	movw	r20, r24
   148b4:	a1 a5       	ldd	r26, Z+41	; 0x29
   148b6:	b2 a5       	ldd	r27, Z+42	; 0x2a
   148b8:	0e 94 dd e5 	call	0x1cbba	; 0x1cbba <__mulshisi3>
   148bc:	9b 01       	movw	r18, r22
   148be:	ac 01       	movw	r20, r24
   148c0:	65 ee       	ldi	r22, 0xE5	; 229
   148c2:	75 e1       	ldi	r23, 0x15	; 21
   148c4:	80 e0       	ldi	r24, 0x00	; 0
			printf("  END\n");
   148c6:	00 dc       	rcall	.-2048   	; 0x140c8 <print_var_P>
   148c8:	8e ed       	ldi	r24, 0xDE	; 222
   148ca:	95 e1       	ldi	r25, 0x15	; 21
   148cc:	1f 92       	push	r1
   148ce:	9f 93       	push	r25
   148d0:	8f 93       	push	r24
   148d2:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   148d6:	0f b6       	in	r0, 0x3f	; 63
   148d8:	f8 94       	cli
   148da:	de bf       	out	0x3e, r29	; 62
        } 
#endif // #ifdef AMIGO

        if(Devices[i].TYPE == PRINTER_TYPE )
   148dc:	0f be       	out	0x3f, r0	; 63
   148de:	cd bf       	out	0x3d, r28	; 61
   148e0:	f8 01       	movw	r30, r16
   148e2:	80 81       	ld	r24, Z
        {
            PRINTERp= (PRINTERDeviceType *)Devices[i].dev;
   148e4:	84 30       	cpi	r24, 0x04	; 4
   148e6:	19 f5       	brne	.+70     	; 0x1492e <display_Config+0x540>
   148e8:	27 a1       	ldd	r18, Z+39	; 0x27
   148ea:	30 a5       	ldd	r19, Z+40	; 0x28

            printf("PRINTER\n");
   148ec:	3b 87       	std	Y+11, r19	; 0x0b
   148ee:	2a 87       	std	Y+10, r18	; 0x0a
   148f0:	1f 92       	push	r1
   148f2:	38 85       	ldd	r19, Y+8	; 0x08
   148f4:	3f 93       	push	r19
   148f6:	4f 81       	ldd	r20, Y+7	; 0x07
   148f8:	4f 93       	push	r20
            printf("  CONFIG\n");
   148fa:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   148fe:	1f 92       	push	r1
   14900:	3f 92       	push	r3
   14902:	2f 92       	push	r2
                print_var("ADDRESS", (uint32_t) PRINTERp->HEADER.ADDRESS);
   14904:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   14908:	ea 85       	ldd	r30, Y+10	; 0x0a
   1490a:	fb 85       	ldd	r31, Y+11	; 0x0b
   1490c:	20 81       	ld	r18, Z
   1490e:	30 e0       	ldi	r19, 0x00	; 0
   14910:	40 e0       	ldi	r20, 0x00	; 0
   14912:	50 e0       	ldi	r21, 0x00	; 0
   14914:	88 2d       	mov	r24, r8
   14916:	b3 01       	movw	r22, r6
			printf("  END\n");
   14918:	d7 db       	rcall	.-2130   	; 0x140c8 <print_var_P>
   1491a:	1f 92       	push	r1
   1491c:	df 92       	push	r13
   1491e:	cf 92       	push	r12
   14920:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   14924:	0f b6       	in	r0, 0x3f	; 63
   14926:	f8 94       	cli
   14928:	de bf       	out	0x3e, r29	; 62
   1492a:	0f be       	out	0x3f, r0	; 63
        }
		printf("END\n");
   1492c:	cd bf       	out	0x3d, r28	; 61
   1492e:	1f 92       	push	r1
   14930:	3a 81       	ldd	r19, Y+2	; 0x02
   14932:	3f 93       	push	r19
   14934:	49 81       	ldd	r20, Y+1	; 0x01
   14936:	4f 93       	push	r20
   14938:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
		printf("\n");
   1493c:	1f 92       	push	r1
   1493e:	8d 81       	ldd	r24, Y+5	; 0x05
   14940:	8f 93       	push	r24
   14942:	9c 81       	ldd	r25, Y+4	; 0x04
   14944:	9f 93       	push	r25
   14946:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1494a:	0f 90       	pop	r0
   1494c:	0f 90       	pop	r0
   1494e:	0f 90       	pop	r0
   14950:	0f 90       	pop	r0
   14952:	0f 90       	pop	r0
   14954:	0f 90       	pop	r0
   14956:	05 5d       	subi	r16, 0xD5	; 213
    ///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    printf("Current Configuration Settings\n");
    for(i=0;i<MAX_DEVICES;++i)
   14958:	1f 4f       	sbci	r17, 0xFF	; 255
   1495a:	ef e1       	ldi	r30, 0x1F	; 31
   1495c:	08 3f       	cpi	r16, 0xF8	; 248
   1495e:	1e 07       	cpc	r17, r30
   14960:	09 f0       	breq	.+2      	; 0x14964 <display_Config+0x576>
			printf("  END\n");
        }
		printf("END\n");
		printf("\n");
    }
    printf("END\n");
   14962:	87 cd       	rjmp	.-1266   	; 0x14472 <display_Config+0x84>
   14964:	80 eb       	ldi	r24, 0xB0	; 176
   14966:	95 e1       	ldi	r25, 0x15	; 21
   14968:	1f 92       	push	r1
   1496a:	9f 93       	push	r25
   1496c:	8f 93       	push	r24
   1496e:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    printf("\n");
   14972:	8e ea       	ldi	r24, 0xAE	; 174
   14974:	95 e1       	ldi	r25, 0x15	; 21
   14976:	1f 92       	push	r1
   14978:	9f 93       	push	r25
   1497a:	8f 93       	push	r24
   1497c:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
}
   14980:	0f 90       	pop	r0
   14982:	0f 90       	pop	r0
   14984:	0f 90       	pop	r0
   14986:	0f 90       	pop	r0
   14988:	0f 90       	pop	r0
   1498a:	0f 90       	pop	r0
   1498c:	2b 96       	adiw	r28, 0x0b	; 11
   1498e:	0f b6       	in	r0, 0x3f	; 63
   14990:	f8 94       	cli
   14992:	de bf       	out	0x3e, r29	; 62
   14994:	0f be       	out	0x3f, r0	; 63
   14996:	cd bf       	out	0x3d, r28	; 61
   14998:	df 91       	pop	r29
   1499a:	cf 91       	pop	r28
   1499c:	1f 91       	pop	r17
   1499e:	0f 91       	pop	r16
   149a0:	ef 90       	pop	r14
   149a2:	df 90       	pop	r13
   149a4:	cf 90       	pop	r12
   149a6:	bf 90       	pop	r11
   149a8:	af 90       	pop	r10
   149aa:	8f 90       	pop	r8
   149ac:	7f 90       	pop	r7
   149ae:	6f 90       	pop	r6
   149b0:	4f 90       	pop	r4
   149b2:	3f 90       	pop	r3
   149b4:	2f 90       	pop	r2
   149b6:	08 95       	ret

000149b8 <format_drives>:

/// ===============================================
/// @brief Format devices that have no image file
/// @return  void
void format_drives()
{
   149b8:	2f 92       	push	r2
   149ba:	3f 92       	push	r3
   149bc:	4f 92       	push	r4
   149be:	5f 92       	push	r5
   149c0:	6f 92       	push	r6
   149c2:	7f 92       	push	r7
   149c4:	8f 92       	push	r8
   149c6:	af 92       	push	r10
   149c8:	bf 92       	push	r11
   149ca:	cf 92       	push	r12
   149cc:	df 92       	push	r13
   149ce:	ef 92       	push	r14
   149d0:	ff 92       	push	r15
   149d2:	0f 93       	push	r16
   149d4:	1f 93       	push	r17
   149d6:	cf 93       	push	r28
   149d8:	df 93       	push	r29
   149da:	cd b7       	in	r28, 0x3d	; 61
   149dc:	de b7       	in	r29, 0x3e	; 62
   149de:	cd 55       	subi	r28, 0x5D	; 93
   149e0:	d1 09       	sbc	r29, r1
   149e2:	0f b6       	in	r0, 0x3f	; 63
   149e4:	f8 94       	cli
   149e6:	de bf       	out	0x3e, r29	; 62
   149e8:	0f be       	out	0x3f, r0	; 63
   149ea:	cd bf       	out	0x3d, r28	; 61
   149ec:	84 ef       	ldi	r24, 0xF4	; 244
   149ee:	a8 2e       	mov	r10, r24
   149f0:	8d e1       	ldi	r24, 0x1D	; 29
   149f2:	b8 2e       	mov	r11, r24
    int i;
    struct stat st;
    long sectors;
    char label[32];
    int ss80 = 1;
    int amigo = 1;
   149f4:	21 e0       	ldi	r18, 0x01	; 1
   149f6:	30 e0       	ldi	r19, 0x00	; 0
   149f8:	65 96       	adiw	r28, 0x15	; 21
   149fa:	3f af       	std	Y+63, r19	; 0x3f
   149fc:	2e af       	std	Y+62, r18	; 0x3e
   149fe:	65 97       	sbiw	r28, 0x15	; 21
{
    int i;
    struct stat st;
    long sectors;
    char label[32];
    int ss80 = 1;
   14a00:	81 e0       	ldi	r24, 0x01	; 1
   14a02:	90 e0       	ldi	r25, 0x00	; 0
   14a04:	63 96       	adiw	r28, 0x13	; 19
   14a06:	9f af       	std	Y+63, r25	; 0x3f
   14a08:	8e af       	std	Y+62, r24	; 0x3e
   14a0a:	63 97       	sbiw	r28, 0x13	; 19
                {
                    printf("Can not use non 256 byte sectors\n");
                    continue;
                }
                sectors = Devices[i].BLOCKS;
                sprintf(label,"AMIGO%d", amigo);
   14a0c:	8a e5       	ldi	r24, 0x5A	; 90
   14a0e:	95 e1       	ldi	r25, 0x15	; 21
   14a10:	9c 01       	movw	r18, r24
   14a12:	40 e0       	ldi	r20, 0x00	; 0
   14a14:	68 96       	adiw	r28, 0x18	; 24
   14a16:	2d af       	std	Y+61, r18	; 0x3d
   14a18:	3e af       	std	Y+62, r19	; 0x3e
   14a1a:	4f af       	std	Y+63, r20	; 0x3f
   14a1c:	68 97       	sbiw	r28, 0x18	; 24
   14a1e:	2e 01       	movw	r4, r28
   14a20:	31 e3       	ldi	r19, 0x31	; 49
   14a22:	43 0e       	add	r4, r19
   14a24:	51 1c       	adc	r5, r1
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
            if(stat(AMIGOp->HEADER.NAME, &st) == -1) 
            {
                if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
                {
                    printf("Can not use non 256 byte sectors\n");
   14a26:	82 e6       	ldi	r24, 0x62	; 98
   14a28:	95 e1       	ldi	r25, 0x15	; 21
   14a2a:	9c 01       	movw	r18, r24
   14a2c:	40 e0       	ldi	r20, 0x00	; 0
   14a2e:	6b 96       	adiw	r28, 0x1b	; 27
   14a30:	2d af       	std	Y+61, r18	; 0x3d
   14a32:	3e af       	std	Y+62, r19	; 0x3e
   14a34:	4f af       	std	Y+63, r20	; 0x3f
   14a36:	6b 97       	sbiw	r28, 0x1b	; 27
                }
                //SS80p->VOLUME.MAX_CYLINDER;
                //SS80p->VOLUME.MAX_HEAD;
                //SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
                sprintf(label,"SS80-%d", ss80);
   14a38:	84 e8       	ldi	r24, 0x84	; 132
   14a3a:	95 e1       	ldi	r25, 0x15	; 21
   14a3c:	3c 01       	movw	r6, r24

            if(stat(SS80p->HEADER.NAME, &st) == -1) 
            {
                if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
                {
                    printf("Can not use non 256 byte sectors\n");
   14a3e:	8c e8       	ldi	r24, 0x8C	; 140
   14a40:	95 e1       	ldi	r25, 0x15	; 21
   14a42:	9c 01       	movw	r18, r24
   14a44:	40 e0       	ldi	r20, 0x00	; 0
   14a46:	6e 96       	adiw	r28, 0x1e	; 30
   14a48:	2d af       	std	Y+61, r18	; 0x3d
   14a4a:	3e af       	std	Y+62, r19	; 0x3e
   14a4c:	4f af       	std	Y+63, r20	; 0x3f
   14a4e:	6e 97       	sbiw	r28, 0x1e	; 30
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   14a50:	f5 01       	movw	r30, r10
   14a52:	80 81       	ld	r24, Z
   14a54:	88 23       	and	r24, r24
   14a56:	09 f4       	brne	.+2      	; 0x14a5a <format_drives+0xa2>
   14a58:	a9 c0       	rjmp	.+338    	; 0x14bac <format_drives+0x1f4>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   14a5a:	83 30       	cpi	r24, 0x03	; 3
   14a5c:	09 f0       	breq	.+2      	; 0x14a60 <format_drives+0xa8>
   14a5e:	4a c0       	rjmp	.+148    	; 0x14af4 <format_drives+0x13c>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   14a60:	07 a1       	ldd	r16, Z+39	; 0x27
   14a62:	10 a5       	ldd	r17, Z+40	; 0x28

            if(stat(SS80p->HEADER.NAME, &st) == -1) 
   14a64:	18 01       	movw	r2, r16
   14a66:	f2 e0       	ldi	r31, 0x02	; 2
   14a68:	2f 0e       	add	r2, r31
   14a6a:	31 1c       	adc	r3, r1
   14a6c:	be 01       	movw	r22, r28
   14a6e:	6f 5f       	subi	r22, 0xFF	; 255
   14a70:	7f 4f       	sbci	r23, 0xFF	; 255
   14a72:	c1 01       	movw	r24, r2
   14a74:	0e 94 57 7a 	call	0xf4ae	; 0xf4ae <stat>
   14a78:	01 96       	adiw	r24, 0x01	; 1
   14a7a:	99 f5       	brne	.+102    	; 0x14ae2 <format_drives+0x12a>
            {
                if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
   14a7c:	f8 01       	movw	r30, r16
   14a7e:	87 a5       	ldd	r24, Z+47	; 0x2f
   14a80:	90 a9       	ldd	r25, Z+48	; 0x30
   14a82:	81 15       	cp	r24, r1
   14a84:	91 40       	sbci	r25, 0x01	; 1
   14a86:	49 f0       	breq	.+18     	; 0x14a9a <format_drives+0xe2>
                {
                    printf("Can not use non 256 byte sectors\n");
   14a88:	1f 92       	push	r1
   14a8a:	6d 96       	adiw	r28, 0x1d	; 29
   14a8c:	2f ad       	ldd	r18, Y+63	; 0x3f
   14a8e:	6d 97       	sbiw	r28, 0x1d	; 29
   14a90:	2f 93       	push	r18
   14a92:	6c 96       	adiw	r28, 0x1c	; 28
   14a94:	3f ad       	ldd	r19, Y+63	; 0x3f
   14a96:	6c 97       	sbiw	r28, 0x1c	; 28
   14a98:	4f c0       	rjmp	.+158    	; 0x14b38 <format_drives+0x180>
                    continue;
                }
                //SS80p->VOLUME.MAX_CYLINDER;
                //SS80p->VOLUME.MAX_HEAD;
                //SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
   14a9a:	f5 01       	movw	r30, r10
   14a9c:	c3 80       	ldd	r12, Z+3	; 0x03
   14a9e:	d4 80       	ldd	r13, Z+4	; 0x04
   14aa0:	e5 80       	ldd	r14, Z+5	; 0x05
   14aa2:	f6 80       	ldd	r15, Z+6	; 0x06
                sprintf(label,"SS80-%d", ss80);
   14aa4:	63 96       	adiw	r28, 0x13	; 19
   14aa6:	ff ad       	ldd	r31, Y+63	; 0x3f
   14aa8:	63 97       	sbiw	r28, 0x13	; 19
   14aaa:	ff 93       	push	r31
   14aac:	62 96       	adiw	r28, 0x12	; 18
   14aae:	2f ad       	ldd	r18, Y+63	; 0x3f
   14ab0:	62 97       	sbiw	r28, 0x12	; 18
   14ab2:	2f 93       	push	r18
   14ab4:	1f 92       	push	r1
   14ab6:	7f 92       	push	r7
   14ab8:	6f 92       	push	r6
   14aba:	5f 92       	push	r5
   14abc:	4f 92       	push	r4
   14abe:	0e 94 4a 47 	call	0x8e94	; 0x8e94 <sprintf_P>
#ifdef LIF_SUPPORT
                lif_create_image(SS80p->HEADER.NAME,
                    label,
                    lif_dir_count(sectors), 
   14ac2:	c7 01       	movw	r24, r14
   14ac4:	b6 01       	movw	r22, r12
   14ac6:	1c d1       	rcall	.+568    	; 0x14d00 <lif_dir_count>
   14ac8:	9b 01       	movw	r18, r22
   14aca:	ac 01       	movw	r20, r24
                //SS80p->VOLUME.MAX_HEAD;
                //SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
                sprintf(label,"SS80-%d", ss80);
#ifdef LIF_SUPPORT
                lif_create_image(SS80p->HEADER.NAME,
   14acc:	87 01       	movw	r16, r14
   14ace:	76 01       	movw	r14, r12
   14ad0:	b2 01       	movw	r22, r4
   14ad2:	c1 01       	movw	r24, r2
   14ad4:	0e 94 1a e0 	call	0x1c034	; 0x1c034 <lif_create_image>
   14ad8:	0f b6       	in	r0, 0x3f	; 63
   14ada:	f8 94       	cli
   14adc:	de bf       	out	0x3e, r29	; 62
   14ade:	0f be       	out	0x3f, r0	; 63
   14ae0:	cd bf       	out	0x3d, r28	; 61
#else
                printf("please create a SS80 LIF image with %ld sectors and 128 directory sectors\n", sectors);
#endif

            }
            ss80++;
   14ae2:	63 96       	adiw	r28, 0x13	; 19
   14ae4:	ee ad       	ldd	r30, Y+62	; 0x3e
   14ae6:	ff ad       	ldd	r31, Y+63	; 0x3f
   14ae8:	63 97       	sbiw	r28, 0x13	; 19
   14aea:	31 96       	adiw	r30, 0x01	; 1
   14aec:	63 96       	adiw	r28, 0x13	; 19
   14aee:	ff af       	std	Y+63, r31	; 0x3f
   14af0:	ee af       	std	Y+62, r30	; 0x3e
   14af2:	63 97       	sbiw	r28, 0x13	; 19
        } // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   14af4:	f5 01       	movw	r30, r10
   14af6:	80 81       	ld	r24, Z
   14af8:	81 30       	cpi	r24, 0x01	; 1
   14afa:	09 f0       	breq	.+2      	; 0x14afe <format_drives+0x146>
   14afc:	57 c0       	rjmp	.+174    	; 0x14bac <format_drives+0x1f4>
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
   14afe:	07 a1       	ldd	r16, Z+39	; 0x27
   14b00:	10 a5       	ldd	r17, Z+40	; 0x28
            if(stat(AMIGOp->HEADER.NAME, &st) == -1) 
   14b02:	18 01       	movw	r2, r16
   14b04:	f2 e0       	ldi	r31, 0x02	; 2
   14b06:	2f 0e       	add	r2, r31
   14b08:	31 1c       	adc	r3, r1
   14b0a:	be 01       	movw	r22, r28
   14b0c:	6f 5f       	subi	r22, 0xFF	; 255
   14b0e:	7f 4f       	sbci	r23, 0xFF	; 255
   14b10:	c1 01       	movw	r24, r2
   14b12:	0e 94 57 7a 	call	0xf4ae	; 0xf4ae <stat>
   14b16:	01 96       	adiw	r24, 0x01	; 1
   14b18:	09 f0       	breq	.+2      	; 0x14b1c <format_drives+0x164>
   14b1a:	3f c0       	rjmp	.+126    	; 0x14b9a <format_drives+0x1e2>
            {
                if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
   14b1c:	f8 01       	movw	r30, r16
   14b1e:	85 a1       	ldd	r24, Z+37	; 0x25
   14b20:	96 a1       	ldd	r25, Z+38	; 0x26
   14b22:	81 15       	cp	r24, r1
   14b24:	91 40       	sbci	r25, 0x01	; 1
   14b26:	79 f0       	breq	.+30     	; 0x14b46 <format_drives+0x18e>
                {
                    printf("Can not use non 256 byte sectors\n");
   14b28:	1f 92       	push	r1
   14b2a:	6a 96       	adiw	r28, 0x1a	; 26
   14b2c:	2f ad       	ldd	r18, Y+63	; 0x3f
   14b2e:	6a 97       	sbiw	r28, 0x1a	; 26
   14b30:	2f 93       	push	r18
   14b32:	69 96       	adiw	r28, 0x19	; 25
   14b34:	3f ad       	ldd	r19, Y+63	; 0x3f
   14b36:	69 97       	sbiw	r28, 0x19	; 25
   14b38:	3f 93       	push	r19
   14b3a:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
                    continue;
   14b3e:	0f 90       	pop	r0
   14b40:	0f 90       	pop	r0
   14b42:	0f 90       	pop	r0
   14b44:	33 c0       	rjmp	.+102    	; 0x14bac <format_drives+0x1f4>
                }
                sectors = Devices[i].BLOCKS;
   14b46:	f5 01       	movw	r30, r10
   14b48:	c3 80       	ldd	r12, Z+3	; 0x03
   14b4a:	d4 80       	ldd	r13, Z+4	; 0x04
   14b4c:	e5 80       	ldd	r14, Z+5	; 0x05
   14b4e:	f6 80       	ldd	r15, Z+6	; 0x06
                sprintf(label,"AMIGO%d", amigo);
   14b50:	65 96       	adiw	r28, 0x15	; 21
   14b52:	ff ad       	ldd	r31, Y+63	; 0x3f
   14b54:	65 97       	sbiw	r28, 0x15	; 21
   14b56:	ff 93       	push	r31
   14b58:	64 96       	adiw	r28, 0x14	; 20
   14b5a:	2f ad       	ldd	r18, Y+63	; 0x3f
   14b5c:	64 97       	sbiw	r28, 0x14	; 20
   14b5e:	2f 93       	push	r18
   14b60:	1f 92       	push	r1
   14b62:	67 96       	adiw	r28, 0x17	; 23
   14b64:	3f ad       	ldd	r19, Y+63	; 0x3f
   14b66:	67 97       	sbiw	r28, 0x17	; 23
   14b68:	3f 93       	push	r19
   14b6a:	66 96       	adiw	r28, 0x16	; 22
   14b6c:	4f ad       	ldd	r20, Y+63	; 0x3f
   14b6e:	66 97       	sbiw	r28, 0x16	; 22
   14b70:	4f 93       	push	r20
   14b72:	5f 92       	push	r5
   14b74:	4f 92       	push	r4
   14b76:	0e 94 4a 47 	call	0x8e94	; 0x8e94 <sprintf_P>
#ifdef LIF_SUPPORT
                lif_create_image(AMIGOp->HEADER.NAME,
                    label,
                    lif_dir_count(sectors), 
   14b7a:	c7 01       	movw	r24, r14
   14b7c:	b6 01       	movw	r22, r12
   14b7e:	c0 d0       	rcall	.+384    	; 0x14d00 <lif_dir_count>
   14b80:	9b 01       	movw	r18, r22
   14b82:	ac 01       	movw	r20, r24
                    continue;
                }
                sectors = Devices[i].BLOCKS;
                sprintf(label,"AMIGO%d", amigo);
#ifdef LIF_SUPPORT
                lif_create_image(AMIGOp->HEADER.NAME,
   14b84:	87 01       	movw	r16, r14
   14b86:	76 01       	movw	r14, r12
   14b88:	b2 01       	movw	r22, r4
   14b8a:	c1 01       	movw	r24, r2
   14b8c:	0e 94 1a e0 	call	0x1c034	; 0x1c034 <lif_create_image>
   14b90:	0f b6       	in	r0, 0x3f	; 63
   14b92:	f8 94       	cli
   14b94:	de bf       	out	0x3e, r29	; 62
   14b96:	0f be       	out	0x3f, r0	; 63
   14b98:	cd bf       	out	0x3d, r28	; 61
                    sectors);
#else
                printf("please create a AMIGO LIF image with %ld sectors and 15 directory sectors\n", sectors);
#endif
            }
            amigo++;
   14b9a:	65 96       	adiw	r28, 0x15	; 21
   14b9c:	ee ad       	ldd	r30, Y+62	; 0x3e
   14b9e:	ff ad       	ldd	r31, Y+63	; 0x3f
   14ba0:	65 97       	sbiw	r28, 0x15	; 21
   14ba2:	31 96       	adiw	r30, 0x01	; 1
   14ba4:	65 96       	adiw	r28, 0x15	; 21
   14ba6:	ff af       	std	Y+63, r31	; 0x3f
   14ba8:	ee af       	std	Y+62, r30	; 0x3e
   14baa:	65 97       	sbiw	r28, 0x15	; 21
   14bac:	fb e2       	ldi	r31, 0x2B	; 43
   14bae:	af 0e       	add	r10, r31
   14bb0:	b1 1c       	adc	r11, r1
#ifdef AMIGO
    ///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
   14bb2:	28 ef       	ldi	r18, 0xF8	; 248
   14bb4:	3f e1       	ldi	r19, 0x1F	; 31
   14bb6:	2a 15       	cp	r18, r10
   14bb8:	3b 05       	cpc	r19, r11
   14bba:	09 f0       	breq	.+2      	; 0x14bbe <format_drives+0x206>
   14bbc:	49 cf       	rjmp	.-366    	; 0x14a50 <format_drives+0x98>
            }
            amigo++;
        } 
#endif // #ifdef AMIGO
    }
    printf("\n");
   14bbe:	88 e5       	ldi	r24, 0x58	; 88
   14bc0:	95 e1       	ldi	r25, 0x15	; 21
   14bc2:	1f 92       	push	r1
   14bc4:	9f 93       	push	r25
   14bc6:	8f 93       	push	r24
   14bc8:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
}
   14bcc:	0f 90       	pop	r0
   14bce:	0f 90       	pop	r0
   14bd0:	0f 90       	pop	r0
   14bd2:	c3 5a       	subi	r28, 0xA3	; 163
   14bd4:	df 4f       	sbci	r29, 0xFF	; 255
   14bd6:	0f b6       	in	r0, 0x3f	; 63
   14bd8:	f8 94       	cli
   14bda:	de bf       	out	0x3e, r29	; 62
   14bdc:	0f be       	out	0x3f, r0	; 63
   14bde:	cd bf       	out	0x3d, r28	; 61
   14be0:	df 91       	pop	r29
   14be2:	cf 91       	pop	r28
   14be4:	1f 91       	pop	r17
   14be6:	0f 91       	pop	r16
   14be8:	ff 90       	pop	r15
   14bea:	ef 90       	pop	r14
   14bec:	df 90       	pop	r13
   14bee:	cf 90       	pop	r12
   14bf0:	bf 90       	pop	r11
   14bf2:	af 90       	pop	r10
   14bf4:	8f 90       	pop	r8
   14bf6:	7f 90       	pop	r7
   14bf8:	6f 90       	pop	r6
   14bfa:	5f 90       	pop	r5
   14bfc:	4f 90       	pop	r4
   14bfe:	3f 90       	pop	r3
   14c00:	2f 90       	pop	r2
   14c02:	08 95       	ret

00014c04 <hpdir_init>:
/// disk parameters from a single hpdir disk entry
///
///@return void
void hpdir_init()
{
    memset(hpdir.model,0,sizeof(hpdir.model) -1);		// 1
   14c04:	8f e1       	ldi	r24, 0x1F	; 31
   14c06:	e8 ef       	ldi	r30, 0xF8	; 248
   14c08:	ff e1       	ldi	r31, 0x1F	; 31
   14c0a:	df 01       	movw	r26, r30
   14c0c:	98 2f       	mov	r25, r24
   14c0e:	1d 92       	st	X+, r1
   14c10:	9a 95       	dec	r25
   14c12:	e9 f7       	brne	.-6      	; 0x14c0e <hpdir_init+0xa>
    memset(hpdir.comment,0,sizeof(hpdir.comment) -1);	// 2
   14c14:	9f e3       	ldi	r25, 0x3F	; 63
   14c16:	e8 e1       	ldi	r30, 0x18	; 24
   14c18:	f0 e2       	ldi	r31, 0x20	; 32
   14c1a:	df 01       	movw	r26, r30
   14c1c:	1d 92       	st	X+, r1
   14c1e:	9a 95       	dec	r25
   14c20:	e9 f7       	brne	.-6      	; 0x14c1c <hpdir_init+0x18>
    memset(hpdir.TYPE,0,sizeof(hpdir.TYPE) -1);		// 3
   14c22:	e8 e5       	ldi	r30, 0x58	; 88
   14c24:	f0 e2       	ldi	r31, 0x20	; 32
   14c26:	df 01       	movw	r26, r30
   14c28:	1d 92       	st	X+, r1
   14c2a:	8a 95       	dec	r24
   14c2c:	e9 f7       	brne	.-6      	; 0x14c28 <hpdir_init+0x24>
    hpdir.ID = 0;						// 4
   14c2e:	10 92 78 20 	sts	0x2078, r1	; 0x802078 <hpdir+0x80>
   14c32:	10 92 79 20 	sts	0x2079, r1	; 0x802079 <hpdir+0x81>
   14c36:	10 92 7a 20 	sts	0x207A, r1	; 0x80207a <hpdir+0x82>
   14c3a:	10 92 7b 20 	sts	0x207B, r1	; 0x80207b <hpdir+0x83>
	hpdir.mask_stat2 = 0;				// 5
   14c3e:	10 92 7c 20 	sts	0x207C, r1	; 0x80207c <hpdir+0x84>
   14c42:	10 92 7d 20 	sts	0x207D, r1	; 0x80207d <hpdir+0x85>
   14c46:	10 92 7e 20 	sts	0x207E, r1	; 0x80207e <hpdir+0x86>
   14c4a:	10 92 7f 20 	sts	0x207F, r1	; 0x80207f <hpdir+0x87>
	hpdir.id_stat2 = 0;					// 6
   14c4e:	10 92 80 20 	sts	0x2080, r1	; 0x802080 <hpdir+0x88>
   14c52:	10 92 81 20 	sts	0x2081, r1	; 0x802081 <hpdir+0x89>
   14c56:	10 92 82 20 	sts	0x2082, r1	; 0x802082 <hpdir+0x8a>
   14c5a:	10 92 83 20 	sts	0x2083, r1	; 0x802083 <hpdir+0x8b>
	hpdir.DEVICE_NUMBER = 0;			// 7
   14c5e:	10 92 84 20 	sts	0x2084, r1	; 0x802084 <hpdir+0x8c>
   14c62:	10 92 85 20 	sts	0x2085, r1	; 0x802085 <hpdir+0x8d>
   14c66:	10 92 86 20 	sts	0x2086, r1	; 0x802086 <hpdir+0x8e>
   14c6a:	10 92 87 20 	sts	0x2087, r1	; 0x802087 <hpdir+0x8f>
	hpdir.UNITS_INSTALLED = 0x8001;		// 8
   14c6e:	81 e0       	ldi	r24, 0x01	; 1
   14c70:	90 e8       	ldi	r25, 0x80	; 128
   14c72:	a0 e0       	ldi	r26, 0x00	; 0
   14c74:	b0 e0       	ldi	r27, 0x00	; 0
   14c76:	80 93 88 20 	sts	0x2088, r24	; 0x802088 <hpdir+0x90>
   14c7a:	90 93 89 20 	sts	0x2089, r25	; 0x802089 <hpdir+0x91>
   14c7e:	a0 93 8a 20 	sts	0x208A, r26	; 0x80208a <hpdir+0x92>
   14c82:	b0 93 8b 20 	sts	0x208B, r27	; 0x80208b <hpdir+0x93>
	hpdir.CYLINDERS = 0;  				// 9
   14c86:	10 92 8c 20 	sts	0x208C, r1	; 0x80208c <hpdir+0x94>
   14c8a:	10 92 8d 20 	sts	0x208D, r1	; 0x80208d <hpdir+0x95>
   14c8e:	10 92 8e 20 	sts	0x208E, r1	; 0x80208e <hpdir+0x96>
   14c92:	10 92 8f 20 	sts	0x208F, r1	; 0x80208f <hpdir+0x97>
	hpdir.HEADS= 0;	     				// 10
   14c96:	10 92 90 20 	sts	0x2090, r1	; 0x802090 <hpdir+0x98>
   14c9a:	10 92 91 20 	sts	0x2091, r1	; 0x802091 <hpdir+0x99>
   14c9e:	10 92 92 20 	sts	0x2092, r1	; 0x802092 <hpdir+0x9a>
   14ca2:	10 92 93 20 	sts	0x2093, r1	; 0x802093 <hpdir+0x9b>
	hpdir.SECTORS= 0;    				// 11
   14ca6:	10 92 94 20 	sts	0x2094, r1	; 0x802094 <hpdir+0x9c>
   14caa:	10 92 95 20 	sts	0x2095, r1	; 0x802095 <hpdir+0x9d>
   14cae:	10 92 96 20 	sts	0x2096, r1	; 0x802096 <hpdir+0x9e>
   14cb2:	10 92 97 20 	sts	0x2097, r1	; 0x802097 <hpdir+0x9f>
	hpdir.BYTES_PER_SECTOR = 0;			// 12
   14cb6:	10 92 98 20 	sts	0x2098, r1	; 0x802098 <hpdir+0xa0>
   14cba:	10 92 99 20 	sts	0x2099, r1	; 0x802099 <hpdir+0xa1>
   14cbe:	10 92 9a 20 	sts	0x209A, r1	; 0x80209a <hpdir+0xa2>
   14cc2:	10 92 9b 20 	sts	0x209B, r1	; 0x80209b <hpdir+0xa3>
	hpdir.INTERLEAVE = 0;				// 13
   14cc6:	10 92 9c 20 	sts	0x209C, r1	; 0x80209c <hpdir+0xa4>
   14cca:	10 92 9d 20 	sts	0x209D, r1	; 0x80209d <hpdir+0xa5>
   14cce:	10 92 9e 20 	sts	0x209E, r1	; 0x80209e <hpdir+0xa6>
   14cd2:	10 92 9f 20 	sts	0x209F, r1	; 0x80209f <hpdir+0xa7>
    hpdir.FIXED = 1;					// 14 ALWAYS 1
   14cd6:	81 e0       	ldi	r24, 0x01	; 1
   14cd8:	90 e0       	ldi	r25, 0x00	; 0
   14cda:	a0 e0       	ldi	r26, 0x00	; 0
   14cdc:	b0 e0       	ldi	r27, 0x00	; 0
   14cde:	80 93 a0 20 	sts	0x20A0, r24	; 0x8020a0 <hpdir+0xa8>
   14ce2:	90 93 a1 20 	sts	0x20A1, r25	; 0x8020a1 <hpdir+0xa9>
   14ce6:	a0 93 a2 20 	sts	0x20A2, r26	; 0x8020a2 <hpdir+0xaa>
   14cea:	b0 93 a3 20 	sts	0x20A3, r27	; 0x8020a3 <hpdir+0xab>

	// Computed values
    hpdir.BLOCKS = 0;
   14cee:	10 92 a4 20 	sts	0x20A4, r1	; 0x8020a4 <hpdir+0xac>
   14cf2:	10 92 a5 20 	sts	0x20A5, r1	; 0x8020a5 <hpdir+0xad>
   14cf6:	10 92 a6 20 	sts	0x20A6, r1	; 0x8020a6 <hpdir+0xae>
   14cfa:	10 92 a7 20 	sts	0x20A7, r1	; 0x8020a7 <hpdir+0xaf>
   14cfe:	08 95       	ret

00014d00 <lif_dir_count>:
///@param[in] blocks: size of LIF image in total
///
///@return Size of LIF directory in blocks
long lif_dir_count(long blocks)
{
	int scale = 0;
   14d00:	20 e0       	ldi	r18, 0x00	; 0
   14d02:	30 e0       	ldi	r19, 0x00	; 0
	long num = 1;
	while(blocks)
   14d04:	61 15       	cp	r22, r1
   14d06:	71 05       	cpc	r23, r1
   14d08:	81 05       	cpc	r24, r1
   14d0a:	91 05       	cpc	r25, r1
   14d0c:	39 f0       	breq	.+14     	; 0x14d1c <lif_dir_count+0x1c>
	{
		scale++;
   14d0e:	2f 5f       	subi	r18, 0xFF	; 255
   14d10:	3f 4f       	sbci	r19, 0xFF	; 255
 		blocks >>= 1;
   14d12:	95 95       	asr	r25
   14d14:	87 95       	ror	r24
   14d16:	77 95       	ror	r23
   14d18:	67 95       	ror	r22
   14d1a:	f4 cf       	rjmp	.-24     	; 0x14d04 <lif_dir_count+0x4>
	}
	scale>>=1;
   14d1c:	35 95       	asr	r19
   14d1e:	27 95       	ror	r18
///
///@return Size of LIF directory in blocks
long lif_dir_count(long blocks)
{
	int scale = 0;
	long num = 1;
   14d20:	61 e0       	ldi	r22, 0x01	; 1
   14d22:	70 e0       	ldi	r23, 0x00	; 0
   14d24:	80 e0       	ldi	r24, 0x00	; 0
   14d26:	90 e0       	ldi	r25, 0x00	; 0
	{
		scale++;
 		blocks >>= 1;
	}
	scale>>=1;
	while(scale--)
   14d28:	21 50       	subi	r18, 0x01	; 1
   14d2a:	31 09       	sbc	r19, r1
   14d2c:	28 f0       	brcs	.+10     	; 0x14d38 <lif_dir_count+0x38>
		num <<=1;
   14d2e:	66 0f       	add	r22, r22
   14d30:	77 1f       	adc	r23, r23
   14d32:	88 1f       	adc	r24, r24
   14d34:	99 1f       	adc	r25, r25
   14d36:	f8 cf       	rjmp	.-16     	; 0x14d28 <lif_dir_count+0x28>
	return(num);
}
   14d38:	08 95       	ret

00014d3a <hpdir_find_drive>:
///
///@param[in] model: model string
///
///@return 1 on sucess or 0 on fail
int hpdir_find_drive(char *model, int list, int verbose)
{
   14d3a:	a1 e8       	ldi	r26, 0x81	; 129
   14d3c:	b1 e0       	ldi	r27, 0x01	; 1
   14d3e:	e3 ea       	ldi	r30, 0xA3	; 163
   14d40:	f6 ea       	ldi	r31, 0xA6	; 166
   14d42:	0c 94 f3 e5 	jmp	0x1cbe6	; 0x1cbe6 <__prologue_saves__>
   14d46:	98 2e       	mov	r9, r24
   14d48:	59 2e       	mov	r5, r25
   14d4a:	1b 01       	movw	r2, r22
	FILE *cfg;
	char *ptr;
    char str[256];
    char token[128];

	hpdir_init();
   14d4c:	5a 01       	movw	r10, r20

	cfg = fopen("hpdir.ini","rb");
   14d4e:	5a df       	rcall	.-332    	; 0x14c04 <hpdir_init>
   14d50:	66 e8       	ldi	r22, 0x86	; 134
   14d52:	78 e0       	ldi	r23, 0x08	; 8
   14d54:	8e ea       	ldi	r24, 0xAE	; 174
   14d56:	9f e0       	ldi	r25, 0x0F	; 15
   14d58:	0e 94 43 7f 	call	0xfe86	; 0xfe86 <fopen>

#ifndef LIF_STAND_ALONE
	if(cfg == NULL)
   14d5c:	7c 01       	movw	r14, r24
   14d5e:	89 2b       	or	r24, r25
		cfg = fopen("/hpdir.ini","rb");
   14d60:	49 f4       	brne	.+18     	; 0x14d74 <hpdir_find_drive+0x3a>
   14d62:	66 e8       	ldi	r22, 0x86	; 134
   14d64:	78 e0       	ldi	r23, 0x08	; 8
   14d66:	8d ea       	ldi	r24, 0xAD	; 173
   14d68:	9f e0       	ldi	r25, 0x0F	; 15
   14d6a:	0e 94 43 7f 	call	0xfe86	; 0xfe86 <fopen>
        strcat  (name, "/hpdir.ini");
        cfg = fopen(name, "rb");
    }
#endif

	if(cfg == NULL)
   14d6e:	7c 01       	movw	r14, r24
   14d70:	89 2b       	or	r24, r25
		// MODEL something else
		ptr = get_token(ptr, token, 	sizeof(token)-2);

        if(MATCHI(token,"[driveinfo]"))
        {
			driveinfo = 1;
   14d72:	51 f0       	breq	.+20     	; 0x14d88 <hpdir_find_drive+0x4e>
   14d74:	c1 2c       	mov	r12, r1

		if(*ptr == '[' && driveinfo == 1 )
                break;

		// MODEL something else
		ptr = get_token(ptr, token, 	sizeof(token)-2);
   14d76:	d1 2c       	mov	r13, r1
   14d78:	8e 01       	movw	r16, r28
   14d7a:	0f 5f       	subi	r16, 0xFF	; 255
		if( driveinfo != 1)
			continue;

        if(list)
        {
            printf("%s %s\n", token, ptr);
   14d7c:	1e 4f       	sbci	r17, 0xFE	; 254
   14d7e:	82 e3       	ldi	r24, 0x32	; 50
   14d80:	9f e1       	ldi	r25, 0x1F	; 31
   14d82:	3c 01       	movw	r6, r24
   14d84:	81 2c       	mov	r8, r1
    }
#endif

	if(cfg == NULL)
	{
		if(verbose)
   14d86:	1f c0       	rjmp	.+62     	; 0x14dc6 <hpdir_find_drive+0x8c>
   14d88:	a1 14       	cp	r10, r1
   14d8a:	b1 04       	cpc	r11, r1
   14d8c:	09 f4       	brne	.+2      	; 0x14d90 <hpdir_find_drive+0x56>
			printf("Error: hpdir.ini not found!\n");
   14d8e:	7a c1       	rjmp	.+756    	; 0x15084 <hpdir_find_drive+0x34a>
   14d90:	89 e3       	ldi	r24, 0x39	; 57
   14d92:	9f e1       	ldi	r25, 0x1F	; 31
   14d94:	1f 92       	push	r1
   14d96:	9f 93       	push	r25
   14d98:	8f 93       	push	r24
   14d9a:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   14d9e:	0f 90       	pop	r0
   14da0:	0f 90       	pop	r0
   14da2:	0f 90       	pop	r0
    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
		errors = 0;
        ptr = str;

        trim_tail(ptr);
   14da4:	6f c1       	rjmp	.+734    	; 0x15084 <hpdir_find_drive+0x34a>
   14da6:	ce 01       	movw	r24, r28
   14da8:	01 96       	adiw	r24, 0x01	; 1
   14daa:	0e 94 b0 32 	call	0x6560	; 0x6560 <trim_tail>
        ptr = skipspaces(ptr);
   14dae:	ce 01       	movw	r24, r28
   14db0:	01 96       	adiw	r24, 0x01	; 1
   14db2:	0e 94 c0 32 	call	0x6580	; 0x6580 <skipspaces>

        len = strlen(ptr);
   14db6:	fc 01       	movw	r30, r24
   14db8:	01 90       	ld	r0, Z+
   14dba:	00 20       	and	r0, r0
   14dbc:	e9 f7       	brne	.-6      	; 0x14db8 <hpdir_find_drive+0x7e>
        if(!len)
   14dbe:	31 97       	sbiw	r30, 0x01	; 1
   14dc0:	8e 17       	cp	r24, r30
   14dc2:	9f 07       	cpc	r25, r31
		return(0);
	}

	// printf("Searching /hpdir.ini for model:%s\n", model);

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   14dc4:	51 f4       	brne	.+20     	; 0x14dda <hpdir_find_drive+0xa0>
   14dc6:	a7 01       	movw	r20, r14
   14dc8:	6e ef       	ldi	r22, 0xFE	; 254
   14dca:	70 e0       	ldi	r23, 0x00	; 0
   14dcc:	ce 01       	movw	r24, r28
   14dce:	01 96       	adiw	r24, 0x01	; 1
   14dd0:	0e 94 74 77 	call	0xeee8	; 0xeee8 <fgets>
   14dd4:	89 2b       	or	r24, r25
   14dd6:	39 f7       	brne	.-50     	; 0x14da6 <hpdir_find_drive+0x6c>
        len = strlen(ptr);
        if(!len)
            continue;

        // Skip comments
        if(*ptr == ';' || *ptr == '#' )
   14dd8:	0c c0       	rjmp	.+24     	; 0x14df2 <hpdir_find_drive+0xb8>
   14dda:	fc 01       	movw	r30, r24
   14ddc:	20 81       	ld	r18, Z
   14dde:	2b 33       	cpi	r18, 0x3B	; 59
   14de0:	91 f3       	breq	.-28     	; 0x14dc6 <hpdir_find_drive+0x8c>
   14de2:	23 32       	cpi	r18, 0x23	; 35
            continue;

		if(*ptr == '[' && driveinfo == 1 )
   14de4:	81 f3       	breq	.-32     	; 0x14dc6 <hpdir_find_drive+0x8c>
   14de6:	2b 35       	cpi	r18, 0x5B	; 91
   14de8:	31 f4       	brne	.+12     	; 0x14df6 <hpdir_find_drive+0xbc>
   14dea:	f1 e0       	ldi	r31, 0x01	; 1
   14dec:	cf 16       	cp	r12, r31
   14dee:	d1 04       	cpc	r13, r1
int hpdir_find_drive(char *model, int list, int verbose)
{
    int len;
    int errors = 0;
    int driveinfo=0;
    int found = 0;
   14df0:	11 f4       	brne	.+4      	; 0x14df6 <hpdir_find_drive+0xbc>
   14df2:	00 e0       	ldi	r16, 0x00	; 0

		if(*ptr == '[' && driveinfo == 1 )
                break;

		// MODEL something else
		ptr = get_token(ptr, token, 	sizeof(token)-2);
   14df4:	41 c1       	rjmp	.+642    	; 0x15078 <hpdir_find_drive+0x33e>
   14df6:	4e e7       	ldi	r20, 0x7E	; 126
   14df8:	50 e0       	ldi	r21, 0x00	; 0
   14dfa:	b8 01       	movw	r22, r16
   14dfc:	0e 94 00 34 	call	0x6800	; 0x6800 <get_token>
   14e00:	cf 57       	subi	r28, 0x7F	; 127
   14e02:	de 4f       	sbci	r29, 0xFE	; 254
   14e04:	88 83       	st	Y, r24
   14e06:	c1 58       	subi	r28, 0x81	; 129
   14e08:	d1 40       	sbci	r29, 0x01	; 1

        if(MATCHI(token,"[driveinfo]"))
   14e0a:	49 2e       	mov	r4, r25
   14e0c:	68 eb       	ldi	r22, 0xB8	; 184
   14e0e:	7f e0       	ldi	r23, 0x0F	; 15
   14e10:	c8 01       	movw	r24, r16
   14e12:	0e 94 76 33 	call	0x66ec	; 0x66ec <MATCHI>
   14e16:	89 2b       	or	r24, r25
        {
			driveinfo = 1;
   14e18:	21 f0       	breq	.+8      	; 0x14e22 <hpdir_find_drive+0xe8>
   14e1a:	cc 24       	eor	r12, r12
   14e1c:	c3 94       	inc	r12
   14e1e:	d1 2c       	mov	r13, r1
            continue;
        }

		if( driveinfo != 1)
   14e20:	d2 cf       	rjmp	.-92     	; 0x14dc6 <hpdir_find_drive+0x8c>
   14e22:	21 e0       	ldi	r18, 0x01	; 1
   14e24:	c2 16       	cp	r12, r18
   14e26:	d1 04       	cpc	r13, r1
			continue;

        if(list)
   14e28:	71 f6       	brne	.-100    	; 0x14dc6 <hpdir_find_drive+0x8c>
   14e2a:	21 14       	cp	r2, r1
   14e2c:	31 04       	cpc	r3, r1
        {
            printf("%s %s\n", token, ptr);
   14e2e:	a1 f0       	breq	.+40     	; 0x14e58 <hpdir_find_drive+0x11e>
   14e30:	4f 92       	push	r4
   14e32:	cf 57       	subi	r28, 0x7F	; 127
   14e34:	de 4f       	sbci	r29, 0xFE	; 254
   14e36:	88 81       	ld	r24, Y
   14e38:	c1 58       	subi	r28, 0x81	; 129
   14e3a:	d1 40       	sbci	r29, 0x01	; 1
   14e3c:	8f 93       	push	r24
   14e3e:	1f 93       	push	r17
   14e40:	0f 93       	push	r16
   14e42:	1f 92       	push	r1
   14e44:	7f 92       	push	r7
   14e46:	6f 92       	push	r6
   14e48:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
            continue;
   14e4c:	0f b6       	in	r0, 0x3f	; 63
   14e4e:	f8 94       	cli
   14e50:	de bf       	out	0x3e, r29	; 62
   14e52:	0f be       	out	0x3f, r0	; 63
   14e54:	cd bf       	out	0x3d, r28	; 61
        }

		if ( ! MATCHI(model,token) )
   14e56:	b7 cf       	rjmp	.-146    	; 0x14dc6 <hpdir_find_drive+0x8c>
   14e58:	b8 01       	movw	r22, r16
   14e5a:	89 2d       	mov	r24, r9
   14e5c:	95 2d       	mov	r25, r5
   14e5e:	0e 94 76 33 	call	0x66ec	; 0x66ec <MATCHI>
			continue;

		hpdir_init();
   14e62:	89 2b       	or	r24, r25
   14e64:	d1 f2       	breq	.-76     	; 0x14e1a <hpdir_find_drive+0xe0>

		if(verbose)
   14e66:	ce de       	rcall	.-612    	; 0x14c04 <hpdir_init>
   14e68:	a1 14       	cp	r10, r1
   14e6a:	b1 04       	cpc	r11, r1
			printf("Found Model: %s\n", model);
   14e6c:	71 f0       	breq	.+28     	; 0x14e8a <hpdir_find_drive+0x150>
   14e6e:	5f 92       	push	r5
   14e70:	9f 92       	push	r9
   14e72:	81 e2       	ldi	r24, 0x21	; 33
   14e74:	9f e1       	ldi	r25, 0x1F	; 31
   14e76:	1f 92       	push	r1
   14e78:	9f 93       	push	r25
   14e7a:	8f 93       	push	r24
   14e7c:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   14e80:	0f 90       	pop	r0
   14e82:	0f 90       	pop	r0
   14e84:	0f 90       	pop	r0
   14e86:	0f 90       	pop	r0

		strncpy(hpdir.model,token,sizeof(hpdir.model)-2);				// 1 Model
   14e88:	0f 90       	pop	r0
   14e8a:	4e e1       	ldi	r20, 0x1E	; 30
   14e8c:	50 e0       	ldi	r21, 0x00	; 0
   14e8e:	b8 01       	movw	r22, r16
   14e90:	88 ef       	ldi	r24, 0xF8	; 248
   14e92:	9f e1       	ldi	r25, 0x1F	; 31
   14e94:	0e 94 61 32 	call	0x64c2	; 0x64c2 <strncpy>

		ptr = get_token(ptr, token, 	sizeof(token)-2);				// =
   14e98:	4e e7       	ldi	r20, 0x7E	; 126
   14e9a:	50 e0       	ldi	r21, 0x00	; 0
   14e9c:	b8 01       	movw	r22, r16
   14e9e:	cf 57       	subi	r28, 0x7F	; 127
   14ea0:	de 4f       	sbci	r29, 0xFE	; 254
   14ea2:	88 81       	ld	r24, Y
   14ea4:	c1 58       	subi	r28, 0x81	; 129
   14ea6:	d1 40       	sbci	r29, 0x01	; 1
   14ea8:	94 2d       	mov	r25, r4
   14eaa:	0e 94 00 34 	call	0x6800	; 0x6800 <get_token>

		ptr = get_token(ptr, hpdir.comment, sizeof(hpdir.comment)-2);	// 2 Comment
   14eae:	4e e3       	ldi	r20, 0x3E	; 62
   14eb0:	50 e0       	ldi	r21, 0x00	; 0
   14eb2:	68 e1       	ldi	r22, 0x18	; 24
   14eb4:	70 e2       	ldi	r23, 0x20	; 32
   14eb6:	0e 94 00 34 	call	0x6800	; 0x6800 <get_token>

		ptr = get_token(ptr, hpdir.TYPE,  sizeof(hpdir.TYPE)-2);		// 3 AMIGO/SS80/CS80
   14eba:	4e e1       	ldi	r20, 0x1E	; 30
   14ebc:	50 e0       	ldi	r21, 0x00	; 0
   14ebe:	68 e5       	ldi	r22, 0x58	; 88
   14ec0:	70 e2       	ldi	r23, 0x20	; 32
   14ec2:	0e 94 00 34 	call	0x6800	; 0x6800 <get_token>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 4 Identify ID
   14ec6:	4e e7       	ldi	r20, 0x7E	; 126
   14ec8:	50 e0       	ldi	r21, 0x00	; 0
   14eca:	b8 01       	movw	r22, r16
   14ecc:	0e 94 00 34 	call	0x6800	; 0x6800 <get_token>
		hpdir.ID = get_value(token);
   14ed0:	6c 01       	movw	r12, r24
   14ed2:	c8 01       	movw	r24, r16
   14ed4:	0e 94 75 34 	call	0x68ea	; 0x68ea <get_value>
   14ed8:	60 93 78 20 	sts	0x2078, r22	; 0x802078 <hpdir+0x80>
   14edc:	70 93 79 20 	sts	0x2079, r23	; 0x802079 <hpdir+0x81>
   14ee0:	80 93 7a 20 	sts	0x207A, r24	; 0x80207a <hpdir+0x82>
   14ee4:	90 93 7b 20 	sts	0x207B, r25	; 0x80207b <hpdir+0x83>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 5 MASK STAT 2
   14ee8:	4e e7       	ldi	r20, 0x7E	; 126
   14eea:	50 e0       	ldi	r21, 0x00	; 0
   14eec:	b8 01       	movw	r22, r16
   14eee:	c6 01       	movw	r24, r12
   14ef0:	0e 94 00 34 	call	0x6800	; 0x6800 <get_token>
		hpdir.mask_stat2 = get_value(token);
   14ef4:	6c 01       	movw	r12, r24
   14ef6:	c8 01       	movw	r24, r16
   14ef8:	0e 94 75 34 	call	0x68ea	; 0x68ea <get_value>
   14efc:	60 93 7c 20 	sts	0x207C, r22	; 0x80207c <hpdir+0x84>
   14f00:	70 93 7d 20 	sts	0x207D, r23	; 0x80207d <hpdir+0x85>
   14f04:	80 93 7e 20 	sts	0x207E, r24	; 0x80207e <hpdir+0x86>
   14f08:	90 93 7f 20 	sts	0x207F, r25	; 0x80207f <hpdir+0x87>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 6 STAT2
   14f0c:	4e e7       	ldi	r20, 0x7E	; 126
   14f0e:	50 e0       	ldi	r21, 0x00	; 0
   14f10:	b8 01       	movw	r22, r16
   14f12:	c6 01       	movw	r24, r12
   14f14:	0e 94 00 34 	call	0x6800	; 0x6800 <get_token>
		hpdir.id_stat2 = get_value(token);
   14f18:	6c 01       	movw	r12, r24
   14f1a:	c8 01       	movw	r24, r16
   14f1c:	0e 94 75 34 	call	0x68ea	; 0x68ea <get_value>
   14f20:	60 93 80 20 	sts	0x2080, r22	; 0x802080 <hpdir+0x88>
   14f24:	70 93 81 20 	sts	0x2081, r23	; 0x802081 <hpdir+0x89>
   14f28:	80 93 82 20 	sts	0x2082, r24	; 0x802082 <hpdir+0x8a>
   14f2c:	90 93 83 20 	sts	0x2083, r25	; 0x802083 <hpdir+0x8b>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 7 BCD include model number
   14f30:	4e e7       	ldi	r20, 0x7E	; 126
   14f32:	50 e0       	ldi	r21, 0x00	; 0
   14f34:	b8 01       	movw	r22, r16
   14f36:	c6 01       	movw	r24, r12
   14f38:	0e 94 00 34 	call	0x6800	; 0x6800 <get_token>
		hpdir.DEVICE_NUMBER = get_value(token);
   14f3c:	6c 01       	movw	r12, r24
   14f3e:	c8 01       	movw	r24, r16
   14f40:	0e 94 75 34 	call	0x68ea	; 0x68ea <get_value>
   14f44:	60 93 84 20 	sts	0x2084, r22	; 0x802084 <hpdir+0x8c>
   14f48:	70 93 85 20 	sts	0x2085, r23	; 0x802085 <hpdir+0x8d>
   14f4c:	80 93 86 20 	sts	0x2086, r24	; 0x802086 <hpdir+0x8e>
   14f50:	90 93 87 20 	sts	0x2087, r25	; 0x802087 <hpdir+0x8f>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 8 Units installed
   14f54:	4e e7       	ldi	r20, 0x7E	; 126
   14f56:	50 e0       	ldi	r21, 0x00	; 0
   14f58:	b8 01       	movw	r22, r16
   14f5a:	c6 01       	movw	r24, r12
   14f5c:	0e 94 00 34 	call	0x6800	; 0x6800 <get_token>
		hpdir.UNITS_INSTALLED = get_value(token);
   14f60:	6c 01       	movw	r12, r24
   14f62:	c8 01       	movw	r24, r16
   14f64:	0e 94 75 34 	call	0x68ea	; 0x68ea <get_value>
   14f68:	60 93 88 20 	sts	0x2088, r22	; 0x802088 <hpdir+0x90>
   14f6c:	70 93 89 20 	sts	0x2089, r23	; 0x802089 <hpdir+0x91>
   14f70:	80 93 8a 20 	sts	0x208A, r24	; 0x80208a <hpdir+0x92>
   14f74:	90 93 8b 20 	sts	0x208B, r25	; 0x80208b <hpdir+0x93>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 9 Cylinders
   14f78:	4e e7       	ldi	r20, 0x7E	; 126
   14f7a:	50 e0       	ldi	r21, 0x00	; 0
   14f7c:	b8 01       	movw	r22, r16
   14f7e:	c6 01       	movw	r24, r12
   14f80:	0e 94 00 34 	call	0x6800	; 0x6800 <get_token>
		hpdir.CYLINDERS = get_value(token);
   14f84:	6c 01       	movw	r12, r24
   14f86:	c8 01       	movw	r24, r16
   14f88:	0e 94 75 34 	call	0x68ea	; 0x68ea <get_value>
   14f8c:	60 93 8c 20 	sts	0x208C, r22	; 0x80208c <hpdir+0x94>
   14f90:	70 93 8d 20 	sts	0x208D, r23	; 0x80208d <hpdir+0x95>
   14f94:	80 93 8e 20 	sts	0x208E, r24	; 0x80208e <hpdir+0x96>
   14f98:	90 93 8f 20 	sts	0x208F, r25	; 0x80208f <hpdir+0x97>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 10 Heads
   14f9c:	4e e7       	ldi	r20, 0x7E	; 126
   14f9e:	50 e0       	ldi	r21, 0x00	; 0
   14fa0:	b8 01       	movw	r22, r16
   14fa2:	c6 01       	movw	r24, r12
   14fa4:	0e 94 00 34 	call	0x6800	; 0x6800 <get_token>
		hpdir.HEADS = get_value(token);
   14fa8:	6c 01       	movw	r12, r24
   14faa:	c8 01       	movw	r24, r16
   14fac:	0e 94 75 34 	call	0x68ea	; 0x68ea <get_value>
   14fb0:	60 93 90 20 	sts	0x2090, r22	; 0x802090 <hpdir+0x98>
   14fb4:	70 93 91 20 	sts	0x2091, r23	; 0x802091 <hpdir+0x99>
   14fb8:	80 93 92 20 	sts	0x2092, r24	; 0x802092 <hpdir+0x9a>
   14fbc:	90 93 93 20 	sts	0x2093, r25	; 0x802093 <hpdir+0x9b>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 11 Sectors
   14fc0:	4e e7       	ldi	r20, 0x7E	; 126
   14fc2:	50 e0       	ldi	r21, 0x00	; 0
   14fc4:	b8 01       	movw	r22, r16
   14fc6:	c6 01       	movw	r24, r12
   14fc8:	0e 94 00 34 	call	0x6800	; 0x6800 <get_token>
		hpdir.SECTORS = get_value(token);
   14fcc:	6c 01       	movw	r12, r24
   14fce:	c8 01       	movw	r24, r16
   14fd0:	0e 94 75 34 	call	0x68ea	; 0x68ea <get_value>
   14fd4:	60 93 94 20 	sts	0x2094, r22	; 0x802094 <hpdir+0x9c>
   14fd8:	70 93 95 20 	sts	0x2095, r23	; 0x802095 <hpdir+0x9d>
   14fdc:	80 93 96 20 	sts	0x2096, r24	; 0x802096 <hpdir+0x9e>
   14fe0:	90 93 97 20 	sts	0x2097, r25	; 0x802097 <hpdir+0x9f>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 12 Bytes Per Block/Sector
   14fe4:	4e e7       	ldi	r20, 0x7E	; 126
   14fe6:	50 e0       	ldi	r21, 0x00	; 0
   14fe8:	b8 01       	movw	r22, r16
   14fea:	c6 01       	movw	r24, r12
   14fec:	0e 94 00 34 	call	0x6800	; 0x6800 <get_token>
		hpdir.BYTES_PER_SECTOR = get_value(token);
   14ff0:	6c 01       	movw	r12, r24
   14ff2:	c8 01       	movw	r24, r16
   14ff4:	0e 94 75 34 	call	0x68ea	; 0x68ea <get_value>
   14ff8:	60 93 98 20 	sts	0x2098, r22	; 0x802098 <hpdir+0xa0>
   14ffc:	70 93 99 20 	sts	0x2099, r23	; 0x802099 <hpdir+0xa1>
   15000:	80 93 9a 20 	sts	0x209A, r24	; 0x80209a <hpdir+0xa2>
   15004:	90 93 9b 20 	sts	0x209B, r25	; 0x80209b <hpdir+0xa3>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 13 Interleave
   15008:	4e e7       	ldi	r20, 0x7E	; 126
   1500a:	50 e0       	ldi	r21, 0x00	; 0
   1500c:	b8 01       	movw	r22, r16
   1500e:	c6 01       	movw	r24, r12
   15010:	0e 94 00 34 	call	0x6800	; 0x6800 <get_token>
		hpdir.INTERLEAVE = get_value(token);
   15014:	c8 01       	movw	r24, r16
   15016:	0e 94 75 34 	call	0x68ea	; 0x68ea <get_value>
   1501a:	60 93 9c 20 	sts	0x209C, r22	; 0x80209c <hpdir+0xa4>
   1501e:	70 93 9d 20 	sts	0x209D, r23	; 0x80209d <hpdir+0xa5>
   15022:	80 93 9e 20 	sts	0x209E, r24	; 0x80209e <hpdir+0xa6>
   15026:	90 93 9f 20 	sts	0x209F, r25	; 0x80209f <hpdir+0xa7>

		// Computed values
		hpdir.BLOCKS = ( hpdir.CYLINDERS * hpdir.HEADS * hpdir.SECTORS );
   1502a:	20 91 8c 20 	lds	r18, 0x208C	; 0x80208c <hpdir+0x94>
   1502e:	30 91 8d 20 	lds	r19, 0x208D	; 0x80208d <hpdir+0x95>
   15032:	40 91 8e 20 	lds	r20, 0x208E	; 0x80208e <hpdir+0x96>
   15036:	50 91 8f 20 	lds	r21, 0x208F	; 0x80208f <hpdir+0x97>
   1503a:	60 91 90 20 	lds	r22, 0x2090	; 0x802090 <hpdir+0x98>
   1503e:	70 91 91 20 	lds	r23, 0x2091	; 0x802091 <hpdir+0x99>
   15042:	80 91 92 20 	lds	r24, 0x2092	; 0x802092 <hpdir+0x9a>
   15046:	90 91 93 20 	lds	r25, 0x2093	; 0x802093 <hpdir+0x9b>
   1504a:	0e 94 2f e5 	call	0x1ca5e	; 0x1ca5e <__mulsi3>
   1504e:	9b 01       	movw	r18, r22
   15050:	ac 01       	movw	r20, r24
   15052:	60 91 94 20 	lds	r22, 0x2094	; 0x802094 <hpdir+0x9c>
   15056:	70 91 95 20 	lds	r23, 0x2095	; 0x802095 <hpdir+0x9d>
   1505a:	80 91 96 20 	lds	r24, 0x2096	; 0x802096 <hpdir+0x9e>
   1505e:	90 91 97 20 	lds	r25, 0x2097	; 0x802097 <hpdir+0x9f>
   15062:	0e 94 2f e5 	call	0x1ca5e	; 0x1ca5e <__mulsi3>
   15066:	60 93 a4 20 	sts	0x20A4, r22	; 0x8020a4 <hpdir+0xac>
   1506a:	70 93 a5 20 	sts	0x20A5, r23	; 0x8020a5 <hpdir+0xad>
   1506e:	80 93 a6 20 	sts	0x20A6, r24	; 0x8020a6 <hpdir+0xae>
   15072:	90 93 a7 20 	sts	0x20A7, r25	; 0x8020a7 <hpdir+0xaf>
		{
			if(verbose)
				printf("Error /hpdir.ini parsing\n");
			break;
		}
		found = 1;
   15076:	01 e0       	ldi	r16, 0x01	; 1
		break;

	}	// while
	fclose(cfg);
   15078:	10 e0       	ldi	r17, 0x00	; 0
   1507a:	c7 01       	movw	r24, r14
   1507c:	0e 94 ed 7d 	call	0xfbda	; 0xfbda <fclose>
	return(found);
   15080:	c8 01       	movw	r24, r16

	if(cfg == NULL)
	{
		if(verbose)
			printf("Error: hpdir.ini not found!\n");
		return(0);
   15082:	02 c0       	rjmp	.+4      	; 0x15088 <hpdir_find_drive+0x34e>
   15084:	80 e0       	ldi	r24, 0x00	; 0
		break;

	}	// while
	fclose(cfg);
	return(found);
}
   15086:	90 e0       	ldi	r25, 0x00	; 0
   15088:	cf 57       	subi	r28, 0x7F	; 127
   1508a:	de 4f       	sbci	r29, 0xFE	; 254
   1508c:	e2 e1       	ldi	r30, 0x12	; 18
   1508e:	0c 94 0f e6 	jmp	0x1cc1e	; 0x1cc1e <__epilogue_restores__>

00015092 <SS80ControllerPack>:
   15092:	0f 93       	push	r16
   15094:	1f 93       	push	r17
   15096:	25 e0       	ldi	r18, 0x05	; 5
   15098:	30 e0       	ldi	r19, 0x00	; 0
   1509a:	fc 01       	movw	r30, r24
   1509c:	31 83       	std	Z+1, r19	; 0x01
   1509e:	20 83       	st	Z, r18
   150a0:	e0 91 6d 18 	lds	r30, 0x186D	; 0x80186d <SS80p>
   150a4:	f0 91 6e 18 	lds	r31, 0x186E	; 0x80186e <SS80p+0x1>
   150a8:	05 a1       	ldd	r16, Z+37	; 0x25
   150aa:	16 a1       	ldd	r17, Z+38	; 0x26
   150ac:	20 e0       	ldi	r18, 0x00	; 0
   150ae:	30 e0       	ldi	r19, 0x00	; 0
   150b0:	42 e0       	ldi	r20, 0x02	; 2
   150b2:	50 e0       	ldi	r21, 0x00	; 0
   150b4:	60 e0       	ldi	r22, 0x00	; 0
   150b6:	70 e0       	ldi	r23, 0x00	; 0
   150b8:	8d e9       	ldi	r24, 0x9D	; 157
   150ba:	98 e1       	ldi	r25, 0x18	; 24
   150bc:	0e 94 89 92 	call	0x12512	; 0x12512 <V2B_MSB>
   150c0:	e0 91 6d 18 	lds	r30, 0x186D	; 0x80186d <SS80p>
   150c4:	f0 91 6e 18 	lds	r31, 0x186E	; 0x80186e <SS80p+0x1>
   150c8:	07 a1       	ldd	r16, Z+39	; 0x27
   150ca:	10 a5       	ldd	r17, Z+40	; 0x28
   150cc:	20 e0       	ldi	r18, 0x00	; 0
   150ce:	30 e0       	ldi	r19, 0x00	; 0
   150d0:	42 e0       	ldi	r20, 0x02	; 2
   150d2:	50 e0       	ldi	r21, 0x00	; 0
   150d4:	61 e0       	ldi	r22, 0x01	; 1
   150d6:	70 e0       	ldi	r23, 0x00	; 0
   150d8:	8d e9       	ldi	r24, 0x9D	; 157
   150da:	98 e1       	ldi	r25, 0x18	; 24
   150dc:	0e 94 89 92 	call	0x12512	; 0x12512 <V2B_MSB>
{
#ifdef ESP8266
    hspi_RX((uint8_t *) data,count);
#endif
#ifdef AVR
    SPI0_RX((uint8_t *)data,count);
   150e0:	e0 91 6d 18 	lds	r30, 0x186D	; 0x80186d <SS80p>
   150e4:	f0 91 6e 18 	lds	r31, 0x186E	; 0x80186e <SS80p+0x1>
   150e8:	01 a5       	ldd	r16, Z+41	; 0x29
   150ea:	10 e0       	ldi	r17, 0x00	; 0
   150ec:	20 e0       	ldi	r18, 0x00	; 0
   150ee:	30 e0       	ldi	r19, 0x00	; 0
   150f0:	41 e0       	ldi	r20, 0x01	; 1
   150f2:	50 e0       	ldi	r21, 0x00	; 0
   150f4:	64 e0       	ldi	r22, 0x04	; 4
   150f6:	70 e0       	ldi	r23, 0x00	; 0
   150f8:	8d e9       	ldi	r24, 0x9D	; 157
   150fa:	98 e1       	ldi	r25, 0x18	; 24
   150fc:	0e 94 89 92 	call	0x12512	; 0x12512 <V2B_MSB>
   15100:	8d e9       	ldi	r24, 0x9D	; 157
   15102:	98 e1       	ldi	r25, 0x18	; 24
   15104:	1f 91       	pop	r17
   15106:	0f 91       	pop	r16
   15108:	08 95       	ret

0001510a <SS80UnitPack>:
   1510a:	0f 93       	push	r16
   1510c:	1f 93       	push	r17
   1510e:	23 e1       	ldi	r18, 0x13	; 19
   15110:	30 e0       	ldi	r19, 0x00	; 0
   15112:	fc 01       	movw	r30, r24
   15114:	31 83       	std	Z+1, r19	; 0x01
   15116:	20 83       	st	Z, r18
   15118:	e0 91 6d 18 	lds	r30, 0x186D	; 0x80186d <SS80p>
   1511c:	f0 91 6e 18 	lds	r31, 0x186E	; 0x80186e <SS80p+0x1>
   15120:	02 a5       	ldd	r16, Z+42	; 0x2a
   15122:	10 e0       	ldi	r17, 0x00	; 0
   15124:	20 e0       	ldi	r18, 0x00	; 0
   15126:	30 e0       	ldi	r19, 0x00	; 0
   15128:	41 e0       	ldi	r20, 0x01	; 1
   1512a:	50 e0       	ldi	r21, 0x00	; 0
   1512c:	60 e0       	ldi	r22, 0x00	; 0
   1512e:	70 e0       	ldi	r23, 0x00	; 0
   15130:	8a e8       	ldi	r24, 0x8A	; 138
   15132:	98 e1       	ldi	r25, 0x18	; 24
   15134:	0e 94 89 92 	call	0x12512	; 0x12512 <V2B_MSB>
   15138:	e0 91 6d 18 	lds	r30, 0x186D	; 0x80186d <SS80p>
   1513c:	f0 91 6e 18 	lds	r31, 0x186E	; 0x80186e <SS80p+0x1>
   15140:	03 a5       	ldd	r16, Z+43	; 0x2b
   15142:	14 a5       	ldd	r17, Z+44	; 0x2c
   15144:	25 a5       	ldd	r18, Z+45	; 0x2d
   15146:	36 a5       	ldd	r19, Z+46	; 0x2e
   15148:	43 e0       	ldi	r20, 0x03	; 3
   1514a:	50 e0       	ldi	r21, 0x00	; 0
   1514c:	61 e0       	ldi	r22, 0x01	; 1
   1514e:	70 e0       	ldi	r23, 0x00	; 0
   15150:	8a e8       	ldi	r24, 0x8A	; 138
   15152:	98 e1       	ldi	r25, 0x18	; 24
   15154:	0e 94 89 92 	call	0x12512	; 0x12512 <V2B_MSB>
   15158:	e0 91 6d 18 	lds	r30, 0x186D	; 0x80186d <SS80p>
   1515c:	f0 91 6e 18 	lds	r31, 0x186E	; 0x80186e <SS80p+0x1>
   15160:	07 a5       	ldd	r16, Z+47	; 0x2f
   15162:	10 a9       	ldd	r17, Z+48	; 0x30
   15164:	20 e0       	ldi	r18, 0x00	; 0
   15166:	30 e0       	ldi	r19, 0x00	; 0
   15168:	42 e0       	ldi	r20, 0x02	; 2
   1516a:	50 e0       	ldi	r21, 0x00	; 0
   1516c:	64 e0       	ldi	r22, 0x04	; 4
   1516e:	70 e0       	ldi	r23, 0x00	; 0
   15170:	8a e8       	ldi	r24, 0x8A	; 138
   15172:	98 e1       	ldi	r25, 0x18	; 24
   15174:	0e 94 89 92 	call	0x12512	; 0x12512 <V2B_MSB>
   15178:	e0 91 6d 18 	lds	r30, 0x186D	; 0x80186d <SS80p>
   1517c:	f0 91 6e 18 	lds	r31, 0x186E	; 0x80186e <SS80p+0x1>
   15180:	01 a9       	ldd	r16, Z+49	; 0x31
   15182:	10 e0       	ldi	r17, 0x00	; 0
   15184:	20 e0       	ldi	r18, 0x00	; 0
   15186:	30 e0       	ldi	r19, 0x00	; 0
   15188:	41 e0       	ldi	r20, 0x01	; 1
   1518a:	50 e0       	ldi	r21, 0x00	; 0
   1518c:	66 e0       	ldi	r22, 0x06	; 6
   1518e:	70 e0       	ldi	r23, 0x00	; 0
   15190:	8a e8       	ldi	r24, 0x8A	; 138
   15192:	98 e1       	ldi	r25, 0x18	; 24
   15194:	0e 94 89 92 	call	0x12512	; 0x12512 <V2B_MSB>
   15198:	e0 91 6d 18 	lds	r30, 0x186D	; 0x80186d <SS80p>
   1519c:	f0 91 6e 18 	lds	r31, 0x186E	; 0x80186e <SS80p+0x1>
   151a0:	02 a9       	ldd	r16, Z+50	; 0x32
   151a2:	10 e0       	ldi	r17, 0x00	; 0
   151a4:	20 e0       	ldi	r18, 0x00	; 0
   151a6:	30 e0       	ldi	r19, 0x00	; 0
   151a8:	41 e0       	ldi	r20, 0x01	; 1
   151aa:	50 e0       	ldi	r21, 0x00	; 0
   151ac:	67 e0       	ldi	r22, 0x07	; 7
   151ae:	70 e0       	ldi	r23, 0x00	; 0
   151b0:	8a e8       	ldi	r24, 0x8A	; 138
   151b2:	98 e1       	ldi	r25, 0x18	; 24
   151b4:	0e 94 89 92 	call	0x12512	; 0x12512 <V2B_MSB>
   151b8:	e0 91 6d 18 	lds	r30, 0x186D	; 0x80186d <SS80p>
   151bc:	f0 91 6e 18 	lds	r31, 0x186E	; 0x80186e <SS80p+0x1>
   151c0:	03 a9       	ldd	r16, Z+51	; 0x33
   151c2:	14 a9       	ldd	r17, Z+52	; 0x34
   151c4:	20 e0       	ldi	r18, 0x00	; 0
   151c6:	30 e0       	ldi	r19, 0x00	; 0
   151c8:	42 e0       	ldi	r20, 0x02	; 2
   151ca:	50 e0       	ldi	r21, 0x00	; 0
   151cc:	68 e0       	ldi	r22, 0x08	; 8
   151ce:	70 e0       	ldi	r23, 0x00	; 0
   151d0:	8a e8       	ldi	r24, 0x8A	; 138
   151d2:	98 e1       	ldi	r25, 0x18	; 24
   151d4:	0e 94 89 92 	call	0x12512	; 0x12512 <V2B_MSB>
   151d8:	e0 91 6d 18 	lds	r30, 0x186D	; 0x80186d <SS80p>
   151dc:	f0 91 6e 18 	lds	r31, 0x186E	; 0x80186e <SS80p+0x1>
   151e0:	05 a9       	ldd	r16, Z+53	; 0x35
   151e2:	16 a9       	ldd	r17, Z+54	; 0x36
   151e4:	20 e0       	ldi	r18, 0x00	; 0
   151e6:	30 e0       	ldi	r19, 0x00	; 0
   151e8:	42 e0       	ldi	r20, 0x02	; 2
   151ea:	50 e0       	ldi	r21, 0x00	; 0
   151ec:	6a e0       	ldi	r22, 0x0A	; 10
   151ee:	70 e0       	ldi	r23, 0x00	; 0
   151f0:	8a e8       	ldi	r24, 0x8A	; 138
   151f2:	98 e1       	ldi	r25, 0x18	; 24
   151f4:	0e 94 89 92 	call	0x12512	; 0x12512 <V2B_MSB>
   151f8:	e0 91 6d 18 	lds	r30, 0x186D	; 0x80186d <SS80p>
   151fc:	f0 91 6e 18 	lds	r31, 0x186E	; 0x80186e <SS80p+0x1>
   15200:	07 a9       	ldd	r16, Z+55	; 0x37
   15202:	10 ad       	ldd	r17, Z+56	; 0x38
   15204:	20 e0       	ldi	r18, 0x00	; 0
   15206:	30 e0       	ldi	r19, 0x00	; 0
   15208:	42 e0       	ldi	r20, 0x02	; 2
   1520a:	50 e0       	ldi	r21, 0x00	; 0
   1520c:	6c e0       	ldi	r22, 0x0C	; 12
   1520e:	70 e0       	ldi	r23, 0x00	; 0
   15210:	8a e8       	ldi	r24, 0x8A	; 138
   15212:	98 e1       	ldi	r25, 0x18	; 24
   15214:	0e 94 89 92 	call	0x12512	; 0x12512 <V2B_MSB>
   15218:	e0 91 6d 18 	lds	r30, 0x186D	; 0x80186d <SS80p>
   1521c:	f0 91 6e 18 	lds	r31, 0x186E	; 0x80186e <SS80p+0x1>
   15220:	01 ad       	ldd	r16, Z+57	; 0x39
   15222:	12 ad       	ldd	r17, Z+58	; 0x3a
   15224:	20 e0       	ldi	r18, 0x00	; 0
   15226:	30 e0       	ldi	r19, 0x00	; 0
   15228:	42 e0       	ldi	r20, 0x02	; 2
   1522a:	50 e0       	ldi	r21, 0x00	; 0
   1522c:	6e e0       	ldi	r22, 0x0E	; 14
   1522e:	70 e0       	ldi	r23, 0x00	; 0
   15230:	8a e8       	ldi	r24, 0x8A	; 138
   15232:	98 e1       	ldi	r25, 0x18	; 24
   15234:	0e 94 89 92 	call	0x12512	; 0x12512 <V2B_MSB>
   15238:	e0 91 6d 18 	lds	r30, 0x186D	; 0x80186d <SS80p>
   1523c:	f0 91 6e 18 	lds	r31, 0x186E	; 0x80186e <SS80p+0x1>
   15240:	03 ad       	ldd	r16, Z+59	; 0x3b
   15242:	10 e0       	ldi	r17, 0x00	; 0
   15244:	20 e0       	ldi	r18, 0x00	; 0
   15246:	30 e0       	ldi	r19, 0x00	; 0
   15248:	41 e0       	ldi	r20, 0x01	; 1
   1524a:	50 e0       	ldi	r21, 0x00	; 0
   1524c:	60 e1       	ldi	r22, 0x10	; 16
   1524e:	70 e0       	ldi	r23, 0x00	; 0
   15250:	8a e8       	ldi	r24, 0x8A	; 138
   15252:	98 e1       	ldi	r25, 0x18	; 24
   15254:	0e 94 89 92 	call	0x12512	; 0x12512 <V2B_MSB>
   15258:	e0 91 6d 18 	lds	r30, 0x186D	; 0x80186d <SS80p>
   1525c:	f0 91 6e 18 	lds	r31, 0x186E	; 0x80186e <SS80p+0x1>
   15260:	04 ad       	ldd	r16, Z+60	; 0x3c
   15262:	10 e0       	ldi	r17, 0x00	; 0
   15264:	20 e0       	ldi	r18, 0x00	; 0
   15266:	30 e0       	ldi	r19, 0x00	; 0
   15268:	41 e0       	ldi	r20, 0x01	; 1
   1526a:	50 e0       	ldi	r21, 0x00	; 0
   1526c:	61 e1       	ldi	r22, 0x11	; 17
   1526e:	70 e0       	ldi	r23, 0x00	; 0
   15270:	8a e8       	ldi	r24, 0x8A	; 138
   15272:	98 e1       	ldi	r25, 0x18	; 24
   15274:	0e 94 89 92 	call	0x12512	; 0x12512 <V2B_MSB>
   15278:	e0 91 6d 18 	lds	r30, 0x186D	; 0x80186d <SS80p>
   1527c:	f0 91 6e 18 	lds	r31, 0x186E	; 0x80186e <SS80p+0x1>
   15280:	05 ad       	ldd	r16, Z+61	; 0x3d
   15282:	10 e0       	ldi	r17, 0x00	; 0
   15284:	20 e0       	ldi	r18, 0x00	; 0
   15286:	30 e0       	ldi	r19, 0x00	; 0
   15288:	41 e0       	ldi	r20, 0x01	; 1
   1528a:	50 e0       	ldi	r21, 0x00	; 0
   1528c:	62 e1       	ldi	r22, 0x12	; 18
   1528e:	70 e0       	ldi	r23, 0x00	; 0
   15290:	8a e8       	ldi	r24, 0x8A	; 138
   15292:	98 e1       	ldi	r25, 0x18	; 24
   15294:	0e 94 89 92 	call	0x12512	; 0x12512 <V2B_MSB>
   15298:	8a e8       	ldi	r24, 0x8A	; 138
   1529a:	98 e1       	ldi	r25, 0x18	; 24
   1529c:	1f 91       	pop	r17
   1529e:	0f 91       	pop	r16
   152a0:	08 95       	ret

000152a2 <SS80VolumePack>:
   152a2:	0f 93       	push	r16
   152a4:	1f 93       	push	r17
   152a6:	2d e0       	ldi	r18, 0x0D	; 13
   152a8:	30 e0       	ldi	r19, 0x00	; 0
   152aa:	fc 01       	movw	r30, r24
   152ac:	31 83       	std	Z+1, r19	; 0x01
   152ae:	20 83       	st	Z, r18
   152b0:	e0 91 6d 18 	lds	r30, 0x186D	; 0x80186d <SS80p>
   152b4:	f0 91 6e 18 	lds	r31, 0x186E	; 0x80186e <SS80p+0x1>
   152b8:	fe 96       	adiw	r30, 0x3e	; 62
   152ba:	00 81       	ld	r16, Z
   152bc:	11 81       	ldd	r17, Z+1	; 0x01
   152be:	22 81       	ldd	r18, Z+2	; 0x02
   152c0:	33 81       	ldd	r19, Z+3	; 0x03
   152c2:	43 e0       	ldi	r20, 0x03	; 3
   152c4:	50 e0       	ldi	r21, 0x00	; 0
   152c6:	60 e0       	ldi	r22, 0x00	; 0
   152c8:	70 e0       	ldi	r23, 0x00	; 0
   152ca:	8d e7       	ldi	r24, 0x7D	; 125
   152cc:	98 e1       	ldi	r25, 0x18	; 24
   152ce:	0e 94 89 92 	call	0x12512	; 0x12512 <V2B_MSB>
   152d2:	e0 91 6d 18 	lds	r30, 0x186D	; 0x80186d <SS80p>
   152d6:	f0 91 6e 18 	lds	r31, 0x186E	; 0x80186e <SS80p+0x1>
   152da:	ee 5b       	subi	r30, 0xBE	; 190
   152dc:	ff 4f       	sbci	r31, 0xFF	; 255
   152de:	00 81       	ld	r16, Z
   152e0:	10 e0       	ldi	r17, 0x00	; 0
   152e2:	20 e0       	ldi	r18, 0x00	; 0
   152e4:	30 e0       	ldi	r19, 0x00	; 0
   152e6:	41 e0       	ldi	r20, 0x01	; 1
   152e8:	50 e0       	ldi	r21, 0x00	; 0
   152ea:	63 e0       	ldi	r22, 0x03	; 3
   152ec:	70 e0       	ldi	r23, 0x00	; 0
   152ee:	8d e7       	ldi	r24, 0x7D	; 125
   152f0:	98 e1       	ldi	r25, 0x18	; 24
   152f2:	0e 94 89 92 	call	0x12512	; 0x12512 <V2B_MSB>
   152f6:	e0 91 6d 18 	lds	r30, 0x186D	; 0x80186d <SS80p>
   152fa:	f0 91 6e 18 	lds	r31, 0x186E	; 0x80186e <SS80p+0x1>
   152fe:	ed 5b       	subi	r30, 0xBD	; 189
   15300:	ff 4f       	sbci	r31, 0xFF	; 255
   15302:	00 81       	ld	r16, Z
   15304:	11 81       	ldd	r17, Z+1	; 0x01
   15306:	20 e0       	ldi	r18, 0x00	; 0
   15308:	30 e0       	ldi	r19, 0x00	; 0
   1530a:	42 e0       	ldi	r20, 0x02	; 2
   1530c:	50 e0       	ldi	r21, 0x00	; 0
   1530e:	64 e0       	ldi	r22, 0x04	; 4
   15310:	70 e0       	ldi	r23, 0x00	; 0
   15312:	8d e7       	ldi	r24, 0x7D	; 125
   15314:	98 e1       	ldi	r25, 0x18	; 24
   15316:	0e 94 89 92 	call	0x12512	; 0x12512 <V2B_MSB>
   1531a:	e0 91 6d 18 	lds	r30, 0x186D	; 0x80186d <SS80p>
   1531e:	f0 91 6e 18 	lds	r31, 0x186E	; 0x80186e <SS80p+0x1>
   15322:	eb 5b       	subi	r30, 0xBB	; 187
   15324:	ff 4f       	sbci	r31, 0xFF	; 255
   15326:	00 81       	ld	r16, Z
   15328:	11 81       	ldd	r17, Z+1	; 0x01
   1532a:	22 81       	ldd	r18, Z+2	; 0x02
   1532c:	33 81       	ldd	r19, Z+3	; 0x03
   1532e:	46 e0       	ldi	r20, 0x06	; 6
   15330:	50 e0       	ldi	r21, 0x00	; 0
   15332:	66 e0       	ldi	r22, 0x06	; 6
   15334:	70 e0       	ldi	r23, 0x00	; 0
   15336:	8d e7       	ldi	r24, 0x7D	; 125
   15338:	98 e1       	ldi	r25, 0x18	; 24
   1533a:	0e 94 89 92 	call	0x12512	; 0x12512 <V2B_MSB>
   1533e:	e0 91 6d 18 	lds	r30, 0x186D	; 0x80186d <SS80p>
   15342:	f0 91 6e 18 	lds	r31, 0x186E	; 0x80186e <SS80p+0x1>
   15346:	e7 5b       	subi	r30, 0xB7	; 183
   15348:	ff 4f       	sbci	r31, 0xFF	; 255
   1534a:	00 81       	ld	r16, Z
   1534c:	10 e0       	ldi	r17, 0x00	; 0
   1534e:	20 e0       	ldi	r18, 0x00	; 0
   15350:	30 e0       	ldi	r19, 0x00	; 0
   15352:	41 e0       	ldi	r20, 0x01	; 1
   15354:	50 e0       	ldi	r21, 0x00	; 0
   15356:	6c e0       	ldi	r22, 0x0C	; 12
   15358:	70 e0       	ldi	r23, 0x00	; 0
   1535a:	8d e7       	ldi	r24, 0x7D	; 125
   1535c:	98 e1       	ldi	r25, 0x18	; 24
   1535e:	0e 94 89 92 	call	0x12512	; 0x12512 <V2B_MSB>
   15362:	8d e7       	ldi	r24, 0x7D	; 125
   15364:	98 e1       	ldi	r25, 0x18	; 24
   15366:	1f 91       	pop	r17
   15368:	0f 91       	pop	r16
   1536a:	08 95       	ret

0001536c <SS80_test_extended_status>:
   1536c:	9b 01       	movw	r18, r22
   1536e:	43 e0       	ldi	r20, 0x03	; 3
   15370:	35 95       	asr	r19
   15372:	27 95       	ror	r18
   15374:	4a 95       	dec	r20
   15376:	e1 f7       	brne	.-8      	; 0x15370 <SS80_test_extended_status+0x4>
   15378:	82 0f       	add	r24, r18
   1537a:	93 1f       	adc	r25, r19
   1537c:	67 70       	andi	r22, 0x07	; 7
   1537e:	77 27       	eor	r23, r23
   15380:	20 e8       	ldi	r18, 0x80	; 128
   15382:	30 e0       	ldi	r19, 0x00	; 0
   15384:	02 c0       	rjmp	.+4      	; 0x1538a <SS80_test_extended_status+0x1e>
   15386:	35 95       	asr	r19
   15388:	27 95       	ror	r18
   1538a:	6a 95       	dec	r22
   1538c:	e2 f7       	brpl	.-8      	; 0x15386 <SS80_test_extended_status+0x1a>
   1538e:	fc 01       	movw	r30, r24
   15390:	80 81       	ld	r24, Z
   15392:	28 23       	and	r18, r24
   15394:	81 e0       	ldi	r24, 0x01	; 1
   15396:	90 e0       	ldi	r25, 0x00	; 0
   15398:	11 f4       	brne	.+4      	; 0x1539e <SS80_test_extended_status+0x32>
   1539a:	80 e0       	ldi	r24, 0x00	; 0
   1539c:	90 e0       	ldi	r25, 0x00	; 0
   1539e:	08 95       	ret

000153a0 <SS80_display_extended_status>:
   153a0:	6f 92       	push	r6
   153a2:	7f 92       	push	r7
   153a4:	8f 92       	push	r8
   153a6:	ef 92       	push	r14
   153a8:	ff 92       	push	r15
   153aa:	0f 93       	push	r16
   153ac:	1f 93       	push	r17
   153ae:	cf 93       	push	r28
   153b0:	df 93       	push	r29
   153b2:	fc 01       	movw	r30, r24
   153b4:	ac 01       	movw	r20, r24
   153b6:	48 5f       	subi	r20, 0xF8	; 248
   153b8:	5f 4f       	sbci	r21, 0xFF	; 255
   153ba:	20 e0       	ldi	r18, 0x00	; 0
   153bc:	30 e0       	ldi	r19, 0x00	; 0
   153be:	a1 91       	ld	r26, Z+
   153c0:	aa 23       	and	r26, r26
   153c2:	11 f0       	breq	.+4      	; 0x153c8 <SS80_display_extended_status+0x28>
   153c4:	21 e0       	ldi	r18, 0x01	; 1
   153c6:	30 e0       	ldi	r19, 0x00	; 0
   153c8:	e4 17       	cp	r30, r20
   153ca:	f5 07       	cpc	r31, r21
   153cc:	c1 f7       	brne	.-16     	; 0x153be <SS80_display_extended_status+0x1e>
   153ce:	23 2b       	or	r18, r19
   153d0:	a1 f1       	breq	.+104    	; 0x1543a <SS80_display_extended_status+0x9a>
   153d2:	8c 01       	movw	r16, r24
   153d4:	7f 93       	push	r23
   153d6:	6f 93       	push	r22
   153d8:	8c ea       	ldi	r24, 0xAC	; 172
   153da:	95 e2       	ldi	r25, 0x25	; 37
   153dc:	1f 92       	push	r1
   153de:	9f 93       	push	r25
   153e0:	8f 93       	push	r24
   153e2:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   153e6:	cb ec       	ldi	r28, 0xCB	; 203
   153e8:	d1 e0       	ldi	r29, 0x01	; 1
   153ea:	0f 90       	pop	r0
   153ec:	0f 90       	pop	r0
   153ee:	0f 90       	pop	r0
   153f0:	0f 90       	pop	r0
   153f2:	0f 90       	pop	r0
   153f4:	81 ea       	ldi	r24, 0xA1	; 161
   153f6:	95 e2       	ldi	r25, 0x25	; 37
   153f8:	3c 01       	movw	r6, r24
   153fa:	e8 80       	ld	r14, Y
   153fc:	f9 80       	ldd	r15, Y+1	; 0x01
   153fe:	9f ef       	ldi	r25, 0xFF	; 255
   15400:	e9 16       	cp	r14, r25
   15402:	f9 06       	cpc	r15, r25
   15404:	d1 f0       	breq	.+52     	; 0x1543a <SS80_display_extended_status+0x9a>
   15406:	b7 01       	movw	r22, r14
   15408:	c8 01       	movw	r24, r16
   1540a:	b0 df       	rcall	.-160    	; 0x1536c <SS80_test_extended_status>
   1540c:	89 2b       	or	r24, r25
   1540e:	99 f0       	breq	.+38     	; 0x15436 <SS80_display_extended_status+0x96>
   15410:	8b 81       	ldd	r24, Y+3	; 0x03
   15412:	8f 93       	push	r24
   15414:	8a 81       	ldd	r24, Y+2	; 0x02
   15416:	8f 93       	push	r24
   15418:	ff 92       	push	r15
   1541a:	ef 92       	push	r14
   1541c:	1f 92       	push	r1
   1541e:	7f 92       	push	r7
   15420:	6f 92       	push	r6
   15422:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   15426:	8d b7       	in	r24, 0x3d	; 61
   15428:	9e b7       	in	r25, 0x3e	; 62
   1542a:	07 96       	adiw	r24, 0x07	; 7
   1542c:	0f b6       	in	r0, 0x3f	; 63
   1542e:	f8 94       	cli
   15430:	9e bf       	out	0x3e, r25	; 62
   15432:	0f be       	out	0x3f, r0	; 63
   15434:	8d bf       	out	0x3d, r24	; 61
   15436:	24 96       	adiw	r28, 0x04	; 4
   15438:	e0 cf       	rjmp	.-64     	; 0x153fa <SS80_display_extended_status+0x5a>
   1543a:	df 91       	pop	r29
   1543c:	cf 91       	pop	r28
   1543e:	1f 91       	pop	r17
   15440:	0f 91       	pop	r16
   15442:	ff 90       	pop	r15
   15444:	ef 90       	pop	r14
   15446:	8f 90       	pop	r8
   15448:	7f 90       	pop	r7
   1544a:	6f 90       	pop	r6
   1544c:	08 95       	ret

0001544e <SS80_send_status>:
   1544e:	a6 e1       	ldi	r26, 0x16	; 22
   15450:	b0 e0       	ldi	r27, 0x00	; 0
   15452:	ed e2       	ldi	r30, 0x2D	; 45
   15454:	fa ea       	ldi	r31, 0xAA	; 170
   15456:	0c 94 ff e5 	jmp	0x1cbfe	; 0x1cbfe <__prologue_saves__+0x18>
   1545a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1545e:	85 ff       	sbrs	r24, 5
   15460:	0a c0       	rjmp	.+20     	; 0x15476 <SS80_send_status+0x28>
   15462:	8d e8       	ldi	r24, 0x8D	; 141
   15464:	95 e2       	ldi	r25, 0x25	; 37
   15466:	1f 92       	push	r1
   15468:	9f 93       	push	r25
   1546a:	8f 93       	push	r24
   1546c:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   15470:	0f 90       	pop	r0
   15472:	0f 90       	pop	r0
   15474:	0f 90       	pop	r0
   15476:	ce 01       	movw	r24, r28
   15478:	01 96       	adiw	r24, 0x01	; 1
   1547a:	7c 01       	movw	r14, r24
   1547c:	84 e1       	ldi	r24, 0x14	; 20
   1547e:	f7 01       	movw	r30, r14
   15480:	11 92       	st	Z+, r1
   15482:	8a 95       	dec	r24
   15484:	e9 f7       	brne	.-6      	; 0x15480 <SS80_send_status+0x32>
   15486:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80s>
   1548a:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80s+0x1>
   1548e:	86 81       	ldd	r24, Z+6	; 0x06
   15490:	20 e1       	ldi	r18, 0x10	; 16
   15492:	82 9f       	mul	r24, r18
   15494:	c0 01       	movw	r24, r0
   15496:	11 24       	eor	r1, r1
   15498:	95 81       	ldd	r25, Z+5	; 0x05
   1549a:	9f 70       	andi	r25, 0x0F	; 15
   1549c:	89 2b       	or	r24, r25
   1549e:	89 83       	std	Y+1, r24	; 0x01
   154a0:	8f ef       	ldi	r24, 0xFF	; 255
   154a2:	8a 83       	std	Y+2, r24	; 0x02
   154a4:	83 81       	ldd	r24, Z+3	; 0x03
   154a6:	86 ff       	sbrs	r24, 6
   154a8:	02 c0       	rjmp	.+4      	; 0x154ae <SS80_send_status+0x60>
   154aa:	92 e0       	ldi	r25, 0x02	; 2
   154ac:	9b 83       	std	Y+3, r25	; 0x03
   154ae:	82 ff       	sbrs	r24, 2
   154b0:	03 c0       	rjmp	.+6      	; 0x154b8 <SS80_send_status+0x6a>
   154b2:	9b 81       	ldd	r25, Y+3	; 0x03
   154b4:	91 60       	ori	r25, 0x01	; 1
   154b6:	9b 83       	std	Y+3, r25	; 0x03
   154b8:	80 ff       	sbrs	r24, 0
   154ba:	02 c0       	rjmp	.+4      	; 0x154c0 <SS80_send_status+0x72>
   154bc:	82 e0       	ldi	r24, 0x02	; 2
   154be:	8d 83       	std	Y+5, r24	; 0x05
   154c0:	83 81       	ldd	r24, Z+3	; 0x03
   154c2:	81 ff       	sbrs	r24, 1
   154c4:	03 c0       	rjmp	.+6      	; 0x154cc <SS80_send_status+0x7e>
   154c6:	8d 81       	ldd	r24, Y+5	; 0x05
   154c8:	82 60       	ori	r24, 0x02	; 2
   154ca:	8d 83       	std	Y+5, r24	; 0x05
   154cc:	83 81       	ldd	r24, Z+3	; 0x03
   154ce:	83 ff       	sbrs	r24, 3
   154d0:	02 c0       	rjmp	.+4      	; 0x154d6 <SS80_send_status+0x88>
   154d2:	88 e0       	ldi	r24, 0x08	; 8
   154d4:	8f 83       	std	Y+7, r24	; 0x07
   154d6:	83 81       	ldd	r24, Z+3	; 0x03
   154d8:	94 81       	ldd	r25, Z+4	; 0x04
   154da:	89 2b       	or	r24, r25
   154dc:	59 f4       	brne	.+22     	; 0x154f4 <SS80_send_status+0xa6>
   154de:	07 81       	ldd	r16, Z+7	; 0x07
   154e0:	10 85       	ldd	r17, Z+8	; 0x08
   154e2:	21 85       	ldd	r18, Z+9	; 0x09
   154e4:	32 85       	ldd	r19, Z+10	; 0x0a
   154e6:	46 e0       	ldi	r20, 0x06	; 6
   154e8:	50 e0       	ldi	r21, 0x00	; 0
   154ea:	6a e0       	ldi	r22, 0x0A	; 10
   154ec:	70 e0       	ldi	r23, 0x00	; 0
   154ee:	c7 01       	movw	r24, r14
   154f0:	0e 94 89 92 	call	0x12512	; 0x12512 <V2B_MSB>
   154f4:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80s>
   154f8:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80s+0x1>
   154fc:	83 81       	ldd	r24, Z+3	; 0x03
   154fe:	94 81       	ldd	r25, Z+4	; 0x04
   15500:	89 2b       	or	r24, r25
   15502:	11 f0       	breq	.+4      	; 0x15508 <SS80_send_status+0xba>
   15504:	81 e0       	ldi	r24, 0x01	; 1
   15506:	82 83       	std	Z+2, r24	; 0x02
   15508:	80 e0       	ldi	r24, 0x00	; 0
   1550a:	91 e0       	ldi	r25, 0x01	; 1
   1550c:	9e 8b       	std	Y+22, r25	; 0x16
   1550e:	8d 8b       	std	Y+21, r24	; 0x15
   15510:	ae 01       	movw	r20, r28
   15512:	4b 5e       	subi	r20, 0xEB	; 235
   15514:	5f 4f       	sbci	r21, 0xFF	; 255
   15516:	64 e1       	ldi	r22, 0x14	; 20
   15518:	70 e0       	ldi	r23, 0x00	; 0
   1551a:	c7 01       	movw	r24, r14
   1551c:	0e 94 e4 8b 	call	0x117c8	; 0x117c8 <gpib_write_str>
   15520:	44 97       	sbiw	r24, 0x14	; 20
   15522:	71 f0       	breq	.+28     	; 0x15540 <SS80_send_status+0xf2>
   15524:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15528:	80 ff       	sbrs	r24, 0
   1552a:	0a c0       	rjmp	.+20     	; 0x15540 <SS80_send_status+0xf2>
   1552c:	82 e7       	ldi	r24, 0x72	; 114
   1552e:	95 e2       	ldi	r25, 0x25	; 37
   15530:	1f 92       	push	r1
   15532:	9f 93       	push	r25
   15534:	8f 93       	push	r24
   15536:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1553a:	0f 90       	pop	r0
   1553c:	0f 90       	pop	r0
   1553e:	0f 90       	pop	r0
   15540:	8d 89       	ldd	r24, Y+21	; 0x15
   15542:	9e 89       	ldd	r25, Y+22	; 0x16
   15544:	88 27       	eor	r24, r24
   15546:	90 7d       	andi	r25, 0xD0	; 208
   15548:	66 96       	adiw	r28, 0x16	; 22
   1554a:	e6 e0       	ldi	r30, 0x06	; 6
   1554c:	0c 94 1b e6 	jmp	0x1cc36	; 0x1cc36 <__epilogue_restores__+0x18>

00015550 <SS80_describe>:
   15550:	a4 e0       	ldi	r26, 0x04	; 4
   15552:	b0 e0       	ldi	r27, 0x00	; 0
   15554:	ee ea       	ldi	r30, 0xAE	; 174
   15556:	fa ea       	ldi	r31, 0xAA	; 170
   15558:	0c 94 03 e6 	jmp	0x1cc06	; 0x1cc06 <__prologue_saves__+0x20>
   1555c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15560:	85 ff       	sbrs	r24, 5
   15562:	0a c0       	rjmp	.+20     	; 0x15578 <SS80_describe+0x28>
   15564:	81 e6       	ldi	r24, 0x61	; 97
   15566:	95 e2       	ldi	r25, 0x25	; 37
   15568:	1f 92       	push	r1
   1556a:	9f 93       	push	r25
   1556c:	8f 93       	push	r24
   1556e:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   15572:	0f 90       	pop	r0
   15574:	0f 90       	pop	r0
   15576:	0f 90       	pop	r0
   15578:	1c 82       	std	Y+4, r1	; 0x04
   1557a:	1b 82       	std	Y+3, r1	; 0x03
   1557c:	ce 01       	movw	r24, r28
   1557e:	01 96       	adiw	r24, 0x01	; 1
   15580:	88 dd       	rcall	.-1264   	; 0x15092 <SS80ControllerPack>
   15582:	69 81       	ldd	r22, Y+1	; 0x01
   15584:	7a 81       	ldd	r23, Y+2	; 0x02
   15586:	ae 01       	movw	r20, r28
   15588:	4d 5f       	subi	r20, 0xFD	; 253
   1558a:	5f 4f       	sbci	r21, 0xFF	; 255
   1558c:	0e 94 e4 8b 	call	0x117c8	; 0x117c8 <gpib_write_str>
   15590:	29 81       	ldd	r18, Y+1	; 0x01
   15592:	3a 81       	ldd	r19, Y+2	; 0x02
   15594:	82 17       	cp	r24, r18
   15596:	93 07       	cpc	r25, r19
   15598:	39 f0       	breq	.+14     	; 0x155a8 <SS80_describe+0x58>
   1559a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1559e:	80 ff       	sbrs	r24, 0
   155a0:	3c c0       	rjmp	.+120    	; 0x1561a <SS80_describe+0xca>
   155a2:	8e e3       	ldi	r24, 0x3E	; 62
   155a4:	95 e2       	ldi	r25, 0x25	; 37
   155a6:	31 c0       	rjmp	.+98     	; 0x1560a <SS80_describe+0xba>
   155a8:	1c 82       	std	Y+4, r1	; 0x04
   155aa:	1b 82       	std	Y+3, r1	; 0x03
   155ac:	ce 01       	movw	r24, r28
   155ae:	01 96       	adiw	r24, 0x01	; 1
   155b0:	ac dd       	rcall	.-1192   	; 0x1510a <SS80UnitPack>
   155b2:	69 81       	ldd	r22, Y+1	; 0x01
   155b4:	7a 81       	ldd	r23, Y+2	; 0x02
   155b6:	ae 01       	movw	r20, r28
   155b8:	4d 5f       	subi	r20, 0xFD	; 253
   155ba:	5f 4f       	sbci	r21, 0xFF	; 255
   155bc:	0e 94 e4 8b 	call	0x117c8	; 0x117c8 <gpib_write_str>
   155c0:	29 81       	ldd	r18, Y+1	; 0x01
   155c2:	3a 81       	ldd	r19, Y+2	; 0x02
   155c4:	82 17       	cp	r24, r18
   155c6:	93 07       	cpc	r25, r19
   155c8:	39 f0       	breq	.+14     	; 0x155d8 <SS80_describe+0x88>
   155ca:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   155ce:	80 ff       	sbrs	r24, 0
   155d0:	24 c0       	rjmp	.+72     	; 0x1561a <SS80_describe+0xca>
   155d2:	81 e2       	ldi	r24, 0x21	; 33
   155d4:	95 e2       	ldi	r25, 0x25	; 37
   155d6:	19 c0       	rjmp	.+50     	; 0x1560a <SS80_describe+0xba>
   155d8:	80 e0       	ldi	r24, 0x00	; 0
   155da:	91 e0       	ldi	r25, 0x01	; 1
   155dc:	9c 83       	std	Y+4, r25	; 0x04
   155de:	8b 83       	std	Y+3, r24	; 0x03
   155e0:	ce 01       	movw	r24, r28
   155e2:	01 96       	adiw	r24, 0x01	; 1
   155e4:	5e de       	rcall	.-836    	; 0x152a2 <SS80VolumePack>
   155e6:	69 81       	ldd	r22, Y+1	; 0x01
   155e8:	7a 81       	ldd	r23, Y+2	; 0x02
   155ea:	ae 01       	movw	r20, r28
   155ec:	4d 5f       	subi	r20, 0xFD	; 253
   155ee:	5f 4f       	sbci	r21, 0xFF	; 255
   155f0:	0e 94 e4 8b 	call	0x117c8	; 0x117c8 <gpib_write_str>
   155f4:	29 81       	ldd	r18, Y+1	; 0x01
   155f6:	3a 81       	ldd	r19, Y+2	; 0x02
   155f8:	82 17       	cp	r24, r18
   155fa:	93 07       	cpc	r25, r19
   155fc:	99 f0       	breq	.+38     	; 0x15624 <SS80_describe+0xd4>
   155fe:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15602:	80 ff       	sbrs	r24, 0
   15604:	0a c0       	rjmp	.+20     	; 0x1561a <SS80_describe+0xca>
   15606:	82 e0       	ldi	r24, 0x02	; 2
   15608:	95 e2       	ldi	r25, 0x25	; 37
   1560a:	1f 92       	push	r1
   1560c:	9f 93       	push	r25
   1560e:	8f 93       	push	r24
   15610:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   15614:	0f 90       	pop	r0
   15616:	0f 90       	pop	r0
   15618:	0f 90       	pop	r0
   1561a:	8b 81       	ldd	r24, Y+3	; 0x03
   1561c:	9c 81       	ldd	r25, Y+4	; 0x04
   1561e:	88 27       	eor	r24, r24
   15620:	90 7d       	andi	r25, 0xD0	; 208
   15622:	02 c0       	rjmp	.+4      	; 0x15628 <SS80_describe+0xd8>
   15624:	80 e0       	ldi	r24, 0x00	; 0
   15626:	90 e0       	ldi	r25, 0x00	; 0
   15628:	24 96       	adiw	r28, 0x04	; 4
   1562a:	e2 e0       	ldi	r30, 0x02	; 2
   1562c:	0c 94 1f e6 	jmp	0x1cc3e	; 0x1cc3e <__epilogue_restores__+0x20>

00015630 <SS80_Check_Unit>:
   15630:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80s>
   15634:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80s+0x1>
   15638:	88 23       	and	r24, r24
   1563a:	d1 f0       	breq	.+52     	; 0x15670 <SS80_Check_Unit+0x40>
   1563c:	8f 30       	cpi	r24, 0x0F	; 15
   1563e:	c1 f0       	breq	.+48     	; 0x15670 <SS80_Check_Unit+0x40>
   15640:	23 81       	ldd	r18, Z+3	; 0x03
   15642:	34 81       	ldd	r19, Z+4	; 0x04
   15644:	20 64       	ori	r18, 0x40	; 64
   15646:	34 83       	std	Z+4, r19	; 0x04
   15648:	23 83       	std	Z+3, r18	; 0x03
   1564a:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <debuglevel>
   1564e:	90 ff       	sbrs	r25, 0
   15650:	10 c0       	rjmp	.+32     	; 0x15672 <SS80_Check_Unit+0x42>
   15652:	1f 92       	push	r1
   15654:	8f 93       	push	r24
   15656:	8a ee       	ldi	r24, 0xEA	; 234
   15658:	94 e2       	ldi	r25, 0x24	; 36
   1565a:	1f 92       	push	r1
   1565c:	9f 93       	push	r25
   1565e:	8f 93       	push	r24
   15660:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   15664:	0f 90       	pop	r0
   15666:	0f 90       	pop	r0
   15668:	0f 90       	pop	r0
   1566a:	0f 90       	pop	r0
   1566c:	0f 90       	pop	r0
   1566e:	08 95       	ret
   15670:	85 83       	std	Z+5, r24	; 0x05
   15672:	08 95       	ret

00015674 <SS80_Check_Volume>:
   15674:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80s>
   15678:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80s+0x1>
   1567c:	88 23       	and	r24, r24
   1567e:	c1 f0       	breq	.+48     	; 0x156b0 <SS80_Check_Volume+0x3c>
   15680:	23 81       	ldd	r18, Z+3	; 0x03
   15682:	34 81       	ldd	r19, Z+4	; 0x04
   15684:	20 64       	ori	r18, 0x40	; 64
   15686:	34 83       	std	Z+4, r19	; 0x04
   15688:	23 83       	std	Z+3, r18	; 0x03
   1568a:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <debuglevel>
   1568e:	90 ff       	sbrs	r25, 0
   15690:	10 c0       	rjmp	.+32     	; 0x156b2 <SS80_Check_Volume+0x3e>
   15692:	1f 92       	push	r1
   15694:	8f 93       	push	r24
   15696:	80 ed       	ldi	r24, 0xD0	; 208
   15698:	94 e2       	ldi	r25, 0x24	; 36
   1569a:	1f 92       	push	r1
   1569c:	9f 93       	push	r25
   1569e:	8f 93       	push	r24
   156a0:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   156a4:	0f 90       	pop	r0
   156a6:	0f 90       	pop	r0
   156a8:	0f 90       	pop	r0
   156aa:	0f 90       	pop	r0
   156ac:	0f 90       	pop	r0
   156ae:	08 95       	ret
   156b0:	16 82       	std	Z+6, r1	; 0x06
   156b2:	08 95       	ret

000156b4 <SS80_Command_State>:
   156b4:	2f 92       	push	r2
   156b6:	3f 92       	push	r3
   156b8:	4f 92       	push	r4
   156ba:	6f 92       	push	r6
   156bc:	7f 92       	push	r7
   156be:	8f 92       	push	r8
   156c0:	af 92       	push	r10
   156c2:	bf 92       	push	r11
   156c4:	cf 92       	push	r12
   156c6:	df 92       	push	r13
   156c8:	ef 92       	push	r14
   156ca:	ff 92       	push	r15
   156cc:	0f 93       	push	r16
   156ce:	1f 93       	push	r17
   156d0:	cf 93       	push	r28
   156d2:	df 93       	push	r29
   156d4:	cd b7       	in	r28, 0x3d	; 61
   156d6:	de b7       	in	r29, 0x3e	; 62
   156d8:	60 97       	sbiw	r28, 0x10	; 16
   156da:	0f b6       	in	r0, 0x3f	; 63
   156dc:	f8 94       	cli
   156de:	de bf       	out	0x3e, r29	; 62
   156e0:	0f be       	out	0x3f, r0	; 63
   156e2:	cd bf       	out	0x3d, r28	; 61
   156e4:	e0 91 6d 18 	lds	r30, 0x186D	; 0x80186d <SS80p>
   156e8:	f0 91 6e 18 	lds	r31, 0x186E	; 0x80186e <SS80p+0x1>
   156ec:	81 81       	ldd	r24, Z+1	; 0x01
   156ee:	90 e0       	ldi	r25, 0x00	; 0
   156f0:	0e 94 c5 86 	call	0x10d8a	; 0x10d8a <gpib_disable_PPR>
   156f4:	80 e0       	ldi	r24, 0x00	; 0
   156f6:	91 e0       	ldi	r25, 0x01	; 1
   156f8:	9a 83       	std	Y+2, r25	; 0x02
   156fa:	89 83       	std	Y+1, r24	; 0x01
   156fc:	ae 01       	movw	r20, r28
   156fe:	4f 5f       	subi	r20, 0xFF	; 255
   15700:	5f 4f       	sbci	r21, 0xFF	; 255
   15702:	60 e0       	ldi	r22, 0x00	; 0
   15704:	72 e0       	ldi	r23, 0x02	; 2
   15706:	8a ee       	ldi	r24, 0xEA	; 234
   15708:	9b e1       	ldi	r25, 0x1B	; 27
   1570a:	0e 94 36 8b 	call	0x1166c	; 0x1166c <gpib_read_str>
   1570e:	6c 01       	movw	r12, r24
   15710:	89 81       	ldd	r24, Y+1	; 0x01
   15712:	9a 81       	ldd	r25, Y+2	; 0x02
   15714:	9c 01       	movw	r18, r24
   15716:	22 27       	eor	r18, r18
   15718:	30 7d       	andi	r19, 0xD0	; 208
   1571a:	23 2b       	or	r18, r19
   1571c:	79 f0       	breq	.+30     	; 0x1573c <SS80_Command_State+0x88>
   1571e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15722:	80 ff       	sbrs	r24, 0
   15724:	21 c2       	rjmp	.+1090   	; 0x15b68 <SS80_Command_State+0x4b4>
   15726:	8a ea       	ldi	r24, 0xAA	; 170
   15728:	94 e2       	ldi	r25, 0x24	; 36
   1572a:	1f 92       	push	r1
   1572c:	9f 93       	push	r25
   1572e:	8f 93       	push	r24
   15730:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   15734:	0f 90       	pop	r0
   15736:	0f 90       	pop	r0
   15738:	0f 90       	pop	r0
   1573a:	16 c2       	rjmp	.+1068   	; 0x15b68 <SS80_Command_State+0x4b4>
   1573c:	c1 14       	cp	r12, r1
   1573e:	d1 04       	cpc	r13, r1
   15740:	09 f4       	brne	.+2      	; 0x15744 <SS80_Command_State+0x90>
   15742:	17 c2       	rjmp	.+1070   	; 0x15b72 <SS80_Command_State+0x4be>
   15744:	90 fd       	sbrc	r25, 0
   15746:	0e c0       	rjmp	.+28     	; 0x15764 <SS80_Command_State+0xb0>
   15748:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1574c:	80 ff       	sbrs	r24, 0
   1574e:	0a c0       	rjmp	.+20     	; 0x15764 <SS80_Command_State+0xb0>
   15750:	81 e9       	ldi	r24, 0x91	; 145
   15752:	94 e2       	ldi	r25, 0x24	; 36
   15754:	1f 92       	push	r1
   15756:	9f 93       	push	r25
   15758:	8f 93       	push	r24
   1575a:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1575e:	0f 90       	pop	r0
   15760:	0f 90       	pop	r0
   15762:	0f 90       	pop	r0
   15764:	e1 2c       	mov	r14, r1
   15766:	f1 2c       	mov	r15, r1
   15768:	85 e9       	ldi	r24, 0x95	; 149
   1576a:	93 e2       	ldi	r25, 0x23	; 35
   1576c:	9c 01       	movw	r18, r24
   1576e:	40 e0       	ldi	r20, 0x00	; 0
   15770:	2d 83       	std	Y+5, r18	; 0x05
   15772:	3e 83       	std	Y+6, r19	; 0x06
   15774:	4f 83       	std	Y+7, r20	; 0x07
   15776:	8a eb       	ldi	r24, 0xBA	; 186
   15778:	93 e2       	ldi	r25, 0x23	; 35
   1577a:	9c 01       	movw	r18, r24
   1577c:	40 e0       	ldi	r20, 0x00	; 0
   1577e:	28 87       	std	Y+8, r18	; 0x08
   15780:	39 87       	std	Y+9, r19	; 0x09
   15782:	4a 87       	std	Y+10, r20	; 0x0a
   15784:	84 ed       	ldi	r24, 0xD4	; 212
   15786:	93 e2       	ldi	r25, 0x23	; 35
   15788:	9c 01       	movw	r18, r24
   1578a:	40 e0       	ldi	r20, 0x00	; 0
   1578c:	2b 87       	std	Y+11, r18	; 0x0b
   1578e:	3c 87       	std	Y+12, r19	; 0x0c
   15790:	4d 87       	std	Y+13, r20	; 0x0d
   15792:	8a ee       	ldi	r24, 0xEA	; 234
   15794:	93 e2       	ldi	r25, 0x23	; 35
   15796:	3c 01       	movw	r6, r24
   15798:	88 ef       	ldi	r24, 0xF8	; 248
   1579a:	93 e2       	ldi	r25, 0x23	; 35
   1579c:	9c 01       	movw	r18, r24
   1579e:	40 e0       	ldi	r20, 0x00	; 0
///
/// @param[in] uart: uart number.
///
/// @return  Character count in receive buffer.
int uart_keyhit(uint8_t uart)
{
   157a0:	2e 87       	std	Y+14, r18	; 0x0e
   157a2:	3f 87       	std	Y+15, r19	; 0x0f
   157a4:	48 8b       	std	Y+16, r20	; 0x10
   157a6:	84 e1       	ldi	r24, 0x14	; 20
   157a8:	94 e2       	ldi	r25, 0x24	; 36
   157aa:	1c 01       	movw	r2, r24
   157ac:	82 e6       	ldi	r24, 0x62	; 98
   157ae:	a8 2e       	mov	r10, r24
   157b0:	84 e2       	ldi	r24, 0x24	; 36
   157b2:	b8 2e       	mov	r11, r24
   157b4:	87 01       	movw	r16, r14
   157b6:	ec 14       	cp	r14, r12
   157b8:	fd 04       	cpc	r15, r13
   157ba:	0c f0       	brlt	.+2      	; 0x157be <SS80_Command_State+0x10a>
   157bc:	b6 c1       	rjmp	.+876    	; 0x15b2a <SS80_Command_State+0x476>
   157be:	0f 5f       	subi	r16, 0xFF	; 255
   157c0:	1f 4f       	sbci	r17, 0xFF	; 255
   157c2:	f7 01       	movw	r30, r14
   157c4:	e6 51       	subi	r30, 0x16	; 22
   157c6:	f4 4e       	sbci	r31, 0xE4	; 228
   157c8:	80 81       	ld	r24, Z
   157ca:	28 2f       	mov	r18, r24
   157cc:	30 e0       	ldi	r19, 0x00	; 0
   157ce:	a9 01       	movw	r20, r18
   157d0:	40 52       	subi	r20, 0x20	; 32
   157d2:	51 09       	sbc	r21, r1
   157d4:	40 31       	cpi	r20, 0x10	; 16
   157d6:	51 05       	cpc	r21, r1
   157d8:	80 f4       	brcc	.+32     	; 0x157fa <SS80_Command_State+0x146>
   157da:	80 52       	subi	r24, 0x20	; 32
   157dc:	29 df       	rcall	.-430    	; 0x15630 <SS80_Check_Unit>
   157de:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   157e2:	85 ff       	sbrs	r24, 5
   157e4:	a0 c1       	rjmp	.+832    	; 0x15b26 <SS80_Command_State+0x472>
   157e6:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80s>
   157ea:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80s+0x1>
   157ee:	85 81       	ldd	r24, Z+5	; 0x05
   157f0:	1f 92       	push	r1
   157f2:	8f 93       	push	r24
   157f4:	8b e7       	ldi	r24, 0x7B	; 123
   157f6:	94 e2       	ldi	r25, 0x24	; 36
   157f8:	14 c0       	rjmp	.+40     	; 0x15822 <SS80_Command_State+0x16e>
   157fa:	a9 01       	movw	r20, r18
   157fc:	40 54       	subi	r20, 0x40	; 64
   157fe:	51 09       	sbc	r21, r1
   15800:	40 31       	cpi	r20, 0x10	; 16
   15802:	51 05       	cpc	r21, r1
   15804:	c8 f4       	brcc	.+50     	; 0x15838 <SS80_Command_State+0x184>
   15806:	80 54       	subi	r24, 0x40	; 64
   15808:	35 df       	rcall	.-406    	; 0x15674 <SS80_Check_Volume>
   1580a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1580e:	85 ff       	sbrs	r24, 5
   15810:	8a c1       	rjmp	.+788    	; 0x15b26 <SS80_Command_State+0x472>
   15812:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80s>
   15816:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80s+0x1>
   1581a:	86 81       	ldd	r24, Z+6	; 0x06
   1581c:	1f 92       	push	r1
   1581e:	8f 93       	push	r24
   15820:	c5 01       	movw	r24, r10
   15822:	1f 92       	push	r1
   15824:	9f 93       	push	r25
   15826:	8f 93       	push	r24
   15828:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1582c:	0f 90       	pop	r0
   1582e:	0f 90       	pop	r0
   15830:	0f 90       	pop	r0
   15832:	0f 90       	pop	r0
   15834:	0f 90       	pop	r0
   15836:	77 c1       	rjmp	.+750    	; 0x15b26 <SS80_Command_State+0x472>
   15838:	21 15       	cp	r18, r1
   1583a:	31 05       	cpc	r19, r1
    return ( uart_rx_count( uart ) );
   1583c:	79 f4       	brne	.+30     	; 0x1585c <SS80_Command_State+0x1a8>
}
   1583e:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80s>
   15842:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80s+0x1>
   15846:	81 e0       	ldi	r24, 0x01	; 1
   15848:	90 e0       	ldi	r25, 0x00	; 0
   1584a:	91 83       	std	Z+1, r25	; 0x01
   1584c:	80 83       	st	Z, r24
   1584e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15852:	85 ff       	sbrs	r24, 5
   15854:	6a c1       	rjmp	.+724    	; 0x15b2a <SS80_Command_State+0x476>
   15856:	8a e4       	ldi	r24, 0x4A	; 74
   15858:	94 e2       	ldi	r25, 0x24	; 36
   1585a:	0f c0       	rjmp	.+30     	; 0x1587a <SS80_Command_State+0x1c6>
   1585c:	22 30       	cpi	r18, 0x02	; 2
   1585e:	31 05       	cpc	r19, r1
   15860:	a9 f4       	brne	.+42     	; 0x1588c <SS80_Command_State+0x1d8>
   15862:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80s>
   15866:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80s+0x1>
   1586a:	31 83       	std	Z+1, r19	; 0x01
   1586c:	20 83       	st	Z, r18
   1586e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15872:	85 ff       	sbrs	r24, 5
   15874:	5a c1       	rjmp	.+692    	; 0x15b2a <SS80_Command_State+0x476>
   15876:	81 e3       	ldi	r24, 0x31	; 49
   15878:	94 e2       	ldi	r25, 0x24	; 36
   1587a:	1f 92       	push	r1
   1587c:	9f 93       	push	r25
   1587e:	8f 93       	push	r24
   15880:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   15884:	0f 90       	pop	r0
   15886:	0f 90       	pop	r0
   15888:	0f 90       	pop	r0
   1588a:	4f c1       	rjmp	.+670    	; 0x15b2a <SS80_Command_State+0x476>
   1588c:	20 31       	cpi	r18, 0x10	; 16
   1588e:	31 05       	cpc	r19, r1
   15890:	a1 f5       	brne	.+104    	; 0x158fa <SS80_Command_State+0x246>
   15892:	80 91 6b 18 	lds	r24, 0x186B	; 0x80186b <SS80s>
   15896:	90 91 6c 18 	lds	r25, 0x186C	; 0x80186c <SS80s+0x1>
   1589a:	9c 83       	std	Y+4, r25	; 0x04
   1589c:	8b 83       	std	Y+3, r24	; 0x03
   1589e:	46 e0       	ldi	r20, 0x06	; 6
   158a0:	50 e0       	ldi	r21, 0x00	; 0
   158a2:	b8 01       	movw	r22, r16
   158a4:	8a ee       	ldi	r24, 0xEA	; 234
   158a6:	9b e1       	ldi	r25, 0x1B	; 27
   158a8:	0e 94 b2 92 	call	0x12564	; 0x12564 <B2V_MSB>
   158ac:	eb 81       	ldd	r30, Y+3	; 0x03
   158ae:	fc 81       	ldd	r31, Y+4	; 0x04
   158b0:	67 83       	std	Z+7, r22	; 0x07
   158b2:	70 87       	std	Z+8, r23	; 0x08
   158b4:	81 87       	std	Z+9, r24	; 0x09
   158b6:	92 87       	std	Z+10, r25	; 0x0a
   158b8:	87 01       	movw	r16, r14
   158ba:	09 5f       	subi	r16, 0xF9	; 249
   158bc:	1f 4f       	sbci	r17, 0xFF	; 255
   158be:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   158c2:	85 ff       	sbrs	r24, 5
   158c4:	30 c1       	rjmp	.+608    	; 0x15b26 <SS80_Command_State+0x472>
   158c6:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80s>
   158ca:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80s+0x1>
   158ce:	a0 91 6d 18 	lds	r26, 0x186D	; 0x80186d <SS80p>
   158d2:	b0 91 6e 18 	lds	r27, 0x186E	; 0x80186e <SS80p+0x1>
   158d6:	9f 96       	adiw	r26, 0x2f	; 47
   158d8:	0d 90       	ld	r0, X+
   158da:	bc 91       	ld	r27, X
   158dc:	a0 2d       	mov	r26, r0
   158de:	27 81       	ldd	r18, Z+7	; 0x07
   158e0:	30 85       	ldd	r19, Z+8	; 0x08
   158e2:	41 85       	ldd	r20, Z+9	; 0x09
   158e4:	52 85       	ldd	r21, Z+10	; 0x0a
   158e6:	0e 94 d3 e5 	call	0x1cba6	; 0x1cba6 <__muluhisi3>
   158ea:	9f 93       	push	r25
   158ec:	8f 93       	push	r24
   158ee:	7f 93       	push	r23
   158f0:	6f 93       	push	r22
   158f2:	1f 92       	push	r1
   158f4:	3f 92       	push	r3
   158f6:	2f 92       	push	r2
   158f8:	2e c0       	rjmp	.+92     	; 0x15956 <SS80_Command_State+0x2a2>
   158fa:	28 31       	cpi	r18, 0x18	; 24
   158fc:	31 05       	cpc	r19, r1
   158fe:	99 f5       	brne	.+102    	; 0x15966 <SS80_Command_State+0x2b2>
   15900:	80 91 6b 18 	lds	r24, 0x186B	; 0x80186b <SS80s>
   15904:	90 91 6c 18 	lds	r25, 0x186C	; 0x80186c <SS80s+0x1>
   15908:	9c 83       	std	Y+4, r25	; 0x04
   1590a:	8b 83       	std	Y+3, r24	; 0x03
   1590c:	44 e0       	ldi	r20, 0x04	; 4
   1590e:	50 e0       	ldi	r21, 0x00	; 0
   15910:	b8 01       	movw	r22, r16
   15912:	8a ee       	ldi	r24, 0xEA	; 234
   15914:	9b e1       	ldi	r25, 0x1B	; 27
   15916:	0e 94 b2 92 	call	0x12564	; 0x12564 <B2V_MSB>
   1591a:	eb 81       	ldd	r30, Y+3	; 0x03
   1591c:	fc 81       	ldd	r31, Y+4	; 0x04
   1591e:	63 87       	std	Z+11, r22	; 0x0b
   15920:	74 87       	std	Z+12, r23	; 0x0c
   15922:	85 87       	std	Z+13, r24	; 0x0d
   15924:	96 87       	std	Z+14, r25	; 0x0e
   15926:	87 01       	movw	r16, r14
   15928:	0b 5f       	subi	r16, 0xFB	; 251
   1592a:	1f 4f       	sbci	r17, 0xFF	; 255
   1592c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15930:	85 ff       	sbrs	r24, 5
   15932:	f9 c0       	rjmp	.+498    	; 0x15b26 <SS80_Command_State+0x472>
   15934:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80s>
   15938:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80s+0x1>
   1593c:	86 85       	ldd	r24, Z+14	; 0x0e
   1593e:	8f 93       	push	r24
   15940:	85 85       	ldd	r24, Z+13	; 0x0d
   15942:	8f 93       	push	r24
   15944:	84 85       	ldd	r24, Z+12	; 0x0c
   15946:	8f 93       	push	r24
   15948:	83 85       	ldd	r24, Z+11	; 0x0b
   1594a:	8f 93       	push	r24
   1594c:	1f 92       	push	r1
   1594e:	ff 85       	ldd	r31, Y+15	; 0x0f
   15950:	ff 93       	push	r31
   15952:	2e 85       	ldd	r18, Y+14	; 0x0e
   15954:	2f 93       	push	r18
   15956:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1595a:	0f b6       	in	r0, 0x3f	; 63
   1595c:	f8 94       	cli
   1595e:	de bf       	out	0x3e, r29	; 62
   15960:	0f be       	out	0x3f, r0	; 63
   15962:	cd bf       	out	0x3d, r28	; 61
   15964:	e0 c0       	rjmp	.+448    	; 0x15b26 <SS80_Command_State+0x472>
   15966:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1596a:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1596e:	24 33       	cpi	r18, 0x34	; 52
   15970:	31 05       	cpc	r19, r1
   15972:	31 f4       	brne	.+12     	; 0x15980 <SS80_Command_State+0x2cc>
   15974:	85 ff       	sbrs	r24, 5
   15976:	d7 c0       	rjmp	.+430    	; 0x15b26 <SS80_Command_State+0x472>
   15978:	1f 92       	push	r1
   1597a:	7f 92       	push	r7
   1597c:	6f 92       	push	r6
   1597e:	2c c0       	rjmp	.+88     	; 0x159d8 <SS80_Command_State+0x324>
   15980:	29 33       	cpi	r18, 0x39	; 57
   15982:	31 05       	cpc	r19, r1
   15984:	59 f4       	brne	.+22     	; 0x1599c <SS80_Command_State+0x2e8>
   15986:	87 01       	movw	r16, r14
   15988:	0d 5f       	subi	r16, 0xFD	; 253
   1598a:	1f 4f       	sbci	r17, 0xFF	; 255
   1598c:	85 ff       	sbrs	r24, 5
   1598e:	cb c0       	rjmp	.+406    	; 0x15b26 <SS80_Command_State+0x472>
   15990:	1f 92       	push	r1
   15992:	9c 85       	ldd	r25, Y+12	; 0x0c
   15994:	9f 93       	push	r25
   15996:	eb 85       	ldd	r30, Y+11	; 0x0b
   15998:	ef 93       	push	r30
   1599a:	1e c0       	rjmp	.+60     	; 0x159d8 <SS80_Command_State+0x324>
   1599c:	2b 33       	cpi	r18, 0x3B	; 59
   1599e:	31 05       	cpc	r19, r1
   159a0:	59 f4       	brne	.+22     	; 0x159b8 <SS80_Command_State+0x304>
   159a2:	87 01       	movw	r16, r14
   159a4:	0e 5f       	subi	r16, 0xFE	; 254
   159a6:	1f 4f       	sbci	r17, 0xFF	; 255
   159a8:	85 ff       	sbrs	r24, 5
   159aa:	bd c0       	rjmp	.+378    	; 0x15b26 <SS80_Command_State+0x472>
   159ac:	1f 92       	push	r1
   159ae:	f9 85       	ldd	r31, Y+9	; 0x09
   159b0:	ff 93       	push	r31
   159b2:	28 85       	ldd	r18, Y+8	; 0x08
   159b4:	2f 93       	push	r18
   159b6:	10 c0       	rjmp	.+32     	; 0x159d8 <SS80_Command_State+0x324>
   159b8:	28 34       	cpi	r18, 0x48	; 72
   159ba:	31 05       	cpc	r19, r1
   159bc:	99 f4       	brne	.+38     	; 0x159e4 <SS80_Command_State+0x330>
   159be:	87 01       	movw	r16, r14
   159c0:	0e 5f       	subi	r16, 0xFE	; 254
   159c2:	1f 4f       	sbci	r17, 0xFF	; 255
   159c4:	80 73       	andi	r24, 0x30	; 48
   159c6:	99 27       	eor	r25, r25
   159c8:	89 2b       	or	r24, r25
   159ca:	09 f4       	brne	.+2      	; 0x159ce <SS80_Command_State+0x31a>
   159cc:	ac c0       	rjmp	.+344    	; 0x15b26 <SS80_Command_State+0x472>
   159ce:	1f 92       	push	r1
   159d0:	3e 81       	ldd	r19, Y+6	; 0x06
   159d2:	3f 93       	push	r19
   159d4:	4d 81       	ldd	r20, Y+5	; 0x05
   159d6:	4f 93       	push	r20
   159d8:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   159dc:	0f 90       	pop	r0
   159de:	0f 90       	pop	r0
   159e0:	0f 90       	pop	r0
   159e2:	a1 c0       	rjmp	.+322    	; 0x15b26 <SS80_Command_State+0x472>
   159e4:	24 30       	cpi	r18, 0x04	; 4
   159e6:	31 05       	cpc	r19, r1
   159e8:	41 f4       	brne	.+16     	; 0x159fa <SS80_Command_State+0x346>
   159ea:	80 73       	andi	r24, 0x30	; 48
   159ec:	99 27       	eor	r25, r25
   159ee:	89 2b       	or	r24, r25
   159f0:	09 f4       	brne	.+2      	; 0x159f4 <SS80_Command_State+0x340>
   159f2:	9b c0       	rjmp	.+310    	; 0x15b2a <SS80_Command_State+0x476>
   159f4:	84 e7       	ldi	r24, 0x74	; 116
   159f6:	93 e2       	ldi	r25, 0x23	; 35
   159f8:	40 cf       	rjmp	.-384    	; 0x1587a <SS80_Command_State+0x1c6>
   159fa:	2e 30       	cpi	r18, 0x0E	; 14
   159fc:	31 05       	cpc	r19, r1
   159fe:	29 f4       	brne	.+10     	; 0x15a0a <SS80_Command_State+0x356>
   15a00:	85 ff       	sbrs	r24, 5
   15a02:	93 c0       	rjmp	.+294    	; 0x15b2a <SS80_Command_State+0x476>
   15a04:	8e e5       	ldi	r24, 0x5E	; 94
   15a06:	93 e2       	ldi	r25, 0x23	; 35
   15a08:	38 cf       	rjmp	.-400    	; 0x1587a <SS80_Command_State+0x1c6>
   15a0a:	2f 30       	cpi	r18, 0x0F	; 15
   15a0c:	31 05       	cpc	r19, r1
   15a0e:	29 f4       	brne	.+10     	; 0x15a1a <SS80_Command_State+0x366>
   15a10:	85 ff       	sbrs	r24, 5
   15a12:	8b c0       	rjmp	.+278    	; 0x15b2a <SS80_Command_State+0x476>
   15a14:	81 e4       	ldi	r24, 0x41	; 65
   15a16:	93 e2       	ldi	r25, 0x23	; 35
   15a18:	30 cf       	rjmp	.-416    	; 0x1587a <SS80_Command_State+0x1c6>
   15a1a:	21 33       	cpi	r18, 0x31	; 49
   15a1c:	31 05       	cpc	r19, r1
   15a1e:	41 f4       	brne	.+16     	; 0x15a30 <SS80_Command_State+0x37c>
   15a20:	87 01       	movw	r16, r14
   15a22:	0d 5f       	subi	r16, 0xFD	; 253
   15a24:	1f 4f       	sbci	r17, 0xFF	; 255
   15a26:	85 ff       	sbrs	r24, 5
   15a28:	80 c0       	rjmp	.+256    	; 0x15b2a <SS80_Command_State+0x476>
   15a2a:	85 e2       	ldi	r24, 0x25	; 37
   15a2c:	93 e2       	ldi	r25, 0x23	; 35
   15a2e:	25 cf       	rjmp	.-438    	; 0x1587a <SS80_Command_State+0x1c6>
   15a30:	25 33       	cpi	r18, 0x35	; 53
   15a32:	31 05       	cpc	r19, r1
   15a34:	69 f4       	brne	.+26     	; 0x15a50 <SS80_Command_State+0x39c>
   15a36:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80s>
   15a3a:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80s+0x1>
   15a3e:	24 e0       	ldi	r18, 0x04	; 4
   15a40:	30 e0       	ldi	r19, 0x00	; 0
   15a42:	31 83       	std	Z+1, r19	; 0x01
   15a44:	20 83       	st	Z, r18
   15a46:	85 ff       	sbrs	r24, 5
   15a48:	70 c0       	rjmp	.+224    	; 0x15b2a <SS80_Command_State+0x476>
   15a4a:	84 e1       	ldi	r24, 0x14	; 20
   15a4c:	93 e2       	ldi	r25, 0x23	; 35
   15a4e:	15 cf       	rjmp	.-470    	; 0x1587a <SS80_Command_State+0x1c6>
   15a50:	27 33       	cpi	r18, 0x37	; 55
   15a52:	31 05       	cpc	r19, r1
   15a54:	59 f4       	brne	.+22     	; 0x15a6c <SS80_Command_State+0x3b8>
   15a56:	87 01       	movw	r16, r14
   15a58:	0d 5f       	subi	r16, 0xFD	; 253
   15a5a:	1f 4f       	sbci	r17, 0xFF	; 255
   15a5c:	80 73       	andi	r24, 0x30	; 48
   15a5e:	99 27       	eor	r25, r25
   15a60:	89 2b       	or	r24, r25
   15a62:	09 f4       	brne	.+2      	; 0x15a66 <SS80_Command_State+0x3b2>
   15a64:	62 c0       	rjmp	.+196    	; 0x15b2a <SS80_Command_State+0x476>
   15a66:	86 ef       	ldi	r24, 0xF6	; 246
   15a68:	92 e2       	ldi	r25, 0x22	; 34
   15a6a:	07 cf       	rjmp	.-498    	; 0x1587a <SS80_Command_State+0x1c6>
   15a6c:	2e 33       	cpi	r18, 0x3E	; 62
   15a6e:	31 05       	cpc	r19, r1
   15a70:	c1 f4       	brne	.+48     	; 0x15aa2 <SS80_Command_State+0x3ee>
   15a72:	80 73       	andi	r24, 0x30	; 48
   15a74:	99 27       	eor	r25, r25
   15a76:	89 2b       	or	r24, r25
   15a78:	81 f0       	breq	.+32     	; 0x15a9a <SS80_Command_State+0x3e6>
   15a7a:	87 ed       	ldi	r24, 0xD7	; 215
   15a7c:	92 e2       	ldi	r25, 0x22	; 34
   15a7e:	1f 92       	push	r1
   15a80:	9f 93       	push	r25
   15a82:	8f 93       	push	r24
   15a84:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   15a88:	64 ec       	ldi	r22, 0xC4	; 196
   15a8a:	7f e0       	ldi	r23, 0x0F	; 15
   15a8c:	c8 01       	movw	r24, r16
   15a8e:	86 51       	subi	r24, 0x16	; 22
   15a90:	94 4e       	sbci	r25, 0xE4	; 228
   15a92:	86 dc       	rcall	.-1780   	; 0x153a0 <SS80_display_extended_status>
   15a94:	0f 90       	pop	r0
   15a96:	0f 90       	pop	r0
   15a98:	0f 90       	pop	r0
   15a9a:	87 01       	movw	r16, r14
   15a9c:	07 5f       	subi	r16, 0xF7	; 247
   15a9e:	1f 4f       	sbci	r17, 0xFF	; 255
   15aa0:	44 c0       	rjmp	.+136    	; 0x15b2a <SS80_Command_State+0x476>
   15aa2:	2c 34       	cpi	r18, 0x4C	; 76
   15aa4:	31 05       	cpc	r19, r1
   15aa6:	39 f4       	brne	.+14     	; 0x15ab6 <SS80_Command_State+0x402>
   15aa8:	80 73       	andi	r24, 0x30	; 48
   15aaa:	99 27       	eor	r25, r25
   15aac:	89 2b       	or	r24, r25
   15aae:	e9 f1       	breq	.+122    	; 0x15b2a <SS80_Command_State+0x476>
   15ab0:	8c eb       	ldi	r24, 0xBC	; 188
   15ab2:	92 e2       	ldi	r25, 0x22	; 34
   15ab4:	e2 ce       	rjmp	.-572    	; 0x1587a <SS80_Command_State+0x1c6>
   15ab6:	2d 34       	cpi	r18, 0x4D	; 77
   15ab8:	31 05       	cpc	r19, r1
   15aba:	39 f4       	brne	.+14     	; 0x15aca <SS80_Command_State+0x416>
   15abc:	80 73       	andi	r24, 0x30	; 48
   15abe:	99 27       	eor	r25, r25
   15ac0:	89 2b       	or	r24, r25
   15ac2:	99 f1       	breq	.+102    	; 0x15b2a <SS80_Command_State+0x476>
   15ac4:	83 ea       	ldi	r24, 0xA3	; 163
   15ac6:	92 e2       	ldi	r25, 0x22	; 34
   15ac8:	d8 ce       	rjmp	.-592    	; 0x1587a <SS80_Command_State+0x1c6>
   15aca:	2d 30       	cpi	r18, 0x0D	; 13
   15acc:	31 05       	cpc	r19, r1
   15ace:	69 f4       	brne	.+26     	; 0x15aea <SS80_Command_State+0x436>
   15ad0:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80s>
   15ad4:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80s+0x1>
   15ad8:	23 e0       	ldi	r18, 0x03	; 3
   15ada:	30 e0       	ldi	r19, 0x00	; 0
   15adc:	31 83       	std	Z+1, r19	; 0x01
   15ade:	20 83       	st	Z, r18
   15ae0:	85 ff       	sbrs	r24, 5
   15ae2:	23 c0       	rjmp	.+70     	; 0x15b2a <SS80_Command_State+0x476>
   15ae4:	8c e8       	ldi	r24, 0x8C	; 140
   15ae6:	92 e2       	ldi	r25, 0x22	; 34
   15ae8:	c8 ce       	rjmp	.-624    	; 0x1587a <SS80_Command_State+0x1c6>
   15aea:	23 33       	cpi	r18, 0x33	; 51
   15aec:	31 05       	cpc	r19, r1
   15aee:	51 f4       	brne	.+20     	; 0x15b04 <SS80_Command_State+0x450>
   15af0:	87 01       	movw	r16, r14
   15af2:	0c 5f       	subi	r16, 0xFC	; 252
   15af4:	1f 4f       	sbci	r17, 0xFF	; 255
   15af6:	80 73       	andi	r24, 0x30	; 48
   15af8:	99 27       	eor	r25, r25
   15afa:	89 2b       	or	r24, r25
   15afc:	b1 f0       	breq	.+44     	; 0x15b2a <SS80_Command_State+0x476>
   15afe:	8b e6       	ldi	r24, 0x6B	; 107
   15b00:	92 e2       	ldi	r25, 0x22	; 34
   15b02:	bb ce       	rjmp	.-650    	; 0x1587a <SS80_Command_State+0x1c6>
   15b04:	80 ff       	sbrs	r24, 0
   15b06:	28 c0       	rjmp	.+80     	; 0x15b58 <SS80_Command_State+0x4a4>
   15b08:	3f 93       	push	r19
   15b0a:	2f 93       	push	r18
   15b0c:	8b e4       	ldi	r24, 0x4B	; 75
   15b0e:	92 e2       	ldi	r25, 0x22	; 34
   15b10:	1f 92       	push	r1
   15b12:	9f 93       	push	r25
   15b14:	8f 93       	push	r24
   15b16:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   15b1a:	0f 90       	pop	r0
   15b1c:	0f 90       	pop	r0
   15b1e:	0f 90       	pop	r0
   15b20:	0f 90       	pop	r0
   15b22:	0f 90       	pop	r0
   15b24:	02 c0       	rjmp	.+4      	; 0x15b2a <SS80_Command_State+0x476>
   15b26:	78 01       	movw	r14, r16
   15b28:	45 ce       	rjmp	.-886    	; 0x157b4 <SS80_Command_State+0x100>
   15b2a:	0c 15       	cp	r16, r12
   15b2c:	1d 05       	cpc	r17, r13
   15b2e:	a1 f0       	breq	.+40     	; 0x15b58 <SS80_Command_State+0x4a4>
   15b30:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15b34:	80 ff       	sbrs	r24, 0
   15b36:	10 c0       	rjmp	.+32     	; 0x15b58 <SS80_Command_State+0x4a4>
   15b38:	df 92       	push	r13
   15b3a:	cf 92       	push	r12
   15b3c:	1f 93       	push	r17
   15b3e:	0f 93       	push	r16
   15b40:	83 e1       	ldi	r24, 0x13	; 19
   15b42:	92 e2       	ldi	r25, 0x22	; 34
   15b44:	1f 92       	push	r1
   15b46:	9f 93       	push	r25
   15b48:	8f 93       	push	r24
   15b4a:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   15b4e:	0f b6       	in	r0, 0x3f	; 63
   15b50:	f8 94       	cli
   15b52:	de bf       	out	0x3e, r29	; 62
   15b54:	0f be       	out	0x3f, r0	; 63
   15b56:	cd bf       	out	0x3d, r28	; 61
   15b58:	e0 91 6d 18 	lds	r30, 0x186D	; 0x80186d <SS80p>
   15b5c:	f0 91 6e 18 	lds	r31, 0x186E	; 0x80186e <SS80p+0x1>
   15b60:	81 81       	ldd	r24, Z+1	; 0x01
   15b62:	90 e0       	ldi	r25, 0x00	; 0
   15b64:	0e 94 94 86 	call	0x10d28	; 0x10d28 <gpib_enable_PPR>
   15b68:	89 81       	ldd	r24, Y+1	; 0x01
   15b6a:	9a 81       	ldd	r25, Y+2	; 0x02
   15b6c:	88 27       	eor	r24, r24
   15b6e:	90 7d       	andi	r25, 0xD0	; 208
   15b70:	02 c0       	rjmp	.+4      	; 0x15b76 <SS80_Command_State+0x4c2>
   15b72:	80 e0       	ldi	r24, 0x00	; 0
   15b74:	90 e0       	ldi	r25, 0x00	; 0
   15b76:	60 96       	adiw	r28, 0x10	; 16
   15b78:	0f b6       	in	r0, 0x3f	; 63
   15b7a:	f8 94       	cli
   15b7c:	de bf       	out	0x3e, r29	; 62
   15b7e:	0f be       	out	0x3f, r0	; 63
   15b80:	cd bf       	out	0x3d, r28	; 61
   15b82:	df 91       	pop	r29
   15b84:	cf 91       	pop	r28
   15b86:	1f 91       	pop	r17
   15b88:	0f 91       	pop	r16
   15b8a:	ff 90       	pop	r15
   15b8c:	ef 90       	pop	r14
   15b8e:	df 90       	pop	r13
   15b90:	cf 90       	pop	r12
   15b92:	bf 90       	pop	r11
   15b94:	af 90       	pop	r10
   15b96:	8f 90       	pop	r8
   15b98:	7f 90       	pop	r7
   15b9a:	6f 90       	pop	r6
   15b9c:	4f 90       	pop	r4
   15b9e:	3f 90       	pop	r3
   15ba0:	2f 90       	pop	r2
   15ba2:	08 95       	ret

00015ba4 <SS80_cmd_seek>:
   15ba4:	a0 e0       	ldi	r26, 0x00	; 0
   15ba6:	b0 e0       	ldi	r27, 0x00	; 0
   15ba8:	e8 ed       	ldi	r30, 0xD8	; 216
   15baa:	fd ea       	ldi	r31, 0xAD	; 173
   15bac:	0c 94 f5 e5 	jmp	0x1cbea	; 0x1cbea <__prologue_saves__+0x4>
   15bb0:	c0 91 6b 18 	lds	r28, 0x186B	; 0x80186b <SS80s>
   15bb4:	d0 91 6c 18 	lds	r29, 0x186C	; 0x80186c <SS80s+0x1>
   15bb8:	8f 80       	ldd	r8, Y+7	; 0x07
   15bba:	98 84       	ldd	r9, Y+8	; 0x08
   15bbc:	a9 84       	ldd	r10, Y+9	; 0x09
   15bbe:	ba 84       	ldd	r11, Y+10	; 0x0a
   15bc0:	00 91 6d 18 	lds	r16, 0x186D	; 0x80186d <SS80p>
   15bc4:	10 91 6e 18 	lds	r17, 0x186E	; 0x80186e <SS80p+0x1>
   15bc8:	f8 01       	movw	r30, r16
   15bca:	c7 a4       	ldd	r12, Z+47	; 0x2f
   15bcc:	d0 a8       	ldd	r13, Z+48	; 0x30
   15bce:	e1 2c       	mov	r14, r1
   15bd0:	f1 2c       	mov	r15, r1
   15bd2:	6b 85       	ldd	r22, Y+11	; 0x0b
   15bd4:	7c 85       	ldd	r23, Y+12	; 0x0c
   15bd6:	8d 85       	ldd	r24, Y+13	; 0x0d
   15bd8:	9e 85       	ldd	r25, Y+14	; 0x0e
   15bda:	a7 01       	movw	r20, r14
   15bdc:	96 01       	movw	r18, r12
   15bde:	0e 94 71 e5 	call	0x1cae2	; 0x1cae2 <__udivmodsi4>
   15be2:	da 01       	movw	r26, r20
   15be4:	c9 01       	movw	r24, r18
   15be6:	88 0d       	add	r24, r8
   15be8:	99 1d       	adc	r25, r9
   15bea:	aa 1d       	adc	r26, r10
   15bec:	bb 1d       	adc	r27, r11
   15bee:	f8 01       	movw	r30, r16
   15bf0:	eb 5b       	subi	r30, 0xBB	; 187
   15bf2:	ff 4f       	sbci	r31, 0xFF	; 255
   15bf4:	40 80       	ld	r4, Z
   15bf6:	51 80       	ldd	r5, Z+1	; 0x01
   15bf8:	62 80       	ldd	r6, Z+2	; 0x02
   15bfa:	73 80       	ldd	r7, Z+3	; 0x03
   15bfc:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <debuglevel>
   15c00:	50 91 be 01 	lds	r21, 0x01BE	; 0x8001be <debuglevel+0x1>
   15c04:	48 16       	cp	r4, r24
   15c06:	59 06       	cpc	r5, r25
   15c08:	6a 06       	cpc	r6, r26
   15c0a:	7b 06       	cpc	r7, r27
   15c0c:	20 f5       	brcc	.+72     	; 0x15c56 <SS80_cmd_seek+0xb2>
   15c0e:	81 e0       	ldi	r24, 0x01	; 1
   15c10:	8a 83       	std	Y+2, r24	; 0x02
   15c12:	8b 81       	ldd	r24, Y+3	; 0x03
   15c14:	9c 81       	ldd	r25, Y+4	; 0x04
   15c16:	84 60       	ori	r24, 0x04	; 4
   15c18:	9c 83       	std	Y+4, r25	; 0x04
   15c1a:	8b 83       	std	Y+3, r24	; 0x03
   15c1c:	40 ff       	sbrs	r20, 0
   15c1e:	3c c0       	rjmp	.+120    	; 0x15c98 <SS80_cmd_seek+0xf4>
   15c20:	f8 01       	movw	r30, r16
   15c22:	a7 a5       	ldd	r26, Z+47	; 0x2f
   15c24:	b0 a9       	ldd	r27, Z+48	; 0x30
   15c26:	a5 01       	movw	r20, r10
   15c28:	94 01       	movw	r18, r8
   15c2a:	0e 94 d3 e5 	call	0x1cba6	; 0x1cba6 <__muluhisi3>
   15c2e:	9f 93       	push	r25
   15c30:	8f 93       	push	r24
   15c32:	7f 93       	push	r23
   15c34:	6f 93       	push	r22
   15c36:	80 ed       	ldi	r24, 0xD0	; 208
   15c38:	90 e2       	ldi	r25, 0x20	; 32
   15c3a:	1f 92       	push	r1
   15c3c:	9f 93       	push	r25
   15c3e:	8f 93       	push	r24
   15c40:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   15c44:	8d b7       	in	r24, 0x3d	; 61
   15c46:	9e b7       	in	r25, 0x3e	; 62
   15c48:	07 96       	adiw	r24, 0x07	; 7
   15c4a:	0f b6       	in	r0, 0x3f	; 63
   15c4c:	f8 94       	cli
   15c4e:	9e bf       	out	0x3e, r25	; 62
   15c50:	0f be       	out	0x3f, r0	; 63
   15c52:	8d bf       	out	0x3d, r24	; 61
   15c54:	21 c0       	rjmp	.+66     	; 0x15c98 <SS80_cmd_seek+0xf4>
   15c56:	ca 01       	movw	r24, r20
   15c58:	80 72       	andi	r24, 0x20	; 32
   15c5a:	99 27       	eor	r25, r25
   15c5c:	45 ff       	sbrs	r20, 5
   15c5e:	1e c0       	rjmp	.+60     	; 0x15c9c <SS80_cmd_seek+0xf8>
   15c60:	a5 01       	movw	r20, r10
   15c62:	94 01       	movw	r18, r8
   15c64:	c7 01       	movw	r24, r14
   15c66:	b6 01       	movw	r22, r12
   15c68:	0e 94 2f e5 	call	0x1ca5e	; 0x1ca5e <__mulsi3>
   15c6c:	9f 93       	push	r25
   15c6e:	8f 93       	push	r24
   15c70:	7f 93       	push	r23
   15c72:	6f 93       	push	r22
   15c74:	8c eb       	ldi	r24, 0xBC	; 188
   15c76:	90 e2       	ldi	r25, 0x20	; 32
   15c78:	1f 92       	push	r1
   15c7a:	9f 93       	push	r25
   15c7c:	8f 93       	push	r24
   15c7e:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   15c82:	ed b7       	in	r30, 0x3d	; 61
   15c84:	fe b7       	in	r31, 0x3e	; 62
   15c86:	37 96       	adiw	r30, 0x07	; 7
   15c88:	0f b6       	in	r0, 0x3f	; 63
   15c8a:	f8 94       	cli
   15c8c:	fe bf       	out	0x3e, r31	; 62
   15c8e:	0f be       	out	0x3f, r0	; 63
   15c90:	ed bf       	out	0x3d, r30	; 61
   15c92:	80 e0       	ldi	r24, 0x00	; 0
   15c94:	90 e0       	ldi	r25, 0x00	; 0
   15c96:	02 c0       	rjmp	.+4      	; 0x15c9c <SS80_cmd_seek+0xf8>
   15c98:	81 e0       	ldi	r24, 0x01	; 1
   15c9a:	90 e0       	ldi	r25, 0x00	; 0
   15c9c:	cd b7       	in	r28, 0x3d	; 61
   15c9e:	de b7       	in	r29, 0x3e	; 62
   15ca0:	e0 e1       	ldi	r30, 0x10	; 16
   15ca2:	0c 94 11 e6 	jmp	0x1cc22	; 0x1cc22 <__epilogue_restores__+0x4>

00015ca6 <SS80_locate_and_write>:
   15ca6:	a8 e0       	ldi	r26, 0x08	; 8
   15ca8:	b0 e0       	ldi	r27, 0x00	; 0
   15caa:	e9 e5       	ldi	r30, 0x59	; 89
   15cac:	fe ea       	ldi	r31, 0xAE	; 174
   15cae:	0c 94 f3 e5 	jmp	0x1cbe6	; 0x1cbe6 <__prologue_saves__>
   15cb2:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80s>
   15cb6:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80s+0x1>
   15cba:	a0 91 6d 18 	lds	r26, 0x186D	; 0x80186d <SS80p>
   15cbe:	b0 91 6e 18 	lds	r27, 0x186E	; 0x80186e <SS80p+0x1>
   15cc2:	9f 96       	adiw	r26, 0x2f	; 47
   15cc4:	0d 90       	ld	r0, X+
   15cc6:	bc 91       	ld	r27, X
   15cc8:	a0 2d       	mov	r26, r0
   15cca:	27 81       	ldd	r18, Z+7	; 0x07
   15ccc:	30 85       	ldd	r19, Z+8	; 0x08
   15cce:	41 85       	ldd	r20, Z+9	; 0x09
   15cd0:	52 85       	ldd	r21, Z+10	; 0x0a
   15cd2:	0e 94 d3 e5 	call	0x1cba6	; 0x1cba6 <__muluhisi3>
   15cd6:	4b 01       	movw	r8, r22
   15cd8:	5c 01       	movw	r10, r24
   15cda:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15cde:	85 ff       	sbrs	r24, 5
   15ce0:	18 c0       	rjmp	.+48     	; 0x15d12 <SS80_locate_and_write+0x6c>
   15ce2:	86 85       	ldd	r24, Z+14	; 0x0e
   15ce4:	8f 93       	push	r24
   15ce6:	85 85       	ldd	r24, Z+13	; 0x0d
   15ce8:	8f 93       	push	r24
   15cea:	84 85       	ldd	r24, Z+12	; 0x0c
   15cec:	8f 93       	push	r24
   15cee:	83 85       	ldd	r24, Z+11	; 0x0b
   15cf0:	8f 93       	push	r24
   15cf2:	bf 92       	push	r11
   15cf4:	af 92       	push	r10
   15cf6:	9f 92       	push	r9
   15cf8:	8f 92       	push	r8
   15cfa:	81 e5       	ldi	r24, 0x51	; 81
   15cfc:	96 e2       	ldi	r25, 0x26	; 38
   15cfe:	1f 92       	push	r1
   15d00:	9f 93       	push	r25
   15d02:	8f 93       	push	r24
   15d04:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   15d08:	0f b6       	in	r0, 0x3f	; 63
   15d0a:	f8 94       	cli
   15d0c:	de bf       	out	0x3e, r29	; 62
   15d0e:	0f be       	out	0x3f, r0	; 63
   15d10:	cd bf       	out	0x3d, r28	; 61
   15d12:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80s>
   15d16:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80s+0x1>
   15d1a:	12 82       	std	Z+2, r1	; 0x02
   15d1c:	54 98       	cbi	0x0a, 4	; 10
   15d1e:	4c 99       	sbic	0x09, 4	; 9
   15d20:	03 c0       	rjmp	.+6      	; 0x15d28 <SS80_locate_and_write+0x82>
   15d22:	80 e0       	ldi	r24, 0x00	; 0
   15d24:	90 e1       	ldi	r25, 0x10	; 16
   15d26:	52 c1       	rjmp	.+676    	; 0x15fcc <SS80_locate_and_write+0x326>
   15d28:	3d df       	rcall	.-390    	; 0x15ba4 <SS80_cmd_seek>
   15d2a:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80s>
   15d2e:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80s+0x1>
   15d32:	89 2b       	or	r24, r25
   15d34:	41 f0       	breq	.+16     	; 0x15d46 <SS80_locate_and_write+0xa0>
   15d36:	83 81       	ldd	r24, Z+3	; 0x03
   15d38:	94 81       	ldd	r25, Z+4	; 0x04
   15d3a:	82 60       	ori	r24, 0x02	; 2
   15d3c:	94 83       	std	Z+4, r25	; 0x04
   15d3e:	83 83       	std	Z+3, r24	; 0x03
   15d40:	01 e0       	ldi	r16, 0x01	; 1
   15d42:	10 e0       	ldi	r17, 0x00	; 0
   15d44:	02 c0       	rjmp	.+4      	; 0x15d4a <SS80_locate_and_write+0xa4>
   15d46:	00 e0       	ldi	r16, 0x00	; 0
   15d48:	10 e0       	ldi	r17, 0x00	; 0
   15d4a:	23 84       	ldd	r2, Z+11	; 0x0b
   15d4c:	34 84       	ldd	r3, Z+12	; 0x0c
   15d4e:	1a 82       	std	Y+2, r1	; 0x02
   15d50:	19 82       	std	Y+1, r1	; 0x01
   15d52:	41 2c       	mov	r4, r1
   15d54:	51 2c       	mov	r5, r1
   15d56:	32 01       	movw	r6, r4
   15d58:	84 e0       	ldi	r24, 0x04	; 4
   15d5a:	96 e2       	ldi	r25, 0x26	; 38
   15d5c:	9c 01       	movw	r18, r24
   15d5e:	40 e0       	ldi	r20, 0x00	; 0
   15d60:	2b 83       	std	Y+3, r18	; 0x03
   15d62:	3c 83       	std	Y+4, r19	; 0x04
   15d64:	4d 83       	std	Y+5, r20	; 0x05
   15d66:	8a e2       	ldi	r24, 0x2A	; 42
   15d68:	96 e2       	ldi	r25, 0x26	; 38
   15d6a:	9c 01       	movw	r18, r24
   15d6c:	40 e0       	ldi	r20, 0x00	; 0
   15d6e:	2e 83       	std	Y+6, r18	; 0x06
   15d70:	3f 83       	std	Y+7, r19	; 0x07
   15d72:	48 87       	std	Y+8, r20	; 0x08
   15d74:	12 14       	cp	r1, r2
   15d76:	13 04       	cpc	r1, r3
   15d78:	0c f0       	brlt	.+2      	; 0x15d7c <SS80_locate_and_write+0xd6>
   15d7a:	f6 c0       	rjmp	.+492    	; 0x15f68 <SS80_locate_and_write+0x2c2>
   15d7c:	54 98       	cbi	0x0a, 4	; 10
   15d7e:	4c 9b       	sbis	0x09, 4	; 9
   15d80:	d0 cf       	rjmp	.-96     	; 0x15d22 <SS80_locate_and_write+0x7c>
   15d82:	71 01       	movw	r14, r2
   15d84:	31 e0       	ldi	r19, 0x01	; 1
   15d86:	23 16       	cp	r2, r19
   15d88:	33 06       	cpc	r3, r19
   15d8a:	1c f0       	brlt	.+6      	; 0x15d92 <SS80_locate_and_write+0xec>
   15d8c:	e1 2c       	mov	r14, r1
   15d8e:	ff 24       	eor	r15, r15
   15d90:	f3 94       	inc	r15
   15d92:	ea ee       	ldi	r30, 0xEA	; 234
   15d94:	fb e1       	ldi	r31, 0x1B	; 27
   15d96:	20 e0       	ldi	r18, 0x00	; 0
   15d98:	32 e0       	ldi	r19, 0x02	; 2
   15d9a:	11 92       	st	Z+, r1
   15d9c:	21 50       	subi	r18, 0x01	; 1
   15d9e:	30 40       	sbci	r19, 0x00	; 0
   15da0:	e1 f7       	brne	.-8      	; 0x15d9a <SS80_locate_and_write+0xf4>
   15da2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15da6:	87 fd       	sbrc	r24, 7
   15da8:	0e 94 dc 85 	call	0x10bb8	; 0x10bb8 <gpib_timer_elapsed_begin>
   15dac:	ae 01       	movw	r20, r28
   15dae:	4f 5f       	subi	r20, 0xFF	; 255
   15db0:	5f 4f       	sbci	r21, 0xFF	; 255
   15db2:	b7 01       	movw	r22, r14
   15db4:	8a ee       	ldi	r24, 0xEA	; 234
   15db6:	9b e1       	ldi	r25, 0x1B	; 27
   15db8:	0e 94 36 8b 	call	0x1166c	; 0x1166c <gpib_read_str>
   15dbc:	6c 01       	movw	r12, r24
   15dbe:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15dc2:	87 ff       	sbrs	r24, 7
   15dc4:	04 c0       	rjmp	.+8      	; 0x15dce <SS80_locate_and_write+0x128>
   15dc6:	80 ee       	ldi	r24, 0xE0	; 224
   15dc8:	9f e0       	ldi	r25, 0x0F	; 15
   15dca:	0e 94 ee 85 	call	0x10bdc	; 0x10bdc <gpib_timer_elapsed_end>
   15dce:	ce 14       	cp	r12, r14
   15dd0:	df 04       	cpc	r13, r15
   15dd2:	39 f1       	breq	.+78     	; 0x15e22 <SS80_locate_and_write+0x17c>
   15dd4:	89 81       	ldd	r24, Y+1	; 0x01
   15dd6:	9a 81       	ldd	r25, Y+2	; 0x02
   15dd8:	9c 01       	movw	r18, r24
   15dda:	22 27       	eor	r18, r18
   15ddc:	30 7d       	andi	r19, 0xD0	; 208
   15dde:	23 2b       	or	r18, r19
   15de0:	d1 f0       	breq	.+52     	; 0x15e16 <SS80_locate_and_write+0x170>
   15de2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15de6:	80 ff       	sbrs	r24, 0
   15de8:	0a c0       	rjmp	.+20     	; 0x15dfe <SS80_locate_and_write+0x158>
   15dea:	8e e3       	ldi	r24, 0x3E	; 62
   15dec:	96 e2       	ldi	r25, 0x26	; 38
   15dee:	1f 92       	push	r1
   15df0:	9f 93       	push	r25
   15df2:	8f 93       	push	r24
   15df4:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   15df8:	0f 90       	pop	r0
   15dfa:	0f 90       	pop	r0
   15dfc:	0f 90       	pop	r0
   15dfe:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80s>
   15e02:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80s+0x1>
   15e06:	83 81       	ldd	r24, Z+3	; 0x03
   15e08:	94 81       	ldd	r25, Z+4	; 0x04
   15e0a:	82 60       	ori	r24, 0x02	; 2
   15e0c:	94 83       	std	Z+4, r25	; 0x04
   15e0e:	83 83       	std	Z+3, r24	; 0x03
   15e10:	81 e0       	ldi	r24, 0x01	; 1
   15e12:	82 83       	std	Z+2, r24	; 0x02
   15e14:	9a c0       	rjmp	.+308    	; 0x15f4a <SS80_locate_and_write+0x2a4>
   15e16:	c1 14       	cp	r12, r1
   15e18:	d1 04       	cpc	r13, r1
   15e1a:	09 f0       	breq	.+2      	; 0x15e1e <SS80_locate_and_write+0x178>
   15e1c:	d3 c0       	rjmp	.+422    	; 0x15fc4 <SS80_locate_and_write+0x31e>
   15e1e:	90 fd       	sbrc	r25, 0
   15e20:	94 c0       	rjmp	.+296    	; 0x15f4a <SS80_locate_and_write+0x2a4>
   15e22:	01 15       	cp	r16, r1
   15e24:	11 05       	cpc	r17, r1
   15e26:	09 f0       	breq	.+2      	; 0x15e2a <SS80_locate_and_write+0x184>
   15e28:	85 c0       	rjmp	.+266    	; 0x15f34 <SS80_locate_and_write+0x28e>
   15e2a:	c1 14       	cp	r12, r1
   15e2c:	d1 04       	cpc	r13, r1
   15e2e:	09 f4       	brne	.+2      	; 0x15e32 <SS80_locate_and_write+0x18c>
   15e30:	83 c0       	rjmp	.+262    	; 0x15f38 <SS80_locate_and_write+0x292>
   15e32:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15e36:	86 fd       	sbrc	r24, 6
   15e38:	0e 94 dc 85 	call	0x10bb8	; 0x10bb8 <gpib_timer_elapsed_begin>
   15e3c:	e0 90 6b 18 	lds	r14, 0x186B	; 0x80186b <SS80s>
   15e40:	f0 90 6c 18 	lds	r15, 0x186C	; 0x80186c <SS80s+0x1>
   15e44:	33 e0       	ldi	r19, 0x03	; 3
   15e46:	e3 0e       	add	r14, r19
   15e48:	f1 1c       	adc	r15, r1
   15e4a:	80 91 6d 18 	lds	r24, 0x186D	; 0x80186d <SS80p>
   15e4e:	90 91 6e 18 	lds	r25, 0x186E	; 0x80186e <SS80p+0x1>
   15e52:	86 01       	movw	r16, r12
   15e54:	2a ee       	ldi	r18, 0xEA	; 234
   15e56:	3b e1       	ldi	r19, 0x1B	; 27
   15e58:	b5 01       	movw	r22, r10
   15e5a:	a4 01       	movw	r20, r8
   15e5c:	02 96       	adiw	r24, 0x02	; 2
   15e5e:	0e 94 85 85 	call	0x10b0a	; 0x10b0a <dbf_open_write>
   15e62:	7c 01       	movw	r14, r24
   15e64:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15e68:	86 ff       	sbrs	r24, 6
   15e6a:	04 c0       	rjmp	.+8      	; 0x15e74 <SS80_locate_and_write+0x1ce>
   15e6c:	8a ee       	ldi	r24, 0xEA	; 234
   15e6e:	9f e0       	ldi	r25, 0x0F	; 15
   15e70:	0e 94 ee 85 	call	0x10bdc	; 0x10bdc <gpib_timer_elapsed_end>
   15e74:	ce 14       	cp	r12, r14
   15e76:	df 04       	cpc	r13, r15
   15e78:	39 f1       	breq	.+78     	; 0x15ec8 <SS80_locate_and_write+0x222>
   15e7a:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80s>
   15e7e:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80s+0x1>
   15e82:	83 81       	ldd	r24, Z+3	; 0x03
   15e84:	94 81       	ldd	r25, Z+4	; 0x04
   15e86:	82 60       	ori	r24, 0x02	; 2
   15e88:	94 83       	std	Z+4, r25	; 0x04
   15e8a:	83 83       	std	Z+3, r24	; 0x03
   15e8c:	0e 94 46 71 	call	0xe28c	; 0xe28c <mmc_wp_status>
   15e90:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80s>
   15e94:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80s+0x1>
   15e98:	89 2b       	or	r24, r25
   15e9a:	29 f0       	breq	.+10     	; 0x15ea6 <SS80_locate_and_write+0x200>
   15e9c:	83 81       	ldd	r24, Z+3	; 0x03
   15e9e:	94 81       	ldd	r25, Z+4	; 0x04
   15ea0:	88 60       	ori	r24, 0x08	; 8
   15ea2:	94 83       	std	Z+4, r25	; 0x04
   15ea4:	83 83       	std	Z+3, r24	; 0x03
   15ea6:	41 e0       	ldi	r20, 0x01	; 1
   15ea8:	42 83       	std	Z+2, r20	; 0x02
   15eaa:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15eae:	80 ff       	sbrs	r24, 0
   15eb0:	29 c0       	rjmp	.+82     	; 0x15f04 <SS80_locate_and_write+0x25e>
   15eb2:	1f 92       	push	r1
   15eb4:	8f 81       	ldd	r24, Y+7	; 0x07
   15eb6:	8f 93       	push	r24
   15eb8:	9e 81       	ldd	r25, Y+6	; 0x06
   15eba:	9f 93       	push	r25
   15ebc:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   15ec0:	0f 90       	pop	r0
   15ec2:	0f 90       	pop	r0
   15ec4:	0f 90       	pop	r0
   15ec6:	1e c0       	rjmp	.+60     	; 0x15f04 <SS80_locate_and_write+0x25e>
   15ec8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15ecc:	85 ff       	sbrs	r24, 5
   15ece:	0e c0       	rjmp	.+28     	; 0x15eec <SS80_locate_and_write+0x246>
   15ed0:	df 92       	push	r13
   15ed2:	cf 92       	push	r12
   15ed4:	1f 92       	push	r1
   15ed6:	ec 81       	ldd	r30, Y+4	; 0x04
   15ed8:	ef 93       	push	r30
   15eda:	fb 81       	ldd	r31, Y+3	; 0x03
   15edc:	ff 93       	push	r31
   15ede:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   15ee2:	0f 90       	pop	r0
   15ee4:	0f 90       	pop	r0
   15ee6:	0f 90       	pop	r0
   15ee8:	0f 90       	pop	r0
   15eea:	0f 90       	pop	r0
   15eec:	c6 01       	movw	r24, r12
   15eee:	0d 2c       	mov	r0, r13
   15ef0:	00 0c       	add	r0, r0
   15ef2:	aa 0b       	sbc	r26, r26
   15ef4:	bb 0b       	sbc	r27, r27
   15ef6:	88 0e       	add	r8, r24
   15ef8:	99 1e       	adc	r9, r25
   15efa:	aa 1e       	adc	r10, r26
   15efc:	bb 1e       	adc	r11, r27
   15efe:	00 e0       	ldi	r16, 0x00	; 0
   15f00:	10 e0       	ldi	r17, 0x00	; 0
   15f02:	05 c0       	rjmp	.+10     	; 0x15f0e <SS80_locate_and_write+0x268>
   15f04:	ec 14       	cp	r14, r12
   15f06:	fd 04       	cpc	r15, r13
   15f08:	64 f0       	brlt	.+24     	; 0x15f22 <SS80_locate_and_write+0x27c>
   15f0a:	01 e0       	ldi	r16, 0x01	; 1
   15f0c:	10 e0       	ldi	r17, 0x00	; 0
   15f0e:	c7 01       	movw	r24, r14
   15f10:	0f 2c       	mov	r0, r15
   15f12:	00 0c       	add	r0, r0
   15f14:	aa 0b       	sbc	r26, r26
   15f16:	bb 0b       	sbc	r27, r27
   15f18:	48 0e       	add	r4, r24
   15f1a:	59 1e       	adc	r5, r25
   15f1c:	6a 1e       	adc	r6, r26
   15f1e:	7b 1e       	adc	r7, r27
   15f20:	0b c0       	rjmp	.+22     	; 0x15f38 <SS80_locate_and_write+0x292>
   15f22:	c6 01       	movw	r24, r12
   15f24:	0d 2c       	mov	r0, r13
   15f26:	00 0c       	add	r0, r0
   15f28:	aa 0b       	sbc	r26, r26
   15f2a:	bb 0b       	sbc	r27, r27
   15f2c:	48 0e       	add	r4, r24
   15f2e:	59 1e       	adc	r5, r25
   15f30:	6a 1e       	adc	r6, r26
   15f32:	7b 1e       	adc	r7, r27
   15f34:	01 e0       	ldi	r16, 0x01	; 1
   15f36:	10 e0       	ldi	r17, 0x00	; 0
   15f38:	2c 18       	sub	r2, r12
   15f3a:	3d 08       	sbc	r3, r13
   15f3c:	89 81       	ldd	r24, Y+1	; 0x01
   15f3e:	9a 81       	ldd	r25, Y+2	; 0x02
   15f40:	90 ff       	sbrs	r25, 0
   15f42:	18 cf       	rjmp	.-464    	; 0x15d74 <SS80_locate_and_write+0xce>
   15f44:	12 14       	cp	r1, r2
   15f46:	13 04       	cpc	r1, r3
   15f48:	7c f4       	brge	.+30     	; 0x15f68 <SS80_locate_and_write+0x2c2>
   15f4a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15f4e:	80 ff       	sbrs	r24, 0
   15f50:	1f c0       	rjmp	.+62     	; 0x15f90 <SS80_locate_and_write+0x2ea>
   15f52:	8c ed       	ldi	r24, 0xDC	; 220
   15f54:	95 e2       	ldi	r25, 0x25	; 37
   15f56:	1f 92       	push	r1
   15f58:	9f 93       	push	r25
   15f5a:	8f 93       	push	r24
   15f5c:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   15f60:	0f 90       	pop	r0
   15f62:	0f 90       	pop	r0
   15f64:	0f 90       	pop	r0
   15f66:	14 c0       	rjmp	.+40     	; 0x15f90 <SS80_locate_and_write+0x2ea>
   15f68:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15f6c:	85 ff       	sbrs	r24, 5
   15f6e:	10 c0       	rjmp	.+32     	; 0x15f90 <SS80_locate_and_write+0x2ea>
   15f70:	7f 92       	push	r7
   15f72:	6f 92       	push	r6
   15f74:	5f 92       	push	r5
   15f76:	4f 92       	push	r4
   15f78:	81 eb       	ldi	r24, 0xB1	; 177
   15f7a:	95 e2       	ldi	r25, 0x25	; 37
   15f7c:	1f 92       	push	r1
   15f7e:	9f 93       	push	r25
   15f80:	8f 93       	push	r24
   15f82:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   15f86:	0f b6       	in	r0, 0x3f	; 63
   15f88:	f8 94       	cli
   15f8a:	de bf       	out	0x3e, r29	; 62
   15f8c:	0f be       	out	0x3f, r0	; 63
   15f8e:	cd bf       	out	0x3d, r28	; 61
   15f90:	00 91 6b 18 	lds	r16, 0x186B	; 0x80186b <SS80s>
   15f94:	10 91 6c 18 	lds	r17, 0x186C	; 0x80186c <SS80s+0x1>
   15f98:	e0 91 6d 18 	lds	r30, 0x186D	; 0x80186d <SS80p>
   15f9c:	f0 91 6e 18 	lds	r31, 0x186E	; 0x80186e <SS80p+0x1>
   15fa0:	27 a5       	ldd	r18, Z+47	; 0x2f
   15fa2:	30 a9       	ldd	r19, Z+48	; 0x30
   15fa4:	40 e0       	ldi	r20, 0x00	; 0
   15fa6:	50 e0       	ldi	r21, 0x00	; 0
   15fa8:	c5 01       	movw	r24, r10
   15faa:	b4 01       	movw	r22, r8
   15fac:	0e 94 71 e5 	call	0x1cae2	; 0x1cae2 <__udivmodsi4>
   15fb0:	f8 01       	movw	r30, r16
   15fb2:	27 83       	std	Z+7, r18	; 0x07
   15fb4:	30 87       	std	Z+8, r19	; 0x08
   15fb6:	41 87       	std	Z+9, r20	; 0x09
   15fb8:	52 87       	std	Z+10, r21	; 0x0a
   15fba:	89 81       	ldd	r24, Y+1	; 0x01
   15fbc:	9a 81       	ldd	r25, Y+2	; 0x02
   15fbe:	88 27       	eor	r24, r24
   15fc0:	90 7d       	andi	r25, 0xD0	; 208
   15fc2:	04 c0       	rjmp	.+8      	; 0x15fcc <SS80_locate_and_write+0x326>
   15fc4:	01 2b       	or	r16, r17
   15fc6:	09 f4       	brne	.+2      	; 0x15fca <SS80_locate_and_write+0x324>
   15fc8:	34 cf       	rjmp	.-408    	; 0x15e32 <SS80_locate_and_write+0x18c>
   15fca:	b4 cf       	rjmp	.-152    	; 0x15f34 <SS80_locate_and_write+0x28e>
   15fcc:	28 96       	adiw	r28, 0x08	; 8
   15fce:	e2 e1       	ldi	r30, 0x12	; 18
   15fd0:	0c 94 0f e6 	jmp	0x1cc1e	; 0x1cc1e <__epilogue_restores__>

00015fd4 <SS80_Report>:
   15fd4:	a3 e0       	ldi	r26, 0x03	; 3
   15fd6:	b0 e0       	ldi	r27, 0x00	; 0
   15fd8:	e0 ef       	ldi	r30, 0xF0	; 240
   15fda:	ff ea       	ldi	r31, 0xAF	; 175
   15fdc:	0c 94 03 e6 	jmp	0x1cc06	; 0x1cc06 <__prologue_saves__+0x20>
   15fe0:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80s>
   15fe4:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80s+0x1>
   15fe8:	82 81       	ldd	r24, Z+2	; 0x02
   15fea:	8b 83       	std	Y+3, r24	; 0x03
   15fec:	80 e0       	ldi	r24, 0x00	; 0
   15fee:	91 e0       	ldi	r25, 0x01	; 1
   15ff0:	9a 83       	std	Y+2, r25	; 0x02
   15ff2:	89 83       	std	Y+1, r24	; 0x01
   15ff4:	ae 01       	movw	r20, r28
   15ff6:	4f 5f       	subi	r20, 0xFF	; 255
   15ff8:	5f 4f       	sbci	r21, 0xFF	; 255
   15ffa:	61 e0       	ldi	r22, 0x01	; 1
   15ffc:	70 e0       	ldi	r23, 0x00	; 0
   15ffe:	ce 01       	movw	r24, r28
   16000:	03 96       	adiw	r24, 0x03	; 3
   16002:	0e 94 e4 8b 	call	0x117c8	; 0x117c8 <gpib_write_str>
   16006:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1600a:	01 97       	sbiw	r24, 0x01	; 1
   1600c:	89 f0       	breq	.+34     	; 0x16030 <SS80_Report+0x5c>
   1600e:	20 ff       	sbrs	r18, 0
   16010:	0a c0       	rjmp	.+20     	; 0x16026 <SS80_Report+0x52>
   16012:	82 ea       	ldi	r24, 0xA2	; 162
   16014:	90 e2       	ldi	r25, 0x20	; 32
   16016:	1f 92       	push	r1
   16018:	9f 93       	push	r25
   1601a:	8f 93       	push	r24
   1601c:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   16020:	0f 90       	pop	r0
   16022:	0f 90       	pop	r0
   16024:	0f 90       	pop	r0
   16026:	89 81       	ldd	r24, Y+1	; 0x01
   16028:	9a 81       	ldd	r25, Y+2	; 0x02
   1602a:	88 27       	eor	r24, r24
   1602c:	90 7d       	andi	r25, 0xD0	; 208
   1602e:	1c c0       	rjmp	.+56     	; 0x16068 <SS80_Report+0x94>
   16030:	25 ff       	sbrs	r18, 5
   16032:	13 c0       	rjmp	.+38     	; 0x1605a <SS80_Report+0x86>
   16034:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80s>
   16038:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80s+0x1>
   1603c:	82 81       	ldd	r24, Z+2	; 0x02
   1603e:	1f 92       	push	r1
   16040:	8f 93       	push	r24
   16042:	8f e8       	ldi	r24, 0x8F	; 143
   16044:	90 e2       	ldi	r25, 0x20	; 32
   16046:	1f 92       	push	r1
   16048:	9f 93       	push	r25
   1604a:	8f 93       	push	r24
   1604c:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   16050:	0f 90       	pop	r0
   16052:	0f 90       	pop	r0
   16054:	0f 90       	pop	r0
   16056:	0f 90       	pop	r0
   16058:	0f 90       	pop	r0
   1605a:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80s>
   1605e:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80s+0x1>
   16062:	12 82       	std	Z+2, r1	; 0x02
   16064:	80 e0       	ldi	r24, 0x00	; 0
   16066:	90 e0       	ldi	r25, 0x00	; 0
   16068:	23 96       	adiw	r28, 0x03	; 3
   1606a:	e2 e0       	ldi	r30, 0x02	; 2
   1606c:	0c 94 1f e6 	jmp	0x1cc3e	; 0x1cc3e <__epilogue_restores__+0x20>

00016070 <Clear_Common>:
   16070:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80s>
   16074:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80s+0x1>
   16078:	25 81       	ldd	r18, Z+5	; 0x05
   1607a:	30 e0       	ldi	r19, 0x00	; 0
   1607c:	28 17       	cp	r18, r24
   1607e:	39 07       	cpc	r19, r25
   16080:	19 f0       	breq	.+6      	; 0x16088 <Clear_Common+0x18>
   16082:	0f 97       	sbiw	r24, 0x0f	; 15
   16084:	99 f4       	brne	.+38     	; 0x160ac <Clear_Common+0x3c>
   16086:	03 c0       	rjmp	.+6      	; 0x1608e <Clear_Common+0x1e>
   16088:	2f 30       	cpi	r18, 0x0F	; 15
   1608a:	31 05       	cpc	r19, r1
   1608c:	09 f4       	brne	.+2      	; 0x16090 <Clear_Common+0x20>
   1608e:	15 82       	std	Z+5, r1	; 0x05
   16090:	16 82       	std	Z+6, r1	; 0x06
   16092:	17 82       	std	Z+7, r1	; 0x07
   16094:	10 86       	std	Z+8, r1	; 0x08
   16096:	11 86       	std	Z+9, r1	; 0x09
   16098:	12 86       	std	Z+10, r1	; 0x0a
   1609a:	13 86       	std	Z+11, r1	; 0x0b
   1609c:	14 86       	std	Z+12, r1	; 0x0c
   1609e:	15 86       	std	Z+13, r1	; 0x0d
   160a0:	16 86       	std	Z+14, r1	; 0x0e
   160a2:	11 82       	std	Z+1, r1	; 0x01
   160a4:	10 82       	st	Z, r1
   160a6:	14 82       	std	Z+4, r1	; 0x04
   160a8:	13 82       	std	Z+3, r1	; 0x03
   160aa:	12 82       	std	Z+2, r1	; 0x02
   160ac:	08 95       	ret

000160ae <SS80_init>:
   160ae:	a0 e0       	ldi	r26, 0x00	; 0
   160b0:	b0 e0       	ldi	r27, 0x00	; 0
   160b2:	ed e5       	ldi	r30, 0x5D	; 93
   160b4:	f0 eb       	ldi	r31, 0xB0	; 176
   160b6:	0c 94 fd e5 	jmp	0x1cbfa	; 0x1cbfa <__prologue_saves__+0x14>
   160ba:	0d ec       	ldi	r16, 0xCD	; 205
   160bc:	1f e1       	ldi	r17, 0x1F	; 31
   160be:	cb e0       	ldi	r28, 0x0B	; 11
   160c0:	d0 e0       	ldi	r29, 0x00	; 0
   160c2:	82 e0       	ldi	r24, 0x02	; 2
   160c4:	f8 2e       	mov	r15, r24
   160c6:	8a e5       	ldi	r24, 0x5A	; 90
   160c8:	97 e2       	ldi	r25, 0x27	; 39
   160ca:	6c 01       	movw	r12, r24
   160cc:	e1 2c       	mov	r14, r1
   160ce:	f8 01       	movw	r30, r16
   160d0:	80 81       	ld	r24, Z
   160d2:	83 30       	cpi	r24, 0x03	; 3
   160d4:	39 f5       	brne	.+78     	; 0x16124 <SS80_init+0x76>
   160d6:	ce 01       	movw	r24, r28
   160d8:	0e 94 5b 93 	call	0x126b6	; 0x126b6 <set_active_device>
   160dc:	89 2b       	or	r24, r25
   160de:	11 f1       	breq	.+68     	; 0x16124 <SS80_init+0x76>
   160e0:	8f e0       	ldi	r24, 0x0F	; 15
   160e2:	90 e0       	ldi	r25, 0x00	; 0
   160e4:	c5 df       	rcall	.-118    	; 0x16070 <Clear_Common>
   160e6:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80s>
   160ea:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80s+0x1>
   160ee:	f2 82       	std	Z+2, r15	; 0x02
   160f0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   160f4:	85 ff       	sbrs	r24, 5
   160f6:	0e c0       	rjmp	.+28     	; 0x16114 <SS80_init+0x66>
   160f8:	f8 01       	movw	r30, r16
   160fa:	81 81       	ldd	r24, Z+1	; 0x01
   160fc:	1f 92       	push	r1
   160fe:	8f 93       	push	r24
   16100:	1f 92       	push	r1
   16102:	df 92       	push	r13
   16104:	cf 92       	push	r12
   16106:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1610a:	0f 90       	pop	r0
   1610c:	0f 90       	pop	r0
   1610e:	0f 90       	pop	r0
   16110:	0f 90       	pop	r0
   16112:	0f 90       	pop	r0
   16114:	e0 91 6d 18 	lds	r30, 0x186D	; 0x80186d <SS80p>
   16118:	f0 91 6e 18 	lds	r31, 0x186E	; 0x80186e <SS80p+0x1>
   1611c:	81 81       	ldd	r24, Z+1	; 0x01
   1611e:	90 e0       	ldi	r25, 0x00	; 0
   16120:	0e 94 c5 86 	call	0x10d8a	; 0x10d8a <gpib_disable_PPR>
   16124:	21 97       	sbiw	r28, 0x01	; 1
   16126:	0b 52       	subi	r16, 0x2B	; 43
   16128:	11 09       	sbc	r17, r1
   1612a:	cf 3f       	cpi	r28, 0xFF	; 255
   1612c:	ff ef       	ldi	r31, 0xFF	; 255
   1612e:	df 07       	cpc	r29, r31
   16130:	71 f6       	brne	.-100    	; 0x160ce <SS80_init+0x20>
   16132:	cd b7       	in	r28, 0x3d	; 61
   16134:	de b7       	in	r29, 0x3e	; 62
   16136:	e8 e0       	ldi	r30, 0x08	; 8
   16138:	0c 94 19 e6 	jmp	0x1cc32	; 0x1cc32 <__epilogue_restores__+0x14>

0001613c <SS80_Channel_Independent_Clear>:
   1613c:	99 df       	rcall	.-206    	; 0x16070 <Clear_Common>
   1613e:	e0 91 6d 18 	lds	r30, 0x186D	; 0x80186d <SS80p>
   16142:	f0 91 6e 18 	lds	r31, 0x186E	; 0x80186e <SS80p+0x1>
   16146:	81 81       	ldd	r24, Z+1	; 0x01
   16148:	90 e0       	ldi	r25, 0x00	; 0
   1614a:	0e 94 94 86 	call	0x10d28	; 0x10d28 <gpib_enable_PPR>
   1614e:	80 e0       	ldi	r24, 0x00	; 0
   16150:	90 e0       	ldi	r25, 0x00	; 0
   16152:	08 95       	ret

00016154 <SS80_Universal_Device_Clear>:
   16154:	8f e0       	ldi	r24, 0x0F	; 15
   16156:	90 e0       	ldi	r25, 0x00	; 0
   16158:	8b df       	rcall	.-234    	; 0x16070 <Clear_Common>
   1615a:	e0 91 6d 18 	lds	r30, 0x186D	; 0x80186d <SS80p>
   1615e:	f0 91 6e 18 	lds	r31, 0x186E	; 0x80186e <SS80p+0x1>
   16162:	81 81       	ldd	r24, Z+1	; 0x01
   16164:	90 e0       	ldi	r25, 0x00	; 0
   16166:	0e 94 94 86 	call	0x10d28	; 0x10d28 <gpib_enable_PPR>
   1616a:	80 e0       	ldi	r24, 0x00	; 0
   1616c:	90 e0       	ldi	r25, 0x00	; 0
   1616e:	08 95       	ret

00016170 <SS80_Selected_Device_Clear>:
   16170:	cf 93       	push	r28
   16172:	df 93       	push	r29
   16174:	ec 01       	movw	r28, r24
   16176:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1617a:	85 ff       	sbrs	r24, 5
   1617c:	0a c0       	rjmp	.+20     	; 0x16192 <SS80_Selected_Device_Clear+0x22>
   1617e:	83 e8       	ldi	r24, 0x83	; 131
   16180:	90 e2       	ldi	r25, 0x20	; 32
   16182:	1f 92       	push	r1
   16184:	9f 93       	push	r25
   16186:	8f 93       	push	r24
   16188:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1618c:	0f 90       	pop	r0
   1618e:	0f 90       	pop	r0
   16190:	0f 90       	pop	r0
   16192:	ce 01       	movw	r24, r28
   16194:	6d df       	rcall	.-294    	; 0x16070 <Clear_Common>
   16196:	e0 91 6d 18 	lds	r30, 0x186D	; 0x80186d <SS80p>
   1619a:	f0 91 6e 18 	lds	r31, 0x186E	; 0x80186e <SS80p+0x1>
   1619e:	81 81       	ldd	r24, Z+1	; 0x01
   161a0:	90 e0       	ldi	r25, 0x00	; 0
   161a2:	0e 94 94 86 	call	0x10d28	; 0x10d28 <gpib_enable_PPR>
   161a6:	80 e0       	ldi	r24, 0x00	; 0
   161a8:	90 e0       	ldi	r25, 0x00	; 0
   161aa:	df 91       	pop	r29
   161ac:	cf 91       	pop	r28
   161ae:	08 95       	ret

000161b0 <SS80_Amigo_Clear>:
   161b0:	a3 e0       	ldi	r26, 0x03	; 3
   161b2:	b0 e0       	ldi	r27, 0x00	; 0
   161b4:	ee ed       	ldi	r30, 0xDE	; 222
   161b6:	f0 eb       	ldi	r31, 0xB0	; 176
   161b8:	0c 94 03 e6 	jmp	0x1cc06	; 0x1cc06 <__prologue_saves__+0x20>
   161bc:	1a 82       	std	Y+2, r1	; 0x02
   161be:	19 82       	std	Y+1, r1	; 0x01
   161c0:	ae 01       	movw	r20, r28
   161c2:	4f 5f       	subi	r20, 0xFF	; 255
   161c4:	5f 4f       	sbci	r21, 0xFF	; 255
   161c6:	61 e0       	ldi	r22, 0x01	; 1
   161c8:	70 e0       	ldi	r23, 0x00	; 0
   161ca:	ce 01       	movw	r24, r28
   161cc:	03 96       	adiw	r24, 0x03	; 3
   161ce:	0e 94 36 8b 	call	0x1166c	; 0x1166c <gpib_read_str>
   161d2:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   161d6:	01 97       	sbiw	r24, 0x01	; 1
   161d8:	89 f0       	breq	.+34     	; 0x161fc <SS80_Amigo_Clear+0x4c>
   161da:	20 ff       	sbrs	r18, 0
   161dc:	0a c0       	rjmp	.+20     	; 0x161f2 <SS80_Amigo_Clear+0x42>
   161de:	80 e7       	ldi	r24, 0x70	; 112
   161e0:	90 e2       	ldi	r25, 0x20	; 32
   161e2:	1f 92       	push	r1
   161e4:	9f 93       	push	r25
   161e6:	8f 93       	push	r24
   161e8:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   161ec:	0f 90       	pop	r0
   161ee:	0f 90       	pop	r0
   161f0:	0f 90       	pop	r0
   161f2:	89 81       	ldd	r24, Y+1	; 0x01
   161f4:	9a 81       	ldd	r25, Y+2	; 0x02
   161f6:	88 27       	eor	r24, r24
   161f8:	90 7d       	andi	r25, 0xD0	; 208
   161fa:	19 c0       	rjmp	.+50     	; 0x1622e <SS80_Amigo_Clear+0x7e>
   161fc:	25 ff       	sbrs	r18, 5
   161fe:	0a c0       	rjmp	.+20     	; 0x16214 <SS80_Amigo_Clear+0x64>
   16200:	81 e6       	ldi	r24, 0x61	; 97
   16202:	90 e2       	ldi	r25, 0x20	; 32
   16204:	1f 92       	push	r1
   16206:	9f 93       	push	r25
   16208:	8f 93       	push	r24
   1620a:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1620e:	0f 90       	pop	r0
   16210:	0f 90       	pop	r0
   16212:	0f 90       	pop	r0
   16214:	8f e0       	ldi	r24, 0x0F	; 15
   16216:	90 e0       	ldi	r25, 0x00	; 0
   16218:	2b df       	rcall	.-426    	; 0x16070 <Clear_Common>
   1621a:	e0 91 6d 18 	lds	r30, 0x186D	; 0x80186d <SS80p>
   1621e:	f0 91 6e 18 	lds	r31, 0x186E	; 0x80186e <SS80p+0x1>
   16222:	81 81       	ldd	r24, Z+1	; 0x01
   16224:	90 e0       	ldi	r25, 0x00	; 0
   16226:	0e 94 94 86 	call	0x10d28	; 0x10d28 <gpib_enable_PPR>
   1622a:	80 e0       	ldi	r24, 0x00	; 0
   1622c:	90 e0       	ldi	r25, 0x00	; 0
   1622e:	23 96       	adiw	r28, 0x03	; 3
   16230:	e2 e0       	ldi	r30, 0x02	; 2
   16232:	0c 94 1f e6 	jmp	0x1cc3e	; 0x1cc3e <__epilogue_restores__+0x20>

00016236 <SS80_Cancel>:
   16236:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80s>
   1623a:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80s+0x1>
   1623e:	11 82       	std	Z+1, r1	; 0x01
   16240:	10 82       	st	Z, r1
   16242:	e0 91 6d 18 	lds	r30, 0x186D	; 0x80186d <SS80p>
   16246:	f0 91 6e 18 	lds	r31, 0x186E	; 0x80186e <SS80p+0x1>
   1624a:	81 81       	ldd	r24, Z+1	; 0x01
   1624c:	90 e0       	ldi	r25, 0x00	; 0
   1624e:	0e 94 94 86 	call	0x10d28	; 0x10d28 <gpib_enable_PPR>
   16252:	80 e0       	ldi	r24, 0x00	; 0
   16254:	90 e0       	ldi	r25, 0x00	; 0
   16256:	08 95       	ret

00016258 <SS80_Transparent_State>:
   16258:	a2 e0       	ldi	r26, 0x02	; 2
   1625a:	b0 e0       	ldi	r27, 0x00	; 0
   1625c:	e2 e3       	ldi	r30, 0x32	; 50
   1625e:	f1 eb       	ldi	r31, 0xB1	; 177
   16260:	0c 94 fb e5 	jmp	0x1cbf6	; 0x1cbf6 <__prologue_saves__+0x10>
   16264:	e0 91 6d 18 	lds	r30, 0x186D	; 0x80186d <SS80p>
   16268:	f0 91 6e 18 	lds	r31, 0x186E	; 0x80186e <SS80p+0x1>
   1626c:	81 81       	ldd	r24, Z+1	; 0x01
   1626e:	90 e0       	ldi	r25, 0x00	; 0
   16270:	0e 94 c5 86 	call	0x10d8a	; 0x10d8a <gpib_disable_PPR>
   16274:	80 e0       	ldi	r24, 0x00	; 0
   16276:	91 e0       	ldi	r25, 0x01	; 1
   16278:	9a 83       	std	Y+2, r25	; 0x02
   1627a:	89 83       	std	Y+1, r24	; 0x01
   1627c:	ae 01       	movw	r20, r28
   1627e:	4f 5f       	subi	r20, 0xFF	; 255
   16280:	5f 4f       	sbci	r21, 0xFF	; 255
   16282:	60 e0       	ldi	r22, 0x00	; 0
   16284:	72 e0       	ldi	r23, 0x02	; 2
   16286:	8a ee       	ldi	r24, 0xEA	; 234
   16288:	9b e1       	ldi	r25, 0x1B	; 27
   1628a:	0e 94 36 8b 	call	0x1166c	; 0x1166c <gpib_read_str>
   1628e:	7c 01       	movw	r14, r24
   16290:	89 81       	ldd	r24, Y+1	; 0x01
   16292:	9a 81       	ldd	r25, Y+2	; 0x02
   16294:	9c 01       	movw	r18, r24
   16296:	22 27       	eor	r18, r18
   16298:	30 7d       	andi	r19, 0xD0	; 208
   1629a:	23 2b       	or	r18, r19
   1629c:	79 f0       	breq	.+30     	; 0x162bc <SS80_Transparent_State+0x64>
   1629e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   162a2:	80 ff       	sbrs	r24, 0
   162a4:	e0 c0       	rjmp	.+448    	; 0x16466 <SS80_Transparent_State+0x20e>
   162a6:	80 e0       	ldi	r24, 0x00	; 0
   162a8:	92 e2       	ldi	r25, 0x22	; 34
   162aa:	1f 92       	push	r1
   162ac:	9f 93       	push	r25
   162ae:	8f 93       	push	r24
   162b0:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   162b4:	0f 90       	pop	r0
   162b6:	0f 90       	pop	r0
   162b8:	0f 90       	pop	r0
   162ba:	d5 c0       	rjmp	.+426    	; 0x16466 <SS80_Transparent_State+0x20e>
   162bc:	e1 14       	cp	r14, r1
   162be:	f1 04       	cpc	r15, r1
   162c0:	09 f4       	brne	.+2      	; 0x162c4 <SS80_Transparent_State+0x6c>
   162c2:	d6 c0       	rjmp	.+428    	; 0x16470 <SS80_Transparent_State+0x218>
   162c4:	90 fd       	sbrc	r25, 0
   162c6:	0e c0       	rjmp	.+28     	; 0x162e4 <SS80_Transparent_State+0x8c>
   162c8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   162cc:	80 ff       	sbrs	r24, 0
   162ce:	0a c0       	rjmp	.+20     	; 0x162e4 <SS80_Transparent_State+0x8c>
   162d0:	87 ee       	ldi	r24, 0xE7	; 231
   162d2:	91 e2       	ldi	r25, 0x21	; 33
   162d4:	1f 92       	push	r1
   162d6:	9f 93       	push	r25
   162d8:	8f 93       	push	r24
   162da:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   162de:	0f 90       	pop	r0
   162e0:	0f 90       	pop	r0
   162e2:	0f 90       	pop	r0
   162e4:	8a ee       	ldi	r24, 0xEA	; 234
   162e6:	a8 2e       	mov	r10, r24
   162e8:	8b e1       	ldi	r24, 0x1B	; 27
   162ea:	b8 2e       	mov	r11, r24
   162ec:	00 e0       	ldi	r16, 0x00	; 0
   162ee:	10 e0       	ldi	r17, 0x00	; 0
   162f0:	0e 15       	cp	r16, r14
   162f2:	1f 05       	cpc	r17, r15
   162f4:	0c f0       	brlt	.+2      	; 0x162f8 <SS80_Transparent_State+0xa0>
   162f6:	a0 c0       	rjmp	.+320    	; 0x16438 <SS80_Transparent_State+0x1e0>
   162f8:	68 01       	movw	r12, r16
   162fa:	8f ef       	ldi	r24, 0xFF	; 255
   162fc:	c8 1a       	sub	r12, r24
   162fe:	d8 0a       	sbc	r13, r24
   16300:	f5 01       	movw	r30, r10
   16302:	81 91       	ld	r24, Z+
   16304:	5f 01       	movw	r10, r30
   16306:	28 2f       	mov	r18, r24
   16308:	30 e0       	ldi	r19, 0x00	; 0
   1630a:	a9 01       	movw	r20, r18
   1630c:	40 52       	subi	r20, 0x20	; 32
   1630e:	51 09       	sbc	r21, r1
   16310:	40 31       	cpi	r20, 0x10	; 16
   16312:	51 05       	cpc	r21, r1
   16314:	20 f4       	brcc	.+8      	; 0x1631e <SS80_Transparent_State+0xc6>
   16316:	80 52       	subi	r24, 0x20	; 32
   16318:	8b d9       	rcall	.-3306   	; 0x15630 <SS80_Check_Unit>
   1631a:	86 01       	movw	r16, r12
   1631c:	e9 cf       	rjmp	.-46     	; 0x162f0 <SS80_Transparent_State+0x98>
   1631e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16322:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   16326:	21 30       	cpi	r18, 0x01	; 1
   16328:	31 05       	cpc	r19, r1
   1632a:	c9 f4       	brne	.+50     	; 0x1635e <SS80_Transparent_State+0x106>
   1632c:	0e 5f       	subi	r16, 0xFE	; 254
   1632e:	1f 4f       	sbci	r17, 0xFF	; 255
   16330:	80 73       	andi	r24, 0x30	; 48
   16332:	99 27       	eor	r25, r25
   16334:	89 2b       	or	r24, r25
   16336:	51 f0       	breq	.+20     	; 0x1634c <SS80_Transparent_State+0xf4>
   16338:	82 ec       	ldi	r24, 0xC2	; 194
   1633a:	91 e2       	ldi	r25, 0x21	; 33
   1633c:	1f 92       	push	r1
   1633e:	9f 93       	push	r25
   16340:	8f 93       	push	r24
   16342:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   16346:	0f 90       	pop	r0
   16348:	0f 90       	pop	r0
   1634a:	0f 90       	pop	r0
   1634c:	e0 91 6d 18 	lds	r30, 0x186D	; 0x80186d <SS80p>
   16350:	f0 91 6e 18 	lds	r31, 0x186E	; 0x80186e <SS80p+0x1>
   16354:	81 81       	ldd	r24, Z+1	; 0x01
   16356:	90 e0       	ldi	r25, 0x00	; 0
   16358:	0e 94 94 86 	call	0x10d28	; 0x10d28 <gpib_enable_PPR>
   1635c:	6d c0       	rjmp	.+218    	; 0x16438 <SS80_Transparent_State+0x1e0>
   1635e:	22 30       	cpi	r18, 0x02	; 2
   16360:	31 05       	cpc	r19, r1
   16362:	51 f4       	brne	.+20     	; 0x16378 <SS80_Transparent_State+0x120>
   16364:	0b 5f       	subi	r16, 0xFB	; 251
   16366:	1f 4f       	sbci	r17, 0xFF	; 255
   16368:	80 73       	andi	r24, 0x30	; 48
   1636a:	99 27       	eor	r25, r25
   1636c:	89 2b       	or	r24, r25
   1636e:	09 f4       	brne	.+2      	; 0x16372 <SS80_Transparent_State+0x11a>
   16370:	63 c0       	rjmp	.+198    	; 0x16438 <SS80_Transparent_State+0x1e0>
   16372:	85 ea       	ldi	r24, 0xA5	; 165
   16374:	91 e2       	ldi	r25, 0x21	; 33
   16376:	0c c0       	rjmp	.+24     	; 0x16390 <SS80_Transparent_State+0x138>
   16378:	23 30       	cpi	r18, 0x03	; 3
   1637a:	31 05       	cpc	r19, r1
   1637c:	91 f4       	brne	.+36     	; 0x163a2 <SS80_Transparent_State+0x14a>
   1637e:	0b 5f       	subi	r16, 0xFB	; 251
   16380:	1f 4f       	sbci	r17, 0xFF	; 255
   16382:	80 73       	andi	r24, 0x30	; 48
   16384:	99 27       	eor	r25, r25
   16386:	89 2b       	or	r24, r25
   16388:	09 f4       	brne	.+2      	; 0x1638c <SS80_Transparent_State+0x134>
   1638a:	56 c0       	rjmp	.+172    	; 0x16438 <SS80_Transparent_State+0x1e0>
   1638c:	87 e8       	ldi	r24, 0x87	; 135
   1638e:	91 e2       	ldi	r25, 0x21	; 33
   16390:	1f 92       	push	r1
   16392:	9f 93       	push	r25
   16394:	8f 93       	push	r24
   16396:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1639a:	0f 90       	pop	r0
   1639c:	0f 90       	pop	r0
   1639e:	0f 90       	pop	r0
   163a0:	4b c0       	rjmp	.+150    	; 0x16438 <SS80_Transparent_State+0x1e0>
   163a2:	28 30       	cpi	r18, 0x08	; 8
   163a4:	31 05       	cpc	r19, r1
   163a6:	e9 f4       	brne	.+58     	; 0x163e2 <SS80_Transparent_State+0x18a>
   163a8:	85 ff       	sbrs	r24, 5
   163aa:	13 c0       	rjmp	.+38     	; 0x163d2 <SS80_Transparent_State+0x17a>
   163ac:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80s>
   163b0:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80s+0x1>
   163b4:	85 81       	ldd	r24, Z+5	; 0x05
   163b6:	1f 92       	push	r1
   163b8:	8f 93       	push	r24
   163ba:	80 e6       	ldi	r24, 0x60	; 96
   163bc:	91 e2       	ldi	r25, 0x21	; 33
   163be:	1f 92       	push	r1
   163c0:	9f 93       	push	r25
   163c2:	8f 93       	push	r24
   163c4:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   163c8:	0f 90       	pop	r0
   163ca:	0f 90       	pop	r0
   163cc:	0f 90       	pop	r0
   163ce:	0f 90       	pop	r0
   163d0:	0f 90       	pop	r0
   163d2:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80s>
   163d6:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80s+0x1>
   163da:	85 81       	ldd	r24, Z+5	; 0x05
   163dc:	90 e0       	ldi	r25, 0x00	; 0
   163de:	ae de       	rcall	.-676    	; 0x1613c <SS80_Channel_Independent_Clear>
   163e0:	49 c0       	rjmp	.+146    	; 0x16474 <SS80_Transparent_State+0x21c>
   163e2:	29 30       	cpi	r18, 0x09	; 9
   163e4:	31 05       	cpc	r19, r1
   163e6:	b9 f4       	brne	.+46     	; 0x16416 <SS80_Transparent_State+0x1be>
   163e8:	85 ff       	sbrs	r24, 5
   163ea:	13 c0       	rjmp	.+38     	; 0x16412 <SS80_Transparent_State+0x1ba>
   163ec:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80s>
   163f0:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80s+0x1>
   163f4:	85 81       	ldd	r24, Z+5	; 0x05
   163f6:	1f 92       	push	r1
   163f8:	8f 93       	push	r24
   163fa:	8c e4       	ldi	r24, 0x4C	; 76
   163fc:	91 e2       	ldi	r25, 0x21	; 33
   163fe:	1f 92       	push	r1
   16400:	9f 93       	push	r25
   16402:	8f 93       	push	r24
   16404:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   16408:	0f 90       	pop	r0
   1640a:	0f 90       	pop	r0
   1640c:	0f 90       	pop	r0
   1640e:	0f 90       	pop	r0
   16410:	0f 90       	pop	r0
   16412:	11 df       	rcall	.-478    	; 0x16236 <SS80_Cancel>
   16414:	2f c0       	rjmp	.+94     	; 0x16474 <SS80_Transparent_State+0x21c>
   16416:	80 ff       	sbrs	r24, 0
   16418:	26 c0       	rjmp	.+76     	; 0x16466 <SS80_Transparent_State+0x20e>
   1641a:	3f 93       	push	r19
   1641c:	2f 93       	push	r18
   1641e:	8c e2       	ldi	r24, 0x2C	; 44
   16420:	91 e2       	ldi	r25, 0x21	; 33
   16422:	1f 92       	push	r1
   16424:	9f 93       	push	r25
   16426:	8f 93       	push	r24
   16428:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1642c:	0f 90       	pop	r0
   1642e:	0f 90       	pop	r0
   16430:	0f 90       	pop	r0
   16432:	0f 90       	pop	r0
   16434:	0f 90       	pop	r0
   16436:	86 01       	movw	r16, r12
   16438:	0e 15       	cp	r16, r14
   1643a:	1f 05       	cpc	r17, r15
   1643c:	a1 f0       	breq	.+40     	; 0x16466 <SS80_Transparent_State+0x20e>
   1643e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16442:	80 ff       	sbrs	r24, 0
   16444:	10 c0       	rjmp	.+32     	; 0x16466 <SS80_Transparent_State+0x20e>
   16446:	ff 92       	push	r15
   16448:	ef 92       	push	r14
   1644a:	1f 93       	push	r17
   1644c:	0f 93       	push	r16
   1644e:	80 ef       	ldi	r24, 0xF0	; 240
   16450:	90 e2       	ldi	r25, 0x20	; 32
   16452:	1f 92       	push	r1
   16454:	9f 93       	push	r25
   16456:	8f 93       	push	r24
   16458:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1645c:	0f b6       	in	r0, 0x3f	; 63
   1645e:	f8 94       	cli
   16460:	de bf       	out	0x3e, r29	; 62
   16462:	0f be       	out	0x3f, r0	; 63
   16464:	cd bf       	out	0x3d, r28	; 61
   16466:	89 81       	ldd	r24, Y+1	; 0x01
   16468:	9a 81       	ldd	r25, Y+2	; 0x02
   1646a:	88 27       	eor	r24, r24
   1646c:	90 7d       	andi	r25, 0xD0	; 208
   1646e:	02 c0       	rjmp	.+4      	; 0x16474 <SS80_Transparent_State+0x21c>
   16470:	80 e0       	ldi	r24, 0x00	; 0
   16472:	90 e0       	ldi	r25, 0x00	; 0
   16474:	22 96       	adiw	r28, 0x02	; 2
   16476:	ea e0       	ldi	r30, 0x0A	; 10
   16478:	0c 94 17 e6 	jmp	0x1cc2e	; 0x1cc2e <__epilogue_restores__+0x10>

0001647c <SS80_error_return>:
   1647c:	a3 e0       	ldi	r26, 0x03	; 3
   1647e:	b0 e0       	ldi	r27, 0x00	; 0
   16480:	e4 e4       	ldi	r30, 0x44	; 68
   16482:	f2 eb       	ldi	r31, 0xB2	; 178
   16484:	0c 94 03 e6 	jmp	0x1cc06	; 0x1cc06 <__prologue_saves__+0x20>
   16488:	80 e0       	ldi	r24, 0x00	; 0
   1648a:	91 e0       	ldi	r25, 0x01	; 1
   1648c:	9a 83       	std	Y+2, r25	; 0x02
   1648e:	89 83       	std	Y+1, r24	; 0x01
   16490:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80s>
   16494:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80s+0x1>
   16498:	81 e0       	ldi	r24, 0x01	; 1
   1649a:	82 83       	std	Z+2, r24	; 0x02
   1649c:	8b 83       	std	Y+3, r24	; 0x03
   1649e:	ae 01       	movw	r20, r28
   164a0:	4f 5f       	subi	r20, 0xFF	; 255
   164a2:	5f 4f       	sbci	r21, 0xFF	; 255
   164a4:	61 e0       	ldi	r22, 0x01	; 1
   164a6:	70 e0       	ldi	r23, 0x00	; 0
   164a8:	ce 01       	movw	r24, r28
   164aa:	03 96       	adiw	r24, 0x03	; 3
   164ac:	0e 94 e4 8b 	call	0x117c8	; 0x117c8 <gpib_write_str>
   164b0:	01 97       	sbiw	r24, 0x01	; 1
   164b2:	99 f0       	breq	.+38     	; 0x164da <SS80_error_return+0x5e>
   164b4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   164b8:	80 ff       	sbrs	r24, 0
   164ba:	0a c0       	rjmp	.+20     	; 0x164d0 <SS80_error_return+0x54>
   164bc:	82 e2       	ldi	r24, 0x22	; 34
   164be:	90 e2       	ldi	r25, 0x20	; 32
   164c0:	1f 92       	push	r1
   164c2:	9f 93       	push	r25
   164c4:	8f 93       	push	r24
   164c6:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   164ca:	0f 90       	pop	r0
   164cc:	0f 90       	pop	r0
   164ce:	0f 90       	pop	r0
   164d0:	89 81       	ldd	r24, Y+1	; 0x01
   164d2:	9a 81       	ldd	r25, Y+2	; 0x02
   164d4:	88 27       	eor	r24, r24
   164d6:	90 7d       	andi	r25, 0xD0	; 208
   164d8:	07 c0       	rjmp	.+14     	; 0x164e8 <SS80_error_return+0x6c>
   164da:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80s>
   164de:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80s+0x1>
   164e2:	12 82       	std	Z+2, r1	; 0x02
   164e4:	80 e0       	ldi	r24, 0x00	; 0
   164e6:	90 e0       	ldi	r25, 0x00	; 0
   164e8:	23 96       	adiw	r28, 0x03	; 3
   164ea:	e2 e0       	ldi	r30, 0x02	; 2
   164ec:	0c 94 1f e6 	jmp	0x1cc3e	; 0x1cc3e <__epilogue_restores__+0x20>

000164f0 <SS80_locate_and_read>:
/// - Phases: Command, Report
/// @param[in] u: Unit
/// @return  0

int SS80_Channel_Independent_Clear( int u )
{
   164f0:	ac e0       	ldi	r26, 0x0C	; 12
   164f2:	b0 e0       	ldi	r27, 0x00	; 0
   164f4:	ee e7       	ldi	r30, 0x7E	; 126
   164f6:	f2 eb       	ldi	r31, 0xB2	; 178
   164f8:	0c 94 f4 e5 	jmp	0x1cbe8	; 0x1cbe8 <__prologue_saves__+0x2>
   164fc:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80s>
   16500:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80s+0x1>
   16504:	27 81       	ldd	r18, Z+7	; 0x07
   16506:	30 85       	ldd	r19, Z+8	; 0x08
   16508:	41 85       	ldd	r20, Z+9	; 0x09
   1650a:	52 85       	ldd	r21, Z+10	; 0x0a
   1650c:	a0 91 6d 18 	lds	r26, 0x186D	; 0x80186d <SS80p>
   16510:	b0 91 6e 18 	lds	r27, 0x186E	; 0x80186e <SS80p+0x1>
   16514:	9f 96       	adiw	r26, 0x2f	; 47
   16516:	0d 90       	ld	r0, X+
   16518:	bc 91       	ld	r27, X
   1651a:	a0 2d       	mov	r26, r0
   1651c:	12 82       	std	Z+2, r1	; 0x02
   1651e:	1a 82       	std	Y+2, r1	; 0x02
   16520:	19 82       	std	Y+1, r1	; 0x01
   16522:	54 98       	cbi	0x0a, 4	; 10
   16524:	4c 99       	sbic	0x09, 4	; 9
   16526:	03 c0       	rjmp	.+6      	; 0x1652e <SS80_locate_and_read+0x3e>
   16528:	80 e0       	ldi	r24, 0x00	; 0
   1652a:	90 e1       	ldi	r25, 0x10	; 16
   1652c:	45 c1       	rjmp	.+650    	; 0x167b8 <SS80_locate_and_read+0x2c8>
   1652e:	0e 94 d3 e5 	call	0x1cba6	; 0x1cba6 <__muluhisi3>
   16532:	4b 01       	movw	r8, r22
   16534:	5c 01       	movw	r10, r24
   16536:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1653a:	85 ff       	sbrs	r24, 5
   1653c:	1c c0       	rjmp	.+56     	; 0x16576 <SS80_locate_and_read+0x86>
   1653e:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80s>
   16542:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80s+0x1>
   16546:	86 85       	ldd	r24, Z+14	; 0x0e
   16548:	8f 93       	push	r24
   1654a:	85 85       	ldd	r24, Z+13	; 0x0d
   1654c:	8f 93       	push	r24
   1654e:	84 85       	ldd	r24, Z+12	; 0x0c
   16550:	8f 93       	push	r24
   16552:	83 85       	ldd	r24, Z+11	; 0x0b
   16554:	8f 93       	push	r24
   16556:	bf 92       	push	r11
   16558:	af 92       	push	r10
   1655a:	9f 92       	push	r9
   1655c:	8f 92       	push	r8
   1655e:	86 e1       	ldi	r24, 0x16	; 22
   16560:	97 e2       	ldi	r25, 0x27	; 39
   16562:	1f 92       	push	r1
   16564:	9f 93       	push	r25
   16566:	8f 93       	push	r24
   16568:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1656c:	0f b6       	in	r0, 0x3f	; 63
   1656e:	f8 94       	cli
   16570:	de bf       	out	0x3e, r29	; 62
   16572:	0f be       	out	0x3f, r0	; 63
   16574:	cd bf       	out	0x3d, r28	; 61
   16576:	16 db       	rcall	.-2516   	; 0x15ba4 <SS80_cmd_seek>
   16578:	89 2b       	or	r24, r25
   1657a:	09 f0       	breq	.+2      	; 0x1657e <SS80_locate_and_read+0x8e>
   1657c:	af c0       	rjmp	.+350    	; 0x166dc <SS80_locate_and_read+0x1ec>
   1657e:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80s>
   16582:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80s+0x1>
   16586:	43 84       	ldd	r4, Z+11	; 0x0b
   16588:	54 84       	ldd	r5, Z+12	; 0x0c
   1658a:	65 84       	ldd	r6, Z+13	; 0x0d
   1658c:	76 84       	ldd	r7, Z+14	; 0x0e
   1658e:	1b 82       	std	Y+3, r1	; 0x03
   16590:	1c 82       	std	Y+4, r1	; 0x04
   16592:	1d 82       	std	Y+5, r1	; 0x05
   16594:	1e 82       	std	Y+6, r1	; 0x06
   16596:	88 ef       	ldi	r24, 0xF8	; 248
   16598:	96 e2       	ldi	r25, 0x26	; 38
   1659a:	9c 01       	movw	r18, r24
   1659c:	40 e0       	ldi	r20, 0x00	; 0
   1659e:	2f 83       	std	Y+7, r18	; 0x07
   165a0:	38 87       	std	Y+8, r19	; 0x08
   165a2:	49 87       	std	Y+9, r20	; 0x09
   165a4:	33 24       	eor	r3, r3
   165a6:	33 94       	inc	r3
   165a8:	87 ec       	ldi	r24, 0xC7	; 199
   165aa:	96 e2       	ldi	r25, 0x26	; 38
   165ac:	9c 01       	movw	r18, r24
   165ae:	40 e0       	ldi	r20, 0x00	; 0
   165b0:	2a 87       	std	Y+10, r18	; 0x0a
   165b2:	3b 87       	std	Y+11, r19	; 0x0b
   165b4:	4c 87       	std	Y+12, r20	; 0x0c
   165b6:	34 c0       	rjmp	.+104    	; 0x16620 <SS80_locate_and_read+0x130>
   165b8:	86 fd       	sbrc	r24, 6
   165ba:	0e 94 dc 85 	call	0x10bb8	; 0x10bb8 <gpib_timer_elapsed_begin>
   165be:	ae 01       	movw	r20, r28
   165c0:	4f 5f       	subi	r20, 0xFF	; 255
   165c2:	5f 4f       	sbci	r21, 0xFF	; 255
   165c4:	b6 01       	movw	r22, r12
   165c6:	8a ee       	ldi	r24, 0xEA	; 234
   165c8:	9b e1       	ldi	r25, 0x1B	; 27
   165ca:	0e 94 e4 8b 	call	0x117c8	; 0x117c8 <gpib_write_str>
   165ce:	8c 01       	movw	r16, r24
   165d0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   165d4:	86 ff       	sbrs	r24, 6
   165d6:	04 c0       	rjmp	.+8      	; 0x165e0 <SS80_locate_and_read+0xf0>
   165d8:	8f ef       	ldi	r24, 0xFF	; 255
   165da:	9f e0       	ldi	r25, 0x0F	; 15
   165dc:	0e 94 ee 85 	call	0x10bdc	; 0x10bdc <gpib_timer_elapsed_end>
   165e0:	c0 16       	cp	r12, r16
   165e2:	d1 06       	cpc	r13, r17
   165e4:	09 f0       	breq	.+2      	; 0x165e8 <SS80_locate_and_read+0xf8>
   165e6:	83 c0       	rjmp	.+262    	; 0x166ee <SS80_locate_and_read+0x1fe>
   165e8:	0d 2c       	mov	r0, r13
   165ea:	00 0c       	add	r0, r0
   165ec:	ee 08       	sbc	r14, r14
   165ee:	ff 08       	sbc	r15, r15
   165f0:	8c 0c       	add	r8, r12
   165f2:	9d 1c       	adc	r9, r13
   165f4:	ae 1c       	adc	r10, r14
   165f6:	bf 1c       	adc	r11, r15
   165f8:	01 2e       	mov	r0, r17
   165fa:	00 0c       	add	r0, r0
   165fc:	22 0b       	sbc	r18, r18
   165fe:	33 0b       	sbc	r19, r19
   16600:	8b 81       	ldd	r24, Y+3	; 0x03
   16602:	9c 81       	ldd	r25, Y+4	; 0x04
   16604:	ad 81       	ldd	r26, Y+5	; 0x05
   16606:	be 81       	ldd	r27, Y+6	; 0x06
   16608:	80 0f       	add	r24, r16
   1660a:	91 1f       	adc	r25, r17
   1660c:	a2 1f       	adc	r26, r18
   1660e:	b3 1f       	adc	r27, r19
   16610:	8b 83       	std	Y+3, r24	; 0x03
   16612:	9c 83       	std	Y+4, r25	; 0x04
   16614:	ad 83       	std	Y+5, r26	; 0x05
   16616:	be 83       	std	Y+6, r27	; 0x06
   16618:	40 1a       	sub	r4, r16
   1661a:	51 0a       	sbc	r5, r17
   1661c:	62 0a       	sbc	r6, r18
   1661e:	73 0a       	sbc	r7, r19
   16620:	41 14       	cp	r4, r1
   16622:	51 04       	cpc	r5, r1
   16624:	61 04       	cpc	r6, r1
   16626:	71 04       	cpc	r7, r1
   16628:	09 f4       	brne	.+2      	; 0x1662c <SS80_locate_and_read+0x13c>
   1662a:	93 c0       	rjmp	.+294    	; 0x16752 <SS80_locate_and_read+0x262>
   1662c:	54 98       	cbi	0x0a, 4	; 10
   1662e:	4c 9b       	sbis	0x09, 4	; 9
   16630:	7b cf       	rjmp	.-266    	; 0x16528 <SS80_locate_and_read+0x38>
   16632:	31 e0       	ldi	r19, 0x01	; 1
   16634:	43 16       	cp	r4, r19
   16636:	53 06       	cpc	r5, r19
   16638:	61 04       	cpc	r6, r1
   1663a:	71 04       	cpc	r7, r1
   1663c:	08 f4       	brcc	.+2      	; 0x16640 <SS80_locate_and_read+0x150>
   1663e:	50 c0       	rjmp	.+160    	; 0x166e0 <SS80_locate_and_read+0x1f0>
   16640:	1a 82       	std	Y+2, r1	; 0x02
   16642:	19 82       	std	Y+1, r1	; 0x01
   16644:	c1 2c       	mov	r12, r1
   16646:	dd 24       	eor	r13, r13
   16648:	d3 94       	inc	r13
   1664a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1664e:	86 fd       	sbrc	r24, 6
   16650:	0e 94 dc 85 	call	0x10bb8	; 0x10bb8 <gpib_timer_elapsed_begin>
   16654:	e0 90 6b 18 	lds	r14, 0x186B	; 0x80186b <SS80s>
   16658:	f0 90 6c 18 	lds	r15, 0x186C	; 0x80186c <SS80s+0x1>
   1665c:	43 e0       	ldi	r20, 0x03	; 3
   1665e:	e4 0e       	add	r14, r20
   16660:	f1 1c       	adc	r15, r1
   16662:	80 91 6d 18 	lds	r24, 0x186D	; 0x80186d <SS80p>
   16666:	90 91 6e 18 	lds	r25, 0x186E	; 0x80186e <SS80p+0x1>
   1666a:	86 01       	movw	r16, r12
   1666c:	2a ee       	ldi	r18, 0xEA	; 234
   1666e:	3b e1       	ldi	r19, 0x1B	; 27
   16670:	b5 01       	movw	r22, r10
   16672:	a4 01       	movw	r20, r8
   16674:	02 96       	adiw	r24, 0x02	; 2
   16676:	0e 94 2e 85 	call	0x10a5c	; 0x10a5c <dbf_open_read>
   1667a:	8c 01       	movw	r16, r24
   1667c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16680:	86 ff       	sbrs	r24, 6
   16682:	04 c0       	rjmp	.+8      	; 0x1668c <SS80_locate_and_read+0x19c>
   16684:	85 ef       	ldi	r24, 0xF5	; 245
   16686:	9f e0       	ldi	r25, 0x0F	; 15
   16688:	0e 94 ee 85 	call	0x10bdc	; 0x10bdc <gpib_timer_elapsed_end>
   1668c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16690:	85 ff       	sbrs	r24, 5
   16692:	0e c0       	rjmp	.+28     	; 0x166b0 <SS80_locate_and_read+0x1c0>
   16694:	1f 93       	push	r17
   16696:	0f 93       	push	r16
   16698:	1f 92       	push	r1
   1669a:	88 85       	ldd	r24, Y+8	; 0x08
   1669c:	8f 93       	push	r24
   1669e:	9f 81       	ldd	r25, Y+7	; 0x07
   166a0:	9f 93       	push	r25
   166a2:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   166a6:	0f 90       	pop	r0
   166a8:	0f 90       	pop	r0
   166aa:	0f 90       	pop	r0
   166ac:	0f 90       	pop	r0
   166ae:	0f 90       	pop	r0
   166b0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   166b4:	17 ff       	sbrs	r17, 7
   166b6:	80 cf       	rjmp	.-256    	; 0x165b8 <SS80_locate_and_read+0xc8>
   166b8:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80s>
   166bc:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80s+0x1>
   166c0:	91 e0       	ldi	r25, 0x01	; 1
   166c2:	92 83       	std	Z+2, r25	; 0x02
   166c4:	80 ff       	sbrs	r24, 0
   166c6:	0a c0       	rjmp	.+20     	; 0x166dc <SS80_locate_and_read+0x1ec>
   166c8:	80 ee       	ldi	r24, 0xE0	; 224
   166ca:	96 e2       	ldi	r25, 0x26	; 38
   166cc:	1f 92       	push	r1
   166ce:	9f 93       	push	r25
   166d0:	8f 93       	push	r24
   166d2:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   166d6:	0f 90       	pop	r0
   166d8:	0f 90       	pop	r0
   166da:	0f 90       	pop	r0
   166dc:	cf de       	rcall	.-610    	; 0x1647c <SS80_error_return>
   166de:	6c c0       	rjmp	.+216    	; 0x167b8 <SS80_locate_and_read+0x2c8>
   166e0:	62 01       	movw	r12, r4
   166e2:	89 81       	ldd	r24, Y+1	; 0x01
   166e4:	9a 81       	ldd	r25, Y+2	; 0x02
   166e6:	91 60       	ori	r25, 0x01	; 1
   166e8:	9a 83       	std	Y+2, r25	; 0x02
   166ea:	89 83       	std	Y+1, r24	; 0x01
   166ec:	ae cf       	rjmp	.-164    	; 0x1664a <SS80_locate_and_read+0x15a>
   166ee:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80s>
   166f2:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80s+0x1>
   166f6:	32 82       	std	Z+2, r3	; 0x02
   166f8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   166fc:	80 ff       	sbrs	r24, 0
   166fe:	0a c0       	rjmp	.+20     	; 0x16714 <SS80_locate_and_read+0x224>
   16700:	1f 92       	push	r1
   16702:	ab 85       	ldd	r26, Y+11	; 0x0b
   16704:	af 93       	push	r26
   16706:	ba 85       	ldd	r27, Y+10	; 0x0a
   16708:	bf 93       	push	r27
   1670a:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1670e:	0f 90       	pop	r0
   16710:	0f 90       	pop	r0
   16712:	0f 90       	pop	r0
   16714:	89 81       	ldd	r24, Y+1	; 0x01
   16716:	9a 81       	ldd	r25, Y+2	; 0x02
   16718:	88 27       	eor	r24, r24
   1671a:	90 7d       	andi	r25, 0xD0	; 208
   1671c:	89 2b       	or	r24, r25
   1671e:	09 f4       	brne	.+2      	; 0x16722 <SS80_locate_and_read+0x232>
   16720:	63 cf       	rjmp	.-314    	; 0x165e8 <SS80_locate_and_read+0xf8>
   16722:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80s>
   16726:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80s+0x1>
   1672a:	83 81       	ldd	r24, Z+3	; 0x03
   1672c:	94 81       	ldd	r25, Z+4	; 0x04
   1672e:	80 62       	ori	r24, 0x20	; 32
   16730:	94 83       	std	Z+4, r25	; 0x04
   16732:	83 83       	std	Z+3, r24	; 0x03
   16734:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16738:	80 ff       	sbrs	r24, 0
   1673a:	23 c0       	rjmp	.+70     	; 0x16782 <SS80_locate_and_read+0x292>
   1673c:	82 ea       	ldi	r24, 0xA2	; 162
   1673e:	96 e2       	ldi	r25, 0x26	; 38
   16740:	1f 92       	push	r1
   16742:	9f 93       	push	r25
   16744:	8f 93       	push	r24
   16746:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1674a:	0f 90       	pop	r0
   1674c:	0f 90       	pop	r0
   1674e:	0f 90       	pop	r0
   16750:	18 c0       	rjmp	.+48     	; 0x16782 <SS80_locate_and_read+0x292>
   16752:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16756:	85 ff       	sbrs	r24, 5
   16758:	14 c0       	rjmp	.+40     	; 0x16782 <SS80_locate_and_read+0x292>
   1675a:	9e 81       	ldd	r25, Y+6	; 0x06
   1675c:	9f 93       	push	r25
   1675e:	ad 81       	ldd	r26, Y+5	; 0x05
   16760:	af 93       	push	r26
   16762:	bc 81       	ldd	r27, Y+4	; 0x04
   16764:	bf 93       	push	r27
   16766:	eb 81       	ldd	r30, Y+3	; 0x03
   16768:	ef 93       	push	r30
   1676a:	8a e7       	ldi	r24, 0x7A	; 122
   1676c:	96 e2       	ldi	r25, 0x26	; 38
   1676e:	1f 92       	push	r1
   16770:	9f 93       	push	r25
   16772:	8f 93       	push	r24
   16774:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   16778:	0f b6       	in	r0, 0x3f	; 63
   1677a:	f8 94       	cli
   1677c:	de bf       	out	0x3e, r29	; 62
   1677e:	0f be       	out	0x3f, r0	; 63
   16780:	cd bf       	out	0x3d, r28	; 61
   16782:	00 91 6b 18 	lds	r16, 0x186B	; 0x80186b <SS80s>
   16786:	10 91 6c 18 	lds	r17, 0x186C	; 0x80186c <SS80s+0x1>
   1678a:	e0 91 6d 18 	lds	r30, 0x186D	; 0x80186d <SS80p>
   1678e:	f0 91 6e 18 	lds	r31, 0x186E	; 0x80186e <SS80p+0x1>
   16792:	27 a5       	ldd	r18, Z+47	; 0x2f
   16794:	30 a9       	ldd	r19, Z+48	; 0x30
   16796:	40 e0       	ldi	r20, 0x00	; 0
   16798:	50 e0       	ldi	r21, 0x00	; 0
   1679a:	c5 01       	movw	r24, r10
   1679c:	b4 01       	movw	r22, r8
   1679e:	0e 94 71 e5 	call	0x1cae2	; 0x1cae2 <__udivmodsi4>
   167a2:	d8 01       	movw	r26, r16
   167a4:	17 96       	adiw	r26, 0x07	; 7
   167a6:	2d 93       	st	X+, r18
   167a8:	3d 93       	st	X+, r19
   167aa:	4d 93       	st	X+, r20
   167ac:	5c 93       	st	X, r21
   167ae:	1a 97       	sbiw	r26, 0x0a	; 10
   167b0:	89 81       	ldd	r24, Y+1	; 0x01
   167b2:	9a 81       	ldd	r25, Y+2	; 0x02
   167b4:	88 27       	eor	r24, r24
   167b6:	90 7d       	andi	r25, 0xD0	; 208
   167b8:	2c 96       	adiw	r28, 0x0c	; 12
   167ba:	e1 e1       	ldi	r30, 0x11	; 17
   167bc:	0c 94 10 e6 	jmp	0x1cc20	; 0x1cc20 <__epilogue_restores__+0x2>

000167c0 <SS80_Execute_State>:
   167c0:	cf 93       	push	r28
   167c2:	df 93       	push	r29
   167c4:	e0 91 6d 18 	lds	r30, 0x186D	; 0x80186d <SS80p>
   167c8:	f0 91 6e 18 	lds	r31, 0x186E	; 0x80186e <SS80p+0x1>
   167cc:	81 81       	ldd	r24, Z+1	; 0x01
   167ce:	90 e0       	ldi	r25, 0x00	; 0
   167d0:	0e 94 c5 86 	call	0x10d8a	; 0x10d8a <gpib_disable_PPR>
   167d4:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80s>
   167d8:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80s+0x1>
   167dc:	80 81       	ld	r24, Z
   167de:	91 81       	ldd	r25, Z+1	; 0x01
   167e0:	82 30       	cpi	r24, 0x02	; 2
   167e2:	91 05       	cpc	r25, r1
   167e4:	89 f0       	breq	.+34     	; 0x16808 <SS80_Execute_State+0x48>
   167e6:	3c f4       	brge	.+14     	; 0x167f6 <SS80_Execute_State+0x36>
   167e8:	00 97       	sbiw	r24, 0x00	; 0
   167ea:	91 f1       	breq	.+100    	; 0x16850 <SS80_Execute_State+0x90>
   167ec:	81 30       	cpi	r24, 0x01	; 1
   167ee:	91 05       	cpc	r25, r1
   167f0:	b9 f4       	brne	.+46     	; 0x16820 <SS80_Execute_State+0x60>
   167f2:	7e de       	rcall	.-772    	; 0x164f0 <SS80_locate_and_read>
   167f4:	0d c0       	rjmp	.+26     	; 0x16810 <SS80_Execute_State+0x50>
   167f6:	83 30       	cpi	r24, 0x03	; 3
   167f8:	91 05       	cpc	r25, r1
   167fa:	41 f0       	breq	.+16     	; 0x1680c <SS80_Execute_State+0x4c>
   167fc:	84 30       	cpi	r24, 0x04	; 4
   167fe:	91 05       	cpc	r25, r1
   16800:	79 f4       	brne	.+30     	; 0x16820 <SS80_Execute_State+0x60>
   16802:	0e 94 a8 aa 	call	0x15550	; 0x15550 <SS80_describe>
   16806:	04 c0       	rjmp	.+8      	; 0x16810 <SS80_Execute_State+0x50>
   16808:	4e da       	rcall	.-2916   	; 0x15ca6 <SS80_locate_and_write>
   1680a:	02 c0       	rjmp	.+4      	; 0x16810 <SS80_Execute_State+0x50>
   1680c:	0e 94 27 aa 	call	0x1544e	; 0x1544e <SS80_send_status>
   16810:	ec 01       	movw	r28, r24
   16812:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80s>
   16816:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80s+0x1>
   1681a:	11 82       	std	Z+1, r1	; 0x01
   1681c:	10 82       	st	Z, r1
   1681e:	1a c0       	rjmp	.+52     	; 0x16854 <SS80_Execute_State+0x94>
   16820:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   16824:	20 ff       	sbrs	r18, 0
   16826:	0e c0       	rjmp	.+28     	; 0x16844 <SS80_Execute_State+0x84>
   16828:	9f 93       	push	r25
   1682a:	8f 93       	push	r24
   1682c:	8e e3       	ldi	r24, 0x3E	; 62
   1682e:	97 e2       	ldi	r25, 0x27	; 39
   16830:	1f 92       	push	r1
   16832:	9f 93       	push	r25
   16834:	8f 93       	push	r24
   16836:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1683a:	0f 90       	pop	r0
   1683c:	0f 90       	pop	r0
   1683e:	0f 90       	pop	r0
   16840:	0f 90       	pop	r0
   16842:	0f 90       	pop	r0
   16844:	e0 91 6b 18 	lds	r30, 0x186B	; 0x80186b <SS80s>
   16848:	f0 91 6c 18 	lds	r31, 0x186C	; 0x80186c <SS80s+0x1>
   1684c:	11 82       	std	Z+1, r1	; 0x01
   1684e:	10 82       	st	Z, r1
   16850:	c0 e0       	ldi	r28, 0x00	; 0
   16852:	d0 e0       	ldi	r29, 0x00	; 0
   16854:	e0 91 6d 18 	lds	r30, 0x186D	; 0x80186d <SS80p>
   16858:	f0 91 6e 18 	lds	r31, 0x186E	; 0x80186e <SS80p+0x1>
   1685c:	81 81       	ldd	r24, Z+1	; 0x01
   1685e:	90 e0       	ldi	r25, 0x00	; 0
   16860:	0e 94 94 86 	call	0x10d28	; 0x10d28 <gpib_enable_PPR>
   16864:	ce 01       	movw	r24, r28
   16866:	df 91       	pop	r29
   16868:	cf 91       	pop	r28
   1686a:	08 95       	ret

0001686c <SS80_COMMANDS>:
   1686c:	1f 93       	push	r17
   1686e:	cf 93       	push	r28
   16870:	df 93       	push	r29
   16872:	18 2f       	mov	r17, r24
   16874:	80 91 ee 1d 	lds	r24, 0x1DEE	; 0x801dee <talking>
   16878:	90 e0       	ldi	r25, 0x00	; 0
   1687a:	0e 94 b0 8c 	call	0x11960	; 0x11960 <SS80_is_MTA>
   1687e:	89 2b       	or	r24, r25
   16880:	19 f0       	breq	.+6      	; 0x16888 <SS80_COMMANDS+0x1c>
   16882:	15 36       	cpi	r17, 0x65	; 101
   16884:	19 f5       	brne	.+70     	; 0x168cc <SS80_COMMANDS+0x60>
   16886:	09 c0       	rjmp	.+18     	; 0x1689a <SS80_COMMANDS+0x2e>
   16888:	80 91 f0 1d 	lds	r24, 0x1DF0	; 0x801df0 <listening>
   1688c:	90 e0       	ldi	r25, 0x00	; 0
   1688e:	0e 94 a1 8c 	call	0x11942	; 0x11942 <SS80_is_MLA>
   16892:	ec 01       	movw	r28, r24
   16894:	89 2b       	or	r24, r25
   16896:	a9 f7       	brne	.-22     	; 0x16882 <SS80_COMMANDS+0x16>
   16898:	ae c0       	rjmp	.+348    	; 0x169f6 <SS80_COMMANDS+0x18a>
   1689a:	80 91 f0 1d 	lds	r24, 0x1DF0	; 0x801df0 <listening>
   1689e:	90 e0       	ldi	r25, 0x00	; 0
   168a0:	0e 94 a1 8c 	call	0x11942	; 0x11942 <SS80_is_MLA>
   168a4:	89 2b       	or	r24, r25
   168a6:	09 f4       	brne	.+2      	; 0x168aa <SS80_COMMANDS+0x3e>
   168a8:	a3 c0       	rjmp	.+326    	; 0x169f0 <SS80_COMMANDS+0x184>
   168aa:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   168ae:	85 ff       	sbrs	r24, 5
   168b0:	0a c0       	rjmp	.+20     	; 0x168c6 <SS80_COMMANDS+0x5a>
   168b2:	8c e0       	ldi	r24, 0x0C	; 12
   168b4:	90 e2       	ldi	r25, 0x20	; 32
   168b6:	1f 92       	push	r1
   168b8:	9f 93       	push	r25
   168ba:	8f 93       	push	r24
   168bc:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   168c0:	0f 90       	pop	r0
   168c2:	0f 90       	pop	r0
   168c4:	0f 90       	pop	r0
   168c6:	0e 94 5a ab 	call	0x156b4	; 0x156b4 <SS80_Command_State>
   168ca:	73 c0       	rjmp	.+230    	; 0x169b2 <SS80_COMMANDS+0x146>
   168cc:	1e 36       	cpi	r17, 0x6E	; 110
   168ce:	01 f5       	brne	.+64     	; 0x16910 <SS80_COMMANDS+0xa4>
   168d0:	80 91 f0 1d 	lds	r24, 0x1DF0	; 0x801df0 <listening>
   168d4:	90 e0       	ldi	r25, 0x00	; 0
   168d6:	0e 94 a1 8c 	call	0x11942	; 0x11942 <SS80_is_MLA>
   168da:	89 2b       	or	r24, r25
   168dc:	79 f0       	breq	.+30     	; 0x168fc <SS80_COMMANDS+0x90>
   168de:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   168e2:	85 ff       	sbrs	r24, 5
   168e4:	13 c0       	rjmp	.+38     	; 0x1690c <SS80_COMMANDS+0xa0>
   168e6:	86 ef       	ldi	r24, 0xF6	; 246
   168e8:	9f e1       	ldi	r25, 0x1F	; 31
   168ea:	1f 92       	push	r1
   168ec:	9f 93       	push	r25
   168ee:	8f 93       	push	r24
   168f0:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   168f4:	0f 90       	pop	r0
   168f6:	0f 90       	pop	r0
   168f8:	0f 90       	pop	r0
   168fa:	08 c0       	rjmp	.+16     	; 0x1690c <SS80_COMMANDS+0xa0>
   168fc:	80 91 ee 1d 	lds	r24, 0x1DEE	; 0x801dee <talking>
   16900:	90 e0       	ldi	r25, 0x00	; 0
   16902:	0e 94 b0 8c 	call	0x11960	; 0x11960 <SS80_is_MTA>
   16906:	89 2b       	or	r24, r25
   16908:	51 f7       	brne	.-44     	; 0x168de <SS80_COMMANDS+0x72>
   1690a:	72 c0       	rjmp	.+228    	; 0x169f0 <SS80_COMMANDS+0x184>
   1690c:	59 df       	rcall	.-334    	; 0x167c0 <SS80_Execute_State>
   1690e:	51 c0       	rjmp	.+162    	; 0x169b2 <SS80_COMMANDS+0x146>
   16910:	10 37       	cpi	r17, 0x70	; 112
   16912:	b9 f5       	brne	.+110    	; 0x16982 <SS80_COMMANDS+0x116>
   16914:	80 91 ee 1d 	lds	r24, 0x1DEE	; 0x801dee <talking>
   16918:	90 e0       	ldi	r25, 0x00	; 0
   1691a:	0e 94 b0 8c 	call	0x11960	; 0x11960 <SS80_is_MTA>
   1691e:	89 2b       	or	r24, r25
   16920:	81 f0       	breq	.+32     	; 0x16942 <SS80_COMMANDS+0xd6>
   16922:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16926:	85 ff       	sbrs	r24, 5
   16928:	0a c0       	rjmp	.+20     	; 0x1693e <SS80_COMMANDS+0xd2>
   1692a:	81 ee       	ldi	r24, 0xE1	; 225
   1692c:	9f e1       	ldi	r25, 0x1F	; 31
   1692e:	1f 92       	push	r1
   16930:	9f 93       	push	r25
   16932:	8f 93       	push	r24
   16934:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   16938:	0f 90       	pop	r0
   1693a:	0f 90       	pop	r0
   1693c:	0f 90       	pop	r0
   1693e:	4a db       	rcall	.-2412   	; 0x15fd4 <SS80_Report>
   16940:	38 c0       	rjmp	.+112    	; 0x169b2 <SS80_COMMANDS+0x146>
   16942:	80 91 f0 1d 	lds	r24, 0x1DF0	; 0x801df0 <listening>
   16946:	90 e0       	ldi	r25, 0x00	; 0
   16948:	0e 94 a1 8c 	call	0x11942	; 0x11942 <SS80_is_MLA>
   1694c:	89 2b       	or	r24, r25
   1694e:	09 f4       	brne	.+2      	; 0x16952 <SS80_COMMANDS+0xe6>
   16950:	4f c0       	rjmp	.+158    	; 0x169f0 <SS80_COMMANDS+0x184>
   16952:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16956:	85 ff       	sbrs	r24, 5
   16958:	0a c0       	rjmp	.+20     	; 0x1696e <SS80_COMMANDS+0x102>
   1695a:	82 ed       	ldi	r24, 0xD2	; 210
   1695c:	9f e1       	ldi	r25, 0x1F	; 31
   1695e:	1f 92       	push	r1
   16960:	9f 93       	push	r25
   16962:	8f 93       	push	r24
   16964:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   16968:	0f 90       	pop	r0
   1696a:	0f 90       	pop	r0
   1696c:	0f 90       	pop	r0
   1696e:	e0 91 6d 18 	lds	r30, 0x186D	; 0x80186d <SS80p>
   16972:	f0 91 6e 18 	lds	r31, 0x186E	; 0x80186e <SS80p+0x1>
   16976:	81 81       	ldd	r24, Z+1	; 0x01
   16978:	90 e0       	ldi	r25, 0x00	; 0
   1697a:	0e 94 c5 86 	call	0x10d8a	; 0x10d8a <gpib_disable_PPR>
   1697e:	18 dc       	rcall	.-2000   	; 0x161b0 <SS80_Amigo_Clear>
   16980:	18 c0       	rjmp	.+48     	; 0x169b2 <SS80_COMMANDS+0x146>
   16982:	12 37       	cpi	r17, 0x72	; 114
   16984:	c1 f4       	brne	.+48     	; 0x169b6 <SS80_COMMANDS+0x14a>
   16986:	80 91 f0 1d 	lds	r24, 0x1DF0	; 0x801df0 <listening>
   1698a:	90 e0       	ldi	r25, 0x00	; 0
   1698c:	0e 94 a1 8c 	call	0x11942	; 0x11942 <SS80_is_MLA>
   16990:	89 2b       	or	r24, r25
   16992:	89 f0       	breq	.+34     	; 0x169b6 <SS80_COMMANDS+0x14a>
   16994:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16998:	85 ff       	sbrs	r24, 5
   1699a:	0a c0       	rjmp	.+20     	; 0x169b0 <SS80_COMMANDS+0x144>
   1699c:	8e eb       	ldi	r24, 0xBE	; 190
   1699e:	9f e1       	ldi	r25, 0x1F	; 31
   169a0:	1f 92       	push	r1
   169a2:	9f 93       	push	r25
   169a4:	8f 93       	push	r24
   169a6:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   169aa:	0f 90       	pop	r0
   169ac:	0f 90       	pop	r0
   169ae:	0f 90       	pop	r0
   169b0:	53 dc       	rcall	.-1882   	; 0x16258 <SS80_Transparent_State>
   169b2:	ec 01       	movw	r28, r24
   169b4:	3d c0       	rjmp	.+122    	; 0x16a30 <SS80_COMMANDS+0x1c4>
   169b6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   169ba:	80 ff       	sbrs	r24, 0
   169bc:	19 c0       	rjmp	.+50     	; 0x169f0 <SS80_COMMANDS+0x184>
   169be:	80 91 ee 1d 	lds	r24, 0x1DEE	; 0x801dee <talking>
   169c2:	1f 92       	push	r1
   169c4:	8f 93       	push	r24
   169c6:	80 91 f0 1d 	lds	r24, 0x1DF0	; 0x801df0 <listening>
   169ca:	1f 92       	push	r1
   169cc:	8f 93       	push	r24
   169ce:	1f 92       	push	r1
   169d0:	1f 93       	push	r17
   169d2:	8a e8       	ldi	r24, 0x8A	; 138
   169d4:	9f e1       	ldi	r25, 0x1F	; 31
   169d6:	1f 92       	push	r1
   169d8:	9f 93       	push	r25
   169da:	8f 93       	push	r24
   169dc:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   169e0:	8d b7       	in	r24, 0x3d	; 61
   169e2:	9e b7       	in	r25, 0x3e	; 62
   169e4:	09 96       	adiw	r24, 0x09	; 9
   169e6:	0f b6       	in	r0, 0x3f	; 63
   169e8:	f8 94       	cli
   169ea:	9e bf       	out	0x3e, r25	; 62
   169ec:	0f be       	out	0x3f, r0	; 63
   169ee:	8d bf       	out	0x3d, r24	; 61
   169f0:	c0 e0       	ldi	r28, 0x00	; 0
   169f2:	d0 e0       	ldi	r29, 0x00	; 0
   169f4:	1d c0       	rjmp	.+58     	; 0x16a30 <SS80_COMMANDS+0x1c4>
   169f6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   169fa:	80 ff       	sbrs	r24, 0
   169fc:	f9 cf       	rjmp	.-14     	; 0x169f0 <SS80_COMMANDS+0x184>
   169fe:	80 91 ee 1d 	lds	r24, 0x1DEE	; 0x801dee <talking>
   16a02:	1f 92       	push	r1
   16a04:	8f 93       	push	r24
   16a06:	80 91 f0 1d 	lds	r24, 0x1DF0	; 0x801df0 <listening>
   16a0a:	1f 92       	push	r1
   16a0c:	8f 93       	push	r24
   16a0e:	1f 92       	push	r1
   16a10:	1f 93       	push	r17
   16a12:	86 e5       	ldi	r24, 0x56	; 86
   16a14:	9f e1       	ldi	r25, 0x1F	; 31
   16a16:	1f 92       	push	r1
   16a18:	9f 93       	push	r25
   16a1a:	8f 93       	push	r24
   16a1c:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   16a20:	8d b7       	in	r24, 0x3d	; 61
   16a22:	9e b7       	in	r25, 0x3e	; 62
   16a24:	09 96       	adiw	r24, 0x09	; 9
   16a26:	0f b6       	in	r0, 0x3f	; 63
   16a28:	f8 94       	cli
   16a2a:	9e bf       	out	0x3e, r25	; 62
   16a2c:	0f be       	out	0x3f, r0	; 63
   16a2e:	8d bf       	out	0x3d, r24	; 61
   16a30:	ce 01       	movw	r24, r28
   16a32:	df 91       	pop	r29
   16a34:	cf 91       	pop	r28
   16a36:	1f 91       	pop	r17
   16a38:	08 95       	ret

00016a3a <amigo_overflow_check>:
   16a3a:	cf 92       	push	r12
   16a3c:	df 92       	push	r13
   16a3e:	ef 92       	push	r14
   16a40:	0f 93       	push	r16
   16a42:	1f 93       	push	r17
   16a44:	cf 93       	push	r28
   16a46:	df 93       	push	r29
   16a48:	ec 01       	movw	r28, r24
   16a4a:	8b 01       	movw	r16, r22
   16a4c:	80 e0       	ldi	r24, 0x00	; 0
   16a4e:	90 e0       	ldi	r25, 0x00	; 0
   16a50:	2d e2       	ldi	r18, 0x2D	; 45
   16a52:	3f e2       	ldi	r19, 0x2F	; 47
   16a54:	69 01       	movw	r12, r18
   16a56:	2d 81       	ldd	r18, Y+5	; 0x05
   16a58:	30 e0       	ldi	r19, 0x00	; 0
   16a5a:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <AMIGOp>
   16a5e:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <AMIGOp+0x1>
   16a62:	47 a1       	ldd	r20, Z+39	; 0x27
   16a64:	50 a5       	ldd	r21, Z+40	; 0x28
   16a66:	24 17       	cp	r18, r20
   16a68:	35 07       	cpc	r19, r21
   16a6a:	7c f1       	brlt	.+94     	; 0x16aca <amigo_overflow_check+0x90>
   16a6c:	1d 82       	std	Y+5, r1	; 0x05
   16a6e:	2c 81       	ldd	r18, Y+4	; 0x04
   16a70:	2f 5f       	subi	r18, 0xFF	; 255
   16a72:	2c 83       	std	Y+4, r18	; 0x04
   16a74:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <AMIGOp>
   16a78:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <AMIGOp+0x1>
   16a7c:	2c 81       	ldd	r18, Y+4	; 0x04
   16a7e:	30 e0       	ldi	r19, 0x00	; 0
   16a80:	41 a5       	ldd	r20, Z+41	; 0x29
   16a82:	52 a5       	ldd	r21, Z+42	; 0x2a
   16a84:	24 17       	cp	r18, r20
   16a86:	35 07       	cpc	r19, r21
   16a88:	34 f3       	brlt	.-52     	; 0x16a56 <amigo_overflow_check+0x1c>
   16a8a:	1c 82       	std	Y+4, r1	; 0x04
   16a8c:	2b 81       	ldd	r18, Y+3	; 0x03
   16a8e:	2f 5f       	subi	r18, 0xFF	; 255
   16a90:	2b 83       	std	Y+3, r18	; 0x03
   16a92:	30 e0       	ldi	r19, 0x00	; 0
   16a94:	43 a5       	ldd	r20, Z+43	; 0x2b
   16a96:	54 a5       	ldd	r21, Z+44	; 0x2c
   16a98:	24 17       	cp	r18, r20
   16a9a:	35 07       	cpc	r19, r21
   16a9c:	5c f3       	brlt	.-42     	; 0x16a74 <amigo_overflow_check+0x3a>
   16a9e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16aa2:	80 ff       	sbrs	r24, 0
   16aa4:	0f c0       	rjmp	.+30     	; 0x16ac4 <amigo_overflow_check+0x8a>
   16aa6:	01 15       	cp	r16, r1
   16aa8:	11 05       	cpc	r17, r1
   16aaa:	61 f0       	breq	.+24     	; 0x16ac4 <amigo_overflow_check+0x8a>
   16aac:	1f 93       	push	r17
   16aae:	0f 93       	push	r16
   16ab0:	1f 92       	push	r1
   16ab2:	df 92       	push	r13
   16ab4:	cf 92       	push	r12
   16ab6:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   16aba:	0f 90       	pop	r0
   16abc:	0f 90       	pop	r0
   16abe:	0f 90       	pop	r0
   16ac0:	0f 90       	pop	r0
   16ac2:	0f 90       	pop	r0
   16ac4:	81 e0       	ldi	r24, 0x01	; 1
   16ac6:	90 e0       	ldi	r25, 0x00	; 0
   16ac8:	d5 cf       	rjmp	.-86     	; 0x16a74 <amigo_overflow_check+0x3a>
   16aca:	df 91       	pop	r29
   16acc:	cf 91       	pop	r28
   16ace:	1f 91       	pop	r17
   16ad0:	0f 91       	pop	r16
   16ad2:	ef 90       	pop	r14
   16ad4:	df 90       	pop	r13
   16ad6:	cf 90       	pop	r12
   16ad8:	08 95       	ret

00016ada <amigo_chs_to_logical>:
   16ada:	a0 e0       	ldi	r26, 0x00	; 0
   16adc:	b0 e0       	ldi	r27, 0x00	; 0
   16ade:	e3 e7       	ldi	r30, 0x73	; 115
   16ae0:	f5 eb       	ldi	r31, 0xB5	; 181
   16ae2:	0c 94 fc e5 	jmp	0x1cbf8	; 0x1cbf8 <__prologue_saves__+0x12>
   16ae6:	dc 01       	movw	r26, r24
   16ae8:	d6 2f       	mov	r29, r22
   16aea:	17 2f       	mov	r17, r23
   16aec:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <AMIGOp>
   16af0:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <AMIGOp+0x1>
   16af4:	87 a1       	ldd	r24, Z+39	; 0x27
   16af6:	90 a5       	ldd	r25, Z+40	; 0x28
   16af8:	14 96       	adiw	r26, 0x04	; 4
   16afa:	cc 91       	ld	r28, X
   16afc:	14 97       	sbiw	r26, 0x04	; 4
   16afe:	c8 9f       	mul	r28, r24
   16b00:	90 01       	movw	r18, r0
   16b02:	c9 9f       	mul	r28, r25
   16b04:	30 0d       	add	r19, r0
   16b06:	11 24       	eor	r1, r1
   16b08:	a9 01       	movw	r20, r18
   16b0a:	33 0f       	add	r19, r19
   16b0c:	66 0b       	sbc	r22, r22
   16b0e:	77 0b       	sbc	r23, r23
   16b10:	13 96       	adiw	r26, 0x03	; 3
   16b12:	0c 91       	ld	r16, X
   16b14:	13 97       	sbiw	r26, 0x03	; 3
   16b16:	21 a5       	ldd	r18, Z+41	; 0x29
   16b18:	32 a5       	ldd	r19, Z+42	; 0x2a
   16b1a:	82 9f       	mul	r24, r18
   16b1c:	70 01       	movw	r14, r0
   16b1e:	83 9f       	mul	r24, r19
   16b20:	f0 0c       	add	r15, r0
   16b22:	92 9f       	mul	r25, r18
   16b24:	f0 0c       	add	r15, r0
   16b26:	11 24       	eor	r1, r1
   16b28:	0e 9d       	mul	r16, r14
   16b2a:	90 01       	movw	r18, r0
   16b2c:	0f 9d       	mul	r16, r15
   16b2e:	30 0d       	add	r19, r0
   16b30:	11 24       	eor	r1, r1
   16b32:	69 01       	movw	r12, r18
   16b34:	33 0f       	add	r19, r19
   16b36:	ee 08       	sbc	r14, r14
   16b38:	ff 08       	sbc	r15, r15
   16b3a:	4c 0d       	add	r20, r12
   16b3c:	5d 1d       	adc	r21, r13
   16b3e:	6e 1d       	adc	r22, r14
   16b40:	7f 1d       	adc	r23, r15
   16b42:	15 96       	adiw	r26, 0x05	; 5
   16b44:	bc 90       	ld	r11, X
   16b46:	9a 01       	movw	r18, r20
   16b48:	ab 01       	movw	r20, r22
   16b4a:	2b 0d       	add	r18, r11
   16b4c:	31 1d       	adc	r19, r1
   16b4e:	41 1d       	adc	r20, r1
   16b50:	51 1d       	adc	r21, r1
   16b52:	a5 a1       	ldd	r26, Z+37	; 0x25
   16b54:	b6 a1       	ldd	r27, Z+38	; 0x26
   16b56:	0e 94 dd e5 	call	0x1cbba	; 0x1cbba <__mulshisi3>
   16b5a:	6b 01       	movw	r12, r22
   16b5c:	7c 01       	movw	r14, r24
   16b5e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16b62:	85 ff       	sbrs	r24, 5
   16b64:	22 c0       	rjmp	.+68     	; 0x16baa <amigo_chs_to_logical+0xd0>
   16b66:	1f 92       	push	r1
   16b68:	bf 92       	push	r11
   16b6a:	1f 92       	push	r1
   16b6c:	cf 93       	push	r28
   16b6e:	1f 92       	push	r1
   16b70:	0f 93       	push	r16
   16b72:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOs>
   16b76:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOs+0x1>
   16b7a:	81 81       	ldd	r24, Z+1	; 0x01
   16b7c:	1f 92       	push	r1
   16b7e:	8f 93       	push	r24
   16b80:	ff 92       	push	r15
   16b82:	ef 92       	push	r14
   16b84:	df 92       	push	r13
   16b86:	cf 92       	push	r12
   16b88:	1f 93       	push	r17
   16b8a:	df 93       	push	r29
   16b8c:	8a ed       	ldi	r24, 0xDA	; 218
   16b8e:	9e e2       	ldi	r25, 0x2E	; 46
   16b90:	1f 92       	push	r1
   16b92:	9f 93       	push	r25
   16b94:	8f 93       	push	r24
   16b96:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   16b9a:	8d b7       	in	r24, 0x3d	; 61
   16b9c:	9e b7       	in	r25, 0x3e	; 62
   16b9e:	41 96       	adiw	r24, 0x11	; 17
   16ba0:	0f b6       	in	r0, 0x3f	; 63
   16ba2:	f8 94       	cli
   16ba4:	9e bf       	out	0x3e, r25	; 62
   16ba6:	0f be       	out	0x3f, r0	; 63
   16ba8:	8d bf       	out	0x3d, r24	; 61
   16baa:	b6 01       	movw	r22, r12
   16bac:	c7 01       	movw	r24, r14
   16bae:	cd b7       	in	r28, 0x3d	; 61
   16bb0:	de b7       	in	r29, 0x3e	; 62
   16bb2:	e9 e0       	ldi	r30, 0x09	; 9
   16bb4:	0c 94 18 e6 	jmp	0x1cc30	; 0x1cc30 <__epilogue_restores__+0x12>

00016bb8 <amigo_init>:
   16bb8:	ef 92       	push	r14
   16bba:	ff 92       	push	r15
   16bbc:	0f 93       	push	r16
   16bbe:	1f 93       	push	r17
   16bc0:	cf 93       	push	r28
   16bc2:	df 93       	push	r29
   16bc4:	0d ec       	ldi	r16, 0xCD	; 205
   16bc6:	1f e1       	ldi	r17, 0x1F	; 31
   16bc8:	cb e0       	ldi	r28, 0x0B	; 11
   16bca:	d0 e0       	ldi	r29, 0x00	; 0
   16bcc:	84 e0       	ldi	r24, 0x04	; 4
   16bce:	f8 2e       	mov	r15, r24
   16bd0:	92 e0       	ldi	r25, 0x02	; 2
   16bd2:	e9 2e       	mov	r14, r25
   16bd4:	d8 01       	movw	r26, r16
   16bd6:	8c 91       	ld	r24, X
   16bd8:	81 30       	cpi	r24, 0x01	; 1
   16bda:	31 f5       	brne	.+76     	; 0x16c28 <amigo_init+0x70>
   16bdc:	ce 01       	movw	r24, r28
   16bde:	0e 94 5b 93 	call	0x126b6	; 0x126b6 <set_active_device>
   16be2:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOs>
   16be6:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOs+0x1>
   16bea:	10 82       	st	Z, r1
   16bec:	9f 01       	movw	r18, r30
   16bee:	27 5f       	subi	r18, 0xF7	; 247
   16bf0:	3f 4f       	sbci	r19, 0xFF	; 255
   16bf2:	d9 01       	movw	r26, r18
   16bf4:	8f 2d       	mov	r24, r15
   16bf6:	1d 92       	st	X+, r1
   16bf8:	8a 95       	dec	r24
   16bfa:	e9 f7       	brne	.-6      	; 0x16bf6 <amigo_init+0x3e>
   16bfc:	2c 5f       	subi	r18, 0xFC	; 252
   16bfe:	3f 4f       	sbci	r19, 0xFF	; 255
   16c00:	d9 01       	movw	r26, r18
   16c02:	8f 2d       	mov	r24, r15
   16c04:	1d 92       	st	X+, r1
   16c06:	8a 95       	dec	r24
   16c08:	e9 f7       	brne	.-6      	; 0x16c04 <amigo_init+0x4c>
   16c0a:	11 82       	std	Z+1, r1	; 0x01
   16c0c:	15 82       	std	Z+5, r1	; 0x05
   16c0e:	14 82       	std	Z+4, r1	; 0x04
   16c10:	13 82       	std	Z+3, r1	; 0x03
   16c12:	e6 82       	std	Z+6, r14	; 0x06
   16c14:	10 86       	std	Z+8, r1	; 0x08
   16c16:	17 82       	std	Z+7, r1	; 0x07
   16c18:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <AMIGOp>
   16c1c:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <AMIGOp+0x1>
   16c20:	81 81       	ldd	r24, Z+1	; 0x01
   16c22:	90 e0       	ldi	r25, 0x00	; 0
   16c24:	0e 94 c5 86 	call	0x10d8a	; 0x10d8a <gpib_disable_PPR>
   16c28:	21 97       	sbiw	r28, 0x01	; 1
   16c2a:	0b 52       	subi	r16, 0x2B	; 43
   16c2c:	11 09       	sbc	r17, r1
   16c2e:	cf 3f       	cpi	r28, 0xFF	; 255
   16c30:	af ef       	ldi	r26, 0xFF	; 255
   16c32:	da 07       	cpc	r29, r26
   16c34:	79 f6       	brne	.-98     	; 0x16bd4 <amigo_init+0x1c>
   16c36:	cd b7       	in	r28, 0x3d	; 61
   16c38:	de b7       	in	r29, 0x3e	; 62
   16c3a:	e6 e0       	ldi	r30, 0x06	; 6
   16c3c:	0c 94 1b e6 	jmp	0x1cc36	; 0x1cc36 <__epilogue_restores__+0x18>

00016c40 <amigo_request_logical_address>:
   16c40:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOs>
   16c44:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOs+0x1>
   16c48:	15 86       	std	Z+13, r1	; 0x0d
   16c4a:	83 81       	ldd	r24, Z+3	; 0x03
   16c4c:	86 87       	std	Z+14, r24	; 0x0e
   16c4e:	84 81       	ldd	r24, Z+4	; 0x04
   16c50:	87 87       	std	Z+15, r24	; 0x0f
   16c52:	85 81       	ldd	r24, Z+5	; 0x05
   16c54:	80 8b       	std	Z+16, r24	; 0x10
   16c56:	80 e0       	ldi	r24, 0x00	; 0
   16c58:	90 e0       	ldi	r25, 0x00	; 0
   16c5a:	08 95       	ret

00016c5c <amigo_request_status>:
   16c5c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16c60:	85 ff       	sbrs	r24, 5
   16c62:	0a c0       	rjmp	.+20     	; 0x16c78 <amigo_request_status+0x1c>
   16c64:	8d ea       	ldi	r24, 0xAD	; 173
   16c66:	9f e2       	ldi	r25, 0x2F	; 47
   16c68:	1f 92       	push	r1
   16c6a:	9f 93       	push	r25
   16c6c:	8f 93       	push	r24
   16c6e:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   16c72:	0f 90       	pop	r0
   16c74:	0f 90       	pop	r0
   16c76:	0f 90       	pop	r0
   16c78:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOs>
   16c7c:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOs+0x1>
   16c80:	11 86       	std	Z+9, r1	; 0x09
   16c82:	81 81       	ldd	r24, Z+1	; 0x01
   16c84:	82 87       	std	Z+10, r24	; 0x0a
   16c86:	8d e0       	ldi	r24, 0x0D	; 13
   16c88:	83 87       	std	Z+11, r24	; 0x0b
   16c8a:	14 86       	std	Z+12, r1	; 0x0c
   16c8c:	0e 94 46 71 	call	0xe28c	; 0xe28c <mmc_wp_status>
   16c90:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOs>
   16c94:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOs+0x1>
   16c98:	89 2b       	or	r24, r25
   16c9a:	19 f0       	breq	.+6      	; 0x16ca2 <amigo_request_status+0x46>
   16c9c:	84 85       	ldd	r24, Z+12	; 0x0c
   16c9e:	80 66       	ori	r24, 0x60	; 96
   16ca0:	84 87       	std	Z+12, r24	; 0x0c
   16ca2:	86 81       	ldd	r24, Z+6	; 0x06
   16ca4:	82 30       	cpi	r24, 0x02	; 2
   16ca6:	31 f4       	brne	.+12     	; 0x16cb4 <amigo_request_status+0x58>
   16ca8:	83 e1       	ldi	r24, 0x13	; 19
   16caa:	81 87       	std	Z+9, r24	; 0x09
   16cac:	84 85       	ldd	r24, Z+12	; 0x0c
   16cae:	88 60       	ori	r24, 0x08	; 8
   16cb0:	84 87       	std	Z+12, r24	; 0x0c
   16cb2:	21 c0       	rjmp	.+66     	; 0x16cf6 <amigo_request_status+0x9a>
   16cb4:	27 81       	ldd	r18, Z+7	; 0x07
   16cb6:	30 85       	ldd	r19, Z+8	; 0x08
   16cb8:	21 15       	cp	r18, r1
   16cba:	31 05       	cpc	r19, r1
   16cbc:	11 f4       	brne	.+4      	; 0x16cc2 <amigo_request_status+0x66>
   16cbe:	81 30       	cpi	r24, 0x01	; 1
   16cc0:	d1 f4       	brne	.+52     	; 0x16cf6 <amigo_request_status+0x9a>
   16cc2:	26 fd       	sbrc	r18, 6
   16cc4:	0c c0       	rjmp	.+24     	; 0x16cde <amigo_request_status+0x82>
   16cc6:	25 ff       	sbrs	r18, 5
   16cc8:	03 c0       	rjmp	.+6      	; 0x16cd0 <amigo_request_status+0x74>
   16cca:	8a e0       	ldi	r24, 0x0A	; 10
   16ccc:	81 87       	std	Z+9, r24	; 0x09
   16cce:	0d c0       	rjmp	.+26     	; 0x16cea <amigo_request_status+0x8e>
   16cd0:	84 85       	ldd	r24, Z+12	; 0x0c
   16cd2:	24 ff       	sbrs	r18, 4
   16cd4:	02 c0       	rjmp	.+4      	; 0x16cda <amigo_request_status+0x7e>
   16cd6:	83 60       	ori	r24, 0x03	; 3
   16cd8:	07 c0       	rjmp	.+14     	; 0x16ce8 <amigo_request_status+0x8c>
   16cda:	21 ff       	sbrs	r18, 1
   16cdc:	02 c0       	rjmp	.+4      	; 0x16ce2 <amigo_request_status+0x86>
   16cde:	83 e1       	ldi	r24, 0x13	; 19
   16ce0:	f5 cf       	rjmp	.-22     	; 0x16ccc <amigo_request_status+0x70>
   16ce2:	22 ff       	sbrs	r18, 2
   16ce4:	02 c0       	rjmp	.+4      	; 0x16cea <amigo_request_status+0x8e>
   16ce6:	84 60       	ori	r24, 0x04	; 4
   16ce8:	84 87       	std	Z+12, r24	; 0x0c
   16cea:	84 85       	ldd	r24, Z+12	; 0x0c
   16cec:	80 61       	ori	r24, 0x10	; 16
   16cee:	84 87       	std	Z+12, r24	; 0x0c
   16cf0:	83 85       	ldd	r24, Z+11	; 0x0b
   16cf2:	80 68       	ori	r24, 0x80	; 128
   16cf4:	83 87       	std	Z+11, r24	; 0x0b
   16cf6:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <AMIGOp>
   16cfa:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <AMIGOp+0x1>
   16cfe:	81 81       	ldd	r24, Z+1	; 0x01
   16d00:	90 e0       	ldi	r25, 0x00	; 0
   16d02:	0e 94 94 86 	call	0x10d28	; 0x10d28 <gpib_enable_PPR>
   16d06:	80 e0       	ldi	r24, 0x00	; 0
   16d08:	90 e0       	ldi	r25, 0x00	; 0
   16d0a:	08 95       	ret

00016d0c <amigo_send_logical_address>:
   16d0c:	a2 e0       	ldi	r26, 0x02	; 2
   16d0e:	b0 e0       	ldi	r27, 0x00	; 0
   16d10:	ec e8       	ldi	r30, 0x8C	; 140
   16d12:	f6 eb       	ldi	r31, 0xB6	; 182
   16d14:	0c 94 03 e6 	jmp	0x1cc06	; 0x1cc06 <__prologue_saves__+0x20>
   16d18:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16d1c:	85 ff       	sbrs	r24, 5
   16d1e:	0a c0       	rjmp	.+20     	; 0x16d34 <amigo_send_logical_address+0x28>
   16d20:	8f e8       	ldi	r24, 0x8F	; 143
   16d22:	9f e2       	ldi	r25, 0x2F	; 47
   16d24:	1f 92       	push	r1
   16d26:	9f 93       	push	r25
   16d28:	8f 93       	push	r24
   16d2a:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   16d2e:	0f 90       	pop	r0
   16d30:	0f 90       	pop	r0
   16d32:	0f 90       	pop	r0
   16d34:	80 e0       	ldi	r24, 0x00	; 0
   16d36:	91 e0       	ldi	r25, 0x01	; 1
   16d38:	9a 83       	std	Y+2, r25	; 0x02
   16d3a:	89 83       	std	Y+1, r24	; 0x01
   16d3c:	80 91 67 18 	lds	r24, 0x1867	; 0x801867 <AMIGOs>
   16d40:	90 91 68 18 	lds	r25, 0x1868	; 0x801868 <AMIGOs+0x1>
   16d44:	ae 01       	movw	r20, r28
   16d46:	4f 5f       	subi	r20, 0xFF	; 255
   16d48:	5f 4f       	sbci	r21, 0xFF	; 255
   16d4a:	64 e0       	ldi	r22, 0x04	; 4
   16d4c:	70 e0       	ldi	r23, 0x00	; 0
   16d4e:	0d 96       	adiw	r24, 0x0d	; 13
   16d50:	0e 94 e4 8b 	call	0x117c8	; 0x117c8 <gpib_write_str>
   16d54:	29 81       	ldd	r18, Y+1	; 0x01
   16d56:	3a 81       	ldd	r19, Y+2	; 0x02
   16d58:	22 27       	eor	r18, r18
   16d5a:	30 7d       	andi	r19, 0xD0	; 208
   16d5c:	23 2b       	or	r18, r19
   16d5e:	49 f0       	breq	.+18     	; 0x16d72 <amigo_send_logical_address+0x66>
   16d60:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOs>
   16d64:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOs+0x1>
   16d68:	27 81       	ldd	r18, Z+7	; 0x07
   16d6a:	30 85       	ldd	r19, Z+8	; 0x08
   16d6c:	20 62       	ori	r18, 0x20	; 32
   16d6e:	30 87       	std	Z+8, r19	; 0x08
   16d70:	27 83       	std	Z+7, r18	; 0x07
   16d72:	04 97       	sbiw	r24, 0x04	; 4
   16d74:	c9 f0       	breq	.+50     	; 0x16da8 <amigo_send_logical_address+0x9c>
   16d76:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOs>
   16d7a:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOs+0x1>
   16d7e:	87 81       	ldd	r24, Z+7	; 0x07
   16d80:	90 85       	ldd	r25, Z+8	; 0x08
   16d82:	80 62       	ori	r24, 0x20	; 32
   16d84:	90 87       	std	Z+8, r25	; 0x08
   16d86:	87 83       	std	Z+7, r24	; 0x07
   16d88:	81 e0       	ldi	r24, 0x01	; 1
   16d8a:	86 83       	std	Z+6, r24	; 0x06
   16d8c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16d90:	80 ff       	sbrs	r24, 0
   16d92:	0a c0       	rjmp	.+20     	; 0x16da8 <amigo_send_logical_address+0x9c>
   16d94:	85 e7       	ldi	r24, 0x75	; 117
   16d96:	9f e2       	ldi	r25, 0x2F	; 47
   16d98:	1f 92       	push	r1
   16d9a:	9f 93       	push	r25
   16d9c:	8f 93       	push	r24
   16d9e:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   16da2:	0f 90       	pop	r0
   16da4:	0f 90       	pop	r0
   16da6:	0f 90       	pop	r0
   16da8:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <AMIGOp>
   16dac:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <AMIGOp+0x1>
   16db0:	81 81       	ldd	r24, Z+1	; 0x01
   16db2:	90 e0       	ldi	r25, 0x00	; 0
   16db4:	0e 94 94 86 	call	0x10d28	; 0x10d28 <gpib_enable_PPR>
   16db8:	89 81       	ldd	r24, Y+1	; 0x01
   16dba:	9a 81       	ldd	r25, Y+2	; 0x02
   16dbc:	88 27       	eor	r24, r24
   16dbe:	90 7d       	andi	r25, 0xD0	; 208
   16dc0:	22 96       	adiw	r28, 0x02	; 2
   16dc2:	e2 e0       	ldi	r30, 0x02	; 2
   16dc4:	0c 94 1f e6 	jmp	0x1cc3e	; 0x1cc3e <__epilogue_restores__+0x20>

00016dc8 <amigo_send_status>:
   16dc8:	a2 e0       	ldi	r26, 0x02	; 2
   16dca:	b0 e0       	ldi	r27, 0x00	; 0
   16dcc:	ea ee       	ldi	r30, 0xEA	; 234
   16dce:	f6 eb       	ldi	r31, 0xB6	; 182
   16dd0:	0c 94 03 e6 	jmp	0x1cc06	; 0x1cc06 <__prologue_saves__+0x20>
   16dd4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16dd8:	85 ff       	sbrs	r24, 5
   16dda:	0a c0       	rjmp	.+20     	; 0x16df0 <amigo_send_status+0x28>
   16ddc:	80 e6       	ldi	r24, 0x60	; 96
   16dde:	9f e2       	ldi	r25, 0x2F	; 47
   16de0:	1f 92       	push	r1
   16de2:	9f 93       	push	r25
   16de4:	8f 93       	push	r24
   16de6:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   16dea:	0f 90       	pop	r0
   16dec:	0f 90       	pop	r0
   16dee:	0f 90       	pop	r0
   16df0:	80 e0       	ldi	r24, 0x00	; 0
   16df2:	91 e0       	ldi	r25, 0x01	; 1
   16df4:	9a 83       	std	Y+2, r25	; 0x02
   16df6:	89 83       	std	Y+1, r24	; 0x01
   16df8:	80 91 67 18 	lds	r24, 0x1867	; 0x801867 <AMIGOs>
   16dfc:	90 91 68 18 	lds	r25, 0x1868	; 0x801868 <AMIGOs+0x1>
   16e00:	ae 01       	movw	r20, r28
   16e02:	4f 5f       	subi	r20, 0xFF	; 255
   16e04:	5f 4f       	sbci	r21, 0xFF	; 255
   16e06:	64 e0       	ldi	r22, 0x04	; 4
   16e08:	70 e0       	ldi	r23, 0x00	; 0
   16e0a:	09 96       	adiw	r24, 0x09	; 9
   16e0c:	0e 94 e4 8b 	call	0x117c8	; 0x117c8 <gpib_write_str>
   16e10:	29 81       	ldd	r18, Y+1	; 0x01
   16e12:	3a 81       	ldd	r19, Y+2	; 0x02
   16e14:	22 27       	eor	r18, r18
   16e16:	30 7d       	andi	r19, 0xD0	; 208
   16e18:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOs>
   16e1c:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOs+0x1>
   16e20:	23 2b       	or	r18, r19
   16e22:	29 f0       	breq	.+10     	; 0x16e2e <amigo_send_status+0x66>
   16e24:	27 81       	ldd	r18, Z+7	; 0x07
   16e26:	30 85       	ldd	r19, Z+8	; 0x08
   16e28:	20 62       	ori	r18, 0x20	; 32
   16e2a:	30 87       	std	Z+8, r19	; 0x08
   16e2c:	27 83       	std	Z+7, r18	; 0x07
   16e2e:	04 97       	sbiw	r24, 0x04	; 4
   16e30:	b1 f0       	breq	.+44     	; 0x16e5e <amigo_send_status+0x96>
   16e32:	87 81       	ldd	r24, Z+7	; 0x07
   16e34:	90 85       	ldd	r25, Z+8	; 0x08
   16e36:	80 62       	ori	r24, 0x20	; 32
   16e38:	90 87       	std	Z+8, r25	; 0x08
   16e3a:	87 83       	std	Z+7, r24	; 0x07
   16e3c:	81 e0       	ldi	r24, 0x01	; 1
   16e3e:	86 83       	std	Z+6, r24	; 0x06
   16e40:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16e44:	80 ff       	sbrs	r24, 0
   16e46:	0e c0       	rjmp	.+28     	; 0x16e64 <amigo_send_status+0x9c>
   16e48:	86 e4       	ldi	r24, 0x46	; 70
   16e4a:	9f e2       	ldi	r25, 0x2F	; 47
   16e4c:	1f 92       	push	r1
   16e4e:	9f 93       	push	r25
   16e50:	8f 93       	push	r24
   16e52:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   16e56:	0f 90       	pop	r0
   16e58:	0f 90       	pop	r0
   16e5a:	0f 90       	pop	r0
   16e5c:	03 c0       	rjmp	.+6      	; 0x16e64 <amigo_send_status+0x9c>
   16e5e:	10 86       	std	Z+8, r1	; 0x08
   16e60:	17 82       	std	Z+7, r1	; 0x07
   16e62:	16 82       	std	Z+6, r1	; 0x06
   16e64:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <AMIGOp>
   16e68:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <AMIGOp+0x1>
   16e6c:	81 81       	ldd	r24, Z+1	; 0x01
   16e6e:	90 e0       	ldi	r25, 0x00	; 0
   16e70:	0e 94 94 86 	call	0x10d28	; 0x10d28 <gpib_enable_PPR>
   16e74:	89 81       	ldd	r24, Y+1	; 0x01
   16e76:	9a 81       	ldd	r25, Y+2	; 0x02
   16e78:	88 27       	eor	r24, r24
   16e7a:	90 7d       	andi	r25, 0xD0	; 208
   16e7c:	22 96       	adiw	r28, 0x02	; 2
   16e7e:	e2 e0       	ldi	r30, 0x02	; 2
   16e80:	0c 94 1f e6 	jmp	0x1cc3e	; 0x1cc3e <__epilogue_restores__+0x20>

00016e84 <amigo_increment>:
   16e84:	a1 e1       	ldi	r26, 0x11	; 17
   16e86:	b0 e0       	ldi	r27, 0x00	; 0
   16e88:	e8 e4       	ldi	r30, 0x48	; 72
   16e8a:	f7 eb       	ldi	r31, 0xB7	; 183
   16e8c:	0c 94 03 e6 	jmp	0x1cc06	; 0x1cc06 <__prologue_saves__+0x20>
   16e90:	bc 01       	movw	r22, r24
   16e92:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOs>
   16e96:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOs+0x1>
   16e9a:	91 e1       	ldi	r25, 0x11	; 17
   16e9c:	de 01       	movw	r26, r28
   16e9e:	11 96       	adiw	r26, 0x01	; 1
   16ea0:	01 90       	ld	r0, Z+
   16ea2:	0d 92       	st	X+, r0
   16ea4:	9a 95       	dec	r25
   16ea6:	e1 f7       	brne	.-8      	; 0x16ea0 <amigo_increment+0x1c>
   16ea8:	9e 81       	ldd	r25, Y+6	; 0x06
   16eaa:	9f 5f       	subi	r25, 0xFF	; 255
   16eac:	9e 83       	std	Y+6, r25	; 0x06
   16eae:	ce 01       	movw	r24, r28
   16eb0:	01 96       	adiw	r24, 0x01	; 1
   16eb2:	c3 dd       	rcall	.-1146   	; 0x16a3a <amigo_overflow_check>
   16eb4:	00 97       	sbiw	r24, 0x00	; 0
   16eb6:	59 f4       	brne	.+22     	; 0x16ece <amigo_increment+0x4a>
   16eb8:	a0 91 67 18 	lds	r26, 0x1867	; 0x801867 <AMIGOs>
   16ebc:	b0 91 68 18 	lds	r27, 0x1868	; 0x801868 <AMIGOs+0x1>
   16ec0:	21 e1       	ldi	r18, 0x11	; 17
   16ec2:	fe 01       	movw	r30, r28
   16ec4:	31 96       	adiw	r30, 0x01	; 1
   16ec6:	01 90       	ld	r0, Z+
   16ec8:	0d 92       	st	X+, r0
   16eca:	2a 95       	dec	r18
   16ecc:	e1 f7       	brne	.-8      	; 0x16ec6 <amigo_increment+0x42>
   16ece:	61 96       	adiw	r28, 0x11	; 17
   16ed0:	e2 e0       	ldi	r30, 0x02	; 2
   16ed2:	0c 94 1f e6 	jmp	0x1cc3e	; 0x1cc3e <__epilogue_restores__+0x20>

00016ed6 <amigo_seek>:
   16ed6:	0f 93       	push	r16
   16ed8:	1f 93       	push	r17
   16eda:	cf 93       	push	r28
   16edc:	df 93       	push	r29
   16ede:	ec 01       	movw	r28, r24
   16ee0:	6b ed       	ldi	r22, 0xDB	; 219
   16ee2:	74 e1       	ldi	r23, 0x14	; 20
   16ee4:	aa dd       	rcall	.-1196   	; 0x16a3a <amigo_overflow_check>
   16ee6:	8c 01       	movw	r16, r24
   16ee8:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOs>
   16eec:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOs+0x1>
   16ef0:	89 2b       	or	r24, r25
   16ef2:	41 f0       	breq	.+16     	; 0x16f04 <amigo_seek+0x2e>
   16ef4:	81 e0       	ldi	r24, 0x01	; 1
   16ef6:	86 83       	std	Z+6, r24	; 0x06
   16ef8:	87 81       	ldd	r24, Z+7	; 0x07
   16efa:	90 85       	ldd	r25, Z+8	; 0x08
   16efc:	84 60       	ori	r24, 0x04	; 4
   16efe:	90 87       	std	Z+8, r25	; 0x08
   16f00:	87 83       	std	Z+7, r24	; 0x07
   16f02:	06 c0       	rjmp	.+12     	; 0x16f10 <amigo_seek+0x3a>
   16f04:	8d 81       	ldd	r24, Y+5	; 0x05
   16f06:	85 83       	std	Z+5, r24	; 0x05
   16f08:	8c 81       	ldd	r24, Y+4	; 0x04
   16f0a:	84 83       	std	Z+4, r24	; 0x04
   16f0c:	8b 81       	ldd	r24, Y+3	; 0x03
   16f0e:	83 83       	std	Z+3, r24	; 0x03
   16f10:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <AMIGOp>
   16f14:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <AMIGOp+0x1>
   16f18:	81 81       	ldd	r24, Z+1	; 0x01
   16f1a:	90 e0       	ldi	r25, 0x00	; 0
   16f1c:	0e 94 94 86 	call	0x10d28	; 0x10d28 <gpib_enable_PPR>
   16f20:	c8 01       	movw	r24, r16
   16f22:	df 91       	pop	r29
   16f24:	cf 91       	pop	r28
   16f26:	1f 91       	pop	r17
   16f28:	0f 91       	pop	r16
   16f2a:	08 95       	ret

00016f2c <amigo_verify>:
   16f2c:	8f 92       	push	r8
   16f2e:	9f 92       	push	r9
   16f30:	af 92       	push	r10
   16f32:	bf 92       	push	r11
   16f34:	ef 92       	push	r14
   16f36:	ff 92       	push	r15
   16f38:	0f 93       	push	r16
   16f3a:	1f 93       	push	r17
   16f3c:	cf 93       	push	r28
   16f3e:	df 93       	push	r29
   16f40:	7c 01       	movw	r14, r24
   16f42:	60 ee       	ldi	r22, 0xE0	; 224
   16f44:	74 e1       	ldi	r23, 0x14	; 20
   16f46:	80 91 67 18 	lds	r24, 0x1867	; 0x801867 <AMIGOs>
   16f4a:	90 91 68 18 	lds	r25, 0x1868	; 0x801868 <AMIGOs+0x1>
   16f4e:	c5 dd       	rcall	.-1142   	; 0x16ada <amigo_chs_to_logical>
   16f50:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   16f54:	25 ff       	sbrs	r18, 5
   16f56:	15 c0       	rjmp	.+42     	; 0x16f82 <amigo_verify+0x56>
   16f58:	ff 92       	push	r15
   16f5a:	ef 92       	push	r14
   16f5c:	9f 93       	push	r25
   16f5e:	8f 93       	push	r24
   16f60:	7f 93       	push	r23
   16f62:	6f 93       	push	r22
   16f64:	85 e0       	ldi	r24, 0x05	; 5
   16f66:	9f e2       	ldi	r25, 0x2F	; 47
   16f68:	1f 92       	push	r1
   16f6a:	9f 93       	push	r25
   16f6c:	8f 93       	push	r24
   16f6e:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   16f72:	8d b7       	in	r24, 0x3d	; 61
   16f74:	9e b7       	in	r25, 0x3e	; 62
   16f76:	09 96       	adiw	r24, 0x09	; 9
   16f78:	0f b6       	in	r0, 0x3f	; 63
   16f7a:	f8 94       	cli
   16f7c:	9e bf       	out	0x3e, r25	; 62
   16f7e:	0f be       	out	0x3f, r0	; 63
   16f80:	8d bf       	out	0x3d, r24	; 61
   16f82:	e7 01       	movw	r28, r14
   16f84:	20 97       	sbiw	r28, 0x00	; 0
   16f86:	09 f4       	brne	.+2      	; 0x16f8a <amigo_verify+0x5e>
   16f88:	49 c0       	rjmp	.+146    	; 0x1701c <amigo_verify+0xf0>
   16f8a:	6d ee       	ldi	r22, 0xED	; 237
   16f8c:	74 e1       	ldi	r23, 0x14	; 20
   16f8e:	80 91 67 18 	lds	r24, 0x1867	; 0x801867 <AMIGOs>
   16f92:	90 91 68 18 	lds	r25, 0x1868	; 0x801868 <AMIGOs+0x1>
   16f96:	a1 dd       	rcall	.-1214   	; 0x16ada <amigo_chs_to_logical>
   16f98:	4b 01       	movw	r8, r22
   16f9a:	5c 01       	movw	r10, r24
   16f9c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16fa0:	86 fd       	sbrc	r24, 6
   16fa2:	0e 94 dc 85 	call	0x10bb8	; 0x10bb8 <gpib_timer_elapsed_begin>
   16fa6:	80 91 69 18 	lds	r24, 0x1869	; 0x801869 <AMIGOp>
   16faa:	90 91 6a 18 	lds	r25, 0x186A	; 0x80186a <AMIGOp+0x1>
   16fae:	e0 90 67 18 	lds	r14, 0x1867	; 0x801867 <AMIGOs>
   16fb2:	f0 90 68 18 	lds	r15, 0x1868	; 0x801868 <AMIGOs+0x1>
   16fb6:	e7 e0       	ldi	r30, 0x07	; 7
   16fb8:	ee 0e       	add	r14, r30
   16fba:	f1 1c       	adc	r15, r1
   16fbc:	fc 01       	movw	r30, r24
   16fbe:	05 a1       	ldd	r16, Z+37	; 0x25
   16fc0:	16 a1       	ldd	r17, Z+38	; 0x26
   16fc2:	2a ee       	ldi	r18, 0xEA	; 234
   16fc4:	3b e1       	ldi	r19, 0x1B	; 27
   16fc6:	b5 01       	movw	r22, r10
   16fc8:	a4 01       	movw	r20, r8
   16fca:	02 96       	adiw	r24, 0x02	; 2
   16fcc:	0e 94 2e 85 	call	0x10a5c	; 0x10a5c <dbf_open_read>
   16fd0:	7c 01       	movw	r14, r24
   16fd2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16fd6:	86 ff       	sbrs	r24, 6
   16fd8:	04 c0       	rjmp	.+8      	; 0x16fe2 <amigo_verify+0xb6>
   16fda:	85 ef       	ldi	r24, 0xF5	; 245
   16fdc:	9f e0       	ldi	r25, 0x0F	; 15
   16fde:	0e 94 ee 85 	call	0x10bdc	; 0x10bdc <gpib_timer_elapsed_end>
   16fe2:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <AMIGOp>
   16fe6:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <AMIGOp+0x1>
   16fea:	85 a1       	ldd	r24, Z+37	; 0x25
   16fec:	96 a1       	ldd	r25, Z+38	; 0x26
   16fee:	e8 16       	cp	r14, r24
   16ff0:	f9 06       	cpc	r15, r25
   16ff2:	61 f0       	breq	.+24     	; 0x1700c <amigo_verify+0xe0>
   16ff4:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOs>
   16ff8:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOs+0x1>
   16ffc:	81 e0       	ldi	r24, 0x01	; 1
   16ffe:	86 83       	std	Z+6, r24	; 0x06
   17000:	87 81       	ldd	r24, Z+7	; 0x07
   17002:	90 85       	ldd	r25, Z+8	; 0x08
   17004:	81 60       	ori	r24, 0x01	; 1
   17006:	90 87       	std	Z+8, r25	; 0x08
   17008:	87 83       	std	Z+7, r24	; 0x07
   1700a:	0b c0       	rjmp	.+22     	; 0x17022 <amigo_verify+0xf6>
   1700c:	85 ef       	ldi	r24, 0xF5	; 245
   1700e:	94 e1       	ldi	r25, 0x14	; 20
   17010:	39 df       	rcall	.-398    	; 0x16e84 <amigo_increment>
   17012:	21 97       	sbiw	r28, 0x01	; 1
   17014:	89 2b       	or	r24, r25
   17016:	09 f4       	brne	.+2      	; 0x1701a <amigo_verify+0xee>
   17018:	b5 cf       	rjmp	.-150    	; 0x16f84 <amigo_verify+0x58>
   1701a:	03 c0       	rjmp	.+6      	; 0x17022 <amigo_verify+0xf6>
   1701c:	c0 e0       	ldi	r28, 0x00	; 0
   1701e:	d0 e0       	ldi	r29, 0x00	; 0
   17020:	02 c0       	rjmp	.+4      	; 0x17026 <amigo_verify+0xfa>
   17022:	c1 e0       	ldi	r28, 0x01	; 1
   17024:	d0 e0       	ldi	r29, 0x00	; 0
   17026:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <AMIGOp>
   1702a:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <AMIGOp+0x1>
   1702e:	81 81       	ldd	r24, Z+1	; 0x01
   17030:	90 e0       	ldi	r25, 0x00	; 0
   17032:	0e 94 94 86 	call	0x10d28	; 0x10d28 <gpib_enable_PPR>
   17036:	ce 01       	movw	r24, r28
   17038:	df 91       	pop	r29
   1703a:	cf 91       	pop	r28
   1703c:	1f 91       	pop	r17
   1703e:	0f 91       	pop	r16
   17040:	ff 90       	pop	r15
   17042:	ef 90       	pop	r14
   17044:	bf 90       	pop	r11
   17046:	af 90       	pop	r10
   17048:	9f 90       	pop	r9
   1704a:	8f 90       	pop	r8
   1704c:	08 95       	ret

0001704e <amigo_format>:
   1704e:	ef 92       	push	r14
   17050:	ff 92       	push	r15
   17052:	0f 93       	push	r16
   17054:	1f 93       	push	r17
   17056:	cf 93       	push	r28
   17058:	df 93       	push	r29
   1705a:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOs>
   1705e:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOs+0x1>
   17062:	15 82       	std	Z+5, r1	; 0x05
   17064:	14 82       	std	Z+4, r1	; 0x04
   17066:	13 82       	std	Z+3, r1	; 0x03
   17068:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <AMIGOp>
   1706c:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <AMIGOp+0x1>
   17070:	45 a1       	ldd	r20, Z+37	; 0x25
   17072:	56 a1       	ldd	r21, Z+38	; 0x26
   17074:	68 2f       	mov	r22, r24
   17076:	70 e0       	ldi	r23, 0x00	; 0
   17078:	8a ee       	ldi	r24, 0xEA	; 234
   1707a:	9b e1       	ldi	r25, 0x1B	; 27
   1707c:	0e 94 c3 ea 	call	0x1d586	; 0x1d586 <memset>
   17080:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17084:	85 ff       	sbrs	r24, 5
   17086:	0a c0       	rjmp	.+20     	; 0x1709c <amigo_format+0x4e>
   17088:	8a ec       	ldi	r24, 0xCA	; 202
   1708a:	9e e2       	ldi	r25, 0x2E	; 46
   1708c:	1f 92       	push	r1
   1708e:	9f 93       	push	r25
   17090:	8f 93       	push	r24
   17092:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   17096:	0f 90       	pop	r0
   17098:	0f 90       	pop	r0
   1709a:	0f 90       	pop	r0
   1709c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   170a0:	86 fd       	sbrc	r24, 6
   170a2:	0e 94 dc 85 	call	0x10bb8	; 0x10bb8 <gpib_timer_elapsed_begin>
   170a6:	6c ef       	ldi	r22, 0xFC	; 252
   170a8:	74 e1       	ldi	r23, 0x14	; 20
   170aa:	80 91 67 18 	lds	r24, 0x1867	; 0x801867 <AMIGOs>
   170ae:	90 91 68 18 	lds	r25, 0x1868	; 0x801868 <AMIGOs+0x1>
   170b2:	13 dd       	rcall	.-1498   	; 0x16ada <amigo_chs_to_logical>
   170b4:	ab 01       	movw	r20, r22
   170b6:	bc 01       	movw	r22, r24
   170b8:	80 91 69 18 	lds	r24, 0x1869	; 0x801869 <AMIGOp>
   170bc:	90 91 6a 18 	lds	r25, 0x186A	; 0x80186a <AMIGOp+0x1>
   170c0:	e0 90 67 18 	lds	r14, 0x1867	; 0x801867 <AMIGOs>
   170c4:	f0 90 68 18 	lds	r15, 0x1868	; 0x801868 <AMIGOs+0x1>
   170c8:	27 e0       	ldi	r18, 0x07	; 7
   170ca:	e2 0e       	add	r14, r18
   170cc:	f1 1c       	adc	r15, r1
   170ce:	fc 01       	movw	r30, r24
   170d0:	05 a1       	ldd	r16, Z+37	; 0x25
   170d2:	16 a1       	ldd	r17, Z+38	; 0x26
   170d4:	2a ee       	ldi	r18, 0xEA	; 234
   170d6:	3b e1       	ldi	r19, 0x1B	; 27
   170d8:	02 96       	adiw	r24, 0x02	; 2
   170da:	0e 94 85 85 	call	0x10b0a	; 0x10b0a <dbf_open_write>
   170de:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <AMIGOp>
   170e2:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <AMIGOp+0x1>
   170e6:	25 a1       	ldd	r18, Z+37	; 0x25
   170e8:	36 a1       	ldd	r19, Z+38	; 0x26
   170ea:	82 17       	cp	r24, r18
   170ec:	93 07       	cpc	r25, r19
   170ee:	71 f0       	breq	.+28     	; 0x1710c <amigo_format+0xbe>
   170f0:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOs>
   170f4:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOs+0x1>
   170f8:	87 81       	ldd	r24, Z+7	; 0x07
   170fa:	90 85       	ldd	r25, Z+8	; 0x08
   170fc:	82 60       	ori	r24, 0x02	; 2
   170fe:	90 87       	std	Z+8, r25	; 0x08
   17100:	87 83       	std	Z+7, r24	; 0x07
   17102:	81 e0       	ldi	r24, 0x01	; 1
   17104:	86 83       	std	Z+6, r24	; 0x06
   17106:	c1 e0       	ldi	r28, 0x01	; 1
   17108:	d0 e0       	ldi	r29, 0x00	; 0
   1710a:	0f c0       	rjmp	.+30     	; 0x1712a <amigo_format+0xdc>
   1710c:	80 e0       	ldi	r24, 0x00	; 0
   1710e:	90 e0       	ldi	r25, 0x00	; 0
   17110:	b9 de       	rcall	.-654    	; 0x16e84 <amigo_increment>
   17112:	89 2b       	or	r24, r25
   17114:	41 f2       	breq	.-112    	; 0x170a6 <amigo_format+0x58>
   17116:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOs>
   1711a:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOs+0x1>
   1711e:	15 82       	std	Z+5, r1	; 0x05
   17120:	14 82       	std	Z+4, r1	; 0x04
   17122:	13 82       	std	Z+3, r1	; 0x03
   17124:	16 82       	std	Z+6, r1	; 0x06
   17126:	c0 e0       	ldi	r28, 0x00	; 0
   17128:	d0 e0       	ldi	r29, 0x00	; 0
   1712a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1712e:	86 ff       	sbrs	r24, 6
   17130:	04 c0       	rjmp	.+8      	; 0x1713a <amigo_format+0xec>
   17132:	8c ef       	ldi	r24, 0xFC	; 252
   17134:	94 e1       	ldi	r25, 0x14	; 20
   17136:	0e 94 ee 85 	call	0x10bdc	; 0x10bdc <gpib_timer_elapsed_end>
   1713a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1713e:	85 ff       	sbrs	r24, 5
   17140:	0a c0       	rjmp	.+20     	; 0x17156 <amigo_format+0x108>
   17142:	85 eb       	ldi	r24, 0xB5	; 181
   17144:	9e e2       	ldi	r25, 0x2E	; 46
   17146:	1f 92       	push	r1
   17148:	9f 93       	push	r25
   1714a:	8f 93       	push	r24
   1714c:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   17150:	0f 90       	pop	r0
   17152:	0f 90       	pop	r0
   17154:	0f 90       	pop	r0
   17156:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <AMIGOp>
   1715a:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <AMIGOp+0x1>
   1715e:	81 81       	ldd	r24, Z+1	; 0x01
   17160:	90 e0       	ldi	r25, 0x00	; 0
   17162:	0e 94 94 86 	call	0x10d28	; 0x10d28 <gpib_enable_PPR>
   17166:	ce 01       	movw	r24, r28
   17168:	cd b7       	in	r28, 0x3d	; 61
   1716a:	de b7       	in	r29, 0x3e	; 62
   1716c:	e6 e0       	ldi	r30, 0x06	; 6
   1716e:	0c 94 1b e6 	jmp	0x1cc36	; 0x1cc36 <__epilogue_restores__+0x18>

00017172 <amigo_buffered_read>:
   17172:	8f 92       	push	r8
   17174:	9f 92       	push	r9
   17176:	af 92       	push	r10
   17178:	bf 92       	push	r11
   1717a:	ef 92       	push	r14
   1717c:	ff 92       	push	r15
   1717e:	0f 93       	push	r16
   17180:	1f 93       	push	r17
   17182:	cf 93       	push	r28
   17184:	df 93       	push	r29
   17186:	00 d0       	rcall	.+0      	; 0x17188 <amigo_buffered_read+0x16>
   17188:	cd b7       	in	r28, 0x3d	; 61
   1718a:	de b7       	in	r29, 0x3e	; 62
   1718c:	63 e0       	ldi	r22, 0x03	; 3
   1718e:	75 e1       	ldi	r23, 0x15	; 21
   17190:	80 91 67 18 	lds	r24, 0x1867	; 0x801867 <AMIGOs>
   17194:	90 91 68 18 	lds	r25, 0x1868	; 0x801868 <AMIGOs+0x1>
   17198:	a0 dc       	rcall	.-1728   	; 0x16ada <amigo_chs_to_logical>
   1719a:	4b 01       	movw	r8, r22
   1719c:	5c 01       	movw	r10, r24
   1719e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   171a2:	86 fd       	sbrc	r24, 6
   171a4:	0e 94 dc 85 	call	0x10bb8	; 0x10bb8 <gpib_timer_elapsed_begin>
   171a8:	80 91 69 18 	lds	r24, 0x1869	; 0x801869 <AMIGOp>
   171ac:	90 91 6a 18 	lds	r25, 0x186A	; 0x80186a <AMIGOp+0x1>
   171b0:	e0 90 67 18 	lds	r14, 0x1867	; 0x801867 <AMIGOs>
   171b4:	f0 90 68 18 	lds	r15, 0x1868	; 0x801868 <AMIGOs+0x1>
   171b8:	27 e0       	ldi	r18, 0x07	; 7
   171ba:	e2 0e       	add	r14, r18
   171bc:	f1 1c       	adc	r15, r1
   171be:	fc 01       	movw	r30, r24
   171c0:	05 a1       	ldd	r16, Z+37	; 0x25
   171c2:	16 a1       	ldd	r17, Z+38	; 0x26
   171c4:	2a ee       	ldi	r18, 0xEA	; 234
   171c6:	3b e1       	ldi	r19, 0x1B	; 27
   171c8:	b5 01       	movw	r22, r10
   171ca:	a4 01       	movw	r20, r8
   171cc:	02 96       	adiw	r24, 0x02	; 2
   171ce:	0e 94 2e 85 	call	0x10a5c	; 0x10a5c <dbf_open_read>
   171d2:	7c 01       	movw	r14, r24
   171d4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   171d8:	86 ff       	sbrs	r24, 6
   171da:	04 c0       	rjmp	.+8      	; 0x171e4 <amigo_buffered_read+0x72>
   171dc:	85 ef       	ldi	r24, 0xF5	; 245
   171de:	9f e0       	ldi	r25, 0x0F	; 15
   171e0:	0e 94 ee 85 	call	0x10bdc	; 0x10bdc <gpib_timer_elapsed_end>
   171e4:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <AMIGOp>
   171e8:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <AMIGOp+0x1>
   171ec:	85 a1       	ldd	r24, Z+37	; 0x25
   171ee:	96 a1       	ldd	r25, Z+38	; 0x26
   171f0:	e8 16       	cp	r14, r24
   171f2:	f9 06       	cpc	r15, r25
   171f4:	39 f0       	breq	.+14     	; 0x17204 <amigo_buffered_read+0x92>
   171f6:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOs>
   171fa:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOs+0x1>
   171fe:	81 e0       	ldi	r24, 0x01	; 1
   17200:	86 83       	std	Z+6, r24	; 0x06
   17202:	6c c0       	rjmp	.+216    	; 0x172dc <amigo_buffered_read+0x16a>
   17204:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17208:	87 fd       	sbrc	r24, 7
   1720a:	0e 94 dc 85 	call	0x10bb8	; 0x10bb8 <gpib_timer_elapsed_begin>
   1720e:	80 e0       	ldi	r24, 0x00	; 0
   17210:	91 e0       	ldi	r25, 0x01	; 1
   17212:	9a 83       	std	Y+2, r25	; 0x02
   17214:	89 83       	std	Y+1, r24	; 0x01
   17216:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <AMIGOp>
   1721a:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <AMIGOp+0x1>
   1721e:	65 a1       	ldd	r22, Z+37	; 0x25
   17220:	76 a1       	ldd	r23, Z+38	; 0x26
   17222:	ae 01       	movw	r20, r28
   17224:	4f 5f       	subi	r20, 0xFF	; 255
   17226:	5f 4f       	sbci	r21, 0xFF	; 255
   17228:	8a ee       	ldi	r24, 0xEA	; 234
   1722a:	9b e1       	ldi	r25, 0x1B	; 27
   1722c:	0e 94 e4 8b 	call	0x117c8	; 0x117c8 <gpib_write_str>
   17230:	7c 01       	movw	r14, r24
   17232:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17236:	87 ff       	sbrs	r24, 7
   17238:	04 c0       	rjmp	.+8      	; 0x17242 <amigo_buffered_read+0xd0>
   1723a:	81 e1       	ldi	r24, 0x11	; 17
   1723c:	95 e1       	ldi	r25, 0x15	; 21
   1723e:	0e 94 ee 85 	call	0x10bdc	; 0x10bdc <gpib_timer_elapsed_end>
   17242:	89 81       	ldd	r24, Y+1	; 0x01
   17244:	9a 81       	ldd	r25, Y+2	; 0x02
   17246:	88 27       	eor	r24, r24
   17248:	90 7d       	andi	r25, 0xD0	; 208
   1724a:	89 2b       	or	r24, r25
   1724c:	49 f4       	brne	.+18     	; 0x17260 <amigo_buffered_read+0xee>
   1724e:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <AMIGOp>
   17252:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <AMIGOp+0x1>
   17256:	85 a1       	ldd	r24, Z+37	; 0x25
   17258:	96 a1       	ldd	r25, Z+38	; 0x26
   1725a:	e8 16       	cp	r14, r24
   1725c:	f9 06       	cpc	r15, r25
   1725e:	31 f1       	breq	.+76     	; 0x172ac <amigo_buffered_read+0x13a>
   17260:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOs>
   17264:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOs+0x1>
   17268:	81 e0       	ldi	r24, 0x01	; 1
   1726a:	86 83       	std	Z+6, r24	; 0x06
   1726c:	87 81       	ldd	r24, Z+7	; 0x07
   1726e:	90 85       	ldd	r25, Z+8	; 0x08
   17270:	80 62       	ori	r24, 0x20	; 32
   17272:	90 87       	std	Z+8, r25	; 0x08
   17274:	87 83       	std	Z+7, r24	; 0x07
   17276:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1727a:	80 ff       	sbrs	r24, 0
   1727c:	0a c0       	rjmp	.+20     	; 0x17292 <amigo_buffered_read+0x120>
   1727e:	8b e9       	ldi	r24, 0x9B	; 155
   17280:	9e e2       	ldi	r25, 0x2E	; 46
   17282:	1f 92       	push	r1
   17284:	9f 93       	push	r25
   17286:	8f 93       	push	r24
   17288:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1728c:	0f 90       	pop	r0
   1728e:	0f 90       	pop	r0
   17290:	0f 90       	pop	r0
   17292:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <AMIGOp>
   17296:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <AMIGOp+0x1>
   1729a:	81 81       	ldd	r24, Z+1	; 0x01
   1729c:	90 e0       	ldi	r25, 0x00	; 0
   1729e:	0e 94 94 86 	call	0x10d28	; 0x10d28 <gpib_enable_PPR>
   172a2:	89 81       	ldd	r24, Y+1	; 0x01
   172a4:	9a 81       	ldd	r25, Y+2	; 0x02
   172a6:	88 27       	eor	r24, r24
   172a8:	90 7d       	andi	r25, 0xD0	; 208
   172aa:	1a c0       	rjmp	.+52     	; 0x172e0 <amigo_buffered_read+0x16e>
   172ac:	83 e0       	ldi	r24, 0x03	; 3
   172ae:	95 e1       	ldi	r25, 0x15	; 21
   172b0:	e9 dd       	rcall	.-1070   	; 0x16e84 <amigo_increment>
   172b2:	89 2b       	or	r24, r25
   172b4:	59 f0       	breq	.+22     	; 0x172cc <amigo_buffered_read+0x15a>
   172b6:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOs>
   172ba:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOs+0x1>
   172be:	81 e0       	ldi	r24, 0x01	; 1
   172c0:	86 83       	std	Z+6, r24	; 0x06
   172c2:	87 81       	ldd	r24, Z+7	; 0x07
   172c4:	90 85       	ldd	r25, Z+8	; 0x08
   172c6:	84 60       	ori	r24, 0x04	; 4
   172c8:	90 87       	std	Z+8, r25	; 0x08
   172ca:	87 83       	std	Z+7, r24	; 0x07
   172cc:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <AMIGOp>
   172d0:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <AMIGOp+0x1>
   172d4:	81 81       	ldd	r24, Z+1	; 0x01
   172d6:	90 e0       	ldi	r25, 0x00	; 0
   172d8:	0e 94 94 86 	call	0x10d28	; 0x10d28 <gpib_enable_PPR>
   172dc:	80 e0       	ldi	r24, 0x00	; 0
   172de:	90 e0       	ldi	r25, 0x00	; 0
   172e0:	0f 90       	pop	r0
   172e2:	0f 90       	pop	r0
   172e4:	df 91       	pop	r29
   172e6:	cf 91       	pop	r28
   172e8:	1f 91       	pop	r17
   172ea:	0f 91       	pop	r16
   172ec:	ff 90       	pop	r15
   172ee:	ef 90       	pop	r14
   172f0:	bf 90       	pop	r11
   172f2:	af 90       	pop	r10
   172f4:	9f 90       	pop	r9
   172f6:	8f 90       	pop	r8
   172f8:	08 95       	ret

000172fa <amigo_buffered_write>:
   172fa:	8f 92       	push	r8
   172fc:	9f 92       	push	r9
   172fe:	af 92       	push	r10
   17300:	bf 92       	push	r11
   17302:	ef 92       	push	r14
   17304:	ff 92       	push	r15
   17306:	0f 93       	push	r16
   17308:	1f 93       	push	r17
   1730a:	cf 93       	push	r28
   1730c:	df 93       	push	r29
   1730e:	00 d0       	rcall	.+0      	; 0x17310 <amigo_buffered_write+0x16>
   17310:	cd b7       	in	r28, 0x3d	; 61
   17312:	de b7       	in	r29, 0x3e	; 62
   17314:	6c e1       	ldi	r22, 0x1C	; 28
   17316:	75 e1       	ldi	r23, 0x15	; 21
   17318:	80 91 67 18 	lds	r24, 0x1867	; 0x801867 <AMIGOs>
   1731c:	90 91 68 18 	lds	r25, 0x1868	; 0x801868 <AMIGOs+0x1>
   17320:	dc db       	rcall	.-2120   	; 0x16ada <amigo_chs_to_logical>
   17322:	4b 01       	movw	r8, r22
   17324:	5c 01       	movw	r10, r24
   17326:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1732a:	87 fd       	sbrc	r24, 7
   1732c:	0e 94 dc 85 	call	0x10bb8	; 0x10bb8 <gpib_timer_elapsed_begin>
   17330:	1a 82       	std	Y+2, r1	; 0x02
   17332:	19 82       	std	Y+1, r1	; 0x01
   17334:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <AMIGOp>
   17338:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <AMIGOp+0x1>
   1733c:	65 a1       	ldd	r22, Z+37	; 0x25
   1733e:	76 a1       	ldd	r23, Z+38	; 0x26
   17340:	ae 01       	movw	r20, r28
   17342:	4f 5f       	subi	r20, 0xFF	; 255
   17344:	5f 4f       	sbci	r21, 0xFF	; 255
   17346:	8a ee       	ldi	r24, 0xEA	; 234
   17348:	9b e1       	ldi	r25, 0x1B	; 27
   1734a:	0e 94 36 8b 	call	0x1166c	; 0x1166c <gpib_read_str>
   1734e:	7c 01       	movw	r14, r24
   17350:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17354:	87 ff       	sbrs	r24, 7
   17356:	04 c0       	rjmp	.+8      	; 0x17360 <amigo_buffered_write+0x66>
   17358:	8b e2       	ldi	r24, 0x2B	; 43
   1735a:	95 e1       	ldi	r25, 0x15	; 21
   1735c:	0e 94 ee 85 	call	0x10bdc	; 0x10bdc <gpib_timer_elapsed_end>
   17360:	89 81       	ldd	r24, Y+1	; 0x01
   17362:	9a 81       	ldd	r25, Y+2	; 0x02
   17364:	88 27       	eor	r24, r24
   17366:	90 7d       	andi	r25, 0xD0	; 208
   17368:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1736c:	89 2b       	or	r24, r25
   1736e:	49 f4       	brne	.+18     	; 0x17382 <amigo_buffered_write+0x88>
   17370:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <AMIGOp>
   17374:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <AMIGOp+0x1>
   17378:	85 a1       	ldd	r24, Z+37	; 0x25
   1737a:	96 a1       	ldd	r25, Z+38	; 0x26
   1737c:	e8 16       	cp	r14, r24
   1737e:	f9 06       	cpc	r15, r25
   17380:	c1 f0       	breq	.+48     	; 0x173b2 <amigo_buffered_write+0xb8>
   17382:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOs>
   17386:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOs+0x1>
   1738a:	81 e0       	ldi	r24, 0x01	; 1
   1738c:	86 83       	std	Z+6, r24	; 0x06
   1738e:	87 81       	ldd	r24, Z+7	; 0x07
   17390:	90 85       	ldd	r25, Z+8	; 0x08
   17392:	80 62       	ori	r24, 0x20	; 32
   17394:	90 87       	std	Z+8, r25	; 0x08
   17396:	87 83       	std	Z+7, r24	; 0x07
   17398:	20 ff       	sbrs	r18, 0
   1739a:	4e c0       	rjmp	.+156    	; 0x17438 <amigo_buffered_write+0x13e>
   1739c:	8c e7       	ldi	r24, 0x7C	; 124
   1739e:	9e e2       	ldi	r25, 0x2E	; 46
   173a0:	1f 92       	push	r1
   173a2:	9f 93       	push	r25
   173a4:	8f 93       	push	r24
   173a6:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   173aa:	0f 90       	pop	r0
   173ac:	0f 90       	pop	r0
   173ae:	0f 90       	pop	r0
   173b0:	43 c0       	rjmp	.+134    	; 0x17438 <amigo_buffered_write+0x13e>
   173b2:	26 fd       	sbrc	r18, 6
   173b4:	0e 94 dc 85 	call	0x10bb8	; 0x10bb8 <gpib_timer_elapsed_begin>
   173b8:	80 91 69 18 	lds	r24, 0x1869	; 0x801869 <AMIGOp>
   173bc:	90 91 6a 18 	lds	r25, 0x186A	; 0x80186a <AMIGOp+0x1>
   173c0:	e0 90 67 18 	lds	r14, 0x1867	; 0x801867 <AMIGOs>
   173c4:	f0 90 68 18 	lds	r15, 0x1868	; 0x801868 <AMIGOs+0x1>
   173c8:	27 e0       	ldi	r18, 0x07	; 7
   173ca:	e2 0e       	add	r14, r18
   173cc:	f1 1c       	adc	r15, r1
   173ce:	fc 01       	movw	r30, r24
   173d0:	05 a1       	ldd	r16, Z+37	; 0x25
   173d2:	16 a1       	ldd	r17, Z+38	; 0x26
   173d4:	2a ee       	ldi	r18, 0xEA	; 234
   173d6:	3b e1       	ldi	r19, 0x1B	; 27
   173d8:	b5 01       	movw	r22, r10
   173da:	a4 01       	movw	r20, r8
   173dc:	02 96       	adiw	r24, 0x02	; 2
   173de:	0e 94 85 85 	call	0x10b0a	; 0x10b0a <dbf_open_write>
   173e2:	7c 01       	movw	r14, r24
   173e4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   173e8:	86 ff       	sbrs	r24, 6
   173ea:	04 c0       	rjmp	.+8      	; 0x173f4 <amigo_buffered_write+0xfa>
   173ec:	8a ee       	ldi	r24, 0xEA	; 234
   173ee:	9f e0       	ldi	r25, 0x0F	; 15
   173f0:	0e 94 ee 85 	call	0x10bdc	; 0x10bdc <gpib_timer_elapsed_end>
   173f4:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <AMIGOp>
   173f8:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <AMIGOp+0x1>
   173fc:	85 a1       	ldd	r24, Z+37	; 0x25
   173fe:	96 a1       	ldd	r25, Z+38	; 0x26
   17400:	e8 16       	cp	r14, r24
   17402:	f9 06       	cpc	r15, r25
   17404:	49 f0       	breq	.+18     	; 0x17418 <amigo_buffered_write+0x11e>
   17406:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOs>
   1740a:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOs+0x1>
   1740e:	81 e0       	ldi	r24, 0x01	; 1
   17410:	86 83       	std	Z+6, r24	; 0x06
   17412:	80 e0       	ldi	r24, 0x00	; 0
   17414:	90 e0       	ldi	r25, 0x00	; 0
   17416:	1c c0       	rjmp	.+56     	; 0x17450 <amigo_buffered_write+0x156>
   17418:	8c e1       	ldi	r24, 0x1C	; 28
   1741a:	95 e1       	ldi	r25, 0x15	; 21
   1741c:	33 dd       	rcall	.-1434   	; 0x16e84 <amigo_increment>
   1741e:	89 2b       	or	r24, r25
   17420:	59 f0       	breq	.+22     	; 0x17438 <amigo_buffered_write+0x13e>
   17422:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOs>
   17426:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOs+0x1>
   1742a:	81 e0       	ldi	r24, 0x01	; 1
   1742c:	86 83       	std	Z+6, r24	; 0x06
   1742e:	87 81       	ldd	r24, Z+7	; 0x07
   17430:	90 85       	ldd	r25, Z+8	; 0x08
   17432:	84 60       	ori	r24, 0x04	; 4
   17434:	90 87       	std	Z+8, r25	; 0x08
   17436:	87 83       	std	Z+7, r24	; 0x07
   17438:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <AMIGOp>
   1743c:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <AMIGOp+0x1>
   17440:	81 81       	ldd	r24, Z+1	; 0x01
   17442:	90 e0       	ldi	r25, 0x00	; 0
   17444:	0e 94 94 86 	call	0x10d28	; 0x10d28 <gpib_enable_PPR>
   17448:	89 81       	ldd	r24, Y+1	; 0x01
   1744a:	9a 81       	ldd	r25, Y+2	; 0x02
   1744c:	88 27       	eor	r24, r24
   1744e:	90 7d       	andi	r25, 0xD0	; 208
   17450:	0f 90       	pop	r0
   17452:	0f 90       	pop	r0
   17454:	df 91       	pop	r29
   17456:	cf 91       	pop	r28
   17458:	1f 91       	pop	r17
   1745a:	0f 91       	pop	r16
   1745c:	ff 90       	pop	r15
   1745e:	ef 90       	pop	r14
   17460:	bf 90       	pop	r11
   17462:	af 90       	pop	r10
   17464:	9f 90       	pop	r9
   17466:	8f 90       	pop	r8
   17468:	08 95       	ret

0001746a <amigo_cmd_dsj>:
   1746a:	a3 e0       	ldi	r26, 0x03	; 3
   1746c:	b0 e0       	ldi	r27, 0x00	; 0
   1746e:	eb e3       	ldi	r30, 0x3B	; 59
   17470:	fa eb       	ldi	r31, 0xBA	; 186
   17472:	0c 94 03 e6 	jmp	0x1cc06	; 0x1cc06 <__prologue_saves__+0x20>
   17476:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOs>
   1747a:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOs+0x1>
   1747e:	86 81       	ldd	r24, Z+6	; 0x06
   17480:	8b 83       	std	Y+3, r24	; 0x03
   17482:	80 e0       	ldi	r24, 0x00	; 0
   17484:	91 e0       	ldi	r25, 0x01	; 1
   17486:	9a 83       	std	Y+2, r25	; 0x02
   17488:	89 83       	std	Y+1, r24	; 0x01
   1748a:	ae 01       	movw	r20, r28
   1748c:	4f 5f       	subi	r20, 0xFF	; 255
   1748e:	5f 4f       	sbci	r21, 0xFF	; 255
   17490:	61 e0       	ldi	r22, 0x01	; 1
   17492:	70 e0       	ldi	r23, 0x00	; 0
   17494:	ce 01       	movw	r24, r28
   17496:	03 96       	adiw	r24, 0x03	; 3
   17498:	0e 94 e4 8b 	call	0x117c8	; 0x117c8 <gpib_write_str>
   1749c:	29 81       	ldd	r18, Y+1	; 0x01
   1749e:	3a 81       	ldd	r19, Y+2	; 0x02
   174a0:	22 27       	eor	r18, r18
   174a2:	30 7d       	andi	r19, 0xD0	; 208
   174a4:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOs>
   174a8:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOs+0x1>
   174ac:	23 2b       	or	r18, r19
   174ae:	29 f0       	breq	.+10     	; 0x174ba <amigo_cmd_dsj+0x50>
   174b0:	27 81       	ldd	r18, Z+7	; 0x07
   174b2:	30 85       	ldd	r19, Z+8	; 0x08
   174b4:	20 62       	ori	r18, 0x20	; 32
   174b6:	30 87       	std	Z+8, r19	; 0x08
   174b8:	27 83       	std	Z+7, r18	; 0x07
   174ba:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   174be:	01 97       	sbiw	r24, 0x01	; 1
   174c0:	c1 f0       	breq	.+48     	; 0x174f2 <amigo_cmd_dsj+0x88>
   174c2:	81 e0       	ldi	r24, 0x01	; 1
   174c4:	86 83       	std	Z+6, r24	; 0x06
   174c6:	87 81       	ldd	r24, Z+7	; 0x07
   174c8:	90 85       	ldd	r25, Z+8	; 0x08
   174ca:	80 62       	ori	r24, 0x20	; 32
   174cc:	90 87       	std	Z+8, r25	; 0x08
   174ce:	87 83       	std	Z+7, r24	; 0x07
   174d0:	20 ff       	sbrs	r18, 0
   174d2:	0a c0       	rjmp	.+20     	; 0x174e8 <amigo_cmd_dsj+0x7e>
   174d4:	82 e6       	ldi	r24, 0x62	; 98
   174d6:	9e e2       	ldi	r25, 0x2E	; 46
   174d8:	1f 92       	push	r1
   174da:	9f 93       	push	r25
   174dc:	8f 93       	push	r24
   174de:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   174e2:	0f 90       	pop	r0
   174e4:	0f 90       	pop	r0
   174e6:	0f 90       	pop	r0
   174e8:	89 81       	ldd	r24, Y+1	; 0x01
   174ea:	9a 81       	ldd	r25, Y+2	; 0x02
   174ec:	88 27       	eor	r24, r24
   174ee:	90 7d       	andi	r25, 0xD0	; 208
   174f0:	1a c0       	rjmp	.+52     	; 0x17526 <amigo_cmd_dsj+0xbc>
   174f2:	25 ff       	sbrs	r18, 5
   174f4:	0f c0       	rjmp	.+30     	; 0x17514 <amigo_cmd_dsj+0xaa>
   174f6:	86 81       	ldd	r24, Z+6	; 0x06
   174f8:	1f 92       	push	r1
   174fa:	8f 93       	push	r24
   174fc:	85 e5       	ldi	r24, 0x55	; 85
   174fe:	9e e2       	ldi	r25, 0x2E	; 46
   17500:	1f 92       	push	r1
   17502:	9f 93       	push	r25
   17504:	8f 93       	push	r24
   17506:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1750a:	0f 90       	pop	r0
   1750c:	0f 90       	pop	r0
   1750e:	0f 90       	pop	r0
   17510:	0f 90       	pop	r0
   17512:	0f 90       	pop	r0
   17514:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOs>
   17518:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOs+0x1>
   1751c:	16 82       	std	Z+6, r1	; 0x06
   1751e:	10 86       	std	Z+8, r1	; 0x08
   17520:	17 82       	std	Z+7, r1	; 0x07
   17522:	80 e0       	ldi	r24, 0x00	; 0
   17524:	90 e0       	ldi	r25, 0x00	; 0
   17526:	23 96       	adiw	r28, 0x03	; 3
   17528:	e2 e0       	ldi	r30, 0x02	; 2
   1752a:	0c 94 1f e6 	jmp	0x1cc3e	; 0x1cc3e <__epilogue_restores__+0x20>

0001752e <amigo_cmd_clear>:
   1752e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17532:	85 ff       	sbrs	r24, 5
   17534:	0a c0       	rjmp	.+20     	; 0x1754a <amigo_cmd_clear+0x1c>
   17536:	8c e1       	ldi	r24, 0x1C	; 28
   17538:	9e e2       	ldi	r25, 0x2E	; 46
   1753a:	1f 92       	push	r1
   1753c:	9f 93       	push	r25
   1753e:	8f 93       	push	r24
   17540:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   17544:	0f 90       	pop	r0
   17546:	0f 90       	pop	r0
   17548:	0f 90       	pop	r0
   1754a:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOs>
   1754e:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOs+0x1>
   17552:	15 82       	std	Z+5, r1	; 0x05
   17554:	14 82       	std	Z+4, r1	; 0x04
   17556:	13 82       	std	Z+3, r1	; 0x03
   17558:	16 82       	std	Z+6, r1	; 0x06
   1755a:	10 86       	std	Z+8, r1	; 0x08
   1755c:	17 82       	std	Z+7, r1	; 0x07
   1755e:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <AMIGOp>
   17562:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <AMIGOp+0x1>
   17566:	81 81       	ldd	r24, Z+1	; 0x01
   17568:	90 e0       	ldi	r25, 0x00	; 0
   1756a:	0e 94 94 86 	call	0x10d28	; 0x10d28 <gpib_enable_PPR>
   1756e:	80 e0       	ldi	r24, 0x00	; 0
   17570:	90 e0       	ldi	r25, 0x00	; 0
   17572:	08 95       	ret

00017574 <amigo_todo_op>:
/// @param[in] opcode: GPIB data byte OP Code
/// @param[in] len: Length of GOIB data returned
/// @return  0

int amigo_todo_op(uint8_t secondary, uint8_t opcode, int len)
{
   17574:	0f 93       	push	r16
   17576:	1f 93       	push	r17
   17578:	cf 93       	push	r28
   1757a:	df 93       	push	r29
   1757c:	c8 2f       	mov	r28, r24
   1757e:	d6 2f       	mov	r29, r22
   17580:	14 2f       	mov	r17, r20
   17582:	05 2f       	mov	r16, r21
    if(AMIGO_is_MLA(listening))
   17584:	80 91 f0 1d 	lds	r24, 0x1DF0	; 0x801df0 <listening>
   17588:	90 e0       	ldi	r25, 0x00	; 0
   1758a:	0e 94 ce 8c 	call	0x1199c	; 0x1199c <AMIGO_is_MLA>
   1758e:	20 91 ee 1d 	lds	r18, 0x1DEE	; 0x801dee <talking>
   17592:	89 2b       	or	r24, r25
   17594:	19 f1       	breq	.+70     	; 0x175dc <amigo_todo_op+0x68>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   17596:	1f 92       	push	r1
   17598:	2f 93       	push	r18
   1759a:	80 91 f0 1d 	lds	r24, 0x1DF0	; 0x801df0 <listening>
   1759e:	1f 92       	push	r1
   175a0:	8f 93       	push	r24
   175a2:	0f 93       	push	r16
   175a4:	1f 93       	push	r17
   175a6:	1f 92       	push	r1
   175a8:	df 93       	push	r29
   175aa:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOs>
   175ae:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOs+0x1>
   175b2:	80 81       	ld	r24, Z
   175b4:	1f 92       	push	r1
   175b6:	8f 93       	push	r24
   175b8:	1f 92       	push	r1
   175ba:	cf 93       	push	r28
   175bc:	85 eb       	ldi	r24, 0xB5	; 181
   175be:	9d e2       	ldi	r25, 0x2D	; 45
   175c0:	1f 92       	push	r1
   175c2:	9f 93       	push	r25
   175c4:	8f 93       	push	r24
   175c6:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   175ca:	8d b7       	in	r24, 0x3d	; 61
   175cc:	9e b7       	in	r25, 0x3e	; 62
   175ce:	0f 96       	adiw	r24, 0x0f	; 15
   175d0:	0f b6       	in	r0, 0x3f	; 63
   175d2:	f8 94       	cli
   175d4:	9e bf       	out	0x3e, r25	; 62
   175d6:	0f be       	out	0x3f, r0	; 63
   175d8:	8d bf       	out	0x3d, r24	; 61
   175da:	66 c0       	rjmp	.+204    	; 0x176a8 <amigo_todo_op+0x134>
            secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(AMIGO_is_MTA(talking))
   175dc:	82 2f       	mov	r24, r18
   175de:	90 e0       	ldi	r25, 0x00	; 0
   175e0:	0e 94 dd 8c 	call	0x119ba	; 0x119ba <AMIGO_is_MTA>
   175e4:	30 91 f0 1d 	lds	r19, 0x1DF0	; 0x801df0 <listening>
   175e8:	20 91 ee 1d 	lds	r18, 0x1DEE	; 0x801dee <talking>
   175ec:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOs>
   175f0:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOs+0x1>
   175f4:	89 2b       	or	r24, r25
   175f6:	e9 f0       	breq	.+58     	; 0x17632 <amigo_todo_op+0xbe>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   175f8:	1f 92       	push	r1
   175fa:	2f 93       	push	r18
   175fc:	1f 92       	push	r1
   175fe:	3f 93       	push	r19
   17600:	0f 93       	push	r16
   17602:	1f 93       	push	r17
   17604:	1f 92       	push	r1
   17606:	df 93       	push	r29
   17608:	80 81       	ld	r24, Z
   1760a:	1f 92       	push	r1
   1760c:	8f 93       	push	r24
   1760e:	1f 92       	push	r1
   17610:	cf 93       	push	r28
   17612:	8e e4       	ldi	r24, 0x4E	; 78
   17614:	9d e2       	ldi	r25, 0x2D	; 45
   17616:	1f 92       	push	r1
   17618:	9f 93       	push	r25
   1761a:	8f 93       	push	r24
   1761c:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   17620:	8d b7       	in	r24, 0x3d	; 61
   17622:	9e b7       	in	r25, 0x3e	; 62
   17624:	0f 96       	adiw	r24, 0x0f	; 15
   17626:	0f b6       	in	r0, 0x3f	; 63
   17628:	f8 94       	cli
   1762a:	9e bf       	out	0x3e, r25	; 62
   1762c:	0f be       	out	0x3f, r0	; 63
   1762e:	8d bf       	out	0x3d, r24	; 61
   17630:	3b c0       	rjmp	.+118    	; 0x176a8 <amigo_todo_op+0x134>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(talking == UNT)
   17632:	2f 35       	cpi	r18, 0x5F	; 95
   17634:	e9 f4       	brne	.+58     	; 0x17670 <amigo_todo_op+0xfc>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   17636:	1f 92       	push	r1
   17638:	2f 93       	push	r18
   1763a:	1f 92       	push	r1
   1763c:	3f 93       	push	r19
   1763e:	0f 93       	push	r16
   17640:	1f 93       	push	r17
   17642:	1f 92       	push	r1
   17644:	df 93       	push	r29
   17646:	80 81       	ld	r24, Z
   17648:	1f 92       	push	r1
   1764a:	8f 93       	push	r24
   1764c:	1f 92       	push	r1
   1764e:	cf 93       	push	r28
   17650:	87 ee       	ldi	r24, 0xE7	; 231
   17652:	9c e2       	ldi	r25, 0x2C	; 44
   17654:	1f 92       	push	r1
   17656:	9f 93       	push	r25
   17658:	8f 93       	push	r24
   1765a:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1765e:	8d b7       	in	r24, 0x3d	; 61
   17660:	9e b7       	in	r25, 0x3e	; 62
   17662:	0f 96       	adiw	r24, 0x0f	; 15
   17664:	0f b6       	in	r0, 0x3f	; 63
   17666:	f8 94       	cli
   17668:	9e bf       	out	0x3e, r25	; 62
   1766a:	0f be       	out	0x3f, r0	; 63
   1766c:	8d bf       	out	0x3d, r24	; 61
   1766e:	1c c0       	rjmp	.+56     	; 0x176a8 <amigo_todo_op+0x134>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else
        printf("[U Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   17670:	1f 92       	push	r1
   17672:	2f 93       	push	r18
   17674:	1f 92       	push	r1
   17676:	3f 93       	push	r19
   17678:	0f 93       	push	r16
   1767a:	1f 93       	push	r17
   1767c:	1f 92       	push	r1
   1767e:	df 93       	push	r29
   17680:	80 81       	ld	r24, Z
   17682:	1f 92       	push	r1
   17684:	8f 93       	push	r24
   17686:	1f 92       	push	r1
   17688:	cf 93       	push	r28
   1768a:	82 e8       	ldi	r24, 0x82	; 130
   1768c:	9c e2       	ldi	r25, 0x2C	; 44
   1768e:	1f 92       	push	r1
   17690:	9f 93       	push	r25
   17692:	8f 93       	push	r24
   17694:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   17698:	8d b7       	in	r24, 0x3d	; 61
   1769a:	9e b7       	in	r25, 0x3e	; 62
   1769c:	0f 96       	adiw	r24, 0x0f	; 15
   1769e:	0f b6       	in	r0, 0x3f	; 63
   176a0:	f8 94       	cli
   176a2:	9e bf       	out	0x3e, r25	; 62
   176a4:	0f be       	out	0x3f, r0	; 63
   176a6:	8d bf       	out	0x3d, r24	; 61
            secondary, AMIGOs->state, opcode, len, listening, talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   176a8:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <AMIGOp>
   176ac:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <AMIGOp+0x1>
   176b0:	81 81       	ldd	r24, Z+1	; 0x01
   176b2:	90 e0       	ldi	r25, 0x00	; 0
   176b4:	0e 94 94 86 	call	0x10d28	; 0x10d28 <gpib_enable_PPR>
    return(0);
}
   176b8:	80 e0       	ldi	r24, 0x00	; 0
   176ba:	90 e0       	ldi	r25, 0x00	; 0
   176bc:	df 91       	pop	r29
   176be:	cf 91       	pop	r28
   176c0:	1f 91       	pop	r17
   176c2:	0f 91       	pop	r16
   176c4:	08 95       	ret

000176c6 <amigo_todo>:
/// @param[in] secondary: GPIB seconday command
///
/// @return  0

int amigo_todo(uint8_t secondary)
{
   176c6:	cf 93       	push	r28
   176c8:	c8 2f       	mov	r28, r24
    if(AMIGO_is_MLA(listening))
   176ca:	80 91 f0 1d 	lds	r24, 0x1DF0	; 0x801df0 <listening>
   176ce:	90 e0       	ldi	r25, 0x00	; 0
   176d0:	0e 94 ce 8c 	call	0x1199c	; 0x1199c <AMIGO_is_MLA>
   176d4:	20 91 ee 1d 	lds	r18, 0x1DEE	; 0x801dee <talking>
   176d8:	89 2b       	or	r24, r25
   176da:	f9 f0       	breq	.+62     	; 0x1771a <amigo_todo+0x54>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   176dc:	1f 92       	push	r1
   176de:	2f 93       	push	r18
   176e0:	80 91 f0 1d 	lds	r24, 0x1DF0	; 0x801df0 <listening>
   176e4:	1f 92       	push	r1
   176e6:	8f 93       	push	r24
   176e8:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOs>
   176ec:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOs+0x1>
   176f0:	80 81       	ld	r24, Z
   176f2:	1f 92       	push	r1
   176f4:	8f 93       	push	r24
   176f6:	1f 92       	push	r1
   176f8:	cf 93       	push	r28
   176fa:	82 e3       	ldi	r24, 0x32	; 50
   176fc:	9c e2       	ldi	r25, 0x2C	; 44
   176fe:	1f 92       	push	r1
   17700:	9f 93       	push	r25
   17702:	8f 93       	push	r24
   17704:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   17708:	8d b7       	in	r24, 0x3d	; 61
   1770a:	9e b7       	in	r25, 0x3e	; 62
   1770c:	0b 96       	adiw	r24, 0x0b	; 11
   1770e:	0f b6       	in	r0, 0x3f	; 63
   17710:	f8 94       	cli
   17712:	9e bf       	out	0x3e, r25	; 62
   17714:	0f be       	out	0x3f, r0	; 63
   17716:	8d bf       	out	0x3d, r24	; 61
   17718:	5a c0       	rjmp	.+180    	; 0x177ce <amigo_todo+0x108>
            secondary,AMIGOs->state,listening,talking);
    else if(AMIGO_is_MTA(talking))
   1771a:	82 2f       	mov	r24, r18
   1771c:	90 e0       	ldi	r25, 0x00	; 0
   1771e:	0e 94 dd 8c 	call	0x119ba	; 0x119ba <AMIGO_is_MTA>
   17722:	30 91 f0 1d 	lds	r19, 0x1DF0	; 0x801df0 <listening>
   17726:	20 91 ee 1d 	lds	r18, 0x1DEE	; 0x801dee <talking>
   1772a:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOs>
   1772e:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOs+0x1>
   17732:	89 2b       	or	r24, r25
   17734:	c9 f0       	breq	.+50     	; 0x17768 <amigo_todo+0xa2>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   17736:	1f 92       	push	r1
   17738:	2f 93       	push	r18
   1773a:	1f 92       	push	r1
   1773c:	3f 93       	push	r19
   1773e:	80 81       	ld	r24, Z
   17740:	1f 92       	push	r1
   17742:	8f 93       	push	r24
   17744:	1f 92       	push	r1
   17746:	cf 93       	push	r28
   17748:	82 ee       	ldi	r24, 0xE2	; 226
   1774a:	9b e2       	ldi	r25, 0x2B	; 43
   1774c:	1f 92       	push	r1
   1774e:	9f 93       	push	r25
   17750:	8f 93       	push	r24
   17752:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   17756:	8d b7       	in	r24, 0x3d	; 61
   17758:	9e b7       	in	r25, 0x3e	; 62
   1775a:	0b 96       	adiw	r24, 0x0b	; 11
   1775c:	0f b6       	in	r0, 0x3f	; 63
   1775e:	f8 94       	cli
   17760:	9e bf       	out	0x3e, r25	; 62
   17762:	0f be       	out	0x3f, r0	; 63
   17764:	8d bf       	out	0x3d, r24	; 61
   17766:	33 c0       	rjmp	.+102    	; 0x177ce <amigo_todo+0x108>
                secondary,AMIGOs->state,listening,talking);
    else if(talking == UNT)
   17768:	2f 35       	cpi	r18, 0x5F	; 95
   1776a:	c9 f4       	brne	.+50     	; 0x1779e <amigo_todo+0xd8>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   1776c:	1f 92       	push	r1
   1776e:	2f 93       	push	r18
   17770:	1f 92       	push	r1
   17772:	3f 93       	push	r19
   17774:	80 81       	ld	r24, Z
   17776:	1f 92       	push	r1
   17778:	8f 93       	push	r24
   1777a:	1f 92       	push	r1
   1777c:	cf 93       	push	r28
   1777e:	82 e9       	ldi	r24, 0x92	; 146
   17780:	9b e2       	ldi	r25, 0x2B	; 43
   17782:	1f 92       	push	r1
   17784:	9f 93       	push	r25
   17786:	8f 93       	push	r24
   17788:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1778c:	8d b7       	in	r24, 0x3d	; 61
   1778e:	9e b7       	in	r25, 0x3e	; 62
   17790:	0b 96       	adiw	r24, 0x0b	; 11
   17792:	0f b6       	in	r0, 0x3f	; 63
   17794:	f8 94       	cli
   17796:	9e bf       	out	0x3e, r25	; 62
   17798:	0f be       	out	0x3f, r0	; 63
   1779a:	8d bf       	out	0x3d, r24	; 61
   1779c:	18 c0       	rjmp	.+48     	; 0x177ce <amigo_todo+0x108>
                secondary,AMIGOs->state,listening,talking);
    else
        printf("[E   Amigo ERROR secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   1779e:	1f 92       	push	r1
   177a0:	2f 93       	push	r18
   177a2:	1f 92       	push	r1
   177a4:	3f 93       	push	r19
   177a6:	80 81       	ld	r24, Z
   177a8:	1f 92       	push	r1
   177aa:	8f 93       	push	r24
   177ac:	1f 92       	push	r1
   177ae:	cf 93       	push	r28
   177b0:	81 e4       	ldi	r24, 0x41	; 65
   177b2:	9b e2       	ldi	r25, 0x2B	; 43
   177b4:	1f 92       	push	r1
   177b6:	9f 93       	push	r25
   177b8:	8f 93       	push	r24
   177ba:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   177be:	8d b7       	in	r24, 0x3d	; 61
   177c0:	9e b7       	in	r25, 0x3e	; 62
   177c2:	0b 96       	adiw	r24, 0x0b	; 11
   177c4:	0f b6       	in	r0, 0x3f	; 63
   177c6:	f8 94       	cli
   177c8:	9e bf       	out	0x3e, r25	; 62
   177ca:	0f be       	out	0x3f, r0	; 63
   177cc:	8d bf       	out	0x3d, r24	; 61
            secondary,AMIGOs->state,listening,talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   177ce:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <AMIGOp>
   177d2:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <AMIGOp+0x1>
   177d6:	81 81       	ldd	r24, Z+1	; 0x01
   177d8:	90 e0       	ldi	r25, 0x00	; 0
   177da:	0e 94 94 86 	call	0x10d28	; 0x10d28 <gpib_enable_PPR>
    return(0);
}
   177de:	80 e0       	ldi	r24, 0x00	; 0
   177e0:	90 e0       	ldi	r25, 0x00	; 0
   177e2:	cf 91       	pop	r28
   177e4:	08 95       	ret

000177e6 <amigo_check_unit>:
/// @brief  Amigo Check Valid unit
/// @param[in] unit: unit to set
/// @return void
void amigo_check_unit(uint8_t unit)
{
    if(unit != 15)
   177e6:	8f 30       	cpi	r24, 0x0F	; 15
   177e8:	29 f0       	breq	.+10     	; 0x177f4 <amigo_check_unit+0xe>
        AMIGOs->unitNO = unit;
   177ea:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOs>
   177ee:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOs+0x1>
   177f2:	81 83       	std	Z+1, r24	; 0x01
    if(AMIGOs->unitNO != 0)
   177f4:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOs>
   177f8:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOs+0x1>
   177fc:	81 81       	ldd	r24, Z+1	; 0x01
   177fe:	88 23       	and	r24, r24
   17800:	29 f0       	breq	.+10     	; 0x1780c <amigo_check_unit+0x26>
        AMIGOs->Errors |= ERR_UNIT;
   17802:	87 81       	ldd	r24, Z+7	; 0x07
   17804:	90 85       	ldd	r25, Z+8	; 0x08
   17806:	80 64       	ori	r24, 0x40	; 64
   17808:	90 87       	std	Z+8, r25	; 0x08
   1780a:	87 83       	std	Z+7, r24	; 0x07
   1780c:	08 95       	ret

0001780e <Amigo_Command>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)

int Amigo_Command( int secondary )
{
   1780e:	a3 e1       	ldi	r26, 0x13	; 19
   17810:	b0 e0       	ldi	r27, 0x00	; 0
   17812:	ed e0       	ldi	r30, 0x0D	; 13
   17814:	fc eb       	ldi	r31, 0xBC	; 188
   17816:	0c 94 ff e5 	jmp	0x1cbfe	; 0x1cbfe <__prologue_saves__+0x18>
   1781a:	7c 01       	movw	r14, r24
    uint8_t *ptr;
    uint16_t status;                              // Current status
    UINT len;                                     // Size of Data/Op Codes/Parameters read in bytes

#if SDEBUG
    if(debuglevel & 32)
   1781c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17820:	85 ff       	sbrs	r24, 5
   17822:	16 c0       	rjmp	.+44     	; 0x17850 <Amigo_Command+0x42>
        printf("[AMIGO Command(%02XH): listen:%02XH, talk:%02XH]\n",
   17824:	80 91 ee 1d 	lds	r24, 0x1DEE	; 0x801dee <talking>
   17828:	1f 92       	push	r1
   1782a:	8f 93       	push	r24
   1782c:	80 91 f0 1d 	lds	r24, 0x1DF0	; 0x801df0 <listening>
   17830:	1f 92       	push	r1
   17832:	8f 93       	push	r24
   17834:	ff 92       	push	r15
   17836:	ef 92       	push	r14
   17838:	8f e0       	ldi	r24, 0x0F	; 15
   1783a:	9b e2       	ldi	r25, 0x2B	; 43
   1783c:	1f 92       	push	r1
   1783e:	9f 93       	push	r25
   17840:	8f 93       	push	r24
   17842:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   17846:	0f b6       	in	r0, 0x3f	; 63
   17848:	f8 94       	cli
   1784a:	de bf       	out	0x3e, r29	; 62
   1784c:	0f be       	out	0x3f, r0	; 63
   1784e:	cd bf       	out	0x3d, r28	; 61
            secondary, listening, talking);
#endif

///  Reference: A14
    if (secondary == 0x7e && AMIGO_is_MTA(talking))
   17850:	9e e7       	ldi	r25, 0x7E	; 126
   17852:	e9 16       	cp	r14, r25
   17854:	f1 04       	cpc	r15, r1
   17856:	f1 f5       	brne	.+124    	; 0x178d4 <Amigo_Command+0xc6>
   17858:	80 91 ee 1d 	lds	r24, 0x1DEE	; 0x801dee <talking>
   1785c:	90 e0       	ldi	r25, 0x00	; 0
   1785e:	0e 94 dd 8c 	call	0x119ba	; 0x119ba <AMIGO_is_MTA>
   17862:	89 2b       	or	r24, r25
   17864:	09 f4       	brne	.+2      	; 0x17868 <Amigo_Command+0x5a>
   17866:	86 c0       	rjmp	.+268    	; 0x17974 <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17868:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <AMIGOp>
   1786c:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <AMIGOp+0x1>
   17870:	81 81       	ldd	r24, Z+1	; 0x01
   17872:	90 e0       	ldi	r25, 0x00	; 0
   17874:	0e 94 c5 86 	call	0x10d8a	; 0x10d8a <gpib_disable_PPR>
        status = EOI_FLAG;
   17878:	80 e0       	ldi	r24, 0x00	; 0
   1787a:	91 e0       	ldi	r25, 0x01	; 1
   1787c:	9b 8b       	std	Y+19, r25	; 0x13
   1787e:	8a 8b       	std	Y+18, r24	; 0x12
        len = gpib_write_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   17880:	ae 01       	movw	r20, r28
   17882:	4e 5e       	subi	r20, 0xEE	; 238
   17884:	5f 4f       	sbci	r21, 0xFF	; 255
   17886:	60 e0       	ldi	r22, 0x00	; 0
   17888:	72 e0       	ldi	r23, 0x02	; 2
   1788a:	8a ee       	ldi	r24, 0xEA	; 234
   1788c:	9b e1       	ldi	r25, 0x1B	; 27
   1788e:	0e 94 e4 8b 	call	0x117c8	; 0x117c8 <gpib_write_str>
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   17892:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <AMIGOp>
   17896:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <AMIGOp+0x1>
   1789a:	81 81       	ldd	r24, Z+1	; 0x01
   1789c:	90 e0       	ldi	r25, 0x00	; 0
   1789e:	0e 94 94 86 	call	0x10d28	; 0x10d28 <gpib_enable_PPR>
        if(status & ERROR_MASK)
   178a2:	8a 89       	ldd	r24, Y+18	; 0x12
   178a4:	9b 89       	ldd	r25, Y+19	; 0x13
   178a6:	88 27       	eor	r24, r24
   178a8:	90 7d       	andi	r25, 0xD0	; 208
   178aa:	89 2b       	or	r24, r25
   178ac:	09 f4       	brne	.+2      	; 0x178b0 <Amigo_Command+0xa2>
   178ae:	89 c2       	rjmp	.+1298   	; 0x17dc2 <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   178b0:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOs>
   178b4:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOs+0x1>
   178b8:	81 e0       	ldi	r24, 0x01	; 1
   178ba:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   178bc:	87 81       	ldd	r24, Z+7	; 0x07
   178be:	90 85       	ldd	r25, Z+8	; 0x08
   178c0:	80 62       	ori	r24, 0x20	; 32
   178c2:	90 87       	std	Z+8, r25	; 0x08
   178c4:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & 1)
   178c6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   178ca:	80 ff       	sbrs	r24, 0
   178cc:	7a c2       	rjmp	.+1268   	; 0x17dc2 <Amigo_Command+0x5b4>
                printf("[AMIGO_Command:GPIB write error]\n");
   178ce:	8d ee       	ldi	r24, 0xED	; 237
   178d0:	9a e2       	ldi	r25, 0x2A	; 42
   178d2:	8e c0       	rjmp	.+284    	; 0x179f0 <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

///  Reference: A25
    if (secondary == 0x7f && AMIGO_is_MLA(listening))
   178d4:	8f e7       	ldi	r24, 0x7F	; 127
   178d6:	e8 16       	cp	r14, r24
   178d8:	f1 04       	cpc	r15, r1
   178da:	09 f0       	breq	.+2      	; 0x178de <Amigo_Command+0xd0>
   178dc:	4b c0       	rjmp	.+150    	; 0x17974 <Amigo_Command+0x166>
   178de:	80 91 f0 1d 	lds	r24, 0x1DF0	; 0x801df0 <listening>
   178e2:	90 e0       	ldi	r25, 0x00	; 0
   178e4:	0e 94 ce 8c 	call	0x1199c	; 0x1199c <AMIGO_is_MLA>
   178e8:	89 2b       	or	r24, r25
   178ea:	09 f4       	brne	.+2      	; 0x178ee <Amigo_Command+0xe0>
   178ec:	43 c0       	rjmp	.+134    	; 0x17974 <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   178ee:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <AMIGOp>
   178f2:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <AMIGOp+0x1>
   178f6:	81 81       	ldd	r24, Z+1	; 0x01
   178f8:	90 e0       	ldi	r25, 0x00	; 0
   178fa:	0e 94 c5 86 	call	0x10d8a	; 0x10d8a <gpib_disable_PPR>
#if SDEBUG
        if(debuglevel & 128)
   178fe:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17902:	87 fd       	sbrc	r24, 7
            gpib_timer_elapsed_begin();
   17904:	0e 94 dc 85 	call	0x10bb8	; 0x10bb8 <gpib_timer_elapsed_begin>
#endif
        status = EOI_FLAG;
   17908:	80 e0       	ldi	r24, 0x00	; 0
   1790a:	91 e0       	ldi	r25, 0x01	; 1
   1790c:	9b 8b       	std	Y+19, r25	; 0x13
   1790e:	8a 8b       	std	Y+18, r24	; 0x12
        len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   17910:	ae 01       	movw	r20, r28
   17912:	4e 5e       	subi	r20, 0xEE	; 238
   17914:	5f 4f       	sbci	r21, 0xFF	; 255
   17916:	60 e0       	ldi	r22, 0x00	; 0
   17918:	72 e0       	ldi	r23, 0x02	; 2
   1791a:	8a ee       	ldi	r24, 0xEA	; 234
   1791c:	9b e1       	ldi	r25, 0x1B	; 27
   1791e:	0e 94 36 8b 	call	0x1166c	; 0x1166c <gpib_read_str>
#if SDEBUG
        if(debuglevel & 128)
   17922:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17926:	87 ff       	sbrs	r24, 7
   17928:	04 c0       	rjmp	.+8      	; 0x17932 <Amigo_Command+0x124>
            gpib_timer_elapsed_end("GPIB read str");
   1792a:	8b e2       	ldi	r24, 0x2B	; 43
   1792c:	95 e1       	ldi	r25, 0x15	; 21
   1792e:	0e 94 ee 85 	call	0x10bdc	; 0x10bdc <gpib_timer_elapsed_end>
#endif
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   17932:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <AMIGOp>
   17936:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <AMIGOp+0x1>
   1793a:	81 81       	ldd	r24, Z+1	; 0x01
   1793c:	90 e0       	ldi	r25, 0x00	; 0
   1793e:	0e 94 94 86 	call	0x10d28	; 0x10d28 <gpib_enable_PPR>
        if(status & ERROR_MASK)
   17942:	8a 89       	ldd	r24, Y+18	; 0x12
   17944:	9b 89       	ldd	r25, Y+19	; 0x13
   17946:	88 27       	eor	r24, r24
   17948:	90 7d       	andi	r25, 0xD0	; 208
   1794a:	89 2b       	or	r24, r25
   1794c:	09 f4       	brne	.+2      	; 0x17950 <Amigo_Command+0x142>
   1794e:	39 c2       	rjmp	.+1138   	; 0x17dc2 <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   17950:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOs>
   17954:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOs+0x1>
   17958:	81 e0       	ldi	r24, 0x01	; 1
   1795a:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   1795c:	87 81       	ldd	r24, Z+7	; 0x07
   1795e:	90 85       	ldd	r25, Z+8	; 0x08
   17960:	80 62       	ori	r24, 0x20	; 32
   17962:	90 87       	std	Z+8, r25	; 0x08
   17964:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & 1)
   17966:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1796a:	80 ff       	sbrs	r24, 0
   1796c:	2a c2       	rjmp	.+1108   	; 0x17dc2 <Amigo_Command+0x5b4>
                printf("[AMIGO Command:GPIB read error]\n");
   1796e:	8c ec       	ldi	r24, 0xCC	; 204
   17970:	9a e2       	ldi	r25, 0x2A	; 42
   17972:	3e c0       	rjmp	.+124    	; 0x179f0 <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   17974:	80 91 f0 1d 	lds	r24, 0x1DF0	; 0x801df0 <listening>
   17978:	90 e0       	ldi	r25, 0x00	; 0
   1797a:	0e 94 ce 8c 	call	0x1199c	; 0x1199c <AMIGO_is_MLA>
   1797e:	89 2b       	or	r24, r25
   17980:	19 f4       	brne	.+6      	; 0x17988 <Amigo_Command+0x17a>
        return(0);
   17982:	80 e0       	ldi	r24, 0x00	; 0
   17984:	90 e0       	ldi	r25, 0x00	; 0
   17986:	25 c2       	rjmp	.+1098   	; 0x17dd2 <Amigo_Command+0x5c4>
                printf("[AMIGO Command:GPIB read error]\n");
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   17988:	80 91 ee 1d 	lds	r24, 0x1DEE	; 0x801dee <talking>
   1798c:	90 e0       	ldi	r25, 0x00	; 0
   1798e:	0e 94 dd 8c 	call	0x119ba	; 0x119ba <AMIGO_is_MTA>
   17992:	89 2b       	or	r24, r25
   17994:	b1 f7       	brne	.-20     	; 0x17982 <Amigo_Command+0x174>
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17996:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <AMIGOp>
   1799a:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <AMIGOp+0x1>
   1799e:	81 81       	ldd	r24, Z+1	; 0x01
   179a0:	90 e0       	ldi	r25, 0x00	; 0
   179a2:	0e 94 c5 86 	call	0x10d8a	; 0x10d8a <gpib_disable_PPR>


///  Note: the function will "unread" any commands and return
///  All Data MUST have EOI

    status = EOI_FLAG;
   179a6:	80 e0       	ldi	r24, 0x00	; 0
   179a8:	91 e0       	ldi	r25, 0x01	; 1
   179aa:	9b 8b       	std	Y+19, r25	; 0x13
   179ac:	8a 8b       	std	Y+18, r24	; 0x12
    len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   179ae:	ae 01       	movw	r20, r28
   179b0:	4e 5e       	subi	r20, 0xEE	; 238
   179b2:	5f 4f       	sbci	r21, 0xFF	; 255
   179b4:	60 e0       	ldi	r22, 0x00	; 0
   179b6:	72 e0       	ldi	r23, 0x02	; 2
   179b8:	8a ee       	ldi	r24, 0xEA	; 234
   179ba:	9b e1       	ldi	r25, 0x1B	; 27
   179bc:	0e 94 36 8b 	call	0x1166c	; 0x1166c <gpib_read_str>
   179c0:	8c 01       	movw	r16, r24
    if(status & ERROR_MASK)
   179c2:	8a 89       	ldd	r24, Y+18	; 0x12
   179c4:	9b 89       	ldd	r25, Y+19	; 0x13
   179c6:	88 27       	eor	r24, r24
   179c8:	90 7d       	andi	r25, 0xD0	; 208
   179ca:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   179ce:	89 2b       	or	r24, r25
   179d0:	c1 f0       	breq	.+48     	; 0x17a02 <Amigo_Command+0x1f4>
    {
        AMIGOs->dsj = 1;
   179d2:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOs>
   179d6:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOs+0x1>
   179da:	81 e0       	ldi	r24, 0x01	; 1
   179dc:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   179de:	87 81       	ldd	r24, Z+7	; 0x07
   179e0:	90 85       	ldd	r25, Z+8	; 0x08
   179e2:	80 62       	ori	r24, 0x20	; 32
   179e4:	90 87       	std	Z+8, r25	; 0x08
   179e6:	87 83       	std	Z+7, r24	; 0x07
        if(debuglevel & 1)
   179e8:	20 ff       	sbrs	r18, 0
   179ea:	eb c1       	rjmp	.+982    	; 0x17dc2 <Amigo_Command+0x5b4>
            printf("[AMIGO Command:GPIB read error]\n");
   179ec:	8b ea       	ldi	r24, 0xAB	; 171
   179ee:	9a e2       	ldi	r25, 0x2A	; 42
   179f0:	1f 92       	push	r1
   179f2:	9f 93       	push	r25
   179f4:	8f 93       	push	r24
   179f6:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   179fa:	0f 90       	pop	r0
   179fc:	0f 90       	pop	r0
   179fe:	0f 90       	pop	r0
   17a00:	e0 c1       	rjmp	.+960    	; 0x17dc2 <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }
#if SDEBUG
    if(debuglevel & 32)
   17a02:	25 ff       	sbrs	r18, 5
   17a04:	10 c0       	rjmp	.+32     	; 0x17a26 <Amigo_Command+0x218>
        printf("[AMIGO Command(%02XH): GPIB read bytes:%02XH]\n",
   17a06:	1f 93       	push	r17
   17a08:	0f 93       	push	r16
   17a0a:	ff 92       	push	r15
   17a0c:	ef 92       	push	r14
   17a0e:	8c e7       	ldi	r24, 0x7C	; 124
   17a10:	9a e2       	ldi	r25, 0x2A	; 42
   17a12:	1f 92       	push	r1
   17a14:	9f 93       	push	r25
   17a16:	8f 93       	push	r24
   17a18:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   17a1c:	0f b6       	in	r0, 0x3f	; 63
   17a1e:	f8 94       	cli
   17a20:	de bf       	out	0x3e, r29	; 62
   17a22:	0f be       	out	0x3f, r0	; 63
   17a24:	cd bf       	out	0x3d, r28	; 61
            secondary, len);
#endif
    if(!len)
   17a26:	01 15       	cp	r16, r1
   17a28:	11 05       	cpc	r17, r1
   17a2a:	61 f4       	brne	.+24     	; 0x17a44 <Amigo_Command+0x236>
    {
        AMIGOs->dsj = 1;
   17a2c:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOs>
   17a30:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOs+0x1>
   17a34:	81 e0       	ldi	r24, 0x01	; 1
   17a36:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   17a38:	87 81       	ldd	r24, Z+7	; 0x07
   17a3a:	90 85       	ldd	r25, Z+8	; 0x08
   17a3c:	80 62       	ori	r24, 0x20	; 32
   17a3e:	90 87       	std	Z+8, r25	; 0x08
   17a40:	87 83       	std	Z+7, r24	; 0x07
   17a42:	bf c1       	rjmp	.+894    	; 0x17dc2 <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }

    ptr = gpib_iobuff;
    op = *ptr++;
   17a44:	60 91 ea 1b 	lds	r22, 0x1BEA	; 0x801bea <gpib_iobuff>

    if (secondary == 0x68)
   17a48:	98 e6       	ldi	r25, 0x68	; 104
   17a4a:	e9 16       	cp	r14, r25
   17a4c:	f1 04       	cpc	r15, r1
   17a4e:	09 f0       	breq	.+2      	; 0x17a52 <Amigo_Command+0x244>
   17a50:	28 c1       	rjmp	.+592    	; 0x17ca2 <Amigo_Command+0x494>
    {
        if(op == 0x00 && len == 2)
   17a52:	61 11       	cpse	r22, r1
   17a54:	2e c0       	rjmp	.+92     	; 0x17ab2 <Amigo_Command+0x2a4>
   17a56:	02 30       	cpi	r16, 0x02	; 2
   17a58:	11 05       	cpc	r17, r1
   17a5a:	09 f0       	breq	.+2      	; 0x17a5e <Amigo_Command+0x250>
   17a5c:	b7 c1       	rjmp	.+878    	; 0x17dcc <Amigo_Command+0x5be>
        {
///  Reference: A40

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & 32)
   17a5e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17a62:	85 ff       	sbrs	r24, 5
   17a64:	0a c0       	rjmp	.+20     	; 0x17a7a <Amigo_Command+0x26c>
                printf("[AMIGO Cold Load Read Command]\n");
   17a66:	8c e5       	ldi	r24, 0x5C	; 92
   17a68:	9a e2       	ldi	r25, 0x2A	; 42
   17a6a:	1f 92       	push	r1
   17a6c:	9f 93       	push	r25
   17a6e:	8f 93       	push	r24
   17a70:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   17a74:	0f 90       	pop	r0
   17a76:	0f 90       	pop	r0
   17a78:	0f 90       	pop	r0
#endif
            ///TODO we do NOT support multiple units yet
            AMIGOs->unitNO = 0;
   17a7a:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOs>
   17a7e:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOs+0x1>
   17a82:	11 82       	std	Z+1, r1	; 0x01
            AMIGOs->dsj = 0;
   17a84:	16 82       	std	Z+6, r1	; 0x06
            AMIGOs->Errors = 0;
   17a86:	10 86       	std	Z+8, r1	; 0x08
   17a88:	17 82       	std	Z+7, r1	; 0x07
            /// Fill in temparary address
            tmp.cyl = 0;
   17a8a:	1c 82       	std	Y+4, r1	; 0x04
            tmp.head = ( (0xff & *ptr) >> 6) & 0x03;
   17a8c:	80 91 eb 1b 	lds	r24, 0x1BEB	; 0x801beb <gpib_iobuff+0x1>
   17a90:	98 2f       	mov	r25, r24
   17a92:	92 95       	swap	r25
   17a94:	96 95       	lsr	r25
   17a96:	96 95       	lsr	r25
   17a98:	93 70       	andi	r25, 0x03	; 3
   17a9a:	9d 83       	std	Y+5, r25	; 0x05
            tmp.sector = 0x3f & *ptr;
   17a9c:	8f 73       	andi	r24, 0x3F	; 63
   17a9e:	8e 83       	std	Y+6, r24	; 0x06
            ++ptr;
            //update to real address on sucess
            amigo_seek((AMIGOStateType *) &tmp);
   17aa0:	ce 01       	movw	r24, r28
   17aa2:	01 96       	adiw	r24, 0x01	; 1
   17aa4:	18 da       	rcall	.-3024   	; 0x16ed6 <amigo_seek>
            AMIGOs->state = AMIGO_COLD_LOAD_READ;
   17aa6:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOs>
   17aaa:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOs+0x1>
   17aae:	85 e0       	ldi	r24, 0x05	; 5
   17ab0:	5c c1       	rjmp	.+696    	; 0x17d6a <Amigo_Command+0x55c>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 5)
   17ab2:	62 30       	cpi	r22, 0x02	; 2
   17ab4:	09 f0       	breq	.+2      	; 0x17ab8 <Amigo_Command+0x2aa>
   17ab6:	3f c0       	rjmp	.+126    	; 0x17b36 <Amigo_Command+0x328>
   17ab8:	05 30       	cpi	r16, 0x05	; 5
   17aba:	11 05       	cpc	r17, r1
   17abc:	d1 f4       	brne	.+52     	; 0x17af2 <Amigo_Command+0x2e4>
/// @brief 
///  Seek 1 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & 32)
   17abe:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17ac2:	85 ff       	sbrs	r24, 5
   17ac4:	0a c0       	rjmp	.+20     	; 0x17ada <Amigo_Command+0x2cc>
                printf("[AMIGO Seek len=5]\n");
   17ac6:	88 e4       	ldi	r24, 0x48	; 72
   17ac8:	9a e2       	ldi	r25, 0x2A	; 42
   17aca:	1f 92       	push	r1
   17acc:	9f 93       	push	r25
   17ace:	8f 93       	push	r24
   17ad0:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   17ad4:	0f 90       	pop	r0
   17ad6:	0f 90       	pop	r0
   17ad8:	0f 90       	pop	r0
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17ada:	80 91 eb 1b 	lds	r24, 0x1BEB	; 0x801beb <gpib_iobuff+0x1>
   17ade:	83 de       	rcall	.-762    	; 0x177e6 <amigo_check_unit>

            /// Fill in temparary address
            tmp.cyl = 0xff & *ptr++;
   17ae0:	80 91 ec 1b 	lds	r24, 0x1BEC	; 0x801bec <gpib_iobuff+0x2>
   17ae4:	8c 83       	std	Y+4, r24	; 0x04
            tmp.head = 0xff & *ptr++;
   17ae6:	80 91 ed 1b 	lds	r24, 0x1BED	; 0x801bed <gpib_iobuff+0x3>
   17aea:	8d 83       	std	Y+5, r24	; 0x05
            tmp.sector = 0xff & *ptr++;
   17aec:	80 91 ee 1b 	lds	r24, 0x1BEE	; 0x801bee <gpib_iobuff+0x4>
   17af0:	1d c0       	rjmp	.+58     	; 0x17b2c <Amigo_Command+0x31e>
            //update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 6)
   17af2:	06 30       	cpi	r16, 0x06	; 6
   17af4:	11 05       	cpc	r17, r1
   17af6:	09 f0       	breq	.+2      	; 0x17afa <Amigo_Command+0x2ec>
   17af8:	69 c1       	rjmp	.+722    	; 0x17dcc <Amigo_Command+0x5be>
/// @brief 
///  Seek 2 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & 32)
   17afa:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17afe:	85 ff       	sbrs	r24, 5
   17b00:	0a c0       	rjmp	.+20     	; 0x17b16 <Amigo_Command+0x308>
                printf("[AMIGO Seek len=6]\n");
   17b02:	84 e3       	ldi	r24, 0x34	; 52
   17b04:	9a e2       	ldi	r25, 0x2A	; 42
   17b06:	1f 92       	push	r1
   17b08:	9f 93       	push	r25
   17b0a:	8f 93       	push	r24
   17b0c:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   17b10:	0f 90       	pop	r0
   17b12:	0f 90       	pop	r0
   17b14:	0f 90       	pop	r0
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17b16:	80 91 eb 1b 	lds	r24, 0x1BEB	; 0x801beb <gpib_iobuff+0x1>
   17b1a:	65 de       	rcall	.-822    	; 0x177e6 <amigo_check_unit>
            /// Fill in temparary address
            tmp.cyl = (0xff & *ptr++) << 8;       // MSB
            tmp.cyl |= (0xff & *ptr++);           // LSB
   17b1c:	80 91 ed 1b 	lds	r24, 0x1BED	; 0x801bed <gpib_iobuff+0x3>
   17b20:	8c 83       	std	Y+4, r24	; 0x04
            tmp.head = 0xff & *ptr++;
   17b22:	80 91 ee 1b 	lds	r24, 0x1BEE	; 0x801bee <gpib_iobuff+0x4>
   17b26:	8d 83       	std	Y+5, r24	; 0x05
            tmp.sector = 0xff & *ptr++;
   17b28:	80 91 ef 1b 	lds	r24, 0x1BEF	; 0x801bef <gpib_iobuff+0x5>
            //update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
   17b2c:	8e 83       	std	Y+6, r24	; 0x06
   17b2e:	ce 01       	movw	r24, r28
   17b30:	01 96       	adiw	r24, 0x01	; 1
   17b32:	d1 d9       	rcall	.-3166   	; 0x16ed6 <amigo_seek>
   17b34:	1b c1       	rjmp	.+566    	; 0x17d6c <Amigo_Command+0x55e>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x03 && len == 2)
   17b36:	63 30       	cpi	r22, 0x03	; 3
   17b38:	e9 f4       	brne	.+58     	; 0x17b74 <Amigo_Command+0x366>
   17b3a:	02 30       	cpi	r16, 0x02	; 2
   17b3c:	11 05       	cpc	r17, r1
   17b3e:	09 f0       	breq	.+2      	; 0x17b42 <Amigo_Command+0x334>
   17b40:	45 c1       	rjmp	.+650    	; 0x17dcc <Amigo_Command+0x5be>
        {
///  Reference: A15
#if SDEBUG
            if(debuglevel & 32)
   17b42:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17b46:	85 ff       	sbrs	r24, 5
   17b48:	0a c0       	rjmp	.+20     	; 0x17b5e <Amigo_Command+0x350>
                printf("[AMIGO Request Status Buffered Command]\n");
   17b4a:	8b e0       	ldi	r24, 0x0B	; 11
   17b4c:	9a e2       	ldi	r25, 0x2A	; 42
   17b4e:	1f 92       	push	r1
   17b50:	9f 93       	push	r25
   17b52:	8f 93       	push	r24
   17b54:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   17b58:	0f 90       	pop	r0
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17b5a:	0f 90       	pop	r0
   17b5c:	0f 90       	pop	r0
   17b5e:	80 91 eb 1b 	lds	r24, 0x1BEB	; 0x801beb <gpib_iobuff+0x1>
            amigo_request_status();
   17b62:	41 de       	rcall	.-894    	; 0x177e6 <amigo_check_unit>
            AMIGOs->state = AMIGO_REQUEST_STATUS_BUFFERED;
   17b64:	7b d8       	rcall	.-3850   	; 0x16c5c <amigo_request_status>
   17b66:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOs>
   17b6a:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOs+0x1>
   17b6e:	83 e0       	ldi	r24, 0x03	; 3
   17b70:	80 83       	st	Z, r24
            return(status & ERROR_MASK);
        }
        else if(op == 0x05 && len == 2)
   17b72:	27 c1       	rjmp	.+590    	; 0x17dc2 <Amigo_Command+0x5b4>
   17b74:	65 30       	cpi	r22, 0x05	; 5
   17b76:	d9 f4       	brne	.+54     	; 0x17bae <Amigo_Command+0x3a0>
   17b78:	02 30       	cpi	r16, 0x02	; 2
   17b7a:	11 05       	cpc	r17, r1
   17b7c:	09 f0       	breq	.+2      	; 0x17b80 <Amigo_Command+0x372>
        {
///  Reference: A35
#if SDEBUG
            if(debuglevel & 32)
   17b7e:	26 c1       	rjmp	.+588    	; 0x17dcc <Amigo_Command+0x5be>
   17b80:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17b84:	85 ff       	sbrs	r24, 5
                printf("[AMIGO Read Unbuffered Command]\n");
   17b86:	0a c0       	rjmp	.+20     	; 0x17b9c <Amigo_Command+0x38e>
   17b88:	8a ee       	ldi	r24, 0xEA	; 234
   17b8a:	99 e2       	ldi	r25, 0x29	; 41
   17b8c:	1f 92       	push	r1
   17b8e:	9f 93       	push	r25
   17b90:	8f 93       	push	r24
   17b92:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   17b96:	0f 90       	pop	r0
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17b98:	0f 90       	pop	r0
   17b9a:	0f 90       	pop	r0
   17b9c:	80 91 eb 1b 	lds	r24, 0x1BEB	; 0x801beb <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_READ_UNBUFFERED;
   17ba0:	22 de       	rcall	.-956    	; 0x177e6 <amigo_check_unit>
   17ba2:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOs>
   17ba6:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOs+0x1>
   17baa:	86 e0       	ldi	r24, 0x06	; 6
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x07 && len == 4)
   17bac:	de c0       	rjmp	.+444    	; 0x17d6a <Amigo_Command+0x55c>
   17bae:	67 30       	cpi	r22, 0x07	; 7
   17bb0:	f9 f4       	brne	.+62     	; 0x17bf0 <Amigo_Command+0x3e2>
   17bb2:	04 30       	cpi	r16, 0x04	; 4
   17bb4:	11 05       	cpc	r17, r1
   17bb6:	09 f0       	breq	.+2      	; 0x17bba <Amigo_Command+0x3ac>
        {
            uint16_t sectors;
#if SDEBUG
            if(debuglevel & 32)
   17bb8:	09 c1       	rjmp	.+530    	; 0x17dcc <Amigo_Command+0x5be>
   17bba:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17bbe:	85 ff       	sbrs	r24, 5
                printf("[AMIGO Verify]\n");
   17bc0:	0a c0       	rjmp	.+20     	; 0x17bd6 <Amigo_Command+0x3c8>
   17bc2:	8a ed       	ldi	r24, 0xDA	; 218
   17bc4:	99 e2       	ldi	r25, 0x29	; 41
   17bc6:	1f 92       	push	r1
   17bc8:	9f 93       	push	r25
   17bca:	8f 93       	push	r24
   17bcc:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   17bd0:	0f 90       	pop	r0
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17bd2:	0f 90       	pop	r0
   17bd4:	0f 90       	pop	r0
   17bd6:	80 91 eb 1b 	lds	r24, 0x1BEB	; 0x801beb <gpib_iobuff+0x1>
            sectors = (0xff & *ptr++) << 8;
   17bda:	05 de       	rcall	.-1014   	; 0x177e6 <amigo_check_unit>
   17bdc:	80 91 ec 1b 	lds	r24, 0x1BEC	; 0x801bec <gpib_iobuff+0x2>
            sectors |= (0xff & *ptr++);
            return ( amigo_verify( sectors) );
   17be0:	90 e0       	ldi	r25, 0x00	; 0
   17be2:	98 2f       	mov	r25, r24
   17be4:	88 27       	eor	r24, r24
   17be6:	20 91 ed 1b 	lds	r18, 0x1BED	; 0x801bed <gpib_iobuff+0x3>
   17bea:	82 2b       	or	r24, r18
        }
        else if(op == 0x08 && len == 2)
   17bec:	9f d9       	rcall	.-3266   	; 0x16f2c <amigo_verify>
   17bee:	f1 c0       	rjmp	.+482    	; 0x17dd2 <Amigo_Command+0x5c4>
   17bf0:	68 30       	cpi	r22, 0x08	; 8
   17bf2:	d9 f4       	brne	.+54     	; 0x17c2a <Amigo_Command+0x41c>
   17bf4:	02 30       	cpi	r16, 0x02	; 2
   17bf6:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   17bf8:	09 f0       	breq	.+2      	; 0x17bfc <Amigo_Command+0x3ee>
   17bfa:	e8 c0       	rjmp	.+464    	; 0x17dcc <Amigo_Command+0x5be>
   17bfc:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("[AMIGO Write Unbuffered Command]\n");
   17c00:	85 ff       	sbrs	r24, 5
   17c02:	0a c0       	rjmp	.+20     	; 0x17c18 <Amigo_Command+0x40a>
   17c04:	88 eb       	ldi	r24, 0xB8	; 184
   17c06:	99 e2       	ldi	r25, 0x29	; 41
   17c08:	1f 92       	push	r1
   17c0a:	9f 93       	push	r25
   17c0c:	8f 93       	push	r24
   17c0e:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17c12:	0f 90       	pop	r0
   17c14:	0f 90       	pop	r0
   17c16:	0f 90       	pop	r0
   17c18:	80 91 eb 1b 	lds	r24, 0x1BEB	; 0x801beb <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_WRITE_UNBUFFERED;
   17c1c:	e4 dd       	rcall	.-1080   	; 0x177e6 <amigo_check_unit>
   17c1e:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOs>
   17c22:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if((op == 0x0B || op == 0x2b) && len == 2)
   17c26:	88 e0       	ldi	r24, 0x08	; 8
   17c28:	a0 c0       	rjmp	.+320    	; 0x17d6a <Amigo_Command+0x55c>
   17c2a:	86 2f       	mov	r24, r22
   17c2c:	8f 7d       	andi	r24, 0xDF	; 223
   17c2e:	8b 30       	cpi	r24, 0x0B	; 11
   17c30:	d9 f4       	brne	.+54     	; 0x17c68 <Amigo_Command+0x45a>
   17c32:	02 30       	cpi	r16, 0x02	; 2
   17c34:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   17c36:	09 f0       	breq	.+2      	; 0x17c3a <Amigo_Command+0x42c>
   17c38:	c9 c0       	rjmp	.+402    	; 0x17dcc <Amigo_Command+0x5be>
   17c3a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("[AMIGO Initialize Command]\n");
   17c3e:	85 ff       	sbrs	r24, 5
   17c40:	0a c0       	rjmp	.+20     	; 0x17c56 <Amigo_Command+0x448>
   17c42:	8c e9       	ldi	r24, 0x9C	; 156
   17c44:	99 e2       	ldi	r25, 0x29	; 41
   17c46:	1f 92       	push	r1
   17c48:	9f 93       	push	r25
   17c4a:	8f 93       	push	r24
   17c4c:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17c50:	0f 90       	pop	r0
   17c52:	0f 90       	pop	r0
   17c54:	0f 90       	pop	r0
   17c56:	80 91 eb 1b 	lds	r24, 0x1BEB	; 0x801beb <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_INITIALIZE;
   17c5a:	c5 dd       	rcall	.-1142   	; 0x177e6 <amigo_check_unit>
   17c5c:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOs>
   17c60:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x14 && len == 2)
   17c64:	8a e0       	ldi	r24, 0x0A	; 10
   17c66:	81 c0       	rjmp	.+258    	; 0x17d6a <Amigo_Command+0x55c>
   17c68:	64 31       	cpi	r22, 0x14	; 20
   17c6a:	09 f0       	breq	.+2      	; 0x17c6e <Amigo_Command+0x460>
   17c6c:	af c0       	rjmp	.+350    	; 0x17dcc <Amigo_Command+0x5be>
   17c6e:	02 30       	cpi	r16, 0x02	; 2
   17c70:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   17c72:	09 f0       	breq	.+2      	; 0x17c76 <Amigo_Command+0x468>
   17c74:	ab c0       	rjmp	.+342    	; 0x17dcc <Amigo_Command+0x5be>
   17c76:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("[AMIGO Request Logical Address Command]\n");
   17c7a:	85 ff       	sbrs	r24, 5
   17c7c:	0a c0       	rjmp	.+20     	; 0x17c92 <Amigo_Command+0x484>
   17c7e:	83 e7       	ldi	r24, 0x73	; 115
   17c80:	99 e2       	ldi	r25, 0x29	; 41
   17c82:	1f 92       	push	r1
   17c84:	9f 93       	push	r25
   17c86:	8f 93       	push	r24
   17c88:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   17c8c:	0f 90       	pop	r0
#endif
            amigo_request_logical_address();
   17c8e:	0f 90       	pop	r0
   17c90:	0f 90       	pop	r0
            AMIGOs->state = AMIGO_REQUEST_LOGICAL_ADDRESS;
   17c92:	0e 94 20 b6 	call	0x16c40	; 0x16c40 <amigo_request_logical_address>
   17c96:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOs>
   17c9a:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x69)
   17c9e:	84 e0       	ldi	r24, 0x04	; 4
   17ca0:	64 c0       	rjmp	.+200    	; 0x17d6a <Amigo_Command+0x55c>
   17ca2:	89 e6       	ldi	r24, 0x69	; 105
   17ca4:	e8 16       	cp	r14, r24
    {
        if(op == 0x08 && len == 2)
   17ca6:	f1 04       	cpc	r15, r1
   17ca8:	f1 f4       	brne	.+60     	; 0x17ce6 <Amigo_Command+0x4d8>
   17caa:	68 30       	cpi	r22, 0x08	; 8
   17cac:	09 f0       	breq	.+2      	; 0x17cb0 <Amigo_Command+0x4a2>
   17cae:	8e c0       	rjmp	.+284    	; 0x17dcc <Amigo_Command+0x5be>
   17cb0:	02 30       	cpi	r16, 0x02	; 2
   17cb2:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   17cb4:	09 f0       	breq	.+2      	; 0x17cb8 <Amigo_Command+0x4aa>
   17cb6:	8a c0       	rjmp	.+276    	; 0x17dcc <Amigo_Command+0x5be>
   17cb8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("[AMIGO Write Buffered Command]\n");
   17cbc:	85 ff       	sbrs	r24, 5
   17cbe:	0a c0       	rjmp	.+20     	; 0x17cd4 <Amigo_Command+0x4c6>
   17cc0:	83 e5       	ldi	r24, 0x53	; 83
   17cc2:	99 e2       	ldi	r25, 0x29	; 41
   17cc4:	1f 92       	push	r1
   17cc6:	9f 93       	push	r25
   17cc8:	8f 93       	push	r24
   17cca:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17cce:	0f 90       	pop	r0
   17cd0:	0f 90       	pop	r0
   17cd2:	0f 90       	pop	r0
   17cd4:	80 91 eb 1b 	lds	r24, 0x1BEB	; 0x801beb <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_WRITE_BUFFERED;
   17cd8:	86 dd       	rcall	.-1268   	; 0x177e6 <amigo_check_unit>
   17cda:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOs>
   17cde:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x6A)
   17ce2:	89 e0       	ldi	r24, 0x09	; 9
   17ce4:	42 c0       	rjmp	.+132    	; 0x17d6a <Amigo_Command+0x55c>
   17ce6:	9a e6       	ldi	r25, 0x6A	; 106
   17ce8:	e9 16       	cp	r14, r25
   17cea:	f1 04       	cpc	r15, r1
    {
        if(op == 0x08 && len == 2)
   17cec:	09 f0       	breq	.+2      	; 0x17cf0 <Amigo_Command+0x4e2>
   17cee:	47 c0       	rjmp	.+142    	; 0x17d7e <Amigo_Command+0x570>
   17cf0:	68 30       	cpi	r22, 0x08	; 8
   17cf2:	f1 f4       	brne	.+60     	; 0x17d30 <Amigo_Command+0x522>
   17cf4:	02 30       	cpi	r16, 0x02	; 2
   17cf6:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   17cf8:	09 f0       	breq	.+2      	; 0x17cfc <Amigo_Command+0x4ee>
   17cfa:	68 c0       	rjmp	.+208    	; 0x17dcc <Amigo_Command+0x5be>
   17cfc:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("[AMIGO Request Status Unbuffered Command]\n");
   17d00:	85 ff       	sbrs	r24, 5
   17d02:	0a c0       	rjmp	.+20     	; 0x17d18 <Amigo_Command+0x50a>
   17d04:	88 e2       	ldi	r24, 0x28	; 40
   17d06:	99 e2       	ldi	r25, 0x29	; 41
   17d08:	1f 92       	push	r1
   17d0a:	9f 93       	push	r25
   17d0c:	8f 93       	push	r24
   17d0e:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17d12:	0f 90       	pop	r0
   17d14:	0f 90       	pop	r0
   17d16:	0f 90       	pop	r0
   17d18:	80 91 eb 1b 	lds	r24, 0x1BEB	; 0x801beb <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_REQUEST_STATUS_UNBUFFERED;
   17d1c:	64 dd       	rcall	.-1336   	; 0x177e6 <amigo_check_unit>
   17d1e:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOs>
   17d22:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOs+0x1>
            amigo_request_status();
   17d26:	82 e0       	ldi	r24, 0x02	; 2
   17d28:	80 83       	st	Z, r24
   17d2a:	0e 94 2e b6 	call	0x16c5c	; 0x16c5c <amigo_request_status>
            return(status & ERROR_MASK);
        }
        if(op == 0x05 && len == 2)
   17d2e:	49 c0       	rjmp	.+146    	; 0x17dc2 <Amigo_Command+0x5b4>
   17d30:	65 30       	cpi	r22, 0x05	; 5
   17d32:	09 f0       	breq	.+2      	; 0x17d36 <Amigo_Command+0x528>
   17d34:	4b c0       	rjmp	.+150    	; 0x17dcc <Amigo_Command+0x5be>
   17d36:	02 30       	cpi	r16, 0x02	; 2
   17d38:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   17d3a:	09 f0       	breq	.+2      	; 0x17d3e <Amigo_Command+0x530>
   17d3c:	47 c0       	rjmp	.+142    	; 0x17dcc <Amigo_Command+0x5be>
   17d3e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("[AMIGO Read Buffered Command]\n");
   17d42:	85 ff       	sbrs	r24, 5
   17d44:	0a c0       	rjmp	.+20     	; 0x17d5a <Amigo_Command+0x54c>
   17d46:	89 e0       	ldi	r24, 0x09	; 9
   17d48:	99 e2       	ldi	r25, 0x29	; 41
   17d4a:	1f 92       	push	r1
   17d4c:	9f 93       	push	r25
   17d4e:	8f 93       	push	r24
   17d50:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17d54:	0f 90       	pop	r0
   17d56:	0f 90       	pop	r0
   17d58:	0f 90       	pop	r0
   17d5a:	80 91 eb 1b 	lds	r24, 0x1BEB	; 0x801beb <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_READ_BUFFERED;
   17d5e:	43 dd       	rcall	.-1402   	; 0x177e6 <amigo_check_unit>
   17d60:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOs>
   17d64:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
   17d68:	87 e0       	ldi	r24, 0x07	; 7
   17d6a:	80 83       	st	Z, r24
   17d6c:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <AMIGOp>
   17d70:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <AMIGOp+0x1>
   17d74:	81 81       	ldd	r24, Z+1	; 0x01
   17d76:	90 e0       	ldi	r25, 0x00	; 0
   17d78:	0e 94 94 86 	call	0x10d28	; 0x10d28 <gpib_enable_PPR>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x6C)
   17d7c:	22 c0       	rjmp	.+68     	; 0x17dc2 <Amigo_Command+0x5b4>
   17d7e:	8c e6       	ldi	r24, 0x6C	; 108
   17d80:	e8 16       	cp	r14, r24
    {
        if(op == 0x18 && len == 5)
   17d82:	f1 04       	cpc	r15, r1
   17d84:	d1 f4       	brne	.+52     	; 0x17dba <Amigo_Command+0x5ac>
   17d86:	68 31       	cpi	r22, 0x18	; 24
   17d88:	09 f5       	brne	.+66     	; 0x17dcc <Amigo_Command+0x5be>
   17d8a:	05 30       	cpi	r16, 0x05	; 5
        {
///  Reference: A48 ..  A50

            uint8_t db;
#if SDEBUG
            if(debuglevel & 32)
   17d8c:	11 05       	cpc	r17, r1
   17d8e:	f1 f4       	brne	.+60     	; 0x17dcc <Amigo_Command+0x5be>
   17d90:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("[AMIGO Format]\n");
   17d94:	85 ff       	sbrs	r24, 5
   17d96:	0a c0       	rjmp	.+20     	; 0x17dac <Amigo_Command+0x59e>
   17d98:	89 ef       	ldi	r24, 0xF9	; 249
   17d9a:	98 e2       	ldi	r25, 0x28	; 40
   17d9c:	1f 92       	push	r1
   17d9e:	9f 93       	push	r25
   17da0:	8f 93       	push	r24
   17da2:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17da6:	0f 90       	pop	r0
   17da8:	0f 90       	pop	r0
   17daa:	0f 90       	pop	r0
            ++ptr; // override not used
            ++ptr; // interleave not used
            db = 0xff & *ptr++;
            amigo_format(db);
   17dac:	80 91 eb 1b 	lds	r24, 0x1BEB	; 0x801beb <gpib_iobuff+0x1>
   17db0:	1a dd       	rcall	.-1484   	; 0x177e6 <amigo_check_unit>
   17db2:	80 91 ee 1b 	lds	r24, 0x1BEE	; 0x801bee <gpib_iobuff+0x4>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x70)                   // HP-300 Clear
   17db6:	4b d9       	rcall	.-3434   	; 0x1704e <amigo_format>
   17db8:	04 c0       	rjmp	.+8      	; 0x17dc2 <Amigo_Command+0x5b4>
    {
///  Reference: A23
        ++ptr;                                    // Dummy byte
        return(status & ERROR_MASK);
   17dba:	90 e7       	ldi	r25, 0x70	; 112
   17dbc:	e9 16       	cp	r14, r25
   17dbe:	f1 04       	cpc	r15, r1
   17dc0:	29 f4       	brne	.+10     	; 0x17dcc <Amigo_Command+0x5be>
   17dc2:	8a 89       	ldd	r24, Y+18	; 0x12
    }
    return ( amigo_todo_op(secondary, op, len) );
   17dc4:	9b 89       	ldd	r25, Y+19	; 0x13
   17dc6:	88 27       	eor	r24, r24
   17dc8:	90 7d       	andi	r25, 0xD0	; 208
   17dca:	03 c0       	rjmp	.+6      	; 0x17dd2 <Amigo_Command+0x5c4>
}
   17dcc:	a8 01       	movw	r20, r16
   17dce:	8e 2d       	mov	r24, r14
   17dd0:	d1 db       	rcall	.-2142   	; 0x17574 <amigo_todo_op>
   17dd2:	63 96       	adiw	r28, 0x13	; 19
   17dd4:	e6 e0       	ldi	r30, 0x06	; 6
   17dd6:	0c 94 1b e6 	jmp	0x1cc36	; 0x1cc36 <__epilogue_restores__+0x18>

00017dda <Amigo_Execute>:
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)


int Amigo_Execute( int secondary )
{
   17dda:	cf 93       	push	r28
   17ddc:	df 93       	push	r29
   17dde:	ec 01       	movw	r28, r24
#if SDEBUG
    if(debuglevel & 32)
   17de0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17de4:	85 ff       	sbrs	r24, 5
   17de6:	19 c0       	rjmp	.+50     	; 0x17e1a <Amigo_Execute+0x40>
        printf("[AMIGO Execute(%02XH): listen:%02XH, talk:%02XH]\n",
   17de8:	80 91 ee 1d 	lds	r24, 0x1DEE	; 0x801dee <talking>
   17dec:	1f 92       	push	r1
   17dee:	8f 93       	push	r24
   17df0:	80 91 f0 1d 	lds	r24, 0x1DF0	; 0x801df0 <listening>
   17df4:	1f 92       	push	r1
   17df6:	8f 93       	push	r24
   17df8:	df 93       	push	r29
   17dfa:	cf 93       	push	r28
   17dfc:	87 ec       	ldi	r24, 0xC7	; 199
   17dfe:	98 e2       	ldi	r25, 0x28	; 40
   17e00:	1f 92       	push	r1
   17e02:	9f 93       	push	r25
   17e04:	8f 93       	push	r24
   17e06:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   17e0a:	8d b7       	in	r24, 0x3d	; 61
   17e0c:	9e b7       	in	r25, 0x3e	; 62
   17e0e:	09 96       	adiw	r24, 0x09	; 9
   17e10:	0f b6       	in	r0, 0x3f	; 63
   17e12:	f8 94       	cli
   17e14:	9e bf       	out	0x3e, r25	; 62
   17e16:	0f be       	out	0x3f, r0	; 63
   17e18:	8d bf       	out	0x3d, r24	; 61
            secondary, listening, talking);
#endif

    if(talking == UNT)
   17e1a:	80 91 ee 1d 	lds	r24, 0x1DEE	; 0x801dee <talking>
   17e1e:	8f 35       	cpi	r24, 0x5F	; 95
   17e20:	09 f4       	brne	.+2      	; 0x17e24 <Amigo_Execute+0x4a>
   17e22:	ad c0       	rjmp	.+346    	; 0x17f7e <Amigo_Execute+0x1a4>
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   17e24:	90 e0       	ldi	r25, 0x00	; 0
   17e26:	0e 94 dd 8c 	call	0x119ba	; 0x119ba <AMIGO_is_MTA>
   17e2a:	89 2b       	or	r24, r25
   17e2c:	39 f0       	breq	.+14     	; 0x17e3c <Amigo_Execute+0x62>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
   17e2e:	ce 01       	movw	r24, r28
   17e30:	87 7f       	andi	r24, 0xF7	; 247
   17e32:	80 36       	cpi	r24, 0x60	; 96
   17e34:	91 05       	cpc	r25, r1
   17e36:	09 f0       	breq	.+2      	; 0x17e3a <Amigo_Execute+0x60>
   17e38:	a2 c0       	rjmp	.+324    	; 0x17f7e <Amigo_Execute+0x1a4>
   17e3a:	08 c0       	rjmp	.+16     	; 0x17e4c <Amigo_Execute+0x72>
#endif

    if(talking == UNT)
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   17e3c:	80 91 f0 1d 	lds	r24, 0x1DF0	; 0x801df0 <listening>
   17e40:	90 e0       	ldi	r25, 0x00	; 0
   17e42:	0e 94 ce 8c 	call	0x1199c	; 0x1199c <AMIGO_is_MLA>
   17e46:	89 2b       	or	r24, r25
   17e48:	91 f7       	brne	.-28     	; 0x17e2e <Amigo_Execute+0x54>
   17e4a:	99 c0       	rjmp	.+306    	; 0x17f7e <Amigo_Execute+0x1a4>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17e4c:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <AMIGOp>
   17e50:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <AMIGOp+0x1>
   17e54:	81 81       	ldd	r24, Z+1	; 0x01
   17e56:	90 e0       	ldi	r25, 0x00	; 0
   17e58:	0e 94 c5 86 	call	0x10d8a	; 0x10d8a <gpib_disable_PPR>

    if(secondary == 0x60)
   17e5c:	c0 36       	cpi	r28, 0x60	; 96
   17e5e:	d1 05       	cpc	r29, r1
   17e60:	09 f0       	breq	.+2      	; 0x17e64 <Amigo_Execute+0x8a>
   17e62:	4e c0       	rjmp	.+156    	; 0x17f00 <Amigo_Execute+0x126>
    {
        switch(AMIGOs->state)
   17e64:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOs>
   17e68:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOs+0x1>
   17e6c:	e0 81       	ld	r30, Z
   17e6e:	8e 2f       	mov	r24, r30
   17e70:	90 e0       	ldi	r25, 0x00	; 0
   17e72:	8b 30       	cpi	r24, 0x0B	; 11
   17e74:	91 05       	cpc	r25, r1
   17e76:	08 f0       	brcs	.+2      	; 0x17e7a <Amigo_Execute+0xa0>
   17e78:	41 c0       	rjmp	.+130    	; 0x17efc <Amigo_Execute+0x122>
   17e7a:	fc 01       	movw	r30, r24
   17e7c:	e0 52       	subi	r30, 0x20	; 32
   17e7e:	ff 4f       	sbci	r31, 0xFF	; 255
   17e80:	0c 94 af e5 	jmp	0x1cb5e	; 0x1cb5e <__tablejump2__>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_COLD_LOAD_READ:
#if SDEBUG
                if(debuglevel & 32)
   17e84:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17e88:	85 ff       	sbrs	r24, 5
   17e8a:	18 c0       	rjmp	.+48     	; 0x17ebc <Amigo_Execute+0xe2>
                    printf("[AMIGO Execute Cold Load Read]\n");
   17e8c:	87 ea       	ldi	r24, 0xA7	; 167
   17e8e:	98 e2       	ldi	r25, 0x28	; 40
   17e90:	0d c0       	rjmp	.+26     	; 0x17eac <Amigo_Execute+0xd2>
#endif
                return ( amigo_buffered_read() );
            case AMIGO_READ_UNBUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   17e92:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17e96:	85 ff       	sbrs	r24, 5
   17e98:	11 c0       	rjmp	.+34     	; 0x17ebc <Amigo_Execute+0xe2>
                    printf("[AMIGO Execute Read Unbuffered]\n");
   17e9a:	86 e8       	ldi	r24, 0x86	; 134
   17e9c:	98 e2       	ldi	r25, 0x28	; 40
   17e9e:	06 c0       	rjmp	.+12     	; 0x17eac <Amigo_Execute+0xd2>
#endif
                return ( amigo_buffered_read() );
            case AMIGO_READ_BUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   17ea0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17ea4:	85 ff       	sbrs	r24, 5
   17ea6:	0a c0       	rjmp	.+20     	; 0x17ebc <Amigo_Execute+0xe2>
                    printf("[AMIGO Execute Read Buffered]\n");
   17ea8:	87 e6       	ldi	r24, 0x67	; 103
   17eaa:	98 e2       	ldi	r25, 0x28	; 40
   17eac:	1f 92       	push	r1
   17eae:	9f 93       	push	r25
   17eb0:	8f 93       	push	r24
   17eb2:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   17eb6:	0f 90       	pop	r0
   17eb8:	0f 90       	pop	r0
#endif
                return ( amigo_buffered_read() );
   17eba:	0f 90       	pop	r0
   17ebc:	5a d9       	rcall	.-3404   	; 0x17172 <amigo_buffered_read>
            case AMIGO_WRITE_UNBUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   17ebe:	61 c0       	rjmp	.+194    	; 0x17f82 <Amigo_Execute+0x1a8>
   17ec0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17ec4:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Write Unbuffered]\n");
   17ec6:	18 c0       	rjmp	.+48     	; 0x17ef8 <Amigo_Execute+0x11e>
   17ec8:	85 e4       	ldi	r24, 0x45	; 69
   17eca:	98 e2       	ldi	r25, 0x28	; 40
#endif
                return ( amigo_buffered_write() );
            case AMIGO_INITIALIZE:
#if SDEBUG
                if(debuglevel & 32)
   17ecc:	0d c0       	rjmp	.+26     	; 0x17ee8 <Amigo_Execute+0x10e>
   17ece:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17ed2:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Initialize]\n");
   17ed4:	11 c0       	rjmp	.+34     	; 0x17ef8 <Amigo_Execute+0x11e>
   17ed6:	89 e2       	ldi	r24, 0x29	; 41
   17ed8:	98 e2       	ldi	r25, 0x28	; 40
#endif
                return ( amigo_buffered_write() );
            case AMIGO_WRITE_BUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   17eda:	06 c0       	rjmp	.+12     	; 0x17ee8 <Amigo_Execute+0x10e>
   17edc:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17ee0:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Write Buffered]\n");
   17ee2:	0a c0       	rjmp	.+20     	; 0x17ef8 <Amigo_Execute+0x11e>
   17ee4:	89 e0       	ldi	r24, 0x09	; 9
   17ee6:	98 e2       	ldi	r25, 0x28	; 40
   17ee8:	1f 92       	push	r1
   17eea:	9f 93       	push	r25
   17eec:	8f 93       	push	r24
   17eee:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   17ef2:	0f 90       	pop	r0
#endif
                return ( amigo_buffered_write() );
   17ef4:	0f 90       	pop	r0
   17ef6:	0f 90       	pop	r0
   17ef8:	00 da       	rcall	.-3072   	; 0x172fa <amigo_buffered_write>
            default:
                return ( amigo_todo(secondary) );
   17efa:	43 c0       	rjmp	.+134    	; 0x17f82 <Amigo_Execute+0x1a8>
   17efc:	80 e6       	ldi	r24, 0x60	; 96
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    if(secondary == 0x68)
   17efe:	3d c0       	rjmp	.+122    	; 0x17f7a <Amigo_Execute+0x1a0>
   17f00:	c8 36       	cpi	r28, 0x68	; 104
   17f02:	d1 05       	cpc	r29, r1
    {
        switch(AMIGOs->state)
   17f04:	e1 f5       	brne	.+120    	; 0x17f7e <Amigo_Execute+0x1a4>
   17f06:	e0 91 67 18 	lds	r30, 0x1867	; 0x801867 <AMIGOs>
   17f0a:	f0 91 68 18 	lds	r31, 0x1868	; 0x801868 <AMIGOs+0x1>
   17f0e:	80 81       	ld	r24, Z
   17f10:	82 30       	cpi	r24, 0x02	; 2
   17f12:	81 f0       	breq	.+32     	; 0x17f34 <Amigo_Execute+0x15a>
   17f14:	18 f4       	brcc	.+6      	; 0x17f1c <Amigo_Execute+0x142>
   17f16:	88 23       	and	r24, r24
   17f18:	91 f1       	breq	.+100    	; 0x17f7e <Amigo_Execute+0x1a4>
   17f1a:	2e c0       	rjmp	.+92     	; 0x17f78 <Amigo_Execute+0x19e>
   17f1c:	83 30       	cpi	r24, 0x03	; 3
   17f1e:	19 f0       	breq	.+6      	; 0x17f26 <Amigo_Execute+0x14c>
   17f20:	84 30       	cpi	r24, 0x04	; 4
   17f22:	c9 f0       	breq	.+50     	; 0x17f56 <Amigo_Execute+0x17c>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_REQUEST_STATUS_BUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   17f24:	29 c0       	rjmp	.+82     	; 0x17f78 <Amigo_Execute+0x19e>
   17f26:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17f2a:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Request Status Buffered]\n");
   17f2c:	11 c0       	rjmp	.+34     	; 0x17f50 <Amigo_Execute+0x176>
   17f2e:	80 ee       	ldi	r24, 0xE0	; 224
   17f30:	97 e2       	ldi	r25, 0x27	; 39
#endif
                return ( amigo_send_status() );
            case AMIGO_REQUEST_STATUS_UNBUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   17f32:	06 c0       	rjmp	.+12     	; 0x17f40 <Amigo_Execute+0x166>
   17f34:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17f38:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Exicute Request Status Unbuffered]\n");
   17f3a:	0a c0       	rjmp	.+20     	; 0x17f50 <Amigo_Execute+0x176>
   17f3c:	85 eb       	ldi	r24, 0xB5	; 181
   17f3e:	97 e2       	ldi	r25, 0x27	; 39
   17f40:	1f 92       	push	r1
   17f42:	9f 93       	push	r25
   17f44:	8f 93       	push	r24
   17f46:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   17f4a:	0f 90       	pop	r0
   17f4c:	0f 90       	pop	r0
#endif
                return ( amigo_send_status() );
   17f4e:	0f 90       	pop	r0
   17f50:	0e 94 e4 b6 	call	0x16dc8	; 0x16dc8 <amigo_send_status>
            case AMIGO_REQUEST_LOGICAL_ADDRESS:
#if SDEBUG
                if(debuglevel & 32)
   17f54:	16 c0       	rjmp	.+44     	; 0x17f82 <Amigo_Execute+0x1a8>
   17f56:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17f5a:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Request Logical Address]\n");
   17f5c:	0a c0       	rjmp	.+20     	; 0x17f72 <Amigo_Execute+0x198>
   17f5e:	8c e8       	ldi	r24, 0x8C	; 140
   17f60:	97 e2       	ldi	r25, 0x27	; 39
   17f62:	1f 92       	push	r1
   17f64:	9f 93       	push	r25
   17f66:	8f 93       	push	r24
   17f68:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   17f6c:	0f 90       	pop	r0
   17f6e:	0f 90       	pop	r0
#endif
                return ( amigo_send_logical_address() );
   17f70:	0f 90       	pop	r0
   17f72:	0e 94 86 b6 	call	0x16d0c	; 0x16d0c <amigo_send_logical_address>
            default:
                return ( amigo_todo(secondary) );
   17f76:	05 c0       	rjmp	.+10     	; 0x17f82 <Amigo_Execute+0x1a8>
   17f78:	88 e6       	ldi	r24, 0x68	; 104
   17f7a:	a5 db       	rcall	.-2230   	; 0x176c6 <amigo_todo>
    if(secondary == 0x68)
    {
        switch(AMIGOs->state)
        {
            case AMIGO_IDLE:
                return(0);
   17f7c:	02 c0       	rjmp	.+4      	; 0x17f82 <Amigo_Execute+0x1a8>
   17f7e:	80 e0       	ldi	r24, 0x00	; 0
                return ( amigo_todo(secondary) );
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    return(0);
}
   17f80:	90 e0       	ldi	r25, 0x00	; 0
   17f82:	df 91       	pop	r29
   17f84:	cf 91       	pop	r28
   17f86:	08 95       	ret

00017f88 <AMIGO_COMMANDS>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{
   17f88:	cf 93       	push	r28
   17f8a:	df 93       	push	r29
   17f8c:	c8 2f       	mov	r28, r24

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   17f8e:	80 91 ee 1d 	lds	r24, 0x1DEE	; 0x801dee <talking>
   17f92:	90 e0       	ldi	r25, 0x00	; 0
   17f94:	0e 94 dd 8c 	call	0x119ba	; 0x119ba <AMIGO_is_MTA>
   17f98:	89 2b       	or	r24, r25
   17f9a:	51 f0       	breq	.+20     	; 0x17fb0 <AMIGO_COMMANDS+0x28>
    {

        if(talking == UNT && AMIGO_is_MLA(listening))
   17f9c:	80 91 ee 1d 	lds	r24, 0x1DEE	; 0x801dee <talking>
   17fa0:	8f 35       	cpi	r24, 0x5F	; 95
   17fa2:	71 f4       	brne	.+28     	; 0x17fc0 <AMIGO_COMMANDS+0x38>
   17fa4:	80 91 f0 1d 	lds	r24, 0x1DF0	; 0x801df0 <listening>
   17fa8:	90 e0       	ldi	r25, 0x00	; 0
   17faa:	0e 94 ce 8c 	call	0x1199c	; 0x1199c <AMIGO_is_MLA>
   17fae:	08 c0       	rjmp	.+16     	; 0x17fc0 <AMIGO_COMMANDS+0x38>
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   17fb0:	80 91 f0 1d 	lds	r24, 0x1DF0	; 0x801df0 <listening>
   17fb4:	90 e0       	ldi	r25, 0x00	; 0
   17fb6:	0e 94 ce 8c 	call	0x1199c	; 0x1199c <AMIGO_is_MLA>
   17fba:	89 2b       	or	r24, r25
   17fbc:	79 f7       	brne	.-34     	; 0x17f9c <AMIGO_COMMANDS+0x14>
   17fbe:	76 c0       	rjmp	.+236    	; 0x180ac <AMIGO_COMMANDS+0x124>

        if(talking == UNT && AMIGO_is_MLA(listening))
        {
            // printf("AMIGO COMMANDS %02XH NO TALK ADDRESS!\n", ch);
        }
        if(listening == 0 && AMIGO_is_MTA(talking))
   17fc0:	80 91 f0 1d 	lds	r24, 0x1DF0	; 0x801df0 <listening>
   17fc4:	81 11       	cpse	r24, r1
   17fc6:	05 c0       	rjmp	.+10     	; 0x17fd2 <AMIGO_COMMANDS+0x4a>
   17fc8:	80 91 ee 1d 	lds	r24, 0x1DEE	; 0x801dee <talking>
   17fcc:	90 e0       	ldi	r25, 0x00	; 0
   17fce:	0e 94 dd 8c 	call	0x119ba	; 0x119ba <AMIGO_is_MTA>
        {
            // printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   17fd2:	c0 36       	cpi	r28, 0x60	; 96
   17fd4:	99 f4       	brne	.+38     	; 0x17ffc <AMIGO_COMMANDS+0x74>
   17fd6:	80 91 ee 1d 	lds	r24, 0x1DEE	; 0x801dee <talking>
   17fda:	90 e0       	ldi	r25, 0x00	; 0
   17fdc:	0e 94 dd 8c 	call	0x119ba	; 0x119ba <AMIGO_is_MTA>
   17fe0:	89 2b       	or	r24, r25
   17fe2:	19 f0       	breq	.+6      	; 0x17fea <AMIGO_COMMANDS+0x62>
        {
            return (Amigo_Execute(ch) );
   17fe4:	80 e6       	ldi	r24, 0x60	; 96
   17fe6:	90 e0       	ldi	r25, 0x00	; 0
   17fe8:	14 c0       	rjmp	.+40     	; 0x18012 <AMIGO_COMMANDS+0x8a>
        if(listening == 0 && AMIGO_is_MTA(talking))
        {
            // printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   17fea:	80 91 f0 1d 	lds	r24, 0x1DF0	; 0x801df0 <listening>
   17fee:	90 e0       	ldi	r25, 0x00	; 0
   17ff0:	0e 94 ce 8c 	call	0x1199c	; 0x1199c <AMIGO_is_MLA>
   17ff4:	89 2b       	or	r24, r25
   17ff6:	09 f4       	brne	.+2      	; 0x17ffa <AMIGO_COMMANDS+0x72>
   17ff8:	59 c0       	rjmp	.+178    	; 0x180ac <AMIGO_COMMANDS+0x124>
   17ffa:	f4 cf       	rjmp	.-24     	; 0x17fe4 <AMIGO_COMMANDS+0x5c>
        {
            return (Amigo_Execute(ch) );
        }

        if(ch == 0x68 && AMIGO_is_MTA(talking) )
   17ffc:	c8 36       	cpi	r28, 0x68	; 104
   17ffe:	c1 f4       	brne	.+48     	; 0x18030 <AMIGO_COMMANDS+0xa8>
   18000:	80 91 ee 1d 	lds	r24, 0x1DEE	; 0x801dee <talking>
   18004:	90 e0       	ldi	r25, 0x00	; 0
   18006:	0e 94 dd 8c 	call	0x119ba	; 0x119ba <AMIGO_is_MTA>
   1800a:	89 2b       	or	r24, r25
   1800c:	21 f0       	breq	.+8      	; 0x18016 <AMIGO_COMMANDS+0x8e>
        {
            return (Amigo_Execute(ch) );
   1800e:	88 e6       	ldi	r24, 0x68	; 104
   18010:	90 e0       	ldi	r25, 0x00	; 0
   18012:	e3 de       	rcall	.-570    	; 0x17dda <Amigo_Execute>
   18014:	0b c0       	rjmp	.+22     	; 0x1802c <AMIGO_COMMANDS+0xa4>
        }

        if(ch == 0x68 && AMIGO_is_MLA(listening) ) // Single byte command
   18016:	80 91 f0 1d 	lds	r24, 0x1DF0	; 0x801df0 <listening>
   1801a:	90 e0       	ldi	r25, 0x00	; 0
   1801c:	0e 94 ce 8c 	call	0x1199c	; 0x1199c <AMIGO_is_MLA>
   18020:	89 2b       	or	r24, r25
   18022:	09 f4       	brne	.+2      	; 0x18026 <AMIGO_COMMANDS+0x9e>
   18024:	43 c0       	rjmp	.+134    	; 0x180ac <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   18026:	88 e6       	ldi	r24, 0x68	; 104
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) ) // Single byte command
        {
            return (Amigo_Command(ch) );
   18028:	90 e0       	ldi	r25, 0x00	; 0
   1802a:	f1 db       	rcall	.-2078   	; 0x1780e <Amigo_Command>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
            return( amigo_cmd_dsj() );
   1802c:	ec 01       	movw	r28, r24
   1802e:	40 c0       	rjmp	.+128    	; 0x180b0 <AMIGO_COMMANDS+0x128>

        if(ch == 0x68 && AMIGO_is_MLA(listening) ) // Single byte command
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x69 && AMIGO_is_MLA(listening) ) // Single byte command
   18030:	c9 36       	cpi	r28, 0x69	; 105
   18032:	51 f4       	brne	.+20     	; 0x18048 <AMIGO_COMMANDS+0xc0>
   18034:	80 91 f0 1d 	lds	r24, 0x1DF0	; 0x801df0 <listening>
   18038:	90 e0       	ldi	r25, 0x00	; 0
   1803a:	0e 94 ce 8c 	call	0x1199c	; 0x1199c <AMIGO_is_MLA>
   1803e:	89 2b       	or	r24, r25
   18040:	a9 f1       	breq	.+106    	; 0x180ac <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   18042:	89 e6       	ldi	r24, 0x69	; 105
   18044:	90 e0       	ldi	r25, 0x00	; 0
   18046:	f1 cf       	rjmp	.-30     	; 0x1802a <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6a && AMIGO_is_MLA(listening) ) // Single byte command
   18048:	ca 36       	cpi	r28, 0x6A	; 106
   1804a:	51 f4       	brne	.+20     	; 0x18060 <AMIGO_COMMANDS+0xd8>
   1804c:	80 91 f0 1d 	lds	r24, 0x1DF0	; 0x801df0 <listening>
   18050:	90 e0       	ldi	r25, 0x00	; 0
   18052:	0e 94 ce 8c 	call	0x1199c	; 0x1199c <AMIGO_is_MLA>
   18056:	89 2b       	or	r24, r25
   18058:	49 f1       	breq	.+82     	; 0x180ac <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   1805a:	8a e6       	ldi	r24, 0x6A	; 106
   1805c:	90 e0       	ldi	r25, 0x00	; 0
   1805e:	e5 cf       	rjmp	.-54     	; 0x1802a <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) ) // Single byte command
   18060:	cc 36       	cpi	r28, 0x6C	; 108
   18062:	51 f4       	brne	.+20     	; 0x18078 <AMIGO_COMMANDS+0xf0>
   18064:	80 91 f0 1d 	lds	r24, 0x1DF0	; 0x801df0 <listening>
   18068:	90 e0       	ldi	r25, 0x00	; 0
   1806a:	0e 94 ce 8c 	call	0x1199c	; 0x1199c <AMIGO_is_MLA>
   1806e:	89 2b       	or	r24, r25
   18070:	e9 f0       	breq	.+58     	; 0x180ac <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   18072:	8c e6       	ldi	r24, 0x6C	; 108
   18074:	90 e0       	ldi	r25, 0x00	; 0
   18076:	d9 cf       	rjmp	.-78     	; 0x1802a <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
   18078:	c0 37       	cpi	r28, 0x70	; 112
   1807a:	c1 f4       	brne	.+48     	; 0x180ac <AMIGO_COMMANDS+0x124>
   1807c:	80 91 ee 1d 	lds	r24, 0x1DEE	; 0x801dee <talking>
   18080:	90 e0       	ldi	r25, 0x00	; 0
   18082:	0e 94 dd 8c 	call	0x119ba	; 0x119ba <AMIGO_is_MTA>
   18086:	ec 01       	movw	r28, r24
   18088:	89 2b       	or	r24, r25
   1808a:	51 f0       	breq	.+20     	; 0x180a0 <AMIGO_COMMANDS+0x118>
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
   1808c:	e0 91 69 18 	lds	r30, 0x1869	; 0x801869 <AMIGOp>
   18090:	f0 91 6a 18 	lds	r31, 0x186A	; 0x80186a <AMIGOp+0x1>
   18094:	81 81       	ldd	r24, Z+1	; 0x01
   18096:	90 e0       	ldi	r25, 0x00	; 0
   18098:	0e 94 c5 86 	call	0x10d8a	; 0x10d8a <gpib_disable_PPR>
            return( amigo_cmd_dsj() );
   1809c:	e6 d9       	rcall	.-3124   	; 0x1746a <amigo_cmd_dsj>
   1809e:	c6 cf       	rjmp	.-116    	; 0x1802c <AMIGO_COMMANDS+0xa4>
        }
        if(ch == 0x7e && ch == 0x7f)
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x70 && AMIGO_is_MLA(listening))
   180a0:	80 91 f0 1d 	lds	r24, 0x1DF0	; 0x801df0 <listening>
   180a4:	90 e0       	ldi	r25, 0x00	; 0
   180a6:	0e 94 ce 8c 	call	0x1199c	; 0x1199c <AMIGO_is_MLA>
   180aa:	02 c0       	rjmp	.+4      	; 0x180b0 <AMIGO_COMMANDS+0x128>
        {
            // NOP
        }
    }
    return(0);
   180ac:	c0 e0       	ldi	r28, 0x00	; 0
   180ae:	d0 e0       	ldi	r29, 0x00	; 0
}
   180b0:	ce 01       	movw	r24, r28
   180b2:	df 91       	pop	r29
   180b4:	cf 91       	pop	r28
   180b6:	08 95       	ret

000180b8 <printer_init>:
/// - Only called once after power on by main().
/// @return  void

void printer_init()
{
    plot.error = 0;
   180b8:	e2 ea       	ldi	r30, 0xA2	; 162
   180ba:	f8 e1       	ldi	r31, 0x18	; 24
   180bc:	10 86       	std	Z+8, r1	; 0x08
    plot.count = 0;
   180be:	10 82       	st	Z, r1
   180c0:	11 82       	std	Z+1, r1	; 0x01
   180c2:	12 82       	std	Z+2, r1	; 0x02
   180c4:	13 82       	std	Z+3, r1	; 0x03
    plot.ind = 0;
   180c6:	15 82       	std	Z+5, r1	; 0x05
   180c8:	14 82       	std	Z+4, r1	; 0x04
    plot.fp = NULL;
   180ca:	12 86       	std	Z+10, r1	; 0x0a
   180cc:	11 86       	std	Z+9, r1	; 0x09
    plot.buf = NULL;
   180ce:	14 86       	std	Z+12, r1	; 0x0c
   180d0:	13 86       	std	Z+11, r1	; 0x0b
   180d2:	08 95       	ret

000180d4 <receive_plot_flush>:
/// @see posix.h
/// @see printer_buffer()
/// @return  file handle

int receive_plot_flush()
{
   180d4:	cf 93       	push	r28
   180d6:	df 93       	push	r29
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
   180d8:	20 91 ab 18 	lds	r18, 0x18AB	; 0x8018ab <plot+0x9>
   180dc:	30 91 ac 18 	lds	r19, 0x18AC	; 0x8018ac <plot+0xa>
   180e0:	21 15       	cp	r18, r1
   180e2:	31 05       	cpc	r19, r1
   180e4:	09 f4       	brne	.+2      	; 0x180e8 <receive_plot_flush+0x14>
   180e6:	4a c0       	rjmp	.+148    	; 0x1817c <receive_plot_flush+0xa8>
   180e8:	80 91 a6 18 	lds	r24, 0x18A6	; 0x8018a6 <plot+0x4>
   180ec:	90 91 a7 18 	lds	r25, 0x18A7	; 0x8018a7 <plot+0x5>
   180f0:	00 97       	sbiw	r24, 0x00	; 0
   180f2:	09 f4       	brne	.+2      	; 0x180f6 <receive_plot_flush+0x22>
   180f4:	45 c0       	rjmp	.+138    	; 0x18180 <receive_plot_flush+0xac>
        return(0);

    ret  = fwrite(plot.buf, 1, plot.ind , plot.fp);
   180f6:	ac 01       	movw	r20, r24
   180f8:	61 e0       	ldi	r22, 0x01	; 1
   180fa:	70 e0       	ldi	r23, 0x00	; 0
   180fc:	80 91 ad 18 	lds	r24, 0x18AD	; 0x8018ad <plot+0xb>
   18100:	90 91 ae 18 	lds	r25, 0x18AE	; 0x8018ae <plot+0xc>
   18104:	0e 94 6b 7d 	call	0xfad6	; 0xfad6 <fwrite>
   18108:	ec 01       	movw	r28, r24
    if(ret != plot.ind)
   1810a:	80 91 a6 18 	lds	r24, 0x18A6	; 0x8018a6 <plot+0x4>
   1810e:	90 91 a7 18 	lds	r25, 0x18A7	; 0x8018a7 <plot+0x5>
   18112:	c8 17       	cp	r28, r24
   18114:	d9 07       	cpc	r29, r25
   18116:	31 f1       	breq	.+76     	; 0x18164 <receive_plot_flush+0x90>
    {
        if(debuglevel & (1+32))
   18118:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1811c:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   18120:	81 72       	andi	r24, 0x21	; 33
   18122:	99 27       	eor	r25, r25
   18124:	89 2b       	or	r24, r25
   18126:	d9 f0       	breq	.+54     	; 0x1815e <receive_plot_flush+0x8a>
        {
            perror("receive_plot_flush");
   18128:	89 e3       	ldi	r24, 0x39	; 57
   1812a:	95 e1       	ldi	r25, 0x15	; 21
   1812c:	0e 94 8d 79 	call	0xf31a	; 0xf31a <perror>
            printf("write failed: wanted %d, got:%d\n", plot.ind, ret);
   18130:	df 93       	push	r29
   18132:	cf 93       	push	r28
   18134:	80 91 a7 18 	lds	r24, 0x18A7	; 0x8018a7 <plot+0x5>
   18138:	8f 93       	push	r24
   1813a:	80 91 a6 18 	lds	r24, 0x18A6	; 0x8018a6 <plot+0x4>
   1813e:	8f 93       	push	r24
   18140:	80 e5       	ldi	r24, 0x50	; 80
   18142:	90 e3       	ldi	r25, 0x30	; 48
   18144:	1f 92       	push	r1
   18146:	9f 93       	push	r25
   18148:	8f 93       	push	r24
   1814a:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1814e:	8d b7       	in	r24, 0x3d	; 61
   18150:	9e b7       	in	r25, 0x3e	; 62
   18152:	07 96       	adiw	r24, 0x07	; 7
   18154:	0f b6       	in	r0, 0x3f	; 63
   18156:	f8 94       	cli
   18158:	9e bf       	out	0x3e, r25	; 62
   1815a:	0f be       	out	0x3f, r0	; 63
   1815c:	8d bf       	out	0x3d, r24	; 61
        }
        return(-1);
   1815e:	8f ef       	ldi	r24, 0xFF	; 255
   18160:	9f ef       	ldi	r25, 0xFF	; 255
   18162:	0e c0       	rjmp	.+28     	; 0x18180 <receive_plot_flush+0xac>
    }

    fno = fileno( plot.fp );
   18164:	80 91 ab 18 	lds	r24, 0x18AB	; 0x8018ab <plot+0x9>
   18168:	90 91 ac 18 	lds	r25, 0x18AC	; 0x8018ac <plot+0xa>
   1816c:	0e 94 d7 77 	call	0xefae	; 0xefae <fileno>
    if(fno < 0)
   18170:	97 fd       	sbrc	r25, 7
   18172:	f5 cf       	rjmp	.-22     	; 0x1815e <receive_plot_flush+0x8a>
        return(-1);
    ///@brief sync filesystem after every write 
    syncfs( fno );
   18174:	0e 94 b5 7c 	call	0xf96a	; 0xf96a <syncfs>
    return (ret);
   18178:	ce 01       	movw	r24, r28
   1817a:	02 c0       	rjmp	.+4      	; 0x18180 <receive_plot_flush+0xac>
{
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
        return(0);
   1817c:	80 e0       	ldi	r24, 0x00	; 0
   1817e:	90 e0       	ldi	r25, 0x00	; 0
    if(fno < 0)
        return(-1);
    ///@brief sync filesystem after every write 
    syncfs( fno );
    return (ret);
}
   18180:	df 91       	pop	r29
   18182:	cf 91       	pop	r28
   18184:	08 95       	ret

00018186 <printer_close>:
   18186:	a6 df       	rcall	.-180    	; 0x180d4 <receive_plot_flush>
   18188:	97 ff       	sbrs	r25, 7
   1818a:	03 c0       	rjmp	.+6      	; 0x18192 <printer_close+0xc>
   1818c:	81 e0       	ldi	r24, 0x01	; 1
   1818e:	80 93 aa 18 	sts	0x18AA, r24	; 0x8018aa <plot+0x8>
   18192:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   18196:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1819a:	81 72       	andi	r24, 0x21	; 33
   1819c:	99 27       	eor	r25, r25
   1819e:	89 2b       	or	r24, r25
   181a0:	71 f0       	breq	.+28     	; 0x181be <printer_close+0x38>
   181a2:	80 91 aa 18 	lds	r24, 0x18AA	; 0x8018aa <plot+0x8>
   181a6:	88 23       	and	r24, r24
   181a8:	51 f0       	breq	.+20     	; 0x181be <printer_close+0x38>
   181aa:	8f e7       	ldi	r24, 0x7F	; 127
   181ac:	90 e3       	ldi	r25, 0x30	; 48
   181ae:	1f 92       	push	r1
   181b0:	9f 93       	push	r25
   181b2:	8f 93       	push	r24
   181b4:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   181b8:	0f 90       	pop	r0
   181ba:	0f 90       	pop	r0
   181bc:	0f 90       	pop	r0
   181be:	80 91 ab 18 	lds	r24, 0x18AB	; 0x8018ab <plot+0x9>
   181c2:	90 91 ac 18 	lds	r25, 0x18AC	; 0x8018ac <plot+0xa>
   181c6:	00 97       	sbiw	r24, 0x00	; 0
   181c8:	09 f1       	breq	.+66     	; 0x1820c <printer_close+0x86>
   181ca:	0e 94 ed 7d 	call	0xfbda	; 0xfbda <fclose>
   181ce:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   181d2:	85 ff       	sbrs	r24, 5
   181d4:	1b c0       	rjmp	.+54     	; 0x1820c <printer_close+0x86>
   181d6:	80 91 a5 18 	lds	r24, 0x18A5	; 0x8018a5 <plot+0x3>
   181da:	8f 93       	push	r24
   181dc:	80 91 a4 18 	lds	r24, 0x18A4	; 0x8018a4 <plot+0x2>
   181e0:	8f 93       	push	r24
   181e2:	80 91 a3 18 	lds	r24, 0x18A3	; 0x8018a3 <plot+0x1>
   181e6:	8f 93       	push	r24
   181e8:	80 91 a2 18 	lds	r24, 0x18A2	; 0x8018a2 <plot>
   181ec:	8f 93       	push	r24
   181ee:	81 e7       	ldi	r24, 0x71	; 113
   181f0:	90 e3       	ldi	r25, 0x30	; 48
   181f2:	1f 92       	push	r1
   181f4:	9f 93       	push	r25
   181f6:	8f 93       	push	r24
   181f8:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   181fc:	8d b7       	in	r24, 0x3d	; 61
   181fe:	9e b7       	in	r25, 0x3e	; 62
   18200:	07 96       	adiw	r24, 0x07	; 7
   18202:	0f b6       	in	r0, 0x3f	; 63
   18204:	f8 94       	cli
   18206:	9e bf       	out	0x3e, r25	; 62
   18208:	0f be       	out	0x3f, r0	; 63
   1820a:	8d bf       	out	0x3d, r24	; 61
   1820c:	80 91 ad 18 	lds	r24, 0x18AD	; 0x8018ad <plot+0xb>
   18210:	90 91 ae 18 	lds	r25, 0x18AE	; 0x8018ae <plot+0xc>
   18214:	00 97       	sbiw	r24, 0x00	; 0
   18216:	11 f0       	breq	.+4      	; 0x1821c <printer_close+0x96>
   18218:	0e 94 d2 29 	call	0x53a4	; 0x53a4 <safefree>
   1821c:	4d cf       	rjmp	.-358    	; 0x180b8 <printer_init>
   1821e:	08 95       	ret

00018220 <printer_open>:
   18220:	ac e4       	ldi	r26, 0x4C	; 76
   18222:	b0 e0       	ldi	r27, 0x00	; 0
   18224:	e6 e1       	ldi	r30, 0x16	; 22
   18226:	f1 ec       	ldi	r31, 0xC1	; 193
   18228:	0c 94 f9 e5 	jmp	0x1cbf2	; 0x1cbf2 <__prologue_saves__+0xc>
   1822c:	8c 01       	movw	r16, r24
   1822e:	89 2b       	or	r24, r25
   18230:	09 f0       	breq	.+2      	; 0x18234 <printer_open+0x14>
   18232:	4b c0       	rjmp	.+150    	; 0x182ca <printer_open+0xaa>
   18234:	be 01       	movw	r22, r28
   18236:	6f 5b       	subi	r22, 0xBF	; 191
   18238:	7f 4f       	sbci	r23, 0xFF	; 255
   1823a:	80 e0       	ldi	r24, 0x00	; 0
   1823c:	90 e0       	ldi	r25, 0x00	; 0
   1823e:	0e 94 ef 34 	call	0x69de	; 0x69de <clock_gettime>
   18242:	25 96       	adiw	r28, 0x05	; 5
   18244:	8c ad       	ldd	r24, Y+60	; 0x3c
   18246:	9d ad       	ldd	r25, Y+61	; 0x3d
   18248:	ae ad       	ldd	r26, Y+62	; 0x3e
   1824a:	bf ad       	ldd	r27, Y+63	; 0x3f
   1824c:	25 97       	sbiw	r28, 0x05	; 5
   1824e:	2d 96       	adiw	r28, 0x0d	; 13
   18250:	8c af       	std	Y+60, r24	; 0x3c
   18252:	9d af       	std	Y+61, r25	; 0x3d
   18254:	ae af       	std	Y+62, r26	; 0x3e
   18256:	bf af       	std	Y+63, r27	; 0x3f
   18258:	2d 97       	sbiw	r28, 0x0d	; 13
   1825a:	ce 01       	movw	r24, r28
   1825c:	87 5b       	subi	r24, 0xB7	; 183
   1825e:	9f 4f       	sbci	r25, 0xFF	; 255
   18260:	0e 94 bf 38 	call	0x717e	; 0x717e <gmtime>
   18264:	8c 01       	movw	r16, r24
   18266:	fc 01       	movw	r30, r24
   18268:	90 80       	ld	r9, Z
   1826a:	81 80       	ldd	r8, Z+1	; 0x01
   1826c:	b2 80       	ldd	r11, Z+2	; 0x02
   1826e:	a3 80       	ldd	r10, Z+3	; 0x03
   18270:	d4 80       	ldd	r13, Z+4	; 0x04
   18272:	c5 80       	ldd	r12, Z+5	; 0x05
   18274:	e2 84       	ldd	r14, Z+10	; 0x0a
   18276:	f3 84       	ldd	r15, Z+11	; 0x0b
   18278:	f4 e9       	ldi	r31, 0x94	; 148
   1827a:	ef 1a       	sub	r14, r31
   1827c:	f8 ef       	ldi	r31, 0xF8	; 248
   1827e:	ff 0a       	sbc	r15, r31
   18280:	fc 01       	movw	r30, r24
   18282:	80 85       	ldd	r24, Z+8	; 0x08
   18284:	91 85       	ldd	r25, Z+9	; 0x09
   18286:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <tm_mon_to_ascii>
   1828a:	8f 92       	push	r8
   1828c:	9f 92       	push	r9
   1828e:	af 92       	push	r10
   18290:	bf 92       	push	r11
   18292:	cf 92       	push	r12
   18294:	df 92       	push	r13
   18296:	ff 92       	push	r15
   18298:	ef 92       	push	r14
   1829a:	9f 93       	push	r25
   1829c:	8f 93       	push	r24
   1829e:	f8 01       	movw	r30, r16
   182a0:	87 81       	ldd	r24, Z+7	; 0x07
   182a2:	8f 93       	push	r24
   182a4:	86 81       	ldd	r24, Z+6	; 0x06
   182a6:	8f 93       	push	r24
   182a8:	86 eb       	ldi	r24, 0xB6	; 182
   182aa:	90 e3       	ldi	r25, 0x30	; 48
   182ac:	1f 92       	push	r1
   182ae:	9f 93       	push	r25
   182b0:	8f 93       	push	r24
   182b2:	8e 01       	movw	r16, r28
   182b4:	0f 5f       	subi	r16, 0xFF	; 255
   182b6:	1f 4f       	sbci	r17, 0xFF	; 255
   182b8:	1f 93       	push	r17
   182ba:	0f 93       	push	r16
   182bc:	0e 94 4a 47 	call	0x8e94	; 0x8e94 <sprintf_P>
   182c0:	0f b6       	in	r0, 0x3f	; 63
   182c2:	f8 94       	cli
   182c4:	de bf       	out	0x3e, r29	; 62
   182c6:	0f be       	out	0x3f, r0	; 63
   182c8:	cd bf       	out	0x3d, r28	; 61
   182ca:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   182ce:	85 ff       	sbrs	r24, 5
   182d0:	0e c0       	rjmp	.+28     	; 0x182ee <printer_open+0xce>
   182d2:	1f 93       	push	r17
   182d4:	0f 93       	push	r16
   182d6:	80 ea       	ldi	r24, 0xA0	; 160
   182d8:	90 e3       	ldi	r25, 0x30	; 48
   182da:	1f 92       	push	r1
   182dc:	9f 93       	push	r25
   182de:	8f 93       	push	r24
   182e0:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   182e4:	0f 90       	pop	r0
   182e6:	0f 90       	pop	r0
   182e8:	0f 90       	pop	r0
   182ea:	0f 90       	pop	r0
   182ec:	0f 90       	pop	r0
   182ee:	64 e9       	ldi	r22, 0x94	; 148
   182f0:	78 e0       	ldi	r23, 0x08	; 8
   182f2:	c8 01       	movw	r24, r16
   182f4:	0e 94 43 7f 	call	0xfe86	; 0xfe86 <fopen>
   182f8:	90 93 ac 18 	sts	0x18AC, r25	; 0x8018ac <plot+0xa>
   182fc:	80 93 ab 18 	sts	0x18AB, r24	; 0x8018ab <plot+0x9>
   18300:	89 2b       	or	r24, r25
   18302:	b9 f4       	brne	.+46     	; 0x18332 <printer_open+0x112>
   18304:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   18308:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1830c:	81 72       	andi	r24, 0x21	; 33
   1830e:	99 27       	eor	r25, r25
   18310:	89 2b       	or	r24, r25
   18312:	11 f1       	breq	.+68     	; 0x18358 <printer_open+0x138>
   18314:	8b e1       	ldi	r24, 0x1B	; 27
   18316:	9d e0       	ldi	r25, 0x0D	; 13
   18318:	0e 94 8d 79 	call	0xf31a	; 0xf31a <perror>
   1831c:	84 e9       	ldi	r24, 0x94	; 148
   1831e:	90 e3       	ldi	r25, 0x30	; 48
   18320:	1f 92       	push	r1
   18322:	9f 93       	push	r25
   18324:	8f 93       	push	r24
   18326:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1832a:	0f 90       	pop	r0
   1832c:	0f 90       	pop	r0
   1832e:	0f 90       	pop	r0
   18330:	13 c0       	rjmp	.+38     	; 0x18358 <printer_open+0x138>
   18332:	61 e0       	ldi	r22, 0x01	; 1
   18334:	70 e0       	ldi	r23, 0x00	; 0
   18336:	81 e0       	ldi	r24, 0x01	; 1
   18338:	92 e0       	ldi	r25, 0x02	; 2
   1833a:	0e 94 89 29 	call	0x5312	; 0x5312 <safecalloc>
   1833e:	90 93 ae 18 	sts	0x18AE, r25	; 0x8018ae <plot+0xc>
   18342:	80 93 ad 18 	sts	0x18AD, r24	; 0x8018ad <plot+0xb>
   18346:	89 2b       	or	r24, r25
   18348:	09 f4       	brne	.+2      	; 0x1834c <printer_open+0x12c>
   1834a:	1d df       	rcall	.-454    	; 0x18186 <printer_close>
   1834c:	80 e0       	ldi	r24, 0x00	; 0
   1834e:	92 e0       	ldi	r25, 0x02	; 2
   18350:	90 93 a9 18 	sts	0x18A9, r25	; 0x8018a9 <plot+0x7>
   18354:	80 93 a8 18 	sts	0x18A8, r24	; 0x8018a8 <plot+0x6>
   18358:	c4 5b       	subi	r28, 0xB4	; 180
   1835a:	df 4f       	sbci	r29, 0xFF	; 255
   1835c:	ec e0       	ldi	r30, 0x0C	; 12
   1835e:	0c 94 15 e6 	jmp	0x1cc2a	; 0x1cc2a <__epilogue_restores__+0xc>

00018362 <printer_buffer>:
   18362:	cf 93       	push	r28
   18364:	df 93       	push	r29
   18366:	ec 01       	movw	r28, r24
   18368:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1836c:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   18370:	81 72       	andi	r24, 0x21	; 33
   18372:	99 27       	eor	r25, r25
   18374:	89 2b       	or	r24, r25
   18376:	e9 f0       	breq	.+58     	; 0x183b2 <printer_buffer+0x50>
   18378:	80 91 a2 18 	lds	r24, 0x18A2	; 0x8018a2 <plot>
   1837c:	90 91 a3 18 	lds	r25, 0x18A3	; 0x8018a3 <plot+0x1>
   18380:	20 91 a4 18 	lds	r18, 0x18A4	; 0x8018a4 <plot+0x2>
   18384:	30 91 a5 18 	lds	r19, 0x18A5	; 0x8018a5 <plot+0x3>
   18388:	81 11       	cpse	r24, r1
   1838a:	13 c0       	rjmp	.+38     	; 0x183b2 <printer_buffer+0x50>
   1838c:	3f 93       	push	r19
   1838e:	2f 93       	push	r18
   18390:	9f 93       	push	r25
   18392:	8f 93       	push	r24
   18394:	89 e4       	ldi	r24, 0x49	; 73
   18396:	90 e3       	ldi	r25, 0x30	; 48
   18398:	1f 92       	push	r1
   1839a:	9f 93       	push	r25
   1839c:	8f 93       	push	r24
   1839e:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   183a2:	8d b7       	in	r24, 0x3d	; 61
   183a4:	9e b7       	in	r25, 0x3e	; 62
   183a6:	07 96       	adiw	r24, 0x07	; 7
   183a8:	0f b6       	in	r0, 0x3f	; 63
   183aa:	f8 94       	cli
   183ac:	9e bf       	out	0x3e, r25	; 62
   183ae:	0f be       	out	0x3f, r0	; 63
   183b0:	8d bf       	out	0x3d, r24	; 61
   183b2:	ce 01       	movw	r24, r28
   183b4:	88 27       	eor	r24, r24
   183b6:	97 7f       	andi	r25, 0xF7	; 247
   183b8:	89 2b       	or	r24, r25
   183ba:	41 f0       	breq	.+16     	; 0x183cc <printer_buffer+0x6a>
   183bc:	8b de       	rcall	.-746    	; 0x180d4 <receive_plot_flush>
   183be:	89 2b       	or	r24, r25
   183c0:	09 f4       	brne	.+2      	; 0x183c4 <printer_buffer+0x62>
   183c2:	3f c0       	rjmp	.+126    	; 0x18442 <printer_buffer+0xe0>
   183c4:	81 e0       	ldi	r24, 0x01	; 1
   183c6:	80 93 aa 18 	sts	0x18AA, r24	; 0x8018aa <plot+0x8>
   183ca:	3b c0       	rjmp	.+118    	; 0x18442 <printer_buffer+0xe0>
   183cc:	20 91 ad 18 	lds	r18, 0x18AD	; 0x8018ad <plot+0xb>
   183d0:	30 91 ae 18 	lds	r19, 0x18AE	; 0x8018ae <plot+0xc>
   183d4:	80 91 a6 18 	lds	r24, 0x18A6	; 0x8018a6 <plot+0x4>
   183d8:	90 91 a7 18 	lds	r25, 0x18A7	; 0x8018a7 <plot+0x5>
   183dc:	ac 01       	movw	r20, r24
   183de:	4f 5f       	subi	r20, 0xFF	; 255
   183e0:	5f 4f       	sbci	r21, 0xFF	; 255
   183e2:	50 93 a7 18 	sts	0x18A7, r21	; 0x8018a7 <plot+0x5>
   183e6:	40 93 a6 18 	sts	0x18A6, r20	; 0x8018a6 <plot+0x4>
   183ea:	f9 01       	movw	r30, r18
   183ec:	e8 0f       	add	r30, r24
   183ee:	f9 1f       	adc	r31, r25
   183f0:	c0 83       	st	Z, r28
   183f2:	80 91 a2 18 	lds	r24, 0x18A2	; 0x8018a2 <plot>
   183f6:	90 91 a3 18 	lds	r25, 0x18A3	; 0x8018a3 <plot+0x1>
   183fa:	a0 91 a4 18 	lds	r26, 0x18A4	; 0x8018a4 <plot+0x2>
   183fe:	b0 91 a5 18 	lds	r27, 0x18A5	; 0x8018a5 <plot+0x3>
   18402:	01 96       	adiw	r24, 0x01	; 1
   18404:	a1 1d       	adc	r26, r1
   18406:	b1 1d       	adc	r27, r1
   18408:	80 93 a2 18 	sts	0x18A2, r24	; 0x8018a2 <plot>
   1840c:	90 93 a3 18 	sts	0x18A3, r25	; 0x8018a3 <plot+0x1>
   18410:	a0 93 a4 18 	sts	0x18A4, r26	; 0x8018a4 <plot+0x2>
   18414:	b0 93 a5 18 	sts	0x18A5, r27	; 0x8018a5 <plot+0x3>
   18418:	20 91 a6 18 	lds	r18, 0x18A6	; 0x8018a6 <plot+0x4>
   1841c:	30 91 a7 18 	lds	r19, 0x18A7	; 0x8018a7 <plot+0x5>
   18420:	80 91 a8 18 	lds	r24, 0x18A8	; 0x8018a8 <plot+0x6>
   18424:	90 91 a9 18 	lds	r25, 0x18A9	; 0x8018a9 <plot+0x7>
   18428:	28 17       	cp	r18, r24
   1842a:	39 07       	cpc	r19, r25
   1842c:	54 f0       	brlt	.+20     	; 0x18442 <printer_buffer+0xe0>
   1842e:	52 de       	rcall	.-860    	; 0x180d4 <receive_plot_flush>
   18430:	97 ff       	sbrs	r25, 7
   18432:	03 c0       	rjmp	.+6      	; 0x1843a <printer_buffer+0xd8>
   18434:	81 e0       	ldi	r24, 0x01	; 1
   18436:	80 93 aa 18 	sts	0x18AA, r24	; 0x8018aa <plot+0x8>
   1843a:	10 92 a7 18 	sts	0x18A7, r1	; 0x8018a7 <plot+0x5>
   1843e:	10 92 a6 18 	sts	0x18A6, r1	; 0x8018a6 <plot+0x4>
   18442:	df 91       	pop	r29
   18444:	cf 91       	pop	r28
   18446:	08 95       	ret

00018448 <PRINTER_COMMANDS>:
   18448:	cf 93       	push	r28
   1844a:	c8 2f       	mov	r28, r24
   1844c:	80 91 f0 1d 	lds	r24, 0x1DF0	; 0x801df0 <listening>
   18450:	90 e0       	ldi	r25, 0x00	; 0
   18452:	0e 94 fb 8c 	call	0x119f6	; 0x119f6 <PRINTER_is_MLA>
   18456:	89 2b       	or	r24, r25
   18458:	49 f0       	breq	.+18     	; 0x1846c <PRINTER_COMMANDS+0x24>
   1845a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1845e:	85 ff       	sbrs	r24, 5
   18460:	1e c0       	rjmp	.+60     	; 0x1849e <PRINTER_COMMANDS+0x56>
   18462:	1f 92       	push	r1
   18464:	cf 93       	push	r28
   18466:	8d e2       	ldi	r24, 0x2D	; 45
   18468:	90 e3       	ldi	r25, 0x30	; 48
   1846a:	0f c0       	rjmp	.+30     	; 0x1848a <PRINTER_COMMANDS+0x42>
   1846c:	80 91 ee 1d 	lds	r24, 0x1DEE	; 0x801dee <talking>
   18470:	90 e0       	ldi	r25, 0x00	; 0
   18472:	0e 94 0a 8d 	call	0x11a14	; 0x11a14 <PRINTER_is_MTA>
   18476:	89 2b       	or	r24, r25
   18478:	91 f0       	breq	.+36     	; 0x1849e <PRINTER_COMMANDS+0x56>
   1847a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1847e:	85 ff       	sbrs	r24, 5
   18480:	0e c0       	rjmp	.+28     	; 0x1849e <PRINTER_COMMANDS+0x56>
   18482:	1f 92       	push	r1
   18484:	cf 93       	push	r28
   18486:	83 e1       	ldi	r24, 0x13	; 19
   18488:	90 e3       	ldi	r25, 0x30	; 48
   1848a:	1f 92       	push	r1
   1848c:	9f 93       	push	r25
   1848e:	8f 93       	push	r24
   18490:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   18494:	0f 90       	pop	r0
   18496:	0f 90       	pop	r0
   18498:	0f 90       	pop	r0
   1849a:	0f 90       	pop	r0
   1849c:	0f 90       	pop	r0
   1849e:	80 e0       	ldi	r24, 0x00	; 0
   184a0:	90 e0       	ldi	r25, 0x00	; 0
   184a2:	cf 91       	pop	r28
   184a4:	08 95       	ret

000184a6 <lif_help>:
   184a6:	cf 93       	push	r28
   184a8:	df 93       	push	r29
   184aa:	ec 01       	movw	r28, r24
   184ac:	85 ef       	ldi	r24, 0xF5	; 245
   184ae:	94 e4       	ldi	r25, 0x44	; 68
   184b0:	1f 92       	push	r1
   184b2:	9f 93       	push	r25
   184b4:	8f 93       	push	r24
   184b6:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   184ba:	0f 90       	pop	r0
   184bc:	0f 90       	pop	r0
   184be:	0f 90       	pop	r0
   184c0:	cd 2b       	or	r28, r29
   184c2:	51 f0       	breq	.+20     	; 0x184d8 <lif_help+0x32>
   184c4:	8c e2       	ldi	r24, 0x2C	; 44
   184c6:	93 e4       	ldi	r25, 0x43	; 67
   184c8:	1f 92       	push	r1
   184ca:	9f 93       	push	r25
   184cc:	8f 93       	push	r24
   184ce:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   184d2:	0f 90       	pop	r0
   184d4:	0f 90       	pop	r0
   184d6:	0f 90       	pop	r0
   184d8:	df 91       	pop	r29
   184da:	cf 91       	pop	r28
   184dc:	08 95       	ret

000184de <lif_calloc>:
   184de:	ef 92       	push	r14
   184e0:	ff 92       	push	r15
   184e2:	0f 93       	push	r16
   184e4:	1f 93       	push	r17
   184e6:	cf 93       	push	r28
   184e8:	df 93       	push	r29
   184ea:	16 2f       	mov	r17, r22
   184ec:	07 2f       	mov	r16, r23
   184ee:	f8 2e       	mov	r15, r24
   184f0:	e9 2e       	mov	r14, r25
   184f2:	61 e0       	ldi	r22, 0x01	; 1
   184f4:	70 e0       	ldi	r23, 0x00	; 0
   184f6:	81 2f       	mov	r24, r17
   184f8:	90 2f       	mov	r25, r16
   184fa:	0e 94 89 29 	call	0x5312	; 0x5312 <safecalloc>
   184fe:	ec 01       	movw	r28, r24
   18500:	89 2b       	or	r24, r25
   18502:	99 f4       	brne	.+38     	; 0x1852a <lif_calloc+0x4c>
   18504:	ef 92       	push	r14
   18506:	ff 92       	push	r15
   18508:	0f 93       	push	r16
   1850a:	1f 93       	push	r17
   1850c:	82 ee       	ldi	r24, 0xE2	; 226
   1850e:	92 e4       	ldi	r25, 0x42	; 66
   18510:	1f 92       	push	r1
   18512:	9f 93       	push	r25
   18514:	8f 93       	push	r24
   18516:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1851a:	8d b7       	in	r24, 0x3d	; 61
   1851c:	9e b7       	in	r25, 0x3e	; 62
   1851e:	07 96       	adiw	r24, 0x07	; 7
   18520:	0f b6       	in	r0, 0x3f	; 63
   18522:	f8 94       	cli
   18524:	9e bf       	out	0x3e, r25	; 62
   18526:	0f be       	out	0x3f, r0	; 63
   18528:	8d bf       	out	0x3d, r24	; 61
   1852a:	ce 01       	movw	r24, r28
   1852c:	cd b7       	in	r28, 0x3d	; 61
   1852e:	de b7       	in	r29, 0x3e	; 62
   18530:	e6 e0       	ldi	r30, 0x06	; 6
   18532:	0c 94 1b e6 	jmp	0x1cc36	; 0x1cc36 <__epilogue_restores__+0x18>

00018536 <lif_free>:
   18536:	00 97       	sbiw	r24, 0x00	; 0
   18538:	59 f4       	brne	.+22     	; 0x18550 <lif_free+0x1a>
   1853a:	8a ec       	ldi	r24, 0xCA	; 202
   1853c:	92 e4       	ldi	r25, 0x42	; 66
   1853e:	1f 92       	push	r1
   18540:	9f 93       	push	r25
   18542:	8f 93       	push	r24
   18544:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   18548:	0f 90       	pop	r0
   1854a:	0f 90       	pop	r0
   1854c:	0f 90       	pop	r0
   1854e:	08 95       	ret
   18550:	0c 94 d2 29 	jmp	0x53a4	; 0x53a4 <safefree>
   18554:	08 95       	ret

00018556 <lif_stralloc>:
   18556:	0f 93       	push	r16
   18558:	1f 93       	push	r17
   1855a:	cf 93       	push	r28
   1855c:	df 93       	push	r29
   1855e:	ec 01       	movw	r28, r24
   18560:	fc 01       	movw	r30, r24
   18562:	01 90       	ld	r0, Z+
   18564:	00 20       	and	r0, r0
   18566:	e9 f7       	brne	.-6      	; 0x18562 <lif_stralloc+0xc>
   18568:	bf 01       	movw	r22, r30
   1856a:	68 1b       	sub	r22, r24
   1856c:	79 0b       	sbc	r23, r25
   1856e:	6d 5f       	subi	r22, 0xFD	; 253
   18570:	7f 4f       	sbci	r23, 0xFF	; 255
   18572:	07 2e       	mov	r0, r23
   18574:	00 0c       	add	r0, r0
   18576:	88 0b       	sbc	r24, r24
   18578:	99 0b       	sbc	r25, r25
   1857a:	b1 df       	rcall	.-158    	; 0x184de <lif_calloc>
   1857c:	8c 01       	movw	r16, r24
   1857e:	00 97       	sbiw	r24, 0x00	; 0
   18580:	19 f0       	breq	.+6      	; 0x18588 <lif_stralloc+0x32>
   18582:	be 01       	movw	r22, r28
   18584:	0e 94 56 32 	call	0x64ac	; 0x64ac <strcpy>
   18588:	c8 01       	movw	r24, r16
   1858a:	df 91       	pop	r29
   1858c:	cf 91       	pop	r28
   1858e:	1f 91       	pop	r17
   18590:	0f 91       	pop	r16
   18592:	08 95       	ret

00018594 <lif_open>:
   18594:	ef 92       	push	r14
   18596:	ff 92       	push	r15
   18598:	0f 93       	push	r16
   1859a:	1f 93       	push	r17
   1859c:	cf 93       	push	r28
   1859e:	df 93       	push	r29
   185a0:	18 2f       	mov	r17, r24
   185a2:	09 2f       	mov	r16, r25
   185a4:	f6 2e       	mov	r15, r22
   185a6:	e7 2e       	mov	r14, r23
   185a8:	0e 94 43 7f 	call	0xfe86	; 0xfe86 <fopen>
   185ac:	ec 01       	movw	r28, r24
   185ae:	89 2b       	or	r24, r25
   185b0:	99 f4       	brne	.+38     	; 0x185d8 <lif_open+0x44>
   185b2:	ef 92       	push	r14
   185b4:	ff 92       	push	r15
   185b6:	0f 93       	push	r16
   185b8:	1f 93       	push	r17
   185ba:	85 ea       	ldi	r24, 0xA5	; 165
   185bc:	92 e4       	ldi	r25, 0x42	; 66
   185be:	1f 92       	push	r1
   185c0:	9f 93       	push	r25
   185c2:	8f 93       	push	r24
   185c4:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   185c8:	8d b7       	in	r24, 0x3d	; 61
   185ca:	9e b7       	in	r25, 0x3e	; 62
   185cc:	07 96       	adiw	r24, 0x07	; 7
   185ce:	0f b6       	in	r0, 0x3f	; 63
   185d0:	f8 94       	cli
   185d2:	9e bf       	out	0x3e, r25	; 62
   185d4:	0f be       	out	0x3f, r0	; 63
   185d6:	8d bf       	out	0x3d, r24	; 61
   185d8:	ce 01       	movw	r24, r28
   185da:	cd b7       	in	r28, 0x3d	; 61
   185dc:	de b7       	in	r29, 0x3e	; 62
   185de:	e6 e0       	ldi	r30, 0x06	; 6
   185e0:	0c 94 1b e6 	jmp	0x1cc36	; 0x1cc36 <__epilogue_restores__+0x18>

000185e4 <lif_stat>:
   185e4:	0f 93       	push	r16
   185e6:	1f 93       	push	r17
   185e8:	cf 93       	push	r28
   185ea:	df 93       	push	r29
   185ec:	18 2f       	mov	r17, r24
   185ee:	09 2f       	mov	r16, r25
   185f0:	d6 2f       	mov	r29, r22
   185f2:	c7 2f       	mov	r28, r23
   185f4:	0e 94 57 7a 	call	0xf4ae	; 0xf4ae <stat>
   185f8:	97 ff       	sbrs	r25, 7
   185fa:	11 c0       	rjmp	.+34     	; 0x1861e <lif_stat+0x3a>
   185fc:	0f 93       	push	r16
   185fe:	1f 93       	push	r17
   18600:	8c e8       	ldi	r24, 0x8C	; 140
   18602:	92 e4       	ldi	r25, 0x42	; 66
   18604:	1f 92       	push	r1
   18606:	9f 93       	push	r25
   18608:	8f 93       	push	r24
   1860a:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1860e:	0f 90       	pop	r0
   18610:	0f 90       	pop	r0
   18612:	0f 90       	pop	r0
   18614:	0f 90       	pop	r0
   18616:	0f 90       	pop	r0
   18618:	80 e0       	ldi	r24, 0x00	; 0
   1861a:	90 e0       	ldi	r25, 0x00	; 0
   1861c:	02 c0       	rjmp	.+4      	; 0x18622 <lif_stat+0x3e>
   1861e:	8d 2f       	mov	r24, r29
   18620:	9c 2f       	mov	r25, r28
   18622:	df 91       	pop	r29
   18624:	cf 91       	pop	r28
   18626:	1f 91       	pop	r17
   18628:	0f 91       	pop	r16
   1862a:	08 95       	ret

0001862c <lif_seek_msg>:
   1862c:	a0 e0       	ldi	r26, 0x00	; 0
   1862e:	b0 e0       	ldi	r27, 0x00	; 0
   18630:	ec e1       	ldi	r30, 0x1C	; 28
   18632:	f3 ec       	ldi	r31, 0xC3	; 195
   18634:	0c 94 fd e5 	jmp	0x1cbfa	; 0x1cbfa <__prologue_saves__+0x14>
   18638:	ec 01       	movw	r28, r24
   1863a:	6a 01       	movw	r12, r20
   1863c:	7b 01       	movw	r14, r22
   1863e:	12 2f       	mov	r17, r18
   18640:	03 2f       	mov	r16, r19
   18642:	0e 94 83 7b 	call	0xf706	; 0xf706 <ftell>
   18646:	6c 15       	cp	r22, r12
   18648:	7d 05       	cpc	r23, r13
   1864a:	8e 05       	cpc	r24, r14
   1864c:	9f 05       	cpc	r25, r15
   1864e:	19 f4       	brne	.+6      	; 0x18656 <lif_seek_msg+0x2a>
   18650:	81 e0       	ldi	r24, 0x01	; 1
   18652:	90 e0       	ldi	r25, 0x00	; 0
   18654:	20 c0       	rjmp	.+64     	; 0x18696 <lif_seek_msg+0x6a>
   18656:	20 e0       	ldi	r18, 0x00	; 0
   18658:	30 e0       	ldi	r19, 0x00	; 0
   1865a:	b7 01       	movw	r22, r14
   1865c:	a6 01       	movw	r20, r12
   1865e:	ce 01       	movw	r24, r28
   18660:	0e 94 05 7c 	call	0xf80a	; 0xf80a <fseek>
   18664:	97 ff       	sbrs	r25, 7
   18666:	f4 cf       	rjmp	.-24     	; 0x18650 <lif_seek_msg+0x24>
   18668:	ff 92       	push	r15
   1866a:	ef 92       	push	r14
   1866c:	df 92       	push	r13
   1866e:	cf 92       	push	r12
   18670:	0f 93       	push	r16
   18672:	1f 93       	push	r17
   18674:	8b e6       	ldi	r24, 0x6B	; 107
   18676:	92 e4       	ldi	r25, 0x42	; 66
   18678:	1f 92       	push	r1
   1867a:	9f 93       	push	r25
   1867c:	8f 93       	push	r24
   1867e:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   18682:	8d b7       	in	r24, 0x3d	; 61
   18684:	9e b7       	in	r25, 0x3e	; 62
   18686:	09 96       	adiw	r24, 0x09	; 9
   18688:	0f b6       	in	r0, 0x3f	; 63
   1868a:	f8 94       	cli
   1868c:	9e bf       	out	0x3e, r25	; 62
   1868e:	0f be       	out	0x3f, r0	; 63
   18690:	8d bf       	out	0x3d, r24	; 61
   18692:	80 e0       	ldi	r24, 0x00	; 0
   18694:	90 e0       	ldi	r25, 0x00	; 0
   18696:	cd b7       	in	r28, 0x3d	; 61
   18698:	de b7       	in	r29, 0x3e	; 62
   1869a:	e8 e0       	ldi	r30, 0x08	; 8
   1869c:	0c 94 19 e6 	jmp	0x1cc32	; 0x1cc32 <__epilogue_restores__+0x14>

000186a0 <lif_read>:
   186a0:	a0 e0       	ldi	r26, 0x00	; 0
   186a2:	b0 e0       	ldi	r27, 0x00	; 0
   186a4:	e6 e5       	ldi	r30, 0x56	; 86
   186a6:	f3 ec       	ldi	r31, 0xC3	; 195
   186a8:	0c 94 f9 e5 	jmp	0x1cbf2	; 0x1cbf2 <__prologue_saves__+0xc>
   186ac:	ec 01       	movw	r28, r24
   186ae:	7b 01       	movw	r14, r22
   186b0:	b2 2e       	mov	r11, r18
   186b2:	a3 2e       	mov	r10, r19
   186b4:	94 2e       	mov	r9, r20
   186b6:	85 2e       	mov	r8, r21
   186b8:	28 81       	ld	r18, Y
   186ba:	39 81       	ldd	r19, Y+1	; 0x01
   186bc:	4b 2d       	mov	r20, r11
   186be:	5a 2d       	mov	r21, r10
   186c0:	69 2d       	mov	r22, r9
   186c2:	78 2d       	mov	r23, r8
   186c4:	8a 81       	ldd	r24, Y+2	; 0x02
   186c6:	9b 81       	ldd	r25, Y+3	; 0x03
   186c8:	b1 df       	rcall	.-158    	; 0x1862c <lif_seek_msg>
   186ca:	89 2b       	or	r24, r25
   186cc:	b9 f1       	breq	.+110    	; 0x1873c <lif_read+0x9c>
   186ce:	2a 81       	ldd	r18, Y+2	; 0x02
   186d0:	3b 81       	ldd	r19, Y+3	; 0x03
   186d2:	a8 01       	movw	r20, r16
   186d4:	61 e0       	ldi	r22, 0x01	; 1
   186d6:	70 e0       	ldi	r23, 0x00	; 0
   186d8:	c7 01       	movw	r24, r14
   186da:	0e 94 99 7c 	call	0xf932	; 0xf932 <fread>
   186de:	6c 01       	movw	r12, r24
   186e0:	e1 2c       	mov	r14, r1
   186e2:	f1 2c       	mov	r15, r1
   186e4:	b8 01       	movw	r22, r16
   186e6:	01 2e       	mov	r0, r17
   186e8:	00 0c       	add	r0, r0
   186ea:	88 0b       	sbc	r24, r24
   186ec:	99 0b       	sbc	r25, r25
   186ee:	c6 16       	cp	r12, r22
   186f0:	d7 06       	cpc	r13, r23
   186f2:	e8 06       	cpc	r14, r24
   186f4:	f9 06       	cpc	r15, r25
   186f6:	41 f1       	breq	.+80     	; 0x18748 <lif_read+0xa8>
   186f8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   186fc:	80 ff       	sbrs	r24, 0
   186fe:	22 c0       	rjmp	.+68     	; 0x18744 <lif_read+0xa4>
   18700:	1f 93       	push	r17
   18702:	0f 93       	push	r16
   18704:	1f 92       	push	r1
   18706:	1f 92       	push	r1
   18708:	df 92       	push	r13
   1870a:	cf 92       	push	r12
   1870c:	8f 92       	push	r8
   1870e:	9f 92       	push	r9
   18710:	af 92       	push	r10
   18712:	bf 92       	push	r11
   18714:	89 81       	ldd	r24, Y+1	; 0x01
   18716:	8f 93       	push	r24
   18718:	88 81       	ld	r24, Y
   1871a:	8f 93       	push	r24
   1871c:	8f e2       	ldi	r24, 0x2F	; 47
   1871e:	92 e4       	ldi	r25, 0x42	; 66
   18720:	1f 92       	push	r1
   18722:	9f 93       	push	r25
   18724:	8f 93       	push	r24
   18726:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1872a:	8d b7       	in	r24, 0x3d	; 61
   1872c:	9e b7       	in	r25, 0x3e	; 62
   1872e:	0f 96       	adiw	r24, 0x0f	; 15
   18730:	0f b6       	in	r0, 0x3f	; 63
   18732:	f8 94       	cli
   18734:	9e bf       	out	0x3e, r25	; 62
   18736:	0f be       	out	0x3f, r0	; 63
   18738:	8d bf       	out	0x3d, r24	; 61
   1873a:	04 c0       	rjmp	.+8      	; 0x18744 <lif_read+0xa4>
   1873c:	60 e0       	ldi	r22, 0x00	; 0
   1873e:	70 e0       	ldi	r23, 0x00	; 0
   18740:	cb 01       	movw	r24, r22
   18742:	02 c0       	rjmp	.+4      	; 0x18748 <lif_read+0xa8>
   18744:	c7 01       	movw	r24, r14
   18746:	b6 01       	movw	r22, r12
   18748:	cd b7       	in	r28, 0x3d	; 61
   1874a:	de b7       	in	r29, 0x3e	; 62
   1874c:	ec e0       	ldi	r30, 0x0C	; 12
   1874e:	0c 94 15 e6 	jmp	0x1cc2a	; 0x1cc2a <__epilogue_restores__+0xc>

00018752 <lif_write>:
   18752:	a0 e0       	ldi	r26, 0x00	; 0
   18754:	b0 e0       	ldi	r27, 0x00	; 0
   18756:	ef ea       	ldi	r30, 0xAF	; 175
   18758:	f3 ec       	ldi	r31, 0xC3	; 195
   1875a:	0c 94 fb e5 	jmp	0x1cbf6	; 0x1cbf6 <__prologue_saves__+0x10>
   1875e:	7c 01       	movw	r14, r24
   18760:	eb 01       	movw	r28, r22
   18762:	d2 2e       	mov	r13, r18
   18764:	c3 2e       	mov	r12, r19
   18766:	b4 2e       	mov	r11, r20
   18768:	a5 2e       	mov	r10, r21
   1876a:	fc 01       	movw	r30, r24
   1876c:	20 81       	ld	r18, Z
   1876e:	31 81       	ldd	r19, Z+1	; 0x01
   18770:	4d 2d       	mov	r20, r13
   18772:	5c 2d       	mov	r21, r12
   18774:	6b 2d       	mov	r22, r11
   18776:	7a 2d       	mov	r23, r10
   18778:	82 81       	ldd	r24, Z+2	; 0x02
   1877a:	93 81       	ldd	r25, Z+3	; 0x03
   1877c:	57 df       	rcall	.-338    	; 0x1862c <lif_seek_msg>
   1877e:	00 97       	sbiw	r24, 0x00	; 0
   18780:	89 f1       	breq	.+98     	; 0x187e4 <lif_write+0x92>
   18782:	f7 01       	movw	r30, r14
   18784:	22 81       	ldd	r18, Z+2	; 0x02
   18786:	33 81       	ldd	r19, Z+3	; 0x03
   18788:	a8 01       	movw	r20, r16
   1878a:	61 e0       	ldi	r22, 0x01	; 1
   1878c:	70 e0       	ldi	r23, 0x00	; 0
   1878e:	ce 01       	movw	r24, r28
   18790:	0e 94 6b 7d 	call	0xfad6	; 0xfad6 <fwrite>
   18794:	ec 01       	movw	r28, r24
   18796:	08 17       	cp	r16, r24
   18798:	19 07       	cpc	r17, r25
   1879a:	09 f1       	breq	.+66     	; 0x187de <lif_write+0x8c>
   1879c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   187a0:	80 ff       	sbrs	r24, 0
   187a2:	1f c0       	rjmp	.+62     	; 0x187e2 <lif_write+0x90>
   187a4:	1f 93       	push	r17
   187a6:	0f 93       	push	r16
   187a8:	df 93       	push	r29
   187aa:	cf 93       	push	r28
   187ac:	af 92       	push	r10
   187ae:	bf 92       	push	r11
   187b0:	cf 92       	push	r12
   187b2:	df 92       	push	r13
   187b4:	f7 01       	movw	r30, r14
   187b6:	81 81       	ldd	r24, Z+1	; 0x01
   187b8:	8f 93       	push	r24
   187ba:	80 81       	ld	r24, Z
   187bc:	8f 93       	push	r24
   187be:	82 ef       	ldi	r24, 0xF2	; 242
   187c0:	91 e4       	ldi	r25, 0x41	; 65
   187c2:	1f 92       	push	r1
   187c4:	9f 93       	push	r25
   187c6:	8f 93       	push	r24
   187c8:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   187cc:	8d b7       	in	r24, 0x3d	; 61
   187ce:	9e b7       	in	r25, 0x3e	; 62
   187d0:	0d 96       	adiw	r24, 0x0d	; 13
   187d2:	0f b6       	in	r0, 0x3f	; 63
   187d4:	f8 94       	cli
   187d6:	9e bf       	out	0x3e, r25	; 62
   187d8:	0f be       	out	0x3f, r0	; 63
   187da:	8d bf       	out	0x3d, r24	; 61
   187dc:	02 c0       	rjmp	.+4      	; 0x187e2 <lif_write+0x90>
   187de:	c8 01       	movw	r24, r16
   187e0:	01 c0       	rjmp	.+2      	; 0x187e4 <lif_write+0x92>
   187e2:	ce 01       	movw	r24, r28
   187e4:	cd b7       	in	r28, 0x3d	; 61
   187e6:	de b7       	in	r29, 0x3e	; 62
   187e8:	ea e0       	ldi	r30, 0x0A	; 10
   187ea:	0c 94 17 e6 	jmp	0x1cc2e	; 0x1cc2e <__epilogue_restores__+0x10>

000187ee <lif_chars>:
   187ee:	80 32       	cpi	r24, 0x20	; 32
   187f0:	91 05       	cpc	r25, r1
   187f2:	e1 f0       	breq	.+56     	; 0x1882c <lif_chars+0x3e>
   187f4:	9c 01       	movw	r18, r24
   187f6:	21 56       	subi	r18, 0x61	; 97
   187f8:	31 09       	sbc	r19, r1
   187fa:	2a 31       	cpi	r18, 0x1A	; 26
   187fc:	31 05       	cpc	r19, r1
   187fe:	10 f4       	brcc	.+4      	; 0x18804 <lif_chars+0x16>
   18800:	80 97       	sbiw	r24, 0x20	; 32
   18802:	08 95       	ret
   18804:	9c 01       	movw	r18, r24
   18806:	21 54       	subi	r18, 0x41	; 65
   18808:	31 09       	sbc	r19, r1
   1880a:	2a 31       	cpi	r18, 0x1A	; 26
   1880c:	31 05       	cpc	r19, r1
   1880e:	c8 f0       	brcs	.+50     	; 0x18842 <lif_chars+0x54>
   18810:	16 16       	cp	r1, r22
   18812:	17 06       	cpc	r1, r23
   18814:	74 f4       	brge	.+28     	; 0x18832 <lif_chars+0x44>
   18816:	2f 5e       	subi	r18, 0xEF	; 239
   18818:	3f 4f       	sbci	r19, 0xFF	; 255
   1881a:	2a 30       	cpi	r18, 0x0A	; 10
   1881c:	31 05       	cpc	r19, r1
   1881e:	88 f0       	brcs	.+34     	; 0x18842 <lif_chars+0x54>
   18820:	8f 35       	cpi	r24, 0x5F	; 95
   18822:	91 05       	cpc	r25, r1
   18824:	49 f0       	breq	.+18     	; 0x18838 <lif_chars+0x4a>
   18826:	8d 97       	sbiw	r24, 0x2d	; 45
   18828:	21 f4       	brne	.+8      	; 0x18832 <lif_chars+0x44>
   1882a:	09 c0       	rjmp	.+18     	; 0x1883e <lif_chars+0x50>
   1882c:	80 e2       	ldi	r24, 0x20	; 32
   1882e:	90 e0       	ldi	r25, 0x00	; 0
   18830:	08 95       	ret
   18832:	80 e0       	ldi	r24, 0x00	; 0
   18834:	90 e0       	ldi	r25, 0x00	; 0
   18836:	08 95       	ret
   18838:	8f e5       	ldi	r24, 0x5F	; 95
   1883a:	90 e0       	ldi	r25, 0x00	; 0
   1883c:	08 95       	ret
   1883e:	8d e2       	ldi	r24, 0x2D	; 45
   18840:	90 e0       	ldi	r25, 0x00	; 0
   18842:	08 95       	ret

00018844 <lif_B2S>:
   18844:	a0 e0       	ldi	r26, 0x00	; 0
   18846:	b0 e0       	ldi	r27, 0x00	; 0
   18848:	e8 e2       	ldi	r30, 0x28	; 40
   1884a:	f4 ec       	ldi	r31, 0xC4	; 196
   1884c:	0c 94 f9 e5 	jmp	0x1cbf2	; 0x1cbf2 <__prologue_saves__+0xc>
   18850:	5c 01       	movw	r10, r24
   18852:	6b 01       	movw	r12, r22
   18854:	ea 01       	movw	r28, r20
   18856:	4c 01       	movw	r8, r24
   18858:	ee 24       	eor	r14, r14
   1885a:	e3 94       	inc	r14
   1885c:	f1 2c       	mov	r15, r1
   1885e:	00 e0       	ldi	r16, 0x00	; 0
   18860:	10 e0       	ldi	r17, 0x00	; 0
   18862:	0c 17       	cp	r16, r28
   18864:	1d 07       	cpc	r17, r29
   18866:	6c f4       	brge	.+26     	; 0x18882 <lif_B2S+0x3e>
   18868:	f4 01       	movw	r30, r8
   1886a:	81 91       	ld	r24, Z+
   1886c:	4f 01       	movw	r8, r30
   1886e:	b8 01       	movw	r22, r16
   18870:	90 e0       	ldi	r25, 0x00	; 0
   18872:	bd df       	rcall	.-134    	; 0x187ee <lif_chars>
   18874:	89 2b       	or	r24, r25
   18876:	11 f4       	brne	.+4      	; 0x1887c <lif_B2S+0x38>
   18878:	e1 2c       	mov	r14, r1
   1887a:	f1 2c       	mov	r15, r1
   1887c:	0f 5f       	subi	r16, 0xFF	; 255
   1887e:	1f 4f       	sbci	r17, 0xFF	; 255
   18880:	f0 cf       	rjmp	.-32     	; 0x18862 <lif_B2S+0x1e>
   18882:	d6 01       	movw	r26, r12
   18884:	f5 01       	movw	r30, r10
   18886:	cf 01       	movw	r24, r30
   18888:	8a 19       	sub	r24, r10
   1888a:	9b 09       	sbc	r25, r11
   1888c:	8c 17       	cp	r24, r28
   1888e:	9d 07       	cpc	r25, r29
   18890:	1c f4       	brge	.+6      	; 0x18898 <lif_B2S+0x54>
   18892:	81 91       	ld	r24, Z+
   18894:	8d 93       	st	X+, r24
   18896:	f7 cf       	rjmp	.-18     	; 0x18886 <lif_B2S+0x42>
   18898:	d7 ff       	sbrs	r29, 7
   1889a:	02 c0       	rjmp	.+4      	; 0x188a0 <lif_B2S+0x5c>
   1889c:	c0 e0       	ldi	r28, 0x00	; 0
   1889e:	d0 e0       	ldi	r29, 0x00	; 0
   188a0:	cc 0d       	add	r28, r12
   188a2:	dd 1d       	adc	r29, r13
   188a4:	18 82       	st	Y, r1
   188a6:	c6 01       	movw	r24, r12
   188a8:	0e 94 b0 32 	call	0x6560	; 0x6560 <trim_tail>
   188ac:	c7 01       	movw	r24, r14
   188ae:	cd b7       	in	r28, 0x3d	; 61
   188b0:	de b7       	in	r29, 0x3e	; 62
   188b2:	ec e0       	ldi	r30, 0x0C	; 12
   188b4:	0c 94 15 e6 	jmp	0x1cc2a	; 0x1cc2a <__epilogue_restores__+0xc>

000188b8 <lif_checkname>:
   188b8:	ef 92       	push	r14
   188ba:	ff 92       	push	r15
   188bc:	0f 93       	push	r16
   188be:	1f 93       	push	r17
   188c0:	cf 93       	push	r28
   188c2:	df 93       	push	r29
   188c4:	7c 01       	movw	r14, r24
   188c6:	ec 01       	movw	r28, r24
   188c8:	01 e0       	ldi	r16, 0x01	; 1
   188ca:	10 e0       	ldi	r17, 0x00	; 0
   188cc:	be 01       	movw	r22, r28
   188ce:	6e 19       	sub	r22, r14
   188d0:	7f 09       	sbc	r23, r15
   188d2:	89 91       	ld	r24, Y+
   188d4:	88 23       	and	r24, r24
   188d6:	39 f0       	breq	.+14     	; 0x188e6 <lif_checkname+0x2e>
   188d8:	90 e0       	ldi	r25, 0x00	; 0
   188da:	89 df       	rcall	.-238    	; 0x187ee <lif_chars>
   188dc:	89 2b       	or	r24, r25
   188de:	b1 f7       	brne	.-20     	; 0x188cc <lif_checkname+0x14>
   188e0:	00 e0       	ldi	r16, 0x00	; 0
   188e2:	10 e0       	ldi	r17, 0x00	; 0
   188e4:	f3 cf       	rjmp	.-26     	; 0x188cc <lif_checkname+0x14>
   188e6:	c8 01       	movw	r24, r16
   188e8:	cd b7       	in	r28, 0x3d	; 61
   188ea:	de b7       	in	r29, 0x3e	; 62
   188ec:	e6 e0       	ldi	r30, 0x06	; 6
   188ee:	0c 94 1b e6 	jmp	0x1cc36	; 0x1cc36 <__epilogue_restores__+0x18>

000188f2 <lif_S2B>:
   188f2:	fb 01       	movw	r30, r22
   188f4:	dc 01       	movw	r26, r24
   188f6:	20 e0       	ldi	r18, 0x00	; 0
   188f8:	30 e0       	ldi	r19, 0x00	; 0
   188fa:	61 91       	ld	r22, Z+
   188fc:	61 11       	cpse	r22, r1
   188fe:	05 c0       	rjmp	.+10     	; 0x1890a <lif_S2B+0x18>
   18900:	fc 01       	movw	r30, r24
   18902:	e2 0f       	add	r30, r18
   18904:	f3 1f       	adc	r31, r19
   18906:	60 e2       	ldi	r22, 0x20	; 32
   18908:	08 c0       	rjmp	.+16     	; 0x1891a <lif_S2B+0x28>
   1890a:	24 17       	cp	r18, r20
   1890c:	35 07       	cpc	r19, r21
   1890e:	24 f4       	brge	.+8      	; 0x18918 <lif_S2B+0x26>
   18910:	6d 93       	st	X+, r22
   18912:	2f 5f       	subi	r18, 0xFF	; 255
   18914:	3f 4f       	sbci	r19, 0xFF	; 255
   18916:	f1 cf       	rjmp	.-30     	; 0x188fa <lif_S2B+0x8>
   18918:	08 95       	ret
   1891a:	9f 01       	movw	r18, r30
   1891c:	28 1b       	sub	r18, r24
   1891e:	39 0b       	sbc	r19, r25
   18920:	24 17       	cp	r18, r20
   18922:	35 07       	cpc	r19, r21
   18924:	14 f4       	brge	.+4      	; 0x1892a <lif_S2B+0x38>
   18926:	61 93       	st	Z+, r22
   18928:	f8 cf       	rjmp	.-16     	; 0x1891a <lif_S2B+0x28>
   1892a:	08 95       	ret

0001892c <lif_fixname>:
   1892c:	a0 e0       	ldi	r26, 0x00	; 0
   1892e:	b0 e0       	ldi	r27, 0x00	; 0
   18930:	ec e9       	ldi	r30, 0x9C	; 156
   18932:	f4 ec       	ldi	r31, 0xC4	; 196
   18934:	0c 94 fc e5 	jmp	0x1cbf8	; 0x1cbf8 <__prologue_saves__+0x12>
   18938:	8c 01       	movw	r16, r24
   1893a:	cb 01       	movw	r24, r22
   1893c:	7a 01       	movw	r14, r20
   1893e:	0e 94 2d 78 	call	0xf05a	; 0xf05a <basename>
   18942:	6c 01       	movw	r12, r24
   18944:	e8 01       	movw	r28, r16
   18946:	80 e2       	ldi	r24, 0x20	; 32
   18948:	b8 2e       	mov	r11, r24
   1894a:	be 01       	movw	r22, r28
   1894c:	60 1b       	sub	r22, r16
   1894e:	71 0b       	sbc	r23, r17
   18950:	f6 01       	movw	r30, r12
   18952:	81 91       	ld	r24, Z+
   18954:	6f 01       	movw	r12, r30
   18956:	81 11       	cpse	r24, r1
   18958:	02 c0       	rjmp	.+4      	; 0x1895e <lif_fixname+0x32>
   1895a:	20 e2       	ldi	r18, 0x20	; 32
   1895c:	0e c0       	rjmp	.+28     	; 0x1897a <lif_fixname+0x4e>
   1895e:	1e 14       	cp	r1, r14
   18960:	1f 04       	cpc	r1, r15
   18962:	dc f7       	brge	.-10     	; 0x1895a <lif_fixname+0x2e>
   18964:	8e 32       	cpi	r24, 0x2E	; 46
   18966:	c9 f3       	breq	.-14     	; 0x1895a <lif_fixname+0x2e>
   18968:	90 e0       	ldi	r25, 0x00	; 0
   1896a:	41 df       	rcall	.-382    	; 0x187ee <lif_chars>
   1896c:	88 23       	and	r24, r24
   1896e:	11 f0       	breq	.+4      	; 0x18974 <lif_fixname+0x48>
   18970:	88 83       	st	Y, r24
   18972:	01 c0       	rjmp	.+2      	; 0x18976 <lif_fixname+0x4a>
   18974:	b8 82       	st	Y, r11
   18976:	21 96       	adiw	r28, 0x01	; 1
   18978:	e8 cf       	rjmp	.-48     	; 0x1894a <lif_fixname+0x1e>
   1897a:	ce 01       	movw	r24, r28
   1897c:	80 1b       	sub	r24, r16
   1897e:	91 0b       	sbc	r25, r17
   18980:	8e 15       	cp	r24, r14
   18982:	9f 05       	cpc	r25, r15
   18984:	14 f4       	brge	.+4      	; 0x1898a <lif_fixname+0x5e>
   18986:	29 93       	st	Y+, r18
   18988:	f8 cf       	rjmp	.-16     	; 0x1897a <lif_fixname+0x4e>
   1898a:	18 82       	st	Y, r1
   1898c:	f8 01       	movw	r30, r16
   1898e:	01 90       	ld	r0, Z+
   18990:	00 20       	and	r0, r0
   18992:	e9 f7       	brne	.-6      	; 0x1898e <lif_fixname+0x62>
   18994:	cf 01       	movw	r24, r30
   18996:	01 97       	sbiw	r24, 0x01	; 1
   18998:	80 1b       	sub	r24, r16
   1899a:	91 0b       	sbc	r25, r17
   1899c:	cd b7       	in	r28, 0x3d	; 61
   1899e:	de b7       	in	r29, 0x3e	; 62
   189a0:	e9 e0       	ldi	r30, 0x09	; 9
   189a2:	0c 94 18 e6 	jmp	0x1cc30	; 0x1cc30 <__epilogue_restores__+0x12>

000189a6 <lif_vol2str>:
   189a6:	ef 92       	push	r14
   189a8:	ff 92       	push	r15
   189aa:	0f 93       	push	r16
   189ac:	1f 93       	push	r17
   189ae:	cf 93       	push	r28
   189b0:	df 93       	push	r29
   189b2:	7c 01       	movw	r14, r24
   189b4:	eb 01       	movw	r28, r22
   189b6:	fc 01       	movw	r30, r24
   189b8:	04 a1       	ldd	r16, Z+36	; 0x24
   189ba:	15 a1       	ldd	r17, Z+37	; 0x25
   189bc:	20 e0       	ldi	r18, 0x00	; 0
   189be:	30 e0       	ldi	r19, 0x00	; 0
   189c0:	42 e0       	ldi	r20, 0x02	; 2
   189c2:	50 e0       	ldi	r21, 0x00	; 0
   189c4:	60 e0       	ldi	r22, 0x00	; 0
   189c6:	70 e0       	ldi	r23, 0x00	; 0
   189c8:	ce 01       	movw	r24, r28
   189ca:	0e 94 89 92 	call	0x12512	; 0x12512 <V2B_MSB>
   189ce:	b7 01       	movw	r22, r14
   189d0:	6a 5d       	subi	r22, 0xDA	; 218
   189d2:	7f 4f       	sbci	r23, 0xFF	; 255
   189d4:	46 e0       	ldi	r20, 0x06	; 6
   189d6:	50 e0       	ldi	r21, 0x00	; 0
   189d8:	ce 01       	movw	r24, r28
   189da:	02 96       	adiw	r24, 0x02	; 2
   189dc:	8a df       	rcall	.-236    	; 0x188f2 <lif_S2B>
   189de:	f7 01       	movw	r30, r14
   189e0:	05 a5       	ldd	r16, Z+45	; 0x2d
   189e2:	16 a5       	ldd	r17, Z+46	; 0x2e
   189e4:	27 a5       	ldd	r18, Z+47	; 0x2f
   189e6:	30 a9       	ldd	r19, Z+48	; 0x30
   189e8:	44 e0       	ldi	r20, 0x04	; 4
   189ea:	50 e0       	ldi	r21, 0x00	; 0
   189ec:	68 e0       	ldi	r22, 0x08	; 8
   189ee:	70 e0       	ldi	r23, 0x00	; 0
   189f0:	ce 01       	movw	r24, r28
   189f2:	0e 94 89 92 	call	0x12512	; 0x12512 <V2B_MSB>
   189f6:	f7 01       	movw	r30, r14
   189f8:	01 a9       	ldd	r16, Z+49	; 0x31
   189fa:	12 a9       	ldd	r17, Z+50	; 0x32
   189fc:	20 e0       	ldi	r18, 0x00	; 0
   189fe:	30 e0       	ldi	r19, 0x00	; 0
   18a00:	42 e0       	ldi	r20, 0x02	; 2
   18a02:	50 e0       	ldi	r21, 0x00	; 0
   18a04:	6c e0       	ldi	r22, 0x0C	; 12
   18a06:	70 e0       	ldi	r23, 0x00	; 0
   18a08:	ce 01       	movw	r24, r28
   18a0a:	0e 94 89 92 	call	0x12512	; 0x12512 <V2B_MSB>
   18a0e:	00 e0       	ldi	r16, 0x00	; 0
   18a10:	10 e0       	ldi	r17, 0x00	; 0
   18a12:	98 01       	movw	r18, r16
   18a14:	42 e0       	ldi	r20, 0x02	; 2
   18a16:	50 e0       	ldi	r21, 0x00	; 0
   18a18:	6e e0       	ldi	r22, 0x0E	; 14
   18a1a:	70 e0       	ldi	r23, 0x00	; 0
   18a1c:	ce 01       	movw	r24, r28
   18a1e:	0e 94 89 92 	call	0x12512	; 0x12512 <V2B_MSB>
   18a22:	f7 01       	movw	r30, r14
   18a24:	05 a9       	ldd	r16, Z+53	; 0x35
   18a26:	16 a9       	ldd	r17, Z+54	; 0x36
   18a28:	27 a9       	ldd	r18, Z+55	; 0x37
   18a2a:	30 ad       	ldd	r19, Z+56	; 0x38
   18a2c:	44 e0       	ldi	r20, 0x04	; 4
   18a2e:	50 e0       	ldi	r21, 0x00	; 0
   18a30:	60 e1       	ldi	r22, 0x10	; 16
   18a32:	70 e0       	ldi	r23, 0x00	; 0
   18a34:	ce 01       	movw	r24, r28
   18a36:	0e 94 89 92 	call	0x12512	; 0x12512 <V2B_MSB>
   18a3a:	f7 01       	movw	r30, r14
   18a3c:	01 ad       	ldd	r16, Z+57	; 0x39
   18a3e:	12 ad       	ldd	r17, Z+58	; 0x3a
   18a40:	20 e0       	ldi	r18, 0x00	; 0
   18a42:	30 e0       	ldi	r19, 0x00	; 0
   18a44:	42 e0       	ldi	r20, 0x02	; 2
   18a46:	50 e0       	ldi	r21, 0x00	; 0
   18a48:	64 e1       	ldi	r22, 0x14	; 20
   18a4a:	70 e0       	ldi	r23, 0x00	; 0
   18a4c:	ce 01       	movw	r24, r28
   18a4e:	0e 94 89 92 	call	0x12512	; 0x12512 <V2B_MSB>
   18a52:	00 e0       	ldi	r16, 0x00	; 0
   18a54:	10 e0       	ldi	r17, 0x00	; 0
   18a56:	98 01       	movw	r18, r16
   18a58:	42 e0       	ldi	r20, 0x02	; 2
   18a5a:	50 e0       	ldi	r21, 0x00	; 0
   18a5c:	66 e1       	ldi	r22, 0x16	; 22
   18a5e:	70 e0       	ldi	r23, 0x00	; 0
   18a60:	ce 01       	movw	r24, r28
   18a62:	0e 94 89 92 	call	0x12512	; 0x12512 <V2B_MSB>
   18a66:	f7 01       	movw	r30, r14
   18a68:	fd 96       	adiw	r30, 0x3d	; 61
   18a6a:	00 81       	ld	r16, Z
   18a6c:	11 81       	ldd	r17, Z+1	; 0x01
   18a6e:	22 81       	ldd	r18, Z+2	; 0x02
   18a70:	33 81       	ldd	r19, Z+3	; 0x03
   18a72:	44 e0       	ldi	r20, 0x04	; 4
   18a74:	50 e0       	ldi	r21, 0x00	; 0
   18a76:	68 e1       	ldi	r22, 0x18	; 24
   18a78:	70 e0       	ldi	r23, 0x00	; 0
   18a7a:	ce 01       	movw	r24, r28
   18a7c:	0e 94 89 92 	call	0x12512	; 0x12512 <V2B_MSB>
   18a80:	f7 01       	movw	r30, r14
   18a82:	ef 5b       	subi	r30, 0xBF	; 191
   18a84:	ff 4f       	sbci	r31, 0xFF	; 255
   18a86:	00 81       	ld	r16, Z
   18a88:	11 81       	ldd	r17, Z+1	; 0x01
   18a8a:	22 81       	ldd	r18, Z+2	; 0x02
   18a8c:	33 81       	ldd	r19, Z+3	; 0x03
   18a8e:	44 e0       	ldi	r20, 0x04	; 4
   18a90:	50 e0       	ldi	r21, 0x00	; 0
   18a92:	6c e1       	ldi	r22, 0x1C	; 28
   18a94:	70 e0       	ldi	r23, 0x00	; 0
   18a96:	ce 01       	movw	r24, r28
   18a98:	0e 94 89 92 	call	0x12512	; 0x12512 <V2B_MSB>
   18a9c:	f7 01       	movw	r30, r14
   18a9e:	eb 5b       	subi	r30, 0xBB	; 187
   18aa0:	ff 4f       	sbci	r31, 0xFF	; 255
   18aa2:	00 81       	ld	r16, Z
   18aa4:	11 81       	ldd	r17, Z+1	; 0x01
   18aa6:	22 81       	ldd	r18, Z+2	; 0x02
   18aa8:	33 81       	ldd	r19, Z+3	; 0x03
   18aaa:	44 e0       	ldi	r20, 0x04	; 4
   18aac:	50 e0       	ldi	r21, 0x00	; 0
   18aae:	60 e2       	ldi	r22, 0x20	; 32
   18ab0:	70 e0       	ldi	r23, 0x00	; 0
   18ab2:	ce 01       	movw	r24, r28
   18ab4:	0e 94 89 92 	call	0x12512	; 0x12512 <V2B_MSB>
   18ab8:	de 01       	movw	r26, r28
   18aba:	94 96       	adiw	r26, 0x24	; 36
   18abc:	f7 01       	movw	r30, r14
   18abe:	e7 5b       	subi	r30, 0xB7	; 183
   18ac0:	ff 4f       	sbci	r31, 0xFF	; 255
   18ac2:	86 e0       	ldi	r24, 0x06	; 6
   18ac4:	01 90       	ld	r0, Z+
   18ac6:	0d 92       	st	X+, r0
   18ac8:	8a 95       	dec	r24
   18aca:	e1 f7       	brne	.-8      	; 0x18ac4 <lif_vol2str+0x11e>
   18acc:	cd b7       	in	r28, 0x3d	; 61
   18ace:	de b7       	in	r29, 0x3e	; 62
   18ad0:	e6 e0       	ldi	r30, 0x06	; 6
   18ad2:	0c 94 1b e6 	jmp	0x1cc36	; 0x1cc36 <__epilogue_restores__+0x18>

00018ad6 <lif_str2vol>:
   18ad6:	0f 93       	push	r16
   18ad8:	1f 93       	push	r17
   18ada:	cf 93       	push	r28
   18adc:	df 93       	push	r29
   18ade:	8c 01       	movw	r16, r24
   18ae0:	eb 01       	movw	r28, r22
   18ae2:	42 e0       	ldi	r20, 0x02	; 2
   18ae4:	50 e0       	ldi	r21, 0x00	; 0
   18ae6:	60 e0       	ldi	r22, 0x00	; 0
   18ae8:	70 e0       	ldi	r23, 0x00	; 0
   18aea:	0e 94 b2 92 	call	0x12564	; 0x12564 <B2V_MSB>
   18aee:	7d a3       	std	Y+37, r23	; 0x25
   18af0:	6c a3       	std	Y+36, r22	; 0x24
   18af2:	be 01       	movw	r22, r28
   18af4:	6a 5d       	subi	r22, 0xDA	; 218
   18af6:	7f 4f       	sbci	r23, 0xFF	; 255
   18af8:	46 e0       	ldi	r20, 0x06	; 6
   18afa:	50 e0       	ldi	r21, 0x00	; 0
   18afc:	c8 01       	movw	r24, r16
   18afe:	02 96       	adiw	r24, 0x02	; 2
   18b00:	a1 de       	rcall	.-702    	; 0x18844 <lif_B2S>
   18b02:	44 e0       	ldi	r20, 0x04	; 4
   18b04:	50 e0       	ldi	r21, 0x00	; 0
   18b06:	68 e0       	ldi	r22, 0x08	; 8
   18b08:	70 e0       	ldi	r23, 0x00	; 0
   18b0a:	c8 01       	movw	r24, r16
   18b0c:	0e 94 b2 92 	call	0x12564	; 0x12564 <B2V_MSB>
   18b10:	6d a7       	std	Y+45, r22	; 0x2d
   18b12:	7e a7       	std	Y+46, r23	; 0x2e
   18b14:	8f a7       	std	Y+47, r24	; 0x2f
   18b16:	98 ab       	std	Y+48, r25	; 0x30
   18b18:	42 e0       	ldi	r20, 0x02	; 2
   18b1a:	50 e0       	ldi	r21, 0x00	; 0
   18b1c:	6c e0       	ldi	r22, 0x0C	; 12
   18b1e:	70 e0       	ldi	r23, 0x00	; 0
   18b20:	c8 01       	movw	r24, r16
   18b22:	0e 94 b2 92 	call	0x12564	; 0x12564 <B2V_MSB>
   18b26:	7a ab       	std	Y+50, r23	; 0x32
   18b28:	69 ab       	std	Y+49, r22	; 0x31
   18b2a:	42 e0       	ldi	r20, 0x02	; 2
   18b2c:	50 e0       	ldi	r21, 0x00	; 0
   18b2e:	6e e0       	ldi	r22, 0x0E	; 14
   18b30:	70 e0       	ldi	r23, 0x00	; 0
   18b32:	c8 01       	movw	r24, r16
   18b34:	0e 94 b2 92 	call	0x12564	; 0x12564 <B2V_MSB>
   18b38:	7c ab       	std	Y+52, r23	; 0x34
   18b3a:	6b ab       	std	Y+51, r22	; 0x33
   18b3c:	44 e0       	ldi	r20, 0x04	; 4
   18b3e:	50 e0       	ldi	r21, 0x00	; 0
   18b40:	60 e1       	ldi	r22, 0x10	; 16
   18b42:	70 e0       	ldi	r23, 0x00	; 0
   18b44:	c8 01       	movw	r24, r16
   18b46:	0e 94 b2 92 	call	0x12564	; 0x12564 <B2V_MSB>
   18b4a:	6d ab       	std	Y+53, r22	; 0x35
   18b4c:	7e ab       	std	Y+54, r23	; 0x36
   18b4e:	8f ab       	std	Y+55, r24	; 0x37
   18b50:	98 af       	std	Y+56, r25	; 0x38
   18b52:	42 e0       	ldi	r20, 0x02	; 2
   18b54:	50 e0       	ldi	r21, 0x00	; 0
   18b56:	64 e1       	ldi	r22, 0x14	; 20
   18b58:	70 e0       	ldi	r23, 0x00	; 0
   18b5a:	c8 01       	movw	r24, r16
   18b5c:	0e 94 b2 92 	call	0x12564	; 0x12564 <B2V_MSB>
   18b60:	7a af       	std	Y+58, r23	; 0x3a
   18b62:	69 af       	std	Y+57, r22	; 0x39
   18b64:	42 e0       	ldi	r20, 0x02	; 2
   18b66:	50 e0       	ldi	r21, 0x00	; 0
   18b68:	66 e1       	ldi	r22, 0x16	; 22
   18b6a:	70 e0       	ldi	r23, 0x00	; 0
   18b6c:	c8 01       	movw	r24, r16
   18b6e:	0e 94 b2 92 	call	0x12564	; 0x12564 <B2V_MSB>
   18b72:	7c af       	std	Y+60, r23	; 0x3c
   18b74:	6b af       	std	Y+59, r22	; 0x3b
   18b76:	44 e0       	ldi	r20, 0x04	; 4
   18b78:	50 e0       	ldi	r21, 0x00	; 0
   18b7a:	68 e1       	ldi	r22, 0x18	; 24
   18b7c:	70 e0       	ldi	r23, 0x00	; 0
   18b7e:	c8 01       	movw	r24, r16
   18b80:	0e 94 b2 92 	call	0x12564	; 0x12564 <B2V_MSB>
   18b84:	fe 01       	movw	r30, r28
   18b86:	fd 96       	adiw	r30, 0x3d	; 61
   18b88:	60 83       	st	Z, r22
   18b8a:	71 83       	std	Z+1, r23	; 0x01
   18b8c:	82 83       	std	Z+2, r24	; 0x02
   18b8e:	93 83       	std	Z+3, r25	; 0x03
   18b90:	44 e0       	ldi	r20, 0x04	; 4
   18b92:	50 e0       	ldi	r21, 0x00	; 0
   18b94:	6c e1       	ldi	r22, 0x1C	; 28
   18b96:	70 e0       	ldi	r23, 0x00	; 0
   18b98:	c8 01       	movw	r24, r16
   18b9a:	0e 94 b2 92 	call	0x12564	; 0x12564 <B2V_MSB>
   18b9e:	fe 01       	movw	r30, r28
   18ba0:	ef 5b       	subi	r30, 0xBF	; 191
   18ba2:	ff 4f       	sbci	r31, 0xFF	; 255
   18ba4:	60 83       	st	Z, r22
   18ba6:	71 83       	std	Z+1, r23	; 0x01
   18ba8:	82 83       	std	Z+2, r24	; 0x02
   18baa:	93 83       	std	Z+3, r25	; 0x03
   18bac:	44 e0       	ldi	r20, 0x04	; 4
   18bae:	50 e0       	ldi	r21, 0x00	; 0
   18bb0:	60 e2       	ldi	r22, 0x20	; 32
   18bb2:	70 e0       	ldi	r23, 0x00	; 0
   18bb4:	c8 01       	movw	r24, r16
   18bb6:	0e 94 b2 92 	call	0x12564	; 0x12564 <B2V_MSB>
   18bba:	fe 01       	movw	r30, r28
   18bbc:	eb 5b       	subi	r30, 0xBB	; 187
   18bbe:	ff 4f       	sbci	r31, 0xFF	; 255
   18bc0:	60 83       	st	Z, r22
   18bc2:	71 83       	std	Z+1, r23	; 0x01
   18bc4:	82 83       	std	Z+2, r24	; 0x02
   18bc6:	93 83       	std	Z+3, r25	; 0x03
   18bc8:	de 01       	movw	r26, r28
   18bca:	a7 5b       	subi	r26, 0xB7	; 183
   18bcc:	bf 4f       	sbci	r27, 0xFF	; 255
   18bce:	f8 01       	movw	r30, r16
   18bd0:	b4 96       	adiw	r30, 0x24	; 36
   18bd2:	86 e0       	ldi	r24, 0x06	; 6
   18bd4:	01 90       	ld	r0, Z+
   18bd6:	0d 92       	st	X+, r0
   18bd8:	8a 95       	dec	r24
   18bda:	e1 f7       	brne	.-8      	; 0x18bd4 <lif_str2vol+0xfe>
   18bdc:	df 91       	pop	r29
   18bde:	cf 91       	pop	r28
   18be0:	1f 91       	pop	r17
   18be2:	0f 91       	pop	r16
   18be4:	08 95       	ret

00018be6 <lif_dir2str>:
   18be6:	ef 92       	push	r14
   18be8:	ff 92       	push	r15
   18bea:	0f 93       	push	r16
   18bec:	1f 93       	push	r17
   18bee:	cf 93       	push	r28
   18bf0:	df 93       	push	r29
   18bf2:	ec 01       	movw	r28, r24
   18bf4:	7b 01       	movw	r14, r22
   18bf6:	bc 01       	movw	r22, r24
   18bf8:	61 5b       	subi	r22, 0xB1	; 177
   18bfa:	7f 4f       	sbci	r23, 0xFF	; 255
   18bfc:	4a e0       	ldi	r20, 0x0A	; 10
   18bfe:	50 e0       	ldi	r21, 0x00	; 0
   18c00:	c7 01       	movw	r24, r14
   18c02:	77 de       	rcall	.-786    	; 0x188f2 <lif_S2B>
   18c04:	fe 01       	movw	r30, r28
   18c06:	e6 5a       	subi	r30, 0xA6	; 166
   18c08:	ff 4f       	sbci	r31, 0xFF	; 255
   18c0a:	00 81       	ld	r16, Z
   18c0c:	11 81       	ldd	r17, Z+1	; 0x01
   18c0e:	20 e0       	ldi	r18, 0x00	; 0
   18c10:	30 e0       	ldi	r19, 0x00	; 0
   18c12:	42 e0       	ldi	r20, 0x02	; 2
   18c14:	50 e0       	ldi	r21, 0x00	; 0
   18c16:	6a e0       	ldi	r22, 0x0A	; 10
   18c18:	70 e0       	ldi	r23, 0x00	; 0
   18c1a:	c7 01       	movw	r24, r14
   18c1c:	0e 94 89 92 	call	0x12512	; 0x12512 <V2B_MSB>
   18c20:	fe 01       	movw	r30, r28
   18c22:	e4 5a       	subi	r30, 0xA4	; 164
   18c24:	ff 4f       	sbci	r31, 0xFF	; 255
   18c26:	00 81       	ld	r16, Z
   18c28:	11 81       	ldd	r17, Z+1	; 0x01
   18c2a:	22 81       	ldd	r18, Z+2	; 0x02
   18c2c:	33 81       	ldd	r19, Z+3	; 0x03
   18c2e:	44 e0       	ldi	r20, 0x04	; 4
   18c30:	50 e0       	ldi	r21, 0x00	; 0
   18c32:	6c e0       	ldi	r22, 0x0C	; 12
   18c34:	70 e0       	ldi	r23, 0x00	; 0
   18c36:	c7 01       	movw	r24, r14
   18c38:	0e 94 89 92 	call	0x12512	; 0x12512 <V2B_MSB>
   18c3c:	fe 01       	movw	r30, r28
   18c3e:	e0 5a       	subi	r30, 0xA0	; 160
   18c40:	ff 4f       	sbci	r31, 0xFF	; 255
   18c42:	00 81       	ld	r16, Z
   18c44:	11 81       	ldd	r17, Z+1	; 0x01
   18c46:	22 81       	ldd	r18, Z+2	; 0x02
   18c48:	33 81       	ldd	r19, Z+3	; 0x03
   18c4a:	44 e0       	ldi	r20, 0x04	; 4
   18c4c:	50 e0       	ldi	r21, 0x00	; 0
   18c4e:	60 e1       	ldi	r22, 0x10	; 16
   18c50:	70 e0       	ldi	r23, 0x00	; 0
   18c52:	c7 01       	movw	r24, r14
   18c54:	0e 94 89 92 	call	0x12512	; 0x12512 <V2B_MSB>
   18c58:	d7 01       	movw	r26, r14
   18c5a:	54 96       	adiw	r26, 0x14	; 20
   18c5c:	fe 01       	movw	r30, r28
   18c5e:	ec 59       	subi	r30, 0x9C	; 156
   18c60:	ff 4f       	sbci	r31, 0xFF	; 255
   18c62:	86 e0       	ldi	r24, 0x06	; 6
   18c64:	01 90       	ld	r0, Z+
   18c66:	0d 92       	st	X+, r0
   18c68:	8a 95       	dec	r24
   18c6a:	e1 f7       	brne	.-8      	; 0x18c64 <lif_dir2str+0x7e>
   18c6c:	fe 01       	movw	r30, r28
   18c6e:	e6 59       	subi	r30, 0x96	; 150
   18c70:	ff 4f       	sbci	r31, 0xFF	; 255
   18c72:	00 81       	ld	r16, Z
   18c74:	11 81       	ldd	r17, Z+1	; 0x01
   18c76:	20 e0       	ldi	r18, 0x00	; 0
   18c78:	30 e0       	ldi	r19, 0x00	; 0
   18c7a:	42 e0       	ldi	r20, 0x02	; 2
   18c7c:	50 e0       	ldi	r21, 0x00	; 0
   18c7e:	6a e1       	ldi	r22, 0x1A	; 26
   18c80:	70 e0       	ldi	r23, 0x00	; 0
   18c82:	c7 01       	movw	r24, r14
   18c84:	0e 94 89 92 	call	0x12512	; 0x12512 <V2B_MSB>
   18c88:	fe 01       	movw	r30, r28
   18c8a:	e4 59       	subi	r30, 0x94	; 148
   18c8c:	ff 4f       	sbci	r31, 0xFF	; 255
   18c8e:	00 81       	ld	r16, Z
   18c90:	11 81       	ldd	r17, Z+1	; 0x01
   18c92:	20 e0       	ldi	r18, 0x00	; 0
   18c94:	30 e0       	ldi	r19, 0x00	; 0
   18c96:	42 e0       	ldi	r20, 0x02	; 2
   18c98:	50 e0       	ldi	r21, 0x00	; 0
   18c9a:	6c e1       	ldi	r22, 0x1C	; 28
   18c9c:	70 e0       	ldi	r23, 0x00	; 0
   18c9e:	c7 01       	movw	r24, r14
   18ca0:	0e 94 9d 92 	call	0x1253a	; 0x1253a <V2B_LSB>
   18ca4:	c2 59       	subi	r28, 0x92	; 146
   18ca6:	df 4f       	sbci	r29, 0xFF	; 255
   18ca8:	08 81       	ld	r16, Y
   18caa:	19 81       	ldd	r17, Y+1	; 0x01
   18cac:	20 e0       	ldi	r18, 0x00	; 0
   18cae:	30 e0       	ldi	r19, 0x00	; 0
   18cb0:	42 e0       	ldi	r20, 0x02	; 2
   18cb2:	50 e0       	ldi	r21, 0x00	; 0
   18cb4:	6e e1       	ldi	r22, 0x1E	; 30
   18cb6:	70 e0       	ldi	r23, 0x00	; 0
   18cb8:	c7 01       	movw	r24, r14
   18cba:	0e 94 9d 92 	call	0x1253a	; 0x1253a <V2B_LSB>
   18cbe:	cd b7       	in	r28, 0x3d	; 61
   18cc0:	de b7       	in	r29, 0x3e	; 62
   18cc2:	e6 e0       	ldi	r30, 0x06	; 6
   18cc4:	0c 94 1b e6 	jmp	0x1cc36	; 0x1cc36 <__epilogue_restores__+0x18>

00018cc8 <lif_str2dir>:
   18cc8:	0f 93       	push	r16
   18cca:	1f 93       	push	r17
   18ccc:	cf 93       	push	r28
   18cce:	df 93       	push	r29
   18cd0:	8c 01       	movw	r16, r24
   18cd2:	eb 01       	movw	r28, r22
   18cd4:	61 5b       	subi	r22, 0xB1	; 177
   18cd6:	7f 4f       	sbci	r23, 0xFF	; 255
   18cd8:	4a e0       	ldi	r20, 0x0A	; 10
   18cda:	50 e0       	ldi	r21, 0x00	; 0
   18cdc:	b3 dd       	rcall	.-1178   	; 0x18844 <lif_B2S>
   18cde:	42 e0       	ldi	r20, 0x02	; 2
   18ce0:	50 e0       	ldi	r21, 0x00	; 0
   18ce2:	6a e0       	ldi	r22, 0x0A	; 10
   18ce4:	70 e0       	ldi	r23, 0x00	; 0
   18ce6:	c8 01       	movw	r24, r16
   18ce8:	0e 94 b2 92 	call	0x12564	; 0x12564 <B2V_MSB>
   18cec:	fe 01       	movw	r30, r28
   18cee:	e6 5a       	subi	r30, 0xA6	; 166
   18cf0:	ff 4f       	sbci	r31, 0xFF	; 255
   18cf2:	71 83       	std	Z+1, r23	; 0x01
   18cf4:	60 83       	st	Z, r22
   18cf6:	44 e0       	ldi	r20, 0x04	; 4
   18cf8:	50 e0       	ldi	r21, 0x00	; 0
   18cfa:	6c e0       	ldi	r22, 0x0C	; 12
   18cfc:	70 e0       	ldi	r23, 0x00	; 0
   18cfe:	c8 01       	movw	r24, r16
   18d00:	0e 94 b2 92 	call	0x12564	; 0x12564 <B2V_MSB>
   18d04:	fe 01       	movw	r30, r28
   18d06:	e4 5a       	subi	r30, 0xA4	; 164
   18d08:	ff 4f       	sbci	r31, 0xFF	; 255
   18d0a:	60 83       	st	Z, r22
   18d0c:	71 83       	std	Z+1, r23	; 0x01
   18d0e:	82 83       	std	Z+2, r24	; 0x02
   18d10:	93 83       	std	Z+3, r25	; 0x03
   18d12:	44 e0       	ldi	r20, 0x04	; 4
   18d14:	50 e0       	ldi	r21, 0x00	; 0
   18d16:	60 e1       	ldi	r22, 0x10	; 16
   18d18:	70 e0       	ldi	r23, 0x00	; 0
   18d1a:	c8 01       	movw	r24, r16
   18d1c:	0e 94 b2 92 	call	0x12564	; 0x12564 <B2V_MSB>
   18d20:	fe 01       	movw	r30, r28
   18d22:	e0 5a       	subi	r30, 0xA0	; 160
   18d24:	ff 4f       	sbci	r31, 0xFF	; 255
   18d26:	60 83       	st	Z, r22
   18d28:	71 83       	std	Z+1, r23	; 0x01
   18d2a:	82 83       	std	Z+2, r24	; 0x02
   18d2c:	93 83       	std	Z+3, r25	; 0x03
   18d2e:	de 01       	movw	r26, r28
   18d30:	ac 59       	subi	r26, 0x9C	; 156
   18d32:	bf 4f       	sbci	r27, 0xFF	; 255
   18d34:	f8 01       	movw	r30, r16
   18d36:	74 96       	adiw	r30, 0x14	; 20
   18d38:	86 e0       	ldi	r24, 0x06	; 6
   18d3a:	01 90       	ld	r0, Z+
   18d3c:	0d 92       	st	X+, r0
   18d3e:	8a 95       	dec	r24
   18d40:	e1 f7       	brne	.-8      	; 0x18d3a <lif_str2dir+0x72>
   18d42:	42 e0       	ldi	r20, 0x02	; 2
   18d44:	50 e0       	ldi	r21, 0x00	; 0
   18d46:	6a e1       	ldi	r22, 0x1A	; 26
   18d48:	70 e0       	ldi	r23, 0x00	; 0
   18d4a:	c8 01       	movw	r24, r16
   18d4c:	0e 94 b2 92 	call	0x12564	; 0x12564 <B2V_MSB>
   18d50:	fe 01       	movw	r30, r28
   18d52:	e6 59       	subi	r30, 0x96	; 150
   18d54:	ff 4f       	sbci	r31, 0xFF	; 255
   18d56:	71 83       	std	Z+1, r23	; 0x01
   18d58:	60 83       	st	Z, r22
   18d5a:	42 e0       	ldi	r20, 0x02	; 2
   18d5c:	50 e0       	ldi	r21, 0x00	; 0
   18d5e:	6c e1       	ldi	r22, 0x1C	; 28
   18d60:	70 e0       	ldi	r23, 0x00	; 0
   18d62:	c8 01       	movw	r24, r16
   18d64:	0e 94 d1 92 	call	0x125a2	; 0x125a2 <B2V_LSB>
   18d68:	fe 01       	movw	r30, r28
   18d6a:	e4 59       	subi	r30, 0x94	; 148
   18d6c:	ff 4f       	sbci	r31, 0xFF	; 255
   18d6e:	71 83       	std	Z+1, r23	; 0x01
   18d70:	60 83       	st	Z, r22
   18d72:	42 e0       	ldi	r20, 0x02	; 2
   18d74:	50 e0       	ldi	r21, 0x00	; 0
   18d76:	6e e1       	ldi	r22, 0x1E	; 30
   18d78:	70 e0       	ldi	r23, 0x00	; 0
   18d7a:	c8 01       	movw	r24, r16
   18d7c:	0e 94 d1 92 	call	0x125a2	; 0x125a2 <B2V_LSB>
   18d80:	c2 59       	subi	r28, 0x92	; 146
   18d82:	df 4f       	sbci	r29, 0xFF	; 255
   18d84:	79 83       	std	Y+1, r23	; 0x01
   18d86:	68 83       	st	Y, r22
   18d88:	df 91       	pop	r29
   18d8a:	cf 91       	pop	r28
   18d8c:	1f 91       	pop	r17
   18d8e:	0f 91       	pop	r16
   18d90:	08 95       	ret

00018d92 <lif_BIN2BCD>:
   18d92:	6a e0       	ldi	r22, 0x0A	; 10
   18d94:	0e 94 3e e5 	call	0x1ca7c	; 0x1ca7c <__udivmodqi4>
   18d98:	82 95       	swap	r24
   18d9a:	80 7f       	andi	r24, 0xF0	; 240
   18d9c:	89 2b       	or	r24, r25
   18d9e:	08 95       	ret

00018da0 <lif_BCD2BIN>:
   18da0:	28 2f       	mov	r18, r24
   18da2:	22 95       	swap	r18
   18da4:	2f 70       	andi	r18, 0x0F	; 15
   18da6:	8f 70       	andi	r24, 0x0F	; 15
   18da8:	90 e0       	ldi	r25, 0x00	; 0
   18daa:	3a e0       	ldi	r19, 0x0A	; 10
   18dac:	23 9f       	mul	r18, r19
   18dae:	80 0d       	add	r24, r0
   18db0:	91 1d       	adc	r25, r1
   18db2:	11 24       	eor	r1, r1
   18db4:	08 95       	ret

00018db6 <lif_time2lifbcd>:
   18db6:	aa e1       	ldi	r26, 0x1A	; 26
   18db8:	b0 e0       	ldi	r27, 0x00	; 0
   18dba:	e1 ee       	ldi	r30, 0xE1	; 225
   18dbc:	f6 ec       	ldi	r31, 0xC6	; 198
   18dbe:	0c 94 01 e6 	jmp	0x1cc02	; 0x1cc02 <__prologue_saves__+0x1c>
   18dc2:	8b 01       	movw	r16, r22
   18dc4:	9c 01       	movw	r18, r24
   18dc6:	6f 8b       	std	Y+23, r22	; 0x17
   18dc8:	78 8f       	std	Y+24, r23	; 0x18
   18dca:	89 8f       	std	Y+25, r24	; 0x19
   18dcc:	9a 8f       	std	Y+26, r25	; 0x1a
   18dce:	67 2b       	or	r22, r23
   18dd0:	68 2b       	or	r22, r24
   18dd2:	69 2b       	or	r22, r25
   18dd4:	41 f4       	brne	.+16     	; 0x18de6 <lif_time2lifbcd+0x30>
   18dd6:	fa 01       	movw	r30, r20
   18dd8:	ca 01       	movw	r24, r20
   18dda:	06 96       	adiw	r24, 0x06	; 6
   18ddc:	11 92       	st	Z+, r1
   18dde:	e8 17       	cp	r30, r24
   18de0:	f9 07       	cpc	r31, r25
   18de2:	e1 f7       	brne	.-8      	; 0x18ddc <lif_time2lifbcd+0x26>
   18de4:	26 c0       	rjmp	.+76     	; 0x18e32 <lif_time2lifbcd+0x7c>
   18de6:	8a 01       	movw	r16, r20
   18de8:	be 01       	movw	r22, r28
   18dea:	6f 5f       	subi	r22, 0xFF	; 255
   18dec:	7f 4f       	sbci	r23, 0xFF	; 255
   18dee:	ce 01       	movw	r24, r28
   18df0:	47 96       	adiw	r24, 0x17	; 23
   18df2:	0e 94 aa 38 	call	0x7154	; 0x7154 <gmtime_r>
   18df6:	8b 85       	ldd	r24, Y+11	; 0x0b
   18df8:	9c 85       	ldd	r25, Y+12	; 0x0c
   18dfa:	64 e6       	ldi	r22, 0x64	; 100
   18dfc:	70 e0       	ldi	r23, 0x00	; 0
   18dfe:	0e 94 5e e5 	call	0x1cabc	; 0x1cabc <__divmodhi4>
   18e02:	c7 df       	rcall	.-114    	; 0x18d92 <lif_BIN2BCD>
   18e04:	f8 01       	movw	r30, r16
   18e06:	80 83       	st	Z, r24
   18e08:	89 85       	ldd	r24, Y+9	; 0x09
   18e0a:	8f 5f       	subi	r24, 0xFF	; 255
   18e0c:	c2 df       	rcall	.-124    	; 0x18d92 <lif_BIN2BCD>
   18e0e:	f8 01       	movw	r30, r16
   18e10:	81 83       	std	Z+1, r24	; 0x01
   18e12:	8f 81       	ldd	r24, Y+7	; 0x07
   18e14:	be df       	rcall	.-132    	; 0x18d92 <lif_BIN2BCD>
   18e16:	f8 01       	movw	r30, r16
   18e18:	82 83       	std	Z+2, r24	; 0x02
   18e1a:	8d 81       	ldd	r24, Y+5	; 0x05
   18e1c:	ba df       	rcall	.-140    	; 0x18d92 <lif_BIN2BCD>
   18e1e:	f8 01       	movw	r30, r16
   18e20:	83 83       	std	Z+3, r24	; 0x03
   18e22:	8b 81       	ldd	r24, Y+3	; 0x03
   18e24:	b6 df       	rcall	.-148    	; 0x18d92 <lif_BIN2BCD>
   18e26:	f8 01       	movw	r30, r16
   18e28:	84 83       	std	Z+4, r24	; 0x04
   18e2a:	89 81       	ldd	r24, Y+1	; 0x01
   18e2c:	b2 df       	rcall	.-156    	; 0x18d92 <lif_BIN2BCD>
   18e2e:	f8 01       	movw	r30, r16
   18e30:	85 83       	std	Z+5, r24	; 0x05
   18e32:	6a 96       	adiw	r28, 0x1a	; 26
   18e34:	e4 e0       	ldi	r30, 0x04	; 4
   18e36:	0c 94 1d e6 	jmp	0x1cc3a	; 0x1cc3a <__epilogue_restores__+0x1c>

00018e3a <lif_lifbcd2time>:
   18e3a:	a6 e1       	ldi	r26, 0x16	; 22
   18e3c:	b0 e0       	ldi	r27, 0x00	; 0
   18e3e:	e3 e2       	ldi	r30, 0x23	; 35
   18e40:	f7 ec       	ldi	r31, 0xC7	; 199
   18e42:	0c 94 fb e5 	jmp	0x1cbf6	; 0x1cbf6 <__prologue_saves__+0x10>
   18e46:	8c 01       	movw	r16, r24
   18e48:	7c 01       	movw	r14, r24
   18e4a:	5c 01       	movw	r10, r24
   18e4c:	26 e0       	ldi	r18, 0x06	; 6
   18e4e:	a2 0e       	add	r10, r18
   18e50:	b1 1c       	adc	r11, r1
   18e52:	cc 24       	eor	r12, r12
   18e54:	c3 94       	inc	r12
   18e56:	d1 2c       	mov	r13, r1
   18e58:	f7 01       	movw	r30, r14
   18e5a:	81 91       	ld	r24, Z+
   18e5c:	7f 01       	movw	r14, r30
   18e5e:	a0 df       	rcall	.-192    	; 0x18da0 <lif_BCD2BIN>
   18e60:	89 2b       	or	r24, r25
   18e62:	11 f0       	breq	.+4      	; 0x18e68 <lif_lifbcd2time+0x2e>
   18e64:	c1 2c       	mov	r12, r1
   18e66:	d1 2c       	mov	r13, r1
   18e68:	ea 14       	cp	r14, r10
   18e6a:	fb 04       	cpc	r15, r11
   18e6c:	a9 f7       	brne	.-22     	; 0x18e58 <lif_lifbcd2time+0x1e>
   18e6e:	c1 14       	cp	r12, r1
   18e70:	d1 04       	cpc	r13, r1
   18e72:	61 f5       	brne	.+88     	; 0x18ecc <lif_lifbcd2time+0x92>
   18e74:	f8 01       	movw	r30, r16
   18e76:	80 81       	ld	r24, Z
   18e78:	93 df       	rcall	.-218    	; 0x18da0 <lif_BCD2BIN>
   18e7a:	7c 01       	movw	r14, r24
   18e7c:	f8 01       	movw	r30, r16
   18e7e:	81 81       	ldd	r24, Z+1	; 0x01
   18e80:	8f df       	rcall	.-226    	; 0x18da0 <lif_BCD2BIN>
   18e82:	01 97       	sbiw	r24, 0x01	; 1
   18e84:	f6 e4       	ldi	r31, 0x46	; 70
   18e86:	ef 16       	cp	r14, r31
   18e88:	f1 04       	cpc	r15, r1
   18e8a:	1c f4       	brge	.+6      	; 0x18e92 <lif_lifbcd2time+0x58>
   18e8c:	24 e6       	ldi	r18, 0x64	; 100
   18e8e:	e2 0e       	add	r14, r18
   18e90:	f1 1c       	adc	r15, r1
   18e92:	fc 86       	std	Y+12, r15	; 0x0c
   18e94:	eb 86       	std	Y+11, r14	; 0x0b
   18e96:	9a 87       	std	Y+10, r25	; 0x0a
   18e98:	89 87       	std	Y+9, r24	; 0x09
   18e9a:	f8 01       	movw	r30, r16
   18e9c:	82 81       	ldd	r24, Z+2	; 0x02
   18e9e:	80 df       	rcall	.-256    	; 0x18da0 <lif_BCD2BIN>
   18ea0:	98 87       	std	Y+8, r25	; 0x08
   18ea2:	8f 83       	std	Y+7, r24	; 0x07
   18ea4:	f8 01       	movw	r30, r16
   18ea6:	83 81       	ldd	r24, Z+3	; 0x03
   18ea8:	7b df       	rcall	.-266    	; 0x18da0 <lif_BCD2BIN>
   18eaa:	9e 83       	std	Y+6, r25	; 0x06
   18eac:	8d 83       	std	Y+5, r24	; 0x05
   18eae:	f8 01       	movw	r30, r16
   18eb0:	84 81       	ldd	r24, Z+4	; 0x04
   18eb2:	76 df       	rcall	.-276    	; 0x18da0 <lif_BCD2BIN>
   18eb4:	9c 83       	std	Y+4, r25	; 0x04
   18eb6:	8b 83       	std	Y+3, r24	; 0x03
   18eb8:	f8 01       	movw	r30, r16
   18eba:	85 81       	ldd	r24, Z+5	; 0x05
   18ebc:	71 df       	rcall	.-286    	; 0x18da0 <lif_BCD2BIN>
   18ebe:	9a 83       	std	Y+2, r25	; 0x02
   18ec0:	89 83       	std	Y+1, r24	; 0x01
   18ec2:	ce 01       	movw	r24, r28
   18ec4:	01 96       	adiw	r24, 0x01	; 1
   18ec6:	0e 94 7f 3b 	call	0x76fe	; 0x76fe <timegm>
   18eca:	03 c0       	rjmp	.+6      	; 0x18ed2 <lif_lifbcd2time+0x98>
   18ecc:	60 e0       	ldi	r22, 0x00	; 0
   18ece:	70 e0       	ldi	r23, 0x00	; 0
   18ed0:	cb 01       	movw	r24, r22
   18ed2:	66 96       	adiw	r28, 0x16	; 22
   18ed4:	ea e0       	ldi	r30, 0x0A	; 10
   18ed6:	0c 94 17 e6 	jmp	0x1cc2e	; 0x1cc2e <__epilogue_restores__+0x10>

00018eda <lif_ctime_gmt>:
   18eda:	a6 e1       	ldi	r26, 0x16	; 22
   18edc:	b0 e0       	ldi	r27, 0x00	; 0
   18ede:	e3 e7       	ldi	r30, 0x73	; 115
   18ee0:	f7 ec       	ldi	r31, 0xC7	; 199
   18ee2:	0c 94 01 e6 	jmp	0x1cc02	; 0x1cc02 <__prologue_saves__+0x1c>
   18ee6:	20 e2       	ldi	r18, 0x20	; 32
   18ee8:	ef ec       	ldi	r30, 0xCF	; 207
   18eea:	f8 e1       	ldi	r31, 0x18	; 24
   18eec:	df 01       	movw	r26, r30
   18eee:	1d 92       	st	X+, r1
   18ef0:	2a 95       	dec	r18
   18ef2:	e9 f7       	brne	.-6      	; 0x18eee <lif_ctime_gmt+0x14>
   18ef4:	be 01       	movw	r22, r28
   18ef6:	6f 5f       	subi	r22, 0xFF	; 255
   18ef8:	7f 4f       	sbci	r23, 0xFF	; 255
   18efa:	0e 94 aa 38 	call	0x7154	; 0x7154 <gmtime_r>
   18efe:	6f ec       	ldi	r22, 0xCF	; 207
   18f00:	78 e1       	ldi	r23, 0x18	; 24
   18f02:	0e 94 d5 3d 	call	0x7baa	; 0x7baa <asctime_r>
   18f06:	8c 01       	movw	r16, r24
   18f08:	0e 94 b0 32 	call	0x6560	; 0x6560 <trim_tail>
   18f0c:	c8 01       	movw	r24, r16
   18f0e:	66 96       	adiw	r28, 0x16	; 22
   18f10:	e4 e0       	ldi	r30, 0x04	; 4
   18f12:	0c 94 1d e6 	jmp	0x1cc3a	; 0x1cc3a <__epilogue_restores__+0x1c>

00018f16 <lif_lifbcd2timestr>:
   18f16:	a4 e0       	ldi	r26, 0x04	; 4
   18f18:	b0 e0       	ldi	r27, 0x00	; 0
   18f1a:	e1 e9       	ldi	r30, 0x91	; 145
   18f1c:	f7 ec       	ldi	r31, 0xC7	; 199
   18f1e:	0c 94 03 e6 	jmp	0x1cc06	; 0x1cc06 <__prologue_saves__+0x20>
   18f22:	20 e2       	ldi	r18, 0x20	; 32
   18f24:	ef ea       	ldi	r30, 0xAF	; 175
   18f26:	f8 e1       	ldi	r31, 0x18	; 24
   18f28:	df 01       	movw	r26, r30
   18f2a:	1d 92       	st	X+, r1
   18f2c:	2a 95       	dec	r18
   18f2e:	e9 f7       	brne	.-6      	; 0x18f2a <lif_lifbcd2timestr+0x14>
   18f30:	84 df       	rcall	.-248    	; 0x18e3a <lif_lifbcd2time>
   18f32:	69 83       	std	Y+1, r22	; 0x01
   18f34:	7a 83       	std	Y+2, r23	; 0x02
   18f36:	8b 83       	std	Y+3, r24	; 0x03
   18f38:	9c 83       	std	Y+4, r25	; 0x04
   18f3a:	67 2b       	or	r22, r23
   18f3c:	68 2b       	or	r22, r24
   18f3e:	69 2b       	or	r22, r25
   18f40:	29 f0       	breq	.+10     	; 0x18f4c <lif_lifbcd2timestr+0x36>
   18f42:	ce 01       	movw	r24, r28
   18f44:	01 96       	adiw	r24, 0x01	; 1
   18f46:	c9 df       	rcall	.-110    	; 0x18eda <lif_ctime_gmt>
   18f48:	bc 01       	movw	r22, r24
   18f4a:	02 c0       	rjmp	.+4      	; 0x18f50 <lif_lifbcd2timestr+0x3a>
   18f4c:	62 e7       	ldi	r22, 0x72	; 114
   18f4e:	75 e1       	ldi	r23, 0x15	; 21
   18f50:	8f ea       	ldi	r24, 0xAF	; 175
   18f52:	98 e1       	ldi	r25, 0x18	; 24
   18f54:	0e 94 56 32 	call	0x64ac	; 0x64ac <strcpy>
   18f58:	8f ea       	ldi	r24, 0xAF	; 175
   18f5a:	98 e1       	ldi	r25, 0x18	; 24
   18f5c:	24 96       	adiw	r28, 0x04	; 4
   18f5e:	e2 e0       	ldi	r30, 0x02	; 2
   18f60:	0c 94 1f e6 	jmp	0x1cc3e	; 0x1cc3e <__epilogue_restores__+0x20>

00018f64 <lif_image_clear>:
   18f64:	20 e7       	ldi	r18, 0x70	; 112
   18f66:	fc 01       	movw	r30, r24
   18f68:	11 92       	st	Z+, r1
   18f6a:	2a 95       	dec	r18
   18f6c:	e9 f7       	brne	.-6      	; 0x18f68 <lif_image_clear+0x4>
   18f6e:	08 95       	ret

00018f70 <lif_dir_clear>:
   18f70:	81 5b       	subi	r24, 0xB1	; 177
   18f72:	9f 4f       	sbci	r25, 0xFF	; 255
   18f74:	21 e2       	ldi	r18, 0x21	; 33
   18f76:	fc 01       	movw	r30, r24
   18f78:	11 92       	st	Z+, r1
   18f7a:	2a 95       	dec	r18
   18f7c:	e9 f7       	brne	.-6      	; 0x18f78 <lif_dir_clear+0x8>
   18f7e:	08 95       	ret

00018f80 <lif_vol_clear>:
   18f80:	84 96       	adiw	r24, 0x24	; 36
   18f82:	2b e2       	ldi	r18, 0x2B	; 43
   18f84:	fc 01       	movw	r30, r24
   18f86:	11 92       	st	Z+, r1
   18f88:	2a 95       	dec	r18
   18f8a:	e9 f7       	brne	.-6      	; 0x18f86 <lif_vol_clear+0x6>
   18f8c:	08 95       	ret

00018f8e <lif_dump_vol>:
   18f8e:	cf 93       	push	r28
   18f90:	df 93       	push	r29
   18f92:	ec 01       	movw	r28, r24
   18f94:	7f 93       	push	r23
   18f96:	6f 93       	push	r22
   18f98:	8d ee       	ldi	r24, 0xED	; 237
   18f9a:	91 e4       	ldi	r25, 0x41	; 65
   18f9c:	1f 92       	push	r1
   18f9e:	9f 93       	push	r25
   18fa0:	8f 93       	push	r24
   18fa2:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   18fa6:	89 81       	ldd	r24, Y+1	; 0x01
   18fa8:	8f 93       	push	r24
   18faa:	88 81       	ld	r24, Y
   18fac:	8f 93       	push	r24
   18fae:	83 ed       	ldi	r24, 0xD3	; 211
   18fb0:	91 e4       	ldi	r25, 0x41	; 65
   18fb2:	1f 92       	push	r1
   18fb4:	9f 93       	push	r25
   18fb6:	8f 93       	push	r24
   18fb8:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   18fbc:	8f 81       	ldd	r24, Y+7	; 0x07
   18fbe:	8f 93       	push	r24
   18fc0:	8e 81       	ldd	r24, Y+6	; 0x06
   18fc2:	8f 93       	push	r24
   18fc4:	8d 81       	ldd	r24, Y+5	; 0x05
   18fc6:	8f 93       	push	r24
   18fc8:	8c 81       	ldd	r24, Y+4	; 0x04
   18fca:	8f 93       	push	r24
   18fcc:	86 eb       	ldi	r24, 0xB6	; 182
   18fce:	91 e4       	ldi	r25, 0x41	; 65
   18fd0:	1f 92       	push	r1
   18fd2:	9f 93       	push	r25
   18fd4:	8f 93       	push	r24
   18fd6:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   18fda:	8b 85       	ldd	r24, Y+11	; 0x0b
   18fdc:	8f 93       	push	r24
   18fde:	8a 85       	ldd	r24, Y+10	; 0x0a
   18fe0:	8f 93       	push	r24
   18fe2:	89 85       	ldd	r24, Y+9	; 0x09
   18fe4:	8f 93       	push	r24
   18fe6:	88 85       	ldd	r24, Y+8	; 0x08
   18fe8:	8f 93       	push	r24
   18fea:	89 e9       	ldi	r24, 0x99	; 153
   18fec:	91 e4       	ldi	r25, 0x41	; 65
   18fee:	1f 92       	push	r1
   18ff0:	9f 93       	push	r25
   18ff2:	8f 93       	push	r24
   18ff4:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   18ff8:	8f 85       	ldd	r24, Y+15	; 0x0f
   18ffa:	8f 93       	push	r24
   18ffc:	8e 85       	ldd	r24, Y+14	; 0x0e
   18ffe:	8f 93       	push	r24
   19000:	8d 85       	ldd	r24, Y+13	; 0x0d
   19002:	8f 93       	push	r24
   19004:	8c 85       	ldd	r24, Y+12	; 0x0c
   19006:	8f 93       	push	r24
   19008:	8c e7       	ldi	r24, 0x7C	; 124
   1900a:	91 e4       	ldi	r25, 0x41	; 65
   1900c:	1f 92       	push	r1
   1900e:	9f 93       	push	r25
   19010:	8f 93       	push	r24
   19012:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   19016:	8b 89       	ldd	r24, Y+19	; 0x13
   19018:	8f 93       	push	r24
   1901a:	8a 89       	ldd	r24, Y+18	; 0x12
   1901c:	8f 93       	push	r24
   1901e:	89 89       	ldd	r24, Y+17	; 0x11
   19020:	8f 93       	push	r24
   19022:	88 89       	ldd	r24, Y+16	; 0x10
   19024:	8f 93       	push	r24
   19026:	8f e5       	ldi	r24, 0x5F	; 95
   19028:	91 e4       	ldi	r25, 0x41	; 65
   1902a:	1f 92       	push	r1
   1902c:	9f 93       	push	r25
   1902e:	8f 93       	push	r24
   19030:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   19034:	8d b7       	in	r24, 0x3d	; 61
   19036:	9e b7       	in	r25, 0x3e	; 62
   19038:	86 96       	adiw	r24, 0x26	; 38
   1903a:	0f b6       	in	r0, 0x3f	; 63
   1903c:	f8 94       	cli
   1903e:	9e bf       	out	0x3e, r25	; 62
   19040:	0f be       	out	0x3f, r0	; 63
   19042:	8d bf       	out	0x3d, r24	; 61
   19044:	8f 89       	ldd	r24, Y+23	; 0x17
   19046:	8f 93       	push	r24
   19048:	8e 89       	ldd	r24, Y+22	; 0x16
   1904a:	8f 93       	push	r24
   1904c:	8d 89       	ldd	r24, Y+21	; 0x15
   1904e:	8f 93       	push	r24
   19050:	8c 89       	ldd	r24, Y+20	; 0x14
   19052:	8f 93       	push	r24
   19054:	82 e4       	ldi	r24, 0x42	; 66
   19056:	91 e4       	ldi	r25, 0x41	; 65
   19058:	1f 92       	push	r1
   1905a:	9f 93       	push	r25
   1905c:	8f 93       	push	r24
   1905e:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   19062:	8b 8d       	ldd	r24, Y+27	; 0x1b
   19064:	8f 93       	push	r24
   19066:	8a 8d       	ldd	r24, Y+26	; 0x1a
   19068:	8f 93       	push	r24
   1906a:	89 8d       	ldd	r24, Y+25	; 0x19
   1906c:	8f 93       	push	r24
   1906e:	88 8d       	ldd	r24, Y+24	; 0x18
   19070:	8f 93       	push	r24
   19072:	85 e2       	ldi	r24, 0x25	; 37
   19074:	91 e4       	ldi	r25, 0x41	; 65
   19076:	1f 92       	push	r1
   19078:	9f 93       	push	r25
   1907a:	8f 93       	push	r24
   1907c:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   19080:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19082:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19084:	09 2e       	mov	r0, r25
   19086:	00 0c       	add	r0, r0
   19088:	aa 0b       	sbc	r26, r26
   1908a:	bb 0b       	sbc	r27, r27
   1908c:	bf 93       	push	r27
   1908e:	af 93       	push	r26
   19090:	9f 93       	push	r25
   19092:	8f 93       	push	r24
   19094:	88 e0       	ldi	r24, 0x08	; 8
   19096:	91 e4       	ldi	r25, 0x41	; 65
   19098:	1f 92       	push	r1
   1909a:	9f 93       	push	r25
   1909c:	8f 93       	push	r24
   1909e:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   190a2:	8e 8d       	ldd	r24, Y+30	; 0x1e
   190a4:	9f 8d       	ldd	r25, Y+31	; 0x1f
   190a6:	09 2e       	mov	r0, r25
   190a8:	00 0c       	add	r0, r0
   190aa:	aa 0b       	sbc	r26, r26
   190ac:	bb 0b       	sbc	r27, r27
   190ae:	bf 93       	push	r27
   190b0:	af 93       	push	r26
   190b2:	9f 93       	push	r25
   190b4:	8f 93       	push	r24
   190b6:	8b ee       	ldi	r24, 0xEB	; 235
   190b8:	90 e4       	ldi	r25, 0x40	; 64
   190ba:	1f 92       	push	r1
   190bc:	9f 93       	push	r25
   190be:	8f 93       	push	r24
   190c0:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   190c4:	ce 01       	movw	r24, r28
   190c6:	86 96       	adiw	r24, 0x26	; 38
   190c8:	9f 93       	push	r25
   190ca:	8f 93       	push	r24
   190cc:	81 ed       	ldi	r24, 0xD1	; 209
   190ce:	90 e4       	ldi	r25, 0x40	; 64
   190d0:	1f 92       	push	r1
   190d2:	9f 93       	push	r25
   190d4:	8f 93       	push	r24
   190d6:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   190da:	8d b7       	in	r24, 0x3d	; 61
   190dc:	9e b7       	in	r25, 0x3e	; 62
   190de:	81 96       	adiw	r24, 0x21	; 33
   190e0:	0f b6       	in	r0, 0x3f	; 63
   190e2:	f8 94       	cli
   190e4:	9e bf       	out	0x3e, r25	; 62
   190e6:	0f be       	out	0x3f, r0	; 63
   190e8:	8d bf       	out	0x3d, r24	; 61
   190ea:	8d a1       	ldd	r24, Y+37	; 0x25
   190ec:	8f 93       	push	r24
   190ee:	8c a1       	ldd	r24, Y+36	; 0x24
   190f0:	8f 93       	push	r24
   190f2:	85 eb       	ldi	r24, 0xB5	; 181
   190f4:	90 e4       	ldi	r25, 0x40	; 64
   190f6:	1f 92       	push	r1
   190f8:	9f 93       	push	r25
   190fa:	8f 93       	push	r24
   190fc:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   19100:	88 a9       	ldd	r24, Y+48	; 0x30
   19102:	8f 93       	push	r24
   19104:	8f a5       	ldd	r24, Y+47	; 0x2f
   19106:	8f 93       	push	r24
   19108:	8e a5       	ldd	r24, Y+46	; 0x2e
   1910a:	8f 93       	push	r24
   1910c:	8d a5       	ldd	r24, Y+45	; 0x2d
   1910e:	8f 93       	push	r24
   19110:	88 e9       	ldi	r24, 0x98	; 152
   19112:	90 e4       	ldi	r25, 0x40	; 64
   19114:	1f 92       	push	r1
   19116:	9f 93       	push	r25
   19118:	8f 93       	push	r24
   1911a:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1911e:	88 ad       	ldd	r24, Y+56	; 0x38
   19120:	8f 93       	push	r24
   19122:	8f a9       	ldd	r24, Y+55	; 0x37
   19124:	8f 93       	push	r24
   19126:	8e a9       	ldd	r24, Y+54	; 0x36
   19128:	8f 93       	push	r24
   1912a:	8d a9       	ldd	r24, Y+53	; 0x35
   1912c:	8f 93       	push	r24
   1912e:	8b e7       	ldi	r24, 0x7B	; 123
   19130:	90 e4       	ldi	r25, 0x40	; 64
   19132:	1f 92       	push	r1
   19134:	9f 93       	push	r25
   19136:	8f 93       	push	r24
   19138:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1913c:	8a a9       	ldd	r24, Y+50	; 0x32
   1913e:	8f 93       	push	r24
   19140:	89 a9       	ldd	r24, Y+49	; 0x31
   19142:	8f 93       	push	r24
   19144:	8f e5       	ldi	r24, 0x5F	; 95
   19146:	90 e4       	ldi	r25, 0x40	; 64
   19148:	1f 92       	push	r1
   1914a:	9f 93       	push	r25
   1914c:	8f 93       	push	r24
   1914e:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   19152:	8a ad       	ldd	r24, Y+58	; 0x3a
   19154:	8f 93       	push	r24
   19156:	89 ad       	ldd	r24, Y+57	; 0x39
   19158:	8f 93       	push	r24
   1915a:	83 e4       	ldi	r24, 0x43	; 67
   1915c:	90 e4       	ldi	r25, 0x40	; 64
   1915e:	1f 92       	push	r1
   19160:	9f 93       	push	r25
   19162:	8f 93       	push	r24
   19164:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   19168:	ce 01       	movw	r24, r28
   1916a:	87 5b       	subi	r24, 0xB7	; 183
   1916c:	9f 4f       	sbci	r25, 0xFF	; 255
   1916e:	d3 de       	rcall	.-602    	; 0x18f16 <lif_lifbcd2timestr>
   19170:	9f 93       	push	r25
   19172:	8f 93       	push	r24
   19174:	89 e2       	ldi	r24, 0x29	; 41
   19176:	90 e4       	ldi	r25, 0x40	; 64
   19178:	1f 92       	push	r1
   1917a:	9f 93       	push	r25
   1917c:	8f 93       	push	r24
   1917e:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   19182:	8d b7       	in	r24, 0x3d	; 61
   19184:	9e b7       	in	r25, 0x3e	; 62
   19186:	82 96       	adiw	r24, 0x22	; 34
   19188:	0f b6       	in	r0, 0x3f	; 63
   1918a:	f8 94       	cli
   1918c:	9e bf       	out	0x3e, r25	; 62
   1918e:	0f be       	out	0x3f, r0	; 63
   19190:	8d bf       	out	0x3d, r24	; 61
   19192:	ce 01       	movw	r24, r28
   19194:	81 5b       	subi	r24, 0xB1	; 177
   19196:	9f 4f       	sbci	r25, 0xFF	; 255
   19198:	9f 93       	push	r25
   1919a:	8f 93       	push	r24
   1919c:	8f e0       	ldi	r24, 0x0F	; 15
   1919e:	90 e4       	ldi	r25, 0x40	; 64
   191a0:	1f 92       	push	r1
   191a2:	9f 93       	push	r25
   191a4:	8f 93       	push	r24
   191a6:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   191aa:	fe 01       	movw	r30, r28
   191ac:	e6 5a       	subi	r30, 0xA6	; 166
   191ae:	ff 4f       	sbci	r31, 0xFF	; 255
   191b0:	81 81       	ldd	r24, Z+1	; 0x01
   191b2:	8f 93       	push	r24
   191b4:	80 81       	ld	r24, Z
   191b6:	8f 93       	push	r24
   191b8:	83 ef       	ldi	r24, 0xF3	; 243
   191ba:	9f e3       	ldi	r25, 0x3F	; 63
   191bc:	1f 92       	push	r1
   191be:	9f 93       	push	r25
   191c0:	8f 93       	push	r24
   191c2:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   191c6:	fe 01       	movw	r30, r28
   191c8:	e6 59       	subi	r30, 0x96	; 150
   191ca:	ff 4f       	sbci	r31, 0xFF	; 255
   191cc:	81 81       	ldd	r24, Z+1	; 0x01
   191ce:	8f 93       	push	r24
   191d0:	80 81       	ld	r24, Z
   191d2:	8f 93       	push	r24
   191d4:	87 ed       	ldi	r24, 0xD7	; 215
   191d6:	9f e3       	ldi	r25, 0x3F	; 63
   191d8:	1f 92       	push	r1
   191da:	9f 93       	push	r25
   191dc:	8f 93       	push	r24
   191de:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   191e2:	fe 01       	movw	r30, r28
   191e4:	e4 5a       	subi	r30, 0xA4	; 164
   191e6:	ff 4f       	sbci	r31, 0xFF	; 255
   191e8:	83 81       	ldd	r24, Z+3	; 0x03
   191ea:	8f 93       	push	r24
   191ec:	82 81       	ldd	r24, Z+2	; 0x02
   191ee:	8f 93       	push	r24
   191f0:	81 81       	ldd	r24, Z+1	; 0x01
   191f2:	8f 93       	push	r24
   191f4:	80 81       	ld	r24, Z
   191f6:	8f 93       	push	r24
   191f8:	8a eb       	ldi	r24, 0xBA	; 186
   191fa:	9f e3       	ldi	r25, 0x3F	; 63
   191fc:	1f 92       	push	r1
   191fe:	9f 93       	push	r25
   19200:	8f 93       	push	r24
   19202:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   19206:	fe 01       	movw	r30, r28
   19208:	e0 5a       	subi	r30, 0xA0	; 160
   1920a:	ff 4f       	sbci	r31, 0xFF	; 255
   1920c:	83 81       	ldd	r24, Z+3	; 0x03
   1920e:	8f 93       	push	r24
   19210:	82 81       	ldd	r24, Z+2	; 0x02
   19212:	8f 93       	push	r24
   19214:	81 81       	ldd	r24, Z+1	; 0x01
   19216:	8f 93       	push	r24
   19218:	80 81       	ld	r24, Z
   1921a:	8f 93       	push	r24
   1921c:	8d e9       	ldi	r24, 0x9D	; 157
   1921e:	9f e3       	ldi	r25, 0x3F	; 63
   19220:	1f 92       	push	r1
   19222:	9f 93       	push	r25
   19224:	8f 93       	push	r24
   19226:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1922a:	fe 01       	movw	r30, r28
   1922c:	e4 59       	subi	r30, 0x94	; 148
   1922e:	ff 4f       	sbci	r31, 0xFF	; 255
   19230:	80 81       	ld	r24, Z
   19232:	91 81       	ldd	r25, Z+1	; 0x01
   19234:	1f 92       	push	r1
   19236:	1f 92       	push	r1
   19238:	9f 93       	push	r25
   1923a:	8f 93       	push	r24
   1923c:	80 e8       	ldi	r24, 0x80	; 128
   1923e:	9f e3       	ldi	r25, 0x3F	; 63
   19240:	1f 92       	push	r1
   19242:	9f 93       	push	r25
   19244:	8f 93       	push	r24
   19246:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1924a:	8d b7       	in	r24, 0x3d	; 61
   1924c:	9e b7       	in	r25, 0x3e	; 62
   1924e:	84 96       	adiw	r24, 0x24	; 36
   19250:	0f b6       	in	r0, 0x3f	; 63
   19252:	f8 94       	cli
   19254:	9e bf       	out	0x3e, r25	; 62
   19256:	0f be       	out	0x3f, r0	; 63
   19258:	8d bf       	out	0x3d, r24	; 61
   1925a:	fe 01       	movw	r30, r28
   1925c:	e2 59       	subi	r30, 0x92	; 146
   1925e:	ff 4f       	sbci	r31, 0xFF	; 255
   19260:	81 81       	ldd	r24, Z+1	; 0x01
   19262:	8f 93       	push	r24
   19264:	80 81       	ld	r24, Z
   19266:	8f 93       	push	r24
   19268:	84 e6       	ldi	r24, 0x64	; 100
   1926a:	9f e3       	ldi	r25, 0x3F	; 63
   1926c:	1f 92       	push	r1
   1926e:	9f 93       	push	r25
   19270:	8f 93       	push	r24
   19272:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   19276:	ce 01       	movw	r24, r28
   19278:	8c 59       	subi	r24, 0x9C	; 156
   1927a:	9f 4f       	sbci	r25, 0xFF	; 255
   1927c:	4c de       	rcall	.-872    	; 0x18f16 <lif_lifbcd2timestr>
   1927e:	9f 93       	push	r25
   19280:	8f 93       	push	r24
   19282:	8a e4       	ldi	r24, 0x4A	; 74
   19284:	9f e3       	ldi	r25, 0x3F	; 63
   19286:	1f 92       	push	r1
   19288:	9f 93       	push	r25
   1928a:	8f 93       	push	r24
   1928c:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   19290:	88 e4       	ldi	r24, 0x48	; 72
   19292:	9f e3       	ldi	r25, 0x3F	; 63
   19294:	1f 92       	push	r1
   19296:	9f 93       	push	r25
   19298:	8f 93       	push	r24
   1929a:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1929e:	8d b7       	in	r24, 0x3d	; 61
   192a0:	9e b7       	in	r25, 0x3e	; 62
   192a2:	0d 96       	adiw	r24, 0x0d	; 13
   192a4:	0f b6       	in	r0, 0x3f	; 63
   192a6:	f8 94       	cli
   192a8:	9e bf       	out	0x3e, r25	; 62
   192aa:	0f be       	out	0x3f, r0	; 63
   192ac:	8d bf       	out	0x3d, r24	; 61
   192ae:	df 91       	pop	r29
   192b0:	cf 91       	pop	r28
   192b2:	08 95       	ret

000192b4 <lif_check_volume>:
   192b4:	0f 93       	push	r16
   192b6:	1f 93       	push	r17
   192b8:	cf 93       	push	r28
   192ba:	df 93       	push	r29
   192bc:	ec 01       	movw	r28, r24
   192be:	86 96       	adiw	r24, 0x26	; 38
   192c0:	fb da       	rcall	.-2570   	; 0x188b8 <lif_checkname>
   192c2:	89 2b       	or	r24, r25
   192c4:	79 f4       	brne	.+30     	; 0x192e4 <lif_check_volume+0x30>
   192c6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   192ca:	80 ff       	sbrs	r24, 0
   192cc:	0e c0       	rjmp	.+28     	; 0x192ea <lif_check_volume+0x36>
   192ce:	89 e2       	ldi	r24, 0x29	; 41
   192d0:	9f e3       	ldi	r25, 0x3F	; 63
   192d2:	1f 92       	push	r1
   192d4:	9f 93       	push	r25
   192d6:	8f 93       	push	r24
   192d8:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   192dc:	0f 90       	pop	r0
   192de:	0f 90       	pop	r0
   192e0:	0f 90       	pop	r0
   192e2:	03 c0       	rjmp	.+6      	; 0x192ea <lif_check_volume+0x36>
   192e4:	81 e0       	ldi	r24, 0x01	; 1
   192e6:	90 e0       	ldi	r25, 0x00	; 0
   192e8:	02 c0       	rjmp	.+4      	; 0x192ee <lif_check_volume+0x3a>
   192ea:	80 e0       	ldi	r24, 0x00	; 0
   192ec:	90 e0       	ldi	r25, 0x00	; 0
   192ee:	29 a9       	ldd	r18, Y+49	; 0x31
   192f0:	3a a9       	ldd	r19, Y+50	; 0x32
   192f2:	21 15       	cp	r18, r1
   192f4:	40 e1       	ldi	r20, 0x10	; 16
   192f6:	34 07       	cpc	r19, r20
   192f8:	a1 f0       	breq	.+40     	; 0x19322 <lif_check_volume+0x6e>
   192fa:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   192fe:	80 ff       	sbrs	r24, 0
   19300:	0e c0       	rjmp	.+28     	; 0x1931e <lif_check_volume+0x6a>
   19302:	3f 93       	push	r19
   19304:	2f 93       	push	r18
   19306:	80 ef       	ldi	r24, 0xF0	; 240
   19308:	9e e3       	ldi	r25, 0x3E	; 62
   1930a:	1f 92       	push	r1
   1930c:	9f 93       	push	r25
   1930e:	8f 93       	push	r24
   19310:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   19314:	0f 90       	pop	r0
   19316:	0f 90       	pop	r0
   19318:	0f 90       	pop	r0
   1931a:	0f 90       	pop	r0
   1931c:	0f 90       	pop	r0
   1931e:	80 e0       	ldi	r24, 0x00	; 0
   19320:	90 e0       	ldi	r25, 0x00	; 0
   19322:	29 ad       	ldd	r18, Y+57	; 0x39
   19324:	3a ad       	ldd	r19, Y+58	; 0x3a
   19326:	22 30       	cpi	r18, 0x02	; 2
   19328:	31 05       	cpc	r19, r1
   1932a:	a0 f0       	brcs	.+40     	; 0x19354 <lif_check_volume+0xa0>
   1932c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   19330:	80 ff       	sbrs	r24, 0
   19332:	0e c0       	rjmp	.+28     	; 0x19350 <lif_check_volume+0x9c>
   19334:	3f 93       	push	r19
   19336:	2f 93       	push	r18
   19338:	88 ed       	ldi	r24, 0xD8	; 216
   1933a:	9e e3       	ldi	r25, 0x3E	; 62
   1933c:	1f 92       	push	r1
   1933e:	9f 93       	push	r25
   19340:	8f 93       	push	r24
   19342:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   19346:	0f 90       	pop	r0
   19348:	0f 90       	pop	r0
   1934a:	0f 90       	pop	r0
   1934c:	0f 90       	pop	r0
   1934e:	0f 90       	pop	r0
   19350:	80 e0       	ldi	r24, 0x00	; 0
   19352:	90 e0       	ldi	r25, 0x00	; 0
   19354:	2b a9       	ldd	r18, Y+51	; 0x33
   19356:	3c a9       	ldd	r19, Y+52	; 0x34
   19358:	23 2b       	or	r18, r19
   1935a:	81 f0       	breq	.+32     	; 0x1937c <lif_check_volume+0xc8>
   1935c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   19360:	80 ff       	sbrs	r24, 0
   19362:	0a c0       	rjmp	.+20     	; 0x19378 <lif_check_volume+0xc4>
   19364:	8f e9       	ldi	r24, 0x9F	; 159
   19366:	9e e3       	ldi	r25, 0x3E	; 62
   19368:	1f 92       	push	r1
   1936a:	9f 93       	push	r25
   1936c:	8f 93       	push	r24
   1936e:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   19372:	0f 90       	pop	r0
   19374:	0f 90       	pop	r0
   19376:	0f 90       	pop	r0
   19378:	80 e0       	ldi	r24, 0x00	; 0
   1937a:	90 e0       	ldi	r25, 0x00	; 0
   1937c:	2b ad       	ldd	r18, Y+59	; 0x3b
   1937e:	3c ad       	ldd	r19, Y+60	; 0x3c
   19380:	23 2b       	or	r18, r19
   19382:	81 f0       	breq	.+32     	; 0x193a4 <lif_check_volume+0xf0>
   19384:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   19388:	80 ff       	sbrs	r24, 0
   1938a:	0a c0       	rjmp	.+20     	; 0x193a0 <lif_check_volume+0xec>
   1938c:	86 e6       	ldi	r24, 0x66	; 102
   1938e:	9e e3       	ldi	r25, 0x3E	; 62
   19390:	1f 92       	push	r1
   19392:	9f 93       	push	r25
   19394:	8f 93       	push	r24
   19396:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1939a:	0f 90       	pop	r0
   1939c:	0f 90       	pop	r0
   1939e:	0f 90       	pop	r0
   193a0:	80 e0       	ldi	r24, 0x00	; 0
   193a2:	90 e0       	ldi	r25, 0x00	; 0
   193a4:	4d a5       	ldd	r20, Y+45	; 0x2d
   193a6:	5e a5       	ldd	r21, Y+46	; 0x2e
   193a8:	6f a5       	ldd	r22, Y+47	; 0x2f
   193aa:	78 a9       	ldd	r23, Y+48	; 0x30
   193ac:	45 2b       	or	r20, r21
   193ae:	46 2b       	or	r20, r22
   193b0:	47 2b       	or	r20, r23
   193b2:	c9 f4       	brne	.+50     	; 0x193e6 <lif_check_volume+0x132>
   193b4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   193b8:	80 ff       	sbrs	r24, 0
   193ba:	13 c0       	rjmp	.+38     	; 0x193e2 <lif_check_volume+0x12e>
   193bc:	1f 92       	push	r1
   193be:	1f 92       	push	r1
   193c0:	1f 92       	push	r1
   193c2:	1f 92       	push	r1
   193c4:	81 e4       	ldi	r24, 0x41	; 65
   193c6:	9e e3       	ldi	r25, 0x3E	; 62
   193c8:	1f 92       	push	r1
   193ca:	9f 93       	push	r25
   193cc:	8f 93       	push	r24
   193ce:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   193d2:	8d b7       	in	r24, 0x3d	; 61
   193d4:	9e b7       	in	r25, 0x3e	; 62
   193d6:	07 96       	adiw	r24, 0x07	; 7
   193d8:	0f b6       	in	r0, 0x3f	; 63
   193da:	f8 94       	cli
   193dc:	9e bf       	out	0x3e, r25	; 62
   193de:	0f be       	out	0x3f, r0	; 63
   193e0:	8d bf       	out	0x3d, r24	; 61
   193e2:	80 e0       	ldi	r24, 0x00	; 0
   193e4:	90 e0       	ldi	r25, 0x00	; 0
   193e6:	4d a9       	ldd	r20, Y+53	; 0x35
   193e8:	5e a9       	ldd	r21, Y+54	; 0x36
   193ea:	6f a9       	ldd	r22, Y+55	; 0x37
   193ec:	78 ad       	ldd	r23, Y+56	; 0x38
   193ee:	45 2b       	or	r20, r21
   193f0:	46 2b       	or	r20, r22
   193f2:	47 2b       	or	r20, r23
   193f4:	81 f4       	brne	.+32     	; 0x19416 <lif_check_volume+0x162>
   193f6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   193fa:	80 ff       	sbrs	r24, 0
   193fc:	0a c0       	rjmp	.+20     	; 0x19412 <lif_check_volume+0x15e>
   193fe:	82 e1       	ldi	r24, 0x12	; 18
   19400:	9e e3       	ldi	r25, 0x3E	; 62
   19402:	1f 92       	push	r1
   19404:	9f 93       	push	r25
   19406:	8f 93       	push	r24
   19408:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1940c:	0f 90       	pop	r0
   1940e:	0f 90       	pop	r0
   19410:	0f 90       	pop	r0
   19412:	80 e0       	ldi	r24, 0x00	; 0
   19414:	90 e0       	ldi	r25, 0x00	; 0
   19416:	0d a5       	ldd	r16, Y+45	; 0x2d
   19418:	1e a5       	ldd	r17, Y+46	; 0x2e
   1941a:	2f a5       	ldd	r18, Y+47	; 0x2f
   1941c:	38 a9       	ldd	r19, Y+48	; 0x30
   1941e:	4d a9       	ldd	r20, Y+53	; 0x35
   19420:	5e a9       	ldd	r21, Y+54	; 0x36
   19422:	6f a9       	ldd	r22, Y+55	; 0x37
   19424:	78 ad       	ldd	r23, Y+56	; 0x38
   19426:	40 0f       	add	r20, r16
   19428:	51 1f       	adc	r21, r17
   1942a:	62 1f       	adc	r22, r18
   1942c:	73 1f       	adc	r23, r19
   1942e:	0c 81       	ldd	r16, Y+4	; 0x04
   19430:	1d 81       	ldd	r17, Y+5	; 0x05
   19432:	2e 81       	ldd	r18, Y+6	; 0x06
   19434:	3f 81       	ldd	r19, Y+7	; 0x07
   19436:	04 17       	cp	r16, r20
   19438:	15 07       	cpc	r17, r21
   1943a:	26 07       	cpc	r18, r22
   1943c:	37 07       	cpc	r19, r23
   1943e:	80 f4       	brcc	.+32     	; 0x19460 <lif_check_volume+0x1ac>
   19440:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   19444:	80 ff       	sbrs	r24, 0
   19446:	0a c0       	rjmp	.+20     	; 0x1945c <lif_check_volume+0x1a8>
   19448:	86 ee       	ldi	r24, 0xE6	; 230
   1944a:	9d e3       	ldi	r25, 0x3D	; 61
   1944c:	1f 92       	push	r1
   1944e:	9f 93       	push	r25
   19450:	8f 93       	push	r24
   19452:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   19456:	0f 90       	pop	r0
   19458:	0f 90       	pop	r0
   1945a:	0f 90       	pop	r0
   1945c:	80 e0       	ldi	r24, 0x00	; 0
   1945e:	90 e0       	ldi	r25, 0x00	; 0
   19460:	df 91       	pop	r29
   19462:	cf 91       	pop	r28
   19464:	1f 91       	pop	r17
   19466:	0f 91       	pop	r16
   19468:	08 95       	ret

0001946a <lif_check_dir>:
   1946a:	a4 e0       	ldi	r26, 0x04	; 4
   1946c:	b0 e0       	ldi	r27, 0x00	; 0
   1946e:	eb e3       	ldi	r30, 0x3B	; 59
   19470:	fa ec       	ldi	r31, 0xCA	; 202
   19472:	0c 94 f3 e5 	jmp	0x1cbe6	; 0x1cbe6 <__prologue_saves__>
   19476:	6c 01       	movw	r12, r24
   19478:	2a e5       	ldi	r18, 0x5A	; 90
   1947a:	c2 0e       	add	r12, r18
   1947c:	d1 1c       	adc	r13, r1
   1947e:	f6 01       	movw	r30, r12
   19480:	20 81       	ld	r18, Z
   19482:	31 81       	ldd	r19, Z+1	; 0x01
   19484:	21 50       	subi	r18, 0x01	; 1
   19486:	31 09       	sbc	r19, r1
   19488:	2e 3f       	cpi	r18, 0xFE	; 254
   1948a:	3f 4f       	sbci	r19, 0xFF	; 255
   1948c:	08 f0       	brcs	.+2      	; 0x19490 <lif_check_dir+0x26>
   1948e:	98 c1       	rjmp	.+816    	; 0x197c0 <lif_check_dir+0x356>
   19490:	9c 83       	std	Y+4, r25	; 0x04
   19492:	8b 83       	std	Y+3, r24	; 0x03
   19494:	8c 01       	movw	r16, r24
   19496:	01 5b       	subi	r16, 0xB1	; 177
   19498:	1f 4f       	sbci	r17, 0xFF	; 255
   1949a:	c8 01       	movw	r24, r16
   1949c:	0d da       	rcall	.-3046   	; 0x188b8 <lif_checkname>
   1949e:	89 2b       	or	r24, r25
   194a0:	99 f4       	brne	.+38     	; 0x194c8 <lif_check_dir+0x5e>
   194a2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   194a6:	80 ff       	sbrs	r24, 0
   194a8:	12 c0       	rjmp	.+36     	; 0x194ce <lif_check_dir+0x64>
   194aa:	1f 93       	push	r17
   194ac:	0f 93       	push	r16
   194ae:	85 ec       	ldi	r24, 0xC5	; 197
   194b0:	9d e3       	ldi	r25, 0x3D	; 61
   194b2:	1f 92       	push	r1
   194b4:	9f 93       	push	r25
   194b6:	8f 93       	push	r24
   194b8:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   194bc:	0f 90       	pop	r0
   194be:	0f 90       	pop	r0
   194c0:	0f 90       	pop	r0
   194c2:	0f 90       	pop	r0
   194c4:	0f 90       	pop	r0
   194c6:	03 c0       	rjmp	.+6      	; 0x194ce <lif_check_dir+0x64>
   194c8:	ee 24       	eor	r14, r14
   194ca:	e3 94       	inc	r14
   194cc:	01 c0       	rjmp	.+2      	; 0x194d0 <lif_check_dir+0x66>
   194ce:	e1 2c       	mov	r14, r1
   194d0:	f1 2c       	mov	r15, r1
   194d2:	eb 81       	ldd	r30, Y+3	; 0x03
   194d4:	fc 81       	ldd	r31, Y+4	; 0x04
   194d6:	84 85       	ldd	r24, Z+12	; 0x0c
   194d8:	95 85       	ldd	r25, Z+13	; 0x0d
   194da:	a6 85       	ldd	r26, Z+14	; 0x0e
   194dc:	b7 85       	ldd	r27, Z+15	; 0x0f
   194de:	00 97       	sbiw	r24, 0x00	; 0
   194e0:	a1 05       	cpc	r26, r1
   194e2:	b1 05       	cpc	r27, r1
   194e4:	39 f1       	breq	.+78     	; 0x19534 <lif_check_dir+0xca>
   194e6:	e4 5a       	subi	r30, 0xA4	; 164
   194e8:	ff 4f       	sbci	r31, 0xFF	; 255
   194ea:	40 81       	ld	r20, Z
   194ec:	51 81       	ldd	r21, Z+1	; 0x01
   194ee:	62 81       	ldd	r22, Z+2	; 0x02
   194f0:	73 81       	ldd	r23, Z+3	; 0x03
   194f2:	48 17       	cp	r20, r24
   194f4:	59 07       	cpc	r21, r25
   194f6:	6a 07       	cpc	r22, r26
   194f8:	7b 07       	cpc	r23, r27
   194fa:	e0 f4       	brcc	.+56     	; 0x19534 <lif_check_dir+0xca>
   194fc:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   19500:	20 ff       	sbrs	r18, 0
   19502:	16 c0       	rjmp	.+44     	; 0x19530 <lif_check_dir+0xc6>
   19504:	bf 93       	push	r27
   19506:	af 93       	push	r26
   19508:	9f 93       	push	r25
   1950a:	8f 93       	push	r24
   1950c:	7f 93       	push	r23
   1950e:	6f 93       	push	r22
   19510:	5f 93       	push	r21
   19512:	4f 93       	push	r20
   19514:	1f 93       	push	r17
   19516:	0f 93       	push	r16
   19518:	81 e8       	ldi	r24, 0x81	; 129
   1951a:	9d e3       	ldi	r25, 0x3D	; 61
   1951c:	1f 92       	push	r1
   1951e:	9f 93       	push	r25
   19520:	8f 93       	push	r24
   19522:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   19526:	0f b6       	in	r0, 0x3f	; 63
   19528:	f8 94       	cli
   1952a:	de bf       	out	0x3e, r29	; 62
   1952c:	0f be       	out	0x3f, r0	; 63
   1952e:	cd bf       	out	0x3d, r28	; 61
   19530:	e1 2c       	mov	r14, r1
   19532:	f1 2c       	mov	r15, r1
   19534:	eb 81       	ldd	r30, Y+3	; 0x03
   19536:	fc 81       	ldd	r31, Y+4	; 0x04
   19538:	44 81       	ldd	r20, Z+4	; 0x04
   1953a:	55 81       	ldd	r21, Z+5	; 0x05
   1953c:	66 81       	ldd	r22, Z+6	; 0x06
   1953e:	77 81       	ldd	r23, Z+7	; 0x07
   19540:	41 15       	cp	r20, r1
   19542:	51 05       	cpc	r21, r1
   19544:	61 05       	cpc	r22, r1
   19546:	71 05       	cpc	r23, r1
   19548:	99 f1       	breq	.+102    	; 0x195b0 <lif_check_dir+0x146>
   1954a:	e4 5a       	subi	r30, 0xA4	; 164
   1954c:	ff 4f       	sbci	r31, 0xFF	; 255
   1954e:	80 80       	ld	r8, Z
   19550:	91 80       	ldd	r9, Z+1	; 0x01
   19552:	a2 80       	ldd	r10, Z+2	; 0x02
   19554:	b3 80       	ldd	r11, Z+3	; 0x03
   19556:	eb 81       	ldd	r30, Y+3	; 0x03
   19558:	fc 81       	ldd	r31, Y+4	; 0x04
   1955a:	e0 5a       	subi	r30, 0xA0	; 160
   1955c:	ff 4f       	sbci	r31, 0xFF	; 255
   1955e:	80 81       	ld	r24, Z
   19560:	91 81       	ldd	r25, Z+1	; 0x01
   19562:	a2 81       	ldd	r26, Z+2	; 0x02
   19564:	b3 81       	ldd	r27, Z+3	; 0x03
   19566:	88 0d       	add	r24, r8
   19568:	99 1d       	adc	r25, r9
   1956a:	aa 1d       	adc	r26, r10
   1956c:	bb 1d       	adc	r27, r11
   1956e:	48 17       	cp	r20, r24
   19570:	59 07       	cpc	r21, r25
   19572:	6a 07       	cpc	r22, r26
   19574:	7b 07       	cpc	r23, r27
   19576:	e0 f4       	brcc	.+56     	; 0x195b0 <lif_check_dir+0x146>
   19578:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1957c:	20 ff       	sbrs	r18, 0
   1957e:	16 c0       	rjmp	.+44     	; 0x195ac <lif_check_dir+0x142>
   19580:	7f 93       	push	r23
   19582:	6f 93       	push	r22
   19584:	5f 93       	push	r21
   19586:	4f 93       	push	r20
   19588:	bf 93       	push	r27
   1958a:	af 93       	push	r26
   1958c:	9f 93       	push	r25
   1958e:	8f 93       	push	r24
   19590:	1f 93       	push	r17
   19592:	0f 93       	push	r16
   19594:	80 e4       	ldi	r24, 0x40	; 64
   19596:	9d e3       	ldi	r25, 0x3D	; 61
   19598:	1f 92       	push	r1
   1959a:	9f 93       	push	r25
   1959c:	8f 93       	push	r24
   1959e:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   195a2:	0f b6       	in	r0, 0x3f	; 63
   195a4:	f8 94       	cli
   195a6:	de bf       	out	0x3e, r29	; 62
   195a8:	0f be       	out	0x3f, r0	; 63
   195aa:	cd bf       	out	0x3d, r28	; 61
   195ac:	e1 2c       	mov	r14, r1
   195ae:	f1 2c       	mov	r15, r1
   195b0:	eb 81       	ldd	r30, Y+3	; 0x03
   195b2:	fc 81       	ldd	r31, Y+4	; 0x04
   195b4:	e6 59       	subi	r30, 0x96	; 150
   195b6:	ff 4f       	sbci	r31, 0xFF	; 255
   195b8:	80 81       	ld	r24, Z
   195ba:	91 81       	ldd	r25, Z+1	; 0x01
   195bc:	81 30       	cpi	r24, 0x01	; 1
   195be:	30 e8       	ldi	r19, 0x80	; 128
   195c0:	93 07       	cpc	r25, r19
   195c2:	b1 f0       	breq	.+44     	; 0x195f0 <lif_check_dir+0x186>
   195c4:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   195c8:	20 ff       	sbrs	r18, 0
   195ca:	10 c0       	rjmp	.+32     	; 0x195ec <lif_check_dir+0x182>
   195cc:	9f 93       	push	r25
   195ce:	8f 93       	push	r24
   195d0:	1f 93       	push	r17
   195d2:	0f 93       	push	r16
   195d4:	82 e1       	ldi	r24, 0x12	; 18
   195d6:	9d e3       	ldi	r25, 0x3D	; 61
   195d8:	1f 92       	push	r1
   195da:	9f 93       	push	r25
   195dc:	8f 93       	push	r24
   195de:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   195e2:	0f b6       	in	r0, 0x3f	; 63
   195e4:	f8 94       	cli
   195e6:	de bf       	out	0x3e, r29	; 62
   195e8:	0f be       	out	0x3f, r0	; 63
   195ea:	cd bf       	out	0x3d, r28	; 61
   195ec:	e1 2c       	mov	r14, r1
   195ee:	f1 2c       	mov	r15, r1
   195f0:	f6 01       	movw	r30, r12
   195f2:	80 81       	ld	r24, Z
   195f4:	91 81       	ldd	r25, Z+1	; 0x01
   195f6:	8c 7f       	andi	r24, 0xFC	; 252
   195f8:	80 31       	cpi	r24, 0x10	; 16
   195fa:	90 4e       	sbci	r25, 0xE0	; 224
   195fc:	09 f0       	breq	.+2      	; 0x19600 <lif_check_dir+0x196>
   195fe:	b3 c0       	rjmp	.+358    	; 0x19766 <lif_check_dir+0x2fc>
   19600:	cb 80       	ldd	r12, Y+3	; 0x03
   19602:	dc 80       	ldd	r13, Y+4	; 0x04
   19604:	2c e6       	ldi	r18, 0x6C	; 108
   19606:	c2 0e       	add	r12, r18
   19608:	d1 1c       	adc	r13, r1
   1960a:	f6 01       	movw	r30, r12
   1960c:	20 81       	ld	r18, Z
   1960e:	31 81       	ldd	r19, Z+1	; 0x01
   19610:	21 15       	cp	r18, r1
   19612:	31 05       	cpc	r19, r1
   19614:	09 f4       	brne	.+2      	; 0x19618 <lif_check_dir+0x1ae>
   19616:	a7 c0       	rjmp	.+334    	; 0x19766 <lif_check_dir+0x2fc>
   19618:	49 01       	movw	r8, r18
   1961a:	a1 2c       	mov	r10, r1
   1961c:	b1 2c       	mov	r11, r1
   1961e:	bb 27       	eor	r27, r27
   19620:	ab 2d       	mov	r26, r11
   19622:	9a 2d       	mov	r25, r10
   19624:	89 2d       	mov	r24, r9
   19626:	33 27       	eor	r19, r19
   19628:	2c 01       	movw	r4, r24
   1962a:	3d 01       	movw	r6, r26
   1962c:	21 15       	cp	r18, r1
   1962e:	31 05       	cpc	r19, r1
   19630:	29 f0       	breq	.+10     	; 0x1963c <lif_check_dir+0x1d2>
   19632:	ff ef       	ldi	r31, 0xFF	; 255
   19634:	4f 1a       	sub	r4, r31
   19636:	5f 0a       	sbc	r5, r31
   19638:	6f 0a       	sbc	r6, r31
   1963a:	7f 0a       	sbc	r7, r31
   1963c:	2b 80       	ldd	r2, Y+3	; 0x03
   1963e:	3c 80       	ldd	r3, Y+4	; 0x04
   19640:	40 e6       	ldi	r20, 0x60	; 96
   19642:	24 0e       	add	r2, r20
   19644:	31 1c       	adc	r3, r1
   19646:	f1 01       	movw	r30, r2
   19648:	40 81       	ld	r20, Z
   1964a:	51 81       	ldd	r21, Z+1	; 0x01
   1964c:	62 81       	ldd	r22, Z+2	; 0x02
   1964e:	73 81       	ldd	r23, Z+3	; 0x03
   19650:	44 15       	cp	r20, r4
   19652:	55 05       	cpc	r21, r5
   19654:	66 05       	cpc	r22, r6
   19656:	77 05       	cpc	r23, r7
   19658:	28 f5       	brcc	.+74     	; 0x196a4 <lif_check_dir+0x23a>
   1965a:	e0 91 bd 01 	lds	r30, 0x01BD	; 0x8001bd <debuglevel>
   1965e:	e0 ff       	sbrs	r30, 0
   19660:	1f c0       	rjmp	.+62     	; 0x196a0 <lif_check_dir+0x236>
   19662:	23 2b       	or	r18, r19
   19664:	19 f0       	breq	.+6      	; 0x1966c <lif_check_dir+0x202>
   19666:	01 96       	adiw	r24, 0x01	; 1
   19668:	a1 1d       	adc	r26, r1
   1966a:	b1 1d       	adc	r27, r1
   1966c:	7f 93       	push	r23
   1966e:	6f 93       	push	r22
   19670:	5f 93       	push	r21
   19672:	4f 93       	push	r20
   19674:	bf 93       	push	r27
   19676:	af 93       	push	r26
   19678:	9f 93       	push	r25
   1967a:	8f 93       	push	r24
   1967c:	1f 92       	push	r1
   1967e:	1f 92       	push	r1
   19680:	9f 92       	push	r9
   19682:	8f 92       	push	r8
   19684:	1f 93       	push	r17
   19686:	0f 93       	push	r16
   19688:	87 ec       	ldi	r24, 0xC7	; 199
   1968a:	9c e3       	ldi	r25, 0x3C	; 60
   1968c:	1f 92       	push	r1
   1968e:	9f 93       	push	r25
   19690:	8f 93       	push	r24
   19692:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   19696:	0f b6       	in	r0, 0x3f	; 63
   19698:	f8 94       	cli
   1969a:	de bf       	out	0x3e, r29	; 62
   1969c:	0f be       	out	0x3f, r0	; 63
   1969e:	cd bf       	out	0x3d, r28	; 61
   196a0:	e1 2c       	mov	r14, r1
   196a2:	f1 2c       	mov	r15, r1
   196a4:	f6 01       	movw	r30, r12
   196a6:	20 81       	ld	r18, Z
   196a8:	31 81       	ldd	r19, Z+1	; 0x01
   196aa:	49 01       	movw	r8, r18
   196ac:	a1 2c       	mov	r10, r1
   196ae:	b1 2c       	mov	r11, r1
   196b0:	bb 27       	eor	r27, r27
   196b2:	ab 2d       	mov	r26, r11
   196b4:	9a 2d       	mov	r25, r10
   196b6:	89 2d       	mov	r24, r9
   196b8:	a9 01       	movw	r20, r18
   196ba:	55 27       	eor	r21, r21
   196bc:	5a 83       	std	Y+2, r21	; 0x02
   196be:	49 83       	std	Y+1, r20	; 0x01
   196c0:	2c 01       	movw	r4, r24
   196c2:	3d 01       	movw	r6, r26
   196c4:	45 2b       	or	r20, r21
   196c6:	29 f0       	breq	.+10     	; 0x196d2 <lif_check_dir+0x268>
   196c8:	5f ef       	ldi	r21, 0xFF	; 255
   196ca:	45 1a       	sub	r4, r21
   196cc:	55 0a       	sbc	r5, r21
   196ce:	65 0a       	sbc	r6, r21
   196d0:	75 0a       	sbc	r7, r21
   196d2:	f1 01       	movw	r30, r2
   196d4:	40 81       	ld	r20, Z
   196d6:	51 81       	ldd	r21, Z+1	; 0x01
   196d8:	62 81       	ldd	r22, Z+2	; 0x02
   196da:	73 81       	ldd	r23, Z+3	; 0x03
   196dc:	44 16       	cp	r4, r20
   196de:	55 06       	cpc	r5, r21
   196e0:	66 06       	cpc	r6, r22
   196e2:	77 06       	cpc	r7, r23
   196e4:	38 f5       	brcc	.+78     	; 0x19734 <lif_check_dir+0x2ca>
   196e6:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   196ea:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
   196ee:	32 ff       	sbrs	r19, 2
   196f0:	21 c0       	rjmp	.+66     	; 0x19734 <lif_check_dir+0x2ca>
   196f2:	29 81       	ldd	r18, Y+1	; 0x01
   196f4:	3a 81       	ldd	r19, Y+2	; 0x02
   196f6:	23 2b       	or	r18, r19
   196f8:	19 f0       	breq	.+6      	; 0x19700 <lif_check_dir+0x296>
   196fa:	01 96       	adiw	r24, 0x01	; 1
   196fc:	a1 1d       	adc	r26, r1
   196fe:	b1 1d       	adc	r27, r1
   19700:	7f 93       	push	r23
   19702:	6f 93       	push	r22
   19704:	5f 93       	push	r21
   19706:	4f 93       	push	r20
   19708:	bf 93       	push	r27
   1970a:	af 93       	push	r26
   1970c:	9f 93       	push	r25
   1970e:	8f 93       	push	r24
   19710:	1f 92       	push	r1
   19712:	1f 92       	push	r1
   19714:	9f 92       	push	r9
   19716:	8f 92       	push	r8
   19718:	1f 93       	push	r17
   1971a:	0f 93       	push	r16
   1971c:	8c e7       	ldi	r24, 0x7C	; 124
   1971e:	9c e3       	ldi	r25, 0x3C	; 60
   19720:	1f 92       	push	r1
   19722:	9f 93       	push	r25
   19724:	8f 93       	push	r24
   19726:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1972a:	0f b6       	in	r0, 0x3f	; 63
   1972c:	f8 94       	cli
   1972e:	de bf       	out	0x3e, r29	; 62
   19730:	0f be       	out	0x3f, r0	; 63
   19732:	cd bf       	out	0x3d, r28	; 61
   19734:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   19738:	80 ff       	sbrs	r24, 0
   1973a:	15 c0       	rjmp	.+42     	; 0x19766 <lif_check_dir+0x2fc>
   1973c:	f6 01       	movw	r30, r12
   1973e:	80 81       	ld	r24, Z
   19740:	91 81       	ldd	r25, Z+1	; 0x01
   19742:	89 2b       	or	r24, r25
   19744:	81 f4       	brne	.+32     	; 0x19766 <lif_check_dir+0x2fc>
   19746:	1f 93       	push	r17
   19748:	0f 93       	push	r16
   1974a:	81 e5       	ldi	r24, 0x51	; 81
   1974c:	9c e3       	ldi	r25, 0x3C	; 60
   1974e:	1f 92       	push	r1
   19750:	9f 93       	push	r25
   19752:	8f 93       	push	r24
   19754:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   19758:	0f 90       	pop	r0
   1975a:	0f 90       	pop	r0
   1975c:	0f 90       	pop	r0
   1975e:	0f 90       	pop	r0
   19760:	0f 90       	pop	r0
   19762:	e1 2c       	mov	r14, r1
   19764:	f1 2c       	mov	r15, r1
   19766:	eb 81       	ldd	r30, Y+3	; 0x03
   19768:	fc 81       	ldd	r31, Y+4	; 0x04
   1976a:	e2 59       	subi	r30, 0x92	; 146
   1976c:	ff 4f       	sbci	r31, 0xFF	; 255
   1976e:	20 81       	ld	r18, Z
   19770:	31 81       	ldd	r19, Z+1	; 0x01
   19772:	21 15       	cp	r18, r1
   19774:	f1 e0       	ldi	r31, 0x01	; 1
   19776:	3f 07       	cpc	r19, r31
   19778:	31 f1       	breq	.+76     	; 0x197c6 <lif_check_dir+0x35c>
   1977a:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <debuglevel>
   1977e:	50 91 be 01 	lds	r21, 0x01BE	; 0x8001be <debuglevel+0x1>
   19782:	ca 01       	movw	r24, r20
   19784:	81 70       	andi	r24, 0x01	; 1
   19786:	99 27       	eor	r25, r25
   19788:	40 ff       	sbrs	r20, 0
   1978a:	1e c0       	rjmp	.+60     	; 0x197c8 <lif_check_dir+0x35e>
   1978c:	c9 01       	movw	r24, r18
   1978e:	1f 92       	push	r1
   19790:	1f 92       	push	r1
   19792:	9f 93       	push	r25
   19794:	2f 93       	push	r18
   19796:	eb 81       	ldd	r30, Y+3	; 0x03
   19798:	fc 81       	ldd	r31, Y+4	; 0x04
   1979a:	81 81       	ldd	r24, Z+1	; 0x01
   1979c:	8f 93       	push	r24
   1979e:	80 81       	ld	r24, Z
   197a0:	8f 93       	push	r24
   197a2:	85 e2       	ldi	r24, 0x25	; 37
   197a4:	9c e3       	ldi	r25, 0x3C	; 60
   197a6:	1f 92       	push	r1
   197a8:	9f 93       	push	r25
   197aa:	8f 93       	push	r24
   197ac:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   197b0:	0f b6       	in	r0, 0x3f	; 63
   197b2:	f8 94       	cli
   197b4:	de bf       	out	0x3e, r29	; 62
   197b6:	0f be       	out	0x3f, r0	; 63
   197b8:	cd bf       	out	0x3d, r28	; 61
   197ba:	80 e0       	ldi	r24, 0x00	; 0
   197bc:	90 e0       	ldi	r25, 0x00	; 0
   197be:	04 c0       	rjmp	.+8      	; 0x197c8 <lif_check_dir+0x35e>
   197c0:	81 e0       	ldi	r24, 0x01	; 1
   197c2:	90 e0       	ldi	r25, 0x00	; 0
   197c4:	01 c0       	rjmp	.+2      	; 0x197c8 <lif_check_dir+0x35e>
   197c6:	c7 01       	movw	r24, r14
   197c8:	24 96       	adiw	r28, 0x04	; 4
   197ca:	e2 e1       	ldi	r30, 0x12	; 18
   197cc:	0c 94 0f e6 	jmp	0x1cc1e	; 0x1cc1e <__epilogue_restores__>

000197d0 <lif_close_volume>:
   197d0:	cf 93       	push	r28
   197d2:	df 93       	push	r29
   197d4:	00 97       	sbiw	r24, 0x00	; 0
   197d6:	f9 f0       	breq	.+62     	; 0x19816 <lif_close_volume+0x46>
   197d8:	ec 01       	movw	r28, r24
   197da:	8a 81       	ldd	r24, Y+2	; 0x02
   197dc:	9b 81       	ldd	r25, Y+3	; 0x03
   197de:	00 97       	sbiw	r24, 0x00	; 0
   197e0:	79 f0       	breq	.+30     	; 0x19800 <lif_close_volume+0x30>
   197e2:	22 e0       	ldi	r18, 0x02	; 2
   197e4:	30 e0       	ldi	r19, 0x00	; 0
   197e6:	40 e0       	ldi	r20, 0x00	; 0
   197e8:	50 e0       	ldi	r21, 0x00	; 0
   197ea:	ba 01       	movw	r22, r20
   197ec:	0e 94 05 7c 	call	0xf80a	; 0xf80a <fseek>
   197f0:	8a 81       	ldd	r24, Y+2	; 0x02
   197f2:	9b 81       	ldd	r25, Y+3	; 0x03
   197f4:	0e 94 ed 7d 	call	0xfbda	; 0xfbda <fclose>
   197f8:	1b 82       	std	Y+3, r1	; 0x03
   197fa:	1a 82       	std	Y+2, r1	; 0x02
   197fc:	0e 94 e8 7c 	call	0xf9d0	; 0xf9d0 <sync>
   19800:	88 81       	ld	r24, Y
   19802:	99 81       	ldd	r25, Y+1	; 0x01
   19804:	00 97       	sbiw	r24, 0x00	; 0
   19806:	11 f0       	breq	.+4      	; 0x1980c <lif_close_volume+0x3c>
   19808:	0e 94 9b c2 	call	0x18536	; 0x18536 <lif_free>
   1980c:	ce 01       	movw	r24, r28
   1980e:	b8 db       	rcall	.-2192   	; 0x18f80 <lif_vol_clear>
   19810:	ce 01       	movw	r24, r28
   19812:	0e 94 9b c2 	call	0x18536	; 0x18536 <lif_free>
   19816:	df 91       	pop	r29
   19818:	cf 91       	pop	r28
   1981a:	08 95       	ret

0001981c <lif_checkdirindex>:
   1981c:	a0 e0       	ldi	r26, 0x00	; 0
   1981e:	b0 e0       	ldi	r27, 0x00	; 0
   19820:	e4 e1       	ldi	r30, 0x14	; 20
   19822:	fc ec       	ldi	r31, 0xCC	; 204
   19824:	0c 94 fd e5 	jmp	0x1cbfa	; 0x1cbfa <__prologue_saves__+0x14>
   19828:	77 fd       	sbrc	r23, 7
   1982a:	26 c0       	rjmp	.+76     	; 0x19878 <lif_checkdirindex+0x5c>
   1982c:	8b 01       	movw	r16, r22
   1982e:	07 2e       	mov	r0, r23
   19830:	00 0c       	add	r0, r0
   19832:	22 0b       	sbc	r18, r18
   19834:	33 0b       	sbc	r19, r19
   19836:	45 e0       	ldi	r20, 0x05	; 5
   19838:	00 0f       	add	r16, r16
   1983a:	11 1f       	adc	r17, r17
   1983c:	22 1f       	adc	r18, r18
   1983e:	33 1f       	adc	r19, r19
   19840:	4a 95       	dec	r20
   19842:	d1 f7       	brne	.-12     	; 0x19838 <lif_checkdirindex+0x1c>
   19844:	c1 2e       	mov	r12, r17
   19846:	d2 2e       	mov	r13, r18
   19848:	e3 2e       	mov	r14, r19
   1984a:	ff 24       	eor	r15, r15
   1984c:	11 27       	eor	r17, r17
   1984e:	22 27       	eor	r18, r18
   19850:	33 27       	eor	r19, r19
   19852:	01 2b       	or	r16, r17
   19854:	02 2b       	or	r16, r18
   19856:	03 2b       	or	r16, r19
   19858:	29 f0       	breq	.+10     	; 0x19864 <lif_checkdirindex+0x48>
   1985a:	2f ef       	ldi	r18, 0xFF	; 255
   1985c:	c2 1a       	sub	r12, r18
   1985e:	d2 0a       	sbc	r13, r18
   19860:	e2 0a       	sbc	r14, r18
   19862:	f2 0a       	sbc	r15, r18
   19864:	fc 01       	movw	r30, r24
   19866:	05 a9       	ldd	r16, Z+53	; 0x35
   19868:	16 a9       	ldd	r17, Z+54	; 0x36
   1986a:	27 a9       	ldd	r18, Z+55	; 0x37
   1986c:	30 ad       	ldd	r19, Z+56	; 0x38
   1986e:	0c 15       	cp	r16, r12
   19870:	1d 05       	cpc	r17, r13
   19872:	2e 05       	cpc	r18, r14
   19874:	3f 05       	cpc	r19, r15
   19876:	30 f5       	brcc	.+76     	; 0x198c4 <lif_checkdirindex+0xa8>
   19878:	ec 01       	movw	r28, r24
   1987a:	7f 93       	push	r23
   1987c:	6f 93       	push	r22
   1987e:	89 81       	ldd	r24, Y+1	; 0x01
   19880:	8f 93       	push	r24
   19882:	88 81       	ld	r24, Y
   19884:	8f 93       	push	r24
   19886:	82 e6       	ldi	r24, 0x62	; 98
   19888:	9b e3       	ldi	r25, 0x3B	; 59
   1988a:	1f 92       	push	r1
   1988c:	9f 93       	push	r25
   1988e:	8f 93       	push	r24
   19890:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   19894:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   19898:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
   1989c:	8d b7       	in	r24, 0x3d	; 61
   1989e:	9e b7       	in	r25, 0x3e	; 62
   198a0:	07 96       	adiw	r24, 0x07	; 7
   198a2:	0f b6       	in	r0, 0x3f	; 63
   198a4:	f8 94       	cli
   198a6:	9e bf       	out	0x3e, r25	; 62
   198a8:	0f be       	out	0x3f, r0	; 63
   198aa:	8d bf       	out	0x3d, r24	; 61
   198ac:	c9 01       	movw	r24, r18
   198ae:	88 27       	eor	r24, r24
   198b0:	94 70       	andi	r25, 0x04	; 4
   198b2:	32 ff       	sbrs	r19, 2
   198b4:	09 c0       	rjmp	.+18     	; 0x198c8 <lif_checkdirindex+0xac>
   198b6:	6a e7       	ldi	r22, 0x7A	; 122
   198b8:	75 e1       	ldi	r23, 0x15	; 21
   198ba:	ce 01       	movw	r24, r28
   198bc:	68 db       	rcall	.-2352   	; 0x18f8e <lif_dump_vol>
   198be:	80 e0       	ldi	r24, 0x00	; 0
   198c0:	90 e0       	ldi	r25, 0x00	; 0
   198c2:	02 c0       	rjmp	.+4      	; 0x198c8 <lif_checkdirindex+0xac>
   198c4:	81 e0       	ldi	r24, 0x01	; 1
   198c6:	90 e0       	ldi	r25, 0x00	; 0
   198c8:	cd b7       	in	r28, 0x3d	; 61
   198ca:	de b7       	in	r29, 0x3e	; 62
   198cc:	e8 e0       	ldi	r30, 0x08	; 8
   198ce:	0c 94 19 e6 	jmp	0x1cc32	; 0x1cc32 <__epilogue_restores__+0x14>

000198d2 <lif_readdirindex>:
   198d2:	a0 e2       	ldi	r26, 0x20	; 32
   198d4:	b0 e0       	ldi	r27, 0x00	; 0
   198d6:	ef e6       	ldi	r30, 0x6F	; 111
   198d8:	fc ec       	ldi	r31, 0xCC	; 204
   198da:	0c 94 fd e5 	jmp	0x1cbfa	; 0x1cbfa <__prologue_saves__+0x14>
   198de:	7c 01       	movw	r14, r24
   198e0:	6b 01       	movw	r12, r22
   198e2:	9c df       	rcall	.-200    	; 0x1981c <lif_checkdirindex>
   198e4:	89 2b       	or	r24, r25
   198e6:	19 f4       	brne	.+6      	; 0x198ee <lif_readdirindex+0x1c>
   198e8:	00 e0       	ldi	r16, 0x00	; 0
   198ea:	10 e0       	ldi	r17, 0x00	; 0
   198ec:	56 c0       	rjmp	.+172    	; 0x1999a <lif_readdirindex+0xc8>
   198ee:	f7 01       	movw	r30, r14
   198f0:	85 a5       	ldd	r24, Z+45	; 0x2d
   198f2:	96 a5       	ldd	r25, Z+46	; 0x2e
   198f4:	a7 a5       	ldd	r26, Z+47	; 0x2f
   198f6:	b0 a9       	ldd	r27, Z+48	; 0x30
   198f8:	44 27       	eor	r20, r20
   198fa:	58 2f       	mov	r21, r24
   198fc:	69 2f       	mov	r22, r25
   198fe:	7a 2f       	mov	r23, r26
   19900:	c6 01       	movw	r24, r12
   19902:	0d 2c       	mov	r0, r13
   19904:	00 0c       	add	r0, r0
   19906:	aa 0b       	sbc	r26, r26
   19908:	bb 0b       	sbc	r27, r27
   1990a:	35 e0       	ldi	r19, 0x05	; 5
   1990c:	88 0f       	add	r24, r24
   1990e:	99 1f       	adc	r25, r25
   19910:	aa 1f       	adc	r26, r26
   19912:	bb 1f       	adc	r27, r27
   19914:	3a 95       	dec	r19
   19916:	d1 f7       	brne	.-12     	; 0x1990c <lif_readdirindex+0x3a>
   19918:	9a 01       	movw	r18, r20
   1991a:	ab 01       	movw	r20, r22
   1991c:	28 0f       	add	r18, r24
   1991e:	39 1f       	adc	r19, r25
   19920:	4a 1f       	adc	r20, r26
   19922:	5b 1f       	adc	r21, r27
   19924:	00 e2       	ldi	r16, 0x20	; 32
   19926:	10 e0       	ldi	r17, 0x00	; 0
   19928:	be 01       	movw	r22, r28
   1992a:	6f 5f       	subi	r22, 0xFF	; 255
   1992c:	7f 4f       	sbci	r23, 0xFF	; 255
   1992e:	c7 01       	movw	r24, r14
   19930:	0e 94 50 c3 	call	0x186a0	; 0x186a0 <lif_read>
   19934:	60 32       	cpi	r22, 0x20	; 32
   19936:	71 05       	cpc	r23, r1
   19938:	81 05       	cpc	r24, r1
   1993a:	91 05       	cpc	r25, r1
   1993c:	a8 f2       	brcs	.-86     	; 0x198e8 <lif_readdirindex+0x16>
   1993e:	b7 01       	movw	r22, r14
   19940:	ce 01       	movw	r24, r28
   19942:	01 96       	adiw	r24, 0x01	; 1
   19944:	c1 d9       	rcall	.-3198   	; 0x18cc8 <lif_str2dir>
   19946:	f7 01       	movw	r30, r14
   19948:	e6 5a       	subi	r30, 0xA6	; 166
   1994a:	ff 4f       	sbci	r31, 0xFF	; 255
   1994c:	80 81       	ld	r24, Z
   1994e:	91 81       	ldd	r25, Z+1	; 0x01
   19950:	01 96       	adiw	r24, 0x01	; 1
   19952:	19 f4       	brne	.+6      	; 0x1995a <lif_readdirindex+0x88>
   19954:	f7 01       	movw	r30, r14
   19956:	d3 a2       	std	Z+35, r13	; 0x23
   19958:	c2 a2       	std	Z+34, r12	; 0x22
   1995a:	c7 01       	movw	r24, r14
   1995c:	86 dd       	rcall	.-1268   	; 0x1946a <lif_check_dir>
   1995e:	8c 01       	movw	r16, r24
   19960:	89 2b       	or	r24, r25
   19962:	c9 f4       	brne	.+50     	; 0x19996 <lif_readdirindex+0xc4>
   19964:	df 92       	push	r13
   19966:	cf 92       	push	r12
   19968:	82 e4       	ldi	r24, 0x42	; 66
   1996a:	9b e3       	ldi	r25, 0x3B	; 59
   1996c:	1f 92       	push	r1
   1996e:	9f 93       	push	r25
   19970:	8f 93       	push	r24
   19972:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   19976:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1997a:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1997e:	0f 90       	pop	r0
   19980:	0f 90       	pop	r0
   19982:	0f 90       	pop	r0
   19984:	0f 90       	pop	r0
   19986:	0f 90       	pop	r0
   19988:	92 ff       	sbrs	r25, 2
   1998a:	ae cf       	rjmp	.-164    	; 0x198e8 <lif_readdirindex+0x16>
   1998c:	6b e8       	ldi	r22, 0x8B	; 139
   1998e:	75 e1       	ldi	r23, 0x15	; 21
   19990:	c7 01       	movw	r24, r14
   19992:	fd da       	rcall	.-2566   	; 0x18f8e <lif_dump_vol>
   19994:	02 c0       	rjmp	.+4      	; 0x1999a <lif_readdirindex+0xc8>
   19996:	01 e0       	ldi	r16, 0x01	; 1
   19998:	10 e0       	ldi	r17, 0x00	; 0
   1999a:	c8 01       	movw	r24, r16
   1999c:	a0 96       	adiw	r28, 0x20	; 32
   1999e:	e8 e0       	ldi	r30, 0x08	; 8
   199a0:	0c 94 19 e6 	jmp	0x1cc32	; 0x1cc32 <__epilogue_restores__+0x14>

000199a4 <lif_writedirindex>:
   199a4:	a0 e2       	ldi	r26, 0x20	; 32
   199a6:	b0 e0       	ldi	r27, 0x00	; 0
   199a8:	e8 ed       	ldi	r30, 0xD8	; 216
   199aa:	fc ec       	ldi	r31, 0xCC	; 204
   199ac:	0c 94 fb e5 	jmp	0x1cbf6	; 0x1cbf6 <__prologue_saves__+0x10>
   199b0:	5c 01       	movw	r10, r24
   199b2:	6b 01       	movw	r12, r22
   199b4:	5a dd       	rcall	.-1356   	; 0x1946a <lif_check_dir>
   199b6:	7c 01       	movw	r14, r24
   199b8:	89 2b       	or	r24, r25
   199ba:	71 f4       	brne	.+28     	; 0x199d8 <lif_writedirindex+0x34>
   199bc:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   199c0:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   199c4:	92 fd       	sbrc	r25, 2
   199c6:	03 c0       	rjmp	.+6      	; 0x199ce <lif_writedirindex+0x2a>
   199c8:	e1 2c       	mov	r14, r1
   199ca:	f1 2c       	mov	r15, r1
   199cc:	42 c0       	rjmp	.+132    	; 0x19a52 <lif_writedirindex+0xae>
   199ce:	6c e9       	ldi	r22, 0x9C	; 156
   199d0:	75 e1       	ldi	r23, 0x15	; 21
   199d2:	c5 01       	movw	r24, r10
   199d4:	dc da       	rcall	.-2632   	; 0x18f8e <lif_dump_vol>
   199d6:	3d c0       	rjmp	.+122    	; 0x19a52 <lif_writedirindex+0xae>
   199d8:	b6 01       	movw	r22, r12
   199da:	c5 01       	movw	r24, r10
   199dc:	1f df       	rcall	.-450    	; 0x1981c <lif_checkdirindex>
   199de:	89 2b       	or	r24, r25
   199e0:	99 f3       	breq	.-26     	; 0x199c8 <lif_writedirindex+0x24>
   199e2:	f5 01       	movw	r30, r10
   199e4:	e6 5a       	subi	r30, 0xA6	; 166
   199e6:	ff 4f       	sbci	r31, 0xFF	; 255
   199e8:	80 81       	ld	r24, Z
   199ea:	91 81       	ldd	r25, Z+1	; 0x01
   199ec:	01 96       	adiw	r24, 0x01	; 1
   199ee:	19 f4       	brne	.+6      	; 0x199f6 <lif_writedirindex+0x52>
   199f0:	f5 01       	movw	r30, r10
   199f2:	d3 a2       	std	Z+35, r13	; 0x23
   199f4:	c2 a2       	std	Z+34, r12	; 0x22
   199f6:	f5 01       	movw	r30, r10
   199f8:	85 a5       	ldd	r24, Z+45	; 0x2d
   199fa:	96 a5       	ldd	r25, Z+46	; 0x2e
   199fc:	a7 a5       	ldd	r26, Z+47	; 0x2f
   199fe:	b0 a9       	ldd	r27, Z+48	; 0x30
   19a00:	ba 2f       	mov	r27, r26
   19a02:	a9 2f       	mov	r26, r25
   19a04:	98 2f       	mov	r25, r24
   19a06:	88 27       	eor	r24, r24
   19a08:	0d 2c       	mov	r0, r13
   19a0a:	00 0c       	add	r0, r0
   19a0c:	ee 08       	sbc	r14, r14
   19a0e:	ff 08       	sbc	r15, r15
   19a10:	35 e0       	ldi	r19, 0x05	; 5
   19a12:	cc 0c       	add	r12, r12
   19a14:	dd 1c       	adc	r13, r13
   19a16:	ee 1c       	adc	r14, r14
   19a18:	ff 1c       	adc	r15, r15
   19a1a:	3a 95       	dec	r19
   19a1c:	d1 f7       	brne	.-12     	; 0x19a12 <lif_writedirindex+0x6e>
   19a1e:	c8 0e       	add	r12, r24
   19a20:	d9 1e       	adc	r13, r25
   19a22:	ea 1e       	adc	r14, r26
   19a24:	fb 1e       	adc	r15, r27
   19a26:	be 01       	movw	r22, r28
   19a28:	6f 5f       	subi	r22, 0xFF	; 255
   19a2a:	7f 4f       	sbci	r23, 0xFF	; 255
   19a2c:	c5 01       	movw	r24, r10
   19a2e:	db d8       	rcall	.-3658   	; 0x18be6 <lif_dir2str>
   19a30:	00 e2       	ldi	r16, 0x20	; 32
   19a32:	10 e0       	ldi	r17, 0x00	; 0
   19a34:	a7 01       	movw	r20, r14
   19a36:	96 01       	movw	r18, r12
   19a38:	be 01       	movw	r22, r28
   19a3a:	6f 5f       	subi	r22, 0xFF	; 255
   19a3c:	7f 4f       	sbci	r23, 0xFF	; 255
   19a3e:	c5 01       	movw	r24, r10
   19a40:	0e 94 a9 c3 	call	0x18752	; 0x18752 <lif_write>
   19a44:	31 e0       	ldi	r19, 0x01	; 1
   19a46:	20 e0       	ldi	r18, 0x00	; 0
   19a48:	80 97       	sbiw	r24, 0x20	; 32
   19a4a:	0c f4       	brge	.+2      	; 0x19a4e <lif_writedirindex+0xaa>
   19a4c:	30 e0       	ldi	r19, 0x00	; 0
   19a4e:	e3 2e       	mov	r14, r19
   19a50:	f2 2e       	mov	r15, r18
   19a52:	c7 01       	movw	r24, r14
   19a54:	a0 96       	adiw	r28, 0x20	; 32
   19a56:	ea e0       	ldi	r30, 0x0A	; 10
   19a58:	0c 94 17 e6 	jmp	0x1cc2e	; 0x1cc2e <__epilogue_restores__+0x10>

00019a5c <lif_writedirEOF>:
   19a5c:	0f 93       	push	r16
   19a5e:	1f 93       	push	r17
   19a60:	cf 93       	push	r28
   19a62:	df 93       	push	r29
   19a64:	ec 01       	movw	r28, r24
   19a66:	8b 01       	movw	r16, r22
   19a68:	83 da       	rcall	.-2810   	; 0x18f70 <lif_dir_clear>
   19a6a:	fe 01       	movw	r30, r28
   19a6c:	e6 5a       	subi	r30, 0xA6	; 166
   19a6e:	ff 4f       	sbci	r31, 0xFF	; 255
   19a70:	8f ef       	ldi	r24, 0xFF	; 255
   19a72:	9f ef       	ldi	r25, 0xFF	; 255
   19a74:	91 83       	std	Z+1, r25	; 0x01
   19a76:	80 83       	st	Z, r24
   19a78:	1b a3       	std	Y+35, r17	; 0x23
   19a7a:	0a a3       	std	Y+34, r16	; 0x22
   19a7c:	b8 01       	movw	r22, r16
   19a7e:	ce 01       	movw	r24, r28
   19a80:	91 df       	rcall	.-222    	; 0x199a4 <lif_writedirindex>
   19a82:	df 91       	pop	r29
   19a84:	cf 91       	pop	r28
   19a86:	1f 91       	pop	r17
   19a88:	0f 91       	pop	r16
   19a8a:	08 95       	ret

00019a8c <lif_updatefree>:
   19a8c:	2f 92       	push	r2
   19a8e:	3f 92       	push	r3
   19a90:	4f 92       	push	r4
   19a92:	5f 92       	push	r5
   19a94:	6f 92       	push	r6
   19a96:	7f 92       	push	r7
   19a98:	8f 92       	push	r8
   19a9a:	af 92       	push	r10
   19a9c:	bf 92       	push	r11
   19a9e:	cf 92       	push	r12
   19aa0:	df 92       	push	r13
   19aa2:	ef 92       	push	r14
   19aa4:	ff 92       	push	r15
   19aa6:	0f 93       	push	r16
   19aa8:	1f 93       	push	r17
   19aaa:	cf 93       	push	r28
   19aac:	df 93       	push	r29
   19aae:	cd b7       	in	r28, 0x3d	; 61
   19ab0:	de b7       	in	r29, 0x3e	; 62
   19ab2:	28 97       	sbiw	r28, 0x08	; 8
   19ab4:	0f b6       	in	r0, 0x3f	; 63
   19ab6:	f8 94       	cli
   19ab8:	de bf       	out	0x3e, r29	; 62
   19aba:	0f be       	out	0x3f, r0	; 63
   19abc:	cd bf       	out	0x3d, r28	; 61
   19abe:	98 87       	std	Y+8, r25	; 0x08
   19ac0:	8f 83       	std	Y+7, r24	; 0x07
   19ac2:	fc 01       	movw	r30, r24
   19ac4:	24 84       	ldd	r2, Z+12	; 0x0c
   19ac6:	35 84       	ldd	r3, Z+13	; 0x0d
   19ac8:	46 84       	ldd	r4, Z+14	; 0x0e
   19aca:	57 84       	ldd	r5, Z+15	; 0x0f
   19acc:	80 89       	ldd	r24, Z+16	; 0x10
   19ace:	91 89       	ldd	r25, Z+17	; 0x11
   19ad0:	a2 89       	ldd	r26, Z+18	; 0x12
   19ad2:	b3 89       	ldd	r27, Z+19	; 0x13
   19ad4:	80 8f       	std	Z+24, r24	; 0x18
   19ad6:	91 8f       	std	Z+25, r25	; 0x19
   19ad8:	a2 8f       	std	Z+26, r26	; 0x1a
   19ada:	b3 8f       	std	Z+27, r27	; 0x1b
   19adc:	14 8a       	std	Z+20, r1	; 0x14
   19ade:	15 8a       	std	Z+21, r1	; 0x15
   19ae0:	16 8a       	std	Z+22, r1	; 0x16
   19ae2:	17 8a       	std	Z+23, r1	; 0x17
   19ae4:	17 8e       	std	Z+31, r1	; 0x1f
   19ae6:	16 8e       	std	Z+30, r1	; 0x1e
   19ae8:	15 8e       	std	Z+29, r1	; 0x1d
   19aea:	14 8e       	std	Z+28, r1	; 0x1c
   19aec:	11 a2       	std	Z+33, r1	; 0x21
   19aee:	10 a2       	std	Z+32, r1	; 0x20
   19af0:	13 a2       	std	Z+35, r1	; 0x23
   19af2:	12 a2       	std	Z+34, r1	; 0x22
   19af4:	cc 24       	eor	r12, r12
   19af6:	c3 94       	inc	r12
   19af8:	d1 2c       	mov	r13, r1
   19afa:	0f ef       	ldi	r16, 0xFF	; 255
   19afc:	1f ef       	ldi	r17, 0xFF	; 255
   19afe:	e6 5a       	subi	r30, 0xA6	; 166
   19b00:	ff 4f       	sbci	r31, 0xFF	; 255
   19b02:	fc 83       	std	Y+4, r31	; 0x04
   19b04:	eb 83       	std	Y+3, r30	; 0x03
   19b06:	af 80       	ldd	r10, Y+7	; 0x07
   19b08:	b8 84       	ldd	r11, Y+8	; 0x08
   19b0a:	fc e5       	ldi	r31, 0x5C	; 92
   19b0c:	af 0e       	add	r10, r31
   19b0e:	b1 1c       	adc	r11, r1
   19b10:	8f 81       	ldd	r24, Y+7	; 0x07
   19b12:	98 85       	ldd	r25, Y+8	; 0x08
   19b14:	80 5a       	subi	r24, 0xA0	; 160
   19b16:	9f 4f       	sbci	r25, 0xFF	; 255
   19b18:	9e 83       	std	Y+6, r25	; 0x06
   19b1a:	8d 83       	std	Y+5, r24	; 0x05
   19b1c:	ef 81       	ldd	r30, Y+7	; 0x07
   19b1e:	f8 85       	ldd	r31, Y+8	; 0x08
   19b20:	e1 5b       	subi	r30, 0xB1	; 177
   19b22:	ff 4f       	sbci	r31, 0xFF	; 255
   19b24:	fa 83       	std	Y+2, r31	; 0x02
   19b26:	e9 83       	std	Y+1, r30	; 0x01
   19b28:	85 ef       	ldi	r24, 0xF5	; 245
   19b2a:	9a e3       	ldi	r25, 0x3A	; 58
   19b2c:	3c 01       	movw	r6, r24
   19b2e:	76 01       	movw	r14, r12
   19b30:	21 e0       	ldi	r18, 0x01	; 1
   19b32:	e2 1a       	sub	r14, r18
   19b34:	f1 08       	sbc	r15, r1
   19b36:	b7 01       	movw	r22, r14
   19b38:	8f 81       	ldd	r24, Y+7	; 0x07
   19b3a:	98 85       	ldd	r25, Y+8	; 0x08
   19b3c:	ca de       	rcall	.-620    	; 0x198d2 <lif_readdirindex>
   19b3e:	89 2b       	or	r24, r25
   19b40:	19 f4       	brne	.+6      	; 0x19b48 <lif_updatefree+0xbc>
   19b42:	80 e0       	ldi	r24, 0x00	; 0
   19b44:	90 e0       	ldi	r25, 0x00	; 0
   19b46:	92 c0       	rjmp	.+292    	; 0x19c6c <lif_updatefree+0x1e0>
   19b48:	eb 81       	ldd	r30, Y+3	; 0x03
   19b4a:	fc 81       	ldd	r31, Y+4	; 0x04
   19b4c:	80 81       	ld	r24, Z
   19b4e:	91 81       	ldd	r25, Z+1	; 0x01
   19b50:	8f 3f       	cpi	r24, 0xFF	; 255
   19b52:	ff ef       	ldi	r31, 0xFF	; 255
   19b54:	9f 07       	cpc	r25, r31
   19b56:	c1 f4       	brne	.+48     	; 0x19b88 <lif_updatefree+0xfc>
   19b58:	ef 81       	ldd	r30, Y+7	; 0x07
   19b5a:	f8 85       	ldd	r31, Y+8	; 0x08
   19b5c:	0f 3f       	cpi	r16, 0xFF	; 255
   19b5e:	2f ef       	ldi	r18, 0xFF	; 255
   19b60:	12 07       	cpc	r17, r18
   19b62:	09 f4       	brne	.+2      	; 0x19b66 <lif_updatefree+0xda>
   19b64:	79 c0       	rjmp	.+242    	; 0x19c58 <lif_updatefree+0x1cc>
   19b66:	13 a3       	std	Z+35, r17	; 0x23
   19b68:	02 a3       	std	Z+34, r16	; 0x22
   19b6a:	e0 1a       	sub	r14, r16
   19b6c:	f1 0a       	sbc	r15, r17
   19b6e:	86 8d       	ldd	r24, Z+30	; 0x1e
   19b70:	97 8d       	ldd	r25, Z+31	; 0x1f
   19b72:	8e 19       	sub	r24, r14
   19b74:	9f 09       	sbc	r25, r15
   19b76:	97 8f       	std	Z+31, r25	; 0x1f
   19b78:	86 8f       	std	Z+30, r24	; 0x1e
   19b7a:	b8 01       	movw	r22, r16
   19b7c:	cf 01       	movw	r24, r30
   19b7e:	6e df       	rcall	.-292    	; 0x19a5c <lif_writedirEOF>
   19b80:	89 2b       	or	r24, r25
   19b82:	09 f0       	breq	.+2      	; 0x19b86 <lif_updatefree+0xfa>
   19b84:	6b c0       	rjmp	.+214    	; 0x19c5c <lif_updatefree+0x1d0>
   19b86:	dd cf       	rjmp	.-70     	; 0x19b42 <lif_updatefree+0xb6>
   19b88:	89 2b       	or	r24, r25
   19b8a:	81 f4       	brne	.+32     	; 0x19bac <lif_updatefree+0x120>
   19b8c:	0f 3f       	cpi	r16, 0xFF	; 255
   19b8e:	ff ef       	ldi	r31, 0xFF	; 255
   19b90:	1f 07       	cpc	r17, r31
   19b92:	09 f4       	brne	.+2      	; 0x19b96 <lif_updatefree+0x10a>
   19b94:	87 01       	movw	r16, r14
   19b96:	ef 81       	ldd	r30, Y+7	; 0x07
   19b98:	f8 85       	ldd	r31, Y+8	; 0x08
   19b9a:	86 8d       	ldd	r24, Z+30	; 0x1e
   19b9c:	97 8d       	ldd	r25, Z+31	; 0x1f
   19b9e:	01 96       	adiw	r24, 0x01	; 1
   19ba0:	97 8f       	std	Z+31, r25	; 0x1f
   19ba2:	86 8f       	std	Z+30, r24	; 0x1e
   19ba4:	ff ef       	ldi	r31, 0xFF	; 255
   19ba6:	cf 1a       	sub	r12, r31
   19ba8:	df 0a       	sbc	r13, r31
   19baa:	c1 cf       	rjmp	.-126    	; 0x19b2e <lif_updatefree+0xa2>
   19bac:	f5 01       	movw	r30, r10
   19bae:	80 81       	ld	r24, Z
   19bb0:	91 81       	ldd	r25, Z+1	; 0x01
   19bb2:	a2 81       	ldd	r26, Z+2	; 0x02
   19bb4:	b3 81       	ldd	r27, Z+3	; 0x03
   19bb6:	82 15       	cp	r24, r2
   19bb8:	93 05       	cpc	r25, r3
   19bba:	a4 05       	cpc	r26, r4
   19bbc:	b5 05       	cpc	r27, r5
   19bbe:	c0 f4       	brcc	.+48     	; 0x19bf0 <lif_updatefree+0x164>
   19bc0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   19bc4:	80 ff       	sbrs	r24, 0
   19bc6:	14 c0       	rjmp	.+40     	; 0x19bf0 <lif_updatefree+0x164>
   19bc8:	fa 81       	ldd	r31, Y+2	; 0x02
   19bca:	ff 93       	push	r31
   19bcc:	29 81       	ldd	r18, Y+1	; 0x01
   19bce:	2f 93       	push	r18
   19bd0:	ef 81       	ldd	r30, Y+7	; 0x07
   19bd2:	f8 85       	ldd	r31, Y+8	; 0x08
   19bd4:	81 81       	ldd	r24, Z+1	; 0x01
   19bd6:	8f 93       	push	r24
   19bd8:	80 81       	ld	r24, Z
   19bda:	8f 93       	push	r24
   19bdc:	1f 92       	push	r1
   19bde:	7f 92       	push	r7
   19be0:	6f 92       	push	r6
   19be2:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   19be6:	0f b6       	in	r0, 0x3f	; 63
   19be8:	f8 94       	cli
   19bea:	de bf       	out	0x3e, r29	; 62
   19bec:	0f be       	out	0x3f, r0	; 63
   19bee:	cd bf       	out	0x3d, r28	; 61
   19bf0:	ed 81       	ldd	r30, Y+5	; 0x05
   19bf2:	fe 81       	ldd	r31, Y+6	; 0x06
   19bf4:	80 81       	ld	r24, Z
   19bf6:	91 81       	ldd	r25, Z+1	; 0x01
   19bf8:	a2 81       	ldd	r26, Z+2	; 0x02
   19bfa:	b3 81       	ldd	r27, Z+3	; 0x03
   19bfc:	ef 81       	ldd	r30, Y+7	; 0x07
   19bfe:	f8 85       	ldd	r31, Y+8	; 0x08
   19c00:	44 89       	ldd	r20, Z+20	; 0x14
   19c02:	55 89       	ldd	r21, Z+21	; 0x15
   19c04:	66 89       	ldd	r22, Z+22	; 0x16
   19c06:	77 89       	ldd	r23, Z+23	; 0x17
   19c08:	48 0f       	add	r20, r24
   19c0a:	59 1f       	adc	r21, r25
   19c0c:	6a 1f       	adc	r22, r26
   19c0e:	7b 1f       	adc	r23, r27
   19c10:	44 8b       	std	Z+20, r20	; 0x14
   19c12:	55 8b       	std	Z+21, r21	; 0x15
   19c14:	66 8b       	std	Z+22, r22	; 0x16
   19c16:	77 8b       	std	Z+23, r23	; 0x17
   19c18:	40 8d       	ldd	r20, Z+24	; 0x18
   19c1a:	51 8d       	ldd	r21, Z+25	; 0x19
   19c1c:	62 8d       	ldd	r22, Z+26	; 0x1a
   19c1e:	73 8d       	ldd	r23, Z+27	; 0x1b
   19c20:	48 1b       	sub	r20, r24
   19c22:	59 0b       	sbc	r21, r25
   19c24:	6a 0b       	sbc	r22, r26
   19c26:	7b 0b       	sbc	r23, r27
   19c28:	40 8f       	std	Z+24, r20	; 0x18
   19c2a:	51 8f       	std	Z+25, r21	; 0x19
   19c2c:	62 8f       	std	Z+26, r22	; 0x1a
   19c2e:	73 8f       	std	Z+27, r23	; 0x1b
   19c30:	24 8d       	ldd	r18, Z+28	; 0x1c
   19c32:	35 8d       	ldd	r19, Z+29	; 0x1d
   19c34:	2f 5f       	subi	r18, 0xFF	; 255
   19c36:	3f 4f       	sbci	r19, 0xFF	; 255
   19c38:	35 8f       	std	Z+29, r19	; 0x1d
   19c3a:	24 8f       	std	Z+28, r18	; 0x1c
   19c3c:	f5 01       	movw	r30, r10
   19c3e:	40 81       	ld	r20, Z
   19c40:	51 81       	ldd	r21, Z+1	; 0x01
   19c42:	62 81       	ldd	r22, Z+2	; 0x02
   19c44:	73 81       	ldd	r23, Z+3	; 0x03
   19c46:	1c 01       	movw	r2, r24
   19c48:	2d 01       	movw	r4, r26
   19c4a:	24 0e       	add	r2, r20
   19c4c:	35 1e       	adc	r3, r21
   19c4e:	46 1e       	adc	r4, r22
   19c50:	57 1e       	adc	r5, r23
   19c52:	0f ef       	ldi	r16, 0xFF	; 255
   19c54:	1f ef       	ldi	r17, 0xFF	; 255
   19c56:	a6 cf       	rjmp	.-180    	; 0x19ba4 <lif_updatefree+0x118>
   19c58:	f3 a2       	std	Z+35, r15	; 0x23
   19c5a:	e2 a2       	std	Z+34, r14	; 0x22
   19c5c:	8f ef       	ldi	r24, 0xFF	; 255
   19c5e:	9f ef       	ldi	r25, 0xFF	; 255
   19c60:	ef 81       	ldd	r30, Y+7	; 0x07
   19c62:	f8 85       	ldd	r31, Y+8	; 0x08
   19c64:	91 a3       	std	Z+33, r25	; 0x21
   19c66:	80 a3       	std	Z+32, r24	; 0x20
   19c68:	8f 81       	ldd	r24, Y+7	; 0x07
   19c6a:	98 85       	ldd	r25, Y+8	; 0x08
   19c6c:	28 96       	adiw	r28, 0x08	; 8
   19c6e:	0f b6       	in	r0, 0x3f	; 63
   19c70:	f8 94       	cli
   19c72:	de bf       	out	0x3e, r29	; 62
   19c74:	0f be       	out	0x3f, r0	; 63
   19c76:	cd bf       	out	0x3d, r28	; 61
   19c78:	df 91       	pop	r29
   19c7a:	cf 91       	pop	r28
   19c7c:	1f 91       	pop	r17
   19c7e:	0f 91       	pop	r16
   19c80:	ff 90       	pop	r15
   19c82:	ef 90       	pop	r14
   19c84:	df 90       	pop	r13
   19c86:	cf 90       	pop	r12
   19c88:	bf 90       	pop	r11
   19c8a:	af 90       	pop	r10
   19c8c:	8f 90       	pop	r8
   19c8e:	7f 90       	pop	r7
   19c90:	6f 90       	pop	r6
   19c92:	5f 90       	pop	r5
   19c94:	4f 90       	pop	r4
   19c96:	3f 90       	pop	r3
   19c98:	2f 90       	pop	r2
   19c9a:	08 95       	ret

00019c9c <lif_create_volume>:
/// @param[in] dirstart:   Directory start sector
/// @param[in] dirsectors: Directory sectors
/// @return pointer to LIF structure
MEMSPACE
lif_t *lif_create_volume(char *imagename, char *liflabel, long dirstart, long dirsectors, long filesectors)
{
   19c9c:	a6 e1       	ldi	r26, 0x16	; 22
   19c9e:	b1 e0       	ldi	r27, 0x01	; 1
   19ca0:	e4 e5       	ldi	r30, 0x54	; 84
   19ca2:	fe ec       	ldi	r31, 0xCE	; 206
   19ca4:	0c 94 f3 e5 	jmp	0x1cbe6	; 0x1cbe6 <__prologue_saves__>
   19ca8:	4c 01       	movw	r8, r24
   19caa:	1b 01       	movw	r2, r22
   19cac:	29 01       	movw	r4, r18
   19cae:	3a 01       	movw	r6, r20
   19cb0:	cd 5e       	subi	r28, 0xED	; 237
   19cb2:	de 4f       	sbci	r29, 0xFE	; 254
   19cb4:	e8 82       	st	Y, r14
   19cb6:	f9 82       	std	Y+1, r15	; 0x01
   19cb8:	0a 83       	std	Y+2, r16	; 0x02
   19cba:	1b 83       	std	Y+3, r17	; 0x03
   19cbc:	c3 51       	subi	r28, 0x13	; 19
   19cbe:	d1 40       	sbci	r29, 0x01	; 1
   19cc0:	c5 5f       	subi	r28, 0xF5	; 245
   19cc2:	de 4f       	sbci	r29, 0xFE	; 254
   19cc4:	a8 82       	st	Y, r10
   19cc6:	b9 82       	std	Y+1, r11	; 0x01
   19cc8:	ca 82       	std	Y+2, r12	; 0x02
   19cca:	db 82       	std	Y+3, r13	; 0x03
   19ccc:	cb 50       	subi	r28, 0x0B	; 11
   19cce:	d1 40       	sbci	r29, 0x01	; 1
    long i;
    long offset;
    long count;
    uint8_t buffer[LIF_SECTOR_SIZE];

    time_t t = time(NULL);
   19cd0:	80 e0       	ldi	r24, 0x00	; 0
   19cd2:	90 e0       	ldi	r25, 0x00	; 0
   19cd4:	0e 94 1a 39 	call	0x7234	; 0x7234 <time>
   19cd8:	6b 01       	movw	r12, r22
   19cda:	7c 01       	movw	r14, r24

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
   19cdc:	64 e7       	ldi	r22, 0x74	; 116
   19cde:	70 e0       	ldi	r23, 0x00	; 0
   19ce0:	80 e0       	ldi	r24, 0x00	; 0
   19ce2:	90 e0       	ldi	r25, 0x00	; 0
   19ce4:	0e 94 6f c2 	call	0x184de	; 0x184de <lif_calloc>
   19ce8:	5c 01       	movw	r10, r24
    if(LIF == NULL)
   19cea:	89 2b       	or	r24, r25
   19cec:	09 f4       	brne	.+2      	; 0x19cf0 <lif_create_volume+0x54>
   19cee:	f9 c2       	rjmp	.+1522   	; 0x1a2e2 <lif_create_volume+0x646>
        return(NULL);

	printf("Creating:%s, Label:[%s], Directory Start %ld, Directory Size: %ld, File Sectors:%ld\n",
   19cf0:	c2 5f       	subi	r28, 0xF2	; 242
   19cf2:	de 4f       	sbci	r29, 0xFE	; 254
   19cf4:	28 81       	ld	r18, Y
   19cf6:	ce 50       	subi	r28, 0x0E	; 14
   19cf8:	d1 40       	sbci	r29, 0x01	; 1
   19cfa:	2f 93       	push	r18
   19cfc:	c3 5f       	subi	r28, 0xF3	; 243
   19cfe:	de 4f       	sbci	r29, 0xFE	; 254
   19d00:	38 81       	ld	r19, Y
   19d02:	cd 50       	subi	r28, 0x0D	; 13
   19d04:	d1 40       	sbci	r29, 0x01	; 1
   19d06:	3f 93       	push	r19
   19d08:	c4 5f       	subi	r28, 0xF4	; 244
   19d0a:	de 4f       	sbci	r29, 0xFE	; 254
   19d0c:	48 81       	ld	r20, Y
   19d0e:	cc 50       	subi	r28, 0x0C	; 12
   19d10:	d1 40       	sbci	r29, 0x01	; 1
   19d12:	4f 93       	push	r20
   19d14:	c5 5f       	subi	r28, 0xF5	; 245
   19d16:	de 4f       	sbci	r29, 0xFE	; 254
   19d18:	58 81       	ld	r21, Y
   19d1a:	cb 50       	subi	r28, 0x0B	; 11
   19d1c:	d1 40       	sbci	r29, 0x01	; 1
   19d1e:	5f 93       	push	r21
   19d20:	ca 5e       	subi	r28, 0xEA	; 234
   19d22:	de 4f       	sbci	r29, 0xFE	; 254
   19d24:	88 81       	ld	r24, Y
   19d26:	c6 51       	subi	r28, 0x16	; 22
   19d28:	d1 40       	sbci	r29, 0x01	; 1
   19d2a:	8f 93       	push	r24
   19d2c:	cb 5e       	subi	r28, 0xEB	; 235
   19d2e:	de 4f       	sbci	r29, 0xFE	; 254
   19d30:	98 81       	ld	r25, Y
   19d32:	c5 51       	subi	r28, 0x15	; 21
   19d34:	d1 40       	sbci	r29, 0x01	; 1
   19d36:	9f 93       	push	r25
   19d38:	cc 5e       	subi	r28, 0xEC	; 236
   19d3a:	de 4f       	sbci	r29, 0xFE	; 254
   19d3c:	a8 81       	ld	r26, Y
   19d3e:	c4 51       	subi	r28, 0x14	; 20
   19d40:	d1 40       	sbci	r29, 0x01	; 1
   19d42:	af 93       	push	r26
   19d44:	cd 5e       	subi	r28, 0xED	; 237
   19d46:	de 4f       	sbci	r29, 0xFE	; 254
   19d48:	b8 81       	ld	r27, Y
   19d4a:	c3 51       	subi	r28, 0x13	; 19
   19d4c:	d1 40       	sbci	r29, 0x01	; 1
   19d4e:	bf 93       	push	r27
   19d50:	7f 92       	push	r7
   19d52:	6f 92       	push	r6
   19d54:	5f 92       	push	r5
   19d56:	4f 92       	push	r4
   19d58:	3f 92       	push	r3
   19d5a:	2f 92       	push	r2
   19d5c:	9f 92       	push	r9
   19d5e:	8f 92       	push	r8
   19d60:	80 ed       	ldi	r24, 0xD0	; 208
   19d62:	9b e3       	ldi	r25, 0x3B	; 59
   19d64:	1f 92       	push	r1
   19d66:	9f 93       	push	r25
   19d68:	8f 93       	push	r24
   19d6a:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
		imagename, liflabel, dirstart, dirsectors, filesectors );

    if(debuglevel & 0x400)
   19d6e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   19d72:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   19d76:	0f b6       	in	r0, 0x3f	; 63
   19d78:	f8 94       	cli
   19d7a:	de bf       	out	0x3e, r29	; 62
   19d7c:	0f be       	out	0x3f, r0	; 63
   19d7e:	cd bf       	out	0x3d, r28	; 61
   19d80:	92 ff       	sbrs	r25, 2
   19d82:	04 c0       	rjmp	.+8      	; 0x19d8c <lif_create_volume+0xf0>
        lif_dump_vol(LIF,"lif_create_volume");
   19d84:	6e ea       	ldi	r22, 0xAE	; 174
   19d86:	75 e1       	ldi	r23, 0x15	; 21
   19d88:	c5 01       	movw	r24, r10
    
    lif_image_clear(LIF);
   19d8a:	01 d9       	rcall	.-3582   	; 0x18f8e <lif_dump_vol>
   19d8c:	c5 01       	movw	r24, r10

    // Initialize volume header
    LIF->VOL.LIFid = 0x8000;
   19d8e:	ea d8       	rcall	.-3628   	; 0x18f64 <lif_image_clear>
   19d90:	80 e0       	ldi	r24, 0x00	; 0
   19d92:	90 e8       	ldi	r25, 0x80	; 128
   19d94:	d5 01       	movw	r26, r10
   19d96:	95 96       	adiw	r26, 0x25	; 37
   19d98:	9c 93       	st	X, r25
   19d9a:	8e 93       	st	-X, r24
    lif_fixname(LIF->VOL.Label, liflabel, 6);
   19d9c:	94 97       	sbiw	r26, 0x24	; 36
   19d9e:	46 e0       	ldi	r20, 0x06	; 6
   19da0:	50 e0       	ldi	r21, 0x00	; 0
   19da2:	b1 01       	movw	r22, r2
   19da4:	c5 01       	movw	r24, r10
   19da6:	86 96       	adiw	r24, 0x26	; 38
   19da8:	0e 94 96 c4 	call	0x1892c	; 0x1892c <lif_fixname>
    LIF->VOL.DirStartSector = dirstart;
   19dac:	f5 01       	movw	r30, r10
   19dae:	45 a6       	std	Z+45, r4	; 0x2d
   19db0:	56 a6       	std	Z+46, r5	; 0x2e
   19db2:	67 a6       	std	Z+47, r6	; 0x2f
    LIF->VOL.DirSectors = dirsectors;
   19db4:	70 aa       	std	Z+48, r7	; 0x30
   19db6:	cd 5e       	subi	r28, 0xED	; 237
   19db8:	de 4f       	sbci	r29, 0xFE	; 254
   19dba:	28 81       	ld	r18, Y
   19dbc:	39 81       	ldd	r19, Y+1	; 0x01
   19dbe:	4a 81       	ldd	r20, Y+2	; 0x02
   19dc0:	5b 81       	ldd	r21, Y+3	; 0x03
   19dc2:	c3 51       	subi	r28, 0x13	; 19
   19dc4:	d1 40       	sbci	r29, 0x01	; 1
   19dc6:	25 ab       	std	Z+53, r18	; 0x35
   19dc8:	36 ab       	std	Z+54, r19	; 0x36
   19dca:	47 ab       	std	Z+55, r20	; 0x37
    LIF->VOL.System3000LIFid = 0x1000;
   19dcc:	50 af       	std	Z+56, r21	; 0x38
   19dce:	80 e0       	ldi	r24, 0x00	; 0
   19dd0:	90 e1       	ldi	r25, 0x10	; 16
   19dd2:	92 ab       	std	Z+50, r25	; 0x32
    LIF->VOL.tracks_per_side = 0;
   19dd4:	81 ab       	std	Z+49, r24	; 0x31
   19dd6:	fd 96       	adiw	r30, 0x3d	; 61
   19dd8:	10 82       	st	Z, r1
   19dda:	11 82       	std	Z+1, r1	; 0x01
   19ddc:	12 82       	std	Z+2, r1	; 0x02
    LIF->VOL.sides = 0;
   19dde:	13 82       	std	Z+3, r1	; 0x03
   19de0:	34 96       	adiw	r30, 0x04	; 4
   19de2:	10 82       	st	Z, r1
   19de4:	11 82       	std	Z+1, r1	; 0x01
   19de6:	12 82       	std	Z+2, r1	; 0x02
    LIF->VOL.sectors_per_track = 0;
   19de8:	13 82       	std	Z+3, r1	; 0x03
   19dea:	34 96       	adiw	r30, 0x04	; 4
   19dec:	10 82       	st	Z, r1
   19dee:	11 82       	std	Z+1, r1	; 0x01
   19df0:	12 82       	std	Z+2, r1	; 0x02
    ///@brief 0 causes time to return the current date

    lif_time2lifbcd(t, LIF->VOL.date);
   19df2:	13 82       	std	Z+3, r1	; 0x03
   19df4:	a5 01       	movw	r20, r10
   19df6:	47 5b       	subi	r20, 0xB7	; 183
   19df8:	5f 4f       	sbci	r21, 0xFF	; 255
   19dfa:	c7 01       	movw	r24, r14
   19dfc:	b6 01       	movw	r22, r12
   19dfe:	0e 94 db c6 	call	0x18db6	; 0x18db6 <lif_time2lifbcd>

    // update LIF headers
    LIF->name = lif_stralloc(imagename);
   19e02:	c4 01       	movw	r24, r8
   19e04:	0e 94 ab c2 	call	0x18556	; 0x18556 <lif_stralloc>
   19e08:	f5 01       	movw	r30, r10
   19e0a:	91 83       	std	Z+1, r25	; 0x01
    if(LIF->name == NULL)
   19e0c:	80 83       	st	Z, r24
   19e0e:	89 2b       	or	r24, r25
   19e10:	09 f4       	brne	.+2      	; 0x19e14 <lif_create_volume+0x178>
        lif_close_volume(LIF);
        return(NULL);
    }

    // Initilize all LIF headers
    LIF->filesectors = filesectors;
   19e12:	5c c2       	rjmp	.+1208   	; 0x1a2cc <lif_create_volume+0x630>
   19e14:	c5 5f       	subi	r28, 0xF5	; 245
   19e16:	de 4f       	sbci	r29, 0xFE	; 254
   19e18:	28 81       	ld	r18, Y
   19e1a:	39 81       	ldd	r19, Y+1	; 0x01
   19e1c:	4a 81       	ldd	r20, Y+2	; 0x02
   19e1e:	5b 81       	ldd	r21, Y+3	; 0x03
   19e20:	cb 50       	subi	r28, 0x0B	; 11
   19e22:	d1 40       	sbci	r29, 0x01	; 1
   19e24:	20 8b       	std	Z+16, r18	; 0x10
   19e26:	31 8b       	std	Z+17, r19	; 0x11
   19e28:	42 8b       	std	Z+18, r20	; 0x12
    LIF->filestart = dirstart + dirsectors;
   19e2a:	53 8b       	std	Z+19, r21	; 0x13
   19e2c:	cd 5e       	subi	r28, 0xED	; 237
   19e2e:	de 4f       	sbci	r29, 0xFE	; 254
   19e30:	88 81       	ld	r24, Y
   19e32:	99 81       	ldd	r25, Y+1	; 0x01
   19e34:	aa 81       	ldd	r26, Y+2	; 0x02
   19e36:	bb 81       	ldd	r27, Y+3	; 0x03
   19e38:	c3 51       	subi	r28, 0x13	; 19
   19e3a:	d1 40       	sbci	r29, 0x01	; 1
   19e3c:	84 0d       	add	r24, r4
   19e3e:	95 1d       	adc	r25, r5
   19e40:	a6 1d       	adc	r26, r6
   19e42:	b7 1d       	adc	r27, r7
   19e44:	f5 01       	movw	r30, r10
   19e46:	84 87       	std	Z+12, r24	; 0x0c
   19e48:	95 87       	std	Z+13, r25	; 0x0d
   19e4a:	a6 87       	std	Z+14, r26	; 0x0e
    LIF->sectors = (LIF->filestart+LIF->filesectors);
   19e4c:	b7 87       	std	Z+15, r27	; 0x0f
   19e4e:	82 0f       	add	r24, r18
   19e50:	93 1f       	adc	r25, r19
   19e52:	a4 1f       	adc	r26, r20
   19e54:	b5 1f       	adc	r27, r21
   19e56:	84 83       	std	Z+4, r24	; 0x04
   19e58:	95 83       	std	Z+5, r25	; 0x05
   19e5a:	a6 83       	std	Z+6, r26	; 0x06
    LIF->imagebytes = LIF->sectors * (long)LIF_SECTOR_SIZE;
   19e5c:	b7 83       	std	Z+7, r27	; 0x07
   19e5e:	ba 2f       	mov	r27, r26
   19e60:	a9 2f       	mov	r26, r25
   19e62:	98 2f       	mov	r25, r24
   19e64:	88 27       	eor	r24, r24
   19e66:	80 87       	std	Z+8, r24	; 0x08
   19e68:	91 87       	std	Z+9, r25	; 0x09
   19e6a:	a2 87       	std	Z+10, r26	; 0x0a
    LIF->freesectors = LIF->filesectors;
   19e6c:	b3 87       	std	Z+11, r27	; 0x0b
   19e6e:	20 8f       	std	Z+24, r18	; 0x18
   19e70:	31 8f       	std	Z+25, r19	; 0x19
   19e72:	42 8f       	std	Z+26, r20	; 0x1a
    LIF->usedsectors = 0;
   19e74:	53 8f       	std	Z+27, r21	; 0x1b
   19e76:	14 8a       	std	Z+20, r1	; 0x14
   19e78:	15 8a       	std	Z+21, r1	; 0x15
   19e7a:	16 8a       	std	Z+22, r1	; 0x16
    LIF->files = 0;
   19e7c:	17 8a       	std	Z+23, r1	; 0x17
   19e7e:	15 8e       	std	Z+29, r1	; 0x1d
    LIF->purged = 0;
   19e80:	14 8e       	std	Z+28, r1	; 0x1c
   19e82:	17 8e       	std	Z+31, r1	; 0x1f
    LIF->dirindex = 0;
   19e84:	16 8e       	std	Z+30, r1	; 0x1e
   19e86:	11 a2       	std	Z+33, r1	; 0x21
    LIF->EOFindex = 0;
   19e88:	10 a2       	std	Z+32, r1	; 0x20
   19e8a:	13 a2       	std	Z+35, r1	; 0x23

    memset(buffer,0,LIF_SECTOR_SIZE);
   19e8c:	12 a2       	std	Z+34, r1	; 0x22
   19e8e:	c1 2c       	mov	r12, r1
   19e90:	dd 24       	eor	r13, r13
   19e92:	d3 94       	inc	r13
   19e94:	9e 01       	movw	r18, r28
   19e96:	2f 5f       	subi	r18, 0xFF	; 255
   19e98:	3f 4f       	sbci	r19, 0xFF	; 255
   19e9a:	79 01       	movw	r14, r18
   19e9c:	d9 01       	movw	r26, r18
   19e9e:	f6 01       	movw	r30, r12
   19ea0:	1d 92       	st	X+, r1
   19ea2:	31 97       	sbiw	r30, 0x01	; 1

    lif_vol2str(LIF,buffer);
   19ea4:	e9 f7       	brne	.-6      	; 0x19ea0 <lif_create_volume+0x204>
   19ea6:	b9 01       	movw	r22, r18
   19ea8:	c5 01       	movw	r24, r10
   19eaa:	0e 94 d3 c4 	call	0x189a6	; 0x189a6 <lif_vol2str>

    // Write Volume header
    LIF->fp = lif_open(LIF->name,"wb+");
   19eae:	6e e9       	ldi	r22, 0x9E	; 158
   19eb0:	78 e0       	ldi	r23, 0x08	; 8
   19eb2:	d5 01       	movw	r26, r10
   19eb4:	8d 91       	ld	r24, X+
   19eb6:	9c 91       	ld	r25, X
   19eb8:	0e 94 ca c2 	call	0x18594	; 0x18594 <lif_open>
   19ebc:	f5 01       	movw	r30, r10
   19ebe:	93 83       	std	Z+3, r25	; 0x03
    if(LIF->fp == NULL)
   19ec0:	82 83       	std	Z+2, r24	; 0x02
   19ec2:	89 2b       	or	r24, r25
   19ec4:	09 f4       	brne	.+2      	; 0x19ec8 <lif_create_volume+0x22c>
    }

    offset = 0;
    count = 0;

    size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19ec6:	02 c2       	rjmp	.+1028   	; 0x1a2cc <lif_create_volume+0x630>
   19ec8:	00 e0       	ldi	r16, 0x00	; 0
   19eca:	11 e0       	ldi	r17, 0x01	; 1
   19ecc:	20 e0       	ldi	r18, 0x00	; 0
   19ece:	30 e0       	ldi	r19, 0x00	; 0
   19ed0:	a9 01       	movw	r20, r18
   19ed2:	b7 01       	movw	r22, r14
   19ed4:	c5 01       	movw	r24, r10
   19ed6:	0e 94 a9 c3 	call	0x18752	; 0x18752 <lif_write>
   19eda:	9c 01       	movw	r18, r24
   19edc:	99 0f       	add	r25, r25
   19ede:	44 0b       	sbc	r20, r20
   19ee0:	55 0b       	sbc	r21, r21
   19ee2:	c9 5f       	subi	r28, 0xF9	; 249
   19ee4:	de 4f       	sbci	r29, 0xFE	; 254
   19ee6:	28 83       	st	Y, r18
   19ee8:	39 83       	std	Y+1, r19	; 0x01
   19eea:	4a 83       	std	Y+2, r20	; 0x02
   19eec:	5b 83       	std	Y+3, r21	; 0x03
   19eee:	c7 50       	subi	r28, 0x07	; 7

    if(size < LIF_SECTOR_SIZE)
   19ef0:	d1 40       	sbci	r29, 0x01	; 1
   19ef2:	2f 3f       	cpi	r18, 0xFF	; 255
   19ef4:	31 05       	cpc	r19, r1
   19ef6:	41 05       	cpc	r20, r1
   19ef8:	51 05       	cpc	r21, r1
   19efa:	09 f0       	breq	.+2      	; 0x19efe <lif_create_volume+0x262>
   19efc:	0c f4       	brge	.+2      	; 0x19f00 <lif_create_volume+0x264>
    }
    offset += size;
    ++count;


    memset(buffer,0,LIF_SECTOR_SIZE);
   19efe:	e6 c1       	rjmp	.+972    	; 0x1a2cc <lif_create_volume+0x630>
   19f00:	d7 01       	movw	r26, r14
   19f02:	f6 01       	movw	r30, r12
   19f04:	1d 92       	st	X+, r1
   19f06:	31 97       	sbiw	r30, 0x01	; 1

    // Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19f08:	e9 f7       	brne	.-6      	; 0x19f04 <lif_create_volume+0x268>
   19f0a:	21 e0       	ldi	r18, 0x01	; 1
   19f0c:	30 e0       	ldi	r19, 0x00	; 0
   19f0e:	40 e0       	ldi	r20, 0x00	; 0
   19f10:	50 e0       	ldi	r21, 0x00	; 0
   19f12:	cd 5f       	subi	r28, 0xFD	; 253
   19f14:	de 4f       	sbci	r29, 0xFE	; 254
   19f16:	28 83       	st	Y, r18
   19f18:	39 83       	std	Y+1, r19	; 0x01
   19f1a:	4a 83       	std	Y+2, r20	; 0x02
   19f1c:	5b 83       	std	Y+3, r21	; 0x03
   19f1e:	c3 50       	subi	r28, 0x03	; 3
   19f20:	d1 40       	sbci	r29, 0x01	; 1
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
            printf("\tWrote: %ld\r", count);
   19f22:	47 01       	movw	r8, r14
   19f24:	83 ec       	ldi	r24, 0xC3	; 195
   19f26:	9b e3       	ldi	r25, 0x3B	; 59


    memset(buffer,0,LIF_SECTOR_SIZE);

    // Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19f28:	6c 01       	movw	r12, r24
   19f2a:	cd 5f       	subi	r28, 0xFD	; 253
   19f2c:	de 4f       	sbci	r29, 0xFE	; 254
   19f2e:	88 81       	ld	r24, Y
   19f30:	99 81       	ldd	r25, Y+1	; 0x01
   19f32:	aa 81       	ldd	r26, Y+2	; 0x02
   19f34:	bb 81       	ldd	r27, Y+3	; 0x03
   19f36:	c3 50       	subi	r28, 0x03	; 3
   19f38:	d1 40       	sbci	r29, 0x01	; 1
   19f3a:	84 15       	cp	r24, r4
   19f3c:	95 05       	cpc	r25, r5
   19f3e:	a6 05       	cpc	r26, r6
   19f40:	b7 05       	cpc	r27, r7
   19f42:	0c f0       	brlt	.+2      	; 0x19f46 <lif_create_volume+0x2aa>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19f44:	64 c0       	rjmp	.+200    	; 0x1a00e <lif_create_volume+0x372>
   19f46:	00 e0       	ldi	r16, 0x00	; 0
   19f48:	11 e0       	ldi	r17, 0x01	; 1
   19f4a:	c9 5f       	subi	r28, 0xF9	; 249
   19f4c:	de 4f       	sbci	r29, 0xFE	; 254
   19f4e:	28 81       	ld	r18, Y
   19f50:	39 81       	ldd	r19, Y+1	; 0x01
   19f52:	4a 81       	ldd	r20, Y+2	; 0x02
   19f54:	5b 81       	ldd	r21, Y+3	; 0x03
   19f56:	c7 50       	subi	r28, 0x07	; 7
   19f58:	d1 40       	sbci	r29, 0x01	; 1
   19f5a:	b4 01       	movw	r22, r8
   19f5c:	c5 01       	movw	r24, r10
   19f5e:	0e 94 a9 c3 	call	0x18752	; 0x18752 <lif_write>
   19f62:	09 2e       	mov	r0, r25
   19f64:	00 0c       	add	r0, r0
   19f66:	aa 0b       	sbc	r26, r26
        if(size < LIF_SECTOR_SIZE)
   19f68:	bb 0b       	sbc	r27, r27
   19f6a:	8f 3f       	cpi	r24, 0xFF	; 255
   19f6c:	91 05       	cpc	r25, r1
   19f6e:	a1 05       	cpc	r26, r1
   19f70:	b1 05       	cpc	r27, r1
   19f72:	09 f0       	breq	.+2      	; 0x19f76 <lif_create_volume+0x2da>
   19f74:	0c f4       	brge	.+2      	; 0x19f78 <lif_create_volume+0x2dc>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   19f76:	aa c1       	rjmp	.+852    	; 0x1a2cc <lif_create_volume+0x630>
   19f78:	c9 5f       	subi	r28, 0xF9	; 249
   19f7a:	de 4f       	sbci	r29, 0xFE	; 254
   19f7c:	28 81       	ld	r18, Y
   19f7e:	39 81       	ldd	r19, Y+1	; 0x01
   19f80:	4a 81       	ldd	r20, Y+2	; 0x02
   19f82:	5b 81       	ldd	r21, Y+3	; 0x03
   19f84:	c7 50       	subi	r28, 0x07	; 7
   19f86:	d1 40       	sbci	r29, 0x01	; 1
   19f88:	28 0f       	add	r18, r24
   19f8a:	39 1f       	adc	r19, r25
   19f8c:	4a 1f       	adc	r20, r26
   19f8e:	5b 1f       	adc	r21, r27
   19f90:	c9 5f       	subi	r28, 0xF9	; 249
   19f92:	de 4f       	sbci	r29, 0xFE	; 254
   19f94:	28 83       	st	Y, r18
   19f96:	39 83       	std	Y+1, r19	; 0x01
   19f98:	4a 83       	std	Y+2, r20	; 0x02
   19f9a:	5b 83       	std	Y+3, r21	; 0x03
   19f9c:	c7 50       	subi	r28, 0x07	; 7
            printf("\tWrote: %ld\r", count);
   19f9e:	d1 40       	sbci	r29, 0x01	; 1
   19fa0:	ca 5f       	subi	r28, 0xFA	; 250
   19fa2:	de 4f       	sbci	r29, 0xFE	; 254
   19fa4:	38 81       	ld	r19, Y
   19fa6:	c6 50       	subi	r28, 0x06	; 6
   19fa8:	d1 40       	sbci	r29, 0x01	; 1
   19faa:	3f 93       	push	r19
   19fac:	cb 5f       	subi	r28, 0xFB	; 251
   19fae:	de 4f       	sbci	r29, 0xFE	; 254
   19fb0:	48 81       	ld	r20, Y
   19fb2:	c5 50       	subi	r28, 0x05	; 5
   19fb4:	d1 40       	sbci	r29, 0x01	; 1
   19fb6:	4f 93       	push	r20
   19fb8:	cc 5f       	subi	r28, 0xFC	; 252
   19fba:	de 4f       	sbci	r29, 0xFE	; 254
   19fbc:	58 81       	ld	r21, Y
   19fbe:	c4 50       	subi	r28, 0x04	; 4
   19fc0:	d1 40       	sbci	r29, 0x01	; 1
   19fc2:	5f 93       	push	r21
   19fc4:	cd 5f       	subi	r28, 0xFD	; 253
   19fc6:	de 4f       	sbci	r29, 0xFE	; 254
   19fc8:	88 81       	ld	r24, Y
   19fca:	c3 50       	subi	r28, 0x03	; 3
   19fcc:	d1 40       	sbci	r29, 0x01	; 1
   19fce:	8f 93       	push	r24
   19fd0:	1f 92       	push	r1
   19fd2:	df 92       	push	r13
   19fd4:	cf 92       	push	r12
   19fd6:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>


    memset(buffer,0,LIF_SECTOR_SIZE);

    // Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19fda:	cd 5f       	subi	r28, 0xFD	; 253
   19fdc:	de 4f       	sbci	r29, 0xFE	; 254
   19fde:	28 81       	ld	r18, Y
   19fe0:	39 81       	ldd	r19, Y+1	; 0x01
   19fe2:	4a 81       	ldd	r20, Y+2	; 0x02
   19fe4:	5b 81       	ldd	r21, Y+3	; 0x03
   19fe6:	c3 50       	subi	r28, 0x03	; 3
   19fe8:	d1 40       	sbci	r29, 0x01	; 1
   19fea:	2f 5f       	subi	r18, 0xFF	; 255
   19fec:	3f 4f       	sbci	r19, 0xFF	; 255
   19fee:	4f 4f       	sbci	r20, 0xFF	; 255
   19ff0:	5f 4f       	sbci	r21, 0xFF	; 255
   19ff2:	cd 5f       	subi	r28, 0xFD	; 253
   19ff4:	de 4f       	sbci	r29, 0xFE	; 254
   19ff6:	28 83       	st	Y, r18
   19ff8:	39 83       	std	Y+1, r19	; 0x01
   19ffa:	4a 83       	std	Y+2, r20	; 0x02
   19ffc:	5b 83       	std	Y+3, r21	; 0x03
   19ffe:	c3 50       	subi	r28, 0x03	; 3
   1a000:	d1 40       	sbci	r29, 0x01	; 1
   1a002:	0f b6       	in	r0, 0x3f	; 63
   1a004:	f8 94       	cli
   1a006:	de bf       	out	0x3e, r29	; 62
   1a008:	0f be       	out	0x3f, r0	; 63
   1a00a:	cd bf       	out	0x3d, r28	; 61
            printf("\tWrote: %ld\r", count);
        ++count;
    }

    // Write Directory sectors
    lif_dir_clear(LIF);
   1a00c:	8e cf       	rjmp	.-228    	; 0x19f2a <lif_create_volume+0x28e>
   1a00e:	c5 01       	movw	r24, r10
   1a010:	0e 94 b8 c7 	call	0x18f70	; 0x18f70 <lif_dir_clear>
    LIF->DIR.FileType = 0xffff;
   1a014:	8f ef       	ldi	r24, 0xFF	; 255
   1a016:	9f ef       	ldi	r25, 0xFF	; 255
   1a018:	f5 01       	movw	r30, r10
   1a01a:	e6 5a       	subi	r30, 0xA6	; 166
   1a01c:	ff 4f       	sbci	r31, 0xFF	; 255
   1a01e:	91 83       	std	Z+1, r25	; 0x01
   1a020:	80 83       	st	Z, r24
   1a022:	74 01       	movw	r14, r8
   1a024:	6e 01       	movw	r12, r28
   1a026:	91 e0       	ldi	r25, 0x01	; 1
   1a028:	c9 0e       	add	r12, r25

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);
   1a02a:	d9 1e       	adc	r13, r25
   1a02c:	b7 01       	movw	r22, r14
   1a02e:	c5 01       	movw	r24, r10
   1a030:	0e 94 f3 c5 	call	0x18be6	; 0x18be6 <lif_dir2str>
   1a034:	a0 e2       	ldi	r26, 0x20	; 32
   1a036:	ea 0e       	add	r14, r26

    // Write Directory sectors
    lif_dir_clear(LIF);
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
   1a038:	f1 1c       	adc	r15, r1
   1a03a:	ce 14       	cp	r12, r14
   1a03c:	df 04       	cpc	r13, r15
   1a03e:	b1 f7       	brne	.-20     	; 0x1a02c <lif_create_volume+0x390>
   1a040:	c1 2c       	mov	r12, r1
   1a042:	d1 2c       	mov	r13, r1
   1a044:	76 01       	movw	r14, r12
   1a046:	fe 01       	movw	r30, r28
   1a048:	31 96       	adiw	r30, 0x01	; 1
   1a04a:	cf 5f       	subi	r28, 0xFF	; 255
   1a04c:	de 4f       	sbci	r29, 0xFE	; 254
   1a04e:	f9 83       	std	Y+1, r31	; 0x01
   1a050:	e8 83       	st	Y, r30
   1a052:	c1 50       	subi	r28, 0x01	; 1
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
   1a054:	d1 40       	sbci	r29, 0x01	; 1
   1a056:	84 e6       	ldi	r24, 0x64	; 100
   1a058:	28 2e       	mov	r2, r24
   1a05a:	31 2c       	mov	r3, r1
   1a05c:	41 2c       	mov	r4, r1
            printf("\tWrote: %ld\r", count);
   1a05e:	51 2c       	mov	r5, r1
   1a060:	86 eb       	ldi	r24, 0xB6	; 182
   1a062:	9b e3       	ldi	r25, 0x3B	; 59
   1a064:	3c 01       	movw	r6, r24
   1a066:	81 2c       	mov	r8, r1
   1a068:	cd 5f       	subi	r28, 0xFD	; 253
   1a06a:	de 4f       	sbci	r29, 0xFE	; 254
   1a06c:	28 81       	ld	r18, Y
   1a06e:	39 81       	ldd	r19, Y+1	; 0x01
   1a070:	4a 81       	ldd	r20, Y+2	; 0x02
   1a072:	5b 81       	ldd	r21, Y+3	; 0x03
   1a074:	c3 50       	subi	r28, 0x03	; 3
   1a076:	d1 40       	sbci	r29, 0x01	; 1
   1a078:	2c 0d       	add	r18, r12
   1a07a:	3d 1d       	adc	r19, r13
   1a07c:	4e 1d       	adc	r20, r14
   1a07e:	5f 1d       	adc	r21, r15
   1a080:	c1 5f       	subi	r28, 0xF1	; 241
   1a082:	de 4f       	sbci	r29, 0xFE	; 254
   1a084:	28 83       	st	Y, r18
   1a086:	39 83       	std	Y+1, r19	; 0x01
   1a088:	4a 83       	std	Y+2, r20	; 0x02
   1a08a:	5b 83       	std	Y+3, r21	; 0x03
   1a08c:	cf 50       	subi	r28, 0x0F	; 15
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   1a08e:	d1 40       	sbci	r29, 0x01	; 1
   1a090:	cd 5e       	subi	r28, 0xED	; 237
   1a092:	de 4f       	sbci	r29, 0xFE	; 254
   1a094:	88 81       	ld	r24, Y
   1a096:	99 81       	ldd	r25, Y+1	; 0x01
   1a098:	aa 81       	ldd	r26, Y+2	; 0x02
   1a09a:	bb 81       	ldd	r27, Y+3	; 0x03
   1a09c:	c3 51       	subi	r28, 0x13	; 19
   1a09e:	d1 40       	sbci	r29, 0x01	; 1
   1a0a0:	c8 16       	cp	r12, r24
   1a0a2:	d9 06       	cpc	r13, r25
   1a0a4:	ea 06       	cpc	r14, r26
   1a0a6:	fb 06       	cpc	r15, r27
   1a0a8:	0c f0       	brlt	.+2      	; 0x1a0ac <lif_create_volume+0x410>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   1a0aa:	67 c0       	rjmp	.+206    	; 0x1a17a <lif_create_volume+0x4de>
   1a0ac:	00 e0       	ldi	r16, 0x00	; 0
   1a0ae:	11 e0       	ldi	r17, 0x01	; 1
   1a0b0:	c9 5f       	subi	r28, 0xF9	; 249
   1a0b2:	de 4f       	sbci	r29, 0xFE	; 254
   1a0b4:	28 81       	ld	r18, Y
   1a0b6:	39 81       	ldd	r19, Y+1	; 0x01
   1a0b8:	4a 81       	ldd	r20, Y+2	; 0x02
   1a0ba:	5b 81       	ldd	r21, Y+3	; 0x03
   1a0bc:	c7 50       	subi	r28, 0x07	; 7
   1a0be:	d1 40       	sbci	r29, 0x01	; 1
   1a0c0:	be 01       	movw	r22, r28
   1a0c2:	6f 5f       	subi	r22, 0xFF	; 255
   1a0c4:	7f 4f       	sbci	r23, 0xFF	; 255
   1a0c6:	c5 01       	movw	r24, r10
   1a0c8:	0e 94 a9 c3 	call	0x18752	; 0x18752 <lif_write>
   1a0cc:	09 2e       	mov	r0, r25
   1a0ce:	00 0c       	add	r0, r0
   1a0d0:	aa 0b       	sbc	r26, r26
        if(size < LIF_SECTOR_SIZE)
   1a0d2:	bb 0b       	sbc	r27, r27
   1a0d4:	8f 3f       	cpi	r24, 0xFF	; 255
   1a0d6:	91 05       	cpc	r25, r1
   1a0d8:	a1 05       	cpc	r26, r1
   1a0da:	b1 05       	cpc	r27, r1
   1a0dc:	09 f0       	breq	.+2      	; 0x1a0e0 <lif_create_volume+0x444>
   1a0de:	0c f4       	brge	.+2      	; 0x1a0e2 <lif_create_volume+0x446>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   1a0e0:	f5 c0       	rjmp	.+490    	; 0x1a2cc <lif_create_volume+0x630>
   1a0e2:	c9 5f       	subi	r28, 0xF9	; 249
   1a0e4:	de 4f       	sbci	r29, 0xFE	; 254
   1a0e6:	28 81       	ld	r18, Y
   1a0e8:	39 81       	ldd	r19, Y+1	; 0x01
   1a0ea:	4a 81       	ldd	r20, Y+2	; 0x02
   1a0ec:	5b 81       	ldd	r21, Y+3	; 0x03
   1a0ee:	c7 50       	subi	r28, 0x07	; 7
   1a0f0:	d1 40       	sbci	r29, 0x01	; 1
   1a0f2:	28 0f       	add	r18, r24
   1a0f4:	39 1f       	adc	r19, r25
   1a0f6:	4a 1f       	adc	r20, r26
   1a0f8:	5b 1f       	adc	r21, r27
   1a0fa:	c9 5f       	subi	r28, 0xF9	; 249
   1a0fc:	de 4f       	sbci	r29, 0xFE	; 254
   1a0fe:	28 83       	st	Y, r18
   1a100:	39 83       	std	Y+1, r19	; 0x01
   1a102:	4a 83       	std	Y+2, r20	; 0x02
   1a104:	5b 83       	std	Y+3, r21	; 0x03
   1a106:	c7 50       	subi	r28, 0x07	; 7
        if((count % 100) == 0)
   1a108:	d1 40       	sbci	r29, 0x01	; 1
   1a10a:	c1 5f       	subi	r28, 0xF1	; 241
   1a10c:	de 4f       	sbci	r29, 0xFE	; 254
   1a10e:	68 81       	ld	r22, Y
   1a110:	79 81       	ldd	r23, Y+1	; 0x01
   1a112:	8a 81       	ldd	r24, Y+2	; 0x02
   1a114:	9b 81       	ldd	r25, Y+3	; 0x03
   1a116:	cf 50       	subi	r28, 0x0F	; 15
   1a118:	d1 40       	sbci	r29, 0x01	; 1
   1a11a:	a2 01       	movw	r20, r4
   1a11c:	91 01       	movw	r18, r2
   1a11e:	0e 94 93 e5 	call	0x1cb26	; 0x1cb26 <__divmodsi4>
   1a122:	67 2b       	or	r22, r23
   1a124:	68 2b       	or	r22, r24
   1a126:	69 2b       	or	r22, r25
            printf("\tWrote: %ld\r", count);
   1a128:	11 f5       	brne	.+68     	; 0x1a16e <lif_create_volume+0x4d2>
   1a12a:	ce 5e       	subi	r28, 0xEE	; 238
   1a12c:	de 4f       	sbci	r29, 0xFE	; 254
   1a12e:	38 81       	ld	r19, Y
   1a130:	c2 51       	subi	r28, 0x12	; 18
   1a132:	d1 40       	sbci	r29, 0x01	; 1
   1a134:	3f 93       	push	r19
   1a136:	cf 5e       	subi	r28, 0xEF	; 239
   1a138:	de 4f       	sbci	r29, 0xFE	; 254
   1a13a:	48 81       	ld	r20, Y
   1a13c:	c1 51       	subi	r28, 0x11	; 17
   1a13e:	d1 40       	sbci	r29, 0x01	; 1
   1a140:	4f 93       	push	r20
   1a142:	c0 5f       	subi	r28, 0xF0	; 240
   1a144:	de 4f       	sbci	r29, 0xFE	; 254
   1a146:	58 81       	ld	r21, Y
   1a148:	c0 51       	subi	r28, 0x10	; 16
   1a14a:	d1 40       	sbci	r29, 0x01	; 1
   1a14c:	5f 93       	push	r21
   1a14e:	c1 5f       	subi	r28, 0xF1	; 241
   1a150:	de 4f       	sbci	r29, 0xFE	; 254
   1a152:	88 81       	ld	r24, Y
   1a154:	cf 50       	subi	r28, 0x0F	; 15
   1a156:	d1 40       	sbci	r29, 0x01	; 1
   1a158:	8f 93       	push	r24
   1a15a:	1f 92       	push	r1
   1a15c:	7f 92       	push	r7
   1a15e:	6f 92       	push	r6
   1a160:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1a164:	0f b6       	in	r0, 0x3f	; 63
   1a166:	f8 94       	cli
   1a168:	de bf       	out	0x3e, r29	; 62
   1a16a:	0f be       	out	0x3f, r0	; 63
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   1a16c:	cd bf       	out	0x3d, r28	; 61
   1a16e:	bf ef       	ldi	r27, 0xFF	; 255
   1a170:	cb 1a       	sub	r12, r27
   1a172:	db 0a       	sbc	r13, r27
   1a174:	eb 0a       	sbc	r14, r27
   1a176:	fb 0a       	sbc	r15, r27
            printf("\tWrote: %ld\r", count);
        ++count;
    }

    // File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
   1a178:	77 cf       	rjmp	.-274    	; 0x1a068 <lif_create_volume+0x3cc>
   1a17a:	80 e0       	ldi	r24, 0x00	; 0
   1a17c:	91 e0       	ldi	r25, 0x01	; 1
   1a17e:	cf 5f       	subi	r28, 0xFF	; 255
   1a180:	de 4f       	sbci	r29, 0xFE	; 254
   1a182:	a8 81       	ld	r26, Y
   1a184:	b9 81       	ldd	r27, Y+1	; 0x01
   1a186:	c1 50       	subi	r28, 0x01	; 1
   1a188:	d1 40       	sbci	r29, 0x01	; 1
   1a18a:	fc 01       	movw	r30, r24
   1a18c:	1d 92       	st	X+, r1
   1a18e:	31 97       	sbiw	r30, 0x01	; 1
    for(i=0;i<filesectors;++i)
   1a190:	e9 f7       	brne	.-6      	; 0x1a18c <lif_create_volume+0x4f0>
   1a192:	41 2c       	mov	r4, r1
   1a194:	51 2c       	mov	r5, r1
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
            printf("\tWrote: %ld\r", count);
   1a196:	32 01       	movw	r6, r4
   1a198:	89 ea       	ldi	r24, 0xA9	; 169
   1a19a:	9b e3       	ldi	r25, 0x3B	; 59
   1a19c:	9c 01       	movw	r18, r24
   1a19e:	40 e0       	ldi	r20, 0x00	; 0
   1a1a0:	cd 5f       	subi	r28, 0xFD	; 253
   1a1a2:	de 4f       	sbci	r29, 0xFE	; 254
   1a1a4:	28 83       	st	Y, r18
   1a1a6:	39 83       	std	Y+1, r19	; 0x01
   1a1a8:	4a 83       	std	Y+2, r20	; 0x02
   1a1aa:	c3 50       	subi	r28, 0x03	; 3
   1a1ac:	d1 40       	sbci	r29, 0x01	; 1
   1a1ae:	c1 5f       	subi	r28, 0xF1	; 241
   1a1b0:	de 4f       	sbci	r29, 0xFE	; 254
   1a1b2:	c8 80       	ld	r12, Y
   1a1b4:	d9 80       	ldd	r13, Y+1	; 0x01
   1a1b6:	ea 80       	ldd	r14, Y+2	; 0x02
   1a1b8:	fb 80       	ldd	r15, Y+3	; 0x03
   1a1ba:	cf 50       	subi	r28, 0x0F	; 15
   1a1bc:	d1 40       	sbci	r29, 0x01	; 1
   1a1be:	c4 0c       	add	r12, r4
   1a1c0:	d5 1c       	adc	r13, r5
   1a1c2:	e6 1c       	adc	r14, r6
        ++count;
    }

    // File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   1a1c4:	f7 1c       	adc	r15, r7
   1a1c6:	c5 5f       	subi	r28, 0xF5	; 245
   1a1c8:	de 4f       	sbci	r29, 0xFE	; 254
   1a1ca:	28 81       	ld	r18, Y
   1a1cc:	39 81       	ldd	r19, Y+1	; 0x01
   1a1ce:	4a 81       	ldd	r20, Y+2	; 0x02
   1a1d0:	5b 81       	ldd	r21, Y+3	; 0x03
   1a1d2:	cb 50       	subi	r28, 0x0B	; 11
   1a1d4:	d1 40       	sbci	r29, 0x01	; 1
   1a1d6:	42 16       	cp	r4, r18
   1a1d8:	53 06       	cpc	r5, r19
   1a1da:	64 06       	cpc	r6, r20
   1a1dc:	75 06       	cpc	r7, r21
   1a1de:	0c f0       	brlt	.+2      	; 0x1a1e2 <lif_create_volume+0x546>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   1a1e0:	59 c0       	rjmp	.+178    	; 0x1a294 <lif_create_volume+0x5f8>
   1a1e2:	00 e0       	ldi	r16, 0x00	; 0
   1a1e4:	11 e0       	ldi	r17, 0x01	; 1
   1a1e6:	c9 5f       	subi	r28, 0xF9	; 249
   1a1e8:	de 4f       	sbci	r29, 0xFE	; 254
   1a1ea:	28 81       	ld	r18, Y
   1a1ec:	39 81       	ldd	r19, Y+1	; 0x01
   1a1ee:	4a 81       	ldd	r20, Y+2	; 0x02
   1a1f0:	5b 81       	ldd	r21, Y+3	; 0x03
   1a1f2:	c7 50       	subi	r28, 0x07	; 7
   1a1f4:	d1 40       	sbci	r29, 0x01	; 1
   1a1f6:	be 01       	movw	r22, r28
   1a1f8:	6f 5f       	subi	r22, 0xFF	; 255
   1a1fa:	7f 4f       	sbci	r23, 0xFF	; 255
   1a1fc:	c5 01       	movw	r24, r10
   1a1fe:	0e 94 a9 c3 	call	0x18752	; 0x18752 <lif_write>
   1a202:	09 2e       	mov	r0, r25
   1a204:	00 0c       	add	r0, r0
   1a206:	aa 0b       	sbc	r26, r26
        if(size < LIF_SECTOR_SIZE)
   1a208:	bb 0b       	sbc	r27, r27
   1a20a:	8f 3f       	cpi	r24, 0xFF	; 255
   1a20c:	91 05       	cpc	r25, r1
   1a20e:	a1 05       	cpc	r26, r1
   1a210:	b1 05       	cpc	r27, r1
   1a212:	09 f0       	breq	.+2      	; 0x1a216 <lif_create_volume+0x57a>
   1a214:	0c f4       	brge	.+2      	; 0x1a218 <lif_create_volume+0x57c>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   1a216:	5a c0       	rjmp	.+180    	; 0x1a2cc <lif_create_volume+0x630>
   1a218:	c9 5f       	subi	r28, 0xF9	; 249
   1a21a:	de 4f       	sbci	r29, 0xFE	; 254
   1a21c:	28 81       	ld	r18, Y
   1a21e:	39 81       	ldd	r19, Y+1	; 0x01
   1a220:	4a 81       	ldd	r20, Y+2	; 0x02
   1a222:	5b 81       	ldd	r21, Y+3	; 0x03
   1a224:	c7 50       	subi	r28, 0x07	; 7
   1a226:	d1 40       	sbci	r29, 0x01	; 1
   1a228:	28 0f       	add	r18, r24
   1a22a:	39 1f       	adc	r19, r25
   1a22c:	4a 1f       	adc	r20, r26
   1a22e:	5b 1f       	adc	r21, r27
   1a230:	c9 5f       	subi	r28, 0xF9	; 249
   1a232:	de 4f       	sbci	r29, 0xFE	; 254
   1a234:	28 83       	st	Y, r18
   1a236:	39 83       	std	Y+1, r19	; 0x01
   1a238:	4a 83       	std	Y+2, r20	; 0x02
   1a23a:	5b 83       	std	Y+3, r21	; 0x03
   1a23c:	c7 50       	subi	r28, 0x07	; 7
        if((count % 100) == 0)
   1a23e:	d1 40       	sbci	r29, 0x01	; 1
   1a240:	c7 01       	movw	r24, r14
   1a242:	b6 01       	movw	r22, r12
   1a244:	24 e6       	ldi	r18, 0x64	; 100
   1a246:	30 e0       	ldi	r19, 0x00	; 0
   1a248:	40 e0       	ldi	r20, 0x00	; 0
   1a24a:	50 e0       	ldi	r21, 0x00	; 0
   1a24c:	0e 94 93 e5 	call	0x1cb26	; 0x1cb26 <__divmodsi4>
   1a250:	67 2b       	or	r22, r23
   1a252:	68 2b       	or	r22, r24
   1a254:	69 2b       	or	r22, r25
            printf("\tWrote: %ld\r", count);
   1a256:	c1 f4       	brne	.+48     	; 0x1a288 <lif_create_volume+0x5ec>
   1a258:	ff 92       	push	r15
   1a25a:	ef 92       	push	r14
   1a25c:	df 92       	push	r13
   1a25e:	cf 92       	push	r12
   1a260:	1f 92       	push	r1
   1a262:	cc 5f       	subi	r28, 0xFC	; 252
   1a264:	de 4f       	sbci	r29, 0xFE	; 254
   1a266:	38 81       	ld	r19, Y
   1a268:	c4 50       	subi	r28, 0x04	; 4
   1a26a:	d1 40       	sbci	r29, 0x01	; 1
   1a26c:	3f 93       	push	r19
   1a26e:	cd 5f       	subi	r28, 0xFD	; 253
   1a270:	de 4f       	sbci	r29, 0xFE	; 254
   1a272:	48 81       	ld	r20, Y
   1a274:	c3 50       	subi	r28, 0x03	; 3
   1a276:	d1 40       	sbci	r29, 0x01	; 1
   1a278:	4f 93       	push	r20
   1a27a:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1a27e:	0f b6       	in	r0, 0x3f	; 63
   1a280:	f8 94       	cli
   1a282:	de bf       	out	0x3e, r29	; 62
   1a284:	0f be       	out	0x3f, r0	; 63
        ++count;
    }

    // File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   1a286:	cd bf       	out	0x3d, r28	; 61
   1a288:	9f ef       	ldi	r25, 0xFF	; 255
   1a28a:	49 1a       	sub	r4, r25
   1a28c:	59 0a       	sbc	r5, r25
   1a28e:	69 0a       	sbc	r6, r25
   1a290:	79 0a       	sbc	r7, r25
        offset += size;
        if((count % 100) == 0)
            printf("\tWrote: %ld\r", count);
        ++count;
    }
    printf("\tWrote: %ld\n", count);
   1a292:	8d cf       	rjmp	.-230    	; 0x1a1ae <lif_create_volume+0x512>
   1a294:	ff 92       	push	r15
   1a296:	ef 92       	push	r14
   1a298:	df 92       	push	r13
   1a29a:	cf 92       	push	r12
   1a29c:	8c e9       	ldi	r24, 0x9C	; 156
   1a29e:	9b e3       	ldi	r25, 0x3B	; 59
   1a2a0:	1f 92       	push	r1
   1a2a2:	9f 93       	push	r25
   1a2a4:	8f 93       	push	r24
   1a2a6:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
/// @return void
MEMSPACE
void lif_rewinddir(lif_t *LIF)
{
    // Directory index
    LIF->dirindex = -1;
   1a2aa:	8f ef       	ldi	r24, 0xFF	; 255
   1a2ac:	9f ef       	ldi	r25, 0xFF	; 255
   1a2ae:	d5 01       	movw	r26, r10
   1a2b0:	91 96       	adiw	r26, 0x21	; 33
   1a2b2:	9c 93       	st	X, r25
   1a2b4:	8e 93       	st	-X, r24
    printf("\tWrote: %ld\n", count);

    lif_rewinddir(LIF);

    // As a sanity check verify basic values
    if( !lif_check_volume(LIF) )
   1a2b6:	90 97       	sbiw	r26, 0x20	; 32
   1a2b8:	c5 01       	movw	r24, r10
   1a2ba:	0e 94 5a c9 	call	0x192b4	; 0x192b4 <lif_check_volume>
   1a2be:	0f b6       	in	r0, 0x3f	; 63
   1a2c0:	f8 94       	cli
   1a2c2:	de bf       	out	0x3e, r29	; 62
   1a2c4:	0f be       	out	0x3f, r0	; 63
   1a2c6:	cd bf       	out	0x3d, r28	; 61
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a2c8:	89 2b       	or	r24, r25
   1a2ca:	19 f4       	brne	.+6      	; 0x1a2d2 <lif_create_volume+0x636>
   1a2cc:	c5 01       	movw	r24, r10
   1a2ce:	80 da       	rcall	.-2816   	; 0x197d0 <lif_close_volume>
        lif_closedir(LIF);
        return(NULL);
    }

    // Scan directory and verify values
    if( !lif_updatefree(LIF))
   1a2d0:	08 c0       	rjmp	.+16     	; 0x1a2e2 <lif_create_volume+0x646>
   1a2d2:	c5 01       	movw	r24, r10
   1a2d4:	db db       	rcall	.-2122   	; 0x19a8c <lif_updatefree>
   1a2d6:	7c 01       	movw	r14, r24
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a2d8:	89 2b       	or	r24, r25
   1a2da:	31 f4       	brne	.+12     	; 0x1a2e8 <lif_create_volume+0x64c>
   1a2dc:	c5 01       	movw	r24, r10

    // Scan directory and verify values
    if( !lif_updatefree(LIF))
    {
        lif_closedir(LIF);
        return(NULL);
   1a2de:	78 da       	rcall	.-2832   	; 0x197d0 <lif_close_volume>

    time_t t = time(NULL);

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
    if(LIF == NULL)
        return(NULL);
   1a2e0:	04 c0       	rjmp	.+8      	; 0x1a2ea <lif_create_volume+0x64e>
   1a2e2:	e1 2c       	mov	r14, r1
   1a2e4:	f1 2c       	mov	r15, r1
   1a2e6:	01 c0       	rjmp	.+2      	; 0x1a2ea <lif_create_volume+0x64e>
        lif_closedir(LIF);
        return(NULL);
    }

    return(LIF);
}
   1a2e8:	75 01       	movw	r14, r10
   1a2ea:	c7 01       	movw	r24, r14
   1a2ec:	ca 5e       	subi	r28, 0xEA	; 234
   1a2ee:	de 4f       	sbci	r29, 0xFE	; 254
   1a2f0:	e2 e1       	ldi	r30, 0x12	; 18
   1a2f2:	0c 94 0f e6 	jmp	0x1cc1e	; 0x1cc1e <__epilogue_restores__>

0001a2f6 <lif_newdir>:
/// @param[in] *LIF: LIF pointer
/// @param[in] sectors: try to find specified free space
/// @return index or free record or -1 on error
MEMSPACE
int lif_newdir(lif_t *LIF, long sectors)
{
   1a2f6:	ac e0       	ldi	r26, 0x0C	; 12
   1a2f8:	b0 e0       	ldi	r27, 0x00	; 0
   1a2fa:	e1 e8       	ldi	r30, 0x81	; 129
   1a2fc:	f1 ed       	ldi	r31, 0xD1	; 209
   1a2fe:	0c 94 f3 e5 	jmp	0x1cbe6	; 0x1cbe6 <__prologue_saves__>
   1a302:	9c 87       	std	Y+12, r25	; 0x0c
   1a304:	8b 87       	std	Y+11, r24	; 0x0b
   1a306:	6a 01       	movw	r12, r20
   1a308:	7b 01       	movw	r14, r22

    // Directory index
    index = 0;

    // Start of free space
    start = LIF->filestart;
   1a30a:	fc 01       	movw	r30, r24
   1a30c:	84 84       	ldd	r8, Z+12	; 0x0c
   1a30e:	95 84       	ldd	r9, Z+13	; 0x0d
   1a310:	a6 84       	ldd	r10, Z+14	; 0x0e

    // Update all file information
    if(lif_updatefree(LIF) == NULL)
   1a312:	b7 84       	ldd	r11, Z+15	; 0x0f
   1a314:	bb db       	rcall	.-2186   	; 0x19a8c <lif_updatefree>
   1a316:	89 2b       	or	r24, r25
    {
        printf("lif_newdir: not enough free space:[%ld] for size:[%ld]\n", (long)LIF->freesectors, (long) sectors);
   1a318:	b1 f4       	brne	.+44     	; 0x1a346 <lif_newdir+0x50>
   1a31a:	ff 92       	push	r15
   1a31c:	ef 92       	push	r14
   1a31e:	df 92       	push	r13
   1a320:	cf 92       	push	r12
   1a322:	eb 85       	ldd	r30, Y+11	; 0x0b
   1a324:	fc 85       	ldd	r31, Y+12	; 0x0c
   1a326:	83 8d       	ldd	r24, Z+27	; 0x1b
   1a328:	8f 93       	push	r24
   1a32a:	82 8d       	ldd	r24, Z+26	; 0x1a
   1a32c:	8f 93       	push	r24
   1a32e:	81 8d       	ldd	r24, Z+25	; 0x19
   1a330:	8f 93       	push	r24
   1a332:	80 8d       	ldd	r24, Z+24	; 0x18
   1a334:	8f 93       	push	r24
   1a336:	8d eb       	ldi	r24, 0xBD	; 189
   1a338:	9a e3       	ldi	r25, 0x3A	; 58
   1a33a:	1f 92       	push	r1
   1a33c:	9f 93       	push	r25
   1a33e:	8f 93       	push	r24
   1a340:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
        return(-1);
    }

    // Not enough room ?
    if(sectors > (long)LIF->freesectors)
   1a344:	2c c0       	rjmp	.+88     	; 0x1a39e <lif_newdir+0xa8>
   1a346:	eb 85       	ldd	r30, Y+11	; 0x0b
   1a348:	fc 85       	ldd	r31, Y+12	; 0x0c
   1a34a:	80 8d       	ldd	r24, Z+24	; 0x18
   1a34c:	91 8d       	ldd	r25, Z+25	; 0x19
   1a34e:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a350:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a352:	8c 15       	cp	r24, r12
   1a354:	9d 05       	cpc	r25, r13
   1a356:	ae 05       	cpc	r26, r14
   1a358:	bf 05       	cpc	r27, r15
   1a35a:	b4 f0       	brlt	.+44     	; 0x1a388 <lif_newdir+0x92>
   1a35c:	44 24       	eor	r4, r4
   1a35e:	43 94       	inc	r4
   1a360:	51 2c       	mov	r5, r1
   1a362:	61 2c       	mov	r6, r1
#endif
            break;
        }

        // We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   1a364:	71 2c       	mov	r7, r1
   1a366:	e6 5a       	subi	r30, 0xA6	; 166
   1a368:	ff 4f       	sbci	r31, 0xFF	; 255
   1a36a:	fc 83       	std	Y+4, r31	; 0x04
   1a36c:	eb 83       	std	Y+3, r30	; 0x03
   1a36e:	8b 85       	ldd	r24, Y+11	; 0x0b
   1a370:	9c 85       	ldd	r25, Y+12	; 0x0c
   1a372:	84 5a       	subi	r24, 0xA4	; 164
   1a374:	9f 4f       	sbci	r25, 0xFF	; 255
   1a376:	9a 83       	std	Y+2, r25	; 0x02
                freestate = 0;  // Try again
        }
        
        // Computed start of next record
        // Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   1a378:	89 83       	std	Y+1, r24	; 0x01
   1a37a:	eb 85       	ldd	r30, Y+11	; 0x0b
   1a37c:	fc 85       	ldd	r31, Y+12	; 0x0c
   1a37e:	e0 5a       	subi	r30, 0xA0	; 160
   1a380:	ff 4f       	sbci	r31, 0xFF	; 255
   1a382:	fe 83       	std	Y+6, r31	; 0x06
   1a384:	ed 83       	std	Y+5, r30	; 0x05
    }

    // Not enough room ?
    if(sectors > (long)LIF->freesectors)
    {
        printf("lif_newdir: not enough free space:[%ld]\n", (long)LIF->freesectors);
   1a386:	23 c0       	rjmp	.+70     	; 0x1a3ce <lif_newdir+0xd8>
   1a388:	bf 93       	push	r27
   1a38a:	af 93       	push	r26
   1a38c:	9f 93       	push	r25
   1a38e:	8f 93       	push	r24
   1a390:	84 e9       	ldi	r24, 0x94	; 148
   1a392:	9a e3       	ldi	r25, 0x3A	; 58
   1a394:	1f 92       	push	r1
   1a396:	9f 93       	push	r25
   1a398:	8f 93       	push	r24
   1a39a:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
        return(-1);
   1a39e:	0f b6       	in	r0, 0x3f	; 63
   1a3a0:	f8 94       	cli
   1a3a2:	de bf       	out	0x3e, r29	; 62
   1a3a4:	0f be       	out	0x3f, r0	; 63
   1a3a6:	cd bf       	out	0x3d, r28	; 61
#endif
            break;
        }

        // We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   1a3a8:	05 c1       	rjmp	.+522    	; 0x1a5b4 <lif_newdir+0x2be>
   1a3aa:	eb 81       	ldd	r30, Y+3	; 0x03
   1a3ac:	fc 81       	ldd	r31, Y+4	; 0x04
   1a3ae:	80 81       	ld	r24, Z
   1a3b0:	91 81       	ldd	r25, Z+1	; 0x01
   1a3b2:	8f 3f       	cpi	r24, 0xFF	; 255
   1a3b4:	ff ef       	ldi	r31, 0xFF	; 255
   1a3b6:	9f 07       	cpc	r25, r31
            return(index);
        }


        // PURGED records
        if(LIF->DIR.FileType == 0)
   1a3b8:	a1 f0       	breq	.+40     	; 0x1a3e2 <lif_newdir+0xec>
   1a3ba:	89 2b       	or	r24, r25
   1a3bc:	09 f0       	breq	.+2      	; 0x1a3c0 <lif_newdir+0xca>
        {
            if(freestate == 0)
   1a3be:	d0 c0       	rjmp	.+416    	; 0x1a560 <lif_newdir+0x26a>
   1a3c0:	61 14       	cp	r6, r1
   1a3c2:	71 04       	cpc	r7, r1
   1a3c4:	09 f4       	brne	.+2      	; 0x1a3c8 <lif_newdir+0xd2>
   1a3c6:	c3 c0       	rjmp	.+390    	; 0x1a54e <lif_newdir+0x258>
   1a3c8:	9f ef       	ldi	r25, 0xFF	; 255
   1a3ca:	49 1a       	sub	r4, r25
   1a3cc:	59 0a       	sbc	r5, r25
   1a3ce:	82 01       	movw	r16, r4
   1a3d0:	01 50       	subi	r16, 0x01	; 1

    // Update free space and EOF pointers
    while(1)
    {
        // Write new EOF after current one
        if( !lif_readdirindex(LIF,index) )
   1a3d2:	11 09       	sbc	r17, r1
   1a3d4:	b8 01       	movw	r22, r16
   1a3d6:	8b 85       	ldd	r24, Y+11	; 0x0b
   1a3d8:	9c 85       	ldd	r25, Y+12	; 0x0c
   1a3da:	7b da       	rcall	.-2826   	; 0x198d2 <lif_readdirindex>
   1a3dc:	89 2b       	or	r24, r25
   1a3de:	29 f7       	brne	.-54     	; 0x1a3aa <lif_newdir+0xb4>
        if(LIF->DIR.FileType == 0xffff)
        {

            // Was enough free space found in purged area ?
            // Do NOT need to update EOF!
            if(freestate == 2)
   1a3e0:	e9 c0       	rjmp	.+466    	; 0x1a5b4 <lif_newdir+0x2be>
   1a3e2:	22 e0       	ldi	r18, 0x02	; 2
   1a3e4:	62 16       	cp	r6, r18
   1a3e6:	71 04       	cpc	r7, r1
   1a3e8:	09 f0       	breq	.+2      	; 0x1a3ec <lif_newdir+0xf6>
            {
                // Update free pace for new file
                lif_dir_clear(LIF);
   1a3ea:	46 c0       	rjmp	.+140    	; 0x1a478 <lif_newdir+0x182>
   1a3ec:	8b 85       	ldd	r24, Y+11	; 0x0b
   1a3ee:	9c 85       	ldd	r25, Y+12	; 0x0c
   1a3f0:	0e 94 b8 c7 	call	0x18f70	; 0x18f70 <lif_dir_clear>
                LIF->DIR.FileStartSector = freestart;
   1a3f4:	eb 85       	ldd	r30, Y+11	; 0x0b
   1a3f6:	fc 85       	ldd	r31, Y+12	; 0x0c
   1a3f8:	e4 5a       	subi	r30, 0xA4	; 164
   1a3fa:	ff 4f       	sbci	r31, 0xFF	; 255
   1a3fc:	8f 81       	ldd	r24, Y+7	; 0x07
   1a3fe:	80 83       	st	Z, r24
   1a400:	98 85       	ldd	r25, Y+8	; 0x08
   1a402:	91 83       	std	Z+1, r25	; 0x01
   1a404:	29 85       	ldd	r18, Y+9	; 0x09
   1a406:	22 83       	std	Z+2, r18	; 0x02
   1a408:	8a 85       	ldd	r24, Y+10	; 0x0a
                LIF->DIR.FileSectors = sectors;
   1a40a:	83 83       	std	Z+3, r24	; 0x03
   1a40c:	eb 85       	ldd	r30, Y+11	; 0x0b
   1a40e:	fc 85       	ldd	r31, Y+12	; 0x0c
   1a410:	e0 5a       	subi	r30, 0xA0	; 160
   1a412:	ff 4f       	sbci	r31, 0xFF	; 255
   1a414:	c0 82       	st	Z, r12
   1a416:	d1 82       	std	Z+1, r13	; 0x01
   1a418:	e2 82       	std	Z+2, r14	; 0x02
                LIF->usedsectors += sectors;
   1a41a:	f3 82       	std	Z+3, r15	; 0x03
   1a41c:	eb 85       	ldd	r30, Y+11	; 0x0b
   1a41e:	fc 85       	ldd	r31, Y+12	; 0x0c
   1a420:	84 89       	ldd	r24, Z+20	; 0x14
   1a422:	95 89       	ldd	r25, Z+21	; 0x15
   1a424:	a6 89       	ldd	r26, Z+22	; 0x16
   1a426:	b7 89       	ldd	r27, Z+23	; 0x17
   1a428:	8c 0d       	add	r24, r12
   1a42a:	9d 1d       	adc	r25, r13
   1a42c:	ae 1d       	adc	r26, r14
   1a42e:	bf 1d       	adc	r27, r15
   1a430:	84 8b       	std	Z+20, r24	; 0x14
   1a432:	95 8b       	std	Z+21, r25	; 0x15
   1a434:	a6 8b       	std	Z+22, r26	; 0x16
                LIF->freesectors -= sectors;
   1a436:	b7 8b       	std	Z+23, r27	; 0x17
   1a438:	80 8d       	ldd	r24, Z+24	; 0x18
   1a43a:	91 8d       	ldd	r25, Z+25	; 0x19
   1a43c:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a43e:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a440:	8c 19       	sub	r24, r12
   1a442:	9d 09       	sbc	r25, r13
   1a444:	ae 09       	sbc	r26, r14
   1a446:	bf 09       	sbc	r27, r15
   1a448:	80 8f       	std	Z+24, r24	; 0x18
   1a44a:	91 8f       	std	Z+25, r25	; 0x19
   1a44c:	a2 8f       	std	Z+26, r26	; 0x1a
                LIF->files++;
   1a44e:	b3 8f       	std	Z+27, r27	; 0x1b
   1a450:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a452:	95 8d       	ldd	r25, Z+29	; 0x1d
   1a454:	01 96       	adiw	r24, 0x01	; 1
   1a456:	95 8f       	std	Z+29, r25	; 0x1d
                LIF->purged--;
   1a458:	84 8f       	std	Z+28, r24	; 0x1c
   1a45a:	86 8d       	ldd	r24, Z+30	; 0x1e
   1a45c:	97 8d       	ldd	r25, Z+31	; 0x1f
   1a45e:	01 97       	sbiw	r24, 0x01	; 1
   1a460:	97 8f       	std	Z+31, r25	; 0x1f
                LIF->dirindex = freeindex;
   1a462:	86 8f       	std	Z+30, r24	; 0x1e
                // Write new record (FileType is still EOF until data is updated by user)
                if( !lif_writedirindex(LIF,freeindex))
   1a464:	20 a2       	std	Z+32, r2	; 0x20
   1a466:	31 a2       	std	Z+33, r3	; 0x21
   1a468:	b1 01       	movw	r22, r2
   1a46a:	cf 01       	movw	r24, r30
   1a46c:	9b da       	rcall	.-2762   	; 0x199a4 <lif_writedirindex>
   1a46e:	89 2b       	or	r24, r25
   1a470:	09 f4       	brne	.+2      	; 0x1a474 <lif_newdir+0x17e>
   1a472:	a0 c0       	rjmp	.+320    	; 0x1a5b4 <lif_newdir+0x2be>
                    break;
                }
                return(freeindex);
            }

            if(debuglevel & 0x400)
   1a474:	c1 01       	movw	r24, r2
   1a476:	a0 c0       	rjmp	.+320    	; 0x1a5b8 <lif_newdir+0x2c2>
   1a478:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1a47c:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
                printf("lif_newdir: index:[%d] adding at:[%ld]to purged space:[%ld] sectors, free:[%ld]\n", 
   1a480:	92 ff       	sbrs	r25, 2
   1a482:	20 c0       	rjmp	.+64     	; 0x1a4c4 <lif_newdir+0x1ce>
   1a484:	eb 85       	ldd	r30, Y+11	; 0x0b
   1a486:	fc 85       	ldd	r31, Y+12	; 0x0c
   1a488:	83 8d       	ldd	r24, Z+27	; 0x1b
   1a48a:	8f 93       	push	r24
   1a48c:	82 8d       	ldd	r24, Z+26	; 0x1a
   1a48e:	8f 93       	push	r24
   1a490:	81 8d       	ldd	r24, Z+25	; 0x19
   1a492:	8f 93       	push	r24
   1a494:	80 8d       	ldd	r24, Z+24	; 0x18
   1a496:	8f 93       	push	r24
   1a498:	ff 92       	push	r15
   1a49a:	ef 92       	push	r14
   1a49c:	df 92       	push	r13
   1a49e:	cf 92       	push	r12
   1a4a0:	bf 92       	push	r11
   1a4a2:	af 92       	push	r10
   1a4a4:	9f 92       	push	r9
   1a4a6:	8f 92       	push	r8
   1a4a8:	1f 93       	push	r17
   1a4aa:	0f 93       	push	r16
   1a4ac:	83 e4       	ldi	r24, 0x43	; 67
   1a4ae:	9a e3       	ldi	r25, 0x3A	; 58
   1a4b0:	1f 92       	push	r1
   1a4b2:	9f 93       	push	r25
   1a4b4:	8f 93       	push	r24
   1a4b6:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1a4ba:	0f b6       	in	r0, 0x3f	; 63
   1a4bc:	f8 94       	cli
   1a4be:	de bf       	out	0x3e, r29	; 62
                    (int) index,(long)start,(long) sectors, (long)LIF->freesectors);

            // Write new EOF after current one
            if( !lif_writedirEOF(LIF,index+1) )
   1a4c0:	0f be       	out	0x3f, r0	; 63
   1a4c2:	cd bf       	out	0x3d, r28	; 61
   1a4c4:	b8 01       	movw	r22, r16
   1a4c6:	6f 5f       	subi	r22, 0xFF	; 255
   1a4c8:	7f 4f       	sbci	r23, 0xFF	; 255
   1a4ca:	8b 85       	ldd	r24, Y+11	; 0x0b
   1a4cc:	9c 85       	ldd	r25, Y+12	; 0x0c
   1a4ce:	c6 da       	rcall	.-2676   	; 0x19a5c <lif_writedirEOF>
   1a4d0:	89 2b       	or	r24, r25
            {
                break;
            }

            lif_dir_clear(LIF);
   1a4d2:	09 f4       	brne	.+2      	; 0x1a4d6 <lif_newdir+0x1e0>
   1a4d4:	6f c0       	rjmp	.+222    	; 0x1a5b4 <lif_newdir+0x2be>
   1a4d6:	8b 85       	ldd	r24, Y+11	; 0x0b
   1a4d8:	9c 85       	ldd	r25, Y+12	; 0x0c
            LIF->DIR.FileStartSector = start;
   1a4da:	0e 94 b8 c7 	call	0x18f70	; 0x18f70 <lif_dir_clear>
   1a4de:	eb 85       	ldd	r30, Y+11	; 0x0b
   1a4e0:	fc 85       	ldd	r31, Y+12	; 0x0c
   1a4e2:	e4 5a       	subi	r30, 0xA4	; 164
   1a4e4:	ff 4f       	sbci	r31, 0xFF	; 255
   1a4e6:	80 82       	st	Z, r8
   1a4e8:	91 82       	std	Z+1, r9	; 0x01
            LIF->DIR.FileSectors = sectors;
   1a4ea:	a2 82       	std	Z+2, r10	; 0x02
   1a4ec:	b3 82       	std	Z+3, r11	; 0x03
   1a4ee:	eb 85       	ldd	r30, Y+11	; 0x0b
   1a4f0:	fc 85       	ldd	r31, Y+12	; 0x0c
   1a4f2:	e0 5a       	subi	r30, 0xA0	; 160
   1a4f4:	ff 4f       	sbci	r31, 0xFF	; 255
   1a4f6:	c0 82       	st	Z, r12
   1a4f8:	d1 82       	std	Z+1, r13	; 0x01
            LIF->usedsectors += sectors;
   1a4fa:	e2 82       	std	Z+2, r14	; 0x02
   1a4fc:	f3 82       	std	Z+3, r15	; 0x03
   1a4fe:	eb 85       	ldd	r30, Y+11	; 0x0b
   1a500:	fc 85       	ldd	r31, Y+12	; 0x0c
   1a502:	84 89       	ldd	r24, Z+20	; 0x14
   1a504:	95 89       	ldd	r25, Z+21	; 0x15
   1a506:	a6 89       	ldd	r26, Z+22	; 0x16
   1a508:	b7 89       	ldd	r27, Z+23	; 0x17
   1a50a:	8c 0d       	add	r24, r12
   1a50c:	9d 1d       	adc	r25, r13
   1a50e:	ae 1d       	adc	r26, r14
   1a510:	bf 1d       	adc	r27, r15
   1a512:	84 8b       	std	Z+20, r24	; 0x14
   1a514:	95 8b       	std	Z+21, r25	; 0x15
            LIF->freesectors -= sectors;
   1a516:	a6 8b       	std	Z+22, r26	; 0x16
   1a518:	b7 8b       	std	Z+23, r27	; 0x17
   1a51a:	80 8d       	ldd	r24, Z+24	; 0x18
   1a51c:	91 8d       	ldd	r25, Z+25	; 0x19
   1a51e:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a520:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a522:	8c 19       	sub	r24, r12
   1a524:	9d 09       	sbc	r25, r13
   1a526:	ae 09       	sbc	r26, r14
   1a528:	bf 09       	sbc	r27, r15
   1a52a:	80 8f       	std	Z+24, r24	; 0x18
   1a52c:	91 8f       	std	Z+25, r25	; 0x19
            LIF->files++;
   1a52e:	a2 8f       	std	Z+26, r26	; 0x1a
   1a530:	b3 8f       	std	Z+27, r27	; 0x1b
   1a532:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a534:	95 8d       	ldd	r25, Z+29	; 0x1d
            LIF->dirindex = index;
   1a536:	01 96       	adiw	r24, 0x01	; 1
            // Write new record (FileType is still EOF until data is updated by user )
            if( !lif_writedirindex(LIF,index))
   1a538:	95 8f       	std	Z+29, r25	; 0x1d
   1a53a:	84 8f       	std	Z+28, r24	; 0x1c
   1a53c:	11 a3       	std	Z+33, r17	; 0x21
   1a53e:	00 a3       	std	Z+32, r16	; 0x20
   1a540:	b8 01       	movw	r22, r16
   1a542:	cf 01       	movw	r24, r30
   1a544:	2f da       	rcall	.-2978   	; 0x199a4 <lif_writedirindex>
   1a546:	89 2b       	or	r24, r25


        // PURGED records
        if(LIF->DIR.FileType == 0)
        {
            if(freestate == 0)
   1a548:	a9 f1       	breq	.+106    	; 0x1a5b4 <lif_newdir+0x2be>
   1a54a:	c8 01       	movw	r24, r16
   1a54c:	35 c0       	rjmp	.+106    	; 0x1a5b8 <lif_newdir+0x2c2>
   1a54e:	8f 82       	std	Y+7, r8	; 0x07
   1a550:	98 86       	std	Y+8, r9	; 0x08
            {
                freeindex = index;
                freestart = start;
                freestate = 1;
   1a552:	a9 86       	std	Y+9, r10	; 0x09
   1a554:	ba 86       	std	Y+10, r11	; 0x0a
   1a556:	18 01       	movw	r2, r16
            }
            ++index;
            continue;
   1a558:	66 24       	eor	r6, r6
        }
        

        // VALID record
        if(freestate == 1)
   1a55a:	63 94       	inc	r6
   1a55c:	71 2c       	mov	r7, r1
   1a55e:	34 cf       	rjmp	.-408    	; 0x1a3c8 <lif_newdir+0xd2>
   1a560:	f1 e0       	ldi	r31, 0x01	; 1
        {
            long freesectors;
            // Compute sectors of purged space between valid records
            // Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
   1a562:	6f 16       	cp	r6, r31
   1a564:	71 04       	cpc	r7, r1
   1a566:	a9 f4       	brne	.+42     	; 0x1a592 <lif_newdir+0x29c>
   1a568:	e9 81       	ldd	r30, Y+1	; 0x01
   1a56a:	fa 81       	ldd	r31, Y+2	; 0x02
   1a56c:	80 81       	ld	r24, Z
   1a56e:	91 81       	ldd	r25, Z+1	; 0x01
   1a570:	a2 81       	ldd	r26, Z+2	; 0x02
   1a572:	b3 81       	ldd	r27, Z+3	; 0x03
   1a574:	88 19       	sub	r24, r8
   1a576:	99 09       	sbc	r25, r9
   1a578:	aa 09       	sbc	r26, r10
   1a57a:	bb 09       	sbc	r27, r11
   1a57c:	8c 15       	cp	r24, r12
   1a57e:	9d 05       	cpc	r25, r13
                freestate = 2;      // Found free space in purged record
            else
                freestate = 0;  // Try again
   1a580:	ae 05       	cpc	r26, r14
   1a582:	bf 05       	cpc	r27, r15
   1a584:	1c f4       	brge	.+6      	; 0x1a58c <lif_newdir+0x296>
            long freesectors;
            // Compute sectors of purged space between valid records
            // Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
                freestate = 2;      // Found free space in purged record
   1a586:	61 2c       	mov	r6, r1
   1a588:	71 2c       	mov	r7, r1
   1a58a:	03 c0       	rjmp	.+6      	; 0x1a592 <lif_newdir+0x29c>
                freestate = 0;  // Try again
        }
        
        // Computed start of next record
        // Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   1a58c:	82 e0       	ldi	r24, 0x02	; 2
   1a58e:	68 2e       	mov	r6, r24
   1a590:	71 2c       	mov	r7, r1
   1a592:	e9 81       	ldd	r30, Y+1	; 0x01
   1a594:	fa 81       	ldd	r31, Y+2	; 0x02
   1a596:	80 80       	ld	r8, Z
   1a598:	91 80       	ldd	r9, Z+1	; 0x01
   1a59a:	a2 80       	ldd	r10, Z+2	; 0x02
   1a59c:	b3 80       	ldd	r11, Z+3	; 0x03
   1a59e:	ed 81       	ldd	r30, Y+5	; 0x05
   1a5a0:	fe 81       	ldd	r31, Y+6	; 0x06
   1a5a2:	80 81       	ld	r24, Z
   1a5a4:	91 81       	ldd	r25, Z+1	; 0x01
   1a5a6:	a2 81       	ldd	r26, Z+2	; 0x02
   1a5a8:	b3 81       	ldd	r27, Z+3	; 0x03
   1a5aa:	88 0e       	add	r8, r24
   1a5ac:	99 1e       	adc	r9, r25
        ++index;
    }
    // ERROR
    return(-1);
   1a5ae:	aa 1e       	adc	r10, r26
   1a5b0:	bb 1e       	adc	r11, r27
}
   1a5b2:	0a cf       	rjmp	.-492    	; 0x1a3c8 <lif_newdir+0xd2>
   1a5b4:	8f ef       	ldi	r24, 0xFF	; 255
   1a5b6:	9f ef       	ldi	r25, 0xFF	; 255
   1a5b8:	2c 96       	adiw	r28, 0x0c	; 12
   1a5ba:	e2 e1       	ldi	r30, 0x12	; 18
   1a5bc:	0c 94 0f e6 	jmp	0x1cc1e	; 0x1cc1e <__epilogue_restores__>

0001a5c0 <lif_open_volume>:
/// @param[in] *name: file name of LIF image
/// @param[in] *mode: "rb" = read, "rb+" = read/write
/// @return LIF pointer on sucesses or NULL on error
MEMSPACE
lif_t *lif_open_volume(char *name, char *mode)
{
   1a5c0:	a0 e3       	ldi	r26, 0x30	; 48
   1a5c2:	b1 e0       	ldi	r27, 0x01	; 1
   1a5c4:	e6 ee       	ldi	r30, 0xE6	; 230
   1a5c6:	f2 ed       	ldi	r31, 0xD2	; 210
   1a5c8:	0c 94 fb e5 	jmp	0x1cbf6	; 0x1cbf6 <__prologue_saves__+0x10>
   1a5cc:	b8 2e       	mov	r11, r24
   1a5ce:	a9 2e       	mov	r10, r25
   1a5d0:	6b 01       	movw	r12, r22
    lif_t *LIF;
    stat_t sb, *sp;
    uint8_t buffer[LIF_SECTOR_SIZE];


    sp = lif_stat(name, (stat_t *)&sb);
   1a5d2:	be 01       	movw	r22, r28
   1a5d4:	6f 5f       	subi	r22, 0xFF	; 255
   1a5d6:	7e 4f       	sbci	r23, 0xFE	; 254
   1a5d8:	0e 94 f2 c2 	call	0x185e4	; 0x185e4 <lif_stat>
   1a5dc:	8c 01       	movw	r16, r24
    if(sp == NULL)
   1a5de:	00 97       	sbiw	r24, 0x00	; 0
   1a5e0:	09 f1       	breq	.+66     	; 0x1a624 <lif_open_volume+0x64>
        return(NULL);


    // To read LIF volume we must have at minimum two sectors
    // volume header a directory entry
    if(sp->st_size < (long)LIF_SECTOR_SIZE*2)
   1a5e2:	fc 01       	movw	r30, r24
   1a5e4:	80 8d       	ldd	r24, Z+24	; 0x18
   1a5e6:	91 8d       	ldd	r25, Z+25	; 0x19
   1a5e8:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a5ea:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a5ec:	81 15       	cp	r24, r1
   1a5ee:	f2 e0       	ldi	r31, 0x02	; 2
   1a5f0:	9f 07       	cpc	r25, r31
   1a5f2:	a1 05       	cpc	r26, r1
   1a5f4:	b1 05       	cpc	r27, r1
   1a5f6:	c8 f4       	brcc	.+50     	; 0x1a62a <lif_open_volume+0x6a>
    {
        if(debuglevel & 1)
   1a5f8:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1a5fc:	20 ff       	sbrs	r18, 0
   1a5fe:	12 c0       	rjmp	.+36     	; 0x1a624 <lif_open_volume+0x64>
            printf("lif_open_volume:[%s] error volume header area too small:[%ld]\n", name, (long)sp->st_size);
   1a600:	bf 93       	push	r27
   1a602:	af 93       	push	r26
   1a604:	9f 93       	push	r25
   1a606:	8f 93       	push	r24
   1a608:	af 92       	push	r10
   1a60a:	bf 92       	push	r11
   1a60c:	84 e0       	ldi	r24, 0x04	; 4
   1a60e:	9a e3       	ldi	r25, 0x3A	; 58
   1a610:	1f 92       	push	r1
   1a612:	9f 93       	push	r25
   1a614:	8f 93       	push	r24
   1a616:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1a61a:	0f b6       	in	r0, 0x3f	; 63
   1a61c:	f8 94       	cli
   1a61e:	de bf       	out	0x3e, r29	; 62
   1a620:	0f be       	out	0x3f, r0	; 63
   1a622:	cd bf       	out	0x3d, r28	; 61
        return(NULL);
   1a624:	00 e0       	ldi	r16, 0x00	; 0
   1a626:	10 e0       	ldi	r17, 0x00	; 0
   1a628:	c5 c0       	rjmp	.+394    	; 0x1a7b4 <lif_open_volume+0x1f4>
    }


    // Allocate LIF structure
    LIF = lif_calloc(sizeof(lif_t)+4);
   1a62a:	64 e7       	ldi	r22, 0x74	; 116
   1a62c:	70 e0       	ldi	r23, 0x00	; 0
   1a62e:	80 e0       	ldi	r24, 0x00	; 0
   1a630:	90 e0       	ldi	r25, 0x00	; 0
   1a632:	0e 94 6f c2 	call	0x184de	; 0x184de <lif_calloc>
   1a636:	7c 01       	movw	r14, r24
    if(!LIF)
   1a638:	89 2b       	or	r24, r25
   1a63a:	a1 f3       	breq	.-24     	; 0x1a624 <lif_open_volume+0x64>
        return(NULL);

    LIF->name = lif_stralloc(name);
   1a63c:	8b 2d       	mov	r24, r11
   1a63e:	9a 2d       	mov	r25, r10
   1a640:	0e 94 ab c2 	call	0x18556	; 0x18556 <lif_stralloc>
   1a644:	f7 01       	movw	r30, r14
   1a646:	91 83       	std	Z+1, r25	; 0x01
   1a648:	80 83       	st	Z, r24
    if(!LIF->name)
   1a64a:	00 97       	sbiw	r24, 0x00	; 0
   1a64c:	09 f4       	brne	.+2      	; 0x1a650 <lif_open_volume+0x90>
   1a64e:	5a c0       	rjmp	.+180    	; 0x1a704 <lif_open_volume+0x144>
    {
        lif_closedir(LIF);
        return(NULL);
    }
        
    LIF->imagebytes = sp->st_size;
   1a650:	f8 01       	movw	r30, r16
   1a652:	00 8d       	ldd	r16, Z+24	; 0x18
   1a654:	11 8d       	ldd	r17, Z+25	; 0x19
   1a656:	22 8d       	ldd	r18, Z+26	; 0x1a
   1a658:	33 8d       	ldd	r19, Z+27	; 0x1b
   1a65a:	f7 01       	movw	r30, r14
   1a65c:	00 87       	std	Z+8, r16	; 0x08
   1a65e:	11 87       	std	Z+9, r17	; 0x09
   1a660:	22 87       	std	Z+10, r18	; 0x0a
   1a662:	33 87       	std	Z+11, r19	; 0x0b
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a664:	77 27       	eor	r23, r23
   1a666:	63 2f       	mov	r22, r19
   1a668:	52 2f       	mov	r21, r18
   1a66a:	41 2f       	mov	r20, r17
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a66c:	00 23       	and	r16, r16
   1a66e:	21 f0       	breq	.+8      	; 0x1a678 <lif_open_volume+0xb8>
        ++sectors;
   1a670:	4f 5f       	subi	r20, 0xFF	; 255
   1a672:	5f 4f       	sbci	r21, 0xFF	; 255
   1a674:	6f 4f       	sbci	r22, 0xFF	; 255
   1a676:	7f 4f       	sbci	r23, 0xFF	; 255
        lif_closedir(LIF);
        return(NULL);
    }
        
    LIF->imagebytes = sp->st_size;
    LIF->sectors = lif_bytes2sectors(sp->st_size);
   1a678:	f7 01       	movw	r30, r14
   1a67a:	44 83       	std	Z+4, r20	; 0x04
   1a67c:	55 83       	std	Z+5, r21	; 0x05
   1a67e:	66 83       	std	Z+6, r22	; 0x06
   1a680:	77 83       	std	Z+7, r23	; 0x07

    LIF->fp = lif_open(LIF->name,mode);
   1a682:	b6 01       	movw	r22, r12
   1a684:	0e 94 ca c2 	call	0x18594	; 0x18594 <lif_open>
   1a688:	f7 01       	movw	r30, r14
   1a68a:	93 83       	std	Z+3, r25	; 0x03
   1a68c:	82 83       	std	Z+2, r24	; 0x02
    if(!LIF->fp)
   1a68e:	89 2b       	or	r24, r25
   1a690:	c9 f1       	breq	.+114    	; 0x1a704 <lif_open_volume+0x144>
        return(NULL);
    }
        
        
    // Volume header must be it least one sector
    if( lif_read(LIF, buffer, 0, LIF_SECTOR_SIZE) < LIF_SECTOR_SIZE)
   1a692:	00 e0       	ldi	r16, 0x00	; 0
   1a694:	11 e0       	ldi	r17, 0x01	; 1
   1a696:	20 e0       	ldi	r18, 0x00	; 0
   1a698:	30 e0       	ldi	r19, 0x00	; 0
   1a69a:	a9 01       	movw	r20, r18
   1a69c:	be 01       	movw	r22, r28
   1a69e:	6f 5f       	subi	r22, 0xFF	; 255
   1a6a0:	7f 4f       	sbci	r23, 0xFF	; 255
   1a6a2:	c7 01       	movw	r24, r14
   1a6a4:	0e 94 50 c3 	call	0x186a0	; 0x186a0 <lif_read>
   1a6a8:	6f 3f       	cpi	r22, 0xFF	; 255
   1a6aa:	71 05       	cpc	r23, r1
   1a6ac:	81 05       	cpc	r24, r1
   1a6ae:	91 05       	cpc	r25, r1
   1a6b0:	09 f0       	breq	.+2      	; 0x1a6b4 <lif_open_volume+0xf4>
   1a6b2:	4c f4       	brge	.+18     	; 0x1a6c6 <lif_open_volume+0x106>
    {
        if(debuglevel & 1)
   1a6b4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1a6b8:	80 ff       	sbrs	r24, 0
   1a6ba:	24 c0       	rjmp	.+72     	; 0x1a704 <lif_open_volume+0x144>
            printf("lif_open_volume:[%s] error read volume header failed\n", name);
   1a6bc:	af 92       	push	r10
   1a6be:	bf 92       	push	r11
   1a6c0:	8e ec       	ldi	r24, 0xCE	; 206
   1a6c2:	99 e3       	ldi	r25, 0x39	; 57
   1a6c4:	15 c0       	rjmp	.+42     	; 0x1a6f0 <lif_open_volume+0x130>
        lif_closedir(LIF);
        return(NULL);
    }

    // Unpack Volumes has the Directory start sector
    lif_str2vol(buffer, LIF);
   1a6c6:	b7 01       	movw	r22, r14
   1a6c8:	ce 01       	movw	r24, r28
   1a6ca:	01 96       	adiw	r24, 0x01	; 1
   1a6cc:	0e 94 6b c5 	call	0x18ad6	; 0x18ad6 <lif_str2vol>

    // Validate basic Volume headers 
    if( !lif_check_volume(LIF) )
   1a6d0:	c7 01       	movw	r24, r14
   1a6d2:	0e 94 5a c9 	call	0x192b4	; 0x192b4 <lif_check_volume>
   1a6d6:	89 2b       	or	r24, r25
   1a6d8:	c1 f4       	brne	.+48     	; 0x1a70a <lif_open_volume+0x14a>
    {
        if(debuglevel & 1)
   1a6da:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1a6de:	80 ff       	sbrs	r24, 0
   1a6e0:	11 c0       	rjmp	.+34     	; 0x1a704 <lif_open_volume+0x144>
            printf("lif_open_volume:[%s] error volume validate failed\n", LIF->name);
   1a6e2:	f7 01       	movw	r30, r14
   1a6e4:	81 81       	ldd	r24, Z+1	; 0x01
   1a6e6:	8f 93       	push	r24
   1a6e8:	80 81       	ld	r24, Z
   1a6ea:	8f 93       	push	r24
   1a6ec:	8b e9       	ldi	r24, 0x9B	; 155
   1a6ee:	99 e3       	ldi	r25, 0x39	; 57
   1a6f0:	1f 92       	push	r1
   1a6f2:	9f 93       	push	r25
   1a6f4:	8f 93       	push	r24
   1a6f6:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1a6fa:	0f 90       	pop	r0
   1a6fc:	0f 90       	pop	r0
   1a6fe:	0f 90       	pop	r0
   1a700:	0f 90       	pop	r0
   1a702:	0f 90       	pop	r0
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a704:	c7 01       	movw	r24, r14
   1a706:	64 d8       	rcall	.-3896   	; 0x197d0 <lif_close_volume>
   1a708:	8d cf       	rjmp	.-230    	; 0x1a624 <lif_open_volume+0x64>
        lif_closedir(LIF);
        return(NULL);
    }

    // Initialize remaining LIF headers
    LIF->filestart = LIF->VOL.DirStartSector + LIF->VOL.DirSectors;
   1a70a:	f7 01       	movw	r30, r14
   1a70c:	45 a5       	ldd	r20, Z+45	; 0x2d
   1a70e:	56 a5       	ldd	r21, Z+46	; 0x2e
   1a710:	67 a5       	ldd	r22, Z+47	; 0x2f
   1a712:	70 a9       	ldd	r23, Z+48	; 0x30
   1a714:	85 a9       	ldd	r24, Z+53	; 0x35
   1a716:	96 a9       	ldd	r25, Z+54	; 0x36
   1a718:	a7 a9       	ldd	r26, Z+55	; 0x37
   1a71a:	b0 ad       	ldd	r27, Z+56	; 0x38
   1a71c:	48 0f       	add	r20, r24
   1a71e:	59 1f       	adc	r21, r25
   1a720:	6a 1f       	adc	r22, r26
   1a722:	7b 1f       	adc	r23, r27
   1a724:	44 87       	std	Z+12, r20	; 0x0c
   1a726:	55 87       	std	Z+13, r21	; 0x0d
   1a728:	66 87       	std	Z+14, r22	; 0x0e
   1a72a:	77 87       	std	Z+15, r23	; 0x0f
    LIF->filesectors = LIF->sectors - LIF->filestart;
   1a72c:	84 81       	ldd	r24, Z+4	; 0x04
   1a72e:	95 81       	ldd	r25, Z+5	; 0x05
   1a730:	a6 81       	ldd	r26, Z+6	; 0x06
   1a732:	b7 81       	ldd	r27, Z+7	; 0x07
   1a734:	84 1b       	sub	r24, r20
   1a736:	95 0b       	sbc	r25, r21
   1a738:	a6 0b       	sbc	r26, r22
   1a73a:	b7 0b       	sbc	r27, r23
   1a73c:	80 8b       	std	Z+16, r24	; 0x10
   1a73e:	91 8b       	std	Z+17, r25	; 0x11
   1a740:	a2 8b       	std	Z+18, r26	; 0x12
   1a742:	b3 8b       	std	Z+19, r27	; 0x13
    LIF->freesectors = LIF->filesectors;
   1a744:	80 8f       	std	Z+24, r24	; 0x18
   1a746:	91 8f       	std	Z+25, r25	; 0x19
   1a748:	a2 8f       	std	Z+26, r26	; 0x1a
   1a74a:	b3 8f       	std	Z+27, r27	; 0x1b
    LIF->usedsectors = 0;
   1a74c:	14 8a       	std	Z+20, r1	; 0x14
   1a74e:	15 8a       	std	Z+21, r1	; 0x15
   1a750:	16 8a       	std	Z+22, r1	; 0x16
   1a752:	17 8a       	std	Z+23, r1	; 0x17
    LIF->purged = 0;
   1a754:	17 8e       	std	Z+31, r1	; 0x1f
   1a756:	16 8e       	std	Z+30, r1	; 0x1e
    LIF->files = 0;
   1a758:	15 8e       	std	Z+29, r1	; 0x1d
   1a75a:	14 8e       	std	Z+28, r1	; 0x1c
    LIF->dirindex = 0;
   1a75c:	11 a2       	std	Z+33, r1	; 0x21
   1a75e:	10 a2       	std	Z+32, r1	; 0x20
    LIF->EOFindex = 0;
   1a760:	13 a2       	std	Z+35, r1	; 0x23

    if( lif_updatefree(LIF) == NULL)
   1a762:	12 a2       	std	Z+34, r1	; 0x22
   1a764:	c7 01       	movw	r24, r14
   1a766:	92 d9       	rcall	.-3292   	; 0x19a8c <lif_updatefree>
   1a768:	8c 01       	movw	r16, r24
   1a76a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1a76e:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1a772:	01 15       	cp	r16, r1
   1a774:	11 05       	cpc	r17, r1
    {
        if(debuglevel & 1)
   1a776:	b1 f4       	brne	.+44     	; 0x1a7a4 <lif_open_volume+0x1e4>
   1a778:	80 ff       	sbrs	r24, 0
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
   1a77a:	11 c0       	rjmp	.+34     	; 0x1a79e <lif_open_volume+0x1de>
   1a77c:	f7 01       	movw	r30, r14
   1a77e:	81 81       	ldd	r24, Z+1	; 0x01
   1a780:	8f 93       	push	r24
   1a782:	80 81       	ld	r24, Z
   1a784:	8f 93       	push	r24
   1a786:	88 e6       	ldi	r24, 0x68	; 104
   1a788:	99 e3       	ldi	r25, 0x39	; 57
   1a78a:	1f 92       	push	r1
   1a78c:	9f 93       	push	r25
   1a78e:	8f 93       	push	r24
   1a790:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1a794:	0f 90       	pop	r0
   1a796:	0f 90       	pop	r0
   1a798:	0f 90       	pop	r0
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a79a:	0f 90       	pop	r0
   1a79c:	0f 90       	pop	r0
   1a79e:	c7 01       	movw	r24, r14
    if( lif_updatefree(LIF) == NULL)
    {
        if(debuglevel & 1)
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
        lif_closedir(LIF);
        return(NULL);
   1a7a0:	17 d8       	rcall	.-4050   	; 0x197d0 <lif_close_volume>
    }

	if(debuglevel &0x400)
   1a7a2:	08 c0       	rjmp	.+16     	; 0x1a7b4 <lif_open_volume+0x1f4>
   1a7a4:	92 ff       	sbrs	r25, 2
		lif_dump_vol(LIF, "Volume Listing");	
   1a7a6:	05 c0       	rjmp	.+10     	; 0x1a7b2 <lif_open_volume+0x1f2>
   1a7a8:	60 ec       	ldi	r22, 0xC0	; 192
   1a7aa:	75 e1       	ldi	r23, 0x15	; 21
   1a7ac:	c7 01       	movw	r24, r14
   1a7ae:	0e 94 c7 c7 	call	0x18f8e	; 0x18f8e <lif_dump_vol>
    return( LIF );
}
   1a7b2:	87 01       	movw	r16, r14
   1a7b4:	c8 01       	movw	r24, r16
   1a7b6:	c0 5d       	subi	r28, 0xD0	; 208
   1a7b8:	de 4f       	sbci	r29, 0xFE	; 254
   1a7ba:	ea e0       	ldi	r30, 0x0A	; 10
   1a7bc:	0c 94 17 e6 	jmp	0x1cc2e	; 0x1cc2e <__epilogue_restores__+0x10>

0001a7c0 <lif_dir>:
/// @brief Display a LIF image file directory
/// @param[in] lifimagename: LIF disk image name
/// @return -1 on error or number of files found
MEMSPACE
void lif_dir(char *lifimagename)
{
   1a7c0:	a1 e1       	ldi	r26, 0x11	; 17
   1a7c2:	b0 e0       	ldi	r27, 0x00	; 0
   1a7c4:	e6 ee       	ldi	r30, 0xE6	; 230
   1a7c6:	f3 ed       	ldi	r31, 0xD3	; 211
   1a7c8:	0c 94 f3 e5 	jmp	0x1cbe6	; 0x1cbe6 <__prologue_saves__>
    int index = 0;
    char *vol;

    int warn = ' ';

    LIF = lif_open_volume(lifimagename,"rb+");
   1a7cc:	60 e9       	ldi	r22, 0x90	; 144
   1a7ce:	78 e0       	ldi	r23, 0x08	; 8
   1a7d0:	f7 de       	rcall	.-530    	; 0x1a5c0 <lif_open_volume>
   1a7d2:	99 8b       	std	Y+17, r25	; 0x11
   1a7d4:	88 8b       	std	Y+16, r24	; 0x10
    if(LIF == NULL)
   1a7d6:	00 97       	sbiw	r24, 0x00	; 0
   1a7d8:	09 f4       	brne	.+2      	; 0x1a7dc <lif_dir+0x1c>
   1a7da:	82 c1       	rjmp	.+772    	; 0x1aae0 <lif_dir+0x320>
        return;

    vol = (char *)LIF->VOL.Label;
    if(!vol[0])
   1a7dc:	fc 01       	movw	r30, r24
   1a7de:	86 a1       	ldd	r24, Z+38	; 0x26
   1a7e0:	88 23       	and	r24, r24
   1a7e2:	21 f0       	breq	.+8      	; 0x1a7ec <lif_dir+0x2c>

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return;

    vol = (char *)LIF->VOL.Label;
   1a7e4:	8f 01       	movw	r16, r30
   1a7e6:	0a 5d       	subi	r16, 0xDA	; 218
   1a7e8:	1f 4f       	sbci	r17, 0xFF	; 255
   1a7ea:	02 c0       	rjmp	.+4      	; 0x1a7f0 <lif_dir+0x30>
    if(!vol[0])
        vol = "<EMPTY>";
   1a7ec:	02 e7       	ldi	r16, 0x72	; 114
   1a7ee:	15 e1       	ldi	r17, 0x15	; 21

    printf("Volume:[%s] Date:[%s]\n", vol, lif_lifbcd2timestr(LIF->VOL.date));
   1a7f0:	88 89       	ldd	r24, Y+16	; 0x10
   1a7f2:	99 89       	ldd	r25, Y+17	; 0x11
   1a7f4:	87 5b       	subi	r24, 0xB7	; 183
   1a7f6:	9f 4f       	sbci	r25, 0xFF	; 255
   1a7f8:	0e 94 8b c7 	call	0x18f16	; 0x18f16 <lif_lifbcd2timestr>
   1a7fc:	9f 93       	push	r25
   1a7fe:	8f 93       	push	r24
   1a800:	1f 93       	push	r17
   1a802:	0f 93       	push	r16
   1a804:	81 e5       	ldi	r24, 0x51	; 81
   1a806:	99 e3       	ldi	r25, 0x39	; 57
   1a808:	1f 92       	push	r1
   1a80a:	9f 93       	push	r25
   1a80c:	8f 93       	push	r24
   1a80e:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    
    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
   1a812:	81 e1       	ldi	r24, 0x11	; 17
   1a814:	99 e3       	ldi	r25, 0x39	; 57
   1a816:	1f 92       	push	r1
   1a818:	9f 93       	push	r25
   1a81a:	8f 93       	push	r24
   1a81c:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1a820:	0f b6       	in	r0, 0x3f	; 63
   1a822:	f8 94       	cli
   1a824:	de bf       	out	0x3e, r29	; 62
   1a826:	0f be       	out	0x3f, r0	; 63
   1a828:	cd bf       	out	0x3d, r28	; 61
    long bytes;
    lif_t *LIF;
    int index = 0;
    char *vol;

    int warn = ' ';
   1a82a:	60 e2       	ldi	r22, 0x20	; 32
   1a82c:	96 2e       	mov	r9, r22
MEMSPACE
void lif_dir(char *lifimagename)
{
    long bytes;
    lif_t *LIF;
    int index = 0;
   1a82e:	00 e0       	ldi	r16, 0x00	; 0
   1a830:	10 e0       	ldi	r17, 0x00	; 0

        if(!lif_readdirindex(LIF,index))
            break;


        if(LIF->DIR.FileType == 0xffff)
   1a832:	88 89       	ldd	r24, Y+16	; 0x10
   1a834:	99 89       	ldd	r25, Y+17	; 0x11
   1a836:	86 5a       	subi	r24, 0xA6	; 166
   1a838:	9f 4f       	sbci	r25, 0xFF	; 255
   1a83a:	9c 83       	std	Y+4, r25	; 0x04
   1a83c:	8b 83       	std	Y+3, r24	; 0x03
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   1a83e:	e8 89       	ldd	r30, Y+16	; 0x10
   1a840:	f9 89       	ldd	r31, Y+17	; 0x11
   1a842:	e0 5a       	subi	r30, 0xA0	; 160
   1a844:	ff 4f       	sbci	r31, 0xFF	; 255
   1a846:	fb 87       	std	Y+11, r31	; 0x0b
   1a848:	ea 87       	std	Y+10, r30	; 0x0a

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1a84a:	28 89       	ldd	r18, Y+16	; 0x10
   1a84c:	39 89       	ldd	r19, Y+17	; 0x11
   1a84e:	24 59       	subi	r18, 0x94	; 148
   1a850:	3f 4f       	sbci	r19, 0xFF	; 255
   1a852:	3d 87       	std	Y+13, r19	; 0x0d
   1a854:	2c 87       	std	Y+12, r18	; 0x0c
            else
            {
                warn = '!';
                if(debuglevel & 0x400)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n", 
   1a856:	88 89       	ldd	r24, Y+16	; 0x10
   1a858:	99 89       	ldd	r25, Y+17	; 0x11
   1a85a:	81 5b       	subi	r24, 0xB1	; 177
   1a85c:	9f 4f       	sbci	r25, 0xFF	; 255
   1a85e:	9a 83       	std	Y+2, r25	; 0x02
   1a860:	89 83       	std	Y+1, r24	; 0x01
   1a862:	85 ec       	ldi	r24, 0xC5	; 197
   1a864:	98 e3       	ldi	r25, 0x38	; 56
   1a866:	3c 01       	movw	r6, r24
   1a868:	81 2c       	mov	r8, r1
            }
        }


        // name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n", 
   1a86a:	e8 89       	ldd	r30, Y+16	; 0x10
   1a86c:	f9 89       	ldd	r31, Y+17	; 0x11
   1a86e:	ec 59       	subi	r30, 0x9C	; 156
   1a870:	ff 4f       	sbci	r31, 0xFF	; 255
   1a872:	ff 87       	std	Y+15, r31	; 0x0f
   1a874:	ee 87       	std	Y+14, r30	; 0x0e
   1a876:	28 89       	ldd	r18, Y+16	; 0x10
   1a878:	39 89       	ldd	r19, Y+17	; 0x11
   1a87a:	22 59       	subi	r18, 0x92	; 146
   1a87c:	3f 4f       	sbci	r19, 0xFF	; 255
   1a87e:	3e 83       	std	Y+6, r19	; 0x06
   1a880:	2d 83       	std	Y+5, r18	; 0x05
   1a882:	a8 88       	ldd	r10, Y+16	; 0x10
   1a884:	b9 88       	ldd	r11, Y+17	; 0x11
   1a886:	3c e5       	ldi	r19, 0x5C	; 92
   1a888:	a3 0e       	add	r10, r19
   1a88a:	b1 1c       	adc	r11, r1
   1a88c:	85 e9       	ldi	r24, 0x95	; 149
   1a88e:	98 e3       	ldi	r25, 0x38	; 56
   1a890:	9c 01       	movw	r18, r24
   1a892:	40 e0       	ldi	r20, 0x00	; 0
   1a894:	2f 83       	std	Y+7, r18	; 0x07
   1a896:	38 87       	std	Y+8, r19	; 0x08
   1a898:	49 87       	std	Y+9, r20	; 0x09
    
    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
    while(1)
    {

        if(!lif_readdirindex(LIF,index))
   1a89a:	b8 01       	movw	r22, r16
   1a89c:	88 89       	ldd	r24, Y+16	; 0x10
   1a89e:	99 89       	ldd	r25, Y+17	; 0x11
   1a8a0:	18 d8       	rcall	.-4048   	; 0x198d2 <lif_readdirindex>
   1a8a2:	89 2b       	or	r24, r25
   1a8a4:	09 f4       	brne	.+2      	; 0x1a8a8 <lif_dir+0xe8>
   1a8a6:	9d c0       	rjmp	.+314    	; 0x1a9e2 <lif_dir+0x222>
            break;


        if(LIF->DIR.FileType == 0xffff)
   1a8a8:	eb 81       	ldd	r30, Y+3	; 0x03
   1a8aa:	fc 81       	ldd	r31, Y+4	; 0x04
   1a8ac:	20 81       	ld	r18, Z
   1a8ae:	31 81       	ldd	r19, Z+1	; 0x01
   1a8b0:	2f 3f       	cpi	r18, 0xFF	; 255
   1a8b2:	ff ef       	ldi	r31, 0xFF	; 255
   1a8b4:	3f 07       	cpc	r19, r31
   1a8b6:	09 f4       	brne	.+2      	; 0x1a8ba <lif_dir+0xfa>
   1a8b8:	94 c0       	rjmp	.+296    	; 0x1a9e2 <lif_dir+0x222>
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   1a8ba:	ea 85       	ldd	r30, Y+10	; 0x0a
   1a8bc:	fb 85       	ldd	r31, Y+11	; 0x0b
   1a8be:	80 81       	ld	r24, Z
   1a8c0:	91 81       	ldd	r25, Z+1	; 0x01
   1a8c2:	a2 81       	ldd	r26, Z+2	; 0x02
   1a8c4:	b3 81       	ldd	r27, Z+3	; 0x03
   1a8c6:	cc 24       	eor	r12, r12
   1a8c8:	d8 2e       	mov	r13, r24
   1a8ca:	e9 2e       	mov	r14, r25
   1a8cc:	fa 2e       	mov	r15, r26

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
   1a8ce:	2c 7f       	andi	r18, 0xFC	; 252
   1a8d0:	20 31       	cpi	r18, 0x10	; 16
   1a8d2:	30 4e       	sbci	r19, 0xE0	; 224
   1a8d4:	09 f0       	breq	.+2      	; 0x1a8d8 <lif_dir+0x118>
   1a8d6:	4b c0       	rjmp	.+150    	; 0x1a96e <lif_dir+0x1ae>
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1a8d8:	ec 85       	ldd	r30, Y+12	; 0x0c
   1a8da:	fd 85       	ldd	r31, Y+13	; 0x0d
   1a8dc:	20 81       	ld	r18, Z
   1a8de:	31 81       	ldd	r19, Z+1	; 0x01
   1a8e0:	21 15       	cp	r18, r1
   1a8e2:	31 05       	cpc	r19, r1
   1a8e4:	a9 f0       	breq	.+42     	; 0x1a910 <lif_dir+0x150>
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a8e6:	19 01       	movw	r2, r18
   1a8e8:	41 2c       	mov	r4, r1
   1a8ea:	51 2c       	mov	r5, r1
   1a8ec:	77 27       	eor	r23, r23
   1a8ee:	65 2d       	mov	r22, r5
   1a8f0:	54 2d       	mov	r21, r4
   1a8f2:	43 2d       	mov	r20, r3
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a8f4:	22 23       	and	r18, r18
   1a8f6:	21 f0       	breq	.+8      	; 0x1a900 <lif_dir+0x140>
        ++sectors;
   1a8f8:	4f 5f       	subi	r20, 0xFF	; 255
   1a8fa:	5f 4f       	sbci	r21, 0xFF	; 255
   1a8fc:	6f 4f       	sbci	r22, 0xFF	; 255
   1a8fe:	7f 4f       	sbci	r23, 0xFF	; 255

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1a900:	84 17       	cp	r24, r20
   1a902:	95 07       	cpc	r25, r21
   1a904:	a6 07       	cpc	r26, r22
   1a906:	b7 07       	cpc	r27, r23
   1a908:	19 f4       	brne	.+6      	; 0x1a910 <lif_dir+0x150>
            {
                bytes = LIF->DIR.FileBytes;
   1a90a:	72 01       	movw	r14, r4
   1a90c:	61 01       	movw	r12, r2
   1a90e:	2f c0       	rjmp	.+94     	; 0x1a96e <lif_dir+0x1ae>
            }
            else
            {
                warn = '!';
                if(debuglevel & 0x400)
   1a910:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <debuglevel>
   1a914:	50 91 be 01 	lds	r21, 0x01BE	; 0x8001be <debuglevel+0x1>
   1a918:	52 ff       	sbrs	r21, 2
   1a91a:	27 c0       	rjmp	.+78     	; 0x1a96a <lif_dir+0x1aa>
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a91c:	19 01       	movw	r2, r18
   1a91e:	41 2c       	mov	r4, r1
   1a920:	51 2c       	mov	r5, r1
   1a922:	77 27       	eor	r23, r23
   1a924:	65 2d       	mov	r22, r5
   1a926:	54 2d       	mov	r21, r4
   1a928:	43 2d       	mov	r20, r3
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a92a:	22 23       	and	r18, r18
   1a92c:	21 f0       	breq	.+8      	; 0x1a936 <lif_dir+0x176>
        ++sectors;
   1a92e:	4f 5f       	subi	r20, 0xFF	; 255
   1a930:	5f 4f       	sbci	r21, 0xFF	; 255
   1a932:	6f 4f       	sbci	r22, 0xFF	; 255
   1a934:	7f 4f       	sbci	r23, 0xFF	; 255
            else
            {
                warn = '!';
                if(debuglevel & 0x400)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n", 
   1a936:	bf 93       	push	r27
   1a938:	af 93       	push	r26
   1a93a:	9f 93       	push	r25
   1a93c:	8f 93       	push	r24
   1a93e:	7f 93       	push	r23
   1a940:	6f 93       	push	r22
   1a942:	5f 93       	push	r21
   1a944:	4f 93       	push	r20
   1a946:	1f 92       	push	r1
   1a948:	1f 92       	push	r1
   1a94a:	3f 92       	push	r3
   1a94c:	2f 92       	push	r2
   1a94e:	fa 81       	ldd	r31, Y+2	; 0x02
   1a950:	ff 93       	push	r31
   1a952:	29 81       	ldd	r18, Y+1	; 0x01
   1a954:	2f 93       	push	r18
   1a956:	1f 92       	push	r1
   1a958:	7f 92       	push	r7
   1a95a:	6f 92       	push	r6
   1a95c:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1a960:	0f b6       	in	r0, 0x3f	; 63
   1a962:	f8 94       	cli
   1a964:	de bf       	out	0x3e, r29	; 62
   1a966:	0f be       	out	0x3f, r0	; 63
   1a968:	cd bf       	out	0x3d, r28	; 61
            {
                bytes = LIF->DIR.FileBytes;
            }
            else
            {
                warn = '!';
   1a96a:	81 e2       	ldi	r24, 0x21	; 33
   1a96c:	98 2e       	mov	r9, r24
            }
        }


        // name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n", 
   1a96e:	8e 85       	ldd	r24, Y+14	; 0x0e
   1a970:	9f 85       	ldd	r25, Y+15	; 0x0f
   1a972:	0e 94 8b c7 	call	0x18f16	; 0x18f16 <lif_lifbcd2timestr>
   1a976:	ed 81       	ldd	r30, Y+5	; 0x05
   1a978:	fe 81       	ldd	r31, Y+6	; 0x06
   1a97a:	a0 81       	ld	r26, Z
   1a97c:	b1 81       	ldd	r27, Z+1	; 0x01
   1a97e:	f5 01       	movw	r30, r10
   1a980:	60 81       	ld	r22, Z
   1a982:	71 81       	ldd	r23, Z+1	; 0x01
   1a984:	52 80       	ldd	r5, Z+2	; 0x02
   1a986:	43 80       	ldd	r4, Z+3	; 0x03
   1a988:	eb 81       	ldd	r30, Y+3	; 0x03
   1a98a:	fc 81       	ldd	r31, Y+4	; 0x04
   1a98c:	40 81       	ld	r20, Z
   1a98e:	51 81       	ldd	r21, Z+1	; 0x01
   1a990:	41 15       	cp	r20, r1
   1a992:	51 05       	cpc	r21, r1
   1a994:	19 f0       	breq	.+6      	; 0x1a99c <lif_dir+0x1dc>
   1a996:	29 81       	ldd	r18, Y+1	; 0x01
   1a998:	3a 81       	ldd	r19, Y+2	; 0x02
   1a99a:	02 c0       	rjmp	.+4      	; 0x1a9a0 <lif_dir+0x1e0>
   1a99c:	2f ec       	ldi	r18, 0xCF	; 207
   1a99e:	35 e1       	ldi	r19, 0x15	; 21
   1a9a0:	9f 93       	push	r25
   1a9a2:	8f 93       	push	r24
   1a9a4:	bf 93       	push	r27
   1a9a6:	af 93       	push	r26
   1a9a8:	1f 92       	push	r1
   1a9aa:	9f 92       	push	r9
   1a9ac:	ff 92       	push	r15
   1a9ae:	ef 92       	push	r14
   1a9b0:	df 92       	push	r13
   1a9b2:	cf 92       	push	r12
   1a9b4:	4f 92       	push	r4
   1a9b6:	5f 92       	push	r5
   1a9b8:	7f 93       	push	r23
   1a9ba:	6f 93       	push	r22
   1a9bc:	5f 93       	push	r21
   1a9be:	4f 93       	push	r20
   1a9c0:	3f 93       	push	r19
   1a9c2:	2f 93       	push	r18
   1a9c4:	1f 92       	push	r1
   1a9c6:	f8 85       	ldd	r31, Y+8	; 0x08
   1a9c8:	ff 93       	push	r31
   1a9ca:	2f 81       	ldd	r18, Y+7	; 0x07
   1a9cc:	2f 93       	push	r18
   1a9ce:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
            (long)bytes, 
            warn,
            (int)LIF->DIR.SectorSize,
            lif_lifbcd2timestr(LIF->DIR.date));

        ++index;
   1a9d2:	0f 5f       	subi	r16, 0xFF	; 255
   1a9d4:	1f 4f       	sbci	r17, 0xFF	; 255
    }   
   1a9d6:	0f b6       	in	r0, 0x3f	; 63
   1a9d8:	f8 94       	cli
   1a9da:	de bf       	out	0x3e, r29	; 62
   1a9dc:	0f be       	out	0x3f, r0	; 63
   1a9de:	cd bf       	out	0x3d, r28	; 61
   1a9e0:	5c cf       	rjmp	.-328    	; 0x1a89a <lif_dir+0xda>

    printf("\n");
   1a9e2:	83 e9       	ldi	r24, 0x93	; 147
   1a9e4:	98 e3       	ldi	r25, 0x38	; 56
   1a9e6:	1f 92       	push	r1
   1a9e8:	9f 93       	push	r25
   1a9ea:	8f 93       	push	r24
   1a9ec:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    printf("%8ld Files\n", (long)LIF->files);
   1a9f0:	e8 89       	ldd	r30, Y+16	; 0x10
   1a9f2:	f9 89       	ldd	r31, Y+17	; 0x11
   1a9f4:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a9f6:	95 8d       	ldd	r25, Z+29	; 0x1d
   1a9f8:	09 2e       	mov	r0, r25
   1a9fa:	00 0c       	add	r0, r0
   1a9fc:	aa 0b       	sbc	r26, r26
   1a9fe:	bb 0b       	sbc	r27, r27
   1aa00:	bf 93       	push	r27
   1aa02:	af 93       	push	r26
   1aa04:	9f 93       	push	r25
   1aa06:	8f 93       	push	r24
   1aa08:	87 e8       	ldi	r24, 0x87	; 135
   1aa0a:	98 e3       	ldi	r25, 0x38	; 56
   1aa0c:	1f 92       	push	r1
   1aa0e:	9f 93       	push	r25
   1aa10:	8f 93       	push	r24
   1aa12:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    printf("%8ld Purged\n", (long)LIF->purged);
   1aa16:	e8 89       	ldd	r30, Y+16	; 0x10
   1aa18:	f9 89       	ldd	r31, Y+17	; 0x11
   1aa1a:	86 8d       	ldd	r24, Z+30	; 0x1e
   1aa1c:	97 8d       	ldd	r25, Z+31	; 0x1f
   1aa1e:	09 2e       	mov	r0, r25
   1aa20:	00 0c       	add	r0, r0
   1aa22:	aa 0b       	sbc	r26, r26
   1aa24:	bb 0b       	sbc	r27, r27
   1aa26:	bf 93       	push	r27
   1aa28:	af 93       	push	r26
   1aa2a:	9f 93       	push	r25
   1aa2c:	8f 93       	push	r24
   1aa2e:	8a e7       	ldi	r24, 0x7A	; 122
   1aa30:	98 e3       	ldi	r25, 0x38	; 56
   1aa32:	1f 92       	push	r1
   1aa34:	9f 93       	push	r25
   1aa36:	8f 93       	push	r24
   1aa38:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    printf("%8ld Dir  start\n",   (long)LIF->VOL.DirStartSector);
   1aa3c:	e8 89       	ldd	r30, Y+16	; 0x10
   1aa3e:	f9 89       	ldd	r31, Y+17	; 0x11
   1aa40:	80 a9       	ldd	r24, Z+48	; 0x30
   1aa42:	8f 93       	push	r24
   1aa44:	87 a5       	ldd	r24, Z+47	; 0x2f
   1aa46:	8f 93       	push	r24
   1aa48:	86 a5       	ldd	r24, Z+46	; 0x2e
   1aa4a:	8f 93       	push	r24
   1aa4c:	85 a5       	ldd	r24, Z+45	; 0x2d
   1aa4e:	8f 93       	push	r24
   1aa50:	89 e6       	ldi	r24, 0x69	; 105
   1aa52:	98 e3       	ldi	r25, 0x38	; 56
   1aa54:	1f 92       	push	r1
   1aa56:	9f 93       	push	r25
   1aa58:	8f 93       	push	r24
   1aa5a:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    printf("%8ld Dir  sectors\n", (long)LIF->VOL.DirSectors);
   1aa5e:	e8 89       	ldd	r30, Y+16	; 0x10
   1aa60:	f9 89       	ldd	r31, Y+17	; 0x11
   1aa62:	80 ad       	ldd	r24, Z+56	; 0x38
   1aa64:	8f 93       	push	r24
   1aa66:	87 a9       	ldd	r24, Z+55	; 0x37
   1aa68:	8f 93       	push	r24
   1aa6a:	86 a9       	ldd	r24, Z+54	; 0x36
   1aa6c:	8f 93       	push	r24
   1aa6e:	85 a9       	ldd	r24, Z+53	; 0x35
   1aa70:	8f 93       	push	r24
   1aa72:	86 e5       	ldi	r24, 0x56	; 86
   1aa74:	98 e3       	ldi	r25, 0x38	; 56
   1aa76:	1f 92       	push	r1
   1aa78:	9f 93       	push	r25
   1aa7a:	8f 93       	push	r24
   1aa7c:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
   1aa80:	e8 89       	ldd	r30, Y+16	; 0x10
   1aa82:	f9 89       	ldd	r31, Y+17	; 0x11
   1aa84:	87 89       	ldd	r24, Z+23	; 0x17
   1aa86:	8f 93       	push	r24
   1aa88:	86 89       	ldd	r24, Z+22	; 0x16
   1aa8a:	8f 93       	push	r24
   1aa8c:	85 89       	ldd	r24, Z+21	; 0x15
   1aa8e:	8f 93       	push	r24
   1aa90:	84 89       	ldd	r24, Z+20	; 0x14
   1aa92:	8f 93       	push	r24
   1aa94:	83 e4       	ldi	r24, 0x43	; 67
   1aa96:	98 e3       	ldi	r25, 0x38	; 56
   1aa98:	1f 92       	push	r1
   1aa9a:	9f 93       	push	r25
   1aa9c:	8f 93       	push	r24
   1aa9e:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    printf("%8ld Free sectors\n", (long)LIF->freesectors);
   1aaa2:	0f b6       	in	r0, 0x3f	; 63
   1aaa4:	f8 94       	cli
   1aaa6:	de bf       	out	0x3e, r29	; 62
   1aaa8:	0f be       	out	0x3f, r0	; 63
   1aaaa:	cd bf       	out	0x3d, r28	; 61
   1aaac:	e8 89       	ldd	r30, Y+16	; 0x10
   1aaae:	f9 89       	ldd	r31, Y+17	; 0x11
   1aab0:	83 8d       	ldd	r24, Z+27	; 0x1b
   1aab2:	8f 93       	push	r24
   1aab4:	82 8d       	ldd	r24, Z+26	; 0x1a
   1aab6:	8f 93       	push	r24
   1aab8:	81 8d       	ldd	r24, Z+25	; 0x19
   1aaba:	8f 93       	push	r24
   1aabc:	80 8d       	ldd	r24, Z+24	; 0x18
   1aabe:	8f 93       	push	r24
   1aac0:	80 e3       	ldi	r24, 0x30	; 48
   1aac2:	98 e3       	ldi	r25, 0x38	; 56
   1aac4:	1f 92       	push	r1
   1aac6:	9f 93       	push	r25
   1aac8:	8f 93       	push	r24
   1aaca:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1aace:	88 89       	ldd	r24, Y+16	; 0x10
   1aad0:	99 89       	ldd	r25, Y+17	; 0x11
   1aad2:	0e 94 e8 cb 	call	0x197d0	; 0x197d0 <lif_close_volume>
   1aad6:	0f b6       	in	r0, 0x3f	; 63
   1aad8:	f8 94       	cli
   1aada:	de bf       	out	0x3e, r29	; 62
   1aadc:	0f be       	out	0x3f, r0	; 63
   1aade:	cd bf       	out	0x3d, r28	; 61
    printf("%8ld Dir  sectors\n", (long)LIF->VOL.DirSectors);
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
    printf("%8ld Free sectors\n", (long)LIF->freesectors);

    lif_closedir(LIF);
}
   1aae0:	61 96       	adiw	r28, 0x11	; 17
   1aae2:	e2 e1       	ldi	r30, 0x12	; 18
   1aae4:	0c 94 0f e6 	jmp	0x1cc1e	; 0x1cc1e <__epilogue_restores__>

0001aae8 <lif_find_file>:
/// @param[in] *LIF: directory pointer
/// @param[in] liflabel: File name in LIF image
/// @return Directory index of record
MEMSPACE
int lif_find_file(lif_t *LIF, char *liflabel)
{
   1aae8:	a0 e0       	ldi	r26, 0x00	; 0
   1aaea:	b0 e0       	ldi	r27, 0x00	; 0
   1aaec:	ea e7       	ldi	r30, 0x7A	; 122
   1aaee:	f5 ed       	ldi	r31, 0xD5	; 213
   1aaf0:	0c 94 fb e5 	jmp	0x1cbf6	; 0x1cbf6 <__prologue_saves__+0x10>
   1aaf4:	7c 01       	movw	r14, r24
   1aaf6:	16 2f       	mov	r17, r22
   1aaf8:	07 2f       	mov	r16, r23
    int index;

    if( !lif_checkname(liflabel) )
   1aafa:	86 2f       	mov	r24, r22
   1aafc:	97 2f       	mov	r25, r23
   1aafe:	0e 94 5c c4 	call	0x188b8	; 0x188b8 <lif_checkname>
   1ab02:	89 2b       	or	r24, r25
   1ab04:	49 f4       	brne	.+18     	; 0x1ab18 <lif_find_file+0x30>
    {
        if(debuglevel & 1)
   1ab06:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1ab0a:	80 ff       	sbrs	r24, 0
   1ab0c:	48 c0       	rjmp	.+144    	; 0x1ab9e <lif_find_file+0xb6>
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
   1ab0e:	0f 93       	push	r16
   1ab10:	1f 93       	push	r17
   1ab12:	89 e0       	ldi	r24, 0x09	; 9
   1ab14:	98 e3       	ldi	r25, 0x38	; 56
   1ab16:	13 c0       	rjmp	.+38     	; 0x1ab3e <lif_find_file+0x56>
        return(-1);
    }
    if(strlen(liflabel) > 10)
   1ab18:	a1 2f       	mov	r26, r17
   1ab1a:	b0 2f       	mov	r27, r16
   1ab1c:	fd 01       	movw	r30, r26
   1ab1e:	01 90       	ld	r0, Z+
   1ab20:	00 20       	and	r0, r0
   1ab22:	e9 f7       	brne	.-6      	; 0x1ab1e <lif_find_file+0x36>
   1ab24:	31 97       	sbiw	r30, 0x01	; 1
   1ab26:	ea 1b       	sub	r30, r26
   1ab28:	fb 0b       	sbc	r31, r27
   1ab2a:	3b 97       	sbiw	r30, 0x0b	; 11
   1ab2c:	98 f0       	brcs	.+38     	; 0x1ab54 <lif_find_file+0x6c>
    {
        if(debuglevel & 1)
   1ab2e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1ab32:	80 ff       	sbrs	r24, 0
   1ab34:	34 c0       	rjmp	.+104    	; 0x1ab9e <lif_find_file+0xb6>
            printf("lif_find_file:[%s] liflabel too big\n", liflabel);
   1ab36:	0f 93       	push	r16
   1ab38:	1f 93       	push	r17
   1ab3a:	84 ee       	ldi	r24, 0xE4	; 228
   1ab3c:	97 e3       	ldi	r25, 0x37	; 55
   1ab3e:	1f 92       	push	r1
   1ab40:	9f 93       	push	r25
   1ab42:	8f 93       	push	r24
   1ab44:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1ab48:	0f 90       	pop	r0
   1ab4a:	0f 90       	pop	r0
   1ab4c:	0f 90       	pop	r0
   1ab4e:	0f 90       	pop	r0
   1ab50:	0f 90       	pop	r0
   1ab52:	25 c0       	rjmp	.+74     	; 0x1ab9e <lif_find_file+0xb6>
        return(-1);
    }

    if(LIF == NULL)
   1ab54:	e1 14       	cp	r14, r1
   1ab56:	f1 04       	cpc	r15, r1
   1ab58:	11 f1       	breq	.+68     	; 0x1ab9e <lif_find_file+0xb6>
   1ab5a:	c0 e0       	ldi	r28, 0x00	; 0
   1ab5c:	d0 e0       	ldi	r29, 0x00	; 0
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1ab5e:	67 01       	movw	r12, r14
   1ab60:	2a e5       	ldi	r18, 0x5A	; 90
   1ab62:	c2 0e       	add	r12, r18
   1ab64:	d1 1c       	adc	r13, r1
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1ab66:	57 01       	movw	r10, r14
   1ab68:	8f e4       	ldi	r24, 0x4F	; 79
   1ab6a:	a8 0e       	add	r10, r24
   1ab6c:	b1 1c       	adc	r11, r1
        return(-1);
    
    index = 0;
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
   1ab6e:	be 01       	movw	r22, r28
   1ab70:	c7 01       	movw	r24, r14
   1ab72:	0e 94 69 cc 	call	0x198d2	; 0x198d2 <lif_readdirindex>
   1ab76:	89 2b       	or	r24, r25
   1ab78:	91 f0       	breq	.+36     	; 0x1ab9e <lif_find_file+0xb6>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1ab7a:	f6 01       	movw	r30, r12
   1ab7c:	80 81       	ld	r24, Z
   1ab7e:	91 81       	ldd	r25, Z+1	; 0x01
   1ab80:	8f 3f       	cpi	r24, 0xFF	; 255
   1ab82:	ff ef       	ldi	r31, 0xFF	; 255
   1ab84:	9f 07       	cpc	r25, r31
   1ab86:	59 f0       	breq	.+22     	; 0x1ab9e <lif_find_file+0xb6>
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1ab88:	89 2b       	or	r24, r25
   1ab8a:	39 f0       	breq	.+14     	; 0x1ab9a <lif_find_file+0xb2>
   1ab8c:	61 2f       	mov	r22, r17
   1ab8e:	70 2f       	mov	r23, r16
   1ab90:	c5 01       	movw	r24, r10
   1ab92:	0e 94 ec 32 	call	0x65d8	; 0x65d8 <strcasecmp>
   1ab96:	89 2b       	or	r24, r25
   1ab98:	29 f0       	breq	.+10     	; 0x1aba4 <lif_find_file+0xbc>
            break;
        ++index;
   1ab9a:	21 96       	adiw	r28, 0x01	; 1
   1ab9c:	e8 cf       	rjmp	.-48     	; 0x1ab6e <lif_find_file+0x86>

    if( !lif_checkname(liflabel) )
    {
        if(debuglevel & 1)
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
        return(-1);
   1ab9e:	8f ef       	ldi	r24, 0xFF	; 255
   1aba0:	9f ef       	ldi	r25, 0xFF	; 255
   1aba2:	01 c0       	rjmp	.+2      	; 0x1aba6 <lif_find_file+0xbe>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1aba4:	ce 01       	movw	r24, r28
            break;
        ++index;
    }
    return(index);
}
   1aba6:	cd b7       	in	r28, 0x3d	; 61
   1aba8:	de b7       	in	r29, 0x3e	; 62
   1abaa:	ea e0       	ldi	r30, 0x0A	; 10
   1abac:	0c 94 17 e6 	jmp	0x1cc2e	; 0x1cc2e <__epilogue_restores__+0x10>

0001abb0 <lif_e010_pad_sector>:
/// @param[in] offset: sector offset
/// @param[in] wbuf: E010 PAD data
/// @return size of E010 PAD data
MEMSPACE
int lif_e010_pad_sector(long offset, uint8_t *wbuf)
{
   1abb0:	a0 e0       	ldi	r26, 0x00	; 0
   1abb2:	b0 e0       	ldi	r27, 0x00	; 0
   1abb4:	ee ed       	ldi	r30, 0xDE	; 222
   1abb6:	f5 ed       	ldi	r31, 0xD5	; 213
   1abb8:	0c 94 fd e5 	jmp	0x1cbfa	; 0x1cbfa <__prologue_saves__+0x14>
   1abbc:	6b 01       	movw	r12, r22
   1abbe:	7c 01       	movw	r14, r24
   1abc0:	8a 01       	movw	r16, r20
    int ind;
    int pos,rem;
    
    // Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
   1abc2:	20 e0       	ldi	r18, 0x00	; 0
   1abc4:	31 e0       	ldi	r19, 0x01	; 1
   1abc6:	40 e0       	ldi	r20, 0x00	; 0
   1abc8:	50 e0       	ldi	r21, 0x00	; 0
   1abca:	0e 94 93 e5 	call	0x1cb26	; 0x1cb26 <__divmodsi4>
    if(!pos)
   1abce:	61 15       	cp	r22, r1
   1abd0:	71 05       	cpc	r23, r1
   1abd2:	e1 f1       	breq	.+120    	; 0x1ac4c <lif_e010_pad_sector+0x9c>
        return(0);

    // Number of bytes free in this sector
    rem = (long)LIF_SECTOR_SIZE - (long)pos;
   1abd4:	c0 e0       	ldi	r28, 0x00	; 0
   1abd6:	d1 e0       	ldi	r29, 0x01	; 1
   1abd8:	c6 1b       	sub	r28, r22
   1abda:	d7 0b       	sbc	r29, r23

    // Bytes written to wbuf
    ind = 0;
    // PAD
    wbuf[ind++] = 0xEF;
   1abdc:	f8 01       	movw	r30, r16
   1abde:	8f ee       	ldi	r24, 0xEF	; 239
   1abe0:	81 93       	st	Z+, r24
    while(ind<rem)
        wbuf[ind++] = 0xff;
   1abe2:	2f ef       	ldi	r18, 0xFF	; 255

    // Bytes written to wbuf
    ind = 0;
    // PAD
    wbuf[ind++] = 0xEF;
    while(ind<rem)
   1abe4:	cf 01       	movw	r24, r30
   1abe6:	80 1b       	sub	r24, r16
   1abe8:	91 0b       	sbc	r25, r17
   1abea:	8c 17       	cp	r24, r28
   1abec:	9d 07       	cpc	r25, r29
   1abee:	14 f4       	brge	.+4      	; 0x1abf4 <lif_e010_pad_sector+0x44>
        wbuf[ind++] = 0xff;
   1abf0:	21 93       	st	Z+, r18
   1abf2:	f8 cf       	rjmp	.-16     	; 0x1abe4 <lif_e010_pad_sector+0x34>
   1abf4:	1c 16       	cp	r1, r28
   1abf6:	1d 06       	cpc	r1, r29
   1abf8:	14 f0       	brlt	.+4      	; 0x1abfe <lif_e010_pad_sector+0x4e>
   1abfa:	c1 e0       	ldi	r28, 0x01	; 1
   1abfc:	d0 e0       	ldi	r29, 0x00	; 0

    pos = (offset + (long) ind)  % (long) LIF_SECTOR_SIZE;
   1abfe:	ce 01       	movw	r24, r28
   1ac00:	0d 2e       	mov	r0, r29
   1ac02:	00 0c       	add	r0, r0
   1ac04:	aa 0b       	sbc	r26, r26
   1ac06:	bb 0b       	sbc	r27, r27
   1ac08:	bc 01       	movw	r22, r24
   1ac0a:	cd 01       	movw	r24, r26
   1ac0c:	6c 0d       	add	r22, r12
   1ac0e:	7d 1d       	adc	r23, r13
   1ac10:	8e 1d       	adc	r24, r14
   1ac12:	9f 1d       	adc	r25, r15
   1ac14:	20 e0       	ldi	r18, 0x00	; 0
   1ac16:	31 e0       	ldi	r19, 0x01	; 1
   1ac18:	40 e0       	ldi	r20, 0x00	; 0
   1ac1a:	50 e0       	ldi	r21, 0x00	; 0
   1ac1c:	0e 94 93 e5 	call	0x1cb26	; 0x1cb26 <__divmodsi4>
    // NEW SECTOR
    // Debugging make sure we are at sector boundry
    if(pos)
   1ac20:	61 15       	cp	r22, r1
   1ac22:	71 05       	cpc	r23, r1
   1ac24:	b1 f0       	breq	.+44     	; 0x1ac52 <lif_e010_pad_sector+0xa2>
    {
        if(debuglevel & 1)
   1ac26:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1ac2a:	20 ff       	sbrs	r18, 0
   1ac2c:	14 c0       	rjmp	.+40     	; 0x1ac56 <lif_e010_pad_sector+0xa6>
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
   1ac2e:	7f 93       	push	r23
   1ac30:	6f 93       	push	r22
   1ac32:	8b ea       	ldi	r24, 0xAB	; 171
   1ac34:	97 e3       	ldi	r25, 0x37	; 55
   1ac36:	1f 92       	push	r1
   1ac38:	9f 93       	push	r25
   1ac3a:	8f 93       	push	r24
   1ac3c:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1ac40:	0f 90       	pop	r0
   1ac42:	0f 90       	pop	r0
   1ac44:	0f 90       	pop	r0
   1ac46:	0f 90       	pop	r0
   1ac48:	0f 90       	pop	r0
   1ac4a:	05 c0       	rjmp	.+10     	; 0x1ac56 <lif_e010_pad_sector+0xa6>
    int pos,rem;
    
    // Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
    if(!pos)
        return(0);
   1ac4c:	80 e0       	ldi	r24, 0x00	; 0
   1ac4e:	90 e0       	ldi	r25, 0x00	; 0
   1ac50:	04 c0       	rjmp	.+8      	; 0x1ac5a <lif_e010_pad_sector+0xaa>
   1ac52:	ce 01       	movw	r24, r28
   1ac54:	02 c0       	rjmp	.+4      	; 0x1ac5a <lif_e010_pad_sector+0xaa>
    // Debugging make sure we are at sector boundry
    if(pos)
    {
        if(debuglevel & 1)
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
        return(-1);
   1ac56:	8f ef       	ldi	r24, 0xFF	; 255
   1ac58:	9f ef       	ldi	r25, 0xFF	; 255
    }
    return(ind);
}
   1ac5a:	cd b7       	in	r28, 0x3d	; 61
   1ac5c:	de b7       	in	r29, 0x3e	; 62
   1ac5e:	e8 e0       	ldi	r30, 0x08	; 8
   1ac60:	0c 94 19 e6 	jmp	0x1cc32	; 0x1cc32 <__epilogue_restores__+0x14>

0001ac64 <lif_ascii_string_to_e010>:
/// @param[in] offset: E010 data sector offset, only used in formatting wbuf with headers
/// @param[in] wbuf: E010 data result
/// @return size of E010 data
MEMSPACE
int lif_ascii_string_to_e010(char *str, long offset, uint8_t *wbuf)
{
   1ac64:	a0 e0       	ldi	r26, 0x00	; 0
   1ac66:	b0 e0       	ldi	r27, 0x00	; 0
   1ac68:	e8 e3       	ldi	r30, 0x38	; 56
   1ac6a:	f6 ed       	ldi	r31, 0xD6	; 214
   1ac6c:	0c 94 f3 e5 	jmp	0x1cbe6	; 0x1cbe6 <__prologue_saves__>
   1ac70:	ec 01       	movw	r28, r24
   1ac72:	4a 01       	movw	r8, r20
   1ac74:	5b 01       	movw	r10, r22
   1ac76:	79 01       	movw	r14, r18
    int ind;
    int len;
    int pos,rem;
    
    // String size
    len = strlen(str);
   1ac78:	fc 01       	movw	r30, r24
   1ac7a:	01 90       	ld	r0, Z+
   1ac7c:	00 20       	and	r0, r0
   1ac7e:	e9 f7       	brne	.-6      	; 0x1ac7a <lif_ascii_string_to_e010+0x16>
   1ac80:	31 97       	sbiw	r30, 0x01	; 1
   1ac82:	6f 01       	movw	r12, r30
   1ac84:	c8 1a       	sub	r12, r24
   1ac86:	d9 0a       	sbc	r13, r25
    ind = 0;

    // Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
    // Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1ac88:	41 2c       	mov	r4, r1
   1ac8a:	51 2c       	mov	r5, r1
   1ac8c:	32 01       	movw	r6, r4
   1ac8e:	53 94       	inc	r5
   1ac90:	cb 01       	movw	r24, r22
   1ac92:	ba 01       	movw	r22, r20
   1ac94:	a3 01       	movw	r20, r6
   1ac96:	92 01       	movw	r18, r4
   1ac98:	0e 94 93 e5 	call	0x1cb26	; 0x1cb26 <__divmodsi4>
   1ac9c:	21 2c       	mov	r2, r1
   1ac9e:	33 24       	eor	r3, r3
   1aca0:	33 94       	inc	r3
   1aca2:	c1 01       	movw	r24, r2
   1aca4:	86 1b       	sub	r24, r22
   1aca6:	97 0b       	sbc	r25, r23

    /// We ALWAYS pad a sector if:
    ///   There is no room for a 0xdf single header 
    ///   - OR - 
    ///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
   1aca8:	86 30       	cpi	r24, 0x06	; 6
   1acaa:	91 05       	cpc	r25, r1
   1acac:	20 f0       	brcs	.+8      	; 0x1acb6 <lif_ascii_string_to_e010+0x52>
    ind = 0;

    // Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
    // Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1acae:	1c 01       	movw	r2, r24
    
    // String size
    len = strlen(str);

    // Output buffer index
    ind = 0;
   1acb0:	00 e0       	ldi	r16, 0x00	; 0
   1acb2:	10 e0       	ldi	r17, 0x00	; 0
   1acb4:	17 c0       	rjmp	.+46     	; 0x1ace4 <lif_ascii_string_to_e010+0x80>
    ///   There is no room for a 0xdf single header 
    ///   - OR - 
    ///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
    {
        ind = lif_e010_pad_sector(offset, wbuf);
   1acb6:	a7 01       	movw	r20, r14
   1acb8:	c5 01       	movw	r24, r10
   1acba:	b4 01       	movw	r22, r8
   1acbc:	79 df       	rcall	.-270    	; 0x1abb0 <lif_e010_pad_sector>
   1acbe:	8c 01       	movw	r16, r24
        if(ind < 0)
   1acc0:	97 fd       	sbrc	r25, 7
   1acc2:	84 c0       	rjmp	.+264    	; 0x1adcc <lif_ascii_string_to_e010+0x168>
            return(ind);

        // Compute the current offset in this sector
        pos = ((offset + ind) % (long) LIF_SECTOR_SIZE);
        // Number of bytes free in this sector
        rem = (long) LIF_SECTOR_SIZE - pos;
   1acc4:	09 2e       	mov	r0, r25
   1acc6:	00 0c       	add	r0, r0
   1acc8:	aa 0b       	sbc	r26, r26
   1acca:	bb 0b       	sbc	r27, r27
   1accc:	bc 01       	movw	r22, r24
   1acce:	cd 01       	movw	r24, r26
   1acd0:	68 0d       	add	r22, r8
   1acd2:	79 1d       	adc	r23, r9
   1acd4:	8a 1d       	adc	r24, r10
   1acd6:	9b 1d       	adc	r25, r11
   1acd8:	a3 01       	movw	r20, r6
   1acda:	92 01       	movw	r18, r4
   1acdc:	0e 94 93 e5 	call	0x1cb26	; 0x1cb26 <__divmodsi4>
   1ace0:	26 1a       	sub	r2, r22
   1ace2:	37 0a       	sbc	r3, r23
   1ace4:	f7 01       	movw	r30, r14
   1ace6:	e0 0f       	add	r30, r16
   1ace8:	f1 1f       	adc	r31, r17
   1acea:	0d 5f       	subi	r16, 0xFD	; 253
   1acec:	1f 4f       	sbci	r17, 0xFF	; 255
    }

    // Note: IMPORTANT we have >= 6 bytes!!!

    // Do not have to split, there is enough room
    if(rem >= (3 + len)) 
   1acee:	c6 01       	movw	r24, r12
   1acf0:	02 96       	adiw	r24, 0x02	; 2
   1acf2:	82 15       	cp	r24, r2
   1acf4:	93 05       	cpc	r25, r3
   1acf6:	84 f4       	brge	.+32     	; 0x1ad18 <lif_ascii_string_to_e010+0xb4>
    {

        // Write string in new sector
        // The full string + header will fit
        wbuf[ind++] = 0xDF;
   1acf8:	8f ed       	ldi	r24, 0xDF	; 223
   1acfa:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1acfc:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >> 8) & 0xff;
   1acfe:	d2 82       	std	Z+2, r13	; 0x02
   1ad00:	f7 01       	movw	r30, r14
   1ad02:	e0 0f       	add	r30, r16
   1ad04:	f1 1f       	adc	r31, r17
   1ad06:	cf 01       	movw	r24, r30
   1ad08:	8e 19       	sub	r24, r14
   1ad0a:	9f 09       	sbc	r25, r15
        // Write string
        while(*str)
   1ad0c:	29 91       	ld	r18, Y+
   1ad0e:	22 23       	and	r18, r18
   1ad10:	09 f4       	brne	.+2      	; 0x1ad14 <lif_ascii_string_to_e010+0xb0>
   1ad12:	5c c0       	rjmp	.+184    	; 0x1adcc <lif_ascii_string_to_e010+0x168>
            wbuf[ind++] = *str++;
   1ad14:	21 93       	st	Z+, r18
   1ad16:	f7 cf       	rjmp	.-18     	; 0x1ad06 <lif_ascii_string_to_e010+0xa2>

        // CURRENT SECTOR
        // String spans a sector , so split the string

        // 1st Split string header
        wbuf[ind++] = 0xCF;
   1ad18:	8f ec       	ldi	r24, 0xCF	; 207
   1ad1a:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1ad1c:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >>8) & 0xff;
   1ad1e:	d2 82       	std	Z+2, r13	; 0x02
   1ad20:	d7 01       	movw	r26, r14
   1ad22:	a0 0f       	add	r26, r16
   1ad24:	b1 1f       	adc	r27, r17
        // Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1ad26:	fe 01       	movw	r30, r28
   1ad28:	81 91       	ld	r24, Z+
   1ad2a:	81 11       	cpse	r24, r1
   1ad2c:	0e c0       	rjmp	.+28     	; 0x1ad4a <lif_ascii_string_to_e010+0xe6>
            wbuf[ind++] = *str++;

        // NEW SECTOR
        // Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
   1ad2e:	c8 01       	movw	r24, r16
   1ad30:	01 2e       	mov	r0, r17
   1ad32:	00 0c       	add	r0, r0
   1ad34:	aa 0b       	sbc	r26, r26
   1ad36:	bb 0b       	sbc	r27, r27
   1ad38:	bc 01       	movw	r22, r24
   1ad3a:	cd 01       	movw	r24, r26
   1ad3c:	68 0d       	add	r22, r8
   1ad3e:	79 1d       	adc	r23, r9
   1ad40:	8a 1d       	adc	r24, r10
   1ad42:	9b 1d       	adc	r25, r11
   1ad44:	61 11       	cpse	r22, r1
   1ad46:	09 c0       	rjmp	.+18     	; 0x1ad5a <lif_ascii_string_to_e010+0xf6>
   1ad48:	21 c0       	rjmp	.+66     	; 0x1ad8c <lif_ascii_string_to_e010+0x128>
        // 1st Split string header
        wbuf[ind++] = 0xCF;
        wbuf[ind++] = len & 0xff;
        wbuf[ind++] = (len >>8) & 0xff;
        // Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1ad4a:	02 15       	cp	r16, r2
   1ad4c:	13 05       	cpc	r17, r3
   1ad4e:	7c f7       	brge	.-34     	; 0x1ad2e <lif_ascii_string_to_e010+0xca>
            wbuf[ind++] = *str++;
   1ad50:	0f 5f       	subi	r16, 0xFF	; 255
   1ad52:	1f 4f       	sbci	r17, 0xFF	; 255
   1ad54:	8d 93       	st	X+, r24
   1ad56:	ef 01       	movw	r28, r30
   1ad58:	e6 cf       	rjmp	.-52     	; 0x1ad26 <lif_ascii_string_to_e010+0xc2>

        // NEW SECTOR
        // Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & 1)
   1ad5a:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1ad5e:	20 ff       	sbrs	r18, 0
   1ad60:	33 c0       	rjmp	.+102    	; 0x1adc8 <lif_ascii_string_to_e010+0x164>
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
   1ad62:	20 e0       	ldi	r18, 0x00	; 0
   1ad64:	31 e0       	ldi	r19, 0x01	; 1
   1ad66:	40 e0       	ldi	r20, 0x00	; 0
   1ad68:	50 e0       	ldi	r21, 0x00	; 0
   1ad6a:	0e 94 93 e5 	call	0x1cb26	; 0x1cb26 <__divmodsi4>
   1ad6e:	7f 93       	push	r23
   1ad70:	6f 93       	push	r22
   1ad72:	87 e8       	ldi	r24, 0x87	; 135
   1ad74:	97 e3       	ldi	r25, 0x37	; 55
   1ad76:	1f 92       	push	r1
   1ad78:	9f 93       	push	r25
   1ad7a:	8f 93       	push	r24
   1ad7c:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1ad80:	0f 90       	pop	r0
   1ad82:	0f 90       	pop	r0
   1ad84:	0f 90       	pop	r0
   1ad86:	0f 90       	pop	r0
   1ad88:	0f 90       	pop	r0
   1ad8a:	1e c0       	rjmp	.+60     	; 0x1adc8 <lif_ascii_string_to_e010+0x164>
            return(-1);
        }

        // Update remining string length
        len = strlen(str);
   1ad8c:	fe 01       	movw	r30, r28
   1ad8e:	01 90       	ld	r0, Z+
   1ad90:	00 20       	and	r0, r0
   1ad92:	e9 f7       	brne	.-6      	; 0x1ad8e <lif_ascii_string_to_e010+0x12a>
   1ad94:	31 97       	sbiw	r30, 0x01	; 1
   1ad96:	ec 1b       	sub	r30, r28
   1ad98:	fd 0b       	sbc	r31, r29
        // 2nd Split string header 
        wbuf[ind++] = 0x6F;
   1ad9a:	d7 01       	movw	r26, r14
   1ad9c:	a0 0f       	add	r26, r16
   1ad9e:	b1 1f       	adc	r27, r17
   1ada0:	8f e6       	ldi	r24, 0x6F	; 111
   1ada2:	8c 93       	st	X, r24
        wbuf[ind++] = (len & 0xff);
   1ada4:	11 96       	adiw	r26, 0x01	; 1
   1ada6:	ec 93       	st	X, r30
   1ada8:	11 97       	sbiw	r26, 0x01	; 1
        wbuf[ind++] = (len>>8) & 0xff;
   1adaa:	12 96       	adiw	r26, 0x02	; 2
   1adac:	fc 93       	st	X, r31
   1adae:	0d 5f       	subi	r16, 0xFD	; 253
   1adb0:	1f 4f       	sbci	r17, 0xFF	; 255
   1adb2:	f7 01       	movw	r30, r14
   1adb4:	e0 0f       	add	r30, r16
   1adb6:	f1 1f       	adc	r31, r17
   1adb8:	cf 01       	movw	r24, r30
   1adba:	8e 19       	sub	r24, r14
   1adbc:	9f 09       	sbc	r25, r15
        // Write string
        while(*str)
   1adbe:	29 91       	ld	r18, Y+
   1adc0:	22 23       	and	r18, r18
   1adc2:	21 f0       	breq	.+8      	; 0x1adcc <lif_ascii_string_to_e010+0x168>
            wbuf[ind++] = *str++;
   1adc4:	21 93       	st	Z+, r18
   1adc6:	f8 cf       	rjmp	.-16     	; 0x1adb8 <lif_ascii_string_to_e010+0x154>
        // Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & 1)
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
            return(-1);
   1adc8:	8f ef       	ldi	r24, 0xFF	; 255
   1adca:	9f ef       	ldi	r25, 0xFF	; 255
        while(*str)
            wbuf[ind++] = *str++;
    }

    return(ind);
}
   1adcc:	cd b7       	in	r28, 0x3d	; 61
   1adce:	de b7       	in	r29, 0x3e	; 62
   1add0:	e2 e1       	ldi	r30, 0x12	; 18
   1add2:	0c 94 0f e6 	jmp	0x1cc1e	; 0x1cc1e <__epilogue_restores__>

0001add6 <lif_add_ascii_file_as_e010_wrapper>:
/// @param[in] userfile: User ASCII file source
/// @param[in] *LIF: Where to write file if set (not NULL)
/// @return size of formatted result
MEMSPACE
long lif_add_ascii_file_as_e010_wrapper(lif_t *LIF, uint32_t offset, char *username)
{
   1add6:	a6 e0       	ldi	r26, 0x06	; 6
   1add8:	b3 e0       	ldi	r27, 0x03	; 3
   1adda:	e1 ef       	ldi	r30, 0xF1	; 241
   1addc:	f6 ed       	ldi	r31, 0xD6	; 214
   1adde:	0c 94 f3 e5 	jmp	0x1cbe6	; 0x1cbe6 <__prologue_saves__>
   1ade2:	7c 01       	movw	r14, r24
   1ade4:	4a 01       	movw	r8, r20
   1ade6:	5b 01       	movw	r10, r22
   1ade8:	c9 01       	movw	r24, r18
    // strings are limited to less then this
    char str[LIF_SECTOR_SIZE+1];
    // output buffer must be larger then a single sectors because of either headers or padding
    uint8_t obuf[LIF_SECTOR_SIZE*2];

    fi = lif_open(username, "rb");
   1adea:	66 e8       	ldi	r22, 0x86	; 134
   1adec:	78 e0       	ldi	r23, 0x08	; 8
   1adee:	0e 94 ca c2 	call	0x18594	; 0x18594 <lif_open>
   1adf2:	6c 01       	movw	r12, r24
    if(fi == NULL)
   1adf4:	89 2b       	or	r24, r25
   1adf6:	09 f4       	brne	.+2      	; 0x1adfa <lif_add_ascii_file_as_e010_wrapper+0x24>
   1adf8:	6b c0       	rjmp	.+214    	; 0x1aed0 <lif_add_ascii_file_as_e010_wrapper+0xfa>
   1adfa:	21 2c       	mov	r2, r1
   1adfc:	31 2c       	mov	r3, r1
   1adfe:	41 2c       	mov	r4, r1
   1ae00:	51 2c       	mov	r5, r1
   1ae02:	32 01       	movw	r6, r4

        if(count > 256)
        {       
            count = 0;
            if(LIF)
                printf("\tWrote: %8ld\r", (long)bytes);
   1ae04:	89 e7       	ldi	r24, 0x79	; 121
   1ae06:	97 e3       	ldi	r25, 0x37	; 55
   1ae08:	9c 01       	movw	r18, r24
   1ae0a:	40 e0       	ldi	r20, 0x00	; 0
   1ae0c:	cc 5f       	subi	r28, 0xFC	; 252
   1ae0e:	dc 4f       	sbci	r29, 0xFC	; 252
   1ae10:	28 83       	st	Y, r18
   1ae12:	39 83       	std	Y+1, r19	; 0x01
   1ae14:	4a 83       	std	Y+2, r20	; 0x02
   1ae16:	c4 50       	subi	r28, 0x04	; 4
   1ae18:	d3 40       	sbci	r29, 0x03	; 3
   1ae1a:	1a c0       	rjmp	.+52     	; 0x1ae50 <lif_add_ascii_file_as_e010_wrapper+0x7a>
                fclose(fi);
                return(-1);
            }
        }

        offset += size;
   1ae1c:	ce 5f       	subi	r28, 0xFE	; 254
   1ae1e:	dc 4f       	sbci	r29, 0xFC	; 252
   1ae20:	28 81       	ld	r18, Y
   1ae22:	39 81       	ldd	r19, Y+1	; 0x01
   1ae24:	c2 50       	subi	r28, 0x02	; 2
   1ae26:	d3 40       	sbci	r29, 0x03	; 3
   1ae28:	c9 01       	movw	r24, r18
   1ae2a:	03 2e       	mov	r0, r19
   1ae2c:	00 0c       	add	r0, r0
   1ae2e:	aa 0b       	sbc	r26, r26
   1ae30:	bb 0b       	sbc	r27, r27
   1ae32:	88 0e       	add	r8, r24
   1ae34:	99 1e       	adc	r9, r25
   1ae36:	aa 1e       	adc	r10, r26
   1ae38:	bb 1e       	adc	r11, r27
        bytes += size;
   1ae3a:	48 0e       	add	r4, r24
   1ae3c:	59 1e       	adc	r5, r25
   1ae3e:	6a 1e       	adc	r6, r26
   1ae40:	7b 1e       	adc	r7, r27
        count += size;
   1ae42:	22 0e       	add	r2, r18
   1ae44:	33 1e       	adc	r3, r19

        if(count > 256)
   1ae46:	31 e0       	ldi	r19, 0x01	; 1
   1ae48:	23 16       	cp	r2, r19
   1ae4a:	33 06       	cpc	r3, r19
   1ae4c:	0c f0       	brlt	.+2      	; 0x1ae50 <lif_add_ascii_file_as_e010_wrapper+0x7a>
   1ae4e:	45 c0       	rjmp	.+138    	; 0x1aeda <lif_add_ascii_file_as_e010_wrapper+0x104>
    bytes = 0;
    count = 0;

    // Read user file and write LIF records
    // reserve 3 + LIF header bytes + 1 (EOS)
    while( fgets((char *)str,(int)sizeof(str) - 4, fi) != NULL )
   1ae50:	a6 01       	movw	r20, r12
   1ae52:	6d ef       	ldi	r22, 0xFD	; 253
   1ae54:	70 e0       	ldi	r23, 0x00	; 0
   1ae56:	ce 01       	movw	r24, r28
   1ae58:	8f 5f       	subi	r24, 0xFF	; 255
   1ae5a:	9d 4f       	sbci	r25, 0xFD	; 253
   1ae5c:	0e 94 74 77 	call	0xeee8	; 0xeee8 <fgets>
   1ae60:	89 2b       	or	r24, r25
   1ae62:	09 f4       	brne	.+2      	; 0x1ae66 <lif_add_ascii_file_as_e010_wrapper+0x90>
   1ae64:	58 c0       	rjmp	.+176    	; 0x1af16 <lif_add_ascii_file_as_e010_wrapper+0x140>
    {
        trim_tail((char *)str);
   1ae66:	ce 01       	movw	r24, r28
   1ae68:	8f 5f       	subi	r24, 0xFF	; 255
   1ae6a:	9d 4f       	sbci	r25, 0xFD	; 253
   1ae6c:	0e 94 b0 32 	call	0x6560	; 0x6560 <trim_tail>

        strcat((char *)str,"\r"); // HP85 lines end with "\r"
   1ae70:	68 ed       	ldi	r22, 0xD8	; 216
   1ae72:	75 e1       	ldi	r23, 0x15	; 21
   1ae74:	ce 01       	movw	r24, r28
   1ae76:	8f 5f       	subi	r24, 0xFF	; 255
   1ae78:	9d 4f       	sbci	r25, 0xFD	; 253
   1ae7a:	0e 94 77 32 	call	0x64ee	; 0x64ee <strcat>

        size = lif_ascii_string_to_e010(str, offset, obuf);
   1ae7e:	9e 01       	movw	r18, r28
   1ae80:	2f 5f       	subi	r18, 0xFF	; 255
   1ae82:	3f 4f       	sbci	r19, 0xFF	; 255
   1ae84:	b5 01       	movw	r22, r10
   1ae86:	a4 01       	movw	r20, r8
   1ae88:	ce 01       	movw	r24, r28
   1ae8a:	8f 5f       	subi	r24, 0xFF	; 255
   1ae8c:	9d 4f       	sbci	r25, 0xFD	; 253
   1ae8e:	ea de       	rcall	.-556    	; 0x1ac64 <lif_ascii_string_to_e010>
   1ae90:	ce 5f       	subi	r28, 0xFE	; 254
   1ae92:	dc 4f       	sbci	r29, 0xFC	; 252
   1ae94:	99 83       	std	Y+1, r25	; 0x01
   1ae96:	88 83       	st	Y, r24
   1ae98:	c2 50       	subi	r28, 0x02	; 2
   1ae9a:	d3 40       	sbci	r29, 0x03	; 3
        // Write string
        // Now Write string
        if(LIF)
   1ae9c:	e1 14       	cp	r14, r1
   1ae9e:	f1 04       	cpc	r15, r1
   1aea0:	09 f4       	brne	.+2      	; 0x1aea4 <lif_add_ascii_file_as_e010_wrapper+0xce>
   1aea2:	bc cf       	rjmp	.-136    	; 0x1ae1c <lif_add_ascii_file_as_e010_wrapper+0x46>
        {
            len = lif_write(LIF, obuf, offset, size);
   1aea4:	8c 01       	movw	r16, r24
   1aea6:	a5 01       	movw	r20, r10
   1aea8:	94 01       	movw	r18, r8
   1aeaa:	be 01       	movw	r22, r28
   1aeac:	6f 5f       	subi	r22, 0xFF	; 255
   1aeae:	7f 4f       	sbci	r23, 0xFF	; 255
   1aeb0:	c7 01       	movw	r24, r14
   1aeb2:	0e 94 a9 c3 	call	0x18752	; 0x18752 <lif_write>
            if(len < size)
   1aeb6:	ce 5f       	subi	r28, 0xFE	; 254
   1aeb8:	dc 4f       	sbci	r29, 0xFC	; 252
   1aeba:	08 81       	ld	r16, Y
   1aebc:	19 81       	ldd	r17, Y+1	; 0x01
   1aebe:	c2 50       	subi	r28, 0x02	; 2
   1aec0:	d3 40       	sbci	r29, 0x03	; 3
   1aec2:	80 17       	cp	r24, r16
   1aec4:	91 07       	cpc	r25, r17
   1aec6:	0c f0       	brlt	.+2      	; 0x1aeca <lif_add_ascii_file_as_e010_wrapper+0xf4>
   1aec8:	a9 cf       	rjmp	.-174    	; 0x1ae1c <lif_add_ascii_file_as_e010_wrapper+0x46>
            {
                fclose(fi);
   1aeca:	c6 01       	movw	r24, r12
   1aecc:	0e 94 ed 7d 	call	0xfbda	; 0xfbda <fclose>
                return(-1);
   1aed0:	6f ef       	ldi	r22, 0xFF	; 255
   1aed2:	7f ef       	ldi	r23, 0xFF	; 255
   1aed4:	8f ef       	ldi	r24, 0xFF	; 255
   1aed6:	9f ef       	ldi	r25, 0xFF	; 255
   1aed8:	86 c0       	rjmp	.+268    	; 0x1afe6 <lif_add_ascii_file_as_e010_wrapper+0x210>
        count += size;

        if(count > 256)
        {       
            count = 0;
            if(LIF)
   1aeda:	e1 14       	cp	r14, r1
   1aedc:	f1 04       	cpc	r15, r1
   1aede:	c1 f0       	breq	.+48     	; 0x1af10 <lif_add_ascii_file_as_e010_wrapper+0x13a>
                printf("\tWrote: %8ld\r", (long)bytes);
   1aee0:	7f 92       	push	r7
   1aee2:	6f 92       	push	r6
   1aee4:	5f 92       	push	r5
   1aee6:	4f 92       	push	r4
   1aee8:	1f 92       	push	r1
   1aeea:	cb 5f       	subi	r28, 0xFB	; 251
   1aeec:	dc 4f       	sbci	r29, 0xFC	; 252
   1aeee:	48 81       	ld	r20, Y
   1aef0:	c5 50       	subi	r28, 0x05	; 5
   1aef2:	d3 40       	sbci	r29, 0x03	; 3
   1aef4:	4f 93       	push	r20
   1aef6:	cc 5f       	subi	r28, 0xFC	; 252
   1aef8:	dc 4f       	sbci	r29, 0xFC	; 252
   1aefa:	88 81       	ld	r24, Y
   1aefc:	c4 50       	subi	r28, 0x04	; 4
   1aefe:	d3 40       	sbci	r29, 0x03	; 3
   1af00:	8f 93       	push	r24
   1af02:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1af06:	0f b6       	in	r0, 0x3f	; 63
   1af08:	f8 94       	cli
   1af0a:	de bf       	out	0x3e, r29	; 62
   1af0c:	0f be       	out	0x3f, r0	; 63
   1af0e:	cd bf       	out	0x3d, r28	; 61
        bytes += size;
        count += size;

        if(count > 256)
        {       
            count = 0;
   1af10:	21 2c       	mov	r2, r1
   1af12:	31 2c       	mov	r3, r1
   1af14:	9d cf       	rjmp	.-198    	; 0x1ae50 <lif_add_ascii_file_as_e010_wrapper+0x7a>
            if(LIF)
                printf("\tWrote: %8ld\r", (long)bytes);
        }
    }

    fclose(fi);
   1af16:	c6 01       	movw	r24, r12
   1af18:	0e 94 ed 7d 	call	0xfbda	; 0xfbda <fclose>

    // Write EOF
    str[0] = 0;
   1af1c:	cf 5f       	subi	r28, 0xFF	; 255
   1af1e:	dd 4f       	sbci	r29, 0xFD	; 253
   1af20:	18 82       	st	Y, r1
   1af22:	c1 50       	subi	r28, 0x01	; 1
   1af24:	d2 40       	sbci	r29, 0x02	; 2
    // We only want to return the count of bytes in the file NOT the padding at the end
    // Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);
   1af26:	9e 01       	movw	r18, r28
   1af28:	2f 5f       	subi	r18, 0xFF	; 255
   1af2a:	3f 4f       	sbci	r19, 0xFF	; 255
   1af2c:	b5 01       	movw	r22, r10
   1af2e:	a4 01       	movw	r20, r8
   1af30:	ce 01       	movw	r24, r28
   1af32:	8f 5f       	subi	r24, 0xFF	; 255
   1af34:	9d 4f       	sbci	r25, 0xFD	; 253
   1af36:	96 de       	rcall	.-724    	; 0x1ac64 <lif_ascii_string_to_e010>
   1af38:	6c 01       	movw	r12, r24

    if(LIF)
   1af3a:	e1 14       	cp	r14, r1
   1af3c:	f1 04       	cpc	r15, r1
   1af3e:	b9 f4       	brne	.+46     	; 0x1af6e <lif_add_ascii_file_as_e010_wrapper+0x198>
            return(-1);

    }

    offset += size;
    bytes += size;
   1af40:	c6 01       	movw	r24, r12
   1af42:	dd 0c       	add	r13, r13
   1af44:	aa 0b       	sbc	r26, r26
   1af46:	bb 0b       	sbc	r27, r27
   1af48:	48 0e       	add	r4, r24
   1af4a:	59 1e       	adc	r5, r25
   1af4c:	6a 1e       	adc	r6, r26
   1af4e:	7b 1e       	adc	r7, r27

    // PAD
    size = lif_e010_pad_sector(offset, obuf);
   1af50:	88 0e       	add	r8, r24
   1af52:	99 1e       	adc	r9, r25
   1af54:	aa 1e       	adc	r10, r26
   1af56:	bb 1e       	adc	r11, r27
   1af58:	ae 01       	movw	r20, r28
   1af5a:	4f 5f       	subi	r20, 0xFF	; 255
   1af5c:	5f 4f       	sbci	r21, 0xFF	; 255
   1af5e:	c5 01       	movw	r24, r10
   1af60:	b4 01       	movw	r22, r8
   1af62:	26 de       	rcall	.-948    	; 0x1abb0 <lif_e010_pad_sector>
   1af64:	6c 01       	movw	r12, r24
    if(LIF)
   1af66:	e1 14       	cp	r14, r1
   1af68:	f1 04       	cpc	r15, r1
   1af6a:	f1 f4       	brne	.+60     	; 0x1afa8 <lif_add_ascii_file_as_e010_wrapper+0x1d2>
   1af6c:	3a c0       	rjmp	.+116    	; 0x1afe2 <lif_add_ascii_file_as_e010_wrapper+0x20c>
    // Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);

    if(LIF)
    {
        printf("\tWrote: %8ld\r", (long)bytes);
   1af6e:	7f 92       	push	r7
   1af70:	6f 92       	push	r6
   1af72:	5f 92       	push	r5
   1af74:	4f 92       	push	r4
   1af76:	8b e6       	ldi	r24, 0x6B	; 107
   1af78:	97 e3       	ldi	r25, 0x37	; 55
   1af7a:	1f 92       	push	r1
   1af7c:	9f 93       	push	r25
   1af7e:	8f 93       	push	r24
   1af80:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
        len = lif_write(LIF, obuf, offset, size);
   1af84:	86 01       	movw	r16, r12
   1af86:	a5 01       	movw	r20, r10
   1af88:	94 01       	movw	r18, r8
   1af8a:	be 01       	movw	r22, r28
   1af8c:	6f 5f       	subi	r22, 0xFF	; 255
   1af8e:	7f 4f       	sbci	r23, 0xFF	; 255
   1af90:	c7 01       	movw	r24, r14
   1af92:	0e 94 a9 c3 	call	0x18752	; 0x18752 <lif_write>
        if(len < size)
   1af96:	0f b6       	in	r0, 0x3f	; 63
   1af98:	f8 94       	cli
   1af9a:	de bf       	out	0x3e, r29	; 62
   1af9c:	0f be       	out	0x3f, r0	; 63
   1af9e:	cd bf       	out	0x3d, r28	; 61
   1afa0:	8c 15       	cp	r24, r12
   1afa2:	9d 05       	cpc	r25, r13
   1afa4:	6c f6       	brge	.-102    	; 0x1af40 <lif_add_ascii_file_as_e010_wrapper+0x16a>
   1afa6:	94 cf       	rjmp	.-216    	; 0x1aed0 <lif_add_ascii_file_as_e010_wrapper+0xfa>

    // PAD
    size = lif_e010_pad_sector(offset, obuf);
    if(LIF)
    {
        len = lif_write(LIF, obuf, offset, size);
   1afa8:	8c 01       	movw	r16, r24
   1afaa:	a5 01       	movw	r20, r10
   1afac:	94 01       	movw	r18, r8
   1afae:	be 01       	movw	r22, r28
   1afb0:	6f 5f       	subi	r22, 0xFF	; 255
   1afb2:	7f 4f       	sbci	r23, 0xFF	; 255
   1afb4:	c7 01       	movw	r24, r14
   1afb6:	0e 94 a9 c3 	call	0x18752	; 0x18752 <lif_write>
        if(len < size)
   1afba:	8c 15       	cp	r24, r12
   1afbc:	9d 05       	cpc	r25, r13
   1afbe:	0c f4       	brge	.+2      	; 0x1afc2 <lif_add_ascii_file_as_e010_wrapper+0x1ec>
   1afc0:	87 cf       	rjmp	.-242    	; 0x1aed0 <lif_add_ascii_file_as_e010_wrapper+0xfa>
            return(-1);
    }

    if(LIF)
        printf("\tWrote: %8ld\r",(long)bytes);
   1afc2:	7f 92       	push	r7
   1afc4:	6f 92       	push	r6
   1afc6:	5f 92       	push	r5
   1afc8:	4f 92       	push	r4
   1afca:	8d e5       	ldi	r24, 0x5D	; 93
   1afcc:	97 e3       	ldi	r25, 0x37	; 55
   1afce:	1f 92       	push	r1
   1afd0:	9f 93       	push	r25
   1afd2:	8f 93       	push	r24
   1afd4:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1afd8:	0f b6       	in	r0, 0x3f	; 63
   1afda:	f8 94       	cli
   1afdc:	de bf       	out	0x3e, r29	; 62
   1afde:	0f be       	out	0x3f, r0	; 63
   1afe0:	cd bf       	out	0x3d, r28	; 61

    return(bytes);
   1afe2:	b2 01       	movw	r22, r4
   1afe4:	c3 01       	movw	r24, r6
}
   1afe6:	ca 5f       	subi	r28, 0xFA	; 250
   1afe8:	dc 4f       	sbci	r29, 0xFC	; 252
   1afea:	e2 e1       	ldi	r30, 0x12	; 18
   1afec:	0c 94 0f e6 	jmp	0x1cc1e	; 0x1cc1e <__epilogue_restores__>

0001aff0 <lif_add_ascii_file_as_e010>:
/// @param[in] lifname: LIF file name
/// @param[in] userfile: userfile name
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_ascii_file_as_e010(char *lifimagename, char *lifname, char *userfile)
{
   1aff0:	a2 e3       	ldi	r26, 0x32	; 50
   1aff2:	b0 e0       	ldi	r27, 0x00	; 0
   1aff4:	ee ef       	ldi	r30, 0xFE	; 254
   1aff6:	f7 ed       	ldi	r31, 0xD7	; 215
   1aff8:	0c 94 f3 e5 	jmp	0x1cbe6	; 0x1cbe6 <__prologue_saves__>
   1affc:	6c 01       	movw	r12, r24
   1affe:	1b 01       	movw	r2, r22
   1b000:	7a 01       	movw	r14, r20
    int index;
    lif_t *LIF;
    stat_t st, *sp;


    if(!*lifimagename)
   1b002:	fc 01       	movw	r30, r24
   1b004:	80 81       	ld	r24, Z
   1b006:	81 11       	cpse	r24, r1
   1b008:	03 c0       	rjmp	.+6      	; 0x1b010 <lif_add_ascii_file_as_e010+0x20>
    {
        printf("lif_add_ascii_file_as_e010: lifimagename is empty\n");
   1b00a:	8a e2       	ldi	r24, 0x2A	; 42
   1b00c:	97 e3       	ldi	r25, 0x37	; 55
   1b00e:	1a c0       	rjmp	.+52     	; 0x1b044 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*lifname)
   1b010:	fb 01       	movw	r30, r22
   1b012:	80 81       	ld	r24, Z
   1b014:	81 11       	cpse	r24, r1
   1b016:	03 c0       	rjmp	.+6      	; 0x1b01e <lif_add_ascii_file_as_e010+0x2e>
    {
        printf("lif_add_ascii_file_as_e010: lifname is empty\n");
   1b018:	8c ef       	ldi	r24, 0xFC	; 252
   1b01a:	96 e3       	ldi	r25, 0x36	; 54
   1b01c:	13 c0       	rjmp	.+38     	; 0x1b044 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*userfile)
   1b01e:	fa 01       	movw	r30, r20
   1b020:	80 81       	ld	r24, Z
   1b022:	81 11       	cpse	r24, r1
   1b024:	03 c0       	rjmp	.+6      	; 0x1b02c <lif_add_ascii_file_as_e010+0x3c>
    {
        printf("lif_add_ascii_file_as_e010: userfile is empty\n");
   1b026:	8d ec       	ldi	r24, 0xCD	; 205
   1b028:	96 e3       	ldi	r25, 0x36	; 54
   1b02a:	0c c0       	rjmp	.+24     	; 0x1b044 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }

    //Get size and date info
    sp = lif_stat(userfile, (stat_t *)&st);
   1b02c:	be 01       	movw	r22, r28
   1b02e:	6f 5f       	subi	r22, 0xFF	; 255
   1b030:	7f 4f       	sbci	r23, 0xFF	; 255
   1b032:	ca 01       	movw	r24, r20
   1b034:	0e 94 f2 c2 	call	0x185e4	; 0x185e4 <lif_stat>
   1b038:	9a ab       	std	Y+50, r25	; 0x32
   1b03a:	89 ab       	std	Y+49, r24	; 0x31
    if(!sp)
   1b03c:	89 2b       	or	r24, r25
   1b03e:	59 f4       	brne	.+22     	; 0x1b056 <lif_add_ascii_file_as_e010+0x66>
    {
        printf("lif_add_ascii_file_as_e010: userfile not found\n");
   1b040:	8d e9       	ldi	r24, 0x9D	; 157
   1b042:	96 e3       	ldi	r25, 0x36	; 54
   1b044:	1f 92       	push	r1
   1b046:	9f 93       	push	r25
   1b048:	8f 93       	push	r24
   1b04a:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
        return(-1);
   1b04e:	0f 90       	pop	r0
   1b050:	0f 90       	pop	r0
   1b052:	0f 90       	pop	r0
   1b054:	fe c0       	rjmp	.+508    	; 0x1b252 <lif_add_ascii_file_as_e010+0x262>
    }

    if(debuglevel & 0x400)
   1b056:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1b05a:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1b05e:	92 ff       	sbrs	r25, 2
   1b060:	12 c0       	rjmp	.+36     	; 0x1b086 <lif_add_ascii_file_as_e010+0x96>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n", 
   1b062:	ff 92       	push	r15
   1b064:	ef 92       	push	r14
   1b066:	3f 92       	push	r3
   1b068:	2f 92       	push	r2
   1b06a:	df 92       	push	r13
   1b06c:	cf 92       	push	r12
   1b06e:	8e e6       	ldi	r24, 0x6E	; 110
   1b070:	96 e3       	ldi	r25, 0x36	; 54
   1b072:	1f 92       	push	r1
   1b074:	9f 93       	push	r25
   1b076:	8f 93       	push	r24
   1b078:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1b07c:	0f b6       	in	r0, 0x3f	; 63
   1b07e:	f8 94       	cli
   1b080:	de bf       	out	0x3e, r29	; 62
   1b082:	0f be       	out	0x3f, r0	; 63
   1b084:	cd bf       	out	0x3d, r28	; 61
            lifimagename, lifname, userfile);

    // Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
   1b086:	97 01       	movw	r18, r14
   1b088:	40 e0       	ldi	r20, 0x00	; 0
   1b08a:	50 e0       	ldi	r21, 0x00	; 0
   1b08c:	ba 01       	movw	r22, r20
   1b08e:	80 e0       	ldi	r24, 0x00	; 0
   1b090:	90 e0       	ldi	r25, 0x00	; 0
   1b092:	a1 de       	rcall	.-702    	; 0x1add6 <lif_add_ascii_file_as_e010_wrapper>
   1b094:	4b 01       	movw	r8, r22
   1b096:	5c 01       	movw	r10, r24
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1b098:	47 2e       	mov	r4, r23
   1b09a:	58 2e       	mov	r5, r24
   1b09c:	69 2e       	mov	r6, r25
   1b09e:	77 24       	eor	r7, r7
    if(bytes % (long)LIF_SECTOR_SIZE)
   1b0a0:	66 23       	and	r22, r22
   1b0a2:	29 f0       	breq	.+10     	; 0x1b0ae <lif_add_ascii_file_as_e010+0xbe>
        ++sectors;
   1b0a4:	9f ef       	ldi	r25, 0xFF	; 255
   1b0a6:	49 1a       	sub	r4, r25
   1b0a8:	59 0a       	sbc	r5, r25
   1b0aa:	69 0a       	sbc	r6, r25
   1b0ac:	79 0a       	sbc	r7, r25

    // Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
   1b0ae:	69 e8       	ldi	r22, 0x89	; 137
   1b0b0:	78 e0       	ldi	r23, 0x08	; 8
   1b0b2:	c6 01       	movw	r24, r12
   1b0b4:	85 da       	rcall	.-2806   	; 0x1a5c0 <lif_open_volume>
   1b0b6:	8c 01       	movw	r16, r24
    if(LIF == NULL)
   1b0b8:	00 97       	sbiw	r24, 0x00	; 0
   1b0ba:	09 f4       	brne	.+2      	; 0x1b0be <lif_add_ascii_file_as_e010+0xce>
        return(-1); 

    // Now find free record
    index = lif_newdir(LIF, sectors);
   1b0bc:	ca c0       	rjmp	.+404    	; 0x1b252 <lif_add_ascii_file_as_e010+0x262>
   1b0be:	b3 01       	movw	r22, r6
   1b0c0:	a2 01       	movw	r20, r4
   1b0c2:	19 d9       	rcall	.-3534   	; 0x1a2f6 <lif_newdir>
    if(index == -1)
   1b0c4:	3c 01       	movw	r6, r24
   1b0c6:	01 96       	adiw	r24, 0x01	; 1
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n", 
   1b0c8:	a1 f4       	brne	.+40     	; 0x1b0f2 <lif_add_ascii_file_as_e010+0x102>
   1b0ca:	ff 92       	push	r15
   1b0cc:	ef 92       	push	r14
   1b0ce:	df 92       	push	r13
   1b0d0:	cf 92       	push	r12
   1b0d2:	8e e3       	ldi	r24, 0x3E	; 62
   1b0d4:	96 e3       	ldi	r25, 0x36	; 54
   1b0d6:	1f 92       	push	r1
   1b0d8:	9f 93       	push	r25
   1b0da:	8f 93       	push	r24
   1b0dc:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b0e0:	c8 01       	movw	r24, r16
   1b0e2:	0e 94 e8 cb 	call	0x197d0	; 0x197d0 <lif_close_volume>
    if(index == -1)
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n", 
            lifimagename, userfile);
            lif_closedir(LIF);
            return(-1);
   1b0e6:	0f b6       	in	r0, 0x3f	; 63
   1b0e8:	f8 94       	cli
   1b0ea:	de bf       	out	0x3e, r29	; 62
   1b0ec:	0f be       	out	0x3f, r0	; 63
   1b0ee:	cd bf       	out	0x3d, r28	; 61
    }

    // Initialize the free directory entry
    lif_fixname(LIF->DIR.filename, lifname,10);
   1b0f0:	b0 c0       	rjmp	.+352    	; 0x1b252 <lif_add_ascii_file_as_e010+0x262>
   1b0f2:	68 01       	movw	r12, r16
   1b0f4:	9f e4       	ldi	r25, 0x4F	; 79
   1b0f6:	c9 0e       	add	r12, r25
   1b0f8:	d1 1c       	adc	r13, r1
   1b0fa:	4a e0       	ldi	r20, 0x0A	; 10
   1b0fc:	50 e0       	ldi	r21, 0x00	; 0
   1b0fe:	b1 01       	movw	r22, r2
   1b100:	c6 01       	movw	r24, r12
   1b102:	0e 94 96 c4 	call	0x1892c	; 0x1892c <lif_fixname>
    LIF->DIR.FileType = 0xe010;             // 10
   1b106:	80 e1       	ldi	r24, 0x10	; 16
   1b108:	90 ee       	ldi	r25, 0xE0	; 224
   1b10a:	f8 01       	movw	r30, r16
   1b10c:	e6 5a       	subi	r30, 0xA6	; 166
   1b10e:	ff 4f       	sbci	r31, 0xFF	; 255
   1b110:	91 83       	std	Z+1, r25	; 0x01
    lif_time2lifbcd(sp->st_mtime, LIF->DIR.date);
   1b112:	80 83       	st	Z, r24
   1b114:	e9 a9       	ldd	r30, Y+49	; 0x31
   1b116:	fa a9       	ldd	r31, Y+50	; 0x32
   1b118:	60 a5       	ldd	r22, Z+40	; 0x28
   1b11a:	71 a5       	ldd	r23, Z+41	; 0x29
   1b11c:	82 a5       	ldd	r24, Z+42	; 0x2a
   1b11e:	93 a5       	ldd	r25, Z+43	; 0x2b
   1b120:	a8 01       	movw	r20, r16
   1b122:	4c 59       	subi	r20, 0x9C	; 156
   1b124:	5f 4f       	sbci	r21, 0xFF	; 255
   1b126:	0e 94 db c6 	call	0x18db6	; 0x18db6 <lif_time2lifbcd>

    LIF->DIR.VolNumber = 0x8001;            // 26
   1b12a:	81 e0       	ldi	r24, 0x01	; 1
   1b12c:	90 e8       	ldi	r25, 0x80	; 128
   1b12e:	f8 01       	movw	r30, r16
   1b130:	e6 59       	subi	r30, 0x96	; 150
   1b132:	ff 4f       	sbci	r31, 0xFF	; 255
   1b134:	91 83       	std	Z+1, r25	; 0x01
    LIF->DIR.FileBytes = bytes;                 // 28
   1b136:	80 83       	st	Z, r24
   1b138:	32 96       	adiw	r30, 0x02	; 2
   1b13a:	91 82       	std	Z+1, r9	; 0x01
    LIF->DIR.SectorSize  = 0x100;           // 30
   1b13c:	80 82       	st	Z, r8
   1b13e:	80 e0       	ldi	r24, 0x00	; 0
   1b140:	91 e0       	ldi	r25, 0x01	; 1
   1b142:	32 96       	adiw	r30, 0x02	; 2
   1b144:	91 83       	std	Z+1, r25	; 0x01
    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b146:	80 83       	st	Z, r24
   1b148:	58 01       	movw	r10, r16
   1b14a:	fc e5       	ldi	r31, 0x5C	; 92
   1b14c:	af 0e       	add	r10, r31
   1b14e:	b1 1c       	adc	r11, r1
   1b150:	f5 01       	movw	r30, r10
   1b152:	80 81       	ld	r24, Z
   1b154:	91 81       	ldd	r25, Z+1	; 0x01
   1b156:	a2 81       	ldd	r26, Z+2	; 0x02
   1b158:	b3 81       	ldd	r27, Z+3	; 0x03
   1b15a:	22 24       	eor	r2, r2
   1b15c:	38 2e       	mov	r3, r24
   1b15e:	49 2e       	mov	r4, r25

    if(debuglevel & 0x400)
   1b160:	5a 2e       	mov	r5, r26
   1b162:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1b166:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1b16a:	92 ff       	sbrs	r25, 2
        lif_dump_vol(LIF,"lif_after lif_newdir");
   1b16c:	05 c0       	rjmp	.+10     	; 0x1b178 <lif_add_ascii_file_as_e010+0x188>
   1b16e:	6a ed       	ldi	r22, 0xDA	; 218
   1b170:	75 e1       	ldi	r23, 0x15	; 21
   1b172:	c8 01       	movw	r24, r16
   1b174:	0e 94 c7 c7 	call	0x18f8e	; 0x18f8e <lif_dump_vol>

    // Write converted file into free space first
    bytes = lif_add_ascii_file_as_e010_wrapper(LIF,offset,userfile);
   1b178:	97 01       	movw	r18, r14
   1b17a:	b2 01       	movw	r22, r4
   1b17c:	a1 01       	movw	r20, r2
   1b17e:	c8 01       	movw	r24, r16
   1b180:	2a de       	rcall	.-940    	; 0x1add6 <lif_add_ascii_file_as_e010_wrapper>
   1b182:	4b 01       	movw	r8, r22

    if(debuglevel & 0x400)
   1b184:	7c 01       	movw	r14, r24
   1b186:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1b18a:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1b18e:	92 ff       	sbrs	r25, 2
    {
        printf("New Directory Information AFTER write\n");
   1b190:	40 c0       	rjmp	.+128    	; 0x1b212 <lif_add_ascii_file_as_e010+0x222>
   1b192:	87 e1       	ldi	r24, 0x17	; 23
   1b194:	96 e3       	ldi	r25, 0x36	; 54
   1b196:	1f 92       	push	r1
   1b198:	9f 93       	push	r25
   1b19a:	8f 93       	push	r24
   1b19c:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
        printf("Name:              %s\n", LIF->DIR.filename);
   1b1a0:	df 92       	push	r13
   1b1a2:	cf 92       	push	r12
   1b1a4:	80 e0       	ldi	r24, 0x00	; 0
   1b1a6:	96 e3       	ldi	r25, 0x36	; 54
   1b1a8:	1f 92       	push	r1
   1b1aa:	9f 93       	push	r25
   1b1ac:	8f 93       	push	r24
   1b1ae:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
        printf("Index:            %4d\n", (int)index);
   1b1b2:	7f 92       	push	r7
   1b1b4:	6f 92       	push	r6
   1b1b6:	89 ee       	ldi	r24, 0xE9	; 233
   1b1b8:	95 e3       	ldi	r25, 0x35	; 53
   1b1ba:	1f 92       	push	r1
   1b1bc:	9f 93       	push	r25
   1b1be:	8f 93       	push	r24
   1b1c0:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
        printf("First Sector:     %4lxH\n", (long) LIF->DIR.FileStartSector);
   1b1c4:	f5 01       	movw	r30, r10
   1b1c6:	83 81       	ldd	r24, Z+3	; 0x03
   1b1c8:	8f 93       	push	r24
   1b1ca:	82 81       	ldd	r24, Z+2	; 0x02
   1b1cc:	8f 93       	push	r24
   1b1ce:	81 81       	ldd	r24, Z+1	; 0x01
   1b1d0:	8f 93       	push	r24
   1b1d2:	80 81       	ld	r24, Z
   1b1d4:	8f 93       	push	r24
   1b1d6:	80 ed       	ldi	r24, 0xD0	; 208
   1b1d8:	95 e3       	ldi	r25, 0x35	; 53
   1b1da:	1f 92       	push	r1
   1b1dc:	9f 93       	push	r25
   1b1de:	8f 93       	push	r24
   1b1e0:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
        printf("File Sectors:     %4lxH\n", (long)LIF->DIR.FileSectors);
   1b1e4:	f8 01       	movw	r30, r16
   1b1e6:	e0 5a       	subi	r30, 0xA0	; 160
   1b1e8:	ff 4f       	sbci	r31, 0xFF	; 255
   1b1ea:	83 81       	ldd	r24, Z+3	; 0x03
   1b1ec:	8f 93       	push	r24
   1b1ee:	82 81       	ldd	r24, Z+2	; 0x02
   1b1f0:	8f 93       	push	r24
   1b1f2:	81 81       	ldd	r24, Z+1	; 0x01
   1b1f4:	8f 93       	push	r24
   1b1f6:	80 81       	ld	r24, Z
   1b1f8:	8f 93       	push	r24
   1b1fa:	87 eb       	ldi	r24, 0xB7	; 183
   1b1fc:	95 e3       	ldi	r25, 0x35	; 53
   1b1fe:	1f 92       	push	r1
   1b200:	9f 93       	push	r25
   1b202:	8f 93       	push	r24
   1b204:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1b208:	0f b6       	in	r0, 0x3f	; 63
   1b20a:	f8 94       	cli
   1b20c:	de bf       	out	0x3e, r29	; 62
   1b20e:	0f be       	out	0x3f, r0	; 63
    }

    // Write directory record
    // Note: lif_newdir alrwady did the new EOF
    if( !lif_writedirindex(LIF,index))
   1b210:	cd bf       	out	0x3d, r28	; 61
   1b212:	b3 01       	movw	r22, r6
   1b214:	c8 01       	movw	r24, r16
   1b216:	0e 94 d2 cc 	call	0x199a4	; 0x199a4 <lif_writedirindex>
   1b21a:	89 2b       	or	r24, r25
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b21c:	21 f4       	brne	.+8      	; 0x1b226 <lif_add_ascii_file_as_e010+0x236>
   1b21e:	c8 01       	movw	r24, r16
   1b220:	0e 94 e8 cb 	call	0x197d0	; 0x197d0 <lif_close_volume>
   1b224:	16 c0       	rjmp	.+44     	; 0x1b252 <lif_add_ascii_file_as_e010+0x262>
   1b226:	c8 01       	movw	r24, r16
   1b228:	0e 94 e8 cb 	call	0x197d0	; 0x197d0 <lif_close_volume>
        return(-1);
    }

    lif_closedir(LIF);

    printf("\tWrote: %8ld\n", bytes);
   1b22c:	ff 92       	push	r15
   1b22e:	ef 92       	push	r14
   1b230:	9f 92       	push	r9
   1b232:	8f 92       	push	r8
   1b234:	89 ea       	ldi	r24, 0xA9	; 169
   1b236:	95 e3       	ldi	r25, 0x35	; 53
   1b238:	1f 92       	push	r1
   1b23a:	9f 93       	push	r25
   1b23c:	8f 93       	push	r24
   1b23e:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>

    // Return file size
    return(bytes);
   1b242:	0f b6       	in	r0, 0x3f	; 63
   1b244:	f8 94       	cli
   1b246:	de bf       	out	0x3e, r29	; 62
   1b248:	0f be       	out	0x3f, r0	; 63
   1b24a:	cd bf       	out	0x3d, r28	; 61
   1b24c:	b4 01       	movw	r22, r8
   1b24e:	c7 01       	movw	r24, r14
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
    if(LIF == NULL)
        return(-1); 
   1b250:	04 c0       	rjmp	.+8      	; 0x1b25a <lif_add_ascii_file_as_e010+0x26a>
   1b252:	6f ef       	ldi	r22, 0xFF	; 255
   1b254:	7f ef       	ldi	r23, 0xFF	; 255
   1b256:	8f ef       	ldi	r24, 0xFF	; 255

    printf("\tWrote: %8ld\n", bytes);

    // Return file size
    return(bytes);
}
   1b258:	9f ef       	ldi	r25, 0xFF	; 255
   1b25a:	e2 96       	adiw	r28, 0x32	; 50
   1b25c:	e2 e1       	ldi	r30, 0x12	; 18
   1b25e:	0c 94 0f e6 	jmp	0x1cc1e	; 0x1cc1e <__epilogue_restores__>

0001b262 <lif_extract_e010_as_ascii>:
/// @param[in] lifname:  name of file in LIF image
/// @param[in] username: name to call the extracted image
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_e010_as_ascii(char *lifimagename, char *lifname, char *username)
{
   1b262:	ac e2       	ldi	r26, 0x2C	; 44
   1b264:	b2 e0       	ldi	r27, 0x02	; 2
   1b266:	e7 e3       	ldi	r30, 0x37	; 55
   1b268:	f9 ed       	ldi	r31, 0xD9	; 217
   1b26a:	0c 94 f3 e5 	jmp	0x1cbe6	; 0x1cbe6 <__prologue_saves__>
   1b26e:	f8 2e       	mov	r15, r24
   1b270:	b9 2e       	mov	r11, r25
   1b272:	16 2f       	mov	r17, r22
   1b274:	07 2f       	mov	r16, r23
   1b276:	c4 5e       	subi	r28, 0xE4	; 228
   1b278:	dd 4f       	sbci	r29, 0xFD	; 253
   1b27a:	48 83       	st	Y, r20
   1b27c:	cc 51       	subi	r28, 0x1C	; 28
   1b27e:	d2 40       	sbci	r29, 0x02	; 2
   1b280:	e5 2e       	mov	r14, r21
    uint8_t buf[LIF_SECTOR_SIZE+4];
    // Write buffer, FYI: will ALWAYS be smaller then the read data buffer
    uint8_t wbuf[LIF_SECTOR_SIZE+4];


    LIF = lif_open_volume(lifimagename,"r");
   1b282:	61 e4       	ldi	r22, 0x41	; 65
   1b284:	77 e0       	ldi	r23, 0x07	; 7
   1b286:	9c d9       	rcall	.-3272   	; 0x1a5c0 <lif_open_volume>
   1b288:	6c 01       	movw	r12, r24
    if(LIF == NULL)
   1b28a:	00 97       	sbiw	r24, 0x00	; 0
   1b28c:	51 f4       	brne	.+20     	; 0x1b2a2 <lif_extract_e010_as_ascii+0x40>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1b28e:	bf 92       	push	r11
   1b290:	ff 92       	push	r15
   1b292:	81 e9       	ldi	r24, 0x91	; 145
   1b294:	95 e3       	ldi	r25, 0x35	; 53
   1b296:	1f 92       	push	r1
   1b298:	9f 93       	push	r25
   1b29a:	8f 93       	push	r24
   1b29c:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1b2a0:	11 c0       	rjmp	.+34     	; 0x1b2c4 <lif_extract_e010_as_ascii+0x62>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1b2a2:	61 2f       	mov	r22, r17
   1b2a4:	70 2f       	mov	r23, r16
   1b2a6:	20 dc       	rcall	.-1984   	; 0x1aae8 <lif_find_file>
    if(index == -1)
   1b2a8:	01 96       	adiw	r24, 0x01	; 1
   1b2aa:	a1 f4       	brne	.+40     	; 0x1b2d4 <lif_extract_e010_as_ascii+0x72>
    {
        printf("LIF File not found:%s\n", lifname);
   1b2ac:	0f 93       	push	r16
   1b2ae:	1f 93       	push	r17
   1b2b0:	8a e7       	ldi	r24, 0x7A	; 122
   1b2b2:	95 e3       	ldi	r25, 0x35	; 53
   1b2b4:	1f 92       	push	r1
   1b2b6:	9f 93       	push	r25
   1b2b8:	8f 93       	push	r24
   1b2ba:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b2be:	c6 01       	movw	r24, r12
   1b2c0:	0e 94 e8 cb 	call	0x197d0	; 0x197d0 <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("LIF File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1b2c4:	0f 90       	pop	r0
   1b2c6:	0f 90       	pop	r0
   1b2c8:	0f 90       	pop	r0
   1b2ca:	0f 90       	pop	r0
   1b2cc:	0f 90       	pop	r0
   1b2ce:	80 e0       	ldi	r24, 0x00	; 0
   1b2d0:	90 e0       	ldi	r25, 0x00	; 0
   1b2d2:	ae c2       	rjmp	.+1372   	; 0x1b830 <lif_extract_e010_as_ascii+0x5ce>
    }

    if((LIF->DIR.FileType & 0xFFFC) != 0xE010)
   1b2d4:	f6 01       	movw	r30, r12
   1b2d6:	e6 5a       	subi	r30, 0xA6	; 166
   1b2d8:	ff 4f       	sbci	r31, 0xFF	; 255
   1b2da:	80 81       	ld	r24, Z
   1b2dc:	91 81       	ldd	r25, Z+1	; 0x01
   1b2de:	9c 01       	movw	r18, r24
   1b2e0:	2c 7f       	andi	r18, 0xFC	; 252
   1b2e2:	20 31       	cpi	r18, 0x10	; 16
   1b2e4:	30 4e       	sbci	r19, 0xE0	; 224
   1b2e6:	c9 f0       	breq	.+50     	; 0x1b31a <lif_extract_e010_as_ascii+0xb8>
    {
        printf("File %s has wrong type:[%04XH] expected 0xE010..0xE013\n", username, (int) LIF->DIR.FileType);
   1b2e8:	9f 93       	push	r25
   1b2ea:	8f 93       	push	r24
   1b2ec:	ef 92       	push	r14
   1b2ee:	c4 5e       	subi	r28, 0xE4	; 228
   1b2f0:	dd 4f       	sbci	r29, 0xFD	; 253
   1b2f2:	58 81       	ld	r21, Y
   1b2f4:	cc 51       	subi	r28, 0x1C	; 28
   1b2f6:	d2 40       	sbci	r29, 0x02	; 2
   1b2f8:	5f 93       	push	r21
   1b2fa:	82 e4       	ldi	r24, 0x42	; 66
   1b2fc:	95 e3       	ldi	r25, 0x35	; 53
   1b2fe:	1f 92       	push	r1
   1b300:	9f 93       	push	r25
   1b302:	8f 93       	push	r24
   1b304:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b308:	c6 01       	movw	r24, r12
   1b30a:	0e 94 e8 cb 	call	0x197d0	; 0x197d0 <lif_close_volume>

    if((LIF->DIR.FileType & 0xFFFC) != 0xE010)
    {
        printf("File %s has wrong type:[%04XH] expected 0xE010..0xE013\n", username, (int) LIF->DIR.FileType);
        lif_closedir(LIF);
        return(0);
   1b30e:	0f b6       	in	r0, 0x3f	; 63
   1b310:	f8 94       	cli
   1b312:	de bf       	out	0x3e, r29	; 62
   1b314:	0f be       	out	0x3f, r0	; 63
   1b316:	cd bf       	out	0x3d, r28	; 61
   1b318:	da cf       	rjmp	.-76     	; 0x1b2ce <lif_extract_e010_as_ascii+0x6c>
    }

    start = LIF->DIR.FileStartSector;
   1b31a:	f6 01       	movw	r30, r12
   1b31c:	e4 5a       	subi	r30, 0xA4	; 164
   1b31e:	ff 4f       	sbci	r31, 0xFF	; 255
   1b320:	80 80       	ld	r8, Z
   1b322:	91 80       	ldd	r9, Z+1	; 0x01
   1b324:	a2 80       	ldd	r10, Z+2	; 0x02
   1b326:	b3 80       	ldd	r11, Z+3	; 0x03
    end = start + LIF->DIR.FileSectors;
   1b328:	34 96       	adiw	r30, 0x04	; 4
   1b32a:	80 81       	ld	r24, Z
   1b32c:	91 81       	ldd	r25, Z+1	; 0x01
   1b32e:	a2 81       	ldd	r26, Z+2	; 0x02
   1b330:	b3 81       	ldd	r27, Z+3	; 0x03
   1b332:	a5 01       	movw	r20, r10
   1b334:	94 01       	movw	r18, r8
   1b336:	28 0f       	add	r18, r24
   1b338:	39 1f       	adc	r19, r25
   1b33a:	4a 1f       	adc	r20, r26
   1b33c:	5b 1f       	adc	r21, r27
   1b33e:	c9 5d       	subi	r28, 0xD9	; 217
   1b340:	dd 4f       	sbci	r29, 0xFD	; 253
   1b342:	28 83       	st	Y, r18
   1b344:	39 83       	std	Y+1, r19	; 0x01
   1b346:	4a 83       	std	Y+2, r20	; 0x02
   1b348:	5b 83       	std	Y+3, r21	; 0x03
   1b34a:	c7 52       	subi	r28, 0x27	; 39
   1b34c:	d2 40       	sbci	r29, 0x02	; 2

    t = lif_lifbcd2time(LIF->DIR.date);
   1b34e:	c6 01       	movw	r24, r12
   1b350:	8c 59       	subi	r24, 0x9C	; 156
   1b352:	9f 4f       	sbci	r25, 0xFF	; 255
   1b354:	0e 94 1d c7 	call	0x18e3a	; 0x18e3a <lif_lifbcd2time>
   1b358:	c3 5e       	subi	r28, 0xE3	; 227
   1b35a:	dd 4f       	sbci	r29, 0xFD	; 253
   1b35c:	68 83       	st	Y, r22
   1b35e:	79 83       	std	Y+1, r23	; 0x01
   1b360:	8a 83       	std	Y+2, r24	; 0x02
   1b362:	9b 83       	std	Y+3, r25	; 0x03
   1b364:	cd 51       	subi	r28, 0x1D	; 29
   1b366:	d2 40       	sbci	r29, 0x02	; 2

    offset = start * (long) LIF_SECTOR_SIZE;
   1b368:	ba 2d       	mov	r27, r10
   1b36a:	a9 2d       	mov	r26, r9
   1b36c:	98 2d       	mov	r25, r8
   1b36e:	88 27       	eor	r24, r24
   1b370:	cf 5e       	subi	r28, 0xEF	; 239
   1b372:	dd 4f       	sbci	r29, 0xFD	; 253
   1b374:	88 83       	st	Y, r24
   1b376:	99 83       	std	Y+1, r25	; 0x01
   1b378:	aa 83       	std	Y+2, r26	; 0x02
   1b37a:	bb 83       	std	Y+3, r27	; 0x03
   1b37c:	c1 51       	subi	r28, 0x11	; 17
   1b37e:	d2 40       	sbci	r29, 0x02	; 2

    fo = lif_open(username,"wb");
   1b380:	64 e9       	ldi	r22, 0x94	; 148
   1b382:	78 e0       	ldi	r23, 0x08	; 8
   1b384:	c4 5e       	subi	r28, 0xE4	; 228
   1b386:	dd 4f       	sbci	r29, 0xFD	; 253
   1b388:	88 81       	ld	r24, Y
   1b38a:	cc 51       	subi	r28, 0x1C	; 28
   1b38c:	d2 40       	sbci	r29, 0x02	; 2
   1b38e:	9e 2d       	mov	r25, r14
   1b390:	0e 94 ca c2 	call	0x18594	; 0x18594 <lif_open>
   1b394:	c6 5e       	subi	r28, 0xE6	; 230
   1b396:	dd 4f       	sbci	r29, 0xFD	; 253
   1b398:	99 83       	std	Y+1, r25	; 0x01
   1b39a:	88 83       	st	Y, r24
   1b39c:	ca 51       	subi	r28, 0x1A	; 26
   1b39e:	d2 40       	sbci	r29, 0x02	; 2
    if(fo == NULL)
   1b3a0:	89 2b       	or	r24, r25
   1b3a2:	21 f4       	brne	.+8      	; 0x1b3ac <lif_extract_e010_as_ascii+0x14a>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b3a4:	c6 01       	movw	r24, r12
   1b3a6:	0e 94 e8 cb 	call	0x197d0	; 0x197d0 <lif_close_volume>
   1b3aa:	91 cf       	rjmp	.-222    	; 0x1b2ce <lif_extract_e010_as_ascii+0x6c>
    {
        lif_closedir(LIF);
        return(0);
    }

    printf("Extracting: %s\n", username);
   1b3ac:	ef 92       	push	r14
   1b3ae:	c4 5e       	subi	r28, 0xE4	; 228
   1b3b0:	dd 4f       	sbci	r29, 0xFD	; 253
   1b3b2:	98 81       	ld	r25, Y
   1b3b4:	cc 51       	subi	r28, 0x1C	; 28
   1b3b6:	d2 40       	sbci	r29, 0x02	; 2
   1b3b8:	9f 93       	push	r25
   1b3ba:	82 e3       	ldi	r24, 0x32	; 50
   1b3bc:	95 e3       	ldi	r25, 0x35	; 53
   1b3be:	1f 92       	push	r1
   1b3c0:	9f 93       	push	r25
   1b3c2:	8f 93       	push	r24
   1b3c4:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>

    bytes = 0;
    wind = 0;
    ind = 0;

    while(lif_bytes2sectors(offset) <= end)
   1b3c8:	0f 90       	pop	r0
   1b3ca:	0f 90       	pop	r0
   1b3cc:	0f 90       	pop	r0
   1b3ce:	0f 90       	pop	r0
   1b3d0:	0f 90       	pop	r0
    }

    printf("Extracting: %s\n", username);

    bytes = 0;
    wind = 0;
   1b3d2:	81 2c       	mov	r8, r1
   1b3d4:	91 2c       	mov	r9, r1
    uint32_t start, end;    // sectors
    long offset, bytes;     // bytes
    int index;
    int i, len,size;
    int status = 1;
    int done = 0;
   1b3d6:	c8 5e       	subi	r28, 0xE8	; 232
   1b3d8:	dd 4f       	sbci	r29, 0xFD	; 253
   1b3da:	19 82       	std	Y+1, r1	; 0x01
   1b3dc:	18 82       	st	Y, r1
   1b3de:	c8 51       	subi	r28, 0x18	; 24
   1b3e0:	d2 40       	sbci	r29, 0x02	; 2
    lif_t *LIF;
    uint32_t start, end;    // sectors
    long offset, bytes;     // bytes
    int index;
    int i, len,size;
    int status = 1;
   1b3e2:	a1 e0       	ldi	r26, 0x01	; 1
   1b3e4:	cb 5e       	subi	r28, 0xEB	; 235
   1b3e6:	dd 4f       	sbci	r29, 0xFD	; 253
   1b3e8:	a8 83       	st	Y, r26
   1b3ea:	c5 51       	subi	r28, 0x15	; 21
   1b3ec:	d2 40       	sbci	r29, 0x02	; 2
   1b3ee:	f1 2c       	mov	r15, r1
        return(0);
    }

    printf("Extracting: %s\n", username);

    bytes = 0;
   1b3f0:	41 2c       	mov	r4, r1
   1b3f2:	51 2c       	mov	r5, r1
   1b3f4:	32 01       	movw	r6, r4
                        status = 0;
                        done = 1;
                        break;
                    }
                    bytes += size;
                    printf("\tWrote: %8ld\r", bytes);
   1b3f6:	81 e7       	ldi	r24, 0x71	; 113
   1b3f8:	94 e3       	ldi	r25, 0x34	; 52
   1b3fa:	9c 01       	movw	r18, r24
   1b3fc:	40 e0       	ldi	r20, 0x00	; 0
   1b3fe:	cf 5d       	subi	r28, 0xDF	; 223
   1b400:	dd 4f       	sbci	r29, 0xFD	; 253
   1b402:	28 83       	st	Y, r18
   1b404:	39 83       	std	Y+1, r19	; 0x01
   1b406:	4a 83       	std	Y+2, r20	; 0x02
   1b408:	c1 52       	subi	r28, 0x21	; 33
   1b40a:	d2 40       	sbci	r29, 0x02	; 2
                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1b40c:	8f e7       	ldi	r24, 0x7F	; 127
   1b40e:	94 e3       	ldi	r25, 0x34	; 52
   1b410:	9c 01       	movw	r18, r24
   1b412:	40 e0       	ldi	r20, 0x00	; 0
   1b414:	cc 5d       	subi	r28, 0xDC	; 220
   1b416:	dd 4f       	sbci	r29, 0xFD	; 253
   1b418:	28 83       	st	Y, r18
   1b41a:	39 83       	std	Y+1, r19	; 0x01
   1b41c:	4a 83       	std	Y+2, r20	; 0x02
   1b41e:	c4 52       	subi	r28, 0x24	; 36
   1b420:	d2 40       	sbci	r29, 0x02	; 2

    bytes = 0;
    wind = 0;
    ind = 0;

    while(lif_bytes2sectors(offset) <= end)
   1b422:	cf 5e       	subi	r28, 0xEF	; 239
   1b424:	dd 4f       	sbci	r29, 0xFD	; 253
   1b426:	28 81       	ld	r18, Y
   1b428:	39 81       	ldd	r19, Y+1	; 0x01
   1b42a:	4a 81       	ldd	r20, Y+2	; 0x02
   1b42c:	5b 81       	ldd	r21, Y+3	; 0x03
   1b42e:	c1 51       	subi	r28, 0x11	; 17
   1b430:	d2 40       	sbci	r29, 0x02	; 2
   1b432:	bb 27       	eor	r27, r27
   1b434:	a5 2f       	mov	r26, r21
   1b436:	94 2f       	mov	r25, r20
   1b438:	83 2f       	mov	r24, r19
   1b43a:	c9 5d       	subi	r28, 0xD9	; 217
   1b43c:	dd 4f       	sbci	r29, 0xFD	; 253
   1b43e:	28 81       	ld	r18, Y
   1b440:	39 81       	ldd	r19, Y+1	; 0x01
   1b442:	4a 81       	ldd	r20, Y+2	; 0x02
   1b444:	5b 81       	ldd	r21, Y+3	; 0x03
   1b446:	c7 52       	subi	r28, 0x27	; 39
   1b448:	d2 40       	sbci	r29, 0x02	; 2
   1b44a:	28 17       	cp	r18, r24
   1b44c:	39 07       	cpc	r19, r25
   1b44e:	4a 07       	cpc	r20, r26
   1b450:	5b 07       	cpc	r21, r27
   1b452:	08 f4       	brcc	.+2      	; 0x1b456 <lif_extract_e010_as_ascii+0x1f4>
   1b454:	76 c1       	rjmp	.+748    	; 0x1b742 <lif_extract_e010_as_ascii+0x4e0>
    {
        // LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
   1b456:	00 e0       	ldi	r16, 0x00	; 0
   1b458:	11 e0       	ldi	r17, 0x01	; 1
   1b45a:	cf 5e       	subi	r28, 0xEF	; 239
   1b45c:	dd 4f       	sbci	r29, 0xFD	; 253
   1b45e:	28 81       	ld	r18, Y
   1b460:	39 81       	ldd	r19, Y+1	; 0x01
   1b462:	4a 81       	ldd	r20, Y+2	; 0x02
   1b464:	5b 81       	ldd	r21, Y+3	; 0x03
   1b466:	c1 51       	subi	r28, 0x11	; 17
   1b468:	d2 40       	sbci	r29, 0x02	; 2
   1b46a:	be 01       	movw	r22, r28
   1b46c:	6b 5f       	subi	r22, 0xFB	; 251
   1b46e:	7e 4f       	sbci	r23, 0xFE	; 254
   1b470:	c6 01       	movw	r24, r12
   1b472:	0e 94 50 c3 	call	0x186a0	; 0x186a0 <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1b476:	6f 3f       	cpi	r22, 0xFF	; 255
   1b478:	71 05       	cpc	r23, r1
   1b47a:	09 f0       	breq	.+2      	; 0x1b47e <lif_extract_e010_as_ascii+0x21c>
   1b47c:	0c f4       	brge	.+2      	; 0x1b480 <lif_extract_e010_as_ascii+0x21e>
   1b47e:	5b c1       	rjmp	.+694    	; 0x1b736 <lif_extract_e010_as_ascii+0x4d4>
   1b480:	00 e0       	ldi	r16, 0x00	; 0
   1b482:	10 e0       	ldi	r17, 0x00	; 0
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1b484:	c8 5e       	subi	r28, 0xE8	; 232
   1b486:	dd 4f       	sbci	r29, 0xFD	; 253
   1b488:	a8 81       	ld	r26, Y
   1b48a:	b9 81       	ldd	r27, Y+1	; 0x01
   1b48c:	c8 51       	subi	r28, 0x18	; 24
   1b48e:	d2 40       	sbci	r29, 0x02	; 2
   1b490:	ab 2b       	or	r26, r27
   1b492:	09 f0       	breq	.+2      	; 0x1b496 <lif_extract_e010_as_ascii+0x234>
   1b494:	3c c1       	rjmp	.+632    	; 0x1b70e <lif_extract_e010_as_ascii+0x4ac>
        {
            if(buf[ind] == 0xDF || buf[ind] == 0xCF || buf[ind] == 0x6F)
   1b496:	e5 e0       	ldi	r30, 0x05	; 5
   1b498:	f1 e0       	ldi	r31, 0x01	; 1
   1b49a:	ec 0f       	add	r30, r28
   1b49c:	fd 1f       	adc	r31, r29
   1b49e:	e0 0f       	add	r30, r16
   1b4a0:	f1 1f       	adc	r31, r17
   1b4a2:	80 81       	ld	r24, Z
   1b4a4:	98 2f       	mov	r25, r24
   1b4a6:	9f 7e       	andi	r25, 0xEF	; 239
   1b4a8:	9f 3c       	cpi	r25, 0xCF	; 207
   1b4aa:	11 f0       	breq	.+4      	; 0x1b4b0 <lif_extract_e010_as_ascii+0x24e>
   1b4ac:	8f 36       	cpi	r24, 0x6F	; 111
   1b4ae:	d9 f5       	brne	.+118    	; 0x1b526 <lif_extract_e010_as_ascii+0x2c4>
            {
                ++ind;
                len = buf[ind++] & 0xff;
   1b4b0:	e5 e0       	ldi	r30, 0x05	; 5
   1b4b2:	f1 e0       	ldi	r31, 0x01	; 1
   1b4b4:	ec 0f       	add	r30, r28
   1b4b6:	fd 1f       	adc	r31, r29
   1b4b8:	e0 0f       	add	r30, r16
   1b4ba:	f1 1f       	adc	r31, r17
   1b4bc:	21 80       	ldd	r2, Z+1	; 0x01
                len |= ((buf[ind++] & 0xff) <<8); 
   1b4be:	f8 01       	movw	r30, r16
   1b4c0:	32 96       	adiw	r30, 0x02	; 2
   1b4c2:	45 e0       	ldi	r20, 0x05	; 5
   1b4c4:	51 e0       	ldi	r21, 0x01	; 1
   1b4c6:	4c 0f       	add	r20, r28
   1b4c8:	5d 1f       	adc	r21, r29
   1b4ca:	e4 0f       	add	r30, r20
   1b4cc:	f5 1f       	adc	r31, r21
   1b4ce:	0d 5f       	subi	r16, 0xFD	; 253
   1b4d0:	1f 4f       	sbci	r17, 0xFF	; 255
   1b4d2:	80 81       	ld	r24, Z
   1b4d4:	31 2c       	mov	r3, r1
   1b4d6:	38 2a       	or	r3, r24
                // EOF ?
                if(len == 0)
   1b4d8:	21 14       	cp	r2, r1
   1b4da:	31 04       	cpc	r3, r1
   1b4dc:	09 f4       	brne	.+2      	; 0x1b4e0 <lif_extract_e010_as_ascii+0x27e>
   1b4de:	0f c1       	rjmp	.+542    	; 0x1b6fe <lif_extract_e010_as_ascii+0x49c>
                {
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
   1b4e0:	5f ef       	ldi	r21, 0xFF	; 255
   1b4e2:	25 16       	cp	r2, r21
   1b4e4:	31 04       	cpc	r3, r1
   1b4e6:	09 f0       	breq	.+2      	; 0x1b4ea <lif_extract_e010_as_ascii+0x288>
   1b4e8:	7c f4       	brge	.+30     	; 0x1b508 <lif_extract_e010_as_ascii+0x2a6>
   1b4ea:	ca 5e       	subi	r28, 0xEA	; 234
   1b4ec:	dd 4f       	sbci	r29, 0xFD	; 253
   1b4ee:	19 82       	std	Y+1, r1	; 0x01
   1b4f0:	18 82       	st	Y, r1
   1b4f2:	c6 51       	subi	r28, 0x16	; 22
   1b4f4:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
            // write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
   1b4f6:	c1 01       	movw	r24, r2
   1b4f8:	01 97       	sbiw	r24, 0x01	; 1
   1b4fa:	c5 5d       	subi	r28, 0xD5	; 213
   1b4fc:	dd 4f       	sbci	r29, 0xFD	; 253
   1b4fe:	99 83       	std	Y+1, r25	; 0x01
   1b500:	88 83       	st	Y, r24
   1b502:	cb 52       	subi	r28, 0x2B	; 43
   1b504:	d2 40       	sbci	r29, 0x02	; 2
   1b506:	7b c0       	rjmp	.+246    	; 0x1b5fe <lif_extract_e010_as_ascii+0x39c>
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
                {
                    printf("lif_extract_e010_as_ascii: string too big size = %d\n", (int)len);
   1b508:	3f 92       	push	r3
   1b50a:	2f 92       	push	r2
   1b50c:	8d ef       	ldi	r24, 0xFD	; 253
   1b50e:	94 e3       	ldi	r25, 0x34	; 52
   1b510:	1f 92       	push	r1
   1b512:	9f 93       	push	r25
   1b514:	8f 93       	push	r24
   1b516:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
                    status = 0;
                    done = 1;
                    break;
   1b51a:	0f 90       	pop	r0
   1b51c:	0f 90       	pop	r0
   1b51e:	0f 90       	pop	r0
   1b520:	0f 90       	pop	r0
   1b522:	0f 90       	pop	r0
   1b524:	2b c0       	rjmp	.+86     	; 0x1b57c <lif_extract_e010_as_ascii+0x31a>
                }
            }
            else if(buf[ind] == 0xEF)
   1b526:	8f 3e       	cpi	r24, 0xEF	; 239
   1b528:	09 f4       	brne	.+2      	; 0x1b52c <lif_extract_e010_as_ascii+0x2ca>
   1b52a:	f1 c0       	rjmp	.+482    	; 0x1b70e <lif_extract_e010_as_ascii+0x4ac>
                ind = 0;
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
   1b52c:	1f 93       	push	r17
   1b52e:	0f 93       	push	r16
   1b530:	cc 5e       	subi	r28, 0xEC	; 236
   1b532:	dd 4f       	sbci	r29, 0xFD	; 253
   1b534:	b8 81       	ld	r27, Y
   1b536:	c4 51       	subi	r28, 0x14	; 20
   1b538:	d2 40       	sbci	r29, 0x02	; 2
   1b53a:	bf 93       	push	r27
   1b53c:	cd 5e       	subi	r28, 0xED	; 237
   1b53e:	dd 4f       	sbci	r29, 0xFD	; 253
   1b540:	28 81       	ld	r18, Y
   1b542:	c3 51       	subi	r28, 0x13	; 19
   1b544:	d2 40       	sbci	r29, 0x02	; 2
   1b546:	2f 93       	push	r18
   1b548:	ce 5e       	subi	r28, 0xEE	; 238
   1b54a:	dd 4f       	sbci	r29, 0xFD	; 253
   1b54c:	38 81       	ld	r19, Y
   1b54e:	c2 51       	subi	r28, 0x12	; 18
   1b550:	d2 40       	sbci	r29, 0x02	; 2
   1b552:	3f 93       	push	r19
   1b554:	cf 5e       	subi	r28, 0xEF	; 239
   1b556:	dd 4f       	sbci	r29, 0xFD	; 253
   1b558:	48 81       	ld	r20, Y
   1b55a:	c1 51       	subi	r28, 0x11	; 17
   1b55c:	d2 40       	sbci	r29, 0x02	; 2
   1b55e:	4f 93       	push	r20
   1b560:	1f 92       	push	r1
   1b562:	8f 93       	push	r24
   1b564:	87 ea       	ldi	r24, 0xA7	; 167
   1b566:	94 e3       	ldi	r25, 0x34	; 52
   1b568:	1f 92       	push	r1
   1b56a:	9f 93       	push	r25
   1b56c:	8f 93       	push	r24
   1b56e:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
                status = 0;
                done = 1;
                break;
   1b572:	0f b6       	in	r0, 0x3f	; 63
   1b574:	f8 94       	cli
   1b576:	de bf       	out	0x3e, r29	; 62
   1b578:	0f be       	out	0x3f, r0	; 63
   1b57a:	cd bf       	out	0x3d, r28	; 61
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
                status = 0;
                done = 1;
   1b57c:	a1 e0       	ldi	r26, 0x01	; 1
   1b57e:	b0 e0       	ldi	r27, 0x00	; 0
   1b580:	c8 5e       	subi	r28, 0xE8	; 232
   1b582:	dd 4f       	sbci	r29, 0xFD	; 253
   1b584:	b9 83       	std	Y+1, r27	; 0x01
   1b586:	a8 83       	st	Y, r26
   1b588:	c8 51       	subi	r28, 0x18	; 24
   1b58a:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
                status = 0;
   1b58c:	cb 5e       	subi	r28, 0xEB	; 235
   1b58e:	dd 4f       	sbci	r29, 0xFD	; 253
   1b590:	18 82       	st	Y, r1
   1b592:	c5 51       	subi	r28, 0x15	; 21
   1b594:	d2 40       	sbci	r29, 0x02	; 2
   1b596:	f1 2c       	mov	r15, r1
                done = 1;
                break;
   1b598:	ba c0       	rjmp	.+372    	; 0x1b70e <lif_extract_e010_as_ascii+0x4ac>
            }
            // write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1b59a:	0f 3f       	cpi	r16, 0xFF	; 255
   1b59c:	11 05       	cpc	r17, r1
   1b59e:	11 f0       	breq	.+4      	; 0x1b5a4 <lif_extract_e010_as_ascii+0x342>
   1b5a0:	0c f0       	brlt	.+2      	; 0x1b5a4 <lif_extract_e010_as_ascii+0x342>
   1b5a2:	b5 c0       	rjmp	.+362    	; 0x1b70e <lif_extract_e010_as_ascii+0x4ac>
            {
                if(buf[ind] == '\r' && i == len-1)
   1b5a4:	e5 e0       	ldi	r30, 0x05	; 5
   1b5a6:	f1 e0       	ldi	r31, 0x01	; 1
   1b5a8:	ec 0f       	add	r30, r28
   1b5aa:	fd 1f       	adc	r31, r29
   1b5ac:	e0 0f       	add	r30, r16
   1b5ae:	f1 1f       	adc	r31, r17
   1b5b0:	20 81       	ld	r18, Z
   1b5b2:	a4 01       	movw	r20, r8
   1b5b4:	4f 5f       	subi	r20, 0xFF	; 255
   1b5b6:	5f 4f       	sbci	r21, 0xFF	; 255
   1b5b8:	5a 01       	movw	r10, r20
   1b5ba:	2d 30       	cpi	r18, 0x0D	; 13
   1b5bc:	51 f1       	breq	.+84     	; 0x1b612 <lif_extract_e010_as_ascii+0x3b0>
                    ++ind;
                    break;
                }
                else 
                {
                    wbuf[wind++] = buf[ind++];
   1b5be:	9a 2d       	mov	r25, r10
   1b5c0:	8b 2d       	mov	r24, r11
   1b5c2:	0f 5f       	subi	r16, 0xFF	; 255
   1b5c4:	1f 4f       	sbci	r17, 0xFF	; 255
   1b5c6:	e1 e0       	ldi	r30, 0x01	; 1
   1b5c8:	f0 e0       	ldi	r31, 0x00	; 0
   1b5ca:	ec 0f       	add	r30, r28
   1b5cc:	fd 1f       	adc	r31, r29
   1b5ce:	e8 0d       	add	r30, r8
   1b5d0:	f9 1d       	adc	r31, r9
   1b5d2:	20 83       	st	Z, r18
                }

                if(wind >= LIF_SECTOR_SIZE)
   1b5d4:	2f ef       	ldi	r18, 0xFF	; 255
   1b5d6:	a2 16       	cp	r10, r18
   1b5d8:	b1 04       	cpc	r11, r1
   1b5da:	09 f0       	breq	.+2      	; 0x1b5de <lif_extract_e010_as_ascii+0x37c>
   1b5dc:	ac f5       	brge	.+106    	; 0x1b648 <lif_extract_e010_as_ascii+0x3e6>
                status = 0;
                done = 1;
                break;
            }
            // write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1b5de:	ca 5e       	subi	r28, 0xEA	; 234
   1b5e0:	dd 4f       	sbci	r29, 0xFD	; 253
   1b5e2:	48 81       	ld	r20, Y
   1b5e4:	59 81       	ldd	r21, Y+1	; 0x01
   1b5e6:	c6 51       	subi	r28, 0x16	; 22
   1b5e8:	d2 40       	sbci	r29, 0x02	; 2
   1b5ea:	4f 5f       	subi	r20, 0xFF	; 255
   1b5ec:	5f 4f       	sbci	r21, 0xFF	; 255
   1b5ee:	ca 5e       	subi	r28, 0xEA	; 234
   1b5f0:	dd 4f       	sbci	r29, 0xFD	; 253
   1b5f2:	59 83       	std	Y+1, r21	; 0x01
   1b5f4:	48 83       	st	Y, r20
   1b5f6:	c6 51       	subi	r28, 0x16	; 22
   1b5f8:	d2 40       	sbci	r29, 0x02	; 2
   1b5fa:	89 2e       	mov	r8, r25
   1b5fc:	98 2e       	mov	r9, r24
   1b5fe:	ca 5e       	subi	r28, 0xEA	; 234
   1b600:	dd 4f       	sbci	r29, 0xFD	; 253
   1b602:	88 81       	ld	r24, Y
   1b604:	99 81       	ldd	r25, Y+1	; 0x01
   1b606:	c6 51       	subi	r28, 0x16	; 22
   1b608:	d2 40       	sbci	r29, 0x02	; 2
   1b60a:	82 15       	cp	r24, r2
   1b60c:	93 05       	cpc	r25, r3
   1b60e:	2c f2       	brlt	.-118    	; 0x1b59a <lif_extract_e010_as_ascii+0x338>
   1b610:	70 c0       	rjmp	.+224    	; 0x1b6f2 <lif_extract_e010_as_ascii+0x490>
            {
                if(buf[ind] == '\r' && i == len-1)
   1b612:	ca 5e       	subi	r28, 0xEA	; 234
   1b614:	dd 4f       	sbci	r29, 0xFD	; 253
   1b616:	88 81       	ld	r24, Y
   1b618:	99 81       	ldd	r25, Y+1	; 0x01
   1b61a:	c6 51       	subi	r28, 0x16	; 22
   1b61c:	d2 40       	sbci	r29, 0x02	; 2
   1b61e:	c5 5d       	subi	r28, 0xD5	; 213
   1b620:	dd 4f       	sbci	r29, 0xFD	; 253
   1b622:	a8 81       	ld	r26, Y
   1b624:	b9 81       	ldd	r27, Y+1	; 0x01
   1b626:	cb 52       	subi	r28, 0x2B	; 43
   1b628:	d2 40       	sbci	r29, 0x02	; 2
   1b62a:	8a 17       	cp	r24, r26
   1b62c:	9b 07       	cpc	r25, r27
   1b62e:	39 f6       	brne	.-114    	; 0x1b5be <lif_extract_e010_as_ascii+0x35c>
                {
                    wbuf[wind++] = '\n';
   1b630:	e1 e0       	ldi	r30, 0x01	; 1
   1b632:	f0 e0       	ldi	r31, 0x00	; 0
   1b634:	ec 0f       	add	r30, r28
   1b636:	fd 1f       	adc	r31, r29
   1b638:	e8 0d       	add	r30, r8
   1b63a:	f9 1d       	adc	r31, r9
   1b63c:	ba e0       	ldi	r27, 0x0A	; 10
   1b63e:	b0 83       	st	Z, r27
                    ++ind;
   1b640:	0f 5f       	subi	r16, 0xFF	; 255
   1b642:	1f 4f       	sbci	r17, 0xFF	; 255
            // write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
                {
                    wbuf[wind++] = '\n';
   1b644:	4a 01       	movw	r8, r20
                    ++ind;
                    break;
   1b646:	55 c0       	rjmp	.+170    	; 0x1b6f2 <lif_extract_e010_as_ascii+0x490>
                    wbuf[wind++] = buf[ind++];
                }

                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
   1b648:	c6 5e       	subi	r28, 0xE6	; 230
   1b64a:	dd 4f       	sbci	r29, 0xFD	; 253
   1b64c:	28 81       	ld	r18, Y
   1b64e:	39 81       	ldd	r19, Y+1	; 0x01
   1b650:	ca 51       	subi	r28, 0x1A	; 26
   1b652:	d2 40       	sbci	r29, 0x02	; 2
   1b654:	a5 01       	movw	r20, r10
   1b656:	61 e0       	ldi	r22, 0x01	; 1
   1b658:	70 e0       	ldi	r23, 0x00	; 0
   1b65a:	ce 01       	movw	r24, r28
   1b65c:	01 96       	adiw	r24, 0x01	; 1
   1b65e:	0e 94 6b 7d 	call	0xfad6	; 0xfad6 <fwrite>
                    if(size < wind)
   1b662:	8a 15       	cp	r24, r10
   1b664:	9b 05       	cpc	r25, r11
   1b666:	14 f5       	brge	.+68     	; 0x1b6ac <lif_extract_e010_as_ascii+0x44a>
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1b668:	1f 92       	push	r1
   1b66a:	cb 5d       	subi	r28, 0xDB	; 219
   1b66c:	dd 4f       	sbci	r29, 0xFD	; 253
   1b66e:	38 81       	ld	r19, Y
   1b670:	c5 52       	subi	r28, 0x25	; 37
   1b672:	d2 40       	sbci	r29, 0x02	; 2
   1b674:	3f 93       	push	r19
   1b676:	cc 5d       	subi	r28, 0xDC	; 220
   1b678:	dd 4f       	sbci	r29, 0xFD	; 253
   1b67a:	48 81       	ld	r20, Y
   1b67c:	c4 52       	subi	r28, 0x24	; 36
   1b67e:	d2 40       	sbci	r29, 0x02	; 2
   1b680:	4f 93       	push	r20
   1b682:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
                        status = 0;
                        done = 1;
                        break;
   1b686:	0f 90       	pop	r0
   1b688:	0f 90       	pop	r0
   1b68a:	0f 90       	pop	r0
                    ++ind;
                    break;
                }
                else 
                {
                    wbuf[wind++] = buf[ind++];
   1b68c:	45 01       	movw	r8, r10
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
                        done = 1;
   1b68e:	81 e0       	ldi	r24, 0x01	; 1
   1b690:	90 e0       	ldi	r25, 0x00	; 0
   1b692:	c8 5e       	subi	r28, 0xE8	; 232
   1b694:	dd 4f       	sbci	r29, 0xFD	; 253
   1b696:	99 83       	std	Y+1, r25	; 0x01
   1b698:	88 83       	st	Y, r24
   1b69a:	c8 51       	subi	r28, 0x18	; 24
   1b69c:	d2 40       	sbci	r29, 0x02	; 2
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
   1b69e:	cb 5e       	subi	r28, 0xEB	; 235
   1b6a0:	dd 4f       	sbci	r29, 0xFD	; 253
   1b6a2:	18 82       	st	Y, r1
   1b6a4:	c5 51       	subi	r28, 0x15	; 21
   1b6a6:	d2 40       	sbci	r29, 0x02	; 2
   1b6a8:	f1 2c       	mov	r15, r1
                        done = 1;
                        break;
   1b6aa:	23 c0       	rjmp	.+70     	; 0x1b6f2 <lif_extract_e010_as_ascii+0x490>
                    }
                    bytes += size;
   1b6ac:	09 2e       	mov	r0, r25
   1b6ae:	00 0c       	add	r0, r0
   1b6b0:	aa 0b       	sbc	r26, r26
   1b6b2:	bb 0b       	sbc	r27, r27
   1b6b4:	48 0e       	add	r4, r24
   1b6b6:	59 1e       	adc	r5, r25
   1b6b8:	6a 1e       	adc	r6, r26
   1b6ba:	7b 1e       	adc	r7, r27
                    printf("\tWrote: %8ld\r", bytes);
   1b6bc:	7f 92       	push	r7
   1b6be:	6f 92       	push	r6
   1b6c0:	5f 92       	push	r5
   1b6c2:	4f 92       	push	r4
   1b6c4:	1f 92       	push	r1
   1b6c6:	ce 5d       	subi	r28, 0xDE	; 222
   1b6c8:	dd 4f       	sbci	r29, 0xFD	; 253
   1b6ca:	98 81       	ld	r25, Y
   1b6cc:	c2 52       	subi	r28, 0x22	; 34
   1b6ce:	d2 40       	sbci	r29, 0x02	; 2
   1b6d0:	9f 93       	push	r25
   1b6d2:	cf 5d       	subi	r28, 0xDF	; 223
   1b6d4:	dd 4f       	sbci	r29, 0xFD	; 253
   1b6d6:	a8 81       	ld	r26, Y
   1b6d8:	c1 52       	subi	r28, 0x21	; 33
   1b6da:	d2 40       	sbci	r29, 0x02	; 2
   1b6dc:	af 93       	push	r26
   1b6de:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1b6e2:	0f b6       	in	r0, 0x3f	; 63
   1b6e4:	f8 94       	cli
   1b6e6:	de bf       	out	0x3e, r29	; 62
   1b6e8:	0f be       	out	0x3f, r0	; 63
   1b6ea:	cd bf       	out	0x3d, r28	; 61
                    wind = 0;
   1b6ec:	90 e0       	ldi	r25, 0x00	; 0
   1b6ee:	80 e0       	ldi	r24, 0x00	; 0
   1b6f0:	76 cf       	rjmp	.-276    	; 0x1b5de <lif_extract_e010_as_ascii+0x37c>
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1b6f2:	0f 3f       	cpi	r16, 0xFF	; 255
   1b6f4:	11 05       	cpc	r17, r1
   1b6f6:	09 f0       	breq	.+2      	; 0x1b6fa <lif_extract_e010_as_ascii+0x498>
   1b6f8:	0c f4       	brge	.+2      	; 0x1b6fc <lif_extract_e010_as_ascii+0x49a>
   1b6fa:	c4 ce       	rjmp	.-632    	; 0x1b484 <lif_extract_e010_as_ascii+0x222>
   1b6fc:	08 c0       	rjmp	.+16     	; 0x1b70e <lif_extract_e010_as_ascii+0x4ac>
                len = buf[ind++] & 0xff;
                len |= ((buf[ind++] & 0xff) <<8); 
                // EOF ?
                if(len == 0)
                {
                    done = 1;
   1b6fe:	21 e0       	ldi	r18, 0x01	; 1
   1b700:	30 e0       	ldi	r19, 0x00	; 0
   1b702:	c8 5e       	subi	r28, 0xE8	; 232
   1b704:	dd 4f       	sbci	r29, 0xFD	; 253
   1b706:	39 83       	std	Y+1, r19	; 0x01
   1b708:	28 83       	st	Y, r18
   1b70a:	c8 51       	subi	r28, 0x18	; 24
   1b70c:	d2 40       	sbci	r29, 0x02	; 2

            }   // for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)

        }   // while(ind < LIF_SECTOR_SIZE && status)

        offset += (long) LIF_SECTOR_SIZE;
   1b70e:	cf 5e       	subi	r28, 0xEF	; 239
   1b710:	dd 4f       	sbci	r29, 0xFD	; 253
   1b712:	88 81       	ld	r24, Y
   1b714:	99 81       	ldd	r25, Y+1	; 0x01
   1b716:	aa 81       	ldd	r26, Y+2	; 0x02
   1b718:	bb 81       	ldd	r27, Y+3	; 0x03
   1b71a:	c1 51       	subi	r28, 0x11	; 17
   1b71c:	d2 40       	sbci	r29, 0x02	; 2
   1b71e:	9f 5f       	subi	r25, 0xFF	; 255
   1b720:	af 4f       	sbci	r26, 0xFF	; 255
   1b722:	bf 4f       	sbci	r27, 0xFF	; 255
   1b724:	cf 5e       	subi	r28, 0xEF	; 239
   1b726:	dd 4f       	sbci	r29, 0xFD	; 253
   1b728:	88 83       	st	Y, r24
   1b72a:	99 83       	std	Y+1, r25	; 0x01
   1b72c:	aa 83       	std	Y+2, r26	; 0x02
   1b72e:	bb 83       	std	Y+3, r27	; 0x03
   1b730:	c1 51       	subi	r28, 0x11	; 17
   1b732:	d2 40       	sbci	r29, 0x02	; 2
   1b734:	76 ce       	rjmp	.-788    	; 0x1b422 <lif_extract_e010_as_ascii+0x1c0>
    {
        // LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
        if(size < LIF_SECTOR_SIZE)
        {
            status = 0;
   1b736:	cb 5e       	subi	r28, 0xEB	; 235
   1b738:	dd 4f       	sbci	r29, 0xFD	; 253
   1b73a:	18 82       	st	Y, r1
   1b73c:	c5 51       	subi	r28, 0x15	; 21
   1b73e:	d2 40       	sbci	r29, 0x02	; 2
   1b740:	f1 2c       	mov	r15, r1
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b742:	c6 01       	movw	r24, r12
   1b744:	0e 94 e8 cb 	call	0x197d0	; 0x197d0 <lif_close_volume>

    }   // while(offset <= end)

    lif_closedir(LIF);
    // Flush any remaining bytes
    if(wind)
   1b748:	81 14       	cp	r8, r1
   1b74a:	91 04       	cpc	r9, r1
   1b74c:	51 f1       	breq	.+84     	; 0x1b7a2 <lif_extract_e010_as_ascii+0x540>
    {
        size = fwrite(wbuf,1,wind,fo);
   1b74e:	c6 5e       	subi	r28, 0xE6	; 230
   1b750:	dd 4f       	sbci	r29, 0xFD	; 253
   1b752:	28 81       	ld	r18, Y
   1b754:	39 81       	ldd	r19, Y+1	; 0x01
   1b756:	ca 51       	subi	r28, 0x1A	; 26
   1b758:	d2 40       	sbci	r29, 0x02	; 2
   1b75a:	a4 01       	movw	r20, r8
   1b75c:	61 e0       	ldi	r22, 0x01	; 1
   1b75e:	70 e0       	ldi	r23, 0x00	; 0
   1b760:	ce 01       	movw	r24, r28
   1b762:	01 96       	adiw	r24, 0x01	; 1
   1b764:	0e 94 6b 7d 	call	0xfad6	; 0xfad6 <fwrite>
   1b768:	8c 01       	movw	r16, r24
        if(size < wind)
   1b76a:	88 15       	cp	r24, r8
   1b76c:	99 05       	cpc	r25, r9
   1b76e:	84 f4       	brge	.+32     	; 0x1b790 <lif_extract_e010_as_ascii+0x52e>
        {
            printf("lif_extract_e010_as_ascii: write error\n");
   1b770:	89 e4       	ldi	r24, 0x49	; 73
   1b772:	94 e3       	ldi	r25, 0x34	; 52
   1b774:	1f 92       	push	r1
   1b776:	9f 93       	push	r25
   1b778:	8f 93       	push	r24
   1b77a:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1b77e:	0f 90       	pop	r0
   1b780:	0f 90       	pop	r0
   1b782:	0f 90       	pop	r0
            status = 0;
   1b784:	cb 5e       	subi	r28, 0xEB	; 235
   1b786:	dd 4f       	sbci	r29, 0xFD	; 253
   1b788:	18 82       	st	Y, r1
   1b78a:	c5 51       	subi	r28, 0x15	; 21
   1b78c:	d2 40       	sbci	r29, 0x02	; 2
   1b78e:	f1 2c       	mov	r15, r1
        }
        bytes += size;
   1b790:	c8 01       	movw	r24, r16
   1b792:	01 2e       	mov	r0, r17
   1b794:	00 0c       	add	r0, r0
   1b796:	aa 0b       	sbc	r26, r26
   1b798:	bb 0b       	sbc	r27, r27
   1b79a:	48 0e       	add	r4, r24
   1b79c:	59 1e       	adc	r5, r25
   1b79e:	6a 1e       	adc	r6, r26
   1b7a0:	7b 1e       	adc	r7, r27
    }
    fclose(fo);
   1b7a2:	c6 5e       	subi	r28, 0xE6	; 230
   1b7a4:	dd 4f       	sbci	r29, 0xFD	; 253
   1b7a6:	88 81       	ld	r24, Y
   1b7a8:	99 81       	ldd	r25, Y+1	; 0x01
   1b7aa:	ca 51       	subi	r28, 0x1A	; 26
   1b7ac:	d2 40       	sbci	r29, 0x02	; 2
   1b7ae:	0e 94 ed 7d 	call	0xfbda	; 0xfbda <fclose>
    if(t)
   1b7b2:	c3 5e       	subi	r28, 0xE3	; 227
   1b7b4:	dd 4f       	sbci	r29, 0xFD	; 253
   1b7b6:	88 81       	ld	r24, Y
   1b7b8:	99 81       	ldd	r25, Y+1	; 0x01
   1b7ba:	aa 81       	ldd	r26, Y+2	; 0x02
   1b7bc:	bb 81       	ldd	r27, Y+3	; 0x03
   1b7be:	cd 51       	subi	r28, 0x1D	; 29
   1b7c0:	d2 40       	sbci	r29, 0x02	; 2
   1b7c2:	00 97       	sbiw	r24, 0x00	; 0
   1b7c4:	a1 05       	cpc	r26, r1
   1b7c6:	b1 05       	cpc	r27, r1
   1b7c8:	d9 f0       	breq	.+54     	; 0x1b800 <lif_extract_e010_as_ascii+0x59e>
    {
        struct utimbuf times;
        times.modtime = t;
   1b7ca:	c3 5f       	subi	r28, 0xF3	; 243
   1b7cc:	dd 4f       	sbci	r29, 0xFD	; 253
   1b7ce:	88 83       	st	Y, r24
   1b7d0:	99 83       	std	Y+1, r25	; 0x01
   1b7d2:	aa 83       	std	Y+2, r26	; 0x02
   1b7d4:	bb 83       	std	Y+3, r27	; 0x03
   1b7d6:	cd 50       	subi	r28, 0x0D	; 13
   1b7d8:	d2 40       	sbci	r29, 0x02	; 2
        times.actime = t;
   1b7da:	c7 5f       	subi	r28, 0xF7	; 247
   1b7dc:	dd 4f       	sbci	r29, 0xFD	; 253
   1b7de:	88 83       	st	Y, r24
   1b7e0:	99 83       	std	Y+1, r25	; 0x01
   1b7e2:	aa 83       	std	Y+2, r26	; 0x02
   1b7e4:	bb 83       	std	Y+3, r27	; 0x03
   1b7e6:	c9 50       	subi	r28, 0x09	; 9
   1b7e8:	d2 40       	sbci	r29, 0x02	; 2
        utime(username, (struct utimbuf *) &times);
   1b7ea:	be 01       	movw	r22, r28
   1b7ec:	67 5f       	subi	r22, 0xF7	; 247
   1b7ee:	7d 4f       	sbci	r23, 0xFD	; 253
   1b7f0:	c4 5e       	subi	r28, 0xE4	; 228
   1b7f2:	dd 4f       	sbci	r29, 0xFD	; 253
   1b7f4:	88 81       	ld	r24, Y
   1b7f6:	cc 51       	subi	r28, 0x1C	; 28
   1b7f8:	d2 40       	sbci	r29, 0x02	; 2
   1b7fa:	9e 2d       	mov	r25, r14
   1b7fc:	0e 94 2b 7b 	call	0xf656	; 0xf656 <utime>
    }
    sync();
   1b800:	0e 94 e8 7c 	call	0xf9d0	; 0xf9d0 <sync>
    printf("\tWrote: %8ld\n", bytes);
   1b804:	7f 92       	push	r7
   1b806:	6f 92       	push	r6
   1b808:	5f 92       	push	r5
   1b80a:	4f 92       	push	r4
   1b80c:	8b e3       	ldi	r24, 0x3B	; 59
   1b80e:	94 e3       	ldi	r25, 0x34	; 52
   1b810:	1f 92       	push	r1
   1b812:	9f 93       	push	r25
   1b814:	8f 93       	push	r24
   1b816:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    return(status);
   1b81a:	0f b6       	in	r0, 0x3f	; 63
   1b81c:	f8 94       	cli
   1b81e:	de bf       	out	0x3e, r29	; 62
   1b820:	0f be       	out	0x3f, r0	; 63
   1b822:	cd bf       	out	0x3d, r28	; 61
   1b824:	cb 5e       	subi	r28, 0xEB	; 235
   1b826:	dd 4f       	sbci	r29, 0xFD	; 253
   1b828:	88 81       	ld	r24, Y
   1b82a:	c5 51       	subi	r28, 0x15	; 21
   1b82c:	d2 40       	sbci	r29, 0x02	; 2
   1b82e:	9f 2d       	mov	r25, r15
}
   1b830:	c4 5d       	subi	r28, 0xD4	; 212
   1b832:	dd 4f       	sbci	r29, 0xFD	; 253
   1b834:	e2 e1       	ldi	r30, 0x12	; 18
   1b836:	0c 94 0f e6 	jmp	0x1cc1e	; 0x1cc1e <__epilogue_restores__>

0001b83a <lif_extract_lif_as_lif>:
/// @param[in] lifname:  name of file in LIF image we want to extract
/// @param[in] username: new LIF file to create
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_lif_as_lif(char *lifimagename, char *lifname, char *username)
{
   1b83a:	ad e0       	ldi	r26, 0x0D	; 13
   1b83c:	b1 e0       	ldi	r27, 0x01	; 1
   1b83e:	e3 e2       	ldi	r30, 0x23	; 35
   1b840:	fc ed       	ldi	r31, 0xDC	; 220
   1b842:	0c 94 f3 e5 	jmp	0x1cbe6	; 0x1cbe6 <__prologue_saves__>
   1b846:	f8 2e       	mov	r15, r24
   1b848:	e9 2e       	mov	r14, r25
   1b84a:	16 2f       	mov	r17, r22
   1b84c:	07 2f       	mov	r16, r23
   1b84e:	3a 01       	movw	r6, r20
    int i, size;
    int sectors;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    LIF = lif_open_volume(lifimagename,"r");
   1b850:	61 e4       	ldi	r22, 0x41	; 65
   1b852:	77 e0       	ldi	r23, 0x07	; 7
   1b854:	0e 94 e0 d2 	call	0x1a5c0	; 0x1a5c0 <lif_open_volume>
   1b858:	4c 01       	movw	r8, r24
    if(LIF == NULL)
   1b85a:	00 97       	sbiw	r24, 0x00	; 0
   1b85c:	51 f4       	brne	.+20     	; 0x1b872 <lif_extract_lif_as_lif+0x38>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1b85e:	ef 92       	push	r14
   1b860:	ff 92       	push	r15
   1b862:	83 e2       	ldi	r24, 0x23	; 35
   1b864:	94 e3       	ldi	r25, 0x34	; 52
   1b866:	1f 92       	push	r1
   1b868:	9f 93       	push	r25
   1b86a:	8f 93       	push	r24
   1b86c:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1b870:	11 c0       	rjmp	.+34     	; 0x1b894 <lif_extract_lif_as_lif+0x5a>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1b872:	61 2f       	mov	r22, r17
   1b874:	70 2f       	mov	r23, r16
   1b876:	38 d9       	rcall	.-3472   	; 0x1aae8 <lif_find_file>
    if(index == -1)
   1b878:	01 96       	adiw	r24, 0x01	; 1
   1b87a:	a1 f4       	brne	.+40     	; 0x1b8a4 <lif_extract_lif_as_lif+0x6a>
    {
        printf("File not found:%s\n", lifname);
   1b87c:	0f 93       	push	r16
   1b87e:	1f 93       	push	r17
   1b880:	80 e1       	ldi	r24, 0x10	; 16
   1b882:	94 e3       	ldi	r25, 0x34	; 52
   1b884:	1f 92       	push	r1
   1b886:	9f 93       	push	r25
   1b888:	8f 93       	push	r24
   1b88a:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b88e:	c4 01       	movw	r24, r8
   1b890:	0e 94 e8 cb 	call	0x197d0	; 0x197d0 <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1b894:	0f 90       	pop	r0
   1b896:	0f 90       	pop	r0
   1b898:	0f 90       	pop	r0
   1b89a:	0f 90       	pop	r0
   1b89c:	0f 90       	pop	r0
   1b89e:	00 e0       	ldi	r16, 0x00	; 0
   1b8a0:	10 e0       	ldi	r17, 0x00	; 0
   1b8a2:	0c c1       	rjmp	.+536    	; 0x1babc <lif_extract_lif_as_lif+0x282>
    }

    sectors = LIF->DIR.FileSectors;
   1b8a4:	a4 01       	movw	r20, r8
   1b8a6:	40 5a       	subi	r20, 0xA0	; 160
   1b8a8:	5f 4f       	sbci	r21, 0xFF	; 255
   1b8aa:	c4 5f       	subi	r28, 0xF4	; 244
   1b8ac:	de 4f       	sbci	r29, 0xFE	; 254
   1b8ae:	59 83       	std	Y+1, r21	; 0x01
   1b8b0:	48 83       	st	Y, r20
   1b8b2:	cc 50       	subi	r28, 0x0C	; 12
   1b8b4:	d1 40       	sbci	r29, 0x01	; 1

    //Initialize the user file lif_t structure
    ULIF = lif_create_volume(username, "HFSLIF",1,1,sectors);
   1b8b6:	da 01       	movw	r26, r20
   1b8b8:	ad 90       	ld	r10, X+
   1b8ba:	bc 90       	ld	r11, X
   1b8bc:	0b 2c       	mov	r0, r11
   1b8be:	00 0c       	add	r0, r0
   1b8c0:	cc 08       	sbc	r12, r12
   1b8c2:	dd 08       	sbc	r13, r13
   1b8c4:	e1 2c       	mov	r14, r1
   1b8c6:	f1 2c       	mov	r15, r1
   1b8c8:	87 01       	movw	r16, r14
   1b8ca:	e3 94       	inc	r14
   1b8cc:	21 e0       	ldi	r18, 0x01	; 1
   1b8ce:	30 e0       	ldi	r19, 0x00	; 0
   1b8d0:	40 e0       	ldi	r20, 0x00	; 0
   1b8d2:	50 e0       	ldi	r21, 0x00	; 0
   1b8d4:	6f ee       	ldi	r22, 0xEF	; 239
   1b8d6:	75 e1       	ldi	r23, 0x15	; 21
   1b8d8:	c3 01       	movw	r24, r6
   1b8da:	0e 94 4e ce 	call	0x19c9c	; 0x19c9c <lif_create_volume>
   1b8de:	5c 01       	movw	r10, r24
    if(ULIF == NULL)
   1b8e0:	89 2b       	or	r24, r25
   1b8e2:	11 f4       	brne	.+4      	; 0x1b8e8 <lif_extract_lif_as_lif+0xae>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b8e4:	c4 01       	movw	r24, r8
   1b8e6:	cf c0       	rjmp	.+414    	; 0x1ba86 <lif_extract_lif_as_lif+0x24c>
    }

    // Only the start sector changes

    // Copy directory record
    ULIF->DIR = LIF->DIR;
   1b8e8:	81 e2       	ldi	r24, 0x21	; 33
   1b8ea:	f4 01       	movw	r30, r8
   1b8ec:	e1 5b       	subi	r30, 0xB1	; 177
   1b8ee:	ff 4f       	sbci	r31, 0xFF	; 255
   1b8f0:	d5 01       	movw	r26, r10
   1b8f2:	a1 5b       	subi	r26, 0xB1	; 177
   1b8f4:	bf 4f       	sbci	r27, 0xFF	; 255
   1b8f6:	01 90       	ld	r0, Z+
   1b8f8:	0d 92       	st	X+, r0
   1b8fa:	8a 95       	dec	r24
   1b8fc:	e1 f7       	brne	.-8      	; 0x1b8f6 <lif_extract_lif_as_lif+0xbc>

    ULIF->DIR.FileStartSector = 2;
   1b8fe:	82 e0       	ldi	r24, 0x02	; 2
   1b900:	90 e0       	ldi	r25, 0x00	; 0
   1b902:	a0 e0       	ldi	r26, 0x00	; 0
   1b904:	b0 e0       	ldi	r27, 0x00	; 0
   1b906:	f5 01       	movw	r30, r10
   1b908:	e4 5a       	subi	r30, 0xA4	; 164
   1b90a:	ff 4f       	sbci	r31, 0xFF	; 255
   1b90c:	80 83       	st	Z, r24
   1b90e:	91 83       	std	Z+1, r25	; 0x01
   1b910:	a2 83       	std	Z+2, r26	; 0x02
   1b912:	b3 83       	std	Z+3, r27	; 0x03
    ULIF->filesectors = LIF->DIR.FileSectors;
   1b914:	c4 5f       	subi	r28, 0xF4	; 244
   1b916:	de 4f       	sbci	r29, 0xFE	; 254
   1b918:	e8 81       	ld	r30, Y
   1b91a:	f9 81       	ldd	r31, Y+1	; 0x01
   1b91c:	cc 50       	subi	r28, 0x0C	; 12
   1b91e:	d1 40       	sbci	r29, 0x01	; 1
   1b920:	80 81       	ld	r24, Z
   1b922:	91 81       	ldd	r25, Z+1	; 0x01
   1b924:	a2 81       	ldd	r26, Z+2	; 0x02
   1b926:	b3 81       	ldd	r27, Z+3	; 0x03
   1b928:	f5 01       	movw	r30, r10
   1b92a:	80 8b       	std	Z+16, r24	; 0x10
   1b92c:	91 8b       	std	Z+17, r25	; 0x11
   1b92e:	a2 8b       	std	Z+18, r26	; 0x12
   1b930:	b3 8b       	std	Z+19, r27	; 0x13

    if( !lif_writedirindex(ULIF,0))
   1b932:	60 e0       	ldi	r22, 0x00	; 0
   1b934:	70 e0       	ldi	r23, 0x00	; 0
   1b936:	c5 01       	movw	r24, r10
   1b938:	0e 94 d2 cc 	call	0x199a4	; 0x199a4 <lif_writedirindex>
   1b93c:	8c 01       	movw	r16, r24
   1b93e:	89 2b       	or	r24, r25
   1b940:	41 f0       	breq	.+16     	; 0x1b952 <lif_extract_lif_as_lif+0x118>
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
    }
    if( !lif_writedirEOF(ULIF,1) )
   1b942:	61 e0       	ldi	r22, 0x01	; 1
   1b944:	70 e0       	ldi	r23, 0x00	; 0
   1b946:	c5 01       	movw	r24, r10
   1b948:	0e 94 2e cd 	call	0x19a5c	; 0x19a5c <lif_writedirEOF>
   1b94c:	8c 01       	movw	r16, r24
   1b94e:	89 2b       	or	r24, r25
   1b950:	39 f4       	brne	.+14     	; 0x1b960 <lif_extract_lif_as_lif+0x126>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b952:	c4 01       	movw	r24, r8
   1b954:	0e 94 e8 cb 	call	0x197d0	; 0x197d0 <lif_close_volume>
   1b958:	c5 01       	movw	r24, r10
   1b95a:	0e 94 e8 cb 	call	0x197d0	; 0x197d0 <lif_close_volume>
    }
    if( !lif_writedirEOF(ULIF,1) )
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
   1b95e:	ae c0       	rjmp	.+348    	; 0x1babc <lif_extract_lif_as_lif+0x282>
    }

    uoffset =  ULIF->filestart * (long) LIF_SECTOR_SIZE;
   1b960:	d5 01       	movw	r26, r10
   1b962:	1c 96       	adiw	r26, 0x0c	; 12
   1b964:	cd 90       	ld	r12, X+
   1b966:	dd 90       	ld	r13, X+
   1b968:	ed 90       	ld	r14, X+
   1b96a:	fc 90       	ld	r15, X
   1b96c:	1f 97       	sbiw	r26, 0x0f	; 15
   1b96e:	fe 2c       	mov	r15, r14
   1b970:	ed 2c       	mov	r14, r13
   1b972:	dc 2c       	mov	r13, r12
   1b974:	cc 24       	eor	r12, r12

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b976:	f4 01       	movw	r30, r8
   1b978:	e4 5a       	subi	r30, 0xA4	; 164
   1b97a:	ff 4f       	sbci	r31, 0xFF	; 255
   1b97c:	80 81       	ld	r24, Z
   1b97e:	91 81       	ldd	r25, Z+1	; 0x01
   1b980:	a2 81       	ldd	r26, Z+2	; 0x02
   1b982:	b3 81       	ldd	r27, Z+3	; 0x03
   1b984:	22 27       	eor	r18, r18
   1b986:	38 2f       	mov	r19, r24
   1b988:	49 2f       	mov	r20, r25
   1b98a:	5a 2f       	mov	r21, r26
   1b98c:	cb 5f       	subi	r28, 0xFB	; 251
   1b98e:	de 4f       	sbci	r29, 0xFE	; 254
   1b990:	28 83       	st	Y, r18
   1b992:	39 83       	std	Y+1, r19	; 0x01
   1b994:	4a 83       	std	Y+2, r20	; 0x02
   1b996:	5b 83       	std	Y+3, r21	; 0x03
   1b998:	c5 50       	subi	r28, 0x05	; 5
   1b99a:	d1 40       	sbci	r29, 0x01	; 1

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b99c:	21 2c       	mov	r2, r1
   1b99e:	31 2c       	mov	r3, r1
            return(0);
        }
        bytes += size;
        offset += size;
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
   1b9a0:	82 e0       	ldi	r24, 0x02	; 2
   1b9a2:	94 e3       	ldi	r25, 0x34	; 52
   1b9a4:	9c 01       	movw	r18, r24
   1b9a6:	40 e0       	ldi	r20, 0x00	; 0
   1b9a8:	c7 5f       	subi	r28, 0xF7	; 247
   1b9aa:	de 4f       	sbci	r29, 0xFE	; 254
   1b9ac:	28 83       	st	Y, r18
   1b9ae:	39 83       	std	Y+1, r19	; 0x01
   1b9b0:	4a 83       	std	Y+2, r20	; 0x02
   1b9b2:	c9 50       	subi	r28, 0x09	; 9
   1b9b4:	d1 40       	sbci	r29, 0x01	; 1

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b9b6:	41 c0       	rjmp	.+130    	; 0x1ba3a <lif_extract_lif_as_lif+0x200>
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }

        lif_write(ULIF,buf,uoffset,LIF_SECTOR_SIZE);
   1b9b8:	00 e0       	ldi	r16, 0x00	; 0
   1b9ba:	11 e0       	ldi	r17, 0x01	; 1
   1b9bc:	a7 01       	movw	r20, r14
   1b9be:	96 01       	movw	r18, r12
   1b9c0:	be 01       	movw	r22, r28
   1b9c2:	6f 5f       	subi	r22, 0xFF	; 255
   1b9c4:	7f 4f       	sbci	r23, 0xFF	; 255
   1b9c6:	c5 01       	movw	r24, r10
   1b9c8:	0e 94 a9 c3 	call	0x18752	; 0x18752 <lif_write>
        {
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }
        bytes += size;
   1b9cc:	05 2c       	mov	r0, r5
   1b9ce:	00 0c       	add	r0, r0
   1b9d0:	66 08       	sbc	r6, r6
   1b9d2:	77 08       	sbc	r7, r7
   1b9d4:	c4 0c       	add	r12, r4
   1b9d6:	d5 1c       	adc	r13, r5
   1b9d8:	e6 1c       	adc	r14, r6
   1b9da:	f7 1c       	adc	r15, r7
        offset += size;
   1b9dc:	cb 5f       	subi	r28, 0xFB	; 251
   1b9de:	de 4f       	sbci	r29, 0xFE	; 254
   1b9e0:	88 81       	ld	r24, Y
   1b9e2:	99 81       	ldd	r25, Y+1	; 0x01
   1b9e4:	aa 81       	ldd	r26, Y+2	; 0x02
   1b9e6:	bb 81       	ldd	r27, Y+3	; 0x03
   1b9e8:	c5 50       	subi	r28, 0x05	; 5
   1b9ea:	d1 40       	sbci	r29, 0x01	; 1
   1b9ec:	84 0d       	add	r24, r4
   1b9ee:	95 1d       	adc	r25, r5
   1b9f0:	a6 1d       	adc	r26, r6
   1b9f2:	b7 1d       	adc	r27, r7
   1b9f4:	cb 5f       	subi	r28, 0xFB	; 251
   1b9f6:	de 4f       	sbci	r29, 0xFE	; 254
   1b9f8:	88 83       	st	Y, r24
   1b9fa:	99 83       	std	Y+1, r25	; 0x01
   1b9fc:	aa 83       	std	Y+2, r26	; 0x02
   1b9fe:	bb 83       	std	Y+3, r27	; 0x03
   1ba00:	c5 50       	subi	r28, 0x05	; 5
   1ba02:	d1 40       	sbci	r29, 0x01	; 1
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
   1ba04:	ff 92       	push	r15
   1ba06:	ef 92       	push	r14
   1ba08:	df 92       	push	r13
   1ba0a:	cf 92       	push	r12
   1ba0c:	1f 92       	push	r1
   1ba0e:	c6 5f       	subi	r28, 0xF6	; 246
   1ba10:	de 4f       	sbci	r29, 0xFE	; 254
   1ba12:	98 81       	ld	r25, Y
   1ba14:	ca 50       	subi	r28, 0x0A	; 10
   1ba16:	d1 40       	sbci	r29, 0x01	; 1
   1ba18:	9f 93       	push	r25
   1ba1a:	c7 5f       	subi	r28, 0xF7	; 247
   1ba1c:	de 4f       	sbci	r29, 0xFE	; 254
   1ba1e:	a8 81       	ld	r26, Y
   1ba20:	c9 50       	subi	r28, 0x09	; 9
   1ba22:	d1 40       	sbci	r29, 0x01	; 1
   1ba24:	af 93       	push	r26
   1ba26:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1ba2a:	bf ef       	ldi	r27, 0xFF	; 255
   1ba2c:	2b 1a       	sub	r2, r27
   1ba2e:	3b 0a       	sbc	r3, r27
   1ba30:	0f b6       	in	r0, 0x3f	; 63
   1ba32:	f8 94       	cli
   1ba34:	de bf       	out	0x3e, r29	; 62
   1ba36:	0f be       	out	0x3f, r0	; 63
   1ba38:	cd bf       	out	0x3d, r28	; 61
   1ba3a:	c4 5f       	subi	r28, 0xF4	; 244
   1ba3c:	de 4f       	sbci	r29, 0xFE	; 254
   1ba3e:	a8 81       	ld	r26, Y
   1ba40:	b9 81       	ldd	r27, Y+1	; 0x01
   1ba42:	cc 50       	subi	r28, 0x0C	; 12
   1ba44:	d1 40       	sbci	r29, 0x01	; 1
   1ba46:	8d 91       	ld	r24, X+
   1ba48:	9c 91       	ld	r25, X
   1ba4a:	28 16       	cp	r2, r24
   1ba4c:	39 06       	cpc	r3, r25
   1ba4e:	f4 f4       	brge	.+60     	; 0x1ba8c <lif_extract_lif_as_lif+0x252>
    {
        size = lif_read(LIF, buf, offset,LIF_SECTOR_SIZE);
   1ba50:	00 e0       	ldi	r16, 0x00	; 0
   1ba52:	11 e0       	ldi	r17, 0x01	; 1
   1ba54:	cb 5f       	subi	r28, 0xFB	; 251
   1ba56:	de 4f       	sbci	r29, 0xFE	; 254
   1ba58:	28 81       	ld	r18, Y
   1ba5a:	39 81       	ldd	r19, Y+1	; 0x01
   1ba5c:	4a 81       	ldd	r20, Y+2	; 0x02
   1ba5e:	5b 81       	ldd	r21, Y+3	; 0x03
   1ba60:	c5 50       	subi	r28, 0x05	; 5
   1ba62:	d1 40       	sbci	r29, 0x01	; 1
   1ba64:	be 01       	movw	r22, r28
   1ba66:	6f 5f       	subi	r22, 0xFF	; 255
   1ba68:	7f 4f       	sbci	r23, 0xFF	; 255
   1ba6a:	c4 01       	movw	r24, r8
   1ba6c:	0e 94 50 c3 	call	0x186a0	; 0x186a0 <lif_read>
   1ba70:	2b 01       	movw	r4, r22
   1ba72:	3c 01       	movw	r6, r24
        if(size < LIF_SECTOR_SIZE)
   1ba74:	6f 3f       	cpi	r22, 0xFF	; 255
   1ba76:	71 05       	cpc	r23, r1
   1ba78:	11 f0       	breq	.+4      	; 0x1ba7e <lif_extract_lif_as_lif+0x244>
   1ba7a:	0c f0       	brlt	.+2      	; 0x1ba7e <lif_extract_lif_as_lif+0x244>
   1ba7c:	9d cf       	rjmp	.-198    	; 0x1b9b8 <lif_extract_lif_as_lif+0x17e>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ba7e:	c4 01       	movw	r24, r8
   1ba80:	0e 94 e8 cb 	call	0x197d0	; 0x197d0 <lif_close_volume>
   1ba84:	c5 01       	movw	r24, r10
   1ba86:	0e 94 e8 cb 	call	0x197d0	; 0x197d0 <lif_close_volume>
   1ba8a:	09 cf       	rjmp	.-494    	; 0x1b89e <lif_extract_lif_as_lif+0x64>
   1ba8c:	c4 01       	movw	r24, r8
   1ba8e:	0e 94 e8 cb 	call	0x197d0	; 0x197d0 <lif_close_volume>
   1ba92:	c5 01       	movw	r24, r10
   1ba94:	0e 94 e8 cb 	call	0x197d0	; 0x197d0 <lif_close_volume>
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
    }
    lif_closedir(LIF);
    lif_closedir(ULIF);
    printf("\tWrote: %8ld\n", bytes);
   1ba98:	ff 92       	push	r15
   1ba9a:	ef 92       	push	r14
   1ba9c:	df 92       	push	r13
   1ba9e:	cf 92       	push	r12
   1baa0:	84 ef       	ldi	r24, 0xF4	; 244
   1baa2:	93 e3       	ldi	r25, 0x33	; 51
   1baa4:	1f 92       	push	r1
   1baa6:	9f 93       	push	r25
   1baa8:	8f 93       	push	r24
   1baaa:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    return(1);
   1baae:	0f b6       	in	r0, 0x3f	; 63
   1bab0:	f8 94       	cli
   1bab2:	de bf       	out	0x3e, r29	; 62
   1bab4:	0f be       	out	0x3f, r0	; 63
   1bab6:	cd bf       	out	0x3d, r28	; 61
   1bab8:	01 e0       	ldi	r16, 0x01	; 1
   1baba:	10 e0       	ldi	r17, 0x00	; 0
}
   1babc:	c8 01       	movw	r24, r16
   1babe:	c3 5f       	subi	r28, 0xF3	; 243
   1bac0:	de 4f       	sbci	r29, 0xFE	; 254
   1bac2:	e2 e1       	ldi	r30, 0x12	; 18
   1bac4:	0c 94 0f e6 	jmp	0x1cc1e	; 0x1cc1e <__epilogue_restores__>

0001bac8 <lif_add_lif_file>:
/// @param[in] lifname: LIF file name to copy file to
/// @param[in] userfile: LIF mage name copy file from 
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_lif_file(char *lifimagename, char *lifname, char *userfile)
{
   1bac8:	2f 92       	push	r2
   1baca:	3f 92       	push	r3
   1bacc:	4f 92       	push	r4
   1bace:	5f 92       	push	r5
   1bad0:	6f 92       	push	r6
   1bad2:	8f 92       	push	r8
   1bad4:	9f 92       	push	r9
   1bad6:	af 92       	push	r10
   1bad8:	bf 92       	push	r11
   1bada:	cf 92       	push	r12
   1badc:	df 92       	push	r13
   1bade:	ef 92       	push	r14
   1bae0:	ff 92       	push	r15
   1bae2:	0f 93       	push	r16
   1bae4:	1f 93       	push	r17
   1bae6:	cf 93       	push	r28
   1bae8:	df 93       	push	r29
   1baea:	cd b7       	in	r28, 0x3d	; 61
   1baec:	de b7       	in	r29, 0x3e	; 62
   1baee:	c4 51       	subi	r28, 0x14	; 20
   1baf0:	d1 40       	sbci	r29, 0x01	; 1
   1baf2:	0f b6       	in	r0, 0x3f	; 63
   1baf4:	f8 94       	cli
   1baf6:	de bf       	out	0x3e, r29	; 62
   1baf8:	0f be       	out	0x3f, r0	; 63
   1bafa:	cd bf       	out	0x3d, r28	; 61
   1bafc:	7c 01       	movw	r14, r24
   1bafe:	5b 01       	movw	r10, r22
   1bb00:	6a 01       	movw	r12, r20
    long offset, uoffset, start, bytes;
    int i, size;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    if(!*lifimagename)
   1bb02:	dc 01       	movw	r26, r24
   1bb04:	8c 91       	ld	r24, X
   1bb06:	81 11       	cpse	r24, r1
   1bb08:	03 c0       	rjmp	.+6      	; 0x1bb10 <lif_add_lif_file+0x48>
    {
        printf("lif_add: lifimagename is empty\n");
   1bb0a:	84 ed       	ldi	r24, 0xD4	; 212
   1bb0c:	93 e3       	ldi	r25, 0x33	; 51
   1bb0e:	06 c0       	rjmp	.+12     	; 0x1bb1c <lif_add_lif_file+0x54>
        return(-1);
    }
    if(!*lifname)
   1bb10:	fb 01       	movw	r30, r22
   1bb12:	80 81       	ld	r24, Z
   1bb14:	81 11       	cpse	r24, r1
   1bb16:	0b c0       	rjmp	.+22     	; 0x1bb2e <lif_add_lif_file+0x66>
    {
        printf("lif_add: lifname is empty\n");
   1bb18:	89 eb       	ldi	r24, 0xB9	; 185
   1bb1a:	93 e3       	ldi	r25, 0x33	; 51
   1bb1c:	1f 92       	push	r1
   1bb1e:	9f 93       	push	r25
   1bb20:	8f 93       	push	r24
   1bb22:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
        return(-1);
   1bb26:	0f 90       	pop	r0
   1bb28:	0f 90       	pop	r0
   1bb2a:	0f 90       	pop	r0
   1bb2c:	32 c1       	rjmp	.+612    	; 0x1bd92 <lif_add_lif_file+0x2ca>
    }
    if(!*userfile)
   1bb2e:	da 01       	movw	r26, r20
   1bb30:	8c 91       	ld	r24, X
   1bb32:	81 11       	cpse	r24, r1
   1bb34:	03 c0       	rjmp	.+6      	; 0x1bb3c <lif_add_lif_file+0x74>
    {
        printf("lif_add: userfile is empty\n");
   1bb36:	8d e9       	ldi	r24, 0x9D	; 157
   1bb38:	93 e3       	ldi	r25, 0x33	; 51
   1bb3a:	f0 cf       	rjmp	.-32     	; 0x1bb1c <lif_add_lif_file+0x54>
        return(-1);
    }

    if(debuglevel & 0x400)
   1bb3c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1bb40:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1bb44:	92 ff       	sbrs	r25, 2
   1bb46:	12 c0       	rjmp	.+36     	; 0x1bb6c <lif_add_lif_file+0xa4>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n", 
   1bb48:	df 92       	push	r13
   1bb4a:	4f 93       	push	r20
   1bb4c:	bf 92       	push	r11
   1bb4e:	6f 93       	push	r22
   1bb50:	ff 92       	push	r15
   1bb52:	ef 92       	push	r14
   1bb54:	8e e6       	ldi	r24, 0x6E	; 110
   1bb56:	93 e3       	ldi	r25, 0x33	; 51
   1bb58:	1f 92       	push	r1
   1bb5a:	9f 93       	push	r25
   1bb5c:	8f 93       	push	r24
   1bb5e:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1bb62:	0f b6       	in	r0, 0x3f	; 63
   1bb64:	f8 94       	cli
   1bb66:	de bf       	out	0x3e, r29	; 62
   1bb68:	0f be       	out	0x3f, r0	; 63
   1bb6a:	cd bf       	out	0x3d, r28	; 61
            lifimagename, lifname, userfile);

    // open  userfile as LIF image
    ULIF = lif_open_volume(userfile,"rb+");
   1bb6c:	60 e9       	ldi	r22, 0x90	; 144
   1bb6e:	78 e0       	ldi	r23, 0x08	; 8
   1bb70:	c6 01       	movw	r24, r12
   1bb72:	0e 94 e0 d2 	call	0x1a5c0	; 0x1a5c0 <lif_open_volume>
   1bb76:	4c 01       	movw	r8, r24
    if(ULIF == NULL)
   1bb78:	00 97       	sbiw	r24, 0x00	; 0
   1bb7a:	09 f4       	brne	.+2      	; 0x1bb7e <lif_add_lif_file+0xb6>
   1bb7c:	0a c1       	rjmp	.+532    	; 0x1bd92 <lif_add_lif_file+0x2ca>
        return(-1); 

    // find lif file in user image
    index = lif_find_file(ULIF, lifname);
   1bb7e:	b5 01       	movw	r22, r10
   1bb80:	0e 94 74 d5 	call	0x1aae8	; 0x1aae8 <lif_find_file>
    if(index == -1)
   1bb84:	01 96       	adiw	r24, 0x01	; 1
   1bb86:	b1 f4       	brne	.+44     	; 0x1bbb4 <lif_add_lif_file+0xec>
    {
        printf("File not found:%s\n", lifname);
   1bb88:	bf 92       	push	r11
   1bb8a:	af 92       	push	r10
   1bb8c:	8b e5       	ldi	r24, 0x5B	; 91
   1bb8e:	93 e3       	ldi	r25, 0x33	; 51
   1bb90:	1f 92       	push	r1
   1bb92:	9f 93       	push	r25
   1bb94:	8f 93       	push	r24
   1bb96:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bb9a:	c4 01       	movw	r24, r8
   1bb9c:	0e 94 e8 cb 	call	0x197d0	; 0x197d0 <lif_close_volume>
    index = lif_find_file(ULIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(ULIF);
        return(0);
   1bba0:	0f 90       	pop	r0
   1bba2:	0f 90       	pop	r0
   1bba4:	0f 90       	pop	r0
   1bba6:	0f 90       	pop	r0
   1bba8:	0f 90       	pop	r0
   1bbaa:	60 e0       	ldi	r22, 0x00	; 0
   1bbac:	70 e0       	ldi	r23, 0x00	; 0
   1bbae:	80 e0       	ldi	r24, 0x00	; 0
   1bbb0:	90 e0       	ldi	r25, 0x00	; 0
   1bbb2:	09 c1       	rjmp	.+530    	; 0x1bdc6 <lif_add_lif_file+0x2fe>
    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1bbb4:	60 e9       	ldi	r22, 0x90	; 144
   1bbb6:	78 e0       	ldi	r23, 0x08	; 8
   1bbb8:	c7 01       	movw	r24, r14
   1bbba:	0e 94 e0 d2 	call	0x1a5c0	; 0x1a5c0 <lif_open_volume>
   1bbbe:	5c 01       	movw	r10, r24
    if(LIF == NULL)
   1bbc0:	00 97       	sbiw	r24, 0x00	; 0
   1bbc2:	09 f4       	brne	.+2      	; 0x1bbc6 <lif_add_lif_file+0xfe>
   1bbc4:	e6 c0       	rjmp	.+460    	; 0x1bd92 <lif_add_lif_file+0x2ca>
        return(-1); 

    // Now find a new free record that is big enough
    index = lif_newdir(LIF, ULIF->DIR.FileSectors);
   1bbc6:	f4 01       	movw	r30, r8
   1bbc8:	e0 5a       	subi	r30, 0xA0	; 160
   1bbca:	ff 4f       	sbci	r31, 0xFF	; 255
   1bbcc:	40 81       	ld	r20, Z
   1bbce:	51 81       	ldd	r21, Z+1	; 0x01
   1bbd0:	62 81       	ldd	r22, Z+2	; 0x02
   1bbd2:	73 81       	ldd	r23, Z+3	; 0x03
   1bbd4:	0e 94 7b d1 	call	0x1a2f6	; 0x1a2f6 <lif_newdir>
   1bbd8:	c3 5f       	subi	r28, 0xF3	; 243
   1bbda:	de 4f       	sbci	r29, 0xFE	; 254
   1bbdc:	99 83       	std	Y+1, r25	; 0x01
   1bbde:	88 83       	st	Y, r24
   1bbe0:	cd 50       	subi	r28, 0x0D	; 13
   1bbe2:	d1 40       	sbci	r29, 0x01	; 1
    if(index == -1)
   1bbe4:	01 96       	adiw	r24, 0x01	; 1
   1bbe6:	b9 f4       	brne	.+46     	; 0x1bc16 <lif_add_lif_file+0x14e>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n", 
   1bbe8:	df 92       	push	r13
   1bbea:	cf 92       	push	r12
   1bbec:	ff 92       	push	r15
   1bbee:	ef 92       	push	r14
   1bbf0:	8b e2       	ldi	r24, 0x2B	; 43
   1bbf2:	93 e3       	ldi	r25, 0x33	; 51
   1bbf4:	1f 92       	push	r1
   1bbf6:	9f 93       	push	r25
   1bbf8:	8f 93       	push	r24
   1bbfa:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bbfe:	c5 01       	movw	r24, r10
   1bc00:	0e 94 e8 cb 	call	0x197d0	; 0x197d0 <lif_close_volume>
   1bc04:	c4 01       	movw	r24, r8
   1bc06:	0e 94 e8 cb 	call	0x197d0	; 0x197d0 <lif_close_volume>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n", 
            lifimagename, userfile);
            lif_closedir(LIF);
            lif_closedir(ULIF);
        return(-1);
   1bc0a:	0f b6       	in	r0, 0x3f	; 63
   1bc0c:	f8 94       	cli
   1bc0e:	de bf       	out	0x3e, r29	; 62
   1bc10:	0f be       	out	0x3f, r0	; 63
   1bc12:	cd bf       	out	0x3d, r28	; 61
   1bc14:	be c0       	rjmp	.+380    	; 0x1bd92 <lif_add_lif_file+0x2ca>
    }

    // Save start sector
    start = LIF->DIR.FileStartSector;
   1bc16:	c5 01       	movw	r24, r10
   1bc18:	84 5a       	subi	r24, 0xA4	; 164
   1bc1a:	9f 4f       	sbci	r25, 0xFF	; 255
   1bc1c:	dc 01       	movw	r26, r24
   1bc1e:	4d 91       	ld	r20, X+
   1bc20:	5d 91       	ld	r21, X+
   1bc22:	6d 91       	ld	r22, X+
   1bc24:	7c 91       	ld	r23, X
   1bc26:	13 97       	sbiw	r26, 0x03	; 3

    // Copy user image directory record to master image directory record
    LIF->DIR = ULIF->DIR;
   1bc28:	21 e2       	ldi	r18, 0x21	; 33
   1bc2a:	f4 01       	movw	r30, r8
   1bc2c:	e1 5b       	subi	r30, 0xB1	; 177
   1bc2e:	ff 4f       	sbci	r31, 0xFF	; 255
   1bc30:	1d 97       	sbiw	r26, 0x0d	; 13
   1bc32:	01 90       	ld	r0, Z+
   1bc34:	0d 92       	st	X+, r0
   1bc36:	2a 95       	dec	r18
   1bc38:	e1 f7       	brne	.-8      	; 0x1bc32 <lif_add_lif_file+0x16a>

    // Restore FileStartSector
    LIF->DIR.FileStartSector = start;
   1bc3a:	fc 01       	movw	r30, r24
   1bc3c:	40 83       	st	Z, r20
   1bc3e:	51 83       	std	Z+1, r21	; 0x01
   1bc40:	62 83       	std	Z+2, r22	; 0x02
   1bc42:	73 83       	std	Z+3, r23	; 0x03

    // Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1bc44:	b6 2f       	mov	r27, r22
   1bc46:	a5 2f       	mov	r26, r21
   1bc48:	94 2f       	mov	r25, r20
   1bc4a:	88 27       	eor	r24, r24
   1bc4c:	cb 5f       	subi	r28, 0xFB	; 251
   1bc4e:	de 4f       	sbci	r29, 0xFE	; 254
   1bc50:	88 83       	st	Y, r24
   1bc52:	99 83       	std	Y+1, r25	; 0x01
   1bc54:	aa 83       	std	Y+2, r26	; 0x02
   1bc56:	bb 83       	std	Y+3, r27	; 0x03
   1bc58:	c5 50       	subi	r28, 0x05	; 5
   1bc5a:	d1 40       	sbci	r29, 0x01	; 1
    // User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1bc5c:	f4 01       	movw	r30, r8
   1bc5e:	e4 5a       	subi	r30, 0xA4	; 164
   1bc60:	ff 4f       	sbci	r31, 0xFF	; 255
   1bc62:	80 81       	ld	r24, Z
   1bc64:	91 81       	ldd	r25, Z+1	; 0x01
   1bc66:	a2 81       	ldd	r26, Z+2	; 0x02
   1bc68:	b3 81       	ldd	r27, Z+3	; 0x03
   1bc6a:	22 27       	eor	r18, r18
   1bc6c:	38 2f       	mov	r19, r24
   1bc6e:	49 2f       	mov	r20, r25
   1bc70:	5a 2f       	mov	r21, r26
   1bc72:	c7 5f       	subi	r28, 0xF7	; 247
   1bc74:	de 4f       	sbci	r29, 0xFE	; 254
   1bc76:	28 83       	st	Y, r18
   1bc78:	39 83       	std	Y+1, r19	; 0x01
   1bc7a:	4a 83       	std	Y+2, r20	; 0x02
   1bc7c:	5b 83       	std	Y+3, r21	; 0x03
   1bc7e:	c9 50       	subi	r28, 0x09	; 9
   1bc80:	d1 40       	sbci	r29, 0x01	; 1
    bytes = 0;
    // Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1bc82:	21 2c       	mov	r2, r1
   1bc84:	31 2c       	mov	r3, r1

    // Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    // User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
   1bc86:	c1 2c       	mov	r12, r1
   1bc88:	d1 2c       	mov	r13, r1
   1bc8a:	76 01       	movw	r14, r12
    // Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1bc8c:	a5 01       	movw	r20, r10
   1bc8e:	40 5a       	subi	r20, 0xA0	; 160
   1bc90:	5f 4f       	sbci	r21, 0xFF	; 255
   1bc92:	cd 5e       	subi	r28, 0xED	; 237
   1bc94:	de 4f       	sbci	r29, 0xFE	; 254
   1bc96:	59 83       	std	Y+1, r21	; 0x01
   1bc98:	48 83       	st	Y, r20
   1bc9a:	c3 51       	subi	r28, 0x13	; 19
   1bc9c:	d1 40       	sbci	r29, 0x01	; 1
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
        printf("\tWrote: %8ld\r", bytes);
   1bc9e:	8d e1       	ldi	r24, 0x1D	; 29
   1bca0:	93 e3       	ldi	r25, 0x33	; 51
   1bca2:	2c 01       	movw	r4, r24
   1bca4:	c7 5f       	subi	r28, 0xF7	; 247
   1bca6:	de 4f       	sbci	r29, 0xFE	; 254
   1bca8:	28 81       	ld	r18, Y
   1bcaa:	39 81       	ldd	r19, Y+1	; 0x01
   1bcac:	4a 81       	ldd	r20, Y+2	; 0x02
   1bcae:	5b 81       	ldd	r21, Y+3	; 0x03
   1bcb0:	c9 50       	subi	r28, 0x09	; 9
   1bcb2:	d1 40       	sbci	r29, 0x01	; 1
   1bcb4:	2c 0d       	add	r18, r12
   1bcb6:	3d 1d       	adc	r19, r13
   1bcb8:	4e 1d       	adc	r20, r14
   1bcba:	5f 1d       	adc	r21, r15
   1bcbc:	cb 5f       	subi	r28, 0xFB	; 251
   1bcbe:	de 4f       	sbci	r29, 0xFE	; 254
   1bcc0:	88 81       	ld	r24, Y
   1bcc2:	99 81       	ldd	r25, Y+1	; 0x01
   1bcc4:	aa 81       	ldd	r26, Y+2	; 0x02
   1bcc6:	bb 81       	ldd	r27, Y+3	; 0x03
   1bcc8:	c5 50       	subi	r28, 0x05	; 5
   1bcca:	d1 40       	sbci	r29, 0x01	; 1
   1bccc:	8c 0d       	add	r24, r12
   1bcce:	9d 1d       	adc	r25, r13
   1bcd0:	ae 1d       	adc	r26, r14
   1bcd2:	bf 1d       	adc	r27, r15
   1bcd4:	c1 5f       	subi	r28, 0xF1	; 241
   1bcd6:	de 4f       	sbci	r29, 0xFE	; 254
   1bcd8:	88 83       	st	Y, r24
   1bcda:	99 83       	std	Y+1, r25	; 0x01
   1bcdc:	aa 83       	std	Y+2, r26	; 0x02
   1bcde:	bb 83       	std	Y+3, r27	; 0x03
   1bce0:	cf 50       	subi	r28, 0x0F	; 15
   1bce2:	d1 40       	sbci	r29, 0x01	; 1
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    // User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
    // Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1bce4:	cd 5e       	subi	r28, 0xED	; 237
   1bce6:	de 4f       	sbci	r29, 0xFE	; 254
   1bce8:	a8 81       	ld	r26, Y
   1bcea:	b9 81       	ldd	r27, Y+1	; 0x01
   1bcec:	c3 51       	subi	r28, 0x13	; 19
   1bcee:	d1 40       	sbci	r29, 0x01	; 1
   1bcf0:	8d 91       	ld	r24, X+
   1bcf2:	9c 91       	ld	r25, X
   1bcf4:	28 16       	cp	r2, r24
   1bcf6:	39 06       	cpc	r3, r25
   1bcf8:	dc f5       	brge	.+118    	; 0x1bd70 <lif_add_lif_file+0x2a8>
    {
        // Read
        size = lif_read(ULIF, buf, uoffset, LIF_SECTOR_SIZE);
   1bcfa:	00 e0       	ldi	r16, 0x00	; 0
   1bcfc:	11 e0       	ldi	r17, 0x01	; 1
   1bcfe:	be 01       	movw	r22, r28
   1bd00:	6f 5f       	subi	r22, 0xFF	; 255
   1bd02:	7f 4f       	sbci	r23, 0xFF	; 255
   1bd04:	c4 01       	movw	r24, r8
   1bd06:	0e 94 50 c3 	call	0x186a0	; 0x186a0 <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1bd0a:	6f 3f       	cpi	r22, 0xFF	; 255
   1bd0c:	71 05       	cpc	r23, r1
   1bd0e:	a9 f0       	breq	.+42     	; 0x1bd3a <lif_add_lif_file+0x272>
   1bd10:	a4 f0       	brlt	.+40     	; 0x1bd3a <lif_add_lif_file+0x272>
            lif_closedir(ULIF);
            return(-1);
        }

        // Write
        size = lif_write(LIF, buf, offset, LIF_SECTOR_SIZE);
   1bd12:	00 e0       	ldi	r16, 0x00	; 0
   1bd14:	11 e0       	ldi	r17, 0x01	; 1
   1bd16:	c1 5f       	subi	r28, 0xF1	; 241
   1bd18:	de 4f       	sbci	r29, 0xFE	; 254
   1bd1a:	28 81       	ld	r18, Y
   1bd1c:	39 81       	ldd	r19, Y+1	; 0x01
   1bd1e:	4a 81       	ldd	r20, Y+2	; 0x02
   1bd20:	5b 81       	ldd	r21, Y+3	; 0x03
   1bd22:	cf 50       	subi	r28, 0x0F	; 15
   1bd24:	d1 40       	sbci	r29, 0x01	; 1
   1bd26:	be 01       	movw	r22, r28
   1bd28:	6f 5f       	subi	r22, 0xFF	; 255
   1bd2a:	7f 4f       	sbci	r23, 0xFF	; 255
   1bd2c:	c5 01       	movw	r24, r10
   1bd2e:	0e 94 a9 c3 	call	0x18752	; 0x18752 <lif_write>
        if(size < LIF_SECTOR_SIZE)
   1bd32:	8f 3f       	cpi	r24, 0xFF	; 255
   1bd34:	91 05       	cpc	r25, r1
   1bd36:	09 f0       	breq	.+2      	; 0x1bd3a <lif_add_lif_file+0x272>
   1bd38:	2c f4       	brge	.+10     	; 0x1bd44 <lif_add_lif_file+0x27c>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bd3a:	c5 01       	movw	r24, r10
   1bd3c:	0e 94 e8 cb 	call	0x197d0	; 0x197d0 <lif_close_volume>
   1bd40:	c4 01       	movw	r24, r8
   1bd42:	25 c0       	rjmp	.+74     	; 0x1bd8e <lif_add_lif_file+0x2c6>
            lif_closedir(ULIF);
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
   1bd44:	5f ef       	ldi	r21, 0xFF	; 255
   1bd46:	d5 1a       	sub	r13, r21
   1bd48:	e5 0a       	sbc	r14, r21
   1bd4a:	f5 0a       	sbc	r15, r21
        printf("\tWrote: %8ld\r", bytes);
   1bd4c:	ff 92       	push	r15
   1bd4e:	ef 92       	push	r14
   1bd50:	df 92       	push	r13
   1bd52:	cf 92       	push	r12
   1bd54:	1f 92       	push	r1
   1bd56:	5f 92       	push	r5
   1bd58:	4f 92       	push	r4
   1bd5a:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    // User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
    // Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1bd5e:	8f ef       	ldi	r24, 0xFF	; 255
   1bd60:	28 1a       	sub	r2, r24
   1bd62:	38 0a       	sbc	r3, r24
   1bd64:	0f b6       	in	r0, 0x3f	; 63
   1bd66:	f8 94       	cli
   1bd68:	de bf       	out	0x3e, r29	; 62
   1bd6a:	0f be       	out	0x3f, r0	; 63
   1bd6c:	cd bf       	out	0x3d, r28	; 61
   1bd6e:	9a cf       	rjmp	.-204    	; 0x1bca4 <lif_add_lif_file+0x1dc>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bd70:	c4 01       	movw	r24, r8
   1bd72:	0e 94 e8 cb 	call	0x197d0	; 0x197d0 <lif_close_volume>
        printf("\tWrote: %8ld\r", bytes);
    }
    lif_closedir(ULIF);

    // Write directory record
    if( !lif_writedirindex(LIF,index))
   1bd76:	c3 5f       	subi	r28, 0xF3	; 243
   1bd78:	de 4f       	sbci	r29, 0xFE	; 254
   1bd7a:	68 81       	ld	r22, Y
   1bd7c:	79 81       	ldd	r23, Y+1	; 0x01
   1bd7e:	cd 50       	subi	r28, 0x0D	; 13
   1bd80:	d1 40       	sbci	r29, 0x01	; 1
   1bd82:	c5 01       	movw	r24, r10
   1bd84:	0e 94 d2 cc 	call	0x199a4	; 0x199a4 <lif_writedirindex>
   1bd88:	89 2b       	or	r24, r25
   1bd8a:	41 f4       	brne	.+16     	; 0x1bd9c <lif_add_lif_file+0x2d4>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bd8c:	c5 01       	movw	r24, r10
   1bd8e:	0e 94 e8 cb 	call	0x197d0	; 0x197d0 <lif_close_volume>

    // Write directory record
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
   1bd92:	6f ef       	ldi	r22, 0xFF	; 255
   1bd94:	7f ef       	ldi	r23, 0xFF	; 255
   1bd96:	8f ef       	ldi	r24, 0xFF	; 255
   1bd98:	9f ef       	ldi	r25, 0xFF	; 255
   1bd9a:	15 c0       	rjmp	.+42     	; 0x1bdc6 <lif_add_lif_file+0x2fe>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bd9c:	c5 01       	movw	r24, r10
   1bd9e:	0e 94 e8 cb 	call	0x197d0	; 0x197d0 <lif_close_volume>
    {
        lif_closedir(LIF);
        return(-1);
    }
    lif_closedir(LIF);
    printf("\tWrote: %8ld\n", bytes);
   1bda2:	ff 92       	push	r15
   1bda4:	ef 92       	push	r14
   1bda6:	df 92       	push	r13
   1bda8:	cf 92       	push	r12
   1bdaa:	8f e0       	ldi	r24, 0x0F	; 15
   1bdac:	93 e3       	ldi	r25, 0x33	; 51
   1bdae:	1f 92       	push	r1
   1bdb0:	9f 93       	push	r25
   1bdb2:	8f 93       	push	r24
   1bdb4:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    return(bytes);
   1bdb8:	0f b6       	in	r0, 0x3f	; 63
   1bdba:	f8 94       	cli
   1bdbc:	de bf       	out	0x3e, r29	; 62
   1bdbe:	0f be       	out	0x3f, r0	; 63
   1bdc0:	cd bf       	out	0x3d, r28	; 61
   1bdc2:	b6 01       	movw	r22, r12
   1bdc4:	c7 01       	movw	r24, r14
}
   1bdc6:	cc 5e       	subi	r28, 0xEC	; 236
   1bdc8:	de 4f       	sbci	r29, 0xFE	; 254
   1bdca:	0f b6       	in	r0, 0x3f	; 63
   1bdcc:	f8 94       	cli
   1bdce:	de bf       	out	0x3e, r29	; 62
   1bdd0:	0f be       	out	0x3f, r0	; 63
   1bdd2:	cd bf       	out	0x3d, r28	; 61
   1bdd4:	df 91       	pop	r29
   1bdd6:	cf 91       	pop	r28
   1bdd8:	1f 91       	pop	r17
   1bdda:	0f 91       	pop	r16
   1bddc:	ff 90       	pop	r15
   1bdde:	ef 90       	pop	r14
   1bde0:	df 90       	pop	r13
   1bde2:	cf 90       	pop	r12
   1bde4:	bf 90       	pop	r11
   1bde6:	af 90       	pop	r10
   1bde8:	9f 90       	pop	r9
   1bdea:	8f 90       	pop	r8
   1bdec:	6f 90       	pop	r6
   1bdee:	5f 90       	pop	r5
   1bdf0:	4f 90       	pop	r4
   1bdf2:	3f 90       	pop	r3
   1bdf4:	2f 90       	pop	r2
   1bdf6:	08 95       	ret

0001bdf8 <lif_del_file>:
/// @param[in] lifimagename: LIF image name
/// @param[in] lifname: LIF file name
/// @return 1 if deleted, 0 if not found, -1 error
MEMSPACE
int lif_del_file(char *lifimagename, char *lifname)
{
   1bdf8:	ef 92       	push	r14
   1bdfa:	ff 92       	push	r15
   1bdfc:	0f 93       	push	r16
   1bdfe:	1f 93       	push	r17
   1be00:	cf 93       	push	r28
   1be02:	df 93       	push	r29
   1be04:	7c 01       	movw	r14, r24
   1be06:	8b 01       	movw	r16, r22
    lif_t *LIF;
    int index;

    if(!*lifimagename)
   1be08:	fc 01       	movw	r30, r24
   1be0a:	80 81       	ld	r24, Z
   1be0c:	81 11       	cpse	r24, r1
   1be0e:	03 c0       	rjmp	.+6      	; 0x1be16 <lif_del_file+0x1e>
    {
        printf("lif_del_file: lifimagename is empty\n");
   1be10:	8a ee       	ldi	r24, 0xEA	; 234
   1be12:	92 e3       	ldi	r25, 0x32	; 50
   1be14:	06 c0       	rjmp	.+12     	; 0x1be22 <lif_del_file+0x2a>
        return(-1);
    }
    if(!*lifname)
   1be16:	fb 01       	movw	r30, r22
   1be18:	80 81       	ld	r24, Z
   1be1a:	81 11       	cpse	r24, r1
   1be1c:	0b c0       	rjmp	.+22     	; 0x1be34 <lif_del_file+0x3c>
    {
        printf("lif_del_file: lifname is empty\n");
   1be1e:	8a ec       	ldi	r24, 0xCA	; 202
   1be20:	92 e3       	ldi	r25, 0x32	; 50
   1be22:	1f 92       	push	r1
   1be24:	9f 93       	push	r25
   1be26:	8f 93       	push	r24
   1be28:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
        return(-1);
   1be2c:	0f 90       	pop	r0
   1be2e:	0f 90       	pop	r0
   1be30:	0f 90       	pop	r0
   1be32:	74 c0       	rjmp	.+232    	; 0x1bf1c <lif_del_file+0x124>
    }
    if(debuglevel & 0x400)
   1be34:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1be38:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1be3c:	92 ff       	sbrs	r25, 2
   1be3e:	13 c0       	rjmp	.+38     	; 0x1be66 <lif_del_file+0x6e>
        printf("LIF image:[%s], LIF name:[%s]\n", 
   1be40:	1f 93       	push	r17
   1be42:	6f 93       	push	r22
   1be44:	ff 92       	push	r15
   1be46:	ef 92       	push	r14
   1be48:	8b ea       	ldi	r24, 0xAB	; 171
   1be4a:	92 e3       	ldi	r25, 0x32	; 50
   1be4c:	1f 92       	push	r1
   1be4e:	9f 93       	push	r25
   1be50:	8f 93       	push	r24
   1be52:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1be56:	8d b7       	in	r24, 0x3d	; 61
   1be58:	9e b7       	in	r25, 0x3e	; 62
   1be5a:	07 96       	adiw	r24, 0x07	; 7
   1be5c:	0f b6       	in	r0, 0x3f	; 63
   1be5e:	f8 94       	cli
   1be60:	9e bf       	out	0x3e, r25	; 62
   1be62:	0f be       	out	0x3f, r0	; 63
   1be64:	8d bf       	out	0x3d, r24	; 61
            lifimagename, lifname);


    LIF = lif_open_volume(lifimagename,"rb+");
   1be66:	60 e9       	ldi	r22, 0x90	; 144
   1be68:	78 e0       	ldi	r23, 0x08	; 8
   1be6a:	c7 01       	movw	r24, r14
   1be6c:	0e 94 e0 d2 	call	0x1a5c0	; 0x1a5c0 <lif_open_volume>
   1be70:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1be72:	00 97       	sbiw	r24, 0x00	; 0
   1be74:	09 f4       	brne	.+2      	; 0x1be78 <lif_del_file+0x80>
   1be76:	52 c0       	rjmp	.+164    	; 0x1bf1c <lif_del_file+0x124>
        return(-1); 

    // Now find file record
    index = lif_find_file(LIF, lifname);
   1be78:	b8 01       	movw	r22, r16
   1be7a:	0e 94 74 d5 	call	0x1aae8	; 0x1aae8 <lif_find_file>
    if(index == -1)
   1be7e:	8f 3f       	cpi	r24, 0xFF	; 255
   1be80:	ef ef       	ldi	r30, 0xFF	; 255
   1be82:	9e 07       	cpc	r25, r30
   1be84:	c9 f4       	brne	.+50     	; 0x1beb8 <lif_del_file+0xc0>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1be86:	ce 01       	movw	r24, r28
   1be88:	0e 94 e8 cb 	call	0x197d0	; 0x197d0 <lif_close_volume>
    // Now find file record
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        lif_closedir(LIF);
        printf("LIF image:[%s] lif name:[%s] not found\n", lifimagename, lifname);
   1be8c:	1f 93       	push	r17
   1be8e:	0f 93       	push	r16
   1be90:	ff 92       	push	r15
   1be92:	ef 92       	push	r14
   1be94:	83 e8       	ldi	r24, 0x83	; 131
   1be96:	92 e3       	ldi	r25, 0x32	; 50
   1be98:	1f 92       	push	r1
   1be9a:	9f 93       	push	r25
   1be9c:	8f 93       	push	r24
   1be9e:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
        return(0);
   1bea2:	8d b7       	in	r24, 0x3d	; 61
   1bea4:	9e b7       	in	r25, 0x3e	; 62
   1bea6:	07 96       	adiw	r24, 0x07	; 7
   1bea8:	0f b6       	in	r0, 0x3f	; 63
   1beaa:	f8 94       	cli
   1beac:	9e bf       	out	0x3e, r25	; 62
   1beae:	0f be       	out	0x3f, r0	; 63
   1beb0:	8d bf       	out	0x3d, r24	; 61
   1beb2:	80 e0       	ldi	r24, 0x00	; 0
   1beb4:	90 e0       	ldi	r25, 0x00	; 0
   1beb6:	34 c0       	rjmp	.+104    	; 0x1bf20 <lif_del_file+0x128>
    }


// IF the next record is EOF then update EOF
    if(index >= LIF->EOFindex-1)
   1beb8:	2a a1       	ldd	r18, Y+34	; 0x22
   1beba:	3b a1       	ldd	r19, Y+35	; 0x23
   1bebc:	21 50       	subi	r18, 0x01	; 1
   1bebe:	31 09       	sbc	r19, r1
   1bec0:	fe 01       	movw	r30, r28
   1bec2:	e6 5a       	subi	r30, 0xA6	; 166
   1bec4:	ff 4f       	sbci	r31, 0xFF	; 255
   1bec6:	82 17       	cp	r24, r18
   1bec8:	93 07       	cpc	r25, r19
   1beca:	2c f0       	brlt	.+10     	; 0x1bed6 <lif_del_file+0xde>
        LIF->DIR.FileType = 0xffff;
   1becc:	2f ef       	ldi	r18, 0xFF	; 255
   1bece:	3f ef       	ldi	r19, 0xFF	; 255
   1bed0:	31 83       	std	Z+1, r19	; 0x01
   1bed2:	20 83       	st	Z, r18
   1bed4:	02 c0       	rjmp	.+4      	; 0x1beda <lif_del_file+0xe2>
    else
        LIF->DIR.FileType = 0;
   1bed6:	11 82       	std	Z+1, r1	; 0x01
   1bed8:	10 82       	st	Z, r1

    // re-Write directory record
    if( !lif_writedirindex(LIF,index) )
   1beda:	bc 01       	movw	r22, r24
   1bedc:	ce 01       	movw	r24, r28
   1bede:	0e 94 d2 cc 	call	0x199a4	; 0x199a4 <lif_writedirindex>
   1bee2:	89 2b       	or	r24, r25
   1bee4:	21 f4       	brne	.+8      	; 0x1beee <lif_del_file+0xf6>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bee6:	ce 01       	movw	r24, r28
   1bee8:	0e 94 e8 cb 	call	0x197d0	; 0x197d0 <lif_close_volume>
   1beec:	17 c0       	rjmp	.+46     	; 0x1bf1c <lif_del_file+0x124>
    {
        lif_closedir(LIF);
        return(-1);
    }

    lif_updatefree(LIF);
   1beee:	ce 01       	movw	r24, r28
   1bef0:	0e 94 46 cd 	call	0x19a8c	; 0x19a8c <lif_updatefree>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bef4:	ce 01       	movw	r24, r28
   1bef6:	0e 94 e8 cb 	call	0x197d0	; 0x197d0 <lif_close_volume>
    }

    lif_updatefree(LIF);

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);
   1befa:	1f 93       	push	r17
   1befc:	0f 93       	push	r16
   1befe:	84 e7       	ldi	r24, 0x74	; 116
   1bf00:	92 e3       	ldi	r25, 0x32	; 50
   1bf02:	1f 92       	push	r1
   1bf04:	9f 93       	push	r25
   1bf06:	8f 93       	push	r24
   1bf08:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>

    return(1);
   1bf0c:	0f 90       	pop	r0
   1bf0e:	0f 90       	pop	r0
   1bf10:	0f 90       	pop	r0
   1bf12:	0f 90       	pop	r0
   1bf14:	0f 90       	pop	r0
   1bf16:	81 e0       	ldi	r24, 0x01	; 1
   1bf18:	90 e0       	ldi	r25, 0x00	; 0
   1bf1a:	02 c0       	rjmp	.+4      	; 0x1bf20 <lif_del_file+0x128>
            lifimagename, lifname);


    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1); 
   1bf1c:	8f ef       	ldi	r24, 0xFF	; 255
   1bf1e:	9f ef       	ldi	r25, 0xFF	; 255

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);

    return(1);
}
   1bf20:	cd b7       	in	r28, 0x3d	; 61
   1bf22:	de b7       	in	r29, 0x3e	; 62
   1bf24:	e6 e0       	ldi	r30, 0x06	; 6
   1bf26:	87 c6       	rjmp	.+3342   	; 0x1cc36 <__epilogue_restores__+0x18>

0001bf28 <lif_rename_file>:
/// @param[in] oldlifname: old LIF file name
/// @param[in] newlifname: new LIF file name
/// @return 1 if renamed, 0 if not found, -1 error
MEMSPACE
int lif_rename_file(char *lifimagename, char *oldlifname, char *newlifname)
{
   1bf28:	a0 e0       	ldi	r26, 0x00	; 0
   1bf2a:	b0 e0       	ldi	r27, 0x00	; 0
   1bf2c:	e9 e9       	ldi	r30, 0x99	; 153
   1bf2e:	ff ed       	ldi	r31, 0xDF	; 223
   1bf30:	62 c6       	rjmp	.+3268   	; 0x1cbf6 <__prologue_saves__+0x10>
   1bf32:	6c 01       	movw	r12, r24
   1bf34:	8b 01       	movw	r16, r22
   1bf36:	7a 01       	movw	r14, r20
    int index;
    lif_t *LIF;

    if(!*lifimagename)
   1bf38:	fc 01       	movw	r30, r24
   1bf3a:	80 81       	ld	r24, Z
   1bf3c:	81 11       	cpse	r24, r1
   1bf3e:	03 c0       	rjmp	.+6      	; 0x1bf46 <lif_rename_file+0x1e>
    {
        printf("lif_rename_file: lifimagename is empty\n");
   1bf40:	8c e4       	ldi	r24, 0x4C	; 76
   1bf42:	92 e3       	ldi	r25, 0x32	; 50
   1bf44:	06 c0       	rjmp	.+12     	; 0x1bf52 <lif_rename_file+0x2a>
        return(-1);
    }
    if(!*oldlifname)
   1bf46:	fb 01       	movw	r30, r22
   1bf48:	80 81       	ld	r24, Z
   1bf4a:	81 11       	cpse	r24, r1
   1bf4c:	0b c0       	rjmp	.+22     	; 0x1bf64 <lif_rename_file+0x3c>
    {
        printf("lif_rename_file: old lifname is empty\n");
   1bf4e:	85 e2       	ldi	r24, 0x25	; 37
   1bf50:	92 e3       	ldi	r25, 0x32	; 50
   1bf52:	1f 92       	push	r1
   1bf54:	9f 93       	push	r25
   1bf56:	8f 93       	push	r24
   1bf58:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
        return(-1);
   1bf5c:	0f 90       	pop	r0
   1bf5e:	0f 90       	pop	r0
   1bf60:	0f 90       	pop	r0
   1bf62:	62 c0       	rjmp	.+196    	; 0x1c028 <lif_rename_file+0x100>
    }
    if(!*newlifname)
   1bf64:	fa 01       	movw	r30, r20
   1bf66:	80 81       	ld	r24, Z
   1bf68:	81 11       	cpse	r24, r1
   1bf6a:	03 c0       	rjmp	.+6      	; 0x1bf72 <lif_rename_file+0x4a>
    {
        printf("lif_rename_file: new lifname is empty\n");
   1bf6c:	8e ef       	ldi	r24, 0xFE	; 254
   1bf6e:	91 e3       	ldi	r25, 0x31	; 49
   1bf70:	f0 cf       	rjmp	.-32     	; 0x1bf52 <lif_rename_file+0x2a>
        return(-1);
    }

    if(!lif_checkname(newlifname))
   1bf72:	ca 01       	movw	r24, r20
   1bf74:	0e 94 5c c4 	call	0x188b8	; 0x188b8 <lif_checkname>
   1bf78:	89 2b       	or	r24, r25
   1bf7a:	19 f4       	brne	.+6      	; 0x1bf82 <lif_rename_file+0x5a>
    {
        printf("lif_rename_file: new lifname contains bad characters\n");
   1bf7c:	88 ec       	ldi	r24, 0xC8	; 200
   1bf7e:	91 e3       	ldi	r25, 0x31	; 49
   1bf80:	e8 cf       	rjmp	.-48     	; 0x1bf52 <lif_rename_file+0x2a>
        return(-1);

    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1bf82:	60 e9       	ldi	r22, 0x90	; 144
   1bf84:	78 e0       	ldi	r23, 0x08	; 8
   1bf86:	c6 01       	movw	r24, r12
   1bf88:	0e 94 e0 d2 	call	0x1a5c0	; 0x1a5c0 <lif_open_volume>
   1bf8c:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1bf8e:	00 97       	sbiw	r24, 0x00	; 0
   1bf90:	09 f4       	brne	.+2      	; 0x1bf94 <lif_rename_file+0x6c>
   1bf92:	4a c0       	rjmp	.+148    	; 0x1c028 <lif_rename_file+0x100>
        return(-1); 

    // Now find file record
    index = lif_find_file(LIF, oldlifname);
   1bf94:	b8 01       	movw	r22, r16
   1bf96:	0e 94 74 d5 	call	0x1aae8	; 0x1aae8 <lif_find_file>
   1bf9a:	5c 01       	movw	r10, r24
    if(index == -1)
   1bf9c:	01 96       	adiw	r24, 0x01	; 1
   1bf9e:	c9 f4       	brne	.+50     	; 0x1bfd2 <lif_rename_file+0xaa>
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
   1bfa0:	1f 93       	push	r17
   1bfa2:	0f 93       	push	r16
   1bfa4:	df 92       	push	r13
   1bfa6:	cf 92       	push	r12
   1bfa8:	8f e9       	ldi	r24, 0x9F	; 159
   1bfaa:	91 e3       	ldi	r25, 0x31	; 49
   1bfac:	1f 92       	push	r1
   1bfae:	9f 93       	push	r25
   1bfb0:	8f 93       	push	r24
   1bfb2:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bfb6:	ce 01       	movw	r24, r28
   1bfb8:	0e 94 e8 cb 	call	0x197d0	; 0x197d0 <lif_close_volume>
    index = lif_find_file(LIF, oldlifname);
    if(index == -1)
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
        lif_closedir(LIF);
        return(0);
   1bfbc:	8d b7       	in	r24, 0x3d	; 61
   1bfbe:	9e b7       	in	r25, 0x3e	; 62
   1bfc0:	07 96       	adiw	r24, 0x07	; 7
   1bfc2:	0f b6       	in	r0, 0x3f	; 63
   1bfc4:	f8 94       	cli
   1bfc6:	9e bf       	out	0x3e, r25	; 62
   1bfc8:	0f be       	out	0x3f, r0	; 63
   1bfca:	8d bf       	out	0x3d, r24	; 61
   1bfcc:	80 e0       	ldi	r24, 0x00	; 0
   1bfce:	90 e0       	ldi	r25, 0x00	; 0
   1bfd0:	2d c0       	rjmp	.+90     	; 0x1c02c <lif_rename_file+0x104>
    }
    lif_fixname(LIF->DIR.filename, newlifname, 10);
   1bfd2:	4a e0       	ldi	r20, 0x0A	; 10
   1bfd4:	50 e0       	ldi	r21, 0x00	; 0
   1bfd6:	b7 01       	movw	r22, r14
   1bfd8:	ce 01       	movw	r24, r28
   1bfda:	81 5b       	subi	r24, 0xB1	; 177
   1bfdc:	9f 4f       	sbci	r25, 0xFF	; 255
   1bfde:	0e 94 96 c4 	call	0x1892c	; 0x1892c <lif_fixname>

    // re-Write directory record
    if( !lif_writedirindex(LIF,index))
   1bfe2:	b5 01       	movw	r22, r10
   1bfe4:	ce 01       	movw	r24, r28
   1bfe6:	0e 94 d2 cc 	call	0x199a4	; 0x199a4 <lif_writedirindex>
   1bfea:	89 2b       	or	r24, r25
   1bfec:	21 f4       	brne	.+8      	; 0x1bff6 <lif_rename_file+0xce>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bfee:	ce 01       	movw	r24, r28
   1bff0:	0e 94 e8 cb 	call	0x197d0	; 0x197d0 <lif_close_volume>
   1bff4:	19 c0       	rjmp	.+50     	; 0x1c028 <lif_rename_file+0x100>
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);
   1bff6:	ff 92       	push	r15
   1bff8:	ef 92       	push	r14
   1bffa:	1f 93       	push	r17
   1bffc:	0f 93       	push	r16
   1bffe:	88 e8       	ldi	r24, 0x88	; 136
   1c000:	91 e3       	ldi	r25, 0x31	; 49
   1c002:	1f 92       	push	r1
   1c004:	9f 93       	push	r25
   1c006:	8f 93       	push	r24
   1c008:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c00c:	ce 01       	movw	r24, r28
   1c00e:	0e 94 e8 cb 	call	0x197d0	; 0x197d0 <lif_close_volume>
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
   1c012:	ed b7       	in	r30, 0x3d	; 61
   1c014:	fe b7       	in	r31, 0x3e	; 62
   1c016:	37 96       	adiw	r30, 0x07	; 7
   1c018:	0f b6       	in	r0, 0x3f	; 63
   1c01a:	f8 94       	cli
   1c01c:	fe bf       	out	0x3e, r31	; 62
   1c01e:	0f be       	out	0x3f, r0	; 63
   1c020:	ed bf       	out	0x3d, r30	; 61
   1c022:	81 e0       	ldi	r24, 0x01	; 1
   1c024:	90 e0       	ldi	r25, 0x00	; 0
   1c026:	02 c0       	rjmp	.+4      	; 0x1c02c <lif_rename_file+0x104>

    }

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1); 
   1c028:	8f ef       	ldi	r24, 0xFF	; 255
   1c02a:	9f ef       	ldi	r25, 0xFF	; 255
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
}
   1c02c:	cd b7       	in	r28, 0x3d	; 61
   1c02e:	de b7       	in	r29, 0x3e	; 62
   1c030:	ea e0       	ldi	r30, 0x0A	; 10
   1c032:	fd c5       	rjmp	.+3066   	; 0x1cc2e <__epilogue_restores__+0x10>

0001c034 <lif_create_image>:
/// @param[in] dirsectors: Number of LIF directory sectors
/// @param[in] sectors: total disk image size in sectors
///@return bytes writting to disk image
MEMSPACE
long lif_create_image(char *lifimagename, char *liflabel, uint32_t dirsectors, uint32_t sectors)
{
   1c034:	4f 92       	push	r4
   1c036:	5f 92       	push	r5
   1c038:	6f 92       	push	r6
   1c03a:	7f 92       	push	r7
   1c03c:	af 92       	push	r10
   1c03e:	bf 92       	push	r11
   1c040:	cf 92       	push	r12
   1c042:	df 92       	push	r13
   1c044:	ef 92       	push	r14
   1c046:	ff 92       	push	r15
   1c048:	0f 93       	push	r16
   1c04a:	1f 93       	push	r17
   1c04c:	cf 93       	push	r28
   1c04e:	df 93       	push	r29
   1c050:	27 01       	movw	r4, r14
   1c052:	38 01       	movw	r6, r16
    uint32_t dirstart,filestart,filesectors,end;
    lif_t *LIF;

    if(!*lifimagename)
   1c054:	dc 01       	movw	r26, r24
   1c056:	ec 91       	ld	r30, X
   1c058:	e1 11       	cpse	r30, r1
   1c05a:	03 c0       	rjmp	.+6      	; 0x1c062 <lif_create_image+0x2e>
    {
        printf("lif_create_image: lifimagename is empty\n");
   1c05c:	8f e5       	ldi	r24, 0x5F	; 95
   1c05e:	91 e3       	ldi	r25, 0x31	; 49
   1c060:	16 c0       	rjmp	.+44     	; 0x1c08e <lif_create_image+0x5a>
        return(-1);
    }
    if(!*liflabel)
   1c062:	db 01       	movw	r26, r22
   1c064:	ec 91       	ld	r30, X
   1c066:	e1 11       	cpse	r30, r1
   1c068:	03 c0       	rjmp	.+6      	; 0x1c070 <lif_create_image+0x3c>
    {
        printf("lif_create_image: liflabel is empty\n");
   1c06a:	8a e3       	ldi	r24, 0x3A	; 58
   1c06c:	91 e3       	ldi	r25, 0x31	; 49
   1c06e:	0f c0       	rjmp	.+30     	; 0x1c08e <lif_create_image+0x5a>
        return(-1);
    }
    if(!dirsectors)
   1c070:	21 15       	cp	r18, r1
   1c072:	31 05       	cpc	r19, r1
   1c074:	41 05       	cpc	r20, r1
   1c076:	51 05       	cpc	r21, r1
   1c078:	19 f4       	brne	.+6      	; 0x1c080 <lif_create_image+0x4c>
    {
        printf("lif_create_image: dirsectors is 0\n");
   1c07a:	87 e1       	ldi	r24, 0x17	; 23
   1c07c:	91 e3       	ldi	r25, 0x31	; 49
   1c07e:	07 c0       	rjmp	.+14     	; 0x1c08e <lif_create_image+0x5a>
        return(-1);
    }
    if(!sectors)
   1c080:	e1 14       	cp	r14, r1
   1c082:	f1 04       	cpc	r15, r1
   1c084:	01 05       	cpc	r16, r1
   1c086:	11 05       	cpc	r17, r1
   1c088:	59 f4       	brne	.+22     	; 0x1c0a0 <lif_create_image+0x6c>
    {
        printf("lif_create_image: sectors is 0\n");
   1c08a:	87 ef       	ldi	r24, 0xF7	; 247
   1c08c:	90 e3       	ldi	r25, 0x30	; 48
   1c08e:	1f 92       	push	r1
   1c090:	9f 93       	push	r25
   1c092:	8f 93       	push	r24
   1c094:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
        return(-1);
   1c098:	0f 90       	pop	r0
   1c09a:	0f 90       	pop	r0
   1c09c:	0f 90       	pop	r0
   1c09e:	30 c0       	rjmp	.+96     	; 0x1c100 <lif_create_image+0xcc>
    dirstart = 2;
    filestart = dirstart + dirsectors;
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
   1c0a0:	67 01       	movw	r12, r14
   1c0a2:	78 01       	movw	r14, r16
   1c0a4:	b2 e0       	ldi	r27, 0x02	; 2
   1c0a6:	cb 1a       	sub	r12, r27
   1c0a8:	d1 08       	sbc	r13, r1
   1c0aa:	e1 08       	sbc	r14, r1
   1c0ac:	f1 08       	sbc	r15, r1
   1c0ae:	56 01       	movw	r10, r12
   1c0b0:	67 01       	movw	r12, r14
   1c0b2:	a2 1a       	sub	r10, r18
   1c0b4:	b3 0a       	sbc	r11, r19
   1c0b6:	c4 0a       	sbc	r12, r20
   1c0b8:	d5 0a       	sbc	r13, r21
   1c0ba:	79 01       	movw	r14, r18
   1c0bc:	8a 01       	movw	r16, r20
   1c0be:	22 e0       	ldi	r18, 0x02	; 2
   1c0c0:	30 e0       	ldi	r19, 0x00	; 0
   1c0c2:	40 e0       	ldi	r20, 0x00	; 0
   1c0c4:	50 e0       	ldi	r21, 0x00	; 0
   1c0c6:	0e 94 4e ce 	call	0x19c9c	; 0x19c9c <lif_create_volume>
    if(LIF == NULL)
   1c0ca:	00 97       	sbiw	r24, 0x00	; 0
   1c0cc:	c9 f0       	breq	.+50     	; 0x1c100 <lif_create_image+0xcc>
        return(-1);
    lif_close_volume(LIF);
   1c0ce:	0e 94 e8 cb 	call	0x197d0	; 0x197d0 <lif_close_volume>

    printf("\tFormating: wrote %ld sectors\n", (long)end);
   1c0d2:	82 01       	movw	r16, r4
   1c0d4:	d6 2d       	mov	r29, r6
   1c0d6:	c7 2d       	mov	r28, r7
   1c0d8:	7f 92       	push	r7
   1c0da:	6f 92       	push	r6
   1c0dc:	5f 92       	push	r5
   1c0de:	4f 92       	push	r4
   1c0e0:	88 ed       	ldi	r24, 0xD8	; 216
   1c0e2:	90 e3       	ldi	r25, 0x30	; 48
   1c0e4:	1f 92       	push	r1
   1c0e6:	9f 93       	push	r25
   1c0e8:	8f 93       	push	r24
   1c0ea:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    return(end);
   1c0ee:	8d b7       	in	r24, 0x3d	; 61
   1c0f0:	9e b7       	in	r25, 0x3e	; 62
   1c0f2:	07 96       	adiw	r24, 0x07	; 7
   1c0f4:	0f b6       	in	r0, 0x3f	; 63
   1c0f6:	f8 94       	cli
   1c0f8:	9e bf       	out	0x3e, r25	; 62
   1c0fa:	0f be       	out	0x3f, r0	; 63
   1c0fc:	8d bf       	out	0x3d, r24	; 61
   1c0fe:	04 c0       	rjmp	.+8      	; 0x1c108 <lif_create_image+0xd4>
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
    if(LIF == NULL)
        return(-1);
   1c100:	0f ef       	ldi	r16, 0xFF	; 255
   1c102:	1f ef       	ldi	r17, 0xFF	; 255
   1c104:	df ef       	ldi	r29, 0xFF	; 255
   1c106:	cf ef       	ldi	r28, 0xFF	; 255
    lif_close_volume(LIF);

    printf("\tFormating: wrote %ld sectors\n", (long)end);
    return(end);
}
   1c108:	b8 01       	movw	r22, r16
   1c10a:	8d 2f       	mov	r24, r29
   1c10c:	9c 2f       	mov	r25, r28
   1c10e:	df 91       	pop	r29
   1c110:	cf 91       	pop	r28
   1c112:	1f 91       	pop	r17
   1c114:	0f 91       	pop	r16
   1c116:	ff 90       	pop	r15
   1c118:	ef 90       	pop	r14
   1c11a:	df 90       	pop	r13
   1c11c:	cf 90       	pop	r12
   1c11e:	bf 90       	pop	r11
   1c120:	af 90       	pop	r10
   1c122:	7f 90       	pop	r7
   1c124:	6f 90       	pop	r6
   1c126:	5f 90       	pop	r5
   1c128:	4f 90       	pop	r4
   1c12a:	08 95       	ret

0001c12c <lif_tests>:

/// @brief LIF user tests
/// @return  1 matched token, 0 if not
MEMSPACE
int lif_tests(int argc, char *argv[])
{
   1c12c:	a0 e0       	ldi	r26, 0x00	; 0
   1c12e:	b0 e0       	ldi	r27, 0x00	; 0
   1c130:	eb e9       	ldi	r30, 0x9B	; 155
   1c132:	f0 ee       	ldi	r31, 0xE0	; 224
   1c134:	5e c5       	rjmp	.+2748   	; 0x1cbf2 <__prologue_saves__+0xc>
    // NAME
    ind = 0;
	// Skip program name
    ptr = argv[ind++];

    if(!ptr )
   1c136:	fb 01       	movw	r30, r22
   1c138:	20 81       	ld	r18, Z
   1c13a:	31 81       	ldd	r19, Z+1	; 0x01
   1c13c:	23 2b       	or	r18, r19
   1c13e:	59 f0       	breq	.+22     	; 0x1c156 <lif_tests+0x2a>
   1c140:	6b 01       	movw	r12, r22
   1c142:	4c 01       	movw	r8, r24
        return(0);

	// Next Argument after program name
    ptr = argv[ind++];
   1c144:	fb 01       	movw	r30, r22
   1c146:	a2 80       	ldd	r10, Z+2	; 0x02
   1c148:	b3 80       	ldd	r11, Z+3	; 0x03



    if(argc <= 1 || !ptr || MATCH(ptr,"help") || MATCH(ptr,"-help") || MATCH(ptr,"-?") )
   1c14a:	02 97       	sbiw	r24, 0x02	; 2
   1c14c:	3c f4       	brge	.+14     	; 0x1c15c <lif_tests+0x30>
    {
        lif_help(1);
   1c14e:	81 e0       	ldi	r24, 0x01	; 1
   1c150:	90 e0       	ldi	r25, 0x00	; 0
   1c152:	0e 94 53 c2 	call	0x184a6	; 0x184a6 <lif_help>
#ifdef TELEDISK
        td0_help(1);
#endif
        return(0);
   1c156:	80 e0       	ldi	r24, 0x00	; 0
   1c158:	90 e0       	ldi	r25, 0x00	; 0
   1c15a:	56 c1       	rjmp	.+684    	; 0x1c408 <lif_tests+0x2dc>
	// Next Argument after program name
    ptr = argv[ind++];



    if(argc <= 1 || !ptr || MATCH(ptr,"help") || MATCH(ptr,"-help") || MATCH(ptr,"-?") )
   1c15c:	a1 14       	cp	r10, r1
   1c15e:	b1 04       	cpc	r11, r1
   1c160:	b1 f3       	breq	.-20     	; 0x1c14e <lif_tests+0x22>
   1c162:	67 ef       	ldi	r22, 0xF7	; 247
   1c164:	75 e1       	ldi	r23, 0x15	; 21
   1c166:	c5 01       	movw	r24, r10
   1c168:	0e 94 33 33 	call	0x6666	; 0x6666 <MATCH>
   1c16c:	89 2b       	or	r24, r25
   1c16e:	79 f7       	brne	.-34     	; 0x1c14e <lif_tests+0x22>
   1c170:	66 ef       	ldi	r22, 0xF6	; 246
   1c172:	75 e1       	ldi	r23, 0x15	; 21
   1c174:	c5 01       	movw	r24, r10
   1c176:	0e 94 33 33 	call	0x6666	; 0x6666 <MATCH>
   1c17a:	89 2b       	or	r24, r25
   1c17c:	41 f7       	brne	.-48     	; 0x1c14e <lif_tests+0x22>
   1c17e:	6c ef       	ldi	r22, 0xFC	; 252
   1c180:	75 e1       	ldi	r23, 0x15	; 21
   1c182:	c5 01       	movw	r24, r10
   1c184:	0e 94 33 33 	call	0x6666	; 0x6666 <MATCH>
   1c188:	89 2b       	or	r24, r25
   1c18a:	09 f7       	brne	.-62     	; 0x1c14e <lif_tests+0x22>
        return(0);
    }

	// Turn one debugging
	// in the future we can add tests for specific messages
    if (MATCHARGS(ptr,"-d", (ind + 0) ,argc))
   1c18c:	94 01       	movw	r18, r8
   1c18e:	42 e0       	ldi	r20, 0x02	; 2
   1c190:	50 e0       	ldi	r21, 0x00	; 0
   1c192:	6f ef       	ldi	r22, 0xFF	; 255
   1c194:	75 e1       	ldi	r23, 0x15	; 21
   1c196:	c5 01       	movw	r24, r10
   1c198:	0e 94 47 33 	call	0x668e	; 0x668e <MATCHARGS>
   1c19c:	89 2b       	or	r24, r25
   1c19e:	61 f0       	breq	.+24     	; 0x1c1b8 <lif_tests+0x8c>
    {
		debuglevel = 0xffff;
   1c1a0:	8f ef       	ldi	r24, 0xFF	; 255
   1c1a2:	9f ef       	ldi	r25, 0xFF	; 255
   1c1a4:	90 93 be 01 	sts	0x01BE, r25	; 0x8001be <debuglevel+0x1>
   1c1a8:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <debuglevel>
		ptr = argv[ind++];
   1c1ac:	f6 01       	movw	r30, r12
   1c1ae:	a4 80       	ldd	r10, Z+4	; 0x04
   1c1b0:	b5 80       	ldd	r11, Z+5	; 0x05
   1c1b2:	c3 e0       	ldi	r28, 0x03	; 3
   1c1b4:	d0 e0       	ldi	r29, 0x00	; 0
   1c1b6:	02 c0       	rjmp	.+4      	; 0x1c1bc <lif_tests+0x90>

    if(!ptr )
        return(0);

	// Next Argument after program name
    ptr = argv[ind++];
   1c1b8:	c2 e0       	ldi	r28, 0x02	; 2
   1c1ba:	d0 e0       	ldi	r29, 0x00	; 0
    {
		debuglevel = 0xffff;
		ptr = argv[ind++];
    }

    if (MATCHARGS(ptr,"addbin", (ind + 3) ,argc))
   1c1bc:	7e 01       	movw	r14, r28
   1c1be:	f3 e0       	ldi	r31, 0x03	; 3
   1c1c0:	ef 0e       	add	r14, r31
   1c1c2:	f1 1c       	adc	r15, r1
   1c1c4:	94 01       	movw	r18, r8
   1c1c6:	a7 01       	movw	r20, r14
   1c1c8:	62 e0       	ldi	r22, 0x02	; 2
   1c1ca:	76 e1       	ldi	r23, 0x16	; 22
   1c1cc:	c5 01       	movw	r24, r10
   1c1ce:	0e 94 47 33 	call	0x668e	; 0x668e <MATCHARGS>
   1c1d2:	89 2b       	or	r24, r25
   1c1d4:	81 f0       	breq	.+32     	; 0x1c1f6 <lif_tests+0xca>
    {
        lif_add_lif_file(argv[ind],argv[ind+1],argv[ind+2]);
   1c1d6:	22 96       	adiw	r28, 0x02	; 2
   1c1d8:	cc 0f       	add	r28, r28
   1c1da:	dd 1f       	adc	r29, r29
   1c1dc:	cc 0d       	add	r28, r12
   1c1de:	dd 1d       	adc	r29, r13
   1c1e0:	48 81       	ld	r20, Y
   1c1e2:	59 81       	ldd	r21, Y+1	; 0x01
   1c1e4:	fe 01       	movw	r30, r28
   1c1e6:	32 97       	sbiw	r30, 0x02	; 2
   1c1e8:	60 81       	ld	r22, Z
   1c1ea:	71 81       	ldd	r23, Z+1	; 0x01
   1c1ec:	24 97       	sbiw	r28, 0x04	; 4
   1c1ee:	88 81       	ld	r24, Y
   1c1f0:	99 81       	ldd	r25, Y+1	; 0x01
   1c1f2:	6a dc       	rcall	.-1836   	; 0x1bac8 <lif_add_lif_file>
   1c1f4:	07 c1       	rjmp	.+526    	; 0x1c404 <lif_tests+0x2d8>

        return(1);
    }
    if (MATCHARGS(ptr,"add", (ind + 3) ,argc))
   1c1f6:	94 01       	movw	r18, r8
   1c1f8:	a7 01       	movw	r20, r14
   1c1fa:	69 e0       	ldi	r22, 0x09	; 9
   1c1fc:	76 e1       	ldi	r23, 0x16	; 22
   1c1fe:	c5 01       	movw	r24, r10
   1c200:	0e 94 47 33 	call	0x668e	; 0x668e <MATCHARGS>
   1c204:	89 2b       	or	r24, r25
   1c206:	89 f0       	breq	.+34     	; 0x1c22a <lif_tests+0xfe>
    {
        lif_add_ascii_file_as_e010(argv[ind],argv[ind+1],argv[ind+2]);
   1c208:	22 96       	adiw	r28, 0x02	; 2
   1c20a:	cc 0f       	add	r28, r28
   1c20c:	dd 1f       	adc	r29, r29
   1c20e:	cc 0d       	add	r28, r12
   1c210:	dd 1d       	adc	r29, r13
   1c212:	48 81       	ld	r20, Y
   1c214:	59 81       	ldd	r21, Y+1	; 0x01
   1c216:	fe 01       	movw	r30, r28
   1c218:	32 97       	sbiw	r30, 0x02	; 2
   1c21a:	60 81       	ld	r22, Z
   1c21c:	71 81       	ldd	r23, Z+1	; 0x01
   1c21e:	24 97       	sbiw	r28, 0x04	; 4
   1c220:	88 81       	ld	r24, Y
   1c222:	99 81       	ldd	r25, Y+1	; 0x01
   1c224:	0e 94 f8 d7 	call	0x1aff0	; 0x1aff0 <lif_add_ascii_file_as_e010>
   1c228:	ed c0       	rjmp	.+474    	; 0x1c404 <lif_tests+0x2d8>
        return(1);
    }
    if (MATCHARGS(ptr,"createdisk", (ind + 3) ,argc))
   1c22a:	94 01       	movw	r18, r8
   1c22c:	a7 01       	movw	r20, r14
   1c22e:	6d e0       	ldi	r22, 0x0D	; 13
   1c230:	76 e1       	ldi	r23, 0x16	; 22
   1c232:	c5 01       	movw	r24, r10
   1c234:	0e 94 47 33 	call	0x668e	; 0x668e <MATCHARGS>
   1c238:	89 2b       	or	r24, r25
   1c23a:	09 f4       	brne	.+2      	; 0x1c23e <lif_tests+0x112>
   1c23c:	42 c0       	rjmp	.+132    	; 0x1c2c2 <lif_tests+0x196>
    {
		///@brief format LIF image
		long dir,sectors;
		char *name = argv[ind];
   1c23e:	cc 0f       	add	r28, r28
   1c240:	dd 1f       	adc	r29, r29
   1c242:	cc 0d       	add	r28, r12
   1c244:	dd 1d       	adc	r29, r13
   1c246:	c8 80       	ld	r12, Y
   1c248:	d9 80       	ldd	r13, Y+1	; 0x01
		char *label = argv[ind+1];
   1c24a:	aa 80       	ldd	r10, Y+2	; 0x02
   1c24c:	bb 80       	ldd	r11, Y+3	; 0x03
		char *model = argv[ind+2];
   1c24e:	0c 80       	ldd	r0, Y+4	; 0x04
   1c250:	dd 81       	ldd	r29, Y+5	; 0x05
   1c252:	c0 2d       	mov	r28, r0
		if( MATCHI_LEN(model,"hp"))
   1c254:	68 e1       	ldi	r22, 0x18	; 24
   1c256:	76 e1       	ldi	r23, 0x16	; 22
   1c258:	ce 01       	movw	r24, r28
   1c25a:	0e 94 8a 33 	call	0x6714	; 0x6714 <MATCHI_LEN>
   1c25e:	89 2b       	or	r24, r25
   1c260:	09 f0       	breq	.+2      	; 0x1c264 <lif_tests+0x138>
			model +=2;
   1c262:	22 96       	adiw	r28, 0x02	; 2
		if(hpdir_find_drive(model,0, 0))
   1c264:	40 e0       	ldi	r20, 0x00	; 0
   1c266:	50 e0       	ldi	r21, 0x00	; 0
   1c268:	60 e0       	ldi	r22, 0x00	; 0
   1c26a:	70 e0       	ldi	r23, 0x00	; 0
   1c26c:	ce 01       	movw	r24, r28
   1c26e:	0e 94 9d a6 	call	0x14d3a	; 0x14d3a <hpdir_find_drive>
   1c272:	89 2b       	or	r24, r25
   1c274:	b9 f0       	breq	.+46     	; 0x1c2a4 <lif_tests+0x178>
		{
			dir = lif_dir_count(hpdir.BLOCKS);
   1c276:	60 91 a4 20 	lds	r22, 0x20A4	; 0x8020a4 <hpdir+0xac>
   1c27a:	70 91 a5 20 	lds	r23, 0x20A5	; 0x8020a5 <hpdir+0xad>
   1c27e:	80 91 a6 20 	lds	r24, 0x20A6	; 0x8020a6 <hpdir+0xae>
   1c282:	90 91 a7 20 	lds	r25, 0x20A7	; 0x8020a7 <hpdir+0xaf>
   1c286:	0e 94 80 a6 	call	0x14d00	; 0x14d00 <lif_dir_count>
   1c28a:	9b 01       	movw	r18, r22
   1c28c:	ac 01       	movw	r20, r24
			sectors = hpdir.BLOCKS;
			lif_create_image(name, label, dir, sectors);
   1c28e:	e0 90 a4 20 	lds	r14, 0x20A4	; 0x8020a4 <hpdir+0xac>
   1c292:	f0 90 a5 20 	lds	r15, 0x20A5	; 0x8020a5 <hpdir+0xad>
   1c296:	00 91 a6 20 	lds	r16, 0x20A6	; 0x8020a6 <hpdir+0xae>
   1c29a:	10 91 a7 20 	lds	r17, 0x20A7	; 0x8020a7 <hpdir+0xaf>
   1c29e:	b5 01       	movw	r22, r10
   1c2a0:	c6 01       	movw	r24, r12
   1c2a2:	36 c0       	rjmp	.+108    	; 0x1c310 <lif_tests+0x1e4>
			return(1);
		}
		printf("Disk: %s not found in hpdir.ini\n", model);
   1c2a4:	df 93       	push	r29
   1c2a6:	cf 93       	push	r28
   1c2a8:	8b e0       	ldi	r24, 0x0B	; 11
   1c2aa:	93 e4       	ldi	r25, 0x43	; 67
   1c2ac:	1f 92       	push	r1
   1c2ae:	9f 93       	push	r25
   1c2b0:	8f 93       	push	r24
   1c2b2:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
        return(1);
   1c2b6:	0f 90       	pop	r0
   1c2b8:	0f 90       	pop	r0
   1c2ba:	0f 90       	pop	r0
   1c2bc:	0f 90       	pop	r0
   1c2be:	0f 90       	pop	r0
   1c2c0:	a1 c0       	rjmp	.+322    	; 0x1c404 <lif_tests+0x2d8>
    }
    if (MATCHARGS(ptr,"create", (ind + 4) ,argc))
   1c2c2:	94 01       	movw	r18, r8
   1c2c4:	ae 01       	movw	r20, r28
   1c2c6:	4c 5f       	subi	r20, 0xFC	; 252
   1c2c8:	5f 4f       	sbci	r21, 0xFF	; 255
   1c2ca:	6b e1       	ldi	r22, 0x1B	; 27
   1c2cc:	76 e1       	ldi	r23, 0x16	; 22
   1c2ce:	c5 01       	movw	r24, r10
   1c2d0:	0e 94 47 33 	call	0x668e	; 0x668e <MATCHARGS>
   1c2d4:	89 2b       	or	r24, r25
   1c2d6:	f1 f0       	breq	.+60     	; 0x1c314 <lif_tests+0x1e8>
    {
        ///@brief format LIF image
        lif_create_image(argv[ind],argv[ind+1], atol(argv[ind+2]), atol(argv[ind+3]) );
   1c2d8:	e7 01       	movw	r28, r14
   1c2da:	cc 0f       	add	r28, r28
   1c2dc:	dd 1f       	adc	r29, r29
   1c2de:	cc 0d       	add	r28, r12
   1c2e0:	dd 1d       	adc	r29, r13
   1c2e2:	88 81       	ld	r24, Y
   1c2e4:	99 81       	ldd	r25, Y+1	; 0x01
   1c2e6:	0e 94 fe 47 	call	0x8ffc	; 0x8ffc <atol>
   1c2ea:	6b 01       	movw	r12, r22
   1c2ec:	7c 01       	movw	r14, r24
   1c2ee:	fe 01       	movw	r30, r28
   1c2f0:	32 97       	sbiw	r30, 0x02	; 2
   1c2f2:	80 81       	ld	r24, Z
   1c2f4:	91 81       	ldd	r25, Z+1	; 0x01
   1c2f6:	0e 94 fe 47 	call	0x8ffc	; 0x8ffc <atol>
   1c2fa:	9b 01       	movw	r18, r22
   1c2fc:	ac 01       	movw	r20, r24
   1c2fe:	fe 01       	movw	r30, r28
   1c300:	34 97       	sbiw	r30, 0x04	; 4
   1c302:	60 81       	ld	r22, Z
   1c304:	71 81       	ldd	r23, Z+1	; 0x01
   1c306:	26 97       	sbiw	r28, 0x06	; 6
   1c308:	87 01       	movw	r16, r14
   1c30a:	76 01       	movw	r14, r12
   1c30c:	88 81       	ld	r24, Y
   1c30e:	99 81       	ldd	r25, Y+1	; 0x01
   1c310:	91 de       	rcall	.-734    	; 0x1c034 <lif_create_image>
   1c312:	78 c0       	rjmp	.+240    	; 0x1c404 <lif_tests+0x2d8>
        return(1);
    }
    if (MATCHARGS(ptr,"del", (ind + 2) ,argc))
   1c314:	8e 01       	movw	r16, r28
   1c316:	0e 5f       	subi	r16, 0xFE	; 254
   1c318:	1f 4f       	sbci	r17, 0xFF	; 255
   1c31a:	94 01       	movw	r18, r8
   1c31c:	a8 01       	movw	r20, r16
   1c31e:	62 e2       	ldi	r22, 0x22	; 34
   1c320:	76 e1       	ldi	r23, 0x16	; 22
   1c322:	c5 01       	movw	r24, r10
   1c324:	0e 94 47 33 	call	0x668e	; 0x668e <MATCHARGS>
   1c328:	ae 01       	movw	r20, r28
   1c32a:	4f 5f       	subi	r20, 0xFF	; 255
   1c32c:	5f 4f       	sbci	r21, 0xFF	; 255
   1c32e:	89 2b       	or	r24, r25
   1c330:	61 f0       	breq	.+24     	; 0x1c34a <lif_tests+0x21e>
    {
        lif_del_file(argv[ind],argv[ind+1]);
   1c332:	ea 01       	movw	r28, r20
   1c334:	cc 0f       	add	r28, r28
   1c336:	dd 1f       	adc	r29, r29
   1c338:	cc 0d       	add	r28, r12
   1c33a:	dd 1d       	adc	r29, r13
   1c33c:	68 81       	ld	r22, Y
   1c33e:	79 81       	ldd	r23, Y+1	; 0x01
   1c340:	22 97       	sbiw	r28, 0x02	; 2
   1c342:	88 81       	ld	r24, Y
   1c344:	99 81       	ldd	r25, Y+1	; 0x01
   1c346:	58 dd       	rcall	.-1360   	; 0x1bdf8 <lif_del_file>
   1c348:	5d c0       	rjmp	.+186    	; 0x1c404 <lif_tests+0x2d8>
        return(1);
    }
    if (MATCHARGS(ptr,"dir", (ind + 1) ,argc))
   1c34a:	94 01       	movw	r18, r8
   1c34c:	6c e4       	ldi	r22, 0x4C	; 76
   1c34e:	7b e0       	ldi	r23, 0x0B	; 11
   1c350:	c5 01       	movw	r24, r10
   1c352:	0e 94 47 33 	call	0x668e	; 0x668e <MATCHARGS>
   1c356:	89 2b       	or	r24, r25
   1c358:	49 f0       	breq	.+18     	; 0x1c36c <lif_tests+0x240>
    {
        lif_dir(argv[ind]);
   1c35a:	cc 0f       	add	r28, r28
   1c35c:	dd 1f       	adc	r29, r29
   1c35e:	cc 0d       	add	r28, r12
   1c360:	dd 1d       	adc	r29, r13
   1c362:	88 81       	ld	r24, Y
   1c364:	99 81       	ldd	r25, Y+1	; 0x01
   1c366:	0e 94 e0 d3 	call	0x1a7c0	; 0x1a7c0 <lif_dir>
   1c36a:	4c c0       	rjmp	.+152    	; 0x1c404 <lif_tests+0x2d8>
        return(1);
    }
    if (MATCHARGS(ptr,"extractbin", (ind + 3) ,argc))
   1c36c:	94 01       	movw	r18, r8
   1c36e:	a7 01       	movw	r20, r14
   1c370:	66 e2       	ldi	r22, 0x26	; 38
   1c372:	76 e1       	ldi	r23, 0x16	; 22
   1c374:	c5 01       	movw	r24, r10
   1c376:	0e 94 47 33 	call	0x668e	; 0x668e <MATCHARGS>
   1c37a:	89 2b       	or	r24, r25
   1c37c:	81 f0       	breq	.+32     	; 0x1c39e <lif_tests+0x272>
    {

        lif_extract_lif_as_lif(argv[ind],argv[ind+1],argv[ind+2]);
   1c37e:	e8 01       	movw	r28, r16
   1c380:	cc 0f       	add	r28, r28
   1c382:	dd 1f       	adc	r29, r29
   1c384:	cc 0d       	add	r28, r12
   1c386:	dd 1d       	adc	r29, r13
   1c388:	48 81       	ld	r20, Y
   1c38a:	59 81       	ldd	r21, Y+1	; 0x01
   1c38c:	fe 01       	movw	r30, r28
   1c38e:	32 97       	sbiw	r30, 0x02	; 2
   1c390:	60 81       	ld	r22, Z
   1c392:	71 81       	ldd	r23, Z+1	; 0x01
   1c394:	24 97       	sbiw	r28, 0x04	; 4
   1c396:	88 81       	ld	r24, Y
   1c398:	99 81       	ldd	r25, Y+1	; 0x01
   1c39a:	4f da       	rcall	.-2914   	; 0x1b83a <lif_extract_lif_as_lif>
   1c39c:	33 c0       	rjmp	.+102    	; 0x1c404 <lif_tests+0x2d8>
        return(1);
    }
    if (MATCHARGS(ptr,"extract", (ind + 3) ,argc))
   1c39e:	94 01       	movw	r18, r8
   1c3a0:	a7 01       	movw	r20, r14
   1c3a2:	61 e3       	ldi	r22, 0x31	; 49
   1c3a4:	76 e1       	ldi	r23, 0x16	; 22
   1c3a6:	c5 01       	movw	r24, r10
   1c3a8:	0e 94 47 33 	call	0x668e	; 0x668e <MATCHARGS>
   1c3ac:	89 2b       	or	r24, r25
   1c3ae:	89 f0       	breq	.+34     	; 0x1c3d2 <lif_tests+0x2a6>
    {

        lif_extract_e010_as_ascii(argv[ind],argv[ind+1],argv[ind+2]);
   1c3b0:	e8 01       	movw	r28, r16
   1c3b2:	cc 0f       	add	r28, r28
   1c3b4:	dd 1f       	adc	r29, r29
   1c3b6:	cc 0d       	add	r28, r12
   1c3b8:	dd 1d       	adc	r29, r13
   1c3ba:	48 81       	ld	r20, Y
   1c3bc:	59 81       	ldd	r21, Y+1	; 0x01
   1c3be:	fe 01       	movw	r30, r28
   1c3c0:	32 97       	sbiw	r30, 0x02	; 2
   1c3c2:	60 81       	ld	r22, Z
   1c3c4:	71 81       	ldd	r23, Z+1	; 0x01
   1c3c6:	24 97       	sbiw	r28, 0x04	; 4
   1c3c8:	88 81       	ld	r24, Y
   1c3ca:	99 81       	ldd	r25, Y+1	; 0x01
   1c3cc:	0e 94 31 d9 	call	0x1b262	; 0x1b262 <lif_extract_e010_as_ascii>
   1c3d0:	19 c0       	rjmp	.+50     	; 0x1c404 <lif_tests+0x2d8>
        return(1);
    }
    if (MATCHARGS(ptr,"rename", (ind + 3) ,argc))
   1c3d2:	94 01       	movw	r18, r8
   1c3d4:	a7 01       	movw	r20, r14
   1c3d6:	69 e5       	ldi	r22, 0x59	; 89
   1c3d8:	7b e0       	ldi	r23, 0x0B	; 11
   1c3da:	c5 01       	movw	r24, r10
   1c3dc:	0e 94 47 33 	call	0x668e	; 0x668e <MATCHARGS>
   1c3e0:	89 2b       	or	r24, r25
   1c3e2:	09 f4       	brne	.+2      	; 0x1c3e6 <lif_tests+0x2ba>
   1c3e4:	b8 ce       	rjmp	.-656    	; 0x1c156 <lif_tests+0x2a>
    {
        lif_rename_file(argv[ind],argv[ind+1],argv[ind+2]);
   1c3e6:	00 0f       	add	r16, r16
   1c3e8:	11 1f       	adc	r17, r17
   1c3ea:	e6 01       	movw	r28, r12
   1c3ec:	c0 0f       	add	r28, r16
   1c3ee:	d1 1f       	adc	r29, r17
   1c3f0:	48 81       	ld	r20, Y
   1c3f2:	59 81       	ldd	r21, Y+1	; 0x01
   1c3f4:	fe 01       	movw	r30, r28
   1c3f6:	32 97       	sbiw	r30, 0x02	; 2
   1c3f8:	60 81       	ld	r22, Z
   1c3fa:	71 81       	ldd	r23, Z+1	; 0x01
   1c3fc:	24 97       	sbiw	r28, 0x04	; 4
   1c3fe:	88 81       	ld	r24, Y
   1c400:	99 81       	ldd	r25, Y+1	; 0x01
        return(1);
   1c402:	92 dd       	rcall	.-1244   	; 0x1bf28 <lif_rename_file>
        td02lif(argc,argv);
        return(1);
    }
#endif
    return(0);
}
   1c404:	81 e0       	ldi	r24, 0x01	; 1
   1c406:	90 e0       	ldi	r25, 0x00	; 0
   1c408:	cd b7       	in	r28, 0x3d	; 61
   1c40a:	de b7       	in	r29, 0x3e	; 62
   1c40c:	ec e0       	ldi	r30, 0x0C	; 12
   1c40e:	0d c4       	rjmp	.+2074   	; 0x1cc2a <__epilogue_restores__+0xc>

0001c410 <copyright>:

///@brief Display Copyright
///@return void
void copyright()
{
    printf("Stand alone version of LIF utilities for linux\n");
   1c410:	83 e7       	ldi	r24, 0x73	; 115
   1c412:	98 e4       	ldi	r25, 0x48	; 72
   1c414:	1f 92       	push	r1
   1c416:	9f 93       	push	r25
   1c418:	8f 93       	push	r24
   1c41a:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    printf("HP85 Disk and Device Emulator\n");
   1c41e:	84 e5       	ldi	r24, 0x54	; 84
   1c420:	98 e4       	ldi	r25, 0x48	; 72
   1c422:	1f 92       	push	r1
   1c424:	9f 93       	push	r25
   1c426:	8f 93       	push	r24
   1c428:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    printf(" (c) 2014-2020 by Mike Gore\n");
   1c42c:	87 e3       	ldi	r24, 0x37	; 55
   1c42e:	98 e4       	ldi	r25, 0x48	; 72
   1c430:	1f 92       	push	r1
   1c432:	9f 93       	push	r25
   1c434:	8f 93       	push	r24
   1c436:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    printf(" GNU version 3\n");
   1c43a:	87 e2       	ldi	r24, 0x27	; 39
   1c43c:	98 e4       	ldi	r25, 0x48	; 72
   1c43e:	1f 92       	push	r1
   1c440:	9f 93       	push	r25
   1c442:	8f 93       	push	r24
   1c444:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    printf("-> https://github.com/magore/hp85disk\n");
   1c448:	80 e0       	ldi	r24, 0x00	; 0
   1c44a:	98 e4       	ldi	r25, 0x48	; 72
   1c44c:	1f 92       	push	r1
   1c44e:	9f 93       	push	r25
   1c450:	8f 93       	push	r24
   1c452:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    printf("   GIT last pushed:   %s\n", GIT_VERSION);
   1c456:	89 e3       	ldi	r24, 0x39	; 57
   1c458:	96 e1       	ldi	r25, 0x16	; 22
   1c45a:	9f 93       	push	r25
   1c45c:	8f 93       	push	r24
   1c45e:	86 ee       	ldi	r24, 0xE6	; 230
   1c460:	97 e4       	ldi	r25, 0x47	; 71
   1c462:	1f 92       	push	r1
   1c464:	9f 93       	push	r25
   1c466:	8f 93       	push	r24
   1c468:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    printf("   Last updated file: %s\n", LOCAL_MOD);
   1c46c:	8d e5       	ldi	r24, 0x5D	; 93
   1c46e:	96 e1       	ldi	r25, 0x16	; 22
   1c470:	9f 93       	push	r25
   1c472:	8f 93       	push	r24
   1c474:	8c ec       	ldi	r24, 0xCC	; 204
   1c476:	97 e4       	ldi	r25, 0x47	; 71
   1c478:	1f 92       	push	r1
   1c47a:	9f 93       	push	r25
   1c47c:	8f 93       	push	r24
   1c47e:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
    printf("\n");
   1c482:	8a ec       	ldi	r24, 0xCA	; 202
   1c484:	97 e4       	ldi	r25, 0x47	; 71
   1c486:	1f 92       	push	r1
   1c488:	9f 93       	push	r25
   1c48a:	8f 93       	push	r24
   1c48c:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
}
   1c490:	8d b7       	in	r24, 0x3d	; 61
   1c492:	9e b7       	in	r25, 0x3e	; 62
   1c494:	4c 96       	adiw	r24, 0x1c	; 28
   1c496:	0f b6       	in	r0, 0x3f	; 63
   1c498:	f8 94       	cli
   1c49a:	9e bf       	out	0x3e, r25	; 62
   1c49c:	0f be       	out	0x3f, r0	; 63
   1c49e:	8d bf       	out	0x3d, r24	; 61
   1c4a0:	08 95       	ret

0001c4a2 <delay_tests>:
///
/// This included measurement of avr-libc delays
/// @return  void
void delay_tests()
{
    printf("System delays\n");
   1c4a2:	8b eb       	ldi	r24, 0xBB	; 187
   1c4a4:	97 e4       	ldi	r25, 0x47	; 71
   1c4a6:	1f 92       	push	r1
   1c4a8:	9f 93       	push	r25
   1c4aa:	8f 93       	push	r24
   1c4ac:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>

    clock_elapsed_begin();
   1c4b0:	0e 94 8b 36 	call	0x6d16	; 0x6d16 <clock_elapsed_begin>
    clock_elapsed_end("elapsed timer overhead");
   1c4b4:	81 e8       	ldi	r24, 0x81	; 129
   1c4b6:	96 e1       	ldi	r25, 0x16	; 22
   1c4b8:	0e 94 91 36 	call	0x6d22	; 0x6d22 <clock_elapsed_end>

    clock_elapsed_begin();
   1c4bc:	0e 94 8b 36 	call	0x6d16	; 0x6d16 <clock_elapsed_begin>
   1c4c0:	83 ef       	ldi	r24, 0xF3	; 243
   1c4c2:	91 e0       	ldi	r25, 0x01	; 1
   1c4c4:	01 97       	sbiw	r24, 0x01	; 1
   1c4c6:	f1 f7       	brne	.-4      	; 0x1c4c4 <delay_tests+0x22>
   1c4c8:	00 c0       	rjmp	.+0      	; 0x1c4ca <delay_tests+0x28>
   1c4ca:	00 00       	nop
    _delay_us(100);
    clock_elapsed_end("_delay_us(100)");
   1c4cc:	88 e9       	ldi	r24, 0x98	; 152
   1c4ce:	96 e1       	ldi	r25, 0x16	; 22
   1c4d0:	0e 94 91 36 	call	0x6d22	; 0x6d22 <clock_elapsed_end>

    clock_elapsed_begin();
   1c4d4:	0e 94 8b 36 	call	0x6d16	; 0x6d16 <clock_elapsed_begin>
   1c4d8:	83 ec       	ldi	r24, 0xC3	; 195
   1c4da:	99 e0       	ldi	r25, 0x09	; 9
   1c4dc:	01 97       	sbiw	r24, 0x01	; 1
   1c4de:	f1 f7       	brne	.-4      	; 0x1c4dc <delay_tests+0x3a>
   1c4e0:	00 c0       	rjmp	.+0      	; 0x1c4e2 <delay_tests+0x40>
   1c4e2:	00 00       	nop
    _delay_us(500);
    clock_elapsed_end("_delay_us(500)");
   1c4e4:	87 ea       	ldi	r24, 0xA7	; 167
   1c4e6:	96 e1       	ldi	r25, 0x16	; 22
   1c4e8:	0e 94 91 36 	call	0x6d22	; 0x6d22 <clock_elapsed_end>

    printf("My delays\n");
   1c4ec:	80 eb       	ldi	r24, 0xB0	; 176
   1c4ee:	97 e4       	ldi	r25, 0x47	; 71
   1c4f0:	1f 92       	push	r1
   1c4f2:	9f 93       	push	r25
   1c4f4:	8f 93       	push	r24
   1c4f6:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>

    clock_elapsed_begin();
   1c4fa:	0e 94 8b 36 	call	0x6d16	; 0x6d16 <clock_elapsed_begin>
    delayus(100U);
   1c4fe:	64 e6       	ldi	r22, 0x64	; 100
   1c500:	70 e0       	ldi	r23, 0x00	; 0
   1c502:	80 e0       	ldi	r24, 0x00	; 0
   1c504:	90 e0       	ldi	r25, 0x00	; 0
   1c506:	0e 94 fc 29 	call	0x53f8	; 0x53f8 <delayus>
    clock_elapsed_end("delayus(100)");
   1c50a:	86 eb       	ldi	r24, 0xB6	; 182
   1c50c:	96 e1       	ldi	r25, 0x16	; 22
   1c50e:	0e 94 91 36 	call	0x6d22	; 0x6d22 <clock_elapsed_end>

    clock_elapsed_begin();
   1c512:	0e 94 8b 36 	call	0x6d16	; 0x6d16 <clock_elapsed_begin>
    delayus(500U);
   1c516:	64 ef       	ldi	r22, 0xF4	; 244
   1c518:	71 e0       	ldi	r23, 0x01	; 1
   1c51a:	80 e0       	ldi	r24, 0x00	; 0
   1c51c:	90 e0       	ldi	r25, 0x00	; 0
   1c51e:	0e 94 fc 29 	call	0x53f8	; 0x53f8 <delayus>
    clock_elapsed_end("delayus(500)");
   1c522:	83 ec       	ldi	r24, 0xC3	; 195
   1c524:	96 e1       	ldi	r25, 0x16	; 22
   1c526:	0e 94 91 36 	call	0x6d22	; 0x6d22 <clock_elapsed_end>

    clock_elapsed_begin();
   1c52a:	0e 94 8b 36 	call	0x6d16	; 0x6d16 <clock_elapsed_begin>
    delayus(1100);
   1c52e:	6c e4       	ldi	r22, 0x4C	; 76
   1c530:	74 e0       	ldi	r23, 0x04	; 4
   1c532:	80 e0       	ldi	r24, 0x00	; 0
   1c534:	90 e0       	ldi	r25, 0x00	; 0
   1c536:	0e 94 fc 29 	call	0x53f8	; 0x53f8 <delayus>
    clock_elapsed_end("delayus(1100)");
   1c53a:	80 ed       	ldi	r24, 0xD0	; 208
   1c53c:	96 e1       	ldi	r25, 0x16	; 22
   1c53e:	0e 94 91 36 	call	0x6d22	; 0x6d22 <clock_elapsed_end>

    clock_elapsed_begin();
   1c542:	0e 94 8b 36 	call	0x6d16	; 0x6d16 <clock_elapsed_begin>
    delayms(1000);
   1c546:	68 ee       	ldi	r22, 0xE8	; 232
   1c548:	73 e0       	ldi	r23, 0x03	; 3
   1c54a:	80 e0       	ldi	r24, 0x00	; 0
   1c54c:	90 e0       	ldi	r25, 0x00	; 0
   1c54e:	0e 94 29 2a 	call	0x5452	; 0x5452 <delayms>
    clock_elapsed_end("delayms(1100)");
   1c552:	8e ed       	ldi	r24, 0xDE	; 222
   1c554:	96 e1       	ldi	r25, 0x16	; 22
   1c556:	0e 94 91 36 	call	0x6d22	; 0x6d22 <clock_elapsed_end>
}
   1c55a:	0f 90       	pop	r0
   1c55c:	0f 90       	pop	r0
   1c55e:	0f 90       	pop	r0
   1c560:	0f 90       	pop	r0
   1c562:	0f 90       	pop	r0
   1c564:	0f 90       	pop	r0
   1c566:	08 95       	ret

0001c568 <help>:
   1c568:	53 df       	rcall	.-346    	; 0x1c410 <copyright>
   1c56a:	80 e0       	ldi	r24, 0x00	; 0
   1c56c:	90 e0       	ldi	r25, 0x00	; 0
   1c56e:	0e 94 49 74 	call	0xe892	; 0xe892 <fatfs_help>
   1c572:	80 e0       	ldi	r24, 0x00	; 0
   1c574:	90 e0       	ldi	r25, 0x00	; 0
   1c576:	0e 94 6f 7f 	call	0xfede	; 0xfede <posix_help>
   1c57a:	80 e0       	ldi	r24, 0x00	; 0
   1c57c:	90 e0       	ldi	r25, 0x00	; 0
   1c57e:	0e 94 53 c2 	call	0x184a6	; 0x184a6 <lif_help>
   1c582:	80 e0       	ldi	r24, 0x00	; 0
   1c584:	90 e0       	ldi	r25, 0x00	; 0
   1c586:	0e 94 af 91 	call	0x1235e	; 0x1235e <gpib_help>
   1c58a:	86 e8       	ldi	r24, 0x86	; 134
   1c58c:	97 e4       	ldi	r25, 0x47	; 71
   1c58e:	1f 92       	push	r1
   1c590:	9f 93       	push	r25
   1c592:	8f 93       	push	r24
   1c594:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1c598:	0f 90       	pop	r0
   1c59a:	0f 90       	pop	r0
   1c59c:	0f 90       	pop	r0
   1c59e:	08 95       	ret

0001c5a0 <task>:
   1c5a0:	a4 ee       	ldi	r26, 0xE4	; 228
   1c5a2:	b0 e0       	ldi	r27, 0x00	; 0
   1c5a4:	e5 ed       	ldi	r30, 0xD5	; 213
   1c5a6:	f2 ee       	ldi	r31, 0xE2	; 226
   1c5a8:	2a c3       	rjmp	.+1620   	; 0x1cbfe <__prologue_saves__+0x18>
   1c5aa:	81 11       	cpse	r24, r1
   1c5ac:	0e 94 4d 91 	call	0x1229a	; 0x1229a <gpib_task>
   1c5b0:	80 e0       	ldi	r24, 0x00	; 0
   1c5b2:	0e 94 9c 2b 	call	0x5738	; 0x5738 <uart_rx_count>
   1c5b6:	89 2b       	or	r24, r25
   1c5b8:	09 f4       	brne	.+2      	; 0x1c5bc <task+0x1c>
   1c5ba:	b0 c0       	rjmp	.+352    	; 0x1c71c <task+0x17c>
   1c5bc:	83 e8       	ldi	r24, 0x83	; 131
   1c5be:	97 e4       	ldi	r25, 0x47	; 71
   1c5c0:	1f 92       	push	r1
   1c5c2:	9f 93       	push	r25
   1c5c4:	8f 93       	push	r24
   1c5c6:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1c5ca:	40 91 bf 1b 	lds	r20, 0x1BBF	; 0x801bbf <__iob>
   1c5ce:	50 91 c0 1b 	lds	r21, 0x1BC0	; 0x801bc0 <__iob+0x1>
   1c5d2:	6e e7       	ldi	r22, 0x7E	; 126
   1c5d4:	70 e0       	ldi	r23, 0x00	; 0
   1c5d6:	ce 01       	movw	r24, r28
   1c5d8:	01 96       	adiw	r24, 0x01	; 1
   1c5da:	0e 94 74 77 	call	0xeee8	; 0xeee8 <fgets>
   1c5de:	42 e3       	ldi	r20, 0x32	; 50
   1c5e0:	50 e0       	ldi	r21, 0x00	; 0
   1c5e2:	be 01       	movw	r22, r28
   1c5e4:	6f 57       	subi	r22, 0x7F	; 127
   1c5e6:	7f 4f       	sbci	r23, 0xFF	; 255
   1c5e8:	ce 01       	movw	r24, r28
   1c5ea:	01 96       	adiw	r24, 0x01	; 1
   1c5ec:	0e 94 a4 33 	call	0x6748	; 0x6748 <split_args>
   1c5f0:	8c 01       	movw	r16, r24
   1c5f2:	cf 57       	subi	r28, 0x7F	; 127
   1c5f4:	df 4f       	sbci	r29, 0xFF	; 255
   1c5f6:	e8 80       	ld	r14, Y
   1c5f8:	f9 80       	ldd	r15, Y+1	; 0x01
   1c5fa:	c1 58       	subi	r28, 0x81	; 129
   1c5fc:	d0 40       	sbci	r29, 0x00	; 0
   1c5fe:	0f 90       	pop	r0
   1c600:	0f 90       	pop	r0
   1c602:	0f 90       	pop	r0
   1c604:	e1 14       	cp	r14, r1
   1c606:	f1 04       	cpc	r15, r1
   1c608:	09 f4       	brne	.+2      	; 0x1c60c <task+0x6c>
   1c60a:	88 c0       	rjmp	.+272    	; 0x1c71c <task+0x17c>
   1c60c:	9c 01       	movw	r18, r24
   1c60e:	41 e0       	ldi	r20, 0x01	; 1
   1c610:	50 e0       	ldi	r21, 0x00	; 0
   1c612:	6c ee       	ldi	r22, 0xEC	; 236
   1c614:	76 e1       	ldi	r23, 0x16	; 22
   1c616:	c7 01       	movw	r24, r14
   1c618:	0e 94 47 33 	call	0x668e	; 0x668e <MATCHARGS>
   1c61c:	89 2b       	or	r24, r25
   1c61e:	11 f0       	breq	.+4      	; 0x1c624 <task+0x84>
   1c620:	40 df       	rcall	.-384    	; 0x1c4a2 <delay_tests>
   1c622:	7c c0       	rjmp	.+248    	; 0x1c71c <task+0x17c>
   1c624:	98 01       	movw	r18, r16
   1c626:	41 e0       	ldi	r20, 0x01	; 1
   1c628:	50 e0       	ldi	r21, 0x00	; 0
   1c62a:	68 ef       	ldi	r22, 0xF8	; 248
   1c62c:	76 e1       	ldi	r23, 0x16	; 22
   1c62e:	c7 01       	movw	r24, r14
   1c630:	0e 94 47 33 	call	0x668e	; 0x668e <MATCHARGS>
   1c634:	89 2b       	or	r24, r25
   1c636:	e1 f4       	brne	.+56     	; 0x1c670 <task+0xd0>
   1c638:	98 01       	movw	r18, r16
   1c63a:	41 e0       	ldi	r20, 0x01	; 1
   1c63c:	50 e0       	ldi	r21, 0x00	; 0
   1c63e:	6b e4       	ldi	r22, 0x4B	; 75
   1c640:	7d e0       	ldi	r23, 0x0D	; 13
   1c642:	c7 01       	movw	r24, r14
   1c644:	0e 94 47 33 	call	0x668e	; 0x668e <MATCHARGS>
   1c648:	89 2b       	or	r24, r25
   1c64a:	31 f0       	breq	.+12     	; 0x1c658 <task+0xb8>
   1c64c:	e0 91 ef 18 	lds	r30, 0x18EF	; 0x8018ef <RESET>
   1c650:	f0 91 f0 18 	lds	r31, 0x18F0	; 0x8018f0 <RESET+0x1>
   1c654:	09 95       	icall
   1c656:	62 c0       	rjmp	.+196    	; 0x1c71c <task+0x17c>
   1c658:	98 01       	movw	r18, r16
   1c65a:	41 e0       	ldi	r20, 0x01	; 1
   1c65c:	50 e0       	ldi	r21, 0x00	; 0
   1c65e:	6d ef       	ldi	r22, 0xFD	; 253
   1c660:	76 e1       	ldi	r23, 0x16	; 22
   1c662:	c7 01       	movw	r24, r14
   1c664:	0e 94 47 33 	call	0x668e	; 0x668e <MATCHARGS>
   1c668:	89 2b       	or	r24, r25
   1c66a:	29 f0       	breq	.+10     	; 0x1c676 <task+0xd6>
   1c66c:	0e 94 9a 3c 	call	0x7934	; 0x7934 <setdate>
   1c670:	0e 94 b3 3e 	call	0x7d66	; 0x7d66 <display_clock>
   1c674:	53 c0       	rjmp	.+166    	; 0x1c71c <task+0x17c>
   1c676:	98 01       	movw	r18, r16
   1c678:	41 e0       	ldi	r20, 0x01	; 1
   1c67a:	50 e0       	ldi	r21, 0x00	; 0
   1c67c:	65 e0       	ldi	r22, 0x05	; 5
   1c67e:	77 e1       	ldi	r23, 0x17	; 23
   1c680:	c7 01       	movw	r24, r14
   1c682:	0e 94 47 33 	call	0x668e	; 0x668e <MATCHARGS>
   1c686:	89 2b       	or	r24, r25
   1c688:	19 f0       	breq	.+6      	; 0x1c690 <task+0xf0>
   1c68a:	0e 94 06 29 	call	0x520c	; 0x520c <PrintFree>
   1c68e:	46 c0       	rjmp	.+140    	; 0x1c71c <task+0x17c>
   1c690:	98 01       	movw	r18, r16
   1c692:	41 e0       	ldi	r20, 0x01	; 1
   1c694:	50 e0       	ldi	r21, 0x00	; 0
   1c696:	67 ef       	ldi	r22, 0xF7	; 247
   1c698:	75 e1       	ldi	r23, 0x15	; 21
   1c69a:	c7 01       	movw	r24, r14
   1c69c:	0e 94 47 33 	call	0x668e	; 0x668e <MATCHARGS>
   1c6a0:	89 2b       	or	r24, r25
   1c6a2:	11 f0       	breq	.+4      	; 0x1c6a8 <task+0x108>
   1c6a4:	61 df       	rcall	.-318    	; 0x1c568 <help>
   1c6a6:	3a c0       	rjmp	.+116    	; 0x1c71c <task+0x17c>
   1c6a8:	98 01       	movw	r18, r16
   1c6aa:	41 e0       	ldi	r20, 0x01	; 1
   1c6ac:	50 e0       	ldi	r21, 0x00	; 0
   1c6ae:	6d ef       	ldi	r22, 0xFD	; 253
   1c6b0:	75 e1       	ldi	r23, 0x15	; 21
   1c6b2:	c7 01       	movw	r24, r14
   1c6b4:	0e 94 47 33 	call	0x668e	; 0x668e <MATCHARGS>
   1c6b8:	89 2b       	or	r24, r25
   1c6ba:	a1 f7       	brne	.-24     	; 0x1c6a4 <task+0x104>
   1c6bc:	be 01       	movw	r22, r28
   1c6be:	6f 57       	subi	r22, 0x7F	; 127
   1c6c0:	7f 4f       	sbci	r23, 0xFF	; 255
   1c6c2:	c8 01       	movw	r24, r16
   1c6c4:	0e 94 cb 91 	call	0x12396	; 0x12396 <gpib_tests>
   1c6c8:	89 2b       	or	r24, r25
   1c6ca:	19 f0       	breq	.+6      	; 0x1c6d2 <task+0x132>
   1c6cc:	0e 94 19 8d 	call	0x11a32	; 0x11a32 <gpib_init_devices>
   1c6d0:	25 c0       	rjmp	.+74     	; 0x1c71c <task+0x17c>
   1c6d2:	be 01       	movw	r22, r28
   1c6d4:	6f 57       	subi	r22, 0x7F	; 127
   1c6d6:	7f 4f       	sbci	r23, 0xFF	; 255
   1c6d8:	c8 01       	movw	r24, r16
   1c6da:	0e 94 da 82 	call	0x105b4	; 0x105b4 <posix_tests>
   1c6de:	89 2b       	or	r24, r25
   1c6e0:	e9 f4       	brne	.+58     	; 0x1c71c <task+0x17c>
   1c6e2:	be 01       	movw	r22, r28
   1c6e4:	6f 57       	subi	r22, 0x7F	; 127
   1c6e6:	7f 4f       	sbci	r23, 0xFF	; 255
   1c6e8:	c8 01       	movw	r24, r16
   1c6ea:	0e 94 64 75 	call	0xeac8	; 0xeac8 <fatfs_tests>
   1c6ee:	89 2b       	or	r24, r25
   1c6f0:	a9 f4       	brne	.+42     	; 0x1c71c <task+0x17c>
   1c6f2:	be 01       	movw	r22, r28
   1c6f4:	6f 57       	subi	r22, 0x7F	; 127
   1c6f6:	7f 4f       	sbci	r23, 0xFF	; 255
   1c6f8:	c8 01       	movw	r24, r16
   1c6fa:	18 dd       	rcall	.-1488   	; 0x1c12c <lif_tests>
   1c6fc:	89 2b       	or	r24, r25
   1c6fe:	71 f4       	brne	.+28     	; 0x1c71c <task+0x17c>
   1c700:	ff 92       	push	r15
   1c702:	ef 92       	push	r14
   1c704:	87 e7       	ldi	r24, 0x77	; 119
   1c706:	97 e4       	ldi	r25, 0x47	; 71
   1c708:	1f 92       	push	r1
   1c70a:	9f 93       	push	r25
   1c70c:	8f 93       	push	r24
   1c70e:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1c712:	0f 90       	pop	r0
   1c714:	0f 90       	pop	r0
   1c716:	0f 90       	pop	r0
   1c718:	0f 90       	pop	r0
   1c71a:	0f 90       	pop	r0
   1c71c:	cc 51       	subi	r28, 0x1C	; 28
   1c71e:	df 4f       	sbci	r29, 0xFF	; 255
   1c720:	e6 e0       	ldi	r30, 0x06	; 6
   1c722:	89 c2       	rjmp	.+1298   	; 0x1cc36 <__epilogue_restores__+0x18>

0001c724 <main>:
   1c724:	a8 e0       	ldi	r26, 0x08	; 8
   1c726:	b0 e0       	ldi	r27, 0x00	; 0
   1c728:	e7 e9       	ldi	r30, 0x97	; 151
   1c72a:	f3 ee       	ldi	r31, 0xE3	; 227
   1c72c:	67 c2       	rjmp	.+1230   	; 0x1cbfc <__prologue_saves__+0x16>
   1c72e:	0e 94 44 86 	call	0x10c88	; 0x10c88 <gpib_bus_init>
   1c732:	40 e0       	ldi	r20, 0x00	; 0
   1c734:	52 ec       	ldi	r21, 0xC2	; 194
   1c736:	61 e0       	ldi	r22, 0x01	; 1
   1c738:	70 e0       	ldi	r23, 0x00	; 0
   1c73a:	80 e0       	ldi	r24, 0x00	; 0
   1c73c:	0e 94 0b 2b 	call	0x5616	; 0x5616 <uart_init>
   1c740:	06 2f       	mov	r16, r22
   1c742:	f7 2e       	mov	r15, r23
   1c744:	e8 2e       	mov	r14, r24
   1c746:	d9 2e       	mov	r13, r25
   1c748:	68 ec       	ldi	r22, 0xC8	; 200
   1c74a:	70 e0       	ldi	r23, 0x00	; 0
   1c74c:	80 e0       	ldi	r24, 0x00	; 0
   1c74e:	90 e0       	ldi	r25, 0x00	; 0
   1c750:	0e 94 29 2a 	call	0x5452	; 0x5452 <delayms>
   1c754:	0e 94 33 32 	call	0x6466	; 0x6466 <sep>
   1c758:	80 e7       	ldi	r24, 0x70	; 112
   1c75a:	97 e4       	ldi	r25, 0x47	; 71
   1c75c:	1f 92       	push	r1
   1c75e:	9f 93       	push	r25
   1c760:	8f 93       	push	r24
   1c762:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1c766:	11 e0       	ldi	r17, 0x01	; 1
   1c768:	1f 93       	push	r17
   1c76a:	81 e3       	ldi	r24, 0x31	; 49
   1c76c:	8f 93       	push	r24
   1c76e:	8d e2       	ldi	r24, 0x2D	; 45
   1c770:	8f 93       	push	r24
   1c772:	1f 92       	push	r1
   1c774:	8f e5       	ldi	r24, 0x5F	; 95
   1c776:	97 e4       	ldi	r25, 0x47	; 71
   1c778:	1f 92       	push	r1
   1c77a:	9f 93       	push	r25
   1c77c:	8f 93       	push	r24
   1c77e:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1c782:	df 92       	push	r13
   1c784:	ef 92       	push	r14
   1c786:	ff 92       	push	r15
   1c788:	0f 93       	push	r16
   1c78a:	1f 92       	push	r1
   1c78c:	1f 93       	push	r17
   1c78e:	82 ec       	ldi	r24, 0xC2	; 194
   1c790:	8f 93       	push	r24
   1c792:	1f 92       	push	r1
   1c794:	88 e3       	ldi	r24, 0x38	; 56
   1c796:	97 e4       	ldi	r25, 0x47	; 71
   1c798:	1f 92       	push	r1
   1c79a:	9f 93       	push	r25
   1c79c:	8f 93       	push	r24
   1c79e:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1c7a2:	0e 94 16 37 	call	0x6e2c	; 0x6e2c <init_timers>
   1c7a6:	0e 94 33 32 	call	0x6466	; 0x6466 <sep>
   1c7aa:	89 e1       	ldi	r24, 0x19	; 25
   1c7ac:	97 e4       	ldi	r25, 0x47	; 71
   1c7ae:	1f 92       	push	r1
   1c7b0:	9f 93       	push	r25
   1c7b2:	8f 93       	push	r24
   1c7b4:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1c7b8:	8c ef       	ldi	r24, 0xFC	; 252
   1c7ba:	96 e4       	ldi	r25, 0x46	; 70
   1c7bc:	1f 92       	push	r1
   1c7be:	9f 93       	push	r25
   1c7c0:	8f 93       	push	r24
   1c7c2:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1c7c6:	8c ee       	ldi	r24, 0xEC	; 236
   1c7c8:	96 e4       	ldi	r25, 0x46	; 70
   1c7ca:	1f 92       	push	r1
   1c7cc:	9f 93       	push	r25
   1c7ce:	8f 93       	push	r24
   1c7d0:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1c7d4:	85 ec       	ldi	r24, 0xC5	; 197
   1c7d6:	96 e4       	ldi	r25, 0x46	; 70
   1c7d8:	1f 92       	push	r1
   1c7da:	9f 93       	push	r25
   1c7dc:	8f 93       	push	r24
   1c7de:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1c7e2:	0f b6       	in	r0, 0x3f	; 63
   1c7e4:	f8 94       	cli
   1c7e6:	de bf       	out	0x3e, r29	; 62
   1c7e8:	0f be       	out	0x3f, r0	; 63
   1c7ea:	cd bf       	out	0x3d, r28	; 61
   1c7ec:	89 e3       	ldi	r24, 0x39	; 57
   1c7ee:	96 e1       	ldi	r25, 0x16	; 22
   1c7f0:	9f 93       	push	r25
   1c7f2:	8f 93       	push	r24
   1c7f4:	8b ea       	ldi	r24, 0xAB	; 171
   1c7f6:	96 e4       	ldi	r25, 0x46	; 70
   1c7f8:	1f 92       	push	r1
   1c7fa:	9f 93       	push	r25
   1c7fc:	8f 93       	push	r24
   1c7fe:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1c802:	8d e5       	ldi	r24, 0x5D	; 93
   1c804:	96 e1       	ldi	r25, 0x16	; 22
   1c806:	9f 93       	push	r25
   1c808:	8f 93       	push	r24
   1c80a:	81 e9       	ldi	r24, 0x91	; 145
   1c80c:	96 e4       	ldi	r25, 0x46	; 70
   1c80e:	1f 92       	push	r1
   1c810:	9f 93       	push	r25
   1c812:	8f 93       	push	r24
   1c814:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1c818:	0e 94 33 32 	call	0x6466	; 0x6466 <sep>
   1c81c:	0e 94 06 29 	call	0x520c	; 0x520c <PrintFree>
   1c820:	0e 94 33 32 	call	0x6466	; 0x6466 <sep>
   1c824:	68 ec       	ldi	r22, 0xC8	; 200
   1c826:	70 e0       	ldi	r23, 0x00	; 0
   1c828:	80 e0       	ldi	r24, 0x00	; 0
   1c82a:	90 e0       	ldi	r25, 0x00	; 0
   1c82c:	0e 94 29 2a 	call	0x5452	; 0x5452 <delayms>
   1c830:	8b e7       	ldi	r24, 0x7B	; 123
   1c832:	96 e4       	ldi	r25, 0x46	; 70
   1c834:	1f 92       	push	r1
   1c836:	9f 93       	push	r25
   1c838:	8f 93       	push	r24
   1c83a:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1c83e:	4b e0       	ldi	r20, 0x0B	; 11
   1c840:	50 e0       	ldi	r21, 0x00	; 0
   1c842:	60 e2       	ldi	r22, 0x20	; 32
   1c844:	71 ea       	ldi	r23, 0xA1	; 161
   1c846:	87 e0       	ldi	r24, 0x07	; 7
   1c848:	90 e0       	ldi	r25, 0x00	; 0
   1c84a:	0e 94 82 28 	call	0x5104	; 0x5104 <spi_init>
   1c84e:	85 e6       	ldi	r24, 0x65	; 101
   1c850:	96 e4       	ldi	r25, 0x46	; 70
   1c852:	1f 92       	push	r1
   1c854:	9f 93       	push	r25
   1c856:	8f 93       	push	r24
   1c858:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1c85c:	61 e1       	ldi	r22, 0x11	; 17
   1c85e:	81 e0       	ldi	r24, 0x01	; 1
   1c860:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <TWI_Init>
   1c864:	0e 94 33 32 	call	0x6466	; 0x6466 <sep>
   1c868:	83 e5       	ldi	r24, 0x53	; 83
   1c86a:	96 e4       	ldi	r25, 0x46	; 70
   1c86c:	1f 92       	push	r1
   1c86e:	9f 93       	push	r25
   1c870:	8f 93       	push	r24
   1c872:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1c876:	0e 94 d3 36 	call	0x6da6	; 0x6da6 <clock_clear>
   1c87a:	84 e4       	ldi	r24, 0x44	; 68
   1c87c:	96 e4       	ldi	r25, 0x46	; 70
   1c87e:	1f 92       	push	r1
   1c880:	9f 93       	push	r25
   1c882:	8f 93       	push	r24
   1c884:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1c888:	be 01       	movw	r22, r28
   1c88a:	6f 5f       	subi	r22, 0xFF	; 255
   1c88c:	7f 4f       	sbci	r23, 0xFF	; 255
   1c88e:	80 e0       	ldi	r24, 0x00	; 0
   1c890:	90 e0       	ldi	r25, 0x00	; 0
   1c892:	0e 94 6e 37 	call	0x6edc	; 0x6edc <clock_getres>
   1c896:	88 85       	ldd	r24, Y+8	; 0x08
   1c898:	8f 93       	push	r24
   1c89a:	8f 81       	ldd	r24, Y+7	; 0x07
   1c89c:	8f 93       	push	r24
   1c89e:	8e 81       	ldd	r24, Y+6	; 0x06
   1c8a0:	8f 93       	push	r24
   1c8a2:	8d 81       	ldd	r24, Y+5	; 0x05
   1c8a4:	8f 93       	push	r24
   1c8a6:	87 e2       	ldi	r24, 0x27	; 39
   1c8a8:	96 e4       	ldi	r25, 0x46	; 70
   1c8aa:	1f 92       	push	r1
   1c8ac:	9f 93       	push	r25
   1c8ae:	8f 93       	push	r24
   1c8b0:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1c8b4:	8c e2       	ldi	r24, 0x2C	; 44
   1c8b6:	91 e0       	ldi	r25, 0x01	; 1
   1c8b8:	0e 94 3c 3e 	call	0x7c78	; 0x7c78 <initialize_clock>
   1c8bc:	0e 94 b3 3e 	call	0x7d66	; 0x7d66 <display_clock>
   1c8c0:	0e 94 33 32 	call	0x6466	; 0x6466 <sep>
   1c8c4:	89 e0       	ldi	r24, 0x09	; 9
   1c8c6:	96 e4       	ldi	r25, 0x46	; 70
   1c8c8:	1f 92       	push	r1
   1c8ca:	9f 93       	push	r25
   1c8cc:	8f 93       	push	r24
   1c8ce:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1c8d2:	0f b6       	in	r0, 0x3f	; 63
   1c8d4:	f8 94       	cli
   1c8d6:	de bf       	out	0x3e, r29	; 62
   1c8d8:	0f be       	out	0x3f, r0	; 63
   1c8da:	cd bf       	out	0x3d, r28	; 61
   1c8dc:	84 ee       	ldi	r24, 0xE4	; 228
   1c8de:	0e 94 5c 31 	call	0x62b8	; 0x62b8 <LCD_init>
   1c8e2:	89 2b       	or	r24, r25
   1c8e4:	e9 f0       	breq	.+58     	; 0x1c920 <main+0x1fc>
   1c8e6:	60 e0       	ldi	r22, 0x00	; 0
   1c8e8:	80 e0       	ldi	r24, 0x00	; 0
   1c8ea:	0e 94 26 31 	call	0x624c	; 0x624c <LCD_pos>
   1c8ee:	89 e0       	ldi	r24, 0x09	; 9
   1c8f0:	97 e1       	ldi	r25, 0x17	; 23
   1c8f2:	9f 93       	push	r25
   1c8f4:	8f 93       	push	r24
   1c8f6:	0e 94 15 32 	call	0x642a	; 0x642a <lcd_printf>
   1c8fa:	88 e1       	ldi	r24, 0x18	; 24
   1c8fc:	97 e1       	ldi	r25, 0x17	; 23
   1c8fe:	9f 93       	push	r25
   1c900:	8f 93       	push	r24
   1c902:	0e 94 15 32 	call	0x642a	; 0x642a <lcd_printf>
   1c906:	8c ee       	ldi	r24, 0xEC	; 236
   1c908:	95 e4       	ldi	r25, 0x45	; 69
   1c90a:	1f 92       	push	r1
   1c90c:	9f 93       	push	r25
   1c90e:	8f 93       	push	r24
   1c910:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1c914:	0f b6       	in	r0, 0x3f	; 63
   1c916:	f8 94       	cli
   1c918:	de bf       	out	0x3e, r29	; 62
   1c91a:	0f be       	out	0x3f, r0	; 63
   1c91c:	cd bf       	out	0x3d, r28	; 61
   1c91e:	0a c0       	rjmp	.+20     	; 0x1c934 <main+0x210>
   1c920:	82 ed       	ldi	r24, 0xD2	; 210
   1c922:	95 e4       	ldi	r25, 0x45	; 69
   1c924:	1f 92       	push	r1
   1c926:	9f 93       	push	r25
   1c928:	8f 93       	push	r24
   1c92a:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1c92e:	0f 90       	pop	r0
   1c930:	0f 90       	pop	r0
   1c932:	0f 90       	pop	r0
   1c934:	0e 94 33 32 	call	0x6466	; 0x6466 <sep>
   1c938:	8a eb       	ldi	r24, 0xBA	; 186
   1c93a:	95 e4       	ldi	r25, 0x45	; 69
   1c93c:	1f 92       	push	r1
   1c93e:	9f 93       	push	r25
   1c940:	8f 93       	push	r24
   1c942:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1c946:	81 e0       	ldi	r24, 0x01	; 1
   1c948:	90 e0       	ldi	r25, 0x00	; 0
   1c94a:	0e 94 a4 70 	call	0xe148	; 0xe148 <mmc_init>
   1c94e:	89 ea       	ldi	r24, 0xA9	; 169
   1c950:	95 e4       	ldi	r25, 0x45	; 69
   1c952:	1f 92       	push	r1
   1c954:	9f 93       	push	r25
   1c956:	8f 93       	push	r24
   1c958:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1c95c:	0e 94 33 32 	call	0x6466	; 0x6466 <sep>
   1c960:	0e 94 44 86 	call	0x10c88	; 0x10c88 <gpib_bus_init>
   1c964:	83 e9       	ldi	r24, 0x93	; 147
   1c966:	95 e4       	ldi	r25, 0x45	; 69
   1c968:	1f 92       	push	r1
   1c96a:	9f 93       	push	r25
   1c96c:	8f 93       	push	r24
   1c96e:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1c972:	0e 94 5c c0 	call	0x180b8	; 0x180b8 <printer_init>
   1c976:	8e e7       	ldi	r24, 0x7E	; 126
   1c978:	95 e4       	ldi	r25, 0x45	; 69
   1c97a:	1f 92       	push	r1
   1c97c:	9f 93       	push	r25
   1c97e:	8f 93       	push	r24
   1c980:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1c984:	0e 94 33 32 	call	0x6466	; 0x6466 <sep>
   1c988:	8c e6       	ldi	r24, 0x6C	; 108
   1c98a:	95 e4       	ldi	r25, 0x45	; 69
   1c98c:	1f 92       	push	r1
   1c98e:	9f 93       	push	r25
   1c990:	8f 93       	push	r24
   1c992:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1c996:	0e 94 54 84 	call	0x108a8	; 0x108a8 <gpib_timer_init>
   1c99a:	84 e5       	ldi	r24, 0x54	; 84
   1c99c:	95 e4       	ldi	r25, 0x45	; 69
   1c99e:	1f 92       	push	r1
   1c9a0:	9f 93       	push	r25
   1c9a2:	8f 93       	push	r24
   1c9a4:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1c9a8:	0e 94 5d 8c 	call	0x118ba	; 0x118ba <gpib_file_init>
   1c9ac:	8f e3       	ldi	r24, 0x3F	; 63
   1c9ae:	95 e4       	ldi	r25, 0x45	; 69
   1c9b0:	1f 92       	push	r1
   1c9b2:	9f 93       	push	r25
   1c9b4:	8f 93       	push	r24
   1c9b6:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1c9ba:	0e 94 6c 86 	call	0x10cd8	; 0x10cd8 <gpib_state_init>
   1c9be:	89 e2       	ldi	r24, 0x29	; 41
   1c9c0:	95 e4       	ldi	r25, 0x45	; 69
   1c9c2:	1f 92       	push	r1
   1c9c4:	9f 93       	push	r25
   1c9c6:	8f 93       	push	r24
   1c9c8:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1c9cc:	0e 94 33 32 	call	0x6466	; 0x6466 <sep>
   1c9d0:	0e 94 f7 a1 	call	0x143ee	; 0x143ee <display_Config>
   1c9d4:	0e 94 dc a4 	call	0x149b8	; 0x149b8 <format_drives>
   1c9d8:	0e 94 33 32 	call	0x6466	; 0x6466 <sep>
   1c9dc:	0e 94 fc a0 	call	0x141f8	; 0x141f8 <display_Addresses>
   1c9e0:	0e 94 33 32 	call	0x6466	; 0x6466 <sep>
   1c9e4:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <debuglevel+0x1>
   1c9e8:	8f 93       	push	r24
   1c9ea:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1c9ee:	8f 93       	push	r24
   1c9f0:	83 e1       	ldi	r24, 0x13	; 19
   1c9f2:	95 e4       	ldi	r25, 0x45	; 69
   1c9f4:	1f 92       	push	r1
   1c9f6:	9f 93       	push	r25
   1c9f8:	8f 93       	push	r24
   1c9fa:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1c9fe:	60 e0       	ldi	r22, 0x00	; 0
   1ca00:	80 e0       	ldi	r24, 0x00	; 0
   1ca02:	0e 94 26 31 	call	0x624c	; 0x624c <LCD_pos>
   1ca06:	83 e0       	ldi	r24, 0x03	; 3
   1ca08:	0e 94 05 93 	call	0x1260a	; 0x1260a <count_drive_types>
   1ca0c:	9f 93       	push	r25
   1ca0e:	8f 93       	push	r24
   1ca10:	86 e2       	ldi	r24, 0x26	; 38
   1ca12:	97 e1       	ldi	r25, 0x17	; 23
   1ca14:	9f 93       	push	r25
   1ca16:	8f 93       	push	r24
   1ca18:	0e 94 15 32 	call	0x642a	; 0x642a <lcd_printf>
   1ca1c:	0f b6       	in	r0, 0x3f	; 63
   1ca1e:	f8 94       	cli
   1ca20:	de bf       	out	0x3e, r29	; 62
   1ca22:	0f be       	out	0x3f, r0	; 63
   1ca24:	cd bf       	out	0x3d, r28	; 61
   1ca26:	81 e0       	ldi	r24, 0x01	; 1
   1ca28:	0e 94 05 93 	call	0x1260a	; 0x1260a <count_drive_types>
   1ca2c:	9f 93       	push	r25
   1ca2e:	8f 93       	push	r24
   1ca30:	87 e3       	ldi	r24, 0x37	; 55
   1ca32:	97 e1       	ldi	r25, 0x17	; 23
   1ca34:	9f 93       	push	r25
   1ca36:	8f 93       	push	r24
   1ca38:	0e 94 15 32 	call	0x642a	; 0x642a <lcd_printf>
   1ca3c:	0e 94 33 32 	call	0x6466	; 0x6466 <sep>
   1ca40:	8f ef       	ldi	r24, 0xFF	; 255
   1ca42:	94 e4       	ldi	r25, 0x44	; 68
   1ca44:	1f 92       	push	r1
   1ca46:	9f 93       	push	r25
   1ca48:	8f 93       	push	r24
   1ca4a:	0e 94 5e 47 	call	0x8ebc	; 0x8ebc <printf_P>
   1ca4e:	0f b6       	in	r0, 0x3f	; 63
   1ca50:	f8 94       	cli
   1ca52:	de bf       	out	0x3e, r29	; 62
   1ca54:	0f be       	out	0x3f, r0	; 63
   1ca56:	cd bf       	out	0x3d, r28	; 61
   1ca58:	81 e0       	ldi	r24, 0x01	; 1
   1ca5a:	a2 dd       	rcall	.-1212   	; 0x1c5a0 <task>
   1ca5c:	fd cf       	rjmp	.-6      	; 0x1ca58 <main+0x334>

0001ca5e <__mulsi3>:
   1ca5e:	db 01       	movw	r26, r22
   1ca60:	8f 93       	push	r24
   1ca62:	9f 93       	push	r25
   1ca64:	a0 d0       	rcall	.+320    	; 0x1cba6 <__muluhisi3>
   1ca66:	bf 91       	pop	r27
   1ca68:	af 91       	pop	r26
   1ca6a:	a2 9f       	mul	r26, r18
   1ca6c:	80 0d       	add	r24, r0
   1ca6e:	91 1d       	adc	r25, r1
   1ca70:	a3 9f       	mul	r26, r19
   1ca72:	90 0d       	add	r25, r0
   1ca74:	b2 9f       	mul	r27, r18
   1ca76:	90 0d       	add	r25, r0
   1ca78:	11 24       	eor	r1, r1
   1ca7a:	08 95       	ret

0001ca7c <__udivmodqi4>:
   1ca7c:	99 1b       	sub	r25, r25
   1ca7e:	79 e0       	ldi	r23, 0x09	; 9
   1ca80:	04 c0       	rjmp	.+8      	; 0x1ca8a <__udivmodqi4_ep>

0001ca82 <__udivmodqi4_loop>:
   1ca82:	99 1f       	adc	r25, r25
   1ca84:	96 17       	cp	r25, r22
   1ca86:	08 f0       	brcs	.+2      	; 0x1ca8a <__udivmodqi4_ep>
   1ca88:	96 1b       	sub	r25, r22

0001ca8a <__udivmodqi4_ep>:
   1ca8a:	88 1f       	adc	r24, r24
   1ca8c:	7a 95       	dec	r23
   1ca8e:	c9 f7       	brne	.-14     	; 0x1ca82 <__udivmodqi4_loop>
   1ca90:	80 95       	com	r24
   1ca92:	08 95       	ret

0001ca94 <__udivmodhi4>:
   1ca94:	aa 1b       	sub	r26, r26
   1ca96:	bb 1b       	sub	r27, r27
   1ca98:	51 e1       	ldi	r21, 0x11	; 17
   1ca9a:	07 c0       	rjmp	.+14     	; 0x1caaa <__udivmodhi4_ep>

0001ca9c <__udivmodhi4_loop>:
   1ca9c:	aa 1f       	adc	r26, r26
   1ca9e:	bb 1f       	adc	r27, r27
   1caa0:	a6 17       	cp	r26, r22
   1caa2:	b7 07       	cpc	r27, r23
   1caa4:	10 f0       	brcs	.+4      	; 0x1caaa <__udivmodhi4_ep>
   1caa6:	a6 1b       	sub	r26, r22
   1caa8:	b7 0b       	sbc	r27, r23

0001caaa <__udivmodhi4_ep>:
   1caaa:	88 1f       	adc	r24, r24
   1caac:	99 1f       	adc	r25, r25
   1caae:	5a 95       	dec	r21
   1cab0:	a9 f7       	brne	.-22     	; 0x1ca9c <__udivmodhi4_loop>
   1cab2:	80 95       	com	r24
   1cab4:	90 95       	com	r25
   1cab6:	bc 01       	movw	r22, r24
   1cab8:	cd 01       	movw	r24, r26
   1caba:	08 95       	ret

0001cabc <__divmodhi4>:
   1cabc:	97 fb       	bst	r25, 7
   1cabe:	07 2e       	mov	r0, r23
   1cac0:	16 f4       	brtc	.+4      	; 0x1cac6 <__divmodhi4+0xa>
   1cac2:	00 94       	com	r0
   1cac4:	06 d0       	rcall	.+12     	; 0x1cad2 <__divmodhi4_neg1>
   1cac6:	77 fd       	sbrc	r23, 7
   1cac8:	08 d0       	rcall	.+16     	; 0x1cada <__divmodhi4_neg2>
   1caca:	e4 df       	rcall	.-56     	; 0x1ca94 <__udivmodhi4>
   1cacc:	07 fc       	sbrc	r0, 7
   1cace:	05 d0       	rcall	.+10     	; 0x1cada <__divmodhi4_neg2>
   1cad0:	3e f4       	brtc	.+14     	; 0x1cae0 <__divmodhi4_exit>

0001cad2 <__divmodhi4_neg1>:
   1cad2:	90 95       	com	r25
   1cad4:	81 95       	neg	r24
   1cad6:	9f 4f       	sbci	r25, 0xFF	; 255
   1cad8:	08 95       	ret

0001cada <__divmodhi4_neg2>:
   1cada:	70 95       	com	r23
   1cadc:	61 95       	neg	r22
   1cade:	7f 4f       	sbci	r23, 0xFF	; 255

0001cae0 <__divmodhi4_exit>:
   1cae0:	08 95       	ret

0001cae2 <__udivmodsi4>:
   1cae2:	a1 e2       	ldi	r26, 0x21	; 33
   1cae4:	1a 2e       	mov	r1, r26
   1cae6:	aa 1b       	sub	r26, r26
   1cae8:	bb 1b       	sub	r27, r27
   1caea:	fd 01       	movw	r30, r26
   1caec:	0d c0       	rjmp	.+26     	; 0x1cb08 <__udivmodsi4_ep>

0001caee <__udivmodsi4_loop>:
   1caee:	aa 1f       	adc	r26, r26
   1caf0:	bb 1f       	adc	r27, r27
   1caf2:	ee 1f       	adc	r30, r30
   1caf4:	ff 1f       	adc	r31, r31
   1caf6:	a2 17       	cp	r26, r18
   1caf8:	b3 07       	cpc	r27, r19
   1cafa:	e4 07       	cpc	r30, r20
   1cafc:	f5 07       	cpc	r31, r21
   1cafe:	20 f0       	brcs	.+8      	; 0x1cb08 <__udivmodsi4_ep>
   1cb00:	a2 1b       	sub	r26, r18
   1cb02:	b3 0b       	sbc	r27, r19
   1cb04:	e4 0b       	sbc	r30, r20
   1cb06:	f5 0b       	sbc	r31, r21

0001cb08 <__udivmodsi4_ep>:
   1cb08:	66 1f       	adc	r22, r22
   1cb0a:	77 1f       	adc	r23, r23
   1cb0c:	88 1f       	adc	r24, r24
   1cb0e:	99 1f       	adc	r25, r25
   1cb10:	1a 94       	dec	r1
   1cb12:	69 f7       	brne	.-38     	; 0x1caee <__udivmodsi4_loop>
   1cb14:	60 95       	com	r22
   1cb16:	70 95       	com	r23
   1cb18:	80 95       	com	r24
   1cb1a:	90 95       	com	r25
   1cb1c:	9b 01       	movw	r18, r22
   1cb1e:	ac 01       	movw	r20, r24
   1cb20:	bd 01       	movw	r22, r26
   1cb22:	cf 01       	movw	r24, r30
   1cb24:	08 95       	ret

0001cb26 <__divmodsi4>:
   1cb26:	05 2e       	mov	r0, r21
   1cb28:	97 fb       	bst	r25, 7
   1cb2a:	16 f4       	brtc	.+4      	; 0x1cb30 <__divmodsi4+0xa>
   1cb2c:	00 94       	com	r0
   1cb2e:	0f d0       	rcall	.+30     	; 0x1cb4e <__negsi2>
   1cb30:	57 fd       	sbrc	r21, 7
   1cb32:	05 d0       	rcall	.+10     	; 0x1cb3e <__divmodsi4_neg2>
   1cb34:	d6 df       	rcall	.-84     	; 0x1cae2 <__udivmodsi4>
   1cb36:	07 fc       	sbrc	r0, 7
   1cb38:	02 d0       	rcall	.+4      	; 0x1cb3e <__divmodsi4_neg2>
   1cb3a:	46 f4       	brtc	.+16     	; 0x1cb4c <__divmodsi4_exit>
   1cb3c:	08 c0       	rjmp	.+16     	; 0x1cb4e <__negsi2>

0001cb3e <__divmodsi4_neg2>:
   1cb3e:	50 95       	com	r21
   1cb40:	40 95       	com	r20
   1cb42:	30 95       	com	r19
   1cb44:	21 95       	neg	r18
   1cb46:	3f 4f       	sbci	r19, 0xFF	; 255
   1cb48:	4f 4f       	sbci	r20, 0xFF	; 255
   1cb4a:	5f 4f       	sbci	r21, 0xFF	; 255

0001cb4c <__divmodsi4_exit>:
   1cb4c:	08 95       	ret

0001cb4e <__negsi2>:
   1cb4e:	90 95       	com	r25
   1cb50:	80 95       	com	r24
   1cb52:	70 95       	com	r23
   1cb54:	61 95       	neg	r22
   1cb56:	7f 4f       	sbci	r23, 0xFF	; 255
   1cb58:	8f 4f       	sbci	r24, 0xFF	; 255
   1cb5a:	9f 4f       	sbci	r25, 0xFF	; 255
   1cb5c:	08 95       	ret

0001cb5e <__tablejump2__>:
   1cb5e:	ee 0f       	add	r30, r30
   1cb60:	ff 1f       	adc	r31, r31
   1cb62:	00 24       	eor	r0, r0
   1cb64:	00 1c       	adc	r0, r0
   1cb66:	0b be       	out	0x3b, r0	; 59
   1cb68:	07 90       	elpm	r0, Z+
   1cb6a:	f6 91       	elpm	r31, Z
   1cb6c:	e0 2d       	mov	r30, r0
   1cb6e:	09 94       	ijmp

0001cb70 <__mulhisi3>:
   1cb70:	05 d0       	rcall	.+10     	; 0x1cb7c <__umulhisi3>
   1cb72:	33 23       	and	r19, r19
   1cb74:	12 f4       	brpl	.+4      	; 0x1cb7a <__mulhisi3+0xa>
   1cb76:	8a 1b       	sub	r24, r26
   1cb78:	9b 0b       	sbc	r25, r27
   1cb7a:	10 c0       	rjmp	.+32     	; 0x1cb9c <__usmulhisi3_tail>

0001cb7c <__umulhisi3>:
   1cb7c:	a2 9f       	mul	r26, r18
   1cb7e:	b0 01       	movw	r22, r0
   1cb80:	b3 9f       	mul	r27, r19
   1cb82:	c0 01       	movw	r24, r0
   1cb84:	a3 9f       	mul	r26, r19
   1cb86:	70 0d       	add	r23, r0
   1cb88:	81 1d       	adc	r24, r1
   1cb8a:	11 24       	eor	r1, r1
   1cb8c:	91 1d       	adc	r25, r1
   1cb8e:	b2 9f       	mul	r27, r18
   1cb90:	70 0d       	add	r23, r0
   1cb92:	81 1d       	adc	r24, r1
   1cb94:	11 24       	eor	r1, r1
   1cb96:	91 1d       	adc	r25, r1
   1cb98:	08 95       	ret

0001cb9a <__usmulhisi3>:
   1cb9a:	f0 df       	rcall	.-32     	; 0x1cb7c <__umulhisi3>

0001cb9c <__usmulhisi3_tail>:
   1cb9c:	b7 ff       	sbrs	r27, 7
   1cb9e:	08 95       	ret
   1cba0:	82 1b       	sub	r24, r18
   1cba2:	93 0b       	sbc	r25, r19
   1cba4:	08 95       	ret

0001cba6 <__muluhisi3>:
   1cba6:	ea df       	rcall	.-44     	; 0x1cb7c <__umulhisi3>
   1cba8:	a5 9f       	mul	r26, r21
   1cbaa:	90 0d       	add	r25, r0
   1cbac:	b4 9f       	mul	r27, r20
   1cbae:	90 0d       	add	r25, r0
   1cbb0:	a4 9f       	mul	r26, r20
   1cbb2:	80 0d       	add	r24, r0
   1cbb4:	91 1d       	adc	r25, r1
   1cbb6:	11 24       	eor	r1, r1
   1cbb8:	08 95       	ret

0001cbba <__mulshisi3>:
   1cbba:	b7 ff       	sbrs	r27, 7
   1cbbc:	f4 cf       	rjmp	.-24     	; 0x1cba6 <__muluhisi3>

0001cbbe <__mulohisi3>:
   1cbbe:	f3 df       	rcall	.-26     	; 0x1cba6 <__muluhisi3>
   1cbc0:	82 1b       	sub	r24, r18
   1cbc2:	93 0b       	sbc	r25, r19
   1cbc4:	08 95       	ret

0001cbc6 <__negdi2>:
   1cbc6:	60 95       	com	r22
   1cbc8:	70 95       	com	r23
   1cbca:	80 95       	com	r24
   1cbcc:	90 95       	com	r25
   1cbce:	30 95       	com	r19
   1cbd0:	40 95       	com	r20
   1cbd2:	50 95       	com	r21
   1cbd4:	21 95       	neg	r18
   1cbd6:	3f 4f       	sbci	r19, 0xFF	; 255
   1cbd8:	4f 4f       	sbci	r20, 0xFF	; 255
   1cbda:	5f 4f       	sbci	r21, 0xFF	; 255
   1cbdc:	6f 4f       	sbci	r22, 0xFF	; 255
   1cbde:	7f 4f       	sbci	r23, 0xFF	; 255
   1cbe0:	8f 4f       	sbci	r24, 0xFF	; 255
   1cbe2:	9f 4f       	sbci	r25, 0xFF	; 255
   1cbe4:	08 95       	ret

0001cbe6 <__prologue_saves__>:
   1cbe6:	2f 92       	push	r2
   1cbe8:	3f 92       	push	r3
   1cbea:	4f 92       	push	r4
   1cbec:	5f 92       	push	r5
   1cbee:	6f 92       	push	r6
   1cbf0:	7f 92       	push	r7
   1cbf2:	8f 92       	push	r8
   1cbf4:	9f 92       	push	r9
   1cbf6:	af 92       	push	r10
   1cbf8:	bf 92       	push	r11
   1cbfa:	cf 92       	push	r12
   1cbfc:	df 92       	push	r13
   1cbfe:	ef 92       	push	r14
   1cc00:	ff 92       	push	r15
   1cc02:	0f 93       	push	r16
   1cc04:	1f 93       	push	r17
   1cc06:	cf 93       	push	r28
   1cc08:	df 93       	push	r29
   1cc0a:	cd b7       	in	r28, 0x3d	; 61
   1cc0c:	de b7       	in	r29, 0x3e	; 62
   1cc0e:	ca 1b       	sub	r28, r26
   1cc10:	db 0b       	sbc	r29, r27
   1cc12:	0f b6       	in	r0, 0x3f	; 63
   1cc14:	f8 94       	cli
   1cc16:	de bf       	out	0x3e, r29	; 62
   1cc18:	0f be       	out	0x3f, r0	; 63
   1cc1a:	cd bf       	out	0x3d, r28	; 61
   1cc1c:	09 94       	ijmp

0001cc1e <__epilogue_restores__>:
   1cc1e:	2a 88       	ldd	r2, Y+18	; 0x12
   1cc20:	39 88       	ldd	r3, Y+17	; 0x11
   1cc22:	48 88       	ldd	r4, Y+16	; 0x10
   1cc24:	5f 84       	ldd	r5, Y+15	; 0x0f
   1cc26:	6e 84       	ldd	r6, Y+14	; 0x0e
   1cc28:	7d 84       	ldd	r7, Y+13	; 0x0d
   1cc2a:	8c 84       	ldd	r8, Y+12	; 0x0c
   1cc2c:	9b 84       	ldd	r9, Y+11	; 0x0b
   1cc2e:	aa 84       	ldd	r10, Y+10	; 0x0a
   1cc30:	b9 84       	ldd	r11, Y+9	; 0x09
   1cc32:	c8 84       	ldd	r12, Y+8	; 0x08
   1cc34:	df 80       	ldd	r13, Y+7	; 0x07
   1cc36:	ee 80       	ldd	r14, Y+6	; 0x06
   1cc38:	fd 80       	ldd	r15, Y+5	; 0x05
   1cc3a:	0c 81       	ldd	r16, Y+4	; 0x04
   1cc3c:	1b 81       	ldd	r17, Y+3	; 0x03
   1cc3e:	aa 81       	ldd	r26, Y+2	; 0x02
   1cc40:	b9 81       	ldd	r27, Y+1	; 0x01
   1cc42:	ce 0f       	add	r28, r30
   1cc44:	d1 1d       	adc	r29, r1
   1cc46:	0f b6       	in	r0, 0x3f	; 63
   1cc48:	f8 94       	cli
   1cc4a:	de bf       	out	0x3e, r29	; 62
   1cc4c:	0f be       	out	0x3f, r0	; 63
   1cc4e:	cd bf       	out	0x3d, r28	; 61
   1cc50:	ed 01       	movw	r28, r26
   1cc52:	08 95       	ret

0001cc54 <__xload_1>:
   1cc54:	57 fd       	sbrc	r21, 7
   1cc56:	03 c0       	rjmp	.+6      	; 0x1cc5e <__xload_1+0xa>
   1cc58:	5b bf       	out	0x3b, r21	; 59
   1cc5a:	67 91       	elpm	r22, Z+
   1cc5c:	08 95       	ret
   1cc5e:	60 81       	ld	r22, Z
   1cc60:	08 95       	ret

0001cc62 <__cmpdi2_s8>:
   1cc62:	00 24       	eor	r0, r0
   1cc64:	a7 fd       	sbrc	r26, 7
   1cc66:	00 94       	com	r0
   1cc68:	2a 17       	cp	r18, r26
   1cc6a:	30 05       	cpc	r19, r0
   1cc6c:	40 05       	cpc	r20, r0
   1cc6e:	50 05       	cpc	r21, r0
   1cc70:	60 05       	cpc	r22, r0
   1cc72:	70 05       	cpc	r23, r0
   1cc74:	80 05       	cpc	r24, r0
   1cc76:	90 05       	cpc	r25, r0
   1cc78:	08 95       	ret

0001cc7a <__subsf3>:
   1cc7a:	50 58       	subi	r21, 0x80	; 128

0001cc7c <__addsf3>:
   1cc7c:	bb 27       	eor	r27, r27
   1cc7e:	aa 27       	eor	r26, r26
   1cc80:	0e d0       	rcall	.+28     	; 0x1cc9e <__addsf3x>
   1cc82:	75 c1       	rjmp	.+746    	; 0x1cf6e <__fp_round>
   1cc84:	66 d1       	rcall	.+716    	; 0x1cf52 <__fp_pscA>
   1cc86:	30 f0       	brcs	.+12     	; 0x1cc94 <__addsf3+0x18>
   1cc88:	6b d1       	rcall	.+726    	; 0x1cf60 <__fp_pscB>
   1cc8a:	20 f0       	brcs	.+8      	; 0x1cc94 <__addsf3+0x18>
   1cc8c:	31 f4       	brne	.+12     	; 0x1cc9a <__addsf3+0x1e>
   1cc8e:	9f 3f       	cpi	r25, 0xFF	; 255
   1cc90:	11 f4       	brne	.+4      	; 0x1cc96 <__addsf3+0x1a>
   1cc92:	1e f4       	brtc	.+6      	; 0x1cc9a <__addsf3+0x1e>
   1cc94:	5b c1       	rjmp	.+694    	; 0x1cf4c <__fp_nan>
   1cc96:	0e f4       	brtc	.+2      	; 0x1cc9a <__addsf3+0x1e>
   1cc98:	e0 95       	com	r30
   1cc9a:	e7 fb       	bst	r30, 7
   1cc9c:	51 c1       	rjmp	.+674    	; 0x1cf40 <__fp_inf>

0001cc9e <__addsf3x>:
   1cc9e:	e9 2f       	mov	r30, r25
   1cca0:	77 d1       	rcall	.+750    	; 0x1cf90 <__fp_split3>
   1cca2:	80 f3       	brcs	.-32     	; 0x1cc84 <__addsf3+0x8>
   1cca4:	ba 17       	cp	r27, r26
   1cca6:	62 07       	cpc	r22, r18
   1cca8:	73 07       	cpc	r23, r19
   1ccaa:	84 07       	cpc	r24, r20
   1ccac:	95 07       	cpc	r25, r21
   1ccae:	18 f0       	brcs	.+6      	; 0x1ccb6 <__addsf3x+0x18>
   1ccb0:	71 f4       	brne	.+28     	; 0x1ccce <__addsf3x+0x30>
   1ccb2:	9e f5       	brtc	.+102    	; 0x1cd1a <__addsf3x+0x7c>
   1ccb4:	8f c1       	rjmp	.+798    	; 0x1cfd4 <__fp_zero>
   1ccb6:	0e f4       	brtc	.+2      	; 0x1ccba <__addsf3x+0x1c>
   1ccb8:	e0 95       	com	r30
   1ccba:	0b 2e       	mov	r0, r27
   1ccbc:	ba 2f       	mov	r27, r26
   1ccbe:	a0 2d       	mov	r26, r0
   1ccc0:	0b 01       	movw	r0, r22
   1ccc2:	b9 01       	movw	r22, r18
   1ccc4:	90 01       	movw	r18, r0
   1ccc6:	0c 01       	movw	r0, r24
   1ccc8:	ca 01       	movw	r24, r20
   1ccca:	a0 01       	movw	r20, r0
   1cccc:	11 24       	eor	r1, r1
   1ccce:	ff 27       	eor	r31, r31
   1ccd0:	59 1b       	sub	r21, r25
   1ccd2:	99 f0       	breq	.+38     	; 0x1ccfa <__addsf3x+0x5c>
   1ccd4:	59 3f       	cpi	r21, 0xF9	; 249
   1ccd6:	50 f4       	brcc	.+20     	; 0x1ccec <__addsf3x+0x4e>
   1ccd8:	50 3e       	cpi	r21, 0xE0	; 224
   1ccda:	68 f1       	brcs	.+90     	; 0x1cd36 <__addsf3x+0x98>
   1ccdc:	1a 16       	cp	r1, r26
   1ccde:	f0 40       	sbci	r31, 0x00	; 0
   1cce0:	a2 2f       	mov	r26, r18
   1cce2:	23 2f       	mov	r18, r19
   1cce4:	34 2f       	mov	r19, r20
   1cce6:	44 27       	eor	r20, r20
   1cce8:	58 5f       	subi	r21, 0xF8	; 248
   1ccea:	f3 cf       	rjmp	.-26     	; 0x1ccd2 <__addsf3x+0x34>
   1ccec:	46 95       	lsr	r20
   1ccee:	37 95       	ror	r19
   1ccf0:	27 95       	ror	r18
   1ccf2:	a7 95       	ror	r26
   1ccf4:	f0 40       	sbci	r31, 0x00	; 0
   1ccf6:	53 95       	inc	r21
   1ccf8:	c9 f7       	brne	.-14     	; 0x1ccec <__addsf3x+0x4e>
   1ccfa:	7e f4       	brtc	.+30     	; 0x1cd1a <__addsf3x+0x7c>
   1ccfc:	1f 16       	cp	r1, r31
   1ccfe:	ba 0b       	sbc	r27, r26
   1cd00:	62 0b       	sbc	r22, r18
   1cd02:	73 0b       	sbc	r23, r19
   1cd04:	84 0b       	sbc	r24, r20
   1cd06:	ba f0       	brmi	.+46     	; 0x1cd36 <__addsf3x+0x98>
   1cd08:	91 50       	subi	r25, 0x01	; 1
   1cd0a:	a1 f0       	breq	.+40     	; 0x1cd34 <__addsf3x+0x96>
   1cd0c:	ff 0f       	add	r31, r31
   1cd0e:	bb 1f       	adc	r27, r27
   1cd10:	66 1f       	adc	r22, r22
   1cd12:	77 1f       	adc	r23, r23
   1cd14:	88 1f       	adc	r24, r24
   1cd16:	c2 f7       	brpl	.-16     	; 0x1cd08 <__addsf3x+0x6a>
   1cd18:	0e c0       	rjmp	.+28     	; 0x1cd36 <__addsf3x+0x98>
   1cd1a:	ba 0f       	add	r27, r26
   1cd1c:	62 1f       	adc	r22, r18
   1cd1e:	73 1f       	adc	r23, r19
   1cd20:	84 1f       	adc	r24, r20
   1cd22:	48 f4       	brcc	.+18     	; 0x1cd36 <__addsf3x+0x98>
   1cd24:	87 95       	ror	r24
   1cd26:	77 95       	ror	r23
   1cd28:	67 95       	ror	r22
   1cd2a:	b7 95       	ror	r27
   1cd2c:	f7 95       	ror	r31
   1cd2e:	9e 3f       	cpi	r25, 0xFE	; 254
   1cd30:	08 f0       	brcs	.+2      	; 0x1cd34 <__addsf3x+0x96>
   1cd32:	b3 cf       	rjmp	.-154    	; 0x1cc9a <__addsf3+0x1e>
   1cd34:	93 95       	inc	r25
   1cd36:	88 0f       	add	r24, r24
   1cd38:	08 f0       	brcs	.+2      	; 0x1cd3c <__addsf3x+0x9e>
   1cd3a:	99 27       	eor	r25, r25
   1cd3c:	ee 0f       	add	r30, r30
   1cd3e:	97 95       	ror	r25
   1cd40:	87 95       	ror	r24
   1cd42:	08 95       	ret

0001cd44 <__cmpsf2>:
   1cd44:	d9 d0       	rcall	.+434    	; 0x1cef8 <__fp_cmp>
   1cd46:	08 f4       	brcc	.+2      	; 0x1cd4a <__cmpsf2+0x6>
   1cd48:	81 e0       	ldi	r24, 0x01	; 1
   1cd4a:	08 95       	ret

0001cd4c <__divsf3>:
   1cd4c:	0c d0       	rcall	.+24     	; 0x1cd66 <__divsf3x>
   1cd4e:	0f c1       	rjmp	.+542    	; 0x1cf6e <__fp_round>
   1cd50:	07 d1       	rcall	.+526    	; 0x1cf60 <__fp_pscB>
   1cd52:	40 f0       	brcs	.+16     	; 0x1cd64 <__divsf3+0x18>
   1cd54:	fe d0       	rcall	.+508    	; 0x1cf52 <__fp_pscA>
   1cd56:	30 f0       	brcs	.+12     	; 0x1cd64 <__divsf3+0x18>
   1cd58:	21 f4       	brne	.+8      	; 0x1cd62 <__divsf3+0x16>
   1cd5a:	5f 3f       	cpi	r21, 0xFF	; 255
   1cd5c:	19 f0       	breq	.+6      	; 0x1cd64 <__divsf3+0x18>
   1cd5e:	f0 c0       	rjmp	.+480    	; 0x1cf40 <__fp_inf>
   1cd60:	51 11       	cpse	r21, r1
   1cd62:	39 c1       	rjmp	.+626    	; 0x1cfd6 <__fp_szero>
   1cd64:	f3 c0       	rjmp	.+486    	; 0x1cf4c <__fp_nan>

0001cd66 <__divsf3x>:
   1cd66:	14 d1       	rcall	.+552    	; 0x1cf90 <__fp_split3>
   1cd68:	98 f3       	brcs	.-26     	; 0x1cd50 <__divsf3+0x4>

0001cd6a <__divsf3_pse>:
   1cd6a:	99 23       	and	r25, r25
   1cd6c:	c9 f3       	breq	.-14     	; 0x1cd60 <__divsf3+0x14>
   1cd6e:	55 23       	and	r21, r21
   1cd70:	b1 f3       	breq	.-20     	; 0x1cd5e <__divsf3+0x12>
   1cd72:	95 1b       	sub	r25, r21
   1cd74:	55 0b       	sbc	r21, r21
   1cd76:	bb 27       	eor	r27, r27
   1cd78:	aa 27       	eor	r26, r26
   1cd7a:	62 17       	cp	r22, r18
   1cd7c:	73 07       	cpc	r23, r19
   1cd7e:	84 07       	cpc	r24, r20
   1cd80:	38 f0       	brcs	.+14     	; 0x1cd90 <__divsf3_pse+0x26>
   1cd82:	9f 5f       	subi	r25, 0xFF	; 255
   1cd84:	5f 4f       	sbci	r21, 0xFF	; 255
   1cd86:	22 0f       	add	r18, r18
   1cd88:	33 1f       	adc	r19, r19
   1cd8a:	44 1f       	adc	r20, r20
   1cd8c:	aa 1f       	adc	r26, r26
   1cd8e:	a9 f3       	breq	.-22     	; 0x1cd7a <__divsf3_pse+0x10>
   1cd90:	33 d0       	rcall	.+102    	; 0x1cdf8 <__divsf3_pse+0x8e>
   1cd92:	0e 2e       	mov	r0, r30
   1cd94:	3a f0       	brmi	.+14     	; 0x1cda4 <__divsf3_pse+0x3a>
   1cd96:	e0 e8       	ldi	r30, 0x80	; 128
   1cd98:	30 d0       	rcall	.+96     	; 0x1cdfa <__divsf3_pse+0x90>
   1cd9a:	91 50       	subi	r25, 0x01	; 1
   1cd9c:	50 40       	sbci	r21, 0x00	; 0
   1cd9e:	e6 95       	lsr	r30
   1cda0:	00 1c       	adc	r0, r0
   1cda2:	ca f7       	brpl	.-14     	; 0x1cd96 <__divsf3_pse+0x2c>
   1cda4:	29 d0       	rcall	.+82     	; 0x1cdf8 <__divsf3_pse+0x8e>
   1cda6:	fe 2f       	mov	r31, r30
   1cda8:	27 d0       	rcall	.+78     	; 0x1cdf8 <__divsf3_pse+0x8e>
   1cdaa:	66 0f       	add	r22, r22
   1cdac:	77 1f       	adc	r23, r23
   1cdae:	88 1f       	adc	r24, r24
   1cdb0:	bb 1f       	adc	r27, r27
   1cdb2:	26 17       	cp	r18, r22
   1cdb4:	37 07       	cpc	r19, r23
   1cdb6:	48 07       	cpc	r20, r24
   1cdb8:	ab 07       	cpc	r26, r27
   1cdba:	b0 e8       	ldi	r27, 0x80	; 128
   1cdbc:	09 f0       	breq	.+2      	; 0x1cdc0 <__divsf3_pse+0x56>
   1cdbe:	bb 0b       	sbc	r27, r27
   1cdc0:	80 2d       	mov	r24, r0
   1cdc2:	bf 01       	movw	r22, r30
   1cdc4:	ff 27       	eor	r31, r31
   1cdc6:	93 58       	subi	r25, 0x83	; 131
   1cdc8:	5f 4f       	sbci	r21, 0xFF	; 255
   1cdca:	2a f0       	brmi	.+10     	; 0x1cdd6 <__divsf3_pse+0x6c>
   1cdcc:	9e 3f       	cpi	r25, 0xFE	; 254
   1cdce:	51 05       	cpc	r21, r1
   1cdd0:	68 f0       	brcs	.+26     	; 0x1cdec <__divsf3_pse+0x82>
   1cdd2:	b6 c0       	rjmp	.+364    	; 0x1cf40 <__fp_inf>
   1cdd4:	00 c1       	rjmp	.+512    	; 0x1cfd6 <__fp_szero>
   1cdd6:	5f 3f       	cpi	r21, 0xFF	; 255
   1cdd8:	ec f3       	brlt	.-6      	; 0x1cdd4 <__divsf3_pse+0x6a>
   1cdda:	98 3e       	cpi	r25, 0xE8	; 232
   1cddc:	dc f3       	brlt	.-10     	; 0x1cdd4 <__divsf3_pse+0x6a>
   1cdde:	86 95       	lsr	r24
   1cde0:	77 95       	ror	r23
   1cde2:	67 95       	ror	r22
   1cde4:	b7 95       	ror	r27
   1cde6:	f7 95       	ror	r31
   1cde8:	9f 5f       	subi	r25, 0xFF	; 255
   1cdea:	c9 f7       	brne	.-14     	; 0x1cdde <__divsf3_pse+0x74>
   1cdec:	88 0f       	add	r24, r24
   1cdee:	91 1d       	adc	r25, r1
   1cdf0:	96 95       	lsr	r25
   1cdf2:	87 95       	ror	r24
   1cdf4:	97 f9       	bld	r25, 7
   1cdf6:	08 95       	ret
   1cdf8:	e1 e0       	ldi	r30, 0x01	; 1
   1cdfa:	66 0f       	add	r22, r22
   1cdfc:	77 1f       	adc	r23, r23
   1cdfe:	88 1f       	adc	r24, r24
   1ce00:	bb 1f       	adc	r27, r27
   1ce02:	62 17       	cp	r22, r18
   1ce04:	73 07       	cpc	r23, r19
   1ce06:	84 07       	cpc	r24, r20
   1ce08:	ba 07       	cpc	r27, r26
   1ce0a:	20 f0       	brcs	.+8      	; 0x1ce14 <__divsf3_pse+0xaa>
   1ce0c:	62 1b       	sub	r22, r18
   1ce0e:	73 0b       	sbc	r23, r19
   1ce10:	84 0b       	sbc	r24, r20
   1ce12:	ba 0b       	sbc	r27, r26
   1ce14:	ee 1f       	adc	r30, r30
   1ce16:	88 f7       	brcc	.-30     	; 0x1cdfa <__divsf3_pse+0x90>
   1ce18:	e0 95       	com	r30
   1ce1a:	08 95       	ret

0001ce1c <__fixsfsi>:
   1ce1c:	04 d0       	rcall	.+8      	; 0x1ce26 <__fixunssfsi>
   1ce1e:	68 94       	set
   1ce20:	b1 11       	cpse	r27, r1
   1ce22:	d9 c0       	rjmp	.+434    	; 0x1cfd6 <__fp_szero>
   1ce24:	08 95       	ret

0001ce26 <__fixunssfsi>:
   1ce26:	bc d0       	rcall	.+376    	; 0x1cfa0 <__fp_splitA>
   1ce28:	88 f0       	brcs	.+34     	; 0x1ce4c <__fixunssfsi+0x26>
   1ce2a:	9f 57       	subi	r25, 0x7F	; 127
   1ce2c:	90 f0       	brcs	.+36     	; 0x1ce52 <__fixunssfsi+0x2c>
   1ce2e:	b9 2f       	mov	r27, r25
   1ce30:	99 27       	eor	r25, r25
   1ce32:	b7 51       	subi	r27, 0x17	; 23
   1ce34:	a0 f0       	brcs	.+40     	; 0x1ce5e <__fixunssfsi+0x38>
   1ce36:	d1 f0       	breq	.+52     	; 0x1ce6c <__fixunssfsi+0x46>
   1ce38:	66 0f       	add	r22, r22
   1ce3a:	77 1f       	adc	r23, r23
   1ce3c:	88 1f       	adc	r24, r24
   1ce3e:	99 1f       	adc	r25, r25
   1ce40:	1a f0       	brmi	.+6      	; 0x1ce48 <__fixunssfsi+0x22>
   1ce42:	ba 95       	dec	r27
   1ce44:	c9 f7       	brne	.-14     	; 0x1ce38 <__fixunssfsi+0x12>
   1ce46:	12 c0       	rjmp	.+36     	; 0x1ce6c <__fixunssfsi+0x46>
   1ce48:	b1 30       	cpi	r27, 0x01	; 1
   1ce4a:	81 f0       	breq	.+32     	; 0x1ce6c <__fixunssfsi+0x46>
   1ce4c:	c3 d0       	rcall	.+390    	; 0x1cfd4 <__fp_zero>
   1ce4e:	b1 e0       	ldi	r27, 0x01	; 1
   1ce50:	08 95       	ret
   1ce52:	c0 c0       	rjmp	.+384    	; 0x1cfd4 <__fp_zero>
   1ce54:	67 2f       	mov	r22, r23
   1ce56:	78 2f       	mov	r23, r24
   1ce58:	88 27       	eor	r24, r24
   1ce5a:	b8 5f       	subi	r27, 0xF8	; 248
   1ce5c:	39 f0       	breq	.+14     	; 0x1ce6c <__fixunssfsi+0x46>
   1ce5e:	b9 3f       	cpi	r27, 0xF9	; 249
   1ce60:	cc f3       	brlt	.-14     	; 0x1ce54 <__fixunssfsi+0x2e>
   1ce62:	86 95       	lsr	r24
   1ce64:	77 95       	ror	r23
   1ce66:	67 95       	ror	r22
   1ce68:	b3 95       	inc	r27
   1ce6a:	d9 f7       	brne	.-10     	; 0x1ce62 <__fixunssfsi+0x3c>
   1ce6c:	3e f4       	brtc	.+14     	; 0x1ce7c <__fixunssfsi+0x56>
   1ce6e:	90 95       	com	r25
   1ce70:	80 95       	com	r24
   1ce72:	70 95       	com	r23
   1ce74:	61 95       	neg	r22
   1ce76:	7f 4f       	sbci	r23, 0xFF	; 255
   1ce78:	8f 4f       	sbci	r24, 0xFF	; 255
   1ce7a:	9f 4f       	sbci	r25, 0xFF	; 255
   1ce7c:	08 95       	ret

0001ce7e <__floatunsisf>:
   1ce7e:	e8 94       	clt
   1ce80:	09 c0       	rjmp	.+18     	; 0x1ce94 <__floatsisf+0x12>

0001ce82 <__floatsisf>:
   1ce82:	97 fb       	bst	r25, 7
   1ce84:	3e f4       	brtc	.+14     	; 0x1ce94 <__floatsisf+0x12>
   1ce86:	90 95       	com	r25
   1ce88:	80 95       	com	r24
   1ce8a:	70 95       	com	r23
   1ce8c:	61 95       	neg	r22
   1ce8e:	7f 4f       	sbci	r23, 0xFF	; 255
   1ce90:	8f 4f       	sbci	r24, 0xFF	; 255
   1ce92:	9f 4f       	sbci	r25, 0xFF	; 255
   1ce94:	99 23       	and	r25, r25
   1ce96:	a9 f0       	breq	.+42     	; 0x1cec2 <__floatsisf+0x40>
   1ce98:	f9 2f       	mov	r31, r25
   1ce9a:	96 e9       	ldi	r25, 0x96	; 150
   1ce9c:	bb 27       	eor	r27, r27
   1ce9e:	93 95       	inc	r25
   1cea0:	f6 95       	lsr	r31
   1cea2:	87 95       	ror	r24
   1cea4:	77 95       	ror	r23
   1cea6:	67 95       	ror	r22
   1cea8:	b7 95       	ror	r27
   1ceaa:	f1 11       	cpse	r31, r1
   1ceac:	f8 cf       	rjmp	.-16     	; 0x1ce9e <__floatsisf+0x1c>
   1ceae:	fa f4       	brpl	.+62     	; 0x1ceee <__floatsisf+0x6c>
   1ceb0:	bb 0f       	add	r27, r27
   1ceb2:	11 f4       	brne	.+4      	; 0x1ceb8 <__floatsisf+0x36>
   1ceb4:	60 ff       	sbrs	r22, 0
   1ceb6:	1b c0       	rjmp	.+54     	; 0x1ceee <__floatsisf+0x6c>
   1ceb8:	6f 5f       	subi	r22, 0xFF	; 255
   1ceba:	7f 4f       	sbci	r23, 0xFF	; 255
   1cebc:	8f 4f       	sbci	r24, 0xFF	; 255
   1cebe:	9f 4f       	sbci	r25, 0xFF	; 255
   1cec0:	16 c0       	rjmp	.+44     	; 0x1ceee <__floatsisf+0x6c>
   1cec2:	88 23       	and	r24, r24
   1cec4:	11 f0       	breq	.+4      	; 0x1ceca <__floatsisf+0x48>
   1cec6:	96 e9       	ldi	r25, 0x96	; 150
   1cec8:	11 c0       	rjmp	.+34     	; 0x1ceec <__floatsisf+0x6a>
   1ceca:	77 23       	and	r23, r23
   1cecc:	21 f0       	breq	.+8      	; 0x1ced6 <__floatsisf+0x54>
   1cece:	9e e8       	ldi	r25, 0x8E	; 142
   1ced0:	87 2f       	mov	r24, r23
   1ced2:	76 2f       	mov	r23, r22
   1ced4:	05 c0       	rjmp	.+10     	; 0x1cee0 <__floatsisf+0x5e>
   1ced6:	66 23       	and	r22, r22
   1ced8:	71 f0       	breq	.+28     	; 0x1cef6 <__floatsisf+0x74>
   1ceda:	96 e8       	ldi	r25, 0x86	; 134
   1cedc:	86 2f       	mov	r24, r22
   1cede:	70 e0       	ldi	r23, 0x00	; 0
   1cee0:	60 e0       	ldi	r22, 0x00	; 0
   1cee2:	2a f0       	brmi	.+10     	; 0x1ceee <__floatsisf+0x6c>
   1cee4:	9a 95       	dec	r25
   1cee6:	66 0f       	add	r22, r22
   1cee8:	77 1f       	adc	r23, r23
   1ceea:	88 1f       	adc	r24, r24
   1ceec:	da f7       	brpl	.-10     	; 0x1cee4 <__floatsisf+0x62>
   1ceee:	88 0f       	add	r24, r24
   1cef0:	96 95       	lsr	r25
   1cef2:	87 95       	ror	r24
   1cef4:	97 f9       	bld	r25, 7
   1cef6:	08 95       	ret

0001cef8 <__fp_cmp>:
   1cef8:	99 0f       	add	r25, r25
   1cefa:	00 08       	sbc	r0, r0
   1cefc:	55 0f       	add	r21, r21
   1cefe:	aa 0b       	sbc	r26, r26
   1cf00:	e0 e8       	ldi	r30, 0x80	; 128
   1cf02:	fe ef       	ldi	r31, 0xFE	; 254
   1cf04:	16 16       	cp	r1, r22
   1cf06:	17 06       	cpc	r1, r23
   1cf08:	e8 07       	cpc	r30, r24
   1cf0a:	f9 07       	cpc	r31, r25
   1cf0c:	c0 f0       	brcs	.+48     	; 0x1cf3e <__fp_cmp+0x46>
   1cf0e:	12 16       	cp	r1, r18
   1cf10:	13 06       	cpc	r1, r19
   1cf12:	e4 07       	cpc	r30, r20
   1cf14:	f5 07       	cpc	r31, r21
   1cf16:	98 f0       	brcs	.+38     	; 0x1cf3e <__fp_cmp+0x46>
   1cf18:	62 1b       	sub	r22, r18
   1cf1a:	73 0b       	sbc	r23, r19
   1cf1c:	84 0b       	sbc	r24, r20
   1cf1e:	95 0b       	sbc	r25, r21
   1cf20:	39 f4       	brne	.+14     	; 0x1cf30 <__fp_cmp+0x38>
   1cf22:	0a 26       	eor	r0, r26
   1cf24:	61 f0       	breq	.+24     	; 0x1cf3e <__fp_cmp+0x46>
   1cf26:	23 2b       	or	r18, r19
   1cf28:	24 2b       	or	r18, r20
   1cf2a:	25 2b       	or	r18, r21
   1cf2c:	21 f4       	brne	.+8      	; 0x1cf36 <__fp_cmp+0x3e>
   1cf2e:	08 95       	ret
   1cf30:	0a 26       	eor	r0, r26
   1cf32:	09 f4       	brne	.+2      	; 0x1cf36 <__fp_cmp+0x3e>
   1cf34:	a1 40       	sbci	r26, 0x01	; 1
   1cf36:	a6 95       	lsr	r26
   1cf38:	8f ef       	ldi	r24, 0xFF	; 255
   1cf3a:	81 1d       	adc	r24, r1
   1cf3c:	81 1d       	adc	r24, r1
   1cf3e:	08 95       	ret

0001cf40 <__fp_inf>:
   1cf40:	97 f9       	bld	r25, 7
   1cf42:	9f 67       	ori	r25, 0x7F	; 127
   1cf44:	80 e8       	ldi	r24, 0x80	; 128
   1cf46:	70 e0       	ldi	r23, 0x00	; 0
   1cf48:	60 e0       	ldi	r22, 0x00	; 0
   1cf4a:	08 95       	ret

0001cf4c <__fp_nan>:
   1cf4c:	9f ef       	ldi	r25, 0xFF	; 255
   1cf4e:	80 ec       	ldi	r24, 0xC0	; 192
   1cf50:	08 95       	ret

0001cf52 <__fp_pscA>:
   1cf52:	00 24       	eor	r0, r0
   1cf54:	0a 94       	dec	r0
   1cf56:	16 16       	cp	r1, r22
   1cf58:	17 06       	cpc	r1, r23
   1cf5a:	18 06       	cpc	r1, r24
   1cf5c:	09 06       	cpc	r0, r25
   1cf5e:	08 95       	ret

0001cf60 <__fp_pscB>:
   1cf60:	00 24       	eor	r0, r0
   1cf62:	0a 94       	dec	r0
   1cf64:	12 16       	cp	r1, r18
   1cf66:	13 06       	cpc	r1, r19
   1cf68:	14 06       	cpc	r1, r20
   1cf6a:	05 06       	cpc	r0, r21
   1cf6c:	08 95       	ret

0001cf6e <__fp_round>:
   1cf6e:	09 2e       	mov	r0, r25
   1cf70:	03 94       	inc	r0
   1cf72:	00 0c       	add	r0, r0
   1cf74:	11 f4       	brne	.+4      	; 0x1cf7a <__fp_round+0xc>
   1cf76:	88 23       	and	r24, r24
   1cf78:	52 f0       	brmi	.+20     	; 0x1cf8e <__fp_round+0x20>
   1cf7a:	bb 0f       	add	r27, r27
   1cf7c:	40 f4       	brcc	.+16     	; 0x1cf8e <__fp_round+0x20>
   1cf7e:	bf 2b       	or	r27, r31
   1cf80:	11 f4       	brne	.+4      	; 0x1cf86 <__fp_round+0x18>
   1cf82:	60 ff       	sbrs	r22, 0
   1cf84:	04 c0       	rjmp	.+8      	; 0x1cf8e <__fp_round+0x20>
   1cf86:	6f 5f       	subi	r22, 0xFF	; 255
   1cf88:	7f 4f       	sbci	r23, 0xFF	; 255
   1cf8a:	8f 4f       	sbci	r24, 0xFF	; 255
   1cf8c:	9f 4f       	sbci	r25, 0xFF	; 255
   1cf8e:	08 95       	ret

0001cf90 <__fp_split3>:
   1cf90:	57 fd       	sbrc	r21, 7
   1cf92:	90 58       	subi	r25, 0x80	; 128
   1cf94:	44 0f       	add	r20, r20
   1cf96:	55 1f       	adc	r21, r21
   1cf98:	59 f0       	breq	.+22     	; 0x1cfb0 <__fp_splitA+0x10>
   1cf9a:	5f 3f       	cpi	r21, 0xFF	; 255
   1cf9c:	71 f0       	breq	.+28     	; 0x1cfba <__fp_splitA+0x1a>
   1cf9e:	47 95       	ror	r20

0001cfa0 <__fp_splitA>:
   1cfa0:	88 0f       	add	r24, r24
   1cfa2:	97 fb       	bst	r25, 7
   1cfa4:	99 1f       	adc	r25, r25
   1cfa6:	61 f0       	breq	.+24     	; 0x1cfc0 <__fp_splitA+0x20>
   1cfa8:	9f 3f       	cpi	r25, 0xFF	; 255
   1cfaa:	79 f0       	breq	.+30     	; 0x1cfca <__fp_splitA+0x2a>
   1cfac:	87 95       	ror	r24
   1cfae:	08 95       	ret
   1cfb0:	12 16       	cp	r1, r18
   1cfb2:	13 06       	cpc	r1, r19
   1cfb4:	14 06       	cpc	r1, r20
   1cfb6:	55 1f       	adc	r21, r21
   1cfb8:	f2 cf       	rjmp	.-28     	; 0x1cf9e <__fp_split3+0xe>
   1cfba:	46 95       	lsr	r20
   1cfbc:	f1 df       	rcall	.-30     	; 0x1cfa0 <__fp_splitA>
   1cfbe:	08 c0       	rjmp	.+16     	; 0x1cfd0 <__fp_splitA+0x30>
   1cfc0:	16 16       	cp	r1, r22
   1cfc2:	17 06       	cpc	r1, r23
   1cfc4:	18 06       	cpc	r1, r24
   1cfc6:	99 1f       	adc	r25, r25
   1cfc8:	f1 cf       	rjmp	.-30     	; 0x1cfac <__fp_splitA+0xc>
   1cfca:	86 95       	lsr	r24
   1cfcc:	71 05       	cpc	r23, r1
   1cfce:	61 05       	cpc	r22, r1
   1cfd0:	08 94       	sec
   1cfd2:	08 95       	ret

0001cfd4 <__fp_zero>:
   1cfd4:	e8 94       	clt

0001cfd6 <__fp_szero>:
   1cfd6:	bb 27       	eor	r27, r27
   1cfd8:	66 27       	eor	r22, r22
   1cfda:	77 27       	eor	r23, r23
   1cfdc:	cb 01       	movw	r24, r22
   1cfde:	97 f9       	bld	r25, 7
   1cfe0:	08 95       	ret

0001cfe2 <__gesf2>:
   1cfe2:	8a df       	rcall	.-236    	; 0x1cef8 <__fp_cmp>
   1cfe4:	08 f4       	brcc	.+2      	; 0x1cfe8 <__gesf2+0x6>
   1cfe6:	8f ef       	ldi	r24, 0xFF	; 255
   1cfe8:	08 95       	ret

0001cfea <__mulsf3>:
   1cfea:	0b d0       	rcall	.+22     	; 0x1d002 <__mulsf3x>
   1cfec:	c0 cf       	rjmp	.-128    	; 0x1cf6e <__fp_round>
   1cfee:	b1 df       	rcall	.-158    	; 0x1cf52 <__fp_pscA>
   1cff0:	28 f0       	brcs	.+10     	; 0x1cffc <__mulsf3+0x12>
   1cff2:	b6 df       	rcall	.-148    	; 0x1cf60 <__fp_pscB>
   1cff4:	18 f0       	brcs	.+6      	; 0x1cffc <__mulsf3+0x12>
   1cff6:	95 23       	and	r25, r21
   1cff8:	09 f0       	breq	.+2      	; 0x1cffc <__mulsf3+0x12>
   1cffa:	a2 cf       	rjmp	.-188    	; 0x1cf40 <__fp_inf>
   1cffc:	a7 cf       	rjmp	.-178    	; 0x1cf4c <__fp_nan>
   1cffe:	11 24       	eor	r1, r1
   1d000:	ea cf       	rjmp	.-44     	; 0x1cfd6 <__fp_szero>

0001d002 <__mulsf3x>:
   1d002:	c6 df       	rcall	.-116    	; 0x1cf90 <__fp_split3>
   1d004:	a0 f3       	brcs	.-24     	; 0x1cfee <__mulsf3+0x4>

0001d006 <__mulsf3_pse>:
   1d006:	95 9f       	mul	r25, r21
   1d008:	d1 f3       	breq	.-12     	; 0x1cffe <__mulsf3+0x14>
   1d00a:	95 0f       	add	r25, r21
   1d00c:	50 e0       	ldi	r21, 0x00	; 0
   1d00e:	55 1f       	adc	r21, r21
   1d010:	62 9f       	mul	r22, r18
   1d012:	f0 01       	movw	r30, r0
   1d014:	72 9f       	mul	r23, r18
   1d016:	bb 27       	eor	r27, r27
   1d018:	f0 0d       	add	r31, r0
   1d01a:	b1 1d       	adc	r27, r1
   1d01c:	63 9f       	mul	r22, r19
   1d01e:	aa 27       	eor	r26, r26
   1d020:	f0 0d       	add	r31, r0
   1d022:	b1 1d       	adc	r27, r1
   1d024:	aa 1f       	adc	r26, r26
   1d026:	64 9f       	mul	r22, r20
   1d028:	66 27       	eor	r22, r22
   1d02a:	b0 0d       	add	r27, r0
   1d02c:	a1 1d       	adc	r26, r1
   1d02e:	66 1f       	adc	r22, r22
   1d030:	82 9f       	mul	r24, r18
   1d032:	22 27       	eor	r18, r18
   1d034:	b0 0d       	add	r27, r0
   1d036:	a1 1d       	adc	r26, r1
   1d038:	62 1f       	adc	r22, r18
   1d03a:	73 9f       	mul	r23, r19
   1d03c:	b0 0d       	add	r27, r0
   1d03e:	a1 1d       	adc	r26, r1
   1d040:	62 1f       	adc	r22, r18
   1d042:	83 9f       	mul	r24, r19
   1d044:	a0 0d       	add	r26, r0
   1d046:	61 1d       	adc	r22, r1
   1d048:	22 1f       	adc	r18, r18
   1d04a:	74 9f       	mul	r23, r20
   1d04c:	33 27       	eor	r19, r19
   1d04e:	a0 0d       	add	r26, r0
   1d050:	61 1d       	adc	r22, r1
   1d052:	23 1f       	adc	r18, r19
   1d054:	84 9f       	mul	r24, r20
   1d056:	60 0d       	add	r22, r0
   1d058:	21 1d       	adc	r18, r1
   1d05a:	82 2f       	mov	r24, r18
   1d05c:	76 2f       	mov	r23, r22
   1d05e:	6a 2f       	mov	r22, r26
   1d060:	11 24       	eor	r1, r1
   1d062:	9f 57       	subi	r25, 0x7F	; 127
   1d064:	50 40       	sbci	r21, 0x00	; 0
   1d066:	8a f0       	brmi	.+34     	; 0x1d08a <__mulsf3_pse+0x84>
   1d068:	e1 f0       	breq	.+56     	; 0x1d0a2 <__mulsf3_pse+0x9c>
   1d06a:	88 23       	and	r24, r24
   1d06c:	4a f0       	brmi	.+18     	; 0x1d080 <__mulsf3_pse+0x7a>
   1d06e:	ee 0f       	add	r30, r30
   1d070:	ff 1f       	adc	r31, r31
   1d072:	bb 1f       	adc	r27, r27
   1d074:	66 1f       	adc	r22, r22
   1d076:	77 1f       	adc	r23, r23
   1d078:	88 1f       	adc	r24, r24
   1d07a:	91 50       	subi	r25, 0x01	; 1
   1d07c:	50 40       	sbci	r21, 0x00	; 0
   1d07e:	a9 f7       	brne	.-22     	; 0x1d06a <__mulsf3_pse+0x64>
   1d080:	9e 3f       	cpi	r25, 0xFE	; 254
   1d082:	51 05       	cpc	r21, r1
   1d084:	70 f0       	brcs	.+28     	; 0x1d0a2 <__mulsf3_pse+0x9c>
   1d086:	5c cf       	rjmp	.-328    	; 0x1cf40 <__fp_inf>
   1d088:	a6 cf       	rjmp	.-180    	; 0x1cfd6 <__fp_szero>
   1d08a:	5f 3f       	cpi	r21, 0xFF	; 255
   1d08c:	ec f3       	brlt	.-6      	; 0x1d088 <__mulsf3_pse+0x82>
   1d08e:	98 3e       	cpi	r25, 0xE8	; 232
   1d090:	dc f3       	brlt	.-10     	; 0x1d088 <__mulsf3_pse+0x82>
   1d092:	86 95       	lsr	r24
   1d094:	77 95       	ror	r23
   1d096:	67 95       	ror	r22
   1d098:	b7 95       	ror	r27
   1d09a:	f7 95       	ror	r31
   1d09c:	e7 95       	ror	r30
   1d09e:	9f 5f       	subi	r25, 0xFF	; 255
   1d0a0:	c1 f7       	brne	.-16     	; 0x1d092 <__mulsf3_pse+0x8c>
   1d0a2:	fe 2b       	or	r31, r30
   1d0a4:	88 0f       	add	r24, r24
   1d0a6:	91 1d       	adc	r25, r1
   1d0a8:	96 95       	lsr	r25
   1d0aa:	87 95       	ror	r24
   1d0ac:	97 f9       	bld	r25, 7
   1d0ae:	08 95       	ret

0001d0b0 <round>:
   1d0b0:	77 df       	rcall	.-274    	; 0x1cfa0 <__fp_splitA>
   1d0b2:	e0 f0       	brcs	.+56     	; 0x1d0ec <round+0x3c>
   1d0b4:	9e 37       	cpi	r25, 0x7E	; 126
   1d0b6:	d8 f0       	brcs	.+54     	; 0x1d0ee <round+0x3e>
   1d0b8:	96 39       	cpi	r25, 0x96	; 150
   1d0ba:	b8 f4       	brcc	.+46     	; 0x1d0ea <round+0x3a>
   1d0bc:	9e 38       	cpi	r25, 0x8E	; 142
   1d0be:	48 f4       	brcc	.+18     	; 0x1d0d2 <round+0x22>
   1d0c0:	67 2f       	mov	r22, r23
   1d0c2:	78 2f       	mov	r23, r24
   1d0c4:	88 27       	eor	r24, r24
   1d0c6:	98 5f       	subi	r25, 0xF8	; 248
   1d0c8:	f9 cf       	rjmp	.-14     	; 0x1d0bc <round+0xc>
   1d0ca:	86 95       	lsr	r24
   1d0cc:	77 95       	ror	r23
   1d0ce:	67 95       	ror	r22
   1d0d0:	93 95       	inc	r25
   1d0d2:	95 39       	cpi	r25, 0x95	; 149
   1d0d4:	d0 f3       	brcs	.-12     	; 0x1d0ca <round+0x1a>
   1d0d6:	b6 2f       	mov	r27, r22
   1d0d8:	b1 70       	andi	r27, 0x01	; 1
   1d0da:	6b 0f       	add	r22, r27
   1d0dc:	71 1d       	adc	r23, r1
   1d0de:	81 1d       	adc	r24, r1
   1d0e0:	20 f4       	brcc	.+8      	; 0x1d0ea <round+0x3a>
   1d0e2:	87 95       	ror	r24
   1d0e4:	77 95       	ror	r23
   1d0e6:	67 95       	ror	r22
   1d0e8:	93 95       	inc	r25
   1d0ea:	02 c0       	rjmp	.+4      	; 0x1d0f0 <__fp_mintl>
   1d0ec:	1c c0       	rjmp	.+56     	; 0x1d126 <__fp_mpack>
   1d0ee:	73 cf       	rjmp	.-282    	; 0x1cfd6 <__fp_szero>

0001d0f0 <__fp_mintl>:
   1d0f0:	88 23       	and	r24, r24
   1d0f2:	71 f4       	brne	.+28     	; 0x1d110 <__fp_mintl+0x20>
   1d0f4:	77 23       	and	r23, r23
   1d0f6:	21 f0       	breq	.+8      	; 0x1d100 <__fp_mintl+0x10>
   1d0f8:	98 50       	subi	r25, 0x08	; 8
   1d0fa:	87 2b       	or	r24, r23
   1d0fc:	76 2f       	mov	r23, r22
   1d0fe:	07 c0       	rjmp	.+14     	; 0x1d10e <__fp_mintl+0x1e>
   1d100:	66 23       	and	r22, r22
   1d102:	11 f4       	brne	.+4      	; 0x1d108 <__fp_mintl+0x18>
   1d104:	99 27       	eor	r25, r25
   1d106:	0d c0       	rjmp	.+26     	; 0x1d122 <__fp_mintl+0x32>
   1d108:	90 51       	subi	r25, 0x10	; 16
   1d10a:	86 2b       	or	r24, r22
   1d10c:	70 e0       	ldi	r23, 0x00	; 0
   1d10e:	60 e0       	ldi	r22, 0x00	; 0
   1d110:	2a f0       	brmi	.+10     	; 0x1d11c <__fp_mintl+0x2c>
   1d112:	9a 95       	dec	r25
   1d114:	66 0f       	add	r22, r22
   1d116:	77 1f       	adc	r23, r23
   1d118:	88 1f       	adc	r24, r24
   1d11a:	da f7       	brpl	.-10     	; 0x1d112 <__fp_mintl+0x22>
   1d11c:	88 0f       	add	r24, r24
   1d11e:	96 95       	lsr	r25
   1d120:	87 95       	ror	r24
   1d122:	97 f9       	bld	r25, 7
   1d124:	08 95       	ret

0001d126 <__fp_mpack>:
   1d126:	9f 3f       	cpi	r25, 0xFF	; 255
   1d128:	31 f0       	breq	.+12     	; 0x1d136 <__fp_mpack_finite+0xc>

0001d12a <__fp_mpack_finite>:
   1d12a:	91 50       	subi	r25, 0x01	; 1
   1d12c:	20 f4       	brcc	.+8      	; 0x1d136 <__fp_mpack_finite+0xc>
   1d12e:	87 95       	ror	r24
   1d130:	77 95       	ror	r23
   1d132:	67 95       	ror	r22
   1d134:	b7 95       	ror	r27
   1d136:	88 0f       	add	r24, r24
   1d138:	91 1d       	adc	r25, r1
   1d13a:	96 95       	lsr	r25
   1d13c:	87 95       	ror	r24
   1d13e:	97 f9       	bld	r25, 7
   1d140:	08 95       	ret

0001d142 <calloc>:
   1d142:	0f 93       	push	r16
   1d144:	1f 93       	push	r17
   1d146:	cf 93       	push	r28
   1d148:	df 93       	push	r29
   1d14a:	86 9f       	mul	r24, r22
   1d14c:	80 01       	movw	r16, r0
   1d14e:	87 9f       	mul	r24, r23
   1d150:	10 0d       	add	r17, r0
   1d152:	96 9f       	mul	r25, r22
   1d154:	10 0d       	add	r17, r0
   1d156:	11 24       	eor	r1, r1
   1d158:	c8 01       	movw	r24, r16
   1d15a:	0d d0       	rcall	.+26     	; 0x1d176 <malloc>
   1d15c:	ec 01       	movw	r28, r24
   1d15e:	00 97       	sbiw	r24, 0x00	; 0
   1d160:	21 f0       	breq	.+8      	; 0x1d16a <calloc+0x28>
   1d162:	a8 01       	movw	r20, r16
   1d164:	60 e0       	ldi	r22, 0x00	; 0
   1d166:	70 e0       	ldi	r23, 0x00	; 0
   1d168:	0e d2       	rcall	.+1052   	; 0x1d586 <memset>
   1d16a:	ce 01       	movw	r24, r28
   1d16c:	df 91       	pop	r29
   1d16e:	cf 91       	pop	r28
   1d170:	1f 91       	pop	r17
   1d172:	0f 91       	pop	r16
   1d174:	08 95       	ret

0001d176 <malloc>:
   1d176:	0f 93       	push	r16
   1d178:	1f 93       	push	r17
   1d17a:	cf 93       	push	r28
   1d17c:	df 93       	push	r29
   1d17e:	82 30       	cpi	r24, 0x02	; 2
   1d180:	91 05       	cpc	r25, r1
   1d182:	10 f4       	brcc	.+4      	; 0x1d188 <malloc+0x12>
   1d184:	82 e0       	ldi	r24, 0x02	; 2
   1d186:	90 e0       	ldi	r25, 0x00	; 0
   1d188:	e0 91 ae 20 	lds	r30, 0x20AE	; 0x8020ae <__flp>
   1d18c:	f0 91 af 20 	lds	r31, 0x20AF	; 0x8020af <__flp+0x1>
   1d190:	20 e0       	ldi	r18, 0x00	; 0
   1d192:	30 e0       	ldi	r19, 0x00	; 0
   1d194:	a0 e0       	ldi	r26, 0x00	; 0
   1d196:	b0 e0       	ldi	r27, 0x00	; 0
   1d198:	30 97       	sbiw	r30, 0x00	; 0
   1d19a:	19 f1       	breq	.+70     	; 0x1d1e2 <malloc+0x6c>
   1d19c:	40 81       	ld	r20, Z
   1d19e:	51 81       	ldd	r21, Z+1	; 0x01
   1d1a0:	02 81       	ldd	r16, Z+2	; 0x02
   1d1a2:	13 81       	ldd	r17, Z+3	; 0x03
   1d1a4:	48 17       	cp	r20, r24
   1d1a6:	59 07       	cpc	r21, r25
   1d1a8:	c8 f0       	brcs	.+50     	; 0x1d1dc <malloc+0x66>
   1d1aa:	84 17       	cp	r24, r20
   1d1ac:	95 07       	cpc	r25, r21
   1d1ae:	69 f4       	brne	.+26     	; 0x1d1ca <malloc+0x54>
   1d1b0:	10 97       	sbiw	r26, 0x00	; 0
   1d1b2:	31 f0       	breq	.+12     	; 0x1d1c0 <malloc+0x4a>
   1d1b4:	12 96       	adiw	r26, 0x02	; 2
   1d1b6:	0c 93       	st	X, r16
   1d1b8:	12 97       	sbiw	r26, 0x02	; 2
   1d1ba:	13 96       	adiw	r26, 0x03	; 3
   1d1bc:	1c 93       	st	X, r17
   1d1be:	27 c0       	rjmp	.+78     	; 0x1d20e <malloc+0x98>
   1d1c0:	00 93 ae 20 	sts	0x20AE, r16	; 0x8020ae <__flp>
   1d1c4:	10 93 af 20 	sts	0x20AF, r17	; 0x8020af <__flp+0x1>
   1d1c8:	22 c0       	rjmp	.+68     	; 0x1d20e <malloc+0x98>
   1d1ca:	21 15       	cp	r18, r1
   1d1cc:	31 05       	cpc	r19, r1
   1d1ce:	19 f0       	breq	.+6      	; 0x1d1d6 <malloc+0x60>
   1d1d0:	42 17       	cp	r20, r18
   1d1d2:	53 07       	cpc	r21, r19
   1d1d4:	18 f4       	brcc	.+6      	; 0x1d1dc <malloc+0x66>
   1d1d6:	9a 01       	movw	r18, r20
   1d1d8:	bd 01       	movw	r22, r26
   1d1da:	ef 01       	movw	r28, r30
   1d1dc:	df 01       	movw	r26, r30
   1d1de:	f8 01       	movw	r30, r16
   1d1e0:	db cf       	rjmp	.-74     	; 0x1d198 <malloc+0x22>
   1d1e2:	21 15       	cp	r18, r1
   1d1e4:	31 05       	cpc	r19, r1
   1d1e6:	f9 f0       	breq	.+62     	; 0x1d226 <malloc+0xb0>
   1d1e8:	28 1b       	sub	r18, r24
   1d1ea:	39 0b       	sbc	r19, r25
   1d1ec:	24 30       	cpi	r18, 0x04	; 4
   1d1ee:	31 05       	cpc	r19, r1
   1d1f0:	80 f4       	brcc	.+32     	; 0x1d212 <malloc+0x9c>
   1d1f2:	8a 81       	ldd	r24, Y+2	; 0x02
   1d1f4:	9b 81       	ldd	r25, Y+3	; 0x03
   1d1f6:	61 15       	cp	r22, r1
   1d1f8:	71 05       	cpc	r23, r1
   1d1fa:	21 f0       	breq	.+8      	; 0x1d204 <malloc+0x8e>
   1d1fc:	fb 01       	movw	r30, r22
   1d1fe:	93 83       	std	Z+3, r25	; 0x03
   1d200:	82 83       	std	Z+2, r24	; 0x02
   1d202:	04 c0       	rjmp	.+8      	; 0x1d20c <malloc+0x96>
   1d204:	90 93 af 20 	sts	0x20AF, r25	; 0x8020af <__flp+0x1>
   1d208:	80 93 ae 20 	sts	0x20AE, r24	; 0x8020ae <__flp>
   1d20c:	fe 01       	movw	r30, r28
   1d20e:	32 96       	adiw	r30, 0x02	; 2
   1d210:	44 c0       	rjmp	.+136    	; 0x1d29a <malloc+0x124>
   1d212:	fe 01       	movw	r30, r28
   1d214:	e2 0f       	add	r30, r18
   1d216:	f3 1f       	adc	r31, r19
   1d218:	81 93       	st	Z+, r24
   1d21a:	91 93       	st	Z+, r25
   1d21c:	22 50       	subi	r18, 0x02	; 2
   1d21e:	31 09       	sbc	r19, r1
   1d220:	39 83       	std	Y+1, r19	; 0x01
   1d222:	28 83       	st	Y, r18
   1d224:	3a c0       	rjmp	.+116    	; 0x1d29a <malloc+0x124>
   1d226:	20 91 ac 20 	lds	r18, 0x20AC	; 0x8020ac <__brkval>
   1d22a:	30 91 ad 20 	lds	r19, 0x20AD	; 0x8020ad <__brkval+0x1>
   1d22e:	23 2b       	or	r18, r19
   1d230:	41 f4       	brne	.+16     	; 0x1d242 <malloc+0xcc>
   1d232:	20 91 57 02 	lds	r18, 0x0257	; 0x800257 <__malloc_heap_start>
   1d236:	30 91 58 02 	lds	r19, 0x0258	; 0x800258 <__malloc_heap_start+0x1>
   1d23a:	30 93 ad 20 	sts	0x20AD, r19	; 0x8020ad <__brkval+0x1>
   1d23e:	20 93 ac 20 	sts	0x20AC, r18	; 0x8020ac <__brkval>
   1d242:	20 91 55 02 	lds	r18, 0x0255	; 0x800255 <__malloc_heap_end>
   1d246:	30 91 56 02 	lds	r19, 0x0256	; 0x800256 <__malloc_heap_end+0x1>
   1d24a:	21 15       	cp	r18, r1
   1d24c:	31 05       	cpc	r19, r1
   1d24e:	41 f4       	brne	.+16     	; 0x1d260 <malloc+0xea>
   1d250:	2d b7       	in	r18, 0x3d	; 61
   1d252:	3e b7       	in	r19, 0x3e	; 62
   1d254:	40 91 59 02 	lds	r20, 0x0259	; 0x800259 <__malloc_margin>
   1d258:	50 91 5a 02 	lds	r21, 0x025A	; 0x80025a <__malloc_margin+0x1>
   1d25c:	24 1b       	sub	r18, r20
   1d25e:	35 0b       	sbc	r19, r21
   1d260:	e0 91 ac 20 	lds	r30, 0x20AC	; 0x8020ac <__brkval>
   1d264:	f0 91 ad 20 	lds	r31, 0x20AD	; 0x8020ad <__brkval+0x1>
   1d268:	e2 17       	cp	r30, r18
   1d26a:	f3 07       	cpc	r31, r19
   1d26c:	a0 f4       	brcc	.+40     	; 0x1d296 <malloc+0x120>
   1d26e:	2e 1b       	sub	r18, r30
   1d270:	3f 0b       	sbc	r19, r31
   1d272:	28 17       	cp	r18, r24
   1d274:	39 07       	cpc	r19, r25
   1d276:	78 f0       	brcs	.+30     	; 0x1d296 <malloc+0x120>
   1d278:	ac 01       	movw	r20, r24
   1d27a:	4e 5f       	subi	r20, 0xFE	; 254
   1d27c:	5f 4f       	sbci	r21, 0xFF	; 255
   1d27e:	24 17       	cp	r18, r20
   1d280:	35 07       	cpc	r19, r21
   1d282:	48 f0       	brcs	.+18     	; 0x1d296 <malloc+0x120>
   1d284:	4e 0f       	add	r20, r30
   1d286:	5f 1f       	adc	r21, r31
   1d288:	50 93 ad 20 	sts	0x20AD, r21	; 0x8020ad <__brkval+0x1>
   1d28c:	40 93 ac 20 	sts	0x20AC, r20	; 0x8020ac <__brkval>
   1d290:	81 93       	st	Z+, r24
   1d292:	91 93       	st	Z+, r25
   1d294:	02 c0       	rjmp	.+4      	; 0x1d29a <malloc+0x124>
   1d296:	e0 e0       	ldi	r30, 0x00	; 0
   1d298:	f0 e0       	ldi	r31, 0x00	; 0
   1d29a:	cf 01       	movw	r24, r30
   1d29c:	df 91       	pop	r29
   1d29e:	cf 91       	pop	r28
   1d2a0:	1f 91       	pop	r17
   1d2a2:	0f 91       	pop	r16
   1d2a4:	08 95       	ret

0001d2a6 <free>:
   1d2a6:	cf 93       	push	r28
   1d2a8:	df 93       	push	r29
   1d2aa:	00 97       	sbiw	r24, 0x00	; 0
   1d2ac:	09 f4       	brne	.+2      	; 0x1d2b0 <free+0xa>
   1d2ae:	81 c0       	rjmp	.+258    	; 0x1d3b2 <free+0x10c>
   1d2b0:	fc 01       	movw	r30, r24
   1d2b2:	32 97       	sbiw	r30, 0x02	; 2
   1d2b4:	13 82       	std	Z+3, r1	; 0x03
   1d2b6:	12 82       	std	Z+2, r1	; 0x02
   1d2b8:	a0 91 ae 20 	lds	r26, 0x20AE	; 0x8020ae <__flp>
   1d2bc:	b0 91 af 20 	lds	r27, 0x20AF	; 0x8020af <__flp+0x1>
   1d2c0:	10 97       	sbiw	r26, 0x00	; 0
   1d2c2:	81 f4       	brne	.+32     	; 0x1d2e4 <free+0x3e>
   1d2c4:	20 81       	ld	r18, Z
   1d2c6:	31 81       	ldd	r19, Z+1	; 0x01
   1d2c8:	82 0f       	add	r24, r18
   1d2ca:	93 1f       	adc	r25, r19
   1d2cc:	20 91 ac 20 	lds	r18, 0x20AC	; 0x8020ac <__brkval>
   1d2d0:	30 91 ad 20 	lds	r19, 0x20AD	; 0x8020ad <__brkval+0x1>
   1d2d4:	28 17       	cp	r18, r24
   1d2d6:	39 07       	cpc	r19, r25
   1d2d8:	51 f5       	brne	.+84     	; 0x1d32e <free+0x88>
   1d2da:	f0 93 ad 20 	sts	0x20AD, r31	; 0x8020ad <__brkval+0x1>
   1d2de:	e0 93 ac 20 	sts	0x20AC, r30	; 0x8020ac <__brkval>
   1d2e2:	67 c0       	rjmp	.+206    	; 0x1d3b2 <free+0x10c>
   1d2e4:	ed 01       	movw	r28, r26
   1d2e6:	20 e0       	ldi	r18, 0x00	; 0
   1d2e8:	30 e0       	ldi	r19, 0x00	; 0
   1d2ea:	ce 17       	cp	r28, r30
   1d2ec:	df 07       	cpc	r29, r31
   1d2ee:	40 f4       	brcc	.+16     	; 0x1d300 <free+0x5a>
   1d2f0:	4a 81       	ldd	r20, Y+2	; 0x02
   1d2f2:	5b 81       	ldd	r21, Y+3	; 0x03
   1d2f4:	9e 01       	movw	r18, r28
   1d2f6:	41 15       	cp	r20, r1
   1d2f8:	51 05       	cpc	r21, r1
   1d2fa:	f1 f0       	breq	.+60     	; 0x1d338 <free+0x92>
   1d2fc:	ea 01       	movw	r28, r20
   1d2fe:	f5 cf       	rjmp	.-22     	; 0x1d2ea <free+0x44>
   1d300:	d3 83       	std	Z+3, r29	; 0x03
   1d302:	c2 83       	std	Z+2, r28	; 0x02
   1d304:	40 81       	ld	r20, Z
   1d306:	51 81       	ldd	r21, Z+1	; 0x01
   1d308:	84 0f       	add	r24, r20
   1d30a:	95 1f       	adc	r25, r21
   1d30c:	c8 17       	cp	r28, r24
   1d30e:	d9 07       	cpc	r29, r25
   1d310:	59 f4       	brne	.+22     	; 0x1d328 <free+0x82>
   1d312:	88 81       	ld	r24, Y
   1d314:	99 81       	ldd	r25, Y+1	; 0x01
   1d316:	84 0f       	add	r24, r20
   1d318:	95 1f       	adc	r25, r21
   1d31a:	02 96       	adiw	r24, 0x02	; 2
   1d31c:	91 83       	std	Z+1, r25	; 0x01
   1d31e:	80 83       	st	Z, r24
   1d320:	8a 81       	ldd	r24, Y+2	; 0x02
   1d322:	9b 81       	ldd	r25, Y+3	; 0x03
   1d324:	93 83       	std	Z+3, r25	; 0x03
   1d326:	82 83       	std	Z+2, r24	; 0x02
   1d328:	21 15       	cp	r18, r1
   1d32a:	31 05       	cpc	r19, r1
   1d32c:	29 f4       	brne	.+10     	; 0x1d338 <free+0x92>
   1d32e:	f0 93 af 20 	sts	0x20AF, r31	; 0x8020af <__flp+0x1>
   1d332:	e0 93 ae 20 	sts	0x20AE, r30	; 0x8020ae <__flp>
   1d336:	3d c0       	rjmp	.+122    	; 0x1d3b2 <free+0x10c>
   1d338:	e9 01       	movw	r28, r18
   1d33a:	fb 83       	std	Y+3, r31	; 0x03
   1d33c:	ea 83       	std	Y+2, r30	; 0x02
   1d33e:	49 91       	ld	r20, Y+
   1d340:	59 91       	ld	r21, Y+
   1d342:	c4 0f       	add	r28, r20
   1d344:	d5 1f       	adc	r29, r21
   1d346:	ec 17       	cp	r30, r28
   1d348:	fd 07       	cpc	r31, r29
   1d34a:	61 f4       	brne	.+24     	; 0x1d364 <free+0xbe>
   1d34c:	80 81       	ld	r24, Z
   1d34e:	91 81       	ldd	r25, Z+1	; 0x01
   1d350:	84 0f       	add	r24, r20
   1d352:	95 1f       	adc	r25, r21
   1d354:	02 96       	adiw	r24, 0x02	; 2
   1d356:	e9 01       	movw	r28, r18
   1d358:	99 83       	std	Y+1, r25	; 0x01
   1d35a:	88 83       	st	Y, r24
   1d35c:	82 81       	ldd	r24, Z+2	; 0x02
   1d35e:	93 81       	ldd	r25, Z+3	; 0x03
   1d360:	9b 83       	std	Y+3, r25	; 0x03
   1d362:	8a 83       	std	Y+2, r24	; 0x02
   1d364:	e0 e0       	ldi	r30, 0x00	; 0
   1d366:	f0 e0       	ldi	r31, 0x00	; 0
   1d368:	12 96       	adiw	r26, 0x02	; 2
   1d36a:	8d 91       	ld	r24, X+
   1d36c:	9c 91       	ld	r25, X
   1d36e:	13 97       	sbiw	r26, 0x03	; 3
   1d370:	00 97       	sbiw	r24, 0x00	; 0
   1d372:	19 f0       	breq	.+6      	; 0x1d37a <free+0xd4>
   1d374:	fd 01       	movw	r30, r26
   1d376:	dc 01       	movw	r26, r24
   1d378:	f7 cf       	rjmp	.-18     	; 0x1d368 <free+0xc2>
   1d37a:	8d 91       	ld	r24, X+
   1d37c:	9c 91       	ld	r25, X
   1d37e:	11 97       	sbiw	r26, 0x01	; 1
   1d380:	9d 01       	movw	r18, r26
   1d382:	2e 5f       	subi	r18, 0xFE	; 254
   1d384:	3f 4f       	sbci	r19, 0xFF	; 255
   1d386:	82 0f       	add	r24, r18
   1d388:	93 1f       	adc	r25, r19
   1d38a:	20 91 ac 20 	lds	r18, 0x20AC	; 0x8020ac <__brkval>
   1d38e:	30 91 ad 20 	lds	r19, 0x20AD	; 0x8020ad <__brkval+0x1>
   1d392:	28 17       	cp	r18, r24
   1d394:	39 07       	cpc	r19, r25
   1d396:	69 f4       	brne	.+26     	; 0x1d3b2 <free+0x10c>
   1d398:	30 97       	sbiw	r30, 0x00	; 0
   1d39a:	29 f4       	brne	.+10     	; 0x1d3a6 <free+0x100>
   1d39c:	10 92 af 20 	sts	0x20AF, r1	; 0x8020af <__flp+0x1>
   1d3a0:	10 92 ae 20 	sts	0x20AE, r1	; 0x8020ae <__flp>
   1d3a4:	02 c0       	rjmp	.+4      	; 0x1d3aa <free+0x104>
   1d3a6:	13 82       	std	Z+3, r1	; 0x03
   1d3a8:	12 82       	std	Z+2, r1	; 0x02
   1d3aa:	b0 93 ad 20 	sts	0x20AD, r27	; 0x8020ad <__brkval+0x1>
   1d3ae:	a0 93 ac 20 	sts	0x20AC, r26	; 0x8020ac <__brkval>
   1d3b2:	df 91       	pop	r29
   1d3b4:	cf 91       	pop	r28
   1d3b6:	08 95       	ret

0001d3b8 <abort>:
   1d3b8:	81 e0       	ldi	r24, 0x01	; 1
   1d3ba:	90 e0       	ldi	r25, 0x00	; 0
   1d3bc:	f8 94       	cli
   1d3be:	53 c1       	rjmp	.+678    	; 0x1d666 <_exit>

0001d3c0 <__ftoa_engine>:
   1d3c0:	28 30       	cpi	r18, 0x08	; 8
   1d3c2:	08 f0       	brcs	.+2      	; 0x1d3c6 <__ftoa_engine+0x6>
   1d3c4:	27 e0       	ldi	r18, 0x07	; 7
   1d3c6:	33 27       	eor	r19, r19
   1d3c8:	da 01       	movw	r26, r20
   1d3ca:	99 0f       	add	r25, r25
   1d3cc:	31 1d       	adc	r19, r1
   1d3ce:	87 fd       	sbrc	r24, 7
   1d3d0:	91 60       	ori	r25, 0x01	; 1
   1d3d2:	00 96       	adiw	r24, 0x00	; 0
   1d3d4:	61 05       	cpc	r22, r1
   1d3d6:	71 05       	cpc	r23, r1
   1d3d8:	39 f4       	brne	.+14     	; 0x1d3e8 <__ftoa_engine+0x28>
   1d3da:	32 60       	ori	r19, 0x02	; 2
   1d3dc:	2e 5f       	subi	r18, 0xFE	; 254
   1d3de:	3d 93       	st	X+, r19
   1d3e0:	30 e3       	ldi	r19, 0x30	; 48
   1d3e2:	2a 95       	dec	r18
   1d3e4:	e1 f7       	brne	.-8      	; 0x1d3de <__ftoa_engine+0x1e>
   1d3e6:	08 95       	ret
   1d3e8:	9f 3f       	cpi	r25, 0xFF	; 255
   1d3ea:	30 f0       	brcs	.+12     	; 0x1d3f8 <__ftoa_engine+0x38>
   1d3ec:	80 38       	cpi	r24, 0x80	; 128
   1d3ee:	71 05       	cpc	r23, r1
   1d3f0:	61 05       	cpc	r22, r1
   1d3f2:	09 f0       	breq	.+2      	; 0x1d3f6 <__ftoa_engine+0x36>
   1d3f4:	3c 5f       	subi	r19, 0xFC	; 252
   1d3f6:	3c 5f       	subi	r19, 0xFC	; 252
   1d3f8:	3d 93       	st	X+, r19
   1d3fa:	91 30       	cpi	r25, 0x01	; 1
   1d3fc:	08 f0       	brcs	.+2      	; 0x1d400 <__ftoa_engine+0x40>
   1d3fe:	80 68       	ori	r24, 0x80	; 128
   1d400:	91 1d       	adc	r25, r1
   1d402:	df 93       	push	r29
   1d404:	cf 93       	push	r28
   1d406:	1f 93       	push	r17
   1d408:	0f 93       	push	r16
   1d40a:	ff 92       	push	r15
   1d40c:	ef 92       	push	r14
   1d40e:	19 2f       	mov	r17, r25
   1d410:	98 7f       	andi	r25, 0xF8	; 248
   1d412:	96 95       	lsr	r25
   1d414:	e9 2f       	mov	r30, r25
   1d416:	96 95       	lsr	r25
   1d418:	96 95       	lsr	r25
   1d41a:	e9 0f       	add	r30, r25
   1d41c:	ff 27       	eor	r31, r31
   1d41e:	e8 5c       	subi	r30, 0xC8	; 200
   1d420:	fd 4f       	sbci	r31, 0xFD	; 253
   1d422:	99 27       	eor	r25, r25
   1d424:	33 27       	eor	r19, r19
   1d426:	ee 24       	eor	r14, r14
   1d428:	ff 24       	eor	r15, r15
   1d42a:	a7 01       	movw	r20, r14
   1d42c:	e7 01       	movw	r28, r14
   1d42e:	05 90       	lpm	r0, Z+
   1d430:	08 94       	sec
   1d432:	07 94       	ror	r0
   1d434:	28 f4       	brcc	.+10     	; 0x1d440 <__ftoa_engine+0x80>
   1d436:	36 0f       	add	r19, r22
   1d438:	e7 1e       	adc	r14, r23
   1d43a:	f8 1e       	adc	r15, r24
   1d43c:	49 1f       	adc	r20, r25
   1d43e:	51 1d       	adc	r21, r1
   1d440:	66 0f       	add	r22, r22
   1d442:	77 1f       	adc	r23, r23
   1d444:	88 1f       	adc	r24, r24
   1d446:	99 1f       	adc	r25, r25
   1d448:	06 94       	lsr	r0
   1d44a:	a1 f7       	brne	.-24     	; 0x1d434 <__ftoa_engine+0x74>
   1d44c:	05 90       	lpm	r0, Z+
   1d44e:	07 94       	ror	r0
   1d450:	28 f4       	brcc	.+10     	; 0x1d45c <__ftoa_engine+0x9c>
   1d452:	e7 0e       	add	r14, r23
   1d454:	f8 1e       	adc	r15, r24
   1d456:	49 1f       	adc	r20, r25
   1d458:	56 1f       	adc	r21, r22
   1d45a:	c1 1d       	adc	r28, r1
   1d45c:	77 0f       	add	r23, r23
   1d45e:	88 1f       	adc	r24, r24
   1d460:	99 1f       	adc	r25, r25
   1d462:	66 1f       	adc	r22, r22
   1d464:	06 94       	lsr	r0
   1d466:	a1 f7       	brne	.-24     	; 0x1d450 <__ftoa_engine+0x90>
   1d468:	05 90       	lpm	r0, Z+
   1d46a:	07 94       	ror	r0
   1d46c:	28 f4       	brcc	.+10     	; 0x1d478 <__ftoa_engine+0xb8>
   1d46e:	f8 0e       	add	r15, r24
   1d470:	49 1f       	adc	r20, r25
   1d472:	56 1f       	adc	r21, r22
   1d474:	c7 1f       	adc	r28, r23
   1d476:	d1 1d       	adc	r29, r1
   1d478:	88 0f       	add	r24, r24
   1d47a:	99 1f       	adc	r25, r25
   1d47c:	66 1f       	adc	r22, r22
   1d47e:	77 1f       	adc	r23, r23
   1d480:	06 94       	lsr	r0
   1d482:	a1 f7       	brne	.-24     	; 0x1d46c <__ftoa_engine+0xac>
   1d484:	05 90       	lpm	r0, Z+
   1d486:	07 94       	ror	r0
   1d488:	20 f4       	brcc	.+8      	; 0x1d492 <__ftoa_engine+0xd2>
   1d48a:	49 0f       	add	r20, r25
   1d48c:	56 1f       	adc	r21, r22
   1d48e:	c7 1f       	adc	r28, r23
   1d490:	d8 1f       	adc	r29, r24
   1d492:	99 0f       	add	r25, r25
   1d494:	66 1f       	adc	r22, r22
   1d496:	77 1f       	adc	r23, r23
   1d498:	88 1f       	adc	r24, r24
   1d49a:	06 94       	lsr	r0
   1d49c:	a9 f7       	brne	.-22     	; 0x1d488 <__ftoa_engine+0xc8>
   1d49e:	84 91       	lpm	r24, Z
   1d4a0:	10 95       	com	r17
   1d4a2:	17 70       	andi	r17, 0x07	; 7
   1d4a4:	41 f0       	breq	.+16     	; 0x1d4b6 <__ftoa_engine+0xf6>
   1d4a6:	d6 95       	lsr	r29
   1d4a8:	c7 95       	ror	r28
   1d4aa:	57 95       	ror	r21
   1d4ac:	47 95       	ror	r20
   1d4ae:	f7 94       	ror	r15
   1d4b0:	e7 94       	ror	r14
   1d4b2:	1a 95       	dec	r17
   1d4b4:	c1 f7       	brne	.-16     	; 0x1d4a6 <__ftoa_engine+0xe6>
   1d4b6:	ee ed       	ldi	r30, 0xDE	; 222
   1d4b8:	f1 e0       	ldi	r31, 0x01	; 1
   1d4ba:	68 94       	set
   1d4bc:	15 90       	lpm	r1, Z+
   1d4be:	15 91       	lpm	r17, Z+
   1d4c0:	35 91       	lpm	r19, Z+
   1d4c2:	65 91       	lpm	r22, Z+
   1d4c4:	95 91       	lpm	r25, Z+
   1d4c6:	05 90       	lpm	r0, Z+
   1d4c8:	7f e2       	ldi	r23, 0x2F	; 47
   1d4ca:	73 95       	inc	r23
   1d4cc:	e1 18       	sub	r14, r1
   1d4ce:	f1 0a       	sbc	r15, r17
   1d4d0:	43 0b       	sbc	r20, r19
   1d4d2:	56 0b       	sbc	r21, r22
   1d4d4:	c9 0b       	sbc	r28, r25
   1d4d6:	d0 09       	sbc	r29, r0
   1d4d8:	c0 f7       	brcc	.-16     	; 0x1d4ca <__ftoa_engine+0x10a>
   1d4da:	e1 0c       	add	r14, r1
   1d4dc:	f1 1e       	adc	r15, r17
   1d4de:	43 1f       	adc	r20, r19
   1d4e0:	56 1f       	adc	r21, r22
   1d4e2:	c9 1f       	adc	r28, r25
   1d4e4:	d0 1d       	adc	r29, r0
   1d4e6:	7e f4       	brtc	.+30     	; 0x1d506 <__ftoa_engine+0x146>
   1d4e8:	70 33       	cpi	r23, 0x30	; 48
   1d4ea:	11 f4       	brne	.+4      	; 0x1d4f0 <__ftoa_engine+0x130>
   1d4ec:	8a 95       	dec	r24
   1d4ee:	e6 cf       	rjmp	.-52     	; 0x1d4bc <__ftoa_engine+0xfc>
   1d4f0:	e8 94       	clt
   1d4f2:	01 50       	subi	r16, 0x01	; 1
   1d4f4:	30 f0       	brcs	.+12     	; 0x1d502 <__ftoa_engine+0x142>
   1d4f6:	08 0f       	add	r16, r24
   1d4f8:	0a f4       	brpl	.+2      	; 0x1d4fc <__ftoa_engine+0x13c>
   1d4fa:	00 27       	eor	r16, r16
   1d4fc:	02 17       	cp	r16, r18
   1d4fe:	08 f4       	brcc	.+2      	; 0x1d502 <__ftoa_engine+0x142>
   1d500:	20 2f       	mov	r18, r16
   1d502:	23 95       	inc	r18
   1d504:	02 2f       	mov	r16, r18
   1d506:	7a 33       	cpi	r23, 0x3A	; 58
   1d508:	28 f0       	brcs	.+10     	; 0x1d514 <__ftoa_engine+0x154>
   1d50a:	79 e3       	ldi	r23, 0x39	; 57
   1d50c:	7d 93       	st	X+, r23
   1d50e:	2a 95       	dec	r18
   1d510:	e9 f7       	brne	.-6      	; 0x1d50c <__ftoa_engine+0x14c>
   1d512:	10 c0       	rjmp	.+32     	; 0x1d534 <__ftoa_engine+0x174>
   1d514:	7d 93       	st	X+, r23
   1d516:	2a 95       	dec	r18
   1d518:	89 f6       	brne	.-94     	; 0x1d4bc <__ftoa_engine+0xfc>
   1d51a:	06 94       	lsr	r0
   1d51c:	97 95       	ror	r25
   1d51e:	67 95       	ror	r22
   1d520:	37 95       	ror	r19
   1d522:	17 95       	ror	r17
   1d524:	17 94       	ror	r1
   1d526:	e1 18       	sub	r14, r1
   1d528:	f1 0a       	sbc	r15, r17
   1d52a:	43 0b       	sbc	r20, r19
   1d52c:	56 0b       	sbc	r21, r22
   1d52e:	c9 0b       	sbc	r28, r25
   1d530:	d0 09       	sbc	r29, r0
   1d532:	98 f0       	brcs	.+38     	; 0x1d55a <__ftoa_engine+0x19a>
   1d534:	23 95       	inc	r18
   1d536:	7e 91       	ld	r23, -X
   1d538:	73 95       	inc	r23
   1d53a:	7a 33       	cpi	r23, 0x3A	; 58
   1d53c:	08 f0       	brcs	.+2      	; 0x1d540 <__ftoa_engine+0x180>
   1d53e:	70 e3       	ldi	r23, 0x30	; 48
   1d540:	7c 93       	st	X, r23
   1d542:	20 13       	cpse	r18, r16
   1d544:	b8 f7       	brcc	.-18     	; 0x1d534 <__ftoa_engine+0x174>
   1d546:	7e 91       	ld	r23, -X
   1d548:	70 61       	ori	r23, 0x10	; 16
   1d54a:	7d 93       	st	X+, r23
   1d54c:	30 f0       	brcs	.+12     	; 0x1d55a <__ftoa_engine+0x19a>
   1d54e:	83 95       	inc	r24
   1d550:	71 e3       	ldi	r23, 0x31	; 49
   1d552:	7d 93       	st	X+, r23
   1d554:	70 e3       	ldi	r23, 0x30	; 48
   1d556:	2a 95       	dec	r18
   1d558:	e1 f7       	brne	.-8      	; 0x1d552 <__ftoa_engine+0x192>
   1d55a:	11 24       	eor	r1, r1
   1d55c:	ef 90       	pop	r14
   1d55e:	ff 90       	pop	r15
   1d560:	0f 91       	pop	r16
   1d562:	1f 91       	pop	r17
   1d564:	cf 91       	pop	r28
   1d566:	df 91       	pop	r29
   1d568:	99 27       	eor	r25, r25
   1d56a:	87 fd       	sbrc	r24, 7
   1d56c:	90 95       	com	r25
   1d56e:	08 95       	ret

0001d570 <strnlen_P>:
   1d570:	fc 01       	movw	r30, r24
   1d572:	05 90       	lpm	r0, Z+
   1d574:	61 50       	subi	r22, 0x01	; 1
   1d576:	70 40       	sbci	r23, 0x00	; 0
   1d578:	01 10       	cpse	r0, r1
   1d57a:	d8 f7       	brcc	.-10     	; 0x1d572 <strnlen_P+0x2>
   1d57c:	80 95       	com	r24
   1d57e:	90 95       	com	r25
   1d580:	8e 0f       	add	r24, r30
   1d582:	9f 1f       	adc	r25, r31
   1d584:	08 95       	ret

0001d586 <memset>:
   1d586:	dc 01       	movw	r26, r24
   1d588:	01 c0       	rjmp	.+2      	; 0x1d58c <memset+0x6>
   1d58a:	6d 93       	st	X+, r22
   1d58c:	41 50       	subi	r20, 0x01	; 1
   1d58e:	50 40       	sbci	r21, 0x00	; 0
   1d590:	e0 f7       	brcc	.-8      	; 0x1d58a <memset+0x4>
   1d592:	08 95       	ret

0001d594 <strnlen>:
   1d594:	fc 01       	movw	r30, r24
   1d596:	61 50       	subi	r22, 0x01	; 1
   1d598:	70 40       	sbci	r23, 0x00	; 0
   1d59a:	01 90       	ld	r0, Z+
   1d59c:	01 10       	cpse	r0, r1
   1d59e:	d8 f7       	brcc	.-10     	; 0x1d596 <strnlen+0x2>
   1d5a0:	80 95       	com	r24
   1d5a2:	90 95       	com	r25
   1d5a4:	8e 0f       	add	r24, r30
   1d5a6:	9f 1f       	adc	r25, r31
   1d5a8:	08 95       	ret

0001d5aa <__ultoa_invert>:
   1d5aa:	fa 01       	movw	r30, r20
   1d5ac:	aa 27       	eor	r26, r26
   1d5ae:	28 30       	cpi	r18, 0x08	; 8
   1d5b0:	51 f1       	breq	.+84     	; 0x1d606 <__ultoa_invert+0x5c>
   1d5b2:	20 31       	cpi	r18, 0x10	; 16
   1d5b4:	81 f1       	breq	.+96     	; 0x1d616 <__ultoa_invert+0x6c>
   1d5b6:	e8 94       	clt
   1d5b8:	6f 93       	push	r22
   1d5ba:	6e 7f       	andi	r22, 0xFE	; 254
   1d5bc:	6e 5f       	subi	r22, 0xFE	; 254
   1d5be:	7f 4f       	sbci	r23, 0xFF	; 255
   1d5c0:	8f 4f       	sbci	r24, 0xFF	; 255
   1d5c2:	9f 4f       	sbci	r25, 0xFF	; 255
   1d5c4:	af 4f       	sbci	r26, 0xFF	; 255
   1d5c6:	b1 e0       	ldi	r27, 0x01	; 1
   1d5c8:	3e d0       	rcall	.+124    	; 0x1d646 <__ultoa_invert+0x9c>
   1d5ca:	b4 e0       	ldi	r27, 0x04	; 4
   1d5cc:	3c d0       	rcall	.+120    	; 0x1d646 <__ultoa_invert+0x9c>
   1d5ce:	67 0f       	add	r22, r23
   1d5d0:	78 1f       	adc	r23, r24
   1d5d2:	89 1f       	adc	r24, r25
   1d5d4:	9a 1f       	adc	r25, r26
   1d5d6:	a1 1d       	adc	r26, r1
   1d5d8:	68 0f       	add	r22, r24
   1d5da:	79 1f       	adc	r23, r25
   1d5dc:	8a 1f       	adc	r24, r26
   1d5de:	91 1d       	adc	r25, r1
   1d5e0:	a1 1d       	adc	r26, r1
   1d5e2:	6a 0f       	add	r22, r26
   1d5e4:	71 1d       	adc	r23, r1
   1d5e6:	81 1d       	adc	r24, r1
   1d5e8:	91 1d       	adc	r25, r1
   1d5ea:	a1 1d       	adc	r26, r1
   1d5ec:	20 d0       	rcall	.+64     	; 0x1d62e <__ultoa_invert+0x84>
   1d5ee:	09 f4       	brne	.+2      	; 0x1d5f2 <__ultoa_invert+0x48>
   1d5f0:	68 94       	set
   1d5f2:	3f 91       	pop	r19
   1d5f4:	2a e0       	ldi	r18, 0x0A	; 10
   1d5f6:	26 9f       	mul	r18, r22
   1d5f8:	11 24       	eor	r1, r1
   1d5fa:	30 19       	sub	r19, r0
   1d5fc:	30 5d       	subi	r19, 0xD0	; 208
   1d5fe:	31 93       	st	Z+, r19
   1d600:	de f6       	brtc	.-74     	; 0x1d5b8 <__ultoa_invert+0xe>
   1d602:	cf 01       	movw	r24, r30
   1d604:	08 95       	ret
   1d606:	46 2f       	mov	r20, r22
   1d608:	47 70       	andi	r20, 0x07	; 7
   1d60a:	40 5d       	subi	r20, 0xD0	; 208
   1d60c:	41 93       	st	Z+, r20
   1d60e:	b3 e0       	ldi	r27, 0x03	; 3
   1d610:	0f d0       	rcall	.+30     	; 0x1d630 <__ultoa_invert+0x86>
   1d612:	c9 f7       	brne	.-14     	; 0x1d606 <__ultoa_invert+0x5c>
   1d614:	f6 cf       	rjmp	.-20     	; 0x1d602 <__ultoa_invert+0x58>
   1d616:	46 2f       	mov	r20, r22
   1d618:	4f 70       	andi	r20, 0x0F	; 15
   1d61a:	40 5d       	subi	r20, 0xD0	; 208
   1d61c:	4a 33       	cpi	r20, 0x3A	; 58
   1d61e:	18 f0       	brcs	.+6      	; 0x1d626 <__ultoa_invert+0x7c>
   1d620:	49 5d       	subi	r20, 0xD9	; 217
   1d622:	31 fd       	sbrc	r19, 1
   1d624:	40 52       	subi	r20, 0x20	; 32
   1d626:	41 93       	st	Z+, r20
   1d628:	02 d0       	rcall	.+4      	; 0x1d62e <__ultoa_invert+0x84>
   1d62a:	a9 f7       	brne	.-22     	; 0x1d616 <__ultoa_invert+0x6c>
   1d62c:	ea cf       	rjmp	.-44     	; 0x1d602 <__ultoa_invert+0x58>
   1d62e:	b4 e0       	ldi	r27, 0x04	; 4
   1d630:	a6 95       	lsr	r26
   1d632:	97 95       	ror	r25
   1d634:	87 95       	ror	r24
   1d636:	77 95       	ror	r23
   1d638:	67 95       	ror	r22
   1d63a:	ba 95       	dec	r27
   1d63c:	c9 f7       	brne	.-14     	; 0x1d630 <__ultoa_invert+0x86>
   1d63e:	00 97       	sbiw	r24, 0x00	; 0
   1d640:	61 05       	cpc	r22, r1
   1d642:	71 05       	cpc	r23, r1
   1d644:	08 95       	ret
   1d646:	9b 01       	movw	r18, r22
   1d648:	ac 01       	movw	r20, r24
   1d64a:	0a 2e       	mov	r0, r26
   1d64c:	06 94       	lsr	r0
   1d64e:	57 95       	ror	r21
   1d650:	47 95       	ror	r20
   1d652:	37 95       	ror	r19
   1d654:	27 95       	ror	r18
   1d656:	ba 95       	dec	r27
   1d658:	c9 f7       	brne	.-14     	; 0x1d64c <__ultoa_invert+0xa2>
   1d65a:	62 0f       	add	r22, r18
   1d65c:	73 1f       	adc	r23, r19
   1d65e:	84 1f       	adc	r24, r20
   1d660:	95 1f       	adc	r25, r21
   1d662:	a0 1d       	adc	r26, r0
   1d664:	08 95       	ret

0001d666 <_exit>:
   1d666:	f8 94       	cli

0001d668 <__stop_program>:
   1d668:	ff cf       	rjmp	.-2      	; 0x1d668 <__stop_program>
