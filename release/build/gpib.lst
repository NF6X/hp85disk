
gpib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000165a  00800100  0001ce14  0001cea8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0001ce14  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000a62  0080175a  0080175a  0001e502  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0001e502  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001e514  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000016d0  00000000  00000000  0001e554  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000287f3  00000000  00000000  0001fc24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000060cc  00000000  00000000  00048417  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00012145  00000000  00000000  0004e4e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000050d0  00000000  00000000  00060628  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004832  00000000  00000000  000656f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00023eb0  00000000  00000000  00069f2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001700  00000000  00000000  0008ddda  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3b 24 	jmp	0x4876	; 0x4876 <__ctors_end>
       4:	0c 94 5a 24 	jmp	0x48b4	; 0x48b4 <__bad_interrupt>
       8:	0c 94 5a 24 	jmp	0x48b4	; 0x48b4 <__bad_interrupt>
       c:	0c 94 5a 24 	jmp	0x48b4	; 0x48b4 <__bad_interrupt>
      10:	0c 94 5a 24 	jmp	0x48b4	; 0x48b4 <__bad_interrupt>
      14:	0c 94 5a 24 	jmp	0x48b4	; 0x48b4 <__bad_interrupt>
      18:	0c 94 5a 24 	jmp	0x48b4	; 0x48b4 <__bad_interrupt>
      1c:	0c 94 5a 24 	jmp	0x48b4	; 0x48b4 <__bad_interrupt>
      20:	0c 94 5a 24 	jmp	0x48b4	; 0x48b4 <__bad_interrupt>
      24:	0c 94 5a 24 	jmp	0x48b4	; 0x48b4 <__bad_interrupt>
      28:	0c 94 5a 24 	jmp	0x48b4	; 0x48b4 <__bad_interrupt>
      2c:	0c 94 5a 24 	jmp	0x48b4	; 0x48b4 <__bad_interrupt>
      30:	0c 94 5a 24 	jmp	0x48b4	; 0x48b4 <__bad_interrupt>
      34:	0c 94 e9 31 	jmp	0x63d2	; 0x63d2 <__vector_13>
      38:	0c 94 5a 24 	jmp	0x48b4	; 0x48b4 <__bad_interrupt>
      3c:	0c 94 5a 24 	jmp	0x48b4	; 0x48b4 <__bad_interrupt>
      40:	0c 94 5a 24 	jmp	0x48b4	; 0x48b4 <__bad_interrupt>
      44:	0c 94 5a 24 	jmp	0x48b4	; 0x48b4 <__bad_interrupt>
      48:	0c 94 5a 24 	jmp	0x48b4	; 0x48b4 <__bad_interrupt>
      4c:	0c 94 5a 24 	jmp	0x48b4	; 0x48b4 <__bad_interrupt>
      50:	0c 94 0a 28 	jmp	0x5014	; 0x5014 <__vector_20>
      54:	0c 94 5a 24 	jmp	0x48b4	; 0x48b4 <__bad_interrupt>
      58:	0c 94 5a 24 	jmp	0x48b4	; 0x48b4 <__bad_interrupt>
      5c:	0c 94 5a 24 	jmp	0x48b4	; 0x48b4 <__bad_interrupt>
      60:	0c 94 5a 24 	jmp	0x48b4	; 0x48b4 <__bad_interrupt>
      64:	0c 94 5a 24 	jmp	0x48b4	; 0x48b4 <__bad_interrupt>
      68:	0c 94 0c 2c 	jmp	0x5818	; 0x5818 <__vector_26>
      6c:	0c 94 5a 24 	jmp	0x48b4	; 0x48b4 <__bad_interrupt>
      70:	0c 94 5a 24 	jmp	0x48b4	; 0x48b4 <__bad_interrupt>
      74:	0c 94 5a 24 	jmp	0x48b4	; 0x48b4 <__bad_interrupt>
      78:	0c 94 5a 24 	jmp	0x48b4	; 0x48b4 <__bad_interrupt>
      7c:	0c 94 5a 24 	jmp	0x48b4	; 0x48b4 <__bad_interrupt>
      80:	0c 94 5a 24 	jmp	0x48b4	; 0x48b4 <__bad_interrupt>
      84:	0c 94 5a 24 	jmp	0x48b4	; 0x48b4 <__bad_interrupt>
      88:	0c 94 5a 24 	jmp	0x48b4	; 0x48b4 <__bad_interrupt>
      8c:	19 42       	sbci	r17, 0x29	; 41
      8e:	69 43       	sbci	r22, 0x39	; 57
      90:	51 42       	sbci	r21, 0x21	; 33
      92:	3c 43       	sbci	r19, 0x3C	; 60
      94:	3c 43       	sbci	r19, 0x3C	; 60
      96:	69 43       	sbci	r22, 0x39	; 57
      98:	69 43       	sbci	r22, 0x39	; 57
      9a:	69 43       	sbci	r22, 0x39	; 57
      9c:	69 43       	sbci	r22, 0x39	; 57
      9e:	69 43       	sbci	r22, 0x39	; 57
      a0:	69 43       	sbci	r22, 0x39	; 57
      a2:	69 43       	sbci	r22, 0x39	; 57
      a4:	69 43       	sbci	r22, 0x39	; 57
      a6:	19 42       	sbci	r17, 0x29	; 41
      a8:	16 42       	sbci	r17, 0x26	; 38
      aa:	69 43       	sbci	r22, 0x39	; 57
      ac:	69 43       	sbci	r22, 0x39	; 57
      ae:	5f 43       	sbci	r21, 0x3F	; 63
      b0:	69 43       	sbci	r22, 0x39	; 57
      b2:	4b 42       	sbci	r20, 0x2B	; 43
      b4:	69 43       	sbci	r22, 0x39	; 57
      b6:	69 43       	sbci	r22, 0x39	; 57
      b8:	19 42       	sbci	r17, 0x29	; 41
      ba:	69 43       	sbci	r22, 0x39	; 57
      bc:	69 43       	sbci	r22, 0x39	; 57
      be:	69 43       	sbci	r22, 0x39	; 57
      c0:	69 43       	sbci	r22, 0x39	; 57
      c2:	69 43       	sbci	r22, 0x39	; 57
      c4:	69 43       	sbci	r22, 0x39	; 57
      c6:	69 43       	sbci	r22, 0x39	; 57
      c8:	69 43       	sbci	r22, 0x39	; 57
      ca:	69 43       	sbci	r22, 0x39	; 57
      cc:	19 42       	sbci	r17, 0x29	; 41
      ce:	64 43       	sbci	r22, 0x34	; 52
      d0:	51 42       	sbci	r21, 0x21	; 33
      d2:	3c 43       	sbci	r19, 0x3C	; 60
      d4:	3c 43       	sbci	r19, 0x3C	; 60
      d6:	69 43       	sbci	r22, 0x39	; 57
      d8:	69 43       	sbci	r22, 0x39	; 57
      da:	69 43       	sbci	r22, 0x39	; 57
      dc:	69 43       	sbci	r22, 0x39	; 57
      de:	69 43       	sbci	r22, 0x39	; 57
      e0:	69 43       	sbci	r22, 0x39	; 57
      e2:	69 43       	sbci	r22, 0x39	; 57
      e4:	69 43       	sbci	r22, 0x39	; 57
      e6:	19 42       	sbci	r17, 0x29	; 41
      e8:	16 42       	sbci	r17, 0x26	; 38
      ea:	69 43       	sbci	r22, 0x39	; 57
      ec:	69 43       	sbci	r22, 0x39	; 57
      ee:	5a 43       	sbci	r21, 0x3A	; 58
      f0:	69 43       	sbci	r22, 0x39	; 57
      f2:	4b 42       	sbci	r20, 0x2B	; 43
      f4:	69 43       	sbci	r22, 0x39	; 57
      f6:	69 43       	sbci	r22, 0x39	; 57
      f8:	19 42       	sbci	r17, 0x29	; 41
      fa:	8e 43       	sbci	r24, 0x3E	; 62
      fc:	cf 44       	sbci	r28, 0x4F	; 79
      fe:	81 43       	sbci	r24, 0x31	; 49
     100:	e9 43       	sbci	r30, 0x39	; 57
     102:	cd 43       	sbci	r28, 0x3D	; 61
     104:	cf 44       	sbci	r28, 0x4F	; 79
     106:	cf 44       	sbci	r28, 0x4F	; 79
     108:	cf 44       	sbci	r28, 0x4F	; 79
     10a:	cf 44       	sbci	r28, 0x4F	; 79
     10c:	cf 44       	sbci	r28, 0x4F	; 79
     10e:	cf 44       	sbci	r28, 0x4F	; 79
     110:	cf 44       	sbci	r28, 0x4F	; 79
     112:	cf 44       	sbci	r28, 0x4F	; 79
     114:	9b 43       	sbci	r25, 0x3B	; 59
     116:	af 43       	sbci	r26, 0x3F	; 63
     118:	cf 44       	sbci	r28, 0x4F	; 79
     11a:	cf 44       	sbci	r28, 0x4F	; 79
     11c:	75 44       	sbci	r23, 0x45	; 69
     11e:	cf 44       	sbci	r28, 0x4F	; 79
     120:	7d 43       	sbci	r23, 0x3D	; 61
     122:	cf 44       	sbci	r28, 0x4F	; 79
     124:	cf 44       	sbci	r28, 0x4F	; 79
     126:	af 43       	sbci	r26, 0x3F	; 63
     128:	cf 44       	sbci	r28, 0x4F	; 79
     12a:	cf 44       	sbci	r28, 0x4F	; 79
     12c:	cf 44       	sbci	r28, 0x4F	; 79
     12e:	cf 44       	sbci	r28, 0x4F	; 79
     130:	cf 44       	sbci	r28, 0x4F	; 79
     132:	cf 44       	sbci	r28, 0x4F	; 79
     134:	cf 44       	sbci	r28, 0x4F	; 79
     136:	cf 44       	sbci	r28, 0x4F	; 79
     138:	cf 44       	sbci	r28, 0x4F	; 79
     13a:	8e 43       	sbci	r24, 0x3E	; 62
     13c:	1d 44       	sbci	r17, 0x4D	; 77
     13e:	81 43       	sbci	r24, 0x31	; 49
     140:	e9 43       	sbci	r30, 0x39	; 57
     142:	cd 43       	sbci	r28, 0x3D	; 61
     144:	cf 44       	sbci	r28, 0x4F	; 79
     146:	cf 44       	sbci	r28, 0x4F	; 79
     148:	cf 44       	sbci	r28, 0x4F	; 79
     14a:	cf 44       	sbci	r28, 0x4F	; 79
     14c:	cf 44       	sbci	r28, 0x4F	; 79
     14e:	cf 44       	sbci	r28, 0x4F	; 79
     150:	cf 44       	sbci	r28, 0x4F	; 79
     152:	cf 44       	sbci	r28, 0x4F	; 79
     154:	9b 43       	sbci	r25, 0x3B	; 59
     156:	af 43       	sbci	r26, 0x3F	; 63
     158:	cf 44       	sbci	r28, 0x4F	; 79
     15a:	cf 44       	sbci	r28, 0x4F	; 79
     15c:	1d 44       	sbci	r17, 0x4D	; 77
     15e:	cf 44       	sbci	r28, 0x4F	; 79
     160:	7d 43       	sbci	r23, 0x3D	; 61
     162:	cf 44       	sbci	r28, 0x4F	; 79
     164:	cf 44       	sbci	r28, 0x4F	; 79
     166:	af 43       	sbci	r26, 0x3F	; 63
     168:	ae 67       	ori	r26, 0x7E	; 126
     16a:	b8 67       	ori	r27, 0x78	; 120
     16c:	c0 67       	ori	r28, 0x70	; 112
     16e:	c3 67       	ori	r28, 0x73	; 115
     170:	c6 67       	ori	r28, 0x76	; 118
     172:	c9 67       	ori	r28, 0x79	; 121
     174:	cc 67       	ori	r28, 0x7C	; 124
     176:	cf 67       	ori	r28, 0x7F	; 127
     178:	d2 67       	ori	r29, 0x72	; 114
     17a:	a5 85       	ldd	r26, Z+13	; 0x0d
     17c:	ad 85       	ldd	r26, Y+13	; 0x0d
     17e:	de 85       	ldd	r29, Y+14	; 0x0e
     180:	f7 85       	ldd	r31, Z+15	; 0x0f
     182:	13 86       	std	Z+11, r1	; 0x0b
     184:	20 86       	std	Z+8, r2	; 0x08
     186:	3c 86       	std	Y+12, r3	; 0x0c
     188:	66 86       	std	Z+14, r6	; 0x0e
     18a:	49 86       	std	Y+9, r4	; 0x09
     18c:	64 9a       	sbi	0x0c, 4	; 12
     18e:	36 9b       	sbis	0x06, 6	; 6
     190:	72 9b       	sbis	0x0e, 2	; 14
     192:	a1 9b       	sbis	0x14, 1	; 20
     194:	b1 9b       	sbis	0x16, 1	; 22
     196:	ce 9b       	sbis	0x19, 6	; 25
     198:	2e 9c       	mul	r2, r14
     19a:	3d 9d       	mul	r19, r13
     19c:	3d 9d       	mul	r19, r13
     19e:	3d 9d       	mul	r19, r13
     1a0:	62 9c       	mul	r6, r2
     1a2:	8e 9c       	mul	r8, r14
     1a4:	dc 9c       	mul	r13, r12
     1a6:	f8 9c       	mul	r15, r8
     1a8:	01 9b       	sbis	0x00, 1	; 0
     1aa:	14 9b       	sbis	0x02, 4	; 2
     1ac:	05 ba       	out	0x15, r0	; 21
     1ae:	c4 b9       	out	0x04, r28	; 4
     1b0:	c4 b9       	out	0x04, r28	; 4
     1b2:	c4 b9       	out	0x04, r28	; 4
     1b4:	c4 b9       	out	0x04, r28	; 4
     1b6:	88 b9       	out	0x08, r24	; 8
     1b8:	8f b9       	out	0x0f, r24	; 15
     1ba:	96 b9       	out	0x06, r25	; 6
     1bc:	a6 b9       	out	0x06, r26	; 6
     1be:	b4 b9       	out	0x04, r27	; 4
     1c0:	ad b9       	out	0x0d, r26	; 13

000001c2 <__trampolines_end>:
     1c2:	63 73       	andi	r22, 0x33	; 51
     1c4:	5f 64       	ori	r21, 0x4F	; 79
     1c6:	69 73       	andi	r22, 0x39	; 57
     1c8:	61 62       	ori	r22, 0x21	; 33
     1ca:	6c 65       	ori	r22, 0x5C	; 92
     1cc:	20 77       	andi	r18, 0x70	; 112
     1ce:	61 73       	andi	r22, 0x31	; 49
     1d0:	3a 20       	and	r3, r10
     1d2:	25 64       	ori	r18, 0x45	; 69
     1d4:	2c 20       	and	r2, r12
     1d6:	77 61       	ori	r23, 0x17	; 23
     1d8:	6e 74       	andi	r22, 0x4E	; 78
     1da:	3a 20       	and	r3, r10
     1dc:	25 64       	ori	r18, 0x45	; 69
     1de:	0a 00       	.word	0x000a	; ????

000001e0 <__c.3617>:
     1e0:	63 73 5f 65 6e 61 62 6c 65 20 77 61 73 3a 20 25     cs_enable was: %
     1f0:	64 2c 20 77 61 6e 74 3a 20 25 64 0a 00              d, want: %d..

000001fd <__c.3648>:
     1fd:	73 61 66 65 66 72 65 65 3a 20 46 52 45 45 20 45     safefree: FREE E
     20d:	52 52 4f 52 20 28 25 75 29 2c 20 74 6f 70 3a 28     RROR (%u), top:(
     21d:	25 75 29 0a 00                                      %u)..

00000222 <__c.3639>:
     222:	73 61 66 65 6d 61 6c 6c 6f 63 28 25 64 29 20 66     safemalloc(%d) f
     232:	61 69 6c 65 64 21 0a 00                             ailed!..

0000023a <__c.3633>:
     23a:	73 61 66 65 63 61 6c 6c 6f 63 28 25 64 2c 25 64     safecalloc(%d,%d
     24a:	29 20 66 61 69 6c 65 64 21 0a 00                    ) failed!..

00000255 <__c.3618>:
     255:	20 20 5f 5f 62 72 6b 76 61 6c 3a 20 20 20 20 25       __brkval:    %
     265:	35 75 0a 00                                         5u..

00000269 <__c.3616>:
     269:	20 20 4d 61 6c 6c 6f 63 20 73 74 61 72 74 20 25       Malloc start %
     279:	35 75 20 20 65 6e 64 3a 20 25 35 75 0a 00           5u  end: %5u..

00000287 <__c.3614>:
     287:	20 20 48 65 61 70 3a 20 73 74 61 72 74 3a 20 25       Heap: start: %
     297:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000002a5 <__c.3612>:
     2a5:	20 20 44 61 74 61 20 20 73 74 61 72 74 3a 20 25       Data  start: %
     2b5:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000002c3 <__c.3610>:
     2c3:	20 20 42 53 53 20 20 20 73 74 61 72 74 3a 20 25       BSS   start: %
     2d3:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000002e1 <__c.3608>:
     2e1:	20 20 53 74 61 63 6b 20 46 72 65 65 3a 20 20 25       Stack Free:  %
     2f1:	75 0a 00                                            u..

000002f4 <__c.3606>:
     2f4:	20 20 53 74 61 63 6b 20 54 6f 70 3a 20 20 20 25       Stack Top:   %
     304:	75 0a 00                                            u..

00000307 <__c.3604>:
     307:	46 72 65 65 20 52 61 6d 3a 25 75 0a 00              Free Ram:%u..

00000314 <__c.3602>:
     314:	53 50 49 30 5f 4d 6f 64 65 3a 20 49 6e 76 61 6c     SPI0_Mode: Inval
     324:	69 64 20 6d 6f 64 65 28 25 64 29 0a 00              id mode(%d)..

00000331 <__c.3721>:
     331:	0a 00                                               ..

00000333 <__c.3719>:
     333:	74 61 73 6b 3a 20 25 64 0a 00                       task: %d..

0000033d <__c.3717>:
     33d:	69 32 63 5f 74 61 73 6b 2e 65 72 72 6f 72 3a 20     i2c_task.error: 
     34d:	25 64 0a 00                                         %d..

00000351 <__c.3715>:
     351:	69 32 63 5f 74 61 73 6b 2e 64 6f 6e 65 3a 20 25     i2c_task.done: %
     361:	64 0a 00                                            d..

00000364 <__c.3710>:
     364:	0a 00                                               ..

00000366 <__c.3708>:
     366:	20 20 54 57 5f 4d 54 5f 44 41 54 41 5f 4e 41 43       TW_MT_DATA_NAC
     376:	4b 0a 00                                            K..

00000379 <__c.3706>:
     379:	20 20 54 57 5f 4d 54 5f 53 4c 41 5f 4e 41 43 4b       TW_MT_SLA_NACK
     389:	0a 00                                               ..

0000038b <__c.3704>:
     38b:	20 20 54 57 5f 4d 52 5f 53 4c 41 5f 4e 41 43 4b       TW_MR_SLA_NACK
     39b:	0a 00                                               ..

0000039d <__c.3702>:
     39d:	20 20 4f 50 5f 45 52 52 4f 52 0a 00                   OP_ERROR..

000003a9 <__c.3700>:
     3a9:	20 20 4f 50 5f 4c 45 4e 0a 00                         OP_LEN..

000003b3 <__c.3698>:
     3b3:	20 20 4f 50 5f 54 49 4d 45 4f 55 54 0a 00             OP_TIMEOUT..

000003c1 <__c.3696>:
     3c1:	20 20 25 73 0a 00                                     %s..

000003c7 <__c.3646>:
     3c7:	69 32 63 5f 74 69 6d 65 72 20 69 6e 69 74 20 66     i2c_timer init f
     3d7:	61 69 6c 65 64 0a 00                                ailed..

000003de <__c.3640>:
     3de:	69 32 63 5f 69 6e 69 74 20 70 72 65 73 63 61 6c     i2c_init prescal
     3ee:	65 20 6f 76 65 72 66 6c 6f 77 0a 00                 e overflow..

000003fa <__c.3597>:
     3fa:	49 32 43 20 6f 70 5b 25 64 5d 2d 3e 6c 65 6e 20     I2C op[%d]->len 
     40a:	3d 3d 20 30 0a 00                                   == 0..

00000410 <__c.3595>:
     410:	49 32 43 20 6f 70 5b 25 64 5d 2d 3e 62 75 66 20     I2C op[%d]->buf 
     420:	3d 3d 20 4e 55 4c 4c 0a 00                          == NULL..

00000429 <__c.3593>:
     429:	49 32 43 20 6f 70 5b 49 4e 44 45 58 20 25 64 20     I2C op[INDEX %d 
     439:	3e 3d 20 25 64 5d 0a 00                             >= %d]..

00000441 <__c.3643>:
     441:	72 74 63 5f 69 6e 69 74 20 20 77 72 69 74 65 20     rtc_init  write 
     451:	65 70 6f 63 68 20 66 61 69 6c 65 64 0a 00           epoch failed..

0000045f <__c.3633>:
     45f:	72 74 63 5f 72 75 6e 20 77 72 69 74 65 20 65 72     rtc_run write er
     46f:	72 6f 72 0a 00                                      ror..

00000474 <__c.3631>:
     474:	72 74 63 5f 72 75 6e 20 72 65 61 64 20 65 72 72     rtc_run read err
     484:	6f 72 0a 00                                         or..

00000488 <__c.3625>:
     488:	72 74 63 5f 72 65 61 64 20 65 72 72 6f 72 0a 00     rtc_read error..

00000498 <__c.3619>:
     498:	72 74 63 5f 77 72 69 74 65 20 65 72 72 6f 72 0a     rtc_write error.
	...

000004a9 <__c.3611>:
     4a9:	69 32 63 5f 72 74 63 5f 72 65 61 64 20 64 61 74     i2c_rtc_read dat
     4b9:	61 20 65 72 72 6f 72 0a 00                          a error..

000004c2 <__c.3609>:
     4c2:	69 32 63 5f 72 74 63 5f 72 65 61 64 20 61 64 64     i2c_rtc_read add
     4d2:	72 65 73 73 20 65 72 72 6f 72 0a 00                 ress error..

000004de <__c.3601>:
     4de:	69 32 63 5f 72 74 63 5f 77 72 69 74 65 20 64 61     i2c_rtc_write da
     4ee:	74 61 20 65 72 72 6f 72 0a 00                       ta error..

000004f8 <__c.3629>:
     4f8:	25 73 20 65 78 70 65 63 74 65 64 20 25 64 20 61     %s expected %d a
     508:	72 67 75 6d 65 6e 74 73 20 6f 6e 6c 79 20 67 6f     rguments only go
     518:	74 20 25 64 0a 00                                   t %d..

0000051e <__c.3586>:
     51e:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     52e:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

0000053e <__c.3665>:
     53e:	54 69 6d 65 72 73 20 65 6e 61 62 6c 65 64 0a 00     Timers enabled..

0000054e <__c.3663>:
     54e:	43 6c 6f 63 6b 20 49 6e 73 74 61 6c 6c 65 64 0a     Clock Installed.
	...

0000055f <__c.3661>:
     55f:	43 6c 6f 63 6b 20 74 61 73 6b 20 69 6e 69 74 20     Clock task init 
     56f:	66 61 69 6c 65 64 0a 00                             failed..

00000577 <__c.3659>:
     577:	43 6c 6f 63 6b 20 49 6e 69 74 0a 00                 Clock Init..

00000583 <__c.3657>:
     583:	54 69 6d 65 72 73 20 63 6f 6e 66 69 67 75 72 65     Timers configure
     593:	64 0a 00                                            d..

00000596 <__c.3655>:
     596:	54 69 6d 65 72 73 20 69 6e 69 74 20 63 61 6c 6c     Timers init call
     5a6:	65 64 0a 00                                         ed..

000005aa <__c.3635>:
     5aa:	5b 54 69 6d 65 3a 25 73 5d 0a 00                    [Time:%s]..

000005b5 <__c.3633>:
     5b5:	5b 25 73 20 54 69 6d 65 3a 25 73 5d 0a 00           [%s Time:%s]..

000005c3 <__c.3619>:
     5c3:	25 6c 64 2e 25 30 39 6c 64 00                       %ld.%09ld.

000005cd <__c.3599>:
     5cd:	73 65 74 5f 74 69 6d 65 72 73 3a 20 4e 6f 20 6d     set_timers: No m
     5dd:	6f 72 65 20 74 69 6d 65 72 73 21 0a 00              ore timers!..

000005ea <__c.3874>:
     5ea:	63 6c 6b 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     clk time:    %s.
	...

000005fb <__c.3872>:
     5fb:	63 6c 6b 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     clk seconds: %lu
     60b:	0a 00                                               ..

0000060d <__c.3870>:
     60d:	52 54 43 20 72 65 61 64 20 66 61 69 6c 65 64 0a     RTC read failed.
	...

0000061e <__c.3868>:
     61e:	72 74 63 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     rtc time:    %s.
	...

0000062f <__c.3866>:
     62f:	72 74 63 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     rtc seconds: %lu
     63f:	0a 00                                               ..

00000641 <__c.3859>:
     641:	75 73 65 20 73 65 74 64 61 74 65 20 63 6f 6d 6d     use setdate comm
     651:	61 6e 64 20 74 6f 20 63 68 61 6e 67 65 20 74 69     and to change ti
     661:	6d 65 0a 00                                         me..

00000665 <__c.3857>:
     665:	72 74 63 20 72 65 61 64 20 65 72 72 6f 72 61 66     rtc read erroraf
     675:	74 65 72 20 69 6e 69 74 0a 00                       ter init..

0000067f <__c.3855>:
     67f:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     68f:	61 69 6c 65 64 0a 00                                ailed..

00000696 <__c.3853>:
     696:	61 74 74 65 6d 70 74 69 6e 67 20 72 74 63 20 69     attempting rtc i
     6a6:	6e 69 74 0a 00                                      nit..

000006ab <__c.3851>:
     6ab:	72 74 63 20 75 6e 69 6e 69 74 69 6c 69 7a 65 64     rtc uninitilized
     6bb:	0a 00                                               ..

000006bd <__c.3805>:
     6bd:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     6cd:	61 69 6c 65 64 0a 00                                ailed..

000006d4 <__c.3803>:
     6d4:	69 6e 76 61 6c 69 64 20 6d 69 6e 3a 20 25 64 0a     invalid min: %d.
	...

000006e5 <__c.3801>:
     6e5:	69 6e 76 61 6c 69 64 20 68 6f 75 72 3a 20 25 64     invalid hour: %d
     6f5:	0a 00                                               ..

000006f7 <__c.3799>:
     6f7:	69 6e 76 61 6c 69 64 20 64 61 79 3a 20 25 64 0a     invalid day: %d.
	...

00000708 <__c.3797>:
     708:	69 6e 76 61 6c 69 64 20 6d 6f 6e 3a 20 25 64 0a     invalid mon: %d.
	...

00000719 <__c.3795>:
     719:	69 6e 76 61 6c 69 64 20 79 65 61 72 3a 20 25 64     invalid year: %d
     729:	0a 00                                               ..

0000072b <__c.3774>:
     72b:	45 6e 74 65 72 20 64 61 74 65 20 59 59 59 59 20     Enter date YYYY 
     73b:	4d 4d 20 44 44 20 48 48 3a 4d 4d 3a 53 53 20 3e     MM DD HH:MM:SS >
	...

0000074c <__c.3649>:
     74c:	25 73 20 25 73 20 25 32 64 20 25 30 32 64 3a 25     %s %s %2d %02d:%
     75c:	30 32 64 3a 25 30 32 64 20 25 34 64 00              02d:%02d %4d.

00000769 <__c.3617>:
     769:	73 65 6c 65 63 74 20 66 61 69 6c 65 64 21 0a 00     select failed!..

00000779 <__c.3650>:
     779:	45 4e 44 20 4d 4d 43 20 49 4e 49 54 0a 00           END MMC INIT..

00000787 <__c.3648>:
     787:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 3a 20     MMC Block Size: 
     797:	25 6c 64 0a 00                                      %ld..

0000079c <__c.3646>:
     79c:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 20 2d     MMC Block Size -
     7ac:	20 72 65 61 64 20 66 61 69 6c 65 64 0a 00            read failed..

000007ba <__c.3643>:
     7ba:	2c 20 43 6f 64 65 20 70 61 67 65 3a 20 25 75 0a     , Code page: %u.
	...

000007cb <__c.3641>:
     7cb:	4c 46 4e 20 45 6e 61 62 6c 65 64 00                 LFN Enabled.

000007d7 <__c.3639>:
     7d7:	4d 4d 43 20 43 61 72 64 20 49 6e 73 65 72 74 65     MMC Card Inserte
     7e7:	64 0a 00                                            d..

000007ea <__c.3637>:
     7ea:	2a 2a 2a 20 4d 4d 43 20 43 61 72 64 20 4e 4f 54     *** MMC Card NOT
     7fa:	20 49 6e 73 65 72 74 65 64 21 20 2a 2a 2a 0a 00      Inserted! ***..

0000080a <__c.3635>:
     80a:	53 54 41 52 54 20 4d 4d 43 20 49 4e 49 54 0a 00     START MMC INIT..

0000081a <__c.3622>:
     81a:	4d 4d 43 20 54 49 4d 45 4f 55 54 0a 00              MMC TIMEOUT..

00000827 <__c.3594>:
     827:	4d 4d 43 20 43 6c 6f 63 6b 20 74 61 73 6b 20 69     MMC Clock task i
     837:	6e 69 74 20 66 61 69 6c 65 64 0a 00                 nit failed..

00000843 <__c.3672>:
     843:	0a 00                                               ..

00000845 <__c.3670>:
     845:	25 73 20 25 75 2f 25 30 32 75 2f 25 30 32 75 20     %s %u/%02u/%02u 
     855:	25 30 32 75 3a 25 30 32 75 20 25 39 6c 75 20 25     %02u:%02u %9lu %
     865:	73 00                                               s.

00000867 <__c.3668>:
     867:	66 61 74 66 73 5f 66 69 6c 69 6e 66 6f 5f 6c 69     fatfs_filinfo_li
     877:	73 74 3a 20 65 6d 70 74 79 0a 00                    st: empty..

00000882 <__c.3662>:
     882:	25 75 20 66 69 6c 65 73 2c 20 25 6c 75 20 62 79     %u files, %lu by
     892:	74 65 73 2e 0a 25 75 20 66 6f 6c 64 65 72 73 2e     tes..%u folders.
     8a2:	0a 25 6c 75 20 4b 42 20 74 6f 74 61 6c 20 64 69     .%lu KB total di
     8b2:	73 6b 20 73 70 61 63 65 2e 0a 25 6c 75 20 4b 42     sk space..%lu KB
     8c2:	20 61 76 61 69 6c 61 62 6c 65 2e 0a 00               available...

000008cf <__c.3660>:
     8cf:	66 61 74 66 73 5f 73 74 61 74 75 73 20 66 61 74     fatfs_status fat
     8df:	66 73 5f 73 63 61 6e 5f 66 69 6c 65 73 20 66 61     fs_scan_files fa
     8ef:	69 6c 65 64 0a 00                                   iled..

000008f5 <__c.3658>:
     8f5:	56 6f 6c 75 6d 65 20 53 2f 4e 20 20 20 20 20 20     Volume S/N      
     905:	20 20 20 20 20 20 20 20 3d 20 25 30 34 58 2d 25             = %04X-%
     915:	30 34 58 0a 00                                      04X..

0000091a <__c.3656>:
     91a:	56 6f 6c 75 6d 65 20 6e 61 6d 65 20 20 20 20 20     Volume name     
     92a:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

00000938 <__c.3654>:
     938:	66 61 74 66 73 5f 73 74 61 74 75 73 20 66 5f 67     fatfs_status f_g
     948:	65 74 6c 61 62 65 6c 20 66 61 69 6c 65 64 0a 00     etlabel failed..

00000958 <__c.3652>:
     958:	44 61 74 61 20 73 74 61 72 74 20 28 6c 62 61 29     Data start (lba)
     968:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000977 <__c.3650>:
     977:	44 49 52 20 73 74 61 72 74 20 28 6c 62 61 2c 63     DIR start (lba,c
     987:	6c 75 73 74 6f 72 29 20 3d 20 25 6c 75 0a 00        lustor) = %lu..

00000996 <__c.3648>:
     996:	46 41 54 20 73 74 61 72 74 20 28 6c 62 61 29 20     FAT start (lba) 
     9a6:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

000009b5 <__c.3646>:
     9b5:	4e 75 6d 62 65 72 20 6f 66 20 63 6c 75 73 74 65     Number of cluste
     9c5:	72 73 20 20 20 20 20 20 3d 20 25 6c 75 0a 00        rs      = %lu..

000009d4 <__c.3644>:
     9d4:	53 65 63 74 6f 72 73 2f 46 41 54 20 20 20 20 20     Sectors/FAT     
     9e4:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

000009f3 <__c.3642>:
     9f3:	52 6f 6f 74 20 44 49 52 20 65 6e 74 72 69 65 73     Root DIR entries
     a03:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

00000a11 <__c.3640>:
     a11:	4e 75 6d 62 65 72 20 6f 66 20 46 41 54 73 20 20     Number of FATs  
     a21:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

00000a2f <__c.3638>:
     a2f:	42 79 74 65 73 2f 43 6c 75 73 74 65 72 20 20 20     Bytes/Cluster   
     a3f:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000a4e <__c.3636>:
     a4e:	46 41 54 20 74 79 70 65 20 20 20 20 20 20 20 20     FAT type        
     a5e:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

00000a6c <__c.3634>:
     a6c:	66 61 74 66 73 5f 73 74 61 74 75 73 20 66 5f 67     fatfs_status f_g
     a7c:	65 74 66 72 65 65 20 66 61 69 6c 65 64 0a 00        etfree failed..

00000a8b <__c.3632>:
     a8b:	66 61 74 66 73 20 73 74 61 74 75 73 3a 25 73 0a     fatfs status:%s.
	...

00000a9c <__c.3596>:
     a9c:	72 63 3d 25 75 0a 00                                rc=%u..

00000aa3 <__c.3632>:
     aa3:	2c 20 25 31 30 6c 75 4b 20 62 79 74 65 73 20 66     , %10luK bytes f
     ab3:	72 65 65 0a 00                                      ree..

00000ab8 <__c.3630>:
     ab8:	25 34 75 20 46 69 6c 65 28 73 29 2c 25 31 30 6c     %4u File(s),%10l
     ac8:	75 20 62 79 74 65 73 20 74 6f 74 61 6c 0a 25 34     u bytes total.%4
     ad8:	75 20 44 69 72 28 73 29 00                          u Dir(s).

00000ae1 <__c.3626>:
     ae1:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000aef <__c.3613>:
     aef:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     aff:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000b0f <__c.3611>:
     b0f:	45 4e 44 20 4d 4d 43 20 54 45 53 54 0a 00           END MMC TEST..

00000b1d <__c.3609>:
     b1d:	4d 4d 43 20 44 69 72 65 63 74 6f 72 79 20 4c 69     MMC Directory Li
     b2d:	73 74 0a 00                                         st..

00000b31 <__c.3607>:
     b31:	53 54 41 52 54 20 4d 4d 43 20 54 45 53 54 0a 00     START MMC TEST..

00000b41 <__c.3605>:
     b41:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     b51:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000b61 <__c.3589>:
     b61:	4e 6f 74 65 3a 20 66 61 74 66 73 20 74 65 73 74     Note: fatfs test
     b71:	73 20 4d 55 53 54 20 73 74 61 72 74 20 77 69 74     s MUST start wit
     b81:	68 20 22 66 61 74 66 73 22 20 6b 65 79 77 6f 72     h "fatfs" keywor
     b91:	64 0a 66 61 74 66 73 20 68 65 6c 70 0a 66 61 74     d.fatfs help.fat
     ba1:	66 73 20 6d 6d 63 5f 74 65 73 74 0a 66 61 74 66     fs mmc_test.fatf
     bb1:	73 20 6d 6d 63 5f 69 6e 69 74 0a 66 61 74 66 73     s mmc_init.fatfs
     bc1:	20 6c 73 20 64 69 72 65 63 74 6f 72 79 0a 66 61      ls directory.fa
     bd1:	74 66 73 20 73 74 61 74 75 73 0a 0a 00              tfs status...

00000bde <__c.3587>:
     bde:	66 61 74 66 73 20 68 65 6c 70 0a 00                 fatfs help..

00000bea <__c.3919>:
     bea:	25 73 0a 00                                         %s..

00000bee <__c.3917>:
     bee:	25 73 3a 20 25 73 0a 00                             %s: %s..

00000bf6 <__c.3672>:
     bf6:	53 65 65 6b 20 66 61 69 6c 65 64 00                 Seek failed.

00000c02 <__c.3601>:
     c02:	66 70 75 74 63 20 73 74 72 65 61 6d 2d 3e 70 75     fputc stream->pu
     c12:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000c1a <__c.3594>:
     c1a:	66 67 65 74 63 20 73 74 72 65 61 6d 2d 3e 67 65     fgetc stream->ge
     c2a:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000c32 <__c.3764>:
     c32:	46 69 6c 65 73 3a 20 25 64 0a 00                    Files: %d..

00000c3d <__c.3760>:
     c3d:	6e 61 6d 65 3a 5b 25 73 5d 20 74 6f 6f 20 6c 6f     name:[%s] too lo
     c4d:	6e 67 20 77 69 74 68 20 66 75 6c 6c 20 70 61 74     ng with full pat
     c5d:	68 0a 00                                            h..

00000c60 <__c.3757>:
     c60:	6f 70 65 6e 64 69 72 20 66 61 69 6c 65 64 0a 00     opendir failed..

00000c70 <__c.3752>:
     c70:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000c7e <__c.3750>:
     c7e:	6c 73 3a 20 63 61 6e 6e 6f 74 20 73 74 61 74 20     ls: cannot stat 
     c8e:	5b 25 73 5d 0a 00                                   [%s]..

00000c94 <__c.3748>:
     c94:	6c 73 3a 20 43 61 6e 27 74 20 67 65 74 20 63 75     ls: Can't get cu
     ca4:	72 72 65 6e 74 20 64 69 72 65 63 74 6f 72 79 0a     rrent directory.
	...

00000cb5 <__c.3735>:
     cb5:	25 73 20 6e 6f 6e 65 20 6e 6f 6e 65 20 25 31 32     %s none none %12
     cc5:	6c 64 20 25 73 20 25 73 0a 00                       ld %s %s..

00000ccf <__c.3730>:
     ccf:	25 73 0a 00                                         %s..

00000cd3 <__c.3728>:
     cd3:	63 61 6e 20 6e 6f 74 20 73 74 61 74 3a 20 25 73     can not stat: %s
     ce3:	0a 00                                               ..

00000ce5 <__c.3716>:
     ce5:	0d 00                                               ..

00000ce7 <__c.3714>:
     ce7:	4d 6f 72 65 2e 2e 00                                More...

00000cee <__c.3704>:
     cee:	25 6c 75 20 62 79 74 65 73 20 63 6f 70 69 65 64     %lu bytes copied
     cfe:	2e 0a 00                                            ...

00000d01 <__c.3700>:
     d01:	43 6f 70 69 65 64 3a 20 25 30 38 6c 64 0d 00        Copied: %08ld..

00000d10 <__c.3697>:
     d10:	57 72 69 74 65 20 65 72 72 6f 72 0a 00              Write error..

00000d1d <__c.3695>:
     d1d:	0a 43 6f 70 79 69 6e 67 2e 2e 2e 0a 00              .Copying.....

00000d2a <__c.3693>:
     d2a:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000d3a <__c.3691>:
     d3a:	43 72 65 61 74 69 6e 67 20 25 73 0a 00              Creating %s..

00000d47 <__c.3689>:
     d47:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000d57 <__c.3687>:
     d57:	4f 70 65 6e 69 6e 67 20 25 73 0a 00                 Opening %s..

00000d63 <__c.3676>:
     d63:	25 6c 64 20 62 79 74 65 73 0a 00                    %ld bytes..

00000d6e <__c.3674>:
     d6e:	0a 00                                               ..

00000d70 <__c.3669>:
     d70:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000d80 <__c.3659>:
     d80:	72 6d 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     rmdir %s failed.
	...

00000d91 <__c.3657>:
     d91:	72 6d 20 25 73 20 66 61 69 6c 65 64 0a 00           rm %s failed..

00000d9f <__c.3655>:
     d9f:	72 65 6e 61 6d 65 20 25 73 20 74 6f 20 25 73 0a     rename %s to %s.
	...

00000db0 <__c.3653>:
     db0:	25 73 0a 00                                         %s..

00000db4 <__c.3651>:
     db4:	70 77 64 20 46 41 49 4c 45 44 0a 00                 pwd FAILED..

00000dc0 <__c.3647>:
     dc0:	6d 6b 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     mkdir %s failed.
	...

00000dd1 <__c.3640>:
     dd1:	6c 73 3a 20 6e 75 6c 6c 20 61 72 67 75 6d 65 6e     ls: null argumen
     de1:	74 20 23 20 25 64 0a 00                             t # %d..

00000de9 <__c.3636>:
     de9:	63 68 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     chdir %s failed.
	...

00000dfa <__c.3620>:
     dfa:	4e 6f 74 65 3a 20 70 6f 73 69 78 20 70 72 65 66     Note: posix pref
     e0a:	69 78 20 69 73 20 6f 70 74 69 6f 6e 61 6c 0a 70     ix is optional.p
     e1a:	6f 73 69 78 20 63 61 74 20 66 69 6c 65 20 5b 2d     osix cat file [-
     e2a:	70 5d 0a 70 6f 73 69 78 20 63 64 20 64 69 72 0a     p].posix cd dir.
     e3a:	70 6f 73 69 78 20 63 6f 70 79 20 66 69 6c 65 31     posix copy file1
     e4a:	20 66 69 6c 65 32 0a 70 6f 73 69 78 20 6c 73 20      file2.posix ls 
     e5a:	64 69 72 20 5b 2d 6c 5d 0a 70 6f 73 69 78 20 6d     dir [-l].posix m
     e6a:	6b 64 69 72 20 64 69 72 0a 70 6f 73 69 78 20 70     kdir dir.posix p
     e7a:	61 67 65 20 4e 4e 0a 70 6f 73 69 78 20 70 77 64     age NN.posix pwd
     e8a:	0a 70 6f 73 69 78 20 72 6d 20 66 69 6c 65 0a 70     .posix rm file.p
     e9a:	6f 73 69 78 20 72 6d 64 69 72 20 64 69 72 0a 70     osix rmdir dir.p
     eaa:	6f 73 69 78 20 72 65 6e 61 6d 65 20 6f 6c 64 20     osix rename old 
     eba:	6e 65 77 0a 0a 00                                   new...

00000ec0 <__c.3618>:
     ec0:	70 6f 73 69 78 20 68 65 6c 70 0a 00                 posix help..

00000ecc <__c.3807>:
     ecc:	43 6c 6f 73 65 20 65 72 72 6f 72 3a 20 00           Close error: .

00000eda <__c.3801>:
     eda:	53 65 65 6b 20 65 72 72 6f 72 3a 20 00              Seek error: .

00000ee7 <__c.3794>:
     ee7:	57 72 69 74 65 20 65 72 72 6f 72 3a 20 00           Write error: .

00000ef5 <__c.3785>:
     ef5:	52 65 61 64 20 65 72 72 6f 72 3a 20 00              Read error: .

00000f02 <__c.3776>:
     f02:	4f 70 65 6e 20 65 72 72 6f 72 3a 5b 25 73 5d 20     Open error:[%s] 
	...

00000f13 <__c.3762>:
     f13:	5b 50 50 52 20 44 49 53 41 42 4c 45 20 41 4c 4c     [PPR DISABLE ALL
     f23:	5d 0a 00                                            ]..

00000f26 <__c.3744>:
     f26:	47 50 49 42 20 43 6c 6f 63 6b 20 74 61 73 6b 20     GPIB Clock task 
     f36:	69 6e 69 74 20 66 61 69 6c 65 64 0a 00              init failed..

00000f43 <__c.4399>:
     f43:	5b 67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 20     [gpib_write_str 
     f53:	73 65 6e 74 28 25 64 29 20 65 78 70 65 63 74 65     sent(%d) expecte
     f63:	64 28 25 64 29 5d 0a 00                             d(%d)]..

00000f6b <__c.4391>:
     f6b:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
     f7b:	20 44 41 56 3d 3d 31 3e 0a 00                        DAV==1>..

00000f85 <__c.4386>:
     f85:	3c 67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 20     <gpib_write_str 
     f95:	74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67 20     timeout waiting 
     fa5:	66 6f 72 20 41 54 4e 20 3d 20 31 3e 0a 00           for ATN = 1>..

00000fb3 <__c.4384>:
     fb3:	67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 3a 20     gpib_write_str: 
     fc3:	73 69 7a 65 20 3d 20 30 0a 00                       size = 0..

00000fcd <__c.4374>:
     fcd:	5b 67 70 69 62 5f 72 65 61 64 5f 73 74 72 20 72     [gpib_read_str r
     fdd:	65 61 64 28 25 64 29 20 65 78 70 65 63 74 65 64     ead(%d) expected
     fed:	28 25 64 29 5d 0a 00                                (%d)]..

00000ff4 <__c.4370>:
     ff4:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 28 69 6e     gpib_read_str(in
    1004:	64 3a 25 64 29 3a 20 41 54 4e 20 25 30 32 58 48     d:%d): ATN %02XH
    1014:	20 75 6e 65 78 70 65 63 74 65 64 0a 00               unexpected..

00001021 <__c.4367>:
    1021:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 3a 20 73     gpib_read_str: s
    1031:	69 7a 65 20 3d 20 30 0a 00                          ize = 0..

0000103a <__c.4351>:
    103a:	20 4d 53 41 20 25 30 32 58 68 00                     MSA %02Xh.

00001045 <__c.4349>:
    1045:	20 4d 54 41 20 25 30 32 58 68 00                     MTA %02Xh.

00001050 <__c.4347>:
    1050:	20 4d 4c 41 20 25 30 32 58 68 00                     MLA %02Xh.

0000105b <__c.4343>:
    105b:	20 20 20 20 20 00                                        .

00001061 <__c.4341>:
    1061:	25 30 32 58 20 25 63 20 00                          %02X %c .

0000106a <__c.4315>:
    106a:	67 70 69 62 5f 72 65 61 64 5f 62 79 74 65 3a 20     gpib_read_byte: 
    107a:	49 46 43 20 73 74 61 74 65 3d 25 64 0a 00           IFC state=%d..

00001088 <__c.4299>:
    1088:	3c 47 50 49 42 20 54 58 20 54 49 4d 45 4f 55 54     <GPIB TX TIMEOUT
    1098:	3e 0a 00                                            >..

0000109b <__c.4294>:
    109b:	3c 67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65     <gpib_write_byte
    10ab:	20 74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67      timeout waiting
    10bb:	20 66 6f 72 20 4e 44 41 43 3d 3d 31 3e 0a 00         for NDAC==1>..

000010ca <__c.4290>:
    10ca:	3c 67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65     <gpib_write_byte
    10da:	20 74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67      timeout waiting
    10ea:	20 66 6f 72 20 4e 52 46 44 3d 3d 31 20 26 26 20      for NRFD==1 && 
    10fa:	4e 44 41 43 20 3d 3d 20 30 3e 0a 00                 NDAC == 0>..

00001106 <__c.4286>:
    1106:	3c 67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65     <gpib_write_byte
    1116:	20 74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67      timeout waiting
    1126:	20 66 6f 72 20 4e 52 46 44 3d 3d 31 20 26 26 20      for NRFD==1 && 
    1136:	4e 44 41 43 20 3d 3d 20 30 3e 0a 00                 NDAC == 0>..

00001142 <__c.4284>:
    1142:	67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65 3a     gpib_write_byte:
    1152:	20 41 54 4e 20 3d 20 30 20 77 68 69 6c 65 20 77      ATN = 0 while w
    1162:	61 69 74 69 6e 67 20 66 6f 72 20 4e 52 46 44 20     aiting for NRFD 
    1172:	4c 4f 57 20 73 74 61 74 65 20 3d 25 64 0a 00        LOW state =%d..

00001181 <__c.4279>:
    1181:	67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65 3a     gpib_write_byte:
    1191:	20 49 46 43 20 73 74 61 74 65 3d 25 64 0a 00         IFC state=%d..

000011a0 <__c.4263>:
    11a0:	67 70 69 62 5f 75 6e 72 65 61 64 3a 20 65 72 72     gpib_unread: err
    11b0:	6f 72 2c 20 63 61 6e 20 6f 6e 6c 79 20 62 65 20     or, can only be 
    11c0:	63 61 6c 6c 65 64 20 6f 6e 63 65 21 0a 00           called once!..

000011ce <__c.4247>:
    11ce:	5b 44 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [DPPR bit:%d, ma
    11de:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

000011e9 <__c.4245>:
    11e9:	67 70 69 62 5f 64 69 73 61 62 6c 65 5f 50 50 52     gpib_disable_PPR
    11f9:	3a 20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20     : bit %d out of 
    1209:	72 61 6e 67 65 0a 00                                range..

00001210 <__c.4240>:
    1210:	5b 45 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [EPPR bit:%d, ma
    1220:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

0000122b <__c.4238>:
    122b:	67 70 69 62 5f 65 6e 61 62 6c 65 5f 50 50 52 3a     gpib_enable_PPR:
    123b:	20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20 72      bit %d out of r
    124b:	61 6e 67 65 0a 00                                   ange..

00001251 <__c.4233>:
    1251:	5b 47 50 49 42 20 53 54 41 54 45 20 49 4e 49 54     [GPIB STATE INIT
    1261:	5d 0a 00                                            ]..

00001264 <__c.4221>:
    1264:	5b 47 50 49 42 20 42 55 53 5f 49 4e 49 54 5d 0a     [GPIB BUS_INIT].
	...

00001275 <__c.4398>:
    1275:	5b 50 52 49 4e 54 45 52 20 63 6c 6f 73 65 5d 0a     [PRINTER close].
	...

00001286 <__c.4393>:
    1286:	5b 53 41 20 25 30 32 58 48 2c 20 6c 69 73 74 65     [SA %02XH, liste
    1296:	6e 3a 25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30     n:%02XH, talk:%0
    12a6:	32 58 48 5d 0a 00                                   2XH]..

000012ac <__c.4391>:
    12ac:	5b 53 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [SA %02XH AMIGO]
    12bc:	0a 00                                               ..

000012be <__c.4389>:
    12be:	5b 53 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [SA %02XH SS80].
	...

000012cf <__c.4384>:
    12cf:	5b 54 41 20 25 30 32 58 48 5d 0a 00                 [TA %02XH]..

000012db <__c.4382>:
    12db:	5b 50 52 49 4e 54 45 52 20 4f 50 45 4e 5d 0a 00     [PRINTER OPEN]..

000012eb <__c.4380>:
    12eb:	5b 54 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [TA %02XH PRINTE
    12fb:	52 5d 0a 00                                         R]..

000012ff <__c.4378>:
    12ff:	5b 54 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [TA %02XH AMIGO]
    130f:	0a 00                                               ..

00001311 <__c.4376>:
    1311:	5b 54 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [TA %02XH SS80].
	...

00001322 <__c.4374>:
    1322:	5b 55 4e 54 5d 0a 00                                [UNT]..

00001329 <__c.4369>:
    1329:	5b 4c 41 20 25 30 32 58 48 5d 0a 00                 [LA %02XH]..

00001335 <__c.4367>:
    1335:	5b 4c 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [LA %02XH PRINTE
    1345:	52 5d 0a 00                                         R]..

00001349 <__c.4365>:
    1349:	5b 4c 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [LA %02XH SS80].
	...

0000135a <__c.4363>:
    135a:	5b 4c 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [LA %02XH AMIGO]
    136a:	0a 00                                               ..

0000136c <__c.4361>:
    136c:	0a 00                                               ..

0000136e <__c.4359>:
    136e:	5b 55 4e 4c 5d 0a 00                                [UNL]..

00001375 <__c.4354>:
    1375:	5b 47 50 49 42 20 28 25 30 32 58 48 29 20 6e 6f     [GPIB (%02XH) no
    1385:	74 20 64 65 66 69 6e 65 64 20 54 4f 44 4f 5d 0a     t defined TODO].
	...

00001396 <__c.4352>:
    1396:	5b 44 43 4c 5d 0a 00                                [DCL]..

0000139d <__c.4350>:
    139d:	5b 53 44 43 20 41 4d 49 47 4f 5d 0a 00              [SDC AMIGO]..

000013aa <__c.4348>:
    13aa:	5b 53 44 43 20 53 53 38 30 5d 0a 00                 [SDC SS80]..

000013b6 <__c.4346>:
    13b6:	5b 53 44 43 5d 0a 00                                [SDC]..

000013bd <__c.4344>:
    13bd:	5b 53 50 44 5d 0a 00                                [SPD]..

000013c4 <__c.4342>:
    13c4:	5b 53 50 45 5d 0a 00                                [SPE]..

000013cb <__c.4340>:
    13cb:	5b 50 50 55 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPU unsupported
    13db:	20 54 4f 44 4f 5d 0a 00                              TODO]..

000013e3 <__c.4338>:
    13e3:	5b 50 50 43 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPC unsupported
    13f3:	20 54 4f 44 4f 5d 0a 00                              TODO]..

000013fb <__c.4333>:
    13fb:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    140b:	48 3d 25 30 34 58 48 5d 0a 00                       H=%04XH]..

00001415 <__c.4331>:
    1415:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    1425:	48 3d 25 30 34 58 48 20 46 41 49 4c 45 44 5d 0a     H=%04XH FAILED].
	...

00001436 <__c.4304>:
    1436:	3c 4d 45 44 49 41 20 4d 49 53 53 49 4e 47 3e 0a     <MEDIA MISSING>.
	...

00001447 <__c.4302>:
    1447:	3c 49 4e 54 45 52 52 55 50 54 3e 0a 00              <INTERRUPT>..

00001454 <__c.4300>:
    1454:	3c 42 55 53 3e 0a 00                                <BUS>..

0000145b <__c.4298>:
    145b:	3c 54 49 4d 45 4f 55 54 3e 0a 00                    <TIMEOUT>..

00001466 <__c.4296>:
    1466:	3c 49 46 43 3e 0a 00                                <IFC>..

0000146d <__c.4291>:
    146d:	43 61 70 74 75 72 69 6e 67 20 43 6c 6f 73 65 64     Capturing Closed
    147d:	0a 00                                               ..

0000147f <__c.4289>:
    147f:	44 6f 6e 65 0a 00                                   Done..

00001485 <__c.4285>:
    1485:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

00001491 <__c.4283>:
    1491:	50 72 65 73 73 20 41 4e 59 20 6b 65 79 20 74 6f     Press ANY key to
    14a1:	20 65 78 69 74 0a 00                                 exit..

000014a8 <__c.4281>:
    14a8:	46 55 4c 4c 20 47 50 49 42 20 42 55 53 20 68 61     FULL GPIB BUS ha
    14b8:	6e 64 73 68 61 6b 65 20 6c 6f 67 67 69 6e 67 20     ndshake logging 
    14c8:	72 65 71 75 65 73 74 65 64 0a 00                    requested..

000014d3 <__c.4279>:
    14d3:	43 61 70 74 75 72 69 6e 67 20 47 50 49 42 20 42     Capturing GPIB B
    14e3:	55 53 20 74 6f 3a 25 73 0a 00                       US to:%s..

000014ed <__c.4233>:
    14ed:	43 61 72 64 20 69 73 20 77 72 69 74 65 20 70 72     Card is write pr
    14fd:	6f 74 65 63 74 65 64 0a 00                          otected..

00001506 <__c.4231>:
    1506:	25 73 20 6f 70 65 6e 20 66 61 69 6c 75 72 65 0a     %s open failure.
	...

00001517 <__c.4229>:
    1517:	25 73 20 68 61 64 20 25 64 20 65 72 72 6f 72 73     %s had %d errors
    1527:	0a 00                                               ..

00001529 <__c.4424>:
    1529:	64 65 62 75 67 3d 25 30 34 58 48 0a 00              debug=%04XH..

00001536 <__c.4416>:
    1536:	4e 6f 74 65 3a 20 67 70 69 62 20 70 72 65 66 69     Note: gpib prefi
    1546:	78 20 69 73 20 6f 70 74 69 6f 6e 61 6c 0a 67 70     x is optional.gp
    1556:	69 62 20 61 64 64 72 65 73 73 65 73 0a 20 20 20     ib addresses.   
    1566:	44 69 73 70 6c 61 79 20 61 6c 6c 20 64 65 76 69     Display all devi
    1576:	63 65 20 47 50 49 42 20 62 75 73 20 61 64 64 72     ce GPIB bus addr
    1586:	65 73 73 65 73 20 61 6e 64 20 50 50 52 20 76 61     esses and PPR va
    1596:	6c 75 65 73 0a 67 70 69 62 20 63 6f 6e 66 69 67     lues.gpib config
    15a6:	20 5b 2d 76 5d 0a 20 20 20 44 69 73 70 6c 61 79      [-v].   Display
    15b6:	20 63 75 72 72 65 6e 74 20 64 72 69 76 65 73 20      current drives 
    15c6:	63 6f 6e 66 69 67 75 72 61 74 69 6f 6e 0a 20 20     configuration.  
    15d6:	20 2d 76 20 56 65 72 62 6f 73 65 20 2d 20 73 68      -v Verbose - sh
    15e6:	6f 77 20 66 75 6c 6c 20 64 65 74 61 69 6c 0a 67     ow full detail.g
    15f6:	70 69 62 20 64 65 62 75 67 20 4e 0a 20 20 20 64     pib debug N.   d
    1606:	65 62 75 67 20 6d 65 73 73 61 67 65 20 72 65 70     ebug message rep
    1616:	6f 72 74 69 6e 67 20 73 65 65 20 68 70 64 69 73     orting see hpdis
    1626:	6b 2e 63 66 67 20 66 6f 72 20 64 65 74 61 69 6c     k.cfg for detail
    1636:	73 0a 67 70 69 62 20 65 6c 61 70 73 65 64 0a 67     s.gpib elapsed.g
    1646:	70 69 62 20 65 6c 61 70 73 65 64 5f 72 65 73 65     pib elapsed_rese
    1656:	74 0a 67 70 69 62 20 69 66 63 0a 67 70 69 62 20     t.gpib ifc.gpib 
    1666:	70 6c 6f 74 20 66 69 6c 65 6e 61 6d 65 2e 74 78     plot filename.tx
    1676:	74 0a 67 70 69 62 20 70 6c 6f 74 5f 65 63 68 6f     t.gpib plot_echo
    1686:	0a 67 70 69 62 20 74 61 73 6b 0a 67 70 69 62 20     .gpib task.gpib 
    1696:	74 72 61 63 65 20 66 69 6c 65 6e 61 6d 65 2e 74     trace filename.t
    16a6:	78 74 20 5b 42 55 53 5d 0a 20 20 20 44 69 73 70     xt [BUS].   Disp
    16b6:	6c 61 79 20 61 63 74 69 76 69 74 79 20 6f 66 20     lay activity of 
    16c6:	47 50 49 42 20 62 75 73 20 61 6e 64 20 6c 6f 67     GPIB bus and log
    16d6:	20 69 74 0a 20 20 20 42 55 53 20 2d 20 69 6e 63      it.   BUS - inc
    16e6:	6c 75 64 65 20 68 61 6e 64 73 68 61 6b 65 20 73     lude handshake s
    16f6:	74 61 74 65 73 0a 0a 0a 00                          tates....

000016ff <__c.4414>:
    16ff:	67 70 69 62 20 20 68 65 6c 70 0a 00                 gpib  help..

0000170b <__c.4835>:
    170b:	0a 00                                               ..

0000170d <__c.4830>:
    170d:	25 2d 31 36 73 20 20 20 20 20 20 20 25 32 64 0a     %-16s       %2d.
	...

0000171e <__c.4828>:
    171e:	25 2d 31 36 73 20 41 4d 49 47 4f 20 25 32 64 20     %-16s AMIGO %2d 
    172e:	25 73 0a 00                                         %s..

00001732 <__c.4826>:
    1732:	25 2d 31 36 73 20 53 53 38 30 20 20 25 32 64 20     %-16s SS80  %2d 
    1742:	25 73 0a 00                                         %s..

00001746 <__c.4814>:
    1746:	61 72 67 76 5b 25 64 5d 20 3d 20 25 73 0a 00        argv[%d] = %s..

00001755 <__c.4804>:
    1755:	41 4d 49 47 4f 25 64 00                             AMIGO%d.

0000175d <__c.4802>:
    175d:	66 6f 72 6d 61 74 69 6e 67 20 25 73 20 25 6c 64     formating %s %ld
    176d:	20 73 65 63 74 6f 72 73 0a 00                        sectors..

00001777 <__c.4800>:
    1777:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    1787:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    1797:	0a 00                                               ..

00001799 <__c.4798>:
    1799:	53 53 38 30 2d 25 64 00                             SS80-%d.

000017a1 <__c.4796>:
    17a1:	66 6f 72 6d 61 74 69 6e 67 20 25 73 20 25 6c 64     formating %s %ld
    17b1:	20 73 65 63 74 6f 72 73 0a 00                        sectors..

000017bb <__c.4794>:
    17bb:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    17cb:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    17db:	0a 00                                               ..

000017dd <__c.4777>:
    17dd:	57 61 72 6e 69 6e 67 3a 20 25 73 20 42 59 54 45     Warning: %s BYTE
    17ed:	53 5f 50 45 52 5f 53 45 43 54 4f 52 20 21 3d 20     S_PER_SECTOR != 
    17fd:	32 35 36 2c 20 41 64 6a 75 73 74 69 6e 67 20 74     256, Adjusting t
    180d:	6f 20 32 35 36 0a 00                                o 256..

00001814 <__c.4775>:
    1814:	57 61 72 6e 69 6e 67 3a 20 25 73 20 42 59 54 45     Warning: %s BYTE
    1824:	53 5f 50 45 52 5f 42 4c 4f 43 4b 20 21 3d 20 32     S_PER_BLOCK != 2
    1834:	35 36 2c 20 41 64 6a 75 73 74 69 6e 67 20 74 6f     56, Adjusting to
    1844:	20 32 35 36 0a 00                                    256..

0000184a <__c.4762>:
    184a:	68 70 64 69 72 5f 70 61 72 61 6d 65 74 65 72 73     hpdir_parameters
    185a:	20 69 6e 76 61 6c 69 64 20 54 59 50 45 0a 00         invalid TYPE..

00001869 <__c.4726>:
    1869:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 69 6e     alloc_device: in
    1879:	76 61 6c 69 64 20 74 79 70 65 3a 25 64 3a 25 73     valid type:%d:%s
    1889:	0a 00                                               ..

0000188b <__c.4718>:
    188b:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 44 65     alloc_device: De
    189b:	76 69 63 65 20 74 61 62 6c 65 20 69 73 20 66 75     vice table is fu
    18ab:	6c 6c 0a 00                                         ll..

000018af <__c.4705>:
    18af:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    18bf:	65 3a 28 25 64 29 20 69 6e 76 61 6c 69 64 20 74     e:(%d) invalid t
    18cf:	79 70 65 3a 25 64 3a 25 73 0a 00                    ype:%d:%s..

000018da <__c.4703>:
    18da:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    18ea:	65 3a 20 69 6e 64 65 78 3a 20 25 64 20 74 79 70     e: index: %d typ
    18fa:	65 3a 25 64 3a 25 73 2c 20 73 74 61 74 65 20 3d     e:%d:%s, state =
    190a:	3d 20 4e 55 4c 4c 0a 00                             = NULL..

00001912 <__c.4701>:
    1912:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1922:	65 3a 20 69 6e 64 65 78 20 25 64 20 75 6e 69 6e     e: index %d unin
    1932:	69 74 61 6c 69 7a 65 64 20 74 79 70 65 3a 25 64     italized type:%d
    1942:	3a 25 73 0a 00                                      :%s..

00001947 <__c.4699>:
    1947:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1957:	65 3a 20 69 6e 64 65 78 3a 25 64 20 74 79 70 65     e: index:%d type
    1967:	3a 25 64 3a 25 73 2c 20 64 65 76 20 3d 3d 20 4e     :%d:%s, dev == N
    1977:	55 4c 4c 0a 00                                      ULL..

0000197c <__c.4697>:
    197c:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    198c:	65 3a 20 69 6e 64 65 78 3a 25 64 20 61 64 64 72     e: index:%d addr
    199c:	65 73 73 3a 20 25 30 32 58 48 20 6f 75 74 20 6f     ess: %02XH out o
    19ac:	66 20 72 61 6e 67 65 0a 00                          f range..

000019b5 <__c.4695>:
    19b5:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    19c5:	65 3a 28 25 64 29 20 6f 75 74 20 6f 66 20 72 61     e:(%d) out of ra
    19d5:	6e 67 65 0a 00                                      nge..

000019da <__c.4656>:
    19da:	0a 00                                               ..

000019dc <__c.4651>:
    19dc:	0a 00                                               ..

000019de <__c.4649>:
    19de:	20 20 20 20 23 20 42 4c 4f 43 4b 53 20 3d 20 25         # BLOCKS = %
    19ee:	6c 64 0a 00                                         ld..

000019f2 <__c.4647>:
    19f2:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    1a02:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

00001a11 <__c.4645>:
    1a11:	41 4d 49 47 4f 20 25 73 0a 00                       AMIGO %s..

00001a1b <__c.4643>:
    1a1b:	20 20 20 20 23 20 42 4c 4f 43 4b 53 20 3d 20 25         # BLOCKS = %
    1a2b:	6c 64 0a 00                                         ld..

00001a2f <__c.4641>:
    1a2f:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    1a3f:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

00001a4e <__c.4639>:
    1a4e:	53 53 38 30 20 25 73 0a 00                          SS80 %s..

00001a57 <__c.4636>:
    1a57:	43 75 72 72 65 6e 74 20 43 6f 6e 66 69 67 75 72     Current Configur
    1a67:	61 74 69 6f 6e 20 53 65 74 74 69 6e 67 73 0a 00     ation Settings..

00001a77 <__c.4627>:
    1a77:	0a 00                                               ..

00001a79 <__c.4622>:
    1a79:	0a 00                                               ..

00001a7b <__c.4620>:
    1a7b:	50 52 49 4e 54 45 52 0a 00                          PRINTER..

00001a84 <__c.4618>:
    1a84:	41 4d 49 47 4f 20 25 73 0a 00                       AMIGO %s..

00001a8e <__c.4616>:
    1a8e:	53 53 38 30 20 25 73 0a 00                          SS80 %s..

00001a97 <__c.4613>:
    1a97:	44 65 76 69 63 65 20 41 64 64 72 65 73 73 65 73     Device Addresses
    1aa7:	0a 00                                               ..

00001aa9 <__c.4607>:
    1aa9:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 2a 2a 2a     Read_Config: ***
    1ab9:	2a 2a 2a 20 65 72 72 6f 72 73 28 25 64 29 20 2a     *** errors(%d) *
    1ac9:	2a 2a 2a 2a 2a 0a 00                                *****..

00001ad0 <__c.4605>:
    1ad0:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 72 65 61     Read_Config: rea
    1ae0:	64 28 25 64 29 20 6c 69 6e 65 73 0a 00              d(%d) lines..

00001aed <__c.4603>:
    1aed:	4d 69 73 73 69 6e 67 20 45 4e 44 20 73 74 61 74     Missing END stat
    1afd:	65 6d 65 6e 74 20 61 74 20 6c 69 6e 65 3a 25 64     ement at line:%d
    1b0d:	0a 00                                               ..

00001b0f <__c.4599>:
    1b0f:	55 6e 65 78 70 65 63 74 65 64 20 53 54 41 54 45     Unexpected STATE
    1b1f:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1b2f:	0a 00                                               ..

00001b31 <__c.4596>:
    1b31:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1b41:	20 47 45 4d 45 54 52 59 20 74 6f 6b 65 6e 3a 20      GEMETRY token: 
    1b51:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00001b61 <__c.4587>:
    1b61:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1b71:	20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25      CONFIG token: %
    1b81:	73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00        s, at line:%d..

00001b90 <__c.4584>:
    1b90:	55 6e 65 78 70 65 63 74 65 64 20 48 45 41 44 45     Unexpected HEADE
    1ba0:	52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20     R CONFIG token: 
    1bb0:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00001bc0 <__c.4575>:
    1bc0:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1bd0:	20 53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73      START token: %s
    1be0:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001bee <__c.4567>:
    1bee:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1bfe:	56 4f 4c 55 4d 45 20 74 6f 6b 65 6e 3a 20 25 73     VOLUME token: %s
    1c0e:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001c1c <__c.4557>:
    1c1c:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1c2c:	55 4e 49 54 20 74 6f 6b 65 6e 3a 20 25 73 2c 20     UNIT token: %s, 
    1c3c:	61 74 20 6c 69 6e 65 3a 25 64 0a 00                 at line:%d..

00001c48 <__c.4540>:
    1c48:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1c58:	43 4f 4e 54 52 4f 4c 4c 45 52 20 74 6f 6b 65 6e     CONTROLLER token
    1c68:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1c78:	0a 00                                               ..

00001c7a <__c.4532>:
    1c7a:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1c8a:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    1c9a:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001ca8 <__c.4529>:
    1ca8:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1cb8:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    1cc8:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001cd6 <__c.4521>:
    1cd6:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1ce6:	53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73 2c     START token: %s,
    1cf6:	20 61 74 20 6c 69 6e 65 3a 25 64 0a 00               at line:%d..

00001d03 <__c.4511>:
    1d03:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    1d13:	45 52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a     ER CONFIG token:
    1d23:	20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a      %s, at line:%d.
	...

00001d34 <__c.4508>:
    1d34:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    1d44:	45 52 20 74 6f 6b 65 6e 3a 20 25 73 2c 20 61 74     ER token: %s, at
    1d54:	20 6c 69 6e 65 3a 25 64 0a 00                        line:%d..

00001d5e <__c.4504>:
    1d5e:	55 6e 65 78 70 65 63 74 65 64 20 74 6f 6b 65 6e     Unexpected token
    1d6e:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1d7e:	0a 00                                               ..

00001d80 <__c.4493>:
    1d80:	55 6e 65 78 70 65 63 74 65 64 20 74 6f 6b 65 6e     Unexpected token
    1d90:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1da0:	0a 00                                               ..

00001da2 <__c.4490>:
    1da2:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 6f 70 65     Read_Config: ope
    1db2:	6e 28 25 73 29 20 66 61 69 6c 65 64 0a 00           n(%s) failed..

00001dc0 <__c.4488>:
    1dc0:	52 65 61 64 69 6e 67 3a 20 25 73 0a 00              Reading: %s..

00001dcd <__c.4469>:
    1dcd:	25 73 0a 00                                         %s..

00001dd1 <__c.4459>:
    1dd1:	25 2d 32 35 73 20 3d 20 25 73 0a 00                 %-25s = %s..

00001ddd <__c.4448>:
    1ddd:	25 2d 32 35 73 20 3d 20 25 38 6c 78 48 20 28 25     %-25s = %8lxH (%
    1ded:	6c 64 29 0a 00                                      ld)..

00001df2 <__c.3643>:
    1df2:	46 6f 75 6e 64 20 4d 6f 64 65 6c 3a 20 25 73 0a     Found Model: %s.
	...

00001e03 <__c.3641>:
    1e03:	25 73 20 25 73 0a 00                                %s %s..

00001e0a <__c.3637>:
    1e0a:	45 72 72 6f 72 3a 20 68 70 64 69 72 2e 69 6e 69     Error: hpdir.ini
    1e1a:	20 6e 6f 74 20 66 6f 75 6e 64 21 0a 00               not found!..

00001e27 <__c.4541>:
    1e27:	5b 53 53 38 30 20 55 6e 6b 6e 6f 77 6e 20 53 43     [SS80 Unknown SC
    1e37:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    1e47:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    1e57:	48 5d 0a 00                                         H]..

00001e5b <__c.4539>:
    1e5b:	5b 53 53 38 30 20 53 43 20 55 6e 6b 6e 6f 77 6e     [SS80 SC Unknown
    1e6b:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    1e7b:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    1e8b:	48 5d 0a 00                                         H]..

00001e8f <__c.4537>:
    1e8f:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    1e9f:	74 5d 0a 00                                         t]..

00001ea3 <__c.4535>:
    1ea3:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

00001eb2 <__c.4533>:
    1eb2:	5b 53 53 38 30 20 52 65 70 6f 72 74 20 53 74 61     [SS80 Report Sta
    1ec2:	74 65 5d 0a 00                                      te]..

00001ec7 <__c.4531>:
    1ec7:	5b 53 53 30 30 20 45 78 65 63 75 74 65 20 53 74     [SS00 Execute St
    1ed7:	61 74 65 5d 0a 00                                   ate]..

00001edd <__c.4529>:
    1edd:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    1eed:	61 74 65 5d 0a 00                                   ate]..

00001ef3 <__c.4524>:
    1ef3:	5b 47 50 49 42 20 45 72 72 6f 72 20 52 65 74 75     [GPIB Error Retu
    1f03:	72 6e 20 2d 20 57 72 69 74 65 20 45 52 52 4f 52     rn - Write ERROR
    1f13:	5d 0a 00                                            ]..

00001f16 <__c.4510>:
    1f16:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

00001f25 <__c.4508>:
    1f25:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    1f35:	5d 0a 00                                            ]..

00001f38 <__c.4501>:
    1f38:	5b 53 53 38 30 20 53 44 43 5d 0a 00                 [SS80 SDC]..

00001f44 <__c.4487>:
    1f44:	5b 53 53 38 30 20 71 73 74 61 74 20 25 30 32 58     [SS80 qstat %02X
    1f54:	5d 0a 00                                            ]..

00001f57 <__c.4485>:
    1f57:	5b 53 53 38 30 20 71 73 74 61 74 20 73 65 6e 64     [SS80 qstat send
    1f67:	20 46 41 49 4c 45 44 5d 0a 00                        FAILED]..

00001f71 <__c.4478>:
    1f71:	5b 53 53 38 30 20 53 65 65 6b 3a 25 30 38 6c 58     [SS80 Seek:%08lX
    1f81:	48 5d 0a 00                                         H]..

00001f85 <__c.4476>:
    1f85:	5b 53 53 38 30 20 53 65 65 6b 20 4f 56 45 52 46     [SS80 Seek OVERF
    1f95:	4c 4f 57 20 61 74 20 25 30 38 6c 58 48 5d 0a 00     LOW at %08lXH]..

00001fa5 <__c.4471>:
    1fa5:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    1fb5:	74 20 43 6f 6d 6d 61 6e 64 2c 20 45 72 72 6f 72     t Command, Error
    1fc5:	20 61 74 20 28 25 64 29 20 6f 66 20 28 25 64 29      at (%d) of (%d)
    1fd5:	20 4f 50 20 43 6f 64 65 73 5d 0a 00                  OP Codes]..

00001fe1 <__c.4468>:
    1fe1:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    1ff1:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

00002001 <__c.4466>:
    2001:	5b 53 53 38 30 20 43 61 6e 63 65 6c 20 28 25 64     [SS80 Cancel (%d
    2011:	29 5d 0a 00                                         )]..

00002015 <__c.4464>:
    2015:	5b 53 53 38 30 20 43 68 61 6e 6e 65 6c 20 49 6e     [SS80 Channel In
    2025:	64 65 70 65 6e 64 65 6e 74 20 43 6c 65 61 72 20     dependent Clear 
    2035:	28 25 64 29 5d 0a 00                                (%d)]..

0000203c <__c.4462>:
    203c:	5b 53 53 38 30 20 57 72 69 74 65 20 4c 6f 6f 70     [SS80 Write Loop
    204c:	62 61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00           back - TODO]..

0000205a <__c.4460>:
    205a:	5b 53 53 38 30 20 52 65 61 64 20 4c 6f 6f 70 62     [SS80 Read Loopb
    206a:	61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00              ack - TODO]..

00002077 <__c.4457>:
    2077:	5b 53 53 38 30 20 48 50 2d 49 42 20 50 61 72 69     [SS80 HP-IB Pari
    2087:	74 79 20 43 68 65 63 6b 69 6e 67 20 2d 20 54 4f     ty Checking - TO
    2097:	44 4f 5d 0a 00                                      DO]..

0000209c <__c.4454>:
    209c:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    20ac:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

000020b5 <__c.4452>:
    20b5:	5b 47 50 49 42 20 52 65 61 64 20 45 52 52 4f 52     [GPIB Read ERROR
    20c5:	5d 0a 00                                            ]..

000020c8 <__c.4443>:
    20c8:	5b 53 53 38 30 20 45 78 65 63 75 74 65 20 43 6f     [SS80 Execute Co
    20d8:	6d 6d 61 6e 64 2c 20 45 72 72 6f 72 20 61 74 20     mmand, Error at 
    20e8:	28 25 64 29 20 6f 66 20 28 25 64 29 20 4f 50 20     (%d) of (%d) OP 
    20f8:	43 6f 64 65 73 5d 0a 00                             Codes]..

00002100 <__c.4440>:
    2100:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    2110:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

00002120 <__c.4438>:
    2120:	5b 53 53 38 30 20 49 6e 69 74 69 61 74 65 20 44     [SS80 Initiate D
    2130:	69 61 67 6e 6f 73 74 69 63 20 2d 20 54 4f 44 4f     iagnostic - TODO
    2140:	5d 0a 00                                            ]..

00002143 <__c.4436>:
    2143:	5b 53 53 38 30 20 52 65 71 75 65 73 74 20 53 74     [SS80 Request St
    2153:	61 74 75 73 5d 0a 00                                atus]..

0000215a <__c.4434>:
    215a:	5b 53 53 38 30 20 44 6f 6f 72 20 4c 6f 63 6b 20     [SS80 Door Lock 
    216a:	2d 20 54 4f 44 4f 5d 0a 00                          - TODO]..

00002173 <__c.4432>:
    2173:	5b 53 53 38 30 20 44 6f 6f 72 20 55 6e 4c 6f 63     [SS80 Door UnLoc
    2183:	6b 20 2d 20 54 4f 44 4f 5d 0a 00                    k - TODO]..

0000218e <__c.4430>:
    218e:	5b 53 53 38 30 20 53 65 74 20 53 74 61 74 75 73     [SS80 Set Status
    219e:	20 4d 61 73 6b 20 2d 20 54 4f 44 4f 5d 0a 00         Mask - TODO]..

000021ad <__c.4428>:
    21ad:	5b 53 53 38 30 20 49 6e 69 74 69 61 6c 69 7a 65     [SS80 Initialize
    21bd:	20 4d 65 64 69 61 20 54 4f 44 4f 5d 0a 00            Media TODO]..

000021cb <__c.4426>:
    21cb:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

000021dc <__c.4424>:
    21dc:	5b 53 53 38 30 20 56 61 6c 69 64 61 74 65 20 4b     [SS80 Validate K
    21ec:	65 79 20 2d 20 54 4f 44 4f 5d 0a 00                 ey - TODO]..

000021f8 <__c.4422>:
    21f8:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 44 65     [SS80 Release De
    2208:	6e 69 65 64 20 4e 4f 2d 4f 50 5d 0a 00              nied NO-OP]..

00002215 <__c.4420>:
    2215:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 4e 4f     [SS80 Release NO
    2225:	2d 4f 50 5d 0a 00                                   -OP]..

0000222b <__c.4418>:
    222b:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    223b:	20 56 65 72 69 66 79 20 2d 20 54 4f 44 4f 5d 0a      Verify - TODO].
	...

0000224c <__c.4416>:
    224c:	5b 53 53 38 30 20 53 65 74 20 52 65 74 75 72 6e     [SS80 Set Return
    225c:	20 41 64 64 72 65 73 73 69 6e 67 20 2d 20 54 4f      Addressing - TO
    226c:	44 4f 5d 0a 00                                      DO]..

00002271 <__c.4414>:
    2271:	5b 53 53 38 30 20 53 65 74 20 52 65 6c 65 61 73     [SS80 Set Releas
    2281:	65 20 4e 4f 2d 4f 50 5d 0a 00                       e NO-OP]..

0000228b <__c.4412>:
    228b:	5b 53 53 38 30 20 53 65 74 20 52 50 53 20 4e 4f     [SS80 Set RPS NO
    229b:	2d 4f 50 5d 0a 00                                   -OP]..

000022a1 <__c.4410>:
    22a1:	5b 53 53 38 30 20 4e 4f 2d 4f 50 5d 0a 00           [SS80 NO-OP]..

000022af <__c.4408>:
    22af:	5b 53 53 38 30 20 53 65 74 20 4c 65 6e 67 74 68     [SS80 Set Length
    22bf:	3a 28 25 30 38 6c 58 48 29 5d 0a 00                 :(%08lXH)]..

000022cb <__c.4406>:
    22cb:	5b 53 53 38 30 20 53 65 74 20 41 64 64 72 65 73     [SS80 Set Addres
    22db:	73 3a 28 25 30 38 6c 58 48 29 5d 0a 00              s:(%08lXH)]..

000022e8 <__c.4404>:
    22e8:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    22f8:	20 57 72 69 74 65 5d 0a 00                           Write]..

00002301 <__c.4401>:
    2301:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2311:	20 52 65 61 64 5d 0a 00                              Read]..

00002319 <__c.4399>:
    2319:	5b 53 53 38 30 20 53 65 74 20 56 6f 6c 75 6d 65     [SS80 Set Volume
    2329:	3a 20 28 25 64 29 5d 0a 00                          : (%d)]..

00002332 <__c.4396>:
    2332:	5b 53 53 38 30 20 53 65 74 20 55 6e 69 74 3a 28     [SS80 Set Unit:(
    2342:	25 64 29 5d 0a 00                                   %d)]..

00002348 <__c.4394>:
    2348:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    2358:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

00002361 <__c.4392>:
    2361:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    2371:	61 74 65 20 47 50 49 42 20 52 65 61 64 20 45 52     ate GPIB Read ER
    2381:	52 4f 52 5d 0a 00                                   ROR]..

00002387 <__c.4383>:
    2387:	5b 53 53 38 30 20 56 6f 6c 75 6d 65 3a 25 64 20     [SS80 Volume:%d 
    2397:	69 6e 76 61 6c 69 64 5d 0a 00                       invalid]..

000023a1 <__c.4378>:
    23a1:	5b 53 53 38 30 20 55 4e 49 54 3a 25 64 20 69 6e     [SS80 UNIT:%d in
    23b1:	76 61 6c 69 64 5d 0a 00                             valid]..

000023b9 <__c.4373>:
    23b9:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 56     [SS80 Describe V
    23c9:	6f 6c 75 6d 65 20 46 41 49 4c 45 44 5d 0a 00        olume FAILED]..

000023d8 <__c.4371>:
    23d8:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 55     [SS80 Describe U
    23e8:	6e 69 74 20 46 41 49 4c 45 44 5d 0a 00              nit FAILED]..

000023f5 <__c.4369>:
    23f5:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 43     [SS80 Describe C
    2405:	6f 6e 74 72 6f 6c 6c 65 72 20 46 41 49 4c 45 44     ontroller FAILED
    2415:	5d 0a 00                                            ]..

00002418 <__c.4367>:
    2418:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

00002429 <__c.4359>:
    2429:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    2439:	73 20 46 41 49 4c 45 44 5d 0a 00                    s FAILED]..

00002444 <__c.4357>:
    2444:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    2454:	73 5d 0a 00                                         s]..

00002458 <__c.4347>:
    2458:	20 20 20 20 25 64 3a 25 73 0a 00                        %d:%s..

00002463 <__c.4345>:
    2463:	25 73 3a 0a 00                                      %s:..

00002468 <__c.4320>:
    2468:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2478:	20 57 72 69 74 65 20 57 72 6f 74 65 20 54 6f 74      Write Wrote Tot
    2488:	61 6c 28 25 6c 78 48 29 5d 0a 00                    al(%lxH)]..

00002493 <__c.4318>:
    2493:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    24a3:	20 57 72 69 74 65 20 44 49 44 20 4e 4f 54 20 46      Write DID NOT F
    24b3:	49 4e 49 53 48 5d 0a 00                             INISH]..

000024bb <__c.4314>:
    24bb:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    24cb:	20 57 72 69 74 65 20 77 72 6f 74 65 28 25 30 32      Write wrote(%02
    24db:	58 48 29 5d 0a 00                                   XH)]..

000024e1 <__c.4312>:
    24e1:	5b 44 69 73 6b 20 57 72 69 74 65 20 45 72 72 6f     [Disk Write Erro
    24f1:	72 5d 0a 00                                         r]..

000024f5 <__c.4308>:
    24f5:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    2505:	5d 0a 00                                            ]..

00002508 <__c.4306>:
    2508:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2518:	20 57 72 69 74 65 20 61 74 20 25 30 38 6c 58 48      Write at %08lXH
    2528:	28 25 6c 58 48 29 5d 0a 00                          (%lXH)]..

00002531 <__c.4294>:
    2531:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    2541:	65 61 64 20 54 6f 74 61 6c 28 25 6c 58 48 29 20     ead Total(%lXH) 
    2551:	62 79 74 65 73 5d 0a 00                             bytes]..

00002559 <__c.4292>:
    2559:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    2569:	65 61 64 20 44 49 44 20 4e 4f 54 20 46 49 4e 49     ead DID NOT FINI
    2579:	53 48 5d 0a 00                                      SH]..

0000257e <__c.4287>:
    257e:	5b 53 53 38 30 20 47 50 49 42 20 57 72 69 74 65     [SS80 GPIB Write
    258e:	20 45 72 72 6f 72 5d 0a 00                           Error]..

00002597 <__c.4285>:
    2597:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    25a7:	45 72 72 6f 72 5d 0a 00                             Error]..

000025af <__c.4283>:
    25af:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    25bf:	25 30 32 58 48 20 62 79 74 65 73 5d 0a 00           %02XH bytes]..

000025cd <__c.4281>:
    25cd:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    25dd:	20 52 65 61 64 20 61 74 20 25 30 38 6c 58 48 28      Read at %08lXH(
    25ed:	25 6c 58 48 29 5d 0a 00                             %lXH)]..

000025f5 <__c.4264>:
    25f5:	5b 53 53 38 30 20 45 58 45 43 20 73 74 61 74 65     [SS80 EXEC state
    2605:	3a 25 64 20 65 72 72 6f 72 5d 0a 00                 :%d error]..

00002611 <__c.4248>:
    2611:	5b 53 53 38 30 20 25 30 32 58 48 20 49 4e 49 54     [SS80 %02XH INIT
    2621:	5d 0a 00                                            ]..

00002624 <__c.4364>:
    2624:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2634:	65 71 75 65 73 74 20 4c 6f 67 69 63 61 6c 20 41     equest Logical A
    2644:	64 64 72 65 73 73 5d 0a 00                          ddress]..

0000264d <__c.4361>:
    264d:	5b 41 4d 49 47 4f 20 45 78 69 63 75 74 65 20 52     [AMIGO Exicute R
    265d:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 55 6e     equest Status Un
    266d:	62 75 66 66 65 72 65 64 5d 0a 00                    buffered]..

00002678 <__c.4358>:
    2678:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2688:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 42 75     equest Status Bu
    2698:	66 66 65 72 65 64 5d 0a 00                          ffered]..

000026a1 <__c.4353>:
    26a1:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    26b1:	72 69 74 65 20 42 75 66 66 65 72 65 64 5d 0a 00     rite Buffered]..

000026c1 <__c.4350>:
    26c1:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 49     [AMIGO Execute I
    26d1:	6e 69 74 69 61 6c 69 7a 65 5d 0a 00                 nitialize]..

000026dd <__c.4347>:
    26dd:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    26ed:	72 69 74 65 20 55 6e 62 75 66 66 65 72 65 64 5d     rite Unbuffered]
    26fd:	0a 00                                               ..

000026ff <__c.4344>:
    26ff:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    270f:	65 61 64 20 42 75 66 66 65 72 65 64 5d 0a 00        ead Buffered]..

0000271e <__c.4341>:
    271e:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    272e:	65 61 64 20 55 6e 62 75 66 66 65 72 65 64 5d 0a     ead Unbuffered].
	...

0000273f <__c.4338>:
    273f:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 43     [AMIGO Execute C
    274f:	6f 6c 64 20 4c 6f 61 64 20 52 65 61 64 5d 0a 00     old Load Read]..

0000275f <__c.4334>:
    275f:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 28 25     [AMIGO Execute(%
    276f:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    277f:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    278f:	0a 00                                               ..

00002791 <__c.4329>:
    2791:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 5d 0a 00     [AMIGO Format]..

000027a1 <__c.4326>:
    27a1:	5b 41 4d 49 47 4f 20 52 65 61 64 20 42 75 66 66     [AMIGO Read Buff
    27b1:	65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00        ered Command]..

000027c0 <__c.4324>:
    27c0:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    27d0:	74 61 74 75 73 20 55 6e 62 75 66 66 65 72 65 64     tatus Unbuffered
    27e0:	20 43 6f 6d 6d 61 6e 64 5d 0a 00                     Command]..

000027eb <__c.4322>:
    27eb:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 42 75 66     [AMIGO Write Buf
    27fb:	66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00     fered Command]..

0000280b <__c.4320>:
    280b:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 4c     [AMIGO Request L
    281b:	6f 67 69 63 61 6c 20 41 64 64 72 65 73 73 20 43     ogical Address C
    282b:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

00002834 <__c.4318>:
    2834:	5b 41 4d 49 47 4f 20 49 6e 69 74 69 61 6c 69 7a     [AMIGO Initializ
    2844:	65 20 43 6f 6d 6d 61 6e 64 5d 0a 00                 e Command]..

00002850 <__c.4316>:
    2850:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 55 6e 62     [AMIGO Write Unb
    2860:	75 66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d     uffered Command]
    2870:	0a 00                                               ..

00002872 <__c.4314>:
    2872:	5b 41 4d 49 47 4f 20 56 65 72 69 66 79 5d 0a 00     [AMIGO Verify]..

00002882 <__c.4311>:
    2882:	5b 41 4d 49 47 4f 20 52 65 61 64 20 55 6e 62 75     [AMIGO Read Unbu
    2892:	66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a     ffered Command].
	...

000028a3 <__c.4309>:
    28a3:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    28b3:	74 61 74 75 73 20 42 75 66 66 65 72 65 64 20 43     tatus Buffered C
    28c3:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

000028cc <__c.4307>:
    28cc:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    28dc:	36 5d 0a 00                                         6]..

000028e0 <__c.4304>:
    28e0:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    28f0:	35 5d 0a 00                                         5]..

000028f4 <__c.4301>:
    28f4:	5b 41 4d 49 47 4f 20 43 6f 6c 64 20 4c 6f 61 64     [AMIGO Cold Load
    2904:	20 52 65 61 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00      Read Command]..

00002914 <__c.4298>:
    2914:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    2924:	30 32 58 48 29 3a 20 47 50 49 42 20 72 65 61 64     02XH): GPIB read
    2934:	20 62 79 74 65 73 3a 25 30 32 58 48 5d 0a 00         bytes:%02XH]..

00002943 <__c.4296>:
    2943:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    2953:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

00002964 <__c.4294>:
    2964:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    2974:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

00002985 <__c.4292>:
    2985:	5b 41 4d 49 47 4f 5f 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO_Command:G
    2995:	50 49 42 20 77 72 69 74 65 20 65 72 72 6f 72 5d     PIB write error]
    29a5:	0a 00                                               ..

000029a7 <__c.4290>:
    29a7:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    29b7:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    29c7:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    29d7:	0a 00                                               ..

000029d9 <__c.4278>:
    29d9:	5b 45 20 20 20 41 6d 69 67 6f 20 45 52 52 4f 52     [E   Amigo ERROR
    29e9:	20 73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58      secondary: %02X
    29f9:	48 2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20     H, state:%02XH, 
    2a09:	6c 69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c     listening:%02XH,
    2a19:	20 74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a      talking:%02XH].
	...

00002a2a <__c.4276>:
    2a2a:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    2a3a:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2a4a:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2a5a:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2a6a:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002a7a <__c.4274>:
    2a7a:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    2a8a:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2a9a:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2aaa:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2aba:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002aca <__c.4272>:
    2aca:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    2ada:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2aea:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2afa:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2b0a:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002b1a <__c.4267>:
    2b1a:	5b 55 20 41 6d 69 67 6f 20 54 4f 44 4f 20 73 65     [U Amigo TODO se
    2b2a:	63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48 2c 20     condary: %02XH, 
    2b3a:	73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f 70 63     state:%02XH, opc
    2b4a:	6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e 3a 25     ode:%02XH, len:%
    2b5a:	33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a 25 30     3d, listening:%0
    2b6a:	32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25 30 32     2XH, talking:%02
    2b7a:	58 48 5d 0a 00                                      XH]..

00002b7f <__c.4265>:
    2b7f:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    2b8f:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2b9f:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2baf:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2bbf:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2bcf:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2bdf:	30 32 58 48 5d 0a 00                                02XH]..

00002be6 <__c.4263>:
    2be6:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    2bf6:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2c06:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2c16:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2c26:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2c36:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2c46:	30 32 58 48 5d 0a 00                                02XH]..

00002c4d <__c.4261>:
    2c4d:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    2c5d:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2c6d:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2c7d:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2c8d:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2c9d:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2cad:	30 32 58 48 5d 0a 00                                02XH]..

00002cb4 <__c.4254>:
    2cb4:	5b 41 4d 49 47 4f 20 43 6c 65 61 72 5d 0a 00        [AMIGO Clear]..

00002cc3 <__c.4241>:
    2cc3:	5b 44 53 4a 20 25 30 32 58 48 5d 0a 00              [DSJ %02XH]..

00002cd0 <__c.4239>:
    2cd0:	5b 41 49 4d 47 4f 3a 20 44 53 4a 20 73 65 6e 64     [AIMGO: DSJ send
    2ce0:	20 66 61 69 6c 65 64 5d 0a 00                        failed]..

00002cea <__c.4232>:
    2cea:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 64 69 73     [AMIGO Write dis
    2cfa:	6b 20 77 72 69 74 65 20 65 72 72 6f 72 5d 0a 00     k write error]..

00002d0a <__c.4230>:
    2d0a:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 47 50 49     [AMIGO Write GPI
    2d1a:	42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a 00        B read error]..

00002d29 <__c.4228>:
    2d29:	41 4d 49 47 4f 73 2d 3e 73 74 61 74 65 3a 25 64     AMIGOs->state:%d
    2d39:	0a 00                                               ..

00002d3b <__c.4221>:
    2d3b:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2d4b:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002d55 <__c.4215>:
    2d55:	41 4d 49 47 4f 73 2d 3e 73 74 61 74 65 3a 25 64     AMIGOs->state:%d
    2d65:	0a 00                                               ..

00002d67 <__c.4209>:
    2d67:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 20 44 6f     [AMIGO Format Do
    2d77:	6e 65 5d 0a 00                                      ne]..

00002d7c <__c.4205>:
    2d7c:	5b 41 4d 49 47 4f 20 66 6f 72 6d 61 74 5d 0a 00     [AMIGO format]..

00002d8c <__c.4164>:
    2d8c:	5b 41 4d 49 47 4f 20 25 73 2c 20 50 3a 25 30 38     [AMIGO %s, P:%08
    2d9c:	6c 78 48 2c 20 55 3a 25 64 20 43 3a 25 64 20 48     lxH, U:%d C:%d H
    2dac:	3a 25 64 20 53 3a 25 64 5d 0a 00                    :%d S:%d]..

00002db7 <__c.4194>:
    2db7:	5b 41 4d 49 47 4f 20 76 65 72 69 66 79 20 50 3a     [AMIGO verify P:
    2dc7:	25 30 38 6c 58 48 2c 20 73 65 63 74 6f 72 73 3a     %08lXH, sectors:
    2dd7:	25 30 34 58 48 5d 0a 00                             %04XH]..

00002ddf <__c.4171>:
    2ddf:	5b 41 4d 49 47 4f 20 25 73 20 70 6f 73 20 4f 56     [AMIGO %s pos OV
    2def:	45 52 46 4c 4f 57 5d 0a 00                          ERFLOW]..

00002df8 <__c.4157>:
    2df8:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2e08:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002e12 <__c.4155>:
    2e12:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 73 74 61 74     [AMIGO send stat
    2e22:	75 73 5d 0a 00                                      us]..

00002e27 <__c.4149>:
    2e27:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2e37:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002e41 <__c.4147>:
    2e41:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 6c 6f 67 69     [AMIGO send logi
    2e51:	63 61 6c 20 61 64 64 72 65 73 73 5d 0a 00           cal address]..

00002e5f <__c.4141>:
    2e5f:	5b 41 4d 49 47 4f 20 72 65 71 75 65 73 74 20 73     [AMIGO request s
    2e6f:	74 61 74 75 73 5d 0a 00                             tatus]..

00002e77 <__c.4126>:
    2e77:	5b 53 43 20 50 52 49 4e 54 45 52 20 54 61 6c 6b     [SC PRINTER Talk
    2e87:	3a 20 25 30 32 58 48 5d 0a 00                       : %02XH]..

00002e91 <__c.4124>:
    2e91:	5b 53 43 20 50 52 49 4e 54 45 52 20 4c 69 73 74     [SC PRINTER List
    2ea1:	65 6e 3a 20 25 30 32 58 48 5d 0a 00                 en: %02XH]..

00002ead <__c.4119>:
    2ead:	25 30 38 6c 64 0d 00                                %08ld..

00002eb4 <__c.4113>:
    2eb4:	77 72 69 74 65 20 66 61 69 6c 65 64 3a 20 77 61     write failed: wa
    2ec4:	6e 74 65 64 20 25 64 2c 20 67 6f 74 3a 25 64 0a     nted %d, got:%d.
	...

00002ed5 <__c.4107>:
    2ed5:	0a 44 4f 4e 45 3a 20 25 30 38 6c 64 0a 00           .DONE: %08ld..

00002ee3 <__c.4105>:
    2ee3:	45 52 52 4f 52 20 64 75 72 72 69 6e 67 20 77 72     ERROR durring wr
    2ef3:	69 74 65 0a 00                                      ite..

00002ef8 <__c.4099>:
    2ef8:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

00002f04 <__c.4097>:
    2f04:	43 61 70 74 75 72 69 6e 67 20 70 6c 6f 74 20 74     Capturing plot t
    2f14:	6f 3a 25 73 0a 00                                   o:%s..

00002f1a <__c.4095>:
    2f1a:	2f 70 6c 6f 74 2d 25 30 32 64 25 73 25 30 34 64     /plot-%02d%s%04d
    2f2a:	2d 25 30 32 64 25 30 32 64 25 30 32 64 2e 70 6c     -%02d%02d%02d.pl
    2f3a:	74 00                                               t.

00002f3c <__c.4556>:
    2f3c:	09 46 6f 72 6d 61 74 74 69 6e 67 3a 20 77 72 6f     .Formatting: wro
    2f4c:	74 65 20 25 6c 64 20 73 65 63 74 6f 72 73 0a 00     te %ld sectors..

00002f5c <__c.4554>:
    2f5c:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    2f6c:	3a 20 73 65 63 74 6f 72 73 20 69 73 20 30 0a 00     : sectors is 0..

00002f7c <__c.4552>:
    2f7c:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    2f8c:	3a 20 64 69 72 73 65 63 74 6f 72 73 20 69 73 20     : dirsectors is 
    2f9c:	30 0a 00                                            0..

00002f9f <__c.4550>:
    2f9f:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    2faf:	3a 20 6c 69 66 6c 61 62 65 6c 20 69 73 20 65 6d     : liflabel is em
    2fbf:	70 74 79 0a 00                                      pty..

00002fc4 <__c.4548>:
    2fc4:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    2fd4:	3a 20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69     : lifimagename i
    2fe4:	73 20 65 6d 70 74 79 0a 00                          s empty..

00002fed <__c.4535>:
    2fed:	72 65 6e 61 6d 65 64 3a 20 25 31 30 73 20 74 6f     renamed: %10s to
    2ffd:	20 25 31 30 73 0a 00                                 %10s..

00003004 <__c.4533>:
    3004:	6c 69 66 5f 72 65 6e 61 6d 65 3a 5b 25 73 5d 20     lif_rename:[%s] 
    3014:	6c 69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f     lif name:[%s] no
    3024:	74 20 66 6f 75 6e 64 0a 00                          t found..

0000302d <__c.4531>:
    302d:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    303d:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 63 6f 6e      new lifname con
    304d:	74 61 69 6e 73 20 62 61 64 20 63 68 61 72 61 63     tains bad charac
    305d:	74 65 72 73 0a 00                                   ters..

00003063 <__c.4529>:
    3063:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    3073:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 69 73 20      new lifname is 
    3083:	65 6d 70 74 79 0a 00                                empty..

0000308a <__c.4527>:
    308a:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    309a:	20 6f 6c 64 20 6c 69 66 6e 61 6d 65 20 69 73 20      old lifname is 
    30aa:	65 6d 70 74 79 0a 00                                empty..

000030b1 <__c.4525>:
    30b1:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    30c1:	20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69 73      lifimagename is
    30d1:	20 65 6d 70 74 79 0a 00                              empty..

000030d9 <__c.4516>:
    30d9:	44 65 6c 65 74 65 64 3a 20 25 31 30 73 0a 00        Deleted: %10s..

000030e8 <__c.4514>:
    30e8:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 20 6c     LIF image:[%s] l
    30f8:	69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f 74     if name:[%s] not
    3108:	20 66 6f 75 6e 64 0a 00                              found..

00003110 <__c.4512>:
    3110:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3120:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 0a 00        LIF name:[%s]..

0000312f <__c.4510>:
    312f:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    313f:	66 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     fname is empty..

0000314f <__c.4508>:
    314f:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    315f:	66 69 6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d     fimagename is em
    316f:	70 74 79 0a 00                                      pty..

00003174 <__c.4500>:
    3174:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

00003182 <__c.4495>:
    3182:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003190 <__c.4493>:
    3190:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    31a0:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    31b0:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

000031c0 <__c.4491>:
    31c0:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    31d0:	73 0a 00                                            s..

000031d3 <__c.4489>:
    31d3:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    31e3:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    31f3:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

00003202 <__c.4487>:
    3202:	6c 69 66 5f 61 64 64 3a 20 75 73 65 72 66 69 6c     lif_add: userfil
    3212:	65 20 69 73 20 65 6d 70 74 79 0a 00                 e is empty..

0000321e <__c.4485>:
    321e:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 6e 61 6d 65     lif_add: lifname
    322e:	20 69 73 20 65 6d 70 74 79 0a 00                     is empty..

00003239 <__c.4483>:
    3239:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 69 6d 61 67     lif_add: lifimag
    3249:	65 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     ename is empty..

00003259 <__c.4466>:
    3259:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

00003267 <__c.4461>:
    3267:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003275 <__c.4459>:
    3275:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    3285:	73 0a 00                                            s..

00003288 <__c.4457>:
    3288:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    3298:	75 6e 64 3a 25 73 0a 00                             und:%s..

000032a0 <__c.4440>:
    32a0:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

000032ae <__c.4437>:
    32ae:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    32be:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    32ce:	20 65 72 72 6f 72 0a 00                              error..

000032d6 <__c.4429>:
    32d6:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

000032e4 <__c.4427>:
    32e4:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    32f4:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    3304:	20 65 72 72 6f 72 0a 00                              error..

0000330c <__c.4424>:
    330c:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    331c:	5f 61 73 5f 61 73 63 69 69 3a 20 75 6e 65 78 70     _as_ascii: unexp
    332c:	65 63 74 65 64 20 63 6f 6e 74 72 6f 6c 20 62 79     ected control by
    333c:	74 65 3a 5b 25 30 32 58 48 5d 20 40 20 6f 66 66     te:[%02XH] @ off
    334c:	73 65 74 3a 20 25 38 6c 78 2c 20 69 6e 64 3a 25     set: %8lx, ind:%
    335c:	30 32 58 48 0a 00                                   02XH..

00003362 <__c.4422>:
    3362:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    3372:	5f 61 73 5f 61 73 63 69 69 3a 20 73 74 72 69 6e     _as_ascii: strin
    3382:	67 20 74 6f 6f 20 62 69 67 20 73 69 7a 65 20 3d     g too big size =
    3392:	20 25 64 0a 00                                       %d..

00003397 <__c.4418>:
    3397:	45 78 74 72 61 63 74 69 6e 67 3a 20 25 73 0a 00     Extracting: %s..

000033a7 <__c.4416>:
    33a7:	46 69 6c 65 20 25 73 20 68 61 73 20 77 72 6f 6e     File %s has wron
    33b7:	67 20 74 79 70 65 3a 5b 25 30 34 58 48 5d 20 65     g type:[%04XH] e
    33c7:	78 70 65 63 74 65 64 20 30 78 45 30 31 30 2e 2e     xpected 0xE010..
    33d7:	30 78 45 30 31 33 0a 00                             0xE013..

000033df <__c.4414>:
    33df:	4c 49 46 20 46 69 6c 65 20 6e 6f 74 20 66 6f 75     LIF File not fou
    33ef:	6e 64 3a 25 73 0a 00                                nd:%s..

000033f6 <__c.4412>:
    33f6:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    3406:	75 6e 64 3a 25 73 0a 00                             und:%s..

0000340e <__c.4388>:
    340e:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

0000341c <__c.4386>:
    341c:	46 69 6c 65 20 53 65 63 74 6f 72 73 3a 20 20 20     File Sectors:   
    342c:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

00003435 <__c.4384>:
    3435:	46 69 72 73 74 20 53 65 63 74 6f 72 3a 20 20 20     First Sector:   
    3445:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

0000344e <__c.4382>:
    344e:	49 6e 64 65 78 3a 20 20 20 20 20 20 20 20 20 20     Index:          
    345e:	20 20 25 34 64 0a 00                                  %4d..

00003465 <__c.4380>:
    3465:	4e 61 6d 65 3a 20 20 20 20 20 20 20 20 20 20 20     Name:           
    3475:	20 20 20 25 73 0a 00                                   %s..

0000347c <__c.4378>:
    347c:	4e 65 77 20 44 69 72 65 63 74 6f 72 79 20 49 6e     New Directory In
    348c:	66 6f 72 6d 61 74 69 6f 6e 20 41 46 54 45 52 20     formation AFTER 
    349c:	77 72 69 74 65 0a 00                                write..

000034a3 <__c.4376>:
    34a3:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    34b3:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    34c3:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

000034d3 <__c.4374>:
    34d3:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    34e3:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    34f3:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

00003502 <__c.4372>:
    3502:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    3512:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    3522:	66 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 0a 00     file not found..

00003532 <__c.4370>:
    3532:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    3542:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    3552:	66 69 6c 65 20 69 73 20 65 6d 70 74 79 0a 00        file is empty..

00003561 <__c.4368>:
    3561:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    3571:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 6e     le_as_e010: lifn
    3581:	61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00           ame is empty..

0000358f <__c.4366>:
    358f:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    359f:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 69     le_as_e010: lifi
    35af:	6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d 70 74     magename is empt
    35bf:	79 0a 00                                            y..

000035c2 <__c.4352>:
    35c2:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

000035d0 <__c.4350>:
    35d0:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

000035de <__c.4345>:
    35de:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

000035ec <__c.4328>:
    35ec:	45 78 70 65 63 74 65 64 20 73 65 63 74 6f 72 20     Expected sector 
    35fc:	62 6f 75 6e 64 72 79 2c 20 6f 66 66 73 65 74 3a     boundry, offset:
    360c:	25 64 0a 00                                         %d..

00003610 <__c.4311>:
    3610:	6c 69 66 5f 65 30 31 30 5f 64 61 70 5f 73 65 63     lif_e010_dap_sec
    3620:	74 6f 72 3a 20 65 78 70 65 63 74 65 64 20 73 65     tor: expected se
    3630:	63 74 6f 72 20 62 6f 75 6e 64 72 79 3a 20 6f 66     ctor boundry: of
    3640:	66 73 65 74 3a 25 64 0a 00                          fset:%d..

00003649 <__c.4297>:
    3649:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    3659:	73 5d 20 6c 69 66 6c 61 62 65 6c 20 74 6f 6f 20     s] liflabel too 
    3669:	62 69 67 0a 00                                      big..

0000366e <__c.4295>:
    366e:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    367e:	73 5d 20 69 6e 76 61 6c 69 64 20 63 68 61 72 61     s] invalid chara
    368e:	63 74 65 72 73 0a 00                                cters..

00003695 <__c.4288>:
    3695:	25 38 6c 64 20 46 72 65 65 20 73 65 63 74 6f 72     %8ld Free sector
    36a5:	73 0a 00                                            s..

000036a8 <__c.4286>:
    36a8:	25 38 6c 64 20 55 73 65 64 20 73 65 63 74 6f 72     %8ld Used sector
    36b8:	73 0a 00                                            s..

000036bb <__c.4284>:
    36bb:	25 38 6c 64 20 44 69 72 20 20 73 65 63 74 6f 72     %8ld Dir  sector
    36cb:	73 0a 00                                            s..

000036ce <__c.4282>:
    36ce:	25 38 6c 64 20 44 69 72 20 20 73 74 61 72 74 0a     %8ld Dir  start.
	...

000036df <__c.4280>:
    36df:	25 38 6c 64 20 50 75 72 67 65 64 0a 00              %8ld Purged..

000036ec <__c.4278>:
    36ec:	25 38 6c 64 20 46 69 6c 65 73 0a 00                 %8ld Files..

000036f8 <__c.4276>:
    36f8:	0a 00                                               ..

000036fa <__c.4273>:
    36fa:	25 2d 31 30 73 20 20 25 30 34 58 68 20 20 20 20     %-10s  %04Xh    
    370a:	20 20 25 38 6c 58 68 20 20 20 25 39 6c 64 25 63       %8lXh   %9ld%c
    371a:	20 20 20 20 20 20 25 34 64 20 20 20 25 73 0a 00           %4d   %s..

0000372a <__c.4271>:
    372a:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    373a:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    374a:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    375a:	6f 72 73 3a 25 6c 64 20 21 3d 20 46 69 6c 65 53     ors:%ld != FileS
    376a:	65 63 74 6f 72 73 3a 25 6c 64 0a 00                 ectors:%ld..

00003776 <__c.4268>:
    3776:	4e 41 4d 45 20 20 20 20 20 20 20 20 20 54 59 50     NAME         TYP
    3786:	45 20 20 20 53 54 41 52 54 20 53 45 43 54 4f 52     E   START SECTOR
    3796:	20 20 20 20 20 20 20 20 53 49 5a 45 20 20 20 20             SIZE    
    37a6:	52 45 43 53 49 5a 45 20 20 20 44 41 54 45 0a 00     RECSIZE   DATE..

000037b6 <__c.4266>:
    37b6:	56 6f 6c 75 6d 65 3a 5b 25 73 5d 20 44 61 74 65     Volume:[%s] Date
    37c6:	3a 5b 25 73 5d 0a 00                                :[%s]..

000037cd <__c.4256>:
    37cd:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    37dd:	5b 25 73 5d 20 65 72 72 6f 72 20 64 69 72 65 63     [%s] error direc
    37ed:	74 6f 72 79 20 63 68 65 63 6b 20 66 61 69 6c 65     tory check faile
    37fd:	64 0a 00                                            d..

00003800 <__c.4254>:
    3800:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3810:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    3820:	65 20 76 61 6c 69 64 61 74 65 20 66 61 69 6c 65     e validate faile
    3830:	64 0a 00                                            d..

00003833 <__c.4252>:
    3833:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3843:	5b 25 73 5d 20 65 72 72 6f 72 20 72 65 61 64 20     [%s] error read 
    3853:	76 6f 6c 75 6d 65 20 68 65 61 64 65 72 20 66 61     volume header fa
    3863:	69 6c 65 64 0a 00                                   iled..

00003869 <__c.4250>:
    3869:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3879:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    3889:	65 20 68 65 61 64 65 72 20 61 72 65 61 20 74 6f     e header area to
    3899:	6f 20 73 6d 61 6c 6c 3a 5b 25 6c 64 5d 0a 00        o small:[%ld]..

000038a8 <__c.4237>:
    38a8:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 69 6e 64 65     lif_newdir: inde
    38b8:	78 3a 5b 25 64 5d 20 61 64 64 69 6e 67 20 61 74     x:[%d] adding at
    38c8:	3a 5b 25 6c 64 5d 74 6f 20 70 75 72 67 65 64 20     :[%ld]to purged 
    38d8:	73 70 61 63 65 3a 5b 25 6c 64 5d 20 73 65 63 74     space:[%ld] sect
    38e8:	6f 72 73 2c 20 66 72 65 65 3a 5b 25 6c 64 5d 0a     ors, free:[%ld].
	...

000038f9 <__c.4234>:
    38f9:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    3909:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    3919:	65 3a 5b 25 6c 64 5d 0a 00                          e:[%ld]..

00003922 <__c.4232>:
    3922:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    3932:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    3942:	65 3a 5b 25 6c 64 5d 20 66 6f 72 20 73 69 7a 65     e:[%ld] for size
    3952:	3a 5b 25 6c 64 5d 0a 00                             :[%ld]..

0000395a <__c.4220>:
    395a:	6c 69 66 5f 75 70 64 61 74 65 5f 66 72 65 65 3a     lif_update_free:
    396a:	5b 25 73 5d 20 65 72 72 6f 72 20 70 72 65 76 69     [%s] error previ
    397a:	6f 75 73 20 72 65 63 6f 72 64 20 66 69 6c 65 20     ous record file 
    398a:	61 72 65 61 20 6f 76 65 72 6c 61 70 73 20 74 68     area overlaps th
    399a:	69 73 20 6f 6e 65 3a 5b 25 73 5d 0a 00              is one:[%s]..

000039a7 <__c.4195>:
    39a7:	6c 69 66 5f 63 68 65 63 6b 5f 64 69 72 3a 20 65     lif_check_dir: e
    39b7:	72 72 6f 72 2c 20 69 6e 64 65 78 3a 25 64 0a 00     rror, index:%d..

000039c7 <__c.4186>:
    39c7:	6c 69 66 5f 63 68 65 63 6b 64 69 72 69 6e 64 65     lif_checkdirinde
    39d7:	78 3a 5b 25 73 5d 20 64 69 72 65 63 6f 72 79 20     x:[%s] direcory 
    39e7:	69 6e 64 65 78 3a 5b 25 64 5d 20 6f 75 74 20 6f     index:[%d] out o
    39f7:	66 20 62 6f 75 6e 64 73 0a 00                       f bounds..

00003a01 <__c.4167>:
    3a01:	09 57 72 6f 74 65 3a 20 25 6c 64 0a 00              .Wrote: %ld..

00003a0e <__c.4162>:
    3a0e:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

00003a1b <__c.4157>:
    3a1b:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

00003a28 <__c.4149>:
    3a28:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

00003a35 <__c.4147>:
    3a35:	43 72 65 61 74 69 6e 67 3a 25 73 2c 20 4c 61 62     Creating:%s, Lab
    3a45:	65 6c 3a 5b 25 73 5d 2c 20 44 69 72 65 63 74 6f     el:[%s], Directo
    3a55:	72 79 20 53 74 61 72 74 20 25 6c 64 2c 20 44 69     ry Start %ld, Di
    3a65:	72 65 63 74 6f 72 79 20 53 69 7a 65 3a 20 25 6c     rectory Size: %l
    3a75:	64 2c 20 46 69 6c 65 20 53 65 63 74 6f 72 73 3a     d, File Sectors:
    3a85:	25 6c 64 0a 00                                      %ld..

00003a8a <__c.4131>:
    3a8a:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3a9a:	73 5d 20 69 6e 76 61 6c 69 64 20 73 65 63 74 6f     s] invalid secto
    3aaa:	72 20 73 69 7a 65 3a 25 6c 64 0a 00                 r size:%ld..

00003ab6 <__c.4129>:
    3ab6:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3ac6:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3ad6:	79 74 65 73 20 3d 3d 20 30 0a 00                    ytes == 0..

00003ae1 <__c.4127>:
    3ae1:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3af1:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    3b01:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3b11:	6f 72 73 3a 25 6c 64 20 3c 20 46 69 6c 65 53 65     ors:%ld < FileSe
    3b21:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003b2c <__c.4125>:
    3b2c:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3b3c:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3b4c:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3b5c:	6f 72 73 3a 25 6c 64 20 3e 20 46 69 6c 65 53 65     ors:%ld > FileSe
    3b6c:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003b77 <__c.4123>:
    3b77:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3b87:	73 5d 20 69 6e 76 61 6c 69 64 20 56 6f 6c 75 6d     s] invalid Volum
    3b97:	65 20 4e 75 6d 62 65 72 3a 25 58 68 0a 00           e Number:%Xh..

00003ba5 <__c.4121>:
    3ba5:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3bb5:	73 5d 20 69 6e 76 61 6c 69 64 20 65 6e 64 20 73     s] invalid end s
    3bc5:	65 63 74 6f 72 3a 25 6c 58 68 20 3e 20 74 6f 74     ector:%lXh > tot
    3bd5:	61 6c 20 73 65 63 74 6f 72 73 3a 25 6c 58 68 0a     al sectors:%lXh.
	...

00003be6 <__c.4119>:
    3be6:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3bf6:	73 5d 20 69 6e 76 61 6c 69 64 20 73 74 61 72 74     s] invalid start
    3c06:	20 73 65 63 74 6f 72 3a 25 6c 58 68 20 3c 20 66      sector:%lXh < f
    3c16:	69 65 20 61 72 65 61 20 73 74 61 72 74 3a 25 6c     ie area start:%l
    3c26:	58 68 0a 00                                         Xh..

00003c2a <__c.4117>:
    3c2a:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3c3a:	73 5d 20 69 6e 76 61 6c 69 64 20 4e 61 6d 65 0a     s] invalid Name.
	...

00003c4b <__c.4111>:
    3c4b:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3c5b:	69 64 20 66 69 6c 65 20 73 74 61 72 74 20 3e 20     id file start > 
    3c6b:	69 6d 61 67 65 20 73 69 7a 65 0a 00                 image size..

00003c77 <__c.4109>:
    3c77:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3c87:	69 64 20 44 69 72 65 63 74 6f 72 79 20 53 65 63     id Directory Sec
    3c97:	74 6f 72 20 43 6f 75 6e 74 20 3c 20 31 0a 00        tor Count < 1..

00003ca6 <__c.4107>:
    3ca6:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3cb6:	69 64 20 73 74 61 72 74 20 73 65 63 74 6f 72 3a     id start sector:
    3cc6:	25 6c 64 0a 00                                      %ld..

00003ccb <__c.4105>:
    3ccb:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3cdb:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    3ceb:	65 74 20 32 32 26 32 33 20 73 68 6f 75 6c 64 20     et 22&23 should 
    3cfb:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00003d04 <__c.4103>:
    3d04:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3d14:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    3d24:	65 74 20 31 34 26 31 35 20 73 68 6f 75 6c 64 20     et 14&15 should 
    3d34:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00003d3d <__c.4101>:
    3d3d:	4c 49 46 20 56 65 72 73 69 6f 6e 3a 20 25 30 34     LIF Version: %04
    3d4d:	58 48 20 3e 20 31 0a 00                             XH > 1..

00003d55 <__c.4099>:
    3d55:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3d65:	69 64 20 53 79 73 74 65 6d 33 30 30 30 20 49 44     id System3000 ID
    3d75:	20 28 25 30 34 58 48 29 20 65 78 70 65 63 74 65      (%04XH) expecte
    3d85:	64 20 31 30 30 30 48 0a 00                          d 1000H..

00003d8e <__c.4097>:
    3d8e:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3d9e:	69 64 20 56 6f 6c 75 6d 65 20 4e 61 6d 65 00        id Volume Name.

00003dad <__c.4090>:
    3dad:	0a 00                                               ..

00003daf <__c.4088>:
    3daf:	44 49 52 20 46 69 6c 65 20 44 61 74 65 3a 20 20     DIR File Date:  
    3dbf:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003dc9 <__c.4086>:
    3dc9:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 20     DIR File sector 
    3dd9:	73 69 7a 65 3a 20 25 38 58 68 0a 00                 size: %8Xh..

00003de5 <__c.4084>:
    3de5:	44 49 52 20 46 69 6c 65 20 62 79 74 65 73 3a 20     DIR File bytes: 
    3df5:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003e02 <__c.4082>:
    3e02:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 73     DIR File sectors
    3e12:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

00003e1f <__c.4080>:
    3e1f:	44 49 52 20 46 69 6c 65 20 73 74 61 72 74 3a 20     DIR File start: 
    3e2f:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003e3c <__c.4078>:
    3e3c:	44 49 52 20 46 69 6c 65 20 56 6f 6c 75 6d 65 23     DIR File Volume#
    3e4c:	3a 20 20 20 20 20 25 38 58 68 0a 00                 :     %8Xh..

00003e58 <__c.4076>:
    3e58:	44 49 52 20 46 69 6c 65 20 54 79 70 65 3a 20 20     DIR File Type:  
    3e68:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00003e74 <__c.4074>:
    3e74:	44 49 52 20 46 69 6c 65 20 4e 61 6d 65 3a 20 20     DIR File Name:  
    3e84:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003e8e <__c.4072>:
    3e8e:	56 4f 4c 20 44 61 74 65 3a 20 20 20 20 20 20 20     VOL Date:       
    3e9e:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003ea8 <__c.4070>:
    3ea8:	56 4f 4c 20 4c 49 46 56 65 72 73 69 6f 6e 3a 20     VOL LIFVersion: 
    3eb8:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00003ec4 <__c.4068>:
    3ec4:	56 4f 4c 20 33 30 30 30 4c 49 46 69 64 3a 20 20     VOL 3000LIFid:  
    3ed4:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00003ee0 <__c.4066>:
    3ee0:	56 4f 4c 20 44 69 72 20 73 65 63 74 6f 72 73 3a     VOL Dir sectors:
    3ef0:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003efd <__c.4064>:
    3efd:	56 4f 4c 20 44 69 72 20 73 74 61 72 74 3a 20 20     VOL Dir start:  
    3f0d:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003f1a <__c.4062>:
    3f1a:	56 4f 4c 20 4c 49 46 69 64 3a 20 20 20 20 20 20     VOL LIFid:      
    3f2a:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00003f36 <__c.4060>:
    3f36:	56 4f 4c 20 4c 61 62 65 6c 3a 20 20 20 20 20 20     VOL Label:      
    3f46:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003f50 <__c.4058>:
    3f50:	4c 49 46 20 70 75 72 67 65 64 3a 20 20 20 20 20     LIF purged:     
    3f60:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003f6d <__c.4056>:
    3f6d:	4c 49 46 20 66 69 6c 65 73 3a 20 20 20 20 20 20     LIF files:      
    3f7d:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003f8a <__c.4054>:
    3f8a:	4c 49 46 20 66 72 65 65 3a 20 20 20 20 20 20 20     LIF free:       
    3f9a:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003fa7 <__c.4052>:
    3fa7:	4c 49 46 20 75 73 65 64 3a 20 20 20 20 20 20 20     LIF used:       
    3fb7:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003fc4 <__c.4050>:
    3fc4:	4c 49 46 20 66 69 6c 65 20 73 65 63 74 6f 72 73     LIF file sectors
    3fd4:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

00003fe1 <__c.4048>:
    3fe1:	4c 49 46 20 66 69 6c 65 73 74 61 72 74 3a 20 20     LIF filestart:  
    3ff1:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003ffe <__c.4046>:
    3ffe:	4c 49 46 20 62 79 74 65 73 3a 20 20 20 20 20 20     LIF bytes:      
    400e:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

0000401b <__c.4044>:
    401b:	4c 49 46 20 73 65 63 74 6f 72 73 3a 20 20 20 20     LIF sectors:    
    402b:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004038 <__c.4042>:
    4038:	4c 49 46 20 6e 61 6d 65 3a 20 20 20 20 20 20 20     LIF name:       
    4048:	20 20 20 20 20 20 25 73 0a 00                             %s..

00004052 <__c.4040>:
    4052:	0a 25 73 0a 00                                      .%s..

00004057 <__c.3917>:
    4057:	6c 69 66 5f 77 72 69 74 65 3a 20 57 72 69 74 65     lif_write: Write
    4067:	3a 5b 25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c     :[%s] offset:[%l
    4077:	64 5d 20 77 72 69 74 65 3a 5b 25 64 5d 20 65 78     d] write:[%d] ex
    4087:	70 65 63 74 65 64 3a 5b 25 64 5d 0a 00              pected:[%d]..

00004094 <__c.3908>:
    4094:	6c 69 66 5f 72 65 61 64 3a 20 72 65 61 64 3a 5b     lif_read: read:[
    40a4:	25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c 64 5d     %s] offset:[%ld]
    40b4:	20 77 72 69 74 65 3a 5b 25 6c 64 5d 20 65 78 70      write:[%ld] exp
    40c4:	65 63 74 65 64 3a 5b 25 64 5d 0a 00                 ected:[%d]..

000040d0 <__c.3899>:
    40d0:	6c 69 66 5f 72 65 61 64 5f 6d 73 67 3a 20 25 73     lif_read_msg: %s
    40e0:	20 53 65 65 6b 20 65 72 72 6f 72 20 25 6c 64 0a      Seek error %ld.
	...

000040f1 <__c.3892>:
    40f1:	6c 69 66 5f 73 74 61 74 3a 20 43 61 6e 27 74 20     lif_stat: Can't 
    4101:	73 74 61 74 3a 25 73 0a 00                          stat:%s..

0000410a <__c.3886>:
    410a:	6c 69 66 5f 6f 70 65 6e 3a 20 43 61 6e 27 74 20     lif_open: Can't 
    411a:	6f 70 65 6e 3a 5b 25 73 5d 20 6d 6f 64 65 3a 5b     open:[%s] mode:[
    412a:	25 73 5d 0a 00                                      %s]..

0000412f <__c.3874>:
    412f:	6c 69 66 5f 66 72 65 65 3a 20 4e 55 4c 4c 20 70     lif_free: NULL p
    413f:	6f 69 6e 74 65 72 0a 00                             ointer..

00004147 <__c.3869>:
    4147:	6c 69 66 5f 63 61 6c 6c 6f 63 3a 5b 25 6c 64 5d     lif_calloc:[%ld]
    4157:	20 6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65      not enough free
    4167:	20 6d 65 6d 6f 72 79 0a 00                           memory..

00004170 <__c.3863>:
    4170:	74 64 30 32 6c 69 66 20 73 75 70 70 6f 72 74 20     td02lif support 
    4180:	6e 6f 74 20 65 6e 61 62 6c 65 64 0a 00              not enabled..

0000418d <__c.3860>:
    418d:	44 69 73 6b 3a 20 25 73 20 6e 6f 74 20 66 6f 75     Disk: %s not fou
    419d:	6e 64 20 69 6e 20 68 70 64 69 72 2e 69 6e 69 0a     nd in hpdir.ini.
	...

000041ae <__c.3847>:
    41ae:	6c 69 66 20 61 64 64 20 6c 69 66 69 6d 61 67 65     lif add lifimage
    41be:	20 6c 69 66 6e 61 6d 65 20 66 72 6f 6d 5f 61 73      lifname from_as
    41ce:	63 69 69 5f 66 69 6c 65 0a 6c 69 66 20 61 64 64     cii_file.lif add
    41de:	62 69 6e 20 6c 69 66 69 6d 61 67 65 20 6c 69 66     bin lifimage lif
    41ee:	6e 61 6d 65 20 66 72 6f 6d 5f 6c 69 66 5f 66 69     name from_lif_fi
    41fe:	6c 65 0a 6c 69 66 20 63 72 65 61 74 65 20 6c 69     le.lif create li
    420e:	66 69 6d 61 67 65 20 6c 61 62 65 6c 20 64 69 72     fimage label dir
    421e:	65 63 74 6f 72 79 5f 73 65 63 74 6f 72 73 20 73     ectory_sectors s
    422e:	65 63 74 6f 72 73 0a 6c 69 66 20 63 72 65 61 74     ectors.lif creat
    423e:	65 64 69 73 6b 20 6c 69 66 69 6d 61 67 65 20 6c     edisk lifimage l
    424e:	61 62 65 6c 20 6d 6f 64 65 6c 0a 6c 69 66 20 64     abel model.lif d
    425e:	65 6c 20 6c 69 66 69 6d 61 67 65 20 6e 61 6d 65     el lifimage name
    426e:	0a 6c 69 66 20 64 69 72 20 6c 69 66 69 6d 61 67     .lif dir lifimag
    427e:	65 0a 6c 69 66 20 65 78 74 72 61 63 74 20 6c 69     e.lif extract li
    428e:	66 69 6d 61 67 65 20 6c 69 66 6e 61 6d 65 20 74     fimage lifname t
    429e:	6f 5f 61 73 63 69 69 5f 66 69 6c 65 0a 6c 69 66     o_ascii_file.lif
    42ae:	20 65 78 74 72 61 63 74 62 69 6e 20 6c 69 66 69      extractbin lifi
    42be:	6d 61 67 65 20 6c 69 66 6e 61 6d 65 20 74 6f 5f     mage lifname to_
    42ce:	6c 69 66 5f 66 69 6c 65 0a 20 20 20 20 65 78 74     lif_file.    ext
    42de:	72 61 63 74 73 20 61 20 66 69 6c 65 20 69 6e 74     racts a file int
    42ee:	6f 20 61 20 73 69 67 6c 65 20 66 69 6c 65 20 4c     o a sigle file L
    42fe:	49 46 20 69 6d 61 67 65 0a 6c 69 66 20 72 65 6e     IF image.lif ren
    430e:	61 6d 65 20 6c 69 66 69 6d 61 67 65 20 6f 6c 64     ame lifimage old
    431e:	6c 69 66 6e 61 6d 65 20 6e 65 77 6c 69 66 6e 61     lifname newlifna
    432e:	6d 65 0a 55 73 65 20 2d 64 20 20 61 66 74 65 72     me.Use -d  after
    433e:	20 27 6c 69 66 27 20 6b 65 79 77 6f 72 64 20 74      'lif' keyword t
    434e:	6f 20 65 6e 61 62 6c 65 20 4c 49 46 20 66 69 6c     o enable LIF fil
    435e:	65 73 79 73 74 65 6d 20 64 65 62 75 67 67 69 6e     esystem debuggin
    436e:	67 0a 0a 00                                         g...

00004372 <__c.3845>:
    4372:	6c 69 66 20 20 20 68 65 6c 70 0a 00                 lif   help..

0000437e <__c.4610>:
    437e:	53 74 61 72 74 69 6e 67 20 47 50 49 42 20 54 41     Starting GPIB TA
    438e:	53 4b 0a 00                                         SK..

00004392 <__c.4608>:
    4392:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    43a2:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

000043ac <__c.4606>:
    43ac:	25 2d 31 36 73 00                                   %-16s.

000043b2 <__c.4604>:
    43b2:	25 2d 31 36 73 00                                   %-16s.

000043b8 <__c.4602>:
    43b8:	53 53 38 30 3d 25 64 20 41 4d 49 47 4f 3d 25 64     SS80=%d AMIGO=%d
	...

000043c9 <__c.4600>:
    43c9:	64 65 62 75 67 6c 65 76 65 6c 20 20 20 3d 20 25     debuglevel   = %
    43d9:	30 34 78 48 0a 00                                   04xH..

000043df <__c.4598>:
    43df:	47 50 49 42 20 53 74 61 74 65 20 69 6e 69 74 20     GPIB State init 
    43ef:	64 6f 6e 65 0a 00                                   done..

000043f5 <__c.4596>:
    43f5:	47 50 49 42 20 46 69 6c 65 20 69 6e 69 74 20 64     GPIB File init d
    4405:	6f 6e 65 0a 00                                      one..

0000440a <__c.4594>:
    440a:	47 50 49 42 20 54 69 6d 65 72 20 69 6e 69 74 69     GPIB Timer initi
    441a:	61 6c 69 7a 65 64 0a 00                             alized..

00004422 <__c.4592>:
    4422:	47 50 49 42 20 54 69 6d 65 72 20 53 65 74 75 70     GPIB Timer Setup
    4432:	0a 00                                               ..

00004434 <__c.4590>:
    4434:	50 72 69 6e 74 65 72 20 69 6e 69 74 69 61 6c 69     Printer initiali
    4444:	7a 65 64 0a 00                                      zed..

00004449 <__c.4588>:
    4449:	47 50 49 42 20 62 75 73 20 69 6e 69 74 69 61 6c     GPIB bus initial
    4459:	69 7a 65 64 0a 00                                   ized..

0000445f <__c.4586>:
    445f:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 65 64 0a     MMC initialized.
	...

00004470 <__c.4584>:
    4470:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 69 6e 67     MMC initializing
    4480:	20 73 74 61 72 74 0a 00                              start..

00004488 <__c.4582>:
    4488:	53 79 73 74 65 6d 20 54 61 73 6b 20 49 6e 74 65     System Task Inte
    4498:	72 72 75 70 74 20 52 61 74 65 3a 20 25 6c 64 20     rrupt Rate: %ld 
    44a8:	4e 61 6e 6f 20 53 65 63 6f 6e 64 73 0a 00           Nano Seconds..

000044b6 <__c.4580>:
    44b6:	43 6c 6f 63 6b 20 63 6c 65 61 72 65 64 0a 00        Clock cleared..

000044c5 <__c.4578>:
    44c5:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 52 54 43     Initializing RTC
    44d5:	0a 00                                               ..

000044d7 <__c.4576>:
    44d7:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 49 32 43     Initializing I2C
    44e7:	20 62 75 73 0a 00                                    bus..

000044ed <__c.4574>:
    44ed:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 53 50 49     Initializing SPI
    44fd:	20 62 75 73 0a 00                                    bus..

00004503 <__c.4572>:
    4503:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    4513:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

0000451d <__c.4570>:
    451d:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    452d:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

00004537 <__c.4568>:
    4537:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    4547:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    4557:	35 64 69 73 6b 0a 00                                5disk..

0000455e <__c.4566>:
    455e:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

0000456e <__c.4564>:
    456e:	20 28 43 29 20 32 30 31 34 2d 32 30 32 30 20 62      (C) 2014-2020 b
    457e:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

0000458b <__c.4562>:
    458b:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    459b:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

000045aa <__c.4560>:
    45aa:	52 65 71 75 65 73 74 65 64 20 42 61 75 64 20 52     Requested Baud R
    45ba:	61 74 65 3a 20 25 6c 64 2c 20 41 63 74 75 61 6c     ate: %ld, Actual
    45ca:	3a 20 25 6c 64 0a 00                                : %ld..

000045d1 <__c.4558>:
    45d1:	43 50 55 20 43 6c 6f 63 6b 20 3d 20 25 6c 75 0a     CPU Clock = %lu.
	...

000045e2 <__c.4556>:
    45e2:	53 74 61 72 74 0a 00                                Start..

000045e9 <__c.4544>:
    45e9:	20 20 20 5b 25 73 5d 0a 00                             [%s]..

000045f2 <__c.4542>:
    45f2:	41 72 67 75 6d 65 6e 74 20 63 6f 75 6e 74 20 3d     Argument count =
    4602:	20 25 64 0a 00                                       %d..

00004607 <__c.4540>:
    4607:	49 6e 76 61 6c 69 64 20 43 6f 6d 6d 61 6e 64 0a     Invalid Command.
	...

00004618 <__c.4538>:
    4618:	43 6f 6d 6d 61 6e 64 20 46 41 49 4c 45 44 0a 00     Command FAILED..

00004628 <__c.4536>:
    4628:	4f 4b 0a 00                                         OK..

0000462c <__c.4533>:
    462c:	49 6e 70 75 74 20 64 65 62 75 67 67 69 6e 67 3a     Input debugging:
    463c:	20 25 73 0a 00                                       %s..

00004641 <__c.4528>:
    4641:	20 20 20 5b 25 73 5d 0a 00                             [%s]..

0000464a <__c.4526>:
    464a:	41 72 67 75 6d 65 6e 74 20 63 6f 75 6e 74 20 3d     Argument count =
    465a:	20 25 64 0a 00                                       %d..

0000465f <__c.4524>:
    465f:	0a 3e 00                                            .>.

00004662 <__c.4511>:
    4662:	62 61 63 6b 6c 69 67 68 74 20 30 78 52 52 47 47     backlight 0xRRGG
    4672:	42 42 0a 68 65 6c 70 0a 69 6e 70 75 74 20 20 20     BB.help.input   
    4682:	2d 20 74 6f 67 67 6c 65 20 69 6e 70 75 74 20 64     - toggle input d
    4692:	65 62 75 67 67 69 6e 67 0a 6d 65 6d 20 20 20 20     ebugging.mem    
    46a2:	20 2d 20 64 69 73 70 6c 61 79 20 66 72 65 65 20      - display free 
    46b2:	6d 65 6d 6f 72 79 0a 72 65 73 65 74 20 20 20 2d     memory.reset   -
    46c2:	20 72 65 73 65 74 20 65 6d 75 6c 61 74 6f 72 0a      reset emulator.
    46d2:	73 65 74 64 61 74 65 20 2d 20 73 65 74 20 64 61     setdate - set da
    46e2:	74 65 0a 74 69 6d 65 20 20 20 20 2d 20 64 69 73     te.time    - dis
    46f2:	70 6c 61 79 20 63 75 72 72 65 6e 74 20 74 69 6d     play current tim
    4702:	65 0a 0a 00                                         e...

00004706 <__c.4504>:
    4706:	25 2d 31 36 73 00                                   %-16s.

0000470c <__c.4502>:
    470c:	25 2d 31 36 73 00                                   %-16s.

00004712 <__c.4495>:
    4712:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    4722:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

0000472c <__c.4493>:
    472c:	25 2d 31 36 73 00                                   %-16s.

00004732 <__c.4491>:
    4732:	25 2d 31 36 73 00                                   %-16s.

00004738 <__c.4489>:
    4738:	6c 63 64 5f 74 61 73 6b 20 69 6e 69 74 20 66 61     lcd_task init fa
    4748:	69 6c 65 64 0a 00                                   iled..

0000474e <__c.4487>:
    474e:	49 32 43 20 4c 43 44 20 69 6e 69 74 69 61 6c 69     I2C LCD initiali
    475e:	7a 61 74 69 6f 6e 20 73 74 61 72 74 0a 00           zation start..

0000476c <__c.4481>:
    476c:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    477c:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

00004786 <__c.4475>:
    4786:	25 73 20 25 32 64 20 25 30 32 64 3a 25 30 32 64     %s %2d %02d:%02d
    4796:	3a 25 30 32 64 00                                   :%02d.

0000479c <__c.4461>:
    479c:	0a 00                                               ..

0000479e <__c.4459>:
    479e:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    47ae:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

000047b8 <__c.4457>:
    47b8:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    47c8:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

000047d2 <__c.4455>:
    47d2:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    47e2:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    47f2:	35 64 69 73 6b 0a 00                                5disk..

000047f9 <__c.4453>:
    47f9:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

00004809 <__c.4451>:
    4809:	20 28 63 29 20 32 30 31 34 2d 32 30 32 30 20 62      (c) 2014-2020 b
    4819:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

00004826 <__c.4449>:
    4826:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    4836:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

00004845 <__c.4447>:
    4845:	53 74 61 6e 64 20 61 6c 6f 6e 65 20 76 65 72 73     Stand alone vers
    4855:	69 6f 6e 20 6f 66 20 4c 49 46 20 75 74 69 6c 69     ion of LIF utili
    4865:	74 69 65 73 20 66 6f 72 20 6c 69 6e 75 78 0a 00     ties for linux..
	...

00004876 <__ctors_end>:
    4876:	11 24       	eor	r1, r1
    4878:	1f be       	out	0x3f, r1	; 63
    487a:	cf ef       	ldi	r28, 0xFF	; 255
    487c:	d0 e4       	ldi	r29, 0x40	; 64
    487e:	de bf       	out	0x3e, r29	; 62
    4880:	cd bf       	out	0x3d, r28	; 61

00004882 <__do_copy_data>:
    4882:	17 e1       	ldi	r17, 0x17	; 23
    4884:	a0 e0       	ldi	r26, 0x00	; 0
    4886:	b1 e0       	ldi	r27, 0x01	; 1
    4888:	e4 e1       	ldi	r30, 0x14	; 20
    488a:	fe ec       	ldi	r31, 0xCE	; 206
    488c:	01 e0       	ldi	r16, 0x01	; 1
    488e:	0b bf       	out	0x3b, r16	; 59
    4890:	02 c0       	rjmp	.+4      	; 0x4896 <__do_copy_data+0x14>
    4892:	07 90       	elpm	r0, Z+
    4894:	0d 92       	st	X+, r0
    4896:	aa 35       	cpi	r26, 0x5A	; 90
    4898:	b1 07       	cpc	r27, r17
    489a:	d9 f7       	brne	.-10     	; 0x4892 <__do_copy_data+0x10>

0000489c <__do_clear_bss>:
    489c:	21 e2       	ldi	r18, 0x21	; 33
    489e:	aa e5       	ldi	r26, 0x5A	; 90
    48a0:	b7 e1       	ldi	r27, 0x17	; 23
    48a2:	01 c0       	rjmp	.+2      	; 0x48a6 <.do_clear_bss_start>

000048a4 <.do_clear_bss_loop>:
    48a4:	1d 92       	st	X+, r1

000048a6 <.do_clear_bss_start>:
    48a6:	ac 3b       	cpi	r26, 0xBC	; 188
    48a8:	b2 07       	cpc	r27, r18
    48aa:	e1 f7       	brne	.-8      	; 0x48a4 <.do_clear_bss_loop>
    48ac:	0e 94 7f e0 	call	0x1c0fe	; 0x1c0fe <main>
    48b0:	0c 94 08 e7 	jmp	0x1ce10	; 0x1ce10 <_exit>

000048b4 <__bad_interrupt>:
    48b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000048b8 <chip_select>:
#endif
#ifdef AVR
    SPI0_RX(&data,1);
#endif
    return(data);
}
    48b8:	e8 2f       	mov	r30, r24
    48ba:	e6 95       	lsr	r30
    48bc:	e6 95       	lsr	r30
    48be:	e6 95       	lsr	r30
    48c0:	93 e0       	ldi	r25, 0x03	; 3
    48c2:	e9 9f       	mul	r30, r25
    48c4:	f0 01       	movw	r30, r0
    48c6:	11 24       	eor	r1, r1
    48c8:	32 a1       	ldd	r19, Z+34	; 0x22
    48ca:	28 2f       	mov	r18, r24
    48cc:	27 70       	andi	r18, 0x07	; 7
    48ce:	81 e0       	ldi	r24, 0x01	; 1
    48d0:	90 e0       	ldi	r25, 0x00	; 0
    48d2:	01 c0       	rjmp	.+2      	; 0x48d6 <chip_select+0x1e>
    48d4:	88 0f       	add	r24, r24
    48d6:	2a 95       	dec	r18
    48d8:	ea f7       	brpl	.-6      	; 0x48d4 <chip_select+0x1c>
    48da:	98 2f       	mov	r25, r24
    48dc:	90 95       	com	r25
    48de:	93 23       	and	r25, r19
    48e0:	92 a3       	std	Z+34, r25	; 0x22
    48e2:	91 a1       	ldd	r25, Z+33	; 0x21
    48e4:	89 2b       	or	r24, r25
    48e6:	81 a3       	std	Z+33, r24	; 0x21
    48e8:	08 95       	ret

000048ea <chip_deselect>:
    48ea:	e8 2f       	mov	r30, r24
    48ec:	e6 95       	lsr	r30
    48ee:	e6 95       	lsr	r30
    48f0:	e6 95       	lsr	r30
    48f2:	93 e0       	ldi	r25, 0x03	; 3
    48f4:	e9 9f       	mul	r30, r25
    48f6:	f0 01       	movw	r30, r0
    48f8:	11 24       	eor	r1, r1
    48fa:	32 a1       	ldd	r19, Z+34	; 0x22
    48fc:	28 2f       	mov	r18, r24
    48fe:	27 70       	andi	r18, 0x07	; 7
    4900:	81 e0       	ldi	r24, 0x01	; 1
    4902:	90 e0       	ldi	r25, 0x00	; 0
    4904:	01 c0       	rjmp	.+2      	; 0x4908 <chip_deselect+0x1e>
    4906:	88 0f       	add	r24, r24
    4908:	2a 95       	dec	r18
    490a:	ea f7       	brpl	.-6      	; 0x4906 <chip_deselect+0x1c>
    490c:	93 2f       	mov	r25, r19
    490e:	98 2b       	or	r25, r24
    4910:	92 a3       	std	Z+34, r25	; 0x22
    4912:	91 a1       	ldd	r25, Z+33	; 0x21
    4914:	89 2b       	or	r24, r25
    4916:	81 a3       	std	Z+33, r24	; 0x21
    4918:	08 95       	ret

0000491a <chip_select_init>:
    491a:	e7 cf       	rjmp	.-50     	; 0x48ea <chip_deselect>
    491c:	08 95       	ret

0000491e <spi_end>:
    491e:	cf 93       	push	r28
    4920:	ad b7       	in	r26, 0x3d	; 61
    4922:	be b7       	in	r27, 0x3e	; 62
    4924:	17 97       	sbiw	r26, 0x07	; 7
    4926:	0f b6       	in	r0, 0x3f	; 63
    4928:	f8 94       	cli
    492a:	be bf       	out	0x3e, r27	; 62
    492c:	0f be       	out	0x3f, r0	; 63
    492e:	ad bf       	out	0x3d, r26	; 61
    4930:	c8 2f       	mov	r28, r24
    4932:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_cs_pin>
    4936:	8c 17       	cp	r24, r28
    4938:	99 f0       	breq	.+38     	; 0x4960 <spi_end+0x42>
    493a:	8f 3f       	cpi	r24, 0xFF	; 255
    493c:	89 f0       	breq	.+34     	; 0x4960 <spi_end+0x42>
    493e:	2c 2f       	mov	r18, r28
    4940:	30 e0       	ldi	r19, 0x00	; 0
    4942:	ed b7       	in	r30, 0x3d	; 61
    4944:	fe b7       	in	r31, 0x3e	; 62
    4946:	37 83       	std	Z+7, r19	; 0x07
    4948:	26 83       	std	Z+6, r18	; 0x06
    494a:	90 e0       	ldi	r25, 0x00	; 0
    494c:	95 83       	std	Z+5, r25	; 0x05
    494e:	84 83       	std	Z+4, r24	; 0x04
    4950:	82 ec       	ldi	r24, 0xC2	; 194
    4952:	91 e0       	ldi	r25, 0x01	; 1
    4954:	a0 e0       	ldi	r26, 0x00	; 0
    4956:	81 83       	std	Z+1, r24	; 0x01
    4958:	92 83       	std	Z+2, r25	; 0x02
    495a:	a3 83       	std	Z+3, r26	; 0x03
    495c:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    4960:	8c 2f       	mov	r24, r28
    4962:	c3 df       	rcall	.-122    	; 0x48ea <chip_deselect>
    4964:	8f ef       	ldi	r24, 0xFF	; 255
    4966:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_cs_pin>
    496a:	ad b7       	in	r26, 0x3d	; 61
    496c:	be b7       	in	r27, 0x3e	; 62
    496e:	17 96       	adiw	r26, 0x07	; 7
    4970:	0f b6       	in	r0, 0x3f	; 63
    4972:	f8 94       	cli
    4974:	be bf       	out	0x3e, r27	; 62
    4976:	0f be       	out	0x3f, r0	; 63
    4978:	ad bf       	out	0x3d, r26	; 61
    497a:	cf 91       	pop	r28
    497c:	08 95       	ret

0000497e <spi_TX_buffer>:
    497e:	cd c4       	rjmp	.+2458   	; 0x531a <SPI0_TX>
    4980:	08 95       	ret

00004982 <spi_RX_buffer>:
    4982:	f5 c4       	rjmp	.+2538   	; 0x536e <SPI0_RX>
    4984:	08 95       	ret

00004986 <spi_TX>:

/// @brief SPI write 1 byte
/// @param[in] data: value to transmit
/// @return  void
void spi_TX(uint8_t data)
{
    4986:	a1 e0       	ldi	r26, 0x01	; 1
    4988:	b0 e0       	ldi	r27, 0x00	; 0
    498a:	e9 ec       	ldi	r30, 0xC9	; 201
    498c:	f4 e2       	ldi	r31, 0x24	; 36
    498e:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__prologue_saves__+0x20>
    4992:	89 83       	std	Y+1, r24	; 0x01
#ifdef ESP8266
    hspi_TX(&data,1);
#endif
#ifdef AVR
    SPI0_TX(&data,1);
    4994:	61 e0       	ldi	r22, 0x01	; 1
    4996:	70 e0       	ldi	r23, 0x00	; 0
    4998:	ce 01       	movw	r24, r28
    499a:	01 96       	adiw	r24, 0x01	; 1
    499c:	be d4       	rcall	.+2428   	; 0x531a <SPI0_TX>
#endif
}
    499e:	21 96       	adiw	r28, 0x01	; 1
    49a0:	e2 e0       	ldi	r30, 0x02	; 2
    49a2:	0c 94 35 e3 	jmp	0x1c66a	; 0x1c66a <__epilogue_restores__+0x20>

000049a6 <spi_init>:
 @return void
*/
uint8_t _cs_pin = 0xff;
uint32_t _spi_clock = -1L;
void spi_init(uint32_t clock, int pin)
{
    49a6:	cf 92       	push	r12
    49a8:	df 92       	push	r13
    49aa:	ef 92       	push	r14
    49ac:	ff 92       	push	r15
    49ae:	6b 01       	movw	r12, r22
    49b0:	7c 01       	movw	r14, r24
    49b2:	84 2f       	mov	r24, r20
    spi_waitReady();
    chip_deselect(pin);
    49b4:	9a df       	rcall	.-204    	; 0x48ea <chip_deselect>
    _cs_pin = 0xff;
    49b6:	8f ef       	ldi	r24, 0xFF	; 255
    49b8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_cs_pin>

#ifdef AVR
    SPI0_Init(clock);                             // Initialize the SPI bus - does nothing if clock unchanged
    49bc:	c7 01       	movw	r24, r14
    49be:	b6 01       	movw	r22, r12
    49c0:	7f d4       	rcall	.+2302   	; 0x52c0 <SPI0_Init>
    SPI0_Mode(0);                                 // Set the clocking mode, etc
    49c2:	80 e0       	ldi	r24, 0x00	; 0
    49c4:	90 e0       	ldi	r25, 0x00	; 0
#endif
#ifdef ESP8266
    hspi_init(clock,0);                           // Initialize the SPI bus - does nothing if clock unchanged
#endif
    spi_TX(0xff);
    49c6:	3c d4       	rcall	.+2168   	; 0x5240 <SPI0_Mode>
    49c8:	8f ef       	ldi	r24, 0xFF	; 255
    49ca:	dd df       	rcall	.-70     	; 0x4986 <spi_TX>
    _spi_clock = clock;
    49cc:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <_spi_clock>
    49d0:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <_spi_clock+0x1>
    49d4:	e0 92 08 01 	sts	0x0108, r14	; 0x800108 <_spi_clock+0x2>
    49d8:	f0 92 09 01 	sts	0x0109, r15	; 0x800109 <_spi_clock+0x3>
// waits for any prior transactions to complete before updating
    spi_waitReady();
}
    49dc:	ff 90       	pop	r15
    49de:	ef 90       	pop	r14
    49e0:	df 90       	pop	r13
    49e2:	cf 90       	pop	r12
    49e4:	08 95       	ret

000049e6 <spi_begin>:
 @param[in] clock: SPI clock rate
 @param[in] pin: GPIO CS pin
 @return void
*/
void spi_begin(uint32_t clock, int pin)
{
    49e6:	cf 92       	push	r12
    49e8:	df 92       	push	r13
    49ea:	ef 92       	push	r14
    49ec:	ff 92       	push	r15
    49ee:	cf 93       	push	r28
    49f0:	df 93       	push	r29
    49f2:	ad b7       	in	r26, 0x3d	; 61
    49f4:	be b7       	in	r27, 0x3e	; 62
    49f6:	17 97       	sbiw	r26, 0x07	; 7
    49f8:	0f b6       	in	r0, 0x3f	; 63
    49fa:	f8 94       	cli
    49fc:	be bf       	out	0x3e, r27	; 62
    49fe:	0f be       	out	0x3f, r0	; 63
    4a00:	ad bf       	out	0x3d, r26	; 61
    4a02:	6b 01       	movw	r12, r22
    4a04:	7c 01       	movw	r14, r24
    4a06:	ea 01       	movw	r28, r20
// FIXME allow nesting by using an array of clock values for each pin

//@brief if there is a prior chip select in progress flag an error
    if(_cs_pin != 0xff)
    4a08:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_cs_pin>
    4a0c:	8f 3f       	cpi	r24, 0xFF	; 255
    4a0e:	79 f0       	breq	.+30     	; 0x4a2e <spi_begin+0x48>
    {
// This implies a bug!
        printf("cs_enable was: %d, want: %d\n", 0xff & _cs_pin, pin);
    4a10:	ed b7       	in	r30, 0x3d	; 61
    4a12:	fe b7       	in	r31, 0x3e	; 62
    4a14:	46 83       	std	Z+6, r20	; 0x06
    4a16:	d7 83       	std	Z+7, r29	; 0x07
    4a18:	90 e0       	ldi	r25, 0x00	; 0
    4a1a:	95 83       	std	Z+5, r25	; 0x05
    4a1c:	84 83       	std	Z+4, r24	; 0x04
    4a1e:	80 ee       	ldi	r24, 0xE0	; 224
    4a20:	91 e0       	ldi	r25, 0x01	; 1
    4a22:	a0 e0       	ldi	r26, 0x00	; 0
    4a24:	81 83       	std	Z+1, r24	; 0x01
    4a26:	92 83       	std	Z+2, r25	; 0x02
    4a28:	a3 83       	std	Z+3, r26	; 0x03
    4a2a:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
// waits for any prior transactions to complete before updating
    spi_waitReady();

///@brief initialize pin in case it has not been done yet
///@ we cache the clock frequency seeting for multiple device support
    if(_spi_clock != clock)
    4a2e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_spi_clock>
    4a32:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_spi_clock+0x1>
    4a36:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_spi_clock+0x2>
    4a3a:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_spi_clock+0x3>
    4a3e:	8c 15       	cp	r24, r12
    4a40:	9d 05       	cpc	r25, r13
    4a42:	ae 05       	cpc	r26, r14
    4a44:	bf 05       	cpc	r27, r15
    4a46:	21 f0       	breq	.+8      	; 0x4a50 <spi_begin+0x6a>
    {
        spi_init(clock,pin);
    4a48:	ae 01       	movw	r20, r28
    4a4a:	c7 01       	movw	r24, r14
    4a4c:	b6 01       	movw	r22, r12
    4a4e:	ab df       	rcall	.-170    	; 0x49a6 <spi_init>
    }

    chip_select(pin);
    4a50:	8c 2f       	mov	r24, r28
    4a52:	32 df       	rcall	.-412    	; 0x48b8 <chip_select>
    _cs_pin = pin;
    4a54:	c0 93 0a 01 	sts	0x010A, r28	; 0x80010a <_cs_pin>
}
    4a58:	ad b7       	in	r26, 0x3d	; 61
    4a5a:	be b7       	in	r27, 0x3e	; 62
    4a5c:	17 96       	adiw	r26, 0x07	; 7
    4a5e:	0f b6       	in	r0, 0x3f	; 63
    4a60:	f8 94       	cli
    4a62:	be bf       	out	0x3e, r27	; 62
    4a64:	0f be       	out	0x3f, r0	; 63
    4a66:	ad bf       	out	0x3d, r26	; 61
    4a68:	df 91       	pop	r29
    4a6a:	cf 91       	pop	r28
    4a6c:	ff 90       	pop	r15
    4a6e:	ef 90       	pop	r14
    4a70:	df 90       	pop	r13
    4a72:	cf 90       	pop	r12
    4a74:	08 95       	ret

00004a76 <spi_TXRX>:

/// @brief SPI read and write 1 byte
/// @param[in] data: value to transmit
/// @return  uint8_t value read
uint8_t spi_TXRX(uint8_t data)
{
    4a76:	a1 e0       	ldi	r26, 0x01	; 1
    4a78:	b0 e0       	ldi	r27, 0x00	; 0
    4a7a:	e1 e4       	ldi	r30, 0x41	; 65
    4a7c:	f5 e2       	ldi	r31, 0x25	; 37
    4a7e:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__prologue_saves__+0x20>
    4a82:	89 83       	std	Y+1, r24	; 0x01
#ifdef ESP8266
    hspi_TXRX(&data,1);
#endif
#ifdef AVR
    SPI0_TXRX(&data,1);
    4a84:	61 e0       	ldi	r22, 0x01	; 1
    4a86:	70 e0       	ldi	r23, 0x00	; 0
    4a88:	ce 01       	movw	r24, r28
    4a8a:	01 96       	adiw	r24, 0x01	; 1
    4a8c:	5a d4       	rcall	.+2228   	; 0x5342 <SPI0_TXRX>
#endif
    return(data);
}
    4a8e:	89 81       	ldd	r24, Y+1	; 0x01
    4a90:	21 96       	adiw	r28, 0x01	; 1
    4a92:	e2 e0       	ldi	r30, 0x02	; 2
    4a94:	0c 94 35 e3 	jmp	0x1c66a	; 0x1c66a <__epilogue_restores__+0x20>

00004a98 <set_error>:
static uint8_t error_flag = 0;
/// @brief Set error condition
/// @return  void
void set_error(uint8_t error)
{
	error_flag = error;
    4a98:	80 93 5a 17 	sts	0x175A, r24	; 0x80175a <__data_end>
    GPIO_PIN_HI(LED2);
    4a9c:	2c 9a       	sbi	0x05, 4	; 5
    4a9e:	24 9a       	sbi	0x04, 4	; 4
    4aa0:	08 95       	ret

00004aa2 <clear_error>:

/// @brief Set error condition
/// @return  void
void clear_error()
{
	error_flag = 0;
    4aa2:	10 92 5a 17 	sts	0x175A, r1	; 0x80175a <__data_end>
    GPIO_PIN_LOW(LED2);
    4aa6:	2c 98       	cbi	0x05, 4	; 5
    4aa8:	24 9a       	sbi	0x04, 4	; 4
    4aaa:	08 95       	ret

00004aac <freeRam>:
/// - avr-libc dependent code.
///
/// @return free memory in bytes.
/// @see malloc().
uint16_t freeRam ()
{
    4aac:	a2 e0       	ldi	r26, 0x02	; 2
    4aae:	b0 e0       	ldi	r27, 0x00	; 0
    4ab0:	ec e5       	ldi	r30, 0x5C	; 92
    4ab2:	f5 e2       	ldi	r31, 0x25	; 37
    4ab4:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__prologue_saves__+0x20>
    extern void * __heap_start;
    extern void * __brkval;
    int ret;
    uint16_t top;

    if(__brkval)
    4ab8:	20 91 b8 21 	lds	r18, 0x21B8	; 0x8021b8 <__brkval>
    4abc:	30 91 b9 21 	lds	r19, 0x21B9	; 0x8021b9 <__brkval+0x1>
    4ac0:	21 15       	cp	r18, r1
    4ac2:	31 05       	cpc	r19, r1
    4ac4:	11 f4       	brne	.+4      	; 0x4aca <freeRam+0x1e>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    4ac6:	2c eb       	ldi	r18, 0xBC	; 188
    4ac8:	31 e2       	ldi	r19, 0x21	; 33

    ret = (uint16_t) &v - top;
    return ( ret );
}
    4aca:	ce 01       	movw	r24, r28
    4acc:	01 96       	adiw	r24, 0x01	; 1
    4ace:	82 1b       	sub	r24, r18
    4ad0:	93 0b       	sbc	r25, r19
    4ad2:	22 96       	adiw	r28, 0x02	; 2
    4ad4:	e2 e0       	ldi	r30, 0x02	; 2
    4ad6:	0c 94 35 e3 	jmp	0x1c66a	; 0x1c66a <__epilogue_restores__+0x20>

00004ada <PrintFree>:
/// - avr-libc dependent code.
/// - Stack, BSS, Data, Heap, Malloc.
///
/// @return  void
void PrintFree()
{
    4ada:	a9 e0       	ldi	r26, 0x09	; 9
    4adc:	b0 e0       	ldi	r27, 0x00	; 0
    4ade:	e3 e7       	ldi	r30, 0x73	; 115
    4ae0:	f5 e2       	ldi	r31, 0x25	; 37
    4ae2:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__prologue_saves__+0x20>
    extern void * __data_start;
    extern void * __data_end;
    extern void * __stack;
    uint16_t ram;

    ram = freeRam();
    4ae6:	e2 df       	rcall	.-60     	; 0x4aac <freeRam>
    4ae8:	99 87       	std	Y+9, r25	; 0x09
    4aea:	88 87       	std	Y+8, r24	; 0x08

    printf("Free Ram:%u\n", ram);
    4aec:	ed b7       	in	r30, 0x3d	; 61
    4aee:	fe b7       	in	r31, 0x3e	; 62
    4af0:	95 83       	std	Z+5, r25	; 0x05
    4af2:	84 83       	std	Z+4, r24	; 0x04
    4af4:	87 e0       	ldi	r24, 0x07	; 7
    4af6:	93 e0       	ldi	r25, 0x03	; 3
    4af8:	a0 e0       	ldi	r26, 0x00	; 0
    4afa:	81 83       	std	Z+1, r24	; 0x01
    4afc:	92 83       	std	Z+2, r25	; 0x02
    4afe:	a3 83       	std	Z+3, r26	; 0x03
    4b00:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    printf("  Stack Top:   %u\n", (unsigned int) &__stack);
    4b04:	8f ef       	ldi	r24, 0xFF	; 255
    4b06:	90 e4       	ldi	r25, 0x40	; 64
    4b08:	ed b7       	in	r30, 0x3d	; 61
    4b0a:	fe b7       	in	r31, 0x3e	; 62
    4b0c:	95 83       	std	Z+5, r25	; 0x05
    4b0e:	84 83       	std	Z+4, r24	; 0x04
    4b10:	84 ef       	ldi	r24, 0xF4	; 244
    4b12:	92 e0       	ldi	r25, 0x02	; 2
    4b14:	a0 e0       	ldi	r26, 0x00	; 0
    4b16:	81 83       	std	Z+1, r24	; 0x01
    4b18:	92 83       	std	Z+2, r25	; 0x02
    4b1a:	a3 83       	std	Z+3, r26	; 0x03
    4b1c:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    printf("  Stack Free:  %u\n", (unsigned int) &ram - 0);
    4b20:	ce 01       	movw	r24, r28
    4b22:	08 96       	adiw	r24, 0x08	; 8
    4b24:	ed b7       	in	r30, 0x3d	; 61
    4b26:	fe b7       	in	r31, 0x3e	; 62
    4b28:	95 83       	std	Z+5, r25	; 0x05
    4b2a:	84 83       	std	Z+4, r24	; 0x04
    4b2c:	81 ee       	ldi	r24, 0xE1	; 225
    4b2e:	92 e0       	ldi	r25, 0x02	; 2
    4b30:	a0 e0       	ldi	r26, 0x00	; 0
    4b32:	81 83       	std	Z+1, r24	; 0x01
    4b34:	92 83       	std	Z+2, r25	; 0x02
    4b36:	a3 83       	std	Z+3, r26	; 0x03
    4b38:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>

    printf("  BSS   start: %5u, end: %5u\n",
    4b3c:	8c eb       	ldi	r24, 0xBC	; 188
    4b3e:	91 e2       	ldi	r25, 0x21	; 33
    4b40:	ed b7       	in	r30, 0x3d	; 61
    4b42:	fe b7       	in	r31, 0x3e	; 62
    4b44:	97 83       	std	Z+7, r25	; 0x07
    4b46:	86 83       	std	Z+6, r24	; 0x06
    4b48:	8a e5       	ldi	r24, 0x5A	; 90
    4b4a:	97 e1       	ldi	r25, 0x17	; 23
    4b4c:	95 83       	std	Z+5, r25	; 0x05
    4b4e:	84 83       	std	Z+4, r24	; 0x04
    4b50:	83 ec       	ldi	r24, 0xC3	; 195
    4b52:	92 e0       	ldi	r25, 0x02	; 2
    4b54:	a0 e0       	ldi	r26, 0x00	; 0
    4b56:	81 83       	std	Z+1, r24	; 0x01
    4b58:	92 83       	std	Z+2, r25	; 0x02
    4b5a:	a3 83       	std	Z+3, r26	; 0x03
    4b5c:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
        (unsigned int)&__bss_start, (unsigned int)&__bss_end);

    printf("  Data  start: %5u, end: %5u\n",
    4b60:	8a e5       	ldi	r24, 0x5A	; 90
    4b62:	97 e1       	ldi	r25, 0x17	; 23
    4b64:	ed b7       	in	r30, 0x3d	; 61
    4b66:	fe b7       	in	r31, 0x3e	; 62
    4b68:	97 83       	std	Z+7, r25	; 0x07
    4b6a:	86 83       	std	Z+6, r24	; 0x06
    4b6c:	80 e0       	ldi	r24, 0x00	; 0
    4b6e:	91 e0       	ldi	r25, 0x01	; 1
    4b70:	95 83       	std	Z+5, r25	; 0x05
    4b72:	84 83       	std	Z+4, r24	; 0x04
    4b74:	85 ea       	ldi	r24, 0xA5	; 165
    4b76:	92 e0       	ldi	r25, 0x02	; 2
    4b78:	a0 e0       	ldi	r26, 0x00	; 0
    4b7a:	81 83       	std	Z+1, r24	; 0x01
    4b7c:	92 83       	std	Z+2, r25	; 0x02
    4b7e:	a3 83       	std	Z+3, r26	; 0x03
    4b80:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
        (unsigned int)&__data_start, (unsigned int)&__data_end);

    printf("  Heap: start: %5u, end: %5u\n",
    4b84:	80 e0       	ldi	r24, 0x00	; 0
    4b86:	90 e0       	ldi	r25, 0x00	; 0
    4b88:	ed b7       	in	r30, 0x3d	; 61
    4b8a:	fe b7       	in	r31, 0x3e	; 62
    4b8c:	97 83       	std	Z+7, r25	; 0x07
    4b8e:	86 83       	std	Z+6, r24	; 0x06
    4b90:	8c eb       	ldi	r24, 0xBC	; 188
    4b92:	91 e2       	ldi	r25, 0x21	; 33
    4b94:	95 83       	std	Z+5, r25	; 0x05
    4b96:	84 83       	std	Z+4, r24	; 0x04
    4b98:	87 e8       	ldi	r24, 0x87	; 135
    4b9a:	92 e0       	ldi	r25, 0x02	; 2
    4b9c:	a0 e0       	ldi	r26, 0x00	; 0
    4b9e:	81 83       	std	Z+1, r24	; 0x01
    4ba0:	92 83       	std	Z+2, r25	; 0x02
    4ba2:	a3 83       	std	Z+3, r26	; 0x03
    4ba4:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
        (unsigned int)&__heap_start, (unsigned int)&__heap_end);

    printf("  Malloc start %5u  end: %5u\n",
    4ba8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    4bac:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    4bb0:	ed b7       	in	r30, 0x3d	; 61
    4bb2:	fe b7       	in	r31, 0x3e	; 62
    4bb4:	97 83       	std	Z+7, r25	; 0x07
    4bb6:	86 83       	std	Z+6, r24	; 0x06
    4bb8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__malloc_heap_start>
    4bbc:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    4bc0:	95 83       	std	Z+5, r25	; 0x05
    4bc2:	84 83       	std	Z+4, r24	; 0x04
    4bc4:	89 e6       	ldi	r24, 0x69	; 105
    4bc6:	92 e0       	ldi	r25, 0x02	; 2
    4bc8:	a0 e0       	ldi	r26, 0x00	; 0
    4bca:	81 83       	std	Z+1, r24	; 0x01
    4bcc:	92 83       	std	Z+2, r25	; 0x02
    4bce:	a3 83       	std	Z+3, r26	; 0x03
    4bd0:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
        (unsigned int)__malloc_heap_start, (unsigned int) __malloc_heap_end );

    printf("  __brkval:    %5u\n", (unsigned int) __brkval);
    4bd4:	80 91 b8 21 	lds	r24, 0x21B8	; 0x8021b8 <__brkval>
    4bd8:	90 91 b9 21 	lds	r25, 0x21B9	; 0x8021b9 <__brkval+0x1>
    4bdc:	ed b7       	in	r30, 0x3d	; 61
    4bde:	fe b7       	in	r31, 0x3e	; 62
    4be0:	95 83       	std	Z+5, r25	; 0x05
    4be2:	84 83       	std	Z+4, r24	; 0x04
    4be4:	85 e5       	ldi	r24, 0x55	; 85
    4be6:	92 e0       	ldi	r25, 0x02	; 2
    4be8:	a0 e0       	ldi	r26, 0x00	; 0
    4bea:	81 83       	std	Z+1, r24	; 0x01
    4bec:	92 83       	std	Z+2, r25	; 0x02
    4bee:	a3 83       	std	Z+3, r26	; 0x03
    4bf0:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>

}
    4bf4:	29 96       	adiw	r28, 0x09	; 9
    4bf6:	e2 e0       	ldi	r30, 0x02	; 2
    4bf8:	0c 94 35 e3 	jmp	0x1c66a	; 0x1c66a <__epilogue_restores__+0x20>

00004bfc <safecalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
///
/// @return  void.
void *safecalloc(int size, int elements)
{
    4bfc:	ef 92       	push	r14
    4bfe:	ff 92       	push	r15
    4c00:	0f 93       	push	r16
    4c02:	1f 93       	push	r17
    4c04:	cf 93       	push	r28
    4c06:	df 93       	push	r29
    4c08:	ad b7       	in	r26, 0x3d	; 61
    4c0a:	be b7       	in	r27, 0x3e	; 62
    4c0c:	17 97       	sbiw	r26, 0x07	; 7
    4c0e:	0f b6       	in	r0, 0x3f	; 63
    4c10:	f8 94       	cli
    4c12:	be bf       	out	0x3e, r27	; 62
    4c14:	0f be       	out	0x3f, r0	; 63
    4c16:	ad bf       	out	0x3d, r26	; 61
    4c18:	8c 01       	movw	r16, r24
    4c1a:	7b 01       	movw	r14, r22
    void *p = calloc(size, elements);
    4c1c:	0e 94 c6 e5 	call	0x1cb8c	; 0x1cb8c <calloc>
    4c20:	ec 01       	movw	r28, r24
    if(!p)
    4c22:	89 2b       	or	r24, r25
    4c24:	71 f4       	brne	.+28     	; 0x4c42 <safecalloc+0x46>
    {
        printf("safecalloc(%d,%d) failed!\n", size, elements);
    4c26:	ed b7       	in	r30, 0x3d	; 61
    4c28:	fe b7       	in	r31, 0x3e	; 62
    4c2a:	f7 82       	std	Z+7, r15	; 0x07
    4c2c:	e6 82       	std	Z+6, r14	; 0x06
    4c2e:	15 83       	std	Z+5, r17	; 0x05
    4c30:	04 83       	std	Z+4, r16	; 0x04
    4c32:	8a e3       	ldi	r24, 0x3A	; 58
    4c34:	92 e0       	ldi	r25, 0x02	; 2
    4c36:	a0 e0       	ldi	r26, 0x00	; 0
    4c38:	81 83       	std	Z+1, r24	; 0x01
    4c3a:	92 83       	std	Z+2, r25	; 0x02
    4c3c:	a3 83       	std	Z+3, r26	; 0x03
    4c3e:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    }
    return(p);
}
    4c42:	ce 01       	movw	r24, r28
    4c44:	cd b7       	in	r28, 0x3d	; 61
    4c46:	de b7       	in	r29, 0x3e	; 62
    4c48:	27 96       	adiw	r28, 0x07	; 7
    4c4a:	e6 e0       	ldi	r30, 0x06	; 6
    4c4c:	0c 94 31 e3 	jmp	0x1c662	; 0x1c662 <__epilogue_restores__+0x18>

00004c50 <safemalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
/// @param[in] size:  size
/// @return  void.
void *safemalloc(size_t size)
{
    4c50:	0f 93       	push	r16
    4c52:	1f 93       	push	r17
    4c54:	cf 93       	push	r28
    4c56:	df 93       	push	r29
    4c58:	00 d0       	rcall	.+0      	; 0x4c5a <safemalloc+0xa>
    4c5a:	00 d0       	rcall	.+0      	; 0x4c5c <safemalloc+0xc>
    4c5c:	1f 92       	push	r1
    4c5e:	8c 01       	movw	r16, r24
    void *p = calloc(size, 1);
    4c60:	61 e0       	ldi	r22, 0x01	; 1
    4c62:	70 e0       	ldi	r23, 0x00	; 0
    4c64:	0e 94 c6 e5 	call	0x1cb8c	; 0x1cb8c <calloc>
    4c68:	ec 01       	movw	r28, r24
    if(!p)
    4c6a:	89 2b       	or	r24, r25
    4c6c:	61 f4       	brne	.+24     	; 0x4c86 <safemalloc+0x36>
    {
        printf("safemalloc(%d) failed!\n", size);
    4c6e:	ed b7       	in	r30, 0x3d	; 61
    4c70:	fe b7       	in	r31, 0x3e	; 62
    4c72:	15 83       	std	Z+5, r17	; 0x05
    4c74:	04 83       	std	Z+4, r16	; 0x04
    4c76:	82 e2       	ldi	r24, 0x22	; 34
    4c78:	92 e0       	ldi	r25, 0x02	; 2
    4c7a:	a0 e0       	ldi	r26, 0x00	; 0
    4c7c:	81 83       	std	Z+1, r24	; 0x01
    4c7e:	92 83       	std	Z+2, r25	; 0x02
    4c80:	a3 83       	std	Z+3, r26	; 0x03
    4c82:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    }
    return(p);
}
    4c86:	ce 01       	movw	r24, r28
    4c88:	cd b7       	in	r28, 0x3d	; 61
    4c8a:	de b7       	in	r29, 0x3e	; 62
    4c8c:	25 96       	adiw	r28, 0x05	; 5
    4c8e:	e4 e0       	ldi	r30, 0x04	; 4
    4c90:	0c 94 33 e3 	jmp	0x1c666	; 0x1c666 <__epilogue_restores__+0x1c>

00004c94 <safefree>:
///
/// @param[in] p: pointer to free.
///
/// @return  void.
void safefree(void *p)
{
    4c94:	ad b7       	in	r26, 0x3d	; 61
    4c96:	be b7       	in	r27, 0x3e	; 62
    4c98:	17 97       	sbiw	r26, 0x07	; 7
    4c9a:	0f b6       	in	r0, 0x3f	; 63
    4c9c:	f8 94       	cli
    4c9e:	be bf       	out	0x3e, r27	; 62
    4ca0:	0f be       	out	0x3f, r0	; 63
    4ca2:	ad bf       	out	0x3d, r26	; 61
    extern void *__brkval;
    extern void * __heap_start;
    extern void * __heap_end;
    uint16_t top;

    if(p == NULL)
    4ca4:	00 97       	sbiw	r24, 0x00	; 0
    4ca6:	11 f1       	breq	.+68     	; 0x4cec <safefree+0x58>
        return;

    if(__brkval)
    4ca8:	20 91 b8 21 	lds	r18, 0x21B8	; 0x8021b8 <__brkval>
    4cac:	30 91 b9 21 	lds	r19, 0x21B9	; 0x8021b9 <__brkval+0x1>
    4cb0:	21 15       	cp	r18, r1
    4cb2:	31 05       	cpc	r19, r1
    4cb4:	11 f4       	brne	.+4      	; 0x4cba <safefree+0x26>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    4cb6:	2c eb       	ldi	r18, 0xBC	; 188
    4cb8:	31 e2       	ldi	r19, 0x21	; 33

    if( ((uint16_t) p >= (uint16_t) &__heap_start) &&
    4cba:	41 e2       	ldi	r20, 0x21	; 33
    4cbc:	8c 3b       	cpi	r24, 0xBC	; 188
    4cbe:	94 07       	cpc	r25, r20
    4cc0:	30 f0       	brcs	.+12     	; 0x4cce <safefree+0x3a>
    4cc2:	28 17       	cp	r18, r24
    4cc4:	39 07       	cpc	r19, r25
    4cc6:	18 f0       	brcs	.+6      	; 0x4cce <safefree+0x3a>
        ((uint16_t) p <= top) )
    {
        free(p);
    4cc8:	0e 94 78 e6 	call	0x1ccf0	; 0x1ccf0 <free>
        return;
    4ccc:	0f c0       	rjmp	.+30     	; 0x4cec <safefree+0x58>
    }
    printf("safefree: FREE ERROR (%u), top:(%u)\n", (uint16_t) p, (uint16_t) top);
    4cce:	ed b7       	in	r30, 0x3d	; 61
    4cd0:	fe b7       	in	r31, 0x3e	; 62
    4cd2:	37 83       	std	Z+7, r19	; 0x07
    4cd4:	26 83       	std	Z+6, r18	; 0x06
    4cd6:	95 83       	std	Z+5, r25	; 0x05
    4cd8:	84 83       	std	Z+4, r24	; 0x04
    4cda:	8d ef       	ldi	r24, 0xFD	; 253
    4cdc:	91 e0       	ldi	r25, 0x01	; 1
    4cde:	a0 e0       	ldi	r26, 0x00	; 0
    4ce0:	81 83       	std	Z+1, r24	; 0x01
    4ce2:	92 83       	std	Z+2, r25	; 0x02
    4ce4:	a3 83       	std	Z+3, r26	; 0x03
    4ce6:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    PrintFree();
    4cea:	f7 de       	rcall	.-530    	; 0x4ada <PrintFree>
}
    4cec:	ad b7       	in	r26, 0x3d	; 61
    4cee:	be b7       	in	r27, 0x3e	; 62
    4cf0:	17 96       	adiw	r26, 0x07	; 7
    4cf2:	0f b6       	in	r0, 0x3f	; 63
    4cf4:	f8 94       	cli
    4cf6:	be bf       	out	0x3e, r27	; 62
    4cf8:	0f be       	out	0x3f, r0	; 63
    4cfa:	ad bf       	out	0x3d, r26	; 61
    4cfc:	08 95       	ret

00004cfe <delayus>:
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayus(uint32_t us)
{

    while (us >= 100U)
    4cfe:	64 36       	cpi	r22, 0x64	; 100
    4d00:	71 05       	cpc	r23, r1
    4d02:	81 05       	cpc	r24, r1
    4d04:	91 05       	cpc	r25, r1
    4d06:	58 f0       	brcs	.+22     	; 0x4d1e <delayus+0x20>
    {
        us -= 100U;
    4d08:	64 56       	subi	r22, 0x64	; 100
    4d0a:	71 09       	sbc	r23, r1
    4d0c:	81 09       	sbc	r24, r1
    4d0e:	91 09       	sbc	r25, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4d10:	e3 ef       	ldi	r30, 0xF3	; 243
    4d12:	f1 e0       	ldi	r31, 0x01	; 1
    4d14:	31 97       	sbiw	r30, 0x01	; 1
    4d16:	f1 f7       	brne	.-4      	; 0x4d14 <delayus+0x16>
    4d18:	00 c0       	rjmp	.+0      	; 0x4d1a <delayus+0x1c>
    4d1a:	00 00       	nop
    4d1c:	f0 cf       	rjmp	.-32     	; 0x4cfe <delayus>
        _delay_us(100);
    }
    while (us >= 10U)
    4d1e:	6a 30       	cpi	r22, 0x0A	; 10
    4d20:	71 05       	cpc	r23, r1
    4d22:	81 05       	cpc	r24, r1
    4d24:	91 05       	cpc	r25, r1
    4d26:	48 f0       	brcs	.+18     	; 0x4d3a <delayus+0x3c>
    {
        us -= 10U;
    4d28:	6a 50       	subi	r22, 0x0A	; 10
    4d2a:	71 09       	sbc	r23, r1
    4d2c:	81 09       	sbc	r24, r1
    4d2e:	91 09       	sbc	r25, r1
    4d30:	f2 e4       	ldi	r31, 0x42	; 66
    4d32:	fa 95       	dec	r31
    4d34:	f1 f7       	brne	.-4      	; 0x4d32 <delayus+0x34>
    4d36:	00 c0       	rjmp	.+0      	; 0x4d38 <delayus+0x3a>
    4d38:	f2 cf       	rjmp	.-28     	; 0x4d1e <delayus+0x20>
        _delay_us(10);
    }
    while (us != 0U)
    4d3a:	61 15       	cp	r22, r1
    4d3c:	71 05       	cpc	r23, r1
    4d3e:	81 05       	cpc	r24, r1
    4d40:	91 05       	cpc	r25, r1
    4d42:	49 f0       	breq	.+18     	; 0x4d56 <delayus+0x58>
    {
        --us;
    4d44:	61 50       	subi	r22, 0x01	; 1
    4d46:	71 09       	sbc	r23, r1
    4d48:	81 09       	sbc	r24, r1
    4d4a:	91 09       	sbc	r25, r1
    4d4c:	26 e0       	ldi	r18, 0x06	; 6
    4d4e:	2a 95       	dec	r18
    4d50:	f1 f7       	brne	.-4      	; 0x4d4e <delayus+0x50>
    4d52:	00 c0       	rjmp	.+0      	; 0x4d54 <delayus+0x56>
    4d54:	f2 cf       	rjmp	.-28     	; 0x4d3a <delayus+0x3c>
        _delay_us(1);
    }
}
    4d56:	08 95       	ret

00004d58 <delayms>:
/// _delay_us() has limited range - this extends it.
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayms(uint32_t ms)
{
    while (ms--)
    4d58:	61 15       	cp	r22, r1
    4d5a:	71 05       	cpc	r23, r1
    4d5c:	81 05       	cpc	r24, r1
    4d5e:	91 05       	cpc	r25, r1
    4d60:	09 f4       	brne	.+2      	; 0x4d64 <delayms+0xc>
    4d62:	41 c0       	rjmp	.+130    	; 0x4de6 <delayms+0x8e>
    4d64:	e3 ef       	ldi	r30, 0xF3	; 243
    4d66:	f1 e0       	ldi	r31, 0x01	; 1
    4d68:	31 97       	sbiw	r30, 0x01	; 1
    4d6a:	f1 f7       	brne	.-4      	; 0x4d68 <delayms+0x10>
    4d6c:	00 c0       	rjmp	.+0      	; 0x4d6e <delayms+0x16>
    4d6e:	00 00       	nop
    4d70:	e3 ef       	ldi	r30, 0xF3	; 243
    4d72:	f1 e0       	ldi	r31, 0x01	; 1
    4d74:	31 97       	sbiw	r30, 0x01	; 1
    4d76:	f1 f7       	brne	.-4      	; 0x4d74 <delayms+0x1c>
    4d78:	00 c0       	rjmp	.+0      	; 0x4d7a <delayms+0x22>
    4d7a:	00 00       	nop
    4d7c:	e3 ef       	ldi	r30, 0xF3	; 243
    4d7e:	f1 e0       	ldi	r31, 0x01	; 1
    4d80:	31 97       	sbiw	r30, 0x01	; 1
    4d82:	f1 f7       	brne	.-4      	; 0x4d80 <delayms+0x28>
    4d84:	00 c0       	rjmp	.+0      	; 0x4d86 <delayms+0x2e>
    4d86:	00 00       	nop
    4d88:	e3 ef       	ldi	r30, 0xF3	; 243
    4d8a:	f1 e0       	ldi	r31, 0x01	; 1
    4d8c:	31 97       	sbiw	r30, 0x01	; 1
    4d8e:	f1 f7       	brne	.-4      	; 0x4d8c <delayms+0x34>
    4d90:	00 c0       	rjmp	.+0      	; 0x4d92 <delayms+0x3a>
    4d92:	00 00       	nop
    4d94:	e3 ef       	ldi	r30, 0xF3	; 243
    4d96:	f1 e0       	ldi	r31, 0x01	; 1
    4d98:	31 97       	sbiw	r30, 0x01	; 1
    4d9a:	f1 f7       	brne	.-4      	; 0x4d98 <delayms+0x40>
    4d9c:	00 c0       	rjmp	.+0      	; 0x4d9e <delayms+0x46>
    4d9e:	00 00       	nop
    4da0:	e3 ef       	ldi	r30, 0xF3	; 243
    4da2:	f1 e0       	ldi	r31, 0x01	; 1
    4da4:	31 97       	sbiw	r30, 0x01	; 1
    4da6:	f1 f7       	brne	.-4      	; 0x4da4 <delayms+0x4c>
    4da8:	00 c0       	rjmp	.+0      	; 0x4daa <delayms+0x52>
    4daa:	00 00       	nop
    4dac:	e3 ef       	ldi	r30, 0xF3	; 243
    4dae:	f1 e0       	ldi	r31, 0x01	; 1
    4db0:	31 97       	sbiw	r30, 0x01	; 1
    4db2:	f1 f7       	brne	.-4      	; 0x4db0 <delayms+0x58>
    4db4:	00 c0       	rjmp	.+0      	; 0x4db6 <delayms+0x5e>
    4db6:	00 00       	nop
    4db8:	e3 ef       	ldi	r30, 0xF3	; 243
    4dba:	f1 e0       	ldi	r31, 0x01	; 1
    4dbc:	31 97       	sbiw	r30, 0x01	; 1
    4dbe:	f1 f7       	brne	.-4      	; 0x4dbc <delayms+0x64>
    4dc0:	00 c0       	rjmp	.+0      	; 0x4dc2 <delayms+0x6a>
    4dc2:	00 00       	nop
    4dc4:	e3 ef       	ldi	r30, 0xF3	; 243
    4dc6:	f1 e0       	ldi	r31, 0x01	; 1
    4dc8:	31 97       	sbiw	r30, 0x01	; 1
    4dca:	f1 f7       	brne	.-4      	; 0x4dc8 <delayms+0x70>
    4dcc:	00 c0       	rjmp	.+0      	; 0x4dce <delayms+0x76>
    4dce:	00 00       	nop
    4dd0:	e3 ef       	ldi	r30, 0xF3	; 243
    4dd2:	f1 e0       	ldi	r31, 0x01	; 1
    4dd4:	31 97       	sbiw	r30, 0x01	; 1
    4dd6:	f1 f7       	brne	.-4      	; 0x4dd4 <delayms+0x7c>
    4dd8:	00 c0       	rjmp	.+0      	; 0x4dda <delayms+0x82>
    4dda:	00 00       	nop
    4ddc:	61 50       	subi	r22, 0x01	; 1
    4dde:	71 09       	sbc	r23, r1
    4de0:	81 09       	sbc	r24, r1
    4de2:	91 09       	sbc	r25, r1
    4de4:	b9 cf       	rjmp	.-142    	; 0x4d58 <delayms>
        _delay_us(100);                           // 700
        _delay_us(100);                           // 800
        _delay_us(100);                           // 900
        _delay_us(100);                           //1000
    }
}
    4de6:	08 95       	ret

00004de8 <uart_rx_flush>:

    cli();
    c = uarts[uart].rx_buf[uarts[uart].rx_tail];
    sei();
    return (c & 0xff);
}
    4de8:	81 11       	cpse	r24, r1
    4dea:	0e c0       	rjmp	.+28     	; 0x4e08 <uart_rx_flush+0x20>
    4dec:	f8 94       	cli
    4dee:	10 92 ff 19 	sts	0x19FF, r1	; 0x8019ff <uarts+0x4>
    4df2:	10 92 fe 19 	sts	0x19FE, r1	; 0x8019fe <uarts+0x3>
    4df6:	10 92 fb 19 	sts	0x19FB, r1	; 0x8019fb <uarts>
    4dfa:	10 92 fc 19 	sts	0x19FC, r1	; 0x8019fc <uarts+0x1>
    4dfe:	10 92 fd 19 	sts	0x19FD, r1	; 0x8019fd <uarts+0x2>
    4e02:	10 92 00 1a 	sts	0x1A00, r1	; 0x801a00 <uarts+0x5>
    4e06:	78 94       	sei
    4e08:	08 95       	ret

00004e0a <uart_ubr>:
    4e0a:	4f 92       	push	r4
    4e0c:	5f 92       	push	r5
    4e0e:	6f 92       	push	r6
    4e10:	7f 92       	push	r7
    4e12:	8f 92       	push	r8
    4e14:	9f 92       	push	r9
    4e16:	af 92       	push	r10
    4e18:	bf 92       	push	r11
    4e1a:	cf 92       	push	r12
    4e1c:	df 92       	push	r13
    4e1e:	ef 92       	push	r14
    4e20:	ff 92       	push	r15
    4e22:	cf 93       	push	r28
    4e24:	df 93       	push	r29
    4e26:	5a 01       	movw	r10, r20
    4e28:	e9 01       	movw	r28, r18
    4e2a:	0e 94 64 e4 	call	0x1c8c8	; 0x1c8c8 <__floatunsisf>
    4e2e:	2b 01       	movw	r4, r22
    4e30:	3c 01       	movw	r6, r24
    4e32:	20 e0       	ldi	r18, 0x00	; 0
    4e34:	30 e0       	ldi	r19, 0x00	; 0
    4e36:	40 e0       	ldi	r20, 0x00	; 0
    4e38:	51 e4       	ldi	r21, 0x41	; 65
    4e3a:	0e 94 1a e5 	call	0x1ca34	; 0x1ca34 <__mulsf3>
    4e3e:	9b 01       	movw	r18, r22
    4e40:	ac 01       	movw	r20, r24
    4e42:	60 e8       	ldi	r22, 0x80	; 128
    4e44:	76 e9       	ldi	r23, 0x96	; 150
    4e46:	88 e9       	ldi	r24, 0x98	; 152
    4e48:	9b e4       	ldi	r25, 0x4B	; 75
    4e4a:	0e 94 cb e3 	call	0x1c796	; 0x1c796 <__divsf3>
    4e4e:	20 e0       	ldi	r18, 0x00	; 0
    4e50:	30 e0       	ldi	r19, 0x00	; 0
    4e52:	40 e8       	ldi	r20, 0x80	; 128
    4e54:	5f e3       	ldi	r21, 0x3F	; 63
    4e56:	0e 94 62 e3 	call	0x1c6c4	; 0x1c6c4 <__subsf3>
    4e5a:	0e 94 7d e5 	call	0x1cafa	; 0x1cafa <round>
    4e5e:	0e 94 38 e4 	call	0x1c870	; 0x1c870 <__fixunssfsi>
    4e62:	6b 01       	movw	r12, r22
    4e64:	7c 01       	movw	r14, r24
    4e66:	c1 14       	cp	r12, r1
    4e68:	80 e1       	ldi	r24, 0x10	; 16
    4e6a:	d8 06       	cpc	r13, r24
    4e6c:	e1 04       	cpc	r14, r1
    4e6e:	f1 04       	cpc	r15, r1
    4e70:	58 f4       	brcc	.+22     	; 0x4e88 <uart_ubr+0x7e>
    4e72:	81 e0       	ldi	r24, 0x01	; 1
    4e74:	90 e0       	ldi	r25, 0x00	; 0
    4e76:	f5 01       	movw	r30, r10
    4e78:	91 83       	std	Z+1, r25	; 0x01
    4e7a:	80 83       	st	Z, r24
    4e7c:	81 2c       	mov	r8, r1
    4e7e:	91 2c       	mov	r9, r1
    4e80:	a1 2c       	mov	r10, r1
    4e82:	21 e4       	ldi	r18, 0x41	; 65
    4e84:	b2 2e       	mov	r11, r18
    4e86:	31 c0       	rjmp	.+98     	; 0x4eea <uart_ubr+0xe0>
    4e88:	f5 01       	movw	r30, r10
    4e8a:	11 82       	std	Z+1, r1	; 0x01
    4e8c:	10 82       	st	Z, r1
    4e8e:	20 e0       	ldi	r18, 0x00	; 0
    4e90:	30 e0       	ldi	r19, 0x00	; 0
    4e92:	40 e8       	ldi	r20, 0x80	; 128
    4e94:	51 e4       	ldi	r21, 0x41	; 65
    4e96:	c3 01       	movw	r24, r6
    4e98:	b2 01       	movw	r22, r4
    4e9a:	0e 94 1a e5 	call	0x1ca34	; 0x1ca34 <__mulsf3>
    4e9e:	9b 01       	movw	r18, r22
    4ea0:	ac 01       	movw	r20, r24
    4ea2:	60 e8       	ldi	r22, 0x80	; 128
    4ea4:	76 e9       	ldi	r23, 0x96	; 150
    4ea6:	88 e9       	ldi	r24, 0x98	; 152
    4ea8:	9b e4       	ldi	r25, 0x4B	; 75
    4eaa:	0e 94 cb e3 	call	0x1c796	; 0x1c796 <__divsf3>
    4eae:	20 e0       	ldi	r18, 0x00	; 0
    4eb0:	30 e0       	ldi	r19, 0x00	; 0
    4eb2:	40 e8       	ldi	r20, 0x80	; 128
    4eb4:	5f e3       	ldi	r21, 0x3F	; 63
    4eb6:	0e 94 62 e3 	call	0x1c6c4	; 0x1c6c4 <__subsf3>
    4eba:	0e 94 7d e5 	call	0x1cafa	; 0x1cafa <round>
    4ebe:	0e 94 38 e4 	call	0x1c870	; 0x1c870 <__fixunssfsi>
    4ec2:	6b 01       	movw	r12, r22
    4ec4:	7c 01       	movw	r14, r24
    4ec6:	81 2c       	mov	r8, r1
    4ec8:	91 2c       	mov	r9, r1
    4eca:	90 e8       	ldi	r25, 0x80	; 128
    4ecc:	a9 2e       	mov	r10, r25
    4ece:	91 e4       	ldi	r25, 0x41	; 65
    4ed0:	b9 2e       	mov	r11, r25
    4ed2:	c1 14       	cp	r12, r1
    4ed4:	f0 e1       	ldi	r31, 0x10	; 16
    4ed6:	df 06       	cpc	r13, r31
    4ed8:	e1 04       	cpc	r14, r1
    4eda:	f1 04       	cpc	r15, r1
    4edc:	30 f0       	brcs	.+12     	; 0x4eea <uart_ubr+0xe0>
    4ede:	cc 24       	eor	r12, r12
    4ee0:	ca 94       	dec	r12
    4ee2:	8f e0       	ldi	r24, 0x0F	; 15
    4ee4:	d8 2e       	mov	r13, r24
    4ee6:	e1 2c       	mov	r14, r1
    4ee8:	f1 2c       	mov	r15, r1
    4eea:	c7 01       	movw	r24, r14
    4eec:	b6 01       	movw	r22, r12
    4eee:	6f 5f       	subi	r22, 0xFF	; 255
    4ef0:	7f 4f       	sbci	r23, 0xFF	; 255
    4ef2:	8f 4f       	sbci	r24, 0xFF	; 255
    4ef4:	9f 4f       	sbci	r25, 0xFF	; 255
    4ef6:	0e 94 64 e4 	call	0x1c8c8	; 0x1c8c8 <__floatunsisf>
    4efa:	a5 01       	movw	r20, r10
    4efc:	94 01       	movw	r18, r8
    4efe:	0e 94 1a e5 	call	0x1ca34	; 0x1ca34 <__mulsf3>
    4f02:	9b 01       	movw	r18, r22
    4f04:	ac 01       	movw	r20, r24
    4f06:	60 e8       	ldi	r22, 0x80	; 128
    4f08:	76 e9       	ldi	r23, 0x96	; 150
    4f0a:	88 e9       	ldi	r24, 0x98	; 152
    4f0c:	9b e4       	ldi	r25, 0x4B	; 75
    4f0e:	0e 94 cb e3 	call	0x1c796	; 0x1c796 <__divsf3>
    4f12:	0e 94 38 e4 	call	0x1c870	; 0x1c870 <__fixunssfsi>
    4f16:	68 83       	st	Y, r22
    4f18:	79 83       	std	Y+1, r23	; 0x01
    4f1a:	8a 83       	std	Y+2, r24	; 0x02
    4f1c:	9b 83       	std	Y+3, r25	; 0x03
    4f1e:	c6 01       	movw	r24, r12
    4f20:	df 91       	pop	r29
    4f22:	cf 91       	pop	r28
    4f24:	ff 90       	pop	r15
    4f26:	ef 90       	pop	r14
    4f28:	df 90       	pop	r13
    4f2a:	cf 90       	pop	r12
    4f2c:	bf 90       	pop	r11
    4f2e:	af 90       	pop	r10
    4f30:	9f 90       	pop	r9
    4f32:	8f 90       	pop	r8
    4f34:	7f 90       	pop	r7
    4f36:	6f 90       	pop	r6
    4f38:	5f 90       	pop	r5
    4f3a:	4f 90       	pop	r4
    4f3c:	08 95       	ret

00004f3e <uart_init>:
    4f3e:	a6 e0       	ldi	r26, 0x06	; 6
    4f40:	b0 e0       	ldi	r27, 0x00	; 0
    4f42:	e5 ea       	ldi	r30, 0xA5	; 165
    4f44:	f7 e2       	ldi	r31, 0x27	; 39
    4f46:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__prologue_saves__+0x20>
    4f4a:	1e 82       	std	Y+6, r1	; 0x06
    4f4c:	1d 82       	std	Y+5, r1	; 0x05
    4f4e:	81 11       	cpse	r24, r1
    4f50:	36 c0       	rjmp	.+108    	; 0x4fbe <uart_init+0x80>
    4f52:	cb 01       	movw	r24, r22
    4f54:	ba 01       	movw	r22, r20
    4f56:	9e 01       	movw	r18, r28
    4f58:	2f 5f       	subi	r18, 0xFF	; 255
    4f5a:	3f 4f       	sbci	r19, 0xFF	; 255
    4f5c:	ae 01       	movw	r20, r28
    4f5e:	4b 5f       	subi	r20, 0xFB	; 251
    4f60:	5f 4f       	sbci	r21, 0xFF	; 255
    4f62:	53 df       	rcall	.-346    	; 0x4e0a <uart_ubr>
    4f64:	f8 94       	cli
    4f66:	10 92 ff 19 	sts	0x19FF, r1	; 0x8019ff <uarts+0x4>
    4f6a:	10 92 fe 19 	sts	0x19FE, r1	; 0x8019fe <uarts+0x3>
    4f6e:	10 92 fb 19 	sts	0x19FB, r1	; 0x8019fb <uarts>
    4f72:	10 92 fc 19 	sts	0x19FC, r1	; 0x8019fc <uarts+0x1>
    4f76:	10 92 fd 19 	sts	0x19FD, r1	; 0x8019fd <uarts+0x2>
    4f7a:	10 92 00 1a 	sts	0x1A00, r1	; 0x801a00 <uarts+0x5>
    4f7e:	78 94       	sei
    4f80:	f8 94       	cli
    4f82:	58 9a       	sbi	0x0b, 0	; 11
    4f84:	59 9a       	sbi	0x0b, 1	; 11
    4f86:	50 98       	cbi	0x0a, 0	; 10
    4f88:	51 9a       	sbi	0x0a, 1	; 10
    4f8a:	28 e9       	ldi	r18, 0x98	; 152
    4f8c:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    4f90:	2d 81       	ldd	r18, Y+5	; 0x05
    4f92:	3e 81       	ldd	r19, Y+6	; 0x06
    4f94:	23 2b       	or	r18, r19
    4f96:	19 f0       	breq	.+6      	; 0x4f9e <uart_init+0x60>
    4f98:	22 e0       	ldi	r18, 0x02	; 2
    4f9a:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    4f9e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    4fa2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    4fa6:	78 94       	sei
    4fa8:	68 e9       	ldi	r22, 0x98	; 152
    4faa:	78 e2       	ldi	r23, 0x28	; 40
    4fac:	8d ea       	ldi	r24, 0xAD	; 173
    4fae:	98 e2       	ldi	r25, 0x28	; 40
    4fb0:	0e 94 01 77 	call	0xee02	; 0xee02 <fdevopen>
    4fb4:	69 81       	ldd	r22, Y+1	; 0x01
    4fb6:	7a 81       	ldd	r23, Y+2	; 0x02
    4fb8:	8b 81       	ldd	r24, Y+3	; 0x03
    4fba:	9c 81       	ldd	r25, Y+4	; 0x04
    4fbc:	03 c0       	rjmp	.+6      	; 0x4fc4 <uart_init+0x86>
    4fbe:	60 e0       	ldi	r22, 0x00	; 0
    4fc0:	70 e0       	ldi	r23, 0x00	; 0
    4fc2:	cb 01       	movw	r24, r22
    4fc4:	26 96       	adiw	r28, 0x06	; 6
    4fc6:	e2 e0       	ldi	r30, 0x02	; 2
    4fc8:	0c 94 35 e3 	jmp	0x1c66a	; 0x1c66a <__epilogue_restores__+0x20>

00004fcc <uart_rx_interrupt>:
    4fcc:	cf 93       	push	r28
    4fce:	df 93       	push	r29
    4fd0:	27 e5       	ldi	r18, 0x57	; 87
    4fd2:	82 9f       	mul	r24, r18
    4fd4:	c0 01       	movw	r24, r0
    4fd6:	11 24       	eor	r1, r1
    4fd8:	fc 01       	movw	r30, r24
    4fda:	e5 50       	subi	r30, 0x05	; 5
    4fdc:	f6 4e       	sbci	r31, 0xE6	; 230
    4fde:	83 81       	ldd	r24, Z+3	; 0x03
    4fe0:	94 81       	ldd	r25, Z+4	; 0x04
    4fe2:	80 35       	cpi	r24, 0x50	; 80
    4fe4:	91 05       	cpc	r25, r1
    4fe6:	84 f4       	brge	.+32     	; 0x5008 <uart_rx_interrupt+0x3c>
    4fe8:	30 81       	ld	r19, Z
    4fea:	21 e0       	ldi	r18, 0x01	; 1
    4fec:	23 0f       	add	r18, r19
    4fee:	20 83       	st	Z, r18
    4ff0:	ef 01       	movw	r28, r30
    4ff2:	c3 0f       	add	r28, r19
    4ff4:	d1 1d       	adc	r29, r1
    4ff6:	6f 77       	andi	r22, 0x7F	; 127
    4ff8:	6e 83       	std	Y+6, r22	; 0x06
    4ffa:	01 96       	adiw	r24, 0x01	; 1
    4ffc:	94 83       	std	Z+4, r25	; 0x04
    4ffe:	83 83       	std	Z+3, r24	; 0x03
    5000:	20 35       	cpi	r18, 0x50	; 80
    5002:	28 f0       	brcs	.+10     	; 0x500e <uart_rx_interrupt+0x42>
    5004:	10 82       	st	Z, r1
    5006:	03 c0       	rjmp	.+6      	; 0x500e <uart_rx_interrupt+0x42>
    5008:	85 81       	ldd	r24, Z+5	; 0x05
    500a:	81 60       	ori	r24, 0x01	; 1
    500c:	85 83       	std	Z+5, r24	; 0x05
    500e:	df 91       	pop	r29
    5010:	cf 91       	pop	r28
    5012:	08 95       	ret

00005014 <__vector_20>:
    5014:	1f 92       	push	r1
    5016:	0f 92       	push	r0
    5018:	0f b6       	in	r0, 0x3f	; 63
    501a:	0f 92       	push	r0
    501c:	11 24       	eor	r1, r1
    501e:	0b b6       	in	r0, 0x3b	; 59
    5020:	0f 92       	push	r0
    5022:	2f 93       	push	r18
    5024:	3f 93       	push	r19
    5026:	4f 93       	push	r20
    5028:	5f 93       	push	r21
    502a:	6f 93       	push	r22
    502c:	7f 93       	push	r23
    502e:	8f 93       	push	r24
    5030:	9f 93       	push	r25
    5032:	af 93       	push	r26
    5034:	bf 93       	push	r27
    5036:	ef 93       	push	r30
    5038:	ff 93       	push	r31
    503a:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    503e:	80 e0       	ldi	r24, 0x00	; 0
    5040:	c5 df       	rcall	.-118    	; 0x4fcc <uart_rx_interrupt>
    5042:	ff 91       	pop	r31
    5044:	ef 91       	pop	r30
    5046:	bf 91       	pop	r27
    5048:	af 91       	pop	r26
    504a:	9f 91       	pop	r25
    504c:	8f 91       	pop	r24
    504e:	7f 91       	pop	r23
    5050:	6f 91       	pop	r22
    5052:	5f 91       	pop	r21
    5054:	4f 91       	pop	r20
    5056:	3f 91       	pop	r19
    5058:	2f 91       	pop	r18
    505a:	0f 90       	pop	r0
    505c:	0b be       	out	0x3b, r0	; 59
    505e:	0f 90       	pop	r0
    5060:	0f be       	out	0x3f, r0	; 63
    5062:	0f 90       	pop	r0
    5064:	1f 90       	pop	r1
    5066:	18 95       	reti

00005068 <uart_rx_count>:
/// @return  Character count in ring buffer.
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
    5068:	81 11       	cpse	r24, r1
    506a:	07 c0       	rjmp	.+14     	; 0x507a <uart_rx_count+0x12>
        return(EOF);

    cli();
    506c:	f8 94       	cli

    count = uarts[uart].rx_count;
    506e:	80 91 fe 19 	lds	r24, 0x19FE	; 0x8019fe <uarts+0x3>
    5072:	90 91 ff 19 	lds	r25, 0x19FF	; 0x8019ff <uarts+0x4>

    sei();
    5076:	78 94       	sei

    return (count );
    5078:	08 95       	ret
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
        return(EOF);
    507a:	8f ef       	ldi	r24, 0xFF	; 255
    507c:	9f ef       	ldi	r25, 0xFF	; 255
    count = uarts[uart].rx_count;

    sei();

    return (count );
}
    507e:	08 95       	ret

00005080 <uart_get_tail>:
/// @see uart_rx_count().
int uart_get_tail(uint8_t uart)
{
    uint8_t c;

    if (uart >= UARTS)
    5080:	81 11       	cpse	r24, r1
    5082:	21 c0       	rjmp	.+66     	; 0x50c6 <uart_get_tail+0x46>
    {
        return(EOF);
    }

    while(uart_rx_count(uart) < 1)
    5084:	80 e0       	ldi	r24, 0x00	; 0
    5086:	f0 df       	rcall	.-32     	; 0x5068 <uart_rx_count>
    5088:	18 16       	cp	r1, r24
    508a:	19 06       	cpc	r1, r25
    508c:	dc f7       	brge	.-10     	; 0x5084 <uart_get_tail+0x4>
        ;

    cli();
    508e:	f8 94       	cli
    c = uarts[uart].rx_buf[uarts[uart].rx_tail++];
    5090:	e0 91 fc 19 	lds	r30, 0x19FC	; 0x8019fc <uarts+0x1>
    5094:	91 e0       	ldi	r25, 0x01	; 1
    5096:	9e 0f       	add	r25, r30
    5098:	90 93 fc 19 	sts	0x19FC, r25	; 0x8019fc <uarts+0x1>
    509c:	f0 e0       	ldi	r31, 0x00	; 0
    509e:	e5 50       	subi	r30, 0x05	; 5
    50a0:	f6 4e       	sbci	r31, 0xE6	; 230
    50a2:	86 81       	ldd	r24, Z+6	; 0x06
    if (uarts[uart].rx_tail >= RX_BUF_SIZE)
    50a4:	90 35       	cpi	r25, 0x50	; 80
    50a6:	10 f0       	brcs	.+4      	; 0x50ac <uart_get_tail+0x2c>
        uarts[uart].rx_tail = 0;
    50a8:	10 92 fc 19 	sts	0x19FC, r1	; 0x8019fc <uarts+0x1>
    uarts[uart].rx_count--;
    50ac:	20 91 fe 19 	lds	r18, 0x19FE	; 0x8019fe <uarts+0x3>
    50b0:	30 91 ff 19 	lds	r19, 0x19FF	; 0x8019ff <uarts+0x4>
    50b4:	21 50       	subi	r18, 0x01	; 1
    50b6:	31 09       	sbc	r19, r1
    50b8:	30 93 ff 19 	sts	0x19FF, r19	; 0x8019ff <uarts+0x4>
    50bc:	20 93 fe 19 	sts	0x19FE, r18	; 0x8019fe <uarts+0x3>
    sei();
    50c0:	78 94       	sei

    return (c & 0xff);
    50c2:	90 e0       	ldi	r25, 0x00	; 0
    50c4:	08 95       	ret
{
    uint8_t c;

    if (uart >= UARTS)
    {
        return(EOF);
    50c6:	8f ef       	ldi	r24, 0xFF	; 255
    50c8:	9f ef       	ldi	r25, 0xFF	; 255
        uarts[uart].rx_tail = 0;
    uarts[uart].rx_count--;
    sei();

    return (c & 0xff);
}
    50ca:	08 95       	ret

000050cc <uart_rx_byte>:
/// @param[in] uart: uart number.
///
/// @return  Character.
int uart_rx_byte(uint8_t uart)
{
    return( uart_get_tail(uart) & 0xff);
    50cc:	d9 df       	rcall	.-78     	; 0x5080 <uart_get_tail>
}
    50ce:	99 27       	eor	r25, r25
    50d0:	08 95       	ret

000050d2 <uart_tx_byte>:
/// @param[in] uart: uart number.
///
/// @return void.
int uart_tx_byte(int c, uint8_t uart)
{
    if(uart == 0)
    50d2:	61 11       	cpse	r22, r1
    50d4:	09 c0       	rjmp	.+18     	; 0x50e8 <uart_tx_byte+0x16>
    {
        while (!BIT_TST(UCSR0A, UDRE0))
    50d6:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    50da:	25 ff       	sbrs	r18, 5
    50dc:	fc cf       	rjmp	.-8      	; 0x50d6 <uart_tx_byte+0x4>
            ;
        UDR0 = c & 0x7f;
    50de:	28 2f       	mov	r18, r24
    50e0:	2f 77       	andi	r18, 0x7F	; 127
    50e2:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
        return(c);
    50e6:	08 95       	ret
    }
#ifdef UARTS > 1
    if(uart == 1)
    50e8:	61 30       	cpi	r22, 0x01	; 1
    50ea:	49 f4       	brne	.+18     	; 0x50fe <uart_tx_byte+0x2c>
    {
        while (!BIT_TST(UCSR1A, UDRE1))
    50ec:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    50f0:	25 ff       	sbrs	r18, 5
    50f2:	fc cf       	rjmp	.-8      	; 0x50ec <uart_tx_byte+0x1a>
            ;
        UDR1 = c & 0x7f;
    50f4:	28 2f       	mov	r18, r24
    50f6:	2f 77       	andi	r18, 0x7F	; 127
    50f8:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    50fc:	08 95       	ret
        return(c);
    }
#endif
    return(EOF);
    50fe:	8f ef       	ldi	r24, 0xFF	; 255
    5100:	9f ef       	ldi	r25, 0xFF	; 255
}
    5102:	08 95       	ret

00005104 <uart_getchar>:
///
/// @param[in] uart: uart number.
///
/// @return  Character.
int uart_getchar(uint8_t uart)
{
    5104:	cf 93       	push	r28
    uint8_t c;

    if(uart >= UARTS)
    5106:	81 11       	cpse	r24, r1
    5108:	0f c0       	rjmp	.+30     	; 0x5128 <uart_getchar+0x24>
        break;
    }
    if(c == '\r')
        c = '\n';
#endif
    c = uart_rx_byte(uart);
    510a:	e0 df       	rcall	.-64     	; 0x50cc <uart_rx_byte>
    510c:	c8 2f       	mov	r28, r24
    uart_tx_byte(c, uart);
    510e:	60 e0       	ldi	r22, 0x00	; 0
    5110:	90 e0       	ldi	r25, 0x00	; 0
    5112:	df df       	rcall	.-66     	; 0x50d2 <uart_tx_byte>
    if(c == '\r')
    5114:	cd 30       	cpi	r28, 0x0D	; 13
    5116:	29 f4       	brne	.+10     	; 0x5122 <uart_getchar+0x1e>
    {
        c = '\n';
        uart_tx_byte(c, uart);
    5118:	60 e0       	ldi	r22, 0x00	; 0
    511a:	8a e0       	ldi	r24, 0x0A	; 10
    511c:	90 e0       	ldi	r25, 0x00	; 0
    511e:	d9 df       	rcall	.-78     	; 0x50d2 <uart_tx_byte>
#endif
    c = uart_rx_byte(uart);
    uart_tx_byte(c, uart);
    if(c == '\r')
    {
        c = '\n';
    5120:	ca e0       	ldi	r28, 0x0A	; 10
        uart_tx_byte(c, uart);
    }
//FIXME ECHO
    return (c);
    5122:	8c 2f       	mov	r24, r28
    5124:	90 e0       	ldi	r25, 0x00	; 0
    5126:	02 c0       	rjmp	.+4      	; 0x512c <uart_getchar+0x28>
int uart_getchar(uint8_t uart)
{
    uint8_t c;

    if(uart >= UARTS)
        return(EOF);
    5128:	8f ef       	ldi	r24, 0xFF	; 255
    512a:	9f ef       	ldi	r25, 0xFF	; 255
        c = '\n';
        uart_tx_byte(c, uart);
    }
//FIXME ECHO
    return (c);
}
    512c:	cf 91       	pop	r28
    512e:	08 95       	ret

00005130 <uart0_getchar>:
///
/// @return  uart_getchar(0);.
/// @see fdevopen() from avr-libc.
int uart0_getchar( void *f  __attribute__((unused)))
{
    return( uart_getchar(0) );
    5130:	80 e0       	ldi	r24, 0x00	; 0
    5132:	e8 cf       	rjmp	.-48     	; 0x5104 <uart_getchar>
}
    5134:	08 95       	ret

00005136 <uart_putchar>:
/// @param[in] c: transmit character.
/// @param[in] uart: uart number.
///
/// @return void.
int uart_putchar(int c, int uart)
{
    5136:	1f 93       	push	r17
    5138:	cf 93       	push	r28
    513a:	df 93       	push	r29
    513c:	ec 01       	movw	r28, r24
    513e:	16 2f       	mov	r17, r22
    uart_tx_byte(c, uart);
    5140:	c8 df       	rcall	.-112    	; 0x50d2 <uart_tx_byte>

    if( c == '\n' )
    5142:	ca 30       	cpi	r28, 0x0A	; 10
    5144:	d1 05       	cpc	r29, r1
    5146:	21 f4       	brne	.+8      	; 0x5150 <uart_putchar+0x1a>
        uart_tx_byte('\r', uart);
    5148:	61 2f       	mov	r22, r17
    514a:	8d e0       	ldi	r24, 0x0D	; 13
    514c:	90 e0       	ldi	r25, 0x00	; 0
    514e:	c1 df       	rcall	.-126    	; 0x50d2 <uart_tx_byte>

    return(c);
}
    5150:	ce 01       	movw	r24, r28
    5152:	df 91       	pop	r29
    5154:	cf 91       	pop	r28
    5156:	1f 91       	pop	r17
    5158:	08 95       	ret

0000515a <uart0_putchar>:
/// @param[in] f: unused FILE *stream pointer.
///
/// @return  uart_putchar(c, 0);.
/// @see fdevopen() from avr-libc.
int uart0_putchar(int c, void *f  __attribute__((unused)))
{
    515a:	cf 93       	push	r28
    515c:	df 93       	push	r29
    515e:	ec 01       	movw	r28, r24
    uart_putchar(c, 0);
    5160:	60 e0       	ldi	r22, 0x00	; 0
    5162:	70 e0       	ldi	r23, 0x00	; 0
    5164:	e8 df       	rcall	.-48     	; 0x5136 <uart_putchar>
    return(c);
}
    5166:	ce 01       	movw	r24, r28
    5168:	df 91       	pop	r29
    516a:	cf 91       	pop	r28
    516c:	08 95       	ret

0000516e <uart_keyhit>:
/// @param[in] uart: uart number.
///
/// @return  Character count in receive buffer.
int uart_keyhit(uint8_t uart)
{
    return ( uart_rx_count( uart ) );
    516e:	7c cf       	rjmp	.-264    	; 0x5068 <uart_rx_count>
}
    5170:	08 95       	ret

00005172 <SPI0_Speed>:
/// @brief  Return saved SPI mode as set by SPI0_Mode().
/// @return  saved mode.
int SPI0_Get_Mode( void )
{
    return(SPI0_Mode_value);
}
    5172:	cf 92       	push	r12
    5174:	df 92       	push	r13
    5176:	ef 92       	push	r14
    5178:	ff 92       	push	r15
    517a:	6b 01       	movw	r12, r22
    517c:	7c 01       	movw	r14, r24
    517e:	80 91 5d 17 	lds	r24, 0x175D	; 0x80175d <SPI0_Speed_value>
    5182:	90 91 5e 17 	lds	r25, 0x175E	; 0x80175e <SPI0_Speed_value+0x1>
    5186:	a0 91 5f 17 	lds	r26, 0x175F	; 0x80175f <SPI0_Speed_value+0x2>
    518a:	b0 91 60 17 	lds	r27, 0x1760	; 0x801760 <SPI0_Speed_value+0x3>
    518e:	8c 15       	cp	r24, r12
    5190:	9d 05       	cpc	r25, r13
    5192:	ae 05       	cpc	r26, r14
    5194:	bf 05       	cpc	r27, r15
    5196:	09 f4       	brne	.+2      	; 0x519a <SPI0_Speed+0x28>
    5198:	4e c0       	rjmp	.+156    	; 0x5236 <SPI0_Speed+0xc4>
    519a:	60 e0       	ldi	r22, 0x00	; 0
    519c:	7d e2       	ldi	r23, 0x2D	; 45
    519e:	81 e3       	ldi	r24, 0x31	; 49
    51a0:	91 e0       	ldi	r25, 0x01	; 1
    51a2:	a7 01       	movw	r20, r14
    51a4:	96 01       	movw	r18, r12
    51a6:	0e 94 9c e2 	call	0x1c538	; 0x1c538 <__udivmodsi4>
    51aa:	20 38       	cpi	r18, 0x80	; 128
    51ac:	31 05       	cpc	r19, r1
    51ae:	41 05       	cpc	r20, r1
    51b0:	51 05       	cpc	r21, r1
    51b2:	28 f4       	brcc	.+10     	; 0x51be <SPI0_Speed+0x4c>
    51b4:	20 34       	cpi	r18, 0x40	; 64
    51b6:	31 05       	cpc	r19, r1
    51b8:	41 05       	cpc	r20, r1
    51ba:	51 05       	cpc	r21, r1
    51bc:	30 f0       	brcs	.+12     	; 0x51ca <SPI0_Speed+0x58>
    51be:	8d b5       	in	r24, 0x2d	; 45
    51c0:	8e 7f       	andi	r24, 0xFE	; 254
    51c2:	8d bd       	out	0x2d, r24	; 45
    51c4:	8c b5       	in	r24, 0x2c	; 44
    51c6:	82 60       	ori	r24, 0x02	; 2
    51c8:	1b c0       	rjmp	.+54     	; 0x5200 <SPI0_Speed+0x8e>
    51ca:	8d b5       	in	r24, 0x2d	; 45
    51cc:	20 32       	cpi	r18, 0x20	; 32
    51ce:	31 05       	cpc	r19, r1
    51d0:	41 05       	cpc	r20, r1
    51d2:	51 05       	cpc	r21, r1
    51d4:	28 f0       	brcs	.+10     	; 0x51e0 <SPI0_Speed+0x6e>
    51d6:	81 60       	ori	r24, 0x01	; 1
    51d8:	8d bd       	out	0x2d, r24	; 45
    51da:	8c b5       	in	r24, 0x2c	; 44
    51dc:	82 60       	ori	r24, 0x02	; 2
    51de:	1f c0       	rjmp	.+62     	; 0x521e <SPI0_Speed+0xac>
    51e0:	20 31       	cpi	r18, 0x10	; 16
    51e2:	31 05       	cpc	r19, r1
    51e4:	41 05       	cpc	r20, r1
    51e6:	51 05       	cpc	r21, r1
    51e8:	10 f0       	brcs	.+4      	; 0x51ee <SPI0_Speed+0x7c>
    51ea:	8e 7f       	andi	r24, 0xFE	; 254
    51ec:	06 c0       	rjmp	.+12     	; 0x51fa <SPI0_Speed+0x88>
    51ee:	28 30       	cpi	r18, 0x08	; 8
    51f0:	31 05       	cpc	r19, r1
    51f2:	41 05       	cpc	r20, r1
    51f4:	51 05       	cpc	r21, r1
    51f6:	40 f0       	brcs	.+16     	; 0x5208 <SPI0_Speed+0x96>
    51f8:	81 60       	ori	r24, 0x01	; 1
    51fa:	8d bd       	out	0x2d, r24	; 45
    51fc:	8c b5       	in	r24, 0x2c	; 44
    51fe:	8d 7f       	andi	r24, 0xFD	; 253
    5200:	8c bd       	out	0x2c, r24	; 44
    5202:	8c b5       	in	r24, 0x2c	; 44
    5204:	81 60       	ori	r24, 0x01	; 1
    5206:	0e c0       	rjmp	.+28     	; 0x5224 <SPI0_Speed+0xb2>
    5208:	24 30       	cpi	r18, 0x04	; 4
    520a:	31 05       	cpc	r19, r1
    520c:	41 05       	cpc	r20, r1
    520e:	51 05       	cpc	r21, r1
    5210:	10 f0       	brcs	.+4      	; 0x5216 <SPI0_Speed+0xa4>
    5212:	8e 7f       	andi	r24, 0xFE	; 254
    5214:	01 c0       	rjmp	.+2      	; 0x5218 <SPI0_Speed+0xa6>
    5216:	81 60       	ori	r24, 0x01	; 1
    5218:	8d bd       	out	0x2d, r24	; 45
    521a:	8c b5       	in	r24, 0x2c	; 44
    521c:	8d 7f       	andi	r24, 0xFD	; 253
    521e:	8c bd       	out	0x2c, r24	; 44
    5220:	8c b5       	in	r24, 0x2c	; 44
    5222:	8e 7f       	andi	r24, 0xFE	; 254
    5224:	8c bd       	out	0x2c, r24	; 44
    5226:	c0 92 5d 17 	sts	0x175D, r12	; 0x80175d <SPI0_Speed_value>
    522a:	d0 92 5e 17 	sts	0x175E, r13	; 0x80175e <SPI0_Speed_value+0x1>
    522e:	e0 92 5f 17 	sts	0x175F, r14	; 0x80175f <SPI0_Speed_value+0x2>
    5232:	f0 92 60 17 	sts	0x1760, r15	; 0x801760 <SPI0_Speed_value+0x3>
    5236:	ff 90       	pop	r15
    5238:	ef 90       	pop	r14
    523a:	df 90       	pop	r13
    523c:	cf 90       	pop	r12
    523e:	08 95       	ret

00005240 <SPI0_Mode>:
    5240:	cf 93       	push	r28
    5242:	df 93       	push	r29
    5244:	00 d0       	rcall	.+0      	; 0x5246 <SPI0_Mode+0x6>
    5246:	00 d0       	rcall	.+0      	; 0x5248 <SPI0_Mode+0x8>
    5248:	1f 92       	push	r1
    524a:	ec 01       	movw	r28, r24
    524c:	81 30       	cpi	r24, 0x01	; 1
    524e:	91 05       	cpc	r25, r1
    5250:	71 f0       	breq	.+28     	; 0x526e <SPI0_Mode+0x2e>
    5252:	2c f4       	brge	.+10     	; 0x525e <SPI0_Mode+0x1e>
    5254:	89 2b       	or	r24, r25
    5256:	c1 f4       	brne	.+48     	; 0x5288 <SPI0_Mode+0x48>
    5258:	8c b5       	in	r24, 0x2c	; 44
    525a:	87 7f       	andi	r24, 0xF7	; 247
    525c:	11 c0       	rjmp	.+34     	; 0x5280 <SPI0_Mode+0x40>
    525e:	82 30       	cpi	r24, 0x02	; 2
    5260:	91 05       	cpc	r25, r1
    5262:	61 f0       	breq	.+24     	; 0x527c <SPI0_Mode+0x3c>
    5264:	03 97       	sbiw	r24, 0x03	; 3
    5266:	81 f4       	brne	.+32     	; 0x5288 <SPI0_Mode+0x48>
    5268:	8c b5       	in	r24, 0x2c	; 44
    526a:	88 60       	ori	r24, 0x08	; 8
    526c:	02 c0       	rjmp	.+4      	; 0x5272 <SPI0_Mode+0x32>
    526e:	8c b5       	in	r24, 0x2c	; 44
    5270:	87 7f       	andi	r24, 0xF7	; 247
    5272:	8c bd       	out	0x2c, r24	; 44
    5274:	8c b5       	in	r24, 0x2c	; 44
    5276:	84 60       	ori	r24, 0x04	; 4
    5278:	8c bd       	out	0x2c, r24	; 44
    527a:	12 c0       	rjmp	.+36     	; 0x52a0 <SPI0_Mode+0x60>
    527c:	8c b5       	in	r24, 0x2c	; 44
    527e:	88 60       	ori	r24, 0x08	; 8
    5280:	8c bd       	out	0x2c, r24	; 44
    5282:	8c b5       	in	r24, 0x2c	; 44
    5284:	8b 7f       	andi	r24, 0xFB	; 251
    5286:	f8 cf       	rjmp	.-16     	; 0x5278 <SPI0_Mode+0x38>
    5288:	ed b7       	in	r30, 0x3d	; 61
    528a:	fe b7       	in	r31, 0x3e	; 62
    528c:	d5 83       	std	Z+5, r29	; 0x05
    528e:	c4 83       	std	Z+4, r28	; 0x04
    5290:	84 e1       	ldi	r24, 0x14	; 20
    5292:	93 e0       	ldi	r25, 0x03	; 3
    5294:	a0 e0       	ldi	r26, 0x00	; 0
    5296:	81 83       	std	Z+1, r24	; 0x01
    5298:	92 83       	std	Z+2, r25	; 0x02
    529a:	a3 83       	std	Z+3, r26	; 0x03
    529c:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    52a0:	d0 93 5c 17 	sts	0x175C, r29	; 0x80175c <SPI0_Mode_value+0x1>
    52a4:	c0 93 5b 17 	sts	0x175B, r28	; 0x80175b <SPI0_Mode_value>
    52a8:	cd b7       	in	r28, 0x3d	; 61
    52aa:	de b7       	in	r29, 0x3e	; 62
    52ac:	25 96       	adiw	r28, 0x05	; 5
    52ae:	e2 e0       	ldi	r30, 0x02	; 2
    52b0:	0c 94 35 e3 	jmp	0x1c66a	; 0x1c66a <__epilogue_restores__+0x20>

000052b4 <SPI0_TXRX_Byte>:
/// @param[in] Data: Data to send.
///
/// @return  Data received.
uint8_t SPI0_TXRX_Byte(uint8_t Data)
{
    SPDR = Data;                                  // Transmit
    52b4:	8e bd       	out	0x2e, r24	; 46

    while( !BIT_TST(SPSR,SPIF) )                  // Wait for send
    52b6:	0d b4       	in	r0, 0x2d	; 45
    52b8:	07 fe       	sbrs	r0, 7
    52ba:	fd cf       	rjmp	.-6      	; 0x52b6 <SPI0_TXRX_Byte+0x2>
        ;

    return (SPDR);                                // Received Data
    52bc:	8e b5       	in	r24, 0x2e	; 46
}
    52be:	08 95       	ret

000052c0 <SPI0_Init>:

///@brief Initialize SPI0 device.
/// See Atmel App Note AVR151
/// Set default speed, IO pins and mode.
void SPI0_Init(uint32_t speed)
{
    52c0:	cf 92       	push	r12
    52c2:	df 92       	push	r13
    52c4:	ef 92       	push	r14
    52c6:	ff 92       	push	r15
    52c8:	cf 93       	push	r28
    52ca:	df 93       	push	r29
    52cc:	1f 92       	push	r1
    52ce:	cd b7       	in	r28, 0x3d	; 61
    52d0:	de b7       	in	r29, 0x3e	; 62
    52d2:	6b 01       	movw	r12, r22
    52d4:	7c 01       	movw	r14, r24
    printf("Port B DDR:   0x%02x\n", (int) GPIO_PORT_DDR_RD(GPIO_B));
    printf("Port B LATCH: 0x%02x\n", (int) GPIO_PORT_LATCH_RD(GPIO_B));
    printf("Port B PINS:  0x%02x\n", (int) GPIO_PORT_LATCH_RD(GPIO_B));
#endif

    SPCR = 0;                                     // Clear SPCR in case we are not called after RESET
    52d6:	1c bc       	out	0x2c, r1	; 44

    GPIO_PIN_HI(SCK);                             // SCK Output
    52d8:	2f 9a       	sbi	0x05, 7	; 5
    52da:	27 9a       	sbi	0x04, 7	; 4
    GPIO_PIN_HI(MOSI);                            // MOSI Output
    52dc:	2d 9a       	sbi	0x05, 5	; 5
    52de:	25 9a       	sbi	0x04, 5	; 4
    GPIO_PIN_FLOAT(MISO);                         // MISO Input, no pull-up
    52e0:	26 98       	cbi	0x04, 6	; 4

// Warning *** MSTR MUST be set BEFORE SPE!!!! *** otherwise SS will NOT behave as an output
    GPIO_PIN_LOW(SS);                             // SS Output must be HI prevent slave mode from getting set while initializing
    52e2:	2c 98       	cbi	0x05, 4	; 5
    52e4:	24 9a       	sbi	0x04, 4	; 4
    BIT_SET(SPCR, MSTR);                          // Master Mode
    52e6:	8c b5       	in	r24, 0x2c	; 44
    52e8:	80 61       	ori	r24, 0x10	; 16
    52ea:	8c bd       	out	0x2c, r24	; 44
    BIT_SET(SPCR, SPE);                           // Enable SPI
    52ec:	8c b5       	in	r24, 0x2c	; 44
    52ee:	80 64       	ori	r24, 0x40	; 64
    52f0:	8c bd       	out	0x2c, r24	; 44

// SPI Clear any pending interrupt flags
    D = SPSR;
    52f2:	8d b5       	in	r24, 0x2d	; 45
    52f4:	89 83       	std	Y+1, r24	; 0x01
    D = SPDR;
    52f6:	8e b5       	in	r24, 0x2e	; 46
    52f8:	89 83       	std	Y+1, r24	; 0x01

/// Set SPI clock mode 0
///  SPI Mode     CPOL    CPHA            Sample
///  0    0       0       Leading (Rising)   Edge
    SPI0_Mode(0);
    52fa:	80 e0       	ldi	r24, 0x00	; 0
    52fc:	90 e0       	ldi	r25, 0x00	; 0
    52fe:	a0 df       	rcall	.-192    	; 0x5240 <SPI0_Mode>

// Set SPI clock speed
    SPI0_Speed(speed);
    5300:	c7 01       	movw	r24, r14
    5302:	b6 01       	movw	r22, r12
    5304:	36 df       	rcall	.-404    	; 0x5172 <SPI0_Speed>

    SPI0_TXRX_Byte(0xff);                         // Send dummy 0xFF
    5306:	8f ef       	ldi	r24, 0xFF	; 255
    5308:	d5 df       	rcall	.-86     	; 0x52b4 <SPI0_TXRX_Byte>
    530a:	0f 90       	pop	r0
    SPI0_Init_state = 1;

}
    530c:	df 91       	pop	r29
    530e:	cf 91       	pop	r28
    5310:	ff 90       	pop	r15
    5312:	ef 90       	pop	r14
    5314:	df 90       	pop	r13
    5316:	cf 90       	pop	r12
    5318:	08 95       	ret

0000531a <SPI0_TX>:
    531a:	0f 93       	push	r16
/// @brief HSPI write using FIFO
/// @param[in] *data: transmit buffer
/// @param[in] count: number of bytes to write
/// @return  void
void SPI0_TX(uint8_t *data, int count)
{
    531c:	1f 93       	push	r17
    531e:	cf 93       	push	r28
    5320:	df 93       	push	r29
    5322:	8c 01       	movw	r16, r24
    5324:	eb 01       	movw	r28, r22

    while(count > 0)
    5326:	1c 16       	cp	r1, r28
    5328:	1d 06       	cpc	r1, r29
    532a:	34 f4       	brge	.+12     	; 0x5338 <SPI0_TX+0x1e>
    {
        SPI0_TXRX_Byte(*data);
    532c:	f8 01       	movw	r30, r16
    532e:	81 91       	ld	r24, Z+
    5330:	8f 01       	movw	r16, r30
    5332:	c0 df       	rcall	.-128    	; 0x52b4 <SPI0_TXRX_Byte>
        ++data;
        --count;
    5334:	21 97       	sbiw	r28, 0x01	; 1
    5336:	f7 cf       	rjmp	.-18     	; 0x5326 <SPI0_TX+0xc>
    }
}
    5338:	df 91       	pop	r29
    533a:	cf 91       	pop	r28
    533c:	1f 91       	pop	r17
    533e:	0f 91       	pop	r16
    5340:	08 95       	ret

00005342 <SPI0_TXRX>:
/// @param[in] *data: transmit / receive buffer
/// @param[in] count: number of bytes to write / read
/// @return  void

void SPI0_TXRX(uint8_t *data, int count)
{
    5342:	0f 93       	push	r16
    5344:	1f 93       	push	r17
    5346:	cf 93       	push	r28
    5348:	df 93       	push	r29
    534a:	8c 01       	movw	r16, r24
    534c:	eb 01       	movw	r28, r22

    while(count > 0)
    534e:	1c 16       	cp	r1, r28
    5350:	1d 06       	cpc	r1, r29
    5352:	44 f4       	brge	.+16     	; 0x5364 <SPI0_TXRX+0x22>
    {
        *data = SPI0_TXRX_Byte(*data);
    5354:	f8 01       	movw	r30, r16
    5356:	80 81       	ld	r24, Z
    5358:	ad df       	rcall	.-166    	; 0x52b4 <SPI0_TXRX_Byte>
    535a:	f8 01       	movw	r30, r16
    535c:	81 93       	st	Z+, r24
    535e:	8f 01       	movw	r16, r30
        ++data;
        --count;
    5360:	21 97       	sbiw	r28, 0x01	; 1
    5362:	f5 cf       	rjmp	.-22     	; 0x534e <SPI0_TXRX+0xc>
    }
}
    5364:	df 91       	pop	r29
    5366:	cf 91       	pop	r28
    5368:	1f 91       	pop	r17
    536a:	0f 91       	pop	r16
    536c:	08 95       	ret

0000536e <SPI0_RX>:
/// @brief HSPI read using FIFO
/// @param[in] *data: receive buffer
/// @param[in] count: number of bytes to read
/// @return  void
void SPI0_RX(uint8_t *data, int count)
{
    536e:	0f 93       	push	r16
    5370:	1f 93       	push	r17
    5372:	cf 93       	push	r28
    5374:	df 93       	push	r29
    5376:	8c 01       	movw	r16, r24
    5378:	eb 01       	movw	r28, r22

    while(count > 0)
    537a:	1c 16       	cp	r1, r28
    537c:	1d 06       	cpc	r1, r29
    537e:	3c f4       	brge	.+14     	; 0x538e <SPI0_RX+0x20>
    {
        *data = SPI0_TXRX_Byte(0xff);
    5380:	8f ef       	ldi	r24, 0xFF	; 255
    5382:	98 df       	rcall	.-208    	; 0x52b4 <SPI0_TXRX_Byte>
    5384:	f8 01       	movw	r30, r16
    5386:	81 93       	st	Z+, r24
    5388:	8f 01       	movw	r16, r30
        ++data;
        --count;
    538a:	21 97       	sbiw	r28, 0x01	; 1
    538c:	f6 cf       	rjmp	.-20     	; 0x537a <SPI0_RX+0xc>
    }
}
    538e:	df 91       	pop	r29
    5390:	cf 91       	pop	r28
    5392:	1f 91       	pop	r17
    5394:	0f 91       	pop	r16
    5396:	08 95       	ret

00005398 <i2c_timer>:
int8_t i2c_ok()
{
	if (i2c.flags) 
		return(0);
	return(1);
}
    5398:	2f b7       	in	r18, 0x3f	; 63
    539a:	80 91 53 1a 	lds	r24, 0x1A53	; 0x801a53 <i2c+0x1>
    539e:	81 11       	cpse	r24, r1
    53a0:	04 c0       	rjmp	.+8      	; 0x53aa <i2c_timer+0x12>
    53a2:	80 91 54 1a 	lds	r24, 0x1A54	; 0x801a54 <i2c+0x2>
    53a6:	81 11       	cpse	r24, r1
    53a8:	0b c0       	rjmp	.+22     	; 0x53c0 <i2c_timer+0x28>
    53aa:	80 91 56 1a 	lds	r24, 0x1A56	; 0x801a56 <i2c+0x4>
    53ae:	90 91 57 1a 	lds	r25, 0x1A57	; 0x801a57 <i2c+0x5>
    53b2:	00 97       	sbiw	r24, 0x00	; 0
    53b4:	29 f0       	breq	.+10     	; 0x53c0 <i2c_timer+0x28>
    53b6:	01 97       	sbiw	r24, 0x01	; 1
    53b8:	90 93 57 1a 	sts	0x1A57, r25	; 0x801a57 <i2c+0x5>
    53bc:	80 93 56 1a 	sts	0x1A56, r24	; 0x801a56 <i2c+0x4>
    53c0:	2f bf       	out	0x3f, r18	; 63
    53c2:	08 95       	ret

000053c4 <i2c_check_op>:
    53c4:	ad b7       	in	r26, 0x3d	; 61
    53c6:	be b7       	in	r27, 0x3e	; 62
    53c8:	17 97       	sbiw	r26, 0x07	; 7
    53ca:	0f b6       	in	r0, 0x3f	; 63
    53cc:	f8 94       	cli
    53ce:	be bf       	out	0x3e, r27	; 62
    53d0:	0f be       	out	0x3f, r0	; 63
    53d2:	ad bf       	out	0x3d, r26	; 61
    53d4:	28 2f       	mov	r18, r24
    53d6:	08 2e       	mov	r0, r24
    53d8:	00 0c       	add	r0, r0
    53da:	33 0b       	sbc	r19, r19
    53dc:	80 31       	cpi	r24, 0x10	; 16
    53de:	88 f0       	brcs	.+34     	; 0x5402 <i2c_check_op+0x3e>
    53e0:	80 e1       	ldi	r24, 0x10	; 16
    53e2:	90 e0       	ldi	r25, 0x00	; 0
    53e4:	ed b7       	in	r30, 0x3d	; 61
    53e6:	fe b7       	in	r31, 0x3e	; 62
    53e8:	97 83       	std	Z+7, r25	; 0x07
    53ea:	86 83       	std	Z+6, r24	; 0x06
    53ec:	35 83       	std	Z+5, r19	; 0x05
    53ee:	24 83       	std	Z+4, r18	; 0x04
    53f0:	89 e2       	ldi	r24, 0x29	; 41
    53f2:	94 e0       	ldi	r25, 0x04	; 4
    53f4:	a0 e0       	ldi	r26, 0x00	; 0
    53f6:	81 83       	std	Z+1, r24	; 0x01
    53f8:	92 83       	std	Z+2, r25	; 0x02
    53fa:	a3 83       	std	Z+3, r26	; 0x03
    53fc:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    5400:	24 c0       	rjmp	.+72     	; 0x544a <i2c_check_op+0x86>
    5402:	f9 01       	movw	r30, r18
    5404:	ee 0f       	add	r30, r30
    5406:	ff 1f       	adc	r31, r31
    5408:	ee 59       	subi	r30, 0x9E	; 158
    540a:	f8 4e       	sbci	r31, 0xE8	; 232
    540c:	01 90       	ld	r0, Z+
    540e:	f0 81       	ld	r31, Z
    5410:	e0 2d       	mov	r30, r0
    5412:	30 97       	sbiw	r30, 0x00	; 0
    5414:	d1 f0       	breq	.+52     	; 0x544a <i2c_check_op+0x86>
    5416:	80 85       	ldd	r24, Z+8	; 0x08
    5418:	91 85       	ldd	r25, Z+9	; 0x09
    541a:	89 2b       	or	r24, r25
    541c:	39 f4       	brne	.+14     	; 0x542c <i2c_check_op+0x68>
    541e:	ed b7       	in	r30, 0x3d	; 61
    5420:	fe b7       	in	r31, 0x3e	; 62
    5422:	35 83       	std	Z+5, r19	; 0x05
    5424:	24 83       	std	Z+4, r18	; 0x04
    5426:	80 e1       	ldi	r24, 0x10	; 16
    5428:	94 e0       	ldi	r25, 0x04	; 4
    542a:	09 c0       	rjmp	.+18     	; 0x543e <i2c_check_op+0x7a>
    542c:	86 81       	ldd	r24, Z+6	; 0x06
    542e:	81 11       	cpse	r24, r1
    5430:	0e c0       	rjmp	.+28     	; 0x544e <i2c_check_op+0x8a>
    5432:	ed b7       	in	r30, 0x3d	; 61
    5434:	fe b7       	in	r31, 0x3e	; 62
    5436:	35 83       	std	Z+5, r19	; 0x05
    5438:	24 83       	std	Z+4, r18	; 0x04
    543a:	8a ef       	ldi	r24, 0xFA	; 250
    543c:	93 e0       	ldi	r25, 0x03	; 3
    543e:	a0 e0       	ldi	r26, 0x00	; 0
    5440:	81 83       	std	Z+1, r24	; 0x01
    5442:	92 83       	std	Z+2, r25	; 0x02
    5444:	a3 83       	std	Z+3, r26	; 0x03
    5446:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    544a:	80 e0       	ldi	r24, 0x00	; 0
    544c:	01 c0       	rjmp	.+2      	; 0x5450 <i2c_check_op+0x8c>
    544e:	81 e0       	ldi	r24, 0x01	; 1
    5450:	ad b7       	in	r26, 0x3d	; 61
    5452:	be b7       	in	r27, 0x3e	; 62
    5454:	17 96       	adiw	r26, 0x07	; 7
    5456:	0f b6       	in	r0, 0x3f	; 63
    5458:	f8 94       	cli
    545a:	be bf       	out	0x3e, r27	; 62
    545c:	0f be       	out	0x3f, r0	; 63
    545e:	ad bf       	out	0x3d, r26	; 61
    5460:	08 95       	ret

00005462 <i2c_task_init>:
    5462:	8f b7       	in	r24, 0x3f	; 63
    5464:	f8 94       	cli
    5466:	e2 e6       	ldi	r30, 0x62	; 98
    5468:	f7 e1       	ldi	r31, 0x17	; 23
    546a:	11 92       	st	Z+, r1
    546c:	11 92       	st	Z+, r1
    546e:	97 e1       	ldi	r25, 0x17	; 23
    5470:	e2 38       	cpi	r30, 0x82	; 130
    5472:	f9 07       	cpc	r31, r25
    5474:	d1 f7       	brne	.-12     	; 0x546a <i2c_task_init+0x8>
    5476:	10 92 82 17 	sts	0x1782, r1	; 0x801782 <i2c_task>
    547a:	91 e0       	ldi	r25, 0x01	; 1
    547c:	90 93 84 17 	sts	0x1784, r25	; 0x801784 <i2c_task+0x2>
    5480:	10 92 83 17 	sts	0x1783, r1	; 0x801783 <i2c_task+0x1>
    5484:	10 92 85 17 	sts	0x1785, r1	; 0x801785 <i2c_task+0x3>
    5488:	8f bf       	out	0x3f, r24	; 63
    548a:	08 95       	ret

0000548c <i2c_task_op_add>:
    548c:	ef 92       	push	r14
    548e:	ff 92       	push	r15
    5490:	0f 93       	push	r16
    5492:	1f 93       	push	r17
    5494:	cf 93       	push	r28
    5496:	df 93       	push	r29
    5498:	d8 2f       	mov	r29, r24
    549a:	c6 2f       	mov	r28, r22
    549c:	7a 01       	movw	r14, r20
    549e:	02 2f       	mov	r16, r18
    54a0:	1f b7       	in	r17, 0x3f	; 63
    54a2:	6a e0       	ldi	r22, 0x0A	; 10
    54a4:	70 e0       	ldi	r23, 0x00	; 0
    54a6:	81 e0       	ldi	r24, 0x01	; 1
    54a8:	90 e0       	ldi	r25, 0x00	; 0
    54aa:	a8 db       	rcall	.-2224   	; 0x4bfc <safecalloc>
    54ac:	fc 01       	movw	r30, r24
    54ae:	89 2b       	or	r24, r25
    54b0:	89 f0       	breq	.+34     	; 0x54d4 <i2c_task_op_add+0x48>
    54b2:	f8 94       	cli
    54b4:	11 82       	std	Z+1, r1	; 0x01
    54b6:	12 82       	std	Z+2, r1	; 0x02
    54b8:	dd 0f       	add	r29, r29
    54ba:	c1 70       	andi	r28, 0x01	; 1
    54bc:	cd 2b       	or	r28, r29
    54be:	c0 83       	st	Z, r28
    54c0:	8a e0       	ldi	r24, 0x0A	; 10
    54c2:	90 e0       	ldi	r25, 0x00	; 0
    54c4:	95 83       	std	Z+5, r25	; 0x05
    54c6:	84 83       	std	Z+4, r24	; 0x04
    54c8:	13 82       	std	Z+3, r1	; 0x03
    54ca:	06 83       	std	Z+6, r16	; 0x06
    54cc:	17 82       	std	Z+7, r1	; 0x07
    54ce:	f1 86       	std	Z+9, r15	; 0x09
    54d0:	e0 86       	std	Z+8, r14	; 0x08
    54d2:	1f bf       	out	0x3f, r17	; 63
    54d4:	cf 01       	movw	r24, r30
    54d6:	cd b7       	in	r28, 0x3d	; 61
    54d8:	de b7       	in	r29, 0x3e	; 62
    54da:	e6 e0       	ldi	r30, 0x06	; 6
    54dc:	0c 94 31 e3 	jmp	0x1c662	; 0x1c662 <__epilogue_restores__+0x18>

000054e0 <i2c_init>:
    54e0:	cf 93       	push	r28
    54e2:	00 d0       	rcall	.+0      	; 0x54e4 <i2c_init+0x4>
    54e4:	1f 92       	push	r1
    54e6:	9b 01       	movw	r18, r22
    54e8:	ac 01       	movw	r20, r24
    54ea:	cf b7       	in	r28, 0x3f	; 63
    54ec:	60 e0       	ldi	r22, 0x00	; 0
    54ee:	7d e2       	ldi	r23, 0x2D	; 45
    54f0:	81 e3       	ldi	r24, 0x31	; 49
    54f2:	91 e0       	ldi	r25, 0x01	; 1
    54f4:	0e 94 9c e2 	call	0x1c538	; 0x1c538 <__udivmodsi4>
    54f8:	da 01       	movw	r26, r20
    54fa:	c9 01       	movw	r24, r18
    54fc:	40 97       	sbiw	r24, 0x10	; 16
    54fe:	a1 09       	sbc	r26, r1
    5500:	b1 09       	sbc	r27, r1
    5502:	ac 01       	movw	r20, r24
    5504:	bd 01       	movw	r22, r26
    5506:	76 95       	lsr	r23
    5508:	67 95       	ror	r22
    550a:	57 95       	ror	r21
    550c:	47 95       	ror	r20
    550e:	ca 01       	movw	r24, r20
    5510:	88 27       	eor	r24, r24
    5512:	89 2b       	or	r24, r25
    5514:	59 f0       	breq	.+22     	; 0x552c <i2c_init+0x4c>
    5516:	8e ed       	ldi	r24, 0xDE	; 222
    5518:	93 e0       	ldi	r25, 0x03	; 3
    551a:	a0 e0       	ldi	r26, 0x00	; 0
    551c:	ed b7       	in	r30, 0x3d	; 61
    551e:	fe b7       	in	r31, 0x3e	; 62
    5520:	81 83       	std	Z+1, r24	; 0x01
    5522:	92 83       	std	Z+2, r25	; 0x02
    5524:	a3 83       	std	Z+3, r26	; 0x03
    5526:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    552a:	3a c0       	rjmp	.+116    	; 0x55a0 <i2c_init+0xc0>
    552c:	f8 94       	cli
    552e:	40 93 b8 00 	sts	0x00B8, r20	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    5532:	10 92 53 1a 	sts	0x1A53, r1	; 0x801a53 <i2c+0x1>
    5536:	81 e0       	ldi	r24, 0x01	; 1
    5538:	80 93 54 1a 	sts	0x1A54, r24	; 0x801a54 <i2c+0x2>
    553c:	10 92 82 17 	sts	0x1782, r1	; 0x801782 <i2c_task>
    5540:	80 93 84 17 	sts	0x1784, r24	; 0x801784 <i2c_task+0x2>
    5544:	40 9a       	sbi	0x08, 0	; 8
    5546:	41 9a       	sbi	0x08, 1	; 8
    5548:	84 e8       	ldi	r24, 0x84	; 132
    554a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    554e:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
    5552:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5556:	8c 7f       	andi	r24, 0xFC	; 252
    5558:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    555c:	80 91 61 17 	lds	r24, 0x1761	; 0x801761 <i2c_init_status>
    5560:	81 11       	cpse	r24, r1
    5562:	1d c0       	rjmp	.+58     	; 0x559e <i2c_init+0xbe>
    5564:	e2 e6       	ldi	r30, 0x62	; 98
    5566:	f7 e1       	ldi	r31, 0x17	; 23
    5568:	11 92       	st	Z+, r1
    556a:	11 92       	st	Z+, r1
    556c:	27 e1       	ldi	r18, 0x17	; 23
    556e:	e2 38       	cpi	r30, 0x82	; 130
    5570:	f2 07       	cpc	r31, r18
    5572:	d1 f7       	brne	.-12     	; 0x5568 <i2c_init+0x88>
    5574:	61 e0       	ldi	r22, 0x01	; 1
    5576:	70 e0       	ldi	r23, 0x00	; 0
    5578:	8c ec       	ldi	r24, 0xCC	; 204
    557a:	99 e2       	ldi	r25, 0x29	; 41
    557c:	0e 94 00 33 	call	0x6600	; 0x6600 <set_timers>
    5580:	01 96       	adiw	r24, 0x01	; 1
    5582:	51 f4       	brne	.+20     	; 0x5598 <i2c_init+0xb8>
    5584:	87 ec       	ldi	r24, 0xC7	; 199
    5586:	93 e0       	ldi	r25, 0x03	; 3
    5588:	a0 e0       	ldi	r26, 0x00	; 0
    558a:	ed b7       	in	r30, 0x3d	; 61
    558c:	fe b7       	in	r31, 0x3e	; 62
    558e:	81 83       	std	Z+1, r24	; 0x01
    5590:	92 83       	std	Z+2, r25	; 0x02
    5592:	a3 83       	std	Z+3, r26	; 0x03
    5594:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    5598:	81 e0       	ldi	r24, 0x01	; 1
    559a:	80 93 61 17 	sts	0x1761, r24	; 0x801761 <i2c_init_status>
    559e:	cf bf       	out	0x3f, r28	; 63
    55a0:	0f 90       	pop	r0
    55a2:	0f 90       	pop	r0
    55a4:	0f 90       	pop	r0
    55a6:	cf 91       	pop	r28
    55a8:	08 95       	ret

000055aa <i2c_done>:
///@brief Is i2c structure done sending/receiving ?
///
/// @return  1 DONE, 0 NOT DONE
int8_t i2c_done()
{
	delayus(1);
    55aa:	61 e0       	ldi	r22, 0x01	; 1
    55ac:	70 e0       	ldi	r23, 0x00	; 0
    55ae:	80 e0       	ldi	r24, 0x00	; 0
    55b0:	90 e0       	ldi	r25, 0x00	; 0
    55b2:	a5 db       	rcall	.-2230   	; 0x4cfe <delayus>
	if(!i2c.enable || i2c.done )
    55b4:	80 91 53 1a 	lds	r24, 0x1A53	; 0x801a53 <i2c+0x1>
    55b8:	88 23       	and	r24, r24
    55ba:	39 f0       	breq	.+14     	; 0x55ca <i2c_done+0x20>
		return(1);
    55bc:	81 e0       	ldi	r24, 0x01	; 1
    55be:	90 91 54 1a 	lds	r25, 0x1A54	; 0x801a54 <i2c+0x2>
    55c2:	91 11       	cpse	r25, r1
    55c4:	03 c0       	rjmp	.+6      	; 0x55cc <i2c_done+0x22>
    55c6:	80 e0       	ldi	r24, 0x00	; 0
    55c8:	08 95       	ret
    55ca:	81 e0       	ldi	r24, 0x01	; 1
	return(0);
}
    55cc:	08 95       	ret

000055ce <i2c_task_done>:
///@brief Are all i2c_task_op[] pointers done sending/receiving ?
///
/// @return  1 DONE, 0 NOT DONE
int8_t i2c_task_done()
{
	delayus(1);
    55ce:	61 e0       	ldi	r22, 0x01	; 1
    55d0:	70 e0       	ldi	r23, 0x00	; 0
    55d2:	80 e0       	ldi	r24, 0x00	; 0
    55d4:	90 e0       	ldi	r25, 0x00	; 0
    55d6:	93 db       	rcall	.-2266   	; 0x4cfe <delayus>
	if(!i2c_task.enable || i2c_task.done )
    55d8:	80 91 82 17 	lds	r24, 0x1782	; 0x801782 <i2c_task>
    55dc:	88 23       	and	r24, r24
    55de:	39 f0       	breq	.+14     	; 0x55ee <i2c_task_done+0x20>
		return(1);
    55e0:	81 e0       	ldi	r24, 0x01	; 1
    55e2:	90 91 84 17 	lds	r25, 0x1784	; 0x801784 <i2c_task+0x2>
    55e6:	91 11       	cpse	r25, r1
    55e8:	03 c0       	rjmp	.+6      	; 0x55f0 <i2c_task_done+0x22>
    55ea:	80 e0       	ldi	r24, 0x00	; 0
    55ec:	08 95       	ret
    55ee:	81 e0       	ldi	r24, 0x01	; 1
	return(0);
}
    55f0:	08 95       	ret

000055f2 <i2c_send_start>:
///@brief Send I2C START and enable interrupts
///
/// @return  void
void i2c_send_start()
{
	i2c.done = 0;
    55f2:	e2 e5       	ldi	r30, 0x52	; 82
    55f4:	fa e1       	ldi	r31, 0x1A	; 26
    55f6:	12 82       	std	Z+2, r1	; 0x02
	i2c.enable = 1;
    55f8:	81 e0       	ldi	r24, 0x01	; 1
    55fa:	81 83       	std	Z+1, r24	; 0x01
	i2c.timeout = I2C_TIMEOUT;		// Start timeout timer
    55fc:	8a e0       	ldi	r24, 0x0A	; 10
    55fe:	90 e0       	ldi	r25, 0x00	; 0
    5600:	95 83       	std	Z+5, r25	; 0x05
    5602:	84 83       	std	Z+4, r24	; 0x04
	// Start a transactions
	// TWI Enable
	// TWI Interrupt Enable
	// TWI Interrupt Clear
	// TWI SEND RESTART
	TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWSTA);
    5604:	85 ea       	ldi	r24, 0xA5	; 165
    5606:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    560a:	08 95       	ret

0000560c <i2c_task_run>:

/// @brief Run all valid i2c_task_op[] tasks
///
/// @return  void
void i2c_task_run()
{
    560c:	ef 92       	push	r14
    560e:	ff 92       	push	r15
    5610:	0f 93       	push	r16
    5612:	1f 93       	push	r17
    5614:	cf 93       	push	r28
    5616:	df 93       	push	r29
	uint8_t sreg = SREG;
    5618:	ff b6       	in	r15, 0x3f	; 63
	i2c_op_t *o;
    uint8_t run = 0;
	int8_t i;


	cli();
    561a:	f8 94       	cli
	i2c_task.done = 0;
    561c:	10 92 84 17 	sts	0x1784, r1	; 0x801784 <i2c_task+0x2>
	i2c_task.error = 0;
    5620:	10 92 85 17 	sts	0x1785, r1	; 0x801785 <i2c_task+0x3>
	i2c_task.ind = 0;
    5624:	10 92 83 17 	sts	0x1783, r1	; 0x801783 <i2c_task+0x1>

	// re-enable tasks
	for(i=0;i2c_check_op(i);++i)
    5628:	c0 e0       	ldi	r28, 0x00	; 0
/// @return  void
void i2c_task_run()
{
	uint8_t sreg = SREG;
	i2c_op_t *o;
    uint8_t run = 0;
    562a:	d0 e0       	ldi	r29, 0x00	; 0

	// re-enable tasks
	for(i=0;i2c_check_op(i);++i)
	{
		o = i2c_task_op[i];
		o->enable = 1;
    562c:	ee 24       	eor	r14, r14
    562e:	e3 94       	inc	r14
		o->done = 0;
		o->flags = 0;
		o->ind = 0;
		o->timeout = I2C_TIMEOUT;
    5630:	0a e0       	ldi	r16, 0x0A	; 10
    5632:	10 e0       	ldi	r17, 0x00	; 0
	i2c_task.done = 0;
	i2c_task.error = 0;
	i2c_task.ind = 0;

	// re-enable tasks
	for(i=0;i2c_check_op(i);++i)
    5634:	8c 2f       	mov	r24, r28
    5636:	c6 de       	rcall	.-628    	; 0x53c4 <i2c_check_op>
    5638:	88 23       	and	r24, r24
    563a:	d1 f0       	breq	.+52     	; 0x5670 <i2c_task_run+0x64>
	{
		o = i2c_task_op[i];
    563c:	ec 2f       	mov	r30, r28
    563e:	ee 0f       	add	r30, r30
    5640:	ff 0b       	sbc	r31, r31
    5642:	ee 59       	subi	r30, 0x9E	; 158
    5644:	f8 4e       	sbci	r31, 0xE8	; 232
    5646:	01 90       	ld	r0, Z+
    5648:	f0 81       	ld	r31, Z
    564a:	e0 2d       	mov	r30, r0
		o->enable = 1;
    564c:	e1 82       	std	Z+1, r14	; 0x01
		o->done = 0;
    564e:	12 82       	std	Z+2, r1	; 0x02
		o->flags = 0;
    5650:	13 82       	std	Z+3, r1	; 0x03
		o->ind = 0;
    5652:	17 82       	std	Z+7, r1	; 0x07
		o->timeout = I2C_TIMEOUT;
    5654:	15 83       	std	Z+5, r17	; 0x05
    5656:	04 83       	std	Z+4, r16	; 0x04
		if(!run)
    5658:	d1 11       	cpse	r29, r1
    565a:	07 c0       	rjmp	.+14     	; 0x566a <i2c_task_run+0x5e>
		{
			run = 1;
			i2c = *o;
    565c:	8a e0       	ldi	r24, 0x0A	; 10
    565e:	a2 e5       	ldi	r26, 0x52	; 82
    5660:	ba e1       	ldi	r27, 0x1A	; 26
    5662:	01 90       	ld	r0, Z+
    5664:	0d 92       	st	X+, r0
    5666:	8a 95       	dec	r24
    5668:	e1 f7       	brne	.-8      	; 0x5662 <i2c_task_run+0x56>
    566a:	cf 5f       	subi	r28, 0xFF	; 255
    566c:	d1 e0       	ldi	r29, 0x01	; 1
    566e:	e2 cf       	rjmp	.-60     	; 0x5634 <i2c_task_run+0x28>
		}
	}

	if(run)
    5670:	dd 23       	and	r29, r29
    5672:	91 f0       	breq	.+36     	; 0x5698 <i2c_task_run+0x8c>
	{
		// TASK callback
		i2c_callback = i2c_task_next_op;
    5674:	83 ea       	ldi	r24, 0xA3	; 163
    5676:	9b e2       	ldi	r25, 0x2B	; 43
    5678:	90 93 87 17 	sts	0x1787, r25	; 0x801787 <i2c_callback+0x1>
    567c:	80 93 86 17 	sts	0x1786, r24	; 0x801786 <i2c_callback>

		i2c_task.enable = 1;
    5680:	81 e0       	ldi	r24, 0x01	; 1
    5682:	80 93 82 17 	sts	0x1782, r24	; 0x801782 <i2c_task>
		i2c_task.done = 0;
    5686:	10 92 84 17 	sts	0x1784, r1	; 0x801784 <i2c_task+0x2>

        // Reset Status
        TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    568a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    568e:	8c 7f       	andi	r24, 0xFC	; 252
    5690:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
        // TWI Interrupt Clear
        // TWI SEND RESTART
        // TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWSTA);
        // Disable Slave Mode

		i2c_send_start();
    5694:	ae df       	rcall	.-164    	; 0x55f2 <i2c_send_start>
    5696:	15 c0       	rjmp	.+42     	; 0x56c2 <i2c_task_run+0xb6>
        // FIXME we should notify the user ?
		// Nothing to DO
		// User Error

		// TASK callback
		i2c_callback = NULL;
    5698:	10 92 87 17 	sts	0x1787, r1	; 0x801787 <i2c_callback+0x1>
    569c:	10 92 86 17 	sts	0x1786, r1	; 0x801786 <i2c_callback>

		// TASK Nothing to DO
		i2c_task.enable = 0;
    56a0:	10 92 82 17 	sts	0x1782, r1	; 0x801782 <i2c_task>
		i2c_task.done = 1;
    56a4:	81 e0       	ldi	r24, 0x01	; 1
    56a6:	80 93 84 17 	sts	0x1784, r24	; 0x801784 <i2c_task+0x2>

		// I2C Nothing to do
        i2c.done = 1;
    56aa:	80 93 54 1a 	sts	0x1A54, r24	; 0x801a54 <i2c+0x2>
        i2c.enable = 0;
    56ae:	10 92 53 1a 	sts	0x1A53, r1	; 0x801a53 <i2c+0x1>

        // TWI Enable
        // TWI Disable Enable
        // TWI Interrupt Clear
        TWCR = _BV(TWEN) | _BV(TWINT);
    56b2:	84 e8       	ldi	r24, 0x84	; 132
    56b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
        // Reset status
        TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    56b8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    56bc:	8c 7f       	andi	r24, 0xFC	; 252
    56be:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
        // Disable Slave Mode
        TWAR = 0;
    56c2:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
	}
	// Disable Slave Mode

	SREG = sreg;
    56c6:	ff be       	out	0x3f, r15	; 63

}
    56c8:	cd b7       	in	r28, 0x3d	; 61
    56ca:	de b7       	in	r29, 0x3e	; 62
    56cc:	e6 e0       	ldi	r30, 0x06	; 6
    56ce:	0c 94 31 e3 	jmp	0x1c662	; 0x1c662 <__epilogue_restores__+0x18>

000056d2 <i2c_fn>:
/// @param[in] *buf: pointer to buffer for send or receive
/// @param[in] len: size of buffer to read or write
/// @return  1 = OK, 0 = ERROR
uint8_t i2c_fn(uint8_t address, uint8_t mode, uint8_t *buf, uint8_t len)
{
	uint8_t sreg = SREG;
    56d2:	9f b7       	in	r25, 0x3f	; 63
	
    cli();
    56d4:	f8 94       	cli

	// sign task only
	i2c_callback = NULL;
    56d6:	10 92 87 17 	sts	0x1787, r1	; 0x801787 <i2c_callback+0x1>
    56da:	10 92 86 17 	sts	0x1786, r1	; 0x801786 <i2c_callback>

	i2c.enable = 1; // Enabled
    56de:	31 e0       	ldi	r19, 0x01	; 1
    56e0:	30 93 53 1a 	sts	0x1A53, r19	; 0x801a53 <i2c+0x1>
	i2c.done = 0;
    56e4:	10 92 54 1a 	sts	0x1A54, r1	; 0x801a54 <i2c+0x2>
    i2c.address = (address << 1) | (mode & 1);
    56e8:	88 0f       	add	r24, r24
    56ea:	61 70       	andi	r22, 0x01	; 1
    56ec:	68 2b       	or	r22, r24
    56ee:	60 93 52 1a 	sts	0x1A52, r22	; 0x801a52 <i2c>
	i2c.flags = 0;
    56f2:	10 92 55 1a 	sts	0x1A55, r1	; 0x801a55 <i2c+0x3>
    i2c.len = len;
    56f6:	20 93 58 1a 	sts	0x1A58, r18	; 0x801a58 <i2c+0x6>
    i2c.ind = 0;
    56fa:	10 92 59 1a 	sts	0x1A59, r1	; 0x801a59 <i2c+0x7>
    i2c.buf = buf;
    56fe:	50 93 5b 1a 	sts	0x1A5B, r21	; 0x801a5b <i2c+0x9>
    5702:	40 93 5a 1a 	sts	0x1A5A, r20	; 0x801a5a <i2c+0x8>

	// Reset Status
	TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    5706:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    570a:	8c 7f       	andi	r24, 0xFC	; 252
    570c:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

	// Disable Slave Mode
	TWAR = 0;
    5710:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>

	SREG = sreg;
    5714:	9f bf       	out	0x3f, r25	; 63

	i2c_send_start();
    5716:	6d df       	rcall	.-294    	; 0x55f2 <i2c_send_start>
	{
		printf("timeout: %d\r",(int)i2c.timeout);
	}
	printf("\n");
#else
	while(! i2c_done() )
    5718:	48 df       	rcall	.-368    	; 0x55aa <i2c_done>
    571a:	88 23       	and	r24, r24
    571c:	e9 f3       	breq	.-6      	; 0x5718 <i2c_fn+0x46>
    571e:	81 e0       	ldi	r24, 0x01	; 1
		;
#endif
	return( i2c.flags ? 0 : 1);
    5720:	90 91 55 1a 	lds	r25, 0x1A55	; 0x801a55 <i2c+0x3>
    5724:	91 11       	cpse	r25, r1
    5726:	80 e0       	ldi	r24, 0x00	; 0
    5728:	08 95       	ret

0000572a <i2c_send_stop>:
}
    572a:	e2 e5       	ldi	r30, 0x52	; 82
///
/// @return  void
void i2c_send_stop()
{
    // All transactions are done
    i2c.done = 1;
    572c:	fa e1       	ldi	r31, 0x1A	; 26
    572e:	81 e0       	ldi	r24, 0x01	; 1
    5730:	82 83       	std	Z+2, r24	; 0x02
    i2c.enable = 0;
    5732:	11 82       	std	Z+1, r1	; 0x01
    // We are DONE
    // TWI Enable
    // TWI Interrupt Disable
    // TWI Interrupt Clear
    // TWI SEND STOP
    TWCR = _BV(TWEN) | _BV(TWINT) | _BV(TWSTO);
    5734:	84 e9       	ldi	r24, 0x94	; 148
    5736:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	delayus(10);
    573a:	6a e0       	ldi	r22, 0x0A	; 10
    573c:	70 e0       	ldi	r23, 0x00	; 0
    573e:	80 e0       	ldi	r24, 0x00	; 0
    5740:	90 e0       	ldi	r25, 0x00	; 0
    5742:	dd ca       	rjmp	.-2630   	; 0x4cfe <delayus>
    5744:	08 95       	ret

00005746 <i2c_task_next_op>:

///@brief I2C task ISR callback function
///
/// @return  void
int8_t i2c_task_next_op()
{
    5746:	cf 93       	push	r28
    5748:	df 93       	push	r29
	i2c_op_t *o;

	// NOTE: we are in an ISR do not disable other interrupts

	if(i2c_task.enable)
    574a:	80 91 82 17 	lds	r24, 0x1782	; 0x801782 <i2c_task>
    574e:	88 23       	and	r24, r24
    5750:	09 f4       	brne	.+2      	; 0x5754 <i2c_task_next_op+0xe>
    5752:	46 c0       	rjmp	.+140    	; 0x57e0 <i2c_task_next_op+0x9a>
	{
		// Save state of LAST operation
		if(i2c_check_op(i2c_task.ind) )
    5754:	80 91 83 17 	lds	r24, 0x1783	; 0x801783 <i2c_task+0x1>
    5758:	35 de       	rcall	.-918    	; 0x53c4 <i2c_check_op>
    575a:	88 23       	and	r24, r24
    575c:	b1 f0       	breq	.+44     	; 0x578a <i2c_task_next_op+0x44>
		{
			o = i2c_task_op[i2c_task.ind];
    575e:	e0 91 83 17 	lds	r30, 0x1783	; 0x801783 <i2c_task+0x1>
    5762:	ee 0f       	add	r30, r30
    5764:	ff 0b       	sbc	r31, r31
    5766:	ee 59       	subi	r30, 0x9E	; 158
    5768:	f8 4e       	sbci	r31, 0xE8	; 232
    576a:	c0 81       	ld	r28, Z
    576c:	d1 81       	ldd	r29, Z+1	; 0x01
			// Save state in last opperation
			*o = i2c;
    576e:	8a e0       	ldi	r24, 0x0A	; 10
    5770:	e2 e5       	ldi	r30, 0x52	; 82
    5772:	fa e1       	ldi	r31, 0x1A	; 26
    5774:	de 01       	movw	r26, r28
    5776:	01 90       	ld	r0, Z+
    5778:	0d 92       	st	X+, r0
    577a:	8a 95       	dec	r24
    577c:	e1 f7       	brne	.-8      	; 0x5776 <i2c_task_next_op+0x30>
			if(o->flags)
    577e:	8b 81       	ldd	r24, Y+3	; 0x03
    5780:	88 23       	and	r24, r24
    5782:	19 f0       	breq	.+6      	; 0x578a <i2c_task_next_op+0x44>
				i2c_task.error = 1;
    5784:	81 e0       	ldi	r24, 0x01	; 1
    5786:	80 93 85 17 	sts	0x1785, r24	; 0x801785 <i2c_task+0x3>
		}

		if(i2c_check_op(i2c_task.ind+1) )
    578a:	80 91 83 17 	lds	r24, 0x1783	; 0x801783 <i2c_task+0x1>
    578e:	8f 5f       	subi	r24, 0xFF	; 255
    5790:	19 de       	rcall	.-974    	; 0x53c4 <i2c_check_op>
    5792:	88 23       	and	r24, r24
    5794:	29 f1       	breq	.+74     	; 0x57e0 <i2c_task_next_op+0x9a>
		{
			i2c_task.ind++;
    5796:	e0 91 83 17 	lds	r30, 0x1783	; 0x801783 <i2c_task+0x1>
    579a:	ef 5f       	subi	r30, 0xFF	; 255
    579c:	e0 93 83 17 	sts	0x1783, r30	; 0x801783 <i2c_task+0x1>

			o = i2c_task_op[i2c_task.ind];
    57a0:	ee 0f       	add	r30, r30
    57a2:	ff 0b       	sbc	r31, r31
    57a4:	ee 59       	subi	r30, 0x9E	; 158
    57a6:	f8 4e       	sbci	r31, 0xE8	; 232
    57a8:	01 90       	ld	r0, Z+
    57aa:	f0 81       	ld	r31, Z
    57ac:	e0 2d       	mov	r30, r0

			if( o->enable == 1 || o->done == 0)
    57ae:	81 81       	ldd	r24, Z+1	; 0x01
    57b0:	81 30       	cpi	r24, 0x01	; 1
    57b2:	19 f0       	breq	.+6      	; 0x57ba <i2c_task_next_op+0x74>
    57b4:	82 81       	ldd	r24, Z+2	; 0x02
    57b6:	81 11       	cpse	r24, r1
    57b8:	13 c0       	rjmp	.+38     	; 0x57e0 <i2c_task_next_op+0x9a>
			{
				o->timeout = I2C_TIMEOUT;
    57ba:	8a e0       	ldi	r24, 0x0A	; 10
    57bc:	90 e0       	ldi	r25, 0x00	; 0
    57be:	95 83       	std	Z+5, r25	; 0x05
    57c0:	84 83       	std	Z+4, r24	; 0x04
				o->flags = 0;
    57c2:	13 82       	std	Z+3, r1	; 0x03
				o->ind = 0;
    57c4:	17 82       	std	Z+7, r1	; 0x07
				o->enable = 1;
    57c6:	81 e0       	ldi	r24, 0x01	; 1
    57c8:	81 83       	std	Z+1, r24	; 0x01
				o->done = 0;
    57ca:	12 82       	std	Z+2, r1	; 0x02

				i2c = *o;
    57cc:	8a e0       	ldi	r24, 0x0A	; 10
    57ce:	a2 e5       	ldi	r26, 0x52	; 82
    57d0:	ba e1       	ldi	r27, 0x1A	; 26
    57d2:	01 90       	ld	r0, Z+
    57d4:	0d 92       	st	X+, r0
    57d6:	8a 95       	dec	r24

				i2c_send_start();
    57d8:	e1 f7       	brne	.-8      	; 0x57d2 <i2c_task_next_op+0x8c>
    57da:	0b df       	rcall	.-490    	; 0x55f2 <i2c_send_start>

				return(1);
    57dc:	81 e0       	ldi	r24, 0x01	; 1
    57de:	0f c0       	rjmp	.+30     	; 0x57fe <i2c_task_next_op+0xb8>
			}
		}
	}
	// program error
	// Disable TASK
	i2c_task.enable = 0;
    57e0:	10 92 82 17 	sts	0x1782, r1	; 0x801782 <i2c_task>
	i2c_task.done = 1;
    57e4:	81 e0       	ldi	r24, 0x01	; 1
    57e6:	80 93 84 17 	sts	0x1784, r24	; 0x801784 <i2c_task+0x2>

	// I2C disable
	i2c.done = 1;
    57ea:	80 93 54 1a 	sts	0x1A54, r24	; 0x801a54 <i2c+0x2>
	i2c.enable = 0;
    57ee:	10 92 53 1a 	sts	0x1A53, r1	; 0x801a53 <i2c+0x1>
	i2c.flags = 0;
    57f2:	10 92 55 1a 	sts	0x1A55, r1	; 0x801a55 <i2c+0x3>
	i2c.ind = 0;
    57f6:	10 92 59 1a 	sts	0x1A59, r1	; 0x801a59 <i2c+0x7>

	i2c_send_stop();
    57fa:	97 df       	rcall	.-210    	; 0x572a <i2c_send_stop>

	return(0);
    57fc:	80 e0       	ldi	r24, 0x00	; 0
}
    57fe:	df 91       	pop	r29
    5800:	cf 91       	pop	r28
    5802:	08 95       	ret

00005804 <i2c_next>:
{

	// IF we have an i2c_callback() function then
	// it must save status and reset i2c structure for next operation

	if(i2c_callback)
    5804:	e0 91 86 17 	lds	r30, 0x1786	; 0x801786 <i2c_callback>
    5808:	f0 91 87 17 	lds	r31, 0x1787	; 0x801787 <i2c_callback+0x1>
    580c:	30 97       	sbiw	r30, 0x00	; 0
    580e:	11 f0       	breq	.+4      	; 0x5814 <i2c_next+0x10>
	    i2c_callback();
    5810:	09 95       	icall
    5812:	08 95       	ret
	else
		i2c_send_stop();
    5814:	8a cf       	rjmp	.-236    	; 0x572a <i2c_send_stop>
    5816:	08 95       	ret

00005818 <__vector_26>:

///@brief I2C ISR for send/receive
///
/// @return  void
ISR(TWI_vect)
{
    5818:	1f 92       	push	r1
    581a:	0f 92       	push	r0
    581c:	0f b6       	in	r0, 0x3f	; 63
    581e:	0f 92       	push	r0
    5820:	11 24       	eor	r1, r1
    5822:	0b b6       	in	r0, 0x3b	; 59
    5824:	0f 92       	push	r0
    5826:	2f 93       	push	r18
    5828:	3f 93       	push	r19
    582a:	4f 93       	push	r20
    582c:	5f 93       	push	r21
    582e:	6f 93       	push	r22
    5830:	7f 93       	push	r23
    5832:	8f 93       	push	r24
    5834:	9f 93       	push	r25
    5836:	af 93       	push	r26
    5838:	bf 93       	push	r27
    583a:	ef 93       	push	r30
    583c:	ff 93       	push	r31
	// FYI: reading TWSR clears the status
	// twi.h defines TW_STATUS
    // #define TW_STATUS (TWSR & TW_STATUS_MASK)
    uint8_t status = TW_STATUS;	
    583e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

	// Are we Enabled to Receive/Send ?
	// Are we Done ?
	// Program errors - these should not happen
	if(!i2c.enable || i2c.done || !i2c.buf || !i2c.len )
    5842:	90 91 53 1a 	lds	r25, 0x1A53	; 0x801a53 <i2c+0x1>
    5846:	99 23       	and	r25, r25
    5848:	09 f1       	breq	.+66     	; 0x588c <__vector_26+0x74>
    584a:	90 91 54 1a 	lds	r25, 0x1A54	; 0x801a54 <i2c+0x2>
    584e:	91 11       	cpse	r25, r1
    5850:	1d c0       	rjmp	.+58     	; 0x588c <__vector_26+0x74>
    5852:	20 91 5a 1a 	lds	r18, 0x1A5A	; 0x801a5a <i2c+0x8>
    5856:	30 91 5b 1a 	lds	r19, 0x1A5B	; 0x801a5b <i2c+0x9>
    585a:	21 15       	cp	r18, r1
    585c:	31 05       	cpc	r19, r1
    585e:	b1 f0       	breq	.+44     	; 0x588c <__vector_26+0x74>
    5860:	90 91 58 1a 	lds	r25, 0x1A58	; 0x801a58 <i2c+0x6>
    5864:	99 23       	and	r25, r25
    5866:	91 f0       	breq	.+36     	; 0x588c <__vector_26+0x74>
		i2c_send_stop();
		return;
	}

	// TUMEOUT ? STOP everything
	if(i2c.timeout == 0)
    5868:	40 91 56 1a 	lds	r20, 0x1A56	; 0x801a56 <i2c+0x4>
    586c:	50 91 57 1a 	lds	r21, 0x1A57	; 0x801a57 <i2c+0x5>
    5870:	45 2b       	or	r20, r21
    5872:	71 f4       	brne	.+28     	; 0x5890 <__vector_26+0x78>
	{
		i2c.flags |= (I2C_OP_TIMEOUT);
    5874:	80 91 55 1a 	lds	r24, 0x1A55	; 0x801a55 <i2c+0x3>
    5878:	81 60       	ori	r24, 0x01	; 1
    587a:	80 93 55 1a 	sts	0x1A55, r24	; 0x801a55 <i2c+0x3>
		i2c_task.enable = 0;
    587e:	10 92 82 17 	sts	0x1782, r1	; 0x801782 <i2c_task>
		i2c_task.done = 1;
    5882:	81 e0       	ldi	r24, 0x01	; 1
    5884:	80 93 84 17 	sts	0x1784, r24	; 0x801784 <i2c_task+0x2>
		i2c_task.error = 1;
    5888:	80 93 85 17 	sts	0x1785, r24	; 0x801785 <i2c_task+0x3>
		i2c_send_stop();
    588c:	4e df       	rcall	.-356    	; 0x572a <i2c_send_stop>
		return;
    588e:	9b c0       	rjmp	.+310    	; 0x59c6 <__vector_26+0x1ae>
	}

	// Master Receiver mode
	switch (status)
    5890:	88 7f       	andi	r24, 0xF8	; 248
    5892:	80 33       	cpi	r24, 0x30	; 48
    5894:	09 f4       	brne	.+2      	; 0x5898 <__vector_26+0x80>
    5896:	83 c0       	rjmp	.+262    	; 0x599e <__vector_26+0x186>
    5898:	70 f4       	brcc	.+28     	; 0x58b6 <__vector_26+0x9e>
    589a:	88 31       	cpi	r24, 0x18	; 24
    589c:	09 f1       	breq	.+66     	; 0x58e0 <__vector_26+0xc8>
    589e:	28 f4       	brcc	.+10     	; 0x58aa <__vector_26+0x92>
    58a0:	88 30       	cpi	r24, 0x08	; 8
    58a2:	c9 f0       	breq	.+50     	; 0x58d6 <__vector_26+0xbe>
    58a4:	80 31       	cpi	r24, 0x10	; 16
    58a6:	b9 f0       	breq	.+46     	; 0x58d6 <__vector_26+0xbe>
    58a8:	83 c0       	rjmp	.+262    	; 0x59b0 <__vector_26+0x198>
    58aa:	80 32       	cpi	r24, 0x20	; 32
    58ac:	09 f4       	brne	.+2      	; 0x58b0 <__vector_26+0x98>
    58ae:	65 c0       	rjmp	.+202    	; 0x597a <__vector_26+0x162>
    58b0:	88 32       	cpi	r24, 0x28	; 40
    58b2:	b1 f0       	breq	.+44     	; 0x58e0 <__vector_26+0xc8>
    58b4:	7d c0       	rjmp	.+250    	; 0x59b0 <__vector_26+0x198>
    58b6:	88 34       	cpi	r24, 0x48	; 72
    58b8:	09 f4       	brne	.+2      	; 0x58bc <__vector_26+0xa4>
    58ba:	68 c0       	rjmp	.+208    	; 0x598c <__vector_26+0x174>
    58bc:	38 f4       	brcc	.+14     	; 0x58cc <__vector_26+0xb4>
    58be:	88 33       	cpi	r24, 0x38	; 56
    58c0:	09 f4       	brne	.+2      	; 0x58c4 <__vector_26+0xac>
    58c2:	57 c0       	rjmp	.+174    	; 0x5972 <__vector_26+0x15a>
    58c4:	80 34       	cpi	r24, 0x40	; 64
    58c6:	09 f4       	brne	.+2      	; 0x58ca <__vector_26+0xb2>
    58c8:	42 c0       	rjmp	.+132    	; 0x594e <__vector_26+0x136>
    58ca:	72 c0       	rjmp	.+228    	; 0x59b0 <__vector_26+0x198>
    58cc:	80 35       	cpi	r24, 0x50	; 80
    58ce:	79 f1       	breq	.+94     	; 0x592e <__vector_26+0x116>
    58d0:	88 35       	cpi	r24, 0x58	; 88
    58d2:	b9 f0       	breq	.+46     	; 0x5902 <__vector_26+0xea>
    58d4:	6d c0       	rjmp	.+218    	; 0x59b0 <__vector_26+0x198>
	{
		case TW_START:		// START has been transmitted
		case TW_REP_START:  // RE-START has been transmitted
			i2c.ind = 0;
    58d6:	10 92 59 1a 	sts	0x1A59, r1	; 0x801a59 <i2c+0x7>
			TWDR = i2c.address;
    58da:	80 91 52 1a 	lds	r24, 0x1A52	; 0x801a52 <i2c>
    58de:	0e c0       	rjmp	.+28     	; 0x58fc <__vector_26+0xe4>
			break;


		case TW_MT_SLA_ACK:	// SLA+W trasnmitted and ACK received
		case TW_MT_DATA_ACK:// Data trasnmitted and ACK received
			if (i2c.ind < i2c.len)
    58e0:	80 91 59 1a 	lds	r24, 0x1A59	; 0x801a59 <i2c+0x7>
    58e4:	89 17       	cp	r24, r25
    58e6:	ec f4       	brge	.+58     	; 0x5922 <__vector_26+0x10a>
			{
				TWDR = i2c.buf[i2c.ind++];
    58e8:	91 e0       	ldi	r25, 0x01	; 1
    58ea:	98 0f       	add	r25, r24
    58ec:	90 93 59 1a 	sts	0x1A59, r25	; 0x801a59 <i2c+0x7>
    58f0:	f9 01       	movw	r30, r18
    58f2:	e8 0f       	add	r30, r24
    58f4:	f1 1d       	adc	r31, r1
    58f6:	87 fd       	sbrc	r24, 7
    58f8:	fa 95       	dec	r31
    58fa:	80 81       	ld	r24, Z
    58fc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5900:	36 c0       	rjmp	.+108    	; 0x596e <__vector_26+0x156>
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
			}
			break;

		case TW_MR_DATA_NACK:	// Data received NACK transmitted
			if(i2c.ind < i2c.len)
    5902:	80 91 59 1a 	lds	r24, 0x1A59	; 0x801a59 <i2c+0x7>
    5906:	89 17       	cp	r24, r25
    5908:	64 f4       	brge	.+24     	; 0x5922 <__vector_26+0x10a>
				i2c.buf[i2c.ind++] = TWDR;
    590a:	91 e0       	ldi	r25, 0x01	; 1
    590c:	98 0f       	add	r25, r24
    590e:	90 93 59 1a 	sts	0x1A59, r25	; 0x801a59 <i2c+0x7>
    5912:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5916:	f9 01       	movw	r30, r18
    5918:	e8 0f       	add	r30, r24
    591a:	f1 1d       	adc	r31, r1
    591c:	87 fd       	sbrc	r24, 7
    591e:	fa 95       	dec	r31
    5920:	90 83       	st	Z, r25
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
			}
			else
			{
				// Done
				i2c.done = 1;
    5922:	81 e0       	ldi	r24, 0x01	; 1
    5924:	80 93 54 1a 	sts	0x1A54, r24	; 0x801a54 <i2c+0x2>
				i2c.enable = 0;
    5928:	10 92 53 1a 	sts	0x1A53, r1	; 0x801a53 <i2c+0x1>
    592c:	4b c0       	rjmp	.+150    	; 0x59c4 <__vector_26+0x1ac>
				i2c_next();
			}
			break;

		case TW_MR_DATA_ACK:	// Data received ACK transmitted
			if(i2c.ind < i2c.len)
    592e:	80 91 59 1a 	lds	r24, 0x1A59	; 0x801a59 <i2c+0x7>
    5932:	89 17       	cp	r24, r25
    5934:	64 f4       	brge	.+24     	; 0x594e <__vector_26+0x136>
				i2c.buf[i2c.ind++] = TWDR;
    5936:	91 e0       	ldi	r25, 0x01	; 1
    5938:	98 0f       	add	r25, r24
    593a:	90 93 59 1a 	sts	0x1A59, r25	; 0x801a59 <i2c+0x7>
    593e:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5942:	f9 01       	movw	r30, r18
    5944:	e8 0f       	add	r30, r24
    5946:	f1 1d       	adc	r31, r1
    5948:	87 fd       	sbrc	r24, 7
    594a:	fa 95       	dec	r31
    594c:	90 83       	st	Z, r25
		case TW_MR_SLA_ACK:		// SLA+R transmitted ACK received
			if ((i2c.ind+1) < i2c.len)
    594e:	80 91 59 1a 	lds	r24, 0x1A59	; 0x801a59 <i2c+0x7>
    5952:	08 2e       	mov	r0, r24
    5954:	00 0c       	add	r0, r0
    5956:	99 0b       	sbc	r25, r25
    5958:	01 96       	adiw	r24, 0x01	; 1
    595a:	20 91 58 1a 	lds	r18, 0x1A58	; 0x801a58 <i2c+0x6>
    595e:	02 2e       	mov	r0, r18
    5960:	00 0c       	add	r0, r0
    5962:	33 0b       	sbc	r19, r19
    5964:	82 17       	cp	r24, r18
    5966:	93 07       	cpc	r25, r19
    5968:	14 f4       	brge	.+4      	; 0x596e <__vector_26+0x156>
			{
				// TWI Enable
				// TWI Interrupt Enable
				// TWI Interrupt Clear
				// SEND ACK after receive
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    596a:	85 ec       	ldi	r24, 0xC5	; 197
    596c:	03 c0       	rjmp	.+6      	; 0x5974 <__vector_26+0x15c>
				// LAST BYTE
				// TWI Enable
				// TWI Interrupt Enable
				// TWI Interrupt Clear
				// SEND NACK after receive
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    596e:	85 e8       	ldi	r24, 0x85	; 133
    5970:	01 c0       	rjmp	.+2      	; 0x5974 <__vector_26+0x15c>
		case TW_ARB_LOST:
			// TWI Enable
			// TWI Interrupt Enable
			// TWI Interrupt Clear
			// TWI SEND RESTART
			TWCR = _BV(TWEN) |  _BV(TWIE) | _BV(TWINT) | _BV(TWSTA);
    5972:	85 ea       	ldi	r24, 0xA5	; 165
    5974:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			break;
    5978:	26 c0       	rjmp	.+76     	; 0x59c6 <__vector_26+0x1ae>

// Error cases
		case TW_MT_SLA_NACK:	// SLA+W transmitted NACK received
			i2c.done = 1;
    597a:	81 e0       	ldi	r24, 0x01	; 1
    597c:	80 93 54 1a 	sts	0x1A54, r24	; 0x801a54 <i2c+0x2>
			i2c.enable = 0;
    5980:	10 92 53 1a 	sts	0x1A53, r1	; 0x801a53 <i2c+0x1>
			i2c.flags |= I2C_TW_MT_SLA_NACK;
    5984:	80 91 55 1a 	lds	r24, 0x1A55	; 0x801a55 <i2c+0x3>
    5988:	88 60       	ori	r24, 0x08	; 8
    598a:	1a c0       	rjmp	.+52     	; 0x59c0 <__vector_26+0x1a8>
			// ERROR
			i2c_next();
			break;

		case TW_MR_SLA_NACK:	// SLA+R transmitted NACK received
			i2c.done = 1;
    598c:	81 e0       	ldi	r24, 0x01	; 1
    598e:	80 93 54 1a 	sts	0x1A54, r24	; 0x801a54 <i2c+0x2>
			i2c.enable = 0;
    5992:	10 92 53 1a 	sts	0x1A53, r1	; 0x801a53 <i2c+0x1>
			i2c.flags |= I2C_TW_MR_SLA_NACK;
    5996:	80 91 55 1a 	lds	r24, 0x1A55	; 0x801a55 <i2c+0x3>
    599a:	80 61       	ori	r24, 0x10	; 16
    599c:	11 c0       	rjmp	.+34     	; 0x59c0 <__vector_26+0x1a8>
			// ERROR
			i2c_next();
			break;

		case TW_MT_DATA_NACK:	// Data Transmitted NACK received
			i2c.done = 1;
    599e:	81 e0       	ldi	r24, 0x01	; 1
    59a0:	80 93 54 1a 	sts	0x1A54, r24	; 0x801a54 <i2c+0x2>
			i2c.enable = 0;
    59a4:	10 92 53 1a 	sts	0x1A53, r1	; 0x801a53 <i2c+0x1>
			i2c.flags |= I2C_TW_MT_DATA_NACK;
    59a8:	80 91 55 1a 	lds	r24, 0x1A55	; 0x801a55 <i2c+0x3>
    59ac:	80 62       	ori	r24, 0x20	; 32
    59ae:	08 c0       	rjmp	.+16     	; 0x59c0 <__vector_26+0x1a8>
			// ERROR
			i2c_next();
			break;

		default:				// Error
			i2c.done = 1;
    59b0:	81 e0       	ldi	r24, 0x01	; 1
    59b2:	80 93 54 1a 	sts	0x1A54, r24	; 0x801a54 <i2c+0x2>
			i2c.enable = 0;
    59b6:	10 92 53 1a 	sts	0x1A53, r1	; 0x801a53 <i2c+0x1>
			// ERROR
			i2c.flags |= I2C_BUS_ERROR;
    59ba:	80 91 55 1a 	lds	r24, 0x1A55	; 0x801a55 <i2c+0x3>
    59be:	80 64       	ori	r24, 0x40	; 64
    59c0:	80 93 55 1a 	sts	0x1A55, r24	; 0x801a55 <i2c+0x3>
			i2c_next();
    59c4:	1f df       	rcall	.-450    	; 0x5804 <i2c_next>
			break;
	}
}
    59c6:	ff 91       	pop	r31
    59c8:	ef 91       	pop	r30
    59ca:	bf 91       	pop	r27
    59cc:	af 91       	pop	r26
    59ce:	9f 91       	pop	r25
    59d0:	8f 91       	pop	r24
    59d2:	7f 91       	pop	r23
    59d4:	6f 91       	pop	r22
    59d6:	5f 91       	pop	r21
    59d8:	4f 91       	pop	r20
    59da:	3f 91       	pop	r19
    59dc:	2f 91       	pop	r18
    59de:	0f 90       	pop	r0
    59e0:	0b be       	out	0x3b, r0	; 59
    59e2:	0f 90       	pop	r0
    59e4:	0f be       	out	0x3f, r0	; 63
    59e6:	0f 90       	pop	r0
    59e8:	1f 90       	pop	r1
    59ea:	18 95       	reti

000059ec <i2c_print_error>:
/// @brief Display Errors for i2c_task_op[index]
///
/// @param[in] index: index of i2c_task_op[] array
/// @return  void
void i2c_print_error(i2c_op_t *o)
{
    59ec:	cf 93       	push	r28
    59ee:	00 d0       	rcall	.+0      	; 0x59f0 <i2c_print_error+0x4>
    59f0:	00 d0       	rcall	.+0      	; 0x59f2 <i2c_print_error+0x6>
    59f2:	1f 92       	push	r1
    int flags = o->flags;
    59f4:	fc 01       	movw	r30, r24
    59f6:	c3 81       	ldd	r28, Z+3	; 0x03

	if(flags)
    59f8:	cc 23       	and	r28, r28
    59fa:	09 f4       	brne	.+2      	; 0x59fe <i2c_print_error+0x12>
    59fc:	67 c0       	rjmp	.+206    	; 0x5acc <i2c_print_error+0xe0>
	{
		printf("  %s\n", (i2c.done ? "DONE" : "ACTIVE") );
    59fe:	80 91 54 1a 	lds	r24, 0x1A54	; 0x801a54 <i2c+0x2>
    5a02:	81 11       	cpse	r24, r1
    5a04:	03 c0       	rjmp	.+6      	; 0x5a0c <i2c_print_error+0x20>
    5a06:	88 e2       	ldi	r24, 0x28	; 40
    5a08:	93 e0       	ldi	r25, 0x03	; 3
    5a0a:	02 c0       	rjmp	.+4      	; 0x5a10 <i2c_print_error+0x24>
    5a0c:	83 e2       	ldi	r24, 0x23	; 35
    5a0e:	93 e0       	ldi	r25, 0x03	; 3
    5a10:	ed b7       	in	r30, 0x3d	; 61
    5a12:	fe b7       	in	r31, 0x3e	; 62
    5a14:	95 83       	std	Z+5, r25	; 0x05
    5a16:	84 83       	std	Z+4, r24	; 0x04
    5a18:	81 ec       	ldi	r24, 0xC1	; 193
    5a1a:	93 e0       	ldi	r25, 0x03	; 3
    5a1c:	a0 e0       	ldi	r26, 0x00	; 0
    5a1e:	81 83       	std	Z+1, r24	; 0x01
    5a20:	92 83       	std	Z+2, r25	; 0x02
    5a22:	a3 83       	std	Z+3, r26	; 0x03
    5a24:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
		if(flags & I2C_OP_TIMEOUT)
    5a28:	c0 ff       	sbrs	r28, 0
    5a2a:	0a c0       	rjmp	.+20     	; 0x5a40 <i2c_print_error+0x54>
			printf("  OP_TIMEOUT\n");
    5a2c:	83 eb       	ldi	r24, 0xB3	; 179
    5a2e:	93 e0       	ldi	r25, 0x03	; 3
    5a30:	a0 e0       	ldi	r26, 0x00	; 0
    5a32:	ed b7       	in	r30, 0x3d	; 61
    5a34:	fe b7       	in	r31, 0x3e	; 62
    5a36:	81 83       	std	Z+1, r24	; 0x01
    5a38:	92 83       	std	Z+2, r25	; 0x02
    5a3a:	a3 83       	std	Z+3, r26	; 0x03
    5a3c:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
		if(flags & I2C_OP_LEN)
    5a40:	c1 ff       	sbrs	r28, 1
    5a42:	0a c0       	rjmp	.+20     	; 0x5a58 <i2c_print_error+0x6c>
			printf("  OP_LEN\n");
    5a44:	89 ea       	ldi	r24, 0xA9	; 169
    5a46:	93 e0       	ldi	r25, 0x03	; 3
    5a48:	a0 e0       	ldi	r26, 0x00	; 0
    5a4a:	ed b7       	in	r30, 0x3d	; 61
    5a4c:	fe b7       	in	r31, 0x3e	; 62
    5a4e:	81 83       	std	Z+1, r24	; 0x01
    5a50:	92 83       	std	Z+2, r25	; 0x02
    5a52:	a3 83       	std	Z+3, r26	; 0x03
    5a54:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
		if(flags & I2C_OP_ERROR)
    5a58:	c2 ff       	sbrs	r28, 2
    5a5a:	0a c0       	rjmp	.+20     	; 0x5a70 <i2c_print_error+0x84>
			printf("  OP_ERROR\n");
    5a5c:	8d e9       	ldi	r24, 0x9D	; 157
    5a5e:	93 e0       	ldi	r25, 0x03	; 3
    5a60:	a0 e0       	ldi	r26, 0x00	; 0
    5a62:	ed b7       	in	r30, 0x3d	; 61
    5a64:	fe b7       	in	r31, 0x3e	; 62
    5a66:	81 83       	std	Z+1, r24	; 0x01
    5a68:	92 83       	std	Z+2, r25	; 0x02
    5a6a:	a3 83       	std	Z+3, r26	; 0x03
    5a6c:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
		if(flags & I2C_TW_MR_SLA_NACK)
    5a70:	c4 ff       	sbrs	r28, 4
    5a72:	0a c0       	rjmp	.+20     	; 0x5a88 <i2c_print_error+0x9c>
			printf("  TW_MR_SLA_NACK\n");
    5a74:	8b e8       	ldi	r24, 0x8B	; 139
    5a76:	93 e0       	ldi	r25, 0x03	; 3
    5a78:	a0 e0       	ldi	r26, 0x00	; 0
    5a7a:	ed b7       	in	r30, 0x3d	; 61
    5a7c:	fe b7       	in	r31, 0x3e	; 62
    5a7e:	81 83       	std	Z+1, r24	; 0x01
    5a80:	92 83       	std	Z+2, r25	; 0x02
    5a82:	a3 83       	std	Z+3, r26	; 0x03
    5a84:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
		if(flags & I2C_TW_MT_SLA_NACK)
    5a88:	c3 ff       	sbrs	r28, 3
    5a8a:	0a c0       	rjmp	.+20     	; 0x5aa0 <i2c_print_error+0xb4>
			printf("  TW_MT_SLA_NACK\n");
    5a8c:	89 e7       	ldi	r24, 0x79	; 121
    5a8e:	93 e0       	ldi	r25, 0x03	; 3
    5a90:	a0 e0       	ldi	r26, 0x00	; 0
    5a92:	ed b7       	in	r30, 0x3d	; 61
    5a94:	fe b7       	in	r31, 0x3e	; 62
    5a96:	81 83       	std	Z+1, r24	; 0x01
    5a98:	92 83       	std	Z+2, r25	; 0x02
    5a9a:	a3 83       	std	Z+3, r26	; 0x03
    5a9c:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
		if(flags & I2C_TW_MT_DATA_NACK)
    5aa0:	c5 ff       	sbrs	r28, 5
    5aa2:	0a c0       	rjmp	.+20     	; 0x5ab8 <i2c_print_error+0xcc>
			printf("  TW_MT_DATA_NACK\n");
    5aa4:	86 e6       	ldi	r24, 0x66	; 102
    5aa6:	93 e0       	ldi	r25, 0x03	; 3
    5aa8:	a0 e0       	ldi	r26, 0x00	; 0
    5aaa:	ed b7       	in	r30, 0x3d	; 61
    5aac:	fe b7       	in	r31, 0x3e	; 62
    5aae:	81 83       	std	Z+1, r24	; 0x01
    5ab0:	92 83       	std	Z+2, r25	; 0x02
    5ab2:	a3 83       	std	Z+3, r26	; 0x03
    5ab4:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
		printf("\n");
    5ab8:	84 e6       	ldi	r24, 0x64	; 100
    5aba:	93 e0       	ldi	r25, 0x03	; 3
    5abc:	a0 e0       	ldi	r26, 0x00	; 0
    5abe:	ed b7       	in	r30, 0x3d	; 61
    5ac0:	fe b7       	in	r31, 0x3e	; 62
    5ac2:	81 83       	std	Z+1, r24	; 0x01
    5ac4:	92 83       	std	Z+2, r25	; 0x02
    5ac6:	a3 83       	std	Z+3, r26	; 0x03
    5ac8:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
	}
}
    5acc:	0f 90       	pop	r0
    5ace:	0f 90       	pop	r0
    5ad0:	0f 90       	pop	r0
    5ad2:	0f 90       	pop	r0
    5ad4:	0f 90       	pop	r0
    5ad6:	cf 91       	pop	r28
    5ad8:	08 95       	ret

00005ada <i2c_display_task_errors>:

///@brief Display any task errors
void i2c_display_task_errors()
{
    5ada:	6f 92       	push	r6
    5adc:	7f 92       	push	r7
    5ade:	8f 92       	push	r8
    5ae0:	af 92       	push	r10
    5ae2:	bf 92       	push	r11
    5ae4:	cf 92       	push	r12
    5ae6:	df 92       	push	r13
    5ae8:	ef 92       	push	r14
    5aea:	0f 93       	push	r16
    5aec:	1f 93       	push	r17
    5aee:	cf 93       	push	r28
    5af0:	df 93       	push	r29
    5af2:	00 d0       	rcall	.+0      	; 0x5af4 <i2c_display_task_errors+0x1a>
    5af4:	00 d0       	rcall	.+0      	; 0x5af6 <i2c_display_task_errors+0x1c>
    5af6:	1f 92       	push	r1
	int8_t i;
	printf("i2c_task.done: %d\n", (int) i2c_task.done);
    5af8:	80 91 84 17 	lds	r24, 0x1784	; 0x801784 <i2c_task+0x2>
    5afc:	90 e0       	ldi	r25, 0x00	; 0
    5afe:	ed b7       	in	r30, 0x3d	; 61
    5b00:	fe b7       	in	r31, 0x3e	; 62
    5b02:	95 83       	std	Z+5, r25	; 0x05
    5b04:	84 83       	std	Z+4, r24	; 0x04
    5b06:	81 e5       	ldi	r24, 0x51	; 81
    5b08:	93 e0       	ldi	r25, 0x03	; 3
    5b0a:	a0 e0       	ldi	r26, 0x00	; 0
    5b0c:	81 83       	std	Z+1, r24	; 0x01
    5b0e:	92 83       	std	Z+2, r25	; 0x02
    5b10:	a3 83       	std	Z+3, r26	; 0x03
    5b12:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
	printf("i2c_task.error: %d\n", (int) i2c_task.error);
    5b16:	80 91 85 17 	lds	r24, 0x1785	; 0x801785 <i2c_task+0x3>
    5b1a:	90 e0       	ldi	r25, 0x00	; 0
    5b1c:	ed b7       	in	r30, 0x3d	; 61
    5b1e:	fe b7       	in	r31, 0x3e	; 62
    5b20:	95 83       	std	Z+5, r25	; 0x05
    5b22:	84 83       	std	Z+4, r24	; 0x04
    5b24:	8d e3       	ldi	r24, 0x3D	; 61
    5b26:	93 e0       	ldi	r25, 0x03	; 3
    5b28:	a0 e0       	ldi	r26, 0x00	; 0
    5b2a:	81 83       	std	Z+1, r24	; 0x01
    5b2c:	92 83       	std	Z+2, r25	; 0x02
    5b2e:	a3 83       	std	Z+3, r26	; 0x03
    5b30:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    5b34:	c2 e6       	ldi	r28, 0x62	; 98
    5b36:	d7 e1       	ldi	r29, 0x17	; 23
	for(i=0;i2c_task_op[i] && i < I2C_OPS;++i)
    5b38:	00 e0       	ldi	r16, 0x00	; 0
    5b3a:	10 e0       	ldi	r17, 0x00	; 0
	{
		printf("task: %d\n", (int) i);
    5b3c:	83 e3       	ldi	r24, 0x33	; 51
    5b3e:	93 e0       	ldi	r25, 0x03	; 3
    5b40:	6c 01       	movw	r12, r24
    5b42:	e1 2c       	mov	r14, r1
		i2c_print_error(i2c_task_op[i]);
		printf("\n");
    5b44:	81 e3       	ldi	r24, 0x31	; 49
    5b46:	93 e0       	ldi	r25, 0x03	; 3
    5b48:	3c 01       	movw	r6, r24
    5b4a:	81 2c       	mov	r8, r1
void i2c_display_task_errors()
{
	int8_t i;
	printf("i2c_task.done: %d\n", (int) i2c_task.done);
	printf("i2c_task.error: %d\n", (int) i2c_task.error);
	for(i=0;i2c_task_op[i] && i < I2C_OPS;++i)
    5b4c:	30 2f       	mov	r19, r16
    5b4e:	21 2f       	mov	r18, r17
    5b50:	5e 01       	movw	r10, r28
    5b52:	0f 5f       	subi	r16, 0xFF	; 255
    5b54:	1f 4f       	sbci	r17, 0xFF	; 255
    5b56:	88 81       	ld	r24, Y
    5b58:	99 81       	ldd	r25, Y+1	; 0x01
    5b5a:	89 2b       	or	r24, r25
    5b5c:	b1 f0       	breq	.+44     	; 0x5b8a <i2c_display_task_errors+0xb0>
	{
		printf("task: %d\n", (int) i);
    5b5e:	ed b7       	in	r30, 0x3d	; 61
    5b60:	fe b7       	in	r31, 0x3e	; 62
    5b62:	34 83       	std	Z+4, r19	; 0x04
    5b64:	25 83       	std	Z+5, r18	; 0x05
    5b66:	c1 82       	std	Z+1, r12	; 0x01
    5b68:	d2 82       	std	Z+2, r13	; 0x02
    5b6a:	e3 82       	std	Z+3, r14	; 0x03
    5b6c:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    5b70:	22 96       	adiw	r28, 0x02	; 2
		i2c_print_error(i2c_task_op[i]);
    5b72:	f5 01       	movw	r30, r10
    5b74:	80 81       	ld	r24, Z
    5b76:	91 81       	ldd	r25, Z+1	; 0x01
    5b78:	39 df       	rcall	.-398    	; 0x59ec <i2c_print_error>
		printf("\n");
    5b7a:	ed b7       	in	r30, 0x3d	; 61
    5b7c:	fe b7       	in	r31, 0x3e	; 62
    5b7e:	61 82       	std	Z+1, r6	; 0x01
    5b80:	72 82       	std	Z+2, r7	; 0x02
    5b82:	83 82       	std	Z+3, r8	; 0x03
    5b84:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    5b88:	e1 cf       	rjmp	.-62     	; 0x5b4c <i2c_display_task_errors+0x72>
	}
}
    5b8a:	0f 90       	pop	r0
    5b8c:	0f 90       	pop	r0
    5b8e:	0f 90       	pop	r0
    5b90:	0f 90       	pop	r0
    5b92:	0f 90       	pop	r0
    5b94:	df 91       	pop	r29
    5b96:	cf 91       	pop	r28
    5b98:	1f 91       	pop	r17
    5b9a:	0f 91       	pop	r16
    5b9c:	ef 90       	pop	r14
    5b9e:	df 90       	pop	r13
    5ba0:	cf 90       	pop	r12
    5ba2:	bf 90       	pop	r11
    5ba4:	af 90       	pop	r10
    5ba6:	8f 90       	pop	r8
    5ba8:	7f 90       	pop	r7
    5baa:	6f 90       	pop	r6
    5bac:	08 95       	ret

00005bae <BINtoBCD>:
/// @return 0 if not running.
/// @return -1 ERROR
int8_t rtc_run_test()
{
	return ( rtc_run(-1) );
}
    5bae:	6a e0       	ldi	r22, 0x0A	; 10
    5bb0:	0e 94 69 e2 	call	0x1c4d2	; 0x1c4d2 <__udivmodqi4>
    5bb4:	82 95       	swap	r24
    5bb6:	80 7f       	andi	r24, 0xF0	; 240
    5bb8:	89 2b       	or	r24, r25
    5bba:	08 95       	ret

00005bbc <BCDtoBIN>:
    5bbc:	98 2f       	mov	r25, r24
    5bbe:	92 95       	swap	r25
    5bc0:	9f 70       	andi	r25, 0x0F	; 15
    5bc2:	8f 70       	andi	r24, 0x0F	; 15
    5bc4:	2a e0       	ldi	r18, 0x0A	; 10
    5bc6:	92 9f       	mul	r25, r18
    5bc8:	80 0d       	add	r24, r0
    5bca:	11 24       	eor	r1, r1
    5bcc:	08 95       	ret

00005bce <i2c_rtc_write>:
    5bce:	ac e0       	ldi	r26, 0x0C	; 12
    5bd0:	b0 e0       	ldi	r27, 0x00	; 0
    5bd2:	ed ee       	ldi	r30, 0xED	; 237
    5bd4:	fd e2       	ldi	r31, 0x2D	; 45
    5bd6:	0c 94 17 e3 	jmp	0x1c62e	; 0x1c62e <__prologue_saves__+0x1c>
    5bda:	9f ef       	ldi	r25, 0xFF	; 255
    5bdc:	92 0f       	add	r25, r18
    5bde:	98 30       	cpi	r25, 0x08	; 8
    5be0:	50 f5       	brcc	.+84     	; 0x5c36 <i2c_rtc_write+0x68>
    5be2:	6c 83       	std	Y+4, r22	; 0x04
    5be4:	90 e0       	ldi	r25, 0x00	; 0
    5be6:	02 2f       	mov	r16, r18
    5be8:	10 e0       	ldi	r17, 0x00	; 0
    5bea:	69 2f       	mov	r22, r25
    5bec:	09 2e       	mov	r0, r25
    5bee:	00 0c       	add	r0, r0
    5bf0:	77 0b       	sbc	r23, r23
    5bf2:	60 17       	cp	r22, r16
    5bf4:	71 07       	cpc	r23, r17
    5bf6:	6c f4       	brge	.+26     	; 0x5c12 <i2c_rtc_write+0x44>
    5bf8:	a5 e0       	ldi	r26, 0x05	; 5
    5bfa:	b0 e0       	ldi	r27, 0x00	; 0
    5bfc:	ac 0f       	add	r26, r28
    5bfe:	bd 1f       	adc	r27, r29
    5c00:	a6 0f       	add	r26, r22
    5c02:	b7 1f       	adc	r27, r23
    5c04:	64 0f       	add	r22, r20
    5c06:	75 1f       	adc	r23, r21
    5c08:	fb 01       	movw	r30, r22
    5c0a:	30 81       	ld	r19, Z
    5c0c:	3c 93       	st	X, r19
    5c0e:	9f 5f       	subi	r25, 0xFF	; 255
    5c10:	ec cf       	rjmp	.-40     	; 0x5bea <i2c_rtc_write+0x1c>
    5c12:	2f 5f       	subi	r18, 0xFF	; 255
    5c14:	ae 01       	movw	r20, r28
    5c16:	4c 5f       	subi	r20, 0xFC	; 252
    5c18:	5f 4f       	sbci	r21, 0xFF	; 255
    5c1a:	60 e0       	ldi	r22, 0x00	; 0
    5c1c:	5a dd       	rcall	.-1356   	; 0x56d2 <i2c_fn>
    5c1e:	81 11       	cpse	r24, r1
    5c20:	0c c0       	rjmp	.+24     	; 0x5c3a <i2c_rtc_write+0x6c>
    5c22:	8e ed       	ldi	r24, 0xDE	; 222
    5c24:	94 e0       	ldi	r25, 0x04	; 4
    5c26:	a0 e0       	ldi	r26, 0x00	; 0
    5c28:	ed b7       	in	r30, 0x3d	; 61
    5c2a:	fe b7       	in	r31, 0x3e	; 62
    5c2c:	81 83       	std	Z+1, r24	; 0x01
    5c2e:	92 83       	std	Z+2, r25	; 0x02
    5c30:	a3 83       	std	Z+3, r26	; 0x03
    5c32:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    5c36:	80 e0       	ldi	r24, 0x00	; 0
    5c38:	01 c0       	rjmp	.+2      	; 0x5c3c <i2c_rtc_write+0x6e>
    5c3a:	81 e0       	ldi	r24, 0x01	; 1
    5c3c:	2c 96       	adiw	r28, 0x0c	; 12
    5c3e:	e4 e0       	ldi	r30, 0x04	; 4
    5c40:	0c 94 33 e3 	jmp	0x1c666	; 0x1c666 <__epilogue_restores__+0x1c>

00005c44 <i2c_rtc_read>:
    5c44:	a4 e0       	ldi	r26, 0x04	; 4
    5c46:	b0 e0       	ldi	r27, 0x00	; 0
    5c48:	e8 e2       	ldi	r30, 0x28	; 40
    5c4a:	fe e2       	ldi	r31, 0x2E	; 46
    5c4c:	0c 94 15 e3 	jmp	0x1c62a	; 0x1c62a <__prologue_saves__+0x18>
    5c50:	6c 83       	std	Y+4, r22	; 0x04
    5c52:	9f ef       	ldi	r25, 0xFF	; 255
    5c54:	92 0f       	add	r25, r18
    5c56:	98 30       	cpi	r25, 0x08	; 8
    5c58:	f8 f4       	brcc	.+62     	; 0x5c98 <i2c_rtc_read+0x54>
    5c5a:	02 2f       	mov	r16, r18
    5c5c:	7a 01       	movw	r14, r20
    5c5e:	18 2f       	mov	r17, r24
    5c60:	21 e0       	ldi	r18, 0x01	; 1
    5c62:	ae 01       	movw	r20, r28
    5c64:	4c 5f       	subi	r20, 0xFC	; 252
    5c66:	5f 4f       	sbci	r21, 0xFF	; 255
    5c68:	60 e0       	ldi	r22, 0x00	; 0
    5c6a:	33 dd       	rcall	.-1434   	; 0x56d2 <i2c_fn>
    5c6c:	81 11       	cpse	r24, r1
    5c6e:	03 c0       	rjmp	.+6      	; 0x5c76 <i2c_rtc_read+0x32>
    5c70:	82 ec       	ldi	r24, 0xC2	; 194
    5c72:	94 e0       	ldi	r25, 0x04	; 4
    5c74:	09 c0       	rjmp	.+18     	; 0x5c88 <i2c_rtc_read+0x44>
    5c76:	20 2f       	mov	r18, r16
    5c78:	a7 01       	movw	r20, r14
    5c7a:	61 e0       	ldi	r22, 0x01	; 1
    5c7c:	81 2f       	mov	r24, r17
    5c7e:	29 dd       	rcall	.-1454   	; 0x56d2 <i2c_fn>
    5c80:	81 11       	cpse	r24, r1
    5c82:	0c c0       	rjmp	.+24     	; 0x5c9c <i2c_rtc_read+0x58>
    5c84:	89 ea       	ldi	r24, 0xA9	; 169
    5c86:	94 e0       	ldi	r25, 0x04	; 4
    5c88:	a0 e0       	ldi	r26, 0x00	; 0
    5c8a:	ed b7       	in	r30, 0x3d	; 61
    5c8c:	fe b7       	in	r31, 0x3e	; 62
    5c8e:	81 83       	std	Z+1, r24	; 0x01
    5c90:	92 83       	std	Z+2, r25	; 0x02
    5c92:	a3 83       	std	Z+3, r26	; 0x03
    5c94:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    5c98:	80 e0       	ldi	r24, 0x00	; 0
    5c9a:	01 c0       	rjmp	.+2      	; 0x5c9e <i2c_rtc_read+0x5a>
    5c9c:	81 e0       	ldi	r24, 0x01	; 1
    5c9e:	24 96       	adiw	r28, 0x04	; 4
    5ca0:	e6 e0       	ldi	r30, 0x06	; 6
    5ca2:	0c 94 31 e3 	jmp	0x1c662	; 0x1c662 <__epilogue_restores__+0x18>

00005ca6 <i2c_rtc_init>:
    5ca6:	60 ea       	ldi	r22, 0xA0	; 160
    5ca8:	76 e8       	ldi	r23, 0x86	; 134
    5caa:	81 e0       	ldi	r24, 0x01	; 1
    5cac:	90 e0       	ldi	r25, 0x00	; 0
    5cae:	18 cc       	rjmp	.-2000   	; 0x54e0 <i2c_init>
    5cb0:	08 95       	ret

00005cb2 <rtc_write>:
    5cb2:	ab e0       	ldi	r26, 0x0B	; 11
    5cb4:	b0 e0       	ldi	r27, 0x00	; 0
    5cb6:	ef e5       	ldi	r30, 0x5F	; 95
    5cb8:	fe e2       	ldi	r31, 0x2E	; 46
    5cba:	0c 94 17 e3 	jmp	0x1c62e	; 0x1c62e <__prologue_saves__+0x1c>
    5cbe:	8c 01       	movw	r16, r24
    5cc0:	fc 01       	movw	r30, r24
    5cc2:	80 81       	ld	r24, Z
    5cc4:	74 df       	rcall	.-280    	; 0x5bae <BINtoBCD>
    5cc6:	8f 77       	andi	r24, 0x7F	; 127
    5cc8:	8c 83       	std	Y+4, r24	; 0x04
    5cca:	f8 01       	movw	r30, r16
    5ccc:	82 81       	ldd	r24, Z+2	; 0x02
    5cce:	6f df       	rcall	.-290    	; 0x5bae <BINtoBCD>
    5cd0:	8f 77       	andi	r24, 0x7F	; 127
    5cd2:	8d 83       	std	Y+5, r24	; 0x05
    5cd4:	f8 01       	movw	r30, r16
    5cd6:	84 81       	ldd	r24, Z+4	; 0x04
    5cd8:	6a df       	rcall	.-300    	; 0x5bae <BINtoBCD>
    5cda:	8f 73       	andi	r24, 0x3F	; 63
    5cdc:	8e 83       	std	Y+6, r24	; 0x06
    5cde:	f8 01       	movw	r30, r16
    5ce0:	84 85       	ldd	r24, Z+12	; 0x0c
    5ce2:	87 70       	andi	r24, 0x07	; 7
    5ce4:	8f 5f       	subi	r24, 0xFF	; 255
    5ce6:	8f 83       	std	Y+7, r24	; 0x07
    5ce8:	86 81       	ldd	r24, Z+6	; 0x06
    5cea:	61 df       	rcall	.-318    	; 0x5bae <BINtoBCD>
    5cec:	8f 73       	andi	r24, 0x3F	; 63
    5cee:	88 87       	std	Y+8, r24	; 0x08
    5cf0:	f8 01       	movw	r30, r16
    5cf2:	80 85       	ldd	r24, Z+8	; 0x08
    5cf4:	8f 5f       	subi	r24, 0xFF	; 255
    5cf6:	5b df       	rcall	.-330    	; 0x5bae <BINtoBCD>
    5cf8:	8f 71       	andi	r24, 0x1F	; 31
    5cfa:	89 87       	std	Y+9, r24	; 0x09
    5cfc:	f8 01       	movw	r30, r16
    5cfe:	82 85       	ldd	r24, Z+10	; 0x0a
    5d00:	84 56       	subi	r24, 0x64	; 100
    5d02:	55 df       	rcall	.-342    	; 0x5bae <BINtoBCD>
    5d04:	8a 87       	std	Y+10, r24	; 0x0a
    5d06:	83 e9       	ldi	r24, 0x93	; 147
    5d08:	8b 87       	std	Y+11, r24	; 0x0b
    5d0a:	28 e0       	ldi	r18, 0x08	; 8
    5d0c:	ae 01       	movw	r20, r28
    5d0e:	4c 5f       	subi	r20, 0xFC	; 252
    5d10:	5f 4f       	sbci	r21, 0xFF	; 255
    5d12:	60 e0       	ldi	r22, 0x00	; 0
    5d14:	88 e6       	ldi	r24, 0x68	; 104
    5d16:	5b df       	rcall	.-330    	; 0x5bce <i2c_rtc_write>
    5d18:	81 11       	cpse	r24, r1
    5d1a:	0c c0       	rjmp	.+24     	; 0x5d34 <rtc_write+0x82>
    5d1c:	88 e9       	ldi	r24, 0x98	; 152
    5d1e:	94 e0       	ldi	r25, 0x04	; 4
    5d20:	a0 e0       	ldi	r26, 0x00	; 0
    5d22:	ed b7       	in	r30, 0x3d	; 61
    5d24:	fe b7       	in	r31, 0x3e	; 62
    5d26:	81 83       	std	Z+1, r24	; 0x01
    5d28:	92 83       	std	Z+2, r25	; 0x02
    5d2a:	a3 83       	std	Z+3, r26	; 0x03
    5d2c:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    5d30:	80 e0       	ldi	r24, 0x00	; 0
    5d32:	01 c0       	rjmp	.+2      	; 0x5d36 <rtc_write+0x84>
    5d34:	81 e0       	ldi	r24, 0x01	; 1
    5d36:	2b 96       	adiw	r28, 0x0b	; 11
    5d38:	e4 e0       	ldi	r30, 0x04	; 4
    5d3a:	0c 94 33 e3 	jmp	0x1c666	; 0x1c666 <__epilogue_restores__+0x1c>

00005d3e <rtc_read>:
    5d3e:	ab e0       	ldi	r26, 0x0B	; 11
    5d40:	b0 e0       	ldi	r27, 0x00	; 0
    5d42:	e5 ea       	ldi	r30, 0xA5	; 165
    5d44:	fe e2       	ldi	r31, 0x2E	; 46
    5d46:	0c 94 17 e3 	jmp	0x1c62e	; 0x1c62e <__prologue_saves__+0x1c>
    5d4a:	8c 01       	movw	r16, r24
    5d4c:	28 e0       	ldi	r18, 0x08	; 8
    5d4e:	ae 01       	movw	r20, r28
    5d50:	4c 5f       	subi	r20, 0xFC	; 252
    5d52:	5f 4f       	sbci	r21, 0xFF	; 255
    5d54:	60 e0       	ldi	r22, 0x00	; 0
    5d56:	88 e6       	ldi	r24, 0x68	; 104
    5d58:	75 df       	rcall	.-278    	; 0x5c44 <i2c_rtc_read>
    5d5a:	81 11       	cpse	r24, r1
    5d5c:	0c c0       	rjmp	.+24     	; 0x5d76 <rtc_read+0x38>
    5d5e:	88 e8       	ldi	r24, 0x88	; 136
    5d60:	94 e0       	ldi	r25, 0x04	; 4
    5d62:	a0 e0       	ldi	r26, 0x00	; 0
    5d64:	ed b7       	in	r30, 0x3d	; 61
    5d66:	fe b7       	in	r31, 0x3e	; 62
    5d68:	81 83       	std	Z+1, r24	; 0x01
    5d6a:	92 83       	std	Z+2, r25	; 0x02
    5d6c:	a3 83       	std	Z+3, r26	; 0x03
    5d6e:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    5d72:	80 e0       	ldi	r24, 0x00	; 0
    5d74:	33 c0       	rjmp	.+102    	; 0x5ddc <rtc_read+0x9e>
    5d76:	8c 81       	ldd	r24, Y+4	; 0x04
    5d78:	8f 77       	andi	r24, 0x7F	; 127
    5d7a:	20 df       	rcall	.-448    	; 0x5bbc <BCDtoBIN>
    5d7c:	90 e0       	ldi	r25, 0x00	; 0
    5d7e:	f8 01       	movw	r30, r16
    5d80:	91 83       	std	Z+1, r25	; 0x01
    5d82:	80 83       	st	Z, r24
    5d84:	8d 81       	ldd	r24, Y+5	; 0x05
    5d86:	8f 77       	andi	r24, 0x7F	; 127
    5d88:	19 df       	rcall	.-462    	; 0x5bbc <BCDtoBIN>
    5d8a:	90 e0       	ldi	r25, 0x00	; 0
    5d8c:	f8 01       	movw	r30, r16
    5d8e:	93 83       	std	Z+3, r25	; 0x03
    5d90:	82 83       	std	Z+2, r24	; 0x02
    5d92:	8e 81       	ldd	r24, Y+6	; 0x06
    5d94:	8f 73       	andi	r24, 0x3F	; 63
    5d96:	12 df       	rcall	.-476    	; 0x5bbc <BCDtoBIN>
    5d98:	90 e0       	ldi	r25, 0x00	; 0
    5d9a:	f8 01       	movw	r30, r16
    5d9c:	95 83       	std	Z+5, r25	; 0x05
    5d9e:	84 83       	std	Z+4, r24	; 0x04
    5da0:	8f 81       	ldd	r24, Y+7	; 0x07
    5da2:	87 70       	andi	r24, 0x07	; 7
    5da4:	90 e0       	ldi	r25, 0x00	; 0
    5da6:	01 97       	sbiw	r24, 0x01	; 1
    5da8:	95 87       	std	Z+13, r25	; 0x0d
    5daa:	84 87       	std	Z+12, r24	; 0x0c
    5dac:	88 85       	ldd	r24, Y+8	; 0x08
    5dae:	8f 73       	andi	r24, 0x3F	; 63
    5db0:	05 df       	rcall	.-502    	; 0x5bbc <BCDtoBIN>
    5db2:	90 e0       	ldi	r25, 0x00	; 0
    5db4:	f8 01       	movw	r30, r16
    5db6:	97 83       	std	Z+7, r25	; 0x07
    5db8:	86 83       	std	Z+6, r24	; 0x06
    5dba:	89 85       	ldd	r24, Y+9	; 0x09
    5dbc:	8f 71       	andi	r24, 0x1F	; 31
    5dbe:	fe de       	rcall	.-516    	; 0x5bbc <BCDtoBIN>
    5dc0:	90 e0       	ldi	r25, 0x00	; 0
    5dc2:	01 97       	sbiw	r24, 0x01	; 1
    5dc4:	f8 01       	movw	r30, r16
    5dc6:	91 87       	std	Z+9, r25	; 0x09
    5dc8:	80 87       	std	Z+8, r24	; 0x08
    5dca:	8a 85       	ldd	r24, Y+10	; 0x0a
    5dcc:	f7 de       	rcall	.-530    	; 0x5bbc <BCDtoBIN>
    5dce:	90 e0       	ldi	r25, 0x00	; 0
    5dd0:	8c 59       	subi	r24, 0x9C	; 156
    5dd2:	9f 4f       	sbci	r25, 0xFF	; 255
    5dd4:	f8 01       	movw	r30, r16
    5dd6:	93 87       	std	Z+11, r25	; 0x0b
    5dd8:	82 87       	std	Z+10, r24	; 0x0a
    5dda:	81 e0       	ldi	r24, 0x01	; 1
    5ddc:	2b 96       	adiw	r28, 0x0b	; 11
    5dde:	e4 e0       	ldi	r30, 0x04	; 4
    5de0:	0c 94 33 e3 	jmp	0x1c666	; 0x1c666 <__epilogue_restores__+0x1c>

00005de4 <rtc_run>:
    5de4:	a4 e0       	ldi	r26, 0x04	; 4
    5de6:	b0 e0       	ldi	r27, 0x00	; 0
    5de8:	e8 ef       	ldi	r30, 0xF8	; 248
    5dea:	fe e2       	ldi	r31, 0x2E	; 46
    5dec:	0c 94 17 e3 	jmp	0x1c62e	; 0x1c62e <__prologue_saves__+0x1c>
    5df0:	8c 01       	movw	r16, r24
    5df2:	21 e0       	ldi	r18, 0x01	; 1
    5df4:	ae 01       	movw	r20, r28
    5df6:	4c 5f       	subi	r20, 0xFC	; 252
    5df8:	5f 4f       	sbci	r21, 0xFF	; 255
    5dfa:	60 e0       	ldi	r22, 0x00	; 0
    5dfc:	88 e6       	ldi	r24, 0x68	; 104
    5dfe:	22 df       	rcall	.-444    	; 0x5c44 <i2c_rtc_read>
    5e00:	81 11       	cpse	r24, r1
    5e02:	03 c0       	rjmp	.+6      	; 0x5e0a <rtc_run+0x26>
    5e04:	84 e7       	ldi	r24, 0x74	; 116
    5e06:	94 e0       	ldi	r25, 0x04	; 4
    5e08:	24 c0       	rjmp	.+72     	; 0x5e52 <rtc_run+0x6e>
    5e0a:	8c 81       	ldd	r24, Y+4	; 0x04
    5e0c:	0f 3f       	cpi	r16, 0xFF	; 255
    5e0e:	ff ef       	ldi	r31, 0xFF	; 255
    5e10:	1f 07       	cpc	r17, r31
    5e12:	59 f4       	brne	.+22     	; 0x5e2a <rtc_run+0x46>
    5e14:	08 2e       	mov	r0, r24
    5e16:	00 0c       	add	r0, r0
    5e18:	99 0b       	sbc	r25, r25
    5e1a:	80 95       	com	r24
    5e1c:	90 95       	com	r25
    5e1e:	89 2f       	mov	r24, r25
    5e20:	88 1f       	adc	r24, r24
    5e22:	88 27       	eor	r24, r24
    5e24:	88 1f       	adc	r24, r24
    5e26:	90 e0       	ldi	r25, 0x00	; 0
    5e28:	20 c0       	rjmp	.+64     	; 0x5e6a <rtc_run+0x86>
    5e2a:	8f 77       	andi	r24, 0x7F	; 127
    5e2c:	01 15       	cp	r16, r1
    5e2e:	11 05       	cpc	r17, r1
    5e30:	11 f4       	brne	.+4      	; 0x5e36 <rtc_run+0x52>
    5e32:	90 e8       	ldi	r25, 0x80	; 128
    5e34:	01 c0       	rjmp	.+2      	; 0x5e38 <rtc_run+0x54>
    5e36:	90 e0       	ldi	r25, 0x00	; 0
    5e38:	89 2b       	or	r24, r25
    5e3a:	8c 83       	std	Y+4, r24	; 0x04
    5e3c:	21 e0       	ldi	r18, 0x01	; 1
    5e3e:	ae 01       	movw	r20, r28
    5e40:	4c 5f       	subi	r20, 0xFC	; 252
    5e42:	5f 4f       	sbci	r21, 0xFF	; 255
    5e44:	60 e0       	ldi	r22, 0x00	; 0
    5e46:	88 e6       	ldi	r24, 0x68	; 104
    5e48:	c2 de       	rcall	.-636    	; 0x5bce <i2c_rtc_write>
    5e4a:	81 11       	cpse	r24, r1
    5e4c:	0d c0       	rjmp	.+26     	; 0x5e68 <rtc_run+0x84>
    5e4e:	8f e5       	ldi	r24, 0x5F	; 95
    5e50:	94 e0       	ldi	r25, 0x04	; 4
    5e52:	a0 e0       	ldi	r26, 0x00	; 0
    5e54:	ed b7       	in	r30, 0x3d	; 61
    5e56:	fe b7       	in	r31, 0x3e	; 62
    5e58:	81 83       	std	Z+1, r24	; 0x01
    5e5a:	92 83       	std	Z+2, r25	; 0x02
    5e5c:	a3 83       	std	Z+3, r26	; 0x03
    5e5e:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    5e62:	8f ef       	ldi	r24, 0xFF	; 255
    5e64:	9f ef       	ldi	r25, 0xFF	; 255
    5e66:	01 c0       	rjmp	.+2      	; 0x5e6a <rtc_run+0x86>
    5e68:	c8 01       	movw	r24, r16
    5e6a:	24 96       	adiw	r28, 0x04	; 4
    5e6c:	e4 e0       	ldi	r30, 0x04	; 4
    5e6e:	0c 94 33 e3 	jmp	0x1c666	; 0x1c666 <__epilogue_restores__+0x1c>

00005e72 <rtc_init>:
/// @param[in] seconds: POSIX EPOCH time in seconds.
///
/// @return  run state 0 = STOP, 1 = RUN
/// @return -1 = ERROR
uint8_t rtc_init (int force, time_t seconds)
{
    5e72:	a7 e0       	ldi	r26, 0x07	; 7
    5e74:	b0 e0       	ldi	r27, 0x00	; 0
    5e76:	ef e3       	ldi	r30, 0x3F	; 63
    5e78:	ff e2       	ldi	r31, 0x2F	; 47
    5e7a:	0c 94 17 e3 	jmp	0x1c62e	; 0x1c62e <__prologue_saves__+0x1c>
    5e7e:	8c 01       	movw	r16, r24
    5e80:	4c 83       	std	Y+4, r20	; 0x04
    5e82:	5d 83       	std	Y+5, r21	; 0x05
    5e84:	6e 83       	std	Y+6, r22	; 0x06
    5e86:	7f 83       	std	Y+7, r23	; 0x07
    int8_t    state;

    tm_t *tmp;

    i2c_rtc_init();
    5e88:	0e df       	rcall	.-484    	; 0x5ca6 <i2c_rtc_init>

    if(!force)
    5e8a:	01 15       	cp	r16, r1
    5e8c:	11 05       	cpc	r17, r1
    5e8e:	39 f4       	brne	.+14     	; 0x5e9e <rtc_init+0x2c>
    {
        state = rtc_run(-1);
    5e90:	8f ef       	ldi	r24, 0xFF	; 255
    5e92:	9f ef       	ldi	r25, 0xFF	; 255
    5e94:	a7 df       	rcall	.-178    	; 0x5de4 <rtc_run>
        if(state < 0)
    5e96:	87 fd       	sbrc	r24, 7
    5e98:	16 c0       	rjmp	.+44     	; 0x5ec6 <rtc_init+0x54>
        {
            rtc_ok = 0;
            return 0;
        }
        if(state == 0)                            // stopped
    5e9a:	81 11       	cpse	r24, r1
    5e9c:	22 c0       	rjmp	.+68     	; 0x5ee2 <rtc_init+0x70>
            force = 1;
    }

    if(force)                                     // INIT
    {
        if(rtc_run(0) < 0)                        // STOP RTC
    5e9e:	80 e0       	ldi	r24, 0x00	; 0
    5ea0:	90 e0       	ldi	r25, 0x00	; 0
    5ea2:	a0 df       	rcall	.-192    	; 0x5de4 <rtc_run>
    5ea4:	97 fd       	sbrc	r25, 7
    5ea6:	0f c0       	rjmp	.+30     	; 0x5ec6 <rtc_init+0x54>
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }

        tmp = gmtime(&seconds);
    5ea8:	ce 01       	movw	r24, r28
    5eaa:	04 96       	adiw	r24, 0x04	; 4
    5eac:	a3 d6       	rcall	.+3398   	; 0x6bf4 <gmtime>
    5eae:	00 97       	sbiw	r24, 0x00	; 0

        if(tmp == NULL || !rtc_write(tmp))
    5eb0:	81 f4       	brne	.+32     	; 0x5ed2 <rtc_init+0x60>
    5eb2:	81 e4       	ldi	r24, 0x41	; 65
        {
            printf("rtc_init  write epoch failed\n");
    5eb4:	94 e0       	ldi	r25, 0x04	; 4
    5eb6:	a0 e0       	ldi	r26, 0x00	; 0
    5eb8:	ed b7       	in	r30, 0x3d	; 61
    5eba:	fe b7       	in	r31, 0x3e	; 62
    5ebc:	81 83       	std	Z+1, r24	; 0x01
    5ebe:	92 83       	std	Z+2, r25	; 0x02
    5ec0:	a3 83       	std	Z+3, r26	; 0x03
    5ec2:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    5ec6:	10 92 fa 19 	sts	0x19FA, r1	; 0x8019fa <rtc_ok+0x1>
            rtc_ok = 0;
    5eca:	10 92 f9 19 	sts	0x19F9, r1	; 0x8019f9 <rtc_ok>
            return 0;
    5ece:	80 e0       	ldi	r24, 0x00	; 0
    5ed0:	0e c0       	rjmp	.+28     	; 0x5eee <rtc_init+0x7c>
            return 0;
        }

        tmp = gmtime(&seconds);

        if(tmp == NULL || !rtc_write(tmp))
    5ed2:	ef de       	rcall	.-546    	; 0x5cb2 <rtc_write>
    5ed4:	88 23       	and	r24, r24
    5ed6:	69 f3       	breq	.-38     	; 0x5eb2 <rtc_init+0x40>
            printf("rtc_init  write epoch failed\n");
            rtc_ok = 0;
            return 0;
        }

        if(rtc_run(1) < 0)                        // START RTC
    5ed8:	81 e0       	ldi	r24, 0x01	; 1
    5eda:	90 e0       	ldi	r25, 0x00	; 0
    5edc:	83 df       	rcall	.-250    	; 0x5de4 <rtc_run>
    5ede:	97 fd       	sbrc	r25, 7
    5ee0:	f2 cf       	rjmp	.-28     	; 0x5ec6 <rtc_init+0x54>
    5ee2:	81 e0       	ldi	r24, 0x01	; 1
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }
    }
    rtc_ok = 1;
    5ee4:	90 e0       	ldi	r25, 0x00	; 0
    5ee6:	90 93 fa 19 	sts	0x19FA, r25	; 0x8019fa <rtc_ok+0x1>
    5eea:	80 93 f9 19 	sts	0x19F9, r24	; 0x8019f9 <rtc_ok>
    5eee:	27 96       	adiw	r28, 0x07	; 7
    return 1;
}
    5ef0:	e4 e0       	ldi	r30, 0x04	; 4
    5ef2:	0c 94 33 e3 	jmp	0x1c666	; 0x1c666 <__epilogue_restores__+0x1c>

00005ef6 <islower>:
    5ef6:	9c 01       	movw	r18, r24
    if(!ptr)
        return(ptr);
    strncpy(ptr,str,len);
    return(ptr);

}
    5ef8:	21 56       	subi	r18, 0x61	; 97
    5efa:	31 09       	sbc	r19, r1
    5efc:	81 e0       	ldi	r24, 0x01	; 1
    5efe:	90 e0       	ldi	r25, 0x00	; 0
    5f00:	2a 31       	cpi	r18, 0x1A	; 26
    5f02:	31 05       	cpc	r19, r1
    5f04:	10 f0       	brcs	.+4      	; 0x5f0a <islower+0x14>
    5f06:	80 e0       	ldi	r24, 0x00	; 0
    5f08:	90 e0       	ldi	r25, 0x00	; 0
    5f0a:	08 95       	ret

00005f0c <toupper>:
    5f0c:	cf 93       	push	r28
    5f0e:	df 93       	push	r29
    5f10:	ec 01       	movw	r28, r24
    5f12:	f1 df       	rcall	.-30     	; 0x5ef6 <islower>
    5f14:	89 2b       	or	r24, r25
    5f16:	19 f0       	breq	.+6      	; 0x5f1e <toupper+0x12>
    5f18:	ce 01       	movw	r24, r28
    5f1a:	80 97       	sbiw	r24, 0x20	; 32
    5f1c:	01 c0       	rjmp	.+2      	; 0x5f20 <toupper+0x14>
    5f1e:	ce 01       	movw	r24, r28
    5f20:	df 91       	pop	r29
    5f22:	cf 91       	pop	r28
    5f24:	08 95       	ret

00005f26 <strcpy>:
    5f26:	fc 01       	movw	r30, r24
    5f28:	db 01       	movw	r26, r22
    5f2a:	2d 91       	ld	r18, X+
    5f2c:	bd 01       	movw	r22, r26
    5f2e:	01 96       	adiw	r24, 0x01	; 1
    5f30:	22 23       	and	r18, r18
    5f32:	11 f0       	breq	.+4      	; 0x5f38 <strcpy+0x12>
    5f34:	20 83       	st	Z, r18
    5f36:	f7 cf       	rjmp	.-18     	; 0x5f26 <strcpy>
    5f38:	10 82       	st	Z, r1
    5f3a:	08 95       	ret

00005f3c <strncpy>:
    5f3c:	db 01       	movw	r26, r22
    5f3e:	fc 01       	movw	r30, r24
    5f40:	2d 91       	ld	r18, X+
    5f42:	21 11       	cpse	r18, r1
    5f44:	03 c0       	rjmp	.+6      	; 0x5f4c <strncpy+0x10>
    5f46:	4e 0f       	add	r20, r30
    5f48:	5f 1f       	adc	r21, r31
    5f4a:	08 c0       	rjmp	.+16     	; 0x5f5c <strncpy+0x20>
    5f4c:	41 15       	cp	r20, r1
    5f4e:	51 05       	cpc	r21, r1
    5f50:	21 f0       	breq	.+8      	; 0x5f5a <strncpy+0x1e>
    5f52:	21 93       	st	Z+, r18
    5f54:	41 50       	subi	r20, 0x01	; 1
    5f56:	51 09       	sbc	r21, r1
    5f58:	f3 cf       	rjmp	.-26     	; 0x5f40 <strncpy+0x4>
    5f5a:	08 95       	ret
    5f5c:	4e 17       	cp	r20, r30
    5f5e:	5f 07       	cpc	r21, r31
    5f60:	11 f0       	breq	.+4      	; 0x5f66 <strncpy+0x2a>
    5f62:	11 92       	st	Z+, r1
    5f64:	fb cf       	rjmp	.-10     	; 0x5f5c <strncpy+0x20>
    5f66:	08 95       	ret

00005f68 <strcat>:
    5f68:	cf 93       	push	r28
    5f6a:	df 93       	push	r29
    5f6c:	d8 2f       	mov	r29, r24
    5f6e:	c9 2f       	mov	r28, r25
    5f70:	28 2f       	mov	r18, r24
    5f72:	39 2f       	mov	r19, r25
    5f74:	c9 01       	movw	r24, r18
    5f76:	2f 5f       	subi	r18, 0xFF	; 255
    5f78:	3f 4f       	sbci	r19, 0xFF	; 255
    5f7a:	fc 01       	movw	r30, r24
    5f7c:	40 81       	ld	r20, Z
    5f7e:	41 11       	cpse	r20, r1
    5f80:	f9 cf       	rjmp	.-14     	; 0x5f74 <strcat+0xc>
    5f82:	d1 df       	rcall	.-94     	; 0x5f26 <strcpy>
    5f84:	8d 2f       	mov	r24, r29
    5f86:	9c 2f       	mov	r25, r28
    5f88:	df 91       	pop	r29
    5f8a:	cf 91       	pop	r28
    5f8c:	08 95       	ret

00005f8e <reverse>:
    5f8e:	fc 01       	movw	r30, r24
    5f90:	01 90       	ld	r0, Z+
    5f92:	00 20       	and	r0, r0
    5f94:	e9 f7       	brne	.-6      	; 0x5f90 <reverse+0x2>
    5f96:	31 97       	sbiw	r30, 0x01	; 1
    5f98:	e8 1b       	sub	r30, r24
    5f9a:	f9 0b       	sbc	r31, r25
    5f9c:	af 01       	movw	r20, r30
    5f9e:	55 95       	asr	r21
    5fa0:	47 95       	ror	r20
    5fa2:	e8 0f       	add	r30, r24
    5fa4:	f9 1f       	adc	r31, r25
    5fa6:	dc 01       	movw	r26, r24
    5fa8:	9d 01       	movw	r18, r26
    5faa:	28 1b       	sub	r18, r24
    5fac:	39 0b       	sbc	r19, r25
    5fae:	24 17       	cp	r18, r20
    5fb0:	35 07       	cpc	r19, r21
    5fb2:	2c f4       	brge	.+10     	; 0x5fbe <reverse+0x30>
    5fb4:	22 91       	ld	r18, -Z
    5fb6:	3c 91       	ld	r19, X
    5fb8:	30 83       	st	Z, r19
    5fba:	2d 93       	st	X+, r18
    5fbc:	f5 cf       	rjmp	.-22     	; 0x5fa8 <reverse+0x1a>
    5fbe:	08 95       	ret

00005fc0 <strupper>:
    5fc0:	cf 93       	push	r28
    5fc2:	df 93       	push	r29
    5fc4:	ec 01       	movw	r28, r24
    5fc6:	88 81       	ld	r24, Y
    5fc8:	88 23       	and	r24, r24
    5fca:	21 f0       	breq	.+8      	; 0x5fd4 <strupper+0x14>
    5fcc:	90 e0       	ldi	r25, 0x00	; 0
    5fce:	9e df       	rcall	.-196    	; 0x5f0c <toupper>
    5fd0:	89 93       	st	Y+, r24
    5fd2:	f9 cf       	rjmp	.-14     	; 0x5fc6 <strupper+0x6>
    5fd4:	df 91       	pop	r29
    5fd6:	cf 91       	pop	r28
    5fd8:	08 95       	ret

00005fda <strcmp>:
    5fda:	dc 01       	movw	r26, r24
    5fdc:	fb 01       	movw	r30, r22
    5fde:	2d 91       	ld	r18, X+
    5fe0:	41 91       	ld	r20, Z+
    5fe2:	50 e0       	ldi	r21, 0x00	; 0
    5fe4:	30 e0       	ldi	r19, 0x00	; 0
    5fe6:	c9 01       	movw	r24, r18
    5fe8:	84 1b       	sub	r24, r20
    5fea:	95 0b       	sbc	r25, r21
    5fec:	11 f4       	brne	.+4      	; 0x5ff2 <strcmp+0x18>
    5fee:	45 2b       	or	r20, r21
    5ff0:	b1 f7       	brne	.-20     	; 0x5fde <strcmp+0x4>
    5ff2:	08 95       	ret

00005ff4 <strcasecmp>:
    5ff4:	ef 92       	push	r14
    5ff6:	ff 92       	push	r15
    5ff8:	0f 93       	push	r16
    5ffa:	1f 93       	push	r17
    5ffc:	cf 93       	push	r28
    5ffe:	df 93       	push	r29
    6000:	7c 01       	movw	r14, r24
    6002:	8b 01       	movw	r16, r22
    6004:	f7 01       	movw	r30, r14
    6006:	81 91       	ld	r24, Z+
    6008:	7f 01       	movw	r14, r30
    600a:	90 e0       	ldi	r25, 0x00	; 0
    600c:	7f df       	rcall	.-258    	; 0x5f0c <toupper>
    600e:	ec 01       	movw	r28, r24
    6010:	f8 01       	movw	r30, r16
    6012:	81 91       	ld	r24, Z+
    6014:	8f 01       	movw	r16, r30
    6016:	90 e0       	ldi	r25, 0x00	; 0
    6018:	79 df       	rcall	.-270    	; 0x5f0c <toupper>
    601a:	9c 01       	movw	r18, r24
    601c:	ce 01       	movw	r24, r28
    601e:	82 1b       	sub	r24, r18
    6020:	93 0b       	sbc	r25, r19
    6022:	11 f4       	brne	.+4      	; 0x6028 <strcasecmp+0x34>
    6024:	23 2b       	or	r18, r19
    6026:	71 f7       	brne	.-36     	; 0x6004 <strcasecmp+0x10>
    6028:	cd b7       	in	r28, 0x3d	; 61
    602a:	de b7       	in	r29, 0x3e	; 62
    602c:	e6 e0       	ldi	r30, 0x06	; 6
    602e:	0c 94 31 e3 	jmp	0x1c662	; 0x1c662 <__epilogue_restores__+0x18>

00006032 <strncasecmp>:
    6032:	a0 e0       	ldi	r26, 0x00	; 0
    6034:	b0 e0       	ldi	r27, 0x00	; 0
    6036:	ef e1       	ldi	r30, 0x1F	; 31
    6038:	f0 e3       	ldi	r31, 0x30	; 48
    603a:	0c 94 13 e3 	jmp	0x1c626	; 0x1c626 <__prologue_saves__+0x14>
    603e:	8c 01       	movw	r16, r24
    6040:	7b 01       	movw	r14, r22
    6042:	6c 01       	movw	r12, r24
    6044:	c4 0e       	add	r12, r20
    6046:	d5 1e       	adc	r13, r21
    6048:	0c 15       	cp	r16, r12
    604a:	1d 05       	cpc	r17, r13
    604c:	99 f0       	breq	.+38     	; 0x6074 <strncasecmp+0x42>
    604e:	f8 01       	movw	r30, r16
    6050:	81 91       	ld	r24, Z+
    6052:	8f 01       	movw	r16, r30
    6054:	90 e0       	ldi	r25, 0x00	; 0
    6056:	5a df       	rcall	.-332    	; 0x5f0c <toupper>
    6058:	ec 01       	movw	r28, r24
    605a:	f7 01       	movw	r30, r14
    605c:	81 91       	ld	r24, Z+
    605e:	7f 01       	movw	r14, r30
    6060:	90 e0       	ldi	r25, 0x00	; 0
    6062:	54 df       	rcall	.-344    	; 0x5f0c <toupper>
    6064:	9c 01       	movw	r18, r24
    6066:	ce 01       	movw	r24, r28
    6068:	82 1b       	sub	r24, r18
    606a:	93 0b       	sbc	r25, r19
    606c:	29 f4       	brne	.+10     	; 0x6078 <strncasecmp+0x46>
    606e:	23 2b       	or	r18, r19
    6070:	59 f7       	brne	.-42     	; 0x6048 <strncasecmp+0x16>
    6072:	02 c0       	rjmp	.+4      	; 0x6078 <strncasecmp+0x46>
    6074:	80 e0       	ldi	r24, 0x00	; 0
    6076:	90 e0       	ldi	r25, 0x00	; 0
    6078:	cd b7       	in	r28, 0x3d	; 61
    607a:	de b7       	in	r29, 0x3e	; 62
    607c:	e8 e0       	ldi	r30, 0x08	; 8
    607e:	0c 94 2f e3 	jmp	0x1c65e	; 0x1c65e <__epilogue_restores__+0x14>

00006082 <stralloc>:
///
///@return pointer to alocated string.
///@return NULL on out of memory.
MEMSPACE
char *stralloc(char *str)
{
    6082:	0f 93       	push	r16
    6084:	1f 93       	push	r17
    6086:	cf 93       	push	r28
    6088:	df 93       	push	r29
    char *ptr;
    int len;

    if(!str)
    608a:	00 97       	sbiw	r24, 0x00	; 0
    608c:	99 f0       	breq	.+38     	; 0x60b4 <stralloc+0x32>
    608e:	ec 01       	movw	r28, r24
        return(str);;
    len  = strlen(str);
    6090:	fc 01       	movw	r30, r24
    6092:	01 90       	ld	r0, Z+
    6094:	00 20       	and	r0, r0
    6096:	e9 f7       	brne	.-6      	; 0x6092 <stralloc+0x10>
    6098:	cf 01       	movw	r24, r30
    ptr = safecalloc(len+1,1);
    609a:	61 e0       	ldi	r22, 0x01	; 1
    609c:	70 e0       	ldi	r23, 0x00	; 0
    609e:	8c 1b       	sub	r24, r28
    60a0:	9d 0b       	sbc	r25, r29
    60a2:	0e 94 fe 25 	call	0x4bfc	; 0x4bfc <safecalloc>
    60a6:	8c 01       	movw	r16, r24
    if(!ptr)
    60a8:	00 97       	sbiw	r24, 0x00	; 0
    60aa:	21 f0       	breq	.+8      	; 0x60b4 <stralloc+0x32>
        return(ptr);
    strcpy(ptr,str);
    60ac:	be 01       	movw	r22, r28
    60ae:	3b df       	rcall	.-394    	; 0x5f26 <strcpy>
    return(ptr);
    60b0:	c8 01       	movw	r24, r16
    60b2:	02 c0       	rjmp	.+4      	; 0x60b8 <stralloc+0x36>
    60b4:	80 e0       	ldi	r24, 0x00	; 0
    60b6:	90 e0       	ldi	r25, 0x00	; 0
}
    60b8:	df 91       	pop	r29
    60ba:	cf 91       	pop	r28
    60bc:	1f 91       	pop	r17
    60be:	0f 91       	pop	r16
    60c0:	08 95       	ret

000060c2 <sep>:
        return(0);

    if(strncmp(str,pat,patlen) == 0)
        return(len);
    return(0);
}
    60c2:	00 d0       	rcall	.+0      	; 0x60c4 <sep+0x2>
    60c4:	1f 92       	push	r1
    60c6:	8e e1       	ldi	r24, 0x1E	; 30
    60c8:	95 e0       	ldi	r25, 0x05	; 5
    60ca:	a0 e0       	ldi	r26, 0x00	; 0
    60cc:	ed b7       	in	r30, 0x3d	; 61
    60ce:	fe b7       	in	r31, 0x3e	; 62
    60d0:	81 83       	std	Z+1, r24	; 0x01
    60d2:	92 83       	std	Z+2, r25	; 0x02
    60d4:	a3 83       	std	Z+3, r26	; 0x03
    60d6:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    60da:	0f 90       	pop	r0
    60dc:	0f 90       	pop	r0
    60de:	0f 90       	pop	r0
    60e0:	08 95       	ret

000060e2 <trim_tail>:
    60e2:	00 97       	sbiw	r24, 0x00	; 0
    60e4:	69 f0       	breq	.+26     	; 0x6100 <trim_tail+0x1e>
    60e6:	fc 01       	movw	r30, r24
    60e8:	01 90       	ld	r0, Z+
    60ea:	00 20       	and	r0, r0
    60ec:	e9 f7       	brne	.-6      	; 0x60e8 <trim_tail+0x6>
    60ee:	31 97       	sbiw	r30, 0x01	; 1
    60f0:	e8 17       	cp	r30, r24
    60f2:	f9 07       	cpc	r31, r25
    60f4:	29 f0       	breq	.+10     	; 0x6100 <trim_tail+0x1e>
    60f6:	22 91       	ld	r18, -Z
    60f8:	21 32       	cpi	r18, 0x21	; 33
    60fa:	10 f4       	brcc	.+4      	; 0x6100 <trim_tail+0x1e>
    60fc:	10 82       	st	Z, r1
    60fe:	f8 cf       	rjmp	.-16     	; 0x60f0 <trim_tail+0xe>
    6100:	08 95       	ret

00006102 <skipspaces>:
    6102:	00 97       	sbiw	r24, 0x00	; 0
    6104:	39 f0       	breq	.+14     	; 0x6114 <skipspaces+0x12>
    6106:	fc 01       	movw	r30, r24
    6108:	cf 01       	movw	r24, r30
    610a:	21 91       	ld	r18, Z+
    610c:	20 32       	cpi	r18, 0x20	; 32
    610e:	e1 f3       	breq	.-8      	; 0x6108 <skipspaces+0x6>
    6110:	29 30       	cpi	r18, 0x09	; 9
    6112:	d1 f3       	breq	.-12     	; 0x6108 <skipspaces+0x6>
    6114:	08 95       	ret

00006116 <MATCH>:
    6116:	cf 93       	push	r28
    6118:	df 93       	push	r29
    611a:	fb 01       	movw	r30, r22
    611c:	01 90       	ld	r0, Z+
    611e:	00 20       	and	r0, r0
    6120:	e9 f7       	brne	.-6      	; 0x611c <MATCH+0x6>
    6122:	31 97       	sbiw	r30, 0x01	; 1
    6124:	ef 01       	movw	r28, r30
    6126:	c6 1b       	sub	r28, r22
    6128:	d7 0b       	sbc	r29, r23
    612a:	57 df       	rcall	.-338    	; 0x5fda <strcmp>
    612c:	89 2b       	or	r24, r25
    612e:	11 f4       	brne	.+4      	; 0x6134 <MATCH+0x1e>
    6130:	ce 01       	movw	r24, r28
    6132:	02 c0       	rjmp	.+4      	; 0x6138 <MATCH+0x22>
    6134:	80 e0       	ldi	r24, 0x00	; 0
    6136:	90 e0       	ldi	r25, 0x00	; 0
    6138:	df 91       	pop	r29
    613a:	cf 91       	pop	r28
    613c:	08 95       	ret

0000613e <MATCHI>:
    613e:	cf 93       	push	r28
    6140:	df 93       	push	r29
    6142:	fb 01       	movw	r30, r22
    6144:	01 90       	ld	r0, Z+
    6146:	00 20       	and	r0, r0
    6148:	e9 f7       	brne	.-6      	; 0x6144 <MATCHI+0x6>
    614a:	31 97       	sbiw	r30, 0x01	; 1
    614c:	ef 01       	movw	r28, r30
    614e:	c6 1b       	sub	r28, r22
    6150:	d7 0b       	sbc	r29, r23
    6152:	50 df       	rcall	.-352    	; 0x5ff4 <strcasecmp>
    6154:	89 2b       	or	r24, r25
    6156:	11 f4       	brne	.+4      	; 0x615c <MATCHI+0x1e>
    6158:	ce 01       	movw	r24, r28
    615a:	02 c0       	rjmp	.+4      	; 0x6160 <MATCHI+0x22>
    615c:	80 e0       	ldi	r24, 0x00	; 0
    615e:	90 e0       	ldi	r25, 0x00	; 0
    6160:	df 91       	pop	r29
    6162:	cf 91       	pop	r28
    6164:	08 95       	ret

00006166 <MATCHARGS>:
    6166:	a9 e0       	ldi	r26, 0x09	; 9
    6168:	b0 e0       	ldi	r27, 0x00	; 0
    616a:	e9 eb       	ldi	r30, 0xB9	; 185
    616c:	f0 e3       	ldi	r31, 0x30	; 48
    616e:	0c 94 15 e3 	jmp	0x1c62a	; 0x1c62a <__prologue_saves__+0x18>
    6172:	eb 01       	movw	r28, r22
    6174:	8a 01       	movw	r16, r20
    6176:	79 01       	movw	r14, r18
    6178:	e2 df       	rcall	.-60     	; 0x613e <MATCHI>
    617a:	00 97       	sbiw	r24, 0x00	; 0
    617c:	c1 f0       	breq	.+48     	; 0x61ae <MATCHARGS+0x48>
    617e:	e0 16       	cp	r14, r16
    6180:	f1 06       	cpc	r15, r17
    6182:	9c f4       	brge	.+38     	; 0x61aa <MATCHARGS+0x44>
    6184:	ed b7       	in	r30, 0x3d	; 61
    6186:	fe b7       	in	r31, 0x3e	; 62
    6188:	f1 86       	std	Z+9, r15	; 0x09
    618a:	e0 86       	std	Z+8, r14	; 0x08
    618c:	17 83       	std	Z+7, r17	; 0x07
    618e:	06 83       	std	Z+6, r16	; 0x06
    6190:	d5 83       	std	Z+5, r29	; 0x05
    6192:	c4 83       	std	Z+4, r28	; 0x04
    6194:	88 ef       	ldi	r24, 0xF8	; 248
    6196:	94 e0       	ldi	r25, 0x04	; 4
    6198:	a0 e0       	ldi	r26, 0x00	; 0
    619a:	81 83       	std	Z+1, r24	; 0x01
    619c:	92 83       	std	Z+2, r25	; 0x02
    619e:	a3 83       	std	Z+3, r26	; 0x03
    61a0:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    61a4:	80 e0       	ldi	r24, 0x00	; 0
    61a6:	90 e0       	ldi	r25, 0x00	; 0
    61a8:	02 c0       	rjmp	.+4      	; 0x61ae <MATCHARGS+0x48>
    61aa:	81 e0       	ldi	r24, 0x01	; 1
    61ac:	90 e0       	ldi	r25, 0x00	; 0
    61ae:	cd b7       	in	r28, 0x3d	; 61
    61b0:	de b7       	in	r29, 0x3e	; 62
    61b2:	29 96       	adiw	r28, 0x09	; 9
    61b4:	e6 e0       	ldi	r30, 0x06	; 6
    61b6:	0c 94 31 e3 	jmp	0x1c662	; 0x1c662 <__epilogue_restores__+0x18>

000061ba <MATCHI_LEN>:
    61ba:	cf 93       	push	r28
    61bc:	df 93       	push	r29
    61be:	00 97       	sbiw	r24, 0x00	; 0
    61c0:	89 f0       	breq	.+34     	; 0x61e4 <MATCHI_LEN+0x2a>
    61c2:	61 15       	cp	r22, r1
    61c4:	71 05       	cpc	r23, r1
    61c6:	71 f0       	breq	.+28     	; 0x61e4 <MATCHI_LEN+0x2a>
    61c8:	eb 01       	movw	r28, r22
    61ca:	09 90       	ld	r0, Y+
    61cc:	00 20       	and	r0, r0
    61ce:	e9 f7       	brne	.-6      	; 0x61ca <MATCHI_LEN+0x10>
    61d0:	21 97       	sbiw	r28, 0x01	; 1
    61d2:	c6 1b       	sub	r28, r22
    61d4:	d7 0b       	sbc	r29, r23
    61d6:	31 f0       	breq	.+12     	; 0x61e4 <MATCHI_LEN+0x2a>
    61d8:	ae 01       	movw	r20, r28
    61da:	2b df       	rcall	.-426    	; 0x6032 <strncasecmp>
    61dc:	89 2b       	or	r24, r25
    61de:	11 f4       	brne	.+4      	; 0x61e4 <MATCHI_LEN+0x2a>
    61e0:	ce 01       	movw	r24, r28
    61e2:	02 c0       	rjmp	.+4      	; 0x61e8 <MATCHI_LEN+0x2e>
    61e4:	80 e0       	ldi	r24, 0x00	; 0
    61e6:	90 e0       	ldi	r25, 0x00	; 0
    61e8:	df 91       	pop	r29
    61ea:	cf 91       	pop	r28
    61ec:	08 95       	ret

000061ee <split_args>:
    61ee:	a0 e0       	ldi	r26, 0x00	; 0
    61f0:	b0 e0       	ldi	r27, 0x00	; 0
    61f2:	ed ef       	ldi	r30, 0xFD	; 253
    61f4:	f0 e3       	ldi	r31, 0x30	; 48
    61f6:	0c 94 13 e3 	jmp	0x1c626	; 0x1c626 <__prologue_saves__+0x14>
    61fa:	dc 01       	movw	r26, r24
    61fc:	6a 01       	movw	r12, r20
    61fe:	8b 01       	movw	r16, r22
    6200:	fb 01       	movw	r30, r22
    6202:	80 e0       	ldi	r24, 0x00	; 0
    6204:	90 e0       	ldi	r25, 0x00	; 0
    6206:	8c 15       	cp	r24, r12
    6208:	9d 05       	cpc	r25, r13
    620a:	24 f4       	brge	.+8      	; 0x6214 <split_args+0x26>
    620c:	11 92       	st	Z+, r1
    620e:	11 92       	st	Z+, r1
    6210:	01 96       	adiw	r24, 0x01	; 1
    6212:	f9 cf       	rjmp	.-14     	; 0x6206 <split_args+0x18>
    6214:	c1 14       	cp	r12, r1
    6216:	d1 04       	cpc	r13, r1
    6218:	d9 f1       	breq	.+118    	; 0x6290 <split_args+0xa2>
    621a:	10 97       	sbiw	r26, 0x00	; 0
    621c:	c9 f1       	breq	.+114    	; 0x6290 <split_args+0xa2>
    621e:	ee 24       	eor	r14, r14
    6220:	e3 94       	inc	r14
    6222:	f1 2c       	mov	r15, r1
    6224:	c0 e0       	ldi	r28, 0x00	; 0
    6226:	d0 e0       	ldi	r29, 0x00	; 0
    6228:	8c 91       	ld	r24, X
    622a:	88 23       	and	r24, r24
    622c:	b1 f1       	breq	.+108    	; 0x629a <split_args+0xac>
    622e:	cc 15       	cp	r28, r12
    6230:	dd 05       	cpc	r29, r13
    6232:	9c f5       	brge	.+102    	; 0x629a <split_args+0xac>
    6234:	cd 01       	movw	r24, r26
    6236:	65 df       	rcall	.-310    	; 0x6102 <skipspaces>
    6238:	dc 01       	movw	r26, r24
    623a:	2c 91       	ld	r18, X
    623c:	22 23       	and	r18, r18
    623e:	69 f1       	breq	.+90     	; 0x629a <split_args+0xac>
    6240:	22 32       	cpi	r18, 0x22	; 34
    6242:	79 f4       	brne	.+30     	; 0x6262 <split_args+0x74>
    6244:	fc 01       	movw	r30, r24
    6246:	31 96       	adiw	r30, 0x01	; 1
    6248:	d8 01       	movw	r26, r16
    624a:	ed 93       	st	X+, r30
    624c:	fc 93       	st	X, r31
    624e:	df 01       	movw	r26, r30
    6250:	80 81       	ld	r24, Z
    6252:	31 96       	adiw	r30, 0x01	; 1
    6254:	88 23       	and	r24, r24
    6256:	a9 f0       	breq	.+42     	; 0x6282 <split_args+0x94>
    6258:	82 32       	cpi	r24, 0x22	; 34
    625a:	c9 f7       	brne	.-14     	; 0x624e <split_args+0x60>
    625c:	1c 92       	st	X, r1
    625e:	df 01       	movw	r26, r30
    6260:	10 c0       	rjmp	.+32     	; 0x6282 <split_args+0x94>
    6262:	f8 01       	movw	r30, r16
    6264:	91 83       	std	Z+1, r25	; 0x01
    6266:	80 83       	st	Z, r24
    6268:	fc 01       	movw	r30, r24
    626a:	2e 2f       	mov	r18, r30
    626c:	9f 2f       	mov	r25, r31
    626e:	81 91       	ld	r24, Z+
    6270:	3f ed       	ldi	r19, 0xDF	; 223
    6272:	38 0f       	add	r19, r24
    6274:	3e 35       	cpi	r19, 0x5E	; 94
    6276:	c8 f3       	brcs	.-14     	; 0x626a <split_args+0x7c>
    6278:	88 23       	and	r24, r24
    627a:	69 f0       	breq	.+26     	; 0x6296 <split_args+0xa8>
    627c:	a2 2f       	mov	r26, r18
    627e:	b9 2f       	mov	r27, r25
    6280:	1d 92       	st	X+, r1
    6282:	21 96       	adiw	r28, 0x01	; 1
    6284:	ff ef       	ldi	r31, 0xFF	; 255
    6286:	ef 1a       	sub	r14, r31
    6288:	ff 0a       	sbc	r15, r31
    628a:	0e 5f       	subi	r16, 0xFE	; 254
    628c:	1f 4f       	sbci	r17, 0xFF	; 255
    628e:	cc cf       	rjmp	.-104    	; 0x6228 <split_args+0x3a>
    6290:	80 e0       	ldi	r24, 0x00	; 0
    6292:	90 e0       	ldi	r25, 0x00	; 0
    6294:	03 c0       	rjmp	.+6      	; 0x629c <split_args+0xae>
    6296:	c7 01       	movw	r24, r14
    6298:	01 c0       	rjmp	.+2      	; 0x629c <split_args+0xae>
    629a:	ce 01       	movw	r24, r28
    629c:	cd b7       	in	r28, 0x3d	; 61
    629e:	de b7       	in	r29, 0x3e	; 62
    62a0:	e8 e0       	ldi	r30, 0x08	; 8
    62a2:	0c 94 2f e3 	jmp	0x1c65e	; 0x1c65e <__epilogue_restores__+0x14>

000062a6 <get_token>:
    62a6:	ef 92       	push	r14
    62a8:	ff 92       	push	r15
    62aa:	0f 93       	push	r16
    62ac:	1f 93       	push	r17
    62ae:	cf 93       	push	r28
    62b0:	df 93       	push	r29
    62b2:	eb 01       	movw	r28, r22
    62b4:	8a 01       	movw	r16, r20
    62b6:	18 82       	st	Y, r1
    62b8:	00 97       	sbiw	r24, 0x00	; 0
    62ba:	89 f1       	breq	.+98     	; 0x631e <get_token+0x78>
    62bc:	fc 01       	movw	r30, r24
    62be:	20 81       	ld	r18, Z
    62c0:	22 23       	and	r18, r18
    62c2:	79 f1       	breq	.+94     	; 0x6322 <get_token+0x7c>
    62c4:	1e df       	rcall	.-452    	; 0x6102 <skipspaces>
    62c6:	7c 01       	movw	r14, r24
    62c8:	0c df       	rcall	.-488    	; 0x60e2 <trim_tail>
    62ca:	f7 01       	movw	r30, r14
    62cc:	cf 01       	movw	r24, r30
    62ce:	21 91       	ld	r18, Z+
    62d0:	21 32       	cpi	r18, 0x21	; 33
    62d2:	e0 f0       	brcs	.+56     	; 0x630c <get_token+0x66>
    62d4:	10 16       	cp	r1, r16
    62d6:	11 06       	cpc	r1, r17
    62d8:	cc f4       	brge	.+50     	; 0x630c <get_token+0x66>
    62da:	22 32       	cpi	r18, 0x22	; 34
    62dc:	79 f4       	brne	.+30     	; 0x62fc <get_token+0x56>
    62de:	fc 01       	movw	r30, r24
    62e0:	31 96       	adiw	r30, 0x01	; 1
    62e2:	0c 0f       	add	r16, r28
    62e4:	1d 1f       	adc	r17, r29
    62e6:	cf 01       	movw	r24, r30
    62e8:	21 91       	ld	r18, Z+
    62ea:	22 23       	and	r18, r18
    62ec:	79 f0       	breq	.+30     	; 0x630c <get_token+0x66>
    62ee:	22 32       	cpi	r18, 0x22	; 34
    62f0:	59 f0       	breq	.+22     	; 0x6308 <get_token+0x62>
    62f2:	c0 17       	cp	r28, r16
    62f4:	d1 07       	cpc	r29, r17
    62f6:	51 f0       	breq	.+20     	; 0x630c <get_token+0x66>
    62f8:	29 93       	st	Y+, r18
    62fa:	f5 cf       	rjmp	.-22     	; 0x62e6 <get_token+0x40>
    62fc:	2c 32       	cpi	r18, 0x2C	; 44
    62fe:	31 f0       	breq	.+12     	; 0x630c <get_token+0x66>
    6300:	29 93       	st	Y+, r18
    6302:	01 50       	subi	r16, 0x01	; 1
    6304:	11 09       	sbc	r17, r1
    6306:	e2 cf       	rjmp	.-60     	; 0x62cc <get_token+0x26>
    6308:	cf 01       	movw	r24, r30
    630a:	18 82       	st	Y, r1
    630c:	fa de       	rcall	.-524    	; 0x6102 <skipspaces>
    630e:	fc 01       	movw	r30, r24
    6310:	80 81       	ld	r24, Z
    6312:	8c 32       	cpi	r24, 0x2C	; 44
    6314:	09 f4       	brne	.+2      	; 0x6318 <get_token+0x72>
    6316:	31 96       	adiw	r30, 0x01	; 1
    6318:	18 82       	st	Y, r1
    631a:	cf 01       	movw	r24, r30
    631c:	02 c0       	rjmp	.+4      	; 0x6322 <get_token+0x7c>
    631e:	80 e0       	ldi	r24, 0x00	; 0
    6320:	90 e0       	ldi	r25, 0x00	; 0
    6322:	cd b7       	in	r28, 0x3d	; 61
    6324:	de b7       	in	r29, 0x3e	; 62
    6326:	e6 e0       	ldi	r30, 0x06	; 6
    6328:	0c 94 31 e3 	jmp	0x1c662	; 0x1c662 <__epilogue_restores__+0x18>

0000632c <get_value>:
/// @param[in] str: string to examine
///
/// @return  value
MEMSPACE
int32_t get_value(char *str)
{
    632c:	a2 e0       	ldi	r26, 0x02	; 2
    632e:	b0 e0       	ldi	r27, 0x00	; 0
    6330:	ec e9       	ldi	r30, 0x9C	; 156
    6332:	f1 e3       	ldi	r31, 0x31	; 49
    6334:	0c 94 17 e3 	jmp	0x1c62e	; 0x1c62e <__prologue_saves__+0x1c>
    int base;
    int ret;
    char *ptr;
    char *endptr;

    if(!str || *str == 0)
    6338:	00 97       	sbiw	r24, 0x00	; 0
    633a:	79 f1       	breq	.+94     	; 0x639a <get_value+0x6e>
    633c:	fc 01       	movw	r30, r24
    633e:	20 81       	ld	r18, Z
    6340:	22 23       	and	r18, r18
    6342:	59 f1       	breq	.+86     	; 0x639a <get_value+0x6e>
        return(0);

    ptr = skipspaces(str);
    6344:	de de       	rcall	.-580    	; 0x6102 <skipspaces>
    6346:	8c 01       	movw	r16, r24
    base = 10;

// convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    6348:	6f e2       	ldi	r22, 0x2F	; 47
    634a:	73 e0       	ldi	r23, 0x03	; 3
    634c:	36 df       	rcall	.-404    	; 0x61ba <MATCHI_LEN>
    634e:	00 97       	sbiw	r24, 0x00	; 0
    6350:	29 f0       	breq	.+10     	; 0x635c <get_value+0x30>
    {
        base = 16;
        ptr += ret;
    6352:	08 0f       	add	r16, r24
    6354:	19 1f       	adc	r17, r25
    base = 10;

// convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    {
        base = 16;
    6356:	40 e1       	ldi	r20, 0x10	; 16
    6358:	50 e0       	ldi	r21, 0x00	; 0
    635a:	18 c0       	rjmp	.+48     	; 0x638c <get_value+0x60>
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    635c:	62 e3       	ldi	r22, 0x32	; 50
    635e:	73 e0       	ldi	r23, 0x03	; 3
    6360:	c8 01       	movw	r24, r16
    6362:	2b df       	rcall	.-426    	; 0x61ba <MATCHI_LEN>
    6364:	00 97       	sbiw	r24, 0x00	; 0
    6366:	29 f0       	breq	.+10     	; 0x6372 <get_value+0x46>
    {
        base = 8;
        ptr += ret;
    6368:	08 0f       	add	r16, r24
    636a:	19 1f       	adc	r17, r25
        base = 16;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    {
        base = 8;
    636c:	48 e0       	ldi	r20, 0x08	; 8
    636e:	50 e0       	ldi	r21, 0x00	; 0
    6370:	0d c0       	rjmp	.+26     	; 0x638c <get_value+0x60>
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    6372:	65 e3       	ldi	r22, 0x35	; 53
    6374:	73 e0       	ldi	r23, 0x03	; 3
    6376:	c8 01       	movw	r24, r16
    6378:	20 df       	rcall	.-448    	; 0x61ba <MATCHI_LEN>
    637a:	00 97       	sbiw	r24, 0x00	; 0
    637c:	29 f0       	breq	.+10     	; 0x6388 <get_value+0x5c>
    {
        base = 2;
        ptr += ret;
    637e:	08 0f       	add	r16, r24
    6380:	19 1f       	adc	r17, r25
        base = 8;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
    6382:	42 e0       	ldi	r20, 0x02	; 2
    6384:	50 e0       	ldi	r21, 0x00	; 0
    6386:	02 c0       	rjmp	.+4      	; 0x638c <get_value+0x60>

    if(!str || *str == 0)
        return(0);

    ptr = skipspaces(str);
    base = 10;
    6388:	4a e0       	ldi	r20, 0x0A	; 10
    638a:	50 e0       	ldi	r21, 0x00	; 0
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
    638c:	be 01       	movw	r22, r28
    638e:	6f 5f       	subi	r22, 0xFF	; 255
    6390:	7f 4f       	sbci	r23, 0xFF	; 255
    6392:	c8 01       	movw	r24, r16
    6394:	0e 94 8d 45 	call	0x8b1a	; 0x8b1a <strtol>
    6398:	03 c0       	rjmp	.+6      	; 0x63a0 <get_value+0x74>
    int ret;
    char *ptr;
    char *endptr;

    if(!str || *str == 0)
        return(0);
    639a:	60 e0       	ldi	r22, 0x00	; 0
    639c:	70 e0       	ldi	r23, 0x00	; 0
    639e:	cb 01       	movw	r24, r22
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
}
    63a0:	22 96       	adiw	r28, 0x02	; 2
    63a2:	e4 e0       	ldi	r30, 0x04	; 4
    63a4:	0c 94 33 e3 	jmp	0x1c666	; 0x1c666 <__epilogue_restores__+0x1c>

000063a8 <enable_system_task>:
/// @brief Enable interrupts
/// @return void.
MEMSPACE
void enable_system_task()
{
    sei();
    63a8:	78 94       	sei
    63aa:	08 95       	ret

000063ac <install_timers_isr>:
///
/// @see ISR().
/// @return void.
MEMSPACE void install_timers_isr()
{
    cli();
    63ac:	f8 94       	cli
    TCCR1B=(1<<WGM12) | TIMER1_PRE_1;             // No Prescale
    63ae:	89 e0       	ldi	r24, 0x09	; 9
    63b0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    TCCR1A=0;
    63b4:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    OCR1A=(TIMER1_COUNTS_PER_TIC-1);              // 0 .. count
    63b8:	8f e1       	ldi	r24, 0x1F	; 31
    63ba:	9e e4       	ldi	r25, 0x4E	; 78
    63bc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    63c0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    TIMSK1 |= (1<<OCIE1A);                        //Enable the Output Compare A interrupt
    63c4:	ef e6       	ldi	r30, 0x6F	; 111
    63c6:	f0 e0       	ldi	r31, 0x00	; 0
    63c8:	80 81       	ld	r24, Z
    63ca:	82 60       	ori	r24, 0x02	; 2
    63cc:	80 83       	st	Z, r24
    sei();
    63ce:	78 94       	sei
    63d0:	08 95       	ret

000063d2 <__vector_13>:
/// @brief AVR Timer Interrupt Vector
///
/// - calls execute_timers() - we call this the System task.
///
ISR(TIMER1_COMPA_vect)
{
    63d2:	1f 92       	push	r1
    63d4:	0f 92       	push	r0
    63d6:	0f b6       	in	r0, 0x3f	; 63
    63d8:	0f 92       	push	r0
    63da:	11 24       	eor	r1, r1
    63dc:	0b b6       	in	r0, 0x3b	; 59
    63de:	0f 92       	push	r0
    63e0:	2f 93       	push	r18
    63e2:	3f 93       	push	r19
    63e4:	4f 93       	push	r20
    63e6:	5f 93       	push	r21
    63e8:	6f 93       	push	r22
    63ea:	7f 93       	push	r23
    63ec:	8f 93       	push	r24
    63ee:	9f 93       	push	r25
    63f0:	af 93       	push	r26
    63f2:	bf 93       	push	r27
    63f4:	ef 93       	push	r30
    63f6:	ff 93       	push	r31
    execute_timers();
    63f8:	36 d2       	rcall	.+1132   	; 0x6866 <execute_timers>
}
    63fa:	ff 91       	pop	r31
    63fc:	ef 91       	pop	r30
    63fe:	bf 91       	pop	r27
    6400:	af 91       	pop	r26
    6402:	9f 91       	pop	r25
    6404:	8f 91       	pop	r24
    6406:	7f 91       	pop	r23
    6408:	6f 91       	pop	r22
    640a:	5f 91       	pop	r21
    640c:	4f 91       	pop	r20
    640e:	3f 91       	pop	r19
    6410:	2f 91       	pop	r18
    6412:	0f 90       	pop	r0
    6414:	0b be       	out	0x3b, r0	; 59
    6416:	0f 90       	pop	r0
    6418:	0f be       	out	0x3f, r0	; 63
    641a:	0f 90       	pop	r0
    641c:	1f 90       	pop	r1
    641e:	18 95       	reti

00006420 <clock_gettime>:
///
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    6420:	0f 93       	push	r16
    6422:	1f 93       	push	r17
    6424:	cf 93       	push	r28
    6426:	df 93       	push	r29
    6428:	fb 01       	movw	r30, r22
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;

// disable interrupts
    cli();
    642a:	f8 94       	cli

    count1 = TCNT1;
    642c:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    6430:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    ts->tv_sec = __clock.tv_sec;
    6434:	80 91 5c 1a 	lds	r24, 0x1A5C	; 0x801a5c <__clock>
    6438:	90 91 5d 1a 	lds	r25, 0x1A5D	; 0x801a5d <__clock+0x1>
    643c:	a0 91 5e 1a 	lds	r26, 0x1A5E	; 0x801a5e <__clock+0x2>
    6440:	b0 91 5f 1a 	lds	r27, 0x1A5F	; 0x801a5f <__clock+0x3>
    6444:	80 83       	st	Z, r24
    6446:	91 83       	std	Z+1, r25	; 0x01
    6448:	a2 83       	std	Z+2, r26	; 0x02
    644a:	b3 83       	std	Z+3, r27	; 0x03
    ts->tv_nsec = __clock.tv_nsec;
    644c:	80 91 60 1a 	lds	r24, 0x1A60	; 0x801a60 <__clock+0x4>
    6450:	90 91 61 1a 	lds	r25, 0x1A61	; 0x801a61 <__clock+0x5>
    6454:	a0 91 62 1a 	lds	r26, 0x1A62	; 0x801a62 <__clock+0x6>
    6458:	b0 91 63 1a 	lds	r27, 0x1A63	; 0x801a63 <__clock+0x7>
    645c:	84 83       	std	Z+4, r24	; 0x04
    645e:	95 83       	std	Z+5, r25	; 0x05
    6460:	a6 83       	std	Z+6, r26	; 0x06
    6462:	b7 83       	std	Z+7, r27	; 0x07

    count2 = TCNT1;
    6464:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    6468:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    if( TIFR1 & (1<<OCF1A) )
    646c:	b1 9b       	sbis	0x16, 1	; 22
    646e:	03 c0       	rjmp	.+6      	; 0x6476 <clock_gettime+0x56>
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    6470:	c0 e0       	ldi	r28, 0x00	; 0
    6472:	d0 e0       	ldi	r29, 0x00	; 0
    6474:	3f c0       	rjmp	.+126    	; 0x64f4 <clock_gettime+0xd4>
    count2 = TCNT1;

    if( TIFR1 & (1<<OCF1A) )
        pendingf = 1;

    if (count2 < count1)
    6476:	82 17       	cp	r24, r18
    6478:	93 07       	cpc	r25, r19
    647a:	d0 f1       	brcs	.+116    	; 0x64f0 <clock_gettime+0xd0>
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    647c:	c0 e0       	ldi	r28, 0x00	; 0
    647e:	d0 e0       	ldi	r29, 0x00	; 0
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    6480:	40 e0       	ldi	r20, 0x00	; 0
    6482:	50 e0       	ldi	r21, 0x00	; 0
    6484:	ba 01       	movw	r22, r20
    else
    {
        if( pendingf )
            offset = TIMER1_COUNTS_PER_TIC;       // overflow
    }
    offset += count2;
    6486:	9a 01       	movw	r18, r20
    6488:	ab 01       	movw	r20, r22
    648a:	28 0f       	add	r18, r24
    648c:	39 1f       	adc	r19, r25
    648e:	41 1d       	adc	r20, r1
    6490:	51 1d       	adc	r21, r1

// enable interrupts
    sei();
    6492:	78 94       	sei

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    6494:	a2 e3       	ldi	r26, 0x32	; 50
    6496:	b0 e0       	ldi	r27, 0x00	; 0
    6498:	0e 94 e9 e2 	call	0x1c5d2	; 0x1c5d2 <__muluhisi3>
    649c:	04 81       	ldd	r16, Z+4	; 0x04
    649e:	15 81       	ldd	r17, Z+5	; 0x05
    64a0:	26 81       	ldd	r18, Z+6	; 0x06
    64a2:	37 81       	ldd	r19, Z+7	; 0x07
    64a4:	dc 01       	movw	r26, r24
    64a6:	cb 01       	movw	r24, r22
    64a8:	80 0f       	add	r24, r16
    64aa:	91 1f       	adc	r25, r17
    64ac:	a2 1f       	adc	r26, r18
    64ae:	b3 1f       	adc	r27, r19

    if (ts->tv_nsec >= 1000000000L)
    64b0:	81 15       	cp	r24, r1
    64b2:	2a ec       	ldi	r18, 0xCA	; 202
    64b4:	92 07       	cpc	r25, r18
    64b6:	2a e9       	ldi	r18, 0x9A	; 154
    64b8:	a2 07       	cpc	r26, r18
    64ba:	2b e3       	ldi	r18, 0x3B	; 59
    64bc:	b2 07       	cpc	r27, r18
    64be:	2c f4       	brge	.+10     	; 0x64ca <clock_gettime+0xaa>
// enable interrupts
    sei();

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    64c0:	84 83       	std	Z+4, r24	; 0x04
    64c2:	95 83       	std	Z+5, r25	; 0x05
    64c4:	a6 83       	std	Z+6, r26	; 0x06
    64c6:	b7 83       	std	Z+7, r27	; 0x07
    64c8:	1a c0       	rjmp	.+52     	; 0x64fe <clock_gettime+0xde>

    if (ts->tv_nsec >= 1000000000L)
    {
        ts->tv_nsec -= 1000000000L;
    64ca:	9a 5c       	subi	r25, 0xCA	; 202
    64cc:	aa 49       	sbci	r26, 0x9A	; 154
    64ce:	bb 43       	sbci	r27, 0x3B	; 59
    64d0:	84 83       	std	Z+4, r24	; 0x04
    64d2:	95 83       	std	Z+5, r25	; 0x05
    64d4:	a6 83       	std	Z+6, r26	; 0x06
    64d6:	b7 83       	std	Z+7, r27	; 0x07
        ts->tv_sec++;
    64d8:	80 81       	ld	r24, Z
    64da:	91 81       	ldd	r25, Z+1	; 0x01
    64dc:	a2 81       	ldd	r26, Z+2	; 0x02
    64de:	b3 81       	ldd	r27, Z+3	; 0x03
    64e0:	01 96       	adiw	r24, 0x01	; 1
    64e2:	a1 1d       	adc	r26, r1
    64e4:	b1 1d       	adc	r27, r1
    64e6:	80 83       	st	Z, r24
    64e8:	91 83       	std	Z+1, r25	; 0x01
    64ea:	a2 83       	std	Z+2, r26	; 0x02
    64ec:	b3 83       	std	Z+3, r27	; 0x03
    }
    return(errorf);
    64ee:	07 c0       	rjmp	.+14     	; 0x64fe <clock_gettime+0xde>

    if (count2 < count1)
    {
///  note: counter2 < count1 implies ISR flag must be set
        if( !pendingf )
            errorf = -1;                          // counter overflow and NO pending is an error!
    64f0:	cf ef       	ldi	r28, 0xFF	; 255
    64f2:	df ef       	ldi	r29, 0xFF	; 255
        offset = TIMER1_COUNTS_PER_TIC;           // overflow
    64f4:	40 e2       	ldi	r20, 0x20	; 32
    64f6:	5e e4       	ldi	r21, 0x4E	; 78
    64f8:	60 e0       	ldi	r22, 0x00	; 0
    64fa:	70 e0       	ldi	r23, 0x00	; 0
    64fc:	c4 cf       	rjmp	.-120    	; 0x6486 <clock_gettime+0x66>
    {
        ts->tv_nsec -= 1000000000L;
        ts->tv_sec++;
    }
    return(errorf);
}
    64fe:	ce 01       	movw	r24, r28
    6500:	df 91       	pop	r29
    6502:	cf 91       	pop	r28
    6504:	1f 91       	pop	r17
    6506:	0f 91       	pop	r16
    6508:	08 95       	ret

0000650a <clock_task>:
void disable_timers()
{
    if(timers_configured && timers_enabled)
    {
        disable_system_task();
        timers_enabled = 0;
    650a:	80 91 60 1a 	lds	r24, 0x1A60	; 0x801a60 <__clock+0x4>
    650e:	90 91 61 1a 	lds	r25, 0x1A61	; 0x801a61 <__clock+0x5>
    6512:	a0 91 62 1a 	lds	r26, 0x1A62	; 0x801a62 <__clock+0x6>
    6516:	b0 91 63 1a 	lds	r27, 0x1A63	; 0x801a63 <__clock+0x7>
    651a:	80 5c       	subi	r24, 0xC0	; 192
    651c:	9d 4b       	sbci	r25, 0xBD	; 189
    651e:	a0 4f       	sbci	r26, 0xF0	; 240
    6520:	bf 4f       	sbci	r27, 0xFF	; 255
    6522:	80 93 60 1a 	sts	0x1A60, r24	; 0x801a60 <__clock+0x4>
    6526:	90 93 61 1a 	sts	0x1A61, r25	; 0x801a61 <__clock+0x5>
    652a:	a0 93 62 1a 	sts	0x1A62, r26	; 0x801a62 <__clock+0x6>
    652e:	b0 93 63 1a 	sts	0x1A63, r27	; 0x801a63 <__clock+0x7>
    6532:	80 91 60 1a 	lds	r24, 0x1A60	; 0x801a60 <__clock+0x4>
    6536:	90 91 61 1a 	lds	r25, 0x1A61	; 0x801a61 <__clock+0x5>
    653a:	a0 91 62 1a 	lds	r26, 0x1A62	; 0x801a62 <__clock+0x6>
    653e:	b0 91 63 1a 	lds	r27, 0x1A63	; 0x801a63 <__clock+0x7>
    6542:	81 15       	cp	r24, r1
    6544:	9a 4c       	sbci	r25, 0xCA	; 202
    6546:	aa 49       	sbci	r26, 0x9A	; 154
    6548:	bb 43       	sbci	r27, 0x3B	; 59
    654a:	dc f0       	brlt	.+54     	; 0x6582 <clock_task+0x78>
    654c:	80 91 5c 1a 	lds	r24, 0x1A5C	; 0x801a5c <__clock>
    6550:	90 91 5d 1a 	lds	r25, 0x1A5D	; 0x801a5d <__clock+0x1>
    6554:	a0 91 5e 1a 	lds	r26, 0x1A5E	; 0x801a5e <__clock+0x2>
    6558:	b0 91 5f 1a 	lds	r27, 0x1A5F	; 0x801a5f <__clock+0x3>
    655c:	01 96       	adiw	r24, 0x01	; 1
    655e:	a1 1d       	adc	r26, r1
    6560:	b1 1d       	adc	r27, r1
    6562:	80 93 5c 1a 	sts	0x1A5C, r24	; 0x801a5c <__clock>
    6566:	90 93 5d 1a 	sts	0x1A5D, r25	; 0x801a5d <__clock+0x1>
    656a:	a0 93 5e 1a 	sts	0x1A5E, r26	; 0x801a5e <__clock+0x2>
    656e:	b0 93 5f 1a 	sts	0x1A5F, r27	; 0x801a5f <__clock+0x3>
    6572:	10 92 60 1a 	sts	0x1A60, r1	; 0x801a60 <__clock+0x4>
    6576:	10 92 61 1a 	sts	0x1A61, r1	; 0x801a61 <__clock+0x5>
    657a:	10 92 62 1a 	sts	0x1A62, r1	; 0x801a62 <__clock+0x6>
    657e:	10 92 63 1a 	sts	0x1A63, r1	; 0x801a63 <__clock+0x7>
    6582:	08 95       	ret

00006584 <clock_settime.part.2>:
    6584:	fc 01       	movw	r30, r24
    6586:	84 81       	ldd	r24, Z+4	; 0x04
    6588:	95 81       	ldd	r25, Z+5	; 0x05
    658a:	a6 81       	ldd	r26, Z+6	; 0x06
    658c:	b7 81       	ldd	r27, Z+7	; 0x07
    658e:	80 93 60 1a 	sts	0x1A60, r24	; 0x801a60 <__clock+0x4>
    6592:	90 93 61 1a 	sts	0x1A61, r25	; 0x801a61 <__clock+0x5>
    6596:	a0 93 62 1a 	sts	0x1A62, r26	; 0x801a62 <__clock+0x6>
    659a:	b0 93 63 1a 	sts	0x1A63, r27	; 0x801a63 <__clock+0x7>
    659e:	80 81       	ld	r24, Z
    65a0:	91 81       	ldd	r25, Z+1	; 0x01
    65a2:	a2 81       	ldd	r26, Z+2	; 0x02
    65a4:	b3 81       	ldd	r27, Z+3	; 0x03
    65a6:	80 93 5c 1a 	sts	0x1A5C, r24	; 0x801a5c <__clock>
    65aa:	90 93 5d 1a 	sts	0x1A5D, r25	; 0x801a5d <__clock+0x1>
    65ae:	a0 93 5e 1a 	sts	0x1A5E, r26	; 0x801a5e <__clock+0x2>
    65b2:	b0 93 5f 1a 	sts	0x1A5F, r27	; 0x801a5f <__clock+0x3>
    65b6:	80 91 60 1a 	lds	r24, 0x1A60	; 0x801a60 <__clock+0x4>
    65ba:	90 91 61 1a 	lds	r25, 0x1A61	; 0x801a61 <__clock+0x5>
    65be:	a0 91 62 1a 	lds	r26, 0x1A62	; 0x801a62 <__clock+0x6>
    65c2:	b0 91 63 1a 	lds	r27, 0x1A63	; 0x801a63 <__clock+0x7>
    65c6:	44 81       	ldd	r20, Z+4	; 0x04
    65c8:	55 81       	ldd	r21, Z+5	; 0x05
    65ca:	66 81       	ldd	r22, Z+6	; 0x06
    65cc:	77 81       	ldd	r23, Z+7	; 0x07
    65ce:	48 17       	cp	r20, r24
    65d0:	59 07       	cpc	r21, r25
    65d2:	6a 07       	cpc	r22, r26
    65d4:	7b 07       	cpc	r23, r27
    65d6:	b9 f6       	brne	.-82     	; 0x6586 <clock_settime.part.2+0x2>
    65d8:	80 91 5c 1a 	lds	r24, 0x1A5C	; 0x801a5c <__clock>
    65dc:	90 91 5d 1a 	lds	r25, 0x1A5D	; 0x801a5d <__clock+0x1>
    65e0:	a0 91 5e 1a 	lds	r26, 0x1A5E	; 0x801a5e <__clock+0x2>
    65e4:	b0 91 5f 1a 	lds	r27, 0x1A5F	; 0x801a5f <__clock+0x3>
    65e8:	40 81       	ld	r20, Z
    65ea:	51 81       	ldd	r21, Z+1	; 0x01
    65ec:	62 81       	ldd	r22, Z+2	; 0x02
    65ee:	73 81       	ldd	r23, Z+3	; 0x03
    65f0:	48 17       	cp	r20, r24
    65f2:	59 07       	cpc	r21, r25
    65f4:	6a 07       	cpc	r22, r26
    65f6:	7b 07       	cpc	r23, r27
    65f8:	31 f6       	brne	.-116    	; 0x6586 <clock_settime.part.2+0x2>
    65fa:	80 e0       	ldi	r24, 0x00	; 0
    65fc:	90 e0       	ldi	r25, 0x00	; 0
    65fe:	08 95       	ret

00006600 <set_timers>:
    6600:	00 d0       	rcall	.+0      	; 0x6602 <set_timers+0x2>
    6602:	1f 92       	push	r1
    6604:	00 97       	sbiw	r24, 0x00	; 0
    6606:	79 f1       	breq	.+94     	; 0x6666 <set_timers+0x66>
    6608:	e4 e6       	ldi	r30, 0x64	; 100
    660a:	fa e1       	ldi	r31, 0x1A	; 26
    660c:	4f ef       	ldi	r20, 0xFF	; 255
    660e:	5f ef       	ldi	r21, 0xFF	; 255
    6610:	20 e0       	ldi	r18, 0x00	; 0
    6612:	30 e0       	ldi	r19, 0x00	; 0
    6614:	60 81       	ld	r22, Z
    6616:	71 81       	ldd	r23, Z+1	; 0x01
    6618:	86 17       	cp	r24, r22
    661a:	97 07       	cpc	r25, r23
    661c:	79 f0       	breq	.+30     	; 0x663c <set_timers+0x3c>
    661e:	67 2b       	or	r22, r23
    6620:	71 f4       	brne	.+28     	; 0x663e <set_timers+0x3e>
    6622:	f9 01       	movw	r30, r18
    6624:	ee 0f       	add	r30, r30
    6626:	ff 1f       	adc	r31, r31
    6628:	e2 0f       	add	r30, r18
    662a:	f3 1f       	adc	r31, r19
    662c:	ec 59       	subi	r30, 0x9C	; 156
    662e:	f5 4e       	sbci	r31, 0xE5	; 229
    6630:	91 83       	std	Z+1, r25	; 0x01
    6632:	80 83       	st	Z, r24
    6634:	81 e0       	ldi	r24, 0x01	; 1
    6636:	82 83       	std	Z+2, r24	; 0x02
    6638:	c9 01       	movw	r24, r18
    663a:	19 c0       	rjmp	.+50     	; 0x666e <set_timers+0x6e>
    663c:	a9 01       	movw	r20, r18
    663e:	2f 5f       	subi	r18, 0xFF	; 255
    6640:	3f 4f       	sbci	r19, 0xFF	; 255
    6642:	33 96       	adiw	r30, 0x03	; 3
    6644:	28 30       	cpi	r18, 0x08	; 8
    6646:	31 05       	cpc	r19, r1
    6648:	29 f7       	brne	.-54     	; 0x6614 <set_timers+0x14>
    664a:	4f 3f       	cpi	r20, 0xFF	; 255
    664c:	8f ef       	ldi	r24, 0xFF	; 255
    664e:	58 07       	cpc	r21, r24
    6650:	69 f4       	brne	.+26     	; 0x666c <set_timers+0x6c>
    6652:	8d ec       	ldi	r24, 0xCD	; 205
    6654:	95 e0       	ldi	r25, 0x05	; 5
    6656:	a0 e0       	ldi	r26, 0x00	; 0
    6658:	ed b7       	in	r30, 0x3d	; 61
    665a:	fe b7       	in	r31, 0x3e	; 62
    665c:	81 83       	std	Z+1, r24	; 0x01
    665e:	92 83       	std	Z+2, r25	; 0x02
    6660:	a3 83       	std	Z+3, r26	; 0x03
    6662:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    6666:	8f ef       	ldi	r24, 0xFF	; 255
    6668:	9f ef       	ldi	r25, 0xFF	; 255
    666a:	01 c0       	rjmp	.+2      	; 0x666e <set_timers+0x6e>
    666c:	ca 01       	movw	r24, r20
    666e:	0f 90       	pop	r0
    6670:	0f 90       	pop	r0
    6672:	0f 90       	pop	r0
    6674:	08 95       	ret

00006676 <delete_all_timers>:
    6676:	e4 e6       	ldi	r30, 0x64	; 100
    6678:	fa e1       	ldi	r31, 0x1A	; 26
    667a:	12 82       	std	Z+2, r1	; 0x02
    667c:	11 82       	std	Z+1, r1	; 0x01
    667e:	10 82       	st	Z, r1
    6680:	33 96       	adiw	r30, 0x03	; 3
    6682:	8a e1       	ldi	r24, 0x1A	; 26
    6684:	ec 37       	cpi	r30, 0x7C	; 124
    6686:	f8 07       	cpc	r31, r24
    6688:	c1 f7       	brne	.-16     	; 0x667a <delete_all_timers+0x4>
    668a:	08 95       	ret

0000668c <subtract_timespec>:
    668c:	0f 93       	push	r16
    668e:	1f 93       	push	r17
    6690:	cf 93       	push	r28
    6692:	df 93       	push	r29
    6694:	fc 01       	movw	r30, r24
    6696:	84 81       	ldd	r24, Z+4	; 0x04
    6698:	95 81       	ldd	r25, Z+5	; 0x05
    669a:	a6 81       	ldd	r26, Z+6	; 0x06
    669c:	b7 81       	ldd	r27, Z+7	; 0x07
    669e:	eb 01       	movw	r28, r22
    66a0:	0c 81       	ldd	r16, Y+4	; 0x04
    66a2:	1d 81       	ldd	r17, Y+5	; 0x05
    66a4:	2e 81       	ldd	r18, Y+6	; 0x06
    66a6:	3f 81       	ldd	r19, Y+7	; 0x07
    66a8:	80 1b       	sub	r24, r16
    66aa:	91 0b       	sbc	r25, r17
    66ac:	a2 0b       	sbc	r26, r18
    66ae:	b3 0b       	sbc	r27, r19
    66b0:	b7 fd       	sbrc	r27, 7
    66b2:	05 c0       	rjmp	.+10     	; 0x66be <subtract_timespec+0x32>
    66b4:	84 83       	std	Z+4, r24	; 0x04
    66b6:	95 83       	std	Z+5, r25	; 0x05
    66b8:	a6 83       	std	Z+6, r26	; 0x06
    66ba:	b7 83       	std	Z+7, r27	; 0x07
    66bc:	12 c0       	rjmp	.+36     	; 0x66e2 <subtract_timespec+0x56>
    66be:	96 53       	subi	r25, 0x36	; 54
    66c0:	a5 46       	sbci	r26, 0x65	; 101
    66c2:	b4 4c       	sbci	r27, 0xC4	; 196
    66c4:	84 83       	std	Z+4, r24	; 0x04
    66c6:	95 83       	std	Z+5, r25	; 0x05
    66c8:	a6 83       	std	Z+6, r26	; 0x06
    66ca:	b7 83       	std	Z+7, r27	; 0x07
    66cc:	80 81       	ld	r24, Z
    66ce:	91 81       	ldd	r25, Z+1	; 0x01
    66d0:	a2 81       	ldd	r26, Z+2	; 0x02
    66d2:	b3 81       	ldd	r27, Z+3	; 0x03
    66d4:	01 97       	sbiw	r24, 0x01	; 1
    66d6:	a1 09       	sbc	r26, r1
    66d8:	b1 09       	sbc	r27, r1
    66da:	80 83       	st	Z, r24
    66dc:	91 83       	std	Z+1, r25	; 0x01
    66de:	a2 83       	std	Z+2, r26	; 0x02
    66e0:	b3 83       	std	Z+3, r27	; 0x03
    66e2:	80 81       	ld	r24, Z
    66e4:	91 81       	ldd	r25, Z+1	; 0x01
    66e6:	a2 81       	ldd	r26, Z+2	; 0x02
    66e8:	b3 81       	ldd	r27, Z+3	; 0x03
    66ea:	eb 01       	movw	r28, r22
    66ec:	48 81       	ld	r20, Y
    66ee:	59 81       	ldd	r21, Y+1	; 0x01
    66f0:	6a 81       	ldd	r22, Y+2	; 0x02
    66f2:	7b 81       	ldd	r23, Y+3	; 0x03
    66f4:	84 1b       	sub	r24, r20
    66f6:	95 0b       	sbc	r25, r21
    66f8:	a6 0b       	sbc	r26, r22
    66fa:	b7 0b       	sbc	r27, r23
    66fc:	80 83       	st	Z, r24
    66fe:	91 83       	std	Z+1, r25	; 0x01
    6700:	a2 83       	std	Z+2, r26	; 0x02
    6702:	b3 83       	std	Z+3, r27	; 0x03
    6704:	df 91       	pop	r29
    6706:	cf 91       	pop	r28
    6708:	1f 91       	pop	r17
    670a:	0f 91       	pop	r16
    670c:	08 95       	ret

0000670e <ts_to_str>:
    670e:	ad b7       	in	r26, 0x3d	; 61
    6710:	be b7       	in	r27, 0x3e	; 62
    6712:	1f 97       	sbiw	r26, 0x0f	; 15
    6714:	0f b6       	in	r0, 0x3f	; 63
    6716:	f8 94       	cli
    6718:	be bf       	out	0x3e, r27	; 62
    671a:	0f be       	out	0x3f, r0	; 63
    671c:	ad bf       	out	0x3d, r26	; 61
    671e:	fc 01       	movw	r30, r24
    6720:	44 81       	ldd	r20, Z+4	; 0x04
    6722:	55 81       	ldd	r21, Z+5	; 0x05
    6724:	66 81       	ldd	r22, Z+6	; 0x06
    6726:	77 81       	ldd	r23, Z+7	; 0x07
    6728:	ed b7       	in	r30, 0x3d	; 61
    672a:	fe b7       	in	r31, 0x3e	; 62
    672c:	44 87       	std	Z+12, r20	; 0x0c
    672e:	55 87       	std	Z+13, r21	; 0x0d
    6730:	66 87       	std	Z+14, r22	; 0x0e
    6732:	77 87       	std	Z+15, r23	; 0x0f
    6734:	fc 01       	movw	r30, r24
    6736:	80 81       	ld	r24, Z
    6738:	91 81       	ldd	r25, Z+1	; 0x01
    673a:	a2 81       	ldd	r26, Z+2	; 0x02
    673c:	b3 81       	ldd	r27, Z+3	; 0x03
    673e:	ed b7       	in	r30, 0x3d	; 61
    6740:	fe b7       	in	r31, 0x3e	; 62
    6742:	80 87       	std	Z+8, r24	; 0x08
    6744:	91 87       	std	Z+9, r25	; 0x09
    6746:	a2 87       	std	Z+10, r26	; 0x0a
    6748:	b3 87       	std	Z+11, r27	; 0x0b
    674a:	83 ec       	ldi	r24, 0xC3	; 195
    674c:	95 e0       	ldi	r25, 0x05	; 5
    674e:	a0 e0       	ldi	r26, 0x00	; 0
    6750:	85 83       	std	Z+5, r24	; 0x05
    6752:	96 83       	std	Z+6, r25	; 0x06
    6754:	a7 83       	std	Z+7, r26	; 0x07
    6756:	8f e1       	ldi	r24, 0x1F	; 31
    6758:	90 e0       	ldi	r25, 0x00	; 0
    675a:	94 83       	std	Z+4, r25	; 0x04
    675c:	83 83       	std	Z+3, r24	; 0x03
    675e:	80 e9       	ldi	r24, 0x90	; 144
    6760:	97 e1       	ldi	r25, 0x17	; 23
    6762:	92 83       	std	Z+2, r25	; 0x02
    6764:	81 83       	std	Z+1, r24	; 0x01
    6766:	0e 94 2a 45 	call	0x8a54	; 0x8a54 <snprintf_P>
    676a:	80 e9       	ldi	r24, 0x90	; 144
    676c:	97 e1       	ldi	r25, 0x17	; 23
    676e:	ad b7       	in	r26, 0x3d	; 61
    6770:	be b7       	in	r27, 0x3e	; 62
    6772:	1f 96       	adiw	r26, 0x0f	; 15
    6774:	0f b6       	in	r0, 0x3f	; 63
    6776:	f8 94       	cli
    6778:	be bf       	out	0x3e, r27	; 62
    677a:	0f be       	out	0x3f, r0	; 63
    677c:	ad bf       	out	0x3d, r26	; 61
    677e:	08 95       	ret

00006780 <clock_elapsed_begin>:
    6780:	68 e8       	ldi	r22, 0x88	; 136
    6782:	77 e1       	ldi	r23, 0x17	; 23
    6784:	80 e0       	ldi	r24, 0x00	; 0
    6786:	90 e0       	ldi	r25, 0x00	; 0
    6788:	4b ce       	rjmp	.-874    	; 0x6420 <clock_gettime>
    678a:	08 95       	ret

0000678c <clock_elapsed_end>:
    678c:	af e0       	ldi	r26, 0x0F	; 15
    678e:	b0 e0       	ldi	r27, 0x00	; 0
    6790:	ec ec       	ldi	r30, 0xCC	; 204
    6792:	f3 e3       	ldi	r31, 0x33	; 51
    6794:	0c 94 17 e3 	jmp	0x1c62e	; 0x1c62e <__prologue_saves__+0x1c>
    6798:	8c 01       	movw	r16, r24
    679a:	be 01       	movw	r22, r28
    679c:	68 5f       	subi	r22, 0xF8	; 248
    679e:	7f 4f       	sbci	r23, 0xFF	; 255
    67a0:	80 e0       	ldi	r24, 0x00	; 0
    67a2:	90 e0       	ldi	r25, 0x00	; 0
    67a4:	3d de       	rcall	.-902    	; 0x6420 <clock_gettime>
    67a6:	68 e8       	ldi	r22, 0x88	; 136
    67a8:	77 e1       	ldi	r23, 0x17	; 23
    67aa:	ce 01       	movw	r24, r28
    67ac:	08 96       	adiw	r24, 0x08	; 8
    67ae:	6e df       	rcall	.-292    	; 0x668c <subtract_timespec>
    67b0:	01 15       	cp	r16, r1
    67b2:	11 05       	cpc	r17, r1
    67b4:	b1 f0       	breq	.+44     	; 0x67e2 <clock_elapsed_end+0x56>
    67b6:	f8 01       	movw	r30, r16
    67b8:	80 81       	ld	r24, Z
    67ba:	88 23       	and	r24, r24
    67bc:	91 f0       	breq	.+36     	; 0x67e2 <clock_elapsed_end+0x56>
    67be:	ce 01       	movw	r24, r28
    67c0:	08 96       	adiw	r24, 0x08	; 8
    67c2:	a5 df       	rcall	.-182    	; 0x670e <ts_to_str>
    67c4:	ed b7       	in	r30, 0x3d	; 61
    67c6:	fe b7       	in	r31, 0x3e	; 62
    67c8:	97 83       	std	Z+7, r25	; 0x07
    67ca:	86 83       	std	Z+6, r24	; 0x06
    67cc:	15 83       	std	Z+5, r17	; 0x05
    67ce:	04 83       	std	Z+4, r16	; 0x04
    67d0:	85 eb       	ldi	r24, 0xB5	; 181
    67d2:	95 e0       	ldi	r25, 0x05	; 5
    67d4:	a0 e0       	ldi	r26, 0x00	; 0
    67d6:	81 83       	std	Z+1, r24	; 0x01
    67d8:	92 83       	std	Z+2, r25	; 0x02
    67da:	a3 83       	std	Z+3, r26	; 0x03
    67dc:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    67e0:	0f c0       	rjmp	.+30     	; 0x6800 <clock_elapsed_end+0x74>
    67e2:	ce 01       	movw	r24, r28
    67e4:	08 96       	adiw	r24, 0x08	; 8
    67e6:	93 df       	rcall	.-218    	; 0x670e <ts_to_str>
    67e8:	ed b7       	in	r30, 0x3d	; 61
    67ea:	fe b7       	in	r31, 0x3e	; 62
    67ec:	95 83       	std	Z+5, r25	; 0x05
    67ee:	84 83       	std	Z+4, r24	; 0x04
    67f0:	8a ea       	ldi	r24, 0xAA	; 170
    67f2:	95 e0       	ldi	r25, 0x05	; 5
    67f4:	a0 e0       	ldi	r26, 0x00	; 0
    67f6:	81 83       	std	Z+1, r24	; 0x01
    67f8:	92 83       	std	Z+2, r25	; 0x02
    67fa:	a3 83       	std	Z+3, r26	; 0x03
    67fc:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    6800:	2f 96       	adiw	r28, 0x0f	; 15
    6802:	e4 e0       	ldi	r30, 0x04	; 4
    6804:	0c 94 33 e3 	jmp	0x1c666	; 0x1c666 <__epilogue_restores__+0x1c>

00006808 <clock_clear>:
    6808:	a8 e0       	ldi	r26, 0x08	; 8
    680a:	b0 e0       	ldi	r27, 0x00	; 0
    680c:	ea e0       	ldi	r30, 0x0A	; 10
    680e:	f4 e3       	ldi	r31, 0x34	; 52
    6810:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__prologue_saves__+0x20>
    6814:	1d 82       	std	Y+5, r1	; 0x05
    6816:	1e 82       	std	Y+6, r1	; 0x06
    6818:	1f 82       	std	Y+7, r1	; 0x07
    681a:	18 86       	std	Y+8, r1	; 0x08
    681c:	19 82       	std	Y+1, r1	; 0x01
    681e:	1a 82       	std	Y+2, r1	; 0x02
    6820:	1b 82       	std	Y+3, r1	; 0x03
    6822:	1c 82       	std	Y+4, r1	; 0x04
    6824:	ce 01       	movw	r24, r28
    6826:	01 96       	adiw	r24, 0x01	; 1
    6828:	ad de       	rcall	.-678    	; 0x6584 <clock_settime.part.2>
    682a:	ec e7       	ldi	r30, 0x7C	; 124
    682c:	fa e1       	ldi	r31, 0x1A	; 26
    682e:	11 82       	std	Z+1, r1	; 0x01
    6830:	10 82       	st	Z, r1
    6832:	13 82       	std	Z+3, r1	; 0x03
    6834:	12 82       	std	Z+2, r1	; 0x02
    6836:	28 96       	adiw	r28, 0x08	; 8
    6838:	e2 e0       	ldi	r30, 0x02	; 2
    683a:	0c 94 35 e3 	jmp	0x1c66a	; 0x1c66a <__epilogue_restores__+0x20>

0000683e <enable_timers>:
///
/// @return  void
MEMSPACE
void enable_timers()
{
    if(timers_configured && !timers_enabled)
    683e:	80 91 b0 17 	lds	r24, 0x17B0	; 0x8017b0 <timers_configured>
    6842:	90 91 b1 17 	lds	r25, 0x17B1	; 0x8017b1 <timers_configured+0x1>
    6846:	89 2b       	or	r24, r25
    6848:	69 f0       	breq	.+26     	; 0x6864 <enable_timers+0x26>
    684a:	80 91 b2 17 	lds	r24, 0x17B2	; 0x8017b2 <timers_enabled>
    684e:	90 91 b3 17 	lds	r25, 0x17B3	; 0x8017b3 <timers_enabled+0x1>
    6852:	89 2b       	or	r24, r25
    6854:	39 f4       	brne	.+14     	; 0x6864 <enable_timers+0x26>
    {
        enable_system_task();
    6856:	a8 dd       	rcall	.-1200   	; 0x63a8 <enable_system_task>
        timers_enabled = 1;
    6858:	81 e0       	ldi	r24, 0x01	; 1
    685a:	90 e0       	ldi	r25, 0x00	; 0
    685c:	90 93 b3 17 	sts	0x17B3, r25	; 0x8017b3 <timers_enabled+0x1>
    6860:	80 93 b2 17 	sts	0x17B2, r24	; 0x8017b2 <timers_enabled>
    6864:	08 95       	ret

00006866 <execute_timers>:
/// @brief  Execute all user timers at SYSTEM_HZ rate.
///  Called by system task
///
/// @return  void
void execute_timers()
{
    6866:	cf 93       	push	r28
    6868:	df 93       	push	r29
    686a:	c4 e6       	ldi	r28, 0x64	; 100
    686c:	da e1       	ldi	r29, 0x1A	; 26
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
    686e:	8a 81       	ldd	r24, Y+2	; 0x02
    6870:	88 23       	and	r24, r24
    6872:	29 f0       	breq	.+10     	; 0x687e <execute_timers+0x18>
    6874:	e8 81       	ld	r30, Y
    6876:	f9 81       	ldd	r31, Y+1	; 0x01
    6878:	30 97       	sbiw	r30, 0x00	; 0
    687a:	09 f0       	breq	.+2      	; 0x687e <execute_timers+0x18>
            (*timer_irq[i].user_timer_handler)();
    687c:	09 95       	icall
    687e:	23 96       	adiw	r28, 0x03	; 3
/// @return  void
void execute_timers()
{
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    6880:	8a e1       	ldi	r24, 0x1A	; 26
    6882:	cc 37       	cpi	r28, 0x7C	; 124
    6884:	d8 07       	cpc	r29, r24
    6886:	99 f7       	brne	.-26     	; 0x686e <execute_timers+0x8>
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
            (*timer_irq[i].user_timer_handler)();
    }
}
    6888:	df 91       	pop	r29
    688a:	cf 91       	pop	r28
    688c:	08 95       	ret

0000688e <init_timers>:
/// @see: timer_hal.c for hardware dependent interface
//
/// @return  void
MEMSPACE
void init_timers()
{
    688e:	00 d0       	rcall	.+0      	; 0x6890 <init_timers+0x2>
    6890:	1f 92       	push	r1
    printf("Timers init called\n");
    6892:	86 e9       	ldi	r24, 0x96	; 150
    6894:	95 e0       	ldi	r25, 0x05	; 5
    6896:	a0 e0       	ldi	r26, 0x00	; 0
    6898:	ed b7       	in	r30, 0x3d	; 61
    689a:	fe b7       	in	r31, 0x3e	; 62
    689c:	81 83       	std	Z+1, r24	; 0x01
    689e:	92 83       	std	Z+2, r25	; 0x02
    68a0:	a3 83       	std	Z+3, r26	; 0x03
    68a2:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>

    if(!timers_configured)
    68a6:	80 91 b0 17 	lds	r24, 0x17B0	; 0x8017b0 <timers_configured>
    68aa:	90 91 b1 17 	lds	r25, 0x17B1	; 0x8017b1 <timers_configured+0x1>
    68ae:	89 2b       	or	r24, r25
    68b0:	a9 f4       	brne	.+42     	; 0x68dc <init_timers+0x4e>
    {
        install_timers_isr();
    68b2:	7c dd       	rcall	.-1288   	; 0x63ac <install_timers_isr>
        timers_configured = 1;
    68b4:	81 e0       	ldi	r24, 0x01	; 1
    68b6:	90 e0       	ldi	r25, 0x00	; 0
    68b8:	90 93 b1 17 	sts	0x17B1, r25	; 0x8017b1 <timers_configured+0x1>
    68bc:	80 93 b0 17 	sts	0x17B0, r24	; 0x8017b0 <timers_configured>
        timers_enabled = 0;
    68c0:	10 92 b3 17 	sts	0x17B3, r1	; 0x8017b3 <timers_enabled+0x1>
    68c4:	10 92 b2 17 	sts	0x17B2, r1	; 0x8017b2 <timers_enabled>
        printf("Timers configured\n");
    68c8:	83 e8       	ldi	r24, 0x83	; 131
    68ca:	95 e0       	ldi	r25, 0x05	; 5
    68cc:	a0 e0       	ldi	r26, 0x00	; 0
    68ce:	ed b7       	in	r30, 0x3d	; 61
    68d0:	fe b7       	in	r31, 0x3e	; 62
    68d2:	81 83       	std	Z+1, r24	; 0x01
    68d4:	92 83       	std	Z+2, r25	; 0x02
    68d6:	a3 83       	std	Z+3, r26	; 0x03
    68d8:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    }

    delete_all_timers();

    clock_clear();
    68dc:	cc de       	rcall	.-616    	; 0x6676 <delete_all_timers>
    68de:	94 df       	rcall	.-216    	; 0x6808 <clock_clear>
    printf("Clock Init\n");
    68e0:	87 e7       	ldi	r24, 0x77	; 119
    68e2:	95 e0       	ldi	r25, 0x05	; 5
    68e4:	a0 e0       	ldi	r26, 0x00	; 0
    68e6:	ed b7       	in	r30, 0x3d	; 61
    68e8:	fe b7       	in	r31, 0x3e	; 62
    68ea:	81 83       	std	Z+1, r24	; 0x01
    68ec:	92 83       	std	Z+2, r25	; 0x02
    68ee:	a3 83       	std	Z+3, r26	; 0x03
    68f0:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>

///  See time.c
    if(set_timers(clock_task,1) == -1)
    68f4:	61 e0       	ldi	r22, 0x01	; 1
    68f6:	70 e0       	ldi	r23, 0x00	; 0
    68f8:	85 e8       	ldi	r24, 0x85	; 133
    68fa:	92 e3       	ldi	r25, 0x32	; 50
    68fc:	81 de       	rcall	.-766    	; 0x6600 <set_timers>
    68fe:	01 96       	adiw	r24, 0x01	; 1
    6900:	51 f4       	brne	.+20     	; 0x6916 <init_timers+0x88>
        printf("Clock task init failed\n");
    6902:	8f e5       	ldi	r24, 0x5F	; 95
    6904:	95 e0       	ldi	r25, 0x05	; 5
    6906:	a0 e0       	ldi	r26, 0x00	; 0
    6908:	ed b7       	in	r30, 0x3d	; 61
    690a:	fe b7       	in	r31, 0x3e	; 62
    690c:	81 83       	std	Z+1, r24	; 0x01
    690e:	92 83       	std	Z+2, r25	; 0x02
    6910:	a3 83       	std	Z+3, r26	; 0x03
    6912:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    printf("Clock Installed\n");
    6916:	8e e4       	ldi	r24, 0x4E	; 78
    6918:	95 e0       	ldi	r25, 0x05	; 5
    691a:	a0 e0       	ldi	r26, 0x00	; 0
    691c:	ed b7       	in	r30, 0x3d	; 61
    691e:	fe b7       	in	r31, 0x3e	; 62
    6920:	81 83       	std	Z+1, r24	; 0x01
    6922:	92 83       	std	Z+2, r25	; 0x02
    6924:	a3 83       	std	Z+3, r26	; 0x03
    6926:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>

    enable_timers();
    692a:	89 df       	rcall	.-238    	; 0x683e <enable_timers>

    printf("Timers enabled\n");
    692c:	8e e3       	ldi	r24, 0x3E	; 62
    692e:	95 e0       	ldi	r25, 0x05	; 5
    6930:	a0 e0       	ldi	r26, 0x00	; 0
    6932:	ed b7       	in	r30, 0x3d	; 61
    6934:	fe b7       	in	r31, 0x3e	; 62
    6936:	81 83       	std	Z+1, r24	; 0x01
    6938:	92 83       	std	Z+2, r25	; 0x02
    693a:	a3 83       	std	Z+3, r26	; 0x03
    693c:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
}
    6940:	0f 90       	pop	r0
    6942:	0f 90       	pop	r0
    6944:	0f 90       	pop	r0
    6946:	08 95       	ret

00006948 <clock_getres>:
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_getres(clockid_t clk_id  __attribute__((unused)), struct timespec *res)
{
    if(clk_id)
    6948:	89 2b       	or	r24, r25
    694a:	81 f4       	brne	.+32     	; 0x696c <clock_getres+0x24>
        return(-1);
    res->tv_sec = 0;
    694c:	fb 01       	movw	r30, r22
    694e:	10 82       	st	Z, r1
    6950:	11 82       	std	Z+1, r1	; 0x01
    6952:	12 82       	std	Z+2, r1	; 0x02
    6954:	13 82       	std	Z+3, r1	; 0x03
    res->tv_nsec = SYSTEM_TASK_TIC_NS;
    6956:	80 e4       	ldi	r24, 0x40	; 64
    6958:	92 e4       	ldi	r25, 0x42	; 66
    695a:	af e0       	ldi	r26, 0x0F	; 15
    695c:	b0 e0       	ldi	r27, 0x00	; 0
    695e:	84 83       	std	Z+4, r24	; 0x04
    6960:	95 83       	std	Z+5, r25	; 0x05
    6962:	a6 83       	std	Z+6, r26	; 0x06
    6964:	b7 83       	std	Z+7, r27	; 0x07
    return(0);
    6966:	80 e0       	ldi	r24, 0x00	; 0
    6968:	90 e0       	ldi	r25, 0x00	; 0
    696a:	08 95       	ret
/// @return -1 on error.
MEMSPACE
int clock_getres(clockid_t clk_id  __attribute__((unused)), struct timespec *res)
{
    if(clk_id)
        return(-1);
    696c:	8f ef       	ldi	r24, 0xFF	; 255
    696e:	9f ef       	ldi	r25, 0xFF	; 255
    res->tv_sec = 0;
    res->tv_nsec = SYSTEM_TASK_TIC_NS;
    return(0);
}
    6970:	08 95       	ret

00006972 <clock_settime>:
///
/// @return 0.
MEMSPACE
int clock_settime(clockid_t clk_id  __attribute__((unused)), const struct timespec *ts)
{
    if(clk_id)
    6972:	89 2b       	or	r24, r25
    6974:	19 f4       	brne	.+6      	; 0x697c <clock_settime+0xa>
    6976:	cb 01       	movw	r24, r22
    6978:	05 ce       	rjmp	.-1014   	; 0x6584 <clock_settime.part.2>
    697a:	08 95       	ret
        return(-1);
    697c:	8f ef       	ldi	r24, 0xFF	; 255
    697e:	9f ef       	ldi	r25, 0xFF	; 255
            continue;
        break;
    }

    return(0);
}
    6980:	08 95       	ret

00006982 <IS_Leap>:
void print_dst_gmt()
{
    printf("DST START       GMT: %s\n", ctime_gm(&dst.start));
    printf("DST END         GMT: %s\n", ctime_gm(&dst.end));

}
    6982:	9c 01       	movw	r18, r24
    6984:	83 70       	andi	r24, 0x03	; 3
    6986:	99 27       	eor	r25, r25
    6988:	00 97       	sbiw	r24, 0x00	; 0
    698a:	69 f4       	brne	.+26     	; 0x69a6 <IS_Leap+0x24>
    698c:	2c 36       	cpi	r18, 0x6C	; 108
    698e:	47 e0       	ldi	r20, 0x07	; 7
    6990:	34 07       	cpc	r19, r20
    6992:	59 f0       	breq	.+22     	; 0x69aa <IS_Leap+0x28>
    6994:	51 e0       	ldi	r21, 0x01	; 1
    6996:	40 e0       	ldi	r20, 0x00	; 0
    6998:	24 33       	cpi	r18, 0x34	; 52
    699a:	38 40       	sbci	r19, 0x08	; 8
    699c:	09 f4       	brne	.+2      	; 0x69a0 <IS_Leap+0x1e>
    699e:	50 e0       	ldi	r21, 0x00	; 0
    69a0:	85 2f       	mov	r24, r21
    69a2:	94 2f       	mov	r25, r20
    69a4:	08 95       	ret
    69a6:	80 e0       	ldi	r24, 0x00	; 0
    69a8:	90 e0       	ldi	r25, 0x00	; 0
    69aa:	08 95       	ret

000069ac <tm_mon_to_ascii>:
    69ac:	8c 30       	cpi	r24, 0x0C	; 12
    69ae:	91 05       	cpc	r25, r1
    69b0:	40 f4       	brcc	.+16     	; 0x69c2 <tm_mon_to_ascii+0x16>
    69b2:	88 0f       	add	r24, r24
    69b4:	99 1f       	adc	r25, r25
    69b6:	fc 01       	movw	r30, r24
    69b8:	e5 5f       	subi	r30, 0xF5	; 245
    69ba:	fe 4f       	sbci	r31, 0xFE	; 254
    69bc:	80 81       	ld	r24, Z
    69be:	91 81       	ldd	r25, Z+1	; 0x01
    69c0:	08 95       	ret
    69c2:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <__Month+0x18>
    69c6:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <__Month+0x19>
    69ca:	08 95       	ret

000069cc <Days_Per_Month>:
    69cc:	cf 93       	push	r28
    69ce:	df 93       	push	r29
    69d0:	8c 30       	cpi	r24, 0x0C	; 12
    69d2:	91 05       	cpc	r25, r1
    69d4:	24 f0       	brlt	.+8      	; 0x69de <Days_Per_Month+0x12>
    69d6:	6f 5f       	subi	r22, 0xFF	; 255
    69d8:	7f 4f       	sbci	r23, 0xFF	; 255
    69da:	0c 97       	sbiw	r24, 0x0c	; 12
    69dc:	f9 cf       	rjmp	.-14     	; 0x69d0 <Days_Per_Month+0x4>
    69de:	97 ff       	sbrs	r25, 7
    69e0:	04 c0       	rjmp	.+8      	; 0x69ea <Days_Per_Month+0x1e>
    69e2:	61 50       	subi	r22, 0x01	; 1
    69e4:	71 09       	sbc	r23, r1
    69e6:	0c 96       	adiw	r24, 0x0c	; 12
    69e8:	fa cf       	rjmp	.-12     	; 0x69de <Days_Per_Month+0x12>
    69ea:	fc 01       	movw	r30, r24
    69ec:	ee 0f       	add	r30, r30
    69ee:	ff 1f       	adc	r31, r31
    69f0:	e8 57       	subi	r30, 0x78	; 120
    69f2:	fc 4f       	sbci	r31, 0xFC	; 252
    69f4:	c0 81       	ld	r28, Z
    69f6:	d1 81       	ldd	r29, Z+1	; 0x01
    69f8:	01 97       	sbiw	r24, 0x01	; 1
    69fa:	29 f4       	brne	.+10     	; 0x6a06 <Days_Per_Month+0x3a>
    69fc:	cb 01       	movw	r24, r22
    69fe:	c1 df       	rcall	.-126    	; 0x6982 <IS_Leap>
    6a00:	89 2b       	or	r24, r25
    6a02:	09 f0       	breq	.+2      	; 0x6a06 <Days_Per_Month+0x3a>
    6a04:	21 96       	adiw	r28, 0x01	; 1
    6a06:	ce 01       	movw	r24, r28
    6a08:	df 91       	pop	r29
    6a0a:	cf 91       	pop	r28
    6a0c:	08 95       	ret

00006a0e <time_to_tm>:
    6a0e:	a0 e0       	ldi	r26, 0x00	; 0
    6a10:	b0 e0       	ldi	r27, 0x00	; 0
    6a12:	ed e0       	ldi	r30, 0x0D	; 13
    6a14:	f5 e3       	ldi	r31, 0x35	; 53
    6a16:	0c 94 0b e3 	jmp	0x1c616	; 0x1c616 <__prologue_saves__+0x4>
    6a1a:	e8 01       	movw	r28, r16
    6a1c:	e6 e1       	ldi	r30, 0x16	; 22
    6a1e:	d8 01       	movw	r26, r16
    6a20:	1d 92       	st	X+, r1
    6a22:	ea 95       	dec	r30
    6a24:	e9 f7       	brne	.-6      	; 0x6a20 <time_to_tm+0x12>
    6a26:	61 15       	cp	r22, r1
    6a28:	bd e5       	ldi	r27, 0x5D	; 93
    6a2a:	7b 07       	cpc	r23, r27
    6a2c:	bd ef       	ldi	r27, 0xFD	; 253
    6a2e:	8b 07       	cpc	r24, r27
    6a30:	bf ef       	ldi	r27, 0xFF	; 255
    6a32:	9b 07       	cpc	r25, r27
    6a34:	08 f0       	brcs	.+2      	; 0x6a38 <time_to_tm+0x2a>
    6a36:	c0 c0       	rjmp	.+384    	; 0x6bb8 <time_to_tm+0x1aa>
    6a38:	6b 01       	movw	r12, r22
    6a3a:	7c 01       	movw	r14, r24
    6a3c:	c2 1a       	sub	r12, r18
    6a3e:	d3 0a       	sbc	r13, r19
    6a40:	e4 0a       	sbc	r14, r20
    6a42:	f5 0a       	sbc	r15, r21
    6a44:	46 01       	movw	r8, r12
    6a46:	57 01       	movw	r10, r14
    6a48:	e0 e8       	ldi	r30, 0x80	; 128
    6a4a:	ce 16       	cp	r12, r30
    6a4c:	ee ea       	ldi	r30, 0xAE	; 174
    6a4e:	de 06       	cpc	r13, r30
    6a50:	ee ef       	ldi	r30, 0xFE	; 254
    6a52:	ee 06       	cpc	r14, r30
    6a54:	ef ef       	ldi	r30, 0xFF	; 255
    6a56:	fe 06       	cpc	r15, r30
    6a58:	50 f0       	brcs	.+20     	; 0x6a6e <time_to_tm+0x60>
    6a5a:	80 e8       	ldi	r24, 0x80	; 128
    6a5c:	88 0e       	add	r8, r24
    6a5e:	81 e5       	ldi	r24, 0x51	; 81
    6a60:	98 1e       	adc	r9, r24
    6a62:	81 e0       	ldi	r24, 0x01	; 1
    6a64:	a8 1e       	adc	r10, r24
    6a66:	b1 1c       	adc	r11, r1
    6a68:	01 e0       	ldi	r16, 0x01	; 1
    6a6a:	10 e0       	ldi	r17, 0x00	; 0
    6a6c:	02 c0       	rjmp	.+4      	; 0x6a72 <time_to_tm+0x64>
    6a6e:	00 e0       	ldi	r16, 0x00	; 0
    6a70:	10 e0       	ldi	r17, 0x00	; 0
    6a72:	8c e3       	ldi	r24, 0x3C	; 60
    6a74:	48 2e       	mov	r4, r24
    6a76:	51 2c       	mov	r5, r1
    6a78:	61 2c       	mov	r6, r1
    6a7a:	71 2c       	mov	r7, r1
    6a7c:	c5 01       	movw	r24, r10
    6a7e:	b4 01       	movw	r22, r8
    6a80:	a3 01       	movw	r20, r6
    6a82:	92 01       	movw	r18, r4
    6a84:	0e 94 9c e2 	call	0x1c538	; 0x1c538 <__udivmodsi4>
    6a88:	79 83       	std	Y+1, r23	; 0x01
    6a8a:	68 83       	st	Y, r22
    6a8c:	ca 01       	movw	r24, r20
    6a8e:	b9 01       	movw	r22, r18
    6a90:	a3 01       	movw	r20, r6
    6a92:	92 01       	movw	r18, r4
    6a94:	0e 94 9c e2 	call	0x1c538	; 0x1c538 <__udivmodsi4>
    6a98:	7b 83       	std	Y+3, r23	; 0x03
    6a9a:	6a 83       	std	Y+2, r22	; 0x02
    6a9c:	c5 01       	movw	r24, r10
    6a9e:	b4 01       	movw	r22, r8
    6aa0:	20 e1       	ldi	r18, 0x10	; 16
    6aa2:	3e e0       	ldi	r19, 0x0E	; 14
    6aa4:	40 e0       	ldi	r20, 0x00	; 0
    6aa6:	50 e0       	ldi	r21, 0x00	; 0
    6aa8:	0e 94 9c e2 	call	0x1c538	; 0x1c538 <__udivmodsi4>
    6aac:	ca 01       	movw	r24, r20
    6aae:	b9 01       	movw	r22, r18
    6ab0:	28 e1       	ldi	r18, 0x18	; 24
    6ab2:	30 e0       	ldi	r19, 0x00	; 0
    6ab4:	40 e0       	ldi	r20, 0x00	; 0
    6ab6:	50 e0       	ldi	r21, 0x00	; 0
    6ab8:	0e 94 9c e2 	call	0x1c538	; 0x1c538 <__udivmodsi4>
    6abc:	7d 83       	std	Y+5, r23	; 0x05
    6abe:	6c 83       	std	Y+4, r22	; 0x04
    6ac0:	01 15       	cp	r16, r1
    6ac2:	11 05       	cpc	r17, r1
    6ac4:	89 f0       	breq	.+34     	; 0x6ae8 <time_to_tm+0xda>
    6ac6:	85 e4       	ldi	r24, 0x45	; 69
    6ac8:	90 e0       	ldi	r25, 0x00	; 0
    6aca:	9b 87       	std	Y+11, r25	; 0x0b
    6acc:	8a 87       	std	Y+10, r24	; 0x0a
    6ace:	8b e0       	ldi	r24, 0x0B	; 11
    6ad0:	90 e0       	ldi	r25, 0x00	; 0
    6ad2:	99 87       	std	Y+9, r25	; 0x09
    6ad4:	88 87       	std	Y+8, r24	; 0x08
    6ad6:	8f e1       	ldi	r24, 0x1F	; 31
    6ad8:	90 e0       	ldi	r25, 0x00	; 0
    6ada:	9f 83       	std	Y+7, r25	; 0x07
    6adc:	8e 83       	std	Y+6, r24	; 0x06
    6ade:	83 e0       	ldi	r24, 0x03	; 3
    6ae0:	90 e0       	ldi	r25, 0x00	; 0
    6ae2:	9d 87       	std	Y+13, r25	; 0x0d
    6ae4:	8c 87       	std	Y+12, r24	; 0x0c
    6ae6:	65 c0       	rjmp	.+202    	; 0x6bb2 <time_to_tm+0x1a4>
    6ae8:	c5 01       	movw	r24, r10
    6aea:	b4 01       	movw	r22, r8
    6aec:	20 e8       	ldi	r18, 0x80	; 128
    6aee:	31 e5       	ldi	r19, 0x51	; 81
    6af0:	41 e0       	ldi	r20, 0x01	; 1
    6af2:	50 e0       	ldi	r21, 0x00	; 0
    6af4:	0e 94 9c e2 	call	0x1c538	; 0x1c538 <__udivmodsi4>
    6af8:	49 01       	movw	r8, r18
    6afa:	5a 01       	movw	r10, r20
    6afc:	ca 01       	movw	r24, r20
    6afe:	b9 01       	movw	r22, r18
    6b00:	6c 5f       	subi	r22, 0xFC	; 252
    6b02:	7f 4f       	sbci	r23, 0xFF	; 255
    6b04:	8f 4f       	sbci	r24, 0xFF	; 255
    6b06:	9f 4f       	sbci	r25, 0xFF	; 255
    6b08:	27 e0       	ldi	r18, 0x07	; 7
    6b0a:	30 e0       	ldi	r19, 0x00	; 0
    6b0c:	40 e0       	ldi	r20, 0x00	; 0
    6b0e:	50 e0       	ldi	r21, 0x00	; 0
    6b10:	0e 94 be e2 	call	0x1c57c	; 0x1c57c <__divmodsi4>
    6b14:	7d 87       	std	Y+13, r23	; 0x0d
    6b16:	6c 87       	std	Y+12, r22	; 0x0c
    6b18:	02 eb       	ldi	r16, 0xB2	; 178
    6b1a:	17 e0       	ldi	r17, 0x07	; 7
    6b1c:	c8 01       	movw	r24, r16
    6b1e:	31 df       	rcall	.-414    	; 0x6982 <IS_Leap>
    6b20:	00 97       	sbiw	r24, 0x00	; 0
    6b22:	19 f4       	brne	.+6      	; 0x6b2a <time_to_tm+0x11c>
    6b24:	4d e6       	ldi	r20, 0x6D	; 109
    6b26:	51 e0       	ldi	r21, 0x01	; 1
    6b28:	02 c0       	rjmp	.+4      	; 0x6b2e <time_to_tm+0x120>
    6b2a:	4e e6       	ldi	r20, 0x6E	; 110
    6b2c:	51 e0       	ldi	r21, 0x01	; 1
    6b2e:	05 2e       	mov	r0, r21
    6b30:	00 0c       	add	r0, r0
    6b32:	66 0b       	sbc	r22, r22
    6b34:	77 0b       	sbc	r23, r23
    6b36:	84 16       	cp	r8, r20
    6b38:	95 06       	cpc	r9, r21
    6b3a:	a6 06       	cpc	r10, r22
    6b3c:	b7 06       	cpc	r11, r23
    6b3e:	3c f0       	brlt	.+14     	; 0x6b4e <time_to_tm+0x140>
    6b40:	0f 5f       	subi	r16, 0xFF	; 255
    6b42:	1f 4f       	sbci	r17, 0xFF	; 255
    6b44:	84 1a       	sub	r8, r20
    6b46:	95 0a       	sbc	r9, r21
    6b48:	a6 0a       	sbc	r10, r22
    6b4a:	b7 0a       	sbc	r11, r23
    6b4c:	e7 cf       	rjmp	.-50     	; 0x6b1c <time_to_tm+0x10e>
    6b4e:	0c 56       	subi	r16, 0x6C	; 108
    6b50:	17 40       	sbci	r17, 0x07	; 7
    6b52:	1b 87       	std	Y+11, r17	; 0x0b
    6b54:	0a 87       	std	Y+10, r16	; 0x0a
    6b56:	9f 86       	std	Y+15, r9	; 0x0f
    6b58:	8e 86       	std	Y+14, r8	; 0x0e
    6b5a:	e8 e8       	ldi	r30, 0x88	; 136
    6b5c:	f3 e0       	ldi	r31, 0x03	; 3
    6b5e:	20 e0       	ldi	r18, 0x00	; 0
    6b60:	30 e0       	ldi	r19, 0x00	; 0
    6b62:	18 14       	cp	r1, r8
    6b64:	19 04       	cpc	r1, r9
    6b66:	1a 04       	cpc	r1, r10
    6b68:	1b 04       	cpc	r1, r11
    6b6a:	e4 f4       	brge	.+56     	; 0x6ba4 <time_to_tm+0x196>
    6b6c:	2c 30       	cpi	r18, 0x0C	; 12
    6b6e:	31 05       	cpc	r19, r1
    6b70:	c9 f0       	breq	.+50     	; 0x6ba4 <time_to_tm+0x196>
    6b72:	41 91       	ld	r20, Z+
    6b74:	51 91       	ld	r21, Z+
    6b76:	21 30       	cpi	r18, 0x01	; 1
    6b78:	31 05       	cpc	r19, r1
    6b7a:	21 f4       	brne	.+8      	; 0x6b84 <time_to_tm+0x176>
    6b7c:	00 97       	sbiw	r24, 0x00	; 0
    6b7e:	11 f0       	breq	.+4      	; 0x6b84 <time_to_tm+0x176>
    6b80:	4f 5f       	subi	r20, 0xFF	; 255
    6b82:	5f 4f       	sbci	r21, 0xFF	; 255
    6b84:	05 2e       	mov	r0, r21
    6b86:	00 0c       	add	r0, r0
    6b88:	66 0b       	sbc	r22, r22
    6b8a:	77 0b       	sbc	r23, r23
    6b8c:	84 16       	cp	r8, r20
    6b8e:	95 06       	cpc	r9, r21
    6b90:	a6 06       	cpc	r10, r22
    6b92:	b7 06       	cpc	r11, r23
    6b94:	3c f0       	brlt	.+14     	; 0x6ba4 <time_to_tm+0x196>
    6b96:	84 1a       	sub	r8, r20
    6b98:	95 0a       	sbc	r9, r21
    6b9a:	a6 0a       	sbc	r10, r22
    6b9c:	b7 0a       	sbc	r11, r23
    6b9e:	2f 5f       	subi	r18, 0xFF	; 255
    6ba0:	3f 4f       	sbci	r19, 0xFF	; 255
    6ba2:	df cf       	rjmp	.-66     	; 0x6b62 <time_to_tm+0x154>
    6ba4:	39 87       	std	Y+9, r19	; 0x09
    6ba6:	28 87       	std	Y+8, r18	; 0x08
    6ba8:	af ef       	ldi	r26, 0xFF	; 255
    6baa:	8a 1a       	sub	r8, r26
    6bac:	9a 0a       	sbc	r9, r26
    6bae:	9f 82       	std	Y+7, r9	; 0x07
    6bb0:	8e 82       	std	Y+6, r8	; 0x06
    6bb2:	b6 01       	movw	r22, r12
    6bb4:	c7 01       	movw	r24, r14
    6bb6:	04 c0       	rjmp	.+8      	; 0x6bc0 <time_to_tm+0x1b2>
    6bb8:	6f ef       	ldi	r22, 0xFF	; 255
    6bba:	7f ef       	ldi	r23, 0xFF	; 255
    6bbc:	8f ef       	ldi	r24, 0xFF	; 255
    6bbe:	9f ef       	ldi	r25, 0xFF	; 255
    6bc0:	cd b7       	in	r28, 0x3d	; 61
    6bc2:	de b7       	in	r29, 0x3e	; 62
    6bc4:	e0 e1       	ldi	r30, 0x10	; 16
    6bc6:	0c 94 27 e3 	jmp	0x1c64e	; 0x1c64e <__epilogue_restores__+0x4>

00006bca <gmtime_r>:
    6bca:	0f 93       	push	r16
    6bcc:	1f 93       	push	r17
    6bce:	cf 93       	push	r28
    6bd0:	df 93       	push	r29
    6bd2:	eb 01       	movw	r28, r22
    6bd4:	fc 01       	movw	r30, r24
    6bd6:	60 81       	ld	r22, Z
    6bd8:	71 81       	ldd	r23, Z+1	; 0x01
    6bda:	82 81       	ldd	r24, Z+2	; 0x02
    6bdc:	93 81       	ldd	r25, Z+3	; 0x03
    6bde:	8e 01       	movw	r16, r28
    6be0:	20 e0       	ldi	r18, 0x00	; 0
    6be2:	30 e0       	ldi	r19, 0x00	; 0
    6be4:	a9 01       	movw	r20, r18
    6be6:	13 df       	rcall	.-474    	; 0x6a0e <time_to_tm>
    6be8:	ce 01       	movw	r24, r28
    6bea:	df 91       	pop	r29
    6bec:	cf 91       	pop	r28
    6bee:	1f 91       	pop	r17
    6bf0:	0f 91       	pop	r16
    6bf2:	08 95       	ret

00006bf4 <gmtime>:
    6bf4:	22 ed       	ldi	r18, 0xD2	; 210
    6bf6:	37 e1       	ldi	r19, 0x17	; 23
    6bf8:	30 93 e9 17 	sts	0x17E9, r19	; 0x8017e9 <p.3677+0x1>
    6bfc:	20 93 e8 17 	sts	0x17E8, r18	; 0x8017e8 <p.3677>
    6c00:	b9 01       	movw	r22, r18
    6c02:	e3 df       	rcall	.-58     	; 0x6bca <gmtime_r>
    6c04:	82 ed       	ldi	r24, 0xD2	; 210
    6c06:	97 e1       	ldi	r25, 0x17	; 23
    6c08:	08 95       	ret

00006c0a <gettimezone>:
    6c0a:	ec e7       	ldi	r30, 0x7C	; 124
    6c0c:	fa e1       	ldi	r31, 0x1A	; 26
    6c0e:	20 81       	ld	r18, Z
    6c10:	31 81       	ldd	r19, Z+1	; 0x01
    6c12:	dc 01       	movw	r26, r24
    6c14:	2d 93       	st	X+, r18
    6c16:	3c 93       	st	X, r19
    6c18:	22 81       	ldd	r18, Z+2	; 0x02
    6c1a:	33 81       	ldd	r19, Z+3	; 0x03
    6c1c:	fc 01       	movw	r30, r24
    6c1e:	33 83       	std	Z+3, r19	; 0x03
    6c20:	22 83       	std	Z+2, r18	; 0x02
    6c22:	80 e0       	ldi	r24, 0x00	; 0
    6c24:	90 e0       	ldi	r25, 0x00	; 0
    6c26:	08 95       	ret

00006c28 <settimezone>:
    6c28:	cf 93       	push	r28
    6c2a:	df 93       	push	r29
    6c2c:	ec 01       	movw	r28, r24
    6c2e:	28 81       	ld	r18, Y
    6c30:	39 81       	ldd	r19, Y+1	; 0x01
    6c32:	ec e7       	ldi	r30, 0x7C	; 124
    6c34:	fa e1       	ldi	r31, 0x1A	; 26
    6c36:	31 83       	std	Z+1, r19	; 0x01
    6c38:	20 83       	st	Z, r18
    6c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    6c3c:	9b 81       	ldd	r25, Y+3	; 0x03
    6c3e:	93 83       	std	Z+3, r25	; 0x03
    6c40:	82 83       	std	Z+2, r24	; 0x02
    6c42:	80 e0       	ldi	r24, 0x00	; 0
    6c44:	90 e0       	ldi	r25, 0x00	; 0
    6c46:	df 91       	pop	r29
    6c48:	cf 91       	pop	r28
    6c4a:	08 95       	ret

00006c4c <gettimeofday>:
    6c4c:	a8 e0       	ldi	r26, 0x08	; 8
    6c4e:	b0 e0       	ldi	r27, 0x00	; 0
    6c50:	ec e2       	ldi	r30, 0x2C	; 44
    6c52:	f6 e3       	ldi	r31, 0x36	; 54
    6c54:	0c 94 15 e3 	jmp	0x1c62a	; 0x1c62a <__prologue_saves__+0x18>
    6c58:	8c 01       	movw	r16, r24
    6c5a:	7b 01       	movw	r14, r22
    6c5c:	be 01       	movw	r22, r28
    6c5e:	6f 5f       	subi	r22, 0xFF	; 255
    6c60:	7f 4f       	sbci	r23, 0xFF	; 255
    6c62:	80 e0       	ldi	r24, 0x00	; 0
    6c64:	90 e0       	ldi	r25, 0x00	; 0
    6c66:	dc db       	rcall	.-2120   	; 0x6420 <clock_gettime>
    6c68:	89 81       	ldd	r24, Y+1	; 0x01
    6c6a:	9a 81       	ldd	r25, Y+2	; 0x02
    6c6c:	ab 81       	ldd	r26, Y+3	; 0x03
    6c6e:	bc 81       	ldd	r27, Y+4	; 0x04
    6c70:	f8 01       	movw	r30, r16
    6c72:	80 83       	st	Z, r24
    6c74:	91 83       	std	Z+1, r25	; 0x01
    6c76:	a2 83       	std	Z+2, r26	; 0x02
    6c78:	b3 83       	std	Z+3, r27	; 0x03
    6c7a:	6d 81       	ldd	r22, Y+5	; 0x05
    6c7c:	7e 81       	ldd	r23, Y+6	; 0x06
    6c7e:	8f 81       	ldd	r24, Y+7	; 0x07
    6c80:	98 85       	ldd	r25, Y+8	; 0x08
    6c82:	28 ee       	ldi	r18, 0xE8	; 232
    6c84:	33 e0       	ldi	r19, 0x03	; 3
    6c86:	40 e0       	ldi	r20, 0x00	; 0
    6c88:	50 e0       	ldi	r21, 0x00	; 0
    6c8a:	0e 94 be e2 	call	0x1c57c	; 0x1c57c <__divmodsi4>
    6c8e:	f8 01       	movw	r30, r16
    6c90:	24 83       	std	Z+4, r18	; 0x04
    6c92:	35 83       	std	Z+5, r19	; 0x05
    6c94:	46 83       	std	Z+6, r20	; 0x06
    6c96:	57 83       	std	Z+7, r21	; 0x07
    6c98:	c7 01       	movw	r24, r14
    6c9a:	b7 df       	rcall	.-146    	; 0x6c0a <gettimezone>
    6c9c:	80 e0       	ldi	r24, 0x00	; 0
    6c9e:	90 e0       	ldi	r25, 0x00	; 0
    6ca0:	28 96       	adiw	r28, 0x08	; 8
    6ca2:	e6 e0       	ldi	r30, 0x06	; 6
    6ca4:	0c 94 31 e3 	jmp	0x1c662	; 0x1c662 <__epilogue_restores__+0x18>

00006ca8 <time>:
    6ca8:	cf 93       	push	r28
    6caa:	df 93       	push	r29
    6cac:	ec 01       	movw	r28, r24
    6cae:	64 eb       	ldi	r22, 0xB4	; 180
    6cb0:	77 e1       	ldi	r23, 0x17	; 23
    6cb2:	80 e0       	ldi	r24, 0x00	; 0
    6cb4:	90 e0       	ldi	r25, 0x00	; 0
    6cb6:	b4 db       	rcall	.-2200   	; 0x6420 <clock_gettime>
    6cb8:	20 97       	sbiw	r28, 0x00	; 0
    6cba:	61 f0       	breq	.+24     	; 0x6cd4 <time+0x2c>
    6cbc:	80 91 b4 17 	lds	r24, 0x17B4	; 0x8017b4 <ts.3755>
    6cc0:	90 91 b5 17 	lds	r25, 0x17B5	; 0x8017b5 <ts.3755+0x1>
    6cc4:	a0 91 b6 17 	lds	r26, 0x17B6	; 0x8017b6 <ts.3755+0x2>
    6cc8:	b0 91 b7 17 	lds	r27, 0x17B7	; 0x8017b7 <ts.3755+0x3>
    6ccc:	88 83       	st	Y, r24
    6cce:	99 83       	std	Y+1, r25	; 0x01
    6cd0:	aa 83       	std	Y+2, r26	; 0x02
    6cd2:	bb 83       	std	Y+3, r27	; 0x03
    6cd4:	60 91 b4 17 	lds	r22, 0x17B4	; 0x8017b4 <ts.3755>
    6cd8:	70 91 b5 17 	lds	r23, 0x17B5	; 0x8017b5 <ts.3755+0x1>
    6cdc:	80 91 b6 17 	lds	r24, 0x17B6	; 0x8017b6 <ts.3755+0x2>
    6ce0:	90 91 b7 17 	lds	r25, 0x17B7	; 0x8017b7 <ts.3755+0x3>
    6ce4:	df 91       	pop	r29
    6ce6:	cf 91       	pop	r28
    6ce8:	08 95       	ret

00006cea <is_dst>:
    6cea:	cf 92       	push	r12
    6cec:	df 92       	push	r13
    6cee:	ef 92       	push	r14
    6cf0:	ff 92       	push	r15
    6cf2:	6b 01       	movw	r12, r22
    6cf4:	7c 01       	movw	r14, r24
    6cf6:	05 d4       	rcall	.+2058   	; 0x7502 <set_dst>
    6cf8:	80 91 80 1a 	lds	r24, 0x1A80	; 0x801a80 <dst>
    6cfc:	90 91 81 1a 	lds	r25, 0x1A81	; 0x801a81 <dst+0x1>
    6d00:	a0 91 82 1a 	lds	r26, 0x1A82	; 0x801a82 <dst+0x2>
    6d04:	b0 91 83 1a 	lds	r27, 0x1A83	; 0x801a83 <dst+0x3>
    6d08:	c8 16       	cp	r12, r24
    6d0a:	d9 06       	cpc	r13, r25
    6d0c:	ea 06       	cpc	r14, r26
    6d0e:	fb 06       	cpc	r15, r27
    6d10:	88 f0       	brcs	.+34     	; 0x6d34 <is_dst+0x4a>
    6d12:	81 e0       	ldi	r24, 0x01	; 1
    6d14:	90 e0       	ldi	r25, 0x00	; 0
    6d16:	40 91 84 1a 	lds	r20, 0x1A84	; 0x801a84 <dst+0x4>
    6d1a:	50 91 85 1a 	lds	r21, 0x1A85	; 0x801a85 <dst+0x5>
    6d1e:	60 91 86 1a 	lds	r22, 0x1A86	; 0x801a86 <dst+0x6>
    6d22:	70 91 87 1a 	lds	r23, 0x1A87	; 0x801a87 <dst+0x7>
    6d26:	4c 15       	cp	r20, r12
    6d28:	5d 05       	cpc	r21, r13
    6d2a:	6e 05       	cpc	r22, r14
    6d2c:	7f 05       	cpc	r23, r15
    6d2e:	20 f4       	brcc	.+8      	; 0x6d38 <is_dst+0x4e>
    6d30:	80 e0       	ldi	r24, 0x00	; 0
    6d32:	02 c0       	rjmp	.+4      	; 0x6d38 <is_dst+0x4e>
    6d34:	80 e0       	ldi	r24, 0x00	; 0
    6d36:	90 e0       	ldi	r25, 0x00	; 0
    6d38:	ff 90       	pop	r15
    6d3a:	ef 90       	pop	r14
    6d3c:	df 90       	pop	r13
    6d3e:	cf 90       	pop	r12
    6d40:	08 95       	ret

00006d42 <localtime_r>:
    6d42:	4f 92       	push	r4
    6d44:	5f 92       	push	r5
    6d46:	6f 92       	push	r6
    6d48:	7f 92       	push	r7
    6d4a:	af 92       	push	r10
    6d4c:	bf 92       	push	r11
    6d4e:	cf 92       	push	r12
    6d50:	df 92       	push	r13
    6d52:	ef 92       	push	r14
    6d54:	ff 92       	push	r15
    6d56:	0f 93       	push	r16
    6d58:	1f 93       	push	r17
    6d5a:	cf 93       	push	r28
    6d5c:	df 93       	push	r29
    6d5e:	00 d0       	rcall	.+0      	; 0x6d60 <localtime_r+0x1e>
    6d60:	00 d0       	rcall	.+0      	; 0x6d62 <localtime_r+0x20>
    6d62:	cd b7       	in	r28, 0x3d	; 61
    6d64:	de b7       	in	r29, 0x3e	; 62
    6d66:	5b 01       	movw	r10, r22
    6d68:	fc 01       	movw	r30, r24
    6d6a:	40 80       	ld	r4, Z
    6d6c:	51 80       	ldd	r5, Z+1	; 0x01
    6d6e:	62 80       	ldd	r6, Z+2	; 0x02
    6d70:	73 80       	ldd	r7, Z+3	; 0x03
    6d72:	ce 01       	movw	r24, r28
    6d74:	01 96       	adiw	r24, 0x01	; 1
    6d76:	49 df       	rcall	.-366    	; 0x6c0a <gettimezone>
    6d78:	a9 81       	ldd	r26, Y+1	; 0x01
    6d7a:	ba 81       	ldd	r27, Y+2	; 0x02
    6d7c:	2c e3       	ldi	r18, 0x3C	; 60
    6d7e:	30 e0       	ldi	r19, 0x00	; 0
    6d80:	0e 94 e3 e2 	call	0x1c5c6	; 0x1c5c6 <__usmulhisi3>
    6d84:	6b 01       	movw	r12, r22
    6d86:	7c 01       	movw	r14, r24
    6d88:	c3 01       	movw	r24, r6
    6d8a:	b2 01       	movw	r22, r4
    6d8c:	6c 19       	sub	r22, r12
    6d8e:	7d 09       	sbc	r23, r13
    6d90:	8e 09       	sbc	r24, r14
    6d92:	9f 09       	sbc	r25, r15
    6d94:	aa df       	rcall	.-172    	; 0x6cea <is_dst>
    6d96:	89 2b       	or	r24, r25
    6d98:	31 f0       	breq	.+12     	; 0x6da6 <localtime_r+0x64>
    6d9a:	f0 e1       	ldi	r31, 0x10	; 16
    6d9c:	cf 1a       	sub	r12, r31
    6d9e:	fe e0       	ldi	r31, 0x0E	; 14
    6da0:	df 0a       	sbc	r13, r31
    6da2:	e1 08       	sbc	r14, r1
    6da4:	f1 08       	sbc	r15, r1
    6da6:	85 01       	movw	r16, r10
    6da8:	a7 01       	movw	r20, r14
    6daa:	96 01       	movw	r18, r12
    6dac:	c3 01       	movw	r24, r6
    6dae:	b2 01       	movw	r22, r4
    6db0:	2e de       	rcall	.-932    	; 0x6a0e <time_to_tm>
    6db2:	c5 01       	movw	r24, r10
    6db4:	0f 90       	pop	r0
    6db6:	0f 90       	pop	r0
    6db8:	0f 90       	pop	r0
    6dba:	0f 90       	pop	r0
    6dbc:	df 91       	pop	r29
    6dbe:	cf 91       	pop	r28
    6dc0:	1f 91       	pop	r17
    6dc2:	0f 91       	pop	r16
    6dc4:	ff 90       	pop	r15
    6dc6:	ef 90       	pop	r14
    6dc8:	df 90       	pop	r13
    6dca:	cf 90       	pop	r12
    6dcc:	bf 90       	pop	r11
    6dce:	af 90       	pop	r10
    6dd0:	7f 90       	pop	r7
    6dd2:	6f 90       	pop	r6
    6dd4:	5f 90       	pop	r5
    6dd6:	4f 90       	pop	r4
    6dd8:	08 95       	ret

00006dda <localtime>:
    6dda:	6c eb       	ldi	r22, 0xBC	; 188
    6ddc:	77 e1       	ldi	r23, 0x17	; 23
    6dde:	b1 cf       	rjmp	.-158    	; 0x6d42 <localtime_r>
    6de0:	08 95       	ret

00006de2 <normalize>:
    6de2:	aa e0       	ldi	r26, 0x0A	; 10
    6de4:	b0 e0       	ldi	r27, 0x00	; 0
    6de6:	e7 ef       	ldi	r30, 0xF7	; 247
    6de8:	f6 e3       	ldi	r31, 0x36	; 54
    6dea:	0c 94 09 e3 	jmp	0x1c612	; 0x1c612 <__prologue_saves__>
    6dee:	7c 01       	movw	r14, r24
    6df0:	7a 87       	std	Y+10, r23	; 0x0a
    6df2:	69 87       	std	Y+9, r22	; 0x09
    6df4:	f7 01       	movw	r30, r14
    6df6:	80 81       	ld	r24, Z
    6df8:	91 81       	ldd	r25, Z+1	; 0x01
    6dfa:	8c 33       	cpi	r24, 0x3C	; 60
    6dfc:	91 05       	cpc	r25, r1
    6dfe:	5c f0       	brlt	.+22     	; 0x6e16 <normalize+0x34>
    6e00:	f7 01       	movw	r30, r14
    6e02:	22 81       	ldd	r18, Z+2	; 0x02
    6e04:	33 81       	ldd	r19, Z+3	; 0x03
    6e06:	2f 5f       	subi	r18, 0xFF	; 255
    6e08:	3f 4f       	sbci	r19, 0xFF	; 255
    6e0a:	33 83       	std	Z+3, r19	; 0x03
    6e0c:	22 83       	std	Z+2, r18	; 0x02
    6e0e:	cc 97       	sbiw	r24, 0x3c	; 60
    6e10:	91 83       	std	Z+1, r25	; 0x01
    6e12:	80 83       	st	Z, r24
    6e14:	ef cf       	rjmp	.-34     	; 0x6df4 <normalize+0x12>
    6e16:	f7 01       	movw	r30, r14
    6e18:	01 90       	ld	r0, Z+
    6e1a:	f0 81       	ld	r31, Z
    6e1c:	e0 2d       	mov	r30, r0
    6e1e:	fe 83       	std	Y+6, r31	; 0x06
    6e20:	ed 83       	std	Y+5, r30	; 0x05
    6e22:	f7 ff       	sbrs	r31, 7
    6e24:	0d c0       	rjmp	.+26     	; 0x6e40 <normalize+0x5e>
    6e26:	f7 01       	movw	r30, r14
    6e28:	82 81       	ldd	r24, Z+2	; 0x02
    6e2a:	93 81       	ldd	r25, Z+3	; 0x03
    6e2c:	01 97       	sbiw	r24, 0x01	; 1
    6e2e:	93 83       	std	Z+3, r25	; 0x03
    6e30:	82 83       	std	Z+2, r24	; 0x02
    6e32:	6d 81       	ldd	r22, Y+5	; 0x05
    6e34:	7e 81       	ldd	r23, Y+6	; 0x06
    6e36:	64 5c       	subi	r22, 0xC4	; 196
    6e38:	7f 4f       	sbci	r23, 0xFF	; 255
    6e3a:	71 83       	std	Z+1, r23	; 0x01
    6e3c:	60 83       	st	Z, r22
    6e3e:	eb cf       	rjmp	.-42     	; 0x6e16 <normalize+0x34>
    6e40:	f7 01       	movw	r30, r14
    6e42:	82 81       	ldd	r24, Z+2	; 0x02
    6e44:	93 81       	ldd	r25, Z+3	; 0x03
    6e46:	8c 33       	cpi	r24, 0x3C	; 60
    6e48:	91 05       	cpc	r25, r1
    6e4a:	5c f0       	brlt	.+22     	; 0x6e62 <normalize+0x80>
    6e4c:	f7 01       	movw	r30, r14
    6e4e:	24 81       	ldd	r18, Z+4	; 0x04
    6e50:	35 81       	ldd	r19, Z+5	; 0x05
    6e52:	2f 5f       	subi	r18, 0xFF	; 255
    6e54:	3f 4f       	sbci	r19, 0xFF	; 255
    6e56:	35 83       	std	Z+5, r19	; 0x05
    6e58:	24 83       	std	Z+4, r18	; 0x04
    6e5a:	cc 97       	sbiw	r24, 0x3c	; 60
    6e5c:	93 83       	std	Z+3, r25	; 0x03
    6e5e:	82 83       	std	Z+2, r24	; 0x02
    6e60:	ef cf       	rjmp	.-34     	; 0x6e40 <normalize+0x5e>
    6e62:	f7 01       	movw	r30, r14
    6e64:	22 80       	ldd	r2, Z+2	; 0x02
    6e66:	33 80       	ldd	r3, Z+3	; 0x03
    6e68:	37 fe       	sbrs	r3, 7
    6e6a:	0d c0       	rjmp	.+26     	; 0x6e86 <normalize+0xa4>
    6e6c:	f7 01       	movw	r30, r14
    6e6e:	84 81       	ldd	r24, Z+4	; 0x04
    6e70:	95 81       	ldd	r25, Z+5	; 0x05
    6e72:	01 97       	sbiw	r24, 0x01	; 1
    6e74:	95 83       	std	Z+5, r25	; 0x05
    6e76:	84 83       	std	Z+4, r24	; 0x04
    6e78:	fc e3       	ldi	r31, 0x3C	; 60
    6e7a:	2f 0e       	add	r2, r31
    6e7c:	31 1c       	adc	r3, r1
    6e7e:	f7 01       	movw	r30, r14
    6e80:	33 82       	std	Z+3, r3	; 0x03
    6e82:	22 82       	std	Z+2, r2	; 0x02
    6e84:	ee cf       	rjmp	.-36     	; 0x6e62 <normalize+0x80>
    6e86:	f7 01       	movw	r30, r14
    6e88:	84 81       	ldd	r24, Z+4	; 0x04
    6e8a:	95 81       	ldd	r25, Z+5	; 0x05
    6e8c:	88 31       	cpi	r24, 0x18	; 24
    6e8e:	91 05       	cpc	r25, r1
    6e90:	5c f0       	brlt	.+22     	; 0x6ea8 <normalize+0xc6>
    6e92:	f7 01       	movw	r30, r14
    6e94:	26 81       	ldd	r18, Z+6	; 0x06
    6e96:	37 81       	ldd	r19, Z+7	; 0x07
    6e98:	2f 5f       	subi	r18, 0xFF	; 255
    6e9a:	3f 4f       	sbci	r19, 0xFF	; 255
    6e9c:	37 83       	std	Z+7, r19	; 0x07
    6e9e:	26 83       	std	Z+6, r18	; 0x06
    6ea0:	48 97       	sbiw	r24, 0x18	; 24
    6ea2:	95 83       	std	Z+5, r25	; 0x05
    6ea4:	84 83       	std	Z+4, r24	; 0x04
    6ea6:	ef cf       	rjmp	.-34     	; 0x6e86 <normalize+0xa4>
    6ea8:	f7 01       	movw	r30, r14
    6eaa:	04 81       	ldd	r16, Z+4	; 0x04
    6eac:	15 81       	ldd	r17, Z+5	; 0x05
    6eae:	17 ff       	sbrs	r17, 7
    6eb0:	0b c0       	rjmp	.+22     	; 0x6ec8 <normalize+0xe6>
    6eb2:	f7 01       	movw	r30, r14
    6eb4:	86 81       	ldd	r24, Z+6	; 0x06
    6eb6:	97 81       	ldd	r25, Z+7	; 0x07
    6eb8:	01 97       	sbiw	r24, 0x01	; 1
    6eba:	97 83       	std	Z+7, r25	; 0x07
    6ebc:	86 83       	std	Z+6, r24	; 0x06
    6ebe:	08 5e       	subi	r16, 0xE8	; 232
    6ec0:	1f 4f       	sbci	r17, 0xFF	; 255
    6ec2:	15 83       	std	Z+5, r17	; 0x05
    6ec4:	04 83       	std	Z+4, r16	; 0x04
    6ec6:	f0 cf       	rjmp	.-32     	; 0x6ea8 <normalize+0xc6>
    6ec8:	f7 01       	movw	r30, r14
    6eca:	80 85       	ldd	r24, Z+8	; 0x08
    6ecc:	91 85       	ldd	r25, Z+9	; 0x09
    6ece:	8c 30       	cpi	r24, 0x0C	; 12
    6ed0:	91 05       	cpc	r25, r1
    6ed2:	5c f0       	brlt	.+22     	; 0x6eea <normalize+0x108>
    6ed4:	f7 01       	movw	r30, r14
    6ed6:	22 85       	ldd	r18, Z+10	; 0x0a
    6ed8:	33 85       	ldd	r19, Z+11	; 0x0b
    6eda:	2f 5f       	subi	r18, 0xFF	; 255
    6edc:	3f 4f       	sbci	r19, 0xFF	; 255
    6ede:	33 87       	std	Z+11, r19	; 0x0b
    6ee0:	22 87       	std	Z+10, r18	; 0x0a
    6ee2:	0c 97       	sbiw	r24, 0x0c	; 12
    6ee4:	91 87       	std	Z+9, r25	; 0x09
    6ee6:	80 87       	std	Z+8, r24	; 0x08
    6ee8:	ef cf       	rjmp	.-34     	; 0x6ec8 <normalize+0xe6>
    6eea:	f7 01       	movw	r30, r14
    6eec:	80 85       	ldd	r24, Z+8	; 0x08
    6eee:	91 85       	ldd	r25, Z+9	; 0x09
    6ef0:	97 ff       	sbrs	r25, 7
    6ef2:	2d c0       	rjmp	.+90     	; 0x6f4e <normalize+0x16c>
    6ef4:	f7 01       	movw	r30, r14
    6ef6:	22 85       	ldd	r18, Z+10	; 0x0a
    6ef8:	33 85       	ldd	r19, Z+11	; 0x0b
    6efa:	21 50       	subi	r18, 0x01	; 1
    6efc:	31 09       	sbc	r19, r1
    6efe:	33 87       	std	Z+11, r19	; 0x0b
    6f00:	22 87       	std	Z+10, r18	; 0x0a
    6f02:	0c 96       	adiw	r24, 0x0c	; 12
    6f04:	91 87       	std	Z+9, r25	; 0x09
    6f06:	80 87       	std	Z+8, r24	; 0x08
    6f08:	f0 cf       	rjmp	.-32     	; 0x6eea <normalize+0x108>
    6f0a:	f7 01       	movw	r30, r14
    6f0c:	c6 80       	ldd	r12, Z+6	; 0x06
    6f0e:	d7 80       	ldd	r13, Z+7	; 0x07
    6f10:	a0 84       	ldd	r10, Z+8	; 0x08
    6f12:	b1 84       	ldd	r11, Z+9	; 0x09
    6f14:	b4 01       	movw	r22, r8
    6f16:	c5 01       	movw	r24, r10
    6f18:	59 dd       	rcall	.-1358   	; 0x69cc <Days_Per_Month>
    6f1a:	8c 15       	cp	r24, r12
    6f1c:	9d 05       	cpc	r25, r13
    6f1e:	84 f5       	brge	.+96     	; 0x6f80 <normalize+0x19e>
    6f20:	c8 1a       	sub	r12, r24
    6f22:	d9 0a       	sbc	r13, r25
    6f24:	f7 01       	movw	r30, r14
    6f26:	d7 82       	std	Z+7, r13	; 0x07
    6f28:	c6 82       	std	Z+6, r12	; 0x06
    6f2a:	c5 01       	movw	r24, r10
    6f2c:	01 96       	adiw	r24, 0x01	; 1
    6f2e:	91 87       	std	Z+9, r25	; 0x09
    6f30:	80 87       	std	Z+8, r24	; 0x08
    6f32:	0c 97       	sbiw	r24, 0x0c	; 12
    6f34:	54 f3       	brlt	.-44     	; 0x6f0a <normalize+0x128>
    6f36:	fb e0       	ldi	r31, 0x0B	; 11
    6f38:	af 1a       	sub	r10, r31
    6f3a:	b1 08       	sbc	r11, r1
    6f3c:	f7 01       	movw	r30, r14
    6f3e:	b1 86       	std	Z+9, r11	; 0x09
    6f40:	a0 86       	std	Z+8, r10	; 0x08
    6f42:	ff ef       	ldi	r31, 0xFF	; 255
    6f44:	8f 1a       	sub	r8, r31
    6f46:	9f 0a       	sbc	r9, r31
    6f48:	f7 01       	movw	r30, r14
    6f4a:	93 86       	std	Z+11, r9	; 0x0b
    6f4c:	82 86       	std	Z+10, r8	; 0x0a
    6f4e:	f7 01       	movw	r30, r14
    6f50:	82 84       	ldd	r8, Z+10	; 0x0a
    6f52:	93 84       	ldd	r9, Z+11	; 0x0b
    6f54:	da cf       	rjmp	.-76     	; 0x6f0a <normalize+0x128>
    6f56:	f7 01       	movw	r30, r14
    6f58:	80 85       	ldd	r24, Z+8	; 0x08
    6f5a:	91 85       	ldd	r25, Z+9	; 0x09
    6f5c:	9c 01       	movw	r18, r24
    6f5e:	21 50       	subi	r18, 0x01	; 1
    6f60:	31 09       	sbc	r19, r1
    6f62:	37 fd       	sbrc	r19, 7
    6f64:	16 c0       	rjmp	.+44     	; 0x6f92 <normalize+0x1b0>
    6f66:	31 87       	std	Z+9, r19	; 0x09
    6f68:	20 87       	std	Z+8, r18	; 0x08
    6f6a:	f7 01       	movw	r30, r14
    6f6c:	62 85       	ldd	r22, Z+10	; 0x0a
    6f6e:	73 85       	ldd	r23, Z+11	; 0x0b
    6f70:	80 85       	ldd	r24, Z+8	; 0x08
    6f72:	91 85       	ldd	r25, Z+9	; 0x09
    6f74:	2b dd       	rcall	.-1450   	; 0x69cc <Days_Per_Month>
    6f76:	88 0d       	add	r24, r8
    6f78:	99 1d       	adc	r25, r9
    6f7a:	f7 01       	movw	r30, r14
    6f7c:	97 83       	std	Z+7, r25	; 0x07
    6f7e:	86 83       	std	Z+6, r24	; 0x06
    6f80:	f7 01       	movw	r30, r14
    6f82:	86 80       	ldd	r8, Z+6	; 0x06
    6f84:	97 80       	ldd	r9, Z+7	; 0x07
    6f86:	a2 84       	ldd	r10, Z+10	; 0x0a
    6f88:	b3 84       	ldd	r11, Z+11	; 0x0b
    6f8a:	18 14       	cp	r1, r8
    6f8c:	19 04       	cpc	r1, r9
    6f8e:	1c f7       	brge	.-58     	; 0x6f56 <normalize+0x174>
    6f90:	0b c0       	rjmp	.+22     	; 0x6fa8 <normalize+0x1c6>
    6f92:	0b 96       	adiw	r24, 0x0b	; 11
    6f94:	f7 01       	movw	r30, r14
    6f96:	91 87       	std	Z+9, r25	; 0x09
    6f98:	80 87       	std	Z+8, r24	; 0x08
    6f9a:	f1 e0       	ldi	r31, 0x01	; 1
    6f9c:	af 1a       	sub	r10, r31
    6f9e:	b1 08       	sbc	r11, r1
    6fa0:	f7 01       	movw	r30, r14
    6fa2:	b3 86       	std	Z+11, r11	; 0x0b
    6fa4:	a2 86       	std	Z+10, r10	; 0x0a
    6fa6:	e1 cf       	rjmp	.-62     	; 0x6f6a <normalize+0x188>
    6fa8:	a5 01       	movw	r20, r10
    6faa:	44 59       	subi	r20, 0x94	; 148
    6fac:	58 4f       	sbci	r21, 0xF8	; 248
    6fae:	58 87       	std	Y+8, r21	; 0x08
    6fb0:	4f 83       	std	Y+7, r20	; 0x07
    6fb2:	35 01       	movw	r6, r10
    6fb4:	56 e4       	ldi	r21, 0x46	; 70
    6fb6:	65 1a       	sub	r6, r21
    6fb8:	71 08       	sbc	r7, r1
    6fba:	89 e8       	ldi	r24, 0x89	; 137
    6fbc:	68 16       	cp	r6, r24
    6fbe:	71 04       	cpc	r7, r1
    6fc0:	08 f0       	brcs	.+2      	; 0x6fc4 <normalize+0x1e2>
    6fc2:	9b c0       	rjmp	.+310    	; 0x70fa <normalize+0x318>
    6fc4:	c0 84       	ldd	r12, Z+8	; 0x08
    6fc6:	d1 84       	ldd	r13, Z+9	; 0x09
    6fc8:	9c e0       	ldi	r25, 0x0C	; 12
    6fca:	c9 16       	cp	r12, r25
    6fcc:	d1 04       	cpc	r13, r1
    6fce:	08 f0       	brcs	.+2      	; 0x6fd2 <normalize+0x1f0>
    6fd0:	94 c0       	rjmp	.+296    	; 0x70fa <normalize+0x318>
    6fd2:	24 01       	movw	r4, r8
    6fd4:	e1 e0       	ldi	r30, 0x01	; 1
    6fd6:	4e 1a       	sub	r4, r30
    6fd8:	51 08       	sbc	r5, r1
    6fda:	6f 81       	ldd	r22, Y+7	; 0x07
    6fdc:	78 85       	ldd	r23, Y+8	; 0x08
    6fde:	c6 01       	movw	r24, r12
    6fe0:	f5 dc       	rcall	.-1558   	; 0x69cc <Days_Per_Month>
    6fe2:	48 16       	cp	r4, r24
    6fe4:	59 06       	cpc	r5, r25
    6fe6:	0c f0       	brlt	.+2      	; 0x6fea <normalize+0x208>
    6fe8:	88 c0       	rjmp	.+272    	; 0x70fa <normalize+0x318>
    6fea:	08 31       	cpi	r16, 0x18	; 24
    6fec:	11 05       	cpc	r17, r1
    6fee:	0c f0       	brlt	.+2      	; 0x6ff2 <normalize+0x210>
    6ff0:	84 c0       	rjmp	.+264    	; 0x70fa <normalize+0x318>
    6ff2:	fc e3       	ldi	r31, 0x3C	; 60
    6ff4:	2f 16       	cp	r2, r31
    6ff6:	31 04       	cpc	r3, r1
    6ff8:	0c f0       	brlt	.+2      	; 0x6ffc <normalize+0x21a>
    6ffa:	7f c0       	rjmp	.+254    	; 0x70fa <normalize+0x318>
    6ffc:	4d 81       	ldd	r20, Y+5	; 0x05
    6ffe:	5e 81       	ldd	r21, Y+6	; 0x06
    7000:	4c 33       	cpi	r20, 0x3C	; 60
    7002:	51 05       	cpc	r21, r1
    7004:	0c f0       	brlt	.+2      	; 0x7008 <normalize+0x226>
    7006:	79 c0       	rjmp	.+242    	; 0x70fa <normalize+0x318>
    7008:	2d e6       	ldi	r18, 0x6D	; 109
    700a:	31 e0       	ldi	r19, 0x01	; 1
    700c:	d3 01       	movw	r26, r6
    700e:	0e 94 e3 e2 	call	0x1c5c6	; 0x1c5c6 <__usmulhisi3>
    7012:	f6 01       	movw	r30, r12
    7014:	ee 0f       	add	r30, r30
    7016:	ff 1f       	adc	r31, r31
    7018:	e0 56       	subi	r30, 0x60	; 96
    701a:	fc 4f       	sbci	r31, 0xFC	; 252
    701c:	20 81       	ld	r18, Z
    701e:	31 81       	ldd	r19, Z+1	; 0x01
    7020:	dc 01       	movw	r26, r24
    7022:	cb 01       	movw	r24, r22
    7024:	82 0f       	add	r24, r18
    7026:	93 1f       	adc	r25, r19
    7028:	a1 1d       	adc	r26, r1
    702a:	b1 1d       	adc	r27, r1
    702c:	05 2c       	mov	r0, r5
    702e:	00 0c       	add	r0, r0
    7030:	66 08       	sbc	r6, r6
    7032:	77 08       	sbc	r7, r7
    7034:	48 0e       	add	r4, r24
    7036:	59 1e       	adc	r5, r25
    7038:	6a 1e       	adc	r6, r26
    703a:	7b 1e       	adc	r7, r27
    703c:	1a 14       	cp	r1, r10
    703e:	1b 04       	cpc	r1, r11
    7040:	1c f4       	brge	.+6      	; 0x7048 <normalize+0x266>
    7042:	51 e0       	ldi	r21, 0x01	; 1
    7044:	a5 1a       	sub	r10, r21
    7046:	b1 08       	sbc	r11, r1
    7048:	45 01       	movw	r8, r10
    704a:	95 94       	asr	r9
    704c:	87 94       	ror	r8
    704e:	95 94       	asr	r9
    7050:	87 94       	ror	r8
    7052:	88 ec       	ldi	r24, 0xC8	; 200
    7054:	a8 16       	cp	r10, r24
    7056:	b1 04       	cpc	r11, r1
    7058:	1c f0       	brlt	.+6      	; 0x7060 <normalize+0x27e>
    705a:	91 e0       	ldi	r25, 0x01	; 1
    705c:	89 1a       	sub	r8, r25
    705e:	91 08       	sbc	r9, r1
    7060:	09 2c       	mov	r0, r9
    7062:	00 0c       	add	r0, r0
    7064:	aa 08       	sbc	r10, r10
    7066:	bb 08       	sbc	r11, r11
    7068:	84 0c       	add	r8, r4
    706a:	95 1c       	adc	r9, r5
    706c:	a6 1c       	adc	r10, r6
    706e:	b7 1c       	adc	r11, r7
    7070:	24 01       	movw	r4, r8
    7072:	35 01       	movw	r6, r10
    7074:	e1 e1       	ldi	r30, 0x11	; 17
    7076:	4e 1a       	sub	r4, r30
    7078:	51 08       	sbc	r5, r1
    707a:	61 08       	sbc	r6, r1
    707c:	71 08       	sbc	r7, r1
    707e:	f2 e0       	ldi	r31, 0x02	; 2
    7080:	cf 16       	cp	r12, r31
    7082:	d1 04       	cpc	r13, r1
    7084:	64 f0       	brlt	.+24     	; 0x709e <normalize+0x2bc>
    7086:	8f 81       	ldd	r24, Y+7	; 0x07
    7088:	98 85       	ldd	r25, Y+8	; 0x08
    708a:	7b dc       	rcall	.-1802   	; 0x6982 <IS_Leap>
    708c:	89 2b       	or	r24, r25
    708e:	39 f0       	breq	.+14     	; 0x709e <normalize+0x2bc>
    7090:	24 01       	movw	r4, r8
    7092:	35 01       	movw	r6, r10
    7094:	40 e1       	ldi	r20, 0x10	; 16
    7096:	44 1a       	sub	r4, r20
    7098:	51 08       	sbc	r5, r1
    709a:	61 08       	sbc	r6, r1
    709c:	71 08       	sbc	r7, r1
    709e:	a8 e1       	ldi	r26, 0x18	; 24
    70a0:	b0 e0       	ldi	r27, 0x00	; 0
    70a2:	a3 01       	movw	r20, r6
    70a4:	92 01       	movw	r18, r4
    70a6:	0e 94 e9 e2 	call	0x1c5d2	; 0x1c5d2 <__muluhisi3>
    70aa:	01 2e       	mov	r0, r17
    70ac:	00 0c       	add	r0, r0
    70ae:	22 0b       	sbc	r18, r18
    70b0:	33 0b       	sbc	r19, r19
    70b2:	a9 01       	movw	r20, r18
    70b4:	98 01       	movw	r18, r16
    70b6:	26 0f       	add	r18, r22
    70b8:	37 1f       	adc	r19, r23
    70ba:	48 1f       	adc	r20, r24
    70bc:	59 1f       	adc	r21, r25
    70be:	ac e3       	ldi	r26, 0x3C	; 60
    70c0:	b0 e0       	ldi	r27, 0x00	; 0
    70c2:	0e 94 e9 e2 	call	0x1c5d2	; 0x1c5d2 <__muluhisi3>
    70c6:	81 01       	movw	r16, r2
    70c8:	03 2c       	mov	r0, r3
    70ca:	00 0c       	add	r0, r0
    70cc:	22 0b       	sbc	r18, r18
    70ce:	33 0b       	sbc	r19, r19
    70d0:	a9 01       	movw	r20, r18
    70d2:	98 01       	movw	r18, r16
    70d4:	26 0f       	add	r18, r22
    70d6:	37 1f       	adc	r19, r23
    70d8:	48 1f       	adc	r20, r24
    70da:	59 1f       	adc	r21, r25
    70dc:	0e 94 e9 e2 	call	0x1c5d2	; 0x1c5d2 <__muluhisi3>
    70e0:	ed 81       	ldd	r30, Y+5	; 0x05
    70e2:	fe 81       	ldd	r31, Y+6	; 0x06
    70e4:	8f 01       	movw	r16, r30
    70e6:	ff 0f       	add	r31, r31
    70e8:	22 0b       	sbc	r18, r18
    70ea:	33 0b       	sbc	r19, r19
    70ec:	48 01       	movw	r8, r16
    70ee:	59 01       	movw	r10, r18
    70f0:	86 0e       	add	r8, r22
    70f2:	97 1e       	adc	r9, r23
    70f4:	a8 1e       	adc	r10, r24
    70f6:	b9 1e       	adc	r11, r25
    70f8:	04 c0       	rjmp	.+8      	; 0x7102 <normalize+0x320>
    70fa:	88 24       	eor	r8, r8
    70fc:	8a 94       	dec	r8
    70fe:	98 2c       	mov	r9, r8
    7100:	54 01       	movw	r10, r8
    7102:	49 85       	ldd	r20, Y+9	; 0x09
    7104:	5a 85       	ldd	r21, Y+10	; 0x0a
    7106:	45 2b       	or	r20, r21
    7108:	e9 f0       	breq	.+58     	; 0x7144 <normalize+0x362>
    710a:	ce 01       	movw	r24, r28
    710c:	01 96       	adiw	r24, 0x01	; 1
    710e:	7d dd       	rcall	.-1286   	; 0x6c0a <gettimezone>
    7110:	a9 81       	ldd	r26, Y+1	; 0x01
    7112:	ba 81       	ldd	r27, Y+2	; 0x02
    7114:	2c e3       	ldi	r18, 0x3C	; 60
    7116:	30 e0       	ldi	r19, 0x00	; 0
    7118:	0e 94 e3 e2 	call	0x1c5c6	; 0x1c5c6 <__usmulhisi3>
    711c:	2b 01       	movw	r4, r22
    711e:	3c 01       	movw	r6, r24
    7120:	c5 01       	movw	r24, r10
    7122:	b4 01       	movw	r22, r8
    7124:	e2 dd       	rcall	.-1084   	; 0x6cea <is_dst>
    7126:	89 2b       	or	r24, r25
    7128:	51 f0       	breq	.+20     	; 0x713e <normalize+0x35c>
    712a:	50 e1       	ldi	r21, 0x10	; 16
    712c:	45 1a       	sub	r4, r21
    712e:	5e e0       	ldi	r21, 0x0E	; 14
    7130:	55 0a       	sbc	r5, r21
    7132:	61 08       	sbc	r6, r1
    7134:	71 08       	sbc	r7, r1
    7136:	cc 24       	eor	r12, r12
    7138:	c3 94       	inc	r12
    713a:	d1 2c       	mov	r13, r1
    713c:	08 c0       	rjmp	.+16     	; 0x714e <normalize+0x36c>
    713e:	c1 2c       	mov	r12, r1
    7140:	d1 2c       	mov	r13, r1
    7142:	05 c0       	rjmp	.+10     	; 0x714e <normalize+0x36c>
    7144:	c1 2c       	mov	r12, r1
    7146:	d1 2c       	mov	r13, r1
    7148:	41 2c       	mov	r4, r1
    714a:	51 2c       	mov	r5, r1
    714c:	32 01       	movw	r6, r4
    714e:	87 01       	movw	r16, r14
    7150:	a3 01       	movw	r20, r6
    7152:	92 01       	movw	r18, r4
    7154:	c5 01       	movw	r24, r10
    7156:	b4 01       	movw	r22, r8
    7158:	5a dc       	rcall	.-1868   	; 0x6a0e <time_to_tm>
    715a:	c1 14       	cp	r12, r1
    715c:	d1 04       	cpc	r13, r1
    715e:	29 f0       	breq	.+10     	; 0x716a <normalize+0x388>
    7160:	21 e0       	ldi	r18, 0x01	; 1
    7162:	30 e0       	ldi	r19, 0x00	; 0
    7164:	f7 01       	movw	r30, r14
    7166:	31 8b       	std	Z+17, r19	; 0x11
    7168:	20 8b       	std	Z+16, r18	; 0x10
    716a:	2a 96       	adiw	r28, 0x0a	; 10
    716c:	e2 e1       	ldi	r30, 0x12	; 18
    716e:	0c 94 25 e3 	jmp	0x1c64a	; 0x1c64a <__epilogue_restores__>

00007172 <timegm>:
    7172:	60 e0       	ldi	r22, 0x00	; 0
    7174:	70 e0       	ldi	r23, 0x00	; 0
    7176:	35 ce       	rjmp	.-918    	; 0x6de2 <normalize>
    7178:	08 95       	ret

0000717a <setdate_r>:
    717a:	cf 92       	push	r12
    717c:	df 92       	push	r13
    717e:	ef 92       	push	r14
    7180:	ff 92       	push	r15
    7182:	cf 93       	push	r28
    7184:	df 93       	push	r29
    7186:	cd b7       	in	r28, 0x3d	; 61
    7188:	de b7       	in	r29, 0x3e	; 62
    718a:	a5 97       	sbiw	r28, 0x25	; 37
    718c:	0f b6       	in	r0, 0x3f	; 63
    718e:	f8 94       	cli
    7190:	de bf       	out	0x3e, r29	; 62
    7192:	0f be       	out	0x3f, r0	; 63
    7194:	cd bf       	out	0x3d, r28	; 61
    7196:	9d a3       	std	Y+37, r25	; 0x25
    7198:	8c a3       	std	Y+36, r24	; 0x24
    719a:	1f 82       	std	Y+7, r1	; 0x07
    719c:	1e 82       	std	Y+6, r1	; 0x06
    719e:	19 86       	std	Y+9, r1	; 0x09
    71a0:	18 86       	std	Y+8, r1	; 0x08
    71a2:	1b 86       	std	Y+11, r1	; 0x0b
    71a4:	1a 86       	std	Y+10, r1	; 0x0a
    71a6:	1d 86       	std	Y+13, r1	; 0x0d
    71a8:	1c 86       	std	Y+12, r1	; 0x0c
    71aa:	1f 86       	std	Y+15, r1	; 0x0f
    71ac:	1e 86       	std	Y+14, r1	; 0x0e
    71ae:	19 8a       	std	Y+17, r1	; 0x11
    71b0:	18 8a       	std	Y+16, r1	; 0x10
    71b2:	8c a1       	ldd	r24, Y+36	; 0x24
    71b4:	9d a1       	ldd	r25, Y+37	; 0x25
    71b6:	fc 01       	movw	r30, r24
    71b8:	20 81       	ld	r18, Z
    71ba:	20 32       	cpi	r18, 0x20	; 32
    71bc:	21 f4       	brne	.+8      	; 0x71c6 <setdate_r+0x4c>
    71be:	01 96       	adiw	r24, 0x01	; 1
    71c0:	9d a3       	std	Y+37, r25	; 0x25
    71c2:	8c a3       	std	Y+36, r24	; 0x24
    71c4:	f6 cf       	rjmp	.-20     	; 0x71b2 <setdate_r+0x38>
    71c6:	4a e0       	ldi	r20, 0x0A	; 10
    71c8:	50 e0       	ldi	r21, 0x00	; 0
    71ca:	be 01       	movw	r22, r28
    71cc:	6c 5d       	subi	r22, 0xDC	; 220
    71ce:	7f 4f       	sbci	r23, 0xFF	; 255
    71d0:	0e 94 8d 45 	call	0x8b1a	; 0x8b1a <strtol>
    71d4:	79 8b       	std	Y+17, r23	; 0x11
    71d6:	68 8b       	std	Y+16, r22	; 0x10
    71d8:	8c a1       	ldd	r24, Y+36	; 0x24
    71da:	9d a1       	ldd	r25, Y+37	; 0x25
    71dc:	fc 01       	movw	r30, r24
    71de:	20 81       	ld	r18, Z
    71e0:	20 32       	cpi	r18, 0x20	; 32
    71e2:	21 f4       	brne	.+8      	; 0x71ec <setdate_r+0x72>
    71e4:	01 96       	adiw	r24, 0x01	; 1
    71e6:	9d a3       	std	Y+37, r25	; 0x25
    71e8:	8c a3       	std	Y+36, r24	; 0x24
    71ea:	f6 cf       	rjmp	.-20     	; 0x71d8 <setdate_r+0x5e>
    71ec:	4a e0       	ldi	r20, 0x0A	; 10
    71ee:	50 e0       	ldi	r21, 0x00	; 0
    71f0:	be 01       	movw	r22, r28
    71f2:	6c 5d       	subi	r22, 0xDC	; 220
    71f4:	7f 4f       	sbci	r23, 0xFF	; 255
    71f6:	0e 94 8d 45 	call	0x8b1a	; 0x8b1a <strtol>
    71fa:	7f 87       	std	Y+15, r23	; 0x0f
    71fc:	6e 87       	std	Y+14, r22	; 0x0e
    71fe:	8c a1       	ldd	r24, Y+36	; 0x24
    7200:	9d a1       	ldd	r25, Y+37	; 0x25
    7202:	fc 01       	movw	r30, r24
    7204:	20 81       	ld	r18, Z
    7206:	20 32       	cpi	r18, 0x20	; 32
    7208:	21 f4       	brne	.+8      	; 0x7212 <setdate_r+0x98>
    720a:	01 96       	adiw	r24, 0x01	; 1
    720c:	9d a3       	std	Y+37, r25	; 0x25
    720e:	8c a3       	std	Y+36, r24	; 0x24
    7210:	f6 cf       	rjmp	.-20     	; 0x71fe <setdate_r+0x84>
    7212:	4a e0       	ldi	r20, 0x0A	; 10
    7214:	50 e0       	ldi	r21, 0x00	; 0
    7216:	be 01       	movw	r22, r28
    7218:	6c 5d       	subi	r22, 0xDC	; 220
    721a:	7f 4f       	sbci	r23, 0xFF	; 255
    721c:	0e 94 8d 45 	call	0x8b1a	; 0x8b1a <strtol>
    7220:	7d 87       	std	Y+13, r23	; 0x0d
    7222:	6c 87       	std	Y+12, r22	; 0x0c
    7224:	8c a1       	ldd	r24, Y+36	; 0x24
    7226:	9d a1       	ldd	r25, Y+37	; 0x25
    7228:	fc 01       	movw	r30, r24
    722a:	20 81       	ld	r18, Z
    722c:	20 32       	cpi	r18, 0x20	; 32
    722e:	21 f4       	brne	.+8      	; 0x7238 <setdate_r+0xbe>
    7230:	01 96       	adiw	r24, 0x01	; 1
    7232:	9d a3       	std	Y+37, r25	; 0x25
    7234:	8c a3       	std	Y+36, r24	; 0x24
    7236:	f6 cf       	rjmp	.-20     	; 0x7224 <setdate_r+0xaa>
    7238:	4a e0       	ldi	r20, 0x0A	; 10
    723a:	50 e0       	ldi	r21, 0x00	; 0
    723c:	be 01       	movw	r22, r28
    723e:	6c 5d       	subi	r22, 0xDC	; 220
    7240:	7f 4f       	sbci	r23, 0xFF	; 255
    7242:	0e 94 8d 45 	call	0x8b1a	; 0x8b1a <strtol>
    7246:	7b 87       	std	Y+11, r23	; 0x0b
    7248:	6a 87       	std	Y+10, r22	; 0x0a
    724a:	ec a1       	ldd	r30, Y+36	; 0x24
    724c:	fd a1       	ldd	r31, Y+37	; 0x25
    724e:	80 81       	ld	r24, Z
    7250:	88 23       	and	r24, r24
    7252:	39 f0       	breq	.+14     	; 0x7262 <setdate_r+0xe8>
    7254:	80 32       	cpi	r24, 0x20	; 32
    7256:	11 f0       	breq	.+4      	; 0x725c <setdate_r+0xe2>
    7258:	8a 33       	cpi	r24, 0x3A	; 58
    725a:	19 f4       	brne	.+6      	; 0x7262 <setdate_r+0xe8>
    725c:	31 96       	adiw	r30, 0x01	; 1
    725e:	fd a3       	std	Y+37, r31	; 0x25
    7260:	ec a3       	std	Y+36, r30	; 0x24
    7262:	4a e0       	ldi	r20, 0x0A	; 10
    7264:	50 e0       	ldi	r21, 0x00	; 0
    7266:	be 01       	movw	r22, r28
    7268:	6c 5d       	subi	r22, 0xDC	; 220
    726a:	7f 4f       	sbci	r23, 0xFF	; 255
    726c:	8c a1       	ldd	r24, Y+36	; 0x24
    726e:	9d a1       	ldd	r25, Y+37	; 0x25
    7270:	0e 94 8d 45 	call	0x8b1a	; 0x8b1a <strtol>
    7274:	79 87       	std	Y+9, r23	; 0x09
    7276:	68 87       	std	Y+8, r22	; 0x08
    7278:	ec a1       	ldd	r30, Y+36	; 0x24
    727a:	fd a1       	ldd	r31, Y+37	; 0x25
    727c:	80 81       	ld	r24, Z
    727e:	88 23       	and	r24, r24
    7280:	39 f0       	breq	.+14     	; 0x7290 <setdate_r+0x116>
    7282:	80 32       	cpi	r24, 0x20	; 32
    7284:	11 f0       	breq	.+4      	; 0x728a <setdate_r+0x110>
    7286:	8a 33       	cpi	r24, 0x3A	; 58
    7288:	19 f4       	brne	.+6      	; 0x7290 <setdate_r+0x116>
    728a:	31 96       	adiw	r30, 0x01	; 1
    728c:	fd a3       	std	Y+37, r31	; 0x25
    728e:	ec a3       	std	Y+36, r30	; 0x24
    7290:	4a e0       	ldi	r20, 0x0A	; 10
    7292:	50 e0       	ldi	r21, 0x00	; 0
    7294:	be 01       	movw	r22, r28
    7296:	6c 5d       	subi	r22, 0xDC	; 220
    7298:	7f 4f       	sbci	r23, 0xFF	; 255
    729a:	8c a1       	ldd	r24, Y+36	; 0x24
    729c:	9d a1       	ldd	r25, Y+37	; 0x25
    729e:	0e 94 8d 45 	call	0x8b1a	; 0x8b1a <strtol>
    72a2:	7f 83       	std	Y+7, r23	; 0x07
    72a4:	6e 83       	std	Y+6, r22	; 0x06
    72a6:	2e 85       	ldd	r18, Y+14	; 0x0e
    72a8:	3f 85       	ldd	r19, Y+15	; 0x0f
    72aa:	21 50       	subi	r18, 0x01	; 1
    72ac:	31 09       	sbc	r19, r1
    72ae:	3f 87       	std	Y+15, r19	; 0x0f
    72b0:	2e 87       	std	Y+14, r18	; 0x0e
    72b2:	88 89       	ldd	r24, Y+16	; 0x10
    72b4:	99 89       	ldd	r25, Y+17	; 0x11
    72b6:	ac 01       	movw	r20, r24
    72b8:	42 5b       	subi	r20, 0xB2	; 178
    72ba:	57 40       	sbci	r21, 0x07	; 7
    72bc:	45 34       	cpi	r20, 0x45	; 69
    72be:	51 05       	cpc	r21, r1
    72c0:	38 f0       	brcs	.+14     	; 0x72d0 <setdate_r+0x156>
    72c2:	ed b7       	in	r30, 0x3d	; 61
    72c4:	fe b7       	in	r31, 0x3e	; 62
    72c6:	95 83       	std	Z+5, r25	; 0x05
    72c8:	84 83       	std	Z+4, r24	; 0x04
    72ca:	89 e1       	ldi	r24, 0x19	; 25
    72cc:	97 e0       	ldi	r25, 0x07	; 7
    72ce:	34 c0       	rjmp	.+104    	; 0x7338 <setdate_r+0x1be>
    72d0:	8c 56       	subi	r24, 0x6C	; 108
    72d2:	97 40       	sbci	r25, 0x07	; 7
    72d4:	99 8b       	std	Y+17, r25	; 0x11
    72d6:	88 8b       	std	Y+16, r24	; 0x10
    72d8:	2c 30       	cpi	r18, 0x0C	; 12
    72da:	31 05       	cpc	r19, r1
    72dc:	38 f0       	brcs	.+14     	; 0x72ec <setdate_r+0x172>
    72de:	ed b7       	in	r30, 0x3d	; 61
    72e0:	fe b7       	in	r31, 0x3e	; 62
    72e2:	95 83       	std	Z+5, r25	; 0x05
    72e4:	84 83       	std	Z+4, r24	; 0x04
    72e6:	88 e0       	ldi	r24, 0x08	; 8
    72e8:	97 e0       	ldi	r25, 0x07	; 7
    72ea:	26 c0       	rjmp	.+76     	; 0x7338 <setdate_r+0x1be>
    72ec:	8c 85       	ldd	r24, Y+12	; 0x0c
    72ee:	9d 85       	ldd	r25, Y+13	; 0x0d
    72f0:	9c 01       	movw	r18, r24
    72f2:	21 50       	subi	r18, 0x01	; 1
    72f4:	31 09       	sbc	r19, r1
    72f6:	2f 31       	cpi	r18, 0x1F	; 31
    72f8:	31 05       	cpc	r19, r1
    72fa:	38 f0       	brcs	.+14     	; 0x730a <setdate_r+0x190>
    72fc:	ed b7       	in	r30, 0x3d	; 61
    72fe:	fe b7       	in	r31, 0x3e	; 62
    7300:	95 83       	std	Z+5, r25	; 0x05
    7302:	84 83       	std	Z+4, r24	; 0x04
    7304:	87 ef       	ldi	r24, 0xF7	; 247
    7306:	96 e0       	ldi	r25, 0x06	; 6
    7308:	17 c0       	rjmp	.+46     	; 0x7338 <setdate_r+0x1be>
    730a:	8a 85       	ldd	r24, Y+10	; 0x0a
    730c:	9b 85       	ldd	r25, Y+11	; 0x0b
    730e:	88 31       	cpi	r24, 0x18	; 24
    7310:	91 05       	cpc	r25, r1
    7312:	38 f0       	brcs	.+14     	; 0x7322 <setdate_r+0x1a8>
    7314:	ed b7       	in	r30, 0x3d	; 61
    7316:	fe b7       	in	r31, 0x3e	; 62
    7318:	95 83       	std	Z+5, r25	; 0x05
    731a:	84 83       	std	Z+4, r24	; 0x04
    731c:	85 ee       	ldi	r24, 0xE5	; 229
    731e:	96 e0       	ldi	r25, 0x06	; 6
    7320:	0b c0       	rjmp	.+22     	; 0x7338 <setdate_r+0x1be>
    7322:	88 85       	ldd	r24, Y+8	; 0x08
    7324:	99 85       	ldd	r25, Y+9	; 0x09
    7326:	8c 33       	cpi	r24, 0x3C	; 60
    7328:	91 05       	cpc	r25, r1
    732a:	68 f0       	brcs	.+26     	; 0x7346 <setdate_r+0x1cc>
    732c:	ed b7       	in	r30, 0x3d	; 61
    732e:	fe b7       	in	r31, 0x3e	; 62
    7330:	95 83       	std	Z+5, r25	; 0x05
    7332:	84 83       	std	Z+4, r24	; 0x04
    7334:	84 ed       	ldi	r24, 0xD4	; 212
    7336:	96 e0       	ldi	r25, 0x06	; 6
    7338:	a0 e0       	ldi	r26, 0x00	; 0
    733a:	81 83       	std	Z+1, r24	; 0x01
    733c:	92 83       	std	Z+2, r25	; 0x02
    733e:	a3 83       	std	Z+3, r26	; 0x03
    7340:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    7344:	25 c0       	rjmp	.+74     	; 0x7390 <setdate_r+0x216>
    7346:	ce 01       	movw	r24, r28
    7348:	06 96       	adiw	r24, 0x06	; 6
    734a:	13 df       	rcall	.-474    	; 0x7172 <timegm>
    734c:	6b 01       	movw	r12, r22
    734e:	7c 01       	movw	r14, r24
    7350:	6c 8f       	std	Y+28, r22	; 0x1c
    7352:	7d 8f       	std	Y+29, r23	; 0x1d
    7354:	8e 8f       	std	Y+30, r24	; 0x1e
    7356:	9f 8f       	std	Y+31, r25	; 0x1f
    7358:	18 a2       	std	Y+32, r1	; 0x20
    735a:	19 a2       	std	Y+33, r1	; 0x21
    735c:	1a a2       	std	Y+34, r1	; 0x22
    735e:	1b a2       	std	Y+35, r1	; 0x23
    7360:	be 01       	movw	r22, r28
    7362:	64 5e       	subi	r22, 0xE4	; 228
    7364:	7f 4f       	sbci	r23, 0xFF	; 255
    7366:	80 e0       	ldi	r24, 0x00	; 0
    7368:	90 e0       	ldi	r25, 0x00	; 0
    736a:	03 db       	rcall	.-2554   	; 0x6972 <clock_settime>
    736c:	b7 01       	movw	r22, r14
    736e:	a6 01       	movw	r20, r12
    7370:	81 e0       	ldi	r24, 0x01	; 1
    7372:	90 e0       	ldi	r25, 0x00	; 0
    7374:	0e 94 39 2f 	call	0x5e72	; 0x5e72 <rtc_init>
    7378:	81 11       	cpse	r24, r1
    737a:	0d c0       	rjmp	.+26     	; 0x7396 <setdate_r+0x21c>
    737c:	8d eb       	ldi	r24, 0xBD	; 189
    737e:	96 e0       	ldi	r25, 0x06	; 6
    7380:	a0 e0       	ldi	r26, 0x00	; 0
    7382:	ed b7       	in	r30, 0x3d	; 61
    7384:	fe b7       	in	r31, 0x3e	; 62
    7386:	81 83       	std	Z+1, r24	; 0x01
    7388:	92 83       	std	Z+2, r25	; 0x02
    738a:	a3 83       	std	Z+3, r26	; 0x03
    738c:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    7390:	8f ef       	ldi	r24, 0xFF	; 255
    7392:	9f ef       	ldi	r25, 0xFF	; 255
    7394:	02 c0       	rjmp	.+4      	; 0x739a <setdate_r+0x220>
    7396:	80 e0       	ldi	r24, 0x00	; 0
    7398:	90 e0       	ldi	r25, 0x00	; 0
    739a:	a5 96       	adiw	r28, 0x25	; 37
    739c:	0f b6       	in	r0, 0x3f	; 63
    739e:	f8 94       	cli
    73a0:	de bf       	out	0x3e, r29	; 62
    73a2:	0f be       	out	0x3f, r0	; 63
    73a4:	cd bf       	out	0x3d, r28	; 61
    73a6:	df 91       	pop	r29
    73a8:	cf 91       	pop	r28
    73aa:	ff 90       	pop	r15
    73ac:	ef 90       	pop	r14
    73ae:	df 90       	pop	r13
    73b0:	cf 90       	pop	r12
    73b2:	08 95       	ret

000073b4 <setdate>:
    73b4:	ab e2       	ldi	r26, 0x2B	; 43
    73b6:	b0 e0       	ldi	r27, 0x00	; 0
    73b8:	e0 ee       	ldi	r30, 0xE0	; 224
    73ba:	f9 e3       	ldi	r31, 0x39	; 57
    73bc:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__prologue_saves__+0x20>
    73c0:	8b e2       	ldi	r24, 0x2B	; 43
    73c2:	97 e0       	ldi	r25, 0x07	; 7
    73c4:	a0 e0       	ldi	r26, 0x00	; 0
    73c6:	ed b7       	in	r30, 0x3d	; 61
    73c8:	fe b7       	in	r31, 0x3e	; 62
    73ca:	81 83       	std	Z+1, r24	; 0x01
    73cc:	92 83       	std	Z+2, r25	; 0x02
    73ce:	a3 83       	std	Z+3, r26	; 0x03
    73d0:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    73d4:	40 91 cb 1c 	lds	r20, 0x1CCB	; 0x801ccb <__iob>
    73d8:	50 91 cc 1c 	lds	r21, 0x1CCC	; 0x801ccc <__iob+0x1>
    73dc:	66 e2       	ldi	r22, 0x26	; 38
    73de:	70 e0       	ldi	r23, 0x00	; 0
    73e0:	ce 01       	movw	r24, r28
    73e2:	04 96       	adiw	r24, 0x04	; 4
    73e4:	0e 94 a3 74 	call	0xe946	; 0xe946 <fgets>
    73e8:	ce 01       	movw	r24, r28
    73ea:	04 96       	adiw	r24, 0x04	; 4
    73ec:	c6 de       	rcall	.-628    	; 0x717a <setdate_r>
    73ee:	ab 96       	adiw	r28, 0x2b	; 43
    73f0:	e2 e0       	ldi	r30, 0x02	; 2
    73f2:	0c 94 35 e3 	jmp	0x1c66a	; 0x1c66a <__epilogue_restores__+0x20>

000073f6 <find_dst>:
    73f6:	a8 e2       	ldi	r26, 0x28	; 40
    73f8:	b0 e0       	ldi	r27, 0x00	; 0
    73fa:	e1 e0       	ldi	r30, 0x01	; 1
    73fc:	fa e3       	ldi	r31, 0x3A	; 58
    73fe:	0c 94 09 e3 	jmp	0x1c612	; 0x1c612 <__prologue_saves__>
    7402:	3c 01       	movw	r6, r24
    7404:	1a 01       	movw	r2, r20
    7406:	2b 01       	movw	r4, r22
    7408:	49 01       	movw	r8, r18
    740a:	1c a3       	std	Y+36, r17	; 0x24
    740c:	0b a3       	std	Y+35, r16	; 0x23
    740e:	de a2       	std	Y+38, r13	; 0x26
    7410:	cd a2       	std	Y+37, r12	; 0x25
    7412:	b8 a6       	std	Y+40, r11	; 0x28
    7414:	af a2       	std	Y+39, r10	; 0x27
    7416:	be 01       	movw	r22, r28
    7418:	61 5e       	subi	r22, 0xE1	; 225
    741a:	7f 4f       	sbci	r23, 0xFF	; 255
    741c:	ce 01       	movw	r24, r28
    741e:	47 96       	adiw	r24, 0x17	; 23
    7420:	15 dc       	rcall	.-2006   	; 0x6c4c <gettimeofday>
    7422:	af 8d       	ldd	r26, Y+31	; 0x1f
    7424:	b8 a1       	ldd	r27, Y+32	; 0x20
    7426:	2c e3       	ldi	r18, 0x3C	; 60
    7428:	30 e0       	ldi	r19, 0x00	; 0
    742a:	0e 94 e3 e2 	call	0x1c5c6	; 0x1c5c6 <__usmulhisi3>
    742e:	5b 01       	movw	r10, r22
    7430:	6c 01       	movw	r12, r24
    7432:	61 14       	cp	r6, r1
    7434:	71 04       	cpc	r7, r1
    7436:	31 f0       	breq	.+12     	; 0x7444 <find_dst+0x4e>
    7438:	20 e1       	ldi	r18, 0x10	; 16
    743a:	a2 1a       	sub	r10, r18
    743c:	2e e0       	ldi	r18, 0x0E	; 14
    743e:	b2 0a       	sbc	r11, r18
    7440:	c1 08       	sbc	r12, r1
    7442:	d1 08       	sbc	r13, r1
    7444:	81 14       	cp	r8, r1
    7446:	91 04       	cpc	r9, r1
    7448:	39 f0       	breq	.+14     	; 0x7458 <find_dst+0x62>
    744a:	4c e6       	ldi	r20, 0x6C	; 108
    744c:	84 1a       	sub	r8, r20
    744e:	47 e0       	ldi	r20, 0x07	; 7
    7450:	94 0a       	sbc	r9, r20
    7452:	9c 86       	std	Y+12, r9	; 0x0c
    7454:	8b 86       	std	Y+11, r8	; 0x0b
    7456:	11 c0       	rjmp	.+34     	; 0x747a <find_dst+0x84>
    7458:	21 14       	cp	r2, r1
    745a:	31 04       	cpc	r3, r1
    745c:	41 04       	cpc	r4, r1
    745e:	51 04       	cpc	r5, r1
    7460:	21 f4       	brne	.+8      	; 0x746a <find_dst+0x74>
    7462:	2f 88       	ldd	r2, Y+23	; 0x17
    7464:	38 8c       	ldd	r3, Y+24	; 0x18
    7466:	49 8c       	ldd	r4, Y+25	; 0x19
    7468:	5a 8c       	ldd	r5, Y+26	; 0x1a
    746a:	8e 01       	movw	r16, r28
    746c:	0f 5f       	subi	r16, 0xFF	; 255
    746e:	1f 4f       	sbci	r17, 0xFF	; 255
    7470:	a6 01       	movw	r20, r12
    7472:	95 01       	movw	r18, r10
    7474:	c2 01       	movw	r24, r4
    7476:	b1 01       	movw	r22, r2
    7478:	ca da       	rcall	.-2668   	; 0x6a0e <time_to_tm>
    747a:	8b a1       	ldd	r24, Y+35	; 0x23
    747c:	9c a1       	ldd	r25, Y+36	; 0x24
    747e:	01 97       	sbiw	r24, 0x01	; 1
    7480:	9a 87       	std	Y+10, r25	; 0x0a
    7482:	89 87       	std	Y+9, r24	; 0x09
    7484:	81 e0       	ldi	r24, 0x01	; 1
    7486:	90 e0       	ldi	r25, 0x00	; 0
    7488:	98 87       	std	Y+8, r25	; 0x08
    748a:	8f 83       	std	Y+7, r24	; 0x07
    748c:	8f a1       	ldd	r24, Y+39	; 0x27
    748e:	98 a5       	ldd	r25, Y+40	; 0x28
    7490:	9e 83       	std	Y+6, r25	; 0x06
    7492:	8d 83       	std	Y+5, r24	; 0x05
    7494:	1c 82       	std	Y+4, r1	; 0x04
    7496:	1b 82       	std	Y+3, r1	; 0x03
    7498:	1a 82       	std	Y+2, r1	; 0x02
    749a:	19 82       	std	Y+1, r1	; 0x01
    749c:	ce 01       	movw	r24, r28
    749e:	01 96       	adiw	r24, 0x01	; 1
    74a0:	68 de       	rcall	.-816    	; 0x7172 <timegm>
    74a2:	45 01       	movw	r8, r10
    74a4:	56 01       	movw	r10, r12
    74a6:	86 0e       	add	r8, r22
    74a8:	97 1e       	adc	r9, r23
    74aa:	a8 1e       	adc	r10, r24
    74ac:	b9 1e       	adc	r11, r25
    74ae:	8e 01       	movw	r16, r28
    74b0:	0f 5f       	subi	r16, 0xFF	; 255
    74b2:	1f 4f       	sbci	r17, 0xFF	; 255
    74b4:	20 e0       	ldi	r18, 0x00	; 0
    74b6:	30 e0       	ldi	r19, 0x00	; 0
    74b8:	a9 01       	movw	r20, r18
    74ba:	c5 01       	movw	r24, r10
    74bc:	b4 01       	movw	r22, r8
    74be:	a7 da       	rcall	.-2738   	; 0x6a0e <time_to_tm>
    74c0:	2d 85       	ldd	r18, Y+13	; 0x0d
    74c2:	3e 85       	ldd	r19, Y+14	; 0x0e
    74c4:	e7 e0       	ldi	r30, 0x07	; 7
    74c6:	f0 e0       	ldi	r31, 0x00	; 0
    74c8:	c9 01       	movw	r24, r18
    74ca:	bf 01       	movw	r22, r30
    74cc:	0e 94 89 e2 	call	0x1c512	; 0x1c512 <__divmodhi4>
    74d0:	4d a1       	ldd	r20, Y+37	; 0x25
    74d2:	5e a1       	ldd	r21, Y+38	; 0x26
    74d4:	48 17       	cp	r20, r24
    74d6:	59 07       	cpc	r21, r25
    74d8:	21 f4       	brne	.+8      	; 0x74e2 <find_dst+0xec>
    74da:	51 e0       	ldi	r21, 0x01	; 1
    74dc:	e5 1a       	sub	r14, r21
    74de:	f1 08       	sbc	r15, r1
    74e0:	51 f0       	breq	.+20     	; 0x74f6 <find_dst+0x100>
    74e2:	80 e8       	ldi	r24, 0x80	; 128
    74e4:	88 0e       	add	r8, r24
    74e6:	81 e5       	ldi	r24, 0x51	; 81
    74e8:	98 1e       	adc	r9, r24
    74ea:	81 e0       	ldi	r24, 0x01	; 1
    74ec:	a8 1e       	adc	r10, r24
    74ee:	b1 1c       	adc	r11, r1
    74f0:	2f 5f       	subi	r18, 0xFF	; 255
    74f2:	3f 4f       	sbci	r19, 0xFF	; 255
    74f4:	e9 cf       	rjmp	.-46     	; 0x74c8 <find_dst+0xd2>
    74f6:	c5 01       	movw	r24, r10
    74f8:	b4 01       	movw	r22, r8
    74fa:	a8 96       	adiw	r28, 0x28	; 40
    74fc:	e2 e1       	ldi	r30, 0x12	; 18
    74fe:	0c 94 25 e3 	jmp	0x1c64a	; 0x1c64a <__epilogue_restores__>

00007502 <set_dst>:
    7502:	4f 92       	push	r4
    7504:	5f 92       	push	r5
    7506:	6f 92       	push	r6
    7508:	7f 92       	push	r7
    750a:	af 92       	push	r10
    750c:	bf 92       	push	r11
    750e:	cf 92       	push	r12
    7510:	df 92       	push	r13
    7512:	ef 92       	push	r14
    7514:	ff 92       	push	r15
    7516:	0f 93       	push	r16
    7518:	1f 93       	push	r17
    751a:	cf 93       	push	r28
    751c:	df 93       	push	r29
    751e:	cd b7       	in	r28, 0x3d	; 61
    7520:	de b7       	in	r29, 0x3e	; 62
    7522:	2c 97       	sbiw	r28, 0x0c	; 12
    7524:	0f b6       	in	r0, 0x3f	; 63
    7526:	f8 94       	cli
    7528:	de bf       	out	0x3e, r29	; 62
    752a:	0f be       	out	0x3f, r0	; 63
    752c:	cd bf       	out	0x3d, r28	; 61
    752e:	2b 01       	movw	r4, r22
    7530:	3c 01       	movw	r6, r24
    7532:	67 2b       	or	r22, r23
    7534:	68 2b       	or	r22, r24
    7536:	69 2b       	or	r22, r25
    7538:	51 f4       	brne	.+20     	; 0x754e <set_dst+0x4c>
    753a:	be 01       	movw	r22, r28
    753c:	67 5f       	subi	r22, 0xF7	; 247
    753e:	7f 4f       	sbci	r23, 0xFF	; 255
    7540:	ce 01       	movw	r24, r28
    7542:	01 96       	adiw	r24, 0x01	; 1
    7544:	83 db       	rcall	.-2298   	; 0x6c4c <gettimeofday>
    7546:	49 80       	ldd	r4, Y+1	; 0x01
    7548:	5a 80       	ldd	r5, Y+2	; 0x02
    754a:	6b 80       	ldd	r6, Y+3	; 0x03
    754c:	7c 80       	ldd	r7, Y+4	; 0x04
    754e:	80 91 88 1a 	lds	r24, 0x1A88	; 0x801a88 <dst+0x8>
    7552:	90 91 89 1a 	lds	r25, 0x1A89	; 0x801a89 <dst+0x9>
    7556:	a0 91 8a 1a 	lds	r26, 0x1A8A	; 0x801a8a <dst+0xa>
    755a:	b0 91 8b 1a 	lds	r27, 0x1A8B	; 0x801a8b <dst+0xb>
    755e:	84 15       	cp	r24, r4
    7560:	95 05       	cpc	r25, r5
    7562:	a6 05       	cpc	r26, r6
    7564:	b7 05       	cpc	r27, r7
    7566:	50 f0       	brcs	.+20     	; 0x757c <set_dst+0x7a>
    7568:	84 19       	sub	r24, r4
    756a:	95 09       	sbc	r25, r5
    756c:	a6 09       	sbc	r26, r6
    756e:	b7 09       	sbc	r27, r7
    7570:	80 38       	cpi	r24, 0x80	; 128
    7572:	91 45       	sbci	r25, 0x51	; 81
    7574:	a1 40       	sbci	r26, 0x01	; 1
    7576:	b1 05       	cpc	r27, r1
    7578:	70 f4       	brcc	.+28     	; 0x7596 <set_dst+0x94>
    757a:	42 c0       	rjmp	.+132    	; 0x7600 <set_dst+0xfe>
    757c:	a3 01       	movw	r20, r6
    757e:	92 01       	movw	r18, r4
    7580:	28 1b       	sub	r18, r24
    7582:	39 0b       	sbc	r19, r25
    7584:	4a 0b       	sbc	r20, r26
    7586:	5b 0b       	sbc	r21, r27
    7588:	da 01       	movw	r26, r20
    758a:	c9 01       	movw	r24, r18
    758c:	80 38       	cpi	r24, 0x80	; 128
    758e:	91 45       	sbci	r25, 0x51	; 81
    7590:	a1 40       	sbci	r26, 0x01	; 1
    7592:	b1 05       	cpc	r27, r1
    7594:	a8 f1       	brcs	.+106    	; 0x7600 <set_dst+0xfe>
    7596:	40 92 88 1a 	sts	0x1A88, r4	; 0x801a88 <dst+0x8>
    759a:	50 92 89 1a 	sts	0x1A89, r5	; 0x801a89 <dst+0x9>
    759e:	60 92 8a 1a 	sts	0x1A8A, r6	; 0x801a8a <dst+0xa>
    75a2:	70 92 8b 1a 	sts	0x1A8B, r7	; 0x801a8b <dst+0xb>
    75a6:	82 e0       	ldi	r24, 0x02	; 2
    75a8:	a8 2e       	mov	r10, r24
    75aa:	b1 2c       	mov	r11, r1
    75ac:	c1 2c       	mov	r12, r1
    75ae:	d1 2c       	mov	r13, r1
    75b0:	92 e0       	ldi	r25, 0x02	; 2
    75b2:	e9 2e       	mov	r14, r25
    75b4:	f1 2c       	mov	r15, r1
    75b6:	03 e0       	ldi	r16, 0x03	; 3
    75b8:	10 e0       	ldi	r17, 0x00	; 0
    75ba:	20 e0       	ldi	r18, 0x00	; 0
    75bc:	30 e0       	ldi	r19, 0x00	; 0
    75be:	b3 01       	movw	r22, r6
    75c0:	a2 01       	movw	r20, r4
    75c2:	80 e0       	ldi	r24, 0x00	; 0
    75c4:	90 e0       	ldi	r25, 0x00	; 0
    75c6:	17 df       	rcall	.-466    	; 0x73f6 <find_dst>
    75c8:	60 93 80 1a 	sts	0x1A80, r22	; 0x801a80 <dst>
    75cc:	70 93 81 1a 	sts	0x1A81, r23	; 0x801a81 <dst+0x1>
    75d0:	80 93 82 1a 	sts	0x1A82, r24	; 0x801a82 <dst+0x2>
    75d4:	90 93 83 1a 	sts	0x1A83, r25	; 0x801a83 <dst+0x3>
    75d8:	ee 24       	eor	r14, r14
    75da:	e3 94       	inc	r14
    75dc:	f1 2c       	mov	r15, r1
    75de:	0b e0       	ldi	r16, 0x0B	; 11
    75e0:	10 e0       	ldi	r17, 0x00	; 0
    75e2:	20 e0       	ldi	r18, 0x00	; 0
    75e4:	30 e0       	ldi	r19, 0x00	; 0
    75e6:	b3 01       	movw	r22, r6
    75e8:	a2 01       	movw	r20, r4
    75ea:	81 e0       	ldi	r24, 0x01	; 1
    75ec:	90 e0       	ldi	r25, 0x00	; 0
    75ee:	03 df       	rcall	.-506    	; 0x73f6 <find_dst>
    75f0:	60 93 84 1a 	sts	0x1A84, r22	; 0x801a84 <dst+0x4>
    75f4:	70 93 85 1a 	sts	0x1A85, r23	; 0x801a85 <dst+0x5>
    75f8:	80 93 86 1a 	sts	0x1A86, r24	; 0x801a86 <dst+0x6>
    75fc:	90 93 87 1a 	sts	0x1A87, r25	; 0x801a87 <dst+0x7>
    7600:	2c 96       	adiw	r28, 0x0c	; 12
    7602:	0f b6       	in	r0, 0x3f	; 63
    7604:	f8 94       	cli
    7606:	de bf       	out	0x3e, r29	; 62
    7608:	0f be       	out	0x3f, r0	; 63
    760a:	cd bf       	out	0x3d, r28	; 61
    760c:	df 91       	pop	r29
    760e:	cf 91       	pop	r28
    7610:	1f 91       	pop	r17
    7612:	0f 91       	pop	r16
    7614:	ff 90       	pop	r15
    7616:	ef 90       	pop	r14
    7618:	df 90       	pop	r13
    761a:	cf 90       	pop	r12
    761c:	bf 90       	pop	r11
    761e:	af 90       	pop	r10
    7620:	7f 90       	pop	r7
    7622:	6f 90       	pop	r6
    7624:	5f 90       	pop	r5
    7626:	4f 90       	pop	r4
    7628:	08 95       	ret

0000762a <asctime_r>:
    762a:	a5 e1       	ldi	r26, 0x15	; 21
    762c:	b0 e0       	ldi	r27, 0x00	; 0
    762e:	eb e1       	ldi	r30, 0x1B	; 27
    7630:	fb e3       	ldi	r31, 0x3B	; 59
    7632:	0c 94 17 e3 	jmp	0x1c62e	; 0x1c62e <__prologue_saves__+0x1c>
    7636:	ec 01       	movw	r28, r24
    7638:	8b 01       	movw	r16, r22
    763a:	60 e0       	ldi	r22, 0x00	; 0
    763c:	70 e0       	ldi	r23, 0x00	; 0
    763e:	d1 db       	rcall	.-2142   	; 0x6de2 <normalize>
    7640:	80 e2       	ldi	r24, 0x20	; 32
    7642:	f8 01       	movw	r30, r16
    7644:	11 92       	st	Z+, r1
    7646:	8a 95       	dec	r24
    7648:	e9 f7       	brne	.-6      	; 0x7644 <asctime_r+0x1a>
    764a:	8a 85       	ldd	r24, Y+10	; 0x0a
    764c:	9b 85       	ldd	r25, Y+11	; 0x0b
    764e:	84 59       	subi	r24, 0x94	; 148
    7650:	98 4f       	sbci	r25, 0xF8	; 248
    7652:	ed b7       	in	r30, 0x3d	; 61
    7654:	fe b7       	in	r31, 0x3e	; 62
    7656:	95 8b       	std	Z+21, r25	; 0x15
    7658:	84 8b       	std	Z+20, r24	; 0x14
    765a:	88 81       	ld	r24, Y
    765c:	99 81       	ldd	r25, Y+1	; 0x01
    765e:	93 8b       	std	Z+19, r25	; 0x13
    7660:	82 8b       	std	Z+18, r24	; 0x12
    7662:	8a 81       	ldd	r24, Y+2	; 0x02
    7664:	9b 81       	ldd	r25, Y+3	; 0x03
    7666:	91 8b       	std	Z+17, r25	; 0x11
    7668:	80 8b       	std	Z+16, r24	; 0x10
    766a:	8c 81       	ldd	r24, Y+4	; 0x04
    766c:	9d 81       	ldd	r25, Y+5	; 0x05
    766e:	97 87       	std	Z+15, r25	; 0x0f
    7670:	86 87       	std	Z+14, r24	; 0x0e
    7672:	8e 81       	ldd	r24, Y+6	; 0x06
    7674:	9f 81       	ldd	r25, Y+7	; 0x07
    7676:	95 87       	std	Z+13, r25	; 0x0d
    7678:	84 87       	std	Z+12, r24	; 0x0c
    767a:	e8 85       	ldd	r30, Y+8	; 0x08
    767c:	f9 85       	ldd	r31, Y+9	; 0x09
    767e:	ee 0f       	add	r30, r30
    7680:	ff 1f       	adc	r31, r31
    7682:	e5 5f       	subi	r30, 0xF5	; 245
    7684:	fe 4f       	sbci	r31, 0xFE	; 254
    7686:	80 81       	ld	r24, Z
    7688:	91 81       	ldd	r25, Z+1	; 0x01
    768a:	ed b7       	in	r30, 0x3d	; 61
    768c:	fe b7       	in	r31, 0x3e	; 62
    768e:	93 87       	std	Z+11, r25	; 0x0b
    7690:	82 87       	std	Z+10, r24	; 0x0a
    7692:	ec 85       	ldd	r30, Y+12	; 0x0c
    7694:	fd 85       	ldd	r31, Y+13	; 0x0d
    7696:	ee 0f       	add	r30, r30
    7698:	ff 1f       	adc	r31, r31
    769a:	eb 5d       	subi	r30, 0xDB	; 219
    769c:	fe 4f       	sbci	r31, 0xFE	; 254
    769e:	80 81       	ld	r24, Z
    76a0:	91 81       	ldd	r25, Z+1	; 0x01
    76a2:	ed b7       	in	r30, 0x3d	; 61
    76a4:	fe b7       	in	r31, 0x3e	; 62
    76a6:	91 87       	std	Z+9, r25	; 0x09
    76a8:	80 87       	std	Z+8, r24	; 0x08
    76aa:	8c e4       	ldi	r24, 0x4C	; 76
    76ac:	97 e0       	ldi	r25, 0x07	; 7
    76ae:	a0 e0       	ldi	r26, 0x00	; 0
    76b0:	85 83       	std	Z+5, r24	; 0x05
    76b2:	96 83       	std	Z+6, r25	; 0x06
    76b4:	a7 83       	std	Z+7, r26	; 0x07
    76b6:	80 e2       	ldi	r24, 0x20	; 32
    76b8:	90 e0       	ldi	r25, 0x00	; 0
    76ba:	94 83       	std	Z+4, r25	; 0x04
    76bc:	83 83       	std	Z+3, r24	; 0x03
    76be:	12 83       	std	Z+2, r17	; 0x02
    76c0:	01 83       	std	Z+1, r16	; 0x01
    76c2:	0e 94 2a 45 	call	0x8a54	; 0x8a54 <snprintf_P>
    76c6:	c8 01       	movw	r24, r16
    76c8:	cd b7       	in	r28, 0x3d	; 61
    76ca:	de b7       	in	r29, 0x3e	; 62
    76cc:	65 96       	adiw	r28, 0x15	; 21
    76ce:	e4 e0       	ldi	r30, 0x04	; 4
    76d0:	0c 94 33 e3 	jmp	0x1c666	; 0x1c666 <__epilogue_restores__+0x1c>

000076d4 <asctime>:
    76d4:	6a e0       	ldi	r22, 0x0A	; 10
    76d6:	78 e1       	ldi	r23, 0x18	; 24
    76d8:	a8 cf       	rjmp	.-176    	; 0x762a <asctime_r>
    76da:	08 95       	ret

000076dc <ctime_gm>:
    76dc:	a6 e1       	ldi	r26, 0x16	; 22
    76de:	b0 e0       	ldi	r27, 0x00	; 0
    76e0:	e4 e7       	ldi	r30, 0x74	; 116
    76e2:	fb e3       	ldi	r31, 0x3B	; 59
    76e4:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__prologue_saves__+0x20>
    76e8:	be 01       	movw	r22, r28
    76ea:	6f 5f       	subi	r22, 0xFF	; 255
    76ec:	7f 4f       	sbci	r23, 0xFF	; 255
    76ee:	6d da       	rcall	.-2854   	; 0x6bca <gmtime_r>
    76f0:	6a ee       	ldi	r22, 0xEA	; 234
    76f2:	77 e1       	ldi	r23, 0x17	; 23
    76f4:	9a df       	rcall	.-204    	; 0x762a <asctime_r>
    76f6:	66 96       	adiw	r28, 0x16	; 22
    76f8:	e2 e0       	ldi	r30, 0x02	; 2
    76fa:	0c 94 35 e3 	jmp	0x1c66a	; 0x1c66a <__epilogue_restores__+0x20>

000076fe <initialize_clock>:
/// @param[in] minwest: your time zone as minute west
///@return  void
///@see: clock_settime()
MEMSPACE
void initialize_clock(int minwest)
{
    76fe:	a5 e2       	ldi	r26, 0x25	; 37
    7700:	b0 e0       	ldi	r27, 0x00	; 0
    7702:	e5 e8       	ldi	r30, 0x85	; 133
    7704:	fb e3       	ldi	r31, 0x3B	; 59
    7706:	0c 94 13 e3 	jmp	0x1c626	; 0x1c626 <__prologue_saves__+0x14>
    770a:	8c 01       	movw	r16, r24
    tm_t tc;
    ts_t ts;
    tz_t tz;

#ifdef RTC_SUPPORT
    if(!rtc_init(0,0L))
    770c:	40 e0       	ldi	r20, 0x00	; 0
    770e:	50 e0       	ldi	r21, 0x00	; 0
    7710:	ba 01       	movw	r22, r20
    7712:	80 e0       	ldi	r24, 0x00	; 0
    7714:	90 e0       	ldi	r25, 0x00	; 0
    7716:	0e 94 39 2f 	call	0x5e72	; 0x5e72 <rtc_init>
    771a:	81 11       	cpse	r24, r1
    771c:	27 c0       	rjmp	.+78     	; 0x776c <initialize_clock+0x6e>
    {
        printf("rtc uninitilized\n");
    771e:	8b ea       	ldi	r24, 0xAB	; 171
    7720:	96 e0       	ldi	r25, 0x06	; 6
    7722:	a0 e0       	ldi	r26, 0x00	; 0
    7724:	ed b7       	in	r30, 0x3d	; 61
    7726:	fe b7       	in	r31, 0x3e	; 62
    7728:	81 83       	std	Z+1, r24	; 0x01
    772a:	92 83       	std	Z+2, r25	; 0x02
    772c:	a3 83       	std	Z+3, r26	; 0x03
    772e:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
        printf("attempting rtc init\n");
    7732:	86 e9       	ldi	r24, 0x96	; 150
    7734:	96 e0       	ldi	r25, 0x06	; 6
    7736:	a0 e0       	ldi	r26, 0x00	; 0
    7738:	ed b7       	in	r30, 0x3d	; 61
    773a:	fe b7       	in	r31, 0x3e	; 62
    773c:	81 83       	std	Z+1, r24	; 0x01
    773e:	92 83       	std	Z+2, r25	; 0x02
    7740:	a3 83       	std	Z+3, r26	; 0x03
    7742:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
        if( !rtc_init(1, (time_t) 0) )
    7746:	40 e0       	ldi	r20, 0x00	; 0
    7748:	50 e0       	ldi	r21, 0x00	; 0
    774a:	ba 01       	movw	r22, r20
    774c:	81 e0       	ldi	r24, 0x01	; 1
    774e:	90 e0       	ldi	r25, 0x00	; 0
    7750:	0e 94 39 2f 	call	0x5e72	; 0x5e72 <rtc_init>
    7754:	81 11       	cpse	r24, r1
    7756:	0a c0       	rjmp	.+20     	; 0x776c <initialize_clock+0x6e>
        {
            printf("rtc force init failed\n");
    7758:	8f e7       	ldi	r24, 0x7F	; 127
    775a:	96 e0       	ldi	r25, 0x06	; 6
    775c:	a0 e0       	ldi	r26, 0x00	; 0
    775e:	ed b7       	in	r30, 0x3d	; 61
    7760:	fe b7       	in	r31, 0x3e	; 62
    7762:	81 83       	std	Z+1, r24	; 0x01
    7764:	92 83       	std	Z+2, r25	; 0x02
    7766:	a3 83       	std	Z+3, r26	; 0x03
    7768:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
        }
    }

    if(rtc_read(&tc))
    776c:	ce 01       	movw	r24, r28
    776e:	04 96       	adiw	r24, 0x04	; 4
    7770:	0e 94 9f 2e 	call	0x5d3e	; 0x5d3e <rtc_read>
    7774:	88 23       	and	r24, r24
    7776:	51 f0       	breq	.+20     	; 0x778c <initialize_clock+0x8e>
    {
        seconds = timegm(&tc);
    7778:	ce 01       	movw	r24, r28
    777a:	04 96       	adiw	r24, 0x04	; 4
    777c:	fa dc       	rcall	.-1548   	; 0x7172 <timegm>
    777e:	6b 01       	movw	r12, r22
    7780:	7c 01       	movw	r14, r24
    }
#else
    printf("NO RTC\n");
    seconds = 0;
#endif                                        // RTC_SUPPORT
    if(!seconds)
    7782:	67 2b       	or	r22, r23
    7784:	68 2b       	or	r22, r24
    7786:	69 2b       	or	r22, r25
    7788:	c1 f4       	brne	.+48     	; 0x77ba <initialize_clock+0xbc>
    778a:	0a c0       	rjmp	.+20     	; 0x77a0 <initialize_clock+0xa2>
        seconds = timegm(&tc);
    }
    else
    {
        seconds = 0;
        printf("rtc read errorafter init\n");
    778c:	85 e6       	ldi	r24, 0x65	; 101
    778e:	96 e0       	ldi	r25, 0x06	; 6
    7790:	a0 e0       	ldi	r26, 0x00	; 0
    7792:	ed b7       	in	r30, 0x3d	; 61
    7794:	fe b7       	in	r31, 0x3e	; 62
    7796:	81 83       	std	Z+1, r24	; 0x01
    7798:	92 83       	std	Z+2, r25	; 0x02
    779a:	a3 83       	std	Z+3, r26	; 0x03
    779c:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
#else
    printf("NO RTC\n");
    seconds = 0;
#endif                                        // RTC_SUPPORT
    if(!seconds)
        printf("use setdate command to change time\n");
    77a0:	81 e4       	ldi	r24, 0x41	; 65
    77a2:	96 e0       	ldi	r25, 0x06	; 6
    77a4:	a0 e0       	ldi	r26, 0x00	; 0
    77a6:	ed b7       	in	r30, 0x3d	; 61
    77a8:	fe b7       	in	r31, 0x3e	; 62
    77aa:	81 83       	std	Z+1, r24	; 0x01
    77ac:	92 83       	std	Z+2, r25	; 0x02
    77ae:	a3 83       	std	Z+3, r26	; 0x03
    77b0:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    77b4:	c1 2c       	mov	r12, r1
    77b6:	d1 2c       	mov	r13, r1
    77b8:	76 01       	movw	r14, r12
    tz.tz_minuteswest = minwest;
    77ba:	1b a3       	std	Y+35, r17	; 0x23
    77bc:	0a a3       	std	Y+34, r16	; 0x22
    tz.tz_dsttime = 0;
    77be:	1d a2       	std	Y+37, r1	; 0x25
    77c0:	1c a2       	std	Y+36, r1	; 0x24
    settimezone( &tz );
    77c2:	ce 01       	movw	r24, r28
    77c4:	82 96       	adiw	r24, 0x22	; 34
    77c6:	30 da       	rcall	.-2976   	; 0x6c28 <settimezone>

    ts.tv_sec = seconds;
    77c8:	ca 8e       	std	Y+26, r12	; 0x1a
    77ca:	db 8e       	std	Y+27, r13	; 0x1b
    77cc:	ec 8e       	std	Y+28, r14	; 0x1c
    77ce:	fd 8e       	std	Y+29, r15	; 0x1d
    ts.tv_nsec = 0L;
    77d0:	1e 8e       	std	Y+30, r1	; 0x1e
    77d2:	1f 8e       	std	Y+31, r1	; 0x1f
    77d4:	18 a2       	std	Y+32, r1	; 0x20
    77d6:	19 a2       	std	Y+33, r1	; 0x21
    clock_settime(0, (ts_t *) &ts);
    77d8:	be 01       	movw	r22, r28
    77da:	66 5e       	subi	r22, 0xE6	; 230
    77dc:	7f 4f       	sbci	r23, 0xFF	; 255
    77de:	80 e0       	ldi	r24, 0x00	; 0
    77e0:	90 e0       	ldi	r25, 0x00	; 0
    77e2:	c7 d8       	rcall	.-3698   	; 0x6972 <clock_settime>
}
    77e4:	a5 96       	adiw	r28, 0x25	; 37
    77e6:	e8 e0       	ldi	r30, 0x08	; 8
    77e8:	0c 94 2f e3 	jmp	0x1c65e	; 0x1c65e <__epilogue_restores__+0x14>

000077ec <display_clock>:
/// @see: rtc_read
/// @see: timegm()
/// @see: ascitime()
MEMSPACE
void display_clock()
{
    77ec:	a9 e2       	ldi	r26, 0x29	; 41
    77ee:	b0 e0       	ldi	r27, 0x00	; 0
    77f0:	ec ef       	ldi	r30, 0xFC	; 252
    77f2:	fb e3       	ldi	r31, 0x3B	; 59
    77f4:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__prologue_saves__+0x20>
    time_t seconds;
    tm_t tc;
    ts_t ts;

#ifdef RTC_SUPPORT
    if(rtc_read(&tc))
    77f8:	ce 01       	movw	r24, r28
    77fa:	08 96       	adiw	r24, 0x08	; 8
    77fc:	0e 94 9f 2e 	call	0x5d3e	; 0x5d3e <rtc_read>
    7800:	88 23       	and	r24, r24
    7802:	29 f1       	breq	.+74     	; 0x784e <display_clock+0x62>
    {
        seconds = timegm(&tc);
    7804:	ce 01       	movw	r24, r28
    7806:	08 96       	adiw	r24, 0x08	; 8
    7808:	b4 dc       	rcall	.-1688   	; 0x7172 <timegm>
    780a:	6e a3       	std	Y+38, r22	; 0x26
    780c:	7f a3       	std	Y+39, r23	; 0x27
    780e:	88 a7       	std	Y+40, r24	; 0x28
    7810:	99 a7       	std	Y+41, r25	; 0x29
        printf("rtc seconds: %lu\n",seconds);
    7812:	ed b7       	in	r30, 0x3d	; 61
    7814:	fe b7       	in	r31, 0x3e	; 62
    7816:	64 83       	std	Z+4, r22	; 0x04
    7818:	75 83       	std	Z+5, r23	; 0x05
    781a:	86 83       	std	Z+6, r24	; 0x06
    781c:	97 83       	std	Z+7, r25	; 0x07
    781e:	8f e2       	ldi	r24, 0x2F	; 47
    7820:	96 e0       	ldi	r25, 0x06	; 6
    7822:	a0 e0       	ldi	r26, 0x00	; 0
    7824:	81 83       	std	Z+1, r24	; 0x01
    7826:	92 83       	std	Z+2, r25	; 0x02
    7828:	a3 83       	std	Z+3, r26	; 0x03
    782a:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
        printf("rtc time:    %s\n",asctime(&tc));
    782e:	ce 01       	movw	r24, r28
    7830:	08 96       	adiw	r24, 0x08	; 8
    7832:	50 df       	rcall	.-352    	; 0x76d4 <asctime>
    7834:	ed b7       	in	r30, 0x3d	; 61
    7836:	fe b7       	in	r31, 0x3e	; 62
    7838:	95 83       	std	Z+5, r25	; 0x05
    783a:	84 83       	std	Z+4, r24	; 0x04
    783c:	8e e1       	ldi	r24, 0x1E	; 30
    783e:	96 e0       	ldi	r25, 0x06	; 6
    7840:	a0 e0       	ldi	r26, 0x00	; 0
    7842:	81 83       	std	Z+1, r24	; 0x01
    7844:	92 83       	std	Z+2, r25	; 0x02
    7846:	a3 83       	std	Z+3, r26	; 0x03
    7848:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    784c:	0a c0       	rjmp	.+20     	; 0x7862 <display_clock+0x76>
            (int) tc.tm_wday);
#endif
    }
    else
    {
        printf("RTC read failed\n");
    784e:	8d e0       	ldi	r24, 0x0D	; 13
    7850:	96 e0       	ldi	r25, 0x06	; 6
    7852:	a0 e0       	ldi	r26, 0x00	; 0
    7854:	ed b7       	in	r30, 0x3d	; 61
    7856:	fe b7       	in	r31, 0x3e	; 62
    7858:	81 83       	std	Z+1, r24	; 0x01
    785a:	92 83       	std	Z+2, r25	; 0x02
    785c:	a3 83       	std	Z+3, r26	; 0x03
    785e:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    }
#endif                                        // RTC_SUPPORT

    clock_gettime(0, (ts_t *) &ts);
    7862:	be 01       	movw	r22, r28
    7864:	62 5e       	subi	r22, 0xE2	; 226
    7866:	7f 4f       	sbci	r23, 0xFF	; 255
    7868:	80 e0       	ldi	r24, 0x00	; 0
    786a:	90 e0       	ldi	r25, 0x00	; 0
    786c:	0e 94 10 32 	call	0x6420	; 0x6420 <clock_gettime>
    seconds = ts.tv_sec;
    7870:	8e 8d       	ldd	r24, Y+30	; 0x1e
    7872:	9f 8d       	ldd	r25, Y+31	; 0x1f
    7874:	a8 a1       	ldd	r26, Y+32	; 0x20
    7876:	b9 a1       	ldd	r27, Y+33	; 0x21
    7878:	8e a3       	std	Y+38, r24	; 0x26
    787a:	9f a3       	std	Y+39, r25	; 0x27
    787c:	a8 a7       	std	Y+40, r26	; 0x28
    787e:	b9 a7       	std	Y+41, r27	; 0x29
    printf("clk seconds: %lu\n",seconds);
    7880:	ed b7       	in	r30, 0x3d	; 61
    7882:	fe b7       	in	r31, 0x3e	; 62
    7884:	84 83       	std	Z+4, r24	; 0x04
    7886:	95 83       	std	Z+5, r25	; 0x05
    7888:	a6 83       	std	Z+6, r26	; 0x06
    788a:	b7 83       	std	Z+7, r27	; 0x07
    788c:	8b ef       	ldi	r24, 0xFB	; 251
    788e:	95 e0       	ldi	r25, 0x05	; 5
    7890:	a0 e0       	ldi	r26, 0x00	; 0
    7892:	81 83       	std	Z+1, r24	; 0x01
    7894:	92 83       	std	Z+2, r25	; 0x02
    7896:	a3 83       	std	Z+3, r26	; 0x03
    7898:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    printf("clk time:    %s\n", asctime(gmtime(&seconds)));
    789c:	ce 01       	movw	r24, r28
    789e:	86 96       	adiw	r24, 0x26	; 38
    78a0:	a9 d9       	rcall	.-3246   	; 0x6bf4 <gmtime>
    78a2:	18 df       	rcall	.-464    	; 0x76d4 <asctime>
    78a4:	ed b7       	in	r30, 0x3d	; 61
    78a6:	fe b7       	in	r31, 0x3e	; 62
    78a8:	95 83       	std	Z+5, r25	; 0x05
    78aa:	84 83       	std	Z+4, r24	; 0x04
    78ac:	8a ee       	ldi	r24, 0xEA	; 234
    78ae:	95 e0       	ldi	r25, 0x05	; 5
    78b0:	a0 e0       	ldi	r26, 0x00	; 0
    78b2:	81 83       	std	Z+1, r24	; 0x01
    78b4:	92 83       	std	Z+2, r25	; 0x02
    78b6:	a3 83       	std	Z+3, r26	; 0x03
    78b8:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
}
    78bc:	a9 96       	adiw	r28, 0x29	; 41
    78be:	e2 e0       	ldi	r30, 0x02	; 2
    78c0:	0c 94 35 e3 	jmp	0x1c66a	; 0x1c66a <__epilogue_restores__+0x20>

000078c4 <_putc_buffer_fn>:
    va_start(va, format);
    _printf_fn(&fn, format, va);
    va_end(va);

    return ((int)fn.sent);
}
    78c4:	fc 01       	movw	r30, r24
    78c6:	84 81       	ldd	r24, Z+4	; 0x04
    78c8:	95 81       	ldd	r25, Z+5	; 0x05
    78ca:	00 97       	sbiw	r24, 0x00	; 0
    78cc:	79 f0       	breq	.+30     	; 0x78ec <_putc_buffer_fn+0x28>
    78ce:	66 23       	and	r22, r22
    78d0:	69 f0       	breq	.+26     	; 0x78ec <_putc_buffer_fn+0x28>
    78d2:	01 97       	sbiw	r24, 0x01	; 1
    78d4:	95 83       	std	Z+5, r25	; 0x05
    78d6:	84 83       	std	Z+4, r24	; 0x04
    78d8:	86 81       	ldd	r24, Z+6	; 0x06
    78da:	97 81       	ldd	r25, Z+7	; 0x07
    78dc:	01 96       	adiw	r24, 0x01	; 1
    78de:	97 83       	std	Z+7, r25	; 0x07
    78e0:	86 83       	std	Z+6, r24	; 0x06
    78e2:	a2 81       	ldd	r26, Z+2	; 0x02
    78e4:	b3 81       	ldd	r27, Z+3	; 0x03
    78e6:	6d 93       	st	X+, r22
    78e8:	b3 83       	std	Z+3, r27	; 0x03
    78ea:	a2 83       	std	Z+2, r26	; 0x02
    78ec:	02 80       	ldd	r0, Z+2	; 0x02
    78ee:	f3 81       	ldd	r31, Z+3	; 0x03
    78f0:	e0 2d       	mov	r30, r0
    78f2:	10 82       	st	Z, r1
    78f4:	08 95       	ret

000078f6 <_putc_fn>:
    78f6:	fc 01       	movw	r30, r24
    78f8:	26 81       	ldd	r18, Z+6	; 0x06
    78fa:	37 81       	ldd	r19, Z+7	; 0x07
    78fc:	2f 5f       	subi	r18, 0xFF	; 255
    78fe:	3f 4f       	sbci	r19, 0xFF	; 255
    7900:	37 83       	std	Z+7, r19	; 0x07
    7902:	26 83       	std	Z+6, r18	; 0x06
    7904:	86 2f       	mov	r24, r22
    7906:	90 e0       	ldi	r25, 0x00	; 0
    7908:	0c 94 9d 74 	jmp	0xe93a	; 0xe93a <putchar>
    790c:	08 95       	ret

0000790e <bin2num>:
    790e:	a0 e0       	ldi	r26, 0x00	; 0
    7910:	b0 e0       	ldi	r27, 0x00	; 0
    7912:	ed e8       	ldi	r30, 0x8D	; 141
    7914:	fc e3       	ldi	r31, 0x3C	; 60
    7916:	0c 94 10 e3 	jmp	0x1c620	; 0x1c620 <__prologue_saves__+0xe>
    791a:	ea 01       	movw	r28, r20
    791c:	53 e0       	ldi	r21, 0x03	; 3
    791e:	ee 0c       	add	r14, r14
    7920:	ff 1c       	adc	r15, r15
    7922:	5a 95       	dec	r21
    7924:	e1 f7       	brne	.-8      	; 0x791e <bin2num+0x10>
    7926:	fc 01       	movw	r30, r24
    7928:	af 01       	movw	r20, r30
    792a:	48 1b       	sub	r20, r24
    792c:	59 0b       	sbc	r21, r25
    792e:	c4 17       	cp	r28, r20
    7930:	d5 07       	cpc	r29, r21
    7932:	14 f0       	brlt	.+4      	; 0x7938 <bin2num+0x2a>
    7934:	11 92       	st	Z+, r1
    7936:	f8 cf       	rjmp	.-16     	; 0x7928 <bin2num+0x1a>
    7938:	41 e0       	ldi	r20, 0x01	; 1
    793a:	e4 1a       	sub	r14, r20
    793c:	f1 08       	sbc	r15, r1
    793e:	5b 01       	movw	r10, r22
    7940:	42 e0       	ldi	r20, 0x02	; 2
    7942:	a4 1a       	sub	r10, r20
    7944:	b1 08       	sbc	r11, r1
    7946:	f7 fc       	sbrc	r15, 7
    7948:	3b c0       	rjmp	.+118    	; 0x79c0 <bin2num+0xb2>
    794a:	f7 01       	movw	r30, r14
    794c:	43 e0       	ldi	r20, 0x03	; 3
    794e:	f5 95       	asr	r31
    7950:	e7 95       	ror	r30
    7952:	4a 95       	dec	r20
    7954:	e1 f7       	brne	.-8      	; 0x794e <bin2num+0x40>
    7956:	e0 0f       	add	r30, r16
    7958:	f1 1f       	adc	r31, r17
    795a:	40 81       	ld	r20, Z
    795c:	50 e0       	ldi	r21, 0x00	; 0
    795e:	f7 01       	movw	r30, r14
    7960:	e7 70       	andi	r30, 0x07	; 7
    7962:	ff 27       	eor	r31, r31
    7964:	02 c0       	rjmp	.+4      	; 0x796a <bin2num+0x5c>
    7966:	55 95       	asr	r21
    7968:	47 95       	ror	r20
    796a:	ea 95       	dec	r30
    796c:	e2 f7       	brpl	.-8      	; 0x7966 <bin2num+0x58>
    796e:	41 70       	andi	r20, 0x01	; 1
    7970:	55 27       	eor	r21, r21
    7972:	dc 01       	movw	r26, r24
    7974:	e0 e0       	ldi	r30, 0x00	; 0
    7976:	f0 e0       	ldi	r31, 0x00	; 0
    7978:	ec 17       	cp	r30, r28
    797a:	fd 07       	cpc	r31, r29
    797c:	ec f4       	brge	.+58     	; 0x79b8 <bin2num+0xaa>
    797e:	ea 15       	cp	r30, r10
    7980:	fb 05       	cpc	r31, r11
    7982:	4c f0       	brlt	.+18     	; 0x7996 <bin2num+0x88>
    7984:	dc 01       	movw	r26, r24
    7986:	ae 0f       	add	r26, r30
    7988:	bf 1f       	adc	r27, r31
    798a:	1c 92       	st	X, r1
    798c:	41 e0       	ldi	r20, 0x01	; 1
    798e:	e4 1a       	sub	r14, r20
    7990:	f1 08       	sbc	r15, r1
    7992:	ef 01       	movw	r28, r30
    7994:	d8 cf       	rjmp	.-80     	; 0x7946 <bin2num+0x38>
    7996:	9c 90       	ld	r9, X
    7998:	99 0c       	add	r9, r9
    799a:	94 2a       	or	r9, r20
    799c:	49 2d       	mov	r20, r9
    799e:	50 e0       	ldi	r21, 0x00	; 0
    79a0:	42 17       	cp	r20, r18
    79a2:	53 07       	cpc	r21, r19
    79a4:	24 f0       	brlt	.+8      	; 0x79ae <bin2num+0xa0>
    79a6:	92 1a       	sub	r9, r18
    79a8:	41 e0       	ldi	r20, 0x01	; 1
    79aa:	50 e0       	ldi	r21, 0x00	; 0
    79ac:	02 c0       	rjmp	.+4      	; 0x79b2 <bin2num+0xa4>
    79ae:	40 e0       	ldi	r20, 0x00	; 0
    79b0:	50 e0       	ldi	r21, 0x00	; 0
    79b2:	9d 92       	st	X+, r9
    79b4:	31 96       	adiw	r30, 0x01	; 1
    79b6:	e0 cf       	rjmp	.-64     	; 0x7978 <bin2num+0x6a>
    79b8:	41 15       	cp	r20, r1
    79ba:	51 05       	cpc	r21, r1
    79bc:	01 f7       	brne	.-64     	; 0x797e <bin2num+0x70>
    79be:	e2 cf       	rjmp	.-60     	; 0x7984 <bin2num+0x76>
    79c0:	fc 01       	movw	r30, r24
    79c2:	9f 01       	movw	r18, r30
    79c4:	28 1b       	sub	r18, r24
    79c6:	39 0b       	sbc	r19, r25
    79c8:	2c 17       	cp	r18, r28
    79ca:	3d 07       	cpc	r19, r29
    79cc:	4c f4       	brge	.+18     	; 0x79e0 <bin2num+0xd2>
    79ce:	20 81       	ld	r18, Z
    79d0:	2a 30       	cpi	r18, 0x0A	; 10
    79d2:	10 f4       	brcc	.+4      	; 0x79d8 <bin2num+0xca>
    79d4:	20 5d       	subi	r18, 0xD0	; 208
    79d6:	01 c0       	rjmp	.+2      	; 0x79da <bin2num+0xcc>
    79d8:	29 5a       	subi	r18, 0xA9	; 169
    79da:	20 83       	st	Z, r18
    79dc:	31 96       	adiw	r30, 0x01	; 1
    79de:	f1 cf       	rjmp	.-30     	; 0x79c2 <bin2num+0xb4>
    79e0:	9e 01       	movw	r18, r28
    79e2:	d7 ff       	sbrs	r29, 7
    79e4:	02 c0       	rjmp	.+4      	; 0x79ea <bin2num+0xdc>
    79e6:	20 e0       	ldi	r18, 0x00	; 0
    79e8:	30 e0       	ldi	r19, 0x00	; 0
    79ea:	c1 14       	cp	r12, r1
    79ec:	d1 04       	cpc	r13, r1
    79ee:	61 f0       	breq	.+24     	; 0x7a08 <bin2num+0xfa>
    79f0:	61 50       	subi	r22, 0x01	; 1
    79f2:	71 09       	sbc	r23, r1
    79f4:	26 17       	cp	r18, r22
    79f6:	37 07       	cpc	r19, r23
    79f8:	3c f4       	brge	.+14     	; 0x7a08 <bin2num+0xfa>
    79fa:	fc 01       	movw	r30, r24
    79fc:	e2 0f       	add	r30, r18
    79fe:	f3 1f       	adc	r31, r19
    7a00:	c0 82       	st	Z, r12
    7a02:	21 96       	adiw	r28, 0x01	; 1
    7a04:	2f 5f       	subi	r18, 0xFF	; 255
    7a06:	3f 4f       	sbci	r19, 0xFF	; 255
    7a08:	fc 01       	movw	r30, r24
    7a0a:	e2 0f       	add	r30, r18
    7a0c:	f3 1f       	adc	r31, r19
    7a0e:	10 82       	st	Z, r1
    7a10:	0e 94 c7 2f 	call	0x5f8e	; 0x5f8e <reverse>
    7a14:	ce 01       	movw	r24, r28
    7a16:	cd b7       	in	r28, 0x3d	; 61
    7a18:	de b7       	in	r29, 0x3e	; 62
    7a1a:	eb e0       	ldi	r30, 0x0B	; 11
    7a1c:	0c 94 2c e3 	jmp	0x1c658	; 0x1c658 <__epilogue_restores__+0xe>

00007a20 <pch>:
    7a20:	fc 01       	movw	r30, r24
    7a22:	22 81       	ldd	r18, Z+2	; 0x02
    7a24:	33 81       	ldd	r19, Z+3	; 0x03
    7a26:	44 81       	ldd	r20, Z+4	; 0x04
    7a28:	55 81       	ldd	r21, Z+5	; 0x05
    7a2a:	80 81       	ld	r24, Z
    7a2c:	91 81       	ldd	r25, Z+1	; 0x01
    7a2e:	24 17       	cp	r18, r20
    7a30:	35 07       	cpc	r19, r21
    7a32:	54 f4       	brge	.+20     	; 0x7a48 <pch+0x28>
    7a34:	a9 01       	movw	r20, r18
    7a36:	4f 5f       	subi	r20, 0xFF	; 255
    7a38:	5f 4f       	sbci	r21, 0xFF	; 255
    7a3a:	53 83       	std	Z+3, r21	; 0x03
    7a3c:	42 83       	std	Z+2, r20	; 0x02
    7a3e:	dc 01       	movw	r26, r24
    7a40:	a2 0f       	add	r26, r18
    7a42:	b3 1f       	adc	r27, r19
    7a44:	6c 93       	st	X, r22
    7a46:	04 c0       	rjmp	.+8      	; 0x7a50 <pch+0x30>
    7a48:	dc 01       	movw	r26, r24
    7a4a:	a2 0f       	add	r26, r18
    7a4c:	b3 1f       	adc	r27, r19
    7a4e:	1c 92       	st	X, r1
    7a50:	82 81       	ldd	r24, Z+2	; 0x02
    7a52:	93 81       	ldd	r25, Z+3	; 0x03
    7a54:	08 95       	ret

00007a56 <p_ntoa>:
    7a56:	af 92       	push	r10
    7a58:	cf 92       	push	r12
    7a5a:	df 92       	push	r13
    7a5c:	ef 92       	push	r14
    7a5e:	ff 92       	push	r15
    7a60:	0f 93       	push	r16
    7a62:	1f 93       	push	r17
    7a64:	cf 93       	push	r28
    7a66:	df 93       	push	r29
    7a68:	dc 01       	movw	r26, r24
    7a6a:	eb 01       	movw	r28, r22
    7a6c:	fa 01       	movw	r30, r20
    7a6e:	b9 01       	movw	r22, r18
    7a70:	98 01       	movw	r18, r16
    7a72:	a6 01       	movw	r20, r12
    7a74:	9a 2d       	mov	r25, r10
    7a76:	a5 fa       	bst	r10, 5
    7a78:	cc 24       	eor	r12, r12
    7a7a:	c0 f8       	bld	r12, 0
    7a7c:	a6 fc       	sbrc	r10, 6
    7a7e:	07 c0       	rjmp	.+14     	; 0x7a8e <p_ntoa+0x38>
    7a80:	a2 fc       	sbrc	r10, 2
    7a82:	08 c0       	rjmp	.+16     	; 0x7a94 <p_ntoa+0x3e>
    7a84:	a4 fe       	sbrs	r10, 4
    7a86:	09 c0       	rjmp	.+18     	; 0x7a9a <p_ntoa+0x44>
    7a88:	00 e2       	ldi	r16, 0x20	; 32
    7a8a:	10 e0       	ldi	r17, 0x00	; 0
    7a8c:	08 c0       	rjmp	.+16     	; 0x7a9e <p_ntoa+0x48>
    7a8e:	0d e2       	ldi	r16, 0x2D	; 45
    7a90:	10 e0       	ldi	r17, 0x00	; 0
    7a92:	05 c0       	rjmp	.+10     	; 0x7a9e <p_ntoa+0x48>
    7a94:	0b e2       	ldi	r16, 0x2B	; 43
    7a96:	10 e0       	ldi	r17, 0x00	; 0
    7a98:	02 c0       	rjmp	.+4      	; 0x7a9e <p_ntoa+0x48>
    7a9a:	00 e0       	ldi	r16, 0x00	; 0
    7a9c:	10 e0       	ldi	r17, 0x00	; 0
    7a9e:	95 ff       	sbrs	r25, 5
    7aa0:	04 c0       	rjmp	.+8      	; 0x7aaa <p_ntoa+0x54>
    7aa2:	89 2f       	mov	r24, r25
    7aa4:	8a 70       	andi	r24, 0x0A	; 10
    7aa6:	09 f0       	breq	.+2      	; 0x7aaa <p_ntoa+0x54>
    7aa8:	c1 2c       	mov	r12, r1
    7aaa:	c0 fa       	bst	r12, 0
    7aac:	95 f9       	bld	r25, 5
    7aae:	89 2f       	mov	r24, r25
    7ab0:	82 70       	andi	r24, 0x02	; 2
    7ab2:	c8 2e       	mov	r12, r24
    7ab4:	91 fd       	sbrc	r25, 1
    7ab6:	02 c0       	rjmp	.+4      	; 0x7abc <p_ntoa+0x66>
    7ab8:	40 e0       	ldi	r20, 0x00	; 0
    7aba:	50 e0       	ldi	r21, 0x00	; 0
    7abc:	89 2f       	mov	r24, r25
    7abe:	83 70       	andi	r24, 0x03	; 3
    7ac0:	11 f4       	brne	.+4      	; 0x7ac6 <p_ntoa+0x70>
    7ac2:	41 e0       	ldi	r20, 0x01	; 1
    7ac4:	50 e0       	ldi	r21, 0x00	; 0
    7ac6:	90 ff       	sbrs	r25, 0
    7ac8:	0c c0       	rjmp	.+24     	; 0x7ae2 <p_ntoa+0x8c>
    7aca:	95 fd       	sbrc	r25, 5
    7acc:	05 c0       	rjmp	.+10     	; 0x7ad8 <p_ntoa+0x82>
    7ace:	c1 10       	cpse	r12, r1
    7ad0:	08 c0       	rjmp	.+16     	; 0x7ae2 <p_ntoa+0x8c>
    7ad2:	41 e0       	ldi	r20, 0x01	; 1
    7ad4:	50 e0       	ldi	r21, 0x00	; 0
    7ad6:	05 c0       	rjmp	.+10     	; 0x7ae2 <p_ntoa+0x8c>
    7ad8:	94 75       	andi	r25, 0x54	; 84
    7ada:	a7 01       	movw	r20, r14
    7adc:	11 f0       	breq	.+4      	; 0x7ae2 <p_ntoa+0x8c>
    7ade:	41 50       	subi	r20, 0x01	; 1
    7ae0:	51 09       	sbc	r21, r1
    7ae2:	68 01       	movw	r12, r16
    7ae4:	7e 01       	movw	r14, r28
    7ae6:	8d 01       	movw	r16, r26
    7ae8:	cf 01       	movw	r24, r30
    7aea:	11 df       	rcall	.-478    	; 0x790e <bin2num>
    7aec:	df 91       	pop	r29
    7aee:	cf 91       	pop	r28
    7af0:	1f 91       	pop	r17
    7af2:	0f 91       	pop	r16
    7af4:	ff 90       	pop	r15
    7af6:	ef 90       	pop	r14
    7af8:	df 90       	pop	r13
    7afa:	cf 90       	pop	r12
    7afc:	af 90       	pop	r10
    7afe:	08 95       	ret

00007b00 <p_ftoa>:
    7b00:	aa e0       	ldi	r26, 0x0A	; 10
    7b02:	b0 e0       	ldi	r27, 0x00	; 0
    7b04:	e6 e8       	ldi	r30, 0x86	; 134
    7b06:	fd e3       	ldi	r31, 0x3D	; 61
    7b08:	0c 94 09 e3 	jmp	0x1c612	; 0x1c612 <__prologue_saves__>
    7b0c:	4b 01       	movw	r8, r22
    7b0e:	5c 01       	movw	r10, r24
    7b10:	1a 01       	movw	r2, r20
    7b12:	28 01       	movw	r4, r16
    7b14:	c6 fa       	bst	r12, 6
    7b16:	11 27       	eor	r17, r17
    7b18:	10 f9       	bld	r17, 0
    7b1a:	5a 83       	std	Y+2, r21	; 0x02
    7b1c:	49 83       	std	Y+1, r20	; 0x01
    7b1e:	1c 82       	std	Y+4, r1	; 0x04
    7b20:	1b 82       	std	Y+3, r1	; 0x03
    7b22:	21 50       	subi	r18, 0x01	; 1
    7b24:	31 09       	sbc	r19, r1
    7b26:	3e 83       	std	Y+6, r19	; 0x06
    7b28:	2d 83       	std	Y+5, r18	; 0x05
    7b2a:	fa 01       	movw	r30, r20
    7b2c:	10 82       	st	Z, r1
    7b2e:	20 e0       	ldi	r18, 0x00	; 0
    7b30:	30 e0       	ldi	r19, 0x00	; 0
    7b32:	a9 01       	movw	r20, r18
    7b34:	0e 94 c7 e3 	call	0x1c78e	; 0x1c78e <__cmpsf2>
    7b38:	87 ff       	sbrs	r24, 7
    7b3a:	05 c0       	rjmp	.+10     	; 0x7b46 <p_ftoa+0x46>
    7b3c:	b7 fa       	bst	r11, 7
    7b3e:	b0 94       	com	r11
    7b40:	b7 f8       	bld	r11, 7
    7b42:	b0 94       	com	r11
    7b44:	11 e0       	ldi	r17, 0x01	; 1
    7b46:	10 fb       	bst	r17, 0
    7b48:	c6 f8       	bld	r12, 6
    7b4a:	c6 fe       	sbrs	r12, 6
    7b4c:	02 c0       	rjmp	.+4      	; 0x7b52 <p_ftoa+0x52>
    7b4e:	6d e2       	ldi	r22, 0x2D	; 45
    7b50:	07 c0       	rjmp	.+14     	; 0x7b60 <p_ftoa+0x60>
    7b52:	c2 fe       	sbrs	r12, 2
    7b54:	02 c0       	rjmp	.+4      	; 0x7b5a <p_ftoa+0x5a>
    7b56:	6b e2       	ldi	r22, 0x2B	; 43
    7b58:	03 c0       	rjmp	.+6      	; 0x7b60 <p_ftoa+0x60>
    7b5a:	c4 fe       	sbrs	r12, 4
    7b5c:	04 c0       	rjmp	.+8      	; 0x7b66 <p_ftoa+0x66>
    7b5e:	60 e2       	ldi	r22, 0x20	; 32
    7b60:	ce 01       	movw	r24, r28
    7b62:	01 96       	adiw	r24, 0x01	; 1
    7b64:	5d df       	rcall	.-326    	; 0x7a20 <pch>
    7b66:	37 01       	movw	r6, r14
    7b68:	f7 fe       	sbrs	r15, 7
    7b6a:	02 c0       	rjmp	.+4      	; 0x7b70 <p_ftoa+0x70>
    7b6c:	61 2c       	mov	r6, r1
    7b6e:	71 2c       	mov	r7, r1
    7b70:	20 e0       	ldi	r18, 0x00	; 0
    7b72:	30 e0       	ldi	r19, 0x00	; 0
    7b74:	a9 01       	movw	r20, r18
    7b76:	c5 01       	movw	r24, r10
    7b78:	b4 01       	movw	r22, r8
    7b7a:	0e 94 c7 e3 	call	0x1c78e	; 0x1c78e <__cmpsf2>
    7b7e:	88 23       	and	r24, r24
    7b80:	d1 f1       	breq	.+116    	; 0x7bf6 <p_ftoa+0xf6>
    7b82:	c1 fe       	sbrs	r12, 1
    7b84:	11 c0       	rjmp	.+34     	; 0x7ba8 <p_ftoa+0xa8>
    7b86:	83 01       	movw	r16, r6
    7b88:	60 e0       	ldi	r22, 0x00	; 0
    7b8a:	70 e0       	ldi	r23, 0x00	; 0
    7b8c:	80 e0       	ldi	r24, 0x00	; 0
    7b8e:	9f e3       	ldi	r25, 0x3F	; 63
    7b90:	01 15       	cp	r16, r1
    7b92:	11 05       	cpc	r17, r1
    7b94:	69 f0       	breq	.+26     	; 0x7bb0 <p_ftoa+0xb0>
    7b96:	20 e0       	ldi	r18, 0x00	; 0
    7b98:	30 e0       	ldi	r19, 0x00	; 0
    7b9a:	40 e2       	ldi	r20, 0x20	; 32
    7b9c:	51 e4       	ldi	r21, 0x41	; 65
    7b9e:	0e 94 cb e3 	call	0x1c796	; 0x1c796 <__divsf3>
    7ba2:	01 50       	subi	r16, 0x01	; 1
    7ba4:	11 09       	sbc	r17, r1
    7ba6:	f4 cf       	rjmp	.-24     	; 0x7b90 <p_ftoa+0x90>
    7ba8:	60 e0       	ldi	r22, 0x00	; 0
    7baa:	70 e0       	ldi	r23, 0x00	; 0
    7bac:	80 e0       	ldi	r24, 0x00	; 0
    7bae:	9f e3       	ldi	r25, 0x3F	; 63
    7bb0:	9b 01       	movw	r18, r22
    7bb2:	ac 01       	movw	r20, r24
    7bb4:	c5 01       	movw	r24, r10
    7bb6:	b4 01       	movw	r22, r8
    7bb8:	0e 94 63 e3 	call	0x1c6c6	; 0x1c6c6 <__addsf3>
    7bbc:	4b 01       	movw	r8, r22
    7bbe:	5c 01       	movw	r10, r24
    7bc0:	ee 24       	eor	r14, r14
    7bc2:	e3 94       	inc	r14
    7bc4:	f1 2c       	mov	r15, r1
    7bc6:	20 e0       	ldi	r18, 0x00	; 0
    7bc8:	30 e0       	ldi	r19, 0x00	; 0
    7bca:	40 e2       	ldi	r20, 0x20	; 32
    7bcc:	51 e4       	ldi	r21, 0x41	; 65
    7bce:	c5 01       	movw	r24, r10
    7bd0:	b4 01       	movw	r22, r8
    7bd2:	0e 94 16 e5 	call	0x1ca2c	; 0x1ca2c <__gesf2>
    7bd6:	87 fd       	sbrc	r24, 7
    7bd8:	11 c0       	rjmp	.+34     	; 0x7bfc <p_ftoa+0xfc>
    7bda:	ff ef       	ldi	r31, 0xFF	; 255
    7bdc:	ef 1a       	sub	r14, r31
    7bde:	ff 0a       	sbc	r15, r31
    7be0:	20 e0       	ldi	r18, 0x00	; 0
    7be2:	30 e0       	ldi	r19, 0x00	; 0
    7be4:	40 e2       	ldi	r20, 0x20	; 32
    7be6:	51 e4       	ldi	r21, 0x41	; 65
    7be8:	c5 01       	movw	r24, r10
    7bea:	b4 01       	movw	r22, r8
    7bec:	0e 94 cb e3 	call	0x1c796	; 0x1c796 <__divsf3>
    7bf0:	4b 01       	movw	r8, r22
    7bf2:	5c 01       	movw	r10, r24
    7bf4:	e8 cf       	rjmp	.-48     	; 0x7bc6 <p_ftoa+0xc6>
    7bf6:	ee 24       	eor	r14, r14
    7bf8:	e3 94       	inc	r14
    7bfa:	f1 2c       	mov	r15, r1
    7bfc:	8c 2d       	mov	r24, r12
    7bfe:	88 72       	andi	r24, 0x28	; 40
    7c00:	80 32       	cpi	r24, 0x20	; 32
    7c02:	c1 f4       	brne	.+48     	; 0x7c34 <p_ftoa+0x134>
    7c04:	82 01       	movw	r16, r4
    7c06:	0e 19       	sub	r16, r14
    7c08:	1f 09       	sbc	r17, r15
    7c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    7c0c:	9c 81       	ldd	r25, Y+4	; 0x04
    7c0e:	08 1b       	sub	r16, r24
    7c10:	19 0b       	sbc	r17, r25
    7c12:	c1 fe       	sbrs	r12, 1
    7c14:	07 c0       	rjmp	.+14     	; 0x7c24 <p_ftoa+0x124>
    7c16:	61 14       	cp	r6, r1
    7c18:	71 04       	cpc	r7, r1
    7c1a:	21 f0       	breq	.+8      	; 0x7c24 <p_ftoa+0x124>
    7c1c:	06 19       	sub	r16, r6
    7c1e:	17 09       	sbc	r17, r7
    7c20:	01 50       	subi	r16, 0x01	; 1
    7c22:	11 09       	sbc	r17, r1
    7c24:	10 16       	cp	r1, r16
    7c26:	11 06       	cpc	r1, r17
    7c28:	2c f4       	brge	.+10     	; 0x7c34 <p_ftoa+0x134>
    7c2a:	60 e3       	ldi	r22, 0x30	; 48
    7c2c:	ce 01       	movw	r24, r28
    7c2e:	01 96       	adiw	r24, 0x01	; 1
    7c30:	f7 de       	rcall	.-530    	; 0x7a20 <pch>
    7c32:	f6 cf       	rjmp	.-20     	; 0x7c20 <p_ftoa+0x120>
    7c34:	c5 01       	movw	r24, r10
    7c36:	b4 01       	movw	r22, r8
    7c38:	0e 94 33 e4 	call	0x1c866	; 0x1c866 <__fixsfsi>
    7c3c:	6f 83       	std	Y+7, r22	; 0x07
    7c3e:	78 87       	std	Y+8, r23	; 0x08
    7c40:	89 87       	std	Y+9, r24	; 0x09
    7c42:	9a 87       	std	Y+10, r25	; 0x0a
    7c44:	6f 81       	ldd	r22, Y+7	; 0x07
    7c46:	60 5d       	subi	r22, 0xD0	; 208
    7c48:	ce 01       	movw	r24, r28
    7c4a:	01 96       	adiw	r24, 0x01	; 1
    7c4c:	e9 de       	rcall	.-558    	; 0x7a20 <pch>
    7c4e:	2f 81       	ldd	r18, Y+7	; 0x07
    7c50:	38 85       	ldd	r19, Y+8	; 0x08
    7c52:	b9 01       	movw	r22, r18
    7c54:	33 0f       	add	r19, r19
    7c56:	88 0b       	sbc	r24, r24
    7c58:	99 0b       	sbc	r25, r25
    7c5a:	0e 94 66 e4 	call	0x1c8cc	; 0x1c8cc <__floatsisf>
    7c5e:	9b 01       	movw	r18, r22
    7c60:	ac 01       	movw	r20, r24
    7c62:	c5 01       	movw	r24, r10
    7c64:	b4 01       	movw	r22, r8
    7c66:	0e 94 62 e3 	call	0x1c6c4	; 0x1c6c4 <__subsf3>
    7c6a:	31 e0       	ldi	r19, 0x01	; 1
    7c6c:	e3 1a       	sub	r14, r19
    7c6e:	f1 08       	sbc	r15, r1
    7c70:	20 e0       	ldi	r18, 0x00	; 0
    7c72:	30 e0       	ldi	r19, 0x00	; 0
    7c74:	40 e2       	ldi	r20, 0x20	; 32
    7c76:	51 e4       	ldi	r21, 0x41	; 65
    7c78:	0e 94 1a e5 	call	0x1ca34	; 0x1ca34 <__mulsf3>
    7c7c:	4b 01       	movw	r8, r22
    7c7e:	5c 01       	movw	r10, r24
    7c80:	e1 14       	cp	r14, r1
    7c82:	f1 04       	cpc	r15, r1
    7c84:	b9 f6       	brne	.-82     	; 0x7c34 <p_ftoa+0x134>
    7c86:	c1 fc       	sbrc	r12, 1
    7c88:	10 c0       	rjmp	.+32     	; 0x7caa <p_ftoa+0x1aa>
    7c8a:	60 e0       	ldi	r22, 0x00	; 0
    7c8c:	ce 01       	movw	r24, r28
    7c8e:	01 96       	adiw	r24, 0x01	; 1
    7c90:	c7 de       	rcall	.-626    	; 0x7a20 <pch>
    7c92:	f1 01       	movw	r30, r2
    7c94:	01 90       	ld	r0, Z+
    7c96:	00 20       	and	r0, r0
    7c98:	e9 f7       	brne	.-6      	; 0x7c94 <p_ftoa+0x194>
    7c9a:	31 97       	sbiw	r30, 0x01	; 1
    7c9c:	cf 01       	movw	r24, r30
    7c9e:	82 19       	sub	r24, r2
    7ca0:	93 09       	sbc	r25, r3
    7ca2:	2a 96       	adiw	r28, 0x0a	; 10
    7ca4:	e2 e1       	ldi	r30, 0x12	; 18
    7ca6:	0c 94 25 e3 	jmp	0x1c64a	; 0x1c64a <__epilogue_restores__>
    7caa:	61 14       	cp	r6, r1
    7cac:	71 04       	cpc	r7, r1
    7cae:	69 f3       	breq	.-38     	; 0x7c8a <p_ftoa+0x18a>
    7cb0:	6e e2       	ldi	r22, 0x2E	; 46
    7cb2:	ce 01       	movw	r24, r28
    7cb4:	01 96       	adiw	r24, 0x01	; 1
    7cb6:	b4 de       	rcall	.-664    	; 0x7a20 <pch>
    7cb8:	c5 01       	movw	r24, r10
    7cba:	b4 01       	movw	r22, r8
    7cbc:	0e 94 33 e4 	call	0x1c866	; 0x1c866 <__fixsfsi>
    7cc0:	6b 01       	movw	r12, r22
    7cc2:	7c 01       	movw	r14, r24
    7cc4:	07 2e       	mov	r0, r23
    7cc6:	00 0c       	add	r0, r0
    7cc8:	88 0b       	sbc	r24, r24
    7cca:	99 0b       	sbc	r25, r25
    7ccc:	0e 94 66 e4 	call	0x1c8cc	; 0x1c8cc <__floatsisf>
    7cd0:	9b 01       	movw	r18, r22
    7cd2:	ac 01       	movw	r20, r24
    7cd4:	c5 01       	movw	r24, r10
    7cd6:	b4 01       	movw	r22, r8
    7cd8:	0e 94 62 e3 	call	0x1c6c4	; 0x1c6c4 <__subsf3>
    7cdc:	4b 01       	movw	r8, r22
    7cde:	5c 01       	movw	r10, r24
    7ce0:	b6 01       	movw	r22, r12
    7ce2:	60 5d       	subi	r22, 0xD0	; 208
    7ce4:	7f 4f       	sbci	r23, 0xFF	; 255
    7ce6:	ce 01       	movw	r24, r28
    7ce8:	01 96       	adiw	r24, 0x01	; 1
    7cea:	9a de       	rcall	.-716    	; 0x7a20 <pch>
    7cec:	81 e0       	ldi	r24, 0x01	; 1
    7cee:	68 1a       	sub	r6, r24
    7cf0:	71 08       	sbc	r7, r1
    7cf2:	20 e0       	ldi	r18, 0x00	; 0
    7cf4:	30 e0       	ldi	r19, 0x00	; 0
    7cf6:	40 e2       	ldi	r20, 0x20	; 32
    7cf8:	51 e4       	ldi	r21, 0x41	; 65
    7cfa:	c5 01       	movw	r24, r10
    7cfc:	b4 01       	movw	r22, r8
    7cfe:	0e 94 1a e5 	call	0x1ca34	; 0x1ca34 <__mulsf3>
    7d02:	4b 01       	movw	r8, r22
    7d04:	5c 01       	movw	r10, r24
    7d06:	61 14       	cp	r6, r1
    7d08:	71 04       	cpc	r7, r1
    7d0a:	b1 f6       	brne	.-84     	; 0x7cb8 <p_ftoa+0x1b8>
    7d0c:	be cf       	rjmp	.-132    	; 0x7c8a <p_ftoa+0x18a>

00007d0e <p_etoa>:
    7d0e:	a3 e1       	ldi	r26, 0x13	; 19
    7d10:	b0 e0       	ldi	r27, 0x00	; 0
    7d12:	ed e8       	ldi	r30, 0x8D	; 141
    7d14:	fe e3       	ldi	r31, 0x3E	; 62
    7d16:	0c 94 09 e3 	jmp	0x1c612	; 0x1c612 <__prologue_saves__>
    7d1a:	4b 01       	movw	r8, r22
    7d1c:	5c 01       	movw	r10, r24
    7d1e:	59 8b       	std	Y+17, r21	; 0x11
    7d20:	48 8b       	std	Y+16, r20	; 0x10
    7d22:	1b 8b       	std	Y+19, r17	; 0x13
    7d24:	0a 8b       	std	Y+18, r16	; 0x12
    7d26:	3c 2c       	mov	r3, r12
    7d28:	c6 fa       	bst	r12, 6
    7d2a:	11 27       	eor	r17, r17
    7d2c:	10 f9       	bld	r17, 0
    7d2e:	59 87       	std	Y+9, r21	; 0x09
    7d30:	48 87       	std	Y+8, r20	; 0x08
    7d32:	1b 86       	std	Y+11, r1	; 0x0b
    7d34:	1a 86       	std	Y+10, r1	; 0x0a
    7d36:	21 50       	subi	r18, 0x01	; 1
    7d38:	31 09       	sbc	r19, r1
    7d3a:	3d 87       	std	Y+13, r19	; 0x0d
    7d3c:	2c 87       	std	Y+12, r18	; 0x0c
    7d3e:	fa 01       	movw	r30, r20
    7d40:	10 82       	st	Z, r1
    7d42:	20 e0       	ldi	r18, 0x00	; 0
    7d44:	30 e0       	ldi	r19, 0x00	; 0
    7d46:	a9 01       	movw	r20, r18
    7d48:	0e 94 c7 e3 	call	0x1c78e	; 0x1c78e <__cmpsf2>
    7d4c:	87 ff       	sbrs	r24, 7
    7d4e:	05 c0       	rjmp	.+10     	; 0x7d5a <p_etoa+0x4c>
    7d50:	b7 fa       	bst	r11, 7
    7d52:	b0 94       	com	r11
    7d54:	b7 f8       	bld	r11, 7
    7d56:	b0 94       	com	r11
    7d58:	11 e0       	ldi	r17, 0x01	; 1
    7d5a:	10 fb       	bst	r17, 0
    7d5c:	36 f8       	bld	r3, 6
    7d5e:	36 fe       	sbrs	r3, 6
    7d60:	02 c0       	rjmp	.+4      	; 0x7d66 <p_etoa+0x58>
    7d62:	6d e2       	ldi	r22, 0x2D	; 45
    7d64:	07 c0       	rjmp	.+14     	; 0x7d74 <p_etoa+0x66>
    7d66:	32 fe       	sbrs	r3, 2
    7d68:	02 c0       	rjmp	.+4      	; 0x7d6e <p_etoa+0x60>
    7d6a:	6b e2       	ldi	r22, 0x2B	; 43
    7d6c:	03 c0       	rjmp	.+6      	; 0x7d74 <p_etoa+0x66>
    7d6e:	34 fe       	sbrs	r3, 4
    7d70:	04 c0       	rjmp	.+8      	; 0x7d7a <p_etoa+0x6c>
    7d72:	60 e2       	ldi	r22, 0x20	; 32
    7d74:	ce 01       	movw	r24, r28
    7d76:	08 96       	adiw	r24, 0x08	; 8
    7d78:	53 de       	rcall	.-858    	; 0x7a20 <pch>
    7d7a:	37 01       	movw	r6, r14
    7d7c:	f7 fe       	sbrs	r15, 7
    7d7e:	02 c0       	rjmp	.+4      	; 0x7d84 <p_etoa+0x76>
    7d80:	61 2c       	mov	r6, r1
    7d82:	71 2c       	mov	r7, r1
    7d84:	1f 86       	std	Y+15, r1	; 0x0f
    7d86:	1e 86       	std	Y+14, r1	; 0x0e
    7d88:	20 e0       	ldi	r18, 0x00	; 0
    7d8a:	30 e0       	ldi	r19, 0x00	; 0
    7d8c:	a9 01       	movw	r20, r18
    7d8e:	c5 01       	movw	r24, r10
    7d90:	b4 01       	movw	r22, r8
    7d92:	0e 94 c7 e3 	call	0x1c78e	; 0x1c78e <__cmpsf2>
    7d96:	f3 2d       	mov	r31, r3
    7d98:	f2 70       	andi	r31, 0x02	; 2
    7d9a:	2f 2e       	mov	r2, r31
    7d9c:	88 23       	and	r24, r24
    7d9e:	09 f4       	brne	.+2      	; 0x7da2 <p_etoa+0x94>
    7da0:	70 c0       	rjmp	.+224    	; 0x7e82 <p_etoa+0x174>
    7da2:	ff 23       	and	r31, r31
    7da4:	b1 f0       	breq	.+44     	; 0x7dd2 <p_etoa+0xc4>
    7da6:	83 01       	movw	r16, r6
    7da8:	c1 2c       	mov	r12, r1
    7daa:	d1 2c       	mov	r13, r1
    7dac:	e1 2c       	mov	r14, r1
    7dae:	2f e3       	ldi	r18, 0x3F	; 63
    7db0:	f2 2e       	mov	r15, r18
    7db2:	01 15       	cp	r16, r1
    7db4:	11 05       	cpc	r17, r1
    7db6:	91 f0       	breq	.+36     	; 0x7ddc <p_etoa+0xce>
    7db8:	20 e0       	ldi	r18, 0x00	; 0
    7dba:	30 e0       	ldi	r19, 0x00	; 0
    7dbc:	40 e2       	ldi	r20, 0x20	; 32
    7dbe:	51 e4       	ldi	r21, 0x41	; 65
    7dc0:	c7 01       	movw	r24, r14
    7dc2:	b6 01       	movw	r22, r12
    7dc4:	0e 94 cb e3 	call	0x1c796	; 0x1c796 <__divsf3>
    7dc8:	6b 01       	movw	r12, r22
    7dca:	7c 01       	movw	r14, r24
    7dcc:	01 50       	subi	r16, 0x01	; 1
    7dce:	11 09       	sbc	r17, r1
    7dd0:	f0 cf       	rjmp	.-32     	; 0x7db2 <p_etoa+0xa4>
    7dd2:	c1 2c       	mov	r12, r1
    7dd4:	d1 2c       	mov	r13, r1
    7dd6:	e1 2c       	mov	r14, r1
    7dd8:	9f e3       	ldi	r25, 0x3F	; 63
    7dda:	f9 2e       	mov	r15, r25
    7ddc:	41 2c       	mov	r4, r1
    7dde:	51 2c       	mov	r5, r1
    7de0:	82 01       	movw	r16, r4
    7de2:	01 50       	subi	r16, 0x01	; 1
    7de4:	11 09       	sbc	r17, r1
    7de6:	20 e0       	ldi	r18, 0x00	; 0
    7de8:	30 e0       	ldi	r19, 0x00	; 0
    7dea:	40 e8       	ldi	r20, 0x80	; 128
    7dec:	5f e3       	ldi	r21, 0x3F	; 63
    7dee:	c5 01       	movw	r24, r10
    7df0:	b4 01       	movw	r22, r8
    7df2:	0e 94 c7 e3 	call	0x1c78e	; 0x1c78e <__cmpsf2>
    7df6:	87 ff       	sbrs	r24, 7
    7df8:	0c c0       	rjmp	.+24     	; 0x7e12 <p_etoa+0x104>
    7dfa:	20 e0       	ldi	r18, 0x00	; 0
    7dfc:	30 e0       	ldi	r19, 0x00	; 0
    7dfe:	40 e2       	ldi	r20, 0x20	; 32
    7e00:	51 e4       	ldi	r21, 0x41	; 65
    7e02:	c5 01       	movw	r24, r10
    7e04:	b4 01       	movw	r22, r8
    7e06:	0e 94 1a e5 	call	0x1ca34	; 0x1ca34 <__mulsf3>
    7e0a:	4b 01       	movw	r8, r22
    7e0c:	5c 01       	movw	r10, r24
    7e0e:	28 01       	movw	r4, r16
    7e10:	e7 cf       	rjmp	.-50     	; 0x7de0 <p_etoa+0xd2>
    7e12:	82 01       	movw	r16, r4
    7e14:	0f 5f       	subi	r16, 0xFF	; 255
    7e16:	1f 4f       	sbci	r17, 0xFF	; 255
    7e18:	20 e0       	ldi	r18, 0x00	; 0
    7e1a:	30 e0       	ldi	r19, 0x00	; 0
    7e1c:	40 e2       	ldi	r20, 0x20	; 32
    7e1e:	51 e4       	ldi	r21, 0x41	; 65
    7e20:	c5 01       	movw	r24, r10
    7e22:	b4 01       	movw	r22, r8
    7e24:	0e 94 16 e5 	call	0x1ca2c	; 0x1ca2c <__gesf2>
    7e28:	87 fd       	sbrc	r24, 7
    7e2a:	0c c0       	rjmp	.+24     	; 0x7e44 <p_etoa+0x136>
    7e2c:	20 e0       	ldi	r18, 0x00	; 0
    7e2e:	30 e0       	ldi	r19, 0x00	; 0
    7e30:	40 e2       	ldi	r20, 0x20	; 32
    7e32:	51 e4       	ldi	r21, 0x41	; 65
    7e34:	c5 01       	movw	r24, r10
    7e36:	b4 01       	movw	r22, r8
    7e38:	0e 94 cb e3 	call	0x1c796	; 0x1c796 <__divsf3>
    7e3c:	4b 01       	movw	r8, r22
    7e3e:	5c 01       	movw	r10, r24
    7e40:	28 01       	movw	r4, r16
    7e42:	e7 cf       	rjmp	.-50     	; 0x7e12 <p_etoa+0x104>
    7e44:	a7 01       	movw	r20, r14
    7e46:	96 01       	movw	r18, r12
    7e48:	c5 01       	movw	r24, r10
    7e4a:	b4 01       	movw	r22, r8
    7e4c:	0e 94 63 e3 	call	0x1c6c6	; 0x1c6c6 <__addsf3>
    7e50:	4b 01       	movw	r8, r22
    7e52:	5c 01       	movw	r10, r24
    7e54:	82 01       	movw	r16, r4
    7e56:	2f ef       	ldi	r18, 0xFF	; 255
    7e58:	42 1a       	sub	r4, r18
    7e5a:	52 0a       	sbc	r5, r18
    7e5c:	20 e0       	ldi	r18, 0x00	; 0
    7e5e:	30 e0       	ldi	r19, 0x00	; 0
    7e60:	40 e2       	ldi	r20, 0x20	; 32
    7e62:	51 e4       	ldi	r21, 0x41	; 65
    7e64:	0e 94 16 e5 	call	0x1ca2c	; 0x1ca2c <__gesf2>
    7e68:	87 fd       	sbrc	r24, 7
    7e6a:	09 c0       	rjmp	.+18     	; 0x7e7e <p_etoa+0x170>
    7e6c:	20 e0       	ldi	r18, 0x00	; 0
    7e6e:	30 e0       	ldi	r19, 0x00	; 0
    7e70:	40 e2       	ldi	r20, 0x20	; 32
    7e72:	51 e4       	ldi	r21, 0x41	; 65
    7e74:	c5 01       	movw	r24, r10
    7e76:	b4 01       	movw	r22, r8
    7e78:	0e 94 cb e3 	call	0x1c796	; 0x1c796 <__divsf3>
    7e7c:	e9 cf       	rjmp	.-46     	; 0x7e50 <p_etoa+0x142>
    7e7e:	0e 87       	std	Y+14, r16	; 0x0e
    7e80:	1f 87       	std	Y+15, r17	; 0x0f
    7e82:	85 e6       	ldi	r24, 0x65	; 101
    7e84:	89 83       	std	Y+1, r24	; 0x01
    7e86:	8e 85       	ldd	r24, Y+14	; 0x0e
    7e88:	9f 85       	ldd	r25, Y+15	; 0x0f
    7e8a:	97 ff       	sbrs	r25, 7
    7e8c:	08 c0       	rjmp	.+16     	; 0x7e9e <p_etoa+0x190>
    7e8e:	91 95       	neg	r25
    7e90:	81 95       	neg	r24
    7e92:	91 09       	sbc	r25, r1
    7e94:	9f 87       	std	Y+15, r25	; 0x0f
    7e96:	8e 87       	std	Y+14, r24	; 0x0e
    7e98:	8d e2       	ldi	r24, 0x2D	; 45
    7e9a:	90 e0       	ldi	r25, 0x00	; 0
    7e9c:	02 c0       	rjmp	.+4      	; 0x7ea2 <p_etoa+0x194>
    7e9e:	8b e2       	ldi	r24, 0x2B	; 43
    7ea0:	90 e0       	ldi	r25, 0x00	; 0
    7ea2:	6c 01       	movw	r12, r24
    7ea4:	82 e0       	ldi	r24, 0x02	; 2
    7ea6:	e8 2e       	mov	r14, r24
    7ea8:	f1 2c       	mov	r15, r1
    7eaa:	8e 01       	movw	r16, r28
    7eac:	02 5f       	subi	r16, 0xF2	; 242
    7eae:	1f 4f       	sbci	r17, 0xFF	; 255
    7eb0:	2a e0       	ldi	r18, 0x0A	; 10
    7eb2:	30 e0       	ldi	r19, 0x00	; 0
    7eb4:	42 e0       	ldi	r20, 0x02	; 2
    7eb6:	50 e0       	ldi	r21, 0x00	; 0
    7eb8:	65 e0       	ldi	r22, 0x05	; 5
    7eba:	70 e0       	ldi	r23, 0x00	; 0
    7ebc:	ce 01       	movw	r24, r28
    7ebe:	02 96       	adiw	r24, 0x02	; 2
    7ec0:	26 dd       	rcall	.-1460   	; 0x790e <bin2num>
    7ec2:	9c 01       	movw	r18, r24
    7ec4:	93 2d       	mov	r25, r3
    7ec6:	98 72       	andi	r25, 0x28	; 40
    7ec8:	90 32       	cpi	r25, 0x20	; 32
    7eca:	71 f0       	breq	.+28     	; 0x7ee8 <p_etoa+0x1da>
    7ecc:	c5 01       	movw	r24, r10
    7ece:	b4 01       	movw	r22, r8
    7ed0:	0e 94 33 e4 	call	0x1c866	; 0x1c866 <__fixsfsi>
    7ed4:	6b 01       	movw	r12, r22
    7ed6:	7c 01       	movw	r14, r24
    7ed8:	60 e3       	ldi	r22, 0x30	; 48
    7eda:	6c 0d       	add	r22, r12
    7edc:	ce 01       	movw	r24, r28
    7ede:	08 96       	adiw	r24, 0x08	; 8
    7ee0:	9f dd       	rcall	.-1218   	; 0x7a20 <pch>
    7ee2:	21 10       	cpse	r2, r1
    7ee4:	20 c0       	rjmp	.+64     	; 0x7f26 <p_etoa+0x218>
    7ee6:	63 c0       	rjmp	.+198    	; 0x7fae <p_etoa+0x2a0>
    7ee8:	8a 85       	ldd	r24, Y+10	; 0x0a
    7eea:	9b 85       	ldd	r25, Y+11	; 0x0b
    7eec:	0a 89       	ldd	r16, Y+18	; 0x12
    7eee:	1b 89       	ldd	r17, Y+19	; 0x13
    7ef0:	08 1b       	sub	r16, r24
    7ef2:	19 0b       	sbc	r17, r25
    7ef4:	22 20       	and	r2, r2
    7ef6:	41 f0       	breq	.+16     	; 0x7f08 <p_etoa+0x1fa>
    7ef8:	61 14       	cp	r6, r1
    7efa:	71 04       	cpc	r7, r1
    7efc:	29 f0       	breq	.+10     	; 0x7f08 <p_etoa+0x1fa>
    7efe:	06 19       	sub	r16, r6
    7f00:	17 09       	sbc	r17, r7
    7f02:	06 50       	subi	r16, 0x06	; 6
    7f04:	11 09       	sbc	r17, r1
    7f06:	02 c0       	rjmp	.+4      	; 0x7f0c <p_etoa+0x1fe>
    7f08:	05 50       	subi	r16, 0x05	; 5
    7f0a:	11 09       	sbc	r17, r1
    7f0c:	24 30       	cpi	r18, 0x04	; 4
    7f0e:	31 05       	cpc	r19, r1
    7f10:	14 f0       	brlt	.+4      	; 0x7f16 <p_etoa+0x208>
    7f12:	01 50       	subi	r16, 0x01	; 1
    7f14:	11 09       	sbc	r17, r1
    7f16:	10 16       	cp	r1, r16
    7f18:	11 06       	cpc	r1, r17
    7f1a:	c4 f6       	brge	.-80     	; 0x7ecc <p_etoa+0x1be>
    7f1c:	60 e3       	ldi	r22, 0x30	; 48
    7f1e:	ce 01       	movw	r24, r28
    7f20:	08 96       	adiw	r24, 0x08	; 8
    7f22:	7e dd       	rcall	.-1284   	; 0x7a20 <pch>
    7f24:	f6 cf       	rjmp	.-20     	; 0x7f12 <p_etoa+0x204>
    7f26:	61 14       	cp	r6, r1
    7f28:	71 04       	cpc	r7, r1
    7f2a:	09 f4       	brne	.+2      	; 0x7f2e <p_etoa+0x220>
    7f2c:	40 c0       	rjmp	.+128    	; 0x7fae <p_etoa+0x2a0>
    7f2e:	b6 01       	movw	r22, r12
    7f30:	dd 0c       	add	r13, r13
    7f32:	88 0b       	sbc	r24, r24
    7f34:	99 0b       	sbc	r25, r25
    7f36:	0e 94 66 e4 	call	0x1c8cc	; 0x1c8cc <__floatsisf>
    7f3a:	9b 01       	movw	r18, r22
    7f3c:	ac 01       	movw	r20, r24
    7f3e:	c5 01       	movw	r24, r10
    7f40:	b4 01       	movw	r22, r8
    7f42:	0e 94 62 e3 	call	0x1c6c4	; 0x1c6c4 <__subsf3>
    7f46:	20 e0       	ldi	r18, 0x00	; 0
    7f48:	30 e0       	ldi	r19, 0x00	; 0
    7f4a:	40 e2       	ldi	r20, 0x20	; 32
    7f4c:	51 e4       	ldi	r21, 0x41	; 65
    7f4e:	0e 94 1a e5 	call	0x1ca34	; 0x1ca34 <__mulsf3>
    7f52:	4b 01       	movw	r8, r22
    7f54:	5c 01       	movw	r10, r24
    7f56:	6e e2       	ldi	r22, 0x2E	; 46
    7f58:	ce 01       	movw	r24, r28
    7f5a:	08 96       	adiw	r24, 0x08	; 8
    7f5c:	61 dd       	rcall	.-1342   	; 0x7a20 <pch>
    7f5e:	c5 01       	movw	r24, r10
    7f60:	b4 01       	movw	r22, r8
    7f62:	0e 94 33 e4 	call	0x1c866	; 0x1c866 <__fixsfsi>
    7f66:	6b 01       	movw	r12, r22
    7f68:	7c 01       	movw	r14, r24
    7f6a:	07 2e       	mov	r0, r23
    7f6c:	00 0c       	add	r0, r0
    7f6e:	88 0b       	sbc	r24, r24
    7f70:	99 0b       	sbc	r25, r25
    7f72:	0e 94 66 e4 	call	0x1c8cc	; 0x1c8cc <__floatsisf>
    7f76:	9b 01       	movw	r18, r22
    7f78:	ac 01       	movw	r20, r24
    7f7a:	c5 01       	movw	r24, r10
    7f7c:	b4 01       	movw	r22, r8
    7f7e:	0e 94 62 e3 	call	0x1c6c4	; 0x1c6c4 <__subsf3>
    7f82:	4b 01       	movw	r8, r22
    7f84:	5c 01       	movw	r10, r24
    7f86:	b6 01       	movw	r22, r12
    7f88:	60 5d       	subi	r22, 0xD0	; 208
    7f8a:	7f 4f       	sbci	r23, 0xFF	; 255
    7f8c:	ce 01       	movw	r24, r28
    7f8e:	08 96       	adiw	r24, 0x08	; 8
    7f90:	47 dd       	rcall	.-1394   	; 0x7a20 <pch>
    7f92:	20 e0       	ldi	r18, 0x00	; 0
    7f94:	30 e0       	ldi	r19, 0x00	; 0
    7f96:	40 e2       	ldi	r20, 0x20	; 32
    7f98:	51 e4       	ldi	r21, 0x41	; 65
    7f9a:	c5 01       	movw	r24, r10
    7f9c:	b4 01       	movw	r22, r8
    7f9e:	0e 94 1a e5 	call	0x1ca34	; 0x1ca34 <__mulsf3>
    7fa2:	4b 01       	movw	r8, r22
    7fa4:	5c 01       	movw	r10, r24
    7fa6:	31 e0       	ldi	r19, 0x01	; 1
    7fa8:	63 1a       	sub	r6, r19
    7faa:	71 08       	sbc	r7, r1
    7fac:	c1 f6       	brne	.-80     	; 0x7f5e <p_etoa+0x250>
    7fae:	8e 01       	movw	r16, r28
    7fb0:	0f 5f       	subi	r16, 0xFF	; 255
    7fb2:	1f 4f       	sbci	r17, 0xFF	; 255
    7fb4:	f8 01       	movw	r30, r16
    7fb6:	61 91       	ld	r22, Z+
    7fb8:	8f 01       	movw	r16, r30
    7fba:	ce 01       	movw	r24, r28
    7fbc:	08 96       	adiw	r24, 0x08	; 8
    7fbe:	66 23       	and	r22, r22
    7fc0:	11 f0       	breq	.+4      	; 0x7fc6 <p_etoa+0x2b8>
    7fc2:	2e dd       	rcall	.-1444   	; 0x7a20 <pch>
    7fc4:	f7 cf       	rjmp	.-18     	; 0x7fb4 <p_etoa+0x2a6>
    7fc6:	2c dd       	rcall	.-1448   	; 0x7a20 <pch>
    7fc8:	e8 89       	ldd	r30, Y+16	; 0x10
    7fca:	f9 89       	ldd	r31, Y+17	; 0x11
    7fcc:	01 90       	ld	r0, Z+
    7fce:	00 20       	and	r0, r0
    7fd0:	e9 f7       	brne	.-6      	; 0x7fcc <p_etoa+0x2be>
    7fd2:	cf 01       	movw	r24, r30
    7fd4:	01 97       	sbiw	r24, 0x01	; 1
    7fd6:	28 89       	ldd	r18, Y+16	; 0x10
    7fd8:	39 89       	ldd	r19, Y+17	; 0x11
    7fda:	82 1b       	sub	r24, r18
    7fdc:	93 0b       	sbc	r25, r19
    7fde:	63 96       	adiw	r28, 0x13	; 19
    7fe0:	e2 e1       	ldi	r30, 0x12	; 18
    7fe2:	0c 94 25 e3 	jmp	0x1c64a	; 0x1c64a <__epilogue_restores__>

00007fe6 <_puts_pad>:
    7fe6:	a0 e0       	ldi	r26, 0x00	; 0
    7fe8:	b0 e0       	ldi	r27, 0x00	; 0
    7fea:	e9 ef       	ldi	r30, 0xF9	; 249
    7fec:	ff e3       	ldi	r31, 0x3F	; 63
    7fee:	0c 94 0f e3 	jmp	0x1c61e	; 0x1c61e <__prologue_saves__+0xc>
    7ff2:	6c 01       	movw	r12, r24
    7ff4:	4b 01       	movw	r8, r22
    7ff6:	79 01       	movw	r14, r18
    7ff8:	24 17       	cp	r18, r20
    7ffa:	35 07       	cpc	r19, r21
    7ffc:	24 f4       	brge	.+8      	; 0x8006 <_puts_pad+0x20>
    7ffe:	ea 01       	movw	r28, r20
    8000:	c2 1b       	sub	r28, r18
    8002:	d3 0b       	sbc	r29, r19
    8004:	02 c0       	rjmp	.+4      	; 0x800a <_puts_pad+0x24>
    8006:	c0 e0       	ldi	r28, 0x00	; 0
    8008:	d0 e0       	ldi	r29, 0x00	; 0
    800a:	01 15       	cp	r16, r1
    800c:	11 05       	cpc	r17, r1
    800e:	49 f4       	brne	.+18     	; 0x8022 <_puts_pad+0x3c>
    8010:	21 97       	sbiw	r28, 0x01	; 1
    8012:	38 f0       	brcs	.+14     	; 0x8022 <_puts_pad+0x3c>
    8014:	d6 01       	movw	r26, r12
    8016:	ed 91       	ld	r30, X+
    8018:	fc 91       	ld	r31, X
    801a:	60 e2       	ldi	r22, 0x20	; 32
    801c:	c6 01       	movw	r24, r12
    801e:	09 95       	icall
    8020:	f7 cf       	rjmp	.-18     	; 0x8010 <_puts_pad+0x2a>
    8022:	54 01       	movw	r10, r8
    8024:	f5 01       	movw	r30, r10
    8026:	61 91       	ld	r22, Z+
    8028:	5f 01       	movw	r10, r30
    802a:	66 23       	and	r22, r22
    802c:	61 f0       	breq	.+24     	; 0x8046 <_puts_pad+0x60>
    802e:	e1 14       	cp	r14, r1
    8030:	f1 04       	cpc	r15, r1
    8032:	49 f0       	breq	.+18     	; 0x8046 <_puts_pad+0x60>
    8034:	d6 01       	movw	r26, r12
    8036:	ed 91       	ld	r30, X+
    8038:	fc 91       	ld	r31, X
    803a:	c6 01       	movw	r24, r12
    803c:	09 95       	icall
    803e:	b1 e0       	ldi	r27, 0x01	; 1
    8040:	eb 1a       	sub	r14, r27
    8042:	f1 08       	sbc	r15, r1
    8044:	ef cf       	rjmp	.-34     	; 0x8024 <_puts_pad+0x3e>
    8046:	01 15       	cp	r16, r1
    8048:	11 05       	cpc	r17, r1
    804a:	51 f0       	breq	.+20     	; 0x8060 <_puts_pad+0x7a>
    804c:	20 97       	sbiw	r28, 0x00	; 0
    804e:	41 f0       	breq	.+16     	; 0x8060 <_puts_pad+0x7a>
    8050:	d6 01       	movw	r26, r12
    8052:	ed 91       	ld	r30, X+
    8054:	fc 91       	ld	r31, X
    8056:	60 e2       	ldi	r22, 0x20	; 32
    8058:	c6 01       	movw	r24, r12
    805a:	09 95       	icall
    805c:	21 97       	sbiw	r28, 0x01	; 1
    805e:	f6 cf       	rjmp	.-20     	; 0x804c <_puts_pad+0x66>
    8060:	cd b7       	in	r28, 0x3d	; 61
    8062:	de b7       	in	r29, 0x3e	; 62
    8064:	ec e0       	ldi	r30, 0x0C	; 12
    8066:	0c 94 2b e3 	jmp	0x1c656	; 0x1c656 <__epilogue_restores__+0xc>

0000806a <_puts_pad_X>:
    806a:	2f 92       	push	r2
    806c:	3f 92       	push	r3
    806e:	4f 92       	push	r4
    8070:	6f 92       	push	r6
    8072:	7f 92       	push	r7
    8074:	8f 92       	push	r8
    8076:	cf 92       	push	r12
    8078:	df 92       	push	r13
    807a:	ef 92       	push	r14
    807c:	ff 92       	push	r15
    807e:	0f 93       	push	r16
    8080:	1f 93       	push	r17
    8082:	cf 93       	push	r28
    8084:	df 93       	push	r29
    8086:	6c 01       	movw	r12, r24
    8088:	3a 01       	movw	r6, r20
    808a:	86 2e       	mov	r8, r22
    808c:	02 17       	cp	r16, r18
    808e:	13 07       	cpc	r17, r19
    8090:	24 f4       	brge	.+8      	; 0x809a <_puts_pad_X+0x30>
    8092:	e9 01       	movw	r28, r18
    8094:	c0 1b       	sub	r28, r16
    8096:	d1 0b       	sbc	r29, r17
    8098:	02 c0       	rjmp	.+4      	; 0x809e <_puts_pad_X+0x34>
    809a:	c0 e0       	ldi	r28, 0x00	; 0
    809c:	d0 e0       	ldi	r29, 0x00	; 0
    809e:	e1 14       	cp	r14, r1
    80a0:	f1 04       	cpc	r15, r1
    80a2:	49 f4       	brne	.+18     	; 0x80b6 <_puts_pad_X+0x4c>
    80a4:	21 97       	sbiw	r28, 0x01	; 1
    80a6:	38 f0       	brcs	.+14     	; 0x80b6 <_puts_pad_X+0x4c>
    80a8:	d6 01       	movw	r26, r12
    80aa:	ed 91       	ld	r30, X+
    80ac:	fc 91       	ld	r31, X
    80ae:	60 e2       	ldi	r22, 0x20	; 32
    80b0:	c6 01       	movw	r24, r12
    80b2:	09 95       	icall
    80b4:	f7 cf       	rjmp	.-18     	; 0x80a4 <_puts_pad_X+0x3a>
    80b6:	13 01       	movw	r2, r6
    80b8:	48 2c       	mov	r4, r8
    80ba:	20 0e       	add	r2, r16
    80bc:	31 1e       	adc	r3, r17
    80be:	41 1c       	adc	r4, r1
    80c0:	17 fd       	sbrc	r17, 7
    80c2:	4a 94       	dec	r4
    80c4:	f3 01       	movw	r30, r6
    80c6:	58 2d       	mov	r21, r8
    80c8:	0e 94 40 e3 	call	0x1c680	; 0x1c680 <__xload_1>
    80cc:	66 23       	and	r22, r22
    80ce:	71 f0       	breq	.+28     	; 0x80ec <_puts_pad_X+0x82>
    80d0:	62 14       	cp	r6, r2
    80d2:	73 04       	cpc	r7, r3
    80d4:	84 04       	cpc	r8, r4
    80d6:	51 f0       	breq	.+20     	; 0x80ec <_puts_pad_X+0x82>
    80d8:	d6 01       	movw	r26, r12
    80da:	ed 91       	ld	r30, X+
    80dc:	fc 91       	ld	r31, X
    80de:	c6 01       	movw	r24, r12
    80e0:	09 95       	icall
    80e2:	bf ef       	ldi	r27, 0xFF	; 255
    80e4:	6b 1a       	sub	r6, r27
    80e6:	7b 0a       	sbc	r7, r27
    80e8:	8b 0a       	sbc	r8, r27
    80ea:	ec cf       	rjmp	.-40     	; 0x80c4 <_puts_pad_X+0x5a>
    80ec:	ef 28       	or	r14, r15
    80ee:	51 f0       	breq	.+20     	; 0x8104 <_puts_pad_X+0x9a>
    80f0:	20 97       	sbiw	r28, 0x00	; 0
    80f2:	41 f0       	breq	.+16     	; 0x8104 <_puts_pad_X+0x9a>
    80f4:	d6 01       	movw	r26, r12
    80f6:	ed 91       	ld	r30, X+
    80f8:	fc 91       	ld	r31, X
    80fa:	60 e2       	ldi	r22, 0x20	; 32
    80fc:	c6 01       	movw	r24, r12
    80fe:	09 95       	icall
    8100:	21 97       	sbiw	r28, 0x01	; 1
    8102:	f6 cf       	rjmp	.-20     	; 0x80f0 <_puts_pad_X+0x86>
    8104:	df 91       	pop	r29
    8106:	cf 91       	pop	r28
    8108:	1f 91       	pop	r17
    810a:	0f 91       	pop	r16
    810c:	ff 90       	pop	r15
    810e:	ef 90       	pop	r14
    8110:	df 90       	pop	r13
    8112:	cf 90       	pop	r12
    8114:	8f 90       	pop	r8
    8116:	7f 90       	pop	r7
    8118:	6f 90       	pop	r6
    811a:	4f 90       	pop	r4
    811c:	3f 90       	pop	r3
    811e:	2f 90       	pop	r2
    8120:	08 95       	ret

00008122 <strlen_X>:
    8122:	cf 92       	push	r12
    8124:	df 92       	push	r13
    8126:	ef 92       	push	r14
    8128:	9b 01       	movw	r18, r22
    812a:	48 2f       	mov	r20, r24
    812c:	80 e0       	ldi	r24, 0x00	; 0
    812e:	90 e0       	ldi	r25, 0x00	; 0
    8130:	2f 5f       	subi	r18, 0xFF	; 255
    8132:	3f 4f       	sbci	r19, 0xFF	; 255
    8134:	4f 4f       	sbci	r20, 0xFF	; 255
    8136:	69 01       	movw	r12, r18
    8138:	e4 2e       	mov	r14, r20
    813a:	51 e0       	ldi	r21, 0x01	; 1
    813c:	c5 1a       	sub	r12, r21
    813e:	d1 08       	sbc	r13, r1
    8140:	e1 08       	sbc	r14, r1
    8142:	f6 01       	movw	r30, r12
    8144:	5e 2d       	mov	r21, r14
    8146:	0e 94 40 e3 	call	0x1c680	; 0x1c680 <__xload_1>
    814a:	66 23       	and	r22, r22
    814c:	11 f0       	breq	.+4      	; 0x8152 <strlen_X+0x30>
    814e:	01 96       	adiw	r24, 0x01	; 1
    8150:	ef cf       	rjmp	.-34     	; 0x8130 <strlen_X+0xe>
    8152:	ef 90       	pop	r14
    8154:	df 90       	pop	r13
    8156:	cf 90       	pop	r12
    8158:	08 95       	ret

0000815a <_printf_fn>:
    815a:	ae e6       	ldi	r26, 0x6E	; 110
    815c:	b0 e0       	ldi	r27, 0x00	; 0
    815e:	e3 eb       	ldi	r30, 0xB3	; 179
    8160:	f0 e4       	ldi	r31, 0x40	; 64
    8162:	0c 94 09 e3 	jmp	0x1c612	; 0x1c612 <__prologue_saves__>
    8166:	a5 96       	adiw	r28, 0x25	; 37
    8168:	9f af       	std	Y+63, r25	; 0x3f
    816a:	8e af       	std	Y+62, r24	; 0x3e
    816c:	a5 97       	sbiw	r28, 0x25	; 37
    816e:	6a 01       	movw	r12, r20
    8170:	e6 2e       	mov	r14, r22
    8172:	19 01       	movw	r2, r18
    8174:	a9 96       	adiw	r28, 0x29	; 41
    8176:	1c ae       	std	Y+60, r1	; 0x3c
    8178:	1d ae       	std	Y+61, r1	; 0x3d
    817a:	1e ae       	std	Y+62, r1	; 0x3e
    817c:	1f ae       	std	Y+63, r1	; 0x3f
    817e:	a9 97       	sbiw	r28, 0x29	; 41
    8180:	8a e1       	ldi	r24, 0x1A	; 26
    8182:	94 e0       	ldi	r25, 0x04	; 4
    8184:	9c 01       	movw	r18, r24
    8186:	40 e8       	ldi	r20, 0x80	; 128
    8188:	ae 96       	adiw	r28, 0x2e	; 46
    818a:	2d af       	std	Y+61, r18	; 0x3d
    818c:	3e af       	std	Y+62, r19	; 0x3e
    818e:	4f af       	std	Y+63, r20	; 0x3f
    8190:	ae 97       	sbiw	r28, 0x2e	; 46
    8192:	ae 01       	movw	r20, r28
    8194:	4f 5a       	subi	r20, 0xAF	; 175
    8196:	5f 4f       	sbci	r21, 0xFF	; 255
    8198:	67 96       	adiw	r28, 0x17	; 23
    819a:	5f af       	std	Y+63, r21	; 0x3f
    819c:	4e af       	std	Y+62, r20	; 0x3e
    819e:	67 97       	sbiw	r28, 0x17	; 23
    81a0:	ce 01       	movw	r24, r28
    81a2:	8d 5b       	subi	r24, 0xBD	; 189
    81a4:	9f 4f       	sbci	r25, 0xFF	; 255
    81a6:	69 96       	adiw	r28, 0x19	; 25
    81a8:	9f af       	std	Y+63, r25	; 0x3f
    81aa:	8e af       	std	Y+62, r24	; 0x3e
    81ac:	69 97       	sbiw	r28, 0x19	; 25
    81ae:	de 01       	movw	r26, r28
    81b0:	a5 5b       	subi	r26, 0xB5	; 181
    81b2:	bf 4f       	sbci	r27, 0xFF	; 255
    81b4:	6b 96       	adiw	r28, 0x1b	; 27
    81b6:	bf af       	std	Y+63, r27	; 0x3f
    81b8:	ae af       	std	Y+62, r26	; 0x3e
    81ba:	6b 97       	sbiw	r28, 0x1b	; 27
    81bc:	fe 01       	movw	r30, r28
    81be:	ed 5a       	subi	r30, 0xAD	; 173
    81c0:	ff 4f       	sbci	r31, 0xFF	; 255
    81c2:	6d 96       	adiw	r28, 0x1d	; 29
    81c4:	ff af       	std	Y+63, r31	; 0x3f
    81c6:	ee af       	std	Y+62, r30	; 0x3e
    81c8:	6d 97       	sbiw	r28, 0x1d	; 29
    81ca:	f6 01       	movw	r30, r12
    81cc:	5e 2d       	mov	r21, r14
    81ce:	0e 94 40 e3 	call	0x1c680	; 0x1c680 <__xload_1>
    81d2:	66 23       	and	r22, r22
    81d4:	09 f4       	brne	.+2      	; 0x81d8 <_printf_fn+0x7e>
    81d6:	13 c4       	rjmp	.+2086   	; 0x89fe <_printf_fn+0x8a4>
    81d8:	ae 2d       	mov	r26, r14
    81da:	c6 01       	movw	r24, r12
    81dc:	01 96       	adiw	r24, 0x01	; 1
    81de:	a1 1d       	adc	r26, r1
    81e0:	3c 01       	movw	r6, r24
    81e2:	8a 2e       	mov	r8, r26
    81e4:	65 32       	cpi	r22, 0x25	; 37
    81e6:	51 f0       	breq	.+20     	; 0x81fc <_printf_fn+0xa2>
    81e8:	a5 96       	adiw	r28, 0x25	; 37
    81ea:	ae ad       	ldd	r26, Y+62	; 0x3e
    81ec:	bf ad       	ldd	r27, Y+63	; 0x3f
    81ee:	a5 97       	sbiw	r28, 0x25	; 37
    81f0:	ed 91       	ld	r30, X+
    81f2:	fc 91       	ld	r31, X
    81f4:	11 97       	sbiw	r26, 0x01	; 1
    81f6:	cd 01       	movw	r24, r26
    81f8:	09 95       	icall
    81fa:	d5 c3       	rjmp	.+1962   	; 0x89a6 <_printf_fn+0x84c>
    81fc:	91 2c       	mov	r9, r1
    81fe:	f3 01       	movw	r30, r6
    8200:	58 2d       	mov	r21, r8
    8202:	0e 94 40 e3 	call	0x1c680	; 0x1c680 <__xload_1>
    8206:	63 32       	cpi	r22, 0x23	; 35
    8208:	19 f4       	brne	.+6      	; 0x8210 <_printf_fn+0xb6>
    820a:	68 94       	set
    820c:	97 f8       	bld	r9, 7
    820e:	04 c0       	rjmp	.+8      	; 0x8218 <_printf_fn+0xbe>
    8210:	6b 32       	cpi	r22, 0x2B	; 43
    8212:	39 f4       	brne	.+14     	; 0x8222 <_printf_fn+0xc8>
    8214:	68 94       	set
    8216:	92 f8       	bld	r9, 2
    8218:	bf ef       	ldi	r27, 0xFF	; 255
    821a:	6b 1a       	sub	r6, r27
    821c:	7b 0a       	sbc	r7, r27
    821e:	8b 0a       	sbc	r8, r27
    8220:	ee cf       	rjmp	.-36     	; 0x81fe <_printf_fn+0xa4>
    8222:	6d 32       	cpi	r22, 0x2D	; 45
    8224:	a9 f4       	brne	.+42     	; 0x8250 <_printf_fn+0xf6>
    8226:	93 fc       	sbrc	r9, 3
    8228:	05 c0       	rjmp	.+10     	; 0x8234 <_printf_fn+0xda>
    822a:	6d 32       	cpi	r22, 0x2D	; 45
    822c:	19 f4       	brne	.+6      	; 0x8234 <_printf_fn+0xda>
    822e:	68 94       	set
    8230:	93 f8       	bld	r9, 3
    8232:	f2 cf       	rjmp	.-28     	; 0x8218 <_printf_fn+0xbe>
    8234:	94 fc       	sbrc	r9, 4
    8236:	05 c0       	rjmp	.+10     	; 0x8242 <_printf_fn+0xe8>
    8238:	60 32       	cpi	r22, 0x20	; 32
    823a:	19 f4       	brne	.+6      	; 0x8242 <_printf_fn+0xe8>
    823c:	68 94       	set
    823e:	94 f8       	bld	r9, 4
    8240:	eb cf       	rjmp	.-42     	; 0x8218 <_printf_fn+0xbe>
    8242:	95 fc       	sbrc	r9, 5
    8244:	e9 cf       	rjmp	.-46     	; 0x8218 <_printf_fn+0xbe>
    8246:	60 33       	cpi	r22, 0x30	; 48
    8248:	39 f7       	brne	.-50     	; 0x8218 <_printf_fn+0xbe>
    824a:	68 94       	set
    824c:	95 f8       	bld	r9, 5
    824e:	e4 cf       	rjmp	.-56     	; 0x8218 <_printf_fn+0xbe>
    8250:	86 2f       	mov	r24, r22
    8252:	8f 7e       	andi	r24, 0xEF	; 239
    8254:	80 32       	cpi	r24, 0x20	; 32
    8256:	39 f3       	breq	.-50     	; 0x8226 <_printf_fn+0xcc>
    8258:	70 e0       	ldi	r23, 0x00	; 0
    825a:	60 53       	subi	r22, 0x30	; 48
    825c:	71 09       	sbc	r23, r1
    825e:	6f 96       	adiw	r28, 0x1f	; 31
    8260:	1f ae       	std	Y+63, r1	; 0x3f
    8262:	1e ae       	std	Y+62, r1	; 0x3e
    8264:	6f 97       	sbiw	r28, 0x1f	; 31
    8266:	6a 30       	cpi	r22, 0x0A	; 10
    8268:	71 05       	cpc	r23, r1
    826a:	10 f5       	brcc	.+68     	; 0x82b0 <_printf_fn+0x156>
    826c:	2a e0       	ldi	r18, 0x0A	; 10
    826e:	f3 01       	movw	r30, r6
    8270:	58 2d       	mov	r21, r8
    8272:	0e 94 40 e3 	call	0x1c680	; 0x1c680 <__xload_1>
    8276:	70 e0       	ldi	r23, 0x00	; 0
    8278:	cb 01       	movw	r24, r22
    827a:	c0 97       	sbiw	r24, 0x30	; 48
    827c:	0a 97       	sbiw	r24, 0x0a	; 10
    827e:	b0 f4       	brcc	.+44     	; 0x82ac <_printf_fn+0x152>
    8280:	ef ef       	ldi	r30, 0xFF	; 255
    8282:	6e 1a       	sub	r6, r30
    8284:	7e 0a       	sbc	r7, r30
    8286:	8e 0a       	sbc	r8, r30
    8288:	6f 96       	adiw	r28, 0x1f	; 31
    828a:	4e ad       	ldd	r20, Y+62	; 0x3e
    828c:	5f ad       	ldd	r21, Y+63	; 0x3f
    828e:	6f 97       	sbiw	r28, 0x1f	; 31
    8290:	24 9f       	mul	r18, r20
    8292:	c0 01       	movw	r24, r0
    8294:	25 9f       	mul	r18, r21
    8296:	90 0d       	add	r25, r0
    8298:	11 24       	eor	r1, r1
    829a:	68 0f       	add	r22, r24
    829c:	79 1f       	adc	r23, r25
    829e:	cb 01       	movw	r24, r22
    82a0:	c0 97       	sbiw	r24, 0x30	; 48
    82a2:	6f 96       	adiw	r28, 0x1f	; 31
    82a4:	9f af       	std	Y+63, r25	; 0x3f
    82a6:	8e af       	std	Y+62, r24	; 0x3e
    82a8:	6f 97       	sbiw	r28, 0x1f	; 31
    82aa:	e1 cf       	rjmp	.-62     	; 0x826e <_printf_fn+0x114>
    82ac:	68 94       	set
    82ae:	90 f8       	bld	r9, 0
    82b0:	f3 01       	movw	r30, r6
    82b2:	58 2d       	mov	r21, r8
    82b4:	0e 94 40 e3 	call	0x1c680	; 0x1c680 <__xload_1>
    82b8:	6e 32       	cpi	r22, 0x2E	; 46
    82ba:	61 f5       	brne	.+88     	; 0x8314 <_printf_fn+0x1ba>
    82bc:	9f ef       	ldi	r25, 0xFF	; 255
    82be:	69 1a       	sub	r6, r25
    82c0:	79 0a       	sbc	r7, r25
    82c2:	89 0a       	sbc	r8, r25
    82c4:	a1 96       	adiw	r28, 0x21	; 33
    82c6:	1f ae       	std	Y+63, r1	; 0x3f
    82c8:	1e ae       	std	Y+62, r1	; 0x3e
    82ca:	a1 97       	sbiw	r28, 0x21	; 33
    82cc:	2a e0       	ldi	r18, 0x0A	; 10
    82ce:	f3 01       	movw	r30, r6
    82d0:	58 2d       	mov	r21, r8
    82d2:	0e 94 40 e3 	call	0x1c680	; 0x1c680 <__xload_1>
    82d6:	70 e0       	ldi	r23, 0x00	; 0
    82d8:	cb 01       	movw	r24, r22
    82da:	c0 97       	sbiw	r24, 0x30	; 48
    82dc:	0a 97       	sbiw	r24, 0x0a	; 10
    82de:	b8 f4       	brcc	.+46     	; 0x830e <_printf_fn+0x1b4>
    82e0:	af ef       	ldi	r26, 0xFF	; 255
    82e2:	6a 1a       	sub	r6, r26
    82e4:	7a 0a       	sbc	r7, r26
    82e6:	8a 0a       	sbc	r8, r26
    82e8:	a1 96       	adiw	r28, 0x21	; 33
    82ea:	ee ad       	ldd	r30, Y+62	; 0x3e
    82ec:	ff ad       	ldd	r31, Y+63	; 0x3f
    82ee:	a1 97       	sbiw	r28, 0x21	; 33
    82f0:	2e 9f       	mul	r18, r30
    82f2:	c0 01       	movw	r24, r0
    82f4:	2f 9f       	mul	r18, r31
    82f6:	90 0d       	add	r25, r0
    82f8:	11 24       	eor	r1, r1
    82fa:	68 0f       	add	r22, r24
    82fc:	79 1f       	adc	r23, r25
    82fe:	ab 01       	movw	r20, r22
    8300:	40 53       	subi	r20, 0x30	; 48
    8302:	51 09       	sbc	r21, r1
    8304:	a1 96       	adiw	r28, 0x21	; 33
    8306:	5f af       	std	Y+63, r21	; 0x3f
    8308:	4e af       	std	Y+62, r20	; 0x3e
    830a:	a1 97       	sbiw	r28, 0x21	; 33
    830c:	e0 cf       	rjmp	.-64     	; 0x82ce <_printf_fn+0x174>
    830e:	68 94       	set
    8310:	91 f8       	bld	r9, 1
    8312:	04 c0       	rjmp	.+8      	; 0x831c <_printf_fn+0x1c2>
    8314:	a1 96       	adiw	r28, 0x21	; 33
    8316:	1f ae       	std	Y+63, r1	; 0x3f
    8318:	1e ae       	std	Y+62, r1	; 0x3e
    831a:	a1 97       	sbiw	r28, 0x21	; 33
    831c:	f3 01       	movw	r30, r6
    831e:	58 2d       	mov	r21, r8
    8320:	0e 94 40 e3 	call	0x1c680	; 0x1c680 <__xload_1>
    8324:	69 34       	cpi	r22, 0x49	; 73
    8326:	91 f5       	brne	.+100    	; 0x838c <_printf_fn+0x232>
    8328:	5f ef       	ldi	r21, 0xFF	; 255
    832a:	65 1a       	sub	r6, r21
    832c:	75 0a       	sbc	r7, r21
    832e:	85 0a       	sbc	r8, r21
    8330:	41 2c       	mov	r4, r1
    8332:	51 2c       	mov	r5, r1
    8334:	2a e0       	ldi	r18, 0x0A	; 10
    8336:	f3 01       	movw	r30, r6
    8338:	58 2d       	mov	r21, r8
    833a:	0e 94 40 e3 	call	0x1c680	; 0x1c680 <__xload_1>
    833e:	70 e0       	ldi	r23, 0x00	; 0
    8340:	cb 01       	movw	r24, r22
    8342:	c0 97       	sbiw	r24, 0x30	; 48
    8344:	0a 97       	sbiw	r24, 0x0a	; 10
    8346:	80 f4       	brcc	.+32     	; 0x8368 <_printf_fn+0x20e>
    8348:	8f ef       	ldi	r24, 0xFF	; 255
    834a:	68 1a       	sub	r6, r24
    834c:	78 0a       	sbc	r7, r24
    834e:	88 0a       	sbc	r8, r24
    8350:	24 9d       	mul	r18, r4
    8352:	c0 01       	movw	r24, r0
    8354:	25 9d       	mul	r18, r5
    8356:	90 0d       	add	r25, r0
    8358:	11 24       	eor	r1, r1
    835a:	68 0f       	add	r22, r24
    835c:	79 1f       	adc	r23, r25
    835e:	2b 01       	movw	r4, r22
    8360:	90 e3       	ldi	r25, 0x30	; 48
    8362:	49 1a       	sub	r4, r25
    8364:	51 08       	sbc	r5, r1
    8366:	e7 cf       	rjmp	.-50     	; 0x8336 <_printf_fn+0x1dc>
    8368:	41 14       	cp	r4, r1
    836a:	51 04       	cpc	r5, r1
    836c:	09 f4       	brne	.+2      	; 0x8370 <_printf_fn+0x216>
    836e:	40 c0       	rjmp	.+128    	; 0x83f0 <_printf_fn+0x296>
    8370:	c2 01       	movw	r24, r4
    8372:	87 70       	andi	r24, 0x07	; 7
    8374:	99 27       	eor	r25, r25
    8376:	89 2b       	or	r24, r25
    8378:	c9 f5       	brne	.+114    	; 0x83ec <_printf_fn+0x292>
    837a:	63 e0       	ldi	r22, 0x03	; 3
    837c:	55 94       	asr	r5
    837e:	47 94       	ror	r4
    8380:	6a 95       	dec	r22
    8382:	e1 f7       	brne	.-8      	; 0x837c <_printf_fn+0x222>
    8384:	41 14       	cp	r4, r1
    8386:	51 04       	cpc	r5, r1
    8388:	99 f1       	breq	.+102    	; 0x83f0 <_printf_fn+0x296>
    838a:	21 c0       	rjmp	.+66     	; 0x83ce <_printf_fn+0x274>
    838c:	68 36       	cpi	r22, 0x68	; 104
    838e:	29 f4       	brne	.+10     	; 0x839a <_printf_fn+0x240>
    8390:	af ef       	ldi	r26, 0xFF	; 255
    8392:	6a 1a       	sub	r6, r26
    8394:	7a 0a       	sbc	r7, r26
    8396:	8a 0a       	sbc	r8, r26
    8398:	09 c3       	rjmp	.+1554   	; 0x89ac <_printf_fn+0x852>
    839a:	6c 36       	cpi	r22, 0x6C	; 108
    839c:	09 f0       	breq	.+2      	; 0x83a0 <_printf_fn+0x246>
    839e:	06 c3       	rjmp	.+1548   	; 0x89ac <_printf_fn+0x852>
    83a0:	a8 2d       	mov	r26, r8
    83a2:	c3 01       	movw	r24, r6
    83a4:	01 96       	adiw	r24, 0x01	; 1
    83a6:	a1 1d       	adc	r26, r1
    83a8:	fc 01       	movw	r30, r24
    83aa:	5a 2f       	mov	r21, r26
    83ac:	0e 94 40 e3 	call	0x1c680	; 0x1c680 <__xload_1>
    83b0:	6c 36       	cpi	r22, 0x6C	; 108
    83b2:	31 f0       	breq	.+12     	; 0x83c0 <_printf_fn+0x266>
    83b4:	3c 01       	movw	r6, r24
    83b6:	8a 2e       	mov	r8, r26
    83b8:	54 e0       	ldi	r21, 0x04	; 4
    83ba:	45 2e       	mov	r4, r21
    83bc:	51 2c       	mov	r5, r1
    83be:	07 c0       	rjmp	.+14     	; 0x83ce <_printf_fn+0x274>
    83c0:	b2 e0       	ldi	r27, 0x02	; 2
    83c2:	6b 0e       	add	r6, r27
    83c4:	71 1c       	adc	r7, r1
    83c6:	81 1c       	adc	r8, r1
    83c8:	48 e0       	ldi	r20, 0x08	; 8
    83ca:	44 2e       	mov	r4, r20
    83cc:	51 2c       	mov	r5, r1
    83ce:	f3 01       	movw	r30, r6
    83d0:	58 2d       	mov	r21, r8
    83d2:	0e 94 40 e3 	call	0x1c680	; 0x1c680 <__xload_1>
    83d6:	e6 2f       	mov	r30, r22
    83d8:	f0 e0       	ldi	r31, 0x00	; 0
    83da:	a3 96       	adiw	r28, 0x23	; 35
    83dc:	ff af       	std	Y+63, r31	; 0x3f
    83de:	ee af       	std	Y+62, r30	; 0x3e
    83e0:	a3 97       	sbiw	r28, 0x23	; 35
    83e2:	e4 36       	cpi	r30, 0x64	; 100
    83e4:	f1 05       	cpc	r31, r1
    83e6:	09 f4       	brne	.+2      	; 0x83ea <_printf_fn+0x290>
    83e8:	e5 c2       	rjmp	.+1482   	; 0x89b4 <_printf_fn+0x85a>
    83ea:	06 c0       	rjmp	.+12     	; 0x83f8 <_printf_fn+0x29e>
    83ec:	41 2c       	mov	r4, r1
    83ee:	51 2c       	mov	r5, r1
    83f0:	a3 96       	adiw	r28, 0x23	; 35
    83f2:	1f ae       	std	Y+63, r1	; 0x3f
    83f4:	1e ae       	std	Y+62, r1	; 0x3e
    83f6:	a3 97       	sbiw	r28, 0x23	; 35
    83f8:	31 e0       	ldi	r19, 0x01	; 1
    83fa:	20 e0       	ldi	r18, 0x00	; 0
    83fc:	a3 96       	adiw	r28, 0x23	; 35
    83fe:	4e ad       	ldd	r20, Y+62	; 0x3e
    8400:	5f ad       	ldd	r21, Y+63	; 0x3f
    8402:	a3 97       	sbiw	r28, 0x23	; 35
    8404:	44 34       	cpi	r20, 0x44	; 68
    8406:	51 05       	cpc	r21, r1
    8408:	09 f0       	breq	.+2      	; 0x840c <_printf_fn+0x2b2>
    840a:	30 e0       	ldi	r19, 0x00	; 0
    840c:	83 2f       	mov	r24, r19
    840e:	92 2f       	mov	r25, r18
    8410:	a3 96       	adiw	r28, 0x23	; 35
    8412:	ee ad       	ldd	r30, Y+62	; 0x3e
    8414:	ff ad       	ldd	r31, Y+63	; 0x3f
    8416:	a3 97       	sbiw	r28, 0x23	; 35
    8418:	e2 54       	subi	r30, 0x42	; 66
    841a:	f1 09       	sbc	r31, r1
    841c:	e7 33       	cpi	r30, 0x37	; 55
    841e:	f1 05       	cpc	r31, r1
    8420:	08 f0       	brcs	.+2      	; 0x8424 <_printf_fn+0x2ca>
    8422:	57 c1       	rjmp	.+686    	; 0x86d2 <_printf_fn+0x578>
    8424:	ea 5b       	subi	r30, 0xBA	; 186
    8426:	ff 4f       	sbci	r31, 0xFF	; 255
    8428:	0c 94 da e2 	jmp	0x1c5b4	; 0x1c5b4 <__tablejump2__>
    842c:	32 e0       	ldi	r19, 0x02	; 2
    842e:	43 2e       	mov	r4, r19
    8430:	51 2c       	mov	r5, r1
    8432:	29 2d       	mov	r18, r9
    8434:	28 72       	andi	r18, 0x28	; 40
    8436:	28 32       	cpi	r18, 0x28	; 40
    8438:	11 f4       	brne	.+4      	; 0x843e <_printf_fn+0x2e4>
    843a:	e8 94       	clt
    843c:	95 f8       	bld	r9, 5
    843e:	29 2d       	mov	r18, r9
    8440:	22 72       	andi	r18, 0x22	; 34
    8442:	22 32       	cpi	r18, 0x22	; 34
    8444:	11 f4       	brne	.+4      	; 0x844a <_printf_fn+0x2f0>
    8446:	e8 94       	clt
    8448:	95 f8       	bld	r9, 5
    844a:	29 2d       	mov	r18, r9
    844c:	21 72       	andi	r18, 0x21	; 33
    844e:	21 32       	cpi	r18, 0x21	; 33
    8450:	79 f4       	brne	.+30     	; 0x8470 <_printf_fn+0x316>
    8452:	a1 96       	adiw	r28, 0x21	; 33
    8454:	ae ad       	ldd	r26, Y+62	; 0x3e
    8456:	bf ad       	ldd	r27, Y+63	; 0x3f
    8458:	a1 97       	sbiw	r28, 0x21	; 33
    845a:	6f 96       	adiw	r28, 0x1f	; 31
    845c:	ee ad       	ldd	r30, Y+62	; 0x3e
    845e:	ff ad       	ldd	r31, Y+63	; 0x3f
    8460:	6f 97       	sbiw	r28, 0x1f	; 31
    8462:	ae 17       	cp	r26, r30
    8464:	bf 07       	cpc	r27, r31
    8466:	24 f4       	brge	.+8      	; 0x8470 <_printf_fn+0x316>
    8468:	a1 96       	adiw	r28, 0x21	; 33
    846a:	ff af       	std	Y+63, r31	; 0x3f
    846c:	ee af       	std	Y+62, r30	; 0x3e
    846e:	a1 97       	sbiw	r28, 0x21	; 33
    8470:	29 2d       	mov	r18, r9
    8472:	23 72       	andi	r18, 0x23	; 35
    8474:	23 32       	cpi	r18, 0x23	; 35
    8476:	79 f4       	brne	.+30     	; 0x8496 <_printf_fn+0x33c>
    8478:	a1 96       	adiw	r28, 0x21	; 33
    847a:	2e ad       	ldd	r18, Y+62	; 0x3e
    847c:	3f ad       	ldd	r19, Y+63	; 0x3f
    847e:	a1 97       	sbiw	r28, 0x21	; 33
    8480:	6f 96       	adiw	r28, 0x1f	; 31
    8482:	4e ad       	ldd	r20, Y+62	; 0x3e
    8484:	5f ad       	ldd	r21, Y+63	; 0x3f
    8486:	6f 97       	sbiw	r28, 0x1f	; 31
    8488:	24 17       	cp	r18, r20
    848a:	35 07       	cpc	r19, r21
    848c:	24 f4       	brge	.+8      	; 0x8496 <_printf_fn+0x33c>
    848e:	a1 96       	adiw	r28, 0x21	; 33
    8490:	5f af       	std	Y+63, r21	; 0x3f
    8492:	4e af       	std	Y+62, r20	; 0x3e
    8494:	a1 97       	sbiw	r28, 0x21	; 33
    8496:	e8 94       	clt
    8498:	94 f8       	bld	r9, 4
    849a:	e8 94       	clt
    849c:	92 f8       	bld	r9, 2
    849e:	e8 94       	clt
    84a0:	96 f8       	bld	r9, 6
    84a2:	52 e0       	ldi	r21, 0x02	; 2
    84a4:	45 16       	cp	r4, r21
    84a6:	51 04       	cpc	r5, r1
    84a8:	f9 f4       	brne	.+62     	; 0x84e8 <_printf_fn+0x38e>
    84aa:	51 01       	movw	r10, r2
    84ac:	82 e0       	ldi	r24, 0x02	; 2
    84ae:	a8 0e       	add	r10, r24
    84b0:	b1 1c       	adc	r11, r1
    84b2:	d1 01       	movw	r26, r2
    84b4:	8d 91       	ld	r24, X+
    84b6:	9c 91       	ld	r25, X
    84b8:	65 96       	adiw	r28, 0x15	; 21
    84ba:	9f af       	std	Y+63, r25	; 0x3f
    84bc:	8e af       	std	Y+62, r24	; 0x3e
    84be:	65 97       	sbiw	r28, 0x15	; 21
    84c0:	a3 96       	adiw	r28, 0x23	; 35
    84c2:	ee ad       	ldd	r30, Y+62	; 0x3e
    84c4:	ff ad       	ldd	r31, Y+63	; 0x3f
    84c6:	a3 97       	sbiw	r28, 0x23	; 35
    84c8:	e4 34       	cpi	r30, 0x44	; 68
    84ca:	f1 05       	cpc	r31, r1
    84cc:	09 f0       	breq	.+2      	; 0x84d0 <_printf_fn+0x376>
    84ce:	ac c0       	rjmp	.+344    	; 0x8628 <_printf_fn+0x4ce>
    84d0:	97 ff       	sbrs	r25, 7
    84d2:	a7 c0       	rjmp	.+334    	; 0x8622 <_printf_fn+0x4c8>
    84d4:	68 94       	set
    84d6:	96 f8       	bld	r9, 6
    84d8:	91 95       	neg	r25
    84da:	81 95       	neg	r24
    84dc:	91 09       	sbc	r25, r1
    84de:	65 96       	adiw	r28, 0x15	; 21
    84e0:	9f af       	std	Y+63, r25	; 0x3f
    84e2:	8e af       	std	Y+62, r24	; 0x3e
    84e4:	65 97       	sbiw	r28, 0x15	; 21
    84e6:	9d c0       	rjmp	.+314    	; 0x8622 <_printf_fn+0x4c8>
    84e8:	f4 e0       	ldi	r31, 0x04	; 4
    84ea:	4f 16       	cp	r4, r31
    84ec:	51 04       	cpc	r5, r1
    84ee:	59 f5       	brne	.+86     	; 0x8546 <_printf_fn+0x3ec>
    84f0:	51 01       	movw	r10, r2
    84f2:	24 e0       	ldi	r18, 0x04	; 4
    84f4:	a2 0e       	add	r10, r18
    84f6:	b1 1c       	adc	r11, r1
    84f8:	f1 01       	movw	r30, r2
    84fa:	80 81       	ld	r24, Z
    84fc:	91 81       	ldd	r25, Z+1	; 0x01
    84fe:	a2 81       	ldd	r26, Z+2	; 0x02
    8500:	b3 81       	ldd	r27, Z+3	; 0x03
    8502:	2f 96       	adiw	r28, 0x0f	; 15
    8504:	8c af       	std	Y+60, r24	; 0x3c
    8506:	9d af       	std	Y+61, r25	; 0x3d
    8508:	ae af       	std	Y+62, r26	; 0x3e
    850a:	bf af       	std	Y+63, r27	; 0x3f
    850c:	2f 97       	sbiw	r28, 0x0f	; 15
    850e:	a3 96       	adiw	r28, 0x23	; 35
    8510:	2e ad       	ldd	r18, Y+62	; 0x3e
    8512:	3f ad       	ldd	r19, Y+63	; 0x3f
    8514:	a3 97       	sbiw	r28, 0x23	; 35
    8516:	24 34       	cpi	r18, 0x44	; 68
    8518:	31 05       	cpc	r19, r1
    851a:	09 f0       	breq	.+2      	; 0x851e <_printf_fn+0x3c4>
    851c:	8f c0       	rjmp	.+286    	; 0x863c <_printf_fn+0x4e2>
    851e:	b7 ff       	sbrs	r27, 7
    8520:	8a c0       	rjmp	.+276    	; 0x8636 <_printf_fn+0x4dc>
    8522:	68 94       	set
    8524:	96 f8       	bld	r9, 6
    8526:	b0 95       	com	r27
    8528:	a0 95       	com	r26
    852a:	90 95       	com	r25
    852c:	81 95       	neg	r24
    852e:	9f 4f       	sbci	r25, 0xFF	; 255
    8530:	af 4f       	sbci	r26, 0xFF	; 255
    8532:	bf 4f       	sbci	r27, 0xFF	; 255
    8534:	2f 96       	adiw	r28, 0x0f	; 15
    8536:	8c af       	std	Y+60, r24	; 0x3c
    8538:	9d af       	std	Y+61, r25	; 0x3d
    853a:	ae af       	std	Y+62, r26	; 0x3e
    853c:	bf af       	std	Y+63, r27	; 0x3f
    853e:	2f 97       	sbiw	r28, 0x0f	; 15
    8540:	7a c0       	rjmp	.+244    	; 0x8636 <_printf_fn+0x4dc>
    8542:	81 e0       	ldi	r24, 0x01	; 1
    8544:	90 e0       	ldi	r25, 0x00	; 0
    8546:	51 01       	movw	r10, r2
    8548:	38 e0       	ldi	r19, 0x08	; 8
    854a:	43 16       	cp	r4, r19
    854c:	51 04       	cpc	r5, r1
    854e:	09 f0       	breq	.+2      	; 0x8552 <_printf_fn+0x3f8>
    8550:	7c c0       	rjmp	.+248    	; 0x864a <_printf_fn+0x4f0>
    8552:	48 e0       	ldi	r20, 0x08	; 8
    8554:	a4 0e       	add	r10, r20
    8556:	b1 1c       	adc	r11, r1
    8558:	d1 01       	movw	r26, r2
    855a:	fc 90       	ld	r15, X
    855c:	f1 01       	movw	r30, r2
    855e:	01 81       	ldd	r16, Z+1	; 0x01
    8560:	12 81       	ldd	r17, Z+2	; 0x02
    8562:	f3 81       	ldd	r31, Z+3	; 0x03
    8564:	aa 96       	adiw	r28, 0x2a	; 42
    8566:	ff af       	std	Y+63, r31	; 0x3f
    8568:	aa 97       	sbiw	r28, 0x2a	; 42
    856a:	f1 01       	movw	r30, r2
    856c:	f4 81       	ldd	r31, Z+4	; 0x04
    856e:	ab 96       	adiw	r28, 0x2b	; 43
    8570:	ff af       	std	Y+63, r31	; 0x3f
    8572:	ab 97       	sbiw	r28, 0x2b	; 43
    8574:	f1 01       	movw	r30, r2
    8576:	b5 81       	ldd	r27, Z+5	; 0x05
    8578:	f6 81       	ldd	r31, Z+6	; 0x06
    857a:	af 96       	adiw	r28, 0x2f	; 47
    857c:	ff af       	std	Y+63, r31	; 0x3f
    857e:	af 97       	sbiw	r28, 0x2f	; 47
    8580:	f1 01       	movw	r30, r2
    8582:	37 80       	ldd	r3, Z+7	; 0x07
    8584:	24 96       	adiw	r28, 0x04	; 4
    8586:	ff ae       	std	Y+63, r15	; 0x3f
    8588:	24 97       	sbiw	r28, 0x04	; 4
    858a:	25 96       	adiw	r28, 0x05	; 5
    858c:	0f af       	std	Y+63, r16	; 0x3f
    858e:	25 97       	sbiw	r28, 0x05	; 5
    8590:	26 96       	adiw	r28, 0x06	; 6
    8592:	1f af       	std	Y+63, r17	; 0x3f
    8594:	26 97       	sbiw	r28, 0x06	; 6
    8596:	aa 96       	adiw	r28, 0x2a	; 42
    8598:	ff ad       	ldd	r31, Y+63	; 0x3f
    859a:	aa 97       	sbiw	r28, 0x2a	; 42
    859c:	27 96       	adiw	r28, 0x07	; 7
    859e:	ff af       	std	Y+63, r31	; 0x3f
    85a0:	27 97       	sbiw	r28, 0x07	; 7
    85a2:	ab 96       	adiw	r28, 0x2b	; 43
    85a4:	ef ad       	ldd	r30, Y+63	; 0x3f
    85a6:	ab 97       	sbiw	r28, 0x2b	; 43
    85a8:	28 96       	adiw	r28, 0x08	; 8
    85aa:	ef af       	std	Y+63, r30	; 0x3f
    85ac:	28 97       	sbiw	r28, 0x08	; 8
    85ae:	29 96       	adiw	r28, 0x09	; 9
    85b0:	bf af       	std	Y+63, r27	; 0x3f
    85b2:	29 97       	sbiw	r28, 0x09	; 9
    85b4:	af 96       	adiw	r28, 0x2f	; 47
    85b6:	ff ad       	ldd	r31, Y+63	; 0x3f
    85b8:	af 97       	sbiw	r28, 0x2f	; 47
    85ba:	2a 96       	adiw	r28, 0x0a	; 10
    85bc:	ff af       	std	Y+63, r31	; 0x3f
    85be:	2a 97       	sbiw	r28, 0x0a	; 10
    85c0:	2b 96       	adiw	r28, 0x0b	; 11
    85c2:	3f ae       	std	Y+63, r3	; 0x3f
    85c4:	2b 97       	sbiw	r28, 0x0b	; 11
    85c6:	89 2b       	or	r24, r25
    85c8:	09 f4       	brne	.+2      	; 0x85cc <_printf_fn+0x472>
    85ca:	4a c0       	rjmp	.+148    	; 0x8660 <_printf_fn+0x506>
    85cc:	2f 2d       	mov	r18, r15
    85ce:	30 2f       	mov	r19, r16
    85d0:	41 2f       	mov	r20, r17
    85d2:	aa 96       	adiw	r28, 0x2a	; 42
    85d4:	5f ad       	ldd	r21, Y+63	; 0x3f
    85d6:	aa 97       	sbiw	r28, 0x2a	; 42
    85d8:	6e 2f       	mov	r22, r30
    85da:	7b 2f       	mov	r23, r27
    85dc:	8f 2f       	mov	r24, r31
    85de:	93 2d       	mov	r25, r3
    85e0:	a0 e0       	ldi	r26, 0x00	; 0
    85e2:	0e 94 47 e3 	call	0x1c68e	; 0x1c68e <__cmpdi2_s8>
    85e6:	e4 f5       	brge	.+120    	; 0x8660 <_printf_fn+0x506>
    85e8:	68 94       	set
    85ea:	96 f8       	bld	r9, 6
    85ec:	0e 94 f9 e2 	call	0x1c5f2	; 0x1c5f2 <__negdi2>
    85f0:	24 96       	adiw	r28, 0x04	; 4
    85f2:	2f af       	std	Y+63, r18	; 0x3f
    85f4:	24 97       	sbiw	r28, 0x04	; 4
    85f6:	25 96       	adiw	r28, 0x05	; 5
    85f8:	3f af       	std	Y+63, r19	; 0x3f
    85fa:	25 97       	sbiw	r28, 0x05	; 5
    85fc:	26 96       	adiw	r28, 0x06	; 6
    85fe:	4f af       	std	Y+63, r20	; 0x3f
    8600:	26 97       	sbiw	r28, 0x06	; 6
    8602:	27 96       	adiw	r28, 0x07	; 7
    8604:	5f af       	std	Y+63, r21	; 0x3f
    8606:	27 97       	sbiw	r28, 0x07	; 7
    8608:	28 96       	adiw	r28, 0x08	; 8
    860a:	6f af       	std	Y+63, r22	; 0x3f
    860c:	28 97       	sbiw	r28, 0x08	; 8
    860e:	29 96       	adiw	r28, 0x09	; 9
    8610:	7f af       	std	Y+63, r23	; 0x3f
    8612:	29 97       	sbiw	r28, 0x09	; 9
    8614:	2a 96       	adiw	r28, 0x0a	; 10
    8616:	8f af       	std	Y+63, r24	; 0x3f
    8618:	2a 97       	sbiw	r28, 0x0a	; 10
    861a:	2b 96       	adiw	r28, 0x0b	; 11
    861c:	9f af       	std	Y+63, r25	; 0x3f
    861e:	2b 97       	sbiw	r28, 0x0b	; 11
    8620:	1f c0       	rjmp	.+62     	; 0x8660 <_printf_fn+0x506>
    8622:	22 e0       	ldi	r18, 0x02	; 2
    8624:	42 2e       	mov	r4, r18
    8626:	51 2c       	mov	r5, r1
    8628:	6c 96       	adiw	r28, 0x1c	; 28
    862a:	8f ad       	ldd	r24, Y+63	; 0x3f
    862c:	6c 97       	sbiw	r28, 0x1c	; 28
    862e:	6d 96       	adiw	r28, 0x1d	; 29
    8630:	9f ad       	ldd	r25, Y+63	; 0x3f
    8632:	6d 97       	sbiw	r28, 0x1d	; 29
    8634:	1b c0       	rjmp	.+54     	; 0x866c <_printf_fn+0x512>
    8636:	94 e0       	ldi	r25, 0x04	; 4
    8638:	49 2e       	mov	r4, r25
    863a:	51 2c       	mov	r5, r1
    863c:	6a 96       	adiw	r28, 0x1a	; 26
    863e:	8f ad       	ldd	r24, Y+63	; 0x3f
    8640:	6a 97       	sbiw	r28, 0x1a	; 26
    8642:	6b 96       	adiw	r28, 0x1b	; 27
    8644:	9f ad       	ldd	r25, Y+63	; 0x3f
    8646:	6b 97       	sbiw	r28, 0x1b	; 27
    8648:	11 c0       	rjmp	.+34     	; 0x866c <_printf_fn+0x512>
    864a:	66 96       	adiw	r28, 0x16	; 22
    864c:	8f ad       	ldd	r24, Y+63	; 0x3f
    864e:	66 97       	sbiw	r28, 0x16	; 22
    8650:	67 96       	adiw	r28, 0x17	; 23
    8652:	9f ad       	ldd	r25, Y+63	; 0x3f
    8654:	67 97       	sbiw	r28, 0x17	; 23
    8656:	a3 96       	adiw	r28, 0x23	; 35
    8658:	1f ae       	std	Y+63, r1	; 0x3f
    865a:	1e ae       	std	Y+62, r1	; 0x3e
    865c:	a3 97       	sbiw	r28, 0x23	; 35
    865e:	06 c0       	rjmp	.+12     	; 0x866c <_printf_fn+0x512>
    8660:	68 96       	adiw	r28, 0x18	; 24
    8662:	8f ad       	ldd	r24, Y+63	; 0x3f
    8664:	68 97       	sbiw	r28, 0x18	; 24
    8666:	69 96       	adiw	r28, 0x19	; 25
    8668:	9f ad       	ldd	r25, Y+63	; 0x3f
    866a:	69 97       	sbiw	r28, 0x19	; 25
    866c:	2f ef       	ldi	r18, 0xFF	; 255
    866e:	62 1a       	sub	r6, r18
    8670:	72 0a       	sbc	r7, r18
    8672:	82 0a       	sbc	r8, r18
    8674:	15 01       	movw	r2, r10
    8676:	33 c0       	rjmp	.+102    	; 0x86de <_printf_fn+0x584>
    8678:	91 fc       	sbrc	r9, 1
    867a:	08 c0       	rjmp	.+16     	; 0x868c <_printf_fn+0x532>
    867c:	68 94       	set
    867e:	91 f8       	bld	r9, 1
    8680:	46 e0       	ldi	r20, 0x06	; 6
    8682:	50 e0       	ldi	r21, 0x00	; 0
    8684:	a1 96       	adiw	r28, 0x21	; 33
    8686:	5f af       	std	Y+63, r21	; 0x3f
    8688:	4e af       	std	Y+62, r20	; 0x3e
    868a:	a1 97       	sbiw	r28, 0x21	; 33
    868c:	d1 01       	movw	r26, r2
    868e:	8d 91       	ld	r24, X+
    8690:	9d 91       	ld	r25, X+
    8692:	0d 90       	ld	r0, X+
    8694:	bc 91       	ld	r27, X
    8696:	a0 2d       	mov	r26, r0
    8698:	a9 96       	adiw	r28, 0x29	; 41
    869a:	8c af       	std	Y+60, r24	; 0x3c
    869c:	9d af       	std	Y+61, r25	; 0x3d
    869e:	ae af       	std	Y+62, r26	; 0x3e
    86a0:	bf af       	std	Y+63, r27	; 0x3f
    86a2:	a9 97       	sbiw	r28, 0x29	; 41
    86a4:	bf ef       	ldi	r27, 0xFF	; 255
    86a6:	6b 1a       	sub	r6, r27
    86a8:	7b 0a       	sbc	r7, r27
    86aa:	8b 0a       	sbc	r8, r27
    86ac:	f1 01       	movw	r30, r2
    86ae:	34 96       	adiw	r30, 0x04	; 4
    86b0:	1f 01       	movw	r2, r30
    86b2:	0f c0       	rjmp	.+30     	; 0x86d2 <_printf_fn+0x578>
    86b4:	ff ef       	ldi	r31, 0xFF	; 255
    86b6:	6f 1a       	sub	r6, r31
    86b8:	7f 0a       	sbc	r7, r31
    86ba:	8f 0a       	sbc	r8, r31
    86bc:	c5 c0       	rjmp	.+394    	; 0x8848 <_printf_fn+0x6ee>
    86be:	2f ef       	ldi	r18, 0xFF	; 255
    86c0:	62 1a       	sub	r6, r18
    86c2:	72 0a       	sbc	r7, r18
    86c4:	82 0a       	sbc	r8, r18
    86c6:	11 c1       	rjmp	.+546    	; 0x88ea <_printf_fn+0x790>
    86c8:	3f ef       	ldi	r19, 0xFF	; 255
    86ca:	63 1a       	sub	r6, r19
    86cc:	73 0a       	sbc	r7, r19
    86ce:	83 0a       	sbc	r8, r19
    86d0:	c8 c0       	rjmp	.+400    	; 0x8862 <_printf_fn+0x708>
    86d2:	66 96       	adiw	r28, 0x16	; 22
    86d4:	8f ad       	ldd	r24, Y+63	; 0x3f
    86d6:	66 97       	sbiw	r28, 0x16	; 22
    86d8:	67 96       	adiw	r28, 0x17	; 23
    86da:	9f ad       	ldd	r25, Y+63	; 0x3f
    86dc:	67 97       	sbiw	r28, 0x17	; 23
    86de:	a3 96       	adiw	r28, 0x23	; 35
    86e0:	ee ad       	ldd	r30, Y+62	; 0x3e
    86e2:	ff ad       	ldd	r31, Y+63	; 0x3f
    86e4:	a3 97       	sbiw	r28, 0x23	; 35
    86e6:	e2 54       	subi	r30, 0x42	; 66
    86e8:	f1 09       	sbc	r31, r1
    86ea:	e7 33       	cpi	r30, 0x37	; 55
    86ec:	f1 05       	cpc	r31, r1
    86ee:	08 f0       	brcs	.+2      	; 0x86f2 <_printf_fn+0x598>
    86f0:	56 c1       	rjmp	.+684    	; 0x899e <_printf_fn+0x844>
    86f2:	e3 58       	subi	r30, 0x83	; 131
    86f4:	ff 4f       	sbci	r31, 0xFF	; 255
    86f6:	0c 94 da e2 	jmp	0x1c5b4	; 0x1c5b4 <__tablejump2__>
    86fa:	e8 94       	clt
    86fc:	94 f8       	bld	r9, 4
    86fe:	e8 94       	clt
    8700:	92 f8       	bld	r9, 2
    8702:	a9 2c       	mov	r10, r9
    8704:	b1 2c       	mov	r11, r1
    8706:	a1 96       	adiw	r28, 0x21	; 33
    8708:	ce ac       	ldd	r12, Y+62	; 0x3e
    870a:	df ac       	ldd	r13, Y+63	; 0x3f
    870c:	a1 97       	sbiw	r28, 0x21	; 33
    870e:	6f 96       	adiw	r28, 0x1f	; 31
    8710:	ee ac       	ldd	r14, Y+62	; 0x3e
    8712:	ff ac       	ldd	r15, Y+63	; 0x3f
    8714:	6f 97       	sbiw	r28, 0x1f	; 31
    8716:	0a e0       	ldi	r16, 0x0A	; 10
    8718:	10 e0       	ldi	r17, 0x00	; 0
    871a:	19 c0       	rjmp	.+50     	; 0x874e <_printf_fn+0x5f4>
    871c:	a9 2c       	mov	r10, r9
    871e:	b1 2c       	mov	r11, r1
    8720:	a1 96       	adiw	r28, 0x21	; 33
    8722:	ce ac       	ldd	r12, Y+62	; 0x3e
    8724:	df ac       	ldd	r13, Y+63	; 0x3f
    8726:	a1 97       	sbiw	r28, 0x21	; 33
    8728:	6f 96       	adiw	r28, 0x1f	; 31
    872a:	ee ac       	ldd	r14, Y+62	; 0x3e
    872c:	ff ac       	ldd	r15, Y+63	; 0x3f
    872e:	6f 97       	sbiw	r28, 0x1f	; 31
    8730:	02 e0       	ldi	r16, 0x02	; 2
    8732:	10 e0       	ldi	r17, 0x00	; 0
    8734:	0c c0       	rjmp	.+24     	; 0x874e <_printf_fn+0x5f4>
    8736:	a9 2c       	mov	r10, r9
    8738:	b1 2c       	mov	r11, r1
    873a:	a1 96       	adiw	r28, 0x21	; 33
    873c:	ce ac       	ldd	r12, Y+62	; 0x3e
    873e:	df ac       	ldd	r13, Y+63	; 0x3f
    8740:	a1 97       	sbiw	r28, 0x21	; 33
    8742:	6f 96       	adiw	r28, 0x1f	; 31
    8744:	ee ac       	ldd	r14, Y+62	; 0x3e
    8746:	ff ac       	ldd	r15, Y+63	; 0x3f
    8748:	6f 97       	sbiw	r28, 0x1f	; 31
    874a:	08 e0       	ldi	r16, 0x08	; 8
    874c:	10 e0       	ldi	r17, 0x00	; 0
    874e:	22 e4       	ldi	r18, 0x42	; 66
    8750:	30 e0       	ldi	r19, 0x00	; 0
    8752:	ae 01       	movw	r20, r28
    8754:	4f 5f       	subi	r20, 0xFF	; 255
    8756:	5f 4f       	sbci	r21, 0xFF	; 255
    8758:	b2 01       	movw	r22, r4
    875a:	7d d9       	rcall	.-3334   	; 0x7a56 <p_ntoa>
    875c:	34 c0       	rjmp	.+104    	; 0x87c6 <_printf_fn+0x66c>
    875e:	a9 2c       	mov	r10, r9
    8760:	b1 2c       	mov	r11, r1
    8762:	a1 96       	adiw	r28, 0x21	; 33
    8764:	ce ac       	ldd	r12, Y+62	; 0x3e
    8766:	df ac       	ldd	r13, Y+63	; 0x3f
    8768:	a1 97       	sbiw	r28, 0x21	; 33
    876a:	6f 96       	adiw	r28, 0x1f	; 31
    876c:	ee ac       	ldd	r14, Y+62	; 0x3e
    876e:	ff ac       	ldd	r15, Y+63	; 0x3f
    8770:	6f 97       	sbiw	r28, 0x1f	; 31
    8772:	00 e1       	ldi	r16, 0x10	; 16
    8774:	10 e0       	ldi	r17, 0x00	; 0
    8776:	22 e4       	ldi	r18, 0x42	; 66
    8778:	30 e0       	ldi	r19, 0x00	; 0
    877a:	ae 01       	movw	r20, r28
    877c:	4f 5f       	subi	r20, 0xFF	; 255
    877e:	5f 4f       	sbci	r21, 0xFF	; 255
    8780:	b2 01       	movw	r22, r4
    8782:	69 d9       	rcall	.-3374   	; 0x7a56 <p_ntoa>
    8784:	6c 01       	movw	r12, r24
    8786:	a3 96       	adiw	r28, 0x23	; 35
    8788:	6e ad       	ldd	r22, Y+62	; 0x3e
    878a:	7f ad       	ldd	r23, Y+63	; 0x3f
    878c:	a3 97       	sbiw	r28, 0x23	; 35
    878e:	67 7f       	andi	r22, 0xF7	; 247
    8790:	60 35       	cpi	r22, 0x50	; 80
    8792:	71 05       	cpc	r23, r1
    8794:	09 f0       	breq	.+2      	; 0x8798 <_printf_fn+0x63e>
    8796:	3f c0       	rjmp	.+126    	; 0x8816 <_printf_fn+0x6bc>
    8798:	3a c0       	rjmp	.+116    	; 0x880e <_printf_fn+0x6b4>
    879a:	c9 2c       	mov	r12, r9
    879c:	d1 2c       	mov	r13, r1
    879e:	a1 96       	adiw	r28, 0x21	; 33
    87a0:	ee ac       	ldd	r14, Y+62	; 0x3e
    87a2:	ff ac       	ldd	r15, Y+63	; 0x3f
    87a4:	a1 97       	sbiw	r28, 0x21	; 33
    87a6:	6f 96       	adiw	r28, 0x1f	; 31
    87a8:	0e ad       	ldd	r16, Y+62	; 0x3e
    87aa:	1f ad       	ldd	r17, Y+63	; 0x3f
    87ac:	6f 97       	sbiw	r28, 0x1f	; 31
    87ae:	22 e4       	ldi	r18, 0x42	; 66
    87b0:	30 e0       	ldi	r19, 0x00	; 0
    87b2:	ae 01       	movw	r20, r28
    87b4:	4f 5f       	subi	r20, 0xFF	; 255
    87b6:	5f 4f       	sbci	r21, 0xFF	; 255
    87b8:	a9 96       	adiw	r28, 0x29	; 41
    87ba:	6c ad       	ldd	r22, Y+60	; 0x3c
    87bc:	7d ad       	ldd	r23, Y+61	; 0x3d
    87be:	8e ad       	ldd	r24, Y+62	; 0x3e
    87c0:	9f ad       	ldd	r25, Y+63	; 0x3f
    87c2:	a9 97       	sbiw	r28, 0x29	; 41
    87c4:	9d d9       	rcall	.-3270   	; 0x7b00 <p_ftoa>
    87c6:	93 fa       	bst	r9, 3
    87c8:	00 27       	eor	r16, r16
    87ca:	00 f9       	bld	r16, 0
    87cc:	10 e0       	ldi	r17, 0x00	; 0
    87ce:	9c 01       	movw	r18, r24
    87d0:	27 c0       	rjmp	.+78     	; 0x8820 <_printf_fn+0x6c6>
    87d2:	c9 2c       	mov	r12, r9
    87d4:	d1 2c       	mov	r13, r1
    87d6:	a1 96       	adiw	r28, 0x21	; 33
    87d8:	ee ac       	ldd	r14, Y+62	; 0x3e
    87da:	ff ac       	ldd	r15, Y+63	; 0x3f
    87dc:	a1 97       	sbiw	r28, 0x21	; 33
    87de:	6f 96       	adiw	r28, 0x1f	; 31
    87e0:	0e ad       	ldd	r16, Y+62	; 0x3e
    87e2:	1f ad       	ldd	r17, Y+63	; 0x3f
    87e4:	6f 97       	sbiw	r28, 0x1f	; 31
    87e6:	22 e4       	ldi	r18, 0x42	; 66
    87e8:	30 e0       	ldi	r19, 0x00	; 0
    87ea:	ae 01       	movw	r20, r28
    87ec:	4f 5f       	subi	r20, 0xFF	; 255
    87ee:	5f 4f       	sbci	r21, 0xFF	; 255
    87f0:	a9 96       	adiw	r28, 0x29	; 41
    87f2:	6c ad       	ldd	r22, Y+60	; 0x3c
    87f4:	7d ad       	ldd	r23, Y+61	; 0x3d
    87f6:	8e ad       	ldd	r24, Y+62	; 0x3e
    87f8:	9f ad       	ldd	r25, Y+63	; 0x3f
    87fa:	a9 97       	sbiw	r28, 0x29	; 41
    87fc:	88 da       	rcall	.-2800   	; 0x7d0e <p_etoa>
    87fe:	6c 01       	movw	r12, r24
    8800:	a3 96       	adiw	r28, 0x23	; 35
    8802:	4e ad       	ldd	r20, Y+62	; 0x3e
    8804:	5f ad       	ldd	r21, Y+63	; 0x3f
    8806:	a3 97       	sbiw	r28, 0x23	; 35
    8808:	45 34       	cpi	r20, 0x45	; 69
    880a:	51 05       	cpc	r21, r1
    880c:	21 f4       	brne	.+8      	; 0x8816 <_printf_fn+0x6bc>
    880e:	ce 01       	movw	r24, r28
    8810:	01 96       	adiw	r24, 0x01	; 1
    8812:	0e 94 e0 2f 	call	0x5fc0	; 0x5fc0 <strupper>
    8816:	93 fa       	bst	r9, 3
    8818:	00 27       	eor	r16, r16
    881a:	00 f9       	bld	r16, 0
    881c:	10 e0       	ldi	r17, 0x00	; 0
    881e:	96 01       	movw	r18, r12
    8820:	6f 96       	adiw	r28, 0x1f	; 31
    8822:	4e ad       	ldd	r20, Y+62	; 0x3e
    8824:	5f ad       	ldd	r21, Y+63	; 0x3f
    8826:	6f 97       	sbiw	r28, 0x1f	; 31
    8828:	be 01       	movw	r22, r28
    882a:	6f 5f       	subi	r22, 0xFF	; 255
    882c:	7f 4f       	sbci	r23, 0xFF	; 255
    882e:	a5 96       	adiw	r28, 0x25	; 37
    8830:	8e ad       	ldd	r24, Y+62	; 0x3e
    8832:	9f ad       	ldd	r25, Y+63	; 0x3f
    8834:	a5 97       	sbiw	r28, 0x25	; 37
    8836:	d7 db       	rcall	.-2130   	; 0x7fe6 <_puts_pad>
    8838:	b6 c0       	rjmp	.+364    	; 0x89a6 <_printf_fn+0x84c>
    883a:	a3 96       	adiw	r28, 0x23	; 35
    883c:	8e ad       	ldd	r24, Y+62	; 0x3e
    883e:	9f ad       	ldd	r25, Y+63	; 0x3f
    8840:	a3 97       	sbiw	r28, 0x23	; 35
    8842:	83 37       	cpi	r24, 0x73	; 115
    8844:	91 05       	cpc	r25, r1
    8846:	69 f4       	brne	.+26     	; 0x8862 <_printf_fn+0x708>
    8848:	61 01       	movw	r12, r2
    884a:	92 e0       	ldi	r25, 0x02	; 2
    884c:	c9 0e       	add	r12, r25
    884e:	d1 1c       	adc	r13, r1
    8850:	d1 01       	movw	r26, r2
    8852:	6d 91       	ld	r22, X+
    8854:	7c 91       	ld	r23, X
    8856:	61 15       	cp	r22, r1
    8858:	71 05       	cpc	r23, r1
    885a:	91 f4       	brne	.+36     	; 0x8880 <_printf_fn+0x726>
    885c:	6a e1       	ldi	r22, 0x1A	; 26
    885e:	74 e0       	ldi	r23, 0x04	; 4
    8860:	0f c0       	rjmp	.+30     	; 0x8880 <_printf_fn+0x726>
    8862:	61 01       	movw	r12, r2
    8864:	b2 e0       	ldi	r27, 0x02	; 2
    8866:	cb 0e       	add	r12, r27
    8868:	d1 1c       	adc	r13, r1
    886a:	f1 01       	movw	r30, r2
    886c:	80 81       	ld	r24, Z
    886e:	60 96       	adiw	r28, 0x10	; 16
    8870:	8f af       	std	Y+63, r24	; 0x3f
    8872:	60 97       	sbiw	r28, 0x10	; 16
    8874:	61 96       	adiw	r28, 0x11	; 17
    8876:	1f ae       	std	Y+63, r1	; 0x3f
    8878:	61 97       	sbiw	r28, 0x11	; 17
    887a:	be 01       	movw	r22, r28
    887c:	61 5b       	subi	r22, 0xB1	; 177
    887e:	7f 4f       	sbci	r23, 0xFF	; 255
    8880:	fb 01       	movw	r30, r22
    8882:	01 90       	ld	r0, Z+
    8884:	00 20       	and	r0, r0
    8886:	e9 f7       	brne	.-6      	; 0x8882 <_printf_fn+0x728>
    8888:	31 97       	sbiw	r30, 0x01	; 1
    888a:	e6 1b       	sub	r30, r22
    888c:	f7 0b       	sbc	r31, r23
    888e:	a1 96       	adiw	r28, 0x21	; 33
    8890:	2e ad       	ldd	r18, Y+62	; 0x3e
    8892:	3f ad       	ldd	r19, Y+63	; 0x3f
    8894:	a1 97       	sbiw	r28, 0x21	; 33
    8896:	23 2b       	or	r18, r19
    8898:	21 f4       	brne	.+8      	; 0x88a2 <_printf_fn+0x748>
    889a:	a1 96       	adiw	r28, 0x21	; 33
    889c:	ff af       	std	Y+63, r31	; 0x3f
    889e:	ee af       	std	Y+62, r30	; 0x3e
    88a0:	a1 97       	sbiw	r28, 0x21	; 33
    88a2:	6f 96       	adiw	r28, 0x1f	; 31
    88a4:	4e ad       	ldd	r20, Y+62	; 0x3e
    88a6:	5f ad       	ldd	r21, Y+63	; 0x3f
    88a8:	6f 97       	sbiw	r28, 0x1f	; 31
    88aa:	a1 96       	adiw	r28, 0x21	; 33
    88ac:	8e ad       	ldd	r24, Y+62	; 0x3e
    88ae:	9f ad       	ldd	r25, Y+63	; 0x3f
    88b0:	a1 97       	sbiw	r28, 0x21	; 33
    88b2:	48 17       	cp	r20, r24
    88b4:	59 07       	cpc	r21, r25
    88b6:	3c f4       	brge	.+14     	; 0x88c6 <_printf_fn+0x76c>
    88b8:	41 15       	cp	r20, r1
    88ba:	51 05       	cpc	r21, r1
    88bc:	21 f0       	breq	.+8      	; 0x88c6 <_printf_fn+0x76c>
    88be:	a1 96       	adiw	r28, 0x21	; 33
    88c0:	5f af       	std	Y+63, r21	; 0x3f
    88c2:	4e af       	std	Y+62, r20	; 0x3e
    88c4:	a1 97       	sbiw	r28, 0x21	; 33
    88c6:	93 fa       	bst	r9, 3
    88c8:	00 27       	eor	r16, r16
    88ca:	00 f9       	bld	r16, 0
    88cc:	10 e0       	ldi	r17, 0x00	; 0
    88ce:	a1 96       	adiw	r28, 0x21	; 33
    88d0:	2e ad       	ldd	r18, Y+62	; 0x3e
    88d2:	3f ad       	ldd	r19, Y+63	; 0x3f
    88d4:	a1 97       	sbiw	r28, 0x21	; 33
    88d6:	6f 96       	adiw	r28, 0x1f	; 31
    88d8:	4e ad       	ldd	r20, Y+62	; 0x3e
    88da:	5f ad       	ldd	r21, Y+63	; 0x3f
    88dc:	6f 97       	sbiw	r28, 0x1f	; 31
    88de:	a5 96       	adiw	r28, 0x25	; 37
    88e0:	8e ad       	ldd	r24, Y+62	; 0x3e
    88e2:	9f ad       	ldd	r25, Y+63	; 0x3f
    88e4:	a5 97       	sbiw	r28, 0x25	; 37
    88e6:	7f db       	rcall	.-2306   	; 0x7fe6 <_puts_pad>
    88e8:	45 c0       	rjmp	.+138    	; 0x8974 <_printf_fn+0x81a>
    88ea:	61 01       	movw	r12, r2
    88ec:	92 e0       	ldi	r25, 0x02	; 2
    88ee:	c9 0e       	add	r12, r25
    88f0:	d1 1c       	adc	r13, r1
    88f2:	d1 01       	movw	r26, r2
    88f4:	2d 90       	ld	r2, X+
    88f6:	3c 90       	ld	r3, X
    88f8:	41 2c       	mov	r4, r1
    88fa:	21 14       	cp	r2, r1
    88fc:	31 04       	cpc	r3, r1
    88fe:	41 04       	cpc	r4, r1
    8900:	29 f4       	brne	.+10     	; 0x890c <_printf_fn+0x7b2>
    8902:	ae 96       	adiw	r28, 0x2e	; 46
    8904:	2d ac       	ldd	r2, Y+61	; 0x3d
    8906:	3e ac       	ldd	r3, Y+62	; 0x3e
    8908:	4f ac       	ldd	r4, Y+63	; 0x3f
    890a:	ae 97       	sbiw	r28, 0x2e	; 46
    890c:	84 2d       	mov	r24, r4
    890e:	b1 01       	movw	r22, r2
    8910:	08 dc       	rcall	.-2032   	; 0x8122 <strlen_X>
    8912:	a1 96       	adiw	r28, 0x21	; 33
    8914:	ee ad       	ldd	r30, Y+62	; 0x3e
    8916:	ff ad       	ldd	r31, Y+63	; 0x3f
    8918:	a1 97       	sbiw	r28, 0x21	; 33
    891a:	ef 2b       	or	r30, r31
    891c:	31 f4       	brne	.+12     	; 0x892a <_printf_fn+0x7d0>
    891e:	a0 96       	adiw	r28, 0x20	; 32
    8920:	8f af       	std	Y+63, r24	; 0x3f
    8922:	a0 97       	sbiw	r28, 0x20	; 32
    8924:	a1 96       	adiw	r28, 0x21	; 33
    8926:	9f af       	std	Y+63, r25	; 0x3f
    8928:	a1 97       	sbiw	r28, 0x21	; 33
    892a:	6f 96       	adiw	r28, 0x1f	; 31
    892c:	2e ad       	ldd	r18, Y+62	; 0x3e
    892e:	3f ad       	ldd	r19, Y+63	; 0x3f
    8930:	6f 97       	sbiw	r28, 0x1f	; 31
    8932:	a1 96       	adiw	r28, 0x21	; 33
    8934:	4e ad       	ldd	r20, Y+62	; 0x3e
    8936:	5f ad       	ldd	r21, Y+63	; 0x3f
    8938:	a1 97       	sbiw	r28, 0x21	; 33
    893a:	24 17       	cp	r18, r20
    893c:	35 07       	cpc	r19, r21
    893e:	3c f4       	brge	.+14     	; 0x894e <_printf_fn+0x7f4>
    8940:	21 15       	cp	r18, r1
    8942:	31 05       	cpc	r19, r1
    8944:	21 f0       	breq	.+8      	; 0x894e <_printf_fn+0x7f4>
    8946:	a1 96       	adiw	r28, 0x21	; 33
    8948:	3f af       	std	Y+63, r19	; 0x3f
    894a:	2e af       	std	Y+62, r18	; 0x3e
    894c:	a1 97       	sbiw	r28, 0x21	; 33
    894e:	93 fa       	bst	r9, 3
    8950:	ee 24       	eor	r14, r14
    8952:	e0 f8       	bld	r14, 0
    8954:	f1 2c       	mov	r15, r1
    8956:	a1 96       	adiw	r28, 0x21	; 33
    8958:	0e ad       	ldd	r16, Y+62	; 0x3e
    895a:	1f ad       	ldd	r17, Y+63	; 0x3f
    895c:	a1 97       	sbiw	r28, 0x21	; 33
    895e:	6f 96       	adiw	r28, 0x1f	; 31
    8960:	2e ad       	ldd	r18, Y+62	; 0x3e
    8962:	3f ad       	ldd	r19, Y+63	; 0x3f
    8964:	6f 97       	sbiw	r28, 0x1f	; 31
    8966:	64 2d       	mov	r22, r4
    8968:	a1 01       	movw	r20, r2
    896a:	a5 96       	adiw	r28, 0x25	; 37
    896c:	8e ad       	ldd	r24, Y+62	; 0x3e
    896e:	9f ad       	ldd	r25, Y+63	; 0x3f
    8970:	a5 97       	sbiw	r28, 0x25	; 37
    8972:	7b db       	rcall	.-2314   	; 0x806a <_puts_pad_X>
    8974:	16 01       	movw	r2, r12
    8976:	17 c0       	rjmp	.+46     	; 0x89a6 <_printf_fn+0x84c>
    8978:	f6 01       	movw	r30, r12
    897a:	5e 2d       	mov	r21, r14
    897c:	0e 94 40 e3 	call	0x1c680	; 0x1c680 <__xload_1>
    8980:	66 23       	and	r22, r22
    8982:	89 f0       	breq	.+34     	; 0x89a6 <_printf_fn+0x84c>
    8984:	5f ef       	ldi	r21, 0xFF	; 255
    8986:	c5 1a       	sub	r12, r21
    8988:	d5 0a       	sbc	r13, r21
    898a:	e5 0a       	sbc	r14, r21
    898c:	a5 96       	adiw	r28, 0x25	; 37
    898e:	ae ad       	ldd	r26, Y+62	; 0x3e
    8990:	bf ad       	ldd	r27, Y+63	; 0x3f
    8992:	a5 97       	sbiw	r28, 0x25	; 37
    8994:	ed 91       	ld	r30, X+
    8996:	fc 91       	ld	r31, X
    8998:	11 97       	sbiw	r26, 0x01	; 1
    899a:	cd 01       	movw	r24, r26
    899c:	09 95       	icall
    899e:	6c 14       	cp	r6, r12
    89a0:	7d 04       	cpc	r7, r13
    89a2:	8e 04       	cpc	r8, r14
    89a4:	48 f7       	brcc	.-46     	; 0x8978 <_printf_fn+0x81e>
    89a6:	e8 2c       	mov	r14, r8
    89a8:	63 01       	movw	r12, r6
    89aa:	0f cc       	rjmp	.-2018   	; 0x81ca <_printf_fn+0x70>
    89ac:	82 e0       	ldi	r24, 0x02	; 2
    89ae:	48 2e       	mov	r4, r24
    89b0:	51 2c       	mov	r5, r1
    89b2:	0d cd       	rjmp	.-1510   	; 0x83ce <_printf_fn+0x274>
    89b4:	f2 e0       	ldi	r31, 0x02	; 2
    89b6:	4f 16       	cp	r4, r31
    89b8:	51 04       	cpc	r5, r1
    89ba:	61 f4       	brne	.+24     	; 0x89d4 <_printf_fn+0x87a>
    89bc:	51 01       	movw	r10, r2
    89be:	b2 e0       	ldi	r27, 0x02	; 2
    89c0:	ab 0e       	add	r10, r27
    89c2:	b1 1c       	adc	r11, r1
    89c4:	f1 01       	movw	r30, r2
    89c6:	80 81       	ld	r24, Z
    89c8:	91 81       	ldd	r25, Z+1	; 0x01
    89ca:	65 96       	adiw	r28, 0x15	; 21
    89cc:	9f af       	std	Y+63, r25	; 0x3f
    89ce:	8e af       	std	Y+62, r24	; 0x3e
    89d0:	65 97       	sbiw	r28, 0x15	; 21
    89d2:	7e cd       	rjmp	.-1284   	; 0x84d0 <_printf_fn+0x376>
    89d4:	f4 e0       	ldi	r31, 0x04	; 4
    89d6:	4f 16       	cp	r4, r31
    89d8:	51 04       	cpc	r5, r1
    89da:	09 f0       	breq	.+2      	; 0x89de <_printf_fn+0x884>
    89dc:	b2 cd       	rjmp	.-1180   	; 0x8542 <_printf_fn+0x3e8>
    89de:	51 01       	movw	r10, r2
    89e0:	24 e0       	ldi	r18, 0x04	; 4
    89e2:	a2 0e       	add	r10, r18
    89e4:	b1 1c       	adc	r11, r1
    89e6:	f1 01       	movw	r30, r2
    89e8:	80 81       	ld	r24, Z
    89ea:	91 81       	ldd	r25, Z+1	; 0x01
    89ec:	a2 81       	ldd	r26, Z+2	; 0x02
    89ee:	b3 81       	ldd	r27, Z+3	; 0x03
    89f0:	2f 96       	adiw	r28, 0x0f	; 15
    89f2:	8c af       	std	Y+60, r24	; 0x3c
    89f4:	9d af       	std	Y+61, r25	; 0x3d
    89f6:	ae af       	std	Y+62, r26	; 0x3e
    89f8:	bf af       	std	Y+63, r27	; 0x3f
    89fa:	2f 97       	sbiw	r28, 0x0f	; 15
    89fc:	90 cd       	rjmp	.-1248   	; 0x851e <_printf_fn+0x3c4>
    89fe:	c2 59       	subi	r28, 0x92	; 146
    8a00:	df 4f       	sbci	r29, 0xFF	; 255
    8a02:	e2 e1       	ldi	r30, 0x12	; 18
    8a04:	0c 94 25 e3 	jmp	0x1c64a	; 0x1c64a <__epilogue_restores__>

00008a08 <vsnprintf_P>:
    8a08:	a8 e0       	ldi	r26, 0x08	; 8
    8a0a:	b0 e0       	ldi	r27, 0x00	; 0
    8a0c:	ea e0       	ldi	r30, 0x0A	; 10
    8a0e:	f5 e4       	ldi	r31, 0x45	; 69
    8a10:	0c 94 15 e3 	jmp	0x1c62a	; 0x1c62a <__prologue_saves__+0x18>
    8a14:	7c 01       	movw	r14, r24
    8a16:	cb 01       	movw	r24, r22
    8a18:	64 2f       	mov	r22, r20
    8a1a:	a9 01       	movw	r20, r18
    8a1c:	98 01       	movw	r18, r16
    8a1e:	f7 01       	movw	r30, r14
    8a20:	10 82       	st	Z, r1
    8a22:	e2 e6       	ldi	r30, 0x62	; 98
    8a24:	fc e3       	ldi	r31, 0x3C	; 60
    8a26:	fa 83       	std	Y+2, r31	; 0x02
    8a28:	e9 83       	std	Y+1, r30	; 0x01
    8a2a:	9e 83       	std	Y+6, r25	; 0x06
    8a2c:	8d 83       	std	Y+5, r24	; 0x05
    8a2e:	18 86       	std	Y+8, r1	; 0x08
    8a30:	1f 82       	std	Y+7, r1	; 0x07
    8a32:	fc 82       	std	Y+4, r15	; 0x04
    8a34:	eb 82       	std	Y+3, r14	; 0x03
    8a36:	ce 01       	movw	r24, r28
    8a38:	01 96       	adiw	r24, 0x01	; 1
    8a3a:	8f db       	rcall	.-2274   	; 0x815a <_printf_fn>
    8a3c:	f7 01       	movw	r30, r14
    8a3e:	01 90       	ld	r0, Z+
    8a40:	00 20       	and	r0, r0
    8a42:	e9 f7       	brne	.-6      	; 0x8a3e <vsnprintf_P+0x36>
    8a44:	cf 01       	movw	r24, r30
    8a46:	01 97       	sbiw	r24, 0x01	; 1
    8a48:	8e 19       	sub	r24, r14
    8a4a:	9f 09       	sbc	r25, r15
    8a4c:	28 96       	adiw	r28, 0x08	; 8
    8a4e:	e6 e0       	ldi	r30, 0x06	; 6
    8a50:	0c 94 31 e3 	jmp	0x1c662	; 0x1c662 <__epilogue_restores__+0x18>

00008a54 <snprintf_P>:
    8a54:	a0 e0       	ldi	r26, 0x00	; 0
    8a56:	b0 e0       	ldi	r27, 0x00	; 0
    8a58:	e0 e3       	ldi	r30, 0x30	; 48
    8a5a:	f5 e4       	ldi	r31, 0x45	; 69
    8a5c:	0c 94 17 e3 	jmp	0x1c62e	; 0x1c62e <__prologue_saves__+0x1c>
    8a60:	8e 01       	movw	r16, r28
    8a62:	02 5f       	subi	r16, 0xF2	; 242
    8a64:	1f 4f       	sbci	r17, 0xFF	; 255
    8a66:	2b 85       	ldd	r18, Y+11	; 0x0b
    8a68:	3c 85       	ldd	r19, Y+12	; 0x0c
    8a6a:	4d 85       	ldd	r20, Y+13	; 0x0d
    8a6c:	69 85       	ldd	r22, Y+9	; 0x09
    8a6e:	7a 85       	ldd	r23, Y+10	; 0x0a
    8a70:	8f 81       	ldd	r24, Y+7	; 0x07
    8a72:	98 85       	ldd	r25, Y+8	; 0x08
    8a74:	c9 df       	rcall	.-110    	; 0x8a08 <vsnprintf_P>
    8a76:	e4 e0       	ldi	r30, 0x04	; 4
    8a78:	0c 94 33 e3 	jmp	0x1c666	; 0x1c666 <__epilogue_restores__+0x1c>

00008a7c <sprintf_P>:
    8a7c:	a0 e0       	ldi	r26, 0x00	; 0
    8a7e:	b0 e0       	ldi	r27, 0x00	; 0
    8a80:	e4 e4       	ldi	r30, 0x44	; 68
    8a82:	f5 e4       	ldi	r31, 0x45	; 69
    8a84:	0c 94 17 e3 	jmp	0x1c62e	; 0x1c62e <__prologue_saves__+0x1c>
    8a88:	8e 01       	movw	r16, r28
    8a8a:	04 5f       	subi	r16, 0xF4	; 244
    8a8c:	1f 4f       	sbci	r17, 0xFF	; 255
    8a8e:	29 85       	ldd	r18, Y+9	; 0x09
    8a90:	3a 85       	ldd	r19, Y+10	; 0x0a
    8a92:	4b 85       	ldd	r20, Y+11	; 0x0b
    8a94:	60 e0       	ldi	r22, 0x00	; 0
    8a96:	74 e0       	ldi	r23, 0x04	; 4
    8a98:	8f 81       	ldd	r24, Y+7	; 0x07
    8a9a:	98 85       	ldd	r25, Y+8	; 0x08
    8a9c:	b5 df       	rcall	.-150    	; 0x8a08 <vsnprintf_P>
    8a9e:	e4 e0       	ldi	r30, 0x04	; 4
    8aa0:	0c 94 33 e3 	jmp	0x1c666	; 0x1c666 <__epilogue_restores__+0x1c>

00008aa4 <printf_P>:
/// @return size of printed string
/// TODO create a devprintf using an array of function prointers ?
MEMSPACE
int
printf_P(__memx const char *format, ...)
{
    8aa4:	a8 e0       	ldi	r26, 0x08	; 8
    8aa6:	b0 e0       	ldi	r27, 0x00	; 0
    8aa8:	e8 e5       	ldi	r30, 0x58	; 88
    8aaa:	f5 e4       	ldi	r31, 0x45	; 69
    8aac:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__prologue_saves__+0x20>
    8ab0:	9e 01       	movw	r18, r28
    8ab2:	23 5f       	subi	r18, 0xF3	; 243
    8ab4:	3f 4f       	sbci	r19, 0xFF	; 255
    8ab6:	f9 01       	movw	r30, r18
    8ab8:	41 91       	ld	r20, Z+
    8aba:	51 91       	ld	r21, Z+
    8abc:	61 91       	ld	r22, Z+
    8abe:	9f 01       	movw	r18, r30
    printf_t fn;
    va_list va;

    fn.put = _putc_fn;
    8ac0:	8b e7       	ldi	r24, 0x7B	; 123
    8ac2:	9c e3       	ldi	r25, 0x3C	; 60
    8ac4:	9a 83       	std	Y+2, r25	; 0x02
    8ac6:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    8ac8:	18 86       	std	Y+8, r1	; 0x08
    8aca:	1f 82       	std	Y+7, r1	; 0x07

    va_start(va, format);
    _printf_fn(&fn, format, va);
    8acc:	ce 01       	movw	r24, r28
    8ace:	01 96       	adiw	r24, 0x01	; 1
    8ad0:	44 db       	rcall	.-2424   	; 0x815a <_printf_fn>
    va_end(va);

    return ((int)fn.sent);
}
    8ad2:	8f 81       	ldd	r24, Y+7	; 0x07
    8ad4:	98 85       	ldd	r25, Y+8	; 0x08
    8ad6:	28 96       	adiw	r28, 0x08	; 8
    8ad8:	e2 e0       	ldi	r30, 0x02	; 2
    8ada:	0c 94 35 e3 	jmp	0x1c66a	; 0x1c66a <__epilogue_restores__+0x20>

00008ade <atodigit>:
    if(sign)
        num = -num;
    if(endptr)
        *endptr = (char *) nptr;
    return(num);
}
    8ade:	9c 01       	movw	r18, r24
    8ae0:	20 53       	subi	r18, 0x30	; 48
    8ae2:	31 09       	sbc	r19, r1
    8ae4:	2a 30       	cpi	r18, 0x0A	; 10
    8ae6:	31 05       	cpc	r19, r1
    8ae8:	10 f4       	brcc	.+4      	; 0x8aee <atodigit+0x10>
    8aea:	c9 01       	movw	r24, r18
    8aec:	10 c0       	rjmp	.+32     	; 0x8b0e <atodigit+0x30>
    8aee:	9c 01       	movw	r18, r24
    8af0:	21 54       	subi	r18, 0x41	; 65
    8af2:	31 09       	sbc	r19, r1
    8af4:	26 30       	cpi	r18, 0x06	; 6
    8af6:	31 05       	cpc	r19, r1
    8af8:	10 f4       	brcc	.+4      	; 0x8afe <atodigit+0x20>
    8afa:	c7 97       	sbiw	r24, 0x37	; 55
    8afc:	08 c0       	rjmp	.+16     	; 0x8b0e <atodigit+0x30>
    8afe:	9c 01       	movw	r18, r24
    8b00:	21 56       	subi	r18, 0x61	; 97
    8b02:	31 09       	sbc	r19, r1
    8b04:	26 30       	cpi	r18, 0x06	; 6
    8b06:	31 05       	cpc	r19, r1
    8b08:	28 f4       	brcc	.+10     	; 0x8b14 <atodigit+0x36>
    8b0a:	87 55       	subi	r24, 0x57	; 87
    8b0c:	91 09       	sbc	r25, r1
    8b0e:	86 17       	cp	r24, r22
    8b10:	97 07       	cpc	r25, r23
    8b12:	14 f0       	brlt	.+4      	; 0x8b18 <atodigit+0x3a>
    8b14:	8f ef       	ldi	r24, 0xFF	; 255
    8b16:	9f ef       	ldi	r25, 0xFF	; 255
    8b18:	08 95       	ret

00008b1a <strtol>:
    8b1a:	a0 e0       	ldi	r26, 0x00	; 0
    8b1c:	b0 e0       	ldi	r27, 0x00	; 0
    8b1e:	e3 e9       	ldi	r30, 0x93	; 147
    8b20:	f5 e4       	ldi	r31, 0x45	; 69
    8b22:	0c 94 09 e3 	jmp	0x1c612	; 0x1c612 <__prologue_saves__>
    8b26:	2b 01       	movw	r4, r22
    8b28:	8a 01       	movw	r16, r20
    8b2a:	ec 01       	movw	r28, r24
    8b2c:	28 81       	ld	r18, Y
    8b2e:	01 96       	adiw	r24, 0x01	; 1
    8b30:	20 32       	cpi	r18, 0x20	; 32
    8b32:	d9 f3       	breq	.-10     	; 0x8b2a <strtol+0x10>
    8b34:	29 30       	cpi	r18, 0x09	; 9
    8b36:	c9 f3       	breq	.-14     	; 0x8b2a <strtol+0x10>
    8b38:	2d 32       	cpi	r18, 0x2D	; 45
    8b3a:	29 f4       	brne	.+10     	; 0x8b46 <strtol+0x2c>
    8b3c:	ec 01       	movw	r28, r24
    8b3e:	66 24       	eor	r6, r6
    8b40:	63 94       	inc	r6
    8b42:	71 2c       	mov	r7, r1
    8b44:	05 c0       	rjmp	.+10     	; 0x8b50 <strtol+0x36>
    8b46:	2b 32       	cpi	r18, 0x2B	; 43
    8b48:	09 f4       	brne	.+2      	; 0x8b4c <strtol+0x32>
    8b4a:	ec 01       	movw	r28, r24
    8b4c:	61 2c       	mov	r6, r1
    8b4e:	71 2c       	mov	r7, r1
    8b50:	9e 01       	movw	r18, r28
    8b52:	2f 5f       	subi	r18, 0xFF	; 255
    8b54:	3f 4f       	sbci	r19, 0xFF	; 255
    8b56:	88 81       	ld	r24, Y
    8b58:	80 33       	cpi	r24, 0x30	; 48
    8b5a:	11 f4       	brne	.+4      	; 0x8b60 <strtol+0x46>
    8b5c:	e9 01       	movw	r28, r18
    8b5e:	f8 cf       	rjmp	.-16     	; 0x8b50 <strtol+0x36>
    8b60:	c1 2c       	mov	r12, r1
    8b62:	d1 2c       	mov	r13, r1
    8b64:	76 01       	movw	r14, r12
    8b66:	48 01       	movw	r8, r16
    8b68:	01 2e       	mov	r0, r17
    8b6a:	00 0c       	add	r0, r0
    8b6c:	aa 08       	sbc	r10, r10
    8b6e:	bb 08       	sbc	r11, r11
    8b70:	3c 2e       	mov	r3, r28
    8b72:	2d 2e       	mov	r2, r29
    8b74:	89 91       	ld	r24, Y+
    8b76:	88 23       	and	r24, r24
    8b78:	31 f0       	breq	.+12     	; 0x8b86 <strtol+0x6c>
    8b7a:	b8 01       	movw	r22, r16
    8b7c:	90 e0       	ldi	r25, 0x00	; 0
    8b7e:	af df       	rcall	.-162    	; 0x8ade <atodigit>
    8b80:	fc 01       	movw	r30, r24
    8b82:	97 ff       	sbrs	r25, 7
    8b84:	0c c0       	rjmp	.+24     	; 0x8b9e <strtol+0x84>
    8b86:	61 14       	cp	r6, r1
    8b88:	71 04       	cpc	r7, r1
    8b8a:	c1 f0       	breq	.+48     	; 0x8bbc <strtol+0xa2>
    8b8c:	f0 94       	com	r15
    8b8e:	e0 94       	com	r14
    8b90:	d0 94       	com	r13
    8b92:	c0 94       	com	r12
    8b94:	c1 1c       	adc	r12, r1
    8b96:	d1 1c       	adc	r13, r1
    8b98:	e1 1c       	adc	r14, r1
    8b9a:	f1 1c       	adc	r15, r1
    8b9c:	0f c0       	rjmp	.+30     	; 0x8bbc <strtol+0xa2>
    8b9e:	a5 01       	movw	r20, r10
    8ba0:	94 01       	movw	r18, r8
    8ba2:	c7 01       	movw	r24, r14
    8ba4:	b6 01       	movw	r22, r12
    8ba6:	0e 94 5a e2 	call	0x1c4b4	; 0x1c4b4 <__mulsi3>
    8baa:	6f 01       	movw	r12, r30
    8bac:	ff 0f       	add	r31, r31
    8bae:	ee 08       	sbc	r14, r14
    8bb0:	ff 08       	sbc	r15, r15
    8bb2:	c6 0e       	add	r12, r22
    8bb4:	d7 1e       	adc	r13, r23
    8bb6:	e8 1e       	adc	r14, r24
    8bb8:	f9 1e       	adc	r15, r25
    8bba:	da cf       	rjmp	.-76     	; 0x8b70 <strtol+0x56>
    8bbc:	41 14       	cp	r4, r1
    8bbe:	51 04       	cpc	r5, r1
    8bc0:	19 f0       	breq	.+6      	; 0x8bc8 <strtol+0xae>
    8bc2:	f2 01       	movw	r30, r4
    8bc4:	30 82       	st	Z, r3
    8bc6:	21 82       	std	Z+1, r2	; 0x01
    8bc8:	c7 01       	movw	r24, r14
    8bca:	b6 01       	movw	r22, r12
    8bcc:	cd b7       	in	r28, 0x3d	; 61
    8bce:	de b7       	in	r29, 0x3e	; 62
    8bd0:	e2 e1       	ldi	r30, 0x12	; 18
    8bd2:	0c 94 25 e3 	jmp	0x1c64a	; 0x1c64a <__epilogue_restores__>

00008bd6 <atoi>:
MEMSPACE
int
atoi(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    8bd6:	4a e0       	ldi	r20, 0x0A	; 10
    8bd8:	50 e0       	ldi	r21, 0x00	; 0
    8bda:	60 e0       	ldi	r22, 0x00	; 0
    8bdc:	70 e0       	ldi	r23, 0x00	; 0
    8bde:	9d df       	rcall	.-198    	; 0x8b1a <strtol>
    return((int)num);
}
    8be0:	cb 01       	movw	r24, r22
    8be2:	08 95       	ret

00008be4 <atol>:
MEMSPACE
long
atol(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    8be4:	4a e0       	ldi	r20, 0x0A	; 10
    8be6:	50 e0       	ldi	r21, 0x00	; 0
    8be8:	60 e0       	ldi	r22, 0x00	; 0
    8bea:	70 e0       	ldi	r23, 0x00	; 0
    8bec:	96 cf       	rjmp	.-212    	; 0x8b1a <strtol>
    return(num);
}
    8bee:	08 95       	ret

00008bf0 <ld_dword>:
#endif
		if (res != FR_OK) ABORT(fs, res);
	}

	LEAVE_FF(fs, res);
}
    8bf0:	fc 01       	movw	r30, r24
    8bf2:	62 81       	ldd	r22, Z+2	; 0x02
    8bf4:	73 81       	ldd	r23, Z+3	; 0x03
    8bf6:	cb 01       	movw	r24, r22
    8bf8:	a0 e0       	ldi	r26, 0x00	; 0
    8bfa:	b0 e0       	ldi	r27, 0x00	; 0
    8bfc:	ba 2f       	mov	r27, r26
    8bfe:	a9 2f       	mov	r26, r25
    8c00:	98 2f       	mov	r25, r24
    8c02:	88 27       	eor	r24, r24
    8c04:	21 81       	ldd	r18, Z+1	; 0x01
    8c06:	82 2b       	or	r24, r18
    8c08:	ba 2f       	mov	r27, r26
    8c0a:	a9 2f       	mov	r26, r25
    8c0c:	98 2f       	mov	r25, r24
    8c0e:	88 27       	eor	r24, r24
    8c10:	20 81       	ld	r18, Z
    8c12:	bc 01       	movw	r22, r24
    8c14:	cd 01       	movw	r24, r26
    8c16:	62 2b       	or	r22, r18
    8c18:	08 95       	ret

00008c1a <st_dword>:
    8c1a:	fc 01       	movw	r30, r24
    8c1c:	40 83       	st	Z, r20
    8c1e:	51 83       	std	Z+1, r21	; 0x01
    8c20:	62 83       	std	Z+2, r22	; 0x02
    8c22:	73 83       	std	Z+3, r23	; 0x03
    8c24:	08 95       	ret

00008c26 <mem_set>:
    8c26:	48 0f       	add	r20, r24
    8c28:	59 1f       	adc	r21, r25
    8c2a:	fc 01       	movw	r30, r24
    8c2c:	61 93       	st	Z+, r22
    8c2e:	cf 01       	movw	r24, r30
    8c30:	e4 17       	cp	r30, r20
    8c32:	f5 07       	cpc	r31, r21
    8c34:	d1 f7       	brne	.-12     	; 0x8c2a <mem_set+0x4>
    8c36:	08 95       	ret

00008c38 <mem_cmp>:
    8c38:	dc 01       	movw	r26, r24
    8c3a:	fb 01       	movw	r30, r22
    8c3c:	2d 91       	ld	r18, X+
    8c3e:	81 91       	ld	r24, Z+
    8c40:	30 e0       	ldi	r19, 0x00	; 0
    8c42:	b9 01       	movw	r22, r18
    8c44:	68 1b       	sub	r22, r24
    8c46:	71 09       	sbc	r23, r1
    8c48:	cb 01       	movw	r24, r22
    8c4a:	41 50       	subi	r20, 0x01	; 1
    8c4c:	51 09       	sbc	r21, r1
    8c4e:	11 f0       	breq	.+4      	; 0x8c54 <mem_cmp+0x1c>
    8c50:	00 97       	sbiw	r24, 0x00	; 0
    8c52:	a1 f3       	breq	.-24     	; 0x8c3c <mem_cmp+0x4>
    8c54:	08 95       	ret

00008c56 <clst2sect>:
    8c56:	0f 93       	push	r16
    8c58:	1f 93       	push	r17
    8c5a:	fc 01       	movw	r30, r24
    8c5c:	9a 01       	movw	r18, r20
    8c5e:	ab 01       	movw	r20, r22
    8c60:	22 50       	subi	r18, 0x02	; 2
    8c62:	31 09       	sbc	r19, r1
    8c64:	41 09       	sbc	r20, r1
    8c66:	51 09       	sbc	r21, r1
    8c68:	81 8d       	ldd	r24, Z+25	; 0x19
    8c6a:	92 8d       	ldd	r25, Z+26	; 0x1a
    8c6c:	a3 8d       	ldd	r26, Z+27	; 0x1b
    8c6e:	b4 8d       	ldd	r27, Z+28	; 0x1c
    8c70:	02 97       	sbiw	r24, 0x02	; 2
    8c72:	a1 09       	sbc	r26, r1
    8c74:	b1 09       	sbc	r27, r1
    8c76:	28 17       	cp	r18, r24
    8c78:	39 07       	cpc	r19, r25
    8c7a:	4a 07       	cpc	r20, r26
    8c7c:	5b 07       	cpc	r21, r27
    8c7e:	68 f4       	brcc	.+26     	; 0x8c9a <clst2sect+0x44>
    8c80:	a1 85       	ldd	r26, Z+9	; 0x09
    8c82:	b2 85       	ldd	r27, Z+10	; 0x0a
    8c84:	0e 94 e9 e2 	call	0x1c5d2	; 0x1c5d2 <__muluhisi3>
    8c88:	05 a5       	ldd	r16, Z+45	; 0x2d
    8c8a:	16 a5       	ldd	r17, Z+46	; 0x2e
    8c8c:	27 a5       	ldd	r18, Z+47	; 0x2f
    8c8e:	30 a9       	ldd	r19, Z+48	; 0x30
    8c90:	60 0f       	add	r22, r16
    8c92:	71 1f       	adc	r23, r17
    8c94:	82 1f       	adc	r24, r18
    8c96:	93 1f       	adc	r25, r19
    8c98:	03 c0       	rjmp	.+6      	; 0x8ca0 <clst2sect+0x4a>
    8c9a:	60 e0       	ldi	r22, 0x00	; 0
    8c9c:	70 e0       	ldi	r23, 0x00	; 0
    8c9e:	cb 01       	movw	r24, r22
    8ca0:	1f 91       	pop	r17
    8ca2:	0f 91       	pop	r16
    8ca4:	08 95       	ret

00008ca6 <clmt_clust>:
    8ca6:	cf 93       	push	r28
    8ca8:	df 93       	push	r29
    8caa:	fc 01       	movw	r30, r24
    8cac:	c2 a1       	ldd	r28, Z+34	; 0x22
    8cae:	d3 a1       	ldd	r29, Z+35	; 0x23
    8cb0:	24 96       	adiw	r28, 0x04	; 4
    8cb2:	cb 01       	movw	r24, r22
    8cb4:	ba 01       	movw	r22, r20
    8cb6:	29 e0       	ldi	r18, 0x09	; 9
    8cb8:	96 95       	lsr	r25
    8cba:	87 95       	ror	r24
    8cbc:	77 95       	ror	r23
    8cbe:	67 95       	ror	r22
    8cc0:	2a 95       	dec	r18
    8cc2:	d1 f7       	brne	.-12     	; 0x8cb8 <clmt_clust+0x12>
    8cc4:	01 90       	ld	r0, Z+
    8cc6:	f0 81       	ld	r31, Z
    8cc8:	e0 2d       	mov	r30, r0
    8cca:	21 85       	ldd	r18, Z+9	; 0x09
    8ccc:	32 85       	ldd	r19, Z+10	; 0x0a
    8cce:	40 e0       	ldi	r20, 0x00	; 0
    8cd0:	50 e0       	ldi	r21, 0x00	; 0
    8cd2:	0e 94 9c e2 	call	0x1c538	; 0x1c538 <__udivmodsi4>
    8cd6:	88 81       	ld	r24, Y
    8cd8:	99 81       	ldd	r25, Y+1	; 0x01
    8cda:	aa 81       	ldd	r26, Y+2	; 0x02
    8cdc:	bb 81       	ldd	r27, Y+3	; 0x03
    8cde:	00 97       	sbiw	r24, 0x00	; 0
    8ce0:	a1 05       	cpc	r26, r1
    8ce2:	b1 05       	cpc	r27, r1
    8ce4:	b1 f0       	breq	.+44     	; 0x8d12 <clmt_clust+0x6c>
    8ce6:	28 17       	cp	r18, r24
    8ce8:	39 07       	cpc	r19, r25
    8cea:	4a 07       	cpc	r20, r26
    8cec:	5b 07       	cpc	r21, r27
    8cee:	30 f0       	brcs	.+12     	; 0x8cfc <clmt_clust+0x56>
    8cf0:	28 1b       	sub	r18, r24
    8cf2:	39 0b       	sbc	r19, r25
    8cf4:	4a 0b       	sbc	r20, r26
    8cf6:	5b 0b       	sbc	r21, r27
    8cf8:	28 96       	adiw	r28, 0x08	; 8
    8cfa:	ed cf       	rjmp	.-38     	; 0x8cd6 <clmt_clust+0x30>
    8cfc:	8c 81       	ldd	r24, Y+4	; 0x04
    8cfe:	9d 81       	ldd	r25, Y+5	; 0x05
    8d00:	ae 81       	ldd	r26, Y+6	; 0x06
    8d02:	bf 81       	ldd	r27, Y+7	; 0x07
    8d04:	bc 01       	movw	r22, r24
    8d06:	cd 01       	movw	r24, r26
    8d08:	62 0f       	add	r22, r18
    8d0a:	73 1f       	adc	r23, r19
    8d0c:	84 1f       	adc	r24, r20
    8d0e:	95 1f       	adc	r25, r21
    8d10:	03 c0       	rjmp	.+6      	; 0x8d18 <clmt_clust+0x72>
    8d12:	60 e0       	ldi	r22, 0x00	; 0
    8d14:	70 e0       	ldi	r23, 0x00	; 0
    8d16:	cb 01       	movw	r24, r22
    8d18:	df 91       	pop	r29
    8d1a:	cf 91       	pop	r28
    8d1c:	08 95       	ret

00008d1e <sum_sfn>:
    8d1e:	fc 01       	movw	r30, r24
    8d20:	9c 01       	movw	r18, r24
    8d22:	25 5f       	subi	r18, 0xF5	; 245
    8d24:	3f 4f       	sbci	r19, 0xFF	; 255
    8d26:	80 e0       	ldi	r24, 0x00	; 0
    8d28:	98 2f       	mov	r25, r24
    8d2a:	90 fb       	bst	r25, 0
    8d2c:	97 95       	ror	r25
    8d2e:	97 f9       	bld	r25, 7
    8d30:	81 91       	ld	r24, Z+
    8d32:	89 0f       	add	r24, r25
    8d34:	e2 17       	cp	r30, r18
    8d36:	f3 07       	cpc	r31, r19
    8d38:	b9 f7       	brne	.-18     	; 0x8d28 <sum_sfn+0xa>
    8d3a:	08 95       	ret

00008d3c <get_ldnumber>:
    8d3c:	cf 93       	push	r28
    8d3e:	df 93       	push	r29
    8d40:	dc 01       	movw	r26, r24
    8d42:	ed 91       	ld	r30, X+
    8d44:	fc 91       	ld	r31, X
    8d46:	11 97       	sbiw	r26, 0x01	; 1
    8d48:	30 97       	sbiw	r30, 0x00	; 0
    8d4a:	f9 f0       	breq	.+62     	; 0x8d8a <get_ldnumber+0x4e>
    8d4c:	9f 01       	movw	r18, r30
    8d4e:	2f 5f       	subi	r18, 0xFF	; 255
    8d50:	3f 4f       	sbci	r19, 0xFF	; 255
    8d52:	e9 01       	movw	r28, r18
    8d54:	21 97       	sbiw	r28, 0x01	; 1
    8d56:	88 81       	ld	r24, Y
    8d58:	80 32       	cpi	r24, 0x20	; 32
    8d5a:	18 f0       	brcs	.+6      	; 0x8d62 <get_ldnumber+0x26>
    8d5c:	8a 33       	cpi	r24, 0x3A	; 58
    8d5e:	b9 f7       	brne	.-18     	; 0x8d4e <get_ldnumber+0x12>
    8d60:	04 c0       	rjmp	.+8      	; 0x8d6a <get_ldnumber+0x2e>
    8d62:	80 91 2a 18 	lds	r24, 0x182A	; 0x80182a <CurrVol>
    8d66:	90 e0       	ldi	r25, 0x00	; 0
    8d68:	12 c0       	rjmp	.+36     	; 0x8d8e <get_ldnumber+0x52>
    8d6a:	90 81       	ld	r25, Z
    8d6c:	80 ed       	ldi	r24, 0xD0	; 208
    8d6e:	89 0f       	add	r24, r25
    8d70:	8a 30       	cpi	r24, 0x0A	; 10
    8d72:	58 f4       	brcc	.+22     	; 0x8d8a <get_ldnumber+0x4e>
    8d74:	32 96       	adiw	r30, 0x02	; 2
    8d76:	2e 17       	cp	r18, r30
    8d78:	3f 07       	cpc	r19, r31
    8d7a:	39 f4       	brne	.+14     	; 0x8d8a <get_ldnumber+0x4e>
    8d7c:	90 33       	cpi	r25, 0x30	; 48
    8d7e:	29 f4       	brne	.+10     	; 0x8d8a <get_ldnumber+0x4e>
    8d80:	2d 93       	st	X+, r18
    8d82:	3c 93       	st	X, r19
    8d84:	80 e0       	ldi	r24, 0x00	; 0
    8d86:	90 e0       	ldi	r25, 0x00	; 0
    8d88:	02 c0       	rjmp	.+4      	; 0x8d8e <get_ldnumber+0x52>
    8d8a:	8f ef       	ldi	r24, 0xFF	; 255
    8d8c:	9f ef       	ldi	r25, 0xFF	; 255
    8d8e:	df 91       	pop	r29
    8d90:	cf 91       	pop	r28
    8d92:	08 95       	ret

00008d94 <validate>:
    8d94:	0f 93       	push	r16
    8d96:	1f 93       	push	r17
    8d98:	cf 93       	push	r28
    8d9a:	df 93       	push	r29
    8d9c:	ec 01       	movw	r28, r24
    8d9e:	8b 01       	movw	r16, r22
    8da0:	89 2b       	or	r24, r25
    8da2:	f9 f0       	breq	.+62     	; 0x8de2 <validate+0x4e>
    8da4:	e8 81       	ld	r30, Y
    8da6:	f9 81       	ldd	r31, Y+1	; 0x01
    8da8:	30 97       	sbiw	r30, 0x00	; 0
    8daa:	d9 f0       	breq	.+54     	; 0x8de2 <validate+0x4e>
    8dac:	80 81       	ld	r24, Z
    8dae:	88 23       	and	r24, r24
    8db0:	c1 f0       	breq	.+48     	; 0x8de2 <validate+0x4e>
    8db2:	2a 81       	ldd	r18, Y+2	; 0x02
    8db4:	3b 81       	ldd	r19, Y+3	; 0x03
    8db6:	85 81       	ldd	r24, Z+5	; 0x05
    8db8:	96 81       	ldd	r25, Z+6	; 0x06
    8dba:	28 17       	cp	r18, r24
    8dbc:	39 07       	cpc	r19, r25
    8dbe:	89 f4       	brne	.+34     	; 0x8de2 <validate+0x4e>
    8dc0:	81 81       	ldd	r24, Z+1	; 0x01
    8dc2:	0e 94 e0 67 	call	0xcfc0	; 0xcfc0 <disk_status>
    8dc6:	80 fd       	sbrc	r24, 0
    8dc8:	0c c0       	rjmp	.+24     	; 0x8de2 <validate+0x4e>
    8dca:	28 81       	ld	r18, Y
    8dcc:	39 81       	ldd	r19, Y+1	; 0x01
    8dce:	80 e0       	ldi	r24, 0x00	; 0
    8dd0:	90 e0       	ldi	r25, 0x00	; 0
    8dd2:	f8 01       	movw	r30, r16
    8dd4:	31 83       	std	Z+1, r19	; 0x01
    8dd6:	20 83       	st	Z, r18
    8dd8:	df 91       	pop	r29
    8dda:	cf 91       	pop	r28
    8ddc:	1f 91       	pop	r17
    8dde:	0f 91       	pop	r16
    8de0:	08 95       	ret
    8de2:	89 e0       	ldi	r24, 0x09	; 9
    8de4:	90 e0       	ldi	r25, 0x00	; 0
    8de6:	20 e0       	ldi	r18, 0x00	; 0
    8de8:	30 e0       	ldi	r19, 0x00	; 0
    8dea:	f3 cf       	rjmp	.-26     	; 0x8dd2 <validate+0x3e>

00008dec <get_fileinfo>:
    8dec:	a8 e0       	ldi	r26, 0x08	; 8
    8dee:	b0 e0       	ldi	r27, 0x00	; 0
    8df0:	ec ef       	ldi	r30, 0xFC	; 252
    8df2:	f6 e4       	ldi	r31, 0x46	; 70
    8df4:	0c 94 09 e3 	jmp	0x1c612	; 0x1c612 <__prologue_saves__>
    8df8:	fc 01       	movw	r30, r24
    8dfa:	01 90       	ld	r0, Z+
    8dfc:	f0 81       	ld	r31, Z
    8dfe:	e0 2d       	mov	r30, r0
    8e00:	f8 87       	std	Y+8, r31	; 0x08
    8e02:	ef 83       	std	Y+7, r30	; 0x07
    8e04:	fb 01       	movw	r30, r22
    8e06:	16 8a       	std	Z+22, r1	; 0x16
    8e08:	fc 01       	movw	r30, r24
    8e0a:	06 89       	ldd	r16, Z+22	; 0x16
    8e0c:	17 89       	ldd	r17, Z+23	; 0x17
    8e0e:	20 8d       	ldd	r18, Z+24	; 0x18
    8e10:	31 8d       	ldd	r19, Z+25	; 0x19
    8e12:	01 15       	cp	r16, r1
    8e14:	11 05       	cpc	r17, r1
    8e16:	21 05       	cpc	r18, r1
    8e18:	31 05       	cpc	r19, r1
    8e1a:	09 f4       	brne	.+2      	; 0x8e1e <get_fileinfo+0x32>
    8e1c:	0d c1       	rjmp	.+538    	; 0x9038 <get_fileinfo+0x24c>
    8e1e:	7e 83       	std	Y+6, r23	; 0x06
    8e20:	6d 83       	std	Y+5, r22	; 0x05
    8e22:	7c 01       	movw	r14, r24
    8e24:	80 a5       	ldd	r24, Z+40	; 0x28
    8e26:	91 a5       	ldd	r25, Z+41	; 0x29
    8e28:	a2 a5       	ldd	r26, Z+42	; 0x2a
    8e2a:	b3 a5       	ldd	r27, Z+43	; 0x2b
    8e2c:	8f 3f       	cpi	r24, 0xFF	; 255
    8e2e:	9f 4f       	sbci	r25, 0xFF	; 255
    8e30:	af 4f       	sbci	r26, 0xFF	; 255
    8e32:	bf 4f       	sbci	r27, 0xFF	; 255
    8e34:	09 f4       	brne	.+2      	; 0x8e38 <get_fileinfo+0x4c>
    8e36:	6c c0       	rjmp	.+216    	; 0x8f10 <get_fileinfo+0x124>
    8e38:	a1 2c       	mov	r10, r1
    8e3a:	b1 2c       	mov	r11, r1
    8e3c:	c1 2c       	mov	r12, r1
    8e3e:	d1 2c       	mov	r13, r1
    8e40:	00 e0       	ldi	r16, 0x00	; 0
    8e42:	10 e0       	ldi	r17, 0x00	; 0
    8e44:	66 24       	eor	r6, r6
    8e46:	6a 94       	dec	r6
    8e48:	71 2c       	mov	r7, r1
    8e4a:	ef 81       	ldd	r30, Y+7	; 0x07
    8e4c:	f8 85       	ldd	r31, Y+8	; 0x08
    8e4e:	83 85       	ldd	r24, Z+11	; 0x0b
    8e50:	94 85       	ldd	r25, Z+12	; 0x0c
    8e52:	fc 01       	movw	r30, r24
    8e54:	ea 0d       	add	r30, r10
    8e56:	fb 1d       	adc	r31, r11
    8e58:	80 81       	ld	r24, Z
    8e5a:	91 81       	ldd	r25, Z+1	; 0x01
    8e5c:	00 97       	sbiw	r24, 0x00	; 0
    8e5e:	09 f4       	brne	.+2      	; 0x8e62 <get_fileinfo+0x76>
    8e60:	4d c0       	rjmp	.+154    	; 0x8efc <get_fileinfo+0x110>
    8e62:	c1 14       	cp	r12, r1
    8e64:	d1 04       	cpc	r13, r1
    8e66:	29 f4       	brne	.+10     	; 0x8e72 <get_fileinfo+0x86>
    8e68:	9c 01       	movw	r18, r24
    8e6a:	38 5d       	subi	r19, 0xD8	; 216
    8e6c:	21 15       	cp	r18, r1
    8e6e:	38 40       	sbci	r19, 0x08	; 8
    8e70:	f0 f1       	brcs	.+124    	; 0x8eee <get_fileinfo+0x102>
    8e72:	43 01       	movw	r8, r6
    8e74:	80 1a       	sub	r8, r16
    8e76:	91 0a       	sbc	r9, r17
    8e78:	a6 01       	movw	r20, r12
    8e7a:	60 e0       	ldi	r22, 0x00	; 0
    8e7c:	70 e0       	ldi	r23, 0x00	; 0
    8e7e:	2a 01       	movw	r4, r20
    8e80:	33 24       	eor	r3, r3
    8e82:	22 24       	eor	r2, r2
    8e84:	a0 e0       	ldi	r26, 0x00	; 0
    8e86:	b0 e0       	ldi	r27, 0x00	; 0
    8e88:	28 2a       	or	r2, r24
    8e8a:	39 2a       	or	r3, r25
    8e8c:	4a 2a       	or	r4, r26
    8e8e:	5b 2a       	or	r5, r27
    8e90:	c2 01       	movw	r24, r4
    8e92:	b1 01       	movw	r22, r2
    8e94:	45 eb       	ldi	r20, 0xB5	; 181
    8e96:	51 e0       	ldi	r21, 0x01	; 1
    8e98:	0e 94 36 67 	call	0xce6c	; 0xce6c <ff_uni2oem>
    8e9c:	8f 3f       	cpi	r24, 0xFF	; 255
    8e9e:	91 05       	cpc	r25, r1
    8ea0:	89 f0       	breq	.+34     	; 0x8ec4 <get_fileinfo+0xd8>
    8ea2:	80 f0       	brcs	.+32     	; 0x8ec4 <get_fileinfo+0xd8>
    8ea4:	22 e0       	ldi	r18, 0x02	; 2
    8ea6:	82 16       	cp	r8, r18
    8ea8:	91 04       	cpc	r9, r1
    8eaa:	c0 f0       	brcs	.+48     	; 0x8edc <get_fileinfo+0xf0>
    8eac:	ed 81       	ldd	r30, Y+5	; 0x05
    8eae:	fe 81       	ldd	r31, Y+6	; 0x06
    8eb0:	e0 0f       	add	r30, r16
    8eb2:	f1 1f       	adc	r31, r17
    8eb4:	96 8b       	std	Z+22, r25	; 0x16
    8eb6:	ed 81       	ldd	r30, Y+5	; 0x05
    8eb8:	fe 81       	ldd	r31, Y+6	; 0x06
    8eba:	e0 0f       	add	r30, r16
    8ebc:	f1 1f       	adc	r31, r17
    8ebe:	87 8b       	std	Z+23, r24	; 0x17
    8ec0:	82 e0       	ldi	r24, 0x02	; 2
    8ec2:	0d c0       	rjmp	.+26     	; 0x8ede <get_fileinfo+0xf2>
    8ec4:	00 97       	sbiw	r24, 0x00	; 0
    8ec6:	51 f0       	breq	.+20     	; 0x8edc <get_fileinfo+0xf0>
    8ec8:	81 14       	cp	r8, r1
    8eca:	91 04       	cpc	r9, r1
    8ecc:	39 f0       	breq	.+14     	; 0x8edc <get_fileinfo+0xf0>
    8ece:	ed 81       	ldd	r30, Y+5	; 0x05
    8ed0:	fe 81       	ldd	r31, Y+6	; 0x06
    8ed2:	e0 0f       	add	r30, r16
    8ed4:	f1 1f       	adc	r31, r17
    8ed6:	86 8b       	std	Z+22, r24	; 0x16
    8ed8:	81 e0       	ldi	r24, 0x01	; 1
    8eda:	01 c0       	rjmp	.+2      	; 0x8ede <get_fileinfo+0xf2>
    8edc:	80 e0       	ldi	r24, 0x00	; 0
    8ede:	28 2f       	mov	r18, r24
    8ee0:	30 e0       	ldi	r19, 0x00	; 0
    8ee2:	88 23       	and	r24, r24
    8ee4:	49 f0       	breq	.+18     	; 0x8ef8 <get_fileinfo+0x10c>
    8ee6:	02 0f       	add	r16, r18
    8ee8:	13 1f       	adc	r17, r19
    8eea:	80 e0       	ldi	r24, 0x00	; 0
    8eec:	90 e0       	ldi	r25, 0x00	; 0
    8eee:	32 e0       	ldi	r19, 0x02	; 2
    8ef0:	a3 0e       	add	r10, r19
    8ef2:	b1 1c       	adc	r11, r1
    8ef4:	6c 01       	movw	r12, r24
    8ef6:	a9 cf       	rjmp	.-174    	; 0x8e4a <get_fileinfo+0x5e>
    8ef8:	00 e0       	ldi	r16, 0x00	; 0
    8efa:	10 e0       	ldi	r17, 0x00	; 0
    8efc:	c1 14       	cp	r12, r1
    8efe:	d1 04       	cpc	r13, r1
    8f00:	11 f0       	breq	.+4      	; 0x8f06 <get_fileinfo+0x11a>
    8f02:	00 e0       	ldi	r16, 0x00	; 0
    8f04:	10 e0       	ldi	r17, 0x00	; 0
    8f06:	ed 81       	ldd	r30, Y+5	; 0x05
    8f08:	fe 81       	ldd	r31, Y+6	; 0x06
    8f0a:	e0 0f       	add	r30, r16
    8f0c:	f1 1f       	adc	r31, r17
    8f0e:	16 8a       	std	Z+22, r1	; 0x16
    8f10:	80 e0       	ldi	r24, 0x00	; 0
    8f12:	90 e0       	ldi	r25, 0x00	; 0
    8f14:	20 e0       	ldi	r18, 0x00	; 0
    8f16:	30 e0       	ldi	r19, 0x00	; 0
    8f18:	6e e2       	ldi	r22, 0x2E	; 46
    8f1a:	a9 01       	movw	r20, r18
    8f1c:	4f 5f       	subi	r20, 0xFF	; 255
    8f1e:	5f 4f       	sbci	r21, 0xFF	; 255
    8f20:	f7 01       	movw	r30, r14
    8f22:	a2 8d       	ldd	r26, Z+26	; 0x1a
    8f24:	b3 8d       	ldd	r27, Z+27	; 0x1b
    8f26:	fd 01       	movw	r30, r26
    8f28:	e2 0f       	add	r30, r18
    8f2a:	f3 1f       	adc	r31, r19
    8f2c:	20 81       	ld	r18, Z
    8f2e:	30 e0       	ldi	r19, 0x00	; 0
    8f30:	20 32       	cpi	r18, 0x20	; 32
    8f32:	31 05       	cpc	r19, r1
    8f34:	b9 f0       	breq	.+46     	; 0x8f64 <get_fileinfo+0x178>
    8f36:	25 30       	cpi	r18, 0x05	; 5
    8f38:	31 05       	cpc	r19, r1
    8f3a:	11 f4       	brne	.+4      	; 0x8f40 <get_fileinfo+0x154>
    8f3c:	25 ee       	ldi	r18, 0xE5	; 229
    8f3e:	30 e0       	ldi	r19, 0x00	; 0
    8f40:	49 30       	cpi	r20, 0x09	; 9
    8f42:	51 05       	cpc	r21, r1
    8f44:	49 f4       	brne	.+18     	; 0x8f58 <get_fileinfo+0x16c>
    8f46:	8c 30       	cpi	r24, 0x0C	; 12
    8f48:	91 05       	cpc	r25, r1
    8f4a:	30 f4       	brcc	.+12     	; 0x8f58 <get_fileinfo+0x16c>
    8f4c:	ed 81       	ldd	r30, Y+5	; 0x05
    8f4e:	fe 81       	ldd	r31, Y+6	; 0x06
    8f50:	e8 0f       	add	r30, r24
    8f52:	f9 1f       	adc	r31, r25
    8f54:	61 87       	std	Z+9, r22	; 0x09
    8f56:	01 96       	adiw	r24, 0x01	; 1
    8f58:	ed 81       	ldd	r30, Y+5	; 0x05
    8f5a:	fe 81       	ldd	r31, Y+6	; 0x06
    8f5c:	e8 0f       	add	r30, r24
    8f5e:	f9 1f       	adc	r31, r25
    8f60:	21 87       	std	Z+9, r18	; 0x09
    8f62:	01 96       	adiw	r24, 0x01	; 1
    8f64:	9a 01       	movw	r18, r20
    8f66:	4b 30       	cpi	r20, 0x0B	; 11
    8f68:	51 05       	cpc	r21, r1
    8f6a:	b9 f6       	brne	.-82     	; 0x8f1a <get_fileinfo+0x12e>
    8f6c:	ed 81       	ldd	r30, Y+5	; 0x05
    8f6e:	fe 81       	ldd	r31, Y+6	; 0x06
    8f70:	e8 0f       	add	r30, r24
    8f72:	f9 1f       	adc	r31, r25
    8f74:	11 86       	std	Z+9, r1	; 0x09
    8f76:	ed 81       	ldd	r30, Y+5	; 0x05
    8f78:	fe 81       	ldd	r31, Y+6	; 0x06
    8f7a:	26 89       	ldd	r18, Z+22	; 0x16
    8f7c:	21 11       	cpse	r18, r1
    8f7e:	3a c0       	rjmp	.+116    	; 0x8ff4 <get_fileinfo+0x208>
    8f80:	89 2b       	or	r24, r25
    8f82:	31 f0       	breq	.+12     	; 0x8f90 <get_fileinfo+0x1a4>
    8f84:	df 01       	movw	r26, r30
    8f86:	19 96       	adiw	r26, 0x09	; 9
    8f88:	58 e0       	ldi	r21, 0x08	; 8
    8f8a:	20 e0       	ldi	r18, 0x00	; 0
    8f8c:	30 e0       	ldi	r19, 0x00	; 0
    8f8e:	16 c0       	rjmp	.+44     	; 0x8fbc <get_fileinfo+0x1d0>
    8f90:	8f e3       	ldi	r24, 0x3F	; 63
    8f92:	ed 81       	ldd	r30, Y+5	; 0x05
    8f94:	fe 81       	ldd	r31, Y+6	; 0x06
    8f96:	86 8b       	std	Z+22, r24	; 0x16
    8f98:	21 e0       	ldi	r18, 0x01	; 1
    8f9a:	30 e0       	ldi	r19, 0x00	; 0
    8f9c:	1c c0       	rjmp	.+56     	; 0x8fd6 <get_fileinfo+0x1ea>
    8f9e:	90 e0       	ldi	r25, 0x00	; 0
    8fa0:	8e 32       	cpi	r24, 0x2E	; 46
    8fa2:	91 05       	cpc	r25, r1
    8fa4:	09 f4       	brne	.+2      	; 0x8fa8 <get_fileinfo+0x1bc>
    8fa6:	50 e1       	ldi	r21, 0x10	; 16
    8fa8:	bc 01       	movw	r22, r24
    8faa:	61 54       	subi	r22, 0x41	; 65
    8fac:	71 09       	sbc	r23, r1
    8fae:	6a 31       	cpi	r22, 0x1A	; 26
    8fb0:	71 05       	cpc	r23, r1
    8fb2:	40 f0       	brcs	.+16     	; 0x8fc4 <get_fileinfo+0x1d8>
    8fb4:	fd 01       	movw	r30, r26
    8fb6:	84 87       	std	Z+12, r24	; 0x0c
    8fb8:	2f 5f       	subi	r18, 0xFF	; 255
    8fba:	3f 4f       	sbci	r19, 0xFF	; 255
    8fbc:	8d 91       	ld	r24, X+
    8fbe:	81 11       	cpse	r24, r1
    8fc0:	ee cf       	rjmp	.-36     	; 0x8f9e <get_fileinfo+0x1b2>
    8fc2:	09 c0       	rjmp	.+18     	; 0x8fd6 <get_fileinfo+0x1ea>
    8fc4:	f7 01       	movw	r30, r14
    8fc6:	62 8d       	ldd	r22, Z+26	; 0x1a
    8fc8:	73 8d       	ldd	r23, Z+27	; 0x1b
    8fca:	fb 01       	movw	r30, r22
    8fcc:	44 85       	ldd	r20, Z+12	; 0x0c
    8fce:	45 23       	and	r20, r21
    8fd0:	89 f3       	breq	.-30     	; 0x8fb4 <get_fileinfo+0x1c8>
    8fd2:	80 96       	adiw	r24, 0x20	; 32
    8fd4:	ef cf       	rjmp	.-34     	; 0x8fb4 <get_fileinfo+0x1c8>
    8fd6:	ed 81       	ldd	r30, Y+5	; 0x05
    8fd8:	fe 81       	ldd	r31, Y+6	; 0x06
    8fda:	e2 0f       	add	r30, r18
    8fdc:	f3 1f       	adc	r31, r19
    8fde:	16 8a       	std	Z+22, r1	; 0x16
    8fe0:	f7 01       	movw	r30, r14
    8fe2:	82 8d       	ldd	r24, Z+26	; 0x1a
    8fe4:	93 8d       	ldd	r25, Z+27	; 0x1b
    8fe6:	fc 01       	movw	r30, r24
    8fe8:	84 85       	ldd	r24, Z+12	; 0x0c
    8fea:	81 11       	cpse	r24, r1
    8fec:	03 c0       	rjmp	.+6      	; 0x8ff4 <get_fileinfo+0x208>
    8fee:	ed 81       	ldd	r30, Y+5	; 0x05
    8ff0:	fe 81       	ldd	r31, Y+6	; 0x06
    8ff2:	11 86       	std	Z+9, r1	; 0x09
    8ff4:	f7 01       	movw	r30, r14
    8ff6:	82 8d       	ldd	r24, Z+26	; 0x1a
    8ff8:	93 8d       	ldd	r25, Z+27	; 0x1b
    8ffa:	fc 01       	movw	r30, r24
    8ffc:	83 85       	ldd	r24, Z+11	; 0x0b
    8ffe:	ed 81       	ldd	r30, Y+5	; 0x05
    9000:	fe 81       	ldd	r31, Y+6	; 0x06
    9002:	80 87       	std	Z+8, r24	; 0x08
    9004:	f7 01       	movw	r30, r14
    9006:	02 8d       	ldd	r16, Z+26	; 0x1a
    9008:	13 8d       	ldd	r17, Z+27	; 0x1b
    900a:	c8 01       	movw	r24, r16
    900c:	4c 96       	adiw	r24, 0x1c	; 28
    900e:	f0 dd       	rcall	.-1056   	; 0x8bf0 <ld_dword>
    9010:	ed 81       	ldd	r30, Y+5	; 0x05
    9012:	fe 81       	ldd	r31, Y+6	; 0x06
    9014:	60 83       	st	Z, r22
    9016:	71 83       	std	Z+1, r23	; 0x01
    9018:	82 83       	std	Z+2, r24	; 0x02
    901a:	93 83       	std	Z+3, r25	; 0x03
    901c:	f8 01       	movw	r30, r16
    901e:	86 89       	ldd	r24, Z+22	; 0x16
    9020:	97 89       	ldd	r25, Z+23	; 0x17
    9022:	ed 81       	ldd	r30, Y+5	; 0x05
    9024:	fe 81       	ldd	r31, Y+6	; 0x06
    9026:	97 83       	std	Z+7, r25	; 0x07
    9028:	86 83       	std	Z+6, r24	; 0x06
    902a:	f8 01       	movw	r30, r16
    902c:	80 8d       	ldd	r24, Z+24	; 0x18
    902e:	91 8d       	ldd	r25, Z+25	; 0x19
    9030:	ed 81       	ldd	r30, Y+5	; 0x05
    9032:	fe 81       	ldd	r31, Y+6	; 0x06
    9034:	95 83       	std	Z+5, r25	; 0x05
    9036:	84 83       	std	Z+4, r24	; 0x04
    9038:	28 96       	adiw	r28, 0x08	; 8
    903a:	e2 e1       	ldi	r30, 0x12	; 18
    903c:	0c 94 25 e3 	jmp	0x1c64a	; 0x1c64a <__epilogue_restores__>

00009040 <mem_cpy.part.0>:
    9040:	fb 01       	movw	r30, r22
    9042:	48 0f       	add	r20, r24
    9044:	59 1f       	adc	r21, r25
    9046:	21 91       	ld	r18, Z+
    9048:	dc 01       	movw	r26, r24
    904a:	2d 93       	st	X+, r18
    904c:	cd 01       	movw	r24, r26
    904e:	a4 17       	cp	r26, r20
    9050:	b5 07       	cpc	r27, r21
    9052:	c9 f7       	brne	.-14     	; 0x9046 <mem_cpy.part.0+0x6>
    9054:	08 95       	ret

00009056 <ld_clust.isra.3>:
    9056:	fb 01       	movw	r30, r22
    9058:	42 8d       	ldd	r20, Z+26	; 0x1a
    905a:	53 8d       	ldd	r21, Z+27	; 0x1b
    905c:	60 e0       	ldi	r22, 0x00	; 0
    905e:	70 e0       	ldi	r23, 0x00	; 0
    9060:	83 30       	cpi	r24, 0x03	; 3
    9062:	59 f4       	brne	.+22     	; 0x907a <ld_clust.isra.3+0x24>
    9064:	84 89       	ldd	r24, Z+20	; 0x14
    9066:	95 89       	ldd	r25, Z+21	; 0x15
    9068:	a0 e0       	ldi	r26, 0x00	; 0
    906a:	b0 e0       	ldi	r27, 0x00	; 0
    906c:	dc 01       	movw	r26, r24
    906e:	99 27       	eor	r25, r25
    9070:	88 27       	eor	r24, r24
    9072:	48 2b       	or	r20, r24
    9074:	59 2b       	or	r21, r25
    9076:	6a 2b       	or	r22, r26
    9078:	7b 2b       	or	r23, r27
    907a:	cb 01       	movw	r24, r22
    907c:	ba 01       	movw	r22, r20
    907e:	08 95       	ret

00009080 <st_clust.isra.4>:
    9080:	fb 01       	movw	r30, r22
    9082:	22 8f       	std	Z+26, r18	; 0x1a
    9084:	33 8f       	std	Z+27, r19	; 0x1b
    9086:	dc 01       	movw	r26, r24
    9088:	8c 91       	ld	r24, X
    908a:	83 30       	cpi	r24, 0x03	; 3
    908c:	29 f4       	brne	.+10     	; 0x9098 <st_clust.isra.4+0x18>
    908e:	ca 01       	movw	r24, r20
    9090:	aa 27       	eor	r26, r26
    9092:	bb 27       	eor	r27, r27
    9094:	84 8b       	std	Z+20, r24	; 0x14
    9096:	95 8b       	std	Z+21, r25	; 0x15
    9098:	08 95       	ret

0000909a <sync_window.part.5>:
    909a:	8f 92       	push	r8
    909c:	9f 92       	push	r9
    909e:	af 92       	push	r10
    90a0:	bf 92       	push	r11
    90a2:	ef 92       	push	r14
    90a4:	ff 92       	push	r15
    90a6:	0f 93       	push	r16
    90a8:	1f 93       	push	r17
    90aa:	cf 93       	push	r28
    90ac:	df 93       	push	r29
    90ae:	ec 01       	movw	r28, r24
    90b0:	7c 01       	movw	r14, r24
    90b2:	45 e3       	ldi	r20, 0x35	; 53
    90b4:	e4 0e       	add	r14, r20
    90b6:	f1 1c       	adc	r15, r1
    90b8:	29 a9       	ldd	r18, Y+49	; 0x31
    90ba:	3a a9       	ldd	r19, Y+50	; 0x32
    90bc:	4b a9       	ldd	r20, Y+51	; 0x33
    90be:	5c a9       	ldd	r21, Y+52	; 0x34
    90c0:	01 e0       	ldi	r16, 0x01	; 1
    90c2:	10 e0       	ldi	r17, 0x00	; 0
    90c4:	b7 01       	movw	r22, r14
    90c6:	89 81       	ldd	r24, Y+1	; 0x01
    90c8:	0e 94 fc 67 	call	0xcff8	; 0xcff8 <disk_write>
    90cc:	89 2b       	or	r24, r25
    90ce:	41 f5       	brne	.+80     	; 0x9120 <sync_window.part.5+0x86>
    90d0:	1b 82       	std	Y+3, r1	; 0x03
    90d2:	09 a9       	ldd	r16, Y+49	; 0x31
    90d4:	1a a9       	ldd	r17, Y+50	; 0x32
    90d6:	2b a9       	ldd	r18, Y+51	; 0x33
    90d8:	3c a9       	ldd	r19, Y+52	; 0x34
    90da:	8d 8d       	ldd	r24, Y+29	; 0x1d
    90dc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    90de:	af 8d       	ldd	r26, Y+31	; 0x1f
    90e0:	b8 a1       	ldd	r27, Y+32	; 0x20
    90e2:	8d a0       	ldd	r8, Y+37	; 0x25
    90e4:	9e a0       	ldd	r9, Y+38	; 0x26
    90e6:	af a0       	ldd	r10, Y+39	; 0x27
    90e8:	b8 a4       	ldd	r11, Y+40	; 0x28
    90ea:	b9 01       	movw	r22, r18
    90ec:	a8 01       	movw	r20, r16
    90ee:	48 19       	sub	r20, r8
    90f0:	59 09       	sbc	r21, r9
    90f2:	6a 09       	sbc	r22, r10
    90f4:	7b 09       	sbc	r23, r11
    90f6:	48 17       	cp	r20, r24
    90f8:	59 07       	cpc	r21, r25
    90fa:	6a 07       	cpc	r22, r26
    90fc:	7b 07       	cpc	r23, r27
    90fe:	98 f4       	brcc	.+38     	; 0x9126 <sync_window.part.5+0x8c>
    9100:	6a 81       	ldd	r22, Y+2	; 0x02
    9102:	62 30       	cpi	r22, 0x02	; 2
    9104:	81 f4       	brne	.+32     	; 0x9126 <sync_window.part.5+0x8c>
    9106:	a9 01       	movw	r20, r18
    9108:	98 01       	movw	r18, r16
    910a:	28 0f       	add	r18, r24
    910c:	39 1f       	adc	r19, r25
    910e:	4a 1f       	adc	r20, r26
    9110:	5b 1f       	adc	r21, r27
    9112:	01 e0       	ldi	r16, 0x01	; 1
    9114:	10 e0       	ldi	r17, 0x00	; 0
    9116:	b7 01       	movw	r22, r14
    9118:	89 81       	ldd	r24, Y+1	; 0x01
    911a:	0e 94 fc 67 	call	0xcff8	; 0xcff8 <disk_write>
    911e:	03 c0       	rjmp	.+6      	; 0x9126 <sync_window.part.5+0x8c>
    9120:	81 e0       	ldi	r24, 0x01	; 1
    9122:	90 e0       	ldi	r25, 0x00	; 0
    9124:	02 c0       	rjmp	.+4      	; 0x912a <sync_window.part.5+0x90>
    9126:	80 e0       	ldi	r24, 0x00	; 0
    9128:	90 e0       	ldi	r25, 0x00	; 0
    912a:	df 91       	pop	r29
    912c:	cf 91       	pop	r28
    912e:	1f 91       	pop	r17
    9130:	0f 91       	pop	r16
    9132:	ff 90       	pop	r15
    9134:	ef 90       	pop	r14
    9136:	bf 90       	pop	r11
    9138:	af 90       	pop	r10
    913a:	9f 90       	pop	r9
    913c:	8f 90       	pop	r8
    913e:	08 95       	ret

00009140 <sync_fs>:
    9140:	ef 92       	push	r14
    9142:	ff 92       	push	r15
    9144:	0f 93       	push	r16
    9146:	1f 93       	push	r17
    9148:	cf 93       	push	r28
    914a:	df 93       	push	r29
    914c:	ec 01       	movw	r28, r24
    914e:	8b 81       	ldd	r24, Y+3	; 0x03
    9150:	81 11       	cpse	r24, r1
    9152:	05 c0       	rjmp	.+10     	; 0x915e <sync_fs+0x1e>
    9154:	88 81       	ld	r24, Y
    9156:	83 30       	cpi	r24, 0x03	; 3
    9158:	09 f0       	breq	.+2      	; 0x915c <sync_fs+0x1c>
    915a:	52 c0       	rjmp	.+164    	; 0x9200 <sync_fs+0xc0>
    915c:	06 c0       	rjmp	.+12     	; 0x916a <sync_fs+0x2a>
    915e:	ce 01       	movw	r24, r28
    9160:	9c df       	rcall	.-200    	; 0x909a <sync_window.part.5>
    9162:	00 97       	sbiw	r24, 0x00	; 0
    9164:	09 f0       	breq	.+2      	; 0x9168 <sync_fs+0x28>
    9166:	59 c0       	rjmp	.+178    	; 0x921a <sync_fs+0xda>
    9168:	f5 cf       	rjmp	.-22     	; 0x9154 <sync_fs+0x14>
    916a:	8c 81       	ldd	r24, Y+4	; 0x04
    916c:	81 30       	cpi	r24, 0x01	; 1
    916e:	09 f0       	breq	.+2      	; 0x9172 <sync_fs+0x32>
    9170:	47 c0       	rjmp	.+142    	; 0x9200 <sync_fs+0xc0>
    9172:	40 e0       	ldi	r20, 0x00	; 0
    9174:	52 e0       	ldi	r21, 0x02	; 2
    9176:	60 e0       	ldi	r22, 0x00	; 0
    9178:	70 e0       	ldi	r23, 0x00	; 0
    917a:	7e 01       	movw	r14, r28
    917c:	85 e3       	ldi	r24, 0x35	; 53
    917e:	e8 0e       	add	r14, r24
    9180:	f1 1c       	adc	r15, r1
    9182:	c7 01       	movw	r24, r14
    9184:	50 dd       	rcall	.-1376   	; 0x8c26 <mem_set>
    9186:	85 e5       	ldi	r24, 0x55	; 85
    9188:	fe 01       	movw	r30, r28
    918a:	ed 5c       	subi	r30, 0xCD	; 205
    918c:	fd 4f       	sbci	r31, 0xFD	; 253
    918e:	80 83       	st	Z, r24
    9190:	8a ea       	ldi	r24, 0xAA	; 170
    9192:	31 96       	adiw	r30, 0x01	; 1
    9194:	80 83       	st	Z, r24
    9196:	82 e5       	ldi	r24, 0x52	; 82
    9198:	8d ab       	std	Y+53, r24	; 0x35
    919a:	8e ab       	std	Y+54, r24	; 0x36
    919c:	81 e6       	ldi	r24, 0x61	; 97
    919e:	8f ab       	std	Y+55, r24	; 0x37
    91a0:	91 e4       	ldi	r25, 0x41	; 65
    91a2:	98 af       	std	Y+56, r25	; 0x38
    91a4:	22 e7       	ldi	r18, 0x72	; 114
    91a6:	7b 97       	sbiw	r30, 0x1b	; 27
    91a8:	20 83       	st	Z, r18
    91aa:	31 96       	adiw	r30, 0x01	; 1
    91ac:	20 83       	st	Z, r18
    91ae:	31 96       	adiw	r30, 0x01	; 1
    91b0:	90 83       	st	Z, r25
    91b2:	31 96       	adiw	r30, 0x01	; 1
    91b4:	80 83       	st	Z, r24
    91b6:	49 89       	ldd	r20, Y+17	; 0x11
    91b8:	5a 89       	ldd	r21, Y+18	; 0x12
    91ba:	6b 89       	ldd	r22, Y+19	; 0x13
    91bc:	7c 89       	ldd	r23, Y+20	; 0x14
    91be:	ce 01       	movw	r24, r28
    91c0:	83 5e       	subi	r24, 0xE3	; 227
    91c2:	9d 4f       	sbci	r25, 0xFD	; 253
    91c4:	2a dd       	rcall	.-1452   	; 0x8c1a <st_dword>
    91c6:	4d 85       	ldd	r20, Y+13	; 0x0d
    91c8:	5e 85       	ldd	r21, Y+14	; 0x0e
    91ca:	6f 85       	ldd	r22, Y+15	; 0x0f
    91cc:	78 89       	ldd	r23, Y+16	; 0x10
    91ce:	ce 01       	movw	r24, r28
    91d0:	8f 5d       	subi	r24, 0xDF	; 223
    91d2:	9d 4f       	sbci	r25, 0xFD	; 253
    91d4:	22 dd       	rcall	.-1468   	; 0x8c1a <st_dword>
    91d6:	89 a1       	ldd	r24, Y+33	; 0x21
    91d8:	9a a1       	ldd	r25, Y+34	; 0x22
    91da:	ab a1       	ldd	r26, Y+35	; 0x23
    91dc:	bc a1       	ldd	r27, Y+36	; 0x24
    91de:	9c 01       	movw	r18, r24
    91e0:	ad 01       	movw	r20, r26
    91e2:	2f 5f       	subi	r18, 0xFF	; 255
    91e4:	3f 4f       	sbci	r19, 0xFF	; 255
    91e6:	4f 4f       	sbci	r20, 0xFF	; 255
    91e8:	5f 4f       	sbci	r21, 0xFF	; 255
    91ea:	29 ab       	std	Y+49, r18	; 0x31
    91ec:	3a ab       	std	Y+50, r19	; 0x32
    91ee:	4b ab       	std	Y+51, r20	; 0x33
    91f0:	5c ab       	std	Y+52, r21	; 0x34
    91f2:	01 e0       	ldi	r16, 0x01	; 1
    91f4:	10 e0       	ldi	r17, 0x00	; 0
    91f6:	b7 01       	movw	r22, r14
    91f8:	89 81       	ldd	r24, Y+1	; 0x01
    91fa:	0e 94 fc 67 	call	0xcff8	; 0xcff8 <disk_write>
    91fe:	1c 82       	std	Y+4, r1	; 0x04
    9200:	40 e0       	ldi	r20, 0x00	; 0
    9202:	50 e0       	ldi	r21, 0x00	; 0
    9204:	60 e0       	ldi	r22, 0x00	; 0
    9206:	89 81       	ldd	r24, Y+1	; 0x01
    9208:	0e 94 0c 68 	call	0xd018	; 0xd018 <disk_ioctl>
    920c:	31 e0       	ldi	r19, 0x01	; 1
    920e:	20 e0       	ldi	r18, 0x00	; 0
    9210:	89 2b       	or	r24, r25
    9212:	09 f4       	brne	.+2      	; 0x9216 <sync_fs+0xd6>
    9214:	30 e0       	ldi	r19, 0x00	; 0
    9216:	83 2f       	mov	r24, r19
    9218:	92 2f       	mov	r25, r18
    921a:	cd b7       	in	r28, 0x3d	; 61
    921c:	de b7       	in	r29, 0x3e	; 62
    921e:	e6 e0       	ldi	r30, 0x06	; 6
    9220:	0c 94 31 e3 	jmp	0x1c662	; 0x1c662 <__epilogue_restores__+0x18>

00009224 <dir_clear>:
    9224:	4f 92       	push	r4
    9226:	5f 92       	push	r5
    9228:	6f 92       	push	r6
    922a:	7f 92       	push	r7
    922c:	af 92       	push	r10
    922e:	bf 92       	push	r11
    9230:	cf 92       	push	r12
    9232:	df 92       	push	r13
    9234:	ef 92       	push	r14
    9236:	ff 92       	push	r15
    9238:	0f 93       	push	r16
    923a:	1f 93       	push	r17
    923c:	cf 93       	push	r28
    923e:	df 93       	push	r29
    9240:	ec 01       	movw	r28, r24
    9242:	6a 01       	movw	r12, r20
    9244:	7b 01       	movw	r14, r22
    9246:	8b 81       	ldd	r24, Y+3	; 0x03
    9248:	81 11       	cpse	r24, r1
    924a:	28 c0       	rjmp	.+80     	; 0x929c <dir_clear+0x78>
    924c:	b7 01       	movw	r22, r14
    924e:	a6 01       	movw	r20, r12
    9250:	ce 01       	movw	r24, r28
    9252:	01 dd       	rcall	.-1534   	; 0x8c56 <clst2sect>
    9254:	2b 01       	movw	r4, r22
    9256:	3c 01       	movw	r6, r24
    9258:	69 ab       	std	Y+49, r22	; 0x31
    925a:	7a ab       	std	Y+50, r23	; 0x32
    925c:	8b ab       	std	Y+51, r24	; 0x33
    925e:	9c ab       	std	Y+52, r25	; 0x34
    9260:	5e 01       	movw	r10, r28
    9262:	25 e3       	ldi	r18, 0x35	; 53
    9264:	a2 0e       	add	r10, r18
    9266:	b1 1c       	adc	r11, r1
    9268:	40 e0       	ldi	r20, 0x00	; 0
    926a:	52 e0       	ldi	r21, 0x02	; 2
    926c:	60 e0       	ldi	r22, 0x00	; 0
    926e:	70 e0       	ldi	r23, 0x00	; 0
    9270:	c5 01       	movw	r24, r10
    9272:	d9 dc       	rcall	.-1614   	; 0x8c26 <mem_set>
    9274:	09 85       	ldd	r16, Y+9	; 0x09
    9276:	1a 85       	ldd	r17, Y+10	; 0x0a
    9278:	c8 01       	movw	r24, r16
    927a:	a0 e0       	ldi	r26, 0x00	; 0
    927c:	b0 e0       	ldi	r27, 0x00	; 0
    927e:	39 e0       	ldi	r19, 0x09	; 9
    9280:	88 0f       	add	r24, r24
    9282:	99 1f       	adc	r25, r25
    9284:	aa 1f       	adc	r26, r26
    9286:	bb 1f       	adc	r27, r27
    9288:	3a 95       	dec	r19
    928a:	d1 f7       	brne	.-12     	; 0x9280 <dir_clear+0x5c>
    928c:	81 15       	cp	r24, r1
    928e:	90 48       	sbci	r25, 0x80	; 128
    9290:	a1 05       	cpc	r26, r1
    9292:	b1 05       	cpc	r27, r1
    9294:	50 f0       	brcs	.+20     	; 0x92aa <dir_clear+0x86>
    9296:	00 e0       	ldi	r16, 0x00	; 0
    9298:	10 e8       	ldi	r17, 0x80	; 128
    929a:	14 c0       	rjmp	.+40     	; 0x92c4 <dir_clear+0xa0>
    929c:	ce 01       	movw	r24, r28
    929e:	fd de       	rcall	.-518    	; 0x909a <sync_window.part.5>
    92a0:	89 2b       	or	r24, r25
    92a2:	a1 f2       	breq	.-88     	; 0x924c <dir_clear+0x28>
    92a4:	81 e0       	ldi	r24, 0x01	; 1
    92a6:	90 e0       	ldi	r25, 0x00	; 0
    92a8:	56 c0       	rjmp	.+172    	; 0x9356 <dir_clear+0x132>
    92aa:	10 2f       	mov	r17, r16
    92ac:	00 27       	eor	r16, r16
    92ae:	11 0f       	add	r17, r17
    92b0:	09 c0       	rjmp	.+18     	; 0x92c4 <dir_clear+0xa0>
    92b2:	c8 01       	movw	r24, r16
    92b4:	0e 94 30 67 	call	0xce60	; 0xce60 <ff_memalloc>
    92b8:	6c 01       	movw	r12, r24
    92ba:	00 97       	sbiw	r24, 0x00	; 0
    92bc:	09 f0       	breq	.+2      	; 0x92c0 <dir_clear+0x9c>
    92be:	40 c0       	rjmp	.+128    	; 0x9340 <dir_clear+0x11c>
    92c0:	16 95       	lsr	r17
    92c2:	07 95       	ror	r16
    92c4:	01 30       	cpi	r16, 0x01	; 1
    92c6:	82 e0       	ldi	r24, 0x02	; 2
    92c8:	18 07       	cpc	r17, r24
    92ca:	98 f7       	brcc	.-26     	; 0x92b2 <dir_clear+0x8e>
    92cc:	e1 2c       	mov	r14, r1
    92ce:	f1 2c       	mov	r15, r1
    92d0:	11 c0       	rjmp	.+34     	; 0x92f4 <dir_clear+0xd0>
    92d2:	01 e0       	ldi	r16, 0x01	; 1
    92d4:	10 e0       	ldi	r17, 0x00	; 0
    92d6:	a3 01       	movw	r20, r6
    92d8:	92 01       	movw	r18, r4
    92da:	2e 0d       	add	r18, r14
    92dc:	3f 1d       	adc	r19, r15
    92de:	41 1d       	adc	r20, r1
    92e0:	51 1d       	adc	r21, r1
    92e2:	b5 01       	movw	r22, r10
    92e4:	89 81       	ldd	r24, Y+1	; 0x01
    92e6:	0e 94 fc 67 	call	0xcff8	; 0xcff8 <disk_write>
    92ea:	89 2b       	or	r24, r25
    92ec:	01 f5       	brne	.+64     	; 0x932e <dir_clear+0x10a>
    92ee:	2f ef       	ldi	r18, 0xFF	; 255
    92f0:	e2 1a       	sub	r14, r18
    92f2:	f2 0a       	sbc	r15, r18
    92f4:	89 85       	ldd	r24, Y+9	; 0x09
    92f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    92f8:	e8 16       	cp	r14, r24
    92fa:	f9 06       	cpc	r15, r25
    92fc:	50 f3       	brcs	.-44     	; 0x92d2 <dir_clear+0xae>
    92fe:	17 c0       	rjmp	.+46     	; 0x932e <dir_clear+0x10a>
    9300:	85 01       	movw	r16, r10
    9302:	a3 01       	movw	r20, r6
    9304:	92 01       	movw	r18, r4
    9306:	2e 0d       	add	r18, r14
    9308:	3f 1d       	adc	r19, r15
    930a:	41 1d       	adc	r20, r1
    930c:	51 1d       	adc	r21, r1
    930e:	b6 01       	movw	r22, r12
    9310:	89 81       	ldd	r24, Y+1	; 0x01
    9312:	0e 94 fc 67 	call	0xcff8	; 0xcff8 <disk_write>
    9316:	89 2b       	or	r24, r25
    9318:	39 f4       	brne	.+14     	; 0x9328 <dir_clear+0x104>
    931a:	ea 0c       	add	r14, r10
    931c:	fb 1c       	adc	r15, r11
    931e:	89 85       	ldd	r24, Y+9	; 0x09
    9320:	9a 85       	ldd	r25, Y+10	; 0x0a
    9322:	e8 16       	cp	r14, r24
    9324:	f9 06       	cpc	r15, r25
    9326:	60 f3       	brcs	.-40     	; 0x9300 <dir_clear+0xdc>
    9328:	c6 01       	movw	r24, r12
    932a:	0e 94 33 67 	call	0xce66	; 0xce66 <ff_memfree>
    932e:	81 e0       	ldi	r24, 0x01	; 1
    9330:	90 e0       	ldi	r25, 0x00	; 0
    9332:	29 85       	ldd	r18, Y+9	; 0x09
    9334:	3a 85       	ldd	r19, Y+10	; 0x0a
    9336:	2e 15       	cp	r18, r14
    9338:	3f 05       	cpc	r19, r15
    933a:	69 f4       	brne	.+26     	; 0x9356 <dir_clear+0x132>
    933c:	80 e0       	ldi	r24, 0x00	; 0
    933e:	0b c0       	rjmp	.+22     	; 0x9356 <dir_clear+0x132>
    9340:	a8 01       	movw	r20, r16
    9342:	60 e0       	ldi	r22, 0x00	; 0
    9344:	70 e0       	ldi	r23, 0x00	; 0
    9346:	6f dc       	rcall	.-1826   	; 0x8c26 <mem_set>
    9348:	58 01       	movw	r10, r16
    934a:	ab 2c       	mov	r10, r11
    934c:	bb 24       	eor	r11, r11
    934e:	a6 94       	lsr	r10
    9350:	e1 2c       	mov	r14, r1
    9352:	f1 2c       	mov	r15, r1
    9354:	e4 cf       	rjmp	.-56     	; 0x931e <dir_clear+0xfa>
    9356:	df 91       	pop	r29
    9358:	cf 91       	pop	r28
    935a:	1f 91       	pop	r17
    935c:	0f 91       	pop	r16
    935e:	ff 90       	pop	r15
    9360:	ef 90       	pop	r14
    9362:	df 90       	pop	r13
    9364:	cf 90       	pop	r12
    9366:	bf 90       	pop	r11
    9368:	af 90       	pop	r10
    936a:	7f 90       	pop	r7
    936c:	6f 90       	pop	r6
    936e:	5f 90       	pop	r5
    9370:	4f 90       	pop	r4
    9372:	08 95       	ret

00009374 <move_window>:
    9374:	a0 e0       	ldi	r26, 0x00	; 0
    9376:	b0 e0       	ldi	r27, 0x00	; 0
    9378:	e0 ec       	ldi	r30, 0xC0	; 192
    937a:	f9 e4       	ldi	r31, 0x49	; 73
    937c:	0c 94 13 e3 	jmp	0x1c626	; 0x1c626 <__prologue_saves__+0x14>
    9380:	ec 01       	movw	r28, r24
    9382:	6a 01       	movw	r12, r20
    9384:	7b 01       	movw	r14, r22
    9386:	89 a9       	ldd	r24, Y+49	; 0x31
    9388:	9a a9       	ldd	r25, Y+50	; 0x32
    938a:	ab a9       	ldd	r26, Y+51	; 0x33
    938c:	bc a9       	ldd	r27, Y+52	; 0x34
    938e:	84 17       	cp	r24, r20
    9390:	95 07       	cpc	r25, r21
    9392:	a6 07       	cpc	r26, r22
    9394:	b7 07       	cpc	r27, r23
    9396:	11 f1       	breq	.+68     	; 0x93dc <move_window+0x68>
    9398:	8b 81       	ldd	r24, Y+3	; 0x03
    939a:	81 11       	cpse	r24, r1
    939c:	13 c0       	rjmp	.+38     	; 0x93c4 <move_window+0x50>
    939e:	01 e0       	ldi	r16, 0x01	; 1
    93a0:	10 e0       	ldi	r17, 0x00	; 0
    93a2:	a7 01       	movw	r20, r14
    93a4:	96 01       	movw	r18, r12
    93a6:	be 01       	movw	r22, r28
    93a8:	6b 5c       	subi	r22, 0xCB	; 203
    93aa:	7f 4f       	sbci	r23, 0xFF	; 255
    93ac:	89 81       	ldd	r24, Y+1	; 0x01
    93ae:	0e 94 ec 67 	call	0xcfd8	; 0xcfd8 <disk_read>
    93b2:	89 2b       	or	r24, r25
    93b4:	61 f0       	breq	.+24     	; 0x93ce <move_window+0x5a>
    93b6:	81 e0       	ldi	r24, 0x01	; 1
    93b8:	90 e0       	ldi	r25, 0x00	; 0
    93ba:	cc 24       	eor	r12, r12
    93bc:	ca 94       	dec	r12
    93be:	dc 2c       	mov	r13, r12
    93c0:	76 01       	movw	r14, r12
    93c2:	07 c0       	rjmp	.+14     	; 0x93d2 <move_window+0x5e>
    93c4:	ce 01       	movw	r24, r28
    93c6:	69 de       	rcall	.-814    	; 0x909a <sync_window.part.5>
    93c8:	00 97       	sbiw	r24, 0x00	; 0
    93ca:	51 f4       	brne	.+20     	; 0x93e0 <move_window+0x6c>
    93cc:	e8 cf       	rjmp	.-48     	; 0x939e <move_window+0x2a>
    93ce:	80 e0       	ldi	r24, 0x00	; 0
    93d0:	90 e0       	ldi	r25, 0x00	; 0
    93d2:	c9 aa       	std	Y+49, r12	; 0x31
    93d4:	da aa       	std	Y+50, r13	; 0x32
    93d6:	eb aa       	std	Y+51, r14	; 0x33
    93d8:	fc aa       	std	Y+52, r15	; 0x34
    93da:	02 c0       	rjmp	.+4      	; 0x93e0 <move_window+0x6c>
    93dc:	80 e0       	ldi	r24, 0x00	; 0
    93de:	90 e0       	ldi	r25, 0x00	; 0
    93e0:	cd b7       	in	r28, 0x3d	; 61
    93e2:	de b7       	in	r29, 0x3e	; 62
    93e4:	e8 e0       	ldi	r30, 0x08	; 8
    93e6:	0c 94 2f e3 	jmp	0x1c65e	; 0x1c65e <__epilogue_restores__+0x14>

000093ea <check_fs>:
    93ea:	cf 93       	push	r28
    93ec:	df 93       	push	r29
    93ee:	ec 01       	movw	r28, r24
    93f0:	1b 82       	std	Y+3, r1	; 0x03
    93f2:	8f ef       	ldi	r24, 0xFF	; 255
    93f4:	9f ef       	ldi	r25, 0xFF	; 255
    93f6:	dc 01       	movw	r26, r24
    93f8:	89 ab       	std	Y+49, r24	; 0x31
    93fa:	9a ab       	std	Y+50, r25	; 0x32
    93fc:	ab ab       	std	Y+51, r26	; 0x33
    93fe:	bc ab       	std	Y+52, r27	; 0x34
    9400:	ce 01       	movw	r24, r28
    9402:	b8 df       	rcall	.-144    	; 0x9374 <move_window>
    9404:	89 2b       	or	r24, r25
    9406:	19 f5       	brne	.+70     	; 0x944e <check_fs+0x64>
    9408:	fe 01       	movw	r30, r28
    940a:	ed 5c       	subi	r30, 0xCD	; 205
    940c:	fd 4f       	sbci	r31, 0xFD	; 253
    940e:	80 81       	ld	r24, Z
    9410:	91 81       	ldd	r25, Z+1	; 0x01
    9412:	85 35       	cpi	r24, 0x55	; 85
    9414:	9a 4a       	sbci	r25, 0xAA	; 170
    9416:	f1 f4       	brne	.+60     	; 0x9454 <check_fs+0x6a>
    9418:	8d a9       	ldd	r24, Y+53	; 0x35
    941a:	8b 3e       	cpi	r24, 0xEB	; 235
    941c:	19 f0       	breq	.+6      	; 0x9424 <check_fs+0x3a>
    941e:	88 5e       	subi	r24, 0xE8	; 232
    9420:	82 30       	cpi	r24, 0x02	; 2
    9422:	f0 f4       	brcc	.+60     	; 0x9460 <check_fs+0x76>
    9424:	43 e0       	ldi	r20, 0x03	; 3
    9426:	50 e0       	ldi	r21, 0x00	; 0
    9428:	66 ec       	ldi	r22, 0xC6	; 198
    942a:	78 e0       	ldi	r23, 0x08	; 8
    942c:	ce 01       	movw	r24, r28
    942e:	85 59       	subi	r24, 0x95	; 149
    9430:	9f 4f       	sbci	r25, 0xFF	; 255
    9432:	02 dc       	rcall	.-2044   	; 0x8c38 <mem_cmp>
    9434:	89 2b       	or	r24, r25
    9436:	89 f0       	breq	.+34     	; 0x945a <check_fs+0x70>
    9438:	45 e0       	ldi	r20, 0x05	; 5
    943a:	50 e0       	ldi	r21, 0x00	; 0
    943c:	61 e2       	ldi	r22, 0x21	; 33
    943e:	74 e0       	ldi	r23, 0x04	; 4
    9440:	ce 01       	movw	r24, r28
    9442:	89 57       	subi	r24, 0x79	; 121
    9444:	9f 4f       	sbci	r25, 0xFF	; 255
    9446:	f8 db       	rcall	.-2064   	; 0x8c38 <mem_cmp>
    9448:	89 2b       	or	r24, r25
    944a:	51 f4       	brne	.+20     	; 0x9460 <check_fs+0x76>
    944c:	06 c0       	rjmp	.+12     	; 0x945a <check_fs+0x70>
    944e:	84 e0       	ldi	r24, 0x04	; 4
    9450:	90 e0       	ldi	r25, 0x00	; 0
    9452:	08 c0       	rjmp	.+16     	; 0x9464 <check_fs+0x7a>
    9454:	83 e0       	ldi	r24, 0x03	; 3
    9456:	90 e0       	ldi	r25, 0x00	; 0
    9458:	05 c0       	rjmp	.+10     	; 0x9464 <check_fs+0x7a>
    945a:	80 e0       	ldi	r24, 0x00	; 0
    945c:	90 e0       	ldi	r25, 0x00	; 0
    945e:	02 c0       	rjmp	.+4      	; 0x9464 <check_fs+0x7a>
    9460:	82 e0       	ldi	r24, 0x02	; 2
    9462:	90 e0       	ldi	r25, 0x00	; 0
    9464:	df 91       	pop	r29
    9466:	cf 91       	pop	r28
    9468:	08 95       	ret

0000946a <mount_volume>:
    946a:	a0 e2       	ldi	r26, 0x20	; 32
    946c:	b0 e0       	ldi	r27, 0x00	; 0
    946e:	eb e3       	ldi	r30, 0x3B	; 59
    9470:	fa e4       	ldi	r31, 0x4A	; 74
    9472:	0c 94 0b e3 	jmp	0x1c616	; 0x1c616 <__prologue_saves__+0x4>
    9476:	5b 01       	movw	r10, r22
    9478:	f4 2e       	mov	r15, r20
    947a:	db 01       	movw	r26, r22
    947c:	1d 92       	st	X+, r1
    947e:	1c 92       	st	X, r1
    9480:	5d dc       	rcall	.-1862   	; 0x8d3c <get_ldnumber>
    9482:	6c 01       	movw	r12, r24
    9484:	97 fd       	sbrc	r25, 7
    9486:	39 c2       	rjmp	.+1138   	; 0x98fa <mount_volume+0x490>
    9488:	fc 01       	movw	r30, r24
    948a:	ee 0f       	add	r30, r30
    948c:	ff 1f       	adc	r31, r31
    948e:	e3 5d       	subi	r30, 0xD3	; 211
    9490:	f7 4e       	sbci	r31, 0xE7	; 231
    9492:	00 81       	ld	r16, Z
    9494:	11 81       	ldd	r17, Z+1	; 0x01
    9496:	01 15       	cp	r16, r1
    9498:	11 05       	cpc	r17, r1
    949a:	09 f4       	brne	.+2      	; 0x949e <mount_volume+0x34>
    949c:	31 c2       	rjmp	.+1122   	; 0x9900 <mount_volume+0x496>
    949e:	f5 01       	movw	r30, r10
    94a0:	11 83       	std	Z+1, r17	; 0x01
    94a2:	00 83       	st	Z, r16
    94a4:	ff 2d       	mov	r31, r15
    94a6:	fe 7f       	andi	r31, 0xFE	; 254
    94a8:	ff 2e       	mov	r15, r31
    94aa:	d8 01       	movw	r26, r16
    94ac:	8c 91       	ld	r24, X
    94ae:	88 23       	and	r24, r24
    94b0:	71 f0       	breq	.+28     	; 0x94ce <mount_volume+0x64>
    94b2:	f8 01       	movw	r30, r16
    94b4:	81 81       	ldd	r24, Z+1	; 0x01
    94b6:	0e 94 e0 67 	call	0xcfc0	; 0xcfc0 <disk_status>
    94ba:	80 fd       	sbrc	r24, 0
    94bc:	08 c0       	rjmp	.+16     	; 0x94ce <mount_volume+0x64>
    94be:	ff 20       	and	r15, r15
    94c0:	09 f4       	brne	.+2      	; 0x94c4 <mount_volume+0x5a>
    94c2:	21 c2       	rjmp	.+1090   	; 0x9906 <mount_volume+0x49c>
    94c4:	82 ff       	sbrs	r24, 2
    94c6:	1f c2       	rjmp	.+1086   	; 0x9906 <mount_volume+0x49c>
    94c8:	8a e0       	ldi	r24, 0x0A	; 10
    94ca:	90 e0       	ldi	r25, 0x00	; 0
    94cc:	24 c2       	rjmp	.+1096   	; 0x9916 <mount_volume+0x4ac>
    94ce:	d8 01       	movw	r26, r16
    94d0:	1c 92       	st	X, r1
    94d2:	f8 01       	movw	r30, r16
    94d4:	c1 82       	std	Z+1, r12	; 0x01
    94d6:	8c 2d       	mov	r24, r12
    94d8:	0e 94 e6 67 	call	0xcfcc	; 0xcfcc <disk_initialize>
    94dc:	80 fd       	sbrc	r24, 0
    94de:	16 c2       	rjmp	.+1068   	; 0x990c <mount_volume+0x4a2>
    94e0:	ff 20       	and	r15, r15
    94e2:	11 f0       	breq	.+4      	; 0x94e8 <mount_volume+0x7e>
    94e4:	82 fd       	sbrc	r24, 2
    94e6:	f0 cf       	rjmp	.-32     	; 0x94c8 <mount_volume+0x5e>
    94e8:	40 e0       	ldi	r20, 0x00	; 0
    94ea:	50 e0       	ldi	r21, 0x00	; 0
    94ec:	ba 01       	movw	r22, r20
    94ee:	c8 01       	movw	r24, r16
    94f0:	7c df       	rcall	.-264    	; 0x93ea <check_fs>
    94f2:	82 30       	cpi	r24, 0x02	; 2
    94f4:	91 05       	cpc	r25, r1
    94f6:	b9 f5       	brne	.+110    	; 0x9566 <mount_volume+0xfc>
    94f8:	68 01       	movw	r12, r16
    94fa:	f5 e0       	ldi	r31, 0x05	; 5
    94fc:	cf 1a       	sub	r12, r31
    94fe:	fe ef       	ldi	r31, 0xFE	; 254
    9500:	df 0a       	sbc	r13, r31
    9502:	9e 01       	movw	r18, r28
    9504:	2f 5f       	subi	r18, 0xFF	; 255
    9506:	3f 4f       	sbci	r19, 0xFF	; 255
    9508:	79 01       	movw	r14, r18
    950a:	48 01       	movw	r8, r16
    950c:	35 ec       	ldi	r19, 0xC5	; 197
    950e:	83 1a       	sub	r8, r19
    9510:	3d ef       	ldi	r19, 0xFD	; 253
    9512:	93 0a       	sbc	r9, r19
    9514:	57 01       	movw	r10, r14
    9516:	c6 01       	movw	r24, r12
    9518:	6b db       	rcall	.-2346   	; 0x8bf0 <ld_dword>
    951a:	d5 01       	movw	r26, r10
    951c:	6d 93       	st	X+, r22
    951e:	7d 93       	st	X+, r23
    9520:	8d 93       	st	X+, r24
    9522:	9d 93       	st	X+, r25
    9524:	5d 01       	movw	r10, r26
    9526:	b0 e1       	ldi	r27, 0x10	; 16
    9528:	cb 0e       	add	r12, r27
    952a:	d1 1c       	adc	r13, r1
    952c:	c8 14       	cp	r12, r8
    952e:	d9 04       	cpc	r13, r9
    9530:	91 f7       	brne	.-28     	; 0x9516 <mount_volume+0xac>
    9532:	6e 01       	movw	r12, r28
    9534:	e1 e1       	ldi	r30, 0x11	; 17
    9536:	ce 0e       	add	r12, r30
    9538:	d1 1c       	adc	r13, r1
    953a:	d7 01       	movw	r26, r14
    953c:	4d 91       	ld	r20, X+
    953e:	5d 91       	ld	r21, X+
    9540:	6d 91       	ld	r22, X+
    9542:	7d 91       	ld	r23, X+
    9544:	7d 01       	movw	r14, r26
    9546:	41 15       	cp	r20, r1
    9548:	51 05       	cpc	r21, r1
    954a:	61 05       	cpc	r22, r1
    954c:	71 05       	cpc	r23, r1
    954e:	31 f0       	breq	.+12     	; 0x955c <mount_volume+0xf2>
    9550:	c8 01       	movw	r24, r16
    9552:	4b df       	rcall	.-362    	; 0x93ea <check_fs>
    9554:	82 30       	cpi	r24, 0x02	; 2
    9556:	91 05       	cpc	r25, r1
    9558:	18 f4       	brcc	.+6      	; 0x9560 <mount_volume+0xf6>
    955a:	05 c0       	rjmp	.+10     	; 0x9566 <mount_volume+0xfc>
    955c:	83 e0       	ldi	r24, 0x03	; 3
    955e:	90 e0       	ldi	r25, 0x00	; 0
    9560:	ce 14       	cp	r12, r14
    9562:	df 04       	cpc	r13, r15
    9564:	51 f7       	brne	.-44     	; 0x953a <mount_volume+0xd0>
    9566:	84 30       	cpi	r24, 0x04	; 4
    9568:	91 05       	cpc	r25, r1
    956a:	09 f4       	brne	.+2      	; 0x956e <mount_volume+0x104>
    956c:	d2 c1       	rjmp	.+932    	; 0x9912 <mount_volume+0x4a8>
    956e:	02 97       	sbiw	r24, 0x02	; 2
    9570:	18 f0       	brcs	.+6      	; 0x9578 <mount_volume+0x10e>
    9572:	8d e0       	ldi	r24, 0x0D	; 13
    9574:	90 e0       	ldi	r25, 0x00	; 0
    9576:	cf c1       	rjmp	.+926    	; 0x9916 <mount_volume+0x4ac>
    9578:	f8 01       	movw	r30, r16
    957a:	e0 5c       	subi	r30, 0xC0	; 192
    957c:	ff 4f       	sbci	r31, 0xFF	; 255
    957e:	80 81       	ld	r24, Z
    9580:	91 81       	ldd	r25, Z+1	; 0x01
    9582:	81 15       	cp	r24, r1
    9584:	92 40       	sbci	r25, 0x02	; 2
    9586:	a9 f7       	brne	.-22     	; 0x9572 <mount_volume+0x108>
    9588:	3b 96       	adiw	r30, 0x0b	; 11
    958a:	40 80       	ld	r4, Z
    958c:	51 80       	ldd	r5, Z+1	; 0x01
    958e:	41 14       	cp	r4, r1
    9590:	51 04       	cpc	r5, r1
    9592:	19 f0       	breq	.+6      	; 0x959a <mount_volume+0x130>
    9594:	61 2c       	mov	r6, r1
    9596:	71 2c       	mov	r7, r1
    9598:	06 c0       	rjmp	.+12     	; 0x95a6 <mount_volume+0x13c>
    959a:	c8 01       	movw	r24, r16
    959c:	87 5a       	subi	r24, 0xA7	; 167
    959e:	9f 4f       	sbci	r25, 0xFF	; 255
    95a0:	27 db       	rcall	.-2482   	; 0x8bf0 <ld_dword>
    95a2:	2b 01       	movw	r4, r22
    95a4:	3c 01       	movw	r6, r24
    95a6:	f8 01       	movw	r30, r16
    95a8:	21 a9       	ldd	r18, Z+49	; 0x31
    95aa:	32 a9       	ldd	r19, Z+50	; 0x32
    95ac:	43 a9       	ldd	r20, Z+51	; 0x33
    95ae:	54 a9       	ldd	r21, Z+52	; 0x34
    95b0:	29 8b       	std	Y+17, r18	; 0x11
    95b2:	3a 8b       	std	Y+18, r19	; 0x12
    95b4:	4b 8b       	std	Y+19, r20	; 0x13
    95b6:	5c 8b       	std	Y+20, r21	; 0x14
    95b8:	45 8e       	std	Z+29, r4	; 0x1d
    95ba:	56 8e       	std	Z+30, r5	; 0x1e
    95bc:	67 8e       	std	Z+31, r6	; 0x1f
    95be:	70 a2       	std	Z+32, r7	; 0x20
    95c0:	eb 5b       	subi	r30, 0xBB	; 187
    95c2:	ff 4f       	sbci	r31, 0xFF	; 255
    95c4:	a0 80       	ld	r10, Z
    95c6:	f8 01       	movw	r30, r16
    95c8:	a2 82       	std	Z+2, r10	; 0x02
    95ca:	8f ef       	ldi	r24, 0xFF	; 255
    95cc:	8a 0d       	add	r24, r10
    95ce:	82 30       	cpi	r24, 0x02	; 2
    95d0:	80 f6       	brcc	.-96     	; 0x9572 <mount_volume+0x108>
    95d2:	ee 5b       	subi	r30, 0xBE	; 190
    95d4:	ff 4f       	sbci	r31, 0xFF	; 255
    95d6:	b0 80       	ld	r11, Z
    95d8:	8b 2d       	mov	r24, r11
    95da:	90 e0       	ldi	r25, 0x00	; 0
    95dc:	f8 01       	movw	r30, r16
    95de:	92 87       	std	Z+10, r25	; 0x0a
    95e0:	81 87       	std	Z+9, r24	; 0x09
    95e2:	00 97       	sbiw	r24, 0x00	; 0
    95e4:	31 f2       	breq	.-116    	; 0x9572 <mount_volume+0x108>
    95e6:	9c 01       	movw	r18, r24
    95e8:	21 50       	subi	r18, 0x01	; 1
    95ea:	31 09       	sbc	r19, r1
    95ec:	82 23       	and	r24, r18
    95ee:	93 23       	and	r25, r19
    95f0:	89 2b       	or	r24, r25
    95f2:	09 f0       	breq	.+2      	; 0x95f6 <mount_volume+0x18c>
    95f4:	be cf       	rjmp	.-132    	; 0x9572 <mount_volume+0x108>
    95f6:	ea 5b       	subi	r30, 0xBA	; 186
    95f8:	ff 4f       	sbci	r31, 0xFF	; 255
    95fa:	80 80       	ld	r8, Z
    95fc:	91 80       	ldd	r9, Z+1	; 0x01
    95fe:	f8 01       	movw	r30, r16
    9600:	90 86       	std	Z+8, r9	; 0x08
    9602:	87 82       	std	Z+7, r8	; 0x07
    9604:	c4 01       	movw	r24, r8
    9606:	8f 70       	andi	r24, 0x0F	; 15
    9608:	99 27       	eor	r25, r25
    960a:	89 2b       	or	r24, r25
    960c:	09 f0       	breq	.+2      	; 0x9610 <mount_volume+0x1a6>
    960e:	b1 cf       	rjmp	.-158    	; 0x9572 <mount_volume+0x108>
    9610:	e8 5b       	subi	r30, 0xB8	; 184
    9612:	ff 4f       	sbci	r31, 0xFF	; 255
    9614:	80 81       	ld	r24, Z
    9616:	91 81       	ldd	r25, Z+1	; 0x01
    9618:	6c 01       	movw	r12, r24
    961a:	e1 2c       	mov	r14, r1
    961c:	f1 2c       	mov	r15, r1
    961e:	89 2b       	or	r24, r25
    9620:	31 f4       	brne	.+12     	; 0x962e <mount_volume+0x1c4>
    9622:	c8 01       	movw	r24, r16
    9624:	8b 5a       	subi	r24, 0xAB	; 171
    9626:	9f 4f       	sbci	r25, 0xFF	; 255
    9628:	e3 da       	rcall	.-2618   	; 0x8bf0 <ld_dword>
    962a:	6b 01       	movw	r12, r22
    962c:	7c 01       	movw	r14, r24
    962e:	f8 01       	movw	r30, r16
    9630:	ed 5b       	subi	r30, 0xBD	; 189
    9632:	ff 4f       	sbci	r31, 0xFF	; 255
    9634:	01 90       	ld	r0, Z+
    9636:	f0 81       	ld	r31, Z
    9638:	e0 2d       	mov	r30, r0
    963a:	30 97       	sbiw	r30, 0x00	; 0
    963c:	09 f4       	brne	.+2      	; 0x9640 <mount_volume+0x1d6>
    963e:	99 cf       	rjmp	.-206    	; 0x9572 <mount_volume+0x108>
    9640:	aa 2d       	mov	r26, r10
    9642:	b0 e0       	ldi	r27, 0x00	; 0
    9644:	a3 01       	movw	r20, r6
    9646:	92 01       	movw	r18, r4
    9648:	0e 94 e9 e2 	call	0x1c5d2	; 0x1c5d2 <__muluhisi3>
    964c:	69 8f       	std	Y+25, r22	; 0x19
    964e:	7a 8f       	std	Y+26, r23	; 0x1a
    9650:	8b 8f       	std	Y+27, r24	; 0x1b
    9652:	9c 8f       	std	Y+28, r25	; 0x1c
    9654:	9f 01       	movw	r18, r30
    9656:	40 e0       	ldi	r20, 0x00	; 0
    9658:	50 e0       	ldi	r21, 0x00	; 0
    965a:	2d 8f       	std	Y+29, r18	; 0x1d
    965c:	3e 8f       	std	Y+30, r19	; 0x1e
    965e:	4f 8f       	std	Y+31, r20	; 0x1f
    9660:	58 a3       	std	Y+32, r21	; 0x20
    9662:	c4 01       	movw	r24, r8
    9664:	f4 e0       	ldi	r31, 0x04	; 4
    9666:	96 95       	lsr	r25
    9668:	87 95       	ror	r24
    966a:	fa 95       	dec	r31
    966c:	e1 f7       	brne	.-8      	; 0x9666 <mount_volume+0x1fc>
    966e:	28 0f       	add	r18, r24
    9670:	39 1f       	adc	r19, r25
    9672:	41 1d       	adc	r20, r1
    9674:	51 1d       	adc	r21, r1
    9676:	da 01       	movw	r26, r20
    9678:	c9 01       	movw	r24, r18
    967a:	29 8d       	ldd	r18, Y+25	; 0x19
    967c:	3a 8d       	ldd	r19, Y+26	; 0x1a
    967e:	4b 8d       	ldd	r20, Y+27	; 0x1b
    9680:	5c 8d       	ldd	r21, Y+28	; 0x1c
    9682:	28 0f       	add	r18, r24
    9684:	39 1f       	adc	r19, r25
    9686:	4a 1f       	adc	r20, r26
    9688:	5b 1f       	adc	r21, r27
    968a:	2d 8b       	std	Y+21, r18	; 0x15
    968c:	3e 8b       	std	Y+22, r19	; 0x16
    968e:	4f 8b       	std	Y+23, r20	; 0x17
    9690:	58 8f       	std	Y+24, r21	; 0x18
    9692:	c2 16       	cp	r12, r18
    9694:	d3 06       	cpc	r13, r19
    9696:	e4 06       	cpc	r14, r20
    9698:	f5 06       	cpc	r15, r21
    969a:	08 f4       	brcc	.+2      	; 0x969e <mount_volume+0x234>
    969c:	6a cf       	rjmp	.-300    	; 0x9572 <mount_volume+0x108>
    969e:	c7 01       	movw	r24, r14
    96a0:	b6 01       	movw	r22, r12
    96a2:	62 1b       	sub	r22, r18
    96a4:	73 0b       	sbc	r23, r19
    96a6:	84 0b       	sbc	r24, r20
    96a8:	95 0b       	sbc	r25, r21
    96aa:	2b 2d       	mov	r18, r11
    96ac:	30 e0       	ldi	r19, 0x00	; 0
    96ae:	40 e0       	ldi	r20, 0x00	; 0
    96b0:	50 e0       	ldi	r21, 0x00	; 0
    96b2:	0e 94 9c e2 	call	0x1c538	; 0x1c538 <__udivmodsi4>
    96b6:	da 01       	movw	r26, r20
    96b8:	c9 01       	movw	r24, r18
    96ba:	01 97       	sbiw	r24, 0x01	; 1
    96bc:	a1 09       	sbc	r26, r1
    96be:	b1 09       	sbc	r27, r1
    96c0:	85 3f       	cpi	r24, 0xF5	; 245
    96c2:	9f 4f       	sbci	r25, 0xFF	; 255
    96c4:	af 4f       	sbci	r26, 0xFF	; 255
    96c6:	bf 40       	sbci	r27, 0x0F	; 15
    96c8:	08 f0       	brcs	.+2      	; 0x96cc <mount_volume+0x262>
    96ca:	53 cf       	rjmp	.-346    	; 0x9572 <mount_volume+0x108>
    96cc:	26 3f       	cpi	r18, 0xF6	; 246
    96ce:	8f ef       	ldi	r24, 0xFF	; 255
    96d0:	38 07       	cpc	r19, r24
    96d2:	41 05       	cpc	r20, r1
    96d4:	51 05       	cpc	r21, r1
    96d6:	50 f4       	brcc	.+20     	; 0x96ec <mount_volume+0x282>
    96d8:	26 3f       	cpi	r18, 0xF6	; 246
    96da:	9f e0       	ldi	r25, 0x0F	; 15
    96dc:	39 07       	cpc	r19, r25
    96de:	41 05       	cpc	r20, r1
    96e0:	51 05       	cpc	r21, r1
    96e2:	40 f4       	brcc	.+16     	; 0x96f4 <mount_volume+0x28a>
    96e4:	aa 24       	eor	r10, r10
    96e6:	a3 94       	inc	r10
    96e8:	b1 2c       	mov	r11, r1
    96ea:	07 c0       	rjmp	.+14     	; 0x96fa <mount_volume+0x290>
    96ec:	73 e0       	ldi	r23, 0x03	; 3
    96ee:	a7 2e       	mov	r10, r23
    96f0:	b1 2c       	mov	r11, r1
    96f2:	03 c0       	rjmp	.+6      	; 0x96fa <mount_volume+0x290>
    96f4:	62 e0       	ldi	r22, 0x02	; 2
    96f6:	a6 2e       	mov	r10, r22
    96f8:	b1 2c       	mov	r11, r1
    96fa:	69 01       	movw	r12, r18
    96fc:	7a 01       	movw	r14, r20
    96fe:	a2 e0       	ldi	r26, 0x02	; 2
    9700:	ca 0e       	add	r12, r26
    9702:	d1 1c       	adc	r13, r1
    9704:	e1 1c       	adc	r14, r1
    9706:	f1 1c       	adc	r15, r1
    9708:	f8 01       	movw	r30, r16
    970a:	c1 8e       	std	Z+25, r12	; 0x19
    970c:	d2 8e       	std	Z+26, r13	; 0x1a
    970e:	e3 8e       	std	Z+27, r14	; 0x1b
    9710:	f4 8e       	std	Z+28, r15	; 0x1c
    9712:	29 89       	ldd	r18, Y+17	; 0x11
    9714:	3a 89       	ldd	r19, Y+18	; 0x12
    9716:	4b 89       	ldd	r20, Y+19	; 0x13
    9718:	5c 89       	ldd	r21, Y+20	; 0x14
    971a:	21 a3       	std	Z+33, r18	; 0x21
    971c:	32 a3       	std	Z+34, r19	; 0x22
    971e:	43 a3       	std	Z+35, r20	; 0x23
    9720:	54 a3       	std	Z+36, r21	; 0x24
    9722:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9724:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9726:	af 8d       	ldd	r26, Y+31	; 0x1f
    9728:	b8 a1       	ldd	r27, Y+32	; 0x20
    972a:	28 0f       	add	r18, r24
    972c:	39 1f       	adc	r19, r25
    972e:	4a 1f       	adc	r20, r26
    9730:	5b 1f       	adc	r21, r27
    9732:	2d 8f       	std	Y+29, r18	; 0x1d
    9734:	3e 8f       	std	Y+30, r19	; 0x1e
    9736:	4f 8f       	std	Y+31, r20	; 0x1f
    9738:	58 a3       	std	Y+32, r21	; 0x20
    973a:	25 a3       	std	Z+37, r18	; 0x25
    973c:	36 a3       	std	Z+38, r19	; 0x26
    973e:	47 a3       	std	Z+39, r20	; 0x27
    9740:	50 a7       	std	Z+40, r21	; 0x28
    9742:	49 89       	ldd	r20, Y+17	; 0x11
    9744:	5a 89       	ldd	r21, Y+18	; 0x12
    9746:	6b 89       	ldd	r22, Y+19	; 0x13
    9748:	7c 89       	ldd	r23, Y+20	; 0x14
    974a:	8d 89       	ldd	r24, Y+21	; 0x15
    974c:	9e 89       	ldd	r25, Y+22	; 0x16
    974e:	af 89       	ldd	r26, Y+23	; 0x17
    9750:	b8 8d       	ldd	r27, Y+24	; 0x18
    9752:	48 0f       	add	r20, r24
    9754:	59 1f       	adc	r21, r25
    9756:	6a 1f       	adc	r22, r26
    9758:	7b 1f       	adc	r23, r27
    975a:	45 a7       	std	Z+45, r20	; 0x2d
    975c:	56 a7       	std	Z+46, r21	; 0x2e
    975e:	67 a7       	std	Z+47, r22	; 0x2f
    9760:	70 ab       	std	Z+48, r23	; 0x30
    9762:	f3 e0       	ldi	r31, 0x03	; 3
    9764:	af 16       	cp	r10, r31
    9766:	b1 04       	cpc	r11, r1
    9768:	e9 f4       	brne	.+58     	; 0x97a4 <mount_volume+0x33a>
    976a:	f8 01       	movw	r30, r16
    976c:	e1 5a       	subi	r30, 0xA1	; 161
    976e:	ff 4f       	sbci	r31, 0xFF	; 255
    9770:	80 81       	ld	r24, Z
    9772:	91 81       	ldd	r25, Z+1	; 0x01
    9774:	89 2b       	or	r24, r25
    9776:	09 f0       	breq	.+2      	; 0x977a <mount_volume+0x310>
    9778:	fc ce       	rjmp	.-520    	; 0x9572 <mount_volume+0x108>
    977a:	81 14       	cp	r8, r1
    977c:	91 04       	cpc	r9, r1
    977e:	09 f0       	breq	.+2      	; 0x9782 <mount_volume+0x318>
    9780:	f8 ce       	rjmp	.-528    	; 0x9572 <mount_volume+0x108>
    9782:	c8 01       	movw	r24, r16
    9784:	8f 59       	subi	r24, 0x9F	; 159
    9786:	9f 4f       	sbci	r25, 0xFF	; 255
    9788:	33 da       	rcall	.-2970   	; 0x8bf0 <ld_dword>
    978a:	f8 01       	movw	r30, r16
    978c:	61 a7       	std	Z+41, r22	; 0x29
    978e:	72 a7       	std	Z+42, r23	; 0x2a
    9790:	83 a7       	std	Z+43, r24	; 0x2b
    9792:	94 a7       	std	Z+44, r25	; 0x2c
    9794:	42 e0       	ldi	r20, 0x02	; 2
    9796:	cc 0c       	add	r12, r12
    9798:	dd 1c       	adc	r13, r13
    979a:	ee 1c       	adc	r14, r14
    979c:	ff 1c       	adc	r15, r15
    979e:	4a 95       	dec	r20
    97a0:	d1 f7       	brne	.-12     	; 0x9796 <mount_volume+0x32c>
    97a2:	33 c0       	rjmp	.+102    	; 0x980a <mount_volume+0x3a0>
    97a4:	81 14       	cp	r8, r1
    97a6:	91 04       	cpc	r9, r1
    97a8:	09 f4       	brne	.+2      	; 0x97ac <mount_volume+0x342>
    97aa:	e3 ce       	rjmp	.-570    	; 0x9572 <mount_volume+0x108>
    97ac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    97ae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    97b0:	af 8d       	ldd	r26, Y+31	; 0x1f
    97b2:	b8 a1       	ldd	r27, Y+32	; 0x20
    97b4:	29 8d       	ldd	r18, Y+25	; 0x19
    97b6:	3a 8d       	ldd	r19, Y+26	; 0x1a
    97b8:	4b 8d       	ldd	r20, Y+27	; 0x1b
    97ba:	5c 8d       	ldd	r21, Y+28	; 0x1c
    97bc:	82 0f       	add	r24, r18
    97be:	93 1f       	adc	r25, r19
    97c0:	a4 1f       	adc	r26, r20
    97c2:	b5 1f       	adc	r27, r21
    97c4:	f8 01       	movw	r30, r16
    97c6:	81 a7       	std	Z+41, r24	; 0x29
    97c8:	92 a7       	std	Z+42, r25	; 0x2a
    97ca:	a3 a7       	std	Z+43, r26	; 0x2b
    97cc:	b4 a7       	std	Z+44, r27	; 0x2c
    97ce:	f2 e0       	ldi	r31, 0x02	; 2
    97d0:	af 16       	cp	r10, r31
    97d2:	b1 04       	cpc	r11, r1
    97d4:	29 f4       	brne	.+10     	; 0x97e0 <mount_volume+0x376>
    97d6:	cc 0c       	add	r12, r12
    97d8:	dd 1c       	adc	r13, r13
    97da:	ee 1c       	adc	r14, r14
    97dc:	ff 1c       	adc	r15, r15
    97de:	15 c0       	rjmp	.+42     	; 0x980a <mount_volume+0x3a0>
    97e0:	a3 e0       	ldi	r26, 0x03	; 3
    97e2:	b0 e0       	ldi	r27, 0x00	; 0
    97e4:	a7 01       	movw	r20, r14
    97e6:	96 01       	movw	r18, r12
    97e8:	0e 94 e9 e2 	call	0x1c5d2	; 0x1c5d2 <__muluhisi3>
    97ec:	dc 01       	movw	r26, r24
    97ee:	cb 01       	movw	r24, r22
    97f0:	b6 95       	lsr	r27
    97f2:	a7 95       	ror	r26
    97f4:	97 95       	ror	r25
    97f6:	87 95       	ror	r24
    97f8:	21 e0       	ldi	r18, 0x01	; 1
    97fa:	c2 22       	and	r12, r18
    97fc:	dd 24       	eor	r13, r13
    97fe:	ee 24       	eor	r14, r14
    9800:	ff 24       	eor	r15, r15
    9802:	c8 0e       	add	r12, r24
    9804:	d9 1e       	adc	r13, r25
    9806:	ea 1e       	adc	r14, r26
    9808:	fb 1e       	adc	r15, r27
    980a:	3f ef       	ldi	r19, 0xFF	; 255
    980c:	c3 0e       	add	r12, r19
    980e:	31 e0       	ldi	r19, 0x01	; 1
    9810:	d3 1e       	adc	r13, r19
    9812:	e1 1c       	adc	r14, r1
    9814:	f1 1c       	adc	r15, r1
    9816:	89 e0       	ldi	r24, 0x09	; 9
    9818:	f6 94       	lsr	r15
    981a:	e7 94       	ror	r14
    981c:	d7 94       	ror	r13
    981e:	c7 94       	ror	r12
    9820:	8a 95       	dec	r24
    9822:	d1 f7       	brne	.-12     	; 0x9818 <mount_volume+0x3ae>
    9824:	4c 14       	cp	r4, r12
    9826:	5d 04       	cpc	r5, r13
    9828:	6e 04       	cpc	r6, r14
    982a:	7f 04       	cpc	r7, r15
    982c:	08 f4       	brcc	.+2      	; 0x9830 <mount_volume+0x3c6>
    982e:	a1 ce       	rjmp	.-702    	; 0x9572 <mount_volume+0x108>
    9830:	8f ef       	ldi	r24, 0xFF	; 255
    9832:	9f ef       	ldi	r25, 0xFF	; 255
    9834:	dc 01       	movw	r26, r24
    9836:	f8 01       	movw	r30, r16
    9838:	81 8b       	std	Z+17, r24	; 0x11
    983a:	92 8b       	std	Z+18, r25	; 0x12
    983c:	a3 8b       	std	Z+19, r26	; 0x13
    983e:	b4 8b       	std	Z+20, r27	; 0x14
    9840:	85 87       	std	Z+13, r24	; 0x0d
    9842:	96 87       	std	Z+14, r25	; 0x0e
    9844:	a7 87       	std	Z+15, r26	; 0x0f
    9846:	b0 8b       	std	Z+16, r27	; 0x10
    9848:	80 e8       	ldi	r24, 0x80	; 128
    984a:	84 83       	std	Z+4, r24	; 0x04
    984c:	f3 e0       	ldi	r31, 0x03	; 3
    984e:	af 16       	cp	r10, r31
    9850:	b1 04       	cpc	r11, r1
    9852:	09 f0       	breq	.+2      	; 0x9856 <mount_volume+0x3ec>
    9854:	3f c0       	rjmp	.+126    	; 0x98d4 <mount_volume+0x46a>
    9856:	f8 01       	movw	r30, r16
    9858:	eb 59       	subi	r30, 0x9B	; 155
    985a:	ff 4f       	sbci	r31, 0xFF	; 255
    985c:	80 81       	ld	r24, Z
    985e:	91 81       	ldd	r25, Z+1	; 0x01
    9860:	01 97       	sbiw	r24, 0x01	; 1
    9862:	c1 f5       	brne	.+112    	; 0x98d4 <mount_volume+0x46a>
    9864:	49 89       	ldd	r20, Y+17	; 0x11
    9866:	5a 89       	ldd	r21, Y+18	; 0x12
    9868:	6b 89       	ldd	r22, Y+19	; 0x13
    986a:	7c 89       	ldd	r23, Y+20	; 0x14
    986c:	4f 5f       	subi	r20, 0xFF	; 255
    986e:	5f 4f       	sbci	r21, 0xFF	; 255
    9870:	6f 4f       	sbci	r22, 0xFF	; 255
    9872:	7f 4f       	sbci	r23, 0xFF	; 255
    9874:	c8 01       	movw	r24, r16
    9876:	7e dd       	rcall	.-1284   	; 0x9374 <move_window>
    9878:	89 2b       	or	r24, r25
    987a:	61 f5       	brne	.+88     	; 0x98d4 <mount_volume+0x46a>
    987c:	f8 01       	movw	r30, r16
    987e:	14 82       	std	Z+4, r1	; 0x04
    9880:	ed 5c       	subi	r30, 0xCD	; 205
    9882:	fd 4f       	sbci	r31, 0xFD	; 253
    9884:	80 81       	ld	r24, Z
    9886:	91 81       	ldd	r25, Z+1	; 0x01
    9888:	85 35       	cpi	r24, 0x55	; 85
    988a:	9a 4a       	sbci	r25, 0xAA	; 170
    988c:	19 f5       	brne	.+70     	; 0x98d4 <mount_volume+0x46a>
    988e:	c8 01       	movw	r24, r16
    9890:	c5 96       	adiw	r24, 0x35	; 53
    9892:	ae d9       	rcall	.-3236   	; 0x8bf0 <ld_dword>
    9894:	62 35       	cpi	r22, 0x52	; 82
    9896:	72 45       	sbci	r23, 0x52	; 82
    9898:	81 46       	sbci	r24, 0x61	; 97
    989a:	91 44       	sbci	r25, 0x41	; 65
    989c:	d9 f4       	brne	.+54     	; 0x98d4 <mount_volume+0x46a>
    989e:	c8 01       	movw	r24, r16
    98a0:	87 5e       	subi	r24, 0xE7	; 231
    98a2:	9d 4f       	sbci	r25, 0xFD	; 253
    98a4:	a5 d9       	rcall	.-3254   	; 0x8bf0 <ld_dword>
    98a6:	62 37       	cpi	r22, 0x72	; 114
    98a8:	72 47       	sbci	r23, 0x72	; 114
    98aa:	81 44       	sbci	r24, 0x41	; 65
    98ac:	91 46       	sbci	r25, 0x61	; 97
    98ae:	91 f4       	brne	.+36     	; 0x98d4 <mount_volume+0x46a>
    98b0:	c8 01       	movw	r24, r16
    98b2:	83 5e       	subi	r24, 0xE3	; 227
    98b4:	9d 4f       	sbci	r25, 0xFD	; 253
    98b6:	9c d9       	rcall	.-3272   	; 0x8bf0 <ld_dword>
    98b8:	f8 01       	movw	r30, r16
    98ba:	61 8b       	std	Z+17, r22	; 0x11
    98bc:	72 8b       	std	Z+18, r23	; 0x12
    98be:	83 8b       	std	Z+19, r24	; 0x13
    98c0:	94 8b       	std	Z+20, r25	; 0x14
    98c2:	c8 01       	movw	r24, r16
    98c4:	8f 5d       	subi	r24, 0xDF	; 223
    98c6:	9d 4f       	sbci	r25, 0xFD	; 253
    98c8:	93 d9       	rcall	.-3290   	; 0x8bf0 <ld_dword>
    98ca:	f8 01       	movw	r30, r16
    98cc:	65 87       	std	Z+13, r22	; 0x0d
    98ce:	76 87       	std	Z+14, r23	; 0x0e
    98d0:	87 87       	std	Z+15, r24	; 0x0f
    98d2:	90 8b       	std	Z+16, r25	; 0x10
    98d4:	d8 01       	movw	r26, r16
    98d6:	ac 92       	st	X, r10
    98d8:	80 91 2b 18 	lds	r24, 0x182B	; 0x80182b <Fsid>
    98dc:	90 91 2c 18 	lds	r25, 0x182C	; 0x80182c <Fsid+0x1>
    98e0:	01 96       	adiw	r24, 0x01	; 1
    98e2:	90 93 2c 18 	sts	0x182C, r25	; 0x80182c <Fsid+0x1>
    98e6:	80 93 2b 18 	sts	0x182B, r24	; 0x80182b <Fsid>
    98ea:	f8 01       	movw	r30, r16
    98ec:	96 83       	std	Z+6, r25	; 0x06
    98ee:	85 83       	std	Z+5, r24	; 0x05
    98f0:	15 8a       	std	Z+21, r1	; 0x15
    98f2:	16 8a       	std	Z+22, r1	; 0x16
    98f4:	17 8a       	std	Z+23, r1	; 0x17
    98f6:	10 8e       	std	Z+24, r1	; 0x18
    98f8:	06 c0       	rjmp	.+12     	; 0x9906 <mount_volume+0x49c>
    98fa:	8b e0       	ldi	r24, 0x0B	; 11
    98fc:	90 e0       	ldi	r25, 0x00	; 0
    98fe:	0b c0       	rjmp	.+22     	; 0x9916 <mount_volume+0x4ac>
    9900:	8c e0       	ldi	r24, 0x0C	; 12
    9902:	90 e0       	ldi	r25, 0x00	; 0
    9904:	08 c0       	rjmp	.+16     	; 0x9916 <mount_volume+0x4ac>
    9906:	80 e0       	ldi	r24, 0x00	; 0
    9908:	90 e0       	ldi	r25, 0x00	; 0
    990a:	05 c0       	rjmp	.+10     	; 0x9916 <mount_volume+0x4ac>
    990c:	83 e0       	ldi	r24, 0x03	; 3
    990e:	90 e0       	ldi	r25, 0x00	; 0
    9910:	02 c0       	rjmp	.+4      	; 0x9916 <mount_volume+0x4ac>
    9912:	81 e0       	ldi	r24, 0x01	; 1
    9914:	90 e0       	ldi	r25, 0x00	; 0
    9916:	a0 96       	adiw	r28, 0x20	; 32
    9918:	e0 e1       	ldi	r30, 0x10	; 16
    991a:	0c 94 27 e3 	jmp	0x1c64e	; 0x1c64e <__epilogue_restores__+0x4>

0000991e <put_fat>:
    991e:	a6 e0       	ldi	r26, 0x06	; 6
    9920:	b0 e0       	ldi	r27, 0x00	; 0
    9922:	e5 e9       	ldi	r30, 0x95	; 149
    9924:	fc e4       	ldi	r31, 0x4C	; 76
    9926:	0c 94 09 e3 	jmp	0x1c612	; 0x1c612 <__prologue_saves__>
    992a:	42 30       	cpi	r20, 0x02	; 2
    992c:	51 05       	cpc	r21, r1
    992e:	61 05       	cpc	r22, r1
    9930:	71 05       	cpc	r23, r1
    9932:	08 f4       	brcc	.+2      	; 0x9936 <put_fat+0x18>
    9934:	e5 c0       	rjmp	.+458    	; 0x9b00 <put_fat+0x1e2>
    9936:	fc 01       	movw	r30, r24
    9938:	c1 8c       	ldd	r12, Z+25	; 0x19
    993a:	d2 8c       	ldd	r13, Z+26	; 0x1a
    993c:	e3 8c       	ldd	r14, Z+27	; 0x1b
    993e:	f4 8c       	ldd	r15, Z+28	; 0x1c
    9940:	4c 15       	cp	r20, r12
    9942:	5d 05       	cpc	r21, r13
    9944:	6e 05       	cpc	r22, r14
    9946:	7f 05       	cpc	r23, r15
    9948:	08 f0       	brcs	.+2      	; 0x994c <put_fat+0x2e>
    994a:	da c0       	rjmp	.+436    	; 0x9b00 <put_fat+0x1e2>
    994c:	28 01       	movw	r4, r16
    994e:	39 01       	movw	r6, r18
    9950:	6a 01       	movw	r12, r20
    9952:	7b 01       	movw	r14, r22
    9954:	9e 83       	std	Y+6, r25	; 0x06
    9956:	8d 83       	std	Y+5, r24	; 0x05
    9958:	80 81       	ld	r24, Z
    995a:	82 30       	cpi	r24, 0x02	; 2
    995c:	09 f4       	brne	.+2      	; 0x9960 <put_fat+0x42>
    995e:	73 c0       	rjmp	.+230    	; 0x9a46 <put_fat+0x128>
    9960:	83 30       	cpi	r24, 0x03	; 3
    9962:	09 f4       	brne	.+2      	; 0x9966 <put_fat+0x48>
    9964:	92 c0       	rjmp	.+292    	; 0x9a8a <put_fat+0x16c>
    9966:	81 30       	cpi	r24, 0x01	; 1
    9968:	09 f0       	breq	.+2      	; 0x996c <put_fat+0x4e>
    996a:	ca c0       	rjmp	.+404    	; 0x9b00 <put_fat+0x1e2>
    996c:	4a 01       	movw	r8, r20
    996e:	96 94       	lsr	r9
    9970:	87 94       	ror	r8
    9972:	84 0e       	add	r8, r20
    9974:	95 1e       	adc	r9, r21
    9976:	c4 01       	movw	r24, r8
    9978:	89 2f       	mov	r24, r25
    997a:	99 27       	eor	r25, r25
    997c:	86 95       	lsr	r24
    997e:	45 a1       	ldd	r20, Z+37	; 0x25
    9980:	56 a1       	ldd	r21, Z+38	; 0x26
    9982:	67 a1       	ldd	r22, Z+39	; 0x27
    9984:	70 a5       	ldd	r23, Z+40	; 0x28
    9986:	48 0f       	add	r20, r24
    9988:	59 1f       	adc	r21, r25
    998a:	61 1d       	adc	r22, r1
    998c:	71 1d       	adc	r23, r1
    998e:	cf 01       	movw	r24, r30
    9990:	f1 dc       	rcall	.-1566   	; 0x9374 <move_window>
    9992:	5c 01       	movw	r10, r24
    9994:	89 2b       	or	r24, r25
    9996:	09 f0       	breq	.+2      	; 0x999a <put_fat+0x7c>
    9998:	b6 c0       	rjmp	.+364    	; 0x9b06 <put_fat+0x1e8>
    999a:	2d 80       	ldd	r2, Y+5	; 0x05
    999c:	3e 80       	ldd	r3, Y+6	; 0x06
    999e:	f5 e3       	ldi	r31, 0x35	; 53
    99a0:	2f 0e       	add	r2, r31
    99a2:	31 1c       	adc	r3, r1
    99a4:	84 01       	movw	r16, r8
    99a6:	0f 5f       	subi	r16, 0xFF	; 255
    99a8:	1f 4f       	sbci	r17, 0xFF	; 255
    99aa:	21 e0       	ldi	r18, 0x01	; 1
    99ac:	92 22       	and	r9, r18
    99ae:	f1 01       	movw	r30, r2
    99b0:	e8 0d       	add	r30, r8
    99b2:	f9 1d       	adc	r31, r9
    99b4:	d7 01       	movw	r26, r14
    99b6:	c6 01       	movw	r24, r12
    99b8:	81 70       	andi	r24, 0x01	; 1
    99ba:	99 27       	eor	r25, r25
    99bc:	aa 27       	eor	r26, r26
    99be:	bb 27       	eor	r27, r27
    99c0:	89 83       	std	Y+1, r24	; 0x01
    99c2:	9a 83       	std	Y+2, r25	; 0x02
    99c4:	ab 83       	std	Y+3, r26	; 0x03
    99c6:	bc 83       	std	Y+4, r27	; 0x04
    99c8:	c0 fe       	sbrs	r12, 0
    99ca:	09 c0       	rjmp	.+18     	; 0x99de <put_fat+0xc0>
    99cc:	80 81       	ld	r24, Z
    99ce:	28 2f       	mov	r18, r24
    99d0:	2f 70       	andi	r18, 0x0F	; 15
    99d2:	a0 e1       	ldi	r26, 0x10	; 16
    99d4:	4a 9e       	mul	r4, r26
    99d6:	c0 01       	movw	r24, r0
    99d8:	11 24       	eor	r1, r1
    99da:	82 2b       	or	r24, r18
    99dc:	01 c0       	rjmp	.+2      	; 0x99e0 <put_fat+0xc2>
    99de:	84 2d       	mov	r24, r4
    99e0:	80 83       	st	Z, r24
    99e2:	81 e0       	ldi	r24, 0x01	; 1
    99e4:	ed 81       	ldd	r30, Y+5	; 0x05
    99e6:	fe 81       	ldd	r31, Y+6	; 0x06
    99e8:	83 83       	std	Z+3, r24	; 0x03
    99ea:	45 a1       	ldd	r20, Z+37	; 0x25
    99ec:	56 a1       	ldd	r21, Z+38	; 0x26
    99ee:	67 a1       	ldd	r22, Z+39	; 0x27
    99f0:	70 a5       	ldd	r23, Z+40	; 0x28
    99f2:	c8 01       	movw	r24, r16
    99f4:	89 2f       	mov	r24, r25
    99f6:	99 27       	eor	r25, r25
    99f8:	86 95       	lsr	r24
    99fa:	48 0f       	add	r20, r24
    99fc:	59 1f       	adc	r21, r25
    99fe:	61 1d       	adc	r22, r1
    9a00:	71 1d       	adc	r23, r1
    9a02:	cf 01       	movw	r24, r30
    9a04:	b7 dc       	rcall	.-1682   	; 0x9374 <move_window>
    9a06:	5c 01       	movw	r10, r24
    9a08:	89 2b       	or	r24, r25
    9a0a:	09 f0       	breq	.+2      	; 0x9a0e <put_fat+0xf0>
    9a0c:	7c c0       	rjmp	.+248    	; 0x9b06 <put_fat+0x1e8>
    9a0e:	11 70       	andi	r17, 0x01	; 1
    9a10:	f1 01       	movw	r30, r2
    9a12:	e0 0f       	add	r30, r16
    9a14:	f1 1f       	adc	r31, r17
    9a16:	89 81       	ldd	r24, Y+1	; 0x01
    9a18:	9a 81       	ldd	r25, Y+2	; 0x02
    9a1a:	ab 81       	ldd	r26, Y+3	; 0x03
    9a1c:	bc 81       	ldd	r27, Y+4	; 0x04
    9a1e:	89 2b       	or	r24, r25
    9a20:	8a 2b       	or	r24, r26
    9a22:	8b 2b       	or	r24, r27
    9a24:	41 f0       	breq	.+16     	; 0x9a36 <put_fat+0x118>
    9a26:	54 e0       	ldi	r21, 0x04	; 4
    9a28:	76 94       	lsr	r7
    9a2a:	67 94       	ror	r6
    9a2c:	57 94       	ror	r5
    9a2e:	47 94       	ror	r4
    9a30:	5a 95       	dec	r21
    9a32:	d1 f7       	brne	.-12     	; 0x9a28 <put_fat+0x10a>
    9a34:	06 c0       	rjmp	.+12     	; 0x9a42 <put_fat+0x124>
    9a36:	00 81       	ld	r16, Z
    9a38:	00 7f       	andi	r16, 0xF0	; 240
    9a3a:	85 2d       	mov	r24, r5
    9a3c:	8f 70       	andi	r24, 0x0F	; 15
    9a3e:	40 2e       	mov	r4, r16
    9a40:	48 2a       	or	r4, r24
    9a42:	40 82       	st	Z, r4
    9a44:	58 c0       	rjmp	.+176    	; 0x9af6 <put_fat+0x1d8>
    9a46:	77 27       	eor	r23, r23
    9a48:	6f 2d       	mov	r22, r15
    9a4a:	5e 2d       	mov	r21, r14
    9a4c:	4d 2d       	mov	r20, r13
    9a4e:	ed 81       	ldd	r30, Y+5	; 0x05
    9a50:	fe 81       	ldd	r31, Y+6	; 0x06
    9a52:	85 a1       	ldd	r24, Z+37	; 0x25
    9a54:	96 a1       	ldd	r25, Z+38	; 0x26
    9a56:	a7 a1       	ldd	r26, Z+39	; 0x27
    9a58:	b0 a5       	ldd	r27, Z+40	; 0x28
    9a5a:	48 0f       	add	r20, r24
    9a5c:	59 1f       	adc	r21, r25
    9a5e:	6a 1f       	adc	r22, r26
    9a60:	7b 1f       	adc	r23, r27
    9a62:	cf 01       	movw	r24, r30
    9a64:	87 dc       	rcall	.-1778   	; 0x9374 <move_window>
    9a66:	5c 01       	movw	r10, r24
    9a68:	89 2b       	or	r24, r25
    9a6a:	09 f0       	breq	.+2      	; 0x9a6e <put_fat+0x150>
    9a6c:	4c c0       	rjmp	.+152    	; 0x9b06 <put_fat+0x1e8>
    9a6e:	ed 81       	ldd	r30, Y+5	; 0x05
    9a70:	fe 81       	ldd	r31, Y+6	; 0x06
    9a72:	f5 96       	adiw	r30, 0x35	; 53
    9a74:	cc 0c       	add	r12, r12
    9a76:	dd 1c       	adc	r13, r13
    9a78:	e8 94       	clt
    9a7a:	c0 f8       	bld	r12, 0
    9a7c:	21 e0       	ldi	r18, 0x01	; 1
    9a7e:	d2 22       	and	r13, r18
    9a80:	ec 0d       	add	r30, r12
    9a82:	fd 1d       	adc	r31, r13
    9a84:	40 82       	st	Z, r4
    9a86:	51 82       	std	Z+1, r5	; 0x01
    9a88:	36 c0       	rjmp	.+108    	; 0x9af6 <put_fat+0x1d8>
    9a8a:	ed 81       	ldd	r30, Y+5	; 0x05
    9a8c:	fe 81       	ldd	r31, Y+6	; 0x06
    9a8e:	85 a1       	ldd	r24, Z+37	; 0x25
    9a90:	96 a1       	ldd	r25, Z+38	; 0x26
    9a92:	a7 a1       	ldd	r26, Z+39	; 0x27
    9a94:	b0 a5       	ldd	r27, Z+40	; 0x28
    9a96:	27 e0       	ldi	r18, 0x07	; 7
    9a98:	76 95       	lsr	r23
    9a9a:	67 95       	ror	r22
    9a9c:	57 95       	ror	r21
    9a9e:	47 95       	ror	r20
    9aa0:	2a 95       	dec	r18
    9aa2:	d1 f7       	brne	.-12     	; 0x9a98 <put_fat+0x17a>
    9aa4:	48 0f       	add	r20, r24
    9aa6:	59 1f       	adc	r21, r25
    9aa8:	6a 1f       	adc	r22, r26
    9aaa:	7b 1f       	adc	r23, r27
    9aac:	cf 01       	movw	r24, r30
    9aae:	62 dc       	rcall	.-1852   	; 0x9374 <move_window>
    9ab0:	5c 01       	movw	r10, r24
    9ab2:	89 2b       	or	r24, r25
    9ab4:	41 f5       	brne	.+80     	; 0x9b06 <put_fat+0x1e8>
    9ab6:	4d 81       	ldd	r20, Y+5	; 0x05
    9ab8:	5e 81       	ldd	r21, Y+6	; 0x06
    9aba:	4b 5c       	subi	r20, 0xCB	; 203
    9abc:	5f 4f       	sbci	r21, 0xFF	; 255
    9abe:	cc 0c       	add	r12, r12
    9ac0:	dd 1c       	adc	r13, r13
    9ac2:	cc 0c       	add	r12, r12
    9ac4:	dd 1c       	adc	r13, r13
    9ac6:	fc ef       	ldi	r31, 0xFC	; 252
    9ac8:	cf 22       	and	r12, r31
    9aca:	f1 e0       	ldi	r31, 0x01	; 1
    9acc:	df 22       	and	r13, r31
    9ace:	c4 0e       	add	r12, r20
    9ad0:	d5 1e       	adc	r13, r21
    9ad2:	c6 01       	movw	r24, r12
    9ad4:	8d d8       	rcall	.-3814   	; 0x8bf0 <ld_dword>
    9ad6:	2f e0       	ldi	r18, 0x0F	; 15
    9ad8:	72 22       	and	r7, r18
    9ada:	dc 01       	movw	r26, r24
    9adc:	cb 01       	movw	r24, r22
    9ade:	88 27       	eor	r24, r24
    9ae0:	99 27       	eor	r25, r25
    9ae2:	aa 27       	eor	r26, r26
    9ae4:	b0 7f       	andi	r27, 0xF0	; 240
    9ae6:	b3 01       	movw	r22, r6
    9ae8:	a2 01       	movw	r20, r4
    9aea:	48 2b       	or	r20, r24
    9aec:	59 2b       	or	r21, r25
    9aee:	6a 2b       	or	r22, r26
    9af0:	7b 2b       	or	r23, r27
    9af2:	c6 01       	movw	r24, r12
    9af4:	92 d8       	rcall	.-3804   	; 0x8c1a <st_dword>
    9af6:	81 e0       	ldi	r24, 0x01	; 1
    9af8:	ed 81       	ldd	r30, Y+5	; 0x05
    9afa:	fe 81       	ldd	r31, Y+6	; 0x06
    9afc:	83 83       	std	Z+3, r24	; 0x03
    9afe:	03 c0       	rjmp	.+6      	; 0x9b06 <put_fat+0x1e8>
    9b00:	82 e0       	ldi	r24, 0x02	; 2
    9b02:	a8 2e       	mov	r10, r24
    9b04:	b1 2c       	mov	r11, r1
    9b06:	c5 01       	movw	r24, r10
    9b08:	26 96       	adiw	r28, 0x06	; 6
    9b0a:	e2 e1       	ldi	r30, 0x12	; 18
    9b0c:	0c 94 25 e3 	jmp	0x1c64a	; 0x1c64a <__epilogue_restores__>

00009b10 <get_fat.isra.9>:
    9b10:	a0 e0       	ldi	r26, 0x00	; 0
    9b12:	b0 e0       	ldi	r27, 0x00	; 0
    9b14:	ee e8       	ldi	r30, 0x8E	; 142
    9b16:	fd e4       	ldi	r31, 0x4D	; 77
    9b18:	0c 94 11 e3 	jmp	0x1c622	; 0x1c622 <__prologue_saves__+0x10>
    9b1c:	42 30       	cpi	r20, 0x02	; 2
    9b1e:	51 05       	cpc	r21, r1
    9b20:	61 05       	cpc	r22, r1
    9b22:	71 05       	cpc	r23, r1
    9b24:	08 f4       	brcc	.+2      	; 0x9b28 <get_fat.isra.9+0x18>
    9b26:	9f c0       	rjmp	.+318    	; 0x9c66 <get_fat.isra.9+0x156>
    9b28:	fc 01       	movw	r30, r24
    9b2a:	01 8d       	ldd	r16, Z+25	; 0x19
    9b2c:	12 8d       	ldd	r17, Z+26	; 0x1a
    9b2e:	23 8d       	ldd	r18, Z+27	; 0x1b
    9b30:	34 8d       	ldd	r19, Z+28	; 0x1c
    9b32:	40 17       	cp	r20, r16
    9b34:	51 07       	cpc	r21, r17
    9b36:	62 07       	cpc	r22, r18
    9b38:	73 07       	cpc	r23, r19
    9b3a:	08 f0       	brcs	.+2      	; 0x9b3e <get_fat.isra.9+0x2e>
    9b3c:	94 c0       	rjmp	.+296    	; 0x9c66 <get_fat.isra.9+0x156>
    9b3e:	6a 01       	movw	r12, r20
    9b40:	7b 01       	movw	r14, r22
    9b42:	8c 01       	movw	r16, r24
    9b44:	80 81       	ld	r24, Z
    9b46:	82 30       	cpi	r24, 0x02	; 2
    9b48:	09 f4       	brne	.+2      	; 0x9b4c <get_fat.isra.9+0x3c>
    9b4a:	4b c0       	rjmp	.+150    	; 0x9be2 <get_fat.isra.9+0xd2>
    9b4c:	83 30       	cpi	r24, 0x03	; 3
    9b4e:	09 f4       	brne	.+2      	; 0x9b52 <get_fat.isra.9+0x42>
    9b50:	67 c0       	rjmp	.+206    	; 0x9c20 <get_fat.isra.9+0x110>
    9b52:	81 30       	cpi	r24, 0x01	; 1
    9b54:	09 f0       	breq	.+2      	; 0x9b58 <get_fat.isra.9+0x48>
    9b56:	87 c0       	rjmp	.+270    	; 0x9c66 <get_fat.isra.9+0x156>
    9b58:	ea 01       	movw	r28, r20
    9b5a:	d6 95       	lsr	r29
    9b5c:	c7 95       	ror	r28
    9b5e:	cc 0d       	add	r28, r12
    9b60:	dd 1d       	adc	r29, r13
    9b62:	ce 01       	movw	r24, r28
    9b64:	89 2f       	mov	r24, r25
    9b66:	99 27       	eor	r25, r25
    9b68:	86 95       	lsr	r24
    9b6a:	45 a1       	ldd	r20, Z+37	; 0x25
    9b6c:	56 a1       	ldd	r21, Z+38	; 0x26
    9b6e:	67 a1       	ldd	r22, Z+39	; 0x27
    9b70:	70 a5       	ldd	r23, Z+40	; 0x28
    9b72:	48 0f       	add	r20, r24
    9b74:	59 1f       	adc	r21, r25
    9b76:	61 1d       	adc	r22, r1
    9b78:	71 1d       	adc	r23, r1
    9b7a:	cf 01       	movw	r24, r30
    9b7c:	fb db       	rcall	.-2058   	; 0x9374 <move_window>
    9b7e:	89 2b       	or	r24, r25
    9b80:	21 f0       	breq	.+8      	; 0x9b8a <get_fat.isra.9+0x7a>
    9b82:	6f ef       	ldi	r22, 0xFF	; 255
    9b84:	7f ef       	ldi	r23, 0xFF	; 255
    9b86:	cb 01       	movw	r24, r22
    9b88:	72 c0       	rjmp	.+228    	; 0x9c6e <get_fat.isra.9+0x15e>
    9b8a:	5e 01       	movw	r10, r28
    9b8c:	ff ef       	ldi	r31, 0xFF	; 255
    9b8e:	af 1a       	sub	r10, r31
    9b90:	bf 0a       	sbc	r11, r31
    9b92:	d1 70       	andi	r29, 0x01	; 1
    9b94:	c0 0f       	add	r28, r16
    9b96:	d1 1f       	adc	r29, r17
    9b98:	cd a9       	ldd	r28, Y+53	; 0x35
    9b9a:	c5 01       	movw	r24, r10
    9b9c:	89 2f       	mov	r24, r25
    9b9e:	99 27       	eor	r25, r25
    9ba0:	86 95       	lsr	r24
    9ba2:	f8 01       	movw	r30, r16
    9ba4:	45 a1       	ldd	r20, Z+37	; 0x25
    9ba6:	56 a1       	ldd	r21, Z+38	; 0x26
    9ba8:	67 a1       	ldd	r22, Z+39	; 0x27
    9baa:	70 a5       	ldd	r23, Z+40	; 0x28
    9bac:	48 0f       	add	r20, r24
    9bae:	59 1f       	adc	r21, r25
    9bb0:	61 1d       	adc	r22, r1
    9bb2:	71 1d       	adc	r23, r1
    9bb4:	c8 01       	movw	r24, r16
    9bb6:	de db       	rcall	.-2116   	; 0x9374 <move_window>
    9bb8:	89 2b       	or	r24, r25
    9bba:	19 f7       	brne	.-58     	; 0x9b82 <get_fat.isra.9+0x72>
    9bbc:	f1 e0       	ldi	r31, 0x01	; 1
    9bbe:	bf 22       	and	r11, r31
    9bc0:	f8 01       	movw	r30, r16
    9bc2:	ea 0d       	add	r30, r10
    9bc4:	fb 1d       	adc	r31, r11
    9bc6:	85 a9       	ldd	r24, Z+53	; 0x35
    9bc8:	6c 2f       	mov	r22, r28
    9bca:	70 e0       	ldi	r23, 0x00	; 0
    9bcc:	78 2b       	or	r23, r24
    9bce:	c0 fe       	sbrs	r12, 0
    9bd0:	06 c0       	rjmp	.+12     	; 0x9bde <get_fat.isra.9+0xce>
    9bd2:	54 e0       	ldi	r21, 0x04	; 4
    9bd4:	76 95       	lsr	r23
    9bd6:	67 95       	ror	r22
    9bd8:	5a 95       	dec	r21
    9bda:	e1 f7       	brne	.-8      	; 0x9bd4 <get_fat.isra.9+0xc4>
    9bdc:	1e c0       	rjmp	.+60     	; 0x9c1a <get_fat.isra.9+0x10a>
    9bde:	7f 70       	andi	r23, 0x0F	; 15
    9be0:	1c c0       	rjmp	.+56     	; 0x9c1a <get_fat.isra.9+0x10a>
    9be2:	77 27       	eor	r23, r23
    9be4:	6f 2d       	mov	r22, r15
    9be6:	5e 2d       	mov	r21, r14
    9be8:	4d 2d       	mov	r20, r13
    9bea:	85 a1       	ldd	r24, Z+37	; 0x25
    9bec:	96 a1       	ldd	r25, Z+38	; 0x26
    9bee:	a7 a1       	ldd	r26, Z+39	; 0x27
    9bf0:	b0 a5       	ldd	r27, Z+40	; 0x28
    9bf2:	48 0f       	add	r20, r24
    9bf4:	59 1f       	adc	r21, r25
    9bf6:	6a 1f       	adc	r22, r26
    9bf8:	7b 1f       	adc	r23, r27
    9bfa:	cf 01       	movw	r24, r30
    9bfc:	bb db       	rcall	.-2186   	; 0x9374 <move_window>
    9bfe:	89 2b       	or	r24, r25
    9c00:	09 f0       	breq	.+2      	; 0x9c04 <get_fat.isra.9+0xf4>
    9c02:	bf cf       	rjmp	.-130    	; 0x9b82 <get_fat.isra.9+0x72>
    9c04:	cc 0c       	add	r12, r12
    9c06:	dd 1c       	adc	r13, r13
    9c08:	e8 94       	clt
    9c0a:	c0 f8       	bld	r12, 0
    9c0c:	f1 e0       	ldi	r31, 0x01	; 1
    9c0e:	df 22       	and	r13, r31
    9c10:	f8 01       	movw	r30, r16
    9c12:	ec 0d       	add	r30, r12
    9c14:	fd 1d       	adc	r31, r13
    9c16:	65 a9       	ldd	r22, Z+53	; 0x35
    9c18:	76 a9       	ldd	r23, Z+54	; 0x36
    9c1a:	80 e0       	ldi	r24, 0x00	; 0
    9c1c:	90 e0       	ldi	r25, 0x00	; 0
    9c1e:	27 c0       	rjmp	.+78     	; 0x9c6e <get_fat.isra.9+0x15e>
    9c20:	85 a1       	ldd	r24, Z+37	; 0x25
    9c22:	96 a1       	ldd	r25, Z+38	; 0x26
    9c24:	a7 a1       	ldd	r26, Z+39	; 0x27
    9c26:	b0 a5       	ldd	r27, Z+40	; 0x28
    9c28:	27 e0       	ldi	r18, 0x07	; 7
    9c2a:	76 95       	lsr	r23
    9c2c:	67 95       	ror	r22
    9c2e:	57 95       	ror	r21
    9c30:	47 95       	ror	r20
    9c32:	2a 95       	dec	r18
    9c34:	d1 f7       	brne	.-12     	; 0x9c2a <get_fat.isra.9+0x11a>
    9c36:	48 0f       	add	r20, r24
    9c38:	59 1f       	adc	r21, r25
    9c3a:	6a 1f       	adc	r22, r26
    9c3c:	7b 1f       	adc	r23, r27
    9c3e:	cf 01       	movw	r24, r30
    9c40:	99 db       	rcall	.-2254   	; 0x9374 <move_window>
    9c42:	89 2b       	or	r24, r25
    9c44:	09 f0       	breq	.+2      	; 0x9c48 <get_fat.isra.9+0x138>
    9c46:	9d cf       	rjmp	.-198    	; 0x9b82 <get_fat.isra.9+0x72>
    9c48:	0b 5c       	subi	r16, 0xCB	; 203
    9c4a:	1f 4f       	sbci	r17, 0xFF	; 255
    9c4c:	cc 0c       	add	r12, r12
    9c4e:	dd 1c       	adc	r13, r13
    9c50:	cc 0c       	add	r12, r12
    9c52:	dd 1c       	adc	r13, r13
    9c54:	c6 01       	movw	r24, r12
    9c56:	8c 7f       	andi	r24, 0xFC	; 252
    9c58:	91 70       	andi	r25, 0x01	; 1
    9c5a:	80 0f       	add	r24, r16
    9c5c:	91 1f       	adc	r25, r17
    9c5e:	0e 94 f8 45 	call	0x8bf0	; 0x8bf0 <ld_dword>
    9c62:	9f 70       	andi	r25, 0x0F	; 15
    9c64:	04 c0       	rjmp	.+8      	; 0x9c6e <get_fat.isra.9+0x15e>
    9c66:	61 e0       	ldi	r22, 0x01	; 1
    9c68:	70 e0       	ldi	r23, 0x00	; 0
    9c6a:	80 e0       	ldi	r24, 0x00	; 0
    9c6c:	90 e0       	ldi	r25, 0x00	; 0
    9c6e:	cd b7       	in	r28, 0x3d	; 61
    9c70:	de b7       	in	r29, 0x3e	; 62
    9c72:	ea e0       	ldi	r30, 0x0A	; 10
    9c74:	0c 94 2d e3 	jmp	0x1c65a	; 0x1c65a <__epilogue_restores__+0x10>

00009c78 <dir_sdi>:
    9c78:	a0 e0       	ldi	r26, 0x00	; 0
    9c7a:	b0 e0       	ldi	r27, 0x00	; 0
    9c7c:	e2 e4       	ldi	r30, 0x42	; 66
    9c7e:	fe e4       	ldi	r31, 0x4E	; 78
    9c80:	0c 94 0b e3 	jmp	0x1c616	; 0x1c616 <__prologue_saves__+0x4>
    9c84:	ec 01       	movw	r28, r24
    9c86:	6a 01       	movw	r12, r20
    9c88:	7b 01       	movw	r14, r22
    9c8a:	41 15       	cp	r20, r1
    9c8c:	51 05       	cpc	r21, r1
    9c8e:	80 e2       	ldi	r24, 0x20	; 32
    9c90:	68 07       	cpc	r22, r24
    9c92:	71 05       	cpc	r23, r1
    9c94:	18 f0       	brcs	.+6      	; 0x9c9c <dir_sdi+0x24>
    9c96:	82 e0       	ldi	r24, 0x02	; 2
    9c98:	90 e0       	ldi	r25, 0x00	; 0
    9c9a:	aa c0       	rjmp	.+340    	; 0x9df0 <dir_sdi+0x178>
    9c9c:	db 01       	movw	r26, r22
    9c9e:	ca 01       	movw	r24, r20
    9ca0:	8f 71       	andi	r24, 0x1F	; 31
    9ca2:	99 27       	eor	r25, r25
    9ca4:	aa 27       	eor	r26, r26
    9ca6:	bb 27       	eor	r27, r27
    9ca8:	89 2b       	or	r24, r25
    9caa:	8a 2b       	or	r24, r26
    9cac:	8b 2b       	or	r24, r27
    9cae:	99 f7       	brne	.-26     	; 0x9c96 <dir_sdi+0x1e>
    9cb0:	08 81       	ld	r16, Y
    9cb2:	19 81       	ldd	r17, Y+1	; 0x01
    9cb4:	4e 87       	std	Y+14, r20	; 0x0e
    9cb6:	5f 87       	std	Y+15, r21	; 0x0f
    9cb8:	68 8b       	std	Y+16, r22	; 0x10
    9cba:	79 8b       	std	Y+17, r23	; 0x11
    9cbc:	8e 80       	ldd	r8, Y+6	; 0x06
    9cbe:	9f 80       	ldd	r9, Y+7	; 0x07
    9cc0:	a8 84       	ldd	r10, Y+8	; 0x08
    9cc2:	b9 84       	ldd	r11, Y+9	; 0x09
    9cc4:	81 14       	cp	r8, r1
    9cc6:	91 04       	cpc	r9, r1
    9cc8:	a1 04       	cpc	r10, r1
    9cca:	b1 04       	cpc	r11, r1
    9ccc:	51 f5       	brne	.+84     	; 0x9d22 <dir_sdi+0xaa>
    9cce:	f8 01       	movw	r30, r16
    9cd0:	80 81       	ld	r24, Z
    9cd2:	83 30       	cpi	r24, 0x03	; 3
    9cd4:	40 f0       	brcs	.+16     	; 0x9ce6 <dir_sdi+0x6e>
    9cd6:	81 a5       	ldd	r24, Z+41	; 0x29
    9cd8:	92 a5       	ldd	r25, Z+42	; 0x2a
    9cda:	a3 a5       	ldd	r26, Z+43	; 0x2b
    9cdc:	b4 a5       	ldd	r27, Z+44	; 0x2c
    9cde:	00 97       	sbiw	r24, 0x00	; 0
    9ce0:	a1 05       	cpc	r26, r1
    9ce2:	b1 05       	cpc	r27, r1
    9ce4:	e1 f4       	brne	.+56     	; 0x9d1e <dir_sdi+0xa6>
    9ce6:	f8 01       	movw	r30, r16
    9ce8:	87 81       	ldd	r24, Z+7	; 0x07
    9cea:	90 85       	ldd	r25, Z+8	; 0x08
    9cec:	a0 e0       	ldi	r26, 0x00	; 0
    9cee:	b0 e0       	ldi	r27, 0x00	; 0
    9cf0:	b7 01       	movw	r22, r14
    9cf2:	a6 01       	movw	r20, r12
    9cf4:	25 e0       	ldi	r18, 0x05	; 5
    9cf6:	76 95       	lsr	r23
    9cf8:	67 95       	ror	r22
    9cfa:	57 95       	ror	r21
    9cfc:	47 95       	ror	r20
    9cfe:	2a 95       	dec	r18
    9d00:	d1 f7       	brne	.-12     	; 0x9cf6 <dir_sdi+0x7e>
    9d02:	48 17       	cp	r20, r24
    9d04:	59 07       	cpc	r21, r25
    9d06:	6a 07       	cpc	r22, r26
    9d08:	7b 07       	cpc	r23, r27
    9d0a:	28 f6       	brcc	.-118    	; 0x9c96 <dir_sdi+0x1e>
    9d0c:	81 a5       	ldd	r24, Z+41	; 0x29
    9d0e:	92 a5       	ldd	r25, Z+42	; 0x2a
    9d10:	a3 a5       	ldd	r26, Z+43	; 0x2b
    9d12:	b4 a5       	ldd	r27, Z+44	; 0x2c
    9d14:	8e 8b       	std	Y+22, r24	; 0x16
    9d16:	9f 8b       	std	Y+23, r25	; 0x17
    9d18:	a8 8f       	std	Y+24, r26	; 0x18
    9d1a:	b9 8f       	std	Y+25, r27	; 0x19
    9d1c:	3e c0       	rjmp	.+124    	; 0x9d9a <dir_sdi+0x122>
    9d1e:	4c 01       	movw	r8, r24
    9d20:	5d 01       	movw	r10, r26
    9d22:	f8 01       	movw	r30, r16
    9d24:	41 84       	ldd	r4, Z+9	; 0x09
    9d26:	52 84       	ldd	r5, Z+10	; 0x0a
    9d28:	61 2c       	mov	r6, r1
    9d2a:	71 2c       	mov	r7, r1
    9d2c:	39 e0       	ldi	r19, 0x09	; 9
    9d2e:	44 0c       	add	r4, r4
    9d30:	55 1c       	adc	r5, r5
    9d32:	66 1c       	adc	r6, r6
    9d34:	77 1c       	adc	r7, r7
    9d36:	3a 95       	dec	r19
    9d38:	d1 f7       	brne	.-12     	; 0x9d2e <dir_sdi+0xb6>
    9d3a:	b5 01       	movw	r22, r10
    9d3c:	a4 01       	movw	r20, r8
    9d3e:	c4 14       	cp	r12, r4
    9d40:	d5 04       	cpc	r13, r5
    9d42:	e6 04       	cpc	r14, r6
    9d44:	f7 04       	cpc	r15, r7
    9d46:	10 f1       	brcs	.+68     	; 0x9d8c <dir_sdi+0x114>
    9d48:	88 81       	ld	r24, Y
    9d4a:	99 81       	ldd	r25, Y+1	; 0x01
    9d4c:	e1 de       	rcall	.-574    	; 0x9b10 <get_fat.isra.9>
    9d4e:	4b 01       	movw	r8, r22
    9d50:	5c 01       	movw	r10, r24
    9d52:	6f 3f       	cpi	r22, 0xFF	; 255
    9d54:	7f 4f       	sbci	r23, 0xFF	; 255
    9d56:	8f 4f       	sbci	r24, 0xFF	; 255
    9d58:	9f 4f       	sbci	r25, 0xFF	; 255
    9d5a:	09 f4       	brne	.+2      	; 0x9d5e <dir_sdi+0xe6>
    9d5c:	47 c0       	rjmp	.+142    	; 0x9dec <dir_sdi+0x174>
    9d5e:	82 e0       	ldi	r24, 0x02	; 2
    9d60:	88 16       	cp	r8, r24
    9d62:	91 04       	cpc	r9, r1
    9d64:	a1 04       	cpc	r10, r1
    9d66:	b1 04       	cpc	r11, r1
    9d68:	08 f4       	brcc	.+2      	; 0x9d6c <dir_sdi+0xf4>
    9d6a:	95 cf       	rjmp	.-214    	; 0x9c96 <dir_sdi+0x1e>
    9d6c:	f8 01       	movw	r30, r16
    9d6e:	81 8d       	ldd	r24, Z+25	; 0x19
    9d70:	92 8d       	ldd	r25, Z+26	; 0x1a
    9d72:	a3 8d       	ldd	r26, Z+27	; 0x1b
    9d74:	b4 8d       	ldd	r27, Z+28	; 0x1c
    9d76:	88 16       	cp	r8, r24
    9d78:	99 06       	cpc	r9, r25
    9d7a:	aa 06       	cpc	r10, r26
    9d7c:	bb 06       	cpc	r11, r27
    9d7e:	08 f0       	brcs	.+2      	; 0x9d82 <dir_sdi+0x10a>
    9d80:	8a cf       	rjmp	.-236    	; 0x9c96 <dir_sdi+0x1e>
    9d82:	c4 18       	sub	r12, r4
    9d84:	d5 08       	sbc	r13, r5
    9d86:	e6 08       	sbc	r14, r6
    9d88:	f7 08       	sbc	r15, r7
    9d8a:	d7 cf       	rjmp	.-82     	; 0x9d3a <dir_sdi+0xc2>
    9d8c:	c8 01       	movw	r24, r16
    9d8e:	0e 94 2b 46 	call	0x8c56	; 0x8c56 <clst2sect>
    9d92:	6e 8b       	std	Y+22, r22	; 0x16
    9d94:	7f 8b       	std	Y+23, r23	; 0x17
    9d96:	88 8f       	std	Y+24, r24	; 0x18
    9d98:	99 8f       	std	Y+25, r25	; 0x19
    9d9a:	8a 8a       	std	Y+18, r8	; 0x12
    9d9c:	9b 8a       	std	Y+19, r9	; 0x13
    9d9e:	ac 8a       	std	Y+20, r10	; 0x14
    9da0:	bd 8a       	std	Y+21, r11	; 0x15
    9da2:	8e 89       	ldd	r24, Y+22	; 0x16
    9da4:	9f 89       	ldd	r25, Y+23	; 0x17
    9da6:	a8 8d       	ldd	r26, Y+24	; 0x18
    9da8:	b9 8d       	ldd	r27, Y+25	; 0x19
    9daa:	00 97       	sbiw	r24, 0x00	; 0
    9dac:	a1 05       	cpc	r26, r1
    9dae:	b1 05       	cpc	r27, r1
    9db0:	09 f4       	brne	.+2      	; 0x9db4 <dir_sdi+0x13c>
    9db2:	71 cf       	rjmp	.-286    	; 0x9c96 <dir_sdi+0x1e>
    9db4:	b7 01       	movw	r22, r14
    9db6:	a6 01       	movw	r20, r12
    9db8:	29 e0       	ldi	r18, 0x09	; 9
    9dba:	76 95       	lsr	r23
    9dbc:	67 95       	ror	r22
    9dbe:	57 95       	ror	r21
    9dc0:	47 95       	ror	r20
    9dc2:	2a 95       	dec	r18
    9dc4:	d1 f7       	brne	.-12     	; 0x9dba <dir_sdi+0x142>
    9dc6:	84 0f       	add	r24, r20
    9dc8:	95 1f       	adc	r25, r21
    9dca:	a6 1f       	adc	r26, r22
    9dcc:	b7 1f       	adc	r27, r23
    9dce:	8e 8b       	std	Y+22, r24	; 0x16
    9dd0:	9f 8b       	std	Y+23, r25	; 0x17
    9dd2:	a8 8f       	std	Y+24, r26	; 0x18
    9dd4:	b9 8f       	std	Y+25, r27	; 0x19
    9dd6:	0b 5c       	subi	r16, 0xCB	; 203
    9dd8:	1f 4f       	sbci	r17, 0xFF	; 255
    9dda:	f1 e0       	ldi	r31, 0x01	; 1
    9ddc:	df 22       	and	r13, r31
    9dde:	c0 0e       	add	r12, r16
    9de0:	d1 1e       	adc	r13, r17
    9de2:	db 8e       	std	Y+27, r13	; 0x1b
    9de4:	ca 8e       	std	Y+26, r12	; 0x1a
    9de6:	80 e0       	ldi	r24, 0x00	; 0
    9de8:	90 e0       	ldi	r25, 0x00	; 0
    9dea:	02 c0       	rjmp	.+4      	; 0x9df0 <dir_sdi+0x178>
    9dec:	81 e0       	ldi	r24, 0x01	; 1
    9dee:	90 e0       	ldi	r25, 0x00	; 0
    9df0:	cd b7       	in	r28, 0x3d	; 61
    9df2:	de b7       	in	r29, 0x3e	; 62
    9df4:	e0 e1       	ldi	r30, 0x10	; 16
    9df6:	0c 94 27 e3 	jmp	0x1c64e	; 0x1c64e <__epilogue_restores__+0x4>

00009dfa <create_chain>:
    9dfa:	a0 e0       	ldi	r26, 0x00	; 0
    9dfc:	b0 e0       	ldi	r27, 0x00	; 0
    9dfe:	e3 e0       	ldi	r30, 0x03	; 3
    9e00:	ff e4       	ldi	r31, 0x4F	; 79
    9e02:	0c 94 0b e3 	jmp	0x1c616	; 0x1c616 <__prologue_saves__+0x4>
    9e06:	8c 01       	movw	r16, r24
    9e08:	2a 01       	movw	r4, r20
    9e0a:	3b 01       	movw	r6, r22
    9e0c:	fc 01       	movw	r30, r24
    9e0e:	c0 81       	ld	r28, Z
    9e10:	d1 81       	ldd	r29, Z+1	; 0x01
    9e12:	41 15       	cp	r20, r1
    9e14:	51 05       	cpc	r21, r1
    9e16:	61 05       	cpc	r22, r1
    9e18:	71 05       	cpc	r23, r1
    9e1a:	99 f4       	brne	.+38     	; 0x9e42 <create_chain+0x48>
    9e1c:	8d 84       	ldd	r8, Y+13	; 0x0d
    9e1e:	9e 84       	ldd	r9, Y+14	; 0x0e
    9e20:	af 84       	ldd	r10, Y+15	; 0x0f
    9e22:	b8 88       	ldd	r11, Y+16	; 0x10
    9e24:	81 14       	cp	r8, r1
    9e26:	91 04       	cpc	r9, r1
    9e28:	a1 04       	cpc	r10, r1
    9e2a:	b1 04       	cpc	r11, r1
    9e2c:	51 f1       	breq	.+84     	; 0x9e82 <create_chain+0x88>
    9e2e:	89 8d       	ldd	r24, Y+25	; 0x19
    9e30:	9a 8d       	ldd	r25, Y+26	; 0x1a
    9e32:	ab 8d       	ldd	r26, Y+27	; 0x1b
    9e34:	bc 8d       	ldd	r27, Y+28	; 0x1c
    9e36:	88 16       	cp	r8, r24
    9e38:	99 06       	cpc	r9, r25
    9e3a:	aa 06       	cpc	r10, r26
    9e3c:	bb 06       	cpc	r11, r27
    9e3e:	28 f1       	brcs	.+74     	; 0x9e8a <create_chain+0x90>
    9e40:	20 c0       	rjmp	.+64     	; 0x9e82 <create_chain+0x88>
    9e42:	ce 01       	movw	r24, r28
    9e44:	65 de       	rcall	.-822    	; 0x9b10 <get_fat.isra.9>
    9e46:	62 30       	cpi	r22, 0x02	; 2
    9e48:	71 05       	cpc	r23, r1
    9e4a:	81 05       	cpc	r24, r1
    9e4c:	91 05       	cpc	r25, r1
    9e4e:	08 f4       	brcc	.+2      	; 0x9e52 <create_chain+0x58>
    9e50:	ea c0       	rjmp	.+468    	; 0xa026 <create_chain+0x22c>
    9e52:	6f 3f       	cpi	r22, 0xFF	; 255
    9e54:	ff ef       	ldi	r31, 0xFF	; 255
    9e56:	7f 07       	cpc	r23, r31
    9e58:	8f 07       	cpc	r24, r31
    9e5a:	9f 07       	cpc	r25, r31
    9e5c:	29 f4       	brne	.+10     	; 0x9e68 <create_chain+0x6e>
    9e5e:	4f ef       	ldi	r20, 0xFF	; 255
    9e60:	3f ef       	ldi	r19, 0xFF	; 255
    9e62:	2f ef       	ldi	r18, 0xFF	; 255
    9e64:	9f ef       	ldi	r25, 0xFF	; 255
    9e66:	e7 c0       	rjmp	.+462    	; 0xa036 <create_chain+0x23c>
    9e68:	c9 8c       	ldd	r12, Y+25	; 0x19
    9e6a:	da 8c       	ldd	r13, Y+26	; 0x1a
    9e6c:	eb 8c       	ldd	r14, Y+27	; 0x1b
    9e6e:	fc 8c       	ldd	r15, Y+28	; 0x1c
    9e70:	6c 15       	cp	r22, r12
    9e72:	7d 05       	cpc	r23, r13
    9e74:	8e 05       	cpc	r24, r14
    9e76:	9f 05       	cpc	r25, r15
    9e78:	08 f4       	brcc	.+2      	; 0x9e7c <create_chain+0x82>
    9e7a:	da c0       	rjmp	.+436    	; 0xa030 <create_chain+0x236>
    9e7c:	53 01       	movw	r10, r6
    9e7e:	42 01       	movw	r8, r4
    9e80:	04 c0       	rjmp	.+8      	; 0x9e8a <create_chain+0x90>
    9e82:	81 2c       	mov	r8, r1
    9e84:	91 2c       	mov	r9, r1
    9e86:	54 01       	movw	r10, r8
    9e88:	83 94       	inc	r8
    9e8a:	89 89       	ldd	r24, Y+17	; 0x11
    9e8c:	9a 89       	ldd	r25, Y+18	; 0x12
    9e8e:	ab 89       	ldd	r26, Y+19	; 0x13
    9e90:	bc 89       	ldd	r27, Y+20	; 0x14
    9e92:	89 2b       	or	r24, r25
    9e94:	8a 2b       	or	r24, r26
    9e96:	8b 2b       	or	r24, r27
    9e98:	11 f4       	brne	.+4      	; 0x9e9e <create_chain+0xa4>
    9e9a:	40 e0       	ldi	r20, 0x00	; 0
    9e9c:	c5 c0       	rjmp	.+394    	; 0xa028 <create_chain+0x22e>
    9e9e:	84 14       	cp	r8, r4
    9ea0:	95 04       	cpc	r9, r5
    9ea2:	a6 04       	cpc	r10, r6
    9ea4:	b7 04       	cpc	r11, r7
    9ea6:	09 f0       	breq	.+2      	; 0x9eaa <create_chain+0xb0>
    9ea8:	46 c0       	rjmp	.+140    	; 0x9f36 <create_chain+0x13c>
    9eaa:	75 01       	movw	r14, r10
    9eac:	64 01       	movw	r12, r8
    9eae:	2f ef       	ldi	r18, 0xFF	; 255
    9eb0:	c2 1a       	sub	r12, r18
    9eb2:	d2 0a       	sbc	r13, r18
    9eb4:	e2 0a       	sbc	r14, r18
    9eb6:	f2 0a       	sbc	r15, r18
    9eb8:	89 8d       	ldd	r24, Y+25	; 0x19
    9eba:	9a 8d       	ldd	r25, Y+26	; 0x1a
    9ebc:	ab 8d       	ldd	r26, Y+27	; 0x1b
    9ebe:	bc 8d       	ldd	r27, Y+28	; 0x1c
    9ec0:	c8 16       	cp	r12, r24
    9ec2:	d9 06       	cpc	r13, r25
    9ec4:	ea 06       	cpc	r14, r26
    9ec6:	fb 06       	cpc	r15, r27
    9ec8:	28 f0       	brcs	.+10     	; 0x9ed4 <create_chain+0xda>
    9eca:	92 e0       	ldi	r25, 0x02	; 2
    9ecc:	c9 2e       	mov	r12, r25
    9ece:	d1 2c       	mov	r13, r1
    9ed0:	e1 2c       	mov	r14, r1
    9ed2:	f1 2c       	mov	r15, r1
    9ed4:	b7 01       	movw	r22, r14
    9ed6:	a6 01       	movw	r20, r12
    9ed8:	f8 01       	movw	r30, r16
    9eda:	80 81       	ld	r24, Z
    9edc:	91 81       	ldd	r25, Z+1	; 0x01
    9ede:	18 de       	rcall	.-976    	; 0x9b10 <get_fat.isra.9>
    9ee0:	61 30       	cpi	r22, 0x01	; 1
    9ee2:	71 05       	cpc	r23, r1
    9ee4:	81 05       	cpc	r24, r1
    9ee6:	91 05       	cpc	r25, r1
    9ee8:	09 f4       	brne	.+2      	; 0x9eec <create_chain+0xf2>
    9eea:	9d c0       	rjmp	.+314    	; 0xa026 <create_chain+0x22c>
    9eec:	6f 3f       	cpi	r22, 0xFF	; 255
    9eee:	ff ef       	ldi	r31, 0xFF	; 255
    9ef0:	7f 07       	cpc	r23, r31
    9ef2:	8f 07       	cpc	r24, r31
    9ef4:	9f 07       	cpc	r25, r31
    9ef6:	09 f4       	brne	.+2      	; 0x9efa <create_chain+0x100>
    9ef8:	b2 cf       	rjmp	.-156    	; 0x9e5e <create_chain+0x64>
    9efa:	67 2b       	or	r22, r23
    9efc:	68 2b       	or	r22, r24
    9efe:	69 2b       	or	r22, r25
    9f00:	a9 f0       	breq	.+42     	; 0x9f2c <create_chain+0x132>
    9f02:	8d 85       	ldd	r24, Y+13	; 0x0d
    9f04:	9e 85       	ldd	r25, Y+14	; 0x0e
    9f06:	af 85       	ldd	r26, Y+15	; 0x0f
    9f08:	b8 89       	ldd	r27, Y+16	; 0x10
    9f0a:	82 30       	cpi	r24, 0x02	; 2
    9f0c:	91 05       	cpc	r25, r1
    9f0e:	a1 05       	cpc	r26, r1
    9f10:	b1 05       	cpc	r27, r1
    9f12:	88 f0       	brcs	.+34     	; 0x9f36 <create_chain+0x13c>
    9f14:	49 8d       	ldd	r20, Y+25	; 0x19
    9f16:	5a 8d       	ldd	r21, Y+26	; 0x1a
    9f18:	6b 8d       	ldd	r22, Y+27	; 0x1b
    9f1a:	7c 8d       	ldd	r23, Y+28	; 0x1c
    9f1c:	84 17       	cp	r24, r20
    9f1e:	95 07       	cpc	r25, r21
    9f20:	a6 07       	cpc	r26, r22
    9f22:	b7 07       	cpc	r27, r23
    9f24:	40 f4       	brcc	.+16     	; 0x9f36 <create_chain+0x13c>
    9f26:	4c 01       	movw	r8, r24
    9f28:	5d 01       	movw	r10, r26
    9f2a:	05 c0       	rjmp	.+10     	; 0x9f36 <create_chain+0x13c>
    9f2c:	c1 14       	cp	r12, r1
    9f2e:	d1 04       	cpc	r13, r1
    9f30:	e1 04       	cpc	r14, r1
    9f32:	f1 04       	cpc	r15, r1
    9f34:	c9 f5       	brne	.+114    	; 0x9fa8 <create_chain+0x1ae>
    9f36:	75 01       	movw	r14, r10
    9f38:	64 01       	movw	r12, r8
    9f3a:	2f ef       	ldi	r18, 0xFF	; 255
    9f3c:	c2 1a       	sub	r12, r18
    9f3e:	d2 0a       	sbc	r13, r18
    9f40:	e2 0a       	sbc	r14, r18
    9f42:	f2 0a       	sbc	r15, r18
    9f44:	89 8d       	ldd	r24, Y+25	; 0x19
    9f46:	9a 8d       	ldd	r25, Y+26	; 0x1a
    9f48:	ab 8d       	ldd	r26, Y+27	; 0x1b
    9f4a:	bc 8d       	ldd	r27, Y+28	; 0x1c
    9f4c:	c8 16       	cp	r12, r24
    9f4e:	d9 06       	cpc	r13, r25
    9f50:	ea 06       	cpc	r14, r26
    9f52:	fb 06       	cpc	r15, r27
    9f54:	60 f0       	brcs	.+24     	; 0x9f6e <create_chain+0x174>
    9f56:	82 e0       	ldi	r24, 0x02	; 2
    9f58:	88 16       	cp	r8, r24
    9f5a:	91 04       	cpc	r9, r1
    9f5c:	a1 04       	cpc	r10, r1
    9f5e:	b1 04       	cpc	r11, r1
    9f60:	08 f4       	brcc	.+2      	; 0x9f64 <create_chain+0x16a>
    9f62:	9b cf       	rjmp	.-202    	; 0x9e9a <create_chain+0xa0>
    9f64:	82 e0       	ldi	r24, 0x02	; 2
    9f66:	c8 2e       	mov	r12, r24
    9f68:	d1 2c       	mov	r13, r1
    9f6a:	e1 2c       	mov	r14, r1
    9f6c:	f1 2c       	mov	r15, r1
    9f6e:	b7 01       	movw	r22, r14
    9f70:	a6 01       	movw	r20, r12
    9f72:	f8 01       	movw	r30, r16
    9f74:	80 81       	ld	r24, Z
    9f76:	91 81       	ldd	r25, Z+1	; 0x01
    9f78:	cb dd       	rcall	.-1130   	; 0x9b10 <get_fat.isra.9>
    9f7a:	61 15       	cp	r22, r1
    9f7c:	71 05       	cpc	r23, r1
    9f7e:	81 05       	cpc	r24, r1
    9f80:	91 05       	cpc	r25, r1
    9f82:	91 f0       	breq	.+36     	; 0x9fa8 <create_chain+0x1ae>
    9f84:	61 30       	cpi	r22, 0x01	; 1
    9f86:	71 05       	cpc	r23, r1
    9f88:	81 05       	cpc	r24, r1
    9f8a:	91 05       	cpc	r25, r1
    9f8c:	09 f4       	brne	.+2      	; 0x9f90 <create_chain+0x196>
    9f8e:	4b c0       	rjmp	.+150    	; 0xa026 <create_chain+0x22c>
    9f90:	6f 3f       	cpi	r22, 0xFF	; 255
    9f92:	7f 4f       	sbci	r23, 0xFF	; 255
    9f94:	8f 4f       	sbci	r24, 0xFF	; 255
    9f96:	9f 4f       	sbci	r25, 0xFF	; 255
    9f98:	09 f4       	brne	.+2      	; 0x9f9c <create_chain+0x1a2>
    9f9a:	61 cf       	rjmp	.-318    	; 0x9e5e <create_chain+0x64>
    9f9c:	c8 14       	cp	r12, r8
    9f9e:	d9 04       	cpc	r13, r9
    9fa0:	ea 04       	cpc	r14, r10
    9fa2:	fb 04       	cpc	r15, r11
    9fa4:	51 f6       	brne	.-108    	; 0x9f3a <create_chain+0x140>
    9fa6:	79 cf       	rjmp	.-270    	; 0x9e9a <create_chain+0xa0>
    9fa8:	0f ef       	ldi	r16, 0xFF	; 255
    9faa:	1f ef       	ldi	r17, 0xFF	; 255
    9fac:	98 01       	movw	r18, r16
    9fae:	b7 01       	movw	r22, r14
    9fb0:	a6 01       	movw	r20, r12
    9fb2:	ce 01       	movw	r24, r28
    9fb4:	b4 dc       	rcall	.-1688   	; 0x991e <put_fat>
    9fb6:	00 97       	sbiw	r24, 0x00	; 0
    9fb8:	99 f5       	brne	.+102    	; 0xa020 <create_chain+0x226>
    9fba:	41 14       	cp	r4, r1
    9fbc:	51 04       	cpc	r5, r1
    9fbe:	61 04       	cpc	r6, r1
    9fc0:	71 04       	cpc	r7, r1
    9fc2:	e9 f4       	brne	.+58     	; 0x9ffe <create_chain+0x204>
    9fc4:	cd 86       	std	Y+13, r12	; 0x0d
    9fc6:	de 86       	std	Y+14, r13	; 0x0e
    9fc8:	ef 86       	std	Y+15, r14	; 0x0f
    9fca:	f8 8a       	std	Y+16, r15	; 0x10
    9fcc:	89 89       	ldd	r24, Y+17	; 0x11
    9fce:	9a 89       	ldd	r25, Y+18	; 0x12
    9fd0:	ab 89       	ldd	r26, Y+19	; 0x13
    9fd2:	bc 89       	ldd	r27, Y+20	; 0x14
    9fd4:	49 8d       	ldd	r20, Y+25	; 0x19
    9fd6:	5a 8d       	ldd	r21, Y+26	; 0x1a
    9fd8:	6b 8d       	ldd	r22, Y+27	; 0x1b
    9fda:	7c 8d       	ldd	r23, Y+28	; 0x1c
    9fdc:	42 50       	subi	r20, 0x02	; 2
    9fde:	51 09       	sbc	r21, r1
    9fe0:	61 09       	sbc	r22, r1
    9fe2:	71 09       	sbc	r23, r1
    9fe4:	48 17       	cp	r20, r24
    9fe6:	59 07       	cpc	r21, r25
    9fe8:	6a 07       	cpc	r22, r26
    9fea:	7b 07       	cpc	r23, r27
    9fec:	88 f0       	brcs	.+34     	; 0xa010 <create_chain+0x216>
    9fee:	01 97       	sbiw	r24, 0x01	; 1
    9ff0:	a1 09       	sbc	r26, r1
    9ff2:	b1 09       	sbc	r27, r1
    9ff4:	89 8b       	std	Y+17, r24	; 0x11
    9ff6:	9a 8b       	std	Y+18, r25	; 0x12
    9ff8:	ab 8b       	std	Y+19, r26	; 0x13
    9ffa:	bc 8b       	std	Y+20, r27	; 0x14
    9ffc:	09 c0       	rjmp	.+18     	; 0xa010 <create_chain+0x216>
    9ffe:	97 01       	movw	r18, r14
    a000:	86 01       	movw	r16, r12
    a002:	b3 01       	movw	r22, r6
    a004:	a2 01       	movw	r20, r4
    a006:	ce 01       	movw	r24, r28
    a008:	8a dc       	rcall	.-1772   	; 0x991e <put_fat>
    a00a:	00 97       	sbiw	r24, 0x00	; 0
    a00c:	d9 f2       	breq	.-74     	; 0x9fc4 <create_chain+0x1ca>
    a00e:	08 c0       	rjmp	.+16     	; 0xa020 <create_chain+0x226>
    a010:	8c 81       	ldd	r24, Y+4	; 0x04
    a012:	81 60       	ori	r24, 0x01	; 1
    a014:	8c 83       	std	Y+4, r24	; 0x04
    a016:	4c 2d       	mov	r20, r12
    a018:	3d 2d       	mov	r19, r13
    a01a:	2e 2d       	mov	r18, r14
    a01c:	9f 2d       	mov	r25, r15
    a01e:	0b c0       	rjmp	.+22     	; 0xa036 <create_chain+0x23c>
    a020:	01 97       	sbiw	r24, 0x01	; 1
    a022:	09 f4       	brne	.+2      	; 0xa026 <create_chain+0x22c>
    a024:	1c cf       	rjmp	.-456    	; 0x9e5e <create_chain+0x64>
    a026:	41 e0       	ldi	r20, 0x01	; 1
    a028:	30 e0       	ldi	r19, 0x00	; 0
    a02a:	20 e0       	ldi	r18, 0x00	; 0
    a02c:	90 e0       	ldi	r25, 0x00	; 0
    a02e:	03 c0       	rjmp	.+6      	; 0xa036 <create_chain+0x23c>
    a030:	46 2f       	mov	r20, r22
    a032:	37 2f       	mov	r19, r23
    a034:	28 2f       	mov	r18, r24
    a036:	64 2f       	mov	r22, r20
    a038:	73 2f       	mov	r23, r19
    a03a:	82 2f       	mov	r24, r18
    a03c:	cd b7       	in	r28, 0x3d	; 61
    a03e:	de b7       	in	r29, 0x3e	; 62
    a040:	e0 e1       	ldi	r30, 0x10	; 16
    a042:	0c 94 27 e3 	jmp	0x1c64e	; 0x1c64e <__epilogue_restores__+0x4>

0000a046 <remove_chain>:
    a046:	4f 92       	push	r4
    a048:	5f 92       	push	r5
    a04a:	6f 92       	push	r6
    a04c:	7f 92       	push	r7
    a04e:	af 92       	push	r10
    a050:	bf 92       	push	r11
    a052:	cf 92       	push	r12
    a054:	df 92       	push	r13
    a056:	ef 92       	push	r14
    a058:	ff 92       	push	r15
    a05a:	0f 93       	push	r16
    a05c:	1f 93       	push	r17
    a05e:	cf 93       	push	r28
    a060:	df 93       	push	r29
    a062:	5c 01       	movw	r10, r24
    a064:	6a 01       	movw	r12, r20
    a066:	7b 01       	movw	r14, r22
    a068:	b9 01       	movw	r22, r18
    a06a:	a8 01       	movw	r20, r16
    a06c:	22 e0       	ldi	r18, 0x02	; 2
    a06e:	c2 16       	cp	r12, r18
    a070:	d1 04       	cpc	r13, r1
    a072:	e1 04       	cpc	r14, r1
    a074:	f1 04       	cpc	r15, r1
    a076:	10 f4       	brcc	.+4      	; 0xa07c <remove_chain+0x36>
    a078:	22 e0       	ldi	r18, 0x02	; 2
    a07a:	27 c0       	rjmp	.+78     	; 0xa0ca <remove_chain+0x84>
    a07c:	fc 01       	movw	r30, r24
    a07e:	c0 81       	ld	r28, Z
    a080:	d1 81       	ldd	r29, Z+1	; 0x01
    a082:	89 8d       	ldd	r24, Y+25	; 0x19
    a084:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a086:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a088:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a08a:	c8 16       	cp	r12, r24
    a08c:	d9 06       	cpc	r13, r25
    a08e:	ea 06       	cpc	r14, r26
    a090:	fb 06       	cpc	r15, r27
    a092:	90 f7       	brcc	.-28     	; 0xa078 <remove_chain+0x32>
    a094:	41 15       	cp	r20, r1
    a096:	51 05       	cpc	r21, r1
    a098:	61 05       	cpc	r22, r1
    a09a:	71 05       	cpc	r23, r1
    a09c:	41 f0       	breq	.+16     	; 0xa0ae <remove_chain+0x68>
    a09e:	0f ef       	ldi	r16, 0xFF	; 255
    a0a0:	1f ef       	ldi	r17, 0xFF	; 255
    a0a2:	98 01       	movw	r18, r16
    a0a4:	ce 01       	movw	r24, r28
    a0a6:	3b dc       	rcall	.-1930   	; 0x991e <put_fat>
    a0a8:	00 97       	sbiw	r24, 0x00	; 0
    a0aa:	09 f0       	breq	.+2      	; 0xa0ae <remove_chain+0x68>
    a0ac:	4c c0       	rjmp	.+152    	; 0xa146 <remove_chain+0x100>
    a0ae:	b7 01       	movw	r22, r14
    a0b0:	a6 01       	movw	r20, r12
    a0b2:	f5 01       	movw	r30, r10
    a0b4:	80 81       	ld	r24, Z
    a0b6:	91 81       	ldd	r25, Z+1	; 0x01
    a0b8:	2b dd       	rcall	.-1450   	; 0x9b10 <get_fat.isra.9>
    a0ba:	2b 01       	movw	r4, r22
    a0bc:	3c 01       	movw	r6, r24
    a0be:	61 15       	cp	r22, r1
    a0c0:	71 05       	cpc	r23, r1
    a0c2:	81 05       	cpc	r24, r1
    a0c4:	91 05       	cpc	r25, r1
    a0c6:	19 f4       	brne	.+6      	; 0xa0ce <remove_chain+0x88>
    a0c8:	20 e0       	ldi	r18, 0x00	; 0
    a0ca:	90 e0       	ldi	r25, 0x00	; 0
    a0cc:	3d c0       	rjmp	.+122    	; 0xa148 <remove_chain+0x102>
    a0ce:	61 30       	cpi	r22, 0x01	; 1
    a0d0:	71 05       	cpc	r23, r1
    a0d2:	81 05       	cpc	r24, r1
    a0d4:	91 05       	cpc	r25, r1
    a0d6:	81 f2       	breq	.-96     	; 0xa078 <remove_chain+0x32>
    a0d8:	6f 3f       	cpi	r22, 0xFF	; 255
    a0da:	7f 4f       	sbci	r23, 0xFF	; 255
    a0dc:	8f 4f       	sbci	r24, 0xFF	; 255
    a0de:	9f 4f       	sbci	r25, 0xFF	; 255
    a0e0:	81 f1       	breq	.+96     	; 0xa142 <remove_chain+0xfc>
    a0e2:	00 e0       	ldi	r16, 0x00	; 0
    a0e4:	10 e0       	ldi	r17, 0x00	; 0
    a0e6:	98 01       	movw	r18, r16
    a0e8:	b7 01       	movw	r22, r14
    a0ea:	a6 01       	movw	r20, r12
    a0ec:	ce 01       	movw	r24, r28
    a0ee:	17 dc       	rcall	.-2002   	; 0x991e <put_fat>
    a0f0:	00 97       	sbiw	r24, 0x00	; 0
    a0f2:	49 f5       	brne	.+82     	; 0xa146 <remove_chain+0x100>
    a0f4:	89 89       	ldd	r24, Y+17	; 0x11
    a0f6:	9a 89       	ldd	r25, Y+18	; 0x12
    a0f8:	ab 89       	ldd	r26, Y+19	; 0x13
    a0fa:	bc 89       	ldd	r27, Y+20	; 0x14
    a0fc:	49 8d       	ldd	r20, Y+25	; 0x19
    a0fe:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a100:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a102:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a104:	6a 01       	movw	r12, r20
    a106:	7b 01       	movw	r14, r22
    a108:	e2 e0       	ldi	r30, 0x02	; 2
    a10a:	ce 1a       	sub	r12, r30
    a10c:	d1 08       	sbc	r13, r1
    a10e:	e1 08       	sbc	r14, r1
    a110:	f1 08       	sbc	r15, r1
    a112:	8c 15       	cp	r24, r12
    a114:	9d 05       	cpc	r25, r13
    a116:	ae 05       	cpc	r26, r14
    a118:	bf 05       	cpc	r27, r15
    a11a:	50 f4       	brcc	.+20     	; 0xa130 <remove_chain+0xea>
    a11c:	01 96       	adiw	r24, 0x01	; 1
    a11e:	a1 1d       	adc	r26, r1
    a120:	b1 1d       	adc	r27, r1
    a122:	89 8b       	std	Y+17, r24	; 0x11
    a124:	9a 8b       	std	Y+18, r25	; 0x12
    a126:	ab 8b       	std	Y+19, r26	; 0x13
    a128:	bc 8b       	std	Y+20, r27	; 0x14
    a12a:	8c 81       	ldd	r24, Y+4	; 0x04
    a12c:	81 60       	ori	r24, 0x01	; 1
    a12e:	8c 83       	std	Y+4, r24	; 0x04
    a130:	73 01       	movw	r14, r6
    a132:	62 01       	movw	r12, r4
    a134:	44 16       	cp	r4, r20
    a136:	55 06       	cpc	r5, r21
    a138:	66 06       	cpc	r6, r22
    a13a:	77 06       	cpc	r7, r23
    a13c:	08 f4       	brcc	.+2      	; 0xa140 <remove_chain+0xfa>
    a13e:	b7 cf       	rjmp	.-146    	; 0xa0ae <remove_chain+0x68>
    a140:	c3 cf       	rjmp	.-122    	; 0xa0c8 <remove_chain+0x82>
    a142:	21 e0       	ldi	r18, 0x01	; 1
    a144:	c2 cf       	rjmp	.-124    	; 0xa0ca <remove_chain+0x84>
    a146:	28 2f       	mov	r18, r24
    a148:	82 2f       	mov	r24, r18
    a14a:	df 91       	pop	r29
    a14c:	cf 91       	pop	r28
    a14e:	1f 91       	pop	r17
    a150:	0f 91       	pop	r16
    a152:	ff 90       	pop	r15
    a154:	ef 90       	pop	r14
    a156:	df 90       	pop	r13
    a158:	cf 90       	pop	r12
    a15a:	bf 90       	pop	r11
    a15c:	af 90       	pop	r10
    a15e:	7f 90       	pop	r7
    a160:	6f 90       	pop	r6
    a162:	5f 90       	pop	r5
    a164:	4f 90       	pop	r4
    a166:	08 95       	ret

0000a168 <dir_next>:
    a168:	4f 92       	push	r4
    a16a:	5f 92       	push	r5
    a16c:	6f 92       	push	r6
    a16e:	7f 92       	push	r7
    a170:	af 92       	push	r10
    a172:	bf 92       	push	r11
    a174:	cf 92       	push	r12
    a176:	df 92       	push	r13
    a178:	ef 92       	push	r14
    a17a:	ff 92       	push	r15
    a17c:	0f 93       	push	r16
    a17e:	1f 93       	push	r17
    a180:	cf 93       	push	r28
    a182:	df 93       	push	r29
    a184:	ec 01       	movw	r28, r24
    a186:	08 81       	ld	r16, Y
    a188:	19 81       	ldd	r17, Y+1	; 0x01
    a18a:	ce 84       	ldd	r12, Y+14	; 0x0e
    a18c:	df 84       	ldd	r13, Y+15	; 0x0f
    a18e:	e8 88       	ldd	r14, Y+16	; 0x10
    a190:	f9 88       	ldd	r15, Y+17	; 0x11
    a192:	80 e2       	ldi	r24, 0x20	; 32
    a194:	c8 0e       	add	r12, r24
    a196:	d1 1c       	adc	r13, r1
    a198:	e1 1c       	adc	r14, r1
    a19a:	f1 1c       	adc	r15, r1
    a19c:	c1 14       	cp	r12, r1
    a19e:	d1 04       	cpc	r13, r1
    a1a0:	e0 e2       	ldi	r30, 0x20	; 32
    a1a2:	ee 06       	cpc	r14, r30
    a1a4:	f1 04       	cpc	r15, r1
    a1a6:	20 f0       	brcs	.+8      	; 0xa1b0 <dir_next+0x48>
    a1a8:	1e 8a       	std	Y+22, r1	; 0x16
    a1aa:	1f 8a       	std	Y+23, r1	; 0x17
    a1ac:	18 8e       	std	Y+24, r1	; 0x18
    a1ae:	19 8e       	std	Y+25, r1	; 0x19
    a1b0:	8e 89       	ldd	r24, Y+22	; 0x16
    a1b2:	9f 89       	ldd	r25, Y+23	; 0x17
    a1b4:	a8 8d       	ldd	r26, Y+24	; 0x18
    a1b6:	b9 8d       	ldd	r27, Y+25	; 0x19
    a1b8:	00 97       	sbiw	r24, 0x00	; 0
    a1ba:	a1 05       	cpc	r26, r1
    a1bc:	b1 05       	cpc	r27, r1
    a1be:	09 f4       	brne	.+2      	; 0xa1c2 <dir_next+0x5a>
    a1c0:	a7 c0       	rjmp	.+334    	; 0xa310 <dir_next+0x1a8>
    a1c2:	5b 01       	movw	r10, r22
    a1c4:	b7 01       	movw	r22, r14
    a1c6:	a6 01       	movw	r20, r12
    a1c8:	51 70       	andi	r21, 0x01	; 1
    a1ca:	66 27       	eor	r22, r22
    a1cc:	77 27       	eor	r23, r23
    a1ce:	45 2b       	or	r20, r21
    a1d0:	46 2b       	or	r20, r22
    a1d2:	47 2b       	or	r20, r23
    a1d4:	09 f0       	breq	.+2      	; 0xa1d8 <dir_next+0x70>
    a1d6:	8d c0       	rjmp	.+282    	; 0xa2f2 <dir_next+0x18a>
    a1d8:	01 96       	adiw	r24, 0x01	; 1
    a1da:	a1 1d       	adc	r26, r1
    a1dc:	b1 1d       	adc	r27, r1
    a1de:	8e 8b       	std	Y+22, r24	; 0x16
    a1e0:	9f 8b       	std	Y+23, r25	; 0x17
    a1e2:	a8 8f       	std	Y+24, r26	; 0x18
    a1e4:	b9 8f       	std	Y+25, r27	; 0x19
    a1e6:	4a 89       	ldd	r20, Y+18	; 0x12
    a1e8:	5b 89       	ldd	r21, Y+19	; 0x13
    a1ea:	6c 89       	ldd	r22, Y+20	; 0x14
    a1ec:	7d 89       	ldd	r23, Y+21	; 0x15
    a1ee:	f8 01       	movw	r30, r16
    a1f0:	41 15       	cp	r20, r1
    a1f2:	51 05       	cpc	r21, r1
    a1f4:	61 05       	cpc	r22, r1
    a1f6:	71 05       	cpc	r23, r1
    a1f8:	c1 f4       	brne	.+48     	; 0xa22a <dir_next+0xc2>
    a1fa:	87 81       	ldd	r24, Z+7	; 0x07
    a1fc:	90 85       	ldd	r25, Z+8	; 0x08
    a1fe:	a0 e0       	ldi	r26, 0x00	; 0
    a200:	b0 e0       	ldi	r27, 0x00	; 0
    a202:	b7 01       	movw	r22, r14
    a204:	a6 01       	movw	r20, r12
    a206:	35 e0       	ldi	r19, 0x05	; 5
    a208:	76 95       	lsr	r23
    a20a:	67 95       	ror	r22
    a20c:	57 95       	ror	r21
    a20e:	47 95       	ror	r20
    a210:	3a 95       	dec	r19
    a212:	d1 f7       	brne	.-12     	; 0xa208 <dir_next+0xa0>
    a214:	48 17       	cp	r20, r24
    a216:	59 07       	cpc	r21, r25
    a218:	6a 07       	cpc	r22, r26
    a21a:	7b 07       	cpc	r23, r27
    a21c:	08 f4       	brcc	.+2      	; 0xa220 <dir_next+0xb8>
    a21e:	69 c0       	rjmp	.+210    	; 0xa2f2 <dir_next+0x18a>
    a220:	1e 8a       	std	Y+22, r1	; 0x16
    a222:	1f 8a       	std	Y+23, r1	; 0x17
    a224:	18 8e       	std	Y+24, r1	; 0x18
    a226:	19 8e       	std	Y+25, r1	; 0x19
    a228:	73 c0       	rjmp	.+230    	; 0xa310 <dir_next+0x1a8>
    a22a:	81 85       	ldd	r24, Z+9	; 0x09
    a22c:	92 85       	ldd	r25, Z+10	; 0x0a
    a22e:	01 97       	sbiw	r24, 0x01	; 1
    a230:	a0 e0       	ldi	r26, 0x00	; 0
    a232:	b0 e0       	ldi	r27, 0x00	; 0
    a234:	26 01       	movw	r4, r12
    a236:	37 01       	movw	r6, r14
    a238:	29 e0       	ldi	r18, 0x09	; 9
    a23a:	76 94       	lsr	r7
    a23c:	67 94       	ror	r6
    a23e:	57 94       	ror	r5
    a240:	47 94       	ror	r4
    a242:	2a 95       	dec	r18
    a244:	d1 f7       	brne	.-12     	; 0xa23a <dir_next+0xd2>
    a246:	84 21       	and	r24, r4
    a248:	95 21       	and	r25, r5
    a24a:	a6 21       	and	r26, r6
    a24c:	b7 21       	and	r27, r7
    a24e:	89 2b       	or	r24, r25
    a250:	8a 2b       	or	r24, r26
    a252:	8b 2b       	or	r24, r27
    a254:	09 f0       	breq	.+2      	; 0xa258 <dir_next+0xf0>
    a256:	4d c0       	rjmp	.+154    	; 0xa2f2 <dir_next+0x18a>
    a258:	c8 01       	movw	r24, r16
    a25a:	5a dc       	rcall	.-1868   	; 0x9b10 <get_fat.isra.9>
    a25c:	2b 01       	movw	r4, r22
    a25e:	3c 01       	movw	r6, r24
    a260:	62 30       	cpi	r22, 0x02	; 2
    a262:	71 05       	cpc	r23, r1
    a264:	81 05       	cpc	r24, r1
    a266:	91 05       	cpc	r25, r1
    a268:	18 f4       	brcc	.+6      	; 0xa270 <dir_next+0x108>
    a26a:	82 e0       	ldi	r24, 0x02	; 2
    a26c:	90 e0       	ldi	r25, 0x00	; 0
    a26e:	55 c0       	rjmp	.+170    	; 0xa31a <dir_next+0x1b2>
    a270:	8f ef       	ldi	r24, 0xFF	; 255
    a272:	48 16       	cp	r4, r24
    a274:	58 06       	cpc	r5, r24
    a276:	68 06       	cpc	r6, r24
    a278:	78 06       	cpc	r7, r24
    a27a:	19 f4       	brne	.+6      	; 0xa282 <dir_next+0x11a>
    a27c:	81 e0       	ldi	r24, 0x01	; 1
    a27e:	90 e0       	ldi	r25, 0x00	; 0
    a280:	4c c0       	rjmp	.+152    	; 0xa31a <dir_next+0x1b2>
    a282:	f8 01       	movw	r30, r16
    a284:	81 8d       	ldd	r24, Z+25	; 0x19
    a286:	92 8d       	ldd	r25, Z+26	; 0x1a
    a288:	a3 8d       	ldd	r26, Z+27	; 0x1b
    a28a:	b4 8d       	ldd	r27, Z+28	; 0x1c
    a28c:	48 16       	cp	r4, r24
    a28e:	59 06       	cpc	r5, r25
    a290:	6a 06       	cpc	r6, r26
    a292:	7b 06       	cpc	r7, r27
    a294:	08 f1       	brcs	.+66     	; 0xa2d8 <dir_next+0x170>
    a296:	ab 28       	or	r10, r11
    a298:	19 f2       	breq	.-122    	; 0xa220 <dir_next+0xb8>
    a29a:	4a 89       	ldd	r20, Y+18	; 0x12
    a29c:	5b 89       	ldd	r21, Y+19	; 0x13
    a29e:	6c 89       	ldd	r22, Y+20	; 0x14
    a2a0:	7d 89       	ldd	r23, Y+21	; 0x15
    a2a2:	ce 01       	movw	r24, r28
    a2a4:	aa dd       	rcall	.-1196   	; 0x9dfa <create_chain>
    a2a6:	2b 01       	movw	r4, r22
    a2a8:	3c 01       	movw	r6, r24
    a2aa:	61 15       	cp	r22, r1
    a2ac:	71 05       	cpc	r23, r1
    a2ae:	81 05       	cpc	r24, r1
    a2b0:	91 05       	cpc	r25, r1
    a2b2:	89 f1       	breq	.+98     	; 0xa316 <dir_next+0x1ae>
    a2b4:	61 30       	cpi	r22, 0x01	; 1
    a2b6:	71 05       	cpc	r23, r1
    a2b8:	81 05       	cpc	r24, r1
    a2ba:	91 05       	cpc	r25, r1
    a2bc:	b1 f2       	breq	.-84     	; 0xa26a <dir_next+0x102>
    a2be:	8f ef       	ldi	r24, 0xFF	; 255
    a2c0:	48 16       	cp	r4, r24
    a2c2:	58 06       	cpc	r5, r24
    a2c4:	68 06       	cpc	r6, r24
    a2c6:	78 06       	cpc	r7, r24
    a2c8:	c9 f2       	breq	.-78     	; 0xa27c <dir_next+0x114>
    a2ca:	b3 01       	movw	r22, r6
    a2cc:	a2 01       	movw	r20, r4
    a2ce:	c8 01       	movw	r24, r16
    a2d0:	0e 94 12 49 	call	0x9224	; 0x9224 <dir_clear>
    a2d4:	89 2b       	or	r24, r25
    a2d6:	91 f6       	brne	.-92     	; 0xa27c <dir_next+0x114>
    a2d8:	4a 8a       	std	Y+18, r4	; 0x12
    a2da:	5b 8a       	std	Y+19, r5	; 0x13
    a2dc:	6c 8a       	std	Y+20, r6	; 0x14
    a2de:	7d 8a       	std	Y+21, r7	; 0x15
    a2e0:	b3 01       	movw	r22, r6
    a2e2:	a2 01       	movw	r20, r4
    a2e4:	c8 01       	movw	r24, r16
    a2e6:	0e 94 2b 46 	call	0x8c56	; 0x8c56 <clst2sect>
    a2ea:	6e 8b       	std	Y+22, r22	; 0x16
    a2ec:	7f 8b       	std	Y+23, r23	; 0x17
    a2ee:	88 8f       	std	Y+24, r24	; 0x18
    a2f0:	99 8f       	std	Y+25, r25	; 0x19
    a2f2:	ce 86       	std	Y+14, r12	; 0x0e
    a2f4:	df 86       	std	Y+15, r13	; 0x0f
    a2f6:	e8 8a       	std	Y+16, r14	; 0x10
    a2f8:	f9 8a       	std	Y+17, r15	; 0x11
    a2fa:	0b 5c       	subi	r16, 0xCB	; 203
    a2fc:	1f 4f       	sbci	r17, 0xFF	; 255
    a2fe:	e1 e0       	ldi	r30, 0x01	; 1
    a300:	de 22       	and	r13, r30
    a302:	c0 0e       	add	r12, r16
    a304:	d1 1e       	adc	r13, r17
    a306:	db 8e       	std	Y+27, r13	; 0x1b
    a308:	ca 8e       	std	Y+26, r12	; 0x1a
    a30a:	80 e0       	ldi	r24, 0x00	; 0
    a30c:	90 e0       	ldi	r25, 0x00	; 0
    a30e:	05 c0       	rjmp	.+10     	; 0xa31a <dir_next+0x1b2>
    a310:	84 e0       	ldi	r24, 0x04	; 4
    a312:	90 e0       	ldi	r25, 0x00	; 0
    a314:	02 c0       	rjmp	.+4      	; 0xa31a <dir_next+0x1b2>
    a316:	87 e0       	ldi	r24, 0x07	; 7
    a318:	90 e0       	ldi	r25, 0x00	; 0
    a31a:	df 91       	pop	r29
    a31c:	cf 91       	pop	r28
    a31e:	1f 91       	pop	r17
    a320:	0f 91       	pop	r16
    a322:	ff 90       	pop	r15
    a324:	ef 90       	pop	r14
    a326:	df 90       	pop	r13
    a328:	cf 90       	pop	r12
    a32a:	bf 90       	pop	r11
    a32c:	af 90       	pop	r10
    a32e:	7f 90       	pop	r7
    a330:	6f 90       	pop	r6
    a332:	5f 90       	pop	r5
    a334:	4f 90       	pop	r4
    a336:	08 95       	ret

0000a338 <dir_alloc>:
    a338:	a0 e0       	ldi	r26, 0x00	; 0
    a33a:	b0 e0       	ldi	r27, 0x00	; 0
    a33c:	e2 ea       	ldi	r30, 0xA2	; 162
    a33e:	f1 e5       	ldi	r31, 0x51	; 81
    a340:	0c 94 13 e3 	jmp	0x1c626	; 0x1c626 <__prologue_saves__+0x14>
    a344:	ec 01       	movw	r28, r24
    a346:	6b 01       	movw	r12, r22
    a348:	e8 80       	ld	r14, Y
    a34a:	f9 80       	ldd	r15, Y+1	; 0x01
    a34c:	40 e0       	ldi	r20, 0x00	; 0
    a34e:	50 e0       	ldi	r21, 0x00	; 0
    a350:	ba 01       	movw	r22, r20
    a352:	92 dc       	rcall	.-1756   	; 0x9c78 <dir_sdi>
    a354:	00 97       	sbiw	r24, 0x00	; 0
    a356:	f9 f4       	brne	.+62     	; 0xa396 <dir_alloc+0x5e>
    a358:	00 e0       	ldi	r16, 0x00	; 0
    a35a:	10 e0       	ldi	r17, 0x00	; 0
    a35c:	4e 89       	ldd	r20, Y+22	; 0x16
    a35e:	5f 89       	ldd	r21, Y+23	; 0x17
    a360:	68 8d       	ldd	r22, Y+24	; 0x18
    a362:	79 8d       	ldd	r23, Y+25	; 0x19
    a364:	c7 01       	movw	r24, r14
    a366:	06 d8       	rcall	.-4084   	; 0x9374 <move_window>
    a368:	00 97       	sbiw	r24, 0x00	; 0
    a36a:	a9 f4       	brne	.+42     	; 0xa396 <dir_alloc+0x5e>
    a36c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    a36e:	fb 8d       	ldd	r31, Y+27	; 0x1b
    a370:	20 81       	ld	r18, Z
    a372:	25 3e       	cpi	r18, 0xE5	; 229
    a374:	11 f0       	breq	.+4      	; 0xa37a <dir_alloc+0x42>
    a376:	21 11       	cpse	r18, r1
    a378:	06 c0       	rjmp	.+12     	; 0xa386 <dir_alloc+0x4e>
    a37a:	0f 5f       	subi	r16, 0xFF	; 255
    a37c:	1f 4f       	sbci	r17, 0xFF	; 255
    a37e:	0c 15       	cp	r16, r12
    a380:	1d 05       	cpc	r17, r13
    a382:	19 f4       	brne	.+6      	; 0xa38a <dir_alloc+0x52>
    a384:	0d c0       	rjmp	.+26     	; 0xa3a0 <dir_alloc+0x68>
    a386:	00 e0       	ldi	r16, 0x00	; 0
    a388:	10 e0       	ldi	r17, 0x00	; 0
    a38a:	61 e0       	ldi	r22, 0x01	; 1
    a38c:	70 e0       	ldi	r23, 0x00	; 0
    a38e:	ce 01       	movw	r24, r28
    a390:	eb de       	rcall	.-554    	; 0xa168 <dir_next>
    a392:	00 97       	sbiw	r24, 0x00	; 0
    a394:	19 f3       	breq	.-58     	; 0xa35c <dir_alloc+0x24>
    a396:	84 30       	cpi	r24, 0x04	; 4
    a398:	91 05       	cpc	r25, r1
    a39a:	11 f4       	brne	.+4      	; 0xa3a0 <dir_alloc+0x68>
    a39c:	87 e0       	ldi	r24, 0x07	; 7
    a39e:	90 e0       	ldi	r25, 0x00	; 0
    a3a0:	cd b7       	in	r28, 0x3d	; 61
    a3a2:	de b7       	in	r29, 0x3e	; 62
    a3a4:	e8 e0       	ldi	r30, 0x08	; 8
    a3a6:	0c 94 2f e3 	jmp	0x1c65e	; 0x1c65e <__epilogue_restores__+0x14>

0000a3aa <dir_read>:
    a3aa:	a0 e0       	ldi	r26, 0x00	; 0
    a3ac:	b0 e0       	ldi	r27, 0x00	; 0
    a3ae:	eb ed       	ldi	r30, 0xDB	; 219
    a3b0:	f1 e5       	ldi	r31, 0x51	; 81
    a3b2:	0c 94 0f e3 	jmp	0x1c61e	; 0x1c61e <__prologue_saves__+0xc>
    a3b6:	ec 01       	movw	r28, r24
    a3b8:	7b 01       	movw	r14, r22
    a3ba:	a8 80       	ld	r10, Y
    a3bc:	b9 80       	ldd	r11, Y+1	; 0x01
    a3be:	dd 24       	eor	r13, r13
    a3c0:	da 94       	dec	r13
    a3c2:	1f ef       	ldi	r17, 0xFF	; 255
    a3c4:	84 e0       	ldi	r24, 0x04	; 4
    a3c6:	90 e0       	ldi	r25, 0x00	; 0
    a3c8:	fd e0       	ldi	r31, 0x0D	; 13
    a3ca:	cf 2e       	mov	r12, r31
    a3cc:	4e 89       	ldd	r20, Y+22	; 0x16
    a3ce:	5f 89       	ldd	r21, Y+23	; 0x17
    a3d0:	68 8d       	ldd	r22, Y+24	; 0x18
    a3d2:	79 8d       	ldd	r23, Y+25	; 0x19
    a3d4:	41 15       	cp	r20, r1
    a3d6:	51 05       	cpc	r21, r1
    a3d8:	61 05       	cpc	r22, r1
    a3da:	71 05       	cpc	r23, r1
    a3dc:	09 f4       	brne	.+2      	; 0xa3e0 <dir_read+0x36>
    a3de:	9a c0       	rjmp	.+308    	; 0xa514 <dir_read+0x16a>
    a3e0:	c5 01       	movw	r24, r10
    a3e2:	0e 94 ba 49 	call	0x9374	; 0x9374 <move_window>
    a3e6:	00 97       	sbiw	r24, 0x00	; 0
    a3e8:	09 f0       	breq	.+2      	; 0xa3ec <dir_read+0x42>
    a3ea:	96 c0       	rjmp	.+300    	; 0xa518 <dir_read+0x16e>
    a3ec:	8a 8c       	ldd	r8, Y+26	; 0x1a
    a3ee:	9b 8c       	ldd	r9, Y+27	; 0x1b
    a3f0:	f4 01       	movw	r30, r8
    a3f2:	00 81       	ld	r16, Z
    a3f4:	00 23       	and	r16, r16
    a3f6:	09 f4       	brne	.+2      	; 0xa3fa <dir_read+0x50>
    a3f8:	97 c0       	rjmp	.+302    	; 0xa528 <dir_read+0x17e>
    a3fa:	83 85       	ldd	r24, Z+11	; 0x0b
    a3fc:	8f 73       	andi	r24, 0x3F	; 63
    a3fe:	8c 83       	std	Y+4, r24	; 0x04
    a400:	05 3e       	cpi	r16, 0xE5	; 229
    a402:	09 f4       	brne	.+2      	; 0xa406 <dir_read+0x5c>
    a404:	7e c0       	rjmp	.+252    	; 0xa502 <dir_read+0x158>
    a406:	0e 32       	cpi	r16, 0x2E	; 46
    a408:	09 f4       	brne	.+2      	; 0xa40c <dir_read+0x62>
    a40a:	7b c0       	rjmp	.+246    	; 0xa502 <dir_read+0x158>
    a40c:	21 e0       	ldi	r18, 0x01	; 1
    a40e:	30 e0       	ldi	r19, 0x00	; 0
    a410:	98 2f       	mov	r25, r24
    a412:	9f 71       	andi	r25, 0x1F	; 31
    a414:	98 30       	cpi	r25, 0x08	; 8
    a416:	11 f0       	breq	.+4      	; 0xa41c <dir_read+0x72>
    a418:	20 e0       	ldi	r18, 0x00	; 0
    a41a:	30 e0       	ldi	r19, 0x00	; 0
    a41c:	2e 15       	cp	r18, r14
    a41e:	3f 05       	cpc	r19, r15
    a420:	09 f0       	breq	.+2      	; 0xa424 <dir_read+0x7a>
    a422:	6f c0       	rjmp	.+222    	; 0xa502 <dir_read+0x158>
    a424:	8f 30       	cpi	r24, 0x0F	; 15
    a426:	09 f0       	breq	.+2      	; 0xa42a <dir_read+0x80>
    a428:	5c c0       	rjmp	.+184    	; 0xa4e2 <dir_read+0x138>
    a42a:	06 ff       	sbrs	r16, 6
    a42c:	0c c0       	rjmp	.+24     	; 0xa446 <dir_read+0x9c>
    a42e:	f4 01       	movw	r30, r8
    a430:	85 85       	ldd	r24, Z+13	; 0x0d
    a432:	0f 7b       	andi	r16, 0xBF	; 191
    a434:	4e 85       	ldd	r20, Y+14	; 0x0e
    a436:	5f 85       	ldd	r21, Y+15	; 0x0f
    a438:	68 89       	ldd	r22, Y+16	; 0x10
    a43a:	79 89       	ldd	r23, Y+17	; 0x11
    a43c:	48 a7       	std	Y+40, r20	; 0x28
    a43e:	59 a7       	std	Y+41, r21	; 0x29
    a440:	6a a7       	std	Y+42, r22	; 0x2a
    a442:	7b a7       	std	Y+43, r23	; 0x2b
    a444:	03 c0       	rjmp	.+6      	; 0xa44c <dir_read+0xa2>
    a446:	10 13       	cpse	r17, r16
    a448:	5c c0       	rjmp	.+184    	; 0xa502 <dir_read+0x158>
    a44a:	8d 2d       	mov	r24, r13
    a44c:	f4 01       	movw	r30, r8
    a44e:	d5 84       	ldd	r13, Z+13	; 0x0d
    a450:	d8 12       	cpse	r13, r24
    a452:	56 c0       	rjmp	.+172    	; 0xa500 <dir_read+0x156>
    a454:	82 8d       	ldd	r24, Z+26	; 0x1a
    a456:	93 8d       	ldd	r25, Z+27	; 0x1b
    a458:	89 2b       	or	r24, r25
    a45a:	09 f0       	breq	.+2      	; 0xa45e <dir_read+0xb4>
    a45c:	52 c0       	rjmp	.+164    	; 0xa502 <dir_read+0x158>
    a45e:	f5 01       	movw	r30, r10
    a460:	63 85       	ldd	r22, Z+11	; 0x0b
    a462:	74 85       	ldd	r23, Z+12	; 0x0c
    a464:	f4 01       	movw	r30, r8
    a466:	80 81       	ld	r24, Z
    a468:	90 e0       	ldi	r25, 0x00	; 0
    a46a:	8f 7b       	andi	r24, 0xBF	; 191
    a46c:	01 97       	sbiw	r24, 0x01	; 1
    a46e:	c8 9e       	mul	r12, r24
    a470:	90 01       	movw	r18, r0
    a472:	c9 9e       	mul	r12, r25
    a474:	30 0d       	add	r19, r0
    a476:	11 24       	eor	r1, r1
    a478:	ab ee       	ldi	r26, 0xEB	; 235
    a47a:	b4 e0       	ldi	r27, 0x04	; 4
    a47c:	81 e0       	ldi	r24, 0x01	; 1
    a47e:	90 e0       	ldi	r25, 0x00	; 0
    a480:	4d 91       	ld	r20, X+
    a482:	f4 01       	movw	r30, r8
    a484:	e4 0f       	add	r30, r20
    a486:	f1 1d       	adc	r31, r1
    a488:	40 81       	ld	r20, Z
    a48a:	51 81       	ldd	r21, Z+1	; 0x01
    a48c:	00 97       	sbiw	r24, 0x00	; 0
    a48e:	81 f0       	breq	.+32     	; 0xa4b0 <dir_read+0x106>
    a490:	2f 3f       	cpi	r18, 0xFF	; 255
    a492:	31 05       	cpc	r19, r1
    a494:	09 f0       	breq	.+2      	; 0xa498 <dir_read+0xee>
    a496:	a8 f5       	brcc	.+106    	; 0xa502 <dir_read+0x158>
    a498:	c9 01       	movw	r24, r18
    a49a:	88 0f       	add	r24, r24
    a49c:	99 1f       	adc	r25, r25
    a49e:	86 0f       	add	r24, r22
    a4a0:	97 1f       	adc	r25, r23
    a4a2:	fc 01       	movw	r30, r24
    a4a4:	51 83       	std	Z+1, r21	; 0x01
    a4a6:	40 83       	st	Z, r20
    a4a8:	ca 01       	movw	r24, r20
    a4aa:	2f 5f       	subi	r18, 0xFF	; 255
    a4ac:	3f 4f       	sbci	r19, 0xFF	; 255
    a4ae:	03 c0       	rjmp	.+6      	; 0xa4b6 <dir_read+0x10c>
    a4b0:	4f 3f       	cpi	r20, 0xFF	; 255
    a4b2:	5f 4f       	sbci	r21, 0xFF	; 255
    a4b4:	31 f5       	brne	.+76     	; 0xa502 <dir_read+0x158>
    a4b6:	44 e0       	ldi	r20, 0x04	; 4
    a4b8:	a8 3f       	cpi	r26, 0xF8	; 248
    a4ba:	b4 07       	cpc	r27, r20
    a4bc:	09 f7       	brne	.-62     	; 0xa480 <dir_read+0xd6>
    a4be:	f4 01       	movw	r30, r8
    a4c0:	40 81       	ld	r20, Z
    a4c2:	46 ff       	sbrs	r20, 6
    a4c4:	2e c0       	rjmp	.+92     	; 0xa522 <dir_read+0x178>
    a4c6:	89 2b       	or	r24, r25
    a4c8:	61 f1       	breq	.+88     	; 0xa522 <dir_read+0x178>
    a4ca:	2f 3f       	cpi	r18, 0xFF	; 255
    a4cc:	31 05       	cpc	r19, r1
    a4ce:	09 f0       	breq	.+2      	; 0xa4d2 <dir_read+0x128>
    a4d0:	c0 f4       	brcc	.+48     	; 0xa502 <dir_read+0x158>
    a4d2:	22 0f       	add	r18, r18
    a4d4:	33 1f       	adc	r19, r19
    a4d6:	fb 01       	movw	r30, r22
    a4d8:	e2 0f       	add	r30, r18
    a4da:	f3 1f       	adc	r31, r19
    a4dc:	11 82       	std	Z+1, r1	; 0x01
    a4de:	10 82       	st	Z, r1
    a4e0:	20 c0       	rjmp	.+64     	; 0xa522 <dir_read+0x178>
    a4e2:	11 11       	cpse	r17, r1
    a4e4:	05 c0       	rjmp	.+10     	; 0xa4f0 <dir_read+0x146>
    a4e6:	c4 01       	movw	r24, r8
    a4e8:	0e 94 8f 46 	call	0x8d1e	; 0x8d1e <sum_sfn>
    a4ec:	d8 16       	cp	r13, r24
    a4ee:	f9 f0       	breq	.+62     	; 0xa52e <dir_read+0x184>
    a4f0:	8f ef       	ldi	r24, 0xFF	; 255
    a4f2:	9f ef       	ldi	r25, 0xFF	; 255
    a4f4:	dc 01       	movw	r26, r24
    a4f6:	88 a7       	std	Y+40, r24	; 0x28
    a4f8:	99 a7       	std	Y+41, r25	; 0x29
    a4fa:	aa a7       	std	Y+42, r26	; 0x2a
    a4fc:	bb a7       	std	Y+43, r27	; 0x2b
    a4fe:	17 c0       	rjmp	.+46     	; 0xa52e <dir_read+0x184>
    a500:	d8 2e       	mov	r13, r24
    a502:	1f ef       	ldi	r17, 0xFF	; 255
    a504:	60 e0       	ldi	r22, 0x00	; 0
    a506:	70 e0       	ldi	r23, 0x00	; 0
    a508:	ce 01       	movw	r24, r28
    a50a:	2e de       	rcall	.-932    	; 0xa168 <dir_next>
    a50c:	00 97       	sbiw	r24, 0x00	; 0
    a50e:	09 f4       	brne	.+2      	; 0xa512 <dir_read+0x168>
    a510:	5d cf       	rjmp	.-326    	; 0xa3cc <dir_read+0x22>
    a512:	02 c0       	rjmp	.+4      	; 0xa518 <dir_read+0x16e>
    a514:	00 97       	sbiw	r24, 0x00	; 0
    a516:	59 f0       	breq	.+22     	; 0xa52e <dir_read+0x184>
    a518:	1e 8a       	std	Y+22, r1	; 0x16
    a51a:	1f 8a       	std	Y+23, r1	; 0x17
    a51c:	18 8e       	std	Y+24, r1	; 0x18
    a51e:	19 8e       	std	Y+25, r1	; 0x19
    a520:	08 c0       	rjmp	.+16     	; 0xa532 <dir_read+0x188>
    a522:	1f ef       	ldi	r17, 0xFF	; 255
    a524:	10 0f       	add	r17, r16
    a526:	ee cf       	rjmp	.-36     	; 0xa504 <dir_read+0x15a>
    a528:	84 e0       	ldi	r24, 0x04	; 4
    a52a:	90 e0       	ldi	r25, 0x00	; 0
    a52c:	f5 cf       	rjmp	.-22     	; 0xa518 <dir_read+0x16e>
    a52e:	80 e0       	ldi	r24, 0x00	; 0
    a530:	90 e0       	ldi	r25, 0x00	; 0
    a532:	cd b7       	in	r28, 0x3d	; 61
    a534:	de b7       	in	r29, 0x3e	; 62
    a536:	ec e0       	ldi	r30, 0x0C	; 12
    a538:	0c 94 2b e3 	jmp	0x1c656	; 0x1c656 <__epilogue_restores__+0xc>

0000a53c <dir_remove>:
    a53c:	a0 e0       	ldi	r26, 0x00	; 0
    a53e:	b0 e0       	ldi	r27, 0x00	; 0
    a540:	e4 ea       	ldi	r30, 0xA4	; 164
    a542:	f2 e5       	ldi	r31, 0x52	; 82
    a544:	0c 94 11 e3 	jmp	0x1c622	; 0x1c622 <__prologue_saves__+0x10>
    a548:	ec 01       	movw	r28, r24
    a54a:	08 81       	ld	r16, Y
    a54c:	19 81       	ldd	r17, Y+1	; 0x01
    a54e:	ce 84       	ldd	r12, Y+14	; 0x0e
    a550:	df 84       	ldd	r13, Y+15	; 0x0f
    a552:	e8 88       	ldd	r14, Y+16	; 0x10
    a554:	f9 88       	ldd	r15, Y+17	; 0x11
    a556:	48 a5       	ldd	r20, Y+40	; 0x28
    a558:	59 a5       	ldd	r21, Y+41	; 0x29
    a55a:	6a a5       	ldd	r22, Y+42	; 0x2a
    a55c:	7b a5       	ldd	r23, Y+43	; 0x2b
    a55e:	4f 3f       	cpi	r20, 0xFF	; 255
    a560:	8f ef       	ldi	r24, 0xFF	; 255
    a562:	58 07       	cpc	r21, r24
    a564:	68 07       	cpc	r22, r24
    a566:	78 07       	cpc	r23, r24
    a568:	29 f4       	brne	.+10     	; 0xa574 <dir_remove+0x38>
    a56a:	85 ee       	ldi	r24, 0xE5	; 229
    a56c:	b8 2e       	mov	r11, r24
    a56e:	aa 24       	eor	r10, r10
    a570:	a3 94       	inc	r10
    a572:	19 c0       	rjmp	.+50     	; 0xa5a6 <dir_remove+0x6a>
    a574:	ce 01       	movw	r24, r28
    a576:	80 db       	rcall	.-2304   	; 0x9c78 <dir_sdi>
    a578:	00 97       	sbiw	r24, 0x00	; 0
    a57a:	19 f5       	brne	.+70     	; 0xa5c2 <dir_remove+0x86>
    a57c:	f6 cf       	rjmp	.-20     	; 0xa56a <dir_remove+0x2e>
    a57e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    a580:	fb 8d       	ldd	r31, Y+27	; 0x1b
    a582:	b0 82       	st	Z, r11
    a584:	f8 01       	movw	r30, r16
    a586:	a3 82       	std	Z+3, r10	; 0x03
    a588:	4e 85       	ldd	r20, Y+14	; 0x0e
    a58a:	5f 85       	ldd	r21, Y+15	; 0x0f
    a58c:	68 89       	ldd	r22, Y+16	; 0x10
    a58e:	79 89       	ldd	r23, Y+17	; 0x11
    a590:	4c 15       	cp	r20, r12
    a592:	5d 05       	cpc	r21, r13
    a594:	6e 05       	cpc	r22, r14
    a596:	7f 05       	cpc	r23, r15
    a598:	a0 f4       	brcc	.+40     	; 0xa5c2 <dir_remove+0x86>
    a59a:	60 e0       	ldi	r22, 0x00	; 0
    a59c:	70 e0       	ldi	r23, 0x00	; 0
    a59e:	ce 01       	movw	r24, r28
    a5a0:	e3 dd       	rcall	.-1082   	; 0xa168 <dir_next>
    a5a2:	00 97       	sbiw	r24, 0x00	; 0
    a5a4:	49 f4       	brne	.+18     	; 0xa5b8 <dir_remove+0x7c>
    a5a6:	4e 89       	ldd	r20, Y+22	; 0x16
    a5a8:	5f 89       	ldd	r21, Y+23	; 0x17
    a5aa:	68 8d       	ldd	r22, Y+24	; 0x18
    a5ac:	79 8d       	ldd	r23, Y+25	; 0x19
    a5ae:	c8 01       	movw	r24, r16
    a5b0:	0e 94 ba 49 	call	0x9374	; 0x9374 <move_window>
    a5b4:	00 97       	sbiw	r24, 0x00	; 0
    a5b6:	19 f3       	breq	.-58     	; 0xa57e <dir_remove+0x42>
    a5b8:	84 30       	cpi	r24, 0x04	; 4
    a5ba:	91 05       	cpc	r25, r1
    a5bc:	11 f4       	brne	.+4      	; 0xa5c2 <dir_remove+0x86>
    a5be:	82 e0       	ldi	r24, 0x02	; 2
    a5c0:	90 e0       	ldi	r25, 0x00	; 0
    a5c2:	cd b7       	in	r28, 0x3d	; 61
    a5c4:	de b7       	in	r29, 0x3e	; 62
    a5c6:	ea e0       	ldi	r30, 0x0A	; 10
    a5c8:	0c 94 2d e3 	jmp	0x1c65a	; 0x1c65a <__epilogue_restores__+0x10>

0000a5cc <dir_find>:
    a5cc:	ac e0       	ldi	r26, 0x0C	; 12
    a5ce:	b0 e0       	ldi	r27, 0x00	; 0
    a5d0:	ec ee       	ldi	r30, 0xEC	; 236
    a5d2:	f2 e5       	ldi	r31, 0x52	; 82
    a5d4:	0c 94 09 e3 	jmp	0x1c612	; 0x1c612 <__prologue_saves__>
    a5d8:	9c 87       	std	Y+12, r25	; 0x0c
    a5da:	8b 87       	std	Y+11, r24	; 0x0b
    a5dc:	fc 01       	movw	r30, r24
    a5de:	01 90       	ld	r0, Z+
    a5e0:	f0 81       	ld	r31, Z
    a5e2:	e0 2d       	mov	r30, r0
    a5e4:	fc 83       	std	Y+4, r31	; 0x04
    a5e6:	eb 83       	std	Y+3, r30	; 0x03
    a5e8:	40 e0       	ldi	r20, 0x00	; 0
    a5ea:	50 e0       	ldi	r21, 0x00	; 0
    a5ec:	ba 01       	movw	r22, r20
    a5ee:	44 db       	rcall	.-2424   	; 0x9c78 <dir_sdi>
    a5f0:	00 97       	sbiw	r24, 0x00	; 0
    a5f2:	09 f0       	breq	.+2      	; 0xa5f6 <dir_find+0x2a>
    a5f4:	e7 c0       	rjmp	.+462    	; 0xa7c4 <dir_find+0x1f8>
    a5f6:	8f ef       	ldi	r24, 0xFF	; 255
    a5f8:	9f ef       	ldi	r25, 0xFF	; 255
    a5fa:	dc 01       	movw	r26, r24
    a5fc:	eb 85       	ldd	r30, Y+11	; 0x0b
    a5fe:	fc 85       	ldd	r31, Y+12	; 0x0c
    a600:	80 a7       	std	Z+40, r24	; 0x28
    a602:	91 a7       	std	Z+41, r25	; 0x29
    a604:	a2 a7       	std	Z+42, r26	; 0x2a
    a606:	b3 a7       	std	Z+43, r27	; 0x2b
    a608:	0f ef       	ldi	r16, 0xFF	; 255
    a60a:	1f ef       	ldi	r17, 0xFF	; 255
    a60c:	44 24       	eor	r4, r4
    a60e:	4a 94       	dec	r4
    a610:	54 2c       	mov	r5, r4
    a612:	32 01       	movw	r6, r4
    a614:	7c 96       	adiw	r30, 0x1c	; 28
    a616:	fa 87       	std	Y+10, r31	; 0x0a
    a618:	e9 87       	std	Y+9, r30	; 0x09
    a61a:	eb 85       	ldd	r30, Y+11	; 0x0b
    a61c:	fc 85       	ldd	r31, Y+12	; 0x0c
    a61e:	46 89       	ldd	r20, Z+22	; 0x16
    a620:	57 89       	ldd	r21, Z+23	; 0x17
    a622:	60 8d       	ldd	r22, Z+24	; 0x18
    a624:	71 8d       	ldd	r23, Z+25	; 0x19
    a626:	8b 81       	ldd	r24, Y+3	; 0x03
    a628:	9c 81       	ldd	r25, Y+4	; 0x04
    a62a:	0e 94 ba 49 	call	0x9374	; 0x9374 <move_window>
    a62e:	00 97       	sbiw	r24, 0x00	; 0
    a630:	09 f0       	breq	.+2      	; 0xa634 <dir_find+0x68>
    a632:	c8 c0       	rjmp	.+400    	; 0xa7c4 <dir_find+0x1f8>
    a634:	eb 85       	ldd	r30, Y+11	; 0x0b
    a636:	fc 85       	ldd	r31, Y+12	; 0x0c
    a638:	e2 8c       	ldd	r14, Z+26	; 0x1a
    a63a:	f3 8c       	ldd	r15, Z+27	; 0x1b
    a63c:	f7 01       	movw	r30, r14
    a63e:	d0 80       	ld	r13, Z
    a640:	dd 20       	and	r13, r13
    a642:	09 f4       	brne	.+2      	; 0xa646 <dir_find+0x7a>
    a644:	c1 c0       	rjmp	.+386    	; 0xa7c8 <dir_find+0x1fc>
    a646:	93 85       	ldd	r25, Z+11	; 0x0b
    a648:	89 2f       	mov	r24, r25
    a64a:	8f 73       	andi	r24, 0x3F	; 63
    a64c:	eb 85       	ldd	r30, Y+11	; 0x0b
    a64e:	fc 85       	ldd	r31, Y+12	; 0x0c
    a650:	84 83       	std	Z+4, r24	; 0x04
    a652:	f5 ee       	ldi	r31, 0xE5	; 229
    a654:	df 16       	cp	r13, r31
    a656:	09 f4       	brne	.+2      	; 0xa65a <dir_find+0x8e>
    a658:	a6 c0       	rjmp	.+332    	; 0xa7a6 <dir_find+0x1da>
    a65a:	93 ff       	sbrs	r25, 3
    a65c:	04 c0       	rjmp	.+8      	; 0xa666 <dir_find+0x9a>
    a65e:	8f 30       	cpi	r24, 0x0F	; 15
    a660:	09 f0       	breq	.+2      	; 0xa664 <dir_find+0x98>
    a662:	a1 c0       	rjmp	.+322    	; 0xa7a6 <dir_find+0x1da>
    a664:	03 c0       	rjmp	.+6      	; 0xa66c <dir_find+0xa0>
    a666:	8f 30       	cpi	r24, 0x0F	; 15
    a668:	09 f0       	breq	.+2      	; 0xa66c <dir_find+0xa0>
    a66a:	88 c0       	rjmp	.+272    	; 0xa77c <dir_find+0x1b0>
    a66c:	eb 85       	ldd	r30, Y+11	; 0x0b
    a66e:	fc 85       	ldd	r31, Y+12	; 0x0c
    a670:	87 a1       	ldd	r24, Z+39	; 0x27
    a672:	86 fd       	sbrc	r24, 6
    a674:	9f c0       	rjmp	.+318    	; 0xa7b4 <dir_find+0x1e8>
    a676:	d6 fe       	sbrs	r13, 6
    a678:	10 c0       	rjmp	.+32     	; 0xa69a <dir_find+0xce>
    a67a:	f7 01       	movw	r30, r14
    a67c:	05 85       	ldd	r16, Z+13	; 0x0d
    a67e:	fd 2d       	mov	r31, r13
    a680:	ff 7b       	andi	r31, 0xBF	; 191
    a682:	df 2e       	mov	r13, r31
    a684:	eb 85       	ldd	r30, Y+11	; 0x0b
    a686:	fc 85       	ldd	r31, Y+12	; 0x0c
    a688:	86 85       	ldd	r24, Z+14	; 0x0e
    a68a:	97 85       	ldd	r25, Z+15	; 0x0f
    a68c:	a0 89       	ldd	r26, Z+16	; 0x10
    a68e:	b1 89       	ldd	r27, Z+17	; 0x11
    a690:	80 a7       	std	Z+40, r24	; 0x28
    a692:	91 a7       	std	Z+41, r25	; 0x29
    a694:	a2 a7       	std	Z+42, r26	; 0x2a
    a696:	b3 a7       	std	Z+43, r27	; 0x2b
    a698:	02 c0       	rjmp	.+4      	; 0xa69e <dir_find+0xd2>
    a69a:	1d 11       	cpse	r17, r13
    a69c:	8a c0       	rjmp	.+276    	; 0xa7b2 <dir_find+0x1e6>
    a69e:	f7 01       	movw	r30, r14
    a6a0:	c5 84       	ldd	r12, Z+13	; 0x0d
    a6a2:	c0 12       	cpse	r12, r16
    a6a4:	86 c0       	rjmp	.+268    	; 0xa7b2 <dir_find+0x1e6>
    a6a6:	82 8d       	ldd	r24, Z+26	; 0x1a
    a6a8:	93 8d       	ldd	r25, Z+27	; 0x1b
    a6aa:	89 2b       	or	r24, r25
    a6ac:	09 f0       	breq	.+2      	; 0xa6b0 <dir_find+0xe4>
    a6ae:	91 c0       	rjmp	.+290    	; 0xa7d2 <dir_find+0x206>
    a6b0:	eb 81       	ldd	r30, Y+3	; 0x03
    a6b2:	fc 81       	ldd	r31, Y+4	; 0x04
    a6b4:	03 84       	ldd	r0, Z+11	; 0x0b
    a6b6:	f4 85       	ldd	r31, Z+12	; 0x0c
    a6b8:	e0 2d       	mov	r30, r0
    a6ba:	fe 83       	std	Y+6, r31	; 0x06
    a6bc:	ed 83       	std	Y+5, r30	; 0x05
    a6be:	f7 01       	movw	r30, r14
    a6c0:	80 81       	ld	r24, Z
    a6c2:	8f 73       	andi	r24, 0x3F	; 63
    a6c4:	90 e0       	ldi	r25, 0x00	; 0
    a6c6:	01 97       	sbiw	r24, 0x01	; 1
    a6c8:	fd e0       	ldi	r31, 0x0D	; 13
    a6ca:	f8 9f       	mul	r31, r24
    a6cc:	80 01       	movw	r16, r0
    a6ce:	f9 9f       	mul	r31, r25
    a6d0:	10 0d       	add	r17, r0
    a6d2:	11 24       	eor	r1, r1
    a6d4:	2b ee       	ldi	r18, 0xEB	; 235
    a6d6:	34 e0       	ldi	r19, 0x04	; 4
    a6d8:	3a 83       	std	Y+2, r19	; 0x02
    a6da:	29 83       	std	Y+1, r18	; 0x01
    a6dc:	81 e0       	ldi	r24, 0x01	; 1
    a6de:	90 e0       	ldi	r25, 0x00	; 0
    a6e0:	e9 81       	ldd	r30, Y+1	; 0x01
    a6e2:	fa 81       	ldd	r31, Y+2	; 0x02
    a6e4:	21 91       	ld	r18, Z+
    a6e6:	fa 83       	std	Y+2, r31	; 0x02
    a6e8:	e9 83       	std	Y+1, r30	; 0x01
    a6ea:	f7 01       	movw	r30, r14
    a6ec:	e2 0f       	add	r30, r18
    a6ee:	f1 1d       	adc	r31, r1
    a6f0:	20 80       	ld	r2, Z
    a6f2:	31 80       	ldd	r3, Z+1	; 0x01
    a6f4:	00 97       	sbiw	r24, 0x00	; 0
    a6f6:	39 f1       	breq	.+78     	; 0xa746 <dir_find+0x17a>
    a6f8:	0f 3f       	cpi	r16, 0xFF	; 255
    a6fa:	11 05       	cpc	r17, r1
    a6fc:	11 f0       	breq	.+4      	; 0xa702 <dir_find+0x136>
    a6fe:	08 f0       	brcs	.+2      	; 0xa702 <dir_find+0x136>
    a700:	68 c0       	rjmp	.+208    	; 0xa7d2 <dir_find+0x206>
    a702:	b1 01       	movw	r22, r2
    a704:	80 e0       	ldi	r24, 0x00	; 0
    a706:	90 e0       	ldi	r25, 0x00	; 0
    a708:	0e 94 7e 67 	call	0xcefc	; 0xcefc <ff_wtoupper>
    a70c:	4b 01       	movw	r8, r22
    a70e:	5c 01       	movw	r10, r24
    a710:	98 01       	movw	r18, r16
    a712:	2f 5f       	subi	r18, 0xFF	; 255
    a714:	3f 4f       	sbci	r19, 0xFF	; 255
    a716:	38 87       	std	Y+8, r19	; 0x08
    a718:	2f 83       	std	Y+7, r18	; 0x07
    a71a:	00 0f       	add	r16, r16
    a71c:	11 1f       	adc	r17, r17
    a71e:	ed 81       	ldd	r30, Y+5	; 0x05
    a720:	fe 81       	ldd	r31, Y+6	; 0x06
    a722:	e0 0f       	add	r30, r16
    a724:	f1 1f       	adc	r31, r17
    a726:	60 81       	ld	r22, Z
    a728:	71 81       	ldd	r23, Z+1	; 0x01
    a72a:	80 e0       	ldi	r24, 0x00	; 0
    a72c:	90 e0       	ldi	r25, 0x00	; 0
    a72e:	0e 94 7e 67 	call	0xcefc	; 0xcefc <ff_wtoupper>
    a732:	86 16       	cp	r8, r22
    a734:	97 06       	cpc	r9, r23
    a736:	a8 06       	cpc	r10, r24
    a738:	b9 06       	cpc	r11, r25
    a73a:	09 f0       	breq	.+2      	; 0xa73e <dir_find+0x172>
    a73c:	4a c0       	rjmp	.+148    	; 0xa7d2 <dir_find+0x206>
    a73e:	c1 01       	movw	r24, r2
    a740:	0f 81       	ldd	r16, Y+7	; 0x07
    a742:	18 85       	ldd	r17, Y+8	; 0x08
    a744:	05 c0       	rjmp	.+10     	; 0xa750 <dir_find+0x184>
    a746:	3f ef       	ldi	r19, 0xFF	; 255
    a748:	23 16       	cp	r2, r19
    a74a:	33 06       	cpc	r3, r19
    a74c:	09 f0       	breq	.+2      	; 0xa750 <dir_find+0x184>
    a74e:	41 c0       	rjmp	.+130    	; 0xa7d2 <dir_find+0x206>
    a750:	e9 81       	ldd	r30, Y+1	; 0x01
    a752:	fa 81       	ldd	r31, Y+2	; 0x02
    a754:	e8 5f       	subi	r30, 0xF8	; 248
    a756:	f4 40       	sbci	r31, 0x04	; 4
    a758:	19 f6       	brne	.-122    	; 0xa6e0 <dir_find+0x114>
    a75a:	f7 01       	movw	r30, r14
    a75c:	20 81       	ld	r18, Z
    a75e:	26 ff       	sbrs	r18, 6
    a760:	3a c0       	rjmp	.+116    	; 0xa7d6 <dir_find+0x20a>
    a762:	89 2b       	or	r24, r25
    a764:	c1 f1       	breq	.+112    	; 0xa7d6 <dir_find+0x20a>
    a766:	00 0f       	add	r16, r16
    a768:	11 1f       	adc	r17, r17
    a76a:	ed 81       	ldd	r30, Y+5	; 0x05
    a76c:	fe 81       	ldd	r31, Y+6	; 0x06
    a76e:	e0 0f       	add	r30, r16
    a770:	f1 1f       	adc	r31, r17
    a772:	80 81       	ld	r24, Z
    a774:	91 81       	ldd	r25, Z+1	; 0x01
    a776:	89 2b       	or	r24, r25
    a778:	71 f1       	breq	.+92     	; 0xa7d6 <dir_find+0x20a>
    a77a:	2b c0       	rjmp	.+86     	; 0xa7d2 <dir_find+0x206>
    a77c:	11 11       	cpse	r17, r1
    a77e:	05 c0       	rjmp	.+10     	; 0xa78a <dir_find+0x1be>
    a780:	c7 01       	movw	r24, r14
    a782:	0e 94 8f 46 	call	0x8d1e	; 0x8d1e <sum_sfn>
    a786:	08 17       	cp	r16, r24
    a788:	09 f1       	breq	.+66     	; 0xa7cc <dir_find+0x200>
    a78a:	eb 85       	ldd	r30, Y+11	; 0x0b
    a78c:	fc 85       	ldd	r31, Y+12	; 0x0c
    a78e:	87 a1       	ldd	r24, Z+39	; 0x27
    a790:	80 fd       	sbrc	r24, 0
    a792:	09 c0       	rjmp	.+18     	; 0xa7a6 <dir_find+0x1da>
    a794:	4b e0       	ldi	r20, 0x0B	; 11
    a796:	50 e0       	ldi	r21, 0x00	; 0
    a798:	69 85       	ldd	r22, Y+9	; 0x09
    a79a:	7a 85       	ldd	r23, Y+10	; 0x0a
    a79c:	c7 01       	movw	r24, r14
    a79e:	0e 94 1c 46 	call	0x8c38	; 0x8c38 <mem_cmp>
    a7a2:	89 2b       	or	r24, r25
    a7a4:	99 f0       	breq	.+38     	; 0xa7cc <dir_find+0x200>
    a7a6:	eb 85       	ldd	r30, Y+11	; 0x0b
    a7a8:	fc 85       	ldd	r31, Y+12	; 0x0c
    a7aa:	40 a6       	std	Z+40, r4	; 0x28
    a7ac:	51 a6       	std	Z+41, r5	; 0x29
    a7ae:	62 a6       	std	Z+42, r6	; 0x2a
    a7b0:	73 a6       	std	Z+43, r7	; 0x2b
    a7b2:	1f ef       	ldi	r17, 0xFF	; 255
    a7b4:	60 e0       	ldi	r22, 0x00	; 0
    a7b6:	70 e0       	ldi	r23, 0x00	; 0
    a7b8:	8b 85       	ldd	r24, Y+11	; 0x0b
    a7ba:	9c 85       	ldd	r25, Y+12	; 0x0c
    a7bc:	d5 dc       	rcall	.-1622   	; 0xa168 <dir_next>
    a7be:	00 97       	sbiw	r24, 0x00	; 0
    a7c0:	09 f4       	brne	.+2      	; 0xa7c4 <dir_find+0x1f8>
    a7c2:	2b cf       	rjmp	.-426    	; 0xa61a <dir_find+0x4e>
    a7c4:	28 2f       	mov	r18, r24
    a7c6:	0b c0       	rjmp	.+22     	; 0xa7de <dir_find+0x212>
    a7c8:	24 e0       	ldi	r18, 0x04	; 4
    a7ca:	01 c0       	rjmp	.+2      	; 0xa7ce <dir_find+0x202>
    a7cc:	20 e0       	ldi	r18, 0x00	; 0
    a7ce:	90 e0       	ldi	r25, 0x00	; 0
    a7d0:	06 c0       	rjmp	.+12     	; 0xa7de <dir_find+0x212>
    a7d2:	0c 2d       	mov	r16, r12
    a7d4:	ee cf       	rjmp	.-36     	; 0xa7b2 <dir_find+0x1e6>
    a7d6:	1f ef       	ldi	r17, 0xFF	; 255
    a7d8:	1d 0d       	add	r17, r13
    a7da:	0c 2d       	mov	r16, r12
    a7dc:	eb cf       	rjmp	.-42     	; 0xa7b4 <dir_find+0x1e8>
    a7de:	82 2f       	mov	r24, r18
    a7e0:	2c 96       	adiw	r28, 0x0c	; 12
    a7e2:	e2 e1       	ldi	r30, 0x12	; 18
    a7e4:	0c 94 25 e3 	jmp	0x1c64a	; 0x1c64a <__epilogue_restores__>

0000a7e8 <dir_register>:
    a7e8:	a6 e1       	ldi	r26, 0x16	; 22
    a7ea:	b0 e0       	ldi	r27, 0x00	; 0
    a7ec:	ea ef       	ldi	r30, 0xFA	; 250
    a7ee:	f3 e5       	ldi	r31, 0x53	; 83
    a7f0:	0c 94 09 e3 	jmp	0x1c612	; 0x1c612 <__prologue_saves__>
    a7f4:	fc 01       	movw	r30, r24
    a7f6:	27 a1       	ldd	r18, Z+39	; 0x27
    a7f8:	20 7a       	andi	r18, 0xA0	; 160
    a7fa:	09 f0       	breq	.+2      	; 0xa7fe <dir_register+0x16>
    a7fc:	53 c1       	rjmp	.+678    	; 0xaaa4 <dir_register+0x2bc>
    a7fe:	c0 80       	ld	r12, Z
    a800:	d1 80       	ldd	r13, Z+1	; 0x01
    a802:	f6 01       	movw	r30, r12
    a804:	a3 85       	ldd	r26, Z+11	; 0x0b
    a806:	b4 85       	ldd	r27, Z+12	; 0x0c
    a808:	81 2c       	mov	r8, r1
    a80a:	91 2c       	mov	r9, r1
    a80c:	2d 91       	ld	r18, X+
    a80e:	3d 91       	ld	r19, X+
    a810:	23 2b       	or	r18, r19
    a812:	21 f0       	breq	.+8      	; 0xa81c <dir_register+0x34>
    a814:	ff ef       	ldi	r31, 0xFF	; 255
    a816:	8f 1a       	sub	r8, r31
    a818:	9f 0a       	sbc	r9, r31
    a81a:	f8 cf       	rjmp	.-16     	; 0xa80c <dir_register+0x24>
    a81c:	8c 01       	movw	r16, r24
    a81e:	5c 01       	movw	r10, r24
    a820:	2c e1       	ldi	r18, 0x1C	; 28
    a822:	a2 0e       	add	r10, r18
    a824:	b1 1c       	adc	r11, r1
    a826:	4c e0       	ldi	r20, 0x0C	; 12
    a828:	50 e0       	ldi	r21, 0x00	; 0
    a82a:	b5 01       	movw	r22, r10
    a82c:	ce 01       	movw	r24, r28
    a82e:	01 96       	adiw	r24, 0x01	; 1
    a830:	0e 94 20 48 	call	0x9040	; 0x9040 <mem_cpy.part.0>
    a834:	8c 85       	ldd	r24, Y+12	; 0x0c
    a836:	80 ff       	sbrs	r24, 0
    a838:	94 c0       	rjmp	.+296    	; 0xa962 <dir_register+0x17a>
    a83a:	80 e4       	ldi	r24, 0x40	; 64
    a83c:	f8 01       	movw	r30, r16
    a83e:	87 a3       	std	Z+39, r24	; 0x27
    a840:	41 2c       	mov	r4, r1
    a842:	51 2c       	mov	r5, r1
    a844:	32 01       	movw	r6, r4
    a846:	43 94       	inc	r4
    a848:	72 01       	movw	r14, r4
    a84a:	f6 01       	movw	r30, r12
    a84c:	23 84       	ldd	r2, Z+11	; 0x0b
    a84e:	34 84       	ldd	r3, Z+12	; 0x0c
    a850:	4b e0       	ldi	r20, 0x0B	; 11
    a852:	50 e0       	ldi	r21, 0x00	; 0
    a854:	be 01       	movw	r22, r28
    a856:	6f 5f       	subi	r22, 0xFF	; 255
    a858:	7f 4f       	sbci	r23, 0xFF	; 255
    a85a:	c5 01       	movw	r24, r10
    a85c:	0e 94 20 48 	call	0x9040	; 0x9040 <mem_cpy.part.0>
    a860:	f6 e0       	ldi	r31, 0x06	; 6
    a862:	4f 16       	cp	r4, r31
    a864:	51 04       	cpc	r5, r1
    a866:	18 f1       	brcs	.+70     	; 0xa8ae <dir_register+0xc6>
    a868:	f1 01       	movw	r30, r2
    a86a:	b3 01       	movw	r22, r6
    a86c:	a2 01       	movw	r20, r4
    a86e:	81 91       	ld	r24, Z+
    a870:	91 91       	ld	r25, Z+
    a872:	00 97       	sbiw	r24, 0x00	; 0
    a874:	d9 f0       	breq	.+54     	; 0xa8ac <dir_register+0xc4>
    a876:	20 e1       	ldi	r18, 0x10	; 16
    a878:	30 e0       	ldi	r19, 0x00	; 0
    a87a:	44 0f       	add	r20, r20
    a87c:	55 1f       	adc	r21, r21
    a87e:	66 1f       	adc	r22, r22
    a880:	77 1f       	adc	r23, r23
    a882:	dc 01       	movw	r26, r24
    a884:	a1 70       	andi	r26, 0x01	; 1
    a886:	bb 27       	eor	r27, r27
    a888:	4a 0f       	add	r20, r26
    a88a:	5b 1f       	adc	r21, r27
    a88c:	61 1d       	adc	r22, r1
    a88e:	71 1d       	adc	r23, r1
    a890:	96 95       	lsr	r25
    a892:	87 95       	ror	r24
    a894:	60 ff       	sbrs	r22, 0
    a896:	06 c0       	rjmp	.+12     	; 0xa8a4 <dir_register+0xbc>
    a898:	a1 e2       	ldi	r26, 0x21	; 33
    a89a:	4a 27       	eor	r20, r26
    a89c:	a0 e1       	ldi	r26, 0x10	; 16
    a89e:	5a 27       	eor	r21, r26
    a8a0:	a1 e0       	ldi	r26, 0x01	; 1
    a8a2:	6a 27       	eor	r22, r26
    a8a4:	21 50       	subi	r18, 0x01	; 1
    a8a6:	31 09       	sbc	r19, r1
    a8a8:	41 f7       	brne	.-48     	; 0xa87a <dir_register+0x92>
    a8aa:	e1 cf       	rjmp	.-62     	; 0xa86e <dir_register+0x86>
    a8ac:	7a 01       	movw	r14, r20
    a8ae:	fe 01       	movw	r30, r28
    a8b0:	75 96       	adiw	r30, 0x15	; 21
    a8b2:	27 e0       	ldi	r18, 0x07	; 7
    a8b4:	30 e0       	ldi	r19, 0x00	; 0
    a8b6:	9e 2d       	mov	r25, r14
    a8b8:	9f 70       	andi	r25, 0x0F	; 15
    a8ba:	80 e3       	ldi	r24, 0x30	; 48
    a8bc:	89 0f       	add	r24, r25
    a8be:	8a 33       	cpi	r24, 0x3A	; 58
    a8c0:	10 f0       	brcs	.+4      	; 0xa8c6 <dir_register+0xde>
    a8c2:	87 e3       	ldi	r24, 0x37	; 55
    a8c4:	89 0f       	add	r24, r25
    a8c6:	21 50       	subi	r18, 0x01	; 1
    a8c8:	31 09       	sbc	r19, r1
    a8ca:	82 93       	st	-Z, r24
    a8cc:	a4 e0       	ldi	r26, 0x04	; 4
    a8ce:	f6 94       	lsr	r15
    a8d0:	e7 94       	ror	r14
    a8d2:	aa 95       	dec	r26
    a8d4:	e1 f7       	brne	.-8      	; 0xa8ce <dir_register+0xe6>
    a8d6:	e1 14       	cp	r14, r1
    a8d8:	f1 04       	cpc	r15, r1
    a8da:	69 f7       	brne	.-38     	; 0xa8b6 <dir_register+0xce>
    a8dc:	ed e0       	ldi	r30, 0x0D	; 13
    a8de:	f0 e0       	ldi	r31, 0x00	; 0
    a8e0:	ec 0f       	add	r30, r28
    a8e2:	fd 1f       	adc	r31, r29
    a8e4:	e2 0f       	add	r30, r18
    a8e6:	f3 1f       	adc	r31, r19
    a8e8:	4e e7       	ldi	r20, 0x7E	; 126
    a8ea:	40 83       	st	Z, r20
    a8ec:	f5 01       	movw	r30, r10
    a8ee:	80 e0       	ldi	r24, 0x00	; 0
    a8f0:	90 e0       	ldi	r25, 0x00	; 0
    a8f2:	28 17       	cp	r18, r24
    a8f4:	39 07       	cpc	r19, r25
    a8f6:	29 f0       	breq	.+10     	; 0xa902 <dir_register+0x11a>
    a8f8:	41 91       	ld	r20, Z+
    a8fa:	40 32       	cpi	r20, 0x20	; 32
    a8fc:	11 f0       	breq	.+4      	; 0xa902 <dir_register+0x11a>
    a8fe:	01 96       	adiw	r24, 0x01	; 1
    a900:	f8 cf       	rjmp	.-16     	; 0xa8f2 <dir_register+0x10a>
    a902:	f5 01       	movw	r30, r10
    a904:	e8 0f       	add	r30, r24
    a906:	f9 1f       	adc	r31, r25
    a908:	28 30       	cpi	r18, 0x08	; 8
    a90a:	31 05       	cpc	r19, r1
    a90c:	50 f4       	brcc	.+20     	; 0xa922 <dir_register+0x13a>
    a90e:	ad e0       	ldi	r26, 0x0D	; 13
    a910:	b0 e0       	ldi	r27, 0x00	; 0
    a912:	ac 0f       	add	r26, r28
    a914:	bd 1f       	adc	r27, r29
    a916:	a2 0f       	add	r26, r18
    a918:	b3 1f       	adc	r27, r19
    a91a:	8c 91       	ld	r24, X
    a91c:	2f 5f       	subi	r18, 0xFF	; 255
    a91e:	3f 4f       	sbci	r19, 0xFF	; 255
    a920:	01 c0       	rjmp	.+2      	; 0xa924 <dir_register+0x13c>
    a922:	80 e2       	ldi	r24, 0x20	; 32
    a924:	81 93       	st	Z+, r24
    a926:	cf 01       	movw	r24, r30
    a928:	8a 19       	sub	r24, r10
    a92a:	9b 09       	sbc	r25, r11
    a92c:	08 97       	sbiw	r24, 0x08	; 8
    a92e:	60 f3       	brcs	.-40     	; 0xa908 <dir_register+0x120>
    a930:	c8 01       	movw	r24, r16
    a932:	4c de       	rcall	.-872    	; 0xa5cc <dir_find>
    a934:	00 97       	sbiw	r24, 0x00	; 0
    a936:	71 f4       	brne	.+28     	; 0xa954 <dir_register+0x16c>
    a938:	8f ef       	ldi	r24, 0xFF	; 255
    a93a:	48 1a       	sub	r4, r24
    a93c:	58 0a       	sbc	r5, r24
    a93e:	68 0a       	sbc	r6, r24
    a940:	78 0a       	sbc	r7, r24
    a942:	94 e6       	ldi	r25, 0x64	; 100
    a944:	49 16       	cp	r4, r25
    a946:	51 04       	cpc	r5, r1
    a948:	61 04       	cpc	r6, r1
    a94a:	71 04       	cpc	r7, r1
    a94c:	09 f0       	breq	.+2      	; 0xa950 <dir_register+0x168>
    a94e:	7c cf       	rjmp	.-264    	; 0xa848 <dir_register+0x60>
    a950:	27 e0       	ldi	r18, 0x07	; 7
    a952:	a9 c0       	rjmp	.+338    	; 0xaaa6 <dir_register+0x2be>
    a954:	84 30       	cpi	r24, 0x04	; 4
    a956:	91 05       	cpc	r25, r1
    a958:	09 f0       	breq	.+2      	; 0xa95c <dir_register+0x174>
    a95a:	ce c0       	rjmp	.+412    	; 0xaaf8 <dir_register+0x310>
    a95c:	8c 85       	ldd	r24, Y+12	; 0x0c
    a95e:	f8 01       	movw	r30, r16
    a960:	87 a3       	std	Z+39, r24	; 0x27
    a962:	8c 85       	ldd	r24, Y+12	; 0x0c
    a964:	81 ff       	sbrs	r24, 1
    a966:	0b c0       	rjmp	.+22     	; 0xa97e <dir_register+0x196>
    a968:	c4 01       	movw	r24, r8
    a96a:	0c 96       	adiw	r24, 0x0c	; 12
    a96c:	6d e0       	ldi	r22, 0x0D	; 13
    a96e:	70 e0       	ldi	r23, 0x00	; 0
    a970:	0e 94 75 e2 	call	0x1c4ea	; 0x1c4ea <__udivmodhi4>
    a974:	7b 01       	movw	r14, r22
    a976:	ff ef       	ldi	r31, 0xFF	; 255
    a978:	ef 1a       	sub	r14, r31
    a97a:	ff 0a       	sbc	r15, r31
    a97c:	03 c0       	rjmp	.+6      	; 0xa984 <dir_register+0x19c>
    a97e:	ee 24       	eor	r14, r14
    a980:	e3 94       	inc	r14
    a982:	f1 2c       	mov	r15, r1
    a984:	b7 01       	movw	r22, r14
    a986:	c8 01       	movw	r24, r16
    a988:	d7 dc       	rcall	.-1618   	; 0xa338 <dir_alloc>
    a98a:	00 97       	sbiw	r24, 0x00	; 0
    a98c:	09 f0       	breq	.+2      	; 0xa990 <dir_register+0x1a8>
    a98e:	b4 c0       	rjmp	.+360    	; 0xaaf8 <dir_register+0x310>
    a990:	21 e0       	ldi	r18, 0x01	; 1
    a992:	e2 1a       	sub	r14, r18
    a994:	f1 08       	sbc	r15, r1
    a996:	09 f4       	brne	.+2      	; 0xa99a <dir_register+0x1b2>
    a998:	88 c0       	rjmp	.+272    	; 0xaaaa <dir_register+0x2c2>
    a99a:	f8 01       	movw	r30, r16
    a99c:	46 85       	ldd	r20, Z+14	; 0x0e
    a99e:	57 85       	ldd	r21, Z+15	; 0x0f
    a9a0:	60 89       	ldd	r22, Z+16	; 0x10
    a9a2:	71 89       	ldd	r23, Z+17	; 0x11
    a9a4:	c7 01       	movw	r24, r14
    a9a6:	e5 e0       	ldi	r30, 0x05	; 5
    a9a8:	88 0f       	add	r24, r24
    a9aa:	99 1f       	adc	r25, r25
    a9ac:	ea 95       	dec	r30
    a9ae:	e1 f7       	brne	.-8      	; 0xa9a8 <dir_register+0x1c0>
    a9b0:	48 1b       	sub	r20, r24
    a9b2:	59 0b       	sbc	r21, r25
    a9b4:	61 09       	sbc	r22, r1
    a9b6:	71 09       	sbc	r23, r1
    a9b8:	c8 01       	movw	r24, r16
    a9ba:	5e d9       	rcall	.-3396   	; 0x9c78 <dir_sdi>
    a9bc:	00 97       	sbiw	r24, 0x00	; 0
    a9be:	09 f0       	breq	.+2      	; 0xa9c2 <dir_register+0x1da>
    a9c0:	9b c0       	rjmp	.+310    	; 0xaaf8 <dir_register+0x310>
    a9c2:	c5 01       	movw	r24, r10
    a9c4:	0e 94 8f 46 	call	0x8d1e	; 0x8d1e <sum_sfn>
    a9c8:	68 2e       	mov	r6, r24
    a9ca:	5f e0       	ldi	r21, 0x0F	; 15
    a9cc:	35 2e       	mov	r3, r21
    a9ce:	6d e0       	ldi	r22, 0x0D	; 13
    a9d0:	46 2e       	mov	r4, r22
    a9d2:	78 ef       	ldi	r23, 0xF8	; 248
    a9d4:	87 2e       	mov	r8, r23
    a9d6:	74 e0       	ldi	r23, 0x04	; 4
    a9d8:	97 2e       	mov	r9, r23
    a9da:	55 24       	eor	r5, r5
    a9dc:	53 94       	inc	r5
    a9de:	f8 01       	movw	r30, r16
    a9e0:	46 89       	ldd	r20, Z+22	; 0x16
    a9e2:	57 89       	ldd	r21, Z+23	; 0x17
    a9e4:	60 8d       	ldd	r22, Z+24	; 0x18
    a9e6:	71 8d       	ldd	r23, Z+25	; 0x19
    a9e8:	c6 01       	movw	r24, r12
    a9ea:	0e 94 ba 49 	call	0x9374	; 0x9374 <move_window>
    a9ee:	00 97       	sbiw	r24, 0x00	; 0
    a9f0:	09 f0       	breq	.+2      	; 0xa9f4 <dir_register+0x20c>
    a9f2:	82 c0       	rjmp	.+260    	; 0xaaf8 <dir_register+0x310>
    a9f4:	f6 01       	movw	r30, r12
    a9f6:	63 85       	ldd	r22, Z+11	; 0x0b
    a9f8:	74 85       	ldd	r23, Z+12	; 0x0c
    a9fa:	f8 01       	movw	r30, r16
    a9fc:	02 8c       	ldd	r0, Z+26	; 0x1a
    a9fe:	f3 8d       	ldd	r31, Z+27	; 0x1b
    aa00:	e0 2d       	mov	r30, r0
    aa02:	fe 8b       	std	Y+22, r31	; 0x16
    aa04:	ed 8b       	std	Y+21, r30	; 0x15
    aa06:	7e 2c       	mov	r7, r14
    aa08:	65 86       	std	Z+13, r6	; 0x0d
    aa0a:	33 86       	std	Z+11, r3	; 0x0b
    aa0c:	14 86       	std	Z+12, r1	; 0x0c
    aa0e:	12 8e       	std	Z+26, r1	; 0x1a
    aa10:	13 8e       	std	Z+27, r1	; 0x1b
    aa12:	97 01       	movw	r18, r14
    aa14:	33 27       	eor	r19, r19
    aa16:	21 50       	subi	r18, 0x01	; 1
    aa18:	31 09       	sbc	r19, r1
    aa1a:	42 9e       	mul	r4, r18
    aa1c:	c0 01       	movw	r24, r0
    aa1e:	43 9e       	mul	r4, r19
    aa20:	90 0d       	add	r25, r0
    aa22:	11 24       	eor	r1, r1
    aa24:	ab ee       	ldi	r26, 0xEB	; 235
    aa26:	b4 e0       	ldi	r27, 0x04	; 4
    aa28:	20 e0       	ldi	r18, 0x00	; 0
    aa2a:	30 e0       	ldi	r19, 0x00	; 0
    aa2c:	2f 3f       	cpi	r18, 0xFF	; 255
    aa2e:	ff ef       	ldi	r31, 0xFF	; 255
    aa30:	3f 07       	cpc	r19, r31
    aa32:	49 f0       	breq	.+18     	; 0xaa46 <dir_register+0x25e>
    aa34:	9c 01       	movw	r18, r24
    aa36:	22 0f       	add	r18, r18
    aa38:	33 1f       	adc	r19, r19
    aa3a:	26 0f       	add	r18, r22
    aa3c:	37 1f       	adc	r19, r23
    aa3e:	f9 01       	movw	r30, r18
    aa40:	20 81       	ld	r18, Z
    aa42:	31 81       	ldd	r19, Z+1	; 0x01
    aa44:	01 96       	adiw	r24, 0x01	; 1
    aa46:	4d 91       	ld	r20, X+
    aa48:	ed 89       	ldd	r30, Y+21	; 0x15
    aa4a:	fe 89       	ldd	r31, Y+22	; 0x16
    aa4c:	e4 0f       	add	r30, r20
    aa4e:	f1 1d       	adc	r31, r1
    aa50:	20 83       	st	Z, r18
    aa52:	31 83       	std	Z+1, r19	; 0x01
    aa54:	21 15       	cp	r18, r1
    aa56:	31 05       	cpc	r19, r1
    aa58:	11 f4       	brne	.+4      	; 0xaa5e <dir_register+0x276>
    aa5a:	2f ef       	ldi	r18, 0xFF	; 255
    aa5c:	3f ef       	ldi	r19, 0xFF	; 255
    aa5e:	8a 16       	cp	r8, r26
    aa60:	9b 06       	cpc	r9, r27
    aa62:	21 f7       	brne	.-56     	; 0xaa2c <dir_register+0x244>
    aa64:	2f 3f       	cpi	r18, 0xFF	; 255
    aa66:	3f 4f       	sbci	r19, 0xFF	; 255
    aa68:	49 f0       	breq	.+18     	; 0xaa7c <dir_register+0x294>
    aa6a:	88 0f       	add	r24, r24
    aa6c:	99 1f       	adc	r25, r25
    aa6e:	db 01       	movw	r26, r22
    aa70:	a8 0f       	add	r26, r24
    aa72:	b9 1f       	adc	r27, r25
    aa74:	8d 91       	ld	r24, X+
    aa76:	9c 91       	ld	r25, X
    aa78:	89 2b       	or	r24, r25
    aa7a:	19 f4       	brne	.+6      	; 0xaa82 <dir_register+0x29a>
    aa7c:	27 2d       	mov	r18, r7
    aa7e:	20 64       	ori	r18, 0x40	; 64
    aa80:	72 2e       	mov	r7, r18
    aa82:	ed 89       	ldd	r30, Y+21	; 0x15
    aa84:	fe 89       	ldd	r31, Y+22	; 0x16
    aa86:	70 82       	st	Z, r7
    aa88:	f6 01       	movw	r30, r12
    aa8a:	53 82       	std	Z+3, r5	; 0x03
    aa8c:	60 e0       	ldi	r22, 0x00	; 0
    aa8e:	70 e0       	ldi	r23, 0x00	; 0
    aa90:	c8 01       	movw	r24, r16
    aa92:	6a db       	rcall	.-2348   	; 0xa168 <dir_next>
    aa94:	00 97       	sbiw	r24, 0x00	; 0
    aa96:	81 f5       	brne	.+96     	; 0xaaf8 <dir_register+0x310>
    aa98:	f1 e0       	ldi	r31, 0x01	; 1
    aa9a:	ef 1a       	sub	r14, r31
    aa9c:	f1 08       	sbc	r15, r1
    aa9e:	09 f0       	breq	.+2      	; 0xaaa2 <dir_register+0x2ba>
    aaa0:	9e cf       	rjmp	.-196    	; 0xa9de <dir_register+0x1f6>
    aaa2:	03 c0       	rjmp	.+6      	; 0xaaaa <dir_register+0x2c2>
    aaa4:	26 e0       	ldi	r18, 0x06	; 6
    aaa6:	90 e0       	ldi	r25, 0x00	; 0
    aaa8:	28 c0       	rjmp	.+80     	; 0xaafa <dir_register+0x312>
    aaaa:	f8 01       	movw	r30, r16
    aaac:	46 89       	ldd	r20, Z+22	; 0x16
    aaae:	57 89       	ldd	r21, Z+23	; 0x17
    aab0:	60 8d       	ldd	r22, Z+24	; 0x18
    aab2:	71 8d       	ldd	r23, Z+25	; 0x19
    aab4:	c6 01       	movw	r24, r12
    aab6:	0e 94 ba 49 	call	0x9374	; 0x9374 <move_window>
    aaba:	00 97       	sbiw	r24, 0x00	; 0
    aabc:	e9 f4       	brne	.+58     	; 0xaaf8 <dir_register+0x310>
    aabe:	40 e2       	ldi	r20, 0x20	; 32
    aac0:	50 e0       	ldi	r21, 0x00	; 0
    aac2:	60 e0       	ldi	r22, 0x00	; 0
    aac4:	70 e0       	ldi	r23, 0x00	; 0
    aac6:	f8 01       	movw	r30, r16
    aac8:	82 8d       	ldd	r24, Z+26	; 0x1a
    aaca:	93 8d       	ldd	r25, Z+27	; 0x1b
    aacc:	0e 94 13 46 	call	0x8c26	; 0x8c26 <mem_set>
    aad0:	4b e0       	ldi	r20, 0x0B	; 11
    aad2:	50 e0       	ldi	r21, 0x00	; 0
    aad4:	b5 01       	movw	r22, r10
    aad6:	f8 01       	movw	r30, r16
    aad8:	82 8d       	ldd	r24, Z+26	; 0x1a
    aada:	93 8d       	ldd	r25, Z+27	; 0x1b
    aadc:	0e 94 20 48 	call	0x9040	; 0x9040 <mem_cpy.part.0>
    aae0:	f8 01       	movw	r30, r16
    aae2:	22 8d       	ldd	r18, Z+26	; 0x1a
    aae4:	33 8d       	ldd	r19, Z+27	; 0x1b
    aae6:	87 a1       	ldd	r24, Z+39	; 0x27
    aae8:	88 71       	andi	r24, 0x18	; 24
    aaea:	f9 01       	movw	r30, r18
    aaec:	84 87       	std	Z+12, r24	; 0x0c
    aaee:	81 e0       	ldi	r24, 0x01	; 1
    aaf0:	f6 01       	movw	r30, r12
    aaf2:	83 83       	std	Z+3, r24	; 0x03
    aaf4:	20 e0       	ldi	r18, 0x00	; 0
    aaf6:	d7 cf       	rjmp	.-82     	; 0xaaa6 <dir_register+0x2be>
    aaf8:	28 2f       	mov	r18, r24
    aafa:	82 2f       	mov	r24, r18
    aafc:	66 96       	adiw	r28, 0x16	; 22
    aafe:	e2 e1       	ldi	r30, 0x12	; 18
    ab00:	0c 94 25 e3 	jmp	0x1c64a	; 0x1c64a <__epilogue_restores__>

0000ab04 <follow_path>:
    ab04:	a8 e0       	ldi	r26, 0x08	; 8
    ab06:	b0 e0       	ldi	r27, 0x00	; 0
    ab08:	e8 e8       	ldi	r30, 0x88	; 136
    ab0a:	f5 e5       	ldi	r31, 0x55	; 85
    ab0c:	0c 94 09 e3 	jmp	0x1c612	; 0x1c612 <__prologue_saves__>
    ab10:	8c 01       	movw	r16, r24
    ab12:	78 87       	std	Y+8, r23	; 0x08
    ab14:	6f 83       	std	Y+7, r22	; 0x07
    ab16:	dc 01       	movw	r26, r24
    ab18:	0d 90       	ld	r0, X+
    ab1a:	bc 91       	ld	r27, X
    ab1c:	a0 2d       	mov	r26, r0
    ab1e:	ba 83       	std	Y+2, r27	; 0x02
    ab20:	a9 83       	std	Y+1, r26	; 0x01
    ab22:	fb 01       	movw	r30, r22
    ab24:	80 81       	ld	r24, Z
    ab26:	8f 32       	cpi	r24, 0x2F	; 47
    ab28:	11 f0       	breq	.+4      	; 0xab2e <follow_path+0x2a>
    ab2a:	8c 35       	cpi	r24, 0x5C	; 92
    ab2c:	19 f4       	brne	.+6      	; 0xab34 <follow_path+0x30>
    ab2e:	2f 81       	ldd	r18, Y+7	; 0x07
    ab30:	38 85       	ldd	r19, Y+8	; 0x08
    ab32:	0c c0       	rjmp	.+24     	; 0xab4c <follow_path+0x48>
    ab34:	e9 81       	ldd	r30, Y+1	; 0x01
    ab36:	fa 81       	ldd	r31, Y+2	; 0x02
    ab38:	85 89       	ldd	r24, Z+21	; 0x15
    ab3a:	96 89       	ldd	r25, Z+22	; 0x16
    ab3c:	a7 89       	ldd	r26, Z+23	; 0x17
    ab3e:	b0 8d       	ldd	r27, Z+24	; 0x18
    ab40:	f8 01       	movw	r30, r16
    ab42:	86 83       	std	Z+6, r24	; 0x06
    ab44:	97 83       	std	Z+7, r25	; 0x07
    ab46:	a0 87       	std	Z+8, r26	; 0x08
    ab48:	b1 87       	std	Z+9, r27	; 0x09
    ab4a:	0f c0       	rjmp	.+30     	; 0xab6a <follow_path+0x66>
    ab4c:	38 87       	std	Y+8, r19	; 0x08
    ab4e:	2f 83       	std	Y+7, r18	; 0x07
    ab50:	d9 01       	movw	r26, r18
    ab52:	8c 91       	ld	r24, X
    ab54:	2f 5f       	subi	r18, 0xFF	; 255
    ab56:	3f 4f       	sbci	r19, 0xFF	; 255
    ab58:	8f 32       	cpi	r24, 0x2F	; 47
    ab5a:	c1 f3       	breq	.-16     	; 0xab4c <follow_path+0x48>
    ab5c:	8c 35       	cpi	r24, 0x5C	; 92
    ab5e:	b1 f3       	breq	.-20     	; 0xab4c <follow_path+0x48>
    ab60:	f8 01       	movw	r30, r16
    ab62:	16 82       	std	Z+6, r1	; 0x06
    ab64:	17 82       	std	Z+7, r1	; 0x07
    ab66:	10 86       	std	Z+8, r1	; 0x08
    ab68:	11 86       	std	Z+9, r1	; 0x09
    ab6a:	af 81       	ldd	r26, Y+7	; 0x07
    ab6c:	b8 85       	ldd	r27, Y+8	; 0x08
    ab6e:	8c 91       	ld	r24, X
    ab70:	80 32       	cpi	r24, 0x20	; 32
    ab72:	58 f0       	brcs	.+22     	; 0xab8a <follow_path+0x86>
    ab74:	f8 01       	movw	r30, r16
    ab76:	7c 96       	adiw	r30, 0x1c	; 28
    ab78:	fc 83       	std	Y+4, r31	; 0x04
    ab7a:	eb 83       	std	Y+3, r30	; 0x03
    ab7c:	29 81       	ldd	r18, Y+1	; 0x01
    ab7e:	3a 81       	ldd	r19, Y+2	; 0x02
    ab80:	2b 5c       	subi	r18, 0xCB	; 203
    ab82:	3f 4f       	sbci	r19, 0xFF	; 255
    ab84:	3e 83       	std	Y+6, r19	; 0x06
    ab86:	2d 83       	std	Y+5, r18	; 0x05
    ab88:	76 c0       	rjmp	.+236    	; 0xac76 <follow_path+0x172>
    ab8a:	80 e8       	ldi	r24, 0x80	; 128
    ab8c:	f8 01       	movw	r30, r16
    ab8e:	87 a3       	std	Z+39, r24	; 0x27
    ab90:	40 e0       	ldi	r20, 0x00	; 0
    ab92:	50 e0       	ldi	r21, 0x00	; 0
    ab94:	ba 01       	movw	r22, r20
    ab96:	c8 01       	movw	r24, r16
    ab98:	6f d8       	rcall	.-3874   	; 0x9c78 <dir_sdi>
    ab9a:	ec c1       	rjmp	.+984    	; 0xaf74 <follow_path+0x470>
    ab9c:	65 eb       	ldi	r22, 0xB5	; 181
    ab9e:	71 e0       	ldi	r23, 0x01	; 1
    aba0:	0e 94 69 67 	call	0xced2	; 0xced2 <ff_oem2uni>
    aba4:	00 97       	sbiw	r24, 0x00	; 0
    aba6:	09 f4       	brne	.+2      	; 0xabaa <follow_path+0xa6>
    aba8:	b8 c1       	rjmp	.+880    	; 0xaf1a <follow_path+0x416>
    abaa:	80 32       	cpi	r24, 0x20	; 32
    abac:	91 05       	cpc	r25, r1
    abae:	30 f1       	brcs	.+76     	; 0xabfc <follow_path+0xf8>
    abb0:	8f 32       	cpi	r24, 0x2F	; 47
    abb2:	91 05       	cpc	r25, r1
    abb4:	09 f4       	brne	.+2      	; 0xabb8 <follow_path+0xb4>
    abb6:	6b c0       	rjmp	.+214    	; 0xac8e <follow_path+0x18a>
    abb8:	8c 35       	cpi	r24, 0x5C	; 92
    abba:	91 05       	cpc	r25, r1
    abbc:	09 f4       	brne	.+2      	; 0xabc0 <follow_path+0xbc>
    abbe:	67 c0       	rjmp	.+206    	; 0xac8e <follow_path+0x18a>
    abc0:	80 38       	cpi	r24, 0x80	; 128
    abc2:	91 05       	cpc	r25, r1
    abc4:	28 f4       	brcc	.+10     	; 0xabd0 <follow_path+0xcc>
    abc6:	e7 e2       	ldi	r30, 0x27	; 39
    abc8:	f4 e0       	ldi	r31, 0x04	; 4
    abca:	21 91       	ld	r18, Z+
    abcc:	21 11       	cpse	r18, r1
    abce:	61 c0       	rjmp	.+194    	; 0xac92 <follow_path+0x18e>
    abd0:	ef 81       	ldd	r30, Y+7	; 0x07
    abd2:	f8 85       	ldd	r31, Y+8	; 0x08
    abd4:	ef 3f       	cpi	r30, 0xFF	; 255
    abd6:	f1 05       	cpc	r31, r1
    abd8:	09 f4       	brne	.+2      	; 0xabdc <follow_path+0xd8>
    abda:	9f c1       	rjmp	.+830    	; 0xaf1a <follow_path+0x416>
    abdc:	31 96       	adiw	r30, 0x01	; 1
    abde:	f8 87       	std	Y+8, r31	; 0x08
    abe0:	ef 83       	std	Y+7, r30	; 0x07
    abe2:	d6 01       	movw	r26, r12
    abe4:	8d 93       	st	X+, r24
    abe6:	9d 93       	st	X+, r25
    abe8:	6d 01       	movw	r12, r26
    abea:	bf ef       	ldi	r27, 0xFF	; 255
    abec:	eb 1a       	sub	r14, r27
    abee:	fb 0a       	sbc	r15, r27
    abf0:	f7 01       	movw	r30, r14
    abf2:	31 97       	sbiw	r30, 0x01	; 1
    abf4:	80 81       	ld	r24, Z
    abf6:	90 e0       	ldi	r25, 0x00	; 0
    abf8:	00 97       	sbiw	r24, 0x00	; 0
    abfa:	81 f6       	brne	.-96     	; 0xab9c <follow_path+0x98>
    abfc:	74 e0       	ldi	r23, 0x04	; 4
    abfe:	37 2e       	mov	r3, r23
    ac00:	2f 81       	ldd	r18, Y+7	; 0x07
    ac02:	38 85       	ldd	r19, Y+8	; 0x08
    ac04:	22 0f       	add	r18, r18
    ac06:	33 1f       	adc	r19, r19
    ac08:	8f 81       	ldd	r24, Y+7	; 0x07
    ac0a:	98 85       	ldd	r25, Y+8	; 0x08
    ac0c:	01 97       	sbiw	r24, 0x01	; 1
    ac0e:	09 f0       	breq	.+2      	; 0xac12 <follow_path+0x10e>
    ac10:	51 c0       	rjmp	.+162    	; 0xacb4 <follow_path+0x1b0>
    ac12:	d5 01       	movw	r26, r10
    ac14:	8d 91       	ld	r24, X+
    ac16:	9c 91       	ld	r25, X
    ac18:	8e 97       	sbiw	r24, 0x2e	; 46
    ac1a:	09 f0       	breq	.+2      	; 0xac1e <follow_path+0x11a>
    ac1c:	57 c0       	rjmp	.+174    	; 0xaccc <follow_path+0x1c8>
    ac1e:	f9 01       	movw	r30, r18
    ac20:	ea 0d       	add	r30, r10
    ac22:	fb 1d       	adc	r31, r11
    ac24:	11 82       	std	Z+1, r1	; 0x01
    ac26:	10 82       	st	Z, r1
    ac28:	f8 01       	movw	r30, r16
    ac2a:	7c 96       	adiw	r30, 0x1c	; 28
    ac2c:	80 e0       	ldi	r24, 0x00	; 0
    ac2e:	90 e0       	ldi	r25, 0x00	; 0
    ac30:	2f 81       	ldd	r18, Y+7	; 0x07
    ac32:	38 85       	ldd	r19, Y+8	; 0x08
    ac34:	82 17       	cp	r24, r18
    ac36:	93 07       	cpc	r25, r19
    ac38:	08 f0       	brcs	.+2      	; 0xac3c <follow_path+0x138>
    ac3a:	4c c0       	rjmp	.+152    	; 0xacd4 <follow_path+0x1d0>
    ac3c:	2e e2       	ldi	r18, 0x2E	; 46
    ac3e:	21 93       	st	Z+, r18
    ac40:	01 96       	adiw	r24, 0x01	; 1
    ac42:	8b 30       	cpi	r24, 0x0B	; 11
    ac44:	91 05       	cpc	r25, r1
    ac46:	a1 f7       	brne	.-24     	; 0xac30 <follow_path+0x12c>
    ac48:	83 2d       	mov	r24, r3
    ac4a:	80 62       	ori	r24, 0x20	; 32
    ac4c:	f8 01       	movw	r30, r16
    ac4e:	87 a3       	std	Z+39, r24	; 0x27
    ac50:	c8 01       	movw	r24, r16
    ac52:	bc dc       	rcall	.-1672   	; 0xa5cc <dir_find>
    ac54:	f8 01       	movw	r30, r16
    ac56:	27 a1       	ldd	r18, Z+39	; 0x27
    ac58:	00 97       	sbiw	r24, 0x00	; 0
    ac5a:	09 f4       	brne	.+2      	; 0xac5e <follow_path+0x15a>
    ac5c:	6a c1       	rjmp	.+724    	; 0xaf32 <follow_path+0x42e>
    ac5e:	84 30       	cpi	r24, 0x04	; 4
    ac60:	91 05       	cpc	r25, r1
    ac62:	09 f0       	breq	.+2      	; 0xac66 <follow_path+0x162>
    ac64:	87 c1       	rjmp	.+782    	; 0xaf74 <follow_path+0x470>
    ac66:	32 2f       	mov	r19, r18
    ac68:	34 70       	andi	r19, 0x04	; 4
    ac6a:	25 ff       	sbrs	r18, 5
    ac6c:	5f c1       	rjmp	.+702    	; 0xaf2c <follow_path+0x428>
    ac6e:	31 11       	cpse	r19, r1
    ac70:	57 c1       	rjmp	.+686    	; 0xaf20 <follow_path+0x41c>
    ac72:	f8 86       	std	Y+8, r15	; 0x08
    ac74:	ef 82       	std	Y+7, r14	; 0x07
    ac76:	d8 01       	movw	r26, r16
    ac78:	ed 91       	ld	r30, X+
    ac7a:	fc 91       	ld	r31, X
    ac7c:	a3 84       	ldd	r10, Z+11	; 0x0b
    ac7e:	b4 84       	ldd	r11, Z+12	; 0x0c
    ac80:	45 01       	movw	r8, r10
    ac82:	65 01       	movw	r12, r10
    ac84:	ef 80       	ldd	r14, Y+7	; 0x07
    ac86:	f8 84       	ldd	r15, Y+8	; 0x08
    ac88:	18 86       	std	Y+8, r1	; 0x08
    ac8a:	1f 82       	std	Y+7, r1	; 0x07
    ac8c:	ae cf       	rjmp	.-164    	; 0xabea <follow_path+0xe6>
    ac8e:	97 01       	movw	r18, r14
    ac90:	06 c0       	rjmp	.+12     	; 0xac9e <follow_path+0x19a>
    ac92:	30 e0       	ldi	r19, 0x00	; 0
    ac94:	82 17       	cp	r24, r18
    ac96:	93 07       	cpc	r25, r19
    ac98:	09 f0       	breq	.+2      	; 0xac9c <follow_path+0x198>
    ac9a:	97 cf       	rjmp	.-210    	; 0xabca <follow_path+0xc6>
    ac9c:	3e c1       	rjmp	.+636    	; 0xaf1a <follow_path+0x416>
    ac9e:	79 01       	movw	r14, r18
    aca0:	f9 01       	movw	r30, r18
    aca2:	80 81       	ld	r24, Z
    aca4:	2f 5f       	subi	r18, 0xFF	; 255
    aca6:	3f 4f       	sbci	r19, 0xFF	; 255
    aca8:	8f 32       	cpi	r24, 0x2F	; 47
    acaa:	c9 f3       	breq	.-14     	; 0xac9e <follow_path+0x19a>
    acac:	8c 35       	cpi	r24, 0x5C	; 92
    acae:	b9 f3       	breq	.-18     	; 0xac9e <follow_path+0x19a>
    acb0:	31 2c       	mov	r3, r1
    acb2:	a6 cf       	rjmp	.-180    	; 0xac00 <follow_path+0xfc>
    acb4:	ef 81       	ldd	r30, Y+7	; 0x07
    acb6:	f8 85       	ldd	r31, Y+8	; 0x08
    acb8:	32 97       	sbiw	r30, 0x02	; 2
    acba:	41 f4       	brne	.+16     	; 0xaccc <follow_path+0x1c8>
    acbc:	f5 01       	movw	r30, r10
    acbe:	82 81       	ldd	r24, Z+2	; 0x02
    acc0:	93 81       	ldd	r25, Z+3	; 0x03
    acc2:	8e 97       	sbiw	r24, 0x2e	; 46
    acc4:	19 f4       	brne	.+6      	; 0xaccc <follow_path+0x1c8>
    acc6:	80 81       	ld	r24, Z
    acc8:	91 81       	ldd	r25, Z+1	; 0x01
    acca:	a6 cf       	rjmp	.-180    	; 0xac18 <follow_path+0x114>
    accc:	f9 01       	movw	r30, r18
    acce:	ea 0d       	add	r30, r10
    acd0:	fb 1d       	adc	r31, r11
    acd2:	0d c0       	rjmp	.+26     	; 0xacee <follow_path+0x1ea>
    acd4:	20 e2       	ldi	r18, 0x20	; 32
    acd6:	b3 cf       	rjmp	.-154    	; 0xac3e <follow_path+0x13a>
    acd8:	92 91       	ld	r25, -Z
    acda:	82 91       	ld	r24, -Z
    acdc:	80 32       	cpi	r24, 0x20	; 32
    acde:	91 05       	cpc	r25, r1
    ace0:	59 f4       	brne	.+22     	; 0xacf8 <follow_path+0x1f4>
    ace2:	2f 81       	ldd	r18, Y+7	; 0x07
    ace4:	38 85       	ldd	r19, Y+8	; 0x08
    ace6:	21 50       	subi	r18, 0x01	; 1
    ace8:	31 09       	sbc	r19, r1
    acea:	38 87       	std	Y+8, r19	; 0x08
    acec:	2f 83       	std	Y+7, r18	; 0x07
    acee:	8f 81       	ldd	r24, Y+7	; 0x07
    acf0:	98 85       	ldd	r25, Y+8	; 0x08
    acf2:	89 2b       	or	r24, r25
    acf4:	89 f7       	brne	.-30     	; 0xacd8 <follow_path+0x1d4>
    acf6:	02 c0       	rjmp	.+4      	; 0xacfc <follow_path+0x1f8>
    acf8:	8e 97       	sbiw	r24, 0x2e	; 46
    acfa:	99 f3       	breq	.-26     	; 0xace2 <follow_path+0x1de>
    acfc:	ef 81       	ldd	r30, Y+7	; 0x07
    acfe:	f8 85       	ldd	r31, Y+8	; 0x08
    ad00:	ee 0f       	add	r30, r30
    ad02:	ff 1f       	adc	r31, r31
    ad04:	ea 0d       	add	r30, r10
    ad06:	fb 1d       	adc	r31, r11
    ad08:	11 82       	std	Z+1, r1	; 0x01
    ad0a:	10 82       	st	Z, r1
    ad0c:	af 81       	ldd	r26, Y+7	; 0x07
    ad0e:	b8 85       	ldd	r27, Y+8	; 0x08
    ad10:	ab 2b       	or	r26, r27
    ad12:	09 f4       	brne	.+2      	; 0xad16 <follow_path+0x212>
    ad14:	02 c1       	rjmp	.+516    	; 0xaf1a <follow_path+0x416>
    ad16:	61 2c       	mov	r6, r1
    ad18:	71 2c       	mov	r7, r1
    ad1a:	d4 01       	movw	r26, r8
    ad1c:	8d 91       	ld	r24, X+
    ad1e:	9d 91       	ld	r25, X+
    ad20:	4d 01       	movw	r8, r26
    ad22:	80 32       	cpi	r24, 0x20	; 32
    ad24:	91 05       	cpc	r25, r1
    ad26:	21 f4       	brne	.+8      	; 0xad30 <follow_path+0x22c>
    ad28:	bf ef       	ldi	r27, 0xFF	; 255
    ad2a:	6b 1a       	sub	r6, r27
    ad2c:	7b 0a       	sbc	r7, r27
    ad2e:	f5 cf       	rjmp	.-22     	; 0xad1a <follow_path+0x216>
    ad30:	61 14       	cp	r6, r1
    ad32:	71 04       	cpc	r7, r1
    ad34:	11 f4       	brne	.+4      	; 0xad3a <follow_path+0x236>
    ad36:	8e 97       	sbiw	r24, 0x2e	; 46
    ad38:	61 f4       	brne	.+24     	; 0xad52 <follow_path+0x24e>
    ad3a:	b3 2d       	mov	r27, r3
    ad3c:	b3 60       	ori	r27, 0x03	; 3
    ad3e:	3b 2e       	mov	r3, r27
    ad40:	08 c0       	rjmp	.+16     	; 0xad52 <follow_path+0x24e>
    ad42:	2f 81       	ldd	r18, Y+7	; 0x07
    ad44:	38 85       	ldd	r19, Y+8	; 0x08
    ad46:	21 50       	subi	r18, 0x01	; 1
    ad48:	31 09       	sbc	r19, r1
    ad4a:	38 87       	std	Y+8, r19	; 0x08
    ad4c:	2f 83       	std	Y+7, r18	; 0x07
    ad4e:	23 2b       	or	r18, r19
    ad50:	21 f0       	breq	.+8      	; 0xad5a <follow_path+0x256>
    ad52:	92 91       	ld	r25, -Z
    ad54:	82 91       	ld	r24, -Z
    ad56:	8e 97       	sbiw	r24, 0x2e	; 46
    ad58:	a1 f7       	brne	.-24     	; 0xad42 <follow_path+0x23e>
    ad5a:	4b e0       	ldi	r20, 0x0B	; 11
    ad5c:	50 e0       	ldi	r21, 0x00	; 0
    ad5e:	60 e2       	ldi	r22, 0x20	; 32
    ad60:	70 e0       	ldi	r23, 0x00	; 0
    ad62:	8b 81       	ldd	r24, Y+3	; 0x03
    ad64:	9c 81       	ldd	r25, Y+4	; 0x04
    ad66:	0e 94 13 46 	call	0x8c26	; 0x8c26 <mem_set>
    ad6a:	48 e0       	ldi	r20, 0x08	; 8
    ad6c:	84 2e       	mov	r8, r20
    ad6e:	91 2c       	mov	r9, r1
    ad70:	c1 2c       	mov	r12, r1
    ad72:	d1 2c       	mov	r13, r1
    ad74:	21 2c       	mov	r2, r1
    ad76:	23 01       	movw	r4, r6
    ad78:	3f ef       	ldi	r19, 0xFF	; 255
    ad7a:	43 1a       	sub	r4, r19
    ad7c:	53 0a       	sbc	r5, r19
    ad7e:	66 0c       	add	r6, r6
    ad80:	77 1c       	adc	r7, r7
    ad82:	f5 01       	movw	r30, r10
    ad84:	e6 0d       	add	r30, r6
    ad86:	f7 1d       	adc	r31, r7
    ad88:	80 81       	ld	r24, Z
    ad8a:	91 81       	ldd	r25, Z+1	; 0x01
    ad8c:	00 97       	sbiw	r24, 0x00	; 0
    ad8e:	09 f4       	brne	.+2      	; 0xad92 <follow_path+0x28e>
    ad90:	9e c0       	rjmp	.+316    	; 0xaece <follow_path+0x3ca>
    ad92:	80 32       	cpi	r24, 0x20	; 32
    ad94:	91 05       	cpc	r25, r1
    ad96:	41 f0       	breq	.+16     	; 0xada8 <follow_path+0x2a4>
    ad98:	8e 32       	cpi	r24, 0x2E	; 46
    ad9a:	91 05       	cpc	r25, r1
    ad9c:	51 f4       	brne	.+20     	; 0xadb2 <follow_path+0x2ae>
    ad9e:	8f 81       	ldd	r24, Y+7	; 0x07
    ada0:	98 85       	ldd	r25, Y+8	; 0x08
    ada2:	84 15       	cp	r24, r4
    ada4:	95 05       	cpc	r25, r5
    ada6:	71 f0       	breq	.+28     	; 0xadc4 <follow_path+0x2c0>
    ada8:	93 2d       	mov	r25, r3
    adaa:	93 60       	ori	r25, 0x03	; 3
    adac:	39 2e       	mov	r3, r25
    adae:	32 01       	movw	r6, r4
    adb0:	e2 cf       	rjmp	.-60     	; 0xad76 <follow_path+0x272>
    adb2:	c8 14       	cp	r12, r8
    adb4:	d9 04       	cpc	r13, r9
    adb6:	50 f4       	brcc	.+20     	; 0xadcc <follow_path+0x2c8>
    adb8:	af 81       	ldd	r26, Y+7	; 0x07
    adba:	b8 85       	ldd	r27, Y+8	; 0x08
    adbc:	a4 15       	cp	r26, r4
    adbe:	b5 05       	cpc	r27, r5
    adc0:	49 f5       	brne	.+82     	; 0xae14 <follow_path+0x310>
    adc2:	d2 c0       	rjmp	.+420    	; 0xaf68 <follow_path+0x464>
    adc4:	c8 14       	cp	r12, r8
    adc6:	d9 04       	cpc	r13, r9
    adc8:	08 f4       	brcc	.+2      	; 0xadcc <follow_path+0x2c8>
    adca:	ce c0       	rjmp	.+412    	; 0xaf68 <follow_path+0x464>
    adcc:	bb e0       	ldi	r27, 0x0B	; 11
    adce:	8b 16       	cp	r8, r27
    add0:	91 04       	cpc	r9, r1
    add2:	39 f4       	brne	.+14     	; 0xade2 <follow_path+0x2de>
    add4:	e3 2d       	mov	r30, r3
    add6:	e3 60       	ori	r30, 0x03	; 3
    add8:	3e 2e       	mov	r3, r30
    adda:	2b e0       	ldi	r18, 0x0B	; 11
    addc:	82 2e       	mov	r8, r18
    adde:	91 2c       	mov	r9, r1
    ade0:	76 c0       	rjmp	.+236    	; 0xaece <follow_path+0x3ca>
    ade2:	2f 81       	ldd	r18, Y+7	; 0x07
    ade4:	38 85       	ldd	r19, Y+8	; 0x08
    ade6:	24 15       	cp	r18, r4
    ade8:	35 05       	cpc	r19, r5
    adea:	49 f0       	breq	.+18     	; 0xadfe <follow_path+0x2fa>
    adec:	33 2d       	mov	r19, r3
    adee:	33 60       	ori	r19, 0x03	; 3
    adf0:	33 2e       	mov	r3, r19
    adf2:	8f 81       	ldd	r24, Y+7	; 0x07
    adf4:	98 85       	ldd	r25, Y+8	; 0x08
    adf6:	84 15       	cp	r24, r4
    adf8:	95 05       	cpc	r25, r5
    adfa:	08 f4       	brcc	.+2      	; 0xadfe <follow_path+0x2fa>
    adfc:	68 c0       	rjmp	.+208    	; 0xaece <follow_path+0x3ca>
    adfe:	22 0c       	add	r2, r2
    ae00:	22 0c       	add	r2, r2
    ae02:	4f 80       	ldd	r4, Y+7	; 0x07
    ae04:	58 84       	ldd	r5, Y+8	; 0x08
    ae06:	8b e0       	ldi	r24, 0x0B	; 11
    ae08:	88 2e       	mov	r8, r24
    ae0a:	91 2c       	mov	r9, r1
    ae0c:	98 e0       	ldi	r25, 0x08	; 8
    ae0e:	c9 2e       	mov	r12, r25
    ae10:	d1 2c       	mov	r13, r1
    ae12:	cd cf       	rjmp	.-102    	; 0xadae <follow_path+0x2aa>
    ae14:	80 38       	cpi	r24, 0x80	; 128
    ae16:	91 05       	cpc	r25, r1
    ae18:	70 f1       	brcs	.+92     	; 0xae76 <follow_path+0x372>
    ae1a:	a3 2d       	mov	r26, r3
    ae1c:	a2 60       	ori	r26, 0x02	; 2
    ae1e:	7a 2e       	mov	r7, r26
    ae20:	bc 01       	movw	r22, r24
    ae22:	80 e0       	ldi	r24, 0x00	; 0
    ae24:	90 e0       	ldi	r25, 0x00	; 0
    ae26:	45 eb       	ldi	r20, 0xB5	; 181
    ae28:	51 e0       	ldi	r21, 0x01	; 1
    ae2a:	0e 94 36 67 	call	0xce6c	; 0xce6c <ff_uni2oem>
    ae2e:	87 ff       	sbrs	r24, 7
    ae30:	08 c0       	rjmp	.+16     	; 0xae42 <follow_path+0x33e>
    ae32:	8f 77       	andi	r24, 0x7F	; 127
    ae34:	99 27       	eor	r25, r25
    ae36:	fc 01       	movw	r30, r24
    ae38:	e5 59       	subi	r30, 0x95	; 149
    ae3a:	fb 4f       	sbci	r31, 0xFB	; 251
    ae3c:	80 81       	ld	r24, Z
    ae3e:	90 e0       	ldi	r25, 0x00	; 0
    ae40:	17 c0       	rjmp	.+46     	; 0xae70 <follow_path+0x36c>
    ae42:	8f 3f       	cpi	r24, 0xFF	; 255
    ae44:	91 05       	cpc	r25, r1
    ae46:	a1 f0       	breq	.+40     	; 0xae70 <follow_path+0x36c>
    ae48:	98 f0       	brcs	.+38     	; 0xae70 <follow_path+0x36c>
    ae4a:	94 01       	movw	r18, r8
    ae4c:	21 50       	subi	r18, 0x01	; 1
    ae4e:	31 09       	sbc	r19, r1
    ae50:	c2 16       	cp	r12, r18
    ae52:	d3 06       	cpc	r13, r19
    ae54:	28 f0       	brcs	.+10     	; 0xae60 <follow_path+0x35c>
    ae56:	b3 2d       	mov	r27, r3
    ae58:	b3 60       	ori	r27, 0x03	; 3
    ae5a:	3b 2e       	mov	r3, r27
    ae5c:	64 01       	movw	r12, r8
    ae5e:	a7 cf       	rjmp	.-178    	; 0xadae <follow_path+0x2aa>
    ae60:	f8 01       	movw	r30, r16
    ae62:	ec 0d       	add	r30, r12
    ae64:	fd 1d       	adc	r31, r13
    ae66:	94 8f       	std	Z+28, r25	; 0x1c
    ae68:	f6 01       	movw	r30, r12
    ae6a:	31 96       	adiw	r30, 0x01	; 1
    ae6c:	6f 01       	movw	r12, r30
    ae6e:	26 c0       	rjmp	.+76     	; 0xaebc <follow_path+0x3b8>
    ae70:	00 97       	sbiw	r24, 0x00	; 0
    ae72:	59 f0       	breq	.+22     	; 0xae8a <follow_path+0x386>
    ae74:	01 c0       	rjmp	.+2      	; 0xae78 <follow_path+0x374>
    ae76:	73 2c       	mov	r7, r3
    ae78:	e0 e3       	ldi	r30, 0x30	; 48
    ae7a:	f4 e0       	ldi	r31, 0x04	; 4
    ae7c:	21 91       	ld	r18, Z+
    ae7e:	22 23       	and	r18, r18
    ae80:	51 f0       	breq	.+20     	; 0xae96 <follow_path+0x392>
    ae82:	30 e0       	ldi	r19, 0x00	; 0
    ae84:	82 17       	cp	r24, r18
    ae86:	93 07       	cpc	r25, r19
    ae88:	c9 f7       	brne	.-14     	; 0xae7c <follow_path+0x378>
    ae8a:	f7 2d       	mov	r31, r7
    ae8c:	f3 60       	ori	r31, 0x03	; 3
    ae8e:	7f 2e       	mov	r7, r31
    ae90:	8f e5       	ldi	r24, 0x5F	; 95
    ae92:	90 e0       	ldi	r25, 0x00	; 0
    ae94:	13 c0       	rjmp	.+38     	; 0xaebc <follow_path+0x3b8>
    ae96:	9c 01       	movw	r18, r24
    ae98:	21 54       	subi	r18, 0x41	; 65
    ae9a:	31 09       	sbc	r19, r1
    ae9c:	2a 31       	cpi	r18, 0x1A	; 26
    ae9e:	31 05       	cpc	r19, r1
    aea0:	18 f4       	brcc	.+6      	; 0xaea8 <follow_path+0x3a4>
    aea2:	22 2d       	mov	r18, r2
    aea4:	22 60       	ori	r18, 0x02	; 2
    aea6:	22 2e       	mov	r2, r18
    aea8:	9c 01       	movw	r18, r24
    aeaa:	21 56       	subi	r18, 0x61	; 97
    aeac:	31 09       	sbc	r19, r1
    aeae:	2a 31       	cpi	r18, 0x1A	; 26
    aeb0:	31 05       	cpc	r19, r1
    aeb2:	20 f4       	brcc	.+8      	; 0xaebc <follow_path+0x3b8>
    aeb4:	32 2d       	mov	r19, r2
    aeb6:	31 60       	ori	r19, 0x01	; 1
    aeb8:	23 2e       	mov	r2, r19
    aeba:	80 97       	sbiw	r24, 0x20	; 32
    aebc:	f8 01       	movw	r30, r16
    aebe:	ec 0d       	add	r30, r12
    aec0:	fd 1d       	adc	r31, r13
    aec2:	84 8f       	std	Z+28, r24	; 0x1c
    aec4:	c6 01       	movw	r24, r12
    aec6:	01 96       	adiw	r24, 0x01	; 1
    aec8:	6c 01       	movw	r12, r24
    aeca:	37 2c       	mov	r3, r7
    aecc:	70 cf       	rjmp	.-288    	; 0xadae <follow_path+0x2aa>
    aece:	f8 01       	movw	r30, r16
    aed0:	84 8d       	ldd	r24, Z+28	; 0x1c
    aed2:	85 3e       	cpi	r24, 0xE5	; 229
    aed4:	11 f4       	brne	.+4      	; 0xaeda <follow_path+0x3d6>
    aed6:	25 e0       	ldi	r18, 0x05	; 5
    aed8:	24 8f       	std	Z+28, r18	; 0x1c
    aeda:	38 e0       	ldi	r19, 0x08	; 8
    aedc:	83 16       	cp	r8, r19
    aede:	91 04       	cpc	r9, r1
    aee0:	11 f4       	brne	.+4      	; 0xaee6 <follow_path+0x3e2>
    aee2:	22 0c       	add	r2, r2
    aee4:	22 0c       	add	r2, r2
    aee6:	82 2d       	mov	r24, r2
    aee8:	8c 70       	andi	r24, 0x0C	; 12
    aeea:	8c 30       	cpi	r24, 0x0C	; 12
    aeec:	21 f0       	breq	.+8      	; 0xaef6 <follow_path+0x3f2>
    aeee:	82 2d       	mov	r24, r2
    aef0:	83 70       	andi	r24, 0x03	; 3
    aef2:	83 30       	cpi	r24, 0x03	; 3
    aef4:	19 f4       	brne	.+6      	; 0xaefc <follow_path+0x3f8>
    aef6:	83 2d       	mov	r24, r3
    aef8:	82 60       	ori	r24, 0x02	; 2
    aefa:	38 2e       	mov	r3, r24
    aefc:	31 fc       	sbrc	r3, 1
    aefe:	0a c0       	rjmp	.+20     	; 0xaf14 <follow_path+0x410>
    af00:	20 fe       	sbrs	r2, 0
    af02:	03 c0       	rjmp	.+6      	; 0xaf0a <follow_path+0x406>
    af04:	93 2d       	mov	r25, r3
    af06:	90 61       	ori	r25, 0x10	; 16
    af08:	39 2e       	mov	r3, r25
    af0a:	22 fe       	sbrs	r2, 2
    af0c:	03 c0       	rjmp	.+6      	; 0xaf14 <follow_path+0x410>
    af0e:	a3 2d       	mov	r26, r3
    af10:	a8 60       	ori	r26, 0x08	; 8
    af12:	3a 2e       	mov	r3, r26
    af14:	f8 01       	movw	r30, r16
    af16:	37 a2       	std	Z+39, r3	; 0x27
    af18:	9b ce       	rjmp	.-714    	; 0xac50 <follow_path+0x14c>
    af1a:	86 e0       	ldi	r24, 0x06	; 6
    af1c:	90 e0       	ldi	r25, 0x00	; 0
    af1e:	2a c0       	rjmp	.+84     	; 0xaf74 <follow_path+0x470>
    af20:	80 e8       	ldi	r24, 0x80	; 128
    af22:	f8 01       	movw	r30, r16
    af24:	87 a3       	std	Z+39, r24	; 0x27
    af26:	80 e0       	ldi	r24, 0x00	; 0
    af28:	90 e0       	ldi	r25, 0x00	; 0
    af2a:	24 c0       	rjmp	.+72     	; 0xaf74 <follow_path+0x470>
    af2c:	33 23       	and	r19, r19
    af2e:	c9 f0       	breq	.+50     	; 0xaf62 <follow_path+0x45e>
    af30:	21 c0       	rjmp	.+66     	; 0xaf74 <follow_path+0x470>
    af32:	22 fd       	sbrc	r18, 2
    af34:	1f c0       	rjmp	.+62     	; 0xaf74 <follow_path+0x470>
    af36:	f8 01       	movw	r30, r16
    af38:	84 81       	ldd	r24, Z+4	; 0x04
    af3a:	84 ff       	sbrs	r24, 4
    af3c:	12 c0       	rjmp	.+36     	; 0xaf62 <follow_path+0x45e>
    af3e:	66 85       	ldd	r22, Z+14	; 0x0e
    af40:	77 85       	ldd	r23, Z+15	; 0x0f
    af42:	71 70       	andi	r23, 0x01	; 1
    af44:	2d 81       	ldd	r18, Y+5	; 0x05
    af46:	3e 81       	ldd	r19, Y+6	; 0x06
    af48:	62 0f       	add	r22, r18
    af4a:	73 1f       	adc	r23, r19
    af4c:	a9 81       	ldd	r26, Y+1	; 0x01
    af4e:	ba 81       	ldd	r27, Y+2	; 0x02
    af50:	8c 91       	ld	r24, X
    af52:	0e 94 2b 48 	call	0x9056	; 0x9056 <ld_clust.isra.3>
    af56:	f8 01       	movw	r30, r16
    af58:	66 83       	std	Z+6, r22	; 0x06
    af5a:	77 83       	std	Z+7, r23	; 0x07
    af5c:	80 87       	std	Z+8, r24	; 0x08
    af5e:	91 87       	std	Z+9, r25	; 0x09
    af60:	88 ce       	rjmp	.-752    	; 0xac72 <follow_path+0x16e>
    af62:	85 e0       	ldi	r24, 0x05	; 5
    af64:	90 e0       	ldi	r25, 0x00	; 0
    af66:	06 c0       	rjmp	.+12     	; 0xaf74 <follow_path+0x470>
    af68:	fb e0       	ldi	r31, 0x0B	; 11
    af6a:	8f 16       	cp	r8, r31
    af6c:	91 04       	cpc	r9, r1
    af6e:	09 f0       	breq	.+2      	; 0xaf72 <follow_path+0x46e>
    af70:	46 cf       	rjmp	.-372    	; 0xadfe <follow_path+0x2fa>
    af72:	30 cf       	rjmp	.-416    	; 0xadd4 <follow_path+0x2d0>
    af74:	28 96       	adiw	r28, 0x08	; 8
    af76:	e2 e1       	ldi	r30, 0x12	; 18
    af78:	0c 94 25 e3 	jmp	0x1c64a	; 0x1c64a <__epilogue_restores__>

0000af7c <f_mount>:
    af7c:	a6 e0       	ldi	r26, 0x06	; 6
    af7e:	b0 e0       	ldi	r27, 0x00	; 0
    af80:	e4 ec       	ldi	r30, 0xC4	; 196
    af82:	f7 e5       	ldi	r31, 0x57	; 87
    af84:	0c 94 18 e3 	jmp	0x1c630	; 0x1c630 <__prologue_saves__+0x1e>
    af88:	9c 83       	std	Y+4, r25	; 0x04
    af8a:	8b 83       	std	Y+3, r24	; 0x03
    af8c:	7e 83       	std	Y+6, r23	; 0x06
    af8e:	6d 83       	std	Y+5, r22	; 0x05
    af90:	14 2f       	mov	r17, r20
    af92:	7a 83       	std	Y+2, r23	; 0x02
    af94:	69 83       	std	Y+1, r22	; 0x01
    af96:	ce 01       	movw	r24, r28
    af98:	01 96       	adiw	r24, 0x01	; 1
    af9a:	0e 94 9e 46 	call	0x8d3c	; 0x8d3c <get_ldnumber>
    af9e:	97 fd       	sbrc	r25, 7
    afa0:	20 c0       	rjmp	.+64     	; 0xafe2 <f_mount+0x66>
    afa2:	88 0f       	add	r24, r24
    afa4:	99 1f       	adc	r25, r25
    afa6:	fc 01       	movw	r30, r24
    afa8:	e3 5d       	subi	r30, 0xD3	; 211
    afaa:	f7 4e       	sbci	r31, 0xE7	; 231
    afac:	01 90       	ld	r0, Z+
    afae:	f0 81       	ld	r31, Z
    afb0:	e0 2d       	mov	r30, r0
    afb2:	30 97       	sbiw	r30, 0x00	; 0
    afb4:	09 f0       	breq	.+2      	; 0xafb8 <f_mount+0x3c>
    afb6:	10 82       	st	Z, r1
    afb8:	eb 81       	ldd	r30, Y+3	; 0x03
    afba:	fc 81       	ldd	r31, Y+4	; 0x04
    afbc:	30 97       	sbiw	r30, 0x00	; 0
    afbe:	09 f0       	breq	.+2      	; 0xafc2 <f_mount+0x46>
    afc0:	10 82       	st	Z, r1
    afc2:	dc 01       	movw	r26, r24
    afc4:	a3 5d       	subi	r26, 0xD3	; 211
    afc6:	b7 4e       	sbci	r27, 0xE7	; 231
    afc8:	ed 93       	st	X+, r30
    afca:	fc 93       	st	X, r31
    afcc:	11 23       	and	r17, r17
    afce:	61 f0       	breq	.+24     	; 0xafe8 <f_mount+0x6c>
    afd0:	40 e0       	ldi	r20, 0x00	; 0
    afd2:	be 01       	movw	r22, r28
    afd4:	6d 5f       	subi	r22, 0xFD	; 253
    afd6:	7f 4f       	sbci	r23, 0xFF	; 255
    afd8:	ce 01       	movw	r24, r28
    afda:	05 96       	adiw	r24, 0x05	; 5
    afdc:	0e 94 35 4a 	call	0x946a	; 0x946a <mount_volume>
    afe0:	05 c0       	rjmp	.+10     	; 0xafec <f_mount+0x70>
    afe2:	8b e0       	ldi	r24, 0x0B	; 11
    afe4:	90 e0       	ldi	r25, 0x00	; 0
    afe6:	02 c0       	rjmp	.+4      	; 0xafec <f_mount+0x70>
    afe8:	80 e0       	ldi	r24, 0x00	; 0
    afea:	90 e0       	ldi	r25, 0x00	; 0
    afec:	26 96       	adiw	r28, 0x06	; 6
    afee:	e3 e0       	ldi	r30, 0x03	; 3
    aff0:	0c 94 34 e3 	jmp	0x1c668	; 0x1c668 <__epilogue_restores__+0x1e>

0000aff4 <f_open>:
    aff4:	a6 e3       	ldi	r26, 0x36	; 54
    aff6:	b0 e0       	ldi	r27, 0x00	; 0
    aff8:	e0 e0       	ldi	r30, 0x00	; 0
    affa:	f8 e5       	ldi	r31, 0x58	; 88
    affc:	0c 94 09 e3 	jmp	0x1c612	; 0x1c612 <__prologue_saves__>
    b000:	7a ab       	std	Y+50, r23	; 0x32
    b002:	69 ab       	std	Y+49, r22	; 0x31
    b004:	00 97       	sbiw	r24, 0x00	; 0
    b006:	09 f4       	brne	.+2      	; 0xb00a <f_open+0x16>
    b008:	93 c1       	rjmp	.+806    	; 0xb330 <f_open+0x33c>
    b00a:	74 2e       	mov	r7, r20
    b00c:	7c 01       	movw	r14, r24
    b00e:	24 2f       	mov	r18, r20
    b010:	2f 73       	andi	r18, 0x3F	; 63
    b012:	32 2e       	mov	r3, r18
    b014:	42 2f       	mov	r20, r18
    b016:	be 01       	movw	r22, r28
    b018:	61 5d       	subi	r22, 0xD1	; 209
    b01a:	7f 4f       	sbci	r23, 0xFF	; 255
    b01c:	ce 01       	movw	r24, r28
    b01e:	c1 96       	adiw	r24, 0x31	; 49
    b020:	0e 94 35 4a 	call	0x946a	; 0x946a <mount_volume>
    b024:	00 97       	sbiw	r24, 0x00	; 0
    b026:	09 f0       	breq	.+2      	; 0xb02a <f_open+0x36>
    b028:	7d c1       	rjmp	.+762    	; 0xb324 <f_open+0x330>
    b02a:	8f a5       	ldd	r24, Y+47	; 0x2f
    b02c:	98 a9       	ldd	r25, Y+48	; 0x30
    b02e:	9a 83       	std	Y+2, r25	; 0x02
    b030:	89 83       	std	Y+1, r24	; 0x01
    b032:	80 e0       	ldi	r24, 0x00	; 0
    b034:	92 e0       	ldi	r25, 0x02	; 2
    b036:	0e 94 30 67 	call	0xce60	; 0xce60 <ff_memalloc>
    b03a:	5c 01       	movw	r10, r24
    b03c:	00 97       	sbiw	r24, 0x00	; 0
    b03e:	09 f4       	brne	.+2      	; 0xb042 <f_open+0x4e>
    b040:	79 c1       	rjmp	.+754    	; 0xb334 <f_open+0x340>
    b042:	ef a5       	ldd	r30, Y+47	; 0x2f
    b044:	f8 a9       	ldd	r31, Y+48	; 0x30
    b046:	94 87       	std	Z+12, r25	; 0x0c
    b048:	83 87       	std	Z+11, r24	; 0x0b
    b04a:	69 a9       	ldd	r22, Y+49	; 0x31
    b04c:	7a a9       	ldd	r23, Y+50	; 0x32
    b04e:	ce 01       	movw	r24, r28
    b050:	01 96       	adiw	r24, 0x01	; 1
    b052:	58 dd       	rcall	.-1360   	; 0xab04 <follow_path>
    b054:	8c 01       	movw	r16, r24
    b056:	89 2b       	or	r24, r25
    b058:	29 f4       	brne	.+10     	; 0xb064 <f_open+0x70>
    b05a:	88 a5       	ldd	r24, Y+40	; 0x28
    b05c:	87 ff       	sbrs	r24, 7
    b05e:	02 c0       	rjmp	.+4      	; 0xb064 <f_open+0x70>
    b060:	06 e0       	ldi	r16, 0x06	; 6
    b062:	10 e0       	ldi	r17, 0x00	; 0
    b064:	87 2d       	mov	r24, r7
    b066:	8c 71       	andi	r24, 0x1C	; 28
    b068:	09 f4       	brne	.+2      	; 0xb06c <f_open+0x78>
    b06a:	75 c0       	rjmp	.+234    	; 0xb156 <f_open+0x162>
    b06c:	01 15       	cp	r16, r1
    b06e:	11 05       	cpc	r17, r1
    b070:	79 f0       	breq	.+30     	; 0xb090 <f_open+0x9c>
    b072:	04 30       	cpi	r16, 0x04	; 4
    b074:	11 05       	cpc	r17, r1
    b076:	09 f0       	breq	.+2      	; 0xb07a <f_open+0x86>
    b078:	6d c1       	rjmp	.+730    	; 0xb354 <f_open+0x360>
    b07a:	ce 01       	movw	r24, r28
    b07c:	01 96       	adiw	r24, 0x01	; 1
    b07e:	b4 db       	rcall	.-2200   	; 0xa7e8 <dir_register>
    b080:	8c 01       	movw	r16, r24
    b082:	89 2b       	or	r24, r25
    b084:	09 f0       	breq	.+2      	; 0xb088 <f_open+0x94>
    b086:	66 c1       	rjmp	.+716    	; 0xb354 <f_open+0x360>
    b088:	33 2d       	mov	r19, r3
    b08a:	38 60       	ori	r19, 0x08	; 8
    b08c:	33 2e       	mov	r3, r19
    b08e:	06 c0       	rjmp	.+12     	; 0xb09c <f_open+0xa8>
    b090:	8d 81       	ldd	r24, Y+5	; 0x05
    b092:	81 71       	andi	r24, 0x11	; 17
    b094:	09 f0       	breq	.+2      	; 0xb098 <f_open+0xa4>
    b096:	5c c1       	rjmp	.+696    	; 0xb350 <f_open+0x35c>
    b098:	72 fc       	sbrc	r7, 2
    b09a:	51 c1       	rjmp	.+674    	; 0xb33e <f_open+0x34a>
    b09c:	33 fe       	sbrs	r3, 3
    b09e:	6b c0       	rjmp	.+214    	; 0xb176 <f_open+0x182>
    b0a0:	0b 8d       	ldd	r16, Y+27	; 0x1b
    b0a2:	1c 8d       	ldd	r17, Y+28	; 0x1c
    b0a4:	ef a5       	ldd	r30, Y+47	; 0x2f
    b0a6:	f8 a9       	ldd	r31, Y+48	; 0x30
    b0a8:	b8 01       	movw	r22, r16
    b0aa:	80 81       	ld	r24, Z
    b0ac:	0e 94 2b 48 	call	0x9056	; 0x9056 <ld_clust.isra.3>
    b0b0:	2b 01       	movw	r4, r22
    b0b2:	3c 01       	movw	r6, r24
    b0b4:	0e 94 a1 6e 	call	0xdd42	; 0xdd42 <get_fattime>
    b0b8:	ab 01       	movw	r20, r22
    b0ba:	bc 01       	movw	r22, r24
    b0bc:	c8 01       	movw	r24, r16
    b0be:	0e 96       	adiw	r24, 0x0e	; 14
    b0c0:	0e 94 0d 46 	call	0x8c1a	; 0x8c1a <st_dword>
    b0c4:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b0c6:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b0c8:	80 e2       	ldi	r24, 0x20	; 32
    b0ca:	83 87       	std	Z+11, r24	; 0x0b
    b0cc:	af a5       	ldd	r26, Y+47	; 0x2f
    b0ce:	b8 a9       	ldd	r27, Y+48	; 0x30
    b0d0:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b0d2:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b0d4:	12 8e       	std	Z+26, r1	; 0x1a
    b0d6:	13 8e       	std	Z+27, r1	; 0x1b
    b0d8:	8c 91       	ld	r24, X
    b0da:	83 30       	cpi	r24, 0x03	; 3
    b0dc:	11 f4       	brne	.+4      	; 0xb0e2 <f_open+0xee>
    b0de:	14 8a       	std	Z+20, r1	; 0x14
    b0e0:	15 8a       	std	Z+21, r1	; 0x15
    b0e2:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b0e4:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b0e6:	14 8e       	std	Z+28, r1	; 0x1c
    b0e8:	15 8e       	std	Z+29, r1	; 0x1d
    b0ea:	16 8e       	std	Z+30, r1	; 0x1e
    b0ec:	17 8e       	std	Z+31, r1	; 0x1f
    b0ee:	81 e0       	ldi	r24, 0x01	; 1
    b0f0:	fd 01       	movw	r30, r26
    b0f2:	83 83       	std	Z+3, r24	; 0x03
    b0f4:	41 14       	cp	r4, r1
    b0f6:	51 04       	cpc	r5, r1
    b0f8:	61 04       	cpc	r6, r1
    b0fa:	71 04       	cpc	r7, r1
    b0fc:	c9 f1       	breq	.+114    	; 0xb170 <f_open+0x17c>
    b0fe:	21 a9       	ldd	r18, Z+49	; 0x31
    b100:	32 a9       	ldd	r19, Z+50	; 0x32
    b102:	43 a9       	ldd	r20, Z+51	; 0x33
    b104:	54 a9       	ldd	r21, Z+52	; 0x34
    b106:	2b ab       	std	Y+51, r18	; 0x33
    b108:	3c ab       	std	Y+52, r19	; 0x34
    b10a:	4d ab       	std	Y+53, r20	; 0x35
    b10c:	5e ab       	std	Y+54, r21	; 0x36
    b10e:	00 e0       	ldi	r16, 0x00	; 0
    b110:	10 e0       	ldi	r17, 0x00	; 0
    b112:	98 01       	movw	r18, r16
    b114:	b3 01       	movw	r22, r6
    b116:	a2 01       	movw	r20, r4
    b118:	ce 01       	movw	r24, r28
    b11a:	01 96       	adiw	r24, 0x01	; 1
    b11c:	0e 94 23 50 	call	0xa046	; 0xa046 <remove_chain>
    b120:	8c 01       	movw	r16, r24
    b122:	89 2b       	or	r24, r25
    b124:	09 f0       	breq	.+2      	; 0xb128 <f_open+0x134>
    b126:	16 c1       	rjmp	.+556    	; 0xb354 <f_open+0x360>
    b128:	4b a9       	ldd	r20, Y+51	; 0x33
    b12a:	5c a9       	ldd	r21, Y+52	; 0x34
    b12c:	6d a9       	ldd	r22, Y+53	; 0x35
    b12e:	7e a9       	ldd	r23, Y+54	; 0x36
    b130:	8f a5       	ldd	r24, Y+47	; 0x2f
    b132:	98 a9       	ldd	r25, Y+48	; 0x30
    b134:	0e 94 ba 49 	call	0x9374	; 0x9374 <move_window>
    b138:	8c 01       	movw	r16, r24
    b13a:	ef a5       	ldd	r30, Y+47	; 0x2f
    b13c:	f8 a9       	ldd	r31, Y+48	; 0x30
    b13e:	21 e0       	ldi	r18, 0x01	; 1
    b140:	42 1a       	sub	r4, r18
    b142:	51 08       	sbc	r5, r1
    b144:	61 08       	sbc	r6, r1
    b146:	71 08       	sbc	r7, r1
    b148:	45 86       	std	Z+13, r4	; 0x0d
    b14a:	56 86       	std	Z+14, r5	; 0x0e
    b14c:	67 86       	std	Z+15, r6	; 0x0f
    b14e:	70 8a       	std	Z+16, r7	; 0x10
    b150:	89 2b       	or	r24, r25
    b152:	61 f0       	breq	.+24     	; 0xb16c <f_open+0x178>
    b154:	ff c0       	rjmp	.+510    	; 0xb354 <f_open+0x360>
    b156:	01 15       	cp	r16, r1
    b158:	11 05       	cpc	r17, r1
    b15a:	09 f0       	breq	.+2      	; 0xb15e <f_open+0x16a>
    b15c:	fb c0       	rjmp	.+502    	; 0xb354 <f_open+0x360>
    b15e:	8d 81       	ldd	r24, Y+5	; 0x05
    b160:	84 fd       	sbrc	r24, 4
    b162:	f3 c0       	rjmp	.+486    	; 0xb34a <f_open+0x356>
    b164:	71 fe       	sbrs	r7, 1
    b166:	02 c0       	rjmp	.+4      	; 0xb16c <f_open+0x178>
    b168:	80 fd       	sbrc	r24, 0
    b16a:	f2 c0       	rjmp	.+484    	; 0xb350 <f_open+0x35c>
    b16c:	33 fe       	sbrs	r3, 3
    b16e:	03 c0       	rjmp	.+6      	; 0xb176 <f_open+0x182>
    b170:	33 2d       	mov	r19, r3
    b172:	30 64       	ori	r19, 0x40	; 64
    b174:	33 2e       	mov	r3, r19
    b176:	0f a5       	ldd	r16, Y+47	; 0x2f
    b178:	18 a9       	ldd	r17, Y+48	; 0x30
    b17a:	f8 01       	movw	r30, r16
    b17c:	81 a9       	ldd	r24, Z+49	; 0x31
    b17e:	92 a9       	ldd	r25, Z+50	; 0x32
    b180:	a3 a9       	ldd	r26, Z+51	; 0x33
    b182:	b4 a9       	ldd	r27, Z+52	; 0x34
    b184:	f7 01       	movw	r30, r14
    b186:	84 8f       	std	Z+28, r24	; 0x1c
    b188:	95 8f       	std	Z+29, r25	; 0x1d
    b18a:	a6 8f       	std	Z+30, r26	; 0x1e
    b18c:	b7 8f       	std	Z+31, r27	; 0x1f
    b18e:	6b 8c       	ldd	r6, Y+27	; 0x1b
    b190:	7c 8c       	ldd	r7, Y+28	; 0x1c
    b192:	71 a2       	std	Z+33, r7	; 0x21
    b194:	60 a2       	std	Z+32, r6	; 0x20
    b196:	b3 01       	movw	r22, r6
    b198:	f8 01       	movw	r30, r16
    b19a:	80 81       	ld	r24, Z
    b19c:	0e 94 2b 48 	call	0x9056	; 0x9056 <ld_clust.isra.3>
    b1a0:	f7 01       	movw	r30, r14
    b1a2:	66 83       	std	Z+6, r22	; 0x06
    b1a4:	77 83       	std	Z+7, r23	; 0x07
    b1a6:	80 87       	std	Z+8, r24	; 0x08
    b1a8:	91 87       	std	Z+9, r25	; 0x09
    b1aa:	c3 01       	movw	r24, r6
    b1ac:	4c 96       	adiw	r24, 0x1c	; 28
    b1ae:	0e 94 f8 45 	call	0x8bf0	; 0x8bf0 <ld_dword>
    b1b2:	f7 01       	movw	r30, r14
    b1b4:	62 87       	std	Z+10, r22	; 0x0a
    b1b6:	73 87       	std	Z+11, r23	; 0x0b
    b1b8:	84 87       	std	Z+12, r24	; 0x0c
    b1ba:	95 87       	std	Z+13, r25	; 0x0d
    b1bc:	13 a2       	std	Z+35, r1	; 0x23
    b1be:	12 a2       	std	Z+34, r1	; 0x22
    b1c0:	11 83       	std	Z+1, r17	; 0x01
    b1c2:	00 83       	st	Z, r16
    b1c4:	f8 01       	movw	r30, r16
    b1c6:	85 81       	ldd	r24, Z+5	; 0x05
    b1c8:	96 81       	ldd	r25, Z+6	; 0x06
    b1ca:	f7 01       	movw	r30, r14
    b1cc:	93 83       	std	Z+3, r25	; 0x03
    b1ce:	82 83       	std	Z+2, r24	; 0x02
    b1d0:	36 86       	std	Z+14, r3	; 0x0e
    b1d2:	17 86       	std	Z+15, r1	; 0x0f
    b1d4:	10 8e       	std	Z+24, r1	; 0x18
    b1d6:	11 8e       	std	Z+25, r1	; 0x19
    b1d8:	12 8e       	std	Z+26, r1	; 0x1a
    b1da:	13 8e       	std	Z+27, r1	; 0x1b
    b1dc:	10 8a       	std	Z+16, r1	; 0x10
    b1de:	11 8a       	std	Z+17, r1	; 0x11
    b1e0:	12 8a       	std	Z+18, r1	; 0x12
    b1e2:	13 8a       	std	Z+19, r1	; 0x13
    b1e4:	67 01       	movw	r12, r14
    b1e6:	f4 e2       	ldi	r31, 0x24	; 36
    b1e8:	cf 0e       	add	r12, r31
    b1ea:	d1 1c       	adc	r13, r1
    b1ec:	40 e0       	ldi	r20, 0x00	; 0
    b1ee:	52 e0       	ldi	r21, 0x02	; 2
    b1f0:	60 e0       	ldi	r22, 0x00	; 0
    b1f2:	70 e0       	ldi	r23, 0x00	; 0
    b1f4:	c6 01       	movw	r24, r12
    b1f6:	0e 94 13 46 	call	0x8c26	; 0x8c26 <mem_set>
    b1fa:	35 fc       	sbrc	r3, 5
    b1fc:	03 c0       	rjmp	.+6      	; 0xb204 <f_open+0x210>
    b1fe:	00 e0       	ldi	r16, 0x00	; 0
    b200:	10 e0       	ldi	r17, 0x00	; 0
    b202:	89 c0       	rjmp	.+274    	; 0xb316 <f_open+0x322>
    b204:	f7 01       	movw	r30, r14
    b206:	62 84       	ldd	r6, Z+10	; 0x0a
    b208:	73 84       	ldd	r7, Z+11	; 0x0b
    b20a:	84 84       	ldd	r8, Z+12	; 0x0c
    b20c:	95 84       	ldd	r9, Z+13	; 0x0d
    b20e:	61 14       	cp	r6, r1
    b210:	71 04       	cpc	r7, r1
    b212:	81 04       	cpc	r8, r1
    b214:	91 04       	cpc	r9, r1
    b216:	99 f3       	breq	.-26     	; 0xb1fe <f_open+0x20a>
    b218:	60 8a       	std	Z+16, r6	; 0x10
    b21a:	71 8a       	std	Z+17, r7	; 0x11
    b21c:	82 8a       	std	Z+18, r8	; 0x12
    b21e:	93 8a       	std	Z+19, r9	; 0x13
    b220:	ef a5       	ldd	r30, Y+47	; 0x2f
    b222:	f8 a9       	ldd	r31, Y+48	; 0x30
    b224:	21 84       	ldd	r2, Z+9	; 0x09
    b226:	32 84       	ldd	r3, Z+10	; 0x0a
    b228:	c1 01       	movw	r24, r2
    b22a:	a0 e0       	ldi	r26, 0x00	; 0
    b22c:	b0 e0       	ldi	r27, 0x00	; 0
    b22e:	1c 01       	movw	r2, r24
    b230:	2d 01       	movw	r4, r26
    b232:	59 e0       	ldi	r21, 0x09	; 9
    b234:	22 0c       	add	r2, r2
    b236:	33 1c       	adc	r3, r3
    b238:	44 1c       	adc	r4, r4
    b23a:	55 1c       	adc	r5, r5
    b23c:	5a 95       	dec	r21
    b23e:	d1 f7       	brne	.-12     	; 0xb234 <f_open+0x240>
    b240:	f7 01       	movw	r30, r14
    b242:	46 81       	ldd	r20, Z+6	; 0x06
    b244:	57 81       	ldd	r21, Z+7	; 0x07
    b246:	60 85       	ldd	r22, Z+8	; 0x08
    b248:	71 85       	ldd	r23, Z+9	; 0x09
    b24a:	26 14       	cp	r2, r6
    b24c:	37 04       	cpc	r3, r7
    b24e:	48 04       	cpc	r4, r8
    b250:	59 04       	cpc	r5, r9
    b252:	f0 f4       	brcc	.+60     	; 0xb290 <f_open+0x29c>
    b254:	f7 01       	movw	r30, r14
    b256:	80 81       	ld	r24, Z
    b258:	91 81       	ldd	r25, Z+1	; 0x01
    b25a:	0e 94 88 4d 	call	0x9b10	; 0x9b10 <get_fat.isra.9>
    b25e:	ab 01       	movw	r20, r22
    b260:	bc 01       	movw	r22, r24
    b262:	d4 01       	movw	r26, r8
    b264:	c3 01       	movw	r24, r6
    b266:	82 19       	sub	r24, r2
    b268:	93 09       	sbc	r25, r3
    b26a:	a4 09       	sbc	r26, r4
    b26c:	b5 09       	sbc	r27, r5
    b26e:	3c 01       	movw	r6, r24
    b270:	4d 01       	movw	r8, r26
    b272:	42 30       	cpi	r20, 0x02	; 2
    b274:	51 05       	cpc	r21, r1
    b276:	61 05       	cpc	r22, r1
    b278:	71 05       	cpc	r23, r1
    b27a:	08 f4       	brcc	.+2      	; 0xb27e <f_open+0x28a>
    b27c:	63 c0       	rjmp	.+198    	; 0xb344 <f_open+0x350>
    b27e:	4f 3f       	cpi	r20, 0xFF	; 255
    b280:	ff ef       	ldi	r31, 0xFF	; 255
    b282:	5f 07       	cpc	r21, r31
    b284:	6f 07       	cpc	r22, r31
    b286:	7f 07       	cpc	r23, r31
    b288:	01 f7       	brne	.-64     	; 0xb24a <f_open+0x256>
    b28a:	01 e0       	ldi	r16, 0x01	; 1
    b28c:	10 e0       	ldi	r17, 0x00	; 0
    b28e:	02 c0       	rjmp	.+4      	; 0xb294 <f_open+0x2a0>
    b290:	00 e0       	ldi	r16, 0x00	; 0
    b292:	10 e0       	ldi	r17, 0x00	; 0
    b294:	f7 01       	movw	r30, r14
    b296:	44 8b       	std	Z+20, r20	; 0x14
    b298:	55 8b       	std	Z+21, r21	; 0x15
    b29a:	66 8b       	std	Z+22, r22	; 0x16
    b29c:	77 8b       	std	Z+23, r23	; 0x17
    b29e:	01 15       	cp	r16, r1
    b2a0:	11 05       	cpc	r17, r1
    b2a2:	c9 f5       	brne	.+114    	; 0xb316 <f_open+0x322>
    b2a4:	d4 01       	movw	r26, r8
    b2a6:	c3 01       	movw	r24, r6
    b2a8:	91 70       	andi	r25, 0x01	; 1
    b2aa:	aa 27       	eor	r26, r26
    b2ac:	bb 27       	eor	r27, r27
    b2ae:	89 2b       	or	r24, r25
    b2b0:	8a 2b       	or	r24, r26
    b2b2:	8b 2b       	or	r24, r27
    b2b4:	09 f4       	brne	.+2      	; 0xb2b8 <f_open+0x2c4>
    b2b6:	a3 cf       	rjmp	.-186    	; 0xb1fe <f_open+0x20a>
    b2b8:	4f a4       	ldd	r4, Y+47	; 0x2f
    b2ba:	58 a8       	ldd	r5, Y+48	; 0x30
    b2bc:	c2 01       	movw	r24, r4
    b2be:	0e 94 2b 46 	call	0x8c56	; 0x8c56 <clst2sect>
    b2c2:	61 15       	cp	r22, r1
    b2c4:	71 05       	cpc	r23, r1
    b2c6:	81 05       	cpc	r24, r1
    b2c8:	91 05       	cpc	r25, r1
    b2ca:	19 f1       	breq	.+70     	; 0xb312 <f_open+0x31e>
    b2cc:	94 01       	movw	r18, r8
    b2ce:	83 01       	movw	r16, r6
    b2d0:	49 e0       	ldi	r20, 0x09	; 9
    b2d2:	36 95       	lsr	r19
    b2d4:	27 95       	ror	r18
    b2d6:	17 95       	ror	r17
    b2d8:	07 95       	ror	r16
    b2da:	4a 95       	dec	r20
    b2dc:	d1 f7       	brne	.-12     	; 0xb2d2 <f_open+0x2de>
    b2de:	a9 01       	movw	r20, r18
    b2e0:	98 01       	movw	r18, r16
    b2e2:	26 0f       	add	r18, r22
    b2e4:	37 1f       	adc	r19, r23
    b2e6:	48 1f       	adc	r20, r24
    b2e8:	59 1f       	adc	r21, r25
    b2ea:	f7 01       	movw	r30, r14
    b2ec:	20 8f       	std	Z+24, r18	; 0x18
    b2ee:	31 8f       	std	Z+25, r19	; 0x19
    b2f0:	42 8f       	std	Z+26, r20	; 0x1a
    b2f2:	53 8f       	std	Z+27, r21	; 0x1b
    b2f4:	01 e0       	ldi	r16, 0x01	; 1
    b2f6:	10 e0       	ldi	r17, 0x00	; 0
    b2f8:	b6 01       	movw	r22, r12
    b2fa:	f2 01       	movw	r30, r4
    b2fc:	81 81       	ldd	r24, Z+1	; 0x01
    b2fe:	0e 94 ec 67 	call	0xcfd8	; 0xcfd8 <disk_read>
    b302:	31 e0       	ldi	r19, 0x01	; 1
    b304:	20 e0       	ldi	r18, 0x00	; 0
    b306:	89 2b       	or	r24, r25
    b308:	09 f4       	brne	.+2      	; 0xb30c <f_open+0x318>
    b30a:	30 e0       	ldi	r19, 0x00	; 0
    b30c:	03 2f       	mov	r16, r19
    b30e:	12 2f       	mov	r17, r18
    b310:	02 c0       	rjmp	.+4      	; 0xb316 <f_open+0x322>
    b312:	02 e0       	ldi	r16, 0x02	; 2
    b314:	10 e0       	ldi	r17, 0x00	; 0
    b316:	c5 01       	movw	r24, r10
    b318:	0e 94 33 67 	call	0xce66	; 0xce66 <ff_memfree>
    b31c:	01 15       	cp	r16, r1
    b31e:	11 05       	cpc	r17, r1
    b320:	59 f0       	breq	.+22     	; 0xb338 <f_open+0x344>
    b322:	01 c0       	rjmp	.+2      	; 0xb326 <f_open+0x332>
    b324:	8c 01       	movw	r16, r24
    b326:	f7 01       	movw	r30, r14
    b328:	11 82       	std	Z+1, r1	; 0x01
    b32a:	10 82       	st	Z, r1
    b32c:	c8 01       	movw	r24, r16
    b32e:	16 c0       	rjmp	.+44     	; 0xb35c <f_open+0x368>
    b330:	89 e0       	ldi	r24, 0x09	; 9
    b332:	03 c0       	rjmp	.+6      	; 0xb33a <f_open+0x346>
    b334:	81 e1       	ldi	r24, 0x11	; 17
    b336:	01 c0       	rjmp	.+2      	; 0xb33a <f_open+0x346>
    b338:	80 e0       	ldi	r24, 0x00	; 0
    b33a:	90 e0       	ldi	r25, 0x00	; 0
    b33c:	0f c0       	rjmp	.+30     	; 0xb35c <f_open+0x368>
    b33e:	08 e0       	ldi	r16, 0x08	; 8
    b340:	10 e0       	ldi	r17, 0x00	; 0
    b342:	08 c0       	rjmp	.+16     	; 0xb354 <f_open+0x360>
    b344:	02 e0       	ldi	r16, 0x02	; 2
    b346:	10 e0       	ldi	r17, 0x00	; 0
    b348:	a5 cf       	rjmp	.-182    	; 0xb294 <f_open+0x2a0>
    b34a:	04 e0       	ldi	r16, 0x04	; 4
    b34c:	10 e0       	ldi	r17, 0x00	; 0
    b34e:	02 c0       	rjmp	.+4      	; 0xb354 <f_open+0x360>
    b350:	07 e0       	ldi	r16, 0x07	; 7
    b352:	10 e0       	ldi	r17, 0x00	; 0
    b354:	c5 01       	movw	r24, r10
    b356:	0e 94 33 67 	call	0xce66	; 0xce66 <ff_memfree>
    b35a:	e5 cf       	rjmp	.-54     	; 0xb326 <f_open+0x332>
    b35c:	e6 96       	adiw	r28, 0x36	; 54
    b35e:	e2 e1       	ldi	r30, 0x12	; 18
    b360:	0c 94 25 e3 	jmp	0x1c64a	; 0x1c64a <__epilogue_restores__>

0000b364 <f_read>:
    b364:	a6 e0       	ldi	r26, 0x06	; 6
    b366:	b0 e0       	ldi	r27, 0x00	; 0
    b368:	e8 eb       	ldi	r30, 0xB8	; 184
    b36a:	f9 e5       	ldi	r31, 0x59	; 89
    b36c:	0c 94 09 e3 	jmp	0x1c612	; 0x1c612 <__prologue_saves__>
    b370:	7c 01       	movw	r14, r24
    b372:	4b 01       	movw	r8, r22
    b374:	5a 01       	movw	r10, r20
    b376:	3e 83       	std	Y+6, r19	; 0x06
    b378:	2d 83       	std	Y+5, r18	; 0x05
    b37a:	f9 01       	movw	r30, r18
    b37c:	11 82       	std	Z+1, r1	; 0x01
    b37e:	10 82       	st	Z, r1
    b380:	be 01       	movw	r22, r28
    b382:	6f 5f       	subi	r22, 0xFF	; 255
    b384:	7f 4f       	sbci	r23, 0xFF	; 255
    b386:	0e 94 ca 46 	call	0x8d94	; 0x8d94 <validate>
    b38a:	00 97       	sbiw	r24, 0x00	; 0
    b38c:	09 f0       	breq	.+2      	; 0xb390 <f_read+0x2c>
    b38e:	31 c1       	rjmp	.+610    	; 0xb5f2 <f_read+0x28e>
    b390:	f7 01       	movw	r30, r14
    b392:	87 85       	ldd	r24, Z+15	; 0x0f
    b394:	90 e0       	ldi	r25, 0x00	; 0
    b396:	00 97       	sbiw	r24, 0x00	; 0
    b398:	09 f0       	breq	.+2      	; 0xb39c <f_read+0x38>
    b39a:	2b c1       	rjmp	.+598    	; 0xb5f2 <f_read+0x28e>
    b39c:	86 85       	ldd	r24, Z+14	; 0x0e
    b39e:	80 ff       	sbrs	r24, 0
    b3a0:	26 c1       	rjmp	.+588    	; 0xb5ee <f_read+0x28a>
    b3a2:	82 85       	ldd	r24, Z+10	; 0x0a
    b3a4:	93 85       	ldd	r25, Z+11	; 0x0b
    b3a6:	a4 85       	ldd	r26, Z+12	; 0x0c
    b3a8:	b5 85       	ldd	r27, Z+13	; 0x0d
    b3aa:	40 89       	ldd	r20, Z+16	; 0x10
    b3ac:	51 89       	ldd	r21, Z+17	; 0x11
    b3ae:	62 89       	ldd	r22, Z+18	; 0x12
    b3b0:	73 89       	ldd	r23, Z+19	; 0x13
    b3b2:	84 1b       	sub	r24, r20
    b3b4:	95 0b       	sbc	r25, r21
    b3b6:	a6 0b       	sbc	r26, r22
    b3b8:	b7 0b       	sbc	r27, r23
    b3ba:	a5 01       	movw	r20, r10
    b3bc:	60 e0       	ldi	r22, 0x00	; 0
    b3be:	70 e0       	ldi	r23, 0x00	; 0
    b3c0:	84 17       	cp	r24, r20
    b3c2:	95 07       	cpc	r25, r21
    b3c4:	a6 07       	cpc	r26, r22
    b3c6:	b7 07       	cpc	r27, r23
    b3c8:	08 f4       	brcc	.+2      	; 0xb3cc <f_read+0x68>
    b3ca:	5c 01       	movw	r10, r24
    b3cc:	17 01       	movw	r2, r14
    b3ce:	f4 e2       	ldi	r31, 0x24	; 36
    b3d0:	2f 0e       	add	r2, r31
    b3d2:	31 1c       	adc	r3, r1
    b3d4:	a1 14       	cp	r10, r1
    b3d6:	b1 04       	cpc	r11, r1
    b3d8:	09 f4       	brne	.+2      	; 0xb3dc <f_read+0x78>
    b3da:	07 c1       	rjmp	.+526    	; 0xb5ea <f_read+0x286>
    b3dc:	f7 01       	movw	r30, r14
    b3de:	40 89       	ldd	r20, Z+16	; 0x10
    b3e0:	51 89       	ldd	r21, Z+17	; 0x11
    b3e2:	62 89       	ldd	r22, Z+18	; 0x12
    b3e4:	73 89       	ldd	r23, Z+19	; 0x13
    b3e6:	db 01       	movw	r26, r22
    b3e8:	ca 01       	movw	r24, r20
    b3ea:	91 70       	andi	r25, 0x01	; 1
    b3ec:	aa 27       	eor	r26, r26
    b3ee:	bb 27       	eor	r27, r27
    b3f0:	89 2b       	or	r24, r25
    b3f2:	8a 2b       	or	r24, r26
    b3f4:	8b 2b       	or	r24, r27
    b3f6:	09 f0       	breq	.+2      	; 0xb3fa <f_read+0x96>
    b3f8:	cb c0       	rjmp	.+406    	; 0xb590 <f_read+0x22c>
    b3fa:	e9 81       	ldd	r30, Y+1	; 0x01
    b3fc:	fa 81       	ldd	r31, Y+2	; 0x02
    b3fe:	01 85       	ldd	r16, Z+9	; 0x09
    b400:	12 85       	ldd	r17, Z+10	; 0x0a
    b402:	01 50       	subi	r16, 0x01	; 1
    b404:	11 09       	sbc	r17, r1
    b406:	db 01       	movw	r26, r22
    b408:	ca 01       	movw	r24, r20
    b40a:	e9 e0       	ldi	r30, 0x09	; 9
    b40c:	b6 95       	lsr	r27
    b40e:	a7 95       	ror	r26
    b410:	97 95       	ror	r25
    b412:	87 95       	ror	r24
    b414:	ea 95       	dec	r30
    b416:	d1 f7       	brne	.-12     	; 0xb40c <f_read+0xa8>
    b418:	08 23       	and	r16, r24
    b41a:	19 23       	and	r17, r25
    b41c:	01 15       	cp	r16, r1
    b41e:	11 05       	cpc	r17, r1
    b420:	91 f5       	brne	.+100    	; 0xb486 <f_read+0x122>
    b422:	f7 01       	movw	r30, r14
    b424:	41 15       	cp	r20, r1
    b426:	51 05       	cpc	r21, r1
    b428:	61 05       	cpc	r22, r1
    b42a:	71 05       	cpc	r23, r1
    b42c:	29 f4       	brne	.+10     	; 0xb438 <f_read+0xd4>
    b42e:	66 81       	ldd	r22, Z+6	; 0x06
    b430:	77 81       	ldd	r23, Z+7	; 0x07
    b432:	80 85       	ldd	r24, Z+8	; 0x08
    b434:	91 85       	ldd	r25, Z+9	; 0x09
    b436:	11 c0       	rjmp	.+34     	; 0xb45a <f_read+0xf6>
    b438:	82 a1       	ldd	r24, Z+34	; 0x22
    b43a:	93 a1       	ldd	r25, Z+35	; 0x23
    b43c:	89 2b       	or	r24, r25
    b43e:	21 f0       	breq	.+8      	; 0xb448 <f_read+0xe4>
    b440:	c7 01       	movw	r24, r14
    b442:	0e 94 53 46 	call	0x8ca6	; 0x8ca6 <clmt_clust>
    b446:	09 c0       	rjmp	.+18     	; 0xb45a <f_read+0xf6>
    b448:	f7 01       	movw	r30, r14
    b44a:	44 89       	ldd	r20, Z+20	; 0x14
    b44c:	55 89       	ldd	r21, Z+21	; 0x15
    b44e:	66 89       	ldd	r22, Z+22	; 0x16
    b450:	77 89       	ldd	r23, Z+23	; 0x17
    b452:	80 81       	ld	r24, Z
    b454:	91 81       	ldd	r25, Z+1	; 0x01
    b456:	0e 94 88 4d 	call	0x9b10	; 0x9b10 <get_fat.isra.9>
    b45a:	62 30       	cpi	r22, 0x02	; 2
    b45c:	71 05       	cpc	r23, r1
    b45e:	81 05       	cpc	r24, r1
    b460:	91 05       	cpc	r25, r1
    b462:	10 f4       	brcc	.+4      	; 0xb468 <f_read+0x104>
    b464:	82 e0       	ldi	r24, 0x02	; 2
    b466:	07 c0       	rjmp	.+14     	; 0xb476 <f_read+0x112>
    b468:	6f 3f       	cpi	r22, 0xFF	; 255
    b46a:	ff ef       	ldi	r31, 0xFF	; 255
    b46c:	7f 07       	cpc	r23, r31
    b46e:	8f 07       	cpc	r24, r31
    b470:	9f 07       	cpc	r25, r31
    b472:	21 f4       	brne	.+8      	; 0xb47c <f_read+0x118>
    b474:	81 e0       	ldi	r24, 0x01	; 1
    b476:	f7 01       	movw	r30, r14
    b478:	87 87       	std	Z+15, r24	; 0x0f
    b47a:	ba c0       	rjmp	.+372    	; 0xb5f0 <f_read+0x28c>
    b47c:	f7 01       	movw	r30, r14
    b47e:	64 8b       	std	Z+20, r22	; 0x14
    b480:	75 8b       	std	Z+21, r23	; 0x15
    b482:	86 8b       	std	Z+22, r24	; 0x16
    b484:	97 8b       	std	Z+23, r25	; 0x17
    b486:	89 81       	ldd	r24, Y+1	; 0x01
    b488:	9a 81       	ldd	r25, Y+2	; 0x02
    b48a:	9c 83       	std	Y+4, r25	; 0x04
    b48c:	8b 83       	std	Y+3, r24	; 0x03
    b48e:	f7 01       	movw	r30, r14
    b490:	44 89       	ldd	r20, Z+20	; 0x14
    b492:	55 89       	ldd	r21, Z+21	; 0x15
    b494:	66 89       	ldd	r22, Z+22	; 0x16
    b496:	77 89       	ldd	r23, Z+23	; 0x17
    b498:	0e 94 2b 46 	call	0x8c56	; 0x8c56 <clst2sect>
    b49c:	61 15       	cp	r22, r1
    b49e:	71 05       	cpc	r23, r1
    b4a0:	81 05       	cpc	r24, r1
    b4a2:	91 05       	cpc	r25, r1
    b4a4:	f9 f2       	breq	.-66     	; 0xb464 <f_read+0x100>
    b4a6:	2b 01       	movw	r4, r22
    b4a8:	3c 01       	movw	r6, r24
    b4aa:	40 0e       	add	r4, r16
    b4ac:	51 1e       	adc	r5, r17
    b4ae:	61 1c       	adc	r6, r1
    b4b0:	71 1c       	adc	r7, r1
    b4b2:	65 01       	movw	r12, r10
    b4b4:	cd 2c       	mov	r12, r13
    b4b6:	dd 24       	eor	r13, r13
    b4b8:	c6 94       	lsr	r12
    b4ba:	c1 14       	cp	r12, r1
    b4bc:	d1 04       	cpc	r13, r1
    b4be:	d1 f1       	breq	.+116    	; 0xb534 <f_read+0x1d0>
    b4c0:	eb 81       	ldd	r30, Y+3	; 0x03
    b4c2:	fc 81       	ldd	r31, Y+4	; 0x04
    b4c4:	81 85       	ldd	r24, Z+9	; 0x09
    b4c6:	92 85       	ldd	r25, Z+10	; 0x0a
    b4c8:	98 01       	movw	r18, r16
    b4ca:	2c 0d       	add	r18, r12
    b4cc:	3d 1d       	adc	r19, r13
    b4ce:	82 17       	cp	r24, r18
    b4d0:	93 07       	cpc	r25, r19
    b4d2:	18 f4       	brcc	.+6      	; 0xb4da <f_read+0x176>
    b4d4:	6c 01       	movw	r12, r24
    b4d6:	c0 1a       	sub	r12, r16
    b4d8:	d1 0a       	sbc	r13, r17
    b4da:	86 01       	movw	r16, r12
    b4dc:	a3 01       	movw	r20, r6
    b4de:	92 01       	movw	r18, r4
    b4e0:	b4 01       	movw	r22, r8
    b4e2:	eb 81       	ldd	r30, Y+3	; 0x03
    b4e4:	fc 81       	ldd	r31, Y+4	; 0x04
    b4e6:	81 81       	ldd	r24, Z+1	; 0x01
    b4e8:	0e 94 ec 67 	call	0xcfd8	; 0xcfd8 <disk_read>
    b4ec:	89 2b       	or	r24, r25
    b4ee:	11 f6       	brne	.-124    	; 0xb474 <f_read+0x110>
    b4f0:	f7 01       	movw	r30, r14
    b4f2:	86 85       	ldd	r24, Z+14	; 0x0e
    b4f4:	87 ff       	sbrs	r24, 7
    b4f6:	1a c0       	rjmp	.+52     	; 0xb52c <f_read+0x1c8>
    b4f8:	80 8d       	ldd	r24, Z+24	; 0x18
    b4fa:	91 8d       	ldd	r25, Z+25	; 0x19
    b4fc:	a2 8d       	ldd	r26, Z+26	; 0x1a
    b4fe:	b3 8d       	ldd	r27, Z+27	; 0x1b
    b500:	84 19       	sub	r24, r4
    b502:	95 09       	sbc	r25, r5
    b504:	a6 09       	sbc	r26, r6
    b506:	b7 09       	sbc	r27, r7
    b508:	a6 01       	movw	r20, r12
    b50a:	60 e0       	ldi	r22, 0x00	; 0
    b50c:	70 e0       	ldi	r23, 0x00	; 0
    b50e:	84 17       	cp	r24, r20
    b510:	95 07       	cpc	r25, r21
    b512:	a6 07       	cpc	r26, r22
    b514:	b7 07       	cpc	r27, r23
    b516:	50 f4       	brcc	.+20     	; 0xb52c <f_read+0x1c8>
    b518:	98 2f       	mov	r25, r24
    b51a:	88 27       	eor	r24, r24
    b51c:	99 0f       	add	r25, r25
    b51e:	40 e0       	ldi	r20, 0x00	; 0
    b520:	52 e0       	ldi	r21, 0x02	; 2
    b522:	b1 01       	movw	r22, r2
    b524:	88 0d       	add	r24, r8
    b526:	99 1d       	adc	r25, r9
    b528:	0e 94 20 48 	call	0x9040	; 0x9040 <mem_cpy.part.0>
    b52c:	dc 2c       	mov	r13, r12
    b52e:	cc 24       	eor	r12, r12
    b530:	dd 0c       	add	r13, r13
    b532:	41 c0       	rjmp	.+130    	; 0xb5b6 <f_read+0x252>
    b534:	f7 01       	movw	r30, r14
    b536:	20 8d       	ldd	r18, Z+24	; 0x18
    b538:	31 8d       	ldd	r19, Z+25	; 0x19
    b53a:	42 8d       	ldd	r20, Z+26	; 0x1a
    b53c:	53 8d       	ldd	r21, Z+27	; 0x1b
    b53e:	42 16       	cp	r4, r18
    b540:	53 06       	cpc	r5, r19
    b542:	64 06       	cpc	r6, r20
    b544:	75 06       	cpc	r7, r21
    b546:	f9 f0       	breq	.+62     	; 0xb586 <f_read+0x222>
    b548:	86 85       	ldd	r24, Z+14	; 0x0e
    b54a:	87 ff       	sbrs	r24, 7
    b54c:	0f c0       	rjmp	.+30     	; 0xb56c <f_read+0x208>
    b54e:	01 e0       	ldi	r16, 0x01	; 1
    b550:	10 e0       	ldi	r17, 0x00	; 0
    b552:	b1 01       	movw	r22, r2
    b554:	eb 81       	ldd	r30, Y+3	; 0x03
    b556:	fc 81       	ldd	r31, Y+4	; 0x04
    b558:	81 81       	ldd	r24, Z+1	; 0x01
    b55a:	0e 94 fc 67 	call	0xcff8	; 0xcff8 <disk_write>
    b55e:	89 2b       	or	r24, r25
    b560:	09 f0       	breq	.+2      	; 0xb564 <f_read+0x200>
    b562:	88 cf       	rjmp	.-240    	; 0xb474 <f_read+0x110>
    b564:	f7 01       	movw	r30, r14
    b566:	86 85       	ldd	r24, Z+14	; 0x0e
    b568:	8f 77       	andi	r24, 0x7F	; 127
    b56a:	86 87       	std	Z+14, r24	; 0x0e
    b56c:	e9 81       	ldd	r30, Y+1	; 0x01
    b56e:	fa 81       	ldd	r31, Y+2	; 0x02
    b570:	01 e0       	ldi	r16, 0x01	; 1
    b572:	10 e0       	ldi	r17, 0x00	; 0
    b574:	a3 01       	movw	r20, r6
    b576:	92 01       	movw	r18, r4
    b578:	b1 01       	movw	r22, r2
    b57a:	81 81       	ldd	r24, Z+1	; 0x01
    b57c:	0e 94 ec 67 	call	0xcfd8	; 0xcfd8 <disk_read>
    b580:	89 2b       	or	r24, r25
    b582:	09 f0       	breq	.+2      	; 0xb586 <f_read+0x222>
    b584:	77 cf       	rjmp	.-274    	; 0xb474 <f_read+0x110>
    b586:	f7 01       	movw	r30, r14
    b588:	40 8e       	std	Z+24, r4	; 0x18
    b58a:	51 8e       	std	Z+25, r5	; 0x19
    b58c:	62 8e       	std	Z+26, r6	; 0x1a
    b58e:	73 8e       	std	Z+27, r7	; 0x1b
    b590:	f7 01       	movw	r30, r14
    b592:	60 89       	ldd	r22, Z+16	; 0x10
    b594:	71 89       	ldd	r23, Z+17	; 0x11
    b596:	71 70       	andi	r23, 0x01	; 1
    b598:	80 e0       	ldi	r24, 0x00	; 0
    b59a:	92 e0       	ldi	r25, 0x02	; 2
    b59c:	86 1b       	sub	r24, r22
    b59e:	97 0b       	sbc	r25, r23
    b5a0:	65 01       	movw	r12, r10
    b5a2:	8a 15       	cp	r24, r10
    b5a4:	9b 05       	cpc	r25, r11
    b5a6:	08 f4       	brcc	.+2      	; 0xb5aa <f_read+0x246>
    b5a8:	6c 01       	movw	r12, r24
    b5aa:	62 0d       	add	r22, r2
    b5ac:	73 1d       	adc	r23, r3
    b5ae:	a6 01       	movw	r20, r12
    b5b0:	c4 01       	movw	r24, r8
    b5b2:	0e 94 20 48 	call	0x9040	; 0x9040 <mem_cpy.part.0>
    b5b6:	ac 18       	sub	r10, r12
    b5b8:	bd 08       	sbc	r11, r13
    b5ba:	ed 81       	ldd	r30, Y+5	; 0x05
    b5bc:	fe 81       	ldd	r31, Y+6	; 0x06
    b5be:	80 81       	ld	r24, Z
    b5c0:	91 81       	ldd	r25, Z+1	; 0x01
    b5c2:	8c 0d       	add	r24, r12
    b5c4:	9d 1d       	adc	r25, r13
    b5c6:	91 83       	std	Z+1, r25	; 0x01
    b5c8:	80 83       	st	Z, r24
    b5ca:	8c 0c       	add	r8, r12
    b5cc:	9d 1c       	adc	r9, r13
    b5ce:	f7 01       	movw	r30, r14
    b5d0:	80 89       	ldd	r24, Z+16	; 0x10
    b5d2:	91 89       	ldd	r25, Z+17	; 0x11
    b5d4:	a2 89       	ldd	r26, Z+18	; 0x12
    b5d6:	b3 89       	ldd	r27, Z+19	; 0x13
    b5d8:	8c 0d       	add	r24, r12
    b5da:	9d 1d       	adc	r25, r13
    b5dc:	a1 1d       	adc	r26, r1
    b5de:	b1 1d       	adc	r27, r1
    b5e0:	80 8b       	std	Z+16, r24	; 0x10
    b5e2:	91 8b       	std	Z+17, r25	; 0x11
    b5e4:	a2 8b       	std	Z+18, r26	; 0x12
    b5e6:	b3 8b       	std	Z+19, r27	; 0x13
    b5e8:	f5 ce       	rjmp	.-534    	; 0xb3d4 <f_read+0x70>
    b5ea:	80 e0       	ldi	r24, 0x00	; 0
    b5ec:	01 c0       	rjmp	.+2      	; 0xb5f0 <f_read+0x28c>
    b5ee:	87 e0       	ldi	r24, 0x07	; 7
    b5f0:	90 e0       	ldi	r25, 0x00	; 0
    b5f2:	26 96       	adiw	r28, 0x06	; 6
    b5f4:	e2 e1       	ldi	r30, 0x12	; 18
    b5f6:	0c 94 25 e3 	jmp	0x1c64a	; 0x1c64a <__epilogue_restores__>

0000b5fa <f_write>:
    b5fa:	a8 e0       	ldi	r26, 0x08	; 8
    b5fc:	b0 e0       	ldi	r27, 0x00	; 0
    b5fe:	e3 e0       	ldi	r30, 0x03	; 3
    b600:	fb e5       	ldi	r31, 0x5B	; 91
    b602:	0c 94 09 e3 	jmp	0x1c612	; 0x1c612 <__prologue_saves__>
    b606:	7c 01       	movw	r14, r24
    b608:	3b 01       	movw	r6, r22
    b60a:	5a 01       	movw	r10, r20
    b60c:	38 87       	std	Y+8, r19	; 0x08
    b60e:	2f 83       	std	Y+7, r18	; 0x07
    b610:	f9 01       	movw	r30, r18
    b612:	11 82       	std	Z+1, r1	; 0x01
    b614:	10 82       	st	Z, r1
    b616:	be 01       	movw	r22, r28
    b618:	6f 5f       	subi	r22, 0xFF	; 255
    b61a:	7f 4f       	sbci	r23, 0xFF	; 255
    b61c:	0e 94 ca 46 	call	0x8d94	; 0x8d94 <validate>
    b620:	00 97       	sbiw	r24, 0x00	; 0
    b622:	09 f0       	breq	.+2      	; 0xb626 <f_write+0x2c>
    b624:	7d c1       	rjmp	.+762    	; 0xb920 <f_write+0x326>
    b626:	f7 01       	movw	r30, r14
    b628:	87 85       	ldd	r24, Z+15	; 0x0f
    b62a:	90 e0       	ldi	r25, 0x00	; 0
    b62c:	00 97       	sbiw	r24, 0x00	; 0
    b62e:	09 f0       	breq	.+2      	; 0xb632 <f_write+0x38>
    b630:	77 c1       	rjmp	.+750    	; 0xb920 <f_write+0x326>
    b632:	86 85       	ldd	r24, Z+14	; 0x0e
    b634:	81 ff       	sbrs	r24, 1
    b636:	72 c1       	rjmp	.+740    	; 0xb91c <f_write+0x322>
    b638:	80 89       	ldd	r24, Z+16	; 0x10
    b63a:	91 89       	ldd	r25, Z+17	; 0x11
    b63c:	a2 89       	ldd	r26, Z+18	; 0x12
    b63e:	b3 89       	ldd	r27, Z+19	; 0x13
    b640:	ac 01       	movw	r20, r24
    b642:	bd 01       	movw	r22, r26
    b644:	4a 0d       	add	r20, r10
    b646:	5b 1d       	adc	r21, r11
    b648:	61 1d       	adc	r22, r1
    b64a:	71 1d       	adc	r23, r1
    b64c:	48 17       	cp	r20, r24
    b64e:	59 07       	cpc	r21, r25
    b650:	6a 07       	cpc	r22, r26
    b652:	7b 07       	cpc	r23, r27
    b654:	18 f4       	brcc	.+6      	; 0xb65c <f_write+0x62>
    b656:	5c 01       	movw	r10, r24
    b658:	a0 94       	com	r10
    b65a:	b0 94       	com	r11
    b65c:	97 01       	movw	r18, r14
    b65e:	2c 5d       	subi	r18, 0xDC	; 220
    b660:	3f 4f       	sbci	r19, 0xFF	; 255
    b662:	3e 83       	std	Y+6, r19	; 0x06
    b664:	2d 83       	std	Y+5, r18	; 0x05
    b666:	a1 14       	cp	r10, r1
    b668:	b1 04       	cpc	r11, r1
    b66a:	09 f4       	brne	.+2      	; 0xb66e <f_write+0x74>
    b66c:	4d c0       	rjmp	.+154    	; 0xb708 <f_write+0x10e>
    b66e:	f7 01       	movw	r30, r14
    b670:	40 89       	ldd	r20, Z+16	; 0x10
    b672:	51 89       	ldd	r21, Z+17	; 0x11
    b674:	62 89       	ldd	r22, Z+18	; 0x12
    b676:	73 89       	ldd	r23, Z+19	; 0x13
    b678:	db 01       	movw	r26, r22
    b67a:	ca 01       	movw	r24, r20
    b67c:	91 70       	andi	r25, 0x01	; 1
    b67e:	aa 27       	eor	r26, r26
    b680:	bb 27       	eor	r27, r27
    b682:	89 2b       	or	r24, r25
    b684:	8a 2b       	or	r24, r26
    b686:	8b 2b       	or	r24, r27
    b688:	09 f0       	breq	.+2      	; 0xb68c <f_write+0x92>
    b68a:	05 c1       	rjmp	.+522    	; 0xb896 <f_write+0x29c>
    b68c:	e9 81       	ldd	r30, Y+1	; 0x01
    b68e:	fa 81       	ldd	r31, Y+2	; 0x02
    b690:	81 84       	ldd	r8, Z+9	; 0x09
    b692:	92 84       	ldd	r9, Z+10	; 0x0a
    b694:	f1 e0       	ldi	r31, 0x01	; 1
    b696:	8f 1a       	sub	r8, r31
    b698:	91 08       	sbc	r9, r1
    b69a:	db 01       	movw	r26, r22
    b69c:	ca 01       	movw	r24, r20
    b69e:	e9 e0       	ldi	r30, 0x09	; 9
    b6a0:	b6 95       	lsr	r27
    b6a2:	a7 95       	ror	r26
    b6a4:	97 95       	ror	r25
    b6a6:	87 95       	ror	r24
    b6a8:	ea 95       	dec	r30
    b6aa:	d1 f7       	brne	.-12     	; 0xb6a0 <f_write+0xa6>
    b6ac:	88 22       	and	r8, r24
    b6ae:	99 22       	and	r9, r25
    b6b0:	81 14       	cp	r8, r1
    b6b2:	91 04       	cpc	r9, r1
    b6b4:	09 f0       	breq	.+2      	; 0xb6b8 <f_write+0xbe>
    b6b6:	51 c0       	rjmp	.+162    	; 0xb75a <f_write+0x160>
    b6b8:	f7 01       	movw	r30, r14
    b6ba:	41 15       	cp	r20, r1
    b6bc:	51 05       	cpc	r21, r1
    b6be:	61 05       	cpc	r22, r1
    b6c0:	71 05       	cpc	r23, r1
    b6c2:	69 f4       	brne	.+26     	; 0xb6de <f_write+0xe4>
    b6c4:	66 81       	ldd	r22, Z+6	; 0x06
    b6c6:	77 81       	ldd	r23, Z+7	; 0x07
    b6c8:	80 85       	ldd	r24, Z+8	; 0x08
    b6ca:	91 85       	ldd	r25, Z+9	; 0x09
    b6cc:	61 15       	cp	r22, r1
    b6ce:	71 05       	cpc	r23, r1
    b6d0:	81 05       	cpc	r24, r1
    b6d2:	91 05       	cpc	r25, r1
    b6d4:	f9 f4       	brne	.+62     	; 0xb714 <f_write+0x11a>
    b6d6:	40 e0       	ldi	r20, 0x00	; 0
    b6d8:	50 e0       	ldi	r21, 0x00	; 0
    b6da:	ba 01       	movw	r22, r20
    b6dc:	0d c0       	rjmp	.+26     	; 0xb6f8 <f_write+0xfe>
    b6de:	82 a1       	ldd	r24, Z+34	; 0x22
    b6e0:	93 a1       	ldd	r25, Z+35	; 0x23
    b6e2:	89 2b       	or	r24, r25
    b6e4:	21 f0       	breq	.+8      	; 0xb6ee <f_write+0xf4>
    b6e6:	c7 01       	movw	r24, r14
    b6e8:	0e 94 53 46 	call	0x8ca6	; 0x8ca6 <clmt_clust>
    b6ec:	08 c0       	rjmp	.+16     	; 0xb6fe <f_write+0x104>
    b6ee:	f7 01       	movw	r30, r14
    b6f0:	44 89       	ldd	r20, Z+20	; 0x14
    b6f2:	55 89       	ldd	r21, Z+21	; 0x15
    b6f4:	66 89       	ldd	r22, Z+22	; 0x16
    b6f6:	77 89       	ldd	r23, Z+23	; 0x17
    b6f8:	c7 01       	movw	r24, r14
    b6fa:	0e 94 fd 4e 	call	0x9dfa	; 0x9dfa <create_chain>
    b6fe:	61 15       	cp	r22, r1
    b700:	71 05       	cpc	r23, r1
    b702:	81 05       	cpc	r24, r1
    b704:	91 05       	cpc	r25, r1
    b706:	31 f4       	brne	.+12     	; 0xb714 <f_write+0x11a>
    b708:	f7 01       	movw	r30, r14
    b70a:	86 85       	ldd	r24, Z+14	; 0x0e
    b70c:	80 64       	ori	r24, 0x40	; 64
    b70e:	86 87       	std	Z+14, r24	; 0x0e
    b710:	80 e0       	ldi	r24, 0x00	; 0
    b712:	05 c1       	rjmp	.+522    	; 0xb91e <f_write+0x324>
    b714:	61 30       	cpi	r22, 0x01	; 1
    b716:	71 05       	cpc	r23, r1
    b718:	81 05       	cpc	r24, r1
    b71a:	91 05       	cpc	r25, r1
    b71c:	11 f4       	brne	.+4      	; 0xb722 <f_write+0x128>
    b71e:	82 e0       	ldi	r24, 0x02	; 2
    b720:	07 c0       	rjmp	.+14     	; 0xb730 <f_write+0x136>
    b722:	6f 3f       	cpi	r22, 0xFF	; 255
    b724:	ff ef       	ldi	r31, 0xFF	; 255
    b726:	7f 07       	cpc	r23, r31
    b728:	8f 07       	cpc	r24, r31
    b72a:	9f 07       	cpc	r25, r31
    b72c:	21 f4       	brne	.+8      	; 0xb736 <f_write+0x13c>
    b72e:	81 e0       	ldi	r24, 0x01	; 1
    b730:	f7 01       	movw	r30, r14
    b732:	87 87       	std	Z+15, r24	; 0x0f
    b734:	f4 c0       	rjmp	.+488    	; 0xb91e <f_write+0x324>
    b736:	f7 01       	movw	r30, r14
    b738:	64 8b       	std	Z+20, r22	; 0x14
    b73a:	75 8b       	std	Z+21, r23	; 0x15
    b73c:	86 8b       	std	Z+22, r24	; 0x16
    b73e:	97 8b       	std	Z+23, r25	; 0x17
    b740:	06 81       	ldd	r16, Z+6	; 0x06
    b742:	17 81       	ldd	r17, Z+7	; 0x07
    b744:	20 85       	ldd	r18, Z+8	; 0x08
    b746:	31 85       	ldd	r19, Z+9	; 0x09
    b748:	01 15       	cp	r16, r1
    b74a:	11 05       	cpc	r17, r1
    b74c:	21 05       	cpc	r18, r1
    b74e:	31 05       	cpc	r19, r1
    b750:	21 f4       	brne	.+8      	; 0xb75a <f_write+0x160>
    b752:	66 83       	std	Z+6, r22	; 0x06
    b754:	77 83       	std	Z+7, r23	; 0x07
    b756:	80 87       	std	Z+8, r24	; 0x08
    b758:	91 87       	std	Z+9, r25	; 0x09
    b75a:	f7 01       	movw	r30, r14
    b75c:	86 85       	ldd	r24, Z+14	; 0x0e
    b75e:	87 ff       	sbrs	r24, 7
    b760:	13 c0       	rjmp	.+38     	; 0xb788 <f_write+0x18e>
    b762:	20 8d       	ldd	r18, Z+24	; 0x18
    b764:	31 8d       	ldd	r19, Z+25	; 0x19
    b766:	42 8d       	ldd	r20, Z+26	; 0x1a
    b768:	53 8d       	ldd	r21, Z+27	; 0x1b
    b76a:	e9 81       	ldd	r30, Y+1	; 0x01
    b76c:	fa 81       	ldd	r31, Y+2	; 0x02
    b76e:	01 e0       	ldi	r16, 0x01	; 1
    b770:	10 e0       	ldi	r17, 0x00	; 0
    b772:	6d 81       	ldd	r22, Y+5	; 0x05
    b774:	7e 81       	ldd	r23, Y+6	; 0x06
    b776:	81 81       	ldd	r24, Z+1	; 0x01
    b778:	0e 94 fc 67 	call	0xcff8	; 0xcff8 <disk_write>
    b77c:	89 2b       	or	r24, r25
    b77e:	b9 f6       	brne	.-82     	; 0xb72e <f_write+0x134>
    b780:	f7 01       	movw	r30, r14
    b782:	86 85       	ldd	r24, Z+14	; 0x0e
    b784:	8f 77       	andi	r24, 0x7F	; 127
    b786:	86 87       	std	Z+14, r24	; 0x0e
    b788:	29 81       	ldd	r18, Y+1	; 0x01
    b78a:	3a 81       	ldd	r19, Y+2	; 0x02
    b78c:	3c 83       	std	Y+4, r19	; 0x04
    b78e:	2b 83       	std	Y+3, r18	; 0x03
    b790:	f7 01       	movw	r30, r14
    b792:	44 89       	ldd	r20, Z+20	; 0x14
    b794:	55 89       	ldd	r21, Z+21	; 0x15
    b796:	66 89       	ldd	r22, Z+22	; 0x16
    b798:	77 89       	ldd	r23, Z+23	; 0x17
    b79a:	c9 01       	movw	r24, r18
    b79c:	0e 94 2b 46 	call	0x8c56	; 0x8c56 <clst2sect>
    b7a0:	61 15       	cp	r22, r1
    b7a2:	71 05       	cpc	r23, r1
    b7a4:	81 05       	cpc	r24, r1
    b7a6:	91 05       	cpc	r25, r1
    b7a8:	09 f4       	brne	.+2      	; 0xb7ac <f_write+0x1b2>
    b7aa:	b9 cf       	rjmp	.-142    	; 0xb71e <f_write+0x124>
    b7ac:	1b 01       	movw	r2, r22
    b7ae:	2c 01       	movw	r4, r24
    b7b0:	28 0c       	add	r2, r8
    b7b2:	39 1c       	adc	r3, r9
    b7b4:	41 1c       	adc	r4, r1
    b7b6:	51 1c       	adc	r5, r1
    b7b8:	65 01       	movw	r12, r10
    b7ba:	cd 2c       	mov	r12, r13
    b7bc:	dd 24       	eor	r13, r13
    b7be:	c6 94       	lsr	r12
    b7c0:	c1 14       	cp	r12, r1
    b7c2:	d1 04       	cpc	r13, r1
    b7c4:	f1 f1       	breq	.+124    	; 0xb842 <f_write+0x248>
    b7c6:	eb 81       	ldd	r30, Y+3	; 0x03
    b7c8:	fc 81       	ldd	r31, Y+4	; 0x04
    b7ca:	81 85       	ldd	r24, Z+9	; 0x09
    b7cc:	92 85       	ldd	r25, Z+10	; 0x0a
    b7ce:	94 01       	movw	r18, r8
    b7d0:	2c 0d       	add	r18, r12
    b7d2:	3d 1d       	adc	r19, r13
    b7d4:	82 17       	cp	r24, r18
    b7d6:	93 07       	cpc	r25, r19
    b7d8:	18 f4       	brcc	.+6      	; 0xb7e0 <f_write+0x1e6>
    b7da:	6c 01       	movw	r12, r24
    b7dc:	c8 18       	sub	r12, r8
    b7de:	d9 08       	sbc	r13, r9
    b7e0:	86 01       	movw	r16, r12
    b7e2:	a2 01       	movw	r20, r4
    b7e4:	91 01       	movw	r18, r2
    b7e6:	b3 01       	movw	r22, r6
    b7e8:	eb 81       	ldd	r30, Y+3	; 0x03
    b7ea:	fc 81       	ldd	r31, Y+4	; 0x04
    b7ec:	81 81       	ldd	r24, Z+1	; 0x01
    b7ee:	0e 94 fc 67 	call	0xcff8	; 0xcff8 <disk_write>
    b7f2:	89 2b       	or	r24, r25
    b7f4:	09 f0       	breq	.+2      	; 0xb7f8 <f_write+0x1fe>
    b7f6:	9b cf       	rjmp	.-202    	; 0xb72e <f_write+0x134>
    b7f8:	f7 01       	movw	r30, r14
    b7fa:	80 8d       	ldd	r24, Z+24	; 0x18
    b7fc:	91 8d       	ldd	r25, Z+25	; 0x19
    b7fe:	a2 8d       	ldd	r26, Z+26	; 0x1a
    b800:	b3 8d       	ldd	r27, Z+27	; 0x1b
    b802:	82 19       	sub	r24, r2
    b804:	93 09       	sbc	r25, r3
    b806:	a4 09       	sbc	r26, r4
    b808:	b5 09       	sbc	r27, r5
    b80a:	a6 01       	movw	r20, r12
    b80c:	60 e0       	ldi	r22, 0x00	; 0
    b80e:	70 e0       	ldi	r23, 0x00	; 0
    b810:	84 17       	cp	r24, r20
    b812:	95 07       	cpc	r25, r21
    b814:	a6 07       	cpc	r26, r22
    b816:	b7 07       	cpc	r27, r23
    b818:	80 f4       	brcc	.+32     	; 0xb83a <f_write+0x240>
    b81a:	98 2f       	mov	r25, r24
    b81c:	88 27       	eor	r24, r24
    b81e:	99 0f       	add	r25, r25
    b820:	b3 01       	movw	r22, r6
    b822:	68 0f       	add	r22, r24
    b824:	79 1f       	adc	r23, r25
    b826:	40 e0       	ldi	r20, 0x00	; 0
    b828:	52 e0       	ldi	r21, 0x02	; 2
    b82a:	8d 81       	ldd	r24, Y+5	; 0x05
    b82c:	9e 81       	ldd	r25, Y+6	; 0x06
    b82e:	0e 94 20 48 	call	0x9040	; 0x9040 <mem_cpy.part.0>
    b832:	f7 01       	movw	r30, r14
    b834:	86 85       	ldd	r24, Z+14	; 0x0e
    b836:	8f 77       	andi	r24, 0x7F	; 127
    b838:	86 87       	std	Z+14, r24	; 0x0e
    b83a:	dc 2c       	mov	r13, r12
    b83c:	cc 24       	eor	r12, r12
    b83e:	dd 0c       	add	r13, r13
    b840:	43 c0       	rjmp	.+134    	; 0xb8c8 <f_write+0x2ce>
    b842:	f7 01       	movw	r30, r14
    b844:	80 8d       	ldd	r24, Z+24	; 0x18
    b846:	91 8d       	ldd	r25, Z+25	; 0x19
    b848:	a2 8d       	ldd	r26, Z+26	; 0x1a
    b84a:	b3 8d       	ldd	r27, Z+27	; 0x1b
    b84c:	28 16       	cp	r2, r24
    b84e:	39 06       	cpc	r3, r25
    b850:	4a 06       	cpc	r4, r26
    b852:	5b 06       	cpc	r5, r27
    b854:	d9 f0       	breq	.+54     	; 0xb88c <f_write+0x292>
    b856:	40 89       	ldd	r20, Z+16	; 0x10
    b858:	51 89       	ldd	r21, Z+17	; 0x11
    b85a:	62 89       	ldd	r22, Z+18	; 0x12
    b85c:	73 89       	ldd	r23, Z+19	; 0x13
    b85e:	82 85       	ldd	r24, Z+10	; 0x0a
    b860:	93 85       	ldd	r25, Z+11	; 0x0b
    b862:	a4 85       	ldd	r26, Z+12	; 0x0c
    b864:	b5 85       	ldd	r27, Z+13	; 0x0d
    b866:	48 17       	cp	r20, r24
    b868:	59 07       	cpc	r21, r25
    b86a:	6a 07       	cpc	r22, r26
    b86c:	7b 07       	cpc	r23, r27
    b86e:	70 f4       	brcc	.+28     	; 0xb88c <f_write+0x292>
    b870:	01 e0       	ldi	r16, 0x01	; 1
    b872:	10 e0       	ldi	r17, 0x00	; 0
    b874:	a2 01       	movw	r20, r4
    b876:	91 01       	movw	r18, r2
    b878:	6d 81       	ldd	r22, Y+5	; 0x05
    b87a:	7e 81       	ldd	r23, Y+6	; 0x06
    b87c:	eb 81       	ldd	r30, Y+3	; 0x03
    b87e:	fc 81       	ldd	r31, Y+4	; 0x04
    b880:	81 81       	ldd	r24, Z+1	; 0x01
    b882:	0e 94 ec 67 	call	0xcfd8	; 0xcfd8 <disk_read>
    b886:	89 2b       	or	r24, r25
    b888:	09 f0       	breq	.+2      	; 0xb88c <f_write+0x292>
    b88a:	51 cf       	rjmp	.-350    	; 0xb72e <f_write+0x134>
    b88c:	f7 01       	movw	r30, r14
    b88e:	20 8e       	std	Z+24, r2	; 0x18
    b890:	31 8e       	std	Z+25, r3	; 0x19
    b892:	42 8e       	std	Z+26, r4	; 0x1a
    b894:	53 8e       	std	Z+27, r5	; 0x1b
    b896:	f7 01       	movw	r30, r14
    b898:	80 89       	ldd	r24, Z+16	; 0x10
    b89a:	91 89       	ldd	r25, Z+17	; 0x11
    b89c:	91 70       	andi	r25, 0x01	; 1
    b89e:	20 e0       	ldi	r18, 0x00	; 0
    b8a0:	32 e0       	ldi	r19, 0x02	; 2
    b8a2:	28 1b       	sub	r18, r24
    b8a4:	39 0b       	sbc	r19, r25
    b8a6:	65 01       	movw	r12, r10
    b8a8:	2a 15       	cp	r18, r10
    b8aa:	3b 05       	cpc	r19, r11
    b8ac:	08 f4       	brcc	.+2      	; 0xb8b0 <f_write+0x2b6>
    b8ae:	69 01       	movw	r12, r18
    b8b0:	a6 01       	movw	r20, r12
    b8b2:	b3 01       	movw	r22, r6
    b8b4:	2d 81       	ldd	r18, Y+5	; 0x05
    b8b6:	3e 81       	ldd	r19, Y+6	; 0x06
    b8b8:	82 0f       	add	r24, r18
    b8ba:	93 1f       	adc	r25, r19
    b8bc:	0e 94 20 48 	call	0x9040	; 0x9040 <mem_cpy.part.0>
    b8c0:	f7 01       	movw	r30, r14
    b8c2:	86 85       	ldd	r24, Z+14	; 0x0e
    b8c4:	80 68       	ori	r24, 0x80	; 128
    b8c6:	86 87       	std	Z+14, r24	; 0x0e
    b8c8:	ac 18       	sub	r10, r12
    b8ca:	bd 08       	sbc	r11, r13
    b8cc:	ef 81       	ldd	r30, Y+7	; 0x07
    b8ce:	f8 85       	ldd	r31, Y+8	; 0x08
    b8d0:	80 81       	ld	r24, Z
    b8d2:	91 81       	ldd	r25, Z+1	; 0x01
    b8d4:	8c 0d       	add	r24, r12
    b8d6:	9d 1d       	adc	r25, r13
    b8d8:	91 83       	std	Z+1, r25	; 0x01
    b8da:	80 83       	st	Z, r24
    b8dc:	6c 0c       	add	r6, r12
    b8de:	7d 1c       	adc	r7, r13
    b8e0:	f7 01       	movw	r30, r14
    b8e2:	80 89       	ldd	r24, Z+16	; 0x10
    b8e4:	91 89       	ldd	r25, Z+17	; 0x11
    b8e6:	a2 89       	ldd	r26, Z+18	; 0x12
    b8e8:	b3 89       	ldd	r27, Z+19	; 0x13
    b8ea:	8c 0d       	add	r24, r12
    b8ec:	9d 1d       	adc	r25, r13
    b8ee:	a1 1d       	adc	r26, r1
    b8f0:	b1 1d       	adc	r27, r1
    b8f2:	80 8b       	std	Z+16, r24	; 0x10
    b8f4:	91 8b       	std	Z+17, r25	; 0x11
    b8f6:	a2 8b       	std	Z+18, r26	; 0x12
    b8f8:	b3 8b       	std	Z+19, r27	; 0x13
    b8fa:	42 85       	ldd	r20, Z+10	; 0x0a
    b8fc:	53 85       	ldd	r21, Z+11	; 0x0b
    b8fe:	64 85       	ldd	r22, Z+12	; 0x0c
    b900:	75 85       	ldd	r23, Z+13	; 0x0d
    b902:	48 17       	cp	r20, r24
    b904:	59 07       	cpc	r21, r25
    b906:	6a 07       	cpc	r22, r26
    b908:	7b 07       	cpc	r23, r27
    b90a:	10 f4       	brcc	.+4      	; 0xb910 <f_write+0x316>
    b90c:	ac 01       	movw	r20, r24
    b90e:	bd 01       	movw	r22, r26
    b910:	f7 01       	movw	r30, r14
    b912:	42 87       	std	Z+10, r20	; 0x0a
    b914:	53 87       	std	Z+11, r21	; 0x0b
    b916:	64 87       	std	Z+12, r22	; 0x0c
    b918:	75 87       	std	Z+13, r23	; 0x0d
    b91a:	a5 ce       	rjmp	.-694    	; 0xb666 <f_write+0x6c>
    b91c:	87 e0       	ldi	r24, 0x07	; 7
    b91e:	90 e0       	ldi	r25, 0x00	; 0
    b920:	28 96       	adiw	r28, 0x08	; 8
    b922:	e2 e1       	ldi	r30, 0x12	; 18
    b924:	0c 94 25 e3 	jmp	0x1c64a	; 0x1c64a <__epilogue_restores__>

0000b928 <f_sync>:
    b928:	8f 92       	push	r8
    b92a:	9f 92       	push	r9
    b92c:	af 92       	push	r10
    b92e:	bf 92       	push	r11
    b930:	ef 92       	push	r14
    b932:	ff 92       	push	r15
    b934:	0f 93       	push	r16
    b936:	1f 93       	push	r17
    b938:	cf 93       	push	r28
    b93a:	df 93       	push	r29
    b93c:	00 d0       	rcall	.+0      	; 0xb93e <f_sync+0x16>
    b93e:	cd b7       	in	r28, 0x3d	; 61
    b940:	de b7       	in	r29, 0x3e	; 62
    b942:	7c 01       	movw	r14, r24
    b944:	be 01       	movw	r22, r28
    b946:	6f 5f       	subi	r22, 0xFF	; 255
    b948:	7f 4f       	sbci	r23, 0xFF	; 255
    b94a:	0e 94 ca 46 	call	0x8d94	; 0x8d94 <validate>
    b94e:	00 97       	sbiw	r24, 0x00	; 0
    b950:	09 f0       	breq	.+2      	; 0xb954 <f_sync+0x2c>
    b952:	5d c0       	rjmp	.+186    	; 0xba0e <f_sync+0xe6>
    b954:	f7 01       	movw	r30, r14
    b956:	86 85       	ldd	r24, Z+14	; 0x0e
    b958:	86 ff       	sbrs	r24, 6
    b95a:	55 c0       	rjmp	.+170    	; 0xba06 <f_sync+0xde>
    b95c:	87 ff       	sbrs	r24, 7
    b95e:	15 c0       	rjmp	.+42     	; 0xb98a <f_sync+0x62>
    b960:	20 8d       	ldd	r18, Z+24	; 0x18
    b962:	31 8d       	ldd	r19, Z+25	; 0x19
    b964:	42 8d       	ldd	r20, Z+26	; 0x1a
    b966:	53 8d       	ldd	r21, Z+27	; 0x1b
    b968:	e9 81       	ldd	r30, Y+1	; 0x01
    b96a:	fa 81       	ldd	r31, Y+2	; 0x02
    b96c:	01 e0       	ldi	r16, 0x01	; 1
    b96e:	10 e0       	ldi	r17, 0x00	; 0
    b970:	b7 01       	movw	r22, r14
    b972:	6c 5d       	subi	r22, 0xDC	; 220
    b974:	7f 4f       	sbci	r23, 0xFF	; 255
    b976:	81 81       	ldd	r24, Z+1	; 0x01
    b978:	0e 94 fc 67 	call	0xcff8	; 0xcff8 <disk_write>
    b97c:	89 2b       	or	r24, r25
    b97e:	09 f0       	breq	.+2      	; 0xb982 <f_sync+0x5a>
    b980:	44 c0       	rjmp	.+136    	; 0xba0a <f_sync+0xe2>
    b982:	f7 01       	movw	r30, r14
    b984:	86 85       	ldd	r24, Z+14	; 0x0e
    b986:	8f 77       	andi	r24, 0x7F	; 127
    b988:	86 87       	std	Z+14, r24	; 0x0e
    b98a:	0e 94 a1 6e 	call	0xdd42	; 0xdd42 <get_fattime>
    b98e:	4b 01       	movw	r8, r22
    b990:	5c 01       	movw	r10, r24
    b992:	f7 01       	movw	r30, r14
    b994:	44 8d       	ldd	r20, Z+28	; 0x1c
    b996:	55 8d       	ldd	r21, Z+29	; 0x1d
    b998:	66 8d       	ldd	r22, Z+30	; 0x1e
    b99a:	77 8d       	ldd	r23, Z+31	; 0x1f
    b99c:	89 81       	ldd	r24, Y+1	; 0x01
    b99e:	9a 81       	ldd	r25, Y+2	; 0x02
    b9a0:	0e 94 ba 49 	call	0x9374	; 0x9374 <move_window>
    b9a4:	00 97       	sbiw	r24, 0x00	; 0
    b9a6:	99 f5       	brne	.+102    	; 0xba0e <f_sync+0xe6>
    b9a8:	f7 01       	movw	r30, r14
    b9aa:	00 a1       	ldd	r16, Z+32	; 0x20
    b9ac:	11 a1       	ldd	r17, Z+33	; 0x21
    b9ae:	f8 01       	movw	r30, r16
    b9b0:	83 85       	ldd	r24, Z+11	; 0x0b
    b9b2:	80 62       	ori	r24, 0x20	; 32
    b9b4:	83 87       	std	Z+11, r24	; 0x0b
    b9b6:	f7 01       	movw	r30, r14
    b9b8:	26 81       	ldd	r18, Z+6	; 0x06
    b9ba:	37 81       	ldd	r19, Z+7	; 0x07
    b9bc:	40 85       	ldd	r20, Z+8	; 0x08
    b9be:	51 85       	ldd	r21, Z+9	; 0x09
    b9c0:	b8 01       	movw	r22, r16
    b9c2:	80 81       	ld	r24, Z
    b9c4:	91 81       	ldd	r25, Z+1	; 0x01
    b9c6:	0e 94 40 48 	call	0x9080	; 0x9080 <st_clust.isra.4>
    b9ca:	f7 01       	movw	r30, r14
    b9cc:	42 85       	ldd	r20, Z+10	; 0x0a
    b9ce:	53 85       	ldd	r21, Z+11	; 0x0b
    b9d0:	64 85       	ldd	r22, Z+12	; 0x0c
    b9d2:	75 85       	ldd	r23, Z+13	; 0x0d
    b9d4:	c8 01       	movw	r24, r16
    b9d6:	4c 96       	adiw	r24, 0x1c	; 28
    b9d8:	0e 94 0d 46 	call	0x8c1a	; 0x8c1a <st_dword>
    b9dc:	b5 01       	movw	r22, r10
    b9de:	a4 01       	movw	r20, r8
    b9e0:	c8 01       	movw	r24, r16
    b9e2:	46 96       	adiw	r24, 0x16	; 22
    b9e4:	0e 94 0d 46 	call	0x8c1a	; 0x8c1a <st_dword>
    b9e8:	f8 01       	movw	r30, r16
    b9ea:	12 8a       	std	Z+18, r1	; 0x12
    b9ec:	13 8a       	std	Z+19, r1	; 0x13
    b9ee:	89 81       	ldd	r24, Y+1	; 0x01
    b9f0:	9a 81       	ldd	r25, Y+2	; 0x02
    b9f2:	21 e0       	ldi	r18, 0x01	; 1
    b9f4:	fc 01       	movw	r30, r24
    b9f6:	23 83       	std	Z+3, r18	; 0x03
    b9f8:	0e 94 a0 48 	call	0x9140	; 0x9140 <sync_fs>
    b9fc:	f7 01       	movw	r30, r14
    b9fe:	26 85       	ldd	r18, Z+14	; 0x0e
    ba00:	2f 7b       	andi	r18, 0xBF	; 191
    ba02:	26 87       	std	Z+14, r18	; 0x0e
    ba04:	04 c0       	rjmp	.+8      	; 0xba0e <f_sync+0xe6>
    ba06:	80 e0       	ldi	r24, 0x00	; 0
    ba08:	01 c0       	rjmp	.+2      	; 0xba0c <f_sync+0xe4>
    ba0a:	81 e0       	ldi	r24, 0x01	; 1
    ba0c:	90 e0       	ldi	r25, 0x00	; 0
    ba0e:	0f 90       	pop	r0
    ba10:	0f 90       	pop	r0
    ba12:	df 91       	pop	r29
    ba14:	cf 91       	pop	r28
    ba16:	1f 91       	pop	r17
    ba18:	0f 91       	pop	r16
    ba1a:	ff 90       	pop	r15
    ba1c:	ef 90       	pop	r14
    ba1e:	bf 90       	pop	r11
    ba20:	af 90       	pop	r10
    ba22:	9f 90       	pop	r9
    ba24:	8f 90       	pop	r8
    ba26:	08 95       	ret

0000ba28 <f_close>:
    ba28:	a2 e0       	ldi	r26, 0x02	; 2
    ba2a:	b0 e0       	ldi	r27, 0x00	; 0
    ba2c:	ea e1       	ldi	r30, 0x1A	; 26
    ba2e:	fd e5       	ldi	r31, 0x5D	; 93
    ba30:	0c 94 17 e3 	jmp	0x1c62e	; 0x1c62e <__prologue_saves__+0x1c>
    ba34:	8c 01       	movw	r16, r24
    ba36:	78 df       	rcall	.-272    	; 0xb928 <f_sync>
    ba38:	00 97       	sbiw	r24, 0x00	; 0
    ba3a:	59 f4       	brne	.+22     	; 0xba52 <f_close+0x2a>
    ba3c:	be 01       	movw	r22, r28
    ba3e:	6f 5f       	subi	r22, 0xFF	; 255
    ba40:	7f 4f       	sbci	r23, 0xFF	; 255
    ba42:	c8 01       	movw	r24, r16
    ba44:	0e 94 ca 46 	call	0x8d94	; 0x8d94 <validate>
    ba48:	00 97       	sbiw	r24, 0x00	; 0
    ba4a:	19 f4       	brne	.+6      	; 0xba52 <f_close+0x2a>
    ba4c:	f8 01       	movw	r30, r16
    ba4e:	11 82       	std	Z+1, r1	; 0x01
    ba50:	10 82       	st	Z, r1
    ba52:	22 96       	adiw	r28, 0x02	; 2
    ba54:	e4 e0       	ldi	r30, 0x04	; 4
    ba56:	0c 94 33 e3 	jmp	0x1c666	; 0x1c666 <__epilogue_restores__+0x1c>

0000ba5a <f_chdir>:
    ba5a:	a2 e3       	ldi	r26, 0x32	; 50
    ba5c:	b0 e0       	ldi	r27, 0x00	; 0
    ba5e:	e3 e3       	ldi	r30, 0x33	; 51
    ba60:	fd e5       	ldi	r31, 0x5D	; 93
    ba62:	0c 94 13 e3 	jmp	0x1c626	; 0x1c626 <__prologue_saves__+0x14>
    ba66:	9a ab       	std	Y+50, r25	; 0x32
    ba68:	89 ab       	std	Y+49, r24	; 0x31
    ba6a:	40 e0       	ldi	r20, 0x00	; 0
    ba6c:	be 01       	movw	r22, r28
    ba6e:	61 5d       	subi	r22, 0xD1	; 209
    ba70:	7f 4f       	sbci	r23, 0xFF	; 255
    ba72:	ce 01       	movw	r24, r28
    ba74:	c1 96       	adiw	r24, 0x31	; 49
    ba76:	0e 94 35 4a 	call	0x946a	; 0x946a <mount_volume>
    ba7a:	00 97       	sbiw	r24, 0x00	; 0
    ba7c:	09 f0       	breq	.+2      	; 0xba80 <f_chdir+0x26>
    ba7e:	44 c0       	rjmp	.+136    	; 0xbb08 <f_chdir+0xae>
    ba80:	8f a5       	ldd	r24, Y+47	; 0x2f
    ba82:	98 a9       	ldd	r25, Y+48	; 0x30
    ba84:	9a 83       	std	Y+2, r25	; 0x02
    ba86:	89 83       	std	Y+1, r24	; 0x01
    ba88:	80 e0       	ldi	r24, 0x00	; 0
    ba8a:	92 e0       	ldi	r25, 0x02	; 2
    ba8c:	0e 94 30 67 	call	0xce60	; 0xce60 <ff_memalloc>
    ba90:	7c 01       	movw	r14, r24
    ba92:	00 97       	sbiw	r24, 0x00	; 0
    ba94:	a9 f1       	breq	.+106    	; 0xbb00 <f_chdir+0xa6>
    ba96:	ef a5       	ldd	r30, Y+47	; 0x2f
    ba98:	f8 a9       	ldd	r31, Y+48	; 0x30
    ba9a:	94 87       	std	Z+12, r25	; 0x0c
    ba9c:	83 87       	std	Z+11, r24	; 0x0b
    ba9e:	69 a9       	ldd	r22, Y+49	; 0x31
    baa0:	7a a9       	ldd	r23, Y+50	; 0x32
    baa2:	ce 01       	movw	r24, r28
    baa4:	01 96       	adiw	r24, 0x01	; 1
    baa6:	2e d8       	rcall	.-4004   	; 0xab04 <follow_path>
    baa8:	8c 01       	movw	r16, r24
    baaa:	89 2b       	or	r24, r25
    baac:	09 f5       	brne	.+66     	; 0xbaf0 <f_chdir+0x96>
    baae:	88 a5       	ldd	r24, Y+40	; 0x28
    bab0:	87 ff       	sbrs	r24, 7
    bab2:	0b c0       	rjmp	.+22     	; 0xbaca <f_chdir+0x70>
    bab4:	ef a5       	ldd	r30, Y+47	; 0x2f
    bab6:	f8 a9       	ldd	r31, Y+48	; 0x30
    bab8:	8f 81       	ldd	r24, Y+7	; 0x07
    baba:	98 85       	ldd	r25, Y+8	; 0x08
    babc:	a9 85       	ldd	r26, Y+9	; 0x09
    babe:	ba 85       	ldd	r27, Y+10	; 0x0a
    bac0:	85 8b       	std	Z+21, r24	; 0x15
    bac2:	96 8b       	std	Z+22, r25	; 0x16
    bac4:	a7 8b       	std	Z+23, r26	; 0x17
    bac6:	b0 8f       	std	Z+24, r27	; 0x18
    bac8:	13 c0       	rjmp	.+38     	; 0xbaf0 <f_chdir+0x96>
    baca:	8d 81       	ldd	r24, Y+5	; 0x05
    bacc:	84 ff       	sbrs	r24, 4
    bace:	0e c0       	rjmp	.+28     	; 0xbaec <f_chdir+0x92>
    bad0:	cf a4       	ldd	r12, Y+47	; 0x2f
    bad2:	d8 a8       	ldd	r13, Y+48	; 0x30
    bad4:	6b 8d       	ldd	r22, Y+27	; 0x1b
    bad6:	7c 8d       	ldd	r23, Y+28	; 0x1c
    bad8:	f6 01       	movw	r30, r12
    bada:	80 81       	ld	r24, Z
    badc:	0e 94 2b 48 	call	0x9056	; 0x9056 <ld_clust.isra.3>
    bae0:	f6 01       	movw	r30, r12
    bae2:	65 8b       	std	Z+21, r22	; 0x15
    bae4:	76 8b       	std	Z+22, r23	; 0x16
    bae6:	87 8b       	std	Z+23, r24	; 0x17
    bae8:	90 8f       	std	Z+24, r25	; 0x18
    baea:	02 c0       	rjmp	.+4      	; 0xbaf0 <f_chdir+0x96>
    baec:	05 e0       	ldi	r16, 0x05	; 5
    baee:	10 e0       	ldi	r17, 0x00	; 0
    baf0:	c7 01       	movw	r24, r14
    baf2:	0e 94 33 67 	call	0xce66	; 0xce66 <ff_memfree>
    baf6:	04 30       	cpi	r16, 0x04	; 4
    baf8:	11 05       	cpc	r17, r1
    bafa:	29 f4       	brne	.+10     	; 0xbb06 <f_chdir+0xac>
    bafc:	85 e0       	ldi	r24, 0x05	; 5
    bafe:	01 c0       	rjmp	.+2      	; 0xbb02 <f_chdir+0xa8>
    bb00:	81 e1       	ldi	r24, 0x11	; 17
    bb02:	90 e0       	ldi	r25, 0x00	; 0
    bb04:	01 c0       	rjmp	.+2      	; 0xbb08 <f_chdir+0xae>
    bb06:	c8 01       	movw	r24, r16
    bb08:	e2 96       	adiw	r28, 0x32	; 50
    bb0a:	e8 e0       	ldi	r30, 0x08	; 8
    bb0c:	0c 94 2f e3 	jmp	0x1c65e	; 0x1c65e <__epilogue_restores__+0x14>

0000bb10 <f_getcwd>:
    bb10:	a8 e4       	ldi	r26, 0x48	; 72
    bb12:	b1 e0       	ldi	r27, 0x01	; 1
    bb14:	ee e8       	ldi	r30, 0x8E	; 142
    bb16:	fd e5       	ldi	r31, 0x5D	; 93
    bb18:	0c 94 09 e3 	jmp	0x1c612	; 0x1c612 <__prologue_saves__>
    bb1c:	c9 5b       	subi	r28, 0xB9	; 185
    bb1e:	de 4f       	sbci	r29, 0xFE	; 254
    bb20:	99 83       	std	Y+1, r25	; 0x01
    bb22:	88 83       	st	Y, r24
    bb24:	c7 54       	subi	r28, 0x47	; 71
    bb26:	d1 40       	sbci	r29, 0x01	; 1
    bb28:	4b 01       	movw	r8, r22
    bb2a:	7c 01       	movw	r14, r24
    bb2c:	fc 01       	movw	r30, r24
    bb2e:	10 82       	st	Z, r1
    bb30:	40 e0       	ldi	r20, 0x00	; 0
    bb32:	be 01       	movw	r22, r28
    bb34:	6b 5b       	subi	r22, 0xBB	; 187
    bb36:	7e 4f       	sbci	r23, 0xFE	; 254
    bb38:	ce 01       	movw	r24, r28
    bb3a:	89 5b       	subi	r24, 0xB9	; 185
    bb3c:	9e 4f       	sbci	r25, 0xFE	; 254
    bb3e:	0e 94 35 4a 	call	0x946a	; 0x946a <mount_volume>
    bb42:	1c 01       	movw	r2, r24
    bb44:	89 2b       	or	r24, r25
    bb46:	09 f0       	breq	.+2      	; 0xbb4a <f_getcwd+0x3a>
    bb48:	03 c1       	rjmp	.+518    	; 0xbd50 <f_getcwd+0x240>
    bb4a:	cb 5b       	subi	r28, 0xBB	; 187
    bb4c:	de 4f       	sbci	r29, 0xFE	; 254
    bb4e:	88 81       	ld	r24, Y
    bb50:	99 81       	ldd	r25, Y+1	; 0x01
    bb52:	c5 54       	subi	r28, 0x45	; 69
    bb54:	d1 40       	sbci	r29, 0x01	; 1
    bb56:	c9 5e       	subi	r28, 0xE9	; 233
    bb58:	de 4f       	sbci	r29, 0xFE	; 254
    bb5a:	99 83       	std	Y+1, r25	; 0x01
    bb5c:	88 83       	st	Y, r24
    bb5e:	c7 51       	subi	r28, 0x17	; 23
    bb60:	d1 40       	sbci	r29, 0x01	; 1
    bb62:	80 e0       	ldi	r24, 0x00	; 0
    bb64:	92 e0       	ldi	r25, 0x02	; 2
    bb66:	0e 94 30 67 	call	0xce60	; 0xce60 <ff_memalloc>
    bb6a:	5c 01       	movw	r10, r24
    bb6c:	00 97       	sbiw	r24, 0x00	; 0
    bb6e:	09 f4       	brne	.+2      	; 0xbb72 <f_getcwd+0x62>
    bb70:	f3 c0       	rjmp	.+486    	; 0xbd58 <f_getcwd+0x248>
    bb72:	cb 5b       	subi	r28, 0xBB	; 187
    bb74:	de 4f       	sbci	r29, 0xFE	; 254
    bb76:	e8 81       	ld	r30, Y
    bb78:	f9 81       	ldd	r31, Y+1	; 0x01
    bb7a:	c5 54       	subi	r28, 0x45	; 69
    bb7c:	d1 40       	sbci	r29, 0x01	; 1
    bb7e:	94 87       	std	Z+12, r25	; 0x0c
    bb80:	83 87       	std	Z+11, r24	; 0x0b
    bb82:	85 89       	ldd	r24, Z+21	; 0x15
    bb84:	96 89       	ldd	r25, Z+22	; 0x16
    bb86:	a7 89       	ldd	r26, Z+23	; 0x17
    bb88:	b0 8d       	ldd	r27, Z+24	; 0x18
    bb8a:	c3 5e       	subi	r28, 0xE3	; 227
    bb8c:	de 4f       	sbci	r29, 0xFE	; 254
    bb8e:	88 83       	st	Y, r24
    bb90:	99 83       	std	Y+1, r25	; 0x01
    bb92:	aa 83       	std	Y+2, r26	; 0x02
    bb94:	bb 83       	std	Y+3, r27	; 0x03
    bb96:	cd 51       	subi	r28, 0x1D	; 29
    bb98:	d1 40       	sbci	r29, 0x01	; 1
    bb9a:	84 01       	movw	r16, r8
    bb9c:	ce 01       	movw	r24, r28
    bb9e:	01 96       	adiw	r24, 0x01	; 1
    bba0:	6c 01       	movw	r12, r24
    bba2:	c3 5e       	subi	r28, 0xE3	; 227
    bba4:	de 4f       	sbci	r29, 0xFE	; 254
    bba6:	48 80       	ld	r4, Y
    bba8:	59 80       	ldd	r5, Y+1	; 0x01
    bbaa:	6a 80       	ldd	r6, Y+2	; 0x02
    bbac:	7b 80       	ldd	r7, Y+3	; 0x03
    bbae:	cd 51       	subi	r28, 0x1D	; 29
    bbb0:	d1 40       	sbci	r29, 0x01	; 1
    bbb2:	41 14       	cp	r4, r1
    bbb4:	51 04       	cpc	r5, r1
    bbb6:	61 04       	cpc	r6, r1
    bbb8:	71 04       	cpc	r7, r1
    bbba:	09 f4       	brne	.+2      	; 0xbbbe <f_getcwd+0xae>
    bbbc:	a3 c0       	rjmp	.+326    	; 0xbd04 <f_getcwd+0x1f4>
    bbbe:	40 e2       	ldi	r20, 0x20	; 32
    bbc0:	50 e0       	ldi	r21, 0x00	; 0
    bbc2:	60 e0       	ldi	r22, 0x00	; 0
    bbc4:	70 e0       	ldi	r23, 0x00	; 0
    bbc6:	ce 01       	movw	r24, r28
    bbc8:	89 5e       	subi	r24, 0xE9	; 233
    bbca:	9e 4f       	sbci	r25, 0xFE	; 254
    bbcc:	0e 94 3c 4e 	call	0x9c78	; 0x9c78 <dir_sdi>
    bbd0:	00 97       	sbiw	r24, 0x00	; 0
    bbd2:	09 f0       	breq	.+2      	; 0xbbd6 <f_getcwd+0xc6>
    bbd4:	c6 c0       	rjmp	.+396    	; 0xbd62 <f_getcwd+0x252>
    bbd6:	c3 5d       	subi	r28, 0xD3	; 211
    bbd8:	de 4f       	sbci	r29, 0xFE	; 254
    bbda:	48 81       	ld	r20, Y
    bbdc:	59 81       	ldd	r21, Y+1	; 0x01
    bbde:	6a 81       	ldd	r22, Y+2	; 0x02
    bbe0:	7b 81       	ldd	r23, Y+3	; 0x03
    bbe2:	cd 52       	subi	r28, 0x2D	; 45
    bbe4:	d1 40       	sbci	r29, 0x01	; 1
    bbe6:	cb 5b       	subi	r28, 0xBB	; 187
    bbe8:	de 4f       	sbci	r29, 0xFE	; 254
    bbea:	88 81       	ld	r24, Y
    bbec:	99 81       	ldd	r25, Y+1	; 0x01
    bbee:	c5 54       	subi	r28, 0x45	; 69
    bbf0:	d1 40       	sbci	r29, 0x01	; 1
    bbf2:	0e 94 ba 49 	call	0x9374	; 0x9374 <move_window>
    bbf6:	00 97       	sbiw	r24, 0x00	; 0
    bbf8:	09 f0       	breq	.+2      	; 0xbbfc <f_getcwd+0xec>
    bbfa:	b3 c0       	rjmp	.+358    	; 0xbd62 <f_getcwd+0x252>
    bbfc:	cf 5c       	subi	r28, 0xCF	; 207
    bbfe:	de 4f       	sbci	r29, 0xFE	; 254
    bc00:	68 81       	ld	r22, Y
    bc02:	79 81       	ldd	r23, Y+1	; 0x01
    bc04:	c1 53       	subi	r28, 0x31	; 49
    bc06:	d1 40       	sbci	r29, 0x01	; 1
    bc08:	cb 5b       	subi	r28, 0xBB	; 187
    bc0a:	de 4f       	sbci	r29, 0xFE	; 254
    bc0c:	e8 81       	ld	r30, Y
    bc0e:	f9 81       	ldd	r31, Y+1	; 0x01
    bc10:	c5 54       	subi	r28, 0x45	; 69
    bc12:	d1 40       	sbci	r29, 0x01	; 1
    bc14:	80 81       	ld	r24, Z
    bc16:	0e 94 2b 48 	call	0x9056	; 0x9056 <ld_clust.isra.3>
    bc1a:	c3 5e       	subi	r28, 0xE3	; 227
    bc1c:	de 4f       	sbci	r29, 0xFE	; 254
    bc1e:	68 83       	st	Y, r22
    bc20:	79 83       	std	Y+1, r23	; 0x01
    bc22:	8a 83       	std	Y+2, r24	; 0x02
    bc24:	9b 83       	std	Y+3, r25	; 0x03
    bc26:	cd 51       	subi	r28, 0x1D	; 29
    bc28:	d1 40       	sbci	r29, 0x01	; 1
    bc2a:	40 e0       	ldi	r20, 0x00	; 0
    bc2c:	50 e0       	ldi	r21, 0x00	; 0
    bc2e:	ba 01       	movw	r22, r20
    bc30:	ce 01       	movw	r24, r28
    bc32:	89 5e       	subi	r24, 0xE9	; 233
    bc34:	9e 4f       	sbci	r25, 0xFE	; 254
    bc36:	0e 94 3c 4e 	call	0x9c78	; 0x9c78 <dir_sdi>
    bc3a:	00 97       	sbiw	r24, 0x00	; 0
    bc3c:	09 f0       	breq	.+2      	; 0xbc40 <f_getcwd+0x130>
    bc3e:	91 c0       	rjmp	.+290    	; 0xbd62 <f_getcwd+0x252>
    bc40:	60 e0       	ldi	r22, 0x00	; 0
    bc42:	70 e0       	ldi	r23, 0x00	; 0
    bc44:	ce 01       	movw	r24, r28
    bc46:	89 5e       	subi	r24, 0xE9	; 233
    bc48:	9e 4f       	sbci	r25, 0xFE	; 254
    bc4a:	0e 94 d5 51 	call	0xa3aa	; 0xa3aa <dir_read>
    bc4e:	00 97       	sbiw	r24, 0x00	; 0
    bc50:	09 f0       	breq	.+2      	; 0xbc54 <f_getcwd+0x144>
    bc52:	89 c0       	rjmp	.+274    	; 0xbd66 <f_getcwd+0x256>
    bc54:	cf 5c       	subi	r28, 0xCF	; 207
    bc56:	de 4f       	sbci	r29, 0xFE	; 254
    bc58:	68 81       	ld	r22, Y
    bc5a:	79 81       	ldd	r23, Y+1	; 0x01
    bc5c:	c1 53       	subi	r28, 0x31	; 49
    bc5e:	d1 40       	sbci	r29, 0x01	; 1
    bc60:	cb 5b       	subi	r28, 0xBB	; 187
    bc62:	de 4f       	sbci	r29, 0xFE	; 254
    bc64:	e8 81       	ld	r30, Y
    bc66:	f9 81       	ldd	r31, Y+1	; 0x01
    bc68:	c5 54       	subi	r28, 0x45	; 69
    bc6a:	d1 40       	sbci	r29, 0x01	; 1
    bc6c:	80 81       	ld	r24, Z
    bc6e:	0e 94 2b 48 	call	0x9056	; 0x9056 <ld_clust.isra.3>
    bc72:	46 16       	cp	r4, r22
    bc74:	57 06       	cpc	r5, r23
    bc76:	68 06       	cpc	r6, r24
    bc78:	79 06       	cpc	r7, r25
    bc7a:	41 f4       	brne	.+16     	; 0xbc8c <f_getcwd+0x17c>
    bc7c:	b6 01       	movw	r22, r12
    bc7e:	ce 01       	movw	r24, r28
    bc80:	89 5e       	subi	r24, 0xE9	; 233
    bc82:	9e 4f       	sbci	r25, 0xFE	; 254
    bc84:	0e 94 f6 46 	call	0x8dec	; 0x8dec <get_fileinfo>
    bc88:	f6 01       	movw	r30, r12
    bc8a:	0a c0       	rjmp	.+20     	; 0xbca0 <f_getcwd+0x190>
    bc8c:	60 e0       	ldi	r22, 0x00	; 0
    bc8e:	70 e0       	ldi	r23, 0x00	; 0
    bc90:	ce 01       	movw	r24, r28
    bc92:	89 5e       	subi	r24, 0xE9	; 233
    bc94:	9e 4f       	sbci	r25, 0xFE	; 254
    bc96:	0e 94 b4 50 	call	0xa168	; 0xa168 <dir_next>
    bc9a:	00 97       	sbiw	r24, 0x00	; 0
    bc9c:	89 f2       	breq	.-94     	; 0xbc40 <f_getcwd+0x130>
    bc9e:	63 c0       	rjmp	.+198    	; 0xbd66 <f_getcwd+0x256>
    bca0:	cf 01       	movw	r24, r30
    bca2:	8c 19       	sub	r24, r12
    bca4:	9d 09       	sbc	r25, r13
    bca6:	31 96       	adiw	r30, 0x01	; 1
    bca8:	25 89       	ldd	r18, Z+21	; 0x15
    bcaa:	21 11       	cpse	r18, r1
    bcac:	f9 cf       	rjmp	.-14     	; 0xbca0 <f_getcwd+0x190>
    bcae:	9c 01       	movw	r18, r24
    bcb0:	2f 5f       	subi	r18, 0xFF	; 255
    bcb2:	3f 4f       	sbci	r19, 0xFF	; 255
    bcb4:	02 17       	cp	r16, r18
    bcb6:	13 07       	cpc	r17, r19
    bcb8:	08 f4       	brcc	.+2      	; 0xbcbc <f_getcwd+0x1ac>
    bcba:	51 c0       	rjmp	.+162    	; 0xbd5e <f_getcwd+0x24e>
    bcbc:	f6 01       	movw	r30, r12
    bcbe:	e8 0f       	add	r30, r24
    bcc0:	f9 1f       	adc	r31, r25
    bcc2:	98 01       	movw	r18, r16
    bcc4:	ce 16       	cp	r12, r30
    bcc6:	df 06       	cpc	r13, r31
    bcc8:	71 f0       	breq	.+28     	; 0xbce6 <f_getcwd+0x1d6>
    bcca:	21 50       	subi	r18, 0x01	; 1
    bccc:	31 09       	sbc	r19, r1
    bcce:	45 89       	ldd	r20, Z+21	; 0x15
    bcd0:	c9 5b       	subi	r28, 0xB9	; 185
    bcd2:	de 4f       	sbci	r29, 0xFE	; 254
    bcd4:	a8 81       	ld	r26, Y
    bcd6:	b9 81       	ldd	r27, Y+1	; 0x01
    bcd8:	c7 54       	subi	r28, 0x47	; 71
    bcda:	d1 40       	sbci	r29, 0x01	; 1
    bcdc:	a2 0f       	add	r26, r18
    bcde:	b3 1f       	adc	r27, r19
    bce0:	4c 93       	st	X, r20
    bce2:	31 97       	sbiw	r30, 0x01	; 1
    bce4:	ef cf       	rjmp	.-34     	; 0xbcc4 <f_getcwd+0x1b4>
    bce6:	80 95       	com	r24
    bce8:	90 95       	com	r25
    bcea:	08 0f       	add	r16, r24
    bcec:	19 1f       	adc	r17, r25
    bcee:	c9 5b       	subi	r28, 0xB9	; 185
    bcf0:	de 4f       	sbci	r29, 0xFE	; 254
    bcf2:	e8 81       	ld	r30, Y
    bcf4:	f9 81       	ldd	r31, Y+1	; 0x01
    bcf6:	c7 54       	subi	r28, 0x47	; 71
    bcf8:	d1 40       	sbci	r29, 0x01	; 1
    bcfa:	e0 0f       	add	r30, r16
    bcfc:	f1 1f       	adc	r31, r17
    bcfe:	9f e2       	ldi	r25, 0x2F	; 47
    bd00:	90 83       	st	Z, r25
    bd02:	4f cf       	rjmp	.-354    	; 0xbba2 <f_getcwd+0x92>
    bd04:	08 15       	cp	r16, r8
    bd06:	19 05       	cpc	r17, r9
    bd08:	61 f4       	brne	.+24     	; 0xbd22 <f_getcwd+0x212>
    bd0a:	01 50       	subi	r16, 0x01	; 1
    bd0c:	11 09       	sbc	r17, r1
    bd0e:	c9 5b       	subi	r28, 0xB9	; 185
    bd10:	de 4f       	sbci	r29, 0xFE	; 254
    bd12:	e8 81       	ld	r30, Y
    bd14:	f9 81       	ldd	r31, Y+1	; 0x01
    bd16:	c7 54       	subi	r28, 0x47	; 71
    bd18:	d1 40       	sbci	r29, 0x01	; 1
    bd1a:	e0 0f       	add	r30, r16
    bd1c:	f1 1f       	adc	r31, r17
    bd1e:	8f e2       	ldi	r24, 0x2F	; 47
    bd20:	80 83       	st	Z, r24
    bd22:	ef ef       	ldi	r30, 0xFF	; 255
    bd24:	ee 1a       	sub	r14, r30
    bd26:	fe 0a       	sbc	r15, r30
    bd28:	c9 5b       	subi	r28, 0xB9	; 185
    bd2a:	de 4f       	sbci	r29, 0xFE	; 254
    bd2c:	e8 81       	ld	r30, Y
    bd2e:	f9 81       	ldd	r31, Y+1	; 0x01
    bd30:	c7 54       	subi	r28, 0x47	; 71
    bd32:	d1 40       	sbci	r29, 0x01	; 1
    bd34:	e0 0f       	add	r30, r16
    bd36:	f1 1f       	adc	r31, r17
    bd38:	80 81       	ld	r24, Z
    bd3a:	f7 01       	movw	r30, r14
    bd3c:	31 97       	sbiw	r30, 0x01	; 1
    bd3e:	80 83       	st	Z, r24
    bd40:	0f 5f       	subi	r16, 0xFF	; 255
    bd42:	1f 4f       	sbci	r17, 0xFF	; 255
    bd44:	08 15       	cp	r16, r8
    bd46:	19 05       	cpc	r17, r9
    bd48:	60 f3       	brcs	.-40     	; 0xbd22 <f_getcwd+0x212>
    bd4a:	c5 01       	movw	r24, r10
    bd4c:	0e 94 33 67 	call	0xce66	; 0xce66 <ff_memfree>
    bd50:	f7 01       	movw	r30, r14
    bd52:	10 82       	st	Z, r1
    bd54:	c1 01       	movw	r24, r2
    bd56:	0d c0       	rjmp	.+26     	; 0xbd72 <f_getcwd+0x262>
    bd58:	81 e1       	ldi	r24, 0x11	; 17
    bd5a:	90 e0       	ldi	r25, 0x00	; 0
    bd5c:	0a c0       	rjmp	.+20     	; 0xbd72 <f_getcwd+0x262>
    bd5e:	81 e1       	ldi	r24, 0x11	; 17
    bd60:	90 e0       	ldi	r25, 0x00	; 0
    bd62:	1c 01       	movw	r2, r24
    bd64:	f2 cf       	rjmp	.-28     	; 0xbd4a <f_getcwd+0x23a>
    bd66:	84 30       	cpi	r24, 0x04	; 4
    bd68:	91 05       	cpc	r25, r1
    bd6a:	d9 f7       	brne	.-10     	; 0xbd62 <f_getcwd+0x252>
    bd6c:	82 e0       	ldi	r24, 0x02	; 2
    bd6e:	90 e0       	ldi	r25, 0x00	; 0
    bd70:	f8 cf       	rjmp	.-16     	; 0xbd62 <f_getcwd+0x252>
    bd72:	c8 5b       	subi	r28, 0xB8	; 184
    bd74:	de 4f       	sbci	r29, 0xFE	; 254
    bd76:	e2 e1       	ldi	r30, 0x12	; 18
    bd78:	0c 94 25 e3 	jmp	0x1c64a	; 0x1c64a <__epilogue_restores__>

0000bd7c <f_lseek>:
    bd7c:	aa e0       	ldi	r26, 0x0A	; 10
    bd7e:	b0 e0       	ldi	r27, 0x00	; 0
    bd80:	e4 ec       	ldi	r30, 0xC4	; 196
    bd82:	fe e5       	ldi	r31, 0x5E	; 94
    bd84:	0c 94 09 e3 	jmp	0x1c612	; 0x1c612 <__prologue_saves__>
    bd88:	1c 01       	movw	r2, r24
    bd8a:	6a 01       	movw	r12, r20
    bd8c:	7b 01       	movw	r14, r22
    bd8e:	be 01       	movw	r22, r28
    bd90:	6f 5f       	subi	r22, 0xFF	; 255
    bd92:	7f 4f       	sbci	r23, 0xFF	; 255
    bd94:	0e 94 ca 46 	call	0x8d94	; 0x8d94 <validate>
    bd98:	00 97       	sbiw	r24, 0x00	; 0
    bd9a:	09 f0       	breq	.+2      	; 0xbd9e <f_lseek+0x22>
    bd9c:	a6 c2       	rjmp	.+1356   	; 0xc2ea <f_lseek+0x56e>
    bd9e:	f1 01       	movw	r30, r2
    bda0:	87 85       	ldd	r24, Z+15	; 0x0f
    bda2:	90 e0       	ldi	r25, 0x00	; 0
    bda4:	00 97       	sbiw	r24, 0x00	; 0
    bda6:	09 f0       	breq	.+2      	; 0xbdaa <f_lseek+0x2e>
    bda8:	a0 c2       	rjmp	.+1344   	; 0xc2ea <f_lseek+0x56e>
    bdaa:	22 a1       	ldd	r18, Z+34	; 0x22
    bdac:	33 a1       	ldd	r19, Z+35	; 0x23
    bdae:	21 15       	cp	r18, r1
    bdb0:	31 05       	cpc	r19, r1
    bdb2:	09 f4       	brne	.+2      	; 0xbdb6 <f_lseek+0x3a>
    bdb4:	2d c1       	rjmp	.+602    	; 0xc010 <f_lseek+0x294>
    bdb6:	ff ef       	ldi	r31, 0xFF	; 255
    bdb8:	cf 16       	cp	r12, r31
    bdba:	df 06       	cpc	r13, r31
    bdbc:	ef 06       	cpc	r14, r31
    bdbe:	ff 06       	cpc	r15, r31
    bdc0:	09 f0       	breq	.+2      	; 0xbdc4 <f_lseek+0x48>
    bdc2:	9a c0       	rjmp	.+308    	; 0xbef8 <f_lseek+0x17c>
    bdc4:	89 01       	movw	r16, r18
    bdc6:	0c 5f       	subi	r16, 0xFC	; 252
    bdc8:	1f 4f       	sbci	r17, 0xFF	; 255
    bdca:	d9 01       	movw	r26, r18
    bdcc:	4d 91       	ld	r20, X+
    bdce:	5d 91       	ld	r21, X+
    bdd0:	6d 91       	ld	r22, X+
    bdd2:	7c 91       	ld	r23, X
    bdd4:	4f 83       	std	Y+7, r20	; 0x07
    bdd6:	58 87       	std	Y+8, r21	; 0x08
    bdd8:	69 87       	std	Y+9, r22	; 0x09
    bdda:	7a 87       	std	Y+10, r23	; 0x0a
    bddc:	f1 01       	movw	r30, r2
    bdde:	86 80       	ldd	r8, Z+6	; 0x06
    bde0:	97 80       	ldd	r9, Z+7	; 0x07
    bde2:	a0 84       	ldd	r10, Z+8	; 0x08
    bde4:	b1 84       	ldd	r11, Z+9	; 0x09
    bde6:	52 e0       	ldi	r21, 0x02	; 2
    bde8:	c5 2e       	mov	r12, r21
    bdea:	d1 2c       	mov	r13, r1
    bdec:	e1 2c       	mov	r14, r1
    bdee:	f1 2c       	mov	r15, r1
    bdf0:	81 14       	cp	r8, r1
    bdf2:	91 04       	cpc	r9, r1
    bdf4:	a1 04       	cpc	r10, r1
    bdf6:	b1 04       	cpc	r11, r1
    bdf8:	09 f4       	brne	.+2      	; 0xbdfc <f_lseek+0x80>
    bdfa:	65 c0       	rjmp	.+202    	; 0xbec6 <f_lseek+0x14a>
    bdfc:	24 01       	movw	r4, r8
    bdfe:	35 01       	movw	r6, r10
    be00:	1b 82       	std	Y+3, r1	; 0x03
    be02:	1c 82       	std	Y+4, r1	; 0x04
    be04:	1d 82       	std	Y+5, r1	; 0x05
    be06:	1e 82       	std	Y+6, r1	; 0x06
    be08:	2b 81       	ldd	r18, Y+3	; 0x03
    be0a:	3c 81       	ldd	r19, Y+4	; 0x04
    be0c:	4d 81       	ldd	r20, Y+5	; 0x05
    be0e:	5e 81       	ldd	r21, Y+6	; 0x06
    be10:	2f 5f       	subi	r18, 0xFF	; 255
    be12:	3f 4f       	sbci	r19, 0xFF	; 255
    be14:	4f 4f       	sbci	r20, 0xFF	; 255
    be16:	5f 4f       	sbci	r21, 0xFF	; 255
    be18:	2b 83       	std	Y+3, r18	; 0x03
    be1a:	3c 83       	std	Y+4, r19	; 0x04
    be1c:	4d 83       	std	Y+5, r20	; 0x05
    be1e:	5e 83       	std	Y+6, r21	; 0x06
    be20:	b3 01       	movw	r22, r6
    be22:	a2 01       	movw	r20, r4
    be24:	d1 01       	movw	r26, r2
    be26:	8d 91       	ld	r24, X+
    be28:	9c 91       	ld	r25, X
    be2a:	0e 94 88 4d 	call	0x9b10	; 0x9b10 <get_fat.isra.9>
    be2e:	62 30       	cpi	r22, 0x02	; 2
    be30:	71 05       	cpc	r23, r1
    be32:	81 05       	cpc	r24, r1
    be34:	91 05       	cpc	r25, r1
    be36:	10 f4       	brcc	.+4      	; 0xbe3c <f_lseek+0xc0>
    be38:	82 e0       	ldi	r24, 0x02	; 2
    be3a:	07 c0       	rjmp	.+14     	; 0xbe4a <f_lseek+0xce>
    be3c:	6f 3f       	cpi	r22, 0xFF	; 255
    be3e:	ff ef       	ldi	r31, 0xFF	; 255
    be40:	7f 07       	cpc	r23, r31
    be42:	8f 07       	cpc	r24, r31
    be44:	9f 07       	cpc	r25, r31
    be46:	29 f4       	brne	.+10     	; 0xbe52 <f_lseek+0xd6>
    be48:	81 e0       	ldi	r24, 0x01	; 1
    be4a:	f1 01       	movw	r30, r2
    be4c:	87 87       	std	Z+15, r24	; 0x0f
    be4e:	90 e0       	ldi	r25, 0x00	; 0
    be50:	4c c2       	rjmp	.+1176   	; 0xc2ea <f_lseek+0x56e>
    be52:	a3 01       	movw	r20, r6
    be54:	92 01       	movw	r18, r4
    be56:	2f 5f       	subi	r18, 0xFF	; 255
    be58:	3f 4f       	sbci	r19, 0xFF	; 255
    be5a:	4f 4f       	sbci	r20, 0xFF	; 255
    be5c:	5f 4f       	sbci	r21, 0xFF	; 255
    be5e:	2b 01       	movw	r4, r22
    be60:	3c 01       	movw	r6, r24
    be62:	62 17       	cp	r22, r18
    be64:	73 07       	cpc	r23, r19
    be66:	84 07       	cpc	r24, r20
    be68:	95 07       	cpc	r25, r21
    be6a:	71 f2       	breq	.-100    	; 0xbe08 <f_lseek+0x8c>
    be6c:	f2 e0       	ldi	r31, 0x02	; 2
    be6e:	cf 0e       	add	r12, r31
    be70:	d1 1c       	adc	r13, r1
    be72:	e1 1c       	adc	r14, r1
    be74:	f1 1c       	adc	r15, r1
    be76:	2f 81       	ldd	r18, Y+7	; 0x07
    be78:	38 85       	ldd	r19, Y+8	; 0x08
    be7a:	49 85       	ldd	r20, Y+9	; 0x09
    be7c:	5a 85       	ldd	r21, Y+10	; 0x0a
    be7e:	2c 15       	cp	r18, r12
    be80:	3d 05       	cpc	r19, r13
    be82:	4e 05       	cpc	r20, r14
    be84:	5f 05       	cpc	r21, r15
    be86:	88 f0       	brcs	.+34     	; 0xbeaa <f_lseek+0x12e>
    be88:	2b 81       	ldd	r18, Y+3	; 0x03
    be8a:	3c 81       	ldd	r19, Y+4	; 0x04
    be8c:	4d 81       	ldd	r20, Y+5	; 0x05
    be8e:	5e 81       	ldd	r21, Y+6	; 0x06
    be90:	d8 01       	movw	r26, r16
    be92:	2d 93       	st	X+, r18
    be94:	3d 93       	st	X+, r19
    be96:	4d 93       	st	X+, r20
    be98:	5c 93       	st	X, r21
    be9a:	13 97       	sbiw	r26, 0x03	; 3
    be9c:	f8 01       	movw	r30, r16
    be9e:	84 82       	std	Z+4, r8	; 0x04
    bea0:	95 82       	std	Z+5, r9	; 0x05
    bea2:	a6 82       	std	Z+6, r10	; 0x06
    bea4:	b7 82       	std	Z+7, r11	; 0x07
    bea6:	08 5f       	subi	r16, 0xF8	; 248
    bea8:	1f 4f       	sbci	r17, 0xFF	; 255
    beaa:	e9 81       	ldd	r30, Y+1	; 0x01
    beac:	fa 81       	ldd	r31, Y+2	; 0x02
    beae:	81 8c       	ldd	r8, Z+25	; 0x19
    beb0:	92 8c       	ldd	r9, Z+26	; 0x1a
    beb2:	a3 8c       	ldd	r10, Z+27	; 0x1b
    beb4:	b4 8c       	ldd	r11, Z+28	; 0x1c
    beb6:	68 15       	cp	r22, r8
    beb8:	79 05       	cpc	r23, r9
    beba:	8a 05       	cpc	r24, r10
    bebc:	9b 05       	cpc	r25, r11
    bebe:	18 f4       	brcc	.+6      	; 0xbec6 <f_lseek+0x14a>
    bec0:	4b 01       	movw	r8, r22
    bec2:	5c 01       	movw	r10, r24
    bec4:	9b cf       	rjmp	.-202    	; 0xbdfc <f_lseek+0x80>
    bec6:	f1 01       	movw	r30, r2
    bec8:	a2 a1       	ldd	r26, Z+34	; 0x22
    beca:	b3 a1       	ldd	r27, Z+35	; 0x23
    becc:	cd 92       	st	X+, r12
    bece:	dd 92       	st	X+, r13
    bed0:	ed 92       	st	X+, r14
    bed2:	fc 92       	st	X, r15
    bed4:	13 97       	sbiw	r26, 0x03	; 3
    bed6:	2f 81       	ldd	r18, Y+7	; 0x07
    bed8:	38 85       	ldd	r19, Y+8	; 0x08
    beda:	49 85       	ldd	r20, Y+9	; 0x09
    bedc:	5a 85       	ldd	r21, Y+10	; 0x0a
    bede:	2c 15       	cp	r18, r12
    bee0:	3d 05       	cpc	r19, r13
    bee2:	4e 05       	cpc	r20, r14
    bee4:	5f 05       	cpc	r21, r15
    bee6:	08 f4       	brcc	.+2      	; 0xbeea <f_lseek+0x16e>
    bee8:	f7 c1       	rjmp	.+1006   	; 0xc2d8 <f_lseek+0x55c>
    beea:	d8 01       	movw	r26, r16
    beec:	1d 92       	st	X+, r1
    beee:	1d 92       	st	X+, r1
    bef0:	1d 92       	st	X+, r1
    bef2:	1c 92       	st	X, r1
    bef4:	13 97       	sbiw	r26, 0x03	; 3
    bef6:	ee c1       	rjmp	.+988    	; 0xc2d4 <f_lseek+0x558>
    bef8:	f1 01       	movw	r30, r2
    befa:	82 85       	ldd	r24, Z+10	; 0x0a
    befc:	93 85       	ldd	r25, Z+11	; 0x0b
    befe:	a4 85       	ldd	r26, Z+12	; 0x0c
    bf00:	b5 85       	ldd	r27, Z+13	; 0x0d
    bf02:	46 01       	movw	r8, r12
    bf04:	57 01       	movw	r10, r14
    bf06:	8c 15       	cp	r24, r12
    bf08:	9d 05       	cpc	r25, r13
    bf0a:	ae 05       	cpc	r26, r14
    bf0c:	bf 05       	cpc	r27, r15
    bf0e:	10 f4       	brcc	.+4      	; 0xbf14 <f_lseek+0x198>
    bf10:	4c 01       	movw	r8, r24
    bf12:	5d 01       	movw	r10, r26
    bf14:	f1 01       	movw	r30, r2
    bf16:	80 8a       	std	Z+16, r8	; 0x10
    bf18:	91 8a       	std	Z+17, r9	; 0x11
    bf1a:	a2 8a       	std	Z+18, r10	; 0x12
    bf1c:	b3 8a       	std	Z+19, r11	; 0x13
    bf1e:	81 14       	cp	r8, r1
    bf20:	91 04       	cpc	r9, r1
    bf22:	a1 04       	cpc	r10, r1
    bf24:	b1 04       	cpc	r11, r1
    bf26:	09 f4       	brne	.+2      	; 0xbf2a <f_lseek+0x1ae>
    bf28:	d5 c1       	rjmp	.+938    	; 0xc2d4 <f_lseek+0x558>
    bf2a:	24 01       	movw	r4, r8
    bf2c:	35 01       	movw	r6, r10
    bf2e:	f1 e0       	ldi	r31, 0x01	; 1
    bf30:	4f 1a       	sub	r4, r31
    bf32:	51 08       	sbc	r5, r1
    bf34:	61 08       	sbc	r6, r1
    bf36:	71 08       	sbc	r7, r1
    bf38:	b3 01       	movw	r22, r6
    bf3a:	a2 01       	movw	r20, r4
    bf3c:	c1 01       	movw	r24, r2
    bf3e:	0e 94 53 46 	call	0x8ca6	; 0x8ca6 <clmt_clust>
    bf42:	ab 01       	movw	r20, r22
    bf44:	bc 01       	movw	r22, r24
    bf46:	f1 01       	movw	r30, r2
    bf48:	44 8b       	std	Z+20, r20	; 0x14
    bf4a:	55 8b       	std	Z+21, r21	; 0x15
    bf4c:	66 8b       	std	Z+22, r22	; 0x16
    bf4e:	77 8b       	std	Z+23, r23	; 0x17
    bf50:	e9 80       	ldd	r14, Y+1	; 0x01
    bf52:	fa 80       	ldd	r15, Y+2	; 0x02
    bf54:	c7 01       	movw	r24, r14
    bf56:	0e 94 2b 46 	call	0x8c56	; 0x8c56 <clst2sect>
    bf5a:	61 15       	cp	r22, r1
    bf5c:	71 05       	cpc	r23, r1
    bf5e:	81 05       	cpc	r24, r1
    bf60:	91 05       	cpc	r25, r1
    bf62:	09 f4       	brne	.+2      	; 0xbf66 <f_lseek+0x1ea>
    bf64:	69 cf       	rjmp	.-302    	; 0xbe38 <f_lseek+0xbc>
    bf66:	95 01       	movw	r18, r10
    bf68:	84 01       	movw	r16, r8
    bf6a:	11 70       	andi	r17, 0x01	; 1
    bf6c:	22 27       	eor	r18, r18
    bf6e:	33 27       	eor	r19, r19
    bf70:	01 15       	cp	r16, r1
    bf72:	11 05       	cpc	r17, r1
    bf74:	21 05       	cpc	r18, r1
    bf76:	31 05       	cpc	r19, r1
    bf78:	09 f4       	brne	.+2      	; 0xbf7c <f_lseek+0x200>
    bf7a:	ac c1       	rjmp	.+856    	; 0xc2d4 <f_lseek+0x558>
    bf7c:	f7 01       	movw	r30, r14
    bf7e:	81 84       	ldd	r8, Z+9	; 0x09
    bf80:	92 84       	ldd	r9, Z+10	; 0x0a
    bf82:	f1 e0       	ldi	r31, 0x01	; 1
    bf84:	8f 1a       	sub	r8, r31
    bf86:	91 08       	sbc	r9, r1
    bf88:	a1 2c       	mov	r10, r1
    bf8a:	b1 2c       	mov	r11, r1
    bf8c:	49 e0       	ldi	r20, 0x09	; 9
    bf8e:	76 94       	lsr	r7
    bf90:	67 94       	ror	r6
    bf92:	57 94       	ror	r5
    bf94:	47 94       	ror	r4
    bf96:	4a 95       	dec	r20
    bf98:	d1 f7       	brne	.-12     	; 0xbf8e <f_lseek+0x212>
    bf9a:	48 20       	and	r4, r8
    bf9c:	59 20       	and	r5, r9
    bf9e:	6a 20       	and	r6, r10
    bfa0:	7b 20       	and	r7, r11
    bfa2:	53 01       	movw	r10, r6
    bfa4:	42 01       	movw	r8, r4
    bfa6:	86 0e       	add	r8, r22
    bfa8:	97 1e       	adc	r9, r23
    bfaa:	a8 1e       	adc	r10, r24
    bfac:	b9 1e       	adc	r11, r25
    bfae:	f1 01       	movw	r30, r2
    bfb0:	20 8d       	ldd	r18, Z+24	; 0x18
    bfb2:	31 8d       	ldd	r19, Z+25	; 0x19
    bfb4:	42 8d       	ldd	r20, Z+26	; 0x1a
    bfb6:	53 8d       	ldd	r21, Z+27	; 0x1b
    bfb8:	82 16       	cp	r8, r18
    bfba:	93 06       	cpc	r9, r19
    bfbc:	a4 06       	cpc	r10, r20
    bfbe:	b5 06       	cpc	r11, r21
    bfc0:	09 f4       	brne	.+2      	; 0xbfc4 <f_lseek+0x248>
    bfc2:	88 c1       	rjmp	.+784    	; 0xc2d4 <f_lseek+0x558>
    bfc4:	86 85       	ldd	r24, Z+14	; 0x0e
    bfc6:	b1 01       	movw	r22, r2
    bfc8:	6c 5d       	subi	r22, 0xDC	; 220
    bfca:	7f 4f       	sbci	r23, 0xFF	; 255
    bfcc:	6b 01       	movw	r12, r22
    bfce:	87 ff       	sbrs	r24, 7
    bfd0:	0d c0       	rjmp	.+26     	; 0xbfec <f_lseek+0x270>
    bfd2:	01 e0       	ldi	r16, 0x01	; 1
    bfd4:	10 e0       	ldi	r17, 0x00	; 0
    bfd6:	f7 01       	movw	r30, r14
    bfd8:	81 81       	ldd	r24, Z+1	; 0x01
    bfda:	0e 94 fc 67 	call	0xcff8	; 0xcff8 <disk_write>
    bfde:	89 2b       	or	r24, r25
    bfe0:	09 f0       	breq	.+2      	; 0xbfe4 <f_lseek+0x268>
    bfe2:	32 cf       	rjmp	.-412    	; 0xbe48 <f_lseek+0xcc>
    bfe4:	f1 01       	movw	r30, r2
    bfe6:	86 85       	ldd	r24, Z+14	; 0x0e
    bfe8:	8f 77       	andi	r24, 0x7F	; 127
    bfea:	86 87       	std	Z+14, r24	; 0x0e
    bfec:	e9 81       	ldd	r30, Y+1	; 0x01
    bfee:	fa 81       	ldd	r31, Y+2	; 0x02
    bff0:	01 e0       	ldi	r16, 0x01	; 1
    bff2:	10 e0       	ldi	r17, 0x00	; 0
    bff4:	a5 01       	movw	r20, r10
    bff6:	94 01       	movw	r18, r8
    bff8:	b6 01       	movw	r22, r12
    bffa:	81 81       	ldd	r24, Z+1	; 0x01
    bffc:	ed d7       	rcall	.+4058   	; 0xcfd8 <disk_read>
    bffe:	89 2b       	or	r24, r25
    c000:	09 f0       	breq	.+2      	; 0xc004 <f_lseek+0x288>
    c002:	22 cf       	rjmp	.-444    	; 0xbe48 <f_lseek+0xcc>
    c004:	f1 01       	movw	r30, r2
    c006:	80 8e       	std	Z+24, r8	; 0x18
    c008:	91 8e       	std	Z+25, r9	; 0x19
    c00a:	a2 8e       	std	Z+26, r10	; 0x1a
    c00c:	b3 8e       	std	Z+27, r11	; 0x1b
    c00e:	62 c1       	rjmp	.+708    	; 0xc2d4 <f_lseek+0x558>
    c010:	f1 01       	movw	r30, r2
    c012:	82 85       	ldd	r24, Z+10	; 0x0a
    c014:	93 85       	ldd	r25, Z+11	; 0x0b
    c016:	a4 85       	ldd	r26, Z+12	; 0x0c
    c018:	b5 85       	ldd	r27, Z+13	; 0x0d
    c01a:	8c 15       	cp	r24, r12
    c01c:	9d 05       	cpc	r25, r13
    c01e:	ae 05       	cpc	r26, r14
    c020:	bf 05       	cpc	r27, r15
    c022:	28 f4       	brcc	.+10     	; 0xc02e <f_lseek+0x2b2>
    c024:	26 85       	ldd	r18, Z+14	; 0x0e
    c026:	21 fd       	sbrc	r18, 1
    c028:	02 c0       	rjmp	.+4      	; 0xc02e <f_lseek+0x2b2>
    c02a:	6c 01       	movw	r12, r24
    c02c:	7d 01       	movw	r14, r26
    c02e:	f1 01       	movw	r30, r2
    c030:	40 88       	ldd	r4, Z+16	; 0x10
    c032:	51 88       	ldd	r5, Z+17	; 0x11
    c034:	62 88       	ldd	r6, Z+18	; 0x12
    c036:	73 88       	ldd	r7, Z+19	; 0x13
    c038:	10 8a       	std	Z+16, r1	; 0x10
    c03a:	11 8a       	std	Z+17, r1	; 0x11
    c03c:	12 8a       	std	Z+18, r1	; 0x12
    c03e:	13 8a       	std	Z+19, r1	; 0x13
    c040:	c1 14       	cp	r12, r1
    c042:	d1 04       	cpc	r13, r1
    c044:	e1 04       	cpc	r14, r1
    c046:	f1 04       	cpc	r15, r1
    c048:	09 f4       	brne	.+2      	; 0xc04c <f_lseek+0x2d0>
    c04a:	48 c1       	rjmp	.+656    	; 0xc2dc <f_lseek+0x560>
    c04c:	e9 81       	ldd	r30, Y+1	; 0x01
    c04e:	fa 81       	ldd	r31, Y+2	; 0x02
    c050:	81 84       	ldd	r8, Z+9	; 0x09
    c052:	92 84       	ldd	r9, Z+10	; 0x0a
    c054:	a1 2c       	mov	r10, r1
    c056:	b1 2c       	mov	r11, r1
    c058:	39 e0       	ldi	r19, 0x09	; 9
    c05a:	88 0c       	add	r8, r8
    c05c:	99 1c       	adc	r9, r9
    c05e:	aa 1c       	adc	r10, r10
    c060:	bb 1c       	adc	r11, r11
    c062:	3a 95       	dec	r19
    c064:	d1 f7       	brne	.-12     	; 0xc05a <f_lseek+0x2de>
    c066:	41 14       	cp	r4, r1
    c068:	51 04       	cpc	r5, r1
    c06a:	61 04       	cpc	r6, r1
    c06c:	71 04       	cpc	r7, r1
    c06e:	d9 f1       	breq	.+118    	; 0xc0e6 <f_lseek+0x36a>
    c070:	f1 e0       	ldi	r31, 0x01	; 1
    c072:	4f 1a       	sub	r4, r31
    c074:	51 08       	sbc	r5, r1
    c076:	61 08       	sbc	r6, r1
    c078:	71 08       	sbc	r7, r1
    c07a:	c7 01       	movw	r24, r14
    c07c:	b6 01       	movw	r22, r12
    c07e:	61 50       	subi	r22, 0x01	; 1
    c080:	71 09       	sbc	r23, r1
    c082:	81 09       	sbc	r24, r1
    c084:	91 09       	sbc	r25, r1
    c086:	a5 01       	movw	r20, r10
    c088:	94 01       	movw	r18, r8
    c08a:	0e 94 9c e2 	call	0x1c538	; 0x1c538 <__udivmodsi4>
    c08e:	2b 83       	std	Y+3, r18	; 0x03
    c090:	3c 83       	std	Y+4, r19	; 0x04
    c092:	4d 83       	std	Y+5, r20	; 0x05
    c094:	5e 83       	std	Y+6, r21	; 0x06
    c096:	c3 01       	movw	r24, r6
    c098:	b2 01       	movw	r22, r4
    c09a:	a5 01       	movw	r20, r10
    c09c:	94 01       	movw	r18, r8
    c09e:	0e 94 9c e2 	call	0x1c538	; 0x1c538 <__udivmodsi4>
    c0a2:	6b 81       	ldd	r22, Y+3	; 0x03
    c0a4:	7c 81       	ldd	r23, Y+4	; 0x04
    c0a6:	8d 81       	ldd	r24, Y+5	; 0x05
    c0a8:	9e 81       	ldd	r25, Y+6	; 0x06
    c0aa:	62 17       	cp	r22, r18
    c0ac:	73 07       	cpc	r23, r19
    c0ae:	84 07       	cpc	r24, r20
    c0b0:	95 07       	cpc	r25, r21
    c0b2:	c8 f0       	brcs	.+50     	; 0xc0e6 <f_lseek+0x36a>
    c0b4:	88 27       	eor	r24, r24
    c0b6:	99 27       	eor	r25, r25
    c0b8:	dc 01       	movw	r26, r24
    c0ba:	88 19       	sub	r24, r8
    c0bc:	99 09       	sbc	r25, r9
    c0be:	aa 09       	sbc	r26, r10
    c0c0:	bb 09       	sbc	r27, r11
    c0c2:	48 22       	and	r4, r24
    c0c4:	59 22       	and	r5, r25
    c0c6:	6a 22       	and	r6, r26
    c0c8:	7b 22       	and	r7, r27
    c0ca:	f1 01       	movw	r30, r2
    c0cc:	40 8a       	std	Z+16, r4	; 0x10
    c0ce:	51 8a       	std	Z+17, r5	; 0x11
    c0d0:	62 8a       	std	Z+18, r6	; 0x12
    c0d2:	73 8a       	std	Z+19, r7	; 0x13
    c0d4:	c4 18       	sub	r12, r4
    c0d6:	d5 08       	sbc	r13, r5
    c0d8:	e6 08       	sbc	r14, r6
    c0da:	f7 08       	sbc	r15, r7
    c0dc:	44 89       	ldd	r20, Z+20	; 0x14
    c0de:	55 89       	ldd	r21, Z+21	; 0x15
    c0e0:	66 89       	ldd	r22, Z+22	; 0x16
    c0e2:	77 89       	ldd	r23, Z+23	; 0x17
    c0e4:	29 c0       	rjmp	.+82     	; 0xc138 <f_lseek+0x3bc>
    c0e6:	f1 01       	movw	r30, r2
    c0e8:	46 81       	ldd	r20, Z+6	; 0x06
    c0ea:	57 81       	ldd	r21, Z+7	; 0x07
    c0ec:	60 85       	ldd	r22, Z+8	; 0x08
    c0ee:	71 85       	ldd	r23, Z+9	; 0x09
    c0f0:	41 15       	cp	r20, r1
    c0f2:	51 05       	cpc	r21, r1
    c0f4:	61 05       	cpc	r22, r1
    c0f6:	71 05       	cpc	r23, r1
    c0f8:	d1 f4       	brne	.+52     	; 0xc12e <f_lseek+0x3b2>
    c0fa:	40 e0       	ldi	r20, 0x00	; 0
    c0fc:	50 e0       	ldi	r21, 0x00	; 0
    c0fe:	ba 01       	movw	r22, r20
    c100:	c1 01       	movw	r24, r2
    c102:	0e 94 fd 4e 	call	0x9dfa	; 0x9dfa <create_chain>
    c106:	ab 01       	movw	r20, r22
    c108:	bc 01       	movw	r22, r24
    c10a:	41 30       	cpi	r20, 0x01	; 1
    c10c:	51 05       	cpc	r21, r1
    c10e:	61 05       	cpc	r22, r1
    c110:	71 05       	cpc	r23, r1
    c112:	09 f4       	brne	.+2      	; 0xc116 <f_lseek+0x39a>
    c114:	91 ce       	rjmp	.-734    	; 0xbe38 <f_lseek+0xbc>
    c116:	4f 3f       	cpi	r20, 0xFF	; 255
    c118:	ff ef       	ldi	r31, 0xFF	; 255
    c11a:	5f 07       	cpc	r21, r31
    c11c:	6f 07       	cpc	r22, r31
    c11e:	7f 07       	cpc	r23, r31
    c120:	09 f4       	brne	.+2      	; 0xc124 <f_lseek+0x3a8>
    c122:	92 ce       	rjmp	.-732    	; 0xbe48 <f_lseek+0xcc>
    c124:	f1 01       	movw	r30, r2
    c126:	46 83       	std	Z+6, r20	; 0x06
    c128:	57 83       	std	Z+7, r21	; 0x07
    c12a:	60 87       	std	Z+8, r22	; 0x08
    c12c:	71 87       	std	Z+9, r23	; 0x09
    c12e:	f1 01       	movw	r30, r2
    c130:	44 8b       	std	Z+20, r20	; 0x14
    c132:	55 8b       	std	Z+21, r21	; 0x15
    c134:	66 8b       	std	Z+22, r22	; 0x16
    c136:	77 8b       	std	Z+23, r23	; 0x17
    c138:	41 15       	cp	r20, r1
    c13a:	51 05       	cpc	r21, r1
    c13c:	61 05       	cpc	r22, r1
    c13e:	71 05       	cpc	r23, r1
    c140:	09 f0       	breq	.+2      	; 0xc144 <f_lseek+0x3c8>
    c142:	40 c0       	rjmp	.+128    	; 0xc1c4 <f_lseek+0x448>
    c144:	c1 2c       	mov	r12, r1
    c146:	d1 2c       	mov	r13, r1
    c148:	76 01       	movw	r14, r12
    c14a:	79 c0       	rjmp	.+242    	; 0xc23e <f_lseek+0x4c2>
    c14c:	c8 18       	sub	r12, r8
    c14e:	d9 08       	sbc	r13, r9
    c150:	ea 08       	sbc	r14, r10
    c152:	fb 08       	sbc	r15, r11
    c154:	f1 01       	movw	r30, r2
    c156:	80 89       	ldd	r24, Z+16	; 0x10
    c158:	91 89       	ldd	r25, Z+17	; 0x11
    c15a:	a2 89       	ldd	r26, Z+18	; 0x12
    c15c:	b3 89       	ldd	r27, Z+19	; 0x13
    c15e:	88 0d       	add	r24, r8
    c160:	99 1d       	adc	r25, r9
    c162:	aa 1d       	adc	r26, r10
    c164:	bb 1d       	adc	r27, r11
    c166:	80 8b       	std	Z+16, r24	; 0x10
    c168:	91 8b       	std	Z+17, r25	; 0x11
    c16a:	a2 8b       	std	Z+18, r26	; 0x12
    c16c:	b3 8b       	std	Z+19, r27	; 0x13
    c16e:	86 85       	ldd	r24, Z+14	; 0x0e
    c170:	81 ff       	sbrs	r24, 1
    c172:	2f c0       	rjmp	.+94     	; 0xc1d2 <f_lseek+0x456>
    c174:	c1 01       	movw	r24, r2
    c176:	0e 94 fd 4e 	call	0x9dfa	; 0x9dfa <create_chain>
    c17a:	ab 01       	movw	r20, r22
    c17c:	bc 01       	movw	r22, r24
    c17e:	41 15       	cp	r20, r1
    c180:	51 05       	cpc	r21, r1
    c182:	61 05       	cpc	r22, r1
    c184:	71 05       	cpc	r23, r1
    c186:	61 f1       	breq	.+88     	; 0xc1e0 <f_lseek+0x464>
    c188:	4f 3f       	cpi	r20, 0xFF	; 255
    c18a:	bf ef       	ldi	r27, 0xFF	; 255
    c18c:	5b 07       	cpc	r21, r27
    c18e:	6b 07       	cpc	r22, r27
    c190:	7b 07       	cpc	r23, r27
    c192:	09 f4       	brne	.+2      	; 0xc196 <f_lseek+0x41a>
    c194:	59 ce       	rjmp	.-846    	; 0xbe48 <f_lseek+0xcc>
    c196:	42 30       	cpi	r20, 0x02	; 2
    c198:	51 05       	cpc	r21, r1
    c19a:	61 05       	cpc	r22, r1
    c19c:	71 05       	cpc	r23, r1
    c19e:	08 f4       	brcc	.+2      	; 0xc1a2 <f_lseek+0x426>
    c1a0:	4b ce       	rjmp	.-874    	; 0xbe38 <f_lseek+0xbc>
    c1a2:	e9 81       	ldd	r30, Y+1	; 0x01
    c1a4:	fa 81       	ldd	r31, Y+2	; 0x02
    c1a6:	81 8d       	ldd	r24, Z+25	; 0x19
    c1a8:	92 8d       	ldd	r25, Z+26	; 0x1a
    c1aa:	a3 8d       	ldd	r26, Z+27	; 0x1b
    c1ac:	b4 8d       	ldd	r27, Z+28	; 0x1c
    c1ae:	48 17       	cp	r20, r24
    c1b0:	59 07       	cpc	r21, r25
    c1b2:	6a 07       	cpc	r22, r26
    c1b4:	7b 07       	cpc	r23, r27
    c1b6:	08 f0       	brcs	.+2      	; 0xc1ba <f_lseek+0x43e>
    c1b8:	3f ce       	rjmp	.-898    	; 0xbe38 <f_lseek+0xbc>
    c1ba:	f1 01       	movw	r30, r2
    c1bc:	44 8b       	std	Z+20, r20	; 0x14
    c1be:	55 8b       	std	Z+21, r21	; 0x15
    c1c0:	66 8b       	std	Z+22, r22	; 0x16
    c1c2:	77 8b       	std	Z+23, r23	; 0x17
    c1c4:	8c 14       	cp	r8, r12
    c1c6:	9d 04       	cpc	r9, r13
    c1c8:	ae 04       	cpc	r10, r14
    c1ca:	bf 04       	cpc	r11, r15
    c1cc:	08 f4       	brcc	.+2      	; 0xc1d0 <f_lseek+0x454>
    c1ce:	be cf       	rjmp	.-132    	; 0xc14c <f_lseek+0x3d0>
    c1d0:	0a c0       	rjmp	.+20     	; 0xc1e6 <f_lseek+0x46a>
    c1d2:	80 81       	ld	r24, Z
    c1d4:	91 81       	ldd	r25, Z+1	; 0x01
    c1d6:	0e 94 88 4d 	call	0x9b10	; 0x9b10 <get_fat.isra.9>
    c1da:	ab 01       	movw	r20, r22
    c1dc:	bc 01       	movw	r22, r24
    c1de:	d4 cf       	rjmp	.-88     	; 0xc188 <f_lseek+0x40c>
    c1e0:	c1 2c       	mov	r12, r1
    c1e2:	d1 2c       	mov	r13, r1
    c1e4:	76 01       	movw	r14, r12
    c1e6:	f1 01       	movw	r30, r2
    c1e8:	80 89       	ldd	r24, Z+16	; 0x10
    c1ea:	91 89       	ldd	r25, Z+17	; 0x11
    c1ec:	a2 89       	ldd	r26, Z+18	; 0x12
    c1ee:	b3 89       	ldd	r27, Z+19	; 0x13
    c1f0:	8c 0d       	add	r24, r12
    c1f2:	9d 1d       	adc	r25, r13
    c1f4:	ae 1d       	adc	r26, r14
    c1f6:	bf 1d       	adc	r27, r15
    c1f8:	80 8b       	std	Z+16, r24	; 0x10
    c1fa:	91 8b       	std	Z+17, r25	; 0x11
    c1fc:	a2 8b       	std	Z+18, r26	; 0x12
    c1fe:	b3 8b       	std	Z+19, r27	; 0x13
    c200:	d7 01       	movw	r26, r14
    c202:	c6 01       	movw	r24, r12
    c204:	91 70       	andi	r25, 0x01	; 1
    c206:	aa 27       	eor	r26, r26
    c208:	bb 27       	eor	r27, r27
    c20a:	89 2b       	or	r24, r25
    c20c:	8a 2b       	or	r24, r26
    c20e:	8b 2b       	or	r24, r27
    c210:	09 f4       	brne	.+2      	; 0xc214 <f_lseek+0x498>
    c212:	98 cf       	rjmp	.-208    	; 0xc144 <f_lseek+0x3c8>
    c214:	89 81       	ldd	r24, Y+1	; 0x01
    c216:	9a 81       	ldd	r25, Y+2	; 0x02
    c218:	0e 94 2b 46 	call	0x8c56	; 0x8c56 <clst2sect>
    c21c:	61 15       	cp	r22, r1
    c21e:	71 05       	cpc	r23, r1
    c220:	81 05       	cpc	r24, r1
    c222:	91 05       	cpc	r25, r1
    c224:	09 f4       	brne	.+2      	; 0xc228 <f_lseek+0x4ac>
    c226:	08 ce       	rjmp	.-1008   	; 0xbe38 <f_lseek+0xbc>
    c228:	29 e0       	ldi	r18, 0x09	; 9
    c22a:	f6 94       	lsr	r15
    c22c:	e7 94       	ror	r14
    c22e:	d7 94       	ror	r13
    c230:	c7 94       	ror	r12
    c232:	2a 95       	dec	r18
    c234:	d1 f7       	brne	.-12     	; 0xc22a <f_lseek+0x4ae>
    c236:	c6 0e       	add	r12, r22
    c238:	d7 1e       	adc	r13, r23
    c23a:	e8 1e       	adc	r14, r24
    c23c:	f9 1e       	adc	r15, r25
    c23e:	f1 01       	movw	r30, r2
    c240:	80 89       	ldd	r24, Z+16	; 0x10
    c242:	91 89       	ldd	r25, Z+17	; 0x11
    c244:	a2 89       	ldd	r26, Z+18	; 0x12
    c246:	b3 89       	ldd	r27, Z+19	; 0x13
    c248:	42 85       	ldd	r20, Z+10	; 0x0a
    c24a:	53 85       	ldd	r21, Z+11	; 0x0b
    c24c:	64 85       	ldd	r22, Z+12	; 0x0c
    c24e:	75 85       	ldd	r23, Z+13	; 0x0d
    c250:	48 17       	cp	r20, r24
    c252:	59 07       	cpc	r21, r25
    c254:	6a 07       	cpc	r22, r26
    c256:	7b 07       	cpc	r23, r27
    c258:	38 f4       	brcc	.+14     	; 0xc268 <f_lseek+0x4ec>
    c25a:	82 87       	std	Z+10, r24	; 0x0a
    c25c:	93 87       	std	Z+11, r25	; 0x0b
    c25e:	a4 87       	std	Z+12, r26	; 0x0c
    c260:	b5 87       	std	Z+13, r27	; 0x0d
    c262:	26 85       	ldd	r18, Z+14	; 0x0e
    c264:	20 64       	ori	r18, 0x40	; 64
    c266:	26 87       	std	Z+14, r18	; 0x0e
    c268:	91 70       	andi	r25, 0x01	; 1
    c26a:	aa 27       	eor	r26, r26
    c26c:	bb 27       	eor	r27, r27
    c26e:	89 2b       	or	r24, r25
    c270:	8a 2b       	or	r24, r26
    c272:	8b 2b       	or	r24, r27
    c274:	79 f1       	breq	.+94     	; 0xc2d4 <f_lseek+0x558>
    c276:	f1 01       	movw	r30, r2
    c278:	20 8d       	ldd	r18, Z+24	; 0x18
    c27a:	31 8d       	ldd	r19, Z+25	; 0x19
    c27c:	42 8d       	ldd	r20, Z+26	; 0x1a
    c27e:	53 8d       	ldd	r21, Z+27	; 0x1b
    c280:	2c 15       	cp	r18, r12
    c282:	3d 05       	cpc	r19, r13
    c284:	4e 05       	cpc	r20, r14
    c286:	5f 05       	cpc	r21, r15
    c288:	29 f1       	breq	.+74     	; 0xc2d4 <f_lseek+0x558>
    c28a:	86 85       	ldd	r24, Z+14	; 0x0e
    c28c:	b1 01       	movw	r22, r2
    c28e:	6c 5d       	subi	r22, 0xDC	; 220
    c290:	7f 4f       	sbci	r23, 0xFF	; 255
    c292:	5b 01       	movw	r10, r22
    c294:	87 ff       	sbrs	r24, 7
    c296:	0d c0       	rjmp	.+26     	; 0xc2b2 <f_lseek+0x536>
    c298:	e9 81       	ldd	r30, Y+1	; 0x01
    c29a:	fa 81       	ldd	r31, Y+2	; 0x02
    c29c:	01 e0       	ldi	r16, 0x01	; 1
    c29e:	10 e0       	ldi	r17, 0x00	; 0
    c2a0:	81 81       	ldd	r24, Z+1	; 0x01
    c2a2:	aa d6       	rcall	.+3412   	; 0xcff8 <disk_write>
    c2a4:	89 2b       	or	r24, r25
    c2a6:	09 f0       	breq	.+2      	; 0xc2aa <f_lseek+0x52e>
    c2a8:	cf cd       	rjmp	.-1122   	; 0xbe48 <f_lseek+0xcc>
    c2aa:	f1 01       	movw	r30, r2
    c2ac:	86 85       	ldd	r24, Z+14	; 0x0e
    c2ae:	8f 77       	andi	r24, 0x7F	; 127
    c2b0:	86 87       	std	Z+14, r24	; 0x0e
    c2b2:	e9 81       	ldd	r30, Y+1	; 0x01
    c2b4:	fa 81       	ldd	r31, Y+2	; 0x02
    c2b6:	01 e0       	ldi	r16, 0x01	; 1
    c2b8:	10 e0       	ldi	r17, 0x00	; 0
    c2ba:	a7 01       	movw	r20, r14
    c2bc:	96 01       	movw	r18, r12
    c2be:	b5 01       	movw	r22, r10
    c2c0:	81 81       	ldd	r24, Z+1	; 0x01
    c2c2:	8a d6       	rcall	.+3348   	; 0xcfd8 <disk_read>
    c2c4:	89 2b       	or	r24, r25
    c2c6:	09 f0       	breq	.+2      	; 0xc2ca <f_lseek+0x54e>
    c2c8:	bf cd       	rjmp	.-1154   	; 0xbe48 <f_lseek+0xcc>
    c2ca:	f1 01       	movw	r30, r2
    c2cc:	c0 8e       	std	Z+24, r12	; 0x18
    c2ce:	d1 8e       	std	Z+25, r13	; 0x19
    c2d0:	e2 8e       	std	Z+26, r14	; 0x1a
    c2d2:	f3 8e       	std	Z+27, r15	; 0x1b
    c2d4:	80 e0       	ldi	r24, 0x00	; 0
    c2d6:	bb cd       	rjmp	.-1162   	; 0xbe4e <f_lseek+0xd2>
    c2d8:	81 e1       	ldi	r24, 0x11	; 17
    c2da:	b9 cd       	rjmp	.-1166   	; 0xbe4e <f_lseek+0xd2>
    c2dc:	80 e0       	ldi	r24, 0x00	; 0
    c2de:	90 e0       	ldi	r25, 0x00	; 0
    c2e0:	dc 01       	movw	r26, r24
    c2e2:	c1 2c       	mov	r12, r1
    c2e4:	d1 2c       	mov	r13, r1
    c2e6:	76 01       	movw	r14, r12
    c2e8:	bf cf       	rjmp	.-130    	; 0xc268 <f_lseek+0x4ec>
    c2ea:	2a 96       	adiw	r28, 0x0a	; 10
    c2ec:	e2 e1       	ldi	r30, 0x12	; 18
    c2ee:	0c 94 25 e3 	jmp	0x1c64a	; 0x1c64a <__epilogue_restores__>

0000c2f2 <f_opendir>:
    c2f2:	a4 e0       	ldi	r26, 0x04	; 4
    c2f4:	b0 e0       	ldi	r27, 0x00	; 0
    c2f6:	ef e7       	ldi	r30, 0x7F	; 127
    c2f8:	f1 e6       	ldi	r31, 0x61	; 97
    c2fa:	0c 94 13 e3 	jmp	0x1c626	; 0x1c626 <__prologue_saves__+0x14>
    c2fe:	7c 83       	std	Y+4, r23	; 0x04
    c300:	6b 83       	std	Y+3, r22	; 0x03
    c302:	00 97       	sbiw	r24, 0x00	; 0
    c304:	09 f4       	brne	.+2      	; 0xc308 <f_opendir+0x16>
    c306:	48 c0       	rjmp	.+144    	; 0xc398 <f_opendir+0xa6>
    c308:	8c 01       	movw	r16, r24
    c30a:	40 e0       	ldi	r20, 0x00	; 0
    c30c:	be 01       	movw	r22, r28
    c30e:	6f 5f       	subi	r22, 0xFF	; 255
    c310:	7f 4f       	sbci	r23, 0xFF	; 255
    c312:	ce 01       	movw	r24, r28
    c314:	03 96       	adiw	r24, 0x03	; 3
    c316:	0e 94 35 4a 	call	0x946a	; 0x946a <mount_volume>
    c31a:	7c 01       	movw	r14, r24
    c31c:	89 2b       	or	r24, r25
    c31e:	b9 f5       	brne	.+110    	; 0xc38e <f_opendir+0x9c>
    c320:	89 81       	ldd	r24, Y+1	; 0x01
    c322:	9a 81       	ldd	r25, Y+2	; 0x02
    c324:	f8 01       	movw	r30, r16
    c326:	91 83       	std	Z+1, r25	; 0x01
    c328:	80 83       	st	Z, r24
    c32a:	80 e0       	ldi	r24, 0x00	; 0
    c32c:	92 e0       	ldi	r25, 0x02	; 2
    c32e:	98 d5       	rcall	.+2864   	; 0xce60 <ff_memalloc>
    c330:	6c 01       	movw	r12, r24
    c332:	00 97       	sbiw	r24, 0x00	; 0
    c334:	99 f1       	breq	.+102    	; 0xc39c <f_opendir+0xaa>
    c336:	e9 81       	ldd	r30, Y+1	; 0x01
    c338:	fa 81       	ldd	r31, Y+2	; 0x02
    c33a:	94 87       	std	Z+12, r25	; 0x0c
    c33c:	83 87       	std	Z+11, r24	; 0x0b
    c33e:	6b 81       	ldd	r22, Y+3	; 0x03
    c340:	7c 81       	ldd	r23, Y+4	; 0x04
    c342:	c8 01       	movw	r24, r16
    c344:	0e 94 82 55 	call	0xab04	; 0xab04 <follow_path>
    c348:	7c 01       	movw	r14, r24
    c34a:	89 2b       	or	r24, r25
    c34c:	b9 f4       	brne	.+46     	; 0xc37c <f_opendir+0x8a>
    c34e:	f8 01       	movw	r30, r16
    c350:	87 a1       	ldd	r24, Z+39	; 0x27
    c352:	87 fd       	sbrc	r24, 7
    c354:	28 c0       	rjmp	.+80     	; 0xc3a6 <f_opendir+0xb4>
    c356:	84 81       	ldd	r24, Z+4	; 0x04
    c358:	84 ff       	sbrs	r24, 4
    c35a:	0d c0       	rjmp	.+26     	; 0xc376 <f_opendir+0x84>
    c35c:	62 8d       	ldd	r22, Z+26	; 0x1a
    c35e:	73 8d       	ldd	r23, Z+27	; 0x1b
    c360:	e9 81       	ldd	r30, Y+1	; 0x01
    c362:	fa 81       	ldd	r31, Y+2	; 0x02
    c364:	80 81       	ld	r24, Z
    c366:	0e 94 2b 48 	call	0x9056	; 0x9056 <ld_clust.isra.3>
    c36a:	f8 01       	movw	r30, r16
    c36c:	66 83       	std	Z+6, r22	; 0x06
    c36e:	77 83       	std	Z+7, r23	; 0x07
    c370:	80 87       	std	Z+8, r24	; 0x08
    c372:	91 87       	std	Z+9, r25	; 0x09
    c374:	18 c0       	rjmp	.+48     	; 0xc3a6 <f_opendir+0xb4>
    c376:	95 e0       	ldi	r25, 0x05	; 5
    c378:	e9 2e       	mov	r14, r25
    c37a:	f1 2c       	mov	r15, r1
    c37c:	c6 01       	movw	r24, r12
    c37e:	73 d5       	rcall	.+2790   	; 0xce66 <ff_memfree>
    c380:	f4 e0       	ldi	r31, 0x04	; 4
    c382:	ef 16       	cp	r14, r31
    c384:	f1 04       	cpc	r15, r1
    c386:	f1 f0       	breq	.+60     	; 0xc3c4 <f_opendir+0xd2>
    c388:	e1 14       	cp	r14, r1
    c38a:	f1 04       	cpc	r15, r1
    c38c:	49 f0       	breq	.+18     	; 0xc3a0 <f_opendir+0xae>
    c38e:	f8 01       	movw	r30, r16
    c390:	11 82       	std	Z+1, r1	; 0x01
    c392:	10 82       	st	Z, r1
    c394:	c7 01       	movw	r24, r14
    c396:	1a c0       	rjmp	.+52     	; 0xc3cc <f_opendir+0xda>
    c398:	89 e0       	ldi	r24, 0x09	; 9
    c39a:	03 c0       	rjmp	.+6      	; 0xc3a2 <f_opendir+0xb0>
    c39c:	81 e1       	ldi	r24, 0x11	; 17
    c39e:	01 c0       	rjmp	.+2      	; 0xc3a2 <f_opendir+0xb0>
    c3a0:	80 e0       	ldi	r24, 0x00	; 0
    c3a2:	90 e0       	ldi	r25, 0x00	; 0
    c3a4:	13 c0       	rjmp	.+38     	; 0xc3cc <f_opendir+0xda>
    c3a6:	e9 81       	ldd	r30, Y+1	; 0x01
    c3a8:	fa 81       	ldd	r31, Y+2	; 0x02
    c3aa:	85 81       	ldd	r24, Z+5	; 0x05
    c3ac:	96 81       	ldd	r25, Z+6	; 0x06
    c3ae:	f8 01       	movw	r30, r16
    c3b0:	93 83       	std	Z+3, r25	; 0x03
    c3b2:	82 83       	std	Z+2, r24	; 0x02
    c3b4:	40 e0       	ldi	r20, 0x00	; 0
    c3b6:	50 e0       	ldi	r21, 0x00	; 0
    c3b8:	ba 01       	movw	r22, r20
    c3ba:	c8 01       	movw	r24, r16
    c3bc:	0e 94 3c 4e 	call	0x9c78	; 0x9c78 <dir_sdi>
    c3c0:	7c 01       	movw	r14, r24
    c3c2:	dc cf       	rjmp	.-72     	; 0xc37c <f_opendir+0x8a>
    c3c4:	85 e0       	ldi	r24, 0x05	; 5
    c3c6:	e8 2e       	mov	r14, r24
    c3c8:	f1 2c       	mov	r15, r1
    c3ca:	e1 cf       	rjmp	.-62     	; 0xc38e <f_opendir+0x9c>
    c3cc:	24 96       	adiw	r28, 0x04	; 4
    c3ce:	e8 e0       	ldi	r30, 0x08	; 8
    c3d0:	0c 94 2f e3 	jmp	0x1c65e	; 0x1c65e <__epilogue_restores__+0x14>

0000c3d4 <f_closedir>:
    c3d4:	a2 e0       	ldi	r26, 0x02	; 2
    c3d6:	b0 e0       	ldi	r27, 0x00	; 0
    c3d8:	e0 ef       	ldi	r30, 0xF0	; 240
    c3da:	f1 e6       	ldi	r31, 0x61	; 97
    c3dc:	0c 94 17 e3 	jmp	0x1c62e	; 0x1c62e <__prologue_saves__+0x1c>
    c3e0:	8c 01       	movw	r16, r24
    c3e2:	be 01       	movw	r22, r28
    c3e4:	6f 5f       	subi	r22, 0xFF	; 255
    c3e6:	7f 4f       	sbci	r23, 0xFF	; 255
    c3e8:	0e 94 ca 46 	call	0x8d94	; 0x8d94 <validate>
    c3ec:	00 97       	sbiw	r24, 0x00	; 0
    c3ee:	19 f4       	brne	.+6      	; 0xc3f6 <f_closedir+0x22>
    c3f0:	f8 01       	movw	r30, r16
    c3f2:	11 82       	std	Z+1, r1	; 0x01
    c3f4:	10 82       	st	Z, r1
    c3f6:	22 96       	adiw	r28, 0x02	; 2
    c3f8:	e4 e0       	ldi	r30, 0x04	; 4
    c3fa:	0c 94 33 e3 	jmp	0x1c666	; 0x1c666 <__epilogue_restores__+0x1c>

0000c3fe <f_readdir>:
    c3fe:	a2 e0       	ldi	r26, 0x02	; 2
    c400:	b0 e0       	ldi	r27, 0x00	; 0
    c402:	e5 e0       	ldi	r30, 0x05	; 5
    c404:	f2 e6       	ldi	r31, 0x62	; 98
    c406:	0c 94 11 e3 	jmp	0x1c622	; 0x1c622 <__prologue_saves__+0x10>
    c40a:	7c 01       	movw	r14, r24
    c40c:	5b 01       	movw	r10, r22
    c40e:	be 01       	movw	r22, r28
    c410:	6f 5f       	subi	r22, 0xFF	; 255
    c412:	7f 4f       	sbci	r23, 0xFF	; 255
    c414:	0e 94 ca 46 	call	0x8d94	; 0x8d94 <validate>
    c418:	00 97       	sbiw	r24, 0x00	; 0
    c41a:	89 f5       	brne	.+98     	; 0xc47e <f_readdir+0x80>
    c41c:	a1 14       	cp	r10, r1
    c41e:	b1 04       	cpc	r11, r1
    c420:	39 f4       	brne	.+14     	; 0xc430 <f_readdir+0x32>
    c422:	40 e0       	ldi	r20, 0x00	; 0
    c424:	50 e0       	ldi	r21, 0x00	; 0
    c426:	ba 01       	movw	r22, r20
    c428:	c7 01       	movw	r24, r14
    c42a:	0e 94 3c 4e 	call	0x9c78	; 0x9c78 <dir_sdi>
    c42e:	27 c0       	rjmp	.+78     	; 0xc47e <f_readdir+0x80>
    c430:	80 e0       	ldi	r24, 0x00	; 0
    c432:	92 e0       	ldi	r25, 0x02	; 2
    c434:	15 d5       	rcall	.+2602   	; 0xce60 <ff_memalloc>
    c436:	6c 01       	movw	r12, r24
    c438:	00 97       	sbiw	r24, 0x00	; 0
    c43a:	f9 f0       	breq	.+62     	; 0xc47a <f_readdir+0x7c>
    c43c:	e9 81       	ldd	r30, Y+1	; 0x01
    c43e:	fa 81       	ldd	r31, Y+2	; 0x02
    c440:	94 87       	std	Z+12, r25	; 0x0c
    c442:	83 87       	std	Z+11, r24	; 0x0b
    c444:	60 e0       	ldi	r22, 0x00	; 0
    c446:	70 e0       	ldi	r23, 0x00	; 0
    c448:	c7 01       	movw	r24, r14
    c44a:	0e 94 d5 51 	call	0xa3aa	; 0xa3aa <dir_read>
    c44e:	8c 01       	movw	r16, r24
    c450:	8b 7f       	andi	r24, 0xFB	; 251
    c452:	89 2b       	or	r24, r25
    c454:	71 f4       	brne	.+28     	; 0xc472 <f_readdir+0x74>
    c456:	b5 01       	movw	r22, r10
    c458:	c7 01       	movw	r24, r14
    c45a:	0e 94 f6 46 	call	0x8dec	; 0x8dec <get_fileinfo>
    c45e:	60 e0       	ldi	r22, 0x00	; 0
    c460:	70 e0       	ldi	r23, 0x00	; 0
    c462:	c7 01       	movw	r24, r14
    c464:	0e 94 b4 50 	call	0xa168	; 0xa168 <dir_next>
    c468:	8c 01       	movw	r16, r24
    c46a:	04 97       	sbiw	r24, 0x04	; 4
    c46c:	11 f4       	brne	.+4      	; 0xc472 <f_readdir+0x74>
    c46e:	00 e0       	ldi	r16, 0x00	; 0
    c470:	10 e0       	ldi	r17, 0x00	; 0
    c472:	c6 01       	movw	r24, r12
    c474:	f8 d4       	rcall	.+2544   	; 0xce66 <ff_memfree>
    c476:	c8 01       	movw	r24, r16
    c478:	02 c0       	rjmp	.+4      	; 0xc47e <f_readdir+0x80>
    c47a:	81 e1       	ldi	r24, 0x11	; 17
    c47c:	90 e0       	ldi	r25, 0x00	; 0
    c47e:	22 96       	adiw	r28, 0x02	; 2
    c480:	ea e0       	ldi	r30, 0x0A	; 10
    c482:	0c 94 2d e3 	jmp	0x1c65a	; 0x1c65a <__epilogue_restores__+0x10>

0000c486 <f_stat>:
    c486:	a0 e3       	ldi	r26, 0x30	; 48
    c488:	b0 e0       	ldi	r27, 0x00	; 0
    c48a:	e9 e4       	ldi	r30, 0x49	; 73
    c48c:	f2 e6       	ldi	r31, 0x62	; 98
    c48e:	0c 94 13 e3 	jmp	0x1c626	; 0x1c626 <__prologue_saves__+0x14>
    c492:	98 ab       	std	Y+48, r25	; 0x30
    c494:	8f a7       	std	Y+47, r24	; 0x2f
    c496:	6b 01       	movw	r12, r22
    c498:	40 e0       	ldi	r20, 0x00	; 0
    c49a:	be 01       	movw	r22, r28
    c49c:	6f 5f       	subi	r22, 0xFF	; 255
    c49e:	7f 4f       	sbci	r23, 0xFF	; 255
    c4a0:	ce 01       	movw	r24, r28
    c4a2:	8f 96       	adiw	r24, 0x2f	; 47
    c4a4:	0e 94 35 4a 	call	0x946a	; 0x946a <mount_volume>
    c4a8:	00 97       	sbiw	r24, 0x00	; 0
    c4aa:	39 f5       	brne	.+78     	; 0xc4fa <f_stat+0x74>
    c4ac:	80 e0       	ldi	r24, 0x00	; 0
    c4ae:	92 e0       	ldi	r25, 0x02	; 2
    c4b0:	d7 d4       	rcall	.+2478   	; 0xce60 <ff_memalloc>
    c4b2:	7c 01       	movw	r14, r24
    c4b4:	00 97       	sbiw	r24, 0x00	; 0
    c4b6:	f9 f0       	breq	.+62     	; 0xc4f6 <f_stat+0x70>
    c4b8:	e9 81       	ldd	r30, Y+1	; 0x01
    c4ba:	fa 81       	ldd	r31, Y+2	; 0x02
    c4bc:	94 87       	std	Z+12, r25	; 0x0c
    c4be:	83 87       	std	Z+11, r24	; 0x0b
    c4c0:	6f a5       	ldd	r22, Y+47	; 0x2f
    c4c2:	78 a9       	ldd	r23, Y+48	; 0x30
    c4c4:	ce 01       	movw	r24, r28
    c4c6:	01 96       	adiw	r24, 0x01	; 1
    c4c8:	0e 94 82 55 	call	0xab04	; 0xab04 <follow_path>
    c4cc:	8c 01       	movw	r16, r24
    c4ce:	89 2b       	or	r24, r25
    c4d0:	71 f4       	brne	.+28     	; 0xc4ee <f_stat+0x68>
    c4d2:	88 a5       	ldd	r24, Y+40	; 0x28
    c4d4:	87 fd       	sbrc	r24, 7
    c4d6:	09 c0       	rjmp	.+18     	; 0xc4ea <f_stat+0x64>
    c4d8:	c1 14       	cp	r12, r1
    c4da:	d1 04       	cpc	r13, r1
    c4dc:	41 f0       	breq	.+16     	; 0xc4ee <f_stat+0x68>
    c4de:	b6 01       	movw	r22, r12
    c4e0:	ce 01       	movw	r24, r28
    c4e2:	01 96       	adiw	r24, 0x01	; 1
    c4e4:	0e 94 f6 46 	call	0x8dec	; 0x8dec <get_fileinfo>
    c4e8:	02 c0       	rjmp	.+4      	; 0xc4ee <f_stat+0x68>
    c4ea:	06 e0       	ldi	r16, 0x06	; 6
    c4ec:	10 e0       	ldi	r17, 0x00	; 0
    c4ee:	c7 01       	movw	r24, r14
    c4f0:	ba d4       	rcall	.+2420   	; 0xce66 <ff_memfree>
    c4f2:	c8 01       	movw	r24, r16
    c4f4:	02 c0       	rjmp	.+4      	; 0xc4fa <f_stat+0x74>
    c4f6:	81 e1       	ldi	r24, 0x11	; 17
    c4f8:	90 e0       	ldi	r25, 0x00	; 0
    c4fa:	e0 96       	adiw	r28, 0x30	; 48
    c4fc:	e8 e0       	ldi	r30, 0x08	; 8
    c4fe:	0c 94 2f e3 	jmp	0x1c65e	; 0x1c65e <__epilogue_restores__+0x14>

0000c502 <f_getfree>:
    c502:	aa e0       	ldi	r26, 0x0A	; 10
    c504:	b0 e0       	ldi	r27, 0x00	; 0
    c506:	e7 e8       	ldi	r30, 0x87	; 135
    c508:	f2 e6       	ldi	r31, 0x62	; 98
    c50a:	0c 94 09 e3 	jmp	0x1c612	; 0x1c612 <__prologue_saves__>
    c50e:	9c 83       	std	Y+4, r25	; 0x04
    c510:	8b 83       	std	Y+3, r24	; 0x03
    c512:	7e 83       	std	Y+6, r23	; 0x06
    c514:	6d 83       	std	Y+5, r22	; 0x05
    c516:	7a 01       	movw	r14, r20
    c518:	40 e0       	ldi	r20, 0x00	; 0
    c51a:	be 01       	movw	r22, r28
    c51c:	6f 5f       	subi	r22, 0xFF	; 255
    c51e:	7f 4f       	sbci	r23, 0xFF	; 255
    c520:	ce 01       	movw	r24, r28
    c522:	03 96       	adiw	r24, 0x03	; 3
    c524:	0e 94 35 4a 	call	0x946a	; 0x946a <mount_volume>
    c528:	8c 01       	movw	r16, r24
    c52a:	89 2b       	or	r24, r25
    c52c:	09 f0       	breq	.+2      	; 0xc530 <f_getfree+0x2e>
    c52e:	c4 c0       	rjmp	.+392    	; 0xc6b8 <f_getfree+0x1b6>
    c530:	69 80       	ldd	r6, Y+1	; 0x01
    c532:	7a 80       	ldd	r7, Y+2	; 0x02
    c534:	d7 01       	movw	r26, r14
    c536:	6d 92       	st	X+, r6
    c538:	7c 92       	st	X, r7
    c53a:	f3 01       	movw	r30, r6
    c53c:	81 89       	ldd	r24, Z+17	; 0x11
    c53e:	92 89       	ldd	r25, Z+18	; 0x12
    c540:	a3 89       	ldd	r26, Z+19	; 0x13
    c542:	b4 89       	ldd	r27, Z+20	; 0x14
    c544:	81 8c       	ldd	r8, Z+25	; 0x19
    c546:	92 8c       	ldd	r9, Z+26	; 0x1a
    c548:	a3 8c       	ldd	r10, Z+27	; 0x1b
    c54a:	b4 8c       	ldd	r11, Z+28	; 0x1c
    c54c:	b5 01       	movw	r22, r10
    c54e:	a4 01       	movw	r20, r8
    c550:	42 50       	subi	r20, 0x02	; 2
    c552:	51 09       	sbc	r21, r1
    c554:	61 09       	sbc	r22, r1
    c556:	71 09       	sbc	r23, r1
    c558:	48 17       	cp	r20, r24
    c55a:	59 07       	cpc	r21, r25
    c55c:	6a 07       	cpc	r22, r26
    c55e:	7b 07       	cpc	r23, r27
    c560:	38 f0       	brcs	.+14     	; 0xc570 <f_getfree+0x6e>
    c562:	ed 81       	ldd	r30, Y+5	; 0x05
    c564:	fe 81       	ldd	r31, Y+6	; 0x06
    c566:	80 83       	st	Z, r24
    c568:	91 83       	std	Z+1, r25	; 0x01
    c56a:	a2 83       	std	Z+2, r26	; 0x02
    c56c:	b3 83       	std	Z+3, r27	; 0x03
    c56e:	a4 c0       	rjmp	.+328    	; 0xc6b8 <f_getfree+0x1b6>
    c570:	80 81       	ld	r24, Z
    c572:	81 30       	cpi	r24, 0x01	; 1
    c574:	a1 f5       	brne	.+104    	; 0xc5de <f_getfree+0xdc>
    c576:	82 e0       	ldi	r24, 0x02	; 2
    c578:	88 2e       	mov	r8, r24
    c57a:	91 2c       	mov	r9, r1
    c57c:	a1 2c       	mov	r10, r1
    c57e:	b1 2c       	mov	r11, r1
    c580:	c1 2c       	mov	r12, r1
    c582:	d1 2c       	mov	r13, r1
    c584:	76 01       	movw	r14, r12
    c586:	b5 01       	movw	r22, r10
    c588:	a4 01       	movw	r20, r8
    c58a:	c3 01       	movw	r24, r6
    c58c:	0e 94 88 4d 	call	0x9b10	; 0x9b10 <get_fat.isra.9>
    c590:	6f 3f       	cpi	r22, 0xFF	; 255
    c592:	bf ef       	ldi	r27, 0xFF	; 255
    c594:	7b 07       	cpc	r23, r27
    c596:	8b 07       	cpc	r24, r27
    c598:	9b 07       	cpc	r25, r27
    c59a:	09 f4       	brne	.+2      	; 0xc59e <f_getfree+0x9c>
    c59c:	76 c0       	rjmp	.+236    	; 0xc68a <f_getfree+0x188>
    c59e:	61 30       	cpi	r22, 0x01	; 1
    c5a0:	71 05       	cpc	r23, r1
    c5a2:	81 05       	cpc	r24, r1
    c5a4:	91 05       	cpc	r25, r1
    c5a6:	09 f4       	brne	.+2      	; 0xc5aa <f_getfree+0xa8>
    c5a8:	73 c0       	rjmp	.+230    	; 0xc690 <f_getfree+0x18e>
    c5aa:	67 2b       	or	r22, r23
    c5ac:	68 2b       	or	r22, r24
    c5ae:	69 2b       	or	r22, r25
    c5b0:	29 f4       	brne	.+10     	; 0xc5bc <f_getfree+0xba>
    c5b2:	ef ef       	ldi	r30, 0xFF	; 255
    c5b4:	ce 1a       	sub	r12, r30
    c5b6:	de 0a       	sbc	r13, r30
    c5b8:	ee 0a       	sbc	r14, r30
    c5ba:	fe 0a       	sbc	r15, r30
    c5bc:	ff ef       	ldi	r31, 0xFF	; 255
    c5be:	8f 1a       	sub	r8, r31
    c5c0:	9f 0a       	sbc	r9, r31
    c5c2:	af 0a       	sbc	r10, r31
    c5c4:	bf 0a       	sbc	r11, r31
    c5c6:	e9 81       	ldd	r30, Y+1	; 0x01
    c5c8:	fa 81       	ldd	r31, Y+2	; 0x02
    c5ca:	81 8d       	ldd	r24, Z+25	; 0x19
    c5cc:	92 8d       	ldd	r25, Z+26	; 0x1a
    c5ce:	a3 8d       	ldd	r26, Z+27	; 0x1b
    c5d0:	b4 8d       	ldd	r27, Z+28	; 0x1c
    c5d2:	88 16       	cp	r8, r24
    c5d4:	99 06       	cpc	r9, r25
    c5d6:	aa 06       	cpc	r10, r26
    c5d8:	bb 06       	cpc	r11, r27
    c5da:	a8 f2       	brcs	.-86     	; 0xc586 <f_getfree+0x84>
    c5dc:	5d c0       	rjmp	.+186    	; 0xc698 <f_getfree+0x196>
    c5de:	f3 01       	movw	r30, r6
    c5e0:	45 a0       	ldd	r4, Z+37	; 0x25
    c5e2:	56 a0       	ldd	r5, Z+38	; 0x26
    c5e4:	67 a0       	ldd	r6, Z+39	; 0x27
    c5e6:	70 a4       	ldd	r7, Z+40	; 0x28
    c5e8:	21 2c       	mov	r2, r1
    c5ea:	31 2c       	mov	r3, r1
    c5ec:	c1 2c       	mov	r12, r1
    c5ee:	d1 2c       	mov	r13, r1
    c5f0:	76 01       	movw	r14, r12
    c5f2:	21 14       	cp	r2, r1
    c5f4:	31 04       	cpc	r3, r1
    c5f6:	b1 f4       	brne	.+44     	; 0xc624 <f_getfree+0x122>
    c5f8:	d3 01       	movw	r26, r6
    c5fa:	c2 01       	movw	r24, r4
    c5fc:	01 96       	adiw	r24, 0x01	; 1
    c5fe:	a1 1d       	adc	r26, r1
    c600:	b1 1d       	adc	r27, r1
    c602:	8f 83       	std	Y+7, r24	; 0x07
    c604:	98 87       	std	Y+8, r25	; 0x08
    c606:	a9 87       	std	Y+9, r26	; 0x09
    c608:	ba 87       	std	Y+10, r27	; 0x0a
    c60a:	b3 01       	movw	r22, r6
    c60c:	a2 01       	movw	r20, r4
    c60e:	89 81       	ldd	r24, Y+1	; 0x01
    c610:	9a 81       	ldd	r25, Y+2	; 0x02
    c612:	0e 94 ba 49 	call	0x9374	; 0x9374 <move_window>
    c616:	00 97       	sbiw	r24, 0x00	; 0
    c618:	09 f0       	breq	.+2      	; 0xc61c <f_getfree+0x11a>
    c61a:	3d c0       	rjmp	.+122    	; 0xc696 <f_getfree+0x194>
    c61c:	4f 80       	ldd	r4, Y+7	; 0x07
    c61e:	58 84       	ldd	r5, Y+8	; 0x08
    c620:	69 84       	ldd	r6, Y+9	; 0x09
    c622:	7a 84       	ldd	r7, Y+10	; 0x0a
    c624:	e9 81       	ldd	r30, Y+1	; 0x01
    c626:	fa 81       	ldd	r31, Y+2	; 0x02
    c628:	80 81       	ld	r24, Z
    c62a:	82 30       	cpi	r24, 0x02	; 2
    c62c:	79 f4       	brne	.+30     	; 0xc64c <f_getfree+0x14a>
    c62e:	e2 0d       	add	r30, r2
    c630:	f3 1d       	adc	r31, r3
    c632:	85 a9       	ldd	r24, Z+53	; 0x35
    c634:	96 a9       	ldd	r25, Z+54	; 0x36
    c636:	89 2b       	or	r24, r25
    c638:	29 f4       	brne	.+10     	; 0xc644 <f_getfree+0x142>
    c63a:	9f ef       	ldi	r25, 0xFF	; 255
    c63c:	c9 1a       	sub	r12, r25
    c63e:	d9 0a       	sbc	r13, r25
    c640:	e9 0a       	sbc	r14, r25
    c642:	f9 0a       	sbc	r15, r25
    c644:	a2 e0       	ldi	r26, 0x02	; 2
    c646:	2a 0e       	add	r2, r26
    c648:	31 1c       	adc	r3, r1
    c64a:	15 c0       	rjmp	.+42     	; 0xc676 <f_getfree+0x174>
    c64c:	cf 01       	movw	r24, r30
    c64e:	c5 96       	adiw	r24, 0x35	; 53
    c650:	82 0d       	add	r24, r2
    c652:	93 1d       	adc	r25, r3
    c654:	0e 94 f8 45 	call	0x8bf0	; 0x8bf0 <ld_dword>
    c658:	dc 01       	movw	r26, r24
    c65a:	cb 01       	movw	r24, r22
    c65c:	bf 70       	andi	r27, 0x0F	; 15
    c65e:	89 2b       	or	r24, r25
    c660:	8a 2b       	or	r24, r26
    c662:	8b 2b       	or	r24, r27
    c664:	29 f4       	brne	.+10     	; 0xc670 <f_getfree+0x16e>
    c666:	bf ef       	ldi	r27, 0xFF	; 255
    c668:	cb 1a       	sub	r12, r27
    c66a:	db 0a       	sbc	r13, r27
    c66c:	eb 0a       	sbc	r14, r27
    c66e:	fb 0a       	sbc	r15, r27
    c670:	e4 e0       	ldi	r30, 0x04	; 4
    c672:	2e 0e       	add	r2, r30
    c674:	31 1c       	adc	r3, r1
    c676:	f1 e0       	ldi	r31, 0x01	; 1
    c678:	3f 22       	and	r3, r31
    c67a:	21 e0       	ldi	r18, 0x01	; 1
    c67c:	82 1a       	sub	r8, r18
    c67e:	91 08       	sbc	r9, r1
    c680:	a1 08       	sbc	r10, r1
    c682:	b1 08       	sbc	r11, r1
    c684:	09 f0       	breq	.+2      	; 0xc688 <f_getfree+0x186>
    c686:	b5 cf       	rjmp	.-150    	; 0xc5f2 <f_getfree+0xf0>
    c688:	07 c0       	rjmp	.+14     	; 0xc698 <f_getfree+0x196>
    c68a:	01 e0       	ldi	r16, 0x01	; 1
    c68c:	10 e0       	ldi	r17, 0x00	; 0
    c68e:	04 c0       	rjmp	.+8      	; 0xc698 <f_getfree+0x196>
    c690:	02 e0       	ldi	r16, 0x02	; 2
    c692:	10 e0       	ldi	r17, 0x00	; 0
    c694:	01 c0       	rjmp	.+2      	; 0xc698 <f_getfree+0x196>
    c696:	8c 01       	movw	r16, r24
    c698:	ad 81       	ldd	r26, Y+5	; 0x05
    c69a:	be 81       	ldd	r27, Y+6	; 0x06
    c69c:	cd 92       	st	X+, r12
    c69e:	dd 92       	st	X+, r13
    c6a0:	ed 92       	st	X+, r14
    c6a2:	fc 92       	st	X, r15
    c6a4:	13 97       	sbiw	r26, 0x03	; 3
    c6a6:	e9 81       	ldd	r30, Y+1	; 0x01
    c6a8:	fa 81       	ldd	r31, Y+2	; 0x02
    c6aa:	c1 8a       	std	Z+17, r12	; 0x11
    c6ac:	d2 8a       	std	Z+18, r13	; 0x12
    c6ae:	e3 8a       	std	Z+19, r14	; 0x13
    c6b0:	f4 8a       	std	Z+20, r15	; 0x14
    c6b2:	84 81       	ldd	r24, Z+4	; 0x04
    c6b4:	81 60       	ori	r24, 0x01	; 1
    c6b6:	84 83       	std	Z+4, r24	; 0x04
    c6b8:	c8 01       	movw	r24, r16
    c6ba:	2a 96       	adiw	r28, 0x0a	; 10
    c6bc:	e2 e1       	ldi	r30, 0x12	; 18
    c6be:	0c 94 25 e3 	jmp	0x1c64a	; 0x1c64a <__epilogue_restores__>

0000c6c2 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
    c6c2:	a0 e6       	ldi	r26, 0x60	; 96
    c6c4:	b0 e0       	ldi	r27, 0x00	; 0
    c6c6:	e7 e6       	ldi	r30, 0x67	; 103
    c6c8:	f3 e6       	ldi	r31, 0x63	; 99
    c6ca:	0c 94 10 e3 	jmp	0x1c620	; 0x1c620 <__prologue_saves__+0xe>
    c6ce:	a1 96       	adiw	r28, 0x21	; 33
    c6d0:	9f af       	std	Y+63, r25	; 0x3f
    c6d2:	8e af       	std	Y+62, r24	; 0x3e
    c6d4:	a1 97       	sbiw	r28, 0x21	; 33
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
    c6d6:	42 e0       	ldi	r20, 0x02	; 2
    c6d8:	be 01       	movw	r22, r28
    c6da:	63 5a       	subi	r22, 0xA3	; 163
    c6dc:	7f 4f       	sbci	r23, 0xFF	; 255
    c6de:	ce 01       	movw	r24, r28
    c6e0:	81 5a       	subi	r24, 0xA1	; 161
    c6e2:	9f 4f       	sbci	r25, 0xFF	; 255
    c6e4:	0e 94 35 4a 	call	0x946a	; 0x946a <mount_volume>
	if (res == FR_OK) {
    c6e8:	00 97       	sbiw	r24, 0x00	; 0
    c6ea:	09 f0       	breq	.+2      	; 0xc6ee <f_unlink+0x2c>
    c6ec:	8c c0       	rjmp	.+280    	; 0xc806 <f_unlink+0x144>
		dj.obj.fs = fs;
    c6ee:	6f 96       	adiw	r28, 0x1f	; 31
    c6f0:	8e ad       	ldd	r24, Y+62	; 0x3e
    c6f2:	9f ad       	ldd	r25, Y+63	; 0x3f
    c6f4:	6f 97       	sbiw	r28, 0x1f	; 31
    c6f6:	98 ab       	std	Y+48, r25	; 0x30
    c6f8:	8f a7       	std	Y+47, r24	; 0x2f
		INIT_NAMBUF(fs);
    c6fa:	80 e0       	ldi	r24, 0x00	; 0
    c6fc:	92 e0       	ldi	r25, 0x02	; 2
    c6fe:	b0 d3       	rcall	.+1888   	; 0xce60 <ff_memalloc>
    c700:	5c 01       	movw	r10, r24
    c702:	00 97       	sbiw	r24, 0x00	; 0
    c704:	09 f4       	brne	.+2      	; 0xc708 <f_unlink+0x46>
    c706:	49 c0       	rjmp	.+146    	; 0xc79a <f_unlink+0xd8>
    c708:	6f 96       	adiw	r28, 0x1f	; 31
    c70a:	ee ad       	ldd	r30, Y+62	; 0x3e
    c70c:	ff ad       	ldd	r31, Y+63	; 0x3f
    c70e:	6f 97       	sbiw	r28, 0x1f	; 31
    c710:	94 87       	std	Z+12, r25	; 0x0c
    c712:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);		/* Follow the file path */
    c714:	a1 96       	adiw	r28, 0x21	; 33
    c716:	6e ad       	ldd	r22, Y+62	; 0x3e
    c718:	7f ad       	ldd	r23, Y+63	; 0x3f
    c71a:	a1 97       	sbiw	r28, 0x21	; 33
    c71c:	ce 01       	movw	r24, r28
    c71e:	8f 96       	adiw	r24, 0x2f	; 47
    c720:	0e 94 82 55 	call	0xab04	; 0xab04 <follow_path>
    c724:	8c 01       	movw	r16, r24
		if (FF_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
    c726:	89 2b       	or	r24, r25
    c728:	a1 f5       	brne	.+104    	; 0xc792 <f_unlink+0xd0>
    c72a:	67 96       	adiw	r28, 0x17	; 23
    c72c:	8f ad       	ldd	r24, Y+63	; 0x3f
    c72e:	67 97       	sbiw	r28, 0x17	; 23
    c730:	85 fd       	sbrc	r24, 5
    c732:	36 c0       	rjmp	.+108    	; 0xc7a0 <f_unlink+0xde>
		}
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
    c734:	87 fd       	sbrc	r24, 7
    c736:	34 c0       	rjmp	.+104    	; 0xc7a0 <f_unlink+0xde>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
			} else {
				if (dj.obj.attr & AM_RDO) {
    c738:	9b a8       	ldd	r9, Y+51	; 0x33
    c73a:	90 fc       	sbrc	r9, 0
    c73c:	40 c0       	rjmp	.+128    	; 0xc7be <f_unlink+0xfc>
					init_alloc_info(fs, &obj);
					dclst = obj.sclust;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
    c73e:	6f 96       	adiw	r28, 0x1f	; 31
    c740:	0e ad       	ldd	r16, Y+62	; 0x3e
    c742:	1f ad       	ldd	r17, Y+63	; 0x3f
    c744:	6f 97       	sbiw	r28, 0x1f	; 31
    c746:	2b 96       	adiw	r28, 0x0b	; 11
    c748:	6e ad       	ldd	r22, Y+62	; 0x3e
    c74a:	7f ad       	ldd	r23, Y+63	; 0x3f
    c74c:	2b 97       	sbiw	r28, 0x0b	; 11
    c74e:	f8 01       	movw	r30, r16
    c750:	80 81       	ld	r24, Z
    c752:	0e 94 2b 48 	call	0x9056	; 0x9056 <ld_clust.isra.3>
    c756:	6b 01       	movw	r12, r22
    c758:	7c 01       	movw	r14, r24
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
    c75a:	94 fe       	sbrs	r9, 4
    c75c:	33 c0       	rjmp	.+102    	; 0xc7c4 <f_unlink+0x102>
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
    c75e:	f8 01       	movw	r30, r16
    c760:	85 89       	ldd	r24, Z+21	; 0x15
    c762:	96 89       	ldd	r25, Z+22	; 0x16
    c764:	a7 89       	ldd	r26, Z+23	; 0x17
    c766:	b0 8d       	ldd	r27, Z+24	; 0x18
    c768:	c8 16       	cp	r12, r24
    c76a:	d9 06       	cpc	r13, r25
    c76c:	ea 06       	cpc	r14, r26
    c76e:	fb 06       	cpc	r15, r27
    c770:	31 f1       	breq	.+76     	; 0xc7be <f_unlink+0xfc>
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;				/* Open the sub-directory */
    c772:	1a 83       	std	Y+2, r17	; 0x02
    c774:	09 83       	std	Y+1, r16	; 0x01
						sdj.obj.sclust = dclst;
    c776:	cf 82       	std	Y+7, r12	; 0x07
    c778:	d8 86       	std	Y+8, r13	; 0x08
    c77a:	e9 86       	std	Y+9, r14	; 0x09
    c77c:	fa 86       	std	Y+10, r15	; 0x0a
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
    c77e:	40 e0       	ldi	r20, 0x00	; 0
    c780:	50 e0       	ldi	r21, 0x00	; 0
    c782:	ba 01       	movw	r22, r20
    c784:	ce 01       	movw	r24, r28
    c786:	01 96       	adiw	r24, 0x01	; 1
    c788:	0e 94 3c 4e 	call	0x9c78	; 0x9c78 <dir_sdi>
    c78c:	8c 01       	movw	r16, r24
						if (res == FR_OK) {
    c78e:	89 2b       	or	r24, r25
    c790:	51 f0       	breq	.+20     	; 0xc7a6 <f_unlink+0xe4>
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    c792:	c5 01       	movw	r24, r10
    c794:	68 d3       	rcall	.+1744   	; 0xce66 <ff_memfree>
    c796:	c8 01       	movw	r24, r16
    c798:	36 c0       	rjmp	.+108    	; 0xc806 <f_unlink+0x144>

	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    c79a:	81 e1       	ldi	r24, 0x11	; 17
    c79c:	90 e0       	ldi	r25, 0x00	; 0
    c79e:	33 c0       	rjmp	.+102    	; 0xc806 <f_unlink+0x144>
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
    c7a0:	06 e0       	ldi	r16, 0x06	; 6
    c7a2:	10 e0       	ldi	r17, 0x00	; 0
    c7a4:	f6 cf       	rjmp	.-20     	; 0xc792 <f_unlink+0xd0>
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
						if (res == FR_OK) {
							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
    c7a6:	60 e0       	ldi	r22, 0x00	; 0
    c7a8:	70 e0       	ldi	r23, 0x00	; 0
    c7aa:	ce 01       	movw	r24, r28
    c7ac:	01 96       	adiw	r24, 0x01	; 1
    c7ae:	0e 94 d5 51 	call	0xa3aa	; 0xa3aa <dir_read>
    c7b2:	8c 01       	movw	r16, r24
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
    c7b4:	00 97       	sbiw	r24, 0x00	; 0
    c7b6:	19 f0       	breq	.+6      	; 0xc7be <f_unlink+0xfc>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
    c7b8:	04 97       	sbiw	r24, 0x04	; 4
    c7ba:	21 f0       	breq	.+8      	; 0xc7c4 <f_unlink+0x102>
    c7bc:	ea cf       	rjmp	.-44     	; 0xc792 <f_unlink+0xd0>
					dclst = ld_clust(fs, dj.dir);
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
						res = FR_DENIED;
    c7be:	07 e0       	ldi	r16, 0x07	; 7
    c7c0:	10 e0       	ldi	r17, 0x00	; 0
    c7c2:	e7 cf       	rjmp	.-50     	; 0xc792 <f_unlink+0xd0>
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);			/* Remove the directory entry */
    c7c4:	ce 01       	movw	r24, r28
    c7c6:	8f 96       	adiw	r24, 0x2f	; 47
    c7c8:	0e 94 9e 52 	call	0xa53c	; 0xa53c <dir_remove>
    c7cc:	8c 01       	movw	r16, r24
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
    c7ce:	89 2b       	or	r24, r25
    c7d0:	01 f7       	brne	.-64     	; 0xc792 <f_unlink+0xd0>
    c7d2:	c1 14       	cp	r12, r1
    c7d4:	d1 04       	cpc	r13, r1
    c7d6:	e1 04       	cpc	r14, r1
    c7d8:	f1 04       	cpc	r15, r1
    c7da:	41 f4       	brne	.+16     	; 0xc7ec <f_unlink+0x12a>
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    c7dc:	6f 96       	adiw	r28, 0x1f	; 31
    c7de:	8e ad       	ldd	r24, Y+62	; 0x3e
    c7e0:	9f ad       	ldd	r25, Y+63	; 0x3f
    c7e2:	6f 97       	sbiw	r28, 0x1f	; 31
    c7e4:	0e 94 a0 48 	call	0x9140	; 0x9140 <sync_fs>
    c7e8:	8c 01       	movw	r16, r24
    c7ea:	d3 cf       	rjmp	.-90     	; 0xc792 <f_unlink+0xd0>
				res = dir_remove(&dj);			/* Remove the directory entry */
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
#if FF_FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
    c7ec:	00 e0       	ldi	r16, 0x00	; 0
    c7ee:	10 e0       	ldi	r17, 0x00	; 0
    c7f0:	98 01       	movw	r18, r16
    c7f2:	b7 01       	movw	r22, r14
    c7f4:	a6 01       	movw	r20, r12
    c7f6:	ce 01       	movw	r24, r28
    c7f8:	8f 96       	adiw	r24, 0x2f	; 47
    c7fa:	0e 94 23 50 	call	0xa046	; 0xa046 <remove_chain>
    c7fe:	8c 01       	movw	r16, r24
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    c800:	89 2b       	or	r24, r25
    c802:	39 f6       	brne	.-114    	; 0xc792 <f_unlink+0xd0>
    c804:	eb cf       	rjmp	.-42     	; 0xc7dc <f_unlink+0x11a>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    c806:	c0 5a       	subi	r28, 0xA0	; 160
    c808:	df 4f       	sbci	r29, 0xFF	; 255
    c80a:	eb e0       	ldi	r30, 0x0B	; 11
    c80c:	0c 94 2c e3 	jmp	0x1c658	; 0x1c658 <__epilogue_restores__+0xe>

0000c810 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
    c810:	a0 e4       	ldi	r26, 0x40	; 64
    c812:	b0 e0       	ldi	r27, 0x00	; 0
    c814:	ee e0       	ldi	r30, 0x0E	; 14
    c816:	f4 e6       	ldi	r31, 0x64	; 100
    c818:	0c 94 0b e3 	jmp	0x1c616	; 0x1c616 <__prologue_saves__+0x4>
    c81c:	21 96       	adiw	r28, 0x01	; 1
    c81e:	9f af       	std	Y+63, r25	; 0x3f
    c820:	8e af       	std	Y+62, r24	; 0x3e
    c822:	21 97       	sbiw	r28, 0x01	; 1
	FATFS *fs;
	DWORD dcl, pcl, tm;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    c824:	42 e0       	ldi	r20, 0x02	; 2
    c826:	be 01       	movw	r22, r28
    c828:	63 5c       	subi	r22, 0xC3	; 195
    c82a:	7f 4f       	sbci	r23, 0xFF	; 255
    c82c:	ce 01       	movw	r24, r28
    c82e:	cf 96       	adiw	r24, 0x3f	; 63
    c830:	0e 94 35 4a 	call	0x946a	; 0x946a <mount_volume>
	if (res == FR_OK) {
    c834:	00 97       	sbiw	r24, 0x00	; 0
    c836:	09 f0       	breq	.+2      	; 0xc83a <f_mkdir+0x2a>
    c838:	d6 c0       	rjmp	.+428    	; 0xc9e6 <f_mkdir+0x1d6>
		dj.obj.fs = fs;
    c83a:	8d ad       	ldd	r24, Y+61	; 0x3d
    c83c:	9e ad       	ldd	r25, Y+62	; 0x3e
    c83e:	9a 83       	std	Y+2, r25	; 0x02
    c840:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    c842:	80 e0       	ldi	r24, 0x00	; 0
    c844:	92 e0       	ldi	r25, 0x02	; 2
    c846:	0c d3       	rcall	.+1560   	; 0xce60 <ff_memalloc>
    c848:	6c 01       	movw	r12, r24
    c84a:	00 97       	sbiw	r24, 0x00	; 0
    c84c:	e9 f0       	breq	.+58     	; 0xc888 <f_mkdir+0x78>
    c84e:	ed ad       	ldd	r30, Y+61	; 0x3d
    c850:	fe ad       	ldd	r31, Y+62	; 0x3e
    c852:	94 87       	std	Z+12, r25	; 0x0c
    c854:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);			/* Follow the file path */
    c856:	21 96       	adiw	r28, 0x01	; 1
    c858:	6e ad       	ldd	r22, Y+62	; 0x3e
    c85a:	7f ad       	ldd	r23, Y+63	; 0x3f
    c85c:	21 97       	sbiw	r28, 0x01	; 1
    c85e:	ce 01       	movw	r24, r28
    c860:	01 96       	adiw	r24, 0x01	; 1
    c862:	0e 94 82 55 	call	0xab04	; 0xab04 <follow_path>
    c866:	7c 01       	movw	r14, r24
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    c868:	89 2b       	or	r24, r25
    c86a:	89 f0       	breq	.+34     	; 0xc88e <f_mkdir+0x7e>
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
    c86c:	84 e0       	ldi	r24, 0x04	; 4
    c86e:	e8 16       	cp	r14, r24
    c870:	f1 04       	cpc	r15, r1
    c872:	31 f4       	brne	.+12     	; 0xc880 <f_mkdir+0x70>
    c874:	88 a5       	ldd	r24, Y+40	; 0x28
    c876:	85 ff       	sbrs	r24, 5
    c878:	0e c0       	rjmp	.+28     	; 0xc896 <f_mkdir+0x86>
			res = FR_INVALID_NAME;
    c87a:	26 e0       	ldi	r18, 0x06	; 6
    c87c:	e2 2e       	mov	r14, r18
    c87e:	f1 2c       	mov	r15, r1
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
			}
		}
		FREE_NAMBUF();
    c880:	c6 01       	movw	r24, r12
    c882:	f1 d2       	rcall	.+1506   	; 0xce66 <ff_memfree>
    c884:	c7 01       	movw	r24, r14
    c886:	af c0       	rjmp	.+350    	; 0xc9e6 <f_mkdir+0x1d6>


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    c888:	81 e1       	ldi	r24, 0x11	; 17
    c88a:	90 e0       	ldi	r25, 0x00	; 0
    c88c:	ac c0       	rjmp	.+344    	; 0xc9e6 <f_mkdir+0x1d6>
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    c88e:	38 e0       	ldi	r19, 0x08	; 8
    c890:	e3 2e       	mov	r14, r19
    c892:	f1 2c       	mov	r15, r1
    c894:	f5 cf       	rjmp	.-22     	; 0xc880 <f_mkdir+0x70>
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
    c896:	8d ad       	ldd	r24, Y+61	; 0x3d
    c898:	9e ad       	ldd	r25, Y+62	; 0x3e
    c89a:	98 ab       	std	Y+48, r25	; 0x30
    c89c:	8f a7       	std	Y+47, r24	; 0x2f
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
    c89e:	40 e0       	ldi	r20, 0x00	; 0
    c8a0:	50 e0       	ldi	r21, 0x00	; 0
    c8a2:	ba 01       	movw	r22, r20
    c8a4:	ce 01       	movw	r24, r28
    c8a6:	8f 96       	adiw	r24, 0x2f	; 47
    c8a8:	0e 94 fd 4e 	call	0x9dfa	; 0x9dfa <create_chain>
    c8ac:	4b 01       	movw	r8, r22
    c8ae:	5c 01       	movw	r10, r24
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    c8b0:	67 2b       	or	r22, r23
    c8b2:	68 2b       	or	r22, r24
    c8b4:	69 2b       	or	r22, r25
    c8b6:	09 f1       	breq	.+66     	; 0xc8fa <f_mkdir+0xea>
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    c8b8:	e1 e0       	ldi	r30, 0x01	; 1
    c8ba:	8e 16       	cp	r8, r30
    c8bc:	91 04       	cpc	r9, r1
    c8be:	a1 04       	cpc	r10, r1
    c8c0:	b1 04       	cpc	r11, r1
    c8c2:	61 f0       	breq	.+24     	; 0xc8dc <f_mkdir+0xcc>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
    c8c4:	ff ef       	ldi	r31, 0xFF	; 255
    c8c6:	8f 16       	cp	r8, r31
    c8c8:	9f 06       	cpc	r9, r31
    c8ca:	af 06       	cpc	r10, r31
    c8cc:	bf 06       	cpc	r11, r31
    c8ce:	d9 f4       	brne	.+54     	; 0xc906 <f_mkdir+0xf6>
			tm = GET_FATTIME();
    c8d0:	0e 94 a1 6e 	call	0xdd42	; 0xdd42 <get_fattime>
    c8d4:	ee 24       	eor	r14, r14
    c8d6:	e3 94       	inc	r14
    c8d8:	f1 2c       	mov	r15, r1
    c8da:	05 c0       	rjmp	.+10     	; 0xc8e6 <f_mkdir+0xd6>
    c8dc:	0e 94 a1 6e 	call	0xdd42	; 0xdd42 <get_fattime>
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    c8e0:	92 e0       	ldi	r25, 0x02	; 2
    c8e2:	e9 2e       	mov	r14, r25
    c8e4:	f1 2c       	mov	r15, r1
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
    c8e6:	00 e0       	ldi	r16, 0x00	; 0
    c8e8:	10 e0       	ldi	r17, 0x00	; 0
    c8ea:	98 01       	movw	r18, r16
    c8ec:	b5 01       	movw	r22, r10
    c8ee:	a4 01       	movw	r20, r8
    c8f0:	ce 01       	movw	r24, r28
    c8f2:	8f 96       	adiw	r24, 0x2f	; 47
    c8f4:	0e 94 23 50 	call	0xa046	; 0xa046 <remove_chain>
    c8f8:	c3 cf       	rjmp	.-122    	; 0xc880 <f_mkdir+0x70>
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
			tm = GET_FATTIME();
    c8fa:	0e 94 a1 6e 	call	0xdd42	; 0xdd42 <get_fattime>
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    c8fe:	87 e0       	ldi	r24, 0x07	; 7
    c900:	e8 2e       	mov	r14, r24
    c902:	f1 2c       	mov	r15, r1
    c904:	f0 cf       	rjmp	.-32     	; 0xc8e6 <f_mkdir+0xd6>
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
			tm = GET_FATTIME();
    c906:	0e 94 a1 6e 	call	0xdd42	; 0xdd42 <get_fattime>
    c90a:	2b 01       	movw	r4, r22
    c90c:	3c 01       	movw	r6, r24
			if (res == FR_OK) {
				res = dir_clear(fs, dcl);		/* Clean up the new table */
    c90e:	b5 01       	movw	r22, r10
    c910:	a4 01       	movw	r20, r8
    c912:	8d ad       	ldd	r24, Y+61	; 0x3d
    c914:	9e ad       	ldd	r25, Y+62	; 0x3e
    c916:	0e 94 12 49 	call	0x9224	; 0x9224 <dir_clear>
    c91a:	7c 01       	movw	r14, r24
				if (res == FR_OK) {
    c91c:	89 2b       	or	r24, r25
    c91e:	19 f7       	brne	.-58     	; 0xc8e6 <f_mkdir+0xd6>
					if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* Create dot entries (FAT only) */
						mem_set(fs->win + DIR_Name, ' ', 11);	/* Create "." entry */
    c920:	8d ad       	ldd	r24, Y+61	; 0x3d
    c922:	9e ad       	ldd	r25, Y+62	; 0x3e
    c924:	4b e0       	ldi	r20, 0x0B	; 11
    c926:	50 e0       	ldi	r21, 0x00	; 0
    c928:	60 e2       	ldi	r22, 0x20	; 32
    c92a:	70 e0       	ldi	r23, 0x00	; 0
    c92c:	c5 96       	adiw	r24, 0x35	; 53
    c92e:	0e 94 13 46 	call	0x8c26	; 0x8c26 <mem_set>
						fs->win[DIR_Name] = '.';
    c932:	8d ad       	ldd	r24, Y+61	; 0x3d
    c934:	9e ad       	ldd	r25, Y+62	; 0x3e
    c936:	1e e2       	ldi	r17, 0x2E	; 46
    c938:	fc 01       	movw	r30, r24
    c93a:	15 ab       	std	Z+53, r17	; 0x35
						fs->win[DIR_Attr] = AM_DIR;
    c93c:	e0 5c       	subi	r30, 0xC0	; 192
    c93e:	ff 4f       	sbci	r31, 0xFF	; 255
    c940:	20 e1       	ldi	r18, 0x10	; 16
    c942:	20 83       	st	Z, r18
						st_dword(fs->win + DIR_ModTime, tm);
    c944:	b3 01       	movw	r22, r6
    c946:	a2 01       	movw	r20, r4
    c948:	85 5b       	subi	r24, 0xB5	; 181
    c94a:	9f 4f       	sbci	r25, 0xFF	; 255
    c94c:	0e 94 0d 46 	call	0x8c1a	; 0x8c1a <st_dword>
						st_clust(fs, fs->win, dcl);
    c950:	8d ad       	ldd	r24, Y+61	; 0x3d
    c952:	9e ad       	ldd	r25, Y+62	; 0x3e
    c954:	bc 01       	movw	r22, r24
    c956:	6b 5c       	subi	r22, 0xCB	; 203
    c958:	7f 4f       	sbci	r23, 0xFF	; 255
    c95a:	a5 01       	movw	r20, r10
    c95c:	94 01       	movw	r18, r8
    c95e:	0e 94 40 48 	call	0x9080	; 0x9080 <st_clust.isra.4>
						mem_cpy(fs->win + SZDIRE, fs->win, SZDIRE); /* Create ".." entry */
    c962:	8d ad       	ldd	r24, Y+61	; 0x3d
    c964:	9e ad       	ldd	r25, Y+62	; 0x3e
    c966:	bc 01       	movw	r22, r24
    c968:	6b 5c       	subi	r22, 0xCB	; 203
    c96a:	7f 4f       	sbci	r23, 0xFF	; 255
    c96c:	40 e2       	ldi	r20, 0x20	; 32
    c96e:	50 e0       	ldi	r21, 0x00	; 0
    c970:	8b 5a       	subi	r24, 0xAB	; 171
    c972:	9f 4f       	sbci	r25, 0xFF	; 255
    c974:	0e 94 20 48 	call	0x9040	; 0x9040 <mem_cpy.part.0>
						fs->win[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
    c978:	8d ad       	ldd	r24, Y+61	; 0x3d
    c97a:	9e ad       	ldd	r25, Y+62	; 0x3e
    c97c:	fc 01       	movw	r30, r24
    c97e:	ea 5a       	subi	r30, 0xAA	; 170
    c980:	ff 4f       	sbci	r31, 0xFF	; 255
    c982:	10 83       	st	Z, r17
						st_clust(fs, fs->win + SZDIRE, pcl);
    c984:	2f 81       	ldd	r18, Y+7	; 0x07
    c986:	38 85       	ldd	r19, Y+8	; 0x08
    c988:	49 85       	ldd	r20, Y+9	; 0x09
    c98a:	5a 85       	ldd	r21, Y+10	; 0x0a
    c98c:	bc 01       	movw	r22, r24
    c98e:	6b 5a       	subi	r22, 0xAB	; 171
    c990:	7f 4f       	sbci	r23, 0xFF	; 255
    c992:	0e 94 40 48 	call	0x9080	; 0x9080 <st_clust.isra.4>
						fs->wflag = 1;
    c996:	ed ad       	ldd	r30, Y+61	; 0x3d
    c998:	fe ad       	ldd	r31, Y+62	; 0x3e
    c99a:	81 e0       	ldi	r24, 0x01	; 1
    c99c:	83 83       	std	Z+3, r24	; 0x03
					}
					res = dir_register(&dj);	/* Register the object to the parent directoy */
    c99e:	ce 01       	movw	r24, r28
    c9a0:	01 96       	adiw	r24, 0x01	; 1
    c9a2:	0e 94 f4 53 	call	0xa7e8	; 0xa7e8 <dir_register>
    c9a6:	7c 01       	movw	r14, r24
				}
			}
			if (res == FR_OK) {
    c9a8:	89 2b       	or	r24, r25
    c9aa:	09 f0       	breq	.+2      	; 0xc9ae <f_mkdir+0x19e>
    c9ac:	9c cf       	rjmp	.-200    	; 0xc8e6 <f_mkdir+0xd6>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					st_dword(dj.dir + DIR_ModTime, tm);	/* Created time */
    c9ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    c9b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    c9b2:	b3 01       	movw	r22, r6
    c9b4:	a2 01       	movw	r20, r4
    c9b6:	46 96       	adiw	r24, 0x16	; 22
    c9b8:	0e 94 0d 46 	call	0x8c1a	; 0x8c1a <st_dword>
					st_clust(fs, dj.dir, dcl);			/* Table start cluster */
    c9bc:	6b 8d       	ldd	r22, Y+27	; 0x1b
    c9be:	7c 8d       	ldd	r23, Y+28	; 0x1c
    c9c0:	a5 01       	movw	r20, r10
    c9c2:	94 01       	movw	r18, r8
    c9c4:	8d ad       	ldd	r24, Y+61	; 0x3d
    c9c6:	9e ad       	ldd	r25, Y+62	; 0x3e
    c9c8:	0e 94 40 48 	call	0x9080	; 0x9080 <st_clust.isra.4>
					dj.dir[DIR_Attr] = AM_DIR;			/* Attribute */
    c9cc:	eb 8d       	ldd	r30, Y+27	; 0x1b
    c9ce:	fc 8d       	ldd	r31, Y+28	; 0x1c
    c9d0:	80 e1       	ldi	r24, 0x10	; 16
    c9d2:	83 87       	std	Z+11, r24	; 0x0b
					fs->wflag = 1;
    c9d4:	8d ad       	ldd	r24, Y+61	; 0x3d
    c9d6:	9e ad       	ldd	r25, Y+62	; 0x3e
    c9d8:	21 e0       	ldi	r18, 0x01	; 1
    c9da:	fc 01       	movw	r30, r24
    c9dc:	23 83       	std	Z+3, r18	; 0x03
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
    c9de:	0e 94 a0 48 	call	0x9140	; 0x9140 <sync_fs>
    c9e2:	7c 01       	movw	r14, r24
    c9e4:	4d cf       	rjmp	.-358    	; 0xc880 <f_mkdir+0x70>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    c9e6:	c0 5c       	subi	r28, 0xC0	; 192
    c9e8:	df 4f       	sbci	r29, 0xFF	; 255
    c9ea:	e0 e1       	ldi	r30, 0x10	; 16
    c9ec:	0c 94 27 e3 	jmp	0x1c64e	; 0x1c64e <__epilogue_restores__+0x4>

0000c9f0 <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
    c9f0:	a2 e8       	ldi	r26, 0x82	; 130
    c9f2:	b0 e0       	ldi	r27, 0x00	; 0
    c9f4:	ee ef       	ldi	r30, 0xFE	; 254
    c9f6:	f4 e6       	ldi	r31, 0x64	; 100
    c9f8:	0c 94 12 e3 	jmp	0x1c624	; 0x1c624 <__prologue_saves__+0x12>
    c9fc:	c1 58       	subi	r28, 0x81	; 129
    c9fe:	df 4f       	sbci	r29, 0xFF	; 255
    ca00:	99 83       	std	Y+1, r25	; 0x01
    ca02:	88 83       	st	Y, r24
    ca04:	cf 57       	subi	r28, 0x7F	; 127
    ca06:	d0 40       	sbci	r29, 0x00	; 0
    ca08:	cf 57       	subi	r28, 0x7F	; 127
    ca0a:	df 4f       	sbci	r29, 0xFF	; 255
    ca0c:	79 83       	std	Y+1, r23	; 0x01
    ca0e:	68 83       	st	Y, r22
    ca10:	c1 58       	subi	r28, 0x81	; 129
    ca12:	d0 40       	sbci	r29, 0x00	; 0
	BYTE buf[FF_FS_EXFAT ? SZDIRE * 2 : SZDIRE], *dir;
	LBA_t sect;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
    ca14:	ce 01       	movw	r24, r28
    ca16:	8f 57       	subi	r24, 0x7F	; 127
    ca18:	9f 4f       	sbci	r25, 0xFF	; 255
    ca1a:	0e 94 9e 46 	call	0x8d3c	; 0x8d3c <get_ldnumber>
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
    ca1e:	42 e0       	ldi	r20, 0x02	; 2
    ca20:	be 01       	movw	r22, r28
    ca22:	63 58       	subi	r22, 0x83	; 131
    ca24:	7f 4f       	sbci	r23, 0xFF	; 255
    ca26:	ce 01       	movw	r24, r28
    ca28:	81 58       	subi	r24, 0x81	; 129
    ca2a:	9f 4f       	sbci	r25, 0xFF	; 255
    ca2c:	0e 94 35 4a 	call	0x946a	; 0x946a <mount_volume>
	if (res == FR_OK) {
    ca30:	00 97       	sbiw	r24, 0x00	; 0
    ca32:	09 f0       	breq	.+2      	; 0xca36 <f_rename+0x46>
    ca34:	ed c0       	rjmp	.+474    	; 0xcc10 <f_rename+0x220>
		djo.obj.fs = fs;
    ca36:	ef 96       	adiw	r28, 0x3f	; 63
    ca38:	8e ad       	ldd	r24, Y+62	; 0x3e
    ca3a:	9f ad       	ldd	r25, Y+63	; 0x3f
    ca3c:	ef 97       	sbiw	r28, 0x3f	; 63
    ca3e:	98 ab       	std	Y+48, r25	; 0x30
    ca40:	8f a7       	std	Y+47, r24	; 0x2f
		INIT_NAMBUF(fs);
    ca42:	80 e0       	ldi	r24, 0x00	; 0
    ca44:	92 e0       	ldi	r25, 0x02	; 2
    ca46:	0c d2       	rcall	.+1048   	; 0xce60 <ff_memalloc>
    ca48:	6c 01       	movw	r12, r24
    ca4a:	00 97       	sbiw	r24, 0x00	; 0
    ca4c:	f1 f0       	breq	.+60     	; 0xca8a <f_rename+0x9a>
    ca4e:	ef 96       	adiw	r28, 0x3f	; 63
    ca50:	ee ad       	ldd	r30, Y+62	; 0x3e
    ca52:	ff ad       	ldd	r31, Y+63	; 0x3f
    ca54:	ef 97       	sbiw	r28, 0x3f	; 63
    ca56:	94 87       	std	Z+12, r25	; 0x0c
    ca58:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&djo, path_old);		/* Check old object */
    ca5a:	c1 58       	subi	r28, 0x81	; 129
    ca5c:	df 4f       	sbci	r29, 0xFF	; 255
    ca5e:	68 81       	ld	r22, Y
    ca60:	79 81       	ldd	r23, Y+1	; 0x01
    ca62:	cf 57       	subi	r28, 0x7F	; 127
    ca64:	d0 40       	sbci	r29, 0x00	; 0
    ca66:	ce 01       	movw	r24, r28
    ca68:	8f 96       	adiw	r24, 0x2f	; 47
    ca6a:	0e 94 82 55 	call	0xab04	; 0xab04 <follow_path>
    ca6e:	8c 01       	movw	r16, r24
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
    ca70:	89 2b       	or	r24, r25
    ca72:	39 f4       	brne	.+14     	; 0xca82 <f_rename+0x92>
    ca74:	67 96       	adiw	r28, 0x17	; 23
    ca76:	8f ad       	ldd	r24, Y+63	; 0x3f
    ca78:	67 97       	sbiw	r28, 0x17	; 23
    ca7a:	80 7a       	andi	r24, 0xA0	; 160
    ca7c:	49 f0       	breq	.+18     	; 0xca90 <f_rename+0xa0>
    ca7e:	06 e0       	ldi	r16, 0x06	; 6
    ca80:	10 e0       	ldi	r17, 0x00	; 0
					res = sync_fs(fs);
				}
			}
/* End of the critical section */
		}
		FREE_NAMBUF();
    ca82:	c6 01       	movw	r24, r12
    ca84:	f0 d1       	rcall	.+992    	; 0xce66 <ff_memfree>
    ca86:	c8 01       	movw	r24, r16
    ca88:	c3 c0       	rjmp	.+390    	; 0xcc10 <f_rename+0x220>

	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
	if (res == FR_OK) {
		djo.obj.fs = fs;
		INIT_NAMBUF(fs);
    ca8a:	81 e1       	ldi	r24, 0x11	; 17
    ca8c:	90 e0       	ldi	r25, 0x00	; 0
    ca8e:	c0 c0       	rjmp	.+384    	; 0xcc10 <f_rename+0x220>
    ca90:	2b 96       	adiw	r28, 0x0b	; 11
    ca92:	6e ad       	ldd	r22, Y+62	; 0x3e
    ca94:	7f ad       	ldd	r23, Y+63	; 0x3f
    ca96:	2b 97       	sbiw	r28, 0x0b	; 11
    ca98:	40 e2       	ldi	r20, 0x20	; 32
    ca9a:	50 e0       	ldi	r21, 0x00	; 0
    ca9c:	ce 01       	movw	r24, r28
    ca9e:	83 5a       	subi	r24, 0xA3	; 163
    caa0:	9f 4f       	sbci	r25, 0xFF	; 255
    caa2:	0e 94 20 48 	call	0x9040	; 0x9040 <mem_cpy.part.0>
    caa6:	4e e2       	ldi	r20, 0x2E	; 46
    caa8:	50 e0       	ldi	r21, 0x00	; 0
    caaa:	be 01       	movw	r22, r28
    caac:	61 5d       	subi	r22, 0xD1	; 209
    caae:	7f 4f       	sbci	r23, 0xFF	; 255
    cab0:	ce 01       	movw	r24, r28
    cab2:	01 96       	adiw	r24, 0x01	; 1
    cab4:	0e 94 20 48 	call	0x9040	; 0x9040 <mem_cpy.part.0>
			} else
#endif
			{	/* At FAT/FAT32 volume */
				mem_cpy(buf, djo.dir, SZDIRE);			/* Save directory entry of the object */
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
    cab8:	cf 57       	subi	r28, 0x7F	; 127
    caba:	df 4f       	sbci	r29, 0xFF	; 255
    cabc:	68 81       	ld	r22, Y
    cabe:	79 81       	ldd	r23, Y+1	; 0x01
    cac0:	c1 58       	subi	r28, 0x81	; 129
    cac2:	d0 40       	sbci	r29, 0x00	; 0
    cac4:	ce 01       	movw	r24, r28
    cac6:	01 96       	adiw	r24, 0x01	; 1
    cac8:	0e 94 82 55 	call	0xab04	; 0xab04 <follow_path>
    cacc:	8c 01       	movw	r16, r24
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
    cace:	89 2b       	or	r24, r25
    cad0:	f9 f4       	brne	.+62     	; 0xcb10 <f_rename+0x120>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
    cad2:	4f 81       	ldd	r20, Y+7	; 0x07
    cad4:	58 85       	ldd	r21, Y+8	; 0x08
    cad6:	69 85       	ldd	r22, Y+9	; 0x09
    cad8:	7a 85       	ldd	r23, Y+10	; 0x0a
    cada:	8d a9       	ldd	r24, Y+53	; 0x35
    cadc:	9e a9       	ldd	r25, Y+54	; 0x36
    cade:	af a9       	ldd	r26, Y+55	; 0x37
    cae0:	b8 ad       	ldd	r27, Y+56	; 0x38
    cae2:	48 17       	cp	r20, r24
    cae4:	59 07       	cpc	r21, r25
    cae6:	6a 07       	cpc	r22, r26
    cae8:	7b 07       	cpc	r23, r27
    caea:	09 f0       	breq	.+2      	; 0xcaee <f_rename+0xfe>
    caec:	8b c0       	rjmp	.+278    	; 0xcc04 <f_rename+0x214>
    caee:	4f 85       	ldd	r20, Y+15	; 0x0f
    caf0:	58 89       	ldd	r21, Y+16	; 0x10
    caf2:	69 89       	ldd	r22, Y+17	; 0x11
    caf4:	7a 89       	ldd	r23, Y+18	; 0x12
    caf6:	21 96       	adiw	r28, 0x01	; 1
    caf8:	8c ad       	ldd	r24, Y+60	; 0x3c
    cafa:	9d ad       	ldd	r25, Y+61	; 0x3d
    cafc:	ae ad       	ldd	r26, Y+62	; 0x3e
    cafe:	bf ad       	ldd	r27, Y+63	; 0x3f
    cb00:	21 97       	sbiw	r28, 0x01	; 1
    cb02:	48 17       	cp	r20, r24
    cb04:	59 07       	cpc	r21, r25
    cb06:	6a 07       	cpc	r22, r26
    cb08:	7b 07       	cpc	r23, r27
    cb0a:	09 f0       	breq	.+2      	; 0xcb0e <f_rename+0x11e>
    cb0c:	7b c0       	rjmp	.+246    	; 0xcc04 <f_rename+0x214>
    cb0e:	04 c0       	rjmp	.+8      	; 0xcb18 <f_rename+0x128>
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
    cb10:	04 30       	cpi	r16, 0x04	; 4
    cb12:	11 05       	cpc	r17, r1
    cb14:	09 f0       	breq	.+2      	; 0xcb18 <f_rename+0x128>
    cb16:	b5 cf       	rjmp	.-150    	; 0xca82 <f_rename+0x92>
					res = dir_register(&djn);			/* Register the new entry */
    cb18:	ce 01       	movw	r24, r28
    cb1a:	01 96       	adiw	r24, 0x01	; 1
    cb1c:	0e 94 f4 53 	call	0xa7e8	; 0xa7e8 <dir_register>
    cb20:	8c 01       	movw	r16, r24
					if (res == FR_OK) {
    cb22:	89 2b       	or	r24, r25
    cb24:	09 f0       	breq	.+2      	; 0xcb28 <f_rename+0x138>
    cb26:	ad cf       	rjmp	.-166    	; 0xca82 <f_rename+0x92>
						dir = djn.dir;					/* Copy directory entry of the object except name */
    cb28:	0b 8d       	ldd	r16, Y+27	; 0x1b
    cb2a:	1c 8d       	ldd	r17, Y+28	; 0x1c
    cb2c:	6d e5       	ldi	r22, 0x5D	; 93
    cb2e:	70 e0       	ldi	r23, 0x00	; 0
    cb30:	6c 0f       	add	r22, r28
    cb32:	7d 1f       	adc	r23, r29
    cb34:	63 5f       	subi	r22, 0xF3	; 243
    cb36:	7f 4f       	sbci	r23, 0xFF	; 255
    cb38:	43 e1       	ldi	r20, 0x13	; 19
    cb3a:	50 e0       	ldi	r21, 0x00	; 0
    cb3c:	c8 01       	movw	r24, r16
    cb3e:	0d 96       	adiw	r24, 0x0d	; 13
    cb40:	0e 94 20 48 	call	0x9040	; 0x9040 <mem_cpy.part.0>
						mem_cpy(dir + 13, buf + 13, SZDIRE - 13);
						dir[DIR_Attr] = buf[DIR_Attr];
    cb44:	a9 96       	adiw	r28, 0x29	; 41
    cb46:	8f ad       	ldd	r24, Y+63	; 0x3f
    cb48:	a9 97       	sbiw	r28, 0x29	; 41
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
    cb4a:	84 ff       	sbrs	r24, 4
    cb4c:	80 62       	ori	r24, 0x20	; 32
    cb4e:	f8 01       	movw	r30, r16
    cb50:	83 87       	std	Z+11, r24	; 0x0b
						fs->wflag = 1;
    cb52:	ef 96       	adiw	r28, 0x3f	; 63
    cb54:	ee ac       	ldd	r14, Y+62	; 0x3e
    cb56:	ff ac       	ldd	r15, Y+63	; 0x3f
    cb58:	ef 97       	sbiw	r28, 0x3f	; 63
    cb5a:	bb 24       	eor	r11, r11
    cb5c:	b3 94       	inc	r11
    cb5e:	f7 01       	movw	r30, r14
    cb60:	b3 82       	std	Z+3, r11	; 0x03
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
    cb62:	f8 01       	movw	r30, r16
    cb64:	83 85       	ldd	r24, Z+11	; 0x0b
    cb66:	84 ff       	sbrs	r24, 4
    cb68:	3d c0       	rjmp	.+122    	; 0xcbe4 <f_rename+0x1f4>
    cb6a:	4d a9       	ldd	r20, Y+53	; 0x35
    cb6c:	5e a9       	ldd	r21, Y+54	; 0x36
    cb6e:	6f a9       	ldd	r22, Y+55	; 0x37
    cb70:	78 ad       	ldd	r23, Y+56	; 0x38
    cb72:	8f 81       	ldd	r24, Y+7	; 0x07
    cb74:	98 85       	ldd	r25, Y+8	; 0x08
    cb76:	a9 85       	ldd	r26, Y+9	; 0x09
    cb78:	ba 85       	ldd	r27, Y+10	; 0x0a
    cb7a:	48 17       	cp	r20, r24
    cb7c:	59 07       	cpc	r21, r25
    cb7e:	6a 07       	cpc	r22, r26
    cb80:	7b 07       	cpc	r23, r27
    cb82:	81 f1       	breq	.+96     	; 0xcbe4 <f_rename+0x1f4>
							sect = clst2sect(fs, ld_clust(fs, dir));
    cb84:	b8 01       	movw	r22, r16
    cb86:	f7 01       	movw	r30, r14
    cb88:	80 81       	ld	r24, Z
    cb8a:	0e 94 2b 48 	call	0x9056	; 0x9056 <ld_clust.isra.3>
    cb8e:	ab 01       	movw	r20, r22
    cb90:	bc 01       	movw	r22, r24
    cb92:	c7 01       	movw	r24, r14
    cb94:	0e 94 2b 46 	call	0x8c56	; 0x8c56 <clst2sect>
    cb98:	ab 01       	movw	r20, r22
    cb9a:	bc 01       	movw	r22, r24
							if (sect == 0) {
    cb9c:	41 15       	cp	r20, r1
    cb9e:	51 05       	cpc	r21, r1
    cba0:	61 05       	cpc	r22, r1
    cba2:	71 05       	cpc	r23, r1
    cba4:	91 f1       	breq	.+100    	; 0xcc0a <f_rename+0x21a>
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
    cba6:	c7 01       	movw	r24, r14
    cba8:	0e 94 ba 49 	call	0x9374	; 0x9374 <move_window>
    cbac:	8c 01       	movw	r16, r24
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
								if (res == FR_OK && dir[1] == '.') {
    cbae:	89 2b       	or	r24, r25
    cbb0:	09 f0       	breq	.+2      	; 0xcbb4 <f_rename+0x1c4>
    cbb2:	67 cf       	rjmp	.-306    	; 0xca82 <f_rename+0x92>
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    cbb4:	ef 96       	adiw	r28, 0x3f	; 63
    cbb6:	8e ad       	ldd	r24, Y+62	; 0x3e
    cbb8:	9f ad       	ldd	r25, Y+63	; 0x3f
    cbba:	ef 97       	sbiw	r28, 0x3f	; 63
								if (res == FR_OK && dir[1] == '.') {
    cbbc:	fc 01       	movw	r30, r24
    cbbe:	ea 5a       	subi	r30, 0xAA	; 170
    cbc0:	ff 4f       	sbci	r31, 0xFF	; 255
    cbc2:	20 81       	ld	r18, Z
    cbc4:	2e 32       	cpi	r18, 0x2E	; 46
    cbc6:	71 f4       	brne	.+28     	; 0xcbe4 <f_rename+0x1f4>
									st_clust(fs, dir, djn.obj.sclust);
    cbc8:	2f 81       	ldd	r18, Y+7	; 0x07
    cbca:	38 85       	ldd	r19, Y+8	; 0x08
    cbcc:	49 85       	ldd	r20, Y+9	; 0x09
    cbce:	5a 85       	ldd	r21, Y+10	; 0x0a
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    cbd0:	bc 01       	movw	r22, r24
    cbd2:	6b 5a       	subi	r22, 0xAB	; 171
    cbd4:	7f 4f       	sbci	r23, 0xFF	; 255
								if (res == FR_OK && dir[1] == '.') {
									st_clust(fs, dir, djn.obj.sclust);
    cbd6:	0e 94 40 48 	call	0x9080	; 0x9080 <st_clust.isra.4>
									fs->wflag = 1;
    cbda:	ef 96       	adiw	r28, 0x3f	; 63
    cbdc:	ee ad       	ldd	r30, Y+62	; 0x3e
    cbde:	ff ad       	ldd	r31, Y+63	; 0x3f
    cbe0:	ef 97       	sbiw	r28, 0x3f	; 63
    cbe2:	b3 82       	std	Z+3, r11	; 0x03
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&djo);		/* Remove old entry */
    cbe4:	ce 01       	movw	r24, r28
    cbe6:	8f 96       	adiw	r24, 0x2f	; 47
    cbe8:	0e 94 9e 52 	call	0xa53c	; 0xa53c <dir_remove>
    cbec:	8c 01       	movw	r16, r24
				if (res == FR_OK) {
    cbee:	89 2b       	or	r24, r25
    cbf0:	09 f0       	breq	.+2      	; 0xcbf4 <f_rename+0x204>
    cbf2:	47 cf       	rjmp	.-370    	; 0xca82 <f_rename+0x92>
					res = sync_fs(fs);
    cbf4:	ef 96       	adiw	r28, 0x3f	; 63
    cbf6:	8e ad       	ldd	r24, Y+62	; 0x3e
    cbf8:	9f ad       	ldd	r25, Y+63	; 0x3f
    cbfa:	ef 97       	sbiw	r28, 0x3f	; 63
    cbfc:	0e 94 a0 48 	call	0x9140	; 0x9140 <sync_fs>
    cc00:	8c 01       	movw	r16, r24
    cc02:	3f cf       	rjmp	.-386    	; 0xca82 <f_rename+0x92>
    cc04:	08 e0       	ldi	r16, 0x08	; 8
    cc06:	10 e0       	ldi	r17, 0x00	; 0
    cc08:	3c cf       	rjmp	.-392    	; 0xca82 <f_rename+0x92>
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
						fs->wflag = 1;
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
							sect = clst2sect(fs, ld_clust(fs, dir));
							if (sect == 0) {
								res = FR_INT_ERR;
    cc0a:	02 e0       	ldi	r16, 0x02	; 2
    cc0c:	10 e0       	ldi	r17, 0x00	; 0
    cc0e:	39 cf       	rjmp	.-398    	; 0xca82 <f_rename+0x92>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cc10:	ce 57       	subi	r28, 0x7E	; 126
    cc12:	df 4f       	sbci	r29, 0xFF	; 255
    cc14:	e9 e0       	ldi	r30, 0x09	; 9
    cc16:	0c 94 2e e3 	jmp	0x1c65c	; 0x1c65c <__epilogue_restores__+0x12>

0000cc1a <f_chmod>:
FRESULT f_chmod (
	const TCHAR* path,	/* Pointer to the file path */
	BYTE attr,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
    cc1a:	a2 e3       	ldi	r26, 0x32	; 50
    cc1c:	b0 e0       	ldi	r27, 0x00	; 0
    cc1e:	e3 e1       	ldi	r30, 0x13	; 19
    cc20:	f6 e6       	ldi	r31, 0x66	; 102
    cc22:	0c 94 13 e3 	jmp	0x1c626	; 0x1c626 <__prologue_saves__+0x14>
    cc26:	9a ab       	std	Y+50, r25	; 0x32
    cc28:	89 ab       	std	Y+49, r24	; 0x31
    cc2a:	e6 2e       	mov	r14, r22
    cc2c:	f4 2e       	mov	r15, r20
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    cc2e:	42 e0       	ldi	r20, 0x02	; 2
    cc30:	be 01       	movw	r22, r28
    cc32:	61 5d       	subi	r22, 0xD1	; 209
    cc34:	7f 4f       	sbci	r23, 0xFF	; 255
    cc36:	ce 01       	movw	r24, r28
    cc38:	c1 96       	adiw	r24, 0x31	; 49
    cc3a:	0e 94 35 4a 	call	0x946a	; 0x946a <mount_volume>
	if (res == FR_OK) {
    cc3e:	00 97       	sbiw	r24, 0x00	; 0
    cc40:	a9 f5       	brne	.+106    	; 0xccac <f_chmod+0x92>
		dj.obj.fs = fs;
    cc42:	8f a5       	ldd	r24, Y+47	; 0x2f
    cc44:	98 a9       	ldd	r25, Y+48	; 0x30
    cc46:	9a 83       	std	Y+2, r25	; 0x02
    cc48:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    cc4a:	80 e0       	ldi	r24, 0x00	; 0
    cc4c:	92 e0       	ldi	r25, 0x02	; 2
    cc4e:	08 d1       	rcall	.+528    	; 0xce60 <ff_memalloc>
    cc50:	6c 01       	movw	r12, r24
    cc52:	00 97       	sbiw	r24, 0x00	; 0
    cc54:	b1 f0       	breq	.+44     	; 0xcc82 <f_chmod+0x68>
    cc56:	ef a5       	ldd	r30, Y+47	; 0x2f
    cc58:	f8 a9       	ldd	r31, Y+48	; 0x30
    cc5a:	94 87       	std	Z+12, r25	; 0x0c
    cc5c:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);	/* Follow the file path */
    cc5e:	69 a9       	ldd	r22, Y+49	; 0x31
    cc60:	7a a9       	ldd	r23, Y+50	; 0x32
    cc62:	ce 01       	movw	r24, r28
    cc64:	01 96       	adiw	r24, 0x01	; 1
    cc66:	0e 94 82 55 	call	0xab04	; 0xab04 <follow_path>
    cc6a:	8c 01       	movw	r16, r24
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
    cc6c:	89 2b       	or	r24, r25
    cc6e:	29 f4       	brne	.+10     	; 0xcc7a <f_chmod+0x60>
    cc70:	88 a5       	ldd	r24, Y+40	; 0x28
    cc72:	80 7a       	andi	r24, 0xA0	; 160
    cc74:	49 f0       	breq	.+18     	; 0xcc88 <f_chmod+0x6e>
    cc76:	06 e0       	ldi	r16, 0x06	; 6
    cc78:	10 e0       	ldi	r17, 0x00	; 0
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    cc7a:	c6 01       	movw	r24, r12
    cc7c:	f4 d0       	rcall	.+488    	; 0xce66 <ff_memfree>
    cc7e:	c8 01       	movw	r24, r16
    cc80:	15 c0       	rjmp	.+42     	; 0xccac <f_chmod+0x92>


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    cc82:	81 e1       	ldi	r24, 0x11	; 17
    cc84:	90 e0       	ldi	r25, 0x00	; 0
    cc86:	12 c0       	rjmp	.+36     	; 0xccac <f_chmod+0x92>
				fs->dirbuf[XDIR_Attr] = (attr & mask) | (fs->dirbuf[XDIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
				res = store_xdir(&dj);
			} else
#endif
			{
				dj.dir[DIR_Attr] = (attr & mask) | (dj.dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
    cc88:	eb 8d       	ldd	r30, Y+27	; 0x1b
    cc8a:	fc 8d       	ldd	r31, Y+28	; 0x1c
    cc8c:	83 85       	ldd	r24, Z+11	; 0x0b
    cc8e:	6e 2d       	mov	r22, r14
    cc90:	68 27       	eor	r22, r24
    cc92:	6f 21       	and	r22, r15
    cc94:	67 72       	andi	r22, 0x27	; 39
    cc96:	68 27       	eor	r22, r24
    cc98:	63 87       	std	Z+11, r22	; 0x0b
				fs->wflag = 1;
    cc9a:	8f a5       	ldd	r24, Y+47	; 0x2f
    cc9c:	98 a9       	ldd	r25, Y+48	; 0x30
    cc9e:	21 e0       	ldi	r18, 0x01	; 1
    cca0:	fc 01       	movw	r30, r24
    cca2:	23 83       	std	Z+3, r18	; 0x03
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
    cca4:	0e 94 a0 48 	call	0x9140	; 0x9140 <sync_fs>
    cca8:	8c 01       	movw	r16, r24
    ccaa:	e7 cf       	rjmp	.-50     	; 0xcc7a <f_chmod+0x60>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    ccac:	e2 96       	adiw	r28, 0x32	; 50
    ccae:	e8 e0       	ldi	r30, 0x08	; 8
    ccb0:	0c 94 2f e3 	jmp	0x1c65e	; 0x1c65e <__epilogue_restores__+0x14>

0000ccb4 <f_utime>:

FRESULT f_utime (
	const TCHAR* path,	/* Pointer to the file/directory name */
	const FILINFO* fno	/* Pointer to the timestamp to be set */
)
{
    ccb4:	a2 e3       	ldi	r26, 0x32	; 50
    ccb6:	b0 e0       	ldi	r27, 0x00	; 0
    ccb8:	e0 e6       	ldi	r30, 0x60	; 96
    ccba:	f6 e6       	ldi	r31, 0x66	; 102
    ccbc:	0c 94 13 e3 	jmp	0x1c626	; 0x1c626 <__prologue_saves__+0x14>
    ccc0:	9a ab       	std	Y+50, r25	; 0x32
    ccc2:	89 ab       	std	Y+49, r24	; 0x31
    ccc4:	6b 01       	movw	r12, r22
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    ccc6:	42 e0       	ldi	r20, 0x02	; 2
    ccc8:	be 01       	movw	r22, r28
    ccca:	61 5d       	subi	r22, 0xD1	; 209
    cccc:	7f 4f       	sbci	r23, 0xFF	; 255
    ccce:	ce 01       	movw	r24, r28
    ccd0:	c1 96       	adiw	r24, 0x31	; 49
    ccd2:	0e 94 35 4a 	call	0x946a	; 0x946a <mount_volume>
	if (res == FR_OK) {
    ccd6:	00 97       	sbiw	r24, 0x00	; 0
    ccd8:	09 f0       	breq	.+2      	; 0xccdc <f_utime+0x28>
    ccda:	41 c0       	rjmp	.+130    	; 0xcd5e <f_utime+0xaa>
		dj.obj.fs = fs;
    ccdc:	8f a5       	ldd	r24, Y+47	; 0x2f
    ccde:	98 a9       	ldd	r25, Y+48	; 0x30
    cce0:	9a 83       	std	Y+2, r25	; 0x02
    cce2:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    cce4:	80 e0       	ldi	r24, 0x00	; 0
    cce6:	92 e0       	ldi	r25, 0x02	; 2
    cce8:	bb d0       	rcall	.+374    	; 0xce60 <ff_memalloc>
    ccea:	7c 01       	movw	r14, r24
    ccec:	00 97       	sbiw	r24, 0x00	; 0
    ccee:	b1 f0       	breq	.+44     	; 0xcd1c <f_utime+0x68>
    ccf0:	ef a5       	ldd	r30, Y+47	; 0x2f
    ccf2:	f8 a9       	ldd	r31, Y+48	; 0x30
    ccf4:	94 87       	std	Z+12, r25	; 0x0c
    ccf6:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);	/* Follow the file path */
    ccf8:	69 a9       	ldd	r22, Y+49	; 0x31
    ccfa:	7a a9       	ldd	r23, Y+50	; 0x32
    ccfc:	ce 01       	movw	r24, r28
    ccfe:	01 96       	adiw	r24, 0x01	; 1
    cd00:	0e 94 82 55 	call	0xab04	; 0xab04 <follow_path>
    cd04:	8c 01       	movw	r16, r24
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
    cd06:	89 2b       	or	r24, r25
    cd08:	29 f4       	brne	.+10     	; 0xcd14 <f_utime+0x60>
    cd0a:	88 a5       	ldd	r24, Y+40	; 0x28
    cd0c:	80 7a       	andi	r24, 0xA0	; 160
    cd0e:	49 f0       	breq	.+18     	; 0xcd22 <f_utime+0x6e>
    cd10:	06 e0       	ldi	r16, 0x06	; 6
    cd12:	10 e0       	ldi	r17, 0x00	; 0
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    cd14:	c7 01       	movw	r24, r14
    cd16:	a7 d0       	rcall	.+334    	; 0xce66 <ff_memfree>
    cd18:	c8 01       	movw	r24, r16
    cd1a:	21 c0       	rjmp	.+66     	; 0xcd5e <f_utime+0xaa>


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    cd1c:	81 e1       	ldi	r24, 0x11	; 17
    cd1e:	90 e0       	ldi	r25, 0x00	; 0
    cd20:	1e c0       	rjmp	.+60     	; 0xcd5e <f_utime+0xaa>
				st_dword(fs->dirbuf + XDIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
				res = store_xdir(&dj);
			} else
#endif
			{
				st_dword(dj.dir + DIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
    cd22:	f6 01       	movw	r30, r12
    cd24:	44 81       	ldd	r20, Z+4	; 0x04
    cd26:	55 81       	ldd	r21, Z+5	; 0x05
    cd28:	60 e0       	ldi	r22, 0x00	; 0
    cd2a:	70 e0       	ldi	r23, 0x00	; 0
    cd2c:	ba 01       	movw	r22, r20
    cd2e:	55 27       	eor	r21, r21
    cd30:	44 27       	eor	r20, r20
    cd32:	86 81       	ldd	r24, Z+6	; 0x06
    cd34:	97 81       	ldd	r25, Z+7	; 0x07
    cd36:	a0 e0       	ldi	r26, 0x00	; 0
    cd38:	b0 e0       	ldi	r27, 0x00	; 0
    cd3a:	48 2b       	or	r20, r24
    cd3c:	59 2b       	or	r21, r25
    cd3e:	6a 2b       	or	r22, r26
    cd40:	7b 2b       	or	r23, r27
    cd42:	8b 8d       	ldd	r24, Y+27	; 0x1b
    cd44:	9c 8d       	ldd	r25, Y+28	; 0x1c
    cd46:	46 96       	adiw	r24, 0x16	; 22
    cd48:	0e 94 0d 46 	call	0x8c1a	; 0x8c1a <st_dword>
				fs->wflag = 1;
    cd4c:	8f a5       	ldd	r24, Y+47	; 0x2f
    cd4e:	98 a9       	ldd	r25, Y+48	; 0x30
    cd50:	21 e0       	ldi	r18, 0x01	; 1
    cd52:	fc 01       	movw	r30, r24
    cd54:	23 83       	std	Z+3, r18	; 0x03
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
    cd56:	0e 94 a0 48 	call	0x9140	; 0x9140 <sync_fs>
    cd5a:	8c 01       	movw	r16, r24
    cd5c:	db cf       	rjmp	.-74     	; 0xcd14 <f_utime+0x60>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cd5e:	e2 96       	adiw	r28, 0x32	; 50
    cd60:	e8 e0       	ldi	r30, 0x08	; 8
    cd62:	0c 94 2f e3 	jmp	0x1c65e	; 0x1c65e <__epilogue_restores__+0x14>

0000cd66 <f_getlabel>:
FRESULT f_getlabel (
	const TCHAR* path,	/* Logical drive number */
	TCHAR* label,		/* Buffer to store the volume label */
	DWORD* vsn			/* Variable to store the volume serial number */
)
{
    cd66:	a2 e3       	ldi	r26, 0x32	; 50
    cd68:	b0 e0       	ldi	r27, 0x00	; 0
    cd6a:	e9 eb       	ldi	r30, 0xB9	; 185
    cd6c:	f6 e6       	ldi	r31, 0x66	; 102
    cd6e:	0c 94 13 e3 	jmp	0x1c626	; 0x1c626 <__prologue_saves__+0x14>
    cd72:	9a ab       	std	Y+50, r25	; 0x32
    cd74:	89 ab       	std	Y+49, r24	; 0x31
    cd76:	7b 01       	movw	r14, r22
    cd78:	6a 01       	movw	r12, r20
	FATFS *fs;
	UINT si, di;
	WCHAR wc;

	/* Get logical drive */
	res = mount_volume(&path, &fs, 0);
    cd7a:	40 e0       	ldi	r20, 0x00	; 0
    cd7c:	be 01       	movw	r22, r28
    cd7e:	61 5d       	subi	r22, 0xD1	; 209
    cd80:	7f 4f       	sbci	r23, 0xFF	; 255
    cd82:	ce 01       	movw	r24, r28
    cd84:	c1 96       	adiw	r24, 0x31	; 49
    cd86:	0e 94 35 4a 	call	0x946a	; 0x946a <mount_volume>
    cd8a:	8c 01       	movw	r16, r24

	/* Get volume label */
	if (res == FR_OK && label) {
    cd8c:	89 2b       	or	r24, r25
    cd8e:	09 f0       	breq	.+2      	; 0xcd92 <f_getlabel+0x2c>
    cd90:	62 c0       	rjmp	.+196    	; 0xce56 <f_getlabel+0xf0>
    cd92:	e1 14       	cp	r14, r1
    cd94:	f1 04       	cpc	r15, r1
    cd96:	a1 f1       	breq	.+104    	; 0xce00 <f_getlabel+0x9a>
		dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
    cd98:	8f a5       	ldd	r24, Y+47	; 0x2f
    cd9a:	98 a9       	ldd	r25, Y+48	; 0x30
    cd9c:	9a 83       	std	Y+2, r25	; 0x02
    cd9e:	89 83       	std	Y+1, r24	; 0x01
    cda0:	1f 82       	std	Y+7, r1	; 0x07
    cda2:	18 86       	std	Y+8, r1	; 0x08
    cda4:	19 86       	std	Y+9, r1	; 0x09
    cda6:	1a 86       	std	Y+10, r1	; 0x0a
		res = dir_sdi(&dj, 0);
    cda8:	40 e0       	ldi	r20, 0x00	; 0
    cdaa:	50 e0       	ldi	r21, 0x00	; 0
    cdac:	ba 01       	movw	r22, r20
    cdae:	ce 01       	movw	r24, r28
    cdb0:	01 96       	adiw	r24, 0x01	; 1
    cdb2:	0e 94 3c 4e 	call	0x9c78	; 0x9c78 <dir_sdi>
		if (res == FR_OK) {
    cdb6:	00 97       	sbiw	r24, 0x00	; 0
    cdb8:	f1 f4       	brne	.+60     	; 0xcdf6 <f_getlabel+0x90>
		 	res = DIR_READ_LABEL(&dj);		/* Find a volume label entry */
    cdba:	61 e0       	ldi	r22, 0x01	; 1
    cdbc:	70 e0       	ldi	r23, 0x00	; 0
    cdbe:	ce 01       	movw	r24, r28
    cdc0:	01 96       	adiw	r24, 0x01	; 1
    cdc2:	0e 94 d5 51 	call	0xa3aa	; 0xa3aa <dir_read>
		 	if (res == FR_OK) {
    cdc6:	00 97       	sbiw	r24, 0x00	; 0
    cdc8:	b1 f4       	brne	.+44     	; 0xcdf6 <f_getlabel+0x90>
    cdca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    cdcc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    cdce:	f7 01       	movw	r30, r14
    cdd0:	3b 96       	adiw	r30, 0x0b	; 11
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry */
					while (si < 11) {
						wc = dj.dir[si++];
    cdd2:	a7 01       	movw	r20, r14
    cdd4:	dc 01       	movw	r26, r24
    cdd6:	2d 91       	ld	r18, X+
    cdd8:	cd 01       	movw	r24, r26
						wc = ff_oem2uni(wc, CODEPAGE);					/* Convert it into Unicode */
						if (wc != 0) wc = put_utf(wc, &label[di], 4);	/* Put it in Unicode */
						if (wc == 0) { di = 0; break; }
						di += wc;
#else									/* ANSI/OEM output */
						label[di++] = (TCHAR)wc;
    cdda:	da 01       	movw	r26, r20
    cddc:	2d 93       	st	X+, r18
    cdde:	ad 01       	movw	r20, r26
					label[di] = 0;
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry */
					while (si < 11) {
    cde0:	ae 17       	cp	r26, r30
    cde2:	bf 07       	cpc	r27, r31
    cde4:	b9 f7       	brne	.-18     	; 0xcdd4 <f_getlabel+0x6e>
#else									/* ANSI/OEM output */
						label[di++] = (TCHAR)wc;
#endif
					}
					do {				/* Truncate trailing spaces */
						label[di] = 0;
    cde6:	10 82       	st	Z, r1
						if (di == 0) break;
    cde8:	ee 16       	cp	r14, r30
    cdea:	ff 06       	cpc	r15, r31
    cdec:	49 f0       	breq	.+18     	; 0xce00 <f_getlabel+0x9a>
					} while (label[--di] == ' ');
    cdee:	82 91       	ld	r24, -Z
    cdf0:	80 32       	cpi	r24, 0x20	; 32
    cdf2:	c9 f3       	breq	.-14     	; 0xcde6 <f_getlabel+0x80>
    cdf4:	05 c0       	rjmp	.+10     	; 0xce00 <f_getlabel+0x9a>
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    cdf6:	84 30       	cpi	r24, 0x04	; 4
    cdf8:	91 05       	cpc	r25, r1
    cdfa:	61 f5       	brne	.+88     	; 0xce54 <f_getlabel+0xee>
			label[0] = 0;
    cdfc:	f7 01       	movw	r30, r14
    cdfe:	10 82       	st	Z, r1
			res = FR_OK;
		}
	}

	/* Get volume serial number */
	if (res == FR_OK && vsn) {
    ce00:	c1 14       	cp	r12, r1
    ce02:	d1 04       	cpc	r13, r1
    ce04:	41 f1       	breq	.+80     	; 0xce56 <f_getlabel+0xf0>
		res = move_window(fs, fs->volbase);
    ce06:	8f a5       	ldd	r24, Y+47	; 0x2f
    ce08:	98 a9       	ldd	r25, Y+48	; 0x30
    ce0a:	fc 01       	movw	r30, r24
    ce0c:	41 a1       	ldd	r20, Z+33	; 0x21
    ce0e:	52 a1       	ldd	r21, Z+34	; 0x22
    ce10:	63 a1       	ldd	r22, Z+35	; 0x23
    ce12:	74 a1       	ldd	r23, Z+36	; 0x24
    ce14:	0e 94 ba 49 	call	0x9374	; 0x9374 <move_window>
    ce18:	8c 01       	movw	r16, r24
		if (res == FR_OK) {
    ce1a:	89 2b       	or	r24, r25
    ce1c:	e1 f4       	brne	.+56     	; 0xce56 <f_getlabel+0xf0>
			switch (fs->fs_type) {
    ce1e:	ef a5       	ldd	r30, Y+47	; 0x2f
    ce20:	f8 a9       	ldd	r31, Y+48	; 0x30
    ce22:	80 81       	ld	r24, Z
    ce24:	83 30       	cpi	r24, 0x03	; 3
    ce26:	29 f0       	breq	.+10     	; 0xce32 <f_getlabel+0xcc>
    ce28:	84 30       	cpi	r24, 0x04	; 4
    ce2a:	31 f0       	breq	.+12     	; 0xce38 <f_getlabel+0xd2>

			case FS_FAT32:
				di = BS_VolID32; break;

			default:
				di = BS_VolID;
    ce2c:	87 e2       	ldi	r24, 0x27	; 39
    ce2e:	90 e0       	ldi	r25, 0x00	; 0
    ce30:	05 c0       	rjmp	.+10     	; 0xce3c <f_getlabel+0xd6>
			switch (fs->fs_type) {
			case FS_EXFAT:
				di = BPB_VolIDEx; break;

			case FS_FAT32:
				di = BS_VolID32; break;
    ce32:	83 e4       	ldi	r24, 0x43	; 67
    ce34:	90 e0       	ldi	r25, 0x00	; 0
    ce36:	02 c0       	rjmp	.+4      	; 0xce3c <f_getlabel+0xd6>
	if (res == FR_OK && vsn) {
		res = move_window(fs, fs->volbase);
		if (res == FR_OK) {
			switch (fs->fs_type) {
			case FS_EXFAT:
				di = BPB_VolIDEx; break;
    ce38:	84 e6       	ldi	r24, 0x64	; 100
    ce3a:	90 e0       	ldi	r25, 0x00	; 0
				di = BS_VolID32; break;

			default:
				di = BS_VolID;
			}
			*vsn = ld_dword(fs->win + di);
    ce3c:	f5 96       	adiw	r30, 0x35	; 53
    ce3e:	8e 0f       	add	r24, r30
    ce40:	9f 1f       	adc	r25, r31
    ce42:	0e 94 f8 45 	call	0x8bf0	; 0x8bf0 <ld_dword>
    ce46:	d6 01       	movw	r26, r12
    ce48:	6d 93       	st	X+, r22
    ce4a:	7d 93       	st	X+, r23
    ce4c:	8d 93       	st	X+, r24
    ce4e:	9c 93       	st	X, r25
    ce50:	13 97       	sbiw	r26, 0x03	; 3
    ce52:	01 c0       	rjmp	.+2      	; 0xce56 <f_getlabel+0xf0>
						if (di == 0) break;
					} while (label[--di] == ' ');
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    ce54:	8c 01       	movw	r16, r24
			*vsn = ld_dword(fs->win + di);
		}
	}

	LEAVE_FF(fs, res);
}
    ce56:	c8 01       	movw	r24, r16
    ce58:	e2 96       	adiw	r28, 0x32	; 50
    ce5a:	e8 e0       	ldi	r30, 0x08	; 8
    ce5c:	0c 94 2f e3 	jmp	0x1c65e	; 0x1c65e <__epilogue_restores__+0x14>

0000ce60 <ff_memalloc>:

void* ff_memalloc (	/* Returns pointer to the allocated memory block (null if not enough core) */
	UINT msize		/* Number of bytes to allocate */
)
{
	return safemalloc(msize);	/* Allocate a new memory block with POSIX API */
    ce60:	0c 94 28 26 	jmp	0x4c50	; 0x4c50 <safemalloc>
}
    ce64:	08 95       	ret

0000ce66 <ff_memfree>:

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free (nothing to do if null) */
)
{
	safefree(mblock);	/* Free the memory block with POSIX API */
    ce66:	0c 94 4a 26 	jmp	0x4c94	; 0x4c94 <safefree>
    ce6a:	08 95       	ret

0000ce6c <ff_uni2oem>:
#if FF_CODE_PAGE != 0 && FF_CODE_PAGE < 900
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
    ce6c:	cf 92       	push	r12
    ce6e:	df 92       	push	r13
    ce70:	ef 92       	push	r14
    ce72:	ff 92       	push	r15
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (uni < 0x80) {	/* ASCII? */
    ce74:	60 38       	cpi	r22, 0x80	; 128
    ce76:	71 05       	cpc	r23, r1
    ce78:	81 05       	cpc	r24, r1
    ce7a:	91 05       	cpc	r25, r1
    ce7c:	10 f4       	brcc	.+4      	; 0xce82 <ff_uni2oem+0x16>
		c = (WCHAR)uni;
    ce7e:	cb 01       	movw	r24, r22
    ce80:	23 c0       	rjmp	.+70     	; 0xcec8 <ff_uni2oem+0x5c>

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
    ce82:	61 15       	cp	r22, r1
    ce84:	71 05       	cpc	r23, r1
    ce86:	21 e0       	ldi	r18, 0x01	; 1
    ce88:	82 07       	cpc	r24, r18
    ce8a:	91 05       	cpc	r25, r1
    ce8c:	d8 f4       	brcc	.+54     	; 0xcec4 <ff_uni2oem+0x58>
    ce8e:	45 3b       	cpi	r20, 0xB5	; 181
    ce90:	51 40       	sbci	r21, 0x01	; 1
    ce92:	c1 f4       	brne	.+48     	; 0xcec4 <ff_uni2oem+0x58>
    ce94:	e6 ea       	ldi	r30, 0xA6	; 166
    ce96:	f7 e0       	ldi	r31, 0x07	; 7
    ce98:	20 e0       	ldi	r18, 0x00	; 0
    ce9a:	30 e0       	ldi	r19, 0x00	; 0
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
    ce9c:	c1 90       	ld	r12, Z+
    ce9e:	d1 90       	ld	r13, Z+
    cea0:	e1 2c       	mov	r14, r1
    cea2:	f1 2c       	mov	r15, r1
    cea4:	6c 15       	cp	r22, r12
    cea6:	7d 05       	cpc	r23, r13
    cea8:	8e 05       	cpc	r24, r14
    ceaa:	9f 05       	cpc	r25, r15
    ceac:	29 f0       	breq	.+10     	; 0xceb8 <ff_uni2oem+0x4c>
    ceae:	2f 5f       	subi	r18, 0xFF	; 255
    ceb0:	3f 4f       	sbci	r19, 0xFF	; 255
    ceb2:	20 38       	cpi	r18, 0x80	; 128
    ceb4:	31 05       	cpc	r19, r1
    ceb6:	91 f7       	brne	.-28     	; 0xce9c <ff_uni2oem+0x30>
			c = (c + 0x80) & 0xFF;
    ceb8:	b9 01       	movw	r22, r18
    ceba:	60 58       	subi	r22, 0x80	; 128
    cebc:	7f 4f       	sbci	r23, 0xFF	; 255
    cebe:	cb 01       	movw	r24, r22
    cec0:	99 27       	eor	r25, r25
    cec2:	02 c0       	rjmp	.+4      	; 0xcec8 <ff_uni2oem+0x5c>
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
	WCHAR c = 0;
    cec4:	80 e0       	ldi	r24, 0x00	; 0
    cec6:	90 e0       	ldi	r25, 0x00	; 0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
    cec8:	ff 90       	pop	r15
    ceca:	ef 90       	pop	r14
    cecc:	df 90       	pop	r13
    cece:	cf 90       	pop	r12
    ced0:	08 95       	ret

0000ced2 <ff_oem2uni>:
{
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (oem < 0x80) {	/* ASCII? */
    ced2:	80 38       	cpi	r24, 0x80	; 128
    ced4:	91 05       	cpc	r25, r1
    ced6:	88 f0       	brcs	.+34     	; 0xcefa <ff_oem2uni+0x28>
		c = oem;

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
    ced8:	65 3b       	cpi	r22, 0xB5	; 181
    ceda:	71 40       	sbci	r23, 0x01	; 1
    cedc:	61 f4       	brne	.+24     	; 0xcef6 <ff_oem2uni+0x24>
			if (oem < 0x100) c = p[oem - 0x80];
    cede:	8f 3f       	cpi	r24, 0xFF	; 255
    cee0:	91 05       	cpc	r25, r1
    cee2:	09 f0       	breq	.+2      	; 0xcee6 <ff_oem2uni+0x14>
    cee4:	40 f4       	brcc	.+16     	; 0xcef6 <ff_oem2uni+0x24>
    cee6:	88 0f       	add	r24, r24
    cee8:	99 1f       	adc	r25, r25
    ceea:	fc 01       	movw	r30, r24
    ceec:	ea 55       	subi	r30, 0x5A	; 90
    ceee:	f9 4f       	sbci	r31, 0xF9	; 249
    cef0:	80 81       	ld	r24, Z
    cef2:	91 81       	ldd	r25, Z+1	; 0x01
    cef4:	08 95       	ret
WCHAR ff_oem2uni (	/* Returns Unicode character in UTF-16, zero on error */
	WCHAR	oem,	/* OEM code to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
	WCHAR c = 0;
    cef6:	80 e0       	ldi	r24, 0x00	; 0
    cef8:	90 e0       	ldi	r25, 0x00	; 0
			if (oem < 0x100) c = p[oem - 0x80];
		}
	}

	return c;
}
    cefa:	08 95       	ret

0000cefc <ff_wtoupper>:

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
    cefc:	61 15       	cp	r22, r1
    cefe:	71 05       	cpc	r23, r1
    cf00:	21 e0       	ldi	r18, 0x01	; 1
    cf02:	82 07       	cpc	r24, r18
    cf04:	91 05       	cpc	r25, r1
    cf06:	08 f0       	brcs	.+2      	; 0xcf0a <ff_wtoupper+0xe>
    cf08:	5a c0       	rjmp	.+180    	; 0xcfbe <ff_wtoupper+0xc2>
		uc = (WORD)uni;
		p = uc < 0x1000 ? cvt1 : cvt2;
    cf0a:	61 15       	cp	r22, r1
    cf0c:	80 e1       	ldi	r24, 0x10	; 16
    cf0e:	78 07       	cpc	r23, r24
    cf10:	18 f0       	brcs	.+6      	; 0xcf18 <ff_wtoupper+0x1c>
    cf12:	a8 ef       	ldi	r26, 0xF8	; 248
    cf14:	b4 e0       	ldi	r27, 0x04	; 4
    cf16:	02 c0       	rjmp	.+4      	; 0xcf1c <ff_wtoupper+0x20>
    cf18:	a4 eb       	ldi	r26, 0xB4	; 180
    cf1a:	b5 e0       	ldi	r27, 0x05	; 5
		for (;;) {
			bc = *p++;								/* Get the block base */
    cf1c:	2d 91       	ld	r18, X+
    cf1e:	3c 91       	ld	r19, X
    cf20:	11 97       	sbiw	r26, 0x01	; 1
			if (bc == 0 || uc < bc) break;			/* Not matched? */
    cf22:	21 15       	cp	r18, r1
    cf24:	31 05       	cpc	r19, r1
    cf26:	09 f4       	brne	.+2      	; 0xcf2a <ff_wtoupper+0x2e>
    cf28:	48 c0       	rjmp	.+144    	; 0xcfba <ff_wtoupper+0xbe>
    cf2a:	62 17       	cp	r22, r18
    cf2c:	73 07       	cpc	r23, r19
    cf2e:	08 f4       	brcc	.+2      	; 0xcf32 <ff_wtoupper+0x36>
    cf30:	44 c0       	rjmp	.+136    	; 0xcfba <ff_wtoupper+0xbe>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
    cf32:	14 96       	adiw	r26, 0x04	; 4
    cf34:	fd 01       	movw	r30, r26
    cf36:	32 97       	sbiw	r30, 0x02	; 2
    cf38:	80 81       	ld	r24, Z
    cf3a:	91 81       	ldd	r25, Z+1	; 0x01
    cf3c:	e9 2f       	mov	r30, r25
    cf3e:	ff 27       	eor	r31, r31
    cf40:	99 27       	eor	r25, r25
			if (uc < bc + nc) {	/* In the block? */
    cf42:	a9 01       	movw	r20, r18
    cf44:	48 0f       	add	r20, r24
    cf46:	59 1f       	adc	r21, r25
    cf48:	64 17       	cp	r22, r20
    cf4a:	75 07       	cpc	r23, r21
    cf4c:	70 f5       	brcc	.+92     	; 0xcfaa <ff_wtoupper+0xae>
				switch (cmd) {
    cf4e:	e9 30       	cpi	r30, 0x09	; 9
    cf50:	f1 05       	cpc	r31, r1
    cf52:	98 f5       	brcc	.+102    	; 0xcfba <ff_wtoupper+0xbe>
    cf54:	ec 54       	subi	r30, 0x4C	; 76
    cf56:	ff 4f       	sbci	r31, 0xFF	; 255
    cf58:	0c 94 da e2 	jmp	0x1c5b4	; 0x1c5b4 <__tablejump2__>
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
    cf5c:	62 1b       	sub	r22, r18
    cf5e:	73 0b       	sbc	r23, r19
    cf60:	fb 01       	movw	r30, r22
    cf62:	ee 0f       	add	r30, r30
    cf64:	ff 1f       	adc	r31, r31
    cf66:	ea 0f       	add	r30, r26
    cf68:	fb 1f       	adc	r31, r27
    cf6a:	60 81       	ld	r22, Z
    cf6c:	71 81       	ldd	r23, Z+1	; 0x01
    cf6e:	25 c0       	rjmp	.+74     	; 0xcfba <ff_wtoupper+0xbe>
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
    cf70:	cb 01       	movw	r24, r22
    cf72:	82 1b       	sub	r24, r18
    cf74:	93 0b       	sbc	r25, r19
    cf76:	81 70       	andi	r24, 0x01	; 1
    cf78:	99 27       	eor	r25, r25
    cf7a:	68 1b       	sub	r22, r24
    cf7c:	79 0b       	sbc	r23, r25
    cf7e:	1d c0       	rjmp	.+58     	; 0xcfba <ff_wtoupper+0xbe>
				case 2: uc -= 16; break;			/* Shift -16 */
    cf80:	60 51       	subi	r22, 0x10	; 16
    cf82:	71 09       	sbc	r23, r1
    cf84:	1a c0       	rjmp	.+52     	; 0xcfba <ff_wtoupper+0xbe>
				case 3:	uc -= 32; break;			/* Shift -32 */
    cf86:	60 52       	subi	r22, 0x20	; 32
    cf88:	71 09       	sbc	r23, r1
    cf8a:	17 c0       	rjmp	.+46     	; 0xcfba <ff_wtoupper+0xbe>
				case 4:	uc -= 48; break;			/* Shift -48 */
    cf8c:	60 53       	subi	r22, 0x30	; 48
    cf8e:	71 09       	sbc	r23, r1
    cf90:	14 c0       	rjmp	.+40     	; 0xcfba <ff_wtoupper+0xbe>
				case 5:	uc -= 26; break;			/* Shift -26 */
    cf92:	6a 51       	subi	r22, 0x1A	; 26
    cf94:	71 09       	sbc	r23, r1
    cf96:	11 c0       	rjmp	.+34     	; 0xcfba <ff_wtoupper+0xbe>
				case 6:	uc += 8; break;				/* Shift +8 */
    cf98:	68 5f       	subi	r22, 0xF8	; 248
    cf9a:	7f 4f       	sbci	r23, 0xFF	; 255
    cf9c:	0e c0       	rjmp	.+28     	; 0xcfba <ff_wtoupper+0xbe>
				case 7: uc -= 80; break;			/* Shift -80 */
    cf9e:	60 55       	subi	r22, 0x50	; 80
    cfa0:	71 09       	sbc	r23, r1
    cfa2:	0b c0       	rjmp	.+22     	; 0xcfba <ff_wtoupper+0xbe>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
    cfa4:	60 56       	subi	r22, 0x60	; 96
    cfa6:	7c 41       	sbci	r23, 0x1C	; 28
    cfa8:	08 c0       	rjmp	.+16     	; 0xcfba <ff_wtoupper+0xbe>
				}
				break;
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
    cfaa:	ef 2b       	or	r30, r31
    cfac:	09 f0       	breq	.+2      	; 0xcfb0 <ff_wtoupper+0xb4>
    cfae:	b6 cf       	rjmp	.-148    	; 0xcf1c <ff_wtoupper+0x20>
    cfb0:	88 0f       	add	r24, r24
    cfb2:	99 1f       	adc	r25, r25
    cfb4:	a8 0f       	add	r26, r24
    cfb6:	b9 1f       	adc	r27, r25
    cfb8:	b1 cf       	rjmp	.-158    	; 0xcf1c <ff_wtoupper+0x20>
		}
		uni = uc;
    cfba:	80 e0       	ldi	r24, 0x00	; 0
    cfbc:	90 e0       	ldi	r25, 0x00	; 0
	}

	return uni;
}
    cfbe:	08 95       	ret

0000cfc0 <disk_status>:

DSTATUS disk_status (
BYTE pdrv                                         /* Physical drive nmuber to identify the drive */
)
{
    switch (pdrv)
    cfc0:	81 11       	cpse	r24, r1
    cfc2:	02 c0       	rjmp	.+4      	; 0xcfc8 <disk_status+0x8>
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_status() );
    cfc4:	a1 c1       	rjmp	.+834    	; 0xd308 <mmc_disk_status>
    cfc6:	08 95       	ret
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_status() );
#endif
    }
    return STA_NOINIT;
    cfc8:	81 e0       	ldi	r24, 0x01	; 1
}
    cfca:	08 95       	ret

0000cfcc <disk_initialize>:
DSTATUS disk_initialize (
BYTE pdrv                                         /* Physical drive nmuber to identify the drive */
)
{

    switch (pdrv)
    cfcc:	81 11       	cpse	r24, r1
    cfce:	02 c0       	rjmp	.+4      	; 0xcfd4 <disk_initialize+0x8>
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_initialize() );
    cfd0:	f6 c0       	rjmp	.+492    	; 0xd1be <mmc_disk_initialize>
    cfd2:	08 95       	ret
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_initialize() );
#endif
    }
    return STA_NOINIT;
    cfd4:	81 e0       	ldi	r24, 0x01	; 1
}
    cfd6:	08 95       	ret

0000cfd8 <disk_read>:
BYTE pdrv,                                        /* Physical drive nmuber to identify the drive */
BYTE *buff,                                       /* Data buffer to store read data */
LBA_t sector,                                     /* Start sector in LBA */
UINT count                                        /* Number of sectors to read */
)
{
    cfd8:	0f 93       	push	r16
    cfda:	1f 93       	push	r17
    cfdc:	fb 01       	movw	r30, r22
    switch (pdrv)
    cfde:	81 11       	cpse	r24, r1
    cfe0:	06 c0       	rjmp	.+12     	; 0xcfee <disk_read+0x16>
    cfe2:	ba 01       	movw	r22, r20
    cfe4:	a9 01       	movw	r20, r18
    cfe6:	cf 01       	movw	r24, r30
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_read(buff, sector, count) );
    cfe8:	98 01       	movw	r18, r16
    cfea:	91 d1       	rcall	.+802    	; 0xd30e <mmc_disk_read>
    cfec:	02 c0       	rjmp	.+4      	; 0xcff2 <disk_read+0x1a>
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_read(buff, sector, count) );
#endif
    }
    return RES_PARERR;
    cfee:	84 e0       	ldi	r24, 0x04	; 4
    cff0:	90 e0       	ldi	r25, 0x00	; 0
}
    cff2:	1f 91       	pop	r17
    cff4:	0f 91       	pop	r16
    cff6:	08 95       	ret

0000cff8 <disk_write>:
BYTE pdrv,                                        /* Physical drive nmuber to identify the drive */
const BYTE *buff,                                 /* Data to be written */
LBA_t sector,                                     /* Start sector in LBA */
UINT count                                        /* Number of sectors to write */
)
{
    cff8:	0f 93       	push	r16
    cffa:	1f 93       	push	r17
    cffc:	fb 01       	movw	r30, r22
    switch (pdrv)
    cffe:	81 11       	cpse	r24, r1
    d000:	06 c0       	rjmp	.+12     	; 0xd00e <disk_write+0x16>
    d002:	ba 01       	movw	r22, r20
    d004:	a9 01       	movw	r20, r18
    d006:	cf 01       	movw	r24, r30
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_write(buff, sector, count) );
    d008:	98 01       	movw	r18, r16
    d00a:	e2 d1       	rcall	.+964    	; 0xd3d0 <mmc_disk_write>
    d00c:	02 c0       	rjmp	.+4      	; 0xd012 <disk_write+0x1a>
        case DEV_USB :
            return ( usb_disk_write(buff, sector, count) );
#endif
    }

    return RES_PARERR;
    d00e:	84 e0       	ldi	r24, 0x04	; 4
    d010:	90 e0       	ldi	r25, 0x00	; 0
}
    d012:	1f 91       	pop	r17
    d014:	0f 91       	pop	r16
    d016:	08 95       	ret

0000d018 <disk_ioctl>:
DRESULT disk_ioctl (
BYTE pdrv,                                        /* Physical drive nmuber (0..) */
BYTE cmd,                                         /* Control code */
void *buff                                        /* Buffer to send/receive control data */
)
{
    d018:	96 2f       	mov	r25, r22
    switch (pdrv)
    d01a:	81 11       	cpse	r24, r1
    d01c:	04 c0       	rjmp	.+8      	; 0xd026 <disk_ioctl+0xe>
    d01e:	ba 01       	movw	r22, r20
    d020:	89 2f       	mov	r24, r25
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_ioctl(cmd, buff) );
    d022:	4a c2       	rjmp	.+1172   	; 0xd4b8 <mmc_disk_ioctl>
    d024:	08 95       	ret
#ifdef DRV_USB
        case DEV_MMC :
            return ( usb_disk_ioctl(cmd, buff) );
#endif
    }
    return RES_PARERR;
    d026:	84 e0       	ldi	r24, 0x04	; 4
    d028:	90 e0       	ldi	r25, 0x00	; 0
}
    d02a:	08 95       	ret

0000d02c <xchg_spi>:
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d02c:	f9 c4       	rjmp	.+2546   	; 0xda20 <mmc_spi_TXRX>
    return dat;
}
    d02e:	08 95       	ret

0000d030 <deselect>:
///@return void
MEMSPACE
static
void deselect (void)
{
    CS_HIGH();
    d030:	ce d4       	rcall	.+2460   	; 0xd9ce <mmc_spi_end>
    xchg_spi(0xFF);                               /*< Dummy clock (force DO hi-z for multiple slave SPI) */
    d032:	8f ef       	ldi	r24, 0xFF	; 255
    d034:	fb df       	rcall	.-10     	; 0xd02c <xchg_spi>
    xchg_spi(0xFF);                               /*< Dummy clock (force DO hi-z for multiple slave SPI) */
    d036:	8f ef       	ldi	r24, 0xFF	; 255
    d038:	f9 cf       	rjmp	.-14     	; 0xd02c <xchg_spi>
    d03a:	08 95       	ret

0000d03c <rcvr_datablock>:
    d03c:	0f 93       	push	r16
static
int rcvr_datablock (
BYTE *buff,                                       /*< Data buffer to store received data */
UINT btr                                          /*< Byte count (must be multiple of 4) */
)
{
    d03e:	1f 93       	push	r17
    d040:	cf 93       	push	r28
    d042:	df 93       	push	r29
    d044:	ec 01       	movw	r28, r24
    d046:	8b 01       	movw	r16, r22
    BYTE token;

    mmc_set_ms_timeout(1000);
    d048:	88 ee       	ldi	r24, 0xE8	; 232
    d04a:	93 e0       	ldi	r25, 0x03	; 3
    d04c:	ec d4       	rcall	.+2520   	; 0xda26 <mmc_set_ms_timeout>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d04e:	8f ef       	ldi	r24, 0xFF	; 255
    d050:	e7 d4       	rcall	.+2510   	; 0xda20 <mmc_spi_TXRX>

    mmc_set_ms_timeout(1000);
    do                                            /* Wait for data packet in timeout of 400ms */
    {
        token = xchg_spi(0xFF);
    } while ((token == 0xFF) && !mmc_test_timeout());
    d052:	8f 3f       	cpi	r24, 0xFF	; 255
    d054:	31 f4       	brne	.+12     	; 0xd062 <rcvr_datablock+0x26>
    d056:	ee d4       	rcall	.+2524   	; 0xda34 <mmc_test_timeout>
    d058:	89 2b       	or	r24, r25
    d05a:	c9 f3       	breq	.-14     	; 0xd04e <rcvr_datablock+0x12>
    if (token != 0xFE) return 0;                  /* If not valid data token, retutn with error */
    d05c:	80 e0       	ldi	r24, 0x00	; 0
    d05e:	90 e0       	ldi	r25, 0x00	; 0
    d060:	0b c0       	rjmp	.+22     	; 0xd078 <rcvr_datablock+0x3c>
    d062:	8e 3f       	cpi	r24, 0xFE	; 254
void rcvr_spi_multi (
BYTE *p,                                          /* Data read buffer */
UINT cnt                                          /* Size of data block */
)
{
    mmc_spi_RX_buffer((uint8_t *)p, cnt);
    d064:	d9 f7       	brne	.-10     	; 0xd05c <rcvr_datablock+0x20>
    d066:	b8 01       	movw	r22, r16
    d068:	ce 01       	movw	r24, r28
        token = xchg_spi(0xFF);
    } while ((token == 0xFF) && !mmc_test_timeout());
    if (token != 0xFE) return 0;                  /* If not valid data token, retutn with error */

    rcvr_spi_multi(buff, btr);                    /* Receive the data block into buffer */
    xchg_spi(0xFF);                               /* Discard CRC */
    d06a:	d7 d4       	rcall	.+2478   	; 0xda1a <mmc_spi_RX_buffer>
    d06c:	8f ef       	ldi	r24, 0xFF	; 255
    d06e:	de df       	rcall	.-68     	; 0xd02c <xchg_spi>
    xchg_spi(0xFF);
    d070:	8f ef       	ldi	r24, 0xFF	; 255
    d072:	dc df       	rcall	.-72     	; 0xd02c <xchg_spi>
    d074:	81 e0       	ldi	r24, 0x01	; 1
    d076:	90 e0       	ldi	r25, 0x00	; 0
    d078:	df 91       	pop	r29

    return 1;                                     /* Return with success */
}
    d07a:	cf 91       	pop	r28
    d07c:	1f 91       	pop	r17
    d07e:	0f 91       	pop	r16
    d080:	08 95       	ret

0000d082 <wait_ready>:
    d082:	cf 93       	push	r28
int wait_ready (
UINT wt                                           /*< Timeout [ms] */
)
{
    BYTE d;
    mmc_set_ms_timeout(wt);
    d084:	d0 d4       	rcall	.+2464   	; 0xda26 <mmc_set_ms_timeout>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d086:	8f ef       	ldi	r24, 0xFF	; 255
    d088:	cb d4       	rcall	.+2454   	; 0xda20 <mmc_spi_TXRX>
    d08a:	c8 2f       	mov	r28, r24
{
    BYTE d;
    mmc_set_ms_timeout(wt);
    do
    d = xchg_spi(0xFF);
    while (d != 0xFF && !mmc_test_timeout());
    d08c:	8f 3f       	cpi	r24, 0xFF	; 255
    d08e:	19 f0       	breq	.+6      	; 0xd096 <wait_ready+0x14>
    d090:	d1 d4       	rcall	.+2466   	; 0xda34 <mmc_test_timeout>
    d092:	89 2b       	or	r24, r25
    d094:	c1 f3       	breq	.-16     	; 0xd086 <wait_ready+0x4>

    return (d == 0xFF) ? 1 : 0;
    d096:	81 e0       	ldi	r24, 0x01	; 1
    d098:	90 e0       	ldi	r25, 0x00	; 0
    d09a:	cf 3f       	cpi	r28, 0xFF	; 255
    d09c:	11 f0       	breq	.+4      	; 0xd0a2 <wait_ready+0x20>
    d09e:	80 e0       	ldi	r24, 0x00	; 0
    d0a0:	90 e0       	ldi	r25, 0x00	; 0
}
    d0a2:	cf 91       	pop	r28
    d0a4:	08 95       	ret

0000d0a6 <select>:
///@return 1 Successful
///@return 0 Timeout
MEMSPACE
static
int select (void)
{
    d0a6:	cf 93       	push	r28
    d0a8:	df 93       	push	r29
    d0aa:	00 d0       	rcall	.+0      	; 0xd0ac <select+0x6>
    d0ac:	1f 92       	push	r1
    CS_LOW();
    d0ae:	82 d4       	rcall	.+2308   	; 0xd9b4 <mmc_spi_begin>
    xchg_spi(0xFF);                               /* Dummy clock (force DO enabled) */
    d0b0:	8f ef       	ldi	r24, 0xFF	; 255
    d0b2:	bc df       	rcall	.-136    	; 0xd02c <xchg_spi>

    if (wait_ready(1000))
    d0b4:	88 ee       	ldi	r24, 0xE8	; 232
    d0b6:	93 e0       	ldi	r25, 0x03	; 3
    d0b8:	e4 df       	rcall	.-56     	; 0xd082 <wait_ready>
    d0ba:	ec 01       	movw	r28, r24
    d0bc:	89 2b       	or	r24, r25
    d0be:	61 f4       	brne	.+24     	; 0xd0d8 <select+0x32>
        return 1;                                 /* OK */

    printf("select failed!\n");
    d0c0:	89 e6       	ldi	r24, 0x69	; 105
    d0c2:	97 e0       	ldi	r25, 0x07	; 7
    d0c4:	a0 e0       	ldi	r26, 0x00	; 0
    d0c6:	ed b7       	in	r30, 0x3d	; 61
    d0c8:	fe b7       	in	r31, 0x3e	; 62
    d0ca:	81 83       	std	Z+1, r24	; 0x01
    d0cc:	92 83       	std	Z+2, r25	; 0x02
    d0ce:	a3 83       	std	Z+3, r26	; 0x03
    d0d0:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>

    deselect();
    d0d4:	ad df       	rcall	.-166    	; 0xd030 <deselect>
    d0d6:	02 c0       	rjmp	.+4      	; 0xd0dc <select+0x36>
{
    CS_LOW();
    xchg_spi(0xFF);                               /* Dummy clock (force DO enabled) */

    if (wait_ready(1000))
        return 1;                                 /* OK */
    d0d8:	c1 e0       	ldi	r28, 0x01	; 1
    d0da:	d0 e0       	ldi	r29, 0x00	; 0

    printf("select failed!\n");

    deselect();
    return 0;                                     /* Timeout */
}
    d0dc:	ce 01       	movw	r24, r28
    d0de:	cd b7       	in	r28, 0x3d	; 61
    d0e0:	de b7       	in	r29, 0x3e	; 62
    d0e2:	23 96       	adiw	r28, 0x03	; 3
    d0e4:	e2 e0       	ldi	r30, 0x02	; 2
    d0e6:	0c 94 35 e3 	jmp	0x1c66a	; 0x1c66a <__epilogue_restores__+0x20>

0000d0ea <send_cmd>:
static
BYTE send_cmd (
BYTE cmd,                                         /*< Command index */
DWORD arg                                         /*< Argument */
)
{
    d0ea:	ff 92       	push	r15
    d0ec:	0f 93       	push	r16
    d0ee:	1f 93       	push	r17
    d0f0:	cf 93       	push	r28
    d0f2:	df 93       	push	r29
    d0f4:	c8 2f       	mov	r28, r24
    d0f6:	d4 2f       	mov	r29, r20
    d0f8:	15 2f       	mov	r17, r21
    d0fa:	06 2f       	mov	r16, r22
    d0fc:	f7 2e       	mov	r15, r23
    BYTE n, res;

    if (cmd & 0x80)                               /* ACMD<n> is the command sequense of CMD55-CMD<n> */
    d0fe:	87 ff       	sbrs	r24, 7
    d100:	08 c0       	rjmp	.+16     	; 0xd112 <send_cmd+0x28>
    {
        cmd &= 0x7F;
        res = send_cmd(CMD55, 0);
    d102:	40 e0       	ldi	r20, 0x00	; 0
    d104:	50 e0       	ldi	r21, 0x00	; 0
    d106:	ba 01       	movw	r22, r20
    d108:	87 e3       	ldi	r24, 0x37	; 55
    d10a:	ef df       	rcall	.-34     	; 0xd0ea <send_cmd>
        if (res > 1) return res;
    d10c:	82 30       	cpi	r24, 0x02	; 2
    d10e:	58 f5       	brcc	.+86     	; 0xd166 <send_cmd+0x7c>
{
    BYTE n, res;

    if (cmd & 0x80)                               /* ACMD<n> is the command sequense of CMD55-CMD<n> */
    {
        cmd &= 0x7F;
    d110:	cf 77       	andi	r28, 0x7F	; 127
        res = send_cmd(CMD55, 0);
        if (res > 1) return res;
    }

/* Select the card and wait for ready except to stop multiple block read */
    if (cmd != CMD12)
    d112:	cc 30       	cpi	r28, 0x0C	; 12
    d114:	71 f4       	brne	.+28     	; 0xd132 <send_cmd+0x48>
        deselect();
        if (!select()) return 0xFF;
    }

/* Send command packet */
    xchg_spi(0x40 | cmd);                         /* Start + Command index */
    d116:	8c 2f       	mov	r24, r28
    d118:	80 64       	ori	r24, 0x40	; 64
    d11a:	88 df       	rcall	.-240    	; 0xd02c <xchg_spi>
    xchg_spi((BYTE)(arg >> 24));                  /* Argument[31..24] */
    d11c:	8f 2d       	mov	r24, r15
    d11e:	86 df       	rcall	.-244    	; 0xd02c <xchg_spi>
    xchg_spi((BYTE)(arg >> 16));                  /* Argument[23..16] */
    d120:	80 2f       	mov	r24, r16
    d122:	84 df       	rcall	.-248    	; 0xd02c <xchg_spi>
    xchg_spi((BYTE)(arg >> 8));                   /* Argument[15..8] */
    d124:	81 2f       	mov	r24, r17
    d126:	82 df       	rcall	.-252    	; 0xd02c <xchg_spi>
    d128:	8d 2f       	mov	r24, r29
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    d12a:	80 df       	rcall	.-256    	; 0xd02c <xchg_spi>
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    d12c:	cc 23       	and	r28, r28
    d12e:	c9 f0       	breq	.+50     	; 0xd162 <send_cmd+0x78>
    d130:	06 c0       	rjmp	.+12     	; 0xd13e <send_cmd+0x54>
    }

/* Select the card and wait for ready except to stop multiple block read */
    if (cmd != CMD12)
    {
        deselect();
    d132:	7e df       	rcall	.-260    	; 0xd030 <deselect>
    d134:	b8 df       	rcall	.-144    	; 0xd0a6 <select>
        if (!select()) return 0xFF;
    d136:	89 2b       	or	r24, r25
    d138:	71 f7       	brne	.-36     	; 0xd116 <send_cmd+0x2c>
    d13a:	8f ef       	ldi	r24, 0xFF	; 255
    d13c:	14 c0       	rjmp	.+40     	; 0xd166 <send_cmd+0x7c>
    d13e:	c8 30       	cpi	r28, 0x08	; 8
    xchg_spi((BYTE)(arg >> 16));                  /* Argument[23..16] */
    xchg_spi((BYTE)(arg >> 8));                   /* Argument[15..8] */
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    if (cmd == CMD8) n = 0x87;                    /* Valid CRC for CMD8(0x1AA) Stop */
    d140:	11 f4       	brne	.+4      	; 0xd146 <send_cmd+0x5c>
    d142:	87 e8       	ldi	r24, 0x87	; 135
    d144:	01 c0       	rjmp	.+2      	; 0xd148 <send_cmd+0x5e>

    xchg_spi(n);
    d146:	81 e0       	ldi	r24, 0x01	; 1
    d148:	71 df       	rcall	.-286    	; 0xd02c <xchg_spi>

/* Receive command response */
    if (cmd == CMD12) xchg_spi(0xFF);             /* Skip a stuff byte when stop reading */
    d14a:	cc 30       	cpi	r28, 0x0C	; 12
    d14c:	11 f4       	brne	.+4      	; 0xd152 <send_cmd+0x68>
    d14e:	8f ef       	ldi	r24, 0xFF	; 255
    d150:	6d df       	rcall	.-294    	; 0xd02c <xchg_spi>
    d152:	ca e0       	ldi	r28, 0x0A	; 10
    xchg_spi((BYTE)(arg >> 16));                  /* Argument[23..16] */
    xchg_spi((BYTE)(arg >> 8));                   /* Argument[15..8] */
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    if (cmd == CMD8) n = 0x87;                    /* Valid CRC for CMD8(0x1AA) Stop */
    d154:	8f ef       	ldi	r24, 0xFF	; 255
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d156:	64 d4       	rcall	.+2248   	; 0xda20 <mmc_spi_TXRX>
    d158:	87 ff       	sbrs	r24, 7
    d15a:	05 c0       	rjmp	.+10     	; 0xd166 <send_cmd+0x7c>
    n = 10;                                       /* Wait for a valid response in timeout of 10 attempts */
    do
    {
        res = xchg_spi(0xFF);
    }
    while ((res & 0x80) && --n);
    d15c:	c1 50       	subi	r28, 0x01	; 1
    d15e:	d1 f7       	brne	.-12     	; 0xd154 <send_cmd+0x6a>
    d160:	02 c0       	rjmp	.+4      	; 0xd166 <send_cmd+0x7c>
    d162:	85 e9       	ldi	r24, 0x95	; 149
    d164:	f5 cf       	rjmp	.-22     	; 0xd150 <send_cmd+0x66>
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    if (cmd == CMD8) n = 0x87;                    /* Valid CRC for CMD8(0x1AA) Stop */

    xchg_spi(n);
    d166:	cd b7       	in	r28, 0x3d	; 61
    d168:	de b7       	in	r29, 0x3e	; 62
        res = xchg_spi(0xFF);
    }
    while ((res & 0x80) && --n);

    return res;                                   /* Return with the response value */
}
    d16a:	e5 e0       	ldi	r30, 0x05	; 5
    d16c:	0c 94 32 e3 	jmp	0x1c664	; 0x1c664 <__epilogue_restores__+0x1a>

0000d170 <xmit_datablock>:
    d170:	0f 93       	push	r16
    d172:	1f 93       	push	r17
static
int xmit_datablock (
const BYTE *buff,                                 /*< 512 byte data block to be transmitted */
BYTE token                                        /*< Data/Stop token */
)
{
    d174:	cf 93       	push	r28
    d176:	8c 01       	movw	r16, r24
    d178:	c6 2f       	mov	r28, r22
    BYTE resp;

    if (!wait_ready(1000)) return 0;
    d17a:	88 ee       	ldi	r24, 0xE8	; 232
    d17c:	93 e0       	ldi	r25, 0x03	; 3
    d17e:	81 df       	rcall	.-254    	; 0xd082 <wait_ready>
    d180:	00 97       	sbiw	r24, 0x00	; 0
    d182:	c9 f0       	breq	.+50     	; 0xd1b6 <xmit_datablock+0x46>

    xchg_spi(token);                              /* Xmit data token */
    d184:	8c 2f       	mov	r24, r28
    d186:	52 df       	rcall	.-348    	; 0xd02c <xchg_spi>
    if (token != 0xFD)                            /* Is data token */
    d188:	cd 3f       	cpi	r28, 0xFD	; 253
    d18a:	99 f0       	breq	.+38     	; 0xd1b2 <xmit_datablock+0x42>
void xmit_spi_multi (
const BYTE *p,                                    /* Data block to be sent */
UINT cnt                                          /* Size of data block */
)
{
    mmc_spi_TX_buffer((uint8_t *)p, cnt);
    d18c:	60 e0       	ldi	r22, 0x00	; 0
    d18e:	72 e0       	ldi	r23, 0x02	; 2
    d190:	c8 01       	movw	r24, r16
    xchg_spi(token);                              /* Xmit data token */
    if (token != 0xFD)                            /* Is data token */
    {
        xmit_spi_multi(buff, 512);                /* Xmit the data block to the MMC */

        xchg_spi(0xFF);                           /* CRC (Dummy) */
    d192:	40 d4       	rcall	.+2176   	; 0xda14 <mmc_spi_TX_buffer>
    d194:	8f ef       	ldi	r24, 0xFF	; 255
        xchg_spi(0xFF);
    d196:	4a df       	rcall	.-364    	; 0xd02c <xchg_spi>
    d198:	8f ef       	ldi	r24, 0xFF	; 255
    d19a:	48 df       	rcall	.-368    	; 0xd02c <xchg_spi>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d19c:	8f ef       	ldi	r24, 0xFF	; 255
    d19e:	40 d4       	rcall	.+2176   	; 0xda20 <mmc_spi_TXRX>
    d1a0:	8f 71       	andi	r24, 0x1F	; 31
BYTE token                                        /*< Data/Stop token */
)
{
    BYTE resp;

    if (!wait_ready(1000)) return 0;
    d1a2:	31 e0       	ldi	r19, 0x01	; 1
    d1a4:	20 e0       	ldi	r18, 0x00	; 0
    d1a6:	85 30       	cpi	r24, 0x05	; 5
    d1a8:	09 f0       	breq	.+2      	; 0xd1ac <xmit_datablock+0x3c>
    d1aa:	30 e0       	ldi	r19, 0x00	; 0
    d1ac:	83 2f       	mov	r24, r19
    d1ae:	92 2f       	mov	r25, r18
    d1b0:	02 c0       	rjmp	.+4      	; 0xd1b6 <xmit_datablock+0x46>
    d1b2:	81 e0       	ldi	r24, 0x01	; 1
        resp = xchg_spi(0xFF);                    /* Reveive data response */
        if ((resp & 0x1F) != 0x05)                /* If not accepted, return with error */
            return 0;
    }

    return 1;
    d1b4:	90 e0       	ldi	r25, 0x00	; 0
    d1b6:	cf 91       	pop	r28
}
    d1b8:	1f 91       	pop	r17
    d1ba:	0f 91       	pop	r16
    d1bc:	08 95       	ret

0000d1be <mmc_disk_initialize>:
    d1be:	a4 e0       	ldi	r26, 0x04	; 4

///@brief Initialize Disk Drive
///@return Stat
MEMSPACE
DSTATUS mmc_disk_initialize (void)
{
    d1c0:	b0 e0       	ldi	r27, 0x00	; 0
    d1c2:	e5 ee       	ldi	r30, 0xE5	; 229
    d1c4:	f8 e6       	ldi	r31, 0x68	; 104
    d1c6:	0c 94 13 e3 	jmp	0x1c626	; 0x1c626 <__prologue_saves__+0x14>
void power_off (void)
{
/* Disable SPI function */
/* De-configure MOSI/MISO/SCLK/CS pins (set hi-z) */
/* Turn socket power off (nothing to do if no power controls) */
    mmc_power_off();
    d1ca:	59 d4       	rcall	.+2226   	; 0xda7e <mmc_power_off>
DSTATUS mmc_disk_initialize (void)
{
    BYTE n, cmd, ty, ocr[4];

    power_off();                                  /* Turn off the socket power to reset the card */
    delayms(100);                                 /* Wait for 100ms */
    d1cc:	64 e6       	ldi	r22, 0x64	; 100
    d1ce:	70 e0       	ldi	r23, 0x00	; 0
    d1d0:	80 e0       	ldi	r24, 0x00	; 0
    d1d2:	90 e0       	ldi	r25, 0x00	; 0
    d1d4:	0e 94 ac 26 	call	0x4d58	; 0x4d58 <delayms>

    if (Stat & STA_NODISK) return Stat;           /* No card in the socket? */
    d1d8:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d1dc:	81 fd       	sbrc	r24, 1
void power_on (void)
{
/* Turn socket power on and wait for 10ms+ (nothing to do if no power controls) */
/* Configure MOSI/MISO/SCLK/CS pins */
/* Enable SPI module in SPI mode 0 */
    mmc_power_on();
    d1de:	8e c0       	rjmp	.+284    	; 0xd2fc <mmc_disk_initialize+0x13e>
    delayms(100);                                 /* Wait for 100ms */

    if (Stat & STA_NODISK) return Stat;           /* No card in the socket? */
    power_on();                                   /* Turn on the socket power */

    FCLK_SLOW();
    d1e0:	4d d4       	rcall	.+2202   	; 0xda7c <mmc_power_on>
    d1e2:	f9 d3       	rcall	.+2034   	; 0xd9d6 <mmc_slow>

    for (n = 10; n; n--) xchg_spi(0xFF);          /* 80 dummy clocks */
    d1e4:	1a e0       	ldi	r17, 0x0A	; 10
    d1e6:	8f ef       	ldi	r24, 0xFF	; 255
    d1e8:	21 df       	rcall	.-446    	; 0xd02c <xchg_spi>
    d1ea:	11 50       	subi	r17, 0x01	; 1
    d1ec:	e1 f7       	brne	.-8      	; 0xd1e6 <mmc_disk_initialize+0x28>

    ty = 0;
    if (send_cmd(CMD0, 0) == 1)                   /* Enter Idle state */
    d1ee:	40 e0       	ldi	r20, 0x00	; 0
    d1f0:	50 e0       	ldi	r21, 0x00	; 0
    d1f2:	ba 01       	movw	r22, r20
    d1f4:	80 e0       	ldi	r24, 0x00	; 0
    d1f6:	79 df       	rcall	.-270    	; 0xd0ea <send_cmd>
    d1f8:	81 30       	cpi	r24, 0x01	; 1
    d1fa:	09 f0       	breq	.+2      	; 0xd1fe <mmc_disk_initialize+0x40>
    {
        mmc_set_ms_timeout(2000);                 /* Initialization timeout of 1000 msec */
    d1fc:	6f c0       	rjmp	.+222    	; 0xd2dc <mmc_disk_initialize+0x11e>
    d1fe:	80 ed       	ldi	r24, 0xD0	; 208
    d200:	97 e0       	ldi	r25, 0x07	; 7
        if (send_cmd(CMD8, 0x1AA) == 1)           /* SDv2? */
    d202:	11 d4       	rcall	.+2082   	; 0xda26 <mmc_set_ms_timeout>
    d204:	4a ea       	ldi	r20, 0xAA	; 170
    d206:	51 e0       	ldi	r21, 0x01	; 1
    d208:	60 e0       	ldi	r22, 0x00	; 0
    d20a:	70 e0       	ldi	r23, 0x00	; 0
    d20c:	88 e0       	ldi	r24, 0x08	; 8
    d20e:	6d df       	rcall	.-294    	; 0xd0ea <send_cmd>
    d210:	81 30       	cpi	r24, 0x01	; 1
    d212:	09 f0       	breq	.+2      	; 0xd216 <mmc_disk_initialize+0x58>
    d214:	3d c0       	rjmp	.+122    	; 0xd290 <mmc_disk_initialize+0xd2>
    d216:	8e 01       	movw	r16, r28
    d218:	0f 5f       	subi	r16, 0xFF	; 255
    d21a:	1f 4f       	sbci	r17, 0xFF	; 255
    d21c:	6e 01       	movw	r12, r28
    d21e:	85 e0       	ldi	r24, 0x05	; 5
    d220:	c8 0e       	add	r12, r24
    d222:	d1 1c       	adc	r13, r1
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d224:	78 01       	movw	r14, r16
    d226:	8f ef       	ldi	r24, 0xFF	; 255
    d228:	fb d3       	rcall	.+2038   	; 0xda20 <mmc_spi_TXRX>
    {
        mmc_set_ms_timeout(2000);                 /* Initialization timeout of 1000 msec */
        if (send_cmd(CMD8, 0x1AA) == 1)           /* SDv2? */
        {
            for (n = 0; n < 4; n++)
                ocr[n] = xchg_spi(0xFF);          /* Get trailing return value of R7 resp */
    d22a:	f7 01       	movw	r30, r14
    d22c:	81 93       	st	Z+, r24
    d22e:	7f 01       	movw	r14, r30
    if (send_cmd(CMD0, 0) == 1)                   /* Enter Idle state */
    {
        mmc_set_ms_timeout(2000);                 /* Initialization timeout of 1000 msec */
        if (send_cmd(CMD8, 0x1AA) == 1)           /* SDv2? */
        {
            for (n = 0; n < 4; n++)
    d230:	ce 16       	cp	r12, r30
    d232:	df 06       	cpc	r13, r31
    d234:	c1 f7       	brne	.-16     	; 0xd226 <mmc_disk_initialize+0x68>
                ocr[n] = xchg_spi(0xFF);          /* Get trailing return value of R7 resp */
            if (ocr[2] == 0x01 && ocr[3] == 0xAA) /* The card can work at vdd range of 2.7-3.6V */
    d236:	8b 81       	ldd	r24, Y+3	; 0x03
    d238:	81 30       	cpi	r24, 0x01	; 1
    d23a:	09 f0       	breq	.+2      	; 0xd23e <mmc_disk_initialize+0x80>
    d23c:	4f c0       	rjmp	.+158    	; 0xd2dc <mmc_disk_initialize+0x11e>
    d23e:	8c 81       	ldd	r24, Y+4	; 0x04
    d240:	8a 3a       	cpi	r24, 0xAA	; 170
    d242:	09 f0       	breq	.+2      	; 0xd246 <mmc_disk_initialize+0x88>
            {
/* Wait for leaving idle state (ACMD41 with HCS bit) */
                while (!mmc_test_timeout() && send_cmd(ACMD41, 1UL << 30))
    d244:	4b c0       	rjmp	.+150    	; 0xd2dc <mmc_disk_initialize+0x11e>
    d246:	f6 d3       	rcall	.+2028   	; 0xda34 <mmc_test_timeout>
    d248:	89 2b       	or	r24, r25
    d24a:	29 f0       	breq	.+10     	; 0xd256 <mmc_disk_initialize+0x98>
                    ;
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
    d24c:	f3 d3       	rcall	.+2022   	; 0xda34 <mmc_test_timeout>
    d24e:	89 2b       	or	r24, r25
    d250:	09 f0       	breq	.+2      	; 0xd254 <mmc_disk_initialize+0x96>
    d252:	44 c0       	rjmp	.+136    	; 0xd2dc <mmc_disk_initialize+0x11e>
    d254:	09 c0       	rjmp	.+18     	; 0xd268 <mmc_disk_initialize+0xaa>
            for (n = 0; n < 4; n++)
                ocr[n] = xchg_spi(0xFF);          /* Get trailing return value of R7 resp */
            if (ocr[2] == 0x01 && ocr[3] == 0xAA) /* The card can work at vdd range of 2.7-3.6V */
            {
/* Wait for leaving idle state (ACMD41 with HCS bit) */
                while (!mmc_test_timeout() && send_cmd(ACMD41, 1UL << 30))
    d256:	40 e0       	ldi	r20, 0x00	; 0
    d258:	50 e0       	ldi	r21, 0x00	; 0
    d25a:	60 e0       	ldi	r22, 0x00	; 0
    d25c:	70 e4       	ldi	r23, 0x40	; 64
    d25e:	89 ea       	ldi	r24, 0xA9	; 169
    d260:	44 df       	rcall	.-376    	; 0xd0ea <send_cmd>
    d262:	81 11       	cpse	r24, r1
    d264:	f0 cf       	rjmp	.-32     	; 0xd246 <mmc_disk_initialize+0x88>
                    ;
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
    d266:	f2 cf       	rjmp	.-28     	; 0xd24c <mmc_disk_initialize+0x8e>
    d268:	40 e0       	ldi	r20, 0x00	; 0
    d26a:	50 e0       	ldi	r21, 0x00	; 0
    d26c:	ba 01       	movw	r22, r20
    d26e:	8a e3       	ldi	r24, 0x3A	; 58
    d270:	3c df       	rcall	.-392    	; 0xd0ea <send_cmd>
    d272:	81 11       	cpse	r24, r1
    d274:	33 c0       	rjmp	.+102    	; 0xd2dc <mmc_disk_initialize+0x11e>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d276:	8f ef       	ldi	r24, 0xFF	; 255
    d278:	d3 d3       	rcall	.+1958   	; 0xda20 <mmc_spi_TXRX>
    d27a:	f8 01       	movw	r30, r16
                while (!mmc_test_timeout() && send_cmd(ACMD41, 1UL << 30))
                    ;
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
                {
                    for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
    d27c:	81 93       	st	Z+, r24
    d27e:	8f 01       	movw	r16, r30
    d280:	ce 16       	cp	r12, r30
    d282:	df 06       	cpc	r13, r31
    d284:	c1 f7       	brne	.-16     	; 0xd276 <mmc_disk_initialize+0xb8>
/* Check if the card is SDv2 */
                    ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
    d286:	89 81       	ldd	r24, Y+1	; 0x01
    d288:	86 fd       	sbrc	r24, 6
    d28a:	2a c0       	rjmp	.+84     	; 0xd2e0 <mmc_disk_initialize+0x122>
    d28c:	14 e0       	ldi	r17, 0x04	; 4
    d28e:	29 c0       	rjmp	.+82     	; 0xd2e2 <mmc_disk_initialize+0x124>
                }
            }
        }
        else
        {                                         /* SDv1 or MMCv3 */
            mmc_set_ms_timeout(2000);             /* Initialization timeout of 2000 msec */
    d290:	80 ed       	ldi	r24, 0xD0	; 208
    d292:	97 e0       	ldi	r25, 0x07	; 7
    d294:	c8 d3       	rcall	.+1936   	; 0xda26 <mmc_set_ms_timeout>
            if (send_cmd(ACMD41, 0) <= 1)
    d296:	40 e0       	ldi	r20, 0x00	; 0
    d298:	50 e0       	ldi	r21, 0x00	; 0
    d29a:	ba 01       	movw	r22, r20
    d29c:	89 ea       	ldi	r24, 0xA9	; 169
    d29e:	25 df       	rcall	.-438    	; 0xd0ea <send_cmd>
    d2a0:	82 30       	cpi	r24, 0x02	; 2
    d2a2:	18 f0       	brcs	.+6      	; 0xd2aa <mmc_disk_initialize+0xec>
            {
                ty = CT_SD1; cmd = ACMD41;        /* SDv1 */
            }
            else
            {
                ty = CT_MMC; cmd = CMD1;          /* MMCv3 */
    d2a4:	11 e0       	ldi	r17, 0x01	; 1
    d2a6:	01 e0       	ldi	r16, 0x01	; 1
        else
        {                                         /* SDv1 or MMCv3 */
            mmc_set_ms_timeout(2000);             /* Initialization timeout of 2000 msec */
            if (send_cmd(ACMD41, 0) <= 1)
            {
                ty = CT_SD1; cmd = ACMD41;        /* SDv1 */
    d2a8:	02 c0       	rjmp	.+4      	; 0xd2ae <mmc_disk_initialize+0xf0>
    d2aa:	12 e0       	ldi	r17, 0x02	; 2
            else
            {
                ty = CT_MMC; cmd = CMD1;          /* MMCv3 */
            }
/* Wait for leaving idle state */
            while (!mmc_test_timeout() && send_cmd(cmd, 0))
    d2ac:	09 ea       	ldi	r16, 0xA9	; 169
    d2ae:	c2 d3       	rcall	.+1924   	; 0xda34 <mmc_test_timeout>
    d2b0:	89 2b       	or	r24, r25
    d2b2:	21 f0       	breq	.+8      	; 0xd2bc <mmc_disk_initialize+0xfe>
                ;
/* Set R/W block length to 512 */
            if (mmc_test_timeout() || send_cmd(CMD16, 512) != 0)
    d2b4:	bf d3       	rcall	.+1918   	; 0xda34 <mmc_test_timeout>
    d2b6:	89 2b       	or	r24, r25
    d2b8:	89 f4       	brne	.+34     	; 0xd2dc <mmc_disk_initialize+0x11e>
    d2ba:	08 c0       	rjmp	.+16     	; 0xd2cc <mmc_disk_initialize+0x10e>
            else
            {
                ty = CT_MMC; cmd = CMD1;          /* MMCv3 */
            }
/* Wait for leaving idle state */
            while (!mmc_test_timeout() && send_cmd(cmd, 0))
    d2bc:	40 e0       	ldi	r20, 0x00	; 0
    d2be:	50 e0       	ldi	r21, 0x00	; 0
    d2c0:	ba 01       	movw	r22, r20
    d2c2:	80 2f       	mov	r24, r16
    d2c4:	12 df       	rcall	.-476    	; 0xd0ea <send_cmd>
    d2c6:	81 11       	cpse	r24, r1
    d2c8:	f2 cf       	rjmp	.-28     	; 0xd2ae <mmc_disk_initialize+0xf0>
    d2ca:	f4 cf       	rjmp	.-24     	; 0xd2b4 <mmc_disk_initialize+0xf6>
                ;
/* Set R/W block length to 512 */
            if (mmc_test_timeout() || send_cmd(CMD16, 512) != 0)
    d2cc:	40 e0       	ldi	r20, 0x00	; 0
    d2ce:	52 e0       	ldi	r21, 0x02	; 2
    d2d0:	60 e0       	ldi	r22, 0x00	; 0
    d2d2:	70 e0       	ldi	r23, 0x00	; 0
    d2d4:	80 e1       	ldi	r24, 0x10	; 16
    d2d6:	09 df       	rcall	.-494    	; 0xd0ea <send_cmd>
    d2d8:	88 23       	and	r24, r24
                ty = 0;
    d2da:	19 f0       	breq	.+6      	; 0xd2e2 <mmc_disk_initialize+0x124>
    d2dc:	10 e0       	ldi	r17, 0x00	; 0
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
                {
                    for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
/* Check if the card is SDv2 */
                    ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
    d2de:	01 c0       	rjmp	.+2      	; 0xd2e2 <mmc_disk_initialize+0x124>
            if (mmc_test_timeout() || send_cmd(CMD16, 512) != 0)
                ty = 0;
        }
    }

    CardType = ty;
    d2e0:	1c e0       	ldi	r17, 0x0C	; 12
    d2e2:	10 93 2f 18 	sts	0x182F, r17	; 0x80182f <CardType>
    deselect();
    d2e6:	a4 de       	rcall	.-696    	; 0xd030 <deselect>

    if (ty)                                       /* Initialization succeded */
    d2e8:	11 23       	and	r17, r17
    d2ea:	39 f0       	breq	.+14     	; 0xd2fa <mmc_disk_initialize+0x13c>
    {
        Stat &= ~STA_NOINIT;                      /* Clear STA_NOINIT */
    d2ec:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d2f0:	8e 7f       	andi	r24, 0xFE	; 254
    d2f2:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Stat>
        FCLK_FAST();
    d2f6:	81 d3       	rcall	.+1794   	; 0xd9fa <mmc_fast>
    d2f8:	01 c0       	rjmp	.+2      	; 0xd2fc <mmc_disk_initialize+0x13e>
    d2fa:	c1 d3       	rcall	.+1922   	; 0xda7e <mmc_power_off>
void power_off (void)
{
/* Disable SPI function */
/* De-configure MOSI/MISO/SCLK/CS pins (set hi-z) */
/* Turn socket power off (nothing to do if no power controls) */
    mmc_power_off();
    d2fc:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    else
    {
        power_off();
    }

    return Stat;
    d300:	24 96       	adiw	r28, 0x04	; 4
    d302:	e8 e0       	ldi	r30, 0x08	; 8
}
    d304:	0c 94 2f e3 	jmp	0x1c65e	; 0x1c65e <__epilogue_restores__+0x14>

0000d308 <mmc_disk_status>:
    d308:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
/// @return STA_NOINIT if no drive
MEMSPACE
DSTATUS mmc_disk_status ( void )
{
    return Stat;
}
    d30c:	08 95       	ret

0000d30e <mmc_disk_read>:
DRESULT mmc_disk_read (
BYTE *buff,                                       /*< Pointer to the data buffer to store read data */
DWORD sector,                                     /*< Start sector number (LBA) */
UINT count                                        /*< Sector count (1..128) */
)
{
    d30e:	8f 92       	push	r8
    d310:	9f 92       	push	r9
    d312:	af 92       	push	r10
    d314:	bf 92       	push	r11
    d316:	ef 92       	push	r14
    d318:	ff 92       	push	r15
    d31a:	1f 93       	push	r17
    d31c:	cf 93       	push	r28
    d31e:	df 93       	push	r29
    d320:	7c 01       	movw	r14, r24
    d322:	4a 01       	movw	r8, r20
    d324:	5b 01       	movw	r10, r22
    d326:	e9 01       	movw	r28, r18
    BYTE cmd;

    if (!count)
    d328:	20 97       	sbiw	r28, 0x00	; 0
    d32a:	19 f4       	brne	.+6      	; 0xd332 <mmc_disk_read+0x24>
    {
        deselect();
    d32c:	81 de       	rcall	.-766    	; 0xd030 <deselect>
        return RES_PARERR;
    d32e:	84 e0       	ldi	r24, 0x04	; 4
    d330:	0d c0       	rjmp	.+26     	; 0xd34c <mmc_disk_read+0x3e>
    }

	if( Stat )
    d332:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d336:	88 23       	and	r24, r24
    d338:	19 f0       	breq	.+6      	; 0xd340 <mmc_disk_read+0x32>
		set_error(1);
    d33a:	81 e0       	ldi	r24, 0x01	; 1
    d33c:	0e 94 4c 25 	call	0x4a98	; 0x4a98 <set_error>

    if (Stat & STA_NOINIT)
    d340:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d344:	80 ff       	sbrs	r24, 0
    {
        deselect();
    d346:	04 c0       	rjmp	.+8      	; 0xd350 <mmc_disk_read+0x42>
    d348:	73 de       	rcall	.-794    	; 0xd030 <deselect>
        return RES_NOTRDY;
    d34a:	83 e0       	ldi	r24, 0x03	; 3
    d34c:	90 e0       	ldi	r25, 0x00	; 0
    d34e:	36 c0       	rjmp	.+108    	; 0xd3bc <mmc_disk_read+0xae>
    }
    if (Stat & STA_NODISK)
    d350:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d354:	81 fd       	sbrc	r24, 1
    d356:	f8 cf       	rjmp	.-16     	; 0xd348 <mmc_disk_read+0x3a>
    {
        deselect();
        return RES_NOTRDY;
	}
    GPIO_PIN_HI(LED1);
    d358:	46 9a       	sbi	0x08, 6	; 8
    d35a:	3e 9a       	sbi	0x07, 6	; 7

    if (!(CardType & CT_BLOCK)) sector *= 512;    /* Convert to byte address if needed */
    d35c:	80 91 2f 18 	lds	r24, 0x182F	; 0x80182f <CardType>
    d360:	83 fd       	sbrc	r24, 3
    d362:	07 c0       	rjmp	.+14     	; 0xd372 <mmc_disk_read+0x64>
    d364:	89 e0       	ldi	r24, 0x09	; 9
    d366:	88 0c       	add	r8, r8
    d368:	99 1c       	adc	r9, r9
    d36a:	aa 1c       	adc	r10, r10
    d36c:	bb 1c       	adc	r11, r11
    d36e:	8a 95       	dec	r24
    d370:	d1 f7       	brne	.-12     	; 0xd366 <mmc_disk_read+0x58>

    cmd = count > 1 ? CMD18 : CMD17;              /*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    d372:	c2 30       	cpi	r28, 0x02	; 2
    d374:	d1 05       	cpc	r29, r1
    d376:	10 f4       	brcc	.+4      	; 0xd37c <mmc_disk_read+0x6e>
    d378:	11 e1       	ldi	r17, 0x11	; 17
    d37a:	01 c0       	rjmp	.+2      	; 0xd37e <mmc_disk_read+0x70>
    d37c:	12 e1       	ldi	r17, 0x12	; 18
    if (send_cmd(cmd, sector) == 0)
    d37e:	b5 01       	movw	r22, r10
    d380:	a4 01       	movw	r20, r8
    d382:	81 2f       	mov	r24, r17
    d384:	b2 de       	rcall	.-668    	; 0xd0ea <send_cmd>
    d386:	81 11       	cpse	r24, r1
    d388:	11 c0       	rjmp	.+34     	; 0xd3ac <mmc_disk_read+0x9e>
    {
        do
        {
            if (!rcvr_datablock(buff, 512))
    d38a:	60 e0       	ldi	r22, 0x00	; 0
    d38c:	72 e0       	ldi	r23, 0x02	; 2
    d38e:	c7 01       	movw	r24, r14
    d390:	55 de       	rcall	.-854    	; 0xd03c <rcvr_datablock>
    d392:	89 2b       	or	r24, r25
    d394:	21 f0       	breq	.+8      	; 0xd39e <mmc_disk_read+0x90>
                break;
            buff += 512;
    d396:	8e ef       	ldi	r24, 0xFE	; 254
    d398:	f8 1a       	sub	r15, r24
        } while (--count);
    d39a:	21 97       	sbiw	r28, 0x01	; 1
    d39c:	b1 f7       	brne	.-20     	; 0xd38a <mmc_disk_read+0x7c>
        if (cmd == CMD18) send_cmd(CMD12, 0);     /* STOP_TRANSMISSION */
    d39e:	12 31       	cpi	r17, 0x12	; 18
    d3a0:	29 f4       	brne	.+10     	; 0xd3ac <mmc_disk_read+0x9e>
    d3a2:	40 e0       	ldi	r20, 0x00	; 0
    d3a4:	50 e0       	ldi	r21, 0x00	; 0
    d3a6:	ba 01       	movw	r22, r20
    d3a8:	8c e0       	ldi	r24, 0x0C	; 12
    }
    deselect();
    d3aa:	9f de       	rcall	.-706    	; 0xd0ea <send_cmd>
    d3ac:	41 de       	rcall	.-894    	; 0xd030 <deselect>
    GPIO_PIN_LOW(LED1);
    d3ae:	46 98       	cbi	0x08, 6	; 8
    d3b0:	3e 9a       	sbi	0x07, 6	; 7

    return count ? RES_ERROR : RES_OK;
    d3b2:	81 e0       	ldi	r24, 0x01	; 1
    d3b4:	90 e0       	ldi	r25, 0x00	; 0
    d3b6:	cd 2b       	or	r28, r29
    d3b8:	09 f4       	brne	.+2      	; 0xd3bc <mmc_disk_read+0xae>
    d3ba:	80 e0       	ldi	r24, 0x00	; 0
}
    d3bc:	df 91       	pop	r29
    d3be:	cf 91       	pop	r28
    d3c0:	1f 91       	pop	r17
    d3c2:	ff 90       	pop	r15
    d3c4:	ef 90       	pop	r14
    d3c6:	bf 90       	pop	r11
    d3c8:	af 90       	pop	r10
    d3ca:	9f 90       	pop	r9
    d3cc:	8f 90       	pop	r8
    d3ce:	08 95       	ret

0000d3d0 <mmc_disk_write>:
DRESULT mmc_disk_write (
const BYTE *buff,                                 /*< Pointer to the data to be written */
DWORD sector,                                     /*< Start sector number (LBA) */
UINT count                                        /* Sector count (1..128) */
)
{
    d3d0:	a0 e0       	ldi	r26, 0x00	; 0
    d3d2:	b0 e0       	ldi	r27, 0x00	; 0
    d3d4:	ee ee       	ldi	r30, 0xEE	; 238
    d3d6:	f9 e6       	ldi	r31, 0x69	; 105
    d3d8:	0c 94 13 e3 	jmp	0x1c626	; 0x1c626 <__prologue_saves__+0x14>
    d3dc:	8c 01       	movw	r16, r24
    d3de:	6a 01       	movw	r12, r20
    d3e0:	7b 01       	movw	r14, r22
    d3e2:	e9 01       	movw	r28, r18
    if (!count)
    d3e4:	20 97       	sbiw	r28, 0x00	; 0
    d3e6:	19 f4       	brne	.+6      	; 0xd3ee <mmc_disk_write+0x1e>
    {
        deselect();
    d3e8:	23 de       	rcall	.-954    	; 0xd030 <deselect>
        return RES_PARERR;
    d3ea:	84 e0       	ldi	r24, 0x04	; 4
    d3ec:	18 c0       	rjmp	.+48     	; 0xd41e <mmc_disk_write+0x4e>
    }

	if( Stat )
    d3ee:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d3f2:	88 23       	and	r24, r24
    d3f4:	19 f0       	breq	.+6      	; 0xd3fc <mmc_disk_write+0x2c>
		set_error(1);
    d3f6:	81 e0       	ldi	r24, 0x01	; 1
    d3f8:	0e 94 4c 25 	call	0x4a98	; 0x4a98 <set_error>

    if (Stat & STA_NOINIT)
    d3fc:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d400:	80 ff       	sbrs	r24, 0
    {
        deselect();
    d402:	03 c0       	rjmp	.+6      	; 0xd40a <mmc_disk_write+0x3a>
    d404:	15 de       	rcall	.-982    	; 0xd030 <deselect>
        return RES_NOTRDY;
    d406:	83 e0       	ldi	r24, 0x03	; 3
    d408:	0a c0       	rjmp	.+20     	; 0xd41e <mmc_disk_write+0x4e>
    }
    if (Stat & STA_NODISK)
    d40a:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d40e:	81 fd       	sbrc	r24, 1
    d410:	f9 cf       	rjmp	.-14     	; 0xd404 <mmc_disk_write+0x34>
    {
        deselect();
        return RES_NOTRDY;
	}
    if (Stat & STA_PROTECT)
    d412:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d416:	82 ff       	sbrs	r24, 2
    {
        deselect();
    d418:	04 c0       	rjmp	.+8      	; 0xd422 <mmc_disk_write+0x52>
    d41a:	0a de       	rcall	.-1004   	; 0xd030 <deselect>
        return RES_WRPRT;
    d41c:	82 e0       	ldi	r24, 0x02	; 2
    d41e:	90 e0       	ldi	r25, 0x00	; 0
    d420:	46 c0       	rjmp	.+140    	; 0xd4ae <mmc_disk_write+0xde>
    }

    GPIO_PIN_HI(LED1);
    d422:	46 9a       	sbi	0x08, 6	; 8
    d424:	3e 9a       	sbi	0x07, 6	; 7

    if (!(CardType & CT_BLOCK)) sector *= 512;    /* Convert to byte address if needed */
    d426:	80 91 2f 18 	lds	r24, 0x182F	; 0x80182f <CardType>
    d42a:	83 fd       	sbrc	r24, 3
    d42c:	07 c0       	rjmp	.+14     	; 0xd43c <mmc_disk_write+0x6c>
    d42e:	99 e0       	ldi	r25, 0x09	; 9
    d430:	cc 0c       	add	r12, r12
    d432:	dd 1c       	adc	r13, r13
    d434:	ee 1c       	adc	r14, r14
    d436:	ff 1c       	adc	r15, r15
    d438:	9a 95       	dec	r25
    d43a:	d1 f7       	brne	.-12     	; 0xd430 <mmc_disk_write+0x60>

    if (count == 1)                               /* Single block write */
    d43c:	c1 30       	cpi	r28, 0x01	; 1
    d43e:	d1 05       	cpc	r29, r1
    d440:	89 f4       	brne	.+34     	; 0xd464 <mmc_disk_write+0x94>
    {
        if ((send_cmd(CMD24, sector) == 0)        /* WRITE_BLOCK */
    d442:	b7 01       	movw	r22, r14
    d444:	a6 01       	movw	r20, r12
    d446:	88 e1       	ldi	r24, 0x18	; 24
    d448:	50 de       	rcall	.-864    	; 0xd0ea <send_cmd>
    d44a:	81 11       	cpse	r24, r1
            && xmit_datablock(buff, 0xFE))
    d44c:	26 c0       	rjmp	.+76     	; 0xd49a <mmc_disk_write+0xca>
    d44e:	6e ef       	ldi	r22, 0xFE	; 254
    d450:	c8 01       	movw	r24, r16
    d452:	8e de       	rcall	.-740    	; 0xd170 <xmit_datablock>
    d454:	31 e0       	ldi	r19, 0x01	; 1
    d456:	20 e0       	ldi	r18, 0x00	; 0
    d458:	89 2b       	or	r24, r25
    d45a:	09 f0       	breq	.+2      	; 0xd45e <mmc_disk_write+0x8e>
    d45c:	30 e0       	ldi	r19, 0x00	; 0
    d45e:	c3 2f       	mov	r28, r19
    d460:	d2 2f       	mov	r29, r18
    d462:	1d c0       	rjmp	.+58     	; 0xd49e <mmc_disk_write+0xce>
            count = 0;
    }
    else                                          /* Multiple block write */
    {
        if (CardType & CT_SDC) send_cmd(ACMD23, count);
    d464:	86 70       	andi	r24, 0x06	; 6
    d466:	29 f0       	breq	.+10     	; 0xd472 <mmc_disk_write+0xa2>
    d468:	ae 01       	movw	r20, r28
    d46a:	60 e0       	ldi	r22, 0x00	; 0
    d46c:	70 e0       	ldi	r23, 0x00	; 0
    d46e:	87 e9       	ldi	r24, 0x97	; 151
        if (send_cmd(CMD25, sector) == 0)         /* WRITE_MULTIPLE_BLOCK */
    d470:	3c de       	rcall	.-904    	; 0xd0ea <send_cmd>
    d472:	b7 01       	movw	r22, r14
    d474:	a6 01       	movw	r20, r12
    d476:	89 e1       	ldi	r24, 0x19	; 25
    d478:	38 de       	rcall	.-912    	; 0xd0ea <send_cmd>
    d47a:	81 11       	cpse	r24, r1
        {
            do
            {
                if (!xmit_datablock(buff, 0xFC)) break;
    d47c:	10 c0       	rjmp	.+32     	; 0xd49e <mmc_disk_write+0xce>
    d47e:	6c ef       	ldi	r22, 0xFC	; 252
    d480:	c8 01       	movw	r24, r16
    d482:	76 de       	rcall	.-788    	; 0xd170 <xmit_datablock>
    d484:	89 2b       	or	r24, r25
                buff += 512;
    d486:	19 f0       	breq	.+6      	; 0xd48e <mmc_disk_write+0xbe>
            } while (--count);
    d488:	1e 5f       	subi	r17, 0xFE	; 254
    d48a:	21 97       	sbiw	r28, 0x01	; 1
            if (!xmit_datablock(0, 0xFD))         /* STOP_TRAN token */
    d48c:	c1 f7       	brne	.-16     	; 0xd47e <mmc_disk_write+0xae>
    d48e:	6d ef       	ldi	r22, 0xFD	; 253
    d490:	80 e0       	ldi	r24, 0x00	; 0
    d492:	90 e0       	ldi	r25, 0x00	; 0
    d494:	6d de       	rcall	.-806    	; 0xd170 <xmit_datablock>
    d496:	89 2b       	or	r24, r25
                count = 1;
    d498:	11 f4       	brne	.+4      	; 0xd49e <mmc_disk_write+0xce>
    d49a:	c1 e0       	ldi	r28, 0x01	; 1
        }
    }
    deselect();
    d49c:	d0 e0       	ldi	r29, 0x00	; 0
    d49e:	c8 dd       	rcall	.-1136   	; 0xd030 <deselect>
    GPIO_PIN_LOW(LED1);
    d4a0:	46 98       	cbi	0x08, 6	; 8
    d4a2:	3e 9a       	sbi	0x07, 6	; 7

    return count ? RES_ERROR : RES_OK;
    d4a4:	81 e0       	ldi	r24, 0x01	; 1
    d4a6:	90 e0       	ldi	r25, 0x00	; 0
    d4a8:	cd 2b       	or	r28, r29
    d4aa:	09 f4       	brne	.+2      	; 0xd4ae <mmc_disk_write+0xde>
    d4ac:	80 e0       	ldi	r24, 0x00	; 0
}
    d4ae:	cd b7       	in	r28, 0x3d	; 61
    d4b0:	de b7       	in	r29, 0x3e	; 62
    d4b2:	e8 e0       	ldi	r30, 0x08	; 8
    d4b4:	0c 94 2f e3 	jmp	0x1c65e	; 0x1c65e <__epilogue_restores__+0x14>

0000d4b8 <mmc_disk_ioctl>:
MEMSPACE
DRESULT mmc_disk_ioctl (
BYTE cmd,                                         /* Control code */
void *buff                                        /* Buffer to send/receive control data */
)
{
    d4b8:	a0 e1       	ldi	r26, 0x10	; 16
    d4ba:	b0 e0       	ldi	r27, 0x00	; 0
    d4bc:	e2 e6       	ldi	r30, 0x62	; 98
    d4be:	fa e6       	ldi	r31, 0x6A	; 106
    d4c0:	0c 94 13 e3 	jmp	0x1c626	; 0x1c626 <__prologue_saves__+0x14>
    SDIO_CTRL *sdi;
    BYTE rc, *bp;
    UINT dc;
#endif

    if (Stat & STA_NOINIT)
    d4c4:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <Stat>
    d4c8:	90 fd       	sbrc	r25, 0
    d4ca:	31 c2       	rjmp	.+1122   	; 0xd92e <mmc_disk_ioctl+0x476>
    d4cc:	8b 01       	movw	r16, r22
        return RES_NOTRDY;

    if (Stat & STA_NODISK)
    d4ce:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <Stat>
    d4d2:	91 ff       	sbrs	r25, 1
    d4d4:	02 c0       	rjmp	.+4      	; 0xd4da <mmc_disk_ioctl+0x22>
    {
        deselect();
    d4d6:	ac dd       	rcall	.-1192   	; 0xd030 <deselect>
    d4d8:	2a c2       	rjmp	.+1108   	; 0xd92e <mmc_disk_ioctl+0x476>
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    switch (cmd)
    d4da:	83 33       	cpi	r24, 0x33	; 51
    d4dc:	09 f4       	brne	.+2      	; 0xd4e0 <mmc_disk_ioctl+0x28>
    d4de:	01 c1       	rjmp	.+514    	; 0xd6e2 <mmc_disk_ioctl+0x22a>
    d4e0:	a0 f4       	brcc	.+40     	; 0xd50a <mmc_disk_ioctl+0x52>
    d4e2:	83 30       	cpi	r24, 0x03	; 3
    d4e4:	09 f4       	brne	.+2      	; 0xd4e8 <mmc_disk_ioctl+0x30>
    d4e6:	85 c0       	rjmp	.+266    	; 0xd5f2 <mmc_disk_ioctl+0x13a>
    d4e8:	28 f4       	brcc	.+10     	; 0xd4f4 <mmc_disk_ioctl+0x3c>
    d4ea:	88 23       	and	r24, r24
    d4ec:	11 f1       	breq	.+68     	; 0xd532 <mmc_disk_ioctl+0x7a>
    d4ee:	81 30       	cpi	r24, 0x01	; 1
    d4f0:	11 f1       	breq	.+68     	; 0xd536 <mmc_disk_ioctl+0x7e>
    d4f2:	1f c2       	rjmp	.+1086   	; 0xd932 <mmc_disk_ioctl+0x47a>
    d4f4:	87 30       	cpi	r24, 0x07	; 7
    d4f6:	09 f4       	brne	.+2      	; 0xd4fa <mmc_disk_ioctl+0x42>
    d4f8:	2a c1       	rjmp	.+596    	; 0xd74e <mmc_disk_ioctl+0x296>
    d4fa:	82 33       	cpi	r24, 0x32	; 50
    d4fc:	09 f0       	breq	.+2      	; 0xd500 <mmc_disk_ioctl+0x48>
    d4fe:	19 c2       	rjmp	.+1074   	; 0xd932 <mmc_disk_ioctl+0x47a>
#endif

/* Following commands are never used by FatFs module */

        case MMC_GET_TYPE :                       /* Get card type flags (1 byte) */
            *ptr = CardType;
    d500:	80 91 2f 18 	lds	r24, 0x182F	; 0x80182f <CardType>
    d504:	fb 01       	movw	r30, r22
    d506:	80 83       	st	Z, r24
    d508:	28 c1       	rjmp	.+592    	; 0xd75a <mmc_disk_ioctl+0x2a2>
        deselect();
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    switch (cmd)
    d50a:	86 33       	cpi	r24, 0x36	; 54
    d50c:	09 f4       	brne	.+2      	; 0xd510 <mmc_disk_ioctl+0x58>
    d50e:	0c c1       	rjmp	.+536    	; 0xd728 <mmc_disk_ioctl+0x270>
    d510:	38 f4       	brcc	.+14     	; 0xd520 <mmc_disk_ioctl+0x68>
    d512:	84 33       	cpi	r24, 0x34	; 52
    d514:	09 f4       	brne	.+2      	; 0xd518 <mmc_disk_ioctl+0x60>
    d516:	ea c0       	rjmp	.+468    	; 0xd6ec <mmc_disk_ioctl+0x234>
    d518:	85 33       	cpi	r24, 0x35	; 53
    d51a:	09 f4       	brne	.+2      	; 0xd51e <mmc_disk_ioctl+0x66>
    d51c:	f1 c0       	rjmp	.+482    	; 0xd700 <mmc_disk_ioctl+0x248>
    d51e:	09 c2       	rjmp	.+1042   	; 0xd932 <mmc_disk_ioctl+0x47a>
    d520:	88 33       	cpi	r24, 0x38	; 56
    d522:	09 f4       	brne	.+2      	; 0xd526 <mmc_disk_ioctl+0x6e>
    d524:	74 c1       	rjmp	.+744    	; 0xd80e <mmc_disk_ioctl+0x356>
    d526:	08 f4       	brcc	.+2      	; 0xd52a <mmc_disk_ioctl+0x72>
    d528:	1a c1       	rjmp	.+564    	; 0xd75e <mmc_disk_ioctl+0x2a6>
    d52a:	89 33       	cpi	r24, 0x39	; 57
    d52c:	09 f4       	brne	.+2      	; 0xd530 <mmc_disk_ioctl+0x78>
    d52e:	bc c1       	rjmp	.+888    	; 0xd8a8 <mmc_disk_ioctl+0x3f0>
    {
        case CTRL_SYNC :                          /* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
            if (select()) res = RES_OK;
    d530:	00 c2       	rjmp	.+1024   	; 0xd932 <mmc_disk_ioctl+0x47a>
    d532:	b9 dd       	rcall	.-1166   	; 0xd0a6 <select>
    d534:	06 c1       	rjmp	.+524    	; 0xd742 <mmc_disk_ioctl+0x28a>
            deselect();
            break;

        case GET_SECTOR_COUNT :                   /* Get number of sectors on the disk (DWORD) */
            if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16))
    d536:	40 e0       	ldi	r20, 0x00	; 0
    d538:	50 e0       	ldi	r21, 0x00	; 0
    d53a:	ba 01       	movw	r22, r20
    d53c:	89 e0       	ldi	r24, 0x09	; 9
    d53e:	d5 dd       	rcall	.-1110   	; 0xd0ea <send_cmd>
    d540:	81 11       	cpse	r24, r1
    d542:	f1 c1       	rjmp	.+994    	; 0xd926 <mmc_disk_ioctl+0x46e>
    d544:	60 e1       	ldi	r22, 0x10	; 16
    d546:	70 e0       	ldi	r23, 0x00	; 0
    d548:	ce 01       	movw	r24, r28
    d54a:	01 96       	adiw	r24, 0x01	; 1
    d54c:	77 dd       	rcall	.-1298   	; 0xd03c <rcvr_datablock>
    d54e:	89 2b       	or	r24, r25
    d550:	09 f4       	brne	.+2      	; 0xd554 <mmc_disk_ioctl+0x9c>
    d552:	e9 c1       	rjmp	.+978    	; 0xd926 <mmc_disk_ioctl+0x46e>
            {
                if ((csd[0] >> 6) == 1)           /* SDC ver 2.00 */
    d554:	99 81       	ldd	r25, Y+1	; 0x01
    d556:	92 95       	swap	r25
    d558:	96 95       	lsr	r25
    d55a:	96 95       	lsr	r25
    d55c:	93 70       	andi	r25, 0x03	; 3
    d55e:	29 85       	ldd	r18, Y+9	; 0x09
    d560:	4a 85       	ldd	r20, Y+10	; 0x0a
    d562:	88 85       	ldd	r24, Y+8	; 0x08
    d564:	91 30       	cpi	r25, 0x01	; 1
    d566:	d9 f4       	brne	.+54     	; 0xd59e <mmc_disk_ioctl+0xe6>
                {
                    csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
                    *(DWORD*)buff = csize << 10;
    d568:	30 e0       	ldi	r19, 0x00	; 0
    d56a:	32 2f       	mov	r19, r18
    d56c:	22 27       	eor	r18, r18
    d56e:	24 0f       	add	r18, r20
    d570:	31 1d       	adc	r19, r1
    d572:	8f 73       	andi	r24, 0x3F	; 63
    d574:	90 e0       	ldi	r25, 0x00	; 0
    d576:	a0 e0       	ldi	r26, 0x00	; 0
    d578:	b0 e0       	ldi	r27, 0x00	; 0
    d57a:	dc 01       	movw	r26, r24
    d57c:	99 27       	eor	r25, r25
    d57e:	88 27       	eor	r24, r24
    d580:	01 96       	adiw	r24, 0x01	; 1
    d582:	a1 1d       	adc	r26, r1
    d584:	b1 1d       	adc	r27, r1
    d586:	82 0f       	add	r24, r18
    d588:	93 1f       	adc	r25, r19
    d58a:	a1 1d       	adc	r26, r1
    d58c:	b1 1d       	adc	r27, r1
    d58e:	fa e0       	ldi	r31, 0x0A	; 10
    d590:	88 0f       	add	r24, r24
    d592:	99 1f       	adc	r25, r25
    d594:	aa 1f       	adc	r26, r26
    d596:	bb 1f       	adc	r27, r27
    d598:	fa 95       	dec	r31
    d59a:	d1 f7       	brne	.-12     	; 0xd590 <mmc_disk_ioctl+0xd8>
    d59c:	9b c0       	rjmp	.+310    	; 0xd6d4 <mmc_disk_ioctl+0x21c>
                }                                 /* SDC ver 1.XX or MMC*/
                else
                {
                    n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
                    csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
                    *(DWORD*)buff = csize << (n - 9);
    d59e:	22 95       	swap	r18
    d5a0:	26 95       	lsr	r18
    d5a2:	26 95       	lsr	r18
    d5a4:	23 70       	andi	r18, 0x03	; 3
    d5a6:	f4 e0       	ldi	r31, 0x04	; 4
    d5a8:	8f 9f       	mul	r24, r31
    d5aa:	c0 01       	movw	r24, r0
    d5ac:	11 24       	eor	r1, r1
    d5ae:	82 0f       	add	r24, r18
    d5b0:	91 1d       	adc	r25, r1
    d5b2:	01 96       	adiw	r24, 0x01	; 1
    d5b4:	2f 81       	ldd	r18, Y+7	; 0x07
    d5b6:	23 70       	andi	r18, 0x03	; 3
    d5b8:	30 e0       	ldi	r19, 0x00	; 0
    d5ba:	32 2f       	mov	r19, r18
    d5bc:	22 27       	eor	r18, r18
    d5be:	33 0f       	add	r19, r19
    d5c0:	33 0f       	add	r19, r19
    d5c2:	82 0f       	add	r24, r18
    d5c4:	93 1f       	adc	r25, r19
    d5c6:	a0 e0       	ldi	r26, 0x00	; 0
    d5c8:	b0 e0       	ldi	r27, 0x00	; 0
    d5ca:	2e 81       	ldd	r18, Y+6	; 0x06
    d5cc:	32 2f       	mov	r19, r18
    d5ce:	3f 70       	andi	r19, 0x0F	; 15
    d5d0:	2b 85       	ldd	r18, Y+11	; 0x0b
    d5d2:	22 1f       	adc	r18, r18
    d5d4:	22 27       	eor	r18, r18
    d5d6:	22 1f       	adc	r18, r18
    d5d8:	23 0f       	add	r18, r19
    d5da:	43 70       	andi	r20, 0x03	; 3
    d5dc:	44 0f       	add	r20, r20
    d5de:	42 0f       	add	r20, r18
    d5e0:	47 50       	subi	r20, 0x07	; 7
    d5e2:	04 c0       	rjmp	.+8      	; 0xd5ec <mmc_disk_ioctl+0x134>
    d5e4:	88 0f       	add	r24, r24
    d5e6:	99 1f       	adc	r25, r25
    d5e8:	aa 1f       	adc	r26, r26
    d5ea:	bb 1f       	adc	r27, r27
    d5ec:	4a 95       	dec	r20
    d5ee:	d2 f7       	brpl	.-12     	; 0xd5e4 <mmc_disk_ioctl+0x12c>
    d5f0:	71 c0       	rjmp	.+226    	; 0xd6d4 <mmc_disk_ioctl+0x21c>
            }
            deselect();
            break;

        case GET_BLOCK_SIZE :                     /* Get erase block size in unit of sector (DWORD) */
            if (CardType & CT_SD2)                /* SDv2? */
    d5f2:	80 91 2f 18 	lds	r24, 0x182F	; 0x80182f <CardType>
            {
                if (send_cmd(ACMD13, 0) == 0)     /* Read SD status */
    d5f6:	40 e0       	ldi	r20, 0x00	; 0
    d5f8:	50 e0       	ldi	r21, 0x00	; 0
            }
            deselect();
            break;

        case GET_BLOCK_SIZE :                     /* Get erase block size in unit of sector (DWORD) */
            if (CardType & CT_SD2)                /* SDv2? */
    d5fa:	ba 01       	movw	r22, r20
    d5fc:	82 ff       	sbrs	r24, 2
            {
                if (send_cmd(ACMD13, 0) == 0)     /* Read SD status */
    d5fe:	24 c0       	rjmp	.+72     	; 0xd648 <mmc_disk_ioctl+0x190>
    d600:	8d e8       	ldi	r24, 0x8D	; 141
    d602:	73 dd       	rcall	.-1306   	; 0xd0ea <send_cmd>
    d604:	81 11       	cpse	r24, r1
                {
                    xchg_spi(0xFF);
    d606:	8f c1       	rjmp	.+798    	; 0xd926 <mmc_disk_ioctl+0x46e>
    d608:	8f ef       	ldi	r24, 0xFF	; 255
                    if (rcvr_datablock(csd, 16))  /* Read partial block */
    d60a:	10 dd       	rcall	.-1504   	; 0xd02c <xchg_spi>
    d60c:	60 e1       	ldi	r22, 0x10	; 16
    d60e:	70 e0       	ldi	r23, 0x00	; 0
    d610:	ce 01       	movw	r24, r28
    d612:	01 96       	adiw	r24, 0x01	; 1
    d614:	13 dd       	rcall	.-1498   	; 0xd03c <rcvr_datablock>
    d616:	89 2b       	or	r24, r25
    d618:	09 f4       	brne	.+2      	; 0xd61c <mmc_disk_ioctl+0x164>
    d61a:	85 c1       	rjmp	.+778    	; 0xd926 <mmc_disk_ioctl+0x46e>
    d61c:	50 e3       	ldi	r21, 0x30	; 48
                    {
/* Purge trailing data */
                        for (n = 64 - 16; n; n--) xchg_spi(0xFF);
    d61e:	f5 2e       	mov	r15, r21
    d620:	8f ef       	ldi	r24, 0xFF	; 255
    d622:	04 dd       	rcall	.-1528   	; 0xd02c <xchg_spi>
    d624:	fa 94       	dec	r15
    d626:	f1 10       	cpse	r15, r1
    d628:	fb cf       	rjmp	.-10     	; 0xd620 <mmc_disk_ioctl+0x168>
                        *(DWORD*)buff = 16UL << (csd[10] >> 4);
    d62a:	2b 85       	ldd	r18, Y+11	; 0x0b
    d62c:	22 95       	swap	r18
    d62e:	2f 70       	andi	r18, 0x0F	; 15
    d630:	80 e1       	ldi	r24, 0x10	; 16
    d632:	90 e0       	ldi	r25, 0x00	; 0
    d634:	a0 e0       	ldi	r26, 0x00	; 0
    d636:	b0 e0       	ldi	r27, 0x00	; 0
    d638:	04 c0       	rjmp	.+8      	; 0xd642 <mmc_disk_ioctl+0x18a>
    d63a:	88 0f       	add	r24, r24
    d63c:	99 1f       	adc	r25, r25
    d63e:	aa 1f       	adc	r26, r26
    d640:	bb 1f       	adc	r27, r27
    d642:	2a 95       	dec	r18
    d644:	d2 f7       	brpl	.-12     	; 0xd63a <mmc_disk_ioctl+0x182>
                }
            }                                     /* SDv1 or MMCv3 */
            else
            {
/* Read CSD */
                if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16))
    d646:	46 c0       	rjmp	.+140    	; 0xd6d4 <mmc_disk_ioctl+0x21c>
    d648:	89 e0       	ldi	r24, 0x09	; 9
    d64a:	4f dd       	rcall	.-1378   	; 0xd0ea <send_cmd>
    d64c:	81 11       	cpse	r24, r1
    d64e:	6b c1       	rjmp	.+726    	; 0xd926 <mmc_disk_ioctl+0x46e>
    d650:	60 e1       	ldi	r22, 0x10	; 16
    d652:	70 e0       	ldi	r23, 0x00	; 0
    d654:	ce 01       	movw	r24, r28
    d656:	01 96       	adiw	r24, 0x01	; 1
    d658:	f1 dc       	rcall	.-1566   	; 0xd03c <rcvr_datablock>
    d65a:	89 2b       	or	r24, r25
    d65c:	09 f4       	brne	.+2      	; 0xd660 <mmc_disk_ioctl+0x1a8>
    d65e:	63 c1       	rjmp	.+710    	; 0xd926 <mmc_disk_ioctl+0x46e>
                {
                    if (CardType & CT_SD1)        /* SDv1 */
    d660:	90 91 2f 18 	lds	r25, 0x182F	; 0x80182f <CardType>
    d664:	2b 85       	ldd	r18, Y+11	; 0x0b
    d666:	8c 85       	ldd	r24, Y+12	; 0x0c
    d668:	91 ff       	sbrs	r25, 1
    d66a:	16 c0       	rjmp	.+44     	; 0xd698 <mmc_disk_ioctl+0x1e0>
                    {
                        *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    d66c:	2f 73       	andi	r18, 0x3F	; 63
    d66e:	88 1f       	adc	r24, r24
    d670:	88 27       	eor	r24, r24
    d672:	88 1f       	adc	r24, r24
    d674:	90 e0       	ldi	r25, 0x00	; 0
    d676:	01 96       	adiw	r24, 0x01	; 1
    d678:	82 0f       	add	r24, r18
    d67a:	91 1d       	adc	r25, r1
    d67c:	82 0f       	add	r24, r18
    d67e:	91 1d       	adc	r25, r1
    d680:	2e 85       	ldd	r18, Y+14	; 0x0e
    d682:	22 95       	swap	r18
    d684:	26 95       	lsr	r18
    d686:	26 95       	lsr	r18
    d688:	23 70       	andi	r18, 0x03	; 3
    d68a:	21 50       	subi	r18, 0x01	; 1
    d68c:	02 c0       	rjmp	.+4      	; 0xd692 <mmc_disk_ioctl+0x1da>
    d68e:	88 0f       	add	r24, r24
    d690:	99 1f       	adc	r25, r25
    d692:	2a 95       	dec	r18
    d694:	e2 f7       	brpl	.-8      	; 0xd68e <mmc_disk_ioctl+0x1d6>
    d696:	1c c0       	rjmp	.+56     	; 0xd6d0 <mmc_disk_ioctl+0x218>
                    }                             /* MMCv3 */
                    else
                    {
                        *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    d698:	38 2f       	mov	r19, r24
    d69a:	33 70       	andi	r19, 0x03	; 3
    d69c:	82 95       	swap	r24
    d69e:	86 95       	lsr	r24
    d6a0:	87 70       	andi	r24, 0x07	; 7
    d6a2:	90 e0       	ldi	r25, 0x00	; 0
    d6a4:	f8 e0       	ldi	r31, 0x08	; 8
    d6a6:	3f 9f       	mul	r19, r31
    d6a8:	80 0d       	add	r24, r0
    d6aa:	91 1d       	adc	r25, r1
    d6ac:	11 24       	eor	r1, r1
    d6ae:	01 96       	adiw	r24, 0x01	; 1
    d6b0:	2c 77       	andi	r18, 0x7C	; 124
    d6b2:	30 e0       	ldi	r19, 0x00	; 0
    d6b4:	35 95       	asr	r19
    d6b6:	27 95       	ror	r18
    d6b8:	35 95       	asr	r19
    d6ba:	27 95       	ror	r18
    d6bc:	2f 5f       	subi	r18, 0xFF	; 255
    d6be:	3f 4f       	sbci	r19, 0xFF	; 255
    d6c0:	82 9f       	mul	r24, r18
    d6c2:	a0 01       	movw	r20, r0
    d6c4:	83 9f       	mul	r24, r19
    d6c6:	50 0d       	add	r21, r0
    d6c8:	92 9f       	mul	r25, r18
    d6ca:	50 0d       	add	r21, r0
    d6cc:	11 24       	eor	r1, r1
    d6ce:	ca 01       	movw	r24, r20
    d6d0:	a0 e0       	ldi	r26, 0x00	; 0
    d6d2:	b0 e0       	ldi	r27, 0x00	; 0
    d6d4:	f8 01       	movw	r30, r16
    d6d6:	80 83       	st	Z, r24
    d6d8:	91 83       	std	Z+1, r25	; 0x01
    d6da:	a2 83       	std	Z+2, r26	; 0x02
    d6dc:	b3 83       	std	Z+3, r27	; 0x03
                    }
                    res = RES_OK;
    d6de:	00 e0       	ldi	r16, 0x00	; 0
            res = RES_OK;
            break;

        case MMC_GET_CSD :                        /* Receive CSD as a data block (16 bytes) */
/* READ_CSD */
            if (send_cmd(CMD9, 0) == 0 && rcvr_datablock(ptr, 16))
    d6e0:	23 c1       	rjmp	.+582    	; 0xd928 <mmc_disk_ioctl+0x470>
    d6e2:	40 e0       	ldi	r20, 0x00	; 0
    d6e4:	50 e0       	ldi	r21, 0x00	; 0
    d6e6:	ba 01       	movw	r22, r20
    d6e8:	89 e0       	ldi	r24, 0x09	; 9
            deselect();
            break;

        case MMC_GET_CID :                        /* Receive CID as a data block (16 bytes) */
/* READ_CID */
            if (send_cmd(CMD10, 0) == 0 && rcvr_datablock(ptr, 16))
    d6ea:	04 c0       	rjmp	.+8      	; 0xd6f4 <mmc_disk_ioctl+0x23c>
    d6ec:	40 e0       	ldi	r20, 0x00	; 0
    d6ee:	50 e0       	ldi	r21, 0x00	; 0
    d6f0:	ba 01       	movw	r22, r20
    d6f2:	8a e0       	ldi	r24, 0x0A	; 10
    d6f4:	fa dc       	rcall	.-1548   	; 0xd0ea <send_cmd>
    d6f6:	81 11       	cpse	r24, r1
    d6f8:	16 c1       	rjmp	.+556    	; 0xd926 <mmc_disk_ioctl+0x46e>
    d6fa:	60 e1       	ldi	r22, 0x10	; 16
    d6fc:	70 e0       	ldi	r23, 0x00	; 0
                res = RES_OK;
            deselect();
            break;

        case MMC_GET_OCR :                        /* Receive OCR as an R3 resp (4 bytes) */
            if (send_cmd(CMD58, 0) == 0)          /* READ_OCR */
    d6fe:	1f c0       	rjmp	.+62     	; 0xd73e <mmc_disk_ioctl+0x286>
    d700:	40 e0       	ldi	r20, 0x00	; 0
    d702:	50 e0       	ldi	r21, 0x00	; 0
    d704:	ba 01       	movw	r22, r20
    d706:	8a e3       	ldi	r24, 0x3A	; 58
    d708:	f0 dc       	rcall	.-1568   	; 0xd0ea <send_cmd>
    d70a:	81 11       	cpse	r24, r1
    d70c:	0c c1       	rjmp	.+536    	; 0xd926 <mmc_disk_ioctl+0x46e>
    d70e:	78 01       	movw	r14, r16
    d710:	f4 e0       	ldi	r31, 0x04	; 4
    d712:	ef 0e       	add	r14, r31
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d714:	f1 1c       	adc	r15, r1
    d716:	8f ef       	ldi	r24, 0xFF	; 255
            break;

        case MMC_GET_OCR :                        /* Receive OCR as an R3 resp (4 bytes) */
            if (send_cmd(CMD58, 0) == 0)          /* READ_OCR */
            {
                for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
    d718:	83 d1       	rcall	.+774    	; 0xda20 <mmc_spi_TXRX>
    d71a:	f8 01       	movw	r30, r16
    d71c:	81 93       	st	Z+, r24
    d71e:	8f 01       	movw	r16, r30
    d720:	ee 15       	cp	r30, r14
    d722:	ff 05       	cpc	r31, r15
            }
            deselect();
            break;

        case MMC_GET_SDSTAT :                     /* Receive SD statsu as a data block (64 bytes) */
            if (send_cmd(ACMD13, 0) == 0)         /* SD_STATUS */
    d724:	c1 f7       	brne	.-16     	; 0xd716 <mmc_disk_ioctl+0x25e>
    d726:	db cf       	rjmp	.-74     	; 0xd6de <mmc_disk_ioctl+0x226>
    d728:	40 e0       	ldi	r20, 0x00	; 0
    d72a:	50 e0       	ldi	r21, 0x00	; 0
    d72c:	ba 01       	movw	r22, r20
    d72e:	8d e8       	ldi	r24, 0x8D	; 141
    d730:	dc dc       	rcall	.-1608   	; 0xd0ea <send_cmd>
            {
                xchg_spi(0xFF);
    d732:	81 11       	cpse	r24, r1
    d734:	f8 c0       	rjmp	.+496    	; 0xd926 <mmc_disk_ioctl+0x46e>
    d736:	8f ef       	ldi	r24, 0xFF	; 255
                if (rcvr_datablock(ptr, 64)) res = RES_OK;
    d738:	79 dc       	rcall	.-1806   	; 0xd02c <xchg_spi>
    d73a:	60 e4       	ldi	r22, 0x40	; 64
    d73c:	70 e0       	ldi	r23, 0x00	; 0
    d73e:	c8 01       	movw	r24, r16
    d740:	7d dc       	rcall	.-1798   	; 0xd03c <rcvr_datablock>
    {
        deselect();
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    d742:	01 e0       	ldi	r16, 0x01	; 1
    d744:	10 e0       	ldi	r17, 0x00	; 0
    d746:	89 2b       	or	r24, r25
    d748:	09 f4       	brne	.+2      	; 0xd74c <mmc_disk_ioctl+0x294>
    d74a:	ef c0       	rjmp	.+478    	; 0xd92a <mmc_disk_ioctl+0x472>
    d74c:	ea c0       	rjmp	.+468    	; 0xd922 <mmc_disk_ioctl+0x46a>
void power_off (void)
{
/* Disable SPI function */
/* De-configure MOSI/MISO/SCLK/CS pins (set hi-z) */
/* Turn socket power off (nothing to do if no power controls) */
    mmc_power_off();
    d74e:	97 d1       	rcall	.+814    	; 0xda7e <mmc_power_off>
    d750:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
            deselect();
            break;

        case CTRL_POWER_OFF :                     /* Power off */
            power_off();
            Stat |= STA_NOINIT;
    d754:	81 60       	ori	r24, 0x01	; 1
    d756:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Stat>
    d75a:	00 e0       	ldi	r16, 0x00	; 0
            res = RES_OK;
    d75c:	eb c0       	rjmp	.+470    	; 0xd934 <mmc_disk_ioctl+0x47c>
    d75e:	fb 01       	movw	r30, r22
            break;
#if _USE_ISDIO
        case ISDIO_READ:
            sdi = buff;
            if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
    d760:	43 81       	ldd	r20, Z+3	; 0x03
    d762:	54 81       	ldd	r21, Z+4	; 0x04
    d764:	65 81       	ldd	r22, Z+5	; 0x05
    d766:	76 81       	ldd	r23, Z+6	; 0x06
    d768:	39 e0       	ldi	r19, 0x09	; 9
    d76a:	44 0f       	add	r20, r20
    d76c:	55 1f       	adc	r21, r21
    d76e:	66 1f       	adc	r22, r22
    d770:	77 1f       	adc	r23, r23
    d772:	3a 95       	dec	r19
    d774:	d1 f7       	brne	.-12     	; 0xd76a <mmc_disk_ioctl+0x2b2>
    d776:	70 68       	ori	r23, 0x80	; 128
    d778:	80 81       	ld	r24, Z
    d77a:	90 e0       	ldi	r25, 0x00	; 0
    d77c:	a0 e0       	ldi	r26, 0x00	; 0
    d77e:	b0 e0       	ldi	r27, 0x00	; 0
    d780:	2c e1       	ldi	r18, 0x1C	; 28
    d782:	88 0f       	add	r24, r24
    d784:	99 1f       	adc	r25, r25
    d786:	aa 1f       	adc	r26, r26
    d788:	bb 1f       	adc	r27, r27
    d78a:	2a 95       	dec	r18
    d78c:	d1 f7       	brne	.-12     	; 0xd782 <mmc_disk_ioctl+0x2ca>
    d78e:	48 2b       	or	r20, r24
    d790:	59 2b       	or	r21, r25
    d792:	6a 2b       	or	r22, r26
    d794:	7b 2b       	or	r23, r27
    d796:	81 81       	ldd	r24, Z+1	; 0x01
    d798:	92 81       	ldd	r25, Z+2	; 0x02
    d79a:	01 97       	sbiw	r24, 0x01	; 1
    d79c:	91 70       	andi	r25, 0x01	; 1
    d79e:	a0 e0       	ldi	r26, 0x00	; 0
    d7a0:	b0 e0       	ldi	r27, 0x00	; 0
    d7a2:	48 2b       	or	r20, r24
    d7a4:	59 2b       	or	r21, r25
    d7a6:	6a 2b       	or	r22, r26
    d7a8:	7b 2b       	or	r23, r27
    d7aa:	80 e3       	ldi	r24, 0x30	; 48
    d7ac:	9e dc       	rcall	.-1732   	; 0xd0ea <send_cmd>
            {
                mmc_set_ms_timeout(1000);
    d7ae:	81 11       	cpse	r24, r1
    d7b0:	ba c0       	rjmp	.+372    	; 0xd926 <mmc_disk_ioctl+0x46e>
    d7b2:	88 ee       	ldi	r24, 0xE8	; 232
    d7b4:	93 e0       	ldi	r25, 0x03	; 3
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d7b6:	37 d1       	rcall	.+622    	; 0xda26 <mmc_set_ms_timeout>
    d7b8:	8f ef       	ldi	r24, 0xFF	; 255
    d7ba:	32 d1       	rcall	.+612    	; 0xda20 <mmc_spi_TXRX>
        case ISDIO_READ:
            sdi = buff;
            if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
            {
                mmc_set_ms_timeout(1000);
                while( (rc = xchg_spi(0xFF)) == 0xFF && !mmc_test_timeout() )
    d7bc:	8f 3f       	cpi	r24, 0xFF	; 255
    d7be:	21 f4       	brne	.+8      	; 0xd7c8 <mmc_disk_ioctl+0x310>
    d7c0:	39 d1       	rcall	.+626    	; 0xda34 <mmc_test_timeout>
    d7c2:	89 2b       	or	r24, r25
    d7c4:	c9 f3       	breq	.-14     	; 0xd7b8 <mmc_disk_ioctl+0x300>
    d7c6:	af c0       	rjmp	.+350    	; 0xd926 <mmc_disk_ioctl+0x46e>
                    ;
                if (rc == 0xFE)
    d7c8:	8e 3f       	cpi	r24, 0xFE	; 254
    d7ca:	09 f0       	breq	.+2      	; 0xd7ce <mmc_disk_ioctl+0x316>
    d7cc:	ac c0       	rjmp	.+344    	; 0xd926 <mmc_disk_ioctl+0x46e>
                {
                    for (bp = sdi->data, dc = sdi->ndata; dc; dc--) *bp++ = xchg_spi(0xFF);
    d7ce:	f8 01       	movw	r30, r16
    d7d0:	e7 80       	ldd	r14, Z+7	; 0x07
    d7d2:	f0 84       	ldd	r15, Z+8	; 0x08
    d7d4:	c1 80       	ldd	r12, Z+1	; 0x01
    d7d6:	d2 80       	ldd	r13, Z+2	; 0x02
    d7d8:	ce 0c       	add	r12, r14
    d7da:	df 1c       	adc	r13, r15
    d7dc:	ce 14       	cp	r12, r14
    d7de:	df 04       	cpc	r13, r15
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d7e0:	31 f0       	breq	.+12     	; 0xd7ee <mmc_disk_ioctl+0x336>
    d7e2:	8f ef       	ldi	r24, 0xFF	; 255
    d7e4:	1d d1       	rcall	.+570    	; 0xda20 <mmc_spi_TXRX>
                mmc_set_ms_timeout(1000);
                while( (rc = xchg_spi(0xFF)) == 0xFF && !mmc_test_timeout() )
                    ;
                if (rc == 0xFE)
                {
                    for (bp = sdi->data, dc = sdi->ndata; dc; dc--) *bp++ = xchg_spi(0xFF);
    d7e6:	f7 01       	movw	r30, r14
    d7e8:	81 93       	st	Z+, r24
    d7ea:	7f 01       	movw	r14, r30
    d7ec:	f7 cf       	rjmp	.-18     	; 0xd7dc <mmc_disk_ioctl+0x324>
                    for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
    d7ee:	f8 01       	movw	r30, r16
    d7f0:	81 81       	ldd	r24, Z+1	; 0x01
    d7f2:	92 81       	ldd	r25, Z+2	; 0x02
    d7f4:	02 e0       	ldi	r16, 0x02	; 2
    d7f6:	12 e0       	ldi	r17, 0x02	; 2
    d7f8:	08 1b       	sub	r16, r24
    d7fa:	19 0b       	sbc	r17, r25
    d7fc:	01 15       	cp	r16, r1
    d7fe:	11 05       	cpc	r17, r1
    d800:	09 f4       	brne	.+2      	; 0xd804 <mmc_disk_ioctl+0x34c>
    d802:	6d cf       	rjmp	.-294    	; 0xd6de <mmc_disk_ioctl+0x226>
    d804:	8f ef       	ldi	r24, 0xFF	; 255
    d806:	12 dc       	rcall	.-2012   	; 0xd02c <xchg_spi>
    d808:	01 50       	subi	r16, 0x01	; 1
    d80a:	11 09       	sbc	r17, r1
    d80c:	f7 cf       	rjmp	.-18     	; 0xd7fc <mmc_disk_ioctl+0x344>
    d80e:	fb 01       	movw	r30, r22
            deselect();
            break;

        case ISDIO_WRITE:
            sdi = buff;
            if (send_cmd(CMD49, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
    d810:	43 81       	ldd	r20, Z+3	; 0x03
    d812:	54 81       	ldd	r21, Z+4	; 0x04
    d814:	65 81       	ldd	r22, Z+5	; 0x05
    d816:	76 81       	ldd	r23, Z+6	; 0x06
    d818:	39 e0       	ldi	r19, 0x09	; 9
    d81a:	44 0f       	add	r20, r20
    d81c:	55 1f       	adc	r21, r21
    d81e:	66 1f       	adc	r22, r22
    d820:	77 1f       	adc	r23, r23
    d822:	3a 95       	dec	r19
    d824:	d1 f7       	brne	.-12     	; 0xd81a <mmc_disk_ioctl+0x362>
    d826:	70 68       	ori	r23, 0x80	; 128
    d828:	80 81       	ld	r24, Z
    d82a:	90 e0       	ldi	r25, 0x00	; 0
    d82c:	a0 e0       	ldi	r26, 0x00	; 0
    d82e:	b0 e0       	ldi	r27, 0x00	; 0
    d830:	2c e1       	ldi	r18, 0x1C	; 28
    d832:	88 0f       	add	r24, r24
    d834:	99 1f       	adc	r25, r25
    d836:	aa 1f       	adc	r26, r26
    d838:	bb 1f       	adc	r27, r27
    d83a:	2a 95       	dec	r18
    d83c:	d1 f7       	brne	.-12     	; 0xd832 <mmc_disk_ioctl+0x37a>
    d83e:	48 2b       	or	r20, r24
    d840:	59 2b       	or	r21, r25
    d842:	6a 2b       	or	r22, r26
    d844:	7b 2b       	or	r23, r27
    d846:	81 81       	ldd	r24, Z+1	; 0x01
    d848:	92 81       	ldd	r25, Z+2	; 0x02
    d84a:	01 97       	sbiw	r24, 0x01	; 1
    d84c:	91 70       	andi	r25, 0x01	; 1
    d84e:	a0 e0       	ldi	r26, 0x00	; 0
    d850:	b0 e0       	ldi	r27, 0x00	; 0
    d852:	48 2b       	or	r20, r24
    d854:	59 2b       	or	r21, r25
    d856:	6a 2b       	or	r22, r26
    d858:	7b 2b       	or	r23, r27
    d85a:	81 e3       	ldi	r24, 0x31	; 49
    d85c:	46 dc       	rcall	.-1908   	; 0xd0ea <send_cmd>
            {
                xchg_spi(0xFF); xchg_spi(0xFE);
    d85e:	81 11       	cpse	r24, r1
    d860:	62 c0       	rjmp	.+196    	; 0xd926 <mmc_disk_ioctl+0x46e>
    d862:	8f ef       	ldi	r24, 0xFF	; 255
    d864:	e3 db       	rcall	.-2106   	; 0xd02c <xchg_spi>
    d866:	8e ef       	ldi	r24, 0xFE	; 254
    d868:	e1 db       	rcall	.-2110   	; 0xd02c <xchg_spi>
                for (bp = sdi->data, dc = sdi->ndata; dc; dc--) xchg_spi(*bp++);
    d86a:	f8 01       	movw	r30, r16
    d86c:	e7 80       	ldd	r14, Z+7	; 0x07
    d86e:	f0 84       	ldd	r15, Z+8	; 0x08
    d870:	c1 80       	ldd	r12, Z+1	; 0x01
    d872:	d2 80       	ldd	r13, Z+2	; 0x02
    d874:	ce 0c       	add	r12, r14
    d876:	df 1c       	adc	r13, r15
    d878:	ec 14       	cp	r14, r12
    d87a:	fd 04       	cpc	r15, r13
    d87c:	29 f0       	breq	.+10     	; 0xd888 <mmc_disk_ioctl+0x3d0>
    d87e:	f7 01       	movw	r30, r14
    d880:	81 91       	ld	r24, Z+
    d882:	7f 01       	movw	r14, r30
    d884:	d3 db       	rcall	.-2138   	; 0xd02c <xchg_spi>
    d886:	f8 cf       	rjmp	.-16     	; 0xd878 <mmc_disk_ioctl+0x3c0>
                for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
    d888:	f8 01       	movw	r30, r16
    d88a:	81 81       	ldd	r24, Z+1	; 0x01
    d88c:	92 81       	ldd	r25, Z+2	; 0x02
    d88e:	02 e0       	ldi	r16, 0x02	; 2
    d890:	12 e0       	ldi	r17, 0x02	; 2
    d892:	08 1b       	sub	r16, r24
    d894:	19 0b       	sbc	r17, r25
    d896:	8f ef       	ldi	r24, 0xFF	; 255
    d898:	01 15       	cp	r16, r1
    d89a:	11 05       	cpc	r17, r1
    d89c:	09 f4       	brne	.+2      	; 0xd8a0 <mmc_disk_ioctl+0x3e8>
    d89e:	3b c0       	rjmp	.+118    	; 0xd916 <mmc_disk_ioctl+0x45e>
    d8a0:	c5 db       	rcall	.-2166   	; 0xd02c <xchg_spi>
    d8a2:	01 50       	subi	r16, 0x01	; 1
    d8a4:	11 09       	sbc	r17, r1
    d8a6:	f7 cf       	rjmp	.-18     	; 0xd896 <mmc_disk_ioctl+0x3de>
    d8a8:	fb 01       	movw	r30, r22
            deselect();
            break;

        case ISDIO_MRITE:
            sdi = buff;
            if (send_cmd(CMD49, 0x84000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | sdi->ndata >> 8) == 0)
    d8aa:	43 81       	ldd	r20, Z+3	; 0x03
    d8ac:	54 81       	ldd	r21, Z+4	; 0x04
    d8ae:	65 81       	ldd	r22, Z+5	; 0x05
    d8b0:	76 81       	ldd	r23, Z+6	; 0x06
    d8b2:	89 e0       	ldi	r24, 0x09	; 9
    d8b4:	44 0f       	add	r20, r20
    d8b6:	55 1f       	adc	r21, r21
    d8b8:	66 1f       	adc	r22, r22
    d8ba:	77 1f       	adc	r23, r23
    d8bc:	8a 95       	dec	r24
    d8be:	d1 f7       	brne	.-12     	; 0xd8b4 <mmc_disk_ioctl+0x3fc>
    d8c0:	74 68       	ori	r23, 0x84	; 132
    d8c2:	80 81       	ld	r24, Z
    d8c4:	90 e0       	ldi	r25, 0x00	; 0
    d8c6:	a0 e0       	ldi	r26, 0x00	; 0
    d8c8:	b0 e0       	ldi	r27, 0x00	; 0
    d8ca:	2c e1       	ldi	r18, 0x1C	; 28
    d8cc:	88 0f       	add	r24, r24
    d8ce:	99 1f       	adc	r25, r25
    d8d0:	aa 1f       	adc	r26, r26
    d8d2:	bb 1f       	adc	r27, r27
    d8d4:	2a 95       	dec	r18
    d8d6:	d1 f7       	brne	.-12     	; 0xd8cc <mmc_disk_ioctl+0x414>
    d8d8:	48 2b       	or	r20, r24
    d8da:	59 2b       	or	r21, r25
    d8dc:	6a 2b       	or	r22, r26
    d8de:	7b 2b       	or	r23, r27
    d8e0:	82 81       	ldd	r24, Z+2	; 0x02
    d8e2:	90 e0       	ldi	r25, 0x00	; 0
    d8e4:	a0 e0       	ldi	r26, 0x00	; 0
    d8e6:	b0 e0       	ldi	r27, 0x00	; 0
    d8e8:	48 2b       	or	r20, r24
    d8ea:	59 2b       	or	r21, r25
    d8ec:	6a 2b       	or	r22, r26
    d8ee:	7b 2b       	or	r23, r27
            {
                xchg_spi(0xFF); xchg_spi(0xFE);
    d8f0:	81 e3       	ldi	r24, 0x31	; 49
    d8f2:	fb db       	rcall	.-2058   	; 0xd0ea <send_cmd>
    d8f4:	81 11       	cpse	r24, r1
    d8f6:	17 c0       	rjmp	.+46     	; 0xd926 <mmc_disk_ioctl+0x46e>
    d8f8:	8f ef       	ldi	r24, 0xFF	; 255
    d8fa:	98 db       	rcall	.-2256   	; 0xd02c <xchg_spi>
                xchg_spi(sdi->ndata);
    d8fc:	8e ef       	ldi	r24, 0xFE	; 254
    d8fe:	96 db       	rcall	.-2260   	; 0xd02c <xchg_spi>
    d900:	f8 01       	movw	r30, r16
    d902:	81 81       	ldd	r24, Z+1	; 0x01
    d904:	93 db       	rcall	.-2266   	; 0xd02c <xchg_spi>
    d906:	01 e0       	ldi	r16, 0x01	; 1
                for (dc = 513; dc; dc--) xchg_spi(0xFF);
    d908:	12 e0       	ldi	r17, 0x02	; 2
    d90a:	8f ef       	ldi	r24, 0xFF	; 255
    d90c:	8f db       	rcall	.-2274   	; 0xd02c <xchg_spi>
    d90e:	01 50       	subi	r16, 0x01	; 1
    d910:	11 09       	sbc	r17, r1
    d912:	d9 f7       	brne	.-10     	; 0xd90a <mmc_disk_ioctl+0x452>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d914:	8f ef       	ldi	r24, 0xFF	; 255
    d916:	84 d0       	rcall	.+264    	; 0xda20 <mmc_spi_TXRX>
    d918:	8f 71       	andi	r24, 0x1F	; 31
    {
        deselect();
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    d91a:	01 e0       	ldi	r16, 0x01	; 1
    d91c:	10 e0       	ldi	r17, 0x00	; 0
    d91e:	85 30       	cpi	r24, 0x05	; 5
    d920:	21 f4       	brne	.+8      	; 0xd92a <mmc_disk_ioctl+0x472>
    d922:	00 e0       	ldi	r16, 0x00	; 0
    d924:	02 c0       	rjmp	.+4      	; 0xd92a <mmc_disk_ioctl+0x472>
    d926:	01 e0       	ldi	r16, 0x01	; 1
    d928:	10 e0       	ldi	r17, 0x00	; 0
    d92a:	82 db       	rcall	.-2300   	; 0xd030 <deselect>
                xchg_spi(0xFF); xchg_spi(0xFE);
                xchg_spi(sdi->ndata);
                for (dc = 513; dc; dc--) xchg_spi(0xFF);
                if ((xchg_spi(0xFF) & 0x1F) == 0x05) res = RES_OK;
            }
            deselect();
    d92c:	04 c0       	rjmp	.+8      	; 0xd936 <mmc_disk_ioctl+0x47e>
    d92e:	03 e0       	ldi	r16, 0x03	; 3
            break;
    d930:	01 c0       	rjmp	.+2      	; 0xd934 <mmc_disk_ioctl+0x47c>
    BYTE rc, *bp;
    UINT dc;
#endif

    if (Stat & STA_NOINIT)
        return RES_NOTRDY;
    d932:	04 e0       	ldi	r16, 0x04	; 4
    d934:	10 e0       	ldi	r17, 0x00	; 0
            }
            deselect();
            break;
#endif
        default:
            res = RES_PARERR;
    d936:	c8 01       	movw	r24, r16
    d938:	60 96       	adiw	r28, 0x10	; 16
    }

    return res;
}
    d93a:	e8 e0       	ldi	r30, 0x08	; 8
    d93c:	0c 94 2f e3 	jmp	0x1c65e	; 0x1c65e <__epilogue_restores__+0x14>

0000d940 <mmc_disk_timerproc>:
    d940:	cf 93       	push	r28
    d942:	80 91 31 18 	lds	r24, 0x1831	; 0x801831 <Timer1>
{
    BYTE n;
    BYTE s;

    n = Timer1;                                   /* 100Hz decrement timer */
    if (n) Timer1 = --n;
    d946:	88 23       	and	r24, r24
    d948:	19 f0       	breq	.+6      	; 0xd950 <mmc_disk_timerproc+0x10>
    d94a:	81 50       	subi	r24, 0x01	; 1
    d94c:	80 93 31 18 	sts	0x1831, r24	; 0x801831 <Timer1>
    n = Timer2;
    d950:	80 91 30 18 	lds	r24, 0x1830	; 0x801830 <Timer2>
    if (n) Timer2 = --n;
    d954:	88 23       	and	r24, r24
    d956:	19 f0       	breq	.+6      	; 0xd95e <mmc_disk_timerproc+0x1e>
    d958:	81 50       	subi	r24, 0x01	; 1
    d95a:	80 93 30 18 	sts	0x1830, r24	; 0x801830 <Timer2>

    s = Stat;
    d95e:	c0 91 35 01 	lds	r28, 0x0135	; 0x800135 <Stat>
        s |= STA_PROTECT;
    else                                          /* Write enabled */
        s &= ~STA_PROTECT;
#endif

    if (MMC_CD)                                   /* Card inserted */
    d962:	8e d0       	rcall	.+284    	; 0xda80 <mmc_ins_status>
    d964:	89 2b       	or	r24, r25
    d966:	11 f0       	breq	.+4      	; 0xd96c <mmc_disk_timerproc+0x2c>
	{
        s &= ~STA_NODISK;
    d968:	cd 7f       	andi	r28, 0xFD	; 253
    d96a:	04 c0       	rjmp	.+8      	; 0xd974 <mmc_disk_timerproc+0x34>
	}
    else                                          /* Socket empty */
	{	
        s |= (STA_NODISK | STA_NOINIT);
    d96c:	c3 60       	ori	r28, 0x03	; 3
		set_error(1);
    d96e:	81 e0       	ldi	r24, 0x01	; 1
    d970:	0e 94 4c 25 	call	0x4a98	; 0x4a98 <set_error>
	}

    Stat = s;                                     /* Update MMC status */
    d974:	c0 93 35 01 	sts	0x0135, r28	; 0x800135 <Stat>
}
    d978:	cf 91       	pop	r28
    d97a:	08 95       	ret

0000d97c <mmc_install_timer>:
void mmc_ms_wait(int ms)
{
    mmc_set_ms_timeout(ms);
    while(!mmc_test_timeout())
        ;
}
    d97c:	00 d0       	rcall	.+0      	; 0xd97e <mmc_install_timer+0x2>
    d97e:	1f 92       	push	r1
    d980:	10 92 3b 18 	sts	0x183B, r1	; 0x80183b <_mmc_timeout+0x1>
    d984:	10 92 3a 18 	sts	0x183A, r1	; 0x80183a <_mmc_timeout>
    d988:	61 e0       	ldi	r22, 0x01	; 1
    d98a:	70 e0       	ldi	r23, 0x00	; 0
    d98c:	8d e4       	ldi	r24, 0x4D	; 77
    d98e:	9d e6       	ldi	r25, 0x6D	; 109
    d990:	0e 94 00 33 	call	0x6600	; 0x6600 <set_timers>
    d994:	01 96       	adiw	r24, 0x01	; 1
    d996:	51 f4       	brne	.+20     	; 0xd9ac <mmc_install_timer+0x30>
    d998:	87 e2       	ldi	r24, 0x27	; 39
    d99a:	98 e0       	ldi	r25, 0x08	; 8
    d99c:	a0 e0       	ldi	r26, 0x00	; 0
    d99e:	ed b7       	in	r30, 0x3d	; 61
    d9a0:	fe b7       	in	r31, 0x3e	; 62
    d9a2:	81 83       	std	Z+1, r24	; 0x01
    d9a4:	92 83       	std	Z+2, r25	; 0x02
    d9a6:	a3 83       	std	Z+3, r26	; 0x03
    d9a8:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    d9ac:	0f 90       	pop	r0
    d9ae:	0f 90       	pop	r0
    d9b0:	0f 90       	pop	r0
    d9b2:	08 95       	ret

0000d9b4 <mmc_spi_begin>:
    d9b4:	60 91 36 18 	lds	r22, 0x1836	; 0x801836 <_mmc_clock>
    d9b8:	70 91 37 18 	lds	r23, 0x1837	; 0x801837 <_mmc_clock+0x1>
    d9bc:	80 91 38 18 	lds	r24, 0x1838	; 0x801838 <_mmc_clock+0x2>
    d9c0:	90 91 39 18 	lds	r25, 0x1839	; 0x801839 <_mmc_clock+0x3>
    d9c4:	4b e0       	ldi	r20, 0x0B	; 11
    d9c6:	50 e0       	ldi	r21, 0x00	; 0
    d9c8:	0c 94 f3 24 	jmp	0x49e6	; 0x49e6 <spi_begin>
    d9cc:	08 95       	ret

0000d9ce <mmc_spi_end>:
    d9ce:	8b e0       	ldi	r24, 0x0B	; 11
    d9d0:	0c 94 8f 24 	jmp	0x491e	; 0x491e <spi_end>
    d9d4:	08 95       	ret

0000d9d6 <mmc_slow>:
    d9d6:	80 e2       	ldi	r24, 0x20	; 32
    d9d8:	91 ea       	ldi	r25, 0xA1	; 161
    d9da:	a7 e0       	ldi	r26, 0x07	; 7
    d9dc:	b0 e0       	ldi	r27, 0x00	; 0
    d9de:	80 93 36 18 	sts	0x1836, r24	; 0x801836 <_mmc_clock>
    d9e2:	90 93 37 18 	sts	0x1837, r25	; 0x801837 <_mmc_clock+0x1>
    d9e6:	a0 93 38 18 	sts	0x1838, r26	; 0x801838 <_mmc_clock+0x2>
    d9ea:	b0 93 39 18 	sts	0x1839, r27	; 0x801839 <_mmc_clock+0x3>
    d9ee:	08 95       	ret

0000d9f0 <mmc_spi_init>:
    d9f0:	8b e0       	ldi	r24, 0x0B	; 11
    d9f2:	0e 94 8d 24 	call	0x491a	; 0x491a <chip_select_init>
    d9f6:	ef cf       	rjmp	.-34     	; 0xd9d6 <mmc_slow>
    d9f8:	08 95       	ret

0000d9fa <mmc_fast>:
    d9fa:	80 ea       	ldi	r24, 0xA0	; 160
    d9fc:	95 e2       	ldi	r25, 0x25	; 37
    d9fe:	a6 e2       	ldi	r26, 0x26	; 38
    da00:	b0 e0       	ldi	r27, 0x00	; 0
    da02:	80 93 36 18 	sts	0x1836, r24	; 0x801836 <_mmc_clock>
    da06:	90 93 37 18 	sts	0x1837, r25	; 0x801837 <_mmc_clock+0x1>
    da0a:	a0 93 38 18 	sts	0x1838, r26	; 0x801838 <_mmc_clock+0x2>
    da0e:	b0 93 39 18 	sts	0x1839, r27	; 0x801839 <_mmc_clock+0x3>
    da12:	08 95       	ret

0000da14 <mmc_spi_TX_buffer>:
    da14:	0c 94 bf 24 	jmp	0x497e	; 0x497e <spi_TX_buffer>
    da18:	08 95       	ret

0000da1a <mmc_spi_RX_buffer>:
    da1a:	0c 94 c1 24 	jmp	0x4982	; 0x4982 <spi_RX_buffer>
    da1e:	08 95       	ret

0000da20 <mmc_spi_TXRX>:
    da20:	0c 94 3b 25 	jmp	0x4a76	; 0x4a76 <spi_TXRX>
    da24:	08 95       	ret

0000da26 <mmc_set_ms_timeout>:
    da26:	f8 94       	cli
    da28:	90 93 3b 18 	sts	0x183B, r25	; 0x80183b <_mmc_timeout+0x1>
    da2c:	80 93 3a 18 	sts	0x183A, r24	; 0x80183a <_mmc_timeout>
    da30:	78 94       	sei
    da32:	08 95       	ret

0000da34 <mmc_test_timeout>:
    da34:	00 d0       	rcall	.+0      	; 0xda36 <mmc_test_timeout+0x2>
    da36:	1f 92       	push	r1
    da38:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    da3c:	81 fd       	sbrc	r24, 1
    da3e:	15 c0       	rjmp	.+42     	; 0xda6a <mmc_test_timeout+0x36>
    da40:	80 91 3a 18 	lds	r24, 0x183A	; 0x80183a <_mmc_timeout>
    da44:	90 91 3b 18 	lds	r25, 0x183B	; 0x80183b <_mmc_timeout+0x1>
    da48:	89 2b       	or	r24, r25
    da4a:	91 f4       	brne	.+36     	; 0xda70 <mmc_test_timeout+0x3c>
    da4c:	8a e1       	ldi	r24, 0x1A	; 26
    da4e:	98 e0       	ldi	r25, 0x08	; 8
    da50:	a0 e0       	ldi	r26, 0x00	; 0
    da52:	ed b7       	in	r30, 0x3d	; 61
    da54:	fe b7       	in	r31, 0x3e	; 62
    da56:	81 83       	std	Z+1, r24	; 0x01
    da58:	92 83       	std	Z+2, r25	; 0x02
    da5a:	a3 83       	std	Z+3, r26	; 0x03
    da5c:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    da60:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    da64:	83 60       	ori	r24, 0x03	; 3
    da66:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Stat>
    da6a:	81 e0       	ldi	r24, 0x01	; 1
    da6c:	90 e0       	ldi	r25, 0x00	; 0
    da6e:	02 c0       	rjmp	.+4      	; 0xda74 <mmc_test_timeout+0x40>
    da70:	80 e0       	ldi	r24, 0x00	; 0
    da72:	90 e0       	ldi	r25, 0x00	; 0
    da74:	0f 90       	pop	r0
    da76:	0f 90       	pop	r0
    da78:	0f 90       	pop	r0
    da7a:	08 95       	ret

0000da7c <mmc_power_on>:
    da7c:	08 95       	ret

0000da7e <mmc_power_off>:
/// @brief  MMC Power OFF
///
/// @return void
MEMSPACE
void mmc_power_off()
{
    da7e:	08 95       	ret

0000da80 <mmc_ins_status>:

MEMSPACE
int mmc_ins_status()
{
	// HI when card is NOT inserted
	if( GPIO_PIN_RD(GPIO_C7) )
    da80:	3f 98       	cbi	0x07, 7	; 7
    da82:	86 b1       	in	r24, 0x06	; 6
    da84:	08 2e       	mov	r0, r24
    da86:	00 0c       	add	r0, r0
    da88:	99 0b       	sbc	r25, r25
    da8a:	80 95       	com	r24
    da8c:	90 95       	com	r25
		return (0);
	else
		return(1);;	
}
    da8e:	89 2f       	mov	r24, r25
    da90:	88 1f       	adc	r24, r24
    da92:	88 27       	eor	r24, r24
    da94:	88 1f       	adc	r24, r24
    da96:	90 e0       	ldi	r25, 0x00	; 0
    da98:	08 95       	ret

0000da9a <mmc_task>:
 @brief 1000HZ timer task
 @return void
*/
static void mmc_task(void)
{
    if(_mmc_timeout)
    da9a:	80 91 3a 18 	lds	r24, 0x183A	; 0x80183a <_mmc_timeout>
    da9e:	90 91 3b 18 	lds	r25, 0x183B	; 0x80183b <_mmc_timeout+0x1>
    daa2:	00 97       	sbiw	r24, 0x00	; 0
    daa4:	29 f0       	breq	.+10     	; 0xdab0 <mmc_task+0x16>
        _mmc_timeout--;
    daa6:	01 97       	sbiw	r24, 0x01	; 1
    daa8:	90 93 3b 18 	sts	0x183B, r25	; 0x80183b <_mmc_timeout+0x1>
    daac:	80 93 3a 18 	sts	0x183A, r24	; 0x80183a <_mmc_timeout>

// 100HZ
    if(_mmc_pre++  < 10)
    dab0:	80 91 34 18 	lds	r24, 0x1834	; 0x801834 <_mmc_pre>
    dab4:	90 91 35 18 	lds	r25, 0x1835	; 0x801835 <_mmc_pre+0x1>
    dab8:	8a 30       	cpi	r24, 0x0A	; 10
    daba:	91 05       	cpc	r25, r1
    dabc:	30 f4       	brcc	.+12     	; 0xdaca <mmc_task+0x30>
    dabe:	01 96       	adiw	r24, 0x01	; 1
    dac0:	90 93 35 18 	sts	0x1835, r25	; 0x801835 <_mmc_pre+0x1>
    dac4:	80 93 34 18 	sts	0x1834, r24	; 0x801834 <_mmc_pre>
    dac8:	08 95       	ret
        return;

    _mmc_pre = 0;
    daca:	10 92 35 18 	sts	0x1835, r1	; 0x801835 <_mmc_pre+0x1>
    dace:	10 92 34 18 	sts	0x1834, r1	; 0x801834 <_mmc_pre>

	if(!mmc_ins_status())
    dad2:	d6 df       	rcall	.-84     	; 0xda80 <mmc_ins_status>
    dad4:	89 2b       	or	r24, r25
    dad6:	19 f4       	brne	.+6      	; 0xdade <mmc_task+0x44>
		set_error(1);
    dad8:	81 e0       	ldi	r24, 0x01	; 1
    dada:	0e 94 4c 25 	call	0x4a98	; 0x4a98 <set_error>

    mmc_disk_timerproc();
    dade:	30 cf       	rjmp	.-416    	; 0xd940 <mmc_disk_timerproc>
    dae0:	08 95       	ret

0000dae2 <mmc_init>:
///
/// @param[in] verbose: display initialisation messages
/// @return
MEMSPACE
int mmc_init(int verbose)
{
    dae2:	ab e0       	ldi	r26, 0x0B	; 11
    dae4:	b0 e0       	ldi	r27, 0x00	; 0
    dae6:	e7 e7       	ldi	r30, 0x77	; 119
    dae8:	fd e6       	ldi	r31, 0x6D	; 109
    daea:	0c 94 15 e3 	jmp	0x1c62a	; 0x1c62a <__prologue_saves__+0x18>
    daee:	7c 01       	movw	r14, r24
    int rc;

    Stat = 0;
    daf0:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <Stat>
	clear_error();
    daf4:	0e 94 51 25 	call	0x4aa2	; 0x4aa2 <clear_error>

	// Card Detect
	GPIO_PIN_LATCH_LOW(GPIO_C7);
    daf8:	47 98       	cbi	0x08, 7	; 8
	GPIO_PIN_DIR_IN(GPIO_C7);
    dafa:	3f 98       	cbi	0x07, 7	; 7

    mmc_spi_init();
    dafc:	79 df       	rcall	.-270    	; 0xd9f0 <mmc_spi_init>

    if( verbose)
    dafe:	e1 14       	cp	r14, r1
    db00:	f1 04       	cpc	r15, r1
    db02:	51 f0       	breq	.+20     	; 0xdb18 <mmc_init+0x36>
    {
        printf("START MMC INIT\n");
    db04:	8a e0       	ldi	r24, 0x0A	; 10
    db06:	98 e0       	ldi	r25, 0x08	; 8
    db08:	a0 e0       	ldi	r26, 0x00	; 0
    db0a:	ed b7       	in	r30, 0x3d	; 61
    db0c:	fe b7       	in	r31, 0x3e	; 62
    db0e:	81 83       	std	Z+1, r24	; 0x01
    db10:	92 83       	std	Z+2, r25	; 0x02
    db12:	a3 83       	std	Z+3, r26	; 0x03
    db14:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    }
// we only install timers once!
    if(!mmc_init_flag)
    db18:	80 91 32 18 	lds	r24, 0x1832	; 0x801832 <mmc_init_flag>
    db1c:	90 91 33 18 	lds	r25, 0x1833	; 0x801833 <mmc_init_flag+0x1>
    db20:	89 2b       	or	r24, r25
        mmc_install_timer();
    db22:	09 f4       	brne	.+2      	; 0xdb26 <mmc_init+0x44>

	if(!mmc_ins_status())
    db24:	2b df       	rcall	.-426    	; 0xd97c <mmc_install_timer>
    db26:	ac df       	rcall	.-168    	; 0xda80 <mmc_ins_status>
    db28:	89 2b       	or	r24, r25
    db2a:	61 f4       	brne	.+24     	; 0xdb44 <mmc_init+0x62>
	{
		printf("*** MMC Card NOT Inserted! ***\n");
    db2c:	8a ee       	ldi	r24, 0xEA	; 234
    db2e:	97 e0       	ldi	r25, 0x07	; 7
    db30:	a0 e0       	ldi	r26, 0x00	; 0
    db32:	ed b7       	in	r30, 0x3d	; 61
    db34:	fe b7       	in	r31, 0x3e	; 62
    db36:	81 83       	std	Z+1, r24	; 0x01
    db38:	92 83       	std	Z+2, r25	; 0x02
    db3a:	a3 83       	std	Z+3, r26	; 0x03
    db3c:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
		return(RES_NOTRDY);	
    db40:	83 e0       	ldi	r24, 0x03	; 3
    db42:	8b c0       	rjmp	.+278    	; 0xdc5a <mmc_init+0x178>
	}


    if( verbose)
    db44:	e1 14       	cp	r14, r1
    db46:	f1 04       	cpc	r15, r1
    db48:	11 f1       	breq	.+68     	; 0xdb8e <mmc_init+0xac>
    {
		printf("MMC Card Inserted\n");
    db4a:	87 ed       	ldi	r24, 0xD7	; 215
    db4c:	97 e0       	ldi	r25, 0x07	; 7
    db4e:	a0 e0       	ldi	r26, 0x00	; 0
    db50:	ed b7       	in	r30, 0x3d	; 61
    db52:	fe b7       	in	r31, 0x3e	; 62
    db54:	81 83       	std	Z+1, r24	; 0x01
    db56:	92 83       	std	Z+2, r25	; 0x02
    db58:	a3 83       	std	Z+3, r26	; 0x03
    db5a:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>

#if defined (FF_USE_LFN)
        printf("LFN Enabled");
    db5e:	8b ec       	ldi	r24, 0xCB	; 203
    db60:	97 e0       	ldi	r25, 0x07	; 7
    db62:	a0 e0       	ldi	r26, 0x00	; 0
    db64:	ed b7       	in	r30, 0x3d	; 61
    db66:	fe b7       	in	r31, 0x3e	; 62
    db68:	81 83       	std	Z+1, r24	; 0x01
    db6a:	92 83       	std	Z+2, r25	; 0x02
    db6c:	a3 83       	std	Z+3, r26	; 0x03
    db6e:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
#else
        printf("LFN Disabled");
#endif
        printf(", Code page: %u\n", FF_CODE_PAGE);
    db72:	85 eb       	ldi	r24, 0xB5	; 181
    db74:	91 e0       	ldi	r25, 0x01	; 1
    db76:	ed b7       	in	r30, 0x3d	; 61
    db78:	fe b7       	in	r31, 0x3e	; 62
    db7a:	95 83       	std	Z+5, r25	; 0x05
    db7c:	84 83       	std	Z+4, r24	; 0x04
    db7e:	8a eb       	ldi	r24, 0xBA	; 186
    db80:	97 e0       	ldi	r25, 0x07	; 7
    db82:	a0 e0       	ldi	r26, 0x00	; 0
    db84:	81 83       	std	Z+1, r24	; 0x01
    db86:	92 83       	std	Z+2, r25	; 0x02
    db88:	a3 83       	std	Z+3, r26	; 0x03
    db8a:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    }

    rc = disk_initialize(DEV_MMC);                // aliased to mmc_disk_initialize()
    db8e:	80 e0       	ldi	r24, 0x00	; 0
    db90:	1d da       	rcall	.-3014   	; 0xcfcc <disk_initialize>
    db92:	08 2f       	mov	r16, r24
    db94:	10 e0       	ldi	r17, 0x00	; 0

    if( rc != RES_OK  )
    db96:	01 15       	cp	r16, r1
    db98:	11 05       	cpc	r17, r1
        put_rc(rc);
    db9a:	19 f0       	breq	.+6      	; 0xdba2 <mmc_init+0xc0>
    db9c:	c8 01       	movw	r24, r16
    db9e:	e4 d0       	rcall	.+456    	; 0xdd68 <put_rc>
    dba0:	0e c0       	rjmp	.+28     	; 0xdbbe <mmc_init+0xdc>

    if( rc == RES_OK)
        rc = f_mount(&Fatfs[0],"/", 0);
    dba2:	40 e0       	ldi	r20, 0x00	; 0
    dba4:	66 ea       	ldi	r22, 0xA6	; 166
    dba6:	78 e0       	ldi	r23, 0x08	; 8
    dba8:	8c e8       	ldi	r24, 0x8C	; 140
    dbaa:	9a e1       	ldi	r25, 0x1A	; 26
    dbac:	0e 94 be 57 	call	0xaf7c	; 0xaf7c <f_mount>
    dbb0:	8c 01       	movw	r16, r24

    if( rc != RES_OK || verbose)
    dbb2:	89 2b       	or	r24, r25
    dbb4:	21 f4       	brne	.+8      	; 0xdbbe <mmc_init+0xdc>
    dbb6:	e1 14       	cp	r14, r1
    dbb8:	f1 04       	cpc	r15, r1
    dbba:	09 f4       	brne	.+2      	; 0xdbbe <mmc_init+0xdc>
        put_rc( rc );
    dbbc:	40 c0       	rjmp	.+128    	; 0xdc3e <mmc_init+0x15c>
    dbbe:	c8 01       	movw	r24, r16
    dbc0:	d3 d0       	rcall	.+422    	; 0xdd68 <put_rc>

    if (verbose )
    dbc2:	e1 14       	cp	r14, r1
    dbc4:	f1 04       	cpc	r15, r1
    dbc6:	d9 f1       	breq	.+118    	; 0xdc3e <mmc_init+0x15c>
    {
        DWORD blksize = 0;
    dbc8:	18 86       	std	Y+8, r1	; 0x08
    dbca:	19 86       	std	Y+9, r1	; 0x09
    dbcc:	1a 86       	std	Y+10, r1	; 0x0a
    dbce:	1b 86       	std	Y+11, r1	; 0x0b
        if(rc == RES_OK)
    dbd0:	01 15       	cp	r16, r1
    dbd2:	11 05       	cpc	r17, r1
        {
            rc = disk_ioctl ( DEV_MMC, GET_BLOCK_SIZE, (void *) &blksize);
    dbd4:	51 f5       	brne	.+84     	; 0xdc2a <mmc_init+0x148>
    dbd6:	ae 01       	movw	r20, r28
    dbd8:	48 5f       	subi	r20, 0xF8	; 248
    dbda:	5f 4f       	sbci	r21, 0xFF	; 255
    dbdc:	63 e0       	ldi	r22, 0x03	; 3
    dbde:	80 e0       	ldi	r24, 0x00	; 0
    dbe0:	1b da       	rcall	.-3018   	; 0xd018 <disk_ioctl>
            if( rc != RES_OK)
    dbe2:	8c 01       	movw	r16, r24
    dbe4:	00 97       	sbiw	r24, 0x00	; 0
            {
                put_rc( rc );
    dbe6:	61 f0       	breq	.+24     	; 0xdc00 <mmc_init+0x11e>
    dbe8:	bf d0       	rcall	.+382    	; 0xdd68 <put_rc>
                printf("MMC Block Size - read failed\n");
    dbea:	8c e9       	ldi	r24, 0x9C	; 156
    dbec:	97 e0       	ldi	r25, 0x07	; 7
    dbee:	a0 e0       	ldi	r26, 0x00	; 0
    dbf0:	ed b7       	in	r30, 0x3d	; 61
    dbf2:	fe b7       	in	r31, 0x3e	; 62
    dbf4:	81 83       	std	Z+1, r24	; 0x01
    dbf6:	92 83       	std	Z+2, r25	; 0x02
    dbf8:	a3 83       	std	Z+3, r26	; 0x03
    dbfa:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    dbfe:	15 c0       	rjmp	.+42     	; 0xdc2a <mmc_init+0x148>
            }
            else
            {
                printf("MMC Block Size: %ld\n", blksize);
    dc00:	88 85       	ldd	r24, Y+8	; 0x08
    dc02:	99 85       	ldd	r25, Y+9	; 0x09
    dc04:	aa 85       	ldd	r26, Y+10	; 0x0a
    dc06:	bb 85       	ldd	r27, Y+11	; 0x0b
    dc08:	ed b7       	in	r30, 0x3d	; 61
    dc0a:	fe b7       	in	r31, 0x3e	; 62
    dc0c:	84 83       	std	Z+4, r24	; 0x04
    dc0e:	95 83       	std	Z+5, r25	; 0x05
    dc10:	a6 83       	std	Z+6, r26	; 0x06
    dc12:	b7 83       	std	Z+7, r27	; 0x07
    dc14:	87 e8       	ldi	r24, 0x87	; 135
    dc16:	97 e0       	ldi	r25, 0x07	; 7
    dc18:	a0 e0       	ldi	r26, 0x00	; 0
    dc1a:	81 83       	std	Z+1, r24	; 0x01
    dc1c:	92 83       	std	Z+2, r25	; 0x02
    dc1e:	a3 83       	std	Z+3, r26	; 0x03
    dc20:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
            }
            if( rc == RES_OK)
            {
                fatfs_status("/");
    dc24:	86 ea       	ldi	r24, 0xA6	; 166
    dc26:	98 e0       	ldi	r25, 0x08	; 8
    dc28:	33 d1       	rcall	.+614    	; 0xde90 <fatfs_status>
            }
        }
        printf("END MMC INIT\n");
    dc2a:	89 e7       	ldi	r24, 0x79	; 121
    dc2c:	97 e0       	ldi	r25, 0x07	; 7
    dc2e:	a0 e0       	ldi	r26, 0x00	; 0
    dc30:	ed b7       	in	r30, 0x3d	; 61
    dc32:	fe b7       	in	r31, 0x3e	; 62
    dc34:	81 83       	std	Z+1, r24	; 0x01
    dc36:	92 83       	std	Z+2, r25	; 0x02
    dc38:	a3 83       	std	Z+3, r26	; 0x03
    dc3a:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    }
    mmc_init_flag = 1;
    dc3e:	81 e0       	ldi	r24, 0x01	; 1
    dc40:	90 e0       	ldi	r25, 0x00	; 0
    dc42:	90 93 33 18 	sts	0x1833, r25	; 0x801833 <mmc_init_flag+0x1>
    dc46:	80 93 32 18 	sts	0x1832, r24	; 0x801832 <mmc_init_flag>

	if(rc != RES_OK)
    dc4a:	01 15       	cp	r16, r1
    dc4c:	11 05       	cpc	r17, r1
    dc4e:	21 f0       	breq	.+8      	; 0xdc58 <mmc_init+0x176>
		set_error(1);
    dc50:	0e 94 4c 25 	call	0x4a98	; 0x4a98 <set_error>
    dc54:	c8 01       	movw	r24, r16
    dc56:	02 c0       	rjmp	.+4      	; 0xdc5c <mmc_init+0x17a>
    dc58:	80 e0       	ldi	r24, 0x00	; 0
    dc5a:	90 e0       	ldi	r25, 0x00	; 0

    return( rc ) ;
}
    dc5c:	2b 96       	adiw	r28, 0x0b	; 11
    dc5e:	e6 e0       	ldi	r30, 0x06	; 6
    dc60:	0c 94 31 e3 	jmp	0x1c662	; 0x1c662 <__epilogue_restores__+0x18>

0000dc64 <mmc_wp_status>:

MEMSPACE
int mmc_wp_status()
{
    return (0);
}
    dc64:	80 e0       	ldi	r24, 0x00	; 0
    dc66:	90 e0       	ldi	r25, 0x00	; 0
    dc68:	08 95       	ret

0000dc6a <tm_to_fat>:
/// @param[in] t: POSIX struct tm * to convert.
///
/// @return  FAT32 time.
MEMSPACE
uint32_t tm_to_fat(tm_t *t)
{
    dc6a:	0f 93       	push	r16
    dc6c:	1f 93       	push	r17
    dc6e:	fc 01       	movw	r30, r24
        | (((uint32_t)t->tm_mon+1) << 21)
        | (((uint32_t)t->tm_mday) << 16)
        | ((uint32_t)t->tm_hour << 11)
        | ((uint32_t)t->tm_min << 5)
        | ((uint32_t)t->tm_sec >> 1);
    return(fat);
    dc70:	46 81       	ldd	r20, Z+6	; 0x06
    dc72:	57 81       	ldd	r21, Z+7	; 0x07
    dc74:	05 2e       	mov	r0, r21
    dc76:	00 0c       	add	r0, r0
    dc78:	66 0b       	sbc	r22, r22
    dc7a:	77 0b       	sbc	r23, r23
    dc7c:	ba 01       	movw	r22, r20
    dc7e:	55 27       	eor	r21, r21
    dc80:	44 27       	eor	r20, r20
    dc82:	84 81       	ldd	r24, Z+4	; 0x04
    dc84:	95 81       	ldd	r25, Z+5	; 0x05
    dc86:	09 2e       	mov	r0, r25
    dc88:	00 0c       	add	r0, r0
    dc8a:	aa 0b       	sbc	r26, r26
    dc8c:	bb 0b       	sbc	r27, r27
    dc8e:	2b e0       	ldi	r18, 0x0B	; 11
    dc90:	88 0f       	add	r24, r24
    dc92:	99 1f       	adc	r25, r25
    dc94:	aa 1f       	adc	r26, r26
    dc96:	bb 1f       	adc	r27, r27
    dc98:	2a 95       	dec	r18
    dc9a:	d1 f7       	brne	.-12     	; 0xdc90 <tm_to_fat+0x26>
    dc9c:	48 2b       	or	r20, r24
    dc9e:	59 2b       	or	r21, r25
    dca0:	6a 2b       	or	r22, r26
    dca2:	7b 2b       	or	r23, r27
    dca4:	82 81       	ldd	r24, Z+2	; 0x02
    dca6:	93 81       	ldd	r25, Z+3	; 0x03
    dca8:	09 2e       	mov	r0, r25
    dcaa:	00 0c       	add	r0, r0
    dcac:	aa 0b       	sbc	r26, r26
    dcae:	bb 0b       	sbc	r27, r27
    dcb0:	35 e0       	ldi	r19, 0x05	; 5
    dcb2:	88 0f       	add	r24, r24
    dcb4:	99 1f       	adc	r25, r25
    dcb6:	aa 1f       	adc	r26, r26
    dcb8:	bb 1f       	adc	r27, r27
    dcba:	3a 95       	dec	r19
    dcbc:	d1 f7       	brne	.-12     	; 0xdcb2 <tm_to_fat+0x48>
    dcbe:	48 2b       	or	r20, r24
    dcc0:	59 2b       	or	r21, r25
    dcc2:	6a 2b       	or	r22, r26
    dcc4:	7b 2b       	or	r23, r27
    dcc6:	80 81       	ld	r24, Z
    dcc8:	91 81       	ldd	r25, Z+1	; 0x01
    dcca:	09 2e       	mov	r0, r25
    dccc:	00 0c       	add	r0, r0
    dcce:	aa 0b       	sbc	r26, r26
    dcd0:	bb 0b       	sbc	r27, r27
    dcd2:	b6 95       	lsr	r27
    dcd4:	a7 95       	ror	r26
    dcd6:	97 95       	ror	r25
    dcd8:	87 95       	ror	r24
    dcda:	84 2b       	or	r24, r20
    dcdc:	95 2b       	or	r25, r21
    dcde:	a6 2b       	or	r26, r22
    dce0:	b7 2b       	or	r27, r23
    dce2:	02 85       	ldd	r16, Z+10	; 0x0a
    dce4:	13 85       	ldd	r17, Z+11	; 0x0b
    dce6:	00 55       	subi	r16, 0x50	; 80
    dce8:	11 09       	sbc	r17, r1
    dcea:	01 2e       	mov	r0, r17
    dcec:	00 0c       	add	r0, r0
    dcee:	22 0b       	sbc	r18, r18
    dcf0:	33 0b       	sbc	r19, r19
    dcf2:	49 e1       	ldi	r20, 0x19	; 25
    dcf4:	00 0f       	add	r16, r16
    dcf6:	11 1f       	adc	r17, r17
    dcf8:	22 1f       	adc	r18, r18
    dcfa:	33 1f       	adc	r19, r19
    dcfc:	4a 95       	dec	r20
    dcfe:	d1 f7       	brne	.-12     	; 0xdcf4 <tm_to_fat+0x8a>
    dd00:	ac 01       	movw	r20, r24
    dd02:	bd 01       	movw	r22, r26
    dd04:	40 2b       	or	r20, r16
    dd06:	51 2b       	or	r21, r17
    dd08:	62 2b       	or	r22, r18
    dd0a:	73 2b       	or	r23, r19
    dd0c:	80 85       	ldd	r24, Z+8	; 0x08
    dd0e:	91 85       	ldd	r25, Z+9	; 0x09
    dd10:	09 2e       	mov	r0, r25
    dd12:	00 0c       	add	r0, r0
    dd14:	aa 0b       	sbc	r26, r26
    dd16:	bb 0b       	sbc	r27, r27
    dd18:	01 96       	adiw	r24, 0x01	; 1
    dd1a:	a1 1d       	adc	r26, r1
    dd1c:	b1 1d       	adc	r27, r1
    dd1e:	e5 e1       	ldi	r30, 0x15	; 21
    dd20:	88 0f       	add	r24, r24
    dd22:	99 1f       	adc	r25, r25
    dd24:	aa 1f       	adc	r26, r26
    dd26:	bb 1f       	adc	r27, r27
    dd28:	ea 95       	dec	r30
    dd2a:	d1 f7       	brne	.-12     	; 0xdd20 <tm_to_fat+0xb6>
    dd2c:	8a 01       	movw	r16, r20
    dd2e:	9b 01       	movw	r18, r22
    dd30:	08 2b       	or	r16, r24
    dd32:	19 2b       	or	r17, r25
    dd34:	2a 2b       	or	r18, r26
    dd36:	3b 2b       	or	r19, r27
    dd38:	c9 01       	movw	r24, r18
    dd3a:	b8 01       	movw	r22, r16
}
    dd3c:	1f 91       	pop	r17
    dd3e:	0f 91       	pop	r16
    dd40:	08 95       	ret

0000dd42 <get_fattime>:
///
/// @return FAT32 time.
/// @see tm_to_fat().
MEMSPACE
DWORD get_fattime (void)
{
    dd42:	a4 e0       	ldi	r26, 0x04	; 4
    dd44:	b0 e0       	ldi	r27, 0x00	; 0
    dd46:	e7 ea       	ldi	r30, 0xA7	; 167
    dd48:	fe e6       	ldi	r31, 0x6E	; 110
    dd4a:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__prologue_saves__+0x20>
    time_t t;
/* Get GMT time */
    time(&t);
    dd4e:	ce 01       	movw	r24, r28
    dd50:	01 96       	adiw	r24, 0x01	; 1
    dd52:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <time>
    return( tm_to_fat(localtime(&t)));
    dd56:	ce 01       	movw	r24, r28
    dd58:	01 96       	adiw	r24, 0x01	; 1
    dd5a:	0e 94 ed 36 	call	0x6dda	; 0x6dda <localtime>
    dd5e:	85 df       	rcall	.-246    	; 0xdc6a <tm_to_fat>
}
    dd60:	24 96       	adiw	r28, 0x04	; 4
    dd62:	e2 e0       	ldi	r30, 0x02	; 2
    dd64:	0c 94 35 e3 	jmp	0x1c66a	; 0x1c66a <__epilogue_restores__+0x20>

0000dd68 <put_rc>:
/// @param[in] rc: FatFs status return code
/// @return  void

MEMSPACE
void put_rc (int rc)
{
    dd68:	00 d0       	rcall	.+0      	; 0xdd6a <put_rc+0x2>
    dd6a:	00 d0       	rcall	.+0      	; 0xdd6c <put_rc+0x4>
    dd6c:	1f 92       	push	r1
        ptr = "INVALID ERROR MESSAGE";
    else
        ptr = (char *) err_msg[(int)rc];
    printf("rc=%u FR_%s\n", rc, ptr);
#else
    printf("rc=%u\n", rc);
    dd6e:	ed b7       	in	r30, 0x3d	; 61
    dd70:	fe b7       	in	r31, 0x3e	; 62
    dd72:	95 83       	std	Z+5, r25	; 0x05
    dd74:	84 83       	std	Z+4, r24	; 0x04
    dd76:	8c e9       	ldi	r24, 0x9C	; 156
    dd78:	9a e0       	ldi	r25, 0x0A	; 10
    dd7a:	a0 e0       	ldi	r26, 0x00	; 0
    dd7c:	81 83       	std	Z+1, r24	; 0x01
    dd7e:	92 83       	std	Z+2, r25	; 0x02
    dd80:	a3 83       	std	Z+3, r26	; 0x03
    dd82:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
#endif
}
    dd86:	0f 90       	pop	r0
    dd88:	0f 90       	pop	r0
    dd8a:	0f 90       	pop	r0
    dd8c:	0f 90       	pop	r0
    dd8e:	0f 90       	pop	r0
    dd90:	08 95       	ret

0000dd92 <fatfs_scan_files>:

MEMSPACE
int fatfs_scan_files (
char* path                                        /* Pointer to the working buffer with start path */
)
{
    dd92:	a4 e4       	ldi	r26, 0x44	; 68
    dd94:	b1 e0       	ldi	r27, 0x01	; 1
    dd96:	ef ec       	ldi	r30, 0xCF	; 207
    dd98:	fe e6       	ldi	r31, 0x6E	; 110
    dd9a:	0c 94 14 e3 	jmp	0x1c628	; 0x1c628 <__prologue_saves__+0x16>
    dd9e:	8c 01       	movw	r16, r24
    DIR dirs;
    FRESULT fr;
    int i;
    FILINFO info;

    fr = f_opendir(&dirs, path);
    dda0:	bc 01       	movw	r22, r24
    dda2:	ce 01       	movw	r24, r28
    dda4:	89 5e       	subi	r24, 0xE9	; 233
    dda6:	9e 4f       	sbci	r25, 0xFE	; 254
    dda8:	0e 94 79 61 	call	0xc2f2	; 0xc2f2 <f_opendir>
    if (fr == FR_OK)
    ddac:	00 97       	sbiw	r24, 0x00	; 0
    ddae:	09 f0       	breq	.+2      	; 0xddb2 <fatfs_scan_files+0x20>
    ddb0:	5b c0       	rjmp	.+182    	; 0xde68 <fatfs_scan_files+0xd6>
        {
            if (info.fattrib & AM_DIR)
            {
                AccDirs++;
                i = strlen(path);
                path[i] = '/'; strcpy(path+i+1, info.fname);
    ddb2:	8f e2       	ldi	r24, 0x2F	; 47
    ddb4:	d8 2e       	mov	r13, r24
    FILINFO info;

    fr = f_opendir(&dirs, path);
    if (fr == FR_OK)
    {
        while (((fr = f_readdir(&dirs, &info)) == FR_OK) && info.fname[0])
    ddb6:	be 01       	movw	r22, r28
    ddb8:	6f 5f       	subi	r22, 0xFF	; 255
    ddba:	7f 4f       	sbci	r23, 0xFF	; 255
    ddbc:	ce 01       	movw	r24, r28
    ddbe:	89 5e       	subi	r24, 0xE9	; 233
    ddc0:	9e 4f       	sbci	r25, 0xFE	; 254
    ddc2:	0e 94 ff 61 	call	0xc3fe	; 0xc3fe <f_readdir>
    ddc6:	00 97       	sbiw	r24, 0x00	; 0
    ddc8:	09 f0       	breq	.+2      	; 0xddcc <fatfs_scan_files+0x3a>
    ddca:	4e c0       	rjmp	.+156    	; 0xde68 <fatfs_scan_files+0xd6>
    ddcc:	2f 89       	ldd	r18, Y+23	; 0x17
    ddce:	22 23       	and	r18, r18
    ddd0:	09 f4       	brne	.+2      	; 0xddd4 <fatfs_scan_files+0x42>
    ddd2:	4a c0       	rjmp	.+148    	; 0xde68 <fatfs_scan_files+0xd6>
        {
            if (info.fattrib & AM_DIR)
    ddd4:	89 85       	ldd	r24, Y+9	; 0x09
    ddd6:	84 ff       	sbrs	r24, 4
    ddd8:	25 c0       	rjmp	.+74     	; 0xde24 <fatfs_scan_files+0x92>
            {
                AccDirs++;
    ddda:	80 91 c5 1c 	lds	r24, 0x1CC5	; 0x801cc5 <AccDirs>
    ddde:	90 91 c6 1c 	lds	r25, 0x1CC6	; 0x801cc6 <AccDirs+0x1>
    dde2:	01 96       	adiw	r24, 0x01	; 1
    dde4:	90 93 c6 1c 	sts	0x1CC6, r25	; 0x801cc6 <AccDirs+0x1>
    dde8:	80 93 c5 1c 	sts	0x1CC5, r24	; 0x801cc5 <AccDirs>
                i = strlen(path);
    ddec:	f8 01       	movw	r30, r16
    ddee:	01 90       	ld	r0, Z+
    ddf0:	00 20       	and	r0, r0
    ddf2:	e9 f7       	brne	.-6      	; 0xddee <fatfs_scan_files+0x5c>
    ddf4:	31 97       	sbiw	r30, 0x01	; 1
    ddf6:	e0 1b       	sub	r30, r16
    ddf8:	f1 0b       	sbc	r31, r17
                path[i] = '/'; strcpy(path+i+1, info.fname);
    ddfa:	78 01       	movw	r14, r16
    ddfc:	ee 0e       	add	r14, r30
    ddfe:	ff 1e       	adc	r15, r31
    de00:	d7 01       	movw	r26, r14
    de02:	dc 92       	st	X, r13
    de04:	cf 01       	movw	r24, r30
    de06:	01 96       	adiw	r24, 0x01	; 1
    de08:	be 01       	movw	r22, r28
    de0a:	69 5e       	subi	r22, 0xE9	; 233
    de0c:	7f 4f       	sbci	r23, 0xFF	; 255
    de0e:	80 0f       	add	r24, r16
    de10:	91 1f       	adc	r25, r17
    de12:	0e 94 93 2f 	call	0x5f26	; 0x5f26 <strcpy>
                fr = fatfs_scan_files(path);
    de16:	c8 01       	movw	r24, r16
    de18:	bc df       	rcall	.-136    	; 0xdd92 <fatfs_scan_files>
                path[i] = 0;
    de1a:	f7 01       	movw	r30, r14
    de1c:	10 82       	st	Z, r1
                if (fr != FR_OK) break;
    de1e:	00 97       	sbiw	r24, 0x00	; 0
    de20:	51 f2       	breq	.-108    	; 0xddb6 <fatfs_scan_files+0x24>
    de22:	22 c0       	rjmp	.+68     	; 0xde68 <fatfs_scan_files+0xd6>
            }
            else
            {
//              xprintf(PSTR("%s/%s\n"), path, info.fname);
                AccFiles++;
    de24:	80 91 c7 1c 	lds	r24, 0x1CC7	; 0x801cc7 <AccFiles>
    de28:	90 91 c8 1c 	lds	r25, 0x1CC8	; 0x801cc8 <AccFiles+0x1>
    de2c:	01 96       	adiw	r24, 0x01	; 1
    de2e:	90 93 c8 1c 	sts	0x1CC8, r25	; 0x801cc8 <AccFiles+0x1>
    de32:	80 93 c7 1c 	sts	0x1CC7, r24	; 0x801cc7 <AccFiles>
                AccSize += info.fsize;
    de36:	40 91 c1 1c 	lds	r20, 0x1CC1	; 0x801cc1 <AccSize>
    de3a:	50 91 c2 1c 	lds	r21, 0x1CC2	; 0x801cc2 <AccSize+0x1>
    de3e:	60 91 c3 1c 	lds	r22, 0x1CC3	; 0x801cc3 <AccSize+0x2>
    de42:	70 91 c4 1c 	lds	r23, 0x1CC4	; 0x801cc4 <AccSize+0x3>
    de46:	89 81       	ldd	r24, Y+1	; 0x01
    de48:	9a 81       	ldd	r25, Y+2	; 0x02
    de4a:	ab 81       	ldd	r26, Y+3	; 0x03
    de4c:	bc 81       	ldd	r27, Y+4	; 0x04
    de4e:	84 0f       	add	r24, r20
    de50:	95 1f       	adc	r25, r21
    de52:	a6 1f       	adc	r26, r22
    de54:	b7 1f       	adc	r27, r23
    de56:	80 93 c1 1c 	sts	0x1CC1, r24	; 0x801cc1 <AccSize>
    de5a:	90 93 c2 1c 	sts	0x1CC2, r25	; 0x801cc2 <AccSize+0x1>
    de5e:	a0 93 c3 1c 	sts	0x1CC3, r26	; 0x801cc3 <AccSize+0x2>
    de62:	b0 93 c4 1c 	sts	0x1CC4, r27	; 0x801cc4 <AccSize+0x3>
    de66:	a7 cf       	rjmp	.-178    	; 0xddb6 <fatfs_scan_files+0x24>
#endif
        }
    }

    return fr;
}
    de68:	cc 5b       	subi	r28, 0xBC	; 188
    de6a:	de 4f       	sbci	r29, 0xFE	; 254
    de6c:	e7 e0       	ldi	r30, 0x07	; 7
    de6e:	0c 94 30 e3 	jmp	0x1c660	; 0x1c660 <__epilogue_restores__+0x16>

0000de72 <fatfs_fstype>:
/// @brief  return a string with the file system type
/// @param[in] type: file system type
/// @return string with file system type
MEMSPACE
char *fatfs_fstype(int type)
{
    de72:	01 97       	sbiw	r24, 0x01	; 1
    de74:	84 30       	cpi	r24, 0x04	; 4
    de76:	91 05       	cpc	r25, r1
    de78:	40 f4       	brcc	.+16     	; 0xde8a <fatfs_fstype+0x18>
    de7a:	88 0f       	add	r24, r24
    de7c:	99 1f       	adc	r25, r25
    de7e:	fc 01       	movw	r30, r24
    de80:	e6 53       	subi	r30, 0x36	; 54
    de82:	f7 4f       	sbci	r31, 0xF7	; 247
    de84:	80 81       	ld	r24, Z
    de86:	91 81       	ldd	r25, Z+1	; 0x01
    de88:	08 95       	ret
    char *ptr;
    switch(type)
    de8a:	88 ea       	ldi	r24, 0xA8	; 168
    de8c:	98 e0       	ldi	r25, 0x08	; 8
        default:
            ptr = "UNKNOWN";
            break;
    }
    return(ptr);
}
    de8e:	08 95       	ret

0000de90 <fatfs_status>:
/// @see AccFiles: Total number of Files
/// @see AccSize:  Total size of all files
/// @return  1 on success 0 on error
MEMSPACE
int fatfs_status(char *ptr)
{
    de90:	a7 e3       	ldi	r26, 0x37	; 55
    de92:	b0 e0       	ldi	r27, 0x00	; 0
    de94:	ee e4       	ldi	r30, 0x4E	; 78
    de96:	ff e6       	ldi	r31, 0x6F	; 111
    de98:	0c 94 13 e3 	jmp	0x1c626	; 0x1c626 <__prologue_saves__+0x14>
    de9c:	7c 01       	movw	r14, r24
    int res;
    FATFS *fs;
    char label[24+2];
    DWORD vsn;                                    // volume serial number

    while(*ptr == ' ' || *ptr == '\t')
    de9e:	fc 01       	movw	r30, r24
    dea0:	21 91       	ld	r18, Z+
    dea2:	cf 01       	movw	r24, r30
    dea4:	20 32       	cpi	r18, 0x20	; 32
    dea6:	d1 f3       	breq	.-12     	; 0xde9c <fatfs_status+0xc>
    dea8:	29 30       	cpi	r18, 0x09	; 9
    deaa:	c1 f3       	breq	.-16     	; 0xde9c <fatfs_status+0xc>
        ++ptr;
    printf("fatfs status:%s\n",ptr);
    deac:	ed b7       	in	r30, 0x3d	; 61
    deae:	fe b7       	in	r31, 0x3e	; 62
    deb0:	e4 82       	std	Z+4, r14	; 0x04
    deb2:	f5 82       	std	Z+5, r15	; 0x05
    deb4:	8b e8       	ldi	r24, 0x8B	; 139
    deb6:	9a e0       	ldi	r25, 0x0A	; 10
    deb8:	a0 e0       	ldi	r26, 0x00	; 0
    deba:	81 83       	std	Z+1, r24	; 0x01
    debc:	92 83       	std	Z+2, r25	; 0x02
    debe:	a3 83       	std	Z+3, r26	; 0x03
    dec0:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    res = f_getfree(ptr, (DWORD*)&p2, &fs);
    dec4:	ae 01       	movw	r20, r28
    dec6:	4a 5c       	subi	r20, 0xCA	; 202
    dec8:	5f 4f       	sbci	r21, 0xFF	; 255
    deca:	be 01       	movw	r22, r28
    decc:	6e 5c       	subi	r22, 0xCE	; 206
    dece:	7f 4f       	sbci	r23, 0xFF	; 255
    ded0:	c7 01       	movw	r24, r14
    ded2:	0e 94 81 62 	call	0xc502	; 0xc502 <f_getfree>
    if (res)
    ded6:	89 2b       	or	r24, r25
    ded8:	19 f0       	breq	.+6      	; 0xdee0 <fatfs_status+0x50>
    {
        printf("fatfs_status f_getfree failed\n");
    deda:	8c e6       	ldi	r24, 0x6C	; 108
    dedc:	9a e0       	ldi	r25, 0x0A	; 10
    dede:	c0 c0       	rjmp	.+384    	; 0xe060 <fatfs_status+0x1d0>
        return(0);
    }
    printf("FAT type                = %s\n",  fatfs_fstype(fs->fs_type));
    dee0:	ee a9       	ldd	r30, Y+54	; 0x36
    dee2:	ff a9       	ldd	r31, Y+55	; 0x37
    dee4:	80 81       	ld	r24, Z
    dee6:	90 e0       	ldi	r25, 0x00	; 0
    dee8:	c4 df       	rcall	.-120    	; 0xde72 <fatfs_fstype>
    deea:	ed b7       	in	r30, 0x3d	; 61
    deec:	fe b7       	in	r31, 0x3e	; 62
    deee:	95 83       	std	Z+5, r25	; 0x05
    def0:	84 83       	std	Z+4, r24	; 0x04
    def2:	8e e4       	ldi	r24, 0x4E	; 78
    def4:	9a e0       	ldi	r25, 0x0A	; 10
    def6:	a0 e0       	ldi	r26, 0x00	; 0
    def8:	81 83       	std	Z+1, r24	; 0x01
    defa:	92 83       	std	Z+2, r25	; 0x02
    defc:	a3 83       	std	Z+3, r26	; 0x03
    defe:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    printf("Bytes/Cluster           = %lu\n", (DWORD)fs->csize * 512);
    df02:	ee a9       	ldd	r30, Y+54	; 0x36
    df04:	ff a9       	ldd	r31, Y+55	; 0x37
    df06:	81 85       	ldd	r24, Z+9	; 0x09
    df08:	92 85       	ldd	r25, Z+10	; 0x0a
    df0a:	a0 e0       	ldi	r26, 0x00	; 0
    df0c:	b0 e0       	ldi	r27, 0x00	; 0
    df0e:	39 e0       	ldi	r19, 0x09	; 9
    df10:	88 0f       	add	r24, r24
    df12:	99 1f       	adc	r25, r25
    df14:	aa 1f       	adc	r26, r26
    df16:	bb 1f       	adc	r27, r27
    df18:	3a 95       	dec	r19
    df1a:	d1 f7       	brne	.-12     	; 0xdf10 <fatfs_status+0x80>
    df1c:	ed b7       	in	r30, 0x3d	; 61
    df1e:	fe b7       	in	r31, 0x3e	; 62
    df20:	84 83       	std	Z+4, r24	; 0x04
    df22:	95 83       	std	Z+5, r25	; 0x05
    df24:	a6 83       	std	Z+6, r26	; 0x06
    df26:	b7 83       	std	Z+7, r27	; 0x07
    df28:	8f e2       	ldi	r24, 0x2F	; 47
    df2a:	9a e0       	ldi	r25, 0x0A	; 10
    df2c:	a0 e0       	ldi	r26, 0x00	; 0
    df2e:	81 83       	std	Z+1, r24	; 0x01
    df30:	92 83       	std	Z+2, r25	; 0x02
    df32:	a3 83       	std	Z+3, r26	; 0x03
    df34:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    printf("Number of FATs          = %u\n",  fs->n_fats);
    df38:	ee a9       	ldd	r30, Y+54	; 0x36
    df3a:	ff a9       	ldd	r31, Y+55	; 0x37
    df3c:	82 81       	ldd	r24, Z+2	; 0x02
    df3e:	90 e0       	ldi	r25, 0x00	; 0
    df40:	ed b7       	in	r30, 0x3d	; 61
    df42:	fe b7       	in	r31, 0x3e	; 62
    df44:	95 83       	std	Z+5, r25	; 0x05
    df46:	84 83       	std	Z+4, r24	; 0x04
    df48:	81 e1       	ldi	r24, 0x11	; 17
    df4a:	9a e0       	ldi	r25, 0x0A	; 10
    df4c:	a0 e0       	ldi	r26, 0x00	; 0
    df4e:	81 83       	std	Z+1, r24	; 0x01
    df50:	92 83       	std	Z+2, r25	; 0x02
    df52:	a3 83       	std	Z+3, r26	; 0x03
    df54:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    printf("Root DIR entries        = %u\n",  fs->n_rootdir);
    df58:	ee a9       	ldd	r30, Y+54	; 0x36
    df5a:	ff a9       	ldd	r31, Y+55	; 0x37
    df5c:	87 81       	ldd	r24, Z+7	; 0x07
    df5e:	90 85       	ldd	r25, Z+8	; 0x08
    df60:	ed b7       	in	r30, 0x3d	; 61
    df62:	fe b7       	in	r31, 0x3e	; 62
    df64:	95 83       	std	Z+5, r25	; 0x05
    df66:	84 83       	std	Z+4, r24	; 0x04
    df68:	83 ef       	ldi	r24, 0xF3	; 243
    df6a:	99 e0       	ldi	r25, 0x09	; 9
    df6c:	a0 e0       	ldi	r26, 0x00	; 0
    df6e:	81 83       	std	Z+1, r24	; 0x01
    df70:	92 83       	std	Z+2, r25	; 0x02
    df72:	a3 83       	std	Z+3, r26	; 0x03
    df74:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    printf("Sectors/FAT             = %lu\n", fs->fsize);
    df78:	ee a9       	ldd	r30, Y+54	; 0x36
    df7a:	ff a9       	ldd	r31, Y+55	; 0x37
    df7c:	85 8d       	ldd	r24, Z+29	; 0x1d
    df7e:	96 8d       	ldd	r25, Z+30	; 0x1e
    df80:	a7 8d       	ldd	r26, Z+31	; 0x1f
    df82:	b0 a1       	ldd	r27, Z+32	; 0x20
    df84:	ed b7       	in	r30, 0x3d	; 61
    df86:	fe b7       	in	r31, 0x3e	; 62
    df88:	84 83       	std	Z+4, r24	; 0x04
    df8a:	95 83       	std	Z+5, r25	; 0x05
    df8c:	a6 83       	std	Z+6, r26	; 0x06
    df8e:	b7 83       	std	Z+7, r27	; 0x07
    df90:	84 ed       	ldi	r24, 0xD4	; 212
    df92:	99 e0       	ldi	r25, 0x09	; 9
    df94:	a0 e0       	ldi	r26, 0x00	; 0
    df96:	81 83       	std	Z+1, r24	; 0x01
    df98:	92 83       	std	Z+2, r25	; 0x02
    df9a:	a3 83       	std	Z+3, r26	; 0x03
    df9c:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    printf("Number of clusters      = %lu\n", fs->n_fatent - 2);
    dfa0:	ee a9       	ldd	r30, Y+54	; 0x36
    dfa2:	ff a9       	ldd	r31, Y+55	; 0x37
    dfa4:	81 8d       	ldd	r24, Z+25	; 0x19
    dfa6:	92 8d       	ldd	r25, Z+26	; 0x1a
    dfa8:	a3 8d       	ldd	r26, Z+27	; 0x1b
    dfaa:	b4 8d       	ldd	r27, Z+28	; 0x1c
    dfac:	02 97       	sbiw	r24, 0x02	; 2
    dfae:	a1 09       	sbc	r26, r1
    dfb0:	b1 09       	sbc	r27, r1
    dfb2:	ed b7       	in	r30, 0x3d	; 61
    dfb4:	fe b7       	in	r31, 0x3e	; 62
    dfb6:	84 83       	std	Z+4, r24	; 0x04
    dfb8:	95 83       	std	Z+5, r25	; 0x05
    dfba:	a6 83       	std	Z+6, r26	; 0x06
    dfbc:	b7 83       	std	Z+7, r27	; 0x07
    dfbe:	85 eb       	ldi	r24, 0xB5	; 181
    dfc0:	99 e0       	ldi	r25, 0x09	; 9
    dfc2:	a0 e0       	ldi	r26, 0x00	; 0
    dfc4:	81 83       	std	Z+1, r24	; 0x01
    dfc6:	92 83       	std	Z+2, r25	; 0x02
    dfc8:	a3 83       	std	Z+3, r26	; 0x03
    dfca:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    printf("FAT start (lba)         = %lu\n", fs->fatbase);
    dfce:	ee a9       	ldd	r30, Y+54	; 0x36
    dfd0:	ff a9       	ldd	r31, Y+55	; 0x37
    dfd2:	85 a1       	ldd	r24, Z+37	; 0x25
    dfd4:	96 a1       	ldd	r25, Z+38	; 0x26
    dfd6:	a7 a1       	ldd	r26, Z+39	; 0x27
    dfd8:	b0 a5       	ldd	r27, Z+40	; 0x28
    dfda:	ed b7       	in	r30, 0x3d	; 61
    dfdc:	fe b7       	in	r31, 0x3e	; 62
    dfde:	84 83       	std	Z+4, r24	; 0x04
    dfe0:	95 83       	std	Z+5, r25	; 0x05
    dfe2:	a6 83       	std	Z+6, r26	; 0x06
    dfe4:	b7 83       	std	Z+7, r27	; 0x07
    dfe6:	86 e9       	ldi	r24, 0x96	; 150
    dfe8:	99 e0       	ldi	r25, 0x09	; 9
    dfea:	a0 e0       	ldi	r26, 0x00	; 0
    dfec:	81 83       	std	Z+1, r24	; 0x01
    dfee:	92 83       	std	Z+2, r25	; 0x02
    dff0:	a3 83       	std	Z+3, r26	; 0x03
    dff2:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    printf("DIR start (lba,clustor) = %lu\n", fs->dirbase);
    dff6:	ee a9       	ldd	r30, Y+54	; 0x36
    dff8:	ff a9       	ldd	r31, Y+55	; 0x37
    dffa:	81 a5       	ldd	r24, Z+41	; 0x29
    dffc:	92 a5       	ldd	r25, Z+42	; 0x2a
    dffe:	a3 a5       	ldd	r26, Z+43	; 0x2b
    e000:	b4 a5       	ldd	r27, Z+44	; 0x2c
    e002:	ed b7       	in	r30, 0x3d	; 61
    e004:	fe b7       	in	r31, 0x3e	; 62
    e006:	84 83       	std	Z+4, r24	; 0x04
    e008:	95 83       	std	Z+5, r25	; 0x05
    e00a:	a6 83       	std	Z+6, r26	; 0x06
    e00c:	b7 83       	std	Z+7, r27	; 0x07
    e00e:	87 e7       	ldi	r24, 0x77	; 119
    e010:	99 e0       	ldi	r25, 0x09	; 9
    e012:	a0 e0       	ldi	r26, 0x00	; 0
    e014:	81 83       	std	Z+1, r24	; 0x01
    e016:	92 83       	std	Z+2, r25	; 0x02
    e018:	a3 83       	std	Z+3, r26	; 0x03
    e01a:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    printf("Data start (lba)        = %lu\n", fs->database);
    e01e:	ee a9       	ldd	r30, Y+54	; 0x36
    e020:	ff a9       	ldd	r31, Y+55	; 0x37
    e022:	85 a5       	ldd	r24, Z+45	; 0x2d
    e024:	96 a5       	ldd	r25, Z+46	; 0x2e
    e026:	a7 a5       	ldd	r26, Z+47	; 0x2f
    e028:	b0 a9       	ldd	r27, Z+48	; 0x30
    e02a:	ed b7       	in	r30, 0x3d	; 61
    e02c:	fe b7       	in	r31, 0x3e	; 62
    e02e:	84 83       	std	Z+4, r24	; 0x04
    e030:	95 83       	std	Z+5, r25	; 0x05
    e032:	a6 83       	std	Z+6, r26	; 0x06
    e034:	b7 83       	std	Z+7, r27	; 0x07
    e036:	88 e5       	ldi	r24, 0x58	; 88
    e038:	99 e0       	ldi	r25, 0x09	; 9
    e03a:	a0 e0       	ldi	r26, 0x00	; 0
    e03c:	81 83       	std	Z+1, r24	; 0x01
    e03e:	92 83       	std	Z+2, r25	; 0x02
    e040:	a3 83       	std	Z+3, r26	; 0x03
    e042:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>

#if FF_USE_LABEL
    res = f_getlabel(ptr, label, (DWORD*)&vsn);
    e046:	ae 01       	movw	r20, r28
    e048:	42 5d       	subi	r20, 0xD2	; 210
    e04a:	5f 4f       	sbci	r21, 0xFF	; 255
    e04c:	be 01       	movw	r22, r28
    e04e:	6c 5e       	subi	r22, 0xEC	; 236
    e050:	7f 4f       	sbci	r23, 0xFF	; 255
    e052:	c7 01       	movw	r24, r14
    e054:	0e 94 b3 66 	call	0xcd66	; 0xcd66 <f_getlabel>
    if (res)
    e058:	89 2b       	or	r24, r25
    e05a:	69 f0       	breq	.+26     	; 0xe076 <fatfs_status+0x1e6>
    {
        printf("fatfs_status f_getlabel failed\n");
    e05c:	88 e3       	ldi	r24, 0x38	; 56
    e05e:	99 e0       	ldi	r25, 0x09	; 9
    e060:	a0 e0       	ldi	r26, 0x00	; 0
    e062:	ed b7       	in	r30, 0x3d	; 61
    e064:	fe b7       	in	r31, 0x3e	; 62
    e066:	81 83       	std	Z+1, r24	; 0x01
    e068:	92 83       	std	Z+2, r25	; 0x02
    e06a:	a3 83       	std	Z+3, r26	; 0x03
    e06c:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
        return(0);
    e070:	80 e0       	ldi	r24, 0x00	; 0
    e072:	90 e0       	ldi	r25, 0x00	; 0
    e074:	95 c0       	rjmp	.+298    	; 0xe1a0 <fatfs_status+0x310>
    }
    printf("Volume name             = %s\n", label[0] ? label : "<blank>");
    e076:	8c 89       	ldd	r24, Y+20	; 0x14
    e078:	81 11       	cpse	r24, r1
    e07a:	03 c0       	rjmp	.+6      	; 0xe082 <fatfs_status+0x1f2>
    e07c:	80 eb       	ldi	r24, 0xB0	; 176
    e07e:	98 e0       	ldi	r25, 0x08	; 8
    e080:	02 c0       	rjmp	.+4      	; 0xe086 <fatfs_status+0x1f6>
    e082:	ce 01       	movw	r24, r28
    e084:	44 96       	adiw	r24, 0x14	; 20
    e086:	ed b7       	in	r30, 0x3d	; 61
    e088:	fe b7       	in	r31, 0x3e	; 62
    e08a:	95 83       	std	Z+5, r25	; 0x05
    e08c:	84 83       	std	Z+4, r24	; 0x04
    e08e:	8a e1       	ldi	r24, 0x1A	; 26
    e090:	99 e0       	ldi	r25, 0x09	; 9
    e092:	a0 e0       	ldi	r26, 0x00	; 0
    e094:	81 83       	std	Z+1, r24	; 0x01
    e096:	92 83       	std	Z+2, r25	; 0x02
    e098:	a3 83       	std	Z+3, r26	; 0x03
    e09a:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    printf("Volume S/N              = %04X-%04X\n", (WORD)((DWORD)vsn >> 16), (WORD)(vsn & 0xFFFF));
    e09e:	8e a5       	ldd	r24, Y+46	; 0x2e
    e0a0:	9f a5       	ldd	r25, Y+47	; 0x2f
    e0a2:	a8 a9       	ldd	r26, Y+48	; 0x30
    e0a4:	b9 a9       	ldd	r27, Y+49	; 0x31
    e0a6:	ed b7       	in	r30, 0x3d	; 61
    e0a8:	fe b7       	in	r31, 0x3e	; 62
    e0aa:	97 83       	std	Z+7, r25	; 0x07
    e0ac:	86 83       	std	Z+6, r24	; 0x06
    e0ae:	b5 83       	std	Z+5, r27	; 0x05
    e0b0:	a4 83       	std	Z+4, r26	; 0x04
    e0b2:	85 ef       	ldi	r24, 0xF5	; 245
    e0b4:	98 e0       	ldi	r25, 0x08	; 8
    e0b6:	a0 e0       	ldi	r26, 0x00	; 0
    e0b8:	81 83       	std	Z+1, r24	; 0x01
    e0ba:	92 83       	std	Z+2, r25	; 0x02
    e0bc:	a3 83       	std	Z+3, r26	; 0x03
    e0be:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
#endif

    AccSize = AccFiles = AccDirs = 0;
    e0c2:	10 92 c6 1c 	sts	0x1CC6, r1	; 0x801cc6 <AccDirs+0x1>
    e0c6:	10 92 c5 1c 	sts	0x1CC5, r1	; 0x801cc5 <AccDirs>
    e0ca:	10 92 c8 1c 	sts	0x1CC8, r1	; 0x801cc8 <AccFiles+0x1>
    e0ce:	10 92 c7 1c 	sts	0x1CC7, r1	; 0x801cc7 <AccFiles>
    e0d2:	10 92 c1 1c 	sts	0x1CC1, r1	; 0x801cc1 <AccSize>
    e0d6:	10 92 c2 1c 	sts	0x1CC2, r1	; 0x801cc2 <AccSize+0x1>
    e0da:	10 92 c3 1c 	sts	0x1CC3, r1	; 0x801cc3 <AccSize+0x2>
    e0de:	10 92 c4 1c 	sts	0x1CC4, r1	; 0x801cc4 <AccSize+0x3>
    res = fatfs_scan_files(ptr);
    e0e2:	c7 01       	movw	r24, r14
    e0e4:	56 de       	rcall	.-852    	; 0xdd92 <fatfs_scan_files>
    if (res)
    e0e6:	89 2b       	or	r24, r25
    e0e8:	19 f0       	breq	.+6      	; 0xe0f0 <fatfs_status+0x260>
    {
        printf("fatfs_status fatfs_scan_files failed\n");
    e0ea:	8f ec       	ldi	r24, 0xCF	; 207
    e0ec:	98 e0       	ldi	r25, 0x08	; 8
    e0ee:	b8 cf       	rjmp	.-144    	; 0xe060 <fatfs_status+0x1d0>
        return(0);
    }
    printf("%u files, %lu bytes.\n%u folders.\n"
    e0f0:	0e a9       	ldd	r16, Y+54	; 0x36
    e0f2:	1f a9       	ldd	r17, Y+55	; 0x37
    e0f4:	f8 01       	movw	r30, r16
    e0f6:	c1 84       	ldd	r12, Z+9	; 0x09
    e0f8:	d2 84       	ldd	r13, Z+10	; 0x0a
    e0fa:	e1 2c       	mov	r14, r1
    e0fc:	f1 2c       	mov	r15, r1
    e0fe:	6a a9       	ldd	r22, Y+50	; 0x32
    e100:	7b a9       	ldd	r23, Y+51	; 0x33
    e102:	8c a9       	ldd	r24, Y+52	; 0x34
    e104:	9d a9       	ldd	r25, Y+53	; 0x35
    e106:	a7 01       	movw	r20, r14
    e108:	96 01       	movw	r18, r12
    e10a:	0e 94 5a e2 	call	0x1c4b4	; 0x1c4b4 <__mulsi3>
    e10e:	22 e0       	ldi	r18, 0x02	; 2
    e110:	30 e0       	ldi	r19, 0x00	; 0
    e112:	40 e0       	ldi	r20, 0x00	; 0
    e114:	50 e0       	ldi	r21, 0x00	; 0
    e116:	0e 94 be e2 	call	0x1c57c	; 0x1c57c <__divmodsi4>
    e11a:	ed b7       	in	r30, 0x3d	; 61
    e11c:	fe b7       	in	r31, 0x3e	; 62
    e11e:	20 8b       	std	Z+16, r18	; 0x10
    e120:	31 8b       	std	Z+17, r19	; 0x11
    e122:	42 8b       	std	Z+18, r20	; 0x12
    e124:	53 8b       	std	Z+19, r21	; 0x13
    e126:	f8 01       	movw	r30, r16
    e128:	81 8d       	ldd	r24, Z+25	; 0x19
    e12a:	92 8d       	ldd	r25, Z+26	; 0x1a
    e12c:	a3 8d       	ldd	r26, Z+27	; 0x1b
    e12e:	b4 8d       	ldd	r27, Z+28	; 0x1c
    e130:	9c 01       	movw	r18, r24
    e132:	ad 01       	movw	r20, r26
    e134:	22 50       	subi	r18, 0x02	; 2
    e136:	31 09       	sbc	r19, r1
    e138:	41 09       	sbc	r20, r1
    e13a:	51 09       	sbc	r21, r1
    e13c:	c7 01       	movw	r24, r14
    e13e:	b6 01       	movw	r22, r12
    e140:	0e 94 5a e2 	call	0x1c4b4	; 0x1c4b4 <__mulsi3>
    e144:	dc 01       	movw	r26, r24
    e146:	cb 01       	movw	r24, r22
    e148:	b6 95       	lsr	r27
    e14a:	a7 95       	ror	r26
    e14c:	97 95       	ror	r25
    e14e:	87 95       	ror	r24
    e150:	ed b7       	in	r30, 0x3d	; 61
    e152:	fe b7       	in	r31, 0x3e	; 62
    e154:	84 87       	std	Z+12, r24	; 0x0c
    e156:	95 87       	std	Z+13, r25	; 0x0d
    e158:	a6 87       	std	Z+14, r26	; 0x0e
    e15a:	b7 87       	std	Z+15, r27	; 0x0f
    e15c:	80 91 c5 1c 	lds	r24, 0x1CC5	; 0x801cc5 <AccDirs>
    e160:	90 91 c6 1c 	lds	r25, 0x1CC6	; 0x801cc6 <AccDirs+0x1>
    e164:	93 87       	std	Z+11, r25	; 0x0b
    e166:	82 87       	std	Z+10, r24	; 0x0a
    e168:	80 91 c1 1c 	lds	r24, 0x1CC1	; 0x801cc1 <AccSize>
    e16c:	90 91 c2 1c 	lds	r25, 0x1CC2	; 0x801cc2 <AccSize+0x1>
    e170:	a0 91 c3 1c 	lds	r26, 0x1CC3	; 0x801cc3 <AccSize+0x2>
    e174:	b0 91 c4 1c 	lds	r27, 0x1CC4	; 0x801cc4 <AccSize+0x3>
    e178:	86 83       	std	Z+6, r24	; 0x06
    e17a:	97 83       	std	Z+7, r25	; 0x07
    e17c:	a0 87       	std	Z+8, r26	; 0x08
    e17e:	b1 87       	std	Z+9, r27	; 0x09
    e180:	80 91 c7 1c 	lds	r24, 0x1CC7	; 0x801cc7 <AccFiles>
    e184:	90 91 c8 1c 	lds	r25, 0x1CC8	; 0x801cc8 <AccFiles+0x1>
    e188:	95 83       	std	Z+5, r25	; 0x05
    e18a:	84 83       	std	Z+4, r24	; 0x04
    e18c:	82 e8       	ldi	r24, 0x82	; 130
    e18e:	98 e0       	ldi	r25, 0x08	; 8
    e190:	a0 e0       	ldi	r26, 0x00	; 0
    e192:	81 83       	std	Z+1, r24	; 0x01
    e194:	92 83       	std	Z+2, r25	; 0x02
    e196:	a3 83       	std	Z+3, r26	; 0x03
    e198:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
        "%lu KB total disk space.\n%lu KB available.\n",
        AccFiles, AccSize, AccDirs,
        (fs->n_fatent - 2) * fs->csize / 2, p2 * fs->csize / 2
        );
	return(1);
    e19c:	81 e0       	ldi	r24, 0x01	; 1
    e19e:	90 e0       	ldi	r25, 0x00	; 0
}
    e1a0:	e7 96       	adiw	r28, 0x37	; 55
    e1a2:	e8 e0       	ldi	r30, 0x08	; 8
    e1a4:	0c 94 2f e3 	jmp	0x1c65e	; 0x1c65e <__epilogue_restores__+0x14>

0000e1a8 <fatfs_filinfo_list>:
/// @param[in] : FILINFO pointer
/// @return  void

MEMSPACE
void fatfs_filinfo_list(FILINFO *info)
{
    e1a8:	ab e1       	ldi	r26, 0x1B	; 27
    e1aa:	b0 e0       	ldi	r27, 0x00	; 0
    e1ac:	ea ed       	ldi	r30, 0xDA	; 218
    e1ae:	f0 e7       	ldi	r31, 0x70	; 112
    e1b0:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__prologue_saves__+0x20>
    e1b4:	dc 01       	movw	r26, r24
    char attrs[6];
    if(info->fname[0] == 0)
    e1b6:	fc 01       	movw	r30, r24
    e1b8:	86 89       	ldd	r24, Z+22	; 0x16
    e1ba:	81 11       	cpse	r24, r1
    e1bc:	03 c0       	rjmp	.+6      	; 0xe1c4 <fatfs_filinfo_list+0x1c>
    {
        printf("fatfs_filinfo_list: empty\n");
    e1be:	87 e6       	ldi	r24, 0x67	; 103
    e1c0:	98 e0       	ldi	r25, 0x08	; 8
    e1c2:	69 c0       	rjmp	.+210    	; 0xe296 <fatfs_filinfo_list+0xee>
        return;
    }
    attrs[0] = (info->fattrib & AM_DIR) ? 'D' : '-';
    e1c4:	fd 01       	movw	r30, r26
    e1c6:	80 85       	ldd	r24, Z+8	; 0x08
    e1c8:	84 fd       	sbrc	r24, 4
    e1ca:	02 c0       	rjmp	.+4      	; 0xe1d0 <fatfs_filinfo_list+0x28>
    e1cc:	9d e2       	ldi	r25, 0x2D	; 45
    e1ce:	01 c0       	rjmp	.+2      	; 0xe1d2 <fatfs_filinfo_list+0x2a>
    e1d0:	94 e4       	ldi	r25, 0x44	; 68
    e1d2:	9e 8b       	std	Y+22, r25	; 0x16
    attrs[1] = (info->fattrib & AM_RDO) ? 'R' : '-';
    e1d4:	80 fd       	sbrc	r24, 0
    e1d6:	02 c0       	rjmp	.+4      	; 0xe1dc <fatfs_filinfo_list+0x34>
    e1d8:	9d e2       	ldi	r25, 0x2D	; 45
    e1da:	01 c0       	rjmp	.+2      	; 0xe1de <fatfs_filinfo_list+0x36>
    e1dc:	92 e5       	ldi	r25, 0x52	; 82
    e1de:	9f 8b       	std	Y+23, r25	; 0x17
    attrs[2] = (info->fattrib & AM_HID) ? 'H' : '-';
    e1e0:	81 fd       	sbrc	r24, 1
    e1e2:	02 c0       	rjmp	.+4      	; 0xe1e8 <fatfs_filinfo_list+0x40>
    e1e4:	9d e2       	ldi	r25, 0x2D	; 45
    e1e6:	01 c0       	rjmp	.+2      	; 0xe1ea <fatfs_filinfo_list+0x42>
    e1e8:	98 e4       	ldi	r25, 0x48	; 72
    e1ea:	98 8f       	std	Y+24, r25	; 0x18
    attrs[3] = (info->fattrib & AM_SYS) ? 'S' : '-';
    e1ec:	82 fd       	sbrc	r24, 2
    e1ee:	02 c0       	rjmp	.+4      	; 0xe1f4 <fatfs_filinfo_list+0x4c>
    e1f0:	9d e2       	ldi	r25, 0x2D	; 45
    e1f2:	01 c0       	rjmp	.+2      	; 0xe1f6 <fatfs_filinfo_list+0x4e>
    e1f4:	93 e5       	ldi	r25, 0x53	; 83
    e1f6:	99 8f       	std	Y+25, r25	; 0x19
    attrs[4] = (info->fattrib & AM_ARC) ? 'A' : '-';
    e1f8:	85 fd       	sbrc	r24, 5
    e1fa:	02 c0       	rjmp	.+4      	; 0xe200 <fatfs_filinfo_list+0x58>
    e1fc:	8d e2       	ldi	r24, 0x2D	; 45
    e1fe:	01 c0       	rjmp	.+2      	; 0xe202 <fatfs_filinfo_list+0x5a>
    e200:	81 e4       	ldi	r24, 0x41	; 65
    e202:	8a 8f       	std	Y+26, r24	; 0x1a
    attrs[5] = 0;
    e204:	1b 8e       	std	Y+27, r1	; 0x1b
    printf("%s %u/%02u/%02u %02u:%02u %9lu %s",
    e206:	fd 01       	movw	r30, r26
    e208:	24 81       	ldd	r18, Z+4	; 0x04
    e20a:	35 81       	ldd	r19, Z+5	; 0x05
    e20c:	46 81       	ldd	r20, Z+6	; 0x06
    e20e:	57 81       	ldd	r21, Z+7	; 0x07
    e210:	cd 01       	movw	r24, r26
    e212:	46 96       	adiw	r24, 0x16	; 22
    e214:	ed b7       	in	r30, 0x3d	; 61
    e216:	fe b7       	in	r31, 0x3e	; 62
    e218:	95 8b       	std	Z+21, r25	; 0x15
    e21a:	84 8b       	std	Z+20, r24	; 0x14
    e21c:	8d 91       	ld	r24, X+
    e21e:	9d 91       	ld	r25, X+
    e220:	0d 90       	ld	r0, X+
    e222:	bc 91       	ld	r27, X
    e224:	a0 2d       	mov	r26, r0
    e226:	80 8b       	std	Z+16, r24	; 0x10
    e228:	91 8b       	std	Z+17, r25	; 0x11
    e22a:	a2 8b       	std	Z+18, r26	; 0x12
    e22c:	b3 8b       	std	Z+19, r27	; 0x13
    e22e:	ca 01       	movw	r24, r20
    e230:	45 e0       	ldi	r20, 0x05	; 5
    e232:	96 95       	lsr	r25
    e234:	87 95       	ror	r24
    e236:	4a 95       	dec	r20
    e238:	e1 f7       	brne	.-8      	; 0xe232 <fatfs_filinfo_list+0x8a>
    e23a:	8f 73       	andi	r24, 0x3F	; 63
    e23c:	99 27       	eor	r25, r25
    e23e:	97 87       	std	Z+15, r25	; 0x0f
    e240:	86 87       	std	Z+14, r24	; 0x0e
    e242:	85 2f       	mov	r24, r21
    e244:	86 95       	lsr	r24
    e246:	86 95       	lsr	r24
    e248:	86 95       	lsr	r24
    e24a:	84 87       	std	Z+12, r24	; 0x0c
    e24c:	15 86       	std	Z+13, r1	; 0x0d
    e24e:	c9 01       	movw	r24, r18
    e250:	8f 71       	andi	r24, 0x1F	; 31
    e252:	99 27       	eor	r25, r25
    e254:	93 87       	std	Z+11, r25	; 0x0b
    e256:	82 87       	std	Z+10, r24	; 0x0a
    e258:	c9 01       	movw	r24, r18
    e25a:	55 e0       	ldi	r21, 0x05	; 5
    e25c:	96 95       	lsr	r25
    e25e:	87 95       	ror	r24
    e260:	5a 95       	dec	r21
    e262:	e1 f7       	brne	.-8      	; 0xe25c <fatfs_filinfo_list+0xb4>
    e264:	8f 70       	andi	r24, 0x0F	; 15
    e266:	99 27       	eor	r25, r25
    e268:	91 87       	std	Z+9, r25	; 0x09
    e26a:	80 87       	std	Z+8, r24	; 0x08
    e26c:	23 2f       	mov	r18, r19
    e26e:	33 27       	eor	r19, r19
    e270:	26 95       	lsr	r18
    e272:	24 54       	subi	r18, 0x44	; 68
    e274:	38 4f       	sbci	r19, 0xF8	; 248
    e276:	37 83       	std	Z+7, r19	; 0x07
    e278:	26 83       	std	Z+6, r18	; 0x06
    e27a:	ce 01       	movw	r24, r28
    e27c:	46 96       	adiw	r24, 0x16	; 22
    e27e:	95 83       	std	Z+5, r25	; 0x05
    e280:	84 83       	std	Z+4, r24	; 0x04
    e282:	85 e4       	ldi	r24, 0x45	; 69
    e284:	98 e0       	ldi	r25, 0x08	; 8
    e286:	a0 e0       	ldi	r26, 0x00	; 0
    e288:	81 83       	std	Z+1, r24	; 0x01
    e28a:	92 83       	std	Z+2, r25	; 0x02
    e28c:	a3 83       	std	Z+3, r26	; 0x03
    e28e:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
        attrs,
        (info->fdate >> 9) + 1980, (info->fdate >> 5) & 15, info->fdate & 31,
        (info->ftime >> 11), (info->ftime >> 5) & 63,
        info->fsize, info->fname);
    printf("\n");
    e292:	83 e4       	ldi	r24, 0x43	; 67
    e294:	98 e0       	ldi	r25, 0x08	; 8
    e296:	a0 e0       	ldi	r26, 0x00	; 0
    e298:	ed b7       	in	r30, 0x3d	; 61
    e29a:	fe b7       	in	r31, 0x3e	; 62
    e29c:	81 83       	std	Z+1, r24	; 0x01
    e29e:	92 83       	std	Z+2, r25	; 0x02
    e2a0:	a3 83       	std	Z+3, r26	; 0x03
    e2a2:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
}
    e2a6:	6b 96       	adiw	r28, 0x1b	; 27
    e2a8:	e2 e0       	ldi	r30, 0x02	; 2
    e2aa:	0c 94 35 e3 	jmp	0x1c66a	; 0x1c66a <__epilogue_restores__+0x20>

0000e2ae <fatfs_help>:

/// @brief Display FatFs test diagnostics help menu.
/// @return  void
MEMSPACE
void fatfs_help( int full)
{
    e2ae:	cf 93       	push	r28
    e2b0:	df 93       	push	r29
    e2b2:	00 d0       	rcall	.+0      	; 0xe2b4 <fatfs_help+0x6>
    e2b4:	1f 92       	push	r1
    e2b6:	ec 01       	movw	r28, r24
    printf("fatfs help\n");
    e2b8:	8e ed       	ldi	r24, 0xDE	; 222
    e2ba:	9b e0       	ldi	r25, 0x0B	; 11
    e2bc:	a0 e0       	ldi	r26, 0x00	; 0
    e2be:	ed b7       	in	r30, 0x3d	; 61
    e2c0:	fe b7       	in	r31, 0x3e	; 62
    e2c2:	81 83       	std	Z+1, r24	; 0x01
    e2c4:	92 83       	std	Z+2, r25	; 0x02
    e2c6:	a3 83       	std	Z+3, r26	; 0x03
    e2c8:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>

    if(full)
    e2cc:	cd 2b       	or	r28, r29
    e2ce:	51 f0       	breq	.+20     	; 0xe2e4 <fatfs_help+0x36>
    {
        printf(
    e2d0:	81 e6       	ldi	r24, 0x61	; 97
    e2d2:	9b e0       	ldi	r25, 0x0B	; 11
    e2d4:	a0 e0       	ldi	r26, 0x00	; 0
    e2d6:	ed b7       	in	r30, 0x3d	; 61
    e2d8:	fe b7       	in	r31, 0x3e	; 62
    e2da:	81 83       	std	Z+1, r24	; 0x01
    e2dc:	92 83       	std	Z+2, r25	; 0x02
    e2de:	a3 83       	std	Z+3, r26	; 0x03
    e2e0:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    #endif
            "\n"
            );
    }

}
    e2e4:	cd b7       	in	r28, 0x3d	; 61
    e2e6:	de b7       	in	r29, 0x3e	; 62
    e2e8:	23 96       	adiw	r28, 0x03	; 3
    e2ea:	e2 e0       	ldi	r30, 0x02	; 2
    e2ec:	0c 94 35 e3 	jmp	0x1c66a	; 0x1c66a <__epilogue_restores__+0x20>

0000e2f0 <fatfs_ls>:
///
/// @see fatfs_filinfo_list().
/// @return  1 on success or 0 on error
MEMSPACE
int fatfs_ls(char *name)
{
    e2f0:	a5 e5       	ldi	r26, 0x55	; 85
    e2f2:	b3 e0       	ldi	r27, 0x03	; 3
    e2f4:	ee e7       	ldi	r30, 0x7E	; 126
    e2f6:	f1 e7       	ldi	r31, 0x71	; 113
    e2f8:	0c 94 11 e3 	jmp	0x1c622	; 0x1c622 <__prologue_saves__+0x10>
    FILINFO fno;
    DIR dirs;                                     /* Directory object */
    FATFS *fs;
    char buff[512];

	memset(buff,0,sizeof(buff)-1);
    e2fc:	8e 01       	movw	r16, r28
    e2fe:	04 5f       	subi	r16, 0xF4	; 244
    e300:	1f 4f       	sbci	r17, 0xFF	; 255
    e302:	2f ef       	ldi	r18, 0xFF	; 255
    e304:	31 e0       	ldi	r19, 0x01	; 1
    e306:	f8 01       	movw	r30, r16
    e308:	a9 01       	movw	r20, r18
    e30a:	11 92       	st	Z+, r1
    e30c:	41 50       	subi	r20, 0x01	; 1
    e30e:	50 40       	sbci	r21, 0x00	; 0
    e310:	e1 f7       	brne	.-8      	; 0xe30a <fatfs_ls+0x1a>

    if(!name || !*name)
    e312:	00 97       	sbiw	r24, 0x00	; 0
    e314:	21 f0       	breq	.+8      	; 0xe31e <fatfs_ls+0x2e>
    e316:	fc 01       	movw	r30, r24
    e318:	20 81       	ld	r18, Z
    e31a:	21 11       	cpse	r18, r1
    e31c:	03 c0       	rjmp	.+6      	; 0xe324 <fatfs_ls+0x34>
    {
        strcpy(buff,".");
    e31e:	6d ef       	ldi	r22, 0xFD	; 253
    e320:	72 e1       	ldi	r23, 0x12	; 18
    e322:	01 c0       	rjmp	.+2      	; 0xe326 <fatfs_ls+0x36>
    }
    else
    {
        strcpy(buff,name);
    e324:	bc 01       	movw	r22, r24
    e326:	c8 01       	movw	r24, r16
    e328:	0e 94 93 2f 	call	0x5f26	; 0x5f26 <strcpy>
    }
    printf("Listing:[%s]\n",buff);
    e32c:	ed b7       	in	r30, 0x3d	; 61
    e32e:	fe b7       	in	r31, 0x3e	; 62
    e330:	15 83       	std	Z+5, r17	; 0x05
    e332:	04 83       	std	Z+4, r16	; 0x04
    e334:	81 ee       	ldi	r24, 0xE1	; 225
    e336:	9a e0       	ldi	r25, 0x0A	; 10
    e338:	a0 e0       	ldi	r26, 0x00	; 0
    e33a:	81 83       	std	Z+1, r24	; 0x01
    e33c:	92 83       	std	Z+2, r25	; 0x02
    e33e:	a3 83       	std	Z+3, r26	; 0x03
    e340:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>

    res = f_opendir(&dirs, buff);
    e344:	b8 01       	movw	r22, r16
    e346:	ce 01       	movw	r24, r28
    e348:	8e 5d       	subi	r24, 0xDE	; 222
    e34a:	9c 4f       	sbci	r25, 0xFC	; 252
    e34c:	0e 94 79 61 	call	0xc2f2	; 0xc2f2 <f_opendir>
    if (res != FR_OK) 
    e350:	89 2b       	or	r24, r25
    e352:	09 f0       	breq	.+2      	; 0xe356 <fatfs_ls+0x66>
    e354:	a3 c0       	rjmp	.+326    	; 0xe49c <fatfs_ls+0x1ac>
	{ 
		return(0); 
	}
    p1 = s1 = s2 = 0;
    e356:	c0 5b       	subi	r28, 0xB0	; 176
    e358:	dc 4f       	sbci	r29, 0xFC	; 252
    e35a:	18 82       	st	Y, r1
    e35c:	19 82       	std	Y+1, r1	; 0x01
    e35e:	1a 82       	std	Y+2, r1	; 0x02
    e360:	1b 82       	std	Y+3, r1	; 0x03
    e362:	c0 55       	subi	r28, 0x50	; 80
    e364:	d3 40       	sbci	r29, 0x03	; 3
    e366:	a1 2c       	mov	r10, r1
    e368:	b1 2c       	mov	r11, r1
    e36a:	c1 2c       	mov	r12, r1
    e36c:	d1 2c       	mov	r13, r1
    while(1)
    {
        res = f_readdir(&dirs, &fno);
    e36e:	be 01       	movw	r22, r28
    e370:	64 5f       	subi	r22, 0xF4	; 244
    e372:	7d 4f       	sbci	r23, 0xFD	; 253
    e374:	ce 01       	movw	r24, r28
    e376:	8e 5d       	subi	r24, 0xDE	; 222
    e378:	9c 4f       	sbci	r25, 0xFC	; 252
    e37a:	0e 94 ff 61 	call	0xc3fe	; 0xc3fe <f_readdir>
    e37e:	7c 01       	movw	r14, r24
        if (res != FR_OK) 
    e380:	89 2b       	or	r24, r25
    e382:	b1 f5       	brne	.+108    	; 0xe3f0 <fatfs_ls+0x100>
			break;
		if(!fno.fname[0]) 
    e384:	ce 5d       	subi	r28, 0xDE	; 222
    e386:	dd 4f       	sbci	r29, 0xFD	; 253
    e388:	88 81       	ld	r24, Y
    e38a:	c2 52       	subi	r28, 0x22	; 34
    e38c:	d2 40       	sbci	r29, 0x02	; 2
    e38e:	88 23       	and	r24, r24
    e390:	79 f1       	breq	.+94     	; 0xe3f0 <fatfs_ls+0x100>
			break;
        if (fno.fattrib & AM_DIR)
    e392:	cc 5e       	subi	r28, 0xEC	; 236
    e394:	dd 4f       	sbci	r29, 0xFD	; 253
    e396:	88 81       	ld	r24, Y
    e398:	c4 51       	subi	r28, 0x14	; 20
    e39a:	d2 40       	sbci	r29, 0x02	; 2
    e39c:	84 ff       	sbrs	r24, 4
    e39e:	04 c0       	rjmp	.+8      	; 0xe3a8 <fatfs_ls+0xb8>
        {
            s2++;
    e3a0:	ff ef       	ldi	r31, 0xFF	; 255
    e3a2:	af 1a       	sub	r10, r31
    e3a4:	bf 0a       	sbc	r11, r31
    e3a6:	1f c0       	rjmp	.+62     	; 0xe3e6 <fatfs_ls+0xf6>
        }
        else
        {
            s1++; p1 += fno.fsize;
    e3a8:	4f ef       	ldi	r20, 0xFF	; 255
    e3aa:	c4 1a       	sub	r12, r20
    e3ac:	d4 0a       	sbc	r13, r20
    e3ae:	c4 5f       	subi	r28, 0xF4	; 244
    e3b0:	dd 4f       	sbci	r29, 0xFD	; 253
    e3b2:	48 81       	ld	r20, Y
    e3b4:	59 81       	ldd	r21, Y+1	; 0x01
    e3b6:	6a 81       	ldd	r22, Y+2	; 0x02
    e3b8:	7b 81       	ldd	r23, Y+3	; 0x03
    e3ba:	cc 50       	subi	r28, 0x0C	; 12
    e3bc:	d2 40       	sbci	r29, 0x02	; 2
    e3be:	c0 5b       	subi	r28, 0xB0	; 176
    e3c0:	dc 4f       	sbci	r29, 0xFC	; 252
    e3c2:	88 81       	ld	r24, Y
    e3c4:	99 81       	ldd	r25, Y+1	; 0x01
    e3c6:	aa 81       	ldd	r26, Y+2	; 0x02
    e3c8:	bb 81       	ldd	r27, Y+3	; 0x03
    e3ca:	c0 55       	subi	r28, 0x50	; 80
    e3cc:	d3 40       	sbci	r29, 0x03	; 3
    e3ce:	84 0f       	add	r24, r20
    e3d0:	95 1f       	adc	r25, r21
    e3d2:	a6 1f       	adc	r26, r22
    e3d4:	b7 1f       	adc	r27, r23
    e3d6:	c0 5b       	subi	r28, 0xB0	; 176
    e3d8:	dc 4f       	sbci	r29, 0xFC	; 252
    e3da:	88 83       	st	Y, r24
    e3dc:	99 83       	std	Y+1, r25	; 0x01
    e3de:	aa 83       	std	Y+2, r26	; 0x02
    e3e0:	bb 83       	std	Y+3, r27	; 0x03
    e3e2:	c0 55       	subi	r28, 0x50	; 80
    e3e4:	d3 40       	sbci	r29, 0x03	; 3
        }
        fatfs_filinfo_list(&fno);
    e3e6:	ce 01       	movw	r24, r28
    e3e8:	84 5f       	subi	r24, 0xF4	; 244
    e3ea:	9d 4f       	sbci	r25, 0xFD	; 253
    e3ec:	dd de       	rcall	.-582    	; 0xe1a8 <fatfs_filinfo_list>
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    e3ee:	bf cf       	rjmp	.-130    	; 0xe36e <fatfs_ls+0x7e>
	f_closedir(&dirs);
    e3f0:	ce 01       	movw	r24, r28
    e3f2:	8e 5d       	subi	r24, 0xDE	; 222
    e3f4:	9c 4f       	sbci	r25, 0xFC	; 252
    e3f6:	0e 94 ea 61 	call	0xc3d4	; 0xc3d4 <f_closedir>
    printf("%4u File(s),%10lu bytes total\n%4u Dir(s)", s1, p1, s2);
    e3fa:	ed b7       	in	r30, 0x3d	; 61
    e3fc:	fe b7       	in	r31, 0x3e	; 62
    e3fe:	b3 86       	std	Z+11, r11	; 0x0b
    e400:	a2 86       	std	Z+10, r10	; 0x0a
    e402:	c0 5b       	subi	r28, 0xB0	; 176
    e404:	dc 4f       	sbci	r29, 0xFC	; 252
    e406:	88 81       	ld	r24, Y
    e408:	99 81       	ldd	r25, Y+1	; 0x01
    e40a:	aa 81       	ldd	r26, Y+2	; 0x02
    e40c:	bb 81       	ldd	r27, Y+3	; 0x03
    e40e:	c0 55       	subi	r28, 0x50	; 80
    e410:	d3 40       	sbci	r29, 0x03	; 3
    e412:	86 83       	std	Z+6, r24	; 0x06
    e414:	97 83       	std	Z+7, r25	; 0x07
    e416:	a0 87       	std	Z+8, r26	; 0x08
    e418:	b1 87       	std	Z+9, r27	; 0x09
    e41a:	d5 82       	std	Z+5, r13	; 0x05
    e41c:	c4 82       	std	Z+4, r12	; 0x04
    e41e:	88 eb       	ldi	r24, 0xB8	; 184
    e420:	9a e0       	ldi	r25, 0x0A	; 10
    e422:	a0 e0       	ldi	r26, 0x00	; 0
    e424:	81 83       	std	Z+1, r24	; 0x01
    e426:	92 83       	std	Z+2, r25	; 0x02
    e428:	a3 83       	std	Z+3, r26	; 0x03
    e42a:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    if (f_getfree(buff, (DWORD*)&p1, &fs) == FR_OK)
    e42e:	ae 01       	movw	r20, r28
    e430:	4c 5a       	subi	r20, 0xAC	; 172
    e432:	5c 4f       	sbci	r21, 0xFC	; 252
    e434:	be 01       	movw	r22, r28
    e436:	60 5b       	subi	r22, 0xB0	; 176
    e438:	7c 4f       	sbci	r23, 0xFC	; 252
    e43a:	c8 01       	movw	r24, r16
    e43c:	0e 94 81 62 	call	0xc502	; 0xc502 <f_getfree>
    e440:	89 2b       	or	r24, r25
    e442:	31 f5       	brne	.+76     	; 0xe490 <fatfs_ls+0x1a0>
        printf(", %10luK bytes free\n", p1 * fs->csize / 2);
    e444:	cc 5a       	subi	r28, 0xAC	; 172
    e446:	dc 4f       	sbci	r29, 0xFC	; 252
    e448:	e8 81       	ld	r30, Y
    e44a:	f9 81       	ldd	r31, Y+1	; 0x01
    e44c:	c4 55       	subi	r28, 0x54	; 84
    e44e:	d3 40       	sbci	r29, 0x03	; 3
    e450:	a1 85       	ldd	r26, Z+9	; 0x09
    e452:	b2 85       	ldd	r27, Z+10	; 0x0a
    e454:	c0 5b       	subi	r28, 0xB0	; 176
    e456:	dc 4f       	sbci	r29, 0xFC	; 252
    e458:	28 81       	ld	r18, Y
    e45a:	39 81       	ldd	r19, Y+1	; 0x01
    e45c:	4a 81       	ldd	r20, Y+2	; 0x02
    e45e:	5b 81       	ldd	r21, Y+3	; 0x03
    e460:	c0 55       	subi	r28, 0x50	; 80
    e462:	d3 40       	sbci	r29, 0x03	; 3
    e464:	0e 94 e9 e2 	call	0x1c5d2	; 0x1c5d2 <__muluhisi3>
    e468:	22 e0       	ldi	r18, 0x02	; 2
    e46a:	30 e0       	ldi	r19, 0x00	; 0
    e46c:	40 e0       	ldi	r20, 0x00	; 0
    e46e:	50 e0       	ldi	r21, 0x00	; 0
    e470:	0e 94 be e2 	call	0x1c57c	; 0x1c57c <__divmodsi4>
    e474:	ed b7       	in	r30, 0x3d	; 61
    e476:	fe b7       	in	r31, 0x3e	; 62
    e478:	24 83       	std	Z+4, r18	; 0x04
    e47a:	35 83       	std	Z+5, r19	; 0x05
    e47c:	46 83       	std	Z+6, r20	; 0x06
    e47e:	57 83       	std	Z+7, r21	; 0x07
    e480:	83 ea       	ldi	r24, 0xA3	; 163
    e482:	9a e0       	ldi	r25, 0x0A	; 10
    e484:	a0 e0       	ldi	r26, 0x00	; 0
    e486:	81 83       	std	Z+1, r24	; 0x01
    e488:	92 83       	std	Z+2, r25	; 0x02
    e48a:	a3 83       	std	Z+3, r26	; 0x03
    e48c:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
	if(res)
    e490:	e1 14       	cp	r14, r1
    e492:	f1 04       	cpc	r15, r1
    e494:	31 f4       	brne	.+12     	; 0xe4a2 <fatfs_ls+0x1b2>
		return(-1);
	return(1);
    e496:	81 e0       	ldi	r24, 0x01	; 1
    e498:	90 e0       	ldi	r25, 0x00	; 0
    e49a:	05 c0       	rjmp	.+10     	; 0xe4a6 <fatfs_ls+0x1b6>
    printf("Listing:[%s]\n",buff);

    res = f_opendir(&dirs, buff);
    if (res != FR_OK) 
	{ 
		return(0); 
    e49c:	80 e0       	ldi	r24, 0x00	; 0
    e49e:	90 e0       	ldi	r25, 0x00	; 0
    e4a0:	02 c0       	rjmp	.+4      	; 0xe4a6 <fatfs_ls+0x1b6>
	f_closedir(&dirs);
    printf("%4u File(s),%10lu bytes total\n%4u Dir(s)", s1, p1, s2);
    if (f_getfree(buff, (DWORD*)&p1, &fs) == FR_OK)
        printf(", %10luK bytes free\n", p1 * fs->csize / 2);
	if(res)
		return(-1);
    e4a2:	8f ef       	ldi	r24, 0xFF	; 255
    e4a4:	9f ef       	ldi	r25, 0xFF	; 255
	return(1);
}
    e4a6:	cb 5a       	subi	r28, 0xAB	; 171
    e4a8:	dc 4f       	sbci	r29, 0xFC	; 252
    e4aa:	ea e0       	ldi	r30, 0x0A	; 10
    e4ac:	0c 94 2d e3 	jmp	0x1c65a	; 0x1c65a <__epilogue_restores__+0x10>

0000e4b0 <mmc_test>:
/// - Assumes the device is formatted
///
/// @return void
MEMSPACE
void mmc_test(void)
{
    e4b0:	00 d0       	rcall	.+0      	; 0xe4b2 <mmc_test+0x2>
    e4b2:	1f 92       	push	r1
    printf("==============================\n");
    e4b4:	81 e4       	ldi	r24, 0x41	; 65
    e4b6:	9b e0       	ldi	r25, 0x0B	; 11
    e4b8:	a0 e0       	ldi	r26, 0x00	; 0
    e4ba:	ed b7       	in	r30, 0x3d	; 61
    e4bc:	fe b7       	in	r31, 0x3e	; 62
    e4be:	81 83       	std	Z+1, r24	; 0x01
    e4c0:	92 83       	std	Z+2, r25	; 0x02
    e4c2:	a3 83       	std	Z+3, r26	; 0x03
    e4c4:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    printf("START MMC TEST\n");
    e4c8:	81 e3       	ldi	r24, 0x31	; 49
    e4ca:	9b e0       	ldi	r25, 0x0B	; 11
    e4cc:	a0 e0       	ldi	r26, 0x00	; 0
    e4ce:	ed b7       	in	r30, 0x3d	; 61
    e4d0:	fe b7       	in	r31, 0x3e	; 62
    e4d2:	81 83       	std	Z+1, r24	; 0x01
    e4d4:	92 83       	std	Z+2, r25	; 0x02
    e4d6:	a3 83       	std	Z+3, r26	; 0x03
    e4d8:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    fatfs_status("/");
    e4dc:	86 ea       	ldi	r24, 0xA6	; 166
    e4de:	98 e0       	ldi	r25, 0x08	; 8
    e4e0:	d7 dc       	rcall	.-1618   	; 0xde90 <fatfs_status>
    printf("MMC Directory List\n");
    e4e2:	8d e1       	ldi	r24, 0x1D	; 29
    e4e4:	9b e0       	ldi	r25, 0x0B	; 11
    e4e6:	a0 e0       	ldi	r26, 0x00	; 0
    e4e8:	ed b7       	in	r30, 0x3d	; 61
    e4ea:	fe b7       	in	r31, 0x3e	; 62
    e4ec:	81 83       	std	Z+1, r24	; 0x01
    e4ee:	92 83       	std	Z+2, r25	; 0x02
    e4f0:	a3 83       	std	Z+3, r26	; 0x03
    e4f2:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    fatfs_ls("/");
    e4f6:	86 ea       	ldi	r24, 0xA6	; 166
    e4f8:	98 e0       	ldi	r25, 0x08	; 8
    e4fa:	fa de       	rcall	.-524    	; 0xe2f0 <fatfs_ls>
    fatfs_cat("test3.txt");
    fatfs_ls("");
#endif
#endif

    printf("END MMC TEST\n");
    e4fc:	8f e0       	ldi	r24, 0x0F	; 15
    e4fe:	9b e0       	ldi	r25, 0x0B	; 11
    e500:	a0 e0       	ldi	r26, 0x00	; 0
    e502:	ed b7       	in	r30, 0x3d	; 61
    e504:	fe b7       	in	r31, 0x3e	; 62
    e506:	81 83       	std	Z+1, r24	; 0x01
    e508:	92 83       	std	Z+2, r25	; 0x02
    e50a:	a3 83       	std	Z+3, r26	; 0x03
    e50c:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    printf("==============================\n");
    e510:	8f ee       	ldi	r24, 0xEF	; 239
    e512:	9a e0       	ldi	r25, 0x0A	; 10
    e514:	a0 e0       	ldi	r26, 0x00	; 0
    e516:	ed b7       	in	r30, 0x3d	; 61
    e518:	fe b7       	in	r31, 0x3e	; 62
    e51a:	81 83       	std	Z+1, r24	; 0x01
    e51c:	92 83       	std	Z+2, r25	; 0x02
    e51e:	a3 83       	std	Z+3, r26	; 0x03
    e520:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
}
    e524:	0f 90       	pop	r0
    e526:	0f 90       	pop	r0
    e528:	0f 90       	pop	r0
    e52a:	08 95       	ret

0000e52c <fatfs_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int fatfs_tests(int argc,char *argv[])
{
    e52c:	ef 92       	push	r14
    e52e:	ff 92       	push	r15
    e530:	0f 93       	push	r16
    e532:	1f 93       	push	r17
    e534:	cf 93       	push	r28
    e536:	df 93       	push	r29
    e538:	7c 01       	movw	r14, r24
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
    e53a:	fb 01       	movw	r30, r22
    e53c:	80 81       	ld	r24, Z
    e53e:	91 81       	ldd	r25, Z+1	; 0x01

    if(!ptr)
    e540:	00 97       	sbiw	r24, 0x00	; 0
    e542:	19 f4       	brne	.+6      	; 0xe54a <fatfs_tests+0x1e>
        return(0);
    e544:	80 e0       	ldi	r24, 0x00	; 0
    e546:	90 e0       	ldi	r25, 0x00	; 0
    e548:	6a c0       	rjmp	.+212    	; 0xe61e <fatfs_tests+0xf2>
    e54a:	eb 01       	movw	r28, r22

// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCH(ptr,"fatfs") )
    e54c:	62 ed       	ldi	r22, 0xD2	; 210
    e54e:	78 e0       	ldi	r23, 0x08	; 8
    e550:	0e 94 8b 30 	call	0x6116	; 0x6116 <MATCH>
    e554:	89 2b       	or	r24, r25
    e556:	b1 f3       	breq	.-20     	; 0xe544 <fatfs_tests+0x18>
    {
        ptr = argv[ind++];
    e558:	0a 81       	ldd	r16, Y+2	; 0x02
    e55a:	1b 81       	ldd	r17, Y+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
    e55c:	01 15       	cp	r16, r1
    e55e:	11 05       	cpc	r17, r1
    e560:	21 f4       	brne	.+8      	; 0xe56a <fatfs_tests+0x3e>
        {
            fatfs_help(1);
    e562:	81 e0       	ldi	r24, 0x01	; 1
    e564:	90 e0       	ldi	r25, 0x00	; 0
    e566:	a3 de       	rcall	.-698    	; 0xe2ae <fatfs_help>
    e568:	3a c0       	rjmp	.+116    	; 0xe5de <fatfs_tests+0xb2>
// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCH(ptr,"fatfs") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
    e56a:	69 e7       	ldi	r22, 0x79	; 121
    e56c:	76 e1       	ldi	r23, 0x16	; 22
    e56e:	c8 01       	movw	r24, r16
    e570:	0e 94 8b 30 	call	0x6116	; 0x6116 <MATCH>
    e574:	89 2b       	or	r24, r25
    e576:	a9 f7       	brne	.-22     	; 0xe562 <fatfs_tests+0x36>
    {
        return(0);
    }
#endif

    if (MATCHI(ptr,"ls") || MATCHI(ptr,"dir") )
    e578:	68 ed       	ldi	r22, 0xD8	; 216
    e57a:	78 e0       	ldi	r23, 0x08	; 8
    e57c:	c8 01       	movw	r24, r16
    e57e:	0e 94 9f 30 	call	0x613e	; 0x613e <MATCHI>
    e582:	89 2b       	or	r24, r25
    e584:	21 f0       	breq	.+8      	; 0xe58e <fatfs_tests+0x62>
    e586:	24 96       	adiw	r28, 0x04	; 4
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int fatfs_tests(int argc,char *argv[])
{
    e588:	02 e0       	ldi	r16, 0x02	; 2
    e58a:	10 e0       	ldi	r17, 0x00	; 0
    e58c:	0f c0       	rjmp	.+30     	; 0xe5ac <fatfs_tests+0x80>
    {
        return(0);
    }
#endif

    if (MATCHI(ptr,"ls") || MATCHI(ptr,"dir") )
    e58e:	68 ed       	ldi	r22, 0xD8	; 216
    e590:	7b e0       	ldi	r23, 0x0B	; 11
    e592:	c8 01       	movw	r24, r16
    e594:	0e 94 9f 30 	call	0x613e	; 0x613e <MATCHI>
    e598:	89 2b       	or	r24, r25
    e59a:	a9 f7       	brne	.-22     	; 0xe586 <fatfs_tests+0x5a>
    e59c:	15 c0       	rjmp	.+42     	; 0xe5c8 <fatfs_tests+0x9c>
        int args = 0;
//printf("argc:%d\n", argc);
        for(i=ind;i<argc;++i)
        {
//printf("%d:%s\n", i, argv[i]);
            if(fatfs_ls(argv[i]) == 0)
    e59e:	89 91       	ld	r24, Y+
    e5a0:	99 91       	ld	r25, Y+
    e5a2:	a6 de       	rcall	.-692    	; 0xe2f0 <fatfs_ls>
    e5a4:	89 2b       	or	r24, r25
    e5a6:	69 f0       	breq	.+26     	; 0xe5c2 <fatfs_tests+0x96>
    if (MATCHI(ptr,"ls") || MATCHI(ptr,"dir") )
    {
        int i;
        int args = 0;
//printf("argc:%d\n", argc);
        for(i=ind;i<argc;++i)
    e5a8:	0f 5f       	subi	r16, 0xFF	; 255
    e5aa:	1f 4f       	sbci	r17, 0xFF	; 255
    e5ac:	0e 15       	cp	r16, r14
    e5ae:	1f 05       	cpc	r17, r15
    e5b0:	b4 f3       	brlt	.-20     	; 0xe59e <fatfs_tests+0x72>
			{
				return(-1);
			}
            ++args;
        }
        if(!args)
    e5b2:	02 30       	cpi	r16, 0x02	; 2
    e5b4:	11 05       	cpc	r17, r1
    e5b6:	99 f4       	brne	.+38     	; 0xe5de <fatfs_tests+0xb2>
        {
            if(fatfs_ls("") == 0)
    e5b8:	8d e2       	ldi	r24, 0x2D	; 45
    e5ba:	9c e0       	ldi	r25, 0x0C	; 12
    e5bc:	99 de       	rcall	.-718    	; 0xe2f0 <fatfs_ls>
        return(1);
    }

    else if (MATCHARGS(ptr,"status", (ind + 1), argc))
    {
        if(fatfs_status(argv[ind]) == 0)
    e5be:	89 2b       	or	r24, r25
    e5c0:	71 f4       	brne	.+28     	; 0xe5de <fatfs_tests+0xb2>
        for(i=ind;i<argc;++i)
        {
//printf("%d:%s\n", i, argv[i]);
            if(fatfs_ls(argv[i]) == 0)
			{
				return(-1);
    e5c2:	8f ef       	ldi	r24, 0xFF	; 255
    e5c4:	9f ef       	ldi	r25, 0xFF	; 255
    e5c6:	2b c0       	rjmp	.+86     	; 0xe61e <fatfs_tests+0xf2>
			}
        }
        return(1);
    }

    else if (MATCHARGS(ptr,"mmc_test",(ind+0),argc ))
    e5c8:	97 01       	movw	r18, r14
    e5ca:	42 e0       	ldi	r20, 0x02	; 2
    e5cc:	50 e0       	ldi	r21, 0x00	; 0
    e5ce:	6b ed       	ldi	r22, 0xDB	; 219
    e5d0:	78 e0       	ldi	r23, 0x08	; 8
    e5d2:	c8 01       	movw	r24, r16
    e5d4:	0e 94 b3 30 	call	0x6166	; 0x6166 <MATCHARGS>
    e5d8:	89 2b       	or	r24, r25
    {
        mmc_test();
    e5da:	21 f0       	breq	.+8      	; 0xe5e4 <fatfs_tests+0xb8>
    e5dc:	69 df       	rcall	.-302    	; 0xe4b0 <mmc_test>
        return(1);
    e5de:	81 e0       	ldi	r24, 0x01	; 1
    e5e0:	90 e0       	ldi	r25, 0x00	; 0
    e5e2:	1d c0       	rjmp	.+58     	; 0xe61e <fatfs_tests+0xf2>
    }

    else if (MATCHARGS(ptr,"mmc_init",(ind+0),argc))
    e5e4:	97 01       	movw	r18, r14
    e5e6:	42 e0       	ldi	r20, 0x02	; 2
    e5e8:	50 e0       	ldi	r21, 0x00	; 0
    e5ea:	64 ee       	ldi	r22, 0xE4	; 228
    e5ec:	78 e0       	ldi	r23, 0x08	; 8
    e5ee:	c8 01       	movw	r24, r16
    e5f0:	0e 94 b3 30 	call	0x6166	; 0x6166 <MATCHARGS>
    e5f4:	89 2b       	or	r24, r25
    {
        mmc_init(1);
    e5f6:	21 f0       	breq	.+8      	; 0xe600 <fatfs_tests+0xd4>
    e5f8:	81 e0       	ldi	r24, 0x01	; 1
    e5fa:	90 e0       	ldi	r25, 0x00	; 0
    e5fc:	72 da       	rcall	.-2844   	; 0xdae2 <mmc_init>
    e5fe:	ef cf       	rjmp	.-34     	; 0xe5de <fatfs_tests+0xb2>
        return(1);
    }

    else if (MATCHARGS(ptr,"status", (ind + 1), argc))
    e600:	97 01       	movw	r18, r14
    e602:	43 e0       	ldi	r20, 0x03	; 3
    e604:	50 e0       	ldi	r21, 0x00	; 0
    e606:	6d ee       	ldi	r22, 0xED	; 237
    e608:	78 e0       	ldi	r23, 0x08	; 8
    e60a:	c8 01       	movw	r24, r16
    e60c:	0e 94 b3 30 	call	0x6166	; 0x6166 <MATCHARGS>
    e610:	89 2b       	or	r24, r25
    e612:	09 f4       	brne	.+2      	; 0xe616 <fatfs_tests+0xea>
    {
        if(fatfs_status(argv[ind]) == 0)
    e614:	97 cf       	rjmp	.-210    	; 0xe544 <fatfs_tests+0x18>
    e616:	8c 81       	ldd	r24, Y+4	; 0x04
    e618:	9d 81       	ldd	r25, Y+5	; 0x05
    e61a:	3a dc       	rcall	.-1932   	; 0xde90 <fatfs_status>
    e61c:	d0 cf       	rjmp	.-96     	; 0xe5be <fatfs_tests+0x92>
        return(1);
    }
#endif

    return(0);
}
    e61e:	cd b7       	in	r28, 0x3d	; 61
    e620:	de b7       	in	r29, 0x3e	; 62
    e622:	e6 e0       	ldi	r30, 0x06	; 6
    e624:	0c 94 31 e3 	jmp	0x1c662	; 0x1c662 <__epilogue_restores__+0x18>

0000e628 <fatfs_getc>:
    {
        errno = fatfs_to_errno(rc);
        return(-1);
    }
    return(0);
}
    e628:	8f 92       	push	r8
    e62a:	9f 92       	push	r9
    e62c:	af 92       	push	r10
    e62e:	bf 92       	push	r11
    e630:	ef 92       	push	r14
    e632:	ff 92       	push	r15
    e634:	0f 93       	push	r16
    e636:	1f 93       	push	r17
    e638:	cf 93       	push	r28
    e63a:	df 93       	push	r29
    e63c:	00 d0       	rcall	.+0      	; 0xe63e <fatfs_getc+0x16>
    e63e:	1f 92       	push	r1
    e640:	cd b7       	in	r28, 0x3d	; 61
    e642:	de b7       	in	r29, 0x3e	; 62
    e644:	10 92 ca 1c 	sts	0x1CCA, r1	; 0x801cca <errno+0x1>
    e648:	10 92 c9 1c 	sts	0x1CC9, r1	; 0x801cc9 <errno>
    e64c:	00 97       	sbiw	r24, 0x00	; 0
    e64e:	39 f4       	brne	.+14     	; 0xe65e <fatfs_getc+0x36>
    e650:	89 e0       	ldi	r24, 0x09	; 9
    e652:	90 e0       	ldi	r25, 0x00	; 0
    e654:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    e658:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    e65c:	2f c0       	rjmp	.+94     	; 0xe6bc <fatfs_getc+0x94>
    e65e:	fc 01       	movw	r30, r24
    e660:	e4 84       	ldd	r14, Z+12	; 0x0c
    e662:	f5 84       	ldd	r15, Z+13	; 0x0d
    e664:	e1 14       	cp	r14, r1
    e666:	f1 04       	cpc	r15, r1
    e668:	99 f3       	breq	.-26     	; 0xe650 <fatfs_getc+0x28>
    e66a:	8c 01       	movw	r16, r24
    e66c:	9e 01       	movw	r18, r28
    e66e:	2f 5f       	subi	r18, 0xFF	; 255
    e670:	3f 4f       	sbci	r19, 0xFF	; 255
    e672:	41 e0       	ldi	r20, 0x01	; 1
    e674:	50 e0       	ldi	r21, 0x00	; 0
    e676:	be 01       	movw	r22, r28
    e678:	6d 5f       	subi	r22, 0xFD	; 253
    e67a:	7f 4f       	sbci	r23, 0xFF	; 255
    e67c:	c7 01       	movw	r24, r14
    e67e:	0e 94 b2 59 	call	0xb364	; 0xb364 <f_read>
    e682:	00 97       	sbiw	r24, 0x00	; 0
    e684:	31 f4       	brne	.+12     	; 0xe692 <fatfs_getc+0x6a>
    e686:	29 81       	ldd	r18, Y+1	; 0x01
    e688:	3a 81       	ldd	r19, Y+2	; 0x02
    e68a:	21 30       	cpi	r18, 0x01	; 1
    e68c:	31 05       	cpc	r19, r1
    e68e:	c9 f0       	breq	.+50     	; 0xe6c2 <fatfs_getc+0x9a>
    e690:	03 c0       	rjmp	.+6      	; 0xe698 <fatfs_getc+0x70>
    e692:	84 31       	cpi	r24, 0x14	; 20
    e694:	91 05       	cpc	r25, r1
    e696:	40 f4       	brcc	.+16     	; 0xe6a8 <fatfs_getc+0x80>
    e698:	fc 01       	movw	r30, r24
    e69a:	ea 55       	subi	r30, 0x5A	; 90
    e69c:	f4 4f       	sbci	r31, 0xF4	; 244
    e69e:	80 81       	ld	r24, Z
    e6a0:	08 2e       	mov	r0, r24
    e6a2:	00 0c       	add	r0, r0
    e6a4:	99 0b       	sbc	r25, r25
    e6a6:	02 c0       	rjmp	.+4      	; 0xe6ac <fatfs_getc+0x84>
    e6a8:	83 e2       	ldi	r24, 0x23	; 35
    e6aa:	90 e0       	ldi	r25, 0x00	; 0
    e6ac:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    e6b0:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    e6b4:	f8 01       	movw	r30, r16
    e6b6:	83 81       	ldd	r24, Z+3	; 0x03
    e6b8:	80 62       	ori	r24, 0x20	; 32
    e6ba:	83 83       	std	Z+3, r24	; 0x03
    e6bc:	8f ef       	ldi	r24, 0xFF	; 255
    e6be:	9f ef       	ldi	r25, 0xFF	; 255
    e6c0:	28 c0       	rjmp	.+80     	; 0xe712 <fatfs_getc+0xea>
    e6c2:	8b 81       	ldd	r24, Y+3	; 0x03
    e6c4:	8d 30       	cpi	r24, 0x0D	; 13
    e6c6:	01 f5       	brne	.+64     	; 0xe708 <fatfs_getc+0xe0>
    e6c8:	f7 01       	movw	r30, r14
    e6ca:	80 88       	ldd	r8, Z+16	; 0x10
    e6cc:	91 88       	ldd	r9, Z+17	; 0x11
    e6ce:	a2 88       	ldd	r10, Z+18	; 0x12
    e6d0:	b3 88       	ldd	r11, Z+19	; 0x13
    e6d2:	9e 01       	movw	r18, r28
    e6d4:	2f 5f       	subi	r18, 0xFF	; 255
    e6d6:	3f 4f       	sbci	r19, 0xFF	; 255
    e6d8:	41 e0       	ldi	r20, 0x01	; 1
    e6da:	50 e0       	ldi	r21, 0x00	; 0
    e6dc:	be 01       	movw	r22, r28
    e6de:	6d 5f       	subi	r22, 0xFD	; 253
    e6e0:	7f 4f       	sbci	r23, 0xFF	; 255
    e6e2:	c7 01       	movw	r24, r14
    e6e4:	0e 94 b2 59 	call	0xb364	; 0xb364 <f_read>
    e6e8:	89 2b       	or	r24, r25
    e6ea:	89 f4       	brne	.+34     	; 0xe70e <fatfs_getc+0xe6>
    e6ec:	89 81       	ldd	r24, Y+1	; 0x01
    e6ee:	9a 81       	ldd	r25, Y+2	; 0x02
    e6f0:	01 97       	sbiw	r24, 0x01	; 1
    e6f2:	69 f4       	brne	.+26     	; 0xe70e <fatfs_getc+0xe6>
    e6f4:	8b 81       	ldd	r24, Y+3	; 0x03
    e6f6:	8a 30       	cpi	r24, 0x0A	; 10
    e6f8:	31 f0       	breq	.+12     	; 0xe706 <fatfs_getc+0xde>
    e6fa:	b5 01       	movw	r22, r10
    e6fc:	a4 01       	movw	r20, r8
    e6fe:	c7 01       	movw	r24, r14
    e700:	0e 94 be 5e 	call	0xbd7c	; 0xbd7c <f_lseek>
    e704:	04 c0       	rjmp	.+8      	; 0xe70e <fatfs_getc+0xe6>
    e706:	8b 83       	std	Y+3, r24	; 0x03
    e708:	8b 81       	ldd	r24, Y+3	; 0x03
    e70a:	90 e0       	ldi	r25, 0x00	; 0
    e70c:	02 c0       	rjmp	.+4      	; 0xe712 <fatfs_getc+0xea>
    e70e:	8a e0       	ldi	r24, 0x0A	; 10
    e710:	90 e0       	ldi	r25, 0x00	; 0
    e712:	0f 90       	pop	r0
    e714:	0f 90       	pop	r0
    e716:	0f 90       	pop	r0
    e718:	df 91       	pop	r29
    e71a:	cf 91       	pop	r28
    e71c:	1f 91       	pop	r17
    e71e:	0f 91       	pop	r16
    e720:	ff 90       	pop	r15
    e722:	ef 90       	pop	r14
    e724:	bf 90       	pop	r11
    e726:	af 90       	pop	r10
    e728:	9f 90       	pop	r9
    e72a:	8f 90       	pop	r8
    e72c:	08 95       	ret

0000e72e <fatfs_putc>:
    e72e:	a3 e0       	ldi	r26, 0x03	; 3
    e730:	b0 e0       	ldi	r27, 0x00	; 0
    e732:	ed e9       	ldi	r30, 0x9D	; 157
    e734:	f3 e7       	ldi	r31, 0x73	; 115
    e736:	0c 94 17 e3 	jmp	0x1c62e	; 0x1c62e <__prologue_saves__+0x1c>
    e73a:	8b 83       	std	Y+3, r24	; 0x03
    e73c:	10 92 ca 1c 	sts	0x1CCA, r1	; 0x801cca <errno+0x1>
    e740:	10 92 c9 1c 	sts	0x1CC9, r1	; 0x801cc9 <errno>
    e744:	61 15       	cp	r22, r1
    e746:	71 05       	cpc	r23, r1
    e748:	39 f4       	brne	.+14     	; 0xe758 <fatfs_putc+0x2a>
    e74a:	89 e0       	ldi	r24, 0x09	; 9
    e74c:	90 e0       	ldi	r25, 0x00	; 0
    e74e:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    e752:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    e756:	2d c0       	rjmp	.+90     	; 0xe7b2 <fatfs_putc+0x84>
    e758:	fb 01       	movw	r30, r22
    e75a:	84 85       	ldd	r24, Z+12	; 0x0c
    e75c:	95 85       	ldd	r25, Z+13	; 0x0d
    e75e:	00 97       	sbiw	r24, 0x00	; 0
    e760:	a1 f3       	breq	.-24     	; 0xe74a <fatfs_putc+0x1c>
    e762:	8b 01       	movw	r16, r22
    e764:	9e 01       	movw	r18, r28
    e766:	2f 5f       	subi	r18, 0xFF	; 255
    e768:	3f 4f       	sbci	r19, 0xFF	; 255
    e76a:	41 e0       	ldi	r20, 0x01	; 1
    e76c:	50 e0       	ldi	r21, 0x00	; 0
    e76e:	be 01       	movw	r22, r28
    e770:	6d 5f       	subi	r22, 0xFD	; 253
    e772:	7f 4f       	sbci	r23, 0xFF	; 255
    e774:	0e 94 fd 5a 	call	0xb5fa	; 0xb5fa <f_write>
    e778:	00 97       	sbiw	r24, 0x00	; 0
    e77a:	31 f4       	brne	.+12     	; 0xe788 <fatfs_putc+0x5a>
    e77c:	29 81       	ldd	r18, Y+1	; 0x01
    e77e:	3a 81       	ldd	r19, Y+2	; 0x02
    e780:	21 30       	cpi	r18, 0x01	; 1
    e782:	31 05       	cpc	r19, r1
    e784:	c9 f0       	breq	.+50     	; 0xe7b8 <fatfs_putc+0x8a>
    e786:	03 c0       	rjmp	.+6      	; 0xe78e <fatfs_putc+0x60>
    e788:	84 31       	cpi	r24, 0x14	; 20
    e78a:	91 05       	cpc	r25, r1
    e78c:	40 f4       	brcc	.+16     	; 0xe79e <fatfs_putc+0x70>
    e78e:	fc 01       	movw	r30, r24
    e790:	ea 55       	subi	r30, 0x5A	; 90
    e792:	f4 4f       	sbci	r31, 0xF4	; 244
    e794:	80 81       	ld	r24, Z
    e796:	08 2e       	mov	r0, r24
    e798:	00 0c       	add	r0, r0
    e79a:	99 0b       	sbc	r25, r25
    e79c:	02 c0       	rjmp	.+4      	; 0xe7a2 <fatfs_putc+0x74>
    e79e:	83 e2       	ldi	r24, 0x23	; 35
    e7a0:	90 e0       	ldi	r25, 0x00	; 0
    e7a2:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    e7a6:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    e7aa:	f8 01       	movw	r30, r16
    e7ac:	83 81       	ldd	r24, Z+3	; 0x03
    e7ae:	80 62       	ori	r24, 0x20	; 32
    e7b0:	83 83       	std	Z+3, r24	; 0x03
    e7b2:	8f ef       	ldi	r24, 0xFF	; 255
    e7b4:	9f ef       	ldi	r25, 0xFF	; 255
    e7b6:	02 c0       	rjmp	.+4      	; 0xe7bc <fatfs_putc+0x8e>
    e7b8:	8b 81       	ldd	r24, Y+3	; 0x03
    e7ba:	90 e0       	ldi	r25, 0x00	; 0
    e7bc:	23 96       	adiw	r28, 0x03	; 3
    e7be:	e4 e0       	ldi	r30, 0x04	; 4
    e7c0:	0c 94 33 e3 	jmp	0x1c666	; 0x1c666 <__epilogue_restores__+0x1c>

0000e7c4 <fgetc>:
    e7c4:	cf 93       	push	r28
    e7c6:	df 93       	push	r29
    e7c8:	00 d0       	rcall	.+0      	; 0xe7ca <fgetc+0x6>
    e7ca:	1f 92       	push	r1
    e7cc:	ec 01       	movw	r28, r24
    e7ce:	00 97       	sbiw	r24, 0x00	; 0
    e7d0:	39 f4       	brne	.+14     	; 0xe7e0 <fgetc+0x1c>
    e7d2:	89 e0       	ldi	r24, 0x09	; 9
    e7d4:	90 e0       	ldi	r25, 0x00	; 0
    e7d6:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    e7da:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    e7de:	40 c0       	rjmp	.+128    	; 0xe860 <fgetc+0x9c>
    e7e0:	2b 81       	ldd	r18, Y+3	; 0x03
    e7e2:	20 ff       	sbrs	r18, 0
    e7e4:	3d c0       	rjmp	.+122    	; 0xe860 <fgetc+0x9c>
    e7e6:	26 ff       	sbrs	r18, 6
    e7e8:	0a c0       	rjmp	.+20     	; 0xe7fe <fgetc+0x3a>
    e7ea:	2f 7b       	andi	r18, 0xBF	; 191
    e7ec:	2b 83       	std	Y+3, r18	; 0x03
    e7ee:	8e 81       	ldd	r24, Y+6	; 0x06
    e7f0:	9f 81       	ldd	r25, Y+7	; 0x07
    e7f2:	01 96       	adiw	r24, 0x01	; 1
    e7f4:	9f 83       	std	Y+7, r25	; 0x07
    e7f6:	8e 83       	std	Y+6, r24	; 0x06
    e7f8:	8a 81       	ldd	r24, Y+2	; 0x02
    e7fa:	90 e0       	ldi	r25, 0x00	; 0
    e7fc:	33 c0       	rjmp	.+102    	; 0xe864 <fgetc+0xa0>
    e7fe:	22 ff       	sbrs	r18, 2
    e800:	0d c0       	rjmp	.+26     	; 0xe81c <fgetc+0x58>
    e802:	e8 81       	ld	r30, Y
    e804:	f9 81       	ldd	r31, Y+1	; 0x01
    e806:	80 81       	ld	r24, Z
    e808:	90 e0       	ldi	r25, 0x00	; 0
    e80a:	00 97       	sbiw	r24, 0x00	; 0
    e80c:	19 f4       	brne	.+6      	; 0xe814 <fgetc+0x50>
    e80e:	20 62       	ori	r18, 0x20	; 32
    e810:	2b 83       	std	Y+3, r18	; 0x03
    e812:	26 c0       	rjmp	.+76     	; 0xe860 <fgetc+0x9c>
    e814:	31 96       	adiw	r30, 0x01	; 1
    e816:	f9 83       	std	Y+1, r31	; 0x01
    e818:	e8 83       	st	Y, r30
    e81a:	1b c0       	rjmp	.+54     	; 0xe852 <fgetc+0x8e>
    e81c:	ea 85       	ldd	r30, Y+10	; 0x0a
    e81e:	fb 85       	ldd	r31, Y+11	; 0x0b
    e820:	30 97       	sbiw	r30, 0x00	; 0
    e822:	59 f4       	brne	.+22     	; 0xe83a <fgetc+0x76>
    e824:	8a e1       	ldi	r24, 0x1A	; 26
    e826:	9c e0       	ldi	r25, 0x0C	; 12
    e828:	a0 e0       	ldi	r26, 0x00	; 0
    e82a:	ed b7       	in	r30, 0x3d	; 61
    e82c:	fe b7       	in	r31, 0x3e	; 62
    e82e:	81 83       	std	Z+1, r24	; 0x01
    e830:	92 83       	std	Z+2, r25	; 0x02
    e832:	a3 83       	std	Z+3, r26	; 0x03
    e834:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    e838:	13 c0       	rjmp	.+38     	; 0xe860 <fgetc+0x9c>
    e83a:	09 95       	icall
    e83c:	97 ff       	sbrs	r25, 7
    e83e:	09 c0       	rjmp	.+18     	; 0xe852 <fgetc+0x8e>
    e840:	2b 81       	ldd	r18, Y+3	; 0x03
    e842:	02 96       	adiw	r24, 0x02	; 2
    e844:	11 f0       	breq	.+4      	; 0xe84a <fgetc+0x86>
    e846:	80 e2       	ldi	r24, 0x20	; 32
    e848:	01 c0       	rjmp	.+2      	; 0xe84c <fgetc+0x88>
    e84a:	80 e1       	ldi	r24, 0x10	; 16
    e84c:	82 2b       	or	r24, r18
    e84e:	8b 83       	std	Y+3, r24	; 0x03
    e850:	07 c0       	rjmp	.+14     	; 0xe860 <fgetc+0x9c>
    e852:	2e 81       	ldd	r18, Y+6	; 0x06
    e854:	3f 81       	ldd	r19, Y+7	; 0x07
    e856:	2f 5f       	subi	r18, 0xFF	; 255
    e858:	3f 4f       	sbci	r19, 0xFF	; 255
    e85a:	3f 83       	std	Y+7, r19	; 0x07
    e85c:	2e 83       	std	Y+6, r18	; 0x06
    e85e:	02 c0       	rjmp	.+4      	; 0xe864 <fgetc+0xa0>
    e860:	8f ef       	ldi	r24, 0xFF	; 255
    e862:	9f ef       	ldi	r25, 0xFF	; 255
    e864:	cd b7       	in	r28, 0x3d	; 61
    e866:	de b7       	in	r29, 0x3e	; 62
    e868:	23 96       	adiw	r28, 0x03	; 3
    e86a:	e2 e0       	ldi	r30, 0x02	; 2
    e86c:	0c 94 35 e3 	jmp	0x1c66a	; 0x1c66a <__epilogue_restores__+0x20>

0000e870 <fputc>:
    e870:	cf 93       	push	r28
    e872:	df 93       	push	r29
    e874:	00 d0       	rcall	.+0      	; 0xe876 <fputc+0x6>
    e876:	1f 92       	push	r1
    e878:	eb 01       	movw	r28, r22
    e87a:	10 92 ca 1c 	sts	0x1CCA, r1	; 0x801cca <errno+0x1>
    e87e:	10 92 c9 1c 	sts	0x1CC9, r1	; 0x801cc9 <errno>
    e882:	20 91 cd 1c 	lds	r18, 0x1CCD	; 0x801ccd <__iob+0x2>
    e886:	30 91 ce 1c 	lds	r19, 0x1CCE	; 0x801cce <__iob+0x3>
    e88a:	62 17       	cp	r22, r18
    e88c:	73 07       	cpc	r23, r19
    e88e:	49 f0       	breq	.+18     	; 0xe8a2 <fputc+0x32>
    e890:	20 91 cf 1c 	lds	r18, 0x1CCF	; 0x801ccf <__iob+0x4>
    e894:	30 91 d0 1c 	lds	r19, 0x1CD0	; 0x801cd0 <__iob+0x5>
    e898:	62 17       	cp	r22, r18
    e89a:	73 07       	cpc	r23, r19
    e89c:	11 f0       	breq	.+4      	; 0xe8a2 <fputc+0x32>
    e89e:	47 df       	rcall	.-370    	; 0xe72e <fatfs_putc>
    e8a0:	33 c0       	rjmp	.+102    	; 0xe908 <fputc+0x98>
    e8a2:	2b 81       	ldd	r18, Y+3	; 0x03
    e8a4:	21 ff       	sbrs	r18, 1
    e8a6:	2e c0       	rjmp	.+92     	; 0xe904 <fputc+0x94>
    e8a8:	22 ff       	sbrs	r18, 2
    e8aa:	10 c0       	rjmp	.+32     	; 0xe8cc <fputc+0x5c>
    e8ac:	4e 81       	ldd	r20, Y+6	; 0x06
    e8ae:	5f 81       	ldd	r21, Y+7	; 0x07
    e8b0:	2c 81       	ldd	r18, Y+4	; 0x04
    e8b2:	3d 81       	ldd	r19, Y+5	; 0x05
    e8b4:	42 17       	cp	r20, r18
    e8b6:	53 07       	cpc	r21, r19
    e8b8:	f4 f4       	brge	.+60     	; 0xe8f6 <fputc+0x86>
    e8ba:	e8 81       	ld	r30, Y
    e8bc:	f9 81       	ldd	r31, Y+1	; 0x01
    e8be:	9f 01       	movw	r18, r30
    e8c0:	2f 5f       	subi	r18, 0xFF	; 255
    e8c2:	3f 4f       	sbci	r19, 0xFF	; 255
    e8c4:	39 83       	std	Y+1, r19	; 0x01
    e8c6:	28 83       	st	Y, r18
    e8c8:	80 83       	st	Z, r24
    e8ca:	15 c0       	rjmp	.+42     	; 0xe8f6 <fputc+0x86>
    e8cc:	e8 85       	ldd	r30, Y+8	; 0x08
    e8ce:	f9 85       	ldd	r31, Y+9	; 0x09
    e8d0:	30 97       	sbiw	r30, 0x00	; 0
    e8d2:	59 f4       	brne	.+22     	; 0xe8ea <fputc+0x7a>
    e8d4:	82 e0       	ldi	r24, 0x02	; 2
    e8d6:	9c e0       	ldi	r25, 0x0C	; 12
    e8d8:	a0 e0       	ldi	r26, 0x00	; 0
    e8da:	ed b7       	in	r30, 0x3d	; 61
    e8dc:	fe b7       	in	r31, 0x3e	; 62
    e8de:	81 83       	std	Z+1, r24	; 0x01
    e8e0:	92 83       	std	Z+2, r25	; 0x02
    e8e2:	a3 83       	std	Z+3, r26	; 0x03
    e8e4:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    e8e8:	0d c0       	rjmp	.+26     	; 0xe904 <fputc+0x94>
    e8ea:	be 01       	movw	r22, r28
    e8ec:	09 95       	icall
    e8ee:	8f 3f       	cpi	r24, 0xFF	; 255
    e8f0:	ff ef       	ldi	r31, 0xFF	; 255
    e8f2:	9f 07       	cpc	r25, r31
    e8f4:	39 f0       	breq	.+14     	; 0xe904 <fputc+0x94>
    e8f6:	2e 81       	ldd	r18, Y+6	; 0x06
    e8f8:	3f 81       	ldd	r19, Y+7	; 0x07
    e8fa:	2f 5f       	subi	r18, 0xFF	; 255
    e8fc:	3f 4f       	sbci	r19, 0xFF	; 255
    e8fe:	3f 83       	std	Y+7, r19	; 0x07
    e900:	2e 83       	std	Y+6, r18	; 0x06
    e902:	02 c0       	rjmp	.+4      	; 0xe908 <fputc+0x98>
    e904:	8f ef       	ldi	r24, 0xFF	; 255
    e906:	9f ef       	ldi	r25, 0xFF	; 255
    e908:	cd b7       	in	r28, 0x3d	; 61
    e90a:	de b7       	in	r29, 0x3e	; 62
    e90c:	23 96       	adiw	r28, 0x03	; 3
    e90e:	e2 e0       	ldi	r30, 0x02	; 2
    e910:	0c 94 35 e3 	jmp	0x1c66a	; 0x1c66a <__epilogue_restores__+0x20>

0000e914 <_fprintf_putc>:
    e914:	fc 01       	movw	r30, r24
    e916:	86 2f       	mov	r24, r22
    e918:	26 81       	ldd	r18, Z+6	; 0x06
    e91a:	37 81       	ldd	r19, Z+7	; 0x07
    e91c:	2f 5f       	subi	r18, 0xFF	; 255
    e91e:	3f 4f       	sbci	r19, 0xFF	; 255
    e920:	37 83       	std	Z+7, r19	; 0x07
    e922:	26 83       	std	Z+6, r18	; 0x06
    e924:	62 81       	ldd	r22, Z+2	; 0x02
    e926:	73 81       	ldd	r23, Z+3	; 0x03
    e928:	90 e0       	ldi	r25, 0x00	; 0
    e92a:	a2 cf       	rjmp	.-188    	; 0xe870 <fputc>
    e92c:	08 95       	ret

0000e92e <getchar>:
    e92e:	80 91 cb 1c 	lds	r24, 0x1CCB	; 0x801ccb <__iob>
    e932:	90 91 cc 1c 	lds	r25, 0x1CCC	; 0x801ccc <__iob+0x1>
    e936:	46 cf       	rjmp	.-372    	; 0xe7c4 <fgetc>
    e938:	08 95       	ret

0000e93a <putchar>:
    e93a:	60 91 cd 1c 	lds	r22, 0x1CCD	; 0x801ccd <__iob+0x2>
    e93e:	70 91 ce 1c 	lds	r23, 0x1CCE	; 0x801cce <__iob+0x3>
    e942:	96 cf       	rjmp	.-212    	; 0xe870 <fputc>
    e944:	08 95       	ret

0000e946 <fgets>:
    e946:	a0 e0       	ldi	r26, 0x00	; 0
    e948:	b0 e0       	ldi	r27, 0x00	; 0
    e94a:	e9 ea       	ldi	r30, 0xA9	; 169
    e94c:	f4 e7       	ldi	r31, 0x74	; 116
    e94e:	0c 94 13 e3 	jmp	0x1c626	; 0x1c626 <__prologue_saves__+0x14>
    e952:	7c 01       	movw	r14, r24
    e954:	6a 01       	movw	r12, r20
    e956:	8b 01       	movw	r16, r22
    e958:	c0 e0       	ldi	r28, 0x00	; 0
    e95a:	d0 e0       	ldi	r29, 0x00	; 0
    e95c:	01 15       	cp	r16, r1
    e95e:	11 05       	cpc	r17, r1
    e960:	41 f0       	breq	.+16     	; 0xe972 <fgets+0x2c>
    e962:	c6 01       	movw	r24, r12
    e964:	2f df       	rcall	.-418    	; 0xe7c4 <fgetc>
    e966:	8f 3f       	cpi	r24, 0xFF	; 255
    e968:	2f ef       	ldi	r18, 0xFF	; 255
    e96a:	92 07       	cpc	r25, r18
    e96c:	39 f4       	brne	.+14     	; 0xe97c <fgets+0x36>
    e96e:	20 97       	sbiw	r28, 0x00	; 0
    e970:	b9 f0       	breq	.+46     	; 0xe9a0 <fgets+0x5a>
    e972:	ce 0d       	add	r28, r14
    e974:	df 1d       	adc	r29, r15
    e976:	18 82       	st	Y, r1
    e978:	c7 01       	movw	r24, r14
    e97a:	14 c0       	rjmp	.+40     	; 0xe9a4 <fgets+0x5e>
    e97c:	8a 30       	cpi	r24, 0x0A	; 10
    e97e:	91 05       	cpc	r25, r1
    e980:	c1 f3       	breq	.-16     	; 0xe972 <fgets+0x2c>
    e982:	88 30       	cpi	r24, 0x08	; 8
    e984:	91 05       	cpc	r25, r1
    e986:	21 f4       	brne	.+8      	; 0xe990 <fgets+0x4a>
    e988:	20 97       	sbiw	r28, 0x00	; 0
    e98a:	39 f0       	breq	.+14     	; 0xe99a <fgets+0x54>
    e98c:	21 97       	sbiw	r28, 0x01	; 1
    e98e:	05 c0       	rjmp	.+10     	; 0xe99a <fgets+0x54>
    e990:	f7 01       	movw	r30, r14
    e992:	ec 0f       	add	r30, r28
    e994:	fd 1f       	adc	r31, r29
    e996:	80 83       	st	Z, r24
    e998:	21 96       	adiw	r28, 0x01	; 1
    e99a:	01 50       	subi	r16, 0x01	; 1
    e99c:	11 09       	sbc	r17, r1
    e99e:	de cf       	rjmp	.-68     	; 0xe95c <fgets+0x16>
    e9a0:	80 e0       	ldi	r24, 0x00	; 0
    e9a2:	90 e0       	ldi	r25, 0x00	; 0
    e9a4:	cd b7       	in	r28, 0x3d	; 61
    e9a6:	de b7       	in	r29, 0x3e	; 62
    e9a8:	e8 e0       	ldi	r30, 0x08	; 8
    e9aa:	0c 94 2f e3 	jmp	0x1c65e	; 0x1c65e <__epilogue_restores__+0x14>

0000e9ae <fputs>:
    e9ae:	0f 93       	push	r16
    e9b0:	1f 93       	push	r17
    e9b2:	cf 93       	push	r28
    e9b4:	df 93       	push	r29
    e9b6:	8b 01       	movw	r16, r22
    e9b8:	ec 01       	movw	r28, r24
    e9ba:	89 91       	ld	r24, Y+
    e9bc:	88 23       	and	r24, r24
    e9be:	41 f0       	breq	.+16     	; 0xe9d0 <fputs+0x22>
    e9c0:	b8 01       	movw	r22, r16
    e9c2:	90 e0       	ldi	r25, 0x00	; 0
    e9c4:	55 df       	rcall	.-342    	; 0xe870 <fputc>
    e9c6:	8f 3f       	cpi	r24, 0xFF	; 255
    e9c8:	2f ef       	ldi	r18, 0xFF	; 255
    e9ca:	92 07       	cpc	r25, r18
    e9cc:	b1 f7       	brne	.-20     	; 0xe9ba <fputs+0xc>
    e9ce:	02 c0       	rjmp	.+4      	; 0xe9d4 <fputs+0x26>
    e9d0:	80 e0       	ldi	r24, 0x00	; 0
    e9d2:	90 e0       	ldi	r25, 0x00	; 0
    e9d4:	df 91       	pop	r29
    e9d6:	cf 91       	pop	r28
    e9d8:	1f 91       	pop	r17
    e9da:	0f 91       	pop	r16
    e9dc:	08 95       	ret

0000e9de <puts>:
    e9de:	cf 93       	push	r28
    e9e0:	df 93       	push	r29
    e9e2:	ec 01       	movw	r28, r24
    e9e4:	89 91       	ld	r24, Y+
    e9e6:	60 91 cd 1c 	lds	r22, 0x1CCD	; 0x801ccd <__iob+0x2>
    e9ea:	70 91 ce 1c 	lds	r23, 0x1CCE	; 0x801cce <__iob+0x3>
    e9ee:	88 23       	and	r24, r24
    e9f0:	39 f0       	breq	.+14     	; 0xea00 <puts+0x22>
    e9f2:	90 e0       	ldi	r25, 0x00	; 0
    e9f4:	3d df       	rcall	.-390    	; 0xe870 <fputc>
    e9f6:	8f 3f       	cpi	r24, 0xFF	; 255
    e9f8:	2f ef       	ldi	r18, 0xFF	; 255
    e9fa:	92 07       	cpc	r25, r18
    e9fc:	99 f7       	brne	.-26     	; 0xe9e4 <puts+0x6>
    e9fe:	03 c0       	rjmp	.+6      	; 0xea06 <puts+0x28>
    ea00:	8a e0       	ldi	r24, 0x0A	; 10
    ea02:	90 e0       	ldi	r25, 0x00	; 0
    ea04:	35 df       	rcall	.-406    	; 0xe870 <fputc>
    ea06:	df 91       	pop	r29
    ea08:	cf 91       	pop	r28
    ea0a:	08 95       	ret

0000ea0c <fileno>:
    ea0c:	00 97       	sbiw	r24, 0x00	; 0
    ea0e:	39 f4       	brne	.+14     	; 0xea1e <fileno+0x12>
    ea10:	89 e0       	ldi	r24, 0x09	; 9
    ea12:	90 e0       	ldi	r25, 0x00	; 0
    ea14:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    ea18:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    ea1c:	0e c0       	rjmp	.+28     	; 0xea3a <fileno+0x2e>
    ea1e:	eb ec       	ldi	r30, 0xCB	; 203
    ea20:	fc e1       	ldi	r31, 0x1C	; 28
    ea22:	20 e0       	ldi	r18, 0x00	; 0
    ea24:	30 e0       	ldi	r19, 0x00	; 0
    ea26:	41 91       	ld	r20, Z+
    ea28:	51 91       	ld	r21, Z+
    ea2a:	84 17       	cp	r24, r20
    ea2c:	95 07       	cpc	r25, r21
    ea2e:	41 f0       	breq	.+16     	; 0xea40 <fileno+0x34>
    ea30:	2f 5f       	subi	r18, 0xFF	; 255
    ea32:	3f 4f       	sbci	r19, 0xFF	; 255
    ea34:	20 31       	cpi	r18, 0x10	; 16
    ea36:	31 05       	cpc	r19, r1
    ea38:	b1 f7       	brne	.-20     	; 0xea26 <fileno+0x1a>
    ea3a:	8f ef       	ldi	r24, 0xFF	; 255
    ea3c:	9f ef       	ldi	r25, 0xFF	; 255
    ea3e:	08 95       	ret
    ea40:	c9 01       	movw	r24, r18
    ea42:	08 95       	ret

0000ea44 <fileno_to_stream>:
    ea44:	80 31       	cpi	r24, 0x10	; 16
    ea46:	91 05       	cpc	r25, r1
    ea48:	48 f4       	brcc	.+18     	; 0xea5c <fileno_to_stream+0x18>
    ea4a:	88 0f       	add	r24, r24
    ea4c:	99 1f       	adc	r25, r25
    ea4e:	fc 01       	movw	r30, r24
    ea50:	e5 53       	subi	r30, 0x35	; 53
    ea52:	f3 4e       	sbci	r31, 0xE3	; 227
    ea54:	80 81       	ld	r24, Z
    ea56:	91 81       	ldd	r25, Z+1	; 0x01
    ea58:	00 97       	sbiw	r24, 0x00	; 0
    ea5a:	41 f4       	brne	.+16     	; 0xea6c <fileno_to_stream+0x28>
    ea5c:	89 e0       	ldi	r24, 0x09	; 9
    ea5e:	90 e0       	ldi	r25, 0x00	; 0
    ea60:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    ea64:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    ea68:	80 e0       	ldi	r24, 0x00	; 0
    ea6a:	90 e0       	ldi	r25, 0x00	; 0
    ea6c:	08 95       	ret

0000ea6e <mctime>:
    ea6e:	a4 e0       	ldi	r26, 0x04	; 4
    ea70:	b0 e0       	ldi	r27, 0x00	; 0
    ea72:	ed e3       	ldi	r30, 0x3D	; 61
    ea74:	f5 e7       	ldi	r31, 0x75	; 117
    ea76:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__prologue_saves__+0x20>
    ea7a:	69 83       	std	Y+1, r22	; 0x01
    ea7c:	7a 83       	std	Y+2, r23	; 0x02
    ea7e:	8b 83       	std	Y+3, r24	; 0x03
    ea80:	9c 83       	std	Y+4, r25	; 0x04
    ea82:	10 92 ca 1c 	sts	0x1CCA, r1	; 0x801cca <errno+0x1>
    ea86:	10 92 c9 1c 	sts	0x1CC9, r1	; 0x801cc9 <errno>
    ea8a:	ce 01       	movw	r24, r28
    ea8c:	01 96       	adiw	r24, 0x01	; 1
    ea8e:	0e 94 6e 3b 	call	0x76dc	; 0x76dc <ctime_gm>
    ea92:	fc 01       	movw	r30, r24
    ea94:	01 90       	ld	r0, Z+
    ea96:	00 20       	and	r0, r0
    ea98:	e9 f7       	brne	.-6      	; 0xea94 <mctime+0x26>
    ea9a:	31 97       	sbiw	r30, 0x01	; 1
    ea9c:	e8 1b       	sub	r30, r24
    ea9e:	f9 0b       	sbc	r31, r25
    eaa0:	39 f0       	breq	.+14     	; 0xeab0 <mctime+0x42>
    eaa2:	31 97       	sbiw	r30, 0x01	; 1
    eaa4:	e8 0f       	add	r30, r24
    eaa6:	f9 1f       	adc	r31, r25
    eaa8:	20 81       	ld	r18, Z
    eaaa:	2a 30       	cpi	r18, 0x0A	; 10
    eaac:	09 f4       	brne	.+2      	; 0xeab0 <mctime+0x42>
    eaae:	10 82       	st	Z, r1
    eab0:	24 96       	adiw	r28, 0x04	; 4
    eab2:	e2 e0       	ldi	r30, 0x02	; 2
    eab4:	0c 94 35 e3 	jmp	0x1c66a	; 0x1c66a <__epilogue_restores__+0x20>

0000eab8 <basename>:
    eab8:	00 97       	sbiw	r24, 0x00	; 0
    eaba:	49 f0       	breq	.+18     	; 0xeace <basename+0x16>
    eabc:	fc 01       	movw	r30, r24
    eabe:	21 91       	ld	r18, Z+
    eac0:	22 23       	and	r18, r18
    eac2:	21 f0       	breq	.+8      	; 0xeacc <basename+0x14>
    eac4:	2f 32       	cpi	r18, 0x2F	; 47
    eac6:	d9 f7       	brne	.-10     	; 0xeabe <basename+0x6>
    eac8:	cf 01       	movw	r24, r30
    eaca:	f9 cf       	rjmp	.-14     	; 0xeabe <basename+0x6>
    eacc:	08 95       	ret
    eace:	8d e2       	ldi	r24, 0x2D	; 45
    ead0:	9c e0       	ldi	r25, 0x0C	; 12
    ead2:	08 95       	ret

0000ead4 <chdir>:
    ead4:	10 92 ca 1c 	sts	0x1CCA, r1	; 0x801cca <errno+0x1>
    ead8:	10 92 c9 1c 	sts	0x1CC9, r1	; 0x801cc9 <errno>
    eadc:	0e 94 2d 5d 	call	0xba5a	; 0xba5a <f_chdir>
    eae0:	00 97       	sbiw	r24, 0x00	; 0
    eae2:	a1 f0       	breq	.+40     	; 0xeb0c <chdir+0x38>
    eae4:	84 31       	cpi	r24, 0x14	; 20
    eae6:	91 05       	cpc	r25, r1
    eae8:	40 f4       	brcc	.+16     	; 0xeafa <chdir+0x26>
    eaea:	fc 01       	movw	r30, r24
    eaec:	ea 55       	subi	r30, 0x5A	; 90
    eaee:	f4 4f       	sbci	r31, 0xF4	; 244
    eaf0:	80 81       	ld	r24, Z
    eaf2:	08 2e       	mov	r0, r24
    eaf4:	00 0c       	add	r0, r0
    eaf6:	99 0b       	sbc	r25, r25
    eaf8:	02 c0       	rjmp	.+4      	; 0xeafe <chdir+0x2a>
    eafa:	83 e2       	ldi	r24, 0x23	; 35
    eafc:	90 e0       	ldi	r25, 0x00	; 0
    eafe:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    eb02:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    eb06:	8f ef       	ldi	r24, 0xFF	; 255
    eb08:	9f ef       	ldi	r25, 0xFF	; 255
    eb0a:	08 95       	ret
    eb0c:	80 e0       	ldi	r24, 0x00	; 0
    eb0e:	90 e0       	ldi	r25, 0x00	; 0
    eb10:	08 95       	ret

0000eb12 <chmod>:
    eb12:	10 92 ca 1c 	sts	0x1CCA, r1	; 0x801cca <errno+0x1>
    eb16:	10 92 c9 1c 	sts	0x1CC9, r1	; 0x801cc9 <errno>
    eb1a:	42 79       	andi	r20, 0x92	; 146
    eb1c:	55 27       	eor	r21, r21
    eb1e:	66 27       	eor	r22, r22
    eb20:	77 27       	eor	r23, r23
    eb22:	45 2b       	or	r20, r21
    eb24:	46 2b       	or	r20, r22
    eb26:	47 2b       	or	r20, r23
    eb28:	19 f0       	breq	.+6      	; 0xeb30 <chmod+0x1e>
    eb2a:	80 e0       	ldi	r24, 0x00	; 0
    eb2c:	90 e0       	ldi	r25, 0x00	; 0
    eb2e:	08 95       	ret
    eb30:	41 e0       	ldi	r20, 0x01	; 1
    eb32:	61 e0       	ldi	r22, 0x01	; 1
    eb34:	0e 94 0d 66 	call	0xcc1a	; 0xcc1a <f_chmod>
    eb38:	00 97       	sbiw	r24, 0x00	; 0
    eb3a:	b9 f3       	breq	.-18     	; 0xeb2a <chmod+0x18>
    eb3c:	84 31       	cpi	r24, 0x14	; 20
    eb3e:	91 05       	cpc	r25, r1
    eb40:	40 f4       	brcc	.+16     	; 0xeb52 <chmod+0x40>
    eb42:	fc 01       	movw	r30, r24
    eb44:	ea 55       	subi	r30, 0x5A	; 90
    eb46:	f4 4f       	sbci	r31, 0xF4	; 244
    eb48:	80 81       	ld	r24, Z
    eb4a:	08 2e       	mov	r0, r24
    eb4c:	00 0c       	add	r0, r0
    eb4e:	99 0b       	sbc	r25, r25
    eb50:	02 c0       	rjmp	.+4      	; 0xeb56 <chmod+0x44>
    eb52:	83 e2       	ldi	r24, 0x23	; 35
    eb54:	90 e0       	ldi	r25, 0x00	; 0
    eb56:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    eb5a:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    eb5e:	8f ef       	ldi	r24, 0xFF	; 255
    eb60:	9f ef       	ldi	r25, 0xFF	; 255
    eb62:	08 95       	ret

0000eb64 <getcwd>:
    eb64:	cf 93       	push	r28
    eb66:	df 93       	push	r29
    eb68:	d8 2f       	mov	r29, r24
    eb6a:	c9 2f       	mov	r28, r25
    eb6c:	10 92 ca 1c 	sts	0x1CCA, r1	; 0x801cca <errno+0x1>
    eb70:	10 92 c9 1c 	sts	0x1CC9, r1	; 0x801cc9 <errno>
    eb74:	0e 94 88 5d 	call	0xbb10	; 0xbb10 <f_getcwd>
    eb78:	00 97       	sbiw	r24, 0x00	; 0
    eb7a:	a1 f0       	breq	.+40     	; 0xeba4 <getcwd+0x40>
    eb7c:	84 31       	cpi	r24, 0x14	; 20
    eb7e:	91 05       	cpc	r25, r1
    eb80:	40 f4       	brcc	.+16     	; 0xeb92 <getcwd+0x2e>
    eb82:	fc 01       	movw	r30, r24
    eb84:	ea 55       	subi	r30, 0x5A	; 90
    eb86:	f4 4f       	sbci	r31, 0xF4	; 244
    eb88:	80 81       	ld	r24, Z
    eb8a:	08 2e       	mov	r0, r24
    eb8c:	00 0c       	add	r0, r0
    eb8e:	99 0b       	sbc	r25, r25
    eb90:	02 c0       	rjmp	.+4      	; 0xeb96 <getcwd+0x32>
    eb92:	83 e2       	ldi	r24, 0x23	; 35
    eb94:	90 e0       	ldi	r25, 0x00	; 0
    eb96:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    eb9a:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    eb9e:	80 e0       	ldi	r24, 0x00	; 0
    eba0:	90 e0       	ldi	r25, 0x00	; 0
    eba2:	02 c0       	rjmp	.+4      	; 0xeba8 <getcwd+0x44>
    eba4:	8d 2f       	mov	r24, r29
    eba6:	9c 2f       	mov	r25, r28
    eba8:	df 91       	pop	r29
    ebaa:	cf 91       	pop	r28
    ebac:	08 95       	ret

0000ebae <mkdir>:
    ebae:	cf 93       	push	r28
    ebb0:	df 93       	push	r29
    ebb2:	ec 01       	movw	r28, r24
    ebb4:	10 92 ca 1c 	sts	0x1CCA, r1	; 0x801cca <errno+0x1>
    ebb8:	10 92 c9 1c 	sts	0x1CC9, r1	; 0x801cc9 <errno>
    ebbc:	41 15       	cp	r20, r1
    ebbe:	51 05       	cpc	r21, r1
    ebc0:	61 05       	cpc	r22, r1
    ebc2:	71 05       	cpc	r23, r1
    ebc4:	41 f4       	brne	.+16     	; 0xebd6 <mkdir+0x28>
    ebc6:	ce 01       	movw	r24, r28
    ebc8:	0e 94 08 64 	call	0xc810	; 0xc810 <f_mkdir>
    ebcc:	00 97       	sbiw	r24, 0x00	; 0
    ebce:	39 f4       	brne	.+14     	; 0xebde <mkdir+0x30>
    ebd0:	80 e0       	ldi	r24, 0x00	; 0
    ebd2:	90 e0       	ldi	r25, 0x00	; 0
    ebd4:	17 c0       	rjmp	.+46     	; 0xec04 <mkdir+0x56>
    ebd6:	9d df       	rcall	.-198    	; 0xeb12 <chmod>
    ebd8:	89 2b       	or	r24, r25
    ebda:	a9 f3       	breq	.-22     	; 0xebc6 <mkdir+0x18>
    ebdc:	11 c0       	rjmp	.+34     	; 0xec00 <mkdir+0x52>
    ebde:	84 31       	cpi	r24, 0x14	; 20
    ebe0:	91 05       	cpc	r25, r1
    ebe2:	40 f4       	brcc	.+16     	; 0xebf4 <mkdir+0x46>
    ebe4:	fc 01       	movw	r30, r24
    ebe6:	ea 55       	subi	r30, 0x5A	; 90
    ebe8:	f4 4f       	sbci	r31, 0xF4	; 244
    ebea:	80 81       	ld	r24, Z
    ebec:	08 2e       	mov	r0, r24
    ebee:	00 0c       	add	r0, r0
    ebf0:	99 0b       	sbc	r25, r25
    ebf2:	02 c0       	rjmp	.+4      	; 0xebf8 <mkdir+0x4a>
    ebf4:	83 e2       	ldi	r24, 0x23	; 35
    ebf6:	90 e0       	ldi	r25, 0x00	; 0
    ebf8:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    ebfc:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    ec00:	8f ef       	ldi	r24, 0xFF	; 255
    ec02:	9f ef       	ldi	r25, 0xFF	; 255
    ec04:	df 91       	pop	r29
    ec06:	cf 91       	pop	r28
    ec08:	08 95       	ret

0000ec0a <rename>:
    ec0a:	10 92 ca 1c 	sts	0x1CCA, r1	; 0x801cca <errno+0x1>
    ec0e:	10 92 c9 1c 	sts	0x1CC9, r1	; 0x801cc9 <errno>
    ec12:	0e 94 f8 64 	call	0xc9f0	; 0xc9f0 <f_rename>
    ec16:	00 97       	sbiw	r24, 0x00	; 0
    ec18:	a1 f0       	breq	.+40     	; 0xec42 <rename+0x38>
    ec1a:	84 31       	cpi	r24, 0x14	; 20
    ec1c:	91 05       	cpc	r25, r1
    ec1e:	40 f4       	brcc	.+16     	; 0xec30 <rename+0x26>
    ec20:	fc 01       	movw	r30, r24
    ec22:	ea 55       	subi	r30, 0x5A	; 90
    ec24:	f4 4f       	sbci	r31, 0xF4	; 244
    ec26:	80 81       	ld	r24, Z
    ec28:	08 2e       	mov	r0, r24
    ec2a:	00 0c       	add	r0, r0
    ec2c:	99 0b       	sbc	r25, r25
    ec2e:	02 c0       	rjmp	.+4      	; 0xec34 <rename+0x2a>
    ec30:	83 e2       	ldi	r24, 0x23	; 35
    ec32:	90 e0       	ldi	r25, 0x00	; 0
    ec34:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    ec38:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    ec3c:	8f ef       	ldi	r24, 0xFF	; 255
    ec3e:	9f ef       	ldi	r25, 0xFF	; 255
    ec40:	08 95       	ret
    ec42:	80 e0       	ldi	r24, 0x00	; 0
    ec44:	90 e0       	ldi	r25, 0x00	; 0
    ec46:	08 95       	ret

0000ec48 <unlink>:
    ec48:	10 92 ca 1c 	sts	0x1CCA, r1	; 0x801cca <errno+0x1>
    ec4c:	10 92 c9 1c 	sts	0x1CC9, r1	; 0x801cc9 <errno>
    ec50:	0e 94 61 63 	call	0xc6c2	; 0xc6c2 <f_unlink>
    ec54:	00 97       	sbiw	r24, 0x00	; 0
    ec56:	a1 f0       	breq	.+40     	; 0xec80 <unlink+0x38>
    ec58:	84 31       	cpi	r24, 0x14	; 20
    ec5a:	91 05       	cpc	r25, r1
    ec5c:	40 f4       	brcc	.+16     	; 0xec6e <unlink+0x26>
    ec5e:	fc 01       	movw	r30, r24
    ec60:	ea 55       	subi	r30, 0x5A	; 90
    ec62:	f4 4f       	sbci	r31, 0xF4	; 244
    ec64:	80 81       	ld	r24, Z
    ec66:	08 2e       	mov	r0, r24
    ec68:	00 0c       	add	r0, r0
    ec6a:	99 0b       	sbc	r25, r25
    ec6c:	02 c0       	rjmp	.+4      	; 0xec72 <unlink+0x2a>
    ec6e:	83 e2       	ldi	r24, 0x23	; 35
    ec70:	90 e0       	ldi	r25, 0x00	; 0
    ec72:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    ec76:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    ec7a:	8f ef       	ldi	r24, 0xFF	; 255
    ec7c:	9f ef       	ldi	r25, 0xFF	; 255
    ec7e:	08 95       	ret
    ec80:	80 e0       	ldi	r24, 0x00	; 0
    ec82:	90 e0       	ldi	r25, 0x00	; 0
    ec84:	08 95       	ret

0000ec86 <rmdir>:
    ec86:	e0 cf       	rjmp	.-64     	; 0xec48 <unlink>
    ec88:	08 95       	ret

0000ec8a <closedir>:
    ec8a:	0e 94 ea 61 	call	0xc3d4	; 0xc3d4 <f_closedir>
    ec8e:	00 97       	sbiw	r24, 0x00	; 0
    ec90:	a1 f0       	breq	.+40     	; 0xecba <closedir+0x30>
    ec92:	84 31       	cpi	r24, 0x14	; 20
    ec94:	91 05       	cpc	r25, r1
    ec96:	40 f4       	brcc	.+16     	; 0xeca8 <closedir+0x1e>
    ec98:	fc 01       	movw	r30, r24
    ec9a:	ea 55       	subi	r30, 0x5A	; 90
    ec9c:	f4 4f       	sbci	r31, 0xF4	; 244
    ec9e:	80 81       	ld	r24, Z
    eca0:	08 2e       	mov	r0, r24
    eca2:	00 0c       	add	r0, r0
    eca4:	99 0b       	sbc	r25, r25
    eca6:	02 c0       	rjmp	.+4      	; 0xecac <closedir+0x22>
    eca8:	83 e2       	ldi	r24, 0x23	; 35
    ecaa:	90 e0       	ldi	r25, 0x00	; 0
    ecac:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    ecb0:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    ecb4:	8f ef       	ldi	r24, 0xFF	; 255
    ecb6:	9f ef       	ldi	r25, 0xFF	; 255
    ecb8:	08 95       	ret
    ecba:	80 e0       	ldi	r24, 0x00	; 0
    ecbc:	90 e0       	ldi	r25, 0x00	; 0
    ecbe:	08 95       	ret

0000ecc0 <opendir>:
    ecc0:	bc 01       	movw	r22, r24
    ecc2:	8c e3       	ldi	r24, 0x3C	; 60
    ecc4:	99 e1       	ldi	r25, 0x19	; 25
    ecc6:	0e 94 79 61 	call	0xc2f2	; 0xc2f2 <f_opendir>
    ecca:	00 97       	sbiw	r24, 0x00	; 0
    eccc:	a1 f0       	breq	.+40     	; 0xecf6 <opendir+0x36>
    ecce:	84 31       	cpi	r24, 0x14	; 20
    ecd0:	91 05       	cpc	r25, r1
    ecd2:	40 f4       	brcc	.+16     	; 0xece4 <opendir+0x24>
    ecd4:	fc 01       	movw	r30, r24
    ecd6:	ea 55       	subi	r30, 0x5A	; 90
    ecd8:	f4 4f       	sbci	r31, 0xF4	; 244
    ecda:	80 81       	ld	r24, Z
    ecdc:	08 2e       	mov	r0, r24
    ecde:	00 0c       	add	r0, r0
    ece0:	99 0b       	sbc	r25, r25
    ece2:	02 c0       	rjmp	.+4      	; 0xece8 <opendir+0x28>
    ece4:	83 e2       	ldi	r24, 0x23	; 35
    ece6:	90 e0       	ldi	r25, 0x00	; 0
    ece8:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    ecec:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    ecf0:	80 e0       	ldi	r24, 0x00	; 0
    ecf2:	90 e0       	ldi	r25, 0x00	; 0
    ecf4:	08 95       	ret
    ecf6:	8c e3       	ldi	r24, 0x3C	; 60
    ecf8:	99 e1       	ldi	r25, 0x19	; 25
    ecfa:	08 95       	ret

0000ecfc <readdir>:
    ecfc:	a6 e1       	ldi	r26, 0x16	; 22
    ecfe:	b1 e0       	ldi	r27, 0x01	; 1
    ed00:	e4 e8       	ldi	r30, 0x84	; 132
    ed02:	f6 e7       	ldi	r31, 0x76	; 118
    ed04:	0c 94 17 e3 	jmp	0x1c62e	; 0x1c62e <__prologue_saves__+0x1c>
    ed08:	10 92 3c 18 	sts	0x183C, r1	; 0x80183c <_de>
    ed0c:	be 01       	movw	r22, r28
    ed0e:	6f 5f       	subi	r22, 0xFF	; 255
    ed10:	7f 4f       	sbci	r23, 0xFF	; 255
    ed12:	0e 94 ff 61 	call	0xc3fe	; 0xc3fe <f_readdir>
    ed16:	00 97       	sbiw	r24, 0x00	; 0
    ed18:	a1 f0       	breq	.+40     	; 0xed42 <readdir+0x46>
    ed1a:	84 31       	cpi	r24, 0x14	; 20
    ed1c:	91 05       	cpc	r25, r1
    ed1e:	40 f4       	brcc	.+16     	; 0xed30 <readdir+0x34>
    ed20:	fc 01       	movw	r30, r24
    ed22:	ea 55       	subi	r30, 0x5A	; 90
    ed24:	f4 4f       	sbci	r31, 0xF4	; 244
    ed26:	80 81       	ld	r24, Z
    ed28:	08 2e       	mov	r0, r24
    ed2a:	00 0c       	add	r0, r0
    ed2c:	99 0b       	sbc	r25, r25
    ed2e:	02 c0       	rjmp	.+4      	; 0xed34 <readdir+0x38>
    ed30:	83 e2       	ldi	r24, 0x23	; 35
    ed32:	90 e0       	ldi	r25, 0x00	; 0
    ed34:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    ed38:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    ed3c:	80 e0       	ldi	r24, 0x00	; 0
    ed3e:	90 e0       	ldi	r25, 0x00	; 0
    ed40:	16 c0       	rjmp	.+44     	; 0xed6e <readdir+0x72>
    ed42:	be 01       	movw	r22, r28
    ed44:	69 5e       	subi	r22, 0xE9	; 233
    ed46:	7f 4f       	sbci	r23, 0xFF	; 255
    ed48:	fb 01       	movw	r30, r22
    ed4a:	01 90       	ld	r0, Z+
    ed4c:	00 20       	and	r0, r0
    ed4e:	e9 f7       	brne	.-6      	; 0xed4a <readdir+0x4e>
    ed50:	31 97       	sbiw	r30, 0x01	; 1
    ed52:	8f 01       	movw	r16, r30
    ed54:	06 1b       	sub	r16, r22
    ed56:	17 0b       	sbc	r17, r23
    ed58:	a8 01       	movw	r20, r16
    ed5a:	8c e3       	ldi	r24, 0x3C	; 60
    ed5c:	98 e1       	ldi	r25, 0x18	; 24
    ed5e:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <strncpy>
    ed62:	f8 01       	movw	r30, r16
    ed64:	e4 5c       	subi	r30, 0xC4	; 196
    ed66:	f7 4e       	sbci	r31, 0xE7	; 231
    ed68:	10 82       	st	Z, r1
    ed6a:	8c e3       	ldi	r24, 0x3C	; 60
    ed6c:	98 e1       	ldi	r25, 0x18	; 24
    ed6e:	ca 5e       	subi	r28, 0xEA	; 234
    ed70:	de 4f       	sbci	r29, 0xFE	; 254
    ed72:	e4 e0       	ldi	r30, 0x04	; 4
    ed74:	0c 94 33 e3 	jmp	0x1c666	; 0x1c666 <__epilogue_restores__+0x1c>

0000ed78 <perror>:
    ed78:	ad b7       	in	r26, 0x3d	; 61
    ed7a:	be b7       	in	r27, 0x3e	; 62
    ed7c:	17 97       	sbiw	r26, 0x07	; 7
    ed7e:	0f b6       	in	r0, 0x3f	; 63
    ed80:	f8 94       	cli
    ed82:	be bf       	out	0x3e, r27	; 62
    ed84:	0f be       	out	0x3f, r0	; 63
    ed86:	ad bf       	out	0x3d, r26	; 61
    ed88:	20 91 c9 1c 	lds	r18, 0x1CC9	; 0x801cc9 <errno>
    ed8c:	30 91 ca 1c 	lds	r19, 0x1CCA	; 0x801cca <errno+0x1>
    ed90:	23 32       	cpi	r18, 0x23	; 35
    ed92:	31 05       	cpc	r19, r1
    ed94:	40 f4       	brcc	.+16     	; 0xeda6 <perror+0x2e>
    ed96:	22 0f       	add	r18, r18
    ed98:	33 1f       	adc	r19, r19
    ed9a:	f9 01       	movw	r30, r18
    ed9c:	ea 5c       	subi	r30, 0xCA	; 202
    ed9e:	fe 4f       	sbci	r31, 0xFE	; 254
    eda0:	20 81       	ld	r18, Z
    eda2:	31 81       	ldd	r19, Z+1	; 0x01
    eda4:	04 c0       	rjmp	.+8      	; 0xedae <perror+0x36>
    eda6:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <sys_errlist+0x46>
    edaa:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <sys_errlist+0x47>
    edae:	00 97       	sbiw	r24, 0x00	; 0
    edb0:	99 f0       	breq	.+38     	; 0xedd8 <perror+0x60>
    edb2:	fc 01       	movw	r30, r24
    edb4:	40 81       	ld	r20, Z
    edb6:	44 23       	and	r20, r20
    edb8:	79 f0       	breq	.+30     	; 0xedd8 <perror+0x60>
    edba:	ed b7       	in	r30, 0x3d	; 61
    edbc:	fe b7       	in	r31, 0x3e	; 62
    edbe:	37 83       	std	Z+7, r19	; 0x07
    edc0:	26 83       	std	Z+6, r18	; 0x06
    edc2:	95 83       	std	Z+5, r25	; 0x05
    edc4:	84 83       	std	Z+4, r24	; 0x04
    edc6:	8e ee       	ldi	r24, 0xEE	; 238
    edc8:	9b e0       	ldi	r25, 0x0B	; 11
    edca:	a0 e0       	ldi	r26, 0x00	; 0
    edcc:	81 83       	std	Z+1, r24	; 0x01
    edce:	92 83       	std	Z+2, r25	; 0x02
    edd0:	a3 83       	std	Z+3, r26	; 0x03
    edd2:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    edd6:	0c c0       	rjmp	.+24     	; 0xedf0 <perror+0x78>
    edd8:	ed b7       	in	r30, 0x3d	; 61
    edda:	fe b7       	in	r31, 0x3e	; 62
    eddc:	35 83       	std	Z+5, r19	; 0x05
    edde:	24 83       	std	Z+4, r18	; 0x04
    ede0:	8a ee       	ldi	r24, 0xEA	; 234
    ede2:	9b e0       	ldi	r25, 0x0B	; 11
    ede4:	a0 e0       	ldi	r26, 0x00	; 0
    ede6:	81 83       	std	Z+1, r24	; 0x01
    ede8:	92 83       	std	Z+2, r25	; 0x02
    edea:	a3 83       	std	Z+3, r26	; 0x03
    edec:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    edf0:	ad b7       	in	r26, 0x3d	; 61
    edf2:	be b7       	in	r27, 0x3e	; 62
    edf4:	17 96       	adiw	r26, 0x07	; 7
    edf6:	0f b6       	in	r0, 0x3f	; 63
    edf8:	f8 94       	cli
    edfa:	be bf       	out	0x3e, r27	; 62
    edfc:	0f be       	out	0x3f, r0	; 63
    edfe:	ad bf       	out	0x3d, r26	; 61
    ee00:	08 95       	ret

0000ee02 <fdevopen>:
    ee02:	0f 93       	push	r16
    ee04:	1f 93       	push	r17
    ee06:	cf 93       	push	r28
    ee08:	df 93       	push	r29
    ee0a:	00 97       	sbiw	r24, 0x00	; 0
    ee0c:	31 f4       	brne	.+12     	; 0xee1a <fdevopen+0x18>
    ee0e:	61 15       	cp	r22, r1
    ee10:	71 05       	cpc	r23, r1
    ee12:	19 f4       	brne	.+6      	; 0xee1a <fdevopen+0x18>
    ee14:	80 e0       	ldi	r24, 0x00	; 0
    ee16:	90 e0       	ldi	r25, 0x00	; 0
    ee18:	3a c0       	rjmp	.+116    	; 0xee8e <fdevopen+0x8c>
    ee1a:	8b 01       	movw	r16, r22
    ee1c:	ec 01       	movw	r28, r24
    ee1e:	6e e0       	ldi	r22, 0x0E	; 14
    ee20:	70 e0       	ldi	r23, 0x00	; 0
    ee22:	81 e0       	ldi	r24, 0x01	; 1
    ee24:	90 e0       	ldi	r25, 0x00	; 0
    ee26:	0e 94 fe 25 	call	0x4bfc	; 0x4bfc <safecalloc>
    ee2a:	fc 01       	movw	r30, r24
    ee2c:	89 2b       	or	r24, r25
    ee2e:	91 f3       	breq	.-28     	; 0xee14 <fdevopen+0x12>
    ee30:	80 e8       	ldi	r24, 0x80	; 128
    ee32:	83 83       	std	Z+3, r24	; 0x03
    ee34:	01 15       	cp	r16, r1
    ee36:	11 05       	cpc	r17, r1
    ee38:	71 f0       	breq	.+28     	; 0xee56 <fdevopen+0x54>
    ee3a:	13 87       	std	Z+11, r17	; 0x0b
    ee3c:	02 87       	std	Z+10, r16	; 0x0a
    ee3e:	81 e8       	ldi	r24, 0x81	; 129
    ee40:	83 83       	std	Z+3, r24	; 0x03
    ee42:	80 91 cb 1c 	lds	r24, 0x1CCB	; 0x801ccb <__iob>
    ee46:	90 91 cc 1c 	lds	r25, 0x1CCC	; 0x801ccc <__iob+0x1>
    ee4a:	89 2b       	or	r24, r25
    ee4c:	21 f4       	brne	.+8      	; 0xee56 <fdevopen+0x54>
    ee4e:	f0 93 cc 1c 	sts	0x1CCC, r31	; 0x801ccc <__iob+0x1>
    ee52:	e0 93 cb 1c 	sts	0x1CCB, r30	; 0x801ccb <__iob>
    ee56:	20 97       	sbiw	r28, 0x00	; 0
    ee58:	c9 f0       	breq	.+50     	; 0xee8c <fdevopen+0x8a>
    ee5a:	d1 87       	std	Z+9, r29	; 0x09
    ee5c:	c0 87       	std	Z+8, r28	; 0x08
    ee5e:	83 81       	ldd	r24, Z+3	; 0x03
    ee60:	82 60       	ori	r24, 0x02	; 2
    ee62:	83 83       	std	Z+3, r24	; 0x03
    ee64:	80 91 cd 1c 	lds	r24, 0x1CCD	; 0x801ccd <__iob+0x2>
    ee68:	90 91 ce 1c 	lds	r25, 0x1CCE	; 0x801cce <__iob+0x3>
    ee6c:	89 2b       	or	r24, r25
    ee6e:	21 f4       	brne	.+8      	; 0xee78 <fdevopen+0x76>
    ee70:	f0 93 ce 1c 	sts	0x1CCE, r31	; 0x801cce <__iob+0x3>
    ee74:	e0 93 cd 1c 	sts	0x1CCD, r30	; 0x801ccd <__iob+0x2>
    ee78:	80 91 cf 1c 	lds	r24, 0x1CCF	; 0x801ccf <__iob+0x4>
    ee7c:	90 91 d0 1c 	lds	r25, 0x1CD0	; 0x801cd0 <__iob+0x5>
    ee80:	89 2b       	or	r24, r25
    ee82:	21 f4       	brne	.+8      	; 0xee8c <fdevopen+0x8a>
    ee84:	f0 93 d0 1c 	sts	0x1CD0, r31	; 0x801cd0 <__iob+0x5>
    ee88:	e0 93 cf 1c 	sts	0x1CCF, r30	; 0x801ccf <__iob+0x4>
    ee8c:	cf 01       	movw	r24, r30
    ee8e:	df 91       	pop	r29
    ee90:	cf 91       	pop	r28
    ee92:	1f 91       	pop	r17
    ee94:	0f 91       	pop	r16
    ee96:	08 95       	ret

0000ee98 <fat_time_to_unix>:
    ee98:	a6 e1       	ldi	r26, 0x16	; 22
    ee9a:	b0 e0       	ldi	r27, 0x00	; 0
    ee9c:	e2 e5       	ldi	r30, 0x52	; 82
    ee9e:	f7 e7       	ldi	r31, 0x77	; 119
    eea0:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__prologue_saves__+0x20>
    eea4:	fe 01       	movw	r30, r28
    eea6:	31 96       	adiw	r30, 0x01	; 1
    eea8:	26 e1       	ldi	r18, 0x16	; 22
    eeaa:	df 01       	movw	r26, r30
    eeac:	1d 92       	st	X+, r1
    eeae:	2a 95       	dec	r18
    eeb0:	e9 f7       	brne	.-6      	; 0xeeac <fat_time_to_unix+0x14>
    eeb2:	9b 01       	movw	r18, r22
    eeb4:	22 0f       	add	r18, r18
    eeb6:	33 1f       	adc	r19, r19
    eeb8:	2e 73       	andi	r18, 0x3E	; 62
    eeba:	33 27       	eor	r19, r19
    eebc:	3a 83       	std	Y+2, r19	; 0x02
    eebe:	29 83       	std	Y+1, r18	; 0x01
    eec0:	9b 01       	movw	r18, r22
    eec2:	55 e0       	ldi	r21, 0x05	; 5
    eec4:	36 95       	lsr	r19
    eec6:	27 95       	ror	r18
    eec8:	5a 95       	dec	r21
    eeca:	e1 f7       	brne	.-8      	; 0xeec4 <fat_time_to_unix+0x2c>
    eecc:	2f 73       	andi	r18, 0x3F	; 63
    eece:	33 27       	eor	r19, r19
    eed0:	3c 83       	std	Y+4, r19	; 0x04
    eed2:	2b 83       	std	Y+3, r18	; 0x03
    eed4:	27 2f       	mov	r18, r23
    eed6:	26 95       	lsr	r18
    eed8:	26 95       	lsr	r18
    eeda:	26 95       	lsr	r18
    eedc:	2d 83       	std	Y+5, r18	; 0x05
    eede:	1e 82       	std	Y+6, r1	; 0x06
    eee0:	9c 01       	movw	r18, r24
    eee2:	2f 71       	andi	r18, 0x1F	; 31
    eee4:	33 27       	eor	r19, r19
    eee6:	38 87       	std	Y+8, r19	; 0x08
    eee8:	2f 83       	std	Y+7, r18	; 0x07
    eeea:	9c 01       	movw	r18, r24
    eeec:	65 e0       	ldi	r22, 0x05	; 5
    eeee:	36 95       	lsr	r19
    eef0:	27 95       	ror	r18
    eef2:	6a 95       	dec	r22
    eef4:	e1 f7       	brne	.-8      	; 0xeeee <fat_time_to_unix+0x56>
    eef6:	2f 70       	andi	r18, 0x0F	; 15
    eef8:	33 27       	eor	r19, r19
    eefa:	21 50       	subi	r18, 0x01	; 1
    eefc:	31 09       	sbc	r19, r1
    eefe:	3a 87       	std	Y+10, r19	; 0x0a
    ef00:	29 87       	std	Y+9, r18	; 0x09
    ef02:	9c 01       	movw	r18, r24
    ef04:	23 2f       	mov	r18, r19
    ef06:	33 27       	eor	r19, r19
    ef08:	26 95       	lsr	r18
    ef0a:	20 5b       	subi	r18, 0xB0	; 176
    ef0c:	3f 4f       	sbci	r19, 0xFF	; 255
    ef0e:	3c 87       	std	Y+12, r19	; 0x0c
    ef10:	2b 87       	std	Y+11, r18	; 0x0b
    ef12:	cf 01       	movw	r24, r30
    ef14:	0e 94 b9 38 	call	0x7172	; 0x7172 <timegm>
    ef18:	66 96       	adiw	r28, 0x16	; 22
    ef1a:	e2 e0       	ldi	r30, 0x02	; 2
    ef1c:	0c 94 35 e3 	jmp	0x1c66a	; 0x1c66a <__epilogue_restores__+0x20>

0000ef20 <stat>:
    ef20:	a6 e1       	ldi	r26, 0x16	; 22
    ef22:	b1 e0       	ldi	r27, 0x01	; 1
    ef24:	e6 e9       	ldi	r30, 0x96	; 150
    ef26:	f7 e7       	ldi	r31, 0x77	; 119
    ef28:	0c 94 13 e3 	jmp	0x1c626	; 0x1c626 <__prologue_saves__+0x14>
    ef2c:	6c 01       	movw	r12, r24
    ef2e:	8b 01       	movw	r16, r22
    ef30:	10 92 ca 1c 	sts	0x1CCA, r1	; 0x801cca <errno+0x1>
    ef34:	10 92 c9 1c 	sts	0x1CC9, r1	; 0x801cc9 <errno>
    ef38:	6c ef       	ldi	r22, 0xFC	; 252
    ef3a:	78 e0       	ldi	r23, 0x08	; 8
    ef3c:	0e 94 8b 30 	call	0x6116	; 0x6116 <MATCH>
    ef40:	89 2b       	or	r24, r25
    ef42:	01 f1       	breq	.+64     	; 0xef84 <stat+0x64>
    ef44:	f8 01       	movw	r30, r16
    ef46:	14 a2       	std	Z+36, r1	; 0x24
    ef48:	15 a2       	std	Z+37, r1	; 0x25
    ef4a:	16 a2       	std	Z+38, r1	; 0x26
    ef4c:	17 a2       	std	Z+39, r1	; 0x27
    ef4e:	10 a6       	std	Z+40, r1	; 0x28
    ef50:	11 a6       	std	Z+41, r1	; 0x29
    ef52:	12 a6       	std	Z+42, r1	; 0x2a
    ef54:	13 a6       	std	Z+43, r1	; 0x2b
    ef56:	14 a6       	std	Z+44, r1	; 0x2c
    ef58:	15 a6       	std	Z+45, r1	; 0x2d
    ef5a:	16 a6       	std	Z+46, r1	; 0x2e
    ef5c:	17 a6       	std	Z+47, r1	; 0x2f
    ef5e:	11 8a       	std	Z+17, r1	; 0x11
    ef60:	10 8a       	std	Z+16, r1	; 0x10
    ef62:	13 8a       	std	Z+19, r1	; 0x13
    ef64:	12 8a       	std	Z+18, r1	; 0x12
    ef66:	10 8e       	std	Z+24, r1	; 0x18
    ef68:	11 8e       	std	Z+25, r1	; 0x19
    ef6a:	12 8e       	std	Z+26, r1	; 0x1a
    ef6c:	13 8e       	std	Z+27, r1	; 0x1b
    ef6e:	80 e0       	ldi	r24, 0x00	; 0
    ef70:	90 e4       	ldi	r25, 0x40	; 64
    ef72:	a0 e0       	ldi	r26, 0x00	; 0
    ef74:	b0 e0       	ldi	r27, 0x00	; 0
    ef76:	80 87       	std	Z+8, r24	; 0x08
    ef78:	91 87       	std	Z+9, r25	; 0x09
    ef7a:	a2 87       	std	Z+10, r26	; 0x0a
    ef7c:	b3 87       	std	Z+11, r27	; 0x0b
    ef7e:	e1 2c       	mov	r14, r1
    ef80:	f1 2c       	mov	r15, r1
    ef82:	62 c0       	rjmp	.+196    	; 0xf048 <stat+0x128>
    ef84:	66 ea       	ldi	r22, 0xA6	; 166
    ef86:	78 e0       	ldi	r23, 0x08	; 8
    ef88:	c6 01       	movw	r24, r12
    ef8a:	0e 94 8b 30 	call	0x6116	; 0x6116 <MATCH>
    ef8e:	89 2b       	or	r24, r25
    ef90:	c9 f6       	brne	.-78     	; 0xef44 <stat+0x24>
    ef92:	6d ef       	ldi	r22, 0xFD	; 253
    ef94:	72 e1       	ldi	r23, 0x12	; 18
    ef96:	c6 01       	movw	r24, r12
    ef98:	0e 94 8b 30 	call	0x6116	; 0x6116 <MATCH>
    ef9c:	7c 01       	movw	r14, r24
    ef9e:	89 2b       	or	r24, r25
    efa0:	89 f6       	brne	.-94     	; 0xef44 <stat+0x24>
    efa2:	be 01       	movw	r22, r28
    efa4:	6f 5f       	subi	r22, 0xFF	; 255
    efa6:	7f 4f       	sbci	r23, 0xFF	; 255
    efa8:	c6 01       	movw	r24, r12
    efaa:	0e 94 43 62 	call	0xc486	; 0xc486 <f_stat>
    efae:	00 97       	sbiw	r24, 0x00	; 0
    efb0:	a9 f0       	breq	.+42     	; 0xefdc <stat+0xbc>
    efb2:	84 31       	cpi	r24, 0x14	; 20
    efb4:	91 05       	cpc	r25, r1
    efb6:	40 f4       	brcc	.+16     	; 0xefc8 <stat+0xa8>
    efb8:	fc 01       	movw	r30, r24
    efba:	ea 55       	subi	r30, 0x5A	; 90
    efbc:	f4 4f       	sbci	r31, 0xF4	; 244
    efbe:	80 81       	ld	r24, Z
    efc0:	08 2e       	mov	r0, r24
    efc2:	00 0c       	add	r0, r0
    efc4:	99 0b       	sbc	r25, r25
    efc6:	02 c0       	rjmp	.+4      	; 0xefcc <stat+0xac>
    efc8:	83 e2       	ldi	r24, 0x23	; 35
    efca:	90 e0       	ldi	r25, 0x00	; 0
    efcc:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    efd0:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    efd4:	ee 24       	eor	r14, r14
    efd6:	ea 94       	dec	r14
    efd8:	fe 2c       	mov	r15, r14
    efda:	36 c0       	rjmp	.+108    	; 0xf048 <stat+0x128>
    efdc:	89 81       	ldd	r24, Y+1	; 0x01
    efde:	9a 81       	ldd	r25, Y+2	; 0x02
    efe0:	ab 81       	ldd	r26, Y+3	; 0x03
    efe2:	bc 81       	ldd	r27, Y+4	; 0x04
    efe4:	f8 01       	movw	r30, r16
    efe6:	80 8f       	std	Z+24, r24	; 0x18
    efe8:	91 8f       	std	Z+25, r25	; 0x19
    efea:	a2 8f       	std	Z+26, r26	; 0x1a
    efec:	b3 8f       	std	Z+27, r27	; 0x1b
    efee:	6f 81       	ldd	r22, Y+7	; 0x07
    eff0:	78 85       	ldd	r23, Y+8	; 0x08
    eff2:	8d 81       	ldd	r24, Y+5	; 0x05
    eff4:	9e 81       	ldd	r25, Y+6	; 0x06
    eff6:	50 df       	rcall	.-352    	; 0xee98 <fat_time_to_unix>
    eff8:	f8 01       	movw	r30, r16
    effa:	64 a3       	std	Z+36, r22	; 0x24
    effc:	75 a3       	std	Z+37, r23	; 0x25
    effe:	86 a3       	std	Z+38, r24	; 0x26
    f000:	97 a3       	std	Z+39, r25	; 0x27
    f002:	60 a7       	std	Z+40, r22	; 0x28
    f004:	71 a7       	std	Z+41, r23	; 0x29
    f006:	82 a7       	std	Z+42, r24	; 0x2a
    f008:	93 a7       	std	Z+43, r25	; 0x2b
    f00a:	64 a7       	std	Z+44, r22	; 0x2c
    f00c:	75 a7       	std	Z+45, r23	; 0x2d
    f00e:	86 a7       	std	Z+46, r24	; 0x2e
    f010:	97 a7       	std	Z+47, r25	; 0x2f
    f012:	29 85       	ldd	r18, Y+9	; 0x09
    f014:	20 fd       	sbrc	r18, 0
    f016:	03 c0       	rjmp	.+6      	; 0xf01e <stat+0xfe>
    f018:	8f ef       	ldi	r24, 0xFF	; 255
    f01a:	91 e0       	ldi	r25, 0x01	; 1
    f01c:	02 c0       	rjmp	.+4      	; 0xf022 <stat+0x102>
    f01e:	8d e6       	ldi	r24, 0x6D	; 109
    f020:	91 e0       	ldi	r25, 0x01	; 1
    f022:	48 ee       	ldi	r20, 0xE8	; 232
    f024:	53 e0       	ldi	r21, 0x03	; 3
    f026:	f8 01       	movw	r30, r16
    f028:	51 8b       	std	Z+17, r21	; 0x11
    f02a:	40 8b       	std	Z+16, r20	; 0x10
    f02c:	53 8b       	std	Z+19, r21	; 0x13
    f02e:	42 8b       	std	Z+18, r20	; 0x12
    f030:	24 ff       	sbrs	r18, 4
    f032:	02 c0       	rjmp	.+4      	; 0xf038 <stat+0x118>
    f034:	90 64       	ori	r25, 0x40	; 64
    f036:	01 c0       	rjmp	.+2      	; 0xf03a <stat+0x11a>
    f038:	90 68       	ori	r25, 0x80	; 128
    f03a:	a0 e0       	ldi	r26, 0x00	; 0
    f03c:	b0 e0       	ldi	r27, 0x00	; 0
    f03e:	f8 01       	movw	r30, r16
    f040:	80 87       	std	Z+8, r24	; 0x08
    f042:	91 87       	std	Z+9, r25	; 0x09
    f044:	a2 87       	std	Z+10, r26	; 0x0a
    f046:	b3 87       	std	Z+11, r27	; 0x0b
    f048:	c7 01       	movw	r24, r14
    f04a:	ca 5e       	subi	r28, 0xEA	; 234
    f04c:	de 4f       	sbci	r29, 0xFE	; 254
    f04e:	e8 e0       	ldi	r30, 0x08	; 8
    f050:	0c 94 2f e3 	jmp	0x1c65e	; 0x1c65e <__epilogue_restores__+0x14>

0000f054 <unix_time_to_fat>:
    f054:	a4 e0       	ldi	r26, 0x04	; 4
    f056:	b0 e0       	ldi	r27, 0x00	; 0
    f058:	e0 e3       	ldi	r30, 0x30	; 48
    f05a:	f8 e7       	ldi	r31, 0x78	; 120
    f05c:	0c 94 15 e3 	jmp	0x1c62a	; 0x1c62a <__prologue_saves__+0x18>
    f060:	69 83       	std	Y+1, r22	; 0x01
    f062:	7a 83       	std	Y+2, r23	; 0x02
    f064:	8b 83       	std	Y+3, r24	; 0x03
    f066:	9c 83       	std	Y+4, r25	; 0x04
    f068:	7a 01       	movw	r14, r20
    f06a:	89 01       	movw	r16, r18
    f06c:	ce 01       	movw	r24, r28
    f06e:	01 96       	adiw	r24, 0x01	; 1
    f070:	0e 94 fa 35 	call	0x6bf4	; 0x6bf4 <gmtime>
    f074:	fc 01       	movw	r30, r24
    f076:	22 85       	ldd	r18, Z+10	; 0x0a
    f078:	33 85       	ldd	r19, Z+11	; 0x0b
    f07a:	20 55       	subi	r18, 0x50	; 80
    f07c:	31 09       	sbc	r19, r1
    f07e:	c9 01       	movw	r24, r18
    f080:	98 2f       	mov	r25, r24
    f082:	88 27       	eor	r24, r24
    f084:	99 0f       	add	r25, r25
    f086:	20 85       	ldd	r18, Z+8	; 0x08
    f088:	31 85       	ldd	r19, Z+9	; 0x09
    f08a:	2f 5f       	subi	r18, 0xFF	; 255
    f08c:	3f 4f       	sbci	r19, 0xFF	; 255
    f08e:	45 e0       	ldi	r20, 0x05	; 5
    f090:	22 0f       	add	r18, r18
    f092:	33 1f       	adc	r19, r19
    f094:	4a 95       	dec	r20
    f096:	e1 f7       	brne	.-8      	; 0xf090 <unix_time_to_fat+0x3c>
    f098:	28 2b       	or	r18, r24
    f09a:	39 2b       	or	r19, r25
    f09c:	86 81       	ldd	r24, Z+6	; 0x06
    f09e:	97 81       	ldd	r25, Z+7	; 0x07
    f0a0:	28 2b       	or	r18, r24
    f0a2:	39 2b       	or	r19, r25
    f0a4:	d7 01       	movw	r26, r14
    f0a6:	2d 93       	st	X+, r18
    f0a8:	3c 93       	st	X, r19
    f0aa:	84 81       	ldd	r24, Z+4	; 0x04
    f0ac:	20 e0       	ldi	r18, 0x00	; 0
    f0ae:	30 e0       	ldi	r19, 0x00	; 0
    f0b0:	38 2f       	mov	r19, r24
    f0b2:	33 0f       	add	r19, r19
    f0b4:	33 0f       	add	r19, r19
    f0b6:	33 0f       	add	r19, r19
    f0b8:	82 81       	ldd	r24, Z+2	; 0x02
    f0ba:	93 81       	ldd	r25, Z+3	; 0x03
    f0bc:	55 e0       	ldi	r21, 0x05	; 5
    f0be:	88 0f       	add	r24, r24
    f0c0:	99 1f       	adc	r25, r25
    f0c2:	5a 95       	dec	r21
    f0c4:	e1 f7       	brne	.-8      	; 0xf0be <unix_time_to_fat+0x6a>
    f0c6:	82 2b       	or	r24, r18
    f0c8:	93 2b       	or	r25, r19
    f0ca:	20 81       	ld	r18, Z
    f0cc:	31 81       	ldd	r19, Z+1	; 0x01
    f0ce:	36 95       	lsr	r19
    f0d0:	27 95       	ror	r18
    f0d2:	82 2b       	or	r24, r18
    f0d4:	93 2b       	or	r25, r19
    f0d6:	f8 01       	movw	r30, r16
    f0d8:	91 83       	std	Z+1, r25	; 0x01
    f0da:	80 83       	st	Z, r24
    f0dc:	24 96       	adiw	r28, 0x04	; 4
    f0de:	e6 e0       	ldi	r30, 0x06	; 6
    f0e0:	0c 94 31 e3 	jmp	0x1c662	; 0x1c662 <__epilogue_restores__+0x18>

0000f0e4 <utime>:
    f0e4:	aa e1       	ldi	r26, 0x1A	; 26
    f0e6:	b1 e0       	ldi	r27, 0x01	; 1
    f0e8:	e8 e7       	ldi	r30, 0x78	; 120
    f0ea:	f8 e7       	ldi	r31, 0x78	; 120
    f0ec:	0c 94 17 e3 	jmp	0x1c62e	; 0x1c62e <__prologue_saves__+0x1c>
    f0f0:	8c 01       	movw	r16, r24
    f0f2:	61 15       	cp	r22, r1
    f0f4:	71 05       	cpc	r23, r1
    f0f6:	31 f0       	breq	.+12     	; 0xf104 <utime+0x20>
    f0f8:	fb 01       	movw	r30, r22
    f0fa:	64 81       	ldd	r22, Z+4	; 0x04
    f0fc:	75 81       	ldd	r23, Z+5	; 0x05
    f0fe:	86 81       	ldd	r24, Z+6	; 0x06
    f100:	97 81       	ldd	r25, Z+7	; 0x07
    f102:	04 c0       	rjmp	.+8      	; 0xf10c <utime+0x28>
    f104:	80 e0       	ldi	r24, 0x00	; 0
    f106:	90 e0       	ldi	r25, 0x00	; 0
    f108:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <time>
    f10c:	9e 01       	movw	r18, r28
    f10e:	29 5e       	subi	r18, 0xE9	; 233
    f110:	3e 4f       	sbci	r19, 0xFE	; 254
    f112:	ae 01       	movw	r20, r28
    f114:	47 5e       	subi	r20, 0xE7	; 231
    f116:	5e 4f       	sbci	r21, 0xFE	; 254
    f118:	9d df       	rcall	.-198    	; 0xf054 <unix_time_to_fat>
    f11a:	c7 5e       	subi	r28, 0xE7	; 231
    f11c:	de 4f       	sbci	r29, 0xFE	; 254
    f11e:	88 81       	ld	r24, Y
    f120:	99 81       	ldd	r25, Y+1	; 0x01
    f122:	c9 51       	subi	r28, 0x19	; 25
    f124:	d1 40       	sbci	r29, 0x01	; 1
    f126:	9e 83       	std	Y+6, r25	; 0x06
    f128:	8d 83       	std	Y+5, r24	; 0x05
    f12a:	c9 5e       	subi	r28, 0xE9	; 233
    f12c:	de 4f       	sbci	r29, 0xFE	; 254
    f12e:	88 81       	ld	r24, Y
    f130:	99 81       	ldd	r25, Y+1	; 0x01
    f132:	c7 51       	subi	r28, 0x17	; 23
    f134:	d1 40       	sbci	r29, 0x01	; 1
    f136:	98 87       	std	Y+8, r25	; 0x08
    f138:	8f 83       	std	Y+7, r24	; 0x07
    f13a:	be 01       	movw	r22, r28
    f13c:	6f 5f       	subi	r22, 0xFF	; 255
    f13e:	7f 4f       	sbci	r23, 0xFF	; 255
    f140:	c8 01       	movw	r24, r16
    f142:	0e 94 5a 66 	call	0xccb4	; 0xccb4 <f_utime>
    f146:	84 31       	cpi	r24, 0x14	; 20
    f148:	91 05       	cpc	r25, r1
    f14a:	40 f4       	brcc	.+16     	; 0xf15c <utime+0x78>
    f14c:	fc 01       	movw	r30, r24
    f14e:	ea 55       	subi	r30, 0x5A	; 90
    f150:	f4 4f       	sbci	r31, 0xF4	; 244
    f152:	80 81       	ld	r24, Z
    f154:	08 2e       	mov	r0, r24
    f156:	00 0c       	add	r0, r0
    f158:	99 0b       	sbc	r25, r25
    f15a:	02 c0       	rjmp	.+4      	; 0xf160 <utime+0x7c>
    f15c:	83 e2       	ldi	r24, 0x23	; 35
    f15e:	90 e0       	ldi	r25, 0x00	; 0
    f160:	c6 5e       	subi	r28, 0xE6	; 230
    f162:	de 4f       	sbci	r29, 0xFE	; 254
    f164:	e4 e0       	ldi	r30, 0x04	; 4
    f166:	0c 94 33 e3 	jmp	0x1c666	; 0x1c666 <__epilogue_restores__+0x1c>

0000f16a <fileno_to_fatfs>:
    f16a:	83 30       	cpi	r24, 0x03	; 3
    f16c:	91 05       	cpc	r25, r1
    f16e:	48 f4       	brcc	.+18     	; 0xf182 <fileno_to_fatfs+0x18>
    f170:	89 e0       	ldi	r24, 0x09	; 9
    f172:	90 e0       	ldi	r25, 0x00	; 0
    f174:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    f178:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    f17c:	80 e0       	ldi	r24, 0x00	; 0
    f17e:	90 e0       	ldi	r25, 0x00	; 0
    f180:	08 95       	ret
    f182:	60 dc       	rcall	.-1856   	; 0xea44 <fileno_to_stream>
    f184:	00 97       	sbiw	r24, 0x00	; 0
    f186:	d1 f3       	breq	.-12     	; 0xf17c <fileno_to_fatfs+0x12>
    f188:	fc 01       	movw	r30, r24
    f18a:	84 85       	ldd	r24, Z+12	; 0x0c
    f18c:	95 85       	ldd	r25, Z+13	; 0x0d
    f18e:	00 97       	sbiw	r24, 0x00	; 0
    f190:	79 f3       	breq	.-34     	; 0xf170 <fileno_to_fatfs+0x6>
    f192:	08 95       	ret

0000f194 <ftell>:
    f194:	10 92 ca 1c 	sts	0x1CCA, r1	; 0x801cca <errno+0x1>
    f198:	10 92 c9 1c 	sts	0x1CC9, r1	; 0x801cc9 <errno>
    f19c:	37 dc       	rcall	.-1938   	; 0xea0c <fileno>
    f19e:	83 30       	cpi	r24, 0x03	; 3
    f1a0:	91 05       	cpc	r25, r1
    f1a2:	48 f0       	brcs	.+18     	; 0xf1b6 <ftell+0x22>
    f1a4:	e2 df       	rcall	.-60     	; 0xf16a <fileno_to_fatfs>
    f1a6:	00 97       	sbiw	r24, 0x00	; 0
    f1a8:	51 f4       	brne	.+20     	; 0xf1be <ftell+0x2a>
    f1aa:	89 e0       	ldi	r24, 0x09	; 9
    f1ac:	90 e0       	ldi	r25, 0x00	; 0
    f1ae:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    f1b2:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    f1b6:	6f ef       	ldi	r22, 0xFF	; 255
    f1b8:	7f ef       	ldi	r23, 0xFF	; 255
    f1ba:	cb 01       	movw	r24, r22
    f1bc:	08 95       	ret
    f1be:	fc 01       	movw	r30, r24
    f1c0:	60 89       	ldd	r22, Z+16	; 0x10
    f1c2:	71 89       	ldd	r23, Z+17	; 0x11
    f1c4:	82 89       	ldd	r24, Z+18	; 0x12
    f1c6:	93 89       	ldd	r25, Z+19	; 0x13
    f1c8:	08 95       	ret

0000f1ca <lseek>:
    f1ca:	a3 e0       	ldi	r26, 0x03	; 3
    f1cc:	b0 e0       	ldi	r27, 0x00	; 0
    f1ce:	eb ee       	ldi	r30, 0xEB	; 235
    f1d0:	f8 e7       	ldi	r31, 0x78	; 120
    f1d2:	0c 94 11 e3 	jmp	0x1c622	; 0x1c622 <__prologue_saves__+0x10>
    f1d6:	5c 01       	movw	r10, r24
    f1d8:	6a 01       	movw	r12, r20
    f1da:	7b 01       	movw	r14, r22
    f1dc:	89 01       	movw	r16, r18
    f1de:	10 92 ca 1c 	sts	0x1CCA, r1	; 0x801cca <errno+0x1>
    f1e2:	10 92 c9 1c 	sts	0x1CC9, r1	; 0x801cc9 <errno>
    f1e6:	c1 df       	rcall	.-126    	; 0xf16a <fileno_to_fatfs>
    f1e8:	ec 01       	movw	r28, r24
    f1ea:	89 2b       	or	r24, r25
    f1ec:	19 f4       	brne	.+6      	; 0xf1f4 <lseek+0x2a>
    f1ee:	88 e1       	ldi	r24, 0x18	; 24
    f1f0:	90 e0       	ldi	r25, 0x00	; 0
    f1f2:	26 c0       	rjmp	.+76     	; 0xf240 <lseek+0x76>
    f1f4:	83 e0       	ldi	r24, 0x03	; 3
    f1f6:	a8 16       	cp	r10, r24
    f1f8:	b1 04       	cpc	r11, r1
    f1fa:	d0 f1       	brcs	.+116    	; 0xf270 <lseek+0xa6>
    f1fc:	c5 01       	movw	r24, r10
    f1fe:	22 dc       	rcall	.-1980   	; 0xea44 <fileno_to_stream>
    f200:	fc 01       	movw	r30, r24
    f202:	93 81       	ldd	r25, Z+3	; 0x03
    f204:	90 64       	ori	r25, 0x40	; 64
    f206:	93 83       	std	Z+3, r25	; 0x03
    f208:	02 30       	cpi	r16, 0x02	; 2
    f20a:	11 05       	cpc	r17, r1
    f20c:	a9 f5       	brne	.+106    	; 0xf278 <lseek+0xae>
    f20e:	8a 85       	ldd	r24, Y+10	; 0x0a
    f210:	9b 85       	ldd	r25, Y+11	; 0x0b
    f212:	ac 85       	ldd	r26, Y+12	; 0x0c
    f214:	bd 85       	ldd	r27, Y+13	; 0x0d
    f216:	c8 0e       	add	r12, r24
    f218:	d9 1e       	adc	r13, r25
    f21a:	ea 1e       	adc	r14, r26
    f21c:	fb 1e       	adc	r15, r27
    f21e:	b7 01       	movw	r22, r14
    f220:	a6 01       	movw	r20, r12
    f222:	ce 01       	movw	r24, r28
    f224:	0e 94 be 5e 	call	0xbd7c	; 0xbd7c <f_lseek>
    f228:	00 97       	sbiw	r24, 0x00	; 0
    f22a:	79 f0       	breq	.+30     	; 0xf24a <lseek+0x80>
    f22c:	84 31       	cpi	r24, 0x14	; 20
    f22e:	91 05       	cpc	r25, r1
    f230:	58 f5       	brcc	.+86     	; 0xf288 <lseek+0xbe>
    f232:	fc 01       	movw	r30, r24
    f234:	ea 55       	subi	r30, 0x5A	; 90
    f236:	f4 4f       	sbci	r31, 0xF4	; 244
    f238:	80 81       	ld	r24, Z
    f23a:	08 2e       	mov	r0, r24
    f23c:	00 0c       	add	r0, r0
    f23e:	99 0b       	sbc	r25, r25
    f240:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    f244:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    f248:	13 c0       	rjmp	.+38     	; 0xf270 <lseek+0xa6>
    f24a:	68 89       	ldd	r22, Y+16	; 0x10
    f24c:	79 89       	ldd	r23, Y+17	; 0x11
    f24e:	8a 89       	ldd	r24, Y+18	; 0x12
    f250:	9b 89       	ldd	r25, Y+19	; 0x13
    f252:	c6 16       	cp	r12, r22
    f254:	d7 06       	cpc	r13, r23
    f256:	e8 06       	cpc	r14, r24
    f258:	f9 06       	cpc	r15, r25
    f25a:	c9 f0       	breq	.+50     	; 0xf28e <lseek+0xc4>
    f25c:	86 ef       	ldi	r24, 0xF6	; 246
    f25e:	9b e0       	ldi	r25, 0x0B	; 11
    f260:	a0 e0       	ldi	r26, 0x00	; 0
    f262:	ed b7       	in	r30, 0x3d	; 61
    f264:	fe b7       	in	r31, 0x3e	; 62
    f266:	81 83       	std	Z+1, r24	; 0x01
    f268:	92 83       	std	Z+2, r25	; 0x02
    f26a:	a3 83       	std	Z+3, r26	; 0x03
    f26c:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    f270:	6f ef       	ldi	r22, 0xFF	; 255
    f272:	7f ef       	ldi	r23, 0xFF	; 255
    f274:	cb 01       	movw	r24, r22
    f276:	0b c0       	rjmp	.+22     	; 0xf28e <lseek+0xc4>
    f278:	01 30       	cpi	r16, 0x01	; 1
    f27a:	11 05       	cpc	r17, r1
    f27c:	81 f6       	brne	.-96     	; 0xf21e <lseek+0x54>
    f27e:	88 89       	ldd	r24, Y+16	; 0x10
    f280:	99 89       	ldd	r25, Y+17	; 0x11
    f282:	aa 89       	ldd	r26, Y+18	; 0x12
    f284:	bb 89       	ldd	r27, Y+19	; 0x13
    f286:	c7 cf       	rjmp	.-114    	; 0xf216 <lseek+0x4c>
    f288:	83 e2       	ldi	r24, 0x23	; 35
    f28a:	90 e0       	ldi	r25, 0x00	; 0
    f28c:	d9 cf       	rjmp	.-78     	; 0xf240 <lseek+0x76>
    f28e:	cd b7       	in	r28, 0x3d	; 61
    f290:	de b7       	in	r29, 0x3e	; 62
    f292:	23 96       	adiw	r28, 0x03	; 3
    f294:	ea e0       	ldi	r30, 0x0A	; 10
    f296:	0c 94 2d e3 	jmp	0x1c65a	; 0x1c65a <__epilogue_restores__+0x10>

0000f29a <fseek>:
    f29a:	cf 92       	push	r12
    f29c:	df 92       	push	r13
    f29e:	ef 92       	push	r14
    f2a0:	ff 92       	push	r15
    f2a2:	cf 93       	push	r28
    f2a4:	df 93       	push	r29
    f2a6:	6a 01       	movw	r12, r20
    f2a8:	7b 01       	movw	r14, r22
    f2aa:	e9 01       	movw	r28, r18
    f2ac:	af db       	rcall	.-2210   	; 0xea0c <fileno>
    f2ae:	97 fd       	sbrc	r25, 7
    f2b0:	12 c0       	rjmp	.+36     	; 0xf2d6 <fseek+0x3c>
    f2b2:	9e 01       	movw	r18, r28
    f2b4:	b7 01       	movw	r22, r14
    f2b6:	a6 01       	movw	r20, r12
    f2b8:	88 df       	rcall	.-240    	; 0xf1ca <lseek>
    f2ba:	21 e0       	ldi	r18, 0x01	; 1
    f2bc:	30 e0       	ldi	r19, 0x00	; 0
    f2be:	6f 3f       	cpi	r22, 0xFF	; 255
    f2c0:	7f 4f       	sbci	r23, 0xFF	; 255
    f2c2:	8f 4f       	sbci	r24, 0xFF	; 255
    f2c4:	9f 4f       	sbci	r25, 0xFF	; 255
    f2c6:	11 f0       	breq	.+4      	; 0xf2cc <fseek+0x32>
    f2c8:	20 e0       	ldi	r18, 0x00	; 0
    f2ca:	30 e0       	ldi	r19, 0x00	; 0
    f2cc:	88 27       	eor	r24, r24
    f2ce:	99 27       	eor	r25, r25
    f2d0:	82 1b       	sub	r24, r18
    f2d2:	93 0b       	sbc	r25, r19
    f2d4:	02 c0       	rjmp	.+4      	; 0xf2da <fseek+0x40>
    f2d6:	8f ef       	ldi	r24, 0xFF	; 255
    f2d8:	9f ef       	ldi	r25, 0xFF	; 255
    f2da:	df 91       	pop	r29
    f2dc:	cf 91       	pop	r28
    f2de:	ff 90       	pop	r15
    f2e0:	ef 90       	pop	r14
    f2e2:	df 90       	pop	r13
    f2e4:	cf 90       	pop	r12
    f2e6:	08 95       	ret

0000f2e8 <read>:
///
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t read(int fd, const void *buf, size_t count)
{
    f2e8:	a2 e0       	ldi	r26, 0x02	; 2
    f2ea:	b0 e0       	ldi	r27, 0x00	; 0
    f2ec:	ea e7       	ldi	r30, 0x7A	; 122
    f2ee:	f9 e7       	ldi	r31, 0x79	; 121
    f2f0:	0c 94 11 e3 	jmp	0x1c622	; 0x1c622 <__prologue_saves__+0x10>
    f2f4:	5c 01       	movw	r10, r24
    f2f6:	8b 01       	movw	r16, r22
    f2f8:	6a 01       	movw	r12, r20
    int ret;
    FIL *fh;
    FILE *stream;

//FIXME
    *(char *) buf = 0;
    f2fa:	fb 01       	movw	r30, r22
    f2fc:	10 82       	st	Z, r1

    errno = 0;
    f2fe:	10 92 ca 1c 	sts	0x1CCA, r1	; 0x801cca <errno+0x1>
    f302:	10 92 c9 1c 	sts	0x1CC9, r1	; 0x801cc9 <errno>

// TTY read function
// FIXME should we really be blocking ???
    stream = fileno_to_stream(fd);
    f306:	9e db       	rcall	.-2244   	; 0xea44 <fileno_to_stream>
    f308:	7c 01       	movw	r14, r24
    if(stream == stdin)
    f30a:	80 91 cb 1c 	lds	r24, 0x1CCB	; 0x801ccb <__iob>
    f30e:	90 91 cc 1c 	lds	r25, 0x1CCC	; 0x801ccc <__iob+0x1>
    f312:	e8 16       	cp	r14, r24
    f314:	f9 06       	cpc	r15, r25
    f316:	c9 f4       	brne	.+50     	; 0xf34a <read+0x62>
    {
        char *ptr = (char *) buf;
// ungetc is undefined for read
        stream->flags |= __SUNGET;
    f318:	f7 01       	movw	r30, r14
    f31a:	83 81       	ldd	r24, Z+3	; 0x03
    f31c:	80 64       	ori	r24, 0x40	; 64
    f31e:	83 83       	std	Z+3, r24	; 0x03
        size = 0;
    f320:	1a 82       	std	Y+2, r1	; 0x02
    f322:	19 82       	std	Y+1, r1	; 0x01
    f324:	c0 0e       	add	r12, r16
    f326:	d1 1e       	adc	r13, r17
        while(count--)
    f328:	0c 15       	cp	r16, r12
    f32a:	1d 05       	cpc	r17, r13
    f32c:	09 f4       	brne	.+2      	; 0xf330 <read+0x48>
    f32e:	3d c0       	rjmp	.+122    	; 0xf3aa <read+0xc2>
        {
            ret = fgetc(stream);
    f330:	c7 01       	movw	r24, r14
    f332:	48 da       	rcall	.-2928   	; 0xe7c4 <fgetc>
            if(ret < 0)
    f334:	97 fd       	sbrc	r25, 7
    f336:	39 c0       	rjmp	.+114    	; 0xf3aa <read+0xc2>
                break;

            *ptr++ = ret;
    f338:	f8 01       	movw	r30, r16
    f33a:	81 93       	st	Z+, r24
    f33c:	8f 01       	movw	r16, r30
            ++size;
    f33e:	89 81       	ldd	r24, Y+1	; 0x01
    f340:	9a 81       	ldd	r25, Y+2	; 0x02
    f342:	01 96       	adiw	r24, 0x01	; 1
    f344:	9a 83       	std	Y+2, r25	; 0x02
    f346:	89 83       	std	Y+1, r24	; 0x01
    f348:	ef cf       	rjmp	.-34     	; 0xf328 <read+0x40>
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    f34a:	80 91 cd 1c 	lds	r24, 0x1CCD	; 0x801ccd <__iob+0x2>
    f34e:	90 91 ce 1c 	lds	r25, 0x1CCE	; 0x801cce <__iob+0x3>
    f352:	e8 16       	cp	r14, r24
    f354:	f9 06       	cpc	r15, r25
    f356:	71 f1       	breq	.+92     	; 0xf3b4 <read+0xcc>
    f358:	80 91 cf 1c 	lds	r24, 0x1CCF	; 0x801ccf <__iob+0x4>
    f35c:	90 91 d0 1c 	lds	r25, 0x1CD0	; 0x801cd0 <__iob+0x5>
    f360:	e8 16       	cp	r14, r24
    f362:	f9 06       	cpc	r15, r25
    {
        return(-1);
    }

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f364:	39 f1       	breq	.+78     	; 0xf3b4 <read+0xcc>
    f366:	c5 01       	movw	r24, r10
    f368:	00 df       	rcall	.-512    	; 0xf16a <fileno_to_fatfs>
    if ( fh == NULL )
    f36a:	00 97       	sbiw	r24, 0x00	; 0
    f36c:	19 f4       	brne	.+6      	; 0xf374 <read+0x8c>
    {
        errno = EBADF;
    f36e:	89 e0       	ldi	r24, 0x09	; 9
    f370:	90 e0       	ldi	r25, 0x00	; 0
    f372:	16 c0       	rjmp	.+44     	; 0xf3a0 <read+0xb8>
        return(-1);
    }

    res = f_read(fh, (void *) buf, bytes, &size);
    f374:	9e 01       	movw	r18, r28
    f376:	2f 5f       	subi	r18, 0xFF	; 255
    f378:	3f 4f       	sbci	r19, 0xFF	; 255
    f37a:	a6 01       	movw	r20, r12
    f37c:	b8 01       	movw	r22, r16
    f37e:	0e 94 b2 59 	call	0xb364	; 0xb364 <f_read>
    if(res != FR_OK)
    f382:	00 97       	sbiw	r24, 0x00	; 0
    f384:	91 f0       	breq	.+36     	; 0xf3aa <read+0xc2>
    f386:	84 31       	cpi	r24, 0x14	; 20
    f388:	91 05       	cpc	r25, r1
    f38a:	40 f4       	brcc	.+16     	; 0xf39c <read+0xb4>
    f38c:	fc 01       	movw	r30, r24
    f38e:	ea 55       	subi	r30, 0x5A	; 90
    f390:	f4 4f       	sbci	r31, 0xF4	; 244
    f392:	80 81       	ld	r24, Z
    f394:	08 2e       	mov	r0, r24
    f396:	00 0c       	add	r0, r0
    f398:	99 0b       	sbc	r25, r25
    f39a:	02 c0       	rjmp	.+4      	; 0xf3a0 <read+0xb8>
    f39c:	83 e2       	ldi	r24, 0x23	; 35
    f39e:	90 e0       	ldi	r25, 0x00	; 0
    {
        errno = fatfs_to_errno(res);
    f3a0:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    f3a4:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    f3a8:	05 c0       	rjmp	.+10     	; 0xf3b4 <read+0xcc>
        return(-1);
    }
    return ((ssize_t) size);
    f3aa:	69 81       	ldd	r22, Y+1	; 0x01
    f3ac:	7a 81       	ldd	r23, Y+2	; 0x02
    f3ae:	80 e0       	ldi	r24, 0x00	; 0
    f3b0:	90 e0       	ldi	r25, 0x00	; 0
    f3b2:	03 c0       	rjmp	.+6      	; 0xf3ba <read+0xd2>
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    {
        return(-1);
    f3b4:	6f ef       	ldi	r22, 0xFF	; 255
    f3b6:	7f ef       	ldi	r23, 0xFF	; 255
    f3b8:	cb 01       	movw	r24, r22
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    f3ba:	22 96       	adiw	r28, 0x02	; 2
    f3bc:	ea e0       	ldi	r30, 0x0A	; 10
    f3be:	0c 94 2d e3 	jmp	0x1c65a	; 0x1c65a <__epilogue_restores__+0x10>

0000f3c2 <fread>:
///
/// @return count on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    f3c2:	0f 93       	push	r16
    f3c4:	1f 93       	push	r17
    f3c6:	cf 93       	push	r28
    f3c8:	df 93       	push	r29
    f3ca:	ec 01       	movw	r28, r24
    f3cc:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    f3ce:	64 9f       	mul	r22, r20
    f3d0:	80 01       	movw	r16, r0
    f3d2:	65 9f       	mul	r22, r21
    f3d4:	10 0d       	add	r17, r0
    f3d6:	74 9f       	mul	r23, r20
    f3d8:	10 0d       	add	r17, r0
    f3da:	11 24       	eor	r1, r1
    int fn = fileno(stream);
    f3dc:	17 db       	rcall	.-2514   	; 0xea0c <fileno>
    ssize_t ret;

// read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    f3de:	a8 01       	movw	r20, r16
    f3e0:	be 01       	movw	r22, r28
    f3e2:	82 df       	rcall	.-252    	; 0xf2e8 <read>
    if(ret < 0)
    f3e4:	97 fd       	sbrc	r25, 7
    f3e6:	02 c0       	rjmp	.+4      	; 0xf3ec <fread+0x2a>
        return(0);

    return((size_t) ret);
    f3e8:	cb 01       	movw	r24, r22
    f3ea:	02 c0       	rjmp	.+4      	; 0xf3f0 <fread+0x2e>
    ssize_t ret;

// read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    if(ret < 0)
        return(0);
    f3ec:	80 e0       	ldi	r24, 0x00	; 0
    f3ee:	90 e0       	ldi	r25, 0x00	; 0

    return((size_t) ret);
}
    f3f0:	df 91       	pop	r29
    f3f2:	cf 91       	pop	r28
    f3f4:	1f 91       	pop	r17
    f3f6:	0f 91       	pop	r16
    f3f8:	08 95       	ret

0000f3fa <syncfs>:
/// @param[in] fd: POSIX fileno to sync.
/// @return 0.
/// @return -1 on error witrh errno set.
MEMSPACE
int syncfs(int fd)
{
    f3fa:	cf 93       	push	r28
    f3fc:	df 93       	push	r29
    FIL *fh;
    FRESULT res;
    FILE *stream;

    errno = 0;
    f3fe:	10 92 ca 1c 	sts	0x1CCA, r1	; 0x801cca <errno+0x1>
    f402:	10 92 c9 1c 	sts	0x1CC9, r1	; 0x801cc9 <errno>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f406:	83 30       	cpi	r24, 0x03	; 3
    f408:	91 05       	cpc	r25, r1
    f40a:	18 f4       	brcc	.+6      	; 0xf412 <syncfs+0x18>

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    if(fh == NULL)
    {
        errno = EBADF;
    f40c:	89 e0       	ldi	r24, 0x09	; 9
    f40e:	90 e0       	ldi	r25, 0x00	; 0
    f410:	18 c0       	rjmp	.+48     	; 0xf442 <syncfs+0x48>
    f412:	ec 01       	movw	r28, r24
    if(isatty(fd))
    {
        errno = EBADF;
        return(-1);
    }
    stream = fileno_to_stream(fd);
    f414:	17 db       	rcall	.-2514   	; 0xea44 <fileno_to_stream>
    f416:	fc 01       	movw	r30, r24
// reset unget on sync
    stream->flags |= __SUNGET;
    f418:	93 81       	ldd	r25, Z+3	; 0x03
    f41a:	90 64       	ori	r25, 0x40	; 64
    f41c:	93 83       	std	Z+3, r25	; 0x03

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f41e:	ce 01       	movw	r24, r28
    f420:	a4 de       	rcall	.-696    	; 0xf16a <fileno_to_fatfs>
    if(fh == NULL)
    f422:	00 97       	sbiw	r24, 0x00	; 0
    f424:	99 f3       	breq	.-26     	; 0xf40c <syncfs+0x12>
    {
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    f426:	0e 94 94 5c 	call	0xb928	; 0xb928 <f_sync>
    if (res != FR_OK)
    f42a:	00 97       	sbiw	r24, 0x00	; 0
    f42c:	a1 f0       	breq	.+40     	; 0xf456 <syncfs+0x5c>
    f42e:	84 31       	cpi	r24, 0x14	; 20
    f430:	91 05       	cpc	r25, r1
    f432:	70 f4       	brcc	.+28     	; 0xf450 <syncfs+0x56>
    f434:	fc 01       	movw	r30, r24
    f436:	ea 55       	subi	r30, 0x5A	; 90
    f438:	f4 4f       	sbci	r31, 0xF4	; 244
    f43a:	80 81       	ld	r24, Z
    f43c:	08 2e       	mov	r0, r24
    f43e:	00 0c       	add	r0, r0
    f440:	99 0b       	sbc	r25, r25
    {
        errno = fatfs_to_errno(res);
    f442:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    f446:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
        return(-1);
    f44a:	8f ef       	ldi	r24, 0xFF	; 255
    f44c:	9f ef       	ldi	r25, 0xFF	; 255
    f44e:	05 c0       	rjmp	.+10     	; 0xf45a <syncfs+0x60>
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    if (res != FR_OK)
    f450:	83 e2       	ldi	r24, 0x23	; 35
    f452:	90 e0       	ldi	r25, 0x00	; 0
    f454:	f6 cf       	rjmp	.-20     	; 0xf442 <syncfs+0x48>
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return(0);
    f456:	80 e0       	ldi	r24, 0x00	; 0
    f458:	90 e0       	ldi	r25, 0x00	; 0
}
    f45a:	df 91       	pop	r29
    f45c:	cf 91       	pop	r28
    f45e:	08 95       	ret

0000f460 <sync>:
/// - man page sync (2).
///
/// @return  void.
MEMSPACE
void sync(void)
{
    f460:	cf 93       	push	r28
    f462:	df 93       	push	r29
    FIL *fh;
    int i;

    for(i=0;i<MAX_FILES;++i)
    f464:	c0 e0       	ldi	r28, 0x00	; 0
    f466:	d0 e0       	ldi	r29, 0x00	; 0
    f468:	21 96       	adiw	r28, 0x01	; 1
    f46a:	c0 31       	cpi	r28, 0x10	; 16
    f46c:	d1 05       	cpc	r29, r1
    f46e:	51 f0       	breq	.+20     	; 0xf484 <sync+0x24>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f470:	c3 30       	cpi	r28, 0x03	; 3
    f472:	d1 05       	cpc	r29, r1
    f474:	cc f3       	brlt	.-14     	; 0xf468 <sync+0x8>
    {
        if(isatty(i))
            continue;

// fileno_to_fatfs checks for i out of bounds
        fh = fileno_to_fatfs(i);
    f476:	ce 01       	movw	r24, r28
    f478:	78 de       	rcall	.-784    	; 0xf16a <fileno_to_fatfs>
        if(fh == NULL)
    f47a:	89 2b       	or	r24, r25
    f47c:	a9 f3       	breq	.-22     	; 0xf468 <sync+0x8>
            continue;

        (void ) syncfs(i);
    f47e:	ce 01       	movw	r24, r28
    f480:	bc df       	rcall	.-136    	; 0xf3fa <syncfs>
    f482:	f2 cf       	rjmp	.-28     	; 0xf468 <sync+0x8>
    }
}
    f484:	df 91       	pop	r29
    f486:	cf 91       	pop	r28
    f488:	08 95       	ret

0000f48a <write>:
/// @param[in] count: number of bytes to write.
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t write(int fd, const void *buf, size_t count)
{
    f48a:	a2 e0       	ldi	r26, 0x02	; 2
    f48c:	b0 e0       	ldi	r27, 0x00	; 0
    f48e:	eb e4       	ldi	r30, 0x4B	; 75
    f490:	fa e7       	ldi	r31, 0x7A	; 122
    f492:	0c 94 0f e3 	jmp	0x1c61e	; 0x1c61e <__prologue_saves__+0xc>
    f496:	8c 01       	movw	r16, r24
    f498:	b6 2e       	mov	r11, r22
    f49a:	f7 2e       	mov	r15, r23
    f49c:	4a 01       	movw	r8, r20
    UINT size;
    UINT bytes = count;
    FRESULT res;
    FIL *fh;
    FILE *stream;
    errno = 0;
    f49e:	10 92 ca 1c 	sts	0x1CCA, r1	; 0x801cca <errno+0x1>
    f4a2:	10 92 c9 1c 	sts	0x1CC9, r1	; 0x801cc9 <errno>

// TTY read function
    stream = fileno_to_stream(fd);
    f4a6:	ce da       	rcall	.-2660   	; 0xea44 <fileno_to_stream>
    f4a8:	6c 01       	movw	r12, r24
    if(stream == stdout || stream == stderr)
    f4aa:	80 91 cd 1c 	lds	r24, 0x1CCD	; 0x801ccd <__iob+0x2>
    f4ae:	90 91 ce 1c 	lds	r25, 0x1CCE	; 0x801cce <__iob+0x3>
    f4b2:	c8 16       	cp	r12, r24
    f4b4:	d9 06       	cpc	r13, r25
    f4b6:	39 f0       	breq	.+14     	; 0xf4c6 <write+0x3c>
    f4b8:	80 91 cf 1c 	lds	r24, 0x1CCF	; 0x801ccf <__iob+0x4>
    f4bc:	90 91 d0 1c 	lds	r25, 0x1CD0	; 0x801cd0 <__iob+0x5>
    f4c0:	c8 16       	cp	r12, r24
    f4c2:	d9 06       	cpc	r13, r25
    f4c4:	d1 f4       	brne	.+52     	; 0xf4fa <write+0x70>
    {
        char *ptr = (char *) buf;
        size = 0;
    f4c6:	1a 82       	std	Y+2, r1	; 0x02
    f4c8:	19 82       	std	Y+1, r1	; 0x01
    f4ca:	0b 2d       	mov	r16, r11
    f4cc:	1f 2d       	mov	r17, r15
    f4ce:	78 01       	movw	r14, r16
    f4d0:	e8 0c       	add	r14, r8
    f4d2:	f9 1c       	adc	r15, r9
        while(count--)
    f4d4:	0e 15       	cp	r16, r14
    f4d6:	1f 05       	cpc	r17, r15
    f4d8:	d1 f1       	breq	.+116    	; 0xf54e <write+0xc4>
        {
            int c,ret;
            c = *ptr++;
    f4da:	f8 01       	movw	r30, r16
    f4dc:	a1 90       	ld	r10, Z+
    f4de:	8f 01       	movw	r16, r30
    f4e0:	b1 2c       	mov	r11, r1
            ret = fputc(c, stream);
    f4e2:	b6 01       	movw	r22, r12
    f4e4:	c5 01       	movw	r24, r10
    f4e6:	c4 d9       	rcall	.-3192   	; 0xe870 <fputc>
            if(c != ret)
    f4e8:	a8 16       	cp	r10, r24
    f4ea:	b9 06       	cpc	r11, r25
    f4ec:	81 f5       	brne	.+96     	; 0xf54e <write+0xc4>
                break;

            ++size;
    f4ee:	89 81       	ldd	r24, Y+1	; 0x01
    f4f0:	9a 81       	ldd	r25, Y+2	; 0x02
    f4f2:	01 96       	adiw	r24, 0x01	; 1
    f4f4:	9a 83       	std	Y+2, r25	; 0x02
    f4f6:	89 83       	std	Y+1, r24	; 0x01
    f4f8:	ed cf       	rjmp	.-38     	; 0xf4d4 <write+0x4a>
        }
        return(size);
    }
    if(stream == stdin)
    f4fa:	80 91 cb 1c 	lds	r24, 0x1CCB	; 0x801ccb <__iob>
    f4fe:	90 91 cc 1c 	lds	r25, 0x1CCC	; 0x801ccc <__iob+0x1>
    f502:	c8 16       	cp	r12, r24
    f504:	d9 06       	cpc	r13, r25
    {
        return(-1);
    }

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f506:	41 f1       	breq	.+80     	; 0xf558 <write+0xce>
    f508:	c8 01       	movw	r24, r16
    f50a:	2f de       	rcall	.-930    	; 0xf16a <fileno_to_fatfs>
    if ( fh == NULL )
    f50c:	00 97       	sbiw	r24, 0x00	; 0
    f50e:	19 f4       	brne	.+6      	; 0xf516 <write+0x8c>
    {
        errno = EBADF;
    f510:	89 e0       	ldi	r24, 0x09	; 9
    f512:	90 e0       	ldi	r25, 0x00	; 0
    f514:	17 c0       	rjmp	.+46     	; 0xf544 <write+0xba>
        return(-1);
    }

    res = f_write(fh, buf, bytes, &size);
    f516:	9e 01       	movw	r18, r28
    f518:	2f 5f       	subi	r18, 0xFF	; 255
    f51a:	3f 4f       	sbci	r19, 0xFF	; 255
    f51c:	a4 01       	movw	r20, r8
    f51e:	6b 2d       	mov	r22, r11
    f520:	7f 2d       	mov	r23, r15
    f522:	0e 94 fd 5a 	call	0xb5fa	; 0xb5fa <f_write>
    if(res != FR_OK)
    f526:	00 97       	sbiw	r24, 0x00	; 0
    f528:	91 f0       	breq	.+36     	; 0xf54e <write+0xc4>
    f52a:	84 31       	cpi	r24, 0x14	; 20
    f52c:	91 05       	cpc	r25, r1
    f52e:	40 f4       	brcc	.+16     	; 0xf540 <write+0xb6>
    f530:	fc 01       	movw	r30, r24
    f532:	ea 55       	subi	r30, 0x5A	; 90
    f534:	f4 4f       	sbci	r31, 0xF4	; 244
    f536:	80 81       	ld	r24, Z
    f538:	08 2e       	mov	r0, r24
    f53a:	00 0c       	add	r0, r0
    f53c:	99 0b       	sbc	r25, r25
    f53e:	02 c0       	rjmp	.+4      	; 0xf544 <write+0xba>
    f540:	83 e2       	ldi	r24, 0x23	; 35
    f542:	90 e0       	ldi	r25, 0x00	; 0
    {
        errno = fatfs_to_errno(res);
    f544:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    f548:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    f54c:	05 c0       	rjmp	.+10     	; 0xf558 <write+0xce>
        return(-1);
    }
    return ((ssize_t) size);
    f54e:	69 81       	ldd	r22, Y+1	; 0x01
    f550:	7a 81       	ldd	r23, Y+2	; 0x02
    f552:	80 e0       	ldi	r24, 0x00	; 0
    f554:	90 e0       	ldi	r25, 0x00	; 0
    f556:	03 c0       	rjmp	.+6      	; 0xf55e <write+0xd4>
        }
        return(size);
    }
    if(stream == stdin)
    {
        return(-1);
    f558:	6f ef       	ldi	r22, 0xFF	; 255
    f55a:	7f ef       	ldi	r23, 0xFF	; 255
    f55c:	cb 01       	movw	r24, r22
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    f55e:	22 96       	adiw	r28, 0x02	; 2
    f560:	ec e0       	ldi	r30, 0x0C	; 12
    f562:	0c 94 2b e3 	jmp	0x1c656	; 0x1c656 <__epilogue_restores__+0xc>

0000f566 <fwrite>:
///
/// @return count written on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    f566:	0f 93       	push	r16
    f568:	1f 93       	push	r17
    f56a:	cf 93       	push	r28
    f56c:	df 93       	push	r29
    f56e:	ec 01       	movw	r28, r24
    f570:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    f572:	64 9f       	mul	r22, r20
    f574:	80 01       	movw	r16, r0
    f576:	65 9f       	mul	r22, r21
    f578:	10 0d       	add	r17, r0
    f57a:	74 9f       	mul	r23, r20
    f57c:	10 0d       	add	r17, r0
    f57e:	11 24       	eor	r1, r1
    int fn = fileno(stream);
    f580:	45 da       	rcall	.-2934   	; 0xea0c <fileno>
    ssize_t ret;

// write () checks for fn out of bounds
    ret =  write(fn, ptr, count);
    f582:	a8 01       	movw	r20, r16
    f584:	be 01       	movw	r22, r28
    f586:	81 df       	rcall	.-254    	; 0xf48a <write>

    if(ret < 0)
    f588:	97 fd       	sbrc	r25, 7
    f58a:	02 c0       	rjmp	.+4      	; 0xf590 <fwrite+0x2a>
        return(0);

    return((size_t) ret);
    f58c:	cb 01       	movw	r24, r22
    f58e:	02 c0       	rjmp	.+4      	; 0xf594 <fwrite+0x2e>

// write () checks for fn out of bounds
    ret =  write(fn, ptr, count);

    if(ret < 0)
        return(0);
    f590:	80 e0       	ldi	r24, 0x00	; 0
    f592:	90 e0       	ldi	r25, 0x00	; 0

    return((size_t) ret);
}
    f594:	df 91       	pop	r29
    f596:	cf 91       	pop	r28
    f598:	1f 91       	pop	r17
    f59a:	0f 91       	pop	r16
    f59c:	08 95       	ret

0000f59e <free_file_descriptor>:
///
/// @return fileno on success.
/// @return -1 on failure.
MEMSPACE
int free_file_descriptor(int fileno)
{
    f59e:	0f 93       	push	r16
    f5a0:	1f 93       	push	r17
    f5a2:	cf 93       	push	r28
    f5a4:	df 93       	push	r29
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f5a6:	83 30       	cpi	r24, 0x03	; 3
    f5a8:	91 05       	cpc	r25, r1
    f5aa:	48 f4       	brcc	.+18     	; 0xf5be <free_file_descriptor+0x20>
    FILE *stream;
    FIL *fh;

    if(isatty( fileno ))
    {
        errno = EBADF;
    f5ac:	89 e0       	ldi	r24, 0x09	; 9
    f5ae:	90 e0       	ldi	r25, 0x00	; 0
    f5b0:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    f5b4:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
        return(-1);
    f5b8:	8f ef       	ldi	r24, 0xFF	; 255
    f5ba:	9f ef       	ldi	r25, 0xFF	; 255
    f5bc:	20 c0       	rjmp	.+64     	; 0xf5fe <free_file_descriptor+0x60>
    f5be:	ec 01       	movw	r28, r24
    }

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    f5c0:	41 da       	rcall	.-2942   	; 0xea44 <fileno_to_stream>
    f5c2:	8c 01       	movw	r16, r24
    if(stream == NULL)
    f5c4:	89 2b       	or	r24, r25
    f5c6:	c1 f3       	breq	.-16     	; 0xf5b8 <free_file_descriptor+0x1a>
    {
        return(-1);
    }

    fh = fdev_get_udata(stream);
    f5c8:	f8 01       	movw	r30, r16
    f5ca:	84 85       	ldd	r24, Z+12	; 0x0c
    f5cc:	95 85       	ldd	r25, Z+13	; 0x0d

    if(fh != NULL)
    f5ce:	00 97       	sbiw	r24, 0x00	; 0
    f5d0:	11 f0       	breq	.+4      	; 0xf5d6 <free_file_descriptor+0x38>
    {
        safefree(fh);
    f5d2:	0e 94 4a 26 	call	0x4c94	; 0x4c94 <safefree>
    }

    if(stream->buf != NULL && stream->flags & __SMALLOC)
    f5d6:	f8 01       	movw	r30, r16
    f5d8:	80 81       	ld	r24, Z
    f5da:	91 81       	ldd	r25, Z+1	; 0x01
    f5dc:	00 97       	sbiw	r24, 0x00	; 0
    f5de:	21 f0       	breq	.+8      	; 0xf5e8 <free_file_descriptor+0x4a>
    f5e0:	23 81       	ldd	r18, Z+3	; 0x03
    f5e2:	27 fd       	sbrc	r18, 7
    {
        safefree(stream->buf);
    f5e4:	0e 94 4a 26 	call	0x4c94	; 0x4c94 <safefree>
    }

    __iob[fileno]  = NULL;
    f5e8:	fe 01       	movw	r30, r28
    f5ea:	ee 0f       	add	r30, r30
    f5ec:	ff 1f       	adc	r31, r31
    f5ee:	e5 53       	subi	r30, 0x35	; 53
    f5f0:	f3 4e       	sbci	r31, 0xE3	; 227
    f5f2:	11 82       	std	Z+1, r1	; 0x01
    f5f4:	10 82       	st	Z, r1
    safefree(stream);
    f5f6:	c8 01       	movw	r24, r16
    f5f8:	0e 94 4a 26 	call	0x4c94	; 0x4c94 <safefree>
    return(fileno);
    f5fc:	ce 01       	movw	r24, r28
}
    f5fe:	df 91       	pop	r29
    f600:	cf 91       	pop	r28
    f602:	1f 91       	pop	r17
    f604:	0f 91       	pop	r16
    f606:	08 95       	ret

0000f608 <close>:
///
/// @return 0 on sucess.
/// @return -1 on error with errno set.
MEMSPACE
int close(int fileno)
{
    f608:	0f 93       	push	r16
    f60a:	1f 93       	push	r17
    f60c:	cf 93       	push	r28
    f60e:	df 93       	push	r29
    f610:	8c 01       	movw	r16, r24
    FILE *stream;
    FIL *fh;
    int res;

    errno = 0;
    f612:	10 92 ca 1c 	sts	0x1CCA, r1	; 0x801cca <errno+0x1>
    f616:	10 92 c9 1c 	sts	0x1CC9, r1	; 0x801cc9 <errno>

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    f61a:	14 da       	rcall	.-3032   	; 0xea44 <fileno_to_stream>
    if(stream == NULL)
    f61c:	89 2b       	or	r24, r25
    f61e:	d9 f0       	breq	.+54     	; 0xf656 <close+0x4e>
    {
        return(-1);
    }

// fileno_to_fatfs checks for fileno out of bounds
    fh = fileno_to_fatfs(fileno);
    f620:	c8 01       	movw	r24, r16
    f622:	a3 dd       	rcall	.-1210   	; 0xf16a <fileno_to_fatfs>
    if(fh == NULL)
    f624:	00 97       	sbiw	r24, 0x00	; 0
    f626:	b9 f0       	breq	.+46     	; 0xf656 <close+0x4e>
    {
        return(-1);
    }
    res = f_close(fh);
    f628:	0e 94 14 5d 	call	0xba28	; 0xba28 <f_close>
    free_file_descriptor(fileno);
    f62c:	ec 01       	movw	r28, r24
    f62e:	c8 01       	movw	r24, r16
    f630:	b6 df       	rcall	.-148    	; 0xf59e <free_file_descriptor>
    if (res != FR_OK)
    f632:	20 97       	sbiw	r28, 0x00	; 0
    f634:	99 f0       	breq	.+38     	; 0xf65c <close+0x54>
    f636:	c4 31       	cpi	r28, 0x14	; 20
    f638:	d1 05       	cpc	r29, r1
    f63a:	38 f4       	brcc	.+14     	; 0xf64a <close+0x42>
    f63c:	ca 55       	subi	r28, 0x5A	; 90
    f63e:	d4 4f       	sbci	r29, 0xF4	; 244
    f640:	88 81       	ld	r24, Y
    f642:	08 2e       	mov	r0, r24
    f644:	00 0c       	add	r0, r0
    f646:	99 0b       	sbc	r25, r25
    f648:	02 c0       	rjmp	.+4      	; 0xf64e <close+0x46>
    f64a:	83 e2       	ldi	r24, 0x23	; 35
    f64c:	90 e0       	ldi	r25, 0x00	; 0
    {
        errno = fatfs_to_errno(res);
    f64e:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    f652:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
        return(-1);
    f656:	8f ef       	ldi	r24, 0xFF	; 255
    f658:	9f ef       	ldi	r25, 0xFF	; 255
    f65a:	02 c0       	rjmp	.+4      	; 0xf660 <close+0x58>
    }
    return(0);
    f65c:	80 e0       	ldi	r24, 0x00	; 0
    f65e:	90 e0       	ldi	r25, 0x00	; 0
}
    f660:	df 91       	pop	r29
    f662:	cf 91       	pop	r28
    f664:	1f 91       	pop	r17
    f666:	0f 91       	pop	r16
    f668:	08 95       	ret

0000f66a <fclose>:
/// @return  0 on sucess.
/// @return  -1 on error witrh errno set.
MEMSPACE
int fclose(FILE *stream)
{
    int fn = fileno(stream);
    f66a:	d0 d9       	rcall	.-3168   	; 0xea0c <fileno>
    if(fn < 0)
    f66c:	97 fd       	sbrc	r25, 7
        return(EOF);

    return( close(fn) );
    f66e:	02 c0       	rjmp	.+4      	; 0xf674 <fclose+0xa>
    f670:	cb cf       	rjmp	.-106    	; 0xf608 <close>
    f672:	08 95       	ret
MEMSPACE
int fclose(FILE *stream)
{
    int fn = fileno(stream);
    if(fn < 0)
        return(EOF);
    f674:	8f ef       	ldi	r24, 0xFF	; 255
    f676:	9f ef       	ldi	r25, 0xFF	; 255

    return( close(fn) );
}
    f678:	08 95       	ret

0000f67a <new_file_descriptor>:
///
/// @return fileno on success.
/// @return -1 on failure with errno set.
MEMSPACE
int new_file_descriptor( void )
{
    f67a:	0f 93       	push	r16
    f67c:	1f 93       	push	r17
    f67e:	cf 93       	push	r28
    f680:	df 93       	push	r29
    f682:	eb ec       	ldi	r30, 0xCB	; 203
    f684:	fc e1       	ldi	r31, 0x1C	; 28
    int i;
    FILE *stream;
    FIL *fh;

    for(i=0;i<MAX_FILES;++i)
    f686:	c0 e0       	ldi	r28, 0x00	; 0
    f688:	d0 e0       	ldi	r29, 0x00	; 0
    f68a:	21 96       	adiw	r28, 0x01	; 1
    f68c:	c0 31       	cpi	r28, 0x10	; 16
    f68e:	d1 05       	cpc	r29, r1
    f690:	49 f0       	breq	.+18     	; 0xf6a4 <new_file_descriptor+0x2a>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f692:	c3 30       	cpi	r28, 0x03	; 3
    f694:	d1 05       	cpc	r29, r1
    f696:	24 f0       	brlt	.+8      	; 0xf6a0 <new_file_descriptor+0x26>

    for(i=0;i<MAX_FILES;++i)
    {
        if(isatty(i))
            continue;
        if( __iob[i] == NULL)
    f698:	82 81       	ldd	r24, Z+2	; 0x02
    f69a:	93 81       	ldd	r25, Z+3	; 0x03
    f69c:	89 2b       	or	r24, r25
    f69e:	59 f0       	breq	.+22     	; 0xf6b6 <new_file_descriptor+0x3c>
    f6a0:	32 96       	adiw	r30, 0x02	; 2
    f6a2:	f3 cf       	rjmp	.-26     	; 0xf68a <new_file_descriptor+0x10>
            __iob[i]  = stream;
            fdev_set_udata(stream, (void *) fh);
            return(i);
        }
    }
    errno = ENFILE;
    f6a4:	87 e1       	ldi	r24, 0x17	; 23
    f6a6:	90 e0       	ldi	r25, 0x00	; 0
    f6a8:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    f6ac:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    return(-1);
    f6b0:	8f ef       	ldi	r24, 0xFF	; 255
    f6b2:	9f ef       	ldi	r25, 0xFF	; 255
    f6b4:	22 c0       	rjmp	.+68     	; 0xf6fa <new_file_descriptor+0x80>
    {
        if(isatty(i))
            continue;
        if( __iob[i] == NULL)
        {
            stream = (FILE *) safecalloc(sizeof(FILE),1);
    f6b6:	61 e0       	ldi	r22, 0x01	; 1
    f6b8:	70 e0       	ldi	r23, 0x00	; 0
    f6ba:	8e e0       	ldi	r24, 0x0E	; 14
    f6bc:	90 e0       	ldi	r25, 0x00	; 0
    f6be:	0e 94 fe 25 	call	0x4bfc	; 0x4bfc <safecalloc>
    f6c2:	8c 01       	movw	r16, r24
            if(stream == NULL)
    f6c4:	89 2b       	or	r24, r25
    f6c6:	59 f0       	breq	.+22     	; 0xf6de <new_file_descriptor+0x64>
            {
                errno = ENOMEM;
                return(-1);
            }
            fh = (FIL *) safecalloc(sizeof(FIL),1);
    f6c8:	61 e0       	ldi	r22, 0x01	; 1
    f6ca:	70 e0       	ldi	r23, 0x00	; 0
    f6cc:	84 e2       	ldi	r24, 0x24	; 36
    f6ce:	92 e0       	ldi	r25, 0x02	; 2
    f6d0:	0e 94 fe 25 	call	0x4bfc	; 0x4bfc <safecalloc>
            if(fh == NULL)
    f6d4:	00 97       	sbiw	r24, 0x00	; 0
    f6d6:	31 f4       	brne	.+12     	; 0xf6e4 <new_file_descriptor+0x6a>
            {
                safefree(stream);
    f6d8:	c8 01       	movw	r24, r16
    f6da:	0e 94 4a 26 	call	0x4c94	; 0x4c94 <safefree>
                errno = ENOMEM;
    f6de:	8c e0       	ldi	r24, 0x0C	; 12
    f6e0:	90 e0       	ldi	r25, 0x00	; 0
    f6e2:	e2 cf       	rjmp	.-60     	; 0xf6a8 <new_file_descriptor+0x2e>
                return(-1);
            }

            __iob[i]  = stream;
    f6e4:	fe 01       	movw	r30, r28
    f6e6:	ee 0f       	add	r30, r30
    f6e8:	ff 1f       	adc	r31, r31
    f6ea:	e5 53       	subi	r30, 0x35	; 53
    f6ec:	f3 4e       	sbci	r31, 0xE3	; 227
    f6ee:	11 83       	std	Z+1, r17	; 0x01
    f6f0:	00 83       	st	Z, r16
            fdev_set_udata(stream, (void *) fh);
    f6f2:	f8 01       	movw	r30, r16
    f6f4:	95 87       	std	Z+13, r25	; 0x0d
    f6f6:	84 87       	std	Z+12, r24	; 0x0c
{
    int i;
    FILE *stream;
    FIL *fh;

    for(i=0;i<MAX_FILES;++i)
    f6f8:	ce 01       	movw	r24, r28
            return(i);
        }
    }
    errno = ENFILE;
    return(-1);
}
    f6fa:	df 91       	pop	r29
    f6fc:	cf 91       	pop	r28
    f6fe:	1f 91       	pop	r17
    f700:	0f 91       	pop	r16
    f702:	08 95       	ret

0000f704 <open>:
///
/// @return fileno on success.
/// @return -1 on error with errno set.
MEMSPACE
int open(const char *pathname, int flags)
{
    f704:	a0 e0       	ldi	r26, 0x00	; 0
    f706:	b0 e0       	ldi	r27, 0x00	; 0
    f708:	e8 e8       	ldi	r30, 0x88	; 136
    f70a:	fb e7       	ldi	r31, 0x7B	; 123
    f70c:	0c 94 0d e3 	jmp	0x1c61a	; 0x1c61a <__prologue_saves__+0x8>
    f710:	5c 01       	movw	r10, r24
    f712:	6b 01       	movw	r12, r22
    int fatfs_modes;
    FILE *stream;
    FIL *fh;
    int res;

    errno = 0;
    f714:	10 92 ca 1c 	sts	0x1CCA, r1	; 0x801cca <errno+0x1>
    f718:	10 92 c9 1c 	sts	0x1CC9, r1	; 0x801cc9 <errno>
        errno = fatfs_to_errno(res);
        return(-1);
    }
#endif

    if((flags & O_ACCMODE) == O_RDWR)
    f71c:	7b 01       	movw	r14, r22
    f71e:	83 e0       	ldi	r24, 0x03	; 3
    f720:	e8 22       	and	r14, r24
    f722:	ff 24       	eor	r15, r15
    f724:	e2 e0       	ldi	r30, 0x02	; 2
    f726:	ee 16       	cp	r14, r30
    f728:	f1 04       	cpc	r15, r1
    f72a:	31 f0       	breq	.+12     	; 0xf738 <open+0x34>
        fatfs_modes = FA_READ | FA_WRITE;
    else if((flags & O_ACCMODE) == O_RDONLY)
    f72c:	e1 14       	cp	r14, r1
    f72e:	f1 04       	cpc	r15, r1
    f730:	31 f0       	breq	.+12     	; 0xf73e <open+0x3a>
        fatfs_modes = FA_READ;
    else
        fatfs_modes = FA_WRITE;
    f732:	02 e0       	ldi	r16, 0x02	; 2
    f734:	10 e0       	ldi	r17, 0x00	; 0
    f736:	05 c0       	rjmp	.+10     	; 0xf742 <open+0x3e>
        return(-1);
    }
#endif

    if((flags & O_ACCMODE) == O_RDWR)
        fatfs_modes = FA_READ | FA_WRITE;
    f738:	03 e0       	ldi	r16, 0x03	; 3
    f73a:	10 e0       	ldi	r17, 0x00	; 0
    f73c:	02 c0       	rjmp	.+4      	; 0xf742 <open+0x3e>
    else if((flags & O_ACCMODE) == O_RDONLY)
        fatfs_modes = FA_READ;
    f73e:	01 e0       	ldi	r16, 0x01	; 1
    f740:	10 e0       	ldi	r17, 0x00	; 0
    else
        fatfs_modes = FA_WRITE;

    if(flags & O_CREAT)
    f742:	c6 fe       	sbrs	r12, 6
    f744:	05 c0       	rjmp	.+10     	; 0xf750 <open+0x4c>
    {
        if(flags & O_TRUNC)
    f746:	d1 fe       	sbrs	r13, 1
    f748:	02 c0       	rjmp	.+4      	; 0xf74e <open+0x4a>
            fatfs_modes |= FA_CREATE_ALWAYS;
    f74a:	08 60       	ori	r16, 0x08	; 8
    f74c:	01 c0       	rjmp	.+2      	; 0xf750 <open+0x4c>
        else
            fatfs_modes |= FA_OPEN_ALWAYS;
    f74e:	00 61       	ori	r16, 0x10	; 16
    }

    fileno = new_file_descriptor();
    f750:	94 df       	rcall	.-216    	; 0xf67a <new_file_descriptor>
    f752:	3c 01       	movw	r6, r24

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    f754:	77 d9       	rcall	.-3346   	; 0xea44 <fileno_to_stream>
    f756:	ec 01       	movw	r28, r24
    f758:	c3 01       	movw	r24, r6
    if(stream == NULL)
    {
        free_file_descriptor(fileno);
    f75a:	20 97       	sbiw	r28, 0x00	; 0

    fileno = new_file_descriptor();

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    if(stream == NULL)
    f75c:	09 f4       	brne	.+2      	; 0xf760 <open+0x5c>
    f75e:	48 c0       	rjmp	.+144    	; 0xf7f0 <open+0xec>
        free_file_descriptor(fileno);
        return(-1);
    }

// fileno_to_fatfs checks for fileno out of bounds
    fh = fileno_to_fatfs(fileno);
    f760:	04 dd       	rcall	.-1528   	; 0xf16a <fileno_to_fatfs>
    f762:	4c 01       	movw	r8, r24
    f764:	00 97       	sbiw	r24, 0x00	; 0
    if(fh == NULL)
    f766:	59 f4       	brne	.+22     	; 0xf77e <open+0x7a>
    {
        free_file_descriptor(fileno);
    f768:	c3 01       	movw	r24, r6
    f76a:	19 df       	rcall	.-462    	; 0xf59e <free_file_descriptor>
    f76c:	89 e0       	ldi	r24, 0x09	; 9
        errno = EBADF;
    f76e:	90 e0       	ldi	r25, 0x00	; 0
    f770:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    f774:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    f778:	8f ef       	ldi	r24, 0xFF	; 255
        return(-1);
    f77a:	9f ef       	ldi	r25, 0xFF	; 255
    f77c:	5d c0       	rjmp	.+186    	; 0xf838 <open+0x134>
    f77e:	40 2f       	mov	r20, r16
    }
    res = f_open(fh, pathname, (BYTE) (fatfs_modes & 0xff));
    f780:	b5 01       	movw	r22, r10
    f782:	0e 94 fa 57 	call	0xaff4	; 0xaff4 <f_open>
    f786:	00 97       	sbiw	r24, 0x00	; 0
    if(res != FR_OK)
    f788:	91 f0       	breq	.+36     	; 0xf7ae <open+0xaa>
    f78a:	84 31       	cpi	r24, 0x14	; 20
    f78c:	91 05       	cpc	r25, r1
    f78e:	40 f4       	brcc	.+16     	; 0xf7a0 <open+0x9c>
    f790:	fc 01       	movw	r30, r24
    f792:	ea 55       	subi	r30, 0x5A	; 90
    f794:	f4 4f       	sbci	r31, 0xF4	; 244
    f796:	80 81       	ld	r24, Z
    f798:	08 2e       	mov	r0, r24
    f79a:	00 0c       	add	r0, r0
    f79c:	99 0b       	sbc	r25, r25
    f79e:	02 c0       	rjmp	.+4      	; 0xf7a4 <open+0xa0>
    f7a0:	83 e2       	ldi	r24, 0x23	; 35
    f7a2:	90 e0       	ldi	r25, 0x00	; 0
    f7a4:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
    {
        errno = fatfs_to_errno(res);
    f7a8:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    f7ac:	20 c0       	rjmp	.+64     	; 0xf7ee <open+0xea>
    f7ae:	d2 fe       	sbrs	r13, 2
        free_file_descriptor(fileno);
        return(-1);
    }
    if(flags & O_APPEND)
    f7b0:	21 c0       	rjmp	.+66     	; 0xf7f4 <open+0xf0>
    f7b2:	f4 01       	movw	r30, r8
    {
///  Seek to end of the file
        res = f_lseek(fh, f_size(fh));
    f7b4:	42 85       	ldd	r20, Z+10	; 0x0a
    f7b6:	53 85       	ldd	r21, Z+11	; 0x0b
    f7b8:	64 85       	ldd	r22, Z+12	; 0x0c
    f7ba:	75 85       	ldd	r23, Z+13	; 0x0d
    f7bc:	c4 01       	movw	r24, r8
    f7be:	0e 94 be 5e 	call	0xbd7c	; 0xbd7c <f_lseek>
    f7c2:	00 97       	sbiw	r24, 0x00	; 0
        if (res != FR_OK)
    f7c4:	b9 f0       	breq	.+46     	; 0xf7f4 <open+0xf0>
    f7c6:	84 31       	cpi	r24, 0x14	; 20
    f7c8:	91 05       	cpc	r25, r1
    f7ca:	40 f4       	brcc	.+16     	; 0xf7dc <open+0xd8>
    f7cc:	fc 01       	movw	r30, r24
    f7ce:	ea 55       	subi	r30, 0x5A	; 90
    f7d0:	f4 4f       	sbci	r31, 0xF4	; 244
    f7d2:	80 81       	ld	r24, Z
    f7d4:	08 2e       	mov	r0, r24
    f7d6:	00 0c       	add	r0, r0
    f7d8:	99 0b       	sbc	r25, r25
    f7da:	02 c0       	rjmp	.+4      	; 0xf7e0 <open+0xdc>
    f7dc:	83 e2       	ldi	r24, 0x23	; 35
    f7de:	90 e0       	ldi	r25, 0x00	; 0
    f7e0:	90 93 ca 1c 	sts	0x1CCA, r25	; 0x801cca <errno+0x1>
        {
            errno = fatfs_to_errno(res);
    f7e4:	80 93 c9 1c 	sts	0x1CC9, r24	; 0x801cc9 <errno>
    f7e8:	c4 01       	movw	r24, r8
            f_close(fh);
    f7ea:	0e 94 14 5d 	call	0xba28	; 0xba28 <f_close>
            free_file_descriptor(fileno);
    f7ee:	c3 01       	movw	r24, r6
    f7f0:	d6 de       	rcall	.-596    	; 0xf59e <free_file_descriptor>
    f7f2:	c2 cf       	rjmp	.-124    	; 0xf778 <open+0x74>
    f7f4:	f2 e0       	ldi	r31, 0x02	; 2
            return(-1);
        }
    }

    if((flags & O_ACCMODE) == O_RDWR)
    f7f6:	ef 16       	cp	r14, r31
    f7f8:	f1 04       	cpc	r15, r1
    f7fa:	51 f4       	brne	.+20     	; 0xf810 <open+0x10c>
    f7fc:	87 e9       	ldi	r24, 0x97	; 151
    {
// FIXME fdevopen should do this
        stream->put = fatfs_putc;
    f7fe:	93 e7       	ldi	r25, 0x73	; 115
    f800:	99 87       	std	Y+9, r25	; 0x09
    f802:	88 87       	std	Y+8, r24	; 0x08
    f804:	84 e1       	ldi	r24, 0x14	; 20
        stream->get = fatfs_getc;
    f806:	93 e7       	ldi	r25, 0x73	; 115
    f808:	9b 87       	std	Y+11, r25	; 0x0b
    f80a:	8a 87       	std	Y+10, r24	; 0x0a
    f80c:	83 e0       	ldi	r24, 0x03	; 3
        stream->flags = _FDEV_SETUP_RW;
    f80e:	12 c0       	rjmp	.+36     	; 0xf834 <open+0x130>
    f810:	e1 14       	cp	r14, r1
    }
    else if((flags & O_ACCMODE) == O_RDONLY)
    f812:	f1 04       	cpc	r15, r1
    f814:	41 f4       	brne	.+16     	; 0xf826 <open+0x122>
    f816:	19 86       	std	Y+9, r1	; 0x09
    {
// FIXME fdevopen should do this
        stream->put = NULL;
    f818:	18 86       	std	Y+8, r1	; 0x08
    f81a:	84 e1       	ldi	r24, 0x14	; 20
        stream->get = fatfs_getc;
    f81c:	93 e7       	ldi	r25, 0x73	; 115
    f81e:	9b 87       	std	Y+11, r25	; 0x0b
    f820:	8a 87       	std	Y+10, r24	; 0x0a
    f822:	81 e0       	ldi	r24, 0x01	; 1
        stream->flags = _FDEV_SETUP_READ;
    f824:	07 c0       	rjmp	.+14     	; 0xf834 <open+0x130>
    f826:	87 e9       	ldi	r24, 0x97	; 151
    }
    else
    {
// FIXME fdevopen should do this
        stream->put = fatfs_putc;
    f828:	93 e7       	ldi	r25, 0x73	; 115
    f82a:	99 87       	std	Y+9, r25	; 0x09
    f82c:	88 87       	std	Y+8, r24	; 0x08
    f82e:	1b 86       	std	Y+11, r1	; 0x0b
        stream->get = NULL;
    f830:	1a 86       	std	Y+10, r1	; 0x0a
    f832:	82 e0       	ldi	r24, 0x02	; 2
        stream->flags = _FDEV_SETUP_WRITE;
    f834:	8b 83       	std	Y+3, r24	; 0x03
    f836:	c3 01       	movw	r24, r6
    }

    return(fileno);
    f838:	cd b7       	in	r28, 0x3d	; 61
}
    f83a:	de b7       	in	r29, 0x3e	; 62
    f83c:	ee e0       	ldi	r30, 0x0E	; 14
    f83e:	0c 94 29 e3 	jmp	0x1c652	; 0x1c652 <__epilogue_restores__+0x8>

0000f842 <posix_fopen_modes_to_open>:
    f842:	cf 93       	push	r28
/// @return open mode flags.
/// @return -1 on error.
/// @warning read and write BOTH share the same stream buffer and buffer index pointers.
MEMSPACE
int posix_fopen_modes_to_open(const char *mode)
{
    f844:	df 93       	push	r29
    f846:	ec 01       	movw	r28, r24
    int flag = 0;

    if(modecmp(mode,"r") || modecmp(mode,"rb"))
    f848:	62 e4       	ldi	r22, 0x42	; 66
    f84a:	73 e0       	ldi	r23, 0x03	; 3
    f84c:	0e 94 ed 2f 	call	0x5fda	; 0x5fda <strcmp>
    f850:	00 97       	sbiw	r24, 0x00	; 0
    f852:	09 f4       	brne	.+2      	; 0xf856 <posix_fopen_modes_to_open+0x14>
    f854:	5d c0       	rjmp	.+186    	; 0xf910 <posix_fopen_modes_to_open+0xce>
    f856:	6e ef       	ldi	r22, 0xFE	; 254
    f858:	78 e0       	ldi	r23, 0x08	; 8
    f85a:	ce 01       	movw	r24, r28
    f85c:	0e 94 ed 2f 	call	0x5fda	; 0x5fda <strcmp>
    f860:	00 97       	sbiw	r24, 0x00	; 0
    f862:	09 f4       	brne	.+2      	; 0xf866 <posix_fopen_modes_to_open+0x24>
    f864:	55 c0       	rjmp	.+170    	; 0xf910 <posix_fopen_modes_to_open+0xce>
    {
        flag = O_RDONLY;
        return(flag);
    }
    if(modecmp(mode,"r+") || modecmp(mode, "r+b" ) || modecmp(mode, "rb+" ))
    f866:	61 e0       	ldi	r22, 0x01	; 1
    f868:	79 e0       	ldi	r23, 0x09	; 9
    f86a:	ce 01       	movw	r24, r28
    f86c:	0e 94 ed 2f 	call	0x5fda	; 0x5fda <strcmp>
    f870:	89 2b       	or	r24, r25
    f872:	09 f4       	brne	.+2      	; 0xf876 <posix_fopen_modes_to_open+0x34>
    f874:	42 c0       	rjmp	.+132    	; 0xf8fa <posix_fopen_modes_to_open+0xb8>
    f876:	64 e0       	ldi	r22, 0x04	; 4
    f878:	79 e0       	ldi	r23, 0x09	; 9
    f87a:	ce 01       	movw	r24, r28
    f87c:	0e 94 ed 2f 	call	0x5fda	; 0x5fda <strcmp>
    f880:	89 2b       	or	r24, r25
    f882:	d9 f1       	breq	.+118    	; 0xf8fa <posix_fopen_modes_to_open+0xb8>
    f884:	68 e0       	ldi	r22, 0x08	; 8
    f886:	79 e0       	ldi	r23, 0x09	; 9
    f888:	ce 01       	movw	r24, r28
    f88a:	0e 94 ed 2f 	call	0x5fda	; 0x5fda <strcmp>
    f88e:	89 2b       	or	r24, r25
    f890:	a1 f1       	breq	.+104    	; 0xf8fa <posix_fopen_modes_to_open+0xb8>
    {
        flag = O_RDWR | O_TRUNC;
        return(flag);
    }
    if(modecmp(mode,"w") || modecmp(mode,"wb"))
    f892:	6d eb       	ldi	r22, 0xBD	; 189
    f894:	7a e0       	ldi	r23, 0x0A	; 10
    f896:	ce 01       	movw	r24, r28
    f898:	0e 94 ed 2f 	call	0x5fda	; 0x5fda <strcmp>
    f89c:	89 2b       	or	r24, r25
    f89e:	81 f1       	breq	.+96     	; 0xf900 <posix_fopen_modes_to_open+0xbe>
    f8a0:	6c e0       	ldi	r22, 0x0C	; 12
    f8a2:	79 e0       	ldi	r23, 0x09	; 9
    f8a4:	ce 01       	movw	r24, r28
    f8a6:	0e 94 ed 2f 	call	0x5fda	; 0x5fda <strcmp>
    f8aa:	89 2b       	or	r24, r25
    f8ac:	49 f1       	breq	.+82     	; 0xf900 <posix_fopen_modes_to_open+0xbe>
    {
        flag = O_WRONLY | O_CREAT | O_TRUNC;
        return(flag);
    }
    if(modecmp(mode,"w+") || modecmp(mode, "w+b" ) || modecmp(mode, "wb+" ))
    f8ae:	6f e0       	ldi	r22, 0x0F	; 15
    f8b0:	79 e0       	ldi	r23, 0x09	; 9
    f8b2:	ce 01       	movw	r24, r28
    f8b4:	0e 94 ed 2f 	call	0x5fda	; 0x5fda <strcmp>
    f8b8:	89 2b       	or	r24, r25
    f8ba:	29 f1       	breq	.+74     	; 0xf906 <posix_fopen_modes_to_open+0xc4>
    f8bc:	62 e1       	ldi	r22, 0x12	; 18
    f8be:	79 e0       	ldi	r23, 0x09	; 9
    f8c0:	ce 01       	movw	r24, r28
    f8c2:	0e 94 ed 2f 	call	0x5fda	; 0x5fda <strcmp>
    f8c6:	89 2b       	or	r24, r25
    f8c8:	f1 f0       	breq	.+60     	; 0xf906 <posix_fopen_modes_to_open+0xc4>
    f8ca:	66 e1       	ldi	r22, 0x16	; 22
    f8cc:	79 e0       	ldi	r23, 0x09	; 9
    f8ce:	ce 01       	movw	r24, r28
    f8d0:	0e 94 ed 2f 	call	0x5fda	; 0x5fda <strcmp>
    f8d4:	89 2b       	or	r24, r25
    f8d6:	b9 f0       	breq	.+46     	; 0xf906 <posix_fopen_modes_to_open+0xc4>
    {
        flag = O_RDWR | O_CREAT | O_TRUNC;
        return(flag);
    }
    if(modecmp(mode,"a") || modecmp(mode,"ab"))
    f8d8:	6e e2       	ldi	r22, 0x2E	; 46
    f8da:	73 e1       	ldi	r23, 0x13	; 19
    f8dc:	ce 01       	movw	r24, r28
    f8de:	0e 94 ed 2f 	call	0x5fda	; 0x5fda <strcmp>
    f8e2:	89 2b       	or	r24, r25
    f8e4:	99 f0       	breq	.+38     	; 0xf90c <posix_fopen_modes_to_open+0xca>
    f8e6:	6a e1       	ldi	r22, 0x1A	; 26
    f8e8:	79 e0       	ldi	r23, 0x09	; 9
    f8ea:	ce 01       	movw	r24, r28
    f8ec:	0e 94 ed 2f 	call	0x5fda	; 0x5fda <strcmp>
    f8f0:	89 2b       	or	r24, r25
    f8f2:	61 f0       	breq	.+24     	; 0xf90c <posix_fopen_modes_to_open+0xca>
        return(flag);
    }
    if(modecmp(mode,"a+") || modecmp(mode, "a+b" ) || modecmp(mode, "ab+" ))
    {
        flag = O_RDWR | O_CREAT | O_APPEND;
        return(-1);
    f8f4:	8f ef       	ldi	r24, 0xFF	; 255
    f8f6:	9f ef       	ldi	r25, 0xFF	; 255
    f8f8:	0b c0       	rjmp	.+22     	; 0xf910 <posix_fopen_modes_to_open+0xce>
        return(flag);
    }
    if(modecmp(mode,"r+") || modecmp(mode, "r+b" ) || modecmp(mode, "rb+" ))
    {
        flag = O_RDWR | O_TRUNC;
        return(flag);
    f8fa:	82 e0       	ldi	r24, 0x02	; 2
    f8fc:	92 e0       	ldi	r25, 0x02	; 2
    f8fe:	08 c0       	rjmp	.+16     	; 0xf910 <posix_fopen_modes_to_open+0xce>
    }
    if(modecmp(mode,"w") || modecmp(mode,"wb"))
    {
        flag = O_WRONLY | O_CREAT | O_TRUNC;
        return(flag);
    f900:	81 e4       	ldi	r24, 0x41	; 65
    f902:	92 e0       	ldi	r25, 0x02	; 2
    f904:	05 c0       	rjmp	.+10     	; 0xf910 <posix_fopen_modes_to_open+0xce>
    }
    if(modecmp(mode,"w+") || modecmp(mode, "w+b" ) || modecmp(mode, "wb+" ))
    {
        flag = O_RDWR | O_CREAT | O_TRUNC;
        return(flag);
    f906:	82 e4       	ldi	r24, 0x42	; 66
    f908:	92 e0       	ldi	r25, 0x02	; 2
    f90a:	02 c0       	rjmp	.+4      	; 0xf910 <posix_fopen_modes_to_open+0xce>
    }
    if(modecmp(mode,"a") || modecmp(mode,"ab"))
    {
        flag = O_WRONLY | O_CREAT | O_APPEND;
        return(flag);
    f90c:	81 e4       	ldi	r24, 0x41	; 65
    f90e:	94 e0       	ldi	r25, 0x04	; 4
    {
        flag = O_RDWR | O_CREAT | O_APPEND;
        return(-1);
    }
    return(-1);                                   // nvalid mode
}
    f910:	df 91       	pop	r29
    f912:	cf 91       	pop	r28
    f914:	08 95       	ret

0000f916 <fopen>:
///
/// @return stream * on success.
/// @return NULL on error with errno set.
MEMSPACE
FILE *fopen(const char *path, const char *mode)
{
    f916:	cf 93       	push	r28
    f918:	df 93       	push	r29
    f91a:	ec 01       	movw	r28, r24
    f91c:	cb 01       	movw	r24, r22
    int flags = posix_fopen_modes_to_open(mode);
    f91e:	91 df       	rcall	.-222    	; 0xf842 <posix_fopen_modes_to_open>
    int fileno = open(path, flags);
    f920:	bc 01       	movw	r22, r24
    f922:	ce 01       	movw	r24, r28

// checks if fileno out of bounds
    return( fileno_to_stream(fileno) );
    f924:	ef de       	rcall	.-546    	; 0xf704 <open>
    f926:	8e d8       	rcall	.-3812   	; 0xea44 <fileno_to_stream>
}
    f928:	df 91       	pop	r29
    f92a:	cf 91       	pop	r28
    f92c:	08 95       	ret

0000f92e <fprintf>:
/// @param[in] ...: vararg list or arguments
/// @return size of printed result
MEMSPACE
int
fprintf(FILE *fp, const char *format, ...)
{
    f92e:	a8 e0       	ldi	r26, 0x08	; 8
    f930:	b0 e0       	ldi	r27, 0x00	; 0
    f932:	ed e9       	ldi	r30, 0x9D	; 157
    f934:	fc e7       	ldi	r31, 0x7C	; 124
    f936:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__prologue_saves__+0x20>
    printf_t fn;
    va_list va;

    fn.put = _fprintf_putc;
    f93a:	8a e8       	ldi	r24, 0x8A	; 138
    f93c:	94 e7       	ldi	r25, 0x74	; 116
    f93e:	9a 83       	std	Y+2, r25	; 0x02
    f940:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    f942:	18 86       	std	Y+8, r1	; 0x08
    f944:	1f 82       	std	Y+7, r1	; 0x07
    fn.buffer = (void *) fp;
    f946:	8d 85       	ldd	r24, Y+13	; 0x0d
    f948:	9e 85       	ldd	r25, Y+14	; 0x0e
    f94a:	9c 83       	std	Y+4, r25	; 0x04
    f94c:	8b 83       	std	Y+3, r24	; 0x03

    va_start(va, format);
    _printf_fn(&fn, format, va);
    f94e:	4f 85       	ldd	r20, Y+15	; 0x0f
    f950:	58 89       	ldd	r21, Y+16	; 0x10
    f952:	60 e8       	ldi	r22, 0x80	; 128
    f954:	9e 01       	movw	r18, r28
    f956:	2f 5e       	subi	r18, 0xEF	; 239
    f958:	3f 4f       	sbci	r19, 0xFF	; 255
    f95a:	ce 01       	movw	r24, r28
    f95c:	01 96       	adiw	r24, 0x01	; 1
    f95e:	0e 94 ad 40 	call	0x815a	; 0x815a <_printf_fn>
    va_end(va);

    return ((int)fn.sent);
}
    f962:	8f 81       	ldd	r24, Y+7	; 0x07
    f964:	98 85       	ldd	r25, Y+8	; 0x08
    f966:	28 96       	adiw	r28, 0x08	; 8
    f968:	e2 e0       	ldi	r30, 0x02	; 2
    f96a:	0c 94 35 e3 	jmp	0x1c66a	; 0x1c66a <__epilogue_restores__+0x20>

0000f96e <posix_help>:
MEMSPACE
int setpage(int count)
{
    _pagesize = count;
    return(_pagesize);
}
    f96e:	cf 93       	push	r28
    f970:	df 93       	push	r29
    f972:	00 d0       	rcall	.+0      	; 0xf974 <posix_help+0x6>
    f974:	1f 92       	push	r1
    f976:	ec 01       	movw	r28, r24
    f978:	80 ec       	ldi	r24, 0xC0	; 192
    f97a:	9e e0       	ldi	r25, 0x0E	; 14
    f97c:	a0 e0       	ldi	r26, 0x00	; 0
    f97e:	ed b7       	in	r30, 0x3d	; 61
    f980:	fe b7       	in	r31, 0x3e	; 62
    f982:	81 83       	std	Z+1, r24	; 0x01
    f984:	92 83       	std	Z+2, r25	; 0x02
    f986:	a3 83       	std	Z+3, r26	; 0x03
    f988:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    f98c:	cd 2b       	or	r28, r29
    f98e:	51 f0       	breq	.+20     	; 0xf9a4 <posix_help+0x36>
    f990:	8a ef       	ldi	r24, 0xFA	; 250
    f992:	9d e0       	ldi	r25, 0x0D	; 13
    f994:	a0 e0       	ldi	r26, 0x00	; 0
    f996:	ed b7       	in	r30, 0x3d	; 61
    f998:	fe b7       	in	r31, 0x3e	; 62
    f99a:	81 83       	std	Z+1, r24	; 0x01
    f99c:	92 83       	std	Z+2, r25	; 0x02
    f99e:	a3 83       	std	Z+3, r26	; 0x03
    f9a0:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    f9a4:	cd b7       	in	r28, 0x3d	; 61
    f9a6:	de b7       	in	r29, 0x3e	; 62
    f9a8:	23 96       	adiw	r28, 0x03	; 3
    f9aa:	e2 e0       	ldi	r30, 0x02	; 2
    f9ac:	0c 94 35 e3 	jmp	0x1c66a	; 0x1c66a <__epilogue_restores__+0x20>

0000f9b0 <copy>:
    f9b0:	4f 92       	push	r4
    f9b2:	5f 92       	push	r5
    f9b4:	6f 92       	push	r6
    f9b6:	8f 92       	push	r8
    f9b8:	9f 92       	push	r9
    f9ba:	af 92       	push	r10
    f9bc:	bf 92       	push	r11
    f9be:	cf 92       	push	r12
    f9c0:	df 92       	push	r13
    f9c2:	ef 92       	push	r14
    f9c4:	ff 92       	push	r15
    f9c6:	0f 93       	push	r16
    f9c8:	1f 93       	push	r17
    f9ca:	cf 93       	push	r28
    f9cc:	df 93       	push	r29
    f9ce:	ad b7       	in	r26, 0x3d	; 61
    f9d0:	be b7       	in	r27, 0x3e	; 62
    f9d2:	17 97       	sbiw	r26, 0x07	; 7
    f9d4:	0f b6       	in	r0, 0x3f	; 63
    f9d6:	f8 94       	cli
    f9d8:	be bf       	out	0x3e, r27	; 62
    f9da:	0f be       	out	0x3f, r0	; 63
    f9dc:	ad bf       	out	0x3d, r26	; 61
    f9de:	8c 01       	movw	r16, r24
    f9e0:	eb 01       	movw	r28, r22
    f9e2:	ed b7       	in	r30, 0x3d	; 61
    f9e4:	fe b7       	in	r31, 0x3e	; 62
    f9e6:	95 83       	std	Z+5, r25	; 0x05
    f9e8:	84 83       	std	Z+4, r24	; 0x04
    f9ea:	87 e5       	ldi	r24, 0x57	; 87
    f9ec:	9d e0       	ldi	r25, 0x0D	; 13
    f9ee:	a0 e0       	ldi	r26, 0x00	; 0
    f9f0:	81 83       	std	Z+1, r24	; 0x01
    f9f2:	92 83       	std	Z+2, r25	; 0x02
    f9f4:	a3 83       	std	Z+3, r26	; 0x03
    f9f6:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    f9fa:	6e ef       	ldi	r22, 0xFE	; 254
    f9fc:	78 e0       	ldi	r23, 0x08	; 8
    f9fe:	c8 01       	movw	r24, r16
    fa00:	8a df       	rcall	.-236    	; 0xf916 <fopen>
    fa02:	7c 01       	movw	r14, r24
    fa04:	ed b7       	in	r30, 0x3d	; 61
    fa06:	fe b7       	in	r31, 0x3e	; 62
    fa08:	89 2b       	or	r24, r25
    fa0a:	59 f4       	brne	.+22     	; 0xfa22 <copy+0x72>
    fa0c:	15 83       	std	Z+5, r17	; 0x05
    fa0e:	04 83       	std	Z+4, r16	; 0x04
    fa10:	87 e4       	ldi	r24, 0x47	; 71
    fa12:	9d e0       	ldi	r25, 0x0D	; 13
    fa14:	a0 e0       	ldi	r26, 0x00	; 0
    fa16:	81 83       	std	Z+1, r24	; 0x01
    fa18:	92 83       	std	Z+2, r25	; 0x02
    fa1a:	a3 83       	std	Z+3, r26	; 0x03
    fa1c:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    fa20:	20 c0       	rjmp	.+64     	; 0xfa62 <copy+0xb2>
    fa22:	d5 83       	std	Z+5, r29	; 0x05
    fa24:	c4 83       	std	Z+4, r28	; 0x04
    fa26:	8a e3       	ldi	r24, 0x3A	; 58
    fa28:	9d e0       	ldi	r25, 0x0D	; 13
    fa2a:	a0 e0       	ldi	r26, 0x00	; 0
    fa2c:	81 83       	std	Z+1, r24	; 0x01
    fa2e:	92 83       	std	Z+2, r25	; 0x02
    fa30:	a3 83       	std	Z+3, r26	; 0x03
    fa32:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    fa36:	6c e0       	ldi	r22, 0x0C	; 12
    fa38:	79 e0       	ldi	r23, 0x09	; 9
    fa3a:	ce 01       	movw	r24, r28
    fa3c:	6c df       	rcall	.-296    	; 0xf916 <fopen>
    fa3e:	8c 01       	movw	r16, r24
    fa40:	89 2b       	or	r24, r25
    fa42:	a1 f4       	brne	.+40     	; 0xfa6c <copy+0xbc>
    fa44:	ed b7       	in	r30, 0x3d	; 61
    fa46:	fe b7       	in	r31, 0x3e	; 62
    fa48:	d5 83       	std	Z+5, r29	; 0x05
    fa4a:	c4 83       	std	Z+4, r28	; 0x04
    fa4c:	8a e2       	ldi	r24, 0x2A	; 42
    fa4e:	9d e0       	ldi	r25, 0x0D	; 13
    fa50:	a0 e0       	ldi	r26, 0x00	; 0
    fa52:	81 83       	std	Z+1, r24	; 0x01
    fa54:	92 83       	std	Z+2, r25	; 0x02
    fa56:	a3 83       	std	Z+3, r26	; 0x03
    fa58:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    fa5c:	80 e0       	ldi	r24, 0x00	; 0
    fa5e:	90 e0       	ldi	r25, 0x00	; 0
    fa60:	04 de       	rcall	.-1016   	; 0xf66a <fclose>
    fa62:	6f ef       	ldi	r22, 0xFF	; 255
    fa64:	7f ef       	ldi	r23, 0xFF	; 255
    fa66:	8f ef       	ldi	r24, 0xFF	; 255
    fa68:	9f ef       	ldi	r25, 0xFF	; 255
    fa6a:	68 c0       	rjmp	.+208    	; 0xfb3c <copy+0x18c>
    fa6c:	61 e0       	ldi	r22, 0x01	; 1
    fa6e:	70 e0       	ldi	r23, 0x00	; 0
    fa70:	80 e0       	ldi	r24, 0x00	; 0
    fa72:	92 e0       	ldi	r25, 0x02	; 2
    fa74:	0e 94 fe 25 	call	0x4bfc	; 0x4bfc <safecalloc>
    fa78:	6c 01       	movw	r12, r24
    fa7a:	89 2b       	or	r24, r25
    fa7c:	21 f4       	brne	.+8      	; 0xfa86 <copy+0xd6>
    fa7e:	c7 01       	movw	r24, r14
    fa80:	f4 dd       	rcall	.-1048   	; 0xf66a <fclose>
    fa82:	c8 01       	movw	r24, r16
    fa84:	ed cf       	rjmp	.-38     	; 0xfa60 <copy+0xb0>
    fa86:	8d e1       	ldi	r24, 0x1D	; 29
    fa88:	9d e0       	ldi	r25, 0x0D	; 13
    fa8a:	a0 e0       	ldi	r26, 0x00	; 0
    fa8c:	ed b7       	in	r30, 0x3d	; 61
    fa8e:	fe b7       	in	r31, 0x3e	; 62
    fa90:	81 83       	std	Z+1, r24	; 0x01
    fa92:	92 83       	std	Z+2, r25	; 0x02
    fa94:	a3 83       	std	Z+3, r26	; 0x03
    fa96:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    fa9a:	81 2c       	mov	r8, r1
    fa9c:	91 2c       	mov	r9, r1
    fa9e:	54 01       	movw	r10, r8
    faa0:	81 e0       	ldi	r24, 0x01	; 1
    faa2:	9d e0       	ldi	r25, 0x0D	; 13
    faa4:	2c 01       	movw	r4, r24
    faa6:	61 2c       	mov	r6, r1
    faa8:	97 01       	movw	r18, r14
    faaa:	40 e0       	ldi	r20, 0x00	; 0
    faac:	52 e0       	ldi	r21, 0x02	; 2
    faae:	61 e0       	ldi	r22, 0x01	; 1
    fab0:	70 e0       	ldi	r23, 0x00	; 0
    fab2:	c6 01       	movw	r24, r12
    fab4:	86 dc       	rcall	.-1780   	; 0xf3c2 <fread>
    fab6:	ec 01       	movw	r28, r24
    fab8:	18 16       	cp	r1, r24
    faba:	19 06       	cpc	r1, r25
    fabc:	44 f5       	brge	.+80     	; 0xfb0e <copy+0x15e>
    fabe:	98 01       	movw	r18, r16
    fac0:	ae 01       	movw	r20, r28
    fac2:	61 e0       	ldi	r22, 0x01	; 1
    fac4:	70 e0       	ldi	r23, 0x00	; 0
    fac6:	c6 01       	movw	r24, r12
    fac8:	4e dd       	rcall	.-1380   	; 0xf566 <fwrite>
    faca:	8c 17       	cp	r24, r28
    facc:	9d 07       	cpc	r25, r29
    face:	5c f4       	brge	.+22     	; 0xfae6 <copy+0x136>
    fad0:	80 e1       	ldi	r24, 0x10	; 16
    fad2:	9d e0       	ldi	r25, 0x0D	; 13
    fad4:	a0 e0       	ldi	r26, 0x00	; 0
    fad6:	ed b7       	in	r30, 0x3d	; 61
    fad8:	fe b7       	in	r31, 0x3e	; 62
    fada:	81 83       	std	Z+1, r24	; 0x01
    fadc:	92 83       	std	Z+2, r25	; 0x02
    fade:	a3 83       	std	Z+3, r26	; 0x03
    fae0:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    fae4:	14 c0       	rjmp	.+40     	; 0xfb0e <copy+0x15e>
    fae6:	ce 01       	movw	r24, r28
    fae8:	dd 0f       	add	r29, r29
    faea:	aa 0b       	sbc	r26, r26
    faec:	bb 0b       	sbc	r27, r27
    faee:	88 0e       	add	r8, r24
    faf0:	99 1e       	adc	r9, r25
    faf2:	aa 1e       	adc	r10, r26
    faf4:	bb 1e       	adc	r11, r27
    faf6:	ed b7       	in	r30, 0x3d	; 61
    faf8:	fe b7       	in	r31, 0x3e	; 62
    fafa:	84 82       	std	Z+4, r8	; 0x04
    fafc:	95 82       	std	Z+5, r9	; 0x05
    fafe:	a6 82       	std	Z+6, r10	; 0x06
    fb00:	b7 82       	std	Z+7, r11	; 0x07
    fb02:	41 82       	std	Z+1, r4	; 0x01
    fb04:	52 82       	std	Z+2, r5	; 0x02
    fb06:	63 82       	std	Z+3, r6	; 0x03
    fb08:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    fb0c:	cd cf       	rjmp	.-102    	; 0xfaa8 <copy+0xf8>
    fb0e:	ed b7       	in	r30, 0x3d	; 61
    fb10:	fe b7       	in	r31, 0x3e	; 62
    fb12:	84 82       	std	Z+4, r8	; 0x04
    fb14:	95 82       	std	Z+5, r9	; 0x05
    fb16:	a6 82       	std	Z+6, r10	; 0x06
    fb18:	b7 82       	std	Z+7, r11	; 0x07
    fb1a:	8e ee       	ldi	r24, 0xEE	; 238
    fb1c:	9c e0       	ldi	r25, 0x0C	; 12
    fb1e:	a0 e0       	ldi	r26, 0x00	; 0
    fb20:	81 83       	std	Z+1, r24	; 0x01
    fb22:	92 83       	std	Z+2, r25	; 0x02
    fb24:	a3 83       	std	Z+3, r26	; 0x03
    fb26:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    fb2a:	c6 01       	movw	r24, r12
    fb2c:	0e 94 4a 26 	call	0x4c94	; 0x4c94 <safefree>
    fb30:	c7 01       	movw	r24, r14
    fb32:	9b dd       	rcall	.-1226   	; 0xf66a <fclose>
    fb34:	c8 01       	movw	r24, r16
    fb36:	99 dd       	rcall	.-1230   	; 0xf66a <fclose>
    fb38:	b4 01       	movw	r22, r8
    fb3a:	c5 01       	movw	r24, r10
    fb3c:	ad b7       	in	r26, 0x3d	; 61
    fb3e:	be b7       	in	r27, 0x3e	; 62
    fb40:	17 96       	adiw	r26, 0x07	; 7
    fb42:	0f b6       	in	r0, 0x3f	; 63
    fb44:	f8 94       	cli
    fb46:	be bf       	out	0x3e, r27	; 62
    fb48:	0f be       	out	0x3f, r0	; 63
    fb4a:	ad bf       	out	0x3d, r26	; 61
    fb4c:	df 91       	pop	r29
    fb4e:	cf 91       	pop	r28
    fb50:	1f 91       	pop	r17
    fb52:	0f 91       	pop	r16
    fb54:	ff 90       	pop	r15
    fb56:	ef 90       	pop	r14
    fb58:	df 90       	pop	r13
    fb5a:	cf 90       	pop	r12
    fb5c:	bf 90       	pop	r11
    fb5e:	af 90       	pop	r10
    fb60:	9f 90       	pop	r9
    fb62:	8f 90       	pop	r8
    fb64:	6f 90       	pop	r6
    fb66:	5f 90       	pop	r5
    fb68:	4f 90       	pop	r4
    fb6a:	08 95       	ret

0000fb6c <testpage>:
/// @brief Used to page output of functions like cat, hexdump, etc
/// @param[in] *name: file to hexdump
/// @retrun -1 = quit, return count or 0 at new page
MEMSPACE
int testpage(int count)
{
    fb6c:	cf 93       	push	r28
    fb6e:	df 93       	push	r29
    fb70:	00 d0       	rcall	.+0      	; 0xfb72 <testpage+0x6>
    fb72:	1f 92       	push	r1
    int c;
    if(count >= _pagesize)
    fb74:	20 91 80 01 	lds	r18, 0x0180	; 0x800180 <_pagesize>
    fb78:	30 91 81 01 	lds	r19, 0x0181	; 0x800181 <_pagesize+0x1>
    fb7c:	82 17       	cp	r24, r18
    fb7e:	93 07       	cpc	r25, r19
    fb80:	3c f1       	brlt	.+78     	; 0xfbd0 <testpage+0x64>
    {
        printf("More..");
    fb82:	87 ee       	ldi	r24, 0xE7	; 231
    fb84:	9c e0       	ldi	r25, 0x0C	; 12
    fb86:	a0 e0       	ldi	r26, 0x00	; 0
    fb88:	ed b7       	in	r30, 0x3d	; 61
    fb8a:	fe b7       	in	r31, 0x3e	; 62
    fb8c:	81 83       	std	Z+1, r24	; 0x01
    fb8e:	92 83       	std	Z+2, r25	; 0x02
    fb90:	a3 83       	std	Z+3, r26	; 0x03
    fb92:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
        {
            optimistic_yield(1000);
            wdt_reset();
        }
#endif
        c = getchar();
    fb96:	0e 94 97 74 	call	0xe92e	; 0xe92e <getchar>
    fb9a:	ec 01       	movw	r28, r24
        printf("\r");
    fb9c:	85 ee       	ldi	r24, 0xE5	; 229
    fb9e:	9c e0       	ldi	r25, 0x0C	; 12
    fba0:	a0 e0       	ldi	r26, 0x00	; 0
    fba2:	ed b7       	in	r30, 0x3d	; 61
    fba4:	fe b7       	in	r31, 0x3e	; 62
    fba6:	81 83       	std	Z+1, r24	; 0x01
    fba8:	92 83       	std	Z+2, r25	; 0x02
    fbaa:	a3 83       	std	Z+3, r26	; 0x03
    fbac:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
        if(c == 'q')
    fbb0:	c1 37       	cpi	r28, 0x71	; 113
    fbb2:	d1 05       	cpc	r29, r1
    fbb4:	41 f0       	breq	.+16     	; 0xfbc6 <testpage+0x5a>
            return(-1);                           // quit
        if(c == '\n')
    fbb6:	2a 97       	sbiw	r28, 0x0a	; 10
    fbb8:	49 f4       	brne	.+18     	; 0xfbcc <testpage+0x60>
            return(_pagesize-1);                  // single line
    fbba:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <_pagesize>
    fbbe:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <_pagesize+0x1>
    fbc2:	01 97       	sbiw	r24, 0x01	; 1
    fbc4:	05 c0       	rjmp	.+10     	; 0xfbd0 <testpage+0x64>
        }
#endif
        c = getchar();
        printf("\r");
        if(c == 'q')
            return(-1);                           // quit
    fbc6:	8f ef       	ldi	r24, 0xFF	; 255
    fbc8:	9f ef       	ldi	r25, 0xFF	; 255
    fbca:	02 c0       	rjmp	.+4      	; 0xfbd0 <testpage+0x64>
        if(c == '\n')
            return(_pagesize-1);                  // single line
        return(0);                                // new page
    fbcc:	80 e0       	ldi	r24, 0x00	; 0
    fbce:	90 e0       	ldi	r25, 0x00	; 0
    }
    return (count);
}
    fbd0:	cd b7       	in	r28, 0x3d	; 61
    fbd2:	de b7       	in	r29, 0x3e	; 62
    fbd4:	23 96       	adiw	r28, 0x03	; 3
    fbd6:	e2 e0       	ldi	r30, 0x02	; 2
    fbd8:	0c 94 35 e3 	jmp	0x1c66a	; 0x1c66a <__epilogue_restores__+0x20>

0000fbdc <cat>:
/// @param[in] name: file name.
/// @param[in] option: --p page display
/// @return  number of characters in file or -1 on error
MEMSPACE
long cat(char *name, int dopage)
{
    fbdc:	a7 e0       	ldi	r26, 0x07	; 7
    fbde:	b1 e0       	ldi	r27, 0x01	; 1
    fbe0:	e4 ef       	ldi	r30, 0xF4	; 244
    fbe2:	fd e7       	ldi	r31, 0x7D	; 125
    fbe4:	0c 94 0f e3 	jmp	0x1c61e	; 0x1c61e <__prologue_saves__+0xc>
    fbe8:	8c 01       	movw	r16, r24
    fbea:	4b 01       	movw	r8, r22
    FILE *fp;
    int count = 0;
    int size = 0;
    char line[256];

    fp = fopen(name,"rb");
    fbec:	6e ef       	ldi	r22, 0xFE	; 254
    fbee:	78 e0       	ldi	r23, 0x08	; 8
    fbf0:	92 de       	rcall	.-732    	; 0xf916 <fopen>
    fbf2:	7c 01       	movw	r14, r24
    if (!fp)
    fbf4:	89 2b       	or	r24, r25
    fbf6:	41 f0       	breq	.+16     	; 0xfc08 <cat+0x2c>
    fbf8:	c1 2c       	mov	r12, r1
    fbfa:	d1 2c       	mov	r13, r1
    fbfc:	a1 2c       	mov	r10, r1
    fbfe:	b1 2c       	mov	r11, r1
    {
        printf("Can't open: %s\n", name);
        return(-1);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    fc00:	8e 01       	movw	r16, r28
    fc02:	08 5f       	subi	r16, 0xF8	; 248
    fc04:	1f 4f       	sbci	r17, 0xFF	; 255
    fc06:	23 c0       	rjmp	.+70     	; 0xfc4e <cat+0x72>
    char line[256];

    fp = fopen(name,"rb");
    if (!fp)
    {
        printf("Can't open: %s\n", name);
    fc08:	ed b7       	in	r30, 0x3d	; 61
    fc0a:	fe b7       	in	r31, 0x3e	; 62
    fc0c:	15 83       	std	Z+5, r17	; 0x05
    fc0e:	04 83       	std	Z+4, r16	; 0x04
    fc10:	80 e7       	ldi	r24, 0x70	; 112
    fc12:	9d e0       	ldi	r25, 0x0D	; 13
    fc14:	a0 e0       	ldi	r26, 0x00	; 0
    fc16:	81 83       	std	Z+1, r24	; 0x01
    fc18:	92 83       	std	Z+2, r25	; 0x02
    fc1a:	a3 83       	std	Z+3, r26	; 0x03
    fc1c:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
        return(-1);
    fc20:	cc 24       	eor	r12, r12
    fc22:	ca 94       	dec	r12
    fc24:	dc 2c       	mov	r13, r12
    fc26:	76 01       	movw	r14, r12
    fc28:	3f c0       	rjmp	.+126    	; 0xfca8 <cat+0xcc>
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    {
        trim_tail(line);
    fc2a:	c8 01       	movw	r24, r16
    fc2c:	0e 94 71 30 	call	0x60e2	; 0x60e2 <trim_tail>
        size += strlen(line);
    fc30:	f8 01       	movw	r30, r16
    fc32:	01 90       	ld	r0, Z+
    fc34:	00 20       	and	r0, r0
    fc36:	e9 f7       	brne	.-6      	; 0xfc32 <cat+0x56>
    fc38:	31 97       	sbiw	r30, 0x01	; 1
    fc3a:	e0 1b       	sub	r30, r16
    fc3c:	f1 0b       	sbc	r31, r17
    fc3e:	ce 0e       	add	r12, r30
    fc40:	df 1e       	adc	r13, r31
        puts(line);
    fc42:	c8 01       	movw	r24, r16
    fc44:	0e 94 ef 74 	call	0xe9de	; 0xe9de <puts>
        if(dopage)
    fc48:	81 14       	cp	r8, r1
    fc4a:	91 04       	cpc	r9, r1
    fc4c:	49 f4       	brne	.+18     	; 0xfc60 <cat+0x84>
    if (!fp)
    {
        printf("Can't open: %s\n", name);
        return(-1);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    fc4e:	a7 01       	movw	r20, r14
    fc50:	6e ef       	ldi	r22, 0xFE	; 254
    fc52:	70 e0       	ldi	r23, 0x00	; 0
    fc54:	c8 01       	movw	r24, r16
    fc56:	0e 94 a3 74 	call	0xe946	; 0xe946 <fgets>
    fc5a:	89 2b       	or	r24, r25
    fc5c:	31 f7       	brne	.-52     	; 0xfc2a <cat+0x4e>
    fc5e:	06 c0       	rjmp	.+12     	; 0xfc6c <cat+0x90>
        trim_tail(line);
        size += strlen(line);
        puts(line);
        if(dopage)
        {
            count = testpage(++count);
    fc60:	c5 01       	movw	r24, r10
    fc62:	01 96       	adiw	r24, 0x01	; 1
    fc64:	83 df       	rcall	.-250    	; 0xfb6c <testpage>
    fc66:	5c 01       	movw	r10, r24
            if(count < 0)
    fc68:	97 ff       	sbrs	r25, 7
    fc6a:	f1 cf       	rjmp	.-30     	; 0xfc4e <cat+0x72>
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    printf("\n");
    fc6c:	8e e6       	ldi	r24, 0x6E	; 110
    fc6e:	9d e0       	ldi	r25, 0x0D	; 13
    fc70:	a0 e0       	ldi	r26, 0x00	; 0
    fc72:	ed b7       	in	r30, 0x3d	; 61
    fc74:	fe b7       	in	r31, 0x3e	; 62
    fc76:	81 83       	std	Z+1, r24	; 0x01
    fc78:	92 83       	std	Z+2, r25	; 0x02
    fc7a:	a3 83       	std	Z+3, r26	; 0x03
    fc7c:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    fclose(fp);
    fc80:	c7 01       	movw	r24, r14
    fc82:	f3 dc       	rcall	.-1562   	; 0xf66a <fclose>
    printf("%ld bytes\n", (long)size);
    fc84:	0d 2c       	mov	r0, r13
    fc86:	00 0c       	add	r0, r0
    fc88:	ee 08       	sbc	r14, r14
    fc8a:	ff 08       	sbc	r15, r15
    fc8c:	ed b7       	in	r30, 0x3d	; 61
    fc8e:	fe b7       	in	r31, 0x3e	; 62
    fc90:	c4 82       	std	Z+4, r12	; 0x04
    fc92:	d5 82       	std	Z+5, r13	; 0x05
    fc94:	e6 82       	std	Z+6, r14	; 0x06
    fc96:	f7 82       	std	Z+7, r15	; 0x07
    fc98:	83 e6       	ldi	r24, 0x63	; 99
    fc9a:	9d e0       	ldi	r25, 0x0D	; 13
    fc9c:	a0 e0       	ldi	r26, 0x00	; 0
    fc9e:	81 83       	std	Z+1, r24	; 0x01
    fca0:	92 83       	std	Z+2, r25	; 0x02
    fca2:	a3 83       	std	Z+3, r26	; 0x03
    fca4:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    return(size);
}
    fca8:	c7 01       	movw	r24, r14
    fcaa:	b6 01       	movw	r22, r12
    fcac:	c9 5f       	subi	r28, 0xF9	; 249
    fcae:	de 4f       	sbci	r29, 0xFE	; 254
    fcb0:	ec e0       	ldi	r30, 0x0C	; 12
    fcb2:	0c 94 2b e3 	jmp	0x1c656	; 0x1c656 <__epilogue_restores__+0xc>

0000fcb6 <ls_info>:
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
    fcb6:	4f 92       	push	r4
    fcb8:	5f 92       	push	r5
    fcba:	6f 92       	push	r6
    fcbc:	7f 92       	push	r7
    fcbe:	af 92       	push	r10
    fcc0:	bf 92       	push	r11
    fcc2:	cf 92       	push	r12
    fcc4:	df 92       	push	r13
    fcc6:	ef 92       	push	r14
    fcc8:	ff 92       	push	r15
    fcca:	0f 93       	push	r16
    fccc:	1f 93       	push	r17
    fcce:	cf 93       	push	r28
    fcd0:	df 93       	push	r29
    fcd2:	cd b7       	in	r28, 0x3d	; 61
    fcd4:	de b7       	in	r29, 0x3e	; 62
    fcd6:	c9 54       	subi	r28, 0x49	; 73
    fcd8:	d1 09       	sbc	r29, r1
    fcda:	0f b6       	in	r0, 0x3f	; 63
    fcdc:	f8 94       	cli
    fcde:	de bf       	out	0x3e, r29	; 62
    fce0:	0f be       	out	0x3f, r0	; 63
    fce2:	cd bf       	out	0x3d, r28	; 61
    fce4:	8c 01       	movw	r16, r24
    fce6:	7b 01       	movw	r14, r22
    struct stat sp;
    uint16_t mask;
    char *cm = "rwx";
    char attr[12], *p;

    if(stat(name, &sp) == -1)
    fce8:	be 01       	movw	r22, r28
    fcea:	62 5f       	subi	r22, 0xF2	; 242
    fcec:	7f 4f       	sbci	r23, 0xFF	; 255
    fcee:	18 d9       	rcall	.-3536   	; 0xef20 <stat>
    fcf0:	01 96       	adiw	r24, 0x01	; 1
    fcf2:	79 f4       	brne	.+30     	; 0xfd12 <ls_info+0x5c>
    {
        printf("can not stat: %s\n", name);
    fcf4:	ed b7       	in	r30, 0x3d	; 61
    fcf6:	fe b7       	in	r31, 0x3e	; 62
    fcf8:	15 83       	std	Z+5, r17	; 0x05
    fcfa:	04 83       	std	Z+4, r16	; 0x04
    fcfc:	83 ed       	ldi	r24, 0xD3	; 211
    fcfe:	9c e0       	ldi	r25, 0x0C	; 12
    fd00:	a0 e0       	ldi	r26, 0x00	; 0
    fd02:	81 83       	std	Z+1, r24	; 0x01
    fd04:	92 83       	std	Z+2, r25	; 0x02
    fd06:	a3 83       	std	Z+3, r26	; 0x03
    fd08:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
        return(0);
    fd0c:	80 e0       	ldi	r24, 0x00	; 0
    fd0e:	90 e0       	ldi	r25, 0x00	; 0
    fd10:	77 c0       	rjmp	.+238    	; 0xfe00 <ls_info+0x14a>
    }

    if(!verbose)
    fd12:	ef 28       	or	r14, r15
    fd14:	81 f4       	brne	.+32     	; 0xfd36 <ls_info+0x80>
    {
        printf("%s\n",basename(name));
    fd16:	c8 01       	movw	r24, r16
    fd18:	0e 94 5c 75 	call	0xeab8	; 0xeab8 <basename>
    fd1c:	ed b7       	in	r30, 0x3d	; 61
    fd1e:	fe b7       	in	r31, 0x3e	; 62
    fd20:	95 83       	std	Z+5, r25	; 0x05
    fd22:	84 83       	std	Z+4, r24	; 0x04
    fd24:	8f ec       	ldi	r24, 0xCF	; 207
    fd26:	9c e0       	ldi	r25, 0x0C	; 12
    fd28:	a0 e0       	ldi	r26, 0x00	; 0
    fd2a:	81 83       	std	Z+1, r24	; 0x01
    fd2c:	92 83       	std	Z+2, r25	; 0x02
    fd2e:	a3 83       	std	Z+3, r26	; 0x03
    fd30:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    fd34:	63 c0       	rjmp	.+198    	; 0xfdfc <ls_info+0x146>
        return(1);
    }

    p = attr;
    if(S_ISDIR(sp.st_mode))
    fd36:	4e 88       	ldd	r4, Y+22	; 0x16
    fd38:	5f 88       	ldd	r5, Y+23	; 0x17
    fd3a:	68 8c       	ldd	r6, Y+24	; 0x18
    fd3c:	79 8c       	ldd	r7, Y+25	; 0x19
    fd3e:	d3 01       	movw	r26, r6
    fd40:	c2 01       	movw	r24, r4
    fd42:	88 27       	eor	r24, r24
    fd44:	90 7f       	andi	r25, 0xF0	; 240
    fd46:	aa 27       	eor	r26, r26
    fd48:	bb 27       	eor	r27, r27
    fd4a:	81 15       	cp	r24, r1
    fd4c:	90 44       	sbci	r25, 0x40	; 64
    fd4e:	a1 05       	cpc	r26, r1
    fd50:	b1 05       	cpc	r27, r1
    fd52:	11 f4       	brne	.+4      	; 0xfd58 <ls_info+0xa2>
        *p++ = 'd';
    fd54:	84 e6       	ldi	r24, 0x64	; 100
    fd56:	01 c0       	rjmp	.+2      	; 0xfd5a <ls_info+0xa4>
    else
        *p++ = '-';
    fd58:	8d e2       	ldi	r24, 0x2D	; 45
    fd5a:	8e af       	std	Y+62, r24	; 0x3e
    fd5c:	fe 01       	movw	r30, r28
    fd5e:	fe 96       	adiw	r30, 0x3e	; 62
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
    fd60:	e1 2c       	mov	r14, r1
    fd62:	ff 24       	eor	r15, r15
    fd64:	f3 94       	inc	r15
    fd66:	20 e0       	ldi	r18, 0x00	; 0
    fd68:	30 e0       	ldi	r19, 0x00	; 0
    fd6a:	be 2e       	mov	r11, r30
    fd6c:	af 2e       	mov	r10, r31
    {
// User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
    fd6e:	4d e2       	ldi	r20, 0x2D	; 45
    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
// User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
    fd70:	53 e0       	ldi	r21, 0x03	; 3
    fd72:	c5 2e       	mov	r12, r21
    fd74:	d1 2c       	mov	r13, r1

    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
// User
        if( sp.st_mode & mask)
    fd76:	c7 01       	movw	r24, r14
    fd78:	a0 e0       	ldi	r26, 0x00	; 0
    fd7a:	b0 e0       	ldi	r27, 0x00	; 0
    fd7c:	84 21       	and	r24, r4
    fd7e:	95 21       	and	r25, r5
    fd80:	a6 21       	and	r26, r6
    fd82:	b7 21       	and	r27, r7
    fd84:	89 2b       	or	r24, r25
    fd86:	8a 2b       	or	r24, r26
    fd88:	8b 2b       	or	r24, r27
    fd8a:	51 f0       	breq	.+20     	; 0xfda0 <ls_info+0xea>
            *p++ = cm[ i % 3];
    fd8c:	c9 01       	movw	r24, r18
    fd8e:	b6 01       	movw	r22, r12
    fd90:	0e 94 89 e2 	call	0x1c512	; 0x1c512 <__divmodhi4>
    fd94:	dc 01       	movw	r26, r24
    fd96:	a6 54       	subi	r26, 0x46	; 70
    fd98:	b4 4f       	sbci	r27, 0xF4	; 244
    fd9a:	8c 91       	ld	r24, X
    fd9c:	81 83       	std	Z+1, r24	; 0x01
    fd9e:	01 c0       	rjmp	.+2      	; 0xfda2 <ls_info+0xec>
        else
            *p++ = '-';
    fda0:	41 83       	std	Z+1, r20	; 0x01
        mask >>= 1;
    fda2:	f6 94       	lsr	r15
    fda4:	e7 94       	ror	r14
        *p++ = 'd';
    else
        *p++ = '-';

    mask = 4 << 6;
    for(i=0;i<9;++i)
    fda6:	2f 5f       	subi	r18, 0xFF	; 255
    fda8:	3f 4f       	sbci	r19, 0xFF	; 255
    fdaa:	31 96       	adiw	r30, 0x01	; 1
    fdac:	29 30       	cpi	r18, 0x09	; 9
    fdae:	31 05       	cpc	r19, r1
    fdb0:	11 f7       	brne	.-60     	; 0xfd76 <ls_info+0xc0>
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
        mask >>= 1;
    }
    *p = 0;
    fdb2:	29 96       	adiw	r28, 0x09	; 9
    fdb4:	1f ae       	std	Y+63, r1	; 0x3f
    fdb6:	29 97       	sbiw	r28, 0x09	; 9

    printf("%s none none %12ld %s %s\n",
    fdb8:	4e a0       	ldd	r4, Y+38	; 0x26
    fdba:	5f a0       	ldd	r5, Y+39	; 0x27
    fdbc:	68 a4       	ldd	r6, Y+40	; 0x28
    fdbe:	79 a4       	ldd	r7, Y+41	; 0x29
    fdc0:	6e a9       	ldd	r22, Y+54	; 0x36
    fdc2:	7f a9       	ldd	r23, Y+55	; 0x37
    fdc4:	88 ad       	ldd	r24, Y+56	; 0x38
    fdc6:	99 ad       	ldd	r25, Y+57	; 0x39
    fdc8:	0e 94 37 75 	call	0xea6e	; 0xea6e <mctime>
    fdcc:	7c 01       	movw	r14, r24
    fdce:	c8 01       	movw	r24, r16
    fdd0:	0e 94 5c 75 	call	0xeab8	; 0xeab8 <basename>
    fdd4:	ed b7       	in	r30, 0x3d	; 61
    fdd6:	fe b7       	in	r31, 0x3e	; 62
    fdd8:	95 87       	std	Z+13, r25	; 0x0d
    fdda:	84 87       	std	Z+12, r24	; 0x0c
    fddc:	f3 86       	std	Z+11, r15	; 0x0b
    fdde:	e2 86       	std	Z+10, r14	; 0x0a
    fde0:	46 82       	std	Z+6, r4	; 0x06
    fde2:	57 82       	std	Z+7, r5	; 0x07
    fde4:	60 86       	std	Z+8, r6	; 0x08
    fde6:	71 86       	std	Z+9, r7	; 0x09
    fde8:	b4 82       	std	Z+4, r11	; 0x04
    fdea:	a5 82       	std	Z+5, r10	; 0x05
    fdec:	85 eb       	ldi	r24, 0xB5	; 181
    fdee:	9c e0       	ldi	r25, 0x0C	; 12
    fdf0:	a0 e0       	ldi	r26, 0x00	; 0
    fdf2:	81 83       	std	Z+1, r24	; 0x01
    fdf4:	92 83       	std	Z+2, r25	; 0x02
    fdf6:	a3 83       	std	Z+3, r26	; 0x03
    fdf8:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
        attr,
        (long) sp.st_size,
        mctime((time_t)sp.st_mtime),
        basename(name));
    return(1);
    fdfc:	81 e0       	ldi	r24, 0x01	; 1
    fdfe:	90 e0       	ldi	r25, 0x00	; 0
}
    fe00:	c7 5b       	subi	r28, 0xB7	; 183
    fe02:	df 4f       	sbci	r29, 0xFF	; 255
    fe04:	0f b6       	in	r0, 0x3f	; 63
    fe06:	f8 94       	cli
    fe08:	de bf       	out	0x3e, r29	; 62
    fe0a:	0f be       	out	0x3f, r0	; 63
    fe0c:	cd bf       	out	0x3d, r28	; 61
    fe0e:	df 91       	pop	r29
    fe10:	cf 91       	pop	r28
    fe12:	1f 91       	pop	r17
    fe14:	0f 91       	pop	r16
    fe16:	ff 90       	pop	r15
    fe18:	ef 90       	pop	r14
    fe1a:	df 90       	pop	r13
    fe1c:	cf 90       	pop	r12
    fe1e:	bf 90       	pop	r11
    fe20:	af 90       	pop	r10
    fe22:	7f 90       	pop	r7
    fe24:	6f 90       	pop	r6
    fe26:	5f 90       	pop	r5
    fe28:	4f 90       	pop	r4
    fe2a:	08 95       	ret

0000fe2c <ls>:
/// @param[in] path: file name or directory
/// @param[in] option: -l for detail
/// @return  number of files or -1 on error
MEMSPACE
int ls(char *name, int verbose)
{
    fe2c:	2f 92       	push	r2
    fe2e:	3f 92       	push	r3
    fe30:	4f 92       	push	r4
    fe32:	5f 92       	push	r5
    fe34:	6f 92       	push	r6
    fe36:	8f 92       	push	r8
    fe38:	9f 92       	push	r9
    fe3a:	af 92       	push	r10
    fe3c:	bf 92       	push	r11
    fe3e:	cf 92       	push	r12
    fe40:	df 92       	push	r13
    fe42:	ef 92       	push	r14
    fe44:	ff 92       	push	r15
    fe46:	0f 93       	push	r16
    fe48:	1f 93       	push	r17
    fe4a:	cf 93       	push	r28
    fe4c:	df 93       	push	r29
    fe4e:	cd b7       	in	r28, 0x3d	; 61
    fe50:	de b7       	in	r29, 0x3e	; 62
    fe52:	c8 53       	subi	r28, 0x38	; 56
    fe54:	d1 40       	sbci	r29, 0x01	; 1
    fe56:	0f b6       	in	r0, 0x3f	; 63
    fe58:	f8 94       	cli
    fe5a:	de bf       	out	0x3e, r29	; 62
    fe5c:	0f be       	out	0x3f, r0	; 63
    fe5e:	cd bf       	out	0x3d, r28	; 61
    fe60:	7c 01       	movw	r14, r24
    fe62:	4b 01       	movw	r8, r22
    int files = 0;
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
    fe64:	1e 82       	std	Y+6, r1	; 0x06
    fe66:	8e 01       	movw	r16, r28
    fe68:	0a 5f       	subi	r16, 0xFA	; 250
    fe6a:	1f 4f       	sbci	r17, 0xFF	; 255
    if(!name || !*name || MATCH(name,".") )
    fe6c:	00 97       	sbiw	r24, 0x00	; 0
    fe6e:	51 f4       	brne	.+20     	; 0xfe84 <ls+0x58>
    {
        if( !getcwd(fullpath, sizeof(fullpath)-2) )
    fe70:	6f ef       	ldi	r22, 0xFF	; 255
    fe72:	70 e0       	ldi	r23, 0x00	; 0
    fe74:	c8 01       	movw	r24, r16
    fe76:	0e 94 b2 75 	call	0xeb64	; 0xeb64 <getcwd>
    fe7a:	89 2b       	or	r24, r25
    fe7c:	91 f4       	brne	.+36     	; 0xfea2 <ls+0x76>
        {
            printf("ls: Can't get current directory\n");
    fe7e:	84 e9       	ldi	r24, 0x94	; 148
    fe80:	9c e0       	ldi	r25, 0x0C	; 12
    fe82:	6a c0       	rjmp	.+212    	; 0xff58 <__DATA_REGION_LENGTH__+0x58>
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
    if(!name || !*name || MATCH(name,".") )
    fe84:	fc 01       	movw	r30, r24
    fe86:	80 81       	ld	r24, Z
    fe88:	88 23       	and	r24, r24
    fe8a:	91 f3       	breq	.-28     	; 0xfe70 <ls+0x44>
    fe8c:	6d ef       	ldi	r22, 0xFD	; 253
    fe8e:	72 e1       	ldi	r23, 0x12	; 18
    fe90:	c7 01       	movw	r24, r14
    fe92:	0e 94 8b 30 	call	0x6116	; 0x6116 <MATCH>
    fe96:	89 2b       	or	r24, r25
    fe98:	59 f7       	brne	.-42     	; 0xfe70 <ls+0x44>

        }
    }
    else
    {
        strcpy(fullpath,name);
    fe9a:	b7 01       	movw	r22, r14
    fe9c:	c8 01       	movw	r24, r16
    fe9e:	0e 94 93 2f 	call	0x5f26	; 0x5f26 <strcpy>
    }
    len = strlen(fullpath);
    fea2:	f8 01       	movw	r30, r16
    fea4:	01 90       	ld	r0, Z+
    fea6:	00 20       	and	r0, r0
    fea8:	e9 f7       	brne	.-6      	; 0xfea4 <ls+0x78>
    feaa:	31 97       	sbiw	r30, 0x01	; 1
    feac:	1f 01       	movw	r2, r30
    feae:	20 1a       	sub	r2, r16
    feb0:	31 0a       	sbc	r3, r17


    if (stat(fullpath, &st))
    feb2:	be 01       	movw	r22, r28
    feb4:	69 5f       	subi	r22, 0xF9	; 249
    feb6:	7e 4f       	sbci	r23, 0xFE	; 254
    feb8:	c8 01       	movw	r24, r16
    feba:	32 d8       	rcall	.-3996   	; 0xef20 <stat>
    {
        printf("ls: cannot stat [%s]\n", fullpath);
    febc:	ed b7       	in	r30, 0x3d	; 61
    febe:	fe b7       	in	r31, 0x3e	; 62
    fec0:	15 83       	std	Z+5, r17	; 0x05
    fec2:	04 83       	std	Z+4, r16	; 0x04
        strcpy(fullpath,name);
    }
    len = strlen(fullpath);


    if (stat(fullpath, &st))
    fec4:	89 2b       	or	r24, r25
    fec6:	59 f0       	breq	.+22     	; 0xfede <ls+0xb2>
    {
        printf("ls: cannot stat [%s]\n", fullpath);
    fec8:	8e e7       	ldi	r24, 0x7E	; 126
    feca:	9c e0       	ldi	r25, 0x0C	; 12
    fecc:	a0 e0       	ldi	r26, 0x00	; 0
    fece:	81 83       	std	Z+1, r24	; 0x01
    fed0:	92 83       	std	Z+2, r25	; 0x02
    fed2:	a3 83       	std	Z+3, r26	; 0x03
    fed4:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
        return(-1);
    fed8:	8f ef       	ldi	r24, 0xFF	; 255
    feda:	9f ef       	ldi	r25, 0xFF	; 255
    fedc:	96 c0       	rjmp	.+300    	; 0x1000a <__EEPROM_REGION_LENGTH__+0xa>
    }
    printf("Listing:[%s]\n",fullpath);
    fede:	80 e7       	ldi	r24, 0x70	; 112
    fee0:	9c e0       	ldi	r25, 0x0C	; 12
    fee2:	a0 e0       	ldi	r26, 0x00	; 0
    fee4:	81 83       	std	Z+1, r24	; 0x01
    fee6:	92 83       	std	Z+2, r25	; 0x02
    fee8:	a3 83       	std	Z+3, r26	; 0x03
    feea:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>

    switch (st.st_mode & S_IFMT)
    feee:	c1 5f       	subi	r28, 0xF1	; 241
    fef0:	de 4f       	sbci	r29, 0xFE	; 254
    fef2:	88 81       	ld	r24, Y
    fef4:	99 81       	ldd	r25, Y+1	; 0x01
    fef6:	aa 81       	ldd	r26, Y+2	; 0x02
    fef8:	bb 81       	ldd	r27, Y+3	; 0x03
    fefa:	cf 50       	subi	r28, 0x0F	; 15
    fefc:	d1 40       	sbci	r29, 0x01	; 1
    fefe:	88 27       	eor	r24, r24
    ff00:	90 7f       	andi	r25, 0xF0	; 240
    ff02:	aa 27       	eor	r26, r26
    ff04:	bb 27       	eor	r27, r27
    ff06:	81 15       	cp	r24, r1
    ff08:	f0 e4       	ldi	r31, 0x40	; 64
    ff0a:	9f 07       	cpc	r25, r31
    ff0c:	a1 05       	cpc	r26, r1
    ff0e:	b1 05       	cpc	r27, r1
    ff10:	59 f0       	breq	.+22     	; 0xff28 <__DATA_REGION_LENGTH__+0x28>
    ff12:	81 15       	cp	r24, r1
    ff14:	90 48       	sbci	r25, 0x80	; 128
    ff16:	a1 05       	cpc	r26, r1
    ff18:	b1 05       	cpc	r27, r1
    ff1a:	09 f0       	breq	.+2      	; 0xff1e <__DATA_REGION_LENGTH__+0x1e>
    ff1c:	67 c0       	rjmp	.+206    	; 0xffec <__DATA_REGION_LENGTH__+0xec>
    {
        case S_IFREG:
            files = ls_info(fullpath,verbose);
    ff1e:	b4 01       	movw	r22, r8
    ff20:	c8 01       	movw	r24, r16
    ff22:	c9 de       	rcall	.-622    	; 0xfcb6 <ls_info>
    ff24:	7c 01       	movw	r14, r24
            break;
    ff26:	64 c0       	rjmp	.+200    	; 0xfff0 <__DATA_REGION_LENGTH__+0xf0>
        case S_IFDIR:
            dirp = opendir(fullpath);
    ff28:	c8 01       	movw	r24, r16
    ff2a:	0e 94 60 76 	call	0xecc0	; 0xecc0 <opendir>
    ff2e:	5c 01       	movw	r10, r24
            if(!dirp)
    ff30:	89 2b       	or	r24, r25
    ff32:	81 f0       	breq	.+32     	; 0xff54 <__DATA_REGION_LENGTH__+0x54>
    }
    else
    {
        strcpy(fullpath,name);
    }
    len = strlen(fullpath);
    ff34:	e1 2c       	mov	r14, r1
    ff36:	f1 2c       	mov	r15, r1
                    strcat(fullpath,"/");
                }
                strcat(fullpath,de->d_name);
                files +=ls_info(fullpath,verbose);
// restore path
                fullpath[len] = 0;
    ff38:	c8 01       	movw	r24, r16
    ff3a:	82 0d       	add	r24, r2
    ff3c:	93 1d       	adc	r25, r3
    ff3e:	c9 5c       	subi	r28, 0xC9	; 201
    ff40:	de 4f       	sbci	r29, 0xFE	; 254
    ff42:	99 83       	std	Y+1, r25	; 0x01
    ff44:	88 83       	st	Y, r24
    ff46:	c7 53       	subi	r28, 0x37	; 55
    ff48:	d1 40       	sbci	r29, 0x01	; 1
                    break;
// FIXME neeed beetter string length tests here
                len2 = strlen(de->d_name);
                if(len + len2 >= MAX_NAME_LEN)
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
    ff4a:	8d e3       	ldi	r24, 0x3D	; 61
    ff4c:	9c e0       	ldi	r25, 0x0C	; 12
    ff4e:	2c 01       	movw	r4, r24
    ff50:	61 2c       	mov	r6, r1
    ff52:	25 c0       	rjmp	.+74     	; 0xff9e <__DATA_REGION_LENGTH__+0x9e>
            break;
        case S_IFDIR:
            dirp = opendir(fullpath);
            if(!dirp)
            {
                printf("opendir failed\n");
    ff54:	80 e6       	ldi	r24, 0x60	; 96
    ff56:	9c e0       	ldi	r25, 0x0C	; 12
    ff58:	a0 e0       	ldi	r26, 0x00	; 0
    ff5a:	ed b7       	in	r30, 0x3d	; 61
    ff5c:	fe b7       	in	r31, 0x3e	; 62
    ff5e:	81 83       	std	Z+1, r24	; 0x01
    ff60:	92 83       	std	Z+2, r25	; 0x02
    ff62:	a3 83       	std	Z+3, r26	; 0x03
    ff64:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    ff68:	b7 cf       	rjmp	.-146    	; 0xfed8 <ls+0xac>
                return(-1);
            }
            while ( (de = readdir(dirp)) )
            {
                if(de->d_name[0] == 0)
    ff6a:	f6 01       	movw	r30, r12
    ff6c:	80 81       	ld	r24, Z
    ff6e:	88 23       	and	r24, r24
    ff70:	e1 f0       	breq	.+56     	; 0xffaa <__DATA_REGION_LENGTH__+0xaa>
                    break;
// FIXME neeed beetter string length tests here
                len2 = strlen(de->d_name);
    ff72:	f6 01       	movw	r30, r12
    ff74:	01 90       	ld	r0, Z+
    ff76:	00 20       	and	r0, r0
    ff78:	e9 f7       	brne	.-6      	; 0xff74 <__DATA_REGION_LENGTH__+0x74>
    ff7a:	31 97       	sbiw	r30, 0x01	; 1
    ff7c:	ec 19       	sub	r30, r12
    ff7e:	fd 09       	sbc	r31, r13
                if(len + len2 >= MAX_NAME_LEN)
    ff80:	e2 0d       	add	r30, r2
    ff82:	f3 1d       	adc	r31, r3
    ff84:	ef 3f       	cpi	r30, 0xFF	; 255
    ff86:	f1 05       	cpc	r31, r1
    ff88:	a1 f0       	breq	.+40     	; 0xffb2 <__DATA_REGION_LENGTH__+0xb2>
    ff8a:	9c f0       	brlt	.+38     	; 0xffb2 <__DATA_REGION_LENGTH__+0xb2>
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
    ff8c:	ed b7       	in	r30, 0x3d	; 61
    ff8e:	fe b7       	in	r31, 0x3e	; 62
    ff90:	d5 82       	std	Z+5, r13	; 0x05
    ff92:	c4 82       	std	Z+4, r12	; 0x04
    ff94:	41 82       	std	Z+1, r4	; 0x01
    ff96:	52 82       	std	Z+2, r5	; 0x02
    ff98:	63 82       	std	Z+3, r6	; 0x03
    ff9a:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
            if(!dirp)
            {
                printf("opendir failed\n");
                return(-1);
            }
            while ( (de = readdir(dirp)) )
    ff9e:	c5 01       	movw	r24, r10
    ffa0:	0e 94 7e 76 	call	0xecfc	; 0xecfc <readdir>
    ffa4:	6c 01       	movw	r12, r24
    ffa6:	89 2b       	or	r24, r25
    ffa8:	01 f7       	brne	.-64     	; 0xff6a <__DATA_REGION_LENGTH__+0x6a>
#ifdef ESP8266
                optimistic_yield(1000);
                wdt_reset();
#endif
            }
            closedir(dirp);
    ffaa:	c5 01       	movw	r24, r10
    ffac:	0e 94 45 76 	call	0xec8a	; 0xec8a <closedir>
            break;
    ffb0:	1f c0       	rjmp	.+62     	; 0xfff0 <__DATA_REGION_LENGTH__+0xf0>
                if(len + len2 >= MAX_NAME_LEN)
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
                    continue;
                }
                if(!MATCH(fullpath,"/") )
    ffb2:	66 ea       	ldi	r22, 0xA6	; 166
    ffb4:	78 e0       	ldi	r23, 0x08	; 8
    ffb6:	c8 01       	movw	r24, r16
    ffb8:	0e 94 8b 30 	call	0x6116	; 0x6116 <MATCH>
    ffbc:	89 2b       	or	r24, r25
    ffbe:	29 f4       	brne	.+10     	; 0xffca <__DATA_REGION_LENGTH__+0xca>
                {
                    strcat(fullpath,"/");
    ffc0:	66 ea       	ldi	r22, 0xA6	; 166
    ffc2:	78 e0       	ldi	r23, 0x08	; 8
    ffc4:	c8 01       	movw	r24, r16
    ffc6:	0e 94 b4 2f 	call	0x5f68	; 0x5f68 <strcat>
                }
                strcat(fullpath,de->d_name);
    ffca:	b6 01       	movw	r22, r12
    ffcc:	c8 01       	movw	r24, r16
    ffce:	0e 94 b4 2f 	call	0x5f68	; 0x5f68 <strcat>
                files +=ls_info(fullpath,verbose);
    ffd2:	b4 01       	movw	r22, r8
    ffd4:	c8 01       	movw	r24, r16
    ffd6:	6f de       	rcall	.-802    	; 0xfcb6 <ls_info>
    ffd8:	e8 0e       	add	r14, r24
    ffda:	f9 1e       	adc	r15, r25
// restore path
                fullpath[len] = 0;
    ffdc:	c9 5c       	subi	r28, 0xC9	; 201
    ffde:	de 4f       	sbci	r29, 0xFE	; 254
    ffe0:	e8 81       	ld	r30, Y
    ffe2:	f9 81       	ldd	r31, Y+1	; 0x01
    ffe4:	c7 53       	subi	r28, 0x37	; 55
    ffe6:	d1 40       	sbci	r29, 0x01	; 1
    ffe8:	10 82       	st	Z, r1
    ffea:	d9 cf       	rjmp	.-78     	; 0xff9e <__DATA_REGION_LENGTH__+0x9e>
MEMSPACE
int ls(char *name, int verbose)
{
    struct stat st;
    DIR *dirp;
    int files = 0;
    ffec:	e1 2c       	mov	r14, r1
    ffee:	f1 2c       	mov	r15, r1
#endif
            }
            closedir(dirp);
            break;
    }
    printf("Files: %d\n", (int)files);
    fff0:	ed b7       	in	r30, 0x3d	; 61
    fff2:	fe b7       	in	r31, 0x3e	; 62
    fff4:	f5 82       	std	Z+5, r15	; 0x05
    fff6:	e4 82       	std	Z+4, r14	; 0x04
    fff8:	82 e3       	ldi	r24, 0x32	; 50
    fffa:	9c e0       	ldi	r25, 0x0C	; 12
    fffc:	a0 e0       	ldi	r26, 0x00	; 0
    fffe:	81 83       	std	Z+1, r24	; 0x01
   10000:	92 83       	std	Z+2, r25	; 0x02
   10002:	a3 83       	std	Z+3, r26	; 0x03
   10004:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    return(files);
   10008:	c7 01       	movw	r24, r14
}
   1000a:	c8 5c       	subi	r28, 0xC8	; 200
   1000c:	de 4f       	sbci	r29, 0xFE	; 254
   1000e:	0f b6       	in	r0, 0x3f	; 63
   10010:	f8 94       	cli
   10012:	de bf       	out	0x3e, r29	; 62
   10014:	0f be       	out	0x3f, r0	; 63
   10016:	cd bf       	out	0x3d, r28	; 61
   10018:	df 91       	pop	r29
   1001a:	cf 91       	pop	r28
   1001c:	1f 91       	pop	r17
   1001e:	0f 91       	pop	r16
   10020:	ff 90       	pop	r15
   10022:	ef 90       	pop	r14
   10024:	df 90       	pop	r13
   10026:	cf 90       	pop	r12
   10028:	bf 90       	pop	r11
   1002a:	af 90       	pop	r10
   1002c:	9f 90       	pop	r9
   1002e:	8f 90       	pop	r8
   10030:	6f 90       	pop	r6
   10032:	5f 90       	pop	r5
   10034:	4f 90       	pop	r4
   10036:	3f 90       	pop	r3
   10038:	2f 90       	pop	r2
   1003a:	08 95       	ret

0001003c <posix_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int posix_tests(int argc,char *argv[])
{
   1003c:	a7 e0       	ldi	r26, 0x07	; 7
   1003e:	b1 e0       	ldi	r27, 0x01	; 1
   10040:	e4 e2       	ldi	r30, 0x24	; 36
   10042:	f0 e8       	ldi	r31, 0x80	; 128
   10044:	0c 94 0b e3 	jmp	0x1c616	; 0x1c616 <__prologue_saves__+0x4>
    char *ptr;
    int ind = 0;

	if(argc < 1)
   10048:	18 16       	cp	r1, r24
   1004a:	19 06       	cpc	r1, r25
   1004c:	1c f0       	brlt	.+6      	; 0x10054 <posix_tests+0x18>
		return(0);
   1004e:	80 e0       	ldi	r24, 0x00	; 0
   10050:	90 e0       	ldi	r25, 0x00	; 0
   10052:	dd c1       	rjmp	.+954    	; 0x1040e <posix_tests+0x3d2>

    ptr = argv[ind++];
   10054:	fb 01       	movw	r30, r22
   10056:	c0 80       	ld	r12, Z
   10058:	d1 80       	ldd	r13, Z+1	; 0x01
	printf("argv[%d]=%s\n",(int)i, argv[i]);
}
#endif


    if(!ptr)
   1005a:	c1 14       	cp	r12, r1
   1005c:	d1 04       	cpc	r13, r1
   1005e:	b9 f3       	breq	.-18     	; 0x1004e <posix_tests+0x12>
   10060:	4b 01       	movw	r8, r22
   10062:	3c 01       	movw	r6, r24
        return(0);	// nothing no match

    if( MATCH(ptr,"posix") )
   10064:	6e eb       	ldi	r22, 0xBE	; 190
   10066:	7b e0       	ldi	r23, 0x0B	; 11
   10068:	c6 01       	movw	r24, r12
   1006a:	0e 94 8b 30 	call	0x6116	; 0x6116 <MATCH>
   1006e:	89 2b       	or	r24, r25
   10070:	a1 f0       	breq	.+40     	; 0x1009a <posix_tests+0x5e>
    {
        ptr = argv[ind++];
   10072:	f4 01       	movw	r30, r8
   10074:	c2 80       	ldd	r12, Z+2	; 0x02
   10076:	d3 80       	ldd	r13, Z+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
   10078:	c1 14       	cp	r12, r1
   1007a:	d1 04       	cpc	r13, r1
   1007c:	21 f4       	brne	.+8      	; 0x10086 <posix_tests+0x4a>
        {
            posix_help(1);
   1007e:	81 e0       	ldi	r24, 0x01	; 1
   10080:	90 e0       	ldi	r25, 0x00	; 0
   10082:	75 dc       	rcall	.-1814   	; 0xf96e <posix_help>
   10084:	45 c1       	rjmp	.+650    	; 0x10310 <posix_tests+0x2d4>
        return(0);	// nothing no match

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
   10086:	69 e7       	ldi	r22, 0x79	; 121
   10088:	76 e1       	ldi	r23, 0x16	; 22
   1008a:	c6 01       	movw	r24, r12
   1008c:	0e 94 8b 30 	call	0x6116	; 0x6116 <MATCH>
   10090:	89 2b       	or	r24, r25
   10092:	a9 f7       	brne	.-22     	; 0x1007e <posix_tests+0x42>
    if(!ptr)
        return(0);	// nothing no match

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
   10094:	02 e0       	ldi	r16, 0x02	; 2
   10096:	10 e0       	ldi	r17, 0x00	; 0
   10098:	02 c0       	rjmp	.+4      	; 0x1009e <posix_tests+0x62>
    int ind = 0;

	if(argc < 1)
		return(0);

    ptr = argv[ind++];
   1009a:	01 e0       	ldi	r16, 0x01	; 1
   1009c:	10 e0       	ldi	r17, 0x00	; 0
            posix_help(1);
            return(1);
        }
    }

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
   1009e:	78 01       	movw	r14, r16
   100a0:	ff ef       	ldi	r31, 0xFF	; 255
   100a2:	ef 1a       	sub	r14, r31
   100a4:	ff 0a       	sbc	r15, r31
   100a6:	93 01       	movw	r18, r6
   100a8:	a7 01       	movw	r20, r14
   100aa:	64 ec       	ldi	r22, 0xC4	; 196
   100ac:	7b e0       	ldi	r23, 0x0B	; 11
   100ae:	c6 01       	movw	r24, r12
   100b0:	0e 94 b3 30 	call	0x6166	; 0x6166 <MATCHARGS>
   100b4:	89 2b       	or	r24, r25
   100b6:	99 f1       	breq	.+102    	; 0x1011e <posix_tests+0xe2>
   100b8:	78 01       	movw	r14, r16
   100ba:	ee 0c       	add	r14, r14
   100bc:	ff 1c       	adc	r15, r15
   100be:	e8 0c       	add	r14, r8
   100c0:	f9 1c       	adc	r15, r9
   100c2:	57 01       	movw	r10, r14
   100c4:	47 01       	movw	r8, r14
   100c6:	68 01       	movw	r12, r16
   100c8:	41 2c       	mov	r4, r1
   100ca:	51 2c       	mov	r5, r1
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   100cc:	c6 14       	cp	r12, r6
   100ce:	d7 04       	cpc	r13, r7
   100d0:	14 f5       	brge	.+68     	; 0x10116 <posix_tests+0xda>
        {
            if(MATCH(argv[i],"-p"))
   100d2:	68 ec       	ldi	r22, 0xC8	; 200
   100d4:	7b e0       	ldi	r23, 0x0B	; 11
   100d6:	f4 01       	movw	r30, r8
   100d8:	81 91       	ld	r24, Z+
   100da:	91 91       	ld	r25, Z+
   100dc:	4f 01       	movw	r8, r30
   100de:	0e 94 8b 30 	call	0x6116	; 0x6116 <MATCH>
   100e2:	89 2b       	or	r24, r25
   100e4:	19 f0       	breq	.+6      	; 0x100ec <posix_tests+0xb0>
                page = 1;
   100e6:	44 24       	eor	r4, r4
   100e8:	43 94       	inc	r4
   100ea:	51 2c       	mov	r5, r1

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   100ec:	ff ef       	ldi	r31, 0xFF	; 255
   100ee:	cf 1a       	sub	r12, r31
   100f0:	df 0a       	sbc	r13, r31
   100f2:	ec cf       	rjmp	.-40     	; 0x100cc <posix_tests+0x90>
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
        {
            if(!MATCH(argv[i],"-p"))
   100f4:	68 ec       	ldi	r22, 0xC8	; 200
   100f6:	7b e0       	ldi	r23, 0x0B	; 11
   100f8:	f5 01       	movw	r30, r10
   100fa:	81 91       	ld	r24, Z+
   100fc:	91 91       	ld	r25, Z+
   100fe:	5f 01       	movw	r10, r30
   10100:	0e 94 8b 30 	call	0x6116	; 0x6116 <MATCH>
   10104:	89 2b       	or	r24, r25
   10106:	29 f4       	brne	.+10     	; 0x10112 <posix_tests+0xd6>
			{
				// displays its own errors
                cat(argv[ind], page);
   10108:	b2 01       	movw	r22, r4
   1010a:	f7 01       	movw	r30, r14
   1010c:	80 81       	ld	r24, Z
   1010e:	91 81       	ldd	r25, Z+1	; 0x01
   10110:	65 dd       	rcall	.-1334   	; 0xfbdc <cat>
        for(i=ind;i<argc;++i)
        {
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
   10112:	0f 5f       	subi	r16, 0xFF	; 255
   10114:	1f 4f       	sbci	r17, 0xFF	; 255
   10116:	06 15       	cp	r16, r6
   10118:	17 05       	cpc	r17, r7
   1011a:	64 f3       	brlt	.-40     	; 0x100f4 <posix_tests+0xb8>
   1011c:	f9 c0       	rjmp	.+498    	; 0x10310 <posix_tests+0x2d4>
		}
        return(1);
    }
#endif

    else if (MATCHARGS(ptr,"copy", (ind + 2), argc))
   1011e:	58 01       	movw	r10, r16
   10120:	f2 e0       	ldi	r31, 0x02	; 2
   10122:	af 0e       	add	r10, r31
   10124:	b1 1c       	adc	r11, r1
   10126:	93 01       	movw	r18, r6
   10128:	a5 01       	movw	r20, r10
   1012a:	6b ec       	ldi	r22, 0xCB	; 203
   1012c:	7b e0       	ldi	r23, 0x0B	; 11
   1012e:	c6 01       	movw	r24, r12
   10130:	0e 94 b3 30 	call	0x6166	; 0x6166 <MATCHARGS>
   10134:	89 2b       	or	r24, r25
   10136:	69 f0       	breq	.+26     	; 0x10152 <posix_tests+0x116>
    {
		if( copy(argv[ind],argv[ind+1]) < 0)
   10138:	f8 01       	movw	r30, r16
   1013a:	ee 0f       	add	r30, r30
   1013c:	ff 1f       	adc	r31, r31
   1013e:	e8 0d       	add	r30, r8
   10140:	f9 1d       	adc	r31, r9
   10142:	62 81       	ldd	r22, Z+2	; 0x02
   10144:	73 81       	ldd	r23, Z+3	; 0x03
   10146:	80 81       	ld	r24, Z
   10148:	91 81       	ldd	r25, Z+1	; 0x01
   1014a:	32 dc       	rcall	.-1948   	; 0xf9b0 <copy>
   1014c:	97 ff       	sbrs	r25, 7
   1014e:	e0 c0       	rjmp	.+448    	; 0x10310 <posix_tests+0x2d4>
   10150:	5c c1       	rjmp	.+696    	; 0x1040a <posix_tests+0x3ce>
			return(-1);
        return(1);
    }

    else if (MATCHARGS(ptr,"cd", (ind + 1), argc))
   10152:	93 01       	movw	r18, r6
   10154:	a7 01       	movw	r20, r14
   10156:	60 ed       	ldi	r22, 0xD0	; 208
   10158:	7b e0       	ldi	r23, 0x0B	; 11
   1015a:	c6 01       	movw	r24, r12
   1015c:	0e 94 b3 30 	call	0x6166	; 0x6166 <MATCHARGS>
   10160:	89 2b       	or	r24, r25
   10162:	b9 f0       	breq	.+46     	; 0x10192 <posix_tests+0x156>
    {
        if ( chdir(argv[ind]) != 0)
   10164:	78 01       	movw	r14, r16
   10166:	ee 0c       	add	r14, r14
   10168:	ff 1c       	adc	r15, r15
   1016a:	e8 0c       	add	r14, r8
   1016c:	f9 1c       	adc	r15, r9
   1016e:	f7 01       	movw	r30, r14
   10170:	80 81       	ld	r24, Z
   10172:	91 81       	ldd	r25, Z+1	; 0x01
   10174:	0e 94 6a 75 	call	0xead4	; 0xead4 <chdir>
   10178:	89 2b       	or	r24, r25
   1017a:	09 f4       	brne	.+2      	; 0x1017e <posix_tests+0x142>
   1017c:	c9 c0       	rjmp	.+402    	; 0x10310 <posix_tests+0x2d4>
		{
            printf("chdir %s failed\n", argv[ind]);
   1017e:	f7 01       	movw	r30, r14
   10180:	80 81       	ld	r24, Z
   10182:	91 81       	ldd	r25, Z+1	; 0x01
   10184:	ed b7       	in	r30, 0x3d	; 61
   10186:	fe b7       	in	r31, 0x3e	; 62
   10188:	95 83       	std	Z+5, r25	; 0x05
   1018a:	84 83       	std	Z+4, r24	; 0x04
   1018c:	89 ee       	ldi	r24, 0xE9	; 233
   1018e:	9d e0       	ldi	r25, 0x0D	; 13
   10190:	36 c1       	rjmp	.+620    	; 0x103fe <posix_tests+0x3c2>
			return(-1);
        return(1);
    }
#endif

    else if (MATCHI(ptr,"ls") )
   10192:	68 ed       	ldi	r22, 0xD8	; 216
   10194:	78 e0       	ldi	r23, 0x08	; 8
   10196:	c6 01       	movw	r24, r12
   10198:	0e 94 9f 30 	call	0x613e	; 0x613e <MATCHI>
   1019c:	89 2b       	or	r24, r25
   1019e:	09 f4       	brne	.+2      	; 0x101a2 <posix_tests+0x166>
   101a0:	40 c0       	rjmp	.+128    	; 0x10222 <posix_tests+0x1e6>
   101a2:	78 01       	movw	r14, r16
   101a4:	ee 0c       	add	r14, r14
   101a6:	ff 1c       	adc	r15, r15
   101a8:	e8 0c       	add	r14, r8
   101aa:	f9 1c       	adc	r15, r9
   101ac:	c1 2c       	mov	r12, r1
   101ae:	d1 2c       	mov	r13, r1
        int args = 0;
        for(i=ind;i<argc;++i)
        {
			if(!argv[i])
			{
				printf("ls: null argument # %d\n", i);
   101b0:	81 ed       	ldi	r24, 0xD1	; 209
   101b2:	9d e0       	ldi	r25, 0x0D	; 13
   101b4:	4c 01       	movw	r8, r24
   101b6:	a1 2c       	mov	r10, r1

    else if (MATCHI(ptr,"ls") )
    {
        int i;
        int args = 0;
        for(i=ind;i<argc;++i)
   101b8:	06 15       	cp	r16, r6
   101ba:	17 05       	cpc	r17, r7
   101bc:	34 f5       	brge	.+76     	; 0x1020a <posix_tests+0x1ce>
        {
			if(!argv[i])
   101be:	f7 01       	movw	r30, r14
   101c0:	80 81       	ld	r24, Z
   101c2:	91 81       	ldd	r25, Z+1	; 0x01
   101c4:	00 97       	sbiw	r24, 0x00	; 0
   101c6:	51 f4       	brne	.+20     	; 0x101dc <posix_tests+0x1a0>
			{
				printf("ls: null argument # %d\n", i);
   101c8:	ed b7       	in	r30, 0x3d	; 61
   101ca:	fe b7       	in	r31, 0x3e	; 62
   101cc:	15 83       	std	Z+5, r17	; 0x05
   101ce:	04 83       	std	Z+4, r16	; 0x04
   101d0:	81 82       	std	Z+1, r8	; 0x01
   101d2:	92 82       	std	Z+2, r9	; 0x02
   101d4:	a3 82       	std	Z+3, r10	; 0x03
   101d6:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
				continue;
   101da:	11 c0       	rjmp	.+34     	; 0x101fe <posix_tests+0x1c2>
			}
            if(MATCH(argv[i],"-l"))	// skip long format test - we always use long format
   101dc:	63 ed       	ldi	r22, 0xD3	; 211
   101de:	7b e0       	ldi	r23, 0x0B	; 11
   101e0:	0e 94 8b 30 	call	0x6116	; 0x6116 <MATCH>
   101e4:	89 2b       	or	r24, r25
   101e6:	59 f4       	brne	.+22     	; 0x101fe <posix_tests+0x1c2>
				continue;
			if( ls(argv[i],1) < 0)
   101e8:	61 e0       	ldi	r22, 0x01	; 1
   101ea:	70 e0       	ldi	r23, 0x00	; 0
   101ec:	f7 01       	movw	r30, r14
   101ee:	80 81       	ld	r24, Z
   101f0:	91 81       	ldd	r25, Z+1	; 0x01
   101f2:	1c de       	rcall	.-968    	; 0xfe2c <ls>
   101f4:	97 fd       	sbrc	r25, 7
   101f6:	09 c1       	rjmp	.+530    	; 0x1040a <posix_tests+0x3ce>
			{
				return(-1);
			};
            ++args;
   101f8:	ff ef       	ldi	r31, 0xFF	; 255
   101fa:	cf 1a       	sub	r12, r31
   101fc:	df 0a       	sbc	r13, r31

    else if (MATCHI(ptr,"ls") )
    {
        int i;
        int args = 0;
        for(i=ind;i<argc;++i)
   101fe:	0f 5f       	subi	r16, 0xFF	; 255
   10200:	1f 4f       	sbci	r17, 0xFF	; 255
   10202:	82 e0       	ldi	r24, 0x02	; 2
   10204:	e8 0e       	add	r14, r24
   10206:	f1 1c       	adc	r15, r1
   10208:	d7 cf       	rjmp	.-82     	; 0x101b8 <posix_tests+0x17c>
			{
				return(-1);
			};
            ++args;
        }
        if(!args)
   1020a:	c1 14       	cp	r12, r1
   1020c:	d1 04       	cpc	r13, r1
   1020e:	09 f0       	breq	.+2      	; 0x10212 <posix_tests+0x1d6>
   10210:	7f c0       	rjmp	.+254    	; 0x10310 <posix_tests+0x2d4>
        {
            if( ls("",1) < 0)
   10212:	61 e0       	ldi	r22, 0x01	; 1
   10214:	70 e0       	ldi	r23, 0x00	; 0
   10216:	8d e2       	ldi	r24, 0x2D	; 45
   10218:	9c e0       	ldi	r25, 0x0C	; 12
   1021a:	08 de       	rcall	.-1008   	; 0xfe2c <ls>
   1021c:	97 ff       	sbrs	r25, 7
   1021e:	78 c0       	rjmp	.+240    	; 0x10310 <posix_tests+0x2d4>
   10220:	f4 c0       	rjmp	.+488    	; 0x1040a <posix_tests+0x3ce>
		}
        return(1);
    }
#endif

    else if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
   10222:	93 01       	movw	r18, r6
   10224:	a7 01       	movw	r20, r14
   10226:	66 ed       	ldi	r22, 0xD6	; 214
   10228:	7b e0       	ldi	r23, 0x0B	; 11
   1022a:	c6 01       	movw	r24, r12
   1022c:	0e 94 b3 30 	call	0x6166	; 0x6166 <MATCHARGS>
   10230:	89 2b       	or	r24, r25
   10232:	79 f1       	breq	.+94     	; 0x10292 <posix_tests+0x256>
    {
        int mode = 0777;
        if((ind+2) <= argc)
   10234:	e6 14       	cp	r14, r6
   10236:	f7 04       	cpc	r15, r7
   10238:	7c f4       	brge	.+30     	; 0x10258 <posix_tests+0x21c>
        {
            mode = strtol(argv[ind+1],NULL,8);
   1023a:	ee 0c       	add	r14, r14
   1023c:	ff 1c       	adc	r15, r15
   1023e:	f4 01       	movw	r30, r8
   10240:	ee 0d       	add	r30, r14
   10242:	ff 1d       	adc	r31, r15
   10244:	48 e0       	ldi	r20, 0x08	; 8
   10246:	50 e0       	ldi	r21, 0x00	; 0
   10248:	60 e0       	ldi	r22, 0x00	; 0
   1024a:	70 e0       	ldi	r23, 0x00	; 0
   1024c:	80 81       	ld	r24, Z
   1024e:	91 81       	ldd	r25, Z+1	; 0x01
   10250:	0e 94 8d 45 	call	0x8b1a	; 0x8b1a <strtol>
   10254:	ab 01       	movw	r20, r22
   10256:	02 c0       	rjmp	.+4      	; 0x1025c <posix_tests+0x220>
    }
#endif

    else if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
    {
        int mode = 0777;
   10258:	4f ef       	ldi	r20, 0xFF	; 255
   1025a:	51 e0       	ldi	r21, 0x01	; 1
        if((ind+2) <= argc)
        {
            mode = strtol(argv[ind+1],NULL,8);
        }
        if ( mkdir(argv[ind],mode) != 0 )
   1025c:	78 01       	movw	r14, r16
   1025e:	ee 0c       	add	r14, r14
   10260:	ff 1c       	adc	r15, r15
   10262:	e8 0c       	add	r14, r8
   10264:	f9 1c       	adc	r15, r9
   10266:	05 2e       	mov	r0, r21
   10268:	00 0c       	add	r0, r0
   1026a:	66 0b       	sbc	r22, r22
   1026c:	77 0b       	sbc	r23, r23
   1026e:	f7 01       	movw	r30, r14
   10270:	80 81       	ld	r24, Z
   10272:	91 81       	ldd	r25, Z+1	; 0x01
   10274:	0e 94 d7 75 	call	0xebae	; 0xebae <mkdir>
   10278:	89 2b       	or	r24, r25
   1027a:	09 f4       	brne	.+2      	; 0x1027e <posix_tests+0x242>
   1027c:	49 c0       	rjmp	.+146    	; 0x10310 <posix_tests+0x2d4>
        {
            printf("mkdir %s failed\n", argv[ind]);
   1027e:	f7 01       	movw	r30, r14
   10280:	80 81       	ld	r24, Z
   10282:	91 81       	ldd	r25, Z+1	; 0x01
   10284:	ed b7       	in	r30, 0x3d	; 61
   10286:	fe b7       	in	r31, 0x3e	; 62
   10288:	95 83       	std	Z+5, r25	; 0x05
   1028a:	84 83       	std	Z+4, r24	; 0x04
   1028c:	80 ec       	ldi	r24, 0xC0	; 192
   1028e:	9d e0       	ldi	r25, 0x0D	; 13
   10290:	b6 c0       	rjmp	.+364    	; 0x103fe <posix_tests+0x3c2>
            return(-1);
        }
        return(1);
    }

    else if (MATCHARGS(ptr,"page", (ind + 1), argc))
   10292:	93 01       	movw	r18, r6
   10294:	a7 01       	movw	r20, r14
   10296:	6c ed       	ldi	r22, 0xDC	; 220
   10298:	7b e0       	ldi	r23, 0x0B	; 11
   1029a:	c6 01       	movw	r24, r12
   1029c:	0e 94 b3 30 	call	0x6166	; 0x6166 <MATCHARGS>
   102a0:	89 2b       	or	r24, r25
   102a2:	71 f0       	breq	.+28     	; 0x102c0 <posix_tests+0x284>
    {
        setpage(atoi(argv[ind]));
   102a4:	00 0f       	add	r16, r16
   102a6:	11 1f       	adc	r17, r17
   102a8:	f4 01       	movw	r30, r8
   102aa:	e0 0f       	add	r30, r16
   102ac:	f1 1f       	adc	r31, r17
   102ae:	80 81       	ld	r24, Z
   102b0:	91 81       	ldd	r25, Z+1	; 0x01
   102b2:	0e 94 eb 45 	call	0x8bd6	; 0x8bd6 <atoi>
/// @retrun void
static int _pagesize = 25;
MEMSPACE
int setpage(int count)
{
    _pagesize = count;
   102b6:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <_pagesize+0x1>
   102ba:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <_pagesize>
   102be:	28 c0       	rjmp	.+80     	; 0x10310 <posix_tests+0x2d4>
    {
        setpage(atoi(argv[ind]));
        return(1);
    }

    else if (MATCHARGS(ptr,"pwd", (ind + 0), argc))
   102c0:	93 01       	movw	r18, r6
   102c2:	a8 01       	movw	r20, r16
   102c4:	61 ee       	ldi	r22, 0xE1	; 225
   102c6:	7b e0       	ldi	r23, 0x0B	; 11
   102c8:	c6 01       	movw	r24, r12
   102ca:	0e 94 b3 30 	call	0x6166	; 0x6166 <MATCHARGS>
   102ce:	89 2b       	or	r24, r25
   102d0:	11 f1       	breq	.+68     	; 0x10316 <posix_tests+0x2da>
    {
        char path[256];
		char *ptr = getcwd(path, sizeof(path)-2);
   102d2:	6e ef       	ldi	r22, 0xFE	; 254
   102d4:	70 e0       	ldi	r23, 0x00	; 0
   102d6:	ce 01       	movw	r24, r28
   102d8:	08 96       	adiw	r24, 0x08	; 8
   102da:	0e 94 b2 75 	call	0xeb64	; 0xeb64 <getcwd>
		if(ptr == NULL)
   102de:	00 97       	sbiw	r24, 0x00	; 0
   102e0:	59 f4       	brne	.+22     	; 0x102f8 <posix_tests+0x2bc>
		{
			printf("pwd FAILED\n");
   102e2:	84 eb       	ldi	r24, 0xB4	; 180
   102e4:	9d e0       	ldi	r25, 0x0D	; 13
   102e6:	a0 e0       	ldi	r26, 0x00	; 0
   102e8:	ed b7       	in	r30, 0x3d	; 61
   102ea:	fe b7       	in	r31, 0x3e	; 62
   102ec:	81 83       	std	Z+1, r24	; 0x01
   102ee:	92 83       	std	Z+2, r25	; 0x02
   102f0:	a3 83       	std	Z+3, r26	; 0x03
   102f2:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   102f6:	89 c0       	rjmp	.+274    	; 0x1040a <posix_tests+0x3ce>
			return(-1);
		}
        printf("%s\n", ptr);
   102f8:	ed b7       	in	r30, 0x3d	; 61
   102fa:	fe b7       	in	r31, 0x3e	; 62
   102fc:	95 83       	std	Z+5, r25	; 0x05
   102fe:	84 83       	std	Z+4, r24	; 0x04
   10300:	80 eb       	ldi	r24, 0xB0	; 176
   10302:	9d e0       	ldi	r25, 0x0D	; 13
   10304:	a0 e0       	ldi	r26, 0x00	; 0
   10306:	81 83       	std	Z+1, r24	; 0x01
   10308:	92 83       	std	Z+2, r25	; 0x02
   1030a:	a3 83       	std	Z+3, r26	; 0x03
   1030c:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
        return(1);
   10310:	81 e0       	ldi	r24, 0x01	; 1
   10312:	90 e0       	ldi	r25, 0x00	; 0
   10314:	7c c0       	rjmp	.+248    	; 0x1040e <posix_tests+0x3d2>
    }

    else if (MATCHARGS(ptr,"rename", (ind + 2), argc))
   10316:	93 01       	movw	r18, r6
   10318:	a5 01       	movw	r20, r10
   1031a:	65 ee       	ldi	r22, 0xE5	; 229
   1031c:	7b e0       	ldi	r23, 0x0B	; 11
   1031e:	c6 01       	movw	r24, r12
   10320:	0e 94 b3 30 	call	0x6166	; 0x6166 <MATCHARGS>
   10324:	89 2b       	or	r24, r25
   10326:	59 f1       	breq	.+86     	; 0x1037e <posix_tests+0x342>
    {
        if( rename(argv[ind],argv[ind+1]) != 0)
   10328:	00 0f       	add	r16, r16
   1032a:	11 1f       	adc	r17, r17
   1032c:	64 01       	movw	r12, r8
   1032e:	c0 0e       	add	r12, r16
   10330:	d1 1e       	adc	r13, r17
   10332:	0e 5f       	subi	r16, 0xFE	; 254
   10334:	1f 4f       	sbci	r17, 0xFF	; 255
   10336:	74 01       	movw	r14, r8
   10338:	e0 0e       	add	r14, r16
   1033a:	f1 1e       	adc	r15, r17
   1033c:	f7 01       	movw	r30, r14
   1033e:	60 81       	ld	r22, Z
   10340:	71 81       	ldd	r23, Z+1	; 0x01
   10342:	f6 01       	movw	r30, r12
   10344:	80 81       	ld	r24, Z
   10346:	91 81       	ldd	r25, Z+1	; 0x01
   10348:	0e 94 05 76 	call	0xec0a	; 0xec0a <rename>
   1034c:	89 2b       	or	r24, r25
   1034e:	01 f3       	breq	.-64     	; 0x10310 <posix_tests+0x2d4>
        {
            printf("rename %s to %s\n", argv[ind], argv[ind+1]);
   10350:	f7 01       	movw	r30, r14
   10352:	80 81       	ld	r24, Z
   10354:	91 81       	ldd	r25, Z+1	; 0x01
   10356:	ed b7       	in	r30, 0x3d	; 61
   10358:	fe b7       	in	r31, 0x3e	; 62
   1035a:	97 83       	std	Z+7, r25	; 0x07
   1035c:	86 83       	std	Z+6, r24	; 0x06
   1035e:	f6 01       	movw	r30, r12
   10360:	80 81       	ld	r24, Z
   10362:	91 81       	ldd	r25, Z+1	; 0x01
   10364:	ed b7       	in	r30, 0x3d	; 61
   10366:	fe b7       	in	r31, 0x3e	; 62
   10368:	95 83       	std	Z+5, r25	; 0x05
   1036a:	84 83       	std	Z+4, r24	; 0x04
   1036c:	8f e9       	ldi	r24, 0x9F	; 159
   1036e:	9d e0       	ldi	r25, 0x0D	; 13
   10370:	a0 e0       	ldi	r26, 0x00	; 0
   10372:	81 83       	std	Z+1, r24	; 0x01
   10374:	92 83       	std	Z+2, r25	; 0x02
   10376:	a3 83       	std	Z+3, r26	; 0x03
   10378:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   1037c:	46 c0       	rjmp	.+140    	; 0x1040a <posix_tests+0x3ce>
            return(-1);
        }
        return(1);
    }

    else if (MATCHARGS(ptr,"rm", (ind + 1), argc))
   1037e:	93 01       	movw	r18, r6
   10380:	a7 01       	movw	r20, r14
   10382:	6c ee       	ldi	r22, 0xEC	; 236
   10384:	7b e0       	ldi	r23, 0x0B	; 11
   10386:	c6 01       	movw	r24, r12
   10388:	0e 94 b3 30 	call	0x6166	; 0x6166 <MATCHARGS>
   1038c:	89 2b       	or	r24, r25
   1038e:	b9 f0       	breq	.+46     	; 0x103be <posix_tests+0x382>
    {
        if ( unlink(argv[ind]) != 0)
   10390:	78 01       	movw	r14, r16
   10392:	ee 0c       	add	r14, r14
   10394:	ff 1c       	adc	r15, r15
   10396:	e8 0c       	add	r14, r8
   10398:	f9 1c       	adc	r15, r9
   1039a:	f7 01       	movw	r30, r14
   1039c:	80 81       	ld	r24, Z
   1039e:	91 81       	ldd	r25, Z+1	; 0x01
   103a0:	0e 94 24 76 	call	0xec48	; 0xec48 <unlink>
   103a4:	89 2b       	or	r24, r25
   103a6:	09 f4       	brne	.+2      	; 0x103aa <posix_tests+0x36e>
   103a8:	b3 cf       	rjmp	.-154    	; 0x10310 <posix_tests+0x2d4>
        {
            printf("rm %s failed\n", argv[ind]);
   103aa:	f7 01       	movw	r30, r14
   103ac:	80 81       	ld	r24, Z
   103ae:	91 81       	ldd	r25, Z+1	; 0x01
   103b0:	ed b7       	in	r30, 0x3d	; 61
   103b2:	fe b7       	in	r31, 0x3e	; 62
   103b4:	95 83       	std	Z+5, r25	; 0x05
   103b6:	84 83       	std	Z+4, r24	; 0x04
   103b8:	81 e9       	ldi	r24, 0x91	; 145
   103ba:	9d e0       	ldi	r25, 0x0D	; 13
   103bc:	20 c0       	rjmp	.+64     	; 0x103fe <posix_tests+0x3c2>
        dump_stat(&p);
        return(1);
    }
#endif

    else if (MATCHARGS(ptr,"rmdir", (ind + 1), argc))
   103be:	93 01       	movw	r18, r6
   103c0:	a7 01       	movw	r20, r14
   103c2:	6f ee       	ldi	r22, 0xEF	; 239
   103c4:	7b e0       	ldi	r23, 0x0B	; 11
   103c6:	c6 01       	movw	r24, r12
   103c8:	0e 94 b3 30 	call	0x6166	; 0x6166 <MATCHARGS>
   103cc:	89 2b       	or	r24, r25
   103ce:	09 f4       	brne	.+2      	; 0x103d2 <posix_tests+0x396>
   103d0:	3e ce       	rjmp	.-900    	; 0x1004e <posix_tests+0x12>
    {
        if ( rmdir(argv[ind]) != 0)
   103d2:	78 01       	movw	r14, r16
   103d4:	ee 0c       	add	r14, r14
   103d6:	ff 1c       	adc	r15, r15
   103d8:	e8 0c       	add	r14, r8
   103da:	f9 1c       	adc	r15, r9
   103dc:	f7 01       	movw	r30, r14
   103de:	80 81       	ld	r24, Z
   103e0:	91 81       	ldd	r25, Z+1	; 0x01
   103e2:	0e 94 43 76 	call	0xec86	; 0xec86 <rmdir>
   103e6:	89 2b       	or	r24, r25
   103e8:	09 f4       	brne	.+2      	; 0x103ec <posix_tests+0x3b0>
   103ea:	92 cf       	rjmp	.-220    	; 0x10310 <posix_tests+0x2d4>
        {
            printf("rmdir %s failed\n", argv[ind]);
   103ec:	f7 01       	movw	r30, r14
   103ee:	80 81       	ld	r24, Z
   103f0:	91 81       	ldd	r25, Z+1	; 0x01
   103f2:	ed b7       	in	r30, 0x3d	; 61
   103f4:	fe b7       	in	r31, 0x3e	; 62
   103f6:	95 83       	std	Z+5, r25	; 0x05
   103f8:	84 83       	std	Z+4, r24	; 0x04
   103fa:	80 e8       	ldi	r24, 0x80	; 128
   103fc:	9d e0       	ldi	r25, 0x0D	; 13
   103fe:	a0 e0       	ldi	r26, 0x00	; 0
   10400:	81 83       	std	Z+1, r24	; 0x01
   10402:	92 83       	std	Z+2, r25	; 0x02
   10404:	a3 83       	std	Z+3, r26	; 0x03
   10406:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
            return(-1);
   1040a:	8f ef       	ldi	r24, 0xFF	; 255
   1040c:	9f ef       	ldi	r25, 0xFF	; 255
        return(1);
    }
#endif

    return(0);
}
   1040e:	c9 5f       	subi	r28, 0xF9	; 249
   10410:	de 4f       	sbci	r29, 0xFE	; 254
   10412:	e0 e1       	ldi	r30, 0x10	; 16
   10414:	0c 94 27 e3 	jmp	0x1c64e	; 0x1c64e <__epilogue_restores__+0x4>

00010418 <gpib_timer_init>:
///
/// - Has some platform dependent code.
/// @return  void

void gpib_timer_init()
{
   10418:	00 d0       	rcall	.+0      	; 0x1041a <gpib_timer_init+0x2>
   1041a:	1f 92       	push	r1
    if(set_timers(gpib_timer_task,1) == -1)       // Install Clock Task
   1041c:	61 e0       	ldi	r22, 0x01	; 1
   1041e:	70 e0       	ldi	r23, 0x00	; 0
   10420:	88 ec       	ldi	r24, 0xC8	; 200
   10422:	93 e8       	ldi	r25, 0x83	; 131
   10424:	0e 94 00 33 	call	0x6600	; 0x6600 <set_timers>
   10428:	01 96       	adiw	r24, 0x01	; 1
   1042a:	51 f4       	brne	.+20     	; 0x10440 <gpib_timer_init+0x28>
        printf("GPIB Clock task init failed\n");
   1042c:	86 e2       	ldi	r24, 0x26	; 38
   1042e:	9f e0       	ldi	r25, 0x0F	; 15
   10430:	a0 e0       	ldi	r26, 0x00	; 0
   10432:	ed b7       	in	r30, 0x3d	; 61
   10434:	fe b7       	in	r31, 0x3e	; 62
   10436:	81 83       	std	Z+1, r24	; 0x01
   10438:	92 83       	std	Z+2, r25	; 0x02
   1043a:	a3 83       	std	Z+3, r26	; 0x03
   1043c:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>

    gpib_timer_reset();
   10440:	95 d1       	rcall	.+810    	; 0x1076c <gpib_timer_reset>
}
   10442:	0f 90       	pop	r0
   10444:	0f 90       	pop	r0
   10446:	0f 90       	pop	r0
   10448:	08 95       	ret

0001044a <reverse_8bits>:
/// - GPIB D1 controls last device.
///
/// @param [in] mask: bit mask to reverse.
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
   1044a:	28 2f       	mov	r18, r24
   1044c:	98 e0       	ldi	r25, 0x08	; 8
    int8_t i;
    uint8_t rmask = 0;
   1044e:	80 e0       	ldi	r24, 0x00	; 0
    for(i=0;i<8;++i)
    {
        rmask <<= 1;
   10450:	88 0f       	add	r24, r24
        if(mask & 1)
   10452:	20 fd       	sbrc	r18, 0
            rmask |= 1;
   10454:	81 60       	ori	r24, 0x01	; 1
        mask >>= 1;
   10456:	26 95       	lsr	r18
   10458:	91 50       	subi	r25, 0x01	; 1
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
    int8_t i;
    uint8_t rmask = 0;
    for(i=0;i<8;++i)
   1045a:	d1 f7       	brne	.-12     	; 0x10450 <reverse_8bits+0x6>
        if(mask & 1)
            rmask |= 1;
        mask >>= 1;
    }
    return(rmask & 0xff);
}
   1045c:	08 95       	ret

0001045e <ppr_set>:
void ppr_set(uint8_t mask)
{
///@brief optionally reverse bit order in PPR mask
/// Used only of PPR circuit board PPR bits are not reversed in hardware
#if PPR_REVERSE_BITS == 1
    _ppr_reg = reverse_8bits(mask);
   1045e:	f5 df       	rcall	.-22     	; 0x1044a <reverse_8bits>
   10460:	80 93 6a 19 	sts	0x196A, r24	; 0x80196a <_ppr_reg>
#else
    _ppr_reg = mask;
#endif
    SPI0_TXRX_Byte(_ppr_reg);
   10464:	0e 94 5a 29 	call	0x52b4	; 0x52b4 <SPI0_TXRX_Byte>

    GPIB_IO_HI(PPE);
   10468:	2a 9a       	sbi	0x05, 2	; 5
   1046a:	22 9a       	sbi	0x04, 2	; 4
    GPIB_IO_LOW(PPE);
   1046c:	2a 98       	cbi	0x05, 2	; 5
   1046e:	22 9a       	sbi	0x04, 2	; 4
   10470:	08 95       	ret

00010472 <ppr_reg>:
uint8_t ppr_reg()
{
///@brief optionally reverse bit order in PPR mask
/// Used only of PPR circuit board PPR bits are not reversed in hardware
#if PPR_REVERSE_BITS == 1
    return(reverse_8bits(_ppr_reg));
   10472:	80 91 6a 19 	lds	r24, 0x196A	; 0x80196a <_ppr_reg>
   10476:	e9 cf       	rjmp	.-46     	; 0x1044a <reverse_8bits>
#else
    return(_ppr_reg);
#endif
}
   10478:	08 95       	ret

0001047a <ppr_init>:
///
/// - Hides the register access implimentation from the upper level.
/// @return  void

void ppr_init()
{
   1047a:	00 d0       	rcall	.+0      	; 0x1047c <ppr_init+0x2>
   1047c:	1f 92       	push	r1
#if SDEBUG
    if(debuglevel & GPIB_PPR)
   1047e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10482:	81 ff       	sbrs	r24, 1
   10484:	0a c0       	rjmp	.+20     	; 0x1049a <ppr_init+0x20>
        printf("[PPR DISABLE ALL]\n");
   10486:	83 e1       	ldi	r24, 0x13	; 19
   10488:	9f e0       	ldi	r25, 0x0F	; 15
   1048a:	a0 e0       	ldi	r26, 0x00	; 0
   1048c:	ed b7       	in	r30, 0x3d	; 61
   1048e:	fe b7       	in	r31, 0x3e	; 62
   10490:	81 83       	std	Z+1, r24	; 0x01
   10492:	92 83       	std	Z+2, r25	; 0x02
   10494:	a3 83       	std	Z+3, r26	; 0x03
   10496:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
#endif
    ppr_set(0);
   1049a:	80 e0       	ldi	r24, 0x00	; 0
   1049c:	e0 df       	rcall	.-64     	; 0x1045e <ppr_set>
}
   1049e:	0f 90       	pop	r0
   104a0:	0f 90       	pop	r0
   104a2:	0f 90       	pop	r0
   104a4:	08 95       	ret

000104a6 <ppr_bit_set>:
/// @return  void

void ppr_bit_set(uint8_t bit)
{
///FIXME _ppr_reg = 0;
    BIT_SET(_ppr_reg,bit);
   104a6:	21 e0       	ldi	r18, 0x01	; 1
   104a8:	30 e0       	ldi	r19, 0x00	; 0
   104aa:	01 c0       	rjmp	.+2      	; 0x104ae <ppr_bit_set+0x8>
   104ac:	22 0f       	add	r18, r18
   104ae:	8a 95       	dec	r24
   104b0:	ea f7       	brpl	.-6      	; 0x104ac <ppr_bit_set+0x6>
   104b2:	80 91 6a 19 	lds	r24, 0x196A	; 0x80196a <_ppr_reg>
   104b6:	82 2b       	or	r24, r18
   104b8:	80 93 6a 19 	sts	0x196A, r24	; 0x80196a <_ppr_reg>
    ppr_set(_ppr_reg);
   104bc:	d0 cf       	rjmp	.-96     	; 0x1045e <ppr_set>
   104be:	08 95       	ret

000104c0 <ppr_bit_clr>:
/// @return  void

void ppr_bit_clr(uint8_t bit)
{
///FIXME _ppr_reg = 0;
    BIT_CLR(_ppr_reg,bit);
   104c0:	21 e0       	ldi	r18, 0x01	; 1
   104c2:	30 e0       	ldi	r19, 0x00	; 0
   104c4:	01 c0       	rjmp	.+2      	; 0x104c8 <ppr_bit_clr+0x8>
   104c6:	22 0f       	add	r18, r18
   104c8:	8a 95       	dec	r24
   104ca:	ea f7       	brpl	.-6      	; 0x104c6 <ppr_bit_clr+0x6>
   104cc:	20 95       	com	r18
   104ce:	80 91 6a 19 	lds	r24, 0x196A	; 0x80196a <_ppr_reg>
   104d2:	82 23       	and	r24, r18
   104d4:	80 93 6a 19 	sts	0x196A, r24	; 0x80196a <_ppr_reg>
    ppr_set(_ppr_reg);
   104d8:	c2 cf       	rjmp	.-124    	; 0x1045e <ppr_set>
   104da:	08 95       	ret

000104dc <dbf_open>:
/// @see ff.h
///
/// @return  FRESULT f_open(fp,path, mode);

FRESULT dbf_open (FIL* fp, const TCHAR* path, BYTE mode)
{
   104dc:	0f 93       	push	r16
   104de:	1f 93       	push	r17
   104e0:	cf 93       	push	r28
   104e2:	df 93       	push	r29
   104e4:	00 d0       	rcall	.+0      	; 0x104e6 <dbf_open+0xa>
   104e6:	00 d0       	rcall	.+0      	; 0x104e8 <dbf_open+0xc>
   104e8:	1f 92       	push	r1
   104ea:	8b 01       	movw	r16, r22
    int rc;
    rc = f_open(fp,path, mode);
   104ec:	0e 94 fa 57 	call	0xaff4	; 0xaff4 <f_open>
   104f0:	ec 01       	movw	r28, r24
    if(rc)
   104f2:	89 2b       	or	r24, r25
   104f4:	79 f0       	breq	.+30     	; 0x10514 <dbf_open+0x38>
    {
        printf("Open error:[%s] ", path);
   104f6:	ed b7       	in	r30, 0x3d	; 61
   104f8:	fe b7       	in	r31, 0x3e	; 62
   104fa:	15 83       	std	Z+5, r17	; 0x05
   104fc:	04 83       	std	Z+4, r16	; 0x04
   104fe:	82 e0       	ldi	r24, 0x02	; 2
   10500:	9f e0       	ldi	r25, 0x0F	; 15
   10502:	a0 e0       	ldi	r26, 0x00	; 0
   10504:	81 83       	std	Z+1, r24	; 0x01
   10506:	92 83       	std	Z+2, r25	; 0x02
   10508:	a3 83       	std	Z+3, r26	; 0x03
   1050a:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
        put_rc(rc);
   1050e:	ce 01       	movw	r24, r28
   10510:	0e 94 b4 6e 	call	0xdd68	; 0xdd68 <put_rc>
        return (rc);
    }
    return(0);
}
   10514:	ce 01       	movw	r24, r28
   10516:	cd b7       	in	r28, 0x3d	; 61
   10518:	de b7       	in	r29, 0x3e	; 62
   1051a:	25 96       	adiw	r28, 0x05	; 5
   1051c:	e4 e0       	ldi	r30, 0x04	; 4
   1051e:	0c 94 33 e3 	jmp	0x1c666	; 0x1c666 <__epilogue_restores__+0x1c>

00010522 <dbf_read>:
/// @see ff.h
///
/// @return  FRESULT f_read (FIL* fp, void* buff, UINT btr, UINT* br)

FRESULT dbf_read (FIL* fp, void* buff, UINT btr, UINT* br)
{
   10522:	cf 93       	push	r28
   10524:	df 93       	push	r29
   10526:	00 d0       	rcall	.+0      	; 0x10528 <dbf_read+0x6>
   10528:	1f 92       	push	r1
    int rc;
    rc = f_read(fp, buff, btr, br);
   1052a:	0e 94 b2 59 	call	0xb364	; 0xb364 <f_read>
   1052e:	ec 01       	movw	r28, r24
    if(rc)
   10530:	89 2b       	or	r24, r25
   10532:	69 f0       	breq	.+26     	; 0x1054e <dbf_read+0x2c>
    {
        printf("Read error: ");
   10534:	85 ef       	ldi	r24, 0xF5	; 245
   10536:	9e e0       	ldi	r25, 0x0E	; 14
   10538:	a0 e0       	ldi	r26, 0x00	; 0
   1053a:	ed b7       	in	r30, 0x3d	; 61
   1053c:	fe b7       	in	r31, 0x3e	; 62
   1053e:	81 83       	std	Z+1, r24	; 0x01
   10540:	92 83       	std	Z+2, r25	; 0x02
   10542:	a3 83       	std	Z+3, r26	; 0x03
   10544:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
        put_rc(rc);
   10548:	ce 01       	movw	r24, r28
   1054a:	0e 94 b4 6e 	call	0xdd68	; 0xdd68 <put_rc>
        return (rc);
    }
    return(0);
}
   1054e:	ce 01       	movw	r24, r28
   10550:	cd b7       	in	r28, 0x3d	; 61
   10552:	de b7       	in	r29, 0x3e	; 62
   10554:	23 96       	adiw	r28, 0x03	; 3
   10556:	e2 e0       	ldi	r30, 0x02	; 2
   10558:	0c 94 35 e3 	jmp	0x1c66a	; 0x1c66a <__epilogue_restores__+0x20>

0001055c <dbf_write>:
///
/// @see ff.h
/// @return  FRESULT f_write (FIL* fp, void* buff, UINT btw, UINT* bw)

FRESULT dbf_write (FIL* fp, const void* buff, UINT btw, UINT* bw)
{
   1055c:	cf 93       	push	r28
   1055e:	df 93       	push	r29
   10560:	00 d0       	rcall	.+0      	; 0x10562 <dbf_write+0x6>
   10562:	1f 92       	push	r1
    int rc;
    rc = f_write(fp, buff, btw, bw);
   10564:	0e 94 fd 5a 	call	0xb5fa	; 0xb5fa <f_write>
   10568:	ec 01       	movw	r28, r24
    if(rc)
   1056a:	89 2b       	or	r24, r25
   1056c:	69 f0       	breq	.+26     	; 0x10588 <dbf_write+0x2c>
    {
        printf("Write error: ");
   1056e:	87 ee       	ldi	r24, 0xE7	; 231
   10570:	9e e0       	ldi	r25, 0x0E	; 14
   10572:	a0 e0       	ldi	r26, 0x00	; 0
   10574:	ed b7       	in	r30, 0x3d	; 61
   10576:	fe b7       	in	r31, 0x3e	; 62
   10578:	81 83       	std	Z+1, r24	; 0x01
   1057a:	92 83       	std	Z+2, r25	; 0x02
   1057c:	a3 83       	std	Z+3, r26	; 0x03
   1057e:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
        put_rc(rc);
   10582:	ce 01       	movw	r24, r28
   10584:	0e 94 b4 6e 	call	0xdd68	; 0xdd68 <put_rc>
        return (rc);
    }
    return(0);
}
   10588:	ce 01       	movw	r24, r28
   1058a:	cd b7       	in	r28, 0x3d	; 61
   1058c:	de b7       	in	r29, 0x3e	; 62
   1058e:	23 96       	adiw	r28, 0x03	; 3
   10590:	e2 e0       	ldi	r30, 0x02	; 2
   10592:	0c 94 35 e3 	jmp	0x1c66a	; 0x1c66a <__epilogue_restores__+0x20>

00010596 <dbf_lseek>:
///
/// @see ff.h.
/// @return  FRESULT

FRESULT dbf_lseek (FIL* fp, DWORD ofs)
{
   10596:	cf 93       	push	r28
   10598:	df 93       	push	r29
   1059a:	00 d0       	rcall	.+0      	; 0x1059c <dbf_lseek+0x6>
   1059c:	1f 92       	push	r1
    int rc;
    rc = f_lseek(fp, ofs);
   1059e:	0e 94 be 5e 	call	0xbd7c	; 0xbd7c <f_lseek>
   105a2:	ec 01       	movw	r28, r24
    if(rc)
   105a4:	89 2b       	or	r24, r25
   105a6:	69 f0       	breq	.+26     	; 0x105c2 <dbf_lseek+0x2c>
    {
        printf("Seek error: ");
   105a8:	8a ed       	ldi	r24, 0xDA	; 218
   105aa:	9e e0       	ldi	r25, 0x0E	; 14
   105ac:	a0 e0       	ldi	r26, 0x00	; 0
   105ae:	ed b7       	in	r30, 0x3d	; 61
   105b0:	fe b7       	in	r31, 0x3e	; 62
   105b2:	81 83       	std	Z+1, r24	; 0x01
   105b4:	92 83       	std	Z+2, r25	; 0x02
   105b6:	a3 83       	std	Z+3, r26	; 0x03
   105b8:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
        put_rc(rc);
   105bc:	ce 01       	movw	r24, r28
   105be:	0e 94 b4 6e 	call	0xdd68	; 0xdd68 <put_rc>
        return (rc);
    }
    return(0);
}
   105c2:	ce 01       	movw	r24, r28
   105c4:	cd b7       	in	r28, 0x3d	; 61
   105c6:	de b7       	in	r29, 0x3e	; 62
   105c8:	23 96       	adiw	r28, 0x03	; 3
   105ca:	e2 e0       	ldi	r30, 0x02	; 2
   105cc:	0c 94 35 e3 	jmp	0x1c66a	; 0x1c66a <__epilogue_restores__+0x20>

000105d0 <dbf_close>:
///
/// @see ff.h.
/// @return  FRESULT dbf_close (FIL* fp)

FRESULT dbf_close (FIL* fp)
{
   105d0:	cf 93       	push	r28
   105d2:	df 93       	push	r29
   105d4:	00 d0       	rcall	.+0      	; 0x105d6 <dbf_close+0x6>
   105d6:	1f 92       	push	r1
    int rc;
    rc = f_close(fp);
   105d8:	0e 94 14 5d 	call	0xba28	; 0xba28 <f_close>
   105dc:	ec 01       	movw	r28, r24
    if(rc != FR_OK)
   105de:	89 2b       	or	r24, r25
   105e0:	69 f0       	breq	.+26     	; 0x105fc <dbf_close+0x2c>
    {
        printf("Close error: ");
   105e2:	8c ec       	ldi	r24, 0xCC	; 204
   105e4:	9e e0       	ldi	r25, 0x0E	; 14
   105e6:	a0 e0       	ldi	r26, 0x00	; 0
   105e8:	ed b7       	in	r30, 0x3d	; 61
   105ea:	fe b7       	in	r31, 0x3e	; 62
   105ec:	81 83       	std	Z+1, r24	; 0x01
   105ee:	92 83       	std	Z+2, r25	; 0x02
   105f0:	a3 83       	std	Z+3, r26	; 0x03
   105f2:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
        put_rc(rc);
   105f6:	ce 01       	movw	r24, r28
   105f8:	0e 94 b4 6e 	call	0xdd68	; 0xdd68 <put_rc>
        return (rc);
    }
    return(0);
}
   105fc:	ce 01       	movw	r24, r28
   105fe:	cd b7       	in	r28, 0x3d	; 61
   10600:	de b7       	in	r29, 0x3e	; 62
   10602:	23 96       	adiw	r28, 0x03	; 3
   10604:	e2 e0       	ldi	r30, 0x02	; 2
   10606:	0c 94 35 e3 	jmp	0x1c66a	; 0x1c66a <__epilogue_restores__+0x20>

0001060a <dbf_open_read>:
/// @return -1 on error.
/// @see: ff.h.
/// @return  FRESULT

int dbf_open_read(char *name, uint32_t pos, void *buff, int size, int *errors)
{
   1060a:	a6 e2       	ldi	r26, 0x26	; 38
   1060c:	b2 e0       	ldi	r27, 0x02	; 2
   1060e:	eb e0       	ldi	r30, 0x0B	; 11
   10610:	f3 e8       	ldi	r31, 0x83	; 131
   10612:	0c 94 0f e3 	jmp	0x1c61e	; 0x1c61e <__prologue_saves__+0xc>
   10616:	4a 01       	movw	r8, r20
   10618:	5b 01       	movw	r10, r22
   1061a:	69 01       	movw	r12, r18
    int rc;
    FIL fp;
    int flags = 0;
    UINT bytes = 0;
   1061c:	cb 5d       	subi	r28, 0xDB	; 219
   1061e:	dd 4f       	sbci	r29, 0xFD	; 253
   10620:	19 82       	std	Y+1, r1	; 0x01
   10622:	18 82       	st	Y, r1
   10624:	c5 52       	subi	r28, 0x25	; 37
   10626:	d2 40       	sbci	r29, 0x02	; 2

    rc = dbf_open(&fp, name, FA_OPEN_EXISTING | FA_READ | FA_WRITE);
   10628:	43 e0       	ldi	r20, 0x03	; 3
   1062a:	bc 01       	movw	r22, r24
   1062c:	ce 01       	movw	r24, r28
   1062e:	01 96       	adiw	r24, 0x01	; 1
   10630:	55 df       	rcall	.-342    	; 0x104dc <dbf_open>
    if( rc != FR_OK)
   10632:	89 2b       	or	r24, r25
   10634:	19 f0       	breq	.+6      	; 0x1063c <dbf_open_read+0x32>
    {
        flags |= ERR_DISK;
        flags |= ERR_READ;
        *errors = flags;
   10636:	81 e1       	ldi	r24, 0x11	; 17
   10638:	90 e0       	ldi	r25, 0x00	; 0
   1063a:	2f c0       	rjmp	.+94     	; 0x1069a <dbf_open_read+0x90>
        return( -1 );
    }

///  SEEK
    rc = dbf_lseek(&fp, pos);
   1063c:	b5 01       	movw	r22, r10
   1063e:	a4 01       	movw	r20, r8
   10640:	ce 01       	movw	r24, r28
   10642:	01 96       	adiw	r24, 0x01	; 1
   10644:	a8 df       	rcall	.-176    	; 0x10596 <dbf_lseek>
    if( rc != FR_OK)
   10646:	89 2b       	or	r24, r25
   10648:	59 f0       	breq	.+22     	; 0x10660 <dbf_open_read+0x56>
    {
        flags |= ERR_SEEK;
        flags |= ERR_READ;
        *errors = flags;
   1064a:	85 e0       	ldi	r24, 0x05	; 5
   1064c:	90 e0       	ldi	r25, 0x00	; 0
   1064e:	f7 01       	movw	r30, r14
   10650:	91 83       	std	Z+1, r25	; 0x01
   10652:	80 83       	st	Z, r24
        dbf_close(&fp);
   10654:	ce 01       	movw	r24, r28
   10656:	01 96       	adiw	r24, 0x01	; 1
   10658:	bb df       	rcall	.-138    	; 0x105d0 <dbf_close>
        return( -1 );
   1065a:	8f ef       	ldi	r24, 0xFF	; 255
   1065c:	9f ef       	ldi	r25, 0xFF	; 255
   1065e:	27 c0       	rjmp	.+78     	; 0x106ae <dbf_open_read+0xa4>
    }

    rc = dbf_read(&fp, buff,size,&bytes);
   10660:	9e 01       	movw	r18, r28
   10662:	2b 5d       	subi	r18, 0xDB	; 219
   10664:	3d 4f       	sbci	r19, 0xFD	; 253
   10666:	a8 01       	movw	r20, r16
   10668:	b6 01       	movw	r22, r12
   1066a:	ce 01       	movw	r24, r28
   1066c:	01 96       	adiw	r24, 0x01	; 1
   1066e:	59 df       	rcall	.-334    	; 0x10522 <dbf_read>
    if( rc != FR_OK || (UINT) size != bytes)
   10670:	89 2b       	or	r24, r25
   10672:	49 f4       	brne	.+18     	; 0x10686 <dbf_open_read+0x7c>
   10674:	cb 5d       	subi	r28, 0xDB	; 219
   10676:	dd 4f       	sbci	r29, 0xFD	; 253
   10678:	88 81       	ld	r24, Y
   1067a:	99 81       	ldd	r25, Y+1	; 0x01
   1067c:	c5 52       	subi	r28, 0x25	; 37
   1067e:	d2 40       	sbci	r29, 0x02	; 2
   10680:	08 17       	cp	r16, r24
   10682:	19 07       	cpc	r17, r25
   10684:	19 f0       	breq	.+6      	; 0x1068c <dbf_open_read+0x82>
    {
        flags |= ERR_READ;
        *errors = flags;
   10686:	81 e0       	ldi	r24, 0x01	; 1
   10688:	90 e0       	ldi	r25, 0x00	; 0
        dbf_close(&fp);
        return( -1 );
    }
    rc = dbf_close(&fp);
   1068a:	e1 cf       	rjmp	.-62     	; 0x1064e <dbf_open_read+0x44>
   1068c:	ce 01       	movw	r24, r28
   1068e:	01 96       	adiw	r24, 0x01	; 1
   10690:	9f df       	rcall	.-194    	; 0x105d0 <dbf_close>
    if( rc != FR_OK)
   10692:	89 2b       	or	r24, r25
   10694:	31 f0       	breq	.+12     	; 0x106a2 <dbf_open_read+0x98>
    {
        flags |= ERR_DISK;
        *errors = flags;
   10696:	80 e1       	ldi	r24, 0x10	; 16
   10698:	90 e0       	ldi	r25, 0x00	; 0
   1069a:	f7 01       	movw	r30, r14
   1069c:	91 83       	std	Z+1, r25	; 0x01
   1069e:	80 83       	st	Z, r24
   106a0:	dc cf       	rjmp	.-72     	; 0x1065a <dbf_open_read+0x50>
#if 0
// test timeout - this works ok
	delayms(500); 
#endif

    return(bytes);
   106a2:	cb 5d       	subi	r28, 0xDB	; 219
   106a4:	dd 4f       	sbci	r29, 0xFD	; 253
   106a6:	88 81       	ld	r24, Y
   106a8:	99 81       	ldd	r25, Y+1	; 0x01
   106aa:	c5 52       	subi	r28, 0x25	; 37
   106ac:	d2 40       	sbci	r29, 0x02	; 2
}
   106ae:	ca 5d       	subi	r28, 0xDA	; 218
   106b0:	dd 4f       	sbci	r29, 0xFD	; 253
   106b2:	ec e0       	ldi	r30, 0x0C	; 12
   106b4:	0c 94 2b e3 	jmp	0x1c656	; 0x1c656 <__epilogue_restores__+0xc>

000106b8 <dbf_open_write>:
/// @return  bytes actually written.
/// @return -1 on error.
/// @see: ff.h.
/// @return  FRESULT
int dbf_open_write(char *name, uint32_t pos, void *buff, int size, int *errors)
{
   106b8:	a6 e2       	ldi	r26, 0x26	; 38
   106ba:	b2 e0       	ldi	r27, 0x02	; 2
   106bc:	e2 e6       	ldi	r30, 0x62	; 98
   106be:	f3 e8       	ldi	r31, 0x83	; 131
   106c0:	0c 94 0f e3 	jmp	0x1c61e	; 0x1c61e <__prologue_saves__+0xc>
   106c4:	4a 01       	movw	r8, r20
   106c6:	5b 01       	movw	r10, r22
   106c8:	69 01       	movw	r12, r18
    int rc;
    FIL fp;
    int flags = 0;
    UINT bytes = 0;
   106ca:	cb 5d       	subi	r28, 0xDB	; 219
   106cc:	dd 4f       	sbci	r29, 0xFD	; 253
   106ce:	19 82       	std	Y+1, r1	; 0x01
   106d0:	18 82       	st	Y, r1
   106d2:	c5 52       	subi	r28, 0x25	; 37
   106d4:	d2 40       	sbci	r29, 0x02	; 2

    rc = dbf_open(&fp, name, FA_OPEN_EXISTING | FA_READ | FA_WRITE);
   106d6:	43 e0       	ldi	r20, 0x03	; 3
   106d8:	bc 01       	movw	r22, r24
   106da:	ce 01       	movw	r24, r28
   106dc:	01 96       	adiw	r24, 0x01	; 1
   106de:	fe de       	rcall	.-516    	; 0x104dc <dbf_open>
    if( rc != FR_OK)
   106e0:	89 2b       	or	r24, r25
   106e2:	19 f0       	breq	.+6      	; 0x106ea <dbf_open_write+0x32>
    {
        flags |= ERR_DISK;
        flags |= ERR_WRITE;
        *errors = flags;
   106e4:	82 e1       	ldi	r24, 0x12	; 18
   106e6:	90 e0       	ldi	r25, 0x00	; 0
   106e8:	2f c0       	rjmp	.+94     	; 0x10748 <dbf_open_write+0x90>
        return( -1 );
    }

///  SEEK
    rc = dbf_lseek(&fp, pos);
   106ea:	b5 01       	movw	r22, r10
   106ec:	a4 01       	movw	r20, r8
   106ee:	ce 01       	movw	r24, r28
   106f0:	01 96       	adiw	r24, 0x01	; 1
   106f2:	51 df       	rcall	.-350    	; 0x10596 <dbf_lseek>
    if( rc != FR_OK)
   106f4:	89 2b       	or	r24, r25
   106f6:	59 f0       	breq	.+22     	; 0x1070e <dbf_open_write+0x56>
    {
        flags |= ERR_SEEK;
        flags |= ERR_WRITE;
        *errors = flags;
   106f8:	86 e0       	ldi	r24, 0x06	; 6
   106fa:	90 e0       	ldi	r25, 0x00	; 0
   106fc:	f7 01       	movw	r30, r14
   106fe:	91 83       	std	Z+1, r25	; 0x01
   10700:	80 83       	st	Z, r24
        dbf_close(&fp);
   10702:	ce 01       	movw	r24, r28
   10704:	01 96       	adiw	r24, 0x01	; 1
   10706:	64 df       	rcall	.-312    	; 0x105d0 <dbf_close>
        return( -1 );
   10708:	8f ef       	ldi	r24, 0xFF	; 255
   1070a:	9f ef       	ldi	r25, 0xFF	; 255
   1070c:	27 c0       	rjmp	.+78     	; 0x1075c <dbf_open_write+0xa4>
    }

    rc = dbf_write(&fp, buff,size,&bytes);
   1070e:	9e 01       	movw	r18, r28
   10710:	2b 5d       	subi	r18, 0xDB	; 219
   10712:	3d 4f       	sbci	r19, 0xFD	; 253
   10714:	a8 01       	movw	r20, r16
   10716:	b6 01       	movw	r22, r12
   10718:	ce 01       	movw	r24, r28
   1071a:	01 96       	adiw	r24, 0x01	; 1
   1071c:	1f df       	rcall	.-450    	; 0x1055c <dbf_write>
    if( rc != FR_OK || (UINT) size != bytes)
   1071e:	89 2b       	or	r24, r25
   10720:	49 f4       	brne	.+18     	; 0x10734 <dbf_open_write+0x7c>
   10722:	cb 5d       	subi	r28, 0xDB	; 219
   10724:	dd 4f       	sbci	r29, 0xFD	; 253
   10726:	88 81       	ld	r24, Y
   10728:	99 81       	ldd	r25, Y+1	; 0x01
   1072a:	c5 52       	subi	r28, 0x25	; 37
   1072c:	d2 40       	sbci	r29, 0x02	; 2
   1072e:	08 17       	cp	r16, r24
   10730:	19 07       	cpc	r17, r25
   10732:	19 f0       	breq	.+6      	; 0x1073a <dbf_open_write+0x82>
    {
        flags |= ERR_WRITE;
        *errors = flags;
   10734:	82 e0       	ldi	r24, 0x02	; 2
   10736:	90 e0       	ldi	r25, 0x00	; 0
        dbf_close(&fp);
        return( -1 );
    }
    rc = dbf_close(&fp);
   10738:	e1 cf       	rjmp	.-62     	; 0x106fc <dbf_open_write+0x44>
   1073a:	ce 01       	movw	r24, r28
   1073c:	01 96       	adiw	r24, 0x01	; 1
   1073e:	48 df       	rcall	.-368    	; 0x105d0 <dbf_close>
    if( rc != FR_OK)
   10740:	89 2b       	or	r24, r25
   10742:	31 f0       	breq	.+12     	; 0x10750 <dbf_open_write+0x98>
    {
        flags |= ERR_DISK;
        *errors = flags;
   10744:	80 e1       	ldi	r24, 0x10	; 16
   10746:	90 e0       	ldi	r25, 0x00	; 0
   10748:	f7 01       	movw	r30, r14
   1074a:	91 83       	std	Z+1, r25	; 0x01
   1074c:	80 83       	st	Z, r24
   1074e:	dc cf       	rjmp	.-72     	; 0x10708 <dbf_open_write+0x50>
#if 0
// test timeout - this causes timeout
	delayms(200); 
#endif

    return(bytes);
   10750:	cb 5d       	subi	r28, 0xDB	; 219
   10752:	dd 4f       	sbci	r29, 0xFD	; 253
   10754:	88 81       	ld	r24, Y
   10756:	99 81       	ldd	r25, Y+1	; 0x01
   10758:	c5 52       	subi	r28, 0x25	; 37
   1075a:	d2 40       	sbci	r29, 0x02	; 2
}
   1075c:	ca 5d       	subi	r28, 0xDA	; 218
   1075e:	dd 4f       	sbci	r29, 0xFD	; 253
   10760:	ec e0       	ldi	r30, 0x0C	; 12
   10762:	0c 94 2b e3 	jmp	0x1c656	; 0x1c656 <__epilogue_restores__+0xc>

00010766 <gpib_timer_elapsed_begin>:
            gpib_timer_elapsed_end("PP released");
#endif
        return(1);
    }
    return(0);
}
   10766:	0c 94 c0 33 	jmp	0x6780	; 0x6780 <clock_elapsed_begin>
   1076a:	08 95       	ret

0001076c <gpib_timer_reset>:
   1076c:	f8 94       	cli
   1076e:	eb ee       	ldi	r30, 0xEB	; 235
   10770:	fc e1       	ldi	r31, 0x1C	; 28
   10772:	10 82       	st	Z, r1
   10774:	11 82       	std	Z+1, r1	; 0x01
   10776:	12 82       	std	Z+2, r1	; 0x02
   10778:	13 82       	std	Z+3, r1	; 0x03
   1077a:	14 82       	std	Z+4, r1	; 0x04
   1077c:	15 82       	std	Z+5, r1	; 0x05
   1077e:	16 82       	std	Z+6, r1	; 0x06
   10780:	17 82       	std	Z+7, r1	; 0x07
   10782:	81 e0       	ldi	r24, 0x01	; 1
   10784:	80 87       	std	Z+8, r24	; 0x08
   10786:	78 94       	sei
   10788:	08 95       	ret

0001078a <gpib_timer_elapsed_end>:
   1078a:	0c 94 c6 33 	jmp	0x678c	; 0x678c <clock_elapsed_end>
   1078e:	08 95       	ret

00010790 <gpib_timer_task>:
   10790:	f8 94       	cli
   10792:	80 91 ef 1c 	lds	r24, 0x1CEF	; 0x801cef <gpib_timer+0x4>
   10796:	90 91 f0 1c 	lds	r25, 0x1CF0	; 0x801cf0 <gpib_timer+0x5>
   1079a:	a0 91 f1 1c 	lds	r26, 0x1CF1	; 0x801cf1 <gpib_timer+0x6>
   1079e:	b0 91 f2 1c 	lds	r27, 0x1CF2	; 0x801cf2 <gpib_timer+0x7>
   107a2:	89 2b       	or	r24, r25
   107a4:	8a 2b       	or	r24, r26
   107a6:	8b 2b       	or	r24, r27
   107a8:	a1 f0       	breq	.+40     	; 0x107d2 <gpib_timer_task+0x42>
   107aa:	80 91 ef 1c 	lds	r24, 0x1CEF	; 0x801cef <gpib_timer+0x4>
   107ae:	90 91 f0 1c 	lds	r25, 0x1CF0	; 0x801cf0 <gpib_timer+0x5>
   107b2:	a0 91 f1 1c 	lds	r26, 0x1CF1	; 0x801cf1 <gpib_timer+0x6>
   107b6:	b0 91 f2 1c 	lds	r27, 0x1CF2	; 0x801cf2 <gpib_timer+0x7>
   107ba:	01 97       	sbiw	r24, 0x01	; 1
   107bc:	a1 09       	sbc	r26, r1
   107be:	b1 09       	sbc	r27, r1
   107c0:	80 93 ef 1c 	sts	0x1CEF, r24	; 0x801cef <gpib_timer+0x4>
   107c4:	90 93 f0 1c 	sts	0x1CF0, r25	; 0x801cf0 <gpib_timer+0x5>
   107c8:	a0 93 f1 1c 	sts	0x1CF1, r26	; 0x801cf1 <gpib_timer+0x6>
   107cc:	b0 93 f2 1c 	sts	0x1CF2, r27	; 0x801cf2 <gpib_timer+0x7>
   107d0:	03 c0       	rjmp	.+6      	; 0x107d8 <gpib_timer_task+0x48>
   107d2:	81 e0       	ldi	r24, 0x01	; 1
   107d4:	80 93 f3 1c 	sts	0x1CF3, r24	; 0x801cf3 <gpib_timer+0x8>
   107d8:	78 94       	sei
   107da:	08 95       	ret

000107dc <gpib_timeout_set>:
   107dc:	f8 94       	cli
   107de:	eb ee       	ldi	r30, 0xEB	; 235
   107e0:	fc e1       	ldi	r31, 0x1C	; 28
   107e2:	64 83       	std	Z+4, r22	; 0x04
   107e4:	75 83       	std	Z+5, r23	; 0x05
   107e6:	86 83       	std	Z+6, r24	; 0x06
   107e8:	97 83       	std	Z+7, r25	; 0x07
   107ea:	10 86       	std	Z+8, r1	; 0x08
   107ec:	78 94       	sei
   107ee:	08 95       	ret

000107f0 <gpib_bus_init>:
   107f0:	00 d0       	rcall	.+0      	; 0x107f2 <gpib_bus_init+0x2>
   107f2:	1f 92       	push	r1
   107f4:	8f b7       	in	r24, 0x3f	; 63
   107f6:	f8 94       	cli
   107f8:	10 92 6b 19 	sts	0x196B, r1	; 0x80196b <gpib_unread_f>
   107fc:	11 b8       	out	0x01, r1	; 1
   107fe:	9f ef       	ldi	r25, 0xFF	; 255
   10800:	92 b9       	out	0x02, r25	; 2
   10802:	21 98       	cbi	0x04, 1	; 4
   10804:	29 9a       	sbi	0x05, 1	; 5
   10806:	52 98       	cbi	0x0a, 2	; 10
   10808:	5a 9a       	sbi	0x0b, 2	; 11
   1080a:	53 98       	cbi	0x0a, 3	; 10
   1080c:	5b 9a       	sbi	0x0b, 3	; 11
   1080e:	56 98       	cbi	0x0a, 6	; 10
   10810:	5e 9a       	sbi	0x0b, 6	; 11
   10812:	54 98       	cbi	0x0a, 4	; 10
   10814:	5c 9a       	sbi	0x0b, 4	; 11
   10816:	57 98       	cbi	0x0a, 7	; 10
   10818:	5f 9a       	sbi	0x0b, 7	; 11
   1081a:	55 98       	cbi	0x0a, 5	; 10
   1081c:	5d 9a       	sbi	0x0b, 5	; 11
   1081e:	20 98       	cbi	0x04, 0	; 4
   10820:	28 9a       	sbi	0x05, 0	; 5
   10822:	45 98       	cbi	0x08, 5	; 8
   10824:	3d 9a       	sbi	0x07, 5	; 7
   10826:	44 9a       	sbi	0x08, 4	; 8
   10828:	3c 9a       	sbi	0x07, 4	; 7
   1082a:	43 98       	cbi	0x08, 3	; 8
   1082c:	3b 9a       	sbi	0x07, 3	; 7
   1082e:	42 98       	cbi	0x08, 2	; 8
   10830:	3a 9a       	sbi	0x07, 2	; 7
   10832:	9d e0       	ldi	r25, 0x0D	; 13
   10834:	9a 95       	dec	r25
   10836:	f1 f7       	brne	.-4      	; 0x10834 <gpib_bus_init+0x44>
   10838:	00 00       	nop
   1083a:	8f bf       	out	0x3f, r24	; 63
   1083c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10840:	82 ff       	sbrs	r24, 2
   10842:	0a c0       	rjmp	.+20     	; 0x10858 <gpib_bus_init+0x68>
   10844:	84 e6       	ldi	r24, 0x64	; 100
   10846:	92 e1       	ldi	r25, 0x12	; 18
   10848:	a0 e0       	ldi	r26, 0x00	; 0
   1084a:	ed b7       	in	r30, 0x3d	; 61
   1084c:	fe b7       	in	r31, 0x3e	; 62
   1084e:	81 83       	std	Z+1, r24	; 0x01
   10850:	92 83       	std	Z+2, r25	; 0x02
   10852:	a3 83       	std	Z+3, r26	; 0x03
   10854:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   10858:	0f 90       	pop	r0
   1085a:	0f 90       	pop	r0
   1085c:	0f 90       	pop	r0
   1085e:	08 95       	ret

00010860 <gpib_rx_init>:
   10860:	9f b7       	in	r25, 0x3f	; 63
   10862:	f8 94       	cli
   10864:	11 b8       	out	0x01, r1	; 1
   10866:	2f ef       	ldi	r18, 0xFF	; 255
   10868:	22 b9       	out	0x02, r18	; 2
   1086a:	21 98       	cbi	0x04, 1	; 4
   1086c:	29 9a       	sbi	0x05, 1	; 5
   1086e:	20 98       	cbi	0x04, 0	; 4
   10870:	28 9a       	sbi	0x05, 0	; 5
   10872:	4e 9b       	sbis	0x09, 6	; 9
   10874:	09 c0       	rjmp	.+18     	; 0x10888 <gpib_rx_init+0x28>
   10876:	81 11       	cpse	r24, r1
   10878:	07 c0       	rjmp	.+14     	; 0x10888 <gpib_rx_init+0x28>
   1087a:	52 98       	cbi	0x0a, 2	; 10
   1087c:	5a 9a       	sbi	0x0b, 2	; 11
   1087e:	53 98       	cbi	0x0a, 3	; 10
   10880:	5b 9a       	sbi	0x0b, 3	; 11
   10882:	42 98       	cbi	0x08, 2	; 8
   10884:	3a 9a       	sbi	0x07, 2	; 7
   10886:	08 c0       	rjmp	.+16     	; 0x10898 <gpib_rx_init+0x38>
   10888:	42 98       	cbi	0x08, 2	; 8
   1088a:	3a 9a       	sbi	0x07, 2	; 7
   1088c:	5b 98       	cbi	0x0b, 3	; 11
   1088e:	53 9a       	sbi	0x0a, 3	; 10
   10890:	5a 98       	cbi	0x0b, 2	; 11
   10892:	52 9a       	sbi	0x0a, 2	; 10
   10894:	88 23       	and	r24, r24
   10896:	89 f3       	breq	.-30     	; 0x1087a <gpib_rx_init+0x1a>
   10898:	9f bf       	out	0x3f, r25	; 63
   1089a:	08 95       	ret

0001089c <gpib_tx_init>:
   1089c:	9f b7       	in	r25, 0x3f	; 63
   1089e:	f8 94       	cli
   108a0:	11 b8       	out	0x01, r1	; 1
   108a2:	8f ef       	ldi	r24, 0xFF	; 255
   108a4:	82 b9       	out	0x02, r24	; 2
   108a6:	21 98       	cbi	0x04, 1	; 4
   108a8:	29 9a       	sbi	0x05, 1	; 5
   108aa:	52 98       	cbi	0x0a, 2	; 10
   108ac:	5a 9a       	sbi	0x0b, 2	; 11
   108ae:	53 98       	cbi	0x0a, 3	; 10
   108b0:	5b 9a       	sbi	0x0b, 3	; 11
   108b2:	20 98       	cbi	0x04, 0	; 4
   108b4:	28 9a       	sbi	0x05, 0	; 5
   108b6:	42 9a       	sbi	0x08, 2	; 8
   108b8:	3a 9a       	sbi	0x07, 2	; 7
   108ba:	81 b9       	out	0x01, r24	; 1
   108bc:	9f bf       	out	0x3f, r25	; 63
   108be:	08 95       	ret

000108c0 <gpib_state_init>:
   108c0:	00 d0       	rcall	.+0      	; 0x108c2 <gpib_state_init+0x2>
   108c2:	1f 92       	push	r1
   108c4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   108c8:	82 ff       	sbrs	r24, 2
   108ca:	0a c0       	rjmp	.+20     	; 0x108e0 <gpib_state_init+0x20>
   108cc:	81 e5       	ldi	r24, 0x51	; 81
   108ce:	92 e1       	ldi	r25, 0x12	; 18
   108d0:	a0 e0       	ldi	r26, 0x00	; 0
   108d2:	ed b7       	in	r30, 0x3d	; 61
   108d4:	fe b7       	in	r31, 0x3e	; 62
   108d6:	81 83       	std	Z+1, r24	; 0x01
   108d8:	92 83       	std	Z+2, r25	; 0x02
   108da:	a3 83       	std	Z+3, r26	; 0x03
   108dc:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   108e0:	cc dd       	rcall	.-1128   	; 0x1047a <ppr_init>
   108e2:	0e 94 f9 8e 	call	0x11df2	; 0x11df2 <listen_cleanup>
   108e6:	0e 94 0f 90 	call	0x1201e	; 0x1201e <talk_cleanup>
   108ea:	10 92 f7 1e 	sts	0x1EF7, r1	; 0x801ef7 <spoll>
   108ee:	10 92 fa 1e 	sts	0x1EFA, r1	; 0x801efa <talking>
   108f2:	10 92 fd 1e 	sts	0x1EFD, r1	; 0x801efd <talking_last>
   108f6:	10 92 fc 1e 	sts	0x1EFC, r1	; 0x801efc <listening>
   108fa:	10 92 f6 1e 	sts	0x1EF6, r1	; 0x801ef6 <listening_last>
   108fe:	10 92 f5 1c 	sts	0x1CF5, r1	; 0x801cf5 <lastcmd+0x1>
   10902:	10 92 f4 1c 	sts	0x1CF4, r1	; 0x801cf4 <lastcmd>
   10906:	10 92 f9 1e 	sts	0x1EF9, r1	; 0x801ef9 <current+0x1>
   1090a:	10 92 f8 1e 	sts	0x1EF8, r1	; 0x801ef8 <current>
   1090e:	10 92 fb 1e 	sts	0x1EFB, r1	; 0x801efb <secondary>
   10912:	0f 90       	pop	r0
   10914:	0f 90       	pop	r0
   10916:	0f 90       	pop	r0
   10918:	08 95       	ret

0001091a <gpib_enable_PPR>:
   1091a:	cf 93       	push	r28
   1091c:	df 93       	push	r29
   1091e:	ad b7       	in	r26, 0x3d	; 61
   10920:	be b7       	in	r27, 0x3e	; 62
   10922:	17 97       	sbiw	r26, 0x07	; 7
   10924:	0f b6       	in	r0, 0x3f	; 63
   10926:	f8 94       	cli
   10928:	be bf       	out	0x3e, r27	; 62
   1092a:	0f be       	out	0x3f, r0	; 63
   1092c:	ad bf       	out	0x3d, r26	; 61
   1092e:	ec 01       	movw	r28, r24
   10930:	88 30       	cpi	r24, 0x08	; 8
   10932:	91 05       	cpc	r25, r1
   10934:	68 f0       	brcs	.+26     	; 0x10950 <gpib_enable_PPR+0x36>
   10936:	ed b7       	in	r30, 0x3d	; 61
   10938:	fe b7       	in	r31, 0x3e	; 62
   1093a:	95 83       	std	Z+5, r25	; 0x05
   1093c:	84 83       	std	Z+4, r24	; 0x04
   1093e:	8b e2       	ldi	r24, 0x2B	; 43
   10940:	92 e1       	ldi	r25, 0x12	; 18
   10942:	a0 e0       	ldi	r26, 0x00	; 0
   10944:	81 83       	std	Z+1, r24	; 0x01
   10946:	92 83       	std	Z+2, r25	; 0x02
   10948:	a3 83       	std	Z+3, r26	; 0x03
   1094a:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   1094e:	15 c0       	rjmp	.+42     	; 0x1097a <gpib_enable_PPR+0x60>
   10950:	aa dd       	rcall	.-1196   	; 0x104a6 <ppr_bit_set>
   10952:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10956:	81 ff       	sbrs	r24, 1
   10958:	10 c0       	rjmp	.+32     	; 0x1097a <gpib_enable_PPR+0x60>
   1095a:	8b dd       	rcall	.-1258   	; 0x10472 <ppr_reg>
   1095c:	90 e0       	ldi	r25, 0x00	; 0
   1095e:	ed b7       	in	r30, 0x3d	; 61
   10960:	fe b7       	in	r31, 0x3e	; 62
   10962:	97 83       	std	Z+7, r25	; 0x07
   10964:	86 83       	std	Z+6, r24	; 0x06
   10966:	d5 83       	std	Z+5, r29	; 0x05
   10968:	c4 83       	std	Z+4, r28	; 0x04
   1096a:	80 e1       	ldi	r24, 0x10	; 16
   1096c:	92 e1       	ldi	r25, 0x12	; 18
   1096e:	a0 e0       	ldi	r26, 0x00	; 0
   10970:	81 83       	std	Z+1, r24	; 0x01
   10972:	92 83       	std	Z+2, r25	; 0x02
   10974:	a3 83       	std	Z+3, r26	; 0x03
   10976:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   1097a:	cd b7       	in	r28, 0x3d	; 61
   1097c:	de b7       	in	r29, 0x3e	; 62
   1097e:	27 96       	adiw	r28, 0x07	; 7
   10980:	e2 e0       	ldi	r30, 0x02	; 2
   10982:	0c 94 35 e3 	jmp	0x1c66a	; 0x1c66a <__epilogue_restores__+0x20>

00010986 <gpib_disable_PPR>:
   10986:	cf 93       	push	r28
   10988:	df 93       	push	r29
   1098a:	ad b7       	in	r26, 0x3d	; 61
   1098c:	be b7       	in	r27, 0x3e	; 62
   1098e:	17 97       	sbiw	r26, 0x07	; 7
   10990:	0f b6       	in	r0, 0x3f	; 63
   10992:	f8 94       	cli
   10994:	be bf       	out	0x3e, r27	; 62
   10996:	0f be       	out	0x3f, r0	; 63
   10998:	ad bf       	out	0x3d, r26	; 61
   1099a:	ec 01       	movw	r28, r24
   1099c:	88 30       	cpi	r24, 0x08	; 8
   1099e:	91 05       	cpc	r25, r1
   109a0:	68 f0       	brcs	.+26     	; 0x109bc <gpib_disable_PPR+0x36>
   109a2:	ed b7       	in	r30, 0x3d	; 61
   109a4:	fe b7       	in	r31, 0x3e	; 62
   109a6:	95 83       	std	Z+5, r25	; 0x05
   109a8:	84 83       	std	Z+4, r24	; 0x04
   109aa:	89 ee       	ldi	r24, 0xE9	; 233
   109ac:	91 e1       	ldi	r25, 0x11	; 17
   109ae:	a0 e0       	ldi	r26, 0x00	; 0
   109b0:	81 83       	std	Z+1, r24	; 0x01
   109b2:	92 83       	std	Z+2, r25	; 0x02
   109b4:	a3 83       	std	Z+3, r26	; 0x03
   109b6:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   109ba:	15 c0       	rjmp	.+42     	; 0x109e6 <gpib_disable_PPR+0x60>
   109bc:	81 dd       	rcall	.-1278   	; 0x104c0 <ppr_bit_clr>
   109be:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   109c2:	81 ff       	sbrs	r24, 1
   109c4:	10 c0       	rjmp	.+32     	; 0x109e6 <gpib_disable_PPR+0x60>
   109c6:	55 dd       	rcall	.-1366   	; 0x10472 <ppr_reg>
   109c8:	90 e0       	ldi	r25, 0x00	; 0
   109ca:	ed b7       	in	r30, 0x3d	; 61
   109cc:	fe b7       	in	r31, 0x3e	; 62
   109ce:	97 83       	std	Z+7, r25	; 0x07
   109d0:	86 83       	std	Z+6, r24	; 0x06
   109d2:	d5 83       	std	Z+5, r29	; 0x05
   109d4:	c4 83       	std	Z+4, r28	; 0x04
   109d6:	8e ec       	ldi	r24, 0xCE	; 206
   109d8:	91 e1       	ldi	r25, 0x11	; 17
   109da:	a0 e0       	ldi	r26, 0x00	; 0
   109dc:	81 83       	std	Z+1, r24	; 0x01
   109de:	92 83       	std	Z+2, r25	; 0x02
   109e0:	a3 83       	std	Z+3, r26	; 0x03
   109e2:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   109e6:	cd b7       	in	r28, 0x3d	; 61
   109e8:	de b7       	in	r29, 0x3e	; 62
   109ea:	27 96       	adiw	r28, 0x07	; 7
   109ec:	e2 e0       	ldi	r30, 0x02	; 2
   109ee:	0c 94 35 e3 	jmp	0x1c66a	; 0x1c66a <__epilogue_restores__+0x20>

000109f2 <gpib_unread>:
///     - If ATN is LOW then we strip parity from the byte.
///   - Upper 8 bits: Status and Errors present.
///     - @see gpib.h _FLAGS defines for a full list.
/// @return ch
uint16_t gpib_unread(uint16_t ch)
{
   109f2:	cf 93       	push	r28
   109f4:	df 93       	push	r29
   109f6:	00 d0       	rcall	.+0      	; 0x109f8 <gpib_unread+0x6>
   109f8:	1f 92       	push	r1
   109fa:	ec 01       	movw	r28, r24
    if(!gpib_unread_f)
   109fc:	80 91 6b 19 	lds	r24, 0x196B	; 0x80196b <gpib_unread_f>
   10a00:	81 11       	cpse	r24, r1
   10a02:	08 c0       	rjmp	.+16     	; 0x10a14 <gpib_unread+0x22>
    {
        gpib_unread_data = ch;
   10a04:	d0 93 ff 1e 	sts	0x1EFF, r29	; 0x801eff <gpib_unread_data+0x1>
   10a08:	c0 93 fe 1e 	sts	0x1EFE, r28	; 0x801efe <gpib_unread_data>
        gpib_unread_f = 1;
   10a0c:	81 e0       	ldi	r24, 0x01	; 1
   10a0e:	80 93 6b 19 	sts	0x196B, r24	; 0x80196b <gpib_unread_f>
   10a12:	12 c0       	rjmp	.+36     	; 0x10a38 <gpib_unread+0x46>
    }
    else
    {
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10a14:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10a18:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10a1c:	85 70       	andi	r24, 0x05	; 5
   10a1e:	99 27       	eor	r25, r25
   10a20:	89 2b       	or	r24, r25
   10a22:	51 f0       	breq	.+20     	; 0x10a38 <gpib_unread+0x46>
            printf("gpib_unread: error, can only be called once!\n");
   10a24:	80 ea       	ldi	r24, 0xA0	; 160
   10a26:	91 e1       	ldi	r25, 0x11	; 17
   10a28:	a0 e0       	ldi	r26, 0x00	; 0
   10a2a:	ed b7       	in	r30, 0x3d	; 61
   10a2c:	fe b7       	in	r31, 0x3e	; 62
   10a2e:	81 83       	std	Z+1, r24	; 0x01
   10a30:	92 83       	std	Z+2, r25	; 0x02
   10a32:	a3 83       	std	Z+3, r26	; 0x03
   10a34:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    }
    return(ch);
}
   10a38:	ce 01       	movw	r24, r28
   10a3a:	cd b7       	in	r28, 0x3d	; 61
   10a3c:	de b7       	in	r29, 0x3e	; 62
   10a3e:	23 96       	adiw	r28, 0x03	; 3
   10a40:	e2 e0       	ldi	r30, 0x02	; 2
   10a42:	0c 94 35 e3 	jmp	0x1c66a	; 0x1c66a <__epilogue_restores__+0x20>

00010a46 <gpib_bus_read>:

/// @brief Read GPIB data BUS only
/// @return  bus (lower 8 bits)
uint8_t gpib_bus_read()
{
    uint8_t bus = ~(GPIB_BUS_RD());
   10a46:	11 b8       	out	0x01, r1	; 1
   10a48:	80 b1       	in	r24, 0x00	; 0
   10a4a:	80 95       	com	r24

///@brief if a command byte (ATN low) then strip partity
    if(!GPIB_PIN_TST(ATN))
   10a4c:	4e 9b       	sbis	0x09, 6	; 9
        bus &= 0x7f;
   10a4e:	8f 77       	andi	r24, 0x7F	; 127
    else
        bus &= 0xff;
    return(bus);
}
   10a50:	08 95       	ret

00010a52 <gpib_control_pin_read>:
/// @return  control lines (upper 8 bits)
/// @see gpib_rx_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
    if(GPIB_PIN_TST(ATN) == 0 )
   10a52:	4e 99       	sbic	0x09, 6	; 9
   10a54:	03 c0       	rjmp	.+6      	; 0x10a5c <gpib_control_pin_read+0xa>
        control |= ATN_FLAG;
   10a56:	80 e0       	ldi	r24, 0x00	; 0
   10a58:	94 e0       	ldi	r25, 0x04	; 4
   10a5a:	02 c0       	rjmp	.+4      	; 0x10a60 <gpib_control_pin_read+0xe>
///   FIXME We could add a test for read/write state ??
/// @return  control lines (upper 8 bits)
/// @see gpib_rx_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
   10a5c:	80 e0       	ldi	r24, 0x00	; 0
   10a5e:	90 e0       	ldi	r25, 0x00	; 0
    if(GPIB_PIN_TST(ATN) == 0 )
        control |= ATN_FLAG;
    if(GPIB_PIN_TST(EOI) == 0 )
   10a60:	18 9b       	sbis	0x03, 0	; 3
        control |= EOI_FLAG;
   10a62:	91 60       	ori	r25, 0x01	; 1
    if(GPIB_PIN_TST(SRQ) == 0 )
   10a64:	4d 9b       	sbis	0x09, 5	; 9
        control |= SRQ_FLAG;
   10a66:	92 60       	ori	r25, 0x02	; 2
    if(GPIB_PIN_TST(REN) == 0 )
   10a68:	4f 9b       	sbis	0x09, 7	; 9
        control |= REN_FLAG;
   10a6a:	98 60       	ori	r25, 0x08	; 8
    if(GPIB_PIN_TST(IFC) == 0 )
   10a6c:	4c 9b       	sbis	0x09, 4	; 9
        control |= IFC_FLAG;
   10a6e:	90 61       	ori	r25, 0x10	; 16
    return(control);
}
   10a70:	08 95       	ret

00010a72 <gpib_handshake_pin_read>:
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
/// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
   10a72:	19 99       	sbic	0x03, 1	; 3
   10a74:	03 c0       	rjmp	.+6      	; 0x10a7c <gpib_handshake_pin_read+0xa>
        control |= DAV_FLAG;
   10a76:	80 e0       	ldi	r24, 0x00	; 0
   10a78:	90 e2       	ldi	r25, 0x20	; 32
   10a7a:	02 c0       	rjmp	.+4      	; 0x10a80 <gpib_handshake_pin_read+0xe>
/// FIXME: V2 boards can only read pins enabled for read by the SN75162
///   FIXME We could add a test for read/write state ??
/// @return  handshake lines (upper 8 bits)
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
   10a7c:	80 e0       	ldi	r24, 0x00	; 0
   10a7e:	90 e0       	ldi	r25, 0x00	; 0
///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
/// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
        control |= DAV_FLAG;
    if(GPIB_PIN_TST(NRFD) == 0 )
   10a80:	4a 9b       	sbis	0x09, 2	; 9
        control |= NRFD_FLAG;
   10a82:	90 64       	ori	r25, 0x40	; 64
    if(GPIB_PIN_TST(NDAC) == 0 )
   10a84:	4b 9b       	sbis	0x09, 3	; 9
        control |= NDAC_FLAG;
   10a86:	90 68       	ori	r25, 0x80	; 128
    return(control);
}
   10a88:	08 95       	ret

00010a8a <gpib_write_byte>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
uint16_t gpib_write_byte(uint16_t ch)
{
   10a8a:	2f 92       	push	r2
   10a8c:	3f 92       	push	r3
   10a8e:	4f 92       	push	r4
   10a90:	6f 92       	push	r6
   10a92:	7f 92       	push	r7
   10a94:	8f 92       	push	r8
   10a96:	af 92       	push	r10
   10a98:	bf 92       	push	r11
   10a9a:	cf 92       	push	r12
   10a9c:	df 92       	push	r13
   10a9e:	ef 92       	push	r14
   10aa0:	1f 93       	push	r17
   10aa2:	cf 93       	push	r28
   10aa4:	df 93       	push	r29
   10aa6:	cd b7       	in	r28, 0x3d	; 61
   10aa8:	de b7       	in	r29, 0x3e	; 62
   10aaa:	2a 97       	sbiw	r28, 0x0a	; 10
   10aac:	0f b6       	in	r0, 0x3f	; 63
   10aae:	f8 94       	cli
   10ab0:	de bf       	out	0x3e, r29	; 62
   10ab2:	0f be       	out	0x3f, r0	; 63
   10ab4:	cd bf       	out	0x3d, r28	; 61
   10ab6:	9a 87       	std	Y+10, r25	; 0x0a
   10ab8:	89 87       	std	Y+9, r24	; 0x09
#if 0
	gpib_rx_init(0);	// NOT busy, NRFD and NDAC OC
#endif

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);
   10aba:	64 ef       	ldi	r22, 0xF4	; 244
   10abc:	71 e0       	ldi	r23, 0x01	; 1
   10abe:	80 e0       	ldi	r24, 0x00	; 0
   10ac0:	90 e0       	ldi	r25, 0x00	; 0
   10ac2:	8c de       	rcall	.-744    	; 0x107dc <gpib_timeout_set>
// Now Done in write_str
#if 0
	gpib_rx_init(0);	// NOT busy, NRFD and NDAC OC
#endif

    tx_state = GPIB_TX_START;
   10ac4:	10 e0       	ldi	r17, 0x00	; 0
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<gpib_write_byte timeout waiting for NDAC==1>\n");
   10ac6:	8b e9       	ldi	r24, 0x9B	; 155
   10ac8:	90 e1       	ldi	r25, 0x10	; 16
   10aca:	6c 01       	movw	r12, r24
   10acc:	e1 2c       	mov	r14, r1
                    tx_state = GPIB_TX_SET_DAV_LOW;
                }
                if (gpib_timeout_test())
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   10ace:	8a ec       	ldi	r24, 0xCA	; 202
   10ad0:	90 e1       	ldi	r25, 0x10	; 16
   10ad2:	3c 01       	movw	r6, r24
   10ad4:	81 2c       	mov	r8, r1
					}
					else
					{
#ifdef SDEBUG
						if(debuglevel & GPIB_ERR)
							printf("gpib_write_byte: ATN = 0 while waiting for NRFD LOW state =%d\n",tx_state);
   10ad6:	aa 24       	eor	r10, r10
   10ad8:	a3 94       	inc	r10
   10ada:	b1 2c       	mov	r11, r1
   10adc:	82 e4       	ldi	r24, 0x42	; 66
   10ade:	91 e1       	ldi	r25, 0x11	; 17
   10ae0:	1c 01       	movw	r2, r24
   10ae2:	41 2c       	mov	r4, r1
					break;
                }
                if (gpib_timeout_test())
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   10ae4:	86 e0       	ldi	r24, 0x06	; 6
   10ae6:	91 e1       	ldi	r25, 0x11	; 17
   10ae8:	9c 01       	movw	r18, r24
   10aea:	40 e0       	ldi	r20, 0x00	; 0
   10aec:	2e 83       	std	Y+6, r18	; 0x06
   10aee:	3f 83       	std	Y+7, r19	; 0x07
   10af0:	48 87       	std	Y+8, r20	; 0x08
	// Not called for writting
#if 0
        gpib_user_task();
#endif

		if(uart_keyhit(0))
   10af2:	80 e0       	ldi	r24, 0x00	; 0
   10af4:	0e 94 b7 28 	call	0x516e	; 0x516e <uart_keyhit>
   10af8:	89 2b       	or	r24, r25
   10afa:	09 f0       	breq	.+2      	; 0x10afe <gpib_write_byte+0x74>
   10afc:	e7 c0       	rjmp	.+462    	; 0x10ccc <gpib_write_byte+0x242>
        if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

// IFC is always in for a device
        if(GPIB_PIN_TST(IFC) == 0)
   10afe:	4c 99       	sbic	0x09, 4	; 9
   10b00:	19 c0       	rjmp	.+50     	; 0x10b34 <gpib_write_byte+0xaa>
        {
            ch |= IFC_FLAG;
   10b02:	89 85       	ldd	r24, Y+9	; 0x09
   10b04:	9a 85       	ldd	r25, Y+10	; 0x0a
   10b06:	90 61       	ori	r25, 0x10	; 16
   10b08:	9a 87       	std	Y+10, r25	; 0x0a
            gpib_bus_init();
   10b0a:	89 87       	std	Y+9, r24	; 0x09
   10b0c:	71 de       	rcall	.-798    	; 0x107f0 <gpib_bus_init>
			if(debuglevel & GPIB_ERR)
   10b0e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10b12:	80 ff       	sbrs	r24, 0
   10b14:	db c0       	rjmp	.+438    	; 0x10ccc <gpib_write_byte+0x242>
				printf("gpib_write_byte: IFC state=%d\n", tx_state);
   10b16:	81 2f       	mov	r24, r17
   10b18:	90 e0       	ldi	r25, 0x00	; 0
   10b1a:	ed b7       	in	r30, 0x3d	; 61
   10b1c:	fe b7       	in	r31, 0x3e	; 62
   10b1e:	95 83       	std	Z+5, r25	; 0x05
   10b20:	84 83       	std	Z+4, r24	; 0x04
   10b22:	81 e8       	ldi	r24, 0x81	; 129
   10b24:	91 e1       	ldi	r25, 0x11	; 17
   10b26:	a0 e0       	ldi	r26, 0x00	; 0
   10b28:	81 83       	std	Z+1, r24	; 0x01
   10b2a:	92 83       	std	Z+2, r25	; 0x02
   10b2c:	a3 83       	std	Z+3, r26	; 0x03
   10b2e:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   10b32:	cc c0       	rjmp	.+408    	; 0x10ccc <gpib_write_byte+0x242>
            break;
        }

        switch(tx_state)
   10b34:	81 2f       	mov	r24, r17
   10b36:	90 e0       	ldi	r25, 0x00	; 0
   10b38:	89 30       	cpi	r24, 0x09	; 9
   10b3a:	91 05       	cpc	r25, r1
   10b3c:	08 f0       	brcs	.+2      	; 0x10b40 <gpib_write_byte+0xb6>
   10b3e:	be c0       	rjmp	.+380    	; 0x10cbc <gpib_write_byte+0x232>
   10b40:	fc 01       	movw	r30, r24
   10b42:	e3 54       	subi	r30, 0x43	; 67
   10b44:	ff 4f       	sbci	r31, 0xFF	; 255
   10b46:	0c 94 da e2 	jmp	0x1c5b4	; 0x1c5b4 <__tablejump2__>
        {
			// DAV == 1 the bus is ready
            case GPIB_TX_START:
				gpib_tx_init();
   10b4a:	a8 de       	rcall	.-688    	; 0x1089c <gpib_tx_init>
				GPIB_PIN_FLOAT_UP(DAV);
   10b4c:	21 98       	cbi	0x04, 1	; 4
   10b4e:	29 9a       	sbi	0x05, 1	; 5
   10b50:	fd e0       	ldi	r31, 0x0D	; 13
   10b52:	fa 95       	dec	r31
   10b54:	f1 f7       	brne	.-4      	; 0x10b52 <gpib_write_byte+0xc8>
   10b56:	00 00       	nop
   10b58:	06 c0       	rjmp	.+12     	; 0x10b66 <gpib_write_byte+0xdc>
                tx_state = GPIB_TX_PUT_DATA;
                break;

// Wait for NRFD or NDAC LOW
            case GPIB_TX_WAIT_FOR_NRFD_OR_NDAC_LOW:
                if(GPIB_PIN_TST(NRFD) == 0 || GPIB_PIN_TST(NDAC) == 0)
   10b5a:	4a 9b       	sbis	0x09, 2	; 9
   10b5c:	02 c0       	rjmp	.+4      	; 0x10b62 <gpib_write_byte+0xd8>
   10b5e:	4b 99       	sbic	0x09, 3	; 9
   10b60:	17 c0       	rjmp	.+46     	; 0x10b90 <gpib_write_byte+0x106>
                {
					if(GPIB_PIN_TST(ATN) == 1)
   10b62:	4e 9b       	sbis	0x09, 6	; 9
   10b64:	07 c0       	rjmp	.+14     	; 0x10b74 <gpib_write_byte+0xea>
					{
						gpib_timeout_set(HTIMEOUT);
   10b66:	64 ef       	ldi	r22, 0xF4	; 244
   10b68:	71 e0       	ldi	r23, 0x01	; 1
   10b6a:	80 e0       	ldi	r24, 0x00	; 0
   10b6c:	90 e0       	ldi	r25, 0x00	; 0
   10b6e:	36 de       	rcall	.-916    	; 0x107dc <gpib_timeout_set>
						tx_state = GPIB_TX_PUT_DATA;
   10b70:	12 e0       	ldi	r17, 0x02	; 2
   10b72:	bf cf       	rjmp	.-130    	; 0x10af2 <gpib_write_byte+0x68>
					}
					else
					{
#ifdef SDEBUG
						if(debuglevel & GPIB_ERR)
   10b74:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10b78:	80 ff       	sbrs	r24, 0
   10b7a:	bb cf       	rjmp	.-138    	; 0x10af2 <gpib_write_byte+0x68>
							printf("gpib_write_byte: ATN = 0 while waiting for NRFD LOW state =%d\n",tx_state);
   10b7c:	ed b7       	in	r30, 0x3d	; 61
   10b7e:	fe b7       	in	r31, 0x3e	; 62
   10b80:	b5 82       	std	Z+5, r11	; 0x05
   10b82:	a4 82       	std	Z+4, r10	; 0x04
   10b84:	21 82       	std	Z+1, r2	; 0x01
   10b86:	32 82       	std	Z+2, r3	; 0x02
   10b88:	43 82       	std	Z+3, r4	; 0x03
   10b8a:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   10b8e:	b1 cf       	rjmp	.-158    	; 0x10af2 <gpib_write_byte+0x68>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10b90:	80 91 f3 1c 	lds	r24, 0x1CF3	; 0x801cf3 <gpib_timer+0x8>
							printf("gpib_write_byte: ATN = 0 while waiting for NRFD LOW state =%d\n",tx_state);
#endif
					}
					break;
                }
                if (gpib_timeout_test())
   10b94:	88 23       	and	r24, r24
   10b96:	09 f4       	brne	.+2      	; 0x10b9a <gpib_write_byte+0x110>
   10b98:	ac cf       	rjmp	.-168    	; 0x10af2 <gpib_write_byte+0x68>
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10b9a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10b9e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10ba2:	85 70       	andi	r24, 0x05	; 5
   10ba4:	99 27       	eor	r25, r25
   10ba6:	89 2b       	or	r24, r25
   10ba8:	c1 f1       	breq	.+112    	; 0x10c1a <gpib_write_byte+0x190>
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   10baa:	2e 81       	ldd	r18, Y+6	; 0x06
   10bac:	3f 81       	ldd	r19, Y+7	; 0x07
   10bae:	48 85       	ldd	r20, Y+8	; 0x08
   10bb0:	ed b7       	in	r30, 0x3d	; 61
   10bb2:	fe b7       	in	r31, 0x3e	; 62
   10bb4:	21 83       	std	Z+1, r18	; 0x01
   10bb6:	32 83       	std	Z+2, r19	; 0x02
   10bb8:	43 83       	std	Z+3, r20	; 0x03
   10bba:	2d c0       	rjmp	.+90     	; 0x10c16 <gpib_write_byte+0x18c>
                }
                break;

// Write Data
            case GPIB_TX_PUT_DATA:
                if(ch & EOI_FLAG)
   10bbc:	89 85       	ldd	r24, Y+9	; 0x09
   10bbe:	9a 85       	ldd	r25, Y+10	; 0x0a
   10bc0:	90 ff       	sbrs	r25, 0
   10bc2:	03 c0       	rjmp	.+6      	; 0x10bca <gpib_write_byte+0x140>
                    GPIB_IO_LOW(EOI);
   10bc4:	28 98       	cbi	0x05, 0	; 5
   10bc6:	20 9a       	sbi	0x04, 0	; 4
   10bc8:	02 c0       	rjmp	.+4      	; 0x10bce <gpib_write_byte+0x144>
                else
                    GPIB_PIN_FLOAT_UP(EOI);
   10bca:	20 98       	cbi	0x04, 0	; 4
   10bcc:	28 9a       	sbi	0x05, 0	; 5
                GPIB_BUS_WR((ch & 0xff) ^ 0xff);  // Write Data inverted
   10bce:	8f ef       	ldi	r24, 0xFF	; 255
   10bd0:	81 b9       	out	0x01, r24	; 1
   10bd2:	89 85       	ldd	r24, Y+9	; 0x09
   10bd4:	80 95       	com	r24
   10bd6:	82 b9       	out	0x02, r24	; 2
   10bd8:	9d e0       	ldi	r25, 0x0D	; 13
   10bda:	9a 95       	dec	r25
   10bdc:	f1 f7       	brne	.-4      	; 0x10bda <gpib_write_byte+0x150>
   10bde:	00 00       	nop
                GPIB_BUS_SETTLE();                // Let Data BUS settle

                gpib_timeout_set(HTIMEOUT);
   10be0:	64 ef       	ldi	r22, 0xF4	; 244
   10be2:	71 e0       	ldi	r23, 0x01	; 1
   10be4:	80 e0       	ldi	r24, 0x00	; 0
   10be6:	90 e0       	ldi	r25, 0x00	; 0
   10be8:	f9 dd       	rcall	.-1038   	; 0x107dc <gpib_timeout_set>
                tx_state = GPIB_TX_WAIT_FOR_NRFD_HI;
   10bea:	13 e0       	ldi	r17, 0x03	; 3
                break;
   10bec:	82 cf       	rjmp	.-252    	; 0x10af2 <gpib_write_byte+0x68>
// Wait for BOTH NRFD HI and NDAC LOW
            case GPIB_TX_WAIT_FOR_NRFD_HI:
#if 0
                if(GPIB_PIN_TST(NRFD) == 1 && GPIB_PIN_TST(NDAC) == 0)
#else
                if(GPIB_PIN_TST(NRFD))
   10bee:	4a 99       	sbic	0x09, 2	; 9
#endif
                {
                    tx_state = GPIB_TX_SET_DAV_LOW;
   10bf0:	14 e0       	ldi	r17, 0x04	; 4
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10bf2:	80 91 f3 1c 	lds	r24, 0x1CF3	; 0x801cf3 <gpib_timer+0x8>
                if(GPIB_PIN_TST(NRFD))
#endif
                {
                    tx_state = GPIB_TX_SET_DAV_LOW;
                }
                if (gpib_timeout_test())
   10bf6:	88 23       	and	r24, r24
   10bf8:	09 f4       	brne	.+2      	; 0x10bfc <gpib_write_byte+0x172>
   10bfa:	7b cf       	rjmp	.-266    	; 0x10af2 <gpib_write_byte+0x68>
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10bfc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10c00:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10c04:	85 70       	andi	r24, 0x05	; 5
   10c06:	99 27       	eor	r25, r25
   10c08:	89 2b       	or	r24, r25
   10c0a:	39 f0       	breq	.+14     	; 0x10c1a <gpib_write_byte+0x190>
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   10c0c:	ed b7       	in	r30, 0x3d	; 61
   10c0e:	fe b7       	in	r31, 0x3e	; 62
   10c10:	61 82       	std	Z+1, r6	; 0x01
   10c12:	72 82       	std	Z+2, r7	; 0x02
   10c14:	83 82       	std	Z+3, r8	; 0x03
   10c16:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
                    ch |= TIMEOUT_FLAG;
   10c1a:	29 85       	ldd	r18, Y+9	; 0x09
   10c1c:	3a 85       	ldd	r19, Y+10	; 0x0a
   10c1e:	30 64       	ori	r19, 0x40	; 64
   10c20:	3a 87       	std	Y+10, r19	; 0x0a
   10c22:	29 87       	std	Y+9, r18	; 0x09
   10c24:	51 c0       	rjmp	.+162    	; 0x10cc8 <gpib_write_byte+0x23e>
                    break;
                }
                break;

            case GPIB_TX_SET_DAV_LOW:
                GPIB_IO_LOW(DAV);
   10c26:	29 98       	cbi	0x05, 1	; 5
   10c28:	21 9a       	sbi	0x04, 1	; 4
   10c2a:	3d e0       	ldi	r19, 0x0D	; 13
   10c2c:	3a 95       	dec	r19
   10c2e:	f1 f7       	brne	.-4      	; 0x10c2c <gpib_write_byte+0x1a2>
                GPIB_BUS_SETTLE();                
                gpib_timeout_set(HTIMEOUT);
   10c30:	00 00       	nop
   10c32:	64 ef       	ldi	r22, 0xF4	; 244
   10c34:	71 e0       	ldi	r23, 0x01	; 1
   10c36:	80 e0       	ldi	r24, 0x00	; 0
   10c38:	90 e0       	ldi	r25, 0x00	; 0
   10c3a:	d0 dd       	rcall	.-1120   	; 0x107dc <gpib_timeout_set>
                tx_state = GPIB_TX_WAIT_FOR_NDAC_HI;
   10c3c:	15 e0       	ldi	r17, 0x05	; 5
                break;
   10c3e:	59 cf       	rjmp	.-334    	; 0x10af2 <gpib_write_byte+0x68>

///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
   10c40:	4b 99       	sbic	0x09, 3	; 9
   10c42:	40 c0       	rjmp	.+128    	; 0x10cc4 <gpib_write_byte+0x23a>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10c44:	80 91 f3 1c 	lds	r24, 0x1CF3	; 0x801cf3 <gpib_timer+0x8>
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
                    break;
                }
                if (gpib_timeout_test())
   10c48:	88 23       	and	r24, r24
   10c4a:	09 f4       	brne	.+2      	; 0x10c4e <gpib_write_byte+0x1c4>
   10c4c:	52 cf       	rjmp	.-348    	; 0x10af2 <gpib_write_byte+0x68>
                {
                    ch |= TIMEOUT_FLAG;
   10c4e:	89 85       	ldd	r24, Y+9	; 0x09
   10c50:	9a 85       	ldd	r25, Y+10	; 0x0a
   10c52:	90 64       	ori	r25, 0x40	; 64
   10c54:	9a 87       	std	Y+10, r25	; 0x0a
   10c56:	89 87       	std	Y+9, r24	; 0x09
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10c58:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10c5c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10c60:	85 70       	andi	r24, 0x05	; 5
   10c62:	99 27       	eor	r25, r25
   10c64:	89 2b       	or	r24, r25
   10c66:	81 f1       	breq	.+96     	; 0x10cc8 <gpib_write_byte+0x23e>
                        printf("<gpib_write_byte timeout waiting for NDAC==1>\n");
   10c68:	ed b7       	in	r30, 0x3d	; 61
   10c6a:	fe b7       	in	r31, 0x3e	; 62
   10c6c:	c1 82       	std	Z+1, r12	; 0x01
   10c6e:	d2 82       	std	Z+2, r13	; 0x02
   10c70:	e3 82       	std	Z+3, r14	; 0x03
   10c72:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   10c76:	28 c0       	rjmp	.+80     	; 0x10cc8 <gpib_write_byte+0x23e>
                }
                break;

///@release BUS
            case GPIB_TX_SET_DAV_HI:
                GPIB_PIN_FLOAT_UP(DAV);
   10c78:	21 98       	cbi	0x04, 1	; 4
   10c7a:	29 9a       	sbi	0x05, 1	; 5
   10c7c:	fd e0       	ldi	r31, 0x0D	; 13
   10c7e:	fa 95       	dec	r31
   10c80:	f1 f7       	brne	.-4      	; 0x10c7e <gpib_write_byte+0x1f4>
                GPIB_BUS_SETTLE();
                tx_state = GPIB_TX_FINISH;
                gpib_timeout_set(HTIMEOUT);
   10c82:	00 00       	nop
   10c84:	64 ef       	ldi	r22, 0xF4	; 244
   10c86:	71 e0       	ldi	r23, 0x01	; 1
   10c88:	80 e0       	ldi	r24, 0x00	; 0
   10c8a:	90 e0       	ldi	r25, 0x00	; 0

///@release BUS
            case GPIB_TX_SET_DAV_HI:
                GPIB_PIN_FLOAT_UP(DAV);
                GPIB_BUS_SETTLE();
                tx_state = GPIB_TX_FINISH;
   10c8c:	a7 dd       	rcall	.-1202   	; 0x107dc <gpib_timeout_set>
                gpib_timeout_set(HTIMEOUT);
                break;
   10c8e:	17 e0       	ldi	r17, 0x07	; 7
                tx_state = GPIB_TX_DONE;
                break;

            case GPIB_TX_ERROR:
				// Free BUS, BUSY on error
                gpib_rx_init(1);
   10c90:	30 cf       	rjmp	.-416    	; 0x10af2 <gpib_write_byte+0x68>
   10c92:	81 e0       	ldi	r24, 0x01	; 1
   10c94:	e5 dd       	rcall	.-1078   	; 0x10860 <gpib_rx_init>
                if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10c96:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10c9a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10c9e:	85 70       	andi	r24, 0x05	; 5
   10ca0:	99 27       	eor	r25, r25
   10ca2:	89 2b       	or	r24, r25
   10ca4:	99 f0       	breq	.+38     	; 0x10ccc <gpib_write_byte+0x242>
                    printf("<GPIB TX TIMEOUT>\n");
   10ca6:	88 e8       	ldi	r24, 0x88	; 136
   10ca8:	90 e1       	ldi	r25, 0x10	; 16
   10caa:	a0 e0       	ldi	r26, 0x00	; 0
   10cac:	ed b7       	in	r30, 0x3d	; 61
   10cae:	fe b7       	in	r31, 0x3e	; 62
   10cb0:	81 83       	std	Z+1, r24	; 0x01
   10cb2:	92 83       	std	Z+2, r25	; 0x02
   10cb4:	a3 83       	std	Z+3, r26	; 0x03
   10cb6:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   10cba:	08 c0       	rjmp	.+16     	; 0x10ccc <gpib_write_byte+0x242>
	gpib_rx_init(0);	// NOT busy, NRFD and NDAC OC
#endif

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);
    while(tx_state != GPIB_TX_DONE )
   10cbc:	19 30       	cpi	r17, 0x09	; 9
   10cbe:	09 f0       	breq	.+2      	; 0x10cc2 <gpib_write_byte+0x238>
   10cc0:	18 cf       	rjmp	.-464    	; 0x10af2 <gpib_write_byte+0x68>
   10cc2:	04 c0       	rjmp	.+8      	; 0x10ccc <gpib_write_byte+0x242>

///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
   10cc4:	16 e0       	ldi	r17, 0x06	; 6
   10cc6:	15 cf       	rjmp	.-470    	; 0x10af2 <gpib_write_byte+0x68>
                    break;
                }
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
   10cc8:	18 e0       	ldi	r17, 0x08	; 8
   10cca:	13 cf       	rjmp	.-474    	; 0x10af2 <gpib_write_byte+0x68>
            case GPIB_TX_DONE:
                break;
        }
    }
    return(ch);
}
   10ccc:	89 85       	ldd	r24, Y+9	; 0x09
   10cce:	9a 85       	ldd	r25, Y+10	; 0x0a
   10cd0:	2a 96       	adiw	r28, 0x0a	; 10
   10cd2:	0f b6       	in	r0, 0x3f	; 63
   10cd4:	f8 94       	cli
   10cd6:	de bf       	out	0x3e, r29	; 62
   10cd8:	0f be       	out	0x3f, r0	; 63
   10cda:	cd bf       	out	0x3d, r28	; 61
   10cdc:	df 91       	pop	r29
   10cde:	cf 91       	pop	r28
   10ce0:	1f 91       	pop	r17
   10ce2:	ef 90       	pop	r14
   10ce4:	df 90       	pop	r13
   10ce6:	cf 90       	pop	r12
   10ce8:	bf 90       	pop	r11
   10cea:	af 90       	pop	r10
   10cec:	8f 90       	pop	r8
   10cee:	7f 90       	pop	r7
   10cf0:	6f 90       	pop	r6
   10cf2:	4f 90       	pop	r4
   10cf4:	3f 90       	pop	r3
   10cf6:	2f 90       	pop	r2
   10cf8:	08 95       	ret

00010cfa <gpib_decode_header>:
/// @see: gpib.h _FLAGS defines for a full list is control lines we track
/// @see: gpib_trace()
/// @return void
///@param[in] fo: FILE pointer or "stdout"
void gpib_decode_header( FILE *fo)
{
   10cfa:	cf 93       	push	r28
   10cfc:	df 93       	push	r29
   10cfe:	ec 01       	movw	r28, r24
    if(fo == NULL)
   10d00:	89 2b       	or	r24, r25
   10d02:	21 f4       	brne	.+8      	; 0x10d0c <gpib_decode_header+0x12>
        fo = stdout;
   10d04:	c0 91 cd 1c 	lds	r28, 0x1CCD	; 0x801ccd <__iob+0x2>
   10d08:	d0 91 ce 1c 	lds	r29, 0x1CCE	; 0x801cce <__iob+0x3>

    fprintf(fo,"===========================================\n");
   10d0c:	be 01       	movw	r22, r28
   10d0e:	81 e0       	ldi	r24, 0x01	; 1
   10d10:	9c e0       	ldi	r25, 0x0C	; 12
   10d12:	0e 94 d7 74 	call	0xe9ae	; 0xe9ae <fputs>
    fprintf(fo,"GPIB bus state\n");
   10d16:	be 01       	movw	r22, r28
   10d18:	8e e2       	ldi	r24, 0x2E	; 46
   10d1a:	9c e0       	ldi	r25, 0x0C	; 12
   10d1c:	0e 94 d7 74 	call	0xe9ae	; 0xe9ae <fputs>
    fprintf(fo,"HH . AESRPITB gpib\n");
   10d20:	be 01       	movw	r22, r28
   10d22:	8e e3       	ldi	r24, 0x3E	; 62
   10d24:	9c e0       	ldi	r25, 0x0C	; 12
   10d26:	0e 94 d7 74 	call	0xe9ae	; 0xe9ae <fputs>
    fprintf(fo,"HH = Hex value of Command or Data\n");
   10d2a:	be 01       	movw	r22, r28
   10d2c:	82 e5       	ldi	r24, 0x52	; 82
   10d2e:	9c e0       	ldi	r25, 0x0C	; 12
   10d30:	0e 94 d7 74 	call	0xe9ae	; 0xe9ae <fputs>
    fprintf(fo,"   . = ASCII of XX only for 0x20 .. 0x7e\n");
   10d34:	be 01       	movw	r22, r28
   10d36:	85 e7       	ldi	r24, 0x75	; 117
   10d38:	9c e0       	ldi	r25, 0x0C	; 12
   10d3a:	0e 94 d7 74 	call	0xe9ae	; 0xe9ae <fputs>
    fprintf(fo,"     A = ATN\n");
   10d3e:	be 01       	movw	r22, r28
   10d40:	8f e9       	ldi	r24, 0x9F	; 159
   10d42:	9c e0       	ldi	r25, 0x0C	; 12
   10d44:	0e 94 d7 74 	call	0xe9ae	; 0xe9ae <fputs>
    fprintf(fo,"      E = EOI\n");
   10d48:	be 01       	movw	r22, r28
   10d4a:	8d ea       	ldi	r24, 0xAD	; 173
   10d4c:	9c e0       	ldi	r25, 0x0C	; 12
   10d4e:	0e 94 d7 74 	call	0xe9ae	; 0xe9ae <fputs>
    fprintf(fo,"       S = SRQ\n");
   10d52:	be 01       	movw	r22, r28
   10d54:	8c eb       	ldi	r24, 0xBC	; 188
   10d56:	9c e0       	ldi	r25, 0x0C	; 12
   10d58:	0e 94 d7 74 	call	0xe9ae	; 0xe9ae <fputs>
    fprintf(fo,"        R = REN\n");
   10d5c:	be 01       	movw	r22, r28
   10d5e:	8c ec       	ldi	r24, 0xCC	; 204
   10d60:	9c e0       	ldi	r25, 0x0C	; 12
   10d62:	0e 94 d7 74 	call	0xe9ae	; 0xe9ae <fputs>
    fprintf(fo,"         I = IFC\n");
   10d66:	be 01       	movw	r22, r28
   10d68:	8d ed       	ldi	r24, 0xDD	; 221
   10d6a:	9c e0       	ldi	r25, 0x0C	; 12
   10d6c:	0e 94 d7 74 	call	0xe9ae	; 0xe9ae <fputs>
    fprintf(fo,"          P = Parallel Poll seen\n");
   10d70:	be 01       	movw	r22, r28
   10d72:	8f ee       	ldi	r24, 0xEF	; 239
   10d74:	9c e0       	ldi	r25, 0x0C	; 12
   10d76:	0e 94 d7 74 	call	0xe9ae	; 0xe9ae <fputs>
    fprintf(fo,"           T = TIMEOUT\n");
   10d7a:	be 01       	movw	r22, r28
   10d7c:	81 e1       	ldi	r24, 0x11	; 17
   10d7e:	9d e0       	ldi	r25, 0x0D	; 13
   10d80:	0e 94 d7 74 	call	0xe9ae	; 0xe9ae <fputs>
    fprintf(fo,"            B = BUS_ERROR\n");
   10d84:	be 01       	movw	r22, r28
   10d86:	89 e2       	ldi	r24, 0x29	; 41
   10d88:	9d e0       	ldi	r25, 0x0D	; 13
   10d8a:	0e 94 d7 74 	call	0xe9ae	; 0xe9ae <fputs>
    fprintf(fo,"              GPIB commands\n");
   10d8e:	be 01       	movw	r22, r28
   10d90:	84 e4       	ldi	r24, 0x44	; 68
   10d92:	9d e0       	ldi	r25, 0x0D	; 13
   10d94:	0e 94 d7 74 	call	0xe9ae	; 0xe9ae <fputs>
}
   10d98:	df 91       	pop	r29
   10d9a:	cf 91       	pop	r28
   10d9c:	08 95       	ret

00010d9e <gpib_trace_display>:
/// @return  void
/// Note the bits we can read depends on what hardware verions we have
/// V2 hardware can only read status bits based on GPIB control buffer direction
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
   10d9e:	a9 e8       	ldi	r26, 0x89	; 137
   10da0:	b0 e0       	ldi	r27, 0x00	; 0
   10da2:	e5 ed       	ldi	r30, 0xD5	; 213
   10da4:	f6 e8       	ldi	r31, 0x86	; 134
   10da6:	0c 94 0f e3 	jmp	0x1c61e	; 0x1c61e <__prologue_saves__+0xc>
   10daa:	8c 01       	movw	r16, r24
   10dac:	5b 01       	movw	r10, r22
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
    extern FILE *gpib_log_fp;

    str[0] = 0;
   10dae:	1a 86       	std	Y+10, r1	; 0x0a
   10db0:	4c 01       	movw	r8, r24
   10db2:	88 24       	eor	r8, r8
   10db4:	44 e0       	ldi	r20, 0x04	; 4
   10db6:	94 22       	and	r9, r20
   10db8:	ce 01       	movw	r24, r28
   10dba:	0a 96       	adiw	r24, 0x0a	; 10
   10dbc:	7c 01       	movw	r14, r24

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
   10dbe:	62 30       	cpi	r22, 0x02	; 2
   10dc0:	71 05       	cpc	r23, r1
   10dc2:	e8 f4       	brcc	.+58     	; 0x10dfe <gpib_trace_display+0x60>
    {
        uint8_t printable = ' ';                  // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   10dc4:	81 14       	cp	r8, r1
   10dc6:	91 04       	cpc	r9, r1
   10dc8:	29 f4       	brne	.+10     	; 0x10dd4 <gpib_trace_display+0x36>
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
   10dca:	80 2f       	mov	r24, r16

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                  // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   10dcc:	90 ee       	ldi	r25, 0xE0	; 224
   10dce:	90 0f       	add	r25, r16
   10dd0:	9f 35       	cpi	r25, 0x5F	; 95
   10dd2:	08 f0       	brcs	.+2      	; 0x10dd6 <gpib_trace_display+0x38>
    str[0] = 0;

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                  // Data
   10dd4:	80 e2       	ldi	r24, 0x20	; 32
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
            printable = bus;
        sprintf(str, "%02X %c ", (int)bus & 0xff, (int)printable);
   10dd6:	90 e0       	ldi	r25, 0x00	; 0
   10dd8:	ed b7       	in	r30, 0x3d	; 61
   10dda:	fe b7       	in	r31, 0x3e	; 62
   10ddc:	91 87       	std	Z+9, r25	; 0x09
   10dde:	80 87       	std	Z+8, r24	; 0x08
   10de0:	c8 01       	movw	r24, r16
   10de2:	99 27       	eor	r25, r25
   10de4:	97 83       	std	Z+7, r25	; 0x07
   10de6:	86 83       	std	Z+6, r24	; 0x06
   10de8:	81 e6       	ldi	r24, 0x61	; 97
   10dea:	90 e1       	ldi	r25, 0x10	; 16
   10dec:	a0 e0       	ldi	r26, 0x00	; 0
   10dee:	83 83       	std	Z+3, r24	; 0x03
   10df0:	94 83       	std	Z+4, r25	; 0x04
   10df2:	a5 83       	std	Z+5, r26	; 0x05
   10df4:	f2 82       	std	Z+2, r15	; 0x02
   10df6:	e1 82       	std	Z+1, r14	; 0x01
   10df8:	0e 94 3e 45 	call	0x8a7c	; 0x8a7c <sprintf_P>
   10dfc:	0c c0       	rjmp	.+24     	; 0x10e16 <gpib_trace_display+0x78>
    }
    else
    {
        sprintf(str, "     ");
   10dfe:	8b e5       	ldi	r24, 0x5B	; 91
   10e00:	90 e1       	ldi	r25, 0x10	; 16
   10e02:	a0 e0       	ldi	r26, 0x00	; 0
   10e04:	ed b7       	in	r30, 0x3d	; 61
   10e06:	fe b7       	in	r31, 0x3e	; 62
   10e08:	83 83       	std	Z+3, r24	; 0x03
   10e0a:	94 83       	std	Z+4, r25	; 0x04
   10e0c:	a5 83       	std	Z+5, r26	; 0x05
   10e0e:	f2 82       	std	Z+2, r15	; 0x02
   10e10:	e1 82       	std	Z+1, r14	; 0x01
   10e12:	0e 94 3e 45 	call	0x8a7c	; 0x8a7c <sprintf_P>
    }

    tmp = str + strlen(str);
   10e16:	f7 01       	movw	r30, r14
   10e18:	01 90       	ld	r0, Z+
   10e1a:	00 20       	and	r0, r0
   10e1c:	e9 f7       	brne	.-6      	; 0x10e18 <gpib_trace_display+0x7a>
   10e1e:	31 97       	sbiw	r30, 0x01	; 1
   10e20:	cf 01       	movw	r24, r30
   10e22:	01 96       	adiw	r24, 0x01	; 1

    if(status & ATN_FLAG)
   10e24:	81 14       	cp	r8, r1
   10e26:	91 04       	cpc	r9, r1
   10e28:	11 f0       	breq	.+4      	; 0x10e2e <gpib_trace_display+0x90>
        *tmp++ = 'A';
   10e2a:	21 e4       	ldi	r18, 0x41	; 65
   10e2c:	01 c0       	rjmp	.+2      	; 0x10e30 <gpib_trace_display+0x92>
    else
        *tmp++ = '-';
   10e2e:	2d e2       	ldi	r18, 0x2D	; 45
   10e30:	20 83       	st	Z, r18
   10e32:	dc 01       	movw	r26, r24
   10e34:	11 96       	adiw	r26, 0x01	; 1

    if(status & EOI_FLAG)
   10e36:	10 ff       	sbrs	r17, 0
   10e38:	02 c0       	rjmp	.+4      	; 0x10e3e <gpib_trace_display+0xa0>
        *tmp++ = 'E';
   10e3a:	25 e4       	ldi	r18, 0x45	; 69
   10e3c:	01 c0       	rjmp	.+2      	; 0x10e40 <gpib_trace_display+0xa2>
    else
        *tmp++ = '-';
   10e3e:	2d e2       	ldi	r18, 0x2D	; 45
   10e40:	fc 01       	movw	r30, r24
   10e42:	20 83       	st	Z, r18
   10e44:	fd 01       	movw	r30, r26
   10e46:	31 96       	adiw	r30, 0x01	; 1

    if(status & SRQ_FLAG)
   10e48:	11 ff       	sbrs	r17, 1
   10e4a:	02 c0       	rjmp	.+4      	; 0x10e50 <gpib_trace_display+0xb2>
        *tmp++ = 'S';
   10e4c:	83 e5       	ldi	r24, 0x53	; 83
   10e4e:	01 c0       	rjmp	.+2      	; 0x10e52 <gpib_trace_display+0xb4>
    else
        *tmp++ = '-';
   10e50:	8d e2       	ldi	r24, 0x2D	; 45
   10e52:	8c 93       	st	X, r24
   10e54:	df 01       	movw	r26, r30
   10e56:	11 96       	adiw	r26, 0x01	; 1

    if(status & REN_FLAG)
   10e58:	13 ff       	sbrs	r17, 3
   10e5a:	02 c0       	rjmp	.+4      	; 0x10e60 <gpib_trace_display+0xc2>
        *tmp++ = 'R';
   10e5c:	82 e5       	ldi	r24, 0x52	; 82
   10e5e:	01 c0       	rjmp	.+2      	; 0x10e62 <gpib_trace_display+0xc4>
    else
        *tmp++ = '-';
   10e60:	8d e2       	ldi	r24, 0x2D	; 45
   10e62:	80 83       	st	Z, r24
   10e64:	fd 01       	movw	r30, r26
   10e66:	31 96       	adiw	r30, 0x01	; 1

    if(status & IFC_FLAG)
   10e68:	14 ff       	sbrs	r17, 4
   10e6a:	02 c0       	rjmp	.+4      	; 0x10e70 <gpib_trace_display+0xd2>
        *tmp++ = 'I';
   10e6c:	89 e4       	ldi	r24, 0x49	; 73
   10e6e:	01 c0       	rjmp	.+2      	; 0x10e72 <gpib_trace_display+0xd4>
    else
        *tmp++ = '-';
   10e70:	8d e2       	ldi	r24, 0x2D	; 45
   10e72:	8c 93       	st	X, r24

    if(trace_state == TRACE_DISABLE)
   10e74:	a1 14       	cp	r10, r1
   10e76:	b1 04       	cpc	r11, r1
   10e78:	d1 f4       	brne	.+52     	; 0x10eae <gpib_trace_display+0x110>
   10e7a:	df 01       	movw	r26, r30
   10e7c:	11 96       	adiw	r26, 0x01	; 1
    {
        if(status & PP_FLAG)
   10e7e:	15 ff       	sbrs	r17, 5
   10e80:	02 c0       	rjmp	.+4      	; 0x10e86 <gpib_trace_display+0xe8>
            *tmp++ = 'P';
   10e82:	80 e5       	ldi	r24, 0x50	; 80
   10e84:	01 c0       	rjmp	.+2      	; 0x10e88 <gpib_trace_display+0xea>
        else
            *tmp++ = '-';
   10e86:	8d e2       	ldi	r24, 0x2D	; 45
   10e88:	80 83       	st	Z, r24
   10e8a:	fd 01       	movw	r30, r26
   10e8c:	31 96       	adiw	r30, 0x01	; 1
        if(status & TIMEOUT_FLAG)
   10e8e:	16 ff       	sbrs	r17, 6
   10e90:	02 c0       	rjmp	.+4      	; 0x10e96 <gpib_trace_display+0xf8>
            *tmp++ = 'T';
   10e92:	84 e5       	ldi	r24, 0x54	; 84
   10e94:	01 c0       	rjmp	.+2      	; 0x10e98 <gpib_trace_display+0xfa>
        else
            *tmp++ = '-';
   10e96:	8d e2       	ldi	r24, 0x2D	; 45
   10e98:	8c 93       	st	X, r24
   10e9a:	cf 01       	movw	r24, r30
   10e9c:	01 96       	adiw	r24, 0x01	; 1
        if(status & BUS_ERROR_FLAG)
            *tmp++ = 'B';
   10e9e:	6c 01       	movw	r12, r24
            *tmp++ = '-';
        if(status & TIMEOUT_FLAG)
            *tmp++ = 'T';
        else
            *tmp++ = '-';
        if(status & BUS_ERROR_FLAG)
   10ea0:	17 ff       	sbrs	r17, 7
   10ea2:	02 c0       	rjmp	.+4      	; 0x10ea8 <gpib_trace_display+0x10a>
            *tmp++ = 'B';
   10ea4:	82 e4       	ldi	r24, 0x42	; 66
   10ea6:	01 c0       	rjmp	.+2      	; 0x10eaa <gpib_trace_display+0x10c>
        else
            *tmp++ = '-';
   10ea8:	8d e2       	ldi	r24, 0x2D	; 45
   10eaa:	80 83       	st	Z, r24
   10eac:	08 c0       	rjmp	.+16     	; 0x10ebe <gpib_trace_display+0x120>
    }
    else
    {
// not used when tracing
        *tmp++ = '-';
   10eae:	8d e2       	ldi	r24, 0x2D	; 45
   10eb0:	80 83       	st	Z, r24
        *tmp++ = '-';
   10eb2:	81 83       	std	Z+1, r24	; 0x01
        *tmp++ = '-';
   10eb4:	6f 01       	movw	r12, r30
   10eb6:	43 e0       	ldi	r20, 0x03	; 3
   10eb8:	c4 0e       	add	r12, r20
   10eba:	d1 1c       	adc	r13, r1
   10ebc:	82 83       	std	Z+2, r24	; 0x02
    }
    *tmp = 0;
   10ebe:	f6 01       	movw	r30, r12
   10ec0:	10 82       	st	Z, r1

    if(trace_state == TRACE_READ || trace_state == TRACE_BUS)
   10ec2:	f1 e0       	ldi	r31, 0x01	; 1
   10ec4:	af 1a       	sub	r10, r31
   10ec6:	b1 08       	sbc	r11, r1
   10ec8:	42 e0       	ldi	r20, 0x02	; 2
   10eca:	a4 16       	cp	r10, r20
   10ecc:	b1 04       	cpc	r11, r1
   10ece:	f0 f4       	brcc	.+60     	; 0x10f0c <gpib_trace_display+0x16e>
    {
        if(status & DAV_FLAG)
   10ed0:	15 ff       	sbrs	r17, 5
   10ed2:	03 c0       	rjmp	.+6      	; 0x10eda <gpib_trace_display+0x13c>
            strcat(str,"  DAV");
   10ed4:	61 e6       	ldi	r22, 0x61	; 97
   10ed6:	7d e0       	ldi	r23, 0x0D	; 13
   10ed8:	02 c0       	rjmp	.+4      	; 0x10ede <gpib_trace_display+0x140>
        else
            strcat(str,"     ");
   10eda:	65 e6       	ldi	r22, 0x65	; 101
   10edc:	74 e0       	ldi	r23, 0x04	; 4
   10ede:	c7 01       	movw	r24, r14
   10ee0:	0e 94 b4 2f 	call	0x5f68	; 0x5f68 <strcat>
        if(status & NRFD_FLAG)
   10ee4:	16 ff       	sbrs	r17, 6
   10ee6:	03 c0       	rjmp	.+6      	; 0x10eee <gpib_trace_display+0x150>
            strcat(str," NRFD");
   10ee8:	67 e6       	ldi	r22, 0x67	; 103
   10eea:	7d e0       	ldi	r23, 0x0D	; 13
   10eec:	02 c0       	rjmp	.+4      	; 0x10ef2 <gpib_trace_display+0x154>
        else
            strcat(str,"     ");
   10eee:	65 e6       	ldi	r22, 0x65	; 101
   10ef0:	74 e0       	ldi	r23, 0x04	; 4
   10ef2:	c7 01       	movw	r24, r14
   10ef4:	0e 94 b4 2f 	call	0x5f68	; 0x5f68 <strcat>
        if(status & NDAC_FLAG)
   10ef8:	17 ff       	sbrs	r17, 7
   10efa:	03 c0       	rjmp	.+6      	; 0x10f02 <gpib_trace_display+0x164>
            strcat(str," NDAC");
   10efc:	6d e6       	ldi	r22, 0x6D	; 109
   10efe:	7d e0       	ldi	r23, 0x0D	; 13
   10f00:	02 c0       	rjmp	.+4      	; 0x10f06 <gpib_trace_display+0x168>
        else
            strcat(str,"     ");
   10f02:	65 e6       	ldi	r22, 0x65	; 101
   10f04:	74 e0       	ldi	r23, 0x04	; 4
   10f06:	c7 01       	movw	r24, r14
   10f08:	0e 94 b4 2f 	call	0x5f68	; 0x5f68 <strcat>
    }

    if( (status & ATN_FLAG) )
   10f0c:	81 14       	cp	r8, r1
   10f0e:	91 04       	cpc	r9, r1
   10f10:	09 f4       	brne	.+2      	; 0x10f14 <gpib_trace_display+0x176>
   10f12:	5a c0       	rjmp	.+180    	; 0x10fc8 <gpib_trace_display+0x22a>
    {
        int i;
        int cmd = status & CMD_MASK;
   10f14:	c8 01       	movw	r24, r16
   10f16:	8f 77       	andi	r24, 0x7F	; 127
   10f18:	99 27       	eor	r25, r25
        if(cmd >= 0x020 && cmd <= 0x3e)
   10f1a:	9c 01       	movw	r18, r24
   10f1c:	20 52       	subi	r18, 0x20	; 32
   10f1e:	31 09       	sbc	r19, r1
   10f20:	2f 31       	cpi	r18, 0x1F	; 31
   10f22:	31 05       	cpc	r19, r1
   10f24:	48 f4       	brcc	.+18     	; 0x10f38 <gpib_trace_display+0x19a>
            sprintf(tmp," MLA %02Xh", cmd & 0x1f);
   10f26:	0f 71       	andi	r16, 0x1F	; 31
   10f28:	11 27       	eor	r17, r17
   10f2a:	ed b7       	in	r30, 0x3d	; 61
   10f2c:	fe b7       	in	r31, 0x3e	; 62
   10f2e:	17 83       	std	Z+7, r17	; 0x07
   10f30:	06 83       	std	Z+6, r16	; 0x06
   10f32:	80 e5       	ldi	r24, 0x50	; 80
   10f34:	90 e1       	ldi	r25, 0x10	; 16
   10f36:	0e c0       	rjmp	.+28     	; 0x10f54 <gpib_trace_display+0x1b6>
        else if(cmd >= 0x040 && cmd <= 0x4e)
   10f38:	9c 01       	movw	r18, r24
   10f3a:	20 54       	subi	r18, 0x40	; 64
   10f3c:	31 09       	sbc	r19, r1
   10f3e:	2f 30       	cpi	r18, 0x0F	; 15
   10f40:	31 05       	cpc	r19, r1
   10f42:	88 f4       	brcc	.+34     	; 0x10f66 <gpib_trace_display+0x1c8>
            sprintf(tmp," MTA %02Xh", cmd & 0x1f);
   10f44:	0f 71       	andi	r16, 0x1F	; 31
   10f46:	11 27       	eor	r17, r17
   10f48:	ed b7       	in	r30, 0x3d	; 61
   10f4a:	fe b7       	in	r31, 0x3e	; 62
   10f4c:	17 83       	std	Z+7, r17	; 0x07
   10f4e:	06 83       	std	Z+6, r16	; 0x06
   10f50:	85 e4       	ldi	r24, 0x45	; 69
   10f52:	90 e1       	ldi	r25, 0x10	; 16
   10f54:	a0 e0       	ldi	r26, 0x00	; 0
   10f56:	83 83       	std	Z+3, r24	; 0x03
   10f58:	94 83       	std	Z+4, r25	; 0x04
   10f5a:	a5 83       	std	Z+5, r26	; 0x05
   10f5c:	d2 82       	std	Z+2, r13	; 0x02
   10f5e:	c1 82       	std	Z+1, r12	; 0x01
   10f60:	0e 94 3e 45 	call	0x8a7c	; 0x8a7c <sprintf_P>
   10f64:	31 c0       	rjmp	.+98     	; 0x10fc8 <gpib_trace_display+0x22a>
        else if(cmd >= 0x060 && cmd <= 0x6f)
   10f66:	9c 01       	movw	r18, r24
   10f68:	20 56       	subi	r18, 0x60	; 96
   10f6a:	31 09       	sbc	r19, r1
   10f6c:	20 31       	cpi	r18, 0x10	; 16
   10f6e:	31 05       	cpc	r19, r1
   10f70:	28 f0       	brcs	.+10     	; 0x10f7c <gpib_trace_display+0x1de>
   10f72:	e2 e8       	ldi	r30, 0x82	; 130
   10f74:	f1 e0       	ldi	r31, 0x01	; 1
   10f76:	00 e0       	ldi	r16, 0x00	; 0
   10f78:	10 e0       	ldi	r17, 0x00	; 0
   10f7a:	0b c0       	rjmp	.+22     	; 0x10f92 <gpib_trace_display+0x1f4>
            sprintf(tmp," MSA %02Xh", cmd & 0x1f);
   10f7c:	0f 71       	andi	r16, 0x1F	; 31
   10f7e:	11 27       	eor	r17, r17
   10f80:	ed b7       	in	r30, 0x3d	; 61
   10f82:	fe b7       	in	r31, 0x3e	; 62
   10f84:	17 83       	std	Z+7, r17	; 0x07
   10f86:	06 83       	std	Z+6, r16	; 0x06
   10f88:	8a e3       	ldi	r24, 0x3A	; 58
   10f8a:	90 e1       	ldi	r25, 0x10	; 16
   10f8c:	e3 cf       	rjmp	.-58     	; 0x10f54 <gpib_trace_display+0x1b6>
        else
        {
            for(i=0;gpib_tokens[i].cmd != -1;++i)
   10f8e:	0f 5f       	subi	r16, 0xFF	; 255
   10f90:	1f 4f       	sbci	r17, 0xFF	; 255
   10f92:	20 81       	ld	r18, Z
   10f94:	31 81       	ldd	r19, Z+1	; 0x01
   10f96:	2f 3f       	cpi	r18, 0xFF	; 255
   10f98:	4f ef       	ldi	r20, 0xFF	; 255
   10f9a:	34 07       	cpc	r19, r20
   10f9c:	a9 f0       	breq	.+42     	; 0x10fc8 <gpib_trace_display+0x22a>
   10f9e:	34 96       	adiw	r30, 0x04	; 4
            {
                if(cmd == gpib_tokens[i].cmd)
   10fa0:	82 17       	cp	r24, r18
   10fa2:	93 07       	cpc	r25, r19
   10fa4:	a1 f7       	brne	.-24     	; 0x10f8e <gpib_trace_display+0x1f0>
                {
                    strcat(tmp," ");
   10fa6:	69 e6       	ldi	r22, 0x69	; 105
   10fa8:	74 e0       	ldi	r23, 0x04	; 4
   10faa:	c6 01       	movw	r24, r12
   10fac:	0e 94 b4 2f 	call	0x5f68	; 0x5f68 <strcat>
                    strcat(tmp,gpib_tokens[i].name);
   10fb0:	f8 01       	movw	r30, r16
   10fb2:	ee 0f       	add	r30, r30
   10fb4:	ff 1f       	adc	r31, r31
   10fb6:	ee 0f       	add	r30, r30
   10fb8:	ff 1f       	adc	r31, r31
   10fba:	ee 57       	subi	r30, 0x7E	; 126
   10fbc:	fe 4f       	sbci	r31, 0xFE	; 254
   10fbe:	62 81       	ldd	r22, Z+2	; 0x02
   10fc0:	73 81       	ldd	r23, Z+3	; 0x03
   10fc2:	c6 01       	movw	r24, r12
   10fc4:	0e 94 b4 2f 	call	0x5f68	; 0x5f68 <strcat>
                }
            }
        }
    }

    if(gpib_log_fp == NULL)
   10fc8:	20 91 6c 19 	lds	r18, 0x196C	; 0x80196c <gpib_log_fp>
   10fcc:	30 91 6d 19 	lds	r19, 0x196D	; 0x80196d <gpib_log_fp+0x1>
   10fd0:	80 91 cd 1c 	lds	r24, 0x1CCD	; 0x801ccd <__iob+0x2>
   10fd4:	90 91 ce 1c 	lds	r25, 0x1CCE	; 0x801cce <__iob+0x3>
   10fd8:	23 2b       	or	r18, r19
   10fda:	21 f4       	brne	.+8      	; 0x10fe4 <gpib_trace_display+0x246>
        gpib_log_fp = stdout;
   10fdc:	90 93 6d 19 	sts	0x196D, r25	; 0x80196d <gpib_log_fp+0x1>
   10fe0:	80 93 6c 19 	sts	0x196C, r24	; 0x80196c <gpib_log_fp>

// Echo to console unless file is the console
    if(gpib_log_fp != stdout)
   10fe4:	20 91 6c 19 	lds	r18, 0x196C	; 0x80196c <gpib_log_fp>
   10fe8:	30 91 6d 19 	lds	r19, 0x196D	; 0x80196d <gpib_log_fp+0x1>
   10fec:	82 17       	cp	r24, r18
   10fee:	93 07       	cpc	r25, r19
   10ff0:	19 f0       	breq	.+6      	; 0x10ff8 <gpib_trace_display+0x25a>
        puts(str);
   10ff2:	c7 01       	movw	r24, r14
   10ff4:	0e 94 ef 74 	call	0xe9de	; 0xe9de <puts>

// Save to file
    fprintf(gpib_log_fp,"%s\n",str);
   10ff8:	ed b7       	in	r30, 0x3d	; 61
   10ffa:	fe b7       	in	r31, 0x3e	; 62
   10ffc:	f6 82       	std	Z+6, r15	; 0x06
   10ffe:	e5 82       	std	Z+5, r14	; 0x05
   11000:	83 e7       	ldi	r24, 0x73	; 115
   11002:	9d e0       	ldi	r25, 0x0D	; 13
   11004:	94 83       	std	Z+4, r25	; 0x04
   11006:	83 83       	std	Z+3, r24	; 0x03
   11008:	80 91 6c 19 	lds	r24, 0x196C	; 0x80196c <gpib_log_fp>
   1100c:	90 91 6d 19 	lds	r25, 0x196D	; 0x80196d <gpib_log_fp+0x1>
   11010:	92 83       	std	Z+2, r25	; 0x02
   11012:	81 83       	std	Z+1, r24	; 0x01
   11014:	0e 94 97 7c 	call	0xf92e	; 0xf92e <fprintf>
}
   11018:	c7 57       	subi	r28, 0x77	; 119
   1101a:	df 4f       	sbci	r29, 0xFF	; 255
   1101c:	ec e0       	ldi	r30, 0x0C	; 12
   1101e:	0c 94 2b e3 	jmp	0x1c656	; 0x1c656 <__epilogue_restores__+0xc>

00011022 <gpib_read_byte>:
///     - Error Flags:
///       - IFC_FLAG
///
/// @return (data bus, control and error status)
uint16_t gpib_read_byte(int trace)
{
   11022:	af 92       	push	r10
   11024:	bf 92       	push	r11
   11026:	cf 92       	push	r12
   11028:	df 92       	push	r13
   1102a:	ef 92       	push	r14
   1102c:	ff 92       	push	r15
   1102e:	0f 93       	push	r16
   11030:	1f 93       	push	r17
   11032:	cf 93       	push	r28
   11034:	00 d0       	rcall	.+0      	; 0x11036 <gpib_read_byte+0x14>
   11036:	00 d0       	rcall	.+0      	; 0x11038 <gpib_read_byte+0x16>
   11038:	1f 92       	push	r1

    ch = 0;
    control_last = 0;

	// Return unread - last read - data and control lines
    if(gpib_unread_f)
   1103a:	20 91 6b 19 	lds	r18, 0x196B	; 0x80196b <gpib_unread_f>
   1103e:	22 23       	and	r18, r18
   11040:	39 f0       	breq	.+14     	; 0x11050 <gpib_read_byte+0x2e>
    {
		// FYI any unread data has been traced
        gpib_unread_f = 0;
   11042:	10 92 6b 19 	sts	0x196B, r1	; 0x80196b <gpib_unread_f>
        return(gpib_unread_data);
   11046:	80 91 fe 1e 	lds	r24, 0x1EFE	; 0x801efe <gpib_unread_data>
   1104a:	90 91 ff 1e 	lds	r25, 0x1EFF	; 0x801eff <gpib_unread_data+0x1>
   1104e:	e0 c0       	rjmp	.+448    	; 0x11210 <gpib_read_byte+0x1ee>
   11050:	6c 01       	movw	r12, r24
	// We start and end gpib_read_byte() with NRFD and NDAC LOW 
	// When ATN goes LOW all devices must pull NRFD and NDAC lines LOW
	// within 200 nanoseconds to permit three-wire handshake 
	// ATN requirements are met because we are always reading in command mode
	// ATN = 0 = COmmand Mode
    gpib_rx_init(1);
   11052:	81 e0       	ldi	r24, 0x01	; 1
   11054:	05 dc       	rcall	.-2038   	; 0x10860 <gpib_rx_init>
	// GPIB_IO_LOW(TE);			// BUS IN
	// BUS IN, DAV IN, NDAC OUT , NRFD OUT 
	// ATN IN, EOI IN, SRQ OUT OC

	///@brief V2 boards can NOT read ALL bits on the control bus at once
    if(trace)
   11056:	c1 14       	cp	r12, r1
   11058:	d1 04       	cpc	r13, r1
    {
        control_last = gpib_control_pin_read();
   1105a:	51 f0       	breq	.+20     	; 0x11070 <gpib_read_byte+0x4e>
   1105c:	fa dc       	rcall	.-1548   	; 0x10a52 <gpib_control_pin_read>
        control_last |= gpib_handshake_pin_read();
   1105e:	7c 01       	movw	r14, r24
   11060:	08 dd       	rcall	.-1520   	; 0x10a72 <gpib_handshake_pin_read>
   11062:	e8 2a       	or	r14, r24
   11064:	f9 2a       	or	r15, r25
        gpib_trace_display(control_last, TRACE_BUS);
   11066:	62 e0       	ldi	r22, 0x02	; 2
   11068:	70 e0       	ldi	r23, 0x00	; 0
   1106a:	c7 01       	movw	r24, r14
   1106c:	98 de       	rcall	.-720    	; 0x10d9e <gpib_trace_display>
   1106e:	02 c0       	rjmp	.+4      	; 0x11074 <gpib_read_byte+0x52>
    uint16_t bus, control, control_last;
    extern uint8_t gpib_unread_f;
    extern uint16_t gpib_unread_data;

    ch = 0;
    control_last = 0;
   11070:	e1 2c       	mov	r14, r1
   11072:	f1 2c       	mov	r15, r1
        control_last = gpib_control_pin_read();
        control_last |= gpib_handshake_pin_read();
        gpib_trace_display(control_last, TRACE_BUS);
    }

	gpib_timeout_set(HTIMEOUT);
   11074:	64 ef       	ldi	r22, 0xF4	; 244
   11076:	71 e0       	ldi	r23, 0x01	; 1
   11078:	80 e0       	ldi	r24, 0x00	; 0
   1107a:	90 e0       	ldi	r25, 0x00	; 0
   1107c:	af db       	rcall	.-2210   	; 0x107dc <gpib_timeout_set>
    rx_state = GPIB_RX_START;
   1107e:	c0 e0       	ldi	r28, 0x00	; 0
    uint16_t ch;
    uint16_t bus, control, control_last;
    extern uint8_t gpib_unread_f;
    extern uint16_t gpib_unread_data;

    ch = 0;
   11080:	00 e0       	ldi	r16, 0x00	; 0
   11082:	10 e0       	ldi	r17, 0x00	; 0
    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
    {

        // User task that is called while waiting for commands
        gpib_user_task();
   11084:	0e 94 ad de 	call	0x1bd5a	; 0x1bd5a <gpib_user_task>

        if(uart_keyhit(0))
   11088:	80 e0       	ldi	r24, 0x00	; 0
   1108a:	0e 94 b7 28 	call	0x516e	; 0x516e <uart_keyhit>
   1108e:	89 2b       	or	r24, r25
   11090:	09 f0       	breq	.+2      	; 0x11094 <gpib_read_byte+0x72>
   11092:	9c c0       	rjmp	.+312    	; 0x111cc <gpib_read_byte+0x1aa>
        if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

		// IFC is alwayon IN always in device mode
        if(GPIB_PIN_TST(IFC) == 0)
   11094:	4c 99       	sbic	0x09, 4	; 9
   11096:	15 c0       	rjmp	.+42     	; 0x110c2 <gpib_read_byte+0xa0>
        {
            ch |= IFC_FLAG;
   11098:	10 61       	ori	r17, 0x10	; 16
			if(debuglevel & GPIB_ERR)
   1109a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1109e:	80 ff       	sbrs	r24, 0
   110a0:	0e c0       	rjmp	.+28     	; 0x110be <gpib_read_byte+0x9c>
				printf("gpib_read_byte: IFC state=%d\n", rx_state);
   110a2:	8c 2f       	mov	r24, r28
   110a4:	90 e0       	ldi	r25, 0x00	; 0
   110a6:	ed b7       	in	r30, 0x3d	; 61
   110a8:	fe b7       	in	r31, 0x3e	; 62
   110aa:	95 83       	std	Z+5, r25	; 0x05
   110ac:	84 83       	std	Z+4, r24	; 0x04
   110ae:	8a e6       	ldi	r24, 0x6A	; 106
   110b0:	90 e1       	ldi	r25, 0x10	; 16
   110b2:	a0 e0       	ldi	r26, 0x00	; 0
   110b4:	81 83       	std	Z+1, r24	; 0x01
   110b6:	92 83       	std	Z+2, r25	; 0x02
   110b8:	a3 83       	std	Z+3, r26	; 0x03
   110ba:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
            gpib_bus_init();
   110be:	98 db       	rcall	.-2256   	; 0x107f0 <gpib_bus_init>
   110c0:	85 c0       	rjmp	.+266    	; 0x111cc <gpib_read_byte+0x1aa>
            break;
        }

        switch(rx_state)
   110c2:	c2 30       	cpi	r28, 0x02	; 2
   110c4:	31 f1       	breq	.+76     	; 0x11112 <gpib_read_byte+0xf0>
   110c6:	28 f4       	brcc	.+10     	; 0x110d2 <gpib_read_byte+0xb0>
   110c8:	cc 23       	and	r28, r28
   110ca:	69 f0       	breq	.+26     	; 0x110e6 <gpib_read_byte+0xc4>
   110cc:	c1 30       	cpi	r28, 0x01	; 1
   110ce:	c9 f0       	breq	.+50     	; 0x11102 <gpib_read_byte+0xe0>
   110d0:	63 c0       	rjmp	.+198    	; 0x11198 <gpib_read_byte+0x176>
   110d2:	c5 30       	cpi	r28, 0x05	; 5
   110d4:	09 f4       	brne	.+2      	; 0x110d8 <gpib_read_byte+0xb6>
   110d6:	54 c0       	rjmp	.+168    	; 0x11180 <gpib_read_byte+0x15e>
   110d8:	c7 30       	cpi	r28, 0x07	; 7
   110da:	09 f4       	brne	.+2      	; 0x110de <gpib_read_byte+0xbc>
   110dc:	58 c0       	rjmp	.+176    	; 0x1118e <gpib_read_byte+0x16c>
   110de:	c4 30       	cpi	r28, 0x04	; 4
   110e0:	09 f0       	breq	.+2      	; 0x110e4 <gpib_read_byte+0xc2>
   110e2:	5a c0       	rjmp	.+180    	; 0x11198 <gpib_read_byte+0x176>
   110e4:	3e c0       	rjmp	.+124    	; 0x11162 <gpib_read_byte+0x140>
        {

			///@brief DAV must be high
            case GPIB_RX_START:
				//DEBUG
				if (GPIB_PIN_TST(DAV) == 1)
   110e6:	19 9b       	sbis	0x03, 1	; 3
   110e8:	43 c0       	rjmp	.+134    	; 0x11170 <gpib_read_byte+0x14e>
   110ea:	fd e0       	ldi	r31, 0x0D	; 13
   110ec:	fa 95       	dec	r31
   110ee:	f1 f7       	brne	.-4      	; 0x110ec <gpib_read_byte+0xca>
   110f0:	00 00       	nop
				{
					GPIB_BUS_SETTLE();                // Let Data BUS settle
					GPIB_PIN_FLOAT_UP(NRFD);
   110f2:	52 98       	cbi	0x0a, 2	; 10
   110f4:	5a 9a       	sbi	0x0b, 2	; 11
   110f6:	8d e0       	ldi	r24, 0x0D	; 13
   110f8:	8a 95       	dec	r24
   110fa:	f1 f7       	brne	.-4      	; 0x110f8 <gpib_read_byte+0xd6>
   110fc:	00 00       	nop
					GPIB_BUS_SETTLE();                // Let Data BUS settle
					rx_state = GPIB_RX_WAIT_FOR_DAV_LOW;
   110fe:	c1 e0       	ldi	r28, 0x01	; 1
   11100:	37 c0       	rjmp	.+110    	; 0x11170 <gpib_read_byte+0x14e>
                }
                break;

			// Wait for Data Avalable without timeout
            case GPIB_RX_WAIT_FOR_DAV_LOW:
                if ( GPIB_PIN_TST(DAV) == 0 )
   11102:	19 99       	sbic	0x03, 1	; 3
   11104:	80 c0       	rjmp	.+256    	; 0x11206 <gpib_read_byte+0x1e4>
   11106:	ed e0       	ldi	r30, 0x0D	; 13
   11108:	ea 95       	dec	r30
   1110a:	f1 f7       	brne	.-4      	; 0x11108 <gpib_read_byte+0xe6>
   1110c:	00 00       	nop
				{
					GPIB_BUS_SETTLE();                
                    rx_state = GPIB_RX_DAV_IS_LOW;
   1110e:	c2 e0       	ldi	r28, 0x02	; 2
   11110:	7a c0       	rjmp	.+244    	; 0x11206 <gpib_read_byte+0x1e4>
				}
                break;

			// Data is Avaliable
            case GPIB_RX_DAV_IS_LOW:
				GPIB_IO_LOW(NRFD); // BUSY
   11112:	5a 98       	cbi	0x0b, 2	; 11
   11114:	52 9a       	sbi	0x0a, 2	; 10
   11116:	fd e0       	ldi	r31, 0x0D	; 13
   11118:	fa 95       	dec	r31
				GPIB_BUS_SETTLE();                

				// Read DATA and Control lines
				// gpib_bus_read() strips parity if ATN is low command state

                bus = gpib_bus_read();
   1111a:	f1 f7       	brne	.-4      	; 0x11118 <gpib_read_byte+0xf6>
   1111c:	00 00       	nop
   1111e:	93 dc       	rcall	.-1754   	; 0x10a46 <gpib_bus_read>
   11120:	a8 2e       	mov	r10, r24
                ch |= bus;

				///@brief V2 boards can NOT read all control bits at once
				///@brief NRFD,NDAC and SRQ are cirrently outputs

                control_last = gpib_control_pin_read();
   11122:	b1 2c       	mov	r11, r1
   11124:	96 dc       	rcall	.-1748   	; 0x10a52 <gpib_control_pin_read>
   11126:	7c 01       	movw	r14, r24
   11128:	08 2b       	or	r16, r24
                ch |= control_last;
   1112a:	19 2b       	or	r17, r25
   1112c:	0a 29       	or	r16, r10

				// In theory the control_last should not have changed
				// from the initial values. ONly the Data BUS
                if(trace)
   1112e:	1b 29       	or	r17, r11
   11130:	c1 14       	cp	r12, r1
   11132:	d1 04       	cpc	r13, r1
                {
                    control_last |= gpib_handshake_pin_read();
   11134:	49 f0       	breq	.+18     	; 0x11148 <gpib_read_byte+0x126>
   11136:	9d dc       	rcall	.-1734   	; 0x10a72 <gpib_handshake_pin_read>
   11138:	e8 2a       	or	r14, r24
                    gpib_trace_display(bus | control_last, TRACE_READ);
   1113a:	f9 2a       	or	r15, r25
   1113c:	61 e0       	ldi	r22, 0x01	; 1
   1113e:	70 e0       	ldi	r23, 0x00	; 0
   11140:	c5 01       	movw	r24, r10
   11142:	8e 29       	or	r24, r14
   11144:	9f 29       	or	r25, r15
   11146:	2b de       	rcall	.-938    	; 0x10d9e <gpib_trace_display>
                }

				// Release NDAC to say we read the byte
                GPIB_PIN_FLOAT_UP(NDAC);
   11148:	53 98       	cbi	0x0a, 3	; 10
   1114a:	5b 9a       	sbi	0x0b, 3	; 11
   1114c:	8d e0       	ldi	r24, 0x0D	; 13
   1114e:	8a 95       	dec	r24
   11150:	f1 f7       	brne	.-4      	; 0x1114e <gpib_read_byte+0x12c>
                GPIB_BUS_SETTLE();                // NDAC bus settle time
                gpib_timeout_set(HTIMEOUT);
   11152:	00 00       	nop
   11154:	64 ef       	ldi	r22, 0xF4	; 244
   11156:	71 e0       	ldi	r23, 0x01	; 1
   11158:	80 e0       	ldi	r24, 0x00	; 0
   1115a:	90 e0       	ldi	r25, 0x00	; 0
   1115c:	3f db       	rcall	.-2434   	; 0x107dc <gpib_timeout_set>
                rx_state = GPIB_RX_WAIT_FOR_DAV_HI;
   1115e:	c4 e0       	ldi	r28, 0x04	; 4
   11160:	52 c0       	rjmp	.+164    	; 0x11206 <gpib_read_byte+0x1e4>
                break;

			///@brief Wait for DAV HI
            case GPIB_RX_WAIT_FOR_DAV_HI:
                if (GPIB_PIN_TST(DAV) == 1)
   11162:	19 9b       	sbis	0x03, 1	; 3
   11164:	05 c0       	rjmp	.+10     	; 0x11170 <gpib_read_byte+0x14e>
   11166:	ed e0       	ldi	r30, 0x0D	; 13
   11168:	ea 95       	dec	r30
   1116a:	f1 f7       	brne	.-4      	; 0x11168 <gpib_read_byte+0x146>
   1116c:	00 00       	nop
                {
					GPIB_BUS_SETTLE();
                    rx_state = GPIB_RX_DAV_IS_HI;
   1116e:	c5 e0       	ldi	r28, 0x05	; 5
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11170:	80 91 f3 1c 	lds	r24, 0x1CF3	; 0x801cf3 <gpib_timer+0x8>
                if (GPIB_PIN_TST(DAV) == 1)
                {
					GPIB_BUS_SETTLE();
                    rx_state = GPIB_RX_DAV_IS_HI;
                }
                if (gpib_timeout_test())
   11174:	88 23       	and	r24, r24
   11176:	09 f4       	brne	.+2      	; 0x1117a <gpib_read_byte+0x158>
   11178:	46 c0       	rjmp	.+140    	; 0x11206 <gpib_read_byte+0x1e4>
                {
                    ch |= TIMEOUT_FLAG;
   1117a:	10 64       	ori	r17, 0x40	; 64
                    rx_state = GPIB_RX_ERROR;
   1117c:	c7 e0       	ldi	r28, 0x07	; 7
   1117e:	43 c0       	rjmp	.+134    	; 0x11206 <gpib_read_byte+0x1e4>
                }
                break;

			///@brief Ready for next byte
            case GPIB_RX_DAV_IS_HI:
				GPIB_IO_LOW(NDAC);
   11180:	5b 98       	cbi	0x0b, 3	; 11
   11182:	53 9a       	sbi	0x0a, 3	; 10
   11184:	fd e0       	ldi	r31, 0x0D	; 13
   11186:	fa 95       	dec	r31
   11188:	f1 f7       	brne	.-4      	; 0x11186 <gpib_read_byte+0x164>
   1118a:	00 00       	nop
   1118c:	09 c0       	rjmp	.+18     	; 0x111a0 <gpib_read_byte+0x17e>
				// Now BOTH NDAC and NRFD are LOW
                rx_state = GPIB_RX_DONE;
                break;

            case GPIB_RX_ERROR:
				GPIB_IO_LOW(NRFD);
   1118e:	5a 98       	cbi	0x0b, 2	; 11
   11190:	52 9a       	sbi	0x0a, 2	; 10
				GPIB_IO_LOW(NDAC);
   11192:	5b 98       	cbi	0x0b, 3	; 11
   11194:	53 9a       	sbi	0x0a, 3	; 10

            case GPIB_RX_DONE:
                break;
        }

        if(trace)
   11196:	04 c0       	rjmp	.+8      	; 0x111a0 <gpib_read_byte+0x17e>
   11198:	c1 14       	cp	r12, r1
   1119a:	d1 04       	cpc	r13, r1
   1119c:	91 f0       	breq	.+36     	; 0x111c2 <gpib_read_byte+0x1a0>
   1119e:	04 c0       	rjmp	.+8      	; 0x111a8 <gpib_read_byte+0x186>
   111a0:	c1 14       	cp	r12, r1
   111a2:	d1 04       	cpc	r13, r1
   111a4:	99 f0       	breq	.+38     	; 0x111cc <gpib_read_byte+0x1aa>
        {
/// V2 boards can not read all control and handshake bits at once
/// FIXME We could add a test for read/write state ??
/// NRFD,NDAC SRQ are outputs durring write phase, but not at very start
            control = gpib_control_pin_read();
   111a6:	c8 e0       	ldi	r28, 0x08	; 8
   111a8:	54 dc       	rcall	.-1880   	; 0x10a52 <gpib_control_pin_read>
            control |= gpib_handshake_pin_read();
   111aa:	5c 01       	movw	r10, r24
   111ac:	62 dc       	rcall	.-1852   	; 0x10a72 <gpib_handshake_pin_read>
   111ae:	a8 2a       	or	r10, r24
   111b0:	b9 2a       	or	r11, r25
            if(control_last != control)
   111b2:	ae 14       	cp	r10, r14
   111b4:	bf 04       	cpc	r11, r15
   111b6:	31 f0       	breq	.+12     	; 0x111c4 <gpib_read_byte+0x1a2>
            {
                gpib_trace_display(control, TRACE_BUS);
   111b8:	62 e0       	ldi	r22, 0x02	; 2
   111ba:	70 e0       	ldi	r23, 0x00	; 0
   111bc:	c5 01       	movw	r24, r10
   111be:	ef dd       	rcall	.-1058   	; 0x10d9e <gpib_trace_display>
   111c0:	01 c0       	rjmp	.+2      	; 0x111c4 <gpib_read_byte+0x1a2>
   111c2:	57 01       	movw	r10, r14

            case GPIB_RX_DONE:
                break;
        }

        if(trace)
   111c4:	c8 30       	cpi	r28, 0x08	; 8
        gpib_trace_display(control_last, TRACE_BUS);
    }

	gpib_timeout_set(HTIMEOUT);
    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
   111c6:	11 f0       	breq	.+4      	; 0x111cc <gpib_read_byte+0x1aa>
   111c8:	75 01       	movw	r14, r10
   111ca:	5c cf       	rjmp	.-328    	; 0x11084 <gpib_read_byte+0x62>
   111cc:	80 91 f8 1e 	lds	r24, 0x1EF8	; 0x801ef8 <current>
///  - Remember that NDAC and NRFD are now both LOW!
///  - The spec says to KEEP BOTH LOW when NOT ready to read otherwise
///    we may miss a transfer and cause a controller timeout!
///  - GPIB TX state expects NRFD LOW on entry or it is an ERROR!

    lastcmd = current;
   111d0:	90 91 f9 1e 	lds	r25, 0x1EF9	; 0x801ef9 <current+0x1>
   111d4:	90 93 f5 1c 	sts	0x1CF5, r25	; 0x801cf5 <lastcmd+0x1>
   111d8:	80 93 f4 1c 	sts	0x1CF4, r24	; 0x801cf4 <lastcmd>
   111dc:	c8 01       	movw	r24, r16

    if(ch & ERROR_MASK || (ch & ATN_FLAG) == 0)
   111de:	88 27       	eor	r24, r24
   111e0:	90 7d       	andi	r25, 0xD0	; 208
   111e2:	89 2b       	or	r24, r25
   111e4:	11 f4       	brne	.+4      	; 0x111ea <gpib_read_byte+0x1c8>
   111e6:	12 fd       	sbrc	r17, 2
   111e8:	05 c0       	rjmp	.+10     	; 0x111f4 <gpib_read_byte+0x1d2>
   111ea:	10 92 f9 1e 	sts	0x1EF9, r1	; 0x801ef9 <current+0x1>
        current = 0;
   111ee:	10 92 f8 1e 	sts	0x1EF8, r1	; 0x801ef8 <current>
   111f2:	07 c0       	rjmp	.+14     	; 0x11202 <gpib_read_byte+0x1e0>
   111f4:	c8 01       	movw	r24, r16
    else
        current = ch & CMD_MASK;
   111f6:	8f 77       	andi	r24, 0x7F	; 127
   111f8:	99 27       	eor	r25, r25
   111fa:	90 93 f9 1e 	sts	0x1EF9, r25	; 0x801ef9 <current+0x1>
   111fe:	80 93 f8 1e 	sts	0x1EF8, r24	; 0x801ef8 <current>
   11202:	c8 01       	movw	r24, r16
   11204:	05 c0       	rjmp	.+10     	; 0x11210 <gpib_read_byte+0x1ee>
   11206:	c1 14       	cp	r12, r1

            case GPIB_RX_DONE:
                break;
        }

        if(trace)
   11208:	d1 04       	cpc	r13, r1
   1120a:	09 f4       	brne	.+2      	; 0x1120e <gpib_read_byte+0x1ec>
   1120c:	3b cf       	rjmp	.-394    	; 0x11084 <gpib_read_byte+0x62>
   1120e:	cc cf       	rjmp	.-104    	; 0x111a8 <gpib_read_byte+0x186>
   11210:	0f 90       	pop	r0
        current = 0;
    else
        current = ch & CMD_MASK;

    return (ch);
}
   11212:	0f 90       	pop	r0
   11214:	0f 90       	pop	r0
   11216:	0f 90       	pop	r0
   11218:	0f 90       	pop	r0
   1121a:	cf 91       	pop	r28
   1121c:	1f 91       	pop	r17
   1121e:	0f 91       	pop	r16
   11220:	ff 90       	pop	r15
   11222:	ef 90       	pop	r14
   11224:	df 90       	pop	r13
   11226:	cf 90       	pop	r12
   11228:	bf 90       	pop	r11
   1122a:	af 90       	pop	r10
   1122c:	08 95       	ret

0001122e <gpib_decode>:
   1122e:	60 e0       	ldi	r22, 0x00	; 0
/// @see gpib_decode_str()
/// @return  void

void gpib_decode(uint16_t ch)
{
    gpib_trace_display(ch,0);
   11230:	70 e0       	ldi	r23, 0x00	; 0
   11232:	b5 cd       	rjmp	.-1174   	; 0x10d9e <gpib_trace_display>
   11234:	08 95       	ret

00011236 <gpib_read_str>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
int gpib_read_str(uint8_t *buf, int size, uint16_t *status)
{
   11236:	a7 e0       	ldi	r26, 0x07	; 7
   11238:	b0 e0       	ldi	r27, 0x00	; 0
   1123a:	e1 e2       	ldi	r30, 0x21	; 33
   1123c:	f9 e8       	ldi	r31, 0x89	; 137
   1123e:	0c 94 11 e3 	jmp	0x1c622	; 0x1c622 <__prologue_saves__+0x10>
   11242:	5b 01       	movw	r10, r22
   11244:	6a 01       	movw	r12, r20
    uint16_t val;
    int ind = 0;

    *status &= STATUS_MASK;
   11246:	fa 01       	movw	r30, r20
   11248:	20 81       	ld	r18, Z
   1124a:	31 81       	ldd	r19, Z+1	; 0x01
   1124c:	22 27       	eor	r18, r18
   1124e:	31 83       	std	Z+1, r19	; 0x01
   11250:	20 83       	st	Z, r18

    if(!size)
   11252:	67 2b       	or	r22, r23
   11254:	21 f0       	breq	.+8      	; 0x1125e <gpib_read_str+0x28>
   11256:	7c 01       	movw	r14, r24
   11258:	00 e0       	ldi	r16, 0x00	; 0
   1125a:	10 e0       	ldi	r17, 0x00	; 0
   1125c:	28 c0       	rjmp	.+80     	; 0x112ae <gpib_read_str+0x78>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   1125e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11262:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11266:	81 72       	andi	r24, 0x21	; 33
   11268:	91 70       	andi	r25, 0x01	; 1
   1126a:	89 2b       	or	r24, r25
   1126c:	09 f4       	brne	.+2      	; 0x11270 <gpib_read_str+0x3a>
   1126e:	7c c0       	rjmp	.+248    	; 0x11368 <gpib_read_str+0x132>
            printf("gpib_read_str: size = 0\n");
   11270:	81 e2       	ldi	r24, 0x21	; 33
   11272:	90 e1       	ldi	r25, 0x10	; 16
   11274:	a0 e0       	ldi	r26, 0x00	; 0
   11276:	ed b7       	in	r30, 0x3d	; 61
   11278:	fe b7       	in	r31, 0x3e	; 62
   1127a:	81 83       	std	Z+1, r24	; 0x01
   1127c:	92 83       	std	Z+2, r25	; 0x02
   1127e:	a3 83       	std	Z+3, r26	; 0x03
   11280:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   11284:	71 c0       	rjmp	.+226    	; 0x11368 <gpib_read_str+0x132>
        {
            *status |= (val & ERROR_MASK);
            break;
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
   11286:	8c 27       	eor	r24, r28
   11288:	9d 27       	eor	r25, r29
   1128a:	92 fd       	sbrc	r25, 2
   1128c:	2e c0       	rjmp	.+92     	; 0x112ea <gpib_read_str+0xb4>
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
            gpib_unread(val);
            break;
        }

        if(val & ATN_FLAG)
   1128e:	ce 01       	movw	r24, r28
   11290:	88 27       	eor	r24, r24
   11292:	94 70       	andi	r25, 0x04	; 4
            buf[ind] = (val & CMD_MASK);
   11294:	2c 2f       	mov	r18, r28
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
            gpib_unread(val);
            break;
        }

        if(val & ATN_FLAG)
   11296:	d2 fd       	sbrc	r29, 2
            buf[ind] = (val & CMD_MASK);
   11298:	2f 77       	andi	r18, 0x7F	; 127
        else
            buf[ind] = (val & DATA_MASK);
   1129a:	f7 01       	movw	r30, r14
   1129c:	20 83       	st	Z, r18
        ++ind;
   1129e:	0f 5f       	subi	r16, 0xFF	; 255
   112a0:	1f 4f       	sbci	r17, 0xFF	; 255

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   112a2:	89 2b       	or	r24, r25
   112a4:	09 f4       	brne	.+2      	; 0x112a8 <gpib_read_str+0x72>
   112a6:	3c c0       	rjmp	.+120    	; 0x11320 <gpib_read_str+0xea>
   112a8:	ff ef       	ldi	r31, 0xFF	; 255
   112aa:	ef 1a       	sub	r14, r31
   112ac:	ff 0a       	sbc	r15, r31
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
            printf("gpib_read_str: size = 0\n");
    }

    while(ind < size)
   112ae:	0a 15       	cp	r16, r10
   112b0:	1b 05       	cpc	r17, r11
   112b2:	0c f0       	brlt	.+2      	; 0x112b6 <gpib_read_str+0x80>
   112b4:	3f c0       	rjmp	.+126    	; 0x11334 <gpib_read_str+0xfe>
    {
        val = gpib_read_byte(NO_TRACE);
   112b6:	80 e0       	ldi	r24, 0x00	; 0
   112b8:	90 e0       	ldi	r25, 0x00	; 0
   112ba:	b3 de       	rcall	.-666    	; 0x11022 <gpib_read_byte>
   112bc:	ec 01       	movw	r28, r24
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_BUS_DECODE)
   112be:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   112c2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   112c6:	90 ff       	sbrs	r25, 0
   112c8:	02 c0       	rjmp	.+4      	; 0x112ce <gpib_read_str+0x98>
            gpib_decode(val);
   112ca:	ce 01       	movw	r24, r28
   112cc:	b0 df       	rcall	.-160    	; 0x1122e <gpib_decode>
#endif
        if(val & ERROR_MASK)
   112ce:	9e 01       	movw	r18, r28
   112d0:	22 27       	eor	r18, r18
   112d2:	30 7d       	andi	r19, 0xD0	; 208
   112d4:	f6 01       	movw	r30, r12
   112d6:	80 81       	ld	r24, Z
   112d8:	91 81       	ldd	r25, Z+1	; 0x01
   112da:	21 15       	cp	r18, r1
   112dc:	31 05       	cpc	r19, r1
   112de:	99 f2       	breq	.-90     	; 0x11286 <gpib_read_str+0x50>
        {
            *status |= (val & ERROR_MASK);
   112e0:	82 2b       	or	r24, r18
   112e2:	93 2b       	or	r25, r19
   112e4:	91 83       	std	Z+1, r25	; 0x01
   112e6:	80 83       	st	Z, r24
            break;
   112e8:	28 c0       	rjmp	.+80     	; 0x1133a <gpib_read_str+0x104>
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
        {
            if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   112ea:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   112ee:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   112f2:	81 72       	andi	r24, 0x21	; 33
   112f4:	91 70       	andi	r25, 0x01	; 1
   112f6:	89 2b       	or	r24, r25
   112f8:	81 f0       	breq	.+32     	; 0x1131a <gpib_read_str+0xe4>
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
   112fa:	ce 01       	movw	r24, r28
   112fc:	99 27       	eor	r25, r25
   112fe:	ed b7       	in	r30, 0x3d	; 61
   11300:	fe b7       	in	r31, 0x3e	; 62
   11302:	97 83       	std	Z+7, r25	; 0x07
   11304:	86 83       	std	Z+6, r24	; 0x06
   11306:	15 83       	std	Z+5, r17	; 0x05
   11308:	04 83       	std	Z+4, r16	; 0x04
   1130a:	84 ef       	ldi	r24, 0xF4	; 244
   1130c:	9f e0       	ldi	r25, 0x0F	; 15
   1130e:	a0 e0       	ldi	r26, 0x00	; 0
   11310:	81 83       	std	Z+1, r24	; 0x01
   11312:	92 83       	std	Z+2, r25	; 0x02
   11314:	a3 83       	std	Z+3, r26	; 0x03
   11316:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
            gpib_unread(val);
   1131a:	ce 01       	movw	r24, r28
   1131c:	6a db       	rcall	.-2348   	; 0x109f2 <gpib_unread>
            break;
   1131e:	0d c0       	rjmp	.+26     	; 0x1133a <gpib_read_str+0x104>
            buf[ind] = (val & CMD_MASK);
        else
            buf[ind] = (val & DATA_MASK);
        ++ind;

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   11320:	d0 ff       	sbrs	r29, 0
   11322:	c2 cf       	rjmp	.-124    	; 0x112a8 <gpib_read_str+0x72>
        {

            if(*status & EOI_FLAG)
   11324:	f6 01       	movw	r30, r12
   11326:	80 81       	ld	r24, Z
   11328:	91 81       	ldd	r25, Z+1	; 0x01
   1132a:	90 fd       	sbrc	r25, 0
   1132c:	1f c0       	rjmp	.+62     	; 0x1136c <gpib_read_str+0x136>
                return(ind);
/// @todo TODO
///  decode this state - for now I just set the EOI_FLAG
            *status |= EOI_FLAG;
   1132e:	91 60       	ori	r25, 0x01	; 1
   11330:	91 83       	std	Z+1, r25	; 0x01
   11332:	80 83       	st	Z, r24
            break;
        }
    }
    if ( ind != size ) 
   11334:	0a 15       	cp	r16, r10
   11336:	1b 05       	cpc	r17, r11
   11338:	c9 f0       	breq	.+50     	; 0x1136c <gpib_read_str+0x136>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   1133a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1133e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11342:	81 72       	andi	r24, 0x21	; 33
   11344:	99 27       	eor	r25, r25
   11346:	89 2b       	or	r24, r25
   11348:	89 f0       	breq	.+34     	; 0x1136c <gpib_read_str+0x136>
            printf("[gpib_read_str read(%d) expected(%d)]\n", ind , size);
   1134a:	ed b7       	in	r30, 0x3d	; 61
   1134c:	fe b7       	in	r31, 0x3e	; 62
   1134e:	b7 82       	std	Z+7, r11	; 0x07
   11350:	a6 82       	std	Z+6, r10	; 0x06
   11352:	15 83       	std	Z+5, r17	; 0x05
   11354:	04 83       	std	Z+4, r16	; 0x04
   11356:	8d ec       	ldi	r24, 0xCD	; 205
   11358:	9f e0       	ldi	r25, 0x0F	; 15
   1135a:	a0 e0       	ldi	r26, 0x00	; 0
   1135c:	81 83       	std	Z+1, r24	; 0x01
   1135e:	92 83       	std	Z+2, r25	; 0x02
   11360:	a3 83       	std	Z+3, r26	; 0x03
   11362:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   11366:	02 c0       	rjmp	.+4      	; 0x1136c <gpib_read_str+0x136>
   11368:	00 e0       	ldi	r16, 0x00	; 0
   1136a:	10 e0       	ldi	r17, 0x00	; 0
    }
    return(ind);
}
   1136c:	c8 01       	movw	r24, r16
   1136e:	cd b7       	in	r28, 0x3d	; 61
   11370:	de b7       	in	r29, 0x3e	; 62
   11372:	27 96       	adiw	r28, 0x07	; 7
   11374:	ea e0       	ldi	r30, 0x0A	; 10
   11376:	0c 94 2d e3 	jmp	0x1c65a	; 0x1c65a <__epilogue_restores__+0x10>

0001137a <gpib_write_str>:
///     - Error Flags:
///       - IFC_FLAG
/// @see: gpib_write_byte()
/// @see: gpib.h _FLAGS defines for a full list)
int gpib_write_str(uint8_t *buf, int size, uint16_t *status)
{
   1137a:	a7 e0       	ldi	r26, 0x07	; 7
   1137c:	b0 e0       	ldi	r27, 0x00	; 0
   1137e:	e3 ec       	ldi	r30, 0xC3	; 195
   11380:	f9 e8       	ldi	r31, 0x89	; 137
   11382:	0c 94 11 e3 	jmp	0x1c622	; 0x1c622 <__prologue_saves__+0x10>
   11386:	d8 2f       	mov	r29, r24
   11388:	c9 2f       	mov	r28, r25
   1138a:	7b 01       	movw	r14, r22
   1138c:	8a 01       	movw	r16, r20
    uint16_t val, ch;
    int ind = 0;

    *status &= STATUS_MASK;
   1138e:	fa 01       	movw	r30, r20
   11390:	80 81       	ld	r24, Z
   11392:	91 81       	ldd	r25, Z+1	; 0x01
   11394:	88 27       	eor	r24, r24
   11396:	91 83       	std	Z+1, r25	; 0x01
   11398:	80 83       	st	Z, r24

    if(!size)
   1139a:	67 2b       	or	r22, r23
   1139c:	91 f4       	brne	.+36     	; 0x113c2 <gpib_write_str+0x48>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   1139e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   113a2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   113a6:	81 72       	andi	r24, 0x21	; 33
   113a8:	91 70       	andi	r25, 0x01	; 1
   113aa:	89 2b       	or	r24, r25
   113ac:	51 f0       	breq	.+20     	; 0x113c2 <gpib_write_str+0x48>
            printf("gpib_write_str: size = 0\n");
   113ae:	83 eb       	ldi	r24, 0xB3	; 179
   113b0:	9f e0       	ldi	r25, 0x0F	; 15
   113b2:	a0 e0       	ldi	r26, 0x00	; 0
   113b4:	ed b7       	in	r30, 0x3d	; 61
   113b6:	fe b7       	in	r31, 0x3e	; 62
   113b8:	81 83       	std	Z+1, r24	; 0x01
   113ba:	92 83       	std	Z+2, r25	; 0x02
   113bc:	a3 83       	std	Z+3, r26	; 0x03
   113be:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    }

	// Start with NRFD and NDAC = 1 - ie off the OC BUS
	gpib_rx_init(0);
   113c2:	80 e0       	ldi	r24, 0x00	; 0
   113c4:	4d da       	rcall	.-2918   	; 0x10860 <gpib_rx_init>

// Wait until ATN is released!
#if 1
    if (GPIB_PIN_TST(ATN) == 0)
   113c6:	4e 9b       	sbis	0x09, 6	; 9
   113c8:	06 c0       	rjmp	.+12     	; 0x113d6 <gpib_write_str+0x5c>
#endif

// Wait until DAV is released!
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
   113ca:	64 ef       	ldi	r22, 0xF4	; 244
   113cc:	71 e0       	ldi	r23, 0x01	; 1
   113ce:	80 e0       	ldi	r24, 0x00	; 0
   113d0:	90 e0       	ldi	r25, 0x00	; 0
   113d2:	04 da       	rcall	.-3064   	; 0x107dc <gpib_timeout_set>
	while ( GPIB_PIN_TST(DAV) == 0)
   113d4:	18 c0       	rjmp	.+48     	; 0x11406 <gpib_write_str+0x8c>
#endif
		// Wait for ATN free
		// Keep in mind that we have been addressed to talk already
		// So waiting is ok - they won't be expecting a reply until
		// They are ready
		gpib_timeout_set(HTIMEOUT);
   113d6:	64 ef       	ldi	r22, 0xF4	; 244
   113d8:	71 e0       	ldi	r23, 0x01	; 1
   113da:	80 e0       	ldi	r24, 0x00	; 0
   113dc:	90 e0       	ldi	r25, 0x00	; 0
   113de:	fe d9       	rcall	.-3076   	; 0x107dc <gpib_timeout_set>
		while(GPIB_PIN_TST(ATN) == 0)
   113e0:	4e 99       	sbic	0x09, 6	; 9
   113e2:	f3 cf       	rjmp	.-26     	; 0x113ca <gpib_write_str+0x50>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   113e4:	80 91 f3 1c 	lds	r24, 0x1CF3	; 0x801cf3 <gpib_timer+0x8>
		// So waiting is ok - they won't be expecting a reply until
		// They are ready
		gpib_timeout_set(HTIMEOUT);
		while(GPIB_PIN_TST(ATN) == 0)
		{
			if(gpib_timeout_test())
   113e8:	88 23       	and	r24, r24
			{
				gpib_rx_init(1);
   113ea:	d1 f3       	breq	.-12     	; 0x113e0 <gpib_write_str+0x66>
   113ec:	81 e0       	ldi	r24, 0x01	; 1
   113ee:	38 da       	rcall	.-2960   	; 0x10860 <gpib_rx_init>
				if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   113f0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   113f4:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   113f8:	85 70       	andi	r24, 0x05	; 5
   113fa:	99 27       	eor	r25, r25
   113fc:	89 2b       	or	r24, r25
   113fe:	d9 f0       	breq	.+54     	; 0x11436 <gpib_write_str+0xbc>
					printf("<gpib_write_str timeout waiting for ATN = 1>\n");
   11400:	85 e8       	ldi	r24, 0x85	; 133
   11402:	9f e0       	ldi	r25, 0x0F	; 15
   11404:	10 c0       	rjmp	.+32     	; 0x11426 <gpib_write_str+0xac>

// Wait until DAV is released!
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
	while ( GPIB_PIN_TST(DAV) == 0)
   11406:	19 99       	sbic	0x03, 1	; 3
   11408:	1f c0       	rjmp	.+62     	; 0x11448 <gpib_write_str+0xce>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   1140a:	80 91 f3 1c 	lds	r24, 0x1CF3	; 0x801cf3 <gpib_timer+0x8>
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
	while ( GPIB_PIN_TST(DAV) == 0)
	{
		if(gpib_timeout_test())
   1140e:	88 23       	and	r24, r24
   11410:	d1 f3       	breq	.-12     	; 0x11406 <gpib_write_str+0x8c>
		{
			if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   11412:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11416:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1141a:	85 70       	andi	r24, 0x05	; 5
   1141c:	99 27       	eor	r25, r25
   1141e:	89 2b       	or	r24, r25
   11420:	51 f0       	breq	.+20     	; 0x11436 <gpib_write_str+0xbc>
				printf("<BUS waiting for DAV==1>\n");
   11422:	8b e6       	ldi	r24, 0x6B	; 107
   11424:	9f e0       	ldi	r25, 0x0F	; 15
   11426:	a0 e0       	ldi	r26, 0x00	; 0
   11428:	ed b7       	in	r30, 0x3d	; 61
   1142a:	fe b7       	in	r31, 0x3e	; 62
   1142c:	81 83       	std	Z+1, r24	; 0x01
   1142e:	92 83       	std	Z+2, r25	; 0x02
   11430:	a3 83       	std	Z+3, r26	; 0x03
   11432:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
			*status |= (TIMEOUT_FLAG | BUS_ERROR_FLAG);
   11436:	f8 01       	movw	r30, r16
   11438:	80 81       	ld	r24, Z
   1143a:	91 81       	ldd	r25, Z+1	; 0x01
   1143c:	90 6c       	ori	r25, 0xC0	; 192
   1143e:	91 83       	std	Z+1, r25	; 0x01
   11440:	80 83       	st	Z, r24
			return(ind);
   11442:	c0 e0       	ldi	r28, 0x00	; 0
   11444:	d0 e0       	ldi	r29, 0x00	; 0
   11446:	45 c0       	rjmp	.+138    	; 0x114d2 <gpib_write_str+0x158>
   11448:	cd 2e       	mov	r12, r29
   1144a:	dc 2e       	mov	r13, r28

// Wait until DAV is released!
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
	while ( GPIB_PIN_TST(DAV) == 0)
   1144c:	c0 e0       	ldi	r28, 0x00	; 0
   1144e:	d0 e0       	ldi	r29, 0x00	; 0
			return(ind);
		}
	}
#endif

    while(ind < size)
   11450:	ce 15       	cp	r28, r14
   11452:	df 05       	cpc	r29, r15
   11454:	1c f5       	brge	.+70     	; 0x1149c <gpib_write_str+0x122>
    {
        ch = buf[ind++] & 0xff;                   // unsigned
   11456:	21 96       	adiw	r28, 0x01	; 1
   11458:	f6 01       	movw	r30, r12
   1145a:	81 91       	ld	r24, Z+
   1145c:	6f 01       	movw	r12, r30
   1145e:	90 e0       	ldi	r25, 0x00	; 0

        if( (*status & EOI_FLAG) && (ind == size ) )
   11460:	f8 01       	movw	r30, r16
   11462:	20 81       	ld	r18, Z
   11464:	31 81       	ldd	r19, Z+1	; 0x01
   11466:	30 ff       	sbrs	r19, 0
   11468:	04 c0       	rjmp	.+8      	; 0x11472 <gpib_write_str+0xf8>
   1146a:	ec 16       	cp	r14, r28
   1146c:	fd 06       	cpc	r15, r29
            ch |= EOI_FLAG;
   1146e:	09 f4       	brne	.+2      	; 0x11472 <gpib_write_str+0xf8>

/// @return Returns

        val = gpib_write_byte(ch);
   11470:	91 60       	ori	r25, 0x01	; 1
   11472:	0b db       	rcall	.-2538   	; 0x10a8a <gpib_write_byte>
        *status |= (val & ERROR_MASK);
   11474:	5c 01       	movw	r10, r24
   11476:	aa 24       	eor	r10, r10
   11478:	f0 ed       	ldi	r31, 0xD0	; 208
   1147a:	bf 22       	and	r11, r31
   1147c:	f8 01       	movw	r30, r16
   1147e:	20 81       	ld	r18, Z
   11480:	31 81       	ldd	r19, Z+1	; 0x01
   11482:	2a 29       	or	r18, r10
   11484:	3b 29       	or	r19, r11
   11486:	31 83       	std	Z+1, r19	; 0x01
   11488:	20 83       	st	Z, r18

#if SDEBUG
        if(debuglevel & GPIB_RW_STR_BUS_DECODE)
   1148a:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1148e:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
            gpib_decode(val);
   11492:	30 fd       	sbrc	r19, 0
#endif
        if(val & ERROR_MASK)
   11494:	cc de       	rcall	.-616    	; 0x1122e <gpib_decode>
   11496:	a1 14       	cp	r10, r1
   11498:	b1 04       	cpc	r11, r1

    }                                             // while(ind < size)

// End by setting receive mode and set NRFD and NDAC busy until
// we get back to the main loop (this happens very quickly
	gpib_rx_init(1);	// BUSY
   1149a:	d1 f2       	breq	.-76     	; 0x11450 <gpib_write_str+0xd6>
   1149c:	81 e0       	ldi	r24, 0x01	; 1
   1149e:	e0 d9       	rcall	.-3136   	; 0x10860 <gpib_rx_init>

    if ( ind != size )
   114a0:	ce 15       	cp	r28, r14
   114a2:	df 05       	cpc	r29, r15
   114a4:	b1 f0       	breq	.+44     	; 0x114d2 <gpib_write_str+0x158>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   114a6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   114aa:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   114ae:	81 72       	andi	r24, 0x21	; 33
   114b0:	91 70       	andi	r25, 0x01	; 1
   114b2:	89 2b       	or	r24, r25
   114b4:	71 f0       	breq	.+28     	; 0x114d2 <gpib_write_str+0x158>
            printf("[gpib_write_str sent(%d) expected(%d)]\n", ind,size);
   114b6:	ed b7       	in	r30, 0x3d	; 61
   114b8:	fe b7       	in	r31, 0x3e	; 62
   114ba:	f7 82       	std	Z+7, r15	; 0x07
   114bc:	e6 82       	std	Z+6, r14	; 0x06
   114be:	d5 83       	std	Z+5, r29	; 0x05
   114c0:	c4 83       	std	Z+4, r28	; 0x04
   114c2:	83 e4       	ldi	r24, 0x43	; 67
   114c4:	9f e0       	ldi	r25, 0x0F	; 15
   114c6:	a0 e0       	ldi	r26, 0x00	; 0
   114c8:	81 83       	std	Z+1, r24	; 0x01
   114ca:	92 83       	std	Z+2, r25	; 0x02
   114cc:	a3 83       	std	Z+3, r26	; 0x03
   114ce:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    }
    return(ind);
}
   114d2:	ce 01       	movw	r24, r28
   114d4:	cd b7       	in	r28, 0x3d	; 61
   114d6:	de b7       	in	r29, 0x3e	; 62
   114d8:	27 96       	adiw	r28, 0x07	; 7
   114da:	ea e0       	ldi	r30, 0x0A	; 10
   114dc:	0c 94 2d e3 	jmp	0x1c65a	; 0x1c65a <__epilogue_restores__+0x10>

000114e0 <gpib_file_init>:
{
    int index = find_device(PRINTER_TYPE, address, BASE_MSA);
    if(index == -1)
        return(0);
    return(set_active_device(index));
}
   114e0:	ad b7       	in	r26, 0x3d	; 61
   114e2:	be b7       	in	r27, 0x3e	; 62
   114e4:	17 97       	sbiw	r26, 0x07	; 7
   114e6:	0f b6       	in	r0, 0x3f	; 63
   114e8:	f8 94       	cli
   114ea:	be bf       	out	0x3e, r27	; 62
   114ec:	0f be       	out	0x3f, r0	; 63
   114ee:	ad bf       	out	0x3d, r26	; 61
   114f0:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <debuglevel+0x1>
   114f4:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <debuglevel>
   114f8:	88 eb       	ldi	r24, 0xB8	; 184
   114fa:	91 e0       	ldi	r25, 0x01	; 1
   114fc:	0e 94 70 99 	call	0x132e0	; 0x132e0 <Read_Config>
   11500:	18 16       	cp	r1, r24
   11502:	19 06       	cpc	r1, r25
   11504:	8c f4       	brge	.+34     	; 0x11528 <gpib_file_init+0x48>
   11506:	ed b7       	in	r30, 0x3d	; 61
   11508:	fe b7       	in	r31, 0x3e	; 62
   1150a:	97 83       	std	Z+7, r25	; 0x07
   1150c:	86 83       	std	Z+6, r24	; 0x06
   1150e:	88 eb       	ldi	r24, 0xB8	; 184
   11510:	91 e0       	ldi	r25, 0x01	; 1
   11512:	95 83       	std	Z+5, r25	; 0x05
   11514:	84 83       	std	Z+4, r24	; 0x04
   11516:	87 e1       	ldi	r24, 0x17	; 23
   11518:	95 e1       	ldi	r25, 0x15	; 21
   1151a:	a0 e0       	ldi	r26, 0x00	; 0
   1151c:	81 83       	std	Z+1, r24	; 0x01
   1151e:	92 83       	std	Z+2, r25	; 0x02
   11520:	a3 83       	std	Z+3, r26	; 0x03
   11522:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   11526:	10 c0       	rjmp	.+32     	; 0x11548 <gpib_file_init+0x68>
   11528:	89 2b       	or	r24, r25
   1152a:	71 f0       	breq	.+28     	; 0x11548 <gpib_file_init+0x68>
   1152c:	88 eb       	ldi	r24, 0xB8	; 184
   1152e:	91 e0       	ldi	r25, 0x01	; 1
   11530:	ed b7       	in	r30, 0x3d	; 61
   11532:	fe b7       	in	r31, 0x3e	; 62
   11534:	95 83       	std	Z+5, r25	; 0x05
   11536:	84 83       	std	Z+4, r24	; 0x04
   11538:	86 e0       	ldi	r24, 0x06	; 6
   1153a:	95 e1       	ldi	r25, 0x15	; 21
   1153c:	a0 e0       	ldi	r26, 0x00	; 0
   1153e:	81 83       	std	Z+1, r24	; 0x01
   11540:	92 83       	std	Z+2, r25	; 0x02
   11542:	a3 83       	std	Z+3, r26	; 0x03
   11544:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   11548:	0e 94 3b 98 	call	0x13076	; 0x13076 <set_Config_Defaults>
   1154c:	0e 94 32 6e 	call	0xdc64	; 0xdc64 <mmc_wp_status>
   11550:	89 2b       	or	r24, r25
   11552:	51 f0       	breq	.+20     	; 0x11568 <gpib_file_init+0x88>
   11554:	8d ee       	ldi	r24, 0xED	; 237
   11556:	94 e1       	ldi	r25, 0x14	; 20
   11558:	a0 e0       	ldi	r26, 0x00	; 0
   1155a:	ed b7       	in	r30, 0x3d	; 61
   1155c:	fe b7       	in	r31, 0x3e	; 62
   1155e:	81 83       	std	Z+1, r24	; 0x01
   11560:	92 83       	std	Z+2, r25	; 0x02
   11562:	a3 83       	std	Z+3, r26	; 0x03
   11564:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   11568:	ad b7       	in	r26, 0x3d	; 61
   1156a:	be b7       	in	r27, 0x3e	; 62
   1156c:	17 96       	adiw	r26, 0x07	; 7
   1156e:	0f b6       	in	r0, 0x3f	; 63
   11570:	f8 94       	cli
   11572:	be bf       	out	0x3e, r27	; 62
   11574:	0f be       	out	0x3f, r0	; 63
   11576:	ad bf       	out	0x3d, r26	; 61
   11578:	08 95       	ret

0001157a <SS80_is_MLA>:
   1157a:	40 e2       	ldi	r20, 0x20	; 32
   1157c:	50 e0       	ldi	r21, 0x00	; 0
   1157e:	bc 01       	movw	r22, r24
   11580:	83 e0       	ldi	r24, 0x03	; 3
   11582:	90 e0       	ldi	r25, 0x00	; 0
   11584:	0e 94 a1 95 	call	0x12b42	; 0x12b42 <find_device>
   11588:	8f 3f       	cpi	r24, 0xFF	; 255
   1158a:	2f ef       	ldi	r18, 0xFF	; 255
   1158c:	92 07       	cpc	r25, r18
   1158e:	19 f0       	breq	.+6      	; 0x11596 <SS80_is_MLA+0x1c>
   11590:	0c 94 cb 95 	jmp	0x12b96	; 0x12b96 <set_active_device>
   11594:	08 95       	ret
   11596:	80 e0       	ldi	r24, 0x00	; 0
   11598:	90 e0       	ldi	r25, 0x00	; 0
   1159a:	08 95       	ret

0001159c <SS80_is_MTA>:
   1159c:	40 e4       	ldi	r20, 0x40	; 64
   1159e:	50 e0       	ldi	r21, 0x00	; 0
   115a0:	bc 01       	movw	r22, r24
   115a2:	83 e0       	ldi	r24, 0x03	; 3
   115a4:	90 e0       	ldi	r25, 0x00	; 0
   115a6:	0e 94 a1 95 	call	0x12b42	; 0x12b42 <find_device>
   115aa:	8f 3f       	cpi	r24, 0xFF	; 255
   115ac:	2f ef       	ldi	r18, 0xFF	; 255
   115ae:	92 07       	cpc	r25, r18
   115b0:	19 f0       	breq	.+6      	; 0x115b8 <SS80_is_MTA+0x1c>
   115b2:	0c 94 cb 95 	jmp	0x12b96	; 0x12b96 <set_active_device>
   115b6:	08 95       	ret
   115b8:	80 e0       	ldi	r24, 0x00	; 0
   115ba:	90 e0       	ldi	r25, 0x00	; 0
   115bc:	08 95       	ret

000115be <SS80_is_MSA>:
   115be:	40 e6       	ldi	r20, 0x60	; 96
   115c0:	50 e0       	ldi	r21, 0x00	; 0
   115c2:	bc 01       	movw	r22, r24
   115c4:	83 e0       	ldi	r24, 0x03	; 3
   115c6:	90 e0       	ldi	r25, 0x00	; 0
   115c8:	0e 94 a1 95 	call	0x12b42	; 0x12b42 <find_device>
   115cc:	8f 3f       	cpi	r24, 0xFF	; 255
   115ce:	2f ef       	ldi	r18, 0xFF	; 255
   115d0:	92 07       	cpc	r25, r18
   115d2:	19 f0       	breq	.+6      	; 0x115da <SS80_is_MSA+0x1c>
   115d4:	0c 94 cb 95 	jmp	0x12b96	; 0x12b96 <set_active_device>
   115d8:	08 95       	ret
   115da:	80 e0       	ldi	r24, 0x00	; 0
   115dc:	90 e0       	ldi	r25, 0x00	; 0
   115de:	08 95       	ret

000115e0 <AMIGO_is_MLA>:
   115e0:	40 e2       	ldi	r20, 0x20	; 32
   115e2:	50 e0       	ldi	r21, 0x00	; 0
   115e4:	bc 01       	movw	r22, r24
   115e6:	81 e0       	ldi	r24, 0x01	; 1
   115e8:	90 e0       	ldi	r25, 0x00	; 0
   115ea:	0e 94 a1 95 	call	0x12b42	; 0x12b42 <find_device>
   115ee:	8f 3f       	cpi	r24, 0xFF	; 255
   115f0:	2f ef       	ldi	r18, 0xFF	; 255
   115f2:	92 07       	cpc	r25, r18
   115f4:	19 f0       	breq	.+6      	; 0x115fc <AMIGO_is_MLA+0x1c>
   115f6:	0c 94 cb 95 	jmp	0x12b96	; 0x12b96 <set_active_device>
   115fa:	08 95       	ret
   115fc:	80 e0       	ldi	r24, 0x00	; 0
   115fe:	90 e0       	ldi	r25, 0x00	; 0
   11600:	08 95       	ret

00011602 <AMIGO_is_MTA>:
   11602:	40 e4       	ldi	r20, 0x40	; 64
   11604:	50 e0       	ldi	r21, 0x00	; 0
   11606:	bc 01       	movw	r22, r24
   11608:	81 e0       	ldi	r24, 0x01	; 1
   1160a:	90 e0       	ldi	r25, 0x00	; 0
   1160c:	0e 94 a1 95 	call	0x12b42	; 0x12b42 <find_device>
   11610:	8f 3f       	cpi	r24, 0xFF	; 255
   11612:	2f ef       	ldi	r18, 0xFF	; 255
   11614:	92 07       	cpc	r25, r18
   11616:	19 f0       	breq	.+6      	; 0x1161e <AMIGO_is_MTA+0x1c>
   11618:	0c 94 cb 95 	jmp	0x12b96	; 0x12b96 <set_active_device>
   1161c:	08 95       	ret
   1161e:	80 e0       	ldi	r24, 0x00	; 0
   11620:	90 e0       	ldi	r25, 0x00	; 0
   11622:	08 95       	ret

00011624 <AMIGO_is_MSA>:
   11624:	40 e6       	ldi	r20, 0x60	; 96
   11626:	50 e0       	ldi	r21, 0x00	; 0
   11628:	bc 01       	movw	r22, r24
   1162a:	81 e0       	ldi	r24, 0x01	; 1
   1162c:	90 e0       	ldi	r25, 0x00	; 0
   1162e:	0e 94 a1 95 	call	0x12b42	; 0x12b42 <find_device>
   11632:	8f 3f       	cpi	r24, 0xFF	; 255
   11634:	2f ef       	ldi	r18, 0xFF	; 255
   11636:	92 07       	cpc	r25, r18
   11638:	19 f0       	breq	.+6      	; 0x11640 <AMIGO_is_MSA+0x1c>
   1163a:	0c 94 cb 95 	jmp	0x12b96	; 0x12b96 <set_active_device>
   1163e:	08 95       	ret
   11640:	80 e0       	ldi	r24, 0x00	; 0
   11642:	90 e0       	ldi	r25, 0x00	; 0
   11644:	08 95       	ret

00011646 <PRINTER_is_MLA>:
   11646:	40 e2       	ldi	r20, 0x20	; 32
   11648:	50 e0       	ldi	r21, 0x00	; 0
   1164a:	bc 01       	movw	r22, r24
   1164c:	84 e0       	ldi	r24, 0x04	; 4
   1164e:	90 e0       	ldi	r25, 0x00	; 0
   11650:	0e 94 a1 95 	call	0x12b42	; 0x12b42 <find_device>
   11654:	8f 3f       	cpi	r24, 0xFF	; 255
   11656:	2f ef       	ldi	r18, 0xFF	; 255
   11658:	92 07       	cpc	r25, r18
   1165a:	19 f0       	breq	.+6      	; 0x11662 <PRINTER_is_MLA+0x1c>
   1165c:	0c 94 cb 95 	jmp	0x12b96	; 0x12b96 <set_active_device>
   11660:	08 95       	ret
   11662:	80 e0       	ldi	r24, 0x00	; 0
   11664:	90 e0       	ldi	r25, 0x00	; 0
   11666:	08 95       	ret

00011668 <PRINTER_is_MTA>:
   11668:	40 e4       	ldi	r20, 0x40	; 64
   1166a:	50 e0       	ldi	r21, 0x00	; 0
   1166c:	bc 01       	movw	r22, r24
   1166e:	84 e0       	ldi	r24, 0x04	; 4
   11670:	90 e0       	ldi	r25, 0x00	; 0
   11672:	0e 94 a1 95 	call	0x12b42	; 0x12b42 <find_device>
   11676:	8f 3f       	cpi	r24, 0xFF	; 255
   11678:	2f ef       	ldi	r18, 0xFF	; 255
   1167a:	92 07       	cpc	r25, r18
   1167c:	19 f0       	breq	.+6      	; 0x11684 <PRINTER_is_MTA+0x1c>
   1167e:	0c 94 cb 95 	jmp	0x12b96	; 0x12b96 <set_active_device>
   11682:	08 95       	ret
   11684:	80 e0       	ldi	r24, 0x00	; 0
   11686:	90 e0       	ldi	r25, 0x00	; 0
   11688:	08 95       	ret

0001168a <gpib_init_devices>:
///
/// - Used at power up, Bus IFC or user aborts
/// @return  void
void gpib_init_devices(void)
{
    gpib_bus_init();                              // Not busy - we have to free all pins on the BUS
   1168a:	b2 d8       	rcall	.-3740   	; 0x107f0 <gpib_bus_init>

// Init PPR talking and listening states
// Enable this 14 April 2020 - testing MIke Gore
    gpib_state_init();
   1168c:	19 d9       	rcall	.-3534   	; 0x108c0 <gpib_state_init>
   1168e:	0e 94 52 aa 	call	0x154a4	; 0x154a4 <SS80_init>

    SS80_init();                                  // SS80 state init
   11692:	0e 94 e1 af 	call	0x15fc2	; 0x15fc2 <amigo_init>

#ifdef AMIGO
    amigo_init();                                 // AMIGO state init
   11696:	0c 94 12 bb 	jmp	0x17624	; 0x17624 <printer_close>
#endif

    printer_close();                              // Close any open fprinter files
   1169a:	08 95       	ret

0001169c <gpib_trace_task>:
   1169c:	0f 93       	push	r16
/// @param name: File name to save log file to.
/// @return  void
///   Exit on Key Press

void gpib_trace_task( char *name , int detail)
{
   1169e:	1f 93       	push	r17
   116a0:	cf 93       	push	r28
   116a2:	df 93       	push	r29
   116a4:	00 d0       	rcall	.+0      	; 0x116a6 <gpib_trace_task+0xa>
   116a6:	00 d0       	rcall	.+0      	; 0x116a8 <gpib_trace_task+0xc>
   116a8:	1f 92       	push	r1
   116aa:	eb 01       	movw	r28, r22
    int ch;

    if(name && *name)
   116ac:	00 97       	sbiw	r24, 0x00	; 0
   116ae:	09 f4       	brne	.+2      	; 0x116b2 <gpib_trace_task+0x16>
   116b0:	44 c0       	rjmp	.+136    	; 0x1173a <gpib_trace_task+0x9e>
   116b2:	fc 01       	movw	r30, r24
   116b4:	20 81       	ld	r18, Z
   116b6:	22 23       	and	r18, r18
   116b8:	09 f4       	brne	.+2      	; 0x116bc <gpib_trace_task+0x20>
   116ba:	3f c0       	rjmp	.+126    	; 0x1173a <gpib_trace_task+0x9e>
    {
        name = skipspaces(name);
   116bc:	0e 94 81 30 	call	0x6102	; 0x6102 <skipspaces>
   116c0:	8c 01       	movw	r16, r24
        printf("Capturing GPIB BUS to:%s\n", name);
   116c2:	ed b7       	in	r30, 0x3d	; 61
   116c4:	fe b7       	in	r31, 0x3e	; 62
   116c6:	95 83       	std	Z+5, r25	; 0x05
   116c8:	84 83       	std	Z+4, r24	; 0x04
   116ca:	83 ed       	ldi	r24, 0xD3	; 211
   116cc:	94 e1       	ldi	r25, 0x14	; 20
   116ce:	a0 e0       	ldi	r26, 0x00	; 0
   116d0:	81 83       	std	Z+1, r24	; 0x01
   116d2:	92 83       	std	Z+2, r25	; 0x02
   116d4:	a3 83       	std	Z+3, r26	; 0x03
   116d6:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
        if(detail)
   116da:	20 97       	sbiw	r28, 0x00	; 0
   116dc:	51 f0       	breq	.+20     	; 0x116f2 <gpib_trace_task+0x56>
            printf("FULL GPIB BUS handshake logging requested\n");
   116de:	88 ea       	ldi	r24, 0xA8	; 168
   116e0:	94 e1       	ldi	r25, 0x14	; 20
   116e2:	a0 e0       	ldi	r26, 0x00	; 0
   116e4:	ed b7       	in	r30, 0x3d	; 61
   116e6:	fe b7       	in	r31, 0x3e	; 62
   116e8:	81 83       	std	Z+1, r24	; 0x01
   116ea:	92 83       	std	Z+2, r25	; 0x02
   116ec:	a3 83       	std	Z+3, r26	; 0x03
   116ee:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
        printf("Press ANY key to exit\n");
   116f2:	81 e9       	ldi	r24, 0x91	; 145
   116f4:	94 e1       	ldi	r25, 0x14	; 20
   116f6:	a0 e0       	ldi	r26, 0x00	; 0
   116f8:	ed b7       	in	r30, 0x3d	; 61
   116fa:	fe b7       	in	r31, 0x3e	; 62
   116fc:	81 83       	std	Z+1, r24	; 0x01
   116fe:	92 83       	std	Z+2, r25	; 0x02
   11700:	a3 83       	std	Z+3, r26	; 0x03
   11702:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>

        gpib_log_fp = fopen(name,"wb");
   11706:	6c e0       	ldi	r22, 0x0C	; 12
   11708:	79 e0       	ldi	r23, 0x09	; 9
   1170a:	c8 01       	movw	r24, r16
   1170c:	0e 94 8b 7c 	call	0xf916	; 0xf916 <fopen>
   11710:	90 93 6d 19 	sts	0x196D, r25	; 0x80196d <gpib_log_fp+0x1>
   11714:	80 93 6c 19 	sts	0x196C, r24	; 0x80196c <gpib_log_fp>
        if(gpib_log_fp == NULL)
   11718:	89 2b       	or	r24, r25
   1171a:	b9 f4       	brne	.+46     	; 0x1174a <gpib_trace_task+0xae>
        {
            perror("open failed");
   1171c:	87 ea       	ldi	r24, 0xA7	; 167
   1171e:	9d e0       	ldi	r25, 0x0D	; 13
   11720:	0e 94 bc 76 	call	0xed78	; 0xed78 <perror>
            printf("exiting...\n");
   11724:	85 e8       	ldi	r24, 0x85	; 133
   11726:	94 e1       	ldi	r25, 0x14	; 20
   11728:	a0 e0       	ldi	r26, 0x00	; 0
   1172a:	ed b7       	in	r30, 0x3d	; 61
   1172c:	fe b7       	in	r31, 0x3e	; 62
   1172e:	81 83       	std	Z+1, r24	; 0x01
   11730:	92 83       	std	Z+2, r25	; 0x02
   11732:	a3 83       	std	Z+3, r26	; 0x03
   11734:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
            return;
   11738:	3d c0       	rjmp	.+122    	; 0x117b4 <gpib_trace_task+0x118>
        }
    }
    else
    {
        gpib_log_fp = stdout;
   1173a:	80 91 cd 1c 	lds	r24, 0x1CCD	; 0x801ccd <__iob+0x2>
   1173e:	90 91 ce 1c 	lds	r25, 0x1CCE	; 0x801cce <__iob+0x3>
   11742:	90 93 6d 19 	sts	0x196D, r25	; 0x80196d <gpib_log_fp+0x1>
   11746:	80 93 6c 19 	sts	0x196C, r24	; 0x80196c <gpib_log_fp>
    }

    // gpib_state_init();                            // Init PPR talking and listening states
	// gpib_state_init is in gpib_init_devices()
    gpib_init_devices();
   1174a:	9f df       	rcall	.-194    	; 0x1168a <gpib_init_devices>

    gpib_decode_header(gpib_log_fp);
   1174c:	80 91 6c 19 	lds	r24, 0x196C	; 0x80196c <gpib_log_fp>
   11750:	90 91 6d 19 	lds	r25, 0x196D	; 0x80196d <gpib_log_fp+0x1>
   11754:	d2 da       	rcall	.-2652   	; 0x10cfa <gpib_decode_header>
    while(1)                                      // Main loop, forever
    {
        if(uart_keyhit(0))
   11756:	80 e0       	ldi	r24, 0x00	; 0
   11758:	0e 94 b7 28 	call	0x516e	; 0x516e <uart_keyhit>
   1175c:	89 2b       	or	r24, r25
            break;

        ch = gpib_read_byte(detail);
   1175e:	31 f4       	brne	.+12     	; 0x1176c <gpib_trace_task+0xd0>
   11760:	ce 01       	movw	r24, r28
        if(!detail)
   11762:	5f dc       	rcall	.-1858   	; 0x11022 <gpib_read_byte>
   11764:	20 97       	sbiw	r28, 0x00	; 0
            gpib_decode(ch);
   11766:	b9 f7       	brne	.-18     	; 0x11756 <gpib_trace_task+0xba>
   11768:	62 dd       	rcall	.-1340   	; 0x1122e <gpib_decode>
   1176a:	f5 cf       	rjmp	.-22     	; 0x11756 <gpib_trace_task+0xba>
    }

    printf("Done\n");
   1176c:	8f e7       	ldi	r24, 0x7F	; 127
   1176e:	94 e1       	ldi	r25, 0x14	; 20
   11770:	a0 e0       	ldi	r26, 0x00	; 0
   11772:	ed b7       	in	r30, 0x3d	; 61
   11774:	fe b7       	in	r31, 0x3e	; 62
   11776:	81 83       	std	Z+1, r24	; 0x01
   11778:	92 83       	std	Z+2, r25	; 0x02
   1177a:	a3 83       	std	Z+3, r26	; 0x03
   1177c:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    if(gpib_log_fp)
   11780:	80 91 6c 19 	lds	r24, 0x196C	; 0x80196c <gpib_log_fp>
   11784:	90 91 6d 19 	lds	r25, 0x196D	; 0x80196d <gpib_log_fp+0x1>
   11788:	00 97       	sbiw	r24, 0x00	; 0
   1178a:	a1 f0       	breq	.+40     	; 0x117b4 <gpib_trace_task+0x118>
    {
        fclose(gpib_log_fp);
   1178c:	0e 94 35 7b 	call	0xf66a	; 0xf66a <fclose>
        printf("Capturing Closed\n");
   11790:	8d e6       	ldi	r24, 0x6D	; 109
   11792:	94 e1       	ldi	r25, 0x14	; 20
   11794:	a0 e0       	ldi	r26, 0x00	; 0
   11796:	ed b7       	in	r30, 0x3d	; 61
   11798:	fe b7       	in	r31, 0x3e	; 62
   1179a:	81 83       	std	Z+1, r24	; 0x01
   1179c:	92 83       	std	Z+2, r25	; 0x02
   1179e:	a3 83       	std	Z+3, r26	; 0x03
   117a0:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
        gpib_log_fp = stdout;
   117a4:	80 91 cd 1c 	lds	r24, 0x1CCD	; 0x801ccd <__iob+0x2>
   117a8:	90 91 ce 1c 	lds	r25, 0x1CCE	; 0x801cce <__iob+0x3>
   117ac:	90 93 6d 19 	sts	0x196D, r25	; 0x80196d <gpib_log_fp+0x1>
   117b0:	80 93 6c 19 	sts	0x196C, r24	; 0x80196c <gpib_log_fp>
    }
}
   117b4:	cd b7       	in	r28, 0x3d	; 61
   117b6:	de b7       	in	r29, 0x3e	; 62
   117b8:	25 96       	adiw	r28, 0x05	; 5
   117ba:	e4 e0       	ldi	r30, 0x04	; 4
   117bc:	0c 94 33 e3 	jmp	0x1c666	; 0x1c666 <__epilogue_restores__+0x1c>

000117c0 <gpib_error_test>:
///
/// @return  val
/// @return ABORT flag on user keypress

uint16_t gpib_error_test(uint16_t val)
{
   117c0:	ef 92       	push	r14
   117c2:	ff 92       	push	r15
   117c4:	0f 93       	push	r16
   117c6:	1f 93       	push	r17
   117c8:	cf 93       	push	r28
   117ca:	df 93       	push	r29
   117cc:	00 d0       	rcall	.+0      	; 0x117ce <gpib_error_test+0xe>
   117ce:	1f 92       	push	r1
   117d0:	7c 01       	movw	r14, r24

    if(val & ERROR_MASK || uart_keyhit(0) || mmc_ins_status() != 1 )
   117d2:	ec 01       	movw	r28, r24
   117d4:	cc 27       	eor	r28, r28
   117d6:	d0 7d       	andi	r29, 0xD0	; 208
   117d8:	20 97       	sbiw	r28, 0x00	; 0
   117da:	61 f0       	breq	.+24     	; 0x117f4 <gpib_error_test+0x34>
    {
        val &= ERROR_MASK;

///@brief IFC is and important state so display it for most messages
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
   117dc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   117e0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   117e4:	8d 72       	andi	r24, 0x2D	; 45
   117e6:	99 27       	eor	r25, r25
   117e8:	87 01       	movw	r16, r14
   117ea:	00 27       	eor	r16, r16
   117ec:	10 71       	andi	r17, 0x10	; 16
   117ee:	89 2b       	or	r24, r25
   117f0:	59 f4       	brne	.+22     	; 0x11808 <gpib_error_test+0x48>
   117f2:	17 c0       	rjmp	.+46     	; 0x11822 <gpib_error_test+0x62>
/// @return ABORT flag on user keypress

uint16_t gpib_error_test(uint16_t val)
{

    if(val & ERROR_MASK || uart_keyhit(0) || mmc_ins_status() != 1 )
   117f4:	80 e0       	ldi	r24, 0x00	; 0
   117f6:	0e 94 b7 28 	call	0x516e	; 0x516e <uart_keyhit>
   117fa:	89 2b       	or	r24, r25
   117fc:	79 f7       	brne	.-34     	; 0x117dc <gpib_error_test+0x1c>
   117fe:	0e 94 40 6d 	call	0xda80	; 0xda80 <mmc_ins_status>
   11802:	01 97       	sbiw	r24, 0x01	; 1
   11804:	59 f7       	brne	.-42     	; 0x117dc <gpib_error_test+0x1c>
   11806:	62 c0       	rjmp	.+196    	; 0x118cc <gpib_error_test+0x10c>

///@brief IFC is and important state so display it for most messages
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
        {
/// Bus Clear, reseat all states, etc
            if(val & IFC_FLAG)
   11808:	01 15       	cp	r16, r1
   1180a:	11 05       	cpc	r17, r1
   1180c:	51 f0       	breq	.+20     	; 0x11822 <gpib_error_test+0x62>
                printf("<IFC>\n");
   1180e:	86 e6       	ldi	r24, 0x66	; 102
   11810:	94 e1       	ldi	r25, 0x14	; 20
   11812:	a0 e0       	ldi	r26, 0x00	; 0
   11814:	ed b7       	in	r30, 0x3d	; 61
   11816:	fe b7       	in	r31, 0x3e	; 62
   11818:	81 83       	std	Z+1, r24	; 0x01
   1181a:	92 83       	std	Z+2, r25	; 0x02
   1181c:	a3 83       	std	Z+3, r26	; 0x03
   1181e:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
        }

        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
   11822:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11826:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1182a:	8d 72       	andi	r24, 0x2D	; 45
   1182c:	99 27       	eor	r25, r25
   1182e:	89 2b       	or	r24, r25
   11830:	c1 f0       	breq	.+48     	; 0x11862 <gpib_error_test+0xa2>
        {
            if(val & TIMEOUT_FLAG)
   11832:	f6 fe       	sbrs	r15, 6
   11834:	0a c0       	rjmp	.+20     	; 0x1184a <gpib_error_test+0x8a>
                printf("<TIMEOUT>\n");
   11836:	8b e5       	ldi	r24, 0x5B	; 91
   11838:	94 e1       	ldi	r25, 0x14	; 20
   1183a:	a0 e0       	ldi	r26, 0x00	; 0
   1183c:	ed b7       	in	r30, 0x3d	; 61
   1183e:	fe b7       	in	r31, 0x3e	; 62
   11840:	81 83       	std	Z+1, r24	; 0x01
   11842:	92 83       	std	Z+2, r25	; 0x02
   11844:	a3 83       	std	Z+3, r26	; 0x03
   11846:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
            if(val & BUS_ERROR_FLAG)
   1184a:	d7 ff       	sbrs	r29, 7
   1184c:	0a c0       	rjmp	.+20     	; 0x11862 <gpib_error_test+0xa2>
                printf("<BUS>\n");
   1184e:	84 e5       	ldi	r24, 0x54	; 84
   11850:	94 e1       	ldi	r25, 0x14	; 20
   11852:	a0 e0       	ldi	r26, 0x00	; 0
   11854:	ed b7       	in	r30, 0x3d	; 61
   11856:	fe b7       	in	r31, 0x3e	; 62
   11858:	81 83       	std	Z+1, r24	; 0x01
   1185a:	92 83       	std	Z+2, r25	; 0x02
   1185c:	a3 83       	std	Z+3, r26	; 0x03
   1185e:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
        }

        if(uart_keyhit(0))
   11862:	80 e0       	ldi	r24, 0x00	; 0
   11864:	0e 94 b7 28 	call	0x516e	; 0x516e <uart_keyhit>
   11868:	89 2b       	or	r24, r25
   1186a:	51 f0       	breq	.+20     	; 0x11880 <gpib_error_test+0xc0>
            printf("<INTERRUPT>\n");
   1186c:	87 e4       	ldi	r24, 0x47	; 71
   1186e:	94 e1       	ldi	r25, 0x14	; 20
   11870:	a0 e0       	ldi	r26, 0x00	; 0
   11872:	ed b7       	in	r30, 0x3d	; 61
   11874:	fe b7       	in	r31, 0x3e	; 62
   11876:	81 83       	std	Z+1, r24	; 0x01
   11878:	92 83       	std	Z+2, r25	; 0x02
   1187a:	a3 83       	std	Z+3, r26	; 0x03
   1187c:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>

        if( mmc_ins_status() != 1 )
   11880:	0e 94 40 6d 	call	0xda80	; 0xda80 <mmc_ins_status>
   11884:	01 97       	sbiw	r24, 0x01	; 1
   11886:	51 f0       	breq	.+20     	; 0x1189c <gpib_error_test+0xdc>
            printf("<MEDIA MISSING>\n");
   11888:	86 e3       	ldi	r24, 0x36	; 54
   1188a:	94 e1       	ldi	r25, 0x14	; 20
   1188c:	a0 e0       	ldi	r26, 0x00	; 0
   1188e:	ed b7       	in	r30, 0x3d	; 61
   11890:	fe b7       	in	r31, 0x3e	; 62
   11892:	81 83       	std	Z+1, r24	; 0x01
   11894:	92 83       	std	Z+2, r25	; 0x02
   11896:	a3 83       	std	Z+3, r26	; 0x03
   11898:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>

        if(val & IFC_FLAG)
   1189c:	01 15       	cp	r16, r1
   1189e:	11 05       	cpc	r17, r1
   118a0:	09 f0       	breq	.+2      	; 0x118a4 <gpib_error_test+0xe4>
        {
            gpib_init_devices();
   118a2:	f3 de       	rcall	.-538    	; 0x1168a <gpib_init_devices>
        }

        if(uart_keyhit(0))
   118a4:	80 e0       	ldi	r24, 0x00	; 0
   118a6:	0e 94 b7 28 	call	0x516e	; 0x516e <uart_keyhit>
   118aa:	89 2b       	or	r24, r25
        {
            gpib_init_devices();
   118ac:	11 f0       	breq	.+4      	; 0x118b2 <gpib_error_test+0xf2>
   118ae:	ed de       	rcall	.-550    	; 0x1168a <gpib_init_devices>
   118b0:	0b c0       	rjmp	.+22     	; 0x118c8 <gpib_error_test+0x108>
            return(ABORT_FLAG);
        }

/// @todo  do we want to always exit here ?
///  low level GPIB functions are still useful even without a DISK
        if( mmc_ins_status() != 1 )
   118b2:	0e 94 40 6d 	call	0xda80	; 0xda80 <mmc_ins_status>
   118b6:	01 97       	sbiw	r24, 0x01	; 1
   118b8:	39 f4       	brne	.+14     	; 0x118c8 <gpib_error_test+0x108>
        {
            return(ABORT_FLAG);
        }

// Wait for IFC free
        if(val & IFC_FLAG )
   118ba:	01 15       	cp	r16, r1
   118bc:	11 05       	cpc	r17, r1
   118be:	31 f0       	breq	.+12     	; 0x118cc <gpib_error_test+0x10c>
        {
            while(GPIB_IO_RD(IFC) == 0)
   118c0:	54 98       	cbi	0x0a, 4	; 10
   118c2:	4c 9b       	sbis	0x09, 4	; 9
   118c4:	fd cf       	rjmp	.-6      	; 0x118c0 <gpib_error_test+0x100>
   118c6:	02 c0       	rjmp	.+4      	; 0x118cc <gpib_error_test+0x10c>

/// @todo  do we want to always exit here ?
///  low level GPIB functions are still useful even without a DISK
        if( mmc_ins_status() != 1 )
        {
            return(ABORT_FLAG);
   118c8:	c1 e0       	ldi	r28, 0x01	; 1
   118ca:	d0 e0       	ldi	r29, 0x00	; 0
                ;
        }
        return(val);
    }
    return(0);
}
   118cc:	ce 01       	movw	r24, r28
   118ce:	cd b7       	in	r28, 0x3d	; 61
   118d0:	de b7       	in	r29, 0x3e	; 62
   118d2:	23 96       	adiw	r28, 0x03	; 3
   118d4:	e6 e0       	ldi	r30, 0x06	; 6
   118d6:	0c 94 31 e3 	jmp	0x1c662	; 0x1c662 <__epilogue_restores__+0x18>

000118da <GPIB_COMMANDS>:
///
/// @return GPIB status from emulator command.
/// @return 0 if no emulator command processed.

uint16_t GPIB_COMMANDS(uint16_t val, uint8_t unread)
{
   118da:	1f 93       	push	r17
   118dc:	cf 93       	push	r28
   118de:	df 93       	push	r29
   118e0:	ec 01       	movw	r28, r24
   118e2:	16 2f       	mov	r17, r22
    uint16_t status;

///@brief talking ?
    if(talking != UNT)
   118e4:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   118e8:	8f 35       	cpi	r24, 0x5F	; 95
   118ea:	91 f0       	breq	.+36     	; 0x11910 <GPIB_COMMANDS+0x36>
    {

#ifdef AMIGO
        if ( AMIGO_is_MLA(listening) )
   118ec:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   118f0:	90 e0       	ldi	r25, 0x00	; 0
   118f2:	76 de       	rcall	.-788    	; 0x115e0 <AMIGO_is_MLA>
   118f4:	89 2b       	or	r24, r25
   118f6:	c9 f4       	brne	.+50     	; 0x1192a <GPIB_COMMANDS+0x50>
            secondary = 0;
            return(status);
        }
#endif                                    // ifdef AMIGO

        if ( SS80_is_MLA(listening) )
   118f8:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   118fc:	90 e0       	ldi	r25, 0x00	; 0
   118fe:	3d de       	rcall	.-902    	; 0x1157a <SS80_is_MLA>
   11900:	89 2b       	or	r24, r25
   11902:	11 f5       	brne	.+68     	; 0x11948 <GPIB_COMMANDS+0x6e>
            status = SS80_COMMANDS(secondary);
            secondary = 0;
            return(status);
        }

        if ( PRINTER_is_MLA(listening) )
   11904:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   11908:	90 e0       	ldi	r25, 0x00	; 0
   1190a:	9d de       	rcall	.-710    	; 0x11646 <PRINTER_is_MLA>
   1190c:	89 2b       	or	r24, r25
   1190e:	59 f5       	brne	.+86     	; 0x11966 <GPIB_COMMANDS+0x8c>
            return(status);
        }
    }

///@brief listening ?
    if(listening != UNL)
   11910:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   11914:	8f 33       	cpi	r24, 0x3F	; 63
   11916:	19 f4       	brne	.+6      	; 0x1191e <GPIB_COMMANDS+0x44>
            status = PRINTER_COMMANDS(secondary);
            secondary = 0;
            return(status);
        }
    }
    return(0);
   11918:	80 e0       	ldi	r24, 0x00	; 0
   1191a:	90 e0       	ldi	r25, 0x00	; 0
   1191c:	2e c0       	rjmp	.+92     	; 0x1197a <GPIB_COMMANDS+0xa0>

///@brief listening ?
    if(listening != UNL)
    {
#ifdef AMIGO
        if ( AMIGO_is_MTA(talking) )
   1191e:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   11922:	90 e0       	ldi	r25, 0x00	; 0
   11924:	6e de       	rcall	.-804    	; 0x11602 <AMIGO_is_MTA>
   11926:	89 2b       	or	r24, r25
   11928:	49 f0       	breq	.+18     	; 0x1193c <GPIB_COMMANDS+0x62>
        {
            if(unread)
   1192a:	11 23       	and	r17, r17
   1192c:	11 f0       	breq	.+4      	; 0x11932 <GPIB_COMMANDS+0x58>
                gpib_unread(val);
   1192e:	ce 01       	movw	r24, r28
   11930:	60 d8       	rcall	.-3904   	; 0x109f2 <gpib_unread>
   11932:	80 91 fb 1e 	lds	r24, 0x1EFB	; 0x801efb <secondary>
            status = AMIGO_COMMANDS(secondary);
   11936:	0e 94 0d ba 	call	0x1741a	; 0x1741a <AMIGO_COMMANDS>
   1193a:	1d c0       	rjmp	.+58     	; 0x11976 <GPIB_COMMANDS+0x9c>
            secondary = 0;
            return(status);
        }
#endif

        if ( SS80_is_MTA(talking) )
   1193c:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   11940:	90 e0       	ldi	r25, 0x00	; 0
   11942:	2c de       	rcall	.-936    	; 0x1159c <SS80_is_MTA>
   11944:	89 2b       	or	r24, r25
   11946:	49 f0       	breq	.+18     	; 0x1195a <GPIB_COMMANDS+0x80>
        {
            if(unread)
   11948:	11 23       	and	r17, r17
   1194a:	11 f0       	breq	.+4      	; 0x11950 <GPIB_COMMANDS+0x76>
                gpib_unread(val);
   1194c:	ce 01       	movw	r24, r28
   1194e:	51 d8       	rcall	.-3934   	; 0x109f2 <gpib_unread>
   11950:	80 91 fb 1e 	lds	r24, 0x1EFB	; 0x801efb <secondary>
            status = SS80_COMMANDS(secondary);
   11954:	0e 94 2d ae 	call	0x15c5a	; 0x15c5a <SS80_COMMANDS>
   11958:	0e c0       	rjmp	.+28     	; 0x11976 <GPIB_COMMANDS+0x9c>
            secondary = 0;
            return(status);
        }

        if ( PRINTER_is_MTA(talking) )
   1195a:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   1195e:	90 e0       	ldi	r25, 0x00	; 0
   11960:	83 de       	rcall	.-762    	; 0x11668 <PRINTER_is_MTA>
   11962:	89 2b       	or	r24, r25
   11964:	c9 f2       	breq	.-78     	; 0x11918 <GPIB_COMMANDS+0x3e>
        {
            if(unread)
   11966:	11 23       	and	r17, r17
   11968:	11 f0       	breq	.+4      	; 0x1196e <GPIB_COMMANDS+0x94>
                gpib_unread(val);
   1196a:	ce 01       	movw	r24, r28
   1196c:	42 d8       	rcall	.-3964   	; 0x109f2 <gpib_unread>
   1196e:	80 91 fb 1e 	lds	r24, 0x1EFB	; 0x801efb <secondary>
            status = PRINTER_COMMANDS(secondary);
   11972:	0e 94 86 bc 	call	0x1790c	; 0x1790c <PRINTER_COMMANDS>
   11976:	10 92 fb 1e 	sts	0x1EFB, r1	; 0x801efb <secondary>
            secondary = 0;
   1197a:	df 91       	pop	r29
            return(status);
        }
    }
    return(0);
}
   1197c:	cf 91       	pop	r28
   1197e:	1f 91       	pop	r17
   11980:	08 95       	ret

00011982 <Send_Identify>:
   11982:	cf 92       	push	r12
///
/// @return  0 on GPIB error returns error flags
/// @see gpib.h ERROR_MASK for a full list.

int Send_Identify(uint8_t ch, uint16_t ID)
{
   11984:	df 92       	push	r13
   11986:	ff 92       	push	r15
   11988:	0f 93       	push	r16
   1198a:	1f 93       	push	r17
   1198c:	cf 93       	push	r28
   1198e:	df 93       	push	r29
   11990:	cd b7       	in	r28, 0x3d	; 61
   11992:	de b7       	in	r29, 0x3e	; 62
   11994:	2b 97       	sbiw	r28, 0x0b	; 11
   11996:	0f b6       	in	r0, 0x3f	; 63
   11998:	f8 94       	cli
   1199a:	de bf       	out	0x3e, r29	; 62
   1199c:	0f be       	out	0x3f, r0	; 63
   1199e:	cd bf       	out	0x3d, r28	; 61
   119a0:	f8 2e       	mov	r15, r24
   119a2:	6b 01       	movw	r12, r22
    uint16_t status = EOI_FLAG;
   119a4:	80 e0       	ldi	r24, 0x00	; 0
   119a6:	91 e0       	ldi	r25, 0x01	; 1
   119a8:	9b 87       	std	Y+11, r25	; 0x0b
   119aa:	8a 87       	std	Y+10, r24	; 0x0a
    uint8_t tmp[2];

    V2B_MSB(tmp,0,2,ID);
   119ac:	8b 01       	movw	r16, r22
   119ae:	20 e0       	ldi	r18, 0x00	; 0
   119b0:	30 e0       	ldi	r19, 0x00	; 0
   119b2:	42 e0       	ldi	r20, 0x02	; 2
   119b4:	50 e0       	ldi	r21, 0x00	; 0
   119b6:	60 e0       	ldi	r22, 0x00	; 0
   119b8:	70 e0       	ldi	r23, 0x00	; 0
   119ba:	ce 01       	movw	r24, r28
   119bc:	08 96       	adiw	r24, 0x08	; 8
   119be:	0e 94 c1 bc 	call	0x17982	; 0x17982 <V2B_MSB>
    if(gpib_write_str(tmp,2, &status) != 2)
   119c2:	ae 01       	movw	r20, r28
   119c4:	46 5f       	subi	r20, 0xF6	; 246
   119c6:	5f 4f       	sbci	r21, 0xFF	; 255
   119c8:	62 e0       	ldi	r22, 0x02	; 2
   119ca:	70 e0       	ldi	r23, 0x00	; 0
   119cc:	ce 01       	movw	r24, r28
   119ce:	08 96       	adiw	r24, 0x08	; 8
   119d0:	d4 dc       	rcall	.-1624   	; 0x1137a <gpib_write_str>
   119d2:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   119d6:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   119da:	02 97       	sbiw	r24, 0x02	; 2
   119dc:	79 f0       	breq	.+30     	; 0x119fc <Send_Identify+0x7a>
    {
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   119de:	25 72       	andi	r18, 0x25	; 37
   119e0:	33 27       	eor	r19, r19
   119e2:	23 2b       	or	r18, r19
   119e4:	f9 f0       	breq	.+62     	; 0x11a24 <Send_Identify+0xa2>
            printf("[IDENT Unit:%02XH=%04XH FAILED]\n",
   119e6:	ed b7       	in	r30, 0x3d	; 61
   119e8:	fe b7       	in	r31, 0x3e	; 62
   119ea:	d7 82       	std	Z+7, r13	; 0x07
   119ec:	c6 82       	std	Z+6, r12	; 0x06
   119ee:	8f 2d       	mov	r24, r15
   119f0:	90 e0       	ldi	r25, 0x00	; 0
   119f2:	95 83       	std	Z+5, r25	; 0x05
   119f4:	84 83       	std	Z+4, r24	; 0x04
   119f6:	85 e1       	ldi	r24, 0x15	; 21
   119f8:	94 e1       	ldi	r25, 0x14	; 20
   119fa:	0e c0       	rjmp	.+28     	; 0x11a18 <Send_Identify+0x96>
                (int)ch,(int)ID);
        return(status & ERROR_MASK);
    }
#if SDEBUG
    if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   119fc:	24 72       	andi	r18, 0x24	; 36
   119fe:	33 27       	eor	r19, r19
   11a00:	23 2b       	or	r18, r19
   11a02:	81 f0       	breq	.+32     	; 0x11a24 <Send_Identify+0xa2>
        printf("[IDENT Unit:%02XH=%04XH]\n", (int)ch,(int)ID);
   11a04:	ed b7       	in	r30, 0x3d	; 61
   11a06:	fe b7       	in	r31, 0x3e	; 62
   11a08:	d7 82       	std	Z+7, r13	; 0x07
   11a0a:	c6 82       	std	Z+6, r12	; 0x06
   11a0c:	8f 2d       	mov	r24, r15
   11a0e:	90 e0       	ldi	r25, 0x00	; 0
   11a10:	95 83       	std	Z+5, r25	; 0x05
   11a12:	84 83       	std	Z+4, r24	; 0x04
   11a14:	8b ef       	ldi	r24, 0xFB	; 251
   11a16:	93 e1       	ldi	r25, 0x13	; 19
   11a18:	a0 e0       	ldi	r26, 0x00	; 0
   11a1a:	81 83       	std	Z+1, r24	; 0x01
   11a1c:	92 83       	std	Z+2, r25	; 0x02
   11a1e:	a3 83       	std	Z+3, r26	; 0x03
   11a20:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
#endif
    return (status & ERROR_MASK);
   11a24:	8a 85       	ldd	r24, Y+10	; 0x0a
   11a26:	9b 85       	ldd	r25, Y+11	; 0x0b
   11a28:	88 27       	eor	r24, r24
   11a2a:	90 7d       	andi	r25, 0xD0	; 208
}
   11a2c:	2b 96       	adiw	r28, 0x0b	; 11
   11a2e:	0f b6       	in	r0, 0x3f	; 63
   11a30:	f8 94       	cli
   11a32:	de bf       	out	0x3e, r29	; 62
   11a34:	0f be       	out	0x3f, r0	; 63
   11a36:	cd bf       	out	0x3d, r28	; 61
   11a38:	df 91       	pop	r29
   11a3a:	cf 91       	pop	r28
   11a3c:	1f 91       	pop	r17
   11a3e:	0f 91       	pop	r16
   11a40:	ff 90       	pop	r15
   11a42:	df 90       	pop	r13
   11a44:	cf 90       	pop	r12
   11a46:	08 95       	ret

00011a48 <GPIB>:
/// @return  0 on sucess
/// @return GPIB error flags on fail
/// @see gpib.h ERROR_MASK defines for a full list.

int GPIB(uint8_t ch)
{
   11a48:	00 d0       	rcall	.+0      	; 0x11a4a <GPIB+0x2>
   11a4a:	00 d0       	rcall	.+0      	; 0x11a4c <GPIB+0x4>
   11a4c:	1f 92       	push	r1
   11a4e:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11a52:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
///@brief Parallel Poll Configure
///TODO
    if(ch == PPC)
   11a56:	85 30       	cpi	r24, 0x05	; 5
   11a58:	89 f4       	brne	.+34     	; 0x11a7c <GPIB+0x34>
    {
        if(debuglevel & (GPIB_ERR + GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   11a5a:	27 71       	andi	r18, 0x17	; 23
   11a5c:	33 27       	eor	r19, r19
   11a5e:	23 2b       	or	r18, r19
   11a60:	51 f0       	breq	.+20     	; 0x11a76 <GPIB+0x2e>
            printf("[PPC unsupported TODO]\n");
   11a62:	83 ee       	ldi	r24, 0xE3	; 227
   11a64:	93 e1       	ldi	r25, 0x13	; 19
   11a66:	a0 e0       	ldi	r26, 0x00	; 0
   11a68:	ed b7       	in	r30, 0x3d	; 61
   11a6a:	fe b7       	in	r31, 0x3e	; 62
   11a6c:	81 83       	std	Z+1, r24	; 0x01
   11a6e:	92 83       	std	Z+2, r25	; 0x02
   11a70:	a3 83       	std	Z+3, r26	; 0x03
   11a72:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
        spoll = 0;
   11a76:	10 92 f7 1e 	sts	0x1EF7, r1	; 0x801ef7 <spoll>
   11a7a:	a0 c0       	rjmp	.+320    	; 0x11bbc <GPIB+0x174>
        return 0;
    }
///@brief Parallel Poll Unconfigure
///TODO
    if(ch == PPU)
   11a7c:	85 31       	cpi	r24, 0x15	; 21
   11a7e:	39 f4       	brne	.+14     	; 0x11a8e <GPIB+0x46>
    {
        if(debuglevel & (GPIB_ERR + GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   11a80:	27 71       	andi	r18, 0x17	; 23
   11a82:	33 27       	eor	r19, r19
   11a84:	23 2b       	or	r18, r19
   11a86:	b9 f3       	breq	.-18     	; 0x11a76 <GPIB+0x2e>
            printf("[PPU unsupported TODO]\n");
   11a88:	8b ec       	ldi	r24, 0xCB	; 203
   11a8a:	93 e1       	ldi	r25, 0x13	; 19
   11a8c:	ec cf       	rjmp	.-40     	; 0x11a66 <GPIB+0x1e>
    }

/// @todo FIXME
#if defined(SPOLL)
///@brief Serial Poll Enable
    if(ch == SPE)
   11a8e:	88 31       	cpi	r24, 0x18	; 24
   11a90:	d9 f4       	brne	.+54     	; 0x11ac8 <GPIB+0x80>
    {
#if SDEBUG
        if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   11a92:	26 70       	andi	r18, 0x06	; 6
   11a94:	33 27       	eor	r19, r19
   11a96:	23 2b       	or	r18, r19
   11a98:	51 f0       	breq	.+20     	; 0x11aae <GPIB+0x66>
            printf("[SPE]\n");
   11a9a:	84 ec       	ldi	r24, 0xC4	; 196
   11a9c:	93 e1       	ldi	r25, 0x13	; 19
   11a9e:	a0 e0       	ldi	r26, 0x00	; 0
   11aa0:	ed b7       	in	r30, 0x3d	; 61
   11aa2:	fe b7       	in	r31, 0x3e	; 62
   11aa4:	81 83       	std	Z+1, r24	; 0x01
   11aa6:	92 83       	std	Z+2, r25	; 0x02
   11aa8:	a3 83       	std	Z+3, r26	; 0x03
   11aaa:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
#endif
        spoll = 1;
   11aae:	81 e0       	ldi	r24, 0x01	; 1
   11ab0:	80 93 f7 1e 	sts	0x1EF7, r24	; 0x801ef7 <spoll>
        if(SS80_is_MTA(talking))
   11ab4:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   11ab8:	90 e0       	ldi	r25, 0x00	; 0
   11aba:	70 dd       	rcall	.-1312   	; 0x1159c <SS80_is_MTA>
   11abc:	89 2b       	or	r24, r25
   11abe:	09 f4       	brne	.+2      	; 0x11ac2 <GPIB+0x7a>
   11ac0:	7d c0       	rjmp	.+250    	; 0x11bbc <GPIB+0x174>
        {
            return( SS80_Report() );
   11ac2:	0e 94 e6 a9 	call	0x153cc	; 0x153cc <SS80_Report>
   11ac6:	7c c0       	rjmp	.+248    	; 0x11bc0 <GPIB+0x178>
        }
        return 0;
    }

///@brief Serial Poll Disable
    if(ch == SPD)
   11ac8:	89 31       	cpi	r24, 0x19	; 25
   11aca:	39 f4       	brne	.+14     	; 0x11ada <GPIB+0x92>
    {
#if SDEBUG
        if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   11acc:	26 70       	andi	r18, 0x06	; 6
   11ace:	33 27       	eor	r19, r19
   11ad0:	23 2b       	or	r18, r19
   11ad2:	89 f2       	breq	.-94     	; 0x11a76 <GPIB+0x2e>
            printf("[SPD]\n");
   11ad4:	8d eb       	ldi	r24, 0xBD	; 189
   11ad6:	93 e1       	ldi	r25, 0x13	; 19
   11ad8:	c6 cf       	rjmp	.-116    	; 0x11a66 <GPIB+0x1e>
        return 0;
    }
#endif                                        // #if defined(SPOLL)

///@brief Selected Device Clear
    if(ch == SDC )
   11ada:	84 30       	cpi	r24, 0x04	; 4
   11adc:	09 f0       	breq	.+2      	; 0x11ae0 <GPIB+0x98>
   11ade:	48 c0       	rjmp	.+144    	; 0x11b70 <GPIB+0x128>
    {
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11ae0:	22 ff       	sbrs	r18, 2
   11ae2:	0a c0       	rjmp	.+20     	; 0x11af8 <GPIB+0xb0>
            printf("[SDC]\n");
   11ae4:	86 eb       	ldi	r24, 0xB6	; 182
   11ae6:	93 e1       	ldi	r25, 0x13	; 19
   11ae8:	a0 e0       	ldi	r26, 0x00	; 0
   11aea:	ed b7       	in	r30, 0x3d	; 61
   11aec:	fe b7       	in	r31, 0x3e	; 62
   11aee:	81 83       	std	Z+1, r24	; 0x01
   11af0:	92 83       	std	Z+2, r25	; 0x02
   11af2:	a3 83       	std	Z+3, r26	; 0x03
   11af4:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
#endif
        if(SS80_is_MLA(listening))
   11af8:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   11afc:	90 e0       	ldi	r25, 0x00	; 0
   11afe:	3d dd       	rcall	.-1414   	; 0x1157a <SS80_is_MLA>
   11b00:	89 2b       	or	r24, r25
   11b02:	d9 f0       	breq	.+54     	; 0x11b3a <GPIB+0xf2>
        {
///  Note: Suposed to be unsupported in SS80 - pg 4-2
///  CS80 3-4
#if SDEBUG
            if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11b04:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11b08:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11b0c:	84 72       	andi	r24, 0x24	; 36
   11b0e:	99 27       	eor	r25, r25
   11b10:	89 2b       	or	r24, r25
   11b12:	51 f0       	breq	.+20     	; 0x11b28 <GPIB+0xe0>
                printf("[SDC SS80]\n");
   11b14:	8a ea       	ldi	r24, 0xAA	; 170
   11b16:	93 e1       	ldi	r25, 0x13	; 19
   11b18:	a0 e0       	ldi	r26, 0x00	; 0
   11b1a:	ed b7       	in	r30, 0x3d	; 61
   11b1c:	fe b7       	in	r31, 0x3e	; 62
   11b1e:	81 83       	std	Z+1, r24	; 0x01
   11b20:	92 83       	std	Z+2, r25	; 0x02
   11b22:	a3 83       	std	Z+3, r26	; 0x03
   11b24:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
#endif
            return(SS80_Selected_Device_Clear(SS80s->unitNO) );
   11b28:	e0 91 72 19 	lds	r30, 0x1972	; 0x801972 <SS80s>
   11b2c:	f0 91 73 19 	lds	r31, 0x1973	; 0x801973 <SS80s+0x1>
   11b30:	85 81       	ldd	r24, Z+5	; 0x05
   11b32:	90 e0       	ldi	r25, 0x00	; 0
   11b34:	0e 94 b2 aa 	call	0x15564	; 0x15564 <SS80_Selected_Device_Clear>
   11b38:	43 c0       	rjmp	.+134    	; 0x11bc0 <GPIB+0x178>
        }

#ifdef AMIGO
        if(AMIGO_is_MLA(listening))
   11b3a:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   11b3e:	90 e0       	ldi	r25, 0x00	; 0
   11b40:	4f dd       	rcall	.-1378   	; 0x115e0 <AMIGO_is_MLA>
   11b42:	89 2b       	or	r24, r25
   11b44:	d9 f1       	breq	.+118    	; 0x11bbc <GPIB+0x174>
        {
///  Note: Suposed to be unsupported in SS80 - pg 4-2
#if SDEBUG
            if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11b46:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11b4a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11b4e:	84 72       	andi	r24, 0x24	; 36
   11b50:	99 27       	eor	r25, r25
   11b52:	89 2b       	or	r24, r25
   11b54:	51 f0       	breq	.+20     	; 0x11b6a <GPIB+0x122>
                printf("[SDC AMIGO]\n");
   11b56:	8d e9       	ldi	r24, 0x9D	; 157
   11b58:	93 e1       	ldi	r25, 0x13	; 19
   11b5a:	a0 e0       	ldi	r26, 0x00	; 0
   11b5c:	ed b7       	in	r30, 0x3d	; 61
   11b5e:	fe b7       	in	r31, 0x3e	; 62
   11b60:	81 83       	std	Z+1, r24	; 0x01
   11b62:	92 83       	std	Z+2, r25	; 0x02
   11b64:	a3 83       	std	Z+3, r26	; 0x03
   11b66:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
#endif
            return( amigo_cmd_clear() );
   11b6a:	0e 94 f3 b4 	call	0x169e6	; 0x169e6 <amigo_cmd_clear>
   11b6e:	28 c0       	rjmp	.+80     	; 0x11bc0 <GPIB+0x178>
/// @todo FIXME
        return( 0 );
    }

///@brief   (Universal) Device Clear
    if(ch == DCL )
   11b70:	84 31       	cpi	r24, 0x14	; 20
   11b72:	99 f4       	brne	.+38     	; 0x11b9a <GPIB+0x152>
    {
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11b74:	22 ff       	sbrs	r18, 2
   11b76:	0a c0       	rjmp	.+20     	; 0x11b8c <GPIB+0x144>
            printf("[DCL]\n");
   11b78:	86 e9       	ldi	r24, 0x96	; 150
   11b7a:	93 e1       	ldi	r25, 0x13	; 19
   11b7c:	a0 e0       	ldi	r26, 0x00	; 0
   11b7e:	ed b7       	in	r30, 0x3d	; 61
   11b80:	fe b7       	in	r31, 0x3e	; 62
   11b82:	81 83       	std	Z+1, r24	; 0x01
   11b84:	92 83       	std	Z+2, r25	; 0x02
   11b86:	a3 83       	std	Z+3, r26	; 0x03
   11b88:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
#endif
        SS80_Universal_Device_Clear();
   11b8c:	0e 94 a4 aa 	call	0x15548	; 0x15548 <SS80_Universal_Device_Clear>

#ifdef AMIGO
        amigo_cmd_clear();
   11b90:	0e 94 f3 b4 	call	0x169e6	; 0x169e6 <amigo_cmd_clear>
#endif

/// @todo Fixme
        printer_close();
   11b94:	0e 94 12 bb 	call	0x17624	; 0x17624 <printer_close>
   11b98:	11 c0       	rjmp	.+34     	; 0x11bbc <GPIB+0x174>
        return( 0 );
    }

    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   11b9a:	25 71       	andi	r18, 0x15	; 21
   11b9c:	33 27       	eor	r19, r19
   11b9e:	23 2b       	or	r18, r19
   11ba0:	69 f0       	breq	.+26     	; 0x11bbc <GPIB+0x174>
        printf("[GPIB (%02XH) not defined TODO]\n", 0xff & ch);
   11ba2:	90 e0       	ldi	r25, 0x00	; 0
   11ba4:	ed b7       	in	r30, 0x3d	; 61
   11ba6:	fe b7       	in	r31, 0x3e	; 62
   11ba8:	95 83       	std	Z+5, r25	; 0x05
   11baa:	84 83       	std	Z+4, r24	; 0x04
   11bac:	85 e7       	ldi	r24, 0x75	; 117
   11bae:	93 e1       	ldi	r25, 0x13	; 19
   11bb0:	a0 e0       	ldi	r26, 0x00	; 0
   11bb2:	81 83       	std	Z+1, r24	; 0x01
   11bb4:	92 83       	std	Z+2, r25	; 0x02
   11bb6:	a3 83       	std	Z+3, r26	; 0x03
   11bb8:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    return(0);
   11bbc:	80 e0       	ldi	r24, 0x00	; 0
   11bbe:	90 e0       	ldi	r25, 0x00	; 0
}
   11bc0:	0f 90       	pop	r0
   11bc2:	0f 90       	pop	r0
   11bc4:	0f 90       	pop	r0
   11bc6:	0f 90       	pop	r0
   11bc8:	0f 90       	pop	r0
   11bca:	08 95       	ret

00011bcc <GPIB_TALK>:
/// @param[in] ch 8 bit talk command
///
/// @return  0

int GPIB_TALK(uint8_t ch)
{
   11bcc:	cf 93       	push	r28
   11bce:	df 93       	push	r29
   11bd0:	00 d0       	rcall	.+0      	; 0x11bd2 <GPIB_TALK+0x6>
   11bd2:	00 d0       	rcall	.+0      	; 0x11bd4 <GPIB_TALK+0x8>
   11bd4:	1f 92       	push	r1

///  NOTE: we must track the "addressed state" of each device
///  so we can determine its state - ie: command vs Secondary states
///  save talking state
    talking_last = talking;
   11bd6:	90 91 fa 1e 	lds	r25, 0x1EFA	; 0x801efa <talking>
   11bda:	90 93 fd 1e 	sts	0x1EFD, r25	; 0x801efd <talking_last>
    talking = ch;
   11bde:	80 93 fa 1e 	sts	0x1EFA, r24	; 0x801efa <talking>

    talk_cleanup();

///@brief  Universal Untalk
    if(ch == UNT)
   11be2:	8f 35       	cpi	r24, 0x5F	; 95
   11be4:	79 f4       	brne	.+30     	; 0x11c04 <GPIB_TALK+0x38>
    {
//FIXME talking = 0 ????
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11be6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11bea:	82 ff       	sbrs	r24, 2
   11bec:	7f c0       	rjmp	.+254    	; 0x11cec <GPIB_TALK+0x120>
            printf("[UNT]\n");
   11bee:	82 e2       	ldi	r24, 0x22	; 34
   11bf0:	93 e1       	ldi	r25, 0x13	; 19
   11bf2:	a0 e0       	ldi	r26, 0x00	; 0
   11bf4:	ed b7       	in	r30, 0x3d	; 61
   11bf6:	fe b7       	in	r31, 0x3e	; 62
   11bf8:	81 83       	std	Z+1, r24	; 0x01
   11bfa:	92 83       	std	Z+2, r25	; 0x02
   11bfc:	a3 83       	std	Z+3, r26	; 0x03
   11bfe:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   11c02:	74 c0       	rjmp	.+232    	; 0x11cec <GPIB_TALK+0x120>
#endif
        return(0);
    }

    if(SS80_is_MTA(ch))
   11c04:	c8 2f       	mov	r28, r24
   11c06:	d0 e0       	ldi	r29, 0x00	; 0
   11c08:	ce 01       	movw	r24, r28
   11c0a:	c8 dc       	rcall	.-1648   	; 0x1159c <SS80_is_MTA>
   11c0c:	89 2b       	or	r24, r25
   11c0e:	e1 f0       	breq	.+56     	; 0x11c48 <GPIB_TALK+0x7c>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11c10:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11c14:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11c18:	84 72       	andi	r24, 0x24	; 36
   11c1a:	99 27       	eor	r25, r25
   11c1c:	89 2b       	or	r24, r25
   11c1e:	61 f0       	breq	.+24     	; 0x11c38 <GPIB_TALK+0x6c>
            printf("[TA %02XH SS80]\n", 0xff & ch);
   11c20:	ed b7       	in	r30, 0x3d	; 61
   11c22:	fe b7       	in	r31, 0x3e	; 62
   11c24:	d5 83       	std	Z+5, r29	; 0x05
   11c26:	c4 83       	std	Z+4, r28	; 0x04
   11c28:	81 e1       	ldi	r24, 0x11	; 17
   11c2a:	93 e1       	ldi	r25, 0x13	; 19
   11c2c:	a0 e0       	ldi	r26, 0x00	; 0
   11c2e:	81 83       	std	Z+1, r24	; 0x01
   11c30:	92 83       	std	Z+2, r25	; 0x02
   11c32:	a3 83       	std	Z+3, r26	; 0x03
   11c34:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
#endif

        if (spoll)
   11c38:	80 91 f7 1e 	lds	r24, 0x1EF7	; 0x801ef7 <spoll>
   11c3c:	88 23       	and	r24, r24
   11c3e:	09 f4       	brne	.+2      	; 0x11c42 <GPIB_TALK+0x76>
   11c40:	55 c0       	rjmp	.+170    	; 0x11cec <GPIB_TALK+0x120>
        {
            SS80_Report();
   11c42:	0e 94 e6 a9 	call	0x153cc	; 0x153cc <SS80_Report>
   11c46:	52 c0       	rjmp	.+164    	; 0x11cec <GPIB_TALK+0x120>
        }
        return(0);
    }

#ifdef AMIGO
    if(AMIGO_is_MTA(ch))
   11c48:	ce 01       	movw	r24, r28
   11c4a:	db dc       	rcall	.-1610   	; 0x11602 <AMIGO_is_MTA>
   11c4c:	89 2b       	or	r24, r25
   11c4e:	81 f0       	breq	.+32     	; 0x11c70 <GPIB_TALK+0xa4>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11c50:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11c54:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11c58:	84 72       	andi	r24, 0x24	; 36
   11c5a:	99 27       	eor	r25, r25
   11c5c:	89 2b       	or	r24, r25
   11c5e:	09 f4       	brne	.+2      	; 0x11c62 <GPIB_TALK+0x96>
   11c60:	45 c0       	rjmp	.+138    	; 0x11cec <GPIB_TALK+0x120>
            printf("[TA %02XH AMIGO]\n", 0xff & ch);
   11c62:	ed b7       	in	r30, 0x3d	; 61
   11c64:	fe b7       	in	r31, 0x3e	; 62
   11c66:	d5 83       	std	Z+5, r29	; 0x05
   11c68:	c4 83       	std	Z+4, r28	; 0x04
   11c6a:	8f ef       	ldi	r24, 0xFF	; 255
   11c6c:	92 e1       	ldi	r25, 0x12	; 18
#endif
        return(0);
    }
#endif                                        // #ifdef AMIGO

    if(PRINTER_is_MTA(ch))
   11c6e:	38 c0       	rjmp	.+112    	; 0x11ce0 <GPIB_TALK+0x114>
   11c70:	ce 01       	movw	r24, r28
   11c72:	fa dc       	rcall	.-1548   	; 0x11668 <PRINTER_is_MTA>
   11c74:	89 2b       	or	r24, r25
   11c76:	79 f0       	breq	.+30     	; 0x11c96 <GPIB_TALK+0xca>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11c78:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11c7c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11c80:	84 72       	andi	r24, 0x24	; 36
   11c82:	99 27       	eor	r25, r25
   11c84:	89 2b       	or	r24, r25
   11c86:	91 f1       	breq	.+100    	; 0x11cec <GPIB_TALK+0x120>
            printf("[TA %02XH PRINTER]\n", 0xff & ch);
   11c88:	ed b7       	in	r30, 0x3d	; 61
   11c8a:	fe b7       	in	r31, 0x3e	; 62
   11c8c:	d5 83       	std	Z+5, r29	; 0x05
   11c8e:	c4 83       	std	Z+4, r28	; 0x04
   11c90:	8b ee       	ldi	r24, 0xEB	; 235
   11c92:	92 e1       	ldi	r25, 0x12	; 18
   11c94:	25 c0       	rjmp	.+74     	; 0x11ce0 <GPIB_TALK+0x114>
#endif
        return(0);
    }

    if(PRINTER_is_MLA(listening))
   11c96:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   11c9a:	90 e0       	ldi	r25, 0x00	; 0
   11c9c:	d4 dc       	rcall	.-1624   	; 0x11646 <PRINTER_is_MLA>
   11c9e:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11ca2:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11ca6:	89 2b       	or	r24, r25
   11ca8:	99 f0       	breq	.+38     	; 0x11cd0 <GPIB_TALK+0x104>
    {
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11caa:	24 72       	andi	r18, 0x24	; 36
   11cac:	33 27       	eor	r19, r19
   11cae:	23 2b       	or	r18, r19
   11cb0:	51 f0       	breq	.+20     	; 0x11cc6 <GPIB_TALK+0xfa>
            printf("[PRINTER OPEN]\n");
   11cb2:	8b ed       	ldi	r24, 0xDB	; 219
   11cb4:	92 e1       	ldi	r25, 0x12	; 18
   11cb6:	a0 e0       	ldi	r26, 0x00	; 0
   11cb8:	ed b7       	in	r30, 0x3d	; 61
   11cba:	fe b7       	in	r31, 0x3e	; 62
   11cbc:	81 83       	std	Z+1, r24	; 0x01
   11cbe:	92 83       	std	Z+2, r25	; 0x02
   11cc0:	a3 83       	std	Z+3, r26	; 0x03
   11cc2:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
        printer_open(NULL);
   11cc6:	80 e0       	ldi	r24, 0x00	; 0
   11cc8:	90 e0       	ldi	r25, 0x00	; 0
   11cca:	0e 94 6a bb 	call	0x176d4	; 0x176d4 <printer_open>
   11cce:	0e c0       	rjmp	.+28     	; 0x11cec <GPIB_TALK+0x120>
        return(0);
    }

#if SDEBUG
    if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11cd0:	22 ff       	sbrs	r18, 2
   11cd2:	0c c0       	rjmp	.+24     	; 0x11cec <GPIB_TALK+0x120>
        printf("[TA %02XH]\n", 0xff & ch);
   11cd4:	ed b7       	in	r30, 0x3d	; 61
   11cd6:	fe b7       	in	r31, 0x3e	; 62
   11cd8:	d5 83       	std	Z+5, r29	; 0x05
   11cda:	c4 83       	std	Z+4, r28	; 0x04
   11cdc:	8f ec       	ldi	r24, 0xCF	; 207
   11cde:	92 e1       	ldi	r25, 0x12	; 18
   11ce0:	a0 e0       	ldi	r26, 0x00	; 0
   11ce2:	81 83       	std	Z+1, r24	; 0x01
   11ce4:	92 83       	std	Z+2, r25	; 0x02
   11ce6:	a3 83       	std	Z+3, r26	; 0x03
   11ce8:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
#endif
    return(0);
}                                                 // Talk Address primary address group
   11cec:	80 e0       	ldi	r24, 0x00	; 0
   11cee:	90 e0       	ldi	r25, 0x00	; 0
   11cf0:	cd b7       	in	r28, 0x3d	; 61
   11cf2:	de b7       	in	r29, 0x3e	; 62
   11cf4:	25 96       	adiw	r28, 0x05	; 5
   11cf6:	e2 e0       	ldi	r30, 0x02	; 2
   11cf8:	0c 94 35 e3 	jmp	0x1c66a	; 0x1c66a <__epilogue_restores__+0x20>

00011cfc <GPIB_SECONDARY_ADDRESS>:
///
/// @param[in] ch 8 bit secondary address.
///
/// @return  0
int GPIB_SECONDARY_ADDRESS(uint8_t ch)
{
   11cfc:	a9 e0       	ldi	r26, 0x09	; 9
   11cfe:	b0 e0       	ldi	r27, 0x00	; 0
   11d00:	e4 e8       	ldi	r30, 0x84	; 132
   11d02:	fe e8       	ldi	r31, 0x8E	; 142
   11d04:	0c 94 18 e3 	jmp	0x1c630	; 0x1c630 <__prologue_saves__+0x1e>
   11d08:	18 2f       	mov	r17, r24
///  note: any errors will reset lastcmd
///  Universal Talk mode
///  Treat this as a Secondary Address ?
///  SS80 Ident 4-31
///  If we have our secondary address then send IDENT
    if(SS80_is_MSA(ch) )
   11d0a:	c8 2f       	mov	r28, r24
   11d0c:	d0 e0       	ldi	r29, 0x00	; 0
   11d0e:	ce 01       	movw	r24, r28
   11d10:	56 dc       	rcall	.-1876   	; 0x115be <SS80_is_MSA>
   11d12:	89 2b       	or	r24, r25
   11d14:	09 f1       	breq	.+66     	; 0x11d58 <GPIB_SECONDARY_ADDRESS+0x5c>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11d16:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11d1a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11d1e:	84 72       	andi	r24, 0x24	; 36
   11d20:	99 27       	eor	r25, r25
   11d22:	89 2b       	or	r24, r25
   11d24:	61 f0       	breq	.+24     	; 0x11d3e <GPIB_SECONDARY_ADDRESS+0x42>
            printf("[SA %02XH SS80]\n", 0xff & ch);
   11d26:	ed b7       	in	r30, 0x3d	; 61
   11d28:	fe b7       	in	r31, 0x3e	; 62
   11d2a:	d5 83       	std	Z+5, r29	; 0x05
   11d2c:	c4 83       	std	Z+4, r28	; 0x04
   11d2e:	8e eb       	ldi	r24, 0xBE	; 190
   11d30:	92 e1       	ldi	r25, 0x12	; 18
   11d32:	a0 e0       	ldi	r26, 0x00	; 0
   11d34:	81 83       	std	Z+1, r24	; 0x01
   11d36:	92 83       	std	Z+2, r25	; 0x02
   11d38:	a3 83       	std	Z+3, r26	; 0x03
   11d3a:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
#endif
///@brief ch = secondary address
        gpib_disable_PPR(SS80p->HEADER.PPR);
   11d3e:	e0 91 74 19 	lds	r30, 0x1974	; 0x801974 <SS80p>
   11d42:	f0 91 75 19 	lds	r31, 0x1975	; 0x801975 <SS80p+0x1>
   11d46:	81 81       	ldd	r24, Z+1	; 0x01
   11d48:	90 e0       	ldi	r25, 0x00	; 0
   11d4a:	0e 94 c3 84 	call	0x10986	; 0x10986 <gpib_disable_PPR>
        return(Send_Identify( ch, SS80p->CONFIG.ID) );
   11d4e:	e0 91 74 19 	lds	r30, 0x1974	; 0x801974 <SS80p>
   11d52:	f0 91 75 19 	lds	r31, 0x1975	; 0x801975 <SS80p+0x1>
   11d56:	25 c0       	rjmp	.+74     	; 0x11da2 <GPIB_SECONDARY_ADDRESS+0xa6>

    }

#ifdef AMIGO
    if(AMIGO_is_MSA(ch) )
   11d58:	ce 01       	movw	r24, r28
   11d5a:	64 dc       	rcall	.-1848   	; 0x11624 <AMIGO_is_MSA>
   11d5c:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11d60:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11d64:	89 2b       	or	r24, r25
   11d66:	11 f1       	breq	.+68     	; 0x11dac <GPIB_SECONDARY_ADDRESS+0xb0>
    {
/// @todo
///     Two identify bytes should be repeated until untalked
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11d68:	c9 01       	movw	r24, r18
   11d6a:	84 72       	andi	r24, 0x24	; 36
   11d6c:	99 27       	eor	r25, r25
   11d6e:	89 2b       	or	r24, r25
   11d70:	61 f0       	breq	.+24     	; 0x11d8a <GPIB_SECONDARY_ADDRESS+0x8e>
            printf("[SA %02XH AMIGO]\n", 0xff & ch);
   11d72:	ed b7       	in	r30, 0x3d	; 61
   11d74:	fe b7       	in	r31, 0x3e	; 62
   11d76:	d5 83       	std	Z+5, r29	; 0x05
   11d78:	c4 83       	std	Z+4, r28	; 0x04
   11d7a:	8c ea       	ldi	r24, 0xAC	; 172
   11d7c:	92 e1       	ldi	r25, 0x12	; 18
   11d7e:	a0 e0       	ldi	r26, 0x00	; 0
   11d80:	81 83       	std	Z+1, r24	; 0x01
   11d82:	92 83       	std	Z+2, r25	; 0x02
   11d84:	a3 83       	std	Z+3, r26	; 0x03
   11d86:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
#endif
///@brief ch = secondary address
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   11d8a:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <AMIGOp>
   11d8e:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <AMIGOp+0x1>
   11d92:	81 81       	ldd	r24, Z+1	; 0x01
   11d94:	90 e0       	ldi	r25, 0x00	; 0
   11d96:	0e 94 c3 84 	call	0x10986	; 0x10986 <gpib_disable_PPR>
        return( Send_Identify( ch, AMIGOp->CONFIG.ID) );
   11d9a:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <AMIGOp>
   11d9e:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <AMIGOp+0x1>
   11da2:	64 81       	ldd	r22, Z+4	; 0x04
   11da4:	75 81       	ldd	r23, Z+5	; 0x05
   11da6:	81 2f       	mov	r24, r17
   11da8:	ec dd       	rcall	.-1064   	; 0x11982 <Send_Identify>
   11daa:	1d c0       	rjmp	.+58     	; 0x11de6 <GPIB_SECONDARY_ADDRESS+0xea>
    }
#endif                                        // #ifdef AMIGO

#if SDEBUG
    if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11dac:	c9 01       	movw	r24, r18
   11dae:	84 72       	andi	r24, 0x24	; 36
   11db0:	99 27       	eor	r25, r25
   11db2:	00 97       	sbiw	r24, 0x00	; 0
   11db4:	c1 f0       	breq	.+48     	; 0x11de6 <GPIB_SECONDARY_ADDRESS+0xea>
        printf("[SA %02XH, listen:%02XH, talk:%02XH]\n",
   11db6:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   11dba:	90 e0       	ldi	r25, 0x00	; 0
   11dbc:	ed b7       	in	r30, 0x3d	; 61
   11dbe:	fe b7       	in	r31, 0x3e	; 62
   11dc0:	91 87       	std	Z+9, r25	; 0x09
   11dc2:	80 87       	std	Z+8, r24	; 0x08
   11dc4:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   11dc8:	90 e0       	ldi	r25, 0x00	; 0
   11dca:	97 83       	std	Z+7, r25	; 0x07
   11dcc:	86 83       	std	Z+6, r24	; 0x06
   11dce:	d5 83       	std	Z+5, r29	; 0x05
   11dd0:	c4 83       	std	Z+4, r28	; 0x04
   11dd2:	86 e8       	ldi	r24, 0x86	; 134
   11dd4:	92 e1       	ldi	r25, 0x12	; 18
   11dd6:	a0 e0       	ldi	r26, 0x00	; 0
   11dd8:	81 83       	std	Z+1, r24	; 0x01
   11dda:	92 83       	std	Z+2, r25	; 0x02
   11ddc:	a3 83       	std	Z+3, r26	; 0x03
   11dde:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
            0xff & ch, 0xff & listening, 0xff & talking);
#endif
    return(0);
   11de2:	80 e0       	ldi	r24, 0x00	; 0
   11de4:	90 e0       	ldi	r25, 0x00	; 0
}
   11de6:	cd b7       	in	r28, 0x3d	; 61
   11de8:	de b7       	in	r29, 0x3e	; 62
   11dea:	29 96       	adiw	r28, 0x09	; 9
   11dec:	e3 e0       	ldi	r30, 0x03	; 3
   11dee:	0c 94 34 e3 	jmp	0x1c668	; 0x1c668 <__epilogue_restores__+0x1e>

00011df2 <listen_cleanup>:
/// - Used to cleanup or close at the end of any listen address transition.
/// - Also called when GPIB bus reset or unlisten.
/// For now we just use this to close printer capture
/// @return  void
void listen_cleanup()
{
   11df2:	00 d0       	rcall	.+0      	; 0x11df4 <listen_cleanup+0x2>
   11df4:	1f 92       	push	r1
    if(listening_last)
   11df6:	60 91 f6 1e 	lds	r22, 0x1EF6	; 0x801ef6 <listening_last>
   11dfa:	66 23       	and	r22, r22
   11dfc:	e1 f0       	breq	.+56     	; 0x11e36 <listen_cleanup+0x44>
    {
        int index = find_device(PRINTER_TYPE, listening_last, BASE_MLA);
   11dfe:	70 e0       	ldi	r23, 0x00	; 0
   11e00:	40 e2       	ldi	r20, 0x20	; 32
   11e02:	50 e0       	ldi	r21, 0x00	; 0
   11e04:	84 e0       	ldi	r24, 0x04	; 4
   11e06:	90 e0       	ldi	r25, 0x00	; 0
   11e08:	9c d6       	rcall	.+3384   	; 0x12b42 <find_device>
        if(index == -1)
   11e0a:	01 96       	adiw	r24, 0x01	; 1
   11e0c:	a1 f0       	breq	.+40     	; 0x11e36 <listen_cleanup+0x44>
            return;

//We should not set the active device globally
//FIXME if we have to then printer close should temprarily do so
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11e0e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11e12:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11e16:	84 72       	andi	r24, 0x24	; 36
   11e18:	99 27       	eor	r25, r25
   11e1a:	89 2b       	or	r24, r25
   11e1c:	51 f0       	breq	.+20     	; 0x11e32 <listen_cleanup+0x40>
            printf("[PRINTER close]\n");
   11e1e:	85 e7       	ldi	r24, 0x75	; 117
   11e20:	92 e1       	ldi	r25, 0x12	; 18
   11e22:	a0 e0       	ldi	r26, 0x00	; 0
   11e24:	ed b7       	in	r30, 0x3d	; 61
   11e26:	fe b7       	in	r31, 0x3e	; 62
   11e28:	81 83       	std	Z+1, r24	; 0x01
   11e2a:	92 83       	std	Z+2, r25	; 0x02
   11e2c:	a3 83       	std	Z+3, r26	; 0x03
   11e2e:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
        printer_close();
   11e32:	0e 94 12 bb 	call	0x17624	; 0x17624 <printer_close>
    }
}
   11e36:	0f 90       	pop	r0
   11e38:	0f 90       	pop	r0
   11e3a:	0f 90       	pop	r0
   11e3c:	08 95       	ret

00011e3e <GPIB_LISTEN>:
/// @param[in] ch 8 bit listen command
///
/// @return  0

int GPIB_LISTEN(uint8_t ch)
{
   11e3e:	cf 93       	push	r28
   11e40:	df 93       	push	r29
   11e42:	00 d0       	rcall	.+0      	; 0x11e44 <GPIB_LISTEN+0x6>
   11e44:	00 d0       	rcall	.+0      	; 0x11e46 <GPIB_LISTEN+0x8>
   11e46:	1f 92       	push	r1
   11e48:	c8 2f       	mov	r28, r24
    listening_last = listening;
   11e4a:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   11e4e:	80 93 f6 1e 	sts	0x1EF6, r24	; 0x801ef6 <listening_last>
    listening = ch;
   11e52:	c0 93 fc 1e 	sts	0x1EFC, r28	; 0x801efc <listening>

    listen_cleanup();
   11e56:	cd df       	rcall	.-102    	; 0x11df2 <listen_cleanup>

///  NOTE: we must track the "addressed state" of each device
///  so we can determine its state - ie: command vs Secondary states
///@brief  Universal Unlisten
    if(ch == UNL)
   11e58:	cf 33       	cpi	r28, 0x3F	; 63
   11e5a:	19 f5       	brne	.+70     	; 0x11ea2 <GPIB_LISTEN+0x64>
    {
        listening = 0;
   11e5c:	10 92 fc 1e 	sts	0x1EFC, r1	; 0x801efc <listening>

#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11e60:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11e64:	82 ff       	sbrs	r24, 2
   11e66:	74 c0       	rjmp	.+232    	; 0x11f50 <GPIB_LISTEN+0x112>
        {
            printf("[UNL]\n");
   11e68:	8e e6       	ldi	r24, 0x6E	; 110
   11e6a:	93 e1       	ldi	r25, 0x13	; 19
   11e6c:	a0 e0       	ldi	r26, 0x00	; 0
   11e6e:	ed b7       	in	r30, 0x3d	; 61
   11e70:	fe b7       	in	r31, 0x3e	; 62
   11e72:	81 83       	std	Z+1, r24	; 0x01
   11e74:	92 83       	std	Z+2, r25	; 0x02
   11e76:	a3 83       	std	Z+3, r26	; 0x03
   11e78:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
///@brief add a line break if we both Untalk and Unlisten
            if(lastcmd == UNT)
   11e7c:	80 91 f4 1c 	lds	r24, 0x1CF4	; 0x801cf4 <lastcmd>
   11e80:	90 91 f5 1c 	lds	r25, 0x1CF5	; 0x801cf5 <lastcmd+0x1>
   11e84:	8f 35       	cpi	r24, 0x5F	; 95
   11e86:	91 05       	cpc	r25, r1
   11e88:	09 f0       	breq	.+2      	; 0x11e8c <GPIB_LISTEN+0x4e>
   11e8a:	62 c0       	rjmp	.+196    	; 0x11f50 <GPIB_LISTEN+0x112>
                printf("\n");
   11e8c:	8c e6       	ldi	r24, 0x6C	; 108
   11e8e:	93 e1       	ldi	r25, 0x13	; 19
   11e90:	a0 e0       	ldi	r26, 0x00	; 0
   11e92:	ed b7       	in	r30, 0x3d	; 61
   11e94:	fe b7       	in	r31, 0x3e	; 62
   11e96:	81 83       	std	Z+1, r24	; 0x01
   11e98:	92 83       	std	Z+2, r25	; 0x02
   11e9a:	a3 83       	std	Z+3, r26	; 0x03
   11e9c:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   11ea0:	57 c0       	rjmp	.+174    	; 0x11f50 <GPIB_LISTEN+0x112>
#endif
        return(0);
    }

#ifdef AMIGO
    if(AMIGO_is_MLA(ch))
   11ea2:	d0 e0       	ldi	r29, 0x00	; 0
   11ea4:	ce 01       	movw	r24, r28
   11ea6:	9c db       	rcall	.-2248   	; 0x115e0 <AMIGO_is_MLA>
   11ea8:	89 2b       	or	r24, r25
   11eaa:	81 f0       	breq	.+32     	; 0x11ecc <GPIB_LISTEN+0x8e>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11eac:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11eb0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11eb4:	84 72       	andi	r24, 0x24	; 36
   11eb6:	99 27       	eor	r25, r25
   11eb8:	89 2b       	or	r24, r25
   11eba:	09 f4       	brne	.+2      	; 0x11ebe <GPIB_LISTEN+0x80>
   11ebc:	49 c0       	rjmp	.+146    	; 0x11f50 <GPIB_LISTEN+0x112>
            printf("[LA %02XH AMIGO]\n", 0xff & ch);
   11ebe:	ed b7       	in	r30, 0x3d	; 61
   11ec0:	fe b7       	in	r31, 0x3e	; 62
   11ec2:	d5 83       	std	Z+5, r29	; 0x05
   11ec4:	c4 83       	std	Z+4, r28	; 0x04
   11ec6:	8a e5       	ldi	r24, 0x5A	; 90
   11ec8:	93 e1       	ldi	r25, 0x13	; 19
#endif
        return(0);
    }
#endif                                        // #ifdef AMIGO

    if(SS80_is_MLA(ch))
   11eca:	3c c0       	rjmp	.+120    	; 0x11f44 <GPIB_LISTEN+0x106>
   11ecc:	ce 01       	movw	r24, r28
   11ece:	55 db       	rcall	.-2390   	; 0x1157a <SS80_is_MLA>
   11ed0:	89 2b       	or	r24, r25
   11ed2:	79 f0       	breq	.+30     	; 0x11ef2 <GPIB_LISTEN+0xb4>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11ed4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11ed8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11edc:	84 72       	andi	r24, 0x24	; 36
   11ede:	99 27       	eor	r25, r25
   11ee0:	89 2b       	or	r24, r25
   11ee2:	b1 f1       	breq	.+108    	; 0x11f50 <GPIB_LISTEN+0x112>
            printf("[LA %02XH SS80]\n", 0xff & ch);
   11ee4:	ed b7       	in	r30, 0x3d	; 61
   11ee6:	fe b7       	in	r31, 0x3e	; 62
   11ee8:	d5 83       	std	Z+5, r29	; 0x05
   11eea:	c4 83       	std	Z+4, r28	; 0x04
   11eec:	89 e4       	ldi	r24, 0x49	; 73
   11eee:	93 e1       	ldi	r25, 0x13	; 19
#endif
        return(0);
    }

    if(PRINTER_is_MLA(ch))
   11ef0:	29 c0       	rjmp	.+82     	; 0x11f44 <GPIB_LISTEN+0x106>
   11ef2:	ce 01       	movw	r24, r28
   11ef4:	a8 db       	rcall	.-2224   	; 0x11646 <PRINTER_is_MLA>
   11ef6:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11efa:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11efe:	89 2b       	or	r24, r25
   11f00:	c9 f0       	breq	.+50     	; 0x11f34 <GPIB_LISTEN+0xf6>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11f02:	24 72       	andi	r18, 0x24	; 36
   11f04:	33 27       	eor	r19, r19
   11f06:	23 2b       	or	r18, r19
   11f08:	61 f0       	breq	.+24     	; 0x11f22 <GPIB_LISTEN+0xe4>
            printf("[LA %02XH PRINTER]\n", 0xff & ch);
   11f0a:	ed b7       	in	r30, 0x3d	; 61
   11f0c:	fe b7       	in	r31, 0x3e	; 62
   11f0e:	d5 83       	std	Z+5, r29	; 0x05
   11f10:	c4 83       	std	Z+4, r28	; 0x04
   11f12:	85 e3       	ldi	r24, 0x35	; 53
   11f14:	93 e1       	ldi	r25, 0x13	; 19
   11f16:	a0 e0       	ldi	r26, 0x00	; 0
   11f18:	81 83       	std	Z+1, r24	; 0x01
   11f1a:	92 83       	std	Z+2, r25	; 0x02
   11f1c:	a3 83       	std	Z+3, r26	; 0x03
   11f1e:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
#endif
        if(talking != UNT)
   11f22:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   11f26:	8f 35       	cpi	r24, 0x5F	; 95
   11f28:	99 f0       	breq	.+38     	; 0x11f50 <GPIB_LISTEN+0x112>
        {
///@brief NULL creates a file named based on date and time
            printer_open(NULL);
   11f2a:	80 e0       	ldi	r24, 0x00	; 0
   11f2c:	90 e0       	ldi	r25, 0x00	; 0
   11f2e:	0e 94 6a bb 	call	0x176d4	; 0x176d4 <printer_open>
   11f32:	0e c0       	rjmp	.+28     	; 0x11f50 <GPIB_LISTEN+0x112>
        }
        return(0);
    }
#if SDEBUG
    if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11f34:	22 ff       	sbrs	r18, 2
   11f36:	0c c0       	rjmp	.+24     	; 0x11f50 <GPIB_LISTEN+0x112>
        printf("[LA %02XH]\n", 0xff & ch);
   11f38:	ed b7       	in	r30, 0x3d	; 61
   11f3a:	fe b7       	in	r31, 0x3e	; 62
   11f3c:	d5 83       	std	Z+5, r29	; 0x05
   11f3e:	c4 83       	std	Z+4, r28	; 0x04
   11f40:	89 e2       	ldi	r24, 0x29	; 41
   11f42:	93 e1       	ldi	r25, 0x13	; 19
   11f44:	a0 e0       	ldi	r26, 0x00	; 0
   11f46:	81 83       	std	Z+1, r24	; 0x01
   11f48:	92 83       	std	Z+2, r25	; 0x02
   11f4a:	a3 83       	std	Z+3, r26	; 0x03
   11f4c:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
#endif
    return(0);
}                                                 // Listen Primary Address group
   11f50:	80 e0       	ldi	r24, 0x00	; 0
   11f52:	90 e0       	ldi	r25, 0x00	; 0
   11f54:	cd b7       	in	r28, 0x3d	; 61
   11f56:	de b7       	in	r29, 0x3e	; 62
   11f58:	25 96       	adiw	r28, 0x05	; 5
   11f5a:	e2 e0       	ldi	r30, 0x02	; 2
   11f5c:	0c 94 35 e3 	jmp	0x1c66a	; 0x1c66a <__epilogue_restores__+0x20>

00011f60 <gpib_task>:
/// - Reads and processes GPIB control or data bytes
/// and calls emulator task.
/// @return  void

void gpib_task(void)
{
   11f60:	cf 93       	push	r28
   11f62:	df 93       	push	r29
    uint16_t val;
    uint8_t ch;
    uint16_t status;

    gpib_init_devices();                          // Init devices
   11f64:	92 db       	rcall	.-2268   	; 0x1168a <gpib_init_devices>
	// gpib_state_init() is now done in gpib_init_devices
    // gpib_state_init();                            // Init PPR talking and listening states

    gpib_log_fp = NULL;
   11f66:	10 92 6d 19 	sts	0x196D, r1	; 0x80196d <gpib_log_fp+0x1>
   11f6a:	10 92 6c 19 	sts	0x196C, r1	; 0x80196c <gpib_log_fp>

    while(1)
    {


        val = gpib_read_byte(NO_TRACE);
   11f6e:	80 e0       	ldi	r24, 0x00	; 0
   11f70:	90 e0       	ldi	r25, 0x00	; 0
   11f72:	57 d8       	rcall	.-3922   	; 0x11022 <gpib_read_byte>
   11f74:	ec 01       	movw	r28, r24

#if SDEBUG
        if(debuglevel & GPIB_TOP_LEVEL_BUS_DECODE)
   11f76:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11f7a:	83 ff       	sbrs	r24, 3
            gpib_decode(val);
   11f7c:	02 c0       	rjmp	.+4      	; 0x11f82 <gpib_task+0x22>
   11f7e:	ce 01       	movw	r24, r28
   11f80:	56 d9       	rcall	.-3412   	; 0x1122e <gpib_decode>
#endif
        status = gpib_error_test(val);
   11f82:	ce 01       	movw	r24, r28
   11f84:	1d dc       	rcall	.-1990   	; 0x117c0 <gpib_error_test>
        if(status & ABORT_FLAG)
        {
            return;
        }
        else if(status & MEDIA_FLAG)
   11f86:	9c 01       	movw	r18, r24
   11f88:	23 70       	andi	r18, 0x03	; 3
   11f8a:	33 27       	eor	r19, r19
   11f8c:	23 2b       	or	r18, r19
   11f8e:	09 f0       	breq	.+2      	; 0x11f92 <gpib_task+0x32>
   11f90:	43 c0       	rjmp	.+134    	; 0x12018 <gpib_task+0xb8>
        {
            return;
        }
        else if(status)
   11f92:	89 2b       	or	r24, r25
   11f94:	61 f7       	brne	.-40     	; 0x11f6e <gpib_task+0xe>
        {
            continue;
        }
///@brief GPIB commands with ATN set (COMMANDS)
        if(val & ATN_FLAG)
   11f96:	d2 ff       	sbrs	r29, 2
   11f98:	26 c0       	rjmp	.+76     	; 0x11fe6 <gpib_task+0x86>
        {
            ch = val & CMD_MASK;
   11f9a:	8c 2f       	mov	r24, r28
   11f9c:	8f 77       	andi	r24, 0x7F	; 127
            if(ch <= 0x1f)
   11f9e:	80 32       	cpi	r24, 0x20	; 32
            {
                GPIB(ch);
   11fa0:	10 f4       	brcc	.+4      	; 0x11fa6 <gpib_task+0x46>
   11fa2:	52 dd       	rcall	.-1372   	; 0x11a48 <GPIB>
                continue;
   11fa4:	e4 cf       	rjmp	.-56     	; 0x11f6e <gpib_task+0xe>
            }
///@brief GPIB listen
            if(ch >= 0x20 && ch <= 0x3f)
   11fa6:	90 ee       	ldi	r25, 0xE0	; 224
   11fa8:	98 0f       	add	r25, r24
   11faa:	90 32       	cpi	r25, 0x20	; 32
            {
                GPIB_LISTEN(ch);
   11fac:	10 f4       	brcc	.+4      	; 0x11fb2 <gpib_task+0x52>
   11fae:	47 df       	rcall	.-370    	; 0x11e3e <GPIB_LISTEN>
                continue;
   11fb0:	de cf       	rjmp	.-68     	; 0x11f6e <gpib_task+0xe>
            }
///@brief GPIB talk
            if(ch >= 0x40 && ch <= 0x5f)
   11fb2:	90 ec       	ldi	r25, 0xC0	; 192
   11fb4:	98 0f       	add	r25, r24
   11fb6:	90 32       	cpi	r25, 0x20	; 32
            {
                GPIB_TALK(ch);
   11fb8:	10 f4       	brcc	.+4      	; 0x11fbe <gpib_task+0x5e>
   11fba:	08 de       	rcall	.-1008   	; 0x11bcc <GPIB_TALK>
                continue;
   11fbc:	d8 cf       	rjmp	.-80     	; 0x11f6e <gpib_task+0xe>
            }

///@brief GPIB secondary
/// Note: We know ch >= 0x60 && ch <= 0x7f because of previous tests

            if( listening && lastcmd == UNT)
   11fbe:	90 91 fc 1e 	lds	r25, 0x1EFC	; 0x801efc <listening>
   11fc2:	99 23       	and	r25, r25
   11fc4:	59 f0       	breq	.+22     	; 0x11fdc <gpib_task+0x7c>
   11fc6:	20 91 f4 1c 	lds	r18, 0x1CF4	; 0x801cf4 <lastcmd>
   11fca:	30 91 f5 1c 	lds	r19, 0x1CF5	; 0x801cf5 <lastcmd+0x1>
   11fce:	2f 35       	cpi	r18, 0x5F	; 95
   11fd0:	31 05       	cpc	r19, r1
            {
                secondary = 0;
   11fd2:	21 f4       	brne	.+8      	; 0x11fdc <gpib_task+0x7c>
   11fd4:	10 92 fb 1e 	sts	0x1EFB, r1	; 0x801efb <secondary>
                GPIB_SECONDARY_ADDRESS(ch);
   11fd8:	91 de       	rcall	.-734    	; 0x11cfc <GPIB_SECONDARY_ADDRESS>
                continue;
   11fda:	c9 cf       	rjmp	.-110    	; 0x11f6e <gpib_task+0xe>
            }

///@brief We have to keep track of secondary address that may happen out of order with older AMIGO protocol
/// this method works for SS80 as well
            secondary = ch;
   11fdc:	80 93 fb 1e 	sts	0x1EFB, r24	; 0x801efb <secondary>
///@brief GPIB_COMMANDS does most of the work
            status = GPIB_COMMANDS(secondary,0);
   11fe0:	60 e0       	ldi	r22, 0x00	; 0
   11fe2:	90 e0       	ldi	r25, 0x00	; 0
        }                                         // GPIB ATN

///@brief GPIB commands without ATN set (DATA)
        else                                      // GPIB Data
        {
            if ( PRINTER_is_MLA(listening) )
   11fe4:	12 c0       	rjmp	.+36     	; 0x1200a <gpib_task+0xaa>
   11fe6:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   11fea:	90 e0       	ldi	r25, 0x00	; 0
   11fec:	2c db       	rcall	.-2472   	; 0x11646 <PRINTER_is_MLA>
   11fee:	89 2b       	or	r24, r25
   11ff0:	29 f0       	breq	.+10     	; 0x11ffc <gpib_task+0x9c>
            {
                printer_buffer( 0xff & val );
   11ff2:	ce 01       	movw	r24, r28
   11ff4:	99 27       	eor	r25, r25
   11ff6:	0e 94 0d bc 	call	0x1781a	; 0x1781a <printer_buffer>
                continue;
   11ffa:	b9 cf       	rjmp	.-142    	; 0x11f6e <gpib_task+0xe>
            }

            if(!secondary)
   11ffc:	80 91 fb 1e 	lds	r24, 0x1EFB	; 0x801efb <secondary>
   12000:	88 23       	and	r24, r24
                continue;

// ONLY secondar commands at this point
///@brief GPIB_COMMANDS does most of the work
            status = GPIB_COMMANDS(val,1);
   12002:	09 f4       	brne	.+2      	; 0x12006 <gpib_task+0xa6>
   12004:	b4 cf       	rjmp	.-152    	; 0x11f6e <gpib_task+0xe>
   12006:	61 e0       	ldi	r22, 0x01	; 1
   12008:	ce 01       	movw	r24, r28
            status = gpib_error_test(status);
   1200a:	67 dc       	rcall	.-1842   	; 0x118da <GPIB_COMMANDS>
   1200c:	d9 db       	rcall	.-2126   	; 0x117c0 <gpib_error_test>

            if(status & ( ABORT_FLAG | MEDIA_FLAG ))
   1200e:	83 70       	andi	r24, 0x03	; 3
   12010:	99 27       	eor	r25, r25
   12012:	89 2b       	or	r24, r25
   12014:	09 f4       	brne	.+2      	; 0x12018 <gpib_task+0xb8>
   12016:	ab cf       	rjmp	.-170    	; 0x11f6e <gpib_task+0xe>
            }
            continue;
        }
    }                                             // while(1)
    return;
}
   12018:	df 91       	pop	r29
   1201a:	cf 91       	pop	r28
   1201c:	08 95       	ret

0001201e <talk_cleanup>:
/// - Not used in this emulator.
///
/// @return  void

void talk_cleanup()
{
   1201e:	08 95       	ret

00012020 <gpib_help>:
///  Help Menu for User invoked GPIB functions and tasks
///  See: int gpib_tests(char *str)
/// @return  void

void gpib_help(int full)
{
   12020:	cf 93       	push	r28
   12022:	df 93       	push	r29
   12024:	00 d0       	rcall	.+0      	; 0x12026 <gpib_help+0x6>
   12026:	1f 92       	push	r1
   12028:	ec 01       	movw	r28, r24
    printf("gpib  help\n");
   1202a:	8f ef       	ldi	r24, 0xFF	; 255
   1202c:	96 e1       	ldi	r25, 0x16	; 22
   1202e:	a0 e0       	ldi	r26, 0x00	; 0
   12030:	ed b7       	in	r30, 0x3d	; 61
   12032:	fe b7       	in	r31, 0x3e	; 62
   12034:	81 83       	std	Z+1, r24	; 0x01
   12036:	92 83       	std	Z+2, r25	; 0x02
   12038:	a3 83       	std	Z+3, r26	; 0x03
   1203a:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    if(full)
   1203e:	cd 2b       	or	r28, r29
   12040:	51 f0       	breq	.+20     	; 0x12056 <gpib_help+0x36>
    {
        printf("Note: gpib prefix is optional\n"
   12042:	86 e3       	ldi	r24, 0x36	; 54
   12044:	95 e1       	ldi	r25, 0x15	; 21
   12046:	a0 e0       	ldi	r26, 0x00	; 0
   12048:	ed b7       	in	r30, 0x3d	; 61
   1204a:	fe b7       	in	r31, 0x3e	; 62
   1204c:	81 83       	std	Z+1, r24	; 0x01
   1204e:	92 83       	std	Z+2, r25	; 0x02
   12050:	a3 83       	std	Z+3, r26	; 0x03
   12052:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
            "gpib ppr_set XX\n"
    #endif
            "\n"
            );
    }
}
   12056:	cd b7       	in	r28, 0x3d	; 61
   12058:	de b7       	in	r29, 0x3e	; 62
   1205a:	23 96       	adiw	r28, 0x03	; 3
   1205c:	e2 e0       	ldi	r30, 0x02	; 2
   1205e:	0c 94 35 e3 	jmp	0x1c66a	; 0x1c66a <__epilogue_restores__+0x20>

00012062 <gpib_tests>:

/// @brief GPIB user tests
///  User invoked GPIB functions and tasks
/// @return  1 matched token, 0 if not
int gpib_tests(int argc, char * argv[])
{
   12062:	a5 e0       	ldi	r26, 0x05	; 5
   12064:	b0 e0       	ldi	r27, 0x00	; 0
   12066:	e7 e3       	ldi	r30, 0x37	; 55
   12068:	f0 e9       	ldi	r31, 0x90	; 144
   1206a:	0c 94 11 e3 	jmp	0x1c622	; 0x1c622 <__prologue_saves__+0x10>

    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   1206e:	fb 01       	movw	r30, r22
   12070:	e0 80       	ld	r14, Z
   12072:	f1 80       	ldd	r15, Z+1	; 0x01

    if(!ptr)
   12074:	e1 14       	cp	r14, r1
   12076:	f1 04       	cpc	r15, r1
   12078:	19 f4       	brne	.+6      	; 0x12080 <gpib_tests+0x1e>
        return(0);
   1207a:	80 e0       	ldi	r24, 0x00	; 0
   1207c:	90 e0       	ldi	r25, 0x00	; 0
   1207e:	de c0       	rjmp	.+444    	; 0x1223c <gpib_tests+0x1da>
   12080:	6b 01       	movw	r12, r22
   12082:	5c 01       	movw	r10, r24

    if( MATCH(ptr,"gpib") )
   12084:	63 eb       	ldi	r22, 0xB3	; 179
   12086:	7d e0       	ldi	r23, 0x0D	; 13
   12088:	c7 01       	movw	r24, r14
   1208a:	0e 94 8b 30 	call	0x6116	; 0x6116 <MATCH>
   1208e:	89 2b       	or	r24, r25
   12090:	a1 f0       	breq	.+40     	; 0x120ba <gpib_tests+0x58>
    {
        ptr = argv[ind++];
   12092:	f6 01       	movw	r30, r12
   12094:	e2 80       	ldd	r14, Z+2	; 0x02
   12096:	f3 80       	ldd	r15, Z+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
   12098:	e1 14       	cp	r14, r1
   1209a:	f1 04       	cpc	r15, r1
   1209c:	21 f4       	brne	.+8      	; 0x120a6 <gpib_tests+0x44>
        {
            gpib_help(1);
   1209e:	81 e0       	ldi	r24, 0x01	; 1
   120a0:	90 e0       	ldi	r25, 0x00	; 0
   120a2:	be df       	rcall	.-132    	; 0x12020 <gpib_help>
   120a4:	c9 c0       	rjmp	.+402    	; 0x12238 <gpib_tests+0x1d6>
        return(0);

    if( MATCH(ptr,"gpib") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
   120a6:	69 e7       	ldi	r22, 0x79	; 121
   120a8:	76 e1       	ldi	r23, 0x16	; 22
   120aa:	c7 01       	movw	r24, r14
   120ac:	0e 94 8b 30 	call	0x6116	; 0x6116 <MATCH>
   120b0:	89 2b       	or	r24, r25
   120b2:	a9 f7       	brne	.-22     	; 0x1209e <gpib_tests+0x3c>
    if(!ptr)
        return(0);

    if( MATCH(ptr,"gpib") )
    {
        ptr = argv[ind++];
   120b4:	c2 e0       	ldi	r28, 0x02	; 2
   120b6:	d0 e0       	ldi	r29, 0x00	; 0
   120b8:	02 c0       	rjmp	.+4      	; 0x120be <gpib_tests+0x5c>

    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   120ba:	c1 e0       	ldi	r28, 0x01	; 1
   120bc:	d0 e0       	ldi	r29, 0x00	; 0
            gpib_help(1);
            return(1);
        }
    }

    if (MATCHI(ptr,"debug") )
   120be:	68 eb       	ldi	r22, 0xB8	; 184
   120c0:	7d e0       	ldi	r23, 0x0D	; 13
   120c2:	c7 01       	movw	r24, r14
   120c4:	0e 94 9f 30 	call	0x613e	; 0x613e <MATCHI>
   120c8:	89 2b       	or	r24, r25
   120ca:	29 f1       	breq	.+74     	; 0x12116 <gpib_tests+0xb4>
    {
        ptr = argv[ind];
   120cc:	fe 01       	movw	r30, r28
   120ce:	ee 0f       	add	r30, r30
   120d0:	ff 1f       	adc	r31, r31
   120d2:	ec 0d       	add	r30, r12
   120d4:	fd 1d       	adc	r31, r13
        if(*ptr == '=')
   120d6:	01 90       	ld	r0, Z+
   120d8:	f0 81       	ld	r31, Z
   120da:	e0 2d       	mov	r30, r0
   120dc:	80 81       	ld	r24, Z
   120de:	8d 33       	cpi	r24, 0x3D	; 61
   120e0:	09 f4       	brne	.+2      	; 0x120e4 <gpib_tests+0x82>
            ++ind;
   120e2:	21 96       	adiw	r28, 0x01	; 1
        debuglevel = get_value(argv[ind]);
   120e4:	cc 0f       	add	r28, r28
   120e6:	dd 1f       	adc	r29, r29
   120e8:	cc 0d       	add	r28, r12
   120ea:	dd 1d       	adc	r29, r13
   120ec:	88 81       	ld	r24, Y
   120ee:	99 81       	ldd	r25, Y+1	; 0x01
   120f0:	0e 94 96 31 	call	0x632c	; 0x632c <get_value>
   120f4:	70 93 b7 01 	sts	0x01B7, r23	; 0x8001b7 <debuglevel+0x1>
   120f8:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <debuglevel>
        printf("debug=%04XH\n", debuglevel);
   120fc:	ed b7       	in	r30, 0x3d	; 61
   120fe:	fe b7       	in	r31, 0x3e	; 62
   12100:	75 83       	std	Z+5, r23	; 0x05
   12102:	64 83       	std	Z+4, r22	; 0x04
   12104:	89 e2       	ldi	r24, 0x29	; 41
   12106:	95 e1       	ldi	r25, 0x15	; 21
   12108:	a0 e0       	ldi	r26, 0x00	; 0
   1210a:	81 83       	std	Z+1, r24	; 0x01
   1210c:	92 83       	std	Z+2, r25	; 0x02
   1210e:	a3 83       	std	Z+3, r26	; 0x03
   12110:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   12114:	91 c0       	rjmp	.+290    	; 0x12238 <gpib_tests+0x1d6>
        return(1);
    }

    if (MATCHI(ptr,"mount") )
   12116:	6e eb       	ldi	r22, 0xBE	; 190
   12118:	7d e0       	ldi	r23, 0x0D	; 13
   1211a:	c7 01       	movw	r24, r14
   1211c:	0e 94 9f 30 	call	0x613e	; 0x613e <MATCHI>
   12120:	89 2b       	or	r24, r25
   12122:	29 f0       	breq	.+10     	; 0x1212e <gpib_tests+0xcc>
    {
		mount(argc, argv);
   12124:	b6 01       	movw	r22, r12
   12126:	c5 01       	movw	r24, r10
   12128:	0e 94 a3 9f 	call	0x13f46	; 0x13f46 <mount>
   1212c:	85 c0       	rjmp	.+266    	; 0x12238 <gpib_tests+0x1d6>
		return(1);
    }

    if (MATCHI(ptr,"addresses") )
   1212e:	64 ec       	ldi	r22, 0xC4	; 196
   12130:	7d e0       	ldi	r23, 0x0D	; 13
   12132:	c7 01       	movw	r24, r14
   12134:	0e 94 9f 30 	call	0x613e	; 0x613e <MATCHI>
   12138:	89 2b       	or	r24, r25
   1213a:	c9 f0       	breq	.+50     	; 0x1216e <gpib_tests+0x10c>
    {
        ptr = argv[ind];
   1213c:	cc 0f       	add	r28, r28
   1213e:	dd 1f       	adc	r29, r29
   12140:	cc 0d       	add	r28, r12
   12142:	dd 1d       	adc	r29, r13
   12144:	88 81       	ld	r24, Y
   12146:	99 81       	ldd	r25, Y+1	; 0x01
        if(ptr && *ptr && MATCH(ptr,"-v"))
   12148:	00 97       	sbiw	r24, 0x00	; 0
   1214a:	69 f0       	breq	.+26     	; 0x12166 <gpib_tests+0x104>
   1214c:	fc 01       	movw	r30, r24
   1214e:	20 81       	ld	r18, Z
   12150:	22 23       	and	r18, r18
   12152:	49 f0       	breq	.+18     	; 0x12166 <gpib_tests+0x104>
   12154:	6e ec       	ldi	r22, 0xCE	; 206
   12156:	7d e0       	ldi	r23, 0x0D	; 13
   12158:	0e 94 8b 30 	call	0x6116	; 0x6116 <MATCH>
   1215c:	89 2b       	or	r24, r25
   1215e:	19 f0       	breq	.+6      	; 0x12166 <gpib_tests+0x104>
            display_Addresses(1);
   12160:	81 e0       	ldi	r24, 0x01	; 1
   12162:	90 e0       	ldi	r25, 0x00	; 0
   12164:	02 c0       	rjmp	.+4      	; 0x1216a <gpib_tests+0x108>
        else
            display_Addresses(0);
   12166:	80 e0       	ldi	r24, 0x00	; 0
   12168:	90 e0       	ldi	r25, 0x00	; 0
   1216a:	4a d1       	rcall	.+660    	; 0x12400 <display_Addresses>
   1216c:	65 c0       	rjmp	.+202    	; 0x12238 <gpib_tests+0x1d6>
        return(1);
    }

    if (MATCHI(ptr,"config") )
   1216e:	61 ed       	ldi	r22, 0xD1	; 209
   12170:	7d e0       	ldi	r23, 0x0D	; 13
   12172:	c7 01       	movw	r24, r14
   12174:	0e 94 9f 30 	call	0x613e	; 0x613e <MATCHI>
   12178:	89 2b       	or	r24, r25
   1217a:	c9 f0       	breq	.+50     	; 0x121ae <gpib_tests+0x14c>
    {
        ptr = argv[ind];
   1217c:	cc 0f       	add	r28, r28
   1217e:	dd 1f       	adc	r29, r29
   12180:	cc 0d       	add	r28, r12
   12182:	dd 1d       	adc	r29, r13
   12184:	88 81       	ld	r24, Y
   12186:	99 81       	ldd	r25, Y+1	; 0x01
        if(ptr && *ptr && MATCH(ptr,"-v"))
   12188:	00 97       	sbiw	r24, 0x00	; 0
   1218a:	69 f0       	breq	.+26     	; 0x121a6 <gpib_tests+0x144>
   1218c:	fc 01       	movw	r30, r24
   1218e:	20 81       	ld	r18, Z
   12190:	22 23       	and	r18, r18
   12192:	49 f0       	breq	.+18     	; 0x121a6 <gpib_tests+0x144>
   12194:	6e ec       	ldi	r22, 0xCE	; 206
   12196:	7d e0       	ldi	r23, 0x0D	; 13
   12198:	0e 94 8b 30 	call	0x6116	; 0x6116 <MATCH>
   1219c:	89 2b       	or	r24, r25
   1219e:	19 f0       	breq	.+6      	; 0x121a6 <gpib_tests+0x144>
            display_Config(1);
   121a0:	81 e0       	ldi	r24, 0x01	; 1
   121a2:	90 e0       	ldi	r25, 0x00	; 0
   121a4:	02 c0       	rjmp	.+4      	; 0x121aa <gpib_tests+0x148>
        else
            display_Config(0);
   121a6:	80 e0       	ldi	r24, 0x00	; 0
   121a8:	90 e0       	ldi	r25, 0x00	; 0
   121aa:	05 d2       	rcall	.+1034   	; 0x125b6 <display_Config>
   121ac:	45 c0       	rjmp	.+138    	; 0x12238 <gpib_tests+0x1d6>
        return(1);
    }

    if (MATCHI(ptr,"elapsed_reset") )
   121ae:	68 ed       	ldi	r22, 0xD8	; 216
   121b0:	7d e0       	ldi	r23, 0x0D	; 13
   121b2:	c7 01       	movw	r24, r14
   121b4:	0e 94 9f 30 	call	0x613e	; 0x613e <MATCHI>
   121b8:	89 2b       	or	r24, r25
   121ba:	19 f0       	breq	.+6      	; 0x121c2 <gpib_tests+0x160>
    {
        gpib_timer_elapsed_begin();
   121bc:	0e 94 b3 83 	call	0x10766	; 0x10766 <gpib_timer_elapsed_begin>
   121c0:	3b c0       	rjmp	.+118    	; 0x12238 <gpib_tests+0x1d6>
        return(1);
    }

    if (MATCHI(ptr,"elapsed") )
   121c2:	66 ee       	ldi	r22, 0xE6	; 230
   121c4:	7d e0       	ldi	r23, 0x0D	; 13
   121c6:	c7 01       	movw	r24, r14
   121c8:	0e 94 9f 30 	call	0x613e	; 0x613e <MATCHI>
   121cc:	89 2b       	or	r24, r25
   121ce:	29 f0       	breq	.+10     	; 0x121da <gpib_tests+0x178>
    {
        gpib_timer_elapsed_end("gpib elapsed:");
   121d0:	8e ee       	ldi	r24, 0xEE	; 238
   121d2:	9d e0       	ldi	r25, 0x0D	; 13
   121d4:	0e 94 c5 83 	call	0x1078a	; 0x1078a <gpib_timer_elapsed_end>
   121d8:	2f c0       	rjmp	.+94     	; 0x12238 <gpib_tests+0x1d6>
        return(1);
    }

    if (MATCHI(ptr,"task") )
   121da:	6c ef       	ldi	r22, 0xFC	; 252
   121dc:	7d e0       	ldi	r23, 0x0D	; 13
   121de:	c7 01       	movw	r24, r14
   121e0:	0e 94 9f 30 	call	0x613e	; 0x613e <MATCHI>
   121e4:	89 2b       	or	r24, r25
    {
        gpib_task();
   121e6:	11 f0       	breq	.+4      	; 0x121ec <gpib_tests+0x18a>
   121e8:	bb de       	rcall	.-650    	; 0x11f60 <gpib_task>
   121ea:	26 c0       	rjmp	.+76     	; 0x12238 <gpib_tests+0x1d6>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
   121ec:	8e 01       	movw	r16, r28
   121ee:	0f 5f       	subi	r16, 0xFF	; 255
   121f0:	1f 4f       	sbci	r17, 0xFF	; 255
   121f2:	95 01       	movw	r18, r10
   121f4:	a8 01       	movw	r20, r16
   121f6:	61 e0       	ldi	r22, 0x01	; 1
   121f8:	7e e0       	ldi	r23, 0x0E	; 14
   121fa:	c7 01       	movw	r24, r14
   121fc:	0e 94 b3 30 	call	0x6166	; 0x6166 <MATCHARGS>
   12200:	89 2b       	or	r24, r25
   12202:	09 f4       	brne	.+2      	; 0x12206 <gpib_tests+0x1a4>
   12204:	3a cf       	rjmp	.-396    	; 0x1207a <gpib_tests+0x18>
    {
        int detail = 0;
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
   12206:	00 0f       	add	r16, r16
   12208:	11 1f       	adc	r17, r17
   1220a:	e6 01       	movw	r28, r12
   1220c:	c0 0f       	add	r28, r16
   1220e:	d1 1f       	adc	r29, r17
   12210:	88 81       	ld	r24, Y
   12212:	99 81       	ldd	r25, Y+1	; 0x01
   12214:	00 97       	sbiw	r24, 0x00	; 0
   12216:	51 f0       	breq	.+20     	; 0x1222c <gpib_tests+0x1ca>
   12218:	67 e0       	ldi	r22, 0x07	; 7
   1221a:	7e e0       	ldi	r23, 0x0E	; 14
   1221c:	0e 94 8b 30 	call	0x6116	; 0x6116 <MATCH>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
    {
        int detail = 0;
   12220:	61 e0       	ldi	r22, 0x01	; 1
   12222:	70 e0       	ldi	r23, 0x00	; 0
   12224:	89 2b       	or	r24, r25
   12226:	21 f4       	brne	.+8      	; 0x12230 <gpib_tests+0x1ce>
   12228:	60 e0       	ldi	r22, 0x00	; 0
   1222a:	02 c0       	rjmp	.+4      	; 0x12230 <gpib_tests+0x1ce>
   1222c:	60 e0       	ldi	r22, 0x00	; 0
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
            detail = 1;
        gpib_trace_task(argv[ind], detail);
   1222e:	70 e0       	ldi	r23, 0x00	; 0
   12230:	22 97       	sbiw	r28, 0x02	; 2
   12232:	88 81       	ld	r24, Y
   12234:	99 81       	ldd	r25, Y+1	; 0x01
   12236:	32 da       	rcall	.-2972   	; 0x1169c <gpib_trace_task>
        return(1);
   12238:	81 e0       	ldi	r24, 0x01	; 1
   1223a:	90 e0       	ldi	r25, 0x00	; 0

    }                                             // port write
#endif                                        // #ifdef GPIB_EXTENDED_TESTS

    return(0);
}
   1223c:	cd b7       	in	r28, 0x3d	; 61
   1223e:	de b7       	in	r29, 0x3e	; 62
   12240:	25 96       	adiw	r28, 0x05	; 5
   12242:	ea e0       	ldi	r30, 0x0A	; 10
   12244:	0c 94 2d e3 	jmp	0x1c65a	; 0x1c65a <__epilogue_restores__+0x10>

00012248 <tok_index>:
        }
    }
    if(bad)
        return(0);
    return(1);
}
   12248:	ef 92       	push	r14
   1224a:	ff 92       	push	r15
   1224c:	0f 93       	push	r16
   1224e:	1f 93       	push	r17
   12250:	cf 93       	push	r28
   12252:	df 93       	push	r29
   12254:	7c 01       	movw	r14, r24
   12256:	c4 ec       	ldi	r28, 0xC4	; 196
   12258:	d1 e0       	ldi	r29, 0x01	; 1
   1225a:	00 e0       	ldi	r16, 0x00	; 0
   1225c:	10 e0       	ldi	r17, 0x00	; 0
   1225e:	8a 81       	ldd	r24, Y+2	; 0x02
   12260:	9b 81       	ldd	r25, Y+3	; 0x03
   12262:	8f 3f       	cpi	r24, 0xFF	; 255
   12264:	2f ef       	ldi	r18, 0xFF	; 255
   12266:	92 07       	cpc	r25, r18
   12268:	61 f0       	breq	.+24     	; 0x12282 <tok_index+0x3a>
   1226a:	68 81       	ld	r22, Y
   1226c:	79 81       	ldd	r23, Y+1	; 0x01
   1226e:	c7 01       	movw	r24, r14
   12270:	0e 94 9f 30 	call	0x613e	; 0x613e <MATCHI>
   12274:	24 96       	adiw	r28, 0x04	; 4
   12276:	89 2b       	or	r24, r25
   12278:	19 f4       	brne	.+6      	; 0x12280 <tok_index+0x38>
   1227a:	0f 5f       	subi	r16, 0xFF	; 255
   1227c:	1f 4f       	sbci	r17, 0xFF	; 255
   1227e:	ef cf       	rjmp	.-34     	; 0x1225e <tok_index+0x16>
   12280:	c8 01       	movw	r24, r16
   12282:	cd b7       	in	r28, 0x3d	; 61
   12284:	de b7       	in	r29, 0x3e	; 62
   12286:	e6 e0       	ldi	r30, 0x06	; 6
   12288:	0c 94 31 e3 	jmp	0x1c662	; 0x1c662 <__epilogue_restores__+0x18>

0001228c <tok_name>:
   1228c:	e4 ec       	ldi	r30, 0xC4	; 196
   1228e:	f1 e0       	ldi	r31, 0x01	; 1
   12290:	20 e0       	ldi	r18, 0x00	; 0
   12292:	30 e0       	ldi	r19, 0x00	; 0
   12294:	90 e0       	ldi	r25, 0x00	; 0
   12296:	42 81       	ldd	r20, Z+2	; 0x02
   12298:	53 81       	ldd	r21, Z+3	; 0x03
   1229a:	4f 3f       	cpi	r20, 0xFF	; 255
   1229c:	6f ef       	ldi	r22, 0xFF	; 255
   1229e:	56 07       	cpc	r21, r22
   122a0:	89 f0       	breq	.+34     	; 0x122c4 <tok_name+0x38>
   122a2:	34 96       	adiw	r30, 0x04	; 4
   122a4:	48 17       	cp	r20, r24
   122a6:	59 07       	cpc	r21, r25
   122a8:	51 f4       	brne	.+20     	; 0x122be <tok_name+0x32>
   122aa:	22 0f       	add	r18, r18
   122ac:	33 1f       	adc	r19, r19
   122ae:	22 0f       	add	r18, r18
   122b0:	33 1f       	adc	r19, r19
   122b2:	f9 01       	movw	r30, r18
   122b4:	ec 53       	subi	r30, 0x3C	; 60
   122b6:	fe 4f       	sbci	r31, 0xFE	; 254
   122b8:	80 81       	ld	r24, Z
   122ba:	91 81       	ldd	r25, Z+1	; 0x01
   122bc:	08 95       	ret
   122be:	2f 5f       	subi	r18, 0xFF	; 255
   122c0:	3f 4f       	sbci	r19, 0xFF	; 255
   122c2:	e9 cf       	rjmp	.-46     	; 0x12296 <tok_name+0xa>
   122c4:	8d e2       	ldi	r24, 0x2D	; 45
   122c6:	9c e0       	ldi	r25, 0x0C	; 12
   122c8:	08 95       	ret

000122ca <print_tok_val>:
   122ca:	cf 92       	push	r12
   122cc:	df 92       	push	r13
   122ce:	ef 92       	push	r14
   122d0:	ff 92       	push	r15
   122d2:	0f 93       	push	r16
   122d4:	1f 93       	push	r17
   122d6:	cf 93       	push	r28
   122d8:	ad b7       	in	r26, 0x3d	; 61
   122da:	be b7       	in	r27, 0x3e	; 62
   122dc:	1d 97       	sbiw	r26, 0x0d	; 13
   122de:	0f b6       	in	r0, 0x3f	; 63
   122e0:	f8 94       	cli
   122e2:	be bf       	out	0x3e, r27	; 62
   122e4:	0f be       	out	0x3f, r0	; 63
   122e6:	ad bf       	out	0x3d, r26	; 61
   122e8:	c6 2f       	mov	r28, r22
   122ea:	69 01       	movw	r12, r18
   122ec:	7a 01       	movw	r14, r20
   122ee:	ce df       	rcall	.-100    	; 0x1228c <tok_name>
   122f0:	8c 01       	movw	r16, r24
   122f2:	cc 23       	and	r28, r28
   122f4:	31 f0       	breq	.+12     	; 0x12302 <print_tok_val+0x38>
   122f6:	80 e2       	ldi	r24, 0x20	; 32
   122f8:	90 e0       	ldi	r25, 0x00	; 0
   122fa:	0e 94 9d 74 	call	0xe93a	; 0xe93a <putchar>
   122fe:	c1 50       	subi	r28, 0x01	; 1
   12300:	f8 cf       	rjmp	.-16     	; 0x122f2 <print_tok_val+0x28>
   12302:	ed b7       	in	r30, 0x3d	; 61
   12304:	fe b7       	in	r31, 0x3e	; 62
   12306:	c2 86       	std	Z+10, r12	; 0x0a
   12308:	d3 86       	std	Z+11, r13	; 0x0b
   1230a:	e4 86       	std	Z+12, r14	; 0x0c
   1230c:	f5 86       	std	Z+13, r15	; 0x0d
   1230e:	c6 82       	std	Z+6, r12	; 0x06
   12310:	d7 82       	std	Z+7, r13	; 0x07
   12312:	e0 86       	std	Z+8, r14	; 0x08
   12314:	f1 86       	std	Z+9, r15	; 0x09
   12316:	15 83       	std	Z+5, r17	; 0x05
   12318:	04 83       	std	Z+4, r16	; 0x04
   1231a:	8d ed       	ldi	r24, 0xDD	; 221
   1231c:	9d e1       	ldi	r25, 0x1D	; 29
   1231e:	a0 e0       	ldi	r26, 0x00	; 0
   12320:	81 83       	std	Z+1, r24	; 0x01
   12322:	92 83       	std	Z+2, r25	; 0x02
   12324:	a3 83       	std	Z+3, r26	; 0x03
   12326:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   1232a:	ad b7       	in	r26, 0x3d	; 61
   1232c:	be b7       	in	r27, 0x3e	; 62
   1232e:	1d 96       	adiw	r26, 0x0d	; 13
   12330:	0f b6       	in	r0, 0x3f	; 63
   12332:	f8 94       	cli
   12334:	be bf       	out	0x3e, r27	; 62
   12336:	0f be       	out	0x3f, r0	; 63
   12338:	ad bf       	out	0x3d, r26	; 61
   1233a:	cf 91       	pop	r28
   1233c:	1f 91       	pop	r17
   1233e:	0f 91       	pop	r16
   12340:	ff 90       	pop	r15
   12342:	ef 90       	pop	r14
   12344:	df 90       	pop	r13
   12346:	cf 90       	pop	r12
   12348:	08 95       	ret

0001234a <print_tok_str>:
   1234a:	ef 92       	push	r14
   1234c:	ff 92       	push	r15
   1234e:	0f 93       	push	r16
   12350:	1f 93       	push	r17
   12352:	cf 93       	push	r28
   12354:	ad b7       	in	r26, 0x3d	; 61
   12356:	be b7       	in	r27, 0x3e	; 62
   12358:	17 97       	sbiw	r26, 0x07	; 7
   1235a:	0f b6       	in	r0, 0x3f	; 63
   1235c:	f8 94       	cli
   1235e:	be bf       	out	0x3e, r27	; 62
   12360:	0f be       	out	0x3f, r0	; 63
   12362:	ad bf       	out	0x3d, r26	; 61
   12364:	c6 2f       	mov	r28, r22
   12366:	7a 01       	movw	r14, r20
   12368:	91 df       	rcall	.-222    	; 0x1228c <tok_name>
   1236a:	8c 01       	movw	r16, r24
   1236c:	cc 23       	and	r28, r28
   1236e:	31 f0       	breq	.+12     	; 0x1237c <print_tok_str+0x32>
   12370:	80 e2       	ldi	r24, 0x20	; 32
   12372:	90 e0       	ldi	r25, 0x00	; 0
   12374:	0e 94 9d 74 	call	0xe93a	; 0xe93a <putchar>
   12378:	c1 50       	subi	r28, 0x01	; 1
   1237a:	f8 cf       	rjmp	.-16     	; 0x1236c <print_tok_str+0x22>
   1237c:	ed b7       	in	r30, 0x3d	; 61
   1237e:	fe b7       	in	r31, 0x3e	; 62
   12380:	f7 82       	std	Z+7, r15	; 0x07
   12382:	e6 82       	std	Z+6, r14	; 0x06
   12384:	15 83       	std	Z+5, r17	; 0x05
   12386:	04 83       	std	Z+4, r16	; 0x04
   12388:	81 ed       	ldi	r24, 0xD1	; 209
   1238a:	9d e1       	ldi	r25, 0x1D	; 29
   1238c:	a0 e0       	ldi	r26, 0x00	; 0
   1238e:	81 83       	std	Z+1, r24	; 0x01
   12390:	92 83       	std	Z+2, r25	; 0x02
   12392:	a3 83       	std	Z+3, r26	; 0x03
   12394:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   12398:	ad b7       	in	r26, 0x3d	; 61
   1239a:	be b7       	in	r27, 0x3e	; 62
   1239c:	17 96       	adiw	r26, 0x07	; 7
   1239e:	0f b6       	in	r0, 0x3f	; 63
   123a0:	f8 94       	cli
   123a2:	be bf       	out	0x3e, r27	; 62
   123a4:	0f be       	out	0x3f, r0	; 63
   123a6:	ad bf       	out	0x3d, r26	; 61
   123a8:	cf 91       	pop	r28
   123aa:	1f 91       	pop	r17
   123ac:	0f 91       	pop	r16
   123ae:	ff 90       	pop	r15
   123b0:	ef 90       	pop	r14
   123b2:	08 95       	ret

000123b4 <print_tok>:
   123b4:	0f 93       	push	r16
   123b6:	1f 93       	push	r17
   123b8:	cf 93       	push	r28
   123ba:	00 d0       	rcall	.+0      	; 0x123bc <print_tok+0x8>
   123bc:	00 d0       	rcall	.+0      	; 0x123be <print_tok+0xa>
   123be:	1f 92       	push	r1
   123c0:	c6 2f       	mov	r28, r22
   123c2:	64 df       	rcall	.-312    	; 0x1228c <tok_name>
   123c4:	8c 01       	movw	r16, r24
   123c6:	cc 23       	and	r28, r28
   123c8:	31 f0       	breq	.+12     	; 0x123d6 <print_tok+0x22>
   123ca:	80 e2       	ldi	r24, 0x20	; 32
   123cc:	90 e0       	ldi	r25, 0x00	; 0
   123ce:	0e 94 9d 74 	call	0xe93a	; 0xe93a <putchar>
   123d2:	c1 50       	subi	r28, 0x01	; 1
   123d4:	f8 cf       	rjmp	.-16     	; 0x123c6 <print_tok+0x12>
   123d6:	ed b7       	in	r30, 0x3d	; 61
   123d8:	fe b7       	in	r31, 0x3e	; 62
   123da:	15 83       	std	Z+5, r17	; 0x05
   123dc:	04 83       	std	Z+4, r16	; 0x04
   123de:	8d ec       	ldi	r24, 0xCD	; 205
   123e0:	9d e1       	ldi	r25, 0x1D	; 29
   123e2:	a0 e0       	ldi	r26, 0x00	; 0
   123e4:	81 83       	std	Z+1, r24	; 0x01
   123e6:	92 83       	std	Z+2, r25	; 0x02
   123e8:	a3 83       	std	Z+3, r26	; 0x03
   123ea:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   123ee:	0f 90       	pop	r0
   123f0:	0f 90       	pop	r0
   123f2:	0f 90       	pop	r0
   123f4:	0f 90       	pop	r0
   123f6:	0f 90       	pop	r0
   123f8:	cf 91       	pop	r28
   123fa:	1f 91       	pop	r17
   123fc:	0f 91       	pop	r16
   123fe:	08 95       	ret

00012400 <display_Addresses>:
   12400:	2f 92       	push	r2
   12402:	3f 92       	push	r3
   12404:	4f 92       	push	r4
   12406:	6f 92       	push	r6
   12408:	7f 92       	push	r7
   1240a:	8f 92       	push	r8
   1240c:	cf 92       	push	r12
   1240e:	df 92       	push	r13
   12410:	ef 92       	push	r14
   12412:	cf 93       	push	r28
   12414:	df 93       	push	r29
   12416:	cd b7       	in	r28, 0x3d	; 61
   12418:	de b7       	in	r29, 0x3e	; 62
   1241a:	2a 97       	sbiw	r28, 0x0a	; 10
   1241c:	0f b6       	in	r0, 0x3f	; 63
   1241e:	f8 94       	cli
   12420:	de bf       	out	0x3e, r29	; 62
   12422:	0f be       	out	0x3f, r0	; 63
   12424:	cd bf       	out	0x3d, r28	; 61
   12426:	87 e9       	ldi	r24, 0x97	; 151
   12428:	9a e1       	ldi	r25, 0x1A	; 26
   1242a:	a0 e0       	ldi	r26, 0x00	; 0
   1242c:	ed b7       	in	r30, 0x3d	; 61
   1242e:	fe b7       	in	r31, 0x3e	; 62
   12430:	81 83       	std	Z+1, r24	; 0x01
   12432:	92 83       	std	Z+2, r25	; 0x02
   12434:	a3 83       	std	Z+3, r26	; 0x03
   12436:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   1243a:	20 e0       	ldi	r18, 0x00	; 0
   1243c:	3f e1       	ldi	r19, 0x1F	; 31
   1243e:	3a 87       	std	Y+10, r19	; 0x0a
   12440:	29 87       	std	Y+9, r18	; 0x09
   12442:	89 e7       	ldi	r24, 0x79	; 121
   12444:	9a e1       	ldi	r25, 0x1A	; 26
   12446:	6c 01       	movw	r12, r24
   12448:	e1 2c       	mov	r14, r1
   1244a:	8b e7       	ldi	r24, 0x7B	; 123
   1244c:	9a e1       	ldi	r25, 0x1A	; 26
   1244e:	3c 01       	movw	r6, r24
   12450:	81 2c       	mov	r8, r1
   12452:	84 e8       	ldi	r24, 0x84	; 132
   12454:	9a e1       	ldi	r25, 0x1A	; 26
   12456:	1c 01       	movw	r2, r24
   12458:	41 2c       	mov	r4, r1
   1245a:	8e e8       	ldi	r24, 0x8E	; 142
   1245c:	9a e1       	ldi	r25, 0x1A	; 26
   1245e:	9c 01       	movw	r18, r24
   12460:	40 e0       	ldi	r20, 0x00	; 0
   12462:	2e 83       	std	Y+6, r18	; 0x06
   12464:	3f 83       	std	Y+7, r19	; 0x07
   12466:	48 87       	std	Y+8, r20	; 0x08
   12468:	e9 85       	ldd	r30, Y+9	; 0x09
   1246a:	fa 85       	ldd	r31, Y+10	; 0x0a
   1246c:	80 81       	ld	r24, Z
   1246e:	88 23       	and	r24, r24
   12470:	09 f4       	brne	.+2      	; 0x12474 <display_Addresses+0x74>
   12472:	7b c0       	rjmp	.+246    	; 0x1256a <display_Addresses+0x16a>
   12474:	83 30       	cpi	r24, 0x03	; 3
   12476:	21 f0       	breq	.+8      	; 0x12480 <display_Addresses+0x80>
   12478:	81 30       	cpi	r24, 0x01	; 1
   1247a:	09 f0       	breq	.+2      	; 0x1247e <display_Addresses+0x7e>
   1247c:	5a c0       	rjmp	.+180    	; 0x12532 <display_Addresses+0x132>
   1247e:	1f c0       	rjmp	.+62     	; 0x124be <display_Addresses+0xbe>
   12480:	e9 85       	ldd	r30, Y+9	; 0x09
   12482:	fa 85       	ldd	r31, Y+10	; 0x0a
   12484:	87 a1       	ldd	r24, Z+39	; 0x27
   12486:	90 a5       	ldd	r25, Z+40	; 0x28
   12488:	90 93 75 19 	sts	0x1975, r25	; 0x801975 <SS80p+0x1>
   1248c:	80 93 74 19 	sts	0x1974, r24	; 0x801974 <SS80p>
   12490:	cf 01       	movw	r24, r30
   12492:	07 96       	adiw	r24, 0x07	; 7
   12494:	ed b7       	in	r30, 0x3d	; 61
   12496:	fe b7       	in	r31, 0x3e	; 62
   12498:	95 83       	std	Z+5, r25	; 0x05
   1249a:	84 83       	std	Z+4, r24	; 0x04
   1249c:	2e 81       	ldd	r18, Y+6	; 0x06
   1249e:	3f 81       	ldd	r19, Y+7	; 0x07
   124a0:	48 85       	ldd	r20, Y+8	; 0x08
   124a2:	21 83       	std	Z+1, r18	; 0x01
   124a4:	32 83       	std	Z+2, r19	; 0x02
   124a6:	43 83       	std	Z+3, r20	; 0x03
   124a8:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   124ac:	e0 91 74 19 	lds	r30, 0x1974	; 0x801974 <SS80p>
   124b0:	f0 91 75 19 	lds	r31, 0x1975	; 0x801975 <SS80p+0x1>
   124b4:	42 81       	ldd	r20, Z+2	; 0x02
   124b6:	53 81       	ldd	r21, Z+3	; 0x03
   124b8:	64 e0       	ldi	r22, 0x04	; 4
   124ba:	82 e1       	ldi	r24, 0x12	; 18
   124bc:	46 df       	rcall	.-372    	; 0x1234a <print_tok_str>
   124be:	e9 85       	ldd	r30, Y+9	; 0x09
   124c0:	fa 85       	ldd	r31, Y+10	; 0x0a
   124c2:	80 81       	ld	r24, Z
   124c4:	81 30       	cpi	r24, 0x01	; 1
   124c6:	d1 f4       	brne	.+52     	; 0x124fc <display_Addresses+0xfc>
   124c8:	87 a1       	ldd	r24, Z+39	; 0x27
   124ca:	90 a5       	ldd	r25, Z+40	; 0x28
   124cc:	90 93 71 19 	sts	0x1971, r25	; 0x801971 <AMIGOp+0x1>
   124d0:	80 93 70 19 	sts	0x1970, r24	; 0x801970 <AMIGOp>
   124d4:	cf 01       	movw	r24, r30
   124d6:	07 96       	adiw	r24, 0x07	; 7
   124d8:	ed b7       	in	r30, 0x3d	; 61
   124da:	fe b7       	in	r31, 0x3e	; 62
   124dc:	95 83       	std	Z+5, r25	; 0x05
   124de:	84 83       	std	Z+4, r24	; 0x04
   124e0:	21 82       	std	Z+1, r2	; 0x01
   124e2:	32 82       	std	Z+2, r3	; 0x02
   124e4:	43 82       	std	Z+3, r4	; 0x03
   124e6:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   124ea:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <AMIGOp>
   124ee:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <AMIGOp+0x1>
   124f2:	42 81       	ldd	r20, Z+2	; 0x02
   124f4:	53 81       	ldd	r21, Z+3	; 0x03
   124f6:	64 e0       	ldi	r22, 0x04	; 4
   124f8:	82 e1       	ldi	r24, 0x12	; 18
   124fa:	27 df       	rcall	.-434    	; 0x1234a <print_tok_str>
   124fc:	e9 85       	ldd	r30, Y+9	; 0x09
   124fe:	fa 85       	ldd	r31, Y+10	; 0x0a
   12500:	21 81       	ldd	r18, Z+1	; 0x01
   12502:	30 e0       	ldi	r19, 0x00	; 0
   12504:	40 e0       	ldi	r20, 0x00	; 0
   12506:	50 e0       	ldi	r21, 0x00	; 0
   12508:	64 e0       	ldi	r22, 0x04	; 4
   1250a:	81 e0       	ldi	r24, 0x01	; 1
   1250c:	de de       	rcall	.-580    	; 0x122ca <print_tok_val>
   1250e:	e9 85       	ldd	r30, Y+9	; 0x09
   12510:	fa 85       	ldd	r31, Y+10	; 0x0a
   12512:	22 81       	ldd	r18, Z+2	; 0x02
   12514:	30 e0       	ldi	r19, 0x00	; 0
   12516:	40 e0       	ldi	r20, 0x00	; 0
   12518:	50 e0       	ldi	r21, 0x00	; 0
   1251a:	64 e0       	ldi	r22, 0x04	; 4
   1251c:	8f e1       	ldi	r24, 0x1F	; 31
   1251e:	d5 de       	rcall	.-598    	; 0x122ca <print_tok_val>
   12520:	e9 85       	ldd	r30, Y+9	; 0x09
   12522:	fa 85       	ldd	r31, Y+10	; 0x0a
   12524:	23 81       	ldd	r18, Z+3	; 0x03
   12526:	34 81       	ldd	r19, Z+4	; 0x04
   12528:	45 81       	ldd	r20, Z+5	; 0x05
   1252a:	56 81       	ldd	r21, Z+6	; 0x06
   1252c:	64 e0       	ldi	r22, 0x04	; 4
   1252e:	83 e0       	ldi	r24, 0x03	; 3
   12530:	cc de       	rcall	.-616    	; 0x122ca <print_tok_val>
   12532:	e9 85       	ldd	r30, Y+9	; 0x09
   12534:	fa 85       	ldd	r31, Y+10	; 0x0a
   12536:	80 81       	ld	r24, Z
   12538:	84 30       	cpi	r24, 0x04	; 4
   1253a:	81 f4       	brne	.+32     	; 0x1255c <display_Addresses+0x15c>
   1253c:	ed b7       	in	r30, 0x3d	; 61
   1253e:	fe b7       	in	r31, 0x3e	; 62
   12540:	61 82       	std	Z+1, r6	; 0x01
   12542:	72 82       	std	Z+2, r7	; 0x02
   12544:	83 82       	std	Z+3, r8	; 0x03
   12546:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   1254a:	e9 85       	ldd	r30, Y+9	; 0x09
   1254c:	fa 85       	ldd	r31, Y+10	; 0x0a
   1254e:	21 81       	ldd	r18, Z+1	; 0x01
   12550:	30 e0       	ldi	r19, 0x00	; 0
   12552:	40 e0       	ldi	r20, 0x00	; 0
   12554:	50 e0       	ldi	r21, 0x00	; 0
   12556:	64 e0       	ldi	r22, 0x04	; 4
   12558:	81 e0       	ldi	r24, 0x01	; 1
   1255a:	b7 de       	rcall	.-658    	; 0x122ca <print_tok_val>
   1255c:	ed b7       	in	r30, 0x3d	; 61
   1255e:	fe b7       	in	r31, 0x3e	; 62
   12560:	c1 82       	std	Z+1, r12	; 0x01
   12562:	d2 82       	std	Z+2, r13	; 0x02
   12564:	e3 82       	std	Z+3, r14	; 0x03
   12566:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   1256a:	29 85       	ldd	r18, Y+9	; 0x09
   1256c:	3a 85       	ldd	r19, Y+10	; 0x0a
   1256e:	25 5d       	subi	r18, 0xD5	; 213
   12570:	3f 4f       	sbci	r19, 0xFF	; 255
   12572:	3a 87       	std	Y+10, r19	; 0x0a
   12574:	29 87       	std	Y+9, r18	; 0x09
   12576:	24 50       	subi	r18, 0x04	; 4
   12578:	31 42       	sbci	r19, 0x21	; 33
   1257a:	09 f0       	breq	.+2      	; 0x1257e <display_Addresses+0x17e>
   1257c:	75 cf       	rjmp	.-278    	; 0x12468 <display_Addresses+0x68>
   1257e:	87 e7       	ldi	r24, 0x77	; 119
   12580:	9a e1       	ldi	r25, 0x1A	; 26
   12582:	a0 e0       	ldi	r26, 0x00	; 0
   12584:	ed b7       	in	r30, 0x3d	; 61
   12586:	fe b7       	in	r31, 0x3e	; 62
   12588:	81 83       	std	Z+1, r24	; 0x01
   1258a:	92 83       	std	Z+2, r25	; 0x02
   1258c:	a3 83       	std	Z+3, r26	; 0x03
   1258e:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   12592:	2a 96       	adiw	r28, 0x0a	; 10
   12594:	0f b6       	in	r0, 0x3f	; 63
   12596:	f8 94       	cli
   12598:	de bf       	out	0x3e, r29	; 62
   1259a:	0f be       	out	0x3f, r0	; 63
   1259c:	cd bf       	out	0x3d, r28	; 61
   1259e:	df 91       	pop	r29
   125a0:	cf 91       	pop	r28
   125a2:	ef 90       	pop	r14
   125a4:	df 90       	pop	r13
   125a6:	cf 90       	pop	r12
   125a8:	8f 90       	pop	r8
   125aa:	7f 90       	pop	r7
   125ac:	6f 90       	pop	r6
   125ae:	4f 90       	pop	r4
   125b0:	3f 90       	pop	r3
   125b2:	2f 90       	pop	r2
   125b4:	08 95       	ret

000125b6 <display_Config>:
   125b6:	2f 92       	push	r2
   125b8:	3f 92       	push	r3
   125ba:	4f 92       	push	r4
   125bc:	6f 92       	push	r6
   125be:	7f 92       	push	r7
   125c0:	8f 92       	push	r8
   125c2:	af 92       	push	r10
   125c4:	bf 92       	push	r11
   125c6:	cf 92       	push	r12
   125c8:	df 92       	push	r13
   125ca:	ef 92       	push	r14
   125cc:	0f 93       	push	r16
   125ce:	1f 93       	push	r17
   125d0:	cf 93       	push	r28
   125d2:	df 93       	push	r29
   125d4:	cd b7       	in	r28, 0x3d	; 61
   125d6:	de b7       	in	r29, 0x3e	; 62
   125d8:	62 97       	sbiw	r28, 0x12	; 18
   125da:	0f b6       	in	r0, 0x3f	; 63
   125dc:	f8 94       	cli
   125de:	de bf       	out	0x3e, r29	; 62
   125e0:	0f be       	out	0x3f, r0	; 63
   125e2:	cd bf       	out	0x3d, r28	; 61
   125e4:	5c 01       	movw	r10, r24
   125e6:	87 e5       	ldi	r24, 0x57	; 87
   125e8:	9a e1       	ldi	r25, 0x1A	; 26
   125ea:	a0 e0       	ldi	r26, 0x00	; 0
   125ec:	ed b7       	in	r30, 0x3d	; 61
   125ee:	fe b7       	in	r31, 0x3e	; 62
   125f0:	81 83       	std	Z+1, r24	; 0x01
   125f2:	92 83       	std	Z+2, r25	; 0x02
   125f4:	a3 83       	std	Z+3, r26	; 0x03
   125f6:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   125fa:	00 e0       	ldi	r16, 0x00	; 0
   125fc:	1f e1       	ldi	r17, 0x1F	; 31
   125fe:	8c ed       	ldi	r24, 0xDC	; 220
   12600:	99 e1       	ldi	r25, 0x19	; 25
   12602:	9c 01       	movw	r18, r24
   12604:	40 e0       	ldi	r20, 0x00	; 0
   12606:	28 87       	std	Y+8, r18	; 0x08
   12608:	39 87       	std	Y+9, r19	; 0x09
   1260a:	4a 87       	std	Y+10, r20	; 0x0a
   1260c:	81 e1       	ldi	r24, 0x11	; 17
   1260e:	9a e1       	ldi	r25, 0x1A	; 26
   12610:	9c 01       	movw	r18, r24
   12612:	40 e0       	ldi	r20, 0x00	; 0
   12614:	2b 87       	std	Y+11, r18	; 0x0b
   12616:	3c 87       	std	Y+12, r19	; 0x0c
   12618:	4d 87       	std	Y+13, r20	; 0x0d
   1261a:	82 ef       	ldi	r24, 0xF2	; 242
   1261c:	99 e1       	ldi	r25, 0x19	; 25
   1261e:	9c 01       	movw	r18, r24
   12620:	40 e0       	ldi	r20, 0x00	; 0
   12622:	2e 87       	std	Y+14, r18	; 0x0e
   12624:	3f 87       	std	Y+15, r19	; 0x0f
   12626:	48 8b       	std	Y+16, r20	; 0x10
   12628:	8e ed       	ldi	r24, 0xDE	; 222
   1262a:	99 e1       	ldi	r25, 0x19	; 25
   1262c:	1c 01       	movw	r2, r24
   1262e:	41 2c       	mov	r4, r1
   12630:	8e e4       	ldi	r24, 0x4E	; 78
   12632:	9a e1       	ldi	r25, 0x1A	; 26
   12634:	6c 01       	movw	r12, r24
   12636:	e1 2c       	mov	r14, r1
   12638:	8f e2       	ldi	r24, 0x2F	; 47
   1263a:	9a e1       	ldi	r25, 0x1A	; 26
   1263c:	3c 01       	movw	r6, r24
   1263e:	81 2c       	mov	r8, r1
   12640:	f8 01       	movw	r30, r16
   12642:	80 81       	ld	r24, Z
   12644:	88 23       	and	r24, r24
   12646:	09 f4       	brne	.+2      	; 0x1264a <display_Config+0x94>
   12648:	14 c2       	rjmp	.+1064   	; 0x12a72 <display_Config+0x4bc>
   1264a:	83 30       	cpi	r24, 0x03	; 3
   1264c:	09 f0       	breq	.+2      	; 0x12650 <display_Config+0x9a>
   1264e:	38 c1       	rjmp	.+624    	; 0x128c0 <display_Config+0x30a>
   12650:	27 a1       	ldd	r18, Z+39	; 0x27
   12652:	30 a5       	ldd	r19, Z+40	; 0x28
   12654:	3a 8b       	std	Y+18, r19	; 0x12
   12656:	29 8b       	std	Y+17, r18	; 0x11
   12658:	c8 01       	movw	r24, r16
   1265a:	07 96       	adiw	r24, 0x07	; 7
   1265c:	ed b7       	in	r30, 0x3d	; 61
   1265e:	fe b7       	in	r31, 0x3e	; 62
   12660:	95 83       	std	Z+5, r25	; 0x05
   12662:	84 83       	std	Z+4, r24	; 0x04
   12664:	c1 82       	std	Z+1, r12	; 0x01
   12666:	d2 82       	std	Z+2, r13	; 0x02
   12668:	e3 82       	std	Z+3, r14	; 0x03
   1266a:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   1266e:	e9 89       	ldd	r30, Y+17	; 0x11
   12670:	fa 89       	ldd	r31, Y+18	; 0x12
   12672:	80 81       	ld	r24, Z
   12674:	90 e0       	ldi	r25, 0x00	; 0
   12676:	ed b7       	in	r30, 0x3d	; 61
   12678:	fe b7       	in	r31, 0x3e	; 62
   1267a:	95 83       	std	Z+5, r25	; 0x05
   1267c:	84 83       	std	Z+4, r24	; 0x04
   1267e:	61 82       	std	Z+1, r6	; 0x01
   12680:	72 82       	std	Z+2, r7	; 0x02
   12682:	83 82       	std	Z+3, r8	; 0x03
   12684:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   12688:	64 e0       	ldi	r22, 0x04	; 4
   1268a:	89 e0       	ldi	r24, 0x09	; 9
   1268c:	93 de       	rcall	.-730    	; 0x123b4 <print_tok>
   1268e:	e9 89       	ldd	r30, Y+17	; 0x11
   12690:	fa 89       	ldd	r31, Y+18	; 0x12
   12692:	20 81       	ld	r18, Z
   12694:	30 e0       	ldi	r19, 0x00	; 0
   12696:	40 e0       	ldi	r20, 0x00	; 0
   12698:	50 e0       	ldi	r21, 0x00	; 0
   1269a:	68 e0       	ldi	r22, 0x08	; 8
   1269c:	81 e0       	ldi	r24, 0x01	; 1
   1269e:	15 de       	rcall	.-982    	; 0x122ca <print_tok_val>
   126a0:	e9 89       	ldd	r30, Y+17	; 0x11
   126a2:	fa 89       	ldd	r31, Y+18	; 0x12
   126a4:	21 81       	ldd	r18, Z+1	; 0x01
   126a6:	30 e0       	ldi	r19, 0x00	; 0
   126a8:	40 e0       	ldi	r20, 0x00	; 0
   126aa:	50 e0       	ldi	r21, 0x00	; 0
   126ac:	68 e0       	ldi	r22, 0x08	; 8
   126ae:	8f e1       	ldi	r24, 0x1F	; 31
   126b0:	0c de       	rcall	.-1000   	; 0x122ca <print_tok_val>
   126b2:	e9 89       	ldd	r30, Y+17	; 0x11
   126b4:	fa 89       	ldd	r31, Y+18	; 0x12
   126b6:	42 81       	ldd	r20, Z+2	; 0x02
   126b8:	53 81       	ldd	r21, Z+3	; 0x03
   126ba:	68 e0       	ldi	r22, 0x08	; 8
   126bc:	82 e1       	ldi	r24, 0x12	; 18
   126be:	45 de       	rcall	.-886    	; 0x1234a <print_tok_str>
   126c0:	64 e0       	ldi	r22, 0x04	; 4
   126c2:	81 e1       	ldi	r24, 0x11	; 17
   126c4:	77 de       	rcall	.-786    	; 0x123b4 <print_tok>
   126c6:	64 e0       	ldi	r22, 0x04	; 4
   126c8:	85 e1       	ldi	r24, 0x15	; 21
   126ca:	74 de       	rcall	.-792    	; 0x123b4 <print_tok>
   126cc:	e9 89       	ldd	r30, Y+17	; 0x11
   126ce:	fa 89       	ldd	r31, Y+18	; 0x12
   126d0:	24 81       	ldd	r18, Z+4	; 0x04
   126d2:	35 81       	ldd	r19, Z+5	; 0x05
   126d4:	40 e0       	ldi	r20, 0x00	; 0
   126d6:	50 e0       	ldi	r21, 0x00	; 0
   126d8:	68 e0       	ldi	r22, 0x08	; 8
   126da:	87 e1       	ldi	r24, 0x17	; 23
   126dc:	f6 dd       	rcall	.-1044   	; 0x122ca <print_tok_val>
   126de:	64 e0       	ldi	r22, 0x04	; 4
   126e0:	81 e1       	ldi	r24, 0x11	; 17
   126e2:	68 de       	rcall	.-816    	; 0x123b4 <print_tok>
   126e4:	a1 14       	cp	r10, r1
   126e6:	b1 04       	cpc	r11, r1
   126e8:	09 f1       	breq	.+66     	; 0x1272c <display_Config+0x176>
   126ea:	64 e0       	ldi	r22, 0x04	; 4
   126ec:	8b e0       	ldi	r24, 0x0B	; 11
   126ee:	62 de       	rcall	.-828    	; 0x123b4 <print_tok>
   126f0:	e9 89       	ldd	r30, Y+17	; 0x11
   126f2:	fa 89       	ldd	r31, Y+18	; 0x12
   126f4:	26 81       	ldd	r18, Z+6	; 0x06
   126f6:	37 81       	ldd	r19, Z+7	; 0x07
   126f8:	40 e0       	ldi	r20, 0x00	; 0
   126fa:	50 e0       	ldi	r21, 0x00	; 0
   126fc:	68 e0       	ldi	r22, 0x08	; 8
   126fe:	88 e2       	ldi	r24, 0x28	; 40
   12700:	e4 dd       	rcall	.-1080   	; 0x122ca <print_tok_val>
   12702:	e9 89       	ldd	r30, Y+17	; 0x11
   12704:	fa 89       	ldd	r31, Y+18	; 0x12
   12706:	20 85       	ldd	r18, Z+8	; 0x08
   12708:	31 85       	ldd	r19, Z+9	; 0x09
   1270a:	40 e0       	ldi	r20, 0x00	; 0
   1270c:	50 e0       	ldi	r21, 0x00	; 0
   1270e:	68 e0       	ldi	r22, 0x08	; 8
   12710:	85 e2       	ldi	r24, 0x25	; 37
   12712:	db dd       	rcall	.-1098   	; 0x122ca <print_tok_val>
   12714:	e9 89       	ldd	r30, Y+17	; 0x11
   12716:	fa 89       	ldd	r31, Y+18	; 0x12
   12718:	22 85       	ldd	r18, Z+10	; 0x0a
   1271a:	30 e0       	ldi	r19, 0x00	; 0
   1271c:	40 e0       	ldi	r20, 0x00	; 0
   1271e:	50 e0       	ldi	r21, 0x00	; 0
   12720:	68 e0       	ldi	r22, 0x08	; 8
   12722:	86 e2       	ldi	r24, 0x26	; 38
   12724:	d2 dd       	rcall	.-1116   	; 0x122ca <print_tok_val>
   12726:	64 e0       	ldi	r22, 0x04	; 4
   12728:	81 e1       	ldi	r24, 0x11	; 17
   1272a:	44 de       	rcall	.-888    	; 0x123b4 <print_tok>
   1272c:	64 e0       	ldi	r22, 0x04	; 4
   1272e:	87 e2       	ldi	r24, 0x27	; 39
   12730:	41 de       	rcall	.-894    	; 0x123b4 <print_tok>
   12732:	a1 14       	cp	r10, r1
   12734:	b1 04       	cpc	r11, r1
   12736:	49 f0       	breq	.+18     	; 0x1274a <display_Config+0x194>
   12738:	e9 89       	ldd	r30, Y+17	; 0x11
   1273a:	fa 89       	ldd	r31, Y+18	; 0x12
   1273c:	23 85       	ldd	r18, Z+11	; 0x0b
   1273e:	30 e0       	ldi	r19, 0x00	; 0
   12740:	40 e0       	ldi	r20, 0x00	; 0
   12742:	50 e0       	ldi	r21, 0x00	; 0
   12744:	68 e0       	ldi	r22, 0x08	; 8
   12746:	89 e2       	ldi	r24, 0x29	; 41
   12748:	c0 dd       	rcall	.-1152   	; 0x122ca <print_tok_val>
   1274a:	e9 89       	ldd	r30, Y+17	; 0x11
   1274c:	fa 89       	ldd	r31, Y+18	; 0x12
   1274e:	24 85       	ldd	r18, Z+12	; 0x0c
   12750:	35 85       	ldd	r19, Z+13	; 0x0d
   12752:	46 85       	ldd	r20, Z+14	; 0x0e
   12754:	57 85       	ldd	r21, Z+15	; 0x0f
   12756:	68 e0       	ldi	r22, 0x08	; 8
   12758:	8f e0       	ldi	r24, 0x0F	; 15
   1275a:	b7 dd       	rcall	.-1170   	; 0x122ca <print_tok_val>
   1275c:	a1 14       	cp	r10, r1
   1275e:	b1 04       	cpc	r11, r1
   12760:	09 f4       	brne	.+2      	; 0x12764 <display_Config+0x1ae>
   12762:	5a c0       	rjmp	.+180    	; 0x12818 <display_Config+0x262>
   12764:	e9 89       	ldd	r30, Y+17	; 0x11
   12766:	fa 89       	ldd	r31, Y+18	; 0x12
   12768:	20 89       	ldd	r18, Z+16	; 0x10
   1276a:	31 89       	ldd	r19, Z+17	; 0x11
   1276c:	40 e0       	ldi	r20, 0x00	; 0
   1276e:	50 e0       	ldi	r21, 0x00	; 0
   12770:	68 e0       	ldi	r22, 0x08	; 8
   12772:	87 e0       	ldi	r24, 0x07	; 7
   12774:	aa dd       	rcall	.-1196   	; 0x122ca <print_tok_val>
   12776:	e9 89       	ldd	r30, Y+17	; 0x11
   12778:	fa 89       	ldd	r31, Y+18	; 0x12
   1277a:	22 89       	ldd	r18, Z+18	; 0x12
   1277c:	30 e0       	ldi	r19, 0x00	; 0
   1277e:	40 e0       	ldi	r20, 0x00	; 0
   12780:	50 e0       	ldi	r21, 0x00	; 0
   12782:	68 e0       	ldi	r22, 0x08	; 8
   12784:	85 e0       	ldi	r24, 0x05	; 5
   12786:	a1 dd       	rcall	.-1214   	; 0x122ca <print_tok_val>
   12788:	e9 89       	ldd	r30, Y+17	; 0x11
   1278a:	fa 89       	ldd	r31, Y+18	; 0x12
   1278c:	23 89       	ldd	r18, Z+19	; 0x13
   1278e:	30 e0       	ldi	r19, 0x00	; 0
   12790:	40 e0       	ldi	r20, 0x00	; 0
   12792:	50 e0       	ldi	r21, 0x00	; 0
   12794:	68 e0       	ldi	r22, 0x08	; 8
   12796:	86 e0       	ldi	r24, 0x06	; 6
   12798:	98 dd       	rcall	.-1232   	; 0x122ca <print_tok_val>
   1279a:	e9 89       	ldd	r30, Y+17	; 0x11
   1279c:	fa 89       	ldd	r31, Y+18	; 0x12
   1279e:	24 89       	ldd	r18, Z+20	; 0x14
   127a0:	35 89       	ldd	r19, Z+21	; 0x15
   127a2:	40 e0       	ldi	r20, 0x00	; 0
   127a4:	50 e0       	ldi	r21, 0x00	; 0
   127a6:	68 e0       	ldi	r22, 0x08	; 8
   127a8:	84 e0       	ldi	r24, 0x04	; 4
   127aa:	8f dd       	rcall	.-1250   	; 0x122ca <print_tok_val>
   127ac:	e9 89       	ldd	r30, Y+17	; 0x11
   127ae:	fa 89       	ldd	r31, Y+18	; 0x12
   127b0:	26 89       	ldd	r18, Z+22	; 0x16
   127b2:	37 89       	ldd	r19, Z+23	; 0x17
   127b4:	40 e0       	ldi	r20, 0x00	; 0
   127b6:	50 e0       	ldi	r21, 0x00	; 0
   127b8:	68 e0       	ldi	r22, 0x08	; 8
   127ba:	8a e0       	ldi	r24, 0x0A	; 10
   127bc:	86 dd       	rcall	.-1268   	; 0x122ca <print_tok_val>
   127be:	e9 89       	ldd	r30, Y+17	; 0x11
   127c0:	fa 89       	ldd	r31, Y+18	; 0x12
   127c2:	20 8d       	ldd	r18, Z+24	; 0x18
   127c4:	31 8d       	ldd	r19, Z+25	; 0x19
   127c6:	40 e0       	ldi	r20, 0x00	; 0
   127c8:	50 e0       	ldi	r21, 0x00	; 0
   127ca:	68 e0       	ldi	r22, 0x08	; 8
   127cc:	8e e1       	ldi	r24, 0x1E	; 30
   127ce:	7d dd       	rcall	.-1286   	; 0x122ca <print_tok_val>
   127d0:	e9 89       	ldd	r30, Y+17	; 0x11
   127d2:	fa 89       	ldd	r31, Y+18	; 0x12
   127d4:	22 8d       	ldd	r18, Z+26	; 0x1a
   127d6:	33 8d       	ldd	r19, Z+27	; 0x1b
   127d8:	40 e0       	ldi	r20, 0x00	; 0
   127da:	50 e0       	ldi	r21, 0x00	; 0
   127dc:	68 e0       	ldi	r22, 0x08	; 8
   127de:	80 e0       	ldi	r24, 0x00	; 0
   127e0:	74 dd       	rcall	.-1304   	; 0x122ca <print_tok_val>
   127e2:	e9 89       	ldd	r30, Y+17	; 0x11
   127e4:	fa 89       	ldd	r31, Y+18	; 0x12
   127e6:	24 8d       	ldd	r18, Z+28	; 0x1c
   127e8:	30 e0       	ldi	r19, 0x00	; 0
   127ea:	40 e0       	ldi	r20, 0x00	; 0
   127ec:	50 e0       	ldi	r21, 0x00	; 0
   127ee:	68 e0       	ldi	r22, 0x08	; 8
   127f0:	8c e1       	ldi	r24, 0x1C	; 28
   127f2:	6b dd       	rcall	.-1322   	; 0x122ca <print_tok_val>
   127f4:	e9 89       	ldd	r30, Y+17	; 0x11
   127f6:	fa 89       	ldd	r31, Y+18	; 0x12
   127f8:	25 8d       	ldd	r18, Z+29	; 0x1d
   127fa:	30 e0       	ldi	r19, 0x00	; 0
   127fc:	40 e0       	ldi	r20, 0x00	; 0
   127fe:	50 e0       	ldi	r21, 0x00	; 0
   12800:	68 e0       	ldi	r22, 0x08	; 8
   12802:	83 e1       	ldi	r24, 0x13	; 19
   12804:	62 dd       	rcall	.-1340   	; 0x122ca <print_tok_val>
   12806:	e9 89       	ldd	r30, Y+17	; 0x11
   12808:	fa 89       	ldd	r31, Y+18	; 0x12
   1280a:	26 8d       	ldd	r18, Z+30	; 0x1e
   1280c:	30 e0       	ldi	r19, 0x00	; 0
   1280e:	40 e0       	ldi	r20, 0x00	; 0
   12810:	50 e0       	ldi	r21, 0x00	; 0
   12812:	68 e0       	ldi	r22, 0x08	; 8
   12814:	81 e2       	ldi	r24, 0x21	; 33
   12816:	59 dd       	rcall	.-1358   	; 0x122ca <print_tok_val>
   12818:	64 e0       	ldi	r22, 0x04	; 4
   1281a:	81 e1       	ldi	r24, 0x11	; 17
   1281c:	cb dd       	rcall	.-1130   	; 0x123b4 <print_tok>
   1281e:	a1 14       	cp	r10, r1
   12820:	b1 04       	cpc	r11, r1
   12822:	99 f1       	breq	.+102    	; 0x1288a <display_Config+0x2d4>
   12824:	64 e0       	ldi	r22, 0x04	; 4
   12826:	8a e2       	ldi	r24, 0x2A	; 42
   12828:	c5 dd       	rcall	.-1142   	; 0x123b4 <print_tok>
   1282a:	e9 89       	ldd	r30, Y+17	; 0x11
   1282c:	fa 89       	ldd	r31, Y+18	; 0x12
   1282e:	27 8d       	ldd	r18, Z+31	; 0x1f
   12830:	30 a1       	ldd	r19, Z+32	; 0x20
   12832:	41 a1       	ldd	r20, Z+33	; 0x21
   12834:	52 a1       	ldd	r21, Z+34	; 0x22
   12836:	68 e0       	ldi	r22, 0x08	; 8
   12838:	8a e1       	ldi	r24, 0x1A	; 26
   1283a:	47 dd       	rcall	.-1394   	; 0x122ca <print_tok_val>
   1283c:	e9 89       	ldd	r30, Y+17	; 0x11
   1283e:	fa 89       	ldd	r31, Y+18	; 0x12
   12840:	23 a1       	ldd	r18, Z+35	; 0x23
   12842:	30 e0       	ldi	r19, 0x00	; 0
   12844:	40 e0       	ldi	r20, 0x00	; 0
   12846:	50 e0       	ldi	r21, 0x00	; 0
   12848:	68 e0       	ldi	r22, 0x08	; 8
   1284a:	8b e1       	ldi	r24, 0x1B	; 27
   1284c:	3e dd       	rcall	.-1412   	; 0x122ca <print_tok_val>
   1284e:	e9 89       	ldd	r30, Y+17	; 0x11
   12850:	fa 89       	ldd	r31, Y+18	; 0x12
   12852:	24 a1       	ldd	r18, Z+36	; 0x24
   12854:	35 a1       	ldd	r19, Z+37	; 0x25
   12856:	40 e0       	ldi	r20, 0x00	; 0
   12858:	50 e0       	ldi	r21, 0x00	; 0
   1285a:	68 e0       	ldi	r22, 0x08	; 8
   1285c:	8d e1       	ldi	r24, 0x1D	; 29
   1285e:	35 dd       	rcall	.-1430   	; 0x122ca <print_tok_val>
   12860:	e9 89       	ldd	r30, Y+17	; 0x11
   12862:	fa 89       	ldd	r31, Y+18	; 0x12
   12864:	26 a1       	ldd	r18, Z+38	; 0x26
   12866:	37 a1       	ldd	r19, Z+39	; 0x27
   12868:	40 a5       	ldd	r20, Z+40	; 0x28
   1286a:	51 a5       	ldd	r21, Z+41	; 0x29
   1286c:	68 e0       	ldi	r22, 0x08	; 8
   1286e:	89 e1       	ldi	r24, 0x19	; 25
   12870:	2c dd       	rcall	.-1448   	; 0x122ca <print_tok_val>
   12872:	e9 89       	ldd	r30, Y+17	; 0x11
   12874:	fa 89       	ldd	r31, Y+18	; 0x12
   12876:	22 a5       	ldd	r18, Z+42	; 0x2a
   12878:	30 e0       	ldi	r19, 0x00	; 0
   1287a:	40 e0       	ldi	r20, 0x00	; 0
   1287c:	50 e0       	ldi	r21, 0x00	; 0
   1287e:	68 e0       	ldi	r22, 0x08	; 8
   12880:	88 e1       	ldi	r24, 0x18	; 24
   12882:	23 dd       	rcall	.-1466   	; 0x122ca <print_tok_val>
   12884:	64 e0       	ldi	r22, 0x04	; 4
   12886:	81 e1       	ldi	r24, 0x11	; 17
   12888:	95 dd       	rcall	.-1238   	; 0x123b4 <print_tok>
   1288a:	e9 89       	ldd	r30, Y+17	; 0x11
   1288c:	fa 89       	ldd	r31, Y+18	; 0x12
   1288e:	86 a1       	ldd	r24, Z+38	; 0x26
   12890:	97 a1       	ldd	r25, Z+39	; 0x27
   12892:	a0 a5       	ldd	r26, Z+40	; 0x28
   12894:	b1 a5       	ldd	r27, Z+41	; 0x29
   12896:	01 96       	adiw	r24, 0x01	; 1
   12898:	a1 1d       	adc	r26, r1
   1289a:	b1 1d       	adc	r27, r1
   1289c:	ed b7       	in	r30, 0x3d	; 61
   1289e:	fe b7       	in	r31, 0x3e	; 62
   128a0:	84 83       	std	Z+4, r24	; 0x04
   128a2:	95 83       	std	Z+5, r25	; 0x05
   128a4:	a6 83       	std	Z+6, r26	; 0x06
   128a6:	b7 83       	std	Z+7, r27	; 0x07
   128a8:	2b e1       	ldi	r18, 0x1B	; 27
   128aa:	3a e1       	ldi	r19, 0x1A	; 26
   128ac:	c9 01       	movw	r24, r18
   128ae:	a0 e0       	ldi	r26, 0x00	; 0
   128b0:	81 83       	std	Z+1, r24	; 0x01
   128b2:	92 83       	std	Z+2, r25	; 0x02
   128b4:	a3 83       	std	Z+3, r26	; 0x03
   128b6:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   128ba:	60 e0       	ldi	r22, 0x00	; 0
   128bc:	81 e1       	ldi	r24, 0x11	; 17
   128be:	7a dd       	rcall	.-1292   	; 0x123b4 <print_tok>
   128c0:	f8 01       	movw	r30, r16
   128c2:	80 81       	ld	r24, Z
   128c4:	81 30       	cpi	r24, 0x01	; 1
   128c6:	09 f0       	breq	.+2      	; 0x128ca <display_Config+0x314>
   128c8:	ad c0       	rjmp	.+346    	; 0x12a24 <display_Config+0x46e>
   128ca:	27 a1       	ldd	r18, Z+39	; 0x27
   128cc:	30 a5       	ldd	r19, Z+40	; 0x28
   128ce:	3a 8b       	std	Y+18, r19	; 0x12
   128d0:	29 8b       	std	Y+17, r18	; 0x11
   128d2:	c8 01       	movw	r24, r16
   128d4:	07 96       	adiw	r24, 0x07	; 7
   128d6:	ed b7       	in	r30, 0x3d	; 61
   128d8:	fe b7       	in	r31, 0x3e	; 62
   128da:	95 83       	std	Z+5, r25	; 0x05
   128dc:	84 83       	std	Z+4, r24	; 0x04
   128de:	2b 85       	ldd	r18, Y+11	; 0x0b
   128e0:	3c 85       	ldd	r19, Y+12	; 0x0c
   128e2:	4d 85       	ldd	r20, Y+13	; 0x0d
   128e4:	21 83       	std	Z+1, r18	; 0x01
   128e6:	32 83       	std	Z+2, r19	; 0x02
   128e8:	43 83       	std	Z+3, r20	; 0x03
   128ea:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   128ee:	e9 89       	ldd	r30, Y+17	; 0x11
   128f0:	fa 89       	ldd	r31, Y+18	; 0x12
   128f2:	80 81       	ld	r24, Z
   128f4:	90 e0       	ldi	r25, 0x00	; 0
   128f6:	ed b7       	in	r30, 0x3d	; 61
   128f8:	fe b7       	in	r31, 0x3e	; 62
   128fa:	95 83       	std	Z+5, r25	; 0x05
   128fc:	84 83       	std	Z+4, r24	; 0x04
   128fe:	2e 85       	ldd	r18, Y+14	; 0x0e
   12900:	3f 85       	ldd	r19, Y+15	; 0x0f
   12902:	48 89       	ldd	r20, Y+16	; 0x10
   12904:	21 83       	std	Z+1, r18	; 0x01
   12906:	32 83       	std	Z+2, r19	; 0x02
   12908:	43 83       	std	Z+3, r20	; 0x03
   1290a:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   1290e:	64 e0       	ldi	r22, 0x04	; 4
   12910:	85 e1       	ldi	r24, 0x15	; 21
   12912:	50 dd       	rcall	.-1376   	; 0x123b4 <print_tok>
   12914:	e9 89       	ldd	r30, Y+17	; 0x11
   12916:	fa 89       	ldd	r31, Y+18	; 0x12
   12918:	20 81       	ld	r18, Z
   1291a:	30 e0       	ldi	r19, 0x00	; 0
   1291c:	40 e0       	ldi	r20, 0x00	; 0
   1291e:	50 e0       	ldi	r21, 0x00	; 0
   12920:	68 e0       	ldi	r22, 0x08	; 8
   12922:	81 e0       	ldi	r24, 0x01	; 1
   12924:	d2 dc       	rcall	.-1628   	; 0x122ca <print_tok_val>
   12926:	e9 89       	ldd	r30, Y+17	; 0x11
   12928:	fa 89       	ldd	r31, Y+18	; 0x12
   1292a:	21 81       	ldd	r18, Z+1	; 0x01
   1292c:	30 e0       	ldi	r19, 0x00	; 0
   1292e:	40 e0       	ldi	r20, 0x00	; 0
   12930:	50 e0       	ldi	r21, 0x00	; 0
   12932:	68 e0       	ldi	r22, 0x08	; 8
   12934:	8f e1       	ldi	r24, 0x1F	; 31
   12936:	c9 dc       	rcall	.-1646   	; 0x122ca <print_tok_val>
   12938:	e9 89       	ldd	r30, Y+17	; 0x11
   1293a:	fa 89       	ldd	r31, Y+18	; 0x12
   1293c:	42 81       	ldd	r20, Z+2	; 0x02
   1293e:	53 81       	ldd	r21, Z+3	; 0x03
   12940:	68 e0       	ldi	r22, 0x08	; 8
   12942:	82 e1       	ldi	r24, 0x12	; 18
   12944:	02 dd       	rcall	.-1532   	; 0x1234a <print_tok_str>
   12946:	64 e0       	ldi	r22, 0x04	; 4
   12948:	81 e1       	ldi	r24, 0x11	; 17
   1294a:	34 dd       	rcall	.-1432   	; 0x123b4 <print_tok>
   1294c:	64 e0       	ldi	r22, 0x04	; 4
   1294e:	89 e0       	ldi	r24, 0x09	; 9
   12950:	31 dd       	rcall	.-1438   	; 0x123b4 <print_tok>
   12952:	e9 89       	ldd	r30, Y+17	; 0x11
   12954:	fa 89       	ldd	r31, Y+18	; 0x12
   12956:	24 81       	ldd	r18, Z+4	; 0x04
   12958:	35 81       	ldd	r19, Z+5	; 0x05
   1295a:	40 e0       	ldi	r20, 0x00	; 0
   1295c:	50 e0       	ldi	r21, 0x00	; 0
   1295e:	68 e0       	ldi	r22, 0x08	; 8
   12960:	87 e1       	ldi	r24, 0x17	; 23
   12962:	b3 dc       	rcall	.-1690   	; 0x122ca <print_tok_val>
   12964:	64 e0       	ldi	r22, 0x04	; 4
   12966:	81 e1       	ldi	r24, 0x11	; 17
   12968:	25 dd       	rcall	.-1462   	; 0x123b4 <print_tok>
   1296a:	a1 14       	cp	r10, r1
   1296c:	b1 04       	cpc	r11, r1
   1296e:	91 f1       	breq	.+100    	; 0x129d4 <display_Config+0x41e>
   12970:	64 e0       	ldi	r22, 0x04	; 4
   12972:	84 e1       	ldi	r24, 0x14	; 20
   12974:	1f dd       	rcall	.-1474   	; 0x123b4 <print_tok>
   12976:	e9 89       	ldd	r30, Y+17	; 0x11
   12978:	fa 89       	ldd	r31, Y+18	; 0x12
   1297a:	26 81       	ldd	r18, Z+6	; 0x06
   1297c:	37 81       	ldd	r19, Z+7	; 0x07
   1297e:	03 2e       	mov	r0, r19
   12980:	00 0c       	add	r0, r0
   12982:	44 0b       	sbc	r20, r20
   12984:	55 0b       	sbc	r21, r21
   12986:	68 e0       	ldi	r22, 0x08	; 8
   12988:	88 e0       	ldi	r24, 0x08	; 8
   1298a:	9f dc       	rcall	.-1730   	; 0x122ca <print_tok_val>
   1298c:	e9 89       	ldd	r30, Y+17	; 0x11
   1298e:	fa 89       	ldd	r31, Y+18	; 0x12
   12990:	20 85       	ldd	r18, Z+8	; 0x08
   12992:	31 85       	ldd	r19, Z+9	; 0x09
   12994:	03 2e       	mov	r0, r19
   12996:	00 0c       	add	r0, r0
   12998:	44 0b       	sbc	r20, r20
   1299a:	55 0b       	sbc	r21, r21
   1299c:	68 e0       	ldi	r22, 0x08	; 8
   1299e:	82 e2       	ldi	r24, 0x22	; 34
   129a0:	94 dc       	rcall	.-1752   	; 0x122ca <print_tok_val>
   129a2:	e9 89       	ldd	r30, Y+17	; 0x11
   129a4:	fa 89       	ldd	r31, Y+18	; 0x12
   129a6:	22 85       	ldd	r18, Z+10	; 0x0a
   129a8:	33 85       	ldd	r19, Z+11	; 0x0b
   129aa:	03 2e       	mov	r0, r19
   129ac:	00 0c       	add	r0, r0
   129ae:	44 0b       	sbc	r20, r20
   129b0:	55 0b       	sbc	r21, r21
   129b2:	68 e0       	ldi	r22, 0x08	; 8
   129b4:	86 e1       	ldi	r24, 0x16	; 22
   129b6:	89 dc       	rcall	.-1774   	; 0x122ca <print_tok_val>
   129b8:	e9 89       	ldd	r30, Y+17	; 0x11
   129ba:	fa 89       	ldd	r31, Y+18	; 0x12
   129bc:	24 85       	ldd	r18, Z+12	; 0x0c
   129be:	35 85       	ldd	r19, Z+13	; 0x0d
   129c0:	03 2e       	mov	r0, r19
   129c2:	00 0c       	add	r0, r0
   129c4:	44 0b       	sbc	r20, r20
   129c6:	55 0b       	sbc	r21, r21
   129c8:	68 e0       	ldi	r22, 0x08	; 8
   129ca:	8d e0       	ldi	r24, 0x0D	; 13
   129cc:	7e dc       	rcall	.-1796   	; 0x122ca <print_tok_val>
   129ce:	64 e0       	ldi	r22, 0x04	; 4
   129d0:	81 e1       	ldi	r24, 0x11	; 17
   129d2:	f0 dc       	rcall	.-1568   	; 0x123b4 <print_tok>
   129d4:	e9 89       	ldd	r30, Y+17	; 0x11
   129d6:	fa 89       	ldd	r31, Y+18	; 0x12
   129d8:	44 85       	ldd	r20, Z+12	; 0x0c
   129da:	55 85       	ldd	r21, Z+13	; 0x0d
   129dc:	20 85       	ldd	r18, Z+8	; 0x08
   129de:	31 85       	ldd	r19, Z+9	; 0x09
   129e0:	42 9f       	mul	r20, r18
   129e2:	c0 01       	movw	r24, r0
   129e4:	43 9f       	mul	r20, r19
   129e6:	90 0d       	add	r25, r0
   129e8:	52 9f       	mul	r21, r18
   129ea:	90 0d       	add	r25, r0
   129ec:	11 24       	eor	r1, r1
   129ee:	42 85       	ldd	r20, Z+10	; 0x0a
   129f0:	53 85       	ldd	r21, Z+11	; 0x0b
   129f2:	84 9f       	mul	r24, r20
   129f4:	90 01       	movw	r18, r0
   129f6:	85 9f       	mul	r24, r21
   129f8:	30 0d       	add	r19, r0
   129fa:	94 9f       	mul	r25, r20
   129fc:	30 0d       	add	r19, r0
   129fe:	11 24       	eor	r1, r1
   12a00:	c9 01       	movw	r24, r18
   12a02:	33 0f       	add	r19, r19
   12a04:	aa 0b       	sbc	r26, r26
   12a06:	bb 0b       	sbc	r27, r27
   12a08:	ed b7       	in	r30, 0x3d	; 61
   12a0a:	fe b7       	in	r31, 0x3e	; 62
   12a0c:	84 83       	std	Z+4, r24	; 0x04
   12a0e:	95 83       	std	Z+5, r25	; 0x05
   12a10:	a6 83       	std	Z+6, r26	; 0x06
   12a12:	b7 83       	std	Z+7, r27	; 0x07
   12a14:	21 82       	std	Z+1, r2	; 0x01
   12a16:	32 82       	std	Z+2, r3	; 0x02
   12a18:	43 82       	std	Z+3, r4	; 0x03
   12a1a:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   12a1e:	60 e0       	ldi	r22, 0x00	; 0
   12a20:	81 e1       	ldi	r24, 0x11	; 17
   12a22:	c8 dc       	rcall	.-1648   	; 0x123b4 <print_tok>
   12a24:	f8 01       	movw	r30, r16
   12a26:	80 81       	ld	r24, Z
   12a28:	84 30       	cpi	r24, 0x04	; 4
   12a2a:	c9 f4       	brne	.+50     	; 0x12a5e <display_Config+0x4a8>
   12a2c:	27 a1       	ldd	r18, Z+39	; 0x27
   12a2e:	30 a5       	ldd	r19, Z+40	; 0x28
   12a30:	3a 8b       	std	Y+18, r19	; 0x12
   12a32:	29 8b       	std	Y+17, r18	; 0x11
   12a34:	60 e0       	ldi	r22, 0x00	; 0
   12a36:	80 e2       	ldi	r24, 0x20	; 32
   12a38:	bd dc       	rcall	.-1670   	; 0x123b4 <print_tok>
   12a3a:	64 e0       	ldi	r22, 0x04	; 4
   12a3c:	89 e0       	ldi	r24, 0x09	; 9
   12a3e:	ba dc       	rcall	.-1676   	; 0x123b4 <print_tok>
   12a40:	e9 89       	ldd	r30, Y+17	; 0x11
   12a42:	fa 89       	ldd	r31, Y+18	; 0x12
   12a44:	20 81       	ld	r18, Z
   12a46:	30 e0       	ldi	r19, 0x00	; 0
   12a48:	40 e0       	ldi	r20, 0x00	; 0
   12a4a:	50 e0       	ldi	r21, 0x00	; 0
   12a4c:	68 e0       	ldi	r22, 0x08	; 8
   12a4e:	81 e0       	ldi	r24, 0x01	; 1
   12a50:	3c dc       	rcall	.-1928   	; 0x122ca <print_tok_val>
   12a52:	64 e0       	ldi	r22, 0x04	; 4
   12a54:	81 e1       	ldi	r24, 0x11	; 17
   12a56:	ae dc       	rcall	.-1700   	; 0x123b4 <print_tok>
   12a58:	60 e0       	ldi	r22, 0x00	; 0
   12a5a:	81 e1       	ldi	r24, 0x11	; 17
   12a5c:	ab dc       	rcall	.-1706   	; 0x123b4 <print_tok>
   12a5e:	28 85       	ldd	r18, Y+8	; 0x08
   12a60:	39 85       	ldd	r19, Y+9	; 0x09
   12a62:	4a 85       	ldd	r20, Y+10	; 0x0a
   12a64:	ed b7       	in	r30, 0x3d	; 61
   12a66:	fe b7       	in	r31, 0x3e	; 62
   12a68:	21 83       	std	Z+1, r18	; 0x01
   12a6a:	32 83       	std	Z+2, r19	; 0x02
   12a6c:	43 83       	std	Z+3, r20	; 0x03
   12a6e:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   12a72:	05 5d       	subi	r16, 0xD5	; 213
   12a74:	1f 4f       	sbci	r17, 0xFF	; 255
   12a76:	24 e0       	ldi	r18, 0x04	; 4
   12a78:	31 e2       	ldi	r19, 0x21	; 33
   12a7a:	20 17       	cp	r18, r16
   12a7c:	31 07       	cpc	r19, r17
   12a7e:	09 f0       	breq	.+2      	; 0x12a82 <display_Config+0x4cc>
   12a80:	df cd       	rjmp	.-1090   	; 0x12640 <display_Config+0x8a>
   12a82:	8a ed       	ldi	r24, 0xDA	; 218
   12a84:	99 e1       	ldi	r25, 0x19	; 25
   12a86:	a0 e0       	ldi	r26, 0x00	; 0
   12a88:	ed b7       	in	r30, 0x3d	; 61
   12a8a:	fe b7       	in	r31, 0x3e	; 62
   12a8c:	81 83       	std	Z+1, r24	; 0x01
   12a8e:	92 83       	std	Z+2, r25	; 0x02
   12a90:	a3 83       	std	Z+3, r26	; 0x03
   12a92:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   12a96:	62 96       	adiw	r28, 0x12	; 18
   12a98:	0f b6       	in	r0, 0x3f	; 63
   12a9a:	f8 94       	cli
   12a9c:	de bf       	out	0x3e, r29	; 62
   12a9e:	0f be       	out	0x3f, r0	; 63
   12aa0:	cd bf       	out	0x3d, r28	; 61
   12aa2:	df 91       	pop	r29
   12aa4:	cf 91       	pop	r28
   12aa6:	1f 91       	pop	r17
   12aa8:	0f 91       	pop	r16
   12aaa:	ef 90       	pop	r14
   12aac:	df 90       	pop	r13
   12aae:	cf 90       	pop	r12
   12ab0:	bf 90       	pop	r11
   12ab2:	af 90       	pop	r10
   12ab4:	8f 90       	pop	r8
   12ab6:	7f 90       	pop	r7
   12ab8:	6f 90       	pop	r6
   12aba:	4f 90       	pop	r4
   12abc:	3f 90       	pop	r3
   12abe:	2f 90       	pop	r2
   12ac0:	08 95       	ret

00012ac2 <find_type>:
   12ac2:	e0 e0       	ldi	r30, 0x00	; 0
   12ac4:	ff e1       	ldi	r31, 0x1F	; 31
   12ac6:	20 e0       	ldi	r18, 0x00	; 0
   12ac8:	30 e0       	ldi	r19, 0x00	; 0
   12aca:	40 81       	ld	r20, Z
   12acc:	50 e0       	ldi	r21, 0x00	; 0
   12ace:	48 17       	cp	r20, r24
   12ad0:	59 07       	cpc	r21, r25
   12ad2:	49 f0       	breq	.+18     	; 0x12ae6 <find_type+0x24>
   12ad4:	2f 5f       	subi	r18, 0xFF	; 255
   12ad6:	3f 4f       	sbci	r19, 0xFF	; 255
   12ad8:	bb 96       	adiw	r30, 0x2b	; 43
   12ada:	2c 30       	cpi	r18, 0x0C	; 12
   12adc:	31 05       	cpc	r19, r1
   12ade:	a9 f7       	brne	.-22     	; 0x12aca <find_type+0x8>
   12ae0:	8f ef       	ldi	r24, 0xFF	; 255
   12ae2:	9f ef       	ldi	r25, 0xFF	; 255
   12ae4:	08 95       	ret
   12ae6:	c9 01       	movw	r24, r18
   12ae8:	08 95       	ret

00012aea <count_drive_types>:
   12aea:	28 2f       	mov	r18, r24
   12aec:	e0 e0       	ldi	r30, 0x00	; 0
   12aee:	ff e1       	ldi	r31, 0x1F	; 31
   12af0:	80 e0       	ldi	r24, 0x00	; 0
   12af2:	90 e0       	ldi	r25, 0x00	; 0
   12af4:	30 81       	ld	r19, Z
   12af6:	32 13       	cpse	r19, r18
   12af8:	01 c0       	rjmp	.+2      	; 0x12afc <count_drive_types+0x12>
   12afa:	01 96       	adiw	r24, 0x01	; 1
   12afc:	bb 96       	adiw	r30, 0x2b	; 43
   12afe:	31 e2       	ldi	r19, 0x21	; 33
   12b00:	e4 30       	cpi	r30, 0x04	; 4
   12b02:	f3 07       	cpc	r31, r19
   12b04:	b9 f7       	brne	.-18     	; 0x12af4 <count_drive_types+0xa>
   12b06:	08 95       	ret

00012b08 <type_to_str>:
   12b08:	00 97       	sbiw	r24, 0x00	; 0
   12b0a:	59 f0       	breq	.+22     	; 0x12b22 <type_to_str+0x1a>
   12b0c:	81 30       	cpi	r24, 0x01	; 1
   12b0e:	91 05       	cpc	r25, r1
   12b10:	59 f0       	breq	.+22     	; 0x12b28 <type_to_str+0x20>
   12b12:	83 30       	cpi	r24, 0x03	; 3
   12b14:	91 05       	cpc	r25, r1
   12b16:	59 f0       	breq	.+22     	; 0x12b2e <type_to_str+0x26>
   12b18:	04 97       	sbiw	r24, 0x04	; 4
   12b1a:	61 f0       	breq	.+24     	; 0x12b34 <type_to_str+0x2c>
   12b1c:	85 e3       	ldi	r24, 0x35	; 53
   12b1e:	9e e0       	ldi	r25, 0x0E	; 14
   12b20:	08 95       	ret
   12b22:	8b e0       	ldi	r24, 0x0B	; 11
   12b24:	9e e0       	ldi	r25, 0x0E	; 14
   12b26:	08 95       	ret
   12b28:	83 e1       	ldi	r24, 0x13	; 19
   12b2a:	9e e0       	ldi	r25, 0x0E	; 14
   12b2c:	08 95       	ret
   12b2e:	8b e2       	ldi	r24, 0x2B	; 43
   12b30:	9e e0       	ldi	r25, 0x0E	; 14
   12b32:	08 95       	ret
   12b34:	8e e1       	ldi	r24, 0x1E	; 30
   12b36:	9e e0       	ldi	r25, 0x0E	; 14
   12b38:	08 95       	ret

00012b3a <find_free>:
   12b3a:	80 e0       	ldi	r24, 0x00	; 0
   12b3c:	90 e0       	ldi	r25, 0x00	; 0
   12b3e:	c1 cf       	rjmp	.-126    	; 0x12ac2 <find_type>
   12b40:	08 95       	ret

00012b42 <find_device>:
   12b42:	9b 01       	movw	r18, r22
   12b44:	20 52       	subi	r18, 0x20	; 32
   12b46:	31 09       	sbc	r19, r1
   12b48:	2f 35       	cpi	r18, 0x5F	; 95
   12b4a:	31 05       	cpc	r19, r1
   12b4c:	f8 f4       	brcc	.+62     	; 0x12b8c <find_device+0x4a>
   12b4e:	64 17       	cp	r22, r20
   12b50:	75 07       	cpc	r23, r21
   12b52:	e4 f0       	brlt	.+56     	; 0x12b8c <find_device+0x4a>
   12b54:	9a 01       	movw	r18, r20
   12b56:	22 5e       	subi	r18, 0xE2	; 226
   12b58:	3f 4f       	sbci	r19, 0xFF	; 255
   12b5a:	26 17       	cp	r18, r22
   12b5c:	37 07       	cpc	r19, r23
   12b5e:	b4 f0       	brlt	.+44     	; 0x12b8c <find_device+0x4a>
   12b60:	64 1b       	sub	r22, r20
   12b62:	75 0b       	sbc	r23, r21
   12b64:	e0 e0       	ldi	r30, 0x00	; 0
   12b66:	ff e1       	ldi	r31, 0x1F	; 31
   12b68:	20 e0       	ldi	r18, 0x00	; 0
   12b6a:	30 e0       	ldi	r19, 0x00	; 0
   12b6c:	40 81       	ld	r20, Z
   12b6e:	50 e0       	ldi	r21, 0x00	; 0
   12b70:	48 17       	cp	r20, r24
   12b72:	59 07       	cpc	r21, r25
   12b74:	29 f4       	brne	.+10     	; 0x12b80 <find_device+0x3e>
   12b76:	41 81       	ldd	r20, Z+1	; 0x01
   12b78:	50 e0       	ldi	r21, 0x00	; 0
   12b7a:	64 17       	cp	r22, r20
   12b7c:	75 07       	cpc	r23, r21
   12b7e:	49 f0       	breq	.+18     	; 0x12b92 <find_device+0x50>
   12b80:	2f 5f       	subi	r18, 0xFF	; 255
   12b82:	3f 4f       	sbci	r19, 0xFF	; 255
   12b84:	bb 96       	adiw	r30, 0x2b	; 43
   12b86:	2c 30       	cpi	r18, 0x0C	; 12
   12b88:	31 05       	cpc	r19, r1
   12b8a:	81 f7       	brne	.-32     	; 0x12b6c <find_device+0x2a>
   12b8c:	8f ef       	ldi	r24, 0xFF	; 255
   12b8e:	9f ef       	ldi	r25, 0xFF	; 255
   12b90:	08 95       	ret
   12b92:	c9 01       	movw	r24, r18
   12b94:	08 95       	ret

00012b96 <set_active_device>:
   12b96:	a9 e0       	ldi	r26, 0x09	; 9
   12b98:	b0 e0       	ldi	r27, 0x00	; 0
   12b9a:	e1 ed       	ldi	r30, 0xD1	; 209
   12b9c:	f5 e9       	ldi	r31, 0x95	; 149
   12b9e:	0c 94 17 e3 	jmp	0x1c62e	; 0x1c62e <__prologue_saves__+0x1c>
   12ba2:	8f 3f       	cpi	r24, 0xFF	; 255
   12ba4:	2f ef       	ldi	r18, 0xFF	; 255
   12ba6:	92 07       	cpc	r25, r18
   12ba8:	09 f4       	brne	.+2      	; 0x12bac <set_active_device+0x16>
   12baa:	d0 c0       	rjmp	.+416    	; 0x12d4c <set_active_device+0x1b6>
   12bac:	ec 01       	movw	r28, r24
   12bae:	0c 97       	sbiw	r24, 0x0c	; 12
   12bb0:	b0 f0       	brcs	.+44     	; 0x12bde <set_active_device+0x48>
   12bb2:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12bb6:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12bba:	c9 01       	movw	r24, r18
   12bbc:	81 70       	andi	r24, 0x01	; 1
   12bbe:	99 27       	eor	r25, r25
   12bc0:	20 ff       	sbrs	r18, 0
   12bc2:	c6 c0       	rjmp	.+396    	; 0x12d50 <set_active_device+0x1ba>
   12bc4:	ed b7       	in	r30, 0x3d	; 61
   12bc6:	fe b7       	in	r31, 0x3e	; 62
   12bc8:	d5 83       	std	Z+5, r29	; 0x05
   12bca:	c4 83       	std	Z+4, r28	; 0x04
   12bcc:	85 eb       	ldi	r24, 0xB5	; 181
   12bce:	99 e1       	ldi	r25, 0x19	; 25
   12bd0:	a0 e0       	ldi	r26, 0x00	; 0
   12bd2:	81 83       	std	Z+1, r24	; 0x01
   12bd4:	92 83       	std	Z+2, r25	; 0x02
   12bd6:	a3 83       	std	Z+3, r26	; 0x03
   12bd8:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   12bdc:	b7 c0       	rjmp	.+366    	; 0x12d4c <set_active_device+0x1b6>
   12bde:	8b e2       	ldi	r24, 0x2B	; 43
   12be0:	8c 9f       	mul	r24, r28
   12be2:	f0 01       	movw	r30, r0
   12be4:	8d 9f       	mul	r24, r29
   12be6:	f0 0d       	add	r31, r0
   12be8:	11 24       	eor	r1, r1
   12bea:	e0 50       	subi	r30, 0x00	; 0
   12bec:	f1 4e       	sbci	r31, 0xE1	; 225
   12bee:	21 81       	ldd	r18, Z+1	; 0x01
   12bf0:	2f 31       	cpi	r18, 0x1F	; 31
   12bf2:	d0 f0       	brcs	.+52     	; 0x12c28 <set_active_device+0x92>
   12bf4:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   12bf8:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12bfc:	ca 01       	movw	r24, r20
   12bfe:	81 70       	andi	r24, 0x01	; 1
   12c00:	99 27       	eor	r25, r25
   12c02:	40 ff       	sbrs	r20, 0
   12c04:	a5 c0       	rjmp	.+330    	; 0x12d50 <set_active_device+0x1ba>
   12c06:	82 2f       	mov	r24, r18
   12c08:	90 e0       	ldi	r25, 0x00	; 0
   12c0a:	ed b7       	in	r30, 0x3d	; 61
   12c0c:	fe b7       	in	r31, 0x3e	; 62
   12c0e:	97 83       	std	Z+7, r25	; 0x07
   12c10:	86 83       	std	Z+6, r24	; 0x06
   12c12:	d5 83       	std	Z+5, r29	; 0x05
   12c14:	c4 83       	std	Z+4, r28	; 0x04
   12c16:	8c e7       	ldi	r24, 0x7C	; 124
   12c18:	99 e1       	ldi	r25, 0x19	; 25
   12c1a:	a0 e0       	ldi	r26, 0x00	; 0
   12c1c:	81 83       	std	Z+1, r24	; 0x01
   12c1e:	92 83       	std	Z+2, r25	; 0x02
   12c20:	a3 83       	std	Z+3, r26	; 0x03
   12c22:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   12c26:	92 c0       	rjmp	.+292    	; 0x12d4c <set_active_device+0x1b6>
   12c28:	20 81       	ld	r18, Z
   12c2a:	02 2f       	mov	r16, r18
   12c2c:	10 e0       	ldi	r17, 0x00	; 0
   12c2e:	87 a1       	ldd	r24, Z+39	; 0x27
   12c30:	90 a5       	ldd	r25, Z+40	; 0x28
   12c32:	00 97       	sbiw	r24, 0x00	; 0
   12c34:	b1 f4       	brne	.+44     	; 0x12c62 <set_active_device+0xcc>
   12c36:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12c3a:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12c3e:	c9 01       	movw	r24, r18
   12c40:	81 70       	andi	r24, 0x01	; 1
   12c42:	99 27       	eor	r25, r25
   12c44:	20 ff       	sbrs	r18, 0
   12c46:	84 c0       	rjmp	.+264    	; 0x12d50 <set_active_device+0x1ba>
   12c48:	c8 01       	movw	r24, r16
   12c4a:	5e df       	rcall	.-324    	; 0x12b08 <type_to_str>
   12c4c:	ed b7       	in	r30, 0x3d	; 61
   12c4e:	fe b7       	in	r31, 0x3e	; 62
   12c50:	91 87       	std	Z+9, r25	; 0x09
   12c52:	80 87       	std	Z+8, r24	; 0x08
   12c54:	17 83       	std	Z+7, r17	; 0x07
   12c56:	06 83       	std	Z+6, r16	; 0x06
   12c58:	d5 83       	std	Z+5, r29	; 0x05
   12c5a:	c4 83       	std	Z+4, r28	; 0x04
   12c5c:	87 e4       	ldi	r24, 0x47	; 71
   12c5e:	99 e1       	ldi	r25, 0x19	; 25
   12c60:	6f c0       	rjmp	.+222    	; 0x12d40 <set_active_device+0x1aa>
   12c62:	01 15       	cp	r16, r1
   12c64:	11 05       	cpc	r17, r1
   12c66:	b9 f4       	brne	.+46     	; 0x12c96 <set_active_device+0x100>
   12c68:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12c6c:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12c70:	c9 01       	movw	r24, r18
   12c72:	81 70       	andi	r24, 0x01	; 1
   12c74:	99 27       	eor	r25, r25
   12c76:	20 ff       	sbrs	r18, 0
   12c78:	6b c0       	rjmp	.+214    	; 0x12d50 <set_active_device+0x1ba>
   12c7a:	80 e0       	ldi	r24, 0x00	; 0
   12c7c:	90 e0       	ldi	r25, 0x00	; 0
   12c7e:	44 df       	rcall	.-376    	; 0x12b08 <type_to_str>
   12c80:	ed b7       	in	r30, 0x3d	; 61
   12c82:	fe b7       	in	r31, 0x3e	; 62
   12c84:	91 87       	std	Z+9, r25	; 0x09
   12c86:	80 87       	std	Z+8, r24	; 0x08
   12c88:	17 82       	std	Z+7, r1	; 0x07
   12c8a:	16 82       	std	Z+6, r1	; 0x06
   12c8c:	d5 83       	std	Z+5, r29	; 0x05
   12c8e:	c4 83       	std	Z+4, r28	; 0x04
   12c90:	82 e1       	ldi	r24, 0x12	; 18
   12c92:	99 e1       	ldi	r25, 0x19	; 25
   12c94:	55 c0       	rjmp	.+170    	; 0x12d40 <set_active_device+0x1aa>
   12c96:	04 30       	cpi	r16, 0x04	; 4
   12c98:	11 05       	cpc	r17, r1
   12c9a:	29 f4       	brne	.+10     	; 0x12ca6 <set_active_device+0x110>
   12c9c:	90 93 77 19 	sts	0x1977, r25	; 0x801977 <PRINTERp+0x1>
   12ca0:	80 93 76 19 	sts	0x1976, r24	; 0x801976 <PRINTERp>
   12ca4:	35 c0       	rjmp	.+106    	; 0x12d10 <set_active_device+0x17a>
   12ca6:	2d 7f       	andi	r18, 0xFD	; 253
   12ca8:	21 30       	cpi	r18, 0x01	; 1
   12caa:	a9 f5       	brne	.+106    	; 0x12d16 <set_active_device+0x180>
   12cac:	21 a5       	ldd	r18, Z+41	; 0x29
   12cae:	32 a5       	ldd	r19, Z+42	; 0x2a
   12cb0:	21 15       	cp	r18, r1
   12cb2:	31 05       	cpc	r19, r1
   12cb4:	b1 f4       	brne	.+44     	; 0x12ce2 <set_active_device+0x14c>
   12cb6:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12cba:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12cbe:	c9 01       	movw	r24, r18
   12cc0:	81 70       	andi	r24, 0x01	; 1
   12cc2:	99 27       	eor	r25, r25
   12cc4:	20 ff       	sbrs	r18, 0
   12cc6:	44 c0       	rjmp	.+136    	; 0x12d50 <set_active_device+0x1ba>
   12cc8:	c8 01       	movw	r24, r16
   12cca:	1e df       	rcall	.-452    	; 0x12b08 <type_to_str>
   12ccc:	ed b7       	in	r30, 0x3d	; 61
   12cce:	fe b7       	in	r31, 0x3e	; 62
   12cd0:	91 87       	std	Z+9, r25	; 0x09
   12cd2:	80 87       	std	Z+8, r24	; 0x08
   12cd4:	17 83       	std	Z+7, r17	; 0x07
   12cd6:	06 83       	std	Z+6, r16	; 0x06
   12cd8:	d5 83       	std	Z+5, r29	; 0x05
   12cda:	c4 83       	std	Z+4, r28	; 0x04
   12cdc:	8a ed       	ldi	r24, 0xDA	; 218
   12cde:	98 e1       	ldi	r25, 0x18	; 24
   12ce0:	2f c0       	rjmp	.+94     	; 0x12d40 <set_active_device+0x1aa>
   12ce2:	01 30       	cpi	r16, 0x01	; 1
   12ce4:	11 05       	cpc	r17, r1
   12ce6:	49 f4       	brne	.+18     	; 0x12cfa <set_active_device+0x164>
   12ce8:	90 93 71 19 	sts	0x1971, r25	; 0x801971 <AMIGOp+0x1>
   12cec:	80 93 70 19 	sts	0x1970, r24	; 0x801970 <AMIGOp>
   12cf0:	30 93 6f 19 	sts	0x196F, r19	; 0x80196f <AMIGOs+0x1>
   12cf4:	20 93 6e 19 	sts	0x196E, r18	; 0x80196e <AMIGOs>
   12cf8:	0b c0       	rjmp	.+22     	; 0x12d10 <set_active_device+0x17a>
   12cfa:	03 30       	cpi	r16, 0x03	; 3
   12cfc:	11 05       	cpc	r17, r1
   12cfe:	59 f4       	brne	.+22     	; 0x12d16 <set_active_device+0x180>
   12d00:	90 93 75 19 	sts	0x1975, r25	; 0x801975 <SS80p+0x1>
   12d04:	80 93 74 19 	sts	0x1974, r24	; 0x801974 <SS80p>
   12d08:	30 93 73 19 	sts	0x1973, r19	; 0x801973 <SS80s+0x1>
   12d0c:	20 93 72 19 	sts	0x1972, r18	; 0x801972 <SS80s>
   12d10:	81 e0       	ldi	r24, 0x01	; 1
   12d12:	90 e0       	ldi	r25, 0x00	; 0
   12d14:	1d c0       	rjmp	.+58     	; 0x12d50 <set_active_device+0x1ba>
   12d16:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12d1a:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12d1e:	c9 01       	movw	r24, r18
   12d20:	81 70       	andi	r24, 0x01	; 1
   12d22:	99 27       	eor	r25, r25
   12d24:	20 ff       	sbrs	r18, 0
   12d26:	14 c0       	rjmp	.+40     	; 0x12d50 <set_active_device+0x1ba>
   12d28:	c8 01       	movw	r24, r16
   12d2a:	ee de       	rcall	.-548    	; 0x12b08 <type_to_str>
   12d2c:	ed b7       	in	r30, 0x3d	; 61
   12d2e:	fe b7       	in	r31, 0x3e	; 62
   12d30:	91 87       	std	Z+9, r25	; 0x09
   12d32:	80 87       	std	Z+8, r24	; 0x08
   12d34:	17 83       	std	Z+7, r17	; 0x07
   12d36:	06 83       	std	Z+6, r16	; 0x06
   12d38:	d5 83       	std	Z+5, r29	; 0x05
   12d3a:	c4 83       	std	Z+4, r28	; 0x04
   12d3c:	8f ea       	ldi	r24, 0xAF	; 175
   12d3e:	98 e1       	ldi	r25, 0x18	; 24
   12d40:	a0 e0       	ldi	r26, 0x00	; 0
   12d42:	81 83       	std	Z+1, r24	; 0x01
   12d44:	92 83       	std	Z+2, r25	; 0x02
   12d46:	a3 83       	std	Z+3, r26	; 0x03
   12d48:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   12d4c:	80 e0       	ldi	r24, 0x00	; 0
   12d4e:	90 e0       	ldi	r25, 0x00	; 0
   12d50:	cd b7       	in	r28, 0x3d	; 61
   12d52:	de b7       	in	r29, 0x3e	; 62
   12d54:	29 96       	adiw	r28, 0x09	; 9
   12d56:	e4 e0       	ldi	r30, 0x04	; 4
   12d58:	0c 94 33 e3 	jmp	0x1c666	; 0x1c666 <__epilogue_restores__+0x1c>

00012d5c <SS80_Set_Defaults>:
   12d5c:	0f 93       	push	r16
   12d5e:	1f 93       	push	r17
   12d60:	cf 93       	push	r28
   12d62:	df 93       	push	r29
   12d64:	ec 01       	movw	r28, r24
   12d66:	82 e0       	ldi	r24, 0x02	; 2
   12d68:	90 e0       	ldi	r25, 0x00	; 0
   12d6a:	ab de       	rcall	.-682    	; 0x12ac2 <find_type>
   12d6c:	97 fd       	sbrc	r25, 7
   12d6e:	6b c0       	rjmp	.+214    	; 0x12e46 <SS80_Set_Defaults+0xea>
   12d70:	2b e2       	ldi	r18, 0x2B	; 43
   12d72:	2c 9f       	mul	r18, r28
   12d74:	f0 01       	movw	r30, r0
   12d76:	2d 9f       	mul	r18, r29
   12d78:	f0 0d       	add	r31, r0
   12d7a:	11 24       	eor	r1, r1
   12d7c:	e0 50       	subi	r30, 0x00	; 0
   12d7e:	f1 4e       	sbci	r31, 0xE1	; 225
   12d80:	c7 a1       	ldd	r28, Z+39	; 0x27
   12d82:	d0 a5       	ldd	r29, Z+40	; 0x28
   12d84:	28 9f       	mul	r18, r24
   12d86:	f0 01       	movw	r30, r0
   12d88:	29 9f       	mul	r18, r25
   12d8a:	f0 0d       	add	r31, r0
   12d8c:	11 24       	eor	r1, r1
   12d8e:	e0 50       	subi	r30, 0x00	; 0
   12d90:	f1 4e       	sbci	r31, 0xE1	; 225
   12d92:	07 a1       	ldd	r16, Z+39	; 0x27
   12d94:	10 a5       	ldd	r17, Z+40	; 0x28
   12d96:	f8 01       	movw	r30, r16
   12d98:	80 81       	ld	r24, Z
   12d9a:	88 83       	st	Y, r24
   12d9c:	81 81       	ldd	r24, Z+1	; 0x01
   12d9e:	89 83       	std	Y+1, r24	; 0x01
   12da0:	82 81       	ldd	r24, Z+2	; 0x02
   12da2:	93 81       	ldd	r25, Z+3	; 0x03
   12da4:	0e 94 41 30 	call	0x6082	; 0x6082 <stralloc>
   12da8:	9b 83       	std	Y+3, r25	; 0x03
   12daa:	8a 83       	std	Y+2, r24	; 0x02
   12dac:	f8 01       	movw	r30, r16
   12dae:	84 81       	ldd	r24, Z+4	; 0x04
   12db0:	95 81       	ldd	r25, Z+5	; 0x05
   12db2:	9d 83       	std	Y+5, r25	; 0x05
   12db4:	8c 83       	std	Y+4, r24	; 0x04
   12db6:	86 81       	ldd	r24, Z+6	; 0x06
   12db8:	97 81       	ldd	r25, Z+7	; 0x07
   12dba:	9f 83       	std	Y+7, r25	; 0x07
   12dbc:	8e 83       	std	Y+6, r24	; 0x06
   12dbe:	80 85       	ldd	r24, Z+8	; 0x08
   12dc0:	91 85       	ldd	r25, Z+9	; 0x09
   12dc2:	99 87       	std	Y+9, r25	; 0x09
   12dc4:	88 87       	std	Y+8, r24	; 0x08
   12dc6:	82 85       	ldd	r24, Z+10	; 0x0a
   12dc8:	8a 87       	std	Y+10, r24	; 0x0a
   12dca:	83 85       	ldd	r24, Z+11	; 0x0b
   12dcc:	8b 87       	std	Y+11, r24	; 0x0b
   12dce:	84 85       	ldd	r24, Z+12	; 0x0c
   12dd0:	95 85       	ldd	r25, Z+13	; 0x0d
   12dd2:	a6 85       	ldd	r26, Z+14	; 0x0e
   12dd4:	b7 85       	ldd	r27, Z+15	; 0x0f
   12dd6:	8c 87       	std	Y+12, r24	; 0x0c
   12dd8:	9d 87       	std	Y+13, r25	; 0x0d
   12dda:	ae 87       	std	Y+14, r26	; 0x0e
   12ddc:	bf 87       	std	Y+15, r27	; 0x0f
   12dde:	80 89       	ldd	r24, Z+16	; 0x10
   12de0:	91 89       	ldd	r25, Z+17	; 0x11
   12de2:	99 8b       	std	Y+17, r25	; 0x11
   12de4:	88 8b       	std	Y+16, r24	; 0x10
   12de6:	82 89       	ldd	r24, Z+18	; 0x12
   12de8:	8a 8b       	std	Y+18, r24	; 0x12
   12dea:	83 89       	ldd	r24, Z+19	; 0x13
   12dec:	8b 8b       	std	Y+19, r24	; 0x13
   12dee:	84 89       	ldd	r24, Z+20	; 0x14
   12df0:	95 89       	ldd	r25, Z+21	; 0x15
   12df2:	9d 8b       	std	Y+21, r25	; 0x15
   12df4:	8c 8b       	std	Y+20, r24	; 0x14
   12df6:	86 89       	ldd	r24, Z+22	; 0x16
   12df8:	97 89       	ldd	r25, Z+23	; 0x17
   12dfa:	9f 8b       	std	Y+23, r25	; 0x17
   12dfc:	8e 8b       	std	Y+22, r24	; 0x16
   12dfe:	80 8d       	ldd	r24, Z+24	; 0x18
   12e00:	91 8d       	ldd	r25, Z+25	; 0x19
   12e02:	99 8f       	std	Y+25, r25	; 0x19
   12e04:	88 8f       	std	Y+24, r24	; 0x18
   12e06:	82 8d       	ldd	r24, Z+26	; 0x1a
   12e08:	93 8d       	ldd	r25, Z+27	; 0x1b
   12e0a:	9b 8f       	std	Y+27, r25	; 0x1b
   12e0c:	8a 8f       	std	Y+26, r24	; 0x1a
   12e0e:	84 8d       	ldd	r24, Z+28	; 0x1c
   12e10:	8c 8f       	std	Y+28, r24	; 0x1c
   12e12:	85 8d       	ldd	r24, Z+29	; 0x1d
   12e14:	8d 8f       	std	Y+29, r24	; 0x1d
   12e16:	87 8d       	ldd	r24, Z+31	; 0x1f
   12e18:	90 a1       	ldd	r25, Z+32	; 0x20
   12e1a:	a1 a1       	ldd	r26, Z+33	; 0x21
   12e1c:	b2 a1       	ldd	r27, Z+34	; 0x22
   12e1e:	8f 8f       	std	Y+31, r24	; 0x1f
   12e20:	98 a3       	std	Y+32, r25	; 0x20
   12e22:	a9 a3       	std	Y+33, r26	; 0x21
   12e24:	ba a3       	std	Y+34, r27	; 0x22
   12e26:	83 a1       	ldd	r24, Z+35	; 0x23
   12e28:	8b a3       	std	Y+35, r24	; 0x23
   12e2a:	84 a1       	ldd	r24, Z+36	; 0x24
   12e2c:	95 a1       	ldd	r25, Z+37	; 0x25
   12e2e:	9d a3       	std	Y+37, r25	; 0x25
   12e30:	8c a3       	std	Y+36, r24	; 0x24
   12e32:	86 a1       	ldd	r24, Z+38	; 0x26
   12e34:	97 a1       	ldd	r25, Z+39	; 0x27
   12e36:	a0 a5       	ldd	r26, Z+40	; 0x28
   12e38:	b1 a5       	ldd	r27, Z+41	; 0x29
   12e3a:	8e a3       	std	Y+38, r24	; 0x26
   12e3c:	9f a3       	std	Y+39, r25	; 0x27
   12e3e:	a8 a7       	std	Y+40, r26	; 0x28
   12e40:	b9 a7       	std	Y+41, r27	; 0x29
   12e42:	82 a5       	ldd	r24, Z+42	; 0x2a
   12e44:	8a a7       	std	Y+42, r24	; 0x2a
   12e46:	df 91       	pop	r29
   12e48:	cf 91       	pop	r28
   12e4a:	1f 91       	pop	r17
   12e4c:	0f 91       	pop	r16
   12e4e:	08 95       	ret

00012e50 <alloc_device>:
   12e50:	0f 93       	push	r16
   12e52:	1f 93       	push	r17
   12e54:	cf 93       	push	r28
   12e56:	df 93       	push	r29
   12e58:	ad b7       	in	r26, 0x3d	; 61
   12e5a:	be b7       	in	r27, 0x3e	; 62
   12e5c:	17 97       	sbiw	r26, 0x07	; 7
   12e5e:	0f b6       	in	r0, 0x3f	; 63
   12e60:	f8 94       	cli
   12e62:	be bf       	out	0x3e, r27	; 62
   12e64:	0f be       	out	0x3f, r0	; 63
   12e66:	ad bf       	out	0x3d, r26	; 61
   12e68:	8c 01       	movw	r16, r24
   12e6a:	67 de       	rcall	.-818    	; 0x12b3a <find_free>
   12e6c:	ec 01       	movw	r28, r24
   12e6e:	cf 3f       	cpi	r28, 0xFF	; 255
   12e70:	8f ef       	ldi	r24, 0xFF	; 255
   12e72:	d8 07       	cpc	r29, r24
   12e74:	89 f4       	brne	.+34     	; 0x12e98 <alloc_device+0x48>
   12e76:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12e7a:	80 ff       	sbrs	r24, 0
   12e7c:	a1 c0       	rjmp	.+322    	; 0x12fc0 <alloc_device+0x170>
   12e7e:	ed b7       	in	r30, 0x3d	; 61
   12e80:	fe b7       	in	r31, 0x3e	; 62
   12e82:	15 83       	std	Z+5, r17	; 0x05
   12e84:	04 83       	std	Z+4, r16	; 0x04
   12e86:	8b e8       	ldi	r24, 0x8B	; 139
   12e88:	98 e1       	ldi	r25, 0x18	; 24
   12e8a:	a0 e0       	ldi	r26, 0x00	; 0
   12e8c:	81 83       	std	Z+1, r24	; 0x01
   12e8e:	92 83       	std	Z+2, r25	; 0x02
   12e90:	a3 83       	std	Z+3, r26	; 0x03
   12e92:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   12e96:	94 c0       	rjmp	.+296    	; 0x12fc0 <alloc_device+0x170>
   12e98:	02 30       	cpi	r16, 0x02	; 2
   12e9a:	11 05       	cpc	r17, r1
   12e9c:	e1 f1       	breq	.+120    	; 0x12f16 <alloc_device+0xc6>
   12e9e:	ec f4       	brge	.+58     	; 0x12eda <alloc_device+0x8a>
   12ea0:	01 30       	cpi	r16, 0x01	; 1
   12ea2:	11 05       	cpc	r17, r1
   12ea4:	09 f0       	breq	.+2      	; 0x12ea8 <alloc_device+0x58>
   12ea6:	76 c0       	rjmp	.+236    	; 0x12f94 <alloc_device+0x144>
   12ea8:	8b e2       	ldi	r24, 0x2B	; 43
   12eaa:	8c 9f       	mul	r24, r28
   12eac:	80 01       	movw	r16, r0
   12eae:	8d 9f       	mul	r24, r29
   12eb0:	10 0d       	add	r17, r0
   12eb2:	11 24       	eor	r1, r1
   12eb4:	00 50       	subi	r16, 0x00	; 0
   12eb6:	11 4e       	sbci	r17, 0xE1	; 225
   12eb8:	81 e0       	ldi	r24, 0x01	; 1
   12eba:	f8 01       	movw	r30, r16
   12ebc:	80 83       	st	Z, r24
   12ebe:	61 e0       	ldi	r22, 0x01	; 1
   12ec0:	70 e0       	ldi	r23, 0x00	; 0
   12ec2:	85 e1       	ldi	r24, 0x15	; 21
   12ec4:	90 e0       	ldi	r25, 0x00	; 0
   12ec6:	0e 94 fe 25 	call	0x4bfc	; 0x4bfc <safecalloc>
   12eca:	f8 01       	movw	r30, r16
   12ecc:	90 a7       	std	Z+40, r25	; 0x28
   12ece:	87 a3       	std	Z+39, r24	; 0x27
   12ed0:	61 e0       	ldi	r22, 0x01	; 1
   12ed2:	70 e0       	ldi	r23, 0x00	; 0
   12ed4:	88 e1       	ldi	r24, 0x18	; 24
   12ed6:	90 e0       	ldi	r25, 0x00	; 0
   12ed8:	57 c0       	rjmp	.+174    	; 0x12f88 <alloc_device+0x138>
   12eda:	03 30       	cpi	r16, 0x03	; 3
   12edc:	11 05       	cpc	r17, r1
   12ede:	a1 f1       	breq	.+104    	; 0x12f48 <alloc_device+0xf8>
   12ee0:	04 30       	cpi	r16, 0x04	; 4
   12ee2:	11 05       	cpc	r17, r1
   12ee4:	09 f0       	breq	.+2      	; 0x12ee8 <alloc_device+0x98>
   12ee6:	56 c0       	rjmp	.+172    	; 0x12f94 <alloc_device+0x144>
   12ee8:	8b e2       	ldi	r24, 0x2B	; 43
   12eea:	8c 9f       	mul	r24, r28
   12eec:	80 01       	movw	r16, r0
   12eee:	8d 9f       	mul	r24, r29
   12ef0:	10 0d       	add	r17, r0
   12ef2:	11 24       	eor	r1, r1
   12ef4:	00 50       	subi	r16, 0x00	; 0
   12ef6:	11 4e       	sbci	r17, 0xE1	; 225
   12ef8:	84 e0       	ldi	r24, 0x04	; 4
   12efa:	f8 01       	movw	r30, r16
   12efc:	80 83       	st	Z, r24
   12efe:	61 e0       	ldi	r22, 0x01	; 1
   12f00:	70 e0       	ldi	r23, 0x00	; 0
   12f02:	8b e0       	ldi	r24, 0x0B	; 11
   12f04:	90 e0       	ldi	r25, 0x00	; 0
   12f06:	0e 94 fe 25 	call	0x4bfc	; 0x4bfc <safecalloc>
   12f0a:	f8 01       	movw	r30, r16
   12f0c:	90 a7       	std	Z+40, r25	; 0x28
   12f0e:	87 a3       	std	Z+39, r24	; 0x27
   12f10:	12 a6       	std	Z+42, r1	; 0x2a
   12f12:	11 a6       	std	Z+41, r1	; 0x29
   12f14:	55 c0       	rjmp	.+170    	; 0x12fc0 <alloc_device+0x170>
   12f16:	8b e2       	ldi	r24, 0x2B	; 43
   12f18:	8c 9f       	mul	r24, r28
   12f1a:	80 01       	movw	r16, r0
   12f1c:	8d 9f       	mul	r24, r29
   12f1e:	10 0d       	add	r17, r0
   12f20:	11 24       	eor	r1, r1
   12f22:	00 50       	subi	r16, 0x00	; 0
   12f24:	11 4e       	sbci	r17, 0xE1	; 225
   12f26:	82 e0       	ldi	r24, 0x02	; 2
   12f28:	f8 01       	movw	r30, r16
   12f2a:	80 83       	st	Z, r24
   12f2c:	61 e0       	ldi	r22, 0x01	; 1
   12f2e:	70 e0       	ldi	r23, 0x00	; 0
   12f30:	82 e3       	ldi	r24, 0x32	; 50
   12f32:	90 e0       	ldi	r25, 0x00	; 0
   12f34:	0e 94 fe 25 	call	0x4bfc	; 0x4bfc <safecalloc>
   12f38:	f8 01       	movw	r30, r16
   12f3a:	90 a7       	std	Z+40, r25	; 0x28
   12f3c:	87 a3       	std	Z+39, r24	; 0x27
   12f3e:	61 e0       	ldi	r22, 0x01	; 1
   12f40:	70 e0       	ldi	r23, 0x00	; 0
   12f42:	86 e1       	ldi	r24, 0x16	; 22
   12f44:	90 e0       	ldi	r25, 0x00	; 0
   12f46:	20 c0       	rjmp	.+64     	; 0x12f88 <alloc_device+0x138>
   12f48:	8b e2       	ldi	r24, 0x2B	; 43
   12f4a:	8c 9f       	mul	r24, r28
   12f4c:	80 01       	movw	r16, r0
   12f4e:	8d 9f       	mul	r24, r29
   12f50:	10 0d       	add	r17, r0
   12f52:	11 24       	eor	r1, r1
   12f54:	00 50       	subi	r16, 0x00	; 0
   12f56:	11 4e       	sbci	r17, 0xE1	; 225
   12f58:	83 e0       	ldi	r24, 0x03	; 3
   12f5a:	f8 01       	movw	r30, r16
   12f5c:	80 83       	st	Z, r24
   12f5e:	61 e0       	ldi	r22, 0x01	; 1
   12f60:	70 e0       	ldi	r23, 0x00	; 0
   12f62:	82 e3       	ldi	r24, 0x32	; 50
   12f64:	90 e0       	ldi	r25, 0x00	; 0
   12f66:	0e 94 fe 25 	call	0x4bfc	; 0x4bfc <safecalloc>
   12f6a:	f8 01       	movw	r30, r16
   12f6c:	90 a7       	std	Z+40, r25	; 0x28
   12f6e:	87 a3       	std	Z+39, r24	; 0x27
   12f70:	61 e0       	ldi	r22, 0x01	; 1
   12f72:	70 e0       	ldi	r23, 0x00	; 0
   12f74:	86 e1       	ldi	r24, 0x16	; 22
   12f76:	90 e0       	ldi	r25, 0x00	; 0
   12f78:	0e 94 fe 25 	call	0x4bfc	; 0x4bfc <safecalloc>
   12f7c:	f8 01       	movw	r30, r16
   12f7e:	92 a7       	std	Z+42, r25	; 0x2a
   12f80:	81 a7       	std	Z+41, r24	; 0x29
   12f82:	ce 01       	movw	r24, r28
   12f84:	eb de       	rcall	.-554    	; 0x12d5c <SS80_Set_Defaults>
   12f86:	1c c0       	rjmp	.+56     	; 0x12fc0 <alloc_device+0x170>
   12f88:	0e 94 fe 25 	call	0x4bfc	; 0x4bfc <safecalloc>
   12f8c:	f8 01       	movw	r30, r16
   12f8e:	92 a7       	std	Z+42, r25	; 0x2a
   12f90:	81 a7       	std	Z+41, r24	; 0x29
   12f92:	16 c0       	rjmp	.+44     	; 0x12fc0 <alloc_device+0x170>
   12f94:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12f98:	80 ff       	sbrs	r24, 0
   12f9a:	10 c0       	rjmp	.+32     	; 0x12fbc <alloc_device+0x16c>
   12f9c:	c8 01       	movw	r24, r16
   12f9e:	b4 dd       	rcall	.-1176   	; 0x12b08 <type_to_str>
   12fa0:	ed b7       	in	r30, 0x3d	; 61
   12fa2:	fe b7       	in	r31, 0x3e	; 62
   12fa4:	97 83       	std	Z+7, r25	; 0x07
   12fa6:	86 83       	std	Z+6, r24	; 0x06
   12fa8:	15 83       	std	Z+5, r17	; 0x05
   12faa:	04 83       	std	Z+4, r16	; 0x04
   12fac:	89 e6       	ldi	r24, 0x69	; 105
   12fae:	98 e1       	ldi	r25, 0x18	; 24
   12fb0:	a0 e0       	ldi	r26, 0x00	; 0
   12fb2:	81 83       	std	Z+1, r24	; 0x01
   12fb4:	92 83       	std	Z+2, r25	; 0x02
   12fb6:	a3 83       	std	Z+3, r26	; 0x03
   12fb8:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   12fbc:	cf ef       	ldi	r28, 0xFF	; 255
   12fbe:	df ef       	ldi	r29, 0xFF	; 255
   12fc0:	ce 01       	movw	r24, r28
   12fc2:	cd b7       	in	r28, 0x3d	; 61
   12fc4:	de b7       	in	r29, 0x3e	; 62
   12fc6:	27 96       	adiw	r28, 0x07	; 7
   12fc8:	e4 e0       	ldi	r30, 0x04	; 4
   12fca:	0c 94 33 e3 	jmp	0x1c666	; 0x1c666 <__epilogue_restores__+0x1c>

00012fce <init_Devices>:
   12fce:	cf 93       	push	r28
   12fd0:	df 93       	push	r29
   12fd2:	10 92 83 19 	sts	0x1983, r1	; 0x801983 <stack_ind+0x1>
   12fd6:	10 92 82 19 	sts	0x1982, r1	; 0x801982 <stack_ind>
   12fda:	e0 e0       	ldi	r30, 0x00	; 0
   12fdc:	ff e1       	ldi	r31, 0x1F	; 31
   12fde:	9f ef       	ldi	r25, 0xFF	; 255
   12fe0:	80 e2       	ldi	r24, 0x20	; 32
   12fe2:	10 82       	st	Z, r1
   12fe4:	11 82       	std	Z+1, r1	; 0x01
   12fe6:	92 83       	std	Z+2, r25	; 0x02
   12fe8:	13 82       	std	Z+3, r1	; 0x03
   12fea:	14 82       	std	Z+4, r1	; 0x04
   12fec:	15 82       	std	Z+5, r1	; 0x05
   12fee:	16 82       	std	Z+6, r1	; 0x06
   12ff0:	df 01       	movw	r26, r30
   12ff2:	17 96       	adiw	r26, 0x07	; 7
   12ff4:	ed 01       	movw	r28, r26
   12ff6:	28 2f       	mov	r18, r24
   12ff8:	19 92       	st	Y+, r1
   12ffa:	2a 95       	dec	r18
   12ffc:	e9 f7       	brne	.-6      	; 0x12ff8 <init_Devices+0x2a>
   12ffe:	10 a6       	std	Z+40, r1	; 0x28
   13000:	17 a2       	std	Z+39, r1	; 0x27
   13002:	12 a6       	std	Z+42, r1	; 0x2a
   13004:	11 a6       	std	Z+41, r1	; 0x29
   13006:	bb 96       	adiw	r30, 0x2b	; 43
   13008:	c1 e2       	ldi	r28, 0x21	; 33
   1300a:	e4 30       	cpi	r30, 0x04	; 4
   1300c:	fc 07       	cpc	r31, r28
   1300e:	49 f7       	brne	.-46     	; 0x12fe2 <init_Devices+0x14>
   13010:	df 91       	pop	r29
   13012:	cf 91       	pop	r28
   13014:	08 95       	ret

00013016 <push_state>:
   13016:	20 91 82 19 	lds	r18, 0x1982	; 0x801982 <stack_ind>
   1301a:	30 91 83 19 	lds	r19, 0x1983	; 0x801983 <stack_ind+0x1>
   1301e:	25 30       	cpi	r18, 0x05	; 5
   13020:	31 05       	cpc	r19, r1
   13022:	7c f4       	brge	.+30     	; 0x13042 <push_state+0x2c>
   13024:	a9 01       	movw	r20, r18
   13026:	4f 5f       	subi	r20, 0xFF	; 255
   13028:	5f 4f       	sbci	r21, 0xFF	; 255
   1302a:	50 93 83 19 	sts	0x1983, r21	; 0x801983 <stack_ind+0x1>
   1302e:	40 93 82 19 	sts	0x1982, r20	; 0x801982 <stack_ind>
   13032:	22 0f       	add	r18, r18
   13034:	33 1f       	adc	r19, r19
   13036:	f9 01       	movw	r30, r18
   13038:	e8 58       	subi	r30, 0x88	; 136
   1303a:	f6 4e       	sbci	r31, 0xE6	; 230
   1303c:	80 83       	st	Z, r24
   1303e:	91 83       	std	Z+1, r25	; 0x01
   13040:	08 95       	ret
   13042:	80 e0       	ldi	r24, 0x00	; 0
   13044:	90 e0       	ldi	r25, 0x00	; 0
   13046:	08 95       	ret

00013048 <pop_state>:
   13048:	80 91 82 19 	lds	r24, 0x1982	; 0x801982 <stack_ind>
   1304c:	90 91 83 19 	lds	r25, 0x1983	; 0x801983 <stack_ind+0x1>
   13050:	18 16       	cp	r1, r24
   13052:	19 06       	cpc	r1, r25
   13054:	6c f4       	brge	.+26     	; 0x13070 <pop_state+0x28>
   13056:	01 97       	sbiw	r24, 0x01	; 1
   13058:	90 93 83 19 	sts	0x1983, r25	; 0x801983 <stack_ind+0x1>
   1305c:	80 93 82 19 	sts	0x1982, r24	; 0x801982 <stack_ind>
   13060:	88 0f       	add	r24, r24
   13062:	99 1f       	adc	r25, r25
   13064:	fc 01       	movw	r30, r24
   13066:	e8 58       	subi	r30, 0x88	; 136
   13068:	f6 4e       	sbci	r31, 0xE6	; 230
   1306a:	80 81       	ld	r24, Z
   1306c:	91 81       	ldd	r25, Z+1	; 0x01
   1306e:	08 95       	ret
   13070:	80 e0       	ldi	r24, 0x00	; 0
   13072:	90 e0       	ldi	r25, 0x00	; 0
   13074:	08 95       	ret

00013076 <set_Config_Defaults>:
/// ===============================================
///@brief Set Defaults for any missing disk or printer devices
/// These are only used if the Config file omits them or is empty
/// @return  void
void set_Config_Defaults()
{
   13076:	08 95       	ret

00013078 <hpdir_set_device>:
///
///@param[in] model: model string
///
///@return 1 on sucess or 0 on fail
void hpdir_set_device(int index)
{
   13078:	0f 93       	push	r16
   1307a:	1f 93       	push	r17
   1307c:	cf 93       	push	r28
   1307e:	df 93       	push	r29
   13080:	00 d0       	rcall	.+0      	; 0x13082 <hpdir_set_device+0xa>
   13082:	1f 92       	push	r1
    if(Devices[index].TYPE == SS80_TYPE)
   13084:	2b e2       	ldi	r18, 0x2B	; 43
   13086:	ac 01       	movw	r20, r24
   13088:	24 9f       	mul	r18, r20
   1308a:	c0 01       	movw	r24, r0
   1308c:	25 9f       	mul	r18, r21
   1308e:	90 0d       	add	r25, r0
   13090:	11 24       	eor	r1, r1
   13092:	ec 01       	movw	r28, r24
   13094:	c0 50       	subi	r28, 0x00	; 0
   13096:	d1 4e       	sbci	r29, 0xE1	; 225
   13098:	28 81       	ld	r18, Y
   1309a:	23 30       	cpi	r18, 0x03	; 3
   1309c:	a1 f5       	brne	.+104    	; 0x13106 <hpdir_set_device+0x8e>
    {
        SS80DiskType *SS80p = (SS80DiskType *) Devices[index].dev;
   1309e:	ef a1       	ldd	r30, Y+39	; 0x27
   130a0:	f8 a5       	ldd	r31, Y+40	; 0x28
        SS80p->CONFIG.ID                = hpdir.ID;
   130a2:	20 91 84 21 	lds	r18, 0x2184	; 0x802184 <hpdir+0x80>
   130a6:	30 91 85 21 	lds	r19, 0x2185	; 0x802185 <hpdir+0x81>
   130aa:	35 83       	std	Z+5, r19	; 0x05
   130ac:	24 83       	std	Z+4, r18	; 0x04
        SS80p->UNIT.DEVICE_NUMBER       = hpdir.DEVICE_NUMBER;
   130ae:	40 91 90 21 	lds	r20, 0x2190	; 0x802190 <hpdir+0x8c>
   130b2:	50 91 91 21 	lds	r21, 0x2191	; 0x802191 <hpdir+0x8d>
   130b6:	60 91 92 21 	lds	r22, 0x2192	; 0x802192 <hpdir+0x8e>
   130ba:	70 91 93 21 	lds	r23, 0x2193	; 0x802193 <hpdir+0x8f>
   130be:	44 87       	std	Z+12, r20	; 0x0c
   130c0:	55 87       	std	Z+13, r21	; 0x0d
   130c2:	66 87       	std	Z+14, r22	; 0x0e
   130c4:	77 87       	std	Z+15, r23	; 0x0f
        SS80p->UNIT.BYTES_PER_BLOCK     = hpdir.BYTES_PER_SECTOR;
   130c6:	20 91 a4 21 	lds	r18, 0x21A4	; 0x8021a4 <hpdir+0xa0>
   130ca:	30 91 a5 21 	lds	r19, 0x21A5	; 0x8021a5 <hpdir+0xa1>
   130ce:	31 8b       	std	Z+17, r19	; 0x11
   130d0:	20 8b       	std	Z+16, r18	; 0x10

// CHS NOT used in this emulator!
        SS80p->VOLUME.MAX_CYLINDER      = 0;      // hpdir.CYLINDERS-1;
   130d2:	17 8e       	std	Z+31, r1	; 0x1f
   130d4:	10 a2       	std	Z+32, r1	; 0x20
   130d6:	11 a2       	std	Z+33, r1	; 0x21
   130d8:	12 a2       	std	Z+34, r1	; 0x22
        SS80p->VOLUME.MAX_HEAD          = 0;      // hpdir.HEADS-1;
   130da:	13 a2       	std	Z+35, r1	; 0x23
        SS80p->VOLUME.MAX_SECTOR        = 0;      // hpdir.SECTORS-1;
   130dc:	15 a2       	std	Z+37, r1	; 0x25
   130de:	14 a2       	std	Z+36, r1	; 0x24

        SS80p->VOLUME.MAX_BLOCK_NUMBER  = hpdir.BLOCKS-1;
   130e0:	40 91 b0 21 	lds	r20, 0x21B0	; 0x8021b0 <hpdir+0xac>
   130e4:	50 91 b1 21 	lds	r21, 0x21B1	; 0x8021b1 <hpdir+0xad>
   130e8:	60 91 b2 21 	lds	r22, 0x21B2	; 0x8021b2 <hpdir+0xae>
   130ec:	70 91 b3 21 	lds	r23, 0x21B3	; 0x8021b3 <hpdir+0xaf>
   130f0:	8a 01       	movw	r16, r20
   130f2:	9b 01       	movw	r18, r22
   130f4:	01 50       	subi	r16, 0x01	; 1
   130f6:	11 09       	sbc	r17, r1
   130f8:	21 09       	sbc	r18, r1
   130fa:	31 09       	sbc	r19, r1
   130fc:	06 a3       	std	Z+38, r16	; 0x26
   130fe:	17 a3       	std	Z+39, r17	; 0x27
   13100:	20 a7       	std	Z+40, r18	; 0x28
   13102:	31 a7       	std	Z+41, r19	; 0x29
   13104:	2a c0       	rjmp	.+84     	; 0x1315a <hpdir_set_device+0xe2>
        Devices[index].BLOCKS = hpdir.BLOCKS;
        strncpy(Devices[index].model, hpdir.model, sizeof(Devices[index].model) -2);
    }

#ifdef AMIGO
    else if(Devices[index].TYPE == AMIGO_TYPE)
   13106:	21 30       	cpi	r18, 0x01	; 1
   13108:	a9 f5       	brne	.+106    	; 0x13174 <hpdir_set_device+0xfc>
    {
        AMIGODiskType *AMIGOp = (AMIGODiskType *) Devices[index].dev;
   1310a:	ef a1       	ldd	r30, Y+39	; 0x27
   1310c:	f8 a5       	ldd	r31, Y+40	; 0x28
        AMIGOp->CONFIG.ID = hpdir.ID;
   1310e:	20 91 84 21 	lds	r18, 0x2184	; 0x802184 <hpdir+0x80>
   13112:	30 91 85 21 	lds	r19, 0x2185	; 0x802185 <hpdir+0x81>
   13116:	35 83       	std	Z+5, r19	; 0x05
   13118:	24 83       	std	Z+4, r18	; 0x04
        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = hpdir.BYTES_PER_SECTOR;
   1311a:	20 91 a4 21 	lds	r18, 0x21A4	; 0x8021a4 <hpdir+0xa0>
   1311e:	30 91 a5 21 	lds	r19, 0x21A5	; 0x8021a5 <hpdir+0xa1>
   13122:	37 83       	std	Z+7, r19	; 0x07
   13124:	26 83       	std	Z+6, r18	; 0x06
        AMIGOp->GEOMETRY.SECTORS_PER_TRACK = hpdir.SECTORS;
   13126:	20 91 a0 21 	lds	r18, 0x21A0	; 0x8021a0 <hpdir+0x9c>
   1312a:	30 91 a1 21 	lds	r19, 0x21A1	; 0x8021a1 <hpdir+0x9d>
   1312e:	31 87       	std	Z+9, r19	; 0x09
   13130:	20 87       	std	Z+8, r18	; 0x08
        AMIGOp->GEOMETRY.HEADS = hpdir.HEADS;
   13132:	20 91 9c 21 	lds	r18, 0x219C	; 0x80219c <hpdir+0x98>
   13136:	30 91 9d 21 	lds	r19, 0x219D	; 0x80219d <hpdir+0x99>
   1313a:	33 87       	std	Z+11, r19	; 0x0b
   1313c:	22 87       	std	Z+10, r18	; 0x0a
        AMIGOp->GEOMETRY.CYLINDERS = hpdir.CYLINDERS;
   1313e:	20 91 98 21 	lds	r18, 0x2198	; 0x802198 <hpdir+0x94>
   13142:	30 91 99 21 	lds	r19, 0x2199	; 0x802199 <hpdir+0x95>
   13146:	35 87       	std	Z+13, r19	; 0x0d
   13148:	24 87       	std	Z+12, r18	; 0x0c
        Devices[index].BLOCKS = hpdir.BLOCKS;
   1314a:	40 91 b0 21 	lds	r20, 0x21B0	; 0x8021b0 <hpdir+0xac>
   1314e:	50 91 b1 21 	lds	r21, 0x21B1	; 0x8021b1 <hpdir+0xad>
   13152:	60 91 b2 21 	lds	r22, 0x21B2	; 0x8021b2 <hpdir+0xae>
   13156:	70 91 b3 21 	lds	r23, 0x21B3	; 0x8021b3 <hpdir+0xaf>
   1315a:	4b 83       	std	Y+3, r20	; 0x03
   1315c:	5c 83       	std	Y+4, r21	; 0x04
   1315e:	6d 83       	std	Y+5, r22	; 0x05
   13160:	7e 83       	std	Y+6, r23	; 0x06
        strncpy(Devices[index].model, hpdir.model, sizeof(Devices[index].model) -2);
   13162:	4e e1       	ldi	r20, 0x1E	; 30
   13164:	50 e0       	ldi	r21, 0x00	; 0
   13166:	64 e0       	ldi	r22, 0x04	; 4
   13168:	71 e2       	ldi	r23, 0x21	; 33
   1316a:	89 5f       	subi	r24, 0xF9	; 249
   1316c:	90 4e       	sbci	r25, 0xE0	; 224
   1316e:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <strncpy>
   13172:	0a c0       	rjmp	.+20     	; 0x13188 <hpdir_set_device+0x110>
    }
#endif
    else
    {
        printf("hpdir_parameters invalid TYPE\n");
   13174:	8a e4       	ldi	r24, 0x4A	; 74
   13176:	98 e1       	ldi	r25, 0x18	; 24
   13178:	a0 e0       	ldi	r26, 0x00	; 0
   1317a:	ed b7       	in	r30, 0x3d	; 61
   1317c:	fe b7       	in	r31, 0x3e	; 62
   1317e:	81 83       	std	Z+1, r24	; 0x01
   13180:	92 83       	std	Z+2, r25	; 0x02
   13182:	a3 83       	std	Z+3, r26	; 0x03
   13184:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    }

}
   13188:	cd b7       	in	r28, 0x3d	; 61
   1318a:	de b7       	in	r29, 0x3e	; 62
   1318c:	23 96       	adiw	r28, 0x03	; 3
   1318e:	e4 e0       	ldi	r30, 0x04	; 4
   13190:	0c 94 33 e3 	jmp	0x1c666	; 0x1c666 <__epilogue_restores__+0x1c>

00013194 <hpdir_set_parameters>:
///@param[in] index: Devices index
///@param[in] model: model string
///
///@return void
void hpdir_set_parameters(int index, char *model)
{
   13194:	cf 93       	push	r28
   13196:	df 93       	push	r29
   13198:	ec 01       	movw	r28, r24
   1319a:	cb 01       	movw	r24, r22
    if ( hpdir_find_drive( model, 0 ,1) )
   1319c:	41 e0       	ldi	r20, 0x01	; 1
   1319e:	50 e0       	ldi	r21, 0x00	; 0
   131a0:	60 e0       	ldi	r22, 0x00	; 0
   131a2:	70 e0       	ldi	r23, 0x00	; 0
   131a4:	ad d7       	rcall	.+3930   	; 0x14100 <hpdir_find_drive>
   131a6:	89 2b       	or	r24, r25
   131a8:	11 f0       	breq	.+4      	; 0x131ae <hpdir_set_parameters+0x1a>
        hpdir_set_device(index);
   131aa:	ce 01       	movw	r24, r28
   131ac:	65 df       	rcall	.-310    	; 0x13078 <hpdir_set_device>
}
   131ae:	df 91       	pop	r29
   131b0:	cf 91       	pop	r28
   131b2:	08 95       	ret

000131b4 <Post_Config>:

/// ===============================================
/// @brief Post Process COnfiguration file after reading
/// @return  void
void Post_Config()
{
   131b4:	4f 92       	push	r4
   131b6:	5f 92       	push	r5
   131b8:	6f 92       	push	r6
   131ba:	7f 92       	push	r7
   131bc:	8f 92       	push	r8
   131be:	af 92       	push	r10
   131c0:	bf 92       	push	r11
   131c2:	cf 92       	push	r12
   131c4:	df 92       	push	r13
   131c6:	ef 92       	push	r14
   131c8:	0f 93       	push	r16
   131ca:	1f 93       	push	r17
   131cc:	cf 93       	push	r28
   131ce:	df 93       	push	r29
   131d0:	00 d0       	rcall	.+0      	; 0x131d2 <Post_Config+0x1e>
   131d2:	00 d0       	rcall	.+0      	; 0x131d4 <Post_Config+0x20>
   131d4:	1f 92       	push	r1
   131d6:	c0 e0       	ldi	r28, 0x00	; 0
   131d8:	df e1       	ldi	r29, 0x1F	; 31
   131da:	84 e0       	ldi	r24, 0x04	; 4
   131dc:	48 2e       	mov	r4, r24
   131de:	81 e2       	ldi	r24, 0x21	; 33
   131e0:	58 2e       	mov	r5, r24
        if(Devices[i].TYPE == AMIGO_TYPE )
        {
            AMIGOp = (AMIGODiskType *)Devices[i].dev;
            if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
            {
                AMIGOp->GEOMETRY.BYTES_PER_SECTOR = 256;
   131e2:	a1 2c       	mov	r10, r1
   131e4:	bb 24       	eor	r11, r11
   131e6:	b3 94       	inc	r11
                printf("Warning: %s BYTES_PER_SECTOR != 256, Adjusting to 256\n", Devices[i].model);
   131e8:	8d ed       	ldi	r24, 0xDD	; 221
   131ea:	97 e1       	ldi	r25, 0x17	; 23
   131ec:	6c 01       	movw	r12, r24
   131ee:	e1 2c       	mov	r14, r1
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
            if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
            {
// SS80p->UNIT.BYTES_PER_BLOCK = 256;
                printf("Warning: %s BYTES_PER_BLOCK != 256, Adjusting to 256\n", Devices[i].model);
   131f0:	84 e1       	ldi	r24, 0x14	; 20
   131f2:	98 e1       	ldi	r25, 0x18	; 24
   131f4:	3c 01       	movw	r6, r24
   131f6:	81 2c       	mov	r8, r1
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   131f8:	88 81       	ld	r24, Y
   131fa:	88 23       	and	r24, r24
   131fc:	09 f4       	brne	.+2      	; 0x13200 <Post_Config+0x4c>
   131fe:	57 c0       	rjmp	.+174    	; 0x132ae <Post_Config+0xfa>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   13200:	83 30       	cpi	r24, 0x03	; 3
   13202:	f9 f4       	brne	.+62     	; 0x13242 <Post_Config+0x8e>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   13204:	0f a1       	ldd	r16, Y+39	; 0x27
   13206:	18 a5       	ldd	r17, Y+40	; 0x28
            if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
   13208:	f8 01       	movw	r30, r16
   1320a:	80 89       	ldd	r24, Z+16	; 0x10
   1320c:	91 89       	ldd	r25, Z+17	; 0x11
   1320e:	81 15       	cp	r24, r1
   13210:	91 40       	sbci	r25, 0x01	; 1
   13212:	59 f0       	breq	.+22     	; 0x1322a <Post_Config+0x76>
            {
// SS80p->UNIT.BYTES_PER_BLOCK = 256;
                printf("Warning: %s BYTES_PER_BLOCK != 256, Adjusting to 256\n", Devices[i].model);
   13214:	ce 01       	movw	r24, r28
   13216:	07 96       	adiw	r24, 0x07	; 7
   13218:	ed b7       	in	r30, 0x3d	; 61
   1321a:	fe b7       	in	r31, 0x3e	; 62
   1321c:	95 83       	std	Z+5, r25	; 0x05
   1321e:	84 83       	std	Z+4, r24	; 0x04
   13220:	61 82       	std	Z+1, r6	; 0x01
   13222:	72 82       	std	Z+2, r7	; 0x02
   13224:	83 82       	std	Z+3, r8	; 0x03
   13226:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
            }
            sectors = SS80p->VOLUME.MAX_BLOCK_NUMBER+1;
            Devices[i].BLOCKS = sectors;
   1322a:	f8 01       	movw	r30, r16
   1322c:	86 a1       	ldd	r24, Z+38	; 0x26
   1322e:	97 a1       	ldd	r25, Z+39	; 0x27
   13230:	a0 a5       	ldd	r26, Z+40	; 0x28
   13232:	b1 a5       	ldd	r27, Z+41	; 0x29
   13234:	01 96       	adiw	r24, 0x01	; 1
   13236:	a1 1d       	adc	r26, r1
   13238:	b1 1d       	adc	r27, r1
   1323a:	8b 83       	std	Y+3, r24	; 0x03
   1323c:	9c 83       	std	Y+4, r25	; 0x04
   1323e:	ad 83       	std	Y+5, r26	; 0x05
   13240:	be 83       	std	Y+6, r27	; 0x06
        }                                         // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   13242:	88 81       	ld	r24, Y
   13244:	81 30       	cpi	r24, 0x01	; 1
   13246:	99 f5       	brne	.+102    	; 0x132ae <Post_Config+0xfa>
        {
            AMIGOp = (AMIGODiskType *)Devices[i].dev;
   13248:	0f a1       	ldd	r16, Y+39	; 0x27
   1324a:	18 a5       	ldd	r17, Y+40	; 0x28
            if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
   1324c:	f8 01       	movw	r30, r16
   1324e:	86 81       	ldd	r24, Z+6	; 0x06
   13250:	97 81       	ldd	r25, Z+7	; 0x07
   13252:	81 15       	cp	r24, r1
   13254:	91 40       	sbci	r25, 0x01	; 1
   13256:	71 f0       	breq	.+28     	; 0x13274 <Post_Config+0xc0>
            {
                AMIGOp->GEOMETRY.BYTES_PER_SECTOR = 256;
   13258:	f8 01       	movw	r30, r16
   1325a:	b7 82       	std	Z+7, r11	; 0x07
   1325c:	a6 82       	std	Z+6, r10	; 0x06
                printf("Warning: %s BYTES_PER_SECTOR != 256, Adjusting to 256\n", Devices[i].model);
   1325e:	ce 01       	movw	r24, r28
   13260:	07 96       	adiw	r24, 0x07	; 7
   13262:	ed b7       	in	r30, 0x3d	; 61
   13264:	fe b7       	in	r31, 0x3e	; 62
   13266:	95 83       	std	Z+5, r25	; 0x05
   13268:	84 83       	std	Z+4, r24	; 0x04
   1326a:	c1 82       	std	Z+1, r12	; 0x01
   1326c:	d2 82       	std	Z+2, r13	; 0x02
   1326e:	e3 82       	std	Z+3, r14	; 0x03
   13270:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
            }
            sectors = AMIGOp->GEOMETRY.SECTORS_PER_TRACK
                * AMIGOp->GEOMETRY.HEADS
                * AMIGOp->GEOMETRY.CYLINDERS;
            Devices[i].BLOCKS = sectors;
   13274:	f8 01       	movw	r30, r16
   13276:	20 85       	ldd	r18, Z+8	; 0x08
   13278:	31 85       	ldd	r19, Z+9	; 0x09
   1327a:	82 85       	ldd	r24, Z+10	; 0x0a
   1327c:	93 85       	ldd	r25, Z+11	; 0x0b
   1327e:	28 9f       	mul	r18, r24
   13280:	a0 01       	movw	r20, r0
   13282:	29 9f       	mul	r18, r25
   13284:	50 0d       	add	r21, r0
   13286:	38 9f       	mul	r19, r24
   13288:	50 0d       	add	r21, r0
   1328a:	11 24       	eor	r1, r1
   1328c:	24 85       	ldd	r18, Z+12	; 0x0c
   1328e:	35 85       	ldd	r19, Z+13	; 0x0d
   13290:	42 9f       	mul	r20, r18
   13292:	c0 01       	movw	r24, r0
   13294:	43 9f       	mul	r20, r19
   13296:	90 0d       	add	r25, r0
   13298:	52 9f       	mul	r21, r18
   1329a:	90 0d       	add	r25, r0
   1329c:	11 24       	eor	r1, r1
   1329e:	09 2e       	mov	r0, r25
   132a0:	00 0c       	add	r0, r0
   132a2:	aa 0b       	sbc	r26, r26
   132a4:	bb 0b       	sbc	r27, r27
   132a6:	8b 83       	std	Y+3, r24	; 0x03
   132a8:	9c 83       	std	Y+4, r25	; 0x04
   132aa:	ad 83       	std	Y+5, r26	; 0x05
   132ac:	be 83       	std	Y+6, r27	; 0x06
   132ae:	ab 96       	adiw	r28, 0x2b	; 43
#ifdef AMIGO
///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
   132b0:	4c 16       	cp	r4, r28
   132b2:	5d 06       	cpc	r5, r29
   132b4:	09 f0       	breq	.+2      	; 0x132b8 <Post_Config+0x104>
   132b6:	a0 cf       	rjmp	.-192    	; 0x131f8 <Post_Config+0x44>
                * AMIGOp->GEOMETRY.CYLINDERS;
            Devices[i].BLOCKS = sectors;
        }
#endif                                    // #ifdef AMIGO
    }
}
   132b8:	0f 90       	pop	r0
   132ba:	0f 90       	pop	r0
   132bc:	0f 90       	pop	r0
   132be:	0f 90       	pop	r0
   132c0:	0f 90       	pop	r0
   132c2:	df 91       	pop	r29
   132c4:	cf 91       	pop	r28
   132c6:	1f 91       	pop	r17
   132c8:	0f 91       	pop	r16
   132ca:	ef 90       	pop	r14
   132cc:	df 90       	pop	r13
   132ce:	cf 90       	pop	r12
   132d0:	bf 90       	pop	r11
   132d2:	af 90       	pop	r10
   132d4:	8f 90       	pop	r8
   132d6:	7f 90       	pop	r7
   132d8:	6f 90       	pop	r6
   132da:	5f 90       	pop	r5
   132dc:	4f 90       	pop	r4
   132de:	08 95       	ret

000132e0 <Read_Config>:
/// Set all drive parameters and debuglevel
///
/// @param name: config file name to process
/// @return  number of parse errors
int Read_Config(char *name)
{
   132e0:	af e1       	ldi	r26, 0x1F	; 31
   132e2:	b1 e0       	ldi	r27, 0x01	; 1
   132e4:	e6 e7       	ldi	r30, 0x76	; 118
   132e6:	f9 e9       	ldi	r31, 0x99	; 153
   132e8:	0c 94 09 e3 	jmp	0x1c612	; 0x1c612 <__prologue_saves__>
   132ec:	8c 01       	movw	r16, r24
    int lines = 0;

    char str[128];
    char token[128];

    init_Devices();
   132ee:	6f de       	rcall	.-802    	; 0x12fce <init_Devices>

    printf("Reading: %s\n", name);
   132f0:	ed b7       	in	r30, 0x3d	; 61
   132f2:	fe b7       	in	r31, 0x3e	; 62
   132f4:	15 83       	std	Z+5, r17	; 0x05
   132f6:	04 83       	std	Z+4, r16	; 0x04
   132f8:	80 ec       	ldi	r24, 0xC0	; 192
   132fa:	9d e1       	ldi	r25, 0x1D	; 29
   132fc:	a0 e0       	ldi	r26, 0x00	; 0
   132fe:	81 83       	std	Z+1, r24	; 0x01
   13300:	92 83       	std	Z+2, r25	; 0x02
   13302:	a3 83       	std	Z+3, r26	; 0x03
   13304:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    cfg = fopen(name, "rb");
   13308:	6e ef       	ldi	r22, 0xFE	; 254
   1330a:	78 e0       	ldi	r23, 0x08	; 8
   1330c:	c8 01       	movw	r24, r16
   1330e:	0e 94 8b 7c 	call	0xf916	; 0xf916 <fopen>
   13312:	c4 5f       	subi	r28, 0xF4	; 244
   13314:	de 4f       	sbci	r29, 0xFE	; 254
   13316:	99 83       	std	Y+1, r25	; 0x01
   13318:	88 83       	st	Y, r24
   1331a:	cc 50       	subi	r28, 0x0C	; 12
   1331c:	d1 40       	sbci	r29, 0x01	; 1
    if(cfg == NULL)
   1331e:	89 2b       	or	r24, r25
   13320:	09 f4       	brne	.+2      	; 0x13324 <Read_Config+0x44>
   13322:	59 c0       	rjmp	.+178    	; 0x133d6 <Read_Config+0xf6>
   13324:	41 2c       	mov	r4, r1
   13326:	51 2c       	mov	r5, r1
   13328:	c1 2c       	mov	r12, r1
   1332a:	d1 2c       	mov	r13, r1
   1332c:	c8 5f       	subi	r28, 0xF8	; 248
   1332e:	de 4f       	sbci	r29, 0xFE	; 254
   13330:	19 82       	std	Y+1, r1	; 0x01
   13332:	18 82       	st	Y, r1
   13334:	c8 50       	subi	r28, 0x08	; 8
   13336:	d1 40       	sbci	r29, 0x01	; 1
   13338:	61 2c       	mov	r6, r1
   1333a:	71 2c       	mov	r7, r1
   1333c:	c6 5f       	subi	r28, 0xF6	; 246
   1333e:	de 4f       	sbci	r29, 0xFE	; 254
   13340:	19 82       	std	Y+1, r1	; 0x01
   13342:	18 82       	st	Y, r1
   13344:	ca 50       	subi	r28, 0x0A	; 10
   13346:	d1 40       	sbci	r29, 0x01	; 1
   13348:	e1 2c       	mov	r14, r1
   1334a:	f1 2c       	mov	r15, r1
   1334c:	21 2c       	mov	r2, r1
   1334e:	31 2c       	mov	r3, r1
                        break;
                }
                break;
#endif                                // #ifdef AMIGO
            default:
                printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   13350:	8f e0       	ldi	r24, 0x0F	; 15
   13352:	9b e1       	ldi	r25, 0x1B	; 27
   13354:	9c 01       	movw	r18, r24
   13356:	40 e0       	ldi	r20, 0x00	; 0
   13358:	c2 5f       	subi	r28, 0xF2	; 242
   1335a:	de 4f       	sbci	r29, 0xFE	; 254
   1335c:	28 83       	st	Y, r18
   1335e:	39 83       	std	Y+1, r19	; 0x01
   13360:	4a 83       	std	Y+2, r20	; 0x02
   13362:	ce 50       	subi	r28, 0x0E	; 14
   13364:	d1 40       	sbci	r29, 0x01	; 1
                        break;
                    case TOK_CYLINDERS:
                        AMIGOp->GEOMETRY.CYLINDERS = val.w;
                        break;
                    default:
                        printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   13366:	81 e3       	ldi	r24, 0x31	; 49
   13368:	9b e1       	ldi	r25, 0x1B	; 27
   1336a:	9c 01       	movw	r18, r24
   1336c:	40 e0       	ldi	r20, 0x00	; 0
   1336e:	cf 5e       	subi	r28, 0xEF	; 239
   13370:	de 4f       	sbci	r29, 0xFE	; 254
   13372:	28 83       	st	Y, r18
   13374:	39 83       	std	Y+1, r19	; 0x01
   13376:	4a 83       	std	Y+2, r20	; 0x02
   13378:	c1 51       	subi	r28, 0x11	; 17
   1337a:	d1 40       	sbci	r29, 0x01	; 1
                {
                    AMIGOp->CONFIG.ID = val.w;
                }
                else
                {
                    printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   1337c:	81 e6       	ldi	r24, 0x61	; 97
   1337e:	9b e1       	ldi	r25, 0x1B	; 27
   13380:	9c 01       	movw	r18, r24
   13382:	40 e0       	ldi	r20, 0x00	; 0
   13384:	cc 5e       	subi	r28, 0xEC	; 236
   13386:	de 4f       	sbci	r29, 0xFE	; 254
   13388:	28 83       	st	Y, r18
   1338a:	39 83       	std	Y+1, r19	; 0x01
   1338c:	4a 83       	std	Y+2, r20	; 0x02
   1338e:	c4 51       	subi	r28, 0x14	; 20
   13390:	d1 40       	sbci	r29, 0x01	; 1
                        break;
                    case TOK_FILE:
                        AMIGOp->HEADER.NAME = stralloc(token);
                        break;
                    default:
                        printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   13392:	80 e9       	ldi	r24, 0x90	; 144
   13394:	9b e1       	ldi	r25, 0x1B	; 27
   13396:	9c 01       	movw	r18, r24
   13398:	40 e0       	ldi	r20, 0x00	; 0
   1339a:	c9 5e       	subi	r28, 0xE9	; 233
   1339c:	de 4f       	sbci	r29, 0xFE	; 254
   1339e:	28 83       	st	Y, r18
   133a0:	39 83       	std	Y+1, r19	; 0x01
   133a2:	4a 83       	std	Y+2, r20	; 0x02
   133a4:	c7 51       	subi	r28, 0x17	; 23
   133a6:	d1 40       	sbci	r29, 0x01	; 1
                    case TOK_GEOMETRY:
                        push_state(state);
                        state = AMIGO_GEOMETRY;
                        break;
                    default:
                        printf("Unexpected AMIGO START token: %s, at line:%d\n", ptr,lines);
   133a8:	80 ec       	ldi	r24, 0xC0	; 192
   133aa:	9b e1       	ldi	r25, 0x1B	; 27
   133ac:	9c 01       	movw	r18, r24
   133ae:	40 e0       	ldi	r20, 0x00	; 0
   133b0:	c6 5e       	subi	r28, 0xE6	; 230
   133b2:	de 4f       	sbci	r29, 0xFE	; 254
   133b4:	28 83       	st	Y, r18
   133b6:	39 83       	std	Y+1, r19	; 0x01
   133b8:	4a 83       	std	Y+2, r20	; 0x02
   133ba:	ca 51       	subi	r28, 0x1A	; 26
   133bc:	d1 40       	sbci	r29, 0x01	; 1
                        break;
                    case TOK_INTERLEAVE:
                        SS80p->VOLUME.INTERLEAVE = val.b;
                        break;
                    default:
                        printf("Unexpected SS80 VOLUME token: %s, at line:%d\n", ptr,lines);
   133be:	8e ee       	ldi	r24, 0xEE	; 238
   133c0:	9b e1       	ldi	r25, 0x1B	; 27
   133c2:	9c 01       	movw	r18, r24
   133c4:	40 e0       	ldi	r20, 0x00	; 0
   133c6:	c3 5e       	subi	r28, 0xE3	; 227
   133c8:	de 4f       	sbci	r29, 0xFE	; 254
   133ca:	28 83       	st	Y, r18
   133cc:	39 83       	std	Y+1, r19	; 0x01
   133ce:	4a 83       	std	Y+2, r20	; 0x02
   133d0:	cd 51       	subi	r28, 0x1D	; 29
   133d2:	d1 40       	sbci	r29, 0x01	; 1
   133d4:	26 c0       	rjmp	.+76     	; 0x13422 <Read_Config+0x142>
    cfg = fopen(name, "rb");
    if(cfg == NULL)
    {
        ++errors;
//FIXME
        perror("Read_Config - open");
   133d6:	8d e5       	ldi	r24, 0x5D	; 93
   133d8:	9e e0       	ldi	r25, 0x0E	; 14
   133da:	0e 94 bc 76 	call	0xed78	; 0xed78 <perror>
        printf("Read_Config: open(%s) failed\n", name);
   133de:	ed b7       	in	r30, 0x3d	; 61
   133e0:	fe b7       	in	r31, 0x3e	; 62
   133e2:	15 83       	std	Z+5, r17	; 0x05
   133e4:	04 83       	std	Z+4, r16	; 0x04
   133e6:	82 ea       	ldi	r24, 0xA2	; 162
   133e8:	9d e1       	ldi	r25, 0x1D	; 29
   133ea:	a0 e0       	ldi	r26, 0x00	; 0
   133ec:	81 83       	std	Z+1, r24	; 0x01
   133ee:	92 83       	std	Z+2, r25	; 0x02
   133f0:	a3 83       	std	Z+3, r26	; 0x03
   133f2:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
        set_Config_Defaults();
        return(errors);
   133f6:	81 e0       	ldi	r24, 0x01	; 1
   133f8:	90 e0       	ldi	r25, 0x00	; 0
   133fa:	95 c3       	rjmp	.+1834   	; 0x13b26 <Read_Config+0x846>
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
        ++lines;
   133fc:	ff ef       	ldi	r31, 0xFF	; 255
   133fe:	4f 1a       	sub	r4, r31
   13400:	5f 0a       	sbc	r5, r31

        ptr = get_token(str, token, sizeof(token)-2);
   13402:	4e e7       	ldi	r20, 0x7E	; 126
   13404:	50 e0       	ldi	r21, 0x00	; 0
   13406:	9e 01       	movw	r18, r28
   13408:	28 5f       	subi	r18, 0xF8	; 248
   1340a:	3f 4f       	sbci	r19, 0xFF	; 255
   1340c:	49 01       	movw	r8, r18
   1340e:	b9 01       	movw	r22, r18
   13410:	ce 01       	movw	r24, r28
   13412:	88 57       	subi	r24, 0x78	; 120
   13414:	9f 4f       	sbci	r25, 0xFF	; 255
   13416:	0e 94 53 31 	call	0x62a6	; 0x62a6 <get_token>
   1341a:	5c 01       	movw	r10, r24

// Skip comments
        if(token[0] == 0 || token[0]  == '#')
   1341c:	88 85       	ldd	r24, Y+8	; 0x08
   1341e:	81 11       	cpse	r24, r1
   13420:	10 c0       	rjmp	.+32     	; 0x13442 <Read_Config+0x162>
        printf("Read_Config: open(%s) failed\n", name);
        set_Config_Defaults();
        return(errors);
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   13422:	c4 5f       	subi	r28, 0xF4	; 244
   13424:	de 4f       	sbci	r29, 0xFE	; 254
   13426:	48 81       	ld	r20, Y
   13428:	59 81       	ldd	r21, Y+1	; 0x01
   1342a:	cc 50       	subi	r28, 0x0C	; 12
   1342c:	d1 40       	sbci	r29, 0x01	; 1
   1342e:	6e e7       	ldi	r22, 0x7E	; 126
   13430:	70 e0       	ldi	r23, 0x00	; 0
   13432:	ce 01       	movw	r24, r28
   13434:	88 57       	subi	r24, 0x78	; 120
   13436:	9f 4f       	sbci	r25, 0xFF	; 255
   13438:	0e 94 a3 74 	call	0xe946	; 0xe946 <fgets>
   1343c:	89 2b       	or	r24, r25
   1343e:	f1 f6       	brne	.-68     	; 0x133fc <Read_Config+0x11c>
   13440:	32 c3       	rjmp	.+1636   	; 0x13aa6 <Read_Config+0x7c6>
        ++lines;

        ptr = get_token(str, token, sizeof(token)-2);

// Skip comments
        if(token[0] == 0 || token[0]  == '#')
   13442:	83 32       	cpi	r24, 0x23	; 35
   13444:	71 f3       	breq	.-36     	; 0x13422 <Read_Config+0x142>
            continue;

        val.l = 0;
        tok = TOK_INVALID;

        if( ( ind = tok_index(token) )  == -1)
   13446:	c4 01       	movw	r24, r8
   13448:	0e 94 24 91 	call	0x12248	; 0x12248 <tok_index>
   1344c:	8f 3f       	cpi	r24, 0xFF	; 255
   1344e:	3f ef       	ldi	r19, 0xFF	; 255
   13450:	93 07       	cpc	r25, r19
   13452:	49 f4       	brne	.+18     	; 0x13466 <Read_Config+0x186>
        {
            printf("Unexpected token: %s, at line:%d\n", token,lines);
   13454:	ed b7       	in	r30, 0x3d	; 61
   13456:	fe b7       	in	r31, 0x3e	; 62
   13458:	57 82       	std	Z+7, r5	; 0x07
   1345a:	46 82       	std	Z+6, r4	; 0x06
   1345c:	95 82       	std	Z+5, r9	; 0x05
   1345e:	84 82       	std	Z+4, r8	; 0x04
   13460:	80 e8       	ldi	r24, 0x80	; 128
   13462:	9d e1       	ldi	r25, 0x1D	; 29
   13464:	c9 c0       	rjmp	.+402    	; 0x135f8 <Read_Config+0x318>
            ++errors;
            continue;
        }
        tok = tokens[ind].tok;
   13466:	88 0f       	add	r24, r24
   13468:	99 1f       	adc	r25, r25
   1346a:	88 0f       	add	r24, r24
   1346c:	99 1f       	adc	r25, r25
   1346e:	fc 01       	movw	r30, r24
   13470:	ec 53       	subi	r30, 0x3C	; 60
   13472:	fe 4f       	sbci	r31, 0xFE	; 254
   13474:	02 81       	ldd	r16, Z+2	; 0x02
   13476:	13 81       	ldd	r17, Z+3	; 0x03

// get optional argument
        ptr = get_token(ptr, token, sizeof(token)-2);
   13478:	4e e7       	ldi	r20, 0x7E	; 126
   1347a:	50 e0       	ldi	r21, 0x00	; 0
   1347c:	b4 01       	movw	r22, r8
   1347e:	c5 01       	movw	r24, r10
   13480:	0e 94 53 31 	call	0x62a6	; 0x62a6 <get_token>
   13484:	5c 01       	movw	r10, r24
        if(MATCH(token,"="))
   13486:	60 e7       	ldi	r22, 0x70	; 112
   13488:	7e e0       	ldi	r23, 0x0E	; 14
   1348a:	c4 01       	movw	r24, r8
   1348c:	0e 94 8b 30 	call	0x6116	; 0x6116 <MATCH>
   13490:	89 2b       	or	r24, r25
   13492:	39 f0       	breq	.+14     	; 0x134a2 <Read_Config+0x1c2>
            ptr = get_token(ptr, token, sizeof(token)-2);
   13494:	4e e7       	ldi	r20, 0x7E	; 126
   13496:	50 e0       	ldi	r21, 0x00	; 0
   13498:	b4 01       	movw	r22, r8
   1349a:	c5 01       	movw	r24, r10
   1349c:	0e 94 53 31 	call	0x62a6	; 0x62a6 <get_token>
   134a0:	5c 01       	movw	r10, r24
        val.l = get_value(token);
   134a2:	c4 01       	movw	r24, r8
   134a4:	0e 94 96 31 	call	0x632c	; 0x632c <get_value>
        val.w = (uint16_t) 0xFFFF & val.l;
        val.b = (uint8_t) 0xFF & val.l;

//FIXME check for state and last state
        if(tok == TOK_END )
   134a8:	01 31       	cpi	r16, 0x11	; 17
   134aa:	11 05       	cpc	r17, r1
        {
            state = pop_state();
   134ac:	19 f4       	brne	.+6      	; 0x134b4 <Read_Config+0x1d4>
   134ae:	cc dd       	rcall	.-1128   	; 0x13048 <pop_state>
   134b0:	1c 01       	movw	r2, r24
            continue;
   134b2:	b7 cf       	rjmp	.-146    	; 0x13422 <Read_Config+0x142>
        }

        switch(state)
   134b4:	30 e1       	ldi	r19, 0x10	; 16
   134b6:	23 16       	cp	r2, r19
   134b8:	31 04       	cpc	r3, r1
   134ba:	08 f0       	brcs	.+2      	; 0x134be <Read_Config+0x1de>
   134bc:	de c2       	rjmp	.+1468   	; 0x13a7a <Read_Config+0x79a>
   134be:	f1 01       	movw	r30, r2
   134c0:	ea 53       	subi	r30, 0x3A	; 58
   134c2:	ff 4f       	sbci	r31, 0xFF	; 255
   134c4:	0c 94 da e2 	jmp	0x1c5b4	; 0x1c5b4 <__tablejump2__>
        {
            case START_STATE:
                switch(tok)
   134c8:	0e 30       	cpi	r16, 0x0E	; 14
   134ca:	11 05       	cpc	r17, r1
   134cc:	09 f4       	brne	.+2      	; 0x134d0 <Read_Config+0x1f0>
   134ce:	87 c0       	rjmp	.+270    	; 0x135de <Read_Config+0x2fe>
   134d0:	44 f4       	brge	.+16     	; 0x134e2 <Read_Config+0x202>
   134d2:	02 30       	cpi	r16, 0x02	; 2
   134d4:	11 05       	cpc	r17, r1
   134d6:	09 f4       	brne	.+2      	; 0x134da <Read_Config+0x1fa>
   134d8:	41 c0       	rjmp	.+130    	; 0x1355c <Read_Config+0x27c>
   134da:	0c 30       	cpi	r16, 0x0C	; 12
   134dc:	11 05       	cpc	r17, r1
   134de:	09 f1       	breq	.+66     	; 0x13522 <Read_Config+0x242>
   134e0:	83 c0       	rjmp	.+262    	; 0x135e8 <Read_Config+0x308>
   134e2:	03 32       	cpi	r16, 0x23	; 35
   134e4:	11 05       	cpc	r17, r1
   134e6:	e9 f0       	breq	.+58     	; 0x13522 <Read_Config+0x242>
   134e8:	04 32       	cpi	r16, 0x24	; 36
   134ea:	11 05       	cpc	r17, r1
   134ec:	29 f0       	breq	.+10     	; 0x134f8 <Read_Config+0x218>
   134ee:	00 32       	cpi	r16, 0x20	; 32
   134f0:	11 05       	cpc	r17, r1
   134f2:	09 f0       	breq	.+2      	; 0x134f6 <Read_Config+0x216>
   134f4:	79 c0       	rjmp	.+242    	; 0x135e8 <Read_Config+0x308>
   134f6:	55 c0       	rjmp	.+170    	; 0x135a2 <Read_Config+0x2c2>
                {
                    case TOK_SS80_DEFAULT:
                        push_state(state);
   134f8:	80 e0       	ldi	r24, 0x00	; 0
   134fa:	90 e0       	ldi	r25, 0x00	; 0
   134fc:	8c dd       	rcall	.-1256   	; 0x13016 <push_state>
                        state = SS80_STATE;
                        index = alloc_device(SS80_DEFAULT_TYPE);
   134fe:	82 e0       	ldi	r24, 0x02	; 2
   13500:	90 e0       	ldi	r25, 0x00	; 0
   13502:	a6 dc       	rcall	.-1716   	; 0x12e50 <alloc_device>
   13504:	6c 01       	movw	r12, r24
   13506:	01 96       	adiw	r24, 0x01	; 1
                        if(index == -1)
   13508:	09 f4       	brne	.+2      	; 0x1350c <Read_Config+0x22c>
   1350a:	8b cf       	rjmp	.-234    	; 0x13422 <Read_Config+0x142>
   1350c:	8b e2       	ldi	r24, 0x2B	; 43
                            state = START_STATE;
                        else
                            SS80p = (SS80DiskType *) Devices[index].dev;
   1350e:	8c 9d       	mul	r24, r12
   13510:	f0 01       	movw	r30, r0
   13512:	8d 9d       	mul	r24, r13
   13514:	f0 0d       	add	r31, r0
   13516:	11 24       	eor	r1, r1
   13518:	e0 50       	subi	r30, 0x00	; 0
   1351a:	f1 4e       	sbci	r31, 0xE1	; 225
   1351c:	67 a0       	ldd	r6, Z+39	; 0x27
   1351e:	70 a4       	ldd	r7, Z+40	; 0x28
   13520:	19 c0       	rjmp	.+50     	; 0x13554 <Read_Config+0x274>
                        break;
                    case TOK_SS80:
                    case TOK_CS80:
                        push_state(state);
   13522:	80 e0       	ldi	r24, 0x00	; 0
   13524:	90 e0       	ldi	r25, 0x00	; 0
   13526:	77 dd       	rcall	.-1298   	; 0x13016 <push_state>
                        state = SS80_STATE;
                        index = alloc_device(SS80_TYPE);
   13528:	83 e0       	ldi	r24, 0x03	; 3
   1352a:	90 e0       	ldi	r25, 0x00	; 0
   1352c:	91 dc       	rcall	.-1758   	; 0x12e50 <alloc_device>
   1352e:	6c 01       	movw	r12, r24
   13530:	8f ef       	ldi	r24, 0xFF	; 255
                        if(index == -1)
   13532:	c8 16       	cp	r12, r24
   13534:	d8 06       	cpc	r13, r24
   13536:	09 f4       	brne	.+2      	; 0x1353a <Read_Config+0x25a>
   13538:	74 cf       	rjmp	.-280    	; 0x13422 <Read_Config+0x142>
   1353a:	8b e2       	ldi	r24, 0x2B	; 43
                        {
                            state = START_STATE;
                        }
                        else
                        {
                            SS80p = (SS80DiskType *) Devices[index].dev;
   1353c:	8c 9d       	mul	r24, r12
   1353e:	f0 01       	movw	r30, r0
   13540:	8d 9d       	mul	r24, r13
   13542:	f0 0d       	add	r31, r0
   13544:	11 24       	eor	r1, r1
   13546:	e0 50       	subi	r30, 0x00	; 0
   13548:	f1 4e       	sbci	r31, 0xE1	; 225
   1354a:	67 a0       	ldd	r6, Z+39	; 0x27
   1354c:	70 a4       	ldd	r7, Z+40	; 0x28
// Also sets Devices[index].model
                            hpdir_set_parameters(index,token);
   1354e:	b4 01       	movw	r22, r8
   13550:	c6 01       	movw	r24, r12
   13552:	20 de       	rcall	.-960    	; 0x13194 <hpdir_set_parameters>
                            SS80p = (SS80DiskType *) Devices[index].dev;
                        break;
                    case TOK_SS80:
                    case TOK_CS80:
                        push_state(state);
                        state = SS80_STATE;
   13554:	22 24       	eor	r2, r2
   13556:	23 94       	inc	r2
   13558:	31 2c       	mov	r3, r1
                            hpdir_set_parameters(index,token);
                        }
                        break;
#ifdef AMIGO
                    case TOK_AMIGO:
                        push_state(state);
   1355a:	63 cf       	rjmp	.-314    	; 0x13422 <Read_Config+0x142>
   1355c:	80 e0       	ldi	r24, 0x00	; 0
   1355e:	90 e0       	ldi	r25, 0x00	; 0
   13560:	5a dd       	rcall	.-1356   	; 0x13016 <push_state>
                        state = AMIGO_STATE;
                        index = alloc_device(AMIGO_TYPE);
   13562:	81 e0       	ldi	r24, 0x01	; 1
   13564:	90 e0       	ldi	r25, 0x00	; 0
   13566:	74 dc       	rcall	.-1816   	; 0x12e50 <alloc_device>
   13568:	6c 01       	movw	r12, r24
   1356a:	9f ef       	ldi	r25, 0xFF	; 255
                        if(index == -1)
   1356c:	c9 16       	cp	r12, r25
   1356e:	d9 06       	cpc	r13, r25
   13570:	09 f4       	brne	.+2      	; 0x13574 <Read_Config+0x294>
   13572:	57 cf       	rjmp	.-338    	; 0x13422 <Read_Config+0x142>
   13574:	8b e2       	ldi	r24, 0x2B	; 43
                        {
                            state = START_STATE;
                        }
                        else
                        {
                            AMIGOp = (AMIGODiskType *) Devices[index].dev;
   13576:	8c 9d       	mul	r24, r12
   13578:	f0 01       	movw	r30, r0
   1357a:	8d 9d       	mul	r24, r13
   1357c:	f0 0d       	add	r31, r0
   1357e:	11 24       	eor	r1, r1
   13580:	e0 50       	subi	r30, 0x00	; 0
   13582:	f1 4e       	sbci	r31, 0xE1	; 225
   13584:	a7 a1       	ldd	r26, Z+39	; 0x27
   13586:	b0 a5       	ldd	r27, Z+40	; 0x28
   13588:	c8 5f       	subi	r28, 0xF8	; 248
   1358a:	de 4f       	sbci	r29, 0xFE	; 254
   1358c:	b9 83       	std	Y+1, r27	; 0x01
   1358e:	a8 83       	st	Y, r26
   13590:	c8 50       	subi	r28, 0x08	; 8
   13592:	d1 40       	sbci	r29, 0x01	; 1
// Also sets Devices[index.model
                            hpdir_set_parameters(index,token);
   13594:	b4 01       	movw	r22, r8
   13596:	c6 01       	movw	r24, r12
   13598:	fd dd       	rcall	.-1030   	; 0x13194 <hpdir_set_parameters>
                        }
                        break;
#ifdef AMIGO
                    case TOK_AMIGO:
                        push_state(state);
                        state = AMIGO_STATE;
   1359a:	aa e0       	ldi	r26, 0x0A	; 10
   1359c:	2a 2e       	mov	r2, r26
   1359e:	31 2c       	mov	r3, r1
   135a0:	40 cf       	rjmp	.-384    	; 0x13422 <Read_Config+0x142>
                            hpdir_set_parameters(index,token);
                        }
                        break;
#endif
                    case TOK_PRINTER:
                        push_state(state);
   135a2:	80 e0       	ldi	r24, 0x00	; 0
   135a4:	90 e0       	ldi	r25, 0x00	; 0
   135a6:	37 dd       	rcall	.-1426   	; 0x13016 <push_state>
   135a8:	84 e0       	ldi	r24, 0x04	; 4
                        state = PRINTER_STATE;
                        index = alloc_device(PRINTER_TYPE);
   135aa:	90 e0       	ldi	r25, 0x00	; 0
   135ac:	51 dc       	rcall	.-1886   	; 0x12e50 <alloc_device>
   135ae:	6c 01       	movw	r12, r24
   135b0:	01 96       	adiw	r24, 0x01	; 1
   135b2:	09 f4       	brne	.+2      	; 0x135b6 <Read_Config+0x2d6>
                        if(index == -1)
   135b4:	36 cf       	rjmp	.-404    	; 0x13422 <Read_Config+0x142>
   135b6:	8b e2       	ldi	r24, 0x2B	; 43
   135b8:	8c 9d       	mul	r24, r12
                            state = START_STATE;
                        else
                            PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
   135ba:	f0 01       	movw	r30, r0
   135bc:	8d 9d       	mul	r24, r13
   135be:	f0 0d       	add	r31, r0
   135c0:	11 24       	eor	r1, r1
   135c2:	e0 50       	subi	r30, 0x00	; 0
   135c4:	f1 4e       	sbci	r31, 0xE1	; 225
   135c6:	27 a1       	ldd	r18, Z+39	; 0x27
   135c8:	30 a5       	ldd	r19, Z+40	; 0x28
   135ca:	c6 5f       	subi	r28, 0xF6	; 246
   135cc:	de 4f       	sbci	r29, 0xFE	; 254
   135ce:	39 83       	std	Y+1, r19	; 0x01
   135d0:	28 83       	st	Y, r18
   135d2:	ca 50       	subi	r28, 0x0A	; 10
   135d4:	d1 40       	sbci	r29, 0x01	; 1
   135d6:	fe e0       	ldi	r31, 0x0E	; 14
   135d8:	2f 2e       	mov	r2, r31
                        }
                        break;
#endif
                    case TOK_PRINTER:
                        push_state(state);
                        state = PRINTER_STATE;
   135da:	31 2c       	mov	r3, r1
   135dc:	22 cf       	rjmp	.-444    	; 0x13422 <Read_Config+0x142>
   135de:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <debuglevel>
                            state = START_STATE;
                        else
                            PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
                        break;
                    case TOK_DEBUG:
                        debuglevel = val.w;
   135e2:	70 93 b7 01 	sts	0x01B7, r23	; 0x8001b7 <debuglevel+0x1>
   135e6:	1d cf       	rjmp	.-454    	; 0x13422 <Read_Config+0x142>
   135e8:	ed b7       	in	r30, 0x3d	; 61
                        break;
   135ea:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected token: %s, at line:%d\n", ptr,lines);
   135ec:	57 82       	std	Z+7, r5	; 0x07
   135ee:	46 82       	std	Z+6, r4	; 0x06
   135f0:	b5 82       	std	Z+5, r11	; 0x05
   135f2:	a4 82       	std	Z+4, r10	; 0x04
   135f4:	8e e5       	ldi	r24, 0x5E	; 94
   135f6:	9d e1       	ldi	r25, 0x1D	; 29
   135f8:	a0 e0       	ldi	r26, 0x00	; 0
   135fa:	81 83       	std	Z+1, r24	; 0x01
   135fc:	92 83       	std	Z+2, r25	; 0x02
   135fe:	a3 83       	std	Z+3, r26	; 0x03
   13600:	4c c2       	rjmp	.+1176   	; 0x13a9a <Read_Config+0x7ba>
   13602:	09 30       	cpi	r16, 0x09	; 9
                        break;
                }
                break;

            case PRINTER_STATE:
                if(tok == TOK_CONFIG)
   13604:	11 05       	cpc	r17, r1
   13606:	39 f4       	brne	.+14     	; 0x13616 <Read_Config+0x336>
   13608:	8e e0       	ldi	r24, 0x0E	; 14
                {
                    push_state(state);
   1360a:	90 e0       	ldi	r25, 0x00	; 0
   1360c:	04 dd       	rcall	.-1528   	; 0x13016 <push_state>
   1360e:	ef e0       	ldi	r30, 0x0F	; 15
   13610:	2e 2e       	mov	r2, r30
                    state = PRINTER_CONFIG;
   13612:	31 2c       	mov	r3, r1
   13614:	06 cf       	rjmp	.-500    	; 0x13422 <Read_Config+0x142>
   13616:	ed b7       	in	r30, 0x3d	; 61
                {
                    printf("Unexpected PRINTER token: %s, at line:%d\n", ptr,lines);
                    ++errors;
                    break;
                }
                break;
   13618:	fe b7       	in	r31, 0x3e	; 62
                    push_state(state);
                    state = PRINTER_CONFIG;
                }
                else
                {
                    printf("Unexpected PRINTER token: %s, at line:%d\n", ptr,lines);
   1361a:	57 82       	std	Z+7, r5	; 0x07
   1361c:	46 82       	std	Z+6, r4	; 0x06
   1361e:	b5 82       	std	Z+5, r11	; 0x05
   13620:	a4 82       	std	Z+4, r10	; 0x04
   13622:	84 e3       	ldi	r24, 0x34	; 52
   13624:	9d e1       	ldi	r25, 0x1D	; 29
   13626:	e8 cf       	rjmp	.-48     	; 0x135f8 <Read_Config+0x318>
   13628:	01 30       	cpi	r16, 0x01	; 1
   1362a:	11 05       	cpc	r17, r1
                    break;
                }
                break;

            case PRINTER_CONFIG:
                if(tok == TOK_ADDRESS)
   1362c:	b1 f4       	brne	.+44     	; 0x1365a <Read_Config+0x37a>
   1362e:	6f 71       	andi	r22, 0x1F	; 31
   13630:	8b e2       	ldi	r24, 0x2B	; 43
                {
                    Devices[index].ADDRESS = 0x1f & val.b;
   13632:	8c 9d       	mul	r24, r12
   13634:	f0 01       	movw	r30, r0
   13636:	8d 9d       	mul	r24, r13
   13638:	f0 0d       	add	r31, r0
   1363a:	11 24       	eor	r1, r1
   1363c:	e0 50       	subi	r30, 0x00	; 0
   1363e:	f1 4e       	sbci	r31, 0xE1	; 225
   13640:	61 83       	std	Z+1, r22	; 0x01
   13642:	c6 5f       	subi	r28, 0xF6	; 246
   13644:	de 4f       	sbci	r29, 0xFE	; 254
                    PRINTERp->HEADER.ADDRESS  = 0x1f & val.b;
   13646:	a8 81       	ld	r26, Y
   13648:	b9 81       	ldd	r27, Y+1	; 0x01
   1364a:	ca 50       	subi	r28, 0x0A	; 10
   1364c:	d1 40       	sbci	r29, 0x01	; 1
   1364e:	6c 93       	st	X, r22
   13650:	8f ef       	ldi	r24, 0xFF	; 255
   13652:	82 83       	std	Z+2, r24	; 0x02
// NO PPR
                    Devices[index].PPR = 0xff;
   13654:	fd 01       	movw	r30, r26
   13656:	81 83       	std	Z+1, r24	; 0x01
                    PRINTERp->HEADER.PPR = 0xff;
   13658:	e4 ce       	rjmp	.-568    	; 0x13422 <Read_Config+0x142>
   1365a:	ed b7       	in	r30, 0x3d	; 61
   1365c:	fe b7       	in	r31, 0x3e	; 62
                }
                else
                {
                    printf("Unexpected PRINTER CONFIG token: %s, at line:%d\n", ptr,lines);
   1365e:	57 82       	std	Z+7, r5	; 0x07
   13660:	46 82       	std	Z+6, r4	; 0x06
   13662:	b5 82       	std	Z+5, r11	; 0x05
   13664:	a4 82       	std	Z+4, r10	; 0x04
   13666:	83 e0       	ldi	r24, 0x03	; 3
   13668:	9d e1       	ldi	r25, 0x1D	; 29
   1366a:	c6 cf       	rjmp	.-116    	; 0x135f8 <Read_Config+0x318>
   1366c:	05 31       	cpi	r16, 0x15	; 21
                    ++errors;
                }
                break;

            case SS80_STATE:
                switch(tok)
   1366e:	11 05       	cpc	r17, r1
   13670:	d9 f0       	breq	.+54     	; 0x136a8 <Read_Config+0x3c8>
   13672:	6c f4       	brge	.+26     	; 0x1368e <Read_Config+0x3ae>
   13674:	09 30       	cpi	r16, 0x09	; 9
   13676:	11 05       	cpc	r17, r1
   13678:	f1 f0       	breq	.+60     	; 0x136b6 <Read_Config+0x3d6>
   1367a:	0b 30       	cpi	r16, 0x0B	; 11
   1367c:	11 05       	cpc	r17, r1
   1367e:	49 f5       	brne	.+82     	; 0x136d2 <Read_Config+0x3f2>
   13680:	81 e0       	ldi	r24, 0x01	; 1
                    case TOK_CONFIG:
                        push_state(state);
                        state = SS80_CONFIG;
                        break;
                    case TOK_CONTROLLER:
                        push_state(state);
   13682:	90 e0       	ldi	r25, 0x00	; 0
   13684:	c8 dc       	rcall	.-1648   	; 0x13016 <push_state>
   13686:	54 e0       	ldi	r21, 0x04	; 4
                        state = SS80_CONTROLLER;
   13688:	25 2e       	mov	r2, r21
   1368a:	31 2c       	mov	r3, r1
   1368c:	ca ce       	rjmp	.-620    	; 0x13422 <Read_Config+0x142>
                        break;
   1368e:	07 32       	cpi	r16, 0x27	; 39
                    ++errors;
                }
                break;

            case SS80_STATE:
                switch(tok)
   13690:	11 05       	cpc	r17, r1
   13692:	c1 f0       	breq	.+48     	; 0x136c4 <Read_Config+0x3e4>
   13694:	0a 32       	cpi	r16, 0x2A	; 42
   13696:	11 05       	cpc	r17, r1
   13698:	e1 f4       	brne	.+56     	; 0x136d2 <Read_Config+0x3f2>
                    case TOK_UNIT:
                        push_state(state);
                        state = SS80_UNIT;
                        break;
                    case TOK_VOLUME:
                        push_state(state);
   1369a:	81 e0       	ldi	r24, 0x01	; 1
   1369c:	90 e0       	ldi	r25, 0x00	; 0
   1369e:	bb dc       	rcall	.-1674   	; 0x13016 <push_state>
                        state = SS80_VOLUME;
   136a0:	36 e0       	ldi	r19, 0x06	; 6
   136a2:	23 2e       	mov	r2, r19
   136a4:	31 2c       	mov	r3, r1
                        break;
   136a6:	bd ce       	rjmp	.-646    	; 0x13422 <Read_Config+0x142>

            case SS80_STATE:
                switch(tok)
                {
                    case TOK_HEADER:
                        push_state(state);
   136a8:	81 e0       	ldi	r24, 0x01	; 1
   136aa:	90 e0       	ldi	r25, 0x00	; 0
   136ac:	b4 dc       	rcall	.-1688   	; 0x13016 <push_state>
                        state = SS80_HEADER;
   136ae:	72 e0       	ldi	r23, 0x02	; 2
   136b0:	27 2e       	mov	r2, r23
   136b2:	31 2c       	mov	r3, r1
                        break;
   136b4:	b6 ce       	rjmp	.-660    	; 0x13422 <Read_Config+0x142>
                    case TOK_CONFIG:
                        push_state(state);
   136b6:	81 e0       	ldi	r24, 0x01	; 1
   136b8:	90 e0       	ldi	r25, 0x00	; 0
   136ba:	ad dc       	rcall	.-1702   	; 0x13016 <push_state>
   136bc:	63 e0       	ldi	r22, 0x03	; 3
                        state = SS80_CONFIG;
   136be:	26 2e       	mov	r2, r22
   136c0:	31 2c       	mov	r3, r1
   136c2:	af ce       	rjmp	.-674    	; 0x13422 <Read_Config+0x142>
                        break;
   136c4:	81 e0       	ldi	r24, 0x01	; 1
                    case TOK_CONTROLLER:
                        push_state(state);
                        state = SS80_CONTROLLER;
                        break;
                    case TOK_UNIT:
                        push_state(state);
   136c6:	90 e0       	ldi	r25, 0x00	; 0
   136c8:	a6 dc       	rcall	.-1716   	; 0x13016 <push_state>
   136ca:	45 e0       	ldi	r20, 0x05	; 5
   136cc:	24 2e       	mov	r2, r20
                        state = SS80_UNIT;
   136ce:	31 2c       	mov	r3, r1
   136d0:	a8 ce       	rjmp	.-688    	; 0x13422 <Read_Config+0x142>
   136d2:	ed b7       	in	r30, 0x3d	; 61
                        break;
   136d4:	fe b7       	in	r31, 0x3e	; 62
                    case TOK_VOLUME:
                        push_state(state);
                        state = SS80_VOLUME;
                        break;
                    default:
                        printf("Unexpected SS80 START token: %s, at line:%d\n", ptr,lines);
   136d6:	57 82       	std	Z+7, r5	; 0x07
   136d8:	46 82       	std	Z+6, r4	; 0x06
   136da:	b5 82       	std	Z+5, r11	; 0x05
   136dc:	a4 82       	std	Z+4, r10	; 0x04
   136de:	86 ed       	ldi	r24, 0xD6	; 214
   136e0:	9c e1       	ldi	r25, 0x1C	; 28
   136e2:	8a cf       	rjmp	.-236    	; 0x135f8 <Read_Config+0x318>
   136e4:	02 31       	cpi	r16, 0x12	; 18
   136e6:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_HEADER:
                switch(tok)
   136e8:	f1 f0       	breq	.+60     	; 0x13726 <Read_Config+0x446>
   136ea:	0f 31       	cpi	r16, 0x1F	; 31
   136ec:	11 05       	cpc	r17, r1
   136ee:	79 f0       	breq	.+30     	; 0x1370e <Read_Config+0x42e>
   136f0:	01 30       	cpi	r16, 0x01	; 1
   136f2:	11 05       	cpc	r17, r1
   136f4:	e9 f4       	brne	.+58     	; 0x13730 <Read_Config+0x450>
   136f6:	6f 71       	andi	r22, 0x1F	; 31
   136f8:	8b e2       	ldi	r24, 0x2B	; 43
                {
                    case TOK_ADDRESS:
                        Devices[index].ADDRESS = 0x1f & val.b;
   136fa:	8c 9d       	mul	r24, r12
   136fc:	f0 01       	movw	r30, r0
   136fe:	8d 9d       	mul	r24, r13
   13700:	f0 0d       	add	r31, r0
   13702:	11 24       	eor	r1, r1
   13704:	e0 50       	subi	r30, 0x00	; 0
   13706:	f1 4e       	sbci	r31, 0xE1	; 225
   13708:	61 83       	std	Z+1, r22	; 0x01
   1370a:	d3 01       	movw	r26, r6
   1370c:	37 c1       	rjmp	.+622    	; 0x1397c <Read_Config+0x69c>
                        SS80p->HEADER.ADDRESS  = 0x1f & val.b;
   1370e:	67 70       	andi	r22, 0x07	; 7
   13710:	8b e2       	ldi	r24, 0x2B	; 43
                        break;
                    case TOK_PPR:
                        Devices[index].PPR = 0x07 & val.b;
   13712:	8c 9d       	mul	r24, r12
   13714:	f0 01       	movw	r30, r0
   13716:	8d 9d       	mul	r24, r13
   13718:	f0 0d       	add	r31, r0
   1371a:	11 24       	eor	r1, r1
   1371c:	e0 50       	subi	r30, 0x00	; 0
   1371e:	f1 4e       	sbci	r31, 0xE1	; 225
   13720:	62 83       	std	Z+2, r22	; 0x02
   13722:	f3 01       	movw	r30, r6
   13724:	2d c1       	rjmp	.+602    	; 0x13980 <Read_Config+0x6a0>
                        SS80p->HEADER.PPR = 0x07 & val.b;
   13726:	c4 01       	movw	r24, r8
   13728:	0e 94 41 30 	call	0x6082	; 0x6082 <stralloc>
                        break;
                    case TOK_FILE:
                        SS80p->HEADER.NAME = stralloc(token);
   1372c:	f3 01       	movw	r30, r6
   1372e:	33 c1       	rjmp	.+614    	; 0x13996 <Read_Config+0x6b6>
   13730:	ed b7       	in	r30, 0x3d	; 61
   13732:	fe b7       	in	r31, 0x3e	; 62
                        break;
                    default:
                        printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   13734:	57 82       	std	Z+7, r5	; 0x07
   13736:	46 82       	std	Z+6, r4	; 0x06
   13738:	b5 82       	std	Z+5, r11	; 0x05
   1373a:	a4 82       	std	Z+4, r10	; 0x04
   1373c:	88 ea       	ldi	r24, 0xA8	; 168
   1373e:	9c e1       	ldi	r25, 0x1C	; 28
   13740:	5b cf       	rjmp	.-330    	; 0x135f8 <Read_Config+0x318>
   13742:	07 31       	cpi	r16, 0x17	; 23
   13744:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_CONFIG:
                if(tok == TOK_ID )
   13746:	21 f4       	brne	.+8      	; 0x13750 <Read_Config+0x470>
   13748:	96 2f       	mov	r25, r22
   1374a:	87 2f       	mov	r24, r23
                {
                    SS80p->CONFIG.ID = val.w;
   1374c:	f3 01       	movw	r30, r6
   1374e:	3f c1       	rjmp	.+638    	; 0x139ce <Read_Config+0x6ee>
   13750:	ed b7       	in	r30, 0x3d	; 61
   13752:	fe b7       	in	r31, 0x3e	; 62
                }
                else
                {
                    printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   13754:	57 82       	std	Z+7, r5	; 0x07
   13756:	46 82       	std	Z+6, r4	; 0x06
   13758:	b5 82       	std	Z+5, r11	; 0x05
   1375a:	a4 82       	std	Z+4, r10	; 0x04
   1375c:	8a e7       	ldi	r24, 0x7A	; 122
   1375e:	9c e1       	ldi	r25, 0x1C	; 28
   13760:	4b cf       	rjmp	.-362    	; 0x135f8 <Read_Config+0x318>
   13762:	06 32       	cpi	r16, 0x26	; 38
   13764:	11 05       	cpc	r17, r1
                    ++errors;
                }
                break;

            case SS80_CONTROLLER:
                switch(tok)
   13766:	71 f0       	breq	.+28     	; 0x13784 <Read_Config+0x4a4>
   13768:	08 32       	cpi	r16, 0x28	; 40
   1376a:	11 05       	cpc	r17, r1
   1376c:	39 f0       	breq	.+14     	; 0x1377c <Read_Config+0x49c>
   1376e:	05 32       	cpi	r16, 0x25	; 37
   13770:	11 05       	cpc	r17, r1
   13772:	59 f4       	brne	.+22     	; 0x1378a <Read_Config+0x4aa>
   13774:	96 2f       	mov	r25, r22
   13776:	87 2f       	mov	r24, r23
                {
                    case TOK_UNITS_INSTALLED:
                        SS80p->CONTROLLER.UNITS_INSTALLED = val.w;
                        break;
                    case TOK_TRANSFER_RATE:
                        SS80p->CONTROLLER.TRANSFER_RATE = val.w;
   13778:	f3 01       	movw	r30, r6
   1377a:	5c c1       	rjmp	.+696    	; 0x13a34 <Read_Config+0x754>
   1377c:	96 2f       	mov	r25, r22
   1377e:	87 2f       	mov	r24, r23

            case SS80_CONTROLLER:
                switch(tok)
                {
                    case TOK_UNITS_INSTALLED:
                        SS80p->CONTROLLER.UNITS_INSTALLED = val.w;
   13780:	f3 01       	movw	r30, r6
   13782:	55 c1       	rjmp	.+682    	; 0x13a2e <Read_Config+0x74e>
   13784:	f3 01       	movw	r30, r6
   13786:	62 87       	std	Z+10, r22	; 0x0a
                        break;
                    case TOK_TRANSFER_RATE:
                        SS80p->CONTROLLER.TRANSFER_RATE = val.w;
                        break;
                    case TOK_TYPE:
                        SS80p->CONTROLLER.TYPE = val.b;
   13788:	4c ce       	rjmp	.-872    	; 0x13422 <Read_Config+0x142>
   1378a:	ed b7       	in	r30, 0x3d	; 61
                        break;
   1378c:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected SS80 CONTROLLER token: %s, at line:%d\n", ptr,lines);
   1378e:	57 82       	std	Z+7, r5	; 0x07
   13790:	46 82       	std	Z+6, r4	; 0x06
   13792:	b5 82       	std	Z+5, r11	; 0x05
   13794:	a4 82       	std	Z+4, r10	; 0x04
   13796:	88 e4       	ldi	r24, 0x48	; 72
   13798:	9c e1       	ldi	r25, 0x1C	; 28
   1379a:	2e cf       	rjmp	.-420    	; 0x135f8 <Read_Config+0x318>
   1379c:	0a 30       	cpi	r16, 0x0A	; 10
   1379e:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   137a0:	09 f4       	brne	.+2      	; 0x137a4 <Read_Config+0x4c4>
   137a2:	45 c0       	rjmp	.+138    	; 0x1382e <Read_Config+0x54e>
   137a4:	d4 f4       	brge	.+52     	; 0x137da <Read_Config+0x4fa>
   137a6:	05 30       	cpi	r16, 0x05	; 5
   137a8:	11 05       	cpc	r17, r1
   137aa:	d1 f1       	breq	.+116    	; 0x13820 <Read_Config+0x540>
   137ac:	64 f4       	brge	.+24     	; 0x137c6 <Read_Config+0x4e6>
   137ae:	01 15       	cp	r16, r1
   137b0:	11 05       	cpc	r17, r1
   137b2:	09 f4       	brne	.+2      	; 0x137b6 <Read_Config+0x4d6>
   137b4:	40 c0       	rjmp	.+128    	; 0x13836 <Read_Config+0x556>
   137b6:	04 30       	cpi	r16, 0x04	; 4
   137b8:	11 05       	cpc	r17, r1
   137ba:	09 f0       	breq	.+2      	; 0x137be <Read_Config+0x4de>
   137bc:	46 c0       	rjmp	.+140    	; 0x1384a <Read_Config+0x56a>
   137be:	f3 01       	movw	r30, r6
   137c0:	64 8b       	std	Z+20, r22	; 0x14
                        break;
                    case TOK_BURST_SIZE:
                        SS80p->UNIT.BURST_SIZE = val.b;
                        break;
                    case TOK_BLOCK_TIME:
                        SS80p->UNIT.BLOCK_TIME = val.w;
   137c2:	75 8b       	std	Z+21, r23	; 0x15
   137c4:	2e ce       	rjmp	.-932    	; 0x13422 <Read_Config+0x142>
   137c6:	06 30       	cpi	r16, 0x06	; 6
                        break;
   137c8:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   137ca:	71 f1       	breq	.+92     	; 0x13828 <Read_Config+0x548>
   137cc:	07 30       	cpi	r16, 0x07	; 7
   137ce:	11 05       	cpc	r17, r1
   137d0:	e1 f5       	brne	.+120    	; 0x1384a <Read_Config+0x56a>
   137d2:	f3 01       	movw	r30, r6
   137d4:	60 8b       	std	Z+16, r22	; 0x10
                        break;
                    case TOK_DEVICE_NUMBER:
                        SS80p->UNIT.DEVICE_NUMBER = val.l;
                        break;
                    case TOK_BYTES_PER_BLOCK:
                        SS80p->UNIT.BYTES_PER_BLOCK = val.w;
   137d6:	71 8b       	std	Z+17, r23	; 0x11
   137d8:	24 ce       	rjmp	.-952    	; 0x13422 <Read_Config+0x142>
   137da:	0c 31       	cpi	r16, 0x1C	; 28
                        break;
   137dc:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   137de:	79 f1       	breq	.+94     	; 0x1383e <Read_Config+0x55e>
   137e0:	4c f4       	brge	.+18     	; 0x137f4 <Read_Config+0x514>
   137e2:	0f 30       	cpi	r16, 0x0F	; 15
   137e4:	11 05       	cpc	r17, r1
   137e6:	b1 f0       	breq	.+44     	; 0x13814 <Read_Config+0x534>
   137e8:	03 31       	cpi	r16, 0x13	; 19
   137ea:	11 05       	cpc	r17, r1
   137ec:	71 f5       	brne	.+92     	; 0x1384a <Read_Config+0x56a>
   137ee:	f3 01       	movw	r30, r6
   137f0:	65 8f       	std	Z+29, r22	; 0x1d
                        break;
                    case TOK_MAXIMUM_INTERLEAVE:
                        SS80p->UNIT.MAXIMUM_INTERLEAVE = val.b;
                        break;
                    case TOK_FIXED_VOLUMES:
                        SS80p->UNIT.FIXED_VOLUMES = val.b;
   137f2:	17 ce       	rjmp	.-978    	; 0x13422 <Read_Config+0x142>
   137f4:	01 32       	cpi	r16, 0x21	; 33
                        break;
   137f6:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   137f8:	29 f1       	breq	.+74     	; 0x13844 <Read_Config+0x564>
   137fa:	09 32       	cpi	r16, 0x29	; 41
   137fc:	11 05       	cpc	r17, r1
   137fe:	39 f0       	breq	.+14     	; 0x1380e <Read_Config+0x52e>
   13800:	0e 31       	cpi	r16, 0x1E	; 30
   13802:	11 05       	cpc	r17, r1
   13804:	11 f5       	brne	.+68     	; 0x1384a <Read_Config+0x56a>
   13806:	f3 01       	movw	r30, r6
   13808:	60 8f       	std	Z+24, r22	; 0x18
                        break;
                    case TOK_CONTINUOUS_TRANSFER_RATE:
                        SS80p->UNIT.CONTINUOUS_TRANSFER_RATE = val.w;
                        break;
                    case TOK_OPTIMAL_RETRY_TIME:
                        SS80p->UNIT.OPTIMAL_RETRY_TIME = val.w;
   1380a:	71 8f       	std	Z+25, r23	; 0x19
   1380c:	0a ce       	rjmp	.-1004   	; 0x13422 <Read_Config+0x142>
   1380e:	f3 01       	movw	r30, r6
                        break;
   13810:	63 87       	std	Z+11, r22	; 0x0b

            case SS80_UNIT:
                switch(tok)
                {
                    case TOK_UNIT_TYPE:
                        SS80p->UNIT.UNIT_TYPE = val.b;
   13812:	07 ce       	rjmp	.-1010   	; 0x13422 <Read_Config+0x142>
   13814:	f3 01       	movw	r30, r6
                        break;
   13816:	64 87       	std	Z+12, r22	; 0x0c
                    case TOK_DEVICE_NUMBER:
                        SS80p->UNIT.DEVICE_NUMBER = val.l;
   13818:	75 87       	std	Z+13, r23	; 0x0d
   1381a:	86 87       	std	Z+14, r24	; 0x0e
   1381c:	97 87       	std	Z+15, r25	; 0x0f
   1381e:	01 ce       	rjmp	.-1022   	; 0x13422 <Read_Config+0x142>
   13820:	61 70       	andi	r22, 0x01	; 1
                        break;
   13822:	f3 01       	movw	r30, r6
                    case TOK_BYTES_PER_BLOCK:
                        SS80p->UNIT.BYTES_PER_BLOCK = val.w;
                        break;
                    case TOK_BUFFERED_BLOCKS:
                        SS80p->UNIT.BUFFERED_BLOCKS = 1 & val.b;
   13824:	62 8b       	std	Z+18, r22	; 0x12
   13826:	fd cd       	rjmp	.-1030   	; 0x13422 <Read_Config+0x142>
   13828:	f3 01       	movw	r30, r6
                        break;
   1382a:	63 8b       	std	Z+19, r22	; 0x13
                    case TOK_BURST_SIZE:
                        SS80p->UNIT.BURST_SIZE = val.b;
   1382c:	fa cd       	rjmp	.-1036   	; 0x13422 <Read_Config+0x142>
   1382e:	f3 01       	movw	r30, r6
                        break;
   13830:	66 8b       	std	Z+22, r22	; 0x16
                    case TOK_BLOCK_TIME:
                        SS80p->UNIT.BLOCK_TIME = val.w;
                        break;
                    case TOK_CONTINUOUS_TRANSFER_RATE:
                        SS80p->UNIT.CONTINUOUS_TRANSFER_RATE = val.w;
   13832:	77 8b       	std	Z+23, r23	; 0x17
   13834:	f6 cd       	rjmp	.-1044   	; 0x13422 <Read_Config+0x142>
   13836:	f3 01       	movw	r30, r6
                        break;
   13838:	62 8f       	std	Z+26, r22	; 0x1a
                    case TOK_OPTIMAL_RETRY_TIME:
                        SS80p->UNIT.OPTIMAL_RETRY_TIME = val.w;
                        break;
                    case TOK_ACCESS_TIME:
                        SS80p->UNIT.ACCESS_TIME = val.w;
   1383a:	73 8f       	std	Z+27, r23	; 0x1b
   1383c:	f2 cd       	rjmp	.-1052   	; 0x13422 <Read_Config+0x142>
   1383e:	f3 01       	movw	r30, r6
                        break;
   13840:	64 8f       	std	Z+28, r22	; 0x1c
                    case TOK_MAXIMUM_INTERLEAVE:
                        SS80p->UNIT.MAXIMUM_INTERLEAVE = val.b;
   13842:	ef cd       	rjmp	.-1058   	; 0x13422 <Read_Config+0x142>
   13844:	f3 01       	movw	r30, r6
                        break;
   13846:	66 8f       	std	Z+30, r22	; 0x1e
                    case TOK_FIXED_VOLUMES:
                        SS80p->UNIT.FIXED_VOLUMES = val.b;
                        break;
                    case TOK_REMOVABLE_VOLUMES:
                        SS80p->UNIT.REMOVABLE_VOLUMES = val.b;
   13848:	ec cd       	rjmp	.-1064   	; 0x13422 <Read_Config+0x142>
   1384a:	ed b7       	in	r30, 0x3d	; 61
                        break;
   1384c:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected SS80 UNIT token: %s, at line:%d\n", ptr,lines);
   1384e:	57 82       	std	Z+7, r5	; 0x07
   13850:	46 82       	std	Z+6, r4	; 0x06
   13852:	b5 82       	std	Z+5, r11	; 0x05
   13854:	a4 82       	std	Z+4, r10	; 0x04
   13856:	8c e1       	ldi	r24, 0x1C	; 28
   13858:	9c e1       	ldi	r25, 0x1C	; 28
   1385a:	ce ce       	rjmp	.-612    	; 0x135f8 <Read_Config+0x318>
   1385c:	0a 31       	cpi	r16, 0x1A	; 26
   1385e:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_VOLUME:
                switch(tok)
   13860:	b9 f0       	breq	.+46     	; 0x13890 <Read_Config+0x5b0>
   13862:	64 f4       	brge	.+24     	; 0x1387c <Read_Config+0x59c>
   13864:	08 31       	cpi	r16, 0x18	; 24
   13866:	11 05       	cpc	r17, r1
   13868:	e1 f0       	breq	.+56     	; 0x138a2 <Read_Config+0x5c2>
   1386a:	09 31       	cpi	r16, 0x19	; 25
   1386c:	11 05       	cpc	r17, r1
   1386e:	e1 f4       	brne	.+56     	; 0x138a8 <Read_Config+0x5c8>
   13870:	f3 01       	movw	r30, r6
   13872:	66 a3       	std	Z+38, r22	; 0x26
                        break;
                    case TOK_MAX_SECTOR:
                        SS80p->VOLUME.MAX_SECTOR = val.w;
                        break;
                    case TOK_MAX_BLOCK_NUMBER:
                        SS80p->VOLUME.MAX_BLOCK_NUMBER = val.l;
   13874:	77 a3       	std	Z+39, r23	; 0x27
   13876:	80 a7       	std	Z+40, r24	; 0x28
   13878:	91 a7       	std	Z+41, r25	; 0x29
   1387a:	d3 cd       	rjmp	.-1114   	; 0x13422 <Read_Config+0x142>
   1387c:	0b 31       	cpi	r16, 0x1B	; 27
                        break;
   1387e:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_VOLUME:
                switch(tok)
   13880:	69 f0       	breq	.+26     	; 0x1389c <Read_Config+0x5bc>
   13882:	0d 31       	cpi	r16, 0x1D	; 29
   13884:	11 05       	cpc	r17, r1
   13886:	81 f4       	brne	.+32     	; 0x138a8 <Read_Config+0x5c8>
   13888:	f3 01       	movw	r30, r6
   1388a:	64 a3       	std	Z+36, r22	; 0x24
                        break;
                    case TOK_MAX_HEAD:
                        SS80p->VOLUME.MAX_HEAD = val.b;
                        break;
                    case TOK_MAX_SECTOR:
                        SS80p->VOLUME.MAX_SECTOR = val.w;
   1388c:	75 a3       	std	Z+37, r23	; 0x25
   1388e:	c9 cd       	rjmp	.-1134   	; 0x13422 <Read_Config+0x142>
   13890:	f3 01       	movw	r30, r6
                        break;
   13892:	67 8f       	std	Z+31, r22	; 0x1f

            case SS80_VOLUME:
                switch(tok)
                {
                    case TOK_MAX_CYLINDER:
                        SS80p->VOLUME.MAX_CYLINDER = val.l;
   13894:	70 a3       	std	Z+32, r23	; 0x20
   13896:	81 a3       	std	Z+33, r24	; 0x21
   13898:	92 a3       	std	Z+34, r25	; 0x22
   1389a:	c3 cd       	rjmp	.-1146   	; 0x13422 <Read_Config+0x142>
   1389c:	f3 01       	movw	r30, r6
                        break;
   1389e:	63 a3       	std	Z+35, r22	; 0x23
                    case TOK_MAX_HEAD:
                        SS80p->VOLUME.MAX_HEAD = val.b;
   138a0:	c0 cd       	rjmp	.-1152   	; 0x13422 <Read_Config+0x142>
   138a2:	f3 01       	movw	r30, r6
                        break;
   138a4:	62 a7       	std	Z+42, r22	; 0x2a
                        break;
                    case TOK_MAX_BLOCK_NUMBER:
                        SS80p->VOLUME.MAX_BLOCK_NUMBER = val.l;
                        break;
                    case TOK_INTERLEAVE:
                        SS80p->VOLUME.INTERLEAVE = val.b;
   138a6:	bd cd       	rjmp	.-1158   	; 0x13422 <Read_Config+0x142>
   138a8:	ed b7       	in	r30, 0x3d	; 61
                        break;
   138aa:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected SS80 VOLUME token: %s, at line:%d\n", ptr,lines);
   138ac:	57 82       	std	Z+7, r5	; 0x07
   138ae:	46 82       	std	Z+6, r4	; 0x06
   138b0:	b5 82       	std	Z+5, r11	; 0x05
   138b2:	a4 82       	std	Z+4, r10	; 0x04
   138b4:	c3 5e       	subi	r28, 0xE3	; 227
   138b6:	de 4f       	sbci	r29, 0xFE	; 254
   138b8:	28 81       	ld	r18, Y
   138ba:	39 81       	ldd	r19, Y+1	; 0x01
   138bc:	4a 81       	ldd	r20, Y+2	; 0x02
   138be:	cd 51       	subi	r28, 0x1D	; 29
   138c0:	d1 40       	sbci	r29, 0x01	; 1
   138c2:	e8 c0       	rjmp	.+464    	; 0x13a94 <Read_Config+0x7b4>
   138c4:	04 31       	cpi	r16, 0x14	; 20
                }
                break;

#ifdef AMIGO
            case AMIGO_STATE:
                switch(tok)
   138c6:	11 05       	cpc	r17, r1
   138c8:	a1 f0       	breq	.+40     	; 0x138f2 <Read_Config+0x612>
   138ca:	05 31       	cpi	r16, 0x15	; 21
   138cc:	11 05       	cpc	r17, r1
   138ce:	51 f0       	breq	.+20     	; 0x138e4 <Read_Config+0x604>
   138d0:	09 30       	cpi	r16, 0x09	; 9
   138d2:	11 05       	cpc	r17, r1
                    case TOK_HEADER:
                        push_state(state);
                        state = AMIGO_HEADER;
                        break;
                    case TOK_CONFIG:
                        push_state(state);
   138d4:	a9 f4       	brne	.+42     	; 0x13900 <Read_Config+0x620>
   138d6:	8a e0       	ldi	r24, 0x0A	; 10
   138d8:	90 e0       	ldi	r25, 0x00	; 0
   138da:	9d db       	rcall	.-2246   	; 0x13016 <push_state>
                        state = AMIGO_CONFIG;
   138dc:	9c e0       	ldi	r25, 0x0C	; 12
   138de:	29 2e       	mov	r2, r25
   138e0:	31 2c       	mov	r3, r1
                        break;
   138e2:	9f cd       	rjmp	.-1218   	; 0x13422 <Read_Config+0x142>
#ifdef AMIGO
            case AMIGO_STATE:
                switch(tok)
                {
                    case TOK_HEADER:
                        push_state(state);
   138e4:	8a e0       	ldi	r24, 0x0A	; 10
   138e6:	90 e0       	ldi	r25, 0x00	; 0
   138e8:	96 db       	rcall	.-2260   	; 0x13016 <push_state>
   138ea:	2b e0       	ldi	r18, 0x0B	; 11
                        state = AMIGO_HEADER;
   138ec:	22 2e       	mov	r2, r18
   138ee:	31 2c       	mov	r3, r1
   138f0:	98 cd       	rjmp	.-1232   	; 0x13422 <Read_Config+0x142>
                        break;
   138f2:	8a e0       	ldi	r24, 0x0A	; 10
                    case TOK_CONFIG:
                        push_state(state);
                        state = AMIGO_CONFIG;
                        break;
                    case TOK_GEOMETRY:
                        push_state(state);
   138f4:	90 e0       	ldi	r25, 0x00	; 0
   138f6:	8f db       	rcall	.-2274   	; 0x13016 <push_state>
   138f8:	8d e0       	ldi	r24, 0x0D	; 13
   138fa:	28 2e       	mov	r2, r24
                        state = AMIGO_GEOMETRY;
   138fc:	31 2c       	mov	r3, r1
   138fe:	91 cd       	rjmp	.-1246   	; 0x13422 <Read_Config+0x142>
   13900:	ed b7       	in	r30, 0x3d	; 61
                        break;
   13902:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected AMIGO START token: %s, at line:%d\n", ptr,lines);
   13904:	57 82       	std	Z+7, r5	; 0x07
   13906:	46 82       	std	Z+6, r4	; 0x06
   13908:	b5 82       	std	Z+5, r11	; 0x05
   1390a:	a4 82       	std	Z+4, r10	; 0x04
   1390c:	c6 5e       	subi	r28, 0xE6	; 230
   1390e:	de 4f       	sbci	r29, 0xFE	; 254
   13910:	28 81       	ld	r18, Y
   13912:	39 81       	ldd	r19, Y+1	; 0x01
   13914:	4a 81       	ldd	r20, Y+2	; 0x02
   13916:	ca 51       	subi	r28, 0x1A	; 26
   13918:	d1 40       	sbci	r29, 0x01	; 1
   1391a:	bc c0       	rjmp	.+376    	; 0x13a94 <Read_Config+0x7b4>
   1391c:	00 31       	cpi	r16, 0x10	; 16
   1391e:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case AMIGO_HEADER:
                switch(tok)
   13920:	09 f4       	brne	.+2      	; 0x13924 <Read_Config+0x644>
   13922:	7f cd       	rjmp	.-1282   	; 0x13422 <Read_Config+0x142>
   13924:	a4 f4       	brge	.+40     	; 0x1394e <Read_Config+0x66e>
   13926:	01 30       	cpi	r16, 0x01	; 1
   13928:	11 05       	cpc	r17, r1
   1392a:	c1 f5       	brne	.+112    	; 0x1399c <Read_Config+0x6bc>
   1392c:	6f 71       	andi	r22, 0x1F	; 31
   1392e:	8b e2       	ldi	r24, 0x2B	; 43
                {
                    case TOK_DRIVE:
                        break;
                    case TOK_ADDRESS:
                        Devices[index].ADDRESS = 0x1f & val.b;
   13930:	8c 9d       	mul	r24, r12
   13932:	f0 01       	movw	r30, r0
   13934:	8d 9d       	mul	r24, r13
   13936:	f0 0d       	add	r31, r0
   13938:	11 24       	eor	r1, r1
   1393a:	e0 50       	subi	r30, 0x00	; 0
   1393c:	f1 4e       	sbci	r31, 0xE1	; 225
   1393e:	61 83       	std	Z+1, r22	; 0x01
   13940:	c8 5f       	subi	r28, 0xF8	; 248
   13942:	de 4f       	sbci	r29, 0xFE	; 254
                        AMIGOp->HEADER.ADDRESS = 0x1f & val.b;
   13944:	a8 81       	ld	r26, Y
   13946:	b9 81       	ldd	r27, Y+1	; 0x01
   13948:	c8 50       	subi	r28, 0x08	; 8
   1394a:	d1 40       	sbci	r29, 0x01	; 1
   1394c:	17 c0       	rjmp	.+46     	; 0x1397c <Read_Config+0x69c>
   1394e:	02 31       	cpi	r16, 0x12	; 18
   13950:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case AMIGO_HEADER:
                switch(tok)
   13952:	c1 f0       	breq	.+48     	; 0x13984 <Read_Config+0x6a4>
   13954:	0f 31       	cpi	r16, 0x1F	; 31
   13956:	11 05       	cpc	r17, r1
   13958:	09 f5       	brne	.+66     	; 0x1399c <Read_Config+0x6bc>
   1395a:	67 70       	andi	r22, 0x07	; 7
   1395c:	8b e2       	ldi	r24, 0x2B	; 43
                    case TOK_ADDRESS:
                        Devices[index].ADDRESS = 0x1f & val.b;
                        AMIGOp->HEADER.ADDRESS = 0x1f & val.b;
                        break;
                    case TOK_PPR:
                        Devices[index].PPR = 0x07 & val.b;
   1395e:	8c 9d       	mul	r24, r12
   13960:	f0 01       	movw	r30, r0
   13962:	8d 9d       	mul	r24, r13
   13964:	f0 0d       	add	r31, r0
   13966:	11 24       	eor	r1, r1
   13968:	e0 50       	subi	r30, 0x00	; 0
   1396a:	f1 4e       	sbci	r31, 0xE1	; 225
   1396c:	62 83       	std	Z+2, r22	; 0x02
   1396e:	c8 5f       	subi	r28, 0xF8	; 248
   13970:	de 4f       	sbci	r29, 0xFE	; 254
                        AMIGOp->HEADER.PPR = 0x07 & val.b;
   13972:	e8 81       	ld	r30, Y
   13974:	f9 81       	ldd	r31, Y+1	; 0x01
   13976:	c8 50       	subi	r28, 0x08	; 8
   13978:	d1 40       	sbci	r29, 0x01	; 1
   1397a:	02 c0       	rjmp	.+4      	; 0x13980 <Read_Config+0x6a0>
   1397c:	6c 93       	st	X, r22
   1397e:	51 cd       	rjmp	.-1374   	; 0x13422 <Read_Config+0x142>
                {
                    case TOK_DRIVE:
                        break;
                    case TOK_ADDRESS:
                        Devices[index].ADDRESS = 0x1f & val.b;
                        AMIGOp->HEADER.ADDRESS = 0x1f & val.b;
   13980:	61 83       	std	Z+1, r22	; 0x01
                        break;
   13982:	4f cd       	rjmp	.-1378   	; 0x13422 <Read_Config+0x142>
                    case TOK_PPR:
                        Devices[index].PPR = 0x07 & val.b;
                        AMIGOp->HEADER.PPR = 0x07 & val.b;
   13984:	c4 01       	movw	r24, r8
                        break;
   13986:	0e 94 41 30 	call	0x6082	; 0x6082 <stralloc>
                    case TOK_FILE:
                        AMIGOp->HEADER.NAME = stralloc(token);
   1398a:	c8 5f       	subi	r28, 0xF8	; 248
   1398c:	de 4f       	sbci	r29, 0xFE	; 254
   1398e:	e8 81       	ld	r30, Y
   13990:	f9 81       	ldd	r31, Y+1	; 0x01
   13992:	c8 50       	subi	r28, 0x08	; 8
   13994:	d1 40       	sbci	r29, 0x01	; 1
   13996:	93 83       	std	Z+3, r25	; 0x03
   13998:	82 83       	std	Z+2, r24	; 0x02
   1399a:	43 cd       	rjmp	.-1402   	; 0x13422 <Read_Config+0x142>
   1399c:	ed b7       	in	r30, 0x3d	; 61
                        break;
   1399e:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   139a0:	57 82       	std	Z+7, r5	; 0x07
   139a2:	46 82       	std	Z+6, r4	; 0x06
   139a4:	b5 82       	std	Z+5, r11	; 0x05
   139a6:	a4 82       	std	Z+4, r10	; 0x04
   139a8:	c9 5e       	subi	r28, 0xE9	; 233
   139aa:	de 4f       	sbci	r29, 0xFE	; 254
   139ac:	28 81       	ld	r18, Y
   139ae:	39 81       	ldd	r19, Y+1	; 0x01
   139b0:	4a 81       	ldd	r20, Y+2	; 0x02
   139b2:	c7 51       	subi	r28, 0x17	; 23
   139b4:	d1 40       	sbci	r29, 0x01	; 1
   139b6:	6e c0       	rjmp	.+220    	; 0x13a94 <Read_Config+0x7b4>
   139b8:	07 31       	cpi	r16, 0x17	; 23
   139ba:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case AMIGO_CONFIG:
                if(tok == TOK_ID )
   139bc:	59 f4       	brne	.+22     	; 0x139d4 <Read_Config+0x6f4>
   139be:	96 2f       	mov	r25, r22
   139c0:	87 2f       	mov	r24, r23
                {
                    AMIGOp->CONFIG.ID = val.w;
   139c2:	c8 5f       	subi	r28, 0xF8	; 248
   139c4:	de 4f       	sbci	r29, 0xFE	; 254
   139c6:	e8 81       	ld	r30, Y
   139c8:	f9 81       	ldd	r31, Y+1	; 0x01
   139ca:	c8 50       	subi	r28, 0x08	; 8
   139cc:	d1 40       	sbci	r29, 0x01	; 1
   139ce:	94 83       	std	Z+4, r25	; 0x04
   139d0:	85 83       	std	Z+5, r24	; 0x05
   139d2:	27 cd       	rjmp	.-1458   	; 0x13422 <Read_Config+0x142>
   139d4:	ed b7       	in	r30, 0x3d	; 61
   139d6:	fe b7       	in	r31, 0x3e	; 62
                }
                else
                {
                    printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   139d8:	57 82       	std	Z+7, r5	; 0x07
   139da:	46 82       	std	Z+6, r4	; 0x06
   139dc:	b5 82       	std	Z+5, r11	; 0x05
   139de:	a4 82       	std	Z+4, r10	; 0x04
   139e0:	cc 5e       	subi	r28, 0xEC	; 236
   139e2:	de 4f       	sbci	r29, 0xFE	; 254
   139e4:	28 81       	ld	r18, Y
   139e6:	39 81       	ldd	r19, Y+1	; 0x01
   139e8:	4a 81       	ldd	r20, Y+2	; 0x02
   139ea:	c4 51       	subi	r28, 0x14	; 20
   139ec:	d1 40       	sbci	r29, 0x01	; 1
   139ee:	52 c0       	rjmp	.+164    	; 0x13a94 <Read_Config+0x7b4>
   139f0:	0d 30       	cpi	r16, 0x0D	; 13
   139f2:	11 05       	cpc	r17, r1
                    ++errors;
                }
                break;

            case AMIGO_GEOMETRY:
                switch(tok)
   139f4:	59 f1       	breq	.+86     	; 0x13a4c <Read_Config+0x76c>
   139f6:	64 f4       	brge	.+24     	; 0x13a10 <Read_Config+0x730>
   139f8:	08 30       	cpi	r16, 0x08	; 8
   139fa:	11 05       	cpc	r17, r1
   139fc:	81 f5       	brne	.+96     	; 0x13a5e <Read_Config+0x77e>
   139fe:	96 2f       	mov	r25, r22
   13a00:	87 2f       	mov	r24, r23
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
   13a02:	c8 5f       	subi	r28, 0xF8	; 248
   13a04:	de 4f       	sbci	r29, 0xFE	; 254
   13a06:	e8 81       	ld	r30, Y
   13a08:	f9 81       	ldd	r31, Y+1	; 0x01
   13a0a:	c8 50       	subi	r28, 0x08	; 8
   13a0c:	d1 40       	sbci	r29, 0x01	; 1
   13a0e:	0f c0       	rjmp	.+30     	; 0x13a2e <Read_Config+0x74e>
   13a10:	06 31       	cpi	r16, 0x16	; 22
   13a12:	11 05       	cpc	r17, r1
                    ++errors;
                }
                break;

            case AMIGO_GEOMETRY:
                switch(tok)
   13a14:	91 f0       	breq	.+36     	; 0x13a3a <Read_Config+0x75a>
   13a16:	02 32       	cpi	r16, 0x22	; 34
   13a18:	11 05       	cpc	r17, r1
   13a1a:	09 f5       	brne	.+66     	; 0x13a5e <Read_Config+0x77e>
   13a1c:	96 2f       	mov	r25, r22
   13a1e:	87 2f       	mov	r24, r23
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
                        break;
                    case TOK_SECTORS_PER_TRACK:
                        AMIGOp->GEOMETRY.SECTORS_PER_TRACK = val.w;
   13a20:	c8 5f       	subi	r28, 0xF8	; 248
   13a22:	de 4f       	sbci	r29, 0xFE	; 254
   13a24:	e8 81       	ld	r30, Y
   13a26:	f9 81       	ldd	r31, Y+1	; 0x01
   13a28:	c8 50       	subi	r28, 0x08	; 8
   13a2a:	d1 40       	sbci	r29, 0x01	; 1
   13a2c:	03 c0       	rjmp	.+6      	; 0x13a34 <Read_Config+0x754>
   13a2e:	96 83       	std	Z+6, r25	; 0x06
   13a30:	87 83       	std	Z+7, r24	; 0x07

            case AMIGO_GEOMETRY:
                switch(tok)
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
   13a32:	f7 cc       	rjmp	.-1554   	; 0x13422 <Read_Config+0x142>
   13a34:	90 87       	std	Z+8, r25	; 0x08
                        break;
   13a36:	81 87       	std	Z+9, r24	; 0x09
                    case TOK_SECTORS_PER_TRACK:
                        AMIGOp->GEOMETRY.SECTORS_PER_TRACK = val.w;
   13a38:	f4 cc       	rjmp	.-1560   	; 0x13422 <Read_Config+0x142>
   13a3a:	c8 5f       	subi	r28, 0xF8	; 248
                        break;
   13a3c:	de 4f       	sbci	r29, 0xFE	; 254
                    case TOK_HEADS:
                        AMIGOp->GEOMETRY.HEADS = val.w;
   13a3e:	e8 81       	ld	r30, Y
   13a40:	f9 81       	ldd	r31, Y+1	; 0x01
   13a42:	c8 50       	subi	r28, 0x08	; 8
   13a44:	d1 40       	sbci	r29, 0x01	; 1
   13a46:	62 87       	std	Z+10, r22	; 0x0a
   13a48:	73 87       	std	Z+11, r23	; 0x0b
   13a4a:	eb cc       	rjmp	.-1578   	; 0x13422 <Read_Config+0x142>
   13a4c:	c8 5f       	subi	r28, 0xF8	; 248
                        break;
   13a4e:	de 4f       	sbci	r29, 0xFE	; 254
                    case TOK_CYLINDERS:
                        AMIGOp->GEOMETRY.CYLINDERS = val.w;
   13a50:	e8 81       	ld	r30, Y
   13a52:	f9 81       	ldd	r31, Y+1	; 0x01
   13a54:	c8 50       	subi	r28, 0x08	; 8
   13a56:	d1 40       	sbci	r29, 0x01	; 1
   13a58:	64 87       	std	Z+12, r22	; 0x0c
   13a5a:	75 87       	std	Z+13, r23	; 0x0d
   13a5c:	e2 cc       	rjmp	.-1596   	; 0x13422 <Read_Config+0x142>
   13a5e:	ed b7       	in	r30, 0x3d	; 61
                        break;
   13a60:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   13a62:	57 82       	std	Z+7, r5	; 0x07
   13a64:	46 82       	std	Z+6, r4	; 0x06
   13a66:	b5 82       	std	Z+5, r11	; 0x05
   13a68:	a4 82       	std	Z+4, r10	; 0x04
   13a6a:	cf 5e       	subi	r28, 0xEF	; 239
   13a6c:	de 4f       	sbci	r29, 0xFE	; 254
   13a6e:	28 81       	ld	r18, Y
   13a70:	39 81       	ldd	r19, Y+1	; 0x01
   13a72:	4a 81       	ldd	r20, Y+2	; 0x02
   13a74:	c1 51       	subi	r28, 0x11	; 17
   13a76:	d1 40       	sbci	r29, 0x01	; 1
   13a78:	0d c0       	rjmp	.+26     	; 0x13a94 <Read_Config+0x7b4>
   13a7a:	ed b7       	in	r30, 0x3d	; 61
   13a7c:	fe b7       	in	r31, 0x3e	; 62
                        break;
                }
                break;
#endif                                // #ifdef AMIGO
            default:
                printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   13a7e:	57 82       	std	Z+7, r5	; 0x07
   13a80:	46 82       	std	Z+6, r4	; 0x06
   13a82:	b5 82       	std	Z+5, r11	; 0x05
   13a84:	a4 82       	std	Z+4, r10	; 0x04
   13a86:	c2 5f       	subi	r28, 0xF2	; 242
   13a88:	de 4f       	sbci	r29, 0xFE	; 254
   13a8a:	28 81       	ld	r18, Y
   13a8c:	39 81       	ldd	r19, Y+1	; 0x01
   13a8e:	4a 81       	ldd	r20, Y+2	; 0x02
   13a90:	ce 50       	subi	r28, 0x0E	; 14
   13a92:	d1 40       	sbci	r29, 0x01	; 1
   13a94:	21 83       	std	Z+1, r18	; 0x01
   13a96:	32 83       	std	Z+2, r19	; 0x02
   13a98:	43 83       	std	Z+3, r20	; 0x03
   13a9a:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   13a9e:	ff ef       	ldi	r31, 0xFF	; 255
   13aa0:	ef 1a       	sub	r14, r31
                ++errors;
   13aa2:	ff 0a       	sbc	r15, r31
   13aa4:	be cc       	rjmp	.-1668   	; 0x13422 <Read_Config+0x142>
   13aa6:	21 14       	cp	r2, r1
                break;
   13aa8:	31 04       	cpc	r3, r1

        }                                         // switch
    }                                             //while
    if(state != START_STATE)
   13aaa:	79 f0       	breq	.+30     	; 0x13aca <Read_Config+0x7ea>
   13aac:	ed b7       	in	r30, 0x3d	; 61
   13aae:	fe b7       	in	r31, 0x3e	; 62
    {
        printf("Missing END statement at line:%d\n", lines);
   13ab0:	55 82       	std	Z+5, r5	; 0x05
   13ab2:	44 82       	std	Z+4, r4	; 0x04
   13ab4:	8d ee       	ldi	r24, 0xED	; 237
   13ab6:	9a e1       	ldi	r25, 0x1A	; 26
   13ab8:	a0 e0       	ldi	r26, 0x00	; 0
   13aba:	81 83       	std	Z+1, r24	; 0x01
   13abc:	92 83       	std	Z+2, r25	; 0x02
   13abe:	a3 83       	std	Z+3, r26	; 0x03
   13ac0:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   13ac4:	ff ef       	ldi	r31, 0xFF	; 255
   13ac6:	ef 1a       	sub	r14, r31
        ++errors;
   13ac8:	ff 0a       	sbc	r15, r31
   13aca:	ed b7       	in	r30, 0x3d	; 61
   13acc:	fe b7       	in	r31, 0x3e	; 62
    }
    printf("Read_Config: read(%d) lines\n", lines);
   13ace:	55 82       	std	Z+5, r5	; 0x05
   13ad0:	44 82       	std	Z+4, r4	; 0x04
   13ad2:	80 ed       	ldi	r24, 0xD0	; 208
   13ad4:	9a e1       	ldi	r25, 0x1A	; 26
   13ad6:	a0 e0       	ldi	r26, 0x00	; 0
   13ad8:	81 83       	std	Z+1, r24	; 0x01
   13ada:	92 83       	std	Z+2, r25	; 0x02
   13adc:	a3 83       	std	Z+3, r26	; 0x03
   13ade:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   13ae2:	e1 14       	cp	r14, r1
   13ae4:	f1 04       	cpc	r15, r1
    if(errors)
   13ae6:	61 f0       	breq	.+24     	; 0x13b00 <Read_Config+0x820>
   13ae8:	ed b7       	in	r30, 0x3d	; 61
   13aea:	fe b7       	in	r31, 0x3e	; 62
        printf("Read_Config: ****** errors(%d) ******\n", errors);
   13aec:	f5 82       	std	Z+5, r15	; 0x05
   13aee:	e4 82       	std	Z+4, r14	; 0x04
   13af0:	89 ea       	ldi	r24, 0xA9	; 169
   13af2:	9a e1       	ldi	r25, 0x1A	; 26
   13af4:	a0 e0       	ldi	r26, 0x00	; 0
   13af6:	81 83       	std	Z+1, r24	; 0x01
   13af8:	92 83       	std	Z+2, r25	; 0x02
   13afa:	a3 83       	std	Z+3, r26	; 0x03
   13afc:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   13b00:	c4 5f       	subi	r28, 0xF4	; 244

    if(fclose(cfg) == EOF)
   13b02:	de 4f       	sbci	r29, 0xFE	; 254
   13b04:	88 81       	ld	r24, Y
   13b06:	99 81       	ldd	r25, Y+1	; 0x01
   13b08:	cc 50       	subi	r28, 0x0C	; 12
   13b0a:	d1 40       	sbci	r29, 0x01	; 1
   13b0c:	0e 94 35 7b 	call	0xf66a	; 0xf66a <fclose>
   13b10:	01 96       	adiw	r24, 0x01	; 1
   13b12:	39 f4       	brne	.+14     	; 0x13b22 <Read_Config+0x842>
   13b14:	82 e7       	ldi	r24, 0x72	; 114
    {
        perror("Read_Config - close error");
   13b16:	9e e0       	ldi	r25, 0x0E	; 14
   13b18:	0e 94 bc 76 	call	0xed78	; 0xed78 <perror>
   13b1c:	2f ef       	ldi	r18, 0xFF	; 255
        ++errors;
   13b1e:	e2 1a       	sub	r14, r18
   13b20:	f2 0a       	sbc	r15, r18
   13b22:	48 db       	rcall	.-2416   	; 0x131b4 <Post_Config>
    }

// Post process device values
    Post_Config();
   13b24:	c7 01       	movw	r24, r14
   13b26:	c1 5e       	subi	r28, 0xE1	; 225

    return(errors);
   13b28:	de 4f       	sbci	r29, 0xFE	; 254
}
   13b2a:	e2 e1       	ldi	r30, 0x12	; 18
   13b2c:	0c 94 25 e3 	jmp	0x1c64a	; 0x1c64a <__epilogue_restores__>

00013b30 <format_drives>:
   13b30:	2f 92       	push	r2
   13b32:	3f 92       	push	r3

/// ===============================================
/// @brief Format devices that have no image file
/// @return  void
void format_drives()
{
   13b34:	4f 92       	push	r4
   13b36:	5f 92       	push	r5
   13b38:	6f 92       	push	r6
   13b3a:	7f 92       	push	r7
   13b3c:	8f 92       	push	r8
   13b3e:	af 92       	push	r10
   13b40:	bf 92       	push	r11
   13b42:	cf 92       	push	r12
   13b44:	df 92       	push	r13
   13b46:	ef 92       	push	r14
   13b48:	ff 92       	push	r15
   13b4a:	0f 93       	push	r16
   13b4c:	1f 93       	push	r17
   13b4e:	cf 93       	push	r28
   13b50:	df 93       	push	r29
   13b52:	cd b7       	in	r28, 0x3d	; 61
   13b54:	de b7       	in	r29, 0x3e	; 62
   13b56:	ce 56       	subi	r28, 0x6E	; 110
   13b58:	d1 09       	sbc	r29, r1
   13b5a:	0f b6       	in	r0, 0x3f	; 63
   13b5c:	f8 94       	cli
   13b5e:	de bf       	out	0x3e, r29	; 62
   13b60:	0f be       	out	0x3f, r0	; 63
   13b62:	cd bf       	out	0x3d, r28	; 61
   13b64:	80 e0       	ldi	r24, 0x00	; 0
   13b66:	c8 2e       	mov	r12, r24
   13b68:	8f e1       	ldi	r24, 0x1F	; 31
   13b6a:	d8 2e       	mov	r13, r24
    struct stat st;
    long sectors;
    char label[32];
    int count =0;
    int ss80 = 0;
    int amigo = 0;
   13b6c:	a0 96       	adiw	r28, 0x20	; 32
   13b6e:	1f ae       	std	Y+63, r1	; 0x3f
   13b70:	1e ae       	std	Y+62, r1	; 0x3e
   13b72:	a0 97       	sbiw	r28, 0x20	; 32
    int i;
    struct stat st;
    long sectors;
    char label[32];
    int count =0;
    int ss80 = 0;
   13b74:	6e 96       	adiw	r28, 0x1e	; 30
   13b76:	1f ae       	std	Y+63, r1	; 0x3f
   13b78:	1e ae       	std	Y+62, r1	; 0x3e
   13b7a:	6e 97       	sbiw	r28, 0x1e	; 30
{
    int i;
    struct stat st;
    long sectors;
    char label[32];
    int count =0;
   13b7c:	6c 96       	adiw	r28, 0x1c	; 28
   13b7e:	1f ae       	std	Y+63, r1	; 0x3f
   13b80:	1e ae       	std	Y+62, r1	; 0x3e
   13b82:	6c 97       	sbiw	r28, 0x1c	; 28
                {
                    printf("Can not use non 256 byte sectors\n");
                    continue;
                }
                sectors = Devices[i].BLOCKS;
                printf("formating %s %ld sectors\n", AMIGOp->HEADER.NAME, (long) sectors);
   13b84:	8d e5       	ldi	r24, 0x5D	; 93
   13b86:	97 e1       	ldi	r25, 0x17	; 23
   13b88:	9c 01       	movw	r18, r24
   13b8a:	40 e0       	ldi	r20, 0x00	; 0
   13b8c:	a3 96       	adiw	r28, 0x23	; 35
   13b8e:	2d af       	std	Y+61, r18	; 0x3d
   13b90:	3e af       	std	Y+62, r19	; 0x3e
   13b92:	4f af       	std	Y+63, r20	; 0x3f
   13b94:	a3 97       	sbiw	r28, 0x23	; 35
                sprintf(label,"AMIGO%d", amigo);
   13b96:	85 e5       	ldi	r24, 0x55	; 85
   13b98:	97 e1       	ldi	r25, 0x17	; 23
   13b9a:	9c 01       	movw	r18, r24
   13b9c:	40 e0       	ldi	r20, 0x00	; 0
   13b9e:	a6 96       	adiw	r28, 0x26	; 38
   13ba0:	2d af       	std	Y+61, r18	; 0x3d
   13ba2:	3e af       	std	Y+62, r19	; 0x3e
   13ba4:	4f af       	std	Y+63, r20	; 0x3f
   13ba6:	a6 97       	sbiw	r28, 0x26	; 38
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
            if(stat(AMIGOp->HEADER.NAME, &st) == -1)
            {
                if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
                {
                    printf("Can not use non 256 byte sectors\n");
   13ba8:	87 e7       	ldi	r24, 0x77	; 119
   13baa:	97 e1       	ldi	r25, 0x17	; 23
   13bac:	9c 01       	movw	r18, r24
   13bae:	40 e0       	ldi	r20, 0x00	; 0
   13bb0:	a9 96       	adiw	r28, 0x29	; 41
   13bb2:	2d af       	std	Y+61, r18	; 0x3d
   13bb4:	3e af       	std	Y+62, r19	; 0x3e
   13bb6:	4f af       	std	Y+63, r20	; 0x3f
   13bb8:	a9 97       	sbiw	r28, 0x29	; 41
                }
//SS80p->VOLUME.MAX_CYLINDER;
//SS80p->VOLUME.MAX_HEAD;
//SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
                printf("formating %s %ld sectors\n", SS80p->HEADER.NAME, (long) sectors);
   13bba:	81 ea       	ldi	r24, 0xA1	; 161
   13bbc:	97 e1       	ldi	r25, 0x17	; 23
   13bbe:	9c 01       	movw	r18, r24
   13bc0:	40 e0       	ldi	r20, 0x00	; 0
   13bc2:	ac 96       	adiw	r28, 0x2c	; 44
   13bc4:	2d af       	std	Y+61, r18	; 0x3d
   13bc6:	3e af       	std	Y+62, r19	; 0x3e
   13bc8:	4f af       	std	Y+63, r20	; 0x3f
   13bca:	ac 97       	sbiw	r28, 0x2c	; 44
                sprintf(label,"SS80-%d", ss80);
   13bcc:	89 e9       	ldi	r24, 0x99	; 153
   13bce:	97 e1       	ldi	r25, 0x17	; 23
   13bd0:	9c 01       	movw	r18, r24
   13bd2:	40 e0       	ldi	r20, 0x00	; 0
   13bd4:	af 96       	adiw	r28, 0x2f	; 47
   13bd6:	2d af       	std	Y+61, r18	; 0x3d
   13bd8:	3e af       	std	Y+62, r19	; 0x3e
   13bda:	4f af       	std	Y+63, r20	; 0x3f
   13bdc:	af 97       	sbiw	r28, 0x2f	; 47

            if(stat(SS80p->HEADER.NAME, &st) == -1)
            {
                if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
                {
                    printf("Can not use non 256 byte sectors\n");
   13bde:	8b eb       	ldi	r24, 0xBB	; 187
   13be0:	97 e1       	ldi	r25, 0x17	; 23
   13be2:	3c 01       	movw	r6, r24
   13be4:	81 2c       	mov	r8, r1
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   13be6:	f6 01       	movw	r30, r12
   13be8:	80 81       	ld	r24, Z
   13bea:	88 23       	and	r24, r24
   13bec:	09 f4       	brne	.+2      	; 0x13bf0 <format_drives+0xc0>
   13bee:	ef c0       	rjmp	.+478    	; 0x13dce <format_drives+0x29e>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   13bf0:	83 30       	cpi	r24, 0x03	; 3
   13bf2:	09 f0       	breq	.+2      	; 0x13bf6 <format_drives+0xc6>
   13bf4:	70 c0       	rjmp	.+224    	; 0x13cd6 <format_drives+0x1a6>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   13bf6:	a7 a0       	ldd	r10, Z+39	; 0x27
   13bf8:	b0 a4       	ldd	r11, Z+40	; 0x28

            if(stat(SS80p->HEADER.NAME, &st) == -1)
   13bfa:	be 01       	movw	r22, r28
   13bfc:	66 5f       	subi	r22, 0xF6	; 246
   13bfe:	7f 4f       	sbci	r23, 0xFF	; 255
   13c00:	f5 01       	movw	r30, r10
   13c02:	82 81       	ldd	r24, Z+2	; 0x02
   13c04:	93 81       	ldd	r25, Z+3	; 0x03
   13c06:	0e 94 90 77 	call	0xef20	; 0xef20 <stat>
   13c0a:	01 96       	adiw	r24, 0x01	; 1
   13c0c:	09 f0       	breq	.+2      	; 0x13c10 <format_drives+0xe0>
   13c0e:	63 c0       	rjmp	.+198    	; 0x13cd6 <format_drives+0x1a6>
            {
                if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
   13c10:	f5 01       	movw	r30, r10
   13c12:	80 89       	ldd	r24, Z+16	; 0x10
   13c14:	91 89       	ldd	r25, Z+17	; 0x11
   13c16:	81 15       	cp	r24, r1
   13c18:	91 40       	sbci	r25, 0x01	; 1
   13c1a:	31 f0       	breq	.+12     	; 0x13c28 <format_drives+0xf8>
                {
                    printf("Can not use non 256 byte sectors\n");
   13c1c:	ed b7       	in	r30, 0x3d	; 61
   13c1e:	fe b7       	in	r31, 0x3e	; 62
   13c20:	61 82       	std	Z+1, r6	; 0x01
   13c22:	72 82       	std	Z+2, r7	; 0x02
   13c24:	83 82       	std	Z+3, r8	; 0x03
   13c26:	79 c0       	rjmp	.+242    	; 0x13d1a <format_drives+0x1ea>
                    continue;
                }
//SS80p->VOLUME.MAX_CYLINDER;
//SS80p->VOLUME.MAX_HEAD;
//SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
   13c28:	f6 01       	movw	r30, r12
   13c2a:	23 80       	ldd	r2, Z+3	; 0x03
   13c2c:	34 80       	ldd	r3, Z+4	; 0x04
   13c2e:	45 80       	ldd	r4, Z+5	; 0x05
   13c30:	56 80       	ldd	r5, Z+6	; 0x06
                printf("formating %s %ld sectors\n", SS80p->HEADER.NAME, (long) sectors);
   13c32:	ed b7       	in	r30, 0x3d	; 61
   13c34:	fe b7       	in	r31, 0x3e	; 62
   13c36:	26 82       	std	Z+6, r2	; 0x06
   13c38:	37 82       	std	Z+7, r3	; 0x07
   13c3a:	40 86       	std	Z+8, r4	; 0x08
   13c3c:	51 86       	std	Z+9, r5	; 0x09
   13c3e:	f5 01       	movw	r30, r10
   13c40:	82 81       	ldd	r24, Z+2	; 0x02
   13c42:	93 81       	ldd	r25, Z+3	; 0x03
   13c44:	ed b7       	in	r30, 0x3d	; 61
   13c46:	fe b7       	in	r31, 0x3e	; 62
   13c48:	95 83       	std	Z+5, r25	; 0x05
   13c4a:	84 83       	std	Z+4, r24	; 0x04
   13c4c:	ac 96       	adiw	r28, 0x2c	; 44
   13c4e:	2d ad       	ldd	r18, Y+61	; 0x3d
   13c50:	3e ad       	ldd	r19, Y+62	; 0x3e
   13c52:	4f ad       	ldd	r20, Y+63	; 0x3f
   13c54:	ac 97       	sbiw	r28, 0x2c	; 44
   13c56:	21 83       	std	Z+1, r18	; 0x01
   13c58:	32 83       	std	Z+2, r19	; 0x02
   13c5a:	43 83       	std	Z+3, r20	; 0x03
   13c5c:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
                sprintf(label,"SS80-%d", ss80);
   13c60:	6e 96       	adiw	r28, 0x1e	; 30
   13c62:	2e ad       	ldd	r18, Y+62	; 0x3e
   13c64:	3f ad       	ldd	r19, Y+63	; 0x3f
   13c66:	6e 97       	sbiw	r28, 0x1e	; 30
   13c68:	ed b7       	in	r30, 0x3d	; 61
   13c6a:	fe b7       	in	r31, 0x3e	; 62
   13c6c:	37 83       	std	Z+7, r19	; 0x07
   13c6e:	26 83       	std	Z+6, r18	; 0x06
   13c70:	af 96       	adiw	r28, 0x2f	; 47
   13c72:	8d ad       	ldd	r24, Y+61	; 0x3d
   13c74:	9e ad       	ldd	r25, Y+62	; 0x3e
   13c76:	af ad       	ldd	r26, Y+63	; 0x3f
   13c78:	af 97       	sbiw	r28, 0x2f	; 47
   13c7a:	83 83       	std	Z+3, r24	; 0x03
   13c7c:	94 83       	std	Z+4, r25	; 0x04
   13c7e:	a5 83       	std	Z+5, r26	; 0x05
   13c80:	2a e3       	ldi	r18, 0x3A	; 58
   13c82:	30 e0       	ldi	r19, 0x00	; 0
   13c84:	2c 0f       	add	r18, r28
   13c86:	3d 1f       	adc	r19, r29
   13c88:	32 83       	std	Z+2, r19	; 0x02
   13c8a:	21 83       	std	Z+1, r18	; 0x01
   13c8c:	0e 94 3e 45 	call	0x8a7c	; 0x8a7c <sprintf_P>
#ifdef LIF_SUPPORT
                lif_create_image(SS80p->HEADER.NAME,
   13c90:	f5 01       	movw	r30, r10
   13c92:	a2 80       	ldd	r10, Z+2	; 0x02
   13c94:	b3 80       	ldd	r11, Z+3	; 0x03
                    label,
                    lif_dir_count(sectors),
   13c96:	c2 01       	movw	r24, r4
   13c98:	b1 01       	movw	r22, r2
   13c9a:	15 d2       	rcall	.+1066   	; 0x140c6 <lif_dir_count>
   13c9c:	9b 01       	movw	r18, r22
   13c9e:	ac 01       	movw	r20, r24
//SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
                printf("formating %s %ld sectors\n", SS80p->HEADER.NAME, (long) sectors);
                sprintf(label,"SS80-%d", ss80);
#ifdef LIF_SUPPORT
                lif_create_image(SS80p->HEADER.NAME,
   13ca0:	82 01       	movw	r16, r4
   13ca2:	71 01       	movw	r14, r2
   13ca4:	be 01       	movw	r22, r28
   13ca6:	66 5c       	subi	r22, 0xC6	; 198
   13ca8:	7f 4f       	sbci	r23, 0xFF	; 255
   13caa:	c5 01       	movw	r24, r10
   13cac:	0e 94 d8 da 	call	0x1b5b0	; 0x1b5b0 <lif_create_image>
                    lif_dir_count(sectors),
                    sectors);
#else
                printf("please create a SS80 LIF image with %ld sectors and 128 directory sectors\n", sectors);
#endif
                ++count;
   13cb0:	6c 96       	adiw	r28, 0x1c	; 28
   13cb2:	2e ad       	ldd	r18, Y+62	; 0x3e
   13cb4:	3f ad       	ldd	r19, Y+63	; 0x3f
   13cb6:	6c 97       	sbiw	r28, 0x1c	; 28
   13cb8:	2f 5f       	subi	r18, 0xFF	; 255
   13cba:	3f 4f       	sbci	r19, 0xFF	; 255
   13cbc:	6c 96       	adiw	r28, 0x1c	; 28
   13cbe:	3f af       	std	Y+63, r19	; 0x3f
   13cc0:	2e af       	std	Y+62, r18	; 0x3e
   13cc2:	6c 97       	sbiw	r28, 0x1c	; 28
                ++ss80;
   13cc4:	6e 96       	adiw	r28, 0x1e	; 30
   13cc6:	8e ad       	ldd	r24, Y+62	; 0x3e
   13cc8:	9f ad       	ldd	r25, Y+63	; 0x3f
   13cca:	6e 97       	sbiw	r28, 0x1e	; 30
   13ccc:	01 96       	adiw	r24, 0x01	; 1
   13cce:	6e 96       	adiw	r28, 0x1e	; 30
   13cd0:	9f af       	std	Y+63, r25	; 0x3f
   13cd2:	8e af       	std	Y+62, r24	; 0x3e
   13cd4:	6e 97       	sbiw	r28, 0x1e	; 30

            }
        }                                         // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   13cd6:	f6 01       	movw	r30, r12
   13cd8:	80 81       	ld	r24, Z
   13cda:	81 30       	cpi	r24, 0x01	; 1
   13cdc:	09 f0       	breq	.+2      	; 0x13ce0 <format_drives+0x1b0>
   13cde:	77 c0       	rjmp	.+238    	; 0x13dce <format_drives+0x29e>
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
   13ce0:	a7 a0       	ldd	r10, Z+39	; 0x27
   13ce2:	b0 a4       	ldd	r11, Z+40	; 0x28
            if(stat(AMIGOp->HEADER.NAME, &st) == -1)
   13ce4:	be 01       	movw	r22, r28
   13ce6:	66 5f       	subi	r22, 0xF6	; 246
   13ce8:	7f 4f       	sbci	r23, 0xFF	; 255
   13cea:	f5 01       	movw	r30, r10
   13cec:	82 81       	ldd	r24, Z+2	; 0x02
   13cee:	93 81       	ldd	r25, Z+3	; 0x03
   13cf0:	0e 94 90 77 	call	0xef20	; 0xef20 <stat>
   13cf4:	01 96       	adiw	r24, 0x01	; 1
   13cf6:	09 f0       	breq	.+2      	; 0x13cfa <format_drives+0x1ca>
   13cf8:	6a c0       	rjmp	.+212    	; 0x13dce <format_drives+0x29e>
            {
                if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
   13cfa:	f5 01       	movw	r30, r10
   13cfc:	86 81       	ldd	r24, Z+6	; 0x06
   13cfe:	97 81       	ldd	r25, Z+7	; 0x07
   13d00:	81 15       	cp	r24, r1
   13d02:	91 40       	sbci	r25, 0x01	; 1
   13d04:	69 f0       	breq	.+26     	; 0x13d20 <format_drives+0x1f0>
                {
                    printf("Can not use non 256 byte sectors\n");
   13d06:	a9 96       	adiw	r28, 0x29	; 41
   13d08:	2d ad       	ldd	r18, Y+61	; 0x3d
   13d0a:	3e ad       	ldd	r19, Y+62	; 0x3e
   13d0c:	4f ad       	ldd	r20, Y+63	; 0x3f
   13d0e:	a9 97       	sbiw	r28, 0x29	; 41
   13d10:	ed b7       	in	r30, 0x3d	; 61
   13d12:	fe b7       	in	r31, 0x3e	; 62
   13d14:	21 83       	std	Z+1, r18	; 0x01
   13d16:	32 83       	std	Z+2, r19	; 0x02
   13d18:	43 83       	std	Z+3, r20	; 0x03
   13d1a:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
                    continue;
   13d1e:	57 c0       	rjmp	.+174    	; 0x13dce <format_drives+0x29e>
                }
                sectors = Devices[i].BLOCKS;
   13d20:	f6 01       	movw	r30, r12
   13d22:	23 80       	ldd	r2, Z+3	; 0x03
   13d24:	34 80       	ldd	r3, Z+4	; 0x04
   13d26:	45 80       	ldd	r4, Z+5	; 0x05
   13d28:	56 80       	ldd	r5, Z+6	; 0x06
                printf("formating %s %ld sectors\n", AMIGOp->HEADER.NAME, (long) sectors);
   13d2a:	ed b7       	in	r30, 0x3d	; 61
   13d2c:	fe b7       	in	r31, 0x3e	; 62
   13d2e:	26 82       	std	Z+6, r2	; 0x06
   13d30:	37 82       	std	Z+7, r3	; 0x07
   13d32:	40 86       	std	Z+8, r4	; 0x08
   13d34:	51 86       	std	Z+9, r5	; 0x09
   13d36:	f5 01       	movw	r30, r10
   13d38:	82 81       	ldd	r24, Z+2	; 0x02
   13d3a:	93 81       	ldd	r25, Z+3	; 0x03
   13d3c:	ed b7       	in	r30, 0x3d	; 61
   13d3e:	fe b7       	in	r31, 0x3e	; 62
   13d40:	95 83       	std	Z+5, r25	; 0x05
   13d42:	84 83       	std	Z+4, r24	; 0x04
   13d44:	a3 96       	adiw	r28, 0x23	; 35
   13d46:	2d ad       	ldd	r18, Y+61	; 0x3d
   13d48:	3e ad       	ldd	r19, Y+62	; 0x3e
   13d4a:	4f ad       	ldd	r20, Y+63	; 0x3f
   13d4c:	a3 97       	sbiw	r28, 0x23	; 35
   13d4e:	21 83       	std	Z+1, r18	; 0x01
   13d50:	32 83       	std	Z+2, r19	; 0x02
   13d52:	43 83       	std	Z+3, r20	; 0x03
   13d54:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
                sprintf(label,"AMIGO%d", amigo);
   13d58:	a0 96       	adiw	r28, 0x20	; 32
   13d5a:	2e ad       	ldd	r18, Y+62	; 0x3e
   13d5c:	3f ad       	ldd	r19, Y+63	; 0x3f
   13d5e:	a0 97       	sbiw	r28, 0x20	; 32
   13d60:	ed b7       	in	r30, 0x3d	; 61
   13d62:	fe b7       	in	r31, 0x3e	; 62
   13d64:	37 83       	std	Z+7, r19	; 0x07
   13d66:	26 83       	std	Z+6, r18	; 0x06
   13d68:	a6 96       	adiw	r28, 0x26	; 38
   13d6a:	8d ad       	ldd	r24, Y+61	; 0x3d
   13d6c:	9e ad       	ldd	r25, Y+62	; 0x3e
   13d6e:	af ad       	ldd	r26, Y+63	; 0x3f
   13d70:	a6 97       	sbiw	r28, 0x26	; 38
   13d72:	83 83       	std	Z+3, r24	; 0x03
   13d74:	94 83       	std	Z+4, r25	; 0x04
   13d76:	a5 83       	std	Z+5, r26	; 0x05
   13d78:	2a e3       	ldi	r18, 0x3A	; 58
   13d7a:	30 e0       	ldi	r19, 0x00	; 0
   13d7c:	2c 0f       	add	r18, r28
   13d7e:	3d 1f       	adc	r19, r29
   13d80:	32 83       	std	Z+2, r19	; 0x02
   13d82:	21 83       	std	Z+1, r18	; 0x01
   13d84:	0e 94 3e 45 	call	0x8a7c	; 0x8a7c <sprintf_P>
#ifdef LIF_SUPPORT
                lif_create_image(AMIGOp->HEADER.NAME,
   13d88:	f5 01       	movw	r30, r10
   13d8a:	a2 80       	ldd	r10, Z+2	; 0x02
   13d8c:	b3 80       	ldd	r11, Z+3	; 0x03
                    label,
                    lif_dir_count(sectors),
   13d8e:	c2 01       	movw	r24, r4
   13d90:	b1 01       	movw	r22, r2
   13d92:	99 d1       	rcall	.+818    	; 0x140c6 <lif_dir_count>
   13d94:	9b 01       	movw	r18, r22
   13d96:	ac 01       	movw	r20, r24
                }
                sectors = Devices[i].BLOCKS;
                printf("formating %s %ld sectors\n", AMIGOp->HEADER.NAME, (long) sectors);
                sprintf(label,"AMIGO%d", amigo);
#ifdef LIF_SUPPORT
                lif_create_image(AMIGOp->HEADER.NAME,
   13d98:	82 01       	movw	r16, r4
   13d9a:	71 01       	movw	r14, r2
   13d9c:	be 01       	movw	r22, r28
   13d9e:	66 5c       	subi	r22, 0xC6	; 198
   13da0:	7f 4f       	sbci	r23, 0xFF	; 255
   13da2:	c5 01       	movw	r24, r10
   13da4:	0e 94 d8 da 	call	0x1b5b0	; 0x1b5b0 <lif_create_image>
                    lif_dir_count(sectors),
                    sectors);
#else
                printf("please create a AMIGO LIF image with %ld sectors and 15 directory sectors\n", sectors);
#endif
                ++count;
   13da8:	6c 96       	adiw	r28, 0x1c	; 28
   13daa:	2e ad       	ldd	r18, Y+62	; 0x3e
   13dac:	3f ad       	ldd	r19, Y+63	; 0x3f
   13dae:	6c 97       	sbiw	r28, 0x1c	; 28
   13db0:	2f 5f       	subi	r18, 0xFF	; 255
   13db2:	3f 4f       	sbci	r19, 0xFF	; 255
   13db4:	6c 96       	adiw	r28, 0x1c	; 28
   13db6:	3f af       	std	Y+63, r19	; 0x3f
   13db8:	2e af       	std	Y+62, r18	; 0x3e
   13dba:	6c 97       	sbiw	r28, 0x1c	; 28
                ++amigo;
   13dbc:	a0 96       	adiw	r28, 0x20	; 32
   13dbe:	8e ad       	ldd	r24, Y+62	; 0x3e
   13dc0:	9f ad       	ldd	r25, Y+63	; 0x3f
   13dc2:	a0 97       	sbiw	r28, 0x20	; 32
   13dc4:	01 96       	adiw	r24, 0x01	; 1
   13dc6:	a0 96       	adiw	r28, 0x20	; 32
   13dc8:	9f af       	std	Y+63, r25	; 0x3f
   13dca:	8e af       	std	Y+62, r24	; 0x3e
   13dcc:	a0 97       	sbiw	r28, 0x20	; 32
   13dce:	9b e2       	ldi	r25, 0x2B	; 43
   13dd0:	c9 0e       	add	r12, r25
   13dd2:	d1 1c       	adc	r13, r1
#ifdef AMIGO
///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
   13dd4:	a4 e0       	ldi	r26, 0x04	; 4
   13dd6:	ca 16       	cp	r12, r26
   13dd8:	a1 e2       	ldi	r26, 0x21	; 33
   13dda:	da 06       	cpc	r13, r26
   13ddc:	09 f0       	breq	.+2      	; 0x13de0 <format_drives+0x2b0>
   13dde:	03 cf       	rjmp	.-506    	; 0x13be6 <format_drives+0xb6>
                ++amigo;
            }
        }
#endif                                    // #ifdef AMIGO
    }
    if(count)
   13de0:	6c 96       	adiw	r28, 0x1c	; 28
   13de2:	ee ad       	ldd	r30, Y+62	; 0x3e
   13de4:	ff ad       	ldd	r31, Y+63	; 0x3f
   13de6:	6c 97       	sbiw	r28, 0x1c	; 28
   13de8:	ef 2b       	or	r30, r31
   13dea:	11 f0       	breq	.+4      	; 0x13df0 <format_drives+0x2c0>
        sep();
   13dec:	0e 94 61 30 	call	0x60c2	; 0x60c2 <sep>
}
   13df0:	c2 59       	subi	r28, 0x92	; 146
   13df2:	df 4f       	sbci	r29, 0xFF	; 255
   13df4:	0f b6       	in	r0, 0x3f	; 63
   13df6:	f8 94       	cli
   13df8:	de bf       	out	0x3e, r29	; 62
   13dfa:	0f be       	out	0x3f, r0	; 63
   13dfc:	cd bf       	out	0x3d, r28	; 61
   13dfe:	df 91       	pop	r29
   13e00:	cf 91       	pop	r28
   13e02:	1f 91       	pop	r17
   13e04:	0f 91       	pop	r16
   13e06:	ff 90       	pop	r15
   13e08:	ef 90       	pop	r14
   13e0a:	df 90       	pop	r13
   13e0c:	cf 90       	pop	r12
   13e0e:	bf 90       	pop	r11
   13e10:	af 90       	pop	r10
   13e12:	8f 90       	pop	r8
   13e14:	7f 90       	pop	r7
   13e16:	6f 90       	pop	r6
   13e18:	5f 90       	pop	r5
   13e1a:	4f 90       	pop	r4
   13e1c:	3f 90       	pop	r3
   13e1e:	2f 90       	pop	r2
   13e20:	08 95       	ret

00013e22 <display_mounts>:
	}
	display_mounts();
}

void display_mounts( )
{
   13e22:	2f 92       	push	r2
   13e24:	3f 92       	push	r3
   13e26:	4f 92       	push	r4
   13e28:	6f 92       	push	r6
   13e2a:	7f 92       	push	r7
   13e2c:	8f 92       	push	r8
   13e2e:	cf 92       	push	r12
   13e30:	df 92       	push	r13
   13e32:	ef 92       	push	r14
   13e34:	0f 93       	push	r16
   13e36:	1f 93       	push	r17
   13e38:	cf 93       	push	r28
   13e3a:	df 93       	push	r29
   13e3c:	ad b7       	in	r26, 0x3d	; 61
   13e3e:	be b7       	in	r27, 0x3e	; 62
   13e40:	19 97       	sbiw	r26, 0x09	; 9
   13e42:	0f b6       	in	r0, 0x3f	; 63
   13e44:	f8 94       	cli
   13e46:	be bf       	out	0x3e, r27	; 62
   13e48:	0f be       	out	0x3f, r0	; 63
   13e4a:	ad bf       	out	0x3d, r26	; 61
   13e4c:	c0 e0       	ldi	r28, 0x00	; 0
   13e4e:	df e1       	ldi	r29, 0x1F	; 31
#endif                                    // #ifdef AMIGO

        if(Devices[i].TYPE == PRINTER_TYPE )
        {
            PRINTERp= (PRINTERDeviceType *)Devices[i].dev;
            printf("%-16s       %2d\n", "PRINTER", (int) PRINTERp->HEADER.ADDRESS);
   13e50:	0c e8       	ldi	r16, 0x8C	; 140
   13e52:	1e e0       	ldi	r17, 0x0E	; 14
   13e54:	8d e0       	ldi	r24, 0x0D	; 13
   13e56:	97 e1       	ldi	r25, 0x17	; 23
   13e58:	6c 01       	movw	r12, r24
   13e5a:	e1 2c       	mov	r14, r1

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
            printf("%-16s AMIGO %2d %s\n", Devices[i].model, (int) AMIGOp->HEADER.ADDRESS, AMIGOp->HEADER.NAME);
   13e5c:	8e e1       	ldi	r24, 0x1E	; 30
   13e5e:	97 e1       	ldi	r25, 0x17	; 23
   13e60:	3c 01       	movw	r6, r24
   13e62:	81 2c       	mov	r8, r1

        if(Devices[i].TYPE == SS80_TYPE)
        {
            SS80p= (SS80DiskType *)Devices[i].dev;

            printf("%-16s SS80  %2d %s\n", Devices[i].model, (int) SS80p->HEADER.ADDRESS, SS80p->HEADER.NAME);
   13e64:	82 e3       	ldi	r24, 0x32	; 50
   13e66:	97 e1       	ldi	r25, 0x17	; 23
   13e68:	1c 01       	movw	r2, r24
   13e6a:	41 2c       	mov	r4, r1
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   13e6c:	88 81       	ld	r24, Y
   13e6e:	88 23       	and	r24, r24
   13e70:	09 f4       	brne	.+2      	; 0x13e74 <display_mounts+0x52>
   13e72:	43 c0       	rjmp	.+134    	; 0x13efa <display_mounts+0xd8>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   13e74:	83 30       	cpi	r24, 0x03	; 3
   13e76:	b1 f4       	brne	.+44     	; 0x13ea4 <display_mounts+0x82>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   13e78:	af a1       	ldd	r26, Y+39	; 0x27
   13e7a:	b8 a5       	ldd	r27, Y+40	; 0x28

            printf("%-16s SS80  %2d %s\n", Devices[i].model, (int) SS80p->HEADER.ADDRESS, SS80p->HEADER.NAME);
   13e7c:	fd 01       	movw	r30, r26
   13e7e:	82 81       	ldd	r24, Z+2	; 0x02
   13e80:	93 81       	ldd	r25, Z+3	; 0x03
   13e82:	ed b7       	in	r30, 0x3d	; 61
   13e84:	fe b7       	in	r31, 0x3e	; 62
   13e86:	91 87       	std	Z+9, r25	; 0x09
   13e88:	80 87       	std	Z+8, r24	; 0x08
   13e8a:	8c 91       	ld	r24, X
   13e8c:	90 e0       	ldi	r25, 0x00	; 0
   13e8e:	97 83       	std	Z+7, r25	; 0x07
   13e90:	86 83       	std	Z+6, r24	; 0x06
   13e92:	ce 01       	movw	r24, r28
   13e94:	07 96       	adiw	r24, 0x07	; 7
   13e96:	95 83       	std	Z+5, r25	; 0x05
   13e98:	84 83       	std	Z+4, r24	; 0x04
   13e9a:	21 82       	std	Z+1, r2	; 0x01
   13e9c:	32 82       	std	Z+2, r3	; 0x02
   13e9e:	43 82       	std	Z+3, r4	; 0x03
   13ea0:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
		}

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   13ea4:	88 81       	ld	r24, Y
   13ea6:	81 30       	cpi	r24, 0x01	; 1
   13ea8:	b1 f4       	brne	.+44     	; 0x13ed6 <display_mounts+0xb4>
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
   13eaa:	af a1       	ldd	r26, Y+39	; 0x27
   13eac:	b8 a5       	ldd	r27, Y+40	; 0x28
            printf("%-16s AMIGO %2d %s\n", Devices[i].model, (int) AMIGOp->HEADER.ADDRESS, AMIGOp->HEADER.NAME);
   13eae:	fd 01       	movw	r30, r26
   13eb0:	82 81       	ldd	r24, Z+2	; 0x02
   13eb2:	93 81       	ldd	r25, Z+3	; 0x03
   13eb4:	ed b7       	in	r30, 0x3d	; 61
   13eb6:	fe b7       	in	r31, 0x3e	; 62
   13eb8:	91 87       	std	Z+9, r25	; 0x09
   13eba:	80 87       	std	Z+8, r24	; 0x08
   13ebc:	8c 91       	ld	r24, X
   13ebe:	90 e0       	ldi	r25, 0x00	; 0
   13ec0:	97 83       	std	Z+7, r25	; 0x07
   13ec2:	86 83       	std	Z+6, r24	; 0x06
   13ec4:	ce 01       	movw	r24, r28
   13ec6:	07 96       	adiw	r24, 0x07	; 7
   13ec8:	95 83       	std	Z+5, r25	; 0x05
   13eca:	84 83       	std	Z+4, r24	; 0x04
   13ecc:	61 82       	std	Z+1, r6	; 0x01
   13ece:	72 82       	std	Z+2, r7	; 0x02
   13ed0:	83 82       	std	Z+3, r8	; 0x03
   13ed2:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
        }
#endif                                    // #ifdef AMIGO

        if(Devices[i].TYPE == PRINTER_TYPE )
   13ed6:	88 81       	ld	r24, Y
   13ed8:	84 30       	cpi	r24, 0x04	; 4
   13eda:	79 f4       	brne	.+30     	; 0x13efa <display_mounts+0xd8>
        {
            PRINTERp= (PRINTERDeviceType *)Devices[i].dev;
            printf("%-16s       %2d\n", "PRINTER", (int) PRINTERp->HEADER.ADDRESS);
   13edc:	ef a1       	ldd	r30, Y+39	; 0x27
   13ede:	f8 a5       	ldd	r31, Y+40	; 0x28
   13ee0:	80 81       	ld	r24, Z
   13ee2:	90 e0       	ldi	r25, 0x00	; 0
   13ee4:	ed b7       	in	r30, 0x3d	; 61
   13ee6:	fe b7       	in	r31, 0x3e	; 62
   13ee8:	97 83       	std	Z+7, r25	; 0x07
   13eea:	86 83       	std	Z+6, r24	; 0x06
   13eec:	15 83       	std	Z+5, r17	; 0x05
   13eee:	04 83       	std	Z+4, r16	; 0x04
   13ef0:	c1 82       	std	Z+1, r12	; 0x01
   13ef2:	d2 82       	std	Z+2, r13	; 0x02
   13ef4:	e3 82       	std	Z+3, r14	; 0x03
   13ef6:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   13efa:	ab 96       	adiw	r28, 0x2b	; 43
#ifdef AMIGO
///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
   13efc:	f1 e2       	ldi	r31, 0x21	; 33
   13efe:	c4 30       	cpi	r28, 0x04	; 4
   13f00:	df 07       	cpc	r29, r31
   13f02:	09 f0       	breq	.+2      	; 0x13f06 <display_mounts+0xe4>
   13f04:	b3 cf       	rjmp	.-154    	; 0x13e6c <display_mounts+0x4a>
        {
            PRINTERp= (PRINTERDeviceType *)Devices[i].dev;
            printf("%-16s       %2d\n", "PRINTER", (int) PRINTERp->HEADER.ADDRESS);
		}
    }
    printf("\n");
   13f06:	8b e0       	ldi	r24, 0x0B	; 11
   13f08:	97 e1       	ldi	r25, 0x17	; 23
   13f0a:	a0 e0       	ldi	r26, 0x00	; 0
   13f0c:	ed b7       	in	r30, 0x3d	; 61
   13f0e:	fe b7       	in	r31, 0x3e	; 62
   13f10:	81 83       	std	Z+1, r24	; 0x01
   13f12:	92 83       	std	Z+2, r25	; 0x02
   13f14:	a3 83       	std	Z+3, r26	; 0x03
   13f16:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
}
   13f1a:	ad b7       	in	r26, 0x3d	; 61
   13f1c:	be b7       	in	r27, 0x3e	; 62
   13f1e:	19 96       	adiw	r26, 0x09	; 9
   13f20:	0f b6       	in	r0, 0x3f	; 63
   13f22:	f8 94       	cli
   13f24:	be bf       	out	0x3e, r27	; 62
   13f26:	0f be       	out	0x3f, r0	; 63
   13f28:	ad bf       	out	0x3d, r26	; 61
   13f2a:	df 91       	pop	r29
   13f2c:	cf 91       	pop	r28
   13f2e:	1f 91       	pop	r17
   13f30:	0f 91       	pop	r16
   13f32:	ef 90       	pop	r14
   13f34:	df 90       	pop	r13
   13f36:	cf 90       	pop	r12
   13f38:	8f 90       	pop	r8
   13f3a:	7f 90       	pop	r7
   13f3c:	6f 90       	pop	r6
   13f3e:	4f 90       	pop	r4
   13f40:	3f 90       	pop	r3
   13f42:	2f 90       	pop	r2
   13f44:	08 95       	ret

00013f46 <mount>:

/// ===============================================
/// @brief mount disks - testing
/// @return  void
void mount(int argc, char *argv[])
{
   13f46:	af 92       	push	r10
   13f48:	bf 92       	push	r11
   13f4a:	cf 92       	push	r12
   13f4c:	df 92       	push	r13
   13f4e:	ef 92       	push	r14
   13f50:	0f 93       	push	r16
   13f52:	1f 93       	push	r17
   13f54:	cf 93       	push	r28
   13f56:	df 93       	push	r29
   13f58:	ad b7       	in	r26, 0x3d	; 61
   13f5a:	be b7       	in	r27, 0x3e	; 62
   13f5c:	17 97       	sbiw	r26, 0x07	; 7
   13f5e:	0f b6       	in	r0, 0x3f	; 63
   13f60:	f8 94       	cli
   13f62:	be bf       	out	0x3e, r27	; 62
   13f64:	0f be       	out	0x3f, r0	; 63
   13f66:	ad bf       	out	0x3d, r26	; 61
   13f68:	5c 01       	movw	r10, r24
   13f6a:	8b 01       	movw	r16, r22
   13f6c:	0e 5f       	subi	r16, 0xFE	; 254
   13f6e:	1f 4f       	sbci	r17, 0xFF	; 255
	int i;
	for(i = 1;i< argc;++i)
   13f70:	c1 e0       	ldi	r28, 0x01	; 1
   13f72:	d0 e0       	ldi	r29, 0x00	; 0
	{
		printf("argv[%d] = %s\n", (int) i, argv[i]);
   13f74:	86 e4       	ldi	r24, 0x46	; 70
   13f76:	97 e1       	ldi	r25, 0x17	; 23
   13f78:	6c 01       	movw	r12, r24
   13f7a:	e1 2c       	mov	r14, r1
/// @brief mount disks - testing
/// @return  void
void mount(int argc, char *argv[])
{
	int i;
	for(i = 1;i< argc;++i)
   13f7c:	ca 15       	cp	r28, r10
   13f7e:	db 05       	cpc	r29, r11
   13f80:	8c f4       	brge	.+34     	; 0x13fa4 <mount+0x5e>
	{
		printf("argv[%d] = %s\n", (int) i, argv[i]);
   13f82:	f8 01       	movw	r30, r16
   13f84:	81 91       	ld	r24, Z+
   13f86:	91 91       	ld	r25, Z+
   13f88:	8f 01       	movw	r16, r30
   13f8a:	ed b7       	in	r30, 0x3d	; 61
   13f8c:	fe b7       	in	r31, 0x3e	; 62
   13f8e:	97 83       	std	Z+7, r25	; 0x07
   13f90:	86 83       	std	Z+6, r24	; 0x06
   13f92:	d5 83       	std	Z+5, r29	; 0x05
   13f94:	c4 83       	std	Z+4, r28	; 0x04
   13f96:	c1 82       	std	Z+1, r12	; 0x01
   13f98:	d2 82       	std	Z+2, r13	; 0x02
   13f9a:	e3 82       	std	Z+3, r14	; 0x03
   13f9c:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
/// @brief mount disks - testing
/// @return  void
void mount(int argc, char *argv[])
{
	int i;
	for(i = 1;i< argc;++i)
   13fa0:	21 96       	adiw	r28, 0x01	; 1
   13fa2:	ec cf       	rjmp	.-40     	; 0x13f7c <mount+0x36>
	{
		printf("argv[%d] = %s\n", (int) i, argv[i]);

	}
	display_mounts();
   13fa4:	3e df       	rcall	.-388    	; 0x13e22 <display_mounts>
}
   13fa6:	ad b7       	in	r26, 0x3d	; 61
   13fa8:	be b7       	in	r27, 0x3e	; 62
   13faa:	17 96       	adiw	r26, 0x07	; 7
   13fac:	0f b6       	in	r0, 0x3f	; 63
   13fae:	f8 94       	cli
   13fb0:	be bf       	out	0x3e, r27	; 62
   13fb2:	0f be       	out	0x3f, r0	; 63
   13fb4:	ad bf       	out	0x3d, r26	; 61
   13fb6:	df 91       	pop	r29
   13fb8:	cf 91       	pop	r28
   13fba:	1f 91       	pop	r17
   13fbc:	0f 91       	pop	r16
   13fbe:	ef 90       	pop	r14
   13fc0:	df 90       	pop	r13
   13fc2:	cf 90       	pop	r12
   13fc4:	bf 90       	pop	r11
   13fc6:	af 90       	pop	r10
   13fc8:	08 95       	ret

00013fca <hpdir_init>:
/// disk parameters from a single hpdir disk entry
///
///@return void
void hpdir_init()
{
    memset(hpdir.model,0,sizeof(hpdir.model) -1); // 1
   13fca:	8f e1       	ldi	r24, 0x1F	; 31
   13fcc:	e4 e0       	ldi	r30, 0x04	; 4
   13fce:	f1 e2       	ldi	r31, 0x21	; 33
   13fd0:	df 01       	movw	r26, r30
   13fd2:	98 2f       	mov	r25, r24
   13fd4:	1d 92       	st	X+, r1
   13fd6:	9a 95       	dec	r25
   13fd8:	e9 f7       	brne	.-6      	; 0x13fd4 <hpdir_init+0xa>
// 2
    memset(hpdir.comment,0,sizeof(hpdir.comment) -1);
   13fda:	9f e3       	ldi	r25, 0x3F	; 63
   13fdc:	e4 e2       	ldi	r30, 0x24	; 36
   13fde:	f1 e2       	ldi	r31, 0x21	; 33
   13fe0:	df 01       	movw	r26, r30
   13fe2:	1d 92       	st	X+, r1
   13fe4:	9a 95       	dec	r25
   13fe6:	e9 f7       	brne	.-6      	; 0x13fe2 <hpdir_init+0x18>
    memset(hpdir.TYPE,0,sizeof(hpdir.TYPE) -1);   // 3
   13fe8:	e4 e6       	ldi	r30, 0x64	; 100
   13fea:	f1 e2       	ldi	r31, 0x21	; 33
   13fec:	df 01       	movw	r26, r30
   13fee:	1d 92       	st	X+, r1
   13ff0:	8a 95       	dec	r24
   13ff2:	e9 f7       	brne	.-6      	; 0x13fee <hpdir_init+0x24>
    hpdir.ID = 0;                                 // 4
   13ff4:	10 92 84 21 	sts	0x2184, r1	; 0x802184 <hpdir+0x80>
   13ff8:	10 92 85 21 	sts	0x2185, r1	; 0x802185 <hpdir+0x81>
   13ffc:	10 92 86 21 	sts	0x2186, r1	; 0x802186 <hpdir+0x82>
   14000:	10 92 87 21 	sts	0x2187, r1	; 0x802187 <hpdir+0x83>
    hpdir.mask_stat2 = 0;                         // 5
   14004:	10 92 88 21 	sts	0x2188, r1	; 0x802188 <hpdir+0x84>
   14008:	10 92 89 21 	sts	0x2189, r1	; 0x802189 <hpdir+0x85>
   1400c:	10 92 8a 21 	sts	0x218A, r1	; 0x80218a <hpdir+0x86>
   14010:	10 92 8b 21 	sts	0x218B, r1	; 0x80218b <hpdir+0x87>
    hpdir.id_stat2 = 0;                           // 6
   14014:	10 92 8c 21 	sts	0x218C, r1	; 0x80218c <hpdir+0x88>
   14018:	10 92 8d 21 	sts	0x218D, r1	; 0x80218d <hpdir+0x89>
   1401c:	10 92 8e 21 	sts	0x218E, r1	; 0x80218e <hpdir+0x8a>
   14020:	10 92 8f 21 	sts	0x218F, r1	; 0x80218f <hpdir+0x8b>
    hpdir.DEVICE_NUMBER = 0;                      // 7
   14024:	10 92 90 21 	sts	0x2190, r1	; 0x802190 <hpdir+0x8c>
   14028:	10 92 91 21 	sts	0x2191, r1	; 0x802191 <hpdir+0x8d>
   1402c:	10 92 92 21 	sts	0x2192, r1	; 0x802192 <hpdir+0x8e>
   14030:	10 92 93 21 	sts	0x2193, r1	; 0x802193 <hpdir+0x8f>
    hpdir.UNITS_INSTALLED = 0x8001;               // 8
   14034:	81 e0       	ldi	r24, 0x01	; 1
   14036:	90 e8       	ldi	r25, 0x80	; 128
   14038:	a0 e0       	ldi	r26, 0x00	; 0
   1403a:	b0 e0       	ldi	r27, 0x00	; 0
   1403c:	80 93 94 21 	sts	0x2194, r24	; 0x802194 <hpdir+0x90>
   14040:	90 93 95 21 	sts	0x2195, r25	; 0x802195 <hpdir+0x91>
   14044:	a0 93 96 21 	sts	0x2196, r26	; 0x802196 <hpdir+0x92>
   14048:	b0 93 97 21 	sts	0x2197, r27	; 0x802197 <hpdir+0x93>
    hpdir.CYLINDERS = 0;                          // 9
   1404c:	10 92 98 21 	sts	0x2198, r1	; 0x802198 <hpdir+0x94>
   14050:	10 92 99 21 	sts	0x2199, r1	; 0x802199 <hpdir+0x95>
   14054:	10 92 9a 21 	sts	0x219A, r1	; 0x80219a <hpdir+0x96>
   14058:	10 92 9b 21 	sts	0x219B, r1	; 0x80219b <hpdir+0x97>
    hpdir.HEADS= 0;                               // 10
   1405c:	10 92 9c 21 	sts	0x219C, r1	; 0x80219c <hpdir+0x98>
   14060:	10 92 9d 21 	sts	0x219D, r1	; 0x80219d <hpdir+0x99>
   14064:	10 92 9e 21 	sts	0x219E, r1	; 0x80219e <hpdir+0x9a>
   14068:	10 92 9f 21 	sts	0x219F, r1	; 0x80219f <hpdir+0x9b>
    hpdir.SECTORS= 0;                             // 11
   1406c:	10 92 a0 21 	sts	0x21A0, r1	; 0x8021a0 <hpdir+0x9c>
   14070:	10 92 a1 21 	sts	0x21A1, r1	; 0x8021a1 <hpdir+0x9d>
   14074:	10 92 a2 21 	sts	0x21A2, r1	; 0x8021a2 <hpdir+0x9e>
   14078:	10 92 a3 21 	sts	0x21A3, r1	; 0x8021a3 <hpdir+0x9f>
    hpdir.BYTES_PER_SECTOR = 0;                   // 12
   1407c:	10 92 a4 21 	sts	0x21A4, r1	; 0x8021a4 <hpdir+0xa0>
   14080:	10 92 a5 21 	sts	0x21A5, r1	; 0x8021a5 <hpdir+0xa1>
   14084:	10 92 a6 21 	sts	0x21A6, r1	; 0x8021a6 <hpdir+0xa2>
   14088:	10 92 a7 21 	sts	0x21A7, r1	; 0x8021a7 <hpdir+0xa3>
    hpdir.INTERLEAVE = 0;                         // 13
   1408c:	10 92 a8 21 	sts	0x21A8, r1	; 0x8021a8 <hpdir+0xa4>
   14090:	10 92 a9 21 	sts	0x21A9, r1	; 0x8021a9 <hpdir+0xa5>
   14094:	10 92 aa 21 	sts	0x21AA, r1	; 0x8021aa <hpdir+0xa6>
   14098:	10 92 ab 21 	sts	0x21AB, r1	; 0x8021ab <hpdir+0xa7>
    hpdir.FIXED = 1;                              // 14 ALWAYS 1
   1409c:	81 e0       	ldi	r24, 0x01	; 1
   1409e:	90 e0       	ldi	r25, 0x00	; 0
   140a0:	a0 e0       	ldi	r26, 0x00	; 0
   140a2:	b0 e0       	ldi	r27, 0x00	; 0
   140a4:	80 93 ac 21 	sts	0x21AC, r24	; 0x8021ac <hpdir+0xa8>
   140a8:	90 93 ad 21 	sts	0x21AD, r25	; 0x8021ad <hpdir+0xa9>
   140ac:	a0 93 ae 21 	sts	0x21AE, r26	; 0x8021ae <hpdir+0xaa>
   140b0:	b0 93 af 21 	sts	0x21AF, r27	; 0x8021af <hpdir+0xab>

// Computed values
    hpdir.BLOCKS = 0;
   140b4:	10 92 b0 21 	sts	0x21B0, r1	; 0x8021b0 <hpdir+0xac>
   140b8:	10 92 b1 21 	sts	0x21B1, r1	; 0x8021b1 <hpdir+0xad>
   140bc:	10 92 b2 21 	sts	0x21B2, r1	; 0x8021b2 <hpdir+0xae>
   140c0:	10 92 b3 21 	sts	0x21B3, r1	; 0x8021b3 <hpdir+0xaf>
   140c4:	08 95       	ret

000140c6 <lif_dir_count>:
///@param[in] blocks: size of LIF image in total
///
///@return Size of LIF directory in blocks
long lif_dir_count(long blocks)
{
    int scale = 0;
   140c6:	20 e0       	ldi	r18, 0x00	; 0
   140c8:	30 e0       	ldi	r19, 0x00	; 0
    long num = 1;
    while(blocks)
   140ca:	61 15       	cp	r22, r1
   140cc:	71 05       	cpc	r23, r1
   140ce:	81 05       	cpc	r24, r1
   140d0:	91 05       	cpc	r25, r1
   140d2:	39 f0       	breq	.+14     	; 0x140e2 <lif_dir_count+0x1c>
    {
        scale++;
   140d4:	2f 5f       	subi	r18, 0xFF	; 255
   140d6:	3f 4f       	sbci	r19, 0xFF	; 255
        blocks >>= 1;
   140d8:	95 95       	asr	r25
   140da:	87 95       	ror	r24
   140dc:	77 95       	ror	r23
   140de:	67 95       	ror	r22
   140e0:	f4 cf       	rjmp	.-24     	; 0x140ca <lif_dir_count+0x4>
    }
    scale>>=1;
   140e2:	35 95       	asr	r19
   140e4:	27 95       	ror	r18
///
///@return Size of LIF directory in blocks
long lif_dir_count(long blocks)
{
    int scale = 0;
    long num = 1;
   140e6:	61 e0       	ldi	r22, 0x01	; 1
   140e8:	70 e0       	ldi	r23, 0x00	; 0
   140ea:	80 e0       	ldi	r24, 0x00	; 0
   140ec:	90 e0       	ldi	r25, 0x00	; 0
    {
        scale++;
        blocks >>= 1;
    }
    scale>>=1;
    while(scale--)
   140ee:	21 50       	subi	r18, 0x01	; 1
   140f0:	31 09       	sbc	r19, r1
   140f2:	28 f0       	brcs	.+10     	; 0x140fe <lif_dir_count+0x38>
        num <<=1;
   140f4:	66 0f       	add	r22, r22
   140f6:	77 1f       	adc	r23, r23
   140f8:	88 1f       	adc	r24, r24
   140fa:	99 1f       	adc	r25, r25
   140fc:	f8 cf       	rjmp	.-16     	; 0x140ee <lif_dir_count+0x28>
    return(num);
}
   140fe:	08 95       	ret

00014100 <hpdir_find_drive>:
///
///@param[in] model: model string
///
///@return 1 on sucess or 0 on fail
int hpdir_find_drive(char *model, int list, int verbose)
{
   14100:	2f 92       	push	r2
   14102:	3f 92       	push	r3
   14104:	4f 92       	push	r4
   14106:	5f 92       	push	r5
   14108:	6f 92       	push	r6
   1410a:	8f 92       	push	r8
   1410c:	9f 92       	push	r9
   1410e:	af 92       	push	r10
   14110:	bf 92       	push	r11
   14112:	cf 92       	push	r12
   14114:	df 92       	push	r13
   14116:	ef 92       	push	r14
   14118:	ff 92       	push	r15
   1411a:	0f 93       	push	r16
   1411c:	1f 93       	push	r17
   1411e:	cf 93       	push	r28
   14120:	df 93       	push	r29
   14122:	cd b7       	in	r28, 0x3d	; 61
   14124:	de b7       	in	r29, 0x3e	; 62
   14126:	c9 58       	subi	r28, 0x89	; 137
   14128:	d1 40       	sbci	r29, 0x01	; 1
   1412a:	0f b6       	in	r0, 0x3f	; 63
   1412c:	f8 94       	cli
   1412e:	de bf       	out	0x3e, r29	; 62
   14130:	0f be       	out	0x3f, r0	; 63
   14132:	cd bf       	out	0x3d, r28	; 61
   14134:	6c 01       	movw	r12, r24
   14136:	c8 57       	subi	r28, 0x78	; 120
   14138:	de 4f       	sbci	r29, 0xFE	; 254
   1413a:	79 83       	std	Y+1, r23	; 0x01
   1413c:	68 83       	st	Y, r22
   1413e:	c8 58       	subi	r28, 0x88	; 136
   14140:	d1 40       	sbci	r29, 0x01	; 1
   14142:	5a 01       	movw	r10, r20
    FILE *cfg;
    char *ptr;
    char str[256];
    char token[128];

    hpdir_init();
   14144:	42 df       	rcall	.-380    	; 0x13fca <hpdir_init>

    cfg = fopen("hpdir.ini","rb");
   14146:	6e ef       	ldi	r22, 0xFE	; 254
   14148:	78 e0       	ldi	r23, 0x08	; 8
   1414a:	83 e6       	ldi	r24, 0x63	; 99
   1414c:	90 e1       	ldi	r25, 0x10	; 16
   1414e:	0e 94 8b 7c 	call	0xf916	; 0xf916 <fopen>
   14152:	7c 01       	movw	r14, r24

#ifndef LIF_STAND_ALONE
    if(cfg == NULL)
   14154:	89 2b       	or	r24, r25
   14156:	49 f4       	brne	.+18     	; 0x1416a <hpdir_find_drive+0x6a>
        cfg = fopen("/hpdir.ini","rb");
   14158:	6e ef       	ldi	r22, 0xFE	; 254
   1415a:	78 e0       	ldi	r23, 0x08	; 8
   1415c:	82 e6       	ldi	r24, 0x62	; 98
   1415e:	90 e1       	ldi	r25, 0x10	; 16
   14160:	0e 94 8b 7c 	call	0xf916	; 0xf916 <fopen>
   14164:	7c 01       	movw	r14, r24
        strcat  (name, "/hpdir.ini");
        cfg = fopen(name, "rb");
    }
#endif

    if(cfg == NULL)
   14166:	89 2b       	or	r24, r25
   14168:	51 f0       	breq	.+20     	; 0x1417e <hpdir_find_drive+0x7e>
// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);

        if(MATCHI(token,"[driveinfo]"))
        {
            driveinfo = 1;
   1416a:	21 2c       	mov	r2, r1
   1416c:	31 2c       	mov	r3, r1

        if(*ptr == '[' && driveinfo == 1 )
            break;

// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);
   1416e:	8e 01       	movw	r16, r28
   14170:	08 5f       	subi	r16, 0xF8	; 248
   14172:	1e 4f       	sbci	r17, 0xFE	; 254
        if( driveinfo != 1)
            continue;

        if(list)
        {
            printf("%s %s\n", token, ptr);
   14174:	83 e0       	ldi	r24, 0x03	; 3
   14176:	9e e1       	ldi	r25, 0x1E	; 30
   14178:	2c 01       	movw	r4, r24
   1417a:	61 2c       	mov	r6, r1
   1417c:	1e c0       	rjmp	.+60     	; 0x141ba <hpdir_find_drive+0xba>
    }
#endif

    if(cfg == NULL)
    {
        if(verbose)
   1417e:	ab 28       	or	r10, r11
   14180:	09 f4       	brne	.+2      	; 0x14184 <hpdir_find_drive+0x84>
   14182:	69 c1       	rjmp	.+722    	; 0x14456 <hpdir_find_drive+0x356>
            printf("Error: hpdir.ini not found!\n");
   14184:	8a e0       	ldi	r24, 0x0A	; 10
   14186:	9e e1       	ldi	r25, 0x1E	; 30
   14188:	a0 e0       	ldi	r26, 0x00	; 0
   1418a:	ed b7       	in	r30, 0x3d	; 61
   1418c:	fe b7       	in	r31, 0x3e	; 62
   1418e:	81 83       	std	Z+1, r24	; 0x01
   14190:	92 83       	std	Z+2, r25	; 0x02
   14192:	a3 83       	std	Z+3, r26	; 0x03
   14194:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   14198:	5e c1       	rjmp	.+700    	; 0x14456 <hpdir_find_drive+0x356>
    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
        errors = 0;
        ptr = str;

        trim_tail(ptr);
   1419a:	ce 01       	movw	r24, r28
   1419c:	08 96       	adiw	r24, 0x08	; 8
   1419e:	0e 94 71 30 	call	0x60e2	; 0x60e2 <trim_tail>
        ptr = skipspaces(ptr);
   141a2:	ce 01       	movw	r24, r28
   141a4:	08 96       	adiw	r24, 0x08	; 8
   141a6:	0e 94 81 30 	call	0x6102	; 0x6102 <skipspaces>

        len = strlen(ptr);
   141aa:	fc 01       	movw	r30, r24
   141ac:	01 90       	ld	r0, Z+
   141ae:	00 20       	and	r0, r0
   141b0:	e9 f7       	brne	.-6      	; 0x141ac <hpdir_find_drive+0xac>
   141b2:	31 97       	sbiw	r30, 0x01	; 1
        if(!len)
   141b4:	8e 17       	cp	r24, r30
   141b6:	9f 07       	cpc	r25, r31
   141b8:	51 f4       	brne	.+20     	; 0x141ce <hpdir_find_drive+0xce>
        return(0);
    }

// printf("Searching /hpdir.ini for model:%s\n", model);

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   141ba:	a7 01       	movw	r20, r14
   141bc:	6e ef       	ldi	r22, 0xFE	; 254
   141be:	70 e0       	ldi	r23, 0x00	; 0
   141c0:	ce 01       	movw	r24, r28
   141c2:	08 96       	adiw	r24, 0x08	; 8
   141c4:	0e 94 a3 74 	call	0xe946	; 0xe946 <fgets>
   141c8:	89 2b       	or	r24, r25
   141ca:	39 f7       	brne	.-50     	; 0x1419a <hpdir_find_drive+0x9a>
   141cc:	0c c0       	rjmp	.+24     	; 0x141e6 <hpdir_find_drive+0xe6>
        len = strlen(ptr);
        if(!len)
            continue;

// Skip comments
        if(*ptr == ';' || *ptr == '#' )
   141ce:	fc 01       	movw	r30, r24
   141d0:	20 81       	ld	r18, Z
   141d2:	2b 33       	cpi	r18, 0x3B	; 59
   141d4:	91 f3       	breq	.-28     	; 0x141ba <hpdir_find_drive+0xba>
   141d6:	23 32       	cpi	r18, 0x23	; 35
   141d8:	81 f3       	breq	.-32     	; 0x141ba <hpdir_find_drive+0xba>
            continue;

        if(*ptr == '[' && driveinfo == 1 )
   141da:	2b 35       	cpi	r18, 0x5B	; 91
   141dc:	31 f4       	brne	.+12     	; 0x141ea <hpdir_find_drive+0xea>
   141de:	f1 e0       	ldi	r31, 0x01	; 1
   141e0:	2f 16       	cp	r2, r31
   141e2:	31 04       	cpc	r3, r1
   141e4:	11 f4       	brne	.+4      	; 0x141ea <hpdir_find_drive+0xea>
int hpdir_find_drive(char *model, int list, int verbose)
{
    int len;
    int errors = 0;
    int driveinfo=0;
    int found = 0;
   141e6:	00 e0       	ldi	r16, 0x00	; 0
   141e8:	30 c1       	rjmp	.+608    	; 0x1444a <hpdir_find_drive+0x34a>

        if(*ptr == '[' && driveinfo == 1 )
            break;

// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);
   141ea:	4e e7       	ldi	r20, 0x7E	; 126
   141ec:	50 e0       	ldi	r21, 0x00	; 0
   141ee:	b8 01       	movw	r22, r16
   141f0:	0e 94 53 31 	call	0x62a6	; 0x62a6 <get_token>
   141f4:	4c 01       	movw	r8, r24

        if(MATCHI(token,"[driveinfo]"))
   141f6:	6d e6       	ldi	r22, 0x6D	; 109
   141f8:	70 e1       	ldi	r23, 0x10	; 16
   141fa:	c8 01       	movw	r24, r16
   141fc:	0e 94 9f 30 	call	0x613e	; 0x613e <MATCHI>
   14200:	89 2b       	or	r24, r25
   14202:	21 f0       	breq	.+8      	; 0x1420c <hpdir_find_drive+0x10c>
        {
            driveinfo = 1;
   14204:	22 24       	eor	r2, r2
   14206:	23 94       	inc	r2
   14208:	31 2c       	mov	r3, r1
   1420a:	d7 cf       	rjmp	.-82     	; 0x141ba <hpdir_find_drive+0xba>
            continue;
        }

        if( driveinfo != 1)
   1420c:	21 e0       	ldi	r18, 0x01	; 1
   1420e:	22 16       	cp	r2, r18
   14210:	31 04       	cpc	r3, r1
   14212:	99 f6       	brne	.-90     	; 0x141ba <hpdir_find_drive+0xba>
            continue;

        if(list)
   14214:	c8 57       	subi	r28, 0x78	; 120
   14216:	de 4f       	sbci	r29, 0xFE	; 254
   14218:	88 81       	ld	r24, Y
   1421a:	99 81       	ldd	r25, Y+1	; 0x01
   1421c:	c8 58       	subi	r28, 0x88	; 136
   1421e:	d1 40       	sbci	r29, 0x01	; 1
   14220:	89 2b       	or	r24, r25
   14222:	61 f0       	breq	.+24     	; 0x1423c <hpdir_find_drive+0x13c>
        {
            printf("%s %s\n", token, ptr);
   14224:	ed b7       	in	r30, 0x3d	; 61
   14226:	fe b7       	in	r31, 0x3e	; 62
   14228:	97 82       	std	Z+7, r9	; 0x07
   1422a:	86 82       	std	Z+6, r8	; 0x06
   1422c:	15 83       	std	Z+5, r17	; 0x05
   1422e:	04 83       	std	Z+4, r16	; 0x04
   14230:	41 82       	std	Z+1, r4	; 0x01
   14232:	52 82       	std	Z+2, r5	; 0x02
   14234:	63 82       	std	Z+3, r6	; 0x03
   14236:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
            continue;
   1423a:	bf cf       	rjmp	.-130    	; 0x141ba <hpdir_find_drive+0xba>
        }

        if ( ! MATCHI(model,token) )
   1423c:	b8 01       	movw	r22, r16
   1423e:	c6 01       	movw	r24, r12
   14240:	0e 94 9f 30 	call	0x613e	; 0x613e <MATCHI>
   14244:	89 2b       	or	r24, r25
            continue;

        hpdir_init();
   14246:	f1 f2       	breq	.-68     	; 0x14204 <hpdir_find_drive+0x104>
   14248:	c0 de       	rcall	.-640    	; 0x13fca <hpdir_init>

        if(verbose)
   1424a:	ab 28       	or	r10, r11
   1424c:	61 f0       	breq	.+24     	; 0x14266 <hpdir_find_drive+0x166>
            printf("Found Model: %s\n", model);
   1424e:	ed b7       	in	r30, 0x3d	; 61
   14250:	fe b7       	in	r31, 0x3e	; 62
   14252:	d5 82       	std	Z+5, r13	; 0x05
   14254:	c4 82       	std	Z+4, r12	; 0x04
   14256:	82 ef       	ldi	r24, 0xF2	; 242
   14258:	9d e1       	ldi	r25, 0x1D	; 29
   1425a:	a0 e0       	ldi	r26, 0x00	; 0
   1425c:	81 83       	std	Z+1, r24	; 0x01
   1425e:	92 83       	std	Z+2, r25	; 0x02
   14260:	a3 83       	std	Z+3, r26	; 0x03
   14262:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>

// 1 Model
        strncpy(hpdir.model,token,sizeof(hpdir.model)-2);
   14266:	4e e1       	ldi	r20, 0x1E	; 30
   14268:	50 e0       	ldi	r21, 0x00	; 0
   1426a:	b8 01       	movw	r22, r16
   1426c:	84 e0       	ldi	r24, 0x04	; 4
   1426e:	91 e2       	ldi	r25, 0x21	; 33
   14270:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <strncpy>

// =
        ptr = get_token(ptr, token,     sizeof(token)-2);
   14274:	4e e7       	ldi	r20, 0x7E	; 126
   14276:	50 e0       	ldi	r21, 0x00	; 0
   14278:	b8 01       	movw	r22, r16
   1427a:	c4 01       	movw	r24, r8
   1427c:	0e 94 53 31 	call	0x62a6	; 0x62a6 <get_token>

// 2 Comment
        ptr = get_token(ptr, hpdir.comment, sizeof(hpdir.comment)-2);
   14280:	4e e3       	ldi	r20, 0x3E	; 62
   14282:	50 e0       	ldi	r21, 0x00	; 0
   14284:	64 e2       	ldi	r22, 0x24	; 36
   14286:	71 e2       	ldi	r23, 0x21	; 33
   14288:	0e 94 53 31 	call	0x62a6	; 0x62a6 <get_token>

// 3 AMIGO/SS80/CS80
        ptr = get_token(ptr, hpdir.TYPE,  sizeof(hpdir.TYPE)-2);
   1428c:	4e e1       	ldi	r20, 0x1E	; 30
   1428e:	50 e0       	ldi	r21, 0x00	; 0
   14290:	64 e6       	ldi	r22, 0x64	; 100
   14292:	71 e2       	ldi	r23, 0x21	; 33
   14294:	0e 94 53 31 	call	0x62a6	; 0x62a6 <get_token>

// 4 Identify ID
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14298:	4e e7       	ldi	r20, 0x7E	; 126
   1429a:	50 e0       	ldi	r21, 0x00	; 0
   1429c:	b8 01       	movw	r22, r16
   1429e:	0e 94 53 31 	call	0x62a6	; 0x62a6 <get_token>
   142a2:	6c 01       	movw	r12, r24
        hpdir.ID = get_value(token);
   142a4:	c8 01       	movw	r24, r16
   142a6:	0e 94 96 31 	call	0x632c	; 0x632c <get_value>
   142aa:	60 93 84 21 	sts	0x2184, r22	; 0x802184 <hpdir+0x80>
   142ae:	70 93 85 21 	sts	0x2185, r23	; 0x802185 <hpdir+0x81>
   142b2:	80 93 86 21 	sts	0x2186, r24	; 0x802186 <hpdir+0x82>
   142b6:	90 93 87 21 	sts	0x2187, r25	; 0x802187 <hpdir+0x83>

// 5 MASK STAT 2
        ptr = get_token(ptr, token,         sizeof(token)-2);
   142ba:	4e e7       	ldi	r20, 0x7E	; 126
   142bc:	50 e0       	ldi	r21, 0x00	; 0
   142be:	b8 01       	movw	r22, r16
   142c0:	c6 01       	movw	r24, r12
   142c2:	0e 94 53 31 	call	0x62a6	; 0x62a6 <get_token>
   142c6:	6c 01       	movw	r12, r24
        hpdir.mask_stat2 = get_value(token);
   142c8:	c8 01       	movw	r24, r16
   142ca:	0e 94 96 31 	call	0x632c	; 0x632c <get_value>
   142ce:	60 93 88 21 	sts	0x2188, r22	; 0x802188 <hpdir+0x84>
   142d2:	70 93 89 21 	sts	0x2189, r23	; 0x802189 <hpdir+0x85>
   142d6:	80 93 8a 21 	sts	0x218A, r24	; 0x80218a <hpdir+0x86>
   142da:	90 93 8b 21 	sts	0x218B, r25	; 0x80218b <hpdir+0x87>

// 6 STAT2
        ptr = get_token(ptr, token,         sizeof(token)-2);
   142de:	4e e7       	ldi	r20, 0x7E	; 126
   142e0:	50 e0       	ldi	r21, 0x00	; 0
   142e2:	b8 01       	movw	r22, r16
   142e4:	c6 01       	movw	r24, r12
   142e6:	0e 94 53 31 	call	0x62a6	; 0x62a6 <get_token>
   142ea:	6c 01       	movw	r12, r24
        hpdir.id_stat2 = get_value(token);
   142ec:	c8 01       	movw	r24, r16
   142ee:	0e 94 96 31 	call	0x632c	; 0x632c <get_value>
   142f2:	60 93 8c 21 	sts	0x218C, r22	; 0x80218c <hpdir+0x88>
   142f6:	70 93 8d 21 	sts	0x218D, r23	; 0x80218d <hpdir+0x89>
   142fa:	80 93 8e 21 	sts	0x218E, r24	; 0x80218e <hpdir+0x8a>
   142fe:	90 93 8f 21 	sts	0x218F, r25	; 0x80218f <hpdir+0x8b>

// 7 BCD include model number
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14302:	4e e7       	ldi	r20, 0x7E	; 126
   14304:	50 e0       	ldi	r21, 0x00	; 0
   14306:	b8 01       	movw	r22, r16
   14308:	c6 01       	movw	r24, r12
   1430a:	0e 94 53 31 	call	0x62a6	; 0x62a6 <get_token>
   1430e:	6c 01       	movw	r12, r24
        hpdir.DEVICE_NUMBER = get_value(token);
   14310:	c8 01       	movw	r24, r16
   14312:	0e 94 96 31 	call	0x632c	; 0x632c <get_value>
   14316:	60 93 90 21 	sts	0x2190, r22	; 0x802190 <hpdir+0x8c>
   1431a:	70 93 91 21 	sts	0x2191, r23	; 0x802191 <hpdir+0x8d>
   1431e:	80 93 92 21 	sts	0x2192, r24	; 0x802192 <hpdir+0x8e>
   14322:	90 93 93 21 	sts	0x2193, r25	; 0x802193 <hpdir+0x8f>

// 8 Units installed
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14326:	4e e7       	ldi	r20, 0x7E	; 126
   14328:	50 e0       	ldi	r21, 0x00	; 0
   1432a:	b8 01       	movw	r22, r16
   1432c:	c6 01       	movw	r24, r12
   1432e:	0e 94 53 31 	call	0x62a6	; 0x62a6 <get_token>
   14332:	6c 01       	movw	r12, r24
        hpdir.UNITS_INSTALLED = get_value(token);
   14334:	c8 01       	movw	r24, r16
   14336:	0e 94 96 31 	call	0x632c	; 0x632c <get_value>
   1433a:	60 93 94 21 	sts	0x2194, r22	; 0x802194 <hpdir+0x90>
   1433e:	70 93 95 21 	sts	0x2195, r23	; 0x802195 <hpdir+0x91>
   14342:	80 93 96 21 	sts	0x2196, r24	; 0x802196 <hpdir+0x92>
   14346:	90 93 97 21 	sts	0x2197, r25	; 0x802197 <hpdir+0x93>

// 9 Cylinders
        ptr = get_token(ptr, token,         sizeof(token)-2);
   1434a:	4e e7       	ldi	r20, 0x7E	; 126
   1434c:	50 e0       	ldi	r21, 0x00	; 0
   1434e:	b8 01       	movw	r22, r16
   14350:	c6 01       	movw	r24, r12
   14352:	0e 94 53 31 	call	0x62a6	; 0x62a6 <get_token>
   14356:	6c 01       	movw	r12, r24
        hpdir.CYLINDERS = get_value(token);
   14358:	c8 01       	movw	r24, r16
   1435a:	0e 94 96 31 	call	0x632c	; 0x632c <get_value>
   1435e:	60 93 98 21 	sts	0x2198, r22	; 0x802198 <hpdir+0x94>
   14362:	70 93 99 21 	sts	0x2199, r23	; 0x802199 <hpdir+0x95>
   14366:	80 93 9a 21 	sts	0x219A, r24	; 0x80219a <hpdir+0x96>
   1436a:	90 93 9b 21 	sts	0x219B, r25	; 0x80219b <hpdir+0x97>

// 10 Heads
        ptr = get_token(ptr, token,         sizeof(token)-2);
   1436e:	4e e7       	ldi	r20, 0x7E	; 126
   14370:	50 e0       	ldi	r21, 0x00	; 0
   14372:	b8 01       	movw	r22, r16
   14374:	c6 01       	movw	r24, r12
   14376:	0e 94 53 31 	call	0x62a6	; 0x62a6 <get_token>
   1437a:	6c 01       	movw	r12, r24
        hpdir.HEADS = get_value(token);
   1437c:	c8 01       	movw	r24, r16
   1437e:	0e 94 96 31 	call	0x632c	; 0x632c <get_value>
   14382:	60 93 9c 21 	sts	0x219C, r22	; 0x80219c <hpdir+0x98>
   14386:	70 93 9d 21 	sts	0x219D, r23	; 0x80219d <hpdir+0x99>
   1438a:	80 93 9e 21 	sts	0x219E, r24	; 0x80219e <hpdir+0x9a>
   1438e:	90 93 9f 21 	sts	0x219F, r25	; 0x80219f <hpdir+0x9b>

// 11 Sectors
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14392:	4e e7       	ldi	r20, 0x7E	; 126
   14394:	50 e0       	ldi	r21, 0x00	; 0
   14396:	b8 01       	movw	r22, r16
   14398:	c6 01       	movw	r24, r12
   1439a:	0e 94 53 31 	call	0x62a6	; 0x62a6 <get_token>
   1439e:	6c 01       	movw	r12, r24
        hpdir.SECTORS = get_value(token);
   143a0:	c8 01       	movw	r24, r16
   143a2:	0e 94 96 31 	call	0x632c	; 0x632c <get_value>
   143a6:	60 93 a0 21 	sts	0x21A0, r22	; 0x8021a0 <hpdir+0x9c>
   143aa:	70 93 a1 21 	sts	0x21A1, r23	; 0x8021a1 <hpdir+0x9d>
   143ae:	80 93 a2 21 	sts	0x21A2, r24	; 0x8021a2 <hpdir+0x9e>
   143b2:	90 93 a3 21 	sts	0x21A3, r25	; 0x8021a3 <hpdir+0x9f>

// 12 Bytes Per Block/Sector
        ptr = get_token(ptr, token,         sizeof(token)-2);
   143b6:	4e e7       	ldi	r20, 0x7E	; 126
   143b8:	50 e0       	ldi	r21, 0x00	; 0
   143ba:	b8 01       	movw	r22, r16
   143bc:	c6 01       	movw	r24, r12
   143be:	0e 94 53 31 	call	0x62a6	; 0x62a6 <get_token>
   143c2:	6c 01       	movw	r12, r24
        hpdir.BYTES_PER_SECTOR = get_value(token);
   143c4:	c8 01       	movw	r24, r16
   143c6:	0e 94 96 31 	call	0x632c	; 0x632c <get_value>
   143ca:	60 93 a4 21 	sts	0x21A4, r22	; 0x8021a4 <hpdir+0xa0>
   143ce:	70 93 a5 21 	sts	0x21A5, r23	; 0x8021a5 <hpdir+0xa1>
   143d2:	80 93 a6 21 	sts	0x21A6, r24	; 0x8021a6 <hpdir+0xa2>
   143d6:	90 93 a7 21 	sts	0x21A7, r25	; 0x8021a7 <hpdir+0xa3>

// 13 Interleave
        ptr = get_token(ptr, token,         sizeof(token)-2);
   143da:	4e e7       	ldi	r20, 0x7E	; 126
   143dc:	50 e0       	ldi	r21, 0x00	; 0
   143de:	b8 01       	movw	r22, r16
   143e0:	c6 01       	movw	r24, r12
   143e2:	0e 94 53 31 	call	0x62a6	; 0x62a6 <get_token>
        hpdir.INTERLEAVE = get_value(token);
   143e6:	c8 01       	movw	r24, r16
   143e8:	0e 94 96 31 	call	0x632c	; 0x632c <get_value>
   143ec:	60 93 a8 21 	sts	0x21A8, r22	; 0x8021a8 <hpdir+0xa4>
   143f0:	70 93 a9 21 	sts	0x21A9, r23	; 0x8021a9 <hpdir+0xa5>
   143f4:	80 93 aa 21 	sts	0x21AA, r24	; 0x8021aa <hpdir+0xa6>
   143f8:	90 93 ab 21 	sts	0x21AB, r25	; 0x8021ab <hpdir+0xa7>

// Computed values
        hpdir.BLOCKS = ( hpdir.CYLINDERS * hpdir.HEADS * hpdir.SECTORS );
   143fc:	20 91 98 21 	lds	r18, 0x2198	; 0x802198 <hpdir+0x94>
   14400:	30 91 99 21 	lds	r19, 0x2199	; 0x802199 <hpdir+0x95>
   14404:	40 91 9a 21 	lds	r20, 0x219A	; 0x80219a <hpdir+0x96>
   14408:	50 91 9b 21 	lds	r21, 0x219B	; 0x80219b <hpdir+0x97>
   1440c:	60 91 9c 21 	lds	r22, 0x219C	; 0x80219c <hpdir+0x98>
   14410:	70 91 9d 21 	lds	r23, 0x219D	; 0x80219d <hpdir+0x99>
   14414:	80 91 9e 21 	lds	r24, 0x219E	; 0x80219e <hpdir+0x9a>
   14418:	90 91 9f 21 	lds	r25, 0x219F	; 0x80219f <hpdir+0x9b>
   1441c:	0e 94 5a e2 	call	0x1c4b4	; 0x1c4b4 <__mulsi3>
   14420:	9b 01       	movw	r18, r22
   14422:	ac 01       	movw	r20, r24
   14424:	60 91 a0 21 	lds	r22, 0x21A0	; 0x8021a0 <hpdir+0x9c>
   14428:	70 91 a1 21 	lds	r23, 0x21A1	; 0x8021a1 <hpdir+0x9d>
   1442c:	80 91 a2 21 	lds	r24, 0x21A2	; 0x8021a2 <hpdir+0x9e>
   14430:	90 91 a3 21 	lds	r25, 0x21A3	; 0x8021a3 <hpdir+0x9f>
   14434:	0e 94 5a e2 	call	0x1c4b4	; 0x1c4b4 <__mulsi3>
   14438:	60 93 b0 21 	sts	0x21B0, r22	; 0x8021b0 <hpdir+0xac>
   1443c:	70 93 b1 21 	sts	0x21B1, r23	; 0x8021b1 <hpdir+0xad>
   14440:	80 93 b2 21 	sts	0x21B2, r24	; 0x8021b2 <hpdir+0xae>
   14444:	90 93 b3 21 	sts	0x21B3, r25	; 0x8021b3 <hpdir+0xaf>
        {
            if(verbose)
                printf("Error /hpdir.ini parsing\n");
            break;
        }
        found = 1;
   14448:	01 e0       	ldi	r16, 0x01	; 1
   1444a:	10 e0       	ldi	r17, 0x00	; 0
        break;

    }                                             // while
    fclose(cfg);
   1444c:	c7 01       	movw	r24, r14
   1444e:	0e 94 35 7b 	call	0xf66a	; 0xf66a <fclose>
    return(found);
   14452:	c8 01       	movw	r24, r16
   14454:	02 c0       	rjmp	.+4      	; 0x1445a <hpdir_find_drive+0x35a>

    if(cfg == NULL)
    {
        if(verbose)
            printf("Error: hpdir.ini not found!\n");
        return(0);
   14456:	80 e0       	ldi	r24, 0x00	; 0
   14458:	90 e0       	ldi	r25, 0x00	; 0
        break;

    }                                             // while
    fclose(cfg);
    return(found);
}
   1445a:	c7 57       	subi	r28, 0x77	; 119
   1445c:	de 4f       	sbci	r29, 0xFE	; 254
   1445e:	0f b6       	in	r0, 0x3f	; 63
   14460:	f8 94       	cli
   14462:	de bf       	out	0x3e, r29	; 62
   14464:	0f be       	out	0x3f, r0	; 63
   14466:	cd bf       	out	0x3d, r28	; 61
   14468:	df 91       	pop	r29
   1446a:	cf 91       	pop	r28
   1446c:	1f 91       	pop	r17
   1446e:	0f 91       	pop	r16
   14470:	ff 90       	pop	r15
   14472:	ef 90       	pop	r14
   14474:	df 90       	pop	r13
   14476:	cf 90       	pop	r12
   14478:	bf 90       	pop	r11
   1447a:	af 90       	pop	r10
   1447c:	9f 90       	pop	r9
   1447e:	8f 90       	pop	r8
   14480:	6f 90       	pop	r6
   14482:	5f 90       	pop	r5
   14484:	4f 90       	pop	r4
   14486:	3f 90       	pop	r3
   14488:	2f 90       	pop	r2
   1448a:	08 95       	ret

0001448c <SS80ControllerPack>:
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
        printf("[SS80 Increment to (%lXH)]\n",
            (long) SS80_Blocks_to_Bytes(SS80s->AddressBlocks));
#endif
    return(0);
}
   1448c:	0f 93       	push	r16
   1448e:	1f 93       	push	r17
   14490:	25 e0       	ldi	r18, 0x05	; 5
   14492:	30 e0       	ldi	r19, 0x00	; 0
   14494:	fc 01       	movw	r30, r24
   14496:	31 83       	std	Z+1, r19	; 0x01
   14498:	20 83       	st	Z, r18
   1449a:	e0 91 74 19 	lds	r30, 0x1974	; 0x801974 <SS80p>
   1449e:	f0 91 75 19 	lds	r31, 0x1975	; 0x801975 <SS80p+0x1>
   144a2:	06 81       	ldd	r16, Z+6	; 0x06
   144a4:	17 81       	ldd	r17, Z+7	; 0x07
   144a6:	20 e0       	ldi	r18, 0x00	; 0
   144a8:	30 e0       	ldi	r19, 0x00	; 0
   144aa:	42 e0       	ldi	r20, 0x02	; 2
   144ac:	50 e0       	ldi	r21, 0x00	; 0
   144ae:	60 e0       	ldi	r22, 0x00	; 0
   144b0:	70 e0       	ldi	r23, 0x00	; 0
   144b2:	84 ea       	ldi	r24, 0xA4	; 164
   144b4:	99 e1       	ldi	r25, 0x19	; 25
   144b6:	0e 94 c1 bc 	call	0x17982	; 0x17982 <V2B_MSB>
   144ba:	e0 91 74 19 	lds	r30, 0x1974	; 0x801974 <SS80p>
   144be:	f0 91 75 19 	lds	r31, 0x1975	; 0x801975 <SS80p+0x1>
   144c2:	00 85       	ldd	r16, Z+8	; 0x08
   144c4:	11 85       	ldd	r17, Z+9	; 0x09
   144c6:	20 e0       	ldi	r18, 0x00	; 0
   144c8:	30 e0       	ldi	r19, 0x00	; 0
   144ca:	42 e0       	ldi	r20, 0x02	; 2
   144cc:	50 e0       	ldi	r21, 0x00	; 0
   144ce:	61 e0       	ldi	r22, 0x01	; 1
   144d0:	70 e0       	ldi	r23, 0x00	; 0
   144d2:	84 ea       	ldi	r24, 0xA4	; 164
   144d4:	99 e1       	ldi	r25, 0x19	; 25
   144d6:	0e 94 c1 bc 	call	0x17982	; 0x17982 <V2B_MSB>
   144da:	e0 91 74 19 	lds	r30, 0x1974	; 0x801974 <SS80p>
   144de:	f0 91 75 19 	lds	r31, 0x1975	; 0x801975 <SS80p+0x1>
   144e2:	02 85       	ldd	r16, Z+10	; 0x0a
   144e4:	10 e0       	ldi	r17, 0x00	; 0
   144e6:	20 e0       	ldi	r18, 0x00	; 0
   144e8:	30 e0       	ldi	r19, 0x00	; 0
   144ea:	41 e0       	ldi	r20, 0x01	; 1
   144ec:	50 e0       	ldi	r21, 0x00	; 0
   144ee:	64 e0       	ldi	r22, 0x04	; 4
   144f0:	70 e0       	ldi	r23, 0x00	; 0
   144f2:	84 ea       	ldi	r24, 0xA4	; 164
   144f4:	99 e1       	ldi	r25, 0x19	; 25
   144f6:	0e 94 c1 bc 	call	0x17982	; 0x17982 <V2B_MSB>
   144fa:	84 ea       	ldi	r24, 0xA4	; 164
   144fc:	99 e1       	ldi	r25, 0x19	; 25
   144fe:	1f 91       	pop	r17
   14500:	0f 91       	pop	r16
   14502:	08 95       	ret

00014504 <SS80UnitPack>:
   14504:	0f 93       	push	r16
   14506:	1f 93       	push	r17
   14508:	23 e1       	ldi	r18, 0x13	; 19
   1450a:	30 e0       	ldi	r19, 0x00	; 0
   1450c:	fc 01       	movw	r30, r24
   1450e:	31 83       	std	Z+1, r19	; 0x01
   14510:	20 83       	st	Z, r18
   14512:	e0 91 74 19 	lds	r30, 0x1974	; 0x801974 <SS80p>
   14516:	f0 91 75 19 	lds	r31, 0x1975	; 0x801975 <SS80p+0x1>
   1451a:	03 85       	ldd	r16, Z+11	; 0x0b
   1451c:	10 e0       	ldi	r17, 0x00	; 0
   1451e:	20 e0       	ldi	r18, 0x00	; 0
   14520:	30 e0       	ldi	r19, 0x00	; 0
   14522:	41 e0       	ldi	r20, 0x01	; 1
   14524:	50 e0       	ldi	r21, 0x00	; 0
   14526:	60 e0       	ldi	r22, 0x00	; 0
   14528:	70 e0       	ldi	r23, 0x00	; 0
   1452a:	81 e9       	ldi	r24, 0x91	; 145
   1452c:	99 e1       	ldi	r25, 0x19	; 25
   1452e:	0e 94 c1 bc 	call	0x17982	; 0x17982 <V2B_MSB>
   14532:	e0 91 74 19 	lds	r30, 0x1974	; 0x801974 <SS80p>
   14536:	f0 91 75 19 	lds	r31, 0x1975	; 0x801975 <SS80p+0x1>
   1453a:	04 85       	ldd	r16, Z+12	; 0x0c
   1453c:	15 85       	ldd	r17, Z+13	; 0x0d
   1453e:	26 85       	ldd	r18, Z+14	; 0x0e
   14540:	37 85       	ldd	r19, Z+15	; 0x0f
   14542:	43 e0       	ldi	r20, 0x03	; 3
   14544:	50 e0       	ldi	r21, 0x00	; 0
   14546:	61 e0       	ldi	r22, 0x01	; 1
   14548:	70 e0       	ldi	r23, 0x00	; 0
   1454a:	81 e9       	ldi	r24, 0x91	; 145
   1454c:	99 e1       	ldi	r25, 0x19	; 25
   1454e:	0e 94 c1 bc 	call	0x17982	; 0x17982 <V2B_MSB>
   14552:	e0 91 74 19 	lds	r30, 0x1974	; 0x801974 <SS80p>
   14556:	f0 91 75 19 	lds	r31, 0x1975	; 0x801975 <SS80p+0x1>
   1455a:	00 89       	ldd	r16, Z+16	; 0x10
   1455c:	11 89       	ldd	r17, Z+17	; 0x11
   1455e:	20 e0       	ldi	r18, 0x00	; 0
   14560:	30 e0       	ldi	r19, 0x00	; 0
   14562:	42 e0       	ldi	r20, 0x02	; 2
   14564:	50 e0       	ldi	r21, 0x00	; 0
   14566:	64 e0       	ldi	r22, 0x04	; 4
   14568:	70 e0       	ldi	r23, 0x00	; 0
   1456a:	81 e9       	ldi	r24, 0x91	; 145
   1456c:	99 e1       	ldi	r25, 0x19	; 25
   1456e:	0e 94 c1 bc 	call	0x17982	; 0x17982 <V2B_MSB>
   14572:	e0 91 74 19 	lds	r30, 0x1974	; 0x801974 <SS80p>
   14576:	f0 91 75 19 	lds	r31, 0x1975	; 0x801975 <SS80p+0x1>
   1457a:	02 89       	ldd	r16, Z+18	; 0x12
   1457c:	10 e0       	ldi	r17, 0x00	; 0
   1457e:	20 e0       	ldi	r18, 0x00	; 0
   14580:	30 e0       	ldi	r19, 0x00	; 0
   14582:	41 e0       	ldi	r20, 0x01	; 1
   14584:	50 e0       	ldi	r21, 0x00	; 0
   14586:	66 e0       	ldi	r22, 0x06	; 6
   14588:	70 e0       	ldi	r23, 0x00	; 0
   1458a:	81 e9       	ldi	r24, 0x91	; 145
   1458c:	99 e1       	ldi	r25, 0x19	; 25
   1458e:	0e 94 c1 bc 	call	0x17982	; 0x17982 <V2B_MSB>
   14592:	e0 91 74 19 	lds	r30, 0x1974	; 0x801974 <SS80p>
   14596:	f0 91 75 19 	lds	r31, 0x1975	; 0x801975 <SS80p+0x1>
   1459a:	03 89       	ldd	r16, Z+19	; 0x13
   1459c:	10 e0       	ldi	r17, 0x00	; 0
   1459e:	20 e0       	ldi	r18, 0x00	; 0
   145a0:	30 e0       	ldi	r19, 0x00	; 0
   145a2:	41 e0       	ldi	r20, 0x01	; 1
   145a4:	50 e0       	ldi	r21, 0x00	; 0
   145a6:	67 e0       	ldi	r22, 0x07	; 7
   145a8:	70 e0       	ldi	r23, 0x00	; 0
   145aa:	81 e9       	ldi	r24, 0x91	; 145
   145ac:	99 e1       	ldi	r25, 0x19	; 25
   145ae:	0e 94 c1 bc 	call	0x17982	; 0x17982 <V2B_MSB>
   145b2:	e0 91 74 19 	lds	r30, 0x1974	; 0x801974 <SS80p>
   145b6:	f0 91 75 19 	lds	r31, 0x1975	; 0x801975 <SS80p+0x1>
   145ba:	04 89       	ldd	r16, Z+20	; 0x14
   145bc:	15 89       	ldd	r17, Z+21	; 0x15
   145be:	20 e0       	ldi	r18, 0x00	; 0
   145c0:	30 e0       	ldi	r19, 0x00	; 0
   145c2:	42 e0       	ldi	r20, 0x02	; 2
   145c4:	50 e0       	ldi	r21, 0x00	; 0
   145c6:	68 e0       	ldi	r22, 0x08	; 8
   145c8:	70 e0       	ldi	r23, 0x00	; 0
   145ca:	81 e9       	ldi	r24, 0x91	; 145
   145cc:	99 e1       	ldi	r25, 0x19	; 25
   145ce:	0e 94 c1 bc 	call	0x17982	; 0x17982 <V2B_MSB>
   145d2:	e0 91 74 19 	lds	r30, 0x1974	; 0x801974 <SS80p>
   145d6:	f0 91 75 19 	lds	r31, 0x1975	; 0x801975 <SS80p+0x1>
   145da:	06 89       	ldd	r16, Z+22	; 0x16
   145dc:	17 89       	ldd	r17, Z+23	; 0x17
   145de:	20 e0       	ldi	r18, 0x00	; 0
   145e0:	30 e0       	ldi	r19, 0x00	; 0
   145e2:	42 e0       	ldi	r20, 0x02	; 2
   145e4:	50 e0       	ldi	r21, 0x00	; 0
   145e6:	6a e0       	ldi	r22, 0x0A	; 10
   145e8:	70 e0       	ldi	r23, 0x00	; 0
   145ea:	81 e9       	ldi	r24, 0x91	; 145
   145ec:	99 e1       	ldi	r25, 0x19	; 25
   145ee:	0e 94 c1 bc 	call	0x17982	; 0x17982 <V2B_MSB>
   145f2:	e0 91 74 19 	lds	r30, 0x1974	; 0x801974 <SS80p>
   145f6:	f0 91 75 19 	lds	r31, 0x1975	; 0x801975 <SS80p+0x1>
   145fa:	00 8d       	ldd	r16, Z+24	; 0x18
   145fc:	11 8d       	ldd	r17, Z+25	; 0x19
   145fe:	20 e0       	ldi	r18, 0x00	; 0
   14600:	30 e0       	ldi	r19, 0x00	; 0
   14602:	42 e0       	ldi	r20, 0x02	; 2
   14604:	50 e0       	ldi	r21, 0x00	; 0
   14606:	6c e0       	ldi	r22, 0x0C	; 12
   14608:	70 e0       	ldi	r23, 0x00	; 0
   1460a:	81 e9       	ldi	r24, 0x91	; 145
   1460c:	99 e1       	ldi	r25, 0x19	; 25
   1460e:	0e 94 c1 bc 	call	0x17982	; 0x17982 <V2B_MSB>
   14612:	e0 91 74 19 	lds	r30, 0x1974	; 0x801974 <SS80p>
   14616:	f0 91 75 19 	lds	r31, 0x1975	; 0x801975 <SS80p+0x1>
   1461a:	02 8d       	ldd	r16, Z+26	; 0x1a
   1461c:	13 8d       	ldd	r17, Z+27	; 0x1b
   1461e:	20 e0       	ldi	r18, 0x00	; 0
   14620:	30 e0       	ldi	r19, 0x00	; 0
   14622:	42 e0       	ldi	r20, 0x02	; 2
   14624:	50 e0       	ldi	r21, 0x00	; 0
   14626:	6e e0       	ldi	r22, 0x0E	; 14
   14628:	70 e0       	ldi	r23, 0x00	; 0
   1462a:	81 e9       	ldi	r24, 0x91	; 145
   1462c:	99 e1       	ldi	r25, 0x19	; 25
   1462e:	0e 94 c1 bc 	call	0x17982	; 0x17982 <V2B_MSB>
   14632:	e0 91 74 19 	lds	r30, 0x1974	; 0x801974 <SS80p>
   14636:	f0 91 75 19 	lds	r31, 0x1975	; 0x801975 <SS80p+0x1>
   1463a:	04 8d       	ldd	r16, Z+28	; 0x1c
   1463c:	10 e0       	ldi	r17, 0x00	; 0
   1463e:	20 e0       	ldi	r18, 0x00	; 0
   14640:	30 e0       	ldi	r19, 0x00	; 0
   14642:	41 e0       	ldi	r20, 0x01	; 1
   14644:	50 e0       	ldi	r21, 0x00	; 0
   14646:	60 e1       	ldi	r22, 0x10	; 16
   14648:	70 e0       	ldi	r23, 0x00	; 0
   1464a:	81 e9       	ldi	r24, 0x91	; 145
   1464c:	99 e1       	ldi	r25, 0x19	; 25
   1464e:	0e 94 c1 bc 	call	0x17982	; 0x17982 <V2B_MSB>
   14652:	e0 91 74 19 	lds	r30, 0x1974	; 0x801974 <SS80p>
   14656:	f0 91 75 19 	lds	r31, 0x1975	; 0x801975 <SS80p+0x1>
   1465a:	05 8d       	ldd	r16, Z+29	; 0x1d
   1465c:	10 e0       	ldi	r17, 0x00	; 0
   1465e:	20 e0       	ldi	r18, 0x00	; 0
   14660:	30 e0       	ldi	r19, 0x00	; 0
   14662:	41 e0       	ldi	r20, 0x01	; 1
   14664:	50 e0       	ldi	r21, 0x00	; 0
   14666:	61 e1       	ldi	r22, 0x11	; 17
   14668:	70 e0       	ldi	r23, 0x00	; 0
   1466a:	81 e9       	ldi	r24, 0x91	; 145
   1466c:	99 e1       	ldi	r25, 0x19	; 25
   1466e:	0e 94 c1 bc 	call	0x17982	; 0x17982 <V2B_MSB>
   14672:	e0 91 74 19 	lds	r30, 0x1974	; 0x801974 <SS80p>
   14676:	f0 91 75 19 	lds	r31, 0x1975	; 0x801975 <SS80p+0x1>
   1467a:	06 8d       	ldd	r16, Z+30	; 0x1e
   1467c:	10 e0       	ldi	r17, 0x00	; 0
   1467e:	20 e0       	ldi	r18, 0x00	; 0
   14680:	30 e0       	ldi	r19, 0x00	; 0
   14682:	41 e0       	ldi	r20, 0x01	; 1
   14684:	50 e0       	ldi	r21, 0x00	; 0
   14686:	62 e1       	ldi	r22, 0x12	; 18
   14688:	70 e0       	ldi	r23, 0x00	; 0
   1468a:	81 e9       	ldi	r24, 0x91	; 145
   1468c:	99 e1       	ldi	r25, 0x19	; 25
   1468e:	0e 94 c1 bc 	call	0x17982	; 0x17982 <V2B_MSB>
   14692:	81 e9       	ldi	r24, 0x91	; 145
   14694:	99 e1       	ldi	r25, 0x19	; 25
   14696:	1f 91       	pop	r17
   14698:	0f 91       	pop	r16
   1469a:	08 95       	ret

0001469c <SS80VolumePack>:
   1469c:	0f 93       	push	r16
   1469e:	1f 93       	push	r17
   146a0:	2d e0       	ldi	r18, 0x0D	; 13
   146a2:	30 e0       	ldi	r19, 0x00	; 0
   146a4:	fc 01       	movw	r30, r24
   146a6:	31 83       	std	Z+1, r19	; 0x01
   146a8:	20 83       	st	Z, r18
   146aa:	e0 91 74 19 	lds	r30, 0x1974	; 0x801974 <SS80p>
   146ae:	f0 91 75 19 	lds	r31, 0x1975	; 0x801975 <SS80p+0x1>
   146b2:	07 8d       	ldd	r16, Z+31	; 0x1f
   146b4:	10 a1       	ldd	r17, Z+32	; 0x20
   146b6:	21 a1       	ldd	r18, Z+33	; 0x21
   146b8:	32 a1       	ldd	r19, Z+34	; 0x22
   146ba:	43 e0       	ldi	r20, 0x03	; 3
   146bc:	50 e0       	ldi	r21, 0x00	; 0
   146be:	60 e0       	ldi	r22, 0x00	; 0
   146c0:	70 e0       	ldi	r23, 0x00	; 0
   146c2:	84 e8       	ldi	r24, 0x84	; 132
   146c4:	99 e1       	ldi	r25, 0x19	; 25
   146c6:	0e 94 c1 bc 	call	0x17982	; 0x17982 <V2B_MSB>
   146ca:	e0 91 74 19 	lds	r30, 0x1974	; 0x801974 <SS80p>
   146ce:	f0 91 75 19 	lds	r31, 0x1975	; 0x801975 <SS80p+0x1>
   146d2:	03 a1       	ldd	r16, Z+35	; 0x23
   146d4:	10 e0       	ldi	r17, 0x00	; 0
   146d6:	20 e0       	ldi	r18, 0x00	; 0
   146d8:	30 e0       	ldi	r19, 0x00	; 0
   146da:	41 e0       	ldi	r20, 0x01	; 1
   146dc:	50 e0       	ldi	r21, 0x00	; 0
   146de:	63 e0       	ldi	r22, 0x03	; 3
   146e0:	70 e0       	ldi	r23, 0x00	; 0
   146e2:	84 e8       	ldi	r24, 0x84	; 132
   146e4:	99 e1       	ldi	r25, 0x19	; 25
   146e6:	0e 94 c1 bc 	call	0x17982	; 0x17982 <V2B_MSB>
   146ea:	e0 91 74 19 	lds	r30, 0x1974	; 0x801974 <SS80p>
   146ee:	f0 91 75 19 	lds	r31, 0x1975	; 0x801975 <SS80p+0x1>
   146f2:	04 a1       	ldd	r16, Z+36	; 0x24
   146f4:	15 a1       	ldd	r17, Z+37	; 0x25
   146f6:	20 e0       	ldi	r18, 0x00	; 0
   146f8:	30 e0       	ldi	r19, 0x00	; 0
   146fa:	42 e0       	ldi	r20, 0x02	; 2
   146fc:	50 e0       	ldi	r21, 0x00	; 0
   146fe:	64 e0       	ldi	r22, 0x04	; 4
   14700:	70 e0       	ldi	r23, 0x00	; 0
   14702:	84 e8       	ldi	r24, 0x84	; 132
   14704:	99 e1       	ldi	r25, 0x19	; 25
   14706:	0e 94 c1 bc 	call	0x17982	; 0x17982 <V2B_MSB>
   1470a:	e0 91 74 19 	lds	r30, 0x1974	; 0x801974 <SS80p>
   1470e:	f0 91 75 19 	lds	r31, 0x1975	; 0x801975 <SS80p+0x1>
   14712:	06 a1       	ldd	r16, Z+38	; 0x26
   14714:	17 a1       	ldd	r17, Z+39	; 0x27
   14716:	20 a5       	ldd	r18, Z+40	; 0x28
   14718:	31 a5       	ldd	r19, Z+41	; 0x29
   1471a:	46 e0       	ldi	r20, 0x06	; 6
   1471c:	50 e0       	ldi	r21, 0x00	; 0
   1471e:	66 e0       	ldi	r22, 0x06	; 6
   14720:	70 e0       	ldi	r23, 0x00	; 0
   14722:	84 e8       	ldi	r24, 0x84	; 132
   14724:	99 e1       	ldi	r25, 0x19	; 25
   14726:	0e 94 c1 bc 	call	0x17982	; 0x17982 <V2B_MSB>
   1472a:	e0 91 74 19 	lds	r30, 0x1974	; 0x801974 <SS80p>
   1472e:	f0 91 75 19 	lds	r31, 0x1975	; 0x801975 <SS80p+0x1>
   14732:	02 a5       	ldd	r16, Z+42	; 0x2a
   14734:	10 e0       	ldi	r17, 0x00	; 0
   14736:	20 e0       	ldi	r18, 0x00	; 0
   14738:	30 e0       	ldi	r19, 0x00	; 0
   1473a:	41 e0       	ldi	r20, 0x01	; 1
   1473c:	50 e0       	ldi	r21, 0x00	; 0
   1473e:	6c e0       	ldi	r22, 0x0C	; 12
   14740:	70 e0       	ldi	r23, 0x00	; 0
   14742:	84 e8       	ldi	r24, 0x84	; 132
   14744:	99 e1       	ldi	r25, 0x19	; 25
   14746:	0e 94 c1 bc 	call	0x17982	; 0x17982 <V2B_MSB>
   1474a:	84 e8       	ldi	r24, 0x84	; 132
   1474c:	99 e1       	ldi	r25, 0x19	; 25
   1474e:	1f 91       	pop	r17
   14750:	0f 91       	pop	r16
   14752:	08 95       	ret

00014754 <SS80_test_extended_status>:
   14754:	9b 01       	movw	r18, r22
   14756:	43 e0       	ldi	r20, 0x03	; 3
   14758:	35 95       	asr	r19
   1475a:	27 95       	ror	r18
   1475c:	4a 95       	dec	r20
   1475e:	e1 f7       	brne	.-8      	; 0x14758 <SS80_test_extended_status+0x4>
   14760:	82 0f       	add	r24, r18
   14762:	93 1f       	adc	r25, r19
   14764:	67 70       	andi	r22, 0x07	; 7
   14766:	77 27       	eor	r23, r23
   14768:	20 e8       	ldi	r18, 0x80	; 128
   1476a:	30 e0       	ldi	r19, 0x00	; 0
   1476c:	02 c0       	rjmp	.+4      	; 0x14772 <SS80_test_extended_status+0x1e>
   1476e:	35 95       	asr	r19
   14770:	27 95       	ror	r18
   14772:	6a 95       	dec	r22
   14774:	e2 f7       	brpl	.-8      	; 0x1476e <SS80_test_extended_status+0x1a>
   14776:	fc 01       	movw	r30, r24
   14778:	80 81       	ld	r24, Z
   1477a:	28 23       	and	r18, r24
   1477c:	81 e0       	ldi	r24, 0x01	; 1
   1477e:	90 e0       	ldi	r25, 0x00	; 0
   14780:	11 f4       	brne	.+4      	; 0x14786 <SS80_test_extended_status+0x32>
   14782:	80 e0       	ldi	r24, 0x00	; 0
   14784:	90 e0       	ldi	r25, 0x00	; 0
   14786:	08 95       	ret

00014788 <SS80_display_extended_status>:
   14788:	6f 92       	push	r6
   1478a:	7f 92       	push	r7
   1478c:	8f 92       	push	r8
   1478e:	ef 92       	push	r14
   14790:	ff 92       	push	r15
   14792:	0f 93       	push	r16
   14794:	1f 93       	push	r17
   14796:	cf 93       	push	r28
   14798:	df 93       	push	r29
   1479a:	ad b7       	in	r26, 0x3d	; 61
   1479c:	be b7       	in	r27, 0x3e	; 62
   1479e:	17 97       	sbiw	r26, 0x07	; 7
   147a0:	0f b6       	in	r0, 0x3f	; 63
   147a2:	f8 94       	cli
   147a4:	be bf       	out	0x3e, r27	; 62
   147a6:	0f be       	out	0x3f, r0	; 63
   147a8:	ad bf       	out	0x3d, r26	; 61
   147aa:	fc 01       	movw	r30, r24
   147ac:	ac 01       	movw	r20, r24
   147ae:	48 5f       	subi	r20, 0xF8	; 248
   147b0:	5f 4f       	sbci	r21, 0xFF	; 255
   147b2:	20 e0       	ldi	r18, 0x00	; 0
   147b4:	30 e0       	ldi	r19, 0x00	; 0
   147b6:	a1 91       	ld	r26, Z+
   147b8:	aa 23       	and	r26, r26
   147ba:	11 f0       	breq	.+4      	; 0x147c0 <SS80_display_extended_status+0x38>
   147bc:	21 e0       	ldi	r18, 0x01	; 1
   147be:	30 e0       	ldi	r19, 0x00	; 0
   147c0:	e4 17       	cp	r30, r20
   147c2:	f5 07       	cpc	r31, r21
   147c4:	c1 f7       	brne	.-16     	; 0x147b6 <SS80_display_extended_status+0x2e>
   147c6:	23 2b       	or	r18, r19
   147c8:	81 f1       	breq	.+96     	; 0x1482a <SS80_display_extended_status+0xa2>
   147ca:	ec 01       	movw	r28, r24
   147cc:	ed b7       	in	r30, 0x3d	; 61
   147ce:	fe b7       	in	r31, 0x3e	; 62
   147d0:	75 83       	std	Z+5, r23	; 0x05
   147d2:	64 83       	std	Z+4, r22	; 0x04
   147d4:	83 e6       	ldi	r24, 0x63	; 99
   147d6:	94 e2       	ldi	r25, 0x24	; 36
   147d8:	a0 e0       	ldi	r26, 0x00	; 0
   147da:	81 83       	std	Z+1, r24	; 0x01
   147dc:	92 83       	std	Z+2, r25	; 0x02
   147de:	a3 83       	std	Z+3, r26	; 0x03
   147e0:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   147e4:	0c e7       	ldi	r16, 0x7C	; 124
   147e6:	12 e0       	ldi	r17, 0x02	; 2
   147e8:	88 e5       	ldi	r24, 0x58	; 88
   147ea:	94 e2       	ldi	r25, 0x24	; 36
   147ec:	3c 01       	movw	r6, r24
   147ee:	81 2c       	mov	r8, r1
   147f0:	f8 01       	movw	r30, r16
   147f2:	e0 80       	ld	r14, Z
   147f4:	f1 80       	ldd	r15, Z+1	; 0x01
   147f6:	ff ef       	ldi	r31, 0xFF	; 255
   147f8:	ef 16       	cp	r14, r31
   147fa:	ff 06       	cpc	r15, r31
   147fc:	b1 f0       	breq	.+44     	; 0x1482a <SS80_display_extended_status+0xa2>
   147fe:	b7 01       	movw	r22, r14
   14800:	ce 01       	movw	r24, r28
   14802:	a8 df       	rcall	.-176    	; 0x14754 <SS80_test_extended_status>
   14804:	89 2b       	or	r24, r25
   14806:	71 f0       	breq	.+28     	; 0x14824 <SS80_display_extended_status+0x9c>
   14808:	f8 01       	movw	r30, r16
   1480a:	82 81       	ldd	r24, Z+2	; 0x02
   1480c:	93 81       	ldd	r25, Z+3	; 0x03
   1480e:	ed b7       	in	r30, 0x3d	; 61
   14810:	fe b7       	in	r31, 0x3e	; 62
   14812:	97 83       	std	Z+7, r25	; 0x07
   14814:	86 83       	std	Z+6, r24	; 0x06
   14816:	f5 82       	std	Z+5, r15	; 0x05
   14818:	e4 82       	std	Z+4, r14	; 0x04
   1481a:	61 82       	std	Z+1, r6	; 0x01
   1481c:	72 82       	std	Z+2, r7	; 0x02
   1481e:	83 82       	std	Z+3, r8	; 0x03
   14820:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   14824:	0c 5f       	subi	r16, 0xFC	; 252
   14826:	1f 4f       	sbci	r17, 0xFF	; 255
   14828:	e3 cf       	rjmp	.-58     	; 0x147f0 <SS80_display_extended_status+0x68>
   1482a:	ad b7       	in	r26, 0x3d	; 61
   1482c:	be b7       	in	r27, 0x3e	; 62
   1482e:	17 96       	adiw	r26, 0x07	; 7
   14830:	0f b6       	in	r0, 0x3f	; 63
   14832:	f8 94       	cli
   14834:	be bf       	out	0x3e, r27	; 62
   14836:	0f be       	out	0x3f, r0	; 63
   14838:	ad bf       	out	0x3d, r26	; 61
   1483a:	df 91       	pop	r29
   1483c:	cf 91       	pop	r28
   1483e:	1f 91       	pop	r17
   14840:	0f 91       	pop	r16
   14842:	ff 90       	pop	r15
   14844:	ef 90       	pop	r14
   14846:	8f 90       	pop	r8
   14848:	7f 90       	pop	r7
   1484a:	6f 90       	pop	r6
   1484c:	08 95       	ret

0001484e <SS80_send_status>:
   1484e:	a9 e1       	ldi	r26, 0x19	; 25
   14850:	b0 e0       	ldi	r27, 0x00	; 0
   14852:	ed e2       	ldi	r30, 0x2D	; 45
   14854:	f4 ea       	ldi	r31, 0xA4	; 164
   14856:	0c 94 15 e3 	jmp	0x1c62a	; 0x1c62a <__prologue_saves__+0x18>
   1485a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1485e:	85 ff       	sbrs	r24, 5
   14860:	0a c0       	rjmp	.+20     	; 0x14876 <SS80_send_status+0x28>
   14862:	84 e4       	ldi	r24, 0x44	; 68
   14864:	94 e2       	ldi	r25, 0x24	; 36
   14866:	a0 e0       	ldi	r26, 0x00	; 0
   14868:	ed b7       	in	r30, 0x3d	; 61
   1486a:	fe b7       	in	r31, 0x3e	; 62
   1486c:	81 83       	std	Z+1, r24	; 0x01
   1486e:	92 83       	std	Z+2, r25	; 0x02
   14870:	a3 83       	std	Z+3, r26	; 0x03
   14872:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   14876:	ce 01       	movw	r24, r28
   14878:	04 96       	adiw	r24, 0x04	; 4
   1487a:	7c 01       	movw	r14, r24
   1487c:	84 e1       	ldi	r24, 0x14	; 20
   1487e:	f7 01       	movw	r30, r14
   14880:	11 92       	st	Z+, r1
   14882:	8a 95       	dec	r24
   14884:	e9 f7       	brne	.-6      	; 0x14880 <SS80_send_status+0x32>
   14886:	e0 91 72 19 	lds	r30, 0x1972	; 0x801972 <SS80s>
   1488a:	f0 91 73 19 	lds	r31, 0x1973	; 0x801973 <SS80s+0x1>
   1488e:	86 81       	ldd	r24, Z+6	; 0x06
   14890:	20 e1       	ldi	r18, 0x10	; 16
   14892:	82 9f       	mul	r24, r18
   14894:	c0 01       	movw	r24, r0
   14896:	11 24       	eor	r1, r1
   14898:	95 81       	ldd	r25, Z+5	; 0x05
   1489a:	9f 70       	andi	r25, 0x0F	; 15
   1489c:	89 2b       	or	r24, r25
   1489e:	8c 83       	std	Y+4, r24	; 0x04
   148a0:	8f ef       	ldi	r24, 0xFF	; 255
   148a2:	8d 83       	std	Y+5, r24	; 0x05
   148a4:	83 81       	ldd	r24, Z+3	; 0x03
   148a6:	86 ff       	sbrs	r24, 6
   148a8:	02 c0       	rjmp	.+4      	; 0x148ae <SS80_send_status+0x60>
   148aa:	92 e0       	ldi	r25, 0x02	; 2
   148ac:	9e 83       	std	Y+6, r25	; 0x06
   148ae:	82 ff       	sbrs	r24, 2
   148b0:	03 c0       	rjmp	.+6      	; 0x148b8 <SS80_send_status+0x6a>
   148b2:	9e 81       	ldd	r25, Y+6	; 0x06
   148b4:	91 60       	ori	r25, 0x01	; 1
   148b6:	9e 83       	std	Y+6, r25	; 0x06
   148b8:	80 ff       	sbrs	r24, 0
   148ba:	02 c0       	rjmp	.+4      	; 0x148c0 <SS80_send_status+0x72>
   148bc:	82 e0       	ldi	r24, 0x02	; 2
   148be:	88 87       	std	Y+8, r24	; 0x08
   148c0:	83 81       	ldd	r24, Z+3	; 0x03
   148c2:	81 ff       	sbrs	r24, 1
   148c4:	03 c0       	rjmp	.+6      	; 0x148cc <SS80_send_status+0x7e>
   148c6:	88 85       	ldd	r24, Y+8	; 0x08
   148c8:	82 60       	ori	r24, 0x02	; 2
   148ca:	88 87       	std	Y+8, r24	; 0x08
   148cc:	83 81       	ldd	r24, Z+3	; 0x03
   148ce:	83 ff       	sbrs	r24, 3
   148d0:	02 c0       	rjmp	.+4      	; 0x148d6 <SS80_send_status+0x88>
   148d2:	88 e0       	ldi	r24, 0x08	; 8
   148d4:	8a 87       	std	Y+10, r24	; 0x0a
   148d6:	83 81       	ldd	r24, Z+3	; 0x03
   148d8:	94 81       	ldd	r25, Z+4	; 0x04
   148da:	89 2b       	or	r24, r25
   148dc:	59 f4       	brne	.+22     	; 0x148f4 <SS80_send_status+0xa6>
   148de:	07 81       	ldd	r16, Z+7	; 0x07
   148e0:	10 85       	ldd	r17, Z+8	; 0x08
   148e2:	21 85       	ldd	r18, Z+9	; 0x09
   148e4:	32 85       	ldd	r19, Z+10	; 0x0a
   148e6:	46 e0       	ldi	r20, 0x06	; 6
   148e8:	50 e0       	ldi	r21, 0x00	; 0
   148ea:	6a e0       	ldi	r22, 0x0A	; 10
   148ec:	70 e0       	ldi	r23, 0x00	; 0
   148ee:	c7 01       	movw	r24, r14
   148f0:	0e 94 c1 bc 	call	0x17982	; 0x17982 <V2B_MSB>
   148f4:	e0 91 72 19 	lds	r30, 0x1972	; 0x801972 <SS80s>
   148f8:	f0 91 73 19 	lds	r31, 0x1973	; 0x801973 <SS80s+0x1>
   148fc:	83 81       	ldd	r24, Z+3	; 0x03
   148fe:	94 81       	ldd	r25, Z+4	; 0x04
   14900:	89 2b       	or	r24, r25
   14902:	11 f0       	breq	.+4      	; 0x14908 <SS80_send_status+0xba>
   14904:	81 e0       	ldi	r24, 0x01	; 1
   14906:	82 83       	std	Z+2, r24	; 0x02
   14908:	80 e0       	ldi	r24, 0x00	; 0
   1490a:	91 e0       	ldi	r25, 0x01	; 1
   1490c:	99 8f       	std	Y+25, r25	; 0x19
   1490e:	88 8f       	std	Y+24, r24	; 0x18
   14910:	ae 01       	movw	r20, r28
   14912:	48 5e       	subi	r20, 0xE8	; 232
   14914:	5f 4f       	sbci	r21, 0xFF	; 255
   14916:	64 e1       	ldi	r22, 0x14	; 20
   14918:	70 e0       	ldi	r23, 0x00	; 0
   1491a:	c7 01       	movw	r24, r14
   1491c:	0e 94 bd 89 	call	0x1137a	; 0x1137a <gpib_write_str>
   14920:	44 97       	sbiw	r24, 0x14	; 20
   14922:	71 f0       	breq	.+28     	; 0x14940 <SS80_send_status+0xf2>
   14924:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14928:	80 ff       	sbrs	r24, 0
   1492a:	0a c0       	rjmp	.+20     	; 0x14940 <SS80_send_status+0xf2>
   1492c:	89 e2       	ldi	r24, 0x29	; 41
   1492e:	94 e2       	ldi	r25, 0x24	; 36
   14930:	a0 e0       	ldi	r26, 0x00	; 0
   14932:	ed b7       	in	r30, 0x3d	; 61
   14934:	fe b7       	in	r31, 0x3e	; 62
   14936:	81 83       	std	Z+1, r24	; 0x01
   14938:	92 83       	std	Z+2, r25	; 0x02
   1493a:	a3 83       	std	Z+3, r26	; 0x03
   1493c:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   14940:	88 8d       	ldd	r24, Y+24	; 0x18
   14942:	99 8d       	ldd	r25, Y+25	; 0x19
   14944:	88 27       	eor	r24, r24
   14946:	90 7d       	andi	r25, 0xD0	; 208
   14948:	69 96       	adiw	r28, 0x19	; 25
   1494a:	e6 e0       	ldi	r30, 0x06	; 6
   1494c:	0c 94 31 e3 	jmp	0x1c662	; 0x1c662 <__epilogue_restores__+0x18>

00014950 <SS80_describe>:
   14950:	a7 e0       	ldi	r26, 0x07	; 7
   14952:	b0 e0       	ldi	r27, 0x00	; 0
   14954:	ee ea       	ldi	r30, 0xAE	; 174
   14956:	f4 ea       	ldi	r31, 0xA4	; 164
   14958:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__prologue_saves__+0x20>
   1495c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14960:	85 ff       	sbrs	r24, 5
   14962:	0a c0       	rjmp	.+20     	; 0x14978 <SS80_describe+0x28>
   14964:	88 e1       	ldi	r24, 0x18	; 24
   14966:	94 e2       	ldi	r25, 0x24	; 36
   14968:	a0 e0       	ldi	r26, 0x00	; 0
   1496a:	ed b7       	in	r30, 0x3d	; 61
   1496c:	fe b7       	in	r31, 0x3e	; 62
   1496e:	81 83       	std	Z+1, r24	; 0x01
   14970:	92 83       	std	Z+2, r25	; 0x02
   14972:	a3 83       	std	Z+3, r26	; 0x03
   14974:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   14978:	1f 82       	std	Y+7, r1	; 0x07
   1497a:	1e 82       	std	Y+6, r1	; 0x06
   1497c:	ce 01       	movw	r24, r28
   1497e:	04 96       	adiw	r24, 0x04	; 4
   14980:	85 dd       	rcall	.-1270   	; 0x1448c <SS80ControllerPack>
   14982:	6c 81       	ldd	r22, Y+4	; 0x04
   14984:	7d 81       	ldd	r23, Y+5	; 0x05
   14986:	ae 01       	movw	r20, r28
   14988:	4a 5f       	subi	r20, 0xFA	; 250
   1498a:	5f 4f       	sbci	r21, 0xFF	; 255
   1498c:	0e 94 bd 89 	call	0x1137a	; 0x1137a <gpib_write_str>
   14990:	2c 81       	ldd	r18, Y+4	; 0x04
   14992:	3d 81       	ldd	r19, Y+5	; 0x05
   14994:	82 17       	cp	r24, r18
   14996:	93 07       	cpc	r25, r19
   14998:	39 f0       	breq	.+14     	; 0x149a8 <SS80_describe+0x58>
   1499a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1499e:	80 ff       	sbrs	r24, 0
   149a0:	3c c0       	rjmp	.+120    	; 0x14a1a <SS80_describe+0xca>
   149a2:	85 ef       	ldi	r24, 0xF5	; 245
   149a4:	93 e2       	ldi	r25, 0x23	; 35
   149a6:	31 c0       	rjmp	.+98     	; 0x14a0a <SS80_describe+0xba>
   149a8:	1f 82       	std	Y+7, r1	; 0x07
   149aa:	1e 82       	std	Y+6, r1	; 0x06
   149ac:	ce 01       	movw	r24, r28
   149ae:	04 96       	adiw	r24, 0x04	; 4
   149b0:	a9 dd       	rcall	.-1198   	; 0x14504 <SS80UnitPack>
   149b2:	6c 81       	ldd	r22, Y+4	; 0x04
   149b4:	7d 81       	ldd	r23, Y+5	; 0x05
   149b6:	ae 01       	movw	r20, r28
   149b8:	4a 5f       	subi	r20, 0xFA	; 250
   149ba:	5f 4f       	sbci	r21, 0xFF	; 255
   149bc:	0e 94 bd 89 	call	0x1137a	; 0x1137a <gpib_write_str>
   149c0:	2c 81       	ldd	r18, Y+4	; 0x04
   149c2:	3d 81       	ldd	r19, Y+5	; 0x05
   149c4:	82 17       	cp	r24, r18
   149c6:	93 07       	cpc	r25, r19
   149c8:	39 f0       	breq	.+14     	; 0x149d8 <SS80_describe+0x88>
   149ca:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   149ce:	80 ff       	sbrs	r24, 0
   149d0:	24 c0       	rjmp	.+72     	; 0x14a1a <SS80_describe+0xca>
   149d2:	88 ed       	ldi	r24, 0xD8	; 216
   149d4:	93 e2       	ldi	r25, 0x23	; 35
   149d6:	19 c0       	rjmp	.+50     	; 0x14a0a <SS80_describe+0xba>
   149d8:	80 e0       	ldi	r24, 0x00	; 0
   149da:	91 e0       	ldi	r25, 0x01	; 1
   149dc:	9f 83       	std	Y+7, r25	; 0x07
   149de:	8e 83       	std	Y+6, r24	; 0x06
   149e0:	ce 01       	movw	r24, r28
   149e2:	04 96       	adiw	r24, 0x04	; 4
   149e4:	5b de       	rcall	.-842    	; 0x1469c <SS80VolumePack>
   149e6:	6c 81       	ldd	r22, Y+4	; 0x04
   149e8:	7d 81       	ldd	r23, Y+5	; 0x05
   149ea:	ae 01       	movw	r20, r28
   149ec:	4a 5f       	subi	r20, 0xFA	; 250
   149ee:	5f 4f       	sbci	r21, 0xFF	; 255
   149f0:	0e 94 bd 89 	call	0x1137a	; 0x1137a <gpib_write_str>
   149f4:	2c 81       	ldd	r18, Y+4	; 0x04
   149f6:	3d 81       	ldd	r19, Y+5	; 0x05
   149f8:	82 17       	cp	r24, r18
   149fa:	93 07       	cpc	r25, r19
   149fc:	99 f0       	breq	.+38     	; 0x14a24 <SS80_describe+0xd4>
   149fe:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14a02:	80 ff       	sbrs	r24, 0
   14a04:	0a c0       	rjmp	.+20     	; 0x14a1a <SS80_describe+0xca>
   14a06:	89 eb       	ldi	r24, 0xB9	; 185
   14a08:	93 e2       	ldi	r25, 0x23	; 35
   14a0a:	a0 e0       	ldi	r26, 0x00	; 0
   14a0c:	ed b7       	in	r30, 0x3d	; 61
   14a0e:	fe b7       	in	r31, 0x3e	; 62
   14a10:	81 83       	std	Z+1, r24	; 0x01
   14a12:	92 83       	std	Z+2, r25	; 0x02
   14a14:	a3 83       	std	Z+3, r26	; 0x03
   14a16:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   14a1a:	8e 81       	ldd	r24, Y+6	; 0x06
   14a1c:	9f 81       	ldd	r25, Y+7	; 0x07
   14a1e:	88 27       	eor	r24, r24
   14a20:	90 7d       	andi	r25, 0xD0	; 208
   14a22:	02 c0       	rjmp	.+4      	; 0x14a28 <SS80_describe+0xd8>
   14a24:	80 e0       	ldi	r24, 0x00	; 0
   14a26:	90 e0       	ldi	r25, 0x00	; 0
   14a28:	27 96       	adiw	r28, 0x07	; 7
   14a2a:	e2 e0       	ldi	r30, 0x02	; 2
   14a2c:	0c 94 35 e3 	jmp	0x1c66a	; 0x1c66a <__epilogue_restores__+0x20>

00014a30 <SS80_Check_Unit>:
   14a30:	00 d0       	rcall	.+0      	; 0x14a32 <SS80_Check_Unit+0x2>
   14a32:	00 d0       	rcall	.+0      	; 0x14a34 <SS80_Check_Unit+0x4>
   14a34:	1f 92       	push	r1
   14a36:	e0 91 72 19 	lds	r30, 0x1972	; 0x801972 <SS80s>
   14a3a:	f0 91 73 19 	lds	r31, 0x1973	; 0x801973 <SS80s+0x1>
   14a3e:	88 23       	and	r24, r24
   14a40:	c9 f0       	breq	.+50     	; 0x14a74 <SS80_Check_Unit+0x44>
   14a42:	8f 30       	cpi	r24, 0x0F	; 15
   14a44:	b9 f0       	breq	.+46     	; 0x14a74 <SS80_Check_Unit+0x44>
   14a46:	23 81       	ldd	r18, Z+3	; 0x03
   14a48:	34 81       	ldd	r19, Z+4	; 0x04
   14a4a:	20 64       	ori	r18, 0x40	; 64
   14a4c:	34 83       	std	Z+4, r19	; 0x04
   14a4e:	23 83       	std	Z+3, r18	; 0x03
   14a50:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <debuglevel>
   14a54:	90 ff       	sbrs	r25, 0
   14a56:	0f c0       	rjmp	.+30     	; 0x14a76 <SS80_Check_Unit+0x46>
   14a58:	90 e0       	ldi	r25, 0x00	; 0
   14a5a:	ed b7       	in	r30, 0x3d	; 61
   14a5c:	fe b7       	in	r31, 0x3e	; 62
   14a5e:	95 83       	std	Z+5, r25	; 0x05
   14a60:	84 83       	std	Z+4, r24	; 0x04
   14a62:	81 ea       	ldi	r24, 0xA1	; 161
   14a64:	93 e2       	ldi	r25, 0x23	; 35
   14a66:	a0 e0       	ldi	r26, 0x00	; 0
   14a68:	81 83       	std	Z+1, r24	; 0x01
   14a6a:	92 83       	std	Z+2, r25	; 0x02
   14a6c:	a3 83       	std	Z+3, r26	; 0x03
   14a6e:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   14a72:	01 c0       	rjmp	.+2      	; 0x14a76 <SS80_Check_Unit+0x46>
   14a74:	85 83       	std	Z+5, r24	; 0x05
   14a76:	0f 90       	pop	r0
   14a78:	0f 90       	pop	r0
   14a7a:	0f 90       	pop	r0
   14a7c:	0f 90       	pop	r0
   14a7e:	0f 90       	pop	r0
   14a80:	08 95       	ret

00014a82 <SS80_Check_Volume>:
   14a82:	00 d0       	rcall	.+0      	; 0x14a84 <SS80_Check_Volume+0x2>
   14a84:	00 d0       	rcall	.+0      	; 0x14a86 <SS80_Check_Volume+0x4>
   14a86:	1f 92       	push	r1
   14a88:	e0 91 72 19 	lds	r30, 0x1972	; 0x801972 <SS80s>
   14a8c:	f0 91 73 19 	lds	r31, 0x1973	; 0x801973 <SS80s+0x1>
   14a90:	88 23       	and	r24, r24
   14a92:	b9 f0       	breq	.+46     	; 0x14ac2 <SS80_Check_Volume+0x40>
   14a94:	23 81       	ldd	r18, Z+3	; 0x03
   14a96:	34 81       	ldd	r19, Z+4	; 0x04
   14a98:	20 64       	ori	r18, 0x40	; 64
   14a9a:	34 83       	std	Z+4, r19	; 0x04
   14a9c:	23 83       	std	Z+3, r18	; 0x03
   14a9e:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <debuglevel>
   14aa2:	90 ff       	sbrs	r25, 0
   14aa4:	0f c0       	rjmp	.+30     	; 0x14ac4 <SS80_Check_Volume+0x42>
   14aa6:	90 e0       	ldi	r25, 0x00	; 0
   14aa8:	ed b7       	in	r30, 0x3d	; 61
   14aaa:	fe b7       	in	r31, 0x3e	; 62
   14aac:	95 83       	std	Z+5, r25	; 0x05
   14aae:	84 83       	std	Z+4, r24	; 0x04
   14ab0:	87 e8       	ldi	r24, 0x87	; 135
   14ab2:	93 e2       	ldi	r25, 0x23	; 35
   14ab4:	a0 e0       	ldi	r26, 0x00	; 0
   14ab6:	81 83       	std	Z+1, r24	; 0x01
   14ab8:	92 83       	std	Z+2, r25	; 0x02
   14aba:	a3 83       	std	Z+3, r26	; 0x03
   14abc:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   14ac0:	01 c0       	rjmp	.+2      	; 0x14ac4 <SS80_Check_Volume+0x42>
   14ac2:	16 82       	std	Z+6, r1	; 0x06
   14ac4:	0f 90       	pop	r0
   14ac6:	0f 90       	pop	r0
   14ac8:	0f 90       	pop	r0
   14aca:	0f 90       	pop	r0
   14acc:	0f 90       	pop	r0
   14ace:	08 95       	ret

00014ad0 <SS80_Command_State>:
   14ad0:	2f 92       	push	r2
   14ad2:	3f 92       	push	r3
   14ad4:	4f 92       	push	r4
   14ad6:	6f 92       	push	r6
   14ad8:	7f 92       	push	r7
   14ada:	8f 92       	push	r8
   14adc:	af 92       	push	r10
   14ade:	bf 92       	push	r11
   14ae0:	cf 92       	push	r12
   14ae2:	ef 92       	push	r14
   14ae4:	ff 92       	push	r15
   14ae6:	0f 93       	push	r16
   14ae8:	1f 93       	push	r17
   14aea:	cf 93       	push	r28
   14aec:	df 93       	push	r29
   14aee:	cd b7       	in	r28, 0x3d	; 61
   14af0:	de b7       	in	r29, 0x3e	; 62
   14af2:	66 97       	sbiw	r28, 0x16	; 22
   14af4:	0f b6       	in	r0, 0x3f	; 63
   14af6:	f8 94       	cli
   14af8:	de bf       	out	0x3e, r29	; 62
   14afa:	0f be       	out	0x3f, r0	; 63
   14afc:	cd bf       	out	0x3d, r28	; 61
   14afe:	e0 91 74 19 	lds	r30, 0x1974	; 0x801974 <SS80p>
   14b02:	f0 91 75 19 	lds	r31, 0x1975	; 0x801975 <SS80p+0x1>
   14b06:	81 81       	ldd	r24, Z+1	; 0x01
   14b08:	90 e0       	ldi	r25, 0x00	; 0
   14b0a:	0e 94 c3 84 	call	0x10986	; 0x10986 <gpib_disable_PPR>
   14b0e:	80 e0       	ldi	r24, 0x00	; 0
   14b10:	91 e0       	ldi	r25, 0x01	; 1
   14b12:	99 87       	std	Y+9, r25	; 0x09
   14b14:	88 87       	std	Y+8, r24	; 0x08
   14b16:	ae 01       	movw	r20, r28
   14b18:	48 5f       	subi	r20, 0xF8	; 248
   14b1a:	5f 4f       	sbci	r21, 0xFF	; 255
   14b1c:	60 e0       	ldi	r22, 0x00	; 0
   14b1e:	72 e0       	ldi	r23, 0x02	; 2
   14b20:	86 ef       	ldi	r24, 0xF6	; 246
   14b22:	9c e1       	ldi	r25, 0x1C	; 28
   14b24:	0e 94 1b 89 	call	0x11236	; 0x11236 <gpib_read_str>
   14b28:	9b 87       	std	Y+11, r25	; 0x0b
   14b2a:	8a 87       	std	Y+10, r24	; 0x0a
   14b2c:	88 85       	ldd	r24, Y+8	; 0x08
   14b2e:	99 85       	ldd	r25, Y+9	; 0x09
   14b30:	9c 01       	movw	r18, r24
   14b32:	22 27       	eor	r18, r18
   14b34:	30 7d       	andi	r19, 0xD0	; 208
   14b36:	23 2b       	or	r18, r19
   14b38:	79 f0       	breq	.+30     	; 0x14b58 <SS80_Command_State+0x88>
   14b3a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14b3e:	80 ff       	sbrs	r24, 0
   14b40:	21 c2       	rjmp	.+1090   	; 0x14f84 <SS80_Command_State+0x4b4>
   14b42:	81 e6       	ldi	r24, 0x61	; 97
   14b44:	93 e2       	ldi	r25, 0x23	; 35
   14b46:	a0 e0       	ldi	r26, 0x00	; 0
   14b48:	ed b7       	in	r30, 0x3d	; 61
   14b4a:	fe b7       	in	r31, 0x3e	; 62
   14b4c:	81 83       	std	Z+1, r24	; 0x01
   14b4e:	92 83       	std	Z+2, r25	; 0x02
   14b50:	a3 83       	std	Z+3, r26	; 0x03
   14b52:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   14b56:	16 c2       	rjmp	.+1068   	; 0x14f84 <SS80_Command_State+0x4b4>
   14b58:	2a 85       	ldd	r18, Y+10	; 0x0a
   14b5a:	3b 85       	ldd	r19, Y+11	; 0x0b
   14b5c:	23 2b       	or	r18, r19
   14b5e:	09 f4       	brne	.+2      	; 0x14b62 <SS80_Command_State+0x92>
   14b60:	16 c2       	rjmp	.+1068   	; 0x14f8e <SS80_Command_State+0x4be>
   14b62:	90 fd       	sbrc	r25, 0
   14b64:	0e c0       	rjmp	.+28     	; 0x14b82 <SS80_Command_State+0xb2>
   14b66:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14b6a:	80 ff       	sbrs	r24, 0
   14b6c:	0a c0       	rjmp	.+20     	; 0x14b82 <SS80_Command_State+0xb2>
   14b6e:	88 e4       	ldi	r24, 0x48	; 72
   14b70:	93 e2       	ldi	r25, 0x23	; 35
   14b72:	a0 e0       	ldi	r26, 0x00	; 0
   14b74:	ed b7       	in	r30, 0x3d	; 61
   14b76:	fe b7       	in	r31, 0x3e	; 62
   14b78:	81 83       	std	Z+1, r24	; 0x01
   14b7a:	92 83       	std	Z+2, r25	; 0x02
   14b7c:	a3 83       	std	Z+3, r26	; 0x03
   14b7e:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   14b82:	e1 2c       	mov	r14, r1
   14b84:	f1 2c       	mov	r15, r1
   14b86:	8c e4       	ldi	r24, 0x4C	; 76
   14b88:	92 e2       	ldi	r25, 0x22	; 34
   14b8a:	9c 01       	movw	r18, r24
   14b8c:	40 e0       	ldi	r20, 0x00	; 0
   14b8e:	2e 87       	std	Y+14, r18	; 0x0e
   14b90:	3f 87       	std	Y+15, r19	; 0x0f
   14b92:	48 8b       	std	Y+16, r20	; 0x10
   14b94:	81 e7       	ldi	r24, 0x71	; 113
   14b96:	92 e2       	ldi	r25, 0x22	; 34
   14b98:	9c 01       	movw	r18, r24
   14b9a:	40 e0       	ldi	r20, 0x00	; 0
   14b9c:	29 8b       	std	Y+17, r18	; 0x11
   14b9e:	3a 8b       	std	Y+18, r19	; 0x12
   14ba0:	4b 8b       	std	Y+19, r20	; 0x13
   14ba2:	8b e8       	ldi	r24, 0x8B	; 139
   14ba4:	92 e2       	ldi	r25, 0x22	; 34
   14ba6:	9c 01       	movw	r18, r24
   14ba8:	40 e0       	ldi	r20, 0x00	; 0
   14baa:	2c 8b       	std	Y+20, r18	; 0x14
   14bac:	3d 8b       	std	Y+21, r19	; 0x15
   14bae:	4e 8b       	std	Y+22, r20	; 0x16
   14bb0:	81 ea       	ldi	r24, 0xA1	; 161
   14bb2:	92 e2       	ldi	r25, 0x22	; 34
   14bb4:	3c 01       	movw	r6, r24
   14bb6:	81 2c       	mov	r8, r1
   14bb8:	8f ea       	ldi	r24, 0xAF	; 175
   14bba:	92 e2       	ldi	r25, 0x22	; 34
   14bbc:	5c 01       	movw	r10, r24
   14bbe:	c1 2c       	mov	r12, r1
   14bc0:	8b ec       	ldi	r24, 0xCB	; 203
   14bc2:	92 e2       	ldi	r25, 0x22	; 34
   14bc4:	1c 01       	movw	r2, r24
   14bc6:	41 2c       	mov	r4, r1
   14bc8:	2a 85       	ldd	r18, Y+10	; 0x0a
   14bca:	3b 85       	ldd	r19, Y+11	; 0x0b
   14bcc:	87 01       	movw	r16, r14
   14bce:	e2 16       	cp	r14, r18
   14bd0:	f3 06       	cpc	r15, r19
   14bd2:	0c f0       	brlt	.+2      	; 0x14bd6 <SS80_Command_State+0x106>
   14bd4:	b6 c1       	rjmp	.+876    	; 0x14f42 <SS80_Command_State+0x472>
   14bd6:	0f 5f       	subi	r16, 0xFF	; 255
   14bd8:	1f 4f       	sbci	r17, 0xFF	; 255
   14bda:	f7 01       	movw	r30, r14
   14bdc:	ea 50       	subi	r30, 0x0A	; 10
   14bde:	f3 4e       	sbci	r31, 0xE3	; 227
   14be0:	80 81       	ld	r24, Z
   14be2:	28 2f       	mov	r18, r24
   14be4:	30 e0       	ldi	r19, 0x00	; 0
   14be6:	a9 01       	movw	r20, r18
   14be8:	40 52       	subi	r20, 0x20	; 32
   14bea:	51 09       	sbc	r21, r1
   14bec:	40 31       	cpi	r20, 0x10	; 16
   14bee:	51 05       	cpc	r21, r1
   14bf0:	98 f4       	brcc	.+38     	; 0x14c18 <SS80_Command_State+0x148>
   14bf2:	80 52       	subi	r24, 0x20	; 32
   14bf4:	1d df       	rcall	.-454    	; 0x14a30 <SS80_Check_Unit>
   14bf6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14bfa:	85 ff       	sbrs	r24, 5
   14bfc:	a0 c1       	rjmp	.+832    	; 0x14f3e <SS80_Command_State+0x46e>
   14bfe:	e0 91 72 19 	lds	r30, 0x1972	; 0x801972 <SS80s>
   14c02:	f0 91 73 19 	lds	r31, 0x1973	; 0x801973 <SS80s+0x1>
   14c06:	85 81       	ldd	r24, Z+5	; 0x05
   14c08:	90 e0       	ldi	r25, 0x00	; 0
   14c0a:	ed b7       	in	r30, 0x3d	; 61
   14c0c:	fe b7       	in	r31, 0x3e	; 62
   14c0e:	95 83       	std	Z+5, r25	; 0x05
   14c10:	84 83       	std	Z+4, r24	; 0x04
   14c12:	82 e3       	ldi	r24, 0x32	; 50
   14c14:	93 e2       	ldi	r25, 0x23	; 35
   14c16:	19 c0       	rjmp	.+50     	; 0x14c4a <SS80_Command_State+0x17a>
   14c18:	a9 01       	movw	r20, r18
   14c1a:	40 54       	subi	r20, 0x40	; 64
   14c1c:	51 09       	sbc	r21, r1
   14c1e:	40 31       	cpi	r20, 0x10	; 16
   14c20:	51 05       	cpc	r21, r1
   14c22:	d0 f4       	brcc	.+52     	; 0x14c58 <SS80_Command_State+0x188>
   14c24:	80 54       	subi	r24, 0x40	; 64
   14c26:	2d df       	rcall	.-422    	; 0x14a82 <SS80_Check_Volume>
   14c28:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14c2c:	85 ff       	sbrs	r24, 5
   14c2e:	87 c1       	rjmp	.+782    	; 0x14f3e <SS80_Command_State+0x46e>
   14c30:	e0 91 72 19 	lds	r30, 0x1972	; 0x801972 <SS80s>
   14c34:	f0 91 73 19 	lds	r31, 0x1973	; 0x801973 <SS80s+0x1>
   14c38:	86 81       	ldd	r24, Z+6	; 0x06
   14c3a:	90 e0       	ldi	r25, 0x00	; 0
   14c3c:	ed b7       	in	r30, 0x3d	; 61
   14c3e:	fe b7       	in	r31, 0x3e	; 62
   14c40:	95 83       	std	Z+5, r25	; 0x05
   14c42:	84 83       	std	Z+4, r24	; 0x04
   14c44:	29 e1       	ldi	r18, 0x19	; 25
   14c46:	33 e2       	ldi	r19, 0x23	; 35
   14c48:	c9 01       	movw	r24, r18
   14c4a:	a0 e0       	ldi	r26, 0x00	; 0
   14c4c:	81 83       	std	Z+1, r24	; 0x01
   14c4e:	92 83       	std	Z+2, r25	; 0x02
   14c50:	a3 83       	std	Z+3, r26	; 0x03
   14c52:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   14c56:	73 c1       	rjmp	.+742    	; 0x14f3e <SS80_Command_State+0x46e>
   14c58:	21 15       	cp	r18, r1
   14c5a:	31 05       	cpc	r19, r1
   14c5c:	79 f4       	brne	.+30     	; 0x14c7c <SS80_Command_State+0x1ac>
   14c5e:	e0 91 72 19 	lds	r30, 0x1972	; 0x801972 <SS80s>
   14c62:	f0 91 73 19 	lds	r31, 0x1973	; 0x801973 <SS80s+0x1>
   14c66:	81 e0       	ldi	r24, 0x01	; 1
   14c68:	90 e0       	ldi	r25, 0x00	; 0
   14c6a:	91 83       	std	Z+1, r25	; 0x01
   14c6c:	80 83       	st	Z, r24
   14c6e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14c72:	85 ff       	sbrs	r24, 5
   14c74:	66 c1       	rjmp	.+716    	; 0x14f42 <SS80_Command_State+0x472>
   14c76:	81 e0       	ldi	r24, 0x01	; 1
   14c78:	93 e2       	ldi	r25, 0x23	; 35
   14c7a:	0f c0       	rjmp	.+30     	; 0x14c9a <SS80_Command_State+0x1ca>
   14c7c:	22 30       	cpi	r18, 0x02	; 2
   14c7e:	31 05       	cpc	r19, r1
   14c80:	a9 f4       	brne	.+42     	; 0x14cac <SS80_Command_State+0x1dc>
   14c82:	e0 91 72 19 	lds	r30, 0x1972	; 0x801972 <SS80s>
   14c86:	f0 91 73 19 	lds	r31, 0x1973	; 0x801973 <SS80s+0x1>
   14c8a:	31 83       	std	Z+1, r19	; 0x01
   14c8c:	20 83       	st	Z, r18
   14c8e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14c92:	85 ff       	sbrs	r24, 5
   14c94:	56 c1       	rjmp	.+684    	; 0x14f42 <SS80_Command_State+0x472>
   14c96:	88 ee       	ldi	r24, 0xE8	; 232
   14c98:	92 e2       	ldi	r25, 0x22	; 34
   14c9a:	a0 e0       	ldi	r26, 0x00	; 0
   14c9c:	ed b7       	in	r30, 0x3d	; 61
   14c9e:	fe b7       	in	r31, 0x3e	; 62
   14ca0:	81 83       	std	Z+1, r24	; 0x01
   14ca2:	92 83       	std	Z+2, r25	; 0x02
   14ca4:	a3 83       	std	Z+3, r26	; 0x03
   14ca6:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   14caa:	4b c1       	rjmp	.+662    	; 0x14f42 <SS80_Command_State+0x472>
   14cac:	20 31       	cpi	r18, 0x10	; 16
   14cae:	31 05       	cpc	r19, r1
   14cb0:	b1 f5       	brne	.+108    	; 0x14d1e <SS80_Command_State+0x24e>
   14cb2:	20 91 72 19 	lds	r18, 0x1972	; 0x801972 <SS80s>
   14cb6:	30 91 73 19 	lds	r19, 0x1973	; 0x801973 <SS80s+0x1>
   14cba:	3d 87       	std	Y+13, r19	; 0x0d
   14cbc:	2c 87       	std	Y+12, r18	; 0x0c
   14cbe:	46 e0       	ldi	r20, 0x06	; 6
   14cc0:	50 e0       	ldi	r21, 0x00	; 0
   14cc2:	b8 01       	movw	r22, r16
   14cc4:	86 ef       	ldi	r24, 0xF6	; 246
   14cc6:	9c e1       	ldi	r25, 0x1C	; 28
   14cc8:	0e 94 ea bc 	call	0x179d4	; 0x179d4 <B2V_MSB>
   14ccc:	ec 85       	ldd	r30, Y+12	; 0x0c
   14cce:	fd 85       	ldd	r31, Y+13	; 0x0d
   14cd0:	67 83       	std	Z+7, r22	; 0x07
   14cd2:	70 87       	std	Z+8, r23	; 0x08
   14cd4:	81 87       	std	Z+9, r24	; 0x09
   14cd6:	92 87       	std	Z+10, r25	; 0x0a
   14cd8:	87 01       	movw	r16, r14
   14cda:	09 5f       	subi	r16, 0xF9	; 249
   14cdc:	1f 4f       	sbci	r17, 0xFF	; 255
   14cde:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14ce2:	85 ff       	sbrs	r24, 5
   14ce4:	2c c1       	rjmp	.+600    	; 0x14f3e <SS80_Command_State+0x46e>
   14ce6:	20 91 72 19 	lds	r18, 0x1972	; 0x801972 <SS80s>
   14cea:	30 91 73 19 	lds	r19, 0x1973	; 0x801973 <SS80s+0x1>
   14cee:	80 91 74 19 	lds	r24, 0x1974	; 0x801974 <SS80p>
   14cf2:	90 91 75 19 	lds	r25, 0x1975	; 0x801975 <SS80p+0x1>
   14cf6:	fc 01       	movw	r30, r24
   14cf8:	a0 89       	ldd	r26, Z+16	; 0x10
   14cfa:	b1 89       	ldd	r27, Z+17	; 0x11
   14cfc:	f9 01       	movw	r30, r18
   14cfe:	27 81       	ldd	r18, Z+7	; 0x07
   14d00:	30 85       	ldd	r19, Z+8	; 0x08
   14d02:	41 85       	ldd	r20, Z+9	; 0x09
   14d04:	52 85       	ldd	r21, Z+10	; 0x0a
   14d06:	0e 94 e9 e2 	call	0x1c5d2	; 0x1c5d2 <__muluhisi3>
   14d0a:	ed b7       	in	r30, 0x3d	; 61
   14d0c:	fe b7       	in	r31, 0x3e	; 62
   14d0e:	64 83       	std	Z+4, r22	; 0x04
   14d10:	75 83       	std	Z+5, r23	; 0x05
   14d12:	86 83       	std	Z+6, r24	; 0x06
   14d14:	97 83       	std	Z+7, r25	; 0x07
   14d16:	21 82       	std	Z+1, r2	; 0x01
   14d18:	32 82       	std	Z+2, r3	; 0x02
   14d1a:	43 82       	std	Z+3, r4	; 0x03
   14d1c:	2e c0       	rjmp	.+92     	; 0x14d7a <SS80_Command_State+0x2aa>
   14d1e:	28 31       	cpi	r18, 0x18	; 24
   14d20:	31 05       	cpc	r19, r1
   14d22:	71 f5       	brne	.+92     	; 0x14d80 <SS80_Command_State+0x2b0>
   14d24:	20 91 72 19 	lds	r18, 0x1972	; 0x801972 <SS80s>
   14d28:	30 91 73 19 	lds	r19, 0x1973	; 0x801973 <SS80s+0x1>
   14d2c:	3d 87       	std	Y+13, r19	; 0x0d
   14d2e:	2c 87       	std	Y+12, r18	; 0x0c
   14d30:	44 e0       	ldi	r20, 0x04	; 4
   14d32:	50 e0       	ldi	r21, 0x00	; 0
   14d34:	b8 01       	movw	r22, r16
   14d36:	86 ef       	ldi	r24, 0xF6	; 246
   14d38:	9c e1       	ldi	r25, 0x1C	; 28
   14d3a:	0e 94 ea bc 	call	0x179d4	; 0x179d4 <B2V_MSB>
   14d3e:	ec 85       	ldd	r30, Y+12	; 0x0c
   14d40:	fd 85       	ldd	r31, Y+13	; 0x0d
   14d42:	63 87       	std	Z+11, r22	; 0x0b
   14d44:	74 87       	std	Z+12, r23	; 0x0c
   14d46:	85 87       	std	Z+13, r24	; 0x0d
   14d48:	96 87       	std	Z+14, r25	; 0x0e
   14d4a:	87 01       	movw	r16, r14
   14d4c:	0b 5f       	subi	r16, 0xFB	; 251
   14d4e:	1f 4f       	sbci	r17, 0xFF	; 255
   14d50:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14d54:	85 ff       	sbrs	r24, 5
   14d56:	f3 c0       	rjmp	.+486    	; 0x14f3e <SS80_Command_State+0x46e>
   14d58:	e0 91 72 19 	lds	r30, 0x1972	; 0x801972 <SS80s>
   14d5c:	f0 91 73 19 	lds	r31, 0x1973	; 0x801973 <SS80s+0x1>
   14d60:	83 85       	ldd	r24, Z+11	; 0x0b
   14d62:	94 85       	ldd	r25, Z+12	; 0x0c
   14d64:	a5 85       	ldd	r26, Z+13	; 0x0d
   14d66:	b6 85       	ldd	r27, Z+14	; 0x0e
   14d68:	ed b7       	in	r30, 0x3d	; 61
   14d6a:	fe b7       	in	r31, 0x3e	; 62
   14d6c:	84 83       	std	Z+4, r24	; 0x04
   14d6e:	95 83       	std	Z+5, r25	; 0x05
   14d70:	a6 83       	std	Z+6, r26	; 0x06
   14d72:	b7 83       	std	Z+7, r27	; 0x07
   14d74:	a1 82       	std	Z+1, r10	; 0x01
   14d76:	b2 82       	std	Z+2, r11	; 0x02
   14d78:	c3 82       	std	Z+3, r12	; 0x03
   14d7a:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   14d7e:	df c0       	rjmp	.+446    	; 0x14f3e <SS80_Command_State+0x46e>
   14d80:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14d84:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   14d88:	24 33       	cpi	r18, 0x34	; 52
   14d8a:	31 05       	cpc	r19, r1
   14d8c:	41 f4       	brne	.+16     	; 0x14d9e <SS80_Command_State+0x2ce>
   14d8e:	85 ff       	sbrs	r24, 5
   14d90:	d6 c0       	rjmp	.+428    	; 0x14f3e <SS80_Command_State+0x46e>
   14d92:	ed b7       	in	r30, 0x3d	; 61
   14d94:	fe b7       	in	r31, 0x3e	; 62
   14d96:	61 82       	std	Z+1, r6	; 0x01
   14d98:	72 82       	std	Z+2, r7	; 0x02
   14d9a:	83 82       	std	Z+3, r8	; 0x03
   14d9c:	2b c0       	rjmp	.+86     	; 0x14df4 <SS80_Command_State+0x324>
   14d9e:	29 33       	cpi	r18, 0x39	; 57
   14da0:	31 05       	cpc	r19, r1
   14da2:	49 f4       	brne	.+18     	; 0x14db6 <SS80_Command_State+0x2e6>
   14da4:	87 01       	movw	r16, r14
   14da6:	0d 5f       	subi	r16, 0xFD	; 253
   14da8:	1f 4f       	sbci	r17, 0xFF	; 255
   14daa:	85 ff       	sbrs	r24, 5
   14dac:	c8 c0       	rjmp	.+400    	; 0x14f3e <SS80_Command_State+0x46e>
   14dae:	2c 89       	ldd	r18, Y+20	; 0x14
   14db0:	3d 89       	ldd	r19, Y+21	; 0x15
   14db2:	4e 89       	ldd	r20, Y+22	; 0x16
   14db4:	1a c0       	rjmp	.+52     	; 0x14dea <SS80_Command_State+0x31a>
   14db6:	2b 33       	cpi	r18, 0x3B	; 59
   14db8:	31 05       	cpc	r19, r1
   14dba:	49 f4       	brne	.+18     	; 0x14dce <SS80_Command_State+0x2fe>
   14dbc:	87 01       	movw	r16, r14
   14dbe:	0e 5f       	subi	r16, 0xFE	; 254
   14dc0:	1f 4f       	sbci	r17, 0xFF	; 255
   14dc2:	85 ff       	sbrs	r24, 5
   14dc4:	bc c0       	rjmp	.+376    	; 0x14f3e <SS80_Command_State+0x46e>
   14dc6:	29 89       	ldd	r18, Y+17	; 0x11
   14dc8:	3a 89       	ldd	r19, Y+18	; 0x12
   14dca:	4b 89       	ldd	r20, Y+19	; 0x13
   14dcc:	0e c0       	rjmp	.+28     	; 0x14dea <SS80_Command_State+0x31a>
   14dce:	28 34       	cpi	r18, 0x48	; 72
   14dd0:	31 05       	cpc	r19, r1
   14dd2:	99 f4       	brne	.+38     	; 0x14dfa <SS80_Command_State+0x32a>
   14dd4:	87 01       	movw	r16, r14
   14dd6:	0e 5f       	subi	r16, 0xFE	; 254
   14dd8:	1f 4f       	sbci	r17, 0xFF	; 255
   14dda:	80 73       	andi	r24, 0x30	; 48
   14ddc:	99 27       	eor	r25, r25
   14dde:	89 2b       	or	r24, r25
   14de0:	09 f4       	brne	.+2      	; 0x14de4 <SS80_Command_State+0x314>
   14de2:	ad c0       	rjmp	.+346    	; 0x14f3e <SS80_Command_State+0x46e>
   14de4:	2e 85       	ldd	r18, Y+14	; 0x0e
   14de6:	3f 85       	ldd	r19, Y+15	; 0x0f
   14de8:	48 89       	ldd	r20, Y+16	; 0x10
   14dea:	ed b7       	in	r30, 0x3d	; 61
   14dec:	fe b7       	in	r31, 0x3e	; 62
   14dee:	21 83       	std	Z+1, r18	; 0x01
   14df0:	32 83       	std	Z+2, r19	; 0x02
   14df2:	43 83       	std	Z+3, r20	; 0x03
   14df4:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   14df8:	a2 c0       	rjmp	.+324    	; 0x14f3e <SS80_Command_State+0x46e>
   14dfa:	24 30       	cpi	r18, 0x04	; 4
   14dfc:	31 05       	cpc	r19, r1
   14dfe:	41 f4       	brne	.+16     	; 0x14e10 <SS80_Command_State+0x340>
   14e00:	80 73       	andi	r24, 0x30	; 48
   14e02:	99 27       	eor	r25, r25
   14e04:	89 2b       	or	r24, r25
   14e06:	09 f4       	brne	.+2      	; 0x14e0a <SS80_Command_State+0x33a>
   14e08:	9c c0       	rjmp	.+312    	; 0x14f42 <SS80_Command_State+0x472>
   14e0a:	8b e2       	ldi	r24, 0x2B	; 43
   14e0c:	92 e2       	ldi	r25, 0x22	; 34
   14e0e:	45 cf       	rjmp	.-374    	; 0x14c9a <SS80_Command_State+0x1ca>
   14e10:	2e 30       	cpi	r18, 0x0E	; 14
   14e12:	31 05       	cpc	r19, r1
   14e14:	29 f4       	brne	.+10     	; 0x14e20 <SS80_Command_State+0x350>
   14e16:	85 ff       	sbrs	r24, 5
   14e18:	94 c0       	rjmp	.+296    	; 0x14f42 <SS80_Command_State+0x472>
   14e1a:	85 e1       	ldi	r24, 0x15	; 21
   14e1c:	92 e2       	ldi	r25, 0x22	; 34
   14e1e:	3d cf       	rjmp	.-390    	; 0x14c9a <SS80_Command_State+0x1ca>
   14e20:	2f 30       	cpi	r18, 0x0F	; 15
   14e22:	31 05       	cpc	r19, r1
   14e24:	29 f4       	brne	.+10     	; 0x14e30 <SS80_Command_State+0x360>
   14e26:	85 ff       	sbrs	r24, 5
   14e28:	8c c0       	rjmp	.+280    	; 0x14f42 <SS80_Command_State+0x472>
   14e2a:	88 ef       	ldi	r24, 0xF8	; 248
   14e2c:	91 e2       	ldi	r25, 0x21	; 33
   14e2e:	35 cf       	rjmp	.-406    	; 0x14c9a <SS80_Command_State+0x1ca>
   14e30:	21 33       	cpi	r18, 0x31	; 49
   14e32:	31 05       	cpc	r19, r1
   14e34:	59 f4       	brne	.+22     	; 0x14e4c <SS80_Command_State+0x37c>
   14e36:	87 01       	movw	r16, r14
   14e38:	0d 5f       	subi	r16, 0xFD	; 253
   14e3a:	1f 4f       	sbci	r17, 0xFF	; 255
   14e3c:	80 73       	andi	r24, 0x30	; 48
   14e3e:	99 27       	eor	r25, r25
   14e40:	89 2b       	or	r24, r25
   14e42:	09 f4       	brne	.+2      	; 0x14e46 <SS80_Command_State+0x376>
   14e44:	7e c0       	rjmp	.+252    	; 0x14f42 <SS80_Command_State+0x472>
   14e46:	8c ed       	ldi	r24, 0xDC	; 220
   14e48:	91 e2       	ldi	r25, 0x21	; 33
   14e4a:	27 cf       	rjmp	.-434    	; 0x14c9a <SS80_Command_State+0x1ca>
   14e4c:	25 33       	cpi	r18, 0x35	; 53
   14e4e:	31 05       	cpc	r19, r1
   14e50:	69 f4       	brne	.+26     	; 0x14e6c <SS80_Command_State+0x39c>
   14e52:	e0 91 72 19 	lds	r30, 0x1972	; 0x801972 <SS80s>
   14e56:	f0 91 73 19 	lds	r31, 0x1973	; 0x801973 <SS80s+0x1>
   14e5a:	24 e0       	ldi	r18, 0x04	; 4
   14e5c:	30 e0       	ldi	r19, 0x00	; 0
   14e5e:	31 83       	std	Z+1, r19	; 0x01
   14e60:	20 83       	st	Z, r18
   14e62:	85 ff       	sbrs	r24, 5
   14e64:	6e c0       	rjmp	.+220    	; 0x14f42 <SS80_Command_State+0x472>
   14e66:	8b ec       	ldi	r24, 0xCB	; 203
   14e68:	91 e2       	ldi	r25, 0x21	; 33
   14e6a:	17 cf       	rjmp	.-466    	; 0x14c9a <SS80_Command_State+0x1ca>
   14e6c:	27 33       	cpi	r18, 0x37	; 55
   14e6e:	31 05       	cpc	r19, r1
   14e70:	59 f4       	brne	.+22     	; 0x14e88 <SS80_Command_State+0x3b8>
   14e72:	87 01       	movw	r16, r14
   14e74:	0d 5f       	subi	r16, 0xFD	; 253
   14e76:	1f 4f       	sbci	r17, 0xFF	; 255
   14e78:	80 73       	andi	r24, 0x30	; 48
   14e7a:	99 27       	eor	r25, r25
   14e7c:	89 2b       	or	r24, r25
   14e7e:	09 f4       	brne	.+2      	; 0x14e82 <SS80_Command_State+0x3b2>
   14e80:	60 c0       	rjmp	.+192    	; 0x14f42 <SS80_Command_State+0x472>
   14e82:	8d ea       	ldi	r24, 0xAD	; 173
   14e84:	91 e2       	ldi	r25, 0x21	; 33
   14e86:	09 cf       	rjmp	.-494    	; 0x14c9a <SS80_Command_State+0x1ca>
   14e88:	2e 33       	cpi	r18, 0x3E	; 62
   14e8a:	31 05       	cpc	r19, r1
   14e8c:	c1 f4       	brne	.+48     	; 0x14ebe <SS80_Command_State+0x3ee>
   14e8e:	80 73       	andi	r24, 0x30	; 48
   14e90:	99 27       	eor	r25, r25
   14e92:	89 2b       	or	r24, r25
   14e94:	81 f0       	breq	.+32     	; 0x14eb6 <SS80_Command_State+0x3e6>
   14e96:	8e e8       	ldi	r24, 0x8E	; 142
   14e98:	91 e2       	ldi	r25, 0x21	; 33
   14e9a:	a0 e0       	ldi	r26, 0x00	; 0
   14e9c:	ed b7       	in	r30, 0x3d	; 61
   14e9e:	fe b7       	in	r31, 0x3e	; 62
   14ea0:	81 83       	std	Z+1, r24	; 0x01
   14ea2:	92 83       	std	Z+2, r25	; 0x02
   14ea4:	a3 83       	std	Z+3, r26	; 0x03
   14ea6:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   14eaa:	69 e7       	ldi	r22, 0x79	; 121
   14eac:	70 e1       	ldi	r23, 0x10	; 16
   14eae:	c8 01       	movw	r24, r16
   14eb0:	8a 50       	subi	r24, 0x0A	; 10
   14eb2:	93 4e       	sbci	r25, 0xE3	; 227
   14eb4:	69 dc       	rcall	.-1838   	; 0x14788 <SS80_display_extended_status>
   14eb6:	87 01       	movw	r16, r14
   14eb8:	07 5f       	subi	r16, 0xF7	; 247
   14eba:	1f 4f       	sbci	r17, 0xFF	; 255
   14ebc:	42 c0       	rjmp	.+132    	; 0x14f42 <SS80_Command_State+0x472>
   14ebe:	2c 34       	cpi	r18, 0x4C	; 76
   14ec0:	31 05       	cpc	r19, r1
   14ec2:	39 f4       	brne	.+14     	; 0x14ed2 <SS80_Command_State+0x402>
   14ec4:	80 73       	andi	r24, 0x30	; 48
   14ec6:	99 27       	eor	r25, r25
   14ec8:	89 2b       	or	r24, r25
   14eca:	d9 f1       	breq	.+118    	; 0x14f42 <SS80_Command_State+0x472>
   14ecc:	83 e7       	ldi	r24, 0x73	; 115
   14ece:	91 e2       	ldi	r25, 0x21	; 33
   14ed0:	e4 ce       	rjmp	.-568    	; 0x14c9a <SS80_Command_State+0x1ca>
   14ed2:	2d 34       	cpi	r18, 0x4D	; 77
   14ed4:	31 05       	cpc	r19, r1
   14ed6:	39 f4       	brne	.+14     	; 0x14ee6 <SS80_Command_State+0x416>
   14ed8:	80 73       	andi	r24, 0x30	; 48
   14eda:	99 27       	eor	r25, r25
   14edc:	89 2b       	or	r24, r25
   14ede:	89 f1       	breq	.+98     	; 0x14f42 <SS80_Command_State+0x472>
   14ee0:	8a e5       	ldi	r24, 0x5A	; 90
   14ee2:	91 e2       	ldi	r25, 0x21	; 33
   14ee4:	da ce       	rjmp	.-588    	; 0x14c9a <SS80_Command_State+0x1ca>
   14ee6:	2d 30       	cpi	r18, 0x0D	; 13
   14ee8:	31 05       	cpc	r19, r1
   14eea:	69 f4       	brne	.+26     	; 0x14f06 <SS80_Command_State+0x436>
   14eec:	e0 91 72 19 	lds	r30, 0x1972	; 0x801972 <SS80s>
   14ef0:	f0 91 73 19 	lds	r31, 0x1973	; 0x801973 <SS80s+0x1>
   14ef4:	23 e0       	ldi	r18, 0x03	; 3
   14ef6:	30 e0       	ldi	r19, 0x00	; 0
   14ef8:	31 83       	std	Z+1, r19	; 0x01
   14efa:	20 83       	st	Z, r18
   14efc:	85 ff       	sbrs	r24, 5
   14efe:	21 c0       	rjmp	.+66     	; 0x14f42 <SS80_Command_State+0x472>
   14f00:	83 e4       	ldi	r24, 0x43	; 67
   14f02:	91 e2       	ldi	r25, 0x21	; 33
   14f04:	ca ce       	rjmp	.-620    	; 0x14c9a <SS80_Command_State+0x1ca>
   14f06:	23 33       	cpi	r18, 0x33	; 51
   14f08:	31 05       	cpc	r19, r1
   14f0a:	51 f4       	brne	.+20     	; 0x14f20 <SS80_Command_State+0x450>
   14f0c:	87 01       	movw	r16, r14
   14f0e:	0c 5f       	subi	r16, 0xFC	; 252
   14f10:	1f 4f       	sbci	r17, 0xFF	; 255
   14f12:	80 73       	andi	r24, 0x30	; 48
   14f14:	99 27       	eor	r25, r25
   14f16:	89 2b       	or	r24, r25
   14f18:	a1 f0       	breq	.+40     	; 0x14f42 <SS80_Command_State+0x472>
   14f1a:	80 e2       	ldi	r24, 0x20	; 32
   14f1c:	91 e2       	ldi	r25, 0x21	; 33
   14f1e:	bd ce       	rjmp	.-646    	; 0x14c9a <SS80_Command_State+0x1ca>
   14f20:	80 ff       	sbrs	r24, 0
   14f22:	28 c0       	rjmp	.+80     	; 0x14f74 <SS80_Command_State+0x4a4>
   14f24:	ed b7       	in	r30, 0x3d	; 61
   14f26:	fe b7       	in	r31, 0x3e	; 62
   14f28:	35 83       	std	Z+5, r19	; 0x05
   14f2a:	24 83       	std	Z+4, r18	; 0x04
   14f2c:	80 e0       	ldi	r24, 0x00	; 0
   14f2e:	91 e2       	ldi	r25, 0x21	; 33
   14f30:	a0 e0       	ldi	r26, 0x00	; 0
   14f32:	81 83       	std	Z+1, r24	; 0x01
   14f34:	92 83       	std	Z+2, r25	; 0x02
   14f36:	a3 83       	std	Z+3, r26	; 0x03
   14f38:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   14f3c:	02 c0       	rjmp	.+4      	; 0x14f42 <SS80_Command_State+0x472>
   14f3e:	78 01       	movw	r14, r16
   14f40:	43 ce       	rjmp	.-890    	; 0x14bc8 <SS80_Command_State+0xf8>
   14f42:	8a 85       	ldd	r24, Y+10	; 0x0a
   14f44:	9b 85       	ldd	r25, Y+11	; 0x0b
   14f46:	08 17       	cp	r16, r24
   14f48:	19 07       	cpc	r17, r25
   14f4a:	a1 f0       	breq	.+40     	; 0x14f74 <SS80_Command_State+0x4a4>
   14f4c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14f50:	80 ff       	sbrs	r24, 0
   14f52:	10 c0       	rjmp	.+32     	; 0x14f74 <SS80_Command_State+0x4a4>
   14f54:	2a 85       	ldd	r18, Y+10	; 0x0a
   14f56:	3b 85       	ldd	r19, Y+11	; 0x0b
   14f58:	ed b7       	in	r30, 0x3d	; 61
   14f5a:	fe b7       	in	r31, 0x3e	; 62
   14f5c:	37 83       	std	Z+7, r19	; 0x07
   14f5e:	26 83       	std	Z+6, r18	; 0x06
   14f60:	15 83       	std	Z+5, r17	; 0x05
   14f62:	04 83       	std	Z+4, r16	; 0x04
   14f64:	88 ec       	ldi	r24, 0xC8	; 200
   14f66:	90 e2       	ldi	r25, 0x20	; 32
   14f68:	a0 e0       	ldi	r26, 0x00	; 0
   14f6a:	81 83       	std	Z+1, r24	; 0x01
   14f6c:	92 83       	std	Z+2, r25	; 0x02
   14f6e:	a3 83       	std	Z+3, r26	; 0x03
   14f70:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   14f74:	e0 91 74 19 	lds	r30, 0x1974	; 0x801974 <SS80p>
   14f78:	f0 91 75 19 	lds	r31, 0x1975	; 0x801975 <SS80p+0x1>
   14f7c:	81 81       	ldd	r24, Z+1	; 0x01
   14f7e:	90 e0       	ldi	r25, 0x00	; 0
   14f80:	0e 94 8d 84 	call	0x1091a	; 0x1091a <gpib_enable_PPR>
   14f84:	88 85       	ldd	r24, Y+8	; 0x08
   14f86:	99 85       	ldd	r25, Y+9	; 0x09
   14f88:	88 27       	eor	r24, r24
   14f8a:	90 7d       	andi	r25, 0xD0	; 208
   14f8c:	02 c0       	rjmp	.+4      	; 0x14f92 <SS80_Command_State+0x4c2>
   14f8e:	80 e0       	ldi	r24, 0x00	; 0
   14f90:	90 e0       	ldi	r25, 0x00	; 0
   14f92:	66 96       	adiw	r28, 0x16	; 22
   14f94:	0f b6       	in	r0, 0x3f	; 63
   14f96:	f8 94       	cli
   14f98:	de bf       	out	0x3e, r29	; 62
   14f9a:	0f be       	out	0x3f, r0	; 63
   14f9c:	cd bf       	out	0x3d, r28	; 61
   14f9e:	df 91       	pop	r29
   14fa0:	cf 91       	pop	r28
   14fa2:	1f 91       	pop	r17
   14fa4:	0f 91       	pop	r16
   14fa6:	ff 90       	pop	r15
   14fa8:	ef 90       	pop	r14
   14faa:	cf 90       	pop	r12
   14fac:	bf 90       	pop	r11
   14fae:	af 90       	pop	r10
   14fb0:	8f 90       	pop	r8
   14fb2:	7f 90       	pop	r7
   14fb4:	6f 90       	pop	r6
   14fb6:	4f 90       	pop	r4
   14fb8:	3f 90       	pop	r3
   14fba:	2f 90       	pop	r2
   14fbc:	08 95       	ret

00014fbe <SS80_cmd_seek>:
   14fbe:	a7 e0       	ldi	r26, 0x07	; 7
   14fc0:	b0 e0       	ldi	r27, 0x00	; 0
   14fc2:	e5 ee       	ldi	r30, 0xE5	; 229
   14fc4:	f7 ea       	ldi	r31, 0xA7	; 167
   14fc6:	0c 94 0b e3 	jmp	0x1c616	; 0x1c616 <__prologue_saves__+0x4>
   14fca:	c0 91 72 19 	lds	r28, 0x1972	; 0x801972 <SS80s>
   14fce:	d0 91 73 19 	lds	r29, 0x1973	; 0x801973 <SS80s+0x1>
   14fd2:	8f 80       	ldd	r8, Y+7	; 0x07
   14fd4:	98 84       	ldd	r9, Y+8	; 0x08
   14fd6:	a9 84       	ldd	r10, Y+9	; 0x09
   14fd8:	ba 84       	ldd	r11, Y+10	; 0x0a
   14fda:	00 91 74 19 	lds	r16, 0x1974	; 0x801974 <SS80p>
   14fde:	10 91 75 19 	lds	r17, 0x1975	; 0x801975 <SS80p+0x1>
   14fe2:	f8 01       	movw	r30, r16
   14fe4:	c0 88       	ldd	r12, Z+16	; 0x10
   14fe6:	d1 88       	ldd	r13, Z+17	; 0x11
   14fe8:	e1 2c       	mov	r14, r1
   14fea:	f1 2c       	mov	r15, r1
   14fec:	6b 85       	ldd	r22, Y+11	; 0x0b
   14fee:	7c 85       	ldd	r23, Y+12	; 0x0c
   14ff0:	8d 85       	ldd	r24, Y+13	; 0x0d
   14ff2:	9e 85       	ldd	r25, Y+14	; 0x0e
   14ff4:	a7 01       	movw	r20, r14
   14ff6:	96 01       	movw	r18, r12
   14ff8:	0e 94 9c e2 	call	0x1c538	; 0x1c538 <__udivmodsi4>
   14ffc:	da 01       	movw	r26, r20
   14ffe:	c9 01       	movw	r24, r18
   15000:	88 0d       	add	r24, r8
   15002:	99 1d       	adc	r25, r9
   15004:	aa 1d       	adc	r26, r10
   15006:	bb 1d       	adc	r27, r11
   15008:	f8 01       	movw	r30, r16
   1500a:	46 a0       	ldd	r4, Z+38	; 0x26
   1500c:	57 a0       	ldd	r5, Z+39	; 0x27
   1500e:	60 a4       	ldd	r6, Z+40	; 0x28
   15010:	71 a4       	ldd	r7, Z+41	; 0x29
   15012:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   15016:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1501a:	48 16       	cp	r4, r24
   1501c:	59 06       	cpc	r5, r25
   1501e:	6a 06       	cpc	r6, r26
   15020:	7b 06       	cpc	r7, r27
   15022:	f0 f4       	brcc	.+60     	; 0x15060 <SS80_cmd_seek+0xa2>
   15024:	81 e0       	ldi	r24, 0x01	; 1
   15026:	8a 83       	std	Y+2, r24	; 0x02
   15028:	8b 81       	ldd	r24, Y+3	; 0x03
   1502a:	9c 81       	ldd	r25, Y+4	; 0x04
   1502c:	84 60       	ori	r24, 0x04	; 4
   1502e:	9c 83       	std	Y+4, r25	; 0x04
   15030:	8b 83       	std	Y+3, r24	; 0x03
   15032:	40 ff       	sbrs	r20, 0
   15034:	31 c0       	rjmp	.+98     	; 0x15098 <SS80_cmd_seek+0xda>
   15036:	a0 89       	ldd	r26, Z+16	; 0x10
   15038:	b1 89       	ldd	r27, Z+17	; 0x11
   1503a:	a5 01       	movw	r20, r10
   1503c:	94 01       	movw	r18, r8
   1503e:	0e 94 e9 e2 	call	0x1c5d2	; 0x1c5d2 <__muluhisi3>
   15042:	ed b7       	in	r30, 0x3d	; 61
   15044:	fe b7       	in	r31, 0x3e	; 62
   15046:	64 83       	std	Z+4, r22	; 0x04
   15048:	75 83       	std	Z+5, r23	; 0x05
   1504a:	86 83       	std	Z+6, r24	; 0x06
   1504c:	97 83       	std	Z+7, r25	; 0x07
   1504e:	85 e8       	ldi	r24, 0x85	; 133
   15050:	9f e1       	ldi	r25, 0x1F	; 31
   15052:	a0 e0       	ldi	r26, 0x00	; 0
   15054:	81 83       	std	Z+1, r24	; 0x01
   15056:	92 83       	std	Z+2, r25	; 0x02
   15058:	a3 83       	std	Z+3, r26	; 0x03
   1505a:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   1505e:	1c c0       	rjmp	.+56     	; 0x15098 <SS80_cmd_seek+0xda>
   15060:	ca 01       	movw	r24, r20
   15062:	80 72       	andi	r24, 0x20	; 32
   15064:	99 27       	eor	r25, r25
   15066:	45 ff       	sbrs	r20, 5
   15068:	19 c0       	rjmp	.+50     	; 0x1509c <SS80_cmd_seek+0xde>
   1506a:	a5 01       	movw	r20, r10
   1506c:	94 01       	movw	r18, r8
   1506e:	c7 01       	movw	r24, r14
   15070:	b6 01       	movw	r22, r12
   15072:	0e 94 5a e2 	call	0x1c4b4	; 0x1c4b4 <__mulsi3>
   15076:	ed b7       	in	r30, 0x3d	; 61
   15078:	fe b7       	in	r31, 0x3e	; 62
   1507a:	64 83       	std	Z+4, r22	; 0x04
   1507c:	75 83       	std	Z+5, r23	; 0x05
   1507e:	86 83       	std	Z+6, r24	; 0x06
   15080:	97 83       	std	Z+7, r25	; 0x07
   15082:	81 e7       	ldi	r24, 0x71	; 113
   15084:	9f e1       	ldi	r25, 0x1F	; 31
   15086:	a0 e0       	ldi	r26, 0x00	; 0
   15088:	81 83       	std	Z+1, r24	; 0x01
   1508a:	92 83       	std	Z+2, r25	; 0x02
   1508c:	a3 83       	std	Z+3, r26	; 0x03
   1508e:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   15092:	80 e0       	ldi	r24, 0x00	; 0
   15094:	90 e0       	ldi	r25, 0x00	; 0
   15096:	02 c0       	rjmp	.+4      	; 0x1509c <SS80_cmd_seek+0xde>
   15098:	81 e0       	ldi	r24, 0x01	; 1
   1509a:	90 e0       	ldi	r25, 0x00	; 0
   1509c:	cd b7       	in	r28, 0x3d	; 61
   1509e:	de b7       	in	r29, 0x3e	; 62
   150a0:	27 96       	adiw	r28, 0x07	; 7
   150a2:	e0 e1       	ldi	r30, 0x10	; 16
   150a4:	0c 94 27 e3 	jmp	0x1c64e	; 0x1c64e <__epilogue_restores__+0x4>

000150a8 <SS80_locate_and_write>:
   150a8:	a3 e1       	ldi	r26, 0x13	; 19
   150aa:	b0 e0       	ldi	r27, 0x00	; 0
   150ac:	ea e5       	ldi	r30, 0x5A	; 90
   150ae:	f8 ea       	ldi	r31, 0xA8	; 168
   150b0:	0c 94 09 e3 	jmp	0x1c612	; 0x1c612 <__prologue_saves__>
   150b4:	00 91 72 19 	lds	r16, 0x1972	; 0x801972 <SS80s>
   150b8:	10 91 73 19 	lds	r17, 0x1973	; 0x801973 <SS80s+0x1>
   150bc:	80 91 74 19 	lds	r24, 0x1974	; 0x801974 <SS80p>
   150c0:	90 91 75 19 	lds	r25, 0x1975	; 0x801975 <SS80p+0x1>
   150c4:	fc 01       	movw	r30, r24
   150c6:	a0 89       	ldd	r26, Z+16	; 0x10
   150c8:	b1 89       	ldd	r27, Z+17	; 0x11
   150ca:	f8 01       	movw	r30, r16
   150cc:	27 81       	ldd	r18, Z+7	; 0x07
   150ce:	30 85       	ldd	r19, Z+8	; 0x08
   150d0:	41 85       	ldd	r20, Z+9	; 0x09
   150d2:	52 85       	ldd	r21, Z+10	; 0x0a
   150d4:	0e 94 e9 e2 	call	0x1c5d2	; 0x1c5d2 <__muluhisi3>
   150d8:	4b 01       	movw	r8, r22
   150da:	5c 01       	movw	r10, r24
   150dc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   150e0:	85 ff       	sbrs	r24, 5
   150e2:	16 c0       	rjmp	.+44     	; 0x15110 <SS80_locate_and_write+0x68>
   150e4:	83 85       	ldd	r24, Z+11	; 0x0b
   150e6:	94 85       	ldd	r25, Z+12	; 0x0c
   150e8:	a5 85       	ldd	r26, Z+13	; 0x0d
   150ea:	b6 85       	ldd	r27, Z+14	; 0x0e
   150ec:	ed b7       	in	r30, 0x3d	; 61
   150ee:	fe b7       	in	r31, 0x3e	; 62
   150f0:	80 87       	std	Z+8, r24	; 0x08
   150f2:	91 87       	std	Z+9, r25	; 0x09
   150f4:	a2 87       	std	Z+10, r26	; 0x0a
   150f6:	b3 87       	std	Z+11, r27	; 0x0b
   150f8:	84 82       	std	Z+4, r8	; 0x04
   150fa:	95 82       	std	Z+5, r9	; 0x05
   150fc:	a6 82       	std	Z+6, r10	; 0x06
   150fe:	b7 82       	std	Z+7, r11	; 0x07
   15100:	88 e0       	ldi	r24, 0x08	; 8
   15102:	95 e2       	ldi	r25, 0x25	; 37
   15104:	a0 e0       	ldi	r26, 0x00	; 0
   15106:	81 83       	std	Z+1, r24	; 0x01
   15108:	92 83       	std	Z+2, r25	; 0x02
   1510a:	a3 83       	std	Z+3, r26	; 0x03
   1510c:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   15110:	e0 91 72 19 	lds	r30, 0x1972	; 0x801972 <SS80s>
   15114:	f0 91 73 19 	lds	r31, 0x1973	; 0x801973 <SS80s+0x1>
   15118:	12 82       	std	Z+2, r1	; 0x02
   1511a:	54 98       	cbi	0x0a, 4	; 10
   1511c:	4c 99       	sbic	0x09, 4	; 9
   1511e:	03 c0       	rjmp	.+6      	; 0x15126 <SS80_locate_and_write+0x7e>
   15120:	80 e0       	ldi	r24, 0x00	; 0
   15122:	90 e1       	ldi	r25, 0x10	; 16
   15124:	4f c1       	rjmp	.+670    	; 0x153c4 <SS80_locate_and_write+0x31c>
   15126:	4b df       	rcall	.-362    	; 0x14fbe <SS80_cmd_seek>
   15128:	e0 91 72 19 	lds	r30, 0x1972	; 0x801972 <SS80s>
   1512c:	f0 91 73 19 	lds	r31, 0x1973	; 0x801973 <SS80s+0x1>
   15130:	89 2b       	or	r24, r25
   15132:	41 f0       	breq	.+16     	; 0x15144 <SS80_locate_and_write+0x9c>
   15134:	83 81       	ldd	r24, Z+3	; 0x03
   15136:	94 81       	ldd	r25, Z+4	; 0x04
   15138:	82 60       	ori	r24, 0x02	; 2
   1513a:	94 83       	std	Z+4, r25	; 0x04
   1513c:	83 83       	std	Z+3, r24	; 0x03
   1513e:	01 e0       	ldi	r16, 0x01	; 1
   15140:	10 e0       	ldi	r17, 0x00	; 0
   15142:	02 c0       	rjmp	.+4      	; 0x15148 <SS80_locate_and_write+0xa0>
   15144:	00 e0       	ldi	r16, 0x00	; 0
   15146:	10 e0       	ldi	r17, 0x00	; 0
   15148:	23 84       	ldd	r2, Z+11	; 0x0b
   1514a:	34 84       	ldd	r3, Z+12	; 0x0c
   1514c:	1d 86       	std	Y+13, r1	; 0x0d
   1514e:	1c 86       	std	Y+12, r1	; 0x0c
   15150:	41 2c       	mov	r4, r1
   15152:	51 2c       	mov	r5, r1
   15154:	32 01       	movw	r6, r4
   15156:	8b eb       	ldi	r24, 0xBB	; 187
   15158:	94 e2       	ldi	r25, 0x24	; 36
   1515a:	9c 01       	movw	r18, r24
   1515c:	40 e0       	ldi	r20, 0x00	; 0
   1515e:	2e 87       	std	Y+14, r18	; 0x0e
   15160:	3f 87       	std	Y+15, r19	; 0x0f
   15162:	48 8b       	std	Y+16, r20	; 0x10
   15164:	81 ee       	ldi	r24, 0xE1	; 225
   15166:	94 e2       	ldi	r25, 0x24	; 36
   15168:	9c 01       	movw	r18, r24
   1516a:	40 e0       	ldi	r20, 0x00	; 0
   1516c:	29 8b       	std	Y+17, r18	; 0x11
   1516e:	3a 8b       	std	Y+18, r19	; 0x12
   15170:	4b 8b       	std	Y+19, r20	; 0x13
   15172:	12 14       	cp	r1, r2
   15174:	13 04       	cpc	r1, r3
   15176:	0c f0       	brlt	.+2      	; 0x1517a <SS80_locate_and_write+0xd2>
   15178:	f5 c0       	rjmp	.+490    	; 0x15364 <SS80_locate_and_write+0x2bc>
   1517a:	54 98       	cbi	0x0a, 4	; 10
   1517c:	4c 9b       	sbis	0x09, 4	; 9
   1517e:	d0 cf       	rjmp	.-96     	; 0x15120 <SS80_locate_and_write+0x78>
   15180:	71 01       	movw	r14, r2
   15182:	31 e0       	ldi	r19, 0x01	; 1
   15184:	23 16       	cp	r2, r19
   15186:	33 06       	cpc	r3, r19
   15188:	1c f0       	brlt	.+6      	; 0x15190 <SS80_locate_and_write+0xe8>
   1518a:	e1 2c       	mov	r14, r1
   1518c:	ff 24       	eor	r15, r15
   1518e:	f3 94       	inc	r15
   15190:	e6 ef       	ldi	r30, 0xF6	; 246
   15192:	fc e1       	ldi	r31, 0x1C	; 28
   15194:	20 e0       	ldi	r18, 0x00	; 0
   15196:	32 e0       	ldi	r19, 0x02	; 2
   15198:	11 92       	st	Z+, r1
   1519a:	21 50       	subi	r18, 0x01	; 1
   1519c:	30 40       	sbci	r19, 0x00	; 0
   1519e:	e1 f7       	brne	.-8      	; 0x15198 <SS80_locate_and_write+0xf0>
   151a0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   151a4:	87 fd       	sbrc	r24, 7
   151a6:	0e 94 b3 83 	call	0x10766	; 0x10766 <gpib_timer_elapsed_begin>
   151aa:	ae 01       	movw	r20, r28
   151ac:	44 5f       	subi	r20, 0xF4	; 244
   151ae:	5f 4f       	sbci	r21, 0xFF	; 255
   151b0:	b7 01       	movw	r22, r14
   151b2:	86 ef       	ldi	r24, 0xF6	; 246
   151b4:	9c e1       	ldi	r25, 0x1C	; 28
   151b6:	0e 94 1b 89 	call	0x11236	; 0x11236 <gpib_read_str>
   151ba:	6c 01       	movw	r12, r24
   151bc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   151c0:	87 ff       	sbrs	r24, 7
   151c2:	04 c0       	rjmp	.+8      	; 0x151cc <SS80_locate_and_write+0x124>
   151c4:	85 e9       	ldi	r24, 0x95	; 149
   151c6:	90 e1       	ldi	r25, 0x10	; 16
   151c8:	0e 94 c5 83 	call	0x1078a	; 0x1078a <gpib_timer_elapsed_end>
   151cc:	ce 14       	cp	r12, r14
   151ce:	df 04       	cpc	r13, r15
   151d0:	39 f1       	breq	.+78     	; 0x15220 <SS80_locate_and_write+0x178>
   151d2:	8c 85       	ldd	r24, Y+12	; 0x0c
   151d4:	9d 85       	ldd	r25, Y+13	; 0x0d
   151d6:	9c 01       	movw	r18, r24
   151d8:	22 27       	eor	r18, r18
   151da:	30 7d       	andi	r19, 0xD0	; 208
   151dc:	23 2b       	or	r18, r19
   151de:	d1 f0       	breq	.+52     	; 0x15214 <SS80_locate_and_write+0x16c>
   151e0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   151e4:	80 ff       	sbrs	r24, 0
   151e6:	0a c0       	rjmp	.+20     	; 0x151fc <SS80_locate_and_write+0x154>
   151e8:	85 ef       	ldi	r24, 0xF5	; 245
   151ea:	94 e2       	ldi	r25, 0x24	; 36
   151ec:	a0 e0       	ldi	r26, 0x00	; 0
   151ee:	ed b7       	in	r30, 0x3d	; 61
   151f0:	fe b7       	in	r31, 0x3e	; 62
   151f2:	81 83       	std	Z+1, r24	; 0x01
   151f4:	92 83       	std	Z+2, r25	; 0x02
   151f6:	a3 83       	std	Z+3, r26	; 0x03
   151f8:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   151fc:	e0 91 72 19 	lds	r30, 0x1972	; 0x801972 <SS80s>
   15200:	f0 91 73 19 	lds	r31, 0x1973	; 0x801973 <SS80s+0x1>
   15204:	83 81       	ldd	r24, Z+3	; 0x03
   15206:	94 81       	ldd	r25, Z+4	; 0x04
   15208:	82 60       	ori	r24, 0x02	; 2
   1520a:	94 83       	std	Z+4, r25	; 0x04
   1520c:	83 83       	std	Z+3, r24	; 0x03
   1520e:	81 e0       	ldi	r24, 0x01	; 1
   15210:	82 83       	std	Z+2, r24	; 0x02
   15212:	99 c0       	rjmp	.+306    	; 0x15346 <SS80_locate_and_write+0x29e>
   15214:	c1 14       	cp	r12, r1
   15216:	d1 04       	cpc	r13, r1
   15218:	09 f0       	breq	.+2      	; 0x1521c <SS80_locate_and_write+0x174>
   1521a:	d0 c0       	rjmp	.+416    	; 0x153bc <SS80_locate_and_write+0x314>
   1521c:	90 fd       	sbrc	r25, 0
   1521e:	93 c0       	rjmp	.+294    	; 0x15346 <SS80_locate_and_write+0x29e>
   15220:	01 15       	cp	r16, r1
   15222:	11 05       	cpc	r17, r1
   15224:	09 f0       	breq	.+2      	; 0x15228 <SS80_locate_and_write+0x180>
   15226:	84 c0       	rjmp	.+264    	; 0x15330 <SS80_locate_and_write+0x288>
   15228:	c1 14       	cp	r12, r1
   1522a:	d1 04       	cpc	r13, r1
   1522c:	09 f4       	brne	.+2      	; 0x15230 <SS80_locate_and_write+0x188>
   1522e:	82 c0       	rjmp	.+260    	; 0x15334 <SS80_locate_and_write+0x28c>
   15230:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15234:	86 fd       	sbrc	r24, 6
   15236:	0e 94 b3 83 	call	0x10766	; 0x10766 <gpib_timer_elapsed_begin>
   1523a:	e0 90 72 19 	lds	r14, 0x1972	; 0x801972 <SS80s>
   1523e:	f0 90 73 19 	lds	r15, 0x1973	; 0x801973 <SS80s+0x1>
   15242:	f3 e0       	ldi	r31, 0x03	; 3
   15244:	ef 0e       	add	r14, r31
   15246:	f1 1c       	adc	r15, r1
   15248:	e0 91 74 19 	lds	r30, 0x1974	; 0x801974 <SS80p>
   1524c:	f0 91 75 19 	lds	r31, 0x1975	; 0x801975 <SS80p+0x1>
   15250:	86 01       	movw	r16, r12
   15252:	26 ef       	ldi	r18, 0xF6	; 246
   15254:	3c e1       	ldi	r19, 0x1C	; 28
   15256:	b5 01       	movw	r22, r10
   15258:	a4 01       	movw	r20, r8
   1525a:	82 81       	ldd	r24, Z+2	; 0x02
   1525c:	93 81       	ldd	r25, Z+3	; 0x03
   1525e:	0e 94 5c 83 	call	0x106b8	; 0x106b8 <dbf_open_write>
   15262:	7c 01       	movw	r14, r24
   15264:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15268:	86 ff       	sbrs	r24, 6
   1526a:	04 c0       	rjmp	.+8      	; 0x15274 <SS80_locate_and_write+0x1cc>
   1526c:	80 ea       	ldi	r24, 0xA0	; 160
   1526e:	90 e1       	ldi	r25, 0x10	; 16
   15270:	0e 94 c5 83 	call	0x1078a	; 0x1078a <gpib_timer_elapsed_end>
   15274:	ce 14       	cp	r12, r14
   15276:	df 04       	cpc	r13, r15
   15278:	39 f1       	breq	.+78     	; 0x152c8 <SS80_locate_and_write+0x220>
   1527a:	e0 91 72 19 	lds	r30, 0x1972	; 0x801972 <SS80s>
   1527e:	f0 91 73 19 	lds	r31, 0x1973	; 0x801973 <SS80s+0x1>
   15282:	83 81       	ldd	r24, Z+3	; 0x03
   15284:	94 81       	ldd	r25, Z+4	; 0x04
   15286:	82 60       	ori	r24, 0x02	; 2
   15288:	94 83       	std	Z+4, r25	; 0x04
   1528a:	83 83       	std	Z+3, r24	; 0x03
   1528c:	0e 94 32 6e 	call	0xdc64	; 0xdc64 <mmc_wp_status>
   15290:	e0 91 72 19 	lds	r30, 0x1972	; 0x801972 <SS80s>
   15294:	f0 91 73 19 	lds	r31, 0x1973	; 0x801973 <SS80s+0x1>
   15298:	89 2b       	or	r24, r25
   1529a:	29 f0       	breq	.+10     	; 0x152a6 <SS80_locate_and_write+0x1fe>
   1529c:	83 81       	ldd	r24, Z+3	; 0x03
   1529e:	94 81       	ldd	r25, Z+4	; 0x04
   152a0:	88 60       	ori	r24, 0x08	; 8
   152a2:	94 83       	std	Z+4, r25	; 0x04
   152a4:	83 83       	std	Z+3, r24	; 0x03
   152a6:	21 e0       	ldi	r18, 0x01	; 1
   152a8:	22 83       	std	Z+2, r18	; 0x02
   152aa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   152ae:	80 ff       	sbrs	r24, 0
   152b0:	27 c0       	rjmp	.+78     	; 0x15300 <SS80_locate_and_write+0x258>
   152b2:	89 89       	ldd	r24, Y+17	; 0x11
   152b4:	9a 89       	ldd	r25, Y+18	; 0x12
   152b6:	ab 89       	ldd	r26, Y+19	; 0x13
   152b8:	ed b7       	in	r30, 0x3d	; 61
   152ba:	fe b7       	in	r31, 0x3e	; 62
   152bc:	81 83       	std	Z+1, r24	; 0x01
   152be:	92 83       	std	Z+2, r25	; 0x02
   152c0:	a3 83       	std	Z+3, r26	; 0x03
   152c2:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   152c6:	1c c0       	rjmp	.+56     	; 0x15300 <SS80_locate_and_write+0x258>
   152c8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   152cc:	85 ff       	sbrs	r24, 5
   152ce:	0c c0       	rjmp	.+24     	; 0x152e8 <SS80_locate_and_write+0x240>
   152d0:	ed b7       	in	r30, 0x3d	; 61
   152d2:	fe b7       	in	r31, 0x3e	; 62
   152d4:	d5 82       	std	Z+5, r13	; 0x05
   152d6:	c4 82       	std	Z+4, r12	; 0x04
   152d8:	2e 85       	ldd	r18, Y+14	; 0x0e
   152da:	3f 85       	ldd	r19, Y+15	; 0x0f
   152dc:	48 89       	ldd	r20, Y+16	; 0x10
   152de:	21 83       	std	Z+1, r18	; 0x01
   152e0:	32 83       	std	Z+2, r19	; 0x02
   152e2:	43 83       	std	Z+3, r20	; 0x03
   152e4:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   152e8:	c6 01       	movw	r24, r12
   152ea:	0d 2c       	mov	r0, r13
   152ec:	00 0c       	add	r0, r0
   152ee:	aa 0b       	sbc	r26, r26
   152f0:	bb 0b       	sbc	r27, r27
   152f2:	88 0e       	add	r8, r24
   152f4:	99 1e       	adc	r9, r25
   152f6:	aa 1e       	adc	r10, r26
   152f8:	bb 1e       	adc	r11, r27
   152fa:	00 e0       	ldi	r16, 0x00	; 0
   152fc:	10 e0       	ldi	r17, 0x00	; 0
   152fe:	05 c0       	rjmp	.+10     	; 0x1530a <SS80_locate_and_write+0x262>
   15300:	ec 14       	cp	r14, r12
   15302:	fd 04       	cpc	r15, r13
   15304:	64 f0       	brlt	.+24     	; 0x1531e <SS80_locate_and_write+0x276>
   15306:	01 e0       	ldi	r16, 0x01	; 1
   15308:	10 e0       	ldi	r17, 0x00	; 0
   1530a:	c7 01       	movw	r24, r14
   1530c:	0f 2c       	mov	r0, r15
   1530e:	00 0c       	add	r0, r0
   15310:	aa 0b       	sbc	r26, r26
   15312:	bb 0b       	sbc	r27, r27
   15314:	48 0e       	add	r4, r24
   15316:	59 1e       	adc	r5, r25
   15318:	6a 1e       	adc	r6, r26
   1531a:	7b 1e       	adc	r7, r27
   1531c:	0b c0       	rjmp	.+22     	; 0x15334 <SS80_locate_and_write+0x28c>
   1531e:	c6 01       	movw	r24, r12
   15320:	0d 2c       	mov	r0, r13
   15322:	00 0c       	add	r0, r0
   15324:	aa 0b       	sbc	r26, r26
   15326:	bb 0b       	sbc	r27, r27
   15328:	48 0e       	add	r4, r24
   1532a:	59 1e       	adc	r5, r25
   1532c:	6a 1e       	adc	r6, r26
   1532e:	7b 1e       	adc	r7, r27
   15330:	01 e0       	ldi	r16, 0x01	; 1
   15332:	10 e0       	ldi	r17, 0x00	; 0
   15334:	2c 18       	sub	r2, r12
   15336:	3d 08       	sbc	r3, r13
   15338:	8c 85       	ldd	r24, Y+12	; 0x0c
   1533a:	9d 85       	ldd	r25, Y+13	; 0x0d
   1533c:	90 ff       	sbrs	r25, 0
   1533e:	19 cf       	rjmp	.-462    	; 0x15172 <SS80_locate_and_write+0xca>
   15340:	12 14       	cp	r1, r2
   15342:	13 04       	cpc	r1, r3
   15344:	7c f4       	brge	.+30     	; 0x15364 <SS80_locate_and_write+0x2bc>
   15346:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1534a:	80 ff       	sbrs	r24, 0
   1534c:	1d c0       	rjmp	.+58     	; 0x15388 <SS80_locate_and_write+0x2e0>
   1534e:	83 e9       	ldi	r24, 0x93	; 147
   15350:	94 e2       	ldi	r25, 0x24	; 36
   15352:	a0 e0       	ldi	r26, 0x00	; 0
   15354:	ed b7       	in	r30, 0x3d	; 61
   15356:	fe b7       	in	r31, 0x3e	; 62
   15358:	81 83       	std	Z+1, r24	; 0x01
   1535a:	92 83       	std	Z+2, r25	; 0x02
   1535c:	a3 83       	std	Z+3, r26	; 0x03
   1535e:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   15362:	12 c0       	rjmp	.+36     	; 0x15388 <SS80_locate_and_write+0x2e0>
   15364:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15368:	85 ff       	sbrs	r24, 5
   1536a:	0e c0       	rjmp	.+28     	; 0x15388 <SS80_locate_and_write+0x2e0>
   1536c:	ed b7       	in	r30, 0x3d	; 61
   1536e:	fe b7       	in	r31, 0x3e	; 62
   15370:	44 82       	std	Z+4, r4	; 0x04
   15372:	55 82       	std	Z+5, r5	; 0x05
   15374:	66 82       	std	Z+6, r6	; 0x06
   15376:	77 82       	std	Z+7, r7	; 0x07
   15378:	88 e6       	ldi	r24, 0x68	; 104
   1537a:	94 e2       	ldi	r25, 0x24	; 36
   1537c:	a0 e0       	ldi	r26, 0x00	; 0
   1537e:	81 83       	std	Z+1, r24	; 0x01
   15380:	92 83       	std	Z+2, r25	; 0x02
   15382:	a3 83       	std	Z+3, r26	; 0x03
   15384:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   15388:	00 91 72 19 	lds	r16, 0x1972	; 0x801972 <SS80s>
   1538c:	10 91 73 19 	lds	r17, 0x1973	; 0x801973 <SS80s+0x1>
   15390:	e0 91 74 19 	lds	r30, 0x1974	; 0x801974 <SS80p>
   15394:	f0 91 75 19 	lds	r31, 0x1975	; 0x801975 <SS80p+0x1>
   15398:	20 89       	ldd	r18, Z+16	; 0x10
   1539a:	31 89       	ldd	r19, Z+17	; 0x11
   1539c:	40 e0       	ldi	r20, 0x00	; 0
   1539e:	50 e0       	ldi	r21, 0x00	; 0
   153a0:	c5 01       	movw	r24, r10
   153a2:	b4 01       	movw	r22, r8
   153a4:	0e 94 9c e2 	call	0x1c538	; 0x1c538 <__udivmodsi4>
   153a8:	f8 01       	movw	r30, r16
   153aa:	27 83       	std	Z+7, r18	; 0x07
   153ac:	30 87       	std	Z+8, r19	; 0x08
   153ae:	41 87       	std	Z+9, r20	; 0x09
   153b0:	52 87       	std	Z+10, r21	; 0x0a
   153b2:	8c 85       	ldd	r24, Y+12	; 0x0c
   153b4:	9d 85       	ldd	r25, Y+13	; 0x0d
   153b6:	88 27       	eor	r24, r24
   153b8:	90 7d       	andi	r25, 0xD0	; 208
   153ba:	04 c0       	rjmp	.+8      	; 0x153c4 <SS80_locate_and_write+0x31c>
   153bc:	01 2b       	or	r16, r17
   153be:	09 f4       	brne	.+2      	; 0x153c2 <SS80_locate_and_write+0x31a>
   153c0:	37 cf       	rjmp	.-402    	; 0x15230 <SS80_locate_and_write+0x188>
   153c2:	b6 cf       	rjmp	.-148    	; 0x15330 <SS80_locate_and_write+0x288>
   153c4:	63 96       	adiw	r28, 0x13	; 19
   153c6:	e2 e1       	ldi	r30, 0x12	; 18
   153c8:	0c 94 25 e3 	jmp	0x1c64a	; 0x1c64a <__epilogue_restores__>

000153cc <SS80_Report>:
   153cc:	a8 e0       	ldi	r26, 0x08	; 8
   153ce:	b0 e0       	ldi	r27, 0x00	; 0
   153d0:	ec ee       	ldi	r30, 0xEC	; 236
   153d2:	f9 ea       	ldi	r31, 0xA9	; 169
   153d4:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__prologue_saves__+0x20>
   153d8:	e0 91 72 19 	lds	r30, 0x1972	; 0x801972 <SS80s>
   153dc:	f0 91 73 19 	lds	r31, 0x1973	; 0x801973 <SS80s+0x1>
   153e0:	82 81       	ldd	r24, Z+2	; 0x02
   153e2:	88 87       	std	Y+8, r24	; 0x08
   153e4:	80 e0       	ldi	r24, 0x00	; 0
   153e6:	91 e0       	ldi	r25, 0x01	; 1
   153e8:	9f 83       	std	Y+7, r25	; 0x07
   153ea:	8e 83       	std	Y+6, r24	; 0x06
   153ec:	ae 01       	movw	r20, r28
   153ee:	4a 5f       	subi	r20, 0xFA	; 250
   153f0:	5f 4f       	sbci	r21, 0xFF	; 255
   153f2:	61 e0       	ldi	r22, 0x01	; 1
   153f4:	70 e0       	ldi	r23, 0x00	; 0
   153f6:	ce 01       	movw	r24, r28
   153f8:	08 96       	adiw	r24, 0x08	; 8
   153fa:	0e 94 bd 89 	call	0x1137a	; 0x1137a <gpib_write_str>
   153fe:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   15402:	01 97       	sbiw	r24, 0x01	; 1
   15404:	89 f0       	breq	.+34     	; 0x15428 <SS80_Report+0x5c>
   15406:	20 ff       	sbrs	r18, 0
   15408:	0a c0       	rjmp	.+20     	; 0x1541e <SS80_Report+0x52>
   1540a:	87 e5       	ldi	r24, 0x57	; 87
   1540c:	9f e1       	ldi	r25, 0x1F	; 31
   1540e:	a0 e0       	ldi	r26, 0x00	; 0
   15410:	ed b7       	in	r30, 0x3d	; 61
   15412:	fe b7       	in	r31, 0x3e	; 62
   15414:	81 83       	std	Z+1, r24	; 0x01
   15416:	92 83       	std	Z+2, r25	; 0x02
   15418:	a3 83       	std	Z+3, r26	; 0x03
   1541a:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   1541e:	8e 81       	ldd	r24, Y+6	; 0x06
   15420:	9f 81       	ldd	r25, Y+7	; 0x07
   15422:	88 27       	eor	r24, r24
   15424:	90 7d       	andi	r25, 0xD0	; 208
   15426:	1b c0       	rjmp	.+54     	; 0x1545e <SS80_Report+0x92>
   15428:	25 ff       	sbrs	r18, 5
   1542a:	12 c0       	rjmp	.+36     	; 0x15450 <SS80_Report+0x84>
   1542c:	e0 91 72 19 	lds	r30, 0x1972	; 0x801972 <SS80s>
   15430:	f0 91 73 19 	lds	r31, 0x1973	; 0x801973 <SS80s+0x1>
   15434:	82 81       	ldd	r24, Z+2	; 0x02
   15436:	90 e0       	ldi	r25, 0x00	; 0
   15438:	ed b7       	in	r30, 0x3d	; 61
   1543a:	fe b7       	in	r31, 0x3e	; 62
   1543c:	95 83       	std	Z+5, r25	; 0x05
   1543e:	84 83       	std	Z+4, r24	; 0x04
   15440:	84 e4       	ldi	r24, 0x44	; 68
   15442:	9f e1       	ldi	r25, 0x1F	; 31
   15444:	a0 e0       	ldi	r26, 0x00	; 0
   15446:	81 83       	std	Z+1, r24	; 0x01
   15448:	92 83       	std	Z+2, r25	; 0x02
   1544a:	a3 83       	std	Z+3, r26	; 0x03
   1544c:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   15450:	e0 91 72 19 	lds	r30, 0x1972	; 0x801972 <SS80s>
   15454:	f0 91 73 19 	lds	r31, 0x1973	; 0x801973 <SS80s+0x1>
   15458:	12 82       	std	Z+2, r1	; 0x02
   1545a:	80 e0       	ldi	r24, 0x00	; 0
   1545c:	90 e0       	ldi	r25, 0x00	; 0
   1545e:	28 96       	adiw	r28, 0x08	; 8
   15460:	e2 e0       	ldi	r30, 0x02	; 2
   15462:	0c 94 35 e3 	jmp	0x1c66a	; 0x1c66a <__epilogue_restores__+0x20>

00015466 <Clear_Common>:
   15466:	e0 91 72 19 	lds	r30, 0x1972	; 0x801972 <SS80s>
   1546a:	f0 91 73 19 	lds	r31, 0x1973	; 0x801973 <SS80s+0x1>
   1546e:	25 81       	ldd	r18, Z+5	; 0x05
   15470:	30 e0       	ldi	r19, 0x00	; 0
   15472:	28 17       	cp	r18, r24
   15474:	39 07       	cpc	r19, r25
   15476:	19 f0       	breq	.+6      	; 0x1547e <Clear_Common+0x18>
   15478:	0f 97       	sbiw	r24, 0x0f	; 15
   1547a:	99 f4       	brne	.+38     	; 0x154a2 <Clear_Common+0x3c>
   1547c:	03 c0       	rjmp	.+6      	; 0x15484 <Clear_Common+0x1e>
   1547e:	2f 30       	cpi	r18, 0x0F	; 15
   15480:	31 05       	cpc	r19, r1
   15482:	09 f4       	brne	.+2      	; 0x15486 <Clear_Common+0x20>
   15484:	15 82       	std	Z+5, r1	; 0x05
   15486:	16 82       	std	Z+6, r1	; 0x06
   15488:	17 82       	std	Z+7, r1	; 0x07
   1548a:	10 86       	std	Z+8, r1	; 0x08
   1548c:	11 86       	std	Z+9, r1	; 0x09
   1548e:	12 86       	std	Z+10, r1	; 0x0a
   15490:	13 86       	std	Z+11, r1	; 0x0b
   15492:	14 86       	std	Z+12, r1	; 0x0c
   15494:	15 86       	std	Z+13, r1	; 0x0d
   15496:	16 86       	std	Z+14, r1	; 0x0e
   15498:	11 82       	std	Z+1, r1	; 0x01
   1549a:	10 82       	st	Z, r1
   1549c:	14 82       	std	Z+4, r1	; 0x04
   1549e:	13 82       	std	Z+3, r1	; 0x03
   154a0:	12 82       	std	Z+2, r1	; 0x02
   154a2:	08 95       	ret

000154a4 <SS80_init>:
   154a4:	a5 e0       	ldi	r26, 0x05	; 5
   154a6:	b0 e0       	ldi	r27, 0x00	; 0
   154a8:	e8 e5       	ldi	r30, 0x58	; 88
   154aa:	fa ea       	ldi	r31, 0xAA	; 170
   154ac:	0c 94 13 e3 	jmp	0x1c626	; 0x1c626 <__prologue_saves__+0x14>
   154b0:	09 ed       	ldi	r16, 0xD9	; 217
   154b2:	10 e2       	ldi	r17, 0x20	; 32
   154b4:	cb e0       	ldi	r28, 0x0B	; 11
   154b6:	d0 e0       	ldi	r29, 0x00	; 0
   154b8:	82 e0       	ldi	r24, 0x02	; 2
   154ba:	f8 2e       	mov	r15, r24
   154bc:	81 e1       	ldi	r24, 0x11	; 17
   154be:	96 e2       	ldi	r25, 0x26	; 38
   154c0:	6c 01       	movw	r12, r24
   154c2:	e1 2c       	mov	r14, r1
   154c4:	f8 01       	movw	r30, r16
   154c6:	80 81       	ld	r24, Z
   154c8:	83 30       	cpi	r24, 0x03	; 3
   154ca:	29 f5       	brne	.+74     	; 0x15516 <SS80_init+0x72>
   154cc:	ce 01       	movw	r24, r28
   154ce:	0e 94 cb 95 	call	0x12b96	; 0x12b96 <set_active_device>
   154d2:	89 2b       	or	r24, r25
   154d4:	01 f1       	breq	.+64     	; 0x15516 <SS80_init+0x72>
   154d6:	8f e0       	ldi	r24, 0x0F	; 15
   154d8:	90 e0       	ldi	r25, 0x00	; 0
   154da:	c5 df       	rcall	.-118    	; 0x15466 <Clear_Common>
   154dc:	e0 91 72 19 	lds	r30, 0x1972	; 0x801972 <SS80s>
   154e0:	f0 91 73 19 	lds	r31, 0x1973	; 0x801973 <SS80s+0x1>
   154e4:	f2 82       	std	Z+2, r15	; 0x02
   154e6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   154ea:	85 ff       	sbrs	r24, 5
   154ec:	0c c0       	rjmp	.+24     	; 0x15506 <SS80_init+0x62>
   154ee:	f8 01       	movw	r30, r16
   154f0:	81 81       	ldd	r24, Z+1	; 0x01
   154f2:	90 e0       	ldi	r25, 0x00	; 0
   154f4:	ed b7       	in	r30, 0x3d	; 61
   154f6:	fe b7       	in	r31, 0x3e	; 62
   154f8:	95 83       	std	Z+5, r25	; 0x05
   154fa:	84 83       	std	Z+4, r24	; 0x04
   154fc:	c1 82       	std	Z+1, r12	; 0x01
   154fe:	d2 82       	std	Z+2, r13	; 0x02
   15500:	e3 82       	std	Z+3, r14	; 0x03
   15502:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   15506:	e0 91 74 19 	lds	r30, 0x1974	; 0x801974 <SS80p>
   1550a:	f0 91 75 19 	lds	r31, 0x1975	; 0x801975 <SS80p+0x1>
   1550e:	81 81       	ldd	r24, Z+1	; 0x01
   15510:	90 e0       	ldi	r25, 0x00	; 0
   15512:	0e 94 c3 84 	call	0x10986	; 0x10986 <gpib_disable_PPR>
   15516:	21 97       	sbiw	r28, 0x01	; 1
   15518:	0b 52       	subi	r16, 0x2B	; 43
   1551a:	11 09       	sbc	r17, r1
   1551c:	cf 3f       	cpi	r28, 0xFF	; 255
   1551e:	ff ef       	ldi	r31, 0xFF	; 255
   15520:	df 07       	cpc	r29, r31
   15522:	81 f6       	brne	.-96     	; 0x154c4 <SS80_init+0x20>
   15524:	cd b7       	in	r28, 0x3d	; 61
   15526:	de b7       	in	r29, 0x3e	; 62
   15528:	25 96       	adiw	r28, 0x05	; 5
   1552a:	e8 e0       	ldi	r30, 0x08	; 8
   1552c:	0c 94 2f e3 	jmp	0x1c65e	; 0x1c65e <__epilogue_restores__+0x14>

00015530 <SS80_Channel_Independent_Clear>:
   15530:	9a df       	rcall	.-204    	; 0x15466 <Clear_Common>
   15532:	e0 91 74 19 	lds	r30, 0x1974	; 0x801974 <SS80p>
   15536:	f0 91 75 19 	lds	r31, 0x1975	; 0x801975 <SS80p+0x1>
   1553a:	81 81       	ldd	r24, Z+1	; 0x01
   1553c:	90 e0       	ldi	r25, 0x00	; 0
   1553e:	0e 94 8d 84 	call	0x1091a	; 0x1091a <gpib_enable_PPR>
   15542:	80 e0       	ldi	r24, 0x00	; 0
   15544:	90 e0       	ldi	r25, 0x00	; 0
   15546:	08 95       	ret

00015548 <SS80_Universal_Device_Clear>:
   15548:	8f e0       	ldi	r24, 0x0F	; 15
   1554a:	90 e0       	ldi	r25, 0x00	; 0
   1554c:	8c df       	rcall	.-232    	; 0x15466 <Clear_Common>
   1554e:	e0 91 74 19 	lds	r30, 0x1974	; 0x801974 <SS80p>
   15552:	f0 91 75 19 	lds	r31, 0x1975	; 0x801975 <SS80p+0x1>
   15556:	81 81       	ldd	r24, Z+1	; 0x01
   15558:	90 e0       	ldi	r25, 0x00	; 0
   1555a:	0e 94 8d 84 	call	0x1091a	; 0x1091a <gpib_enable_PPR>
   1555e:	80 e0       	ldi	r24, 0x00	; 0
   15560:	90 e0       	ldi	r25, 0x00	; 0
   15562:	08 95       	ret

00015564 <SS80_Selected_Device_Clear>:
   15564:	cf 93       	push	r28
   15566:	df 93       	push	r29
   15568:	00 d0       	rcall	.+0      	; 0x1556a <SS80_Selected_Device_Clear+0x6>
   1556a:	1f 92       	push	r1
   1556c:	ec 01       	movw	r28, r24
   1556e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15572:	85 ff       	sbrs	r24, 5
   15574:	0a c0       	rjmp	.+20     	; 0x1558a <SS80_Selected_Device_Clear+0x26>
   15576:	88 e3       	ldi	r24, 0x38	; 56
   15578:	9f e1       	ldi	r25, 0x1F	; 31
   1557a:	a0 e0       	ldi	r26, 0x00	; 0
   1557c:	ed b7       	in	r30, 0x3d	; 61
   1557e:	fe b7       	in	r31, 0x3e	; 62
   15580:	81 83       	std	Z+1, r24	; 0x01
   15582:	92 83       	std	Z+2, r25	; 0x02
   15584:	a3 83       	std	Z+3, r26	; 0x03
   15586:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   1558a:	ce 01       	movw	r24, r28
   1558c:	6c df       	rcall	.-296    	; 0x15466 <Clear_Common>
   1558e:	e0 91 74 19 	lds	r30, 0x1974	; 0x801974 <SS80p>
   15592:	f0 91 75 19 	lds	r31, 0x1975	; 0x801975 <SS80p+0x1>
   15596:	81 81       	ldd	r24, Z+1	; 0x01
   15598:	90 e0       	ldi	r25, 0x00	; 0
   1559a:	0e 94 8d 84 	call	0x1091a	; 0x1091a <gpib_enable_PPR>
   1559e:	80 e0       	ldi	r24, 0x00	; 0
   155a0:	90 e0       	ldi	r25, 0x00	; 0
   155a2:	cd b7       	in	r28, 0x3d	; 61
   155a4:	de b7       	in	r29, 0x3e	; 62
   155a6:	23 96       	adiw	r28, 0x03	; 3
   155a8:	e2 e0       	ldi	r30, 0x02	; 2
   155aa:	0c 94 35 e3 	jmp	0x1c66a	; 0x1c66a <__epilogue_restores__+0x20>

000155ae <SS80_Amigo_Clear>:
   155ae:	a6 e0       	ldi	r26, 0x06	; 6
   155b0:	b0 e0       	ldi	r27, 0x00	; 0
   155b2:	ed ed       	ldi	r30, 0xDD	; 221
   155b4:	fa ea       	ldi	r31, 0xAA	; 170
   155b6:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__prologue_saves__+0x20>
   155ba:	1d 82       	std	Y+5, r1	; 0x05
   155bc:	1c 82       	std	Y+4, r1	; 0x04
   155be:	ae 01       	movw	r20, r28
   155c0:	4c 5f       	subi	r20, 0xFC	; 252
   155c2:	5f 4f       	sbci	r21, 0xFF	; 255
   155c4:	61 e0       	ldi	r22, 0x01	; 1
   155c6:	70 e0       	ldi	r23, 0x00	; 0
   155c8:	ce 01       	movw	r24, r28
   155ca:	06 96       	adiw	r24, 0x06	; 6
   155cc:	0e 94 1b 89 	call	0x11236	; 0x11236 <gpib_read_str>
   155d0:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   155d4:	01 97       	sbiw	r24, 0x01	; 1
   155d6:	89 f0       	breq	.+34     	; 0x155fa <SS80_Amigo_Clear+0x4c>
   155d8:	20 ff       	sbrs	r18, 0
   155da:	0a c0       	rjmp	.+20     	; 0x155f0 <SS80_Amigo_Clear+0x42>
   155dc:	85 e2       	ldi	r24, 0x25	; 37
   155de:	9f e1       	ldi	r25, 0x1F	; 31
   155e0:	a0 e0       	ldi	r26, 0x00	; 0
   155e2:	ed b7       	in	r30, 0x3d	; 61
   155e4:	fe b7       	in	r31, 0x3e	; 62
   155e6:	81 83       	std	Z+1, r24	; 0x01
   155e8:	92 83       	std	Z+2, r25	; 0x02
   155ea:	a3 83       	std	Z+3, r26	; 0x03
   155ec:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   155f0:	8c 81       	ldd	r24, Y+4	; 0x04
   155f2:	9d 81       	ldd	r25, Y+5	; 0x05
   155f4:	88 27       	eor	r24, r24
   155f6:	90 7d       	andi	r25, 0xD0	; 208
   155f8:	19 c0       	rjmp	.+50     	; 0x1562c <SS80_Amigo_Clear+0x7e>
   155fa:	25 ff       	sbrs	r18, 5
   155fc:	0a c0       	rjmp	.+20     	; 0x15612 <SS80_Amigo_Clear+0x64>
   155fe:	86 e1       	ldi	r24, 0x16	; 22
   15600:	9f e1       	ldi	r25, 0x1F	; 31
   15602:	a0 e0       	ldi	r26, 0x00	; 0
   15604:	ed b7       	in	r30, 0x3d	; 61
   15606:	fe b7       	in	r31, 0x3e	; 62
   15608:	81 83       	std	Z+1, r24	; 0x01
   1560a:	92 83       	std	Z+2, r25	; 0x02
   1560c:	a3 83       	std	Z+3, r26	; 0x03
   1560e:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   15612:	8f e0       	ldi	r24, 0x0F	; 15
   15614:	90 e0       	ldi	r25, 0x00	; 0
   15616:	27 df       	rcall	.-434    	; 0x15466 <Clear_Common>
   15618:	e0 91 74 19 	lds	r30, 0x1974	; 0x801974 <SS80p>
   1561c:	f0 91 75 19 	lds	r31, 0x1975	; 0x801975 <SS80p+0x1>
   15620:	81 81       	ldd	r24, Z+1	; 0x01
   15622:	90 e0       	ldi	r25, 0x00	; 0
   15624:	0e 94 8d 84 	call	0x1091a	; 0x1091a <gpib_enable_PPR>
   15628:	80 e0       	ldi	r24, 0x00	; 0
   1562a:	90 e0       	ldi	r25, 0x00	; 0
   1562c:	26 96       	adiw	r28, 0x06	; 6
   1562e:	e2 e0       	ldi	r30, 0x02	; 2
   15630:	0c 94 35 e3 	jmp	0x1c66a	; 0x1c66a <__epilogue_restores__+0x20>

00015634 <SS80_Cancel>:
   15634:	e0 91 72 19 	lds	r30, 0x1972	; 0x801972 <SS80s>
   15638:	f0 91 73 19 	lds	r31, 0x1973	; 0x801973 <SS80s+0x1>
   1563c:	11 82       	std	Z+1, r1	; 0x01
   1563e:	10 82       	st	Z, r1
   15640:	e0 91 74 19 	lds	r30, 0x1974	; 0x801974 <SS80p>
   15644:	f0 91 75 19 	lds	r31, 0x1975	; 0x801975 <SS80p+0x1>
   15648:	81 81       	ldd	r24, Z+1	; 0x01
   1564a:	90 e0       	ldi	r25, 0x00	; 0
   1564c:	0e 94 8d 84 	call	0x1091a	; 0x1091a <gpib_enable_PPR>
   15650:	80 e0       	ldi	r24, 0x00	; 0
   15652:	90 e0       	ldi	r25, 0x00	; 0
   15654:	08 95       	ret

00015656 <SS80_Transparent_State>:
   15656:	a9 e0       	ldi	r26, 0x09	; 9
   15658:	b0 e0       	ldi	r27, 0x00	; 0
   1565a:	e1 e3       	ldi	r30, 0x31	; 49
   1565c:	fb ea       	ldi	r31, 0xAB	; 171
   1565e:	0c 94 11 e3 	jmp	0x1c622	; 0x1c622 <__prologue_saves__+0x10>
   15662:	e0 91 74 19 	lds	r30, 0x1974	; 0x801974 <SS80p>
   15666:	f0 91 75 19 	lds	r31, 0x1975	; 0x801975 <SS80p+0x1>
   1566a:	81 81       	ldd	r24, Z+1	; 0x01
   1566c:	90 e0       	ldi	r25, 0x00	; 0
   1566e:	0e 94 c3 84 	call	0x10986	; 0x10986 <gpib_disable_PPR>
   15672:	80 e0       	ldi	r24, 0x00	; 0
   15674:	91 e0       	ldi	r25, 0x01	; 1
   15676:	99 87       	std	Y+9, r25	; 0x09
   15678:	88 87       	std	Y+8, r24	; 0x08
   1567a:	ae 01       	movw	r20, r28
   1567c:	48 5f       	subi	r20, 0xF8	; 248
   1567e:	5f 4f       	sbci	r21, 0xFF	; 255
   15680:	60 e0       	ldi	r22, 0x00	; 0
   15682:	72 e0       	ldi	r23, 0x02	; 2
   15684:	86 ef       	ldi	r24, 0xF6	; 246
   15686:	9c e1       	ldi	r25, 0x1C	; 28
   15688:	0e 94 1b 89 	call	0x11236	; 0x11236 <gpib_read_str>
   1568c:	7c 01       	movw	r14, r24
   1568e:	88 85       	ldd	r24, Y+8	; 0x08
   15690:	99 85       	ldd	r25, Y+9	; 0x09
   15692:	9c 01       	movw	r18, r24
   15694:	22 27       	eor	r18, r18
   15696:	30 7d       	andi	r19, 0xD0	; 208
   15698:	23 2b       	or	r18, r19
   1569a:	79 f0       	breq	.+30     	; 0x156ba <SS80_Transparent_State+0x64>
   1569c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   156a0:	80 ff       	sbrs	r24, 0
   156a2:	da c0       	rjmp	.+436    	; 0x15858 <SS80_Transparent_State+0x202>
   156a4:	85 eb       	ldi	r24, 0xB5	; 181
   156a6:	90 e2       	ldi	r25, 0x20	; 32
   156a8:	a0 e0       	ldi	r26, 0x00	; 0
   156aa:	ed b7       	in	r30, 0x3d	; 61
   156ac:	fe b7       	in	r31, 0x3e	; 62
   156ae:	81 83       	std	Z+1, r24	; 0x01
   156b0:	92 83       	std	Z+2, r25	; 0x02
   156b2:	a3 83       	std	Z+3, r26	; 0x03
   156b4:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   156b8:	cf c0       	rjmp	.+414    	; 0x15858 <SS80_Transparent_State+0x202>
   156ba:	e1 14       	cp	r14, r1
   156bc:	f1 04       	cpc	r15, r1
   156be:	09 f4       	brne	.+2      	; 0x156c2 <SS80_Transparent_State+0x6c>
   156c0:	d0 c0       	rjmp	.+416    	; 0x15862 <SS80_Transparent_State+0x20c>
   156c2:	90 fd       	sbrc	r25, 0
   156c4:	0e c0       	rjmp	.+28     	; 0x156e2 <SS80_Transparent_State+0x8c>
   156c6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   156ca:	80 ff       	sbrs	r24, 0
   156cc:	0a c0       	rjmp	.+20     	; 0x156e2 <SS80_Transparent_State+0x8c>
   156ce:	8c e9       	ldi	r24, 0x9C	; 156
   156d0:	90 e2       	ldi	r25, 0x20	; 32
   156d2:	a0 e0       	ldi	r26, 0x00	; 0
   156d4:	ed b7       	in	r30, 0x3d	; 61
   156d6:	fe b7       	in	r31, 0x3e	; 62
   156d8:	81 83       	std	Z+1, r24	; 0x01
   156da:	92 83       	std	Z+2, r25	; 0x02
   156dc:	a3 83       	std	Z+3, r26	; 0x03
   156de:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   156e2:	86 ef       	ldi	r24, 0xF6	; 246
   156e4:	a8 2e       	mov	r10, r24
   156e6:	8c e1       	ldi	r24, 0x1C	; 28
   156e8:	b8 2e       	mov	r11, r24
   156ea:	00 e0       	ldi	r16, 0x00	; 0
   156ec:	10 e0       	ldi	r17, 0x00	; 0
   156ee:	0e 15       	cp	r16, r14
   156f0:	1f 05       	cpc	r17, r15
   156f2:	0c f0       	brlt	.+2      	; 0x156f6 <SS80_Transparent_State+0xa0>
   156f4:	9c c0       	rjmp	.+312    	; 0x1582e <SS80_Transparent_State+0x1d8>
   156f6:	68 01       	movw	r12, r16
   156f8:	ff ef       	ldi	r31, 0xFF	; 255
   156fa:	cf 1a       	sub	r12, r31
   156fc:	df 0a       	sbc	r13, r31
   156fe:	f5 01       	movw	r30, r10
   15700:	81 91       	ld	r24, Z+
   15702:	5f 01       	movw	r10, r30
   15704:	28 2f       	mov	r18, r24
   15706:	30 e0       	ldi	r19, 0x00	; 0
   15708:	a9 01       	movw	r20, r18
   1570a:	40 52       	subi	r20, 0x20	; 32
   1570c:	51 09       	sbc	r21, r1
   1570e:	40 31       	cpi	r20, 0x10	; 16
   15710:	51 05       	cpc	r21, r1
   15712:	20 f4       	brcc	.+8      	; 0x1571c <SS80_Transparent_State+0xc6>
   15714:	80 52       	subi	r24, 0x20	; 32
   15716:	8c d9       	rcall	.-3304   	; 0x14a30 <SS80_Check_Unit>
   15718:	86 01       	movw	r16, r12
   1571a:	e9 cf       	rjmp	.-46     	; 0x156ee <SS80_Transparent_State+0x98>
   1571c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15720:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   15724:	21 30       	cpi	r18, 0x01	; 1
   15726:	31 05       	cpc	r19, r1
   15728:	c9 f4       	brne	.+50     	; 0x1575c <SS80_Transparent_State+0x106>
   1572a:	0e 5f       	subi	r16, 0xFE	; 254
   1572c:	1f 4f       	sbci	r17, 0xFF	; 255
   1572e:	80 73       	andi	r24, 0x30	; 48
   15730:	99 27       	eor	r25, r25
   15732:	89 2b       	or	r24, r25
   15734:	51 f0       	breq	.+20     	; 0x1574a <SS80_Transparent_State+0xf4>
   15736:	87 e7       	ldi	r24, 0x77	; 119
   15738:	90 e2       	ldi	r25, 0x20	; 32
   1573a:	a0 e0       	ldi	r26, 0x00	; 0
   1573c:	ed b7       	in	r30, 0x3d	; 61
   1573e:	fe b7       	in	r31, 0x3e	; 62
   15740:	81 83       	std	Z+1, r24	; 0x01
   15742:	92 83       	std	Z+2, r25	; 0x02
   15744:	a3 83       	std	Z+3, r26	; 0x03
   15746:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   1574a:	e0 91 74 19 	lds	r30, 0x1974	; 0x801974 <SS80p>
   1574e:	f0 91 75 19 	lds	r31, 0x1975	; 0x801975 <SS80p+0x1>
   15752:	81 81       	ldd	r24, Z+1	; 0x01
   15754:	90 e0       	ldi	r25, 0x00	; 0
   15756:	0e 94 8d 84 	call	0x1091a	; 0x1091a <gpib_enable_PPR>
   1575a:	69 c0       	rjmp	.+210    	; 0x1582e <SS80_Transparent_State+0x1d8>
   1575c:	22 30       	cpi	r18, 0x02	; 2
   1575e:	31 05       	cpc	r19, r1
   15760:	51 f4       	brne	.+20     	; 0x15776 <SS80_Transparent_State+0x120>
   15762:	0b 5f       	subi	r16, 0xFB	; 251
   15764:	1f 4f       	sbci	r17, 0xFF	; 255
   15766:	80 73       	andi	r24, 0x30	; 48
   15768:	99 27       	eor	r25, r25
   1576a:	89 2b       	or	r24, r25
   1576c:	09 f4       	brne	.+2      	; 0x15770 <SS80_Transparent_State+0x11a>
   1576e:	5f c0       	rjmp	.+190    	; 0x1582e <SS80_Transparent_State+0x1d8>
   15770:	8a e5       	ldi	r24, 0x5A	; 90
   15772:	90 e2       	ldi	r25, 0x20	; 32
   15774:	0c c0       	rjmp	.+24     	; 0x1578e <SS80_Transparent_State+0x138>
   15776:	23 30       	cpi	r18, 0x03	; 3
   15778:	31 05       	cpc	r19, r1
   1577a:	91 f4       	brne	.+36     	; 0x157a0 <SS80_Transparent_State+0x14a>
   1577c:	0b 5f       	subi	r16, 0xFB	; 251
   1577e:	1f 4f       	sbci	r17, 0xFF	; 255
   15780:	80 73       	andi	r24, 0x30	; 48
   15782:	99 27       	eor	r25, r25
   15784:	89 2b       	or	r24, r25
   15786:	09 f4       	brne	.+2      	; 0x1578a <SS80_Transparent_State+0x134>
   15788:	52 c0       	rjmp	.+164    	; 0x1582e <SS80_Transparent_State+0x1d8>
   1578a:	8c e3       	ldi	r24, 0x3C	; 60
   1578c:	90 e2       	ldi	r25, 0x20	; 32
   1578e:	a0 e0       	ldi	r26, 0x00	; 0
   15790:	ed b7       	in	r30, 0x3d	; 61
   15792:	fe b7       	in	r31, 0x3e	; 62
   15794:	81 83       	std	Z+1, r24	; 0x01
   15796:	92 83       	std	Z+2, r25	; 0x02
   15798:	a3 83       	std	Z+3, r26	; 0x03
   1579a:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   1579e:	47 c0       	rjmp	.+142    	; 0x1582e <SS80_Transparent_State+0x1d8>
   157a0:	28 30       	cpi	r18, 0x08	; 8
   157a2:	31 05       	cpc	r19, r1
   157a4:	e1 f4       	brne	.+56     	; 0x157de <SS80_Transparent_State+0x188>
   157a6:	85 ff       	sbrs	r24, 5
   157a8:	12 c0       	rjmp	.+36     	; 0x157ce <SS80_Transparent_State+0x178>
   157aa:	e0 91 72 19 	lds	r30, 0x1972	; 0x801972 <SS80s>
   157ae:	f0 91 73 19 	lds	r31, 0x1973	; 0x801973 <SS80s+0x1>
   157b2:	85 81       	ldd	r24, Z+5	; 0x05
   157b4:	90 e0       	ldi	r25, 0x00	; 0
   157b6:	ed b7       	in	r30, 0x3d	; 61
   157b8:	fe b7       	in	r31, 0x3e	; 62
   157ba:	95 83       	std	Z+5, r25	; 0x05
   157bc:	84 83       	std	Z+4, r24	; 0x04
   157be:	85 e1       	ldi	r24, 0x15	; 21
   157c0:	90 e2       	ldi	r25, 0x20	; 32
   157c2:	a0 e0       	ldi	r26, 0x00	; 0
   157c4:	81 83       	std	Z+1, r24	; 0x01
   157c6:	92 83       	std	Z+2, r25	; 0x02
   157c8:	a3 83       	std	Z+3, r26	; 0x03
   157ca:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   157ce:	e0 91 72 19 	lds	r30, 0x1972	; 0x801972 <SS80s>
   157d2:	f0 91 73 19 	lds	r31, 0x1973	; 0x801973 <SS80s+0x1>
   157d6:	85 81       	ldd	r24, Z+5	; 0x05
   157d8:	90 e0       	ldi	r25, 0x00	; 0
   157da:	aa de       	rcall	.-684    	; 0x15530 <SS80_Channel_Independent_Clear>
   157dc:	44 c0       	rjmp	.+136    	; 0x15866 <SS80_Transparent_State+0x210>
   157de:	29 30       	cpi	r18, 0x09	; 9
   157e0:	31 05       	cpc	r19, r1
   157e2:	b1 f4       	brne	.+44     	; 0x15810 <SS80_Transparent_State+0x1ba>
   157e4:	85 ff       	sbrs	r24, 5
   157e6:	12 c0       	rjmp	.+36     	; 0x1580c <SS80_Transparent_State+0x1b6>
   157e8:	e0 91 72 19 	lds	r30, 0x1972	; 0x801972 <SS80s>
   157ec:	f0 91 73 19 	lds	r31, 0x1973	; 0x801973 <SS80s+0x1>
   157f0:	85 81       	ldd	r24, Z+5	; 0x05
   157f2:	90 e0       	ldi	r25, 0x00	; 0
   157f4:	ed b7       	in	r30, 0x3d	; 61
   157f6:	fe b7       	in	r31, 0x3e	; 62
   157f8:	95 83       	std	Z+5, r25	; 0x05
   157fa:	84 83       	std	Z+4, r24	; 0x04
   157fc:	81 e0       	ldi	r24, 0x01	; 1
   157fe:	90 e2       	ldi	r25, 0x20	; 32
   15800:	a0 e0       	ldi	r26, 0x00	; 0
   15802:	81 83       	std	Z+1, r24	; 0x01
   15804:	92 83       	std	Z+2, r25	; 0x02
   15806:	a3 83       	std	Z+3, r26	; 0x03
   15808:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   1580c:	13 df       	rcall	.-474    	; 0x15634 <SS80_Cancel>
   1580e:	2b c0       	rjmp	.+86     	; 0x15866 <SS80_Transparent_State+0x210>
   15810:	80 ff       	sbrs	r24, 0
   15812:	22 c0       	rjmp	.+68     	; 0x15858 <SS80_Transparent_State+0x202>
   15814:	ed b7       	in	r30, 0x3d	; 61
   15816:	fe b7       	in	r31, 0x3e	; 62
   15818:	35 83       	std	Z+5, r19	; 0x05
   1581a:	24 83       	std	Z+4, r18	; 0x04
   1581c:	81 ee       	ldi	r24, 0xE1	; 225
   1581e:	9f e1       	ldi	r25, 0x1F	; 31
   15820:	a0 e0       	ldi	r26, 0x00	; 0
   15822:	81 83       	std	Z+1, r24	; 0x01
   15824:	92 83       	std	Z+2, r25	; 0x02
   15826:	a3 83       	std	Z+3, r26	; 0x03
   15828:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   1582c:	86 01       	movw	r16, r12
   1582e:	0e 15       	cp	r16, r14
   15830:	1f 05       	cpc	r17, r15
   15832:	91 f0       	breq	.+36     	; 0x15858 <SS80_Transparent_State+0x202>
   15834:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15838:	80 ff       	sbrs	r24, 0
   1583a:	0e c0       	rjmp	.+28     	; 0x15858 <SS80_Transparent_State+0x202>
   1583c:	ed b7       	in	r30, 0x3d	; 61
   1583e:	fe b7       	in	r31, 0x3e	; 62
   15840:	f7 82       	std	Z+7, r15	; 0x07
   15842:	e6 82       	std	Z+6, r14	; 0x06
   15844:	15 83       	std	Z+5, r17	; 0x05
   15846:	04 83       	std	Z+4, r16	; 0x04
   15848:	85 ea       	ldi	r24, 0xA5	; 165
   1584a:	9f e1       	ldi	r25, 0x1F	; 31
   1584c:	a0 e0       	ldi	r26, 0x00	; 0
   1584e:	81 83       	std	Z+1, r24	; 0x01
   15850:	92 83       	std	Z+2, r25	; 0x02
   15852:	a3 83       	std	Z+3, r26	; 0x03
   15854:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   15858:	88 85       	ldd	r24, Y+8	; 0x08
   1585a:	99 85       	ldd	r25, Y+9	; 0x09
   1585c:	88 27       	eor	r24, r24
   1585e:	90 7d       	andi	r25, 0xD0	; 208
   15860:	02 c0       	rjmp	.+4      	; 0x15866 <SS80_Transparent_State+0x210>
   15862:	80 e0       	ldi	r24, 0x00	; 0
   15864:	90 e0       	ldi	r25, 0x00	; 0
   15866:	29 96       	adiw	r28, 0x09	; 9
   15868:	ea e0       	ldi	r30, 0x0A	; 10
   1586a:	0c 94 2d e3 	jmp	0x1c65a	; 0x1c65a <__epilogue_restores__+0x10>

0001586e <SS80_error_return>:
/// @return  0 on send
/// @return GPIB flags on send error
/// @see gpib.h _FLAGS defines for a full list.

int SS80_error_return( void )
{
   1586e:	a6 e0       	ldi	r26, 0x06	; 6
   15870:	b0 e0       	ldi	r27, 0x00	; 0
   15872:	ed e3       	ldi	r30, 0x3D	; 61
   15874:	fc ea       	ldi	r31, 0xAC	; 172
   15876:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__prologue_saves__+0x20>
    uint8_t tmp[1];
    uint16_t status = EOI_FLAG;
   1587a:	80 e0       	ldi	r24, 0x00	; 0
   1587c:	91 e0       	ldi	r25, 0x01	; 1
   1587e:	9d 83       	std	Y+5, r25	; 0x05
   15880:	8c 83       	std	Y+4, r24	; 0x04

    SS80s->qstat = 1;
   15882:	e0 91 72 19 	lds	r30, 0x1972	; 0x801972 <SS80s>
   15886:	f0 91 73 19 	lds	r31, 0x1973	; 0x801973 <SS80s+0x1>
   1588a:	81 e0       	ldi	r24, 0x01	; 1
   1588c:	82 83       	std	Z+2, r24	; 0x02
    tmp[0] = SS80s->qstat;
   1588e:	8e 83       	std	Y+6, r24	; 0x06

    status = EOI_FLAG;
    if( gpib_write_str(tmp,sizeof(tmp), &status) != sizeof(tmp))
   15890:	ae 01       	movw	r20, r28
   15892:	4c 5f       	subi	r20, 0xFC	; 252
   15894:	5f 4f       	sbci	r21, 0xFF	; 255
   15896:	61 e0       	ldi	r22, 0x01	; 1
   15898:	70 e0       	ldi	r23, 0x00	; 0
   1589a:	ce 01       	movw	r24, r28
   1589c:	06 96       	adiw	r24, 0x06	; 6
   1589e:	0e 94 bd 89 	call	0x1137a	; 0x1137a <gpib_write_str>
   158a2:	01 97       	sbiw	r24, 0x01	; 1
   158a4:	99 f0       	breq	.+38     	; 0x158cc <SS80_error_return+0x5e>
    {
        if(debuglevel & GPIB_ERR)
   158a6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   158aa:	80 ff       	sbrs	r24, 0
   158ac:	0a c0       	rjmp	.+20     	; 0x158c2 <SS80_error_return+0x54>
            printf("[GPIB Error Return - Write ERROR]\n");
   158ae:	83 ef       	ldi	r24, 0xF3	; 243
   158b0:	9e e1       	ldi	r25, 0x1E	; 30
   158b2:	a0 e0       	ldi	r26, 0x00	; 0
   158b4:	ed b7       	in	r30, 0x3d	; 61
   158b6:	fe b7       	in	r31, 0x3e	; 62
   158b8:	81 83       	std	Z+1, r24	; 0x01
   158ba:	92 83       	std	Z+2, r25	; 0x02
   158bc:	a3 83       	std	Z+3, r26	; 0x03
   158be:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
        return(status & ERROR_MASK);
   158c2:	8c 81       	ldd	r24, Y+4	; 0x04
   158c4:	9d 81       	ldd	r25, Y+5	; 0x05
   158c6:	88 27       	eor	r24, r24
   158c8:	90 7d       	andi	r25, 0xD0	; 208
   158ca:	07 c0       	rjmp	.+14     	; 0x158da <SS80_error_return+0x6c>
    }
    SS80s->qstat = 0;
   158cc:	e0 91 72 19 	lds	r30, 0x1972	; 0x801972 <SS80s>
   158d0:	f0 91 73 19 	lds	r31, 0x1973	; 0x801973 <SS80s+0x1>
   158d4:	12 82       	std	Z+2, r1	; 0x02
    return(0);
   158d6:	80 e0       	ldi	r24, 0x00	; 0
   158d8:	90 e0       	ldi	r25, 0x00	; 0
}
   158da:	26 96       	adiw	r28, 0x06	; 6
   158dc:	e2 e0       	ldi	r30, 0x02	; 2
   158de:	0c 94 35 e3 	jmp	0x1c66a	; 0x1c66a <__epilogue_restores__+0x20>

000158e2 <SS80_locate_and_read>:
///  - Currenly we will only process 2 ** 31 bytes Max in one transfer.
///  - If an seek or I/O error happens then we MUST continue to
/// read and discard the GPIB data until we get an EOI or GPIB error...

int SS80_locate_and_read( void )
{
   158e2:	a7 e1       	ldi	r26, 0x17	; 23
   158e4:	b0 e0       	ldi	r27, 0x00	; 0
   158e6:	e7 e7       	ldi	r30, 0x77	; 119
   158e8:	fc ea       	ldi	r31, 0xAC	; 172
   158ea:	0c 94 0a e3 	jmp	0x1c614	; 0x1c614 <__prologue_saves__+0x2>
    DWORD total_bytes;
    DWORD count;
    int chunk;
    int len;
    uint16_t status;
    uint32_t Address = SS80_Blocks_to_Bytes(SS80s->AddressBlocks);
   158ee:	60 91 72 19 	lds	r22, 0x1972	; 0x801972 <SS80s>
   158f2:	70 91 73 19 	lds	r23, 0x1973	; 0x801973 <SS80s+0x1>
   158f6:	fb 01       	movw	r30, r22
   158f8:	27 81       	ldd	r18, Z+7	; 0x07
   158fa:	30 85       	ldd	r19, Z+8	; 0x08
   158fc:	41 85       	ldd	r20, Z+9	; 0x09
   158fe:	52 85       	ldd	r21, Z+10	; 0x0a

/// @brief  SS80 Return current address in bytes
/// @return Byte Address
uint32_t SS80_Blocks_to_Bytes(uint32_t block)
{
    return(block * SS80p->UNIT.BYTES_PER_BLOCK);
   15900:	80 91 74 19 	lds	r24, 0x1974	; 0x801974 <SS80p>
   15904:	90 91 75 19 	lds	r25, 0x1975	; 0x801975 <SS80p+0x1>
   15908:	fc 01       	movw	r30, r24
   1590a:	a0 89       	ldd	r26, Z+16	; 0x10
   1590c:	b1 89       	ldd	r27, Z+17	; 0x11
    int chunk;
    int len;
    uint16_t status;
    uint32_t Address = SS80_Blocks_to_Bytes(SS80s->AddressBlocks);

    SS80s->qstat = 0;
   1590e:	fb 01       	movw	r30, r22
   15910:	12 82       	std	Z+2, r1	; 0x02

    status = 0;
   15912:	1d 86       	std	Y+13, r1	; 0x0d
   15914:	1c 86       	std	Y+12, r1	; 0x0c

    if( GPIB_IO_RD(IFC) == 0)
   15916:	54 98       	cbi	0x0a, 4	; 10
   15918:	4c 99       	sbic	0x09, 4	; 9
   1591a:	03 c0       	rjmp	.+6      	; 0x15922 <SS80_locate_and_read+0x40>
        return(IFC_FLAG);
   1591c:	80 e0       	ldi	r24, 0x00	; 0
   1591e:	90 e1       	ldi	r25, 0x10	; 16
   15920:	3e c1       	rjmp	.+636    	; 0x15b9e <SS80_locate_and_read+0x2bc>

/// @brief  SS80 Return current address in bytes
/// @return Byte Address
uint32_t SS80_Blocks_to_Bytes(uint32_t block)
{
    return(block * SS80p->UNIT.BYTES_PER_BLOCK);
   15922:	0e 94 e9 e2 	call	0x1c5d2	; 0x1c5d2 <__muluhisi3>
   15926:	4b 01       	movw	r8, r22
   15928:	5c 01       	movw	r10, r24
/// @todo FIXME
///  SS80 4-39
///  For now we will assume the controller will never do this

#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1592a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1592e:	85 ff       	sbrs	r24, 5
   15930:	1a c0       	rjmp	.+52     	; 0x15966 <SS80_locate_and_read+0x84>
        printf("[SS80 Locate and Read at %08lXH(%lXH)]\n",
   15932:	e0 91 72 19 	lds	r30, 0x1972	; 0x801972 <SS80s>
   15936:	f0 91 73 19 	lds	r31, 0x1973	; 0x801973 <SS80s+0x1>
   1593a:	83 85       	ldd	r24, Z+11	; 0x0b
   1593c:	94 85       	ldd	r25, Z+12	; 0x0c
   1593e:	a5 85       	ldd	r26, Z+13	; 0x0d
   15940:	b6 85       	ldd	r27, Z+14	; 0x0e
   15942:	ed b7       	in	r30, 0x3d	; 61
   15944:	fe b7       	in	r31, 0x3e	; 62
   15946:	80 87       	std	Z+8, r24	; 0x08
   15948:	91 87       	std	Z+9, r25	; 0x09
   1594a:	a2 87       	std	Z+10, r26	; 0x0a
   1594c:	b3 87       	std	Z+11, r27	; 0x0b
   1594e:	84 82       	std	Z+4, r8	; 0x04
   15950:	95 82       	std	Z+5, r9	; 0x05
   15952:	a6 82       	std	Z+6, r10	; 0x06
   15954:	b7 82       	std	Z+7, r11	; 0x07
   15956:	8d ec       	ldi	r24, 0xCD	; 205
   15958:	95 e2       	ldi	r25, 0x25	; 37
   1595a:	a0 e0       	ldi	r26, 0x00	; 0
   1595c:	81 83       	std	Z+1, r24	; 0x01
   1595e:	92 83       	std	Z+2, r25	; 0x02
   15960:	a3 83       	std	Z+3, r26	; 0x03
   15962:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
            (long) Address, (long) SS80s->Length);
#endif

    if( SS80_cmd_seek() )
   15966:	2b db       	rcall	.-2474   	; 0x14fbe <SS80_cmd_seek>
   15968:	89 2b       	or	r24, r25
   1596a:	09 f0       	breq	.+2      	; 0x1596e <SS80_locate_and_read+0x8c>
   1596c:	ae c0       	rjmp	.+348    	; 0x15aca <SS80_locate_and_read+0x1e8>
    {
        return(SS80_error_return());
    }

    count = SS80s->Length;
   1596e:	e0 91 72 19 	lds	r30, 0x1972	; 0x801972 <SS80s>
   15972:	f0 91 73 19 	lds	r31, 0x1973	; 0x801973 <SS80s+0x1>
   15976:	43 84       	ldd	r4, Z+11	; 0x0b
   15978:	54 84       	ldd	r5, Z+12	; 0x0c
   1597a:	65 84       	ldd	r6, Z+13	; 0x0d
   1597c:	76 84       	ldd	r7, Z+14	; 0x0e
    total_bytes = 0;
   1597e:	1e 86       	std	Y+14, r1	; 0x0e
   15980:	1f 86       	std	Y+15, r1	; 0x0f
   15982:	18 8a       	std	Y+16, r1	; 0x10
   15984:	19 8a       	std	Y+17, r1	; 0x11

#if SDEBUG
        if(debuglevel & GPIB_DISK_IO_TIMING)
            gpib_timer_elapsed_end("disk READ ");
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
            printf("[SS80 Disk Read %02XH bytes]\n", len);
   15986:	8f ea       	ldi	r24, 0xAF	; 175
   15988:	95 e2       	ldi	r25, 0x25	; 37
   1598a:	9c 01       	movw	r18, r24
   1598c:	40 e0       	ldi	r20, 0x00	; 0
   1598e:	2a 8b       	std	Y+18, r18	; 0x12
   15990:	3b 8b       	std	Y+19, r19	; 0x13
   15992:	4c 8b       	std	Y+20, r20	; 0x14
        if(debuglevel & GPIB_RW_STR_TIMING)
            gpib_timer_elapsed_end("GPIB write");
#endif
        if( len != chunk)
        {
            SS80s->qstat = 1;
   15994:	33 24       	eor	r3, r3
   15996:	33 94       	inc	r3
            if(debuglevel & GPIB_ERR)
                printf("[SS80 GPIB Write Error]\n");
   15998:	8e e7       	ldi	r24, 0x7E	; 126
   1599a:	95 e2       	ldi	r25, 0x25	; 37
   1599c:	9c 01       	movw	r18, r24
   1599e:	40 e0       	ldi	r20, 0x00	; 0
   159a0:	2d 8b       	std	Y+21, r18	; 0x15
   159a2:	3e 8b       	std	Y+22, r19	; 0x16
   159a4:	4f 8b       	std	Y+23, r20	; 0x17
        return(SS80_error_return());
    }

    count = SS80s->Length;
    total_bytes = 0;
    while(count > 0 )
   159a6:	34 c0       	rjmp	.+104    	; 0x15a10 <SS80_locate_and_read+0x12e>
                printf("[SS80 Disk Read Error]\n");
            return( SS80_error_return() );
        }

#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   159a8:	87 fd       	sbrc	r24, 7
            gpib_timer_elapsed_begin();
   159aa:	0e 94 b3 83 	call	0x10766	; 0x10766 <gpib_timer_elapsed_begin>
#endif
        len = gpib_write_str(gpib_iobuff, chunk, &status);
   159ae:	ae 01       	movw	r20, r28
   159b0:	44 5f       	subi	r20, 0xF4	; 244
   159b2:	5f 4f       	sbci	r21, 0xFF	; 255
   159b4:	b6 01       	movw	r22, r12
   159b6:	86 ef       	ldi	r24, 0xF6	; 246
   159b8:	9c e1       	ldi	r25, 0x1C	; 28
   159ba:	0e 94 bd 89 	call	0x1137a	; 0x1137a <gpib_write_str>
   159be:	8c 01       	movw	r16, r24
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   159c0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   159c4:	87 ff       	sbrs	r24, 7
   159c6:	04 c0       	rjmp	.+8      	; 0x159d0 <SS80_locate_and_read+0xee>
            gpib_timer_elapsed_end("GPIB write");
   159c8:	86 eb       	ldi	r24, 0xB6	; 182
   159ca:	90 e1       	ldi	r25, 0x10	; 16
   159cc:	0e 94 c5 83 	call	0x1078a	; 0x1078a <gpib_timer_elapsed_end>
#endif
        if( len != chunk)
   159d0:	c0 16       	cp	r12, r16
   159d2:	d1 06       	cpc	r13, r17
   159d4:	09 f0       	breq	.+2      	; 0x159d8 <SS80_locate_and_read+0xf6>
   159d6:	82 c0       	rjmp	.+260    	; 0x15adc <SS80_locate_and_read+0x1fa>
                SS80s->Errors |= ERR_GPIB;
                break;
            }
        }

        Address += chunk;
   159d8:	0d 2c       	mov	r0, r13
   159da:	00 0c       	add	r0, r0
   159dc:	ee 08       	sbc	r14, r14
   159de:	ff 08       	sbc	r15, r15
   159e0:	8c 0c       	add	r8, r12
   159e2:	9d 1c       	adc	r9, r13
   159e4:	ae 1c       	adc	r10, r14
   159e6:	bf 1c       	adc	r11, r15
        total_bytes = total_bytes + len;
   159e8:	01 2e       	mov	r0, r17
   159ea:	00 0c       	add	r0, r0
   159ec:	22 0b       	sbc	r18, r18
   159ee:	33 0b       	sbc	r19, r19
   159f0:	8e 85       	ldd	r24, Y+14	; 0x0e
   159f2:	9f 85       	ldd	r25, Y+15	; 0x0f
   159f4:	a8 89       	ldd	r26, Y+16	; 0x10
   159f6:	b9 89       	ldd	r27, Y+17	; 0x11
   159f8:	80 0f       	add	r24, r16
   159fa:	91 1f       	adc	r25, r17
   159fc:	a2 1f       	adc	r26, r18
   159fe:	b3 1f       	adc	r27, r19
   15a00:	8e 87       	std	Y+14, r24	; 0x0e
   15a02:	9f 87       	std	Y+15, r25	; 0x0f
   15a04:	a8 8b       	std	Y+16, r26	; 0x10
   15a06:	b9 8b       	std	Y+17, r27	; 0x11
        count -= len;
   15a08:	40 1a       	sub	r4, r16
   15a0a:	51 0a       	sbc	r5, r17
   15a0c:	62 0a       	sbc	r6, r18
   15a0e:	73 0a       	sbc	r7, r19
        return(SS80_error_return());
    }

    count = SS80s->Length;
    total_bytes = 0;
    while(count > 0 )
   15a10:	41 14       	cp	r4, r1
   15a12:	51 04       	cpc	r5, r1
   15a14:	61 04       	cpc	r6, r1
   15a16:	71 04       	cpc	r7, r1
   15a18:	09 f4       	brne	.+2      	; 0x15a1c <SS80_locate_and_read+0x13a>
   15a1a:	92 c0       	rjmp	.+292    	; 0x15b40 <SS80_locate_and_read+0x25e>
    {
        if( GPIB_IO_RD(IFC) == 0)
   15a1c:	54 98       	cbi	0x0a, 4	; 10
   15a1e:	4c 9b       	sbis	0x09, 4	; 9
   15a20:	7d cf       	rjmp	.-262    	; 0x1591c <SS80_locate_and_read+0x3a>
        {
            return(IFC_FLAG);
        }

        if(count > 256)
   15a22:	31 e0       	ldi	r19, 0x01	; 1
   15a24:	43 16       	cp	r4, r19
   15a26:	53 06       	cpc	r5, r19
   15a28:	61 04       	cpc	r6, r1
   15a2a:	71 04       	cpc	r7, r1
   15a2c:	08 f4       	brcc	.+2      	; 0x15a30 <SS80_locate_and_read+0x14e>
   15a2e:	4f c0       	rjmp	.+158    	; 0x15ace <SS80_locate_and_read+0x1ec>
        {
            chunk = 256;
            status = 0;                           // GPIB status
   15a30:	1d 86       	std	Y+13, r1	; 0x0d
   15a32:	1c 86       	std	Y+12, r1	; 0x0c
            return(IFC_FLAG);
        }

        if(count > 256)
        {
            chunk = 256;
   15a34:	c1 2c       	mov	r12, r1
   15a36:	dd 24       	eor	r13, r13
   15a38:	d3 94       	inc	r13
            chunk = count;
            status |= EOI_FLAG;                   // GPIB EOI on final charater
        }

#if SDEBUG
        if(debuglevel & GPIB_DISK_IO_TIMING)
   15a3a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15a3e:	86 fd       	sbrc	r24, 6
            gpib_timer_elapsed_begin();
   15a40:	0e 94 b3 83 	call	0x10766	; 0x10766 <gpib_timer_elapsed_begin>
#endif

// FIXME len != chunk
        len = dbf_open_read(SS80p->HEADER.NAME, Address, gpib_iobuff, chunk, &SS80s->Errors);
   15a44:	e0 90 72 19 	lds	r14, 0x1972	; 0x801972 <SS80s>
   15a48:	f0 90 73 19 	lds	r15, 0x1973	; 0x801973 <SS80s+0x1>
   15a4c:	43 e0       	ldi	r20, 0x03	; 3
   15a4e:	e4 0e       	add	r14, r20
   15a50:	f1 1c       	adc	r15, r1
   15a52:	e0 91 74 19 	lds	r30, 0x1974	; 0x801974 <SS80p>
   15a56:	f0 91 75 19 	lds	r31, 0x1975	; 0x801975 <SS80p+0x1>
   15a5a:	86 01       	movw	r16, r12
   15a5c:	26 ef       	ldi	r18, 0xF6	; 246
   15a5e:	3c e1       	ldi	r19, 0x1C	; 28
   15a60:	b5 01       	movw	r22, r10
   15a62:	a4 01       	movw	r20, r8
   15a64:	82 81       	ldd	r24, Z+2	; 0x02
   15a66:	93 81       	ldd	r25, Z+3	; 0x03
   15a68:	0e 94 05 83 	call	0x1060a	; 0x1060a <dbf_open_read>
   15a6c:	8c 01       	movw	r16, r24

#if SDEBUG
        if(debuglevel & GPIB_DISK_IO_TIMING)
   15a6e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15a72:	86 ff       	sbrs	r24, 6
   15a74:	04 c0       	rjmp	.+8      	; 0x15a7e <SS80_locate_and_read+0x19c>
            gpib_timer_elapsed_end("disk READ ");
   15a76:	8b ea       	ldi	r24, 0xAB	; 171
   15a78:	90 e1       	ldi	r25, 0x10	; 16
   15a7a:	0e 94 c5 83 	call	0x1078a	; 0x1078a <gpib_timer_elapsed_end>
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15a7e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15a82:	85 ff       	sbrs	r24, 5
   15a84:	0c c0       	rjmp	.+24     	; 0x15a9e <SS80_locate_and_read+0x1bc>
            printf("[SS80 Disk Read %02XH bytes]\n", len);
   15a86:	ed b7       	in	r30, 0x3d	; 61
   15a88:	fe b7       	in	r31, 0x3e	; 62
   15a8a:	15 83       	std	Z+5, r17	; 0x05
   15a8c:	04 83       	std	Z+4, r16	; 0x04
   15a8e:	2a 89       	ldd	r18, Y+18	; 0x12
   15a90:	3b 89       	ldd	r19, Y+19	; 0x13
   15a92:	4c 89       	ldd	r20, Y+20	; 0x14
   15a94:	21 83       	std	Z+1, r18	; 0x01
   15a96:	32 83       	std	Z+2, r19	; 0x02
   15a98:	43 83       	std	Z+3, r20	; 0x03
   15a9a:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   15a9e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
#endif
        if(len < 0)
   15aa2:	17 ff       	sbrs	r17, 7
   15aa4:	81 cf       	rjmp	.-254    	; 0x159a8 <SS80_locate_and_read+0xc6>
        {
            SS80s->qstat = 1;
   15aa6:	e0 91 72 19 	lds	r30, 0x1972	; 0x801972 <SS80s>
   15aaa:	f0 91 73 19 	lds	r31, 0x1973	; 0x801973 <SS80s+0x1>
   15aae:	91 e0       	ldi	r25, 0x01	; 1
   15ab0:	92 83       	std	Z+2, r25	; 0x02
/// @return Return
            if(debuglevel & GPIB_ERR)
   15ab2:	80 ff       	sbrs	r24, 0
   15ab4:	0a c0       	rjmp	.+20     	; 0x15aca <SS80_locate_and_read+0x1e8>
                printf("[SS80 Disk Read Error]\n");
   15ab6:	87 e9       	ldi	r24, 0x97	; 151
   15ab8:	95 e2       	ldi	r25, 0x25	; 37
   15aba:	a0 e0       	ldi	r26, 0x00	; 0
   15abc:	ed b7       	in	r30, 0x3d	; 61
   15abe:	fe b7       	in	r31, 0x3e	; 62
   15ac0:	81 83       	std	Z+1, r24	; 0x01
   15ac2:	92 83       	std	Z+2, r25	; 0x02
   15ac4:	a3 83       	std	Z+3, r26	; 0x03
   15ac6:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
            return( SS80_error_return() );
   15aca:	d1 de       	rcall	.-606    	; 0x1586e <SS80_error_return>
   15acc:	68 c0       	rjmp	.+208    	; 0x15b9e <SS80_locate_and_read+0x2bc>
            chunk = 256;
            status = 0;                           // GPIB status
        }
        else
        {
            chunk = count;
   15ace:	62 01       	movw	r12, r4
            status |= EOI_FLAG;                   // GPIB EOI on final charater
   15ad0:	8c 85       	ldd	r24, Y+12	; 0x0c
   15ad2:	9d 85       	ldd	r25, Y+13	; 0x0d
   15ad4:	91 60       	ori	r25, 0x01	; 1
   15ad6:	9d 87       	std	Y+13, r25	; 0x0d
   15ad8:	8c 87       	std	Y+12, r24	; 0x0c
   15ada:	af cf       	rjmp	.-162    	; 0x15a3a <SS80_locate_and_read+0x158>
        if(debuglevel & GPIB_RW_STR_TIMING)
            gpib_timer_elapsed_end("GPIB write");
#endif
        if( len != chunk)
        {
            SS80s->qstat = 1;
   15adc:	e0 91 72 19 	lds	r30, 0x1972	; 0x801972 <SS80s>
   15ae0:	f0 91 73 19 	lds	r31, 0x1973	; 0x801973 <SS80s+0x1>
   15ae4:	32 82       	std	Z+2, r3	; 0x02
            if(debuglevel & GPIB_ERR)
   15ae6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15aea:	80 ff       	sbrs	r24, 0
   15aec:	0a c0       	rjmp	.+20     	; 0x15b02 <SS80_locate_and_read+0x220>
                printf("[SS80 GPIB Write Error]\n");
   15aee:	2d 89       	ldd	r18, Y+21	; 0x15
   15af0:	3e 89       	ldd	r19, Y+22	; 0x16
   15af2:	4f 89       	ldd	r20, Y+23	; 0x17
   15af4:	ed b7       	in	r30, 0x3d	; 61
   15af6:	fe b7       	in	r31, 0x3e	; 62
   15af8:	21 83       	std	Z+1, r18	; 0x01
   15afa:	32 83       	std	Z+2, r19	; 0x02
   15afc:	43 83       	std	Z+3, r20	; 0x03
   15afe:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
            if(status & ERROR_MASK)
   15b02:	8c 85       	ldd	r24, Y+12	; 0x0c
   15b04:	9d 85       	ldd	r25, Y+13	; 0x0d
   15b06:	88 27       	eor	r24, r24
   15b08:	90 7d       	andi	r25, 0xD0	; 208
   15b0a:	89 2b       	or	r24, r25
   15b0c:	09 f4       	brne	.+2      	; 0x15b10 <SS80_locate_and_read+0x22e>
   15b0e:	64 cf       	rjmp	.-312    	; 0x159d8 <SS80_locate_and_read+0xf6>
            {
                SS80s->Errors |= ERR_GPIB;
   15b10:	e0 91 72 19 	lds	r30, 0x1972	; 0x801972 <SS80s>
   15b14:	f0 91 73 19 	lds	r31, 0x1973	; 0x801973 <SS80s+0x1>
   15b18:	83 81       	ldd	r24, Z+3	; 0x03
   15b1a:	94 81       	ldd	r25, Z+4	; 0x04
   15b1c:	80 62       	ori	r24, 0x20	; 32
   15b1e:	94 83       	std	Z+4, r25	; 0x04
   15b20:	83 83       	std	Z+3, r24	; 0x03
        count -= len;
    }
///  Note: this should not happen unless we exit on errors above
    if(count > 0)
    {
        if(debuglevel & GPIB_ERR)
   15b22:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15b26:	80 ff       	sbrs	r24, 0
   15b28:	21 c0       	rjmp	.+66     	; 0x15b6c <SS80_locate_and_read+0x28a>
            printf("[SS80 Buffered Read DID NOT FINISH]\n");
   15b2a:	89 e5       	ldi	r24, 0x59	; 89
   15b2c:	95 e2       	ldi	r25, 0x25	; 37
   15b2e:	a0 e0       	ldi	r26, 0x00	; 0
   15b30:	ed b7       	in	r30, 0x3d	; 61
   15b32:	fe b7       	in	r31, 0x3e	; 62
   15b34:	81 83       	std	Z+1, r24	; 0x01
   15b36:	92 83       	std	Z+2, r25	; 0x02
   15b38:	a3 83       	std	Z+3, r26	; 0x03
   15b3a:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   15b3e:	16 c0       	rjmp	.+44     	; 0x15b6c <SS80_locate_and_read+0x28a>
    }
    else
    {
#if SDEBUG
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15b40:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15b44:	85 ff       	sbrs	r24, 5
   15b46:	12 c0       	rjmp	.+36     	; 0x15b6c <SS80_locate_and_read+0x28a>
            printf("[SS80 Buffered Read Total(%lXH) bytes]\n", (long) total_bytes);
   15b48:	8e 85       	ldd	r24, Y+14	; 0x0e
   15b4a:	9f 85       	ldd	r25, Y+15	; 0x0f
   15b4c:	a8 89       	ldd	r26, Y+16	; 0x10
   15b4e:	b9 89       	ldd	r27, Y+17	; 0x11
   15b50:	ed b7       	in	r30, 0x3d	; 61
   15b52:	fe b7       	in	r31, 0x3e	; 62
   15b54:	84 83       	std	Z+4, r24	; 0x04
   15b56:	95 83       	std	Z+5, r25	; 0x05
   15b58:	a6 83       	std	Z+6, r26	; 0x06
   15b5a:	b7 83       	std	Z+7, r27	; 0x07
   15b5c:	81 e3       	ldi	r24, 0x31	; 49
   15b5e:	95 e2       	ldi	r25, 0x25	; 37
   15b60:	a0 e0       	ldi	r26, 0x00	; 0
   15b62:	81 83       	std	Z+1, r24	; 0x01
   15b64:	92 83       	std	Z+2, r25	; 0x02
   15b66:	a3 83       	std	Z+3, r26	; 0x03
   15b68:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
#endif
    }

    SS80s->AddressBlocks = SS80_Bytes_to_Blocks(Address);
   15b6c:	00 91 72 19 	lds	r16, 0x1972	; 0x801972 <SS80s>
   15b70:	10 91 73 19 	lds	r17, 0x1973	; 0x801973 <SS80s+0x1>

/// @brief  SS80 Return current block addresss from bytes
/// @return Block Address
uint32_t SS80_Bytes_to_Blocks(uint32_t bytes)
{
    return(bytes / SS80p->UNIT.BYTES_PER_BLOCK);
   15b74:	e0 91 74 19 	lds	r30, 0x1974	; 0x801974 <SS80p>
   15b78:	f0 91 75 19 	lds	r31, 0x1975	; 0x801975 <SS80p+0x1>
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
            printf("[SS80 Buffered Read Total(%lXH) bytes]\n", (long) total_bytes);
#endif
    }

    SS80s->AddressBlocks = SS80_Bytes_to_Blocks(Address);
   15b7c:	20 89       	ldd	r18, Z+16	; 0x10
   15b7e:	31 89       	ldd	r19, Z+17	; 0x11
   15b80:	40 e0       	ldi	r20, 0x00	; 0
   15b82:	50 e0       	ldi	r21, 0x00	; 0
   15b84:	c5 01       	movw	r24, r10
   15b86:	b4 01       	movw	r22, r8
   15b88:	0e 94 9c e2 	call	0x1c538	; 0x1c538 <__udivmodsi4>
   15b8c:	f8 01       	movw	r30, r16
   15b8e:	27 83       	std	Z+7, r18	; 0x07
   15b90:	30 87       	std	Z+8, r19	; 0x08
   15b92:	41 87       	std	Z+9, r20	; 0x09
   15b94:	52 87       	std	Z+10, r21	; 0x0a
    return (status & ERROR_MASK);
   15b96:	8c 85       	ldd	r24, Y+12	; 0x0c
   15b98:	9d 85       	ldd	r25, Y+13	; 0x0d
   15b9a:	88 27       	eor	r24, r24
   15b9c:	90 7d       	andi	r25, 0xD0	; 208
}
   15b9e:	67 96       	adiw	r28, 0x17	; 23
   15ba0:	e1 e1       	ldi	r30, 0x11	; 17
   15ba2:	0c 94 26 e3 	jmp	0x1c64c	; 0x1c64c <__epilogue_restores__+0x2>

00015ba6 <SS80_Execute_State>:
/// - State: EXEC STATE COMMAND
/// @return 0 on sucess
/// @return GPIB error flags on fail
/// @see gpib.h ERROR_MASK defines for a full list of error flags.
int SS80_Execute_State(void)
{
   15ba6:	cf 93       	push	r28
   15ba8:	df 93       	push	r29
   15baa:	00 d0       	rcall	.+0      	; 0x15bac <SS80_Execute_State+0x6>
   15bac:	00 d0       	rcall	.+0      	; 0x15bae <SS80_Execute_State+0x8>
   15bae:	1f 92       	push	r1
    int ret = 0;

    gpib_disable_PPR(SS80p->HEADER.PPR);
   15bb0:	e0 91 74 19 	lds	r30, 0x1974	; 0x801974 <SS80p>
   15bb4:	f0 91 75 19 	lds	r31, 0x1975	; 0x801975 <SS80p+0x1>
   15bb8:	81 81       	ldd	r24, Z+1	; 0x01
   15bba:	90 e0       	ldi	r25, 0x00	; 0
   15bbc:	0e 94 c3 84 	call	0x10986	; 0x10986 <gpib_disable_PPR>
    switch(SS80s->estate)
   15bc0:	e0 91 72 19 	lds	r30, 0x1972	; 0x801972 <SS80s>
   15bc4:	f0 91 73 19 	lds	r31, 0x1973	; 0x801973 <SS80s+0x1>
   15bc8:	80 81       	ld	r24, Z
   15bca:	91 81       	ldd	r25, Z+1	; 0x01
   15bcc:	82 30       	cpi	r24, 0x02	; 2
   15bce:	91 05       	cpc	r25, r1
   15bd0:	89 f0       	breq	.+34     	; 0x15bf4 <SS80_Execute_State+0x4e>
   15bd2:	3c f4       	brge	.+14     	; 0x15be2 <SS80_Execute_State+0x3c>
   15bd4:	00 97       	sbiw	r24, 0x00	; 0
   15bd6:	81 f1       	breq	.+96     	; 0x15c38 <SS80_Execute_State+0x92>
   15bd8:	81 30       	cpi	r24, 0x01	; 1
   15bda:	91 05       	cpc	r25, r1
   15bdc:	b9 f4       	brne	.+46     	; 0x15c0c <SS80_Execute_State+0x66>
    {
        case EXEC_IDLE:
            break;
        case EXEC_LOCATE_AND_READ:
            ret = SS80_locate_and_read();
   15bde:	81 de       	rcall	.-766    	; 0x158e2 <SS80_locate_and_read>
   15be0:	0d c0       	rjmp	.+26     	; 0x15bfc <SS80_Execute_State+0x56>
int SS80_Execute_State(void)
{
    int ret = 0;

    gpib_disable_PPR(SS80p->HEADER.PPR);
    switch(SS80s->estate)
   15be2:	83 30       	cpi	r24, 0x03	; 3
   15be4:	91 05       	cpc	r25, r1
   15be6:	41 f0       	breq	.+16     	; 0x15bf8 <SS80_Execute_State+0x52>
   15be8:	84 30       	cpi	r24, 0x04	; 4
   15bea:	91 05       	cpc	r25, r1
   15bec:	79 f4       	brne	.+30     	; 0x15c0c <SS80_Execute_State+0x66>
        case EXEC_SEND_STATUS:
            ret = SS80_send_status();
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_DESCRIBE:
            ret = SS80_describe();
   15bee:	0e 94 a8 a4 	call	0x14950	; 0x14950 <SS80_describe>
        case EXEC_LOCATE_AND_READ:
            ret = SS80_locate_and_read();
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_LOCATE_AND_WRITE:
            ret = SS80_locate_and_write();
   15bf2:	04 c0       	rjmp	.+8      	; 0x15bfc <SS80_Execute_State+0x56>
   15bf4:	59 da       	rcall	.-2894   	; 0x150a8 <SS80_locate_and_write>
   15bf6:	02 c0       	rjmp	.+4      	; 0x15bfc <SS80_Execute_State+0x56>
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_SEND_STATUS:
            ret = SS80_send_status();
   15bf8:	0e 94 27 a4 	call	0x1484e	; 0x1484e <SS80_send_status>
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_DESCRIBE:
            ret = SS80_describe();
   15bfc:	ec 01       	movw	r28, r24
            SS80s->estate = EXEC_IDLE;
   15bfe:	e0 91 72 19 	lds	r30, 0x1972	; 0x801972 <SS80s>
   15c02:	f0 91 73 19 	lds	r31, 0x1973	; 0x801973 <SS80s+0x1>
   15c06:	11 82       	std	Z+1, r1	; 0x01
   15c08:	10 82       	st	Z, r1
            break;
   15c0a:	18 c0       	rjmp	.+48     	; 0x15c3c <SS80_Execute_State+0x96>
        default:
            if(debuglevel & GPIB_ERR)
   15c0c:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   15c10:	20 ff       	sbrs	r18, 0
   15c12:	0c c0       	rjmp	.+24     	; 0x15c2c <SS80_Execute_State+0x86>
                printf("[SS80 EXEC state:%d error]\n", SS80s->estate);
   15c14:	ed b7       	in	r30, 0x3d	; 61
   15c16:	fe b7       	in	r31, 0x3e	; 62
   15c18:	95 83       	std	Z+5, r25	; 0x05
   15c1a:	84 83       	std	Z+4, r24	; 0x04
   15c1c:	85 ef       	ldi	r24, 0xF5	; 245
   15c1e:	95 e2       	ldi	r25, 0x25	; 37
   15c20:	a0 e0       	ldi	r26, 0x00	; 0
   15c22:	81 83       	std	Z+1, r24	; 0x01
   15c24:	92 83       	std	Z+2, r25	; 0x02
   15c26:	a3 83       	std	Z+3, r26	; 0x03
   15c28:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
            SS80s->estate = EXEC_IDLE;
   15c2c:	e0 91 72 19 	lds	r30, 0x1972	; 0x801972 <SS80s>
   15c30:	f0 91 73 19 	lds	r31, 0x1973	; 0x801973 <SS80s+0x1>
   15c34:	11 82       	std	Z+1, r1	; 0x01
   15c36:	10 82       	st	Z, r1
/// @return 0 on sucess
/// @return GPIB error flags on fail
/// @see gpib.h ERROR_MASK defines for a full list of error flags.
int SS80_Execute_State(void)
{
    int ret = 0;
   15c38:	c0 e0       	ldi	r28, 0x00	; 0
   15c3a:	d0 e0       	ldi	r29, 0x00	; 0
            if(debuglevel & GPIB_ERR)
                printf("[SS80 EXEC state:%d error]\n", SS80s->estate);
            SS80s->estate = EXEC_IDLE;
            break;
    }
    gpib_enable_PPR(SS80p->HEADER.PPR);
   15c3c:	e0 91 74 19 	lds	r30, 0x1974	; 0x801974 <SS80p>
   15c40:	f0 91 75 19 	lds	r31, 0x1975	; 0x801975 <SS80p+0x1>
   15c44:	81 81       	ldd	r24, Z+1	; 0x01
   15c46:	90 e0       	ldi	r25, 0x00	; 0
   15c48:	0e 94 8d 84 	call	0x1091a	; 0x1091a <gpib_enable_PPR>
    return(ret);
}
   15c4c:	ce 01       	movw	r24, r28
   15c4e:	cd b7       	in	r28, 0x3d	; 61
   15c50:	de b7       	in	r29, 0x3e	; 62
   15c52:	25 96       	adiw	r28, 0x05	; 5
   15c54:	e2 e0       	ldi	r30, 0x02	; 2
   15c56:	0c 94 35 e3 	jmp	0x1c66a	; 0x1c66a <__epilogue_restores__+0x20>

00015c5a <SS80_COMMANDS>:
/// @param[in] ch command.
/// @return  0 on send
/// @see GPIB error status
/// @see gpib.h _FLAGS defines for a full list.
int SS80_COMMANDS(uint8_t ch)
{
   15c5a:	a9 e0       	ldi	r26, 0x09	; 9
   15c5c:	b0 e0       	ldi	r27, 0x00	; 0
   15c5e:	e3 e3       	ldi	r30, 0x33	; 51
   15c60:	fe ea       	ldi	r31, 0xAE	; 174
   15c62:	0c 94 18 e3 	jmp	0x1c630	; 0x1c630 <__prologue_saves__+0x1e>
   15c66:	18 2f       	mov	r17, r24
    if(SS80_is_MTA(talking) || SS80_is_MLA(listening))
   15c68:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   15c6c:	90 e0       	ldi	r25, 0x00	; 0
   15c6e:	0e 94 ce 8a 	call	0x1159c	; 0x1159c <SS80_is_MTA>
   15c72:	89 2b       	or	r24, r25
   15c74:	19 f0       	breq	.+6      	; 0x15c7c <SS80_COMMANDS+0x22>
    {
        if(ch == 0x65 )
   15c76:	15 36       	cpi	r17, 0x65	; 101
   15c78:	19 f5       	brne	.+70     	; 0x15cc0 <SS80_COMMANDS+0x66>
   15c7a:	09 c0       	rjmp	.+18     	; 0x15c8e <SS80_COMMANDS+0x34>
/// @return  0 on send
/// @see GPIB error status
/// @see gpib.h _FLAGS defines for a full list.
int SS80_COMMANDS(uint8_t ch)
{
    if(SS80_is_MTA(talking) || SS80_is_MLA(listening))
   15c7c:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   15c80:	90 e0       	ldi	r25, 0x00	; 0
   15c82:	0e 94 bd 8a 	call	0x1157a	; 0x1157a <SS80_is_MLA>
   15c86:	ec 01       	movw	r28, r24
   15c88:	89 2b       	or	r24, r25
   15c8a:	a9 f7       	brne	.-22     	; 0x15c76 <SS80_COMMANDS+0x1c>
   15c8c:	ad c0       	rjmp	.+346    	; 0x15de8 <SS80_COMMANDS+0x18e>
    {
        if(ch == 0x65 )
        {
            if(SS80_is_MLA(listening))
   15c8e:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   15c92:	90 e0       	ldi	r25, 0x00	; 0
   15c94:	0e 94 bd 8a 	call	0x1157a	; 0x1157a <SS80_is_MLA>
   15c98:	89 2b       	or	r24, r25
   15c9a:	09 f4       	brne	.+2      	; 0x15c9e <SS80_COMMANDS+0x44>
   15c9c:	a2 c0       	rjmp	.+324    	; 0x15de2 <SS80_COMMANDS+0x188>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15c9e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15ca2:	85 ff       	sbrs	r24, 5
   15ca4:	0a c0       	rjmp	.+20     	; 0x15cba <SS80_COMMANDS+0x60>
                    printf("[SS80 Command State]\n");
   15ca6:	8d ed       	ldi	r24, 0xDD	; 221
   15ca8:	9e e1       	ldi	r25, 0x1E	; 30
   15caa:	a0 e0       	ldi	r26, 0x00	; 0
   15cac:	ed b7       	in	r30, 0x3d	; 61
   15cae:	fe b7       	in	r31, 0x3e	; 62
   15cb0:	81 83       	std	Z+1, r24	; 0x01
   15cb2:	92 83       	std	Z+2, r25	; 0x02
   15cb4:	a3 83       	std	Z+3, r26	; 0x03
   15cb6:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
#endif
                return ( SS80_Command_State() );
   15cba:	0e 94 68 a5 	call	0x14ad0	; 0x14ad0 <SS80_Command_State>
   15cbe:	73 c0       	rjmp	.+230    	; 0x15da6 <SS80_COMMANDS+0x14c>
            }
            return(0);
        }

        if(ch == 0x6e )
   15cc0:	1e 36       	cpi	r17, 0x6E	; 110
   15cc2:	01 f5       	brne	.+64     	; 0x15d04 <SS80_COMMANDS+0xaa>
        {
            if(SS80_is_MLA(listening)  || SS80_is_MTA(talking))
   15cc4:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   15cc8:	90 e0       	ldi	r25, 0x00	; 0
   15cca:	0e 94 bd 8a 	call	0x1157a	; 0x1157a <SS80_is_MLA>
   15cce:	89 2b       	or	r24, r25
   15cd0:	79 f0       	breq	.+30     	; 0x15cf0 <SS80_COMMANDS+0x96>
            {
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15cd2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15cd6:	85 ff       	sbrs	r24, 5
   15cd8:	13 c0       	rjmp	.+38     	; 0x15d00 <SS80_COMMANDS+0xa6>
                    printf("[SS00 Execute State]\n");
   15cda:	87 ec       	ldi	r24, 0xC7	; 199
   15cdc:	9e e1       	ldi	r25, 0x1E	; 30
   15cde:	a0 e0       	ldi	r26, 0x00	; 0
   15ce0:	ed b7       	in	r30, 0x3d	; 61
   15ce2:	fe b7       	in	r31, 0x3e	; 62
   15ce4:	81 83       	std	Z+1, r24	; 0x01
   15ce6:	92 83       	std	Z+2, r25	; 0x02
   15ce8:	a3 83       	std	Z+3, r26	; 0x03
   15cea:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   15cee:	08 c0       	rjmp	.+16     	; 0x15d00 <SS80_COMMANDS+0xa6>
            return(0);
        }

        if(ch == 0x6e )
        {
            if(SS80_is_MLA(listening)  || SS80_is_MTA(talking))
   15cf0:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   15cf4:	90 e0       	ldi	r25, 0x00	; 0
   15cf6:	0e 94 ce 8a 	call	0x1159c	; 0x1159c <SS80_is_MTA>
   15cfa:	89 2b       	or	r24, r25
   15cfc:	51 f7       	brne	.-44     	; 0x15cd2 <SS80_COMMANDS+0x78>
   15cfe:	71 c0       	rjmp	.+226    	; 0x15de2 <SS80_COMMANDS+0x188>
            {
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
                    printf("[SS00 Execute State]\n");
                return ( SS80_Execute_State() );
   15d00:	52 df       	rcall	.-348    	; 0x15ba6 <SS80_Execute_State>
   15d02:	51 c0       	rjmp	.+162    	; 0x15da6 <SS80_COMMANDS+0x14c>

            }
            return(0);
        }

        if(ch == 0x70 )
   15d04:	10 37       	cpi	r17, 0x70	; 112
   15d06:	b9 f5       	brne	.+110    	; 0x15d76 <SS80_COMMANDS+0x11c>
        {
            if(SS80_is_MTA(talking) )
   15d08:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   15d0c:	90 e0       	ldi	r25, 0x00	; 0
   15d0e:	0e 94 ce 8a 	call	0x1159c	; 0x1159c <SS80_is_MTA>
   15d12:	89 2b       	or	r24, r25
   15d14:	81 f0       	breq	.+32     	; 0x15d36 <SS80_COMMANDS+0xdc>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15d16:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15d1a:	85 ff       	sbrs	r24, 5
   15d1c:	0a c0       	rjmp	.+20     	; 0x15d32 <SS80_COMMANDS+0xd8>
                    printf("[SS80 Report State]\n");
   15d1e:	82 eb       	ldi	r24, 0xB2	; 178
   15d20:	9e e1       	ldi	r25, 0x1E	; 30
   15d22:	a0 e0       	ldi	r26, 0x00	; 0
   15d24:	ed b7       	in	r30, 0x3d	; 61
   15d26:	fe b7       	in	r31, 0x3e	; 62
   15d28:	81 83       	std	Z+1, r24	; 0x01
   15d2a:	92 83       	std	Z+2, r25	; 0x02
   15d2c:	a3 83       	std	Z+3, r26	; 0x03
   15d2e:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
#endif
                return( SS80_Report() );
   15d32:	4c db       	rcall	.-2408   	; 0x153cc <SS80_Report>
   15d34:	38 c0       	rjmp	.+112    	; 0x15da6 <SS80_COMMANDS+0x14c>
            }

            if(SS80_is_MLA(listening))
   15d36:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   15d3a:	90 e0       	ldi	r25, 0x00	; 0
   15d3c:	0e 94 bd 8a 	call	0x1157a	; 0x1157a <SS80_is_MLA>
   15d40:	89 2b       	or	r24, r25
   15d42:	09 f4       	brne	.+2      	; 0x15d46 <SS80_COMMANDS+0xec>
   15d44:	4e c0       	rjmp	.+156    	; 0x15de2 <SS80_COMMANDS+0x188>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15d46:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15d4a:	85 ff       	sbrs	r24, 5
   15d4c:	0a c0       	rjmp	.+20     	; 0x15d62 <SS80_COMMANDS+0x108>
                    printf("[Amigo Clear]\n");
   15d4e:	83 ea       	ldi	r24, 0xA3	; 163
   15d50:	9e e1       	ldi	r25, 0x1E	; 30
   15d52:	a0 e0       	ldi	r26, 0x00	; 0
   15d54:	ed b7       	in	r30, 0x3d	; 61
   15d56:	fe b7       	in	r31, 0x3e	; 62
   15d58:	81 83       	std	Z+1, r24	; 0x01
   15d5a:	92 83       	std	Z+2, r25	; 0x02
   15d5c:	a3 83       	std	Z+3, r26	; 0x03
   15d5e:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
#endif
                gpib_disable_PPR(SS80p->HEADER.PPR);
   15d62:	e0 91 74 19 	lds	r30, 0x1974	; 0x801974 <SS80p>
   15d66:	f0 91 75 19 	lds	r31, 0x1975	; 0x801975 <SS80p+0x1>
   15d6a:	81 81       	ldd	r24, Z+1	; 0x01
   15d6c:	90 e0       	ldi	r25, 0x00	; 0
   15d6e:	0e 94 c3 84 	call	0x10986	; 0x10986 <gpib_disable_PPR>
                return( SS80_Amigo_Clear() );
   15d72:	1d dc       	rcall	.-1990   	; 0x155ae <SS80_Amigo_Clear>
   15d74:	18 c0       	rjmp	.+48     	; 0x15da6 <SS80_COMMANDS+0x14c>
            }
            return (0);
        }
        if(ch == 0x72 )
   15d76:	12 37       	cpi	r17, 0x72	; 114
   15d78:	c1 f4       	brne	.+48     	; 0x15daa <SS80_COMMANDS+0x150>
        {
            if(SS80_is_MLA(listening) )
   15d7a:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   15d7e:	90 e0       	ldi	r25, 0x00	; 0
   15d80:	0e 94 bd 8a 	call	0x1157a	; 0x1157a <SS80_is_MLA>
   15d84:	89 2b       	or	r24, r25
   15d86:	89 f0       	breq	.+34     	; 0x15daa <SS80_COMMANDS+0x150>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15d88:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15d8c:	85 ff       	sbrs	r24, 5
   15d8e:	0a c0       	rjmp	.+20     	; 0x15da4 <SS80_COMMANDS+0x14a>
                    printf("[SS80 Transparent]\n");
   15d90:	8f e8       	ldi	r24, 0x8F	; 143
   15d92:	9e e1       	ldi	r25, 0x1E	; 30
   15d94:	a0 e0       	ldi	r26, 0x00	; 0
   15d96:	ed b7       	in	r30, 0x3d	; 61
   15d98:	fe b7       	in	r31, 0x3e	; 62
   15d9a:	81 83       	std	Z+1, r24	; 0x01
   15d9c:	92 83       	std	Z+2, r25	; 0x02
   15d9e:	a3 83       	std	Z+3, r26	; 0x03
   15da0:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
#endif
                return( SS80_Transparent_State() );
   15da4:	58 dc       	rcall	.-1872   	; 0x15656 <SS80_Transparent_State>
   15da6:	ec 01       	movw	r28, r24
   15da8:	3b c0       	rjmp	.+118    	; 0x15e20 <SS80_COMMANDS+0x1c6>
            }
        }
        if(debuglevel & GPIB_ERR)
   15daa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15dae:	80 ff       	sbrs	r24, 0
   15db0:	18 c0       	rjmp	.+48     	; 0x15de2 <SS80_COMMANDS+0x188>
            printf("[SS80 SC Unknown: %02XH, listen:%02XH, talk:%02XH]\n",
   15db2:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   15db6:	90 e0       	ldi	r25, 0x00	; 0
   15db8:	ed b7       	in	r30, 0x3d	; 61
   15dba:	fe b7       	in	r31, 0x3e	; 62
   15dbc:	91 87       	std	Z+9, r25	; 0x09
   15dbe:	80 87       	std	Z+8, r24	; 0x08
   15dc0:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   15dc4:	90 e0       	ldi	r25, 0x00	; 0
   15dc6:	97 83       	std	Z+7, r25	; 0x07
   15dc8:	86 83       	std	Z+6, r24	; 0x06
   15dca:	81 2f       	mov	r24, r17
   15dcc:	90 e0       	ldi	r25, 0x00	; 0
   15dce:	95 83       	std	Z+5, r25	; 0x05
   15dd0:	84 83       	std	Z+4, r24	; 0x04
   15dd2:	8b e5       	ldi	r24, 0x5B	; 91
   15dd4:	9e e1       	ldi	r25, 0x1E	; 30
   15dd6:	a0 e0       	ldi	r26, 0x00	; 0
   15dd8:	81 83       	std	Z+1, r24	; 0x01
   15dda:	92 83       	std	Z+2, r25	; 0x02
   15ddc:	a3 83       	std	Z+3, r26	; 0x03
   15dde:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
                0xff & ch, 0xff & listening, 0xff & talking);
        return(0);
   15de2:	c0 e0       	ldi	r28, 0x00	; 0
   15de4:	d0 e0       	ldi	r29, 0x00	; 0
   15de6:	1c c0       	rjmp	.+56     	; 0x15e20 <SS80_COMMANDS+0x1c6>
    }

    if(debuglevel & GPIB_ERR)
   15de8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15dec:	80 ff       	sbrs	r24, 0
   15dee:	f9 cf       	rjmp	.-14     	; 0x15de2 <SS80_COMMANDS+0x188>
        printf("[SS80 Unknown SC: %02XH, listen:%02XH, talk:%02XH]\n",
   15df0:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   15df4:	90 e0       	ldi	r25, 0x00	; 0
   15df6:	ed b7       	in	r30, 0x3d	; 61
   15df8:	fe b7       	in	r31, 0x3e	; 62
   15dfa:	91 87       	std	Z+9, r25	; 0x09
   15dfc:	80 87       	std	Z+8, r24	; 0x08
   15dfe:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   15e02:	90 e0       	ldi	r25, 0x00	; 0
   15e04:	97 83       	std	Z+7, r25	; 0x07
   15e06:	86 83       	std	Z+6, r24	; 0x06
   15e08:	81 2f       	mov	r24, r17
   15e0a:	90 e0       	ldi	r25, 0x00	; 0
   15e0c:	95 83       	std	Z+5, r25	; 0x05
   15e0e:	84 83       	std	Z+4, r24	; 0x04
   15e10:	87 e2       	ldi	r24, 0x27	; 39
   15e12:	9e e1       	ldi	r25, 0x1E	; 30
   15e14:	a0 e0       	ldi	r26, 0x00	; 0
   15e16:	81 83       	std	Z+1, r24	; 0x01
   15e18:	92 83       	std	Z+2, r25	; 0x02
   15e1a:	a3 83       	std	Z+3, r26	; 0x03
   15e1c:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
            0xff & ch, 0xff & listening, 0xff & talking);
    return(0);
}
   15e20:	ce 01       	movw	r24, r28
   15e22:	cd b7       	in	r28, 0x3d	; 61
   15e24:	de b7       	in	r29, 0x3e	; 62
   15e26:	29 96       	adiw	r28, 0x09	; 9
   15e28:	e3 e0       	ldi	r30, 0x03	; 3
   15e2a:	0c 94 34 e3 	jmp	0x1c668	; 0x1c668 <__epilogue_restores__+0x1e>

00015e2e <amigo_overflow_check>:
    }
/// @todo FIXME
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
    AMIGOs->dsj = 0;
    return(status & ERROR_MASK);
}
   15e2e:	cf 92       	push	r12
   15e30:	df 92       	push	r13
   15e32:	ef 92       	push	r14
   15e34:	0f 93       	push	r16
   15e36:	1f 93       	push	r17
   15e38:	cf 93       	push	r28
   15e3a:	df 93       	push	r29
   15e3c:	00 d0       	rcall	.+0      	; 0x15e3e <amigo_overflow_check+0x10>
   15e3e:	00 d0       	rcall	.+0      	; 0x15e40 <amigo_overflow_check+0x12>
   15e40:	1f 92       	push	r1
   15e42:	ec 01       	movw	r28, r24
   15e44:	8b 01       	movw	r16, r22
   15e46:	80 e0       	ldi	r24, 0x00	; 0
   15e48:	90 e0       	ldi	r25, 0x00	; 0
   15e4a:	2f ed       	ldi	r18, 0xDF	; 223
   15e4c:	3d e2       	ldi	r19, 0x2D	; 45
   15e4e:	69 01       	movw	r12, r18
   15e50:	e1 2c       	mov	r14, r1
   15e52:	2d 81       	ldd	r18, Y+5	; 0x05
   15e54:	30 e0       	ldi	r19, 0x00	; 0
   15e56:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <AMIGOp>
   15e5a:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <AMIGOp+0x1>
   15e5e:	40 85       	ldd	r20, Z+8	; 0x08
   15e60:	51 85       	ldd	r21, Z+9	; 0x09
   15e62:	24 17       	cp	r18, r20
   15e64:	35 07       	cpc	r19, r21
   15e66:	64 f1       	brlt	.+88     	; 0x15ec0 <amigo_overflow_check+0x92>
   15e68:	1d 82       	std	Y+5, r1	; 0x05
   15e6a:	2c 81       	ldd	r18, Y+4	; 0x04
   15e6c:	2f 5f       	subi	r18, 0xFF	; 255
   15e6e:	2c 83       	std	Y+4, r18	; 0x04
   15e70:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <AMIGOp>
   15e74:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <AMIGOp+0x1>
   15e78:	2c 81       	ldd	r18, Y+4	; 0x04
   15e7a:	30 e0       	ldi	r19, 0x00	; 0
   15e7c:	42 85       	ldd	r20, Z+10	; 0x0a
   15e7e:	53 85       	ldd	r21, Z+11	; 0x0b
   15e80:	24 17       	cp	r18, r20
   15e82:	35 07       	cpc	r19, r21
   15e84:	34 f3       	brlt	.-52     	; 0x15e52 <amigo_overflow_check+0x24>
   15e86:	1c 82       	std	Y+4, r1	; 0x04
   15e88:	2b 81       	ldd	r18, Y+3	; 0x03
   15e8a:	2f 5f       	subi	r18, 0xFF	; 255
   15e8c:	2b 83       	std	Y+3, r18	; 0x03
   15e8e:	30 e0       	ldi	r19, 0x00	; 0
   15e90:	44 85       	ldd	r20, Z+12	; 0x0c
   15e92:	55 85       	ldd	r21, Z+13	; 0x0d
   15e94:	24 17       	cp	r18, r20
   15e96:	35 07       	cpc	r19, r21
   15e98:	5c f3       	brlt	.-42     	; 0x15e70 <amigo_overflow_check+0x42>
   15e9a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15e9e:	80 ff       	sbrs	r24, 0
   15ea0:	0c c0       	rjmp	.+24     	; 0x15eba <amigo_overflow_check+0x8c>
   15ea2:	01 15       	cp	r16, r1
   15ea4:	11 05       	cpc	r17, r1
   15ea6:	49 f0       	breq	.+18     	; 0x15eba <amigo_overflow_check+0x8c>
   15ea8:	ed b7       	in	r30, 0x3d	; 61
   15eaa:	fe b7       	in	r31, 0x3e	; 62
   15eac:	15 83       	std	Z+5, r17	; 0x05
   15eae:	04 83       	std	Z+4, r16	; 0x04
   15eb0:	c1 82       	std	Z+1, r12	; 0x01
   15eb2:	d2 82       	std	Z+2, r13	; 0x02
   15eb4:	e3 82       	std	Z+3, r14	; 0x03
   15eb6:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   15eba:	81 e0       	ldi	r24, 0x01	; 1
   15ebc:	90 e0       	ldi	r25, 0x00	; 0
   15ebe:	d8 cf       	rjmp	.-80     	; 0x15e70 <amigo_overflow_check+0x42>
   15ec0:	0f 90       	pop	r0
   15ec2:	0f 90       	pop	r0
   15ec4:	0f 90       	pop	r0
   15ec6:	0f 90       	pop	r0
   15ec8:	0f 90       	pop	r0
   15eca:	df 91       	pop	r29
   15ecc:	cf 91       	pop	r28
   15ece:	1f 91       	pop	r17
   15ed0:	0f 91       	pop	r16
   15ed2:	ef 90       	pop	r14
   15ed4:	df 90       	pop	r13
   15ed6:	cf 90       	pop	r12
   15ed8:	08 95       	ret

00015eda <amigo_chs_to_logical>:
   15eda:	a1 e1       	ldi	r26, 0x11	; 17
   15edc:	b0 e0       	ldi	r27, 0x00	; 0
   15ede:	e3 e7       	ldi	r30, 0x73	; 115
   15ee0:	ff ea       	ldi	r31, 0xAF	; 175
   15ee2:	0c 94 0d e3 	jmp	0x1c61a	; 0x1c61a <__prologue_saves__+0x8>
   15ee6:	8b 01       	movw	r16, r22
   15ee8:	60 91 70 19 	lds	r22, 0x1970	; 0x801970 <AMIGOp>
   15eec:	70 91 71 19 	lds	r23, 0x1971	; 0x801971 <AMIGOp+0x1>
   15ef0:	fb 01       	movw	r30, r22
   15ef2:	40 85       	ldd	r20, Z+8	; 0x08
   15ef4:	51 85       	ldd	r21, Z+9	; 0x09
   15ef6:	fc 01       	movw	r30, r24
   15ef8:	c4 81       	ldd	r28, Z+4	; 0x04
   15efa:	d0 e0       	ldi	r29, 0x00	; 0
   15efc:	4c 9f       	mul	r20, r28
   15efe:	90 01       	movw	r18, r0
   15f00:	4d 9f       	mul	r20, r29
   15f02:	30 0d       	add	r19, r0
   15f04:	5c 9f       	mul	r21, r28
   15f06:	30 0d       	add	r19, r0
   15f08:	11 24       	eor	r1, r1
   15f0a:	49 01       	movw	r8, r18
   15f0c:	33 0f       	add	r19, r19
   15f0e:	aa 08       	sbc	r10, r10
   15f10:	bb 08       	sbc	r11, r11
   15f12:	63 80       	ldd	r6, Z+3	; 0x03
   15f14:	71 2c       	mov	r7, r1
   15f16:	fb 01       	movw	r30, r22
   15f18:	e2 84       	ldd	r14, Z+10	; 0x0a
   15f1a:	f3 84       	ldd	r15, Z+11	; 0x0b
   15f1c:	4e 9d       	mul	r20, r14
   15f1e:	d0 01       	movw	r26, r0
   15f20:	4f 9d       	mul	r20, r15
   15f22:	b0 0d       	add	r27, r0
   15f24:	5e 9d       	mul	r21, r14
   15f26:	b0 0d       	add	r27, r0
   15f28:	11 24       	eor	r1, r1
   15f2a:	a6 9d       	mul	r26, r6
   15f2c:	90 01       	movw	r18, r0
   15f2e:	a7 9d       	mul	r26, r7
   15f30:	30 0d       	add	r19, r0
   15f32:	b6 9d       	mul	r27, r6
   15f34:	30 0d       	add	r19, r0
   15f36:	11 24       	eor	r1, r1
   15f38:	69 01       	movw	r12, r18
   15f3a:	33 0f       	add	r19, r19
   15f3c:	ee 08       	sbc	r14, r14
   15f3e:	ff 08       	sbc	r15, r15
   15f40:	8c 0c       	add	r8, r12
   15f42:	9d 1c       	adc	r9, r13
   15f44:	ae 1c       	adc	r10, r14
   15f46:	bf 1c       	adc	r11, r15
   15f48:	fc 01       	movw	r30, r24
   15f4a:	f5 80       	ldd	r15, Z+5	; 0x05
   15f4c:	a5 01       	movw	r20, r10
   15f4e:	94 01       	movw	r18, r8
   15f50:	2f 0d       	add	r18, r15
   15f52:	31 1d       	adc	r19, r1
   15f54:	41 1d       	adc	r20, r1
   15f56:	51 1d       	adc	r21, r1
   15f58:	fb 01       	movw	r30, r22
   15f5a:	a6 81       	ldd	r26, Z+6	; 0x06
   15f5c:	b7 81       	ldd	r27, Z+7	; 0x07
   15f5e:	0e 94 f3 e2 	call	0x1c5e6	; 0x1c5e6 <__mulshisi3>
   15f62:	4b 01       	movw	r8, r22
   15f64:	5c 01       	movw	r10, r24
   15f66:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15f6a:	85 ff       	sbrs	r24, 5
   15f6c:	22 c0       	rjmp	.+68     	; 0x15fb2 <amigo_chs_to_logical+0xd8>
   15f6e:	8f 2d       	mov	r24, r15
   15f70:	90 e0       	ldi	r25, 0x00	; 0
   15f72:	ed b7       	in	r30, 0x3d	; 61
   15f74:	fe b7       	in	r31, 0x3e	; 62
   15f76:	91 8b       	std	Z+17, r25	; 0x11
   15f78:	80 8b       	std	Z+16, r24	; 0x10
   15f7a:	d7 87       	std	Z+15, r29	; 0x0f
   15f7c:	c6 87       	std	Z+14, r28	; 0x0e
   15f7e:	75 86       	std	Z+13, r7	; 0x0d
   15f80:	64 86       	std	Z+12, r6	; 0x0c
   15f82:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <AMIGOs>
   15f86:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <AMIGOs+0x1>
   15f8a:	81 81       	ldd	r24, Z+1	; 0x01
   15f8c:	90 e0       	ldi	r25, 0x00	; 0
   15f8e:	ed b7       	in	r30, 0x3d	; 61
   15f90:	fe b7       	in	r31, 0x3e	; 62
   15f92:	93 87       	std	Z+11, r25	; 0x0b
   15f94:	82 87       	std	Z+10, r24	; 0x0a
   15f96:	86 82       	std	Z+6, r8	; 0x06
   15f98:	97 82       	std	Z+7, r9	; 0x07
   15f9a:	a0 86       	std	Z+8, r10	; 0x08
   15f9c:	b1 86       	std	Z+9, r11	; 0x09
   15f9e:	15 83       	std	Z+5, r17	; 0x05
   15fa0:	04 83       	std	Z+4, r16	; 0x04
   15fa2:	8c e8       	ldi	r24, 0x8C	; 140
   15fa4:	9d e2       	ldi	r25, 0x2D	; 45
   15fa6:	a0 e0       	ldi	r26, 0x00	; 0
   15fa8:	81 83       	std	Z+1, r24	; 0x01
   15faa:	92 83       	std	Z+2, r25	; 0x02
   15fac:	a3 83       	std	Z+3, r26	; 0x03
   15fae:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   15fb2:	c5 01       	movw	r24, r10
   15fb4:	b4 01       	movw	r22, r8
   15fb6:	cd b7       	in	r28, 0x3d	; 61
   15fb8:	de b7       	in	r29, 0x3e	; 62
   15fba:	61 96       	adiw	r28, 0x11	; 17
   15fbc:	ee e0       	ldi	r30, 0x0E	; 14
   15fbe:	0c 94 29 e3 	jmp	0x1c652	; 0x1c652 <__epilogue_restores__+0x8>

00015fc2 <amigo_init>:
   15fc2:	ef 92       	push	r14
   15fc4:	ff 92       	push	r15
   15fc6:	0f 93       	push	r16
   15fc8:	1f 93       	push	r17
   15fca:	cf 93       	push	r28
   15fcc:	df 93       	push	r29
   15fce:	09 ed       	ldi	r16, 0xD9	; 217
   15fd0:	10 e2       	ldi	r17, 0x20	; 32
   15fd2:	cb e0       	ldi	r28, 0x0B	; 11
   15fd4:	d0 e0       	ldi	r29, 0x00	; 0
   15fd6:	84 e0       	ldi	r24, 0x04	; 4
   15fd8:	f8 2e       	mov	r15, r24
   15fda:	92 e0       	ldi	r25, 0x02	; 2
   15fdc:	e9 2e       	mov	r14, r25
   15fde:	d8 01       	movw	r26, r16
   15fe0:	8c 91       	ld	r24, X
   15fe2:	81 30       	cpi	r24, 0x01	; 1
   15fe4:	31 f5       	brne	.+76     	; 0x16032 <amigo_init+0x70>
   15fe6:	ce 01       	movw	r24, r28
   15fe8:	0e 94 cb 95 	call	0x12b96	; 0x12b96 <set_active_device>
   15fec:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <AMIGOs>
   15ff0:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <AMIGOs+0x1>
   15ff4:	10 82       	st	Z, r1
   15ff6:	9f 01       	movw	r18, r30
   15ff8:	27 5f       	subi	r18, 0xF7	; 247
   15ffa:	3f 4f       	sbci	r19, 0xFF	; 255
   15ffc:	d9 01       	movw	r26, r18
   15ffe:	8f 2d       	mov	r24, r15
   16000:	1d 92       	st	X+, r1
   16002:	8a 95       	dec	r24
   16004:	e9 f7       	brne	.-6      	; 0x16000 <amigo_init+0x3e>
   16006:	2c 5f       	subi	r18, 0xFC	; 252
   16008:	3f 4f       	sbci	r19, 0xFF	; 255
   1600a:	d9 01       	movw	r26, r18
   1600c:	8f 2d       	mov	r24, r15
   1600e:	1d 92       	st	X+, r1
   16010:	8a 95       	dec	r24
   16012:	e9 f7       	brne	.-6      	; 0x1600e <amigo_init+0x4c>
   16014:	11 82       	std	Z+1, r1	; 0x01
   16016:	15 82       	std	Z+5, r1	; 0x05
   16018:	14 82       	std	Z+4, r1	; 0x04
   1601a:	13 82       	std	Z+3, r1	; 0x03
   1601c:	e6 82       	std	Z+6, r14	; 0x06
   1601e:	10 86       	std	Z+8, r1	; 0x08
   16020:	17 82       	std	Z+7, r1	; 0x07
   16022:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <AMIGOp>
   16026:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <AMIGOp+0x1>
   1602a:	81 81       	ldd	r24, Z+1	; 0x01
   1602c:	90 e0       	ldi	r25, 0x00	; 0
   1602e:	0e 94 c3 84 	call	0x10986	; 0x10986 <gpib_disable_PPR>
   16032:	21 97       	sbiw	r28, 0x01	; 1
   16034:	0b 52       	subi	r16, 0x2B	; 43
   16036:	11 09       	sbc	r17, r1
   16038:	cf 3f       	cpi	r28, 0xFF	; 255
   1603a:	af ef       	ldi	r26, 0xFF	; 255
   1603c:	da 07       	cpc	r29, r26
   1603e:	79 f6       	brne	.-98     	; 0x15fde <amigo_init+0x1c>
   16040:	cd b7       	in	r28, 0x3d	; 61
   16042:	de b7       	in	r29, 0x3e	; 62
   16044:	e6 e0       	ldi	r30, 0x06	; 6
   16046:	0c 94 31 e3 	jmp	0x1c662	; 0x1c662 <__epilogue_restores__+0x18>

0001604a <amigo_request_logical_address>:
   1604a:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <AMIGOs>
   1604e:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <AMIGOs+0x1>
   16052:	15 86       	std	Z+13, r1	; 0x0d
   16054:	83 81       	ldd	r24, Z+3	; 0x03
   16056:	86 87       	std	Z+14, r24	; 0x0e
   16058:	84 81       	ldd	r24, Z+4	; 0x04
   1605a:	87 87       	std	Z+15, r24	; 0x0f
   1605c:	85 81       	ldd	r24, Z+5	; 0x05
   1605e:	80 8b       	std	Z+16, r24	; 0x10
   16060:	80 e0       	ldi	r24, 0x00	; 0
   16062:	90 e0       	ldi	r25, 0x00	; 0
   16064:	08 95       	ret

00016066 <amigo_request_status>:
   16066:	00 d0       	rcall	.+0      	; 0x16068 <amigo_request_status+0x2>
   16068:	1f 92       	push	r1
   1606a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1606e:	85 ff       	sbrs	r24, 5
   16070:	0a c0       	rjmp	.+20     	; 0x16086 <amigo_request_status+0x20>
   16072:	8f e5       	ldi	r24, 0x5F	; 95
   16074:	9e e2       	ldi	r25, 0x2E	; 46
   16076:	a0 e0       	ldi	r26, 0x00	; 0
   16078:	ed b7       	in	r30, 0x3d	; 61
   1607a:	fe b7       	in	r31, 0x3e	; 62
   1607c:	81 83       	std	Z+1, r24	; 0x01
   1607e:	92 83       	std	Z+2, r25	; 0x02
   16080:	a3 83       	std	Z+3, r26	; 0x03
   16082:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   16086:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <AMIGOs>
   1608a:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <AMIGOs+0x1>
   1608e:	11 86       	std	Z+9, r1	; 0x09
   16090:	81 81       	ldd	r24, Z+1	; 0x01
   16092:	82 87       	std	Z+10, r24	; 0x0a
   16094:	8d e0       	ldi	r24, 0x0D	; 13
   16096:	83 87       	std	Z+11, r24	; 0x0b
   16098:	14 86       	std	Z+12, r1	; 0x0c
   1609a:	0e 94 32 6e 	call	0xdc64	; 0xdc64 <mmc_wp_status>
   1609e:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <AMIGOs>
   160a2:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <AMIGOs+0x1>
   160a6:	89 2b       	or	r24, r25
   160a8:	19 f0       	breq	.+6      	; 0x160b0 <amigo_request_status+0x4a>
   160aa:	84 85       	ldd	r24, Z+12	; 0x0c
   160ac:	80 66       	ori	r24, 0x60	; 96
   160ae:	84 87       	std	Z+12, r24	; 0x0c
   160b0:	86 81       	ldd	r24, Z+6	; 0x06
   160b2:	82 30       	cpi	r24, 0x02	; 2
   160b4:	31 f4       	brne	.+12     	; 0x160c2 <amigo_request_status+0x5c>
   160b6:	83 e1       	ldi	r24, 0x13	; 19
   160b8:	81 87       	std	Z+9, r24	; 0x09
   160ba:	84 85       	ldd	r24, Z+12	; 0x0c
   160bc:	88 60       	ori	r24, 0x08	; 8
   160be:	84 87       	std	Z+12, r24	; 0x0c
   160c0:	21 c0       	rjmp	.+66     	; 0x16104 <amigo_request_status+0x9e>
   160c2:	27 81       	ldd	r18, Z+7	; 0x07
   160c4:	30 85       	ldd	r19, Z+8	; 0x08
   160c6:	21 15       	cp	r18, r1
   160c8:	31 05       	cpc	r19, r1
   160ca:	11 f4       	brne	.+4      	; 0x160d0 <amigo_request_status+0x6a>
   160cc:	81 30       	cpi	r24, 0x01	; 1
   160ce:	d1 f4       	brne	.+52     	; 0x16104 <amigo_request_status+0x9e>
   160d0:	26 fd       	sbrc	r18, 6
   160d2:	0c c0       	rjmp	.+24     	; 0x160ec <amigo_request_status+0x86>
   160d4:	25 ff       	sbrs	r18, 5
   160d6:	03 c0       	rjmp	.+6      	; 0x160de <amigo_request_status+0x78>
   160d8:	8a e0       	ldi	r24, 0x0A	; 10
   160da:	81 87       	std	Z+9, r24	; 0x09
   160dc:	0d c0       	rjmp	.+26     	; 0x160f8 <amigo_request_status+0x92>
   160de:	84 85       	ldd	r24, Z+12	; 0x0c
   160e0:	24 ff       	sbrs	r18, 4
   160e2:	02 c0       	rjmp	.+4      	; 0x160e8 <amigo_request_status+0x82>
   160e4:	83 60       	ori	r24, 0x03	; 3
   160e6:	07 c0       	rjmp	.+14     	; 0x160f6 <amigo_request_status+0x90>
   160e8:	21 ff       	sbrs	r18, 1
   160ea:	02 c0       	rjmp	.+4      	; 0x160f0 <amigo_request_status+0x8a>
   160ec:	83 e1       	ldi	r24, 0x13	; 19
   160ee:	f5 cf       	rjmp	.-22     	; 0x160da <amigo_request_status+0x74>
   160f0:	22 ff       	sbrs	r18, 2
   160f2:	02 c0       	rjmp	.+4      	; 0x160f8 <amigo_request_status+0x92>
   160f4:	84 60       	ori	r24, 0x04	; 4
   160f6:	84 87       	std	Z+12, r24	; 0x0c
   160f8:	84 85       	ldd	r24, Z+12	; 0x0c
   160fa:	80 61       	ori	r24, 0x10	; 16
   160fc:	84 87       	std	Z+12, r24	; 0x0c
   160fe:	83 85       	ldd	r24, Z+11	; 0x0b
   16100:	80 68       	ori	r24, 0x80	; 128
   16102:	83 87       	std	Z+11, r24	; 0x0b
   16104:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <AMIGOp>
   16108:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <AMIGOp+0x1>
   1610c:	81 81       	ldd	r24, Z+1	; 0x01
   1610e:	90 e0       	ldi	r25, 0x00	; 0
   16110:	0e 94 8d 84 	call	0x1091a	; 0x1091a <gpib_enable_PPR>
   16114:	80 e0       	ldi	r24, 0x00	; 0
   16116:	90 e0       	ldi	r25, 0x00	; 0
   16118:	0f 90       	pop	r0
   1611a:	0f 90       	pop	r0
   1611c:	0f 90       	pop	r0
   1611e:	08 95       	ret

00016120 <amigo_send_logical_address>:
   16120:	a5 e0       	ldi	r26, 0x05	; 5
   16122:	b0 e0       	ldi	r27, 0x00	; 0
   16124:	e6 e9       	ldi	r30, 0x96	; 150
   16126:	f0 eb       	ldi	r31, 0xB0	; 176
   16128:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__prologue_saves__+0x20>
   1612c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16130:	85 ff       	sbrs	r24, 5
   16132:	0a c0       	rjmp	.+20     	; 0x16148 <amigo_send_logical_address+0x28>
   16134:	81 e4       	ldi	r24, 0x41	; 65
   16136:	9e e2       	ldi	r25, 0x2E	; 46
   16138:	a0 e0       	ldi	r26, 0x00	; 0
   1613a:	ed b7       	in	r30, 0x3d	; 61
   1613c:	fe b7       	in	r31, 0x3e	; 62
   1613e:	81 83       	std	Z+1, r24	; 0x01
   16140:	92 83       	std	Z+2, r25	; 0x02
   16142:	a3 83       	std	Z+3, r26	; 0x03
   16144:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   16148:	80 e0       	ldi	r24, 0x00	; 0
   1614a:	91 e0       	ldi	r25, 0x01	; 1
   1614c:	9d 83       	std	Y+5, r25	; 0x05
   1614e:	8c 83       	std	Y+4, r24	; 0x04
   16150:	80 91 6e 19 	lds	r24, 0x196E	; 0x80196e <AMIGOs>
   16154:	90 91 6f 19 	lds	r25, 0x196F	; 0x80196f <AMIGOs+0x1>
   16158:	ae 01       	movw	r20, r28
   1615a:	4c 5f       	subi	r20, 0xFC	; 252
   1615c:	5f 4f       	sbci	r21, 0xFF	; 255
   1615e:	64 e0       	ldi	r22, 0x04	; 4
   16160:	70 e0       	ldi	r23, 0x00	; 0
   16162:	0d 96       	adiw	r24, 0x0d	; 13
   16164:	0e 94 bd 89 	call	0x1137a	; 0x1137a <gpib_write_str>
   16168:	2c 81       	ldd	r18, Y+4	; 0x04
   1616a:	3d 81       	ldd	r19, Y+5	; 0x05
   1616c:	22 27       	eor	r18, r18
   1616e:	30 7d       	andi	r19, 0xD0	; 208
   16170:	23 2b       	or	r18, r19
   16172:	11 f4       	brne	.+4      	; 0x16178 <amigo_send_logical_address+0x58>
   16174:	04 97       	sbiw	r24, 0x04	; 4
   16176:	c9 f0       	breq	.+50     	; 0x161aa <amigo_send_logical_address+0x8a>
   16178:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <AMIGOs>
   1617c:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <AMIGOs+0x1>
   16180:	87 81       	ldd	r24, Z+7	; 0x07
   16182:	90 85       	ldd	r25, Z+8	; 0x08
   16184:	80 62       	ori	r24, 0x20	; 32
   16186:	90 87       	std	Z+8, r25	; 0x08
   16188:	87 83       	std	Z+7, r24	; 0x07
   1618a:	81 e0       	ldi	r24, 0x01	; 1
   1618c:	86 83       	std	Z+6, r24	; 0x06
   1618e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16192:	80 ff       	sbrs	r24, 0
   16194:	0a c0       	rjmp	.+20     	; 0x161aa <amigo_send_logical_address+0x8a>
   16196:	87 e2       	ldi	r24, 0x27	; 39
   16198:	9e e2       	ldi	r25, 0x2E	; 46
   1619a:	a0 e0       	ldi	r26, 0x00	; 0
   1619c:	ed b7       	in	r30, 0x3d	; 61
   1619e:	fe b7       	in	r31, 0x3e	; 62
   161a0:	81 83       	std	Z+1, r24	; 0x01
   161a2:	92 83       	std	Z+2, r25	; 0x02
   161a4:	a3 83       	std	Z+3, r26	; 0x03
   161a6:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   161aa:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <AMIGOp>
   161ae:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <AMIGOp+0x1>
   161b2:	81 81       	ldd	r24, Z+1	; 0x01
   161b4:	90 e0       	ldi	r25, 0x00	; 0
   161b6:	0e 94 8d 84 	call	0x1091a	; 0x1091a <gpib_enable_PPR>
   161ba:	8c 81       	ldd	r24, Y+4	; 0x04
   161bc:	9d 81       	ldd	r25, Y+5	; 0x05
   161be:	88 27       	eor	r24, r24
   161c0:	90 7d       	andi	r25, 0xD0	; 208
   161c2:	25 96       	adiw	r28, 0x05	; 5
   161c4:	e2 e0       	ldi	r30, 0x02	; 2
   161c6:	0c 94 35 e3 	jmp	0x1c66a	; 0x1c66a <__epilogue_restores__+0x20>

000161ca <amigo_send_status>:
   161ca:	a5 e0       	ldi	r26, 0x05	; 5
   161cc:	b0 e0       	ldi	r27, 0x00	; 0
   161ce:	eb ee       	ldi	r30, 0xEB	; 235
   161d0:	f0 eb       	ldi	r31, 0xB0	; 176
   161d2:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__prologue_saves__+0x20>
   161d6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   161da:	85 ff       	sbrs	r24, 5
   161dc:	0a c0       	rjmp	.+20     	; 0x161f2 <amigo_send_status+0x28>
   161de:	82 e1       	ldi	r24, 0x12	; 18
   161e0:	9e e2       	ldi	r25, 0x2E	; 46
   161e2:	a0 e0       	ldi	r26, 0x00	; 0
   161e4:	ed b7       	in	r30, 0x3d	; 61
   161e6:	fe b7       	in	r31, 0x3e	; 62
   161e8:	81 83       	std	Z+1, r24	; 0x01
   161ea:	92 83       	std	Z+2, r25	; 0x02
   161ec:	a3 83       	std	Z+3, r26	; 0x03
   161ee:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   161f2:	80 e0       	ldi	r24, 0x00	; 0
   161f4:	91 e0       	ldi	r25, 0x01	; 1
   161f6:	9d 83       	std	Y+5, r25	; 0x05
   161f8:	8c 83       	std	Y+4, r24	; 0x04
   161fa:	80 91 6e 19 	lds	r24, 0x196E	; 0x80196e <AMIGOs>
   161fe:	90 91 6f 19 	lds	r25, 0x196F	; 0x80196f <AMIGOs+0x1>
   16202:	ae 01       	movw	r20, r28
   16204:	4c 5f       	subi	r20, 0xFC	; 252
   16206:	5f 4f       	sbci	r21, 0xFF	; 255
   16208:	64 e0       	ldi	r22, 0x04	; 4
   1620a:	70 e0       	ldi	r23, 0x00	; 0
   1620c:	09 96       	adiw	r24, 0x09	; 9
   1620e:	0e 94 bd 89 	call	0x1137a	; 0x1137a <gpib_write_str>
   16212:	2c 81       	ldd	r18, Y+4	; 0x04
   16214:	3d 81       	ldd	r19, Y+5	; 0x05
   16216:	22 27       	eor	r18, r18
   16218:	30 7d       	andi	r19, 0xD0	; 208
   1621a:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <AMIGOs>
   1621e:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <AMIGOs+0x1>
   16222:	23 2b       	or	r18, r19
   16224:	11 f4       	brne	.+4      	; 0x1622a <amigo_send_status+0x60>
   16226:	04 97       	sbiw	r24, 0x04	; 4
   16228:	b1 f0       	breq	.+44     	; 0x16256 <amigo_send_status+0x8c>
   1622a:	87 81       	ldd	r24, Z+7	; 0x07
   1622c:	90 85       	ldd	r25, Z+8	; 0x08
   1622e:	80 62       	ori	r24, 0x20	; 32
   16230:	90 87       	std	Z+8, r25	; 0x08
   16232:	87 83       	std	Z+7, r24	; 0x07
   16234:	81 e0       	ldi	r24, 0x01	; 1
   16236:	86 83       	std	Z+6, r24	; 0x06
   16238:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1623c:	80 ff       	sbrs	r24, 0
   1623e:	0e c0       	rjmp	.+28     	; 0x1625c <amigo_send_status+0x92>
   16240:	88 ef       	ldi	r24, 0xF8	; 248
   16242:	9d e2       	ldi	r25, 0x2D	; 45
   16244:	a0 e0       	ldi	r26, 0x00	; 0
   16246:	ed b7       	in	r30, 0x3d	; 61
   16248:	fe b7       	in	r31, 0x3e	; 62
   1624a:	81 83       	std	Z+1, r24	; 0x01
   1624c:	92 83       	std	Z+2, r25	; 0x02
   1624e:	a3 83       	std	Z+3, r26	; 0x03
   16250:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   16254:	03 c0       	rjmp	.+6      	; 0x1625c <amigo_send_status+0x92>
   16256:	10 86       	std	Z+8, r1	; 0x08
   16258:	17 82       	std	Z+7, r1	; 0x07
   1625a:	16 82       	std	Z+6, r1	; 0x06
   1625c:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <AMIGOp>
   16260:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <AMIGOp+0x1>
   16264:	81 81       	ldd	r24, Z+1	; 0x01
   16266:	90 e0       	ldi	r25, 0x00	; 0
   16268:	0e 94 8d 84 	call	0x1091a	; 0x1091a <gpib_enable_PPR>
   1626c:	8c 81       	ldd	r24, Y+4	; 0x04
   1626e:	9d 81       	ldd	r25, Y+5	; 0x05
   16270:	88 27       	eor	r24, r24
   16272:	90 7d       	andi	r25, 0xD0	; 208
   16274:	25 96       	adiw	r28, 0x05	; 5
   16276:	e2 e0       	ldi	r30, 0x02	; 2
   16278:	0c 94 35 e3 	jmp	0x1c66a	; 0x1c66a <__epilogue_restores__+0x20>

0001627c <amigo_increment>:
   1627c:	a1 e1       	ldi	r26, 0x11	; 17
   1627e:	b0 e0       	ldi	r27, 0x00	; 0
   16280:	e4 e4       	ldi	r30, 0x44	; 68
   16282:	f1 eb       	ldi	r31, 0xB1	; 177
   16284:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__prologue_saves__+0x20>
   16288:	bc 01       	movw	r22, r24
   1628a:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <AMIGOs>
   1628e:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <AMIGOs+0x1>
   16292:	91 e1       	ldi	r25, 0x11	; 17
   16294:	de 01       	movw	r26, r28
   16296:	11 96       	adiw	r26, 0x01	; 1
   16298:	01 90       	ld	r0, Z+
   1629a:	0d 92       	st	X+, r0
   1629c:	9a 95       	dec	r25
   1629e:	e1 f7       	brne	.-8      	; 0x16298 <amigo_increment+0x1c>
   162a0:	9e 81       	ldd	r25, Y+6	; 0x06
   162a2:	9f 5f       	subi	r25, 0xFF	; 255
   162a4:	9e 83       	std	Y+6, r25	; 0x06
   162a6:	ce 01       	movw	r24, r28
   162a8:	01 96       	adiw	r24, 0x01	; 1
   162aa:	c1 dd       	rcall	.-1150   	; 0x15e2e <amigo_overflow_check>
   162ac:	00 97       	sbiw	r24, 0x00	; 0
   162ae:	59 f4       	brne	.+22     	; 0x162c6 <amigo_increment+0x4a>
   162b0:	a0 91 6e 19 	lds	r26, 0x196E	; 0x80196e <AMIGOs>
   162b4:	b0 91 6f 19 	lds	r27, 0x196F	; 0x80196f <AMIGOs+0x1>
   162b8:	21 e1       	ldi	r18, 0x11	; 17
   162ba:	fe 01       	movw	r30, r28
   162bc:	31 96       	adiw	r30, 0x01	; 1
   162be:	01 90       	ld	r0, Z+
   162c0:	0d 92       	st	X+, r0
   162c2:	2a 95       	dec	r18
   162c4:	e1 f7       	brne	.-8      	; 0x162be <amigo_increment+0x42>
   162c6:	61 96       	adiw	r28, 0x11	; 17
   162c8:	e2 e0       	ldi	r30, 0x02	; 2
   162ca:	0c 94 35 e3 	jmp	0x1c66a	; 0x1c66a <__epilogue_restores__+0x20>

000162ce <amigo_seek>:
   162ce:	0f 93       	push	r16
   162d0:	1f 93       	push	r17
   162d2:	cf 93       	push	r28
   162d4:	df 93       	push	r29
   162d6:	ec 01       	movw	r28, r24
   162d8:	62 e9       	ldi	r22, 0x92	; 146
   162da:	75 e1       	ldi	r23, 0x15	; 21
   162dc:	a8 dd       	rcall	.-1200   	; 0x15e2e <amigo_overflow_check>
   162de:	8c 01       	movw	r16, r24
   162e0:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <AMIGOs>
   162e4:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <AMIGOs+0x1>
   162e8:	89 2b       	or	r24, r25
   162ea:	41 f0       	breq	.+16     	; 0x162fc <amigo_seek+0x2e>
   162ec:	81 e0       	ldi	r24, 0x01	; 1
   162ee:	86 83       	std	Z+6, r24	; 0x06
   162f0:	87 81       	ldd	r24, Z+7	; 0x07
   162f2:	90 85       	ldd	r25, Z+8	; 0x08
   162f4:	84 60       	ori	r24, 0x04	; 4
   162f6:	90 87       	std	Z+8, r25	; 0x08
   162f8:	87 83       	std	Z+7, r24	; 0x07
   162fa:	06 c0       	rjmp	.+12     	; 0x16308 <amigo_seek+0x3a>
   162fc:	8d 81       	ldd	r24, Y+5	; 0x05
   162fe:	85 83       	std	Z+5, r24	; 0x05
   16300:	8c 81       	ldd	r24, Y+4	; 0x04
   16302:	84 83       	std	Z+4, r24	; 0x04
   16304:	8b 81       	ldd	r24, Y+3	; 0x03
   16306:	83 83       	std	Z+3, r24	; 0x03
   16308:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <AMIGOp>
   1630c:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <AMIGOp+0x1>
   16310:	81 81       	ldd	r24, Z+1	; 0x01
   16312:	90 e0       	ldi	r25, 0x00	; 0
   16314:	0e 94 8d 84 	call	0x1091a	; 0x1091a <gpib_enable_PPR>
   16318:	c8 01       	movw	r24, r16
   1631a:	df 91       	pop	r29
   1631c:	cf 91       	pop	r28
   1631e:	1f 91       	pop	r17
   16320:	0f 91       	pop	r16
   16322:	08 95       	ret

00016324 <amigo_verify>:
   16324:	8f 92       	push	r8
   16326:	9f 92       	push	r9
   16328:	af 92       	push	r10
   1632a:	bf 92       	push	r11
   1632c:	ef 92       	push	r14
   1632e:	ff 92       	push	r15
   16330:	0f 93       	push	r16
   16332:	1f 93       	push	r17
   16334:	cf 93       	push	r28
   16336:	df 93       	push	r29
   16338:	ad b7       	in	r26, 0x3d	; 61
   1633a:	be b7       	in	r27, 0x3e	; 62
   1633c:	19 97       	sbiw	r26, 0x09	; 9
   1633e:	0f b6       	in	r0, 0x3f	; 63
   16340:	f8 94       	cli
   16342:	be bf       	out	0x3e, r27	; 62
   16344:	0f be       	out	0x3f, r0	; 63
   16346:	ad bf       	out	0x3d, r26	; 61
   16348:	7c 01       	movw	r14, r24
   1634a:	67 e9       	ldi	r22, 0x97	; 151
   1634c:	75 e1       	ldi	r23, 0x15	; 21
   1634e:	80 91 6e 19 	lds	r24, 0x196E	; 0x80196e <AMIGOs>
   16352:	90 91 6f 19 	lds	r25, 0x196F	; 0x80196f <AMIGOs+0x1>
   16356:	c1 dd       	rcall	.-1150   	; 0x15eda <amigo_chs_to_logical>
   16358:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1635c:	25 ff       	sbrs	r18, 5
   1635e:	10 c0       	rjmp	.+32     	; 0x16380 <amigo_verify+0x5c>
   16360:	ed b7       	in	r30, 0x3d	; 61
   16362:	fe b7       	in	r31, 0x3e	; 62
   16364:	e0 86       	std	Z+8, r14	; 0x08
   16366:	f1 86       	std	Z+9, r15	; 0x09
   16368:	64 83       	std	Z+4, r22	; 0x04
   1636a:	75 83       	std	Z+5, r23	; 0x05
   1636c:	86 83       	std	Z+6, r24	; 0x06
   1636e:	97 83       	std	Z+7, r25	; 0x07
   16370:	87 eb       	ldi	r24, 0xB7	; 183
   16372:	9d e2       	ldi	r25, 0x2D	; 45
   16374:	a0 e0       	ldi	r26, 0x00	; 0
   16376:	81 83       	std	Z+1, r24	; 0x01
   16378:	92 83       	std	Z+2, r25	; 0x02
   1637a:	a3 83       	std	Z+3, r26	; 0x03
   1637c:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   16380:	e7 01       	movw	r28, r14
   16382:	20 97       	sbiw	r28, 0x00	; 0
   16384:	09 f4       	brne	.+2      	; 0x16388 <amigo_verify+0x64>
   16386:	4b c0       	rjmp	.+150    	; 0x1641e <amigo_verify+0xfa>
   16388:	64 ea       	ldi	r22, 0xA4	; 164
   1638a:	75 e1       	ldi	r23, 0x15	; 21
   1638c:	80 91 6e 19 	lds	r24, 0x196E	; 0x80196e <AMIGOs>
   16390:	90 91 6f 19 	lds	r25, 0x196F	; 0x80196f <AMIGOs+0x1>
   16394:	a2 dd       	rcall	.-1212   	; 0x15eda <amigo_chs_to_logical>
   16396:	4b 01       	movw	r8, r22
   16398:	5c 01       	movw	r10, r24
   1639a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1639e:	86 fd       	sbrc	r24, 6
   163a0:	0e 94 b3 83 	call	0x10766	; 0x10766 <gpib_timer_elapsed_begin>
   163a4:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <AMIGOp>
   163a8:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <AMIGOp+0x1>
   163ac:	e0 90 6e 19 	lds	r14, 0x196E	; 0x80196e <AMIGOs>
   163b0:	f0 90 6f 19 	lds	r15, 0x196F	; 0x80196f <AMIGOs+0x1>
   163b4:	87 e0       	ldi	r24, 0x07	; 7
   163b6:	e8 0e       	add	r14, r24
   163b8:	f1 1c       	adc	r15, r1
   163ba:	06 81       	ldd	r16, Z+6	; 0x06
   163bc:	17 81       	ldd	r17, Z+7	; 0x07
   163be:	26 ef       	ldi	r18, 0xF6	; 246
   163c0:	3c e1       	ldi	r19, 0x1C	; 28
   163c2:	b5 01       	movw	r22, r10
   163c4:	a4 01       	movw	r20, r8
   163c6:	82 81       	ldd	r24, Z+2	; 0x02
   163c8:	93 81       	ldd	r25, Z+3	; 0x03
   163ca:	0e 94 05 83 	call	0x1060a	; 0x1060a <dbf_open_read>
   163ce:	7c 01       	movw	r14, r24
   163d0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   163d4:	86 ff       	sbrs	r24, 6
   163d6:	04 c0       	rjmp	.+8      	; 0x163e0 <amigo_verify+0xbc>
   163d8:	8b ea       	ldi	r24, 0xAB	; 171
   163da:	90 e1       	ldi	r25, 0x10	; 16
   163dc:	0e 94 c5 83 	call	0x1078a	; 0x1078a <gpib_timer_elapsed_end>
   163e0:	20 91 6e 19 	lds	r18, 0x196E	; 0x80196e <AMIGOs>
   163e4:	30 91 6f 19 	lds	r19, 0x196F	; 0x80196f <AMIGOs+0x1>
   163e8:	f9 01       	movw	r30, r18
   163ea:	87 81       	ldd	r24, Z+7	; 0x07
   163ec:	90 85       	ldd	r25, Z+8	; 0x08
   163ee:	89 2b       	or	r24, r25
   163f0:	21 f0       	breq	.+8      	; 0x163fa <amigo_verify+0xd6>
   163f2:	81 e0       	ldi	r24, 0x01	; 1
   163f4:	f9 01       	movw	r30, r18
   163f6:	86 83       	std	Z+6, r24	; 0x06
   163f8:	15 c0       	rjmp	.+42     	; 0x16424 <amigo_verify+0x100>
   163fa:	80 91 70 19 	lds	r24, 0x1970	; 0x801970 <AMIGOp>
   163fe:	90 91 71 19 	lds	r25, 0x1971	; 0x801971 <AMIGOp+0x1>
   16402:	fc 01       	movw	r30, r24
   16404:	86 81       	ldd	r24, Z+6	; 0x06
   16406:	97 81       	ldd	r25, Z+7	; 0x07
   16408:	e8 16       	cp	r14, r24
   1640a:	f9 06       	cpc	r15, r25
   1640c:	91 f7       	brne	.-28     	; 0x163f2 <amigo_verify+0xce>
   1640e:	8c ea       	ldi	r24, 0xAC	; 172
   16410:	95 e1       	ldi	r25, 0x15	; 21
   16412:	34 df       	rcall	.-408    	; 0x1627c <amigo_increment>
   16414:	21 97       	sbiw	r28, 0x01	; 1
   16416:	89 2b       	or	r24, r25
   16418:	09 f4       	brne	.+2      	; 0x1641c <amigo_verify+0xf8>
   1641a:	b3 cf       	rjmp	.-154    	; 0x16382 <amigo_verify+0x5e>
   1641c:	03 c0       	rjmp	.+6      	; 0x16424 <amigo_verify+0x100>
   1641e:	c0 e0       	ldi	r28, 0x00	; 0
   16420:	d0 e0       	ldi	r29, 0x00	; 0
   16422:	02 c0       	rjmp	.+4      	; 0x16428 <amigo_verify+0x104>
   16424:	c1 e0       	ldi	r28, 0x01	; 1
   16426:	d0 e0       	ldi	r29, 0x00	; 0
   16428:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <AMIGOp>
   1642c:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <AMIGOp+0x1>
   16430:	81 81       	ldd	r24, Z+1	; 0x01
   16432:	90 e0       	ldi	r25, 0x00	; 0
   16434:	0e 94 8d 84 	call	0x1091a	; 0x1091a <gpib_enable_PPR>
   16438:	ce 01       	movw	r24, r28
   1643a:	ad b7       	in	r26, 0x3d	; 61
   1643c:	be b7       	in	r27, 0x3e	; 62
   1643e:	19 96       	adiw	r26, 0x09	; 9
   16440:	0f b6       	in	r0, 0x3f	; 63
   16442:	f8 94       	cli
   16444:	be bf       	out	0x3e, r27	; 62
   16446:	0f be       	out	0x3f, r0	; 63
   16448:	ad bf       	out	0x3d, r26	; 61
   1644a:	df 91       	pop	r29
   1644c:	cf 91       	pop	r28
   1644e:	1f 91       	pop	r17
   16450:	0f 91       	pop	r16
   16452:	ff 90       	pop	r15
   16454:	ef 90       	pop	r14
   16456:	bf 90       	pop	r11
   16458:	af 90       	pop	r10
   1645a:	9f 90       	pop	r9
   1645c:	8f 90       	pop	r8
   1645e:	08 95       	ret

00016460 <amigo_format>:
   16460:	ef 92       	push	r14
   16462:	ff 92       	push	r15
   16464:	0f 93       	push	r16
   16466:	1f 93       	push	r17
   16468:	cf 93       	push	r28
   1646a:	df 93       	push	r29
   1646c:	00 d0       	rcall	.+0      	; 0x1646e <amigo_format+0xe>
   1646e:	1f 92       	push	r1
   16470:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <AMIGOs>
   16474:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <AMIGOs+0x1>
   16478:	15 82       	std	Z+5, r1	; 0x05
   1647a:	14 82       	std	Z+4, r1	; 0x04
   1647c:	13 82       	std	Z+3, r1	; 0x03
   1647e:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <AMIGOp>
   16482:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <AMIGOp+0x1>
   16486:	46 81       	ldd	r20, Z+6	; 0x06
   16488:	57 81       	ldd	r21, Z+7	; 0x07
   1648a:	68 2f       	mov	r22, r24
   1648c:	70 e0       	ldi	r23, 0x00	; 0
   1648e:	86 ef       	ldi	r24, 0xF6	; 246
   16490:	9c e1       	ldi	r25, 0x1C	; 28
   16492:	0e 94 01 e7 	call	0x1ce02	; 0x1ce02 <memset>
   16496:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1649a:	85 ff       	sbrs	r24, 5
   1649c:	0a c0       	rjmp	.+20     	; 0x164b2 <amigo_format+0x52>
   1649e:	8c e7       	ldi	r24, 0x7C	; 124
   164a0:	9d e2       	ldi	r25, 0x2D	; 45
   164a2:	a0 e0       	ldi	r26, 0x00	; 0
   164a4:	ed b7       	in	r30, 0x3d	; 61
   164a6:	fe b7       	in	r31, 0x3e	; 62
   164a8:	81 83       	std	Z+1, r24	; 0x01
   164aa:	92 83       	std	Z+2, r25	; 0x02
   164ac:	a3 83       	std	Z+3, r26	; 0x03
   164ae:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   164b2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   164b6:	86 fd       	sbrc	r24, 6
   164b8:	0e 94 b3 83 	call	0x10766	; 0x10766 <gpib_timer_elapsed_begin>
   164bc:	63 eb       	ldi	r22, 0xB3	; 179
   164be:	75 e1       	ldi	r23, 0x15	; 21
   164c0:	80 91 6e 19 	lds	r24, 0x196E	; 0x80196e <AMIGOs>
   164c4:	90 91 6f 19 	lds	r25, 0x196F	; 0x80196f <AMIGOs+0x1>
   164c8:	08 dd       	rcall	.-1520   	; 0x15eda <amigo_chs_to_logical>
   164ca:	ab 01       	movw	r20, r22
   164cc:	bc 01       	movw	r22, r24
   164ce:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <AMIGOp>
   164d2:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <AMIGOp+0x1>
   164d6:	e0 90 6e 19 	lds	r14, 0x196E	; 0x80196e <AMIGOs>
   164da:	f0 90 6f 19 	lds	r15, 0x196F	; 0x80196f <AMIGOs+0x1>
   164de:	87 e0       	ldi	r24, 0x07	; 7
   164e0:	e8 0e       	add	r14, r24
   164e2:	f1 1c       	adc	r15, r1
   164e4:	06 81       	ldd	r16, Z+6	; 0x06
   164e6:	17 81       	ldd	r17, Z+7	; 0x07
   164e8:	26 ef       	ldi	r18, 0xF6	; 246
   164ea:	3c e1       	ldi	r19, 0x1C	; 28
   164ec:	82 81       	ldd	r24, Z+2	; 0x02
   164ee:	93 81       	ldd	r25, Z+3	; 0x03
   164f0:	0e 94 5c 83 	call	0x106b8	; 0x106b8 <dbf_open_write>
   164f4:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <AMIGOs>
   164f8:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <AMIGOs+0x1>
   164fc:	27 81       	ldd	r18, Z+7	; 0x07
   164fe:	30 85       	ldd	r19, Z+8	; 0x08
   16500:	21 15       	cp	r18, r1
   16502:	31 05       	cpc	r19, r1
   16504:	49 f4       	brne	.+18     	; 0x16518 <amigo_format+0xb8>
   16506:	c0 91 70 19 	lds	r28, 0x1970	; 0x801970 <AMIGOp>
   1650a:	d0 91 71 19 	lds	r29, 0x1971	; 0x801971 <AMIGOp+0x1>
   1650e:	4e 81       	ldd	r20, Y+6	; 0x06
   16510:	5f 81       	ldd	r21, Y+7	; 0x07
   16512:	84 17       	cp	r24, r20
   16514:	95 07       	cpc	r25, r21
   16516:	41 f0       	breq	.+16     	; 0x16528 <amigo_format+0xc8>
   16518:	22 60       	ori	r18, 0x02	; 2
   1651a:	30 87       	std	Z+8, r19	; 0x08
   1651c:	27 83       	std	Z+7, r18	; 0x07
   1651e:	81 e0       	ldi	r24, 0x01	; 1
   16520:	86 83       	std	Z+6, r24	; 0x06
   16522:	c1 e0       	ldi	r28, 0x01	; 1
   16524:	d0 e0       	ldi	r29, 0x00	; 0
   16526:	0f c0       	rjmp	.+30     	; 0x16546 <amigo_format+0xe6>
   16528:	80 e0       	ldi	r24, 0x00	; 0
   1652a:	90 e0       	ldi	r25, 0x00	; 0
   1652c:	a7 de       	rcall	.-690    	; 0x1627c <amigo_increment>
   1652e:	89 2b       	or	r24, r25
   16530:	29 f2       	breq	.-118    	; 0x164bc <amigo_format+0x5c>
   16532:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <AMIGOs>
   16536:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <AMIGOs+0x1>
   1653a:	15 82       	std	Z+5, r1	; 0x05
   1653c:	14 82       	std	Z+4, r1	; 0x04
   1653e:	13 82       	std	Z+3, r1	; 0x03
   16540:	16 82       	std	Z+6, r1	; 0x06
   16542:	c0 e0       	ldi	r28, 0x00	; 0
   16544:	d0 e0       	ldi	r29, 0x00	; 0
   16546:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1654a:	86 ff       	sbrs	r24, 6
   1654c:	04 c0       	rjmp	.+8      	; 0x16556 <amigo_format+0xf6>
   1654e:	83 eb       	ldi	r24, 0xB3	; 179
   16550:	95 e1       	ldi	r25, 0x15	; 21
   16552:	0e 94 c5 83 	call	0x1078a	; 0x1078a <gpib_timer_elapsed_end>
   16556:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1655a:	85 ff       	sbrs	r24, 5
   1655c:	0a c0       	rjmp	.+20     	; 0x16572 <amigo_format+0x112>
   1655e:	87 e6       	ldi	r24, 0x67	; 103
   16560:	9d e2       	ldi	r25, 0x2D	; 45
   16562:	a0 e0       	ldi	r26, 0x00	; 0
   16564:	ed b7       	in	r30, 0x3d	; 61
   16566:	fe b7       	in	r31, 0x3e	; 62
   16568:	81 83       	std	Z+1, r24	; 0x01
   1656a:	92 83       	std	Z+2, r25	; 0x02
   1656c:	a3 83       	std	Z+3, r26	; 0x03
   1656e:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   16572:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <AMIGOp>
   16576:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <AMIGOp+0x1>
   1657a:	81 81       	ldd	r24, Z+1	; 0x01
   1657c:	90 e0       	ldi	r25, 0x00	; 0
   1657e:	0e 94 8d 84 	call	0x1091a	; 0x1091a <gpib_enable_PPR>
   16582:	ce 01       	movw	r24, r28
   16584:	cd b7       	in	r28, 0x3d	; 61
   16586:	de b7       	in	r29, 0x3e	; 62
   16588:	23 96       	adiw	r28, 0x03	; 3
   1658a:	e6 e0       	ldi	r30, 0x06	; 6
   1658c:	0c 94 31 e3 	jmp	0x1c662	; 0x1c662 <__epilogue_restores__+0x18>

00016590 <amigo_buffered_read_command>:
   16590:	8f 92       	push	r8
   16592:	9f 92       	push	r9
   16594:	af 92       	push	r10
   16596:	bf 92       	push	r11
   16598:	ef 92       	push	r14
   1659a:	ff 92       	push	r15
   1659c:	0f 93       	push	r16
   1659e:	1f 93       	push	r17
   165a0:	cf 93       	push	r28
   165a2:	df 93       	push	r29
   165a4:	00 d0       	rcall	.+0      	; 0x165a6 <amigo_buffered_read_command+0x16>
   165a6:	00 d0       	rcall	.+0      	; 0x165a8 <amigo_buffered_read_command+0x18>
   165a8:	1f 92       	push	r1
   165aa:	6a eb       	ldi	r22, 0xBA	; 186
   165ac:	75 e1       	ldi	r23, 0x15	; 21
   165ae:	80 91 6e 19 	lds	r24, 0x196E	; 0x80196e <AMIGOs>
   165b2:	90 91 6f 19 	lds	r25, 0x196F	; 0x80196f <AMIGOs+0x1>
   165b6:	91 dc       	rcall	.-1758   	; 0x15eda <amigo_chs_to_logical>
   165b8:	4b 01       	movw	r8, r22
   165ba:	5c 01       	movw	r10, r24
   165bc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   165c0:	85 ff       	sbrs	r24, 5
   165c2:	12 c0       	rjmp	.+36     	; 0x165e8 <amigo_buffered_read_command+0x58>
   165c4:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <AMIGOs>
   165c8:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <AMIGOs+0x1>
   165cc:	80 81       	ld	r24, Z
   165ce:	90 e0       	ldi	r25, 0x00	; 0
   165d0:	ed b7       	in	r30, 0x3d	; 61
   165d2:	fe b7       	in	r31, 0x3e	; 62
   165d4:	95 83       	std	Z+5, r25	; 0x05
   165d6:	84 83       	std	Z+4, r24	; 0x04
   165d8:	85 e5       	ldi	r24, 0x55	; 85
   165da:	9d e2       	ldi	r25, 0x2D	; 45
   165dc:	a0 e0       	ldi	r26, 0x00	; 0
   165de:	81 83       	std	Z+1, r24	; 0x01
   165e0:	92 83       	std	Z+2, r25	; 0x02
   165e2:	a3 83       	std	Z+3, r26	; 0x03
   165e4:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   165e8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   165ec:	86 fd       	sbrc	r24, 6
   165ee:	0e 94 b3 83 	call	0x10766	; 0x10766 <gpib_timer_elapsed_begin>
   165f2:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <AMIGOp>
   165f6:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <AMIGOp+0x1>
   165fa:	e0 90 6e 19 	lds	r14, 0x196E	; 0x80196e <AMIGOs>
   165fe:	f0 90 6f 19 	lds	r15, 0x196F	; 0x80196f <AMIGOs+0x1>
   16602:	87 e0       	ldi	r24, 0x07	; 7
   16604:	e8 0e       	add	r14, r24
   16606:	f1 1c       	adc	r15, r1
   16608:	06 81       	ldd	r16, Z+6	; 0x06
   1660a:	17 81       	ldd	r17, Z+7	; 0x07
   1660c:	26 ef       	ldi	r18, 0xF6	; 246
   1660e:	3c e1       	ldi	r19, 0x1C	; 28
   16610:	b5 01       	movw	r22, r10
   16612:	a4 01       	movw	r20, r8
   16614:	82 81       	ldd	r24, Z+2	; 0x02
   16616:	93 81       	ldd	r25, Z+3	; 0x03
   16618:	0e 94 05 83 	call	0x1060a	; 0x1060a <dbf_open_read>
   1661c:	7c 01       	movw	r14, r24
   1661e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16622:	86 ff       	sbrs	r24, 6
   16624:	04 c0       	rjmp	.+8      	; 0x1662e <amigo_buffered_read_command+0x9e>
   16626:	8b ea       	ldi	r24, 0xAB	; 171
   16628:	90 e1       	ldi	r25, 0x10	; 16
   1662a:	0e 94 c5 83 	call	0x1078a	; 0x1078a <gpib_timer_elapsed_end>
   1662e:	c0 91 6e 19 	lds	r28, 0x196E	; 0x80196e <AMIGOs>
   16632:	d0 91 6f 19 	lds	r29, 0x196F	; 0x80196f <AMIGOs+0x1>
   16636:	8f 81       	ldd	r24, Y+7	; 0x07
   16638:	98 85       	ldd	r25, Y+8	; 0x08
   1663a:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <AMIGOp>
   1663e:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <AMIGOp+0x1>
   16642:	89 2b       	or	r24, r25
   16644:	29 f4       	brne	.+10     	; 0x16650 <amigo_buffered_read_command+0xc0>
   16646:	86 81       	ldd	r24, Z+6	; 0x06
   16648:	97 81       	ldd	r25, Z+7	; 0x07
   1664a:	e8 16       	cp	r14, r24
   1664c:	f9 06       	cpc	r15, r25
   1664e:	19 f0       	breq	.+6      	; 0x16656 <amigo_buffered_read_command+0xc6>
   16650:	81 e0       	ldi	r24, 0x01	; 1
   16652:	8e 83       	std	Y+6, r24	; 0x06
   16654:	14 c0       	rjmp	.+40     	; 0x1667e <amigo_buffered_read_command+0xee>
   16656:	8a eb       	ldi	r24, 0xBA	; 186
   16658:	95 e1       	ldi	r25, 0x15	; 21
   1665a:	10 de       	rcall	.-992    	; 0x1627c <amigo_increment>
   1665c:	89 2b       	or	r24, r25
   1665e:	59 f0       	breq	.+22     	; 0x16676 <amigo_buffered_read_command+0xe6>
   16660:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <AMIGOs>
   16664:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <AMIGOs+0x1>
   16668:	81 e0       	ldi	r24, 0x01	; 1
   1666a:	86 83       	std	Z+6, r24	; 0x06
   1666c:	87 81       	ldd	r24, Z+7	; 0x07
   1666e:	90 85       	ldd	r25, Z+8	; 0x08
   16670:	84 60       	ori	r24, 0x04	; 4
   16672:	90 87       	std	Z+8, r25	; 0x08
   16674:	87 83       	std	Z+7, r24	; 0x07
   16676:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <AMIGOp>
   1667a:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <AMIGOp+0x1>
   1667e:	81 81       	ldd	r24, Z+1	; 0x01
   16680:	90 e0       	ldi	r25, 0x00	; 0
   16682:	0e 94 8d 84 	call	0x1091a	; 0x1091a <gpib_enable_PPR>
   16686:	80 e0       	ldi	r24, 0x00	; 0
   16688:	90 e0       	ldi	r25, 0x00	; 0
   1668a:	0f 90       	pop	r0
   1668c:	0f 90       	pop	r0
   1668e:	0f 90       	pop	r0
   16690:	0f 90       	pop	r0
   16692:	0f 90       	pop	r0
   16694:	df 91       	pop	r29
   16696:	cf 91       	pop	r28
   16698:	1f 91       	pop	r17
   1669a:	0f 91       	pop	r16
   1669c:	ff 90       	pop	r15
   1669e:	ef 90       	pop	r14
   166a0:	bf 90       	pop	r11
   166a2:	af 90       	pop	r10
   166a4:	9f 90       	pop	r9
   166a6:	8f 90       	pop	r8
   166a8:	08 95       	ret

000166aa <amigo_buffered_read_execute>:
   166aa:	a5 e0       	ldi	r26, 0x05	; 5
   166ac:	b0 e0       	ldi	r27, 0x00	; 0
   166ae:	eb e5       	ldi	r30, 0x5B	; 91
   166b0:	f3 eb       	ldi	r31, 0xB3	; 179
   166b2:	0c 94 17 e3 	jmp	0x1c62e	; 0x1c62e <__prologue_saves__+0x1c>
   166b6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   166ba:	87 fd       	sbrc	r24, 7
   166bc:	0e 94 b3 83 	call	0x10766	; 0x10766 <gpib_timer_elapsed_begin>
   166c0:	80 e0       	ldi	r24, 0x00	; 0
   166c2:	91 e0       	ldi	r25, 0x01	; 1
   166c4:	9d 83       	std	Y+5, r25	; 0x05
   166c6:	8c 83       	std	Y+4, r24	; 0x04
   166c8:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <AMIGOp>
   166cc:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <AMIGOp+0x1>
   166d0:	66 81       	ldd	r22, Z+6	; 0x06
   166d2:	77 81       	ldd	r23, Z+7	; 0x07
   166d4:	ae 01       	movw	r20, r28
   166d6:	4c 5f       	subi	r20, 0xFC	; 252
   166d8:	5f 4f       	sbci	r21, 0xFF	; 255
   166da:	86 ef       	ldi	r24, 0xF6	; 246
   166dc:	9c e1       	ldi	r25, 0x1C	; 28
   166de:	0e 94 bd 89 	call	0x1137a	; 0x1137a <gpib_write_str>
   166e2:	8c 01       	movw	r16, r24
   166e4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   166e8:	87 ff       	sbrs	r24, 7
   166ea:	04 c0       	rjmp	.+8      	; 0x166f4 <amigo_buffered_read_execute+0x4a>
   166ec:	86 eb       	ldi	r24, 0xB6	; 182
   166ee:	90 e1       	ldi	r25, 0x10	; 16
   166f0:	0e 94 c5 83 	call	0x1078a	; 0x1078a <gpib_timer_elapsed_end>
   166f4:	8c 81       	ldd	r24, Y+4	; 0x04
   166f6:	9d 81       	ldd	r25, Y+5	; 0x05
   166f8:	88 27       	eor	r24, r24
   166fa:	90 7d       	andi	r25, 0xD0	; 208
   166fc:	89 2b       	or	r24, r25
   166fe:	49 f4       	brne	.+18     	; 0x16712 <amigo_buffered_read_execute+0x68>
   16700:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <AMIGOp>
   16704:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <AMIGOp+0x1>
   16708:	86 81       	ldd	r24, Z+6	; 0x06
   1670a:	97 81       	ldd	r25, Z+7	; 0x07
   1670c:	08 17       	cp	r16, r24
   1670e:	19 07       	cpc	r17, r25
   16710:	c9 f0       	breq	.+50     	; 0x16744 <amigo_buffered_read_execute+0x9a>
   16712:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <AMIGOs>
   16716:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <AMIGOs+0x1>
   1671a:	81 e0       	ldi	r24, 0x01	; 1
   1671c:	86 83       	std	Z+6, r24	; 0x06
   1671e:	87 81       	ldd	r24, Z+7	; 0x07
   16720:	90 85       	ldd	r25, Z+8	; 0x08
   16722:	80 62       	ori	r24, 0x20	; 32
   16724:	90 87       	std	Z+8, r25	; 0x08
   16726:	87 83       	std	Z+7, r24	; 0x07
   16728:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1672c:	80 ff       	sbrs	r24, 0
   1672e:	0a c0       	rjmp	.+20     	; 0x16744 <amigo_buffered_read_execute+0x9a>
   16730:	8b e3       	ldi	r24, 0x3B	; 59
   16732:	9d e2       	ldi	r25, 0x2D	; 45
   16734:	a0 e0       	ldi	r26, 0x00	; 0
   16736:	ed b7       	in	r30, 0x3d	; 61
   16738:	fe b7       	in	r31, 0x3e	; 62
   1673a:	81 83       	std	Z+1, r24	; 0x01
   1673c:	92 83       	std	Z+2, r25	; 0x02
   1673e:	a3 83       	std	Z+3, r26	; 0x03
   16740:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   16744:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <AMIGOp>
   16748:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <AMIGOp+0x1>
   1674c:	81 81       	ldd	r24, Z+1	; 0x01
   1674e:	90 e0       	ldi	r25, 0x00	; 0
   16750:	0e 94 8d 84 	call	0x1091a	; 0x1091a <gpib_enable_PPR>
   16754:	8c 81       	ldd	r24, Y+4	; 0x04
   16756:	9d 81       	ldd	r25, Y+5	; 0x05
   16758:	25 96       	adiw	r28, 0x05	; 5
   1675a:	e4 e0       	ldi	r30, 0x04	; 4
   1675c:	0c 94 33 e3 	jmp	0x1c666	; 0x1c666 <__epilogue_restores__+0x1c>

00016760 <amigo_buffered_write>:
   16760:	8f 92       	push	r8
   16762:	9f 92       	push	r9
   16764:	af 92       	push	r10
   16766:	bf 92       	push	r11
   16768:	ef 92       	push	r14
   1676a:	ff 92       	push	r15
   1676c:	0f 93       	push	r16
   1676e:	1f 93       	push	r17
   16770:	cf 93       	push	r28
   16772:	df 93       	push	r29
   16774:	cd b7       	in	r28, 0x3d	; 61
   16776:	de b7       	in	r29, 0x3e	; 62
   16778:	27 97       	sbiw	r28, 0x07	; 7
   1677a:	0f b6       	in	r0, 0x3f	; 63
   1677c:	f8 94       	cli
   1677e:	de bf       	out	0x3e, r29	; 62
   16780:	0f be       	out	0x3f, r0	; 63
   16782:	cd bf       	out	0x3d, r28	; 61
   16784:	68 ec       	ldi	r22, 0xC8	; 200
   16786:	75 e1       	ldi	r23, 0x15	; 21
   16788:	80 91 6e 19 	lds	r24, 0x196E	; 0x80196e <AMIGOs>
   1678c:	90 91 6f 19 	lds	r25, 0x196F	; 0x80196f <AMIGOs+0x1>
   16790:	a4 db       	rcall	.-2232   	; 0x15eda <amigo_chs_to_logical>
   16792:	4b 01       	movw	r8, r22
   16794:	5c 01       	movw	r10, r24
   16796:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1679a:	87 fd       	sbrc	r24, 7
   1679c:	0e 94 b3 83 	call	0x10766	; 0x10766 <gpib_timer_elapsed_begin>
   167a0:	1f 82       	std	Y+7, r1	; 0x07
   167a2:	1e 82       	std	Y+6, r1	; 0x06
   167a4:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <AMIGOp>
   167a8:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <AMIGOp+0x1>
   167ac:	66 81       	ldd	r22, Z+6	; 0x06
   167ae:	77 81       	ldd	r23, Z+7	; 0x07
   167b0:	ae 01       	movw	r20, r28
   167b2:	4a 5f       	subi	r20, 0xFA	; 250
   167b4:	5f 4f       	sbci	r21, 0xFF	; 255
   167b6:	86 ef       	ldi	r24, 0xF6	; 246
   167b8:	9c e1       	ldi	r25, 0x1C	; 28
   167ba:	0e 94 1b 89 	call	0x11236	; 0x11236 <gpib_read_str>
   167be:	7c 01       	movw	r14, r24
   167c0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   167c4:	85 ff       	sbrs	r24, 5
   167c6:	12 c0       	rjmp	.+36     	; 0x167ec <amigo_buffered_write+0x8c>
   167c8:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <AMIGOs>
   167cc:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <AMIGOs+0x1>
   167d0:	80 81       	ld	r24, Z
   167d2:	90 e0       	ldi	r25, 0x00	; 0
   167d4:	ed b7       	in	r30, 0x3d	; 61
   167d6:	fe b7       	in	r31, 0x3e	; 62
   167d8:	95 83       	std	Z+5, r25	; 0x05
   167da:	84 83       	std	Z+4, r24	; 0x04
   167dc:	89 e2       	ldi	r24, 0x29	; 41
   167de:	9d e2       	ldi	r25, 0x2D	; 45
   167e0:	a0 e0       	ldi	r26, 0x00	; 0
   167e2:	81 83       	std	Z+1, r24	; 0x01
   167e4:	92 83       	std	Z+2, r25	; 0x02
   167e6:	a3 83       	std	Z+3, r26	; 0x03
   167e8:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   167ec:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   167f0:	87 ff       	sbrs	r24, 7
   167f2:	04 c0       	rjmp	.+8      	; 0x167fc <amigo_buffered_write+0x9c>
   167f4:	87 ed       	ldi	r24, 0xD7	; 215
   167f6:	95 e1       	ldi	r25, 0x15	; 21
   167f8:	0e 94 c5 83 	call	0x1078a	; 0x1078a <gpib_timer_elapsed_end>
   167fc:	8e 81       	ldd	r24, Y+6	; 0x06
   167fe:	9f 81       	ldd	r25, Y+7	; 0x07
   16800:	88 27       	eor	r24, r24
   16802:	90 7d       	andi	r25, 0xD0	; 208
   16804:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   16808:	89 2b       	or	r24, r25
   1680a:	49 f4       	brne	.+18     	; 0x1681e <amigo_buffered_write+0xbe>
   1680c:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <AMIGOp>
   16810:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <AMIGOp+0x1>
   16814:	86 81       	ldd	r24, Z+6	; 0x06
   16816:	97 81       	ldd	r25, Z+7	; 0x07
   16818:	e8 16       	cp	r14, r24
   1681a:	f9 06       	cpc	r15, r25
   1681c:	c1 f0       	breq	.+48     	; 0x1684e <amigo_buffered_write+0xee>
   1681e:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <AMIGOs>
   16822:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <AMIGOs+0x1>
   16826:	81 e0       	ldi	r24, 0x01	; 1
   16828:	86 83       	std	Z+6, r24	; 0x06
   1682a:	87 81       	ldd	r24, Z+7	; 0x07
   1682c:	90 85       	ldd	r25, Z+8	; 0x08
   1682e:	80 62       	ori	r24, 0x20	; 32
   16830:	90 87       	std	Z+8, r25	; 0x08
   16832:	87 83       	std	Z+7, r24	; 0x07
   16834:	20 ff       	sbrs	r18, 0
   16836:	5e c0       	rjmp	.+188    	; 0x168f4 <amigo_buffered_write+0x194>
   16838:	8a e0       	ldi	r24, 0x0A	; 10
   1683a:	9d e2       	ldi	r25, 0x2D	; 45
   1683c:	a0 e0       	ldi	r26, 0x00	; 0
   1683e:	ed b7       	in	r30, 0x3d	; 61
   16840:	fe b7       	in	r31, 0x3e	; 62
   16842:	81 83       	std	Z+1, r24	; 0x01
   16844:	92 83       	std	Z+2, r25	; 0x02
   16846:	a3 83       	std	Z+3, r26	; 0x03
   16848:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   1684c:	53 c0       	rjmp	.+166    	; 0x168f4 <amigo_buffered_write+0x194>
   1684e:	26 fd       	sbrc	r18, 6
   16850:	0e 94 b3 83 	call	0x10766	; 0x10766 <gpib_timer_elapsed_begin>
   16854:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <AMIGOp>
   16858:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <AMIGOp+0x1>
   1685c:	e0 90 6e 19 	lds	r14, 0x196E	; 0x80196e <AMIGOs>
   16860:	f0 90 6f 19 	lds	r15, 0x196F	; 0x80196f <AMIGOs+0x1>
   16864:	87 e0       	ldi	r24, 0x07	; 7
   16866:	e8 0e       	add	r14, r24
   16868:	f1 1c       	adc	r15, r1
   1686a:	06 81       	ldd	r16, Z+6	; 0x06
   1686c:	17 81       	ldd	r17, Z+7	; 0x07
   1686e:	26 ef       	ldi	r18, 0xF6	; 246
   16870:	3c e1       	ldi	r19, 0x1C	; 28
   16872:	b5 01       	movw	r22, r10
   16874:	a4 01       	movw	r20, r8
   16876:	82 81       	ldd	r24, Z+2	; 0x02
   16878:	93 81       	ldd	r25, Z+3	; 0x03
   1687a:	0e 94 5c 83 	call	0x106b8	; 0x106b8 <dbf_open_write>
   1687e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16882:	86 ff       	sbrs	r24, 6
   16884:	04 c0       	rjmp	.+8      	; 0x1688e <amigo_buffered_write+0x12e>
   16886:	80 ea       	ldi	r24, 0xA0	; 160
   16888:	90 e1       	ldi	r25, 0x10	; 16
   1688a:	0e 94 c5 83 	call	0x1078a	; 0x1078a <gpib_timer_elapsed_end>
   1688e:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <AMIGOs>
   16892:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <AMIGOs+0x1>
   16896:	87 81       	ldd	r24, Z+7	; 0x07
   16898:	90 85       	ldd	r25, Z+8	; 0x08
   1689a:	89 2b       	or	r24, r25
   1689c:	d9 f0       	breq	.+54     	; 0x168d4 <amigo_buffered_write+0x174>
   1689e:	81 e0       	ldi	r24, 0x01	; 1
   168a0:	86 83       	std	Z+6, r24	; 0x06
   168a2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   168a6:	80 ff       	sbrs	r24, 0
   168a8:	0a c0       	rjmp	.+20     	; 0x168be <amigo_buffered_write+0x15e>
   168aa:	8a ee       	ldi	r24, 0xEA	; 234
   168ac:	9c e2       	ldi	r25, 0x2C	; 44
   168ae:	a0 e0       	ldi	r26, 0x00	; 0
   168b0:	ed b7       	in	r30, 0x3d	; 61
   168b2:	fe b7       	in	r31, 0x3e	; 62
   168b4:	81 83       	std	Z+1, r24	; 0x01
   168b6:	92 83       	std	Z+2, r25	; 0x02
   168b8:	a3 83       	std	Z+3, r26	; 0x03
   168ba:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   168be:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <AMIGOp>
   168c2:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <AMIGOp+0x1>
   168c6:	81 81       	ldd	r24, Z+1	; 0x01
   168c8:	90 e0       	ldi	r25, 0x00	; 0
   168ca:	0e 94 8d 84 	call	0x1091a	; 0x1091a <gpib_enable_PPR>
   168ce:	80 e0       	ldi	r24, 0x00	; 0
   168d0:	90 e0       	ldi	r25, 0x00	; 0
   168d2:	1c c0       	rjmp	.+56     	; 0x1690c <amigo_buffered_write+0x1ac>
   168d4:	88 ec       	ldi	r24, 0xC8	; 200
   168d6:	95 e1       	ldi	r25, 0x15	; 21
   168d8:	d1 dc       	rcall	.-1630   	; 0x1627c <amigo_increment>
   168da:	89 2b       	or	r24, r25
   168dc:	59 f0       	breq	.+22     	; 0x168f4 <amigo_buffered_write+0x194>
   168de:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <AMIGOs>
   168e2:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <AMIGOs+0x1>
   168e6:	81 e0       	ldi	r24, 0x01	; 1
   168e8:	86 83       	std	Z+6, r24	; 0x06
   168ea:	87 81       	ldd	r24, Z+7	; 0x07
   168ec:	90 85       	ldd	r25, Z+8	; 0x08
   168ee:	84 60       	ori	r24, 0x04	; 4
   168f0:	90 87       	std	Z+8, r25	; 0x08
   168f2:	87 83       	std	Z+7, r24	; 0x07
   168f4:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <AMIGOp>
   168f8:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <AMIGOp+0x1>
   168fc:	81 81       	ldd	r24, Z+1	; 0x01
   168fe:	90 e0       	ldi	r25, 0x00	; 0
   16900:	0e 94 8d 84 	call	0x1091a	; 0x1091a <gpib_enable_PPR>
   16904:	8e 81       	ldd	r24, Y+6	; 0x06
   16906:	9f 81       	ldd	r25, Y+7	; 0x07
   16908:	88 27       	eor	r24, r24
   1690a:	90 7d       	andi	r25, 0xD0	; 208
   1690c:	27 96       	adiw	r28, 0x07	; 7
   1690e:	0f b6       	in	r0, 0x3f	; 63
   16910:	f8 94       	cli
   16912:	de bf       	out	0x3e, r29	; 62
   16914:	0f be       	out	0x3f, r0	; 63
   16916:	cd bf       	out	0x3d, r28	; 61
   16918:	df 91       	pop	r29
   1691a:	cf 91       	pop	r28
   1691c:	1f 91       	pop	r17
   1691e:	0f 91       	pop	r16
   16920:	ff 90       	pop	r15
   16922:	ef 90       	pop	r14
   16924:	bf 90       	pop	r11
   16926:	af 90       	pop	r10
   16928:	9f 90       	pop	r9
   1692a:	8f 90       	pop	r8
   1692c:	08 95       	ret

0001692e <amigo_cmd_dsj>:
   1692e:	a8 e0       	ldi	r26, 0x08	; 8
   16930:	b0 e0       	ldi	r27, 0x00	; 0
   16932:	ed e9       	ldi	r30, 0x9D	; 157
   16934:	f4 eb       	ldi	r31, 0xB4	; 180
   16936:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__prologue_saves__+0x20>
   1693a:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <AMIGOs>
   1693e:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <AMIGOs+0x1>
   16942:	86 81       	ldd	r24, Z+6	; 0x06
   16944:	88 87       	std	Y+8, r24	; 0x08
   16946:	80 e0       	ldi	r24, 0x00	; 0
   16948:	91 e0       	ldi	r25, 0x01	; 1
   1694a:	9f 83       	std	Y+7, r25	; 0x07
   1694c:	8e 83       	std	Y+6, r24	; 0x06
   1694e:	ae 01       	movw	r20, r28
   16950:	4a 5f       	subi	r20, 0xFA	; 250
   16952:	5f 4f       	sbci	r21, 0xFF	; 255
   16954:	61 e0       	ldi	r22, 0x01	; 1
   16956:	70 e0       	ldi	r23, 0x00	; 0
   16958:	ce 01       	movw	r24, r28
   1695a:	08 96       	adiw	r24, 0x08	; 8
   1695c:	0e 94 bd 89 	call	0x1137a	; 0x1137a <gpib_write_str>
   16960:	2e 81       	ldd	r18, Y+6	; 0x06
   16962:	3f 81       	ldd	r19, Y+7	; 0x07
   16964:	22 27       	eor	r18, r18
   16966:	30 7d       	andi	r19, 0xD0	; 208
   16968:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <AMIGOs>
   1696c:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <AMIGOs+0x1>
   16970:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   16974:	23 2b       	or	r18, r19
   16976:	11 f4       	brne	.+4      	; 0x1697c <amigo_cmd_dsj+0x4e>
   16978:	01 97       	sbiw	r24, 0x01	; 1
   1697a:	c1 f0       	breq	.+48     	; 0x169ac <amigo_cmd_dsj+0x7e>
   1697c:	81 e0       	ldi	r24, 0x01	; 1
   1697e:	86 83       	std	Z+6, r24	; 0x06
   16980:	87 81       	ldd	r24, Z+7	; 0x07
   16982:	90 85       	ldd	r25, Z+8	; 0x08
   16984:	80 62       	ori	r24, 0x20	; 32
   16986:	90 87       	std	Z+8, r25	; 0x08
   16988:	87 83       	std	Z+7, r24	; 0x07
   1698a:	40 ff       	sbrs	r20, 0
   1698c:	0a c0       	rjmp	.+20     	; 0x169a2 <amigo_cmd_dsj+0x74>
   1698e:	80 ed       	ldi	r24, 0xD0	; 208
   16990:	9c e2       	ldi	r25, 0x2C	; 44
   16992:	a0 e0       	ldi	r26, 0x00	; 0
   16994:	ed b7       	in	r30, 0x3d	; 61
   16996:	fe b7       	in	r31, 0x3e	; 62
   16998:	81 83       	std	Z+1, r24	; 0x01
   1699a:	92 83       	std	Z+2, r25	; 0x02
   1699c:	a3 83       	std	Z+3, r26	; 0x03
   1699e:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   169a2:	8e 81       	ldd	r24, Y+6	; 0x06
   169a4:	9f 81       	ldd	r25, Y+7	; 0x07
   169a6:	88 27       	eor	r24, r24
   169a8:	90 7d       	andi	r25, 0xD0	; 208
   169aa:	19 c0       	rjmp	.+50     	; 0x169de <amigo_cmd_dsj+0xb0>
   169ac:	45 ff       	sbrs	r20, 5
   169ae:	0e c0       	rjmp	.+28     	; 0x169cc <amigo_cmd_dsj+0x9e>
   169b0:	86 81       	ldd	r24, Z+6	; 0x06
   169b2:	90 e0       	ldi	r25, 0x00	; 0
   169b4:	ed b7       	in	r30, 0x3d	; 61
   169b6:	fe b7       	in	r31, 0x3e	; 62
   169b8:	95 83       	std	Z+5, r25	; 0x05
   169ba:	84 83       	std	Z+4, r24	; 0x04
   169bc:	83 ec       	ldi	r24, 0xC3	; 195
   169be:	9c e2       	ldi	r25, 0x2C	; 44
   169c0:	a0 e0       	ldi	r26, 0x00	; 0
   169c2:	81 83       	std	Z+1, r24	; 0x01
   169c4:	92 83       	std	Z+2, r25	; 0x02
   169c6:	a3 83       	std	Z+3, r26	; 0x03
   169c8:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   169cc:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <AMIGOs>
   169d0:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <AMIGOs+0x1>
   169d4:	16 82       	std	Z+6, r1	; 0x06
   169d6:	10 86       	std	Z+8, r1	; 0x08
   169d8:	17 82       	std	Z+7, r1	; 0x07
   169da:	80 e0       	ldi	r24, 0x00	; 0
   169dc:	90 e0       	ldi	r25, 0x00	; 0
   169de:	28 96       	adiw	r28, 0x08	; 8
   169e0:	e2 e0       	ldi	r30, 0x02	; 2
   169e2:	0c 94 35 e3 	jmp	0x1c66a	; 0x1c66a <__epilogue_restores__+0x20>

000169e6 <amigo_cmd_clear>:
/// - Reference: A23.
/// - Select sector 0.
/// @return  0

int amigo_cmd_clear()
{
   169e6:	00 d0       	rcall	.+0      	; 0x169e8 <amigo_cmd_clear+0x2>
   169e8:	1f 92       	push	r1
#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   169ea:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   169ee:	85 ff       	sbrs	r24, 5
   169f0:	0a c0       	rjmp	.+20     	; 0x16a06 <amigo_cmd_clear+0x20>
        printf("[AMIGO Clear]\n");
   169f2:	84 eb       	ldi	r24, 0xB4	; 180
   169f4:	9c e2       	ldi	r25, 0x2C	; 44
   169f6:	a0 e0       	ldi	r26, 0x00	; 0
   169f8:	ed b7       	in	r30, 0x3d	; 61
   169fa:	fe b7       	in	r31, 0x3e	; 62
   169fc:	81 83       	std	Z+1, r24	; 0x01
   169fe:	92 83       	std	Z+2, r25	; 0x02
   16a00:	a3 83       	std	Z+3, r26	; 0x03
   16a02:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
#endif
    AMIGOs->sector = 0;
   16a06:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <AMIGOs>
   16a0a:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <AMIGOs+0x1>
   16a0e:	15 82       	std	Z+5, r1	; 0x05
    AMIGOs->head = 0;
   16a10:	14 82       	std	Z+4, r1	; 0x04
    AMIGOs->cyl = 0;
   16a12:	13 82       	std	Z+3, r1	; 0x03
/// @todo FIXME
///
///  Clear the DSJ byte that might be 2 after powerup
///
    AMIGOs->dsj = 0;
   16a14:	16 82       	std	Z+6, r1	; 0x06
    AMIGOs->Errors =0;
   16a16:	10 86       	std	Z+8, r1	; 0x08
   16a18:	17 82       	std	Z+7, r1	; 0x07

    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   16a1a:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <AMIGOp>
   16a1e:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <AMIGOp+0x1>
   16a22:	81 81       	ldd	r24, Z+1	; 0x01
   16a24:	90 e0       	ldi	r25, 0x00	; 0
   16a26:	0e 94 8d 84 	call	0x1091a	; 0x1091a <gpib_enable_PPR>
    return(0);
}
   16a2a:	80 e0       	ldi	r24, 0x00	; 0
   16a2c:	90 e0       	ldi	r25, 0x00	; 0
   16a2e:	0f 90       	pop	r0
   16a30:	0f 90       	pop	r0
   16a32:	0f 90       	pop	r0
   16a34:	08 95       	ret

00016a36 <amigo_todo_op>:
/// @param[in] opcode: GPIB data byte OP Code
/// @param[in] len: Length of GOIB data returned
/// @return  0

int amigo_todo_op(uint8_t secondary, uint8_t opcode, int len)
{
   16a36:	af e0       	ldi	r26, 0x0F	; 15
   16a38:	b0 e0       	ldi	r27, 0x00	; 0
   16a3a:	e1 e2       	ldi	r30, 0x21	; 33
   16a3c:	f5 eb       	ldi	r31, 0xB5	; 181
   16a3e:	0c 94 15 e3 	jmp	0x1c62a	; 0x1c62a <__prologue_saves__+0x18>
   16a42:	c8 2f       	mov	r28, r24
   16a44:	e6 2e       	mov	r14, r22
   16a46:	8a 01       	movw	r16, r20
    if(AMIGO_is_MLA(listening))
   16a48:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   16a4c:	90 e0       	ldi	r25, 0x00	; 0
   16a4e:	0e 94 f0 8a 	call	0x115e0	; 0x115e0 <AMIGO_is_MLA>
   16a52:	20 91 fa 1e 	lds	r18, 0x1EFA	; 0x801efa <talking>
   16a56:	f1 2c       	mov	r15, r1
   16a58:	d0 e0       	ldi	r29, 0x00	; 0
   16a5a:	89 2b       	or	r24, r25
   16a5c:	f1 f0       	breq	.+60     	; 0x16a9a <amigo_todo_op+0x64>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   16a5e:	82 2f       	mov	r24, r18
   16a60:	90 e0       	ldi	r25, 0x00	; 0
   16a62:	ed b7       	in	r30, 0x3d	; 61
   16a64:	fe b7       	in	r31, 0x3e	; 62
   16a66:	97 87       	std	Z+15, r25	; 0x0f
   16a68:	86 87       	std	Z+14, r24	; 0x0e
   16a6a:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   16a6e:	90 e0       	ldi	r25, 0x00	; 0
   16a70:	95 87       	std	Z+13, r25	; 0x0d
   16a72:	84 87       	std	Z+12, r24	; 0x0c
   16a74:	13 87       	std	Z+11, r17	; 0x0b
   16a76:	02 87       	std	Z+10, r16	; 0x0a
   16a78:	f1 86       	std	Z+9, r15	; 0x09
   16a7a:	e0 86       	std	Z+8, r14	; 0x08
   16a7c:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <AMIGOs>
   16a80:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <AMIGOs+0x1>
   16a84:	80 81       	ld	r24, Z
   16a86:	90 e0       	ldi	r25, 0x00	; 0
   16a88:	ed b7       	in	r30, 0x3d	; 61
   16a8a:	fe b7       	in	r31, 0x3e	; 62
   16a8c:	97 83       	std	Z+7, r25	; 0x07
   16a8e:	86 83       	std	Z+6, r24	; 0x06
   16a90:	d5 83       	std	Z+5, r29	; 0x05
   16a92:	c4 83       	std	Z+4, r28	; 0x04
   16a94:	8d e4       	ldi	r24, 0x4D	; 77
   16a96:	9c e2       	ldi	r25, 0x2C	; 44
   16a98:	51 c0       	rjmp	.+162    	; 0x16b3c <amigo_todo_op+0x106>
            secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(AMIGO_is_MTA(talking))
   16a9a:	82 2f       	mov	r24, r18
   16a9c:	90 e0       	ldi	r25, 0x00	; 0
   16a9e:	0e 94 01 8b 	call	0x11602	; 0x11602 <AMIGO_is_MTA>
   16aa2:	20 91 fc 1e 	lds	r18, 0x1EFC	; 0x801efc <listening>
   16aa6:	30 91 fa 1e 	lds	r19, 0x1EFA	; 0x801efa <talking>
   16aaa:	a0 91 6e 19 	lds	r26, 0x196E	; 0x80196e <AMIGOs>
   16aae:	b0 91 6f 19 	lds	r27, 0x196F	; 0x80196f <AMIGOs+0x1>
   16ab2:	89 2b       	or	r24, r25
   16ab4:	b1 f0       	breq	.+44     	; 0x16ae2 <amigo_todo_op+0xac>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   16ab6:	83 2f       	mov	r24, r19
   16ab8:	90 e0       	ldi	r25, 0x00	; 0
   16aba:	ed b7       	in	r30, 0x3d	; 61
   16abc:	fe b7       	in	r31, 0x3e	; 62
   16abe:	97 87       	std	Z+15, r25	; 0x0f
   16ac0:	86 87       	std	Z+14, r24	; 0x0e
   16ac2:	30 e0       	ldi	r19, 0x00	; 0
   16ac4:	35 87       	std	Z+13, r19	; 0x0d
   16ac6:	24 87       	std	Z+12, r18	; 0x0c
   16ac8:	13 87       	std	Z+11, r17	; 0x0b
   16aca:	02 87       	std	Z+10, r16	; 0x0a
   16acc:	f1 86       	std	Z+9, r15	; 0x09
   16ace:	e0 86       	std	Z+8, r14	; 0x08
   16ad0:	8c 91       	ld	r24, X
   16ad2:	90 e0       	ldi	r25, 0x00	; 0
   16ad4:	97 83       	std	Z+7, r25	; 0x07
   16ad6:	86 83       	std	Z+6, r24	; 0x06
   16ad8:	d5 83       	std	Z+5, r29	; 0x05
   16ada:	c4 83       	std	Z+4, r28	; 0x04
   16adc:	86 ee       	ldi	r24, 0xE6	; 230
   16ade:	9b e2       	ldi	r25, 0x2B	; 43
   16ae0:	2d c0       	rjmp	.+90     	; 0x16b3c <amigo_todo_op+0x106>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(talking == UNT)
   16ae2:	3f 35       	cpi	r19, 0x5F	; 95
   16ae4:	b1 f4       	brne	.+44     	; 0x16b12 <amigo_todo_op+0xdc>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   16ae6:	8f e5       	ldi	r24, 0x5F	; 95
   16ae8:	90 e0       	ldi	r25, 0x00	; 0
   16aea:	ed b7       	in	r30, 0x3d	; 61
   16aec:	fe b7       	in	r31, 0x3e	; 62
   16aee:	97 87       	std	Z+15, r25	; 0x0f
   16af0:	86 87       	std	Z+14, r24	; 0x0e
   16af2:	30 e0       	ldi	r19, 0x00	; 0
   16af4:	35 87       	std	Z+13, r19	; 0x0d
   16af6:	24 87       	std	Z+12, r18	; 0x0c
   16af8:	13 87       	std	Z+11, r17	; 0x0b
   16afa:	02 87       	std	Z+10, r16	; 0x0a
   16afc:	f1 86       	std	Z+9, r15	; 0x09
   16afe:	e0 86       	std	Z+8, r14	; 0x08
   16b00:	8c 91       	ld	r24, X
   16b02:	90 e0       	ldi	r25, 0x00	; 0
   16b04:	97 83       	std	Z+7, r25	; 0x07
   16b06:	86 83       	std	Z+6, r24	; 0x06
   16b08:	d5 83       	std	Z+5, r29	; 0x05
   16b0a:	c4 83       	std	Z+4, r28	; 0x04
   16b0c:	8f e7       	ldi	r24, 0x7F	; 127
   16b0e:	9b e2       	ldi	r25, 0x2B	; 43
   16b10:	15 c0       	rjmp	.+42     	; 0x16b3c <amigo_todo_op+0x106>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else
        printf("[U Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   16b12:	83 2f       	mov	r24, r19
   16b14:	90 e0       	ldi	r25, 0x00	; 0
   16b16:	ed b7       	in	r30, 0x3d	; 61
   16b18:	fe b7       	in	r31, 0x3e	; 62
   16b1a:	97 87       	std	Z+15, r25	; 0x0f
   16b1c:	86 87       	std	Z+14, r24	; 0x0e
   16b1e:	30 e0       	ldi	r19, 0x00	; 0
   16b20:	35 87       	std	Z+13, r19	; 0x0d
   16b22:	24 87       	std	Z+12, r18	; 0x0c
   16b24:	13 87       	std	Z+11, r17	; 0x0b
   16b26:	02 87       	std	Z+10, r16	; 0x0a
   16b28:	f1 86       	std	Z+9, r15	; 0x09
   16b2a:	e0 86       	std	Z+8, r14	; 0x08
   16b2c:	8c 91       	ld	r24, X
   16b2e:	90 e0       	ldi	r25, 0x00	; 0
   16b30:	97 83       	std	Z+7, r25	; 0x07
   16b32:	86 83       	std	Z+6, r24	; 0x06
   16b34:	d5 83       	std	Z+5, r29	; 0x05
   16b36:	c4 83       	std	Z+4, r28	; 0x04
   16b38:	8a e1       	ldi	r24, 0x1A	; 26
   16b3a:	9b e2       	ldi	r25, 0x2B	; 43
   16b3c:	a0 e0       	ldi	r26, 0x00	; 0
   16b3e:	81 83       	std	Z+1, r24	; 0x01
   16b40:	92 83       	std	Z+2, r25	; 0x02
   16b42:	a3 83       	std	Z+3, r26	; 0x03
   16b44:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
            secondary, AMIGOs->state, opcode, len, listening, talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   16b48:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <AMIGOp>
   16b4c:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <AMIGOp+0x1>
   16b50:	81 81       	ldd	r24, Z+1	; 0x01
   16b52:	90 e0       	ldi	r25, 0x00	; 0
   16b54:	0e 94 8d 84 	call	0x1091a	; 0x1091a <gpib_enable_PPR>
    return(0);
}
   16b58:	80 e0       	ldi	r24, 0x00	; 0
   16b5a:	90 e0       	ldi	r25, 0x00	; 0
   16b5c:	cd b7       	in	r28, 0x3d	; 61
   16b5e:	de b7       	in	r29, 0x3e	; 62
   16b60:	2f 96       	adiw	r28, 0x0f	; 15
   16b62:	e6 e0       	ldi	r30, 0x06	; 6
   16b64:	0c 94 31 e3 	jmp	0x1c662	; 0x1c662 <__epilogue_restores__+0x18>

00016b68 <amigo_todo>:
/// @param[in] secondary: GPIB seconday command
///
/// @return  0

int amigo_todo(uint8_t secondary)
{
   16b68:	ab e0       	ldi	r26, 0x0B	; 11
   16b6a:	b0 e0       	ldi	r27, 0x00	; 0
   16b6c:	ea eb       	ldi	r30, 0xBA	; 186
   16b6e:	f5 eb       	ldi	r31, 0xB5	; 181
   16b70:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__prologue_saves__+0x20>
   16b74:	c8 2f       	mov	r28, r24
    if(AMIGO_is_MLA(listening))
   16b76:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   16b7a:	90 e0       	ldi	r25, 0x00	; 0
   16b7c:	0e 94 f0 8a 	call	0x115e0	; 0x115e0 <AMIGO_is_MLA>
   16b80:	20 91 fa 1e 	lds	r18, 0x1EFA	; 0x801efa <talking>
   16b84:	d0 e0       	ldi	r29, 0x00	; 0
   16b86:	89 2b       	or	r24, r25
   16b88:	d1 f0       	breq	.+52     	; 0x16bbe <amigo_todo+0x56>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   16b8a:	82 2f       	mov	r24, r18
   16b8c:	90 e0       	ldi	r25, 0x00	; 0
   16b8e:	ed b7       	in	r30, 0x3d	; 61
   16b90:	fe b7       	in	r31, 0x3e	; 62
   16b92:	93 87       	std	Z+11, r25	; 0x0b
   16b94:	82 87       	std	Z+10, r24	; 0x0a
   16b96:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   16b9a:	90 e0       	ldi	r25, 0x00	; 0
   16b9c:	91 87       	std	Z+9, r25	; 0x09
   16b9e:	80 87       	std	Z+8, r24	; 0x08
   16ba0:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <AMIGOs>
   16ba4:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <AMIGOs+0x1>
   16ba8:	80 81       	ld	r24, Z
   16baa:	90 e0       	ldi	r25, 0x00	; 0
   16bac:	ed b7       	in	r30, 0x3d	; 61
   16bae:	fe b7       	in	r31, 0x3e	; 62
   16bb0:	97 83       	std	Z+7, r25	; 0x07
   16bb2:	86 83       	std	Z+6, r24	; 0x06
   16bb4:	d5 83       	std	Z+5, r29	; 0x05
   16bb6:	c4 83       	std	Z+4, r28	; 0x04
   16bb8:	8a ec       	ldi	r24, 0xCA	; 202
   16bba:	9a e2       	ldi	r25, 0x2A	; 42
   16bbc:	43 c0       	rjmp	.+134    	; 0x16c44 <amigo_todo+0xdc>
            secondary,AMIGOs->state,listening,talking);
    else if(AMIGO_is_MTA(talking))
   16bbe:	82 2f       	mov	r24, r18
   16bc0:	90 e0       	ldi	r25, 0x00	; 0
   16bc2:	0e 94 01 8b 	call	0x11602	; 0x11602 <AMIGO_is_MTA>
   16bc6:	20 91 fc 1e 	lds	r18, 0x1EFC	; 0x801efc <listening>
   16bca:	40 91 fa 1e 	lds	r20, 0x1EFA	; 0x801efa <talking>
   16bce:	a0 91 6e 19 	lds	r26, 0x196E	; 0x80196e <AMIGOs>
   16bd2:	b0 91 6f 19 	lds	r27, 0x196F	; 0x80196f <AMIGOs+0x1>
   16bd6:	89 2b       	or	r24, r25
   16bd8:	89 f0       	breq	.+34     	; 0x16bfc <amigo_todo+0x94>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   16bda:	50 e0       	ldi	r21, 0x00	; 0
   16bdc:	ed b7       	in	r30, 0x3d	; 61
   16bde:	fe b7       	in	r31, 0x3e	; 62
   16be0:	53 87       	std	Z+11, r21	; 0x0b
   16be2:	42 87       	std	Z+10, r20	; 0x0a
   16be4:	30 e0       	ldi	r19, 0x00	; 0
   16be6:	31 87       	std	Z+9, r19	; 0x09
   16be8:	20 87       	std	Z+8, r18	; 0x08
   16bea:	8c 91       	ld	r24, X
   16bec:	90 e0       	ldi	r25, 0x00	; 0
   16bee:	97 83       	std	Z+7, r25	; 0x07
   16bf0:	86 83       	std	Z+6, r24	; 0x06
   16bf2:	d5 83       	std	Z+5, r29	; 0x05
   16bf4:	c4 83       	std	Z+4, r28	; 0x04
   16bf6:	8a e7       	ldi	r24, 0x7A	; 122
   16bf8:	9a e2       	ldi	r25, 0x2A	; 42
   16bfa:	24 c0       	rjmp	.+72     	; 0x16c44 <amigo_todo+0xdc>
                secondary,AMIGOs->state,listening,talking);
    else if(talking == UNT)
   16bfc:	4f 35       	cpi	r20, 0x5F	; 95
   16bfe:	91 f4       	brne	.+36     	; 0x16c24 <amigo_todo+0xbc>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   16c00:	8f e5       	ldi	r24, 0x5F	; 95
   16c02:	90 e0       	ldi	r25, 0x00	; 0
   16c04:	ed b7       	in	r30, 0x3d	; 61
   16c06:	fe b7       	in	r31, 0x3e	; 62
   16c08:	93 87       	std	Z+11, r25	; 0x0b
   16c0a:	82 87       	std	Z+10, r24	; 0x0a
   16c0c:	30 e0       	ldi	r19, 0x00	; 0
   16c0e:	31 87       	std	Z+9, r19	; 0x09
   16c10:	20 87       	std	Z+8, r18	; 0x08
   16c12:	8c 91       	ld	r24, X
   16c14:	90 e0       	ldi	r25, 0x00	; 0
   16c16:	97 83       	std	Z+7, r25	; 0x07
   16c18:	86 83       	std	Z+6, r24	; 0x06
   16c1a:	d5 83       	std	Z+5, r29	; 0x05
   16c1c:	c4 83       	std	Z+4, r28	; 0x04
   16c1e:	8a e2       	ldi	r24, 0x2A	; 42
   16c20:	9a e2       	ldi	r25, 0x2A	; 42
   16c22:	10 c0       	rjmp	.+32     	; 0x16c44 <amigo_todo+0xdc>
                secondary,AMIGOs->state,listening,talking);
    else
        printf("[E   Amigo ERROR secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   16c24:	50 e0       	ldi	r21, 0x00	; 0
   16c26:	ed b7       	in	r30, 0x3d	; 61
   16c28:	fe b7       	in	r31, 0x3e	; 62
   16c2a:	53 87       	std	Z+11, r21	; 0x0b
   16c2c:	42 87       	std	Z+10, r20	; 0x0a
   16c2e:	30 e0       	ldi	r19, 0x00	; 0
   16c30:	31 87       	std	Z+9, r19	; 0x09
   16c32:	20 87       	std	Z+8, r18	; 0x08
   16c34:	8c 91       	ld	r24, X
   16c36:	90 e0       	ldi	r25, 0x00	; 0
   16c38:	97 83       	std	Z+7, r25	; 0x07
   16c3a:	86 83       	std	Z+6, r24	; 0x06
   16c3c:	d5 83       	std	Z+5, r29	; 0x05
   16c3e:	c4 83       	std	Z+4, r28	; 0x04
   16c40:	89 ed       	ldi	r24, 0xD9	; 217
   16c42:	99 e2       	ldi	r25, 0x29	; 41
   16c44:	a0 e0       	ldi	r26, 0x00	; 0
   16c46:	81 83       	std	Z+1, r24	; 0x01
   16c48:	92 83       	std	Z+2, r25	; 0x02
   16c4a:	a3 83       	std	Z+3, r26	; 0x03
   16c4c:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
            secondary,AMIGOs->state,listening,talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   16c50:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <AMIGOp>
   16c54:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <AMIGOp+0x1>
   16c58:	81 81       	ldd	r24, Z+1	; 0x01
   16c5a:	90 e0       	ldi	r25, 0x00	; 0
   16c5c:	0e 94 8d 84 	call	0x1091a	; 0x1091a <gpib_enable_PPR>
    return(0);
}
   16c60:	80 e0       	ldi	r24, 0x00	; 0
   16c62:	90 e0       	ldi	r25, 0x00	; 0
   16c64:	cd b7       	in	r28, 0x3d	; 61
   16c66:	de b7       	in	r29, 0x3e	; 62
   16c68:	2b 96       	adiw	r28, 0x0b	; 11
   16c6a:	e2 e0       	ldi	r30, 0x02	; 2
   16c6c:	0c 94 35 e3 	jmp	0x1c66a	; 0x1c66a <__epilogue_restores__+0x20>

00016c70 <amigo_check_unit>:
/// @brief  Amigo Check Valid unit
/// @param[in] unit: unit to set
/// @return void
void amigo_check_unit(uint8_t unit)
{
    if(unit != 15)
   16c70:	8f 30       	cpi	r24, 0x0F	; 15
   16c72:	29 f0       	breq	.+10     	; 0x16c7e <amigo_check_unit+0xe>
        AMIGOs->unitNO = unit;
   16c74:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <AMIGOs>
   16c78:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <AMIGOs+0x1>
   16c7c:	81 83       	std	Z+1, r24	; 0x01
    if(AMIGOs->unitNO != 0)
   16c7e:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <AMIGOs>
   16c82:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <AMIGOs+0x1>
   16c86:	81 81       	ldd	r24, Z+1	; 0x01
   16c88:	88 23       	and	r24, r24
   16c8a:	29 f0       	breq	.+10     	; 0x16c96 <amigo_check_unit+0x26>
        AMIGOs->Errors |= ERR_UNIT;
   16c8c:	87 81       	ldd	r24, Z+7	; 0x07
   16c8e:	90 85       	ldd	r25, Z+8	; 0x08
   16c90:	80 64       	ori	r24, 0x40	; 64
   16c92:	90 87       	std	Z+8, r25	; 0x08
   16c94:	87 83       	std	Z+7, r24	; 0x07
   16c96:	08 95       	ret

00016c98 <Amigo_Command>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)

int Amigo_Command( int secondary )
{
   16c98:	ac e1       	ldi	r26, 0x1C	; 28
   16c9a:	b0 e0       	ldi	r27, 0x00	; 0
   16c9c:	e2 e5       	ldi	r30, 0x52	; 82
   16c9e:	f6 eb       	ldi	r31, 0xB6	; 182
   16ca0:	0c 94 15 e3 	jmp	0x1c62a	; 0x1c62a <__prologue_saves__+0x18>
   16ca4:	7c 01       	movw	r14, r24
    uint8_t *ptr;
    uint16_t status;                              // Current status
    UINT len;                                     // Size of Data/Op Codes/Parameters read in bytes

#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16ca6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16caa:	85 ff       	sbrs	r24, 5
   16cac:	16 c0       	rjmp	.+44     	; 0x16cda <Amigo_Command+0x42>
        printf("[AMIGO Command(%02XH): listen:%02XH, talk:%02XH]\n",
   16cae:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   16cb2:	90 e0       	ldi	r25, 0x00	; 0
   16cb4:	ed b7       	in	r30, 0x3d	; 61
   16cb6:	fe b7       	in	r31, 0x3e	; 62
   16cb8:	91 87       	std	Z+9, r25	; 0x09
   16cba:	80 87       	std	Z+8, r24	; 0x08
   16cbc:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   16cc0:	90 e0       	ldi	r25, 0x00	; 0
   16cc2:	97 83       	std	Z+7, r25	; 0x07
   16cc4:	86 83       	std	Z+6, r24	; 0x06
   16cc6:	f5 82       	std	Z+5, r15	; 0x05
   16cc8:	e4 82       	std	Z+4, r14	; 0x04
   16cca:	87 ea       	ldi	r24, 0xA7	; 167
   16ccc:	99 e2       	ldi	r25, 0x29	; 41
   16cce:	a0 e0       	ldi	r26, 0x00	; 0
   16cd0:	81 83       	std	Z+1, r24	; 0x01
   16cd2:	92 83       	std	Z+2, r25	; 0x02
   16cd4:	a3 83       	std	Z+3, r26	; 0x03
   16cd6:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
            secondary, listening, talking);
#endif

///  Reference: A14
    if (secondary == 0x7e && AMIGO_is_MTA(talking))
   16cda:	fe e7       	ldi	r31, 0x7E	; 126
   16cdc:	ef 16       	cp	r14, r31
   16cde:	f1 04       	cpc	r15, r1
   16ce0:	f1 f5       	brne	.+124    	; 0x16d5e <Amigo_Command+0xc6>
   16ce2:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   16ce6:	90 e0       	ldi	r25, 0x00	; 0
   16ce8:	0e 94 01 8b 	call	0x11602	; 0x11602 <AMIGO_is_MTA>
   16cec:	89 2b       	or	r24, r25
   16cee:	09 f4       	brne	.+2      	; 0x16cf2 <Amigo_Command+0x5a>
   16cf0:	86 c0       	rjmp	.+268    	; 0x16dfe <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   16cf2:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <AMIGOp>
   16cf6:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <AMIGOp+0x1>
   16cfa:	81 81       	ldd	r24, Z+1	; 0x01
   16cfc:	90 e0       	ldi	r25, 0x00	; 0
   16cfe:	0e 94 c3 84 	call	0x10986	; 0x10986 <gpib_disable_PPR>
        status = EOI_FLAG;
   16d02:	80 e0       	ldi	r24, 0x00	; 0
   16d04:	91 e0       	ldi	r25, 0x01	; 1
   16d06:	9c 8f       	std	Y+28, r25	; 0x1c
   16d08:	8b 8f       	std	Y+27, r24	; 0x1b
        len = gpib_write_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   16d0a:	ae 01       	movw	r20, r28
   16d0c:	45 5e       	subi	r20, 0xE5	; 229
   16d0e:	5f 4f       	sbci	r21, 0xFF	; 255
   16d10:	60 e0       	ldi	r22, 0x00	; 0
   16d12:	72 e0       	ldi	r23, 0x02	; 2
   16d14:	86 ef       	ldi	r24, 0xF6	; 246
   16d16:	9c e1       	ldi	r25, 0x1C	; 28
   16d18:	0e 94 bd 89 	call	0x1137a	; 0x1137a <gpib_write_str>
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   16d1c:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <AMIGOp>
   16d20:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <AMIGOp+0x1>
   16d24:	81 81       	ldd	r24, Z+1	; 0x01
   16d26:	90 e0       	ldi	r25, 0x00	; 0
   16d28:	0e 94 8d 84 	call	0x1091a	; 0x1091a <gpib_enable_PPR>
        if(status & ERROR_MASK)
   16d2c:	8b 8d       	ldd	r24, Y+27	; 0x1b
   16d2e:	9c 8d       	ldd	r25, Y+28	; 0x1c
   16d30:	88 27       	eor	r24, r24
   16d32:	90 7d       	andi	r25, 0xD0	; 208
   16d34:	89 2b       	or	r24, r25
   16d36:	09 f4       	brne	.+2      	; 0x16d3a <Amigo_Command+0xa2>
   16d38:	89 c2       	rjmp	.+1298   	; 0x1724c <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   16d3a:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <AMIGOs>
   16d3e:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <AMIGOs+0x1>
   16d42:	81 e0       	ldi	r24, 0x01	; 1
   16d44:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   16d46:	87 81       	ldd	r24, Z+7	; 0x07
   16d48:	90 85       	ldd	r25, Z+8	; 0x08
   16d4a:	80 62       	ori	r24, 0x20	; 32
   16d4c:	90 87       	std	Z+8, r25	; 0x08
   16d4e:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & GPIB_ERR)
   16d50:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16d54:	80 ff       	sbrs	r24, 0
   16d56:	7a c2       	rjmp	.+1268   	; 0x1724c <Amigo_Command+0x5b4>
                printf("[AMIGO_Command:GPIB write error]\n");
   16d58:	85 e8       	ldi	r24, 0x85	; 133
   16d5a:	99 e2       	ldi	r25, 0x29	; 41
   16d5c:	8e c0       	rjmp	.+284    	; 0x16e7a <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

///  Reference: A25
    if (secondary == 0x7f && AMIGO_is_MLA(listening))
   16d5e:	ff e7       	ldi	r31, 0x7F	; 127
   16d60:	ef 16       	cp	r14, r31
   16d62:	f1 04       	cpc	r15, r1
   16d64:	09 f0       	breq	.+2      	; 0x16d68 <Amigo_Command+0xd0>
   16d66:	4b c0       	rjmp	.+150    	; 0x16dfe <Amigo_Command+0x166>
   16d68:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   16d6c:	90 e0       	ldi	r25, 0x00	; 0
   16d6e:	0e 94 f0 8a 	call	0x115e0	; 0x115e0 <AMIGO_is_MLA>
   16d72:	89 2b       	or	r24, r25
   16d74:	09 f4       	brne	.+2      	; 0x16d78 <Amigo_Command+0xe0>
   16d76:	43 c0       	rjmp	.+134    	; 0x16dfe <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   16d78:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <AMIGOp>
   16d7c:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <AMIGOp+0x1>
   16d80:	81 81       	ldd	r24, Z+1	; 0x01
   16d82:	90 e0       	ldi	r25, 0x00	; 0
   16d84:	0e 94 c3 84 	call	0x10986	; 0x10986 <gpib_disable_PPR>
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   16d88:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16d8c:	87 fd       	sbrc	r24, 7
            gpib_timer_elapsed_begin();
   16d8e:	0e 94 b3 83 	call	0x10766	; 0x10766 <gpib_timer_elapsed_begin>
#endif
        status = EOI_FLAG;
   16d92:	80 e0       	ldi	r24, 0x00	; 0
   16d94:	91 e0       	ldi	r25, 0x01	; 1
   16d96:	9c 8f       	std	Y+28, r25	; 0x1c
   16d98:	8b 8f       	std	Y+27, r24	; 0x1b
        len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   16d9a:	ae 01       	movw	r20, r28
   16d9c:	45 5e       	subi	r20, 0xE5	; 229
   16d9e:	5f 4f       	sbci	r21, 0xFF	; 255
   16da0:	60 e0       	ldi	r22, 0x00	; 0
   16da2:	72 e0       	ldi	r23, 0x02	; 2
   16da4:	86 ef       	ldi	r24, 0xF6	; 246
   16da6:	9c e1       	ldi	r25, 0x1C	; 28
   16da8:	0e 94 1b 89 	call	0x11236	; 0x11236 <gpib_read_str>
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   16dac:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16db0:	87 ff       	sbrs	r24, 7
   16db2:	04 c0       	rjmp	.+8      	; 0x16dbc <Amigo_Command+0x124>
            gpib_timer_elapsed_end("GPIB read");
   16db4:	87 ed       	ldi	r24, 0xD7	; 215
   16db6:	95 e1       	ldi	r25, 0x15	; 21
   16db8:	0e 94 c5 83 	call	0x1078a	; 0x1078a <gpib_timer_elapsed_end>
#endif
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   16dbc:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <AMIGOp>
   16dc0:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <AMIGOp+0x1>
   16dc4:	81 81       	ldd	r24, Z+1	; 0x01
   16dc6:	90 e0       	ldi	r25, 0x00	; 0
   16dc8:	0e 94 8d 84 	call	0x1091a	; 0x1091a <gpib_enable_PPR>
        if(status & ERROR_MASK)
   16dcc:	8b 8d       	ldd	r24, Y+27	; 0x1b
   16dce:	9c 8d       	ldd	r25, Y+28	; 0x1c
   16dd0:	88 27       	eor	r24, r24
   16dd2:	90 7d       	andi	r25, 0xD0	; 208
   16dd4:	89 2b       	or	r24, r25
   16dd6:	09 f4       	brne	.+2      	; 0x16dda <Amigo_Command+0x142>
   16dd8:	39 c2       	rjmp	.+1138   	; 0x1724c <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   16dda:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <AMIGOs>
   16dde:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <AMIGOs+0x1>
   16de2:	81 e0       	ldi	r24, 0x01	; 1
   16de4:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   16de6:	87 81       	ldd	r24, Z+7	; 0x07
   16de8:	90 85       	ldd	r25, Z+8	; 0x08
   16dea:	80 62       	ori	r24, 0x20	; 32
   16dec:	90 87       	std	Z+8, r25	; 0x08
   16dee:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & GPIB_ERR)
   16df0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16df4:	80 ff       	sbrs	r24, 0
   16df6:	2a c2       	rjmp	.+1108   	; 0x1724c <Amigo_Command+0x5b4>
                printf("[AMIGO Command:GPIB read error]\n");
   16df8:	84 e6       	ldi	r24, 0x64	; 100
   16dfa:	99 e2       	ldi	r25, 0x29	; 41
   16dfc:	3e c0       	rjmp	.+124    	; 0x16e7a <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   16dfe:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   16e02:	90 e0       	ldi	r25, 0x00	; 0
   16e04:	0e 94 f0 8a 	call	0x115e0	; 0x115e0 <AMIGO_is_MLA>
   16e08:	89 2b       	or	r24, r25
   16e0a:	19 f4       	brne	.+6      	; 0x16e12 <Amigo_Command+0x17a>
        return(0);
   16e0c:	80 e0       	ldi	r24, 0x00	; 0
   16e0e:	90 e0       	ldi	r25, 0x00	; 0
   16e10:	25 c2       	rjmp	.+1098   	; 0x1725c <Amigo_Command+0x5c4>
                printf("[AMIGO Command:GPIB read error]\n");
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   16e12:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   16e16:	90 e0       	ldi	r25, 0x00	; 0
   16e18:	0e 94 01 8b 	call	0x11602	; 0x11602 <AMIGO_is_MTA>
   16e1c:	89 2b       	or	r24, r25
   16e1e:	b1 f7       	brne	.-20     	; 0x16e0c <Amigo_Command+0x174>
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   16e20:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <AMIGOp>
   16e24:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <AMIGOp+0x1>
   16e28:	81 81       	ldd	r24, Z+1	; 0x01
   16e2a:	90 e0       	ldi	r25, 0x00	; 0
   16e2c:	0e 94 c3 84 	call	0x10986	; 0x10986 <gpib_disable_PPR>

///  Note: the function will "unread" any commands and return
///  All Data MUST have EOI

    status = EOI_FLAG;
   16e30:	80 e0       	ldi	r24, 0x00	; 0
   16e32:	91 e0       	ldi	r25, 0x01	; 1
   16e34:	9c 8f       	std	Y+28, r25	; 0x1c
   16e36:	8b 8f       	std	Y+27, r24	; 0x1b
    len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   16e38:	ae 01       	movw	r20, r28
   16e3a:	45 5e       	subi	r20, 0xE5	; 229
   16e3c:	5f 4f       	sbci	r21, 0xFF	; 255
   16e3e:	60 e0       	ldi	r22, 0x00	; 0
   16e40:	72 e0       	ldi	r23, 0x02	; 2
   16e42:	86 ef       	ldi	r24, 0xF6	; 246
   16e44:	9c e1       	ldi	r25, 0x1C	; 28
   16e46:	0e 94 1b 89 	call	0x11236	; 0x11236 <gpib_read_str>
   16e4a:	8c 01       	movw	r16, r24
    if(status & ERROR_MASK)
   16e4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
   16e4e:	9c 8d       	ldd	r25, Y+28	; 0x1c
   16e50:	88 27       	eor	r24, r24
   16e52:	90 7d       	andi	r25, 0xD0	; 208
   16e54:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   16e58:	89 2b       	or	r24, r25
   16e5a:	c1 f0       	breq	.+48     	; 0x16e8c <Amigo_Command+0x1f4>
    {
        AMIGOs->dsj = 1;
   16e5c:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <AMIGOs>
   16e60:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <AMIGOs+0x1>
   16e64:	81 e0       	ldi	r24, 0x01	; 1
   16e66:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   16e68:	87 81       	ldd	r24, Z+7	; 0x07
   16e6a:	90 85       	ldd	r25, Z+8	; 0x08
   16e6c:	80 62       	ori	r24, 0x20	; 32
   16e6e:	90 87       	std	Z+8, r25	; 0x08
   16e70:	87 83       	std	Z+7, r24	; 0x07
        if(debuglevel & GPIB_ERR)
   16e72:	20 ff       	sbrs	r18, 0
   16e74:	eb c1       	rjmp	.+982    	; 0x1724c <Amigo_Command+0x5b4>
            printf("[AMIGO Command:GPIB read error]\n");
   16e76:	83 e4       	ldi	r24, 0x43	; 67
   16e78:	99 e2       	ldi	r25, 0x29	; 41
   16e7a:	a0 e0       	ldi	r26, 0x00	; 0
   16e7c:	ed b7       	in	r30, 0x3d	; 61
   16e7e:	fe b7       	in	r31, 0x3e	; 62
   16e80:	81 83       	std	Z+1, r24	; 0x01
   16e82:	92 83       	std	Z+2, r25	; 0x02
   16e84:	a3 83       	std	Z+3, r26	; 0x03
   16e86:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   16e8a:	e0 c1       	rjmp	.+960    	; 0x1724c <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }
#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16e8c:	25 ff       	sbrs	r18, 5
   16e8e:	0e c0       	rjmp	.+28     	; 0x16eac <Amigo_Command+0x214>
        printf("[AMIGO Command(%02XH): GPIB read bytes:%02XH]\n",
   16e90:	ed b7       	in	r30, 0x3d	; 61
   16e92:	fe b7       	in	r31, 0x3e	; 62
   16e94:	17 83       	std	Z+7, r17	; 0x07
   16e96:	06 83       	std	Z+6, r16	; 0x06
   16e98:	f5 82       	std	Z+5, r15	; 0x05
   16e9a:	e4 82       	std	Z+4, r14	; 0x04
   16e9c:	84 e1       	ldi	r24, 0x14	; 20
   16e9e:	99 e2       	ldi	r25, 0x29	; 41
   16ea0:	a0 e0       	ldi	r26, 0x00	; 0
   16ea2:	81 83       	std	Z+1, r24	; 0x01
   16ea4:	92 83       	std	Z+2, r25	; 0x02
   16ea6:	a3 83       	std	Z+3, r26	; 0x03
   16ea8:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
            secondary, len);
#endif
    if(!len)
   16eac:	01 15       	cp	r16, r1
   16eae:	11 05       	cpc	r17, r1
   16eb0:	61 f4       	brne	.+24     	; 0x16eca <Amigo_Command+0x232>
    {
        AMIGOs->dsj = 1;
   16eb2:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <AMIGOs>
   16eb6:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <AMIGOs+0x1>
   16eba:	81 e0       	ldi	r24, 0x01	; 1
   16ebc:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   16ebe:	87 81       	ldd	r24, Z+7	; 0x07
   16ec0:	90 85       	ldd	r25, Z+8	; 0x08
   16ec2:	80 62       	ori	r24, 0x20	; 32
   16ec4:	90 87       	std	Z+8, r25	; 0x08
   16ec6:	87 83       	std	Z+7, r24	; 0x07
   16ec8:	c1 c1       	rjmp	.+898    	; 0x1724c <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }

    ptr = gpib_iobuff;
    op = *ptr++;
   16eca:	60 91 f6 1c 	lds	r22, 0x1CF6	; 0x801cf6 <gpib_iobuff>

    if (secondary == 0x68)
   16ece:	f8 e6       	ldi	r31, 0x68	; 104
   16ed0:	ef 16       	cp	r14, r31
   16ed2:	f1 04       	cpc	r15, r1
   16ed4:	09 f0       	breq	.+2      	; 0x16ed8 <Amigo_Command+0x240>
   16ed6:	28 c1       	rjmp	.+592    	; 0x17128 <Amigo_Command+0x490>
    {
        if(op == 0x00 && len == 2)
   16ed8:	61 11       	cpse	r22, r1
   16eda:	2e c0       	rjmp	.+92     	; 0x16f38 <Amigo_Command+0x2a0>
   16edc:	02 30       	cpi	r16, 0x02	; 2
   16ede:	11 05       	cpc	r17, r1
   16ee0:	09 f0       	breq	.+2      	; 0x16ee4 <Amigo_Command+0x24c>
   16ee2:	b9 c1       	rjmp	.+882    	; 0x17256 <Amigo_Command+0x5be>
        {
///  Reference: A40

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16ee4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16ee8:	85 ff       	sbrs	r24, 5
   16eea:	0a c0       	rjmp	.+20     	; 0x16f00 <Amigo_Command+0x268>
                printf("[AMIGO Cold Load Read Command]\n");
   16eec:	84 ef       	ldi	r24, 0xF4	; 244
   16eee:	98 e2       	ldi	r25, 0x28	; 40
   16ef0:	a0 e0       	ldi	r26, 0x00	; 0
   16ef2:	ed b7       	in	r30, 0x3d	; 61
   16ef4:	fe b7       	in	r31, 0x3e	; 62
   16ef6:	81 83       	std	Z+1, r24	; 0x01
   16ef8:	92 83       	std	Z+2, r25	; 0x02
   16efa:	a3 83       	std	Z+3, r26	; 0x03
   16efc:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
#endif
///TODO we do NOT support multiple units yet
            AMIGOs->unitNO = 0;
   16f00:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <AMIGOs>
   16f04:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <AMIGOs+0x1>
   16f08:	11 82       	std	Z+1, r1	; 0x01
            AMIGOs->dsj = 0;
   16f0a:	16 82       	std	Z+6, r1	; 0x06
            AMIGOs->Errors = 0;
   16f0c:	10 86       	std	Z+8, r1	; 0x08
   16f0e:	17 82       	std	Z+7, r1	; 0x07
/// Fill in temparary address
            tmp.cyl = 0;
   16f10:	1d 86       	std	Y+13, r1	; 0x0d
            tmp.head = ( (0xff & *ptr) >> 6) & 0x03;
   16f12:	80 91 f7 1c 	lds	r24, 0x1CF7	; 0x801cf7 <gpib_iobuff+0x1>
   16f16:	98 2f       	mov	r25, r24
   16f18:	92 95       	swap	r25
   16f1a:	96 95       	lsr	r25
   16f1c:	96 95       	lsr	r25
   16f1e:	93 70       	andi	r25, 0x03	; 3
   16f20:	9e 87       	std	Y+14, r25	; 0x0e
            tmp.sector = 0x3f & *ptr;
   16f22:	8f 73       	andi	r24, 0x3F	; 63
   16f24:	8f 87       	std	Y+15, r24	; 0x0f
            ++ptr;
//update to real address on sucess
            amigo_seek((AMIGOStateType *) &tmp);
   16f26:	ce 01       	movw	r24, r28
   16f28:	0a 96       	adiw	r24, 0x0a	; 10
   16f2a:	d1 d9       	rcall	.-3166   	; 0x162ce <amigo_seek>
            AMIGOs->state = AMIGO_COLD_LOAD_READ;
   16f2c:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <AMIGOs>
   16f30:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <AMIGOs+0x1>
   16f34:	85 e0       	ldi	r24, 0x05	; 5
   16f36:	19 c1       	rjmp	.+562    	; 0x1716a <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 5)
   16f38:	62 30       	cpi	r22, 0x02	; 2
   16f3a:	09 f0       	breq	.+2      	; 0x16f3e <Amigo_Command+0x2a6>
   16f3c:	3f c0       	rjmp	.+126    	; 0x16fbc <Amigo_Command+0x324>
   16f3e:	05 30       	cpi	r16, 0x05	; 5
   16f40:	11 05       	cpc	r17, r1
   16f42:	d1 f4       	brne	.+52     	; 0x16f78 <Amigo_Command+0x2e0>
/// @brief
///  Seek 1 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16f44:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16f48:	85 ff       	sbrs	r24, 5
   16f4a:	0a c0       	rjmp	.+20     	; 0x16f60 <Amigo_Command+0x2c8>
                printf("[AMIGO Seek len=5]\n");
   16f4c:	80 ee       	ldi	r24, 0xE0	; 224
   16f4e:	98 e2       	ldi	r25, 0x28	; 40
   16f50:	a0 e0       	ldi	r26, 0x00	; 0
   16f52:	ed b7       	in	r30, 0x3d	; 61
   16f54:	fe b7       	in	r31, 0x3e	; 62
   16f56:	81 83       	std	Z+1, r24	; 0x01
   16f58:	92 83       	std	Z+2, r25	; 0x02
   16f5a:	a3 83       	std	Z+3, r26	; 0x03
   16f5c:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16f60:	80 91 f7 1c 	lds	r24, 0x1CF7	; 0x801cf7 <gpib_iobuff+0x1>
   16f64:	85 de       	rcall	.-758    	; 0x16c70 <amigo_check_unit>

/// Fill in temparary address
            tmp.cyl = 0xff & *ptr++;
   16f66:	80 91 f8 1c 	lds	r24, 0x1CF8	; 0x801cf8 <gpib_iobuff+0x2>
   16f6a:	8d 87       	std	Y+13, r24	; 0x0d
            tmp.head = 0xff & *ptr++;
   16f6c:	80 91 f9 1c 	lds	r24, 0x1CF9	; 0x801cf9 <gpib_iobuff+0x3>
   16f70:	8e 87       	std	Y+14, r24	; 0x0e
            tmp.sector = 0xff & *ptr++;
   16f72:	80 91 fa 1c 	lds	r24, 0x1CFA	; 0x801cfa <gpib_iobuff+0x4>
   16f76:	1d c0       	rjmp	.+58     	; 0x16fb2 <Amigo_Command+0x31a>
//update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 6)
   16f78:	06 30       	cpi	r16, 0x06	; 6
   16f7a:	11 05       	cpc	r17, r1
   16f7c:	09 f0       	breq	.+2      	; 0x16f80 <Amigo_Command+0x2e8>
   16f7e:	6b c1       	rjmp	.+726    	; 0x17256 <Amigo_Command+0x5be>
/// @brief
///  Seek 2 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16f80:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16f84:	85 ff       	sbrs	r24, 5
   16f86:	0a c0       	rjmp	.+20     	; 0x16f9c <Amigo_Command+0x304>
                printf("[AMIGO Seek len=6]\n");
   16f88:	8c ec       	ldi	r24, 0xCC	; 204
   16f8a:	98 e2       	ldi	r25, 0x28	; 40
   16f8c:	a0 e0       	ldi	r26, 0x00	; 0
   16f8e:	ed b7       	in	r30, 0x3d	; 61
   16f90:	fe b7       	in	r31, 0x3e	; 62
   16f92:	81 83       	std	Z+1, r24	; 0x01
   16f94:	92 83       	std	Z+2, r25	; 0x02
   16f96:	a3 83       	std	Z+3, r26	; 0x03
   16f98:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16f9c:	80 91 f7 1c 	lds	r24, 0x1CF7	; 0x801cf7 <gpib_iobuff+0x1>
   16fa0:	67 de       	rcall	.-818    	; 0x16c70 <amigo_check_unit>
/// Fill in temparary address
            tmp.cyl = (0xff & *ptr++) << 8;       // MSB
            tmp.cyl |= (0xff & *ptr++);           // LSB
   16fa2:	80 91 f9 1c 	lds	r24, 0x1CF9	; 0x801cf9 <gpib_iobuff+0x3>
   16fa6:	8d 87       	std	Y+13, r24	; 0x0d
            tmp.head = 0xff & *ptr++;
   16fa8:	80 91 fa 1c 	lds	r24, 0x1CFA	; 0x801cfa <gpib_iobuff+0x4>
   16fac:	8e 87       	std	Y+14, r24	; 0x0e
            tmp.sector = 0xff & *ptr++;
   16fae:	80 91 fb 1c 	lds	r24, 0x1CFB	; 0x801cfb <gpib_iobuff+0x5>
//update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
   16fb2:	8f 87       	std	Y+15, r24	; 0x0f
   16fb4:	ce 01       	movw	r24, r28
   16fb6:	0a 96       	adiw	r24, 0x0a	; 10
   16fb8:	8a d9       	rcall	.-3308   	; 0x162ce <amigo_seek>
   16fba:	d8 c0       	rjmp	.+432    	; 0x1716c <Amigo_Command+0x4d4>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x03 && len == 2)
   16fbc:	63 30       	cpi	r22, 0x03	; 3
   16fbe:	e9 f4       	brne	.+58     	; 0x16ffa <Amigo_Command+0x362>
   16fc0:	02 30       	cpi	r16, 0x02	; 2
   16fc2:	11 05       	cpc	r17, r1
   16fc4:	09 f0       	breq	.+2      	; 0x16fc8 <Amigo_Command+0x330>
   16fc6:	47 c1       	rjmp	.+654    	; 0x17256 <Amigo_Command+0x5be>
        {
///  Reference: A15
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16fc8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16fcc:	85 ff       	sbrs	r24, 5
   16fce:	0a c0       	rjmp	.+20     	; 0x16fe4 <Amigo_Command+0x34c>
                printf("[AMIGO Request Status Buffered Command]\n");
   16fd0:	83 ea       	ldi	r24, 0xA3	; 163
   16fd2:	98 e2       	ldi	r25, 0x28	; 40
   16fd4:	a0 e0       	ldi	r26, 0x00	; 0
   16fd6:	ed b7       	in	r30, 0x3d	; 61
   16fd8:	fe b7       	in	r31, 0x3e	; 62
   16fda:	81 83       	std	Z+1, r24	; 0x01
   16fdc:	92 83       	std	Z+2, r25	; 0x02
   16fde:	a3 83       	std	Z+3, r26	; 0x03
   16fe0:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16fe4:	80 91 f7 1c 	lds	r24, 0x1CF7	; 0x801cf7 <gpib_iobuff+0x1>
            amigo_request_status();
   16fe8:	43 de       	rcall	.-890    	; 0x16c70 <amigo_check_unit>
   16fea:	3d d8       	rcall	.-3974   	; 0x16066 <amigo_request_status>
            AMIGOs->state = AMIGO_REQUEST_STATUS_BUFFERED;
   16fec:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <AMIGOs>
   16ff0:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <AMIGOs+0x1>
   16ff4:	83 e0       	ldi	r24, 0x03	; 3
   16ff6:	80 83       	st	Z, r24
   16ff8:	29 c1       	rjmp	.+594    	; 0x1724c <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
        else if(op == 0x05 && len == 2)
   16ffa:	65 30       	cpi	r22, 0x05	; 5
   16ffc:	d9 f4       	brne	.+54     	; 0x17034 <Amigo_Command+0x39c>
   16ffe:	02 30       	cpi	r16, 0x02	; 2
   17000:	11 05       	cpc	r17, r1
   17002:	09 f0       	breq	.+2      	; 0x17006 <Amigo_Command+0x36e>
   17004:	28 c1       	rjmp	.+592    	; 0x17256 <Amigo_Command+0x5be>
        {
///  Reference: A35
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17006:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1700a:	85 ff       	sbrs	r24, 5
   1700c:	0a c0       	rjmp	.+20     	; 0x17022 <Amigo_Command+0x38a>
                printf("[AMIGO Read Unbuffered Command]\n");
   1700e:	82 e8       	ldi	r24, 0x82	; 130
   17010:	98 e2       	ldi	r25, 0x28	; 40
   17012:	a0 e0       	ldi	r26, 0x00	; 0
   17014:	ed b7       	in	r30, 0x3d	; 61
   17016:	fe b7       	in	r31, 0x3e	; 62
   17018:	81 83       	std	Z+1, r24	; 0x01
   1701a:	92 83       	std	Z+2, r25	; 0x02
   1701c:	a3 83       	std	Z+3, r26	; 0x03
   1701e:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17022:	80 91 f7 1c 	lds	r24, 0x1CF7	; 0x801cf7 <gpib_iobuff+0x1>
   17026:	24 de       	rcall	.-952    	; 0x16c70 <amigo_check_unit>
            AMIGOs->state = AMIGO_READ_UNBUFFERED;
   17028:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <AMIGOs>
   1702c:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <AMIGOs+0x1>
   17030:	86 e0       	ldi	r24, 0x06	; 6
   17032:	e7 c0       	rjmp	.+462    	; 0x17202 <Amigo_Command+0x56a>
            return(status & ERROR_MASK);
#else
			return( amigo_buffered_read_command() );
#endif
        }
        else if(op == 0x07 && len == 4)
   17034:	67 30       	cpi	r22, 0x07	; 7
   17036:	f9 f4       	brne	.+62     	; 0x17076 <Amigo_Command+0x3de>
   17038:	04 30       	cpi	r16, 0x04	; 4
   1703a:	11 05       	cpc	r17, r1
   1703c:	09 f0       	breq	.+2      	; 0x17040 <Amigo_Command+0x3a8>
   1703e:	0b c1       	rjmp	.+534    	; 0x17256 <Amigo_Command+0x5be>
        {
            uint16_t sectors;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17040:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17044:	85 ff       	sbrs	r24, 5
   17046:	0a c0       	rjmp	.+20     	; 0x1705c <Amigo_Command+0x3c4>
                printf("[AMIGO Verify]\n");
   17048:	82 e7       	ldi	r24, 0x72	; 114
   1704a:	98 e2       	ldi	r25, 0x28	; 40
   1704c:	a0 e0       	ldi	r26, 0x00	; 0
   1704e:	ed b7       	in	r30, 0x3d	; 61
   17050:	fe b7       	in	r31, 0x3e	; 62
   17052:	81 83       	std	Z+1, r24	; 0x01
   17054:	92 83       	std	Z+2, r25	; 0x02
   17056:	a3 83       	std	Z+3, r26	; 0x03
   17058:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1705c:	80 91 f7 1c 	lds	r24, 0x1CF7	; 0x801cf7 <gpib_iobuff+0x1>
   17060:	07 de       	rcall	.-1010   	; 0x16c70 <amigo_check_unit>
            sectors = (0xff & *ptr++) << 8;
   17062:	80 91 f8 1c 	lds	r24, 0x1CF8	; 0x801cf8 <gpib_iobuff+0x2>
   17066:	90 e0       	ldi	r25, 0x00	; 0
   17068:	98 2f       	mov	r25, r24
            sectors |= (0xff & *ptr++);
            return ( amigo_verify( sectors) );
   1706a:	88 27       	eor	r24, r24
   1706c:	20 91 f9 1c 	lds	r18, 0x1CF9	; 0x801cf9 <gpib_iobuff+0x3>
   17070:	82 2b       	or	r24, r18
   17072:	58 d9       	rcall	.-3408   	; 0x16324 <amigo_verify>
   17074:	f3 c0       	rjmp	.+486    	; 0x1725c <Amigo_Command+0x5c4>
        }
        else if(op == 0x08 && len == 2)
   17076:	68 30       	cpi	r22, 0x08	; 8
   17078:	d9 f4       	brne	.+54     	; 0x170b0 <Amigo_Command+0x418>
   1707a:	02 30       	cpi	r16, 0x02	; 2
   1707c:	11 05       	cpc	r17, r1
   1707e:	09 f0       	breq	.+2      	; 0x17082 <Amigo_Command+0x3ea>
   17080:	ea c0       	rjmp	.+468    	; 0x17256 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17082:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17086:	85 ff       	sbrs	r24, 5
   17088:	0a c0       	rjmp	.+20     	; 0x1709e <Amigo_Command+0x406>
                printf("[AMIGO Write Unbuffered Command]\n");
   1708a:	80 e5       	ldi	r24, 0x50	; 80
   1708c:	98 e2       	ldi	r25, 0x28	; 40
   1708e:	a0 e0       	ldi	r26, 0x00	; 0
   17090:	ed b7       	in	r30, 0x3d	; 61
   17092:	fe b7       	in	r31, 0x3e	; 62
   17094:	81 83       	std	Z+1, r24	; 0x01
   17096:	92 83       	std	Z+2, r25	; 0x02
   17098:	a3 83       	std	Z+3, r26	; 0x03
   1709a:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1709e:	80 91 f7 1c 	lds	r24, 0x1CF7	; 0x801cf7 <gpib_iobuff+0x1>
   170a2:	e6 dd       	rcall	.-1076   	; 0x16c70 <amigo_check_unit>
            AMIGOs->state = AMIGO_WRITE_UNBUFFERED;
   170a4:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <AMIGOs>
   170a8:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <AMIGOs+0x1>
   170ac:	88 e0       	ldi	r24, 0x08	; 8
   170ae:	5d c0       	rjmp	.+186    	; 0x1716a <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if((op == 0x0B || op == 0x2b) && len == 2)
   170b0:	86 2f       	mov	r24, r22
   170b2:	8f 7d       	andi	r24, 0xDF	; 223
   170b4:	8b 30       	cpi	r24, 0x0B	; 11
   170b6:	d9 f4       	brne	.+54     	; 0x170ee <Amigo_Command+0x456>
   170b8:	02 30       	cpi	r16, 0x02	; 2
   170ba:	11 05       	cpc	r17, r1
   170bc:	09 f0       	breq	.+2      	; 0x170c0 <Amigo_Command+0x428>
   170be:	cb c0       	rjmp	.+406    	; 0x17256 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   170c0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   170c4:	85 ff       	sbrs	r24, 5
   170c6:	0a c0       	rjmp	.+20     	; 0x170dc <Amigo_Command+0x444>
                printf("[AMIGO Initialize Command]\n");
   170c8:	84 e3       	ldi	r24, 0x34	; 52
   170ca:	98 e2       	ldi	r25, 0x28	; 40
   170cc:	a0 e0       	ldi	r26, 0x00	; 0
   170ce:	ed b7       	in	r30, 0x3d	; 61
   170d0:	fe b7       	in	r31, 0x3e	; 62
   170d2:	81 83       	std	Z+1, r24	; 0x01
   170d4:	92 83       	std	Z+2, r25	; 0x02
   170d6:	a3 83       	std	Z+3, r26	; 0x03
   170d8:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   170dc:	80 91 f7 1c 	lds	r24, 0x1CF7	; 0x801cf7 <gpib_iobuff+0x1>
   170e0:	c7 dd       	rcall	.-1138   	; 0x16c70 <amigo_check_unit>
            AMIGOs->state = AMIGO_INITIALIZE;
   170e2:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <AMIGOs>
   170e6:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <AMIGOs+0x1>
   170ea:	8a e0       	ldi	r24, 0x0A	; 10
   170ec:	3e c0       	rjmp	.+124    	; 0x1716a <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x14 && len == 2)
   170ee:	64 31       	cpi	r22, 0x14	; 20
   170f0:	09 f0       	breq	.+2      	; 0x170f4 <Amigo_Command+0x45c>
   170f2:	b1 c0       	rjmp	.+354    	; 0x17256 <Amigo_Command+0x5be>
   170f4:	02 30       	cpi	r16, 0x02	; 2
   170f6:	11 05       	cpc	r17, r1
   170f8:	09 f0       	breq	.+2      	; 0x170fc <Amigo_Command+0x464>
   170fa:	ad c0       	rjmp	.+346    	; 0x17256 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   170fc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17100:	85 ff       	sbrs	r24, 5
   17102:	0a c0       	rjmp	.+20     	; 0x17118 <Amigo_Command+0x480>
                printf("[AMIGO Request Logical Address Command]\n");
   17104:	8b e0       	ldi	r24, 0x0B	; 11
   17106:	98 e2       	ldi	r25, 0x28	; 40
   17108:	a0 e0       	ldi	r26, 0x00	; 0
   1710a:	ed b7       	in	r30, 0x3d	; 61
   1710c:	fe b7       	in	r31, 0x3e	; 62
   1710e:	81 83       	std	Z+1, r24	; 0x01
   17110:	92 83       	std	Z+2, r25	; 0x02
   17112:	a3 83       	std	Z+3, r26	; 0x03
   17114:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
#endif
            amigo_request_logical_address();
   17118:	0e 94 25 b0 	call	0x1604a	; 0x1604a <amigo_request_logical_address>
            AMIGOs->state = AMIGO_REQUEST_LOGICAL_ADDRESS;
   1711c:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <AMIGOs>
   17120:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <AMIGOs+0x1>
   17124:	84 e0       	ldi	r24, 0x04	; 4
   17126:	21 c0       	rjmp	.+66     	; 0x1716a <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x69)
   17128:	f9 e6       	ldi	r31, 0x69	; 105
   1712a:	ef 16       	cp	r14, r31
   1712c:	f1 04       	cpc	r15, r1
   1712e:	39 f5       	brne	.+78     	; 0x1717e <Amigo_Command+0x4e6>
    {
        if(op == 0x08 && len == 2)
   17130:	68 30       	cpi	r22, 0x08	; 8
   17132:	09 f0       	breq	.+2      	; 0x17136 <Amigo_Command+0x49e>
   17134:	90 c0       	rjmp	.+288    	; 0x17256 <Amigo_Command+0x5be>
   17136:	02 30       	cpi	r16, 0x02	; 2
   17138:	11 05       	cpc	r17, r1
   1713a:	09 f0       	breq	.+2      	; 0x1713e <Amigo_Command+0x4a6>
   1713c:	8c c0       	rjmp	.+280    	; 0x17256 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1713e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17142:	85 ff       	sbrs	r24, 5
   17144:	0a c0       	rjmp	.+20     	; 0x1715a <Amigo_Command+0x4c2>
                printf("[AMIGO Write Buffered Command]\n");
   17146:	8b ee       	ldi	r24, 0xEB	; 235
   17148:	97 e2       	ldi	r25, 0x27	; 39
   1714a:	a0 e0       	ldi	r26, 0x00	; 0
   1714c:	ed b7       	in	r30, 0x3d	; 61
   1714e:	fe b7       	in	r31, 0x3e	; 62
   17150:	81 83       	std	Z+1, r24	; 0x01
   17152:	92 83       	std	Z+2, r25	; 0x02
   17154:	a3 83       	std	Z+3, r26	; 0x03
   17156:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1715a:	80 91 f7 1c 	lds	r24, 0x1CF7	; 0x801cf7 <gpib_iobuff+0x1>
   1715e:	88 dd       	rcall	.-1264   	; 0x16c70 <amigo_check_unit>
            AMIGOs->state = AMIGO_WRITE_BUFFERED;
   17160:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <AMIGOs>
   17164:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <AMIGOs+0x1>
   17168:	89 e0       	ldi	r24, 0x09	; 9
   1716a:	80 83       	st	Z, r24
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
   1716c:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <AMIGOp>
   17170:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <AMIGOp+0x1>
   17174:	81 81       	ldd	r24, Z+1	; 0x01
   17176:	90 e0       	ldi	r25, 0x00	; 0
   17178:	0e 94 8d 84 	call	0x1091a	; 0x1091a <gpib_enable_PPR>
   1717c:	67 c0       	rjmp	.+206    	; 0x1724c <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x6A)
   1717e:	fa e6       	ldi	r31, 0x6A	; 106
   17180:	ef 16       	cp	r14, r31
   17182:	f1 04       	cpc	r15, r1
   17184:	09 f0       	breq	.+2      	; 0x17188 <Amigo_Command+0x4f0>
   17186:	40 c0       	rjmp	.+128    	; 0x17208 <Amigo_Command+0x570>
    {
        if(op == 0x08 && len == 2)
   17188:	68 30       	cpi	r22, 0x08	; 8
   1718a:	f1 f4       	brne	.+60     	; 0x171c8 <Amigo_Command+0x530>
   1718c:	02 30       	cpi	r16, 0x02	; 2
   1718e:	11 05       	cpc	r17, r1
   17190:	09 f0       	breq	.+2      	; 0x17194 <Amigo_Command+0x4fc>
   17192:	61 c0       	rjmp	.+194    	; 0x17256 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17194:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17198:	85 ff       	sbrs	r24, 5
   1719a:	0a c0       	rjmp	.+20     	; 0x171b0 <Amigo_Command+0x518>
                printf("[AMIGO Request Status Unbuffered Command]\n");
   1719c:	80 ec       	ldi	r24, 0xC0	; 192
   1719e:	97 e2       	ldi	r25, 0x27	; 39
   171a0:	a0 e0       	ldi	r26, 0x00	; 0
   171a2:	ed b7       	in	r30, 0x3d	; 61
   171a4:	fe b7       	in	r31, 0x3e	; 62
   171a6:	81 83       	std	Z+1, r24	; 0x01
   171a8:	92 83       	std	Z+2, r25	; 0x02
   171aa:	a3 83       	std	Z+3, r26	; 0x03
   171ac:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   171b0:	80 91 f7 1c 	lds	r24, 0x1CF7	; 0x801cf7 <gpib_iobuff+0x1>
   171b4:	5d dd       	rcall	.-1350   	; 0x16c70 <amigo_check_unit>
            AMIGOs->state = AMIGO_REQUEST_STATUS_UNBUFFERED;
   171b6:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <AMIGOs>
   171ba:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <AMIGOs+0x1>
   171be:	82 e0       	ldi	r24, 0x02	; 2
   171c0:	80 83       	st	Z, r24
            amigo_request_status();
   171c2:	0e 94 33 b0 	call	0x16066	; 0x16066 <amigo_request_status>
   171c6:	42 c0       	rjmp	.+132    	; 0x1724c <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
        if(op == 0x05 && len == 2)
   171c8:	65 30       	cpi	r22, 0x05	; 5
   171ca:	09 f0       	breq	.+2      	; 0x171ce <Amigo_Command+0x536>
   171cc:	44 c0       	rjmp	.+136    	; 0x17256 <Amigo_Command+0x5be>
   171ce:	02 30       	cpi	r16, 0x02	; 2
   171d0:	11 05       	cpc	r17, r1
   171d2:	09 f0       	breq	.+2      	; 0x171d6 <Amigo_Command+0x53e>
   171d4:	40 c0       	rjmp	.+128    	; 0x17256 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   171d6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   171da:	85 ff       	sbrs	r24, 5
   171dc:	0a c0       	rjmp	.+20     	; 0x171f2 <Amigo_Command+0x55a>
                printf("[AMIGO Read Buffered Command]\n");
   171de:	81 ea       	ldi	r24, 0xA1	; 161
   171e0:	97 e2       	ldi	r25, 0x27	; 39
   171e2:	a0 e0       	ldi	r26, 0x00	; 0
   171e4:	ed b7       	in	r30, 0x3d	; 61
   171e6:	fe b7       	in	r31, 0x3e	; 62
   171e8:	81 83       	std	Z+1, r24	; 0x01
   171ea:	92 83       	std	Z+2, r25	; 0x02
   171ec:	a3 83       	std	Z+3, r26	; 0x03
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   171ee:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   171f2:	80 91 f7 1c 	lds	r24, 0x1CF7	; 0x801cf7 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_READ_BUFFERED;
   171f6:	3c dd       	rcall	.-1416   	; 0x16c70 <amigo_check_unit>
   171f8:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <AMIGOs>
   171fc:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <AMIGOs+0x1>
   17200:	87 e0       	ldi	r24, 0x07	; 7

#if 0
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
#else
			return( amigo_buffered_read_command() );
   17202:	80 83       	st	Z, r24
   17204:	c5 d9       	rcall	.-3190   	; 0x16590 <amigo_buffered_read_command>
   17206:	2a c0       	rjmp	.+84     	; 0x1725c <Amigo_Command+0x5c4>
#endif
        }
    }
    else if (secondary == 0x6C)
   17208:	fc e6       	ldi	r31, 0x6C	; 108
   1720a:	ef 16       	cp	r14, r31
   1720c:	f1 04       	cpc	r15, r1
   1720e:	d1 f4       	brne	.+52     	; 0x17244 <Amigo_Command+0x5ac>
    {
        if(op == 0x18 && len == 5)
   17210:	68 31       	cpi	r22, 0x18	; 24
   17212:	09 f5       	brne	.+66     	; 0x17256 <Amigo_Command+0x5be>
   17214:	05 30       	cpi	r16, 0x05	; 5
   17216:	11 05       	cpc	r17, r1
   17218:	f1 f4       	brne	.+60     	; 0x17256 <Amigo_Command+0x5be>
        {
///  Reference: A48 ..  A50

            uint8_t db;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1721a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1721e:	85 ff       	sbrs	r24, 5
   17220:	0a c0       	rjmp	.+20     	; 0x17236 <Amigo_Command+0x59e>
                printf("[AMIGO Format]\n");
   17222:	81 e9       	ldi	r24, 0x91	; 145
   17224:	97 e2       	ldi	r25, 0x27	; 39
   17226:	a0 e0       	ldi	r26, 0x00	; 0
   17228:	ed b7       	in	r30, 0x3d	; 61
   1722a:	fe b7       	in	r31, 0x3e	; 62
   1722c:	81 83       	std	Z+1, r24	; 0x01
   1722e:	92 83       	std	Z+2, r25	; 0x02
   17230:	a3 83       	std	Z+3, r26	; 0x03
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17232:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   17236:	80 91 f7 1c 	lds	r24, 0x1CF7	; 0x801cf7 <gpib_iobuff+0x1>
            ++ptr;                                // override not used
            ++ptr;                                // interleave not used
            db = 0xff & *ptr++;
            amigo_format(db);
   1723a:	1a dd       	rcall	.-1484   	; 0x16c70 <amigo_check_unit>
   1723c:	80 91 fa 1c 	lds	r24, 0x1CFA	; 0x801cfa <gpib_iobuff+0x4>
   17240:	0f d9       	rcall	.-3554   	; 0x16460 <amigo_format>
   17242:	04 c0       	rjmp	.+8      	; 0x1724c <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x70)                   // HP-300 Clear
   17244:	f0 e7       	ldi	r31, 0x70	; 112
   17246:	ef 16       	cp	r14, r31
   17248:	f1 04       	cpc	r15, r1
    {
///  Reference: A23
        ++ptr;                                    // Dummy byte
        return(status & ERROR_MASK);
   1724a:	29 f4       	brne	.+10     	; 0x17256 <Amigo_Command+0x5be>
   1724c:	8b 8d       	ldd	r24, Y+27	; 0x1b
   1724e:	9c 8d       	ldd	r25, Y+28	; 0x1c
   17250:	88 27       	eor	r24, r24
   17252:	90 7d       	andi	r25, 0xD0	; 208
    }
    return ( amigo_todo_op(secondary, op, len) );
   17254:	03 c0       	rjmp	.+6      	; 0x1725c <Amigo_Command+0x5c4>
   17256:	a8 01       	movw	r20, r16
   17258:	8e 2d       	mov	r24, r14
   1725a:	ed db       	rcall	.-2086   	; 0x16a36 <amigo_todo_op>
}
   1725c:	6c 96       	adiw	r28, 0x1c	; 28
   1725e:	e6 e0       	ldi	r30, 0x06	; 6
   17260:	0c 94 31 e3 	jmp	0x1c662	; 0x1c662 <__epilogue_restores__+0x18>

00017264 <Amigo_Execute>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)

int Amigo_Execute( int secondary )
{
   17264:	a9 e0       	ldi	r26, 0x09	; 9
   17266:	b0 e0       	ldi	r27, 0x00	; 0
   17268:	e8 e3       	ldi	r30, 0x38	; 56
   1726a:	f9 eb       	ldi	r31, 0xB9	; 185
   1726c:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__prologue_saves__+0x20>
   17270:	ec 01       	movw	r28, r24
#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17272:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17276:	85 ff       	sbrs	r24, 5
   17278:	16 c0       	rjmp	.+44     	; 0x172a6 <Amigo_Execute+0x42>
        printf("[AMIGO Execute(%02XH): listen:%02XH, talk:%02XH]\n",
   1727a:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   1727e:	90 e0       	ldi	r25, 0x00	; 0
   17280:	ed b7       	in	r30, 0x3d	; 61
   17282:	fe b7       	in	r31, 0x3e	; 62
   17284:	91 87       	std	Z+9, r25	; 0x09
   17286:	80 87       	std	Z+8, r24	; 0x08
   17288:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   1728c:	90 e0       	ldi	r25, 0x00	; 0
   1728e:	97 83       	std	Z+7, r25	; 0x07
   17290:	86 83       	std	Z+6, r24	; 0x06
   17292:	d5 83       	std	Z+5, r29	; 0x05
   17294:	c4 83       	std	Z+4, r28	; 0x04
   17296:	8f e5       	ldi	r24, 0x5F	; 95
   17298:	97 e2       	ldi	r25, 0x27	; 39
   1729a:	a0 e0       	ldi	r26, 0x00	; 0
   1729c:	81 83       	std	Z+1, r24	; 0x01
   1729e:	92 83       	std	Z+2, r25	; 0x02
   172a0:	a3 83       	std	Z+3, r26	; 0x03
   172a2:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
            secondary, listening, talking);
#endif

    if(talking == UNT)
   172a6:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   172aa:	8f 35       	cpi	r24, 0x5F	; 95
   172ac:	09 f4       	brne	.+2      	; 0x172b0 <Amigo_Execute+0x4c>
   172ae:	ad c0       	rjmp	.+346    	; 0x1740a <Amigo_Execute+0x1a6>
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   172b0:	90 e0       	ldi	r25, 0x00	; 0
   172b2:	0e 94 01 8b 	call	0x11602	; 0x11602 <AMIGO_is_MTA>
   172b6:	89 2b       	or	r24, r25
   172b8:	39 f0       	breq	.+14     	; 0x172c8 <Amigo_Execute+0x64>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
   172ba:	ce 01       	movw	r24, r28
   172bc:	87 7f       	andi	r24, 0xF7	; 247
   172be:	80 36       	cpi	r24, 0x60	; 96
   172c0:	91 05       	cpc	r25, r1
   172c2:	09 f0       	breq	.+2      	; 0x172c6 <Amigo_Execute+0x62>
   172c4:	a2 c0       	rjmp	.+324    	; 0x1740a <Amigo_Execute+0x1a6>
   172c6:	08 c0       	rjmp	.+16     	; 0x172d8 <Amigo_Execute+0x74>
#endif

    if(talking == UNT)
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   172c8:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   172cc:	90 e0       	ldi	r25, 0x00	; 0
   172ce:	0e 94 f0 8a 	call	0x115e0	; 0x115e0 <AMIGO_is_MLA>
   172d2:	89 2b       	or	r24, r25
   172d4:	91 f7       	brne	.-28     	; 0x172ba <Amigo_Execute+0x56>
   172d6:	99 c0       	rjmp	.+306    	; 0x1740a <Amigo_Execute+0x1a6>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   172d8:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <AMIGOp>
   172dc:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <AMIGOp+0x1>
   172e0:	81 81       	ldd	r24, Z+1	; 0x01
   172e2:	90 e0       	ldi	r25, 0x00	; 0
   172e4:	0e 94 c3 84 	call	0x10986	; 0x10986 <gpib_disable_PPR>

    if(secondary == 0x60)
   172e8:	c0 36       	cpi	r28, 0x60	; 96
   172ea:	d1 05       	cpc	r29, r1
   172ec:	09 f0       	breq	.+2      	; 0x172f0 <Amigo_Execute+0x8c>
   172ee:	4e c0       	rjmp	.+156    	; 0x1738c <Amigo_Execute+0x128>
    {
        switch(AMIGOs->state)
   172f0:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <AMIGOs>
   172f4:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <AMIGOs+0x1>
   172f8:	e0 81       	ld	r30, Z
   172fa:	8e 2f       	mov	r24, r30
   172fc:	90 e0       	ldi	r25, 0x00	; 0
   172fe:	8b 30       	cpi	r24, 0x0B	; 11
   17300:	91 05       	cpc	r25, r1
   17302:	08 f0       	brcs	.+2      	; 0x17306 <Amigo_Execute+0xa2>
   17304:	41 c0       	rjmp	.+130    	; 0x17388 <Amigo_Execute+0x124>
   17306:	fc 01       	movw	r30, r24
   17308:	ea 52       	subi	r30, 0x2A	; 42
   1730a:	ff 4f       	sbci	r31, 0xFF	; 255
   1730c:	0c 94 da e2 	jmp	0x1c5b4	; 0x1c5b4 <__tablejump2__>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_COLD_LOAD_READ:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17310:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17314:	85 ff       	sbrs	r24, 5
   17316:	18 c0       	rjmp	.+48     	; 0x17348 <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Cold Load Read]\n");
   17318:	8f e3       	ldi	r24, 0x3F	; 63
   1731a:	97 e2       	ldi	r25, 0x27	; 39
   1731c:	0d c0       	rjmp	.+26     	; 0x17338 <Amigo_Execute+0xd4>
#endif
                return ( amigo_buffered_read_execute() );
            case AMIGO_READ_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1731e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17322:	85 ff       	sbrs	r24, 5
   17324:	11 c0       	rjmp	.+34     	; 0x17348 <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Read Unbuffered]\n");
   17326:	8e e1       	ldi	r24, 0x1E	; 30
   17328:	97 e2       	ldi	r25, 0x27	; 39
   1732a:	06 c0       	rjmp	.+12     	; 0x17338 <Amigo_Execute+0xd4>
#endif
                return ( amigo_buffered_read_execute() );
            case AMIGO_READ_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1732c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17330:	85 ff       	sbrs	r24, 5
   17332:	0a c0       	rjmp	.+20     	; 0x17348 <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Read Buffered]\n");
   17334:	8f ef       	ldi	r24, 0xFF	; 255
   17336:	96 e2       	ldi	r25, 0x26	; 38
   17338:	a0 e0       	ldi	r26, 0x00	; 0
   1733a:	ed b7       	in	r30, 0x3d	; 61
   1733c:	fe b7       	in	r31, 0x3e	; 62
   1733e:	81 83       	std	Z+1, r24	; 0x01
   17340:	92 83       	std	Z+2, r25	; 0x02
   17342:	a3 83       	std	Z+3, r26	; 0x03
   17344:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
#endif
                return ( amigo_buffered_read_execute() );
   17348:	b0 d9       	rcall	.-3232   	; 0x166aa <amigo_buffered_read_execute>
   1734a:	61 c0       	rjmp	.+194    	; 0x1740e <Amigo_Execute+0x1aa>
            case AMIGO_WRITE_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1734c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17350:	85 ff       	sbrs	r24, 5
   17352:	18 c0       	rjmp	.+48     	; 0x17384 <Amigo_Execute+0x120>
                    printf("[AMIGO Execute Write Unbuffered]\n");
   17354:	8d ed       	ldi	r24, 0xDD	; 221
   17356:	96 e2       	ldi	r25, 0x26	; 38
   17358:	0d c0       	rjmp	.+26     	; 0x17374 <Amigo_Execute+0x110>
#endif
                return ( amigo_buffered_write() );
            case AMIGO_INITIALIZE:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1735a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1735e:	85 ff       	sbrs	r24, 5
   17360:	11 c0       	rjmp	.+34     	; 0x17384 <Amigo_Execute+0x120>
                    printf("[AMIGO Execute Initialize]\n");
   17362:	81 ec       	ldi	r24, 0xC1	; 193
   17364:	96 e2       	ldi	r25, 0x26	; 38
   17366:	06 c0       	rjmp	.+12     	; 0x17374 <Amigo_Execute+0x110>
#endif
                return ( amigo_buffered_write() );
            case AMIGO_WRITE_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17368:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1736c:	85 ff       	sbrs	r24, 5
   1736e:	0a c0       	rjmp	.+20     	; 0x17384 <Amigo_Execute+0x120>
                    printf("[AMIGO Execute Write Buffered]\n");
   17370:	81 ea       	ldi	r24, 0xA1	; 161
   17372:	96 e2       	ldi	r25, 0x26	; 38
   17374:	a0 e0       	ldi	r26, 0x00	; 0
   17376:	ed b7       	in	r30, 0x3d	; 61
   17378:	fe b7       	in	r31, 0x3e	; 62
   1737a:	81 83       	std	Z+1, r24	; 0x01
   1737c:	92 83       	std	Z+2, r25	; 0x02
   1737e:	a3 83       	std	Z+3, r26	; 0x03
   17380:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
#endif
                return ( amigo_buffered_write() );
   17384:	ed d9       	rcall	.-3110   	; 0x16760 <amigo_buffered_write>
   17386:	43 c0       	rjmp	.+134    	; 0x1740e <Amigo_Execute+0x1aa>
            default:
                return ( amigo_todo(secondary) );
   17388:	80 e6       	ldi	r24, 0x60	; 96
   1738a:	3d c0       	rjmp	.+122    	; 0x17406 <Amigo_Execute+0x1a2>
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    if(secondary == 0x68)
   1738c:	c8 36       	cpi	r28, 0x68	; 104
   1738e:	d1 05       	cpc	r29, r1
   17390:	e1 f5       	brne	.+120    	; 0x1740a <Amigo_Execute+0x1a6>
    {
        switch(AMIGOs->state)
   17392:	e0 91 6e 19 	lds	r30, 0x196E	; 0x80196e <AMIGOs>
   17396:	f0 91 6f 19 	lds	r31, 0x196F	; 0x80196f <AMIGOs+0x1>
   1739a:	80 81       	ld	r24, Z
   1739c:	82 30       	cpi	r24, 0x02	; 2
   1739e:	81 f0       	breq	.+32     	; 0x173c0 <Amigo_Execute+0x15c>
   173a0:	18 f4       	brcc	.+6      	; 0x173a8 <Amigo_Execute+0x144>
   173a2:	88 23       	and	r24, r24
   173a4:	91 f1       	breq	.+100    	; 0x1740a <Amigo_Execute+0x1a6>
   173a6:	2e c0       	rjmp	.+92     	; 0x17404 <Amigo_Execute+0x1a0>
   173a8:	83 30       	cpi	r24, 0x03	; 3
   173aa:	19 f0       	breq	.+6      	; 0x173b2 <Amigo_Execute+0x14e>
   173ac:	84 30       	cpi	r24, 0x04	; 4
   173ae:	c9 f0       	breq	.+50     	; 0x173e2 <Amigo_Execute+0x17e>
   173b0:	29 c0       	rjmp	.+82     	; 0x17404 <Amigo_Execute+0x1a0>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_REQUEST_STATUS_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   173b2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   173b6:	85 ff       	sbrs	r24, 5
   173b8:	11 c0       	rjmp	.+34     	; 0x173dc <Amigo_Execute+0x178>
                    printf("[AMIGO Execute Request Status Buffered]\n");
   173ba:	88 e7       	ldi	r24, 0x78	; 120
   173bc:	96 e2       	ldi	r25, 0x26	; 38
   173be:	06 c0       	rjmp	.+12     	; 0x173cc <Amigo_Execute+0x168>
#endif
                return ( amigo_send_status() );
            case AMIGO_REQUEST_STATUS_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   173c0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   173c4:	85 ff       	sbrs	r24, 5
   173c6:	0a c0       	rjmp	.+20     	; 0x173dc <Amigo_Execute+0x178>
                    printf("[AMIGO Exicute Request Status Unbuffered]\n");
   173c8:	8d e4       	ldi	r24, 0x4D	; 77
   173ca:	96 e2       	ldi	r25, 0x26	; 38
   173cc:	a0 e0       	ldi	r26, 0x00	; 0
   173ce:	ed b7       	in	r30, 0x3d	; 61
   173d0:	fe b7       	in	r31, 0x3e	; 62
   173d2:	81 83       	std	Z+1, r24	; 0x01
   173d4:	92 83       	std	Z+2, r25	; 0x02
   173d6:	a3 83       	std	Z+3, r26	; 0x03
   173d8:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
#endif
                return ( amigo_send_status() );
   173dc:	0e 94 e5 b0 	call	0x161ca	; 0x161ca <amigo_send_status>
   173e0:	16 c0       	rjmp	.+44     	; 0x1740e <Amigo_Execute+0x1aa>
            case AMIGO_REQUEST_LOGICAL_ADDRESS:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   173e2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   173e6:	85 ff       	sbrs	r24, 5
   173e8:	0a c0       	rjmp	.+20     	; 0x173fe <Amigo_Execute+0x19a>
                    printf("[AMIGO Execute Request Logical Address]\n");
   173ea:	84 e2       	ldi	r24, 0x24	; 36
   173ec:	96 e2       	ldi	r25, 0x26	; 38
   173ee:	a0 e0       	ldi	r26, 0x00	; 0
   173f0:	ed b7       	in	r30, 0x3d	; 61
   173f2:	fe b7       	in	r31, 0x3e	; 62
   173f4:	81 83       	std	Z+1, r24	; 0x01
   173f6:	92 83       	std	Z+2, r25	; 0x02
   173f8:	a3 83       	std	Z+3, r26	; 0x03
   173fa:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
#endif
                return ( amigo_send_logical_address() );
   173fe:	0e 94 90 b0 	call	0x16120	; 0x16120 <amigo_send_logical_address>
   17402:	05 c0       	rjmp	.+10     	; 0x1740e <Amigo_Execute+0x1aa>
            default:
                return ( amigo_todo(secondary) );
   17404:	88 e6       	ldi	r24, 0x68	; 104
   17406:	b0 db       	rcall	.-2208   	; 0x16b68 <amigo_todo>
   17408:	02 c0       	rjmp	.+4      	; 0x1740e <Amigo_Execute+0x1aa>
    if(secondary == 0x68)
    {
        switch(AMIGOs->state)
        {
            case AMIGO_IDLE:
                return(0);
   1740a:	80 e0       	ldi	r24, 0x00	; 0
   1740c:	90 e0       	ldi	r25, 0x00	; 0
                return ( amigo_todo(secondary) );
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    return(0);
}
   1740e:	cd b7       	in	r28, 0x3d	; 61
   17410:	de b7       	in	r29, 0x3e	; 62
   17412:	29 96       	adiw	r28, 0x09	; 9
   17414:	e2 e0       	ldi	r30, 0x02	; 2
   17416:	0c 94 35 e3 	jmp	0x1c66a	; 0x1c66a <__epilogue_restores__+0x20>

0001741a <AMIGO_COMMANDS>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{
   1741a:	cf 93       	push	r28
   1741c:	df 93       	push	r29
   1741e:	c8 2f       	mov	r28, r24

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   17420:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   17424:	90 e0       	ldi	r25, 0x00	; 0
   17426:	0e 94 01 8b 	call	0x11602	; 0x11602 <AMIGO_is_MTA>
   1742a:	89 2b       	or	r24, r25
   1742c:	51 f0       	breq	.+20     	; 0x17442 <AMIGO_COMMANDS+0x28>
    {

        if(talking == UNT && AMIGO_is_MLA(listening))
   1742e:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   17432:	8f 35       	cpi	r24, 0x5F	; 95
   17434:	71 f4       	brne	.+28     	; 0x17452 <AMIGO_COMMANDS+0x38>
   17436:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   1743a:	90 e0       	ldi	r25, 0x00	; 0
   1743c:	0e 94 f0 8a 	call	0x115e0	; 0x115e0 <AMIGO_is_MLA>
   17440:	08 c0       	rjmp	.+16     	; 0x17452 <AMIGO_COMMANDS+0x38>
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   17442:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   17446:	90 e0       	ldi	r25, 0x00	; 0
   17448:	0e 94 f0 8a 	call	0x115e0	; 0x115e0 <AMIGO_is_MLA>
   1744c:	89 2b       	or	r24, r25
   1744e:	79 f7       	brne	.-34     	; 0x1742e <AMIGO_COMMANDS+0x14>
   17450:	76 c0       	rjmp	.+236    	; 0x1753e <AMIGO_COMMANDS+0x124>

        if(talking == UNT && AMIGO_is_MLA(listening))
        {
// printf("AMIGO COMMANDS %02XH NO TALK ADDRESS!\n", ch);
        }
        if(listening == 0 && AMIGO_is_MTA(talking))
   17452:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   17456:	81 11       	cpse	r24, r1
   17458:	05 c0       	rjmp	.+10     	; 0x17464 <AMIGO_COMMANDS+0x4a>
   1745a:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   1745e:	90 e0       	ldi	r25, 0x00	; 0
   17460:	0e 94 01 8b 	call	0x11602	; 0x11602 <AMIGO_is_MTA>
        {
// printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   17464:	c0 36       	cpi	r28, 0x60	; 96
   17466:	99 f4       	brne	.+38     	; 0x1748e <AMIGO_COMMANDS+0x74>
   17468:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   1746c:	90 e0       	ldi	r25, 0x00	; 0
   1746e:	0e 94 01 8b 	call	0x11602	; 0x11602 <AMIGO_is_MTA>
   17472:	89 2b       	or	r24, r25
   17474:	19 f0       	breq	.+6      	; 0x1747c <AMIGO_COMMANDS+0x62>
        {
            return (Amigo_Execute(ch) );
   17476:	80 e6       	ldi	r24, 0x60	; 96
   17478:	90 e0       	ldi	r25, 0x00	; 0
   1747a:	14 c0       	rjmp	.+40     	; 0x174a4 <AMIGO_COMMANDS+0x8a>
        if(listening == 0 && AMIGO_is_MTA(talking))
        {
// printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   1747c:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   17480:	90 e0       	ldi	r25, 0x00	; 0
   17482:	0e 94 f0 8a 	call	0x115e0	; 0x115e0 <AMIGO_is_MLA>
   17486:	89 2b       	or	r24, r25
   17488:	09 f4       	brne	.+2      	; 0x1748c <AMIGO_COMMANDS+0x72>
   1748a:	59 c0       	rjmp	.+178    	; 0x1753e <AMIGO_COMMANDS+0x124>
   1748c:	f4 cf       	rjmp	.-24     	; 0x17476 <AMIGO_COMMANDS+0x5c>
        {
            return (Amigo_Execute(ch) );
        }

        if(ch == 0x68 && AMIGO_is_MTA(talking) )
   1748e:	c8 36       	cpi	r28, 0x68	; 104
   17490:	c1 f4       	brne	.+48     	; 0x174c2 <AMIGO_COMMANDS+0xa8>
   17492:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   17496:	90 e0       	ldi	r25, 0x00	; 0
   17498:	0e 94 01 8b 	call	0x11602	; 0x11602 <AMIGO_is_MTA>
   1749c:	89 2b       	or	r24, r25
   1749e:	21 f0       	breq	.+8      	; 0x174a8 <AMIGO_COMMANDS+0x8e>
        {
            return (Amigo_Execute(ch) );
   174a0:	88 e6       	ldi	r24, 0x68	; 104
   174a2:	90 e0       	ldi	r25, 0x00	; 0
   174a4:	df de       	rcall	.-578    	; 0x17264 <Amigo_Execute>
   174a6:	0b c0       	rjmp	.+22     	; 0x174be <AMIGO_COMMANDS+0xa4>
        }

        if(ch == 0x68 && AMIGO_is_MLA(listening) )// Single byte command
   174a8:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   174ac:	90 e0       	ldi	r25, 0x00	; 0
   174ae:	0e 94 f0 8a 	call	0x115e0	; 0x115e0 <AMIGO_is_MLA>
   174b2:	89 2b       	or	r24, r25
   174b4:	09 f4       	brne	.+2      	; 0x174b8 <AMIGO_COMMANDS+0x9e>
   174b6:	43 c0       	rjmp	.+134    	; 0x1753e <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   174b8:	88 e6       	ldi	r24, 0x68	; 104
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) )// Single byte command
        {
            return (Amigo_Command(ch) );
   174ba:	90 e0       	ldi	r25, 0x00	; 0
   174bc:	ed db       	rcall	.-2086   	; 0x16c98 <Amigo_Command>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
            return( amigo_cmd_dsj() );
   174be:	ec 01       	movw	r28, r24
   174c0:	40 c0       	rjmp	.+128    	; 0x17542 <AMIGO_COMMANDS+0x128>

        if(ch == 0x68 && AMIGO_is_MLA(listening) )// Single byte command
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x69 && AMIGO_is_MLA(listening) )// Single byte command
   174c2:	c9 36       	cpi	r28, 0x69	; 105
   174c4:	51 f4       	brne	.+20     	; 0x174da <AMIGO_COMMANDS+0xc0>
   174c6:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   174ca:	90 e0       	ldi	r25, 0x00	; 0
   174cc:	0e 94 f0 8a 	call	0x115e0	; 0x115e0 <AMIGO_is_MLA>
   174d0:	89 2b       	or	r24, r25
   174d2:	a9 f1       	breq	.+106    	; 0x1753e <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   174d4:	89 e6       	ldi	r24, 0x69	; 105
   174d6:	90 e0       	ldi	r25, 0x00	; 0
   174d8:	f1 cf       	rjmp	.-30     	; 0x174bc <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6a && AMIGO_is_MLA(listening) )// Single byte command
   174da:	ca 36       	cpi	r28, 0x6A	; 106
   174dc:	51 f4       	brne	.+20     	; 0x174f2 <AMIGO_COMMANDS+0xd8>
   174de:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   174e2:	90 e0       	ldi	r25, 0x00	; 0
   174e4:	0e 94 f0 8a 	call	0x115e0	; 0x115e0 <AMIGO_is_MLA>
   174e8:	89 2b       	or	r24, r25
   174ea:	49 f1       	breq	.+82     	; 0x1753e <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   174ec:	8a e6       	ldi	r24, 0x6A	; 106
   174ee:	90 e0       	ldi	r25, 0x00	; 0
   174f0:	e5 cf       	rjmp	.-54     	; 0x174bc <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) )// Single byte command
   174f2:	cc 36       	cpi	r28, 0x6C	; 108
   174f4:	51 f4       	brne	.+20     	; 0x1750a <AMIGO_COMMANDS+0xf0>
   174f6:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   174fa:	90 e0       	ldi	r25, 0x00	; 0
   174fc:	0e 94 f0 8a 	call	0x115e0	; 0x115e0 <AMIGO_is_MLA>
   17500:	89 2b       	or	r24, r25
   17502:	e9 f0       	breq	.+58     	; 0x1753e <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17504:	8c e6       	ldi	r24, 0x6C	; 108
   17506:	90 e0       	ldi	r25, 0x00	; 0
   17508:	d9 cf       	rjmp	.-78     	; 0x174bc <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
   1750a:	c0 37       	cpi	r28, 0x70	; 112
   1750c:	c1 f4       	brne	.+48     	; 0x1753e <AMIGO_COMMANDS+0x124>
   1750e:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   17512:	90 e0       	ldi	r25, 0x00	; 0
   17514:	0e 94 01 8b 	call	0x11602	; 0x11602 <AMIGO_is_MTA>
   17518:	ec 01       	movw	r28, r24
   1751a:	89 2b       	or	r24, r25
   1751c:	51 f0       	breq	.+20     	; 0x17532 <AMIGO_COMMANDS+0x118>
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
   1751e:	e0 91 70 19 	lds	r30, 0x1970	; 0x801970 <AMIGOp>
   17522:	f0 91 71 19 	lds	r31, 0x1971	; 0x801971 <AMIGOp+0x1>
   17526:	81 81       	ldd	r24, Z+1	; 0x01
   17528:	90 e0       	ldi	r25, 0x00	; 0
   1752a:	0e 94 c3 84 	call	0x10986	; 0x10986 <gpib_disable_PPR>
            return( amigo_cmd_dsj() );
   1752e:	ff d9       	rcall	.-3074   	; 0x1692e <amigo_cmd_dsj>
   17530:	c6 cf       	rjmp	.-116    	; 0x174be <AMIGO_COMMANDS+0xa4>
        }
        if(ch == 0x7e && ch == 0x7f)
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x70 && AMIGO_is_MLA(listening))
   17532:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   17536:	90 e0       	ldi	r25, 0x00	; 0
   17538:	0e 94 f0 8a 	call	0x115e0	; 0x115e0 <AMIGO_is_MLA>
   1753c:	02 c0       	rjmp	.+4      	; 0x17542 <AMIGO_COMMANDS+0x128>
        {
// NOP
        }
    }
    return(0);
   1753e:	c0 e0       	ldi	r28, 0x00	; 0
   17540:	d0 e0       	ldi	r29, 0x00	; 0
}
   17542:	ce 01       	movw	r24, r28
   17544:	df 91       	pop	r29
   17546:	cf 91       	pop	r28
   17548:	08 95       	ret

0001754a <printer_init>:
/// - Only called once after power on by main().
/// @return  void

void printer_init()
{
    plot.error = 0;
   1754a:	e9 ea       	ldi	r30, 0xA9	; 169
   1754c:	f9 e1       	ldi	r31, 0x19	; 25
   1754e:	10 86       	std	Z+8, r1	; 0x08
    plot.count = 0;
   17550:	10 82       	st	Z, r1
   17552:	11 82       	std	Z+1, r1	; 0x01
   17554:	12 82       	std	Z+2, r1	; 0x02
   17556:	13 82       	std	Z+3, r1	; 0x03
    plot.ind = 0;
   17558:	15 82       	std	Z+5, r1	; 0x05
   1755a:	14 82       	std	Z+4, r1	; 0x04
    plot.fp = NULL;
   1755c:	12 86       	std	Z+10, r1	; 0x0a
   1755e:	11 86       	std	Z+9, r1	; 0x09
    plot.buf = NULL;
   17560:	14 86       	std	Z+12, r1	; 0x0c
   17562:	13 86       	std	Z+11, r1	; 0x0b
   17564:	08 95       	ret

00017566 <receive_plot_flush>:
/// @see posix.h
/// @see printer_buffer()
/// @return  file handle

int receive_plot_flush()
{
   17566:	cf 93       	push	r28
   17568:	df 93       	push	r29
   1756a:	ad b7       	in	r26, 0x3d	; 61
   1756c:	be b7       	in	r27, 0x3e	; 62
   1756e:	17 97       	sbiw	r26, 0x07	; 7
   17570:	0f b6       	in	r0, 0x3f	; 63
   17572:	f8 94       	cli
   17574:	be bf       	out	0x3e, r27	; 62
   17576:	0f be       	out	0x3f, r0	; 63
   17578:	ad bf       	out	0x3d, r26	; 61
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
   1757a:	20 91 b2 19 	lds	r18, 0x19B2	; 0x8019b2 <plot+0x9>
   1757e:	30 91 b3 19 	lds	r19, 0x19B3	; 0x8019b3 <plot+0xa>
   17582:	21 15       	cp	r18, r1
   17584:	31 05       	cpc	r19, r1
   17586:	09 f4       	brne	.+2      	; 0x1758a <receive_plot_flush+0x24>
   17588:	45 c0       	rjmp	.+138    	; 0x17614 <receive_plot_flush+0xae>
   1758a:	80 91 ad 19 	lds	r24, 0x19AD	; 0x8019ad <plot+0x4>
   1758e:	90 91 ae 19 	lds	r25, 0x19AE	; 0x8019ae <plot+0x5>
   17592:	00 97       	sbiw	r24, 0x00	; 0
   17594:	09 f4       	brne	.+2      	; 0x17598 <receive_plot_flush+0x32>
   17596:	40 c0       	rjmp	.+128    	; 0x17618 <receive_plot_flush+0xb2>
        return(0);

    ret  = fwrite(plot.buf, 1, plot.ind , plot.fp);
   17598:	ac 01       	movw	r20, r24
   1759a:	61 e0       	ldi	r22, 0x01	; 1
   1759c:	70 e0       	ldi	r23, 0x00	; 0
   1759e:	80 91 b4 19 	lds	r24, 0x19B4	; 0x8019b4 <plot+0xb>
   175a2:	90 91 b5 19 	lds	r25, 0x19B5	; 0x8019b5 <plot+0xc>
   175a6:	0e 94 b3 7a 	call	0xf566	; 0xf566 <fwrite>
   175aa:	ec 01       	movw	r28, r24
    if(ret != plot.ind)
   175ac:	80 91 ad 19 	lds	r24, 0x19AD	; 0x8019ad <plot+0x4>
   175b0:	90 91 ae 19 	lds	r25, 0x19AE	; 0x8019ae <plot+0x5>
   175b4:	c8 17       	cp	r28, r24
   175b6:	d9 07       	cpc	r29, r25
   175b8:	09 f1       	breq	.+66     	; 0x175fc <receive_plot_flush+0x96>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   175ba:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   175be:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   175c2:	81 72       	andi	r24, 0x21	; 33
   175c4:	99 27       	eor	r25, r25
   175c6:	89 2b       	or	r24, r25
   175c8:	b1 f0       	breq	.+44     	; 0x175f6 <receive_plot_flush+0x90>
        {
            perror("receive_plot_flush");
   175ca:	81 ee       	ldi	r24, 0xE1	; 225
   175cc:	95 e1       	ldi	r25, 0x15	; 21
   175ce:	0e 94 bc 76 	call	0xed78	; 0xed78 <perror>
            printf("write failed: wanted %d, got:%d\n", plot.ind, ret);
   175d2:	ed b7       	in	r30, 0x3d	; 61
   175d4:	fe b7       	in	r31, 0x3e	; 62
   175d6:	d7 83       	std	Z+7, r29	; 0x07
   175d8:	c6 83       	std	Z+6, r28	; 0x06
   175da:	80 91 ad 19 	lds	r24, 0x19AD	; 0x8019ad <plot+0x4>
   175de:	90 91 ae 19 	lds	r25, 0x19AE	; 0x8019ae <plot+0x5>
   175e2:	95 83       	std	Z+5, r25	; 0x05
   175e4:	84 83       	std	Z+4, r24	; 0x04
   175e6:	84 eb       	ldi	r24, 0xB4	; 180
   175e8:	9e e2       	ldi	r25, 0x2E	; 46
   175ea:	a0 e0       	ldi	r26, 0x00	; 0
   175ec:	81 83       	std	Z+1, r24	; 0x01
   175ee:	92 83       	std	Z+2, r25	; 0x02
   175f0:	a3 83       	std	Z+3, r26	; 0x03
   175f2:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
        }
        return(-1);
   175f6:	8f ef       	ldi	r24, 0xFF	; 255
   175f8:	9f ef       	ldi	r25, 0xFF	; 255
   175fa:	0e c0       	rjmp	.+28     	; 0x17618 <receive_plot_flush+0xb2>
    }

    fno = fileno( plot.fp );
   175fc:	80 91 b2 19 	lds	r24, 0x19B2	; 0x8019b2 <plot+0x9>
   17600:	90 91 b3 19 	lds	r25, 0x19B3	; 0x8019b3 <plot+0xa>
   17604:	0e 94 06 75 	call	0xea0c	; 0xea0c <fileno>
    if(fno < 0)
   17608:	97 fd       	sbrc	r25, 7
   1760a:	f5 cf       	rjmp	.-22     	; 0x175f6 <receive_plot_flush+0x90>
        return(-1);
///@brief sync filesystem after every write
    syncfs( fno );
   1760c:	0e 94 fd 79 	call	0xf3fa	; 0xf3fa <syncfs>
    return (ret);
   17610:	ce 01       	movw	r24, r28
   17612:	02 c0       	rjmp	.+4      	; 0x17618 <receive_plot_flush+0xb2>
{
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
        return(0);
   17614:	80 e0       	ldi	r24, 0x00	; 0
   17616:	90 e0       	ldi	r25, 0x00	; 0
    if(fno < 0)
        return(-1);
///@brief sync filesystem after every write
    syncfs( fno );
    return (ret);
}
   17618:	cd b7       	in	r28, 0x3d	; 61
   1761a:	de b7       	in	r29, 0x3e	; 62
   1761c:	27 96       	adiw	r28, 0x07	; 7
   1761e:	e2 e0       	ldi	r30, 0x02	; 2
   17620:	0c 94 35 e3 	jmp	0x1c66a	; 0x1c66a <__epilogue_restores__+0x20>

00017624 <printer_close>:
/// @see posix.h
/// @return  void
/// FYI: for the HP54645D plots end with: pd;pu;pu;sp0;
/// This gets called
void printer_close()
{
   17624:	ad b7       	in	r26, 0x3d	; 61
   17626:	be b7       	in	r27, 0x3e	; 62
   17628:	17 97       	sbiw	r26, 0x07	; 7
   1762a:	0f b6       	in	r0, 0x3f	; 63
   1762c:	f8 94       	cli
   1762e:	be bf       	out	0x3e, r27	; 62
   17630:	0f be       	out	0x3f, r0	; 63
   17632:	ad bf       	out	0x3d, r26	; 61
    if( receive_plot_flush() < 0 )
   17634:	98 df       	rcall	.-208    	; 0x17566 <receive_plot_flush>
   17636:	97 ff       	sbrs	r25, 7
   17638:	03 c0       	rjmp	.+6      	; 0x17640 <printer_close+0x1c>
        plot.error = 1;
   1763a:	81 e0       	ldi	r24, 0x01	; 1
   1763c:	80 93 b1 19 	sts	0x19B1, r24	; 0x8019b1 <plot+0x8>

    if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   17640:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17644:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17648:	81 72       	andi	r24, 0x21	; 33
   1764a:	99 27       	eor	r25, r25
   1764c:	89 2b       	or	r24, r25
   1764e:	71 f0       	breq	.+28     	; 0x1766c <printer_close+0x48>
    {
        if(plot.error)
   17650:	80 91 b1 19 	lds	r24, 0x19B1	; 0x8019b1 <plot+0x8>
   17654:	88 23       	and	r24, r24
   17656:	51 f0       	breq	.+20     	; 0x1766c <printer_close+0x48>
            printf("ERROR durring write\n");
   17658:	83 ee       	ldi	r24, 0xE3	; 227
   1765a:	9e e2       	ldi	r25, 0x2E	; 46
   1765c:	a0 e0       	ldi	r26, 0x00	; 0
   1765e:	ed b7       	in	r30, 0x3d	; 61
   17660:	fe b7       	in	r31, 0x3e	; 62
   17662:	81 83       	std	Z+1, r24	; 0x01
   17664:	92 83       	std	Z+2, r25	; 0x02
   17666:	a3 83       	std	Z+3, r26	; 0x03
   17668:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    }

    if(plot.fp)
   1766c:	80 91 b2 19 	lds	r24, 0x19B2	; 0x8019b2 <plot+0x9>
   17670:	90 91 b3 19 	lds	r25, 0x19B3	; 0x8019b3 <plot+0xa>
   17674:	00 97       	sbiw	r24, 0x00	; 0
   17676:	e1 f0       	breq	.+56     	; 0x176b0 <printer_close+0x8c>
    {
        fclose(plot.fp);
   17678:	0e 94 35 7b 	call	0xf66a	; 0xf66a <fclose>
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1767c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17680:	85 ff       	sbrs	r24, 5
   17682:	16 c0       	rjmp	.+44     	; 0x176b0 <printer_close+0x8c>
            printf("\nDONE: %08ld\n",plot.count);
   17684:	80 91 a9 19 	lds	r24, 0x19A9	; 0x8019a9 <plot>
   17688:	90 91 aa 19 	lds	r25, 0x19AA	; 0x8019aa <plot+0x1>
   1768c:	a0 91 ab 19 	lds	r26, 0x19AB	; 0x8019ab <plot+0x2>
   17690:	b0 91 ac 19 	lds	r27, 0x19AC	; 0x8019ac <plot+0x3>
   17694:	ed b7       	in	r30, 0x3d	; 61
   17696:	fe b7       	in	r31, 0x3e	; 62
   17698:	84 83       	std	Z+4, r24	; 0x04
   1769a:	95 83       	std	Z+5, r25	; 0x05
   1769c:	a6 83       	std	Z+6, r26	; 0x06
   1769e:	b7 83       	std	Z+7, r27	; 0x07
   176a0:	85 ed       	ldi	r24, 0xD5	; 213
   176a2:	9e e2       	ldi	r25, 0x2E	; 46
   176a4:	a0 e0       	ldi	r26, 0x00	; 0
   176a6:	81 83       	std	Z+1, r24	; 0x01
   176a8:	92 83       	std	Z+2, r25	; 0x02
   176aa:	a3 83       	std	Z+3, r26	; 0x03
   176ac:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    }

    if(plot.buf)
   176b0:	80 91 b4 19 	lds	r24, 0x19B4	; 0x8019b4 <plot+0xb>
   176b4:	90 91 b5 19 	lds	r25, 0x19B5	; 0x8019b5 <plot+0xc>
   176b8:	00 97       	sbiw	r24, 0x00	; 0
   176ba:	11 f0       	breq	.+4      	; 0x176c0 <printer_close+0x9c>
        safefree(plot.buf);
   176bc:	0e 94 4a 26 	call	0x4c94	; 0x4c94 <safefree>
    printer_init();
   176c0:	44 df       	rcall	.-376    	; 0x1754a <printer_init>
}
   176c2:	ad b7       	in	r26, 0x3d	; 61
   176c4:	be b7       	in	r27, 0x3e	; 62
   176c6:	17 96       	adiw	r26, 0x07	; 7
   176c8:	0f b6       	in	r0, 0x3f	; 63
   176ca:	f8 94       	cli
   176cc:	be bf       	out	0x3e, r27	; 62
   176ce:	0f be       	out	0x3f, r0	; 63
   176d0:	ad bf       	out	0x3d, r26	; 61
   176d2:	08 95       	ret

000176d4 <printer_open>:
/// @see posix.c
/// @see posix.h
/// @return  void

void printer_open(char *name)
{
   176d4:	ad e5       	ldi	r26, 0x5D	; 93
   176d6:	b0 e0       	ldi	r27, 0x00	; 0
   176d8:	e0 e7       	ldi	r30, 0x70	; 112
   176da:	fb eb       	ldi	r31, 0xBB	; 187
   176dc:	0c 94 15 e3 	jmp	0x1c62a	; 0x1c62a <__prologue_saves__+0x18>
   176e0:	8c 01       	movw	r16, r24

    char *ptr;

    if(!name)
   176e2:	89 2b       	or	r24, r25
   176e4:	09 f0       	breq	.+2      	; 0x176e8 <printer_open+0x14>
   176e6:	4f c0       	rjmp	.+158    	; 0x17786 <printer_open+0xb2>
        time_t seconds;
        tm_t *tc;
        ts_t ts;
        char fname[64];

        clock_gettime(0, (ts_t *) &ts);
   176e8:	be 01       	movw	r22, r28
   176ea:	6e 5a       	subi	r22, 0xAE	; 174
   176ec:	7f 4f       	sbci	r23, 0xFF	; 255
   176ee:	80 e0       	ldi	r24, 0x00	; 0
   176f0:	90 e0       	ldi	r25, 0x00	; 0
   176f2:	0e 94 10 32 	call	0x6420	; 0x6420 <clock_gettime>
        seconds = ts.tv_sec;
   176f6:	66 96       	adiw	r28, 0x16	; 22
   176f8:	8c ad       	ldd	r24, Y+60	; 0x3c
   176fa:	9d ad       	ldd	r25, Y+61	; 0x3d
   176fc:	ae ad       	ldd	r26, Y+62	; 0x3e
   176fe:	bf ad       	ldd	r27, Y+63	; 0x3f
   17700:	66 97       	sbiw	r28, 0x16	; 22
   17702:	6e 96       	adiw	r28, 0x1e	; 30
   17704:	8c af       	std	Y+60, r24	; 0x3c
   17706:	9d af       	std	Y+61, r25	; 0x3d
   17708:	ae af       	std	Y+62, r26	; 0x3e
   1770a:	bf af       	std	Y+63, r27	; 0x3f
   1770c:	6e 97       	sbiw	r28, 0x1e	; 30
        tc = gmtime(&seconds);
   1770e:	ce 01       	movw	r24, r28
   17710:	86 5a       	subi	r24, 0xA6	; 166
   17712:	9f 4f       	sbci	r25, 0xFF	; 255
   17714:	0e 94 fa 35 	call	0x6bf4	; 0x6bf4 <gmtime>
   17718:	8c 01       	movw	r16, r24
        sprintf(fname,"/plot-%02d%s%04d-%02d%02d%02d.plt",
   1771a:	fc 01       	movw	r30, r24
   1771c:	e6 80       	ldd	r14, Z+6	; 0x06
   1771e:	f7 80       	ldd	r15, Z+7	; 0x07
   17720:	80 85       	ldd	r24, Z+8	; 0x08
   17722:	91 85       	ldd	r25, Z+9	; 0x09
   17724:	0e 94 d6 34 	call	0x69ac	; 0x69ac <tm_mon_to_ascii>
   17728:	f8 01       	movw	r30, r16
   1772a:	20 81       	ld	r18, Z
   1772c:	31 81       	ldd	r19, Z+1	; 0x01
   1772e:	ed b7       	in	r30, 0x3d	; 61
   17730:	fe b7       	in	r31, 0x3e	; 62
   17732:	31 8b       	std	Z+17, r19	; 0x11
   17734:	20 8b       	std	Z+16, r18	; 0x10
   17736:	f8 01       	movw	r30, r16
   17738:	22 81       	ldd	r18, Z+2	; 0x02
   1773a:	33 81       	ldd	r19, Z+3	; 0x03
   1773c:	ed b7       	in	r30, 0x3d	; 61
   1773e:	fe b7       	in	r31, 0x3e	; 62
   17740:	37 87       	std	Z+15, r19	; 0x0f
   17742:	26 87       	std	Z+14, r18	; 0x0e
   17744:	f8 01       	movw	r30, r16
   17746:	24 81       	ldd	r18, Z+4	; 0x04
   17748:	35 81       	ldd	r19, Z+5	; 0x05
   1774a:	ed b7       	in	r30, 0x3d	; 61
   1774c:	fe b7       	in	r31, 0x3e	; 62
   1774e:	35 87       	std	Z+13, r19	; 0x0d
   17750:	24 87       	std	Z+12, r18	; 0x0c
   17752:	f8 01       	movw	r30, r16
   17754:	22 85       	ldd	r18, Z+10	; 0x0a
   17756:	33 85       	ldd	r19, Z+11	; 0x0b
   17758:	24 59       	subi	r18, 0x94	; 148
   1775a:	38 4f       	sbci	r19, 0xF8	; 248
   1775c:	ed b7       	in	r30, 0x3d	; 61
   1775e:	fe b7       	in	r31, 0x3e	; 62
   17760:	33 87       	std	Z+11, r19	; 0x0b
   17762:	22 87       	std	Z+10, r18	; 0x0a
   17764:	91 87       	std	Z+9, r25	; 0x09
   17766:	80 87       	std	Z+8, r24	; 0x08
   17768:	f7 82       	std	Z+7, r15	; 0x07
   1776a:	e6 82       	std	Z+6, r14	; 0x06
   1776c:	8a e1       	ldi	r24, 0x1A	; 26
   1776e:	9f e2       	ldi	r25, 0x2F	; 47
   17770:	a0 e0       	ldi	r26, 0x00	; 0
   17772:	83 83       	std	Z+3, r24	; 0x03
   17774:	94 83       	std	Z+4, r25	; 0x04
   17776:	a5 83       	std	Z+5, r26	; 0x05
   17778:	8e 01       	movw	r16, r28
   1777a:	0e 5e       	subi	r16, 0xEE	; 238
   1777c:	1f 4f       	sbci	r17, 0xFF	; 255
   1777e:	12 83       	std	Z+2, r17	; 0x02
   17780:	01 83       	std	Z+1, r16	; 0x01
   17782:	0e 94 3e 45 	call	0x8a7c	; 0x8a7c <sprintf_P>
    else
    {
        ptr = name;
    }

    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17786:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1778a:	85 ff       	sbrs	r24, 5
   1778c:	0c c0       	rjmp	.+24     	; 0x177a6 <printer_open+0xd2>
        printf("Capturing plot to:%s\n", ptr);
   1778e:	ed b7       	in	r30, 0x3d	; 61
   17790:	fe b7       	in	r31, 0x3e	; 62
   17792:	15 83       	std	Z+5, r17	; 0x05
   17794:	04 83       	std	Z+4, r16	; 0x04
   17796:	84 e0       	ldi	r24, 0x04	; 4
   17798:	9f e2       	ldi	r25, 0x2F	; 47
   1779a:	a0 e0       	ldi	r26, 0x00	; 0
   1779c:	81 83       	std	Z+1, r24	; 0x01
   1779e:	92 83       	std	Z+2, r25	; 0x02
   177a0:	a3 83       	std	Z+3, r26	; 0x03
   177a2:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>

    plot.fp = fopen(ptr,"wb");
   177a6:	6c e0       	ldi	r22, 0x0C	; 12
   177a8:	79 e0       	ldi	r23, 0x09	; 9
   177aa:	c8 01       	movw	r24, r16
   177ac:	0e 94 8b 7c 	call	0xf916	; 0xf916 <fopen>
   177b0:	90 93 b3 19 	sts	0x19B3, r25	; 0x8019b3 <plot+0xa>
   177b4:	80 93 b2 19 	sts	0x19B2, r24	; 0x8019b2 <plot+0x9>
    if(plot.fp == NULL)
   177b8:	89 2b       	or	r24, r25
   177ba:	b9 f4       	brne	.+46     	; 0x177ea <printer_open+0x116>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   177bc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   177c0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   177c4:	81 72       	andi	r24, 0x21	; 33
   177c6:	99 27       	eor	r25, r25
   177c8:	89 2b       	or	r24, r25
   177ca:	11 f1       	breq	.+68     	; 0x17810 <printer_open+0x13c>
        {
            perror("open failed");
   177cc:	87 ea       	ldi	r24, 0xA7	; 167
   177ce:	9d e0       	ldi	r25, 0x0D	; 13
   177d0:	0e 94 bc 76 	call	0xed78	; 0xed78 <perror>
            printf("exiting...\n");
   177d4:	88 ef       	ldi	r24, 0xF8	; 248
   177d6:	9e e2       	ldi	r25, 0x2E	; 46
   177d8:	a0 e0       	ldi	r26, 0x00	; 0
   177da:	ed b7       	in	r30, 0x3d	; 61
   177dc:	fe b7       	in	r31, 0x3e	; 62
   177de:	81 83       	std	Z+1, r24	; 0x01
   177e0:	92 83       	std	Z+2, r25	; 0x02
   177e2:	a3 83       	std	Z+3, r26	; 0x03
   177e4:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   177e8:	13 c0       	rjmp	.+38     	; 0x17810 <printer_open+0x13c>
        }
        return;
    }

    plot.buf = calloc(512+1,1);
   177ea:	61 e0       	ldi	r22, 0x01	; 1
   177ec:	70 e0       	ldi	r23, 0x00	; 0
   177ee:	81 e0       	ldi	r24, 0x01	; 1
   177f0:	92 e0       	ldi	r25, 0x02	; 2
   177f2:	0e 94 fe 25 	call	0x4bfc	; 0x4bfc <safecalloc>
   177f6:	90 93 b5 19 	sts	0x19B5, r25	; 0x8019b5 <plot+0xc>
   177fa:	80 93 b4 19 	sts	0x19B4, r24	; 0x8019b4 <plot+0xb>
    if(plot.buf == NULL)
   177fe:	89 2b       	or	r24, r25
   17800:	09 f4       	brne	.+2      	; 0x17804 <printer_open+0x130>
        printer_close();
   17802:	10 df       	rcall	.-480    	; 0x17624 <printer_close>
    plot.size = 512;
   17804:	80 e0       	ldi	r24, 0x00	; 0
   17806:	92 e0       	ldi	r25, 0x02	; 2
   17808:	90 93 b0 19 	sts	0x19B0, r25	; 0x8019b0 <plot+0x7>
   1780c:	80 93 af 19 	sts	0x19AF, r24	; 0x8019af <plot+0x6>
}
   17810:	c3 5a       	subi	r28, 0xA3	; 163
   17812:	df 4f       	sbci	r29, 0xFF	; 255
   17814:	e6 e0       	ldi	r30, 0x06	; 6
   17816:	0c 94 31 e3 	jmp	0x1c662	; 0x1c662 <__epilogue_restores__+0x18>

0001781a <printer_buffer>:
///
/// @see posix.c
/// @see posix.h
/// @return  void
void printer_buffer( uint16_t val )
{
   1781a:	cf 93       	push	r28
   1781c:	df 93       	push	r29
   1781e:	ad b7       	in	r26, 0x3d	; 61
   17820:	be b7       	in	r27, 0x3e	; 62
   17822:	17 97       	sbiw	r26, 0x07	; 7
   17824:	0f b6       	in	r0, 0x3f	; 63
   17826:	f8 94       	cli
   17828:	be bf       	out	0x3e, r27	; 62
   1782a:	0f be       	out	0x3f, r0	; 63
   1782c:	ad bf       	out	0x3d, r26	; 61
   1782e:	ec 01       	movw	r28, r24

    uint16_t ch;

    if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   17830:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17834:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17838:	81 72       	andi	r24, 0x21	; 33
   1783a:	99 27       	eor	r25, r25
   1783c:	89 2b       	or	r24, r25
   1783e:	c1 f0       	breq	.+48     	; 0x17870 <printer_buffer+0x56>
    {
        if( ( plot.count & 255L ) == 0)
   17840:	80 91 a9 19 	lds	r24, 0x19A9	; 0x8019a9 <plot>
   17844:	30 91 aa 19 	lds	r19, 0x19AA	; 0x8019aa <plot+0x1>
   17848:	20 91 ab 19 	lds	r18, 0x19AB	; 0x8019ab <plot+0x2>
   1784c:	90 91 ac 19 	lds	r25, 0x19AC	; 0x8019ac <plot+0x3>
   17850:	81 11       	cpse	r24, r1
   17852:	0e c0       	rjmp	.+28     	; 0x17870 <printer_buffer+0x56>
            printf("%08ld\r",plot.count);
   17854:	ed b7       	in	r30, 0x3d	; 61
   17856:	fe b7       	in	r31, 0x3e	; 62
   17858:	84 83       	std	Z+4, r24	; 0x04
   1785a:	35 83       	std	Z+5, r19	; 0x05
   1785c:	26 83       	std	Z+6, r18	; 0x06
   1785e:	97 83       	std	Z+7, r25	; 0x07
   17860:	8d ea       	ldi	r24, 0xAD	; 173
   17862:	9e e2       	ldi	r25, 0x2E	; 46
   17864:	a0 e0       	ldi	r26, 0x00	; 0
   17866:	81 83       	std	Z+1, r24	; 0x01
   17868:	92 83       	std	Z+2, r25	; 0x02
   1786a:	a3 83       	std	Z+3, r26	; 0x03
   1786c:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    }

    ch = val & 0xff;
    if(val & (0xff00 & ~REN_FLAG))
   17870:	ce 01       	movw	r24, r28
   17872:	88 27       	eor	r24, r24
   17874:	97 7f       	andi	r25, 0xF7	; 247
   17876:	89 2b       	or	r24, r25
   17878:	41 f0       	breq	.+16     	; 0x1788a <printer_buffer+0x70>
    {
        if( receive_plot_flush() )
   1787a:	75 de       	rcall	.-790    	; 0x17566 <receive_plot_flush>
   1787c:	89 2b       	or	r24, r25
   1787e:	09 f4       	brne	.+2      	; 0x17882 <printer_buffer+0x68>
   17880:	3f c0       	rjmp	.+126    	; 0x17900 <printer_buffer+0xe6>
            plot.error = 1;
   17882:	81 e0       	ldi	r24, 0x01	; 1
   17884:	80 93 b1 19 	sts	0x19B1, r24	; 0x8019b1 <plot+0x8>
   17888:	3b c0       	rjmp	.+118    	; 0x17900 <printer_buffer+0xe6>
//plot.count += strlen(ptr);
    }
    else
    {
        ch  = val & 0xff;
        plot.buf[plot.ind++] = ch;
   1788a:	20 91 b4 19 	lds	r18, 0x19B4	; 0x8019b4 <plot+0xb>
   1788e:	30 91 b5 19 	lds	r19, 0x19B5	; 0x8019b5 <plot+0xc>
   17892:	80 91 ad 19 	lds	r24, 0x19AD	; 0x8019ad <plot+0x4>
   17896:	90 91 ae 19 	lds	r25, 0x19AE	; 0x8019ae <plot+0x5>
   1789a:	ac 01       	movw	r20, r24
   1789c:	4f 5f       	subi	r20, 0xFF	; 255
   1789e:	5f 4f       	sbci	r21, 0xFF	; 255
   178a0:	50 93 ae 19 	sts	0x19AE, r21	; 0x8019ae <plot+0x5>
   178a4:	40 93 ad 19 	sts	0x19AD, r20	; 0x8019ad <plot+0x4>
   178a8:	f9 01       	movw	r30, r18
   178aa:	e8 0f       	add	r30, r24
   178ac:	f9 1f       	adc	r31, r25
   178ae:	c0 83       	st	Z, r28
        plot.count++;
   178b0:	80 91 a9 19 	lds	r24, 0x19A9	; 0x8019a9 <plot>
   178b4:	90 91 aa 19 	lds	r25, 0x19AA	; 0x8019aa <plot+0x1>
   178b8:	a0 91 ab 19 	lds	r26, 0x19AB	; 0x8019ab <plot+0x2>
   178bc:	b0 91 ac 19 	lds	r27, 0x19AC	; 0x8019ac <plot+0x3>
   178c0:	01 96       	adiw	r24, 0x01	; 1
   178c2:	a1 1d       	adc	r26, r1
   178c4:	b1 1d       	adc	r27, r1
   178c6:	80 93 a9 19 	sts	0x19A9, r24	; 0x8019a9 <plot>
   178ca:	90 93 aa 19 	sts	0x19AA, r25	; 0x8019aa <plot+0x1>
   178ce:	a0 93 ab 19 	sts	0x19AB, r26	; 0x8019ab <plot+0x2>
   178d2:	b0 93 ac 19 	sts	0x19AC, r27	; 0x8019ac <plot+0x3>

        if(plot.ind >= plot.size)
   178d6:	20 91 ad 19 	lds	r18, 0x19AD	; 0x8019ad <plot+0x4>
   178da:	30 91 ae 19 	lds	r19, 0x19AE	; 0x8019ae <plot+0x5>
   178de:	80 91 af 19 	lds	r24, 0x19AF	; 0x8019af <plot+0x6>
   178e2:	90 91 b0 19 	lds	r25, 0x19B0	; 0x8019b0 <plot+0x7>
   178e6:	28 17       	cp	r18, r24
   178e8:	39 07       	cpc	r19, r25
        {
            if( receive_plot_flush() < 0 )
   178ea:	54 f0       	brlt	.+20     	; 0x17900 <printer_buffer+0xe6>
   178ec:	3c de       	rcall	.-904    	; 0x17566 <receive_plot_flush>
   178ee:	97 ff       	sbrs	r25, 7
   178f0:	03 c0       	rjmp	.+6      	; 0x178f8 <printer_buffer+0xde>
                plot.error = 1;
   178f2:	81 e0       	ldi	r24, 0x01	; 1
   178f4:	80 93 b1 19 	sts	0x19B1, r24	; 0x8019b1 <plot+0x8>
            plot.ind  = 0;
   178f8:	10 92 ae 19 	sts	0x19AE, r1	; 0x8019ae <plot+0x5>
   178fc:	10 92 ad 19 	sts	0x19AD, r1	; 0x8019ad <plot+0x4>
        }
    }
}
   17900:	cd b7       	in	r28, 0x3d	; 61
   17902:	de b7       	in	r29, 0x3e	; 62
   17904:	27 96       	adiw	r28, 0x07	; 7
   17906:	e2 e0       	ldi	r30, 0x02	; 2
   17908:	0c 94 35 e3 	jmp	0x1c66a	; 0x1c66a <__epilogue_restores__+0x20>

0001790c <PRINTER_COMMANDS>:
///
/// @todo  Fully emulated plotter response.
/// @return  0

int PRINTER_COMMANDS(uint8_t ch)
{
   1790c:	cf 93       	push	r28
   1790e:	00 d0       	rcall	.+0      	; 0x17910 <PRINTER_COMMANDS+0x4>
   17910:	00 d0       	rcall	.+0      	; 0x17912 <PRINTER_COMMANDS+0x6>
   17912:	1f 92       	push	r1
   17914:	c8 2f       	mov	r28, r24

// We could, for example, use secondaries to set file names, etc
// We don not use them yet
    if(PRINTER_is_MLA(listening))
   17916:	80 91 fc 1e 	lds	r24, 0x1EFC	; 0x801efc <listening>
   1791a:	90 e0       	ldi	r25, 0x00	; 0
   1791c:	0e 94 23 8b 	call	0x11646	; 0x11646 <PRINTER_is_MLA>
   17920:	89 2b       	or	r24, r25
   17922:	69 f0       	breq	.+26     	; 0x1793e <PRINTER_COMMANDS+0x32>
    {
#if SDEBUG
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17924:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17928:	85 ff       	sbrs	r24, 5
   1792a:	22 c0       	rjmp	.+68     	; 0x17970 <PRINTER_COMMANDS+0x64>
            printf("[SC PRINTER Listen: %02XH]\n",  0xff & ch );
   1792c:	8c 2f       	mov	r24, r28
   1792e:	90 e0       	ldi	r25, 0x00	; 0
   17930:	ed b7       	in	r30, 0x3d	; 61
   17932:	fe b7       	in	r31, 0x3e	; 62
   17934:	95 83       	std	Z+5, r25	; 0x05
   17936:	84 83       	std	Z+4, r24	; 0x04
   17938:	81 e9       	ldi	r24, 0x91	; 145
   1793a:	9e e2       	ldi	r25, 0x2E	; 46
   1793c:	13 c0       	rjmp	.+38     	; 0x17964 <PRINTER_COMMANDS+0x58>
#endif
        return(0);
    }

    if(PRINTER_is_MTA(talking))
   1793e:	80 91 fa 1e 	lds	r24, 0x1EFA	; 0x801efa <talking>
   17942:	90 e0       	ldi	r25, 0x00	; 0
   17944:	0e 94 34 8b 	call	0x11668	; 0x11668 <PRINTER_is_MTA>
   17948:	89 2b       	or	r24, r25
   1794a:	91 f0       	breq	.+36     	; 0x17970 <PRINTER_COMMANDS+0x64>
    {
#if SDEBUG
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1794c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17950:	85 ff       	sbrs	r24, 5
   17952:	0e c0       	rjmp	.+28     	; 0x17970 <PRINTER_COMMANDS+0x64>
            printf("[SC PRINTER Talk: %02XH]\n",  0xff & ch );
   17954:	8c 2f       	mov	r24, r28
   17956:	90 e0       	ldi	r25, 0x00	; 0
   17958:	ed b7       	in	r30, 0x3d	; 61
   1795a:	fe b7       	in	r31, 0x3e	; 62
   1795c:	95 83       	std	Z+5, r25	; 0x05
   1795e:	84 83       	std	Z+4, r24	; 0x04
   17960:	87 e7       	ldi	r24, 0x77	; 119
   17962:	9e e2       	ldi	r25, 0x2E	; 46
   17964:	a0 e0       	ldi	r26, 0x00	; 0
   17966:	81 83       	std	Z+1, r24	; 0x01
   17968:	92 83       	std	Z+2, r25	; 0x02
   1796a:	a3 83       	std	Z+3, r26	; 0x03
   1796c:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
#endif
        return(0);
    }
    return(0);
}
   17970:	80 e0       	ldi	r24, 0x00	; 0
   17972:	90 e0       	ldi	r25, 0x00	; 0
   17974:	0f 90       	pop	r0
   17976:	0f 90       	pop	r0
   17978:	0f 90       	pop	r0
   1797a:	0f 90       	pop	r0
   1797c:	0f 90       	pop	r0
   1797e:	cf 91       	pop	r28
   17980:	08 95       	ret

00017982 <V2B_MSB>:
///@param index: offset into byte array
///@param size: number of bytes to process
///@param val: Value to convert
///@return void
void V2B_MSB(uint8_t *B, int index, int size, uint32_t val)
{
   17982:	0f 93       	push	r16
   17984:	1f 93       	push	r17
   17986:	da 01       	movw	r26, r20
   17988:	11 97       	sbiw	r26, 0x01	; 1
    int i;
    for(i=size-1;i>=0;--i)
   1798a:	b7 fd       	sbrc	r27, 7
   1798c:	0b c0       	rjmp	.+22     	; 0x179a4 <V2B_MSB+0x22>
    {
        B[index+i] = val & 0xff;
   1798e:	fd 01       	movw	r30, r26
   17990:	e6 0f       	add	r30, r22
   17992:	f7 1f       	adc	r31, r23
   17994:	e8 0f       	add	r30, r24
   17996:	f9 1f       	adc	r31, r25
   17998:	00 83       	st	Z, r16
        val >>= 8;
   1799a:	01 2f       	mov	r16, r17
   1799c:	12 2f       	mov	r17, r18
   1799e:	23 2f       	mov	r18, r19
   179a0:	33 27       	eor	r19, r19
   179a2:	f2 cf       	rjmp	.-28     	; 0x17988 <V2B_MSB+0x6>
    }
}
   179a4:	1f 91       	pop	r17
   179a6:	0f 91       	pop	r16
   179a8:	08 95       	ret

000179aa <V2B_LSB>:
///@param index: offset into byte array
///@param size: number of bytes to process
///@param val: Value to convert
///@return void
void V2B_LSB(uint8_t *B, int index, int size, uint32_t val)
{
   179aa:	0f 93       	push	r16
   179ac:	1f 93       	push	r17
   179ae:	fc 01       	movw	r30, r24
   179b0:	e6 0f       	add	r30, r22
   179b2:	f7 1f       	adc	r31, r23
   179b4:	bf 01       	movw	r22, r30
    int i;
    for(i=0;i<size;++i)
   179b6:	cf 01       	movw	r24, r30
   179b8:	86 1b       	sub	r24, r22
   179ba:	97 0b       	sbc	r25, r23
   179bc:	84 17       	cp	r24, r20
   179be:	95 07       	cpc	r25, r21
   179c0:	34 f4       	brge	.+12     	; 0x179ce <V2B_LSB+0x24>
    {
        B[index+i] = val & 0xff;
   179c2:	01 93       	st	Z+, r16
        val >>= 8;
   179c4:	01 2f       	mov	r16, r17
   179c6:	12 2f       	mov	r17, r18
   179c8:	23 2f       	mov	r18, r19
   179ca:	33 27       	eor	r19, r19
   179cc:	f4 cf       	rjmp	.-24     	; 0x179b6 <V2B_LSB+0xc>
    }
}
   179ce:	1f 91       	pop	r17
   179d0:	0f 91       	pop	r16
   179d2:	08 95       	ret

000179d4 <B2V_MSB>:
///@param B: byte array
///@param index: offset into byte array
///@param size: number of bytes to process
///@return value
uint32_t B2V_MSB(uint8_t *B, int index, int size)
{
   179d4:	cf 92       	push	r12
   179d6:	df 92       	push	r13
   179d8:	ef 92       	push	r14
   179da:	ff 92       	push	r15
   179dc:	fc 01       	movw	r30, r24
   179de:	e6 0f       	add	r30, r22
   179e0:	f7 1f       	adc	r31, r23
    int i;
    uint32_t val = 0;
   179e2:	60 e0       	ldi	r22, 0x00	; 0
   179e4:	70 e0       	ldi	r23, 0x00	; 0
   179e6:	cb 01       	movw	r24, r22
   179e8:	df 01       	movw	r26, r30

    for(i=0;i<size;++i)
   179ea:	9f 01       	movw	r18, r30
   179ec:	2a 1b       	sub	r18, r26
   179ee:	3b 0b       	sbc	r19, r27
   179f0:	24 17       	cp	r18, r20
   179f2:	35 07       	cpc	r19, r21
   179f4:	4c f4       	brge	.+18     	; 0x17a08 <B2V_MSB+0x34>
    {
        val <<= 8;
   179f6:	cc 24       	eor	r12, r12
   179f8:	d6 2e       	mov	r13, r22
   179fa:	e7 2e       	mov	r14, r23
   179fc:	f8 2e       	mov	r15, r24
        val |= (uint8_t) (B[i+index] & 0xff);
   179fe:	21 91       	ld	r18, Z+
   17a00:	c7 01       	movw	r24, r14
   17a02:	b6 01       	movw	r22, r12
   17a04:	62 2b       	or	r22, r18
   17a06:	f1 cf       	rjmp	.-30     	; 0x179ea <B2V_MSB+0x16>
    }
    return(val);
}
   17a08:	ff 90       	pop	r15
   17a0a:	ef 90       	pop	r14
   17a0c:	df 90       	pop	r13
   17a0e:	cf 90       	pop	r12
   17a10:	08 95       	ret

00017a12 <B2V_LSB>:
///@param B: byte array
///@param index: offset into byte array
///@param size: number of bytes to process
///@return value
uint32_t B2V_LSB(uint8_t *B, int index, int size)
{
   17a12:	cf 92       	push	r12
   17a14:	df 92       	push	r13
   17a16:	ef 92       	push	r14
   17a18:	ff 92       	push	r15
   17a1a:	9c 01       	movw	r18, r24
   17a1c:	db 01       	movw	r26, r22
    int i;
    uint32_t val = 0;
   17a1e:	60 e0       	ldi	r22, 0x00	; 0
   17a20:	70 e0       	ldi	r23, 0x00	; 0
   17a22:	cb 01       	movw	r24, r22
   17a24:	41 50       	subi	r20, 0x01	; 1
   17a26:	51 09       	sbc	r21, r1

    for(i=size-1;i>=0;--i)
   17a28:	57 fd       	sbrc	r21, 7
   17a2a:	0e c0       	rjmp	.+28     	; 0x17a48 <B2V_LSB+0x36>
    {
        val <<= 8;
   17a2c:	cc 24       	eor	r12, r12
   17a2e:	d6 2e       	mov	r13, r22
   17a30:	e7 2e       	mov	r14, r23
   17a32:	f8 2e       	mov	r15, r24
        val |= (uint8_t) (B[i+index] & 0xff);
   17a34:	fa 01       	movw	r30, r20
   17a36:	ea 0f       	add	r30, r26
   17a38:	fb 1f       	adc	r31, r27
   17a3a:	e2 0f       	add	r30, r18
   17a3c:	f3 1f       	adc	r31, r19
   17a3e:	e0 81       	ld	r30, Z
   17a40:	c7 01       	movw	r24, r14
   17a42:	b6 01       	movw	r22, r12
   17a44:	6e 2b       	or	r22, r30
   17a46:	ee cf       	rjmp	.-36     	; 0x17a24 <B2V_LSB+0x12>
    }
    return(val);
}
   17a48:	ff 90       	pop	r15
   17a4a:	ef 90       	pop	r14
   17a4c:	df 90       	pop	r13
   17a4e:	cf 90       	pop	r12
   17a50:	08 95       	ret

00017a52 <lif_help>:
            return( (lifdir_t *) &LIF->DIR );

// Skip purged records
    }
    return( NULL );
}
   17a52:	cf 93       	push	r28
   17a54:	df 93       	push	r29
   17a56:	00 d0       	rcall	.+0      	; 0x17a58 <lif_help+0x6>
   17a58:	1f 92       	push	r1
   17a5a:	ec 01       	movw	r28, r24
   17a5c:	82 e7       	ldi	r24, 0x72	; 114
   17a5e:	93 e4       	ldi	r25, 0x43	; 67
   17a60:	a0 e0       	ldi	r26, 0x00	; 0
   17a62:	ed b7       	in	r30, 0x3d	; 61
   17a64:	fe b7       	in	r31, 0x3e	; 62
   17a66:	81 83       	std	Z+1, r24	; 0x01
   17a68:	92 83       	std	Z+2, r25	; 0x02
   17a6a:	a3 83       	std	Z+3, r26	; 0x03
   17a6c:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   17a70:	cd 2b       	or	r28, r29
   17a72:	51 f0       	breq	.+20     	; 0x17a88 <lif_help+0x36>
   17a74:	8e ea       	ldi	r24, 0xAE	; 174
   17a76:	91 e4       	ldi	r25, 0x41	; 65
   17a78:	a0 e0       	ldi	r26, 0x00	; 0
   17a7a:	ed b7       	in	r30, 0x3d	; 61
   17a7c:	fe b7       	in	r31, 0x3e	; 62
   17a7e:	81 83       	std	Z+1, r24	; 0x01
   17a80:	92 83       	std	Z+2, r25	; 0x02
   17a82:	a3 83       	std	Z+3, r26	; 0x03
   17a84:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   17a88:	cd b7       	in	r28, 0x3d	; 61
   17a8a:	de b7       	in	r29, 0x3e	; 62
   17a8c:	23 96       	adiw	r28, 0x03	; 3
   17a8e:	e2 e0       	ldi	r30, 0x02	; 2
   17a90:	0c 94 35 e3 	jmp	0x1c66a	; 0x1c66a <__epilogue_restores__+0x20>

00017a94 <lif_calloc>:
   17a94:	cf 92       	push	r12
   17a96:	df 92       	push	r13
   17a98:	ef 92       	push	r14
   17a9a:	ff 92       	push	r15
   17a9c:	cf 93       	push	r28
   17a9e:	df 93       	push	r29
   17aa0:	ad b7       	in	r26, 0x3d	; 61
   17aa2:	be b7       	in	r27, 0x3e	; 62
   17aa4:	17 97       	sbiw	r26, 0x07	; 7
   17aa6:	0f b6       	in	r0, 0x3f	; 63
   17aa8:	f8 94       	cli
   17aaa:	be bf       	out	0x3e, r27	; 62
   17aac:	0f be       	out	0x3f, r0	; 63
   17aae:	ad bf       	out	0x3d, r26	; 61
   17ab0:	6b 01       	movw	r12, r22
   17ab2:	7c 01       	movw	r14, r24
   17ab4:	61 e0       	ldi	r22, 0x01	; 1
   17ab6:	70 e0       	ldi	r23, 0x00	; 0
   17ab8:	c6 01       	movw	r24, r12
   17aba:	0e 94 fe 25 	call	0x4bfc	; 0x4bfc <safecalloc>
   17abe:	ec 01       	movw	r28, r24
   17ac0:	89 2b       	or	r24, r25
   17ac2:	71 f4       	brne	.+28     	; 0x17ae0 <lif_calloc+0x4c>
   17ac4:	ed b7       	in	r30, 0x3d	; 61
   17ac6:	fe b7       	in	r31, 0x3e	; 62
   17ac8:	c4 82       	std	Z+4, r12	; 0x04
   17aca:	d5 82       	std	Z+5, r13	; 0x05
   17acc:	e6 82       	std	Z+6, r14	; 0x06
   17ace:	f7 82       	std	Z+7, r15	; 0x07
   17ad0:	87 e4       	ldi	r24, 0x47	; 71
   17ad2:	91 e4       	ldi	r25, 0x41	; 65
   17ad4:	a0 e0       	ldi	r26, 0x00	; 0
   17ad6:	81 83       	std	Z+1, r24	; 0x01
   17ad8:	92 83       	std	Z+2, r25	; 0x02
   17ada:	a3 83       	std	Z+3, r26	; 0x03
   17adc:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   17ae0:	ce 01       	movw	r24, r28
   17ae2:	ad b7       	in	r26, 0x3d	; 61
   17ae4:	be b7       	in	r27, 0x3e	; 62
   17ae6:	17 96       	adiw	r26, 0x07	; 7
   17ae8:	0f b6       	in	r0, 0x3f	; 63
   17aea:	f8 94       	cli
   17aec:	be bf       	out	0x3e, r27	; 62
   17aee:	0f be       	out	0x3f, r0	; 63
   17af0:	ad bf       	out	0x3d, r26	; 61
   17af2:	df 91       	pop	r29
   17af4:	cf 91       	pop	r28
   17af6:	ff 90       	pop	r15
   17af8:	ef 90       	pop	r14
   17afa:	df 90       	pop	r13
   17afc:	cf 90       	pop	r12
   17afe:	08 95       	ret

00017b00 <lif_free>:
   17b00:	00 d0       	rcall	.+0      	; 0x17b02 <lif_free+0x2>
   17b02:	1f 92       	push	r1
   17b04:	00 97       	sbiw	r24, 0x00	; 0
   17b06:	59 f4       	brne	.+22     	; 0x17b1e <lif_free+0x1e>
   17b08:	8f e2       	ldi	r24, 0x2F	; 47
   17b0a:	91 e4       	ldi	r25, 0x41	; 65
   17b0c:	a0 e0       	ldi	r26, 0x00	; 0
   17b0e:	ed b7       	in	r30, 0x3d	; 61
   17b10:	fe b7       	in	r31, 0x3e	; 62
   17b12:	81 83       	std	Z+1, r24	; 0x01
   17b14:	92 83       	std	Z+2, r25	; 0x02
   17b16:	a3 83       	std	Z+3, r26	; 0x03
   17b18:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   17b1c:	02 c0       	rjmp	.+4      	; 0x17b22 <lif_free+0x22>
   17b1e:	0e 94 4a 26 	call	0x4c94	; 0x4c94 <safefree>
   17b22:	0f 90       	pop	r0
   17b24:	0f 90       	pop	r0
   17b26:	0f 90       	pop	r0
   17b28:	08 95       	ret

00017b2a <lif_stralloc>:
   17b2a:	0f 93       	push	r16
   17b2c:	1f 93       	push	r17
   17b2e:	cf 93       	push	r28
   17b30:	df 93       	push	r29
   17b32:	ec 01       	movw	r28, r24
   17b34:	fc 01       	movw	r30, r24
   17b36:	01 90       	ld	r0, Z+
   17b38:	00 20       	and	r0, r0
   17b3a:	e9 f7       	brne	.-6      	; 0x17b36 <lif_stralloc+0xc>
   17b3c:	bf 01       	movw	r22, r30
   17b3e:	68 1b       	sub	r22, r24
   17b40:	79 0b       	sbc	r23, r25
   17b42:	6d 5f       	subi	r22, 0xFD	; 253
   17b44:	7f 4f       	sbci	r23, 0xFF	; 255
   17b46:	07 2e       	mov	r0, r23
   17b48:	00 0c       	add	r0, r0
   17b4a:	88 0b       	sbc	r24, r24
   17b4c:	99 0b       	sbc	r25, r25
   17b4e:	a2 df       	rcall	.-188    	; 0x17a94 <lif_calloc>
   17b50:	8c 01       	movw	r16, r24
   17b52:	00 97       	sbiw	r24, 0x00	; 0
   17b54:	19 f0       	breq	.+6      	; 0x17b5c <lif_stralloc+0x32>
   17b56:	be 01       	movw	r22, r28
   17b58:	0e 94 93 2f 	call	0x5f26	; 0x5f26 <strcpy>
   17b5c:	c8 01       	movw	r24, r16
   17b5e:	df 91       	pop	r29
   17b60:	cf 91       	pop	r28
   17b62:	1f 91       	pop	r17
   17b64:	0f 91       	pop	r16
   17b66:	08 95       	ret

00017b68 <lif_open>:
   17b68:	ef 92       	push	r14
   17b6a:	ff 92       	push	r15
   17b6c:	0f 93       	push	r16
   17b6e:	1f 93       	push	r17
   17b70:	cf 93       	push	r28
   17b72:	df 93       	push	r29
   17b74:	ad b7       	in	r26, 0x3d	; 61
   17b76:	be b7       	in	r27, 0x3e	; 62
   17b78:	17 97       	sbiw	r26, 0x07	; 7
   17b7a:	0f b6       	in	r0, 0x3f	; 63
   17b7c:	f8 94       	cli
   17b7e:	be bf       	out	0x3e, r27	; 62
   17b80:	0f be       	out	0x3f, r0	; 63
   17b82:	ad bf       	out	0x3d, r26	; 61
   17b84:	8c 01       	movw	r16, r24
   17b86:	7b 01       	movw	r14, r22
   17b88:	0e 94 8b 7c 	call	0xf916	; 0xf916 <fopen>
   17b8c:	ec 01       	movw	r28, r24
   17b8e:	89 2b       	or	r24, r25
   17b90:	71 f4       	brne	.+28     	; 0x17bae <lif_open+0x46>
   17b92:	ed b7       	in	r30, 0x3d	; 61
   17b94:	fe b7       	in	r31, 0x3e	; 62
   17b96:	f7 82       	std	Z+7, r15	; 0x07
   17b98:	e6 82       	std	Z+6, r14	; 0x06
   17b9a:	15 83       	std	Z+5, r17	; 0x05
   17b9c:	04 83       	std	Z+4, r16	; 0x04
   17b9e:	8a e0       	ldi	r24, 0x0A	; 10
   17ba0:	91 e4       	ldi	r25, 0x41	; 65
   17ba2:	a0 e0       	ldi	r26, 0x00	; 0
   17ba4:	81 83       	std	Z+1, r24	; 0x01
   17ba6:	92 83       	std	Z+2, r25	; 0x02
   17ba8:	a3 83       	std	Z+3, r26	; 0x03
   17baa:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   17bae:	ce 01       	movw	r24, r28
   17bb0:	cd b7       	in	r28, 0x3d	; 61
   17bb2:	de b7       	in	r29, 0x3e	; 62
   17bb4:	27 96       	adiw	r28, 0x07	; 7
   17bb6:	e6 e0       	ldi	r30, 0x06	; 6
   17bb8:	0c 94 31 e3 	jmp	0x1c662	; 0x1c662 <__epilogue_restores__+0x18>

00017bbc <lif_stat>:
   17bbc:	0f 93       	push	r16
   17bbe:	1f 93       	push	r17
   17bc0:	cf 93       	push	r28
   17bc2:	df 93       	push	r29
   17bc4:	00 d0       	rcall	.+0      	; 0x17bc6 <lif_stat+0xa>
   17bc6:	00 d0       	rcall	.+0      	; 0x17bc8 <lif_stat+0xc>
   17bc8:	1f 92       	push	r1
   17bca:	8c 01       	movw	r16, r24
   17bcc:	d6 2f       	mov	r29, r22
   17bce:	c7 2f       	mov	r28, r23
   17bd0:	0e 94 90 77 	call	0xef20	; 0xef20 <stat>
   17bd4:	97 ff       	sbrs	r25, 7
   17bd6:	0f c0       	rjmp	.+30     	; 0x17bf6 <lif_stat+0x3a>
   17bd8:	ed b7       	in	r30, 0x3d	; 61
   17bda:	fe b7       	in	r31, 0x3e	; 62
   17bdc:	15 83       	std	Z+5, r17	; 0x05
   17bde:	04 83       	std	Z+4, r16	; 0x04
   17be0:	81 ef       	ldi	r24, 0xF1	; 241
   17be2:	90 e4       	ldi	r25, 0x40	; 64
   17be4:	a0 e0       	ldi	r26, 0x00	; 0
   17be6:	81 83       	std	Z+1, r24	; 0x01
   17be8:	92 83       	std	Z+2, r25	; 0x02
   17bea:	a3 83       	std	Z+3, r26	; 0x03
   17bec:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   17bf0:	80 e0       	ldi	r24, 0x00	; 0
   17bf2:	90 e0       	ldi	r25, 0x00	; 0
   17bf4:	02 c0       	rjmp	.+4      	; 0x17bfa <lif_stat+0x3e>
   17bf6:	8d 2f       	mov	r24, r29
   17bf8:	9c 2f       	mov	r25, r28
   17bfa:	cd b7       	in	r28, 0x3d	; 61
   17bfc:	de b7       	in	r29, 0x3e	; 62
   17bfe:	25 96       	adiw	r28, 0x05	; 5
   17c00:	e4 e0       	ldi	r30, 0x04	; 4
   17c02:	0c 94 33 e3 	jmp	0x1c666	; 0x1c666 <__epilogue_restores__+0x1c>

00017c06 <lif_seek_msg>:
   17c06:	a9 e0       	ldi	r26, 0x09	; 9
   17c08:	b0 e0       	ldi	r27, 0x00	; 0
   17c0a:	e9 e0       	ldi	r30, 0x09	; 9
   17c0c:	fe eb       	ldi	r31, 0xBE	; 190
   17c0e:	0c 94 13 e3 	jmp	0x1c626	; 0x1c626 <__prologue_saves__+0x14>
   17c12:	ec 01       	movw	r28, r24
   17c14:	6a 01       	movw	r12, r20
   17c16:	7b 01       	movw	r14, r22
   17c18:	89 01       	movw	r16, r18
   17c1a:	0e 94 ca 78 	call	0xf194	; 0xf194 <ftell>
   17c1e:	6c 15       	cp	r22, r12
   17c20:	7d 05       	cpc	r23, r13
   17c22:	8e 05       	cpc	r24, r14
   17c24:	9f 05       	cpc	r25, r15
   17c26:	19 f4       	brne	.+6      	; 0x17c2e <lif_seek_msg+0x28>
   17c28:	81 e0       	ldi	r24, 0x01	; 1
   17c2a:	90 e0       	ldi	r25, 0x00	; 0
   17c2c:	1b c0       	rjmp	.+54     	; 0x17c64 <lif_seek_msg+0x5e>
   17c2e:	20 e0       	ldi	r18, 0x00	; 0
   17c30:	30 e0       	ldi	r19, 0x00	; 0
   17c32:	b7 01       	movw	r22, r14
   17c34:	a6 01       	movw	r20, r12
   17c36:	ce 01       	movw	r24, r28
   17c38:	0e 94 4d 79 	call	0xf29a	; 0xf29a <fseek>
   17c3c:	97 ff       	sbrs	r25, 7
   17c3e:	f4 cf       	rjmp	.-24     	; 0x17c28 <lif_seek_msg+0x22>
   17c40:	ed b7       	in	r30, 0x3d	; 61
   17c42:	fe b7       	in	r31, 0x3e	; 62
   17c44:	c6 82       	std	Z+6, r12	; 0x06
   17c46:	d7 82       	std	Z+7, r13	; 0x07
   17c48:	e0 86       	std	Z+8, r14	; 0x08
   17c4a:	f1 86       	std	Z+9, r15	; 0x09
   17c4c:	15 83       	std	Z+5, r17	; 0x05
   17c4e:	04 83       	std	Z+4, r16	; 0x04
   17c50:	80 ed       	ldi	r24, 0xD0	; 208
   17c52:	90 e4       	ldi	r25, 0x40	; 64
   17c54:	a0 e0       	ldi	r26, 0x00	; 0
   17c56:	81 83       	std	Z+1, r24	; 0x01
   17c58:	92 83       	std	Z+2, r25	; 0x02
   17c5a:	a3 83       	std	Z+3, r26	; 0x03
   17c5c:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   17c60:	80 e0       	ldi	r24, 0x00	; 0
   17c62:	90 e0       	ldi	r25, 0x00	; 0
   17c64:	cd b7       	in	r28, 0x3d	; 61
   17c66:	de b7       	in	r29, 0x3e	; 62
   17c68:	29 96       	adiw	r28, 0x09	; 9
   17c6a:	e8 e0       	ldi	r30, 0x08	; 8
   17c6c:	0c 94 2f e3 	jmp	0x1c65e	; 0x1c65e <__epilogue_restores__+0x14>

00017c70 <lif_read>:
   17c70:	af e0       	ldi	r26, 0x0F	; 15
   17c72:	b0 e0       	ldi	r27, 0x00	; 0
   17c74:	ee e3       	ldi	r30, 0x3E	; 62
   17c76:	fe eb       	ldi	r31, 0xBE	; 190
   17c78:	0c 94 0f e3 	jmp	0x1c61e	; 0x1c61e <__prologue_saves__+0xc>
   17c7c:	ec 01       	movw	r28, r24
   17c7e:	7b 01       	movw	r14, r22
   17c80:	49 01       	movw	r8, r18
   17c82:	5a 01       	movw	r10, r20
   17c84:	28 81       	ld	r18, Y
   17c86:	39 81       	ldd	r19, Y+1	; 0x01
   17c88:	b5 01       	movw	r22, r10
   17c8a:	a4 01       	movw	r20, r8
   17c8c:	8a 81       	ldd	r24, Y+2	; 0x02
   17c8e:	9b 81       	ldd	r25, Y+3	; 0x03
   17c90:	ba df       	rcall	.-140    	; 0x17c06 <lif_seek_msg>
   17c92:	89 2b       	or	r24, r25
   17c94:	a1 f1       	breq	.+104    	; 0x17cfe <lif_read+0x8e>
   17c96:	2a 81       	ldd	r18, Y+2	; 0x02
   17c98:	3b 81       	ldd	r19, Y+3	; 0x03
   17c9a:	a8 01       	movw	r20, r16
   17c9c:	61 e0       	ldi	r22, 0x01	; 1
   17c9e:	70 e0       	ldi	r23, 0x00	; 0
   17ca0:	c7 01       	movw	r24, r14
   17ca2:	0e 94 e1 79 	call	0xf3c2	; 0xf3c2 <fread>
   17ca6:	6c 01       	movw	r12, r24
   17ca8:	e1 2c       	mov	r14, r1
   17caa:	f1 2c       	mov	r15, r1
   17cac:	b8 01       	movw	r22, r16
   17cae:	01 2e       	mov	r0, r17
   17cb0:	00 0c       	add	r0, r0
   17cb2:	88 0b       	sbc	r24, r24
   17cb4:	99 0b       	sbc	r25, r25
   17cb6:	c6 16       	cp	r12, r22
   17cb8:	d7 06       	cpc	r13, r23
   17cba:	e8 06       	cpc	r14, r24
   17cbc:	f9 06       	cpc	r15, r25
   17cbe:	29 f1       	breq	.+74     	; 0x17d0a <lif_read+0x9a>
   17cc0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17cc4:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17cc8:	92 ff       	sbrs	r25, 2
   17cca:	1d c0       	rjmp	.+58     	; 0x17d06 <lif_read+0x96>
   17ccc:	ed b7       	in	r30, 0x3d	; 61
   17cce:	fe b7       	in	r31, 0x3e	; 62
   17cd0:	17 87       	std	Z+15, r17	; 0x0f
   17cd2:	06 87       	std	Z+14, r16	; 0x0e
   17cd4:	c2 86       	std	Z+10, r12	; 0x0a
   17cd6:	d3 86       	std	Z+11, r13	; 0x0b
   17cd8:	e4 86       	std	Z+12, r14	; 0x0c
   17cda:	f5 86       	std	Z+13, r15	; 0x0d
   17cdc:	86 82       	std	Z+6, r8	; 0x06
   17cde:	97 82       	std	Z+7, r9	; 0x07
   17ce0:	a0 86       	std	Z+8, r10	; 0x08
   17ce2:	b1 86       	std	Z+9, r11	; 0x09
   17ce4:	88 81       	ld	r24, Y
   17ce6:	99 81       	ldd	r25, Y+1	; 0x01
   17ce8:	95 83       	std	Z+5, r25	; 0x05
   17cea:	84 83       	std	Z+4, r24	; 0x04
   17cec:	84 e9       	ldi	r24, 0x94	; 148
   17cee:	90 e4       	ldi	r25, 0x40	; 64
   17cf0:	a0 e0       	ldi	r26, 0x00	; 0
   17cf2:	81 83       	std	Z+1, r24	; 0x01
   17cf4:	92 83       	std	Z+2, r25	; 0x02
   17cf6:	a3 83       	std	Z+3, r26	; 0x03
   17cf8:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   17cfc:	04 c0       	rjmp	.+8      	; 0x17d06 <lif_read+0x96>
   17cfe:	60 e0       	ldi	r22, 0x00	; 0
   17d00:	70 e0       	ldi	r23, 0x00	; 0
   17d02:	cb 01       	movw	r24, r22
   17d04:	02 c0       	rjmp	.+4      	; 0x17d0a <lif_read+0x9a>
   17d06:	c7 01       	movw	r24, r14
   17d08:	b6 01       	movw	r22, r12
   17d0a:	cd b7       	in	r28, 0x3d	; 61
   17d0c:	de b7       	in	r29, 0x3e	; 62
   17d0e:	2f 96       	adiw	r28, 0x0f	; 15
   17d10:	ec e0       	ldi	r30, 0x0C	; 12
   17d12:	0c 94 2b e3 	jmp	0x1c656	; 0x1c656 <__epilogue_restores__+0xc>

00017d16 <lif_write>:
   17d16:	8f 92       	push	r8
   17d18:	9f 92       	push	r9
   17d1a:	af 92       	push	r10
   17d1c:	bf 92       	push	r11
   17d1e:	ef 92       	push	r14
   17d20:	ff 92       	push	r15
   17d22:	0f 93       	push	r16
   17d24:	1f 93       	push	r17
   17d26:	cf 93       	push	r28
   17d28:	df 93       	push	r29
   17d2a:	ad b7       	in	r26, 0x3d	; 61
   17d2c:	be b7       	in	r27, 0x3e	; 62
   17d2e:	1d 97       	sbiw	r26, 0x0d	; 13
   17d30:	0f b6       	in	r0, 0x3f	; 63
   17d32:	f8 94       	cli
   17d34:	be bf       	out	0x3e, r27	; 62
   17d36:	0f be       	out	0x3f, r0	; 63
   17d38:	ad bf       	out	0x3d, r26	; 61
   17d3a:	7c 01       	movw	r14, r24
   17d3c:	eb 01       	movw	r28, r22
   17d3e:	49 01       	movw	r8, r18
   17d40:	5a 01       	movw	r10, r20
   17d42:	fc 01       	movw	r30, r24
   17d44:	20 81       	ld	r18, Z
   17d46:	31 81       	ldd	r19, Z+1	; 0x01
   17d48:	b5 01       	movw	r22, r10
   17d4a:	a4 01       	movw	r20, r8
   17d4c:	82 81       	ldd	r24, Z+2	; 0x02
   17d4e:	93 81       	ldd	r25, Z+3	; 0x03
   17d50:	5a df       	rcall	.-332    	; 0x17c06 <lif_seek_msg>
   17d52:	00 97       	sbiw	r24, 0x00	; 0
   17d54:	81 f1       	breq	.+96     	; 0x17db6 <lif_write+0xa0>
   17d56:	f7 01       	movw	r30, r14
   17d58:	22 81       	ldd	r18, Z+2	; 0x02
   17d5a:	33 81       	ldd	r19, Z+3	; 0x03
   17d5c:	a8 01       	movw	r20, r16
   17d5e:	61 e0       	ldi	r22, 0x01	; 1
   17d60:	70 e0       	ldi	r23, 0x00	; 0
   17d62:	ce 01       	movw	r24, r28
   17d64:	0e 94 b3 7a 	call	0xf566	; 0xf566 <fwrite>
   17d68:	ec 01       	movw	r28, r24
   17d6a:	08 17       	cp	r16, r24
   17d6c:	19 07       	cpc	r17, r25
   17d6e:	01 f1       	breq	.+64     	; 0x17db0 <lif_write+0x9a>
   17d70:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17d74:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17d78:	92 ff       	sbrs	r25, 2
   17d7a:	1c c0       	rjmp	.+56     	; 0x17db4 <lif_write+0x9e>
   17d7c:	ed b7       	in	r30, 0x3d	; 61
   17d7e:	fe b7       	in	r31, 0x3e	; 62
   17d80:	15 87       	std	Z+13, r17	; 0x0d
   17d82:	04 87       	std	Z+12, r16	; 0x0c
   17d84:	d3 87       	std	Z+11, r29	; 0x0b
   17d86:	c2 87       	std	Z+10, r28	; 0x0a
   17d88:	86 82       	std	Z+6, r8	; 0x06
   17d8a:	97 82       	std	Z+7, r9	; 0x07
   17d8c:	a0 86       	std	Z+8, r10	; 0x08
   17d8e:	b1 86       	std	Z+9, r11	; 0x09
   17d90:	f7 01       	movw	r30, r14
   17d92:	80 81       	ld	r24, Z
   17d94:	91 81       	ldd	r25, Z+1	; 0x01
   17d96:	ed b7       	in	r30, 0x3d	; 61
   17d98:	fe b7       	in	r31, 0x3e	; 62
   17d9a:	95 83       	std	Z+5, r25	; 0x05
   17d9c:	84 83       	std	Z+4, r24	; 0x04
   17d9e:	87 e5       	ldi	r24, 0x57	; 87
   17da0:	90 e4       	ldi	r25, 0x40	; 64
   17da2:	a0 e0       	ldi	r26, 0x00	; 0
   17da4:	81 83       	std	Z+1, r24	; 0x01
   17da6:	92 83       	std	Z+2, r25	; 0x02
   17da8:	a3 83       	std	Z+3, r26	; 0x03
   17daa:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   17dae:	02 c0       	rjmp	.+4      	; 0x17db4 <lif_write+0x9e>
   17db0:	c8 01       	movw	r24, r16
   17db2:	01 c0       	rjmp	.+2      	; 0x17db6 <lif_write+0xa0>
   17db4:	ce 01       	movw	r24, r28
   17db6:	ad b7       	in	r26, 0x3d	; 61
   17db8:	be b7       	in	r27, 0x3e	; 62
   17dba:	1d 96       	adiw	r26, 0x0d	; 13
   17dbc:	0f b6       	in	r0, 0x3f	; 63
   17dbe:	f8 94       	cli
   17dc0:	be bf       	out	0x3e, r27	; 62
   17dc2:	0f be       	out	0x3f, r0	; 63
   17dc4:	ad bf       	out	0x3d, r26	; 61
   17dc6:	df 91       	pop	r29
   17dc8:	cf 91       	pop	r28
   17dca:	1f 91       	pop	r17
   17dcc:	0f 91       	pop	r16
   17dce:	ff 90       	pop	r15
   17dd0:	ef 90       	pop	r14
   17dd2:	bf 90       	pop	r11
   17dd4:	af 90       	pop	r10
   17dd6:	9f 90       	pop	r9
   17dd8:	8f 90       	pop	r8
   17dda:	08 95       	ret

00017ddc <lif_chars>:
   17ddc:	80 32       	cpi	r24, 0x20	; 32
   17dde:	91 05       	cpc	r25, r1
   17de0:	e1 f0       	breq	.+56     	; 0x17e1a <lif_chars+0x3e>
   17de2:	9c 01       	movw	r18, r24
   17de4:	21 56       	subi	r18, 0x61	; 97
   17de6:	31 09       	sbc	r19, r1
   17de8:	2a 31       	cpi	r18, 0x1A	; 26
   17dea:	31 05       	cpc	r19, r1
   17dec:	10 f4       	brcc	.+4      	; 0x17df2 <lif_chars+0x16>
   17dee:	80 97       	sbiw	r24, 0x20	; 32
   17df0:	08 95       	ret
   17df2:	9c 01       	movw	r18, r24
   17df4:	21 54       	subi	r18, 0x41	; 65
   17df6:	31 09       	sbc	r19, r1
   17df8:	2a 31       	cpi	r18, 0x1A	; 26
   17dfa:	31 05       	cpc	r19, r1
   17dfc:	c8 f0       	brcs	.+50     	; 0x17e30 <lif_chars+0x54>
   17dfe:	16 16       	cp	r1, r22
   17e00:	17 06       	cpc	r1, r23
   17e02:	74 f4       	brge	.+28     	; 0x17e20 <lif_chars+0x44>
   17e04:	2f 5e       	subi	r18, 0xEF	; 239
   17e06:	3f 4f       	sbci	r19, 0xFF	; 255
   17e08:	2a 30       	cpi	r18, 0x0A	; 10
   17e0a:	31 05       	cpc	r19, r1
   17e0c:	88 f0       	brcs	.+34     	; 0x17e30 <lif_chars+0x54>
   17e0e:	8f 35       	cpi	r24, 0x5F	; 95
   17e10:	91 05       	cpc	r25, r1
   17e12:	49 f0       	breq	.+18     	; 0x17e26 <lif_chars+0x4a>
   17e14:	8d 97       	sbiw	r24, 0x2d	; 45
   17e16:	21 f4       	brne	.+8      	; 0x17e20 <lif_chars+0x44>
   17e18:	09 c0       	rjmp	.+18     	; 0x17e2c <lif_chars+0x50>
   17e1a:	80 e2       	ldi	r24, 0x20	; 32
   17e1c:	90 e0       	ldi	r25, 0x00	; 0
   17e1e:	08 95       	ret
   17e20:	80 e0       	ldi	r24, 0x00	; 0
   17e22:	90 e0       	ldi	r25, 0x00	; 0
   17e24:	08 95       	ret
   17e26:	8f e5       	ldi	r24, 0x5F	; 95
   17e28:	90 e0       	ldi	r25, 0x00	; 0
   17e2a:	08 95       	ret
   17e2c:	8d e2       	ldi	r24, 0x2D	; 45
   17e2e:	90 e0       	ldi	r25, 0x00	; 0
   17e30:	08 95       	ret

00017e32 <lif_B2S>:
   17e32:	a0 e0       	ldi	r26, 0x00	; 0
   17e34:	b0 e0       	ldi	r27, 0x00	; 0
   17e36:	ef e1       	ldi	r30, 0x1F	; 31
   17e38:	ff eb       	ldi	r31, 0xBF	; 191
   17e3a:	0c 94 0f e3 	jmp	0x1c61e	; 0x1c61e <__prologue_saves__+0xc>
   17e3e:	5c 01       	movw	r10, r24
   17e40:	6b 01       	movw	r12, r22
   17e42:	ea 01       	movw	r28, r20
   17e44:	4c 01       	movw	r8, r24
   17e46:	ee 24       	eor	r14, r14
   17e48:	e3 94       	inc	r14
   17e4a:	f1 2c       	mov	r15, r1
   17e4c:	00 e0       	ldi	r16, 0x00	; 0
   17e4e:	10 e0       	ldi	r17, 0x00	; 0
   17e50:	0c 17       	cp	r16, r28
   17e52:	1d 07       	cpc	r17, r29
   17e54:	6c f4       	brge	.+26     	; 0x17e70 <lif_B2S+0x3e>
   17e56:	f4 01       	movw	r30, r8
   17e58:	81 91       	ld	r24, Z+
   17e5a:	4f 01       	movw	r8, r30
   17e5c:	b8 01       	movw	r22, r16
   17e5e:	90 e0       	ldi	r25, 0x00	; 0
   17e60:	bd df       	rcall	.-134    	; 0x17ddc <lif_chars>
   17e62:	89 2b       	or	r24, r25
   17e64:	11 f4       	brne	.+4      	; 0x17e6a <lif_B2S+0x38>
   17e66:	e1 2c       	mov	r14, r1
   17e68:	f1 2c       	mov	r15, r1
   17e6a:	0f 5f       	subi	r16, 0xFF	; 255
   17e6c:	1f 4f       	sbci	r17, 0xFF	; 255
   17e6e:	f0 cf       	rjmp	.-32     	; 0x17e50 <lif_B2S+0x1e>
   17e70:	d6 01       	movw	r26, r12
   17e72:	f5 01       	movw	r30, r10
   17e74:	cf 01       	movw	r24, r30
   17e76:	8a 19       	sub	r24, r10
   17e78:	9b 09       	sbc	r25, r11
   17e7a:	8c 17       	cp	r24, r28
   17e7c:	9d 07       	cpc	r25, r29
   17e7e:	1c f4       	brge	.+6      	; 0x17e86 <lif_B2S+0x54>
   17e80:	81 91       	ld	r24, Z+
   17e82:	8d 93       	st	X+, r24
   17e84:	f7 cf       	rjmp	.-18     	; 0x17e74 <lif_B2S+0x42>
   17e86:	d7 ff       	sbrs	r29, 7
   17e88:	02 c0       	rjmp	.+4      	; 0x17e8e <lif_B2S+0x5c>
   17e8a:	c0 e0       	ldi	r28, 0x00	; 0
   17e8c:	d0 e0       	ldi	r29, 0x00	; 0
   17e8e:	cc 0d       	add	r28, r12
   17e90:	dd 1d       	adc	r29, r13
   17e92:	18 82       	st	Y, r1
   17e94:	c6 01       	movw	r24, r12
   17e96:	0e 94 71 30 	call	0x60e2	; 0x60e2 <trim_tail>
   17e9a:	c7 01       	movw	r24, r14
   17e9c:	cd b7       	in	r28, 0x3d	; 61
   17e9e:	de b7       	in	r29, 0x3e	; 62
   17ea0:	ec e0       	ldi	r30, 0x0C	; 12
   17ea2:	0c 94 2b e3 	jmp	0x1c656	; 0x1c656 <__epilogue_restores__+0xc>

00017ea6 <lif_checkname>:
   17ea6:	ef 92       	push	r14
   17ea8:	ff 92       	push	r15
   17eaa:	0f 93       	push	r16
   17eac:	1f 93       	push	r17
   17eae:	cf 93       	push	r28
   17eb0:	df 93       	push	r29
   17eb2:	7c 01       	movw	r14, r24
   17eb4:	ec 01       	movw	r28, r24
   17eb6:	01 e0       	ldi	r16, 0x01	; 1
   17eb8:	10 e0       	ldi	r17, 0x00	; 0
   17eba:	be 01       	movw	r22, r28
   17ebc:	6e 19       	sub	r22, r14
   17ebe:	7f 09       	sbc	r23, r15
   17ec0:	89 91       	ld	r24, Y+
   17ec2:	88 23       	and	r24, r24
   17ec4:	39 f0       	breq	.+14     	; 0x17ed4 <lif_checkname+0x2e>
   17ec6:	90 e0       	ldi	r25, 0x00	; 0
   17ec8:	89 df       	rcall	.-238    	; 0x17ddc <lif_chars>
   17eca:	89 2b       	or	r24, r25
   17ecc:	b1 f7       	brne	.-20     	; 0x17eba <lif_checkname+0x14>
   17ece:	00 e0       	ldi	r16, 0x00	; 0
   17ed0:	10 e0       	ldi	r17, 0x00	; 0
   17ed2:	f3 cf       	rjmp	.-26     	; 0x17eba <lif_checkname+0x14>
   17ed4:	c8 01       	movw	r24, r16
   17ed6:	cd b7       	in	r28, 0x3d	; 61
   17ed8:	de b7       	in	r29, 0x3e	; 62
   17eda:	e6 e0       	ldi	r30, 0x06	; 6
   17edc:	0c 94 31 e3 	jmp	0x1c662	; 0x1c662 <__epilogue_restores__+0x18>

00017ee0 <lif_S2B>:
   17ee0:	fb 01       	movw	r30, r22
   17ee2:	dc 01       	movw	r26, r24
   17ee4:	20 e0       	ldi	r18, 0x00	; 0
   17ee6:	30 e0       	ldi	r19, 0x00	; 0
   17ee8:	61 91       	ld	r22, Z+
   17eea:	61 11       	cpse	r22, r1
   17eec:	05 c0       	rjmp	.+10     	; 0x17ef8 <lif_S2B+0x18>
   17eee:	fc 01       	movw	r30, r24
   17ef0:	e2 0f       	add	r30, r18
   17ef2:	f3 1f       	adc	r31, r19
   17ef4:	60 e2       	ldi	r22, 0x20	; 32
   17ef6:	08 c0       	rjmp	.+16     	; 0x17f08 <lif_S2B+0x28>
   17ef8:	24 17       	cp	r18, r20
   17efa:	35 07       	cpc	r19, r21
   17efc:	24 f4       	brge	.+8      	; 0x17f06 <lif_S2B+0x26>
   17efe:	6d 93       	st	X+, r22
   17f00:	2f 5f       	subi	r18, 0xFF	; 255
   17f02:	3f 4f       	sbci	r19, 0xFF	; 255
   17f04:	f1 cf       	rjmp	.-30     	; 0x17ee8 <lif_S2B+0x8>
   17f06:	08 95       	ret
   17f08:	9f 01       	movw	r18, r30
   17f0a:	28 1b       	sub	r18, r24
   17f0c:	39 0b       	sbc	r19, r25
   17f0e:	24 17       	cp	r18, r20
   17f10:	35 07       	cpc	r19, r21
   17f12:	14 f4       	brge	.+4      	; 0x17f18 <lif_S2B+0x38>
   17f14:	61 93       	st	Z+, r22
   17f16:	f8 cf       	rjmp	.-16     	; 0x17f08 <lif_S2B+0x28>
   17f18:	08 95       	ret

00017f1a <lif_fixname>:
   17f1a:	a0 e0       	ldi	r26, 0x00	; 0
   17f1c:	b0 e0       	ldi	r27, 0x00	; 0
   17f1e:	e3 e9       	ldi	r30, 0x93	; 147
   17f20:	ff eb       	ldi	r31, 0xBF	; 191
   17f22:	0c 94 12 e3 	jmp	0x1c624	; 0x1c624 <__prologue_saves__+0x12>
   17f26:	8c 01       	movw	r16, r24
   17f28:	cb 01       	movw	r24, r22
   17f2a:	7a 01       	movw	r14, r20
   17f2c:	0e 94 5c 75 	call	0xeab8	; 0xeab8 <basename>
   17f30:	6c 01       	movw	r12, r24
   17f32:	e8 01       	movw	r28, r16
   17f34:	80 e2       	ldi	r24, 0x20	; 32
   17f36:	b8 2e       	mov	r11, r24
   17f38:	be 01       	movw	r22, r28
   17f3a:	60 1b       	sub	r22, r16
   17f3c:	71 0b       	sbc	r23, r17
   17f3e:	f6 01       	movw	r30, r12
   17f40:	81 91       	ld	r24, Z+
   17f42:	6f 01       	movw	r12, r30
   17f44:	81 11       	cpse	r24, r1
   17f46:	02 c0       	rjmp	.+4      	; 0x17f4c <lif_fixname+0x32>
   17f48:	20 e2       	ldi	r18, 0x20	; 32
   17f4a:	0e c0       	rjmp	.+28     	; 0x17f68 <lif_fixname+0x4e>
   17f4c:	1e 14       	cp	r1, r14
   17f4e:	1f 04       	cpc	r1, r15
   17f50:	dc f7       	brge	.-10     	; 0x17f48 <lif_fixname+0x2e>
   17f52:	8e 32       	cpi	r24, 0x2E	; 46
   17f54:	c9 f3       	breq	.-14     	; 0x17f48 <lif_fixname+0x2e>
   17f56:	90 e0       	ldi	r25, 0x00	; 0
   17f58:	41 df       	rcall	.-382    	; 0x17ddc <lif_chars>
   17f5a:	88 23       	and	r24, r24
   17f5c:	11 f0       	breq	.+4      	; 0x17f62 <lif_fixname+0x48>
   17f5e:	88 83       	st	Y, r24
   17f60:	01 c0       	rjmp	.+2      	; 0x17f64 <lif_fixname+0x4a>
   17f62:	b8 82       	st	Y, r11
   17f64:	21 96       	adiw	r28, 0x01	; 1
   17f66:	e8 cf       	rjmp	.-48     	; 0x17f38 <lif_fixname+0x1e>
   17f68:	ce 01       	movw	r24, r28
   17f6a:	80 1b       	sub	r24, r16
   17f6c:	91 0b       	sbc	r25, r17
   17f6e:	8e 15       	cp	r24, r14
   17f70:	9f 05       	cpc	r25, r15
   17f72:	14 f4       	brge	.+4      	; 0x17f78 <lif_fixname+0x5e>
   17f74:	29 93       	st	Y+, r18
   17f76:	f8 cf       	rjmp	.-16     	; 0x17f68 <lif_fixname+0x4e>
   17f78:	18 82       	st	Y, r1
   17f7a:	f8 01       	movw	r30, r16
   17f7c:	01 90       	ld	r0, Z+
   17f7e:	00 20       	and	r0, r0
   17f80:	e9 f7       	brne	.-6      	; 0x17f7c <lif_fixname+0x62>
   17f82:	cf 01       	movw	r24, r30
   17f84:	01 97       	sbiw	r24, 0x01	; 1
   17f86:	80 1b       	sub	r24, r16
   17f88:	91 0b       	sbc	r25, r17
   17f8a:	cd b7       	in	r28, 0x3d	; 61
   17f8c:	de b7       	in	r29, 0x3e	; 62
   17f8e:	e9 e0       	ldi	r30, 0x09	; 9
   17f90:	0c 94 2e e3 	jmp	0x1c65c	; 0x1c65c <__epilogue_restores__+0x12>

00017f94 <lif_vol2str>:
   17f94:	ef 92       	push	r14
   17f96:	ff 92       	push	r15
   17f98:	0f 93       	push	r16
   17f9a:	1f 93       	push	r17
   17f9c:	cf 93       	push	r28
   17f9e:	df 93       	push	r29
   17fa0:	7c 01       	movw	r14, r24
   17fa2:	eb 01       	movw	r28, r22
   17fa4:	fc 01       	movw	r30, r24
   17fa6:	04 a1       	ldd	r16, Z+36	; 0x24
   17fa8:	15 a1       	ldd	r17, Z+37	; 0x25
   17faa:	20 e0       	ldi	r18, 0x00	; 0
   17fac:	30 e0       	ldi	r19, 0x00	; 0
   17fae:	42 e0       	ldi	r20, 0x02	; 2
   17fb0:	50 e0       	ldi	r21, 0x00	; 0
   17fb2:	60 e0       	ldi	r22, 0x00	; 0
   17fb4:	70 e0       	ldi	r23, 0x00	; 0
   17fb6:	ce 01       	movw	r24, r28
   17fb8:	e4 dc       	rcall	.-1592   	; 0x17982 <V2B_MSB>
   17fba:	b7 01       	movw	r22, r14
   17fbc:	6a 5d       	subi	r22, 0xDA	; 218
   17fbe:	7f 4f       	sbci	r23, 0xFF	; 255
   17fc0:	46 e0       	ldi	r20, 0x06	; 6
   17fc2:	50 e0       	ldi	r21, 0x00	; 0
   17fc4:	ce 01       	movw	r24, r28
   17fc6:	02 96       	adiw	r24, 0x02	; 2
   17fc8:	8b df       	rcall	.-234    	; 0x17ee0 <lif_S2B>
   17fca:	f7 01       	movw	r30, r14
   17fcc:	05 a5       	ldd	r16, Z+45	; 0x2d
   17fce:	16 a5       	ldd	r17, Z+46	; 0x2e
   17fd0:	27 a5       	ldd	r18, Z+47	; 0x2f
   17fd2:	30 a9       	ldd	r19, Z+48	; 0x30
   17fd4:	44 e0       	ldi	r20, 0x04	; 4
   17fd6:	50 e0       	ldi	r21, 0x00	; 0
   17fd8:	68 e0       	ldi	r22, 0x08	; 8
   17fda:	70 e0       	ldi	r23, 0x00	; 0
   17fdc:	ce 01       	movw	r24, r28
   17fde:	d1 dc       	rcall	.-1630   	; 0x17982 <V2B_MSB>
   17fe0:	f7 01       	movw	r30, r14
   17fe2:	01 a9       	ldd	r16, Z+49	; 0x31
   17fe4:	12 a9       	ldd	r17, Z+50	; 0x32
   17fe6:	20 e0       	ldi	r18, 0x00	; 0
   17fe8:	30 e0       	ldi	r19, 0x00	; 0
   17fea:	42 e0       	ldi	r20, 0x02	; 2
   17fec:	50 e0       	ldi	r21, 0x00	; 0
   17fee:	6c e0       	ldi	r22, 0x0C	; 12
   17ff0:	70 e0       	ldi	r23, 0x00	; 0
   17ff2:	ce 01       	movw	r24, r28
   17ff4:	c6 dc       	rcall	.-1652   	; 0x17982 <V2B_MSB>
   17ff6:	00 e0       	ldi	r16, 0x00	; 0
   17ff8:	10 e0       	ldi	r17, 0x00	; 0
   17ffa:	98 01       	movw	r18, r16
   17ffc:	42 e0       	ldi	r20, 0x02	; 2
   17ffe:	50 e0       	ldi	r21, 0x00	; 0
   18000:	6e e0       	ldi	r22, 0x0E	; 14
   18002:	70 e0       	ldi	r23, 0x00	; 0
   18004:	ce 01       	movw	r24, r28
   18006:	bd dc       	rcall	.-1670   	; 0x17982 <V2B_MSB>
   18008:	f7 01       	movw	r30, r14
   1800a:	05 a9       	ldd	r16, Z+53	; 0x35
   1800c:	16 a9       	ldd	r17, Z+54	; 0x36
   1800e:	27 a9       	ldd	r18, Z+55	; 0x37
   18010:	30 ad       	ldd	r19, Z+56	; 0x38
   18012:	44 e0       	ldi	r20, 0x04	; 4
   18014:	50 e0       	ldi	r21, 0x00	; 0
   18016:	60 e1       	ldi	r22, 0x10	; 16
   18018:	70 e0       	ldi	r23, 0x00	; 0
   1801a:	ce 01       	movw	r24, r28
   1801c:	b2 dc       	rcall	.-1692   	; 0x17982 <V2B_MSB>
   1801e:	f7 01       	movw	r30, r14
   18020:	01 ad       	ldd	r16, Z+57	; 0x39
   18022:	12 ad       	ldd	r17, Z+58	; 0x3a
   18024:	20 e0       	ldi	r18, 0x00	; 0
   18026:	30 e0       	ldi	r19, 0x00	; 0
   18028:	42 e0       	ldi	r20, 0x02	; 2
   1802a:	50 e0       	ldi	r21, 0x00	; 0
   1802c:	64 e1       	ldi	r22, 0x14	; 20
   1802e:	70 e0       	ldi	r23, 0x00	; 0
   18030:	ce 01       	movw	r24, r28
   18032:	a7 dc       	rcall	.-1714   	; 0x17982 <V2B_MSB>
   18034:	00 e0       	ldi	r16, 0x00	; 0
   18036:	10 e0       	ldi	r17, 0x00	; 0
   18038:	98 01       	movw	r18, r16
   1803a:	42 e0       	ldi	r20, 0x02	; 2
   1803c:	50 e0       	ldi	r21, 0x00	; 0
   1803e:	66 e1       	ldi	r22, 0x16	; 22
   18040:	70 e0       	ldi	r23, 0x00	; 0
   18042:	ce 01       	movw	r24, r28
   18044:	9e dc       	rcall	.-1732   	; 0x17982 <V2B_MSB>
   18046:	f7 01       	movw	r30, r14
   18048:	fd 96       	adiw	r30, 0x3d	; 61
   1804a:	00 81       	ld	r16, Z
   1804c:	11 81       	ldd	r17, Z+1	; 0x01
   1804e:	22 81       	ldd	r18, Z+2	; 0x02
   18050:	33 81       	ldd	r19, Z+3	; 0x03
   18052:	44 e0       	ldi	r20, 0x04	; 4
   18054:	50 e0       	ldi	r21, 0x00	; 0
   18056:	68 e1       	ldi	r22, 0x18	; 24
   18058:	70 e0       	ldi	r23, 0x00	; 0
   1805a:	ce 01       	movw	r24, r28
   1805c:	92 dc       	rcall	.-1756   	; 0x17982 <V2B_MSB>
   1805e:	f7 01       	movw	r30, r14
   18060:	ef 5b       	subi	r30, 0xBF	; 191
   18062:	ff 4f       	sbci	r31, 0xFF	; 255
   18064:	00 81       	ld	r16, Z
   18066:	11 81       	ldd	r17, Z+1	; 0x01
   18068:	22 81       	ldd	r18, Z+2	; 0x02
   1806a:	33 81       	ldd	r19, Z+3	; 0x03
   1806c:	44 e0       	ldi	r20, 0x04	; 4
   1806e:	50 e0       	ldi	r21, 0x00	; 0
   18070:	6c e1       	ldi	r22, 0x1C	; 28
   18072:	70 e0       	ldi	r23, 0x00	; 0
   18074:	ce 01       	movw	r24, r28
   18076:	85 dc       	rcall	.-1782   	; 0x17982 <V2B_MSB>
   18078:	f7 01       	movw	r30, r14
   1807a:	eb 5b       	subi	r30, 0xBB	; 187
   1807c:	ff 4f       	sbci	r31, 0xFF	; 255
   1807e:	00 81       	ld	r16, Z
   18080:	11 81       	ldd	r17, Z+1	; 0x01
   18082:	22 81       	ldd	r18, Z+2	; 0x02
   18084:	33 81       	ldd	r19, Z+3	; 0x03
   18086:	44 e0       	ldi	r20, 0x04	; 4
   18088:	50 e0       	ldi	r21, 0x00	; 0
   1808a:	60 e2       	ldi	r22, 0x20	; 32
   1808c:	70 e0       	ldi	r23, 0x00	; 0
   1808e:	ce 01       	movw	r24, r28
   18090:	78 dc       	rcall	.-1808   	; 0x17982 <V2B_MSB>
   18092:	de 01       	movw	r26, r28
   18094:	94 96       	adiw	r26, 0x24	; 36
   18096:	f7 01       	movw	r30, r14
   18098:	e7 5b       	subi	r30, 0xB7	; 183
   1809a:	ff 4f       	sbci	r31, 0xFF	; 255
   1809c:	86 e0       	ldi	r24, 0x06	; 6
   1809e:	01 90       	ld	r0, Z+
   180a0:	0d 92       	st	X+, r0
   180a2:	8a 95       	dec	r24
   180a4:	e1 f7       	brne	.-8      	; 0x1809e <lif_vol2str+0x10a>
   180a6:	cd b7       	in	r28, 0x3d	; 61
   180a8:	de b7       	in	r29, 0x3e	; 62
   180aa:	e6 e0       	ldi	r30, 0x06	; 6
   180ac:	0c 94 31 e3 	jmp	0x1c662	; 0x1c662 <__epilogue_restores__+0x18>

000180b0 <lif_str2vol>:
   180b0:	0f 93       	push	r16
   180b2:	1f 93       	push	r17
   180b4:	cf 93       	push	r28
   180b6:	df 93       	push	r29
   180b8:	8c 01       	movw	r16, r24
   180ba:	eb 01       	movw	r28, r22
   180bc:	42 e0       	ldi	r20, 0x02	; 2
   180be:	50 e0       	ldi	r21, 0x00	; 0
   180c0:	60 e0       	ldi	r22, 0x00	; 0
   180c2:	70 e0       	ldi	r23, 0x00	; 0
   180c4:	87 dc       	rcall	.-1778   	; 0x179d4 <B2V_MSB>
   180c6:	7d a3       	std	Y+37, r23	; 0x25
   180c8:	6c a3       	std	Y+36, r22	; 0x24
   180ca:	be 01       	movw	r22, r28
   180cc:	6a 5d       	subi	r22, 0xDA	; 218
   180ce:	7f 4f       	sbci	r23, 0xFF	; 255
   180d0:	46 e0       	ldi	r20, 0x06	; 6
   180d2:	50 e0       	ldi	r21, 0x00	; 0
   180d4:	c8 01       	movw	r24, r16
   180d6:	02 96       	adiw	r24, 0x02	; 2
   180d8:	ac de       	rcall	.-680    	; 0x17e32 <lif_B2S>
   180da:	44 e0       	ldi	r20, 0x04	; 4
   180dc:	50 e0       	ldi	r21, 0x00	; 0
   180de:	68 e0       	ldi	r22, 0x08	; 8
   180e0:	70 e0       	ldi	r23, 0x00	; 0
   180e2:	c8 01       	movw	r24, r16
   180e4:	77 dc       	rcall	.-1810   	; 0x179d4 <B2V_MSB>
   180e6:	6d a7       	std	Y+45, r22	; 0x2d
   180e8:	7e a7       	std	Y+46, r23	; 0x2e
   180ea:	8f a7       	std	Y+47, r24	; 0x2f
   180ec:	98 ab       	std	Y+48, r25	; 0x30
   180ee:	42 e0       	ldi	r20, 0x02	; 2
   180f0:	50 e0       	ldi	r21, 0x00	; 0
   180f2:	6c e0       	ldi	r22, 0x0C	; 12
   180f4:	70 e0       	ldi	r23, 0x00	; 0
   180f6:	c8 01       	movw	r24, r16
   180f8:	6d dc       	rcall	.-1830   	; 0x179d4 <B2V_MSB>
   180fa:	7a ab       	std	Y+50, r23	; 0x32
   180fc:	69 ab       	std	Y+49, r22	; 0x31
   180fe:	42 e0       	ldi	r20, 0x02	; 2
   18100:	50 e0       	ldi	r21, 0x00	; 0
   18102:	6e e0       	ldi	r22, 0x0E	; 14
   18104:	70 e0       	ldi	r23, 0x00	; 0
   18106:	c8 01       	movw	r24, r16
   18108:	65 dc       	rcall	.-1846   	; 0x179d4 <B2V_MSB>
   1810a:	7c ab       	std	Y+52, r23	; 0x34
   1810c:	6b ab       	std	Y+51, r22	; 0x33
   1810e:	44 e0       	ldi	r20, 0x04	; 4
   18110:	50 e0       	ldi	r21, 0x00	; 0
   18112:	60 e1       	ldi	r22, 0x10	; 16
   18114:	70 e0       	ldi	r23, 0x00	; 0
   18116:	c8 01       	movw	r24, r16
   18118:	5d dc       	rcall	.-1862   	; 0x179d4 <B2V_MSB>
   1811a:	6d ab       	std	Y+53, r22	; 0x35
   1811c:	7e ab       	std	Y+54, r23	; 0x36
   1811e:	8f ab       	std	Y+55, r24	; 0x37
   18120:	98 af       	std	Y+56, r25	; 0x38
   18122:	42 e0       	ldi	r20, 0x02	; 2
   18124:	50 e0       	ldi	r21, 0x00	; 0
   18126:	64 e1       	ldi	r22, 0x14	; 20
   18128:	70 e0       	ldi	r23, 0x00	; 0
   1812a:	c8 01       	movw	r24, r16
   1812c:	53 dc       	rcall	.-1882   	; 0x179d4 <B2V_MSB>
   1812e:	7a af       	std	Y+58, r23	; 0x3a
   18130:	69 af       	std	Y+57, r22	; 0x39
   18132:	42 e0       	ldi	r20, 0x02	; 2
   18134:	50 e0       	ldi	r21, 0x00	; 0
   18136:	66 e1       	ldi	r22, 0x16	; 22
   18138:	70 e0       	ldi	r23, 0x00	; 0
   1813a:	c8 01       	movw	r24, r16
   1813c:	4b dc       	rcall	.-1898   	; 0x179d4 <B2V_MSB>
   1813e:	7c af       	std	Y+60, r23	; 0x3c
   18140:	6b af       	std	Y+59, r22	; 0x3b
   18142:	44 e0       	ldi	r20, 0x04	; 4
   18144:	50 e0       	ldi	r21, 0x00	; 0
   18146:	68 e1       	ldi	r22, 0x18	; 24
   18148:	70 e0       	ldi	r23, 0x00	; 0
   1814a:	c8 01       	movw	r24, r16
   1814c:	43 dc       	rcall	.-1914   	; 0x179d4 <B2V_MSB>
   1814e:	fe 01       	movw	r30, r28
   18150:	fd 96       	adiw	r30, 0x3d	; 61
   18152:	60 83       	st	Z, r22
   18154:	71 83       	std	Z+1, r23	; 0x01
   18156:	82 83       	std	Z+2, r24	; 0x02
   18158:	93 83       	std	Z+3, r25	; 0x03
   1815a:	44 e0       	ldi	r20, 0x04	; 4
   1815c:	50 e0       	ldi	r21, 0x00	; 0
   1815e:	6c e1       	ldi	r22, 0x1C	; 28
   18160:	70 e0       	ldi	r23, 0x00	; 0
   18162:	c8 01       	movw	r24, r16
   18164:	37 dc       	rcall	.-1938   	; 0x179d4 <B2V_MSB>
   18166:	fe 01       	movw	r30, r28
   18168:	ef 5b       	subi	r30, 0xBF	; 191
   1816a:	ff 4f       	sbci	r31, 0xFF	; 255
   1816c:	60 83       	st	Z, r22
   1816e:	71 83       	std	Z+1, r23	; 0x01
   18170:	82 83       	std	Z+2, r24	; 0x02
   18172:	93 83       	std	Z+3, r25	; 0x03
   18174:	44 e0       	ldi	r20, 0x04	; 4
   18176:	50 e0       	ldi	r21, 0x00	; 0
   18178:	60 e2       	ldi	r22, 0x20	; 32
   1817a:	70 e0       	ldi	r23, 0x00	; 0
   1817c:	c8 01       	movw	r24, r16
   1817e:	2a dc       	rcall	.-1964   	; 0x179d4 <B2V_MSB>
   18180:	fe 01       	movw	r30, r28
   18182:	eb 5b       	subi	r30, 0xBB	; 187
   18184:	ff 4f       	sbci	r31, 0xFF	; 255
   18186:	60 83       	st	Z, r22
   18188:	71 83       	std	Z+1, r23	; 0x01
   1818a:	82 83       	std	Z+2, r24	; 0x02
   1818c:	93 83       	std	Z+3, r25	; 0x03
   1818e:	de 01       	movw	r26, r28
   18190:	a7 5b       	subi	r26, 0xB7	; 183
   18192:	bf 4f       	sbci	r27, 0xFF	; 255
   18194:	f8 01       	movw	r30, r16
   18196:	b4 96       	adiw	r30, 0x24	; 36
   18198:	86 e0       	ldi	r24, 0x06	; 6
   1819a:	01 90       	ld	r0, Z+
   1819c:	0d 92       	st	X+, r0
   1819e:	8a 95       	dec	r24
   181a0:	e1 f7       	brne	.-8      	; 0x1819a <lif_str2vol+0xea>
   181a2:	df 91       	pop	r29
   181a4:	cf 91       	pop	r28
   181a6:	1f 91       	pop	r17
   181a8:	0f 91       	pop	r16
   181aa:	08 95       	ret

000181ac <lif_dir2str>:
   181ac:	ef 92       	push	r14
   181ae:	ff 92       	push	r15
   181b0:	0f 93       	push	r16
   181b2:	1f 93       	push	r17
   181b4:	cf 93       	push	r28
   181b6:	df 93       	push	r29
   181b8:	ec 01       	movw	r28, r24
   181ba:	7b 01       	movw	r14, r22
   181bc:	bc 01       	movw	r22, r24
   181be:	61 5b       	subi	r22, 0xB1	; 177
   181c0:	7f 4f       	sbci	r23, 0xFF	; 255
   181c2:	4a e0       	ldi	r20, 0x0A	; 10
   181c4:	50 e0       	ldi	r21, 0x00	; 0
   181c6:	c7 01       	movw	r24, r14
   181c8:	8b de       	rcall	.-746    	; 0x17ee0 <lif_S2B>
   181ca:	fe 01       	movw	r30, r28
   181cc:	e6 5a       	subi	r30, 0xA6	; 166
   181ce:	ff 4f       	sbci	r31, 0xFF	; 255
   181d0:	00 81       	ld	r16, Z
   181d2:	11 81       	ldd	r17, Z+1	; 0x01
   181d4:	20 e0       	ldi	r18, 0x00	; 0
   181d6:	30 e0       	ldi	r19, 0x00	; 0
   181d8:	42 e0       	ldi	r20, 0x02	; 2
   181da:	50 e0       	ldi	r21, 0x00	; 0
   181dc:	6a e0       	ldi	r22, 0x0A	; 10
   181de:	70 e0       	ldi	r23, 0x00	; 0
   181e0:	c7 01       	movw	r24, r14
   181e2:	cf db       	rcall	.-2146   	; 0x17982 <V2B_MSB>
   181e4:	fe 01       	movw	r30, r28
   181e6:	e4 5a       	subi	r30, 0xA4	; 164
   181e8:	ff 4f       	sbci	r31, 0xFF	; 255
   181ea:	00 81       	ld	r16, Z
   181ec:	11 81       	ldd	r17, Z+1	; 0x01
   181ee:	22 81       	ldd	r18, Z+2	; 0x02
   181f0:	33 81       	ldd	r19, Z+3	; 0x03
   181f2:	44 e0       	ldi	r20, 0x04	; 4
   181f4:	50 e0       	ldi	r21, 0x00	; 0
   181f6:	6c e0       	ldi	r22, 0x0C	; 12
   181f8:	70 e0       	ldi	r23, 0x00	; 0
   181fa:	c7 01       	movw	r24, r14
   181fc:	c2 db       	rcall	.-2172   	; 0x17982 <V2B_MSB>
   181fe:	fe 01       	movw	r30, r28
   18200:	e0 5a       	subi	r30, 0xA0	; 160
   18202:	ff 4f       	sbci	r31, 0xFF	; 255
   18204:	00 81       	ld	r16, Z
   18206:	11 81       	ldd	r17, Z+1	; 0x01
   18208:	22 81       	ldd	r18, Z+2	; 0x02
   1820a:	33 81       	ldd	r19, Z+3	; 0x03
   1820c:	44 e0       	ldi	r20, 0x04	; 4
   1820e:	50 e0       	ldi	r21, 0x00	; 0
   18210:	60 e1       	ldi	r22, 0x10	; 16
   18212:	70 e0       	ldi	r23, 0x00	; 0
   18214:	c7 01       	movw	r24, r14
   18216:	b5 db       	rcall	.-2198   	; 0x17982 <V2B_MSB>
   18218:	d7 01       	movw	r26, r14
   1821a:	54 96       	adiw	r26, 0x14	; 20
   1821c:	fe 01       	movw	r30, r28
   1821e:	ec 59       	subi	r30, 0x9C	; 156
   18220:	ff 4f       	sbci	r31, 0xFF	; 255
   18222:	86 e0       	ldi	r24, 0x06	; 6
   18224:	01 90       	ld	r0, Z+
   18226:	0d 92       	st	X+, r0
   18228:	8a 95       	dec	r24
   1822a:	e1 f7       	brne	.-8      	; 0x18224 <lif_dir2str+0x78>
   1822c:	fe 01       	movw	r30, r28
   1822e:	e6 59       	subi	r30, 0x96	; 150
   18230:	ff 4f       	sbci	r31, 0xFF	; 255
   18232:	00 81       	ld	r16, Z
   18234:	11 81       	ldd	r17, Z+1	; 0x01
   18236:	20 e0       	ldi	r18, 0x00	; 0
   18238:	30 e0       	ldi	r19, 0x00	; 0
   1823a:	42 e0       	ldi	r20, 0x02	; 2
   1823c:	50 e0       	ldi	r21, 0x00	; 0
   1823e:	6a e1       	ldi	r22, 0x1A	; 26
   18240:	70 e0       	ldi	r23, 0x00	; 0
   18242:	c7 01       	movw	r24, r14
   18244:	9e db       	rcall	.-2244   	; 0x17982 <V2B_MSB>
   18246:	fe 01       	movw	r30, r28
   18248:	e4 59       	subi	r30, 0x94	; 148
   1824a:	ff 4f       	sbci	r31, 0xFF	; 255
   1824c:	00 81       	ld	r16, Z
   1824e:	11 81       	ldd	r17, Z+1	; 0x01
   18250:	20 e0       	ldi	r18, 0x00	; 0
   18252:	30 e0       	ldi	r19, 0x00	; 0
   18254:	42 e0       	ldi	r20, 0x02	; 2
   18256:	50 e0       	ldi	r21, 0x00	; 0
   18258:	6c e1       	ldi	r22, 0x1C	; 28
   1825a:	70 e0       	ldi	r23, 0x00	; 0
   1825c:	c7 01       	movw	r24, r14
   1825e:	a5 db       	rcall	.-2230   	; 0x179aa <V2B_LSB>
   18260:	c2 59       	subi	r28, 0x92	; 146
   18262:	df 4f       	sbci	r29, 0xFF	; 255
   18264:	08 81       	ld	r16, Y
   18266:	19 81       	ldd	r17, Y+1	; 0x01
   18268:	20 e0       	ldi	r18, 0x00	; 0
   1826a:	30 e0       	ldi	r19, 0x00	; 0
   1826c:	42 e0       	ldi	r20, 0x02	; 2
   1826e:	50 e0       	ldi	r21, 0x00	; 0
   18270:	6e e1       	ldi	r22, 0x1E	; 30
   18272:	70 e0       	ldi	r23, 0x00	; 0
   18274:	c7 01       	movw	r24, r14
   18276:	99 db       	rcall	.-2254   	; 0x179aa <V2B_LSB>
   18278:	cd b7       	in	r28, 0x3d	; 61
   1827a:	de b7       	in	r29, 0x3e	; 62
   1827c:	e6 e0       	ldi	r30, 0x06	; 6
   1827e:	0c 94 31 e3 	jmp	0x1c662	; 0x1c662 <__epilogue_restores__+0x18>

00018282 <lif_str2dir>:
   18282:	0f 93       	push	r16
   18284:	1f 93       	push	r17
   18286:	cf 93       	push	r28
   18288:	df 93       	push	r29
   1828a:	8c 01       	movw	r16, r24
   1828c:	eb 01       	movw	r28, r22
   1828e:	61 5b       	subi	r22, 0xB1	; 177
   18290:	7f 4f       	sbci	r23, 0xFF	; 255
   18292:	4a e0       	ldi	r20, 0x0A	; 10
   18294:	50 e0       	ldi	r21, 0x00	; 0
   18296:	cd dd       	rcall	.-1126   	; 0x17e32 <lif_B2S>
   18298:	42 e0       	ldi	r20, 0x02	; 2
   1829a:	50 e0       	ldi	r21, 0x00	; 0
   1829c:	6a e0       	ldi	r22, 0x0A	; 10
   1829e:	70 e0       	ldi	r23, 0x00	; 0
   182a0:	c8 01       	movw	r24, r16
   182a2:	98 db       	rcall	.-2256   	; 0x179d4 <B2V_MSB>
   182a4:	fe 01       	movw	r30, r28
   182a6:	e6 5a       	subi	r30, 0xA6	; 166
   182a8:	ff 4f       	sbci	r31, 0xFF	; 255
   182aa:	71 83       	std	Z+1, r23	; 0x01
   182ac:	60 83       	st	Z, r22
   182ae:	44 e0       	ldi	r20, 0x04	; 4
   182b0:	50 e0       	ldi	r21, 0x00	; 0
   182b2:	6c e0       	ldi	r22, 0x0C	; 12
   182b4:	70 e0       	ldi	r23, 0x00	; 0
   182b6:	c8 01       	movw	r24, r16
   182b8:	8d db       	rcall	.-2278   	; 0x179d4 <B2V_MSB>
   182ba:	fe 01       	movw	r30, r28
   182bc:	e4 5a       	subi	r30, 0xA4	; 164
   182be:	ff 4f       	sbci	r31, 0xFF	; 255
   182c0:	60 83       	st	Z, r22
   182c2:	71 83       	std	Z+1, r23	; 0x01
   182c4:	82 83       	std	Z+2, r24	; 0x02
   182c6:	93 83       	std	Z+3, r25	; 0x03
   182c8:	44 e0       	ldi	r20, 0x04	; 4
   182ca:	50 e0       	ldi	r21, 0x00	; 0
   182cc:	60 e1       	ldi	r22, 0x10	; 16
   182ce:	70 e0       	ldi	r23, 0x00	; 0
   182d0:	c8 01       	movw	r24, r16
   182d2:	80 db       	rcall	.-2304   	; 0x179d4 <B2V_MSB>
   182d4:	fe 01       	movw	r30, r28
   182d6:	e0 5a       	subi	r30, 0xA0	; 160
   182d8:	ff 4f       	sbci	r31, 0xFF	; 255
   182da:	60 83       	st	Z, r22
   182dc:	71 83       	std	Z+1, r23	; 0x01
   182de:	82 83       	std	Z+2, r24	; 0x02
   182e0:	93 83       	std	Z+3, r25	; 0x03
   182e2:	de 01       	movw	r26, r28
   182e4:	ac 59       	subi	r26, 0x9C	; 156
   182e6:	bf 4f       	sbci	r27, 0xFF	; 255
   182e8:	f8 01       	movw	r30, r16
   182ea:	74 96       	adiw	r30, 0x14	; 20
   182ec:	86 e0       	ldi	r24, 0x06	; 6
   182ee:	01 90       	ld	r0, Z+
   182f0:	0d 92       	st	X+, r0
   182f2:	8a 95       	dec	r24
   182f4:	e1 f7       	brne	.-8      	; 0x182ee <lif_str2dir+0x6c>
   182f6:	42 e0       	ldi	r20, 0x02	; 2
   182f8:	50 e0       	ldi	r21, 0x00	; 0
   182fa:	6a e1       	ldi	r22, 0x1A	; 26
   182fc:	70 e0       	ldi	r23, 0x00	; 0
   182fe:	c8 01       	movw	r24, r16
   18300:	69 db       	rcall	.-2350   	; 0x179d4 <B2V_MSB>
   18302:	fe 01       	movw	r30, r28
   18304:	e6 59       	subi	r30, 0x96	; 150
   18306:	ff 4f       	sbci	r31, 0xFF	; 255
   18308:	71 83       	std	Z+1, r23	; 0x01
   1830a:	60 83       	st	Z, r22
   1830c:	42 e0       	ldi	r20, 0x02	; 2
   1830e:	50 e0       	ldi	r21, 0x00	; 0
   18310:	6c e1       	ldi	r22, 0x1C	; 28
   18312:	70 e0       	ldi	r23, 0x00	; 0
   18314:	c8 01       	movw	r24, r16
   18316:	7d db       	rcall	.-2310   	; 0x17a12 <B2V_LSB>
   18318:	fe 01       	movw	r30, r28
   1831a:	e4 59       	subi	r30, 0x94	; 148
   1831c:	ff 4f       	sbci	r31, 0xFF	; 255
   1831e:	71 83       	std	Z+1, r23	; 0x01
   18320:	60 83       	st	Z, r22
   18322:	42 e0       	ldi	r20, 0x02	; 2
   18324:	50 e0       	ldi	r21, 0x00	; 0
   18326:	6e e1       	ldi	r22, 0x1E	; 30
   18328:	70 e0       	ldi	r23, 0x00	; 0
   1832a:	c8 01       	movw	r24, r16
   1832c:	72 db       	rcall	.-2332   	; 0x17a12 <B2V_LSB>
   1832e:	c2 59       	subi	r28, 0x92	; 146
   18330:	df 4f       	sbci	r29, 0xFF	; 255
   18332:	79 83       	std	Y+1, r23	; 0x01
   18334:	68 83       	st	Y, r22
   18336:	df 91       	pop	r29
   18338:	cf 91       	pop	r28
   1833a:	1f 91       	pop	r17
   1833c:	0f 91       	pop	r16
   1833e:	08 95       	ret

00018340 <lif_BIN2BCD>:
   18340:	6a e0       	ldi	r22, 0x0A	; 10
   18342:	0e 94 69 e2 	call	0x1c4d2	; 0x1c4d2 <__udivmodqi4>
   18346:	82 95       	swap	r24
   18348:	80 7f       	andi	r24, 0xF0	; 240
   1834a:	89 2b       	or	r24, r25
   1834c:	08 95       	ret

0001834e <lif_BCD2BIN>:
   1834e:	28 2f       	mov	r18, r24
   18350:	22 95       	swap	r18
   18352:	2f 70       	andi	r18, 0x0F	; 15
   18354:	8f 70       	andi	r24, 0x0F	; 15
   18356:	90 e0       	ldi	r25, 0x00	; 0
   18358:	3a e0       	ldi	r19, 0x0A	; 10
   1835a:	23 9f       	mul	r18, r19
   1835c:	80 0d       	add	r24, r0
   1835e:	91 1d       	adc	r25, r1
   18360:	11 24       	eor	r1, r1
   18362:	08 95       	ret

00018364 <lif_time2lifbcd>:
   18364:	aa e1       	ldi	r26, 0x1A	; 26
   18366:	b0 e0       	ldi	r27, 0x00	; 0
   18368:	e8 eb       	ldi	r30, 0xB8	; 184
   1836a:	f1 ec       	ldi	r31, 0xC1	; 193
   1836c:	0c 94 17 e3 	jmp	0x1c62e	; 0x1c62e <__prologue_saves__+0x1c>
   18370:	8b 01       	movw	r16, r22
   18372:	9c 01       	movw	r18, r24
   18374:	6f 8b       	std	Y+23, r22	; 0x17
   18376:	78 8f       	std	Y+24, r23	; 0x18
   18378:	89 8f       	std	Y+25, r24	; 0x19
   1837a:	9a 8f       	std	Y+26, r25	; 0x1a
   1837c:	67 2b       	or	r22, r23
   1837e:	68 2b       	or	r22, r24
   18380:	69 2b       	or	r22, r25
   18382:	41 f4       	brne	.+16     	; 0x18394 <lif_time2lifbcd+0x30>
   18384:	fa 01       	movw	r30, r20
   18386:	ca 01       	movw	r24, r20
   18388:	06 96       	adiw	r24, 0x06	; 6
   1838a:	11 92       	st	Z+, r1
   1838c:	e8 17       	cp	r30, r24
   1838e:	f9 07       	cpc	r31, r25
   18390:	e1 f7       	brne	.-8      	; 0x1838a <lif_time2lifbcd+0x26>
   18392:	26 c0       	rjmp	.+76     	; 0x183e0 <lif_time2lifbcd+0x7c>
   18394:	8a 01       	movw	r16, r20
   18396:	be 01       	movw	r22, r28
   18398:	6f 5f       	subi	r22, 0xFF	; 255
   1839a:	7f 4f       	sbci	r23, 0xFF	; 255
   1839c:	ce 01       	movw	r24, r28
   1839e:	47 96       	adiw	r24, 0x17	; 23
   183a0:	0e 94 e5 35 	call	0x6bca	; 0x6bca <gmtime_r>
   183a4:	8b 85       	ldd	r24, Y+11	; 0x0b
   183a6:	9c 85       	ldd	r25, Y+12	; 0x0c
   183a8:	64 e6       	ldi	r22, 0x64	; 100
   183aa:	70 e0       	ldi	r23, 0x00	; 0
   183ac:	0e 94 89 e2 	call	0x1c512	; 0x1c512 <__divmodhi4>
   183b0:	c7 df       	rcall	.-114    	; 0x18340 <lif_BIN2BCD>
   183b2:	f8 01       	movw	r30, r16
   183b4:	80 83       	st	Z, r24
   183b6:	89 85       	ldd	r24, Y+9	; 0x09
   183b8:	8f 5f       	subi	r24, 0xFF	; 255
   183ba:	c2 df       	rcall	.-124    	; 0x18340 <lif_BIN2BCD>
   183bc:	f8 01       	movw	r30, r16
   183be:	81 83       	std	Z+1, r24	; 0x01
   183c0:	8f 81       	ldd	r24, Y+7	; 0x07
   183c2:	be df       	rcall	.-132    	; 0x18340 <lif_BIN2BCD>
   183c4:	f8 01       	movw	r30, r16
   183c6:	82 83       	std	Z+2, r24	; 0x02
   183c8:	8d 81       	ldd	r24, Y+5	; 0x05
   183ca:	ba df       	rcall	.-140    	; 0x18340 <lif_BIN2BCD>
   183cc:	f8 01       	movw	r30, r16
   183ce:	83 83       	std	Z+3, r24	; 0x03
   183d0:	8b 81       	ldd	r24, Y+3	; 0x03
   183d2:	b6 df       	rcall	.-148    	; 0x18340 <lif_BIN2BCD>
   183d4:	f8 01       	movw	r30, r16
   183d6:	84 83       	std	Z+4, r24	; 0x04
   183d8:	89 81       	ldd	r24, Y+1	; 0x01
   183da:	b2 df       	rcall	.-156    	; 0x18340 <lif_BIN2BCD>
   183dc:	f8 01       	movw	r30, r16
   183de:	85 83       	std	Z+5, r24	; 0x05
   183e0:	6a 96       	adiw	r28, 0x1a	; 26
   183e2:	e4 e0       	ldi	r30, 0x04	; 4
   183e4:	0c 94 33 e3 	jmp	0x1c666	; 0x1c666 <__epilogue_restores__+0x1c>

000183e8 <lif_lifbcd2time>:
   183e8:	a6 e1       	ldi	r26, 0x16	; 22
   183ea:	b0 e0       	ldi	r27, 0x00	; 0
   183ec:	ea ef       	ldi	r30, 0xFA	; 250
   183ee:	f1 ec       	ldi	r31, 0xC1	; 193
   183f0:	0c 94 11 e3 	jmp	0x1c622	; 0x1c622 <__prologue_saves__+0x10>
   183f4:	8c 01       	movw	r16, r24
   183f6:	7c 01       	movw	r14, r24
   183f8:	5c 01       	movw	r10, r24
   183fa:	26 e0       	ldi	r18, 0x06	; 6
   183fc:	a2 0e       	add	r10, r18
   183fe:	b1 1c       	adc	r11, r1
   18400:	cc 24       	eor	r12, r12
   18402:	c3 94       	inc	r12
   18404:	d1 2c       	mov	r13, r1
   18406:	f7 01       	movw	r30, r14
   18408:	81 91       	ld	r24, Z+
   1840a:	7f 01       	movw	r14, r30
   1840c:	a0 df       	rcall	.-192    	; 0x1834e <lif_BCD2BIN>
   1840e:	89 2b       	or	r24, r25
   18410:	11 f0       	breq	.+4      	; 0x18416 <lif_lifbcd2time+0x2e>
   18412:	c1 2c       	mov	r12, r1
   18414:	d1 2c       	mov	r13, r1
   18416:	ea 14       	cp	r14, r10
   18418:	fb 04       	cpc	r15, r11
   1841a:	a9 f7       	brne	.-22     	; 0x18406 <lif_lifbcd2time+0x1e>
   1841c:	c1 14       	cp	r12, r1
   1841e:	d1 04       	cpc	r13, r1
   18420:	61 f5       	brne	.+88     	; 0x1847a <lif_lifbcd2time+0x92>
   18422:	f8 01       	movw	r30, r16
   18424:	80 81       	ld	r24, Z
   18426:	93 df       	rcall	.-218    	; 0x1834e <lif_BCD2BIN>
   18428:	7c 01       	movw	r14, r24
   1842a:	f8 01       	movw	r30, r16
   1842c:	81 81       	ldd	r24, Z+1	; 0x01
   1842e:	8f df       	rcall	.-226    	; 0x1834e <lif_BCD2BIN>
   18430:	01 97       	sbiw	r24, 0x01	; 1
   18432:	f6 e4       	ldi	r31, 0x46	; 70
   18434:	ef 16       	cp	r14, r31
   18436:	f1 04       	cpc	r15, r1
   18438:	1c f4       	brge	.+6      	; 0x18440 <lif_lifbcd2time+0x58>
   1843a:	24 e6       	ldi	r18, 0x64	; 100
   1843c:	e2 0e       	add	r14, r18
   1843e:	f1 1c       	adc	r15, r1
   18440:	fc 86       	std	Y+12, r15	; 0x0c
   18442:	eb 86       	std	Y+11, r14	; 0x0b
   18444:	9a 87       	std	Y+10, r25	; 0x0a
   18446:	89 87       	std	Y+9, r24	; 0x09
   18448:	f8 01       	movw	r30, r16
   1844a:	82 81       	ldd	r24, Z+2	; 0x02
   1844c:	80 df       	rcall	.-256    	; 0x1834e <lif_BCD2BIN>
   1844e:	98 87       	std	Y+8, r25	; 0x08
   18450:	8f 83       	std	Y+7, r24	; 0x07
   18452:	f8 01       	movw	r30, r16
   18454:	83 81       	ldd	r24, Z+3	; 0x03
   18456:	7b df       	rcall	.-266    	; 0x1834e <lif_BCD2BIN>
   18458:	9e 83       	std	Y+6, r25	; 0x06
   1845a:	8d 83       	std	Y+5, r24	; 0x05
   1845c:	f8 01       	movw	r30, r16
   1845e:	84 81       	ldd	r24, Z+4	; 0x04
   18460:	76 df       	rcall	.-276    	; 0x1834e <lif_BCD2BIN>
   18462:	9c 83       	std	Y+4, r25	; 0x04
   18464:	8b 83       	std	Y+3, r24	; 0x03
   18466:	f8 01       	movw	r30, r16
   18468:	85 81       	ldd	r24, Z+5	; 0x05
   1846a:	71 df       	rcall	.-286    	; 0x1834e <lif_BCD2BIN>
   1846c:	9a 83       	std	Y+2, r25	; 0x02
   1846e:	89 83       	std	Y+1, r24	; 0x01
   18470:	ce 01       	movw	r24, r28
   18472:	01 96       	adiw	r24, 0x01	; 1
   18474:	0e 94 b9 38 	call	0x7172	; 0x7172 <timegm>
   18478:	03 c0       	rjmp	.+6      	; 0x18480 <lif_lifbcd2time+0x98>
   1847a:	60 e0       	ldi	r22, 0x00	; 0
   1847c:	70 e0       	ldi	r23, 0x00	; 0
   1847e:	cb 01       	movw	r24, r22
   18480:	66 96       	adiw	r28, 0x16	; 22
   18482:	ea e0       	ldi	r30, 0x0A	; 10
   18484:	0c 94 2d e3 	jmp	0x1c65a	; 0x1c65a <__epilogue_restores__+0x10>

00018488 <lif_ctime_gmt>:
   18488:	a6 e1       	ldi	r26, 0x16	; 22
   1848a:	b0 e0       	ldi	r27, 0x00	; 0
   1848c:	ea e4       	ldi	r30, 0x4A	; 74
   1848e:	f2 ec       	ldi	r31, 0xC2	; 194
   18490:	0c 94 17 e3 	jmp	0x1c62e	; 0x1c62e <__prologue_saves__+0x1c>
   18494:	20 e2       	ldi	r18, 0x20	; 32
   18496:	e6 ed       	ldi	r30, 0xD6	; 214
   18498:	f9 e1       	ldi	r31, 0x19	; 25
   1849a:	df 01       	movw	r26, r30
   1849c:	1d 92       	st	X+, r1
   1849e:	2a 95       	dec	r18
   184a0:	e9 f7       	brne	.-6      	; 0x1849c <lif_ctime_gmt+0x14>
   184a2:	be 01       	movw	r22, r28
   184a4:	6f 5f       	subi	r22, 0xFF	; 255
   184a6:	7f 4f       	sbci	r23, 0xFF	; 255
   184a8:	0e 94 e5 35 	call	0x6bca	; 0x6bca <gmtime_r>
   184ac:	66 ed       	ldi	r22, 0xD6	; 214
   184ae:	79 e1       	ldi	r23, 0x19	; 25
   184b0:	0e 94 15 3b 	call	0x762a	; 0x762a <asctime_r>
   184b4:	8c 01       	movw	r16, r24
   184b6:	0e 94 71 30 	call	0x60e2	; 0x60e2 <trim_tail>
   184ba:	c8 01       	movw	r24, r16
   184bc:	66 96       	adiw	r28, 0x16	; 22
   184be:	e4 e0       	ldi	r30, 0x04	; 4
   184c0:	0c 94 33 e3 	jmp	0x1c666	; 0x1c666 <__epilogue_restores__+0x1c>

000184c4 <lif_lifbcd2timestr>:
   184c4:	a4 e0       	ldi	r26, 0x04	; 4
   184c6:	b0 e0       	ldi	r27, 0x00	; 0
   184c8:	e8 e6       	ldi	r30, 0x68	; 104
   184ca:	f2 ec       	ldi	r31, 0xC2	; 194
   184cc:	0c 94 19 e3 	jmp	0x1c632	; 0x1c632 <__prologue_saves__+0x20>
   184d0:	20 e2       	ldi	r18, 0x20	; 32
   184d2:	e6 eb       	ldi	r30, 0xB6	; 182
   184d4:	f9 e1       	ldi	r31, 0x19	; 25
   184d6:	df 01       	movw	r26, r30
   184d8:	1d 92       	st	X+, r1
   184da:	2a 95       	dec	r18
   184dc:	e9 f7       	brne	.-6      	; 0x184d8 <lif_lifbcd2timestr+0x14>
   184de:	84 df       	rcall	.-248    	; 0x183e8 <lif_lifbcd2time>
   184e0:	69 83       	std	Y+1, r22	; 0x01
   184e2:	7a 83       	std	Y+2, r23	; 0x02
   184e4:	8b 83       	std	Y+3, r24	; 0x03
   184e6:	9c 83       	std	Y+4, r25	; 0x04
   184e8:	67 2b       	or	r22, r23
   184ea:	68 2b       	or	r22, r24
   184ec:	69 2b       	or	r22, r25
   184ee:	29 f0       	breq	.+10     	; 0x184fa <lif_lifbcd2timestr+0x36>
   184f0:	ce 01       	movw	r24, r28
   184f2:	01 96       	adiw	r24, 0x01	; 1
   184f4:	c9 df       	rcall	.-110    	; 0x18488 <lif_ctime_gmt>
   184f6:	bc 01       	movw	r22, r24
   184f8:	02 c0       	rjmp	.+4      	; 0x184fe <lif_lifbcd2timestr+0x3a>
   184fa:	64 ef       	ldi	r22, 0xF4	; 244
   184fc:	75 e1       	ldi	r23, 0x15	; 21
   184fe:	86 eb       	ldi	r24, 0xB6	; 182
   18500:	99 e1       	ldi	r25, 0x19	; 25
   18502:	0e 94 93 2f 	call	0x5f26	; 0x5f26 <strcpy>
   18506:	86 eb       	ldi	r24, 0xB6	; 182
   18508:	99 e1       	ldi	r25, 0x19	; 25
   1850a:	24 96       	adiw	r28, 0x04	; 4
   1850c:	e2 e0       	ldi	r30, 0x02	; 2
   1850e:	0c 94 35 e3 	jmp	0x1c66a	; 0x1c66a <__epilogue_restores__+0x20>

00018512 <lif_image_clear>:
   18512:	20 e7       	ldi	r18, 0x70	; 112
   18514:	fc 01       	movw	r30, r24
   18516:	11 92       	st	Z+, r1
   18518:	2a 95       	dec	r18
   1851a:	e9 f7       	brne	.-6      	; 0x18516 <lif_image_clear+0x4>
   1851c:	08 95       	ret

0001851e <lif_dir_clear>:
   1851e:	81 5b       	subi	r24, 0xB1	; 177
   18520:	9f 4f       	sbci	r25, 0xFF	; 255
   18522:	21 e2       	ldi	r18, 0x21	; 33
   18524:	fc 01       	movw	r30, r24
   18526:	11 92       	st	Z+, r1
   18528:	2a 95       	dec	r18
   1852a:	e9 f7       	brne	.-6      	; 0x18526 <lif_dir_clear+0x8>
   1852c:	08 95       	ret

0001852e <lif_vol_clear>:
   1852e:	84 96       	adiw	r24, 0x24	; 36
   18530:	2b e2       	ldi	r18, 0x2B	; 43
   18532:	fc 01       	movw	r30, r24
   18534:	11 92       	st	Z+, r1
   18536:	2a 95       	dec	r18
   18538:	e9 f7       	brne	.-6      	; 0x18534 <lif_vol_clear+0x6>
   1853a:	08 95       	ret

0001853c <lif_dump_vol>:
   1853c:	cf 93       	push	r28
   1853e:	df 93       	push	r29
   18540:	ad b7       	in	r26, 0x3d	; 61
   18542:	be b7       	in	r27, 0x3e	; 62
   18544:	17 97       	sbiw	r26, 0x07	; 7
   18546:	0f b6       	in	r0, 0x3f	; 63
   18548:	f8 94       	cli
   1854a:	be bf       	out	0x3e, r27	; 62
   1854c:	0f be       	out	0x3f, r0	; 63
   1854e:	ad bf       	out	0x3d, r26	; 61
   18550:	ec 01       	movw	r28, r24
   18552:	ed b7       	in	r30, 0x3d	; 61
   18554:	fe b7       	in	r31, 0x3e	; 62
   18556:	75 83       	std	Z+5, r23	; 0x05
   18558:	64 83       	std	Z+4, r22	; 0x04
   1855a:	82 e5       	ldi	r24, 0x52	; 82
   1855c:	90 e4       	ldi	r25, 0x40	; 64
   1855e:	a0 e0       	ldi	r26, 0x00	; 0
   18560:	81 83       	std	Z+1, r24	; 0x01
   18562:	92 83       	std	Z+2, r25	; 0x02
   18564:	a3 83       	std	Z+3, r26	; 0x03
   18566:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   1856a:	88 81       	ld	r24, Y
   1856c:	99 81       	ldd	r25, Y+1	; 0x01
   1856e:	ed b7       	in	r30, 0x3d	; 61
   18570:	fe b7       	in	r31, 0x3e	; 62
   18572:	95 83       	std	Z+5, r25	; 0x05
   18574:	84 83       	std	Z+4, r24	; 0x04
   18576:	88 e3       	ldi	r24, 0x38	; 56
   18578:	90 e4       	ldi	r25, 0x40	; 64
   1857a:	a0 e0       	ldi	r26, 0x00	; 0
   1857c:	81 83       	std	Z+1, r24	; 0x01
   1857e:	92 83       	std	Z+2, r25	; 0x02
   18580:	a3 83       	std	Z+3, r26	; 0x03
   18582:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   18586:	8c 81       	ldd	r24, Y+4	; 0x04
   18588:	9d 81       	ldd	r25, Y+5	; 0x05
   1858a:	ae 81       	ldd	r26, Y+6	; 0x06
   1858c:	bf 81       	ldd	r27, Y+7	; 0x07
   1858e:	ed b7       	in	r30, 0x3d	; 61
   18590:	fe b7       	in	r31, 0x3e	; 62
   18592:	84 83       	std	Z+4, r24	; 0x04
   18594:	95 83       	std	Z+5, r25	; 0x05
   18596:	a6 83       	std	Z+6, r26	; 0x06
   18598:	b7 83       	std	Z+7, r27	; 0x07
   1859a:	8b e1       	ldi	r24, 0x1B	; 27
   1859c:	90 e4       	ldi	r25, 0x40	; 64
   1859e:	a0 e0       	ldi	r26, 0x00	; 0
   185a0:	81 83       	std	Z+1, r24	; 0x01
   185a2:	92 83       	std	Z+2, r25	; 0x02
   185a4:	a3 83       	std	Z+3, r26	; 0x03
   185a6:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   185aa:	88 85       	ldd	r24, Y+8	; 0x08
   185ac:	99 85       	ldd	r25, Y+9	; 0x09
   185ae:	aa 85       	ldd	r26, Y+10	; 0x0a
   185b0:	bb 85       	ldd	r27, Y+11	; 0x0b
   185b2:	ed b7       	in	r30, 0x3d	; 61
   185b4:	fe b7       	in	r31, 0x3e	; 62
   185b6:	84 83       	std	Z+4, r24	; 0x04
   185b8:	95 83       	std	Z+5, r25	; 0x05
   185ba:	a6 83       	std	Z+6, r26	; 0x06
   185bc:	b7 83       	std	Z+7, r27	; 0x07
   185be:	8e ef       	ldi	r24, 0xFE	; 254
   185c0:	9f e3       	ldi	r25, 0x3F	; 63
   185c2:	a0 e0       	ldi	r26, 0x00	; 0
   185c4:	81 83       	std	Z+1, r24	; 0x01
   185c6:	92 83       	std	Z+2, r25	; 0x02
   185c8:	a3 83       	std	Z+3, r26	; 0x03
   185ca:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   185ce:	8c 85       	ldd	r24, Y+12	; 0x0c
   185d0:	9d 85       	ldd	r25, Y+13	; 0x0d
   185d2:	ae 85       	ldd	r26, Y+14	; 0x0e
   185d4:	bf 85       	ldd	r27, Y+15	; 0x0f
   185d6:	ed b7       	in	r30, 0x3d	; 61
   185d8:	fe b7       	in	r31, 0x3e	; 62
   185da:	84 83       	std	Z+4, r24	; 0x04
   185dc:	95 83       	std	Z+5, r25	; 0x05
   185de:	a6 83       	std	Z+6, r26	; 0x06
   185e0:	b7 83       	std	Z+7, r27	; 0x07
   185e2:	81 ee       	ldi	r24, 0xE1	; 225
   185e4:	9f e3       	ldi	r25, 0x3F	; 63
   185e6:	a0 e0       	ldi	r26, 0x00	; 0
   185e8:	81 83       	std	Z+1, r24	; 0x01
   185ea:	92 83       	std	Z+2, r25	; 0x02
   185ec:	a3 83       	std	Z+3, r26	; 0x03
   185ee:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   185f2:	88 89       	ldd	r24, Y+16	; 0x10
   185f4:	99 89       	ldd	r25, Y+17	; 0x11
   185f6:	aa 89       	ldd	r26, Y+18	; 0x12
   185f8:	bb 89       	ldd	r27, Y+19	; 0x13
   185fa:	ed b7       	in	r30, 0x3d	; 61
   185fc:	fe b7       	in	r31, 0x3e	; 62
   185fe:	84 83       	std	Z+4, r24	; 0x04
   18600:	95 83       	std	Z+5, r25	; 0x05
   18602:	a6 83       	std	Z+6, r26	; 0x06
   18604:	b7 83       	std	Z+7, r27	; 0x07
   18606:	84 ec       	ldi	r24, 0xC4	; 196
   18608:	9f e3       	ldi	r25, 0x3F	; 63
   1860a:	a0 e0       	ldi	r26, 0x00	; 0
   1860c:	81 83       	std	Z+1, r24	; 0x01
   1860e:	92 83       	std	Z+2, r25	; 0x02
   18610:	a3 83       	std	Z+3, r26	; 0x03
   18612:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   18616:	8c 89       	ldd	r24, Y+20	; 0x14
   18618:	9d 89       	ldd	r25, Y+21	; 0x15
   1861a:	ae 89       	ldd	r26, Y+22	; 0x16
   1861c:	bf 89       	ldd	r27, Y+23	; 0x17
   1861e:	ed b7       	in	r30, 0x3d	; 61
   18620:	fe b7       	in	r31, 0x3e	; 62
   18622:	84 83       	std	Z+4, r24	; 0x04
   18624:	95 83       	std	Z+5, r25	; 0x05
   18626:	a6 83       	std	Z+6, r26	; 0x06
   18628:	b7 83       	std	Z+7, r27	; 0x07
   1862a:	87 ea       	ldi	r24, 0xA7	; 167
   1862c:	9f e3       	ldi	r25, 0x3F	; 63
   1862e:	a0 e0       	ldi	r26, 0x00	; 0
   18630:	81 83       	std	Z+1, r24	; 0x01
   18632:	92 83       	std	Z+2, r25	; 0x02
   18634:	a3 83       	std	Z+3, r26	; 0x03
   18636:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   1863a:	88 8d       	ldd	r24, Y+24	; 0x18
   1863c:	99 8d       	ldd	r25, Y+25	; 0x19
   1863e:	aa 8d       	ldd	r26, Y+26	; 0x1a
   18640:	bb 8d       	ldd	r27, Y+27	; 0x1b
   18642:	ed b7       	in	r30, 0x3d	; 61
   18644:	fe b7       	in	r31, 0x3e	; 62
   18646:	84 83       	std	Z+4, r24	; 0x04
   18648:	95 83       	std	Z+5, r25	; 0x05
   1864a:	a6 83       	std	Z+6, r26	; 0x06
   1864c:	b7 83       	std	Z+7, r27	; 0x07
   1864e:	8a e8       	ldi	r24, 0x8A	; 138
   18650:	9f e3       	ldi	r25, 0x3F	; 63
   18652:	a0 e0       	ldi	r26, 0x00	; 0
   18654:	81 83       	std	Z+1, r24	; 0x01
   18656:	92 83       	std	Z+2, r25	; 0x02
   18658:	a3 83       	std	Z+3, r26	; 0x03
   1865a:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   1865e:	8c 8d       	ldd	r24, Y+28	; 0x1c
   18660:	9d 8d       	ldd	r25, Y+29	; 0x1d
   18662:	09 2e       	mov	r0, r25
   18664:	00 0c       	add	r0, r0
   18666:	aa 0b       	sbc	r26, r26
   18668:	bb 0b       	sbc	r27, r27
   1866a:	ed b7       	in	r30, 0x3d	; 61
   1866c:	fe b7       	in	r31, 0x3e	; 62
   1866e:	84 83       	std	Z+4, r24	; 0x04
   18670:	95 83       	std	Z+5, r25	; 0x05
   18672:	a6 83       	std	Z+6, r26	; 0x06
   18674:	b7 83       	std	Z+7, r27	; 0x07
   18676:	8d e6       	ldi	r24, 0x6D	; 109
   18678:	9f e3       	ldi	r25, 0x3F	; 63
   1867a:	a0 e0       	ldi	r26, 0x00	; 0
   1867c:	81 83       	std	Z+1, r24	; 0x01
   1867e:	92 83       	std	Z+2, r25	; 0x02
   18680:	a3 83       	std	Z+3, r26	; 0x03
   18682:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   18686:	8e 8d       	ldd	r24, Y+30	; 0x1e
   18688:	9f 8d       	ldd	r25, Y+31	; 0x1f
   1868a:	09 2e       	mov	r0, r25
   1868c:	00 0c       	add	r0, r0
   1868e:	aa 0b       	sbc	r26, r26
   18690:	bb 0b       	sbc	r27, r27
   18692:	ed b7       	in	r30, 0x3d	; 61
   18694:	fe b7       	in	r31, 0x3e	; 62
   18696:	84 83       	std	Z+4, r24	; 0x04
   18698:	95 83       	std	Z+5, r25	; 0x05
   1869a:	a6 83       	std	Z+6, r26	; 0x06
   1869c:	b7 83       	std	Z+7, r27	; 0x07
   1869e:	80 e5       	ldi	r24, 0x50	; 80
   186a0:	9f e3       	ldi	r25, 0x3F	; 63
   186a2:	a0 e0       	ldi	r26, 0x00	; 0
   186a4:	81 83       	std	Z+1, r24	; 0x01
   186a6:	92 83       	std	Z+2, r25	; 0x02
   186a8:	a3 83       	std	Z+3, r26	; 0x03
   186aa:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   186ae:	ce 01       	movw	r24, r28
   186b0:	86 96       	adiw	r24, 0x26	; 38
   186b2:	ed b7       	in	r30, 0x3d	; 61
   186b4:	fe b7       	in	r31, 0x3e	; 62
   186b6:	95 83       	std	Z+5, r25	; 0x05
   186b8:	84 83       	std	Z+4, r24	; 0x04
   186ba:	86 e3       	ldi	r24, 0x36	; 54
   186bc:	9f e3       	ldi	r25, 0x3F	; 63
   186be:	a0 e0       	ldi	r26, 0x00	; 0
   186c0:	81 83       	std	Z+1, r24	; 0x01
   186c2:	92 83       	std	Z+2, r25	; 0x02
   186c4:	a3 83       	std	Z+3, r26	; 0x03
   186c6:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   186ca:	8c a1       	ldd	r24, Y+36	; 0x24
   186cc:	9d a1       	ldd	r25, Y+37	; 0x25
   186ce:	ed b7       	in	r30, 0x3d	; 61
   186d0:	fe b7       	in	r31, 0x3e	; 62
   186d2:	95 83       	std	Z+5, r25	; 0x05
   186d4:	84 83       	std	Z+4, r24	; 0x04
   186d6:	8a e1       	ldi	r24, 0x1A	; 26
   186d8:	9f e3       	ldi	r25, 0x3F	; 63
   186da:	a0 e0       	ldi	r26, 0x00	; 0
   186dc:	81 83       	std	Z+1, r24	; 0x01
   186de:	92 83       	std	Z+2, r25	; 0x02
   186e0:	a3 83       	std	Z+3, r26	; 0x03
   186e2:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   186e6:	8d a5       	ldd	r24, Y+45	; 0x2d
   186e8:	9e a5       	ldd	r25, Y+46	; 0x2e
   186ea:	af a5       	ldd	r26, Y+47	; 0x2f
   186ec:	b8 a9       	ldd	r27, Y+48	; 0x30
   186ee:	ed b7       	in	r30, 0x3d	; 61
   186f0:	fe b7       	in	r31, 0x3e	; 62
   186f2:	84 83       	std	Z+4, r24	; 0x04
   186f4:	95 83       	std	Z+5, r25	; 0x05
   186f6:	a6 83       	std	Z+6, r26	; 0x06
   186f8:	b7 83       	std	Z+7, r27	; 0x07
   186fa:	8d ef       	ldi	r24, 0xFD	; 253
   186fc:	9e e3       	ldi	r25, 0x3E	; 62
   186fe:	a0 e0       	ldi	r26, 0x00	; 0
   18700:	81 83       	std	Z+1, r24	; 0x01
   18702:	92 83       	std	Z+2, r25	; 0x02
   18704:	a3 83       	std	Z+3, r26	; 0x03
   18706:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   1870a:	8d a9       	ldd	r24, Y+53	; 0x35
   1870c:	9e a9       	ldd	r25, Y+54	; 0x36
   1870e:	af a9       	ldd	r26, Y+55	; 0x37
   18710:	b8 ad       	ldd	r27, Y+56	; 0x38
   18712:	ed b7       	in	r30, 0x3d	; 61
   18714:	fe b7       	in	r31, 0x3e	; 62
   18716:	84 83       	std	Z+4, r24	; 0x04
   18718:	95 83       	std	Z+5, r25	; 0x05
   1871a:	a6 83       	std	Z+6, r26	; 0x06
   1871c:	b7 83       	std	Z+7, r27	; 0x07
   1871e:	80 ee       	ldi	r24, 0xE0	; 224
   18720:	9e e3       	ldi	r25, 0x3E	; 62
   18722:	a0 e0       	ldi	r26, 0x00	; 0
   18724:	81 83       	std	Z+1, r24	; 0x01
   18726:	92 83       	std	Z+2, r25	; 0x02
   18728:	a3 83       	std	Z+3, r26	; 0x03
   1872a:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   1872e:	89 a9       	ldd	r24, Y+49	; 0x31
   18730:	9a a9       	ldd	r25, Y+50	; 0x32
   18732:	ed b7       	in	r30, 0x3d	; 61
   18734:	fe b7       	in	r31, 0x3e	; 62
   18736:	95 83       	std	Z+5, r25	; 0x05
   18738:	84 83       	std	Z+4, r24	; 0x04
   1873a:	84 ec       	ldi	r24, 0xC4	; 196
   1873c:	9e e3       	ldi	r25, 0x3E	; 62
   1873e:	a0 e0       	ldi	r26, 0x00	; 0
   18740:	81 83       	std	Z+1, r24	; 0x01
   18742:	92 83       	std	Z+2, r25	; 0x02
   18744:	a3 83       	std	Z+3, r26	; 0x03
   18746:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   1874a:	89 ad       	ldd	r24, Y+57	; 0x39
   1874c:	9a ad       	ldd	r25, Y+58	; 0x3a
   1874e:	ed b7       	in	r30, 0x3d	; 61
   18750:	fe b7       	in	r31, 0x3e	; 62
   18752:	95 83       	std	Z+5, r25	; 0x05
   18754:	84 83       	std	Z+4, r24	; 0x04
   18756:	88 ea       	ldi	r24, 0xA8	; 168
   18758:	9e e3       	ldi	r25, 0x3E	; 62
   1875a:	a0 e0       	ldi	r26, 0x00	; 0
   1875c:	81 83       	std	Z+1, r24	; 0x01
   1875e:	92 83       	std	Z+2, r25	; 0x02
   18760:	a3 83       	std	Z+3, r26	; 0x03
   18762:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   18766:	ce 01       	movw	r24, r28
   18768:	87 5b       	subi	r24, 0xB7	; 183
   1876a:	9f 4f       	sbci	r25, 0xFF	; 255
   1876c:	ab de       	rcall	.-682    	; 0x184c4 <lif_lifbcd2timestr>
   1876e:	ed b7       	in	r30, 0x3d	; 61
   18770:	fe b7       	in	r31, 0x3e	; 62
   18772:	95 83       	std	Z+5, r25	; 0x05
   18774:	84 83       	std	Z+4, r24	; 0x04
   18776:	8e e8       	ldi	r24, 0x8E	; 142
   18778:	9e e3       	ldi	r25, 0x3E	; 62
   1877a:	a0 e0       	ldi	r26, 0x00	; 0
   1877c:	81 83       	std	Z+1, r24	; 0x01
   1877e:	92 83       	std	Z+2, r25	; 0x02
   18780:	a3 83       	std	Z+3, r26	; 0x03
   18782:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   18786:	ce 01       	movw	r24, r28
   18788:	81 5b       	subi	r24, 0xB1	; 177
   1878a:	9f 4f       	sbci	r25, 0xFF	; 255
   1878c:	ed b7       	in	r30, 0x3d	; 61
   1878e:	fe b7       	in	r31, 0x3e	; 62
   18790:	95 83       	std	Z+5, r25	; 0x05
   18792:	84 83       	std	Z+4, r24	; 0x04
   18794:	84 e7       	ldi	r24, 0x74	; 116
   18796:	9e e3       	ldi	r25, 0x3E	; 62
   18798:	a0 e0       	ldi	r26, 0x00	; 0
   1879a:	81 83       	std	Z+1, r24	; 0x01
   1879c:	92 83       	std	Z+2, r25	; 0x02
   1879e:	a3 83       	std	Z+3, r26	; 0x03
   187a0:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   187a4:	fe 01       	movw	r30, r28
   187a6:	e6 5a       	subi	r30, 0xA6	; 166
   187a8:	ff 4f       	sbci	r31, 0xFF	; 255
   187aa:	80 81       	ld	r24, Z
   187ac:	91 81       	ldd	r25, Z+1	; 0x01
   187ae:	ed b7       	in	r30, 0x3d	; 61
   187b0:	fe b7       	in	r31, 0x3e	; 62
   187b2:	95 83       	std	Z+5, r25	; 0x05
   187b4:	84 83       	std	Z+4, r24	; 0x04
   187b6:	88 e5       	ldi	r24, 0x58	; 88
   187b8:	9e e3       	ldi	r25, 0x3E	; 62
   187ba:	a0 e0       	ldi	r26, 0x00	; 0
   187bc:	81 83       	std	Z+1, r24	; 0x01
   187be:	92 83       	std	Z+2, r25	; 0x02
   187c0:	a3 83       	std	Z+3, r26	; 0x03
   187c2:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   187c6:	fe 01       	movw	r30, r28
   187c8:	e6 59       	subi	r30, 0x96	; 150
   187ca:	ff 4f       	sbci	r31, 0xFF	; 255
   187cc:	80 81       	ld	r24, Z
   187ce:	91 81       	ldd	r25, Z+1	; 0x01
   187d0:	ed b7       	in	r30, 0x3d	; 61
   187d2:	fe b7       	in	r31, 0x3e	; 62
   187d4:	95 83       	std	Z+5, r25	; 0x05
   187d6:	84 83       	std	Z+4, r24	; 0x04
   187d8:	8c e3       	ldi	r24, 0x3C	; 60
   187da:	9e e3       	ldi	r25, 0x3E	; 62
   187dc:	a0 e0       	ldi	r26, 0x00	; 0
   187de:	81 83       	std	Z+1, r24	; 0x01
   187e0:	92 83       	std	Z+2, r25	; 0x02
   187e2:	a3 83       	std	Z+3, r26	; 0x03
   187e4:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   187e8:	fe 01       	movw	r30, r28
   187ea:	e4 5a       	subi	r30, 0xA4	; 164
   187ec:	ff 4f       	sbci	r31, 0xFF	; 255
   187ee:	80 81       	ld	r24, Z
   187f0:	91 81       	ldd	r25, Z+1	; 0x01
   187f2:	a2 81       	ldd	r26, Z+2	; 0x02
   187f4:	b3 81       	ldd	r27, Z+3	; 0x03
   187f6:	ed b7       	in	r30, 0x3d	; 61
   187f8:	fe b7       	in	r31, 0x3e	; 62
   187fa:	84 83       	std	Z+4, r24	; 0x04
   187fc:	95 83       	std	Z+5, r25	; 0x05
   187fe:	a6 83       	std	Z+6, r26	; 0x06
   18800:	b7 83       	std	Z+7, r27	; 0x07
   18802:	8f e1       	ldi	r24, 0x1F	; 31
   18804:	9e e3       	ldi	r25, 0x3E	; 62
   18806:	a0 e0       	ldi	r26, 0x00	; 0
   18808:	81 83       	std	Z+1, r24	; 0x01
   1880a:	92 83       	std	Z+2, r25	; 0x02
   1880c:	a3 83       	std	Z+3, r26	; 0x03
   1880e:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   18812:	fe 01       	movw	r30, r28
   18814:	e0 5a       	subi	r30, 0xA0	; 160
   18816:	ff 4f       	sbci	r31, 0xFF	; 255
   18818:	80 81       	ld	r24, Z
   1881a:	91 81       	ldd	r25, Z+1	; 0x01
   1881c:	a2 81       	ldd	r26, Z+2	; 0x02
   1881e:	b3 81       	ldd	r27, Z+3	; 0x03
   18820:	ed b7       	in	r30, 0x3d	; 61
   18822:	fe b7       	in	r31, 0x3e	; 62
   18824:	84 83       	std	Z+4, r24	; 0x04
   18826:	95 83       	std	Z+5, r25	; 0x05
   18828:	a6 83       	std	Z+6, r26	; 0x06
   1882a:	b7 83       	std	Z+7, r27	; 0x07
   1882c:	82 e0       	ldi	r24, 0x02	; 2
   1882e:	9e e3       	ldi	r25, 0x3E	; 62
   18830:	a0 e0       	ldi	r26, 0x00	; 0
   18832:	81 83       	std	Z+1, r24	; 0x01
   18834:	92 83       	std	Z+2, r25	; 0x02
   18836:	a3 83       	std	Z+3, r26	; 0x03
   18838:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   1883c:	fe 01       	movw	r30, r28
   1883e:	e4 59       	subi	r30, 0x94	; 148
   18840:	ff 4f       	sbci	r31, 0xFF	; 255
   18842:	80 81       	ld	r24, Z
   18844:	91 81       	ldd	r25, Z+1	; 0x01
   18846:	a0 e0       	ldi	r26, 0x00	; 0
   18848:	b0 e0       	ldi	r27, 0x00	; 0
   1884a:	ed b7       	in	r30, 0x3d	; 61
   1884c:	fe b7       	in	r31, 0x3e	; 62
   1884e:	84 83       	std	Z+4, r24	; 0x04
   18850:	95 83       	std	Z+5, r25	; 0x05
   18852:	a6 83       	std	Z+6, r26	; 0x06
   18854:	b7 83       	std	Z+7, r27	; 0x07
   18856:	85 ee       	ldi	r24, 0xE5	; 229
   18858:	9d e3       	ldi	r25, 0x3D	; 61
   1885a:	a0 e0       	ldi	r26, 0x00	; 0
   1885c:	81 83       	std	Z+1, r24	; 0x01
   1885e:	92 83       	std	Z+2, r25	; 0x02
   18860:	a3 83       	std	Z+3, r26	; 0x03
   18862:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   18866:	fe 01       	movw	r30, r28
   18868:	e2 59       	subi	r30, 0x92	; 146
   1886a:	ff 4f       	sbci	r31, 0xFF	; 255
   1886c:	80 81       	ld	r24, Z
   1886e:	91 81       	ldd	r25, Z+1	; 0x01
   18870:	ed b7       	in	r30, 0x3d	; 61
   18872:	fe b7       	in	r31, 0x3e	; 62
   18874:	95 83       	std	Z+5, r25	; 0x05
   18876:	84 83       	std	Z+4, r24	; 0x04
   18878:	89 ec       	ldi	r24, 0xC9	; 201
   1887a:	9d e3       	ldi	r25, 0x3D	; 61
   1887c:	a0 e0       	ldi	r26, 0x00	; 0
   1887e:	81 83       	std	Z+1, r24	; 0x01
   18880:	92 83       	std	Z+2, r25	; 0x02
   18882:	a3 83       	std	Z+3, r26	; 0x03
   18884:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   18888:	ce 01       	movw	r24, r28
   1888a:	8c 59       	subi	r24, 0x9C	; 156
   1888c:	9f 4f       	sbci	r25, 0xFF	; 255
   1888e:	1a de       	rcall	.-972    	; 0x184c4 <lif_lifbcd2timestr>
   18890:	ed b7       	in	r30, 0x3d	; 61
   18892:	fe b7       	in	r31, 0x3e	; 62
   18894:	95 83       	std	Z+5, r25	; 0x05
   18896:	84 83       	std	Z+4, r24	; 0x04
   18898:	8f ea       	ldi	r24, 0xAF	; 175
   1889a:	9d e3       	ldi	r25, 0x3D	; 61
   1889c:	a0 e0       	ldi	r26, 0x00	; 0
   1889e:	81 83       	std	Z+1, r24	; 0x01
   188a0:	92 83       	std	Z+2, r25	; 0x02
   188a2:	a3 83       	std	Z+3, r26	; 0x03
   188a4:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   188a8:	8d ea       	ldi	r24, 0xAD	; 173
   188aa:	9d e3       	ldi	r25, 0x3D	; 61
   188ac:	a0 e0       	ldi	r26, 0x00	; 0
   188ae:	ed b7       	in	r30, 0x3d	; 61
   188b0:	fe b7       	in	r31, 0x3e	; 62
   188b2:	81 83       	std	Z+1, r24	; 0x01
   188b4:	92 83       	std	Z+2, r25	; 0x02
   188b6:	a3 83       	std	Z+3, r26	; 0x03
   188b8:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   188bc:	cd b7       	in	r28, 0x3d	; 61
   188be:	de b7       	in	r29, 0x3e	; 62
   188c0:	27 96       	adiw	r28, 0x07	; 7
   188c2:	e2 e0       	ldi	r30, 0x02	; 2
   188c4:	0c 94 35 e3 	jmp	0x1c66a	; 0x1c66a <__epilogue_restores__+0x20>

000188c8 <lif_check_volume>:
   188c8:	0f 93       	push	r16
   188ca:	1f 93       	push	r17
   188cc:	cf 93       	push	r28
   188ce:	df 93       	push	r29
   188d0:	ad b7       	in	r26, 0x3d	; 61
   188d2:	be b7       	in	r27, 0x3e	; 62
   188d4:	17 97       	sbiw	r26, 0x07	; 7
   188d6:	0f b6       	in	r0, 0x3f	; 63
   188d8:	f8 94       	cli
   188da:	be bf       	out	0x3e, r27	; 62
   188dc:	0f be       	out	0x3f, r0	; 63
   188de:	ad bf       	out	0x3d, r26	; 61
   188e0:	ec 01       	movw	r28, r24
   188e2:	86 96       	adiw	r24, 0x26	; 38
   188e4:	e0 da       	rcall	.-2624   	; 0x17ea6 <lif_checkname>
   188e6:	89 2b       	or	r24, r25
   188e8:	89 f4       	brne	.+34     	; 0x1890c <lif_check_volume+0x44>
   188ea:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   188ee:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   188f2:	92 ff       	sbrs	r25, 2
   188f4:	0e c0       	rjmp	.+28     	; 0x18912 <lif_check_volume+0x4a>
   188f6:	8e e8       	ldi	r24, 0x8E	; 142
   188f8:	9d e3       	ldi	r25, 0x3D	; 61
   188fa:	a0 e0       	ldi	r26, 0x00	; 0
   188fc:	ed b7       	in	r30, 0x3d	; 61
   188fe:	fe b7       	in	r31, 0x3e	; 62
   18900:	81 83       	std	Z+1, r24	; 0x01
   18902:	92 83       	std	Z+2, r25	; 0x02
   18904:	a3 83       	std	Z+3, r26	; 0x03
   18906:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   1890a:	03 c0       	rjmp	.+6      	; 0x18912 <lif_check_volume+0x4a>
   1890c:	81 e0       	ldi	r24, 0x01	; 1
   1890e:	90 e0       	ldi	r25, 0x00	; 0
   18910:	02 c0       	rjmp	.+4      	; 0x18916 <lif_check_volume+0x4e>
   18912:	80 e0       	ldi	r24, 0x00	; 0
   18914:	90 e0       	ldi	r25, 0x00	; 0
   18916:	29 a9       	ldd	r18, Y+49	; 0x31
   18918:	3a a9       	ldd	r19, Y+50	; 0x32
   1891a:	21 15       	cp	r18, r1
   1891c:	f0 e1       	ldi	r31, 0x10	; 16
   1891e:	3f 07       	cpc	r19, r31
   18920:	a1 f0       	breq	.+40     	; 0x1894a <lif_check_volume+0x82>
   18922:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18926:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1892a:	92 ff       	sbrs	r25, 2
   1892c:	0c c0       	rjmp	.+24     	; 0x18946 <lif_check_volume+0x7e>
   1892e:	ed b7       	in	r30, 0x3d	; 61
   18930:	fe b7       	in	r31, 0x3e	; 62
   18932:	35 83       	std	Z+5, r19	; 0x05
   18934:	24 83       	std	Z+4, r18	; 0x04
   18936:	85 e5       	ldi	r24, 0x55	; 85
   18938:	9d e3       	ldi	r25, 0x3D	; 61
   1893a:	a0 e0       	ldi	r26, 0x00	; 0
   1893c:	81 83       	std	Z+1, r24	; 0x01
   1893e:	92 83       	std	Z+2, r25	; 0x02
   18940:	a3 83       	std	Z+3, r26	; 0x03
   18942:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   18946:	80 e0       	ldi	r24, 0x00	; 0
   18948:	90 e0       	ldi	r25, 0x00	; 0
   1894a:	29 ad       	ldd	r18, Y+57	; 0x39
   1894c:	3a ad       	ldd	r19, Y+58	; 0x3a
   1894e:	22 30       	cpi	r18, 0x02	; 2
   18950:	31 05       	cpc	r19, r1
   18952:	a0 f0       	brcs	.+40     	; 0x1897c <lif_check_volume+0xb4>
   18954:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18958:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1895c:	92 ff       	sbrs	r25, 2
   1895e:	0c c0       	rjmp	.+24     	; 0x18978 <lif_check_volume+0xb0>
   18960:	ed b7       	in	r30, 0x3d	; 61
   18962:	fe b7       	in	r31, 0x3e	; 62
   18964:	35 83       	std	Z+5, r19	; 0x05
   18966:	24 83       	std	Z+4, r18	; 0x04
   18968:	8d e3       	ldi	r24, 0x3D	; 61
   1896a:	9d e3       	ldi	r25, 0x3D	; 61
   1896c:	a0 e0       	ldi	r26, 0x00	; 0
   1896e:	81 83       	std	Z+1, r24	; 0x01
   18970:	92 83       	std	Z+2, r25	; 0x02
   18972:	a3 83       	std	Z+3, r26	; 0x03
   18974:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   18978:	80 e0       	ldi	r24, 0x00	; 0
   1897a:	90 e0       	ldi	r25, 0x00	; 0
   1897c:	2b a9       	ldd	r18, Y+51	; 0x33
   1897e:	3c a9       	ldd	r19, Y+52	; 0x34
   18980:	23 2b       	or	r18, r19
   18982:	91 f0       	breq	.+36     	; 0x189a8 <lif_check_volume+0xe0>
   18984:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18988:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1898c:	92 ff       	sbrs	r25, 2
   1898e:	0a c0       	rjmp	.+20     	; 0x189a4 <lif_check_volume+0xdc>
   18990:	84 e0       	ldi	r24, 0x04	; 4
   18992:	9d e3       	ldi	r25, 0x3D	; 61
   18994:	a0 e0       	ldi	r26, 0x00	; 0
   18996:	ed b7       	in	r30, 0x3d	; 61
   18998:	fe b7       	in	r31, 0x3e	; 62
   1899a:	81 83       	std	Z+1, r24	; 0x01
   1899c:	92 83       	std	Z+2, r25	; 0x02
   1899e:	a3 83       	std	Z+3, r26	; 0x03
   189a0:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   189a4:	80 e0       	ldi	r24, 0x00	; 0
   189a6:	90 e0       	ldi	r25, 0x00	; 0
   189a8:	2b ad       	ldd	r18, Y+59	; 0x3b
   189aa:	3c ad       	ldd	r19, Y+60	; 0x3c
   189ac:	23 2b       	or	r18, r19
   189ae:	91 f0       	breq	.+36     	; 0x189d4 <lif_check_volume+0x10c>
   189b0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   189b4:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   189b8:	92 ff       	sbrs	r25, 2
   189ba:	0a c0       	rjmp	.+20     	; 0x189d0 <lif_check_volume+0x108>
   189bc:	8b ec       	ldi	r24, 0xCB	; 203
   189be:	9c e3       	ldi	r25, 0x3C	; 60
   189c0:	a0 e0       	ldi	r26, 0x00	; 0
   189c2:	ed b7       	in	r30, 0x3d	; 61
   189c4:	fe b7       	in	r31, 0x3e	; 62
   189c6:	81 83       	std	Z+1, r24	; 0x01
   189c8:	92 83       	std	Z+2, r25	; 0x02
   189ca:	a3 83       	std	Z+3, r26	; 0x03
   189cc:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   189d0:	80 e0       	ldi	r24, 0x00	; 0
   189d2:	90 e0       	ldi	r25, 0x00	; 0
   189d4:	4d a5       	ldd	r20, Y+45	; 0x2d
   189d6:	5e a5       	ldd	r21, Y+46	; 0x2e
   189d8:	6f a5       	ldd	r22, Y+47	; 0x2f
   189da:	78 a9       	ldd	r23, Y+48	; 0x30
   189dc:	45 2b       	or	r20, r21
   189de:	46 2b       	or	r20, r22
   189e0:	47 2b       	or	r20, r23
   189e2:	b1 f4       	brne	.+44     	; 0x18a10 <lif_check_volume+0x148>
   189e4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   189e8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   189ec:	92 ff       	sbrs	r25, 2
   189ee:	0e c0       	rjmp	.+28     	; 0x18a0c <lif_check_volume+0x144>
   189f0:	ed b7       	in	r30, 0x3d	; 61
   189f2:	fe b7       	in	r31, 0x3e	; 62
   189f4:	14 82       	std	Z+4, r1	; 0x04
   189f6:	15 82       	std	Z+5, r1	; 0x05
   189f8:	16 82       	std	Z+6, r1	; 0x06
   189fa:	17 82       	std	Z+7, r1	; 0x07
   189fc:	86 ea       	ldi	r24, 0xA6	; 166
   189fe:	9c e3       	ldi	r25, 0x3C	; 60
   18a00:	a0 e0       	ldi	r26, 0x00	; 0
   18a02:	81 83       	std	Z+1, r24	; 0x01
   18a04:	92 83       	std	Z+2, r25	; 0x02
   18a06:	a3 83       	std	Z+3, r26	; 0x03
   18a08:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   18a0c:	80 e0       	ldi	r24, 0x00	; 0
   18a0e:	90 e0       	ldi	r25, 0x00	; 0
   18a10:	4d a9       	ldd	r20, Y+53	; 0x35
   18a12:	5e a9       	ldd	r21, Y+54	; 0x36
   18a14:	6f a9       	ldd	r22, Y+55	; 0x37
   18a16:	78 ad       	ldd	r23, Y+56	; 0x38
   18a18:	45 2b       	or	r20, r21
   18a1a:	46 2b       	or	r20, r22
   18a1c:	47 2b       	or	r20, r23
   18a1e:	91 f4       	brne	.+36     	; 0x18a44 <lif_check_volume+0x17c>
   18a20:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18a24:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18a28:	92 ff       	sbrs	r25, 2
   18a2a:	0a c0       	rjmp	.+20     	; 0x18a40 <lif_check_volume+0x178>
   18a2c:	87 e7       	ldi	r24, 0x77	; 119
   18a2e:	9c e3       	ldi	r25, 0x3C	; 60
   18a30:	a0 e0       	ldi	r26, 0x00	; 0
   18a32:	ed b7       	in	r30, 0x3d	; 61
   18a34:	fe b7       	in	r31, 0x3e	; 62
   18a36:	81 83       	std	Z+1, r24	; 0x01
   18a38:	92 83       	std	Z+2, r25	; 0x02
   18a3a:	a3 83       	std	Z+3, r26	; 0x03
   18a3c:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   18a40:	80 e0       	ldi	r24, 0x00	; 0
   18a42:	90 e0       	ldi	r25, 0x00	; 0
   18a44:	0d a5       	ldd	r16, Y+45	; 0x2d
   18a46:	1e a5       	ldd	r17, Y+46	; 0x2e
   18a48:	2f a5       	ldd	r18, Y+47	; 0x2f
   18a4a:	38 a9       	ldd	r19, Y+48	; 0x30
   18a4c:	4d a9       	ldd	r20, Y+53	; 0x35
   18a4e:	5e a9       	ldd	r21, Y+54	; 0x36
   18a50:	6f a9       	ldd	r22, Y+55	; 0x37
   18a52:	78 ad       	ldd	r23, Y+56	; 0x38
   18a54:	40 0f       	add	r20, r16
   18a56:	51 1f       	adc	r21, r17
   18a58:	62 1f       	adc	r22, r18
   18a5a:	73 1f       	adc	r23, r19
   18a5c:	0c 81       	ldd	r16, Y+4	; 0x04
   18a5e:	1d 81       	ldd	r17, Y+5	; 0x05
   18a60:	2e 81       	ldd	r18, Y+6	; 0x06
   18a62:	3f 81       	ldd	r19, Y+7	; 0x07
   18a64:	04 17       	cp	r16, r20
   18a66:	15 07       	cpc	r17, r21
   18a68:	26 07       	cpc	r18, r22
   18a6a:	37 07       	cpc	r19, r23
   18a6c:	90 f4       	brcc	.+36     	; 0x18a92 <lif_check_volume+0x1ca>
   18a6e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18a72:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18a76:	92 ff       	sbrs	r25, 2
   18a78:	0a c0       	rjmp	.+20     	; 0x18a8e <lif_check_volume+0x1c6>
   18a7a:	8b e4       	ldi	r24, 0x4B	; 75
   18a7c:	9c e3       	ldi	r25, 0x3C	; 60
   18a7e:	a0 e0       	ldi	r26, 0x00	; 0
   18a80:	ed b7       	in	r30, 0x3d	; 61
   18a82:	fe b7       	in	r31, 0x3e	; 62
   18a84:	81 83       	std	Z+1, r24	; 0x01
   18a86:	92 83       	std	Z+2, r25	; 0x02
   18a88:	a3 83       	std	Z+3, r26	; 0x03
   18a8a:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   18a8e:	80 e0       	ldi	r24, 0x00	; 0
   18a90:	90 e0       	ldi	r25, 0x00	; 0
   18a92:	cd b7       	in	r28, 0x3d	; 61
   18a94:	de b7       	in	r29, 0x3e	; 62
   18a96:	27 96       	adiw	r28, 0x07	; 7
   18a98:	e4 e0       	ldi	r30, 0x04	; 4
   18a9a:	0c 94 33 e3 	jmp	0x1c666	; 0x1c666 <__epilogue_restores__+0x1c>

00018a9e <lif_check_dir>:
   18a9e:	a5 e1       	ldi	r26, 0x15	; 21
   18aa0:	b0 e0       	ldi	r27, 0x00	; 0
   18aa2:	e5 e5       	ldi	r30, 0x55	; 85
   18aa4:	f5 ec       	ldi	r31, 0xC5	; 197
   18aa6:	0c 94 09 e3 	jmp	0x1c612	; 0x1c612 <__prologue_saves__>
   18aaa:	6c 01       	movw	r12, r24
   18aac:	2a e5       	ldi	r18, 0x5A	; 90
   18aae:	c2 0e       	add	r12, r18
   18ab0:	d1 1c       	adc	r13, r1
   18ab2:	f6 01       	movw	r30, r12
   18ab4:	20 81       	ld	r18, Z
   18ab6:	31 81       	ldd	r19, Z+1	; 0x01
   18ab8:	21 50       	subi	r18, 0x01	; 1
   18aba:	31 09       	sbc	r19, r1
   18abc:	2e 3f       	cpi	r18, 0xFE	; 254
   18abe:	3f 4f       	sbci	r19, 0xFF	; 255
   18ac0:	08 f0       	brcs	.+2      	; 0x18ac4 <lif_check_dir+0x26>
   18ac2:	9a c1       	rjmp	.+820    	; 0x18df8 <lif_check_dir+0x35a>
   18ac4:	9d 8b       	std	Y+21, r25	; 0x15
   18ac6:	8c 8b       	std	Y+20, r24	; 0x14
   18ac8:	7c 01       	movw	r14, r24
   18aca:	2f e4       	ldi	r18, 0x4F	; 79
   18acc:	e2 0e       	add	r14, r18
   18ace:	f1 1c       	adc	r15, r1
   18ad0:	c7 01       	movw	r24, r14
   18ad2:	e9 d9       	rcall	.-3118   	; 0x17ea6 <lif_checkname>
   18ad4:	89 2b       	or	r24, r25
   18ad6:	99 f4       	brne	.+38     	; 0x18afe <lif_check_dir+0x60>
   18ad8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18adc:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18ae0:	92 ff       	sbrs	r25, 2
   18ae2:	0f c0       	rjmp	.+30     	; 0x18b02 <lif_check_dir+0x64>
   18ae4:	ed b7       	in	r30, 0x3d	; 61
   18ae6:	fe b7       	in	r31, 0x3e	; 62
   18ae8:	f5 82       	std	Z+5, r15	; 0x05
   18aea:	e4 82       	std	Z+4, r14	; 0x04
   18aec:	8a e2       	ldi	r24, 0x2A	; 42
   18aee:	9c e3       	ldi	r25, 0x3C	; 60
   18af0:	a0 e0       	ldi	r26, 0x00	; 0
   18af2:	81 83       	std	Z+1, r24	; 0x01
   18af4:	92 83       	std	Z+2, r25	; 0x02
   18af6:	a3 83       	std	Z+3, r26	; 0x03
   18af8:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   18afc:	02 c0       	rjmp	.+4      	; 0x18b02 <lif_check_dir+0x64>
   18afe:	01 e0       	ldi	r16, 0x01	; 1
   18b00:	01 c0       	rjmp	.+2      	; 0x18b04 <lif_check_dir+0x66>
   18b02:	00 e0       	ldi	r16, 0x00	; 0
   18b04:	10 e0       	ldi	r17, 0x00	; 0
   18b06:	ec 89       	ldd	r30, Y+20	; 0x14
   18b08:	fd 89       	ldd	r31, Y+21	; 0x15
   18b0a:	84 85       	ldd	r24, Z+12	; 0x0c
   18b0c:	95 85       	ldd	r25, Z+13	; 0x0d
   18b0e:	a6 85       	ldd	r26, Z+14	; 0x0e
   18b10:	b7 85       	ldd	r27, Z+15	; 0x0f
   18b12:	00 97       	sbiw	r24, 0x00	; 0
   18b14:	a1 05       	cpc	r26, r1
   18b16:	b1 05       	cpc	r27, r1
   18b18:	39 f1       	breq	.+78     	; 0x18b68 <lif_check_dir+0xca>
   18b1a:	e4 5a       	subi	r30, 0xA4	; 164
   18b1c:	ff 4f       	sbci	r31, 0xFF	; 255
   18b1e:	40 81       	ld	r20, Z
   18b20:	51 81       	ldd	r21, Z+1	; 0x01
   18b22:	62 81       	ldd	r22, Z+2	; 0x02
   18b24:	73 81       	ldd	r23, Z+3	; 0x03
   18b26:	48 17       	cp	r20, r24
   18b28:	59 07       	cpc	r21, r25
   18b2a:	6a 07       	cpc	r22, r26
   18b2c:	7b 07       	cpc	r23, r27
   18b2e:	e0 f4       	brcc	.+56     	; 0x18b68 <lif_check_dir+0xca>
   18b30:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   18b34:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18b38:	32 ff       	sbrs	r19, 2
   18b3a:	14 c0       	rjmp	.+40     	; 0x18b64 <lif_check_dir+0xc6>
   18b3c:	ed b7       	in	r30, 0x3d	; 61
   18b3e:	fe b7       	in	r31, 0x3e	; 62
   18b40:	82 87       	std	Z+10, r24	; 0x0a
   18b42:	93 87       	std	Z+11, r25	; 0x0b
   18b44:	a4 87       	std	Z+12, r26	; 0x0c
   18b46:	b5 87       	std	Z+13, r27	; 0x0d
   18b48:	46 83       	std	Z+6, r20	; 0x06
   18b4a:	57 83       	std	Z+7, r21	; 0x07
   18b4c:	60 87       	std	Z+8, r22	; 0x08
   18b4e:	71 87       	std	Z+9, r23	; 0x09
   18b50:	f5 82       	std	Z+5, r15	; 0x05
   18b52:	e4 82       	std	Z+4, r14	; 0x04
   18b54:	86 ee       	ldi	r24, 0xE6	; 230
   18b56:	9b e3       	ldi	r25, 0x3B	; 59
   18b58:	a0 e0       	ldi	r26, 0x00	; 0
   18b5a:	81 83       	std	Z+1, r24	; 0x01
   18b5c:	92 83       	std	Z+2, r25	; 0x02
   18b5e:	a3 83       	std	Z+3, r26	; 0x03
   18b60:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   18b64:	00 e0       	ldi	r16, 0x00	; 0
   18b66:	10 e0       	ldi	r17, 0x00	; 0
   18b68:	ec 89       	ldd	r30, Y+20	; 0x14
   18b6a:	fd 89       	ldd	r31, Y+21	; 0x15
   18b6c:	44 81       	ldd	r20, Z+4	; 0x04
   18b6e:	55 81       	ldd	r21, Z+5	; 0x05
   18b70:	66 81       	ldd	r22, Z+6	; 0x06
   18b72:	77 81       	ldd	r23, Z+7	; 0x07
   18b74:	41 15       	cp	r20, r1
   18b76:	51 05       	cpc	r21, r1
   18b78:	61 05       	cpc	r22, r1
   18b7a:	71 05       	cpc	r23, r1
   18b7c:	99 f1       	breq	.+102    	; 0x18be4 <lif_check_dir+0x146>
   18b7e:	e4 5a       	subi	r30, 0xA4	; 164
   18b80:	ff 4f       	sbci	r31, 0xFF	; 255
   18b82:	80 80       	ld	r8, Z
   18b84:	91 80       	ldd	r9, Z+1	; 0x01
   18b86:	a2 80       	ldd	r10, Z+2	; 0x02
   18b88:	b3 80       	ldd	r11, Z+3	; 0x03
   18b8a:	ec 89       	ldd	r30, Y+20	; 0x14
   18b8c:	fd 89       	ldd	r31, Y+21	; 0x15
   18b8e:	e0 5a       	subi	r30, 0xA0	; 160
   18b90:	ff 4f       	sbci	r31, 0xFF	; 255
   18b92:	80 81       	ld	r24, Z
   18b94:	91 81       	ldd	r25, Z+1	; 0x01
   18b96:	a2 81       	ldd	r26, Z+2	; 0x02
   18b98:	b3 81       	ldd	r27, Z+3	; 0x03
   18b9a:	88 0d       	add	r24, r8
   18b9c:	99 1d       	adc	r25, r9
   18b9e:	aa 1d       	adc	r26, r10
   18ba0:	bb 1d       	adc	r27, r11
   18ba2:	48 17       	cp	r20, r24
   18ba4:	59 07       	cpc	r21, r25
   18ba6:	6a 07       	cpc	r22, r26
   18ba8:	7b 07       	cpc	r23, r27
   18baa:	e0 f4       	brcc	.+56     	; 0x18be4 <lif_check_dir+0x146>
   18bac:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   18bb0:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18bb4:	32 ff       	sbrs	r19, 2
   18bb6:	14 c0       	rjmp	.+40     	; 0x18be0 <lif_check_dir+0x142>
   18bb8:	ed b7       	in	r30, 0x3d	; 61
   18bba:	fe b7       	in	r31, 0x3e	; 62
   18bbc:	42 87       	std	Z+10, r20	; 0x0a
   18bbe:	53 87       	std	Z+11, r21	; 0x0b
   18bc0:	64 87       	std	Z+12, r22	; 0x0c
   18bc2:	75 87       	std	Z+13, r23	; 0x0d
   18bc4:	86 83       	std	Z+6, r24	; 0x06
   18bc6:	97 83       	std	Z+7, r25	; 0x07
   18bc8:	a0 87       	std	Z+8, r26	; 0x08
   18bca:	b1 87       	std	Z+9, r27	; 0x09
   18bcc:	f5 82       	std	Z+5, r15	; 0x05
   18bce:	e4 82       	std	Z+4, r14	; 0x04
   18bd0:	85 ea       	ldi	r24, 0xA5	; 165
   18bd2:	9b e3       	ldi	r25, 0x3B	; 59
   18bd4:	a0 e0       	ldi	r26, 0x00	; 0
   18bd6:	81 83       	std	Z+1, r24	; 0x01
   18bd8:	92 83       	std	Z+2, r25	; 0x02
   18bda:	a3 83       	std	Z+3, r26	; 0x03
   18bdc:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   18be0:	00 e0       	ldi	r16, 0x00	; 0
   18be2:	10 e0       	ldi	r17, 0x00	; 0
   18be4:	ec 89       	ldd	r30, Y+20	; 0x14
   18be6:	fd 89       	ldd	r31, Y+21	; 0x15
   18be8:	e6 59       	subi	r30, 0x96	; 150
   18bea:	ff 4f       	sbci	r31, 0xFF	; 255
   18bec:	80 81       	ld	r24, Z
   18bee:	91 81       	ldd	r25, Z+1	; 0x01
   18bf0:	81 30       	cpi	r24, 0x01	; 1
   18bf2:	f0 e8       	ldi	r31, 0x80	; 128
   18bf4:	9f 07       	cpc	r25, r31
   18bf6:	b1 f0       	breq	.+44     	; 0x18c24 <lif_check_dir+0x186>
   18bf8:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   18bfc:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18c00:	32 ff       	sbrs	r19, 2
   18c02:	0e c0       	rjmp	.+28     	; 0x18c20 <lif_check_dir+0x182>
   18c04:	ed b7       	in	r30, 0x3d	; 61
   18c06:	fe b7       	in	r31, 0x3e	; 62
   18c08:	97 83       	std	Z+7, r25	; 0x07
   18c0a:	86 83       	std	Z+6, r24	; 0x06
   18c0c:	f5 82       	std	Z+5, r15	; 0x05
   18c0e:	e4 82       	std	Z+4, r14	; 0x04
   18c10:	87 e7       	ldi	r24, 0x77	; 119
   18c12:	9b e3       	ldi	r25, 0x3B	; 59
   18c14:	a0 e0       	ldi	r26, 0x00	; 0
   18c16:	81 83       	std	Z+1, r24	; 0x01
   18c18:	92 83       	std	Z+2, r25	; 0x02
   18c1a:	a3 83       	std	Z+3, r26	; 0x03
   18c1c:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   18c20:	00 e0       	ldi	r16, 0x00	; 0
   18c22:	10 e0       	ldi	r17, 0x00	; 0
   18c24:	f6 01       	movw	r30, r12
   18c26:	80 81       	ld	r24, Z
   18c28:	91 81       	ldd	r25, Z+1	; 0x01
   18c2a:	8c 7f       	andi	r24, 0xFC	; 252
   18c2c:	80 31       	cpi	r24, 0x10	; 16
   18c2e:	90 4e       	sbci	r25, 0xE0	; 224
   18c30:	09 f0       	breq	.+2      	; 0x18c34 <lif_check_dir+0x196>
   18c32:	b3 c0       	rjmp	.+358    	; 0x18d9a <lif_check_dir+0x2fc>
   18c34:	cc 88       	ldd	r12, Y+20	; 0x14
   18c36:	dd 88       	ldd	r13, Y+21	; 0x15
   18c38:	2c e6       	ldi	r18, 0x6C	; 108
   18c3a:	c2 0e       	add	r12, r18
   18c3c:	d1 1c       	adc	r13, r1
   18c3e:	f6 01       	movw	r30, r12
   18c40:	80 81       	ld	r24, Z
   18c42:	91 81       	ldd	r25, Z+1	; 0x01
   18c44:	00 97       	sbiw	r24, 0x00	; 0
   18c46:	09 f4       	brne	.+2      	; 0x18c4a <lif_check_dir+0x1ac>
   18c48:	a8 c0       	rjmp	.+336    	; 0x18d9a <lif_check_dir+0x2fc>
   18c4a:	4c 01       	movw	r8, r24
   18c4c:	a1 2c       	mov	r10, r1
   18c4e:	b1 2c       	mov	r11, r1
   18c50:	77 27       	eor	r23, r23
   18c52:	6b 2d       	mov	r22, r11
   18c54:	5a 2d       	mov	r21, r10
   18c56:	49 2d       	mov	r20, r9
   18c58:	9c 01       	movw	r18, r24
   18c5a:	33 27       	eor	r19, r19
   18c5c:	3b 8b       	std	Y+19, r19	; 0x13
   18c5e:	2a 8b       	std	Y+18, r18	; 0x12
   18c60:	db 01       	movw	r26, r22
   18c62:	ca 01       	movw	r24, r20
   18c64:	23 2b       	or	r18, r19
   18c66:	19 f0       	breq	.+6      	; 0x18c6e <lif_check_dir+0x1d0>
   18c68:	01 96       	adiw	r24, 0x01	; 1
   18c6a:	a1 1d       	adc	r26, r1
   18c6c:	b1 1d       	adc	r27, r1
   18c6e:	2c 88       	ldd	r2, Y+20	; 0x14
   18c70:	3d 88       	ldd	r3, Y+21	; 0x15
   18c72:	30 e6       	ldi	r19, 0x60	; 96
   18c74:	23 0e       	add	r2, r19
   18c76:	31 1c       	adc	r3, r1
   18c78:	f1 01       	movw	r30, r2
   18c7a:	40 80       	ld	r4, Z
   18c7c:	51 80       	ldd	r5, Z+1	; 0x01
   18c7e:	62 80       	ldd	r6, Z+2	; 0x02
   18c80:	73 80       	ldd	r7, Z+3	; 0x03
   18c82:	48 16       	cp	r4, r24
   18c84:	59 06       	cpc	r5, r25
   18c86:	6a 06       	cpc	r6, r26
   18c88:	7b 06       	cpc	r7, r27
   18c8a:	40 f5       	brcc	.+80     	; 0x18cdc <lif_check_dir+0x23e>
   18c8c:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   18c90:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18c94:	32 ff       	sbrs	r19, 2
   18c96:	20 c0       	rjmp	.+64     	; 0x18cd8 <lif_check_dir+0x23a>
   18c98:	2a 89       	ldd	r18, Y+18	; 0x12
   18c9a:	3b 89       	ldd	r19, Y+19	; 0x13
   18c9c:	23 2b       	or	r18, r19
   18c9e:	21 f0       	breq	.+8      	; 0x18ca8 <lif_check_dir+0x20a>
   18ca0:	4f 5f       	subi	r20, 0xFF	; 255
   18ca2:	5f 4f       	sbci	r21, 0xFF	; 255
   18ca4:	6f 4f       	sbci	r22, 0xFF	; 255
   18ca6:	7f 4f       	sbci	r23, 0xFF	; 255
   18ca8:	ed b7       	in	r30, 0x3d	; 61
   18caa:	fe b7       	in	r31, 0x3e	; 62
   18cac:	46 86       	std	Z+14, r4	; 0x0e
   18cae:	57 86       	std	Z+15, r5	; 0x0f
   18cb0:	60 8a       	std	Z+16, r6	; 0x10
   18cb2:	71 8a       	std	Z+17, r7	; 0x11
   18cb4:	42 87       	std	Z+10, r20	; 0x0a
   18cb6:	53 87       	std	Z+11, r21	; 0x0b
   18cb8:	64 87       	std	Z+12, r22	; 0x0c
   18cba:	75 87       	std	Z+13, r23	; 0x0d
   18cbc:	86 82       	std	Z+6, r8	; 0x06
   18cbe:	97 82       	std	Z+7, r9	; 0x07
   18cc0:	a0 86       	std	Z+8, r10	; 0x08
   18cc2:	b1 86       	std	Z+9, r11	; 0x09
   18cc4:	f5 82       	std	Z+5, r15	; 0x05
   18cc6:	e4 82       	std	Z+4, r14	; 0x04
   18cc8:	8c e2       	ldi	r24, 0x2C	; 44
   18cca:	9b e3       	ldi	r25, 0x3B	; 59
   18ccc:	a0 e0       	ldi	r26, 0x00	; 0
   18cce:	81 83       	std	Z+1, r24	; 0x01
   18cd0:	92 83       	std	Z+2, r25	; 0x02
   18cd2:	a3 83       	std	Z+3, r26	; 0x03
   18cd4:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   18cd8:	00 e0       	ldi	r16, 0x00	; 0
   18cda:	10 e0       	ldi	r17, 0x00	; 0
   18cdc:	f6 01       	movw	r30, r12
   18cde:	20 81       	ld	r18, Z
   18ce0:	31 81       	ldd	r19, Z+1	; 0x01
   18ce2:	a9 01       	movw	r20, r18
   18ce4:	60 e0       	ldi	r22, 0x00	; 0
   18ce6:	70 e0       	ldi	r23, 0x00	; 0
   18ce8:	bb 27       	eor	r27, r27
   18cea:	a7 2f       	mov	r26, r23
   18cec:	96 2f       	mov	r25, r22
   18cee:	85 2f       	mov	r24, r21
   18cf0:	f9 01       	movw	r30, r18
   18cf2:	ff 27       	eor	r31, r31
   18cf4:	fb 8b       	std	Y+19, r31	; 0x13
   18cf6:	ea 8b       	std	Y+18, r30	; 0x12
   18cf8:	2c 01       	movw	r4, r24
   18cfa:	3d 01       	movw	r6, r26
   18cfc:	ef 2b       	or	r30, r31
   18cfe:	29 f0       	breq	.+10     	; 0x18d0a <lif_check_dir+0x26c>
   18d00:	ff ef       	ldi	r31, 0xFF	; 255
   18d02:	4f 1a       	sub	r4, r31
   18d04:	5f 0a       	sbc	r5, r31
   18d06:	6f 0a       	sbc	r6, r31
   18d08:	7f 0a       	sbc	r7, r31
   18d0a:	f1 01       	movw	r30, r2
   18d0c:	80 80       	ld	r8, Z
   18d0e:	91 80       	ldd	r9, Z+1	; 0x01
   18d10:	a2 80       	ldd	r10, Z+2	; 0x02
   18d12:	b3 80       	ldd	r11, Z+3	; 0x03
   18d14:	48 14       	cp	r4, r8
   18d16:	59 04       	cpc	r5, r9
   18d18:	6a 04       	cpc	r6, r10
   18d1a:	7b 04       	cpc	r7, r11
   18d1c:	28 f5       	brcc	.+74     	; 0x18d68 <lif_check_dir+0x2ca>
   18d1e:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   18d22:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18d26:	32 ff       	sbrs	r19, 2
   18d28:	1f c0       	rjmp	.+62     	; 0x18d68 <lif_check_dir+0x2ca>
   18d2a:	2a 89       	ldd	r18, Y+18	; 0x12
   18d2c:	3b 89       	ldd	r19, Y+19	; 0x13
   18d2e:	23 2b       	or	r18, r19
   18d30:	19 f0       	breq	.+6      	; 0x18d38 <lif_check_dir+0x29a>
   18d32:	01 96       	adiw	r24, 0x01	; 1
   18d34:	a1 1d       	adc	r26, r1
   18d36:	b1 1d       	adc	r27, r1
   18d38:	ed b7       	in	r30, 0x3d	; 61
   18d3a:	fe b7       	in	r31, 0x3e	; 62
   18d3c:	86 86       	std	Z+14, r8	; 0x0e
   18d3e:	97 86       	std	Z+15, r9	; 0x0f
   18d40:	a0 8a       	std	Z+16, r10	; 0x10
   18d42:	b1 8a       	std	Z+17, r11	; 0x11
   18d44:	82 87       	std	Z+10, r24	; 0x0a
   18d46:	93 87       	std	Z+11, r25	; 0x0b
   18d48:	a4 87       	std	Z+12, r26	; 0x0c
   18d4a:	b5 87       	std	Z+13, r27	; 0x0d
   18d4c:	46 83       	std	Z+6, r20	; 0x06
   18d4e:	57 83       	std	Z+7, r21	; 0x07
   18d50:	60 87       	std	Z+8, r22	; 0x08
   18d52:	71 87       	std	Z+9, r23	; 0x09
   18d54:	f5 82       	std	Z+5, r15	; 0x05
   18d56:	e4 82       	std	Z+4, r14	; 0x04
   18d58:	81 ee       	ldi	r24, 0xE1	; 225
   18d5a:	9a e3       	ldi	r25, 0x3A	; 58
   18d5c:	a0 e0       	ldi	r26, 0x00	; 0
   18d5e:	81 83       	std	Z+1, r24	; 0x01
   18d60:	92 83       	std	Z+2, r25	; 0x02
   18d62:	a3 83       	std	Z+3, r26	; 0x03
   18d64:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   18d68:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18d6c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18d70:	92 ff       	sbrs	r25, 2
   18d72:	13 c0       	rjmp	.+38     	; 0x18d9a <lif_check_dir+0x2fc>
   18d74:	f6 01       	movw	r30, r12
   18d76:	80 81       	ld	r24, Z
   18d78:	91 81       	ldd	r25, Z+1	; 0x01
   18d7a:	89 2b       	or	r24, r25
   18d7c:	71 f4       	brne	.+28     	; 0x18d9a <lif_check_dir+0x2fc>
   18d7e:	ed b7       	in	r30, 0x3d	; 61
   18d80:	fe b7       	in	r31, 0x3e	; 62
   18d82:	f5 82       	std	Z+5, r15	; 0x05
   18d84:	e4 82       	std	Z+4, r14	; 0x04
   18d86:	86 eb       	ldi	r24, 0xB6	; 182
   18d88:	9a e3       	ldi	r25, 0x3A	; 58
   18d8a:	a0 e0       	ldi	r26, 0x00	; 0
   18d8c:	81 83       	std	Z+1, r24	; 0x01
   18d8e:	92 83       	std	Z+2, r25	; 0x02
   18d90:	a3 83       	std	Z+3, r26	; 0x03
   18d92:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   18d96:	00 e0       	ldi	r16, 0x00	; 0
   18d98:	10 e0       	ldi	r17, 0x00	; 0
   18d9a:	ec 89       	ldd	r30, Y+20	; 0x14
   18d9c:	fd 89       	ldd	r31, Y+21	; 0x15
   18d9e:	e2 59       	subi	r30, 0x92	; 146
   18da0:	ff 4f       	sbci	r31, 0xFF	; 255
   18da2:	20 81       	ld	r18, Z
   18da4:	31 81       	ldd	r19, Z+1	; 0x01
   18da6:	21 15       	cp	r18, r1
   18da8:	f1 e0       	ldi	r31, 0x01	; 1
   18daa:	3f 07       	cpc	r19, r31
   18dac:	41 f1       	breq	.+80     	; 0x18dfe <lif_check_dir+0x360>
   18dae:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   18db2:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18db6:	ca 01       	movw	r24, r20
   18db8:	88 27       	eor	r24, r24
   18dba:	94 70       	andi	r25, 0x04	; 4
   18dbc:	52 ff       	sbrs	r21, 2
   18dbe:	20 c0       	rjmp	.+64     	; 0x18e00 <lif_check_dir+0x362>
   18dc0:	c9 01       	movw	r24, r18
   18dc2:	a0 e0       	ldi	r26, 0x00	; 0
   18dc4:	b0 e0       	ldi	r27, 0x00	; 0
   18dc6:	ed b7       	in	r30, 0x3d	; 61
   18dc8:	fe b7       	in	r31, 0x3e	; 62
   18dca:	86 83       	std	Z+6, r24	; 0x06
   18dcc:	97 83       	std	Z+7, r25	; 0x07
   18dce:	a0 87       	std	Z+8, r26	; 0x08
   18dd0:	b1 87       	std	Z+9, r27	; 0x09
   18dd2:	ec 89       	ldd	r30, Y+20	; 0x14
   18dd4:	fd 89       	ldd	r31, Y+21	; 0x15
   18dd6:	80 81       	ld	r24, Z
   18dd8:	91 81       	ldd	r25, Z+1	; 0x01
   18dda:	ed b7       	in	r30, 0x3d	; 61
   18ddc:	fe b7       	in	r31, 0x3e	; 62
   18dde:	95 83       	std	Z+5, r25	; 0x05
   18de0:	84 83       	std	Z+4, r24	; 0x04
   18de2:	8a e8       	ldi	r24, 0x8A	; 138
   18de4:	9a e3       	ldi	r25, 0x3A	; 58
   18de6:	a0 e0       	ldi	r26, 0x00	; 0
   18de8:	81 83       	std	Z+1, r24	; 0x01
   18dea:	92 83       	std	Z+2, r25	; 0x02
   18dec:	a3 83       	std	Z+3, r26	; 0x03
   18dee:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   18df2:	80 e0       	ldi	r24, 0x00	; 0
   18df4:	90 e0       	ldi	r25, 0x00	; 0
   18df6:	04 c0       	rjmp	.+8      	; 0x18e00 <lif_check_dir+0x362>
   18df8:	81 e0       	ldi	r24, 0x01	; 1
   18dfa:	90 e0       	ldi	r25, 0x00	; 0
   18dfc:	01 c0       	rjmp	.+2      	; 0x18e00 <lif_check_dir+0x362>
   18dfe:	c8 01       	movw	r24, r16
   18e00:	65 96       	adiw	r28, 0x15	; 21
   18e02:	e2 e1       	ldi	r30, 0x12	; 18
   18e04:	0c 94 25 e3 	jmp	0x1c64a	; 0x1c64a <__epilogue_restores__>

00018e08 <lif_close_volume>:
   18e08:	cf 93       	push	r28
   18e0a:	df 93       	push	r29
   18e0c:	00 97       	sbiw	r24, 0x00	; 0
   18e0e:	f9 f0       	breq	.+62     	; 0x18e4e <lif_close_volume+0x46>
   18e10:	ec 01       	movw	r28, r24
   18e12:	8a 81       	ldd	r24, Y+2	; 0x02
   18e14:	9b 81       	ldd	r25, Y+3	; 0x03
   18e16:	00 97       	sbiw	r24, 0x00	; 0
   18e18:	79 f0       	breq	.+30     	; 0x18e38 <lif_close_volume+0x30>
   18e1a:	22 e0       	ldi	r18, 0x02	; 2
   18e1c:	30 e0       	ldi	r19, 0x00	; 0
   18e1e:	40 e0       	ldi	r20, 0x00	; 0
   18e20:	50 e0       	ldi	r21, 0x00	; 0
   18e22:	ba 01       	movw	r22, r20
   18e24:	0e 94 4d 79 	call	0xf29a	; 0xf29a <fseek>
   18e28:	8a 81       	ldd	r24, Y+2	; 0x02
   18e2a:	9b 81       	ldd	r25, Y+3	; 0x03
   18e2c:	0e 94 35 7b 	call	0xf66a	; 0xf66a <fclose>
   18e30:	1b 82       	std	Y+3, r1	; 0x03
   18e32:	1a 82       	std	Y+2, r1	; 0x02
   18e34:	0e 94 30 7a 	call	0xf460	; 0xf460 <sync>
   18e38:	88 81       	ld	r24, Y
   18e3a:	99 81       	ldd	r25, Y+1	; 0x01
   18e3c:	00 97       	sbiw	r24, 0x00	; 0
   18e3e:	11 f0       	breq	.+4      	; 0x18e44 <lif_close_volume+0x3c>
   18e40:	0e 94 80 bd 	call	0x17b00	; 0x17b00 <lif_free>
   18e44:	ce 01       	movw	r24, r28
   18e46:	73 db       	rcall	.-2330   	; 0x1852e <lif_vol_clear>
   18e48:	ce 01       	movw	r24, r28
   18e4a:	0e 94 80 bd 	call	0x17b00	; 0x17b00 <lif_free>
   18e4e:	df 91       	pop	r29
   18e50:	cf 91       	pop	r28
   18e52:	08 95       	ret

00018e54 <lif_checkdirindex>:
   18e54:	cf 92       	push	r12
   18e56:	df 92       	push	r13
   18e58:	ef 92       	push	r14
   18e5a:	ff 92       	push	r15
   18e5c:	cf 93       	push	r28
   18e5e:	df 93       	push	r29
   18e60:	ad b7       	in	r26, 0x3d	; 61
   18e62:	be b7       	in	r27, 0x3e	; 62
   18e64:	17 97       	sbiw	r26, 0x07	; 7
   18e66:	0f b6       	in	r0, 0x3f	; 63
   18e68:	f8 94       	cli
   18e6a:	be bf       	out	0x3e, r27	; 62
   18e6c:	0f be       	out	0x3f, r0	; 63
   18e6e:	ad bf       	out	0x3d, r26	; 61
   18e70:	9b 01       	movw	r18, r22
   18e72:	77 fd       	sbrc	r23, 7
   18e74:	25 c0       	rjmp	.+74     	; 0x18ec0 <lif_checkdirindex+0x6c>
   18e76:	ab 01       	movw	r20, r22
   18e78:	77 0f       	add	r23, r23
   18e7a:	66 0b       	sbc	r22, r22
   18e7c:	77 0b       	sbc	r23, r23
   18e7e:	e5 e0       	ldi	r30, 0x05	; 5
   18e80:	44 0f       	add	r20, r20
   18e82:	55 1f       	adc	r21, r21
   18e84:	66 1f       	adc	r22, r22
   18e86:	77 1f       	adc	r23, r23
   18e88:	ea 95       	dec	r30
   18e8a:	d1 f7       	brne	.-12     	; 0x18e80 <lif_checkdirindex+0x2c>
   18e8c:	c5 2e       	mov	r12, r21
   18e8e:	d6 2e       	mov	r13, r22
   18e90:	e7 2e       	mov	r14, r23
   18e92:	ff 24       	eor	r15, r15
   18e94:	55 27       	eor	r21, r21
   18e96:	66 27       	eor	r22, r22
   18e98:	77 27       	eor	r23, r23
   18e9a:	45 2b       	or	r20, r21
   18e9c:	46 2b       	or	r20, r22
   18e9e:	47 2b       	or	r20, r23
   18ea0:	29 f0       	breq	.+10     	; 0x18eac <lif_checkdirindex+0x58>
   18ea2:	4f ef       	ldi	r20, 0xFF	; 255
   18ea4:	c4 1a       	sub	r12, r20
   18ea6:	d4 0a       	sbc	r13, r20
   18ea8:	e4 0a       	sbc	r14, r20
   18eaa:	f4 0a       	sbc	r15, r20
   18eac:	fc 01       	movw	r30, r24
   18eae:	45 a9       	ldd	r20, Z+53	; 0x35
   18eb0:	56 a9       	ldd	r21, Z+54	; 0x36
   18eb2:	67 a9       	ldd	r22, Z+55	; 0x37
   18eb4:	70 ad       	ldd	r23, Z+56	; 0x38
   18eb6:	4c 15       	cp	r20, r12
   18eb8:	5d 05       	cpc	r21, r13
   18eba:	6e 05       	cpc	r22, r14
   18ebc:	7f 05       	cpc	r23, r15
   18ebe:	08 f5       	brcc	.+66     	; 0x18f02 <lif_checkdirindex+0xae>
   18ec0:	ec 01       	movw	r28, r24
   18ec2:	ed b7       	in	r30, 0x3d	; 61
   18ec4:	fe b7       	in	r31, 0x3e	; 62
   18ec6:	37 83       	std	Z+7, r19	; 0x07
   18ec8:	26 83       	std	Z+6, r18	; 0x06
   18eca:	88 81       	ld	r24, Y
   18ecc:	99 81       	ldd	r25, Y+1	; 0x01
   18ece:	95 83       	std	Z+5, r25	; 0x05
   18ed0:	84 83       	std	Z+4, r24	; 0x04
   18ed2:	87 ec       	ldi	r24, 0xC7	; 199
   18ed4:	99 e3       	ldi	r25, 0x39	; 57
   18ed6:	a0 e0       	ldi	r26, 0x00	; 0
   18ed8:	81 83       	std	Z+1, r24	; 0x01
   18eda:	92 83       	std	Z+2, r25	; 0x02
   18edc:	a3 83       	std	Z+3, r26	; 0x03
   18ede:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   18ee2:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   18ee6:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18eea:	c9 01       	movw	r24, r18
   18eec:	88 27       	eor	r24, r24
   18eee:	94 70       	andi	r25, 0x04	; 4
   18ef0:	32 ff       	sbrs	r19, 2
   18ef2:	09 c0       	rjmp	.+18     	; 0x18f06 <lif_checkdirindex+0xb2>
   18ef4:	6c ef       	ldi	r22, 0xFC	; 252
   18ef6:	75 e1       	ldi	r23, 0x15	; 21
   18ef8:	ce 01       	movw	r24, r28
   18efa:	20 db       	rcall	.-2496   	; 0x1853c <lif_dump_vol>
   18efc:	80 e0       	ldi	r24, 0x00	; 0
   18efe:	90 e0       	ldi	r25, 0x00	; 0
   18f00:	02 c0       	rjmp	.+4      	; 0x18f06 <lif_checkdirindex+0xb2>
   18f02:	81 e0       	ldi	r24, 0x01	; 1
   18f04:	90 e0       	ldi	r25, 0x00	; 0
   18f06:	ad b7       	in	r26, 0x3d	; 61
   18f08:	be b7       	in	r27, 0x3e	; 62
   18f0a:	17 96       	adiw	r26, 0x07	; 7
   18f0c:	0f b6       	in	r0, 0x3f	; 63
   18f0e:	f8 94       	cli
   18f10:	be bf       	out	0x3e, r27	; 62
   18f12:	0f be       	out	0x3f, r0	; 63
   18f14:	ad bf       	out	0x3d, r26	; 61
   18f16:	df 91       	pop	r29
   18f18:	cf 91       	pop	r28
   18f1a:	ff 90       	pop	r15
   18f1c:	ef 90       	pop	r14
   18f1e:	df 90       	pop	r13
   18f20:	cf 90       	pop	r12
   18f22:	08 95       	ret

00018f24 <lif_readdirindex>:
   18f24:	a5 e2       	ldi	r26, 0x25	; 37
   18f26:	b0 e0       	ldi	r27, 0x00	; 0
   18f28:	e8 e9       	ldi	r30, 0x98	; 152
   18f2a:	f7 ec       	ldi	r31, 0xC7	; 199
   18f2c:	0c 94 13 e3 	jmp	0x1c626	; 0x1c626 <__prologue_saves__+0x14>
   18f30:	7c 01       	movw	r14, r24
   18f32:	6b 01       	movw	r12, r22
   18f34:	8f df       	rcall	.-226    	; 0x18e54 <lif_checkdirindex>
   18f36:	89 2b       	or	r24, r25
   18f38:	19 f4       	brne	.+6      	; 0x18f40 <lif_readdirindex+0x1c>
   18f3a:	00 e0       	ldi	r16, 0x00	; 0
   18f3c:	10 e0       	ldi	r17, 0x00	; 0
   18f3e:	54 c0       	rjmp	.+168    	; 0x18fe8 <lif_readdirindex+0xc4>
   18f40:	f7 01       	movw	r30, r14
   18f42:	85 a5       	ldd	r24, Z+45	; 0x2d
   18f44:	96 a5       	ldd	r25, Z+46	; 0x2e
   18f46:	a7 a5       	ldd	r26, Z+47	; 0x2f
   18f48:	b0 a9       	ldd	r27, Z+48	; 0x30
   18f4a:	44 27       	eor	r20, r20
   18f4c:	58 2f       	mov	r21, r24
   18f4e:	69 2f       	mov	r22, r25
   18f50:	7a 2f       	mov	r23, r26
   18f52:	c6 01       	movw	r24, r12
   18f54:	0d 2c       	mov	r0, r13
   18f56:	00 0c       	add	r0, r0
   18f58:	aa 0b       	sbc	r26, r26
   18f5a:	bb 0b       	sbc	r27, r27
   18f5c:	35 e0       	ldi	r19, 0x05	; 5
   18f5e:	88 0f       	add	r24, r24
   18f60:	99 1f       	adc	r25, r25
   18f62:	aa 1f       	adc	r26, r26
   18f64:	bb 1f       	adc	r27, r27
   18f66:	3a 95       	dec	r19
   18f68:	d1 f7       	brne	.-12     	; 0x18f5e <lif_readdirindex+0x3a>
   18f6a:	9a 01       	movw	r18, r20
   18f6c:	ab 01       	movw	r20, r22
   18f6e:	28 0f       	add	r18, r24
   18f70:	39 1f       	adc	r19, r25
   18f72:	4a 1f       	adc	r20, r26
   18f74:	5b 1f       	adc	r21, r27
   18f76:	00 e2       	ldi	r16, 0x20	; 32
   18f78:	10 e0       	ldi	r17, 0x00	; 0
   18f7a:	be 01       	movw	r22, r28
   18f7c:	6a 5f       	subi	r22, 0xFA	; 250
   18f7e:	7f 4f       	sbci	r23, 0xFF	; 255
   18f80:	c7 01       	movw	r24, r14
   18f82:	0e 94 38 be 	call	0x17c70	; 0x17c70 <lif_read>
   18f86:	60 32       	cpi	r22, 0x20	; 32
   18f88:	71 05       	cpc	r23, r1
   18f8a:	81 05       	cpc	r24, r1
   18f8c:	91 05       	cpc	r25, r1
   18f8e:	a8 f2       	brcs	.-86     	; 0x18f3a <lif_readdirindex+0x16>
   18f90:	b7 01       	movw	r22, r14
   18f92:	ce 01       	movw	r24, r28
   18f94:	06 96       	adiw	r24, 0x06	; 6
   18f96:	75 d9       	rcall	.-3350   	; 0x18282 <lif_str2dir>
   18f98:	f7 01       	movw	r30, r14
   18f9a:	e6 5a       	subi	r30, 0xA6	; 166
   18f9c:	ff 4f       	sbci	r31, 0xFF	; 255
   18f9e:	80 81       	ld	r24, Z
   18fa0:	91 81       	ldd	r25, Z+1	; 0x01
   18fa2:	01 96       	adiw	r24, 0x01	; 1
   18fa4:	19 f4       	brne	.+6      	; 0x18fac <lif_readdirindex+0x88>
   18fa6:	f7 01       	movw	r30, r14
   18fa8:	d3 a2       	std	Z+35, r13	; 0x23
   18faa:	c2 a2       	std	Z+34, r12	; 0x22
   18fac:	c7 01       	movw	r24, r14
   18fae:	77 dd       	rcall	.-1298   	; 0x18a9e <lif_check_dir>
   18fb0:	8c 01       	movw	r16, r24
   18fb2:	89 2b       	or	r24, r25
   18fb4:	b9 f4       	brne	.+46     	; 0x18fe4 <lif_readdirindex+0xc0>
   18fb6:	ed b7       	in	r30, 0x3d	; 61
   18fb8:	fe b7       	in	r31, 0x3e	; 62
   18fba:	d5 82       	std	Z+5, r13	; 0x05
   18fbc:	c4 82       	std	Z+4, r12	; 0x04
   18fbe:	87 ea       	ldi	r24, 0xA7	; 167
   18fc0:	99 e3       	ldi	r25, 0x39	; 57
   18fc2:	a0 e0       	ldi	r26, 0x00	; 0
   18fc4:	81 83       	std	Z+1, r24	; 0x01
   18fc6:	92 83       	std	Z+2, r25	; 0x02
   18fc8:	a3 83       	std	Z+3, r26	; 0x03
   18fca:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   18fce:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18fd2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18fd6:	92 ff       	sbrs	r25, 2
   18fd8:	b0 cf       	rjmp	.-160    	; 0x18f3a <lif_readdirindex+0x16>
   18fda:	6d e0       	ldi	r22, 0x0D	; 13
   18fdc:	76 e1       	ldi	r23, 0x16	; 22
   18fde:	c7 01       	movw	r24, r14
   18fe0:	ad da       	rcall	.-2726   	; 0x1853c <lif_dump_vol>
   18fe2:	02 c0       	rjmp	.+4      	; 0x18fe8 <lif_readdirindex+0xc4>
   18fe4:	01 e0       	ldi	r16, 0x01	; 1
   18fe6:	10 e0       	ldi	r17, 0x00	; 0
   18fe8:	c8 01       	movw	r24, r16
   18fea:	a5 96       	adiw	r28, 0x25	; 37
   18fec:	e8 e0       	ldi	r30, 0x08	; 8
   18fee:	0c 94 2f e3 	jmp	0x1c65e	; 0x1c65e <__epilogue_restores__+0x14>

00018ff2 <lif_writedirindex>:
   18ff2:	a0 e2       	ldi	r26, 0x20	; 32
   18ff4:	b0 e0       	ldi	r27, 0x00	; 0
   18ff6:	ef ef       	ldi	r30, 0xFF	; 255
   18ff8:	f7 ec       	ldi	r31, 0xC7	; 199
   18ffa:	0c 94 11 e3 	jmp	0x1c622	; 0x1c622 <__prologue_saves__+0x10>
   18ffe:	5c 01       	movw	r10, r24
   19000:	6b 01       	movw	r12, r22
   19002:	4d dd       	rcall	.-1382   	; 0x18a9e <lif_check_dir>
   19004:	7c 01       	movw	r14, r24
   19006:	89 2b       	or	r24, r25
   19008:	71 f4       	brne	.+28     	; 0x19026 <lif_writedirindex+0x34>
   1900a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1900e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19012:	92 fd       	sbrc	r25, 2
   19014:	03 c0       	rjmp	.+6      	; 0x1901c <lif_writedirindex+0x2a>
   19016:	e1 2c       	mov	r14, r1
   19018:	f1 2c       	mov	r15, r1
   1901a:	42 c0       	rjmp	.+132    	; 0x190a0 <lif_writedirindex+0xae>
   1901c:	6e e1       	ldi	r22, 0x1E	; 30
   1901e:	76 e1       	ldi	r23, 0x16	; 22
   19020:	c5 01       	movw	r24, r10
   19022:	8c da       	rcall	.-2792   	; 0x1853c <lif_dump_vol>
   19024:	3d c0       	rjmp	.+122    	; 0x190a0 <lif_writedirindex+0xae>
   19026:	b6 01       	movw	r22, r12
   19028:	c5 01       	movw	r24, r10
   1902a:	14 df       	rcall	.-472    	; 0x18e54 <lif_checkdirindex>
   1902c:	89 2b       	or	r24, r25
   1902e:	99 f3       	breq	.-26     	; 0x19016 <lif_writedirindex+0x24>
   19030:	f5 01       	movw	r30, r10
   19032:	e6 5a       	subi	r30, 0xA6	; 166
   19034:	ff 4f       	sbci	r31, 0xFF	; 255
   19036:	80 81       	ld	r24, Z
   19038:	91 81       	ldd	r25, Z+1	; 0x01
   1903a:	01 96       	adiw	r24, 0x01	; 1
   1903c:	19 f4       	brne	.+6      	; 0x19044 <lif_writedirindex+0x52>
   1903e:	f5 01       	movw	r30, r10
   19040:	d3 a2       	std	Z+35, r13	; 0x23
   19042:	c2 a2       	std	Z+34, r12	; 0x22
   19044:	f5 01       	movw	r30, r10
   19046:	85 a5       	ldd	r24, Z+45	; 0x2d
   19048:	96 a5       	ldd	r25, Z+46	; 0x2e
   1904a:	a7 a5       	ldd	r26, Z+47	; 0x2f
   1904c:	b0 a9       	ldd	r27, Z+48	; 0x30
   1904e:	ba 2f       	mov	r27, r26
   19050:	a9 2f       	mov	r26, r25
   19052:	98 2f       	mov	r25, r24
   19054:	88 27       	eor	r24, r24
   19056:	0d 2c       	mov	r0, r13
   19058:	00 0c       	add	r0, r0
   1905a:	ee 08       	sbc	r14, r14
   1905c:	ff 08       	sbc	r15, r15
   1905e:	35 e0       	ldi	r19, 0x05	; 5
   19060:	cc 0c       	add	r12, r12
   19062:	dd 1c       	adc	r13, r13
   19064:	ee 1c       	adc	r14, r14
   19066:	ff 1c       	adc	r15, r15
   19068:	3a 95       	dec	r19
   1906a:	d1 f7       	brne	.-12     	; 0x19060 <lif_writedirindex+0x6e>
   1906c:	c8 0e       	add	r12, r24
   1906e:	d9 1e       	adc	r13, r25
   19070:	ea 1e       	adc	r14, r26
   19072:	fb 1e       	adc	r15, r27
   19074:	be 01       	movw	r22, r28
   19076:	6f 5f       	subi	r22, 0xFF	; 255
   19078:	7f 4f       	sbci	r23, 0xFF	; 255
   1907a:	c5 01       	movw	r24, r10
   1907c:	97 d8       	rcall	.-3794   	; 0x181ac <lif_dir2str>
   1907e:	00 e2       	ldi	r16, 0x20	; 32
   19080:	10 e0       	ldi	r17, 0x00	; 0
   19082:	a7 01       	movw	r20, r14
   19084:	96 01       	movw	r18, r12
   19086:	be 01       	movw	r22, r28
   19088:	6f 5f       	subi	r22, 0xFF	; 255
   1908a:	7f 4f       	sbci	r23, 0xFF	; 255
   1908c:	c5 01       	movw	r24, r10
   1908e:	0e 94 8b be 	call	0x17d16	; 0x17d16 <lif_write>
   19092:	31 e0       	ldi	r19, 0x01	; 1
   19094:	20 e0       	ldi	r18, 0x00	; 0
   19096:	80 97       	sbiw	r24, 0x20	; 32
   19098:	0c f4       	brge	.+2      	; 0x1909c <lif_writedirindex+0xaa>
   1909a:	30 e0       	ldi	r19, 0x00	; 0
   1909c:	e3 2e       	mov	r14, r19
   1909e:	f2 2e       	mov	r15, r18
   190a0:	c7 01       	movw	r24, r14
   190a2:	a0 96       	adiw	r28, 0x20	; 32
   190a4:	ea e0       	ldi	r30, 0x0A	; 10
   190a6:	0c 94 2d e3 	jmp	0x1c65a	; 0x1c65a <__epilogue_restores__+0x10>

000190aa <lif_writedirEOF>:
   190aa:	0f 93       	push	r16
   190ac:	1f 93       	push	r17
   190ae:	cf 93       	push	r28
   190b0:	df 93       	push	r29
   190b2:	ec 01       	movw	r28, r24
   190b4:	8b 01       	movw	r16, r22
   190b6:	33 da       	rcall	.-2970   	; 0x1851e <lif_dir_clear>
   190b8:	fe 01       	movw	r30, r28
   190ba:	e6 5a       	subi	r30, 0xA6	; 166
   190bc:	ff 4f       	sbci	r31, 0xFF	; 255
   190be:	8f ef       	ldi	r24, 0xFF	; 255
   190c0:	9f ef       	ldi	r25, 0xFF	; 255
   190c2:	91 83       	std	Z+1, r25	; 0x01
   190c4:	80 83       	st	Z, r24
   190c6:	1b a3       	std	Y+35, r17	; 0x23
   190c8:	0a a3       	std	Y+34, r16	; 0x22
   190ca:	b8 01       	movw	r22, r16
   190cc:	ce 01       	movw	r24, r28
   190ce:	91 df       	rcall	.-222    	; 0x18ff2 <lif_writedirindex>
   190d0:	df 91       	pop	r29
   190d2:	cf 91       	pop	r28
   190d4:	1f 91       	pop	r17
   190d6:	0f 91       	pop	r16
   190d8:	08 95       	ret

000190da <lif_updatefree>:
/// @brief Update free space
/// @parameter[in] *LIF: LIF structure
/// @return: LIF or NULL on error
MEMSPACE
lif_t *lif_updatefree(lif_t *LIF)
{
   190da:	2f 92       	push	r2
   190dc:	3f 92       	push	r3
   190de:	4f 92       	push	r4
   190e0:	5f 92       	push	r5
   190e2:	6f 92       	push	r6
   190e4:	7f 92       	push	r7
   190e6:	8f 92       	push	r8
   190e8:	af 92       	push	r10
   190ea:	bf 92       	push	r11
   190ec:	cf 92       	push	r12
   190ee:	df 92       	push	r13
   190f0:	ef 92       	push	r14
   190f2:	ff 92       	push	r15
   190f4:	0f 93       	push	r16
   190f6:	1f 93       	push	r17
   190f8:	cf 93       	push	r28
   190fa:	df 93       	push	r29
   190fc:	cd b7       	in	r28, 0x3d	; 61
   190fe:	de b7       	in	r29, 0x3e	; 62
   19100:	2f 97       	sbiw	r28, 0x0f	; 15
   19102:	0f b6       	in	r0, 0x3f	; 63
   19104:	f8 94       	cli
   19106:	de bf       	out	0x3e, r29	; 62
   19108:	0f be       	out	0x3f, r0	; 63
   1910a:	cd bf       	out	0x3d, r28	; 61
   1910c:	9f 87       	std	Y+15, r25	; 0x0f
   1910e:	8e 87       	std	Y+14, r24	; 0x0e
    int index = 0;
    int purgeindex = -1;

// Start of free space
    uint32_t start = LIF->filestart;
   19110:	fc 01       	movw	r30, r24
   19112:	24 84       	ldd	r2, Z+12	; 0x0c
   19114:	35 84       	ldd	r3, Z+13	; 0x0d
   19116:	46 84       	ldd	r4, Z+14	; 0x0e
   19118:	57 84       	ldd	r5, Z+15	; 0x0f
// Free sectors
    LIF->freesectors = LIF->filesectors;
   1911a:	80 89       	ldd	r24, Z+16	; 0x10
   1911c:	91 89       	ldd	r25, Z+17	; 0x11
   1911e:	a2 89       	ldd	r26, Z+18	; 0x12
   19120:	b3 89       	ldd	r27, Z+19	; 0x13
   19122:	80 8f       	std	Z+24, r24	; 0x18
   19124:	91 8f       	std	Z+25, r25	; 0x19
   19126:	a2 8f       	std	Z+26, r26	; 0x1a
   19128:	b3 8f       	std	Z+27, r27	; 0x1b
// Used sectors
    LIF->usedsectors = 0;
   1912a:	14 8a       	std	Z+20, r1	; 0x14
   1912c:	15 8a       	std	Z+21, r1	; 0x15
   1912e:	16 8a       	std	Z+22, r1	; 0x16
   19130:	17 8a       	std	Z+23, r1	; 0x17
// Purged files
    LIF->purged= 0;
   19132:	17 8e       	std	Z+31, r1	; 0x1f
   19134:	16 8e       	std	Z+30, r1	; 0x1e
// Files
    LIF->files = 0;
   19136:	15 8e       	std	Z+29, r1	; 0x1d
   19138:	14 8e       	std	Z+28, r1	; 0x1c
// Director pointer
    LIF->dirindex = 0;
   1913a:	11 a2       	std	Z+33, r1	; 0x21
   1913c:	10 a2       	std	Z+32, r1	; 0x20
// Directory EOF record
    LIF->EOFindex = 0;
   1913e:	13 a2       	std	Z+35, r1	; 0x23
   19140:	12 a2       	std	Z+34, r1	; 0x22
   19142:	cc 24       	eor	r12, r12
   19144:	c3 94       	inc	r12
   19146:	d1 2c       	mov	r13, r1
/// @return: LIF or NULL on error
MEMSPACE
lif_t *lif_updatefree(lif_t *LIF)
{
    int index = 0;
    int purgeindex = -1;
   19148:	0f ef       	ldi	r16, 0xFF	; 255
   1914a:	1f ef       	ldi	r17, 0xFF	; 255
        if( !lif_readdirindex(LIF,index) )
        {
            return(NULL);
        }

        if(LIF->DIR.FileType == 0xffff)
   1914c:	e6 5a       	subi	r30, 0xA6	; 166
   1914e:	ff 4f       	sbci	r31, 0xFF	; 255
   19150:	f9 87       	std	Y+9, r31	; 0x09
   19152:	e8 87       	std	Y+8, r30	; 0x08
            LIF->purged++;
            ++index;
            continue;
        }
        purgeindex = -1;
        if(start > LIF->DIR.FileStartSector)
   19154:	ae 84       	ldd	r10, Y+14	; 0x0e
   19156:	bf 84       	ldd	r11, Y+15	; 0x0f
   19158:	fc e5       	ldi	r31, 0x5C	; 92
   1915a:	af 0e       	add	r10, r31
   1915c:	b1 1c       	adc	r11, r1
        {
            if(debuglevel & LIF_DEBUG)
                printf("lif_update_free:[%s] error previous record file area overlaps this one:[%s]\n", LIF->name, LIF->DIR.filename);

        }
        LIF->usedsectors += LIF->DIR.FileSectors;
   1915e:	8e 85       	ldd	r24, Y+14	; 0x0e
   19160:	9f 85       	ldd	r25, Y+15	; 0x0f
   19162:	80 5a       	subi	r24, 0xA0	; 160
   19164:	9f 4f       	sbci	r25, 0xFF	; 255
   19166:	9b 87       	std	Y+11, r25	; 0x0b
   19168:	8a 87       	std	Y+10, r24	; 0x0a
        }
        purgeindex = -1;
        if(start > LIF->DIR.FileStartSector)
        {
            if(debuglevel & LIF_DEBUG)
                printf("lif_update_free:[%s] error previous record file area overlaps this one:[%s]\n", LIF->name, LIF->DIR.filename);
   1916a:	ee 85       	ldd	r30, Y+14	; 0x0e
   1916c:	ff 85       	ldd	r31, Y+15	; 0x0f
   1916e:	e1 5b       	subi	r30, 0xB1	; 177
   19170:	ff 4f       	sbci	r31, 0xFF	; 255
   19172:	fd 87       	std	Y+13, r31	; 0x0d
   19174:	ec 87       	std	Y+12, r30	; 0x0c
   19176:	8a e5       	ldi	r24, 0x5A	; 90
   19178:	99 e3       	ldi	r25, 0x39	; 57
   1917a:	3c 01       	movw	r6, r24
   1917c:	81 2c       	mov	r8, r1
   1917e:	76 01       	movw	r14, r12
   19180:	21 e0       	ldi	r18, 0x01	; 1
   19182:	e2 1a       	sub	r14, r18
   19184:	f1 08       	sbc	r15, r1
    LIF->EOFindex = 0;

/// Update free
    while(1)
    {
        if( !lif_readdirindex(LIF,index) )
   19186:	b7 01       	movw	r22, r14
   19188:	8e 85       	ldd	r24, Y+14	; 0x0e
   1918a:	9f 85       	ldd	r25, Y+15	; 0x0f
   1918c:	cb de       	rcall	.-618    	; 0x18f24 <lif_readdirindex>
   1918e:	89 2b       	or	r24, r25
   19190:	19 f4       	brne	.+6      	; 0x19198 <lif_updatefree+0xbe>
        {
            return(NULL);
   19192:	80 e0       	ldi	r24, 0x00	; 0
   19194:	90 e0       	ldi	r25, 0x00	; 0
   19196:	93 c0       	rjmp	.+294    	; 0x192be <lif_updatefree+0x1e4>
        }

        if(LIF->DIR.FileType == 0xffff)
   19198:	e8 85       	ldd	r30, Y+8	; 0x08
   1919a:	f9 85       	ldd	r31, Y+9	; 0x09
   1919c:	80 81       	ld	r24, Z
   1919e:	91 81       	ldd	r25, Z+1	; 0x01
   191a0:	8f 3f       	cpi	r24, 0xFF	; 255
   191a2:	ff ef       	ldi	r31, 0xFF	; 255
   191a4:	9f 07       	cpc	r25, r31
   191a6:	c1 f4       	brne	.+48     	; 0x191d8 <lif_updatefree+0xfe>
        {
            LIF->EOFindex = index;
            if(purgeindex != -1)
            {
                LIF->EOFindex = purgeindex;
   191a8:	ee 85       	ldd	r30, Y+14	; 0x0e
   191aa:	ff 85       	ldd	r31, Y+15	; 0x0f
        }

        if(LIF->DIR.FileType == 0xffff)
        {
            LIF->EOFindex = index;
            if(purgeindex != -1)
   191ac:	0f 3f       	cpi	r16, 0xFF	; 255
   191ae:	2f ef       	ldi	r18, 0xFF	; 255
   191b0:	12 07       	cpc	r17, r18
   191b2:	09 f4       	brne	.+2      	; 0x191b6 <lif_updatefree+0xdc>
   191b4:	7a c0       	rjmp	.+244    	; 0x192aa <lif_updatefree+0x1d0>
            {
                LIF->EOFindex = purgeindex;
   191b6:	13 a3       	std	Z+35, r17	; 0x23
   191b8:	02 a3       	std	Z+34, r16	; 0x22

// Adjust purged file count
                LIF->purged -= (index - purgeindex);
   191ba:	e0 1a       	sub	r14, r16
   191bc:	f1 0a       	sbc	r15, r17
   191be:	86 8d       	ldd	r24, Z+30	; 0x1e
   191c0:	97 8d       	ldd	r25, Z+31	; 0x1f
   191c2:	8e 19       	sub	r24, r14
   191c4:	9f 09       	sbc	r25, r15
   191c6:	97 8f       	std	Z+31, r25	; 0x1f
   191c8:	86 8f       	std	Z+30, r24	; 0x1e
// update EOF
                if(!lif_writedirEOF(LIF,purgeindex))
   191ca:	b8 01       	movw	r22, r16
   191cc:	cf 01       	movw	r24, r30
   191ce:	6d df       	rcall	.-294    	; 0x190aa <lif_writedirEOF>
   191d0:	89 2b       	or	r24, r25
   191d2:	09 f0       	breq	.+2      	; 0x191d6 <lif_updatefree+0xfc>
   191d4:	6c c0       	rjmp	.+216    	; 0x192ae <lif_updatefree+0x1d4>
   191d6:	dd cf       	rjmp	.-70     	; 0x19192 <lif_updatefree+0xb8>
                    return(NULL);
                }
            }
            break;
        }
        if(LIF->DIR.FileType == 0)
   191d8:	89 2b       	or	r24, r25
   191da:	81 f4       	brne	.+32     	; 0x191fc <lif_updatefree+0x122>
        {
            if(purgeindex == -1)
   191dc:	0f 3f       	cpi	r16, 0xFF	; 255
   191de:	ff ef       	ldi	r31, 0xFF	; 255
   191e0:	1f 07       	cpc	r17, r31
   191e2:	09 f4       	brne	.+2      	; 0x191e6 <lif_updatefree+0x10c>
   191e4:	87 01       	movw	r16, r14
                purgeindex = index;
            LIF->purged++;
   191e6:	ee 85       	ldd	r30, Y+14	; 0x0e
   191e8:	ff 85       	ldd	r31, Y+15	; 0x0f
   191ea:	86 8d       	ldd	r24, Z+30	; 0x1e
   191ec:	97 8d       	ldd	r25, Z+31	; 0x1f
   191ee:	01 96       	adiw	r24, 0x01	; 1
   191f0:	97 8f       	std	Z+31, r25	; 0x1f
   191f2:	86 8f       	std	Z+30, r24	; 0x1e
   191f4:	ff ef       	ldi	r31, 0xFF	; 255
   191f6:	cf 1a       	sub	r12, r31
   191f8:	df 0a       	sbc	r13, r31
   191fa:	c1 cf       	rjmp	.-126    	; 0x1917e <lif_updatefree+0xa4>
            ++index;
            continue;
        }
        purgeindex = -1;
        if(start > LIF->DIR.FileStartSector)
   191fc:	f5 01       	movw	r30, r10
   191fe:	80 81       	ld	r24, Z
   19200:	91 81       	ldd	r25, Z+1	; 0x01
   19202:	a2 81       	ldd	r26, Z+2	; 0x02
   19204:	b3 81       	ldd	r27, Z+3	; 0x03
   19206:	82 15       	cp	r24, r2
   19208:	93 05       	cpc	r25, r3
   1920a:	a4 05       	cpc	r26, r4
   1920c:	b5 05       	cpc	r27, r5
   1920e:	c8 f4       	brcc	.+50     	; 0x19242 <lif_updatefree+0x168>
        {
            if(debuglevel & LIF_DEBUG)
   19210:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19214:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19218:	92 ff       	sbrs	r25, 2
   1921a:	13 c0       	rjmp	.+38     	; 0x19242 <lif_updatefree+0x168>
                printf("lif_update_free:[%s] error previous record file area overlaps this one:[%s]\n", LIF->name, LIF->DIR.filename);
   1921c:	8c 85       	ldd	r24, Y+12	; 0x0c
   1921e:	9d 85       	ldd	r25, Y+13	; 0x0d
   19220:	ed b7       	in	r30, 0x3d	; 61
   19222:	fe b7       	in	r31, 0x3e	; 62
   19224:	97 83       	std	Z+7, r25	; 0x07
   19226:	86 83       	std	Z+6, r24	; 0x06
   19228:	ee 85       	ldd	r30, Y+14	; 0x0e
   1922a:	ff 85       	ldd	r31, Y+15	; 0x0f
   1922c:	80 81       	ld	r24, Z
   1922e:	91 81       	ldd	r25, Z+1	; 0x01
   19230:	ed b7       	in	r30, 0x3d	; 61
   19232:	fe b7       	in	r31, 0x3e	; 62
   19234:	95 83       	std	Z+5, r25	; 0x05
   19236:	84 83       	std	Z+4, r24	; 0x04
   19238:	61 82       	std	Z+1, r6	; 0x01
   1923a:	72 82       	std	Z+2, r7	; 0x02
   1923c:	83 82       	std	Z+3, r8	; 0x03
   1923e:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>

        }
        LIF->usedsectors += LIF->DIR.FileSectors;
   19242:	ea 85       	ldd	r30, Y+10	; 0x0a
   19244:	fb 85       	ldd	r31, Y+11	; 0x0b
   19246:	80 81       	ld	r24, Z
   19248:	91 81       	ldd	r25, Z+1	; 0x01
   1924a:	a2 81       	ldd	r26, Z+2	; 0x02
   1924c:	b3 81       	ldd	r27, Z+3	; 0x03
   1924e:	ee 85       	ldd	r30, Y+14	; 0x0e
   19250:	ff 85       	ldd	r31, Y+15	; 0x0f
   19252:	44 89       	ldd	r20, Z+20	; 0x14
   19254:	55 89       	ldd	r21, Z+21	; 0x15
   19256:	66 89       	ldd	r22, Z+22	; 0x16
   19258:	77 89       	ldd	r23, Z+23	; 0x17
   1925a:	48 0f       	add	r20, r24
   1925c:	59 1f       	adc	r21, r25
   1925e:	6a 1f       	adc	r22, r26
   19260:	7b 1f       	adc	r23, r27
   19262:	44 8b       	std	Z+20, r20	; 0x14
   19264:	55 8b       	std	Z+21, r21	; 0x15
   19266:	66 8b       	std	Z+22, r22	; 0x16
   19268:	77 8b       	std	Z+23, r23	; 0x17
        LIF->freesectors -= LIF->DIR.FileSectors;
   1926a:	40 8d       	ldd	r20, Z+24	; 0x18
   1926c:	51 8d       	ldd	r21, Z+25	; 0x19
   1926e:	62 8d       	ldd	r22, Z+26	; 0x1a
   19270:	73 8d       	ldd	r23, Z+27	; 0x1b
   19272:	48 1b       	sub	r20, r24
   19274:	59 0b       	sbc	r21, r25
   19276:	6a 0b       	sbc	r22, r26
   19278:	7b 0b       	sbc	r23, r27
   1927a:	40 8f       	std	Z+24, r20	; 0x18
   1927c:	51 8f       	std	Z+25, r21	; 0x19
   1927e:	62 8f       	std	Z+26, r22	; 0x1a
   19280:	73 8f       	std	Z+27, r23	; 0x1b
        LIF->files++;
   19282:	24 8d       	ldd	r18, Z+28	; 0x1c
   19284:	35 8d       	ldd	r19, Z+29	; 0x1d
   19286:	2f 5f       	subi	r18, 0xFF	; 255
   19288:	3f 4f       	sbci	r19, 0xFF	; 255
   1928a:	35 8f       	std	Z+29, r19	; 0x1d
   1928c:	24 8f       	std	Z+28, r18	; 0x1c
        ++index;
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   1928e:	f5 01       	movw	r30, r10
   19290:	40 81       	ld	r20, Z
   19292:	51 81       	ldd	r21, Z+1	; 0x01
   19294:	62 81       	ldd	r22, Z+2	; 0x02
   19296:	73 81       	ldd	r23, Z+3	; 0x03
   19298:	1c 01       	movw	r2, r24
   1929a:	2d 01       	movw	r4, r26
   1929c:	24 0e       	add	r2, r20
   1929e:	35 1e       	adc	r3, r21
   192a0:	46 1e       	adc	r4, r22
   192a2:	57 1e       	adc	r5, r23
                purgeindex = index;
            LIF->purged++;
            ++index;
            continue;
        }
        purgeindex = -1;
   192a4:	0f ef       	ldi	r16, 0xFF	; 255
   192a6:	1f ef       	ldi	r17, 0xFF	; 255
   192a8:	a5 cf       	rjmp	.-182    	; 0x191f4 <lif_updatefree+0x11a>
            return(NULL);
        }

        if(LIF->DIR.FileType == 0xffff)
        {
            LIF->EOFindex = index;
   192aa:	f3 a2       	std	Z+35, r15	; 0x23
   192ac:	e2 a2       	std	Z+34, r14	; 0x22
/// @return void
MEMSPACE
void lif_rewinddir(lif_t *LIF)
{
// Directory index
    LIF->dirindex = -1;
   192ae:	8f ef       	ldi	r24, 0xFF	; 255
   192b0:	9f ef       	ldi	r25, 0xFF	; 255
   192b2:	ee 85       	ldd	r30, Y+14	; 0x0e
   192b4:	ff 85       	ldd	r31, Y+15	; 0x0f
   192b6:	91 a3       	std	Z+33, r25	; 0x21
   192b8:	80 a3       	std	Z+32, r24	; 0x20
        ++index;
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
    }
// rewind
    lif_rewinddir(LIF);
    return(LIF);
   192ba:	8e 85       	ldd	r24, Y+14	; 0x0e
   192bc:	9f 85       	ldd	r25, Y+15	; 0x0f
}
   192be:	2f 96       	adiw	r28, 0x0f	; 15
   192c0:	0f b6       	in	r0, 0x3f	; 63
   192c2:	f8 94       	cli
   192c4:	de bf       	out	0x3e, r29	; 62
   192c6:	0f be       	out	0x3f, r0	; 63
   192c8:	cd bf       	out	0x3d, r28	; 61
   192ca:	df 91       	pop	r29
   192cc:	cf 91       	pop	r28
   192ce:	1f 91       	pop	r17
   192d0:	0f 91       	pop	r16
   192d2:	ff 90       	pop	r15
   192d4:	ef 90       	pop	r14
   192d6:	df 90       	pop	r13
   192d8:	cf 90       	pop	r12
   192da:	bf 90       	pop	r11
   192dc:	af 90       	pop	r10
   192de:	8f 90       	pop	r8
   192e0:	7f 90       	pop	r7
   192e2:	6f 90       	pop	r6
   192e4:	5f 90       	pop	r5
   192e6:	4f 90       	pop	r4
   192e8:	3f 90       	pop	r3
   192ea:	2f 90       	pop	r2
   192ec:	08 95       	ret

000192ee <lif_create_volume>:
/// @param[in] dirstart:   Directory start sector
/// @param[in] dirsectors: Directory sectors
/// @return pointer to LIF structure
MEMSPACE
lif_t *lif_create_volume(char *imagename, char *liflabel, long dirstart, long dirsectors, long filesectors)
{
   192ee:	a9 e2       	ldi	r26, 0x29	; 41
   192f0:	b1 e0       	ldi	r27, 0x01	; 1
   192f2:	ed e7       	ldi	r30, 0x7D	; 125
   192f4:	f9 ec       	ldi	r31, 0xC9	; 201
   192f6:	0c 94 09 e3 	jmp	0x1c612	; 0x1c612 <__prologue_saves__>
   192fa:	4c 01       	movw	r8, r24
   192fc:	3b 01       	movw	r6, r22
   192fe:	19 01       	movw	r2, r18
   19300:	2a 01       	movw	r4, r20
   19302:	ca 5d       	subi	r28, 0xDA	; 218
   19304:	de 4f       	sbci	r29, 0xFE	; 254
   19306:	e8 82       	st	Y, r14
   19308:	f9 82       	std	Y+1, r15	; 0x01
   1930a:	0a 83       	std	Y+2, r16	; 0x02
   1930c:	1b 83       	std	Y+3, r17	; 0x03
   1930e:	c6 52       	subi	r28, 0x26	; 38
   19310:	d1 40       	sbci	r29, 0x01	; 1
   19312:	c2 5e       	subi	r28, 0xE2	; 226
   19314:	de 4f       	sbci	r29, 0xFE	; 254
   19316:	a8 82       	st	Y, r10
   19318:	b9 82       	std	Y+1, r11	; 0x01
   1931a:	ca 82       	std	Y+2, r12	; 0x02
   1931c:	db 82       	std	Y+3, r13	; 0x03
   1931e:	ce 51       	subi	r28, 0x1E	; 30
   19320:	d1 40       	sbci	r29, 0x01	; 1
    long i;
    long offset;
    long count;
    uint8_t buffer[LIF_SECTOR_SIZE];

    time_t t = time(NULL);
   19322:	80 e0       	ldi	r24, 0x00	; 0
   19324:	90 e0       	ldi	r25, 0x00	; 0
   19326:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <time>
   1932a:	5b 01       	movw	r10, r22
   1932c:	6c 01       	movw	r12, r24

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
   1932e:	64 e7       	ldi	r22, 0x74	; 116
   19330:	70 e0       	ldi	r23, 0x00	; 0
   19332:	80 e0       	ldi	r24, 0x00	; 0
   19334:	90 e0       	ldi	r25, 0x00	; 0
   19336:	0e 94 4a bd 	call	0x17a94	; 0x17a94 <lif_calloc>
   1933a:	7c 01       	movw	r14, r24
    if(LIF == NULL)
   1933c:	89 2b       	or	r24, r25
   1933e:	09 f4       	brne	.+2      	; 0x19342 <lif_create_volume+0x54>
   19340:	b6 c2       	rjmp	.+1388   	; 0x198ae <lif_create_volume+0x5c0>
        return(NULL);

    printf("Creating:%s, Label:[%s], Directory Start %ld, Directory Size: %ld, File Sectors:%ld\n",
   19342:	c2 5e       	subi	r28, 0xE2	; 226
   19344:	de 4f       	sbci	r29, 0xFE	; 254
   19346:	28 81       	ld	r18, Y
   19348:	39 81       	ldd	r19, Y+1	; 0x01
   1934a:	4a 81       	ldd	r20, Y+2	; 0x02
   1934c:	5b 81       	ldd	r21, Y+3	; 0x03
   1934e:	ce 51       	subi	r28, 0x1E	; 30
   19350:	d1 40       	sbci	r29, 0x01	; 1
   19352:	ed b7       	in	r30, 0x3d	; 61
   19354:	fe b7       	in	r31, 0x3e	; 62
   19356:	20 8b       	std	Z+16, r18	; 0x10
   19358:	31 8b       	std	Z+17, r19	; 0x11
   1935a:	42 8b       	std	Z+18, r20	; 0x12
   1935c:	53 8b       	std	Z+19, r21	; 0x13
   1935e:	ca 5d       	subi	r28, 0xDA	; 218
   19360:	de 4f       	sbci	r29, 0xFE	; 254
   19362:	28 81       	ld	r18, Y
   19364:	39 81       	ldd	r19, Y+1	; 0x01
   19366:	4a 81       	ldd	r20, Y+2	; 0x02
   19368:	5b 81       	ldd	r21, Y+3	; 0x03
   1936a:	c6 52       	subi	r28, 0x26	; 38
   1936c:	d1 40       	sbci	r29, 0x01	; 1
   1936e:	24 87       	std	Z+12, r18	; 0x0c
   19370:	35 87       	std	Z+13, r19	; 0x0d
   19372:	46 87       	std	Z+14, r20	; 0x0e
   19374:	57 87       	std	Z+15, r21	; 0x0f
   19376:	20 86       	std	Z+8, r2	; 0x08
   19378:	31 86       	std	Z+9, r3	; 0x09
   1937a:	42 86       	std	Z+10, r4	; 0x0a
   1937c:	53 86       	std	Z+11, r5	; 0x0b
   1937e:	77 82       	std	Z+7, r7	; 0x07
   19380:	66 82       	std	Z+6, r6	; 0x06
   19382:	95 82       	std	Z+5, r9	; 0x05
   19384:	84 82       	std	Z+4, r8	; 0x04
   19386:	85 e3       	ldi	r24, 0x35	; 53
   19388:	9a e3       	ldi	r25, 0x3A	; 58
   1938a:	a0 e0       	ldi	r26, 0x00	; 0
   1938c:	81 83       	std	Z+1, r24	; 0x01
   1938e:	92 83       	std	Z+2, r25	; 0x02
   19390:	a3 83       	std	Z+3, r26	; 0x03
   19392:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
        imagename, liflabel, dirstart, dirsectors, filesectors );

    if(debuglevel & LIF_DEBUG)
   19396:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1939a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1939e:	92 ff       	sbrs	r25, 2
   193a0:	04 c0       	rjmp	.+8      	; 0x193aa <lif_create_volume+0xbc>
        lif_dump_vol(LIF,"lif_create_volume");
   193a2:	60 e3       	ldi	r22, 0x30	; 48
   193a4:	76 e1       	ldi	r23, 0x16	; 22
   193a6:	c7 01       	movw	r24, r14
   193a8:	c9 d8       	rcall	.-3694   	; 0x1853c <lif_dump_vol>

    lif_image_clear(LIF);
   193aa:	c7 01       	movw	r24, r14
   193ac:	b2 d8       	rcall	.-3740   	; 0x18512 <lif_image_clear>

// Initialize volume header
    LIF->VOL.LIFid = 0x8000;
   193ae:	80 e0       	ldi	r24, 0x00	; 0
   193b0:	90 e8       	ldi	r25, 0x80	; 128
   193b2:	f7 01       	movw	r30, r14
   193b4:	95 a3       	std	Z+37, r25	; 0x25
   193b6:	84 a3       	std	Z+36, r24	; 0x24
    lif_fixname(LIF->VOL.Label, liflabel, 6);
   193b8:	46 e0       	ldi	r20, 0x06	; 6
   193ba:	50 e0       	ldi	r21, 0x00	; 0
   193bc:	b3 01       	movw	r22, r6
   193be:	c7 01       	movw	r24, r14
   193c0:	86 96       	adiw	r24, 0x26	; 38
   193c2:	0e 94 8d bf 	call	0x17f1a	; 0x17f1a <lif_fixname>
    LIF->VOL.DirStartSector = dirstart;
   193c6:	f7 01       	movw	r30, r14
   193c8:	25 a6       	std	Z+45, r2	; 0x2d
   193ca:	36 a6       	std	Z+46, r3	; 0x2e
   193cc:	47 a6       	std	Z+47, r4	; 0x2f
   193ce:	50 aa       	std	Z+48, r5	; 0x30
    LIF->VOL.DirSectors = dirsectors;
   193d0:	ca 5d       	subi	r28, 0xDA	; 218
   193d2:	de 4f       	sbci	r29, 0xFE	; 254
   193d4:	28 81       	ld	r18, Y
   193d6:	39 81       	ldd	r19, Y+1	; 0x01
   193d8:	4a 81       	ldd	r20, Y+2	; 0x02
   193da:	5b 81       	ldd	r21, Y+3	; 0x03
   193dc:	c6 52       	subi	r28, 0x26	; 38
   193de:	d1 40       	sbci	r29, 0x01	; 1
   193e0:	25 ab       	std	Z+53, r18	; 0x35
   193e2:	36 ab       	std	Z+54, r19	; 0x36
   193e4:	47 ab       	std	Z+55, r20	; 0x37
   193e6:	50 af       	std	Z+56, r21	; 0x38
    LIF->VOL.System3000LIFid = 0x1000;
   193e8:	80 e0       	ldi	r24, 0x00	; 0
   193ea:	90 e1       	ldi	r25, 0x10	; 16
   193ec:	92 ab       	std	Z+50, r25	; 0x32
   193ee:	81 ab       	std	Z+49, r24	; 0x31
    LIF->VOL.tracks_per_side = 0;
   193f0:	fd 96       	adiw	r30, 0x3d	; 61
   193f2:	10 82       	st	Z, r1
   193f4:	11 82       	std	Z+1, r1	; 0x01
   193f6:	12 82       	std	Z+2, r1	; 0x02
   193f8:	13 82       	std	Z+3, r1	; 0x03
    LIF->VOL.sides = 0;
   193fa:	34 96       	adiw	r30, 0x04	; 4
   193fc:	10 82       	st	Z, r1
   193fe:	11 82       	std	Z+1, r1	; 0x01
   19400:	12 82       	std	Z+2, r1	; 0x02
   19402:	13 82       	std	Z+3, r1	; 0x03
    LIF->VOL.sectors_per_track = 0;
   19404:	34 96       	adiw	r30, 0x04	; 4
   19406:	10 82       	st	Z, r1
   19408:	11 82       	std	Z+1, r1	; 0x01
   1940a:	12 82       	std	Z+2, r1	; 0x02
   1940c:	13 82       	std	Z+3, r1	; 0x03
///@brief 0 causes time to return the current date

    lif_time2lifbcd(t, LIF->VOL.date);
   1940e:	a7 01       	movw	r20, r14
   19410:	47 5b       	subi	r20, 0xB7	; 183
   19412:	5f 4f       	sbci	r21, 0xFF	; 255
   19414:	c6 01       	movw	r24, r12
   19416:	b5 01       	movw	r22, r10
   19418:	0e 94 b2 c1 	call	0x18364	; 0x18364 <lif_time2lifbcd>

// update LIF headers
    LIF->name = lif_stralloc(imagename);
   1941c:	c4 01       	movw	r24, r8
   1941e:	0e 94 95 bd 	call	0x17b2a	; 0x17b2a <lif_stralloc>
   19422:	d7 01       	movw	r26, r14
   19424:	8d 93       	st	X+, r24
   19426:	9c 93       	st	X, r25
    if(LIF->name == NULL)
   19428:	89 2b       	or	r24, r25
   1942a:	09 f4       	brne	.+2      	; 0x1942e <lif_create_volume+0x140>
   1942c:	35 c2       	rjmp	.+1130   	; 0x19898 <lif_create_volume+0x5aa>
        lif_close_volume(LIF);
        return(NULL);
    }

// Initilize all LIF headers
    LIF->filesectors = filesectors;
   1942e:	c2 5e       	subi	r28, 0xE2	; 226
   19430:	de 4f       	sbci	r29, 0xFE	; 254
   19432:	28 81       	ld	r18, Y
   19434:	39 81       	ldd	r19, Y+1	; 0x01
   19436:	4a 81       	ldd	r20, Y+2	; 0x02
   19438:	5b 81       	ldd	r21, Y+3	; 0x03
   1943a:	ce 51       	subi	r28, 0x1E	; 30
   1943c:	d1 40       	sbci	r29, 0x01	; 1
   1943e:	f7 01       	movw	r30, r14
   19440:	20 8b       	std	Z+16, r18	; 0x10
   19442:	31 8b       	std	Z+17, r19	; 0x11
   19444:	42 8b       	std	Z+18, r20	; 0x12
   19446:	53 8b       	std	Z+19, r21	; 0x13
    LIF->filestart = dirstart + dirsectors;
   19448:	ca 5d       	subi	r28, 0xDA	; 218
   1944a:	de 4f       	sbci	r29, 0xFE	; 254
   1944c:	88 81       	ld	r24, Y
   1944e:	99 81       	ldd	r25, Y+1	; 0x01
   19450:	aa 81       	ldd	r26, Y+2	; 0x02
   19452:	bb 81       	ldd	r27, Y+3	; 0x03
   19454:	c6 52       	subi	r28, 0x26	; 38
   19456:	d1 40       	sbci	r29, 0x01	; 1
   19458:	82 0d       	add	r24, r2
   1945a:	93 1d       	adc	r25, r3
   1945c:	a4 1d       	adc	r26, r4
   1945e:	b5 1d       	adc	r27, r5
   19460:	84 87       	std	Z+12, r24	; 0x0c
   19462:	95 87       	std	Z+13, r25	; 0x0d
   19464:	a6 87       	std	Z+14, r26	; 0x0e
   19466:	b7 87       	std	Z+15, r27	; 0x0f
    LIF->sectors = (LIF->filestart+LIF->filesectors);
   19468:	82 0f       	add	r24, r18
   1946a:	93 1f       	adc	r25, r19
   1946c:	a4 1f       	adc	r26, r20
   1946e:	b5 1f       	adc	r27, r21
   19470:	84 83       	std	Z+4, r24	; 0x04
   19472:	95 83       	std	Z+5, r25	; 0x05
   19474:	a6 83       	std	Z+6, r26	; 0x06
   19476:	b7 83       	std	Z+7, r27	; 0x07
    LIF->imagebytes = LIF->sectors * (long)LIF_SECTOR_SIZE;
   19478:	ba 2f       	mov	r27, r26
   1947a:	a9 2f       	mov	r26, r25
   1947c:	98 2f       	mov	r25, r24
   1947e:	88 27       	eor	r24, r24
   19480:	80 87       	std	Z+8, r24	; 0x08
   19482:	91 87       	std	Z+9, r25	; 0x09
   19484:	a2 87       	std	Z+10, r26	; 0x0a
   19486:	b3 87       	std	Z+11, r27	; 0x0b
    LIF->freesectors = LIF->filesectors;
   19488:	20 8f       	std	Z+24, r18	; 0x18
   1948a:	31 8f       	std	Z+25, r19	; 0x19
   1948c:	42 8f       	std	Z+26, r20	; 0x1a
   1948e:	53 8f       	std	Z+27, r21	; 0x1b
    LIF->usedsectors = 0;
   19490:	14 8a       	std	Z+20, r1	; 0x14
   19492:	15 8a       	std	Z+21, r1	; 0x15
   19494:	16 8a       	std	Z+22, r1	; 0x16
   19496:	17 8a       	std	Z+23, r1	; 0x17
    LIF->files = 0;
   19498:	15 8e       	std	Z+29, r1	; 0x1d
   1949a:	14 8e       	std	Z+28, r1	; 0x1c
    LIF->purged = 0;
   1949c:	17 8e       	std	Z+31, r1	; 0x1f
   1949e:	16 8e       	std	Z+30, r1	; 0x1e
    LIF->dirindex = 0;
   194a0:	11 a2       	std	Z+33, r1	; 0x21
   194a2:	10 a2       	std	Z+32, r1	; 0x20
    LIF->EOFindex = 0;
   194a4:	13 a2       	std	Z+35, r1	; 0x23
   194a6:	12 a2       	std	Z+34, r1	; 0x22

    memset(buffer,0,LIF_SECTOR_SIZE);
   194a8:	61 2c       	mov	r6, r1
   194aa:	77 24       	eor	r7, r7
   194ac:	73 94       	inc	r7
   194ae:	9e 01       	movw	r18, r28
   194b0:	2c 5e       	subi	r18, 0xEC	; 236
   194b2:	3f 4f       	sbci	r19, 0xFF	; 255
   194b4:	49 01       	movw	r8, r18
   194b6:	d9 01       	movw	r26, r18
   194b8:	f3 01       	movw	r30, r6
   194ba:	1d 92       	st	X+, r1
   194bc:	31 97       	sbiw	r30, 0x01	; 1
   194be:	e9 f7       	brne	.-6      	; 0x194ba <lif_create_volume+0x1cc>

    lif_vol2str(LIF,buffer);
   194c0:	b9 01       	movw	r22, r18
   194c2:	c7 01       	movw	r24, r14
   194c4:	0e 94 ca bf 	call	0x17f94	; 0x17f94 <lif_vol2str>

// Write Volume header
    LIF->fp = lif_open(LIF->name,"wb+");
   194c8:	66 e1       	ldi	r22, 0x16	; 22
   194ca:	79 e0       	ldi	r23, 0x09	; 9
   194cc:	d7 01       	movw	r26, r14
   194ce:	8d 91       	ld	r24, X+
   194d0:	9c 91       	ld	r25, X
   194d2:	0e 94 b4 bd 	call	0x17b68	; 0x17b68 <lif_open>
   194d6:	f7 01       	movw	r30, r14
   194d8:	93 83       	std	Z+3, r25	; 0x03
   194da:	82 83       	std	Z+2, r24	; 0x02
    if(LIF->fp == NULL)
   194dc:	89 2b       	or	r24, r25
   194de:	09 f4       	brne	.+2      	; 0x194e2 <lif_create_volume+0x1f4>
   194e0:	db c1       	rjmp	.+950    	; 0x19898 <lif_create_volume+0x5aa>
    }

    offset = 0;
    count = 0;

    size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   194e2:	00 e0       	ldi	r16, 0x00	; 0
   194e4:	11 e0       	ldi	r17, 0x01	; 1
   194e6:	20 e0       	ldi	r18, 0x00	; 0
   194e8:	30 e0       	ldi	r19, 0x00	; 0
   194ea:	a9 01       	movw	r20, r18
   194ec:	b4 01       	movw	r22, r8
   194ee:	c7 01       	movw	r24, r14
   194f0:	0e 94 8b be 	call	0x17d16	; 0x17d16 <lif_write>
   194f4:	9c 01       	movw	r18, r24
   194f6:	99 0f       	add	r25, r25
   194f8:	44 0b       	sbc	r20, r20
   194fa:	55 0b       	sbc	r21, r21
   194fc:	ca 5e       	subi	r28, 0xEA	; 234
   194fe:	de 4f       	sbci	r29, 0xFE	; 254
   19500:	28 83       	st	Y, r18
   19502:	39 83       	std	Y+1, r19	; 0x01
   19504:	4a 83       	std	Y+2, r20	; 0x02
   19506:	5b 83       	std	Y+3, r21	; 0x03
   19508:	c6 51       	subi	r28, 0x16	; 22
   1950a:	d1 40       	sbci	r29, 0x01	; 1

    if(size < LIF_SECTOR_SIZE)
   1950c:	2f 3f       	cpi	r18, 0xFF	; 255
   1950e:	31 05       	cpc	r19, r1
   19510:	41 05       	cpc	r20, r1
   19512:	51 05       	cpc	r21, r1
   19514:	09 f0       	breq	.+2      	; 0x19518 <lif_create_volume+0x22a>
   19516:	0c f4       	brge	.+2      	; 0x1951a <lif_create_volume+0x22c>
   19518:	bf c1       	rjmp	.+894    	; 0x19898 <lif_create_volume+0x5aa>
        return(NULL);
    }
    offset += size;
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);
   1951a:	d4 01       	movw	r26, r8
   1951c:	f3 01       	movw	r30, r6
   1951e:	1d 92       	st	X+, r1
   19520:	31 97       	sbiw	r30, 0x01	; 1
   19522:	e9 f7       	brne	.-6      	; 0x1951e <lif_create_volume+0x230>

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19524:	21 e0       	ldi	r18, 0x01	; 1
   19526:	30 e0       	ldi	r19, 0x00	; 0
   19528:	40 e0       	ldi	r20, 0x00	; 0
   1952a:	50 e0       	ldi	r21, 0x00	; 0
   1952c:	c6 5e       	subi	r28, 0xE6	; 230
   1952e:	de 4f       	sbci	r29, 0xFE	; 254
   19530:	28 83       	st	Y, r18
   19532:	39 83       	std	Y+1, r19	; 0x01
   19534:	4a 83       	std	Y+2, r20	; 0x02
   19536:	5b 83       	std	Y+3, r21	; 0x03
   19538:	ca 51       	subi	r28, 0x1A	; 26
   1953a:	d1 40       	sbci	r29, 0x01	; 1
   1953c:	64 01       	movw	r12, r8
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        printf("\tWrote: %ld\r", count);
   1953e:	88 e2       	ldi	r24, 0x28	; 40
   19540:	9a e3       	ldi	r25, 0x3A	; 58
   19542:	3c 01       	movw	r6, r24
   19544:	81 2c       	mov	r8, r1
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19546:	c6 5e       	subi	r28, 0xE6	; 230
   19548:	de 4f       	sbci	r29, 0xFE	; 254
   1954a:	88 81       	ld	r24, Y
   1954c:	99 81       	ldd	r25, Y+1	; 0x01
   1954e:	aa 81       	ldd	r26, Y+2	; 0x02
   19550:	bb 81       	ldd	r27, Y+3	; 0x03
   19552:	ca 51       	subi	r28, 0x1A	; 26
   19554:	d1 40       	sbci	r29, 0x01	; 1
   19556:	82 15       	cp	r24, r2
   19558:	93 05       	cpc	r25, r3
   1955a:	a4 05       	cpc	r26, r4
   1955c:	b5 05       	cpc	r27, r5
   1955e:	0c f0       	brlt	.+2      	; 0x19562 <lif_create_volume+0x274>
   19560:	55 c0       	rjmp	.+170    	; 0x1960c <lif_create_volume+0x31e>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19562:	00 e0       	ldi	r16, 0x00	; 0
   19564:	11 e0       	ldi	r17, 0x01	; 1
   19566:	ca 5e       	subi	r28, 0xEA	; 234
   19568:	de 4f       	sbci	r29, 0xFE	; 254
   1956a:	28 81       	ld	r18, Y
   1956c:	39 81       	ldd	r19, Y+1	; 0x01
   1956e:	4a 81       	ldd	r20, Y+2	; 0x02
   19570:	5b 81       	ldd	r21, Y+3	; 0x03
   19572:	c6 51       	subi	r28, 0x16	; 22
   19574:	d1 40       	sbci	r29, 0x01	; 1
   19576:	b6 01       	movw	r22, r12
   19578:	c7 01       	movw	r24, r14
   1957a:	0e 94 8b be 	call	0x17d16	; 0x17d16 <lif_write>
   1957e:	09 2e       	mov	r0, r25
   19580:	00 0c       	add	r0, r0
   19582:	aa 0b       	sbc	r26, r26
   19584:	bb 0b       	sbc	r27, r27
        if(size < LIF_SECTOR_SIZE)
   19586:	8f 3f       	cpi	r24, 0xFF	; 255
   19588:	91 05       	cpc	r25, r1
   1958a:	a1 05       	cpc	r26, r1
   1958c:	b1 05       	cpc	r27, r1
   1958e:	09 f0       	breq	.+2      	; 0x19592 <lif_create_volume+0x2a4>
   19590:	0c f4       	brge	.+2      	; 0x19594 <lif_create_volume+0x2a6>
   19592:	82 c1       	rjmp	.+772    	; 0x19898 <lif_create_volume+0x5aa>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   19594:	ca 5e       	subi	r28, 0xEA	; 234
   19596:	de 4f       	sbci	r29, 0xFE	; 254
   19598:	28 81       	ld	r18, Y
   1959a:	39 81       	ldd	r19, Y+1	; 0x01
   1959c:	4a 81       	ldd	r20, Y+2	; 0x02
   1959e:	5b 81       	ldd	r21, Y+3	; 0x03
   195a0:	c6 51       	subi	r28, 0x16	; 22
   195a2:	d1 40       	sbci	r29, 0x01	; 1
   195a4:	28 0f       	add	r18, r24
   195a6:	39 1f       	adc	r19, r25
   195a8:	4a 1f       	adc	r20, r26
   195aa:	5b 1f       	adc	r21, r27
   195ac:	ca 5e       	subi	r28, 0xEA	; 234
   195ae:	de 4f       	sbci	r29, 0xFE	; 254
   195b0:	28 83       	st	Y, r18
   195b2:	39 83       	std	Y+1, r19	; 0x01
   195b4:	4a 83       	std	Y+2, r20	; 0x02
   195b6:	5b 83       	std	Y+3, r21	; 0x03
   195b8:	c6 51       	subi	r28, 0x16	; 22
   195ba:	d1 40       	sbci	r29, 0x01	; 1
        printf("\tWrote: %ld\r", count);
   195bc:	c6 5e       	subi	r28, 0xE6	; 230
   195be:	de 4f       	sbci	r29, 0xFE	; 254
   195c0:	88 81       	ld	r24, Y
   195c2:	99 81       	ldd	r25, Y+1	; 0x01
   195c4:	aa 81       	ldd	r26, Y+2	; 0x02
   195c6:	bb 81       	ldd	r27, Y+3	; 0x03
   195c8:	ca 51       	subi	r28, 0x1A	; 26
   195ca:	d1 40       	sbci	r29, 0x01	; 1
   195cc:	ed b7       	in	r30, 0x3d	; 61
   195ce:	fe b7       	in	r31, 0x3e	; 62
   195d0:	84 83       	std	Z+4, r24	; 0x04
   195d2:	95 83       	std	Z+5, r25	; 0x05
   195d4:	a6 83       	std	Z+6, r26	; 0x06
   195d6:	b7 83       	std	Z+7, r27	; 0x07
   195d8:	61 82       	std	Z+1, r6	; 0x01
   195da:	72 82       	std	Z+2, r7	; 0x02
   195dc:	83 82       	std	Z+3, r8	; 0x03
   195de:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   195e2:	c6 5e       	subi	r28, 0xE6	; 230
   195e4:	de 4f       	sbci	r29, 0xFE	; 254
   195e6:	28 81       	ld	r18, Y
   195e8:	39 81       	ldd	r19, Y+1	; 0x01
   195ea:	4a 81       	ldd	r20, Y+2	; 0x02
   195ec:	5b 81       	ldd	r21, Y+3	; 0x03
   195ee:	ca 51       	subi	r28, 0x1A	; 26
   195f0:	d1 40       	sbci	r29, 0x01	; 1
   195f2:	2f 5f       	subi	r18, 0xFF	; 255
   195f4:	3f 4f       	sbci	r19, 0xFF	; 255
   195f6:	4f 4f       	sbci	r20, 0xFF	; 255
   195f8:	5f 4f       	sbci	r21, 0xFF	; 255
   195fa:	c6 5e       	subi	r28, 0xE6	; 230
   195fc:	de 4f       	sbci	r29, 0xFE	; 254
   195fe:	28 83       	st	Y, r18
   19600:	39 83       	std	Y+1, r19	; 0x01
   19602:	4a 83       	std	Y+2, r20	; 0x02
   19604:	5b 83       	std	Y+3, r21	; 0x03
   19606:	ca 51       	subi	r28, 0x1A	; 26
   19608:	d1 40       	sbci	r29, 0x01	; 1
   1960a:	9d cf       	rjmp	.-198    	; 0x19546 <lif_create_volume+0x258>
        printf("\tWrote: %ld\r", count);
        ++count;
    }

// Write Directory sectors
    lif_dir_clear(LIF);
   1960c:	c7 01       	movw	r24, r14
   1960e:	0e 94 8f c2 	call	0x1851e	; 0x1851e <lif_dir_clear>
    LIF->DIR.FileType = 0xffff;
   19612:	8f ef       	ldi	r24, 0xFF	; 255
   19614:	9f ef       	ldi	r25, 0xFF	; 255
   19616:	f7 01       	movw	r30, r14
   19618:	e6 5a       	subi	r30, 0xA6	; 166
   1961a:	ff 4f       	sbci	r31, 0xFF	; 255
   1961c:	91 83       	std	Z+1, r25	; 0x01
   1961e:	80 83       	st	Z, r24
   19620:	46 01       	movw	r8, r12
   19622:	6e 01       	movw	r12, r28
   19624:	9c ee       	ldi	r25, 0xEC	; 236
   19626:	c9 1a       	sub	r12, r25
   19628:	9e ef       	ldi	r25, 0xFE	; 254
   1962a:	d9 0a       	sbc	r13, r25

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);
   1962c:	b4 01       	movw	r22, r8
   1962e:	c7 01       	movw	r24, r14
   19630:	0e 94 d6 c0 	call	0x181ac	; 0x181ac <lif_dir2str>
   19634:	a0 e2       	ldi	r26, 0x20	; 32
   19636:	8a 0e       	add	r8, r26
   19638:	91 1c       	adc	r9, r1

// Write Directory sectors
    lif_dir_clear(LIF);
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
   1963a:	c8 14       	cp	r12, r8
   1963c:	d9 04       	cpc	r13, r9
   1963e:	b1 f7       	brne	.-20     	; 0x1962c <lif_create_volume+0x33e>
   19640:	a1 2c       	mov	r10, r1
   19642:	b1 2c       	mov	r11, r1
   19644:	65 01       	movw	r12, r10
   19646:	fe 01       	movw	r30, r28
   19648:	74 96       	adiw	r30, 0x14	; 20
   1964a:	cc 5e       	subi	r28, 0xEC	; 236
   1964c:	de 4f       	sbci	r29, 0xFE	; 254
   1964e:	f9 83       	std	Y+1, r31	; 0x01
   19650:	e8 83       	st	Y, r30
   19652:	c4 51       	subi	r28, 0x14	; 20
   19654:	d1 40       	sbci	r29, 0x01	; 1
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
   19656:	84 e6       	ldi	r24, 0x64	; 100
   19658:	28 2e       	mov	r2, r24
   1965a:	31 2c       	mov	r3, r1
   1965c:	41 2c       	mov	r4, r1
   1965e:	51 2c       	mov	r5, r1
            printf("\tWrote: %ld\r", count);
   19660:	8b e1       	ldi	r24, 0x1B	; 27
   19662:	9a e3       	ldi	r25, 0x3A	; 58
   19664:	3c 01       	movw	r6, r24
   19666:	81 2c       	mov	r8, r1
   19668:	c6 5e       	subi	r28, 0xE6	; 230
   1966a:	de 4f       	sbci	r29, 0xFE	; 254
   1966c:	28 81       	ld	r18, Y
   1966e:	39 81       	ldd	r19, Y+1	; 0x01
   19670:	4a 81       	ldd	r20, Y+2	; 0x02
   19672:	5b 81       	ldd	r21, Y+3	; 0x03
   19674:	ca 51       	subi	r28, 0x1A	; 26
   19676:	d1 40       	sbci	r29, 0x01	; 1
   19678:	2a 0d       	add	r18, r10
   1967a:	3b 1d       	adc	r19, r11
   1967c:	4c 1d       	adc	r20, r12
   1967e:	5d 1d       	adc	r21, r13
   19680:	ce 5d       	subi	r28, 0xDE	; 222
   19682:	de 4f       	sbci	r29, 0xFE	; 254
   19684:	28 83       	st	Y, r18
   19686:	39 83       	std	Y+1, r19	; 0x01
   19688:	4a 83       	std	Y+2, r20	; 0x02
   1968a:	5b 83       	std	Y+3, r21	; 0x03
   1968c:	c2 52       	subi	r28, 0x22	; 34
   1968e:	d1 40       	sbci	r29, 0x01	; 1
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   19690:	ca 5d       	subi	r28, 0xDA	; 218
   19692:	de 4f       	sbci	r29, 0xFE	; 254
   19694:	88 81       	ld	r24, Y
   19696:	99 81       	ldd	r25, Y+1	; 0x01
   19698:	aa 81       	ldd	r26, Y+2	; 0x02
   1969a:	bb 81       	ldd	r27, Y+3	; 0x03
   1969c:	c6 52       	subi	r28, 0x26	; 38
   1969e:	d1 40       	sbci	r29, 0x01	; 1
   196a0:	a8 16       	cp	r10, r24
   196a2:	b9 06       	cpc	r11, r25
   196a4:	ca 06       	cpc	r12, r26
   196a6:	db 06       	cpc	r13, r27
   196a8:	0c f0       	brlt	.+2      	; 0x196ac <lif_create_volume+0x3be>
   196aa:	58 c0       	rjmp	.+176    	; 0x1975c <lif_create_volume+0x46e>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   196ac:	00 e0       	ldi	r16, 0x00	; 0
   196ae:	11 e0       	ldi	r17, 0x01	; 1
   196b0:	ca 5e       	subi	r28, 0xEA	; 234
   196b2:	de 4f       	sbci	r29, 0xFE	; 254
   196b4:	28 81       	ld	r18, Y
   196b6:	39 81       	ldd	r19, Y+1	; 0x01
   196b8:	4a 81       	ldd	r20, Y+2	; 0x02
   196ba:	5b 81       	ldd	r21, Y+3	; 0x03
   196bc:	c6 51       	subi	r28, 0x16	; 22
   196be:	d1 40       	sbci	r29, 0x01	; 1
   196c0:	be 01       	movw	r22, r28
   196c2:	6c 5e       	subi	r22, 0xEC	; 236
   196c4:	7f 4f       	sbci	r23, 0xFF	; 255
   196c6:	c7 01       	movw	r24, r14
   196c8:	0e 94 8b be 	call	0x17d16	; 0x17d16 <lif_write>
   196cc:	09 2e       	mov	r0, r25
   196ce:	00 0c       	add	r0, r0
   196d0:	aa 0b       	sbc	r26, r26
   196d2:	bb 0b       	sbc	r27, r27
        if(size < LIF_SECTOR_SIZE)
   196d4:	8f 3f       	cpi	r24, 0xFF	; 255
   196d6:	91 05       	cpc	r25, r1
   196d8:	a1 05       	cpc	r26, r1
   196da:	b1 05       	cpc	r27, r1
   196dc:	09 f0       	breq	.+2      	; 0x196e0 <lif_create_volume+0x3f2>
   196de:	0c f4       	brge	.+2      	; 0x196e2 <lif_create_volume+0x3f4>
   196e0:	db c0       	rjmp	.+438    	; 0x19898 <lif_create_volume+0x5aa>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   196e2:	ca 5e       	subi	r28, 0xEA	; 234
   196e4:	de 4f       	sbci	r29, 0xFE	; 254
   196e6:	28 81       	ld	r18, Y
   196e8:	39 81       	ldd	r19, Y+1	; 0x01
   196ea:	4a 81       	ldd	r20, Y+2	; 0x02
   196ec:	5b 81       	ldd	r21, Y+3	; 0x03
   196ee:	c6 51       	subi	r28, 0x16	; 22
   196f0:	d1 40       	sbci	r29, 0x01	; 1
   196f2:	28 0f       	add	r18, r24
   196f4:	39 1f       	adc	r19, r25
   196f6:	4a 1f       	adc	r20, r26
   196f8:	5b 1f       	adc	r21, r27
   196fa:	ca 5e       	subi	r28, 0xEA	; 234
   196fc:	de 4f       	sbci	r29, 0xFE	; 254
   196fe:	28 83       	st	Y, r18
   19700:	39 83       	std	Y+1, r19	; 0x01
   19702:	4a 83       	std	Y+2, r20	; 0x02
   19704:	5b 83       	std	Y+3, r21	; 0x03
   19706:	c6 51       	subi	r28, 0x16	; 22
   19708:	d1 40       	sbci	r29, 0x01	; 1
        if((count % 100) == 0)
   1970a:	ce 5d       	subi	r28, 0xDE	; 222
   1970c:	de 4f       	sbci	r29, 0xFE	; 254
   1970e:	68 81       	ld	r22, Y
   19710:	79 81       	ldd	r23, Y+1	; 0x01
   19712:	8a 81       	ldd	r24, Y+2	; 0x02
   19714:	9b 81       	ldd	r25, Y+3	; 0x03
   19716:	c2 52       	subi	r28, 0x22	; 34
   19718:	d1 40       	sbci	r29, 0x01	; 1
   1971a:	a2 01       	movw	r20, r4
   1971c:	91 01       	movw	r18, r2
   1971e:	0e 94 be e2 	call	0x1c57c	; 0x1c57c <__divmodsi4>
   19722:	67 2b       	or	r22, r23
   19724:	68 2b       	or	r22, r24
   19726:	69 2b       	or	r22, r25
   19728:	99 f4       	brne	.+38     	; 0x19750 <lif_create_volume+0x462>
            printf("\tWrote: %ld\r", count);
   1972a:	ce 5d       	subi	r28, 0xDE	; 222
   1972c:	de 4f       	sbci	r29, 0xFE	; 254
   1972e:	88 81       	ld	r24, Y
   19730:	99 81       	ldd	r25, Y+1	; 0x01
   19732:	aa 81       	ldd	r26, Y+2	; 0x02
   19734:	bb 81       	ldd	r27, Y+3	; 0x03
   19736:	c2 52       	subi	r28, 0x22	; 34
   19738:	d1 40       	sbci	r29, 0x01	; 1
   1973a:	ed b7       	in	r30, 0x3d	; 61
   1973c:	fe b7       	in	r31, 0x3e	; 62
   1973e:	84 83       	std	Z+4, r24	; 0x04
   19740:	95 83       	std	Z+5, r25	; 0x05
   19742:	a6 83       	std	Z+6, r26	; 0x06
   19744:	b7 83       	std	Z+7, r27	; 0x07
   19746:	61 82       	std	Z+1, r6	; 0x01
   19748:	72 82       	std	Z+2, r7	; 0x02
   1974a:	83 82       	std	Z+3, r8	; 0x03
   1974c:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   19750:	ff ef       	ldi	r31, 0xFF	; 255
   19752:	af 1a       	sub	r10, r31
   19754:	bf 0a       	sbc	r11, r31
   19756:	cf 0a       	sbc	r12, r31
   19758:	df 0a       	sbc	r13, r31
   1975a:	86 cf       	rjmp	.-244    	; 0x19668 <lif_create_volume+0x37a>
            printf("\tWrote: %ld\r", count);
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
   1975c:	80 e0       	ldi	r24, 0x00	; 0
   1975e:	91 e0       	ldi	r25, 0x01	; 1
   19760:	cc 5e       	subi	r28, 0xEC	; 236
   19762:	de 4f       	sbci	r29, 0xFE	; 254
   19764:	a8 81       	ld	r26, Y
   19766:	b9 81       	ldd	r27, Y+1	; 0x01
   19768:	c4 51       	subi	r28, 0x14	; 20
   1976a:	d1 40       	sbci	r29, 0x01	; 1
   1976c:	fc 01       	movw	r30, r24
   1976e:	1d 92       	st	X+, r1
   19770:	31 97       	sbiw	r30, 0x01	; 1
   19772:	e9 f7       	brne	.-6      	; 0x1976e <lif_create_volume+0x480>
    for(i=0;i<filesectors;++i)
   19774:	81 2c       	mov	r8, r1
   19776:	91 2c       	mov	r9, r1
   19778:	54 01       	movw	r10, r8
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
            printf("\tWrote: %ld\r", count);
   1977a:	8e e0       	ldi	r24, 0x0E	; 14
   1977c:	9a e3       	ldi	r25, 0x3A	; 58
   1977e:	9c 01       	movw	r18, r24
   19780:	40 e0       	ldi	r20, 0x00	; 0
   19782:	c6 5e       	subi	r28, 0xE6	; 230
   19784:	de 4f       	sbci	r29, 0xFE	; 254
   19786:	28 83       	st	Y, r18
   19788:	39 83       	std	Y+1, r19	; 0x01
   1978a:	4a 83       	std	Y+2, r20	; 0x02
   1978c:	ca 51       	subi	r28, 0x1A	; 26
   1978e:	d1 40       	sbci	r29, 0x01	; 1
   19790:	ce 5d       	subi	r28, 0xDE	; 222
   19792:	de 4f       	sbci	r29, 0xFE	; 254
   19794:	48 80       	ld	r4, Y
   19796:	59 80       	ldd	r5, Y+1	; 0x01
   19798:	6a 80       	ldd	r6, Y+2	; 0x02
   1979a:	7b 80       	ldd	r7, Y+3	; 0x03
   1979c:	c2 52       	subi	r28, 0x22	; 34
   1979e:	d1 40       	sbci	r29, 0x01	; 1
   197a0:	48 0c       	add	r4, r8
   197a2:	59 1c       	adc	r5, r9
   197a4:	6a 1c       	adc	r6, r10
   197a6:	7b 1c       	adc	r7, r11
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   197a8:	c2 5e       	subi	r28, 0xE2	; 226
   197aa:	de 4f       	sbci	r29, 0xFE	; 254
   197ac:	28 81       	ld	r18, Y
   197ae:	39 81       	ldd	r19, Y+1	; 0x01
   197b0:	4a 81       	ldd	r20, Y+2	; 0x02
   197b2:	5b 81       	ldd	r21, Y+3	; 0x03
   197b4:	ce 51       	subi	r28, 0x1E	; 30
   197b6:	d1 40       	sbci	r29, 0x01	; 1
   197b8:	82 16       	cp	r8, r18
   197ba:	93 06       	cpc	r9, r19
   197bc:	a4 06       	cpc	r10, r20
   197be:	b5 06       	cpc	r11, r21
   197c0:	0c f0       	brlt	.+2      	; 0x197c4 <lif_create_volume+0x4d6>
   197c2:	53 c0       	rjmp	.+166    	; 0x1986a <lif_create_volume+0x57c>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   197c4:	00 e0       	ldi	r16, 0x00	; 0
   197c6:	11 e0       	ldi	r17, 0x01	; 1
   197c8:	ca 5e       	subi	r28, 0xEA	; 234
   197ca:	de 4f       	sbci	r29, 0xFE	; 254
   197cc:	28 81       	ld	r18, Y
   197ce:	39 81       	ldd	r19, Y+1	; 0x01
   197d0:	4a 81       	ldd	r20, Y+2	; 0x02
   197d2:	5b 81       	ldd	r21, Y+3	; 0x03
   197d4:	c6 51       	subi	r28, 0x16	; 22
   197d6:	d1 40       	sbci	r29, 0x01	; 1
   197d8:	be 01       	movw	r22, r28
   197da:	6c 5e       	subi	r22, 0xEC	; 236
   197dc:	7f 4f       	sbci	r23, 0xFF	; 255
   197de:	c7 01       	movw	r24, r14
   197e0:	0e 94 8b be 	call	0x17d16	; 0x17d16 <lif_write>
   197e4:	09 2e       	mov	r0, r25
   197e6:	00 0c       	add	r0, r0
   197e8:	aa 0b       	sbc	r26, r26
   197ea:	bb 0b       	sbc	r27, r27
        if(size < LIF_SECTOR_SIZE)
   197ec:	8f 3f       	cpi	r24, 0xFF	; 255
   197ee:	91 05       	cpc	r25, r1
   197f0:	a1 05       	cpc	r26, r1
   197f2:	b1 05       	cpc	r27, r1
   197f4:	09 f0       	breq	.+2      	; 0x197f8 <lif_create_volume+0x50a>
   197f6:	0c f4       	brge	.+2      	; 0x197fa <lif_create_volume+0x50c>
   197f8:	4f c0       	rjmp	.+158    	; 0x19898 <lif_create_volume+0x5aa>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   197fa:	ca 5e       	subi	r28, 0xEA	; 234
   197fc:	de 4f       	sbci	r29, 0xFE	; 254
   197fe:	28 81       	ld	r18, Y
   19800:	39 81       	ldd	r19, Y+1	; 0x01
   19802:	4a 81       	ldd	r20, Y+2	; 0x02
   19804:	5b 81       	ldd	r21, Y+3	; 0x03
   19806:	c6 51       	subi	r28, 0x16	; 22
   19808:	d1 40       	sbci	r29, 0x01	; 1
   1980a:	28 0f       	add	r18, r24
   1980c:	39 1f       	adc	r19, r25
   1980e:	4a 1f       	adc	r20, r26
   19810:	5b 1f       	adc	r21, r27
   19812:	ca 5e       	subi	r28, 0xEA	; 234
   19814:	de 4f       	sbci	r29, 0xFE	; 254
   19816:	28 83       	st	Y, r18
   19818:	39 83       	std	Y+1, r19	; 0x01
   1981a:	4a 83       	std	Y+2, r20	; 0x02
   1981c:	5b 83       	std	Y+3, r21	; 0x03
   1981e:	c6 51       	subi	r28, 0x16	; 22
   19820:	d1 40       	sbci	r29, 0x01	; 1
        if((count % 100) == 0)
   19822:	c3 01       	movw	r24, r6
   19824:	b2 01       	movw	r22, r4
   19826:	24 e6       	ldi	r18, 0x64	; 100
   19828:	30 e0       	ldi	r19, 0x00	; 0
   1982a:	40 e0       	ldi	r20, 0x00	; 0
   1982c:	50 e0       	ldi	r21, 0x00	; 0
   1982e:	0e 94 be e2 	call	0x1c57c	; 0x1c57c <__divmodsi4>
   19832:	67 2b       	or	r22, r23
   19834:	68 2b       	or	r22, r24
   19836:	69 2b       	or	r22, r25
   19838:	91 f4       	brne	.+36     	; 0x1985e <lif_create_volume+0x570>
            printf("\tWrote: %ld\r", count);
   1983a:	ed b7       	in	r30, 0x3d	; 61
   1983c:	fe b7       	in	r31, 0x3e	; 62
   1983e:	44 82       	std	Z+4, r4	; 0x04
   19840:	55 82       	std	Z+5, r5	; 0x05
   19842:	66 82       	std	Z+6, r6	; 0x06
   19844:	77 82       	std	Z+7, r7	; 0x07
   19846:	c6 5e       	subi	r28, 0xE6	; 230
   19848:	de 4f       	sbci	r29, 0xFE	; 254
   1984a:	28 81       	ld	r18, Y
   1984c:	39 81       	ldd	r19, Y+1	; 0x01
   1984e:	4a 81       	ldd	r20, Y+2	; 0x02
   19850:	ca 51       	subi	r28, 0x1A	; 26
   19852:	d1 40       	sbci	r29, 0x01	; 1
   19854:	21 83       	std	Z+1, r18	; 0x01
   19856:	32 83       	std	Z+2, r19	; 0x02
   19858:	43 83       	std	Z+3, r20	; 0x03
   1985a:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   1985e:	ff ef       	ldi	r31, 0xFF	; 255
   19860:	8f 1a       	sub	r8, r31
   19862:	9f 0a       	sbc	r9, r31
   19864:	af 0a       	sbc	r10, r31
   19866:	bf 0a       	sbc	r11, r31
   19868:	93 cf       	rjmp	.-218    	; 0x19790 <lif_create_volume+0x4a2>
        offset += size;
        if((count % 100) == 0)
            printf("\tWrote: %ld\r", count);
        ++count;
    }
    printf("\tWrote: %ld\n", count);
   1986a:	ed b7       	in	r30, 0x3d	; 61
   1986c:	fe b7       	in	r31, 0x3e	; 62
   1986e:	44 82       	std	Z+4, r4	; 0x04
   19870:	55 82       	std	Z+5, r5	; 0x05
   19872:	66 82       	std	Z+6, r6	; 0x06
   19874:	77 82       	std	Z+7, r7	; 0x07
   19876:	81 e0       	ldi	r24, 0x01	; 1
   19878:	9a e3       	ldi	r25, 0x3A	; 58
   1987a:	a0 e0       	ldi	r26, 0x00	; 0
   1987c:	81 83       	std	Z+1, r24	; 0x01
   1987e:	92 83       	std	Z+2, r25	; 0x02
   19880:	a3 83       	std	Z+3, r26	; 0x03
   19882:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
/// @return void
MEMSPACE
void lif_rewinddir(lif_t *LIF)
{
// Directory index
    LIF->dirindex = -1;
   19886:	8f ef       	ldi	r24, 0xFF	; 255
   19888:	9f ef       	ldi	r25, 0xFF	; 255
   1988a:	f7 01       	movw	r30, r14
   1988c:	91 a3       	std	Z+33, r25	; 0x21
    printf("\tWrote: %ld\n", count);

    lif_rewinddir(LIF);

// As a sanity check verify basic values
    if( !lif_check_volume(LIF) )
   1988e:	80 a3       	std	Z+32, r24	; 0x20
   19890:	c7 01       	movw	r24, r14
   19892:	1a d8       	rcall	.-4044   	; 0x188c8 <lif_check_volume>
   19894:	89 2b       	or	r24, r25
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   19896:	19 f4       	brne	.+6      	; 0x1989e <lif_create_volume+0x5b0>
   19898:	c7 01       	movw	r24, r14
   1989a:	b6 da       	rcall	.-2708   	; 0x18e08 <lif_close_volume>
   1989c:	08 c0       	rjmp	.+16     	; 0x198ae <lif_create_volume+0x5c0>
        lif_closedir(LIF);
        return(NULL);
    }

// Scan directory and verify values
    if( !lif_updatefree(LIF))
   1989e:	c7 01       	movw	r24, r14
   198a0:	1c dc       	rcall	.-1992   	; 0x190da <lif_updatefree>
   198a2:	6c 01       	movw	r12, r24
   198a4:	89 2b       	or	r24, r25
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   198a6:	31 f4       	brne	.+12     	; 0x198b4 <lif_create_volume+0x5c6>
   198a8:	c7 01       	movw	r24, r14
   198aa:	ae da       	rcall	.-2724   	; 0x18e08 <lif_close_volume>

// Scan directory and verify values
    if( !lif_updatefree(LIF))
    {
        lif_closedir(LIF);
        return(NULL);
   198ac:	04 c0       	rjmp	.+8      	; 0x198b6 <lif_create_volume+0x5c8>

    time_t t = time(NULL);

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
    if(LIF == NULL)
        return(NULL);
   198ae:	c1 2c       	mov	r12, r1
   198b0:	d1 2c       	mov	r13, r1
   198b2:	01 c0       	rjmp	.+2      	; 0x198b6 <lif_create_volume+0x5c8>
   198b4:	67 01       	movw	r12, r14
        lif_closedir(LIF);
        return(NULL);
    }

    return(LIF);
}
   198b6:	c6 01       	movw	r24, r12
   198b8:	c7 5d       	subi	r28, 0xD7	; 215
   198ba:	de 4f       	sbci	r29, 0xFE	; 254
   198bc:	e2 e1       	ldi	r30, 0x12	; 18
   198be:	0c 94 25 e3 	jmp	0x1c64a	; 0x1c64a <__epilogue_restores__>

000198c2 <lif_newdir>:
/// @param[in] *LIF: LIF pointer
/// @param[in] sectors: try to find specified free space
/// @return index or free record or -1 on error
MEMSPACE
int lif_newdir(lif_t *LIF, long sectors)
{
   198c2:	ad e1       	ldi	r26, 0x1D	; 29
   198c4:	b0 e0       	ldi	r27, 0x00	; 0
   198c6:	e7 e6       	ldi	r30, 0x67	; 103
   198c8:	fc ec       	ldi	r31, 0xCC	; 204
   198ca:	0c 94 09 e3 	jmp	0x1c612	; 0x1c612 <__prologue_saves__>
   198ce:	9d 8f       	std	Y+29, r25	; 0x1d
   198d0:	8c 8f       	std	Y+28, r24	; 0x1c
   198d2:	4a 01       	movw	r8, r20
   198d4:	5b 01       	movw	r10, r22

// Directory index
    index = 0;

// Start of free space
    start = LIF->filestart;
   198d6:	fc 01       	movw	r30, r24
   198d8:	c4 84       	ldd	r12, Z+12	; 0x0c
   198da:	d5 84       	ldd	r13, Z+13	; 0x0d
   198dc:	e6 84       	ldd	r14, Z+14	; 0x0e
   198de:	f7 84       	ldd	r15, Z+15	; 0x0f

// Update all file information
    if(lif_updatefree(LIF) == NULL)
   198e0:	fc db       	rcall	.-2056   	; 0x190da <lif_updatefree>
   198e2:	ec 8d       	ldd	r30, Y+28	; 0x1c
   198e4:	fd 8d       	ldd	r31, Y+29	; 0x1d
   198e6:	40 8d       	ldd	r20, Z+24	; 0x18
   198e8:	51 8d       	ldd	r21, Z+25	; 0x19
   198ea:	62 8d       	ldd	r22, Z+26	; 0x1a
   198ec:	73 8d       	ldd	r23, Z+27	; 0x1b
   198ee:	89 2b       	or	r24, r25
   198f0:	99 f4       	brne	.+38     	; 0x19918 <lif_newdir+0x56>
    {
        printf("lif_newdir: not enough free space:[%ld] for size:[%ld]\n", (long)LIF->freesectors, (long) sectors);
   198f2:	ed b7       	in	r30, 0x3d	; 61
   198f4:	fe b7       	in	r31, 0x3e	; 62
   198f6:	80 86       	std	Z+8, r8	; 0x08
   198f8:	91 86       	std	Z+9, r9	; 0x09
   198fa:	a2 86       	std	Z+10, r10	; 0x0a
   198fc:	b3 86       	std	Z+11, r11	; 0x0b
   198fe:	44 83       	std	Z+4, r20	; 0x04
   19900:	55 83       	std	Z+5, r21	; 0x05
   19902:	66 83       	std	Z+6, r22	; 0x06
   19904:	77 83       	std	Z+7, r23	; 0x07
   19906:	82 e2       	ldi	r24, 0x22	; 34
   19908:	99 e3       	ldi	r25, 0x39	; 57
   1990a:	a0 e0       	ldi	r26, 0x00	; 0
   1990c:	81 83       	std	Z+1, r24	; 0x01
   1990e:	92 83       	std	Z+2, r25	; 0x02
   19910:	a3 83       	std	Z+3, r26	; 0x03
   19912:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   19916:	2f c1       	rjmp	.+606    	; 0x19b76 <lif_newdir+0x2b4>
        return(-1);
    }

// Not enough room ?
    if(sectors > (long)LIF->freesectors)
   19918:	48 15       	cp	r20, r8
   1991a:	59 05       	cpc	r21, r9
   1991c:	6a 05       	cpc	r22, r10
   1991e:	7b 05       	cpc	r23, r11
   19920:	c4 f0       	brlt	.+48     	; 0x19952 <lif_newdir+0x90>
   19922:	44 24       	eor	r4, r4
   19924:	43 94       	inc	r4
   19926:	51 2c       	mov	r5, r1
   19928:	61 2c       	mov	r6, r1
   1992a:	71 2c       	mov	r7, r1
#endif
            break;
        }

// We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   1992c:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1992e:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19930:	86 5a       	subi	r24, 0xA6	; 166
   19932:	9f 4f       	sbci	r25, 0xFF	; 255
   19934:	9d 8b       	std	Y+21, r25	; 0x15
   19936:	8c 8b       	std	Y+20, r24	; 0x14
   19938:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1993a:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1993c:	e4 5a       	subi	r30, 0xA4	; 164
   1993e:	ff 4f       	sbci	r31, 0xFF	; 255
   19940:	fb 8b       	std	Y+19, r31	; 0x13
   19942:	ea 8b       	std	Y+18, r30	; 0x12
                freestate = 0;                    // Try again
        }

// Computed start of next record
// Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   19944:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19946:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19948:	80 5a       	subi	r24, 0xA0	; 160
   1994a:	9f 4f       	sbci	r25, 0xFF	; 255
   1994c:	9f 8b       	std	Y+23, r25	; 0x17
   1994e:	8e 8b       	std	Y+22, r24	; 0x16
   19950:	21 c0       	rjmp	.+66     	; 0x19994 <lif_newdir+0xd2>
    }

// Not enough room ?
    if(sectors > (long)LIF->freesectors)
    {
        printf("lif_newdir: not enough free space:[%ld]\n", (long)LIF->freesectors);
   19952:	ed b7       	in	r30, 0x3d	; 61
   19954:	fe b7       	in	r31, 0x3e	; 62
   19956:	44 83       	std	Z+4, r20	; 0x04
   19958:	55 83       	std	Z+5, r21	; 0x05
   1995a:	66 83       	std	Z+6, r22	; 0x06
   1995c:	77 83       	std	Z+7, r23	; 0x07
   1995e:	89 ef       	ldi	r24, 0xF9	; 249
   19960:	98 e3       	ldi	r25, 0x38	; 56
   19962:	a0 e0       	ldi	r26, 0x00	; 0
   19964:	81 83       	std	Z+1, r24	; 0x01
   19966:	92 83       	std	Z+2, r25	; 0x02
   19968:	a3 83       	std	Z+3, r26	; 0x03
   1996a:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   1996e:	03 c1       	rjmp	.+518    	; 0x19b76 <lif_newdir+0x2b4>
#endif
            break;
        }

// We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   19970:	ec 89       	ldd	r30, Y+20	; 0x14
   19972:	fd 89       	ldd	r31, Y+21	; 0x15
   19974:	80 81       	ld	r24, Z
   19976:	91 81       	ldd	r25, Z+1	; 0x01
   19978:	8f 3f       	cpi	r24, 0xFF	; 255
   1997a:	ff ef       	ldi	r31, 0xFF	; 255
   1997c:	9f 07       	cpc	r25, r31
   1997e:	a1 f0       	breq	.+40     	; 0x199a8 <lif_newdir+0xe6>
            }
            return(index);
        }

// PURGED records
        if(LIF->DIR.FileType == 0)
   19980:	89 2b       	or	r24, r25
   19982:	09 f0       	breq	.+2      	; 0x19986 <lif_newdir+0xc4>
   19984:	ce c0       	rjmp	.+412    	; 0x19b22 <lif_newdir+0x260>
        {
            if(freestate == 0)
   19986:	61 14       	cp	r6, r1
   19988:	71 04       	cpc	r7, r1
   1998a:	09 f4       	brne	.+2      	; 0x1998e <lif_newdir+0xcc>
   1998c:	c1 c0       	rjmp	.+386    	; 0x19b10 <lif_newdir+0x24e>
   1998e:	ff ef       	ldi	r31, 0xFF	; 255
   19990:	4f 1a       	sub	r4, r31
   19992:	5f 0a       	sbc	r5, r31
   19994:	82 01       	movw	r16, r4
   19996:	01 50       	subi	r16, 0x01	; 1
   19998:	11 09       	sbc	r17, r1

// Update free space and EOF pointers
    while(1)
    {
// Write new EOF after current one
        if( !lif_readdirindex(LIF,index) )
   1999a:	b8 01       	movw	r22, r16
   1999c:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1999e:	9d 8d       	ldd	r25, Y+29	; 0x1d
   199a0:	c1 da       	rcall	.-2686   	; 0x18f24 <lif_readdirindex>
   199a2:	89 2b       	or	r24, r25
   199a4:	29 f7       	brne	.-54     	; 0x19970 <lif_newdir+0xae>
   199a6:	e7 c0       	rjmp	.+462    	; 0x19b76 <lif_newdir+0x2b4>
        if(LIF->DIR.FileType == 0xffff)
        {

// Was enough free space found in purged area ?
// Do NOT need to update EOF!
            if(freestate == 2)
   199a8:	22 e0       	ldi	r18, 0x02	; 2
   199aa:	62 16       	cp	r6, r18
   199ac:	71 04       	cpc	r7, r1
   199ae:	09 f0       	breq	.+2      	; 0x199b2 <lif_newdir+0xf0>
   199b0:	46 c0       	rjmp	.+140    	; 0x19a3e <lif_newdir+0x17c>
            {
// Update free pace for new file
                lif_dir_clear(LIF);
   199b2:	8c 8d       	ldd	r24, Y+28	; 0x1c
   199b4:	9d 8d       	ldd	r25, Y+29	; 0x1d
   199b6:	0e 94 8f c2 	call	0x1851e	; 0x1851e <lif_dir_clear>
                LIF->DIR.FileStartSector = freestart;
   199ba:	ec 8d       	ldd	r30, Y+28	; 0x1c
   199bc:	fd 8d       	ldd	r31, Y+29	; 0x1d
   199be:	e4 5a       	subi	r30, 0xA4	; 164
   199c0:	ff 4f       	sbci	r31, 0xFF	; 255
   199c2:	88 8d       	ldd	r24, Y+24	; 0x18
   199c4:	80 83       	st	Z, r24
   199c6:	99 8d       	ldd	r25, Y+25	; 0x19
   199c8:	91 83       	std	Z+1, r25	; 0x01
   199ca:	2a 8d       	ldd	r18, Y+26	; 0x1a
   199cc:	22 83       	std	Z+2, r18	; 0x02
   199ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
   199d0:	83 83       	std	Z+3, r24	; 0x03
                LIF->DIR.FileSectors = sectors;
   199d2:	ec 8d       	ldd	r30, Y+28	; 0x1c
   199d4:	fd 8d       	ldd	r31, Y+29	; 0x1d
   199d6:	e0 5a       	subi	r30, 0xA0	; 160
   199d8:	ff 4f       	sbci	r31, 0xFF	; 255
   199da:	80 82       	st	Z, r8
   199dc:	91 82       	std	Z+1, r9	; 0x01
   199de:	a2 82       	std	Z+2, r10	; 0x02
   199e0:	b3 82       	std	Z+3, r11	; 0x03
                LIF->usedsectors += sectors;
   199e2:	ec 8d       	ldd	r30, Y+28	; 0x1c
   199e4:	fd 8d       	ldd	r31, Y+29	; 0x1d
   199e6:	84 89       	ldd	r24, Z+20	; 0x14
   199e8:	95 89       	ldd	r25, Z+21	; 0x15
   199ea:	a6 89       	ldd	r26, Z+22	; 0x16
   199ec:	b7 89       	ldd	r27, Z+23	; 0x17
   199ee:	88 0d       	add	r24, r8
   199f0:	99 1d       	adc	r25, r9
   199f2:	aa 1d       	adc	r26, r10
   199f4:	bb 1d       	adc	r27, r11
   199f6:	84 8b       	std	Z+20, r24	; 0x14
   199f8:	95 8b       	std	Z+21, r25	; 0x15
   199fa:	a6 8b       	std	Z+22, r26	; 0x16
   199fc:	b7 8b       	std	Z+23, r27	; 0x17
                LIF->freesectors -= sectors;
   199fe:	80 8d       	ldd	r24, Z+24	; 0x18
   19a00:	91 8d       	ldd	r25, Z+25	; 0x19
   19a02:	a2 8d       	ldd	r26, Z+26	; 0x1a
   19a04:	b3 8d       	ldd	r27, Z+27	; 0x1b
   19a06:	88 19       	sub	r24, r8
   19a08:	99 09       	sbc	r25, r9
   19a0a:	aa 09       	sbc	r26, r10
   19a0c:	bb 09       	sbc	r27, r11
   19a0e:	80 8f       	std	Z+24, r24	; 0x18
   19a10:	91 8f       	std	Z+25, r25	; 0x19
   19a12:	a2 8f       	std	Z+26, r26	; 0x1a
   19a14:	b3 8f       	std	Z+27, r27	; 0x1b
                LIF->files++;
   19a16:	84 8d       	ldd	r24, Z+28	; 0x1c
   19a18:	95 8d       	ldd	r25, Z+29	; 0x1d
   19a1a:	01 96       	adiw	r24, 0x01	; 1
   19a1c:	95 8f       	std	Z+29, r25	; 0x1d
   19a1e:	84 8f       	std	Z+28, r24	; 0x1c
                LIF->purged--;
   19a20:	86 8d       	ldd	r24, Z+30	; 0x1e
   19a22:	97 8d       	ldd	r25, Z+31	; 0x1f
   19a24:	01 97       	sbiw	r24, 0x01	; 1
   19a26:	97 8f       	std	Z+31, r25	; 0x1f
   19a28:	86 8f       	std	Z+30, r24	; 0x1e
                LIF->dirindex = freeindex;
   19a2a:	20 a2       	std	Z+32, r2	; 0x20
   19a2c:	31 a2       	std	Z+33, r3	; 0x21
// Write new record (FileType is still EOF until data is updated by user)
                if( !lif_writedirindex(LIF,freeindex))
   19a2e:	b1 01       	movw	r22, r2
   19a30:	cf 01       	movw	r24, r30
   19a32:	df da       	rcall	.-2626   	; 0x18ff2 <lif_writedirindex>
   19a34:	89 2b       	or	r24, r25
   19a36:	09 f4       	brne	.+2      	; 0x19a3a <lif_newdir+0x178>
   19a38:	9e c0       	rjmp	.+316    	; 0x19b76 <lif_newdir+0x2b4>
   19a3a:	c1 01       	movw	r24, r2
   19a3c:	9e c0       	rjmp	.+316    	; 0x19b7a <lif_newdir+0x2b8>
                    break;
                }
                return(freeindex);
            }

            if(debuglevel & LIF_DEBUG)
   19a3e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19a42:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19a46:	92 ff       	sbrs	r25, 2
   19a48:	1e c0       	rjmp	.+60     	; 0x19a86 <lif_newdir+0x1c4>
                printf("lif_newdir: index:[%d] adding at:[%ld]to purged space:[%ld] sectors, free:[%ld]\n",
   19a4a:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19a4c:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19a4e:	80 8d       	ldd	r24, Z+24	; 0x18
   19a50:	91 8d       	ldd	r25, Z+25	; 0x19
   19a52:	a2 8d       	ldd	r26, Z+26	; 0x1a
   19a54:	b3 8d       	ldd	r27, Z+27	; 0x1b
   19a56:	ed b7       	in	r30, 0x3d	; 61
   19a58:	fe b7       	in	r31, 0x3e	; 62
   19a5a:	86 87       	std	Z+14, r24	; 0x0e
   19a5c:	97 87       	std	Z+15, r25	; 0x0f
   19a5e:	a0 8b       	std	Z+16, r26	; 0x10
   19a60:	b1 8b       	std	Z+17, r27	; 0x11
   19a62:	82 86       	std	Z+10, r8	; 0x0a
   19a64:	93 86       	std	Z+11, r9	; 0x0b
   19a66:	a4 86       	std	Z+12, r10	; 0x0c
   19a68:	b5 86       	std	Z+13, r11	; 0x0d
   19a6a:	c6 82       	std	Z+6, r12	; 0x06
   19a6c:	d7 82       	std	Z+7, r13	; 0x07
   19a6e:	e0 86       	std	Z+8, r14	; 0x08
   19a70:	f1 86       	std	Z+9, r15	; 0x09
   19a72:	15 83       	std	Z+5, r17	; 0x05
   19a74:	04 83       	std	Z+4, r16	; 0x04
   19a76:	88 ea       	ldi	r24, 0xA8	; 168
   19a78:	98 e3       	ldi	r25, 0x38	; 56
   19a7a:	a0 e0       	ldi	r26, 0x00	; 0
   19a7c:	81 83       	std	Z+1, r24	; 0x01
   19a7e:	92 83       	std	Z+2, r25	; 0x02
   19a80:	a3 83       	std	Z+3, r26	; 0x03
   19a82:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
                    (int) index,(long)start,(long) sectors, (long)LIF->freesectors);

// Write new EOF after current one
            if( !lif_writedirEOF(LIF,index+1) )
   19a86:	b8 01       	movw	r22, r16
   19a88:	6f 5f       	subi	r22, 0xFF	; 255
   19a8a:	7f 4f       	sbci	r23, 0xFF	; 255
   19a8c:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19a8e:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19a90:	0c db       	rcall	.-2536   	; 0x190aa <lif_writedirEOF>
   19a92:	89 2b       	or	r24, r25
   19a94:	09 f4       	brne	.+2      	; 0x19a98 <lif_newdir+0x1d6>
   19a96:	6f c0       	rjmp	.+222    	; 0x19b76 <lif_newdir+0x2b4>
            {
                break;
            }

            lif_dir_clear(LIF);
   19a98:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19a9a:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19a9c:	0e 94 8f c2 	call	0x1851e	; 0x1851e <lif_dir_clear>
            LIF->DIR.FileStartSector = start;
   19aa0:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19aa2:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19aa4:	e4 5a       	subi	r30, 0xA4	; 164
   19aa6:	ff 4f       	sbci	r31, 0xFF	; 255
   19aa8:	c0 82       	st	Z, r12
   19aaa:	d1 82       	std	Z+1, r13	; 0x01
   19aac:	e2 82       	std	Z+2, r14	; 0x02
   19aae:	f3 82       	std	Z+3, r15	; 0x03
            LIF->DIR.FileSectors = sectors;
   19ab0:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19ab2:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19ab4:	e0 5a       	subi	r30, 0xA0	; 160
   19ab6:	ff 4f       	sbci	r31, 0xFF	; 255
   19ab8:	80 82       	st	Z, r8
   19aba:	91 82       	std	Z+1, r9	; 0x01
   19abc:	a2 82       	std	Z+2, r10	; 0x02
   19abe:	b3 82       	std	Z+3, r11	; 0x03
            LIF->usedsectors += sectors;
   19ac0:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19ac2:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19ac4:	84 89       	ldd	r24, Z+20	; 0x14
   19ac6:	95 89       	ldd	r25, Z+21	; 0x15
   19ac8:	a6 89       	ldd	r26, Z+22	; 0x16
   19aca:	b7 89       	ldd	r27, Z+23	; 0x17
   19acc:	88 0d       	add	r24, r8
   19ace:	99 1d       	adc	r25, r9
   19ad0:	aa 1d       	adc	r26, r10
   19ad2:	bb 1d       	adc	r27, r11
   19ad4:	84 8b       	std	Z+20, r24	; 0x14
   19ad6:	95 8b       	std	Z+21, r25	; 0x15
   19ad8:	a6 8b       	std	Z+22, r26	; 0x16
   19ada:	b7 8b       	std	Z+23, r27	; 0x17
            LIF->freesectors -= sectors;
   19adc:	80 8d       	ldd	r24, Z+24	; 0x18
   19ade:	91 8d       	ldd	r25, Z+25	; 0x19
   19ae0:	a2 8d       	ldd	r26, Z+26	; 0x1a
   19ae2:	b3 8d       	ldd	r27, Z+27	; 0x1b
   19ae4:	88 19       	sub	r24, r8
   19ae6:	99 09       	sbc	r25, r9
   19ae8:	aa 09       	sbc	r26, r10
   19aea:	bb 09       	sbc	r27, r11
   19aec:	80 8f       	std	Z+24, r24	; 0x18
   19aee:	91 8f       	std	Z+25, r25	; 0x19
   19af0:	a2 8f       	std	Z+26, r26	; 0x1a
   19af2:	b3 8f       	std	Z+27, r27	; 0x1b
            LIF->files++;
   19af4:	84 8d       	ldd	r24, Z+28	; 0x1c
   19af6:	95 8d       	ldd	r25, Z+29	; 0x1d
   19af8:	01 96       	adiw	r24, 0x01	; 1
   19afa:	95 8f       	std	Z+29, r25	; 0x1d
   19afc:	84 8f       	std	Z+28, r24	; 0x1c
            LIF->dirindex = index;
   19afe:	11 a3       	std	Z+33, r17	; 0x21
// Write new record (FileType is still EOF until data is updated by user )
            if( !lif_writedirindex(LIF,index))
   19b00:	00 a3       	std	Z+32, r16	; 0x20
   19b02:	b8 01       	movw	r22, r16
   19b04:	cf 01       	movw	r24, r30
   19b06:	75 da       	rcall	.-2838   	; 0x18ff2 <lif_writedirindex>
   19b08:	89 2b       	or	r24, r25
   19b0a:	a9 f1       	breq	.+106    	; 0x19b76 <lif_newdir+0x2b4>
   19b0c:	c8 01       	movw	r24, r16
   19b0e:	35 c0       	rjmp	.+106    	; 0x19b7a <lif_newdir+0x2b8>
        }

// PURGED records
        if(LIF->DIR.FileType == 0)
        {
            if(freestate == 0)
   19b10:	c8 8e       	std	Y+24, r12	; 0x18
   19b12:	d9 8e       	std	Y+25, r13	; 0x19
   19b14:	ea 8e       	std	Y+26, r14	; 0x1a
   19b16:	fb 8e       	std	Y+27, r15	; 0x1b
   19b18:	18 01       	movw	r2, r16
            {
                freeindex = index;
                freestart = start;
                freestate = 1;
   19b1a:	66 24       	eor	r6, r6
   19b1c:	63 94       	inc	r6
   19b1e:	71 2c       	mov	r7, r1
            }
            ++index;
            continue;
   19b20:	36 cf       	rjmp	.-404    	; 0x1998e <lif_newdir+0xcc>
        }

// VALID record
        if(freestate == 1)
   19b22:	f1 e0       	ldi	r31, 0x01	; 1
   19b24:	6f 16       	cp	r6, r31
   19b26:	71 04       	cpc	r7, r1
   19b28:	a9 f4       	brne	.+42     	; 0x19b54 <lif_newdir+0x292>
        {
            long freesectors;
// Compute sectors of purged space between valid records
// Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
   19b2a:	ea 89       	ldd	r30, Y+18	; 0x12
   19b2c:	fb 89       	ldd	r31, Y+19	; 0x13
   19b2e:	80 81       	ld	r24, Z
   19b30:	91 81       	ldd	r25, Z+1	; 0x01
   19b32:	a2 81       	ldd	r26, Z+2	; 0x02
   19b34:	b3 81       	ldd	r27, Z+3	; 0x03
   19b36:	8c 19       	sub	r24, r12
   19b38:	9d 09       	sbc	r25, r13
   19b3a:	ae 09       	sbc	r26, r14
   19b3c:	bf 09       	sbc	r27, r15
   19b3e:	88 15       	cp	r24, r8
   19b40:	99 05       	cpc	r25, r9
   19b42:	aa 05       	cpc	r26, r10
   19b44:	bb 05       	cpc	r27, r11
   19b46:	1c f4       	brge	.+6      	; 0x19b4e <lif_newdir+0x28c>
                freestate = 2;                    // Found free space in purged record
            else
                freestate = 0;                    // Try again
   19b48:	61 2c       	mov	r6, r1
   19b4a:	71 2c       	mov	r7, r1
   19b4c:	03 c0       	rjmp	.+6      	; 0x19b54 <lif_newdir+0x292>
            long freesectors;
// Compute sectors of purged space between valid records
// Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
                freestate = 2;                    // Found free space in purged record
   19b4e:	82 e0       	ldi	r24, 0x02	; 2
   19b50:	68 2e       	mov	r6, r24
   19b52:	71 2c       	mov	r7, r1
                freestate = 0;                    // Try again
        }

// Computed start of next record
// Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   19b54:	ea 89       	ldd	r30, Y+18	; 0x12
   19b56:	fb 89       	ldd	r31, Y+19	; 0x13
   19b58:	c0 80       	ld	r12, Z
   19b5a:	d1 80       	ldd	r13, Z+1	; 0x01
   19b5c:	e2 80       	ldd	r14, Z+2	; 0x02
   19b5e:	f3 80       	ldd	r15, Z+3	; 0x03
   19b60:	ee 89       	ldd	r30, Y+22	; 0x16
   19b62:	ff 89       	ldd	r31, Y+23	; 0x17
   19b64:	80 81       	ld	r24, Z
   19b66:	91 81       	ldd	r25, Z+1	; 0x01
   19b68:	a2 81       	ldd	r26, Z+2	; 0x02
   19b6a:	b3 81       	ldd	r27, Z+3	; 0x03
   19b6c:	c8 0e       	add	r12, r24
   19b6e:	d9 1e       	adc	r13, r25
   19b70:	ea 1e       	adc	r14, r26
   19b72:	fb 1e       	adc	r15, r27
   19b74:	0c cf       	rjmp	.-488    	; 0x1998e <lif_newdir+0xcc>
        ++index;
    }
// ERROR
    return(-1);
   19b76:	8f ef       	ldi	r24, 0xFF	; 255
   19b78:	9f ef       	ldi	r25, 0xFF	; 255
}
   19b7a:	6d 96       	adiw	r28, 0x1d	; 29
   19b7c:	e2 e1       	ldi	r30, 0x12	; 18
   19b7e:	0c 94 25 e3 	jmp	0x1c64a	; 0x1c64a <__epilogue_restores__>

00019b82 <lif_open_volume>:
/// @param[in] *name: file name of LIF image
/// @param[in] *mode: "rb" = read, "rb+" = read/write
/// @return LIF pointer on sucesses or NULL on error
MEMSPACE
lif_t *lif_open_volume(char *name, char *mode)
{
   19b82:	a9 e3       	ldi	r26, 0x39	; 57
   19b84:	b1 e0       	ldi	r27, 0x01	; 1
   19b86:	e7 ec       	ldi	r30, 0xC7	; 199
   19b88:	fd ec       	ldi	r31, 0xCD	; 205
   19b8a:	0c 94 0f e3 	jmp	0x1c61e	; 0x1c61e <__prologue_saves__+0xc>
   19b8e:	6c 01       	movw	r12, r24
   19b90:	8b 01       	movw	r16, r22
    lif_t *LIF;
    stat_t sb, *sp;
    uint8_t buffer[LIF_SECTOR_SIZE];

    sp = lif_stat(name, (stat_t *)&sb);
   19b92:	be 01       	movw	r22, r28
   19b94:	66 5f       	subi	r22, 0xF6	; 246
   19b96:	7e 4f       	sbci	r23, 0xFE	; 254
   19b98:	0e 94 de bd 	call	0x17bbc	; 0x17bbc <lif_stat>
   19b9c:	5c 01       	movw	r10, r24
    if(sp == NULL)
   19b9e:	00 97       	sbiw	r24, 0x00	; 0
   19ba0:	09 f1       	breq	.+66     	; 0x19be4 <lif_open_volume+0x62>
        return(NULL);

// To read LIF volume we must have at minimum two sectors
// volume header a directory entry
    if(sp->st_size < (long)LIF_SECTOR_SIZE*2)
   19ba2:	fc 01       	movw	r30, r24
   19ba4:	80 8d       	ldd	r24, Z+24	; 0x18
   19ba6:	91 8d       	ldd	r25, Z+25	; 0x19
   19ba8:	a2 8d       	ldd	r26, Z+26	; 0x1a
   19baa:	b3 8d       	ldd	r27, Z+27	; 0x1b
   19bac:	81 15       	cp	r24, r1
   19bae:	f2 e0       	ldi	r31, 0x02	; 2
   19bb0:	9f 07       	cpc	r25, r31
   19bb2:	a1 05       	cpc	r26, r1
   19bb4:	b1 05       	cpc	r27, r1
   19bb6:	c8 f4       	brcc	.+50     	; 0x19bea <lif_open_volume+0x68>
    {
        if(debuglevel & LIF_DEBUG)
   19bb8:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   19bbc:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19bc0:	32 ff       	sbrs	r19, 2
   19bc2:	10 c0       	rjmp	.+32     	; 0x19be4 <lif_open_volume+0x62>
            printf("lif_open_volume:[%s] error volume header area too small:[%ld]\n", name, (long)sp->st_size);
   19bc4:	ed b7       	in	r30, 0x3d	; 61
   19bc6:	fe b7       	in	r31, 0x3e	; 62
   19bc8:	86 83       	std	Z+6, r24	; 0x06
   19bca:	97 83       	std	Z+7, r25	; 0x07
   19bcc:	a0 87       	std	Z+8, r26	; 0x08
   19bce:	b1 87       	std	Z+9, r27	; 0x09
   19bd0:	d5 82       	std	Z+5, r13	; 0x05
   19bd2:	c4 82       	std	Z+4, r12	; 0x04
   19bd4:	89 e6       	ldi	r24, 0x69	; 105
   19bd6:	98 e3       	ldi	r25, 0x38	; 56
   19bd8:	a0 e0       	ldi	r26, 0x00	; 0
   19bda:	81 83       	std	Z+1, r24	; 0x01
   19bdc:	92 83       	std	Z+2, r25	; 0x02
   19bde:	a3 83       	std	Z+3, r26	; 0x03
   19be0:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
        return(NULL);
   19be4:	00 e0       	ldi	r16, 0x00	; 0
   19be6:	10 e0       	ldi	r17, 0x00	; 0
   19be8:	c6 c0       	rjmp	.+396    	; 0x19d76 <lif_open_volume+0x1f4>
    }

// Allocate LIF structure
    LIF = lif_calloc(sizeof(lif_t)+4);
   19bea:	64 e7       	ldi	r22, 0x74	; 116
   19bec:	70 e0       	ldi	r23, 0x00	; 0
   19bee:	80 e0       	ldi	r24, 0x00	; 0
   19bf0:	90 e0       	ldi	r25, 0x00	; 0
   19bf2:	0e 94 4a bd 	call	0x17a94	; 0x17a94 <lif_calloc>
   19bf6:	7c 01       	movw	r14, r24
    if(!LIF)
   19bf8:	89 2b       	or	r24, r25
   19bfa:	a1 f3       	breq	.-24     	; 0x19be4 <lif_open_volume+0x62>
        return(NULL);

    LIF->name = lif_stralloc(name);
   19bfc:	c6 01       	movw	r24, r12
   19bfe:	0e 94 95 bd 	call	0x17b2a	; 0x17b2a <lif_stralloc>
   19c02:	f7 01       	movw	r30, r14
   19c04:	91 83       	std	Z+1, r25	; 0x01
   19c06:	80 83       	st	Z, r24
    if(!LIF->name)
   19c08:	00 97       	sbiw	r24, 0x00	; 0
   19c0a:	09 f4       	brne	.+2      	; 0x19c0e <lif_open_volume+0x8c>
   19c0c:	5e c0       	rjmp	.+188    	; 0x19cca <lif_open_volume+0x148>
    {
        lif_closedir(LIF);
        return(NULL);
    }

    LIF->imagebytes = sp->st_size;
   19c0e:	f5 01       	movw	r30, r10
   19c10:	80 8c       	ldd	r8, Z+24	; 0x18
   19c12:	91 8c       	ldd	r9, Z+25	; 0x19
   19c14:	a2 8c       	ldd	r10, Z+26	; 0x1a
   19c16:	b3 8c       	ldd	r11, Z+27	; 0x1b
   19c18:	f7 01       	movw	r30, r14
   19c1a:	80 86       	std	Z+8, r8	; 0x08
   19c1c:	91 86       	std	Z+9, r9	; 0x09
   19c1e:	a2 86       	std	Z+10, r10	; 0x0a
   19c20:	b3 86       	std	Z+11, r11	; 0x0b
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   19c22:	77 27       	eor	r23, r23
   19c24:	6b 2d       	mov	r22, r11
   19c26:	5a 2d       	mov	r21, r10
   19c28:	49 2d       	mov	r20, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   19c2a:	88 20       	and	r8, r8
   19c2c:	21 f0       	breq	.+8      	; 0x19c36 <lif_open_volume+0xb4>
        ++sectors;
   19c2e:	4f 5f       	subi	r20, 0xFF	; 255
   19c30:	5f 4f       	sbci	r21, 0xFF	; 255
   19c32:	6f 4f       	sbci	r22, 0xFF	; 255
   19c34:	7f 4f       	sbci	r23, 0xFF	; 255
        lif_closedir(LIF);
        return(NULL);
    }

    LIF->imagebytes = sp->st_size;
    LIF->sectors = lif_bytes2sectors(sp->st_size);
   19c36:	f7 01       	movw	r30, r14
   19c38:	44 83       	std	Z+4, r20	; 0x04
   19c3a:	55 83       	std	Z+5, r21	; 0x05
   19c3c:	66 83       	std	Z+6, r22	; 0x06
   19c3e:	77 83       	std	Z+7, r23	; 0x07

    LIF->fp = lif_open(LIF->name,mode);
   19c40:	b8 01       	movw	r22, r16
   19c42:	0e 94 b4 bd 	call	0x17b68	; 0x17b68 <lif_open>
   19c46:	f7 01       	movw	r30, r14
   19c48:	93 83       	std	Z+3, r25	; 0x03
   19c4a:	82 83       	std	Z+2, r24	; 0x02
    if(!LIF->fp)
   19c4c:	89 2b       	or	r24, r25
   19c4e:	e9 f1       	breq	.+122    	; 0x19cca <lif_open_volume+0x148>
        lif_closedir(LIF);
        return(NULL);
    }

// Volume header must be it least one sector
    if( lif_read(LIF, buffer, 0, LIF_SECTOR_SIZE) < LIF_SECTOR_SIZE)
   19c50:	00 e0       	ldi	r16, 0x00	; 0
   19c52:	11 e0       	ldi	r17, 0x01	; 1
   19c54:	20 e0       	ldi	r18, 0x00	; 0
   19c56:	30 e0       	ldi	r19, 0x00	; 0
   19c58:	a9 01       	movw	r20, r18
   19c5a:	be 01       	movw	r22, r28
   19c5c:	66 5f       	subi	r22, 0xF6	; 246
   19c5e:	7f 4f       	sbci	r23, 0xFF	; 255
   19c60:	c7 01       	movw	r24, r14
   19c62:	0e 94 38 be 	call	0x17c70	; 0x17c70 <lif_read>
   19c66:	6f 3f       	cpi	r22, 0xFF	; 255
   19c68:	71 05       	cpc	r23, r1
   19c6a:	81 05       	cpc	r24, r1
   19c6c:	91 05       	cpc	r25, r1
   19c6e:	09 f0       	breq	.+2      	; 0x19c72 <lif_open_volume+0xf0>
   19c70:	6c f4       	brge	.+26     	; 0x19c8c <lif_open_volume+0x10a>
    {
        if(debuglevel & LIF_DEBUG)
   19c72:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19c76:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19c7a:	92 ff       	sbrs	r25, 2
   19c7c:	26 c0       	rjmp	.+76     	; 0x19cca <lif_open_volume+0x148>
            printf("lif_open_volume:[%s] error read volume header failed\n", name);
   19c7e:	ed b7       	in	r30, 0x3d	; 61
   19c80:	fe b7       	in	r31, 0x3e	; 62
   19c82:	d5 82       	std	Z+5, r13	; 0x05
   19c84:	c4 82       	std	Z+4, r12	; 0x04
   19c86:	83 e3       	ldi	r24, 0x33	; 51
   19c88:	98 e3       	ldi	r25, 0x38	; 56
   19c8a:	19 c0       	rjmp	.+50     	; 0x19cbe <lif_open_volume+0x13c>
        lif_closedir(LIF);
        return(NULL);
    }

// Unpack Volumes has the Directory start sector
    lif_str2vol(buffer, LIF);
   19c8c:	b7 01       	movw	r22, r14
   19c8e:	ce 01       	movw	r24, r28
   19c90:	0a 96       	adiw	r24, 0x0a	; 10
   19c92:	0e 94 58 c0 	call	0x180b0	; 0x180b0 <lif_str2vol>

// Validate basic Volume headers
    if( !lif_check_volume(LIF) )
   19c96:	c7 01       	movw	r24, r14
   19c98:	0e 94 64 c4 	call	0x188c8	; 0x188c8 <lif_check_volume>
   19c9c:	89 2b       	or	r24, r25
   19c9e:	c1 f4       	brne	.+48     	; 0x19cd0 <lif_open_volume+0x14e>
    {
        if(debuglevel & LIF_DEBUG)
   19ca0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19ca4:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19ca8:	92 ff       	sbrs	r25, 2
   19caa:	0f c0       	rjmp	.+30     	; 0x19cca <lif_open_volume+0x148>
            printf("lif_open_volume:[%s] error volume validate failed\n", LIF->name);
   19cac:	f7 01       	movw	r30, r14
   19cae:	80 81       	ld	r24, Z
   19cb0:	91 81       	ldd	r25, Z+1	; 0x01
   19cb2:	ed b7       	in	r30, 0x3d	; 61
   19cb4:	fe b7       	in	r31, 0x3e	; 62
   19cb6:	95 83       	std	Z+5, r25	; 0x05
   19cb8:	84 83       	std	Z+4, r24	; 0x04
   19cba:	80 e0       	ldi	r24, 0x00	; 0
   19cbc:	98 e3       	ldi	r25, 0x38	; 56
   19cbe:	a0 e0       	ldi	r26, 0x00	; 0
   19cc0:	81 83       	std	Z+1, r24	; 0x01
   19cc2:	92 83       	std	Z+2, r25	; 0x02
   19cc4:	a3 83       	std	Z+3, r26	; 0x03
   19cc6:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   19cca:	c7 01       	movw	r24, r14
   19ccc:	9d d8       	rcall	.-3782   	; 0x18e08 <lif_close_volume>
   19cce:	8a cf       	rjmp	.-236    	; 0x19be4 <lif_open_volume+0x62>
        lif_closedir(LIF);
        return(NULL);
    }

// Initialize remaining LIF headers
    LIF->filestart = LIF->VOL.DirStartSector + LIF->VOL.DirSectors;
   19cd0:	f7 01       	movw	r30, r14
   19cd2:	45 a5       	ldd	r20, Z+45	; 0x2d
   19cd4:	56 a5       	ldd	r21, Z+46	; 0x2e
   19cd6:	67 a5       	ldd	r22, Z+47	; 0x2f
   19cd8:	70 a9       	ldd	r23, Z+48	; 0x30
   19cda:	85 a9       	ldd	r24, Z+53	; 0x35
   19cdc:	96 a9       	ldd	r25, Z+54	; 0x36
   19cde:	a7 a9       	ldd	r26, Z+55	; 0x37
   19ce0:	b0 ad       	ldd	r27, Z+56	; 0x38
   19ce2:	48 0f       	add	r20, r24
   19ce4:	59 1f       	adc	r21, r25
   19ce6:	6a 1f       	adc	r22, r26
   19ce8:	7b 1f       	adc	r23, r27
   19cea:	44 87       	std	Z+12, r20	; 0x0c
   19cec:	55 87       	std	Z+13, r21	; 0x0d
   19cee:	66 87       	std	Z+14, r22	; 0x0e
   19cf0:	77 87       	std	Z+15, r23	; 0x0f
    LIF->filesectors = LIF->sectors - LIF->filestart;
   19cf2:	84 81       	ldd	r24, Z+4	; 0x04
   19cf4:	95 81       	ldd	r25, Z+5	; 0x05
   19cf6:	a6 81       	ldd	r26, Z+6	; 0x06
   19cf8:	b7 81       	ldd	r27, Z+7	; 0x07
   19cfa:	84 1b       	sub	r24, r20
   19cfc:	95 0b       	sbc	r25, r21
   19cfe:	a6 0b       	sbc	r26, r22
   19d00:	b7 0b       	sbc	r27, r23
   19d02:	80 8b       	std	Z+16, r24	; 0x10
   19d04:	91 8b       	std	Z+17, r25	; 0x11
   19d06:	a2 8b       	std	Z+18, r26	; 0x12
   19d08:	b3 8b       	std	Z+19, r27	; 0x13
    LIF->freesectors = LIF->filesectors;
   19d0a:	80 8f       	std	Z+24, r24	; 0x18
   19d0c:	91 8f       	std	Z+25, r25	; 0x19
   19d0e:	a2 8f       	std	Z+26, r26	; 0x1a
   19d10:	b3 8f       	std	Z+27, r27	; 0x1b
    LIF->usedsectors = 0;
   19d12:	14 8a       	std	Z+20, r1	; 0x14
   19d14:	15 8a       	std	Z+21, r1	; 0x15
   19d16:	16 8a       	std	Z+22, r1	; 0x16
   19d18:	17 8a       	std	Z+23, r1	; 0x17
    LIF->purged = 0;
   19d1a:	17 8e       	std	Z+31, r1	; 0x1f
   19d1c:	16 8e       	std	Z+30, r1	; 0x1e
    LIF->files = 0;
   19d1e:	15 8e       	std	Z+29, r1	; 0x1d
   19d20:	14 8e       	std	Z+28, r1	; 0x1c
    LIF->dirindex = 0;
   19d22:	11 a2       	std	Z+33, r1	; 0x21
   19d24:	10 a2       	std	Z+32, r1	; 0x20
    LIF->EOFindex = 0;
   19d26:	13 a2       	std	Z+35, r1	; 0x23
   19d28:	12 a2       	std	Z+34, r1	; 0x22

    if( lif_updatefree(LIF) == NULL)
   19d2a:	c7 01       	movw	r24, r14
   19d2c:	d6 d9       	rcall	.-3156   	; 0x190da <lif_updatefree>
   19d2e:	8c 01       	movw	r16, r24
   19d30:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19d34:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19d38:	01 15       	cp	r16, r1
   19d3a:	11 05       	cpc	r17, r1
   19d3c:	a1 f4       	brne	.+40     	; 0x19d66 <lif_open_volume+0x1e4>
    {
        if(debuglevel & LIF_DEBUG)
   19d3e:	92 ff       	sbrs	r25, 2
   19d40:	0f c0       	rjmp	.+30     	; 0x19d60 <lif_open_volume+0x1de>
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
   19d42:	f7 01       	movw	r30, r14
   19d44:	80 81       	ld	r24, Z
   19d46:	91 81       	ldd	r25, Z+1	; 0x01
   19d48:	ed b7       	in	r30, 0x3d	; 61
   19d4a:	fe b7       	in	r31, 0x3e	; 62
   19d4c:	95 83       	std	Z+5, r25	; 0x05
   19d4e:	84 83       	std	Z+4, r24	; 0x04
   19d50:	8d ec       	ldi	r24, 0xCD	; 205
   19d52:	97 e3       	ldi	r25, 0x37	; 55
   19d54:	a0 e0       	ldi	r26, 0x00	; 0
   19d56:	81 83       	std	Z+1, r24	; 0x01
   19d58:	92 83       	std	Z+2, r25	; 0x02
   19d5a:	a3 83       	std	Z+3, r26	; 0x03
   19d5c:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   19d60:	c7 01       	movw	r24, r14
   19d62:	52 d8       	rcall	.-3932   	; 0x18e08 <lif_close_volume>
    if( lif_updatefree(LIF) == NULL)
    {
        if(debuglevel & LIF_DEBUG)
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
        lif_closedir(LIF);
        return(NULL);
   19d64:	08 c0       	rjmp	.+16     	; 0x19d76 <lif_open_volume+0x1f4>
    }

    if(debuglevel &LIF_DEBUG)
   19d66:	92 ff       	sbrs	r25, 2
   19d68:	05 c0       	rjmp	.+10     	; 0x19d74 <lif_open_volume+0x1f2>
        lif_dump_vol(LIF, "Volume Listing");
   19d6a:	62 e4       	ldi	r22, 0x42	; 66
   19d6c:	76 e1       	ldi	r23, 0x16	; 22
   19d6e:	c7 01       	movw	r24, r14
   19d70:	0e 94 9e c2 	call	0x1853c	; 0x1853c <lif_dump_vol>
   19d74:	87 01       	movw	r16, r14
    return( LIF );
}
   19d76:	c8 01       	movw	r24, r16
   19d78:	c7 5c       	subi	r28, 0xC7	; 199
   19d7a:	de 4f       	sbci	r29, 0xFE	; 254
   19d7c:	ec e0       	ldi	r30, 0x0C	; 12
   19d7e:	0c 94 2b e3 	jmp	0x1c656	; 0x1c656 <__epilogue_restores__+0xc>

00019d82 <lif_dir>:
/// @brief Display a LIF image file directory
/// @param[in] lifimagename: LIF disk image name
/// @return -1 on error or number of files found
MEMSPACE
void lif_dir(char *lifimagename)
{
   19d82:	2f 92       	push	r2
   19d84:	3f 92       	push	r3
   19d86:	4f 92       	push	r4
   19d88:	5f 92       	push	r5
   19d8a:	6f 92       	push	r6
   19d8c:	8f 92       	push	r8
   19d8e:	9f 92       	push	r9
   19d90:	af 92       	push	r10
   19d92:	bf 92       	push	r11
   19d94:	cf 92       	push	r12
   19d96:	df 92       	push	r13
   19d98:	ef 92       	push	r14
   19d9a:	0f 93       	push	r16
   19d9c:	1f 93       	push	r17
   19d9e:	cf 93       	push	r28
   19da0:	df 93       	push	r29
   19da2:	cd b7       	in	r28, 0x3d	; 61
   19da4:	de b7       	in	r29, 0x3e	; 62
   19da6:	af 97       	sbiw	r28, 0x2f	; 47
   19da8:	0f b6       	in	r0, 0x3f	; 63
   19daa:	f8 94       	cli
   19dac:	de bf       	out	0x3e, r29	; 62
   19dae:	0f be       	out	0x3f, r0	; 63
   19db0:	cd bf       	out	0x3d, r28	; 61
    int index = 0;
    char *vol;

    int warn = ' ';

    LIF = lif_open_volume(lifimagename,"rb+");
   19db2:	68 e0       	ldi	r22, 0x08	; 8
   19db4:	79 e0       	ldi	r23, 0x09	; 9
   19db6:	e5 de       	rcall	.-566    	; 0x19b82 <lif_open_volume>
   19db8:	9f a7       	std	Y+47, r25	; 0x2f
   19dba:	8e a7       	std	Y+46, r24	; 0x2e
    if(LIF == NULL)
   19dbc:	00 97       	sbiw	r24, 0x00	; 0
   19dbe:	09 f4       	brne	.+2      	; 0x19dc2 <lif_dir+0x40>
   19dc0:	9e c1       	rjmp	.+828    	; 0x1a0fe <lif_dir+0x37c>
        return;

    vol = (char *)LIF->VOL.Label;
    if(!vol[0])
   19dc2:	fc 01       	movw	r30, r24
   19dc4:	86 a1       	ldd	r24, Z+38	; 0x26
   19dc6:	88 23       	and	r24, r24
   19dc8:	21 f0       	breq	.+8      	; 0x19dd2 <lif_dir+0x50>

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return;

    vol = (char *)LIF->VOL.Label;
   19dca:	8f 01       	movw	r16, r30
   19dcc:	0a 5d       	subi	r16, 0xDA	; 218
   19dce:	1f 4f       	sbci	r17, 0xFF	; 255
   19dd0:	02 c0       	rjmp	.+4      	; 0x19dd6 <lif_dir+0x54>
    if(!vol[0])
        vol = "<EMPTY>";
   19dd2:	04 ef       	ldi	r16, 0xF4	; 244
   19dd4:	15 e1       	ldi	r17, 0x15	; 21

    printf("Volume:[%s] Date:[%s]\n", vol, lif_lifbcd2timestr(LIF->VOL.date));
   19dd6:	8e a5       	ldd	r24, Y+46	; 0x2e
   19dd8:	9f a5       	ldd	r25, Y+47	; 0x2f
   19dda:	87 5b       	subi	r24, 0xB7	; 183
   19ddc:	9f 4f       	sbci	r25, 0xFF	; 255
   19dde:	0e 94 62 c2 	call	0x184c4	; 0x184c4 <lif_lifbcd2timestr>
   19de2:	ed b7       	in	r30, 0x3d	; 61
   19de4:	fe b7       	in	r31, 0x3e	; 62
   19de6:	97 83       	std	Z+7, r25	; 0x07
   19de8:	86 83       	std	Z+6, r24	; 0x06
   19dea:	15 83       	std	Z+5, r17	; 0x05
   19dec:	04 83       	std	Z+4, r16	; 0x04
   19dee:	86 eb       	ldi	r24, 0xB6	; 182
   19df0:	97 e3       	ldi	r25, 0x37	; 55
   19df2:	a0 e0       	ldi	r26, 0x00	; 0
   19df4:	81 83       	std	Z+1, r24	; 0x01
   19df6:	92 83       	std	Z+2, r25	; 0x02
   19df8:	a3 83       	std	Z+3, r26	; 0x03
   19dfa:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>

    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
   19dfe:	86 e7       	ldi	r24, 0x76	; 118
   19e00:	97 e3       	ldi	r25, 0x37	; 55
   19e02:	a0 e0       	ldi	r26, 0x00	; 0
   19e04:	ed b7       	in	r30, 0x3d	; 61
   19e06:	fe b7       	in	r31, 0x3e	; 62
   19e08:	81 83       	std	Z+1, r24	; 0x01
   19e0a:	92 83       	std	Z+2, r25	; 0x02
   19e0c:	a3 83       	std	Z+3, r26	; 0x03
   19e0e:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    long bytes;
    lif_t *LIF;
    int index = 0;
    char *vol;

    int warn = ' ';
   19e12:	00 e2       	ldi	r16, 0x20	; 32
   19e14:	10 e0       	ldi	r17, 0x00	; 0
   19e16:	1f 8b       	std	Y+23, r17	; 0x17
   19e18:	0e 8b       	std	Y+22, r16	; 0x16
MEMSPACE
void lif_dir(char *lifimagename)
{
    long bytes;
    lif_t *LIF;
    int index = 0;
   19e1a:	21 2c       	mov	r2, r1
   19e1c:	31 2c       	mov	r3, r1
    {

        if(!lif_readdirindex(LIF,index))
            break;

        if(LIF->DIR.FileType == 0xffff)
   19e1e:	0e a5       	ldd	r16, Y+46	; 0x2e
   19e20:	1f a5       	ldd	r17, Y+47	; 0x2f
   19e22:	06 5a       	subi	r16, 0xA6	; 166
   19e24:	1f 4f       	sbci	r17, 0xFF	; 255
   19e26:	1d 8f       	std	Y+29, r17	; 0x1d
   19e28:	0c 8f       	std	Y+28, r16	; 0x1c
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   19e2a:	0e a5       	ldd	r16, Y+46	; 0x2e
   19e2c:	1f a5       	ldd	r17, Y+47	; 0x2f
   19e2e:	00 5a       	subi	r16, 0xA0	; 160
   19e30:	1f 4f       	sbci	r17, 0xFF	; 255
   19e32:	1d a3       	std	Y+37, r17	; 0x25
   19e34:	0c a3       	std	Y+36, r16	; 0x24

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   19e36:	0e a5       	ldd	r16, Y+46	; 0x2e
   19e38:	1f a5       	ldd	r17, Y+47	; 0x2f
   19e3a:	04 59       	subi	r16, 0x94	; 148
   19e3c:	1f 4f       	sbci	r17, 0xFF	; 255
   19e3e:	1f a3       	std	Y+39, r17	; 0x27
   19e40:	0e a3       	std	Y+38, r16	; 0x26
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   19e42:	8a e2       	ldi	r24, 0x2A	; 42
   19e44:	97 e3       	ldi	r25, 0x37	; 55
   19e46:	6c 01       	movw	r12, r24
   19e48:	e1 2c       	mov	r14, r1
   19e4a:	0e a5       	ldd	r16, Y+46	; 0x2e
   19e4c:	1f a5       	ldd	r17, Y+47	; 0x2f
   19e4e:	01 5b       	subi	r16, 0xB1	; 177
   19e50:	1f 4f       	sbci	r17, 0xFF	; 255
   19e52:	1f 8f       	std	Y+31, r17	; 0x1f
   19e54:	0e 8f       	std	Y+30, r16	; 0x1e
                }
            }
        }

// name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n",
   19e56:	8a ef       	ldi	r24, 0xFA	; 250
   19e58:	96 e3       	ldi	r25, 0x36	; 54
   19e5a:	2c 01       	movw	r4, r24
   19e5c:	61 2c       	mov	r6, r1
   19e5e:	0e a5       	ldd	r16, Y+46	; 0x2e
   19e60:	1f a5       	ldd	r17, Y+47	; 0x2f
   19e62:	04 5a       	subi	r16, 0xA4	; 164
   19e64:	1f 4f       	sbci	r17, 0xFF	; 255
   19e66:	19 a7       	std	Y+41, r17	; 0x29
   19e68:	08 a7       	std	Y+40, r16	; 0x28
   19e6a:	0e a5       	ldd	r16, Y+46	; 0x2e
   19e6c:	1f a5       	ldd	r17, Y+47	; 0x2f
   19e6e:	02 59       	subi	r16, 0x92	; 146
   19e70:	1f 4f       	sbci	r17, 0xFF	; 255
   19e72:	1b a7       	std	Y+43, r17	; 0x2b
   19e74:	0a a7       	std	Y+42, r16	; 0x2a
   19e76:	0e a5       	ldd	r16, Y+46	; 0x2e
   19e78:	1f a5       	ldd	r17, Y+47	; 0x2f
   19e7a:	0c 59       	subi	r16, 0x9C	; 156
   19e7c:	1f 4f       	sbci	r17, 0xFF	; 255
   19e7e:	1d a7       	std	Y+45, r17	; 0x2d
   19e80:	0c a7       	std	Y+44, r16	; 0x2c

    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
    while(1)
    {

        if(!lif_readdirindex(LIF,index))
   19e82:	b1 01       	movw	r22, r2
   19e84:	8e a5       	ldd	r24, Y+46	; 0x2e
   19e86:	9f a5       	ldd	r25, Y+47	; 0x2f
   19e88:	4d d8       	rcall	.-3942   	; 0x18f24 <lif_readdirindex>
   19e8a:	89 2b       	or	r24, r25
   19e8c:	09 f4       	brne	.+2      	; 0x19e90 <lif_dir+0x10e>
   19e8e:	ad c0       	rjmp	.+346    	; 0x19fea <lif_dir+0x268>
            break;

        if(LIF->DIR.FileType == 0xffff)
   19e90:	ac 8d       	ldd	r26, Y+28	; 0x1c
   19e92:	bd 8d       	ldd	r27, Y+29	; 0x1d
   19e94:	8d 91       	ld	r24, X+
   19e96:	9c 91       	ld	r25, X
   19e98:	8f 3f       	cpi	r24, 0xFF	; 255
   19e9a:	bf ef       	ldi	r27, 0xFF	; 255
   19e9c:	9b 07       	cpc	r25, r27
   19e9e:	09 f4       	brne	.+2      	; 0x19ea2 <lif_dir+0x120>
   19ea0:	a4 c0       	rjmp	.+328    	; 0x19fea <lif_dir+0x268>
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   19ea2:	ec a1       	ldd	r30, Y+36	; 0x24
   19ea4:	fd a1       	ldd	r31, Y+37	; 0x25
   19ea6:	40 81       	ld	r20, Z
   19ea8:	51 81       	ldd	r21, Z+1	; 0x01
   19eaa:	62 81       	ldd	r22, Z+2	; 0x02
   19eac:	73 81       	ldd	r23, Z+3	; 0x03
   19eae:	00 27       	eor	r16, r16
   19eb0:	14 2f       	mov	r17, r20
   19eb2:	25 2f       	mov	r18, r21
   19eb4:	36 2f       	mov	r19, r22
   19eb6:	08 8f       	std	Y+24, r16	; 0x18
   19eb8:	19 8f       	std	Y+25, r17	; 0x19
   19eba:	2a 8f       	std	Y+26, r18	; 0x1a
   19ebc:	3b 8f       	std	Y+27, r19	; 0x1b

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
   19ebe:	8c 7f       	andi	r24, 0xFC	; 252
   19ec0:	80 31       	cpi	r24, 0x10	; 16
   19ec2:	90 4e       	sbci	r25, 0xE0	; 224
   19ec4:	09 f0       	breq	.+2      	; 0x19ec8 <lif_dir+0x146>
   19ec6:	4b c0       	rjmp	.+150    	; 0x19f5e <lif_dir+0x1dc>
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   19ec8:	ae a1       	ldd	r26, Y+38	; 0x26
   19eca:	bf a1       	ldd	r27, Y+39	; 0x27
   19ecc:	8d 91       	ld	r24, X+
   19ece:	9c 91       	ld	r25, X
   19ed0:	00 97       	sbiw	r24, 0x00	; 0
   19ed2:	b9 f0       	breq	.+46     	; 0x19f02 <lif_dir+0x180>
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   19ed4:	4c 01       	movw	r8, r24
   19ed6:	a1 2c       	mov	r10, r1
   19ed8:	b1 2c       	mov	r11, r1
   19eda:	33 27       	eor	r19, r19
   19edc:	2b 2d       	mov	r18, r11
   19ede:	1a 2d       	mov	r17, r10
   19ee0:	09 2d       	mov	r16, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   19ee2:	88 23       	and	r24, r24
   19ee4:	21 f0       	breq	.+8      	; 0x19eee <lif_dir+0x16c>
        ++sectors;
   19ee6:	0f 5f       	subi	r16, 0xFF	; 255
   19ee8:	1f 4f       	sbci	r17, 0xFF	; 255
   19eea:	2f 4f       	sbci	r18, 0xFF	; 255
   19eec:	3f 4f       	sbci	r19, 0xFF	; 255

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   19eee:	40 17       	cp	r20, r16
   19ef0:	51 07       	cpc	r21, r17
   19ef2:	62 07       	cpc	r22, r18
   19ef4:	73 07       	cpc	r23, r19
   19ef6:	29 f4       	brne	.+10     	; 0x19f02 <lif_dir+0x180>
            {
                bytes = LIF->DIR.FileBytes;
   19ef8:	88 8e       	std	Y+24, r8	; 0x18
   19efa:	99 8e       	std	Y+25, r9	; 0x19
   19efc:	aa 8e       	std	Y+26, r10	; 0x1a
   19efe:	bb 8e       	std	Y+27, r11	; 0x1b
   19f00:	2e c0       	rjmp	.+92     	; 0x19f5e <lif_dir+0x1dc>
            }
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
   19f02:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   19f06:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19f0a:	32 ff       	sbrs	r19, 2
   19f0c:	24 c0       	rjmp	.+72     	; 0x19f56 <lif_dir+0x1d4>
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   19f0e:	4c 01       	movw	r8, r24
   19f10:	a1 2c       	mov	r10, r1
   19f12:	b1 2c       	mov	r11, r1
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   19f14:	33 27       	eor	r19, r19
   19f16:	2b 2d       	mov	r18, r11
   19f18:	1a 2d       	mov	r17, r10
   19f1a:	09 2d       	mov	r16, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   19f1c:	88 23       	and	r24, r24
   19f1e:	21 f0       	breq	.+8      	; 0x19f28 <lif_dir+0x1a6>
        ++sectors;
   19f20:	0f 5f       	subi	r16, 0xFF	; 255
   19f22:	1f 4f       	sbci	r17, 0xFF	; 255
   19f24:	2f 4f       	sbci	r18, 0xFF	; 255
   19f26:	3f 4f       	sbci	r19, 0xFF	; 255
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   19f28:	ed b7       	in	r30, 0x3d	; 61
   19f2a:	fe b7       	in	r31, 0x3e	; 62
   19f2c:	46 87       	std	Z+14, r20	; 0x0e
   19f2e:	57 87       	std	Z+15, r21	; 0x0f
   19f30:	60 8b       	std	Z+16, r22	; 0x10
   19f32:	71 8b       	std	Z+17, r23	; 0x11
   19f34:	02 87       	std	Z+10, r16	; 0x0a
   19f36:	13 87       	std	Z+11, r17	; 0x0b
   19f38:	24 87       	std	Z+12, r18	; 0x0c
   19f3a:	35 87       	std	Z+13, r19	; 0x0d
   19f3c:	86 82       	std	Z+6, r8	; 0x06
   19f3e:	97 82       	std	Z+7, r9	; 0x07
   19f40:	a0 86       	std	Z+8, r10	; 0x08
   19f42:	b1 86       	std	Z+9, r11	; 0x09
   19f44:	0e 8d       	ldd	r16, Y+30	; 0x1e
   19f46:	1f 8d       	ldd	r17, Y+31	; 0x1f
   19f48:	15 83       	std	Z+5, r17	; 0x05
   19f4a:	04 83       	std	Z+4, r16	; 0x04
   19f4c:	c1 82       	std	Z+1, r12	; 0x01
   19f4e:	d2 82       	std	Z+2, r13	; 0x02
   19f50:	e3 82       	std	Z+3, r14	; 0x03
   19f52:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
            {
                bytes = LIF->DIR.FileBytes;
            }
            else
            {
                warn = '!';
   19f56:	01 e2       	ldi	r16, 0x21	; 33
   19f58:	10 e0       	ldi	r17, 0x00	; 0
   19f5a:	1f 8b       	std	Y+23, r17	; 0x17
   19f5c:	0e 8b       	std	Y+22, r16	; 0x16
                }
            }
        }

// name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n",
   19f5e:	ac 8d       	ldd	r26, Y+28	; 0x1c
   19f60:	bd 8d       	ldd	r27, Y+29	; 0x1d
   19f62:	8d 90       	ld	r8, X+
   19f64:	9c 90       	ld	r9, X
   19f66:	81 14       	cp	r8, r1
   19f68:	91 04       	cpc	r9, r1
   19f6a:	19 f0       	breq	.+6      	; 0x19f72 <lif_dir+0x1f0>
   19f6c:	0e 8d       	ldd	r16, Y+30	; 0x1e
   19f6e:	1f 8d       	ldd	r17, Y+31	; 0x1f
   19f70:	02 c0       	rjmp	.+4      	; 0x19f76 <lif_dir+0x1f4>
   19f72:	01 e5       	ldi	r16, 0x51	; 81
   19f74:	16 e1       	ldi	r17, 0x16	; 22
   19f76:	a8 a5       	ldd	r26, Y+40	; 0x28
   19f78:	b9 a5       	ldd	r27, Y+41	; 0x29
   19f7a:	8d 91       	ld	r24, X+
   19f7c:	9d 91       	ld	r25, X+
   19f7e:	0d 90       	ld	r0, X+
   19f80:	bc 91       	ld	r27, X
   19f82:	a0 2d       	mov	r26, r0
   19f84:	88 a3       	std	Y+32, r24	; 0x20
   19f86:	99 a3       	std	Y+33, r25	; 0x21
   19f88:	aa a3       	std	Y+34, r26	; 0x22
   19f8a:	bb a3       	std	Y+35, r27	; 0x23
   19f8c:	ea a5       	ldd	r30, Y+42	; 0x2a
   19f8e:	fb a5       	ldd	r31, Y+43	; 0x2b
   19f90:	a0 80       	ld	r10, Z
   19f92:	b1 80       	ldd	r11, Z+1	; 0x01
   19f94:	8c a5       	ldd	r24, Y+44	; 0x2c
   19f96:	9d a5       	ldd	r25, Y+45	; 0x2d
   19f98:	0e 94 62 c2 	call	0x184c4	; 0x184c4 <lif_lifbcd2timestr>
   19f9c:	ed b7       	in	r30, 0x3d	; 61
   19f9e:	fe b7       	in	r31, 0x3e	; 62
   19fa0:	95 8b       	std	Z+21, r25	; 0x15
   19fa2:	84 8b       	std	Z+20, r24	; 0x14
   19fa4:	b3 8a       	std	Z+19, r11	; 0x13
   19fa6:	a2 8a       	std	Z+18, r10	; 0x12
   19fa8:	2e 89       	ldd	r18, Y+22	; 0x16
   19faa:	3f 89       	ldd	r19, Y+23	; 0x17
   19fac:	31 8b       	std	Z+17, r19	; 0x11
   19fae:	20 8b       	std	Z+16, r18	; 0x10
   19fb0:	88 8d       	ldd	r24, Y+24	; 0x18
   19fb2:	99 8d       	ldd	r25, Y+25	; 0x19
   19fb4:	aa 8d       	ldd	r26, Y+26	; 0x1a
   19fb6:	bb 8d       	ldd	r27, Y+27	; 0x1b
   19fb8:	84 87       	std	Z+12, r24	; 0x0c
   19fba:	95 87       	std	Z+13, r25	; 0x0d
   19fbc:	a6 87       	std	Z+14, r26	; 0x0e
   19fbe:	b7 87       	std	Z+15, r27	; 0x0f
   19fc0:	88 a1       	ldd	r24, Y+32	; 0x20
   19fc2:	99 a1       	ldd	r25, Y+33	; 0x21
   19fc4:	aa a1       	ldd	r26, Y+34	; 0x22
   19fc6:	bb a1       	ldd	r27, Y+35	; 0x23
   19fc8:	80 87       	std	Z+8, r24	; 0x08
   19fca:	91 87       	std	Z+9, r25	; 0x09
   19fcc:	a2 87       	std	Z+10, r26	; 0x0a
   19fce:	b3 87       	std	Z+11, r27	; 0x0b
   19fd0:	97 82       	std	Z+7, r9	; 0x07
   19fd2:	86 82       	std	Z+6, r8	; 0x06
   19fd4:	15 83       	std	Z+5, r17	; 0x05
   19fd6:	04 83       	std	Z+4, r16	; 0x04
   19fd8:	41 82       	std	Z+1, r4	; 0x01
   19fda:	52 82       	std	Z+2, r5	; 0x02
   19fdc:	63 82       	std	Z+3, r6	; 0x03
   19fde:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
            (long)bytes,
            warn,
            (int)LIF->DIR.SectorSize,
            lif_lifbcd2timestr(LIF->DIR.date));

        ++index;
   19fe2:	ff ef       	ldi	r31, 0xFF	; 255
   19fe4:	2f 1a       	sub	r2, r31
   19fe6:	3f 0a       	sbc	r3, r31
    }
   19fe8:	4c cf       	rjmp	.-360    	; 0x19e82 <lif_dir+0x100>

    printf("\n");
   19fea:	88 ef       	ldi	r24, 0xF8	; 248
   19fec:	96 e3       	ldi	r25, 0x36	; 54
   19fee:	a0 e0       	ldi	r26, 0x00	; 0
   19ff0:	ed b7       	in	r30, 0x3d	; 61
   19ff2:	fe b7       	in	r31, 0x3e	; 62
   19ff4:	81 83       	std	Z+1, r24	; 0x01
   19ff6:	92 83       	std	Z+2, r25	; 0x02
   19ff8:	a3 83       	std	Z+3, r26	; 0x03
   19ffa:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    printf("%8ld Files\n", (long)LIF->files);
   19ffe:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a000:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a002:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a004:	95 8d       	ldd	r25, Z+29	; 0x1d
   1a006:	09 2e       	mov	r0, r25
   1a008:	00 0c       	add	r0, r0
   1a00a:	aa 0b       	sbc	r26, r26
   1a00c:	bb 0b       	sbc	r27, r27
   1a00e:	ed b7       	in	r30, 0x3d	; 61
   1a010:	fe b7       	in	r31, 0x3e	; 62
   1a012:	84 83       	std	Z+4, r24	; 0x04
   1a014:	95 83       	std	Z+5, r25	; 0x05
   1a016:	a6 83       	std	Z+6, r26	; 0x06
   1a018:	b7 83       	std	Z+7, r27	; 0x07
   1a01a:	8c ee       	ldi	r24, 0xEC	; 236
   1a01c:	96 e3       	ldi	r25, 0x36	; 54
   1a01e:	a0 e0       	ldi	r26, 0x00	; 0
   1a020:	81 83       	std	Z+1, r24	; 0x01
   1a022:	92 83       	std	Z+2, r25	; 0x02
   1a024:	a3 83       	std	Z+3, r26	; 0x03
   1a026:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    printf("%8ld Purged\n", (long)LIF->purged);
   1a02a:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a02c:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a02e:	86 8d       	ldd	r24, Z+30	; 0x1e
   1a030:	97 8d       	ldd	r25, Z+31	; 0x1f
   1a032:	09 2e       	mov	r0, r25
   1a034:	00 0c       	add	r0, r0
   1a036:	aa 0b       	sbc	r26, r26
   1a038:	bb 0b       	sbc	r27, r27
   1a03a:	ed b7       	in	r30, 0x3d	; 61
   1a03c:	fe b7       	in	r31, 0x3e	; 62
   1a03e:	84 83       	std	Z+4, r24	; 0x04
   1a040:	95 83       	std	Z+5, r25	; 0x05
   1a042:	a6 83       	std	Z+6, r26	; 0x06
   1a044:	b7 83       	std	Z+7, r27	; 0x07
   1a046:	8f ed       	ldi	r24, 0xDF	; 223
   1a048:	96 e3       	ldi	r25, 0x36	; 54
   1a04a:	a0 e0       	ldi	r26, 0x00	; 0
   1a04c:	81 83       	std	Z+1, r24	; 0x01
   1a04e:	92 83       	std	Z+2, r25	; 0x02
   1a050:	a3 83       	std	Z+3, r26	; 0x03
   1a052:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    printf("%8ld Dir  start\n",   (long)LIF->VOL.DirStartSector);
   1a056:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a058:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a05a:	85 a5       	ldd	r24, Z+45	; 0x2d
   1a05c:	96 a5       	ldd	r25, Z+46	; 0x2e
   1a05e:	a7 a5       	ldd	r26, Z+47	; 0x2f
   1a060:	b0 a9       	ldd	r27, Z+48	; 0x30
   1a062:	ed b7       	in	r30, 0x3d	; 61
   1a064:	fe b7       	in	r31, 0x3e	; 62
   1a066:	84 83       	std	Z+4, r24	; 0x04
   1a068:	95 83       	std	Z+5, r25	; 0x05
   1a06a:	a6 83       	std	Z+6, r26	; 0x06
   1a06c:	b7 83       	std	Z+7, r27	; 0x07
   1a06e:	8e ec       	ldi	r24, 0xCE	; 206
   1a070:	96 e3       	ldi	r25, 0x36	; 54
   1a072:	a0 e0       	ldi	r26, 0x00	; 0
   1a074:	81 83       	std	Z+1, r24	; 0x01
   1a076:	92 83       	std	Z+2, r25	; 0x02
   1a078:	a3 83       	std	Z+3, r26	; 0x03
   1a07a:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    printf("%8ld Dir  sectors\n", (long)LIF->VOL.DirSectors);
   1a07e:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a080:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a082:	85 a9       	ldd	r24, Z+53	; 0x35
   1a084:	96 a9       	ldd	r25, Z+54	; 0x36
   1a086:	a7 a9       	ldd	r26, Z+55	; 0x37
   1a088:	b0 ad       	ldd	r27, Z+56	; 0x38
   1a08a:	ed b7       	in	r30, 0x3d	; 61
   1a08c:	fe b7       	in	r31, 0x3e	; 62
   1a08e:	84 83       	std	Z+4, r24	; 0x04
   1a090:	95 83       	std	Z+5, r25	; 0x05
   1a092:	a6 83       	std	Z+6, r26	; 0x06
   1a094:	b7 83       	std	Z+7, r27	; 0x07
   1a096:	8b eb       	ldi	r24, 0xBB	; 187
   1a098:	96 e3       	ldi	r25, 0x36	; 54
   1a09a:	a0 e0       	ldi	r26, 0x00	; 0
   1a09c:	81 83       	std	Z+1, r24	; 0x01
   1a09e:	92 83       	std	Z+2, r25	; 0x02
   1a0a0:	a3 83       	std	Z+3, r26	; 0x03
   1a0a2:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
   1a0a6:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a0a8:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a0aa:	84 89       	ldd	r24, Z+20	; 0x14
   1a0ac:	95 89       	ldd	r25, Z+21	; 0x15
   1a0ae:	a6 89       	ldd	r26, Z+22	; 0x16
   1a0b0:	b7 89       	ldd	r27, Z+23	; 0x17
   1a0b2:	ed b7       	in	r30, 0x3d	; 61
   1a0b4:	fe b7       	in	r31, 0x3e	; 62
   1a0b6:	84 83       	std	Z+4, r24	; 0x04
   1a0b8:	95 83       	std	Z+5, r25	; 0x05
   1a0ba:	a6 83       	std	Z+6, r26	; 0x06
   1a0bc:	b7 83       	std	Z+7, r27	; 0x07
   1a0be:	88 ea       	ldi	r24, 0xA8	; 168
   1a0c0:	96 e3       	ldi	r25, 0x36	; 54
   1a0c2:	a0 e0       	ldi	r26, 0x00	; 0
   1a0c4:	81 83       	std	Z+1, r24	; 0x01
   1a0c6:	92 83       	std	Z+2, r25	; 0x02
   1a0c8:	a3 83       	std	Z+3, r26	; 0x03
   1a0ca:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    printf("%8ld Free sectors\n", (long)LIF->freesectors);
   1a0ce:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a0d0:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a0d2:	80 8d       	ldd	r24, Z+24	; 0x18
   1a0d4:	91 8d       	ldd	r25, Z+25	; 0x19
   1a0d6:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a0d8:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a0da:	ed b7       	in	r30, 0x3d	; 61
   1a0dc:	fe b7       	in	r31, 0x3e	; 62
   1a0de:	84 83       	std	Z+4, r24	; 0x04
   1a0e0:	95 83       	std	Z+5, r25	; 0x05
   1a0e2:	a6 83       	std	Z+6, r26	; 0x06
   1a0e4:	b7 83       	std	Z+7, r27	; 0x07
   1a0e6:	85 e9       	ldi	r24, 0x95	; 149
   1a0e8:	96 e3       	ldi	r25, 0x36	; 54
   1a0ea:	a0 e0       	ldi	r26, 0x00	; 0
   1a0ec:	81 83       	std	Z+1, r24	; 0x01
   1a0ee:	92 83       	std	Z+2, r25	; 0x02
   1a0f0:	a3 83       	std	Z+3, r26	; 0x03
   1a0f2:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a0f6:	8e a5       	ldd	r24, Y+46	; 0x2e
   1a0f8:	9f a5       	ldd	r25, Y+47	; 0x2f
   1a0fa:	0e 94 04 c7 	call	0x18e08	; 0x18e08 <lif_close_volume>
    printf("%8ld Dir  sectors\n", (long)LIF->VOL.DirSectors);
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
    printf("%8ld Free sectors\n", (long)LIF->freesectors);

    lif_closedir(LIF);
}
   1a0fe:	af 96       	adiw	r28, 0x2f	; 47
   1a100:	0f b6       	in	r0, 0x3f	; 63
   1a102:	f8 94       	cli
   1a104:	de bf       	out	0x3e, r29	; 62
   1a106:	0f be       	out	0x3f, r0	; 63
   1a108:	cd bf       	out	0x3d, r28	; 61
   1a10a:	df 91       	pop	r29
   1a10c:	cf 91       	pop	r28
   1a10e:	1f 91       	pop	r17
   1a110:	0f 91       	pop	r16
   1a112:	ef 90       	pop	r14
   1a114:	df 90       	pop	r13
   1a116:	cf 90       	pop	r12
   1a118:	bf 90       	pop	r11
   1a11a:	af 90       	pop	r10
   1a11c:	9f 90       	pop	r9
   1a11e:	8f 90       	pop	r8
   1a120:	6f 90       	pop	r6
   1a122:	5f 90       	pop	r5
   1a124:	4f 90       	pop	r4
   1a126:	3f 90       	pop	r3
   1a128:	2f 90       	pop	r2
   1a12a:	08 95       	ret

0001a12c <lif_find_file>:
/// @param[in] *LIF: directory pointer
/// @param[in] liflabel: File name in LIF image
/// @return Directory index of record
MEMSPACE
int lif_find_file(lif_t *LIF, char *liflabel)
{
   1a12c:	a5 e0       	ldi	r26, 0x05	; 5
   1a12e:	b0 e0       	ldi	r27, 0x00	; 0
   1a130:	ec e9       	ldi	r30, 0x9C	; 156
   1a132:	f0 ed       	ldi	r31, 0xD0	; 208
   1a134:	0c 94 11 e3 	jmp	0x1c622	; 0x1c622 <__prologue_saves__+0x10>
   1a138:	7c 01       	movw	r14, r24
   1a13a:	eb 01       	movw	r28, r22
    int index;

    if( !lif_checkname(liflabel) )
   1a13c:	cb 01       	movw	r24, r22
   1a13e:	0e 94 53 bf 	call	0x17ea6	; 0x17ea6 <lif_checkname>
   1a142:	89 2b       	or	r24, r25
   1a144:	69 f4       	brne	.+26     	; 0x1a160 <lif_find_file+0x34>
    {
        if(debuglevel & LIF_DEBUG)
   1a146:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a14a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a14e:	92 ff       	sbrs	r25, 2
   1a150:	48 c0       	rjmp	.+144    	; 0x1a1e2 <lif_find_file+0xb6>
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
   1a152:	ed b7       	in	r30, 0x3d	; 61
   1a154:	fe b7       	in	r31, 0x3e	; 62
   1a156:	d5 83       	std	Z+5, r29	; 0x05
   1a158:	c4 83       	std	Z+4, r28	; 0x04
   1a15a:	8e e6       	ldi	r24, 0x6E	; 110
   1a15c:	96 e3       	ldi	r25, 0x36	; 54
   1a15e:	15 c0       	rjmp	.+42     	; 0x1a18a <lif_find_file+0x5e>
        return(-1);
    }
    if(strlen(liflabel) > 10)
   1a160:	fe 01       	movw	r30, r28
   1a162:	01 90       	ld	r0, Z+
   1a164:	00 20       	and	r0, r0
   1a166:	e9 f7       	brne	.-6      	; 0x1a162 <lif_find_file+0x36>
   1a168:	31 97       	sbiw	r30, 0x01	; 1
   1a16a:	ec 1b       	sub	r30, r28
   1a16c:	fd 0b       	sbc	r31, r29
   1a16e:	3b 97       	sbiw	r30, 0x0b	; 11
   1a170:	98 f0       	brcs	.+38     	; 0x1a198 <lif_find_file+0x6c>
    {
        if(debuglevel & LIF_DEBUG)
   1a172:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a176:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a17a:	92 ff       	sbrs	r25, 2
   1a17c:	32 c0       	rjmp	.+100    	; 0x1a1e2 <lif_find_file+0xb6>
            printf("lif_find_file:[%s] liflabel too big\n", liflabel);
   1a17e:	ed b7       	in	r30, 0x3d	; 61
   1a180:	fe b7       	in	r31, 0x3e	; 62
   1a182:	d5 83       	std	Z+5, r29	; 0x05
   1a184:	c4 83       	std	Z+4, r28	; 0x04
   1a186:	89 e4       	ldi	r24, 0x49	; 73
   1a188:	96 e3       	ldi	r25, 0x36	; 54
   1a18a:	a0 e0       	ldi	r26, 0x00	; 0
   1a18c:	81 83       	std	Z+1, r24	; 0x01
   1a18e:	92 83       	std	Z+2, r25	; 0x02
   1a190:	a3 83       	std	Z+3, r26	; 0x03
   1a192:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   1a196:	25 c0       	rjmp	.+74     	; 0x1a1e2 <lif_find_file+0xb6>
        return(-1);
    }

    if(LIF == NULL)
   1a198:	e1 14       	cp	r14, r1
   1a19a:	f1 04       	cpc	r15, r1
   1a19c:	11 f1       	breq	.+68     	; 0x1a1e2 <lif_find_file+0xb6>
   1a19e:	00 e0       	ldi	r16, 0x00	; 0
   1a1a0:	10 e0       	ldi	r17, 0x00	; 0
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1a1a2:	67 01       	movw	r12, r14
   1a1a4:	fa e5       	ldi	r31, 0x5A	; 90
   1a1a6:	cf 0e       	add	r12, r31
   1a1a8:	d1 1c       	adc	r13, r1
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a1aa:	57 01       	movw	r10, r14
   1a1ac:	2f e4       	ldi	r18, 0x4F	; 79
   1a1ae:	a2 0e       	add	r10, r18
   1a1b0:	b1 1c       	adc	r11, r1
        return(-1);

    index = 0;
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
   1a1b2:	b8 01       	movw	r22, r16
   1a1b4:	c7 01       	movw	r24, r14
   1a1b6:	0e 94 92 c7 	call	0x18f24	; 0x18f24 <lif_readdirindex>
   1a1ba:	89 2b       	or	r24, r25
   1a1bc:	91 f0       	breq	.+36     	; 0x1a1e2 <lif_find_file+0xb6>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1a1be:	f6 01       	movw	r30, r12
   1a1c0:	80 81       	ld	r24, Z
   1a1c2:	91 81       	ldd	r25, Z+1	; 0x01
   1a1c4:	8f 3f       	cpi	r24, 0xFF	; 255
   1a1c6:	ff ef       	ldi	r31, 0xFF	; 255
   1a1c8:	9f 07       	cpc	r25, r31
   1a1ca:	59 f0       	breq	.+22     	; 0x1a1e2 <lif_find_file+0xb6>
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a1cc:	89 2b       	or	r24, r25
   1a1ce:	31 f0       	breq	.+12     	; 0x1a1dc <lif_find_file+0xb0>
   1a1d0:	be 01       	movw	r22, r28
   1a1d2:	c5 01       	movw	r24, r10
   1a1d4:	0e 94 fa 2f 	call	0x5ff4	; 0x5ff4 <strcasecmp>
   1a1d8:	89 2b       	or	r24, r25
   1a1da:	31 f0       	breq	.+12     	; 0x1a1e8 <lif_find_file+0xbc>
            break;
        ++index;
   1a1dc:	0f 5f       	subi	r16, 0xFF	; 255
   1a1de:	1f 4f       	sbci	r17, 0xFF	; 255
   1a1e0:	e8 cf       	rjmp	.-48     	; 0x1a1b2 <lif_find_file+0x86>

    if( !lif_checkname(liflabel) )
    {
        if(debuglevel & LIF_DEBUG)
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
        return(-1);
   1a1e2:	8f ef       	ldi	r24, 0xFF	; 255
   1a1e4:	9f ef       	ldi	r25, 0xFF	; 255
   1a1e6:	01 c0       	rjmp	.+2      	; 0x1a1ea <lif_find_file+0xbe>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a1e8:	c8 01       	movw	r24, r16
            break;
        ++index;
    }
    return(index);
}
   1a1ea:	cd b7       	in	r28, 0x3d	; 61
   1a1ec:	de b7       	in	r29, 0x3e	; 62
   1a1ee:	25 96       	adiw	r28, 0x05	; 5
   1a1f0:	ea e0       	ldi	r30, 0x0A	; 10
   1a1f2:	0c 94 2d e3 	jmp	0x1c65a	; 0x1c65a <__epilogue_restores__+0x10>

0001a1f6 <lif_e010_pad_sector>:
/// @param[in] offset: sector offset
/// @param[in] wbuf: E010 PAD data
/// @return size of E010 PAD data
MEMSPACE
int lif_e010_pad_sector(long offset, uint8_t *wbuf)
{
   1a1f6:	a5 e0       	ldi	r26, 0x05	; 5
   1a1f8:	b0 e0       	ldi	r27, 0x00	; 0
   1a1fa:	e1 e0       	ldi	r30, 0x01	; 1
   1a1fc:	f1 ed       	ldi	r31, 0xD1	; 209
   1a1fe:	0c 94 13 e3 	jmp	0x1c626	; 0x1c626 <__prologue_saves__+0x14>
   1a202:	6b 01       	movw	r12, r22
   1a204:	7c 01       	movw	r14, r24
   1a206:	8a 01       	movw	r16, r20
    int ind;
    int pos,rem;

// Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
   1a208:	20 e0       	ldi	r18, 0x00	; 0
   1a20a:	31 e0       	ldi	r19, 0x01	; 1
   1a20c:	40 e0       	ldi	r20, 0x00	; 0
   1a20e:	50 e0       	ldi	r21, 0x00	; 0
   1a210:	0e 94 be e2 	call	0x1c57c	; 0x1c57c <__divmodsi4>
    if(!pos)
   1a214:	61 15       	cp	r22, r1
   1a216:	71 05       	cpc	r23, r1
   1a218:	e1 f1       	breq	.+120    	; 0x1a292 <lif_e010_pad_sector+0x9c>
        return(0);

// Number of bytes free in this sector
    rem = (long)LIF_SECTOR_SIZE - (long)pos;
   1a21a:	c0 e0       	ldi	r28, 0x00	; 0
   1a21c:	d1 e0       	ldi	r29, 0x01	; 1
   1a21e:	c6 1b       	sub	r28, r22
   1a220:	d7 0b       	sbc	r29, r23

// Bytes written to wbuf
    ind = 0;
// PAD
    wbuf[ind++] = 0xEF;
   1a222:	f8 01       	movw	r30, r16
   1a224:	8f ee       	ldi	r24, 0xEF	; 239
   1a226:	81 93       	st	Z+, r24
    while(ind<rem)
        wbuf[ind++] = 0xff;
   1a228:	2f ef       	ldi	r18, 0xFF	; 255

// Bytes written to wbuf
    ind = 0;
// PAD
    wbuf[ind++] = 0xEF;
    while(ind<rem)
   1a22a:	cf 01       	movw	r24, r30
   1a22c:	80 1b       	sub	r24, r16
   1a22e:	91 0b       	sbc	r25, r17
   1a230:	8c 17       	cp	r24, r28
   1a232:	9d 07       	cpc	r25, r29
   1a234:	14 f4       	brge	.+4      	; 0x1a23a <lif_e010_pad_sector+0x44>
        wbuf[ind++] = 0xff;
   1a236:	21 93       	st	Z+, r18
   1a238:	f8 cf       	rjmp	.-16     	; 0x1a22a <lif_e010_pad_sector+0x34>
   1a23a:	1c 16       	cp	r1, r28
   1a23c:	1d 06       	cpc	r1, r29
   1a23e:	14 f0       	brlt	.+4      	; 0x1a244 <lif_e010_pad_sector+0x4e>
   1a240:	c1 e0       	ldi	r28, 0x01	; 1
   1a242:	d0 e0       	ldi	r29, 0x00	; 0

    pos = (offset + (long) ind)  % (long) LIF_SECTOR_SIZE;
   1a244:	ce 01       	movw	r24, r28
   1a246:	0d 2e       	mov	r0, r29
   1a248:	00 0c       	add	r0, r0
   1a24a:	aa 0b       	sbc	r26, r26
   1a24c:	bb 0b       	sbc	r27, r27
   1a24e:	bc 01       	movw	r22, r24
   1a250:	cd 01       	movw	r24, r26
   1a252:	6c 0d       	add	r22, r12
   1a254:	7d 1d       	adc	r23, r13
   1a256:	8e 1d       	adc	r24, r14
   1a258:	9f 1d       	adc	r25, r15
   1a25a:	20 e0       	ldi	r18, 0x00	; 0
   1a25c:	31 e0       	ldi	r19, 0x01	; 1
   1a25e:	40 e0       	ldi	r20, 0x00	; 0
   1a260:	50 e0       	ldi	r21, 0x00	; 0
   1a262:	0e 94 be e2 	call	0x1c57c	; 0x1c57c <__divmodsi4>
// NEW SECTOR
// Debugging make sure we are at sector boundry
    if(pos)
   1a266:	61 15       	cp	r22, r1
   1a268:	71 05       	cpc	r23, r1
   1a26a:	b1 f0       	breq	.+44     	; 0x1a298 <lif_e010_pad_sector+0xa2>
    {
        if(debuglevel & LIF_DEBUG)
   1a26c:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1a270:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a274:	32 ff       	sbrs	r19, 2
   1a276:	12 c0       	rjmp	.+36     	; 0x1a29c <lif_e010_pad_sector+0xa6>
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
   1a278:	ed b7       	in	r30, 0x3d	; 61
   1a27a:	fe b7       	in	r31, 0x3e	; 62
   1a27c:	75 83       	std	Z+5, r23	; 0x05
   1a27e:	64 83       	std	Z+4, r22	; 0x04
   1a280:	80 e1       	ldi	r24, 0x10	; 16
   1a282:	96 e3       	ldi	r25, 0x36	; 54
   1a284:	a0 e0       	ldi	r26, 0x00	; 0
   1a286:	81 83       	std	Z+1, r24	; 0x01
   1a288:	92 83       	std	Z+2, r25	; 0x02
   1a28a:	a3 83       	std	Z+3, r26	; 0x03
   1a28c:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   1a290:	05 c0       	rjmp	.+10     	; 0x1a29c <lif_e010_pad_sector+0xa6>
    int pos,rem;

// Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
    if(!pos)
        return(0);
   1a292:	80 e0       	ldi	r24, 0x00	; 0
   1a294:	90 e0       	ldi	r25, 0x00	; 0
   1a296:	04 c0       	rjmp	.+8      	; 0x1a2a0 <lif_e010_pad_sector+0xaa>
   1a298:	ce 01       	movw	r24, r28
   1a29a:	02 c0       	rjmp	.+4      	; 0x1a2a0 <lif_e010_pad_sector+0xaa>
// Debugging make sure we are at sector boundry
    if(pos)
    {
        if(debuglevel & LIF_DEBUG)
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
        return(-1);
   1a29c:	8f ef       	ldi	r24, 0xFF	; 255
   1a29e:	9f ef       	ldi	r25, 0xFF	; 255
    }
    return(ind);
}
   1a2a0:	cd b7       	in	r28, 0x3d	; 61
   1a2a2:	de b7       	in	r29, 0x3e	; 62
   1a2a4:	25 96       	adiw	r28, 0x05	; 5
   1a2a6:	e8 e0       	ldi	r30, 0x08	; 8
   1a2a8:	0c 94 2f e3 	jmp	0x1c65e	; 0x1c65e <__epilogue_restores__+0x14>

0001a2ac <lif_ascii_string_to_e010>:
/// @param[in] offset: E010 data sector offset, only used in formatting wbuf with headers
/// @param[in] wbuf: E010 data result
/// @return size of E010 data
MEMSPACE
int lif_ascii_string_to_e010(char *str, long offset, uint8_t *wbuf)
{
   1a2ac:	a5 e0       	ldi	r26, 0x05	; 5
   1a2ae:	b0 e0       	ldi	r27, 0x00	; 0
   1a2b0:	ec e5       	ldi	r30, 0x5C	; 92
   1a2b2:	f1 ed       	ldi	r31, 0xD1	; 209
   1a2b4:	0c 94 09 e3 	jmp	0x1c612	; 0x1c612 <__prologue_saves__>
   1a2b8:	ec 01       	movw	r28, r24
   1a2ba:	4a 01       	movw	r8, r20
   1a2bc:	5b 01       	movw	r10, r22
   1a2be:	79 01       	movw	r14, r18
    int ind;
    int len;
    int pos,rem;

// String size
    len = strlen(str);
   1a2c0:	fc 01       	movw	r30, r24
   1a2c2:	01 90       	ld	r0, Z+
   1a2c4:	00 20       	and	r0, r0
   1a2c6:	e9 f7       	brne	.-6      	; 0x1a2c2 <lif_ascii_string_to_e010+0x16>
   1a2c8:	31 97       	sbiw	r30, 0x01	; 1
   1a2ca:	6f 01       	movw	r12, r30
   1a2cc:	c8 1a       	sub	r12, r24
   1a2ce:	d9 0a       	sbc	r13, r25
    ind = 0;

// Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1a2d0:	41 2c       	mov	r4, r1
   1a2d2:	51 2c       	mov	r5, r1
   1a2d4:	32 01       	movw	r6, r4
   1a2d6:	53 94       	inc	r5
   1a2d8:	cb 01       	movw	r24, r22
   1a2da:	ba 01       	movw	r22, r20
   1a2dc:	a3 01       	movw	r20, r6
   1a2de:	92 01       	movw	r18, r4
   1a2e0:	0e 94 be e2 	call	0x1c57c	; 0x1c57c <__divmodsi4>
   1a2e4:	21 2c       	mov	r2, r1
   1a2e6:	33 24       	eor	r3, r3
   1a2e8:	33 94       	inc	r3
   1a2ea:	c1 01       	movw	r24, r2
   1a2ec:	86 1b       	sub	r24, r22
   1a2ee:	97 0b       	sbc	r25, r23

/// We ALWAYS pad a sector if:
///   There is no room for a 0xdf single header
///   - OR -
///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
   1a2f0:	86 30       	cpi	r24, 0x06	; 6
   1a2f2:	91 05       	cpc	r25, r1
   1a2f4:	20 f0       	brcs	.+8      	; 0x1a2fe <lif_ascii_string_to_e010+0x52>
    ind = 0;

// Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1a2f6:	1c 01       	movw	r2, r24

// String size
    len = strlen(str);

// Output buffer index
    ind = 0;
   1a2f8:	00 e0       	ldi	r16, 0x00	; 0
   1a2fa:	10 e0       	ldi	r17, 0x00	; 0
   1a2fc:	17 c0       	rjmp	.+46     	; 0x1a32c <lif_ascii_string_to_e010+0x80>
///   There is no room for a 0xdf single header
///   - OR -
///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
    {
        ind = lif_e010_pad_sector(offset, wbuf);
   1a2fe:	a7 01       	movw	r20, r14
   1a300:	c5 01       	movw	r24, r10
   1a302:	b4 01       	movw	r22, r8
   1a304:	78 df       	rcall	.-272    	; 0x1a1f6 <lif_e010_pad_sector>
   1a306:	8c 01       	movw	r16, r24
        if(ind < 0)
   1a308:	97 fd       	sbrc	r25, 7
   1a30a:	83 c0       	rjmp	.+262    	; 0x1a412 <lif_ascii_string_to_e010+0x166>
            return(ind);

// Compute the current offset in this sector
        pos = ((offset + ind) % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
        rem = (long) LIF_SECTOR_SIZE - pos;
   1a30c:	09 2e       	mov	r0, r25
   1a30e:	00 0c       	add	r0, r0
   1a310:	aa 0b       	sbc	r26, r26
   1a312:	bb 0b       	sbc	r27, r27
   1a314:	bc 01       	movw	r22, r24
   1a316:	cd 01       	movw	r24, r26
   1a318:	68 0d       	add	r22, r8
   1a31a:	79 1d       	adc	r23, r9
   1a31c:	8a 1d       	adc	r24, r10
   1a31e:	9b 1d       	adc	r25, r11
   1a320:	a3 01       	movw	r20, r6
   1a322:	92 01       	movw	r18, r4
   1a324:	0e 94 be e2 	call	0x1c57c	; 0x1c57c <__divmodsi4>
   1a328:	26 1a       	sub	r2, r22
   1a32a:	37 0a       	sbc	r3, r23
   1a32c:	f7 01       	movw	r30, r14
   1a32e:	e0 0f       	add	r30, r16
   1a330:	f1 1f       	adc	r31, r17
   1a332:	0d 5f       	subi	r16, 0xFD	; 253
   1a334:	1f 4f       	sbci	r17, 0xFF	; 255
    }

// Note: IMPORTANT we have >= 6 bytes!!!

// Do not have to split, there is enough room
    if(rem >= (3 + len))
   1a336:	c6 01       	movw	r24, r12
   1a338:	02 96       	adiw	r24, 0x02	; 2
   1a33a:	82 15       	cp	r24, r2
   1a33c:	93 05       	cpc	r25, r3
   1a33e:	84 f4       	brge	.+32     	; 0x1a360 <lif_ascii_string_to_e010+0xb4>
    {

// Write string in new sector
// The full string + header will fit
        wbuf[ind++] = 0xDF;
   1a340:	8f ed       	ldi	r24, 0xDF	; 223
   1a342:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1a344:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >> 8) & 0xff;
   1a346:	d2 82       	std	Z+2, r13	; 0x02
   1a348:	f7 01       	movw	r30, r14
   1a34a:	e0 0f       	add	r30, r16
   1a34c:	f1 1f       	adc	r31, r17
   1a34e:	cf 01       	movw	r24, r30
   1a350:	8e 19       	sub	r24, r14
   1a352:	9f 09       	sbc	r25, r15
// Write string
        while(*str)
   1a354:	29 91       	ld	r18, Y+
   1a356:	22 23       	and	r18, r18
   1a358:	09 f4       	brne	.+2      	; 0x1a35c <lif_ascii_string_to_e010+0xb0>
   1a35a:	5b c0       	rjmp	.+182    	; 0x1a412 <lif_ascii_string_to_e010+0x166>
            wbuf[ind++] = *str++;
   1a35c:	21 93       	st	Z+, r18
   1a35e:	f7 cf       	rjmp	.-18     	; 0x1a34e <lif_ascii_string_to_e010+0xa2>

// CURRENT SECTOR
// String spans a sector , so split the string

// 1st Split string header
        wbuf[ind++] = 0xCF;
   1a360:	8f ec       	ldi	r24, 0xCF	; 207
   1a362:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1a364:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >>8) & 0xff;
   1a366:	d2 82       	std	Z+2, r13	; 0x02
   1a368:	d7 01       	movw	r26, r14
   1a36a:	a0 0f       	add	r26, r16
   1a36c:	b1 1f       	adc	r27, r17
// Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1a36e:	fe 01       	movw	r30, r28
   1a370:	81 91       	ld	r24, Z+
   1a372:	81 11       	cpse	r24, r1
   1a374:	0e c0       	rjmp	.+28     	; 0x1a392 <lif_ascii_string_to_e010+0xe6>
            wbuf[ind++] = *str++;

// NEW SECTOR
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
   1a376:	c8 01       	movw	r24, r16
   1a378:	01 2e       	mov	r0, r17
   1a37a:	00 0c       	add	r0, r0
   1a37c:	aa 0b       	sbc	r26, r26
   1a37e:	bb 0b       	sbc	r27, r27
   1a380:	bc 01       	movw	r22, r24
   1a382:	cd 01       	movw	r24, r26
   1a384:	68 0d       	add	r22, r8
   1a386:	79 1d       	adc	r23, r9
   1a388:	8a 1d       	adc	r24, r10
   1a38a:	9b 1d       	adc	r25, r11
   1a38c:	61 11       	cpse	r22, r1
   1a38e:	09 c0       	rjmp	.+18     	; 0x1a3a2 <lif_ascii_string_to_e010+0xf6>
   1a390:	21 c0       	rjmp	.+66     	; 0x1a3d4 <lif_ascii_string_to_e010+0x128>
// 1st Split string header
        wbuf[ind++] = 0xCF;
        wbuf[ind++] = len & 0xff;
        wbuf[ind++] = (len >>8) & 0xff;
// Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1a392:	02 15       	cp	r16, r2
   1a394:	13 05       	cpc	r17, r3
   1a396:	7c f7       	brge	.-34     	; 0x1a376 <lif_ascii_string_to_e010+0xca>
            wbuf[ind++] = *str++;
   1a398:	0f 5f       	subi	r16, 0xFF	; 255
   1a39a:	1f 4f       	sbci	r17, 0xFF	; 255
   1a39c:	8d 93       	st	X+, r24
   1a39e:	ef 01       	movw	r28, r30
   1a3a0:	e6 cf       	rjmp	.-52     	; 0x1a36e <lif_ascii_string_to_e010+0xc2>

// NEW SECTOR
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & LIF_DEBUG)
   1a3a2:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1a3a6:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a3aa:	32 ff       	sbrs	r19, 2
   1a3ac:	30 c0       	rjmp	.+96     	; 0x1a40e <lif_ascii_string_to_e010+0x162>
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
   1a3ae:	20 e0       	ldi	r18, 0x00	; 0
   1a3b0:	31 e0       	ldi	r19, 0x01	; 1
   1a3b2:	40 e0       	ldi	r20, 0x00	; 0
   1a3b4:	50 e0       	ldi	r21, 0x00	; 0
   1a3b6:	0e 94 be e2 	call	0x1c57c	; 0x1c57c <__divmodsi4>
   1a3ba:	ed b7       	in	r30, 0x3d	; 61
   1a3bc:	fe b7       	in	r31, 0x3e	; 62
   1a3be:	75 83       	std	Z+5, r23	; 0x05
   1a3c0:	64 83       	std	Z+4, r22	; 0x04
   1a3c2:	8c ee       	ldi	r24, 0xEC	; 236
   1a3c4:	95 e3       	ldi	r25, 0x35	; 53
   1a3c6:	a0 e0       	ldi	r26, 0x00	; 0
   1a3c8:	81 83       	std	Z+1, r24	; 0x01
   1a3ca:	92 83       	std	Z+2, r25	; 0x02
   1a3cc:	a3 83       	std	Z+3, r26	; 0x03
   1a3ce:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   1a3d2:	1d c0       	rjmp	.+58     	; 0x1a40e <lif_ascii_string_to_e010+0x162>
            return(-1);
        }

// Update remining string length
        len = strlen(str);
   1a3d4:	fe 01       	movw	r30, r28
   1a3d6:	01 90       	ld	r0, Z+
   1a3d8:	00 20       	and	r0, r0
   1a3da:	e9 f7       	brne	.-6      	; 0x1a3d6 <lif_ascii_string_to_e010+0x12a>
   1a3dc:	31 97       	sbiw	r30, 0x01	; 1
   1a3de:	9f 01       	movw	r18, r30
   1a3e0:	2c 1b       	sub	r18, r28
   1a3e2:	3d 0b       	sbc	r19, r29
// 2nd Split string header
        wbuf[ind++] = 0x6F;
   1a3e4:	d7 01       	movw	r26, r14
   1a3e6:	a0 0f       	add	r26, r16
   1a3e8:	b1 1f       	adc	r27, r17
   1a3ea:	8f e6       	ldi	r24, 0x6F	; 111
   1a3ec:	8c 93       	st	X, r24
        wbuf[ind++] = (len & 0xff);
   1a3ee:	fd 01       	movw	r30, r26
   1a3f0:	21 83       	std	Z+1, r18	; 0x01
        wbuf[ind++] = (len>>8) & 0xff;
   1a3f2:	32 83       	std	Z+2, r19	; 0x02
   1a3f4:	0d 5f       	subi	r16, 0xFD	; 253
   1a3f6:	1f 4f       	sbci	r17, 0xFF	; 255
   1a3f8:	f7 01       	movw	r30, r14
   1a3fa:	e0 0f       	add	r30, r16
   1a3fc:	f1 1f       	adc	r31, r17
   1a3fe:	cf 01       	movw	r24, r30
   1a400:	8e 19       	sub	r24, r14
   1a402:	9f 09       	sbc	r25, r15
// Write string
        while(*str)
   1a404:	29 91       	ld	r18, Y+
   1a406:	22 23       	and	r18, r18
   1a408:	21 f0       	breq	.+8      	; 0x1a412 <lif_ascii_string_to_e010+0x166>
            wbuf[ind++] = *str++;
   1a40a:	21 93       	st	Z+, r18
   1a40c:	f8 cf       	rjmp	.-16     	; 0x1a3fe <lif_ascii_string_to_e010+0x152>
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & LIF_DEBUG)
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
            return(-1);
   1a40e:	8f ef       	ldi	r24, 0xFF	; 255
   1a410:	9f ef       	ldi	r25, 0xFF	; 255
        while(*str)
            wbuf[ind++] = *str++;
    }

    return(ind);
}
   1a412:	cd b7       	in	r28, 0x3d	; 61
   1a414:	de b7       	in	r29, 0x3e	; 62
   1a416:	25 96       	adiw	r28, 0x05	; 5
   1a418:	e2 e1       	ldi	r30, 0x12	; 18
   1a41a:	0c 94 25 e3 	jmp	0x1c64a	; 0x1c64a <__epilogue_restores__>

0001a41e <lif_add_ascii_file_as_e010_wrapper>:
/// @param[in] userfile: User ASCII file source
/// @param[in] *LIF: Where to write file if set (not NULL)
/// @return size of formatted result
MEMSPACE
long lif_add_ascii_file_as_e010_wrapper(lif_t *LIF, uint32_t offset, char *username)
{
   1a41e:	ad e0       	ldi	r26, 0x0D	; 13
   1a420:	b3 e0       	ldi	r27, 0x03	; 3
   1a422:	e5 e1       	ldi	r30, 0x15	; 21
   1a424:	f2 ed       	ldi	r31, 0xD2	; 210
   1a426:	0c 94 09 e3 	jmp	0x1c612	; 0x1c612 <__prologue_saves__>
   1a42a:	5c 01       	movw	r10, r24
   1a42c:	2a 01       	movw	r4, r20
   1a42e:	3b 01       	movw	r6, r22
   1a430:	c9 01       	movw	r24, r18
// strings are limited to less then this
    char str[LIF_SECTOR_SIZE+1];
// output buffer must be larger then a single sectors because of either headers or padding
    uint8_t obuf[LIF_SECTOR_SIZE*2];

    fi = lif_open(username, "rb");
   1a432:	6e ef       	ldi	r22, 0xFE	; 254
   1a434:	78 e0       	ldi	r23, 0x08	; 8
   1a436:	0e 94 b4 bd 	call	0x17b68	; 0x17b68 <lif_open>
   1a43a:	c7 5f       	subi	r28, 0xF7	; 247
   1a43c:	dc 4f       	sbci	r29, 0xFC	; 252
   1a43e:	99 83       	std	Y+1, r25	; 0x01
   1a440:	88 83       	st	Y, r24
   1a442:	c9 50       	subi	r28, 0x09	; 9
   1a444:	d3 40       	sbci	r29, 0x03	; 3
    if(fi == NULL)
   1a446:	89 2b       	or	r24, r25
   1a448:	09 f4       	brne	.+2      	; 0x1a44c <lif_add_ascii_file_as_e010_wrapper+0x2e>
   1a44a:	63 c0       	rjmp	.+198    	; 0x1a512 <lif_add_ascii_file_as_e010_wrapper+0xf4>
   1a44c:	81 2c       	mov	r8, r1
   1a44e:	91 2c       	mov	r9, r1
   1a450:	c1 2c       	mov	r12, r1
   1a452:	d1 2c       	mov	r13, r1
   1a454:	76 01       	movw	r14, r12

        if(count > 256)
        {
            count = 0;
            if(LIF)
                printf("\tWrote: %8ld\r", (long)bytes);
   1a456:	8e ed       	ldi	r24, 0xDE	; 222
   1a458:	95 e3       	ldi	r25, 0x35	; 53
   1a45a:	9c 01       	movw	r18, r24
   1a45c:	40 e0       	ldi	r20, 0x00	; 0
   1a45e:	c5 5f       	subi	r28, 0xF5	; 245
   1a460:	dc 4f       	sbci	r29, 0xFC	; 252
   1a462:	28 83       	st	Y, r18
   1a464:	39 83       	std	Y+1, r19	; 0x01
   1a466:	4a 83       	std	Y+2, r20	; 0x02
   1a468:	cb 50       	subi	r28, 0x0B	; 11
   1a46a:	d3 40       	sbci	r29, 0x03	; 3
   1a46c:	14 c0       	rjmp	.+40     	; 0x1a496 <lif_add_ascii_file_as_e010_wrapper+0x78>
                fclose(fi);
                return(-1);
            }
        }

        offset += size;
   1a46e:	c1 01       	movw	r24, r2
   1a470:	03 2c       	mov	r0, r3
   1a472:	00 0c       	add	r0, r0
   1a474:	aa 0b       	sbc	r26, r26
   1a476:	bb 0b       	sbc	r27, r27
   1a478:	48 0e       	add	r4, r24
   1a47a:	59 1e       	adc	r5, r25
   1a47c:	6a 1e       	adc	r6, r26
   1a47e:	7b 1e       	adc	r7, r27
        bytes += size;
   1a480:	c8 0e       	add	r12, r24
   1a482:	d9 1e       	adc	r13, r25
   1a484:	ea 1e       	adc	r14, r26
   1a486:	fb 1e       	adc	r15, r27
        count += size;
   1a488:	82 0c       	add	r8, r2
   1a48a:	93 1c       	adc	r9, r3

        if(count > 256)
   1a48c:	31 e0       	ldi	r19, 0x01	; 1
   1a48e:	83 16       	cp	r8, r19
   1a490:	93 06       	cpc	r9, r19
   1a492:	0c f0       	brlt	.+2      	; 0x1a496 <lif_add_ascii_file_as_e010_wrapper+0x78>
   1a494:	43 c0       	rjmp	.+134    	; 0x1a51c <lif_add_ascii_file_as_e010_wrapper+0xfe>
    bytes = 0;
    count = 0;

// Read user file and write LIF records
// reserve 3 + LIF header bytes + 1 (EOS)
    while( fgets((char *)str,(int)sizeof(str) - 4, fi) != NULL )
   1a496:	c7 5f       	subi	r28, 0xF7	; 247
   1a498:	dc 4f       	sbci	r29, 0xFC	; 252
   1a49a:	48 81       	ld	r20, Y
   1a49c:	59 81       	ldd	r21, Y+1	; 0x01
   1a49e:	c9 50       	subi	r28, 0x09	; 9
   1a4a0:	d3 40       	sbci	r29, 0x03	; 3
   1a4a2:	6d ef       	ldi	r22, 0xFD	; 253
   1a4a4:	70 e0       	ldi	r23, 0x00	; 0
   1a4a6:	ce 01       	movw	r24, r28
   1a4a8:	88 5f       	subi	r24, 0xF8	; 248
   1a4aa:	9d 4f       	sbci	r25, 0xFD	; 253
   1a4ac:	0e 94 a3 74 	call	0xe946	; 0xe946 <fgets>
   1a4b0:	89 2b       	or	r24, r25
   1a4b2:	09 f4       	brne	.+2      	; 0x1a4b6 <lif_add_ascii_file_as_e010_wrapper+0x98>
   1a4b4:	4b c0       	rjmp	.+150    	; 0x1a54c <lif_add_ascii_file_as_e010_wrapper+0x12e>
    {
        trim_tail((char *)str);
   1a4b6:	ce 01       	movw	r24, r28
   1a4b8:	88 5f       	subi	r24, 0xF8	; 248
   1a4ba:	9d 4f       	sbci	r25, 0xFD	; 253
   1a4bc:	0e 94 71 30 	call	0x60e2	; 0x60e2 <trim_tail>

        strcat((char *)str,"\r");                 // HP85 lines end with "\r"
   1a4c0:	6a e5       	ldi	r22, 0x5A	; 90
   1a4c2:	76 e1       	ldi	r23, 0x16	; 22
   1a4c4:	ce 01       	movw	r24, r28
   1a4c6:	88 5f       	subi	r24, 0xF8	; 248
   1a4c8:	9d 4f       	sbci	r25, 0xFD	; 253
   1a4ca:	0e 94 b4 2f 	call	0x5f68	; 0x5f68 <strcat>

        size = lif_ascii_string_to_e010(str, offset, obuf);
   1a4ce:	9e 01       	movw	r18, r28
   1a4d0:	28 5f       	subi	r18, 0xF8	; 248
   1a4d2:	3f 4f       	sbci	r19, 0xFF	; 255
   1a4d4:	b3 01       	movw	r22, r6
   1a4d6:	a2 01       	movw	r20, r4
   1a4d8:	ce 01       	movw	r24, r28
   1a4da:	88 5f       	subi	r24, 0xF8	; 248
   1a4dc:	9d 4f       	sbci	r25, 0xFD	; 253
   1a4de:	e6 de       	rcall	.-564    	; 0x1a2ac <lif_ascii_string_to_e010>
   1a4e0:	1c 01       	movw	r2, r24
// Write string
// Now Write string
        if(LIF)
   1a4e2:	a1 14       	cp	r10, r1
   1a4e4:	b1 04       	cpc	r11, r1
   1a4e6:	19 f2       	breq	.-122    	; 0x1a46e <lif_add_ascii_file_as_e010_wrapper+0x50>
        {
            len = lif_write(LIF, obuf, offset, size);
   1a4e8:	8c 01       	movw	r16, r24
   1a4ea:	a3 01       	movw	r20, r6
   1a4ec:	92 01       	movw	r18, r4
   1a4ee:	be 01       	movw	r22, r28
   1a4f0:	68 5f       	subi	r22, 0xF8	; 248
   1a4f2:	7f 4f       	sbci	r23, 0xFF	; 255
   1a4f4:	c5 01       	movw	r24, r10
   1a4f6:	0e 94 8b be 	call	0x17d16	; 0x17d16 <lif_write>
            if(len < size)
   1a4fa:	82 15       	cp	r24, r2
   1a4fc:	93 05       	cpc	r25, r3
   1a4fe:	0c f0       	brlt	.+2      	; 0x1a502 <lif_add_ascii_file_as_e010_wrapper+0xe4>
   1a500:	b6 cf       	rjmp	.-148    	; 0x1a46e <lif_add_ascii_file_as_e010_wrapper+0x50>
            {
                fclose(fi);
   1a502:	c7 5f       	subi	r28, 0xF7	; 247
   1a504:	dc 4f       	sbci	r29, 0xFC	; 252
   1a506:	88 81       	ld	r24, Y
   1a508:	99 81       	ldd	r25, Y+1	; 0x01
   1a50a:	c9 50       	subi	r28, 0x09	; 9
   1a50c:	d3 40       	sbci	r29, 0x03	; 3
   1a50e:	0e 94 35 7b 	call	0xf66a	; 0xf66a <fclose>
                return(-1);
   1a512:	6f ef       	ldi	r22, 0xFF	; 255
   1a514:	7f ef       	ldi	r23, 0xFF	; 255
   1a516:	8f ef       	ldi	r24, 0xFF	; 255
   1a518:	9f ef       	ldi	r25, 0xFF	; 255
   1a51a:	84 c0       	rjmp	.+264    	; 0x1a624 <lif_add_ascii_file_as_e010_wrapper+0x206>
        count += size;

        if(count > 256)
        {
            count = 0;
            if(LIF)
   1a51c:	a1 14       	cp	r10, r1
   1a51e:	b1 04       	cpc	r11, r1
   1a520:	91 f0       	breq	.+36     	; 0x1a546 <lif_add_ascii_file_as_e010_wrapper+0x128>
                printf("\tWrote: %8ld\r", (long)bytes);
   1a522:	ed b7       	in	r30, 0x3d	; 61
   1a524:	fe b7       	in	r31, 0x3e	; 62
   1a526:	c4 82       	std	Z+4, r12	; 0x04
   1a528:	d5 82       	std	Z+5, r13	; 0x05
   1a52a:	e6 82       	std	Z+6, r14	; 0x06
   1a52c:	f7 82       	std	Z+7, r15	; 0x07
   1a52e:	c5 5f       	subi	r28, 0xF5	; 245
   1a530:	dc 4f       	sbci	r29, 0xFC	; 252
   1a532:	28 81       	ld	r18, Y
   1a534:	39 81       	ldd	r19, Y+1	; 0x01
   1a536:	4a 81       	ldd	r20, Y+2	; 0x02
   1a538:	cb 50       	subi	r28, 0x0B	; 11
   1a53a:	d3 40       	sbci	r29, 0x03	; 3
   1a53c:	21 83       	std	Z+1, r18	; 0x01
   1a53e:	32 83       	std	Z+2, r19	; 0x02
   1a540:	43 83       	std	Z+3, r20	; 0x03
   1a542:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
        bytes += size;
        count += size;

        if(count > 256)
        {
            count = 0;
   1a546:	81 2c       	mov	r8, r1
   1a548:	91 2c       	mov	r9, r1
   1a54a:	a5 cf       	rjmp	.-182    	; 0x1a496 <lif_add_ascii_file_as_e010_wrapper+0x78>
            if(LIF)
                printf("\tWrote: %8ld\r", (long)bytes);
        }
    }

    fclose(fi);
   1a54c:	c7 5f       	subi	r28, 0xF7	; 247
   1a54e:	dc 4f       	sbci	r29, 0xFC	; 252
   1a550:	88 81       	ld	r24, Y
   1a552:	99 81       	ldd	r25, Y+1	; 0x01
   1a554:	c9 50       	subi	r28, 0x09	; 9
   1a556:	d3 40       	sbci	r29, 0x03	; 3
   1a558:	0e 94 35 7b 	call	0xf66a	; 0xf66a <fclose>

// Write EOF
    str[0] = 0;
   1a55c:	c8 5f       	subi	r28, 0xF8	; 248
   1a55e:	dd 4f       	sbci	r29, 0xFD	; 253
   1a560:	18 82       	st	Y, r1
   1a562:	c8 50       	subi	r28, 0x08	; 8
   1a564:	d2 40       	sbci	r29, 0x02	; 2
// We only want to return the count of bytes in the file NOT the padding at the end
// Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);
   1a566:	9e 01       	movw	r18, r28
   1a568:	28 5f       	subi	r18, 0xF8	; 248
   1a56a:	3f 4f       	sbci	r19, 0xFF	; 255
   1a56c:	b3 01       	movw	r22, r6
   1a56e:	a2 01       	movw	r20, r4
   1a570:	ce 01       	movw	r24, r28
   1a572:	88 5f       	subi	r24, 0xF8	; 248
   1a574:	9d 4f       	sbci	r25, 0xFD	; 253
   1a576:	9a de       	rcall	.-716    	; 0x1a2ac <lif_ascii_string_to_e010>
   1a578:	4c 01       	movw	r8, r24

    if(LIF)
   1a57a:	a1 14       	cp	r10, r1
   1a57c:	b1 04       	cpc	r11, r1
   1a57e:	d1 f4       	brne	.+52     	; 0x1a5b4 <lif_add_ascii_file_as_e010_wrapper+0x196>
            return(-1);

    }

    offset += size;
    bytes += size;
   1a580:	c4 01       	movw	r24, r8
   1a582:	09 2c       	mov	r0, r9
   1a584:	00 0c       	add	r0, r0
   1a586:	aa 0b       	sbc	r26, r26
   1a588:	bb 0b       	sbc	r27, r27
   1a58a:	c8 0e       	add	r12, r24
   1a58c:	d9 1e       	adc	r13, r25
   1a58e:	ea 1e       	adc	r14, r26
   1a590:	fb 1e       	adc	r15, r27

// PAD
    size = lif_e010_pad_sector(offset, obuf);
   1a592:	12 01       	movw	r2, r4
   1a594:	23 01       	movw	r4, r6
   1a596:	28 0e       	add	r2, r24
   1a598:	39 1e       	adc	r3, r25
   1a59a:	4a 1e       	adc	r4, r26
   1a59c:	5b 1e       	adc	r5, r27
   1a59e:	ae 01       	movw	r20, r28
   1a5a0:	48 5f       	subi	r20, 0xF8	; 248
   1a5a2:	5f 4f       	sbci	r21, 0xFF	; 255
   1a5a4:	c2 01       	movw	r24, r4
   1a5a6:	b1 01       	movw	r22, r2
   1a5a8:	26 de       	rcall	.-948    	; 0x1a1f6 <lif_e010_pad_sector>
   1a5aa:	3c 01       	movw	r6, r24
    if(LIF)
   1a5ac:	a1 14       	cp	r10, r1
   1a5ae:	b1 04       	cpc	r11, r1
   1a5b0:	e1 f4       	brne	.+56     	; 0x1a5ea <lif_add_ascii_file_as_e010_wrapper+0x1cc>
   1a5b2:	36 c0       	rjmp	.+108    	; 0x1a620 <lif_add_ascii_file_as_e010_wrapper+0x202>
// Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);

    if(LIF)
    {
        printf("\tWrote: %8ld\r", (long)bytes);
   1a5b4:	ed b7       	in	r30, 0x3d	; 61
   1a5b6:	fe b7       	in	r31, 0x3e	; 62
   1a5b8:	c4 82       	std	Z+4, r12	; 0x04
   1a5ba:	d5 82       	std	Z+5, r13	; 0x05
   1a5bc:	e6 82       	std	Z+6, r14	; 0x06
   1a5be:	f7 82       	std	Z+7, r15	; 0x07
   1a5c0:	80 ed       	ldi	r24, 0xD0	; 208
   1a5c2:	95 e3       	ldi	r25, 0x35	; 53
   1a5c4:	a0 e0       	ldi	r26, 0x00	; 0
   1a5c6:	81 83       	std	Z+1, r24	; 0x01
   1a5c8:	92 83       	std	Z+2, r25	; 0x02
   1a5ca:	a3 83       	std	Z+3, r26	; 0x03
   1a5cc:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
        len = lif_write(LIF, obuf, offset, size);
   1a5d0:	84 01       	movw	r16, r8
   1a5d2:	a3 01       	movw	r20, r6
   1a5d4:	92 01       	movw	r18, r4
   1a5d6:	be 01       	movw	r22, r28
   1a5d8:	68 5f       	subi	r22, 0xF8	; 248
   1a5da:	7f 4f       	sbci	r23, 0xFF	; 255
   1a5dc:	c5 01       	movw	r24, r10
   1a5de:	0e 94 8b be 	call	0x17d16	; 0x17d16 <lif_write>
        if(len < size)
   1a5e2:	88 15       	cp	r24, r8
   1a5e4:	99 05       	cpc	r25, r9
   1a5e6:	64 f6       	brge	.-104    	; 0x1a580 <lif_add_ascii_file_as_e010_wrapper+0x162>
   1a5e8:	94 cf       	rjmp	.-216    	; 0x1a512 <lif_add_ascii_file_as_e010_wrapper+0xf4>

// PAD
    size = lif_e010_pad_sector(offset, obuf);
    if(LIF)
    {
        len = lif_write(LIF, obuf, offset, size);
   1a5ea:	8c 01       	movw	r16, r24
   1a5ec:	a2 01       	movw	r20, r4
   1a5ee:	91 01       	movw	r18, r2
   1a5f0:	be 01       	movw	r22, r28
   1a5f2:	68 5f       	subi	r22, 0xF8	; 248
   1a5f4:	7f 4f       	sbci	r23, 0xFF	; 255
   1a5f6:	c5 01       	movw	r24, r10
   1a5f8:	0e 94 8b be 	call	0x17d16	; 0x17d16 <lif_write>
        if(len < size)
   1a5fc:	86 15       	cp	r24, r6
   1a5fe:	97 05       	cpc	r25, r7
   1a600:	0c f4       	brge	.+2      	; 0x1a604 <lif_add_ascii_file_as_e010_wrapper+0x1e6>
   1a602:	87 cf       	rjmp	.-242    	; 0x1a512 <lif_add_ascii_file_as_e010_wrapper+0xf4>
            return(-1);
    }

    if(LIF)
        printf("\tWrote: %8ld\r",(long)bytes);
   1a604:	ed b7       	in	r30, 0x3d	; 61
   1a606:	fe b7       	in	r31, 0x3e	; 62
   1a608:	c4 82       	std	Z+4, r12	; 0x04
   1a60a:	d5 82       	std	Z+5, r13	; 0x05
   1a60c:	e6 82       	std	Z+6, r14	; 0x06
   1a60e:	f7 82       	std	Z+7, r15	; 0x07
   1a610:	82 ec       	ldi	r24, 0xC2	; 194
   1a612:	95 e3       	ldi	r25, 0x35	; 53
   1a614:	a0 e0       	ldi	r26, 0x00	; 0
   1a616:	81 83       	std	Z+1, r24	; 0x01
   1a618:	92 83       	std	Z+2, r25	; 0x02
   1a61a:	a3 83       	std	Z+3, r26	; 0x03
   1a61c:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>

    return(bytes);
   1a620:	b6 01       	movw	r22, r12
   1a622:	c7 01       	movw	r24, r14
}
   1a624:	c3 5f       	subi	r28, 0xF3	; 243
   1a626:	dc 4f       	sbci	r29, 0xFC	; 252
   1a628:	e2 e1       	ldi	r30, 0x12	; 18
   1a62a:	0c 94 25 e3 	jmp	0x1c64a	; 0x1c64a <__epilogue_restores__>

0001a62e <lif_add_ascii_file_as_e010>:
/// @param[in] lifname: LIF file name
/// @param[in] userfile: userfile name
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_ascii_file_as_e010(char *lifimagename, char *lifname, char *userfile)
{
   1a62e:	ab e3       	ldi	r26, 0x3B	; 59
   1a630:	b0 e0       	ldi	r27, 0x00	; 0
   1a632:	ed e1       	ldi	r30, 0x1D	; 29
   1a634:	f3 ed       	ldi	r31, 0xD3	; 211
   1a636:	0c 94 09 e3 	jmp	0x1c612	; 0x1c612 <__prologue_saves__>
   1a63a:	6c 01       	movw	r12, r24
   1a63c:	1b 01       	movw	r2, r22
   1a63e:	7a 01       	movw	r14, r20
    long offset;
    int index;
    lif_t *LIF;
    stat_t st, *sp;

    if(!*lifimagename)
   1a640:	fc 01       	movw	r30, r24
   1a642:	80 81       	ld	r24, Z
   1a644:	81 11       	cpse	r24, r1
   1a646:	03 c0       	rjmp	.+6      	; 0x1a64e <lif_add_ascii_file_as_e010+0x20>
    {
        printf("lif_add_ascii_file_as_e010: lifimagename is empty\n");
   1a648:	8f e8       	ldi	r24, 0x8F	; 143
   1a64a:	95 e3       	ldi	r25, 0x35	; 53
   1a64c:	1a c0       	rjmp	.+52     	; 0x1a682 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*lifname)
   1a64e:	fb 01       	movw	r30, r22
   1a650:	80 81       	ld	r24, Z
   1a652:	81 11       	cpse	r24, r1
   1a654:	03 c0       	rjmp	.+6      	; 0x1a65c <lif_add_ascii_file_as_e010+0x2e>
    {
        printf("lif_add_ascii_file_as_e010: lifname is empty\n");
   1a656:	81 e6       	ldi	r24, 0x61	; 97
   1a658:	95 e3       	ldi	r25, 0x35	; 53
   1a65a:	13 c0       	rjmp	.+38     	; 0x1a682 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*userfile)
   1a65c:	fa 01       	movw	r30, r20
   1a65e:	80 81       	ld	r24, Z
   1a660:	81 11       	cpse	r24, r1
   1a662:	03 c0       	rjmp	.+6      	; 0x1a66a <lif_add_ascii_file_as_e010+0x3c>
    {
        printf("lif_add_ascii_file_as_e010: userfile is empty\n");
   1a664:	82 e3       	ldi	r24, 0x32	; 50
   1a666:	95 e3       	ldi	r25, 0x35	; 53
   1a668:	0c c0       	rjmp	.+24     	; 0x1a682 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }

//Get size and date info
    sp = lif_stat(userfile, (stat_t *)&st);
   1a66a:	be 01       	movw	r22, r28
   1a66c:	66 5f       	subi	r22, 0xF6	; 246
   1a66e:	7f 4f       	sbci	r23, 0xFF	; 255
   1a670:	ca 01       	movw	r24, r20
   1a672:	0e 94 de bd 	call	0x17bbc	; 0x17bbc <lif_stat>
   1a676:	9b af       	std	Y+59, r25	; 0x3b
   1a678:	8a af       	std	Y+58, r24	; 0x3a
    if(!sp)
   1a67a:	89 2b       	or	r24, r25
   1a67c:	59 f4       	brne	.+22     	; 0x1a694 <lif_add_ascii_file_as_e010+0x66>
    {
        printf("lif_add_ascii_file_as_e010: userfile not found\n");
   1a67e:	82 e0       	ldi	r24, 0x02	; 2
   1a680:	95 e3       	ldi	r25, 0x35	; 53
   1a682:	a0 e0       	ldi	r26, 0x00	; 0
   1a684:	ed b7       	in	r30, 0x3d	; 61
   1a686:	fe b7       	in	r31, 0x3e	; 62
   1a688:	81 83       	std	Z+1, r24	; 0x01
   1a68a:	92 83       	std	Z+2, r25	; 0x02
   1a68c:	a3 83       	std	Z+3, r26	; 0x03
   1a68e:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   1a692:	01 c1       	rjmp	.+514    	; 0x1a896 <lif_add_ascii_file_as_e010+0x268>
        return(-1);
    }

    if(debuglevel & LIF_DEBUG)
   1a694:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a698:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a69c:	92 ff       	sbrs	r25, 2
   1a69e:	10 c0       	rjmp	.+32     	; 0x1a6c0 <lif_add_ascii_file_as_e010+0x92>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n",
   1a6a0:	ed b7       	in	r30, 0x3d	; 61
   1a6a2:	fe b7       	in	r31, 0x3e	; 62
   1a6a4:	f1 86       	std	Z+9, r15	; 0x09
   1a6a6:	e0 86       	std	Z+8, r14	; 0x08
   1a6a8:	37 82       	std	Z+7, r3	; 0x07
   1a6aa:	26 82       	std	Z+6, r2	; 0x06
   1a6ac:	d5 82       	std	Z+5, r13	; 0x05
   1a6ae:	c4 82       	std	Z+4, r12	; 0x04
   1a6b0:	83 ed       	ldi	r24, 0xD3	; 211
   1a6b2:	94 e3       	ldi	r25, 0x34	; 52
   1a6b4:	a0 e0       	ldi	r26, 0x00	; 0
   1a6b6:	81 83       	std	Z+1, r24	; 0x01
   1a6b8:	92 83       	std	Z+2, r25	; 0x02
   1a6ba:	a3 83       	std	Z+3, r26	; 0x03
   1a6bc:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
            lifimagename, lifname, userfile);

// Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
   1a6c0:	97 01       	movw	r18, r14
   1a6c2:	40 e0       	ldi	r20, 0x00	; 0
   1a6c4:	50 e0       	ldi	r21, 0x00	; 0
   1a6c6:	ba 01       	movw	r22, r20
   1a6c8:	80 e0       	ldi	r24, 0x00	; 0
   1a6ca:	90 e0       	ldi	r25, 0x00	; 0
   1a6cc:	a8 de       	rcall	.-688    	; 0x1a41e <lif_add_ascii_file_as_e010_wrapper>
   1a6ce:	4b 01       	movw	r8, r22
   1a6d0:	5c 01       	movw	r10, r24
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a6d2:	47 2e       	mov	r4, r23
   1a6d4:	58 2e       	mov	r5, r24
   1a6d6:	69 2e       	mov	r6, r25
   1a6d8:	77 24       	eor	r7, r7
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a6da:	66 23       	and	r22, r22
   1a6dc:	29 f0       	breq	.+10     	; 0x1a6e8 <lif_add_ascii_file_as_e010+0xba>
        ++sectors;
   1a6de:	ff ef       	ldi	r31, 0xFF	; 255
   1a6e0:	4f 1a       	sub	r4, r31
   1a6e2:	5f 0a       	sbc	r5, r31
   1a6e4:	6f 0a       	sbc	r6, r31
   1a6e6:	7f 0a       	sbc	r7, r31

// Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
   1a6e8:	61 e0       	ldi	r22, 0x01	; 1
   1a6ea:	79 e0       	ldi	r23, 0x09	; 9
   1a6ec:	c6 01       	movw	r24, r12
   1a6ee:	49 da       	rcall	.-2926   	; 0x19b82 <lif_open_volume>
   1a6f0:	8c 01       	movw	r16, r24
    if(LIF == NULL)
   1a6f2:	00 97       	sbiw	r24, 0x00	; 0
   1a6f4:	09 f4       	brne	.+2      	; 0x1a6f8 <lif_add_ascii_file_as_e010+0xca>
   1a6f6:	cf c0       	rjmp	.+414    	; 0x1a896 <lif_add_ascii_file_as_e010+0x268>
        return(-1);

// Now find free record
    index = lif_newdir(LIF, sectors);
   1a6f8:	b3 01       	movw	r22, r6
   1a6fa:	a2 01       	movw	r20, r4
   1a6fc:	e2 d8       	rcall	.-3644   	; 0x198c2 <lif_newdir>
   1a6fe:	3c 01       	movw	r6, r24
    if(index == -1)
   1a700:	8f ef       	ldi	r24, 0xFF	; 255
   1a702:	68 16       	cp	r6, r24
   1a704:	78 06       	cpc	r7, r24
   1a706:	79 f4       	brne	.+30     	; 0x1a726 <lif_add_ascii_file_as_e010+0xf8>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n",
   1a708:	ed b7       	in	r30, 0x3d	; 61
   1a70a:	fe b7       	in	r31, 0x3e	; 62
   1a70c:	f7 82       	std	Z+7, r15	; 0x07
   1a70e:	e6 82       	std	Z+6, r14	; 0x06
   1a710:	d5 82       	std	Z+5, r13	; 0x05
   1a712:	c4 82       	std	Z+4, r12	; 0x04
   1a714:	83 ea       	ldi	r24, 0xA3	; 163
   1a716:	94 e3       	ldi	r25, 0x34	; 52
   1a718:	a0 e0       	ldi	r26, 0x00	; 0
   1a71a:	81 83       	std	Z+1, r24	; 0x01
   1a71c:	92 83       	std	Z+2, r25	; 0x02
   1a71e:	a3 83       	std	Z+3, r26	; 0x03
   1a720:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   1a724:	a0 c0       	rjmp	.+320    	; 0x1a866 <lif_add_ascii_file_as_e010+0x238>
        lif_closedir(LIF);
        return(-1);
    }

// Initialize the free directory entry
    lif_fixname(LIF->DIR.filename, lifname,10);
   1a726:	68 01       	movw	r12, r16
   1a728:	ff e4       	ldi	r31, 0x4F	; 79
   1a72a:	cf 0e       	add	r12, r31
   1a72c:	d1 1c       	adc	r13, r1
   1a72e:	4a e0       	ldi	r20, 0x0A	; 10
   1a730:	50 e0       	ldi	r21, 0x00	; 0
   1a732:	b1 01       	movw	r22, r2
   1a734:	c6 01       	movw	r24, r12
   1a736:	0e 94 8d bf 	call	0x17f1a	; 0x17f1a <lif_fixname>
    LIF->DIR.FileType = 0xe010;                   // 10
   1a73a:	80 e1       	ldi	r24, 0x10	; 16
   1a73c:	90 ee       	ldi	r25, 0xE0	; 224
   1a73e:	f8 01       	movw	r30, r16
   1a740:	e6 5a       	subi	r30, 0xA6	; 166
   1a742:	ff 4f       	sbci	r31, 0xFF	; 255
   1a744:	91 83       	std	Z+1, r25	; 0x01
   1a746:	80 83       	st	Z, r24
    lif_time2lifbcd(sp->st_mtime, LIF->DIR.date);
   1a748:	ea ad       	ldd	r30, Y+58	; 0x3a
   1a74a:	fb ad       	ldd	r31, Y+59	; 0x3b
   1a74c:	60 a5       	ldd	r22, Z+40	; 0x28
   1a74e:	71 a5       	ldd	r23, Z+41	; 0x29
   1a750:	82 a5       	ldd	r24, Z+42	; 0x2a
   1a752:	93 a5       	ldd	r25, Z+43	; 0x2b
   1a754:	a8 01       	movw	r20, r16
   1a756:	4c 59       	subi	r20, 0x9C	; 156
   1a758:	5f 4f       	sbci	r21, 0xFF	; 255
   1a75a:	0e 94 b2 c1 	call	0x18364	; 0x18364 <lif_time2lifbcd>

    LIF->DIR.VolNumber = 0x8001;                  // 26
   1a75e:	81 e0       	ldi	r24, 0x01	; 1
   1a760:	90 e8       	ldi	r25, 0x80	; 128
   1a762:	f8 01       	movw	r30, r16
   1a764:	e6 59       	subi	r30, 0x96	; 150
   1a766:	ff 4f       	sbci	r31, 0xFF	; 255
   1a768:	91 83       	std	Z+1, r25	; 0x01
   1a76a:	80 83       	st	Z, r24
    LIF->DIR.FileBytes = bytes;                   // 28
   1a76c:	32 96       	adiw	r30, 0x02	; 2
   1a76e:	91 82       	std	Z+1, r9	; 0x01
   1a770:	80 82       	st	Z, r8
    LIF->DIR.SectorSize  = 0x100;                 // 30
   1a772:	80 e0       	ldi	r24, 0x00	; 0
   1a774:	91 e0       	ldi	r25, 0x01	; 1
   1a776:	32 96       	adiw	r30, 0x02	; 2
   1a778:	91 83       	std	Z+1, r25	; 0x01
   1a77a:	80 83       	st	Z, r24
    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1a77c:	58 01       	movw	r10, r16
   1a77e:	fc e5       	ldi	r31, 0x5C	; 92
   1a780:	af 0e       	add	r10, r31
   1a782:	b1 1c       	adc	r11, r1
   1a784:	f5 01       	movw	r30, r10
   1a786:	80 81       	ld	r24, Z
   1a788:	91 81       	ldd	r25, Z+1	; 0x01
   1a78a:	a2 81       	ldd	r26, Z+2	; 0x02
   1a78c:	b3 81       	ldd	r27, Z+3	; 0x03
   1a78e:	22 24       	eor	r2, r2
   1a790:	38 2e       	mov	r3, r24
   1a792:	49 2e       	mov	r4, r25
   1a794:	5a 2e       	mov	r5, r26

    if(debuglevel & LIF_DEBUG)
   1a796:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a79a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a79e:	92 ff       	sbrs	r25, 2
   1a7a0:	05 c0       	rjmp	.+10     	; 0x1a7ac <lif_add_ascii_file_as_e010+0x17e>
        lif_dump_vol(LIF,"lif_after lif_newdir");
   1a7a2:	6c e5       	ldi	r22, 0x5C	; 92
   1a7a4:	76 e1       	ldi	r23, 0x16	; 22
   1a7a6:	c8 01       	movw	r24, r16
   1a7a8:	0e 94 9e c2 	call	0x1853c	; 0x1853c <lif_dump_vol>

// Write converted file into free space first
    bytes = lif_add_ascii_file_as_e010_wrapper(LIF,offset,userfile);
   1a7ac:	97 01       	movw	r18, r14
   1a7ae:	b2 01       	movw	r22, r4
   1a7b0:	a1 01       	movw	r20, r2
   1a7b2:	c8 01       	movw	r24, r16
   1a7b4:	34 de       	rcall	.-920    	; 0x1a41e <lif_add_ascii_file_as_e010_wrapper>
   1a7b6:	4b 01       	movw	r8, r22
   1a7b8:	7c 01       	movw	r14, r24

    if(debuglevel & LIF_DEBUG)
   1a7ba:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a7be:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a7c2:	92 ff       	sbrs	r25, 2
   1a7c4:	4a c0       	rjmp	.+148    	; 0x1a85a <lif_add_ascii_file_as_e010+0x22c>
    {
        printf("New Directory Information AFTER write\n");
   1a7c6:	8c e7       	ldi	r24, 0x7C	; 124
   1a7c8:	94 e3       	ldi	r25, 0x34	; 52
   1a7ca:	a0 e0       	ldi	r26, 0x00	; 0
   1a7cc:	ed b7       	in	r30, 0x3d	; 61
   1a7ce:	fe b7       	in	r31, 0x3e	; 62
   1a7d0:	81 83       	std	Z+1, r24	; 0x01
   1a7d2:	92 83       	std	Z+2, r25	; 0x02
   1a7d4:	a3 83       	std	Z+3, r26	; 0x03
   1a7d6:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
        printf("Name:              %s\n", LIF->DIR.filename);
   1a7da:	ed b7       	in	r30, 0x3d	; 61
   1a7dc:	fe b7       	in	r31, 0x3e	; 62
   1a7de:	d5 82       	std	Z+5, r13	; 0x05
   1a7e0:	c4 82       	std	Z+4, r12	; 0x04
   1a7e2:	85 e6       	ldi	r24, 0x65	; 101
   1a7e4:	94 e3       	ldi	r25, 0x34	; 52
   1a7e6:	a0 e0       	ldi	r26, 0x00	; 0
   1a7e8:	81 83       	std	Z+1, r24	; 0x01
   1a7ea:	92 83       	std	Z+2, r25	; 0x02
   1a7ec:	a3 83       	std	Z+3, r26	; 0x03
   1a7ee:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
        printf("Index:            %4d\n", (int)index);
   1a7f2:	ed b7       	in	r30, 0x3d	; 61
   1a7f4:	fe b7       	in	r31, 0x3e	; 62
   1a7f6:	75 82       	std	Z+5, r7	; 0x05
   1a7f8:	64 82       	std	Z+4, r6	; 0x04
   1a7fa:	8e e4       	ldi	r24, 0x4E	; 78
   1a7fc:	94 e3       	ldi	r25, 0x34	; 52
   1a7fe:	a0 e0       	ldi	r26, 0x00	; 0
   1a800:	81 83       	std	Z+1, r24	; 0x01
   1a802:	92 83       	std	Z+2, r25	; 0x02
   1a804:	a3 83       	std	Z+3, r26	; 0x03
   1a806:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
        printf("First Sector:     %4lxH\n", (long) LIF->DIR.FileStartSector);
   1a80a:	f5 01       	movw	r30, r10
   1a80c:	80 81       	ld	r24, Z
   1a80e:	91 81       	ldd	r25, Z+1	; 0x01
   1a810:	a2 81       	ldd	r26, Z+2	; 0x02
   1a812:	b3 81       	ldd	r27, Z+3	; 0x03
   1a814:	ed b7       	in	r30, 0x3d	; 61
   1a816:	fe b7       	in	r31, 0x3e	; 62
   1a818:	84 83       	std	Z+4, r24	; 0x04
   1a81a:	95 83       	std	Z+5, r25	; 0x05
   1a81c:	a6 83       	std	Z+6, r26	; 0x06
   1a81e:	b7 83       	std	Z+7, r27	; 0x07
   1a820:	85 e3       	ldi	r24, 0x35	; 53
   1a822:	94 e3       	ldi	r25, 0x34	; 52
   1a824:	a0 e0       	ldi	r26, 0x00	; 0
   1a826:	81 83       	std	Z+1, r24	; 0x01
   1a828:	92 83       	std	Z+2, r25	; 0x02
   1a82a:	a3 83       	std	Z+3, r26	; 0x03
   1a82c:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
        printf("File Sectors:     %4lxH\n", (long)LIF->DIR.FileSectors);
   1a830:	f8 01       	movw	r30, r16
   1a832:	e0 5a       	subi	r30, 0xA0	; 160
   1a834:	ff 4f       	sbci	r31, 0xFF	; 255
   1a836:	80 81       	ld	r24, Z
   1a838:	91 81       	ldd	r25, Z+1	; 0x01
   1a83a:	a2 81       	ldd	r26, Z+2	; 0x02
   1a83c:	b3 81       	ldd	r27, Z+3	; 0x03
   1a83e:	ed b7       	in	r30, 0x3d	; 61
   1a840:	fe b7       	in	r31, 0x3e	; 62
   1a842:	84 83       	std	Z+4, r24	; 0x04
   1a844:	95 83       	std	Z+5, r25	; 0x05
   1a846:	a6 83       	std	Z+6, r26	; 0x06
   1a848:	b7 83       	std	Z+7, r27	; 0x07
   1a84a:	8c e1       	ldi	r24, 0x1C	; 28
   1a84c:	94 e3       	ldi	r25, 0x34	; 52
   1a84e:	a0 e0       	ldi	r26, 0x00	; 0
   1a850:	81 83       	std	Z+1, r24	; 0x01
   1a852:	92 83       	std	Z+2, r25	; 0x02
   1a854:	a3 83       	std	Z+3, r26	; 0x03
   1a856:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    }

// Write directory record
// Note: lif_newdir alrwady did the new EOF
    if( !lif_writedirindex(LIF,index))
   1a85a:	b3 01       	movw	r22, r6
   1a85c:	c8 01       	movw	r24, r16
   1a85e:	0e 94 f9 c7 	call	0x18ff2	; 0x18ff2 <lif_writedirindex>
   1a862:	89 2b       	or	r24, r25
   1a864:	21 f4       	brne	.+8      	; 0x1a86e <lif_add_ascii_file_as_e010+0x240>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a866:	c8 01       	movw	r24, r16
   1a868:	0e 94 04 c7 	call	0x18e08	; 0x18e08 <lif_close_volume>
   1a86c:	14 c0       	rjmp	.+40     	; 0x1a896 <lif_add_ascii_file_as_e010+0x268>
   1a86e:	c8 01       	movw	r24, r16
   1a870:	0e 94 04 c7 	call	0x18e08	; 0x18e08 <lif_close_volume>
        return(-1);
    }

    lif_closedir(LIF);

    printf("\tWrote: %8ld\n", bytes);
   1a874:	ed b7       	in	r30, 0x3d	; 61
   1a876:	fe b7       	in	r31, 0x3e	; 62
   1a878:	84 82       	std	Z+4, r8	; 0x04
   1a87a:	95 82       	std	Z+5, r9	; 0x05
   1a87c:	e6 82       	std	Z+6, r14	; 0x06
   1a87e:	f7 82       	std	Z+7, r15	; 0x07
   1a880:	8e e0       	ldi	r24, 0x0E	; 14
   1a882:	94 e3       	ldi	r25, 0x34	; 52
   1a884:	a0 e0       	ldi	r26, 0x00	; 0
   1a886:	81 83       	std	Z+1, r24	; 0x01
   1a888:	92 83       	std	Z+2, r25	; 0x02
   1a88a:	a3 83       	std	Z+3, r26	; 0x03
   1a88c:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>

// Return file size
    return(bytes);
   1a890:	b4 01       	movw	r22, r8
   1a892:	c7 01       	movw	r24, r14
   1a894:	04 c0       	rjmp	.+8      	; 0x1a89e <lif_add_ascii_file_as_e010+0x270>
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
    if(LIF == NULL)
        return(-1);
   1a896:	6f ef       	ldi	r22, 0xFF	; 255
   1a898:	7f ef       	ldi	r23, 0xFF	; 255
   1a89a:	8f ef       	ldi	r24, 0xFF	; 255
   1a89c:	9f ef       	ldi	r25, 0xFF	; 255

    printf("\tWrote: %8ld\n", bytes);

// Return file size
    return(bytes);
}
   1a89e:	eb 96       	adiw	r28, 0x3b	; 59
   1a8a0:	e2 e1       	ldi	r30, 0x12	; 18
   1a8a2:	0c 94 25 e3 	jmp	0x1c64a	; 0x1c64a <__epilogue_restores__>

0001a8a6 <lif_extract_e010_as_ascii>:
/// @param[in] lifname:  name of file in LIF image
/// @param[in] username: name to call the extracted image
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_e010_as_ascii(char *lifimagename, char *lifname, char *username)
{
   1a8a6:	a7 e3       	ldi	r26, 0x37	; 55
   1a8a8:	b2 e0       	ldi	r27, 0x02	; 2
   1a8aa:	e9 e5       	ldi	r30, 0x59	; 89
   1a8ac:	f4 ed       	ldi	r31, 0xD4	; 212
   1a8ae:	0c 94 09 e3 	jmp	0x1c612	; 0x1c612 <__prologue_saves__>
   1a8b2:	7c 01       	movw	r14, r24
   1a8b4:	8b 01       	movw	r16, r22
   1a8b6:	ca 5d       	subi	r28, 0xDA	; 218
   1a8b8:	dd 4f       	sbci	r29, 0xFD	; 253
   1a8ba:	59 83       	std	Y+1, r21	; 0x01
   1a8bc:	48 83       	st	Y, r20
   1a8be:	c6 52       	subi	r28, 0x26	; 38
   1a8c0:	d2 40       	sbci	r29, 0x02	; 2
// read buffer
    uint8_t buf[LIF_SECTOR_SIZE+4];
// Write buffer, FYI: will ALWAYS be smaller then the read data buffer
    uint8_t wbuf[LIF_SECTOR_SIZE+4];

    LIF = lif_open_volume(lifimagename,"r");
   1a8c2:	62 e4       	ldi	r22, 0x42	; 66
   1a8c4:	73 e0       	ldi	r23, 0x03	; 3
   1a8c6:	5d d9       	rcall	.-3398   	; 0x19b82 <lif_open_volume>
   1a8c8:	6c 01       	movw	r12, r24
    if(LIF == NULL)
   1a8ca:	00 97       	sbiw	r24, 0x00	; 0
   1a8cc:	69 f4       	brne	.+26     	; 0x1a8e8 <lif_extract_e010_as_ascii+0x42>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1a8ce:	ed b7       	in	r30, 0x3d	; 61
   1a8d0:	fe b7       	in	r31, 0x3e	; 62
   1a8d2:	f5 82       	std	Z+5, r15	; 0x05
   1a8d4:	e4 82       	std	Z+4, r14	; 0x04
   1a8d6:	86 ef       	ldi	r24, 0xF6	; 246
   1a8d8:	93 e3       	ldi	r25, 0x33	; 51
   1a8da:	a0 e0       	ldi	r26, 0x00	; 0
   1a8dc:	81 83       	std	Z+1, r24	; 0x01
   1a8de:	92 83       	std	Z+2, r25	; 0x02
   1a8e0:	a3 83       	std	Z+3, r26	; 0x03
   1a8e2:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   1a8e6:	13 c0       	rjmp	.+38     	; 0x1a90e <lif_extract_e010_as_ascii+0x68>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1a8e8:	b8 01       	movw	r22, r16
   1a8ea:	20 dc       	rcall	.-1984   	; 0x1a12c <lif_find_file>
    if(index == -1)
   1a8ec:	01 96       	adiw	r24, 0x01	; 1
   1a8ee:	91 f4       	brne	.+36     	; 0x1a914 <lif_extract_e010_as_ascii+0x6e>
    {
        printf("LIF File not found:%s\n", lifname);
   1a8f0:	ed b7       	in	r30, 0x3d	; 61
   1a8f2:	fe b7       	in	r31, 0x3e	; 62
   1a8f4:	15 83       	std	Z+5, r17	; 0x05
   1a8f6:	04 83       	std	Z+4, r16	; 0x04
   1a8f8:	8f ed       	ldi	r24, 0xDF	; 223
   1a8fa:	93 e3       	ldi	r25, 0x33	; 51
   1a8fc:	a0 e0       	ldi	r26, 0x00	; 0
   1a8fe:	81 83       	std	Z+1, r24	; 0x01
   1a900:	92 83       	std	Z+2, r25	; 0x02
   1a902:	a3 83       	std	Z+3, r26	; 0x03
   1a904:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a908:	c6 01       	movw	r24, r12
   1a90a:	0e 94 04 c7 	call	0x18e08	; 0x18e08 <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("LIF File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1a90e:	80 e0       	ldi	r24, 0x00	; 0
   1a910:	90 e0       	ldi	r25, 0x00	; 0
   1a912:	73 c2       	rjmp	.+1254   	; 0x1adfa <lif_extract_e010_as_ascii+0x554>
    }

    if((LIF->DIR.FileType & 0xFFFC) != 0xE010)
   1a914:	f6 01       	movw	r30, r12
   1a916:	e6 5a       	subi	r30, 0xA6	; 166
   1a918:	ff 4f       	sbci	r31, 0xFF	; 255
   1a91a:	80 81       	ld	r24, Z
   1a91c:	91 81       	ldd	r25, Z+1	; 0x01
   1a91e:	9c 01       	movw	r18, r24
   1a920:	2c 7f       	andi	r18, 0xFC	; 252
   1a922:	20 31       	cpi	r18, 0x10	; 16
   1a924:	30 4e       	sbci	r19, 0xE0	; 224
   1a926:	a9 f0       	breq	.+42     	; 0x1a952 <lif_extract_e010_as_ascii+0xac>
    {
        printf("File %s has wrong type:[%04XH] expected 0xE010..0xE013\n", username, (int) LIF->DIR.FileType);
   1a928:	ed b7       	in	r30, 0x3d	; 61
   1a92a:	fe b7       	in	r31, 0x3e	; 62
   1a92c:	97 83       	std	Z+7, r25	; 0x07
   1a92e:	86 83       	std	Z+6, r24	; 0x06
   1a930:	ca 5d       	subi	r28, 0xDA	; 218
   1a932:	dd 4f       	sbci	r29, 0xFD	; 253
   1a934:	28 81       	ld	r18, Y
   1a936:	39 81       	ldd	r19, Y+1	; 0x01
   1a938:	c6 52       	subi	r28, 0x26	; 38
   1a93a:	d2 40       	sbci	r29, 0x02	; 2
   1a93c:	35 83       	std	Z+5, r19	; 0x05
   1a93e:	24 83       	std	Z+4, r18	; 0x04
   1a940:	87 ea       	ldi	r24, 0xA7	; 167
   1a942:	93 e3       	ldi	r25, 0x33	; 51
   1a944:	a0 e0       	ldi	r26, 0x00	; 0
   1a946:	81 83       	std	Z+1, r24	; 0x01
   1a948:	92 83       	std	Z+2, r25	; 0x02
   1a94a:	a3 83       	std	Z+3, r26	; 0x03
   1a94c:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   1a950:	db cf       	rjmp	.-74     	; 0x1a908 <lif_extract_e010_as_ascii+0x62>
        lif_closedir(LIF);
        return(0);
    }

    start = LIF->DIR.FileStartSector;
   1a952:	f6 01       	movw	r30, r12
   1a954:	e4 5a       	subi	r30, 0xA4	; 164
   1a956:	ff 4f       	sbci	r31, 0xFF	; 255
   1a958:	80 80       	ld	r8, Z
   1a95a:	91 80       	ldd	r9, Z+1	; 0x01
   1a95c:	a2 80       	ldd	r10, Z+2	; 0x02
   1a95e:	b3 80       	ldd	r11, Z+3	; 0x03
    end = start + LIF->DIR.FileSectors;
   1a960:	34 96       	adiw	r30, 0x04	; 4
   1a962:	80 81       	ld	r24, Z
   1a964:	91 81       	ldd	r25, Z+1	; 0x01
   1a966:	a2 81       	ldd	r26, Z+2	; 0x02
   1a968:	b3 81       	ldd	r27, Z+3	; 0x03
   1a96a:	a5 01       	movw	r20, r10
   1a96c:	94 01       	movw	r18, r8
   1a96e:	28 0f       	add	r18, r24
   1a970:	39 1f       	adc	r19, r25
   1a972:	4a 1f       	adc	r20, r26
   1a974:	5b 1f       	adc	r21, r27
   1a976:	c4 5d       	subi	r28, 0xD4	; 212
   1a978:	dd 4f       	sbci	r29, 0xFD	; 253
   1a97a:	28 83       	st	Y, r18
   1a97c:	39 83       	std	Y+1, r19	; 0x01
   1a97e:	4a 83       	std	Y+2, r20	; 0x02
   1a980:	5b 83       	std	Y+3, r21	; 0x03
   1a982:	cc 52       	subi	r28, 0x2C	; 44
   1a984:	d2 40       	sbci	r29, 0x02	; 2

    t = lif_lifbcd2time(LIF->DIR.date);
   1a986:	c6 01       	movw	r24, r12
   1a988:	8c 59       	subi	r24, 0x9C	; 156
   1a98a:	9f 4f       	sbci	r25, 0xFF	; 255
   1a98c:	0e 94 f4 c1 	call	0x183e8	; 0x183e8 <lif_lifbcd2time>
   1a990:	c8 5d       	subi	r28, 0xD8	; 216
   1a992:	dd 4f       	sbci	r29, 0xFD	; 253
   1a994:	68 83       	st	Y, r22
   1a996:	79 83       	std	Y+1, r23	; 0x01
   1a998:	8a 83       	std	Y+2, r24	; 0x02
   1a99a:	9b 83       	std	Y+3, r25	; 0x03
   1a99c:	c8 52       	subi	r28, 0x28	; 40
   1a99e:	d2 40       	sbci	r29, 0x02	; 2

    offset = start * (long) LIF_SECTOR_SIZE;
   1a9a0:	ba 2d       	mov	r27, r10
   1a9a2:	a9 2d       	mov	r26, r9
   1a9a4:	98 2d       	mov	r25, r8
   1a9a6:	88 27       	eor	r24, r24
   1a9a8:	c2 5e       	subi	r28, 0xE2	; 226
   1a9aa:	dd 4f       	sbci	r29, 0xFD	; 253
   1a9ac:	88 83       	st	Y, r24
   1a9ae:	99 83       	std	Y+1, r25	; 0x01
   1a9b0:	aa 83       	std	Y+2, r26	; 0x02
   1a9b2:	bb 83       	std	Y+3, r27	; 0x03
   1a9b4:	ce 51       	subi	r28, 0x1E	; 30
   1a9b6:	d2 40       	sbci	r29, 0x02	; 2

    fo = lif_open(username,"wb");
   1a9b8:	6c e0       	ldi	r22, 0x0C	; 12
   1a9ba:	79 e0       	ldi	r23, 0x09	; 9
   1a9bc:	ca 5d       	subi	r28, 0xDA	; 218
   1a9be:	dd 4f       	sbci	r29, 0xFD	; 253
   1a9c0:	88 81       	ld	r24, Y
   1a9c2:	99 81       	ldd	r25, Y+1	; 0x01
   1a9c4:	c6 52       	subi	r28, 0x26	; 38
   1a9c6:	d2 40       	sbci	r29, 0x02	; 2
   1a9c8:	0e 94 b4 bd 	call	0x17b68	; 0x17b68 <lif_open>
   1a9cc:	cc 5d       	subi	r28, 0xDC	; 220
   1a9ce:	dd 4f       	sbci	r29, 0xFD	; 253
   1a9d0:	99 83       	std	Y+1, r25	; 0x01
   1a9d2:	88 83       	st	Y, r24
   1a9d4:	c4 52       	subi	r28, 0x24	; 36
   1a9d6:	d2 40       	sbci	r29, 0x02	; 2
    if(fo == NULL)
   1a9d8:	89 2b       	or	r24, r25
   1a9da:	09 f4       	brne	.+2      	; 0x1a9de <lif_extract_e010_as_ascii+0x138>
   1a9dc:	95 cf       	rjmp	.-214    	; 0x1a908 <lif_extract_e010_as_ascii+0x62>
    {
        lif_closedir(LIF);
        return(0);
    }

    printf("Extracting: %s\n", username);
   1a9de:	ca 5d       	subi	r28, 0xDA	; 218
   1a9e0:	dd 4f       	sbci	r29, 0xFD	; 253
   1a9e2:	28 81       	ld	r18, Y
   1a9e4:	39 81       	ldd	r19, Y+1	; 0x01
   1a9e6:	c6 52       	subi	r28, 0x26	; 38
   1a9e8:	d2 40       	sbci	r29, 0x02	; 2
   1a9ea:	ed b7       	in	r30, 0x3d	; 61
   1a9ec:	fe b7       	in	r31, 0x3e	; 62
   1a9ee:	35 83       	std	Z+5, r19	; 0x05
   1a9f0:	24 83       	std	Z+4, r18	; 0x04
   1a9f2:	87 e9       	ldi	r24, 0x97	; 151
   1a9f4:	93 e3       	ldi	r25, 0x33	; 51
   1a9f6:	a0 e0       	ldi	r26, 0x00	; 0
   1a9f8:	81 83       	std	Z+1, r24	; 0x01
   1a9fa:	92 83       	std	Z+2, r25	; 0x02
   1a9fc:	a3 83       	std	Z+3, r26	; 0x03
   1a9fe:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>

    bytes = 0;
    wind = 0;
   1aa02:	21 2c       	mov	r2, r1
   1aa04:	31 2c       	mov	r3, r1
    uint32_t start, end;                          // sectors
    long offset, bytes;                           // bytes
    int index;
    int i, len,size;
    int status = 1;
    int done = 0;
   1aa06:	ce 5d       	subi	r28, 0xDE	; 222
   1aa08:	dd 4f       	sbci	r29, 0xFD	; 253
   1aa0a:	19 82       	std	Y+1, r1	; 0x01
   1aa0c:	18 82       	st	Y, r1
   1aa0e:	c2 52       	subi	r28, 0x22	; 34
   1aa10:	d2 40       	sbci	r29, 0x02	; 2
    lif_t *LIF;
    uint32_t start, end;                          // sectors
    long offset, bytes;                           // bytes
    int index;
    int i, len,size;
    int status = 1;
   1aa12:	ee 24       	eor	r14, r14
   1aa14:	e3 94       	inc	r14
   1aa16:	f1 2c       	mov	r15, r1
        return(0);
    }

    printf("Extracting: %s\n", username);

    bytes = 0;
   1aa18:	41 2c       	mov	r4, r1
   1aa1a:	51 2c       	mov	r5, r1
   1aa1c:	32 01       	movw	r6, r4
                        status = 0;
                        done = 1;
                        break;
                    }
                    bytes += size;
                    printf("\tWrote: %8ld\r", bytes);
   1aa1e:	86 ed       	ldi	r24, 0xD6	; 214
   1aa20:	92 e3       	ldi	r25, 0x32	; 50
   1aa22:	9c 01       	movw	r18, r24
   1aa24:	40 e0       	ldi	r20, 0x00	; 0
   1aa26:	ce 5c       	subi	r28, 0xCE	; 206
   1aa28:	dd 4f       	sbci	r29, 0xFD	; 253
   1aa2a:	28 83       	st	Y, r18
   1aa2c:	39 83       	std	Y+1, r19	; 0x01
   1aa2e:	4a 83       	std	Y+2, r20	; 0x02
   1aa30:	c2 53       	subi	r28, 0x32	; 50
   1aa32:	d2 40       	sbci	r29, 0x02	; 2
                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1aa34:	84 ee       	ldi	r24, 0xE4	; 228
   1aa36:	92 e3       	ldi	r25, 0x32	; 50
   1aa38:	9c 01       	movw	r18, r24
   1aa3a:	40 e0       	ldi	r20, 0x00	; 0
   1aa3c:	cb 5c       	subi	r28, 0xCB	; 203
   1aa3e:	dd 4f       	sbci	r29, 0xFD	; 253
   1aa40:	28 83       	st	Y, r18
   1aa42:	39 83       	std	Y+1, r19	; 0x01
   1aa44:	4a 83       	std	Y+2, r20	; 0x02
   1aa46:	c5 53       	subi	r28, 0x35	; 53
   1aa48:	d2 40       	sbci	r29, 0x02	; 2

    bytes = 0;
    wind = 0;
    ind = 0;

    while(lif_bytes2sectors(offset) <= end)
   1aa4a:	c2 5e       	subi	r28, 0xE2	; 226
   1aa4c:	dd 4f       	sbci	r29, 0xFD	; 253
   1aa4e:	28 81       	ld	r18, Y
   1aa50:	39 81       	ldd	r19, Y+1	; 0x01
   1aa52:	4a 81       	ldd	r20, Y+2	; 0x02
   1aa54:	5b 81       	ldd	r21, Y+3	; 0x03
   1aa56:	ce 51       	subi	r28, 0x1E	; 30
   1aa58:	d2 40       	sbci	r29, 0x02	; 2
   1aa5a:	bb 27       	eor	r27, r27
   1aa5c:	a5 2f       	mov	r26, r21
   1aa5e:	94 2f       	mov	r25, r20
   1aa60:	83 2f       	mov	r24, r19
   1aa62:	c4 5d       	subi	r28, 0xD4	; 212
   1aa64:	dd 4f       	sbci	r29, 0xFD	; 253
   1aa66:	28 81       	ld	r18, Y
   1aa68:	39 81       	ldd	r19, Y+1	; 0x01
   1aa6a:	4a 81       	ldd	r20, Y+2	; 0x02
   1aa6c:	5b 81       	ldd	r21, Y+3	; 0x03
   1aa6e:	cc 52       	subi	r28, 0x2C	; 44
   1aa70:	d2 40       	sbci	r29, 0x02	; 2
   1aa72:	28 17       	cp	r18, r24
   1aa74:	39 07       	cpc	r19, r25
   1aa76:	4a 07       	cpc	r20, r26
   1aa78:	5b 07       	cpc	r21, r27
   1aa7a:	08 f4       	brcc	.+2      	; 0x1aa7e <lif_extract_e010_as_ascii+0x1d8>
   1aa7c:	51 c1       	rjmp	.+674    	; 0x1ad20 <lif_extract_e010_as_ascii+0x47a>
    {
// LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
   1aa7e:	00 e0       	ldi	r16, 0x00	; 0
   1aa80:	11 e0       	ldi	r17, 0x01	; 1
   1aa82:	c2 5e       	subi	r28, 0xE2	; 226
   1aa84:	dd 4f       	sbci	r29, 0xFD	; 253
   1aa86:	28 81       	ld	r18, Y
   1aa88:	39 81       	ldd	r19, Y+1	; 0x01
   1aa8a:	4a 81       	ldd	r20, Y+2	; 0x02
   1aa8c:	5b 81       	ldd	r21, Y+3	; 0x03
   1aa8e:	ce 51       	subi	r28, 0x1E	; 30
   1aa90:	d2 40       	sbci	r29, 0x02	; 2
   1aa92:	be 01       	movw	r22, r28
   1aa94:	60 5f       	subi	r22, 0xF0	; 240
   1aa96:	7e 4f       	sbci	r23, 0xFE	; 254
   1aa98:	c6 01       	movw	r24, r12
   1aa9a:	0e 94 38 be 	call	0x17c70	; 0x17c70 <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1aa9e:	6f 3f       	cpi	r22, 0xFF	; 255
   1aaa0:	71 05       	cpc	r23, r1
   1aaa2:	09 f0       	breq	.+2      	; 0x1aaa6 <lif_extract_e010_as_ascii+0x200>
   1aaa4:	0c f4       	brge	.+2      	; 0x1aaa8 <lif_extract_e010_as_ascii+0x202>
   1aaa6:	3a c1       	rjmp	.+628    	; 0x1ad1c <lif_extract_e010_as_ascii+0x476>
   1aaa8:	00 e0       	ldi	r16, 0x00	; 0
   1aaaa:	10 e0       	ldi	r17, 0x00	; 0
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1aaac:	ce 5d       	subi	r28, 0xDE	; 222
   1aaae:	dd 4f       	sbci	r29, 0xFD	; 253
   1aab0:	88 81       	ld	r24, Y
   1aab2:	99 81       	ldd	r25, Y+1	; 0x01
   1aab4:	c2 52       	subi	r28, 0x22	; 34
   1aab6:	d2 40       	sbci	r29, 0x02	; 2
   1aab8:	89 2b       	or	r24, r25
   1aaba:	09 f0       	breq	.+2      	; 0x1aabe <lif_extract_e010_as_ascii+0x218>
   1aabc:	1b c1       	rjmp	.+566    	; 0x1acf4 <lif_extract_e010_as_ascii+0x44e>
        {
            if(buf[ind] == 0xDF || buf[ind] == 0xCF || buf[ind] == 0x6F)
   1aabe:	e0 e1       	ldi	r30, 0x10	; 16
   1aac0:	f1 e0       	ldi	r31, 0x01	; 1
   1aac2:	ec 0f       	add	r30, r28
   1aac4:	fd 1f       	adc	r31, r29
   1aac6:	e0 0f       	add	r30, r16
   1aac8:	f1 1f       	adc	r31, r17
   1aaca:	80 81       	ld	r24, Z
   1aacc:	98 2f       	mov	r25, r24
   1aace:	9f 7e       	andi	r25, 0xEF	; 239
   1aad0:	9f 3c       	cpi	r25, 0xCF	; 207
   1aad2:	11 f0       	breq	.+4      	; 0x1aad8 <lif_extract_e010_as_ascii+0x232>
   1aad4:	8f 36       	cpi	r24, 0x6F	; 111
   1aad6:	c9 f5       	brne	.+114    	; 0x1ab4a <lif_extract_e010_as_ascii+0x2a4>
            {
                ++ind;
                len = buf[ind++] & 0xff;
   1aad8:	e0 e1       	ldi	r30, 0x10	; 16
   1aada:	f1 e0       	ldi	r31, 0x01	; 1
   1aadc:	ec 0f       	add	r30, r28
   1aade:	fd 1f       	adc	r31, r29
   1aae0:	e0 0f       	add	r30, r16
   1aae2:	f1 1f       	adc	r31, r17
   1aae4:	a1 80       	ldd	r10, Z+1	; 0x01
                len |= ((buf[ind++] & 0xff) <<8);
   1aae6:	f8 01       	movw	r30, r16
   1aae8:	32 96       	adiw	r30, 0x02	; 2
   1aaea:	40 e1       	ldi	r20, 0x10	; 16
   1aaec:	51 e0       	ldi	r21, 0x01	; 1
   1aaee:	4c 0f       	add	r20, r28
   1aaf0:	5d 1f       	adc	r21, r29
   1aaf2:	e4 0f       	add	r30, r20
   1aaf4:	f5 1f       	adc	r31, r21
   1aaf6:	0d 5f       	subi	r16, 0xFD	; 253
   1aaf8:	1f 4f       	sbci	r17, 0xFF	; 255
   1aafa:	80 81       	ld	r24, Z
   1aafc:	b1 2c       	mov	r11, r1
   1aafe:	b8 2a       	or	r11, r24
// EOF ?
                if(len == 0)
   1ab00:	a1 14       	cp	r10, r1
   1ab02:	b1 04       	cpc	r11, r1
   1ab04:	09 f4       	brne	.+2      	; 0x1ab08 <lif_extract_e010_as_ascii+0x262>
   1ab06:	ee c0       	rjmp	.+476    	; 0x1ace4 <lif_extract_e010_as_ascii+0x43e>
                {
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
   1ab08:	5f ef       	ldi	r21, 0xFF	; 255
   1ab0a:	a5 16       	cp	r10, r21
   1ab0c:	b1 04       	cpc	r11, r1
   1ab0e:	09 f0       	breq	.+2      	; 0x1ab12 <lif_extract_e010_as_ascii+0x26c>
   1ab10:	7c f4       	brge	.+30     	; 0x1ab30 <lif_extract_e010_as_ascii+0x28a>
   1ab12:	c4 5e       	subi	r28, 0xE4	; 228
   1ab14:	dd 4f       	sbci	r29, 0xFD	; 253
   1ab16:	19 82       	std	Y+1, r1	; 0x01
   1ab18:	18 82       	st	Y, r1
   1ab1a:	cc 51       	subi	r28, 0x1C	; 28
   1ab1c:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
   1ab1e:	c5 01       	movw	r24, r10
   1ab20:	01 97       	sbiw	r24, 0x01	; 1
   1ab22:	c0 5d       	subi	r28, 0xD0	; 208
   1ab24:	dd 4f       	sbci	r29, 0xFD	; 253
   1ab26:	99 83       	std	Y+1, r25	; 0x01
   1ab28:	88 83       	st	Y, r24
   1ab2a:	c0 53       	subi	r28, 0x30	; 48
   1ab2c:	d2 40       	sbci	r29, 0x02	; 2
   1ab2e:	68 c0       	rjmp	.+208    	; 0x1ac00 <lif_extract_e010_as_ascii+0x35a>
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
                {
                    printf("lif_extract_e010_as_ascii: string too big size = %d\n", (int)len);
   1ab30:	ed b7       	in	r30, 0x3d	; 61
   1ab32:	fe b7       	in	r31, 0x3e	; 62
   1ab34:	b5 82       	std	Z+5, r11	; 0x05
   1ab36:	a4 82       	std	Z+4, r10	; 0x04
   1ab38:	82 e6       	ldi	r24, 0x62	; 98
   1ab3a:	93 e3       	ldi	r25, 0x33	; 51
   1ab3c:	a0 e0       	ldi	r26, 0x00	; 0
   1ab3e:	81 83       	std	Z+1, r24	; 0x01
   1ab40:	92 83       	std	Z+2, r25	; 0x02
   1ab42:	a3 83       	std	Z+3, r26	; 0x03
   1ab44:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   1ab48:	1e c0       	rjmp	.+60     	; 0x1ab86 <lif_extract_e010_as_ascii+0x2e0>
                    status = 0;
                    done = 1;
                    break;
                }
            }
            else if(buf[ind] == 0xEF)
   1ab4a:	8f 3e       	cpi	r24, 0xEF	; 239
   1ab4c:	09 f4       	brne	.+2      	; 0x1ab50 <lif_extract_e010_as_ascii+0x2aa>
   1ab4e:	d2 c0       	rjmp	.+420    	; 0x1acf4 <lif_extract_e010_as_ascii+0x44e>
                ind = 0;
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
   1ab50:	ed b7       	in	r30, 0x3d	; 61
   1ab52:	fe b7       	in	r31, 0x3e	; 62
   1ab54:	13 87       	std	Z+11, r17	; 0x0b
   1ab56:	02 87       	std	Z+10, r16	; 0x0a
   1ab58:	c2 5e       	subi	r28, 0xE2	; 226
   1ab5a:	dd 4f       	sbci	r29, 0xFD	; 253
   1ab5c:	28 81       	ld	r18, Y
   1ab5e:	39 81       	ldd	r19, Y+1	; 0x01
   1ab60:	4a 81       	ldd	r20, Y+2	; 0x02
   1ab62:	5b 81       	ldd	r21, Y+3	; 0x03
   1ab64:	ce 51       	subi	r28, 0x1E	; 30
   1ab66:	d2 40       	sbci	r29, 0x02	; 2
   1ab68:	26 83       	std	Z+6, r18	; 0x06
   1ab6a:	37 83       	std	Z+7, r19	; 0x07
   1ab6c:	40 87       	std	Z+8, r20	; 0x08
   1ab6e:	51 87       	std	Z+9, r21	; 0x09
   1ab70:	90 e0       	ldi	r25, 0x00	; 0
   1ab72:	95 83       	std	Z+5, r25	; 0x05
   1ab74:	84 83       	std	Z+4, r24	; 0x04
   1ab76:	8c e0       	ldi	r24, 0x0C	; 12
   1ab78:	93 e3       	ldi	r25, 0x33	; 51
   1ab7a:	a0 e0       	ldi	r26, 0x00	; 0
   1ab7c:	81 83       	std	Z+1, r24	; 0x01
   1ab7e:	92 83       	std	Z+2, r25	; 0x02
   1ab80:	a3 83       	std	Z+3, r26	; 0x03
   1ab82:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
                status = 0;
                done = 1;
   1ab86:	21 e0       	ldi	r18, 0x01	; 1
   1ab88:	30 e0       	ldi	r19, 0x00	; 0
   1ab8a:	ce 5d       	subi	r28, 0xDE	; 222
   1ab8c:	dd 4f       	sbci	r29, 0xFD	; 253
   1ab8e:	39 83       	std	Y+1, r19	; 0x01
   1ab90:	28 83       	st	Y, r18
   1ab92:	c2 52       	subi	r28, 0x22	; 34
   1ab94:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
                status = 0;
   1ab96:	e1 2c       	mov	r14, r1
   1ab98:	f1 2c       	mov	r15, r1
                done = 1;
                break;
   1ab9a:	ac c0       	rjmp	.+344    	; 0x1acf4 <lif_extract_e010_as_ascii+0x44e>
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1ab9c:	0f 3f       	cpi	r16, 0xFF	; 255
   1ab9e:	11 05       	cpc	r17, r1
   1aba0:	11 f0       	breq	.+4      	; 0x1aba6 <lif_extract_e010_as_ascii+0x300>
   1aba2:	0c f0       	brlt	.+2      	; 0x1aba6 <lif_extract_e010_as_ascii+0x300>
   1aba4:	a7 c0       	rjmp	.+334    	; 0x1acf4 <lif_extract_e010_as_ascii+0x44e>
            {
                if(buf[ind] == '\r' && i == len-1)
   1aba6:	e0 e1       	ldi	r30, 0x10	; 16
   1aba8:	f1 e0       	ldi	r31, 0x01	; 1
   1abaa:	ec 0f       	add	r30, r28
   1abac:	fd 1f       	adc	r31, r29
   1abae:	e0 0f       	add	r30, r16
   1abb0:	f1 1f       	adc	r31, r17
   1abb2:	20 81       	ld	r18, Z
   1abb4:	a1 01       	movw	r20, r2
   1abb6:	4f 5f       	subi	r20, 0xFF	; 255
   1abb8:	5f 4f       	sbci	r21, 0xFF	; 255
   1abba:	4a 01       	movw	r8, r20
   1abbc:	2d 30       	cpi	r18, 0x0D	; 13
   1abbe:	51 f1       	breq	.+84     	; 0x1ac14 <lif_extract_e010_as_ascii+0x36e>
                    ++ind;
                    break;
                }
                else
                {
                    wbuf[wind++] = buf[ind++];
   1abc0:	98 2d       	mov	r25, r8
   1abc2:	89 2d       	mov	r24, r9
   1abc4:	0f 5f       	subi	r16, 0xFF	; 255
   1abc6:	1f 4f       	sbci	r17, 0xFF	; 255
   1abc8:	ec e0       	ldi	r30, 0x0C	; 12
   1abca:	f0 e0       	ldi	r31, 0x00	; 0
   1abcc:	ec 0f       	add	r30, r28
   1abce:	fd 1f       	adc	r31, r29
   1abd0:	e2 0d       	add	r30, r2
   1abd2:	f3 1d       	adc	r31, r3
   1abd4:	20 83       	st	Z, r18
                }

                if(wind >= LIF_SECTOR_SIZE)
   1abd6:	ef ef       	ldi	r30, 0xFF	; 255
   1abd8:	8e 16       	cp	r8, r30
   1abda:	91 04       	cpc	r9, r1
   1abdc:	09 f0       	breq	.+2      	; 0x1abe0 <lif_extract_e010_as_ascii+0x33a>
   1abde:	ac f5       	brge	.+106    	; 0x1ac4a <lif_extract_e010_as_ascii+0x3a4>
                status = 0;
                done = 1;
                break;
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1abe0:	c4 5e       	subi	r28, 0xE4	; 228
   1abe2:	dd 4f       	sbci	r29, 0xFD	; 253
   1abe4:	28 81       	ld	r18, Y
   1abe6:	39 81       	ldd	r19, Y+1	; 0x01
   1abe8:	cc 51       	subi	r28, 0x1C	; 28
   1abea:	d2 40       	sbci	r29, 0x02	; 2
   1abec:	2f 5f       	subi	r18, 0xFF	; 255
   1abee:	3f 4f       	sbci	r19, 0xFF	; 255
   1abf0:	c4 5e       	subi	r28, 0xE4	; 228
   1abf2:	dd 4f       	sbci	r29, 0xFD	; 253
   1abf4:	39 83       	std	Y+1, r19	; 0x01
   1abf6:	28 83       	st	Y, r18
   1abf8:	cc 51       	subi	r28, 0x1C	; 28
   1abfa:	d2 40       	sbci	r29, 0x02	; 2
   1abfc:	29 2e       	mov	r2, r25
   1abfe:	38 2e       	mov	r3, r24
   1ac00:	c4 5e       	subi	r28, 0xE4	; 228
   1ac02:	dd 4f       	sbci	r29, 0xFD	; 253
   1ac04:	48 81       	ld	r20, Y
   1ac06:	59 81       	ldd	r21, Y+1	; 0x01
   1ac08:	cc 51       	subi	r28, 0x1C	; 28
   1ac0a:	d2 40       	sbci	r29, 0x02	; 2
   1ac0c:	4a 15       	cp	r20, r10
   1ac0e:	5b 05       	cpc	r21, r11
   1ac10:	2c f2       	brlt	.-118    	; 0x1ab9c <lif_extract_e010_as_ascii+0x2f6>
   1ac12:	62 c0       	rjmp	.+196    	; 0x1acd8 <lif_extract_e010_as_ascii+0x432>
            {
                if(buf[ind] == '\r' && i == len-1)
   1ac14:	c4 5e       	subi	r28, 0xE4	; 228
   1ac16:	dd 4f       	sbci	r29, 0xFD	; 253
   1ac18:	88 81       	ld	r24, Y
   1ac1a:	99 81       	ldd	r25, Y+1	; 0x01
   1ac1c:	cc 51       	subi	r28, 0x1C	; 28
   1ac1e:	d2 40       	sbci	r29, 0x02	; 2
   1ac20:	c0 5d       	subi	r28, 0xD0	; 208
   1ac22:	dd 4f       	sbci	r29, 0xFD	; 253
   1ac24:	a8 81       	ld	r26, Y
   1ac26:	b9 81       	ldd	r27, Y+1	; 0x01
   1ac28:	c0 53       	subi	r28, 0x30	; 48
   1ac2a:	d2 40       	sbci	r29, 0x02	; 2
   1ac2c:	8a 17       	cp	r24, r26
   1ac2e:	9b 07       	cpc	r25, r27
   1ac30:	39 f6       	brne	.-114    	; 0x1abc0 <lif_extract_e010_as_ascii+0x31a>
                {
                    wbuf[wind++] = '\n';
   1ac32:	ec e0       	ldi	r30, 0x0C	; 12
   1ac34:	f0 e0       	ldi	r31, 0x00	; 0
   1ac36:	ec 0f       	add	r30, r28
   1ac38:	fd 1f       	adc	r31, r29
   1ac3a:	e2 0d       	add	r30, r2
   1ac3c:	f3 1d       	adc	r31, r3
   1ac3e:	ba e0       	ldi	r27, 0x0A	; 10
   1ac40:	b0 83       	st	Z, r27
                    ++ind;
   1ac42:	0f 5f       	subi	r16, 0xFF	; 255
   1ac44:	1f 4f       	sbci	r17, 0xFF	; 255
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
                {
                    wbuf[wind++] = '\n';
   1ac46:	1a 01       	movw	r2, r20
                    ++ind;
                    break;
   1ac48:	47 c0       	rjmp	.+142    	; 0x1acd8 <lif_extract_e010_as_ascii+0x432>
                    wbuf[wind++] = buf[ind++];
                }

                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
   1ac4a:	cc 5d       	subi	r28, 0xDC	; 220
   1ac4c:	dd 4f       	sbci	r29, 0xFD	; 253
   1ac4e:	28 81       	ld	r18, Y
   1ac50:	39 81       	ldd	r19, Y+1	; 0x01
   1ac52:	c4 52       	subi	r28, 0x24	; 36
   1ac54:	d2 40       	sbci	r29, 0x02	; 2
   1ac56:	a4 01       	movw	r20, r8
   1ac58:	61 e0       	ldi	r22, 0x01	; 1
   1ac5a:	70 e0       	ldi	r23, 0x00	; 0
   1ac5c:	ce 01       	movw	r24, r28
   1ac5e:	0c 96       	adiw	r24, 0x0c	; 12
   1ac60:	0e 94 b3 7a 	call	0xf566	; 0xf566 <fwrite>
                    if(size < wind)
   1ac64:	88 15       	cp	r24, r8
   1ac66:	99 05       	cpc	r25, r9
   1ac68:	d4 f4       	brge	.+52     	; 0x1ac9e <lif_extract_e010_as_ascii+0x3f8>
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1ac6a:	cb 5c       	subi	r28, 0xCB	; 203
   1ac6c:	dd 4f       	sbci	r29, 0xFD	; 253
   1ac6e:	28 81       	ld	r18, Y
   1ac70:	39 81       	ldd	r19, Y+1	; 0x01
   1ac72:	4a 81       	ldd	r20, Y+2	; 0x02
   1ac74:	c5 53       	subi	r28, 0x35	; 53
   1ac76:	d2 40       	sbci	r29, 0x02	; 2
   1ac78:	ed b7       	in	r30, 0x3d	; 61
   1ac7a:	fe b7       	in	r31, 0x3e	; 62
   1ac7c:	21 83       	std	Z+1, r18	; 0x01
   1ac7e:	32 83       	std	Z+2, r19	; 0x02
   1ac80:	43 83       	std	Z+3, r20	; 0x03
   1ac82:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
                    ++ind;
                    break;
                }
                else
                {
                    wbuf[wind++] = buf[ind++];
   1ac86:	14 01       	movw	r2, r8
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
                        done = 1;
   1ac88:	21 e0       	ldi	r18, 0x01	; 1
   1ac8a:	30 e0       	ldi	r19, 0x00	; 0
   1ac8c:	ce 5d       	subi	r28, 0xDE	; 222
   1ac8e:	dd 4f       	sbci	r29, 0xFD	; 253
   1ac90:	39 83       	std	Y+1, r19	; 0x01
   1ac92:	28 83       	st	Y, r18
   1ac94:	c2 52       	subi	r28, 0x22	; 34
   1ac96:	d2 40       	sbci	r29, 0x02	; 2
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
   1ac98:	e1 2c       	mov	r14, r1
   1ac9a:	f1 2c       	mov	r15, r1
                        done = 1;
                        break;
   1ac9c:	1d c0       	rjmp	.+58     	; 0x1acd8 <lif_extract_e010_as_ascii+0x432>
                    }
                    bytes += size;
   1ac9e:	09 2e       	mov	r0, r25
   1aca0:	00 0c       	add	r0, r0
   1aca2:	aa 0b       	sbc	r26, r26
   1aca4:	bb 0b       	sbc	r27, r27
   1aca6:	48 0e       	add	r4, r24
   1aca8:	59 1e       	adc	r5, r25
   1acaa:	6a 1e       	adc	r6, r26
   1acac:	7b 1e       	adc	r7, r27
                    printf("\tWrote: %8ld\r", bytes);
   1acae:	ed b7       	in	r30, 0x3d	; 61
   1acb0:	fe b7       	in	r31, 0x3e	; 62
   1acb2:	44 82       	std	Z+4, r4	; 0x04
   1acb4:	55 82       	std	Z+5, r5	; 0x05
   1acb6:	66 82       	std	Z+6, r6	; 0x06
   1acb8:	77 82       	std	Z+7, r7	; 0x07
   1acba:	ce 5c       	subi	r28, 0xCE	; 206
   1acbc:	dd 4f       	sbci	r29, 0xFD	; 253
   1acbe:	28 81       	ld	r18, Y
   1acc0:	39 81       	ldd	r19, Y+1	; 0x01
   1acc2:	4a 81       	ldd	r20, Y+2	; 0x02
   1acc4:	c2 53       	subi	r28, 0x32	; 50
   1acc6:	d2 40       	sbci	r29, 0x02	; 2
   1acc8:	21 83       	std	Z+1, r18	; 0x01
   1acca:	32 83       	std	Z+2, r19	; 0x02
   1accc:	43 83       	std	Z+3, r20	; 0x03
   1acce:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
                    wind = 0;
   1acd2:	90 e0       	ldi	r25, 0x00	; 0
   1acd4:	80 e0       	ldi	r24, 0x00	; 0
   1acd6:	84 cf       	rjmp	.-248    	; 0x1abe0 <lif_extract_e010_as_ascii+0x33a>
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1acd8:	0f 3f       	cpi	r16, 0xFF	; 255
   1acda:	11 05       	cpc	r17, r1
   1acdc:	09 f0       	breq	.+2      	; 0x1ace0 <lif_extract_e010_as_ascii+0x43a>
   1acde:	0c f4       	brge	.+2      	; 0x1ace2 <lif_extract_e010_as_ascii+0x43c>
   1ace0:	e5 ce       	rjmp	.-566    	; 0x1aaac <lif_extract_e010_as_ascii+0x206>
   1ace2:	08 c0       	rjmp	.+16     	; 0x1acf4 <lif_extract_e010_as_ascii+0x44e>
                len = buf[ind++] & 0xff;
                len |= ((buf[ind++] & 0xff) <<8);
// EOF ?
                if(len == 0)
                {
                    done = 1;
   1ace4:	a1 e0       	ldi	r26, 0x01	; 1
   1ace6:	b0 e0       	ldi	r27, 0x00	; 0
   1ace8:	ce 5d       	subi	r28, 0xDE	; 222
   1acea:	dd 4f       	sbci	r29, 0xFD	; 253
   1acec:	b9 83       	std	Y+1, r27	; 0x01
   1acee:	a8 83       	st	Y, r26
   1acf0:	c2 52       	subi	r28, 0x22	; 34
   1acf2:	d2 40       	sbci	r29, 0x02	; 2

            }                                     // for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)

        }                                         // while(ind < LIF_SECTOR_SIZE && status)

        offset += (long) LIF_SECTOR_SIZE;
   1acf4:	c2 5e       	subi	r28, 0xE2	; 226
   1acf6:	dd 4f       	sbci	r29, 0xFD	; 253
   1acf8:	28 81       	ld	r18, Y
   1acfa:	39 81       	ldd	r19, Y+1	; 0x01
   1acfc:	4a 81       	ldd	r20, Y+2	; 0x02
   1acfe:	5b 81       	ldd	r21, Y+3	; 0x03
   1ad00:	ce 51       	subi	r28, 0x1E	; 30
   1ad02:	d2 40       	sbci	r29, 0x02	; 2
   1ad04:	3f 5f       	subi	r19, 0xFF	; 255
   1ad06:	4f 4f       	sbci	r20, 0xFF	; 255
   1ad08:	5f 4f       	sbci	r21, 0xFF	; 255
   1ad0a:	c2 5e       	subi	r28, 0xE2	; 226
   1ad0c:	dd 4f       	sbci	r29, 0xFD	; 253
   1ad0e:	28 83       	st	Y, r18
   1ad10:	39 83       	std	Y+1, r19	; 0x01
   1ad12:	4a 83       	std	Y+2, r20	; 0x02
   1ad14:	5b 83       	std	Y+3, r21	; 0x03
   1ad16:	ce 51       	subi	r28, 0x1E	; 30
   1ad18:	d2 40       	sbci	r29, 0x02	; 2
   1ad1a:	97 ce       	rjmp	.-722    	; 0x1aa4a <lif_extract_e010_as_ascii+0x1a4>
    {
// LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
        if(size < LIF_SECTOR_SIZE)
        {
            status = 0;
   1ad1c:	e1 2c       	mov	r14, r1
   1ad1e:	f1 2c       	mov	r15, r1
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ad20:	c6 01       	movw	r24, r12
   1ad22:	0e 94 04 c7 	call	0x18e08	; 0x18e08 <lif_close_volume>

    }                                             // while(offset <= end)

    lif_closedir(LIF);
// Flush any remaining bytes
    if(wind)
   1ad26:	21 14       	cp	r2, r1
   1ad28:	31 04       	cpc	r3, r1
   1ad2a:	31 f1       	breq	.+76     	; 0x1ad78 <lif_extract_e010_as_ascii+0x4d2>
    {
        size = fwrite(wbuf,1,wind,fo);
   1ad2c:	cc 5d       	subi	r28, 0xDC	; 220
   1ad2e:	dd 4f       	sbci	r29, 0xFD	; 253
   1ad30:	28 81       	ld	r18, Y
   1ad32:	39 81       	ldd	r19, Y+1	; 0x01
   1ad34:	c4 52       	subi	r28, 0x24	; 36
   1ad36:	d2 40       	sbci	r29, 0x02	; 2
   1ad38:	a1 01       	movw	r20, r2
   1ad3a:	61 e0       	ldi	r22, 0x01	; 1
   1ad3c:	70 e0       	ldi	r23, 0x00	; 0
   1ad3e:	ce 01       	movw	r24, r28
   1ad40:	0c 96       	adiw	r24, 0x0c	; 12
   1ad42:	0e 94 b3 7a 	call	0xf566	; 0xf566 <fwrite>
   1ad46:	8c 01       	movw	r16, r24
        if(size < wind)
   1ad48:	82 15       	cp	r24, r2
   1ad4a:	93 05       	cpc	r25, r3
   1ad4c:	64 f4       	brge	.+24     	; 0x1ad66 <lif_extract_e010_as_ascii+0x4c0>
        {
            printf("lif_extract_e010_as_ascii: write error\n");
   1ad4e:	8e ea       	ldi	r24, 0xAE	; 174
   1ad50:	92 e3       	ldi	r25, 0x32	; 50
   1ad52:	a0 e0       	ldi	r26, 0x00	; 0
   1ad54:	ed b7       	in	r30, 0x3d	; 61
   1ad56:	fe b7       	in	r31, 0x3e	; 62
   1ad58:	81 83       	std	Z+1, r24	; 0x01
   1ad5a:	92 83       	std	Z+2, r25	; 0x02
   1ad5c:	a3 83       	std	Z+3, r26	; 0x03
   1ad5e:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
            status = 0;
   1ad62:	e1 2c       	mov	r14, r1
   1ad64:	f1 2c       	mov	r15, r1
        }
        bytes += size;
   1ad66:	c8 01       	movw	r24, r16
   1ad68:	01 2e       	mov	r0, r17
   1ad6a:	00 0c       	add	r0, r0
   1ad6c:	aa 0b       	sbc	r26, r26
   1ad6e:	bb 0b       	sbc	r27, r27
   1ad70:	48 0e       	add	r4, r24
   1ad72:	59 1e       	adc	r5, r25
   1ad74:	6a 1e       	adc	r6, r26
   1ad76:	7b 1e       	adc	r7, r27
    }
    fclose(fo);
   1ad78:	cc 5d       	subi	r28, 0xDC	; 220
   1ad7a:	dd 4f       	sbci	r29, 0xFD	; 253
   1ad7c:	88 81       	ld	r24, Y
   1ad7e:	99 81       	ldd	r25, Y+1	; 0x01
   1ad80:	c4 52       	subi	r28, 0x24	; 36
   1ad82:	d2 40       	sbci	r29, 0x02	; 2
   1ad84:	0e 94 35 7b 	call	0xf66a	; 0xf66a <fclose>
    if(t)
   1ad88:	c8 5d       	subi	r28, 0xD8	; 216
   1ad8a:	dd 4f       	sbci	r29, 0xFD	; 253
   1ad8c:	28 81       	ld	r18, Y
   1ad8e:	39 81       	ldd	r19, Y+1	; 0x01
   1ad90:	4a 81       	ldd	r20, Y+2	; 0x02
   1ad92:	5b 81       	ldd	r21, Y+3	; 0x03
   1ad94:	c8 52       	subi	r28, 0x28	; 40
   1ad96:	d2 40       	sbci	r29, 0x02	; 2
   1ad98:	21 15       	cp	r18, r1
   1ad9a:	31 05       	cpc	r19, r1
   1ad9c:	41 05       	cpc	r20, r1
   1ad9e:	51 05       	cpc	r21, r1
   1ada0:	d9 f0       	breq	.+54     	; 0x1add8 <lif_extract_e010_as_ascii+0x532>
    {
        struct utimbuf times;
        times.modtime = t;
   1ada2:	c8 5e       	subi	r28, 0xE8	; 232
   1ada4:	dd 4f       	sbci	r29, 0xFD	; 253
   1ada6:	28 83       	st	Y, r18
   1ada8:	39 83       	std	Y+1, r19	; 0x01
   1adaa:	4a 83       	std	Y+2, r20	; 0x02
   1adac:	5b 83       	std	Y+3, r21	; 0x03
   1adae:	c8 51       	subi	r28, 0x18	; 24
   1adb0:	d2 40       	sbci	r29, 0x02	; 2
        times.actime = t;
   1adb2:	cc 5e       	subi	r28, 0xEC	; 236
   1adb4:	dd 4f       	sbci	r29, 0xFD	; 253
   1adb6:	28 83       	st	Y, r18
   1adb8:	39 83       	std	Y+1, r19	; 0x01
   1adba:	4a 83       	std	Y+2, r20	; 0x02
   1adbc:	5b 83       	std	Y+3, r21	; 0x03
   1adbe:	c4 51       	subi	r28, 0x14	; 20
   1adc0:	d2 40       	sbci	r29, 0x02	; 2
        utime(username, (struct utimbuf *) &times);
   1adc2:	be 01       	movw	r22, r28
   1adc4:	6c 5e       	subi	r22, 0xEC	; 236
   1adc6:	7d 4f       	sbci	r23, 0xFD	; 253
   1adc8:	ca 5d       	subi	r28, 0xDA	; 218
   1adca:	dd 4f       	sbci	r29, 0xFD	; 253
   1adcc:	88 81       	ld	r24, Y
   1adce:	99 81       	ldd	r25, Y+1	; 0x01
   1add0:	c6 52       	subi	r28, 0x26	; 38
   1add2:	d2 40       	sbci	r29, 0x02	; 2
   1add4:	0e 94 72 78 	call	0xf0e4	; 0xf0e4 <utime>
    }
    sync();
   1add8:	0e 94 30 7a 	call	0xf460	; 0xf460 <sync>
    printf("\tWrote: %8ld\n", bytes);
   1addc:	ed b7       	in	r30, 0x3d	; 61
   1adde:	fe b7       	in	r31, 0x3e	; 62
   1ade0:	44 82       	std	Z+4, r4	; 0x04
   1ade2:	55 82       	std	Z+5, r5	; 0x05
   1ade4:	66 82       	std	Z+6, r6	; 0x06
   1ade6:	77 82       	std	Z+7, r7	; 0x07
   1ade8:	80 ea       	ldi	r24, 0xA0	; 160
   1adea:	92 e3       	ldi	r25, 0x32	; 50
   1adec:	a0 e0       	ldi	r26, 0x00	; 0
   1adee:	81 83       	std	Z+1, r24	; 0x01
   1adf0:	92 83       	std	Z+2, r25	; 0x02
   1adf2:	a3 83       	std	Z+3, r26	; 0x03
   1adf4:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    return(status);
   1adf8:	c7 01       	movw	r24, r14
}
   1adfa:	c9 5c       	subi	r28, 0xC9	; 201
   1adfc:	dd 4f       	sbci	r29, 0xFD	; 253
   1adfe:	e2 e1       	ldi	r30, 0x12	; 18
   1ae00:	0c 94 25 e3 	jmp	0x1c64a	; 0x1c64a <__epilogue_restores__>

0001ae04 <lif_extract_lif_as_lif>:
/// @param[in] lifname:  name of file in LIF image we want to extract
/// @param[in] username: new LIF file to create
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_lif_as_lif(char *lifimagename, char *lifname, char *username)
{
   1ae04:	a4 e1       	ldi	r26, 0x14	; 20
   1ae06:	b1 e0       	ldi	r27, 0x01	; 1
   1ae08:	e8 e0       	ldi	r30, 0x08	; 8
   1ae0a:	f7 ed       	ldi	r31, 0xD7	; 215
   1ae0c:	0c 94 09 e3 	jmp	0x1c612	; 0x1c612 <__prologue_saves__>
   1ae10:	7c 01       	movw	r14, r24
   1ae12:	8b 01       	movw	r16, r22
   1ae14:	3a 01       	movw	r6, r20
    int i, size;
    int sectors;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    LIF = lif_open_volume(lifimagename,"r");
   1ae16:	62 e4       	ldi	r22, 0x42	; 66
   1ae18:	73 e0       	ldi	r23, 0x03	; 3
   1ae1a:	0e 94 c1 cd 	call	0x19b82	; 0x19b82 <lif_open_volume>
   1ae1e:	4c 01       	movw	r8, r24
    if(LIF == NULL)
   1ae20:	00 97       	sbiw	r24, 0x00	; 0
   1ae22:	69 f4       	brne	.+26     	; 0x1ae3e <lif_extract_lif_as_lif+0x3a>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1ae24:	ed b7       	in	r30, 0x3d	; 61
   1ae26:	fe b7       	in	r31, 0x3e	; 62
   1ae28:	f5 82       	std	Z+5, r15	; 0x05
   1ae2a:	e4 82       	std	Z+4, r14	; 0x04
   1ae2c:	88 e8       	ldi	r24, 0x88	; 136
   1ae2e:	92 e3       	ldi	r25, 0x32	; 50
   1ae30:	a0 e0       	ldi	r26, 0x00	; 0
   1ae32:	81 83       	std	Z+1, r24	; 0x01
   1ae34:	92 83       	std	Z+2, r25	; 0x02
   1ae36:	a3 83       	std	Z+3, r26	; 0x03
   1ae38:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   1ae3c:	13 c0       	rjmp	.+38     	; 0x1ae64 <lif_extract_lif_as_lif+0x60>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1ae3e:	b8 01       	movw	r22, r16
   1ae40:	75 d9       	rcall	.-3350   	; 0x1a12c <lif_find_file>
    if(index == -1)
   1ae42:	01 96       	adiw	r24, 0x01	; 1
   1ae44:	91 f4       	brne	.+36     	; 0x1ae6a <lif_extract_lif_as_lif+0x66>
    {
        printf("File not found:%s\n", lifname);
   1ae46:	ed b7       	in	r30, 0x3d	; 61
   1ae48:	fe b7       	in	r31, 0x3e	; 62
   1ae4a:	15 83       	std	Z+5, r17	; 0x05
   1ae4c:	04 83       	std	Z+4, r16	; 0x04
   1ae4e:	85 e7       	ldi	r24, 0x75	; 117
   1ae50:	92 e3       	ldi	r25, 0x32	; 50
   1ae52:	a0 e0       	ldi	r26, 0x00	; 0
   1ae54:	81 83       	std	Z+1, r24	; 0x01
   1ae56:	92 83       	std	Z+2, r25	; 0x02
   1ae58:	a3 83       	std	Z+3, r26	; 0x03
   1ae5a:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ae5e:	c4 01       	movw	r24, r8
   1ae60:	0e 94 04 c7 	call	0x18e08	; 0x18e08 <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1ae64:	00 e0       	ldi	r16, 0x00	; 0
   1ae66:	10 e0       	ldi	r17, 0x00	; 0
   1ae68:	ff c0       	rjmp	.+510    	; 0x1b068 <lif_extract_lif_as_lif+0x264>
    }

    sectors = LIF->DIR.FileSectors;
   1ae6a:	94 01       	movw	r18, r8
   1ae6c:	20 5a       	subi	r18, 0xA0	; 160
   1ae6e:	3f 4f       	sbci	r19, 0xFF	; 255
   1ae70:	c0 5f       	subi	r28, 0xF0	; 240
   1ae72:	de 4f       	sbci	r29, 0xFE	; 254
   1ae74:	39 83       	std	Y+1, r19	; 0x01
   1ae76:	28 83       	st	Y, r18
   1ae78:	c0 51       	subi	r28, 0x10	; 16
   1ae7a:	d1 40       	sbci	r29, 0x01	; 1

//Initialize the user file lif_t structure
    ULIF = lif_create_volume(username, "HFSLIF",1,1,sectors);
   1ae7c:	f9 01       	movw	r30, r18
   1ae7e:	a0 80       	ld	r10, Z
   1ae80:	b1 80       	ldd	r11, Z+1	; 0x01
   1ae82:	0b 2c       	mov	r0, r11
   1ae84:	00 0c       	add	r0, r0
   1ae86:	cc 08       	sbc	r12, r12
   1ae88:	dd 08       	sbc	r13, r13
   1ae8a:	e1 2c       	mov	r14, r1
   1ae8c:	f1 2c       	mov	r15, r1
   1ae8e:	87 01       	movw	r16, r14
   1ae90:	e3 94       	inc	r14
   1ae92:	21 e0       	ldi	r18, 0x01	; 1
   1ae94:	30 e0       	ldi	r19, 0x00	; 0
   1ae96:	40 e0       	ldi	r20, 0x00	; 0
   1ae98:	50 e0       	ldi	r21, 0x00	; 0
   1ae9a:	61 e7       	ldi	r22, 0x71	; 113
   1ae9c:	76 e1       	ldi	r23, 0x16	; 22
   1ae9e:	c3 01       	movw	r24, r6
   1aea0:	0e 94 77 c9 	call	0x192ee	; 0x192ee <lif_create_volume>
   1aea4:	7c 01       	movw	r14, r24
    if(ULIF == NULL)
   1aea6:	89 2b       	or	r24, r25
   1aea8:	d1 f2       	breq	.-76     	; 0x1ae5e <lif_extract_lif_as_lif+0x5a>
    }

// Only the start sector changes

// Copy directory record
    ULIF->DIR = LIF->DIR;
   1aeaa:	81 e2       	ldi	r24, 0x21	; 33
   1aeac:	f4 01       	movw	r30, r8
   1aeae:	e1 5b       	subi	r30, 0xB1	; 177
   1aeb0:	ff 4f       	sbci	r31, 0xFF	; 255
   1aeb2:	d7 01       	movw	r26, r14
   1aeb4:	a1 5b       	subi	r26, 0xB1	; 177
   1aeb6:	bf 4f       	sbci	r27, 0xFF	; 255
   1aeb8:	01 90       	ld	r0, Z+
   1aeba:	0d 92       	st	X+, r0
   1aebc:	8a 95       	dec	r24
   1aebe:	e1 f7       	brne	.-8      	; 0x1aeb8 <lif_extract_lif_as_lif+0xb4>

    ULIF->DIR.FileStartSector = 2;
   1aec0:	82 e0       	ldi	r24, 0x02	; 2
   1aec2:	90 e0       	ldi	r25, 0x00	; 0
   1aec4:	a0 e0       	ldi	r26, 0x00	; 0
   1aec6:	b0 e0       	ldi	r27, 0x00	; 0
   1aec8:	f7 01       	movw	r30, r14
   1aeca:	e4 5a       	subi	r30, 0xA4	; 164
   1aecc:	ff 4f       	sbci	r31, 0xFF	; 255
   1aece:	80 83       	st	Z, r24
   1aed0:	91 83       	std	Z+1, r25	; 0x01
   1aed2:	a2 83       	std	Z+2, r26	; 0x02
   1aed4:	b3 83       	std	Z+3, r27	; 0x03
    ULIF->filesectors = LIF->DIR.FileSectors;
   1aed6:	c0 5f       	subi	r28, 0xF0	; 240
   1aed8:	de 4f       	sbci	r29, 0xFE	; 254
   1aeda:	e8 81       	ld	r30, Y
   1aedc:	f9 81       	ldd	r31, Y+1	; 0x01
   1aede:	c0 51       	subi	r28, 0x10	; 16
   1aee0:	d1 40       	sbci	r29, 0x01	; 1
   1aee2:	80 81       	ld	r24, Z
   1aee4:	91 81       	ldd	r25, Z+1	; 0x01
   1aee6:	a2 81       	ldd	r26, Z+2	; 0x02
   1aee8:	b3 81       	ldd	r27, Z+3	; 0x03
   1aeea:	f7 01       	movw	r30, r14
   1aeec:	80 8b       	std	Z+16, r24	; 0x10
   1aeee:	91 8b       	std	Z+17, r25	; 0x11
   1aef0:	a2 8b       	std	Z+18, r26	; 0x12
   1aef2:	b3 8b       	std	Z+19, r27	; 0x13

    if( !lif_writedirindex(ULIF,0))
   1aef4:	60 e0       	ldi	r22, 0x00	; 0
   1aef6:	70 e0       	ldi	r23, 0x00	; 0
   1aef8:	c7 01       	movw	r24, r14
   1aefa:	0e 94 f9 c7 	call	0x18ff2	; 0x18ff2 <lif_writedirindex>
   1aefe:	8c 01       	movw	r16, r24
   1af00:	89 2b       	or	r24, r25
   1af02:	41 f0       	breq	.+16     	; 0x1af14 <lif_extract_lif_as_lif+0x110>
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
    }
    if( !lif_writedirEOF(ULIF,1) )
   1af04:	61 e0       	ldi	r22, 0x01	; 1
   1af06:	70 e0       	ldi	r23, 0x00	; 0
   1af08:	c7 01       	movw	r24, r14
   1af0a:	0e 94 55 c8 	call	0x190aa	; 0x190aa <lif_writedirEOF>
   1af0e:	8c 01       	movw	r16, r24
   1af10:	89 2b       	or	r24, r25
   1af12:	39 f4       	brne	.+14     	; 0x1af22 <lif_extract_lif_as_lif+0x11e>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1af14:	c4 01       	movw	r24, r8
   1af16:	0e 94 04 c7 	call	0x18e08	; 0x18e08 <lif_close_volume>
   1af1a:	c7 01       	movw	r24, r14
   1af1c:	0e 94 04 c7 	call	0x18e08	; 0x18e08 <lif_close_volume>
    }
    if( !lif_writedirEOF(ULIF,1) )
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
   1af20:	a3 c0       	rjmp	.+326    	; 0x1b068 <lif_extract_lif_as_lif+0x264>
    }

    uoffset =  ULIF->filestart * (long) LIF_SECTOR_SIZE;
   1af22:	f7 01       	movw	r30, r14
   1af24:	44 84       	ldd	r4, Z+12	; 0x0c
   1af26:	55 84       	ldd	r5, Z+13	; 0x0d
   1af28:	66 84       	ldd	r6, Z+14	; 0x0e
   1af2a:	77 84       	ldd	r7, Z+15	; 0x0f
   1af2c:	76 2c       	mov	r7, r6
   1af2e:	65 2c       	mov	r6, r5
   1af30:	54 2c       	mov	r5, r4
   1af32:	44 24       	eor	r4, r4

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1af34:	f4 01       	movw	r30, r8
   1af36:	e4 5a       	subi	r30, 0xA4	; 164
   1af38:	ff 4f       	sbci	r31, 0xFF	; 255
   1af3a:	80 81       	ld	r24, Z
   1af3c:	91 81       	ldd	r25, Z+1	; 0x01
   1af3e:	a2 81       	ldd	r26, Z+2	; 0x02
   1af40:	b3 81       	ldd	r27, Z+3	; 0x03
   1af42:	22 27       	eor	r18, r18
   1af44:	38 2f       	mov	r19, r24
   1af46:	49 2f       	mov	r20, r25
   1af48:	5a 2f       	mov	r21, r26
   1af4a:	c4 5f       	subi	r28, 0xF4	; 244
   1af4c:	de 4f       	sbci	r29, 0xFE	; 254
   1af4e:	28 83       	st	Y, r18
   1af50:	39 83       	std	Y+1, r19	; 0x01
   1af52:	4a 83       	std	Y+2, r20	; 0x02
   1af54:	5b 83       	std	Y+3, r21	; 0x03
   1af56:	cc 50       	subi	r28, 0x0C	; 12
   1af58:	d1 40       	sbci	r29, 0x01	; 1

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1af5a:	21 2c       	mov	r2, r1
   1af5c:	31 2c       	mov	r3, r1
            return(0);
        }
        bytes += size;
        offset += size;
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
   1af5e:	87 e6       	ldi	r24, 0x67	; 103
   1af60:	92 e3       	ldi	r25, 0x32	; 50
   1af62:	9c 01       	movw	r18, r24
   1af64:	40 e0       	ldi	r20, 0x00	; 0
   1af66:	ce 5e       	subi	r28, 0xEE	; 238
   1af68:	de 4f       	sbci	r29, 0xFE	; 254
   1af6a:	28 83       	st	Y, r18
   1af6c:	39 83       	std	Y+1, r19	; 0x01
   1af6e:	4a 83       	std	Y+2, r20	; 0x02
   1af70:	c2 51       	subi	r28, 0x12	; 18
   1af72:	d1 40       	sbci	r29, 0x01	; 1

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1af74:	c0 5f       	subi	r28, 0xF0	; 240
   1af76:	de 4f       	sbci	r29, 0xFE	; 254
   1af78:	e8 81       	ld	r30, Y
   1af7a:	f9 81       	ldd	r31, Y+1	; 0x01
   1af7c:	c0 51       	subi	r28, 0x10	; 16
   1af7e:	d1 40       	sbci	r29, 0x01	; 1
   1af80:	80 81       	ld	r24, Z
   1af82:	91 81       	ldd	r25, Z+1	; 0x01
   1af84:	28 16       	cp	r2, r24
   1af86:	39 06       	cpc	r3, r25
   1af88:	0c f0       	brlt	.+2      	; 0x1af8c <lif_extract_lif_as_lif+0x188>
   1af8a:	58 c0       	rjmp	.+176    	; 0x1b03c <lif_extract_lif_as_lif+0x238>
    {
        size = lif_read(LIF, buf, offset,LIF_SECTOR_SIZE);
   1af8c:	00 e0       	ldi	r16, 0x00	; 0
   1af8e:	11 e0       	ldi	r17, 0x01	; 1
   1af90:	c4 5f       	subi	r28, 0xF4	; 244
   1af92:	de 4f       	sbci	r29, 0xFE	; 254
   1af94:	28 81       	ld	r18, Y
   1af96:	39 81       	ldd	r19, Y+1	; 0x01
   1af98:	4a 81       	ldd	r20, Y+2	; 0x02
   1af9a:	5b 81       	ldd	r21, Y+3	; 0x03
   1af9c:	cc 50       	subi	r28, 0x0C	; 12
   1af9e:	d1 40       	sbci	r29, 0x01	; 1
   1afa0:	be 01       	movw	r22, r28
   1afa2:	68 5f       	subi	r22, 0xF8	; 248
   1afa4:	7f 4f       	sbci	r23, 0xFF	; 255
   1afa6:	c4 01       	movw	r24, r8
   1afa8:	0e 94 38 be 	call	0x17c70	; 0x17c70 <lif_read>
   1afac:	5b 01       	movw	r10, r22
   1afae:	6c 01       	movw	r12, r24
        if(size < LIF_SECTOR_SIZE)
   1afb0:	6f 3f       	cpi	r22, 0xFF	; 255
   1afb2:	71 05       	cpc	r23, r1
   1afb4:	09 f0       	breq	.+2      	; 0x1afb8 <lif_extract_lif_as_lif+0x1b4>
   1afb6:	2c f4       	brge	.+10     	; 0x1afc2 <lif_extract_lif_as_lif+0x1be>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1afb8:	c4 01       	movw	r24, r8
   1afba:	0e 94 04 c7 	call	0x18e08	; 0x18e08 <lif_close_volume>
   1afbe:	c7 01       	movw	r24, r14
   1afc0:	4f cf       	rjmp	.-354    	; 0x1ae60 <lif_extract_lif_as_lif+0x5c>
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }

        lif_write(ULIF,buf,uoffset,LIF_SECTOR_SIZE);
   1afc2:	00 e0       	ldi	r16, 0x00	; 0
   1afc4:	11 e0       	ldi	r17, 0x01	; 1
   1afc6:	a3 01       	movw	r20, r6
   1afc8:	92 01       	movw	r18, r4
   1afca:	be 01       	movw	r22, r28
   1afcc:	68 5f       	subi	r22, 0xF8	; 248
   1afce:	7f 4f       	sbci	r23, 0xFF	; 255
   1afd0:	c7 01       	movw	r24, r14
   1afd2:	0e 94 8b be 	call	0x17d16	; 0x17d16 <lif_write>
        {
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }
        bytes += size;
   1afd6:	c5 01       	movw	r24, r10
   1afd8:	0b 2c       	mov	r0, r11
   1afda:	00 0c       	add	r0, r0
   1afdc:	aa 0b       	sbc	r26, r26
   1afde:	bb 0b       	sbc	r27, r27
   1afe0:	48 0e       	add	r4, r24
   1afe2:	59 1e       	adc	r5, r25
   1afe4:	6a 1e       	adc	r6, r26
   1afe6:	7b 1e       	adc	r7, r27
        offset += size;
   1afe8:	c4 5f       	subi	r28, 0xF4	; 244
   1afea:	de 4f       	sbci	r29, 0xFE	; 254
   1afec:	28 81       	ld	r18, Y
   1afee:	39 81       	ldd	r19, Y+1	; 0x01
   1aff0:	4a 81       	ldd	r20, Y+2	; 0x02
   1aff2:	5b 81       	ldd	r21, Y+3	; 0x03
   1aff4:	cc 50       	subi	r28, 0x0C	; 12
   1aff6:	d1 40       	sbci	r29, 0x01	; 1
   1aff8:	28 0f       	add	r18, r24
   1affa:	39 1f       	adc	r19, r25
   1affc:	4a 1f       	adc	r20, r26
   1affe:	5b 1f       	adc	r21, r27
   1b000:	c4 5f       	subi	r28, 0xF4	; 244
   1b002:	de 4f       	sbci	r29, 0xFE	; 254
   1b004:	28 83       	st	Y, r18
   1b006:	39 83       	std	Y+1, r19	; 0x01
   1b008:	4a 83       	std	Y+2, r20	; 0x02
   1b00a:	5b 83       	std	Y+3, r21	; 0x03
   1b00c:	cc 50       	subi	r28, 0x0C	; 12
   1b00e:	d1 40       	sbci	r29, 0x01	; 1
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
   1b010:	ed b7       	in	r30, 0x3d	; 61
   1b012:	fe b7       	in	r31, 0x3e	; 62
   1b014:	44 82       	std	Z+4, r4	; 0x04
   1b016:	55 82       	std	Z+5, r5	; 0x05
   1b018:	66 82       	std	Z+6, r6	; 0x06
   1b01a:	77 82       	std	Z+7, r7	; 0x07
   1b01c:	ce 5e       	subi	r28, 0xEE	; 238
   1b01e:	de 4f       	sbci	r29, 0xFE	; 254
   1b020:	28 81       	ld	r18, Y
   1b022:	39 81       	ldd	r19, Y+1	; 0x01
   1b024:	4a 81       	ldd	r20, Y+2	; 0x02
   1b026:	c2 51       	subi	r28, 0x12	; 18
   1b028:	d1 40       	sbci	r29, 0x01	; 1
   1b02a:	21 83       	std	Z+1, r18	; 0x01
   1b02c:	32 83       	std	Z+2, r19	; 0x02
   1b02e:	43 83       	std	Z+3, r20	; 0x03
   1b030:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b034:	ff ef       	ldi	r31, 0xFF	; 255
   1b036:	2f 1a       	sub	r2, r31
   1b038:	3f 0a       	sbc	r3, r31
   1b03a:	9c cf       	rjmp	.-200    	; 0x1af74 <lif_extract_lif_as_lif+0x170>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b03c:	c4 01       	movw	r24, r8
   1b03e:	0e 94 04 c7 	call	0x18e08	; 0x18e08 <lif_close_volume>
   1b042:	c7 01       	movw	r24, r14
   1b044:	0e 94 04 c7 	call	0x18e08	; 0x18e08 <lif_close_volume>
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
    }
    lif_closedir(LIF);
    lif_closedir(ULIF);
    printf("\tWrote: %8ld\n", bytes);
   1b048:	ed b7       	in	r30, 0x3d	; 61
   1b04a:	fe b7       	in	r31, 0x3e	; 62
   1b04c:	44 82       	std	Z+4, r4	; 0x04
   1b04e:	55 82       	std	Z+5, r5	; 0x05
   1b050:	66 82       	std	Z+6, r6	; 0x06
   1b052:	77 82       	std	Z+7, r7	; 0x07
   1b054:	89 e5       	ldi	r24, 0x59	; 89
   1b056:	92 e3       	ldi	r25, 0x32	; 50
   1b058:	a0 e0       	ldi	r26, 0x00	; 0
   1b05a:	81 83       	std	Z+1, r24	; 0x01
   1b05c:	92 83       	std	Z+2, r25	; 0x02
   1b05e:	a3 83       	std	Z+3, r26	; 0x03
   1b060:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    return(1);
   1b064:	01 e0       	ldi	r16, 0x01	; 1
   1b066:	10 e0       	ldi	r17, 0x00	; 0
}
   1b068:	c8 01       	movw	r24, r16
   1b06a:	cc 5e       	subi	r28, 0xEC	; 236
   1b06c:	de 4f       	sbci	r29, 0xFE	; 254
   1b06e:	e2 e1       	ldi	r30, 0x12	; 18
   1b070:	0c 94 25 e3 	jmp	0x1c64a	; 0x1c64a <__epilogue_restores__>

0001b074 <lif_add_lif_file>:
/// @param[in] lifname: LIF file name to copy file to
/// @param[in] userfile: LIF mage name copy file from
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_lif_file(char *lifimagename, char *lifname, char *userfile)
{
   1b074:	2f 92       	push	r2
   1b076:	3f 92       	push	r3
   1b078:	4f 92       	push	r4
   1b07a:	5f 92       	push	r5
   1b07c:	6f 92       	push	r6
   1b07e:	8f 92       	push	r8
   1b080:	9f 92       	push	r9
   1b082:	af 92       	push	r10
   1b084:	bf 92       	push	r11
   1b086:	cf 92       	push	r12
   1b088:	df 92       	push	r13
   1b08a:	ef 92       	push	r14
   1b08c:	ff 92       	push	r15
   1b08e:	0f 93       	push	r16
   1b090:	1f 93       	push	r17
   1b092:	cf 93       	push	r28
   1b094:	df 93       	push	r29
   1b096:	cd b7       	in	r28, 0x3d	; 61
   1b098:	de b7       	in	r29, 0x3e	; 62
   1b09a:	cd 51       	subi	r28, 0x1D	; 29
   1b09c:	d1 40       	sbci	r29, 0x01	; 1
   1b09e:	0f b6       	in	r0, 0x3f	; 63
   1b0a0:	f8 94       	cli
   1b0a2:	de bf       	out	0x3e, r29	; 62
   1b0a4:	0f be       	out	0x3f, r0	; 63
   1b0a6:	cd bf       	out	0x3d, r28	; 61
   1b0a8:	5c 01       	movw	r10, r24
   1b0aa:	7b 01       	movw	r14, r22
   1b0ac:	4a 01       	movw	r8, r20
    long offset, uoffset, start, bytes;
    int i, size;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    if(!*lifimagename)
   1b0ae:	dc 01       	movw	r26, r24
   1b0b0:	8c 91       	ld	r24, X
   1b0b2:	81 11       	cpse	r24, r1
   1b0b4:	03 c0       	rjmp	.+6      	; 0x1b0bc <lif_add_lif_file+0x48>
    {
        printf("lif_add: lifimagename is empty\n");
   1b0b6:	89 e3       	ldi	r24, 0x39	; 57
   1b0b8:	92 e3       	ldi	r25, 0x32	; 50
   1b0ba:	06 c0       	rjmp	.+12     	; 0x1b0c8 <lif_add_lif_file+0x54>
        return(-1);
    }
    if(!*lifname)
   1b0bc:	db 01       	movw	r26, r22
   1b0be:	8c 91       	ld	r24, X
   1b0c0:	81 11       	cpse	r24, r1
   1b0c2:	0b c0       	rjmp	.+22     	; 0x1b0da <lif_add_lif_file+0x66>
    {
        printf("lif_add: lifname is empty\n");
   1b0c4:	8e e1       	ldi	r24, 0x1E	; 30
   1b0c6:	92 e3       	ldi	r25, 0x32	; 50
   1b0c8:	a0 e0       	ldi	r26, 0x00	; 0
   1b0ca:	ed b7       	in	r30, 0x3d	; 61
   1b0cc:	fe b7       	in	r31, 0x3e	; 62
   1b0ce:	81 83       	std	Z+1, r24	; 0x01
   1b0d0:	92 83       	std	Z+2, r25	; 0x02
   1b0d2:	a3 83       	std	Z+3, r26	; 0x03
   1b0d4:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   1b0d8:	25 c1       	rjmp	.+586    	; 0x1b324 <lif_add_lif_file+0x2b0>
        return(-1);
    }
    if(!*userfile)
   1b0da:	da 01       	movw	r26, r20
   1b0dc:	8c 91       	ld	r24, X
   1b0de:	81 11       	cpse	r24, r1
   1b0e0:	03 c0       	rjmp	.+6      	; 0x1b0e8 <lif_add_lif_file+0x74>
    {
        printf("lif_add: userfile is empty\n");
   1b0e2:	82 e0       	ldi	r24, 0x02	; 2
   1b0e4:	92 e3       	ldi	r25, 0x32	; 50
   1b0e6:	f0 cf       	rjmp	.-32     	; 0x1b0c8 <lif_add_lif_file+0x54>
        return(-1);
    }

    if(debuglevel & LIF_DEBUG)
   1b0e8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1b0ec:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1b0f0:	92 ff       	sbrs	r25, 2
   1b0f2:	10 c0       	rjmp	.+32     	; 0x1b114 <lif_add_lif_file+0xa0>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n",
   1b0f4:	ed b7       	in	r30, 0x3d	; 61
   1b0f6:	fe b7       	in	r31, 0x3e	; 62
   1b0f8:	51 87       	std	Z+9, r21	; 0x09
   1b0fa:	40 87       	std	Z+8, r20	; 0x08
   1b0fc:	77 83       	std	Z+7, r23	; 0x07
   1b0fe:	66 83       	std	Z+6, r22	; 0x06
   1b100:	b5 82       	std	Z+5, r11	; 0x05
   1b102:	a4 82       	std	Z+4, r10	; 0x04
   1b104:	83 ed       	ldi	r24, 0xD3	; 211
   1b106:	91 e3       	ldi	r25, 0x31	; 49
   1b108:	a0 e0       	ldi	r26, 0x00	; 0
   1b10a:	81 83       	std	Z+1, r24	; 0x01
   1b10c:	92 83       	std	Z+2, r25	; 0x02
   1b10e:	a3 83       	std	Z+3, r26	; 0x03
   1b110:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
            lifimagename, lifname, userfile);

// open  userfile as LIF image
    ULIF = lif_open_volume(userfile,"rb+");
   1b114:	68 e0       	ldi	r22, 0x08	; 8
   1b116:	79 e0       	ldi	r23, 0x09	; 9
   1b118:	c4 01       	movw	r24, r8
   1b11a:	0e 94 c1 cd 	call	0x19b82	; 0x19b82 <lif_open_volume>
   1b11e:	6c 01       	movw	r12, r24
    if(ULIF == NULL)
   1b120:	00 97       	sbiw	r24, 0x00	; 0
   1b122:	09 f4       	brne	.+2      	; 0x1b126 <lif_add_lif_file+0xb2>
   1b124:	ff c0       	rjmp	.+510    	; 0x1b324 <lif_add_lif_file+0x2b0>
        return(-1);

// find lif file in user image
    index = lif_find_file(ULIF, lifname);
   1b126:	b7 01       	movw	r22, r14
   1b128:	01 d8       	rcall	.-4094   	; 0x1a12c <lif_find_file>
    if(index == -1)
   1b12a:	01 96       	adiw	r24, 0x01	; 1
   1b12c:	a1 f4       	brne	.+40     	; 0x1b156 <lif_add_lif_file+0xe2>
    {
        printf("File not found:%s\n", lifname);
   1b12e:	ed b7       	in	r30, 0x3d	; 61
   1b130:	fe b7       	in	r31, 0x3e	; 62
   1b132:	f5 82       	std	Z+5, r15	; 0x05
   1b134:	e4 82       	std	Z+4, r14	; 0x04
   1b136:	80 ec       	ldi	r24, 0xC0	; 192
   1b138:	91 e3       	ldi	r25, 0x31	; 49
   1b13a:	a0 e0       	ldi	r26, 0x00	; 0
   1b13c:	81 83       	std	Z+1, r24	; 0x01
   1b13e:	92 83       	std	Z+2, r25	; 0x02
   1b140:	a3 83       	std	Z+3, r26	; 0x03
   1b142:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b146:	c6 01       	movw	r24, r12
   1b148:	0e 94 04 c7 	call	0x18e08	; 0x18e08 <lif_close_volume>
    index = lif_find_file(ULIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(ULIF);
        return(0);
   1b14c:	60 e0       	ldi	r22, 0x00	; 0
   1b14e:	70 e0       	ldi	r23, 0x00	; 0
   1b150:	80 e0       	ldi	r24, 0x00	; 0
   1b152:	90 e0       	ldi	r25, 0x00	; 0
   1b154:	ff c0       	rjmp	.+510    	; 0x1b354 <lif_add_lif_file+0x2e0>
    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1b156:	68 e0       	ldi	r22, 0x08	; 8
   1b158:	79 e0       	ldi	r23, 0x09	; 9
   1b15a:	c5 01       	movw	r24, r10
   1b15c:	0e 94 c1 cd 	call	0x19b82	; 0x19b82 <lif_open_volume>
   1b160:	7c 01       	movw	r14, r24
    if(LIF == NULL)
   1b162:	00 97       	sbiw	r24, 0x00	; 0
   1b164:	09 f4       	brne	.+2      	; 0x1b168 <lif_add_lif_file+0xf4>
   1b166:	de c0       	rjmp	.+444    	; 0x1b324 <lif_add_lif_file+0x2b0>
        return(-1);

// Now find a new free record that is big enough
    index = lif_newdir(LIF, ULIF->DIR.FileSectors);
   1b168:	f6 01       	movw	r30, r12
   1b16a:	e0 5a       	subi	r30, 0xA0	; 160
   1b16c:	ff 4f       	sbci	r31, 0xFF	; 255
   1b16e:	40 81       	ld	r20, Z
   1b170:	51 81       	ldd	r21, Z+1	; 0x01
   1b172:	62 81       	ldd	r22, Z+2	; 0x02
   1b174:	73 81       	ldd	r23, Z+3	; 0x03
   1b176:	0e 94 61 cc 	call	0x198c2	; 0x198c2 <lif_newdir>
   1b17a:	ca 5e       	subi	r28, 0xEA	; 234
   1b17c:	de 4f       	sbci	r29, 0xFE	; 254
   1b17e:	99 83       	std	Y+1, r25	; 0x01
   1b180:	88 83       	st	Y, r24
   1b182:	c6 51       	subi	r28, 0x16	; 22
   1b184:	d1 40       	sbci	r29, 0x01	; 1
    if(index == -1)
   1b186:	01 96       	adiw	r24, 0x01	; 1
   1b188:	79 f4       	brne	.+30     	; 0x1b1a8 <lif_add_lif_file+0x134>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n",
   1b18a:	ed b7       	in	r30, 0x3d	; 61
   1b18c:	fe b7       	in	r31, 0x3e	; 62
   1b18e:	97 82       	std	Z+7, r9	; 0x07
   1b190:	86 82       	std	Z+6, r8	; 0x06
   1b192:	b5 82       	std	Z+5, r11	; 0x05
   1b194:	a4 82       	std	Z+4, r10	; 0x04
   1b196:	80 e9       	ldi	r24, 0x90	; 144
   1b198:	91 e3       	ldi	r25, 0x31	; 49
   1b19a:	a0 e0       	ldi	r26, 0x00	; 0
   1b19c:	81 83       	std	Z+1, r24	; 0x01
   1b19e:	92 83       	std	Z+2, r25	; 0x02
   1b1a0:	a3 83       	std	Z+3, r26	; 0x03
   1b1a2:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   1b1a6:	a8 c0       	rjmp	.+336    	; 0x1b2f8 <lif_add_lif_file+0x284>
        lif_closedir(ULIF);
        return(-1);
    }

// Save start sector
    start = LIF->DIR.FileStartSector;
   1b1a8:	c7 01       	movw	r24, r14
   1b1aa:	84 5a       	subi	r24, 0xA4	; 164
   1b1ac:	9f 4f       	sbci	r25, 0xFF	; 255
   1b1ae:	dc 01       	movw	r26, r24
   1b1b0:	4d 91       	ld	r20, X+
   1b1b2:	5d 91       	ld	r21, X+
   1b1b4:	6d 91       	ld	r22, X+
   1b1b6:	7c 91       	ld	r23, X
   1b1b8:	13 97       	sbiw	r26, 0x03	; 3

// Copy user image directory record to master image directory record
    LIF->DIR = ULIF->DIR;
   1b1ba:	21 e2       	ldi	r18, 0x21	; 33
   1b1bc:	f6 01       	movw	r30, r12
   1b1be:	e1 5b       	subi	r30, 0xB1	; 177
   1b1c0:	ff 4f       	sbci	r31, 0xFF	; 255
   1b1c2:	1d 97       	sbiw	r26, 0x0d	; 13
   1b1c4:	01 90       	ld	r0, Z+
   1b1c6:	0d 92       	st	X+, r0
   1b1c8:	2a 95       	dec	r18
   1b1ca:	e1 f7       	brne	.-8      	; 0x1b1c4 <lif_add_lif_file+0x150>

// Restore FileStartSector
    LIF->DIR.FileStartSector = start;
   1b1cc:	fc 01       	movw	r30, r24
   1b1ce:	40 83       	st	Z, r20
   1b1d0:	51 83       	std	Z+1, r21	; 0x01
   1b1d2:	62 83       	std	Z+2, r22	; 0x02
   1b1d4:	73 83       	std	Z+3, r23	; 0x03

// Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b1d6:	b6 2f       	mov	r27, r22
   1b1d8:	a5 2f       	mov	r26, r21
   1b1da:	94 2f       	mov	r25, r20
   1b1dc:	88 27       	eor	r24, r24
   1b1de:	c2 5f       	subi	r28, 0xF2	; 242
   1b1e0:	de 4f       	sbci	r29, 0xFE	; 254
   1b1e2:	88 83       	st	Y, r24
   1b1e4:	99 83       	std	Y+1, r25	; 0x01
   1b1e6:	aa 83       	std	Y+2, r26	; 0x02
   1b1e8:	bb 83       	std	Y+3, r27	; 0x03
   1b1ea:	ce 50       	subi	r28, 0x0E	; 14
   1b1ec:	d1 40       	sbci	r29, 0x01	; 1
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b1ee:	f6 01       	movw	r30, r12
   1b1f0:	e4 5a       	subi	r30, 0xA4	; 164
   1b1f2:	ff 4f       	sbci	r31, 0xFF	; 255
   1b1f4:	80 81       	ld	r24, Z
   1b1f6:	91 81       	ldd	r25, Z+1	; 0x01
   1b1f8:	a2 81       	ldd	r26, Z+2	; 0x02
   1b1fa:	b3 81       	ldd	r27, Z+3	; 0x03
   1b1fc:	22 27       	eor	r18, r18
   1b1fe:	38 2f       	mov	r19, r24
   1b200:	49 2f       	mov	r20, r25
   1b202:	5a 2f       	mov	r21, r26
   1b204:	ce 5e       	subi	r28, 0xEE	; 238
   1b206:	de 4f       	sbci	r29, 0xFE	; 254
   1b208:	28 83       	st	Y, r18
   1b20a:	39 83       	std	Y+1, r19	; 0x01
   1b20c:	4a 83       	std	Y+2, r20	; 0x02
   1b20e:	5b 83       	std	Y+3, r21	; 0x03
   1b210:	c2 51       	subi	r28, 0x12	; 18
   1b212:	d1 40       	sbci	r29, 0x01	; 1
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b214:	21 2c       	mov	r2, r1
   1b216:	31 2c       	mov	r3, r1

// Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
   1b218:	81 2c       	mov	r8, r1
   1b21a:	91 2c       	mov	r9, r1
   1b21c:	54 01       	movw	r10, r8
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b21e:	a7 01       	movw	r20, r14
   1b220:	40 5a       	subi	r20, 0xA0	; 160
   1b222:	5f 4f       	sbci	r21, 0xFF	; 255
   1b224:	c4 5e       	subi	r28, 0xE4	; 228
   1b226:	de 4f       	sbci	r29, 0xFE	; 254
   1b228:	59 83       	std	Y+1, r21	; 0x01
   1b22a:	48 83       	st	Y, r20
   1b22c:	cc 51       	subi	r28, 0x1C	; 28
   1b22e:	d1 40       	sbci	r29, 0x01	; 1
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
        printf("\tWrote: %8ld\r", bytes);
   1b230:	82 e8       	ldi	r24, 0x82	; 130
   1b232:	91 e3       	ldi	r25, 0x31	; 49
   1b234:	2c 01       	movw	r4, r24
   1b236:	61 2c       	mov	r6, r1
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b238:	27 c0       	rjmp	.+78     	; 0x1b288 <lif_add_lif_file+0x214>
            lif_closedir(ULIF);
            return(-1);
        }

// Write
        size = lif_write(LIF, buf, offset, LIF_SECTOR_SIZE);
   1b23a:	00 e0       	ldi	r16, 0x00	; 0
   1b23c:	11 e0       	ldi	r17, 0x01	; 1
   1b23e:	c8 5e       	subi	r28, 0xE8	; 232
   1b240:	de 4f       	sbci	r29, 0xFE	; 254
   1b242:	28 81       	ld	r18, Y
   1b244:	39 81       	ldd	r19, Y+1	; 0x01
   1b246:	4a 81       	ldd	r20, Y+2	; 0x02
   1b248:	5b 81       	ldd	r21, Y+3	; 0x03
   1b24a:	c8 51       	subi	r28, 0x18	; 24
   1b24c:	d1 40       	sbci	r29, 0x01	; 1
   1b24e:	be 01       	movw	r22, r28
   1b250:	66 5f       	subi	r22, 0xF6	; 246
   1b252:	7f 4f       	sbci	r23, 0xFF	; 255
   1b254:	c7 01       	movw	r24, r14
   1b256:	0e 94 8b be 	call	0x17d16	; 0x17d16 <lif_write>
        if(size < LIF_SECTOR_SIZE)
   1b25a:	8f 3f       	cpi	r24, 0xFF	; 255
   1b25c:	91 05       	cpc	r25, r1
   1b25e:	09 f0       	breq	.+2      	; 0x1b262 <lif_add_lif_file+0x1ee>
   1b260:	0c f4       	brge	.+2      	; 0x1b264 <lif_add_lif_file+0x1f0>
   1b262:	4a c0       	rjmp	.+148    	; 0x1b2f8 <lif_add_lif_file+0x284>
            lif_closedir(ULIF);
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
   1b264:	5f ef       	ldi	r21, 0xFF	; 255
   1b266:	95 1a       	sub	r9, r21
   1b268:	a5 0a       	sbc	r10, r21
   1b26a:	b5 0a       	sbc	r11, r21
        printf("\tWrote: %8ld\r", bytes);
   1b26c:	ed b7       	in	r30, 0x3d	; 61
   1b26e:	fe b7       	in	r31, 0x3e	; 62
   1b270:	84 82       	std	Z+4, r8	; 0x04
   1b272:	95 82       	std	Z+5, r9	; 0x05
   1b274:	a6 82       	std	Z+6, r10	; 0x06
   1b276:	b7 82       	std	Z+7, r11	; 0x07
   1b278:	41 82       	std	Z+1, r4	; 0x01
   1b27a:	52 82       	std	Z+2, r5	; 0x02
   1b27c:	63 82       	std	Z+3, r6	; 0x03
   1b27e:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b282:	ff ef       	ldi	r31, 0xFF	; 255
   1b284:	2f 1a       	sub	r2, r31
   1b286:	3f 0a       	sbc	r3, r31
   1b288:	ce 5e       	subi	r28, 0xEE	; 238
   1b28a:	de 4f       	sbci	r29, 0xFE	; 254
   1b28c:	28 81       	ld	r18, Y
   1b28e:	39 81       	ldd	r19, Y+1	; 0x01
   1b290:	4a 81       	ldd	r20, Y+2	; 0x02
   1b292:	5b 81       	ldd	r21, Y+3	; 0x03
   1b294:	c2 51       	subi	r28, 0x12	; 18
   1b296:	d1 40       	sbci	r29, 0x01	; 1
   1b298:	28 0d       	add	r18, r8
   1b29a:	39 1d       	adc	r19, r9
   1b29c:	4a 1d       	adc	r20, r10
   1b29e:	5b 1d       	adc	r21, r11
   1b2a0:	c2 5f       	subi	r28, 0xF2	; 242
   1b2a2:	de 4f       	sbci	r29, 0xFE	; 254
   1b2a4:	88 81       	ld	r24, Y
   1b2a6:	99 81       	ldd	r25, Y+1	; 0x01
   1b2a8:	aa 81       	ldd	r26, Y+2	; 0x02
   1b2aa:	bb 81       	ldd	r27, Y+3	; 0x03
   1b2ac:	ce 50       	subi	r28, 0x0E	; 14
   1b2ae:	d1 40       	sbci	r29, 0x01	; 1
   1b2b0:	88 0d       	add	r24, r8
   1b2b2:	99 1d       	adc	r25, r9
   1b2b4:	aa 1d       	adc	r26, r10
   1b2b6:	bb 1d       	adc	r27, r11
   1b2b8:	c8 5e       	subi	r28, 0xE8	; 232
   1b2ba:	de 4f       	sbci	r29, 0xFE	; 254
   1b2bc:	88 83       	st	Y, r24
   1b2be:	99 83       	std	Y+1, r25	; 0x01
   1b2c0:	aa 83       	std	Y+2, r26	; 0x02
   1b2c2:	bb 83       	std	Y+3, r27	; 0x03
   1b2c4:	c8 51       	subi	r28, 0x18	; 24
   1b2c6:	d1 40       	sbci	r29, 0x01	; 1
   1b2c8:	c4 5e       	subi	r28, 0xE4	; 228
   1b2ca:	de 4f       	sbci	r29, 0xFE	; 254
   1b2cc:	a8 81       	ld	r26, Y
   1b2ce:	b9 81       	ldd	r27, Y+1	; 0x01
   1b2d0:	cc 51       	subi	r28, 0x1C	; 28
   1b2d2:	d1 40       	sbci	r29, 0x01	; 1
   1b2d4:	8d 91       	ld	r24, X+
   1b2d6:	9c 91       	ld	r25, X
   1b2d8:	28 16       	cp	r2, r24
   1b2da:	39 06       	cpc	r3, r25
   1b2dc:	94 f4       	brge	.+36     	; 0x1b302 <lif_add_lif_file+0x28e>
    {
// Read
        size = lif_read(ULIF, buf, uoffset, LIF_SECTOR_SIZE);
   1b2de:	00 e0       	ldi	r16, 0x00	; 0
   1b2e0:	11 e0       	ldi	r17, 0x01	; 1
   1b2e2:	be 01       	movw	r22, r28
   1b2e4:	66 5f       	subi	r22, 0xF6	; 246
   1b2e6:	7f 4f       	sbci	r23, 0xFF	; 255
   1b2e8:	c6 01       	movw	r24, r12
   1b2ea:	0e 94 38 be 	call	0x17c70	; 0x17c70 <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1b2ee:	6f 3f       	cpi	r22, 0xFF	; 255
   1b2f0:	71 05       	cpc	r23, r1
   1b2f2:	11 f0       	breq	.+4      	; 0x1b2f8 <lif_add_lif_file+0x284>
   1b2f4:	0c f0       	brlt	.+2      	; 0x1b2f8 <lif_add_lif_file+0x284>
   1b2f6:	a1 cf       	rjmp	.-190    	; 0x1b23a <lif_add_lif_file+0x1c6>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b2f8:	c7 01       	movw	r24, r14
   1b2fa:	0e 94 04 c7 	call	0x18e08	; 0x18e08 <lif_close_volume>
   1b2fe:	c6 01       	movw	r24, r12
   1b300:	0f c0       	rjmp	.+30     	; 0x1b320 <lif_add_lif_file+0x2ac>
   1b302:	c6 01       	movw	r24, r12
   1b304:	0e 94 04 c7 	call	0x18e08	; 0x18e08 <lif_close_volume>
        printf("\tWrote: %8ld\r", bytes);
    }
    lif_closedir(ULIF);

// Write directory record
    if( !lif_writedirindex(LIF,index))
   1b308:	ca 5e       	subi	r28, 0xEA	; 234
   1b30a:	de 4f       	sbci	r29, 0xFE	; 254
   1b30c:	68 81       	ld	r22, Y
   1b30e:	79 81       	ldd	r23, Y+1	; 0x01
   1b310:	c6 51       	subi	r28, 0x16	; 22
   1b312:	d1 40       	sbci	r29, 0x01	; 1
   1b314:	c7 01       	movw	r24, r14
   1b316:	0e 94 f9 c7 	call	0x18ff2	; 0x18ff2 <lif_writedirindex>
   1b31a:	89 2b       	or	r24, r25
   1b31c:	41 f4       	brne	.+16     	; 0x1b32e <lif_add_lif_file+0x2ba>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b31e:	c7 01       	movw	r24, r14
   1b320:	0e 94 04 c7 	call	0x18e08	; 0x18e08 <lif_close_volume>

// Write directory record
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
   1b324:	6f ef       	ldi	r22, 0xFF	; 255
   1b326:	7f ef       	ldi	r23, 0xFF	; 255
   1b328:	8f ef       	ldi	r24, 0xFF	; 255
   1b32a:	9f ef       	ldi	r25, 0xFF	; 255
   1b32c:	13 c0       	rjmp	.+38     	; 0x1b354 <lif_add_lif_file+0x2e0>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b32e:	c7 01       	movw	r24, r14
   1b330:	0e 94 04 c7 	call	0x18e08	; 0x18e08 <lif_close_volume>
    {
        lif_closedir(LIF);
        return(-1);
    }
    lif_closedir(LIF);
    printf("\tWrote: %8ld\n", bytes);
   1b334:	ed b7       	in	r30, 0x3d	; 61
   1b336:	fe b7       	in	r31, 0x3e	; 62
   1b338:	84 82       	std	Z+4, r8	; 0x04
   1b33a:	95 82       	std	Z+5, r9	; 0x05
   1b33c:	a6 82       	std	Z+6, r10	; 0x06
   1b33e:	b7 82       	std	Z+7, r11	; 0x07
   1b340:	84 e7       	ldi	r24, 0x74	; 116
   1b342:	91 e3       	ldi	r25, 0x31	; 49
   1b344:	a0 e0       	ldi	r26, 0x00	; 0
   1b346:	81 83       	std	Z+1, r24	; 0x01
   1b348:	92 83       	std	Z+2, r25	; 0x02
   1b34a:	a3 83       	std	Z+3, r26	; 0x03
   1b34c:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    return(bytes);
   1b350:	b4 01       	movw	r22, r8
   1b352:	c5 01       	movw	r24, r10
}
   1b354:	c3 5e       	subi	r28, 0xE3	; 227
   1b356:	de 4f       	sbci	r29, 0xFE	; 254
   1b358:	0f b6       	in	r0, 0x3f	; 63
   1b35a:	f8 94       	cli
   1b35c:	de bf       	out	0x3e, r29	; 62
   1b35e:	0f be       	out	0x3f, r0	; 63
   1b360:	cd bf       	out	0x3d, r28	; 61
   1b362:	df 91       	pop	r29
   1b364:	cf 91       	pop	r28
   1b366:	1f 91       	pop	r17
   1b368:	0f 91       	pop	r16
   1b36a:	ff 90       	pop	r15
   1b36c:	ef 90       	pop	r14
   1b36e:	df 90       	pop	r13
   1b370:	cf 90       	pop	r12
   1b372:	bf 90       	pop	r11
   1b374:	af 90       	pop	r10
   1b376:	9f 90       	pop	r9
   1b378:	8f 90       	pop	r8
   1b37a:	6f 90       	pop	r6
   1b37c:	5f 90       	pop	r5
   1b37e:	4f 90       	pop	r4
   1b380:	3f 90       	pop	r3
   1b382:	2f 90       	pop	r2
   1b384:	08 95       	ret

0001b386 <lif_del_file>:
/// @param[in] lifimagename: LIF image name
/// @param[in] lifname: LIF file name
/// @return 1 if deleted, 0 if not found, -1 error
MEMSPACE
int lif_del_file(char *lifimagename, char *lifname)
{
   1b386:	ef 92       	push	r14
   1b388:	ff 92       	push	r15
   1b38a:	0f 93       	push	r16
   1b38c:	1f 93       	push	r17
   1b38e:	cf 93       	push	r28
   1b390:	df 93       	push	r29
   1b392:	ad b7       	in	r26, 0x3d	; 61
   1b394:	be b7       	in	r27, 0x3e	; 62
   1b396:	17 97       	sbiw	r26, 0x07	; 7
   1b398:	0f b6       	in	r0, 0x3f	; 63
   1b39a:	f8 94       	cli
   1b39c:	be bf       	out	0x3e, r27	; 62
   1b39e:	0f be       	out	0x3f, r0	; 63
   1b3a0:	ad bf       	out	0x3d, r26	; 61
   1b3a2:	7c 01       	movw	r14, r24
   1b3a4:	8b 01       	movw	r16, r22
    lif_t *LIF;
    int index;

    if(!*lifimagename)
   1b3a6:	fc 01       	movw	r30, r24
   1b3a8:	80 81       	ld	r24, Z
   1b3aa:	81 11       	cpse	r24, r1
   1b3ac:	03 c0       	rjmp	.+6      	; 0x1b3b4 <lif_del_file+0x2e>
    {
        printf("lif_del_file: lifimagename is empty\n");
   1b3ae:	8f e4       	ldi	r24, 0x4F	; 79
   1b3b0:	91 e3       	ldi	r25, 0x31	; 49
   1b3b2:	06 c0       	rjmp	.+12     	; 0x1b3c0 <lif_del_file+0x3a>
        return(-1);
    }
    if(!*lifname)
   1b3b4:	fb 01       	movw	r30, r22
   1b3b6:	80 81       	ld	r24, Z
   1b3b8:	81 11       	cpse	r24, r1
   1b3ba:	0b c0       	rjmp	.+22     	; 0x1b3d2 <lif_del_file+0x4c>
    {
        printf("lif_del_file: lifname is empty\n");
   1b3bc:	8f e2       	ldi	r24, 0x2F	; 47
   1b3be:	91 e3       	ldi	r25, 0x31	; 49
   1b3c0:	a0 e0       	ldi	r26, 0x00	; 0
   1b3c2:	ed b7       	in	r30, 0x3d	; 61
   1b3c4:	fe b7       	in	r31, 0x3e	; 62
   1b3c6:	81 83       	std	Z+1, r24	; 0x01
   1b3c8:	92 83       	std	Z+2, r25	; 0x02
   1b3ca:	a3 83       	std	Z+3, r26	; 0x03
   1b3cc:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   1b3d0:	68 c0       	rjmp	.+208    	; 0x1b4a2 <lif_del_file+0x11c>
        return(-1);
    }
    if(debuglevel & LIF_DEBUG)
   1b3d2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1b3d6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1b3da:	92 ff       	sbrs	r25, 2
   1b3dc:	0e c0       	rjmp	.+28     	; 0x1b3fa <lif_del_file+0x74>
        printf("LIF image:[%s], LIF name:[%s]\n",
   1b3de:	ed b7       	in	r30, 0x3d	; 61
   1b3e0:	fe b7       	in	r31, 0x3e	; 62
   1b3e2:	77 83       	std	Z+7, r23	; 0x07
   1b3e4:	66 83       	std	Z+6, r22	; 0x06
   1b3e6:	f5 82       	std	Z+5, r15	; 0x05
   1b3e8:	e4 82       	std	Z+4, r14	; 0x04
   1b3ea:	80 e1       	ldi	r24, 0x10	; 16
   1b3ec:	91 e3       	ldi	r25, 0x31	; 49
   1b3ee:	a0 e0       	ldi	r26, 0x00	; 0
   1b3f0:	81 83       	std	Z+1, r24	; 0x01
   1b3f2:	92 83       	std	Z+2, r25	; 0x02
   1b3f4:	a3 83       	std	Z+3, r26	; 0x03
   1b3f6:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
            lifimagename, lifname);

    LIF = lif_open_volume(lifimagename,"rb+");
   1b3fa:	68 e0       	ldi	r22, 0x08	; 8
   1b3fc:	79 e0       	ldi	r23, 0x09	; 9
   1b3fe:	c7 01       	movw	r24, r14
   1b400:	0e 94 c1 cd 	call	0x19b82	; 0x19b82 <lif_open_volume>
   1b404:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1b406:	00 97       	sbiw	r24, 0x00	; 0
   1b408:	09 f4       	brne	.+2      	; 0x1b40c <lif_del_file+0x86>
   1b40a:	4b c0       	rjmp	.+150    	; 0x1b4a2 <lif_del_file+0x11c>
        return(-1);

// Now find file record
    index = lif_find_file(LIF, lifname);
   1b40c:	b8 01       	movw	r22, r16
   1b40e:	0e 94 96 d0 	call	0x1a12c	; 0x1a12c <lif_find_file>
    if(index == -1)
   1b412:	8f 3f       	cpi	r24, 0xFF	; 255
   1b414:	ff ef       	ldi	r31, 0xFF	; 255
   1b416:	9f 07       	cpc	r25, r31
   1b418:	a1 f4       	brne	.+40     	; 0x1b442 <lif_del_file+0xbc>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b41a:	ce 01       	movw	r24, r28
   1b41c:	0e 94 04 c7 	call	0x18e08	; 0x18e08 <lif_close_volume>
// Now find file record
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        lif_closedir(LIF);
        printf("LIF image:[%s] lif name:[%s] not found\n", lifimagename, lifname);
   1b420:	ed b7       	in	r30, 0x3d	; 61
   1b422:	fe b7       	in	r31, 0x3e	; 62
   1b424:	17 83       	std	Z+7, r17	; 0x07
   1b426:	06 83       	std	Z+6, r16	; 0x06
   1b428:	f5 82       	std	Z+5, r15	; 0x05
   1b42a:	e4 82       	std	Z+4, r14	; 0x04
   1b42c:	88 ee       	ldi	r24, 0xE8	; 232
   1b42e:	90 e3       	ldi	r25, 0x30	; 48
   1b430:	a0 e0       	ldi	r26, 0x00	; 0
   1b432:	81 83       	std	Z+1, r24	; 0x01
   1b434:	92 83       	std	Z+2, r25	; 0x02
   1b436:	a3 83       	std	Z+3, r26	; 0x03
   1b438:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
        return(0);
   1b43c:	80 e0       	ldi	r24, 0x00	; 0
   1b43e:	90 e0       	ldi	r25, 0x00	; 0
   1b440:	32 c0       	rjmp	.+100    	; 0x1b4a6 <lif_del_file+0x120>
    }

// IF the next record is EOF then update EOF
    if(index >= LIF->EOFindex-1)
   1b442:	2a a1       	ldd	r18, Y+34	; 0x22
   1b444:	3b a1       	ldd	r19, Y+35	; 0x23
   1b446:	21 50       	subi	r18, 0x01	; 1
   1b448:	31 09       	sbc	r19, r1
   1b44a:	fe 01       	movw	r30, r28
   1b44c:	e6 5a       	subi	r30, 0xA6	; 166
   1b44e:	ff 4f       	sbci	r31, 0xFF	; 255
   1b450:	82 17       	cp	r24, r18
   1b452:	93 07       	cpc	r25, r19
   1b454:	2c f0       	brlt	.+10     	; 0x1b460 <lif_del_file+0xda>
        LIF->DIR.FileType = 0xffff;
   1b456:	2f ef       	ldi	r18, 0xFF	; 255
   1b458:	3f ef       	ldi	r19, 0xFF	; 255
   1b45a:	31 83       	std	Z+1, r19	; 0x01
   1b45c:	20 83       	st	Z, r18
   1b45e:	02 c0       	rjmp	.+4      	; 0x1b464 <lif_del_file+0xde>
    else
        LIF->DIR.FileType = 0;
   1b460:	11 82       	std	Z+1, r1	; 0x01
   1b462:	10 82       	st	Z, r1

// re-Write directory record
    if( !lif_writedirindex(LIF,index) )
   1b464:	bc 01       	movw	r22, r24
   1b466:	ce 01       	movw	r24, r28
   1b468:	0e 94 f9 c7 	call	0x18ff2	; 0x18ff2 <lif_writedirindex>
   1b46c:	89 2b       	or	r24, r25
   1b46e:	21 f4       	brne	.+8      	; 0x1b478 <lif_del_file+0xf2>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b470:	ce 01       	movw	r24, r28
   1b472:	0e 94 04 c7 	call	0x18e08	; 0x18e08 <lif_close_volume>
   1b476:	15 c0       	rjmp	.+42     	; 0x1b4a2 <lif_del_file+0x11c>
    {
        lif_closedir(LIF);
        return(-1);
    }

    lif_updatefree(LIF);
   1b478:	ce 01       	movw	r24, r28
   1b47a:	0e 94 6d c8 	call	0x190da	; 0x190da <lif_updatefree>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b47e:	ce 01       	movw	r24, r28
   1b480:	0e 94 04 c7 	call	0x18e08	; 0x18e08 <lif_close_volume>
    }

    lif_updatefree(LIF);

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);
   1b484:	ed b7       	in	r30, 0x3d	; 61
   1b486:	fe b7       	in	r31, 0x3e	; 62
   1b488:	15 83       	std	Z+5, r17	; 0x05
   1b48a:	04 83       	std	Z+4, r16	; 0x04
   1b48c:	89 ed       	ldi	r24, 0xD9	; 217
   1b48e:	90 e3       	ldi	r25, 0x30	; 48
   1b490:	a0 e0       	ldi	r26, 0x00	; 0
   1b492:	81 83       	std	Z+1, r24	; 0x01
   1b494:	92 83       	std	Z+2, r25	; 0x02
   1b496:	a3 83       	std	Z+3, r26	; 0x03
   1b498:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>

    return(1);
   1b49c:	81 e0       	ldi	r24, 0x01	; 1
   1b49e:	90 e0       	ldi	r25, 0x00	; 0
   1b4a0:	02 c0       	rjmp	.+4      	; 0x1b4a6 <lif_del_file+0x120>
        printf("LIF image:[%s], LIF name:[%s]\n",
            lifimagename, lifname);

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1);
   1b4a2:	8f ef       	ldi	r24, 0xFF	; 255
   1b4a4:	9f ef       	ldi	r25, 0xFF	; 255

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);

    return(1);
}
   1b4a6:	cd b7       	in	r28, 0x3d	; 61
   1b4a8:	de b7       	in	r29, 0x3e	; 62
   1b4aa:	27 96       	adiw	r28, 0x07	; 7
   1b4ac:	e6 e0       	ldi	r30, 0x06	; 6
   1b4ae:	0c 94 31 e3 	jmp	0x1c662	; 0x1c662 <__epilogue_restores__+0x18>

0001b4b2 <lif_rename_file>:
/// @param[in] oldlifname: old LIF file name
/// @param[in] newlifname: new LIF file name
/// @return 1 if renamed, 0 if not found, -1 error
MEMSPACE
int lif_rename_file(char *lifimagename, char *oldlifname, char *newlifname)
{
   1b4b2:	a7 e0       	ldi	r26, 0x07	; 7
   1b4b4:	b0 e0       	ldi	r27, 0x00	; 0
   1b4b6:	ef e5       	ldi	r30, 0x5F	; 95
   1b4b8:	fa ed       	ldi	r31, 0xDA	; 218
   1b4ba:	0c 94 11 e3 	jmp	0x1c622	; 0x1c622 <__prologue_saves__+0x10>
   1b4be:	6c 01       	movw	r12, r24
   1b4c0:	8b 01       	movw	r16, r22
   1b4c2:	7a 01       	movw	r14, r20
    int index;
    lif_t *LIF;

    if(!*lifimagename)
   1b4c4:	fc 01       	movw	r30, r24
   1b4c6:	80 81       	ld	r24, Z
   1b4c8:	81 11       	cpse	r24, r1
   1b4ca:	03 c0       	rjmp	.+6      	; 0x1b4d2 <lif_rename_file+0x20>
    {
        printf("lif_rename_file: lifimagename is empty\n");
   1b4cc:	81 eb       	ldi	r24, 0xB1	; 177
   1b4ce:	90 e3       	ldi	r25, 0x30	; 48
   1b4d0:	06 c0       	rjmp	.+12     	; 0x1b4de <lif_rename_file+0x2c>
        return(-1);
    }
    if(!*oldlifname)
   1b4d2:	fb 01       	movw	r30, r22
   1b4d4:	80 81       	ld	r24, Z
   1b4d6:	81 11       	cpse	r24, r1
   1b4d8:	0b c0       	rjmp	.+22     	; 0x1b4f0 <lif_rename_file+0x3e>
    {
        printf("lif_rename_file: old lifname is empty\n");
   1b4da:	8a e8       	ldi	r24, 0x8A	; 138
   1b4dc:	90 e3       	ldi	r25, 0x30	; 48
   1b4de:	a0 e0       	ldi	r26, 0x00	; 0
   1b4e0:	ed b7       	in	r30, 0x3d	; 61
   1b4e2:	fe b7       	in	r31, 0x3e	; 62
   1b4e4:	81 83       	std	Z+1, r24	; 0x01
   1b4e6:	92 83       	std	Z+2, r25	; 0x02
   1b4e8:	a3 83       	std	Z+3, r26	; 0x03
   1b4ea:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   1b4ee:	58 c0       	rjmp	.+176    	; 0x1b5a0 <lif_rename_file+0xee>
        return(-1);
    }
    if(!*newlifname)
   1b4f0:	fa 01       	movw	r30, r20
   1b4f2:	80 81       	ld	r24, Z
   1b4f4:	81 11       	cpse	r24, r1
   1b4f6:	03 c0       	rjmp	.+6      	; 0x1b4fe <lif_rename_file+0x4c>
    {
        printf("lif_rename_file: new lifname is empty\n");
   1b4f8:	83 e6       	ldi	r24, 0x63	; 99
   1b4fa:	90 e3       	ldi	r25, 0x30	; 48
   1b4fc:	f0 cf       	rjmp	.-32     	; 0x1b4de <lif_rename_file+0x2c>
        return(-1);
    }

    if(!lif_checkname(newlifname))
   1b4fe:	ca 01       	movw	r24, r20
   1b500:	0e 94 53 bf 	call	0x17ea6	; 0x17ea6 <lif_checkname>
   1b504:	89 2b       	or	r24, r25
   1b506:	19 f4       	brne	.+6      	; 0x1b50e <lif_rename_file+0x5c>
    {
        printf("lif_rename_file: new lifname contains bad characters\n");
   1b508:	8d e2       	ldi	r24, 0x2D	; 45
   1b50a:	90 e3       	ldi	r25, 0x30	; 48
   1b50c:	e8 cf       	rjmp	.-48     	; 0x1b4de <lif_rename_file+0x2c>
        return(-1);

    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1b50e:	68 e0       	ldi	r22, 0x08	; 8
   1b510:	79 e0       	ldi	r23, 0x09	; 9
   1b512:	c6 01       	movw	r24, r12
   1b514:	0e 94 c1 cd 	call	0x19b82	; 0x19b82 <lif_open_volume>
   1b518:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1b51a:	00 97       	sbiw	r24, 0x00	; 0
   1b51c:	09 f4       	brne	.+2      	; 0x1b520 <lif_rename_file+0x6e>
   1b51e:	40 c0       	rjmp	.+128    	; 0x1b5a0 <lif_rename_file+0xee>
        return(-1);

// Now find file record
    index = lif_find_file(LIF, oldlifname);
   1b520:	b8 01       	movw	r22, r16
   1b522:	0e 94 96 d0 	call	0x1a12c	; 0x1a12c <lif_find_file>
   1b526:	5c 01       	movw	r10, r24
    if(index == -1)
   1b528:	01 96       	adiw	r24, 0x01	; 1
   1b52a:	a1 f4       	brne	.+40     	; 0x1b554 <lif_rename_file+0xa2>
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
   1b52c:	ed b7       	in	r30, 0x3d	; 61
   1b52e:	fe b7       	in	r31, 0x3e	; 62
   1b530:	17 83       	std	Z+7, r17	; 0x07
   1b532:	06 83       	std	Z+6, r16	; 0x06
   1b534:	d5 82       	std	Z+5, r13	; 0x05
   1b536:	c4 82       	std	Z+4, r12	; 0x04
   1b538:	84 e0       	ldi	r24, 0x04	; 4
   1b53a:	90 e3       	ldi	r25, 0x30	; 48
   1b53c:	a0 e0       	ldi	r26, 0x00	; 0
   1b53e:	81 83       	std	Z+1, r24	; 0x01
   1b540:	92 83       	std	Z+2, r25	; 0x02
   1b542:	a3 83       	std	Z+3, r26	; 0x03
   1b544:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b548:	ce 01       	movw	r24, r28
   1b54a:	0e 94 04 c7 	call	0x18e08	; 0x18e08 <lif_close_volume>
    index = lif_find_file(LIF, oldlifname);
    if(index == -1)
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
        lif_closedir(LIF);
        return(0);
   1b54e:	80 e0       	ldi	r24, 0x00	; 0
   1b550:	90 e0       	ldi	r25, 0x00	; 0
   1b552:	28 c0       	rjmp	.+80     	; 0x1b5a4 <lif_rename_file+0xf2>
    }
    lif_fixname(LIF->DIR.filename, newlifname, 10);
   1b554:	4a e0       	ldi	r20, 0x0A	; 10
   1b556:	50 e0       	ldi	r21, 0x00	; 0
   1b558:	b7 01       	movw	r22, r14
   1b55a:	ce 01       	movw	r24, r28
   1b55c:	81 5b       	subi	r24, 0xB1	; 177
   1b55e:	9f 4f       	sbci	r25, 0xFF	; 255
   1b560:	0e 94 8d bf 	call	0x17f1a	; 0x17f1a <lif_fixname>

// re-Write directory record
    if( !lif_writedirindex(LIF,index))
   1b564:	b5 01       	movw	r22, r10
   1b566:	ce 01       	movw	r24, r28
   1b568:	0e 94 f9 c7 	call	0x18ff2	; 0x18ff2 <lif_writedirindex>
   1b56c:	89 2b       	or	r24, r25
   1b56e:	21 f4       	brne	.+8      	; 0x1b578 <lif_rename_file+0xc6>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b570:	ce 01       	movw	r24, r28
   1b572:	0e 94 04 c7 	call	0x18e08	; 0x18e08 <lif_close_volume>
   1b576:	14 c0       	rjmp	.+40     	; 0x1b5a0 <lif_rename_file+0xee>
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);
   1b578:	ed b7       	in	r30, 0x3d	; 61
   1b57a:	fe b7       	in	r31, 0x3e	; 62
   1b57c:	f7 82       	std	Z+7, r15	; 0x07
   1b57e:	e6 82       	std	Z+6, r14	; 0x06
   1b580:	15 83       	std	Z+5, r17	; 0x05
   1b582:	04 83       	std	Z+4, r16	; 0x04
   1b584:	8d ee       	ldi	r24, 0xED	; 237
   1b586:	9f e2       	ldi	r25, 0x2F	; 47
   1b588:	a0 e0       	ldi	r26, 0x00	; 0
   1b58a:	81 83       	std	Z+1, r24	; 0x01
   1b58c:	92 83       	std	Z+2, r25	; 0x02
   1b58e:	a3 83       	std	Z+3, r26	; 0x03
   1b590:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b594:	ce 01       	movw	r24, r28
   1b596:	0e 94 04 c7 	call	0x18e08	; 0x18e08 <lif_close_volume>
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
   1b59a:	81 e0       	ldi	r24, 0x01	; 1
   1b59c:	90 e0       	ldi	r25, 0x00	; 0
   1b59e:	02 c0       	rjmp	.+4      	; 0x1b5a4 <lif_rename_file+0xf2>

    }

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1);
   1b5a0:	8f ef       	ldi	r24, 0xFF	; 255
   1b5a2:	9f ef       	ldi	r25, 0xFF	; 255
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
}
   1b5a4:	cd b7       	in	r28, 0x3d	; 61
   1b5a6:	de b7       	in	r29, 0x3e	; 62
   1b5a8:	27 96       	adiw	r28, 0x07	; 7
   1b5aa:	ea e0       	ldi	r30, 0x0A	; 10
   1b5ac:	0c 94 2d e3 	jmp	0x1c65a	; 0x1c65a <__epilogue_restores__+0x10>

0001b5b0 <lif_create_image>:
/// @param[in] dirsectors: Number of LIF directory sectors
/// @param[in] sectors: total disk image size in sectors
///@return bytes writting to disk image
MEMSPACE
long lif_create_image(char *lifimagename, char *liflabel, uint32_t dirsectors, uint32_t sectors)
{
   1b5b0:	4f 92       	push	r4
   1b5b2:	5f 92       	push	r5
   1b5b4:	6f 92       	push	r6
   1b5b6:	7f 92       	push	r7
   1b5b8:	af 92       	push	r10
   1b5ba:	bf 92       	push	r11
   1b5bc:	cf 92       	push	r12
   1b5be:	df 92       	push	r13
   1b5c0:	ef 92       	push	r14
   1b5c2:	ff 92       	push	r15
   1b5c4:	0f 93       	push	r16
   1b5c6:	1f 93       	push	r17
   1b5c8:	cf 93       	push	r28
   1b5ca:	df 93       	push	r29
   1b5cc:	ad b7       	in	r26, 0x3d	; 61
   1b5ce:	be b7       	in	r27, 0x3e	; 62
   1b5d0:	17 97       	sbiw	r26, 0x07	; 7
   1b5d2:	0f b6       	in	r0, 0x3f	; 63
   1b5d4:	f8 94       	cli
   1b5d6:	be bf       	out	0x3e, r27	; 62
   1b5d8:	0f be       	out	0x3f, r0	; 63
   1b5da:	ad bf       	out	0x3d, r26	; 61
   1b5dc:	27 01       	movw	r4, r14
   1b5de:	38 01       	movw	r6, r16
    uint32_t dirstart,filestart,filesectors,end;
    lif_t *LIF;

    if(!*lifimagename)
   1b5e0:	dc 01       	movw	r26, r24
   1b5e2:	ec 91       	ld	r30, X
   1b5e4:	e1 11       	cpse	r30, r1
   1b5e6:	03 c0       	rjmp	.+6      	; 0x1b5ee <lif_create_image+0x3e>
    {
        printf("lif_create_image: lifimagename is empty\n");
   1b5e8:	84 ec       	ldi	r24, 0xC4	; 196
   1b5ea:	9f e2       	ldi	r25, 0x2F	; 47
   1b5ec:	16 c0       	rjmp	.+44     	; 0x1b61a <lif_create_image+0x6a>
        return(-1);
    }
    if(!*liflabel)
   1b5ee:	db 01       	movw	r26, r22
   1b5f0:	ec 91       	ld	r30, X
   1b5f2:	e1 11       	cpse	r30, r1
   1b5f4:	03 c0       	rjmp	.+6      	; 0x1b5fc <lif_create_image+0x4c>
    {
        printf("lif_create_image: liflabel is empty\n");
   1b5f6:	8f e9       	ldi	r24, 0x9F	; 159
   1b5f8:	9f e2       	ldi	r25, 0x2F	; 47
   1b5fa:	0f c0       	rjmp	.+30     	; 0x1b61a <lif_create_image+0x6a>
        return(-1);
    }
    if(!dirsectors)
   1b5fc:	21 15       	cp	r18, r1
   1b5fe:	31 05       	cpc	r19, r1
   1b600:	41 05       	cpc	r20, r1
   1b602:	51 05       	cpc	r21, r1
   1b604:	19 f4       	brne	.+6      	; 0x1b60c <lif_create_image+0x5c>
    {
        printf("lif_create_image: dirsectors is 0\n");
   1b606:	8c e7       	ldi	r24, 0x7C	; 124
   1b608:	9f e2       	ldi	r25, 0x2F	; 47
   1b60a:	07 c0       	rjmp	.+14     	; 0x1b61a <lif_create_image+0x6a>
        return(-1);
    }
    if(!sectors)
   1b60c:	e1 14       	cp	r14, r1
   1b60e:	f1 04       	cpc	r15, r1
   1b610:	01 05       	cpc	r16, r1
   1b612:	11 05       	cpc	r17, r1
   1b614:	59 f4       	brne	.+22     	; 0x1b62c <lif_create_image+0x7c>
    {
        printf("lif_create_image: sectors is 0\n");
   1b616:	8c e5       	ldi	r24, 0x5C	; 92
   1b618:	9f e2       	ldi	r25, 0x2F	; 47
   1b61a:	a0 e0       	ldi	r26, 0x00	; 0
   1b61c:	ed b7       	in	r30, 0x3d	; 61
   1b61e:	fe b7       	in	r31, 0x3e	; 62
   1b620:	81 83       	std	Z+1, r24	; 0x01
   1b622:	92 83       	std	Z+2, r25	; 0x02
   1b624:	a3 83       	std	Z+3, r26	; 0x03
   1b626:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   1b62a:	2b c0       	rjmp	.+86     	; 0x1b682 <lif_create_image+0xd2>
    dirstart = 2;
    filestart = dirstart + dirsectors;
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
   1b62c:	67 01       	movw	r12, r14
   1b62e:	78 01       	movw	r14, r16
   1b630:	f2 e0       	ldi	r31, 0x02	; 2
   1b632:	cf 1a       	sub	r12, r31
   1b634:	d1 08       	sbc	r13, r1
   1b636:	e1 08       	sbc	r14, r1
   1b638:	f1 08       	sbc	r15, r1
   1b63a:	56 01       	movw	r10, r12
   1b63c:	67 01       	movw	r12, r14
   1b63e:	a2 1a       	sub	r10, r18
   1b640:	b3 0a       	sbc	r11, r19
   1b642:	c4 0a       	sbc	r12, r20
   1b644:	d5 0a       	sbc	r13, r21
   1b646:	79 01       	movw	r14, r18
   1b648:	8a 01       	movw	r16, r20
   1b64a:	22 e0       	ldi	r18, 0x02	; 2
   1b64c:	30 e0       	ldi	r19, 0x00	; 0
   1b64e:	40 e0       	ldi	r20, 0x00	; 0
   1b650:	50 e0       	ldi	r21, 0x00	; 0
   1b652:	0e 94 77 c9 	call	0x192ee	; 0x192ee <lif_create_volume>
    if(LIF == NULL)
   1b656:	00 97       	sbiw	r24, 0x00	; 0
   1b658:	a1 f0       	breq	.+40     	; 0x1b682 <lif_create_image+0xd2>
        return(-1);
    lif_close_volume(LIF);
   1b65a:	0e 94 04 c7 	call	0x18e08	; 0x18e08 <lif_close_volume>

    printf("\tFormatting: wrote %ld sectors\n", (long)end);
   1b65e:	82 01       	movw	r16, r4
   1b660:	d6 2d       	mov	r29, r6
   1b662:	c7 2d       	mov	r28, r7
   1b664:	ed b7       	in	r30, 0x3d	; 61
   1b666:	fe b7       	in	r31, 0x3e	; 62
   1b668:	44 82       	std	Z+4, r4	; 0x04
   1b66a:	15 83       	std	Z+5, r17	; 0x05
   1b66c:	66 82       	std	Z+6, r6	; 0x06
   1b66e:	77 82       	std	Z+7, r7	; 0x07
   1b670:	8c e3       	ldi	r24, 0x3C	; 60
   1b672:	9f e2       	ldi	r25, 0x2F	; 47
   1b674:	a0 e0       	ldi	r26, 0x00	; 0
   1b676:	81 83       	std	Z+1, r24	; 0x01
   1b678:	92 83       	std	Z+2, r25	; 0x02
   1b67a:	a3 83       	std	Z+3, r26	; 0x03
   1b67c:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    return(end);
   1b680:	04 c0       	rjmp	.+8      	; 0x1b68a <lif_create_image+0xda>
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
    if(LIF == NULL)
        return(-1);
   1b682:	0f ef       	ldi	r16, 0xFF	; 255
   1b684:	1f ef       	ldi	r17, 0xFF	; 255
   1b686:	df ef       	ldi	r29, 0xFF	; 255
   1b688:	cf ef       	ldi	r28, 0xFF	; 255
    lif_close_volume(LIF);

    printf("\tFormatting: wrote %ld sectors\n", (long)end);
    return(end);
}
   1b68a:	b8 01       	movw	r22, r16
   1b68c:	8d 2f       	mov	r24, r29
   1b68e:	9c 2f       	mov	r25, r28
   1b690:	ad b7       	in	r26, 0x3d	; 61
   1b692:	be b7       	in	r27, 0x3e	; 62
   1b694:	17 96       	adiw	r26, 0x07	; 7
   1b696:	0f b6       	in	r0, 0x3f	; 63
   1b698:	f8 94       	cli
   1b69a:	be bf       	out	0x3e, r27	; 62
   1b69c:	0f be       	out	0x3f, r0	; 63
   1b69e:	ad bf       	out	0x3d, r26	; 61
   1b6a0:	df 91       	pop	r29
   1b6a2:	cf 91       	pop	r28
   1b6a4:	1f 91       	pop	r17
   1b6a6:	0f 91       	pop	r16
   1b6a8:	ff 90       	pop	r15
   1b6aa:	ef 90       	pop	r14
   1b6ac:	df 90       	pop	r13
   1b6ae:	cf 90       	pop	r12
   1b6b0:	bf 90       	pop	r11
   1b6b2:	af 90       	pop	r10
   1b6b4:	7f 90       	pop	r7
   1b6b6:	6f 90       	pop	r6
   1b6b8:	5f 90       	pop	r5
   1b6ba:	4f 90       	pop	r4
   1b6bc:	08 95       	ret

0001b6be <lif_tests>:

/// @brief LIF user tests
/// @return  1 matched token, 0 if not
MEMSPACE
int lif_tests(int argc, char *argv[])
{
   1b6be:	a5 e0       	ldi	r26, 0x05	; 5
   1b6c0:	b0 e0       	ldi	r27, 0x00	; 0
   1b6c2:	e4 e6       	ldi	r30, 0x64	; 100
   1b6c4:	fb ed       	ldi	r31, 0xDB	; 219
   1b6c6:	ab c7       	rjmp	.+3926   	; 0x1c61e <__prologue_saves__+0xc>
        printf("%d:%s\n", i, argv[i]);
    printf("\n");
#endif

// Nothing to do ?
    if(argc < 2)
   1b6c8:	82 30       	cpi	r24, 0x02	; 2
   1b6ca:	91 05       	cpc	r25, r1
   1b6cc:	1c f4       	brge	.+6      	; 0x1b6d4 <lif_tests+0x16>
        return (0);
   1b6ce:	80 e0       	ldi	r24, 0x00	; 0
   1b6d0:	90 e0       	ldi	r25, 0x00	; 0
   1b6d2:	8f c1       	rjmp	.+798    	; 0x1b9f2 <lif_tests+0x334>

// Argument 1
    ind = 1;
    ptr = argv[ind++];
   1b6d4:	fb 01       	movw	r30, r22
   1b6d6:	e2 80       	ldd	r14, Z+2	; 0x02
   1b6d8:	f3 80       	ldd	r15, Z+3	; 0x03

// Argument 1 missing ?
//        Nothing to do
// argc should really get this
    if(!ptr || !*ptr)
   1b6da:	e1 14       	cp	r14, r1
   1b6dc:	f1 04       	cpc	r15, r1
   1b6de:	09 f4       	brne	.+2      	; 0x1b6e2 <lif_tests+0x24>
   1b6e0:	86 c1       	rjmp	.+780    	; 0x1b9ee <lif_tests+0x330>
   1b6e2:	f7 01       	movw	r30, r14
   1b6e4:	20 81       	ld	r18, Z
   1b6e6:	22 23       	and	r18, r18
   1b6e8:	09 f4       	brne	.+2      	; 0x1b6ec <lif_tests+0x2e>
   1b6ea:	81 c1       	rjmp	.+770    	; 0x1b9ee <lif_tests+0x330>
   1b6ec:	8b 01       	movw	r16, r22
   1b6ee:	6c 01       	movw	r12, r24
        return(1);


	if(MATCHI_LEN(argv[0],"lif"))
   1b6f0:	6f eb       	ldi	r22, 0xBF	; 191
   1b6f2:	76 e1       	ldi	r23, 0x16	; 22
   1b6f4:	f8 01       	movw	r30, r16
   1b6f6:	80 81       	ld	r24, Z
   1b6f8:	91 81       	ldd	r25, Z+1	; 0x01
   1b6fa:	0e 94 dd 30 	call	0x61ba	; 0x61ba <MATCHI_LEN>
   1b6fe:	89 2b       	or	r24, r25
   1b700:	d1 f0       	breq	.+52     	; 0x1b736 <lif_tests+0x78>
	{
		if(MATCHI(ptr,"help") || MATCHI(ptr,"-help") || MATCHI(ptr,"-?") )
   1b702:	69 e7       	ldi	r22, 0x79	; 121
   1b704:	76 e1       	ldi	r23, 0x16	; 22
   1b706:	c7 01       	movw	r24, r14
   1b708:	0e 94 9f 30 	call	0x613e	; 0x613e <MATCHI>
   1b70c:	89 2b       	or	r24, r25
   1b70e:	29 f0       	breq	.+10     	; 0x1b71a <lif_tests+0x5c>
		{
			lif_help(1);
   1b710:	81 e0       	ldi	r24, 0x01	; 1
   1b712:	90 e0       	ldi	r25, 0x00	; 0
   1b714:	0e 94 29 bd 	call	0x17a52	; 0x17a52 <lif_help>
   1b718:	6a c1       	rjmp	.+724    	; 0x1b9ee <lif_tests+0x330>
        return(1);


	if(MATCHI_LEN(argv[0],"lif"))
	{
		if(MATCHI(ptr,"help") || MATCHI(ptr,"-help") || MATCHI(ptr,"-?") )
   1b71a:	68 e7       	ldi	r22, 0x78	; 120
   1b71c:	76 e1       	ldi	r23, 0x16	; 22
   1b71e:	c7 01       	movw	r24, r14
   1b720:	0e 94 9f 30 	call	0x613e	; 0x613e <MATCHI>
   1b724:	89 2b       	or	r24, r25
   1b726:	a1 f7       	brne	.-24     	; 0x1b710 <lif_tests+0x52>
   1b728:	6e e7       	ldi	r22, 0x7E	; 126
   1b72a:	76 e1       	ldi	r23, 0x16	; 22
   1b72c:	c7 01       	movw	r24, r14
   1b72e:	0e 94 9f 30 	call	0x613e	; 0x613e <MATCHI>
   1b732:	89 2b       	or	r24, r25
   1b734:	69 f7       	brne	.-38     	; 0x1b710 <lif_tests+0x52>
		}
	}

// Turn one debugging
// in the future we can add tests for specific messages
	debuglevel &= ~0x400;
   1b736:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1b73a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1b73e:	9b 7f       	andi	r25, 0xFB	; 251
   1b740:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <debuglevel+0x1>
   1b744:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <debuglevel>
    if (MATCHARGS(ptr,"-d", (ind + 0) ,argc))
   1b748:	96 01       	movw	r18, r12
   1b74a:	42 e0       	ldi	r20, 0x02	; 2
   1b74c:	50 e0       	ldi	r21, 0x00	; 0
   1b74e:	61 e8       	ldi	r22, 0x81	; 129
   1b750:	76 e1       	ldi	r23, 0x16	; 22
   1b752:	c7 01       	movw	r24, r14
   1b754:	0e 94 b3 30 	call	0x6166	; 0x6166 <MATCHARGS>
   1b758:	89 2b       	or	r24, r25
   1b75a:	79 f0       	breq	.+30     	; 0x1b77a <lif_tests+0xbc>
    {
        debuglevel |= 0x400;
   1b75c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1b760:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1b764:	94 60       	ori	r25, 0x04	; 4
   1b766:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <debuglevel+0x1>
   1b76a:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <debuglevel>
        ptr = argv[ind++];
   1b76e:	f8 01       	movw	r30, r16
   1b770:	e4 80       	ldd	r14, Z+4	; 0x04
   1b772:	f5 80       	ldd	r15, Z+5	; 0x05
   1b774:	c3 e0       	ldi	r28, 0x03	; 3
   1b776:	d0 e0       	ldi	r29, 0x00	; 0
   1b778:	02 c0       	rjmp	.+4      	; 0x1b77e <lif_tests+0xc0>
    if(argc < 2)
        return (0);

// Argument 1
    ind = 1;
    ptr = argv[ind++];
   1b77a:	c2 e0       	ldi	r28, 0x02	; 2
   1b77c:	d0 e0       	ldi	r29, 0x00	; 0
    {
        debuglevel |= 0x400;
        ptr = argv[ind++];
    }

    if (MATCHARGS(ptr,"addbin", (ind + 3) ,argc))
   1b77e:	5e 01       	movw	r10, r28
   1b780:	f3 e0       	ldi	r31, 0x03	; 3
   1b782:	af 0e       	add	r10, r31
   1b784:	b1 1c       	adc	r11, r1
   1b786:	96 01       	movw	r18, r12
   1b788:	a5 01       	movw	r20, r10
   1b78a:	64 e8       	ldi	r22, 0x84	; 132
   1b78c:	76 e1       	ldi	r23, 0x16	; 22
   1b78e:	c7 01       	movw	r24, r14
   1b790:	0e 94 b3 30 	call	0x6166	; 0x6166 <MATCHARGS>
   1b794:	89 2b       	or	r24, r25
   1b796:	61 f0       	breq	.+24     	; 0x1b7b0 <lif_tests+0xf2>
    {
        lif_add_lif_file(argv[ind],argv[ind+1],argv[ind+2]);
   1b798:	cc 0f       	add	r28, r28
   1b79a:	dd 1f       	adc	r29, r29
   1b79c:	c0 0f       	add	r28, r16
   1b79e:	d1 1f       	adc	r29, r17
   1b7a0:	4c 81       	ldd	r20, Y+4	; 0x04
   1b7a2:	5d 81       	ldd	r21, Y+5	; 0x05
   1b7a4:	6a 81       	ldd	r22, Y+2	; 0x02
   1b7a6:	7b 81       	ldd	r23, Y+3	; 0x03
   1b7a8:	88 81       	ld	r24, Y
   1b7aa:	99 81       	ldd	r25, Y+1	; 0x01
   1b7ac:	63 dc       	rcall	.-1850   	; 0x1b074 <lif_add_lif_file>
   1b7ae:	1f c1       	rjmp	.+574    	; 0x1b9ee <lif_tests+0x330>

        return(1);
    }

    if (MATCHARGS(ptr,"add", (ind + 3) ,argc))
   1b7b0:	96 01       	movw	r18, r12
   1b7b2:	a5 01       	movw	r20, r10
   1b7b4:	6b e8       	ldi	r22, 0x8B	; 139
   1b7b6:	76 e1       	ldi	r23, 0x16	; 22
   1b7b8:	c7 01       	movw	r24, r14
   1b7ba:	0e 94 b3 30 	call	0x6166	; 0x6166 <MATCHARGS>
   1b7be:	89 2b       	or	r24, r25
   1b7c0:	69 f0       	breq	.+26     	; 0x1b7dc <lif_tests+0x11e>
    {
        lif_add_ascii_file_as_e010(argv[ind],argv[ind+1],argv[ind+2]);
   1b7c2:	cc 0f       	add	r28, r28
   1b7c4:	dd 1f       	adc	r29, r29
   1b7c6:	c0 0f       	add	r28, r16
   1b7c8:	d1 1f       	adc	r29, r17
   1b7ca:	4c 81       	ldd	r20, Y+4	; 0x04
   1b7cc:	5d 81       	ldd	r21, Y+5	; 0x05
   1b7ce:	6a 81       	ldd	r22, Y+2	; 0x02
   1b7d0:	7b 81       	ldd	r23, Y+3	; 0x03
   1b7d2:	88 81       	ld	r24, Y
   1b7d4:	99 81       	ldd	r25, Y+1	; 0x01
   1b7d6:	0e 94 17 d3 	call	0x1a62e	; 0x1a62e <lif_add_ascii_file_as_e010>
   1b7da:	09 c1       	rjmp	.+530    	; 0x1b9ee <lif_tests+0x330>
        return(1);
    }
    if (MATCHARGS(ptr,"createdisk", (ind + 3) ,argc))
   1b7dc:	96 01       	movw	r18, r12
   1b7de:	a5 01       	movw	r20, r10
   1b7e0:	6f e8       	ldi	r22, 0x8F	; 143
   1b7e2:	76 e1       	ldi	r23, 0x16	; 22
   1b7e4:	c7 01       	movw	r24, r14
   1b7e6:	0e 94 b3 30 	call	0x6166	; 0x6166 <MATCHARGS>
   1b7ea:	89 2b       	or	r24, r25
   1b7ec:	09 f4       	brne	.+2      	; 0x1b7f0 <lif_tests+0x132>
   1b7ee:	42 c0       	rjmp	.+132    	; 0x1b874 <lif_tests+0x1b6>
    {
///@brief format LIF image
        long dir,sectors;
        char *name = argv[ind];
   1b7f0:	ce 01       	movw	r24, r28
   1b7f2:	88 0f       	add	r24, r24
   1b7f4:	99 1f       	adc	r25, r25
   1b7f6:	e8 01       	movw	r28, r16
   1b7f8:	c8 0f       	add	r28, r24
   1b7fa:	d9 1f       	adc	r29, r25
   1b7fc:	c8 80       	ld	r12, Y
   1b7fe:	d9 80       	ldd	r13, Y+1	; 0x01
        char *label = argv[ind+1];
   1b800:	aa 80       	ldd	r10, Y+2	; 0x02
   1b802:	bb 80       	ldd	r11, Y+3	; 0x03
        char *model = argv[ind+2];
   1b804:	0c 80       	ldd	r0, Y+4	; 0x04
   1b806:	dd 81       	ldd	r29, Y+5	; 0x05
   1b808:	c0 2d       	mov	r28, r0
        if( MATCHI_LEN(model,"hp"))
   1b80a:	6a e9       	ldi	r22, 0x9A	; 154
   1b80c:	76 e1       	ldi	r23, 0x16	; 22
   1b80e:	ce 01       	movw	r24, r28
   1b810:	0e 94 dd 30 	call	0x61ba	; 0x61ba <MATCHI_LEN>
   1b814:	89 2b       	or	r24, r25
   1b816:	09 f0       	breq	.+2      	; 0x1b81a <lif_tests+0x15c>
            model +=2;
   1b818:	22 96       	adiw	r28, 0x02	; 2
        if(hpdir_find_drive(model,0, 0))
   1b81a:	40 e0       	ldi	r20, 0x00	; 0
   1b81c:	50 e0       	ldi	r21, 0x00	; 0
   1b81e:	60 e0       	ldi	r22, 0x00	; 0
   1b820:	70 e0       	ldi	r23, 0x00	; 0
   1b822:	ce 01       	movw	r24, r28
   1b824:	0e 94 80 a0 	call	0x14100	; 0x14100 <hpdir_find_drive>
   1b828:	89 2b       	or	r24, r25
   1b82a:	b9 f0       	breq	.+46     	; 0x1b85a <lif_tests+0x19c>
        {
            dir = lif_dir_count(hpdir.BLOCKS);
   1b82c:	60 91 b0 21 	lds	r22, 0x21B0	; 0x8021b0 <hpdir+0xac>
   1b830:	70 91 b1 21 	lds	r23, 0x21B1	; 0x8021b1 <hpdir+0xad>
   1b834:	80 91 b2 21 	lds	r24, 0x21B2	; 0x8021b2 <hpdir+0xae>
   1b838:	90 91 b3 21 	lds	r25, 0x21B3	; 0x8021b3 <hpdir+0xaf>
   1b83c:	0e 94 63 a0 	call	0x140c6	; 0x140c6 <lif_dir_count>
   1b840:	9b 01       	movw	r18, r22
   1b842:	ac 01       	movw	r20, r24
            sectors = hpdir.BLOCKS;
            lif_create_image(name, label, dir, sectors);
   1b844:	e0 90 b0 21 	lds	r14, 0x21B0	; 0x8021b0 <hpdir+0xac>
   1b848:	f0 90 b1 21 	lds	r15, 0x21B1	; 0x8021b1 <hpdir+0xad>
   1b84c:	00 91 b2 21 	lds	r16, 0x21B2	; 0x8021b2 <hpdir+0xae>
   1b850:	10 91 b3 21 	lds	r17, 0x21B3	; 0x8021b3 <hpdir+0xaf>
   1b854:	b5 01       	movw	r22, r10
   1b856:	c6 01       	movw	r24, r12
   1b858:	2e c0       	rjmp	.+92     	; 0x1b8b6 <lif_tests+0x1f8>
            return(1);
        }
        printf("Disk: %s not found in hpdir.ini\n", model);
   1b85a:	ed b7       	in	r30, 0x3d	; 61
   1b85c:	fe b7       	in	r31, 0x3e	; 62
   1b85e:	d5 83       	std	Z+5, r29	; 0x05
   1b860:	c4 83       	std	Z+4, r28	; 0x04
   1b862:	8d e8       	ldi	r24, 0x8D	; 141
   1b864:	91 e4       	ldi	r25, 0x41	; 65
   1b866:	a0 e0       	ldi	r26, 0x00	; 0
   1b868:	81 83       	std	Z+1, r24	; 0x01
   1b86a:	92 83       	std	Z+2, r25	; 0x02
   1b86c:	a3 83       	std	Z+3, r26	; 0x03
   1b86e:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   1b872:	bd c0       	rjmp	.+378    	; 0x1b9ee <lif_tests+0x330>
        return(1);
    }
    if (MATCHARGS(ptr,"create", (ind + 4) ,argc))
   1b874:	96 01       	movw	r18, r12
   1b876:	ae 01       	movw	r20, r28
   1b878:	4c 5f       	subi	r20, 0xFC	; 252
   1b87a:	5f 4f       	sbci	r21, 0xFF	; 255
   1b87c:	6d e9       	ldi	r22, 0x9D	; 157
   1b87e:	76 e1       	ldi	r23, 0x16	; 22
   1b880:	c7 01       	movw	r24, r14
   1b882:	0e 94 b3 30 	call	0x6166	; 0x6166 <MATCHARGS>
   1b886:	89 2b       	or	r24, r25
   1b888:	c1 f0       	breq	.+48     	; 0x1b8ba <lif_tests+0x1fc>
    {
///@brief format LIF image
        lif_create_image(argv[ind],argv[ind+1], atol(argv[ind+2]), atol(argv[ind+3]) );
   1b88a:	cc 0f       	add	r28, r28
   1b88c:	dd 1f       	adc	r29, r29
   1b88e:	c0 0f       	add	r28, r16
   1b890:	d1 1f       	adc	r29, r17
   1b892:	8c 81       	ldd	r24, Y+4	; 0x04
   1b894:	9d 81       	ldd	r25, Y+5	; 0x05
   1b896:	0e 94 f2 45 	call	0x8be4	; 0x8be4 <atol>
   1b89a:	4b 01       	movw	r8, r22
   1b89c:	5c 01       	movw	r10, r24
   1b89e:	8e 81       	ldd	r24, Y+6	; 0x06
   1b8a0:	9f 81       	ldd	r25, Y+7	; 0x07
   1b8a2:	0e 94 f2 45 	call	0x8be4	; 0x8be4 <atol>
   1b8a6:	7b 01       	movw	r14, r22
   1b8a8:	8c 01       	movw	r16, r24
   1b8aa:	6a 81       	ldd	r22, Y+2	; 0x02
   1b8ac:	7b 81       	ldd	r23, Y+3	; 0x03
   1b8ae:	a5 01       	movw	r20, r10
   1b8b0:	94 01       	movw	r18, r8
   1b8b2:	88 81       	ld	r24, Y
   1b8b4:	99 81       	ldd	r25, Y+1	; 0x01
   1b8b6:	7c de       	rcall	.-776    	; 0x1b5b0 <lif_create_image>
   1b8b8:	9a c0       	rjmp	.+308    	; 0x1b9ee <lif_tests+0x330>
        return(1);
    }
    if (MATCHARGS(ptr,"del", (ind + 2) ,argc))
   1b8ba:	96 01       	movw	r18, r12
   1b8bc:	ae 01       	movw	r20, r28
   1b8be:	4e 5f       	subi	r20, 0xFE	; 254
   1b8c0:	5f 4f       	sbci	r21, 0xFF	; 255
   1b8c2:	64 ea       	ldi	r22, 0xA4	; 164
   1b8c4:	76 e1       	ldi	r23, 0x16	; 22
   1b8c6:	c7 01       	movw	r24, r14
   1b8c8:	0e 94 b3 30 	call	0x6166	; 0x6166 <MATCHARGS>
   1b8cc:	89 2b       	or	r24, r25
   1b8ce:	51 f0       	breq	.+20     	; 0x1b8e4 <lif_tests+0x226>
    {
        lif_del_file(argv[ind],argv[ind+1]);
   1b8d0:	cc 0f       	add	r28, r28
   1b8d2:	dd 1f       	adc	r29, r29
   1b8d4:	c0 0f       	add	r28, r16
   1b8d6:	d1 1f       	adc	r29, r17
   1b8d8:	6a 81       	ldd	r22, Y+2	; 0x02
   1b8da:	7b 81       	ldd	r23, Y+3	; 0x03
   1b8dc:	88 81       	ld	r24, Y
   1b8de:	99 81       	ldd	r25, Y+1	; 0x01
   1b8e0:	52 dd       	rcall	.-1372   	; 0x1b386 <lif_del_file>
   1b8e2:	85 c0       	rjmp	.+266    	; 0x1b9ee <lif_tests+0x330>
        return(1);
    }
    if (MATCHARGS(ptr,"dir", (ind + 1) ,argc))
   1b8e4:	96 01       	movw	r18, r12
   1b8e6:	ae 01       	movw	r20, r28
   1b8e8:	4f 5f       	subi	r20, 0xFF	; 255
   1b8ea:	5f 4f       	sbci	r21, 0xFF	; 255
   1b8ec:	68 ed       	ldi	r22, 0xD8	; 216
   1b8ee:	7b e0       	ldi	r23, 0x0B	; 11
   1b8f0:	c7 01       	movw	r24, r14
   1b8f2:	0e 94 b3 30 	call	0x6166	; 0x6166 <MATCHARGS>
   1b8f6:	89 2b       	or	r24, r25
   1b8f8:	49 f0       	breq	.+18     	; 0x1b90c <lif_tests+0x24e>
    {
        lif_dir(argv[ind]);
   1b8fa:	cc 0f       	add	r28, r28
   1b8fc:	dd 1f       	adc	r29, r29
   1b8fe:	c0 0f       	add	r28, r16
   1b900:	d1 1f       	adc	r29, r17
   1b902:	88 81       	ld	r24, Y
   1b904:	99 81       	ldd	r25, Y+1	; 0x01
   1b906:	0e 94 c1 ce 	call	0x19d82	; 0x19d82 <lif_dir>
   1b90a:	71 c0       	rjmp	.+226    	; 0x1b9ee <lif_tests+0x330>
        return(1);
    }
    if (MATCHARGS(ptr,"extractbin", (ind + 3) ,argc))
   1b90c:	96 01       	movw	r18, r12
   1b90e:	a5 01       	movw	r20, r10
   1b910:	68 ea       	ldi	r22, 0xA8	; 168
   1b912:	76 e1       	ldi	r23, 0x16	; 22
   1b914:	c7 01       	movw	r24, r14
   1b916:	0e 94 b3 30 	call	0x6166	; 0x6166 <MATCHARGS>
   1b91a:	89 2b       	or	r24, r25
   1b91c:	71 f0       	breq	.+28     	; 0x1b93a <lif_tests+0x27c>
    {

        lif_extract_lif_as_lif(argv[ind],argv[ind+1],argv[ind+2]);
   1b91e:	ce 01       	movw	r24, r28
   1b920:	88 0f       	add	r24, r24
   1b922:	99 1f       	adc	r25, r25
   1b924:	e8 01       	movw	r28, r16
   1b926:	c8 0f       	add	r28, r24
   1b928:	d9 1f       	adc	r29, r25
   1b92a:	4c 81       	ldd	r20, Y+4	; 0x04
   1b92c:	5d 81       	ldd	r21, Y+5	; 0x05
   1b92e:	6a 81       	ldd	r22, Y+2	; 0x02
   1b930:	7b 81       	ldd	r23, Y+3	; 0x03
   1b932:	88 81       	ld	r24, Y
   1b934:	99 81       	ldd	r25, Y+1	; 0x01
   1b936:	66 da       	rcall	.-2868   	; 0x1ae04 <lif_extract_lif_as_lif>
   1b938:	5a c0       	rjmp	.+180    	; 0x1b9ee <lif_tests+0x330>
        return(1);
    }
    if (MATCHARGS(ptr,"extract", (ind + 3) ,argc))
   1b93a:	96 01       	movw	r18, r12
   1b93c:	a5 01       	movw	r20, r10
   1b93e:	63 eb       	ldi	r22, 0xB3	; 179
   1b940:	76 e1       	ldi	r23, 0x16	; 22
   1b942:	c7 01       	movw	r24, r14
   1b944:	0e 94 b3 30 	call	0x6166	; 0x6166 <MATCHARGS>
   1b948:	89 2b       	or	r24, r25
   1b94a:	79 f0       	breq	.+30     	; 0x1b96a <lif_tests+0x2ac>
    {

        lif_extract_e010_as_ascii(argv[ind],argv[ind+1],argv[ind+2]);
   1b94c:	ce 01       	movw	r24, r28
   1b94e:	88 0f       	add	r24, r24
   1b950:	99 1f       	adc	r25, r25
   1b952:	e8 01       	movw	r28, r16
   1b954:	c8 0f       	add	r28, r24
   1b956:	d9 1f       	adc	r29, r25
   1b958:	4c 81       	ldd	r20, Y+4	; 0x04
   1b95a:	5d 81       	ldd	r21, Y+5	; 0x05
   1b95c:	6a 81       	ldd	r22, Y+2	; 0x02
   1b95e:	7b 81       	ldd	r23, Y+3	; 0x03
   1b960:	88 81       	ld	r24, Y
   1b962:	99 81       	ldd	r25, Y+1	; 0x01
   1b964:	0e 94 53 d4 	call	0x1a8a6	; 0x1a8a6 <lif_extract_e010_as_ascii>
   1b968:	42 c0       	rjmp	.+132    	; 0x1b9ee <lif_tests+0x330>
        return(1);
    }
    if (MATCHARGS(ptr,"rename", (ind + 3) ,argc))
   1b96a:	96 01       	movw	r18, r12
   1b96c:	a5 01       	movw	r20, r10
   1b96e:	65 ee       	ldi	r22, 0xE5	; 229
   1b970:	7b e0       	ldi	r23, 0x0B	; 11
   1b972:	c7 01       	movw	r24, r14
   1b974:	0e 94 b3 30 	call	0x6166	; 0x6166 <MATCHARGS>
   1b978:	89 2b       	or	r24, r25
   1b97a:	71 f0       	breq	.+28     	; 0x1b998 <lif_tests+0x2da>
    {
        lif_rename_file(argv[ind],argv[ind+1],argv[ind+2]);
   1b97c:	ce 01       	movw	r24, r28
   1b97e:	88 0f       	add	r24, r24
   1b980:	99 1f       	adc	r25, r25
   1b982:	e8 01       	movw	r28, r16
   1b984:	c8 0f       	add	r28, r24
   1b986:	d9 1f       	adc	r29, r25
   1b988:	4c 81       	ldd	r20, Y+4	; 0x04
   1b98a:	5d 81       	ldd	r21, Y+5	; 0x05
   1b98c:	6a 81       	ldd	r22, Y+2	; 0x02
   1b98e:	7b 81       	ldd	r23, Y+3	; 0x03
   1b990:	88 81       	ld	r24, Y
   1b992:	99 81       	ldd	r25, Y+1	; 0x01
   1b994:	8e dd       	rcall	.-1252   	; 0x1b4b2 <lif_rename_file>
   1b996:	2b c0       	rjmp	.+86     	; 0x1b9ee <lif_tests+0x330>
        return(1);
    }

	if(MATCHI_LEN(argv[0],"td02lif"))
   1b998:	6b eb       	ldi	r22, 0xBB	; 187
   1b99a:	76 e1       	ldi	r23, 0x16	; 22
   1b99c:	f8 01       	movw	r30, r16
   1b99e:	80 81       	ld	r24, Z
   1b9a0:	91 81       	ldd	r25, Z+1	; 0x01
   1b9a2:	0e 94 dd 30 	call	0x61ba	; 0x61ba <MATCHI_LEN>
   1b9a6:	89 2b       	or	r24, r25
   1b9a8:	09 f4       	brne	.+2      	; 0x1b9ac <lif_tests+0x2ee>
   1b9aa:	91 ce       	rjmp	.-734    	; 0x1b6ce <lif_tests+0x10>
	{
        int i;
		if(MATCHI(ptr,"help") || MATCHI(ptr,"-help") || MATCHI(ptr,"-?") )
   1b9ac:	69 e7       	ldi	r22, 0x79	; 121
   1b9ae:	76 e1       	ldi	r23, 0x16	; 22
   1b9b0:	c7 01       	movw	r24, r14
   1b9b2:	0e 94 9f 30 	call	0x613e	; 0x613e <MATCHI>
   1b9b6:	89 2b       	or	r24, r25
   1b9b8:	59 f0       	breq	.+22     	; 0x1b9d0 <lif_tests+0x312>
		{
#ifdef TELEDISK
			td0_help(1);
			return(1);
#else
		    printf("td02lif support not enabled\n");
   1b9ba:	80 e7       	ldi	r24, 0x70	; 112
   1b9bc:	91 e4       	ldi	r25, 0x41	; 65
   1b9be:	a0 e0       	ldi	r26, 0x00	; 0
   1b9c0:	ed b7       	in	r30, 0x3d	; 61
   1b9c2:	fe b7       	in	r31, 0x3e	; 62
   1b9c4:	81 83       	std	Z+1, r24	; 0x01
   1b9c6:	92 83       	std	Z+2, r25	; 0x02
   1b9c8:	a3 83       	std	Z+3, r26	; 0x03
   1b9ca:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   1b9ce:	0f c0       	rjmp	.+30     	; 0x1b9ee <lif_tests+0x330>
    }

	if(MATCHI_LEN(argv[0],"td02lif"))
	{
        int i;
		if(MATCHI(ptr,"help") || MATCHI(ptr,"-help") || MATCHI(ptr,"-?") )
   1b9d0:	68 e7       	ldi	r22, 0x78	; 120
   1b9d2:	76 e1       	ldi	r23, 0x16	; 22
   1b9d4:	c7 01       	movw	r24, r14
   1b9d6:	0e 94 9f 30 	call	0x613e	; 0x613e <MATCHI>
   1b9da:	89 2b       	or	r24, r25
   1b9dc:	71 f7       	brne	.-36     	; 0x1b9ba <lif_tests+0x2fc>
   1b9de:	6e e7       	ldi	r22, 0x7E	; 126
   1b9e0:	76 e1       	ldi	r23, 0x16	; 22
   1b9e2:	c7 01       	movw	r24, r14
   1b9e4:	0e 94 9f 30 	call	0x613e	; 0x613e <MATCHI>
   1b9e8:	89 2b       	or	r24, r25
   1b9ea:	39 f7       	brne	.-50     	; 0x1b9ba <lif_tests+0x2fc>
   1b9ec:	70 ce       	rjmp	.-800    	; 0x1b6ce <lif_tests+0x10>

// Argument 1 missing ?
//        Nothing to do
// argc should really get this
    if(!ptr || !*ptr)
        return(1);
   1b9ee:	81 e0       	ldi	r24, 0x01	; 1
        td02lif(argc,argv);
        return(1);
#endif
    }
    return(0);
}
   1b9f0:	90 e0       	ldi	r25, 0x00	; 0
   1b9f2:	cd b7       	in	r28, 0x3d	; 61
   1b9f4:	de b7       	in	r29, 0x3e	; 62
   1b9f6:	25 96       	adiw	r28, 0x05	; 5
   1b9f8:	ec e0       	ldi	r30, 0x0C	; 12
   1b9fa:	2d c6       	rjmp	.+3162   	; 0x1c656 <__epilogue_restores__+0xc>

0001b9fc <lcd_task>:
static int16_t lcd_display_time = 0;

///@brief LCD timer function called at 1000HZ
void lcd_task()
{
	++lcd_display_time;
   1b9fc:	80 91 f6 19 	lds	r24, 0x19F6	; 0x8019f6 <lcd_display_time>
   1ba00:	90 91 f7 19 	lds	r25, 0x19F7	; 0x8019f7 <lcd_display_time+0x1>
   1ba04:	01 96       	adiw	r24, 0x01	; 1
   1ba06:	90 93 f7 19 	sts	0x19F7, r25	; 0x8019f7 <lcd_display_time+0x1>
   1ba0a:	80 93 f6 19 	sts	0x19F6, r24	; 0x8019f6 <lcd_display_time>
   1ba0e:	08 95       	ret

0001ba10 <copyright>:
int8_t debug_input = 0;

///@brief Display Copyright
///@return void
void copyright()
{
   1ba10:	00 d0       	rcall	.+0      	; 0x1ba12 <copyright+0x2>
   1ba12:	00 d0       	rcall	.+0      	; 0x1ba14 <copyright+0x4>
   1ba14:	1f 92       	push	r1
    printf("Stand alone version of LIF utilities for linux\n");
   1ba16:	85 e4       	ldi	r24, 0x45	; 69
   1ba18:	98 e4       	ldi	r25, 0x48	; 72
   1ba1a:	a0 e0       	ldi	r26, 0x00	; 0
   1ba1c:	ed b7       	in	r30, 0x3d	; 61
   1ba1e:	fe b7       	in	r31, 0x3e	; 62
   1ba20:	81 83       	std	Z+1, r24	; 0x01
   1ba22:	92 83       	std	Z+2, r25	; 0x02
   1ba24:	a3 83       	std	Z+3, r26	; 0x03
   1ba26:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    printf("HP85 Disk and Device Emulator\n");
   1ba2a:	86 e2       	ldi	r24, 0x26	; 38
   1ba2c:	98 e4       	ldi	r25, 0x48	; 72
   1ba2e:	a0 e0       	ldi	r26, 0x00	; 0
   1ba30:	ed b7       	in	r30, 0x3d	; 61
   1ba32:	fe b7       	in	r31, 0x3e	; 62
   1ba34:	81 83       	std	Z+1, r24	; 0x01
   1ba36:	92 83       	std	Z+2, r25	; 0x02
   1ba38:	a3 83       	std	Z+3, r26	; 0x03
   1ba3a:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    printf(" (c) 2014-2020 by Mike Gore\n");
   1ba3e:	89 e0       	ldi	r24, 0x09	; 9
   1ba40:	98 e4       	ldi	r25, 0x48	; 72
   1ba42:	a0 e0       	ldi	r26, 0x00	; 0
   1ba44:	ed b7       	in	r30, 0x3d	; 61
   1ba46:	fe b7       	in	r31, 0x3e	; 62
   1ba48:	81 83       	std	Z+1, r24	; 0x01
   1ba4a:	92 83       	std	Z+2, r25	; 0x02
   1ba4c:	a3 83       	std	Z+3, r26	; 0x03
   1ba4e:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    printf(" GNU version 3\n");
   1ba52:	89 ef       	ldi	r24, 0xF9	; 249
   1ba54:	97 e4       	ldi	r25, 0x47	; 71
   1ba56:	a0 e0       	ldi	r26, 0x00	; 0
   1ba58:	ed b7       	in	r30, 0x3d	; 61
   1ba5a:	fe b7       	in	r31, 0x3e	; 62
   1ba5c:	81 83       	std	Z+1, r24	; 0x01
   1ba5e:	92 83       	std	Z+2, r25	; 0x02
   1ba60:	a3 83       	std	Z+3, r26	; 0x03
   1ba62:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    printf("-> https://github.com/magore/hp85disk\n");
   1ba66:	82 ed       	ldi	r24, 0xD2	; 210
   1ba68:	97 e4       	ldi	r25, 0x47	; 71
   1ba6a:	a0 e0       	ldi	r26, 0x00	; 0
   1ba6c:	ed b7       	in	r30, 0x3d	; 61
   1ba6e:	fe b7       	in	r31, 0x3e	; 62
   1ba70:	81 83       	std	Z+1, r24	; 0x01
   1ba72:	92 83       	std	Z+2, r25	; 0x02
   1ba74:	a3 83       	std	Z+3, r26	; 0x03
   1ba76:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    printf("   GIT last pushed:   %s\n", GIT_VERSION);
   1ba7a:	83 ec       	ldi	r24, 0xC3	; 195
   1ba7c:	96 e1       	ldi	r25, 0x16	; 22
   1ba7e:	ed b7       	in	r30, 0x3d	; 61
   1ba80:	fe b7       	in	r31, 0x3e	; 62
   1ba82:	95 83       	std	Z+5, r25	; 0x05
   1ba84:	84 83       	std	Z+4, r24	; 0x04
   1ba86:	88 eb       	ldi	r24, 0xB8	; 184
   1ba88:	97 e4       	ldi	r25, 0x47	; 71
   1ba8a:	a0 e0       	ldi	r26, 0x00	; 0
   1ba8c:	81 83       	std	Z+1, r24	; 0x01
   1ba8e:	92 83       	std	Z+2, r25	; 0x02
   1ba90:	a3 83       	std	Z+3, r26	; 0x03
   1ba92:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    printf("   Last updated file: %s\n", LOCAL_MOD);
   1ba96:	87 ee       	ldi	r24, 0xE7	; 231
   1ba98:	96 e1       	ldi	r25, 0x16	; 22
   1ba9a:	ed b7       	in	r30, 0x3d	; 61
   1ba9c:	fe b7       	in	r31, 0x3e	; 62
   1ba9e:	95 83       	std	Z+5, r25	; 0x05
   1baa0:	84 83       	std	Z+4, r24	; 0x04
   1baa2:	8e e9       	ldi	r24, 0x9E	; 158
   1baa4:	97 e4       	ldi	r25, 0x47	; 71
   1baa6:	a0 e0       	ldi	r26, 0x00	; 0
   1baa8:	81 83       	std	Z+1, r24	; 0x01
   1baaa:	92 83       	std	Z+2, r25	; 0x02
   1baac:	a3 83       	std	Z+3, r26	; 0x03
   1baae:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    printf("\n");
   1bab2:	8c e9       	ldi	r24, 0x9C	; 156
   1bab4:	97 e4       	ldi	r25, 0x47	; 71
   1bab6:	a0 e0       	ldi	r26, 0x00	; 0
   1bab8:	ed b7       	in	r30, 0x3d	; 61
   1baba:	fe b7       	in	r31, 0x3e	; 62
   1babc:	81 83       	std	Z+1, r24	; 0x01
   1babe:	92 83       	std	Z+2, r25	; 0x02
   1bac0:	a3 83       	std	Z+3, r26	; 0x03
   1bac2:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
}
   1bac6:	0f 90       	pop	r0
   1bac8:	0f 90       	pop	r0
   1baca:	0f 90       	pop	r0
   1bacc:	0f 90       	pop	r0
   1bace:	0f 90       	pop	r0
   1bad0:	08 95       	ret

0001bad2 <lcd_time>:
/// - Example output: "Thu Dec  8 21:45:05 EST 2011".
///
/// @return buf string pointer.
MEMSPACE
char *lcd_time(tm_t *t, char *buf, int max)
{
   1bad2:	a1 e1       	ldi	r26, 0x11	; 17
   1bad4:	b0 e0       	ldi	r27, 0x00	; 0
   1bad6:	ee e6       	ldi	r30, 0x6E	; 110
   1bad8:	fd ed       	ldi	r31, 0xDD	; 221
   1bada:	a7 c5       	rjmp	.+2894   	; 0x1c62a <__prologue_saves__+0x18>
   1badc:	ec 01       	movw	r28, r24
   1bade:	7b 01       	movw	r14, r22
   1bae0:	8a 01       	movw	r16, r20
// normaize tm_t before output
    (void) normalize(t,0);
   1bae2:	60 e0       	ldi	r22, 0x00	; 0
   1bae4:	70 e0       	ldi	r23, 0x00	; 0
   1bae6:	0e 94 f1 36 	call	0x6de2	; 0x6de2 <normalize>
    memset(buf,0,max);
   1baea:	a8 01       	movw	r20, r16
   1baec:	60 e0       	ldi	r22, 0x00	; 0
   1baee:	70 e0       	ldi	r23, 0x00	; 0
   1baf0:	c7 01       	movw	r24, r14
   1baf2:	0e 94 01 e7 	call	0x1ce02	; 0x1ce02 <memset>
    snprintf(buf,max-1,"%s %2d %02d:%02d:%02d",
   1baf6:	88 85       	ldd	r24, Y+8	; 0x08
   1baf8:	99 85       	ldd	r25, Y+9	; 0x09
   1bafa:	0e 94 d6 34 	call	0x69ac	; 0x69ac <tm_mon_to_ascii>
   1bafe:	28 81       	ld	r18, Y
   1bb00:	39 81       	ldd	r19, Y+1	; 0x01
   1bb02:	ed b7       	in	r30, 0x3d	; 61
   1bb04:	fe b7       	in	r31, 0x3e	; 62
   1bb06:	31 8b       	std	Z+17, r19	; 0x11
   1bb08:	20 8b       	std	Z+16, r18	; 0x10
   1bb0a:	2a 81       	ldd	r18, Y+2	; 0x02
   1bb0c:	3b 81       	ldd	r19, Y+3	; 0x03
   1bb0e:	37 87       	std	Z+15, r19	; 0x0f
   1bb10:	26 87       	std	Z+14, r18	; 0x0e
   1bb12:	2c 81       	ldd	r18, Y+4	; 0x04
   1bb14:	3d 81       	ldd	r19, Y+5	; 0x05
   1bb16:	35 87       	std	Z+13, r19	; 0x0d
   1bb18:	24 87       	std	Z+12, r18	; 0x0c
   1bb1a:	2e 81       	ldd	r18, Y+6	; 0x06
   1bb1c:	3f 81       	ldd	r19, Y+7	; 0x07
   1bb1e:	33 87       	std	Z+11, r19	; 0x0b
   1bb20:	22 87       	std	Z+10, r18	; 0x0a
   1bb22:	91 87       	std	Z+9, r25	; 0x09
   1bb24:	80 87       	std	Z+8, r24	; 0x08
   1bb26:	86 e8       	ldi	r24, 0x86	; 134
   1bb28:	97 e4       	ldi	r25, 0x47	; 71
   1bb2a:	a0 e0       	ldi	r26, 0x00	; 0
   1bb2c:	85 83       	std	Z+5, r24	; 0x05
   1bb2e:	96 83       	std	Z+6, r25	; 0x06
   1bb30:	a7 83       	std	Z+7, r26	; 0x07
   1bb32:	01 50       	subi	r16, 0x01	; 1
   1bb34:	11 09       	sbc	r17, r1
   1bb36:	14 83       	std	Z+4, r17	; 0x04
   1bb38:	03 83       	std	Z+3, r16	; 0x03
   1bb3a:	f2 82       	std	Z+2, r15	; 0x02
   1bb3c:	e1 82       	std	Z+1, r14	; 0x01
   1bb3e:	0e 94 2a 45 	call	0x8a54	; 0x8a54 <snprintf_P>
        (int)t->tm_mday,
        (int)t->tm_hour,
        (int)t->tm_min,
        (int)t->tm_sec);
    return(buf);
}
   1bb42:	c7 01       	movw	r24, r14
   1bb44:	cd b7       	in	r28, 0x3d	; 61
   1bb46:	de b7       	in	r29, 0x3e	; 62
   1bb48:	61 96       	adiw	r28, 0x11	; 17
   1bb4a:	e6 e0       	ldi	r30, 0x06	; 6
   1bb4c:	8a c5       	rjmp	.+2836   	; 0x1c662 <__epilogue_restores__+0x18>

0001bb4e <lcd_backlight>:

///@brief lcd_backlight LCD Backlight settings
/// @param[in] rgb: hex value 0xRRGGBB, RR,GG,BB values are 0 to 255
uint8_t  _backlight[5] = { 0x7c, '+', 0x80, 0x80, 0x80 };	/* Backlight half bright */
uint8_t lcd_backlight(uint32_t rgb)
{
   1bb4e:	cf 93       	push	r28
   1bb50:	00 d0       	rcall	.+0      	; 0x1bb52 <lcd_backlight+0x4>
   1bb52:	1f 92       	push	r1

	_backlight[2] = 0xff & (rgb >> 16);
   1bb54:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <_backlight+0x2>
	_backlight[3] = 0xff & (rgb >> 8);
   1bb58:	70 93 f3 02 	sts	0x02F3, r23	; 0x8002f3 <_backlight+0x3>
	_backlight[4] = 0xff & (rgb );
   1bb5c:	60 93 f4 02 	sts	0x02F4, r22	; 0x8002f4 <_backlight+0x4>

	if(! i2c_fn(0x72, TW_WRITE, _backlight, sizeof(_backlight)) )
   1bb60:	25 e0       	ldi	r18, 0x05	; 5
   1bb62:	40 ef       	ldi	r20, 0xF0	; 240
   1bb64:	52 e0       	ldi	r21, 0x02	; 2
   1bb66:	60 e0       	ldi	r22, 0x00	; 0
   1bb68:	82 e7       	ldi	r24, 0x72	; 114
   1bb6a:	0e 94 69 2b 	call	0x56d2	; 0x56d2 <i2c_fn>
   1bb6e:	c8 2f       	mov	r28, r24
   1bb70:	81 11       	cpse	r24, r1
   1bb72:	0d c0       	rjmp	.+26     	; 0x1bb8e <lcd_backlight+0x40>
	{
		i2c_display_task_errors();
   1bb74:	0e 94 6d 2d 	call	0x5ada	; 0x5ada <i2c_display_task_errors>
        printf("I2C LCD is NOT attached!\n");
   1bb78:	8c e6       	ldi	r24, 0x6C	; 108
   1bb7a:	97 e4       	ldi	r25, 0x47	; 71
   1bb7c:	a0 e0       	ldi	r26, 0x00	; 0
   1bb7e:	ed b7       	in	r30, 0x3d	; 61
   1bb80:	fe b7       	in	r31, 0x3e	; 62
   1bb82:	81 83       	std	Z+1, r24	; 0x01
   1bb84:	92 83       	std	Z+2, r25	; 0x02
   1bb86:	a3 83       	std	Z+3, r26	; 0x03
   1bb88:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   1bb8c:	01 c0       	rjmp	.+2      	; 0x1bb90 <lcd_backlight+0x42>
		return(0);
	}
	return(1);
   1bb8e:	c1 e0       	ldi	r28, 0x01	; 1
}
   1bb90:	8c 2f       	mov	r24, r28
   1bb92:	0f 90       	pop	r0
   1bb94:	0f 90       	pop	r0
   1bb96:	0f 90       	pop	r0
   1bb98:	cf 91       	pop	r28
   1bb9a:	08 95       	ret

0001bb9c <lcd_setup>:
///@brief LCD setup code
/// For a SparkFun SERLCD 2x16 display
/// Initializes the I2C deiplay update task structure 
/// Passes the structures to the interrupt handler
void lcd_setup()
{
   1bb9c:	cf 93       	push	r28
   1bb9e:	ad b7       	in	r26, 0x3d	; 61
   1bba0:	be b7       	in	r27, 0x3e	; 62
   1bba2:	17 97       	sbiw	r26, 0x07	; 7
   1bba4:	0f b6       	in	r0, 0x3f	; 63
   1bba6:	f8 94       	cli
   1bba8:	be bf       	out	0x3e, r27	; 62
   1bbaa:	0f be       	out	0x3f, r0	; 63
   1bbac:	ad bf       	out	0x3d, r26	; 61
	int ind = 0;
    uint8_t sreg = SREG;
   1bbae:	cf b7       	in	r28, 0x3f	; 63

    printf("I2C LCD initialization start\n");
   1bbb0:	8e e4       	ldi	r24, 0x4E	; 78
   1bbb2:	97 e4       	ldi	r25, 0x47	; 71
   1bbb4:	a0 e0       	ldi	r26, 0x00	; 0
   1bbb6:	ed b7       	in	r30, 0x3d	; 61
   1bbb8:	fe b7       	in	r31, 0x3e	; 62
   1bbba:	81 83       	std	Z+1, r24	; 0x01
   1bbbc:	92 83       	std	Z+2, r25	; 0x02
   1bbbe:	a3 83       	std	Z+3, r26	; 0x03
   1bbc0:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>

	if(set_timers(lcd_task,1) == -1)
   1bbc4:	61 e0       	ldi	r22, 0x01	; 1
   1bbc6:	70 e0       	ldi	r23, 0x00	; 0
   1bbc8:	8e ef       	ldi	r24, 0xFE	; 254
   1bbca:	9c ed       	ldi	r25, 0xDC	; 220
   1bbcc:	0e 94 00 33 	call	0x6600	; 0x6600 <set_timers>
   1bbd0:	01 96       	adiw	r24, 0x01	; 1
   1bbd2:	51 f4       	brne	.+20     	; 0x1bbe8 <lcd_setup+0x4c>
        printf("lcd_task init failed\n");
   1bbd4:	88 e3       	ldi	r24, 0x38	; 56
   1bbd6:	97 e4       	ldi	r25, 0x47	; 71
   1bbd8:	a0 e0       	ldi	r26, 0x00	; 0
   1bbda:	ed b7       	in	r30, 0x3d	; 61
   1bbdc:	fe b7       	in	r31, 0x3e	; 62
   1bbde:	81 83       	std	Z+1, r24	; 0x01
   1bbe0:	92 83       	std	Z+2, r25	; 0x02
   1bbe2:	a3 83       	std	Z+3, r26	; 0x03
   1bbe4:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>

	i2c_init(100000);
   1bbe8:	60 ea       	ldi	r22, 0xA0	; 160
   1bbea:	76 e8       	ldi	r23, 0x86	; 134
   1bbec:	81 e0       	ldi	r24, 0x01	; 1
   1bbee:	90 e0       	ldi	r25, 0x00	; 0
   1bbf0:	0e 94 70 2a 	call	0x54e0	; 0x54e0 <i2c_init>

	i2c_task_init();
   1bbf4:	0e 94 31 2a 	call	0x5462	; 0x5462 <i2c_task_init>

	cli();
   1bbf8:	f8 94       	cli

	// Default startup message
    sprintf((char *) _line1, "%-16s", "HP85Disk V2");
   1bbfa:	8b e0       	ldi	r24, 0x0B	; 11
   1bbfc:	97 e1       	ldi	r25, 0x17	; 23
   1bbfe:	ed b7       	in	r30, 0x3d	; 61
   1bc00:	fe b7       	in	r31, 0x3e	; 62
   1bc02:	97 83       	std	Z+7, r25	; 0x07
   1bc04:	86 83       	std	Z+6, r24	; 0x06
   1bc06:	82 e3       	ldi	r24, 0x32	; 50
   1bc08:	97 e4       	ldi	r25, 0x47	; 71
   1bc0a:	a0 e0       	ldi	r26, 0x00	; 0
   1bc0c:	83 83       	std	Z+3, r24	; 0x03
   1bc0e:	94 83       	std	Z+4, r25	; 0x04
   1bc10:	a5 83       	std	Z+5, r26	; 0x05
   1bc12:	8c e0       	ldi	r24, 0x0C	; 12
   1bc14:	93 e0       	ldi	r25, 0x03	; 3
   1bc16:	92 83       	std	Z+2, r25	; 0x02
   1bc18:	81 83       	std	Z+1, r24	; 0x01
   1bc1a:	0e 94 3e 45 	call	0x8a7c	; 0x8a7c <sprintf_P>
    sprintf((char *) _line2, "%-16s", "(C)Mike Gore");
   1bc1e:	87 e1       	ldi	r24, 0x17	; 23
   1bc20:	97 e1       	ldi	r25, 0x17	; 23
   1bc22:	ed b7       	in	r30, 0x3d	; 61
   1bc24:	fe b7       	in	r31, 0x3e	; 62
   1bc26:	97 83       	std	Z+7, r25	; 0x07
   1bc28:	86 83       	std	Z+6, r24	; 0x06
   1bc2a:	8c e2       	ldi	r24, 0x2C	; 44
   1bc2c:	97 e4       	ldi	r25, 0x47	; 71
   1bc2e:	a0 e0       	ldi	r26, 0x00	; 0
   1bc30:	83 83       	std	Z+3, r24	; 0x03
   1bc32:	94 83       	std	Z+4, r25	; 0x04
   1bc34:	a5 83       	std	Z+5, r26	; 0x05
   1bc36:	85 ef       	ldi	r24, 0xF5	; 245
   1bc38:	92 e0       	ldi	r25, 0x02	; 2
   1bc3a:	92 83       	std	Z+2, r25	; 0x02
   1bc3c:	81 83       	std	Z+1, r24	; 0x01
   1bc3e:	0e 94 3e 45 	call	0x8a7c	; 0x8a7c <sprintf_P>

	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _cmd1, sizeof(_cmd1));
   1bc42:	22 e0       	ldi	r18, 0x02	; 2
   1bc44:	41 e2       	ldi	r20, 0x21	; 33
   1bc46:	53 e0       	ldi	r21, 0x03	; 3
   1bc48:	60 e0       	ldi	r22, 0x00	; 0
   1bc4a:	82 e7       	ldi	r24, 0x72	; 114
   1bc4c:	0e 94 46 2a 	call	0x548c	; 0x548c <i2c_task_op_add>
   1bc50:	90 93 63 17 	sts	0x1763, r25	; 0x801763 <i2c_task_op+0x1>
   1bc54:	80 93 62 17 	sts	0x1762, r24	; 0x801762 <i2c_task_op>
	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _line1, 16);
   1bc58:	20 e1       	ldi	r18, 0x10	; 16
   1bc5a:	4c e0       	ldi	r20, 0x0C	; 12
   1bc5c:	53 e0       	ldi	r21, 0x03	; 3
   1bc5e:	60 e0       	ldi	r22, 0x00	; 0
   1bc60:	82 e7       	ldi	r24, 0x72	; 114
   1bc62:	0e 94 46 2a 	call	0x548c	; 0x548c <i2c_task_op_add>
   1bc66:	90 93 65 17 	sts	0x1765, r25	; 0x801765 <i2c_task_op+0x3>
   1bc6a:	80 93 64 17 	sts	0x1764, r24	; 0x801764 <i2c_task_op+0x2>
	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _cmd2, sizeof(_cmd2));
   1bc6e:	22 e0       	ldi	r18, 0x02	; 2
   1bc70:	4a e0       	ldi	r20, 0x0A	; 10
   1bc72:	53 e0       	ldi	r21, 0x03	; 3
   1bc74:	60 e0       	ldi	r22, 0x00	; 0
   1bc76:	82 e7       	ldi	r24, 0x72	; 114
   1bc78:	0e 94 46 2a 	call	0x548c	; 0x548c <i2c_task_op_add>
   1bc7c:	90 93 67 17 	sts	0x1767, r25	; 0x801767 <i2c_task_op+0x5>
   1bc80:	80 93 66 17 	sts	0x1766, r24	; 0x801766 <i2c_task_op+0x4>
	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _line2, 16);
   1bc84:	20 e1       	ldi	r18, 0x10	; 16
   1bc86:	45 ef       	ldi	r20, 0xF5	; 245
   1bc88:	52 e0       	ldi	r21, 0x02	; 2
   1bc8a:	60 e0       	ldi	r22, 0x00	; 0
   1bc8c:	82 e7       	ldi	r24, 0x72	; 114
   1bc8e:	0e 94 46 2a 	call	0x548c	; 0x548c <i2c_task_op_add>
   1bc92:	90 93 69 17 	sts	0x1769, r25	; 0x801769 <i2c_task_op+0x7>
   1bc96:	80 93 68 17 	sts	0x1768, r24	; 0x801768 <i2c_task_op+0x6>

	SREG = sreg;
   1bc9a:	cf bf       	out	0x3f, r28	; 63

    i2c_task_run();
   1bc9c:	0e 94 06 2b 	call	0x560c	; 0x560c <i2c_task_run>
	// wait long enough for us to see the startup message
    delayms(1000);
   1bca0:	68 ee       	ldi	r22, 0xE8	; 232
   1bca2:	73 e0       	ldi	r23, 0x03	; 3
   1bca4:	80 e0       	ldi	r24, 0x00	; 0
   1bca6:	90 e0       	ldi	r25, 0x00	; 0
   1bca8:	0e 94 ac 26 	call	0x4d58	; 0x4d58 <delayms>
	
	// Verify the task finished - it normally takes < 30mS
    if(!i2c_task_done())
   1bcac:	0e 94 e7 2a 	call	0x55ce	; 0x55ce <i2c_task_done>
   1bcb0:	81 11       	cpse	r24, r1
   1bcb2:	0c c0       	rjmp	.+24     	; 0x1bccc <lcd_setup+0x130>
	{
		i2c_display_task_errors();
   1bcb4:	0e 94 6d 2d 	call	0x5ada	; 0x5ada <i2c_display_task_errors>
        printf("I2C LCD is NOT attached!\n");
   1bcb8:	82 e1       	ldi	r24, 0x12	; 18
   1bcba:	97 e4       	ldi	r25, 0x47	; 71
   1bcbc:	a0 e0       	ldi	r26, 0x00	; 0
   1bcbe:	ed b7       	in	r30, 0x3d	; 61
   1bcc0:	fe b7       	in	r31, 0x3e	; 62
   1bcc2:	81 83       	std	Z+1, r24	; 0x01
   1bcc4:	92 83       	std	Z+2, r25	; 0x02
   1bcc6:	a3 83       	std	Z+3, r26	; 0x03
   1bcc8:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
	}

    sep();
   1bccc:	0e 94 61 30 	call	0x60c2	; 0x60c2 <sep>
}
   1bcd0:	ad b7       	in	r26, 0x3d	; 61
   1bcd2:	be b7       	in	r27, 0x3e	; 62
   1bcd4:	17 96       	adiw	r26, 0x07	; 7
   1bcd6:	0f b6       	in	r0, 0x3f	; 63
   1bcd8:	f8 94       	cli
   1bcda:	be bf       	out	0x3e, r27	; 62
   1bcdc:	0f be       	out	0x3f, r0	; 63
   1bcde:	ad bf       	out	0x3d, r26	; 61
   1bce0:	cf 91       	pop	r28
   1bce2:	08 95       	ret

0001bce4 <i2c_lcd_task>:


///@brief Update the LCD wile the system is running
/// Display SD card fault status and the current time
void i2c_lcd_task()
{
   1bce4:	af e2       	ldi	r26, 0x2F	; 47
   1bce6:	b0 e0       	ldi	r27, 0x00	; 0
   1bce8:	e7 e7       	ldi	r30, 0x77	; 119
   1bcea:	fe ed       	ldi	r31, 0xDE	; 222
   1bcec:	a1 c4       	rjmp	.+2370   	; 0x1c630 <__prologue_saves__+0x1e>
	char buf[32];
	uint8_t sreg=SREG;
   1bcee:	1f b7       	in	r17, 0x3f	; 63
    ts_t ts;

	cli();
   1bcf0:	f8 94       	cli
	if(!mmc_ins_status())
   1bcf2:	0e 94 40 6d 	call	0xda80	; 0xda80 <mmc_ins_status>
   1bcf6:	89 2b       	or	r24, r25
   1bcf8:	49 f4       	brne	.+18     	; 0x1bd0c <i2c_lcd_task+0x28>
	{
		sprintf((char *) _line2,"%-16s", "SD Card Fault");
   1bcfa:	84 e2       	ldi	r24, 0x24	; 36
   1bcfc:	97 e1       	ldi	r25, 0x17	; 23
   1bcfe:	ed b7       	in	r30, 0x3d	; 61
   1bd00:	fe b7       	in	r31, 0x3e	; 62
   1bd02:	97 83       	std	Z+7, r25	; 0x07
   1bd04:	86 83       	std	Z+6, r24	; 0x06
   1bd06:	8c e0       	ldi	r24, 0x0C	; 12
   1bd08:	97 e4       	ldi	r25, 0x47	; 71
   1bd0a:	17 c0       	rjmp	.+46     	; 0x1bd3a <i2c_lcd_task+0x56>
	}
	else
	{
		clock_gettime(0, (ts_t *) &ts);
   1bd0c:	be 01       	movw	r22, r28
   1bd0e:	68 5d       	subi	r22, 0xD8	; 216
   1bd10:	7f 4f       	sbci	r23, 0xFF	; 255
   1bd12:	80 e0       	ldi	r24, 0x00	; 0
   1bd14:	90 e0       	ldi	r25, 0x00	; 0
   1bd16:	0e 94 10 32 	call	0x6420	; 0x6420 <clock_gettime>
		sprintf((char *) _line2, "%-16s", lcd_time(gmtime(&(ts.tv_sec)),buf,sizeof(buf)-1) );
   1bd1a:	ce 01       	movw	r24, r28
   1bd1c:	88 96       	adiw	r24, 0x28	; 40
   1bd1e:	0e 94 fa 35 	call	0x6bf4	; 0x6bf4 <gmtime>
   1bd22:	4f e1       	ldi	r20, 0x1F	; 31
   1bd24:	50 e0       	ldi	r21, 0x00	; 0
   1bd26:	be 01       	movw	r22, r28
   1bd28:	68 5f       	subi	r22, 0xF8	; 248
   1bd2a:	7f 4f       	sbci	r23, 0xFF	; 255
   1bd2c:	d2 de       	rcall	.-604    	; 0x1bad2 <lcd_time>
   1bd2e:	ed b7       	in	r30, 0x3d	; 61
   1bd30:	fe b7       	in	r31, 0x3e	; 62
   1bd32:	97 83       	std	Z+7, r25	; 0x07
   1bd34:	86 83       	std	Z+6, r24	; 0x06
   1bd36:	86 e0       	ldi	r24, 0x06	; 6
   1bd38:	97 e4       	ldi	r25, 0x47	; 71
   1bd3a:	a0 e0       	ldi	r26, 0x00	; 0
   1bd3c:	83 83       	std	Z+3, r24	; 0x03
   1bd3e:	94 83       	std	Z+4, r25	; 0x04
   1bd40:	a5 83       	std	Z+5, r26	; 0x05
   1bd42:	85 ef       	ldi	r24, 0xF5	; 245
   1bd44:	92 e0       	ldi	r25, 0x02	; 2
   1bd46:	92 83       	std	Z+2, r25	; 0x02
   1bd48:	81 83       	std	Z+1, r24	; 0x01
   1bd4a:	0e 94 3e 45 	call	0x8a7c	; 0x8a7c <sprintf_P>
		// sprintf((char *) _line2,"%16ld.%03ld", (long) ts.tv_sec, (long) ts.tv_nsec / 1000000UL);
	}
	SREG=sreg;
   1bd4e:	1f bf       	out	0x3f, r17	; 63

    i2c_task_run();
   1bd50:	0e 94 06 2b 	call	0x560c	; 0x560c <i2c_task_run>
}
   1bd54:	af 96       	adiw	r28, 0x2f	; 47
   1bd56:	e3 e0       	ldi	r30, 0x03	; 3
   1bd58:	87 c4       	rjmp	.+2318   	; 0x1c668 <__epilogue_restores__+0x1e>

0001bd5a <gpib_user_task>:
///@brief GPIB callback from gpib_read_byte()
/// This function gets called evry time trough the read loop
/// This task run in the forground - is not an interrupt task
void gpib_user_task()
{
	uint8_t sreg = SREG;
   1bd5a:	8f b7       	in	r24, 0x3f	; 63

	cli();
   1bd5c:	f8 94       	cli
	if(lcd_display_time > 100) // increments at 1000HZ
   1bd5e:	20 91 f6 19 	lds	r18, 0x19F6	; 0x8019f6 <lcd_display_time>
   1bd62:	30 91 f7 19 	lds	r19, 0x19F7	; 0x8019f7 <lcd_display_time+0x1>
   1bd66:	25 36       	cpi	r18, 0x65	; 101
   1bd68:	31 05       	cpc	r19, r1
   1bd6a:	3c f0       	brlt	.+14     	; 0x1bd7a <gpib_user_task+0x20>
	{
		lcd_display_time = 0;
   1bd6c:	10 92 f7 19 	sts	0x19F7, r1	; 0x8019f7 <lcd_display_time+0x1>
   1bd70:	10 92 f6 19 	sts	0x19F6, r1	; 0x8019f6 <lcd_display_time>
		SREG = sreg;
   1bd74:	8f bf       	out	0x3f, r24	; 63
		i2c_lcd_task();
   1bd76:	b6 cf       	rjmp	.-148    	; 0x1bce4 <i2c_lcd_task>
		return;
   1bd78:	08 95       	ret
	}
	SREG = sreg;
   1bd7a:	8f bf       	out	0x3f, r24	; 63
   1bd7c:	08 95       	ret

0001bd7e <help>:
/// @brief  Display the main help menu - calls all other help menus
/// @return  void
/// @see gpib_help()
/// @see fatfs_help()
void help()
{
   1bd7e:	00 d0       	rcall	.+0      	; 0x1bd80 <help+0x2>
   1bd80:	1f 92       	push	r1

    copyright();
   1bd82:	46 de       	rcall	.-884    	; 0x1ba10 <copyright>

#ifdef FATFS_TESTS
    fatfs_help(0);
   1bd84:	80 e0       	ldi	r24, 0x00	; 0
   1bd86:	90 e0       	ldi	r25, 0x00	; 0
   1bd88:	0e 94 57 71 	call	0xe2ae	; 0xe2ae <fatfs_help>
#endif

#ifdef POSIX_TESTS
    posix_help(0);
   1bd8c:	80 e0       	ldi	r24, 0x00	; 0
   1bd8e:	90 e0       	ldi	r25, 0x00	; 0
   1bd90:	0e 94 b7 7c 	call	0xf96e	; 0xf96e <posix_help>
#endif

#ifdef LIF_SUPPORT
    lif_help(0);
   1bd94:	80 e0       	ldi	r24, 0x00	; 0
   1bd96:	90 e0       	ldi	r25, 0x00	; 0
   1bd98:	0e 94 29 bd 	call	0x17a52	; 0x17a52 <lif_help>
#endif
#ifdef TELEDISK
    td0_help(0);
#endif

    gpib_help(0);
   1bd9c:	80 e0       	ldi	r24, 0x00	; 0
   1bd9e:	90 e0       	ldi	r25, 0x00	; 0
   1bda0:	0e 94 10 90 	call	0x12020	; 0x12020 <gpib_help>

    printf(
   1bda4:	82 e6       	ldi	r24, 0x62	; 98
   1bda6:	96 e4       	ldi	r25, 0x46	; 70
   1bda8:	a0 e0       	ldi	r26, 0x00	; 0
   1bdaa:	ed b7       	in	r30, 0x3d	; 61
   1bdac:	fe b7       	in	r31, 0x3e	; 62
   1bdae:	81 83       	std	Z+1, r24	; 0x01
   1bdb0:	92 83       	std	Z+2, r25	; 0x02
   1bdb2:	a3 83       	std	Z+3, r26	; 0x03
   1bdb4:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
        "reset   - reset emulator\n"
        "setdate - set date\n"
        "time    - display current time\n"
        "\n"
        );
}
   1bdb8:	0f 90       	pop	r0
   1bdba:	0f 90       	pop	r0
   1bdbc:	0f 90       	pop	r0
   1bdbe:	08 95       	ret

0001bdc0 <user_task.part.1>:
/// If a keypress is detected read a line from the uart
/// parse the result and call various user functions.
/// ? will return a list of fuctions and paramters permitted
/// @param[in] gpib - if non-zero run gpib while there are no user commands
/// @return  void
void user_task(uint8_t gpib)
   1bdc0:	6f 92       	push	r6
   1bdc2:	7f 92       	push	r7
   1bdc4:	8f 92       	push	r8
   1bdc6:	cf 92       	push	r12
   1bdc8:	df 92       	push	r13
   1bdca:	ef 92       	push	r14
   1bdcc:	ff 92       	push	r15
   1bdce:	0f 93       	push	r16
   1bdd0:	1f 93       	push	r17
   1bdd2:	cf 93       	push	r28
   1bdd4:	df 93       	push	r29
   1bdd6:	cd b7       	in	r28, 0x3d	; 61
   1bdd8:	de b7       	in	r29, 0x3e	; 62
   1bdda:	cb 56       	subi	r28, 0x6B	; 107
   1bddc:	d1 40       	sbci	r29, 0x01	; 1
   1bdde:	0f b6       	in	r0, 0x3f	; 63
   1bde0:	f8 94       	cli
   1bde2:	de bf       	out	0x3e, r29	; 62
   1bde4:	0f be       	out	0x3f, r0	; 63
   1bde6:	cd bf       	out	0x3d, r28	; 61
        gpib_task();

    if(!kbhit(0))
        return;

    printf("\n>");
   1bde8:	8f e5       	ldi	r24, 0x5F	; 95
   1bdea:	96 e4       	ldi	r25, 0x46	; 70
   1bdec:	a0 e0       	ldi	r26, 0x00	; 0
   1bdee:	ed b7       	in	r30, 0x3d	; 61
   1bdf0:	fe b7       	in	r31, 0x3e	; 62
   1bdf2:	81 83       	std	Z+1, r24	; 0x01
   1bdf4:	92 83       	std	Z+2, r25	; 0x02
   1bdf6:	a3 83       	std	Z+3, r26	; 0x03
   1bdf8:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>

	memset(line,0,sizeof(line)-1);
   1bdfc:	8e 01       	movw	r16, r28
   1bdfe:	0a 5f       	subi	r16, 0xFA	; 250
   1be00:	1f 4f       	sbci	r17, 0xFF	; 255
   1be02:	8f ef       	ldi	r24, 0xFF	; 255
   1be04:	f8 01       	movw	r30, r16
   1be06:	11 92       	st	Z+, r1
   1be08:	8a 95       	dec	r24
   1be0a:	e9 f7       	brne	.-6      	; 0x1be06 <user_task.part.1+0x46>

    fgets(line,sizeof(line)-2,stdin);
   1be0c:	40 91 cb 1c 	lds	r20, 0x1CCB	; 0x801ccb <__iob>
   1be10:	50 91 cc 1c 	lds	r21, 0x1CCC	; 0x801ccc <__iob+0x1>
   1be14:	6e ef       	ldi	r22, 0xFE	; 254
   1be16:	70 e0       	ldi	r23, 0x00	; 0
   1be18:	c8 01       	movw	r24, r16
   1be1a:	0e 94 a3 74 	call	0xe946	; 0xe946 <fgets>
    trim_tail(line);
   1be1e:	c8 01       	movw	r24, r16
   1be20:	0e 94 71 30 	call	0x60e2	; 0x60e2 <trim_tail>
    argc = split_args(line,argv,50);
   1be24:	42 e3       	ldi	r20, 0x32	; 50
   1be26:	50 e0       	ldi	r21, 0x00	; 0
   1be28:	be 01       	movw	r22, r28
   1be2a:	6a 5f       	subi	r22, 0xFA	; 250
   1be2c:	7e 4f       	sbci	r23, 0xFE	; 254
   1be2e:	c8 01       	movw	r24, r16
   1be30:	0e 94 f7 30 	call	0x61ee	; 0x61ee <split_args>
   1be34:	7c 01       	movw	r14, r24

	if(debug_input)
   1be36:	80 91 f8 19 	lds	r24, 0x19F8	; 0x8019f8 <debug_input>
   1be3a:	81 11       	cpse	r24, r1
   1be3c:	0a c0       	rjmp	.+20     	; 0x1be52 <user_task.part.1+0x92>
			printf("   [%s]\n", argv[i]);
	}

    ind = 0;
	result = 0;
    ptr = argv[ind++];
   1be3e:	ca 5f       	subi	r28, 0xFA	; 250
   1be40:	de 4f       	sbci	r29, 0xFE	; 254
   1be42:	08 81       	ld	r16, Y
   1be44:	19 81       	ldd	r17, Y+1	; 0x01
   1be46:	c6 50       	subi	r28, 0x06	; 6
   1be48:	d1 40       	sbci	r29, 0x01	; 1

    if(!ptr || argc < 1)
   1be4a:	01 15       	cp	r16, r1
   1be4c:	11 05       	cpc	r17, r1
   1be4e:	51 f5       	brne	.+84     	; 0x1bea4 <user_task.part.1+0xe4>
   1be50:	b6 c0       	rjmp	.+364    	; 0x1bfbe <user_task.part.1+0x1fe>
    trim_tail(line);
    argc = split_args(line,argv,50);

	if(debug_input)
	{
        printf("Argument count = %d\n", argc);
   1be52:	ed b7       	in	r30, 0x3d	; 61
   1be54:	fe b7       	in	r31, 0x3e	; 62
   1be56:	f5 82       	std	Z+5, r15	; 0x05
   1be58:	e4 82       	std	Z+4, r14	; 0x04
   1be5a:	8a e4       	ldi	r24, 0x4A	; 74
   1be5c:	96 e4       	ldi	r25, 0x46	; 70
   1be5e:	a0 e0       	ldi	r26, 0x00	; 0
   1be60:	81 83       	std	Z+1, r24	; 0x01
   1be62:	92 83       	std	Z+2, r25	; 0x02
   1be64:	a3 83       	std	Z+3, r26	; 0x03
   1be66:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   1be6a:	ce 01       	movw	r24, r28
   1be6c:	8a 5f       	subi	r24, 0xFA	; 250
   1be6e:	9e 4f       	sbci	r25, 0xFE	; 254
   1be70:	6c 01       	movw	r12, r24
		for(i=0;i<argc;++i)
   1be72:	00 e0       	ldi	r16, 0x00	; 0
   1be74:	10 e0       	ldi	r17, 0x00	; 0
			printf("   [%s]\n", argv[i]);
   1be76:	81 e4       	ldi	r24, 0x41	; 65
   1be78:	96 e4       	ldi	r25, 0x46	; 70
   1be7a:	3c 01       	movw	r6, r24
   1be7c:	81 2c       	mov	r8, r1
    argc = split_args(line,argv,50);

	if(debug_input)
	{
        printf("Argument count = %d\n", argc);
		for(i=0;i<argc;++i)
   1be7e:	0e 15       	cp	r16, r14
   1be80:	1f 05       	cpc	r17, r15
   1be82:	ec f6       	brge	.-70     	; 0x1be3e <user_task.part.1+0x7e>
			printf("   [%s]\n", argv[i]);
   1be84:	f6 01       	movw	r30, r12
   1be86:	81 91       	ld	r24, Z+
   1be88:	91 91       	ld	r25, Z+
   1be8a:	6f 01       	movw	r12, r30
   1be8c:	ed b7       	in	r30, 0x3d	; 61
   1be8e:	fe b7       	in	r31, 0x3e	; 62
   1be90:	95 83       	std	Z+5, r25	; 0x05
   1be92:	84 83       	std	Z+4, r24	; 0x04
   1be94:	61 82       	std	Z+1, r6	; 0x01
   1be96:	72 82       	std	Z+2, r7	; 0x02
   1be98:	83 82       	std	Z+3, r8	; 0x03
   1be9a:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    argc = split_args(line,argv,50);

	if(debug_input)
	{
        printf("Argument count = %d\n", argc);
		for(i=0;i<argc;++i)
   1be9e:	0f 5f       	subi	r16, 0xFF	; 255
   1bea0:	1f 4f       	sbci	r17, 0xFF	; 255
   1bea2:	ed cf       	rjmp	.-38     	; 0x1be7e <user_task.part.1+0xbe>

    ind = 0;
	result = 0;
    ptr = argv[ind++];

    if(!ptr || argc < 1)
   1bea4:	1e 14       	cp	r1, r14
   1bea6:	1f 04       	cpc	r1, r15
   1bea8:	0c f0       	brlt	.+2      	; 0x1beac <user_task.part.1+0xec>
   1beaa:	89 c0       	rjmp	.+274    	; 0x1bfbe <user_task.part.1+0x1fe>
    {
        result = 1;
    }
    else if (MATCHI(ptr,"input") )
   1beac:	69 e3       	ldi	r22, 0x39	; 57
   1beae:	77 e1       	ldi	r23, 0x17	; 23
   1beb0:	c8 01       	movw	r24, r16
   1beb2:	0e 94 9f 30 	call	0x613e	; 0x613e <MATCHI>
   1beb6:	89 2b       	or	r24, r25
   1beb8:	d9 f0       	breq	.+54     	; 0x1bef0 <user_task.part.1+0x130>
    {
        debug_input = !debug_input;
   1beba:	80 91 f8 19 	lds	r24, 0x19F8	; 0x8019f8 <debug_input>
   1bebe:	91 e0       	ldi	r25, 0x01	; 1
   1bec0:	81 11       	cpse	r24, r1
   1bec2:	90 e0       	ldi	r25, 0x00	; 0
   1bec4:	90 93 f8 19 	sts	0x19F8, r25	; 0x8019f8 <debug_input>
		printf("Input debugging: %s\n", debug_input ? "ON" : "OFF");
   1bec8:	88 23       	and	r24, r24
   1beca:	19 f0       	breq	.+6      	; 0x1bed2 <user_task.part.1+0x112>
   1becc:	85 e3       	ldi	r24, 0x35	; 53
   1bece:	97 e1       	ldi	r25, 0x17	; 23
   1bed0:	02 c0       	rjmp	.+4      	; 0x1bed6 <user_task.part.1+0x116>
   1bed2:	82 e3       	ldi	r24, 0x32	; 50
   1bed4:	97 e1       	ldi	r25, 0x17	; 23
   1bed6:	ed b7       	in	r30, 0x3d	; 61
   1bed8:	fe b7       	in	r31, 0x3e	; 62
   1beda:	95 83       	std	Z+5, r25	; 0x05
   1bedc:	84 83       	std	Z+4, r24	; 0x04
   1bede:	8c e2       	ldi	r24, 0x2C	; 44
   1bee0:	96 e4       	ldi	r25, 0x46	; 70
   1bee2:	a0 e0       	ldi	r26, 0x00	; 0
   1bee4:	81 83       	std	Z+1, r24	; 0x01
   1bee6:	92 83       	std	Z+2, r25	; 0x02
   1bee8:	a3 83       	std	Z+3, r26	; 0x03
   1beea:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   1beee:	67 c0       	rjmp	.+206    	; 0x1bfbe <user_task.part.1+0x1fe>

    }
#endif

#ifdef LCD_SUPPORT
    else if (MATCHI(ptr,"backlight") )
   1bef0:	6f e3       	ldi	r22, 0x3F	; 63
   1bef2:	77 e1       	ldi	r23, 0x17	; 23
   1bef4:	c8 01       	movw	r24, r16
   1bef6:	0e 94 9f 30 	call	0x613e	; 0x613e <MATCHI>
   1befa:	89 2b       	or	r24, r25
   1befc:	f1 f0       	breq	.+60     	; 0x1bf3a <user_task.part.1+0x17a>
    {
		uint32_t rgb;
        ptr = argv[ind];
        if(*ptr == '=')
   1befe:	c8 5f       	subi	r28, 0xF8	; 248
   1bf00:	de 4f       	sbci	r29, 0xFE	; 254
   1bf02:	e8 81       	ld	r30, Y
   1bf04:	f9 81       	ldd	r31, Y+1	; 0x01
   1bf06:	c8 50       	subi	r28, 0x08	; 8
   1bf08:	d1 40       	sbci	r29, 0x01	; 1
   1bf0a:	80 81       	ld	r24, Z
   1bf0c:	8d 33       	cpi	r24, 0x3D	; 61
   1bf0e:	19 f4       	brne	.+6      	; 0x1bf16 <user_task.part.1+0x156>
            ++ind;
   1bf10:	82 e0       	ldi	r24, 0x02	; 2
   1bf12:	90 e0       	ldi	r25, 0x00	; 0
   1bf14:	02 c0       	rjmp	.+4      	; 0x1bf1a <user_task.part.1+0x15a>
			printf("   [%s]\n", argv[i]);
	}

    ind = 0;
	result = 0;
    ptr = argv[ind++];
   1bf16:	81 e0       	ldi	r24, 0x01	; 1
   1bf18:	90 e0       	ldi	r25, 0x00	; 0
    {
		uint32_t rgb;
        ptr = argv[ind];
        if(*ptr == '=')
            ++ind;
        rgb = get_value(argv[ind]);
   1bf1a:	88 0f       	add	r24, r24
   1bf1c:	99 1f       	adc	r25, r25
   1bf1e:	e6 e0       	ldi	r30, 0x06	; 6
   1bf20:	f1 e0       	ldi	r31, 0x01	; 1
   1bf22:	ec 0f       	add	r30, r28
   1bf24:	fd 1f       	adc	r31, r29
   1bf26:	e8 0f       	add	r30, r24
   1bf28:	f9 1f       	adc	r31, r25
   1bf2a:	80 81       	ld	r24, Z
   1bf2c:	91 81       	ldd	r25, Z+1	; 0x01
   1bf2e:	0e 94 96 31 	call	0x632c	; 0x632c <get_value>
		result = lcd_backlight(rgb);
   1bf32:	0d de       	rcall	.-998    	; 0x1bb4e <lcd_backlight>
   1bf34:	08 2f       	mov	r16, r24
   1bf36:	10 e0       	ldi	r17, 0x00	; 0
   1bf38:	44 c0       	rjmp	.+136    	; 0x1bfc2 <user_task.part.1+0x202>
    }
#endif

    else if ( MATCH(ptr,"mem") )
   1bf3a:	69 e4       	ldi	r22, 0x49	; 73
   1bf3c:	77 e1       	ldi	r23, 0x17	; 23
   1bf3e:	c8 01       	movw	r24, r16
   1bf40:	0e 94 8b 30 	call	0x6116	; 0x6116 <MATCH>
   1bf44:	89 2b       	or	r24, r25
   1bf46:	19 f0       	breq	.+6      	; 0x1bf4e <user_task.part.1+0x18e>
    {
        PrintFree();
   1bf48:	0e 94 6d 25 	call	0x4ada	; 0x4ada <PrintFree>
   1bf4c:	38 c0       	rjmp	.+112    	; 0x1bfbe <user_task.part.1+0x1fe>
        result = 1;

    }
    else if ( MATCHI(ptr,"reset") )
   1bf4e:	60 ee       	ldi	r22, 0xE0	; 224
   1bf50:	7d e0       	ldi	r23, 0x0D	; 13
   1bf52:	c8 01       	movw	r24, r16
   1bf54:	0e 94 9f 30 	call	0x613e	; 0x613e <MATCHI>
   1bf58:	89 2b       	or	r24, r25
   1bf5a:	51 f0       	breq	.+20     	; 0x1bf70 <user_task.part.1+0x1b0>
    {
        cli();
   1bf5c:	f8 94       	cli
        uart_rx_flush(0);
   1bf5e:	80 e0       	ldi	r24, 0x00	; 0
   1bf60:	0e 94 f4 26 	call	0x4de8	; 0x4de8 <uart_rx_flush>
        cli();
   1bf64:	f8 94       	cli
        MCUSR = (1 << EXTRF);
   1bf66:	82 e0       	ldi	r24, 0x02	; 2
   1bf68:	84 bf       	out	0x34, r24	; 52
        RESET();
   1bf6a:	e0 e0       	ldi	r30, 0x00	; 0
   1bf6c:	fc ef       	ldi	r31, 0xFC	; 252
   1bf6e:	09 95       	icall
		// should not return!
        result = 1;
    }
    else if ( MATCHI(ptr,"setdate" ) )
   1bf70:	6d e4       	ldi	r22, 0x4D	; 77
   1bf72:	77 e1       	ldi	r23, 0x17	; 23
   1bf74:	c8 01       	movw	r24, r16
   1bf76:	0e 94 9f 30 	call	0x613e	; 0x613e <MATCHI>
   1bf7a:	89 2b       	or	r24, r25
   1bf7c:	19 f0       	breq	.+6      	; 0x1bf84 <user_task.part.1+0x1c4>
    {
        setdate();
   1bf7e:	0e 94 da 39 	call	0x73b4	; 0x73b4 <setdate>
   1bf82:	07 c0       	rjmp	.+14     	; 0x1bf92 <user_task.part.1+0x1d2>
        display_clock();
        result = 1;
    }
    else if ( MATCHI(ptr,"time") )
   1bf84:	65 e5       	ldi	r22, 0x55	; 85
   1bf86:	77 e1       	ldi	r23, 0x17	; 23
   1bf88:	c8 01       	movw	r24, r16
   1bf8a:	0e 94 9f 30 	call	0x613e	; 0x613e <MATCHI>
   1bf8e:	89 2b       	or	r24, r25
   1bf90:	19 f0       	breq	.+6      	; 0x1bf98 <user_task.part.1+0x1d8>
    {
        display_clock();
   1bf92:	0e 94 f6 3b 	call	0x77ec	; 0x77ec <display_clock>
   1bf96:	13 c0       	rjmp	.+38     	; 0x1bfbe <user_task.part.1+0x1fe>
        result = 1;
    }
    else if ( MATCHI(ptr,"help") || MATCHI(ptr,"?") )
   1bf98:	69 e7       	ldi	r22, 0x79	; 121
   1bf9a:	76 e1       	ldi	r23, 0x16	; 22
   1bf9c:	c8 01       	movw	r24, r16
   1bf9e:	0e 94 9f 30 	call	0x613e	; 0x613e <MATCHI>
   1bfa2:	89 2b       	or	r24, r25
    {
        help();
   1bfa4:	11 f0       	breq	.+4      	; 0x1bfaa <user_task.part.1+0x1ea>
   1bfa6:	eb de       	rcall	.-554    	; 0x1bd7e <help>
   1bfa8:	0a c0       	rjmp	.+20     	; 0x1bfbe <user_task.part.1+0x1fe>
    else if ( MATCHI(ptr,"time") )
    {
        display_clock();
        result = 1;
    }
    else if ( MATCHI(ptr,"help") || MATCHI(ptr,"?") )
   1bfaa:	6f e7       	ldi	r22, 0x7F	; 127
   1bfac:	76 e1       	ldi	r23, 0x16	; 22
   1bfae:	c8 01       	movw	r24, r16
   1bfb0:	0e 94 9f 30 	call	0x613e	; 0x613e <MATCHI>
   1bfb4:	89 2b       	or	r24, r25
   1bfb6:	b9 f7       	brne	.-18     	; 0x1bfa6 <user_task.part.1+0x1e6>
		for(i=0;i<argc;++i)
			printf("   [%s]\n", argv[i]);
	}

    ind = 0;
	result = 0;
   1bfb8:	00 e0       	ldi	r16, 0x00	; 0
   1bfba:	10 e0       	ldi	r17, 0x00	; 0
   1bfbc:	02 c0       	rjmp	.+4      	; 0x1bfc2 <user_task.part.1+0x202>
    ptr = argv[ind++];

    if(!ptr || argc < 1)
    {
        result = 1;
   1bfbe:	01 e0       	ldi	r16, 0x01	; 1
   1bfc0:	10 e0       	ldi	r17, 0x00	; 0
    {
        help();
        result = 1;
    }

	if( (ret = gpib_tests(argc,argv)) )
   1bfc2:	be 01       	movw	r22, r28
   1bfc4:	6a 5f       	subi	r22, 0xFA	; 250
   1bfc6:	7e 4f       	sbci	r23, 0xFE	; 254
   1bfc8:	c7 01       	movw	r24, r14
   1bfca:	0e 94 31 90 	call	0x12062	; 0x12062 <gpib_tests>
   1bfce:	00 97       	sbiw	r24, 0x00	; 0
   1bfd0:	51 f0       	breq	.+20     	; 0x1bfe6 <user_task.part.1+0x226>
    {
		if(ret < 0)
   1bfd2:	97 fd       	sbrc	r25, 7
   1bfd4:	03 c0       	rjmp	.+6      	; 0x1bfdc <user_task.part.1+0x21c>
			result = -1;
		else
			result = 1;
   1bfd6:	01 e0       	ldi	r16, 0x01	; 1
   1bfd8:	10 e0       	ldi	r17, 0x00	; 0
   1bfda:	02 c0       	rjmp	.+4      	; 0x1bfe0 <user_task.part.1+0x220>
    }

	if( (ret = gpib_tests(argc,argv)) )
    {
		if(ret < 0)
			result = -1;
   1bfdc:	0f ef       	ldi	r16, 0xFF	; 255
   1bfde:	1f ef       	ldi	r17, 0xFF	; 255
		else
			result = 1;
// Restore GPIB BUS states
        gpib_init_devices();
   1bfe0:	0e 94 45 8b 	call	0x1168a	; 0x1168a <gpib_init_devices>
   1bfe4:	0f c0       	rjmp	.+30     	; 0x1c004 <user_task.part.1+0x244>
    }

#ifdef POSIX_TESTS
    else if( (ret = posix_tests(argc,argv)) )
   1bfe6:	be 01       	movw	r22, r28
   1bfe8:	6a 5f       	subi	r22, 0xFA	; 250
   1bfea:	7e 4f       	sbci	r23, 0xFE	; 254
   1bfec:	c7 01       	movw	r24, r14
   1bfee:	0e 94 1e 80 	call	0x1003c	; 0x1003c <posix_tests>
   1bff2:	00 97       	sbiw	r24, 0x00	; 0
   1bff4:	39 f0       	breq	.+14     	; 0x1c004 <user_task.part.1+0x244>
	{
		if(ret < 0)
   1bff6:	97 fd       	sbrc	r25, 7
   1bff8:	03 c0       	rjmp	.+6      	; 0x1c000 <user_task.part.1+0x240>
			result = -1;
		else
			result = 1;
   1bffa:	01 e0       	ldi	r16, 0x01	; 1
   1bffc:	10 e0       	ldi	r17, 0x00	; 0
   1bffe:	02 c0       	rjmp	.+4      	; 0x1c004 <user_task.part.1+0x244>

#ifdef POSIX_TESTS
    else if( (ret = posix_tests(argc,argv)) )
	{
		if(ret < 0)
			result = -1;
   1c000:	0f ef       	ldi	r16, 0xFF	; 255
   1c002:	1f ef       	ldi	r17, 0xFF	; 255
			result = 1;
	}
#endif

#ifdef FATFS_TESTS
    if( (ret = fatfs_tests(argc,argv) ))
   1c004:	be 01       	movw	r22, r28
   1c006:	6a 5f       	subi	r22, 0xFA	; 250
   1c008:	7e 4f       	sbci	r23, 0xFE	; 254
   1c00a:	c7 01       	movw	r24, r14
   1c00c:	0e 94 96 72 	call	0xe52c	; 0xe52c <fatfs_tests>
   1c010:	00 97       	sbiw	r24, 0x00	; 0
   1c012:	39 f0       	breq	.+14     	; 0x1c022 <user_task.part.1+0x262>
	{
		if(ret < 0)
   1c014:	97 fd       	sbrc	r25, 7
   1c016:	03 c0       	rjmp	.+6      	; 0x1c01e <user_task.part.1+0x25e>
			result = -1;
		else
			result = 1;
   1c018:	01 e0       	ldi	r16, 0x01	; 1
   1c01a:	10 e0       	ldi	r17, 0x00	; 0
   1c01c:	02 c0       	rjmp	.+4      	; 0x1c022 <user_task.part.1+0x262>

#ifdef FATFS_TESTS
    if( (ret = fatfs_tests(argc,argv) ))
	{
		if(ret < 0)
			result = -1;
   1c01e:	0f ef       	ldi	r16, 0xFF	; 255
   1c020:	1f ef       	ldi	r17, 0xFF	; 255
			result = 1;
	}
#endif

#ifdef LIF_SUPPORT
    if( (ret = lif_tests(argc,argv)) )
   1c022:	be 01       	movw	r22, r28
   1c024:	6a 5f       	subi	r22, 0xFA	; 250
   1c026:	7e 4f       	sbci	r23, 0xFE	; 254
   1c028:	c7 01       	movw	r24, r14
   1c02a:	49 db       	rcall	.-2414   	; 0x1b6be <lif_tests>
   1c02c:	00 97       	sbiw	r24, 0x00	; 0
   1c02e:	19 f0       	breq	.+6      	; 0x1c036 <user_task.part.1+0x276>
	{
		if(ret < 0)
   1c030:	97 ff       	sbrs	r25, 7
   1c032:	04 c0       	rjmp	.+8      	; 0x1c03c <user_task.part.1+0x27c>
   1c034:	09 c0       	rjmp	.+18     	; 0x1c048 <user_task.part.1+0x288>
			result = -1;
		else
			result = 1;
	}
#endif
    if(result == 1)
   1c036:	01 30       	cpi	r16, 0x01	; 1
   1c038:	11 05       	cpc	r17, r1
   1c03a:	19 f4       	brne	.+6      	; 0x1c042 <user_task.part.1+0x282>
        printf("OK\n");
   1c03c:	88 e2       	ldi	r24, 0x28	; 40
   1c03e:	96 e4       	ldi	r25, 0x46	; 70
   1c040:	05 c0       	rjmp	.+10     	; 0x1c04c <user_task.part.1+0x28c>
	else if(result == -1)
   1c042:	0f 3f       	cpi	r16, 0xFF	; 255
   1c044:	1f 4f       	sbci	r17, 0xFF	; 255
   1c046:	59 f4       	brne	.+22     	; 0x1c05e <user_task.part.1+0x29e>
        printf("Command FAILED\n");
   1c048:	88 e1       	ldi	r24, 0x18	; 24
   1c04a:	96 e4       	ldi	r25, 0x46	; 70
   1c04c:	a0 e0       	ldi	r26, 0x00	; 0
   1c04e:	ed b7       	in	r30, 0x3d	; 61
   1c050:	fe b7       	in	r31, 0x3e	; 62
   1c052:	81 83       	std	Z+1, r24	; 0x01
   1c054:	92 83       	std	Z+2, r25	; 0x02
   1c056:	a3 83       	std	Z+3, r26	; 0x03
   1c058:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   1c05c:	33 c0       	rjmp	.+102    	; 0x1c0c4 <user_task.part.1+0x304>
    else
	{
        printf("Invalid Command\n");
   1c05e:	87 e0       	ldi	r24, 0x07	; 7
   1c060:	96 e4       	ldi	r25, 0x46	; 70
   1c062:	a0 e0       	ldi	r26, 0x00	; 0
   1c064:	ed b7       	in	r30, 0x3d	; 61
   1c066:	fe b7       	in	r31, 0x3e	; 62
   1c068:	81 83       	std	Z+1, r24	; 0x01
   1c06a:	92 83       	std	Z+2, r25	; 0x02
   1c06c:	a3 83       	std	Z+3, r26	; 0x03
   1c06e:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
        printf("Argument count = %d\n", argc);
   1c072:	ed b7       	in	r30, 0x3d	; 61
   1c074:	fe b7       	in	r31, 0x3e	; 62
   1c076:	f5 82       	std	Z+5, r15	; 0x05
   1c078:	e4 82       	std	Z+4, r14	; 0x04
   1c07a:	82 ef       	ldi	r24, 0xF2	; 242
   1c07c:	95 e4       	ldi	r25, 0x45	; 69
   1c07e:	a0 e0       	ldi	r26, 0x00	; 0
   1c080:	81 83       	std	Z+1, r24	; 0x01
   1c082:	92 83       	std	Z+2, r25	; 0x02
   1c084:	a3 83       	std	Z+3, r26	; 0x03
   1c086:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
   1c08a:	8e 01       	movw	r16, r28
   1c08c:	0a 5f       	subi	r16, 0xFA	; 250
   1c08e:	1e 4f       	sbci	r17, 0xFE	; 254
		for(i=0;i<argc;++i)
   1c090:	c1 2c       	mov	r12, r1
   1c092:	d1 2c       	mov	r13, r1
			printf("   [%s]\n", argv[i]);
   1c094:	89 ee       	ldi	r24, 0xE9	; 233
   1c096:	95 e4       	ldi	r25, 0x45	; 69
   1c098:	3c 01       	movw	r6, r24
   1c09a:	81 2c       	mov	r8, r1
        printf("Command FAILED\n");
    else
	{
        printf("Invalid Command\n");
        printf("Argument count = %d\n", argc);
		for(i=0;i<argc;++i)
   1c09c:	ce 14       	cp	r12, r14
   1c09e:	df 04       	cpc	r13, r15
   1c0a0:	8c f4       	brge	.+34     	; 0x1c0c4 <user_task.part.1+0x304>
			printf("   [%s]\n", argv[i]);
   1c0a2:	f8 01       	movw	r30, r16
   1c0a4:	81 91       	ld	r24, Z+
   1c0a6:	91 91       	ld	r25, Z+
   1c0a8:	8f 01       	movw	r16, r30
   1c0aa:	ed b7       	in	r30, 0x3d	; 61
   1c0ac:	fe b7       	in	r31, 0x3e	; 62
   1c0ae:	95 83       	std	Z+5, r25	; 0x05
   1c0b0:	84 83       	std	Z+4, r24	; 0x04
   1c0b2:	61 82       	std	Z+1, r6	; 0x01
   1c0b4:	72 82       	std	Z+2, r7	; 0x02
   1c0b6:	83 82       	std	Z+3, r8	; 0x03
   1c0b8:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
        printf("Command FAILED\n");
    else
	{
        printf("Invalid Command\n");
        printf("Argument count = %d\n", argc);
		for(i=0;i<argc;++i)
   1c0bc:	ff ef       	ldi	r31, 0xFF	; 255
   1c0be:	cf 1a       	sub	r12, r31
   1c0c0:	df 0a       	sbc	r13, r31
   1c0c2:	ec cf       	rjmp	.-40     	; 0x1c09c <user_task.part.1+0x2dc>
			printf("   [%s]\n", argv[i]);
	}
}
   1c0c4:	c5 59       	subi	r28, 0x95	; 149
   1c0c6:	de 4f       	sbci	r29, 0xFE	; 254
   1c0c8:	0f b6       	in	r0, 0x3f	; 63
   1c0ca:	f8 94       	cli
   1c0cc:	de bf       	out	0x3e, r29	; 62
   1c0ce:	0f be       	out	0x3f, r0	; 63
   1c0d0:	cd bf       	out	0x3d, r28	; 61
   1c0d2:	df 91       	pop	r29
   1c0d4:	cf 91       	pop	r28
   1c0d6:	1f 91       	pop	r17
   1c0d8:	0f 91       	pop	r16
   1c0da:	ff 90       	pop	r15
   1c0dc:	ef 90       	pop	r14
   1c0de:	df 90       	pop	r13
   1c0e0:	cf 90       	pop	r12
   1c0e2:	8f 90       	pop	r8
   1c0e4:	7f 90       	pop	r7
   1c0e6:	6f 90       	pop	r6
   1c0e8:	08 95       	ret

0001c0ea <user_task>:
	int ret;
    char *argv[51];
    char line[256];


    if(gpib)
   1c0ea:	81 11       	cpse	r24, r1
        gpib_task();
   1c0ec:	0e 94 b0 8f 	call	0x11f60	; 0x11f60 <gpib_task>

    if(!kbhit(0))
   1c0f0:	80 e0       	ldi	r24, 0x00	; 0
   1c0f2:	0e 94 34 28 	call	0x5068	; 0x5068 <uart_rx_count>
   1c0f6:	89 2b       	or	r24, r25
   1c0f8:	09 f0       	breq	.+2      	; 0x1c0fc <user_task+0x12>
   1c0fa:	62 ce       	rjmp	.-828    	; 0x1bdc0 <user_task.part.1>
   1c0fc:	08 95       	ret

0001c0fe <main>:


/// @brief  main() for gpib project
/// @return  should never return!
int main(void)
{
   1c0fe:	a3 e3       	ldi	r26, 0x33	; 51
   1c100:	b0 e0       	ldi	r27, 0x00	; 0
   1c102:	e4 e8       	ldi	r30, 0x84	; 132
   1c104:	f0 ee       	ldi	r31, 0xE0	; 224
   1c106:	8f c2       	rjmp	.+1310   	; 0x1c626 <__prologue_saves__+0x14>
    ts_t ts;
    uint32_t actual,baud;
	char tmp[32];

	clear_error();		// Clear error state
   1c108:	0e 94 51 25 	call	0x4aa2	; 0x4aa2 <clear_error>

	GPIO_PIN_LOW(LED1);	// Activity status
   1c10c:	46 98       	cbi	0x08, 6	; 8
   1c10e:	3e 9a       	sbi	0x07, 6	; 7

///@ initialize bus state as soon as practical
    gpib_bus_init();
   1c110:	0e 94 f8 83 	call	0x107f0	; 0x107f0 <gpib_bus_init>
// BAUD setting moved to Makefile
    baud = BAUD;

///@ Initialize UART early
/// Returns actual BAUD rate - possible with hardware - may differ slightly
    actual = uart_init(0, baud);                  // Serial Port Initialize
   1c114:	40 e0       	ldi	r20, 0x00	; 0
   1c116:	52 ec       	ldi	r21, 0xC2	; 194
   1c118:	61 e0       	ldi	r22, 0x01	; 1
   1c11a:	70 e0       	ldi	r23, 0x00	; 0
   1c11c:	80 e0       	ldi	r24, 0x00	; 0
   1c11e:	0e 94 9f 27 	call	0x4f3e	; 0x4f3e <uart_init>
   1c122:	6b 01       	movw	r12, r22
   1c124:	7c 01       	movw	r14, r24

///@brief Power up delay
    delayms(200);
   1c126:	68 ec       	ldi	r22, 0xC8	; 200
   1c128:	70 e0       	ldi	r23, 0x00	; 0
   1c12a:	80 e0       	ldi	r24, 0x00	; 0
   1c12c:	90 e0       	ldi	r25, 0x00	; 0
   1c12e:	0e 94 ac 26 	call	0x4d58	; 0x4d58 <delayms>

    sep();
   1c132:	0e 94 61 30 	call	0x60c2	; 0x60c2 <sep>
    printf("Start\n");
   1c136:	82 ee       	ldi	r24, 0xE2	; 226
   1c138:	95 e4       	ldi	r25, 0x45	; 69
   1c13a:	a0 e0       	ldi	r26, 0x00	; 0
   1c13c:	ed b7       	in	r30, 0x3d	; 61
   1c13e:	fe b7       	in	r31, 0x3e	; 62
   1c140:	81 83       	std	Z+1, r24	; 0x01
   1c142:	92 83       	std	Z+2, r25	; 0x02
   1c144:	a3 83       	std	Z+3, r26	; 0x03
   1c146:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    printf("CPU Clock = %lu\n", F_CPU);
   1c14a:	80 e0       	ldi	r24, 0x00	; 0
   1c14c:	9d e2       	ldi	r25, 0x2D	; 45
   1c14e:	a1 e3       	ldi	r26, 0x31	; 49
   1c150:	b1 e0       	ldi	r27, 0x01	; 1
   1c152:	ed b7       	in	r30, 0x3d	; 61
   1c154:	fe b7       	in	r31, 0x3e	; 62
   1c156:	84 83       	std	Z+4, r24	; 0x04
   1c158:	95 83       	std	Z+5, r25	; 0x05
   1c15a:	a6 83       	std	Z+6, r26	; 0x06
   1c15c:	b7 83       	std	Z+7, r27	; 0x07
   1c15e:	81 ed       	ldi	r24, 0xD1	; 209
   1c160:	95 e4       	ldi	r25, 0x45	; 69
   1c162:	a0 e0       	ldi	r26, 0x00	; 0
   1c164:	81 83       	std	Z+1, r24	; 0x01
   1c166:	92 83       	std	Z+2, r25	; 0x02
   1c168:	a3 83       	std	Z+3, r26	; 0x03
   1c16a:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    printf("Requested Baud Rate: %ld, Actual: %ld\n", (long)baud, (long)actual);
   1c16e:	ed b7       	in	r30, 0x3d	; 61
   1c170:	fe b7       	in	r31, 0x3e	; 62
   1c172:	c0 86       	std	Z+8, r12	; 0x08
   1c174:	d1 86       	std	Z+9, r13	; 0x09
   1c176:	e2 86       	std	Z+10, r14	; 0x0a
   1c178:	f3 86       	std	Z+11, r15	; 0x0b
   1c17a:	80 e0       	ldi	r24, 0x00	; 0
   1c17c:	92 ec       	ldi	r25, 0xC2	; 194
   1c17e:	a1 e0       	ldi	r26, 0x01	; 1
   1c180:	b0 e0       	ldi	r27, 0x00	; 0
   1c182:	84 83       	std	Z+4, r24	; 0x04
   1c184:	95 83       	std	Z+5, r25	; 0x05
   1c186:	a6 83       	std	Z+6, r26	; 0x06
   1c188:	b7 83       	std	Z+7, r27	; 0x07
   1c18a:	8a ea       	ldi	r24, 0xAA	; 170
   1c18c:	95 e4       	ldi	r25, 0x45	; 69
   1c18e:	a0 e0       	ldi	r26, 0x00	; 0
   1c190:	81 83       	std	Z+1, r24	; 0x01
   1c192:	92 83       	std	Z+2, r25	; 0x02
   1c194:	a3 83       	std	Z+3, r26	; 0x03
   1c196:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>

    init_timers();
   1c19a:	0e 94 47 34 	call	0x688e	; 0x688e <init_timers>

    sep();
   1c19e:	0e 94 61 30 	call	0x60c2	; 0x60c2 <sep>
    printf("HP85 Disk and Device Emulator\n");
   1c1a2:	8b e8       	ldi	r24, 0x8B	; 139
   1c1a4:	95 e4       	ldi	r25, 0x45	; 69
   1c1a6:	a0 e0       	ldi	r26, 0x00	; 0
   1c1a8:	ed b7       	in	r30, 0x3d	; 61
   1c1aa:	fe b7       	in	r31, 0x3e	; 62
   1c1ac:	81 83       	std	Z+1, r24	; 0x01
   1c1ae:	92 83       	std	Z+2, r25	; 0x02
   1c1b0:	a3 83       	std	Z+3, r26	; 0x03
   1c1b2:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    printf(" (C) 2014-2020 by Mike Gore\n");
   1c1b6:	8e e6       	ldi	r24, 0x6E	; 110
   1c1b8:	95 e4       	ldi	r25, 0x45	; 69
   1c1ba:	a0 e0       	ldi	r26, 0x00	; 0
   1c1bc:	ed b7       	in	r30, 0x3d	; 61
   1c1be:	fe b7       	in	r31, 0x3e	; 62
   1c1c0:	81 83       	std	Z+1, r24	; 0x01
   1c1c2:	92 83       	std	Z+2, r25	; 0x02
   1c1c4:	a3 83       	std	Z+3, r26	; 0x03
   1c1c6:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    printf(" GNU version 3\n");
   1c1ca:	8e e5       	ldi	r24, 0x5E	; 94
   1c1cc:	95 e4       	ldi	r25, 0x45	; 69
   1c1ce:	a0 e0       	ldi	r26, 0x00	; 0
   1c1d0:	ed b7       	in	r30, 0x3d	; 61
   1c1d2:	fe b7       	in	r31, 0x3e	; 62
   1c1d4:	81 83       	std	Z+1, r24	; 0x01
   1c1d6:	92 83       	std	Z+2, r25	; 0x02
   1c1d8:	a3 83       	std	Z+3, r26	; 0x03
   1c1da:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    printf("-> https://github.com/magore/hp85disk\n");
   1c1de:	87 e3       	ldi	r24, 0x37	; 55
   1c1e0:	95 e4       	ldi	r25, 0x45	; 69
   1c1e2:	a0 e0       	ldi	r26, 0x00	; 0
   1c1e4:	ed b7       	in	r30, 0x3d	; 61
   1c1e6:	fe b7       	in	r31, 0x3e	; 62
   1c1e8:	81 83       	std	Z+1, r24	; 0x01
   1c1ea:	92 83       	std	Z+2, r25	; 0x02
   1c1ec:	a3 83       	std	Z+3, r26	; 0x03
   1c1ee:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    printf("   GIT last pushed:   %s\n", GIT_VERSION);
   1c1f2:	83 ec       	ldi	r24, 0xC3	; 195
   1c1f4:	96 e1       	ldi	r25, 0x16	; 22
   1c1f6:	ed b7       	in	r30, 0x3d	; 61
   1c1f8:	fe b7       	in	r31, 0x3e	; 62
   1c1fa:	95 83       	std	Z+5, r25	; 0x05
   1c1fc:	84 83       	std	Z+4, r24	; 0x04
   1c1fe:	8d e1       	ldi	r24, 0x1D	; 29
   1c200:	95 e4       	ldi	r25, 0x45	; 69
   1c202:	a0 e0       	ldi	r26, 0x00	; 0
   1c204:	81 83       	std	Z+1, r24	; 0x01
   1c206:	92 83       	std	Z+2, r25	; 0x02
   1c208:	a3 83       	std	Z+3, r26	; 0x03
   1c20a:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    printf("   Last updated file: %s\n", LOCAL_MOD);
   1c20e:	87 ee       	ldi	r24, 0xE7	; 231
   1c210:	96 e1       	ldi	r25, 0x16	; 22
   1c212:	ed b7       	in	r30, 0x3d	; 61
   1c214:	fe b7       	in	r31, 0x3e	; 62
   1c216:	95 83       	std	Z+5, r25	; 0x05
   1c218:	84 83       	std	Z+4, r24	; 0x04
   1c21a:	83 e0       	ldi	r24, 0x03	; 3
   1c21c:	95 e4       	ldi	r25, 0x45	; 69
   1c21e:	a0 e0       	ldi	r26, 0x00	; 0
   1c220:	81 83       	std	Z+1, r24	; 0x01
   1c222:	92 83       	std	Z+2, r25	; 0x02
   1c224:	a3 83       	std	Z+3, r26	; 0x03
   1c226:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>

    sep();
   1c22a:	0e 94 61 30 	call	0x60c2	; 0x60c2 <sep>
    PrintFree();
   1c22e:	0e 94 6d 25 	call	0x4ada	; 0x4ada <PrintFree>

    sep();
   1c232:	0e 94 61 30 	call	0x60c2	; 0x60c2 <sep>
    // delayms(200);                                 ///@brief Power up delay

///@ initialize SPI bus
    printf("Initializing SPI bus\n");
   1c236:	8d ee       	ldi	r24, 0xED	; 237
   1c238:	94 e4       	ldi	r25, 0x44	; 68
   1c23a:	a0 e0       	ldi	r26, 0x00	; 0
   1c23c:	ed b7       	in	r30, 0x3d	; 61
   1c23e:	fe b7       	in	r31, 0x3e	; 62
   1c240:	81 83       	std	Z+1, r24	; 0x01
   1c242:	92 83       	std	Z+2, r25	; 0x02
   1c244:	a3 83       	std	Z+3, r26	; 0x03
   1c246:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    spi_init(MMC_SLOW,GPIO_B3);
   1c24a:	4b e0       	ldi	r20, 0x0B	; 11
   1c24c:	50 e0       	ldi	r21, 0x00	; 0
   1c24e:	60 e2       	ldi	r22, 0x20	; 32
   1c250:	71 ea       	ldi	r23, 0xA1	; 161
   1c252:	87 e0       	ldi	r24, 0x07	; 7
   1c254:	90 e0       	ldi	r25, 0x00	; 0
   1c256:	0e 94 d3 24 	call	0x49a6	; 0x49a6 <spi_init>

///@ initialize I2C bus
    printf("Initializing I2C bus\n");
   1c25a:	87 ed       	ldi	r24, 0xD7	; 215
   1c25c:	94 e4       	ldi	r25, 0x44	; 68
   1c25e:	a0 e0       	ldi	r26, 0x00	; 0
   1c260:	ed b7       	in	r30, 0x3d	; 61
   1c262:	fe b7       	in	r31, 0x3e	; 62
   1c264:	81 83       	std	Z+1, r24	; 0x01
   1c266:	92 83       	std	Z+2, r25	; 0x02
   1c268:	a3 83       	std	Z+3, r26	; 0x03
   1c26a:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
	i2c_init(100000);
   1c26e:	60 ea       	ldi	r22, 0xA0	; 160
   1c270:	76 e8       	ldi	r23, 0x86	; 134
   1c272:	81 e0       	ldi	r24, 0x01	; 1
   1c274:	90 e0       	ldi	r25, 0x00	; 0
   1c276:	0e 94 70 2a 	call	0x54e0	; 0x54e0 <i2c_init>
    sep();
   1c27a:	0e 94 61 30 	call	0x60c2	; 0x60c2 <sep>

///@ initialize clock by RTC if we have it
    printf("Initializing RTC\n");
   1c27e:	85 ec       	ldi	r24, 0xC5	; 197
   1c280:	94 e4       	ldi	r25, 0x44	; 68
   1c282:	a0 e0       	ldi	r26, 0x00	; 0
   1c284:	ed b7       	in	r30, 0x3d	; 61
   1c286:	fe b7       	in	r31, 0x3e	; 62
   1c288:	81 83       	std	Z+1, r24	; 0x01
   1c28a:	92 83       	std	Z+2, r25	; 0x02
   1c28c:	a3 83       	std	Z+3, r26	; 0x03
   1c28e:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    clock_clear();
   1c292:	0e 94 04 34 	call	0x6808	; 0x6808 <clock_clear>
    printf("Clock cleared\n");
   1c296:	86 eb       	ldi	r24, 0xB6	; 182
   1c298:	94 e4       	ldi	r25, 0x44	; 68
   1c29a:	a0 e0       	ldi	r26, 0x00	; 0
   1c29c:	ed b7       	in	r30, 0x3d	; 61
   1c29e:	fe b7       	in	r31, 0x3e	; 62
   1c2a0:	81 83       	std	Z+1, r24	; 0x01
   1c2a2:	92 83       	std	Z+2, r25	; 0x02
   1c2a4:	a3 83       	std	Z+3, r26	; 0x03
   1c2a6:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    clock_getres(0, (ts_t *) &ts);
   1c2aa:	be 01       	movw	r22, r28
   1c2ac:	64 5d       	subi	r22, 0xD4	; 212
   1c2ae:	7f 4f       	sbci	r23, 0xFF	; 255
   1c2b0:	80 e0       	ldi	r24, 0x00	; 0
   1c2b2:	90 e0       	ldi	r25, 0x00	; 0
   1c2b4:	0e 94 a4 34 	call	0x6948	; 0x6948 <clock_getres>
    printf("System Task Interrupt Rate: %ld Nano Seconds\n", (long) ts.tv_nsec);
   1c2b8:	88 a9       	ldd	r24, Y+48	; 0x30
   1c2ba:	99 a9       	ldd	r25, Y+49	; 0x31
   1c2bc:	aa a9       	ldd	r26, Y+50	; 0x32
   1c2be:	bb a9       	ldd	r27, Y+51	; 0x33
   1c2c0:	ed b7       	in	r30, 0x3d	; 61
   1c2c2:	fe b7       	in	r31, 0x3e	; 62
   1c2c4:	84 83       	std	Z+4, r24	; 0x04
   1c2c6:	95 83       	std	Z+5, r25	; 0x05
   1c2c8:	a6 83       	std	Z+6, r26	; 0x06
   1c2ca:	b7 83       	std	Z+7, r27	; 0x07
   1c2cc:	88 e8       	ldi	r24, 0x88	; 136
   1c2ce:	94 e4       	ldi	r25, 0x44	; 68
   1c2d0:	a0 e0       	ldi	r26, 0x00	; 0
   1c2d2:	81 83       	std	Z+1, r24	; 0x01
   1c2d4:	92 83       	std	Z+2, r25	; 0x02
   1c2d6:	a3 83       	std	Z+3, r26	; 0x03
   1c2d8:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>

// Timezone offset we just use local time
    initialize_clock(0);
   1c2dc:	80 e0       	ldi	r24, 0x00	; 0
   1c2de:	90 e0       	ldi	r25, 0x00	; 0
   1c2e0:	0e 94 7f 3b 	call	0x76fe	; 0x76fe <initialize_clock>
    display_clock();
   1c2e4:	0e 94 f6 3b 	call	0x77ec	; 0x77ec <display_clock>
    sep();
   1c2e8:	0e 94 61 30 	call	0x60c2	; 0x60c2 <sep>

///@ initialize Optional I2C LCD
#ifdef LCD_SUPPORT
	lcd_setup();
   1c2ec:	57 dc       	rcall	.-1874   	; 0x1bb9c <lcd_setup>
#endif

///@ initialize MMC bus
    printf("MMC initializing start\n");
   1c2ee:	80 e7       	ldi	r24, 0x70	; 112
   1c2f0:	94 e4       	ldi	r25, 0x44	; 68
   1c2f2:	a0 e0       	ldi	r26, 0x00	; 0
   1c2f4:	ed b7       	in	r30, 0x3d	; 61
   1c2f6:	fe b7       	in	r31, 0x3e	; 62
   1c2f8:	81 83       	std	Z+1, r24	; 0x01
   1c2fa:	92 83       	std	Z+2, r25	; 0x02
   1c2fc:	a3 83       	std	Z+3, r26	; 0x03
   1c2fe:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    if ( !mmc_init(1) )
   1c302:	81 e0       	ldi	r24, 0x01	; 1
   1c304:	90 e0       	ldi	r25, 0x00	; 0
   1c306:	0e 94 71 6d 	call	0xdae2	; 0xdae2 <mmc_init>
   1c30a:	89 2b       	or	r24, r25
   1c30c:	51 f4       	brne	.+20     	; 0x1c322 <main+0x224>
		printf("MMC initialized\n");
   1c30e:	8f e5       	ldi	r24, 0x5F	; 95
   1c310:	94 e4       	ldi	r25, 0x44	; 68
   1c312:	a0 e0       	ldi	r26, 0x00	; 0
   1c314:	ed b7       	in	r30, 0x3d	; 61
   1c316:	fe b7       	in	r31, 0x3e	; 62
   1c318:	81 83       	std	Z+1, r24	; 0x01
   1c31a:	92 83       	std	Z+2, r25	; 0x02
   1c31c:	a3 83       	std	Z+3, r26	; 0x03
   1c31e:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    sep();
   1c322:	0e 94 61 30 	call	0x60c2	; 0x60c2 <sep>

///@ initialize bus state as soon as practical
    gpib_bus_init();
   1c326:	0e 94 f8 83 	call	0x107f0	; 0x107f0 <gpib_bus_init>
    printf("GPIB bus initialized\n");
   1c32a:	89 e4       	ldi	r24, 0x49	; 73
   1c32c:	94 e4       	ldi	r25, 0x44	; 68
   1c32e:	a0 e0       	ldi	r26, 0x00	; 0
   1c330:	ed b7       	in	r30, 0x3d	; 61
   1c332:	fe b7       	in	r31, 0x3e	; 62
   1c334:	81 83       	std	Z+1, r24	; 0x01
   1c336:	92 83       	std	Z+2, r25	; 0x02
   1c338:	a3 83       	std	Z+3, r26	; 0x03
   1c33a:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>

///@ initialize Printer Capture
    printer_init();
   1c33e:	0e 94 a5 ba 	call	0x1754a	; 0x1754a <printer_init>
    printf("Printer initialized\n");
   1c342:	84 e3       	ldi	r24, 0x34	; 52
   1c344:	94 e4       	ldi	r25, 0x44	; 68
   1c346:	a0 e0       	ldi	r26, 0x00	; 0
   1c348:	ed b7       	in	r30, 0x3d	; 61
   1c34a:	fe b7       	in	r31, 0x3e	; 62
   1c34c:	81 83       	std	Z+1, r24	; 0x01
   1c34e:	92 83       	std	Z+2, r25	; 0x02
   1c350:	a3 83       	std	Z+3, r26	; 0x03
   1c352:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>

///@ initialize GPIB timer tasks
    printf("GPIB Timer Setup\n");
   1c356:	82 e2       	ldi	r24, 0x22	; 34
   1c358:	94 e4       	ldi	r25, 0x44	; 68
   1c35a:	a0 e0       	ldi	r26, 0x00	; 0
   1c35c:	ed b7       	in	r30, 0x3d	; 61
   1c35e:	fe b7       	in	r31, 0x3e	; 62
   1c360:	81 83       	std	Z+1, r24	; 0x01
   1c362:	92 83       	std	Z+2, r25	; 0x02
   1c364:	a3 83       	std	Z+3, r26	; 0x03
   1c366:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    gpib_timer_init();
   1c36a:	0e 94 0c 82 	call	0x10418	; 0x10418 <gpib_timer_init>
    printf("GPIB Timer initialized\n");
   1c36e:	8a e0       	ldi	r24, 0x0A	; 10
   1c370:	94 e4       	ldi	r25, 0x44	; 68
   1c372:	a0 e0       	ldi	r26, 0x00	; 0
   1c374:	ed b7       	in	r30, 0x3d	; 61
   1c376:	fe b7       	in	r31, 0x3e	; 62
   1c378:	81 83       	std	Z+1, r24	; 0x01
   1c37a:	92 83       	std	Z+2, r25	; 0x02
   1c37c:	a3 83       	std	Z+3, r26	; 0x03
   1c37e:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>

///@brief Process hp85disk emulator config file
    gpib_file_init();
   1c382:	0e 94 70 8a 	call	0x114e0	; 0x114e0 <gpib_file_init>
    printf("GPIB File init done\n");
   1c386:	85 ef       	ldi	r24, 0xF5	; 245
   1c388:	93 e4       	ldi	r25, 0x43	; 67
   1c38a:	a0 e0       	ldi	r26, 0x00	; 0
   1c38c:	ed b7       	in	r30, 0x3d	; 61
   1c38e:	fe b7       	in	r31, 0x3e	; 62
   1c390:	81 83       	std	Z+1, r24	; 0x01
   1c392:	92 83       	std	Z+2, r25	; 0x02
   1c394:	a3 83       	std	Z+3, r26	; 0x03
   1c396:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>

///@brief GPIB talking/listening state variables
///Must be done AFTER gpib_file_init() so we have a valid configuration
    gpib_state_init();
   1c39a:	0e 94 60 84 	call	0x108c0	; 0x108c0 <gpib_state_init>
    printf("GPIB State init done\n");
   1c39e:	8f ed       	ldi	r24, 0xDF	; 223
   1c3a0:	93 e4       	ldi	r25, 0x43	; 67
   1c3a2:	a0 e0       	ldi	r26, 0x00	; 0
   1c3a4:	ed b7       	in	r30, 0x3d	; 61
   1c3a6:	fe b7       	in	r31, 0x3e	; 62
   1c3a8:	81 83       	std	Z+1, r24	; 0x01
   1c3aa:	92 83       	std	Z+2, r25	; 0x02
   1c3ac:	a3 83       	std	Z+3, r26	; 0x03
   1c3ae:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    sep();
   1c3b2:	0e 94 61 30 	call	0x60c2	; 0x60c2 <sep>

///@brief Display Address Summary
    display_Addresses(0);
   1c3b6:	80 e0       	ldi	r24, 0x00	; 0
   1c3b8:	90 e0       	ldi	r25, 0x00	; 0
   1c3ba:	0e 94 00 92 	call	0x12400	; 0x12400 <display_Addresses>
    sep();
   1c3be:	0e 94 61 30 	call	0x60c2	; 0x60c2 <sep>

///@brief Display debug level
    printf("debuglevel   = %04xH\n",(int)debuglevel);
   1c3c2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1c3c6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1c3ca:	ed b7       	in	r30, 0x3d	; 61
   1c3cc:	fe b7       	in	r31, 0x3e	; 62
   1c3ce:	95 83       	std	Z+5, r25	; 0x05
   1c3d0:	84 83       	std	Z+4, r24	; 0x04
   1c3d2:	89 ec       	ldi	r24, 0xC9	; 201
   1c3d4:	93 e4       	ldi	r25, 0x43	; 67
   1c3d6:	a0 e0       	ldi	r26, 0x00	; 0
   1c3d8:	81 83       	std	Z+1, r24	; 0x01
   1c3da:	92 83       	std	Z+2, r25	; 0x02
   1c3dc:	a3 83       	std	Z+3, r26	; 0x03
   1c3de:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
    sep();
   1c3e2:	0e 94 61 30 	call	0x60c2	; 0x60c2 <sep>

///@brief Format any drives that do not yet exist
    format_drives();
   1c3e6:	0e 94 98 9d 	call	0x13b30	; 0x13b30 <format_drives>

#ifdef LCD_SUPPORT
	sprintf((char *) tmp, "SS80=%d AMIGO=%d",
   1c3ea:	83 e0       	ldi	r24, 0x03	; 3
   1c3ec:	0e 94 75 95 	call	0x12aea	; 0x12aea <count_drive_types>
   1c3f0:	8c 01       	movw	r16, r24
   1c3f2:	81 e0       	ldi	r24, 0x01	; 1
   1c3f4:	0e 94 75 95 	call	0x12aea	; 0x12aea <count_drive_types>
   1c3f8:	ed b7       	in	r30, 0x3d	; 61
   1c3fa:	fe b7       	in	r31, 0x3e	; 62
   1c3fc:	91 87       	std	Z+9, r25	; 0x09
   1c3fe:	80 87       	std	Z+8, r24	; 0x08
   1c400:	17 83       	std	Z+7, r17	; 0x07
   1c402:	06 83       	std	Z+6, r16	; 0x06
   1c404:	88 eb       	ldi	r24, 0xB8	; 184
   1c406:	93 e4       	ldi	r25, 0x43	; 67
   1c408:	a0 e0       	ldi	r26, 0x00	; 0
   1c40a:	83 83       	std	Z+3, r24	; 0x03
   1c40c:	94 83       	std	Z+4, r25	; 0x04
   1c40e:	a5 83       	std	Z+5, r26	; 0x05
   1c410:	8e 01       	movw	r16, r28
   1c412:	04 5f       	subi	r16, 0xF4	; 244
   1c414:	1f 4f       	sbci	r17, 0xFF	; 255
   1c416:	12 83       	std	Z+2, r17	; 0x02
   1c418:	01 83       	std	Z+1, r16	; 0x01
   1c41a:	0e 94 3e 45 	call	0x8a7c	; 0x8a7c <sprintf_P>
		(int) count_drive_types(SS80_TYPE),
		(int) count_drive_types(AMIGO_TYPE) );
	sprintf((char *) _line1, "%-16s", tmp);
   1c41e:	ed b7       	in	r30, 0x3d	; 61
   1c420:	fe b7       	in	r31, 0x3e	; 62
   1c422:	17 83       	std	Z+7, r17	; 0x07
   1c424:	06 83       	std	Z+6, r16	; 0x06
   1c426:	82 eb       	ldi	r24, 0xB2	; 178
   1c428:	93 e4       	ldi	r25, 0x43	; 67
   1c42a:	a0 e0       	ldi	r26, 0x00	; 0
   1c42c:	83 83       	std	Z+3, r24	; 0x03
   1c42e:	94 83       	std	Z+4, r25	; 0x04
   1c430:	a5 83       	std	Z+5, r26	; 0x05
   1c432:	8c e0       	ldi	r24, 0x0C	; 12
   1c434:	93 e0       	ldi	r25, 0x03	; 3
   1c436:	92 83       	std	Z+2, r25	; 0x02
   1c438:	81 83       	std	Z+1, r24	; 0x01
   1c43a:	0e 94 3e 45 	call	0x8a7c	; 0x8a7c <sprintf_P>
	sprintf((char *) _line2, "%-16s", "(C)Mike Gore");
   1c43e:	87 e1       	ldi	r24, 0x17	; 23
   1c440:	97 e1       	ldi	r25, 0x17	; 23
   1c442:	ed b7       	in	r30, 0x3d	; 61
   1c444:	fe b7       	in	r31, 0x3e	; 62
   1c446:	97 83       	std	Z+7, r25	; 0x07
   1c448:	86 83       	std	Z+6, r24	; 0x06
   1c44a:	8c ea       	ldi	r24, 0xAC	; 172
   1c44c:	93 e4       	ldi	r25, 0x43	; 67
   1c44e:	a0 e0       	ldi	r26, 0x00	; 0
   1c450:	83 83       	std	Z+3, r24	; 0x03
   1c452:	94 83       	std	Z+4, r25	; 0x04
   1c454:	a5 83       	std	Z+5, r26	; 0x05
   1c456:	85 ef       	ldi	r24, 0xF5	; 245
   1c458:	92 e0       	ldi	r25, 0x02	; 2
   1c45a:	92 83       	std	Z+2, r25	; 0x02
   1c45c:	81 83       	std	Z+1, r24	; 0x01
   1c45e:	0e 94 3e 45 	call	0x8a7c	; 0x8a7c <sprintf_P>

	i2c_task_run();
   1c462:	0e 94 06 2b 	call	0x560c	; 0x560c <i2c_task_run>
	delayms(1000);
   1c466:	68 ee       	ldi	r22, 0xE8	; 232
   1c468:	73 e0       	ldi	r23, 0x03	; 3
   1c46a:	80 e0       	ldi	r24, 0x00	; 0
   1c46c:	90 e0       	ldi	r25, 0x00	; 0
   1c46e:	0e 94 ac 26 	call	0x4d58	; 0x4d58 <delayms>
    if(!i2c_task.done || i2c_task.error )
   1c472:	80 91 84 17 	lds	r24, 0x1784	; 0x801784 <i2c_task+0x2>
   1c476:	88 23       	and	r24, r24
   1c478:	21 f0       	breq	.+8      	; 0x1c482 <main+0x384>
   1c47a:	80 91 85 17 	lds	r24, 0x1785	; 0x801785 <i2c_task+0x3>
   1c47e:	88 23       	and	r24, r24
   1c480:	61 f0       	breq	.+24     	; 0x1c49a <main+0x39c>
	{
		i2c_display_task_errors();
   1c482:	0e 94 6d 2d 	call	0x5ada	; 0x5ada <i2c_display_task_errors>
		printf("I2C LCD is NOT attached!\n");
   1c486:	82 e9       	ldi	r24, 0x92	; 146
   1c488:	93 e4       	ldi	r25, 0x43	; 67
   1c48a:	a0 e0       	ldi	r26, 0x00	; 0
   1c48c:	ed b7       	in	r30, 0x3d	; 61
   1c48e:	fe b7       	in	r31, 0x3e	; 62
   1c490:	81 83       	std	Z+1, r24	; 0x01
   1c492:	92 83       	std	Z+2, r25	; 0x02
   1c494:	a3 83       	std	Z+3, r26	; 0x03
   1c496:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
	}
#endif

///@brief Start main GPIB state machine
    printf("Starting GPIB TASK\n");
   1c49a:	8e e7       	ldi	r24, 0x7E	; 126
   1c49c:	93 e4       	ldi	r25, 0x43	; 67
   1c49e:	a0 e0       	ldi	r26, 0x00	; 0
   1c4a0:	ed b7       	in	r30, 0x3d	; 61
   1c4a2:	fe b7       	in	r31, 0x3e	; 62
   1c4a4:	81 83       	std	Z+1, r24	; 0x01
   1c4a6:	92 83       	std	Z+2, r25	; 0x02
   1c4a8:	a3 83       	std	Z+3, r26	; 0x03
   1c4aa:	0e 94 52 45 	call	0x8aa4	; 0x8aa4 <printf_P>
///@brief Keep the task running 
/// task does not exit unless a keypress occurs
/// When it restarts ALL GPIB states are reset 
    while ( 1)
    {
        user_task(1);
   1c4ae:	81 e0       	ldi	r24, 0x01	; 1
   1c4b0:	1c de       	rcall	.-968    	; 0x1c0ea <user_task>
   1c4b2:	fd cf       	rjmp	.-6      	; 0x1c4ae <main+0x3b0>

0001c4b4 <__mulsi3>:
   1c4b4:	db 01       	movw	r26, r22
   1c4b6:	8f 93       	push	r24
   1c4b8:	9f 93       	push	r25
   1c4ba:	8b d0       	rcall	.+278    	; 0x1c5d2 <__muluhisi3>
   1c4bc:	bf 91       	pop	r27
   1c4be:	af 91       	pop	r26
   1c4c0:	a2 9f       	mul	r26, r18
   1c4c2:	80 0d       	add	r24, r0
   1c4c4:	91 1d       	adc	r25, r1
   1c4c6:	a3 9f       	mul	r26, r19
   1c4c8:	90 0d       	add	r25, r0
   1c4ca:	b2 9f       	mul	r27, r18
   1c4cc:	90 0d       	add	r25, r0
   1c4ce:	11 24       	eor	r1, r1
   1c4d0:	08 95       	ret

0001c4d2 <__udivmodqi4>:
   1c4d2:	99 1b       	sub	r25, r25
   1c4d4:	79 e0       	ldi	r23, 0x09	; 9
   1c4d6:	04 c0       	rjmp	.+8      	; 0x1c4e0 <__udivmodqi4_ep>

0001c4d8 <__udivmodqi4_loop>:
   1c4d8:	99 1f       	adc	r25, r25
   1c4da:	96 17       	cp	r25, r22
   1c4dc:	08 f0       	brcs	.+2      	; 0x1c4e0 <__udivmodqi4_ep>
   1c4de:	96 1b       	sub	r25, r22

0001c4e0 <__udivmodqi4_ep>:
   1c4e0:	88 1f       	adc	r24, r24
   1c4e2:	7a 95       	dec	r23
   1c4e4:	c9 f7       	brne	.-14     	; 0x1c4d8 <__udivmodqi4_loop>
   1c4e6:	80 95       	com	r24
   1c4e8:	08 95       	ret

0001c4ea <__udivmodhi4>:
   1c4ea:	aa 1b       	sub	r26, r26
   1c4ec:	bb 1b       	sub	r27, r27
   1c4ee:	51 e1       	ldi	r21, 0x11	; 17
   1c4f0:	07 c0       	rjmp	.+14     	; 0x1c500 <__udivmodhi4_ep>

0001c4f2 <__udivmodhi4_loop>:
   1c4f2:	aa 1f       	adc	r26, r26
   1c4f4:	bb 1f       	adc	r27, r27
   1c4f6:	a6 17       	cp	r26, r22
   1c4f8:	b7 07       	cpc	r27, r23
   1c4fa:	10 f0       	brcs	.+4      	; 0x1c500 <__udivmodhi4_ep>
   1c4fc:	a6 1b       	sub	r26, r22
   1c4fe:	b7 0b       	sbc	r27, r23

0001c500 <__udivmodhi4_ep>:
   1c500:	88 1f       	adc	r24, r24
   1c502:	99 1f       	adc	r25, r25
   1c504:	5a 95       	dec	r21
   1c506:	a9 f7       	brne	.-22     	; 0x1c4f2 <__udivmodhi4_loop>
   1c508:	80 95       	com	r24
   1c50a:	90 95       	com	r25
   1c50c:	bc 01       	movw	r22, r24
   1c50e:	cd 01       	movw	r24, r26
   1c510:	08 95       	ret

0001c512 <__divmodhi4>:
   1c512:	97 fb       	bst	r25, 7
   1c514:	07 2e       	mov	r0, r23
   1c516:	16 f4       	brtc	.+4      	; 0x1c51c <__divmodhi4+0xa>
   1c518:	00 94       	com	r0
   1c51a:	06 d0       	rcall	.+12     	; 0x1c528 <__divmodhi4_neg1>
   1c51c:	77 fd       	sbrc	r23, 7
   1c51e:	08 d0       	rcall	.+16     	; 0x1c530 <__divmodhi4_neg2>
   1c520:	e4 df       	rcall	.-56     	; 0x1c4ea <__udivmodhi4>
   1c522:	07 fc       	sbrc	r0, 7
   1c524:	05 d0       	rcall	.+10     	; 0x1c530 <__divmodhi4_neg2>
   1c526:	3e f4       	brtc	.+14     	; 0x1c536 <__divmodhi4_exit>

0001c528 <__divmodhi4_neg1>:
   1c528:	90 95       	com	r25
   1c52a:	81 95       	neg	r24
   1c52c:	9f 4f       	sbci	r25, 0xFF	; 255
   1c52e:	08 95       	ret

0001c530 <__divmodhi4_neg2>:
   1c530:	70 95       	com	r23
   1c532:	61 95       	neg	r22
   1c534:	7f 4f       	sbci	r23, 0xFF	; 255

0001c536 <__divmodhi4_exit>:
   1c536:	08 95       	ret

0001c538 <__udivmodsi4>:
   1c538:	a1 e2       	ldi	r26, 0x21	; 33
   1c53a:	1a 2e       	mov	r1, r26
   1c53c:	aa 1b       	sub	r26, r26
   1c53e:	bb 1b       	sub	r27, r27
   1c540:	fd 01       	movw	r30, r26
   1c542:	0d c0       	rjmp	.+26     	; 0x1c55e <__udivmodsi4_ep>

0001c544 <__udivmodsi4_loop>:
   1c544:	aa 1f       	adc	r26, r26
   1c546:	bb 1f       	adc	r27, r27
   1c548:	ee 1f       	adc	r30, r30
   1c54a:	ff 1f       	adc	r31, r31
   1c54c:	a2 17       	cp	r26, r18
   1c54e:	b3 07       	cpc	r27, r19
   1c550:	e4 07       	cpc	r30, r20
   1c552:	f5 07       	cpc	r31, r21
   1c554:	20 f0       	brcs	.+8      	; 0x1c55e <__udivmodsi4_ep>
   1c556:	a2 1b       	sub	r26, r18
   1c558:	b3 0b       	sbc	r27, r19
   1c55a:	e4 0b       	sbc	r30, r20
   1c55c:	f5 0b       	sbc	r31, r21

0001c55e <__udivmodsi4_ep>:
   1c55e:	66 1f       	adc	r22, r22
   1c560:	77 1f       	adc	r23, r23
   1c562:	88 1f       	adc	r24, r24
   1c564:	99 1f       	adc	r25, r25
   1c566:	1a 94       	dec	r1
   1c568:	69 f7       	brne	.-38     	; 0x1c544 <__udivmodsi4_loop>
   1c56a:	60 95       	com	r22
   1c56c:	70 95       	com	r23
   1c56e:	80 95       	com	r24
   1c570:	90 95       	com	r25
   1c572:	9b 01       	movw	r18, r22
   1c574:	ac 01       	movw	r20, r24
   1c576:	bd 01       	movw	r22, r26
   1c578:	cf 01       	movw	r24, r30
   1c57a:	08 95       	ret

0001c57c <__divmodsi4>:
   1c57c:	05 2e       	mov	r0, r21
   1c57e:	97 fb       	bst	r25, 7
   1c580:	16 f4       	brtc	.+4      	; 0x1c586 <__divmodsi4+0xa>
   1c582:	00 94       	com	r0
   1c584:	0f d0       	rcall	.+30     	; 0x1c5a4 <__negsi2>
   1c586:	57 fd       	sbrc	r21, 7
   1c588:	05 d0       	rcall	.+10     	; 0x1c594 <__divmodsi4_neg2>
   1c58a:	d6 df       	rcall	.-84     	; 0x1c538 <__udivmodsi4>
   1c58c:	07 fc       	sbrc	r0, 7
   1c58e:	02 d0       	rcall	.+4      	; 0x1c594 <__divmodsi4_neg2>
   1c590:	46 f4       	brtc	.+16     	; 0x1c5a2 <__divmodsi4_exit>
   1c592:	08 c0       	rjmp	.+16     	; 0x1c5a4 <__negsi2>

0001c594 <__divmodsi4_neg2>:
   1c594:	50 95       	com	r21
   1c596:	40 95       	com	r20
   1c598:	30 95       	com	r19
   1c59a:	21 95       	neg	r18
   1c59c:	3f 4f       	sbci	r19, 0xFF	; 255
   1c59e:	4f 4f       	sbci	r20, 0xFF	; 255
   1c5a0:	5f 4f       	sbci	r21, 0xFF	; 255

0001c5a2 <__divmodsi4_exit>:
   1c5a2:	08 95       	ret

0001c5a4 <__negsi2>:
   1c5a4:	90 95       	com	r25
   1c5a6:	80 95       	com	r24
   1c5a8:	70 95       	com	r23
   1c5aa:	61 95       	neg	r22
   1c5ac:	7f 4f       	sbci	r23, 0xFF	; 255
   1c5ae:	8f 4f       	sbci	r24, 0xFF	; 255
   1c5b0:	9f 4f       	sbci	r25, 0xFF	; 255
   1c5b2:	08 95       	ret

0001c5b4 <__tablejump2__>:
   1c5b4:	ee 0f       	add	r30, r30
   1c5b6:	ff 1f       	adc	r31, r31
   1c5b8:	00 24       	eor	r0, r0
   1c5ba:	00 1c       	adc	r0, r0
   1c5bc:	0b be       	out	0x3b, r0	; 59
   1c5be:	07 90       	elpm	r0, Z+
   1c5c0:	f6 91       	elpm	r31, Z
   1c5c2:	e0 2d       	mov	r30, r0
   1c5c4:	09 94       	ijmp

0001c5c6 <__usmulhisi3>:
   1c5c6:	6f d0       	rcall	.+222    	; 0x1c6a6 <__umulhisi3>

0001c5c8 <__usmulhisi3_tail>:
   1c5c8:	b7 ff       	sbrs	r27, 7
   1c5ca:	08 95       	ret
   1c5cc:	82 1b       	sub	r24, r18
   1c5ce:	93 0b       	sbc	r25, r19
   1c5d0:	08 95       	ret

0001c5d2 <__muluhisi3>:
   1c5d2:	69 d0       	rcall	.+210    	; 0x1c6a6 <__umulhisi3>
   1c5d4:	a5 9f       	mul	r26, r21
   1c5d6:	90 0d       	add	r25, r0
   1c5d8:	b4 9f       	mul	r27, r20
   1c5da:	90 0d       	add	r25, r0
   1c5dc:	a4 9f       	mul	r26, r20
   1c5de:	80 0d       	add	r24, r0
   1c5e0:	91 1d       	adc	r25, r1
   1c5e2:	11 24       	eor	r1, r1
   1c5e4:	08 95       	ret

0001c5e6 <__mulshisi3>:
   1c5e6:	b7 ff       	sbrs	r27, 7
   1c5e8:	f4 cf       	rjmp	.-24     	; 0x1c5d2 <__muluhisi3>

0001c5ea <__mulohisi3>:
   1c5ea:	f3 df       	rcall	.-26     	; 0x1c5d2 <__muluhisi3>
   1c5ec:	82 1b       	sub	r24, r18
   1c5ee:	93 0b       	sbc	r25, r19
   1c5f0:	08 95       	ret

0001c5f2 <__negdi2>:
   1c5f2:	60 95       	com	r22
   1c5f4:	70 95       	com	r23
   1c5f6:	80 95       	com	r24
   1c5f8:	90 95       	com	r25
   1c5fa:	30 95       	com	r19
   1c5fc:	40 95       	com	r20
   1c5fe:	50 95       	com	r21
   1c600:	21 95       	neg	r18
   1c602:	3f 4f       	sbci	r19, 0xFF	; 255
   1c604:	4f 4f       	sbci	r20, 0xFF	; 255
   1c606:	5f 4f       	sbci	r21, 0xFF	; 255
   1c608:	6f 4f       	sbci	r22, 0xFF	; 255
   1c60a:	7f 4f       	sbci	r23, 0xFF	; 255
   1c60c:	8f 4f       	sbci	r24, 0xFF	; 255
   1c60e:	9f 4f       	sbci	r25, 0xFF	; 255
   1c610:	08 95       	ret

0001c612 <__prologue_saves__>:
   1c612:	2f 92       	push	r2
   1c614:	3f 92       	push	r3
   1c616:	4f 92       	push	r4
   1c618:	5f 92       	push	r5
   1c61a:	6f 92       	push	r6
   1c61c:	7f 92       	push	r7
   1c61e:	8f 92       	push	r8
   1c620:	9f 92       	push	r9
   1c622:	af 92       	push	r10
   1c624:	bf 92       	push	r11
   1c626:	cf 92       	push	r12
   1c628:	df 92       	push	r13
   1c62a:	ef 92       	push	r14
   1c62c:	ff 92       	push	r15
   1c62e:	0f 93       	push	r16
   1c630:	1f 93       	push	r17
   1c632:	cf 93       	push	r28
   1c634:	df 93       	push	r29
   1c636:	cd b7       	in	r28, 0x3d	; 61
   1c638:	de b7       	in	r29, 0x3e	; 62
   1c63a:	ca 1b       	sub	r28, r26
   1c63c:	db 0b       	sbc	r29, r27
   1c63e:	0f b6       	in	r0, 0x3f	; 63
   1c640:	f8 94       	cli
   1c642:	de bf       	out	0x3e, r29	; 62
   1c644:	0f be       	out	0x3f, r0	; 63
   1c646:	cd bf       	out	0x3d, r28	; 61
   1c648:	09 94       	ijmp

0001c64a <__epilogue_restores__>:
   1c64a:	2a 88       	ldd	r2, Y+18	; 0x12
   1c64c:	39 88       	ldd	r3, Y+17	; 0x11
   1c64e:	48 88       	ldd	r4, Y+16	; 0x10
   1c650:	5f 84       	ldd	r5, Y+15	; 0x0f
   1c652:	6e 84       	ldd	r6, Y+14	; 0x0e
   1c654:	7d 84       	ldd	r7, Y+13	; 0x0d
   1c656:	8c 84       	ldd	r8, Y+12	; 0x0c
   1c658:	9b 84       	ldd	r9, Y+11	; 0x0b
   1c65a:	aa 84       	ldd	r10, Y+10	; 0x0a
   1c65c:	b9 84       	ldd	r11, Y+9	; 0x09
   1c65e:	c8 84       	ldd	r12, Y+8	; 0x08
   1c660:	df 80       	ldd	r13, Y+7	; 0x07
   1c662:	ee 80       	ldd	r14, Y+6	; 0x06
   1c664:	fd 80       	ldd	r15, Y+5	; 0x05
   1c666:	0c 81       	ldd	r16, Y+4	; 0x04
   1c668:	1b 81       	ldd	r17, Y+3	; 0x03
   1c66a:	aa 81       	ldd	r26, Y+2	; 0x02
   1c66c:	b9 81       	ldd	r27, Y+1	; 0x01
   1c66e:	ce 0f       	add	r28, r30
   1c670:	d1 1d       	adc	r29, r1
   1c672:	0f b6       	in	r0, 0x3f	; 63
   1c674:	f8 94       	cli
   1c676:	de bf       	out	0x3e, r29	; 62
   1c678:	0f be       	out	0x3f, r0	; 63
   1c67a:	cd bf       	out	0x3d, r28	; 61
   1c67c:	ed 01       	movw	r28, r26
   1c67e:	08 95       	ret

0001c680 <__xload_1>:
   1c680:	57 fd       	sbrc	r21, 7
   1c682:	03 c0       	rjmp	.+6      	; 0x1c68a <__xload_1+0xa>
   1c684:	5b bf       	out	0x3b, r21	; 59
   1c686:	67 91       	elpm	r22, Z+
   1c688:	08 95       	ret
   1c68a:	60 81       	ld	r22, Z
   1c68c:	08 95       	ret

0001c68e <__cmpdi2_s8>:
   1c68e:	00 24       	eor	r0, r0
   1c690:	a7 fd       	sbrc	r26, 7
   1c692:	00 94       	com	r0
   1c694:	2a 17       	cp	r18, r26
   1c696:	30 05       	cpc	r19, r0
   1c698:	40 05       	cpc	r20, r0
   1c69a:	50 05       	cpc	r21, r0
   1c69c:	60 05       	cpc	r22, r0
   1c69e:	70 05       	cpc	r23, r0
   1c6a0:	80 05       	cpc	r24, r0
   1c6a2:	90 05       	cpc	r25, r0
   1c6a4:	08 95       	ret

0001c6a6 <__umulhisi3>:
   1c6a6:	a2 9f       	mul	r26, r18
   1c6a8:	b0 01       	movw	r22, r0
   1c6aa:	b3 9f       	mul	r27, r19
   1c6ac:	c0 01       	movw	r24, r0
   1c6ae:	a3 9f       	mul	r26, r19
   1c6b0:	70 0d       	add	r23, r0
   1c6b2:	81 1d       	adc	r24, r1
   1c6b4:	11 24       	eor	r1, r1
   1c6b6:	91 1d       	adc	r25, r1
   1c6b8:	b2 9f       	mul	r27, r18
   1c6ba:	70 0d       	add	r23, r0
   1c6bc:	81 1d       	adc	r24, r1
   1c6be:	11 24       	eor	r1, r1
   1c6c0:	91 1d       	adc	r25, r1
   1c6c2:	08 95       	ret

0001c6c4 <__subsf3>:
   1c6c4:	50 58       	subi	r21, 0x80	; 128

0001c6c6 <__addsf3>:
   1c6c6:	bb 27       	eor	r27, r27
   1c6c8:	aa 27       	eor	r26, r26
   1c6ca:	0e d0       	rcall	.+28     	; 0x1c6e8 <__addsf3x>
   1c6cc:	75 c1       	rjmp	.+746    	; 0x1c9b8 <__fp_round>
   1c6ce:	66 d1       	rcall	.+716    	; 0x1c99c <__fp_pscA>
   1c6d0:	30 f0       	brcs	.+12     	; 0x1c6de <__addsf3+0x18>
   1c6d2:	6b d1       	rcall	.+726    	; 0x1c9aa <__fp_pscB>
   1c6d4:	20 f0       	brcs	.+8      	; 0x1c6de <__addsf3+0x18>
   1c6d6:	31 f4       	brne	.+12     	; 0x1c6e4 <__addsf3+0x1e>
   1c6d8:	9f 3f       	cpi	r25, 0xFF	; 255
   1c6da:	11 f4       	brne	.+4      	; 0x1c6e0 <__addsf3+0x1a>
   1c6dc:	1e f4       	brtc	.+6      	; 0x1c6e4 <__addsf3+0x1e>
   1c6de:	5b c1       	rjmp	.+694    	; 0x1c996 <__fp_nan>
   1c6e0:	0e f4       	brtc	.+2      	; 0x1c6e4 <__addsf3+0x1e>
   1c6e2:	e0 95       	com	r30
   1c6e4:	e7 fb       	bst	r30, 7
   1c6e6:	51 c1       	rjmp	.+674    	; 0x1c98a <__fp_inf>

0001c6e8 <__addsf3x>:
   1c6e8:	e9 2f       	mov	r30, r25
   1c6ea:	77 d1       	rcall	.+750    	; 0x1c9da <__fp_split3>
   1c6ec:	80 f3       	brcs	.-32     	; 0x1c6ce <__addsf3+0x8>
   1c6ee:	ba 17       	cp	r27, r26
   1c6f0:	62 07       	cpc	r22, r18
   1c6f2:	73 07       	cpc	r23, r19
   1c6f4:	84 07       	cpc	r24, r20
   1c6f6:	95 07       	cpc	r25, r21
   1c6f8:	18 f0       	brcs	.+6      	; 0x1c700 <__addsf3x+0x18>
   1c6fa:	71 f4       	brne	.+28     	; 0x1c718 <__addsf3x+0x30>
   1c6fc:	9e f5       	brtc	.+102    	; 0x1c764 <__addsf3x+0x7c>
   1c6fe:	8f c1       	rjmp	.+798    	; 0x1ca1e <__fp_zero>
   1c700:	0e f4       	brtc	.+2      	; 0x1c704 <__addsf3x+0x1c>
   1c702:	e0 95       	com	r30
   1c704:	0b 2e       	mov	r0, r27
   1c706:	ba 2f       	mov	r27, r26
   1c708:	a0 2d       	mov	r26, r0
   1c70a:	0b 01       	movw	r0, r22
   1c70c:	b9 01       	movw	r22, r18
   1c70e:	90 01       	movw	r18, r0
   1c710:	0c 01       	movw	r0, r24
   1c712:	ca 01       	movw	r24, r20
   1c714:	a0 01       	movw	r20, r0
   1c716:	11 24       	eor	r1, r1
   1c718:	ff 27       	eor	r31, r31
   1c71a:	59 1b       	sub	r21, r25
   1c71c:	99 f0       	breq	.+38     	; 0x1c744 <__addsf3x+0x5c>
   1c71e:	59 3f       	cpi	r21, 0xF9	; 249
   1c720:	50 f4       	brcc	.+20     	; 0x1c736 <__addsf3x+0x4e>
   1c722:	50 3e       	cpi	r21, 0xE0	; 224
   1c724:	68 f1       	brcs	.+90     	; 0x1c780 <__addsf3x+0x98>
   1c726:	1a 16       	cp	r1, r26
   1c728:	f0 40       	sbci	r31, 0x00	; 0
   1c72a:	a2 2f       	mov	r26, r18
   1c72c:	23 2f       	mov	r18, r19
   1c72e:	34 2f       	mov	r19, r20
   1c730:	44 27       	eor	r20, r20
   1c732:	58 5f       	subi	r21, 0xF8	; 248
   1c734:	f3 cf       	rjmp	.-26     	; 0x1c71c <__addsf3x+0x34>
   1c736:	46 95       	lsr	r20
   1c738:	37 95       	ror	r19
   1c73a:	27 95       	ror	r18
   1c73c:	a7 95       	ror	r26
   1c73e:	f0 40       	sbci	r31, 0x00	; 0
   1c740:	53 95       	inc	r21
   1c742:	c9 f7       	brne	.-14     	; 0x1c736 <__addsf3x+0x4e>
   1c744:	7e f4       	brtc	.+30     	; 0x1c764 <__addsf3x+0x7c>
   1c746:	1f 16       	cp	r1, r31
   1c748:	ba 0b       	sbc	r27, r26
   1c74a:	62 0b       	sbc	r22, r18
   1c74c:	73 0b       	sbc	r23, r19
   1c74e:	84 0b       	sbc	r24, r20
   1c750:	ba f0       	brmi	.+46     	; 0x1c780 <__addsf3x+0x98>
   1c752:	91 50       	subi	r25, 0x01	; 1
   1c754:	a1 f0       	breq	.+40     	; 0x1c77e <__addsf3x+0x96>
   1c756:	ff 0f       	add	r31, r31
   1c758:	bb 1f       	adc	r27, r27
   1c75a:	66 1f       	adc	r22, r22
   1c75c:	77 1f       	adc	r23, r23
   1c75e:	88 1f       	adc	r24, r24
   1c760:	c2 f7       	brpl	.-16     	; 0x1c752 <__addsf3x+0x6a>
   1c762:	0e c0       	rjmp	.+28     	; 0x1c780 <__addsf3x+0x98>
   1c764:	ba 0f       	add	r27, r26
   1c766:	62 1f       	adc	r22, r18
   1c768:	73 1f       	adc	r23, r19
   1c76a:	84 1f       	adc	r24, r20
   1c76c:	48 f4       	brcc	.+18     	; 0x1c780 <__addsf3x+0x98>
   1c76e:	87 95       	ror	r24
   1c770:	77 95       	ror	r23
   1c772:	67 95       	ror	r22
   1c774:	b7 95       	ror	r27
   1c776:	f7 95       	ror	r31
   1c778:	9e 3f       	cpi	r25, 0xFE	; 254
   1c77a:	08 f0       	brcs	.+2      	; 0x1c77e <__addsf3x+0x96>
   1c77c:	b3 cf       	rjmp	.-154    	; 0x1c6e4 <__addsf3+0x1e>
   1c77e:	93 95       	inc	r25
   1c780:	88 0f       	add	r24, r24
   1c782:	08 f0       	brcs	.+2      	; 0x1c786 <__addsf3x+0x9e>
   1c784:	99 27       	eor	r25, r25
   1c786:	ee 0f       	add	r30, r30
   1c788:	97 95       	ror	r25
   1c78a:	87 95       	ror	r24
   1c78c:	08 95       	ret

0001c78e <__cmpsf2>:
   1c78e:	d9 d0       	rcall	.+434    	; 0x1c942 <__fp_cmp>
   1c790:	08 f4       	brcc	.+2      	; 0x1c794 <__cmpsf2+0x6>
   1c792:	81 e0       	ldi	r24, 0x01	; 1
   1c794:	08 95       	ret

0001c796 <__divsf3>:
   1c796:	0c d0       	rcall	.+24     	; 0x1c7b0 <__divsf3x>
   1c798:	0f c1       	rjmp	.+542    	; 0x1c9b8 <__fp_round>
   1c79a:	07 d1       	rcall	.+526    	; 0x1c9aa <__fp_pscB>
   1c79c:	40 f0       	brcs	.+16     	; 0x1c7ae <__divsf3+0x18>
   1c79e:	fe d0       	rcall	.+508    	; 0x1c99c <__fp_pscA>
   1c7a0:	30 f0       	brcs	.+12     	; 0x1c7ae <__divsf3+0x18>
   1c7a2:	21 f4       	brne	.+8      	; 0x1c7ac <__divsf3+0x16>
   1c7a4:	5f 3f       	cpi	r21, 0xFF	; 255
   1c7a6:	19 f0       	breq	.+6      	; 0x1c7ae <__divsf3+0x18>
   1c7a8:	f0 c0       	rjmp	.+480    	; 0x1c98a <__fp_inf>
   1c7aa:	51 11       	cpse	r21, r1
   1c7ac:	39 c1       	rjmp	.+626    	; 0x1ca20 <__fp_szero>
   1c7ae:	f3 c0       	rjmp	.+486    	; 0x1c996 <__fp_nan>

0001c7b0 <__divsf3x>:
   1c7b0:	14 d1       	rcall	.+552    	; 0x1c9da <__fp_split3>
   1c7b2:	98 f3       	brcs	.-26     	; 0x1c79a <__divsf3+0x4>

0001c7b4 <__divsf3_pse>:
   1c7b4:	99 23       	and	r25, r25
   1c7b6:	c9 f3       	breq	.-14     	; 0x1c7aa <__divsf3+0x14>
   1c7b8:	55 23       	and	r21, r21
   1c7ba:	b1 f3       	breq	.-20     	; 0x1c7a8 <__divsf3+0x12>
   1c7bc:	95 1b       	sub	r25, r21
   1c7be:	55 0b       	sbc	r21, r21
   1c7c0:	bb 27       	eor	r27, r27
   1c7c2:	aa 27       	eor	r26, r26
   1c7c4:	62 17       	cp	r22, r18
   1c7c6:	73 07       	cpc	r23, r19
   1c7c8:	84 07       	cpc	r24, r20
   1c7ca:	38 f0       	brcs	.+14     	; 0x1c7da <__divsf3_pse+0x26>
   1c7cc:	9f 5f       	subi	r25, 0xFF	; 255
   1c7ce:	5f 4f       	sbci	r21, 0xFF	; 255
   1c7d0:	22 0f       	add	r18, r18
   1c7d2:	33 1f       	adc	r19, r19
   1c7d4:	44 1f       	adc	r20, r20
   1c7d6:	aa 1f       	adc	r26, r26
   1c7d8:	a9 f3       	breq	.-22     	; 0x1c7c4 <__divsf3_pse+0x10>
   1c7da:	33 d0       	rcall	.+102    	; 0x1c842 <__divsf3_pse+0x8e>
   1c7dc:	0e 2e       	mov	r0, r30
   1c7de:	3a f0       	brmi	.+14     	; 0x1c7ee <__divsf3_pse+0x3a>
   1c7e0:	e0 e8       	ldi	r30, 0x80	; 128
   1c7e2:	30 d0       	rcall	.+96     	; 0x1c844 <__divsf3_pse+0x90>
   1c7e4:	91 50       	subi	r25, 0x01	; 1
   1c7e6:	50 40       	sbci	r21, 0x00	; 0
   1c7e8:	e6 95       	lsr	r30
   1c7ea:	00 1c       	adc	r0, r0
   1c7ec:	ca f7       	brpl	.-14     	; 0x1c7e0 <__divsf3_pse+0x2c>
   1c7ee:	29 d0       	rcall	.+82     	; 0x1c842 <__divsf3_pse+0x8e>
   1c7f0:	fe 2f       	mov	r31, r30
   1c7f2:	27 d0       	rcall	.+78     	; 0x1c842 <__divsf3_pse+0x8e>
   1c7f4:	66 0f       	add	r22, r22
   1c7f6:	77 1f       	adc	r23, r23
   1c7f8:	88 1f       	adc	r24, r24
   1c7fa:	bb 1f       	adc	r27, r27
   1c7fc:	26 17       	cp	r18, r22
   1c7fe:	37 07       	cpc	r19, r23
   1c800:	48 07       	cpc	r20, r24
   1c802:	ab 07       	cpc	r26, r27
   1c804:	b0 e8       	ldi	r27, 0x80	; 128
   1c806:	09 f0       	breq	.+2      	; 0x1c80a <__divsf3_pse+0x56>
   1c808:	bb 0b       	sbc	r27, r27
   1c80a:	80 2d       	mov	r24, r0
   1c80c:	bf 01       	movw	r22, r30
   1c80e:	ff 27       	eor	r31, r31
   1c810:	93 58       	subi	r25, 0x83	; 131
   1c812:	5f 4f       	sbci	r21, 0xFF	; 255
   1c814:	2a f0       	brmi	.+10     	; 0x1c820 <__divsf3_pse+0x6c>
   1c816:	9e 3f       	cpi	r25, 0xFE	; 254
   1c818:	51 05       	cpc	r21, r1
   1c81a:	68 f0       	brcs	.+26     	; 0x1c836 <__divsf3_pse+0x82>
   1c81c:	b6 c0       	rjmp	.+364    	; 0x1c98a <__fp_inf>
   1c81e:	00 c1       	rjmp	.+512    	; 0x1ca20 <__fp_szero>
   1c820:	5f 3f       	cpi	r21, 0xFF	; 255
   1c822:	ec f3       	brlt	.-6      	; 0x1c81e <__divsf3_pse+0x6a>
   1c824:	98 3e       	cpi	r25, 0xE8	; 232
   1c826:	dc f3       	brlt	.-10     	; 0x1c81e <__divsf3_pse+0x6a>
   1c828:	86 95       	lsr	r24
   1c82a:	77 95       	ror	r23
   1c82c:	67 95       	ror	r22
   1c82e:	b7 95       	ror	r27
   1c830:	f7 95       	ror	r31
   1c832:	9f 5f       	subi	r25, 0xFF	; 255
   1c834:	c9 f7       	brne	.-14     	; 0x1c828 <__divsf3_pse+0x74>
   1c836:	88 0f       	add	r24, r24
   1c838:	91 1d       	adc	r25, r1
   1c83a:	96 95       	lsr	r25
   1c83c:	87 95       	ror	r24
   1c83e:	97 f9       	bld	r25, 7
   1c840:	08 95       	ret
   1c842:	e1 e0       	ldi	r30, 0x01	; 1
   1c844:	66 0f       	add	r22, r22
   1c846:	77 1f       	adc	r23, r23
   1c848:	88 1f       	adc	r24, r24
   1c84a:	bb 1f       	adc	r27, r27
   1c84c:	62 17       	cp	r22, r18
   1c84e:	73 07       	cpc	r23, r19
   1c850:	84 07       	cpc	r24, r20
   1c852:	ba 07       	cpc	r27, r26
   1c854:	20 f0       	brcs	.+8      	; 0x1c85e <__divsf3_pse+0xaa>
   1c856:	62 1b       	sub	r22, r18
   1c858:	73 0b       	sbc	r23, r19
   1c85a:	84 0b       	sbc	r24, r20
   1c85c:	ba 0b       	sbc	r27, r26
   1c85e:	ee 1f       	adc	r30, r30
   1c860:	88 f7       	brcc	.-30     	; 0x1c844 <__divsf3_pse+0x90>
   1c862:	e0 95       	com	r30
   1c864:	08 95       	ret

0001c866 <__fixsfsi>:
   1c866:	04 d0       	rcall	.+8      	; 0x1c870 <__fixunssfsi>
   1c868:	68 94       	set
   1c86a:	b1 11       	cpse	r27, r1
   1c86c:	d9 c0       	rjmp	.+434    	; 0x1ca20 <__fp_szero>
   1c86e:	08 95       	ret

0001c870 <__fixunssfsi>:
   1c870:	bc d0       	rcall	.+376    	; 0x1c9ea <__fp_splitA>
   1c872:	88 f0       	brcs	.+34     	; 0x1c896 <__fixunssfsi+0x26>
   1c874:	9f 57       	subi	r25, 0x7F	; 127
   1c876:	90 f0       	brcs	.+36     	; 0x1c89c <__fixunssfsi+0x2c>
   1c878:	b9 2f       	mov	r27, r25
   1c87a:	99 27       	eor	r25, r25
   1c87c:	b7 51       	subi	r27, 0x17	; 23
   1c87e:	a0 f0       	brcs	.+40     	; 0x1c8a8 <__fixunssfsi+0x38>
   1c880:	d1 f0       	breq	.+52     	; 0x1c8b6 <__fixunssfsi+0x46>
   1c882:	66 0f       	add	r22, r22
   1c884:	77 1f       	adc	r23, r23
   1c886:	88 1f       	adc	r24, r24
   1c888:	99 1f       	adc	r25, r25
   1c88a:	1a f0       	brmi	.+6      	; 0x1c892 <__fixunssfsi+0x22>
   1c88c:	ba 95       	dec	r27
   1c88e:	c9 f7       	brne	.-14     	; 0x1c882 <__fixunssfsi+0x12>
   1c890:	12 c0       	rjmp	.+36     	; 0x1c8b6 <__fixunssfsi+0x46>
   1c892:	b1 30       	cpi	r27, 0x01	; 1
   1c894:	81 f0       	breq	.+32     	; 0x1c8b6 <__fixunssfsi+0x46>
   1c896:	c3 d0       	rcall	.+390    	; 0x1ca1e <__fp_zero>
   1c898:	b1 e0       	ldi	r27, 0x01	; 1
   1c89a:	08 95       	ret
   1c89c:	c0 c0       	rjmp	.+384    	; 0x1ca1e <__fp_zero>
   1c89e:	67 2f       	mov	r22, r23
   1c8a0:	78 2f       	mov	r23, r24
   1c8a2:	88 27       	eor	r24, r24
   1c8a4:	b8 5f       	subi	r27, 0xF8	; 248
   1c8a6:	39 f0       	breq	.+14     	; 0x1c8b6 <__fixunssfsi+0x46>
   1c8a8:	b9 3f       	cpi	r27, 0xF9	; 249
   1c8aa:	cc f3       	brlt	.-14     	; 0x1c89e <__fixunssfsi+0x2e>
   1c8ac:	86 95       	lsr	r24
   1c8ae:	77 95       	ror	r23
   1c8b0:	67 95       	ror	r22
   1c8b2:	b3 95       	inc	r27
   1c8b4:	d9 f7       	brne	.-10     	; 0x1c8ac <__fixunssfsi+0x3c>
   1c8b6:	3e f4       	brtc	.+14     	; 0x1c8c6 <__fixunssfsi+0x56>
   1c8b8:	90 95       	com	r25
   1c8ba:	80 95       	com	r24
   1c8bc:	70 95       	com	r23
   1c8be:	61 95       	neg	r22
   1c8c0:	7f 4f       	sbci	r23, 0xFF	; 255
   1c8c2:	8f 4f       	sbci	r24, 0xFF	; 255
   1c8c4:	9f 4f       	sbci	r25, 0xFF	; 255
   1c8c6:	08 95       	ret

0001c8c8 <__floatunsisf>:
   1c8c8:	e8 94       	clt
   1c8ca:	09 c0       	rjmp	.+18     	; 0x1c8de <__floatsisf+0x12>

0001c8cc <__floatsisf>:
   1c8cc:	97 fb       	bst	r25, 7
   1c8ce:	3e f4       	brtc	.+14     	; 0x1c8de <__floatsisf+0x12>
   1c8d0:	90 95       	com	r25
   1c8d2:	80 95       	com	r24
   1c8d4:	70 95       	com	r23
   1c8d6:	61 95       	neg	r22
   1c8d8:	7f 4f       	sbci	r23, 0xFF	; 255
   1c8da:	8f 4f       	sbci	r24, 0xFF	; 255
   1c8dc:	9f 4f       	sbci	r25, 0xFF	; 255
   1c8de:	99 23       	and	r25, r25
   1c8e0:	a9 f0       	breq	.+42     	; 0x1c90c <__floatsisf+0x40>
   1c8e2:	f9 2f       	mov	r31, r25
   1c8e4:	96 e9       	ldi	r25, 0x96	; 150
   1c8e6:	bb 27       	eor	r27, r27
   1c8e8:	93 95       	inc	r25
   1c8ea:	f6 95       	lsr	r31
   1c8ec:	87 95       	ror	r24
   1c8ee:	77 95       	ror	r23
   1c8f0:	67 95       	ror	r22
   1c8f2:	b7 95       	ror	r27
   1c8f4:	f1 11       	cpse	r31, r1
   1c8f6:	f8 cf       	rjmp	.-16     	; 0x1c8e8 <__floatsisf+0x1c>
   1c8f8:	fa f4       	brpl	.+62     	; 0x1c938 <__floatsisf+0x6c>
   1c8fa:	bb 0f       	add	r27, r27
   1c8fc:	11 f4       	brne	.+4      	; 0x1c902 <__floatsisf+0x36>
   1c8fe:	60 ff       	sbrs	r22, 0
   1c900:	1b c0       	rjmp	.+54     	; 0x1c938 <__floatsisf+0x6c>
   1c902:	6f 5f       	subi	r22, 0xFF	; 255
   1c904:	7f 4f       	sbci	r23, 0xFF	; 255
   1c906:	8f 4f       	sbci	r24, 0xFF	; 255
   1c908:	9f 4f       	sbci	r25, 0xFF	; 255
   1c90a:	16 c0       	rjmp	.+44     	; 0x1c938 <__floatsisf+0x6c>
   1c90c:	88 23       	and	r24, r24
   1c90e:	11 f0       	breq	.+4      	; 0x1c914 <__floatsisf+0x48>
   1c910:	96 e9       	ldi	r25, 0x96	; 150
   1c912:	11 c0       	rjmp	.+34     	; 0x1c936 <__floatsisf+0x6a>
   1c914:	77 23       	and	r23, r23
   1c916:	21 f0       	breq	.+8      	; 0x1c920 <__floatsisf+0x54>
   1c918:	9e e8       	ldi	r25, 0x8E	; 142
   1c91a:	87 2f       	mov	r24, r23
   1c91c:	76 2f       	mov	r23, r22
   1c91e:	05 c0       	rjmp	.+10     	; 0x1c92a <__floatsisf+0x5e>
   1c920:	66 23       	and	r22, r22
   1c922:	71 f0       	breq	.+28     	; 0x1c940 <__floatsisf+0x74>
   1c924:	96 e8       	ldi	r25, 0x86	; 134
   1c926:	86 2f       	mov	r24, r22
   1c928:	70 e0       	ldi	r23, 0x00	; 0
   1c92a:	60 e0       	ldi	r22, 0x00	; 0
   1c92c:	2a f0       	brmi	.+10     	; 0x1c938 <__floatsisf+0x6c>
   1c92e:	9a 95       	dec	r25
   1c930:	66 0f       	add	r22, r22
   1c932:	77 1f       	adc	r23, r23
   1c934:	88 1f       	adc	r24, r24
   1c936:	da f7       	brpl	.-10     	; 0x1c92e <__floatsisf+0x62>
   1c938:	88 0f       	add	r24, r24
   1c93a:	96 95       	lsr	r25
   1c93c:	87 95       	ror	r24
   1c93e:	97 f9       	bld	r25, 7
   1c940:	08 95       	ret

0001c942 <__fp_cmp>:
   1c942:	99 0f       	add	r25, r25
   1c944:	00 08       	sbc	r0, r0
   1c946:	55 0f       	add	r21, r21
   1c948:	aa 0b       	sbc	r26, r26
   1c94a:	e0 e8       	ldi	r30, 0x80	; 128
   1c94c:	fe ef       	ldi	r31, 0xFE	; 254
   1c94e:	16 16       	cp	r1, r22
   1c950:	17 06       	cpc	r1, r23
   1c952:	e8 07       	cpc	r30, r24
   1c954:	f9 07       	cpc	r31, r25
   1c956:	c0 f0       	brcs	.+48     	; 0x1c988 <__fp_cmp+0x46>
   1c958:	12 16       	cp	r1, r18
   1c95a:	13 06       	cpc	r1, r19
   1c95c:	e4 07       	cpc	r30, r20
   1c95e:	f5 07       	cpc	r31, r21
   1c960:	98 f0       	brcs	.+38     	; 0x1c988 <__fp_cmp+0x46>
   1c962:	62 1b       	sub	r22, r18
   1c964:	73 0b       	sbc	r23, r19
   1c966:	84 0b       	sbc	r24, r20
   1c968:	95 0b       	sbc	r25, r21
   1c96a:	39 f4       	brne	.+14     	; 0x1c97a <__fp_cmp+0x38>
   1c96c:	0a 26       	eor	r0, r26
   1c96e:	61 f0       	breq	.+24     	; 0x1c988 <__fp_cmp+0x46>
   1c970:	23 2b       	or	r18, r19
   1c972:	24 2b       	or	r18, r20
   1c974:	25 2b       	or	r18, r21
   1c976:	21 f4       	brne	.+8      	; 0x1c980 <__fp_cmp+0x3e>
   1c978:	08 95       	ret
   1c97a:	0a 26       	eor	r0, r26
   1c97c:	09 f4       	brne	.+2      	; 0x1c980 <__fp_cmp+0x3e>
   1c97e:	a1 40       	sbci	r26, 0x01	; 1
   1c980:	a6 95       	lsr	r26
   1c982:	8f ef       	ldi	r24, 0xFF	; 255
   1c984:	81 1d       	adc	r24, r1
   1c986:	81 1d       	adc	r24, r1
   1c988:	08 95       	ret

0001c98a <__fp_inf>:
   1c98a:	97 f9       	bld	r25, 7
   1c98c:	9f 67       	ori	r25, 0x7F	; 127
   1c98e:	80 e8       	ldi	r24, 0x80	; 128
   1c990:	70 e0       	ldi	r23, 0x00	; 0
   1c992:	60 e0       	ldi	r22, 0x00	; 0
   1c994:	08 95       	ret

0001c996 <__fp_nan>:
   1c996:	9f ef       	ldi	r25, 0xFF	; 255
   1c998:	80 ec       	ldi	r24, 0xC0	; 192
   1c99a:	08 95       	ret

0001c99c <__fp_pscA>:
   1c99c:	00 24       	eor	r0, r0
   1c99e:	0a 94       	dec	r0
   1c9a0:	16 16       	cp	r1, r22
   1c9a2:	17 06       	cpc	r1, r23
   1c9a4:	18 06       	cpc	r1, r24
   1c9a6:	09 06       	cpc	r0, r25
   1c9a8:	08 95       	ret

0001c9aa <__fp_pscB>:
   1c9aa:	00 24       	eor	r0, r0
   1c9ac:	0a 94       	dec	r0
   1c9ae:	12 16       	cp	r1, r18
   1c9b0:	13 06       	cpc	r1, r19
   1c9b2:	14 06       	cpc	r1, r20
   1c9b4:	05 06       	cpc	r0, r21
   1c9b6:	08 95       	ret

0001c9b8 <__fp_round>:
   1c9b8:	09 2e       	mov	r0, r25
   1c9ba:	03 94       	inc	r0
   1c9bc:	00 0c       	add	r0, r0
   1c9be:	11 f4       	brne	.+4      	; 0x1c9c4 <__fp_round+0xc>
   1c9c0:	88 23       	and	r24, r24
   1c9c2:	52 f0       	brmi	.+20     	; 0x1c9d8 <__fp_round+0x20>
   1c9c4:	bb 0f       	add	r27, r27
   1c9c6:	40 f4       	brcc	.+16     	; 0x1c9d8 <__fp_round+0x20>
   1c9c8:	bf 2b       	or	r27, r31
   1c9ca:	11 f4       	brne	.+4      	; 0x1c9d0 <__fp_round+0x18>
   1c9cc:	60 ff       	sbrs	r22, 0
   1c9ce:	04 c0       	rjmp	.+8      	; 0x1c9d8 <__fp_round+0x20>
   1c9d0:	6f 5f       	subi	r22, 0xFF	; 255
   1c9d2:	7f 4f       	sbci	r23, 0xFF	; 255
   1c9d4:	8f 4f       	sbci	r24, 0xFF	; 255
   1c9d6:	9f 4f       	sbci	r25, 0xFF	; 255
   1c9d8:	08 95       	ret

0001c9da <__fp_split3>:
   1c9da:	57 fd       	sbrc	r21, 7
   1c9dc:	90 58       	subi	r25, 0x80	; 128
   1c9de:	44 0f       	add	r20, r20
   1c9e0:	55 1f       	adc	r21, r21
   1c9e2:	59 f0       	breq	.+22     	; 0x1c9fa <__fp_splitA+0x10>
   1c9e4:	5f 3f       	cpi	r21, 0xFF	; 255
   1c9e6:	71 f0       	breq	.+28     	; 0x1ca04 <__fp_splitA+0x1a>
   1c9e8:	47 95       	ror	r20

0001c9ea <__fp_splitA>:
   1c9ea:	88 0f       	add	r24, r24
   1c9ec:	97 fb       	bst	r25, 7
   1c9ee:	99 1f       	adc	r25, r25
   1c9f0:	61 f0       	breq	.+24     	; 0x1ca0a <__fp_splitA+0x20>
   1c9f2:	9f 3f       	cpi	r25, 0xFF	; 255
   1c9f4:	79 f0       	breq	.+30     	; 0x1ca14 <__fp_splitA+0x2a>
   1c9f6:	87 95       	ror	r24
   1c9f8:	08 95       	ret
   1c9fa:	12 16       	cp	r1, r18
   1c9fc:	13 06       	cpc	r1, r19
   1c9fe:	14 06       	cpc	r1, r20
   1ca00:	55 1f       	adc	r21, r21
   1ca02:	f2 cf       	rjmp	.-28     	; 0x1c9e8 <__fp_split3+0xe>
   1ca04:	46 95       	lsr	r20
   1ca06:	f1 df       	rcall	.-30     	; 0x1c9ea <__fp_splitA>
   1ca08:	08 c0       	rjmp	.+16     	; 0x1ca1a <__fp_splitA+0x30>
   1ca0a:	16 16       	cp	r1, r22
   1ca0c:	17 06       	cpc	r1, r23
   1ca0e:	18 06       	cpc	r1, r24
   1ca10:	99 1f       	adc	r25, r25
   1ca12:	f1 cf       	rjmp	.-30     	; 0x1c9f6 <__fp_splitA+0xc>
   1ca14:	86 95       	lsr	r24
   1ca16:	71 05       	cpc	r23, r1
   1ca18:	61 05       	cpc	r22, r1
   1ca1a:	08 94       	sec
   1ca1c:	08 95       	ret

0001ca1e <__fp_zero>:
   1ca1e:	e8 94       	clt

0001ca20 <__fp_szero>:
   1ca20:	bb 27       	eor	r27, r27
   1ca22:	66 27       	eor	r22, r22
   1ca24:	77 27       	eor	r23, r23
   1ca26:	cb 01       	movw	r24, r22
   1ca28:	97 f9       	bld	r25, 7
   1ca2a:	08 95       	ret

0001ca2c <__gesf2>:
   1ca2c:	8a df       	rcall	.-236    	; 0x1c942 <__fp_cmp>
   1ca2e:	08 f4       	brcc	.+2      	; 0x1ca32 <__gesf2+0x6>
   1ca30:	8f ef       	ldi	r24, 0xFF	; 255
   1ca32:	08 95       	ret

0001ca34 <__mulsf3>:
   1ca34:	0b d0       	rcall	.+22     	; 0x1ca4c <__mulsf3x>
   1ca36:	c0 cf       	rjmp	.-128    	; 0x1c9b8 <__fp_round>
   1ca38:	b1 df       	rcall	.-158    	; 0x1c99c <__fp_pscA>
   1ca3a:	28 f0       	brcs	.+10     	; 0x1ca46 <__mulsf3+0x12>
   1ca3c:	b6 df       	rcall	.-148    	; 0x1c9aa <__fp_pscB>
   1ca3e:	18 f0       	brcs	.+6      	; 0x1ca46 <__mulsf3+0x12>
   1ca40:	95 23       	and	r25, r21
   1ca42:	09 f0       	breq	.+2      	; 0x1ca46 <__mulsf3+0x12>
   1ca44:	a2 cf       	rjmp	.-188    	; 0x1c98a <__fp_inf>
   1ca46:	a7 cf       	rjmp	.-178    	; 0x1c996 <__fp_nan>
   1ca48:	11 24       	eor	r1, r1
   1ca4a:	ea cf       	rjmp	.-44     	; 0x1ca20 <__fp_szero>

0001ca4c <__mulsf3x>:
   1ca4c:	c6 df       	rcall	.-116    	; 0x1c9da <__fp_split3>
   1ca4e:	a0 f3       	brcs	.-24     	; 0x1ca38 <__mulsf3+0x4>

0001ca50 <__mulsf3_pse>:
   1ca50:	95 9f       	mul	r25, r21
   1ca52:	d1 f3       	breq	.-12     	; 0x1ca48 <__mulsf3+0x14>
   1ca54:	95 0f       	add	r25, r21
   1ca56:	50 e0       	ldi	r21, 0x00	; 0
   1ca58:	55 1f       	adc	r21, r21
   1ca5a:	62 9f       	mul	r22, r18
   1ca5c:	f0 01       	movw	r30, r0
   1ca5e:	72 9f       	mul	r23, r18
   1ca60:	bb 27       	eor	r27, r27
   1ca62:	f0 0d       	add	r31, r0
   1ca64:	b1 1d       	adc	r27, r1
   1ca66:	63 9f       	mul	r22, r19
   1ca68:	aa 27       	eor	r26, r26
   1ca6a:	f0 0d       	add	r31, r0
   1ca6c:	b1 1d       	adc	r27, r1
   1ca6e:	aa 1f       	adc	r26, r26
   1ca70:	64 9f       	mul	r22, r20
   1ca72:	66 27       	eor	r22, r22
   1ca74:	b0 0d       	add	r27, r0
   1ca76:	a1 1d       	adc	r26, r1
   1ca78:	66 1f       	adc	r22, r22
   1ca7a:	82 9f       	mul	r24, r18
   1ca7c:	22 27       	eor	r18, r18
   1ca7e:	b0 0d       	add	r27, r0
   1ca80:	a1 1d       	adc	r26, r1
   1ca82:	62 1f       	adc	r22, r18
   1ca84:	73 9f       	mul	r23, r19
   1ca86:	b0 0d       	add	r27, r0
   1ca88:	a1 1d       	adc	r26, r1
   1ca8a:	62 1f       	adc	r22, r18
   1ca8c:	83 9f       	mul	r24, r19
   1ca8e:	a0 0d       	add	r26, r0
   1ca90:	61 1d       	adc	r22, r1
   1ca92:	22 1f       	adc	r18, r18
   1ca94:	74 9f       	mul	r23, r20
   1ca96:	33 27       	eor	r19, r19
   1ca98:	a0 0d       	add	r26, r0
   1ca9a:	61 1d       	adc	r22, r1
   1ca9c:	23 1f       	adc	r18, r19
   1ca9e:	84 9f       	mul	r24, r20
   1caa0:	60 0d       	add	r22, r0
   1caa2:	21 1d       	adc	r18, r1
   1caa4:	82 2f       	mov	r24, r18
   1caa6:	76 2f       	mov	r23, r22
   1caa8:	6a 2f       	mov	r22, r26
   1caaa:	11 24       	eor	r1, r1
   1caac:	9f 57       	subi	r25, 0x7F	; 127
   1caae:	50 40       	sbci	r21, 0x00	; 0
   1cab0:	8a f0       	brmi	.+34     	; 0x1cad4 <__mulsf3_pse+0x84>
   1cab2:	e1 f0       	breq	.+56     	; 0x1caec <__mulsf3_pse+0x9c>
   1cab4:	88 23       	and	r24, r24
   1cab6:	4a f0       	brmi	.+18     	; 0x1caca <__mulsf3_pse+0x7a>
   1cab8:	ee 0f       	add	r30, r30
   1caba:	ff 1f       	adc	r31, r31
   1cabc:	bb 1f       	adc	r27, r27
   1cabe:	66 1f       	adc	r22, r22
   1cac0:	77 1f       	adc	r23, r23
   1cac2:	88 1f       	adc	r24, r24
   1cac4:	91 50       	subi	r25, 0x01	; 1
   1cac6:	50 40       	sbci	r21, 0x00	; 0
   1cac8:	a9 f7       	brne	.-22     	; 0x1cab4 <__mulsf3_pse+0x64>
   1caca:	9e 3f       	cpi	r25, 0xFE	; 254
   1cacc:	51 05       	cpc	r21, r1
   1cace:	70 f0       	brcs	.+28     	; 0x1caec <__mulsf3_pse+0x9c>
   1cad0:	5c cf       	rjmp	.-328    	; 0x1c98a <__fp_inf>
   1cad2:	a6 cf       	rjmp	.-180    	; 0x1ca20 <__fp_szero>
   1cad4:	5f 3f       	cpi	r21, 0xFF	; 255
   1cad6:	ec f3       	brlt	.-6      	; 0x1cad2 <__mulsf3_pse+0x82>
   1cad8:	98 3e       	cpi	r25, 0xE8	; 232
   1cada:	dc f3       	brlt	.-10     	; 0x1cad2 <__mulsf3_pse+0x82>
   1cadc:	86 95       	lsr	r24
   1cade:	77 95       	ror	r23
   1cae0:	67 95       	ror	r22
   1cae2:	b7 95       	ror	r27
   1cae4:	f7 95       	ror	r31
   1cae6:	e7 95       	ror	r30
   1cae8:	9f 5f       	subi	r25, 0xFF	; 255
   1caea:	c1 f7       	brne	.-16     	; 0x1cadc <__mulsf3_pse+0x8c>
   1caec:	fe 2b       	or	r31, r30
   1caee:	88 0f       	add	r24, r24
   1caf0:	91 1d       	adc	r25, r1
   1caf2:	96 95       	lsr	r25
   1caf4:	87 95       	ror	r24
   1caf6:	97 f9       	bld	r25, 7
   1caf8:	08 95       	ret

0001cafa <round>:
   1cafa:	77 df       	rcall	.-274    	; 0x1c9ea <__fp_splitA>
   1cafc:	e0 f0       	brcs	.+56     	; 0x1cb36 <round+0x3c>
   1cafe:	9e 37       	cpi	r25, 0x7E	; 126
   1cb00:	d8 f0       	brcs	.+54     	; 0x1cb38 <round+0x3e>
   1cb02:	96 39       	cpi	r25, 0x96	; 150
   1cb04:	b8 f4       	brcc	.+46     	; 0x1cb34 <round+0x3a>
   1cb06:	9e 38       	cpi	r25, 0x8E	; 142
   1cb08:	48 f4       	brcc	.+18     	; 0x1cb1c <round+0x22>
   1cb0a:	67 2f       	mov	r22, r23
   1cb0c:	78 2f       	mov	r23, r24
   1cb0e:	88 27       	eor	r24, r24
   1cb10:	98 5f       	subi	r25, 0xF8	; 248
   1cb12:	f9 cf       	rjmp	.-14     	; 0x1cb06 <round+0xc>
   1cb14:	86 95       	lsr	r24
   1cb16:	77 95       	ror	r23
   1cb18:	67 95       	ror	r22
   1cb1a:	93 95       	inc	r25
   1cb1c:	95 39       	cpi	r25, 0x95	; 149
   1cb1e:	d0 f3       	brcs	.-12     	; 0x1cb14 <round+0x1a>
   1cb20:	b6 2f       	mov	r27, r22
   1cb22:	b1 70       	andi	r27, 0x01	; 1
   1cb24:	6b 0f       	add	r22, r27
   1cb26:	71 1d       	adc	r23, r1
   1cb28:	81 1d       	adc	r24, r1
   1cb2a:	20 f4       	brcc	.+8      	; 0x1cb34 <round+0x3a>
   1cb2c:	87 95       	ror	r24
   1cb2e:	77 95       	ror	r23
   1cb30:	67 95       	ror	r22
   1cb32:	93 95       	inc	r25
   1cb34:	02 c0       	rjmp	.+4      	; 0x1cb3a <__fp_mintl>
   1cb36:	1c c0       	rjmp	.+56     	; 0x1cb70 <__fp_mpack>
   1cb38:	73 cf       	rjmp	.-282    	; 0x1ca20 <__fp_szero>

0001cb3a <__fp_mintl>:
   1cb3a:	88 23       	and	r24, r24
   1cb3c:	71 f4       	brne	.+28     	; 0x1cb5a <__fp_mintl+0x20>
   1cb3e:	77 23       	and	r23, r23
   1cb40:	21 f0       	breq	.+8      	; 0x1cb4a <__fp_mintl+0x10>
   1cb42:	98 50       	subi	r25, 0x08	; 8
   1cb44:	87 2b       	or	r24, r23
   1cb46:	76 2f       	mov	r23, r22
   1cb48:	07 c0       	rjmp	.+14     	; 0x1cb58 <__fp_mintl+0x1e>
   1cb4a:	66 23       	and	r22, r22
   1cb4c:	11 f4       	brne	.+4      	; 0x1cb52 <__fp_mintl+0x18>
   1cb4e:	99 27       	eor	r25, r25
   1cb50:	0d c0       	rjmp	.+26     	; 0x1cb6c <__fp_mintl+0x32>
   1cb52:	90 51       	subi	r25, 0x10	; 16
   1cb54:	86 2b       	or	r24, r22
   1cb56:	70 e0       	ldi	r23, 0x00	; 0
   1cb58:	60 e0       	ldi	r22, 0x00	; 0
   1cb5a:	2a f0       	brmi	.+10     	; 0x1cb66 <__fp_mintl+0x2c>
   1cb5c:	9a 95       	dec	r25
   1cb5e:	66 0f       	add	r22, r22
   1cb60:	77 1f       	adc	r23, r23
   1cb62:	88 1f       	adc	r24, r24
   1cb64:	da f7       	brpl	.-10     	; 0x1cb5c <__fp_mintl+0x22>
   1cb66:	88 0f       	add	r24, r24
   1cb68:	96 95       	lsr	r25
   1cb6a:	87 95       	ror	r24
   1cb6c:	97 f9       	bld	r25, 7
   1cb6e:	08 95       	ret

0001cb70 <__fp_mpack>:
   1cb70:	9f 3f       	cpi	r25, 0xFF	; 255
   1cb72:	31 f0       	breq	.+12     	; 0x1cb80 <__fp_mpack_finite+0xc>

0001cb74 <__fp_mpack_finite>:
   1cb74:	91 50       	subi	r25, 0x01	; 1
   1cb76:	20 f4       	brcc	.+8      	; 0x1cb80 <__fp_mpack_finite+0xc>
   1cb78:	87 95       	ror	r24
   1cb7a:	77 95       	ror	r23
   1cb7c:	67 95       	ror	r22
   1cb7e:	b7 95       	ror	r27
   1cb80:	88 0f       	add	r24, r24
   1cb82:	91 1d       	adc	r25, r1
   1cb84:	96 95       	lsr	r25
   1cb86:	87 95       	ror	r24
   1cb88:	97 f9       	bld	r25, 7
   1cb8a:	08 95       	ret

0001cb8c <calloc>:
   1cb8c:	0f 93       	push	r16
   1cb8e:	1f 93       	push	r17
   1cb90:	cf 93       	push	r28
   1cb92:	df 93       	push	r29
   1cb94:	86 9f       	mul	r24, r22
   1cb96:	80 01       	movw	r16, r0
   1cb98:	87 9f       	mul	r24, r23
   1cb9a:	10 0d       	add	r17, r0
   1cb9c:	96 9f       	mul	r25, r22
   1cb9e:	10 0d       	add	r17, r0
   1cba0:	11 24       	eor	r1, r1
   1cba2:	c8 01       	movw	r24, r16
   1cba4:	0d d0       	rcall	.+26     	; 0x1cbc0 <malloc>
   1cba6:	ec 01       	movw	r28, r24
   1cba8:	00 97       	sbiw	r24, 0x00	; 0
   1cbaa:	21 f0       	breq	.+8      	; 0x1cbb4 <calloc+0x28>
   1cbac:	a8 01       	movw	r20, r16
   1cbae:	60 e0       	ldi	r22, 0x00	; 0
   1cbb0:	70 e0       	ldi	r23, 0x00	; 0
   1cbb2:	27 d1       	rcall	.+590    	; 0x1ce02 <memset>
   1cbb4:	ce 01       	movw	r24, r28
   1cbb6:	df 91       	pop	r29
   1cbb8:	cf 91       	pop	r28
   1cbba:	1f 91       	pop	r17
   1cbbc:	0f 91       	pop	r16
   1cbbe:	08 95       	ret

0001cbc0 <malloc>:
   1cbc0:	0f 93       	push	r16
   1cbc2:	1f 93       	push	r17
   1cbc4:	cf 93       	push	r28
   1cbc6:	df 93       	push	r29
   1cbc8:	82 30       	cpi	r24, 0x02	; 2
   1cbca:	91 05       	cpc	r25, r1
   1cbcc:	10 f4       	brcc	.+4      	; 0x1cbd2 <malloc+0x12>
   1cbce:	82 e0       	ldi	r24, 0x02	; 2
   1cbd0:	90 e0       	ldi	r25, 0x00	; 0
   1cbd2:	e0 91 ba 21 	lds	r30, 0x21BA	; 0x8021ba <__flp>
   1cbd6:	f0 91 bb 21 	lds	r31, 0x21BB	; 0x8021bb <__flp+0x1>
   1cbda:	20 e0       	ldi	r18, 0x00	; 0
   1cbdc:	30 e0       	ldi	r19, 0x00	; 0
   1cbde:	a0 e0       	ldi	r26, 0x00	; 0
   1cbe0:	b0 e0       	ldi	r27, 0x00	; 0
   1cbe2:	30 97       	sbiw	r30, 0x00	; 0
   1cbe4:	19 f1       	breq	.+70     	; 0x1cc2c <malloc+0x6c>
   1cbe6:	40 81       	ld	r20, Z
   1cbe8:	51 81       	ldd	r21, Z+1	; 0x01
   1cbea:	02 81       	ldd	r16, Z+2	; 0x02
   1cbec:	13 81       	ldd	r17, Z+3	; 0x03
   1cbee:	48 17       	cp	r20, r24
   1cbf0:	59 07       	cpc	r21, r25
   1cbf2:	c8 f0       	brcs	.+50     	; 0x1cc26 <malloc+0x66>
   1cbf4:	84 17       	cp	r24, r20
   1cbf6:	95 07       	cpc	r25, r21
   1cbf8:	69 f4       	brne	.+26     	; 0x1cc14 <malloc+0x54>
   1cbfa:	10 97       	sbiw	r26, 0x00	; 0
   1cbfc:	31 f0       	breq	.+12     	; 0x1cc0a <malloc+0x4a>
   1cbfe:	12 96       	adiw	r26, 0x02	; 2
   1cc00:	0c 93       	st	X, r16
   1cc02:	12 97       	sbiw	r26, 0x02	; 2
   1cc04:	13 96       	adiw	r26, 0x03	; 3
   1cc06:	1c 93       	st	X, r17
   1cc08:	27 c0       	rjmp	.+78     	; 0x1cc58 <malloc+0x98>
   1cc0a:	00 93 ba 21 	sts	0x21BA, r16	; 0x8021ba <__flp>
   1cc0e:	10 93 bb 21 	sts	0x21BB, r17	; 0x8021bb <__flp+0x1>
   1cc12:	22 c0       	rjmp	.+68     	; 0x1cc58 <malloc+0x98>
   1cc14:	21 15       	cp	r18, r1
   1cc16:	31 05       	cpc	r19, r1
   1cc18:	19 f0       	breq	.+6      	; 0x1cc20 <malloc+0x60>
   1cc1a:	42 17       	cp	r20, r18
   1cc1c:	53 07       	cpc	r21, r19
   1cc1e:	18 f4       	brcc	.+6      	; 0x1cc26 <malloc+0x66>
   1cc20:	9a 01       	movw	r18, r20
   1cc22:	bd 01       	movw	r22, r26
   1cc24:	ef 01       	movw	r28, r30
   1cc26:	df 01       	movw	r26, r30
   1cc28:	f8 01       	movw	r30, r16
   1cc2a:	db cf       	rjmp	.-74     	; 0x1cbe2 <malloc+0x22>
   1cc2c:	21 15       	cp	r18, r1
   1cc2e:	31 05       	cpc	r19, r1
   1cc30:	f9 f0       	breq	.+62     	; 0x1cc70 <malloc+0xb0>
   1cc32:	28 1b       	sub	r18, r24
   1cc34:	39 0b       	sbc	r19, r25
   1cc36:	24 30       	cpi	r18, 0x04	; 4
   1cc38:	31 05       	cpc	r19, r1
   1cc3a:	80 f4       	brcc	.+32     	; 0x1cc5c <malloc+0x9c>
   1cc3c:	8a 81       	ldd	r24, Y+2	; 0x02
   1cc3e:	9b 81       	ldd	r25, Y+3	; 0x03
   1cc40:	61 15       	cp	r22, r1
   1cc42:	71 05       	cpc	r23, r1
   1cc44:	21 f0       	breq	.+8      	; 0x1cc4e <malloc+0x8e>
   1cc46:	fb 01       	movw	r30, r22
   1cc48:	93 83       	std	Z+3, r25	; 0x03
   1cc4a:	82 83       	std	Z+2, r24	; 0x02
   1cc4c:	04 c0       	rjmp	.+8      	; 0x1cc56 <malloc+0x96>
   1cc4e:	90 93 bb 21 	sts	0x21BB, r25	; 0x8021bb <__flp+0x1>
   1cc52:	80 93 ba 21 	sts	0x21BA, r24	; 0x8021ba <__flp>
   1cc56:	fe 01       	movw	r30, r28
   1cc58:	32 96       	adiw	r30, 0x02	; 2
   1cc5a:	44 c0       	rjmp	.+136    	; 0x1cce4 <malloc+0x124>
   1cc5c:	fe 01       	movw	r30, r28
   1cc5e:	e2 0f       	add	r30, r18
   1cc60:	f3 1f       	adc	r31, r19
   1cc62:	81 93       	st	Z+, r24
   1cc64:	91 93       	st	Z+, r25
   1cc66:	22 50       	subi	r18, 0x02	; 2
   1cc68:	31 09       	sbc	r19, r1
   1cc6a:	39 83       	std	Y+1, r19	; 0x01
   1cc6c:	28 83       	st	Y, r18
   1cc6e:	3a c0       	rjmp	.+116    	; 0x1cce4 <malloc+0x124>
   1cc70:	20 91 b8 21 	lds	r18, 0x21B8	; 0x8021b8 <__brkval>
   1cc74:	30 91 b9 21 	lds	r19, 0x21B9	; 0x8021b9 <__brkval+0x1>
   1cc78:	23 2b       	or	r18, r19
   1cc7a:	41 f4       	brne	.+16     	; 0x1cc8c <malloc+0xcc>
   1cc7c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
   1cc80:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
   1cc84:	30 93 b9 21 	sts	0x21B9, r19	; 0x8021b9 <__brkval+0x1>
   1cc88:	20 93 b8 21 	sts	0x21B8, r18	; 0x8021b8 <__brkval>
   1cc8c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
   1cc90:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
   1cc94:	21 15       	cp	r18, r1
   1cc96:	31 05       	cpc	r19, r1
   1cc98:	41 f4       	brne	.+16     	; 0x1ccaa <malloc+0xea>
   1cc9a:	2d b7       	in	r18, 0x3d	; 61
   1cc9c:	3e b7       	in	r19, 0x3e	; 62
   1cc9e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
   1cca2:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
   1cca6:	24 1b       	sub	r18, r20
   1cca8:	35 0b       	sbc	r19, r21
   1ccaa:	e0 91 b8 21 	lds	r30, 0x21B8	; 0x8021b8 <__brkval>
   1ccae:	f0 91 b9 21 	lds	r31, 0x21B9	; 0x8021b9 <__brkval+0x1>
   1ccb2:	e2 17       	cp	r30, r18
   1ccb4:	f3 07       	cpc	r31, r19
   1ccb6:	a0 f4       	brcc	.+40     	; 0x1cce0 <malloc+0x120>
   1ccb8:	2e 1b       	sub	r18, r30
   1ccba:	3f 0b       	sbc	r19, r31
   1ccbc:	28 17       	cp	r18, r24
   1ccbe:	39 07       	cpc	r19, r25
   1ccc0:	78 f0       	brcs	.+30     	; 0x1cce0 <malloc+0x120>
   1ccc2:	ac 01       	movw	r20, r24
   1ccc4:	4e 5f       	subi	r20, 0xFE	; 254
   1ccc6:	5f 4f       	sbci	r21, 0xFF	; 255
   1ccc8:	24 17       	cp	r18, r20
   1ccca:	35 07       	cpc	r19, r21
   1cccc:	48 f0       	brcs	.+18     	; 0x1cce0 <malloc+0x120>
   1ccce:	4e 0f       	add	r20, r30
   1ccd0:	5f 1f       	adc	r21, r31
   1ccd2:	50 93 b9 21 	sts	0x21B9, r21	; 0x8021b9 <__brkval+0x1>
   1ccd6:	40 93 b8 21 	sts	0x21B8, r20	; 0x8021b8 <__brkval>
   1ccda:	81 93       	st	Z+, r24
   1ccdc:	91 93       	st	Z+, r25
   1ccde:	02 c0       	rjmp	.+4      	; 0x1cce4 <malloc+0x124>
   1cce0:	e0 e0       	ldi	r30, 0x00	; 0
   1cce2:	f0 e0       	ldi	r31, 0x00	; 0
   1cce4:	cf 01       	movw	r24, r30
   1cce6:	df 91       	pop	r29
   1cce8:	cf 91       	pop	r28
   1ccea:	1f 91       	pop	r17
   1ccec:	0f 91       	pop	r16
   1ccee:	08 95       	ret

0001ccf0 <free>:
   1ccf0:	cf 93       	push	r28
   1ccf2:	df 93       	push	r29
   1ccf4:	00 97       	sbiw	r24, 0x00	; 0
   1ccf6:	09 f4       	brne	.+2      	; 0x1ccfa <free+0xa>
   1ccf8:	81 c0       	rjmp	.+258    	; 0x1cdfc <free+0x10c>
   1ccfa:	fc 01       	movw	r30, r24
   1ccfc:	32 97       	sbiw	r30, 0x02	; 2
   1ccfe:	13 82       	std	Z+3, r1	; 0x03
   1cd00:	12 82       	std	Z+2, r1	; 0x02
   1cd02:	a0 91 ba 21 	lds	r26, 0x21BA	; 0x8021ba <__flp>
   1cd06:	b0 91 bb 21 	lds	r27, 0x21BB	; 0x8021bb <__flp+0x1>
   1cd0a:	10 97       	sbiw	r26, 0x00	; 0
   1cd0c:	81 f4       	brne	.+32     	; 0x1cd2e <free+0x3e>
   1cd0e:	20 81       	ld	r18, Z
   1cd10:	31 81       	ldd	r19, Z+1	; 0x01
   1cd12:	82 0f       	add	r24, r18
   1cd14:	93 1f       	adc	r25, r19
   1cd16:	20 91 b8 21 	lds	r18, 0x21B8	; 0x8021b8 <__brkval>
   1cd1a:	30 91 b9 21 	lds	r19, 0x21B9	; 0x8021b9 <__brkval+0x1>
   1cd1e:	28 17       	cp	r18, r24
   1cd20:	39 07       	cpc	r19, r25
   1cd22:	51 f5       	brne	.+84     	; 0x1cd78 <free+0x88>
   1cd24:	f0 93 b9 21 	sts	0x21B9, r31	; 0x8021b9 <__brkval+0x1>
   1cd28:	e0 93 b8 21 	sts	0x21B8, r30	; 0x8021b8 <__brkval>
   1cd2c:	67 c0       	rjmp	.+206    	; 0x1cdfc <free+0x10c>
   1cd2e:	ed 01       	movw	r28, r26
   1cd30:	20 e0       	ldi	r18, 0x00	; 0
   1cd32:	30 e0       	ldi	r19, 0x00	; 0
   1cd34:	ce 17       	cp	r28, r30
   1cd36:	df 07       	cpc	r29, r31
   1cd38:	40 f4       	brcc	.+16     	; 0x1cd4a <free+0x5a>
   1cd3a:	4a 81       	ldd	r20, Y+2	; 0x02
   1cd3c:	5b 81       	ldd	r21, Y+3	; 0x03
   1cd3e:	9e 01       	movw	r18, r28
   1cd40:	41 15       	cp	r20, r1
   1cd42:	51 05       	cpc	r21, r1
   1cd44:	f1 f0       	breq	.+60     	; 0x1cd82 <free+0x92>
   1cd46:	ea 01       	movw	r28, r20
   1cd48:	f5 cf       	rjmp	.-22     	; 0x1cd34 <free+0x44>
   1cd4a:	d3 83       	std	Z+3, r29	; 0x03
   1cd4c:	c2 83       	std	Z+2, r28	; 0x02
   1cd4e:	40 81       	ld	r20, Z
   1cd50:	51 81       	ldd	r21, Z+1	; 0x01
   1cd52:	84 0f       	add	r24, r20
   1cd54:	95 1f       	adc	r25, r21
   1cd56:	c8 17       	cp	r28, r24
   1cd58:	d9 07       	cpc	r29, r25
   1cd5a:	59 f4       	brne	.+22     	; 0x1cd72 <free+0x82>
   1cd5c:	88 81       	ld	r24, Y
   1cd5e:	99 81       	ldd	r25, Y+1	; 0x01
   1cd60:	84 0f       	add	r24, r20
   1cd62:	95 1f       	adc	r25, r21
   1cd64:	02 96       	adiw	r24, 0x02	; 2
   1cd66:	91 83       	std	Z+1, r25	; 0x01
   1cd68:	80 83       	st	Z, r24
   1cd6a:	8a 81       	ldd	r24, Y+2	; 0x02
   1cd6c:	9b 81       	ldd	r25, Y+3	; 0x03
   1cd6e:	93 83       	std	Z+3, r25	; 0x03
   1cd70:	82 83       	std	Z+2, r24	; 0x02
   1cd72:	21 15       	cp	r18, r1
   1cd74:	31 05       	cpc	r19, r1
   1cd76:	29 f4       	brne	.+10     	; 0x1cd82 <free+0x92>
   1cd78:	f0 93 bb 21 	sts	0x21BB, r31	; 0x8021bb <__flp+0x1>
   1cd7c:	e0 93 ba 21 	sts	0x21BA, r30	; 0x8021ba <__flp>
   1cd80:	3d c0       	rjmp	.+122    	; 0x1cdfc <free+0x10c>
   1cd82:	e9 01       	movw	r28, r18
   1cd84:	fb 83       	std	Y+3, r31	; 0x03
   1cd86:	ea 83       	std	Y+2, r30	; 0x02
   1cd88:	49 91       	ld	r20, Y+
   1cd8a:	59 91       	ld	r21, Y+
   1cd8c:	c4 0f       	add	r28, r20
   1cd8e:	d5 1f       	adc	r29, r21
   1cd90:	ec 17       	cp	r30, r28
   1cd92:	fd 07       	cpc	r31, r29
   1cd94:	61 f4       	brne	.+24     	; 0x1cdae <free+0xbe>
   1cd96:	80 81       	ld	r24, Z
   1cd98:	91 81       	ldd	r25, Z+1	; 0x01
   1cd9a:	84 0f       	add	r24, r20
   1cd9c:	95 1f       	adc	r25, r21
   1cd9e:	02 96       	adiw	r24, 0x02	; 2
   1cda0:	e9 01       	movw	r28, r18
   1cda2:	99 83       	std	Y+1, r25	; 0x01
   1cda4:	88 83       	st	Y, r24
   1cda6:	82 81       	ldd	r24, Z+2	; 0x02
   1cda8:	93 81       	ldd	r25, Z+3	; 0x03
   1cdaa:	9b 83       	std	Y+3, r25	; 0x03
   1cdac:	8a 83       	std	Y+2, r24	; 0x02
   1cdae:	e0 e0       	ldi	r30, 0x00	; 0
   1cdb0:	f0 e0       	ldi	r31, 0x00	; 0
   1cdb2:	12 96       	adiw	r26, 0x02	; 2
   1cdb4:	8d 91       	ld	r24, X+
   1cdb6:	9c 91       	ld	r25, X
   1cdb8:	13 97       	sbiw	r26, 0x03	; 3
   1cdba:	00 97       	sbiw	r24, 0x00	; 0
   1cdbc:	19 f0       	breq	.+6      	; 0x1cdc4 <free+0xd4>
   1cdbe:	fd 01       	movw	r30, r26
   1cdc0:	dc 01       	movw	r26, r24
   1cdc2:	f7 cf       	rjmp	.-18     	; 0x1cdb2 <free+0xc2>
   1cdc4:	8d 91       	ld	r24, X+
   1cdc6:	9c 91       	ld	r25, X
   1cdc8:	11 97       	sbiw	r26, 0x01	; 1
   1cdca:	9d 01       	movw	r18, r26
   1cdcc:	2e 5f       	subi	r18, 0xFE	; 254
   1cdce:	3f 4f       	sbci	r19, 0xFF	; 255
   1cdd0:	82 0f       	add	r24, r18
   1cdd2:	93 1f       	adc	r25, r19
   1cdd4:	20 91 b8 21 	lds	r18, 0x21B8	; 0x8021b8 <__brkval>
   1cdd8:	30 91 b9 21 	lds	r19, 0x21B9	; 0x8021b9 <__brkval+0x1>
   1cddc:	28 17       	cp	r18, r24
   1cdde:	39 07       	cpc	r19, r25
   1cde0:	69 f4       	brne	.+26     	; 0x1cdfc <free+0x10c>
   1cde2:	30 97       	sbiw	r30, 0x00	; 0
   1cde4:	29 f4       	brne	.+10     	; 0x1cdf0 <free+0x100>
   1cde6:	10 92 bb 21 	sts	0x21BB, r1	; 0x8021bb <__flp+0x1>
   1cdea:	10 92 ba 21 	sts	0x21BA, r1	; 0x8021ba <__flp>
   1cdee:	02 c0       	rjmp	.+4      	; 0x1cdf4 <free+0x104>
   1cdf0:	13 82       	std	Z+3, r1	; 0x03
   1cdf2:	12 82       	std	Z+2, r1	; 0x02
   1cdf4:	b0 93 b9 21 	sts	0x21B9, r27	; 0x8021b9 <__brkval+0x1>
   1cdf8:	a0 93 b8 21 	sts	0x21B8, r26	; 0x8021b8 <__brkval>
   1cdfc:	df 91       	pop	r29
   1cdfe:	cf 91       	pop	r28
   1ce00:	08 95       	ret

0001ce02 <memset>:
   1ce02:	dc 01       	movw	r26, r24
   1ce04:	01 c0       	rjmp	.+2      	; 0x1ce08 <memset+0x6>
   1ce06:	6d 93       	st	X+, r22
   1ce08:	41 50       	subi	r20, 0x01	; 1
   1ce0a:	50 40       	sbci	r21, 0x00	; 0
   1ce0c:	e0 f7       	brcc	.-8      	; 0x1ce06 <memset+0x4>
   1ce0e:	08 95       	ret

0001ce10 <_exit>:
   1ce10:	f8 94       	cli

0001ce12 <__stop_program>:
   1ce12:	ff cf       	rjmp	.-2      	; 0x1ce12 <__stop_program>
